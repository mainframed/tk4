         TITLE 'IEDSAI, INITIAL CMD PROCESSOR                          *
                        '
IEDSAI   CSECT ,                                                   0001
@PROLOG  DS    0H                                                  0002
         DC    A(0)        QCB
         DC    A(0)
         DC    X'06'       STCB
         DC    AL3(*-1)
         USING *,RBASE
         LR    RBASE,RLINK
IEDSAI IEDHJN START,HJN
*   RPRF=RPARM;                     /* ESTABLISH PRF ADDRESSABILITY  */
         LR    RPRF,RPARM                                          0539
*   PRFLINK=0;                      /* ONLY ONE PIU          @YM08077*/
         SLR   @10,@10                                             0540
         STCM  @10,7,PRFLINK(IEDQPPTR)                             0540
*   RPIU=ADDR(PRFPIUO)+PRFPIUO;     /* ESTABLISH PIU ADDRESSABILITY  */
         LA    RPIU,PRFPIUO(,IEDQPPTR)                             0541
         SLR   @10,@10                                             0541
         IC    @10,PRFPIUO(,IEDQPPTR)                              0541
         ALR   RPIU,@10                                            0541
*   RPARM=TTHOAF;                   /* TNT INDEX TO CONVERT TO TRM   */
         SLR   RPARM,RPARM                                         0542
         ICM   RPARM,3,TTHOAF(RPIU)                                0542
*   CALL IEDQTNT;                   /* CONVERT TTCIN TO TRM ADDR     */
         L     @15,AVTRNMPT(,IEDQAPTR)                             0543
         BALR  @14,@15                                             0543
*   RTRM=RPARM-LENGTH(IEDNTRM);     /* ESTABLISH TRM ADDRESSABILITY  */
         LA    @10,14                                              0544
         LR    RTRM,RPARM                                          0544
         SLR   RTRM,@10                                            0544
*   QCBPTR=TRMDESTQ;                /* QCB ADDRESS           @YM06505*/
         SLR   @09,@09                                             0545
         ICM   @09,7,TRMDESTQ(RTRM)                                0545
         ST    @09,QCBPTR                                          0545
*   RESPSAVE=BDUSYRSP&RSPMASK;      /* SAVE BDU RESPONSE W/O PHASE   */
         ALR   @10,RPIU                                            0546
         MVC   RESPSAVE(1),BDUSYRSP(@10)                           0546
         NI    RESPSAVE,X'9F'                                      0546
*   IF QCBPLCBN=ON THEN             /* ESTABLISH PLCB ADDRESSABILITY */
         L     @10,IEDQQPTR                                        0547
         SL    @10,@CF00044                                        0547
         TM    QCBPLCBN(@10),B'10000000'                           0547
         BNO   @RF00547                                            0547
*     RLCB=QCBPLCBA;                                               0548
         L     RLCB,QCBPLCBA-1(,@10)                               0548
         LA    RLCB,0(,RLCB)                                       0548
*   RETCODE=INITVAL;                /* INITILIZE RET CODE            */
@RF00547 MVI   RETCODE,X'FF'                                       0549
*                                                                  0550
*   /*****************************************************************/
*   /*                                                               */
*   /* START OF LOGIC                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0550
*   IF BDUERROR=ON THEN             /* IF ERROR INPUT                */
         TM    BDUERROR+14(RPIU),B'10000000'                       0550
         BNO   @RF00550                                            0550
*     CALL ERRLOCK;                                                0551
         BAL   @14,ERRLOCK                                         0551
*   ELSE                                                           0552
*     ;                             /*                       @YM07645*/
@RF00550 DS    0H                                                  0553
*   IF(BDUCMND=CD0READ×             /* IF THIS IS READ OR            */
*       BDUCMND=CD0INV) THEN        /* INVITE INPUT THEN DO          */
         LA    @10,14                                              0553
         ALR   @10,RPIU                                            0553
         CLI   BDUCMND(@10),X'01'                                  0553
         BE    @RT00553                                            0553
         CLI   BDUCMND(@10),X'05'                                  0553
         BNE   @RF00553                                            0553
@RT00553 DS    0H                                                  0554
*     CALL RDPRPROC;                /* READ/INVITE PROCESS           */
         BAL   @14,RDPRPROC                                        0554
*   ELSE                                                           0555
*     IF BDUCMND=CD0CTRL THEN       /* IF IT IS A CONTROL CMD        */
         B     @RC00553                                            0555
@RF00553 CLI   BDUCMND+14(RPIU),X'08'                              0555
         BNE   @RF00555                                            0555
*       CALL CONTROL;               /* DO CONTROL PROCESS            */
         BAL   @14,CONTROL                                         0556
*     ELSE                                                         0557
*       IF BDUCMND=CD0UNSIP THEN    /* IF INPUT IS UNSOLICITED THEN  */
         B     @RC00555                                            0557
@RF00555 CLI   BDUCMND+14(RPIU),X'77'                              0557
         BNE   @RF00557                                            0557
*         CALL UNSIP;               /* DO UNSIP PROCESS              */
         BAL   @14,UNSIP                                           0558
*       ELSE                                                       0559
*         IF BDUCMND=CD0CONT&       /* IF THIS IS A CONTACT RESPONSE */
*             TRMDIAL=ON THEN       /* FROM A DIAL TERMINAL          */
         B     @RC00557                                            0559
@RF00557 CLI   BDUCMND+14(RPIU),X'06'                              0559
         BNE   @RF00559                                            0559
         TM    TRMDIAL(RTRM),B'00001000'                           0559
         BNO   @RF00559                                            0559
*           CALL WAITCHN;           /* THIS ROUTINE PUTS INPUT ON  0560
*                                      WAIT CHAIN AND REQUESTS A   0560
*                                      PLCB. THE RETURN CODE IS SET
*                                      FOR IEDSARI IF THE PLCB WAS 0560
*                                      OBTAINED, ELSE IT IS SET FOR
*                                      DSPDISP                       */
         BAL   @14,WAITCHN                                         0560
*         ELSE                                                     0561
*           RETCODE=SAC;            /* ALL ELSE GOTO IEDSAC          */
         B     @RC00559                                            0561
@RF00559 MVI   RETCODE,X'30'                                       0561
*                                                                  0562
*   /*****************************************************************/
*   /*                                                               */
*   /* EXIT PROCESSING                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0562
*   RFY                                                            0562
*    (RSTCB) RSTD;                                                 0562
@RC00559 DS    0H                                                  0562
@RC00557 DS    0H                                                  0562
@RC00555 DS    0H                                                  0562
@RC00553 DS    0H                                                  0563
*   IF RETCODE=SAC THEN             /* CONTROL IS PASSED TO IEDSAC 0563
*                                      FOR                           */
         CLI   RETCODE,X'30'                                       0563
         BNE   @RF00563                                            0563
*     DO;                           /* PROCESSING ALL COMMANDS EXCEPT
*                                      READ                          */
*       RQCB=SAVTSAC;               /* AND INVITE.                   */
         L     @10,AVTSAVTP(,IEDQAPTR)                             0565
         L     RQCB,SAVTSAC(,@10)                                  0565
*       RPARM=RPRF;                 /* PASS BUFFER ADDRESS TO IEDSAC */
         LR    RPARM,RPRF                                          0566
*       RSTCB=RQCB->QCBSTCHN;       /* STCB ADDR FROM SAC QCB      0567
*                                                            @YM06906*/
         L     RSTCB,QCBSTCHN-1(,RQCB)                             0567
         LA    RSTCB,0(,RSTCB)                                     0567
*       CALL DSPBYPAS;                                             0568
         LA    @15,DSPBYPAS(,RDISP)                                0568
         BALR  @14,@15                                             0568
*     END;                                                         0569
*   ELSE                                                           0570
*     IF RETCODE=SARI THEN          /* PASS CONTROL TO IEDSARI FOR   */
         B     @RC00563                                            0570
@RF00563 CLI   RETCODE,X'40'                                       0570
         BNE   @RF00570                                            0570
*       DO;                         /* PROCESSING READ, INVITE AND 0571
*                                      DIAL CONTACT COMMANDS         */
*         RPARM=RLCB;               /* PASS PLCB ADDRESS TO IEDSARI  */
         LR    RPARM,RLCB                                          0572
*         RQCB=SAVTSARI;                                           0573
         L     @10,AVTSAVTP(,IEDQAPTR)                             0573
         L     RQCB,SAVTSARI(,@10)                                 0573
*         RSTCB=RQCB->QCBSTCHN;     /* STCB ADDR FROM SARI QCB     0574
*                                                            @YM06906*/
         L     RSTCB,QCBSTCHN-1(,RQCB)                             0574
         LA    RSTCB,0(,RSTCB)                                     0574
*         CALL DSPBYPAS;                                           0575
         LA    @15,DSPBYPAS(,RDISP)                                0575
         BALR  @14,@15                                             0575
*       END;                                                       0576
*     ELSE                                                         0577
*       CALL DSPDISP;               /* END OF PROCESSING             */
         B     @RC00570                                            0577
@RF00570 LA    @15,DSPDISP(,RDISP)                                 0577
         BALR  @14,@15                                             0577
*   RFY                                                            0578
*     RSTCB UNRSTD;                                                0578
*                                                                  0578
*   /*****************************************************************/
*   /*                                                               */
*   /* END OF LOGIC                                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0579
*                                                                  0579
*   /*****************************************************************/
*   /*                                                               */
*   /* BSCSTATS: IF INMSG/OUTMSG PROCESSING IN PROGRESS POST ERB TO  */
*   /* BD. ELSE, IF A BUFFER IS WAITING (SEE IEDSAC WRITE PROCESSING)*/
*   /* POST BUF TO PATH CONTROL OUTBOUND. CALL BSC STATUS RECORDING  */
*   /* ROUTINE                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0579
*BSCSTATS:                                                         0579
*   PROC OPTIONS(RETREG,SAVE(14));                                 0579
@EL00001 DS    0H                                                  0579
@EF00001 DS    0H                                                  0579
@ER00001 BR    @14                                                 0579
BSCSTATS ST    @14,@SA00002                                        0579
*   TRMSTPND=OFF;                   /* TURN OFF STATUS PENDING       */
         NI    TRMSTPND(RTRM),B'01111111'                          0580
*   IF QCBPLCBN=ON THEN             /* IF PLCB ASSIGNED              */
         L     @10,IEDQQPTR                                        0581
         AL    @10,@CF02301                                        0581
         TM    QCBPLCBN-4(@10),B'10000000'                         0581
         BNO   @RF00581                                            0581
*     DO;                                                          0582
*       IF LCBMSGNN=ON THEN         /* IF A MSGGEN IS OUT            */
         TM    LCBMSGNN(IEDQLPTR),B'01000000'                      0583
         BNO   @RF00583                                            0583
*         DO;                                                      0584
*           LCBMSGNN=OFF;           /* INDICATE NO MSGGEN OUT        */
         NI    LCBMSGNN(IEDQLPTR),B'10111111'                      0585
*           PRFPRI='E0'X;           /* SET PRIORITY                  */
         MVI   PRFPRI(IEDQPPTR),X'E0'                              0586
*           LCBERBQB=AVTMSGS->BDQCB;/* BD'S QCB ADDR                 */
         L     @10,AVTMSGS-1(,IEDQAPTR)                            0587
         MVC   LCBERBQB(3,IEDQLPTR),BDQCB+1(@10)                   0587
*           RPARM=ADDR(LCBERB);     /* ERB IS POSTED ELEMENT         */
         LA    RPARM,LCBERB(,IEDQLPTR)                             0588
*           CALL DSPPOSTR;          /* POST ERB TO IEDQBD            */
         LA    @15,DSPPOSTR(,RDISP)                                0589
         BALR  @14,@15                                             0589
*         END;                                                     0590
*       ELSE                                                       0591
*         DO;                                                      0591
         B     @RC00583                                            0591
@RF00583 DS    0H                                                  0592
*           IF LCBBFRW^=0 THEN      /* IF THERE IS A BFR WAITING     */
         L     @10,LCBBFRW-1(,IEDQLPTR)                            0592
         LA    @10,0(,@10)                                         0592
         LTR   @10,@10                                             0592
         BZ    @RF00592                                            0592
*             DO;                                                  0593
*               RPARM=LCBBFRW;      /* SET PTR TO WAITING BFR        */
         LR    RPARM,@10                                           0594
*               RPARM->PRFPRI=PRIPCOUT;/* SET POST PRIORITY  @YM05747*/
         MVI   PRFPRI(RPARM),X'E4'                                 0595
*               RPARM->PRFQCBA=ADDR(IEDPCOUT);/* QCB ADDRESS @YM05747*/
         L     @10,@CV02169                                        0596
         STCM  @10,7,PRFQCBA(RPARM)                                0596
*               CALL DSPPOSTR;      /* POST WAIT BUFFER TO PATH    0597
*                                      CONTROL OUT                   */
         LA    @15,DSPPOSTR(,RDISP)                                0597
         BALR  @14,@15                                             0597
*               LCBBFRW=0;          /* INDICATE NO BFR WAITS         */
         SLR   @10,@10                                             0598
         STCM  @10,7,LCBBFRW(IEDQLPTR)                             0598
*             END;                                                 0599
*         END;                                                     0600
@RF00592 DS    0H                                                  0601
*     END;                                                         0601
@RC00583 DS    0H                                                  0602
*   IF BDUPHASE^=RSP00&             /* IS THIS AN SOH%               */
*       (BDURESP=RSPE0A×            /* BSC STATUS                    */
*       BDURESP=RSPN05) THEN        /* MESSAGE                       */
@RF00581 LA    @10,14                                              0602
         ALR   @10,RPIU                                            0602
         TM    BDUPHASE(@10),B'01100000'                           0602
         BZ    @RF00602                                            0602
         TM    BDURESP(@10),B'00001010'                            0602
         BNO   @GL00004                                            0602
         TM    BDURESP(@10),B'00010101'                            0602
         BZ    @RT00602                                            0602
@GL00004 TM    BDURESP+14(RPIU),B'00000101'                        0602
         BNO   @RF00602                                            0602
         TM    BDURESP+14(RPIU),B'00011010'                        0602
         BNZ   @RF00602                                            0602
@RT00602 DS    0H                                                  0603
*     DO;                                                          0603
*       IF STATTYPE=REM3270 THEN    /* IS THIS REMOTE 3270 STATUS    */
         LA    @10,20                                              0604
         ALR   @10,RPIU                                            0604
         CLI   STATTYPE(@10),C'R'                                  0604
         BNE   @RF00604                                            0604
*         DO;                       /* YES, IT IS REMOTE 3270 STATUS */
*           IF(SSCR=ON×             /* CMD REJECT                    */
*               SSIR=ON×            /* INTERVENTION REQUIRED         */
*               SSEC=ON×            /* EQUIP CHK                     */
*               SSDC=ON×            /* DATA CHECK                    */
*               SSCC=ON) THEN       /* CNTRL CHK                     */
         TM    SSCR(@10),B'00111110'                               0606
         BZ    @RF00606                                            0606
*             CALL RCRDMDR;         /* LOG THIS STATUS               */
         BAL   @14,RCRDMDR                                         0607
*           ELSE                                                   0608
*             IF(SSDB=ON×           /* IF DEVICE BUSY OR             */
*                 SSDE=ON) THEN     /* DEVICE END THEN               */
         B     @RC00606                                            0608
@RF00606 TM    SSDB+20(RPIU),B'00001010'                           0608
         BNZ   @RT00608                                            0608
*               ;                   /* DO NOTHING                    */
*             ELSE                                                 0610
*               CALL RCRDMDR;       /* LOG OTHER STATUS              */
         BAL   @14,RCRDMDR                                         0610
*         END;                      /* NO, IT IS NOT REMOTE 3270   0611
*                                      STATUS                        */
*       ELSE                                                       0612
*         IF(STATTYPE=CTYPE×        /* IS THIS TYPE 'C' STATUS OR    */
*             STATTYPE=ETYPE) THEN  /* IS IT TYPE E STATUS?          */
         B     @RC00604                                            0612
@RF00604 LA    @10,20                                              0612
         ALR   @10,RPIU                                            0612
         CLI   STATTYPE(@10),C'C'                                  0612
         BE    @RT00612                                            0612
         CLI   STATTYPE(@10),C'E'                                  0612
         BNE   @RF00612                                            0612
@RT00612 DS    0H                                                  0613
*           CALL RCRDMDR;           /* THEN LOG STATUS               */
         BAL   @14,RCRDMDR                                         0613
*     END;                          /* DON'T LOG ANYTHING ELSE       */
*   END BSCSTATS;                                                  0615
@EL00002 DS    0H                                                  0615
@EF00002 DS    0H                                                  0615
@ER00002 L     @14,@SA00002                                        0615
         BR    @14                                                 0615
*                                                                  0616
*   /*****************************************************************/
*   /*                                                               */
*   /* CONTROL: IF THIS IS A RESET COMMAND, TURN OFF ERROR LOCK. IF  */
*   /* COMMAND IS NOT TAGGED, BUFFER WILL BE FREED. IF INPUT CONTAINS*/
*   /* AN OP CONTROL TAG, IT WILL BE RETURNED TO OP CONTROL SUBTASK. */
*   /* IF INPUT IS A TAGGED RESET GENERATED BY DEBLOCK OTHER THAN    */
*   /* TSO, INPUT WILL BE BYPASSED TO IEDSAC AND SUBSEQUENTLY POSTED */
*   /* TO MH AS AN ERROR BUFFER. TAGGED RESETS GENERATED BY TSO ARE  */
*   /* PUT ON WAIT CHAIN AND SENT TO IEDSARI IF A SEND OPERATION IS  */
*   /* IN PROGRESS, ELSE THEY ARE SENT TO IEDSAC.                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0616
*CONTROL:                                                          0616
*   PROC OPTIONS(RETREG,SAVE(14));                                 0616
CONTROL  ST    @14,@SA00003                                        0616
*   IF(BDUMODIF=>CD0CREL&           /* IS THIS A RESET       @YM06475*/
*       BDUMODIF=<CD0CRI)×          /* ... COMMAND WHICH     @YM06475*/
*       BDUMODIF=CD0CRC×            /* ... TURNS OFF THE     @YM06475*/
*       BDUMODIF=CD0CREOC THEN      /* ... NCP ERROR LOCK?   @YM06475*/
         LA    @10,14                                              0617
         ALR   @10,RPIU                                            0617
         CLI   BDUMODIF(@10),X'41'                                 0617
         BL    @GL00007                                            0617
         CLI   BDUMODIF(@10),X'44'                                 0617
         BNH   @RT00617                                            0617
@GL00007 LA    @10,14                                              0617
         ALR   @10,RPIU                                            0617
         CLI   BDUMODIF(@10),X'50'                                 0617
         BE    @RT00617                                            0617
         CLI   BDUMODIF(@10),X'60'                                 0617
         BNE   @RF00617                                            0617
@RT00617 DS    0H                                                  0618
*     TRMERLCK=OFF;                 /* YES, RESET TCAM BIT   @YM06475*/
         NI    TRMERLCK(RTRM),B'11111011'                          0618
*   IF(TTHTAG1=0&TTHTAG2=TTHRESET) THEN/* IF CMD IS A TAGGED RESET   */
@RF00617 CLI   TTHTAG1(RPIU),0                                     0619
         BNE   @RF00619                                            0619
         CLI   TTHTAG2(RPIU),X'02'                                 0619
         BNE   @RF00619                                            0619
*     DO;                                                          0620
*       IF TRMTSATN=ON×TRMLYNCH=ON THEN/* ATTN OR HANGUP?            */
         TM    TRMTSATN(RTRM),B'00000100'                          0621
         BO    @RT00621                                            0621
         TM    TRMLYNCH(RTRM),B'00000001'                          0621
         BNO   @RF00621                                            0621
@RT00621 DS    0H                                                  0622
*         DO;                                                      0622
*           IF QCBPLCBN=ON THEN     /* HAVE A PLCB?                  */
         L     @10,IEDQQPTR                                        0623
         AL    @10,@CF02301                                        0623
         TM    QCBPLCBN-4(@10),B'10000000'                         0623
         BNO   @RF00623                                            0623
*             DO;                                                  0624
*               IF LCBSENDN=ON THEN /* MARKED SENDING?               */
         TM    LCBSENDN(IEDQLPTR),B'00000001'                      0625
         BNO   @RF00625                                            0625
*                 RETCODE=SAC;      /* SEND INPUT TO IEDSAC          */
         MVI   RETCODE,X'30'                                       0626
*               ELSE                /* NO, ITS NOT SENDING SO...     */
*                 DO;                                              0627
         B     @RC00625                                            0627
@RF00625 DS    0H                                                  0628
*                   CALL PIULCBWC;  /* ...PUT INPUT ON WAIT CHAIN    */
         BAL   @14,PIULCBWC                                        0628
*                   RETCODE=SARI;   /* AND SEND TO IEDSARI           */
         MVI   RETCODE,X'40'                                       0629
*                 END;                                             0630
*               IF LCBINQ=ON THEN   /* IS ERB IN USE?                */
@RC00625 TM    LCBINQ(IEDQLPTR),B'00010000'                        0631
         BNO   @RF00631                                            0631
*                 CALL DLNKERB;     /* YES, DELINK ERB               */
         BAL   @14,DLNKERB                                         0632
*             END;                                                 0633
*           ELSE                    /* DON'T HAVE A PLCB SO...       */
*             CALL REQPLCB;         /* REQUEST A PLCB                */
         B     @RC00623                                            0634
@RF00623 BAL   @14,REQPLCB                                         0634
*         END;                                                     0635
*       ELSE                                                       0636
*         RETCODE=SAC;                                             0636
         B     @RC00621                                            0636
@RF00621 MVI   RETCODE,X'30'                                       0636
*     END;                                                         0637
*   ELSE                                                           0638
*     DO;                                                          0638
         B     @RC00619                                            0638
@RF00619 DS    0H                                                  0639
*       RETCODE=NOPST;              /* SET R.C. FOR DSPDISP          */
         MVI   RETCODE,X'00'                                       0639
*       IF TTHTAGS=TTHOPCTL THEN    /* IF INPUT IS OPCTL             */
         TM    TTHTAGS(RPIU),B'00010000'                           0640
         BNO   @RF00640                                            0640
         TM    TTHTAGS(RPIU),B'11100000'                           0640
         BNZ   @RF00640                                            0640
*         DO;                                                      0641
*           RPARM=RPRF;             /* PUT BFR PTR IN PARM REG       */
         LR    RPARM,RPRF                                          0642
*           CALL IEDXFMI;           /* CONVERT PIU TO A BUFFER       */
*                                                                  0643
         L     @10,AVTSAVTP(,IEDQAPTR)                             0643
         L     @15,SAVTXFMI(,@10)                                  0643
         BALR  @14,@15                                             0643
*           /*********************************************************/
*           /*                                                       */
*           /* OP CONTROL RU S CONTAIN A COMPLETE BDU THAT OP CONTROL*/
*           /* NEEDS TO LOOK AT AND SINCE PRFISIZE CONTAINS THE BDU, */
*           /* PRFISIZE IS REDUCED BY THE SIZE OF THE BDU SO THAT    */
*           /* OPCTL HAS ACCESS TO IT AS IF IT WHERE A PART OF THE   */
*           /* DATA.                                         @YM06147*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0644
*           PRFISIZE=PRFISIZE-6;    /*                       @YM06147*/
         SLR   @10,@10                                             0644
         IC    @10,PRFISIZE(,IEDQPPTR)                             0644
         SL    @10,@CF00058                                        0644
         STC   @10,PRFISIZE(,IEDQPPTR)                             0644
*           PRFPRI=PRIRESPB;        /* SET POST PRIORITY             */
         MVI   PRFPRI(IEDQPPTR),X'EA'                              0645
*           PRFQCBA=ADDR(AVTOPCOB); /* OP CNTRL QCB ADDRESS          */
         LA    @10,AVTOPCOB(,IEDQAPTR)                             0646
         STCM  @10,7,PRFQCBA(IEDQPPTR)                             0646
*           CALL DSPPOSTR;          /* POST BFR TO OP CNTRL          */
         LA    @15,DSPPOSTR(,RDISP)                                0647
         BALR  @14,@15                                             0647
*         END;                                                     0648
*       ELSE                        /* ALL REMAINING CONTROL COMMANDS*/
*         CALL FREEBFR;             /* ARE NOT PROCESSED             */
         B     @RC00640                                            0649
@RF00640 BAL   @14,FREEBFR                                         0649
*     END;                                                         0650
*   END CONTROL;                                                   0651
@EL00003 DS    0H                                                  0651
@EF00003 DS    0H                                                  0651
@ER00003 L     @14,@SA00003                                        0651
         BR    @14                                                 0651
*                                                                  0652
*   /*****************************************************************/
*   /*                                                               */
*   /* DLNKERB: DELINK ERB IF TSO ATTENTION OR HANGUP IS RECEIVED    */
*   /* WHILE A PLCB IS ASSIGNED                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0652
*   RFY                                                            0652
*    (RERB,                                                        0652
*     RHOLD,                                                       0652
*     RLAST,                                                       0652
*     RRETURN) RSTD;                                               0652
*   RFY                                                            0653
*    (IEDQPRF) BASED(RPARM);                                       0653
*DLNKERB:                                                          0654
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0654
*                                                                  0654
DLNKERB  DS    0H                                                  0655
*/*                                                                  */
*                                                                  0655
*   R14SAV1=RRETURN;                /* RERB=R14=RRETURN              */
         LR    R14SAV1,RRETURN                                     0655
*   RPRFSAV=RPRF;                   /* RHOLD=R6=RPRF                 */
         LR    RPRFSAV,RPRF                                        0656
*/*                                                                  */
*                                                                  0657
*   RHOLD=ADDR(LCBERB);             /* GET ADDR OF CURRENT ERB       */
         LA    RHOLD,LCBERB(,IEDQLPTR)                             0657
*   RERB=ADDR(AVTBFRTB)-(ADDR(LCBERBLK)-RHOLD);/* SET UP AVT PTR TO
*                                      LOOK LIKE LCBERBLK            */
         LA    RERB,AVTBFRTB(,IEDQAPTR)                            0658
         LA    @10,LCBERBLK(,IEDQLPTR)                             0658
         SLR   @10,RHOLD                                           0658
         SLR   RERB,@10                                            0658
*/*                                                                  */
*                                                                  0659
*   DO WHILE(RHOLD^=REQLINK);       /* LOOK FOR THIS ERB             */
         B     @DE00659                                            0659
@DL00659 DS    0H                                                  0660
*     RERB=REQLINK;                 /* FOLLOW LINK TO NEXT ERB       */
         L     @15,REQLINK-1(,RERB)                                0660
         LA    @15,0(,@15)                                         0660
         LR    RERB,@15                                            0660
*   END;                                                           0661
*                                                                  0661
@DE00659 L     @15,REQLINK-1(,RERB)                                0661
         LA    @15,0(,@15)                                         0661
         CR    RHOLD,@15                                           0661
         BNE   @DL00659                                            0661
*/*                                                                  */
*/* AT THIS POINT 'RERB' HAS ADDR OF 'PRIOR' ERB                     */
*/*                                                                  */
*                                                                  0662
*   REQLINK=LCBERBLK;               /* DELINK THE CURRENT ERB FROM 0662
*                                      CHAIN                         */
         MVC   REQLINK(3,RERB),LCBERBLK(IEDQLPTR)                  0662
*   IF LCBERBCH^=0 THEN             /* IF ERB IS HOLDING BUFFERS     */
         L     @15,LCBERBCH-1(,IEDQLPTR)                           0663
         LA    @15,0(,@15)                                         0663
         LTR   @15,@15                                             0663
         BZ    @RF00663                                            0663
*     DO;                                                          0664
*       RPARM=LCBERBCH;             /* PICK UP CHAIN HEAD            */
         LR    RPARM,@15                                           0665
*       LCBERBCH=LCBERBCH&&LCBERBCH;/* CLEAR CHAIN PTR               */
         LR    @10,@15                                             0666
         XR    @10,@15                                             0666
         STCM  @10,7,LCBERBCH(IEDQLPTR)                            0666
*/*                                                                  */
*                                                                  0667
*       DO UNTIL(RPARM=0);          /* LOOK FOR END OF CHAIN         */
@DL00667 DS    0H                                                  0668
*/*                                                                  */
*                                                                  0668
*         PRFQCBA=AVTBFRTB;         /* MOVE BUFFER RETURN QCB INTO 0668
*                                      UNIT                          */
         MVC   PRFQCBA(3,RPARM),AVTBFRTB+1(IEDQAPTR)               0668
*         PRFPRI=PRIBFRTB;          /* SET PRIORITY                  */
         MVI   PRFPRI(RPARM),X'E0'                                 0669
*         RHOLD=PRFLINK;            /* SAVE LINK TO NEXT UNIT        */
         L     @15,PRFLINK-1(,RPARM)                               0670
         LA    @15,0(,@15)                                         0670
         LR    RHOLD,@15                                           0670
*         PRFLINK=PRFLINK&&PRFLINK; /* CLEAR LINK FOR RETURN         */
         LR    @10,@15                                             0671
         XR    @10,@15                                             0671
         STCM  @10,7,PRFLINK(RPARM)                                0671
*         CALL DSPPOSTR;            /* R3,R4,R14,R15 ARE DESTROYED   */
         LA    @15,DSPPOSTR(,RDISP)                                0672
         BALR  @14,@15                                             0672
*         RPARM=RHOLD;              /* SET UP NEXT UNIT            0673
*                                      ADDRESSABILITY                */
         LR    RPARM,RHOLD                                         0673
*/*                                                                  */
*                                                                  0674
*       END;                                                       0674
@DE00667 LTR   RPARM,RPARM                                         0674
         BNZ   @DL00667                                            0674
*     END;                                                         0675
*   LCBINQ=OFF;                     /* TURN OFF THE 'ERB ENQUEUED' 0676
*                                      INDICATOR                     */
@RF00663 NI    LCBINQ(IEDQLPTR),B'11101111'                        0676
*   RPRF=RPRFSAV;                   /* RESTORE BASING POINTER        */
         LR    RPRF,RPRFSAV                                        0677
*   RRETURN=R14SAV1;                /* RESTORE RETURN ADDRESS        */
         LR    RRETURN,R14SAV1                                     0678
*   END DLNKERB;                                                   0679
@EL00004 DS    0H                                                  0679
@EF00004 DS    0H                                                  0679
@ER00004 BR    @14                                                 0679
*   RFY                                                            0680
*    (RERB,                                                        0680
*     RHOLD,                                                       0680
*     RLAST,                                                       0680
*     RRETURN) UNRSTD;                                             0680
*   RFY                                                            0681
*    (IEDQPRF) BASED(IEDQPPTR);                                    0681
*                                                                  0682
*   /*****************************************************************/
*   /*                                                               */
*   /* ERRLOCK: TCAM'S ERROR LOCK WILL BE SYNCHRONIZED WITH THE NCP'S*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0682
*   RFY                                                            0682
*    (RRETURN) RSTD;                                               0682
*ERRLOCK:                                                          0683
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0683
*                                                                  0683
ERRLOCK  DS    0H                                                  0684
*/*                                                                  */
*                                                                  0684
*   IF(TRMLINE=OFF&                 /* IF IT IS NOT A LINE           */
*       RESPSAVE^=RSPCRSET&         /* AND CMD WAS NOT RESET         */
*       BDUSYRSP^=RSPSTPND) THEN    /* AND BSC STATUS IS NOT PENDING */
         TM    TRMLINE(RTRM),B'10000000'                           0684
         BNZ   @RF00684                                            0684
         CLI   RESPSAVE,X'9E'                                      0684
         BE    @RF00684                                            0684
         LA    @15,14                                              0684
         ALR   @15,RPIU                                            0684
         CLI   BDUSYRSP(@15),X'A5'                                 0684
         BE    @RF00684                                            0684
*     DO;                                                          0685
*       IF BDUPHASE=RSP00 THEN      /* IF THIS INPUT IS PHASE 0      */
         TM    BDUPHASE(@15),B'01100000'                           0686
         BNZ   @RF00686                                            0686
*         DO;                                                      0687
*           IF(BDUXINIT=EXT80×      /* AND IT IS ........            */
*               BDUXINIT=EXTE0×     /* ....A HARDWARE ERROR OR NCP   */
*               BDURESP=RSP0E1C) THEN/* ERR LOCK SET BY PRIOR CMD    */
         TM    BDUXINIT(@15),B'10000000'                           0688
         BNO   @GL00014                                            0688
         TM    BDUXINIT(@15),B'01100000'                           0688
         BZ    @RT00688                                            0688
@GL00014 LA    @15,14                                              0688
         ALR   @15,RPIU                                            0688
         TM    BDUXINIT(@15),B'11100000'                           0688
         BO    @RT00688                                            0688
         TM    BDURESP(@15),B'00011100'                            0688
         BNO   @RF00688                                            0688
         TM    BDURESP(@15),B'00000011'                            0688
         BNZ   @RF00688                                            0688
@RT00688 DS    0H                                                  0689
*             TRMERLCK=ON;          /* THEN SET TCAM'S ERR LOCK      */
         OI    TRMERLCK(RTRM),B'00000100'                          0689
*         END;                                                     0690
*       ELSE                        /* IF IT IS NOT PHASE 0          */
*         TRMERLCK=ON;              /* THEN SET TCAM'S ERR LOCK      */
         B     @RC00686                                            0691
@RF00686 OI    TRMERLCK(RTRM),B'00000100'                          0691
*     END;                                                         0692
*                                                                  0692
*/*                                                                  */
*                                                                  0693
*   RFY                                                            0693
*    (RRETURN) UNRSTD;                                             0693
*   END ERRLOCK;                                                   0694
@EL00005 DS    0H                                                  0694
@EF00005 DS    0H                                                  0694
@ER00005 BR    @14                                                 0694
*                                                                  0695
*   /*****************************************************************/
*   /*                                                               */
*   /* FREEBFR: POST A BUFFER TO BUFFER RETURN                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0695
*FREEBFR:                                                          0695
*   PROC OPTIONS(RETREG,SAVE(14));                                 0695
FREEBFR  ST    @14,@SA00006                                        0695
*   PRFNBUNT=0;                     /* SET NUMB UNITS=0              */
         MVI   PRFNBUNT(IEDQPPTR),X'00'                            0696
*   PRFPRI='E0'X;                   /* INDICATE PRIORITY             */
         MVI   PRFPRI(IEDQPPTR),X'E0'                              0697
*   PRFQCBA=ADDR(AVTBFRTB);         /* QCB ADDRESS                   */
         LA    @10,AVTBFRTB(,IEDQAPTR)                             0698
         STCM  @10,7,PRFQCBA(IEDQPPTR)                             0698
*   RPARM=RPRF;                     /* BUFFER ADDRESS                */
         LR    RPARM,RPRF                                          0699
*   CALL DSPPOSTR;                                                 0700
         LA    @15,DSPPOSTR(,RDISP)                                0700
         BALR  @14,@15                                             0700
*   END FREEBFR;                                                   0701
@EL00006 DS    0H                                                  0701
@EF00006 DS    0H                                                  0701
@ER00006 L     @14,@SA00006                                        0701
         BR    @14                                                 0701
*                                                                  0702
*   /*****************************************************************/
*   /*                                                               */
*   /* NEGREP: IF A QUEUED NEGATIVE RESPONSE TO POLL IS RECEIVED     */
*   /* WHILE WAITING FOR A NEGATIVE RESPONSE TO POLL, A RESET        */
*   /* CONDITIONAL MUST BE SENT TO TERMINATE THE COMMAND IN THE NCP. */
*   /* IF A Q-NEGREP RESPONSE IS RECEIVED WHILE THE RESET IS OUT,    */
*   /* THEN FREE THE BUFFER. IF NOT WAITING FOR A Q-NEGREP, FREE THE */
*   /* BUFFER                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0702
*NEGREP:                                                           0702
*   PROC OPTIONS(RETREG,SAVE(14));                                 0702
NEGREP   ST    @14,@SA00007                                        0702
*   IF(TRMWTNEG=ON&TRMQNPL=OFF) THEN/* IF WAITING FOR NEG RESP TO  0703
*                                      POLL AND A RESET CONDITIONAL  */
         TM    TRMWTNEG(RTRM),B'10000000'                          0703
         BNO   @RF00703                                            0703
         TM    TRMQNPL(RTRM),B'00001000'                           0703
         BNZ   @RF00703                                            0703
*     DO;                           /* NOT SENT, THEN                */
*       TRMQNPL=ON;                 /* INDICATE Q-NEGREP RECEIVED    */
         OI    TRMQNPL(RTRM),B'00001000'                           0705
*       CALL SNDRESET;              /* SEND A RESET CONDITIONAL TO 0706
*                                      BRING DOWN THE INVITE         */
         BAL   @14,SNDRESET                                        0706
*     END;                                                         0707
*   ELSE                                                           0708
*     CALL FREEBFR;                 /* FREE BUFFER                   */
         B     @RC00703                                            0708
@RF00703 BAL   @14,FREEBFR                                         0708
*   RETCODE=NOPST;                  /* EXIT TO DISPATCHER            */
@RC00703 MVI   RETCODE,X'00'                                       0709
*   END NEGREP;                                                    0710
@EL00007 DS    0H                                                  0710
@EF00007 DS    0H                                                  0710
@ER00007 L     @14,@SA00007                                        0710
         BR    @14                                                 0710
*                                                                  0711
*   /*****************************************************************/
*   /*                                                               */
*   /* PIULCBWC: PUT TSO INPUT ON PLCB WAITCHAIN                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0711
*   RFY                                                            0711
*     RRETURN RSTD;                                                0711
*PIULCBWC:                                                         0712
*   PROC OPTIONS(RETREG,SAVE(14));                                 0712
*                                                                  0712
PIULCBWC ST    @14,12(,@13)                                        0712
*/*                                                                  */
*                                                                  0713
*   IF LCBWAITC=0 THEN              /* EMPTY WAIT CHAIN?             */
         L     @15,LCBWAITC-1(,IEDQLPTR)                           0713
         LA    @15,0(,@15)                                         0713
         LTR   @15,@15                                             0713
         BNZ   @RF00713                                            0713
*     LCBWAITC=RPRF;                /* MAKE THIS FIRST PIU ON WAITCHN*/
         STCM  RPRF,7,LCBWAITC(IEDQLPTR)                           0714
*   ELSE                                                           0715
*     DO;                                                          0715
         B     @RC00713                                            0715
@RF00713 DS    0H                                                  0716
*       RRETURN=RPRF;               /* SAVE CURRENT PIU ADDR         */
         LR    RRETURN,RPRF                                        0716
*       RPRF=LCBWAITC;              /* PICK UP FIRST PIU             */
         L     RPRF,LCBWAITC-1(,IEDQLPTR)                          0717
         LA    RPRF,0(,RPRF)                                       0717
*       DO WHILE(PRFLINK^=0);       /* SEARCH FOR END OF CHAIN       */
         B     @DE00718                                            0718
@DL00718 DS    0H                                                  0719
*         RPRF=PRFLINK;             /* PICK UP NEXT PIU              */
         L     @15,PRFLINK-1(,IEDQPPTR)                            0719
         LA    @15,0(,@15)                                         0719
         LR    RPRF,@15                                            0719
*       END;                                                       0720
@DE00718 L     @15,PRFLINK-1(,IEDQPPTR)                            0720
         LA    @15,0(,@15)                                         0720
         LTR   @15,@15                                             0720
         BNZ   @DL00718                                            0720
*       PRFLINK=RRETURN;            /* LINK CURRENT PIU INTO CHAIN   */
         STCM  RRETURN,7,PRFLINK(IEDQPPTR)                         0721
*     END;                                                         0722
*   END PIULCBWC;                                                  0723
@EL00008 DS    0H                                                  0723
@EF00008 DS    0H                                                  0723
@ER00008 L     @14,12(,@13)                                        0723
         BR    @14                                                 0723
*   RFY                                                            0724
*     RRETURN UNRSTD;                                              0724
*                                                                  0725
*   /*****************************************************************/
*   /*                                                               */
*   /* RCRDMDR: RECORD SELECTED NONREPETITIVE BSC STATUS             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0725
*RCRDMDR:                                                          0725
*   PROC OPTIONS(RETREG,SAVE(14));                                 0725
RCRDMDR  ST    @14,@SA00009                                        0725
*   RFY                                                            0726
*    (RZERO,                                                       0726
*     RLINK) RSTD;                                                 0726
*                                                                  0726
*/*                                                                  */
*                                                                  0727
*   RZERO=1;                                                       0727
         LA    @14,1                                               0727
         LR    RZERO,@14                                           0727
*   RPARM=1;                                                       0728
         LR    RPARM,@14                                           0728
*   CALL IEDQGA02;                  /* STEAL ONE BUFFER UNIT         */
         L     @15,AVTSTEAL(,IEDQAPTR)                             0729
         BALR  @14,@15                                             0729
*/*                                                                  */
*                                                                  0730
*   IF RLINK>0 THEN                 /* IF THE STEAL WAS GOOD         */
         LTR   RLINK,RLINK                                         0730
         BNP   @RF00730                                            0730
*     DO;                                                          0731
*       NEWUNIT=RLINK;              /* SAVE ADDRESS OF NEW UNIT      */
         LR    NEWUNIT,RLINK                                       0732
*/*                                                                  */
*/*COPY THE OLD UNIT INTO THE NEW UNIT                               */
*/*                                                                  */
*                                                                  0733
*       RCVUNIT(1:AVTKEYLE)=SRCUNIT(1:AVTKEYLE);                   0733
*                                                                  0733
         LH    @14,AVTKEYLE(,IEDQAPTR)                             0733
         BCTR  @14,0                                               0733
         EX    @14,@SM02307                                        0733
*/*                                                                  */
*                                                                  0734
*       RPARM=TTHOAF;                                              0734
         SLR   RPARM,RPARM                                         0734
         ICM   RPARM,3,TTHOAF(RPIU)                                0734
*       CALL IEDIAP04;              /* FIND THIS TERMINALS NETWORK 0735
*                                      ADDRESS                       */
         L     @10,AVTSAVTP(,IEDQAPTR)                             0735
         L     @15,SAVTTNTX(,@10)                                  0735
         BALR  @14,@15                                             0735
*/*                                                                  */
*                                                                  0736
*       RPARM=RLINK;                                               0736
         LR    RPARM,RLINK                                         0736
*       CALL IEDIAP06;              /* FIND THE 3705 LCB ADDRESS     */
         L     @10,AVTSAVTP(,IEDQAPTR)                             0737
         L     @15,SAVTLCBS(,@10)                                  0737
         BALR  @14,@15                                             0737
*/*                                                                  */
*                                                                  0738
*       RFY                                                        0738
*         IEDQLCB BASED(RLINK);                                    0738
*       RPARM=LCBOBRCH;             /* PICK UP HEAD OF OBR CHAIN     */
         L     RPARM,LCBOBRCH(,RLINK)                              0739
*       RZERO=NEWUNIT;              /* RETRIEVE POINTER TO NEW UNIT  */
         LR    RZERO,NEWUNIT                                       0740
*CSLOOP:                                                           0741
*       RZERO->PRFLINK=RPARM;       /* LINK NEW PIU TO FIRST PIU     */
CSLOOP   LR    @14,RZERO                                           0741
         STCM  RPARM,7,PRFLINK(@14)                                0741
*       CS(RPARM,RZERO,LCBOBRCH);   /* TRY TO ADD NEW PIU TO CHAIN   */
         CS    RPARM,@00,LCBOBRCH(RLINK)                           0742
*       BC(7,CSLOOP);               /* TRY AGAIN IF UNSUCCESSFUL     */
         BC    7,CSLOOP                                            0743
*/*                                                                  */
*                                                                  0744
*       RFY                                                        0744
*         IEDQLCB BASED(RLCB);                                     0744
*       RFY                                                        0745
*         RLINK UNRSTD;                                            0745
*     END;                                                         0746
*   END RCRDMDR;                                                   0747
@EL00009 DS    0H                                                  0747
@EF00009 DS    0H                                                  0747
@ER00009 L     @14,@SA00009                                        0747
         BR    @14                                                 0747
*   RFY                                                            0748
*     RZERO UNRSTD;                                                0748
*                                                                  0749
*   /*****************************************************************/
*   /*                                                               */
*   /* RDPRPROC: IF INPUT IS A READ OR INVITE, SUBROUTINES WILL BE   */
*   /* CALLED TO PROCESS NEG RESP TO POLL-QUEUED, BSC STATUS AND WAIT*/
*   /* CHAIN PROCESSING. ALL VALID RD/INVITES ARE PASSED TO IEDSARI. */
*   /* REMAINING VALID INPUT IS PASSED TO IEDSAC. IF NO FURTHER      */
*   /* PROCESSING IS REQUIRED CONTROL IS GIVEN TO THE DISPATCHER.    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0749
*RDPRPROC:                                                         0749
*   PROC OPTIONS(RETREG,SAVE(14));                                 0749
RDPRPROC ST    @14,@SA00010                                        0749
*   IF RESPSAVE=RSPQNEGR THEN       /* IF Q-NEGREP RCVD              */
         CLI   RESPSAVE,X'03'                                      0750
         BNE   @RF00750                                            0750
*     CALL NEGREP;                  /* CALL NEG RESP PROCESSOR       */
         BAL   @14,NEGREP                                          0751
*   ELSE                                                           0752
*     DO;                                                          0752
         B     @RC00750                                            0752
@RF00750 DS    0H                                                  0753
*       TRMWTNEG=OFF;               /* NOT WAITING FOR Q-NEGREP      */
         NI    TRMWTNEG(RTRM),B'01111111'                          0753
*       TRMQNPL=OFF;                /* NOT PROCESSING A Q-NEGREP     */
         NI    TRMQNPL(RTRM),B'11110111'                           0754
*     END;                                                         0755
*   IF RETCODE=INITVAL THEN         /* IF RET CODE STILL NOT SET     */
@RC00750 CLI   RETCODE,X'FF'                                       0756
         BNE   @RF00756                                            0756
*     DO;                                                          0757
*       IF TRMSTPND=ON×             /* IF BSC STATUS PENDING         */
*           (BDUPHASE^=RSP00&(BDURESP=RSPE0A×/* OR BSC ERR STAT RECVD*/
*           BDURESP=RSPN05)) THEN   /* OR BSC NORM STAT RECVD        */
         TM    TRMSTPND(RTRM),B'10000000'                          0758
         BO    @RT00758                                            0758
         LA    @10,14                                              0758
         ALR   @10,RPIU                                            0758
         TM    BDUPHASE(@10),B'01100000'                           0758
         BZ    @RF00758                                            0758
         TM    BDURESP(@10),B'00001010'                            0758
         BNO   @GL00018                                            0758
         TM    BDURESP(@10),B'00010101'                            0758
         BZ    @RT00758                                            0758
@GL00018 TM    BDURESP+14(RPIU),B'00000101'                        0758
         BNO   @RF00758                                            0758
         TM    BDURESP+14(RPIU),B'00011010'                        0758
         BNZ   @RF00758                                            0758
@RT00758 DS    0H                                                  0759
*         CALL BSCSTATS;            /* CALL BSC STATUS PROCESSING    */
         BAL   @14,BSCSTATS                                        0759
*       CALL WAITCHN;               /* PUT THIS INPUT ON WAIT CHAIN  */
@RF00758 BAL   @14,WAITCHN                                         0760
*     END;                                                         0761
*   END RDPRPROC;                                                  0762
@EL00010 DS    0H                                                  0762
@EF00010 DS    0H                                                  0762
@ER00010 L     @14,@SA00010                                        0762
         BR    @14                                                 0762
*                                                                  0763
*   /*****************************************************************/
*   /*                                                               */
*   /* REQPLCB: PLACE THE CURRENT INPUT ON QCB'S WAIT CHAIN AND      */
*   /* REQUEST A PLCB                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0763
*   RFY                                                            0763
*    (RLINK) RSTD;                                                 0763
*REQPLCB:                                                          0764
*   PROC OPTIONS(RETREG,SAVE(14));                                 0764
REQPLCB  ST    @14,@SA00011                                        0764
*   IF QCBWAITC=OFF THEN            /* IF QCB HAS NO WAIT CHAIN      */
         L     @14,IEDQQPTR                                        0765
         SL    @14,@CF00044                                        0765
         TM    QCBWAITC(@14),B'01000000'                           0765
         BNZ   @RF00765                                            0765
*     DO;                                                          0766
*       QCBWAITC=ON;                /* THEN INDICATE A WAIT CHAIN    */
         OI    QCBWAITC(@14),B'01000000'                           0767
*       QCBPLCBA=RPRF;              /* AND PUT INPUT ON WAIT CHAIN   */
         STCM  RPRF,7,QCBPLCBA(@14)                                0768
*     END;                                                         0769
*   ELSE                                                           0770
*     DO;                           /* IF THERE IS A QCB WAIT CHAIN  */
         B     @RC00765                                            0770
@RF00765 DS    0H                                                  0771
*       CURBFR=RPRF;                /* SAVE PTR TO THIS INPUT        */
         LR    CURBFR,RPRF                                         0771
*       RPRF=QCBPLCBA;              /* POINT TO WAIT CHAIN           */
         L     @14,IEDQQPTR                                        0772
         AL    @14,@CF02301                                        0772
         L     RPRF,QCBPLCBA-5(,@14)                               0772
         LA    RPRF,0(,RPRF)                                       0772
*       DO WHILE(PRFLINK^=0);       /* FIND END OF QCB WAIT CHAIN    */
         B     @DE00773                                            0773
@DL00773 DS    0H                                                  0774
*         RPRF=PRFLINK;             /* BUMP TO NEXT PIU              */
         L     @14,PRFLINK-1(,IEDQPPTR)                            0774
         LA    @14,0(,@14)                                         0774
         LR    RPRF,@14                                            0774
*       END;                                                       0775
@DE00773 L     @14,PRFLINK-1(,IEDQPPTR)                            0775
         LA    @14,0(,@14)                                         0775
         LTR   @14,@14                                             0775
         BNZ   @DL00773                                            0775
*       PRFLINK=CURBFR;             /* LINK CURRENT INPUT TO QCB'S 0776
*                                      WAIT CHAIN                    */
         STCM  CURBFR,7,PRFLINK(IEDQPPTR)                          0776
*       RPRF=CURBFR;                /* RESTORE PTR TO CURRENT INPUT  */
         LR    RPRF,CURBFR                                         0777
*     END;                                                         0778
*                                                                  0779
*   /*****************************************************************/
*   /*                                                               */
*   /* IF NO PLCB REQ IS PENDING, CALL IEDIAP TO REQUEST ONE. UPON   */
*   /* RETURN CHANGE THE STATE OF THE PLCB FROM SEND TO RECEIVE.     */
*   /* PRESERVE THE STATUS OF THE LCBOCNI BIT DURING THE STATE       */
*   /* CHANGE.                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0779
*   IF QCBRCVRQ=OFF THEN            /* IF NO PLCB REQ IS PENDING     */
@RC00765 L     @14,IEDQQPTR                                        0779
         SL    @14,@CF00044                                        0779
         TM    QCBRCVRQ(@14),B'00010000'                           0779
         BNZ   @RF00779                                            0779
*     DO;                                                          0780
*       QCBRCVRQ=ON;                /* REQ RECV                      */
         OI    QCBRCVRQ(@14),B'00010000'                           0781
*       RPARM=QCBPTR;               /* DEST QCB ADDRESS      @YM06505*/
         L     RPARM,QCBPTR                                        0782
*       CALL IEDIAP;                /* CALL IEDIAP TO REQ PLCB       */
         L     @10,AVTSAVTP(,IEDQAPTR)                             0783
         L     @15,SAVTPREQ(,@10)                                  0783
         BALR  @14,@15                                             0783
*       IF RLINK=0 THEN             /* IF PLCB REQUEST WAS ENQUEUED  */
         LTR   RLINK,RLINK                                         0784
         BNZ   @RF00784                                            0784
*         RETCODE=NOPST;            /* SET RET CODE FOR DSPDISP      */
         MVI   RETCODE,X'00'                                       0785
*       ELSE                        /* ELSE, GOT A PLCB              */
*         DO;                                                      0786
         B     @RC00784                                            0786
@RF00784 DS    0H                                                  0787
*           RLCB=RLINK;             /* SETUP ADDRESSABILITY TO PLCB  */
         LR    RLCB,RLINK                                          0787
*           IF LCBOCNI=ON THEN      /* PRESERVE STATUS OF OCNI       */
         TM    LCBOCNI(RLCB),B'00100000'                           0788
         BNO   @RF00788                                            0788
*             DO;                                                  0789
*               LCBSTAT1=0;         /* TURN ALL BITS OFF AND         */
         MVI   LCBSTAT1(RLCB),X'00'                                0790
*               LCBOCNI=ON;         /* TURN OCNI BACK ON             */
*               LCBRECVN=ON;        /* THEN INDICATE RECEIVE STATE   */
         OI    LCBOCNI(RLCB),B'00100010'                           0792
*             END;                                                 0793
*           ELSE                                                   0794
*             DO;                                                  0794
         B     @RC00788                                            0794
@RF00788 DS    0H                                                  0795
*               LCBSTAT1=0;         /* TURN ALL BITS OFF             */
         MVI   LCBSTAT1(RLCB),X'00'                                0795
*               LCBRECVN=ON;        /* INDICATE RECEIVE STATE        */
         OI    LCBRECVN(RLCB),B'00000010'                          0796
*             END;                                                 0797
*           RETCODE=SARI;           /* INDICATE BYPASS TO IEDSARI    */
@RC00788 MVI   RETCODE,X'40'                                       0798
*         END;                                                     0799
*     END;                                                         0800
*   ELSE                            /* THERE IS ALREADY A PLCB     0801
*                                      REQUEST SO                    */
*     RETCODE=NOPST;                /* SET RET CODE FOR DSPDISP      */
         B     @RC00779                                            0801
@RF00779 MVI   RETCODE,X'00'                                       0801
*   RFY                                                            0802
*    (RLINK) UNRSTD;                                               0802
*   END REQPLCB;                                                   0803
@EL00011 DS    0H                                                  0803
@EF00011 DS    0H                                                  0803
@ER00011 L     @14,@SA00011                                        0803
         BR    @14                                                 0803
*                                                                  0804
*   /*****************************************************************/
*   /*                                                               */
*   /* SNDRESET: BUILD A RESET CONDITIONAL IN CURRENT BUFFER AND POST*/
*   /* TO PATH CONTROL OUT.                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0804
*SNDRESET:                                                         0804
*   PROC OPTIONS(RETREG,SAVE(14));                                 0804
SNDRESET ST    @14,@SA00012                                        0804
*   TTHBYTE0=TTH0BYT0;              /* INDICATE FID 0 PIU            */
         MVI   TTHBYTE0(RPIU),X'0C'                                0805
*   TTHBYTE1=TTH0BYT1;              /* NO FLAGS                      */
         MVI   TTHBYTE1(RPIU),X'00'                                0806
*   CUROAF=TTHOAF;                  /* SAVE OAF                      */
         MVC   CUROAF(2),TTHOAF(RPIU)                              0807
*   TTHOAF=TTHDAF;                  /* REVERSE OAF AND               */
         MVC   @TS00001(2),TTHDAF(RPIU)                            0808
         MVC   TTHOAF(2,RPIU),@TS00001                             0808
*   TTHDAF=CUROAF;                  /* DAF PAIR                      */
         MVC   TTHDAF(2,RPIU),CUROAF                               0809
*   TTHTAG=0;                       /* INDICATE NO TAG               */
         SLR   @10,@10                                             0810
         STCM  @10,3,TTHTAG(RPIU)                                  0810
*   TTHDCF=LENGTH(IEDRH)+LENGTH(IEDBDU)+/* SET DATA LENGTH           */
*       LENGTH(PIU0PAD);                                           0811
         MVC   TTHDCF(2,RPIU),@CH01422                             0811
*   PIU0RH=TRHFID0;                 /* BUILD FID 0 RH                */
         MVC   PIU0RH(3,RPIU),@CB01834                             0812
*   IEDBDU=IEDBDU&&IEDBDU;          /* CLEAR BDU                     */
         LA    @10,14                                              0813
         ALR   @10,RPIU                                            0813
         XC    IEDBDU(6,@10),IEDBDU(@10)                           0813
*   BDUCMND=CD0CTRL;                /* RESET                         */
         MVI   BDUCMND(@10),X'08'                                  0814
*   BDUMODIF=CD0CRC;                /* CONDITIONAL                   */
         MVI   BDUMODIF(@10),X'50'                                 0815
*   RPARM=RPRF;                     /* BFR ADDRESS IN PARM REG       */
         LR    RPARM,RPRF                                          0816
*   PRFPRI=PRIPCOUT;                /* PRIORITY OF THIS POST         */
         MVI   PRFPRI(IEDQPPTR),X'E4'                              0817
*   PRFQCBA=ADDR(IEDPCOUT);         /* QCB ADDRESS                   */
         L     @10,@CV02169                                        0818
         STCM  @10,7,PRFQCBA(IEDQPPTR)                             0818
*   CALL DSPPOSTR;                  /* POST RESET COND TO PATH CTRL  */
         LA    @15,DSPPOSTR(,RDISP)                                0819
         BALR  @14,@15                                             0819
*   END SNDRESET;                                                  0820
@EL00012 DS    0H                                                  0820
@EF00012 DS    0H                                                  0820
@ER00012 L     @14,@SA00012                                        0820
         BR    @14                                                 0820
*                                                                  0821
*   /*****************************************************************/
*   /*                                                               */
*   /* UNSIP: UNSOLICITED RESPONSES ARE GENERATED BY TSO ATTENTION.  */
*   /* IF A PLCB IS ASSIGNED AND IT IS MARKED SENDING, THIS INPUT IS */
*   /* PUT ON PLCB'S WAIT CHAIN AND CONTROL IS GIVEN TO THE          */
*   /* DISPATCHER. IF PLCB IS NOT ASSIGNED OR IT IS ASSIGNED BUT NOT */
*   /* MARKED SENDING, THIS INPUT IS BYPASSED TO IEDSAC.             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0821
*UNSIP:                                                            0821
*   PROC OPTIONS(SAVE(14),RETREG);                                 0821
UNSIP    ST    @14,@SA00013                                        0821
*   RETCODE=SAC;                    /* SEND THIS INPUT TO IEDSAC     */
         MVI   RETCODE,X'30'                                       0822
*   IF QCBPLCBN=ON THEN             /* IF HAVE A PLCB                */
         L     @10,IEDQQPTR                                        0823
         AL    @10,@CF02301                                        0823
         TM    QCBPLCBN-4(@10),B'10000000'                         0823
         BNO   @RF00823                                            0823
*     IF LCBSENDN=ON THEN           /* AND IT IS MARKED SENDING      */
         TM    LCBSENDN(RLCB),B'00000001'                          0824
         BNO   @RF00824                                            0824
*       DO;                                                        0825
*         IF(BDUPHASE^=RSP00&       /* IF IT IS TSO ATTENTION        */
*             BDURESP=RSPE13) THEN                                 0826
         LA    @10,14                                              0826
         ALR   @10,RPIU                                            0826
         TM    BDUPHASE(@10),B'01100000'                           0826
         BZ    @RF00826                                            0826
         TM    BDURESP(@10),B'00010011'                            0826
         BNO   @RF00826                                            0826
         TM    BDURESP(@10),B'00001100'                            0826
         BNZ   @RF00826                                            0826
*           CALL PIULCBWC;          /* PUT THIS ON WAIT CHAIN        */
         BAL   @14,PIULCBWC                                        0827
*         ELSE                      /* NO, IT IS NOT TSO ATTENTION   */
*           CALL FREEBFR;           /* DISCARD THIS INPUT            */
         B     @RC00826                                            0828
@RF00826 BAL   @14,FREEBFR                                         0828
*         RETCODE=NOPST;            /* GIVE CONTROL TO TCAM        0829
*                                      DISPATCHER                    */
@RC00826 MVI   RETCODE,X'00'                                       0829
*       END;                                                       0830
*   END UNSIP;                                                     0831
@EL00013 DS    0H                                                  0831
@EF00013 DS    0H                                                  0831
@ER00013 L     @14,@SA00013                                        0831
         BR    @14                                                 0831
*                                                                  0832
*   /*****************************************************************/
*   /*                                                               */
*   /* WAITCHN: IF THE PLCB IS ASSIGNED, CURRENT INPUT IS PLACED ON  */
*   /* PLCB'S WAIT CHAIN. ELSE, CURRENT INPUT IS PLACED ON QCB'S WAIT*/
*   /* CHAIN AND A PLCB IS REQUESTED. IF THE PLCB REQUEST IS         */
*   /* SATISFIED AND INPUT IS PENDING, CONTROL IS PASSED TO IEDSARI, */
*   /* ELSE EXIT IS MADE VIA DSPDISP.                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0832
*   RFY                                                            0832
*    (RLINK) RSTD;                                                 0832
*WAITCHN:                                                          0833
*   PROC OPTIONS(SAVE(14),RETREG);                                 0833
WAITCHN  ST    @14,@SA00014                                        0833
*   IF QCBPLCBN=ON THEN             /* IF A PLCB IS ASSIGNED         */
         L     @14,IEDQQPTR                                        0834
         AL    @14,@CF02301                                        0834
         TM    QCBPLCBN-4(@14),B'10000000'                         0834
         BNO   @RF00834                                            0834
*     DO;                                                          0835
*       IF LCBWAITC=0 THEN          /* IF THERE IS NOTHING ON WAIT 0836
*                                      CHAIN                         */
         L     @14,LCBWAITC-1(,RLCB)                               0836
         LA    @14,0(,@14)                                         0836
         LTR   @14,@14                                             0836
         BNZ   @RF00836                                            0836
*         LCBWAITC=RPRF;            /* PUT CURRENT INPUT ON WAIT   0837
*                                      CHAIN                         */
         STCM  RPRF,7,LCBWAITC(RLCB)                               0837
*       ELSE                        /* ELSE, THERE IS A WAIT CHAIN TO
*                                      WHICH THIS INPUT              */
*         DO;                       /* MUST BE LINKED IN FIFO ORDER  */
         B     @RC00836                                            0838
@RF00836 DS    0H                                                  0839
*           CURBFR=RPRF;            /* SAVE PTR TO THIS INPUT        */
         LR    CURBFR,RPRF                                         0839
*           RPRF=LCBWAITC;          /* POINT TO WAIT CHAIN           */
         L     RPRF,LCBWAITC-1(,RLCB)                              0840
         LA    RPRF,0(,RPRF)                                       0840
*           DO WHILE(PRFLINK^=0);   /* FIND END OF WAIT CHAIN        */
         B     @DE00841                                            0841
@DL00841 DS    0H                                                  0842
*             RPRF=PRFLINK;         /* BUMP PTR TO NEXT PIU          */
         L     @14,PRFLINK-1(,IEDQPPTR)                            0842
         LA    @14,0(,@14)                                         0842
         LR    RPRF,@14                                            0842
*           END;                                                   0843
@DE00841 L     @14,PRFLINK-1(,IEDQPPTR)                            0843
         LA    @14,0(,@14)                                         0843
         LTR   @14,@14                                             0843
         BNZ   @DL00841                                            0843
*           PRFLINK=CURBFR;         /* LINK CURRENT INPUT TO WAIT  0844
*                                      CHAIN                         */
         STCM  CURBFR,7,PRFLINK(IEDQPPTR)                          0844
*           RPRF=CURBFR;            /* RESTORE PTR TO CURRENT INPUT  */
         LR    RPRF,CURBFR                                         0845
*         END;                                                     0846
*       IF LCBRECVN=ON&             /* IF PLCB IS RECEIVING          */
*           (TRMRDOUT=ON×           /* AND IF A READ IS OUT          */
*           TRMINOUT=ON×            /* OR AN INVITE IS OUT           */
*           TRMINPTP=ON×            /* OR GEN POLL INPUT PENDING     */
*           LCBCONT=ON) THEN        /* OR READ CONTINUE WAS DONE     */
@RC00836 TM    LCBRECVN(RLCB),B'00000010'                          0847
         BNO   @RF00847                                            0847
         TM    TRMRDOUT(RTRM),B'00000011'                          0847
         BNZ   @RT00847                                            0847
         TM    TRMINPTP(RTRM),B'01000000'                          0847
         BO    @RT00847                                            0847
         TM    LCBCONT(RLCB),B'00001000'                           0847
         BNO   @RF00847                                            0847
@RT00847 DS    0H                                                  0848
*         RETCODE=SARI;             /* THEN BYPASS TO IEDSARI        */
         MVI   RETCODE,X'40'                                       0848
*       ELSE                        /* OTHERWISE                     */
*         RETCODE=NOPST;            /* GO TO DISPATCHER              */
         B     @RC00847                                            0849
@RF00847 MVI   RETCODE,X'00'                                       0849
*     END;                                                         0850
*   ELSE                            /* IF NO PLCB ASSIGNED THEN      */
*     CALL REQPLCB;                 /* REQUEST A PLCB                */
         B     @RC00834                                            0851
@RF00834 BAL   @14,REQPLCB                                         0851
*   TRMINPTP=OFF;                   /* TURN OFF TRMINPTP SO THERE  0852
*                                      CANNOT BE ANOTHER BYPASS TO 0852
*                                      IEDSARI WHILE PRIOR INPUT IS
*                                      BEING PROCESSED               */
@RC00834 NI    TRMINPTP(RTRM),B'10111111'                          0852
*   RFY                                                            0853
*    (RLINK) UNRSTD;                                               0853
*   END WAITCHN;                                                   0854
@EL00014 DS    0H                                                  0854
@EF00014 DS    0H                                                  0854
@ER00014 L     @14,@SA00014                                        0854
         BR    @14                                                 0854
*   END IEDSAI                                                     0855
*                                                                  0855
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (TAVTD   )                                       */
*/*%INCLUDE SYSLIB  (TBDUD   )                                       */
*/*%INCLUDE SYSLIB  (TCD0D   )                                       */
*/*%INCLUDE SYSLIB  (TDISPD  )                                       */
*/*%INCLUDE SYSLIB  (TEXTD   )                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*/*%INCLUDE SYSLIB  (TLCBD   )                                       */
*/*%INCLUDE SYSLIB  (TPIU0D  )                                       */
*/*%INCLUDE SYSLIB  (TPRFD   )                                       */
*/*%INCLUDE SYSLIB  (TPRIOR  )                                       */
*/*%INCLUDE SYSLIB  (TQCBD   )                                       */
*/*%INCLUDE SYSLIB  (TREQD   )                                       */
*/*%INCLUDE SYSLIB  (TRHD    )                                       */
*/*%INCLUDE SYSLIB  (TRSPD   )                                       */
*/*%INCLUDE SYSLIB  (TTHD    )                                       */
*/*%INCLUDE SYSLIB  (TTRMD   )                                       */
*                                                                  0855
*       ;                                                          0855
@DATA    DS    0H
@CH01422 DC    H'10'
@SM02307 MVC   RCVUNIT(0,RLINK),SRCUNIT(IEDQPPTR)
         DS    0F
@SA00010 DS    1F
@SA00003 DS    1F
@SA00013 DS    1F
@SA00014 DS    1F
@SA00002 DS    1F
@SA00009 DS    1F
@SA00011 DS    1F
@SA00006 DS    1F
@SA00007 DS    1F
@SA00012 DS    1F
         DS    0F
@CF00058 DC    F'6'
@CF00044 DC    F'8'
@CF02301 DC    F'-4'
@CV02169 DC    V(IEDPCOUT)
         DS    0D
QCBPTR   DC    A(0)
@TS00001 DS    CL2
@CB01834 DC    X'0B8000'
RESPSAVE DS    BL1
CUROAF   DS    BL2
RETCODE  DS    BL1
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
CURBFR   EQU   @05
NEWUNIT  EQU   @05
RPRFSAV  EQU   @09
R14SAV1  EQU   @05
IEDQAPTR EQU   @13
RDISP    EQU   @11
IEDQLPTR EQU   @04
LCBXPTR  EQU   @05
IEDQPPTR EQU   @06
RTRM     EQU   @08
RERB     EQU   @14
RPIU     EQU   @02
RLINK    EQU   @15
RPARM    EQU   @01
RZERO    EQU   @00
RAVT     EQU   @13
RSTCB    EQU   @03
RLCB     EQU   @04
RPRF     EQU   @06
RHOLD    EQU   @06
RLAST    EQU   @07
RQCB     EQU   @07
RBASE    EQU   @12
RRETURN  EQU   @14
IEDQAVTD EQU   0
AVTSAVEX EQU   IEDQAVTD+216
AVTREADD EQU   IEDQAVTD+308
AVTBUFSW EQU   IEDQAVTD+312
@NM00004 EQU   IEDQAVTD+316
AVTCKFLG EQU   @NM00004
AVTBASE  EQU   IEDQAVTD+340
AVTPKF   EQU   AVTBASE
AVTRNMPT EQU   IEDQAVTD+352
AVTOSECB EQU   IEDQAVTD+420
AVTECB1  EQU   AVTOSECB
AVTHG02  EQU   IEDQAVTD+456
AVTDISP  EQU   IEDQAVTD+480
AVTHD    EQU   IEDQAVTD+484
AVTSCOPT EQU   AVTHD
AVTSAVTP EQU   IEDQAVTD+540
AVTSAVTF EQU   AVTSAVTP
AVTCKPEL EQU   IEDQAVTD+580
AVTCKRMV EQU   AVTCKPEL
AVTCKELF EQU   IEDQAVTD+608
AVTCKBYT EQU   IEDQAVTD+619
AVTHG01  EQU   IEDQAVTD+620
AVTCKLNK EQU   IEDQAVTD+624
AVTCRELE EQU   IEDQAVTD+636
AVTCCELE EQU   AVTCRELE
AVTCLRHI EQU   IEDQAVTD+644
AVTADBUF EQU   IEDQAVTD+648
AVTSYSER EQU   IEDQAVTD+656
AVTMSGS  EQU   IEDQAVTD+657
AVTBFRFG EQU   IEDQAVTD+712
AVTBFRTB EQU   IEDQAVTD+720
AVTCKPQB EQU   IEDQAVTD+732
AVTCKPTB EQU   AVTCKPQB
AVTCKPEC EQU   AVTCKPQB+4
AVTCKPCC EQU   AVTCKPEC
AVTOPCQB EQU   IEDQAVTD+744
AVTOPCOB EQU   AVTOPCQB
AVTOPCEC EQU   AVTOPCQB+4
AVTOPCCC EQU   AVTOPCEC
AVTOLTQB EQU   IEDQAVTD+756
AVTCWFL1 EQU   IEDQAVTD+852
AVTCWFL2 EQU   IEDQAVTD+853
AVTSUBT  EQU   IEDQAVTD+876
AVTIOTR  EQU   IEDQAVTD+877
AVTKEYLE EQU   IEDQAVTD+960
AVTBIT1  EQU   IEDQAVTD+978
AVTBIT2  EQU   IEDQAVTD+979
AVTBIT3  EQU   IEDQAVTD+980
AVTSTEAL EQU   IEDQAVTD+988
AVTBIT4  EQU   IEDQAVTD+1064
@NM00086 EQU   IEDQAVTD+1160
IEDNSVTD EQU   0
SAVTDIAG EQU   IEDNSVTD
SAVTDIAF EQU   SAVTDIAG
SAVTPREQ EQU   IEDNSVTD+16
SAVTLUSQ EQU   IEDNSVTD+88
SAVTXFMI EQU   IEDNSVTD+132
SAVTSAC  EQU   IEDNSVTD+188
SAVTSARI EQU   IEDNSVTD+192
SAVTTCPU EQU   IEDNSVTD+238
SAVTTNTX EQU   IEDNSVTD+252
SAVTLCBS EQU   IEDNSVTD+260
SAVTZELM EQU   IEDNSVTD+270
SAVTRDRV EQU   IEDNSVTD+284
SAVTCKQB EQU   IEDNSVTD+300
SAVTCKTB EQU   SAVTCKQB
SAVTCKEC EQU   SAVTCKQB+4
SAVTCKCC EQU   SAVTCKEC
IEDBDU   EQU   0
BDUCMND  EQU   IEDBDU
BDUMODIF EQU   IEDBDU+1
BDUFNFLG EQU   IEDBDU+2
BDUBDUFG EQU   IEDBDU+3
BDURSP   EQU   IEDBDU+4
BDUSYRSP EQU   BDURSP
BDUERROR EQU   BDUSYRSP
BDUPHASE EQU   BDUSYRSP
BDURESP  EQU   BDUSYRSP
BDUEXRSP EQU   BDURSP+1
BDUXINIT EQU   BDUEXRSP
BDUEND   EQU   IEDBDU+6
IEDQDISP EQU   0
DSPDISP  EQU   4
DSPBYPAS EQU   20
DSPPOSTR EQU   28
IHADCB   EQU   0
DCBPTR   EQU   0
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBIBPCT EQU   DCBIFLG
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
DCBIFPCT EQU   DCBIFLGS
IHADCS28 EQU   0
DCBOPTCD EQU   IHADCS28
DCBOPTZ  EQU   DCBOPTCD
IEDQLCB  EQU   0
LCBRCB   EQU   IEDQLCB
LCBTSOB  EQU   IEDQLCB+19
LCBCHAIN EQU   IEDQLCB+20
LCBSCRNN EQU   LCBCHAIN
LCBTETEN EQU   LCBCHAIN
LCBINSRC EQU   IEDQLCB+21
LCBLKMDE EQU   LCBINSRC+2
LCBNTXT  EQU   IEDQLCB+24
LCBSTAT4 EQU   LCBNTXT
LCBPHASE EQU   LCBSTAT4
LCBSCBDA EQU   IEDQLCB+25
LCBMHA   EQU   IEDQLCB+29
LCBFLAG1 EQU   IEDQLCB+32
LCBIOBSN EQU   IEDQLCB+33
LCBSNS   EQU   LCBIOBSN+1
LCBSENS0 EQU   LCBSNS
LCBLOSDT EQU   LCBSENS0
LCBTMOUT EQU   LCBSENS0
LCBFLAG3 EQU   LCBIOBSN+7
LCBCSW   EQU   LCBIOBSN+8
LCBCSWST EQU   LCBCSW+3
LCBCSWUS EQU   LCBCSWST
LCBCSWCS EQU   LCBCSWST+1
LCBSIOCC EQU   LCBIOBSN+15
LCBDCBPT EQU   IEDQLCB+52
LCBRCQCB EQU   IEDQLCB+56
LCBRESTR EQU   LCBRCQCB
LCBTHSQ  EQU   IEDQLCB+60
LCBINCAM EQU   LCBTHSQ
LCBERRCT EQU   IEDQLCB+62
LCBLSPCI EQU   IEDQLCB+65
LCBRCBFR EQU   LCBLSPCI
LCBSTATE EQU   IEDQLCB+70
LCBSTAT1 EQU   LCBSTATE
LCBOCNI  EQU   LCBSTAT1
LCBCONT  EQU   LCBSTAT1
LCBRECVN EQU   LCBSTAT1
LCBSENDN EQU   LCBSTAT1
LCBSTAT2 EQU   LCBSTATE+1
LCBMSGNN EQU   LCBSTAT2
LCBBEOTN EQU   LCBSTAT2
LCBSYNC  EQU   LCBSTAT2
LCBDIAL  EQU   LCBSTAT2
LCBTSTSW EQU   IEDQLCB+72
LCBERB   EQU   IEDQLCB+76
LCBERBQB EQU   LCBERB+1
LCBERBLK EQU   IEDQLCB+81
LCBERBST EQU   IEDQLCB+84
LCBINQ   EQU   LCBERBST
LCBDLNKN EQU   LCBERBST
LCBERBCH EQU   IEDQLCB+85
LCBERBCT EQU   IEDQLCB+88
LCBRBCT2 EQU   LCBERBCT+1
LCBMSGFM EQU   IEDQLCB+92
LCBOBRCH EQU   IEDQLCB+96
LCBINVPT EQU   LCBOBRCH+1
LCBBFRW  EQU   LCBINVPT
LCBTPCD  EQU   IEDQLCB+100
LCBSTAT5 EQU   LCBTPCD
LCBSTAT6 EQU   LCBTPCD+4
LCBWAITC EQU   LCBTPCD+5
LCBRSPSV EQU   LCBTPCD+8
LCBSAVSN EQU   IEDQLCB+112
LCBERCCW EQU   IEDQLCB+120
LCBCPA   EQU   IEDQLCB+144
LCBCCW5  EQU   LCBCPA+32
LCBATTEL EQU   LCBCCW5
LCBQEBPL EQU   LCBATTEL
IEDQLCBX EQU   0
LCBXCON  EQU   IEDQLCBX
LCBXFLAG EQU   LCBXCON
LCBXDCT  EQU   LCBXCON+1
LCBXRADR EQU   LCBXCON+4
IEDPIU0  EQU   0
PIU0TH   EQU   IEDPIU0
PIU0RH   EQU   IEDPIU0+10
PIU0PAD  EQU   IEDPIU0+13
PIU0RU   EQU   IEDPIU0+14
IEDQPRF  EQU   0
PRFRCB   EQU   IEDQPRF
PRFKEY   EQU   PRFRCB
PRFQCBA  EQU   PRFRCB+1
PRFPRI   EQU   PRFRCB+4
PRFLINK  EQU   PRFRCB+5
PRFTIC   EQU   IEDQPRF+8
PRFTICC  EQU   PRFTIC
PRFNBUNT EQU   IEDQPRF+12
PRFSUNIT EQU   PRFNBUNT
PRFPLQCB EQU   PRFSUNIT
PRFPIUO  EQU   PRFPLQCB
@NM00165 EQU   IEDQPRF+16
PRFSVFFO EQU   @NM00165
PRFSTAT1 EQU   IEDQPRF+20
PRFEOFN  EQU   PRFSTAT1
PRFCORE  EQU   IEDQPRF+21
PRFXTRA  EQU   PRFCORE
PRFSCAN  EQU   IEDQPRF+24
PRFISIZE EQU   PRFSCAN+1
PRFTQBCK EQU   IEDQPRF+26
PRFNTXT  EQU   PRFTQBCK
PRFEOBOF EQU   PRFNTXT
PRFCHDR  EQU   IEDQPRF+32
PRFHQBCK EQU   IEDQPRF+35
IEDPF1   EQU   0
PRF1FLG1 EQU   IEDPF1+3
PRF1WD2  EQU   IEDPF1+4
PRF1SEQP EQU   PRF1WD2
PRF1SQID EQU   PRF1SEQP
PRF1TAG1 EQU   PRF1SQID
IEDPF2   EQU   0
PRF2FLG2 EQU   IEDPF2
PRF2WD2  EQU   IEDPF2+4
IEDQQCB  EQU   0
QCBDSFLG EQU   IEDQQCB
QCBDISK  EQU   QCBDSFLG
QCBELCHN EQU   IEDQQCB+1
QCBSTCHN EQU   IEDQQCB+9
QCBEOLDT EQU   IEDQQCB+16
QCBBYTE1 EQU   QCBEOLDT+1
QCBLKRLN EQU   IEDQQCB+18
QCBRETCT EQU   QCBLKRLN
QCBSTAT  EQU   IEDQQCB+19
QCBINSRC EQU   IEDQQCB+21
@NM00175 EQU   QCBINSRC
QCBTSOF2 EQU   @NM00175+1
QCBTSOF1 EQU   @NM00175+2
QCBINTVL EQU   IEDQQCB+24
QCBPREN  EQU   IEDQQCB+28
QCBLKRRN EQU   QCBPREN+1
QCBDCBAD EQU   IEDQQCB+33
QCBFLAG  EQU   IEDQQCB+36
IEDQPQCB EQU   0
QCBFHDLZ EQU   IEDQPQCB+3
QCBPFEFO EQU   QCBFHDLZ+1
QCBFHDTZ EQU   IEDQPQCB+6
QCBINTLF EQU   IEDQPQCB+12
IEDNQCB  EQU   0
QCBSTAT1 EQU   IEDNQCB+4
QCBPLCBN EQU   QCBSTAT1
QCBWAITC EQU   QCBSTAT1
QCBRCVRQ EQU   QCBSTAT1
QCBPLCBA EQU   IEDNQCB+5
IEDREQD  EQU   0
REQLINK  EQU   IEDREQD+5
REQROUTE EQU   IEDREQD+12
REQRCDS  EQU   IEDREQD+14
REQDATA  EQU   IEDREQD+16
IEDRH    EQU   0
TRHBYTE0 EQU   IEDRH
TRHBYTE1 EQU   IEDRH+1
TRHBYTE2 EQU   IEDRH+2
IEDTH    EQU   0
TTHBYTE0 EQU   IEDTH
TTHBYTE1 EQU   IEDTH+1
TTHDAF   EQU   IEDTH+2
TTHOAF   EQU   IEDTH+4
TTHSNF   EQU   IEDTH+6
TTHTAG   EQU   TTHSNF
TTHTAG1  EQU   TTHTAG
TTHTAGS  EQU   TTHTAG1
TTHTAG2  EQU   TTHTAG+1
TTHDCF   EQU   IEDTH+8
IEDTRM   EQU   0
IEDNTRM  EQU   IEDTRM
TRMBYTE4 EQU   IEDNTRM
TRMBYTE3 EQU   IEDNTRM+1
TRMBYTE2 EQU   IEDNTRM+2
TRMINPG  EQU   TRMBYTE2
TRMBYTE1 EQU   IEDNTRM+3
TRMSCPRQ EQU   TRMBYTE1
TRMWTNEG EQU   TRMSCPRQ
TRMINPTP EQU   TRMBYTE1
TRMTSATN EQU   TRMBYTE1
TRMBYTE0 EQU   IEDNTRM+6
TRMDIAL  EQU   TRMBYTE0
TRMSIBPT EQU   IEDNTRM+7
IEDQTRM  EQU   IEDTRM+14
TRMSTATE EQU   IEDQTRM
TRMLINE  EQU   TRMSTATE
TRMLOG   EQU   TRMSTATE
TRMDESTQ EQU   IEDQTRM+1
TRMINSEQ EQU   IEDQTRM+4
TLISTCNT EQU   TRMINSEQ
TRMOUTSQ EQU   IEDQTRM+6
TLISTEN  EQU   TRMOUTSQ
TRMDSORG EQU   TLISTEN
TRMALTD  EQU   IEDQTRM+8
TRMDEVFL EQU   IEDQTRM+10
TRMSTAT  EQU   IEDQTRM+12
RCVUNIT  EQU   12
BDQCB    EQU   0
IEDXFMI  EQU   0
IEDIAP   EQU   0
IEDIAP04 EQU   0
IEDIAP06 EQU   0
IEDQGA02 EQU   0
IEDQTNT  EQU   0
STATMSG  EQU   0
STATTYPE EQU   STATMSG+1
SSBYTE1  EQU   STATMSG+5
SSDB     EQU   SSBYTE1
SSDE     EQU   SSBYTE1
SSBYTE2  EQU   STATMSG+6
SSCR     EQU   SSBYTE2
SSIR     EQU   SSBYTE2
SSEC     EQU   SSBYTE2
SSDC     EQU   SSBYTE2
SSCC     EQU   SSBYTE2
DSPCHAIN EQU   12
DSPLIFO  EQU   56
DSPLIFOR EQU   60
DSPLIST  EQU   8
DSPPOST  EQU   24
DSPPRIO  EQU   48
DSPPRIOR EQU   52
DSPTRACE EQU   64
DSPTSTQ  EQU   32
DSPTSTQR EQU   36
DSPUNAV  EQU   40
DSPUNAVR EQU   44
DSPWAIT  EQU   16
QCBLDCB  EQU   0
LCBRSPIN EQU   LCBIOBSN
LCBLUSNS EQU   LCBRSPIN+5
LCBSCPRS EQU   LCBRSPIN+9
LCBCSWU1 EQU   LCBSCPRS+2
LCBRSPFG EQU   LCBRSPIN+15
LCBCOREQ EQU   LCBTPCD
@NM00145 EQU   LCBCPA+40
LCBQNX   EQU   LCBERCCW
LCBQNXMN EQU   LCBQNX
LCBCANCL EQU   LCBSAVSN
LCBCANFG EQU   LCBCANCL
IEDQQPTR EQU   QCBPTR
REQLDATA EQU   REQDATA
REQSDATA EQU   REQDATA
TRMPRE1  EQU   TRMBYTE4
TRMQNPL  EQU   TRMPRE1
TRMERLCK EQU   TRMPRE1
TRMLYNCH EQU   TRMPRE1
TRMNCP1  EQU   TRMBYTE4
TRMPRE   EQU   TRMBYTE3
TRMSTPND EQU   TRMPRE
TRMRDOUT EQU   TRMPRE
TRMINOUT EQU   TRMPRE
TRMNCP   EQU   TRMBYTE3
TRMPU    EQU   TRMBYTE3
TRMLU    EQU   TRMBYTE3
TRMLINK  EQU   TRMBYTE3
SRCUNIT  EQU   PRFPIUO
BDUTEXT  EQU   BDUEND
INOP     EQU   PRFPIUO+1
PRFSHDR  EQU   IEDQPRF+42
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00196 EQU   TRMLINK
TRMLSTAT EQU   TRMLINK
TRMLINT  EQU   TRMLINK
TRMEPMOD EQU   TRMLINK
TRMLULOG EQU   TRMLU
TRMINERR EQU   TRMLU
TRMLUREQ EQU   TRMLU
TRMSESRQ EQU   TRMLU
TRMTDIFF EQU   TRMLU
TRMLUTM  EQU   TRMLU
TRMLUIT  EQU   TRMLU
TRMAUTO  EQU   TRMLU
TRMPCONT EQU   TRMPU
@NM00195 EQU   TRMPU
TRMNCONT EQU   TRMNCP
TRMQUCKN EQU   TRMNCP
TRMSLOWN EQU   TRMNCP
TRMSYGEN EQU   TRMNCP
TRMNCPCL EQU   TRMNCP
TRMIPLDM EQU   TRMNCP
TRMNLOUT EQU   TRMPRE
TRMWROUT EQU   TRMPRE
TRMASNXI EQU   TRMPRE
TRMSTMM  EQU   TRMPRE
TRMCMODE EQU   TRMPRE
@NM00194 EQU   TRMNCP1
TRMINOP  EQU   TRMNCP1
TRMSPOUT EQU   TRMPRE1
TRMSPACT EQU   TRMPRE1
TRMOCNI  EQU   TRMPRE1
TRMSESSN EQU   TRMPRE1
TRMCONT  EQU   TRMPRE1
REQSTNT  EQU   REQSDATA+4
REQSTTE  EQU   REQSDATA
REQLTNT  EQU   REQLDATA
@NM00153 EQU   LCBCANCL+3
LCBCANTH EQU   LCBCANCL+1
@NM00152 EQU   LCBCANFG
LCBCANCD EQU   LCBCANFG
@NM00151 EQU   LCBCANFG
LCBCANEB EQU   LCBCANFG
LCBCANXT EQU   LCBCANFG
LCBUNADD EQU   LCBQNX+21
LCBUASZE EQU   LCBQNX+20
LCBDSTEA EQU   LCBQNX+16
@NM00150 EQU   LCBQNX+8
LCBIOSBS EQU   LCBQNX+5
@NM00149 EQU   LCBQNX+4
LCBSTSAV EQU   LCBQNX+1
@NM00148 EQU   LCBQNXMN
LCBNX509 EQU   LCBQNXMN
LCBNX162 EQU   LCBQNXMN
LCBNX142 EQU   LCBQNXMN
LCBNX064 EQU   LCBQNXMN
@NM00147 EQU   @NM00145+4
LCBNCPPT EQU   @NM00145+1
@NM00146 EQU   @NM00145
LCBWRSCH EQU   LCBCOREQ+8
LCBCQLNK EQU   LCBCOREQ+4
LCBCQELE EQU   LCBCOREQ
LCBPAKCH EQU   LCBRSPIN+16
@NM00144 EQU   LCBRSPFG
LCBRSRH  EQU   LCBRSPFG
LCBEXPI  EQU   LCBRSPFG
@NM00143 EQU   LCBRSPIN+12
LCBUSUE1 EQU   LCBCSWU1
@NM00142 EQU   LCBCSWU1
@NM00141 EQU   LCBSCPRS+1
LCBDFCMD EQU   LCBSCPRS
LCBUSER  EQU   LCBLUSNS+2
LCBSMIN  EQU   LCBLUSNS+1
LCBSMAJ  EQU   LCBLUSNS
LCBRHSV  EQU   LCBRSPIN+2
LCBSNS0  EQU   LCBRSPIN+1
@NM00140 EQU   LCBRSPIN
SSOC     EQU   SSBYTE2
@NM00199 EQU   SSBYTE2
@NM00198 EQU   SSBYTE1
@NM00197 EQU   SSBYTE1
DA       EQU   STATMSG+4
CU       EQU   STATMSG+3
STX      EQU   STATMSG+2
STATFLAG EQU   STATMSG
TRMOPT   EQU   IEDTRM+34
TRMOPTBL EQU   IEDQTRM+18
TRMOPNO  EQU   IEDQTRM+17
TRMCHCIN EQU   IEDQTRM+16
TRMSENSE EQU   TRMSTAT+3
TRMTEMPR EQU   TRMSTAT+2
TRMSIO   EQU   TRMSTAT
@NM00193 EQU   TRMDEVFL+1
TRMTPIN  EQU   TRMDEVFL+1
TRMNCPI  EQU   TRMDEVFL+1
TRMRNTRM EQU   TRMDEVFL+1
@NM00192 EQU   TRMDEVFL+1
TRMLMD   EQU   TRMDEVFL+1
TRMCONC  EQU   TRMDEVFL+1
TRMTSOB  EQU   TRMDEVFL
TRMBFDY  EQU   TRMDEVFL
TRMTBLK  EQU   TRMDEVFL
TRMSBLK  EQU   TRMDEVFL
TRMBLKS  EQU   TRMDEVFL
TRMADDC  EQU   TRMDEVFL
TRMDDIG  EQU   TRMDEVFL
TRMBUFS  EQU   TRMDEVFL
TRMPRILK EQU   TRMALTD
TRMLGB   EQU   TRMDSORG
TRMUTERM EQU   TLISTCNT
TRMSCNYN EQU   TRMSTATE
TRMOPTFN EQU   TRMSTATE
TRMHELDN EQU   TRMSTATE
TRMACPTN EQU   TRMSTATE
TRMPREF  EQU   TRMSTATE
TRMPROC  EQU   TRMLOG
TRMLIST  EQU   TRMLOG
TRMSUBST EQU   IEDNTRM+12
TRMTYPE  EQU   IEDNTRM+11
TRMRLMCT EQU   IEDNTRM+10
TRMCOHTG EQU   TRMSIBPT+1
TRMGPCNT EQU   TRMSIBPT
TRMBUFRD EQU   TRMBYTE0
TRMSNA   EQU   TRMBYTE0
TRMGP    EQU   TRMBYTE0
@NM00191 EQU   TRMBYTE0
TRMOUTPT EQU   TRMBYTE0
TRMINPUT EQU   TRMBYTE0
TRMUDEF  EQU   TRMBYTE0
TRMCOHRT EQU   IEDNTRM+4
TRMSTOTE EQU   TRMBYTE1
TRMCKPRN EQU   TRMBYTE1
TRMTRACE EQU   TRMBYTE1
TRMSWBCK EQU   TRMBYTE1
TRMAUTOC EQU   TRMBYTE1
TRMWRBRK EQU   TRMBYTE2
TRMNOSND EQU   TRMBYTE2
TRMPREP  EQU   TRMBYTE2
TRMGPACT EQU   TRMBYTE2
TRMANDL  EQU   TRMBYTE2
TRMCLOSN EQU   TRMINPG
TRMREMB  EQU   TRMBYTE2
TRMRSACT EQU   TRMBYTE2
@NM00190 EQU   TTHTAG1
TTHEFI   EQU   TTHBYTE0
@NM00189 EQU   TTHBYTE0
TTHEBIU  EQU   TTHBYTE0
TTHBBIU  EQU   TTHBYTE0
TTHFTYPE EQU   TTHBYTE0
@NM00188 EQU   TRHBYTE2
@NM00187 EQU   TRHBYTE2
@NM00186 EQU   TRHBYTE2
TRHCSI   EQU   TRHBYTE2
@NM00185 EQU   TRHBYTE2
TRHCDI   EQU   TRHBYTE2
TRHEB    EQU   TRHBYTE2
TRHBB    EQU   TRHBYTE2
TRHPI    EQU   TRHBYTE1
@NM00184 EQU   TRHBYTE1
@NM00183 EQU   TRHBYTE1
@NM00182 EQU   TRHBYTE1
TRHER    EQU   TRHBYTE1
TRHDR2   EQU   TRHBYTE1
@NM00181 EQU   TRHBYTE1
TRHDR1   EQU   TRHBYTE1
TRHEC    EQU   TRHBYTE0
TRHBC    EQU   TRHBYTE0
TRHSDI   EQU   TRHBYTE0
TRHFI    EQU   TRHBYTE0
@NM00180 EQU   TRHBYTE0
TRHRUCAT EQU   TRHBYTE0
TRHTYPE  EQU   TRHBYTE0
REQRCD2  EQU   REQRCDS+1
REQRCD1  EQU   REQRCDS
REQSWTCH EQU   REQROUTE+1
REQFLAG  EQU   REQROUTE
REQRQCBA EQU   IEDREQD+9
REQRPRI  EQU   IEDREQD+8
REQPRI   EQU   IEDREQD+4
REQQCBA  EQU   IEDREQD+1
REQTYPE  EQU   IEDREQD
QCBTTCIN EQU   QCBPLCBA+1
@NM00179 EQU   QCBPLCBA
@NM00178 EQU   QCBSTAT1
QCBFLUSH EQU   QCBSTAT1
QCBNDXRQ EQU   QCBSTAT1
QCBESIG  EQU   QCBSTAT1
QCBSNDRQ EQU   QCBSTAT1
QCBCHAIN EQU   IEDNQCB
QCBPQBCK EQU   IEDQPQCB+25
QCBPRIPQ EQU   IEDQPQCB+24
QCBCFHDR EQU   IEDQPQCB+21
QCBLFEFO EQU   IEDQPQCB+18
QCBFFEFO EQU   IEDQPQCB+15
QCBPREVF EQU   QCBINTLF
QCBINTFF EQU   IEDQPQCB+9
QCBDATSQ EQU   QCBFHDTZ+1
@NM00177 EQU   QCBFHDTZ
@NM00176 EQU   QCBPFEFO
QCBDATFL EQU   QCBFHDLZ
QCBDNHDR EQU   IEDQPQCB
QCBQBACK EQU   IEDQQCB+37
QCBCKPT  EQU   QCBFLAG
QCBPROC  EQU   QCBFLAG
QCBSDFFO EQU   QCBFLAG
QCBTERMQ EQU   QCBFLAG
QCBRSRV  EQU   QCBFLAG
QCBREAD  EQU   QCBFLAG
QCBNOBRK EQU   QCBFLAG
QCBTSSES EQU   QCBFLAG
QCBLGBAD EQU   QCBDCBAD
QCBRELLN EQU   IEDQQCB+32
QCBTJID  EQU   QCBLKRRN+1
QCBCARCT EQU   QCBLKRRN
QCBPRLVL EQU   QCBPREN
QCBMSGCT EQU   IEDQQCB+26
QCBEXTO  EQU   QCBINTVL
QCBDISC  EQU   QCBTSOF1
QCBDELAY EQU   QCBTSOF1
QCBPARTO EQU   QCBTSOF1
QCBSATRD EQU   QCBTSOF1
QCBNOBUF EQU   QCBTSOF1
QCBTPUT  EQU   QCBTSOF1
QCBTGET  EQU   QCBTSOF1
QCBWRBRK EQU   QCBTSOF1
QCBSATLC EQU   QCBTSOF2
QCBSATTI EQU   QCBTSOF2
QCBSATCH EQU   QCBTSOF2
QCBSIMRD EQU   QCBTSOF2
QCBDSSMI EQU   QCBTSOF2
QCBPOSTO EQU   QCBTSOF2
QCBBUFQ  EQU   QCBTSOF2
QCBINHBN EQU   QCBTSOF2
QCBSATCT EQU   @NM00175
QCBSCBOF EQU   IEDQQCB+20
QCBTIME  EQU   QCBSTAT
QCBCLOCK EQU   QCBSTAT
QCBSCHDL EQU   QCBSTAT
QCBSMODE EQU   QCBSTAT
QCBSEND  EQU   QCBSTAT
QCBBUFRD EQU   QCBSTAT
QCBTRMHO EQU   QCBSTAT
QCBEOM   EQU   QCBSTAT
QCBHUCT  EQU   QCBRETCT
QCBIEND  EQU   QCBRETCT
QCBEND   EQU   QCBRETCT
QCBNL    EQU   QCBRETCT
QCBLOGCT EQU   QCBRETCT
@NM00174 EQU   QCBBYTE1
QCBRITRM EQU   QCBBYTE1
@NM00173 EQU   QCBEOLDT
QCBSLINK EQU   IEDQQCB+13
QCBSTPRI EQU   IEDQQCB+12
QCBSTVTO EQU   IEDQQCB+8
QCBLINK  EQU   IEDQQCB+5
QCBPRI   EQU   IEDQQCB+4
QCBCNTEN EQU   QCBELCHN+2
@NM00172 EQU   QCBELCHN+2
@NM00171 EQU   QCBELCHN
QCBHELD  EQU   QCBDSFLG
QCBFQCB  EQU   QCBDSFLG
QCBDRQQ  EQU   QCBDSFLG
QCBALTMH EQU   QCBDSFLG
QCBREUS  EQU   QCBDISK
QCBNREUS EQU   QCBDISK
QCBCORE  EQU   QCBDSFLG
QCBTSQ   EQU   QCBDSFLG
PRF2SEQP EQU   PRF2WD2
@NM00170 EQU   IEDPF2+1
@NM00169 EQU   PRF2FLG2
PRF2TERM EQU   PRF2FLG2
PRF2SMI  EQU   PRF2FLG2
PRF2FORM EQU   PRF2FLG2
PRF2TNTI EQU   PRF2FLG2
PRF1RULN EQU   PRF1SEQP+2
PRF1TAG2 EQU   PRF1SQID+1
@NM00168 EQU   PRF1TAG1
PRF1TAGS EQU   PRF1TAG1
@NM00167 EQU   PRF1FLG1
PRF1LOGD EQU   PRF1FLG1
PRF1USS  EQU   PRF1FLG1
PRF1FORM EQU   PRF1FLG1
PRF1EXPI EQU   PRF1FLG1
PRF1FIDI EQU   PRF1FLG1
PRF1RH   EQU   IEDPF1
PRFDEST  EQU   IEDQPRF+40
PRFISEQ  EQU   IEDQPRF+38
PRFSTXT  EQU   PRFHQBCK
PRFNHDR  EQU   PRFCHDR
PRFCRCD  EQU   IEDQPRF+29
PRFSVSEQ EQU   PRFNTXT+1
PRFSVPRI EQU   PRFEOBOF
@NM00166 EQU   PRFSCAN
PRFEOB   EQU   PRFXTRA+1
PRFSTSO  EQU   PRFXTRA
PRFNHDRN EQU   PRFSTAT1
PRFNLSTN EQU   PRFSTAT1
PRFLOCK  EQU   PRFEOFN
PRFDUPLN EQU   PRFSTAT1
PRFTSMSG EQU   PRFSTAT1
PRFITCPN EQU   PRFSTAT1
PRFERMGN EQU   PRFSTAT1
PRFCNCLN EQU   PRFSTAT1
PRFSVFLG EQU   @NM00165+3
PRFSIZE  EQU   PRFSVFFO+2
PRFSRCE  EQU   PRFSVFFO
PRFLCB   EQU   IEDQPRF+13
PRFTI0   EQU   PRFTIC+1
@NM00164 EQU   PRFTICC
@NM00163 EQU   PRFTICC
@NM00162 EQU   PRFTICC
PRFTICON EQU   PRFTICC
@NM00161 EQU   PRFTICC
@NM00160 EQU   PRFTICC
PRFBFMM  EQU   PRFTICC
PRFEOMSG EQU   PRFTICC
PRFCOUNT EQU   PRFLINK+1
@NM00159 EQU   PRFLINK
PRFFLAGS EQU   PRFPRI
PRFIOADR EQU   PRFQCBA
PRFOPCDE EQU   PRFKEY
LCBERADR EQU   LCBXRADR+1
LCBPCIRC EQU   LCBXRADR
LCBDCT3  EQU   LCBXDCT+2
LCBDCT2  EQU   LCBXDCT+1
LCBDCT1  EQU   LCBXDCT
@NM00158 EQU   LCBXFLAG
LCBERPND EQU   LCBXFLAG
LCBSRCPF EQU   LCBXFLAG
LCBGPCTV EQU   LCBXFLAG
@NM00157 EQU   LCBXFLAG
@NM00156 EQU   LCBXFLAG
@NM00155 EQU   LCBXFLAG
@NM00154 EQU   LCBXFLAG
LCBCCW10 EQU   LCBCPA+72
LCBCCW9  EQU   LCBCPA+64
LCBCCW8  EQU   LCBCPA+56
LCBCCW7  EQU   LCBCPA+48
LCBCCW6  EQU   LCBCPA+40
LCBCP    EQU   LCBQEBPL+4
LCBIOSB  EQU   LCBQEBPL+1
LCBSIO   EQU   LCBQEBPL
LCBCCW4  EQU   LCBCPA+24
LCBCCW3  EQU   LCBCPA+16
LCBCCW2  EQU   LCBCPA+8
LCBCCW1  EQU   LCBCPA
@NM00139 EQU   LCBERCCW+16
LCBATL05 EQU   LCBERCCW+8
@NM00138 EQU   LCBERCCW
LCBCSWSV EQU   LCBSAVSN+1
LCBSNSV  EQU   LCBSAVSN
LCBBFSNS EQU   LCBRSPSV
LCBINPAK EQU   LCBSTAT6
LCBMHBID EQU   LCBSTAT6
LCBRTRRO EQU   LCBSTAT6
LCBHDRPD EQU   LCBSTAT6
LCBCHN   EQU   LCBSTAT6
LCBBFRSV EQU   LCBTPCD+1
@NM00137 EQU   LCBSTAT5
LCBLUS   EQU   LCBSTAT5
LCBLUNIT EQU   LCBSTAT5
LCBPERM  EQU   LCBSTAT5
LCBNXCMD EQU   LCBBFRW
LCBERMSK EQU   LCBOBRCH
LCBSCBA  EQU   IEDQLCB+93
LCBOLT   EQU   LCBMSGFM
LCBEOT   EQU   LCBMSGFM
LCBENQ   EQU   LCBMSGFM
LCBTTD   EQU   LCBMSGFM
LCBRSTRT EQU   LCBMSGFM
LCBVSTRT EQU   LCBMSGFM
LCBACKI  EQU   LCBMSGFM
LCBNAK   EQU   LCBMSGFM
LCBTTCIN EQU   IEDQLCB+90
@NM00136 EQU   LCBRBCT2
LCBDCNT  EQU   LCBRBCT2
LCBRBCT1 EQU   LCBERBCT
LCBCOMPL EQU   LCBDLNKN
LCBPRCPG EQU   LCBERBST
LCBERROR EQU   LCBERBST
LCBLOGDV EQU   LCBERBST
LCBRDERR EQU   LCBERBST
LCBEOMSG EQU   LCBERBST
LCBMSG   EQU   LCBERBST
LCBERBPY EQU   IEDQLCB+80
LCBERBKY EQU   LCBERB
LCBRECAD EQU   IEDQLCB+73
@NM00135 EQU   LCBTSTSW
@NM00134 EQU   LCBTSTSW
@NM00133 EQU   LCBTSTSW
@NM00132 EQU   LCBTSTSW
@NM00131 EQU   LCBTSTSW
@NM00130 EQU   LCBTSTSW
@NM00129 EQU   LCBTSTSW
LCBCONCT EQU   LCBTSTSW
LCBRESP  EQU   LCBSTAT2
LCBBFRAV EQU   LCBDIAL
LCBATTN  EQU   LCBSYNC
LCBNEGRP EQU   LCBSTAT2
LCBSNDPR EQU   LCBSTAT2
LCBCONNN EQU   LCBBEOTN
LCBTRACE EQU   LCBSTAT2
LCBFREEN EQU   LCBSTAT1
LCBINITN EQU   LCBSTAT1
LCBOCWTN EQU   LCBSTAT1
LCBRCLLN EQU   LCBSTAT1
LCBRECOF EQU   IEDQLCB+68
LCBRDBFR EQU   LCBRCBFR
LCBUCBX  EQU   IEDQLCB+64
LCBTTBIN EQU   LCBERRCT
@NM00128 EQU   LCBINCAM
LCBGETMN EQU   LCBINCAM
@NM00127 EQU   LCBRESTR+1
LCBCMDSV EQU   LCBRESTR
LCBPCILK EQU   LCBDCBPT
LCBSTART EQU   LCBIOBSN+16
LCBAP4OL EQU   LCBSIOCC
LCBAP3OL EQU   LCBSIOCC
LCBAP2OL EQU   LCBSIOCC
LCBAP1OL EQU   LCBSIOCC
LCBSIOC2 EQU   LCBSIOCC
LCBSIOC1 EQU   LCBSIOCC
@NM00126 EQU   LCBSIOCC
LCBCSWRC EQU   LCBCSW+5
LCBCSCHC EQU   LCBCSWCS
LCBCSICC EQU   LCBCSWCS
LCBCSCCC EQU   LCBCSWCS
LCBCSCDC EQU   LCBCSWCS
LCBCSPTC EQU   LCBCSWCS
LCBCSPGC EQU   LCBCSWCS
LCBCSIL  EQU   LCBCSWCS
LCBCSPCI EQU   LCBCSWCS
LCBUSUE  EQU   LCBCSWUS
LCBUSUC  EQU   LCBCSWUS
LCBUSDE  EQU   LCBCSWUS
LCBUSCE  EQU   LCBCSWUS
LCBUSBSY EQU   LCBCSWUS
LCBUSCUE EQU   LCBCSWUS
LCBUSSM  EQU   LCBCSWUS
LCBUSAT  EQU   LCBCSWUS
LCBCSWCA EQU   LCBCSW
LCBOBR   EQU   LCBFLAG3
LCBOBRRD EQU   LCBFLAG3
LCBIOMSG EQU   LCBFLAG3
LCBSOHC  EQU   LCBFLAG3
LCBRLAD  EQU   LCBFLAG3
LCBSOHR  EQU   LCBFLAG3
@NM00125 EQU   LCBFLAG3
LCBECBPT EQU   LCBIOBSN+4
LCBECBCC EQU   LCBIOBSN+3
LCBSENS1 EQU   LCBSNS+1
LCBABORT EQU   LCBTMOUT
LCBNOTIN EQU   LCBLOSDT
LCBOVRUN EQU   LCBSENS0
LCBDATCK EQU   LCBSENS0
LCBEQUCK EQU   LCBSENS0
LCBBUSCK EQU   LCBSENS0
LCBINTRQ EQU   LCBSENS0
LCBCMDRJ EQU   LCBSENS0
LCBFLAG2 EQU   LCBIOBSN
@NM00124 EQU   LCBFLAG1
LCBUNREL EQU   LCBFLAG1
LCBEXCPN EQU   LCBFLAG1
@NM00123 EQU   LCBFLAG1
LCBERPIN EQU   LCBFLAG1
@NM00122 EQU   LCBFLAG1
LCBFSBFR EQU   LCBMHA
LCBISZE  EQU   IEDQLCB+28
LCBLNENT EQU   LCBSCBDA+1
@NM00121 EQU   LCBSCBDA
LCBCPGMH EQU   LCBSTAT4
LCBREAL  EQU   LCBPHASE
@NM00120 EQU   LCBSTAT4
LCBACTRQ EQU   LCBSTAT4
LCBIPLRQ EQU   LCBSTAT4
LCBDACRQ EQU   LCBSTAT4
LCBDMPRQ EQU   LCBSTAT4
@NM00119 EQU   LCBLKMDE
LCBLOCKI EQU   LCBLKMDE
LCBLOCKR EQU   LCBLKMDE
LCBHMFLG EQU   LCBLKMDE
LCBBDFLG EQU   LCBLKMDE
@NM00118 EQU   LCBINSRC
LCBABRTN EQU   LCBCHAIN
LCBCTLMD EQU   LCBTETEN
LCBBFRSZ EQU   LCBCHAIN
LCBUREQN EQU   LCBCHAIN
LCBNORTY EQU   LCBCHAIN
LCBERMSG EQU   LCBCHAIN
LCBEXCP  EQU   LCBCHAIN
LCBINVRQ EQU   LCBSCRNN
LCB2741N EQU   LCBTSOB
LCBINHBN EQU   LCBTSOB
LCBCIRCD EQU   LCBTSOB
LCBPREP  EQU   LCBTSOB
LCBSOPL  EQU   LCBTSOB
LCBSATRD EQU   LCBTSOB
LCBTSBUF EQU   LCBTSOB
LCBWRBRK EQU   LCBTSOB
LCBTDL   EQU   IEDQLCB+18
LCBEOLTD EQU   IEDQLCB+16
LCBRSLNK EQU   IEDQLCB+13
LCBRSPRI EQU   IEDQLCB+12
LCBSTCBA EQU   IEDQLCB+9
LCBRSKEY EQU   IEDQLCB+8
LCBLINK  EQU   LCBRCB+5
LCBPRI   EQU   LCBRCB+4
LCBQCBA  EQU   LCBRCB+1
LCBKEY   EQU   LCBRCB
@NM00117 EQU   IHADCS28+1
@NM00116 EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
@NM00115 EQU   DCBOPTCD
DCBDEBA  EQU   DCBDEBAD+1
@NM00114 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBCH12  EQU   DCBIFPCT
DCBCH9   EQU   DCBIFPCT
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00113 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBICH12 EQU   DCBIBPCT
DCBICH9  EQU   DCBIBPCT
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBRECL  EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00112 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00111 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00110 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00109 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
@NM00108 EQU   DCBDSRG1
@NM00107 EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
@NM00106 EQU   IHADCB
BDUXGRPH EQU   BDUEXRSP
BDUXFINL EQU   BDUEXRSP
BDUXERLK EQU   BDUBDUFG
BDUALTAK EQU   BDUFNFLG
BDUNEGAK EQU   BDUFNFLG
BDUPOSAK EQU   BDUFNFLG
BDUTPTX  EQU   BDUFNFLG
BDUFRSTB EQU   BDUFNFLG
BDULEADG EQU   BDUFNFLG
BDUHEADR EQU   BDUFNFLG
BDUSTHDR EQU   BDUFNFLG
SAVTLLCB EQU   IEDNSVTD+316
SAVTBITN EQU   IEDNSVTD+312
@NM00105 EQU   SAVTCKQB+8
@NM00104 EQU   SAVTCKEC+1
@NM00103 EQU   SAVTCKCC
SAVTCKPO EQU   SAVTCKCC
SAVTCKWA EQU   SAVTCKCC
SAVTCKCH EQU   SAVTCKTB+1
SAVTCKVT EQU   SAVTCKTB
@NM00102 EQU   IEDNSVTD+297
SAVTRDFG EQU   SAVTRDRV+12
@NM00101 EQU   SAVTRDRV+5
SAVTRDPY EQU   SAVTRDRV+4
SAVTRDQB EQU   SAVTRDRV+1
SAVTRDKY EQU   SAVTRDRV
SAVTNID  EQU   IEDNSVTD+280
SAVTDVAS EQU   IEDNSVTD+276
SAVTPLSZ EQU   IEDNSVTD+274
@NM00100 EQU   IEDNSVTD+273
SAVTSUBL EQU   IEDNSVTD+272
@NM00099 EQU   SAVTZELM+1
SAVTSUBM EQU   SAVTZELM
SAVTMHDX EQU   IEDNSVTD+268
SAVTNAT1 EQU   IEDNSVTD+266
SAVTSH20 EQU   IEDNSVTD+264
SAVTRNMP EQU   IEDNSVTD+256
SAVTNAX  EQU   IEDNSVTD+248
SAVTSUBV EQU   IEDNSVTD+247
SAVTSUBA EQU   IEDNSVTD+246
SAVTSIBC EQU   IEDNSVTD+244
SAVTBSM  EQU   IEDNSVTD+240
SAVTSCPT EQU   SAVTTCPU
SAVTRQTG EQU   IEDNSVTD+236
SAVTRQCH EQU   IEDNSVTD+232
SAVTMAND EQU   IEDNSVTD+228
SAVTSPLN EQU   IEDNSVTD+224
SAVTNADL EQU   IEDNSVTD+222
SAVTNATL EQU   IEDNSVTD+220
SAVTMHTB EQU   IEDNSVTD+216
SAVTSSMH EQU   IEDNSVTD+212
SAVTQRS  EQU   IEDNSVTD+208
SAVTRQIN EQU   IEDNSVTD+204
SAVTDFCO EQU   IEDNSVTD+200
SAVTSAO  EQU   IEDNSVTD+196
SAVTSAI  EQU   IEDNSVTD+184
SAVTCSCI EQU   IEDNSVTD+180
SAVTSSRP EQU   IEDNSVTD+176
SAVTSSRQ EQU   IEDNSVTD+172
SAVTSCLU EQU   IEDNSVTD+168
SAVTXTRQ EQU   IEDNSVTD+164
SAVTMVBF EQU   IEDNSVTD+160
@NM00098 EQU   IEDNSVTD+148
SAVTIPCQ EQU   IEDNSVTD+144
@NM00097 EQU   IEDNSVTD+136
@NM00096 EQU   IEDNSVTD+124
SAVTXFMO EQU   IEDNSVTD+120
@NM00095 EQU   IEDNSVTD+116
SAVTSSSR EQU   IEDNSVTD+112
SAVTSCPQ EQU   IEDNSVTD+108
SAVTSLCB EQU   IEDNSVTD+104
SAVTLUSR EQU   IEDNSVTD+100
@NM00094 EQU   SAVTLUSQ+8
SAVTLUSP EQU   SAVTLUSQ+4
SAVTLUSB EQU   SAVTLUSQ
@NM00093 EQU   IEDNSVTD+84
SAVTSAT  EQU   IEDNSVTD+80
SAVTNAT  EQU   IEDNSVTD+76
SAVTCLUP EQU   IEDNSVTD+72
SAVTPIUT EQU   IEDNSVTD+68
SAVTRNTA EQU   IEDNSVTD+64
SAVTDNIR EQU   IEDNSVTD+60
SAVTCNIR EQU   IEDNSVTD+56
SAVTFLDH EQU   IEDNSVTD+52
SAVTSRTN EQU   IEDNSVTD+48
SAVTSREQ EQU   IEDNSVTD+44
SAVTFAIL EQU   IEDNSVTD+42
SAVTSUSE EQU   IEDNSVTD+40
SAVTSIB  EQU   IEDNSVTD+36
SAVTPRTN EQU   IEDNSVTD+32
@NM00092 EQU   IEDNSVTD+28
SAVTWH20 EQU   IEDNSVTD+26
SAVTPWT  EQU   IEDNSVTD+24
SAVTPRTQ EQU   IEDNSVTD+20
SAVTPH20 EQU   IEDNSVTD+14
SAVTPUSE EQU   IEDNSVTD+12
SAVTPLCB EQU   IEDNSVTD+8
SAVTPOOL EQU   IEDNSVTD+4
SAVTPRMT EQU   SAVTDIAF
SAVTVIRT EQU   SAVTDIAF
AVTCPBNO EQU   IEDQAVTD+1172
AVTHRESS EQU   IEDQAVTD+1171
@NM00091 EQU   IEDQAVTD+1170
@NM00090 EQU   IEDQAVTD+1169
@NM00089 EQU   IEDQAVTD+1168
@NM00088 EQU   IEDQAVTD+1165
@NM00087 EQU   IEDQAVTD+1164
AVTHRESE EQU   @NM00086
AVTRADDR EQU   IEDQAVTD+1156
AVTNADDR EQU   IEDQAVTD+1152
AVTHRESN EQU   IEDQAVTD+1148
AVTVOLRN EQU   IEDQAVTD+1144
AVTTOTNN EQU   IEDQAVTD+1140
AVTTRCYN EQU   IEDQAVTD+1136
AVTRCTRN EQU   IEDQAVTD+1132
AVTNOVON EQU   IEDQAVTD+1128
AVTADEBN EQU   IEDQAVTD+1124
AVTVOLRR EQU   IEDQAVTD+1120
AVTTOTNR EQU   IEDQAVTD+1116
AVTTRCYR EQU   IEDQAVTD+1112
AVTRCTRR EQU   IEDQAVTD+1108
AVTNOVOR EQU   IEDQAVTD+1104
AVTADEBR EQU   IEDQAVTD+1100
AVTLODPT EQU   IEDQAVTD+1096
AVTIOBN  EQU   IEDQAVTD+1092
AVTIOBR  EQU   IEDQAVTD+1088
AVTCPBPT EQU   IEDQAVTD+1084
AVTFCPB  EQU   IEDQAVTD+1080
@NM00085 EQU   IEDQAVTD+1076
AVTINCPQ EQU   IEDQAVTD+1072
@NM00084 EQU   IEDQAVTD+1068
@NM00083 EQU   IEDQAVTD+1065
@NM00082 EQU   AVTBIT4
@NM00081 EQU   AVTBIT4
@NM00080 EQU   AVTBIT4
@NM00079 EQU   AVTBIT4
@NM00078 EQU   AVTBIT4
@NM00077 EQU   AVTBIT4
@NM00076 EQU   AVTBIT4
AVTRUFTN EQU   AVTBIT4
@NM00075 EQU   IEDQAVTD+1060
AVTNOBFQ EQU   IEDQAVTD+1056
@NM00074 EQU   IEDQAVTD+1052
AVTDKENQ EQU   IEDQAVTD+1048
@NM00073 EQU   IEDQAVTD+1044
AVTDKAPQ EQU   IEDQAVTD+1040
AVTCOPY  EQU   IEDQAVTD+1036
AVTIA    EQU   IEDQAVTD+1032
AVTFL    EQU   IEDQAVTD+1028
@NM00072 EQU   IEDQAVTD+1024
AVTNCPBQ EQU   IEDQAVTD+1020
AVTTOTNC EQU   IEDQAVTD+1016
AVTCMAX  EQU   IEDQAVTD+1012
AVTCMIN  EQU   IEDQAVTD+1008
AVTHM02  EQU   IEDQAVTD+1004
AVTOPCIN EQU   IEDQAVTD+1002
AVTDCTLN EQU   IEDQAVTD+1000
AVTOPMSK EQU   IEDQAVTD+996
AVTDDFT  EQU   IEDQAVTD+992
AVTOPTN  EQU   IEDQAVTD+984
AVTDSKCT EQU   IEDQAVTD+982
AVTCKRST EQU   IEDQAVTD+981
AVTSTAN  EQU   AVTBIT3
AVTSTACN EQU   AVTBIT3
AVTSTAIN EQU   AVTBIT3
AVTSTAYN EQU   AVTBIT3
AVTOLTBN EQU   AVTBIT3
AVTTSAB  EQU   AVTBIT3
AVTRFULN EQU   AVTBIT3
AVTRECVN EQU   AVTBIT3
@NM00071 EQU   AVTBIT2
@NM00070 EQU   AVTBIT2
AVTOPEIN EQU   AVTBIT2
AVTSTRTN EQU   AVTBIT2
AVTTOPOL EQU   AVTBIT2
AVTCOPYN EQU   AVTBIT2
AVTREUSN EQU   AVTBIT2
AVTEXTSC EQU   AVTBIT2
AVTDISKN EQU   AVTBIT1
AVTQUCKN EQU   AVTBIT1
AVTCLOSN EQU   AVTBIT1
AVTREADN EQU   AVTBIT1
AVTDLAYN EQU   AVTBIT1
AVTAQTAN EQU   AVTBIT1
AVTTSON  EQU   AVTBIT1
AVTAPLKN EQU   AVTBIT1
AVTDUMBR EQU   IEDQAVTD+976
AVTDLQX  EQU   IEDQAVTD+974
AVTINTLV EQU   IEDQAVTD+972
AVTSMCNT EQU   IEDQAVTD+970
AVTAVFCT EQU   IEDQAVTD+968
AVTOPCON EQU   IEDQAVTD+966
AVTOPCNT EQU   IEDQAVTD+964
AVTLNCNT EQU   IEDQAVTD+962
AVTHA16  EQU   IEDQAVTD+958
AVTHA7   EQU   IEDQAVTD+956
AVTHA4   EQU   IEDQAVTD+954
AVTHA3   EQU   IEDQAVTD+952
AVTHA2   EQU   IEDQAVTD+950
AVTGETMS EQU   IEDQAVTD+949
@NM00069 EQU   IEDQAVTD+948
AVTGETMD EQU   IEDQAVTD+944
AVTGETMN EQU   IEDQAVTD+940
AVTCWTOT EQU   IEDQAVTD+936
AVTCWINT EQU   IEDQAVTD+884
AVTDTRAP EQU   IEDQAVTD+880
@NM00068 EQU   IEDQAVTD+878
@NM00067 EQU   AVTIOTR
AVTIOTRH EQU   AVTIOTR
AVTIOTRE EQU   AVTIOTR
@NM00066 EQU   AVTSUBT
AVTSUBPT EQU   AVTSUBT
AVTSUBON EQU   AVTSUBT
AVTAFE30 EQU   IEDQAVTD+872
AVTAFE20 EQU   IEDQAVTD+868
AVTAFE10 EQU   IEDQAVTD+864
AVTCWEC2 EQU   IEDQAVTD+860
AVTCWPM2 EQU   IEDQAVTD+856
AVTCWTS2 EQU   IEDQAVTD+855
AVTCWTS1 EQU   IEDQAVTD+854
AVTCWCLD EQU   AVTCWFL2
AVTCWRAP EQU   AVTCWFL2
@NM00065 EQU   AVTCWFL2
@NM00064 EQU   AVTCWFL2
@NM00063 EQU   AVTCWFL2
@NM00062 EQU   AVTCWFL2
@NM00061 EQU   AVTCWFL2
AVTCWACT EQU   AVTCWFL2
@NM00060 EQU   AVTCWFL1
@NM00059 EQU   AVTCWFL1
@NM00058 EQU   AVTCWFL1
@NM00057 EQU   AVTCWFL1
@NM00056 EQU   AVTCWFL1
@NM00055 EQU   AVTCWFL1
@NM00054 EQU   AVTCWFL1
AVTCOMWN EQU   AVTCWFL1
AVTCWEC1 EQU   IEDQAVTD+848
AVTCWPM1 EQU   IEDQAVTD+844
AVTCAREA EQU   IEDQAVTD+840
AVTFZERO EQU   IEDQAVTD+836
AVTCADDR EQU   IEDQAVTD+832
AVTCOREC EQU   IEDQAVTD+828
@NM00053 EQU   IEDQAVTD+820
AVTCPBCB EQU   IEDQAVTD+816
@NM00052 EQU   IEDQAVTD+808
AVTDSIOB EQU   IEDQAVTD+804
@NM00051 EQU   IEDQAVTD+796
AVTCPRMB EQU   IEDQAVTD+792
@NM00050 EQU   IEDQAVTD+784
AVTCLOSB EQU   IEDQAVTD+780
@NM00049 EQU   IEDQAVTD+772
AVTACTIB EQU   IEDQAVTD+768
@NM00048 EQU   IEDQAVTD+764
AVTOLTEB EQU   IEDQAVTD+760
AVTOLTCH EQU   AVTOLTQB+1
AVTOLTVT EQU   AVTOLTQB
@NM00047 EQU   AVTOPCQB+8
@NM00046 EQU   AVTOPCEC+1
@NM00045 EQU   AVTOPCCC
AVTOPCPO EQU   AVTOPCCC
AVTOPCWA EQU   AVTOPCCC
AVTOPCCH EQU   AVTOPCOB+1
AVTOPCVT EQU   AVTOPCOB
@NM00044 EQU   AVTCKPQB+9
AVTCKPTS EQU   AVTCKPQB+8
@NM00043 EQU   AVTCKPEC+1
@NM00042 EQU   AVTCKPCC
AVTCKPPO EQU   AVTCKPCC
AVTCKPWA EQU   AVTCKPCC
AVTCKPCH EQU   AVTCKPTB+1
AVTCKPVT EQU   AVTCKPTB
@NM00041 EQU   IEDQAVTD+724
@NM00040 EQU   IEDQAVTD+716
AVTSELCH EQU   IEDQAVTD+713
AVTBFRTN EQU   AVTBFRFG
AVTBFREB EQU   IEDQAVTD+708
AVTTIMQ  EQU   IEDQAVTD+704
@NM00039 EQU   IEDQAVTD+700
AVTIMQPS EQU   IEDQAVTD+696
AVTINOUT EQU   IEDQAVTD+694
AVTREFTM EQU   IEDQAVTD+692
@NM00038 EQU   IEDQAVTD+680
AVTDELYB EQU   IEDQAVTD+676
AVTOCQPT EQU   IEDQAVTD+672
AVTTSOPT EQU   IEDQAVTD+668
AVTSUPPT EQU   IEDQAVTD+664
AVTCBQCB EQU   IEDQAVTD+660
@NM00037 EQU   AVTSYSER
@NM00036 EQU   AVTSYSER
@NM00035 EQU   AVTSYSER
@NM00034 EQU   AVTSYSER
@NM00033 EQU   AVTSYSER
@NM00032 EQU   AVTSYSER
AVTCMAXN EQU   AVTSYSER
AVTCMINN EQU   AVTSYSER
AVT2260L EQU   IEDQAVTD+652
AVTABEPL EQU   AVTADBUF
AVTHFF   EQU   AVTCLRHI+2
@NM00031 EQU   AVTCLRHI
AVTCCLNK EQU   AVTCRELE+5
AVTCCPRI EQU   AVTCRELE+4
AVTCCQCB EQU   AVTCCELE+1
AVTCCKEY EQU   AVTCCELE
AVTDELAD EQU   IEDQAVTD+632
AVTDELEM EQU   IEDQAVTD+628
AVTBSX   EQU   AVTCKLNK
AVTOPETR EQU   AVTHG01
@NM00030 EQU   AVTCKBYT
AVTCKONQ EQU   AVTCKBYT
@NM00029 EQU   AVTCKBYT
@NM00028 EQU   AVTCKBYT
@NM00027 EQU   AVTCKBYT
@NM00026 EQU   AVTCKBYT
@NM00025 EQU   AVTCKBYT
@NM00024 EQU   AVTCKBYT
AVTOPERT EQU   IEDQAVTD+618
AVTOPXCL EQU   IEDQAVTD+616
AVTOPERL EQU   IEDQAVTD+615
@NM00023 EQU   IEDQAVTD+614
AVTCKTIM EQU   IEDQAVTD+612
AVTCKELV EQU   IEDQAVTD+610
AVTCPRCD EQU   IEDQAVTD+609
AVTWARMN EQU   AVTCKELF
AVTCRTLN EQU   AVTCKELF
AVTCPIPN EQU   AVTCKELF
AVTCCLCN EQU   AVTCKELF
AVTCINCN EQU   AVTCKELF
@NM00022 EQU   AVTCKELF
AVTCMCPN EQU   AVTCKELF
AVTNQBCK EQU   AVTCKELF
AVTCKQAD EQU   IEDQAVTD+605
AVTSCBSZ EQU   IEDQAVTD+604
@NM00021 EQU   IEDQAVTD+600
AVTCKELE EQU   IEDQAVTD+596
@NM00020 EQU   AVTCKPEL+8
AVTCKRLK EQU   AVTCKPEL+5
AVTCKRPR EQU   AVTCKPEL+4
AVTCKRMQ EQU   AVTCKRMV+1
AVTCKRKY EQU   AVTCKRMV
AVTHK    EQU   IEDQAVTD+576
AVTHI    EQU   IEDQAVTD+572
AVTIOT   EQU   IEDQAVTD+568
AVTNX    EQU   IEDQAVTD+564
AVTTONE  EQU   IEDQAVTD+560
AVTA3TL  EQU   IEDQAVTD+556
AVTDMECB EQU   IEDQAVTD+552
AVTABEND EQU   IEDQAVTD+546
AVTPLCBN EQU   IEDQAVTD+544
@NM00019 EQU   AVTSAVTP+1
@NM00018 EQU   AVTSAVTF
AVTSNA   EQU   AVTSAVTF
AVTONSNA EQU   AVTSAVTF
AVTVTMCP EQU   AVTSAVTF
@NM00017 EQU   IEDQAVTD+536
AVTCMBSS EQU   IEDQAVTD+532
AVTRCV   EQU   IEDQAVTD+528
AVTSEND  EQU   IEDQAVTD+524
AVTCSCH  EQU   IEDQAVTD+520
AVTQ1    EQU   IEDQAVTD+516
AVTE7    EQU   IEDQAVTD+512
AVTHB    EQU   IEDQAVTD+508
AVTR1    EQU   IEDQAVTD+504
AVTBZ    EQU   IEDQAVTD+500
AVTEZ    EQU   IEDQAVTD+496
AVTEC    EQU   IEDQAVTD+492
AVTEW    EQU   IEDQAVTD+488
AVTNDIAL EQU   AVTSCOPT
AVTN2741 EQU   AVTSCOPT
AVTCONCO EQU   AVTSCOPT
AVTCONC  EQU   AVTSCOPT
AVTCMBUF EQU   AVTSCOPT
AVTAPDMP EQU   AVTSCOPT
@NM00016 EQU   AVTSCOPT
AVTHA    EQU   AVTDISP
AVTEA    EQU   IEDQAVTD+476
AVTAX    EQU   IEDQAVTD+472
AVTA3    EQU   IEDQAVTD+468
AVTGD    EQU   IEDQAVTD+464
AVTAL    EQU   IEDQAVTD+460
AVTOLTST EQU   AVTHG02
AVTE8    EQU   IEDQAVTD+452
AVTUI    EQU   IEDQAVTD+448
AVTCOMPT EQU   IEDQAVTD+444
AVTCRSRF EQU   IEDQAVTD+440
@NM00015 EQU   IEDQAVTD+436
AVTKA02  EQU   IEDQAVTD+432
AVTOPTPT EQU   IEDQAVTD+428
AVTPCBPT EQU   IEDQAVTD+424
@NM00014 EQU   AVTECB1
AVTCOMP  EQU   AVTECB1
@NM00013 EQU   AVTECB1
AVTOPECA EQU   IEDQAVTD+416
AVTOLECA EQU   IEDQAVTD+412
AVTCKECA EQU   IEDQAVTD+408
AVTCWECA EQU   IEDQAVTD+404
AVTCWTCB EQU   IEDQAVTD+400
AVTOLTCB EQU   IEDQAVTD+396
AVTOCTCB EQU   IEDQAVTD+392
AVTCKTCB EQU   IEDQAVTD+388
AVTAS    EQU   IEDQAVTD+384
AVTNOLBF EQU   IEDQAVTD+382
AVTNCKPR EQU   IEDQAVTD+381
AVTCIB   EQU   IEDQAVTD+380
AVTSPLPT EQU   IEDQAVTD+376
AVTMVBFR EQU   IEDQAVTD+372
AVTSBTA  EQU   IEDQAVTD+368
AVTRARTN EQU   IEDQAVTD+364
AVTBSCAN EQU   IEDQAVTD+360
AVTRDYA  EQU   IEDQAVTD+356
AVTDISTR EQU   IEDQAVTD+348
AVTPARM3 EQU   IEDQAVTD+344
@NM00012 EQU   AVTPKF
@NM00011 EQU   AVTPKF
@NM00010 EQU   AVTPKF
AVTFTCHF EQU   AVTPKF
@NM00009 EQU   AVTPKF
@NM00008 EQU   AVTPKF
@NM00007 EQU   AVTPKF
@NM00006 EQU   AVTPKF
AVTPARM  EQU   IEDQAVTD+336
AVTEXS2A EQU   IEDQAVTD+330
AVTEXA2S EQU   IEDQAVTD+324
AVTOCGET EQU   IEDQAVTD+320
AVTCKAVT EQU   @NM00004+1
@NM00005 EQU   AVTCKFLG
AVTCKHLT EQU   AVTCKFLG
AVTCKREQ EQU   AVTCKFLG
AVTCKENV EQU   AVTCKFLG
AVTCKNAC EQU   AVTCKFLG
AVTCKTAC EQU   AVTCKFLG
AVTBUENT EQU   IEDQAVTD+314
@NM00003 EQU   IEDQAVTD+313
AVTFULLT EQU   AVTBUFSW
AVTUNCON EQU   AVTBUFSW
@NM00002 EQU   AVTBUFSW
AVTBUFTR EQU   AVTREADD
AVTREADY EQU   IEDQAVTD+304
AVTRACE  EQU   IEDQAVTD+300
AVTTCB   EQU   IEDQAVTD+296
AVTPASWD EQU   IEDQAVTD+288
AVTCTLCH EQU   IEDQAVTD+280
AVTDOUBL EQU   IEDQAVTD+272
AVTDOUBX EQU   IEDQAVTD+264
AVTDPARM EQU   IEDQAVTD+260
AVTCSTCS EQU   IEDQAVTD+256
AVTDLQ   EQU   AVTSAVEX+32
@NM00001 EQU   AVTSAVEX
AVTSAVE4 EQU   IEDQAVTD+144
AVTSAVE3 EQU   IEDQAVTD+72
AVTSAVE2 EQU   IEDQAVTD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00602 EQU   @EL00002
@RF00612 EQU   @EL00002
@RC00604 EQU   @EL00002
@RC00619 EQU   @EL00003
@RC00640 EQU   @EL00003
@RF00684 EQU   @EL00005
@RC00686 EQU   @EL00005
@RC00713 EQU   @EL00008
@RF00730 EQU   @EL00009
@RF00756 EQU   @EL00010
@RC00779 EQU   @EL00011
@RF00824 EQU   @EL00013
@RF00823 EQU   @EL00013
@RC00847 EQU   @RC00834
@PB00014 EQU   @EL00001
@RT00608 EQU   @RC00604
@RC00606 EQU   @RC00604
@RC00621 EQU   @RC00619
@RF00688 EQU   @RC00686
@RC00784 EQU   @RC00779
@PB00013 EQU   @PB00014
@RC00623 EQU   @RC00621
@PB00012 EQU   @PB00013
@RF00631 EQU   @RC00623
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@RC00570 EQU   @PB00002
@RC00563 EQU   @PB00002
@ENDDATA EQU   *
         END   IEDSAI,(C'PLS2257',0701,78089)
