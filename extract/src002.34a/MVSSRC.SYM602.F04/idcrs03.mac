         TITLE '************** IDCRS03: IDCAMS RESETCAT ROUTINE ********
               *********'
IDCRS03  CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDCRS03   77.119'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  LA    @11,4095(,@12)                                      0001
         LA    @10,4095(,@11)                                      0001
         LA    @09,4095(,@10)                                      0001
         USING @PSTART,@12                                         0001
         USING @PSTART+4095,@11                                    0001
         USING @PSTART+8190,@10                                    0001
         USING @PSTART+12285,@09                                   0001
         USING @DATD,@08  DATA BASE REGISTER
         L     @15,@SIZDATD  SIZE OF AUTOMATIC DATA
         LA    @15,0(0,@15)  CLEAR SUBPOOL
         STM   @09,@12,RS03RG09(REG6)  SAVE BASE REGISTERS
*        RETURN CODE(REG15);  /*REG 15 HAS LENGTH OF AUTO DATA*/   0291
         L     @14,12(,@13)                                        0291
         LM    @00,@12,20(@13)                                     0291
         BR    @14                                                 0291
*/********************************************************************/
*/*                                                                  */
*/*            RESETCAT LOCAL DECLARATIONS                           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0292
*DCL MODID CHAR(4) INIT('RS03');       /*MODID FOR UEPIL             */
*                                                                  0292
*DCL                                                               0293
*   1 PATCH    CHAR(800)               /*PATCH AREA                  */
*              LOCAL STATIC BDY(WORD), /* 5 PERCENT                  */
*     2 *      CHAR(32)                /*PATCHAREA                   */
*              INIT('PATCH 800 BYTES LAST USED 000000'),           0293
*                                      /*IDENTIFIER                  */
*     2 *(768) CHAR(1)                 /*FORMAT UNUSED AREA          */
*              INIT((768)'00'X);       /*WITH ZEROS                  */
*                                                                  0293
*/********************************************************************/
*/*                                                                  */
*/* DATA FOR IDCRS03 -                                               */
*/*     BIT MASKS FOR SETBITS                                        */
*/*                                                                  */
*/********************************************************************/
*  DECLARE MASKVAL CHAR(8) INIT('FF7F3F1F0F070301'X);              0294
*                                      /*FIRST BIT POSITION MASK     */
*  DECLARE MASKV1 CHAR(8) INIT('80C0E0F0F8FCFEFF'X);               0295
*                                      /*LAST BIT POSITION MASK      */
*  DECLARE MASKALL CHAR(1) INIT('FF'X); /*FULL BYTE MASK             */
*  DECLARE ASSO3A  CHAR(*) EXTERNAL NONLOCAL;                      0297
*                                      /*GDG DATA SET ASSOC TBL(RS02)*/
*/********************************************************************/
*/*                                                                  */
*/* PROCEDURE NAME - CATRCDSU                                        */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      ESTABLISH BASE ADDRESSES FOR DISECTING CATALOG              */
*/*      LOW KEY RANGE RECORDS.                                      */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      LOW KEY RANGE RECORD(RSGRABCU->GRABCURR->RECORD)            */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RSCPE1 - ADDRESS OF START OF RECORD                         */
*/*      RSCPE2 - ADDRESS OF START OF GOPS(GROUP OCCURRENCE POINTERS)*/
*/*      RSCPE3 - ADDRESS OF START OF GOS(GROUP OCCURRENCES)         */
*/*      RSCPE4 - ADDRESS OF END OF RECORD                           */
*/*      RSGOPLEN - LENGTH OF GOPS FOR THIS RECORD                   */
*/*                                                                  */
*/* EXIT - RETURN TO CALLER                                          */
*/*                                                                  */
*/********************************************************************/
*      GENERATE;                                                   0298
         DS    0F
NAME0002 DC    CL8'CATRCDSU'
*CATRCDSU: PROCEDURE                                               0299
*        OPTIONS(NOSAVE,NOSAVEAREA);                               0299
*                                                                  0299
         B     @PB00002                                            0299
CATRCDSU DS    0H                                                  0300
*      GENERATE REFS(RS03RG08, REG6);                              0300
*                                                                  0300
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         ENTRY CATRCDSU  ENTRY POINT
         LM    @08,@12,RS03RG08(REG6)  PRIME BASE AND DATA REGS
         MVC   0(4,@15),NAME0002  PROCNAME TO REGSAVE
*        RSCPE1 = ADDR(CATRCD);    /* START OF RECORD*/            0301
         L     @07,RSGRABCU(,REG6)                                 0301
         LA    @04,8                                               0301
         AL    @04,GRABCURR(,@07)                                  0301
         ST    @04,RSCPE1(,REG6)                                   0301
*        RFY CATRCD BASED(RSCPE1);                                 0302
*        IF RCDID = LCCRID × RCDID = FREEID THEN;                  0303
         CLI   RCDID(@04),C'L'                                     0303
         BE    @RT00303                                            0303
         CLI   RCDID(@04),C'F'                                     0303
         BE    @RT00303                                            0303
*                                      /*NO GOP OR GO FOR FREE OR CCR*/
*        ELSE                                                      0305
*          DO;                         /*GET ADDRESS OF GOP AND GO*/
*            RSCPE2 = RSCPE1 + NREPLF; /*START OF GOPS*/           0306
         L     @07,RSCPE1(,REG6)                                   0306
         SLR   @04,@04                                             0306
         IC    @04,NREPLF(,@07)                                    0306
         ALR   @04,@07                                             0306
         ST    @04,RSCPE2(,REG6)                                   0306
*            IF RCDID = GDGID THEN                                 0307
         CLI   RCDID(@07),C'B'                                     0307
         BNE   @RF00307                                            0307
*              DO;                     /*FOR GDG BASE - VARIABLE DATA*/
*                RSCPE7 = RSCPE2;      /* ADDR OF DATA FOR GDG BASE*/
         ST    @04,RSCPE7(,REG6)                                   0309
*                RSCPE2 = RSCPE2 + VARLEN + LENGTH(VARLEN);        0310
         ICM   @07,12,VARLEN(@04)                                  0310
         SRA   @07,16                                              0310
         ALR   @07,@04                                             0310
         AL    @07,@CF00149                                        0310
         ST    @07,RSCPE2(,REG6)                                   0310
*                                      /*START OF GOPS - GDG BASE*/
*              END;                                                0311
*            RSGOPLEN = CATGOPLN;      /*CAT GOP LENGTH*/          0312
@RF00307 MVC   RSGOPLEN(2,REG6),@CH00280                           0312
*            IF RCDID = VOLID × RCDID = VOLEXTID THEN              0313
         L     @07,RSCPE1(,REG6)                                   0313
         CLI   RCDID(@07),C'V'                                     0313
         BE    @RT00313                                            0313
         CLI   RCDID(@07),C'W'                                     0313
         BNE   @RF00313                                            0313
@RT00313 DS    0H                                                  0314
*              RSGOPLEN = VOLGOPLN;    /*VOLUME GOP LENGTH*/       0314
         MVC   RSGOPLEN(2,REG6),@CH00152                           0314
*            RSCPE3 = ADDR(REPGOPT) + REPCNT*RSGOPLEN;             0315
@RF00313 L     @07,RSCPE2(,REG6)                                   0315
         LA    @04,REPGOPT(,@07)                                   0315
         SLR   @15,@15                                             0315
         IC    @15,REPCNT(,@07)                                    0315
         MH    @15,RSGOPLEN(,REG6)                                 0315
         ALR   @04,@15                                             0315
         ST    @04,RSCPE3(,REG6)                                   0315
*                                      /*START OF GOS*/            0316
*            RSCPE4 = RSCPE1 + RCDSIZ; /*END OF RECORD*/           0316
         L     @07,RSCPE1(,REG6)                                   0316
         ICM   @04,12,RCDSIZ(@07)                                  0316
         SRA   @04,16                                              0316
         ALR   @04,@07                                             0316
         ST    @04,RSCPE4(,REG6)                                   0316
*          END;                                                    0317
*                                                                  0317
*        RFY CATRCD;                   /*REVERT                      */
@RT00303 DS    0H                                                  0319
*  CALL EXIT;  /*TERMINATE*/                                       0319
         BAL   @14,EXIT                                            0319
*  END CATRCDSU; /*END OF PROCEDURE*/                              0320
@EL00002 DS    0H                                                  0320
@EF00002 DS    0H                                                  0320
@ER00002 BR    @14                                                 0320
@PB00002 DS    0H                                                  0321
*/********************************************************************/
*/* PROCEDURE NAME - CHKBITS                                         */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     CHECK BITS BETWEEN TWO BITMAPS. EITHER BITS ARE ALL ON OR    */
*/*     ALL OFF.                                                     */
*/*                                                                  */
*/* INPUT -                                                          */
*/*     RSTGBMAP - MAP WITH TRACKS TO BE CHECKED                     */
*/*     RSCKBMAP - CHECK TRACKS IN RSTGBMAP AGAINST THIS MAP         */
*/*     RSCK1TO1 - ON = A 1 IN TARGET MAP SHOULD HAVE A 1 IN COMP MAP*/
*/*                OFF= A 1 IN TARGET MAP SHOULD HAVE A 0 IN COMP MAP*/
*/*     RSMAPSIZ - SIZE OF THE MAP                                   */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*     RSCKBERR - ON = MISMATCH.                                    */
*/*                                                                  */
*/********************************************************************/
*      GENERATE;                                                   0321
         DS    0F
NAME0004 DC    CL8'CHKBITS'
*CHKBITS: PROCEDURE                                                0322
*        OPTIONS(NOSAVE,NOSAVEAREA);                               0322
*                                                                  0322
         B     @PB00003                                            0322
CHKBITS  DS    0H                                                  0323
*      GENERATE REFS(RS03RG08, REG6);                              0323
*                                                                  0323
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         MVC   0(4,@15),NAME0004  PROCNAME TO REGSAVE
*        RFY BMAP BASED(RSTOMAP);                                  0324
*                                                                  0324
*        /************************************************************/
*        /*                                                          */
*        /*                        INITIALIZE                        */
*        /*                                                          */
*        /************************************************************/
*                                                                  0325
*        RSCKBERR = OFF;               /*RESET ERROR                 */
         NI    RSCKBERR(REG6),B'11111101'                          0325
*        RSTOMAP = RSTGBMAP;           /*MAP 1                       */
         L     @07,RSTGBMAP(,REG6)                                 0326
         ST    @07,RSTOMAP(,REG6)                                  0326
*        RSFROMAP = RSCKBMAP;          /* MAP 2                      */
*                                                                  0327
         L     @07,RSCKBMAP(,REG6)                                 0327
         ST    @07,RSFROMAP(,REG6)                                 0327
*        /************************************************************/
*        /*                                                          */
*        /*     CHECK FOR A MATCH                                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  0328
*        DO TMPSZ = 1 TO RSMAPSIZ WHILE (RSCKBERR=OFF);            0328
*                                                                  0328
         LA    @07,1                                               0328
         B     @DE00328                                            0328
@DL00328 TM    RSCKBERR(REG6),B'00000010'                          0328
         BNZ   @DC00328                                            0328
*        /************************************************************/
*        /*                                                          */
*        /*                         BOTH 1S                          */
*        /*                                                          */
*        /************************************************************/
*                                                                  0329
*          IF RSCK1TO1 = ON THEN                                   0329
         TM    RSCK1TO1(REG6),B'00000001'                          0329
         BNO   @RF00329                                            0329
*            IF BMAP(1:1) ^= (BMAP(1:1) & (RSFROMAP->BMAP(1:1))) THEN
         L     @07,RSTOMAP(,REG6)                                  0330
         L     @04,RSFROMAP(,REG6)                                 0330
         MVC   @TS00001(1),BMAP(@07)                               0330
         NC    @TS00001(1),BMAP(@04)                               0330
         CLC   BMAP(1,@07),@TS00001                                0330
         BE    @RF00330                                            0330
*              RSCKBERR = ON;                                      0331
         OI    RSCKBERR(REG6),B'00000010'                          0331
*            ELSE;                                                 0332
*                                                                  0332
@RF00330 DS    0H                                                  0333
*        /************************************************************/
*        /*                                                          */
*        /*                      MAP 1S TO 0S                        */
*        /*                                                          */
*        /************************************************************/
*                                                                  0333
*          ELSE                                                    0333
*            IF (BMAP(1:1) & (RSFROMAP->BMAP(1:1))) ^= '00'X THEN  0333
         B     @RC00329                                            0333
@RF00329 L     @07,RSTOMAP(,REG6)                                  0333
         L     @04,RSFROMAP(,REG6)                                 0333
         MVC   @TS00001(1),BMAP(@07)                               0333
         NC    @TS00001(1),BMAP(@04)                               0333
         CLI   @TS00001,X'00'                                      0333
         BE    @RF00333                                            0333
*              RSCKBERR = ON;                                      0334
         OI    RSCKBERR(REG6),B'00000010'                          0334
*          RSTOMAP = RSTOMAP + 1;                                  0335
@RF00333 DS    0H                                                  0335
@RC00329 LA    @07,1                                               0335
         L     @04,RSTOMAP(,REG6)                                  0335
         ALR   @04,@07                                             0335
         ST    @04,RSTOMAP(,REG6)                                  0335
*          RSFROMAP = RSFROMAP + 1;                                0336
         AL    @07,RSFROMAP(,REG6)                                 0336
         ST    @07,RSFROMAP(,REG6)                                 0336
*        END;                                                      0337
         LA    @07,1                                               0337
         AL    @07,TMPSZ(,REG6)                                    0337
@DE00328 ST    @07,TMPSZ(,REG6)                                    0337
         C     @07,RSMAPSIZ(,REG6)                                 0337
         BNH   @DL00328                                            0337
@DC00328 DS    0H                                                  0338
*        RFY BMAP;                     /*REVERT                      */
* CALL EXIT;  /*TERMINATE*/                                        0339
         BAL   @14,EXIT                                            0339
* END CHKBITS; /*END OF PROCEDURE*/                                0340
@EL00003 DS    0H                                                  0340
@EF00003 DS    0H                                                  0340
@ER00003 BR    @14                                                 0340
@PB00003 DS    0H                                                  0341
*/********************************************************************/
*/* PROCEDURE NAME - CHKDSDIR                                        */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     ENSURE THAT THE DSDIR AND DATA OR INDEX HAVE                 */
*/*     MATCHING CREATION TIME STAMPS AND SUM TT(S). UPDATE THE      */
*/*     DSDIR CIN IF THE DATA OR INDEX HAS BEEN REASSIGNED.          */
*/*     MARK THE VGO UNUSABLE IF THE DSDIR AND VGO DON'T MATCH.      */
*/*                                                                  */
*/* INPUT -                                                          */
*/*     RSCDSNT8 - ADDRESS OF SN VECTOR TABLE FOR THE DSDIR          */
*/*       RSFAENT - ADDRESS OF DSDIR ENTRY TO CHECK                  */
*/*       RSFCNDX - INDEX OF THE DSDIR ENTRY                         */
*/*     RSCDSNT3 - ADDRESS OF SN VECTOR TABLE FOR THE VGOS.          */
*/*       RSFAENT - ADDRESS OF 1ST VGO FOR THIS DSDIR.               */
*/*       RSFCNDX - INDEX OF THE VGO                                 */
*/*     RSCDVOLR - ADDRESS OF RAB FOR THE VOLUME RECORD              */
*/*     RSCDDIR - ADDRESS OF RAB FOR THE DATA OR INDEX RECORD        */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*     SNFPROC - SET ON IN EACH VGO PROCESSED                       */
*/*                                                                  */
*/********************************************************************/
*      GENERATE;                                                   0341
         DS    0F
NAME0006 DC    CL8'CHKDSDIR'
*CHKDSDIR: PROCEDURE                                               0342
*        OPTIONS(NOSAVE,NOSAVEAREA);                               0342
*                                                                  0342
         B     @PB00004                                            0342
CHKDSDIR DS    0H                                                  0343
*      GENERATE REFS(RS03RG08, REG6);                              0343
*                                                                  0343
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         ENTRY CHKDSDIR  ENTRY POINT
         LM    @08,@12,RS03RG08(REG6)  PRIME BASE AND DATA REGS
         MVC   0(4,@15),NAME0006  PROCNAME TO REGSAVE
*        OLDERID2 = NEWERID2;                                      0344
         L     @07,GDTTR2(,REG5)                                   0344
         MVC   @TS00001(95),NEWERID2(@07)                          0344
         MVC   OLDERID2(95,@07),@TS00001                           0344
*        NEWID2 = 'RSCD';                                          0345
*                                                                  0345
         MVC   NEWID2(4,@07),@CC03496                              0345
*        /************************************************************/
*        /*                                                          */
*        /*  SAVE THE CALLER'S VGO AND DSDIR STATUS                  */
*        /*                                                          */
*        /************************************************************/
*                                                                  0346
*        RSCD8FAE = RSCDSNT8->RSFAENT;                             0346
         L     @07,RSCDSNT8(,REG6)                                 0346
         L     @04,RSFAENT(,@07)                                   0346
         ST    @04,RSCD8FAE(,REG6)                                 0346
*        RSCD8FCN = RSCDSNT8->RSFCNDX;                             0347
         LH    @07,RSFCNDX(,@07)                                   0347
         STH   @07,RSCD8FCN(,REG6)                                 0347
*        RSCD3FAE = RSCDSNT3->RSFAENT;                             0348
         L     @07,RSCDSNT3(,REG6)                                 0348
         L     @15,RSFAENT(,@07)                                   0348
         ST    @15,RSCD3FAE(,REG6)                                 0348
*        RSCD3FCN = RSCDSNT3->RSFCNDX;                             0349
*                                                                  0349
         LH    @15,RSFCNDX(,@07)                                   0349
         STH   @15,RSCD3FCN(,REG6)                                 0349
*        /************************************************************/
*        /*                                                          */
*        /*  INITIALIZE FOR VGO SCAN                                 */
*        /*                                                          */
*        /************************************************************/
*                                                                  0350
*        RFY SNDSDIR BASED(RSCDSNT8->RSFAENT); /*DSDIR SNTAB         */
*        RSWASNVT = RSCDSNT3;          /*VGO SNTAB                   */
         ST    @07,RSWASNVT(,REG6)                                 0351
*        GRABCURR = RSCDDIR;           /*DATA OR INDEX RECORD        */
*                                                                  0352
         L     @07,RSGRABCU(,REG6)                                 0352
         L     @15,RSCDDIR(,REG6)                                  0352
         ST    @15,GRABCURR(,@07)                                  0352
*        /************************************************************/
*        /*                                                          */
*        /*     ENSURE MATCHING CINS BETWEEN THE DSDIR AND D OR I    */
*        /*     IF NOT MATCHING, MARK THE VGO UNUSABLE.              */
*        /*                                                          */
*        /************************************************************/
*                                                                  0353
*        RSASDSDI = OFF;               /*ASSUME NO DSDIR MATCH       */
         NI    RSASDSDI(REG6),B'10111111'                          0353
*        IF SDSIDNO ^= RCDCINO THEN                                0354
         CLC   SDSIDNO(3,@04),RCDCINO+8(@15)                       0354
         BE    @RF00354                                            0354
*          CALL MARKUNUS;                                          0355
*                                                                  0355
         BAL   @14,MARKUNUS                                        0355
*        /************************************************************/
*        /*                                                          */
*        /*     CHECK FOR AN EXTENDED DSDIR. NOTE THAT DOS DID NOT   */
*        /*     INCLUDE THE EXTENDED DSDIR IN THEIR SUPPORT.         */
*        /*                                                          */
*        /************************************************************/
*                                                                  0356
*        ELSE                                                      0356
*          IF SDSEXT = OFF THEN                                    0356
         B     @RC00354                                            0356
@RF00354 L     @07,RSCDSNT8(,REG6)                                 0356
         L     @07,RSFAENT(,@07)                                   0356
         TM    SDSEXT(@07),B'10000000'                             0356
         BNZ   @RF00356                                            0356
*            RSASDSDI = ON;            /*GOOD DSDIR                  */
*                                                                  0357
         OI    RSASDSDI(REG6),B'01000000'                          0357
*        /************************************************************/
*        /*                                                          */
*        /*     EXTENDED DSDIR CHECK - FIRST CHECK THE CREATION      */
*        /*     TIME STAMP.                                          */
*        /*                                                          */
*        /************************************************************/
*                                                                  0358
*          ELSE                                                    0358
*            DO;                                                   0358
         B     @RC00356                                            0358
@RF00356 DS    0H                                                  0359
*              IF SDSCRETS ^= RCDDICTS THEN                        0359
         L     @07,RSCDSNT8(,REG6)                                 0359
         L     @07,RSFAENT(,@07)                                   0359
         L     @04,RSGRABCU(,REG6)                                 0359
         L     @04,GRABCURR(,@04)                                  0359
         CLC   SDSCRETS(4,@07),RCDDICTS+8(@04)                     0359
         BE    @RF00359                                            0359
*                CALL MARKUNUS;                                    0360
*                                                                  0360
         BAL   @14,MARKUNUS                                        0360
*        /************************************************************/
*        /*                                                          */
*        /*     SECOND - ENSURE THAT THE SUM TT IS GOOD BY SUMMING   */
*        /*     THE STARTING TRACKS ALLOCATED.                       */
*        /*                                                          */
*        /************************************************************/
*                                                                  0361
*              ELSE                                                0361
*                DO;                                               0361
         B     @RC00359                                            0361
@RF00359 DS    0H                                                  0362
*                  RSASDSDI = ON;      /*DSDIR EXISTS                */
         OI    RSASDSDI(REG6),B'01000000'                          0362
*                  RSCDSUMT = 0;                                   0363
         SLR   @07,@07                                             0363
         ST    @07,RSCDSUMT(,REG6)                                 0363
*                  DO RSFCNDX = RSFCNDX TO RSFHNDX;                0364
         L     @07,RSWASNVT(,REG6)                                 0364
         LH    @07,RSFCNDX(,@07)                                   0364
         B     @DE00364                                            0364
@DL00364 DS    0H                                                  0365
*                                      /*SCAN FROM 1ST MATCHING VGO  */
*                                                                  0365
*        /************************************************************/
*        /*                                                          */
*        /*       SUM ALL MATCHING VOLSER-DSDIR SN COMBINATIONS      */
*        /*                                                          */
*        /************************************************************/
*                                                                  0365
*                    IF (SNVOLSER = RSCD3FAE->SNVOLSER) &          0365
*                     (SDSDIRSN = RSCD3FAE->SDSDIRSN) THEN         0365
         L     @07,RSWASNVT(,REG6)                                 0365
         L     @07,RSFAENT(,@07)                                   0365
         L     @04,RSCD3FAE(,REG6)                                 0365
         CLC   SNVOLSER(6,@07),SNVOLSER(@04)                       0365
         BNE   @RF00365                                            0365
         CLC   SDSDIRSN(2,@07),SDSDIRSN(@04)                       0365
         BNE   @RF00365                                            0365
*                      DO;                                         0366
*                        SNFPROC = ON; /*VGO PROCESSED               */
         OI    SNFPROC(@07),B'00010000'                            0367
*                        IF (SNTTNNC ^= 0) THEN                    0368
         CLI   SNTTNNC(@07),0                                      0368
         BE    @RF00368                                            0368
*                          DO RSCDINDX = 1 TO SNTTNNC; /*ALL EXTENTS */
         LA    @07,1                                               0369
         B     @DE00369                                            0369
@DL00369 DS    0H                                                  0370
*                            RSCDSUMT = RSCDSUMT +                 0370
*                                       SNTT(SNTTNNX + RSCDINDX - 1);
         L     @07,RSWASNVT(,REG6)                                 0370
         L     @04,RSFAENT(,@07)                                   0370
         SLR   @15,@15                                             0370
         IC    @15,SNTTNNX(,@04)                                   0370
         AH    @15,RSCDINDX(,REG6)                                 0370
         SLA   @15,2                                               0370
         L     @07,RSFATTNN(,@07)                                  0370
         AL    @07,@CF03560                                        0370
         LH    @07,SNTT(@15,@07)                                   0370
         AL    @07,RSCDSUMT(,REG6)                                 0370
         ST    @07,RSCDSUMT(,REG6)                                 0370
*                          END;                                    0371
         LA    @07,1                                               0371
         AH    @07,RSCDINDX(,REG6)                                 0371
@DE00369 STH   @07,RSCDINDX(,REG6)                                 0371
         L     @04,RSWASNVT(,REG6)                                 0371
         L     @04,RSFAENT(,@04)                                   0371
         SLR   @15,@15                                             0371
         IC    @15,SNTTNNC(,@04)                                   0371
         CR    @07,@15                                             0371
         BNH   @DL00369                                            0371
*                      END;                                        0372
@RF00368 DS    0H                                                  0373
*                    RSFAENT = RSFAENT + RSFENTLN; /*NEXT VGO        */
@RF00365 L     @07,RSWASNVT(,REG6)                                 0373
         SLR   @04,@04                                             0373
         IC    @04,RSFENTLN(,@07)                                  0373
         AL    @04,RSFAENT(,@07)                                   0373
         ST    @04,RSFAENT(,@07)                                   0373
*                  END;                                            0374
         L     @04,RSWASNVT(,REG6)                                 0374
         LA    @07,1                                               0374
         AH    @07,RSFCNDX(,@04)                                   0374
         L     @04,RSWASNVT(,REG6)                                 0374
         STH   @07,RSFCNDX(,@04)                                   0374
@DE00364 L     @04,RSWASNVT(,REG6)                                 0374
         CH    @07,RSFHNDX(,@04)                                   0374
         BNH   @DL00364                                            0374
*                  RSFAENT = RSCD3FAE; /*RESTORE INIT VGO ADDR       */
         L     @07,RSWASNVT(,REG6)                                 0375
         L     @04,RSCD3FAE(,REG6)                                 0375
         ST    @04,RSFAENT(,@07)                                   0375
*                  RSFCNDX = RSCD3FCN; /*RESTORE INIT VGO INDEX      */
*                                                                  0376
         LH    @15,RSCD3FCN(,REG6)                                 0376
         STH   @15,RSFCNDX(,@07)                                   0376
*        /************************************************************/
*        /*                                                          */
*        /*       SUMTT - IF ERROR ISSUE WARNING MESSAGE             */
*        /*                                                          */
*        /************************************************************/
*                                                                  0377
*                  IF RSCDSUMT ^= SDSSUMTT THEN                    0377
*                                                                  0377
         L     @07,RSCDSNT8(,REG6)                                 0377
         L     @07,RSFAENT(,@07)                                   0377
         L     @15,RSCDSUMT(,REG6)                                 0377
         SLR   @14,@14                                             0377
         ICM   @14,7,SDSSUMTT(@07)                                 0377
         CR    @15,@14                                             0377
         BE    @RF00377                                            0377
*                    DO;                                           0378
*                    /*CALL CKERR*/                                0379
*                      RSCKERR = RSCKERR && RSCKERR;               0379
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      0379
*                      RSCKERN = RSE049;                           0380
         MVC   RSCKERN(2,REG6),@CH00983                            0380
*                      RSCKTERM = 'RETU';                          0381
         MVC   RSCKTERM(4,REG6),@CC03500                           0381
*                      RSCKMVAR(1) = ADDR(CNAME);                  0382
         L     @07,RSGRABCU(,REG6)                                 0382
         LA    @15,8                                               0382
         AL    @15,GRABCURR(,@07)                                  0382
         LA    @07,CNAME(,@15)                                     0382
         ST    @07,RSCKMVAR(,REG6)                                 0382
*                      RSCKMVAR(2) = ADDR(RCDID);                  0383
         LA    @07,RCDID(,@15)                                     0383
         ST    @07,RSCKMVAR+4(,REG6)                               0383
*                      RSCKMVAR(3) = ADDR(SNVOLSER);               0384
*                                                                  0384
         LA    @07,SNVOLSER(,@04)                                  0384
         ST    @07,RSCKMVAR+8(,REG6)                               0384
*                    /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR   */
*                    CALL CKERR;                                   0385
         L     @15,@CV03443                                        0385
         BALR  @14,@15                                             0385
*                    END;                                          0386
*                END;                                              0387
@RF00377 DS    0H                                                  0388
*            END;                                                  0388
@RC00359 DS    0H                                                  0389
*        RFY SNDSDIR;        /*REVERT  */                          0389
*                                                                  0389
@RC00356 DS    0H                                                  0389
@RC00354 DS    0H                                                  0390
*        /************************************************************/
*        /*                                                          */
*        /*  UPDATE THE DSDIR FOR REASSIGNED CINS                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  0390
*        GRABCURR = RSCDDIR;           /*DATA OR INDEX               */
         L     @07,RSGRABCU(,REG6)                                 0390
         L     @04,RSCDDIR(,REG6)                                  0390
         ST    @04,GRABCURR(,@07)                                  0390
*        IF RSASDSDI = ON THEN         /*DSDIR EXISTS                */
         TM    RSASDSDI(REG6),B'01000000'                          0391
         BNO   @RF00391                                            0391
*          IF RSWRASCI = ON THEN                                   0392
         TM    RSWRASCI(@04),B'00000100'                           0392
         BNO   @RF00392                                            0392
*            DO;                                                   0393
*              RSWASNVT = RSCDSNT8;    /*DSDIR SNTAB                 */
         L     @15,RSCDSNT8(,REG6)                                 0394
         ST    @15,RSWASNVT(,REG6)                                 0394
*              SDSIDNO = RABRCDA;      /*REASSIGNED CIN              */
         L     @01,RSFAENT(,@15)                                   0395
         MVC   SDSIDNO(3,@01),RABRCDA+1(@04)                       0395
*              GRABBB = RSCDVOLR;      /*MODIFY VOLUME RECORD        */
         L     @04,RSCDVOLR(,REG6)                                 0396
         ST    @04,GRABBB(,@07)                                    0396
*              /* CALL TO MODULE IDCRS04 FOR PROCEDURE MODGO         */
*              CALL MODGO;                                         0397
         L     @15,@CV03433                                        0397
         BALR  @14,@15                                             0397
*            END;                                                  0398
*                                                                  0398
*        /************************************************************/
*        /*                                                          */
*        /*  RESTORE THE CALLER'S ENVIRONMENT                        */
*        /*                                                          */
*        /************************************************************/
*                                                                  0399
*        RSCDSNT8->RSFAENT = RSCD8FAE;                             0399
@RF00392 DS    0H                                                  0399
@RF00391 L     @07,RSCDSNT8(,REG6)                                 0399
         L     @04,RSCD8FAE(,REG6)                                 0399
         ST    @04,RSFAENT(,@07)                                   0399
*        RSCDSNT8->RSFCNDX = RSCD8FCN;                             0400
         LH    @04,RSCD8FCN(,REG6)                                 0400
         STH   @04,RSFCNDX(,@07)                                   0400
*        RSCDSNT3->RSFAENT = RSCD3FAE;                             0401
         L     @07,RSCDSNT3(,REG6)                                 0401
         L     @04,RSCD3FAE(,REG6)                                 0401
         ST    @04,RSFAENT(,@07)                                   0401
*        RSCDSNT3->RSFCNDX = RSCD3FCN;                             0402
         LH    @04,RSCD3FCN(,REG6)                                 0402
         STH   @04,RSFCNDX(,@07)                                   0402
*        RSWASNVT = RSCDSNT3;          /*ACTIVE SN TABLE = VGOS      */
*                                                                  0403
         ST    @07,RSWASNVT(,REG6)                                 0403
* CALL EXIT;  /*TERMINATE*/                                        0404
         BAL   @14,EXIT                                            0404
* END CHKDSDIR; /*END OF PROCEDURE*/                               0405
@EL00004 DS    0H                                                  0405
@EF00004 DS    0H                                                  0405
@ER00004 BR    @14                                                 0405
@PB00004 DS    0H                                                  0406
*/********************************************************************/
*/*                                                                  */
*/* PROCEDURE - CHKUNQ                                               */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     CHECK REQUESTS FOR UNIQUE DATA SPACES.                       */
*/*                                                                  */
*/* INPUT -                                                          */
*/*     RSPVSNT3 - VGO SNTAB                                         */
*/*       RSFAENT - VGO FOR THIS DATA SPACE.                         */
*/*     RSPVSNT8 - DATA SPACE SNTAB                                  */
*/*       RSFAENT - SPACE HEADER FOR THIS VGO                        */
*/*     GRABRAB1->VOLUME RECORD BUFFER                               */
*/*     GRABRAB2->DATA OR INDEX                                      */
*/*     VOLSRSER - VOLUME SERIAL NUMBER                              */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*     RSPVDELT - ON=DELETE THE DSDIR FOR THE VGO                   */
*/*     RSMUNUS - ON=MARK THE VGO UNUSABLE                           */
*/*                                                                  */
*/* MESSAGES -                                                       */
*/*     IDC11031I - UNIQUE DATA OR INDEX HAS FEWER EXTENTS THAN ITS  */
*/*                 DATA SPACE.                                      */
*/*     IDC11033I - UNIQUE DATA OR INDEX DOES NOT MATCH AND IS NOT   */
*/*                 A SUBSET OF ITS DATA SPACE.                      */
*/*                                                                  */
*/********************************************************************/
*      GENERATE;                                                   0406
         DS    0F
NAME0013 DC    CL8'CHKUNQ'
*CHKUNQ: PROCEDURE                                                 0407
*        OPTIONS(NOSAVE,NOSAVEAREA);                               0407
*                                                                  0407
         B     @PB00005                                            0407
CHKUNQ   DS    0H                                                  0408
*      GENERATE REFS(RS03RG08, REG6);                              0408
*                                                                  0408
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         MVC   0(4,@15),NAME0013  PROCNAME TO REGSAVE
*        RFY SNTTNN BASED(RSSETTT);    /*TTNN FOR VGO                */
*        RFY SNTAB BASED(RSPVSNT6->RSFAENT); /*SNTAB FOR SPC HDR     */
*        RFY SNVGO BASED(RSPVSNT3->RSFAENT); /*VGO SN TABLE ENTRY    */
*        RFY RSFSNVT BASED(RSPVSNT3); /*USE VGO VECTOR TABLE         */
*                                                                  0412
*        /************************************************************/
*        /*                                                          */
*        /*  CHECK VGO EXTENTS FOR THIS VOLSER-DSDIR AGAINST         */
*        /*  THE DATA SPACE EXTENTS.                                 */
*        /*                                                          */
*        /************************************************************/
*                                                                  0413
*        RSCSFCN = RSFCNDX;            /*SAVE 1ST VGO INDEX SNTAB    */
         L     @07,RSPVSNT3(,REG6)                                 0413
         LH    @04,RSFCNDX(,@07)                                   0413
         STH   @04,RSCSFCN(,REG6)                                  0413
*        RSCSFAE = RSFAENT;            /*SAVE 1ST VGO SNTAB ADDR     */
         L     @07,RSFAENT(,@07)                                   0414
         ST    @07,RSCSFAE(,REG6)                                  0414
*        RSPVKNEX = 1;                 /*START AT FIRST EXTENT       */
*                                                                  0415
         MVC   RSPVKNEX(2,REG6),@CH00212                           0415
*        DO RSFCNDX = RSFCNDX TO RSFHNDX WHILE(RSPVDELT=OFF);      0416
         B     @DE00416                                            0416
@DL00416 TM    RSPVDELT(REG6),B'00100000'                          0416
         BNZ   @DC00416                                            0416
*          RSFAENT = RSFCADR + RSFENTLN*(RSFCNDX - 1);             0417
         L     @07,RSPVSNT3(,REG6)                                 0417
         LH    @04,RSFCNDX(,@07)                                   0417
         BCTR  @04,0                                               0417
         LR    @01,@04                                             0417
         SLR   @04,@04                                             0417
         IC    @04,RSFENTLN(,@07)                                  0417
         MR    @00,@04                                             0417
         AL    @01,RSFCADR(,@07)                                   0417
         ST    @01,RSFAENT(,@07)                                   0417
*          IF (SNVOLSER = RSCSFAE->SNVOLSER) &                     0418
*             (SDSDIRSN = RSCSFAE->SDSDIRSN) THEN                  0418
         L     @04,RSCSFAE(,REG6)                                  0418
         CLC   SNVOLSER(6,@01),SNVOLSER(@04)                       0418
         BNE   @RF00418                                            0418
         CLC   SDSDIRSN(2,@01),SDSDIRSN(@04)                       0418
         BNE   @RF00418                                            0418
*                                      /*MATCH VGO (VOLSER-DSDIR)    */
*            DO;                                                   0419
*              RSSETTT = RSFATTNN + (SNTTNNX - 1)*LENGTH(SNTTNN);  0420
         SLR   @04,@04                                             0420
         IC    @04,SNTTNNX(,@01)                                   0420
         BCTR  @04,0                                               0420
         SLA   @04,2                                               0420
         AL    @04,RSFATTNN(,@07)                                  0420
         ST    @04,RSSETTT(,REG6)                                  0420
*                                      /*FIRST ESTENT FOR THIS VGO   */
*              IF SNTTNNC = 0 THEN;    /*NO EXTENT FOR THIS VGO      */
         CLI   SNTTNNC(@01),0                                      0421
         BE    @RT00421                                            0421
*              ELSE                                                0423
*                DO RSPVTNEX = 1 TO SNTTNNC WHILE(RSPVDELT=OFF);   0423
         LA    @07,1                                               0423
         B     @DE00423                                            0423
@DL00423 TM    RSPVDELT(REG6),B'00100000'                          0423
         BNZ   @DC00423                                            0423
*                  IF SNTTNN(RSPVTNEX) ^= SSPEXTNN(RSPVKNEX) THEN  0424
         LH    @07,RSPVTNEX(,REG6)                                 0424
         SLA   @07,2                                               0424
         L     @04,RSSETTT(,REG6)                                  0424
         LH    @15,RSPVKNEX(,REG6)                                 0424
         SLA   @15,2                                               0424
         L     @01,RSPVSNT6(,REG6)                                 0424
         L     @01,RSFAENT(,@01)                                   0424
         ALR   @04,@07                                             0424
         AL    @04,@CF03727                                        0424
         ALR   @01,@15                                             0424
         CLC   SNTTNN(4,@04),SSPEXTNN-4(@01)                       0424
         BE    @RF00424                                            0424
*                    DO;               /*VGO - SPC HDR MISMATCH      */
*                      RSPVDELT = ON;  /*DELETE THE DSDIR            */
         OI    RSPVDELT(REG6),B'00100000'                          0426
*                      RSMUNUS = ON;   /*MARK THE VGO UNUSABLE       */
         OI    RSMUNUS(REG6),B'10000000'                           0427
*                    END;                                          0428
*                  RSPVKNEX = RSPVKNEX + 1; /*NEXT SPC HDR EXTNT     */
@RF00424 LA    @07,1                                               0429
         AH    @07,RSPVKNEX(,REG6)                                 0429
         STH   @07,RSPVKNEX(,REG6)                                 0429
*                END;                                              0430
         LA    @07,1                                               0430
         AH    @07,RSPVTNEX(,REG6)                                 0430
@DE00423 STH   @07,RSPVTNEX(,REG6)                                 0430
         L     @04,RSPVSNT3(,REG6)                                 0430
         L     @04,RSFAENT(,@04)                                   0430
         SLR   @15,@15                                             0430
         IC    @15,SNTTNNC(,@04)                                   0430
         CR    @07,@15                                             0430
         BNH   @DL00423                                            0430
@DC00423 DS    0H                                                  0431
*            END;                                                  0431
@RT00421 DS    0H                                                  0432
*        END;                                                      0432
*                                                                  0432
@RF00418 L     @07,RSPVSNT3(,REG6)                                 0432
         LA    @04,1                                               0432
         AH    @04,RSFCNDX(,@07)                                   0432
         L     @07,RSPVSNT3(,REG6)                                 0432
         STH   @04,RSFCNDX(,@07)                                   0432
@DE00416 L     @07,RSPVSNT3(,REG6)                                 0432
         CH    @04,RSFHNDX(,@07)                                   0432
         BNH   @DL00416                                            0432
@DC00416 DS    0H                                                  0433
*        /************************************************************/
*        /*                                                          */
*        /*  UNIQUE DATA OR INDEX - VGO NOT A SUBSET OF DATA SPACE   */
*        /*                                                          */
*        /************************************************************/
*                                                                  0433
*        IF RSPVDELT = ON THEN                                     0433
*                                                                  0433
         TM    RSPVDELT(REG6),B'00100000'                          0433
         BNO   @RF00433                                            0433
*          DO;                                                     0434
*          /*CALL CKERR*/                                          0435
*            RSCKERR = RSCKERR && RSCKERR;                         0435
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      0435
*            RSCKERN = RSE044;                                     0436
         MVC   RSCKERN(2,REG6),@CH00595                            0436
*            RSCKTERM = 'RETU';                                    0437
         MVC   RSCKTERM(4,REG6),@CC03500                           0437
*            RSCKMVAR(1) = ADDR(ADDR(GRABRAB2->RABBUF)->CNAME);    0438
         L     @07,RSGRABCU(,REG6)                                 0438
         L     @07,GRABRAB2(,@07)                                  0438
         LA    @07,CNAME+8(,@07)                                   0438
         ST    @07,RSCKMVAR(,REG6)                                 0438
*            RSCKMVAR(2) = ADDR(VOLSRSER);                         0439
*                                                                  0439
         L     @07,RSVTBENT(,REG6)                                 0439
         LA    @07,VOLSRSER(,@07)                                  0439
         ST    @07,RSCKMVAR+4(,REG6)                               0439
*          /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR             */
*          CALL CKERR;                                             0440
         L     @15,@CV03443                                        0440
         BALR  @14,@15                                             0440
*          END;                                                    0441
*                                                                  0441
*        /************************************************************/
*        /*                                                          */
*        /*  CHECK FOR ADDITIONAL EXTENTS IN THE DATA SPACE          */
*        /*                                                          */
*        /************************************************************/
*                                                                  0442
*        ELSE                                                      0442
*          IF RSPVKNEX =< SNODSPXT THEN                            0442
         B     @RC00433                                            0442
@RF00433 L     @07,RSPVSNT6(,REG6)                                 0442
         L     @07,RSFAENT(,@07)                                   0442
         LH    @04,RSPVKNEX(,REG6)                                 0442
         SLR   @15,@15                                             0442
         IC    @15,SNODSPXT(,@07)                                  0442
         CR    @04,@15                                             0442
         BH    @RF00442                                            0442
*                                      /*D-I SMALLER THAN SPC HDR    */
*                                                                  0443
*            DO;                                                   0443
*            /*CALL CKERR*/                                        0444
*              RSCKERR = RSCKERR && RSCKERR;                       0444
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      0444
*              RSCKERN = RSE034;                                   0445
         MVC   RSCKERN(2,REG6),@CH00956                            0445
*              RSCKTERM = 'RETU';                                  0446
         MVC   RSCKTERM(4,REG6),@CC03500                           0446
*              RSCKMVAR(1) = ADDR(ADDR(GRABRAB2->RABBUF)->CNAME);  0447
*                                                                  0447
         L     @07,RSGRABCU(,REG6)                                 0447
         L     @07,GRABRAB2(,@07)                                  0447
         LA    @07,CNAME+8(,@07)                                   0447
         ST    @07,RSCKMVAR(,REG6)                                 0447
*            /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR           */
*            CALL CKERR;                                           0448
         L     @15,@CV03443                                        0448
         BALR  @14,@15                                             0448
*            END;                                                  0449
*                                                                  0449
*        /************************************************************/
*        /*                                                          */
*        /*                       TERMINATE                          */
*        /*                                                          */
*        /************************************************************/
*                                                                  0450
*        RSFAENT = RSCSFAE;            /*RESTORE 1ST VGO SNTAB       */
@RF00442 DS    0H                                                  0450
@RC00433 L     @07,RSPVSNT3(,REG6)                                 0450
         L     @04,RSCSFAE(,REG6)                                  0450
         ST    @04,RSFAENT(,@07)                                   0450
*        RSFCNDX = RSCSFCN;                                        0451
         LH    @04,RSCSFCN(,REG6)                                  0451
         STH   @04,RSFCNDX(,@07)                                   0451
*        RFY SNTTNN;                   /*REVERT                      */
*        RFY SNVGO;                    /*REVERT                      */
*        RFY SNTAB;                    /*REVERT                      */
*        RFY RSFSNVT;                  /*REVERT                      */
*                                                                  0455
* CALL EXIT;  /*TERMINATE*/                                        0456
         BAL   @14,EXIT                                            0456
* END CHKUNQ; /*END OF PROCEDURE*/                                 0457
@EL00005 DS    0H                                                  0457
@EF00005 DS    0H                                                  0457
@ER00005 BR    @14                                                 0457
@PB00005 DS    0H                                                  0458
*/********************************************************************/
*/*                                                                  */
*/* PROCEDURE NAME - GETFIT                                          */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*    GETFIT GETS THE NEXT FREE ENTRY IN A TABLE. IF NO FREE ENTRIES*/
*/*    EXIST IN THE CURRENT TABLE OR NO TABLE EXISTS A NEW TABLE     */
*/*    WILL BE GOTTEN.                                               */
*/*                                                                  */
*/*    EACH TABLE TYPE MUST HAVE A SET OF ANCHORS AS DESCRIBED BY    */
*/*    BY TABANCHR; EACH TABLE MUST HAVE A HEAD DESCRIBED BY         */
*/*    TABHEAD; EACH ENTRY MUST HAVE THE COMMON DATA DESCRIBED       */
*/*    BY TABENT.                                                    */
*/*                                                                  */
*/* INPUT -                                                          */
*/*    RSTAB - THIS STRUCTURE CONTAINS THE PRIMARY INTERFACE DATA.   */
*/*      RSTANCHR - ADDRESS OF ANCHOR ADDRESSES MAPPED BY TABANCHR.  */
*/*                 WITHIN TABANCHR, TABEN DESCRIBES THE LENGTH OF   */
*/*                 EACH ENTRY IN THE TABLE. TABC DESCRIBES          */
*/*                 THE LAST TABLE ALLOCATED FROM.                   */
*/*                 ALL CONTROL BLOCKS GOTTEN MUST HAVE THIS COMMON  */
*/*                 ANCHOR STRUCTURE.                                */
*/*    TABHEAD - THIS DESCRIBES THE COMMON HEAD PORTION OF EACH      */
*/*              TABLE.                                              */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*    RSTENTAD - ADDRESS OF THE NEXT FREE ENTRY.                    */
*/*    TABCURR - INDEX OF THE FREE ENTRY ALLOCATED                   */
*/*                                                                  */
*/* EXIT, NORMAL - RETURN TO CALLER                                  */
*/*                                                                  */
*/********************************************************************/
*      GENERATE;                                                   0458
         DS    0F
NAME0019 DC    CL8'GETFIT'
*GETFIT: PROCEDURE                                                 0459
*        OPTIONS(NOSAVE,NOSAVEAREA);                               0459
*                                                                  0459
         B     @PB00006                                            0459
GETFIT   DS    0H                                                  0460
*      GENERATE REFS(RS03RG08, REG6);                              0460
*                                                                  0460
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         ENTRY GETFIT  ENTRY POINT
         LM    @08,@12,RS03RG08(REG6)  PRIME BASE AND DATA REGS
         MVC   0(4,@15),NAME0019  PROCNAME TO REGSAVE
*         OLDERID2 = NEWERID2;                                     0461
         L     @07,GDTTR2(,REG5)                                   0461
         MVC   @TS00001(95),NEWERID2(@07)                          0461
         MVC   OLDERID2(95,@07),@TS00001                           0461
*         NEWID2 = 'RSGF';                                         0462
*                                                                  0462
         MVC   NEWID2(4,@07),@CC03515                              0462
*        /************************************************************/
*        /*                                                          */
*        /* NO TABLE EXISTS OR NO MORE ENTRIES IN THE CURRENT TABLE. */
*        /* GET A TABLE AND INITIALIZE IT                            */
*        /*                                                          */
*        /************************************************************/
*                                                                  0463
*        IF TABC=0 × TABCURR=TABMAXT THEN                          0463
         L     @07,RSTANCHR(,REG6)                                 0463
         L     @07,TABC(,@07)                                      0463
         LTR   @07,@07                                             0463
         BZ    @RT00463                                            0463
         CLC   TABCURR(2,@07),TABMAXT(@07)                         0463
         BNE   @RF00463                                            0463
@RT00463 DS    0H                                                  0464
*          DO;                                                     0464
*                                                                  0464
*            /* GET A NEW TABLE */                                 0465
*            CALL GETTAB;                                          0465
*                                                                  0465
         BAL   @14,GETTAB                                          0465
*            TABCURR = 1;                                          0466
         L     @07,RSTANCHR(,REG6)                                 0466
         L     @04,TABC(,@07)                                      0466
         MVC   TABCURR(2,@04),@CH00212                             0466
*            TABMAXT = (TABSIZ-LENGTH(THEAD))/TABEN;               0467
         L     @15,TABSIZ(,@07)                                    0467
         SL    @15,@CF00032                                        0467
         LR    @00,@15                                             0467
         SRDA  @00,32                                              0467
         LH    @07,TABEN(,@07)                                     0467
         DR    @00,@07                                             0467
         STH   @01,TABMAXT(,@04)                                   0467
*          END;                                                    0468
*                                                                  0468
*        /************************************************************/
*        /*                                                          */
*        /* TABLE ALREADY EXISTS - GET THE NEXT ENTRY                */
*        /*                                                          */
*        /************************************************************/
*                                                                  0469
*        ELSE                                                      0469
*          TABCURR = TABCURR + 1;      /*NEXT FREE ENTRY             */
*                                                                  0469
         B     @RC00463                                            0469
@RF00463 L     @07,RSTANCHR(,REG6)                                 0469
         L     @07,TABC(,@07)                                      0469
         LA    @04,1                                               0469
         AH    @04,TABCURR(,@07)                                   0469
         STH   @04,TABCURR(,@07)                                   0469
*        /************************************************************/
*        /*                                                          */
*        /* AN ENTRY IS AVAILABLE SO SET UP THE ADDRESS AND TURN IT  */
*        /* LOOSE.                                                   */
*        /*                                                          */
*        /************************************************************/
*                                                                  0470
*        RSTENTAD = ADDR(TENTRY)+(TABCURR-1)*TABEN;                0470
@RC00463 L     @07,RSTANCHR(,REG6)                                 0470
         L     @04,TABC(,@07)                                      0470
         LA    @15,TENTRY(,@04)                                    0470
         LH    @01,TABCURR(,@04)                                   0470
         BCTR  @01,0                                               0470
         MH    @01,TABEN(,@07)                                     0470
         ALR   @15,@01                                             0470
         ST    @15,RSTENTAD(,REG6)                                 0470
*        TABNU = TABNU + 1;            /*TOTAL NUMBER OF ENTRIES USED*/
*                                                                  0471
         LA    @04,1                                               0471
         L     @15,TABNU-1(,@07)                                   0471
         LA    @15,0(,@15)                                         0471
         ALR   @04,@15                                             0471
         STCM  @04,7,TABNU(@07)                                    0471
*  CALL EXIT;  /*TERMINATE*/                                       0472
         BAL   @14,EXIT                                            0472
*  END GETFIT; /*END OF PROCEDURE*/                                0473
@EL00006 DS    0H                                                  0473
@EF00006 DS    0H                                                  0473
@ER00006 BR    @14                                                 0473
@PB00006 DS    0H                                                  0474
*/********************************************************************/
*/*                                                                  */
*/* PROCEDURE NAME - GETNEXTE                                        */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*    GETNEXTE GETS THE NEXT ENTRY IN A TABLE.                      */
*/*    EACH TABLE TYPE MUST HAVE A SET OF ANCHORS AS DESCRIBED BY    */
*/*    BY TABANCHR; EACH TABLE MUST HAVE A HEAD DESCRIBED BY         */
*/*    TABHEAD.                                                      */
*/*                                                                  */
*/* INPUT -                                                          */
*/*    RSTAB - THIS STRUCTURE CONTAINS THE PRIMARY INTERFACE DATA.   */
*/*      RSTANCHR - ADDRESS OF ANCHOR ADDRESSES MAPPED BY TABANCHR.  */
*/*                 WITHIN TABANCHR, TABEN DESCRIBES THE LENGTH OF   */
*/*                 EACH ENTRY IN THE TABLE.                         */
*/*                 ALL CONTROL BLOCKS GOTTEN MUST HAVE THIS COMMON  */
*/*                 ANCHOR STRUCTURE.                                */
*/*      RSTENTAD - ADDRESS OF THE CURRENT ENTRY                     */
*/*      RSTENTIX - INDEX OF ENTRY IN ENTIRE TABLE(S)                */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*    RSTENTAD - ADDRESS OF THE ENTRY RETURNED.                     */
*/*    RSTABAD  - ADDRESS OF THE TABLE WITH ENTRY ALLOCATED          */
*/*    RSTWKIX  - INDEX OF ENTRY IN TABLE ALLOCATED                  */
*/*                                                                  */
*/* EXIT, NORMAL - RETURN TO CALLER                                  */
*/*                                                                  */
*/********************************************************************/
*      GENERATE;                                                   0474
         DS    0F
NAME0022 DC    CL8'GETNEXTE'
*GETNEXTE: PROCEDURE                                               0475
*        OPTIONS(NOSAVE,NOSAVEAREA);                               0475
*                                                                  0475
         B     @PB00007                                            0475
GETNEXTE DS    0H                                                  0476
*      GENERATE REFS(RS03RG08, REG6);                              0476
*                                                                  0476
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         ENTRY GETNEXTE  ENTRY POINT
         LM    @08,@12,RS03RG08(REG6)  PRIME BASE AND DATA REGS
         MVC   0(4,@15),NAME0022  PROCNAME TO REGSAVE
*         OLDERID2 = NEWERID2;                                     0477
         L     @07,GDTTR2(,REG5)                                   0477
         MVC   @TS00001(95),NEWERID2(@07)                          0477
         MVC   OLDERID2(95,@07),@TS00001                           0477
*         NEWID2 = 'RSGN';                                         0478
*                                                                  0478
         MVC   NEWID2(4,@07),@CC03521                              0478
*        /************************************************************/
*        /*                                                          */
*        /* DETERMINE WHICH TABLE THE ENTRY IS IN                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  0479
*        RFY TABHEAD BASED(RSTABAD);                               0479
*        RSTABAD = TABF;               /*ORIENT TO FIRST TABLE       */
         L     @07,RSTANCHR(,REG6)                                 0480
         L     @07,TABF(,@07)                                      0480
         ST    @07,RSTABAD(,REG6)                                  0480
*        RSTWKIX = RSTENTIX;           /*CALLER'S ABSOLUTE ENTRY NUM */
         MVC   RSTWKIX(3,REG6),RSTENTIX(REG6)                      0481
*        DO WHILE(RSTWKIX>TABMAXT);    /*SCAN FOR TABLE              */
         B     @DE00482                                            0482
@DL00482 DS    0H                                                  0483
*          RSTWKIX = RSTWKIX - TABMAXT; /*ENTRY RELATIVE TO NEW TBL  */
         L     @07,RSTABAD(,REG6)                                  0483
         L     @04,RSTWKIX-1(,REG6)                                0483
         LA    @04,0(,@04)                                         0483
         SH    @04,TABMAXT(,@07)                                   0483
         STCM  @04,7,RSTWKIX(REG6)                                 0483
*          RSTABAD = TABFORW;          /*GET NEXT TABLE              */
         L     @07,TABFORW(,@07)                                   0484
         ST    @07,RSTABAD(,REG6)                                  0484
*        END;                                                      0485
*                                                                  0485
@DE00482 L     @07,RSTWKIX-1(,REG6)                                0485
         LA    @07,0(,@07)                                         0485
         L     @04,RSTABAD(,REG6)                                  0485
         CH    @07,TABMAXT(,@04)                                   0485
         BH    @DL00482                                            0485
*        /************************************************************/
*        /*                                                          */
*        /* DETERMINE ADDRESS OF ENTRY WITHIN THIS TABLE             */
*        /*                                                          */
*        /************************************************************/
*                                                                  0486
*        IF RSTWKIX > 0 THEN           /*IF NOT A FREE LAST CALL     */
         LTR   @07,@07                                             0486
         BNP   @RF00486                                            0486
*          RSTENTAD=RSTABAD+LENGTH(THEAD)+((RSTWKIX-1)*TABEN);     0487
         AL    @04,@CF00032                                        0487
         LR    @01,@07                                             0487
         BCTR  @01,0                                               0487
         L     @07,RSTANCHR(,REG6)                                 0487
         MH    @01,TABEN(,@07)                                     0487
         ALR   @04,@01                                             0487
         ST    @04,RSTENTAD(,REG6)                                 0487
*        RFY TABHEAD;                  /*REVERT                      */
*                                                                  0488
@RF00486 DS    0H                                                  0489
*  CALL EXIT;  /*TERMINATE*/                                       0489
         BAL   @14,EXIT                                            0489
*  END GETNEXTE; /*END OF PROCEDURE*/                              0490
@EL00007 DS    0H                                                  0490
@EF00007 DS    0H                                                  0490
@ER00007 BR    @14                                                 0490
@PB00007 DS    0H                                                  0491
*/********************************************************************/
*/*                                                                  */
*/* PROCEDURE NAME - GETTAB                                          */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*    GETTAB GETS A NEW TABLE AND CHAINS IT TO THE PREVIOUS.        */
*/*    GETTAB EXPECTS ALL TABLES TO HAVE A COMMON SET OF ANCHORS AS  */
*/*    MAPPED BY TABANCHR AND EACH TABLE TO HAVE A COMMON HEAD       */
*/*    PORTION AS MAPPED BY TABHEAD. THE TABLES ARE FORWARD AND      */
*/*    BACKWARD CHAINED.                                             */
*/*                                                                  */
*/* INPUT -                                                          */
*/*    RSTAB - THIS STRUCTURE CONTAINS THE PRIMARY INTERFACE DATA.   */
*/*      RSTANCHR - ADDRESS OF ANCHOR ADDRESSES MAPPED BY TABHEAD.   */
*/*                 ALL CONTROL BLOCKS GOTTEN BY GETTAB MUST HAVE    */
*/*                 THIS COMMON ANCHOR STRUCTURE.                    */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*    TABC - THE CURRENT CONTROL BLOCK ADDRESS IS UPDATED TO        */
*/*           ADDRESS THE NEXT AVAILABLE ONE.                        */
*/*                                                                  */
*/* EXIT, NORMAL - RETURN TO CALLER                                  */
*/* EXIT, ERROR - EXIT VIA CKERR                                     */
*/*               RSE00 - STORAGE UNAVAILABLE                        */
*/********************************************************************/
*                                                                  0491
*      GENERATE;                                                   0491
         DS    0F
NAME0024 DC    CL8'GETTAB'
*GETTAB: PROCEDURE                                                 0492
*        OPTIONS(NOSAVE,NOSAVEAREA);                               0492
*                                                                  0492
         B     @PB00008                                            0492
GETTAB   DS    0H                                                  0493
*      GENERATE REFS(RS03RG08, REG6);                              0493
*                                                                  0493
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         ENTRY GETTAB  ENTRY POINT
         LM    @08,@12,RS03RG08(REG6)  PRIME BASE AND DATA REGS
         MVC   0(4,@15),NAME0024  PROCNAME TO REGSAVE
*        OLDERID2 = NEWERID2;                                      0494
         L     @07,GDTTR2(,REG5)                                   0494
         MVC   @TS00001(95),NEWERID2(@07)                          0494
         MVC   OLDERID2(95,@07),@TS00001                           0494
*        NEWID2 = 'RSGT';                                          0495
*                                                                  0495
         MVC   NEWID2(4,@07),@CC03526                              0495
*        /************************************************************/
*        /*                                                          */
*        /* DETERMINE IF A NEW CONTROL BLOCK MUST BE GOTTEN.         */
*        /*     IF NO CONTROL BLOCK EXISTS OF THIS TYPE OR           */
*        /*     THIS IS THE LAST CONTROL BLOCK OF THIS TYPE          */
*        /*     THEN GET A NEW ONE.                                  */
*        /*                                                          */
*        /************************************************************/
*                                                                  0496
*        IF TABF = 0 × TABC = TABL THEN                            0496
         L     @07,RSTANCHR(,REG6)                                 0496
         L     @04,TABF(,@07)                                      0496
         LTR   @04,@04                                             0496
         BZ    @RT00496                                            0496
         CLC   TABC(4,@07),TABL(@07)                               0496
         BNE   @RF00496                                            0496
@RT00496 DS    0H                                                  0497
*          DO;                                                     0497
*                                                                  0497
*            /* GET THE TABLE */                                   0498
*            CALL IDCSAGP0(GDTTBL,TABSIZ,TABC,TABUG,SETZERO);      0498
*                                                                  0498
         ST    REG5,@AL00001                                       0498
         L     @07,RSTANCHR(,REG6)                                 0498
         LA    @04,TABSIZ(,@07)                                    0498
         ST    @04,@AL00001+4                                      0498
         LA    @04,TABC(,@07)                                      0498
         ST    @04,@AL00001+8                                      0498
         LA    @07,TABUG(,@07)                                     0498
         ST    @07,@AL00001+12                                     0498
         LA    @07,SETZERO                                         0498
         ST    @07,@AL00001+16                                     0498
         MVI   @AL00001+16,X'80'                                   0498
         L     @15,GDTGPL(,REG5)                                   0498
         LA    @01,@AL00001                                        0498
         BALR  @14,@15                                             0498
*            RESPECIFY RTNREG RSTD;                                0499
*            TESTRC = RTNREG;                                      0500
         STH   RTNREG,TESTRC(,REG6)                                0500
*            RESPECIFY RTNREG UNRSTD;                              0501
*            IF TESTRC ^= 0 THEN                                   0502
*                                                                  0502
         LH    @07,TESTRC(,REG6)                                   0502
         LTR   @07,@07                                             0502
         BZ    @RF00502                                            0502
*              /* TERMINATE - NO STORAGE AVAILABLE */              0503
*                                                                  0503
*              DO;                                                 0503
*              /*CALL CKERR*/                                      0504
*                RSCKERR = RSCKERR && RSCKERR;                     0504
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      0504
*                RSCKERN = RSE099;                                 0505
         MVC   RSCKERN(2,REG6),@CH01078                            0505
*                RSCKTERM = 'TERM';                                0506
*                                                                  0506
         MVC   RSCKTERM(4,REG6),@CC03527                           0506
*              /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR         */
*              CALL CKERR;                                         0507
         L     @15,@CV03443                                        0507
         BALR  @14,@15                                             0507
*              END;                                                0508
*                                                                  0508
*        /************************************************************/
*        /*                                                          */
*        /* FORWARD AND BACKWARD CHAIN THIS NEW CONTROL BLOCK        */
*        /*                                                          */
*        /************************************************************/
*                                                                  0509
*            IF TABF = 0 THEN          /*ALLOW FOR FIRST CTL BLOCK   */
@RF00502 L     @07,RSTANCHR(,REG6)                                 0509
         L     @04,TABF(,@07)                                      0509
         LTR   @04,@04                                             0509
         BNZ   @RF00509                                            0509
*              TABF = TABC;            /*FIRST CONTROL BLOCK IS THIS */
         L     @04,TABC(,@07)                                      0510
         ST    @04,TABF(,@07)                                      0510
*            ELSE                                                  0511
*              DO;                                                 0511
         B     @RC00509                                            0511
@RF00509 DS    0H                                                  0512
*                TABC->TABBACKW = TABL; /*BACK CHAIN                 */
         L     @07,RSTANCHR(,REG6)                                 0512
         L     @04,TABC(,@07)                                      0512
         L     @07,TABL(,@07)                                      0512
         ST    @07,TABBACKW(,@04)                                  0512
*                TABL->TABFORW = TABC; /*FORWARD CHAIN               */
         ST    @04,TABFORW(,@07)                                   0513
*              END;                                                0514
*            TABL = TABC;              /*NEW LAST                    */
@RC00509 L     @07,RSTANCHR(,REG6)                                 0515
         L     @04,TABC(,@07)                                      0515
         ST    @04,TABL(,@07)                                      0515
*          END;                                                    0516
*                                                                  0516
*        /************************************************************/
*        /*                                                          */
*        /* SET TABLE ADDRESS FOR CONTROL BLOCK WHICH ALREADY EXISTS.*/
*        /*                                                          */
*        /************************************************************/
*                                                                  0517
*        ELSE                                                      0517
*          IF TABC = 0 THEN                                        0517
         B     @RC00496                                            0517
@RF00496 L     @07,RSTANCHR(,REG6)                                 0517
         L     @04,TABC(,@07)                                      0517
         LTR   @04,@04                                             0517
         BNZ   @RF00517                                            0517
*            TABC = TABF;              /*REUSE FIRST TABLE           */
         L     @04,TABF(,@07)                                      0518
         ST    @04,TABC(,@07)                                      0518
*          ELSE                                                    0519
*            TABC = TABC->TABFORW;     /*USE NTH TABLE               */
*                                                                  0519
         B     @RC00517                                            0519
@RF00517 L     @07,RSTANCHR(,REG6)                                 0519
         L     @04,TABC(,@07)                                      0519
         L     @04,TABFORW(,@04)                                   0519
         ST    @04,TABC(,@07)                                      0519
*  CALL EXIT;  /*TERMINATE*/                                       0520
@RC00517 DS    0H                                                  0520
@RC00496 BAL   @14,EXIT                                            0520
*  END GETTAB; /*END OF PROCEDURE*/                                0521
@EL00008 DS    0H                                                  0521
@EF00008 DS    0H                                                  0521
@ER00008 BR    @14                                                 0521
@PB00008 DS    0H                                                  0522
*/********************************************************************/
*/*                                                                  */
*/* PROCEDURE NAME - MARKUNUS                                        */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     MARK A VOLUME GROUP OCCURRENCE UNUSABLE                      */
*/*                                                                  */
*/* INPUT -                                                          */
*/*     GRABCURR - BUFFER ADDRESS FOR DATA OR INDEX                  */
*/*     RSWASNVT - ADDRESS SNTABLE FOR VOL GOS                       */
*/*       RSFCNDX - INDEX FOR VOLGO TO MODIFY                        */
*/*       RSFAENT - ADDRESS OF VOLGO TO MARK UNUSABLE                */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*     VOLGO MARKED UNUSABLE                                        */
*/*     DATA - INDEX MARKED NO UPDATE (CNUS)                         */
*/*                                                                  */
*/* MESSAGES -                                                       */
*/*     IDC21009I - COMPONENT DOES NOT EXIST ON VOLUME               */
*/*     IDC21030I - INVALID SPACE DESCRIPTION                        */
*/*                                                                  */
*/********************************************************************/
*      GENERATE;                                                   0522
         DS    0F
NAME0028 DC    CL8'MARKUNUS'
*MARKUNUS: PROCEDURE                                               0523
*        OPTIONS(NOSAVE,NOSAVEAREA);                               0523
*                                                                  0523
         B     @PB00009                                            0523
MARKUNUS DS    0H                                                  0524
*      GENERATE REFS(RS03RG08, REG6);                              0524
*                                                                  0524
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         ENTRY MARKUNUS  ENTRY POINT
         LM    @08,@12,RS03RG08(REG6)  PRIME BASE AND DATA REGS
         MVC   0(4,@15),NAME0028  PROCNAME TO REGSAVE
*        OLDERID2 = NEWERID2;                                      0525
         L     @07,GDTTR2(,REG5)                                   0525
         MVC   @TS00001(95),NEWERID2(@07)                          0525
         MVC   OLDERID2(95,@07),@TS00001                           0525
*        NEWID2 = 'RSMU';                                          0526
*                                                                  0526
         MVC   NEWID2(4,@07),@CC03531                              0526
*        /************************************************************/
*        /*                                                          */
*        /*  ISSUE ERROR MESSAGE                                     */
*        /*     IDC21009I - NO DSDIR                                 */
*        /*     IDC21030I - DSDIR EXISTS BUT SPACE CONFILCT          */
*        /*                                                          */
*        /************************************************************/
*                                                                  0527
*        IF RSASDSDI = OFF THEN                                    0527
*                                                                  0527
         TM    RSASDSDI(REG6),B'01000000'                          0527
         BNZ   @RF00527                                            0527
*          DO;                                                     0528
*          /*CALL CKERR*/                                          0529
*            RSCKERR = RSCKERR && RSCKERR;                         0529
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      0529
*            RSCKERN = RSE023;                                     0530
         MVC   RSCKERN(2,REG6),@CH00937                            0530
*            RSCKTERM = 'RETU';                                    0531
         MVC   RSCKTERM(4,REG6),@CC03500                           0531
*            RSCKMVAR(1) = ADDR(CNAME);                            0532
         L     @07,RSGRABCU(,REG6)                                 0532
         LA    @04,8                                               0532
         AL    @04,GRABCURR(,@07)                                  0532
         LA    @07,CNAME(,@04)                                     0532
         ST    @07,RSCKMVAR(,REG6)                                 0532
*            RSCKMVAR(2) = ADDR(RCDID);                            0533
         LA    @07,RCDID(,@04)                                     0533
         ST    @07,RSCKMVAR+4(,REG6)                               0533
*            RSCKMVAR(3) = ADDR(SNVOLSER);                         0534
*                                                                  0534
         L     @07,RSWASNVT(,REG6)                                 0534
         L     @07,RSFAENT(,@07)                                   0534
         LA    @07,SNVOLSER(,@07)                                  0534
         ST    @07,RSCKMVAR+8(,REG6)                               0534
*          /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR             */
*          CALL CKERR;                                             0535
         L     @15,@CV03443                                        0535
         BALR  @14,@15                                             0535
*          END;                                                    0536
*                                                                  0536
*        ELSE                                                      0537
*                                                                  0537
*          DO;                                                     0537
         B     @RC00527                                            0537
@RF00527 DS    0H                                                  0538
*          /*CALL CKERR*/                                          0538
*            RSCKERR = RSCKERR && RSCKERR;                         0538
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      0538
*            RSCKERN = RSE033;                                     0539
         MVC   RSCKERN(2,REG6),@CH00954                            0539
*            RSCKTERM = 'RETU';                                    0540
         MVC   RSCKTERM(4,REG6),@CC03500                           0540
*            RSCKMVAR(1) = ADDR(CNAME);                            0541
         L     @07,RSGRABCU(,REG6)                                 0541
         LA    @04,8                                               0541
         AL    @04,GRABCURR(,@07)                                  0541
         LA    @07,CNAME(,@04)                                     0541
         ST    @07,RSCKMVAR(,REG6)                                 0541
*            RSCKMVAR(2) = ADDR(RCDID);                            0542
         LA    @07,RCDID(,@04)                                     0542
         ST    @07,RSCKMVAR+4(,REG6)                               0542
*            RSCKMVAR(3) = ADDR(SNVOLSER);                         0543
*                                                                  0543
         L     @07,RSWASNVT(,REG6)                                 0543
         L     @07,RSFAENT(,@07)                                   0543
         LA    @07,SNVOLSER(,@07)                                  0543
         ST    @07,RSCKMVAR+8(,REG6)                               0543
*          /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR             */
*          CALL CKERR;                                             0544
         L     @15,@CV03443                                        0544
         BALR  @14,@15                                             0544
*          END;                                                    0545
*                                                                  0545
*        /************************************************************/
*        /*                                                          */
*        /*  MARK VOLUME GROUP OCCURRENCE(S) UNUSABLE                */
*        /*                                                          */
*        /************************************************************/
*                                                                  0546
*        RSMA3FAE = RSFAENT;           /*CURRENT VGO AS BASE         */
@RC00527 L     @07,RSWASNVT(,REG6)                                 0546
         L     @04,RSFAENT(,@07)                                   0546
         ST    @04,RSMA3FAE(,REG6)                                 0546
*        RSMA3FCN = RSFCNDX;                                       0547
         LH    @04,RSFCNDX(,@07)                                   0547
         STH   @04,RSMA3FCN(,REG6)                                 0547
*        DO RSFCNDX = RSFHNDX BY -1 TO RSMA3FCN;                   0548
         LH    @07,RSFHNDX(,@07)                                   0548
         L     @04,RSWASNVT(,REG6)                                 0548
         STH   @07,RSFCNDX(,@04)                                   0548
         B     @DE00548                                            0548
@DL00548 DS    0H                                                  0549
*                                      /*SCAN ALL REMAINING VGOS     */
*          RSFAENT = RSFCADR + RSFENTLN*(RSFCNDX-1); /* VGO          */
         L     @07,RSWASNVT(,REG6)                                 0549
         LH    @04,RSFCNDX(,@07)                                   0549
         BCTR  @04,0                                               0549
         LR    @01,@04                                             0549
         SLR   @04,@04                                             0549
         IC    @04,RSFENTLN(,@07)                                  0549
         MR    @00,@04                                             0549
         AL    @01,RSFCADR(,@07)                                   0549
         ST    @01,RSFAENT(,@07)                                   0549
*          IF (SNVOLSER = RSMA3FAE->SNVOLSER) &                    0550
*             (SDSDIRSN = RSMA3FAE->SDSDIRSN) THEN                 0550
         L     @07,RSMA3FAE(,REG6)                                 0550
         CLC   SNVOLSER(6,@01),SNVOLSER(@07)                       0550
         BNE   @RF00550                                            0550
         CLC   SDSDIRSN(2,@01),SDSDIRSN(@07)                       0550
         BNE   @RF00550                                            0550
*                                      /*MATCHING VGO (VOLSER-DSDIR) */
*            DO;                                                   0551
*                                                                  0551
*        /************************************************************/
*        /*                                                          */
*        /*     MODIFY THE VOLUME GROUP OCCURRENCE                   */
*        /*                                                          */
*        /************************************************************/
*                                                                  0552
*              SDSDIRSN = 0;           /*MARK VGO UNUSABLE           */
         SLR   @07,@07                                             0552
         STCM  @07,3,SDSDIRSN(@01)                                 0552
*              GRABBB = GRABCURR;      /*BASE FOR MODIFY             */
         L     @07,RSGRABCU(,REG6)                                 0553
         L     @04,GRABCURR(,@07)                                  0553
         ST    @04,GRABBB(,@07)                                    0553
*              /* CALL TO MODULE IDCRS04 FOR PROCEDURE MODGO         */
*              CALL MODGO;                                         0554
         L     @15,@CV03433                                        0554
         BALR  @14,@15                                             0554
*            END;                                                  0555
*        END;                                                      0556
*                                                                  0556
@RF00550 L     @04,RSWASNVT(,REG6)                                 0556
         SLR   @07,@07                                             0556
         BCTR  @07,0                                               0556
         AH    @07,RSFCNDX(,@04)                                   0556
         L     @04,RSWASNVT(,REG6)                                 0556
         STH   @07,RSFCNDX(,@04)                                   0556
@DE00548 CH    @07,RSMA3FCN(,REG6)                                 0556
         BNL   @DL00548                                            0556
*        /************************************************************/
*        /*                                                          */
*        /*     RESTORE THE CALLER'S ENVIRONMENT                     */
*        /*                                                          */
*        /************************************************************/
*                                                                  0557
*        RSFAENT = RSMA3FAE;           /*1ST MATCHING VGO            */
         L     @07,RSWASNVT(,REG6)                                 0557
         L     @04,RSMA3FAE(,REG6)                                 0557
         ST    @04,RSFAENT(,@07)                                   0557
*        RSFCNDX = RSMA3FCN;                                       0558
*                                                                  0558
         LH    @04,RSMA3FCN(,REG6)                                 0558
         STH   @04,RSFCNDX(,@07)                                   0558
*        /************************************************************/
*        /*                                                          */
*        /*  MARK DATA OR INDEX - INHIBIT UPDATE                     */
*        /*                                                          */
*        /************************************************************/
*                                                                  0559
*        CNUS = ON;                                                0559
*                                                                  0559
         L     @07,RSGRABCU(,REG6)                                 0559
         L     @07,GRABCURR(,@07)                                  0559
         OI    CNUS+8(@07),B'00000001'                             0559
*        /************************************************************/
*        /*                                                          */
*        /*  INDICATE TO UPDATE THE CATALOG AND CRA                  */
*        /*                                                          */
*        /************************************************************/
*                                                                  0560
*        RSWUPCAT = ON;                                            0560
         OI    RSWUPCAT(@07),B'00100000'                           0560
*        /* CALL TO MODULE IDCRS05 FOR PROCEDURE ADDUPCR             */
*        CALL ADDUPCR;                                             0561
         L     @15,@CV03442                                        0561
         BALR  @14,@15                                             0561
*  CALL EXIT;  /*TERMINATE*/                                       0562
         BAL   @14,EXIT                                            0562
*  END MARKUNUS; /*END OF PROCEDURE*/                              0563
@EL00009 DS    0H                                                  0563
@EF00009 DS    0H                                                  0563
@ER00009 BR    @14                                                 0563
@PB00009 DS    0H                                                  0564
*/********************************************************************/
*/*                                                                  */
*/* PROCEDURE - PROCVOL                                              */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     PROCESS ALL VOLUME RECORDS. THE PRIMARY OBJECTIVE IS:        */
*/*       . TO DELETE INVALID DATA SET DIRECTORY ENTRIES(DSDIRS)     */
*/*         OR UPDATE REASSIGNED CINS IN THE DSDIRS.                 */
*/*       . TO RETURN SUBALLOCATED SPACE WHICH IS NO LONGER          */
*/*         SUBALLOCATED.                                            */
*/*                                                                  */
*/*     FOR VOLUMES BEING RESET, ALL SPACE REQUESTS WILL BE          */
*/*     CHECKED TO ENSURE NO OVERLAP OF SPACE REQUESTS.              */
*/*                                                                  */
*/* INPUT -                                                          */
*/*     RSWORK AND THE WORKFILE.                                     */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*     ALL VOLUME RECORDS IN THE WORKFILE HAVE BEEN PROCESSED AND   */
*/*     ADJUSTED PER THE FUNCTIONAL DESCRIPTION.                     */
*/*                                                                  */
*/* EXIT,NORMAL - RETURN TO CALLER                                   */
*/********************************************************************/
*      GENERATE;                                                   0564
         DS    0F
NAME0036 DC    CL8'PROCVOL'
*PROCVOL: PROCEDURE                                                0565
*        OPTIONS(NOSAVE,NOSAVEAREA);                               0565
*                                                                  0565
         B     @PB00010                                            0565
PROCVOL  DS    0H                                                  0566
*      GENERATE REFS(RS03RG08, REG6);                              0566
*                                                                  0566
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         ENTRY PROCVOL  ENTRY POINT
         LM    @08,@12,RS03RG08(REG6)  PRIME BASE AND DATA REGS
         MVC   0(4,@15),NAME0036  PROCNAME TO REGSAVE
*        OLDERID2 = NEWERID2;                                      0567
         L     @07,GDTTR2(,REG5)                                   0567
         MVC   @TS00001(95),NEWERID2(@07)                          0567
         MVC   OLDERID2(95,@07),@TS00001                           0567
*        NEWID2 = 'RSPV';                                          0568
*                                                                  0568
         MVC   NEWID2(4,@07),@CC03537                              0568
*        /************************************************************/
*        /*                                                          */
*        /*  PROCESS ALL OF THE VOLUME RECORDS                       */
*        /*                                                          */
*        /************************************************************/
*                                                                  0569
*        RSVTBENT = 0;                 /*INDICATE FIRST ENTRY        */
*                                                                  0569
         SLR   @07,@07                                             0569
         ST    @07,RSVTBENT(,REG6)                                 0569
*        DO UNTIL(VOLSRLAS = ON);                                  0570
@DL00570 DS    0H                                                  0571
*          IF RSVTBENT = 0 THEN        /*FIRST VOLUME ENTRY          */
         L     @07,RSVTBENT(,REG6)                                 0571
         LTR   @07,@07                                             0571
         BNZ   @RF00571                                            0571
*            RSVTBENT = RSVOLLST;                                  0572
         L     @07,RSVOLLST(,REG6)                                 0572
         ST    @07,RSVTBENT(,REG6)                                 0572
*          ELSE                        /*GET NEXT VOLUME ENTRY       */
*            RSVTBENT = VOLSRNXT;                                  0573
*                                                                  0573
         B     @RC00571                                            0573
@RF00571 L     @07,RSVTBENT(,REG6)                                 0573
         L     @07,VOLSRNXT(,@07)                                  0573
         ST    @07,RSVTBENT(,REG6)                                 0573
*        /************************************************************/
*        /*                                                          */
*        /*  ALLOW FOR A BAD VOLUME RECORD. THIS OCCURS WHEN NO      */
*        /*  VOLUME RECORD WAS FOUND ON A CRA BEING RESET.           */
*        /*                                                          */
*        /************************************************************/
*                                                                  0574
*          IF VOLSRSER(1:1) = BADVOLSW THEN;                       0574
*                                                                  0574
@RC00571 L     @07,RSVTBENT(,REG6)                                 0574
         CLC   VOLSRSER(1,@07),BADVOLSW                            0574
         BE    @RT00574                                            0574
*        /************************************************************/
*        /*                                                          */
*        /*  DETERMINE WHETHER THIS IS A RESET VOLUME AND SAVE THE   */
*        /*  INDICATION.                                             */
*        /*                                                          */
*        /************************************************************/
*                                                                  0576
*          ELSE                                                    0576
*            DO;                                                   0576
*              RSCRVL = ADDR(VOLSRSER);                            0577
         L     @07,RSVTBENT(,REG6)                                 0577
         LA    @07,VOLSRSER(,@07)                                  0577
         ST    @07,RSCRVL(,REG6)                                   0577
*              /* CALL TO MODULE IDCRS05 FOR PROCEDURE SCNRLST       */
*              CALL IDCRS5SR('V','A',RSENTPT,RSCRVL);              0578
         LA    @07,@CC00828                                        0578
         ST    @07,@AL00001                                        0578
         LA    @07,@CC00808                                        0578
         ST    @07,@AL00001+4                                      0578
         LA    @07,RSENTPT(,REG6)                                  0578
         ST    @07,@AL00001+8                                      0578
         LA    @07,RSCRVL(,REG6)                                   0578
         ST    @07,@AL00001+12                                     0578
         L     @15,@CV03439                                        0578
         LA    @01,@AL00001                                        0578
         BALR  @14,@15                                             0578
*              RSPVRVOL = OFF;                                     0579
         NI    RSPVRVOL(REG6),B'10111111'                          0579
*              IF RSENTPT ^= 0 THEN    /*INDICATE RESET VOLUME       */
         L     @07,RSENTPT(,REG6)                                  0580
         LTR   @07,@07                                             0580
         BZ    @RF00580                                            0580
*                RSPVRVOL = ON;                                    0581
*                                                                  0581
         OI    RSPVRVOL(REG6),B'01000000'                          0581
*        /************************************************************/
*        /*                                                          */
*        /*  GET THE VOLUME RECORD INTO BUFFER 1                     */
*        /*                                                          */
*        /************************************************************/
*                                                                  0582
*              RSGRABCU = ADDR(GRABSWF); /*READ FROM WORK FILE     */
@RF00580 L     @07,RSIOTBL(,REG6)                                  0582
         ST    @07,RSGRABCU(,REG6)                                 0582
*              GRABCURR = GRABRAB1;                                0583
*                                                                  0583
         L     @04,GRABRAB1(,@07)                                  0583
         ST    @04,GRABCURR(,@07)                                  0583
*              DO;                                                 0584
*                RSRTYPE = ''B;                                    0585
         MVI   RSRTYPE(REG6),X'00'                                 0585
*                RSRGET = ON;      /* GETRCD  */                   0586
         OI    RSRGET(REG6),B'10000000'                            0586
*                RSRUPD = ON;      /* UPDATE  */                   0587
         OI    RSRUPD(REG6),B'00001000'                            0587
*                RSRDS = ''B;                                      0588
         NI    RSRDS(REG6),B'00011111'                             0588
*                RSRWF = ON;       /* WORKFILE  */                 0589
*                RSRDIR = ON;      /* DIRECT  */                   0590
*                RSRKEY = ON;      /* KEY  */                      0591
         OI    RSRWF(REG6),B'10010100'                             0591
*                RSVIAFCR = ON;  /*INDICATE CRA SEARCH*/           0592
         OI    RSVIAFCR(REG6),B'10000000'                          0592
*                RSVIACRA = VOLSRSER; /*SET VOLSER */              0593
         L     @07,RSVTBENT(,REG6)                                 0593
         MVC   RSVIACRA(6,REG6),VOLSRSER(@07)                      0593
*                RSVIACIN = VOLSRCI; /*SET CI NUMBER */            0594
*                                                                  0594
         MVC   RSVIACIN(3,REG6),VOLSRCI+1(@07)                     0594
*              /* CALL TO MODULE IDCRS05 FOR PROCEDURE GETVIA        */
*              CALL GETVIA;                                        0595
         L     @15,@CV03436                                        0595
         BALR  @14,@15                                             0595
*              END;                                                0596
*              IF RABNRF = ON THEN     /*NO RECORD FOUND             */
*                                                                  0597
         L     @07,RSGRABCU(,REG6)                                 0597
         L     @07,GRABCURR(,@07)                                  0597
         TM    RABNRF(@07),B'00000010'                             0597
         BNO   @RF00597                                            0597
*                DO;                                               0598
*                /*CALL CKERR*/                                    0599
*                  RSCKERR = RSCKERR && RSCKERR;                   0599
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      0599
*                  RSCKERN = RSE100;                               0600
         MVC   RSCKERN(2,REG6),@CH00143                            0600
*                  RSCKTERM = 'TERM';                              0601
*                                                                  0601
         MVC   RSCKTERM(4,REG6),@CC03527                           0601
*                /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR       */
*                CALL CKERR;                                       0602
         L     @15,@CV03443                                        0602
         BALR  @14,@15                                             0602
*                END; /*THERE MUST BE A VOL RCD */                 0603
*                                                                  0603
*        /************************************************************/
*        /*                                                          */
*        /*  DETERMINE THE SIZE OF THE SPACE MAP. ONE BIT EXISTS     */
*        /*  IN THE SPACE MAP FOR EACH TRACK ON THE VOLUME. THE      */
*        /*  SPACE MAP SIZE IS DETERMINED IN BYTES, ROUNDING UP FOR  */
*        /*  LEFT OVER BITS.                                         */
*        /*                                                          */
*        /************************************************************/
*                                                                  0604
*              RSMAPSIZ = (RTNOCYLS*RTNOTRKS + 7)/8;               0604
*                                                                  0604
@RF00597 L     @07,RSGRABCU(,REG6)                                 0604
         L     @07,GRABCURR(,@07)                                  0604
         ICM   @01,12,RTNOTRKS(@07)                                0604
         SRA   @01,16                                              0604
         ICM   @07,12,RTNOCYLS(@07)                                0604
         SRA   @07,16                                              0604
         MR    @00,@07                                             0604
         LR    @02,@01                                             0604
         AL    @02,@CF00482                                        0604
         SRDA  @02,32                                              0604
         D     @02,@CF00175                                        0604
         ST    @03,RSMAPSIZ(,REG6)                                 0604
*        /************************************************************/
*        /*                                                          */
*        /*  GET THE BIT MAPS                                        */
*        /*     . FOR NON-RESET VOLUMES A PRIMARY BITMAP             */
*        /*       (SUBALLOCATED SPACE RETURNED), A WORK BITMAP       */
*        /*       (FOR FIND), A CATALOG VGO BITMAP AND A             */
*        /*       CRA VGO BITMAP ARE USED (SEE VLNRESET).            */
*        /*     . FOR RESET VOLUMES 5 BITMAPS ARE USED (SEE VLRESET) */
*        /*                                                          */
*        /************************************************************/
*                                                                  0605
*              IF RSPVRVOL = ON THEN                               0605
         TM    RSPVRVOL(REG6),B'01000000'                          0605
         BNO   @RF00605                                            0605
*                RSIDX1 = DIM(BMAPARRY);                           0606
         MVC   RSIDX1(2,REG6),@CH00280                             0606
*              ELSE                                                0607
*                RSIDX1 = 4;                                       0607
*                                                                  0607
         B     @RC00605                                            0607
@RF00605 MVC   RSIDX1(2,REG6),@CH00038                             0607
*              DO RSIDX = 1 TO RSIDX1; /*GET THE BITMAPS             */
@RC00605 LA    @07,1                                               0608
         B     @DE00608                                            0608
@DL00608 DS    0H                                                  0609
*                CALL IDCSAGP0(GDTTBL,RSMAPSIZ,BMAPARRY(RSIDX),POOL11,
*                  SETZERO);                                       0609
         ST    REG5,@AL00001                                       0609
         LA    @07,RSMAPSIZ(,REG6)                                 0609
         ST    @07,@AL00001+4                                      0609
         LH    @07,RSIDX(,REG6)                                    0609
         SLA   @07,2                                               0609
         LA    @07,BMAPARRY-4(@07,REG6)                            0609
         ST    @07,@AL00001+8                                      0609
         LA    @07,@CC00905                                        0609
         ST    @07,@AL00001+12                                     0609
         LA    @07,SETZERO                                         0609
         ST    @07,@AL00001+16                                     0609
         MVI   @AL00001+16,X'80'                                   0609
         L     @15,GDTGPL(,REG5)                                   0609
         LA    @01,@AL00001                                        0609
         BALR  @14,@15                                             0609
*                RESPECIFY RTNREG RSTD;                            0610
*                TESTRC = RTNREG;                                  0611
         STH   RTNREG,TESTRC(,REG6)                                0611
*                RESPECIFY RTNREG UNRSTD;                          0612
*                IF TESTRC ^= 0 THEN    /*STORAGE NOT AVAILABLE      */
*                                                                  0613
         LH    @07,TESTRC(,REG6)                                   0613
         LTR   @07,@07                                             0613
         BZ    @RF00613                                            0613
*                  DO;                                             0614
*                  /*CALL CKERR*/                                  0615
*                    RSCKERR = RSCKERR && RSCKERR;                 0615
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      0615
*                    RSCKERN = RSE099;                             0616
         MVC   RSCKERN(2,REG6),@CH01078                            0616
*                    RSCKTERM = 'TERM';                            0617
*                                                                  0617
         MVC   RSCKTERM(4,REG6),@CC03527                           0617
*                  /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR     */
*                  CALL CKERR;                                     0618
         L     @15,@CV03443                                        0618
         BALR  @14,@15                                             0618
*                  END;                                            0619
*              END;                                                0620
*                                                                  0620
@RF00613 LA    @07,1                                               0620
         AH    @07,RSIDX(,REG6)                                    0620
@DE00608 STH   @07,RSIDX(,REG6)                                    0620
         CH    @07,RSIDX1(,REG6)                                   0620
         BNH   @DL00608                                            0620
*        /************************************************************/
*        /*                                                          */
*        /*  GET ALL OF THE SPACE HEADERS FOR THIS VOLUME            */
*        /*                                                          */
*        /************************************************************/
*                                                                  0621
*                                                                  0621
*              DO;                                                 0621
*                GRABBB = GRABCURR;                                0622
         L     @07,RSGRABCU(,REG6)                                 0622
         L     @04,GRABCURR(,@07)                                  0622
         ST    @04,GRABBB(,@07)                                    0622
*                RSWGCODE = GCSPCHDR;  /*SPECIFY GROUP CODE          */
         MVI   RSWGCODE(REG6),X'06'                                0623
*                RSWFONE = OFF;        /*FIND ALL OCCURRENCES        */
         NI    RSWFONE(REG6),B'01111111'                           0624
*                /* CALL THE FIND SUBROUTINE */                    0625
*                                                                  0625
*              /* CALL TO MODULE IDCRS04 FOR PROCEDURE FIND          */
*              CALL FIND;                                          0625
         L     @15,@CV03435                                        0625
         BALR  @14,@15                                             0625
*              END;                                                0626
*              RSPVSNT6 = RSWASNVT;    /*SAVE SPC HEADER SNTAB ADDR  */
*                                                                  0627
         L     @07,RSWASNVT(,REG6)                                 0627
         ST    @07,RSPVSNT6(,REG6)                                 0627
*        /************************************************************/
*        /*                                                          */
*        /*  FOR RESET VOLUMES, INITIALIZE THE PRIMARY MAP WITH      */
*        /*  ALL SUBALLOCATABLE TRACKS AS AVAILABLE.                 */
*        /*                                                          */
*        /************************************************************/
*                                                                  0628
*              IF RSPVRVOL = ON THEN                               0628
         TM    RSPVRVOL(REG6),B'01000000'                          0628
         BNO   @RF00628                                            0628
*  INITBMAP:                                                       0629
*                DO;                                               0629
INITBMAP DS    0H                                                  0630
*                  RSFAENT = RSFCADR;  /*FIRST SPACE HEADER          */
         L     @07,RSWASNVT(,REG6)                                 0630
         L     @04,RSFCADR(,@07)                                   0630
         ST    @04,RSFAENT(,@07)                                   0630
*                  IF RSFENTLN ^= 0 THEN /*CATERR MAY CAUSE NO SPCHDR*/
         CLI   RSFENTLN(@07),0                                     0631
         BE    @RF00631                                            0631
*                    DO;                                           0632
*        RFY SNTTNN BASED(ADDR(SSPEXTNN));                         0633
*                                      /*MAP TTNNS ON THE SPACE HDR  */
*                      RSTGBMAP = RSPBMAP; /*SETBITS IN PRIM BMAP    */
         L     @07,RSPBMAP(,REG6)                                  0634
         ST    @07,RSTGBMAP(,REG6)                                 0634
*                      RSPVSETB = '';  /*CLEAR SETBITS OPTIONS       */
*                                                                  0635
         MVI   RSPVSETB(REG6),X'00'                                0635
*                      DO RSFCNDX = 1 TO RSFHNDX;                  0636
         LA    @07,1                                               0636
         B     @DE00636                                            0636
@DL00636 DS    0H                                                  0637
*                                      /*PROCESS ALL SPACE HEADERS   */
*                        IF SNVSPUNQ = OFF THEN /*IGNORE UNIQUES     */
         L     @07,RSWASNVT(,REG6)                                 0637
         L     @07,RSFAENT(,@07)                                   0637
         TM    SNVSPUNQ(@07),B'10000000'                           0637
         BNZ   @RF00637                                            0637
*                          CALL SETBITS;                           0638
         BAL   @14,SETBITS                                         0638
*                        RSFAENT = RSFAENT + RSFENTLN; /*NEXT SPC HDR*/
@RF00637 L     @07,RSWASNVT(,REG6)                                 0639
         SLR   @04,@04                                             0639
         IC    @04,RSFENTLN(,@07)                                  0639
         AL    @04,RSFAENT(,@07)                                   0639
         ST    @04,RSFAENT(,@07)                                   0639
*                      END;                                        0640
         L     @04,RSWASNVT(,REG6)                                 0640
         LA    @07,1                                               0640
         AH    @07,RSFCNDX(,@04)                                   0640
@DE00636 L     @04,RSWASNVT(,REG6)                                 0640
         STH   @07,RSFCNDX(,@04)                                   0640
         L     @04,RSWASNVT(,REG6)                                 0640
         CH    @07,RSFHNDX(,@04)                                   0640
         BNH   @DL00636                                            0640
*        RFY SNTTNN;                   /*REVERT                      */
*                                                                  0641
*        /************************************************************/
*        /*                                                          */
*        /*     INITIALIZE THE SECONDARY MAP WITH ALL                */
*        /*     SUBALLOCATABLE TRACKS AS AVAILABLE                   */
*        /*                                                          */
*        /************************************************************/
*                                                                  0642
*                      RSTOMAP = RSSBMAP;                          0642
         L     @07,RSSBMAP(,REG6)                                  0642
         ST    @07,RSTOMAP(,REG6)                                  0642
*                      RSFROMAP = RSPBMAP;                         0643
         L     @07,RSPBMAP(,REG6)                                  0643
         ST    @07,RSFROMAP(,REG6)                                 0643
*                      DO TMPSZ = RSMAPSIZ BY -256 WHILE(TMPSZ>256);
         L     @07,RSMAPSIZ(,REG6)                                 0644
         ST    @07,TMPSZ(,REG6)                                    0644
         B     @DE00644                                            0644
@DL00644 DS    0H                                                  0645
*                                      /*INSERT ALL BUT LAST BIT     */
*                        RSTOMAP->BMAP(1:256) = RSFROMAP->BMAP(1:256);
         L     @07,RSTOMAP(,REG6)                                  0645
         L     @04,RSFROMAP(,REG6)                                 0645
         MVC   BMAP(256,@07),BMAP(@04)                             0645
*                        RSTOMAP = RSTOMAP + 256;                  0646
         LA    @15,256                                             0646
         ALR   @07,@15                                             0646
         ST    @07,RSTOMAP(,REG6)                                  0646
*                        RSFROMAP = RSFROMAP + 256;                0647
         ALR   @04,@15                                             0647
         ST    @04,RSFROMAP(,REG6)                                 0647
*                      END;                                        0648
         L     @07,@CF03546                                        0648
         AL    @07,TMPSZ(,REG6)                                    0648
         ST    @07,TMPSZ(,REG6)                                    0648
@DE00644 L     @07,TMPSZ(,REG6)                                    0648
         C     @07,@CF03188                                        0648
         BH    @DL00644                                            0648
*                      RSTOMAP->BMAP(1:TMPSZ) =                    0649
*                          RSFROMAP->BMAP(1:TMPSZ);                0649
         L     @04,RSTOMAP(,REG6)                                  0649
         BCTR  @07,0                                               0649
         L     @01,RSFROMAP(,REG6)                                 0649
         EX    @07,@SM03734                                        0649
*                                      /*COPY LAST LITTLE BIT        */
*                    END;                                          0650
*                  ELSE                                            0651
*                    RSPVSNT6 = 0;     /*NO SPACE HEADERS            */
         B     @RC00631                                            0651
@RF00631 SLR   @07,@07                                             0651
         ST    @07,RSPVSNT6(,REG6)                                 0651
*                END INITBMAP;                                     0652
*                                                                  0652
@RC00631 DS    0H                                                  0653
*        /************************************************************/
*        /*                                                          */
*        /*  GET ALL OF THE DSDIRS FOR THIS VOLUME                   */
*        /*                                                          */
*        /************************************************************/
*                                                                  0653
*                                                                  0653
*              DO;                                                 0653
@RF00628 DS    0H                                                  0654
*                GRABBB = GRABCURR;                                0654
         L     @07,RSGRABCU(,REG6)                                 0654
         L     @04,GRABCURR(,@07)                                  0654
         ST    @04,GRABBB(,@07)                                    0654
*                RSWGCODE = GCDSDIR;   /*SPECIFY GROUP CODE          */
         MVI   RSWGCODE(REG6),X'08'                                0655
*                RSWFONE = OFF;        /*FIND ALL OCCURRENCES        */
         NI    RSWFONE(REG6),B'01111111'                           0656
*                /* CALL THE FIND SUBROUTINE */                    0657
*                                                                  0657
*              /* CALL TO MODULE IDCRS04 FOR PROCEDURE FIND          */
*              CALL FIND;                                          0657
         L     @15,@CV03435                                        0657
         BALR  @14,@15                                             0657
*              END;                                                0658
*              IF RSFENTLN ^= 0 THEN   /*DSDIRS EXIST                */
         L     @07,RSWASNVT(,REG6)                                 0659
         CLI   RSFENTLN(@07),0                                     0659
         BE    @RF00659                                            0659
*                RSPVSNT8 = RSWASNVT;  /*SAVE ADDR DSDIR SNTAB       */
         ST    @07,RSPVSNT8(,REG6)                                 0660
*              ELSE                                                0661
*                RSPVSNT8 = 0;         /*NO DSDIRS                   */
*                                                                  0661
         B     @RC00659                                            0661
@RF00659 SLR   @07,@07                                             0661
         ST    @07,RSPVSNT8(,REG6)                                 0661
*        /************************************************************/
*        /*                                                          */
*        /*  FOR RESET VOLUMES -                                     */
*        /*     VLRESET WILL VERIFY AND POSSIBLY UPDATE OR DELETE    */
*        /*     EACH DSDIR. FURTHER, ALL CONFLICTS IN SPACE REQUESTS */
*        /*     WILL BE METED OUT JUDICIOUSLY.                       */
*        /*                                                          */
*        /*  FOR NON-RESET VOLUMES -                                 */
*        /*     VLNRESET WILL VERIFY AND POSSIBLY UPDATE OR DELETE   */
*        /*     EACH DSDIR WHICH ASSOCIATES TO AN OBJECT WHICH       */
*        /*     WAS OR IS ON ONE OF THE RESET VOLUMES. IF DELETED,   */
*        /*     ALL SPACE PREVIOUSLY SUBALLOCATED TO IT IS           */
*        /*     RETURNED FOR SUBALLOCATION.                          */
*        /*                                                          */
*        /*   IN BOTH CASES, THE VOLUME SET OF RECORDS IS AS         */
*        /*   GOOD AS WE CAN GET IT.                                 */
*        /*                                                          */
*        /************************************************************/
*                                                                  0662
*              IF RSPVRVOL = ON THEN                               0662
@RC00659 TM    RSPVRVOL(REG6),B'01000000'                          0662
         BNO   @RF00662                                            0662
*                CALL VLRESET;                                     0663
*                                                                  0663
         BAL   @14,VLRESET                                         0663
*              ELSE                                                0664
*                IF RSPVSNT8 ^= 0 THEN /*ONLY GO IF DSDIRS           */
         B     @RC00662                                            0664
@RF00662 L     @07,RSPVSNT8(,REG6)                                 0664
         LTR   @07,@07                                             0664
         BZ    @RF00664                                            0664
*                  CALL VLNRESET;                                  0665
*                                                                  0665
         BAL   @14,VLNRESET                                        0665
*        /************************************************************/
*        /*                                                          */
*        /*       OPPORTUNITY TO DUMP (RSP2) - AFTER VOL PROCESSED   */
*        /*                                                          */
*        /************************************************************/
*                                                                  0666
*              IF GDTDBG = NULLPTR                                 0666
*                THEN;                                             0666
@RF00664 DS    0H                                                  0666
@RC00662 L     @07,GDTDBG(,REG5)                                   0666
         LTR   @07,@07                                             0666
         BZ    @RT00666                                            0666
*                ELSE                                              0668
*                  CALL IDCDB010 (GDTTBL,'RSP2');                  0668
*                                                                  0668
         ST    REG5,@AL00001                                       0668
         LA    @07,@CC03549                                        0668
         ST    @07,@AL00001+4                                      0668
         MVI   @AL00001+4,X'80'                                    0668
         L     @15,GDTDBG(,REG5)                                   0668
         LA    @01,@AL00001                                        0668
         BALR  @14,@15                                             0668
*        /************************************************************/
*        /*                                                          */
*        /*   FREE UP ALL BITMAPS AND OTHER STORAGE REQUIRED         */
*        /*                                                          */
*        /************************************************************/
*                                                                  0669
*              CALL IDCSAFP0 (GDTTBL,POOL11);                      0669
*                                                                  0669
@RT00666 ST    REG5,@AL00001                                       0669
         LA    @07,@CC00905                                        0669
         ST    @07,@AL00001+4                                      0669
         MVI   @AL00001+4,X'80'                                    0669
         L     @15,GDTFPL(,REG5)                                   0669
         LA    @01,@AL00001                                        0669
         BALR  @14,@15                                             0669
*        /************************************************************/
*        /*                                                          */
*        /*   FREE THE SPACE HEADER AND DSDIR SN TABLES FOR          */
*        /*   REUSE BY FIND.                                         */
*        /*                                                          */
*        /************************************************************/
*                                                                  0670
*              IF RSPVSNT6 ^= 0 THEN                               0670
         L     @07,RSPVSNT6(,REG6)                                 0670
         LTR   @07,@07                                             0670
         BZ    @RF00670                                            0670
*                RSPVSNT6->RSFENTLN = 0;                           0671
         MVI   RSFENTLN(@07),X'00'                                 0671
*              IF RSPVSNT8 ^= 0 THEN                               0672
@RF00670 L     @07,RSPVSNT8(,REG6)                                 0672
         LTR   @07,@07                                             0672
         BZ    @RF00672                                            0672
*                RSPVSNT8->RSFENTLN = 0;                           0673
*                                                                  0673
         MVI   RSFENTLN(@07),X'00'                                 0673
*        /************************************************************/
*        /*                                                          */
*        /*  FREE ALL POSSIBLY HELD RPLS                             */
*        /*                                                          */
*        /************************************************************/
*                                                                  0674
*            RSGRABCU = ADDR(GRABSWF);                             0674
@RF00672 L     @07,RSIOTBL(,REG6)                                  0674
         ST    @07,RSGRABCU(,REG6)                                 0674
*            GRABCURR = GRABRAB1;                                  0675
*                                                                  0675
         L     @04,GRABRAB1(,@07)                                  0675
         ST    @04,GRABCURR(,@07)                                  0675
*            DO;                                                   0676
*              RSRECREQ = ''B;                                     0677
         XC    RSRECREQ(2,REG6),RSRECREQ(REG6)                     0677
*              RSRTERM = ON;     /* TERMRCD */                     0678
         OI    RSRTERM(REG6),B'00000010'                           0678
*              RSRWF = ON;       /* WORKFILE */                    0679
*                                                                  0679
         OI    RSRWF(REG6),B'10000000'                             0679
*            /* CALL TO MODULE IDCRS06 FOR PROCEDURE RECMGMT         */
*            CALL RECMGMT;                                         0680
         L     @15,@CV03452                                        0680
         BALR  @14,@15                                             0680
*              RFY RTNREG RSTD;                                    0681
*              TESTRC = RTNREG;                                    0682
         STH   RTNREG,TESTRC(,REG6)                                0682
*              RFY RTNREG UNRSTD;                                  0683
*            END;                                                  0684
*          END;                                                    0685
*                                                                  0685
*        END;                                                      0686
@RT00574 DS    0H                                                  0686
@DE00570 L     @07,RSVTBENT(,REG6)                                 0686
         TM    VOLSRLAS(@07),B'10000000'                           0686
         BNO   @DL00570                                            0686
* CALL EXIT;  /*TERMINATE*/                                        0687
         BAL   @14,EXIT                                            0687
* END PROCVOL; /*END OF PROCEDURE*/                                0688
@EL00010 DS    0H                                                  0688
@EF00010 DS    0H                                                  0688
@ER00010 BR    @14                                                 0688
@PB00010 DS    0H                                                  0689
*/********************************************************************/
*/* PROCEDURE NAME - SETBITS                                         */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     TRANSLATES TTNNS INTO BITS IN THE FORM OF A SPACE MAP.       */
*/*                                                                  */
*/* INPUT -                                                          */
*/*     VOLUME RECORD IN WORKFILE BUFFER 1                           */
*/*     RSPVSETB - OPTION FLAGS                                      */
*/*       RSSETCRA - USE TTNNS IN THE RESVOL ENTRY FOR THE CRA       */
*/*       RSSETMAP - SET BITS FROM THE BITMAP (RSSTBMAP)             */
*/*                  INTO ANOTHER MAP(RSTGBMAP).                     */
*/*       RSST1TO1 - (ONLY FOR RSSETMAP OPTION)                      */
*/*                  ON = SET BITS IN FROM MAP(RSSTBMAP) ON IN       */
*/*                       TO MAP(RSTGBMAP)                           */
*/*                  OFF = SET BITS IN FROM MAP(RSSTBMAP) OFF IN     */
*/*                       TO MAP(RSTGBMAP)                           */
*/*       RSPVCLBM - CLEAR THE TARGET BIT MAP PRIOR TO SETTING THE   */
*/*                  BITS.                                           */
*/*     RSTGBMAP - TARGET MAP TO SET THE BITS IN.                    */
*/*     RSSTBMAP - ADDRESS OF FROM MAP FOR RSSETMAP OPTION           */
*/*     RSMAPSIZ - SIZE OF THE MAP                                   */
*/*     RSWASNVT - SN TAB FOR VOLGO OR SPACE HEADER (FOR TTNN(S)     */
*/*                IF NOT A CRA TYPE OF SET.                         */
*/*     RSENTPT - ADDRESS OF THE RESVOL ENTRY (TTNN(S)) IF A         */
*/*               CRA TYPE OF SET.                                   */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*     RSSETERR - ON IF TRACKS BEYOND VOLUMES PHYSICAL GEOMETRY     */
*/*     BITS SET TO 1S IN THE TARGET MAP.                            */
*/*                                                                  */
*/********************************************************************/
*      GENERATE;                                                   0689
         DS    0F
NAME0054 DC    CL8'SETBITS'
*SETBITS: PROCEDURE                                                0690
*        OPTIONS(NOSAVE,NOSAVEAREA);                               0690
*                                                                  0690
         B     @PB00011                                            0690
SETBITS  DS    0H                                                  0691
*      GENERATE REFS(RS03RG08, REG6);                              0691
*                                                                  0691
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         MVC   0(4,@15),NAME0054  PROCNAME TO REGSAVE
*        OLDERID2 = NEWERID2;                                      0692
         L     @07,GDTTR2(,REG5)                                   0692
         MVC   @TS00001(95),NEWERID2(@07)                          0692
         MVC   OLDERID2(95,@07),@TS00001                           0692
*        NEWID2 = 'RSST';                                          0693
*                                                                  0693
         MVC   NEWID2(4,@07),@CC03553                              0693
*        RFY BMAP BASED(RSTOMAP);      /*DEFAULT BIT MAP             */
*        RFY SNTTNN BASED(RSSETTT);    /*TTNN MAP                    */
*        RSSETERR = OFF;               /*RESET ERROR                 */
*                                                                  0696
         NI    RSSETERR(REG6),B'11110111'                          0696
*        /************************************************************/
*        /*                                                          */
*        /*  CLEAR THE TARGET MAP                                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  0697
*        IF RSPVCLBM = ON THEN                                     0697
         TM    RSPVCLBM(REG6),B'00100000'                          0697
         BNO   @RF00697                                            0697
*          DO;                                                     0698
*            RSTOMAP = RSTGBMAP;       /*TARGET MAP ADDR             */
         L     @07,RSTGBMAP(,REG6)                                 0699
         ST    @07,RSTOMAP(,REG6)                                  0699
*            DO TMPSZ = RSMAPSIZ BY -256 WHILE(TMPSZ>256);         0700
         L     @07,RSMAPSIZ(,REG6)                                 0700
         ST    @07,TMPSZ(,REG6)                                    0700
         B     @DE00700                                            0700
@DL00700 DS    0H                                                  0701
*                                      /*CLEAR MAX INSTRUCTION SIZE  */
*              BMAP(1:256) = BMAP(1:256) && BMAP(1:256);           0701
         L     @07,RSTOMAP(,REG6)                                  0701
         XC    BMAP(256,@07),BMAP(@07)                             0701
*              RSTOMAP = RSTOMAP + 256; /*NEXT SEGMENT               */
         AL    @07,@CF03188                                        0702
         ST    @07,RSTOMAP(,REG6)                                  0702
*            END;                                                  0703
         L     @07,@CF03546                                        0703
         AL    @07,TMPSZ(,REG6)                                    0703
         ST    @07,TMPSZ(,REG6)                                    0703
@DE00700 L     @07,TMPSZ(,REG6)                                    0703
         C     @07,@CF03188                                        0703
         BH    @DL00700                                            0703
*            BMAP(1:TMPSZ) = BMAP(1:TMPSZ) && BMAP(1:TMPSZ);       0704
         L     @04,RSTOMAP(,REG6)                                  0704
         BCTR  @07,0                                               0704
         EX    @07,@SX03737                                        0704
*                                      /*CLEAR LAST LITTLE BIT       */
*          END;                                                    0705
*                                                                  0705
*        /************************************************************/
*        /*                                                          */
*        /*                 CRA INITIALIZATION                       */
*        /*                                                          */
*        /************************************************************/
*                                                                  0706
*        IF RSSETCRA = ON THEN                                     0706
@RF00697 TM    RSSETCRA(REG6),B'10000000'                          0706
         BNO   @RF00706                                            0706
*          DO;                                                     0707
*            RSPVNEXT = RESVLNEX;      /*NUMBER OF EXTENTS           */
         L     @07,RSENTPT(,REG6)                                  0708
         LH    @04,RESVLNEX(,@07)                                  0708
         STH   @04,RSPVNEXT(,REG6)                                 0708
*            RSSETTT = ADDR(RESVLEXT); /*1ST TTNN                    */
         LA    @07,RESVLEXT(,@07)                                  0709
         ST    @07,RSSETTT(,REG6)                                  0709
*          END;                                                    0710
*                                                                  0710
*        /************************************************************/
*        /*                                                          */
*        /*                 MAP TO MAP INITIALIZATION                */
*        /*                                                          */
*        /************************************************************/
*                                                                  0711
*        ELSE                                                      0711
*          IF RSSETMAP = ON THEN;                                  0711
*                                                                  0711
         B     @RC00706                                            0711
@RF00706 TM    RSSETMAP(REG6),B'01000000'                          0711
         BO    @RT00711                                            0711
*        /************************************************************/
*        /*                                                          */
*        /*                 VOLUME GROUP OCCURRENCE                  */
*        /*                                                          */
*        /************************************************************/
*                                                                  0713
*          ELSE                                                    0713
*            IF RSFGCODE = GCVOLGO THEN                            0713
         L     @07,RSWASNVT(,REG6)                                 0713
         CLI   RSFGCODE(@07),3                                     0713
         BNE   @RF00713                                            0713
*              DO;                                                 0714
*                RSPVNEXT = SNTTNNC;   /*NUMBER OF EXTENTS           */
         L     @04,RSFAENT(,@07)                                   0715
         SLR   @15,@15                                             0715
         IC    @15,SNTTNNC(,@04)                                   0715
         STH   @15,RSPVNEXT(,REG6)                                 0715
*                RSSETTT = RSFATTNN + (SNTTNNX-1)*LENGTH(SNTTNN);  0716
         SLR   @15,@15                                             0716
         IC    @15,SNTTNNX(,@04)                                   0716
         BCTR  @15,0                                               0716
         SLA   @15,2                                               0716
         AL    @15,RSFATTNN(,@07)                                  0716
         ST    @15,RSSETTT(,REG6)                                  0716
*                                      /*1ST TTNN                    */
*              END;                                                0717
*                                                                  0717
*        /************************************************************/
*        /*                                                          */
*        /*                 SPACE HEADER                             */
*        /*                                                          */
*        /************************************************************/
*                                                                  0718
*            ELSE                                                  0718
*              IF RSFGCODE = GCSPCHDR THEN                         0718
         B     @RC00713                                            0718
@RF00713 L     @07,RSWASNVT(,REG6)                                 0718
         CLI   RSFGCODE(@07),6                                     0718
         BNE   @RF00718                                            0718
*                DO;                                               0719
*                  RSPVNEXT = SNODSPXT; /*NUMBER OF EXTENTS          */
         L     @07,RSFAENT(,@07)                                   0720
         SLR   @04,@04                                             0720
         IC    @04,SNODSPXT(,@07)                                  0720
         STH   @04,RSPVNEXT(,REG6)                                 0720
*                  RSSETTT = ADDR(SSPEXTNT); /* 1ST TTNN             */
         LA    @07,SSPEXTNT(,@07)                                  0721
         ST    @07,RSSETTT(,REG6)                                  0721
*                END;                                              0722
*                                                                  0722
*        /************************************************************/
*        /*                                                          */
*        /*                    BAD INPUT                             */
*        /*                                                          */
*        /************************************************************/
*                                                                  0723
*              ELSE                                                0723
*                                                                  0723
*                DO;                                               0723
         B     @RC00718                                            0723
@RF00718 DS    0H                                                  0724
*                /*CALL CKERR*/                                    0724
*                  RSCKERR = RSCKERR && RSCKERR;                   0724
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      0724
*                  RSCKERN = RSE100;                               0725
         MVC   RSCKERN(2,REG6),@CH00143                            0725
*                  RSCKTERM = 'TERM';                              0726
*                                                                  0726
         MVC   RSCKTERM(4,REG6),@CC03527                           0726
*                /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR       */
*                CALL CKERR;                                       0727
         L     @15,@CV03443                                        0727
         BALR  @14,@15                                             0727
*                END;                                              0728
*                                                                  0728
*        /************************************************************/
*        /*                                                          */
*        /*  SET A BITMAP FROM ANOTHER BITMAP                        */
*        /*                                                          */
*        /************************************************************/
*                                                                  0729
*        IF RSSETMAP = ON THEN                                     0729
@RC00718 DS    0H                                                  0729
@RC00713 DS    0H                                                  0729
@RT00711 DS    0H                                                  0729
@RC00706 TM    RSSETMAP(REG6),B'01000000'                          0729
         BNO   @RF00729                                            0729
*  SETMAP:                                                         0730
*          DO;                                                     0730
SETMAP   DS    0H                                                  0731
*            RSTOMAP = RSTGBMAP;       /*TARGET MAP                  */
         L     @07,RSTGBMAP(,REG6)                                 0731
         ST    @07,RSTOMAP(,REG6)                                  0731
*            RSFROMAP = RSSTBMAP;      /*FROM MAP                    */
         L     @07,RSSTBMAP(,REG6)                                 0732
         ST    @07,RSFROMAP(,REG6)                                 0732
*            DO TMPSZ = RSMAPSIZ BY -256 WHILE(TMPSZ>256);         0733
         L     @07,RSMAPSIZ(,REG6)                                 0733
         ST    @07,TMPSZ(,REG6)                                    0733
         B     @DE00733                                            0733
@DL00733 DS    0H                                                  0734
*              IF RSST1TO1 = ON THEN   /*SET BITS ON                 */
         TM    RSST1TO1(REG6),B'00010000'                          0734
         BNO   @RF00734                                            0734
*                BMAP(1:256) = BMAP(1:256) × RSFROMAP->BMAP(1:256);
         L     @07,RSTOMAP(,REG6)                                  0735
         L     @04,RSFROMAP(,REG6)                                 0735
         OC    BMAP(256,@07),BMAP(@04)                             0735
*              ELSE                    /*SET BITS OFF                */
*                DO;                                               0736
         B     @RC00734                                            0736
@RF00734 DS    0H                                                  0737
*                  BMAP(1:256) = BMAP(1:256) × RSFROMAP->BMAP(1:256);
         L     @07,RSTOMAP(,REG6)                                  0737
         L     @04,RSFROMAP(,REG6)                                 0737
         OC    BMAP(256,@07),BMAP(@04)                             0737
*                                      /*ENSURE BITS TO BE SET OFF   */
*                                      /*ARE ON IN TARGET            */
*                  BMAP(1:256) = BMAP(1:256) && RSFROMAP->BMAP(1:256);
         XC    BMAP(256,@07),BMAP(@04)                             0738
*                                      /*NOW SET BITS OFF            */
*                END;                                              0739
*              RSTOMAP = RSTOMAP + 256; /*NEXT PART OF MAP           */
@RC00734 LA    @07,256                                             0740
         L     @04,RSTOMAP(,REG6)                                  0740
         ALR   @04,@07                                             0740
         ST    @04,RSTOMAP(,REG6)                                  0740
*              RSFROMAP = RSFROMAP + 256;                          0741
         AL    @07,RSFROMAP(,REG6)                                 0741
         ST    @07,RSFROMAP(,REG6)                                 0741
*            END;                                                  0742
*                                                                  0742
         L     @07,@CF03546                                        0742
         AL    @07,TMPSZ(,REG6)                                    0742
         ST    @07,TMPSZ(,REG6)                                    0742
@DE00733 L     @07,TMPSZ(,REG6)                                    0742
         C     @07,@CF03188                                        0742
         BH    @DL00733                                            0742
*        /************************************************************/
*        /*                                                          */
*        /*     SET LAST LITTLE BIT                                  */
*        /*                                                          */
*        /************************************************************/
*                                                                  0743
*            IF RSST1TO1 = ON THEN     /*SET BITS ON                 */
         TM    RSST1TO1(REG6),B'00010000'                          0743
         BNO   @RF00743                                            0743
*              BMAP(1:TMPSZ) = BMAP(1:TMPSZ) ×                     0744
*               RSFROMAP->BMAP(1:256);                             0744
         L     @04,RSTOMAP(,REG6)                                  0744
         BCTR  @07,0                                               0744
         L     @01,RSFROMAP(,REG6)                                 0744
         EX    @07,@SO03739                                        0744
*            ELSE                      /*SET BITS OFF                */
*              DO;                                                 0745
         B     @RC00743                                            0745
@RF00743 DS    0H                                                  0746
*                BMAP(1:TMPSZ) = BMAP(1:TMPSZ) ×                   0746
*                 RSFROMAP->BMAP(1:TMPSZ);                         0746
         L     @07,RSTOMAP(,REG6)                                  0746
         L     @04,TMPSZ(,REG6)                                    0746
         BCTR  @04,0                                               0746
         L     @15,RSFROMAP(,REG6)                                 0746
         EX    @04,@SO03741                                        0746
*                                      /*ENSURE BITS TO BE SET OFF   */
*                                      /*ARE ON IN TARGET            */
*                BMAP(1:TMPSZ) = BMAP(1:TMPSZ) &&                  0747
*                 RSFROMAP->BMAP(1:TMPSZ);                         0747
         EX    @04,@SX03743                                        0747
*                                      /*NOW SET BITS OFF            */
*              END;                                                0748
*          END SETMAP;                                             0749
*                                                                  0749
*        /************************************************************/
*        /*                                                          */
*        /*  FILTER OUT CANDIDATE REQUESTS - THEY HAVE NO EXTENTS    */
*        /*                                                          */
*        /************************************************************/
*                                                                  0750
*        ELSE                                                      0750
*          IF RSPVNEXT = 0 THEN;                                   0750
*                                                                  0750
         B     @RC00729                                            0750
@RF00729 LH    @07,RSPVNEXT(,REG6)                                 0750
         LTR   @07,@07                                             0750
         BZ    @RT00750                                            0750
*        /************************************************************/
*        /*                                                          */
*        /*  CONVERT INPUT TTNN(S) TO BITS.                          */
*        /*                                                          */
*        /************************************************************/
*                                                                  0752
*          ELSE                                                    0752
*  SETEXT:                                                         0752
*            DO RSPVTNEX = 1 TO RSPVNEXT;                          0752
SETEXT   LA    @07,1                                               0752
         B     @DE00752                                            0752
@DL00752 DS    0H                                                  0753
*              RSTOMAP = RSTGBMAP + (SNTT(RSPVTNEX)/8); /*START BYTE */
         L     @07,RSTGBMAP(,REG6)                                 0753
         LH    @04,RSPVTNEX(,REG6)                                 0753
         SLA   @04,2                                               0753
         L     @15,RSSETTT(,REG6)                                  0753
         LA    @01,0(@04,@15)                                      0753
         AL    @01,@CF03727                                        0753
         LH    @14,SNTT(,@01)                                      0753
         LR    @00,@14                                             0753
         SRDA  @00,32                                              0753
         D     @00,@CF00175                                        0753
         ALR   @01,@07                                             0753
         ST    @01,RSTOMAP(,REG6)                                  0753
*              RSBITPOS = SNTT(RSPVTNEX)//8; /*FIRST BIT POSITION    */
         SRDA  @14,32                                              0754
         D     @14,@CF00175                                        0754
         STH   @14,RSBITPOS(,REG6)                                 0754
*              RSPVNN = SNNN(RSPVTNEX); /*NO. OF TRACKS              */
         L     @15,RSSETTT(,REG6)                                  0755
         BCTR  @15,0                                               0755
         BCTR  @15,0                                               0755
         LH    @04,SNNN-2(@04,@15)                                 0755
         STH   @04,RSPVNN(,REG6)                                   0755
*              IF RSTOMAP => (RSTGBMAP + RSMAPSIZ) THEN            0756
         AL    @07,RSMAPSIZ(,REG6)                                 0756
         CR    @01,@07                                             0756
         BL    @RF00756                                            0756
*                RSSETERR = ON;          /*TRACKS DON'T EXIST        */
*                                                                  0757
         OI    RSSETERR(REG6),B'00001000'                          0757
*        /************************************************************/
*        /*                                                          */
*        /*     ALLOW FOR ONE BYTE OR LESS IN THE MAP                */
*        /*                                                          */
*        /************************************************************/
*                                                                  0758
*              ELSE                                                0758
*                DO;                                               0758
         B     @RC00756                                            0758
@RF00756 DS    0H                                                  0759
*                  IF RSPVNN =< (8-RSBITPOS) THEN                  0759
         LH    @07,RSBITPOS(,REG6)                                 0759
         LA    @04,8                                               0759
         SLR   @04,@07                                             0759
         CH    @04,RSPVNN(,REG6)                                   0759
         BL    @RF00759                                            0759
*                    DO;                                           0760
*                      RSBITPOS = RSBITPOS + 1; /*START BIT          */
         AL    @07,@CF00212                                        0761
         STH   @07,RSBITPOS(,REG6)                                 0761
*                      RSMASK = MASKVAL(RSBITPOS:RSBITPOS);        0762
         SLR   @04,@04                                             0762
         IC    @04,MASKVAL-1(@07)                                  0762
         STC   @04,RSMASK(,REG6)                                   0762
*                                      /*GET ELIGIBLE RIGHT BITS     */
*                      RSBITPOS = RSBITPOS + SNNN(RSPVTNEX) - 1;   0763
         LH    @15,RSPVTNEX(,REG6)                                 0763
         SLA   @15,2                                               0763
         L     @01,RSSETTT(,REG6)                                  0763
         BCTR  @01,0                                               0763
         BCTR  @01,0                                               0763
         AH    @07,SNNN-2(@15,@01)                                 0763
         BCTR  @07,0                                               0763
         STH   @07,RSBITPOS(,REG6)                                 0763
*                                      /*LAST BIT POSITION           */
*                      RSMASK = RSMASK & MASKV1(RSBITPOS:RSBITPOS);
         SLR   @15,@15                                             0764
         IC    @15,MASKV1-1(@07)                                   0764
         NR    @04,@15                                             0764
         STC   @04,RSMASK(,REG6)                                   0764
*                                      /*SET BITS ON IN THE MASK     */
*                      BMAP(1:1) = BMAP(1:1) × RSMASK; /*SET BIT MAP */
         L     @07,RSTOMAP(,REG6)                                  0765
         SLR   @15,@15                                             0765
         IC    @15,BMAP(,@07)                                      0765
         OR    @04,@15                                             0765
         STC   @04,BMAP(,@07)                                      0765
*                    END;                                          0766
*                                                                  0766
*        /************************************************************/
*        /*                                                          */
*        /*     MULTIPLE BYTE MAP - HANDLE FIRST BYTE                */
*        /*                                                          */
*        /************************************************************/
*                                                                  0767
*                  ELSE                                            0767
*                    DO;                                           0767
         B     @RC00759                                            0767
@RF00759 DS    0H                                                  0768
*                      IF RSBITPOS ^= 0 THEN /*ALLOW FR SMALL 1ST BYT*/
         LH    @07,RSBITPOS(,REG6)                                 0768
         LTR   @07,@07                                             0768
         BZ    @RF00768                                            0768
*                        DO;                                       0769
*                          RSPVNN = RSPVNN - (8 - RSBITPOS);       0770
         LA    @04,8                                               0770
         SLR   @04,@07                                             0770
         LCR   @04,@04                                             0770
         AH    @04,RSPVNN(,REG6)                                   0770
         STH   @04,RSPVNN(,REG6)                                   0770
*                                      /*FACTOR OUT NO. TRKS 1ST BYTE*/
*                          RSBITPOS = RSBITPOS + 1; /*START BIT      */
         LA    @04,1                                               0771
         ALR   @07,@04                                             0771
         STH   @07,RSBITPOS(,REG6)                                 0771
*                          BMAP(1:1) = BMAP(1:1) ×                 0772
*                                    MASKVAL(RSBITPOS:RSBITPOS);   0772
         L     @15,RSTOMAP(,REG6)                                  0772
         LA    @14,MASKVAL-1(@07)                                  0772
         OC    BMAP(1,@15),0(@14)                                  0772
*                                      /*FIRST BYTE SET              */
*                          RSTOMAP = RSTOMAP + 1; /*NEXT BYTE        */
         ALR   @15,@04                                             0773
         ST    @15,RSTOMAP(,REG6)                                  0773
*                        END;                                      0774
*                                                                  0774
*        /************************************************************/
*        /*                                                          */
*        /*     HANDLE FULL BYTES                                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  0775
*                      DO RSPVNN = RSPVNN BY -8 WHILE(RSPVNN > 8); 0775
@RF00768 B     @DE00775                                            0775
@DL00775 DS    0H                                                  0776
*                        BMAP(1:1) = MASKALL; /*FULL BYTE            */
         L     @07,RSTOMAP(,REG6)                                  0776
         MVC   BMAP(1,@07),MASKALL                                 0776
*                        RSTOMAP = RSTOMAP + 1; /*NEXT BYTE          */
         AL    @07,@CF00212                                        0777
         ST    @07,RSTOMAP(,REG6)                                  0777
*                      END;                                        0778
*                                                                  0778
         L     @07,@CF03560                                        0778
         AH    @07,RSPVNN(,REG6)                                   0778
         STH   @07,RSPVNN(,REG6)                                   0778
@DE00775 LH    @07,RSPVNN(,REG6)                                   0778
         C     @07,@CF00175                                        0778
         BH    @DL00775                                            0778
*        /************************************************************/
*        /*                                                          */
*        /*     HANDLE LAST BYTE                                     */
*        /*                                                          */
*        /************************************************************/
*                                                                  0779
*                      BMAP(1:1) = BMAP(1:1) × MASKV1(RSPVNN:RSPVNN);
         L     @04,RSTOMAP(,REG6)                                  0779
         LA    @01,MASKV1-1(@07)                                   0779
         OC    BMAP(1,@04),0(@01)                                  0779
*                    END;                                          0780
*                END;                                              0781
@RC00759 DS    0H                                                  0782
*            END SETEXT;               /*END OF AN EXTENT            */
*                                                                  0782
@RC00756 LA    @07,1                                               0782
         AH    @07,RSPVTNEX(,REG6)                                 0782
@DE00752 STH   @07,RSPVTNEX(,REG6)                                 0782
         CH    @07,RSPVNEXT(,REG6)                                 0782
         BNH   @DL00752                                            0782
*        /************************************************************/
*        /*                                                          */
*        /*  TERMINATE - THE SET WAS DONE                            */
*        /*                                                          */
*        /************************************************************/
*                                                                  0783
*        IF GDTDBG = NULLPTR                                       0783
*          THEN;                                                   0783
@RT00750 DS    0H                                                  0783
@RC00729 L     @07,GDTDBG(,REG5)                                   0783
         LTR   @07,@07                                             0783
         BZ    @RT00783                                            0783
*          ELSE                                                    0785
*            CALL IDCDB010 (GDTTBL,'RSS3');                        0785
*                                                                  0785
         ST    REG5,@AL00001                                       0785
         LA    @07,@CC03561                                        0785
         ST    @07,@AL00001+4                                      0785
         MVI   @AL00001+4,X'80'                                    0785
         L     @15,GDTDBG(,REG5)                                   0785
         LA    @01,@AL00001                                        0785
         BALR  @14,@15                                             0785
*        RFY BMAP;                     /*REVERT                      */
@RT00783 DS    0H                                                  0787
*        RFY SNTTNN;                   /*REVERT                      */
*                                                                  0787
* CALL EXIT;  /*TERMINATE*/                                        0788
         BAL   @14,EXIT                                            0788
* END SETBITS; /*END OF PROCEDURE*/                                0789
@EL00011 DS    0H                                                  0789
@EF00011 DS    0H                                                  0789
@ER00011 BR    @14                                                 0789
@PB00011 DS    0H                                                  0790
*/********************************************************************/
*/* PROCEDURE NAME - SETBMAP                                         */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     SET THE BIT MAPS FOR A VOLUME GROUP OCCURRENCE.              */
*/*                                                                  */
*/*     IF THE VOLUME BEING PROCESSED IS THE SAME AS THE             */
*/*     CRA FOR THE DATA OR INDEX, IT STANDS A BETTER CHANCE         */
*/*     OF BEING CORRECT THAT A DATA OR INDEX ON ANOTHER CRA.        */
*/*     SUBALLOCATE FROM THE PRIME BIT MAP. IF THIS IS IN            */
*/*     CONFLICT WITH ANOTHER CLAIM IN THE PRIME MAP, MARK           */
*/*     THE VGO UNUSABLE, DELETE THE DSDIR, AND SET THE PRIMARY      */
*/*     AND SECONDARY CONFLICT MAPS.                                 */
*/*                                                                  */
*/*     IF THE VOLUME BEING PROCESSED IS NOT THE SAME AS THE CRA     */
*/*     FOR THE DATA OR INDEX, ENSURE THAT THE VGO IS NOT IN         */
*/*     CONFLICT WITH ITSELF (SECONDARY) OR PRIMARY REQUESTS.        */
*/*     IF IT IS, SET THE SECONDARY CONFLICT MAP, DELETE THE         */
*/*     DSDIR, AND MARK THE VGO UNUSABLE.                            */
*/*                                                                  */
*/*     NOTE - A SECOND PASS IS MADE BY VLRESET IF A                 */
*/*     CONFLICT OCCURRED, SO AS TO DELETE THOSE DSDIRS              */
*/*     PREVIOUSLY THOUGHT OF AS NOT IN CONFLICT. PRIMARY            */
*/*     CONFLICTS CAUSE ALL CONFLICTING REQUESTS TO BE DELETED.      */
*/*     SECONDARY CONFLICTS ONLY CAUSE CONFLICTING REQUESTS          */
*/*     FROM ANOTHER CRA TO BE DELETED.                              */
*/*                                                                  */
*/* INPUT -                                                          */
*/*     RSPVSNT3 - VGO SN TABLE                                      */
*/*     VOLSRSER - CURRENT VOLUME SERIAL NUMBER                      */
*/*     GRABRAB2->BUFFER FOR DATA OR INDEX                           */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*     RSPVRPC - ON=PRIMARY CONFLICT                                */
*/*     RSPVRSC - ON=SECONDARY CONFLICT                              */
*/*                                                                  */
*/********************************************************************/
*      GENERATE;                                                   0790
         DS    0F
NAME0058 DC    CL8'SETBMAP'
*SETBMAP: PROCEDURE                                                0791
*        OPTIONS(NOSAVE,NOSAVEAREA);                               0791
*                                                                  0791
         B     @PB00012                                            0791
SETBMAP  DS    0H                                                  0792
*      GENERATE REFS(RS03RG08, REG6);                              0792
*                                                                  0792
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         MVC   0(4,@15),NAME0058  PROCNAME TO REGSAVE
*        OLDERID2 = NEWERID2;                                      0793
         L     @07,GDTTR2(,REG5)                                   0793
         MVC   @TS00001(95),NEWERID2(@07)                          0793
         MVC   OLDERID2(95,@07),@TS00001                           0793
*        NEWID2 = 'RSSB';                                          0794
*                                                                  0794
         MVC   NEWID2(4,@07),@CC03566                              0794
*        /************************************************************/
*        /*                                                          */
*        /*                       INITIALIZE                         */
*        /*                                                          */
*        /************************************************************/
*                                                                  0795
*        RSPERROR = OFF;               /*RESET PRIMARY ERROR         */
*        RSSERROR = OFF;               /*RESET SECONDARY ERROR       */
*                                                                  0796
         NI    RSPERROR(REG6),B'11001111'                          0796
*        /************************************************************/
*        /*                                                          */
*        /*  MAP ALL OF THE VGOS FOR THE DSDIR BEING PROCESSED       */
*        /*                                                          */
*        /************************************************************/
*                                                                  0797
*        RSWASNVT = RSPVSNT3;          /*USE VGO SNTABLE             */
         L     @07,RSPVSNT3(,REG6)                                 0797
         ST    @07,RSWASNVT(,REG6)                                 0797
*        RSCSFAE = RSFAENT;            /*INITIAL MATCHING VGO SNTAB  */
         L     @04,RSFAENT(,@07)                                   0798
         ST    @04,RSCSFAE(,REG6)                                  0798
*        RSCSFCN = RSFCNDX;                                        0799
         LH    @07,RSFCNDX(,@07)                                   0799
         STH   @07,RSCSFCN(,REG6)                                  0799
*  SETBALLV:                                                       0800
*        DO RSFCNDX = RSFCNDX TO RSFHNDX;                          0800
SETBALLV L     @07,RSWASNVT(,REG6)                                 0800
         LH    @07,RSFCNDX(,@07)                                   0800
         B     @DE00800                                            0800
@DL00800 DS    0H                                                  0801
*          RSFAENT = RSFCADR + RSFENTLN * (RSFCNDX - 1);           0801
         L     @07,RSWASNVT(,REG6)                                 0801
         LH    @04,RSFCNDX(,@07)                                   0801
         BCTR  @04,0                                               0801
         LR    @01,@04                                             0801
         SLR   @04,@04                                             0801
         IC    @04,RSFENTLN(,@07)                                  0801
         MR    @00,@04                                             0801
         AL    @01,RSFCADR(,@07)                                   0801
         ST    @01,RSFAENT(,@07)                                   0801
*                                      /*VGO SNTAB ADDR              */
*          IF (SNVOLSER = RSCSFAE->SNVOLSER) &                     0802
*             (SDSDIRSN = RSCSFAE->SDSDIRSN) THEN                  0802
         L     @07,RSCSFAE(,REG6)                                  0802
         CLC   SNVOLSER(6,@01),SNVOLSER(@07)                       0802
         BNE   @RF00802                                            0802
         CLC   SDSDIRSN(2,@01),SDSDIRSN(@07)                       0802
         BNE   @RF00802                                            0802
*  SETBONEV:                                                       0803
*            DO;                                                   0803
*                                                                  0803
SETBONEV DS    0H                                                  0804
*        /************************************************************/
*        /*                                                          */
*        /*  TRANSLATE TRACK(S) REQUEST INTO SPACE MAP               */
*        /*                                                          */
*        /************************************************************/
*                                                                  0804
*              RSTGBMAP = RSWKBMAP;    /*SET IN WORKING MAP          */
         L     @07,RSWKBMAP(,REG6)                                 0804
         ST    @07,RSTGBMAP(,REG6)                                 0804
*              RSPVSETB = ''B;         /*CLEAR SETBITS OPTIONS       */
         MVI   RSPVSETB(REG6),X'00'                                0805
*              IF RSFCNDX = RSCSFCN THEN /*1ST MATCHING VGO ONLY     */
         L     @07,RSWASNVT(,REG6)                                 0806
         CLC   RSFCNDX(2,@07),RSCSFCN(REG6)                        0806
         BNE   @RF00806                                            0806
*                RSPVCLBM = ON;        /*CLEAR MAP BEFORE USING      */
         OI    RSPVCLBM(REG6),B'00100000'                          0807
*              CALL SETBITS;                                       0808
*                                                                  0808
@RF00806 BAL   @14,SETBITS                                         0808
*        /************************************************************/
*        /*                                                          */
*        /*  HANDLE PRIMARY CRA REQUESTS                             */
*        /*                                                          */
*        /************************************************************/
*                                                                  0809
*              IF VOLSRSER = ADDR(GRABRAB2->RABBUF)->RCDCRAVL THEN 0809
         L     @07,RSVTBENT(,REG6)                                 0809
         L     @04,RSGRABCU(,REG6)                                 0809
         L     @04,GRABRAB2(,@04)                                  0809
         CLC   VOLSRSER(6,@07),RCDCRAVL+8(@04)                     0809
         BNE   @RF00809                                            0809
*  SETBPRIM:                                                       0810
*                DO;                                               0810
*                                                                  0810
SETBPRIM DS    0H                                                  0811
*        /************************************************************/
*        /*                                                          */
*        /*     CHECK IF SPACE ALREADY ALLOCATED TO PRIMARY CRA      */
*        /*                                                          */
*        /************************************************************/
*                                                                  0811
*                  RSCKBMAP = RSPBMAP;                             0811
         L     @07,RSPBMAP(,REG6)                                  0811
         ST    @07,RSCKBMAP(,REG6)                                 0811
*                  RSCK1TO1 = ON;      /*1 SHOULD FIND 1             */
         OI    RSCK1TO1(REG6),B'00000001'                          0812
*                  CALL CHKBITS;                                   0813
         BAL   @14,CHKBITS                                         0813
*                  IF (RSCKBERR = ON) × (RSSETERR = ON) THEN       0814
         TM    RSCKBERR(REG6),B'00000010'                          0814
         BO    @RT00814                                            0814
         TM    RSSETERR(REG6),B'00001000'                          0814
         BNO   @RF00814                                            0814
@RT00814 DS    0H                                                  0815
*                    RSPERROR = ON;    /*PRIMARY ERROR               */
*                                                                  0815
         OI    RSPERROR(REG6),B'00100000'                          0815
*        /************************************************************/
*        /*                                                          */
*        /*     CHECK IF SPACE ALREADY IN CONFLICT WITH PRIMARY      */
*        /*                                                          */
*        /************************************************************/
*                                                                  0816
*                  ELSE                                            0816
*                    DO;                                           0816
         B     @RC00814                                            0816
@RF00814 DS    0H                                                  0817
*                      RSCKBMAP = RSPCBMAP;                        0817
         L     @07,RSPCBMAP(,REG6)                                 0817
         ST    @07,RSCKBMAP(,REG6)                                 0817
*                      RSCK1TO1 = OFF; /*1 SHOULD FIND 0             */
         NI    RSCK1TO1(REG6),B'11111110'                          0818
*                      CALL CHKBITS;                               0819
         BAL   @14,CHKBITS                                         0819
*                      IF RSCKBERR = ON THEN                       0820
         TM    RSCKBERR(REG6),B'00000010'                          0820
         BNO   @RF00820                                            0820
*                        RSPERROR = ON; /*PRIMARY ERROR              */
*                                                                  0821
         OI    RSPERROR(REG6),B'00100000'                          0821
*        /************************************************************/
*        /*                                                          */
*        /*     CHECK IF SPACE ALREADY ALLOCATED TO SECONDARY CRA    */
*        /*                                                          */
*        /************************************************************/
*                                                                  0822
*                      ELSE                                        0822
*                        DO;                                       0822
         B     @RC00820                                            0822
@RF00820 DS    0H                                                  0823
*                          RSCKBMAP = RSSBMAP;                     0823
         L     @07,RSSBMAP(,REG6)                                  0823
         ST    @07,RSCKBMAP(,REG6)                                 0823
*                          RSCK1TO1 = ON; /*1 SHOULD FIND 1          */
         OI    RSCK1TO1(REG6),B'00000001'                          0824
*                          CALL CHKBITS;                           0825
         BAL   @14,CHKBITS                                         0825
*                          IF RSCKBERR = ON THEN                   0826
         TM    RSCKBERR(REG6),B'00000010'                          0826
         BNO   @RF00826                                            0826
*                            RSSERROR = ON; /*SECONDARY ERROR        */
         OI    RSSERROR(REG6),B'00010000'                          0827
*                        END;                                      0828
*                    END;                                          0829
*                END SETBPRIM;                                     0830
*        /************************************************************/
*        /*                                                          */
*        /*  HANDLE SECONDARY CRA REQUESTS                           */
*        /*                                                          */
*        /************************************************************/
*                                                                  0831
*              ELSE                                                0831
*  SETBSEC:                                                        0831
*                DO;                                               0831
*                                                                  0831
         B     @RC00809                                            0831
@RF00809 DS    0H                                                  0831
SETBSEC  DS    0H                                                  0832
*        /************************************************************/
*        /*                                                          */
*        /*     CHECK IF SPACE ALREADY ALLOCATED TO PRIMARY CRA      */
*        /*                                                          */
*        /************************************************************/
*                                                                  0832
*                  RSCKBMAP = RSPBMAP;                             0832
         L     @07,RSPBMAP(,REG6)                                  0832
         ST    @07,RSCKBMAP(,REG6)                                 0832
*                  RSCK1TO1 = ON;      /*1 SHOULD FIND 1             */
         OI    RSCK1TO1(REG6),B'00000001'                          0833
*                  CALL CHKBITS;                                   0834
         BAL   @14,CHKBITS                                         0834
*                  IF (RSCKBERR = ON) × (RSSETERR = ON) THEN       0835
         TM    RSCKBERR(REG6),B'00000010'                          0835
         BO    @RT00835                                            0835
         TM    RSSETERR(REG6),B'00001000'                          0835
         BNO   @RF00835                                            0835
@RT00835 DS    0H                                                  0836
*                    RSSERROR = ON;    /*SECONDARY ERROR             */
*                                                                  0836
         OI    RSSERROR(REG6),B'00010000'                          0836
*        /************************************************************/
*        /*                                                          */
*        /*     CHECK IF SPACE ALREADY ALLOCATED TO SECONDARY CRA    */
*        /*                                                          */
*        /************************************************************/
*                                                                  0837
*                  ELSE                                            0837
*                    DO;                                           0837
         B     @RC00835                                            0837
@RF00835 DS    0H                                                  0838
*                      RSCKBMAP = RSSBMAP;                         0838
         L     @07,RSSBMAP(,REG6)                                  0838
         ST    @07,RSCKBMAP(,REG6)                                 0838
*                      RSCK1TO1 = ON;  /*1 SHOULD FIND 1             */
         OI    RSCK1TO1(REG6),B'00000001'                          0839
*                      CALL CHKBITS;                               0840
         BAL   @14,CHKBITS                                         0840
*                      IF RSCKBERR = ON THEN                       0841
         TM    RSCKBERR(REG6),B'00000010'                          0841
         BNO   @RF00841                                            0841
*                        RSSERROR = ON; /*SECONDARY ERROR            */
*                                                                  0842
         OI    RSSERROR(REG6),B'00010000'                          0842
*        /************************************************************/
*        /*                                                          */
*        /*     CHECK IF ALREADY IN CONFLICT WITH SECONDARY          */
*        /*                                                          */
*        /************************************************************/
*                                                                  0843
*                      ELSE                                        0843
*                        DO;                                       0843
         B     @RC00841                                            0843
@RF00841 DS    0H                                                  0844
*                          RSCKBMAP = RSSCBMAP;                    0844
         L     @07,RSSCBMAP(,REG6)                                 0844
         ST    @07,RSCKBMAP(,REG6)                                 0844
*                          RSCK1TO1 = OFF; /*1 SHOULD FIND 0         */
         NI    RSCK1TO1(REG6),B'11111110'                          0845
*                          CALL CHKBITS;                           0846
         BAL   @14,CHKBITS                                         0846
*                          IF RSCKBERR = ON THEN                   0847
         TM    RSCKBERR(REG6),B'00000010'                          0847
         BNO   @RF00847                                            0847
*                            RSSERROR = ON; /*SECONDARY ERROR        */
*                                                                  0848
         OI    RSSERROR(REG6),B'00010000'                          0848
*                        END;                                      0849
@RF00847 DS    0H                                                  0850
*                    END;                                          0850
@RC00841 DS    0H                                                  0851
*                END SETBSEC;                                      0851
@RC00835 DS    0H                                                  0852
*            END SETBONEV;                                         0852
@RC00809 DS    0H                                                  0853
*        END SETBALLV;                                             0853
@RF00802 L     @04,RSWASNVT(,REG6)                                 0853
         LA    @07,1                                               0853
         AH    @07,RSFCNDX(,@04)                                   0853
         L     @04,RSWASNVT(,REG6)                                 0853
         STH   @07,RSFCNDX(,@04)                                   0853
@DE00800 L     @04,RSWASNVT(,REG6)                                 0853
         CH    @07,RSFHNDX(,@04)                                   0853
         BNH   @DL00800                                            0853
*        /************************************************************/
*        /*                                                          */
*        /*  RESTORE FIRST MATCHING VGO                              */
*        /*                                                          */
*        /************************************************************/
*                                                                  0854
*        RSFAENT = RSCSFAE;                                        0854
         L     @07,RSWASNVT(,REG6)                                 0854
         L     @04,RSCSFAE(,REG6)                                  0854
         ST    @04,RSFAENT(,@07)                                   0854
*        RSFCNDX = RSCSFCN;                                        0855
         LH    @04,RSCSFCN(,REG6)                                  0855
         STH   @04,RSFCNDX(,@07)                                   0855
*        /************************************************************/
*        /*                                                          */
*        /*   SUBALLOCATE THE SPACE FOR ALL VGOS IN THE PRIMARY      */
*        /*    CRA IF THERE WAS NO ERROR.                            */
*        /*                                                          */
*        /************************************************************/
*                                                                  0856
*        IF VOLSRSER = ADDR(GRABRAB2->RABBUF)->RCDCRAVL THEN       0856
         L     @07,RSVTBENT(,REG6)                                 0856
         L     @04,RSGRABCU(,REG6)                                 0856
         L     @04,GRABRAB2(,@04)                                  0856
         CLC   VOLSRSER(6,@07),RCDCRAVL+8(@04)                     0856
         BNE   @RF00856                                            0856
*          IF RSPERROR = OFF THEN                                  0857
         TM    RSPERROR(REG6),B'00100000'                          0857
         BNZ   @RF00857                                            0857
*            DO;                                                   0858
*              RSPVSETB = ''B;         /*CLEAR SETBITS OPTIOSN       */
         MVI   RSPVSETB(REG6),X'00'                                0859
*              RSSETMAP = ON;          /*SUBALLOCATE TRACKS          */
*              RSST1TO1 = OFF;         /*BY SETTING BIT OFF IN MAP   */
         OI    RSSETMAP(REG6),B'01000000'                          0861
         NI    RSST1TO1(REG6),B'11101111'                          0861
*              RSTGBMAP = RSPBMAP;     /*SUBALLOCATE PRIMARY         */
         L     @07,RSPBMAP(,REG6)                                  0862
         ST    @07,RSTGBMAP(,REG6)                                 0862
*              RSSTBMAP = RSWKBMAP;    /*TRACKS TO BE ALLOCATED      */
         L     @07,RSWKBMAP(,REG6)                                 0863
         ST    @07,RSSTBMAP(,REG6)                                 0863
*              CALL SETBITS;                                       0864
         BAL   @14,SETBITS                                         0864
*            END;                                                  0865
*          ELSE;                       /*ERROR NO SUBALLOCATION      */
*                                                                  0866
@RF00857 DS    0H                                                  0867
*        /************************************************************/
*        /*                                                          */
*        /*   SUBALLOCATE THE SPACE FOR ALL VGOS IN THE SECONDARY    */
*        /*    CRA IF THERE WAS NO ERROR.                            */
*        /*                                                          */
*        /************************************************************/
*                                                                  0867
*        ELSE                                                      0867
*          IF (RSPERROR = OFF) & (RSSERROR = OFF) THEN             0867
         B     @RC00856                                            0867
@RF00856 TM    RSPERROR(REG6),B'00110000'                          0867
         BNZ   @RF00867                                            0867
*            DO;                                                   0868
*              RSPVSETB = ''B;         /*CLEAR SETBITS OPTIOSN       */
         MVI   RSPVSETB(REG6),X'00'                                0869
*              RSSETMAP = ON;          /*SUBALLOCATE TRACKS          */
*              RSST1TO1 = OFF;         /*BY SETTING BIT OFF IN MAP   */
         OI    RSSETMAP(REG6),B'01000000'                          0871
         NI    RSST1TO1(REG6),B'11101111'                          0871
*              RSTGBMAP = RSSBMAP;     /*SUBALLOCATE SECONDARY      */
         L     @07,RSSBMAP(,REG6)                                  0872
         ST    @07,RSTGBMAP(,REG6)                                 0872
*              RSSTBMAP = RSWKBMAP;    /*TRACKS TO BE ALLOCATED      */
         L     @07,RSWKBMAP(,REG6)                                 0873
         ST    @07,RSSTBMAP(,REG6)                                 0873
*              CALL SETBITS;                                       0874
         BAL   @14,SETBITS                                         0874
*            END;                                                  0875
*                                                                  0875
*        /************************************************************/
*        /*                                                          */
*        /*  PRIMARY ERROR - SET PRIMARY CONFLICT MAP                */
*        /*                                                          */
*        /************************************************************/
*                                                                  0876
*        IF RSPERROR = ON THEN                                     0876
@RF00867 DS    0H                                                  0876
@RC00856 TM    RSPERROR(REG6),B'00100000'                          0876
         BNO   @RF00876                                            0876
*          DO;                                                     0877
*            RSTGBMAP = RSPCBMAP;                                  0878
         L     @07,RSPCBMAP(,REG6)                                 0878
         ST    @07,RSTGBMAP(,REG6)                                 0878
*            RSPVSETB = ''B;           /*CLEAR SETBITS OPTIONS       */
         MVI   RSPVSETB(REG6),X'00'                                0879
*            CALL SETBITS;                                         0880
         BAL   @14,SETBITS                                         0880
*            RSPVRPC = ON;             /*PRIMARY CONFLICT            */
         OI    RSPVRPC(REG6),B'00001000'                           0881
*          END;                                                    0882
*                                                                  0882
*        /************************************************************/
*        /*                                                          */
*        /*  PRIMARY OR SECONDARY ERROR                              */
*        /*                                                          */
*        /************************************************************/
*                                                                  0883
*        IF RSPERROR = ON × RSSERROR = ON THEN                     0883
@RF00876 TM    RSPERROR(REG6),B'00110000'                          0883
         BZ    @RF00883                                            0883
*          DO;                                                     0884
*                                                                  0884
*        /************************************************************/
*        /*                                                          */
*        /*     SET SECONDARY CONFLICT                               */
*        /*                                                          */
*        /************************************************************/
*                                                                  0885
*            RSTGBMAP = RSSCBMAP;                                  0885
         L     @07,RSSCBMAP(,REG6)                                 0885
         ST    @07,RSTGBMAP(,REG6)                                 0885
*            RSPVSETB = ''B;           /*CLEAR SETBITS OPTIONS       */
         MVI   RSPVSETB(REG6),X'00'                                0886
*            CALL SETBITS;                                         0887
         BAL   @14,SETBITS                                         0887
*            RSPVRSC = ON;             /*SECONDARY CONFLICT          */
*                                                                  0888
         OI    RSPVRSC(REG6),B'00000100'                           0888
*        /************************************************************/
*        /*                                                          */
*        /*     NO DELETE IF PRIMARY CRA AND SECONDARY CONFLICT      */
*        /*                                                          */
*        /************************************************************/
*                                                                  0889
*            IF (VOLSRSER = ADDR(GRABRAB2->RABBUF)->RCDCRAVL) &    0889
*             (RSSERROR = ON) THEN;                                0889
*                                                                  0889
         L     @07,RSVTBENT(,REG6)                                 0889
         L     @04,RSGRABCU(,REG6)                                 0889
         L     @04,GRABRAB2(,@04)                                  0889
         CLC   VOLSRSER(6,@07),RCDCRAVL+8(@04)                     0889
         BNE   @RF00889                                            0889
         TM    RSSERROR(REG6),B'00010000'                          0889
         BO    @RT00889                                            0889
*        /************************************************************/
*        /*                                                          */
*        /*     INDICATE DELETE THE DSDIR                            */
*        /*                                                          */
*        /************************************************************/
*                                                                  0891
*            ELSE                                                  0891
*              DO;                                                 0891
@RF00889 DS    0H                                                  0892
*                RSPVDELT = ON;                                    0892
*                                                                  0892
         OI    RSPVDELT(REG6),B'00100000'                          0892
*        /************************************************************/
*        /*                                                          */
*        /*     INDICATE MARK THE VGO UNUSABLE                       */
*        /*                                                          */
*        /************************************************************/
*                                                                  0893
*                RSMUNUS = ON;                                     0893
         OI    RSMUNUS(REG6),B'10000000'                           0893
*              END;                                                0894
*                                                                  0894
*          END;                                                    0895
*                                                                  0895
*                                                                  0895
@RT00889 DS    0H                                                  0896
* CALL EXIT;  /*TERMINATE*/                                        0896
@RF00883 BAL   @14,EXIT                                            0896
* END SETBMAP; /*END OF PROCEDURE*/                                0897
@EL00012 DS    0H                                                  0897
@EF00012 DS    0H                                                  0897
@ER00012 BR    @14                                                 0897
@PB00012 DS    0H                                                  0898
*/********************************************************************/
*/*                                                                  */
*/* PROCEDURE - VERB                                                 */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     VERIFY GDG DATA SETS. RECONSTRUCT THE GDG LEVEL DIFFERENCE   */
*/*     STRING.                                                      */
*/*     NOTE *** THIS PROCEDURE IS AN EXTENSION OF THE               */
*/*     VERIFY ROUTINES IN IDCRS02.                                  */
*/*                                                                  */
*/* INPUT -                                                          */
*/*     CI TABLE AND DI TABLE FOR THE GDG BASE                       */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*     GDG LEVEL DIFFERENCE STRING VERIFIED                         */
*/*     DITFAVER - ALL ASSOCIATIONS VERIFIED                         */
*/*                                                                  */
*/* MESSAGES -                                                       */
*/*     IDC21025I - SOME GDG ASSOCIATION OR LEVEL DIFFERENCE STRING  */
*/*                 WAS ALTERED.                                     */
*/*     IDC21032I - SOME GDG DATA SET COULD NOT BE FOUND             */
*/*                                                                  */
*/********************************************************************/
*      GENERATE;                                                   0898
         DS    0F
NAME0071 DC    CL8'VERB'
*VERB: PROCEDURE                                                   0899
*        OPTIONS(NOSAVE,NOSAVEAREA);                               0899
*                                                                  0899
         B     @PB00013                                            0899
VERB     DS    0H                                                  0900
*      GENERATE REFS(RS03RG08, REG6);                              0900
*                                                                  0900
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         ENTRY VERB  ENTRY POINT
         LM    @08,@12,RS03RG08(REG6)  PRIME BASE AND DATA REGS
         MVC   0(4,@15),NAME0071  PROCNAME TO REGSAVE
*        OLDERID2 = NEWERID2;                                      0901
         L     @07,GDTTR2(,REG5)                                   0901
         MVC   @TS00001(95),NEWERID2(@07)                          0901
         MVC   OLDERID2(95,@07),@TS00001                           0901
*        NEWID2 = 'RSVB';                                          0902
*                                                                  0902
         MVC   NEWID2(4,@07),@CC03579                              0902
*        /************************************************************/
*        /*                                                          */
*        /* MARK THE GDG BASE AS VERIFIED                            */
*        /*                                                          */
*        /************************************************************/
*                                                                  0903
*        PTCITF->CITFAVER = ON;        /*MARK VERIFIED               */
*                                                                  0903
         L     @07,RSPTWKC(,REG6)                                  0903
         L     @04,PTCITF(,@07)                                    0903
         OI    CITFAVER(@04),B'01000000'                           0903
*        /************************************************************/
*        /*                                                          */
*        /*     SAVE THE BASE NAME AND LENGTH                        */
*        /*                                                          */
*        /************************************************************/
*                                                                  0904
*        GRABCURR=RABARRAY(ADDR(PTASSOC->TASSEN(1))->TASSRAB);     0904
         L     @04,RSGRABCU(,REG6)                                 0904
         L     @07,PTASSOC(,@07)                                   0904
         LA    @07,TASSEN(,@07)                                    0904
         LH    @07,TASSRAB(,@07)                                   0904
         SLA   @07,2                                               0904
         L     @07,RABARRAY-4(@07,@04)                             0904
         ST    @07,GRABCURR(,@04)                                  0904
*                                      /*GDG BUFFER                  */
*        RSGDGLN = 0;                                              0905
         SLR   @07,@07                                             0905
         STH   @07,RSGDGLN(,REG6)                                  0905
*        DO RSGDGLN = 1 TO (LENGTH(RSGDGNM) - LENGTH(G0000V00))    0906
*         WHILE(CNAME(RSGDGLN:RSGDGLN) ^= ' ');                    0906
         LA    @07,1                                               0906
         STH   @07,RSGDGLN(,REG6)                                  0906
@DL00906 LH    @07,RSGDGLN(,REG6)                                  0906
         L     @04,RSGRABCU(,REG6)                                 0906
         LA    @15,8                                               0906
         AL    @15,GRABCURR(,@04)                                  0906
         ALR   @07,@15                                             0906
         CLI   CNAME-1(@07),C' '                                   0906
         BE    @DC00906                                            0906
*          RSGDGNM(RSGDGLN:RSGDGLN) = CNAME(RSGDGLN:RSGDGLN);      0907
         LH    @07,RSGDGLN(,REG6)                                  0907
         ALR   @07,REG6                                            0907
         LH    @04,RSGDGLN(,REG6)                                  0907
         ALR   @15,@04                                             0907
         MVC   RSGDGNM-1(1,@07),CNAME-1(@15)                       0907
*        END;                                                      0908
         LA    @07,1                                               0908
         AH    @07,RSGDGLN(,REG6)                                  0908
         STH   @07,RSGDGLN(,REG6)                                  0908
         C     @07,@CF00848                                        0908
         BNH   @DL00906                                            0908
@DC00906 DS    0H                                                  0909
*        RSGDGLN = RSGDGLN - 1;        /*TRUE LENGTH OF BASE NAME    */
*                                                                  0909
         LH    @07,RSGDGLN(,REG6)                                  0909
         BCTR  @07,0                                               0909
         STH   @07,RSGDGLN(,REG6)                                  0909
*        /************************************************************/
*        /*                                                          */
*        /*       PROCESS ALL GDG DATA SET ENTRIES                   */
*        /*                                                          */
*        /************************************************************/
*                                                                  0910
*  VERBNONV:                                                       0910
*        DO PTCITNC = PTCITI TO PTCITL;                            0910
VERBNONV L     @07,RSPTWKC(,REG6)                                  0910
         L     @07,PTCITI-1(,@07)                                  0910
         LA    @07,0(,@07)                                         0910
         B     @DE00910                                            0910
@DL00910 DS    0H                                                  0911
*          RSTANCHR = ADDR(RSGCITS);     /*SCAN CITABE FOR GDG D.S.  */
         LA    @07,RSGCITS(,REG6)                                  0911
         ST    @07,RSTANCHR(,REG6)                                 0911
*          RSTENTIX = PTCITNC;                                     0912
         L     @07,RSPTWKC(,REG6)                                  0912
         MVC   RSTENTIX(3,REG6),PTCITNC(@07)                       0912
*          CALL GETNEXTE;                                          0913
         BAL   @14,GETNEXTE                                        0913
*                                      /*GET NEXT CITABE             */
*          PTCITCUR = RSTENTAD;             /*SAVE CITABE ADDRESS    */
*                                                                  0914
         L     @07,RSPTWKC(,REG6)                                  0914
         L     @04,RSTENTAD(,REG6)                                 0914
         ST    @04,PTCITCUR(,@07)                                  0914
*        /************************************************************/
*        /*                                                          */
*        /*       GDG DATA SET FOUND - READ THE NON-VSAM RECORD      */
*        /*       IF RECORD INVALID, ISSUE MESSAGE IDC21032I         */
*        /*                                                          */
*        /************************************************************/
*                                                                  0915
*          IF CITTYPE = NVID THEN                                  0915
         CLI   CITTYPE(@04),C'A'                                   0915
         BNE   @RF00915                                            0915
*            DO;                                                   0916
*              IF CITFAINV = OFF THEN  /*PROCESS VALID RECORDS       */
         TM    CITFAINV(@04),B'00000010'                           0917
         BNZ   @RF00917                                            0917
*                DO;                                               0918
*                  RSASSTBL = ADDR(ASSO3A);  /*GDG DATA SET ASSOC TBL*/
         L     @15,@CA03480                                        0919
         ST    @15,RSASSTBL(,REG6)                                 0919
*                  PTASSCUR=ADDR(RSASSTBL->TASSEN(1)); /*GDG DATA SET*/
         LA    @15,TASSEN(,@15)                                    0920
         ST    @15,PTASSCUR(,@07)                                  0920
*                  GRABCURR = RABARRAY(TASSRAB); /*BUFFER ADDR       */
*                                                                  0921
         L     @14,RSGRABCU(,REG6)                                 0921
         LH    @15,TASSRAB(,@15)                                   0921
         SLA   @15,2                                               0921
         L     @15,RABARRAY-4(@15,@14)                             0921
         ST    @15,GRABCURR(,@14)                                  0921
*                  DO;                                             0922
*                    RSRTYPE = ''B;                                0923
         MVI   RSRTYPE(REG6),X'00'                                 0923
*                    RSRGET = ON;      /* GETRCD  */               0924
         OI    RSRGET(REG6),B'10000000'                            0924
*                    RSRUPD = ON;      /* UPDATE  */               0925
         OI    RSRUPD(REG6),B'00001000'                            0925
*                    RSRDS = ''B;                                  0926
         NI    RSRDS(REG6),B'00011111'                             0926
*                    RSRWF = ON;       /* WORKFILE  */             0927
*                    RSRDIR = ON;      /* DIRECT  */               0928
*                    RSRKEY = ON;      /* KEY  */                  0929
         OI    RSRWF(REG6),B'10010100'                             0929
*                    RSVIAFCR = ON;  /*INDICATE CRA SEARCH*/       0930
         OI    RSVIAFCR(REG6),B'10000000'                          0930
*                    RSVIACRA = PTCRAVL; /*SET VOLSER */           0931
         MVC   RSVIACRA(6,REG6),PTCRAVL(@07)                       0931
*                    RSVIACIN = CITCIN; /*SET CI NUMBER */         0932
*                                                                  0932
         MVC   RSVIACIN(3,REG6),CITCIN(@04)                        0932
*                  /* CALL TO MODULE IDCRS05 FOR PROCEDURE GETVIA    */
*                  CALL GETVIA;                                    0933
         L     @15,@CV03436                                        0933
         BALR  @14,@15                                             0933
*                  END;                                            0934
*                END;                                              0935
*              IF CITFAINV=ON × RABNRF=ON × CITTYPE^=RCDID THEN    0936
@RF00917 L     @07,RSPTWKC(,REG6)                                  0936
         L     @07,PTCITCUR(,@07)                                  0936
         TM    CITFAINV(@07),B'00000010'                           0936
         BO    @RT00936                                            0936
         L     @04,RSGRABCU(,REG6)                                 0936
         L     @04,GRABCURR(,@04)                                  0936
         TM    RABNRF(@04),B'00000010'                             0936
         BO    @RT00936                                            0936
         CLC   CITTYPE(1,@07),RCDID+8(@04)                         0936
         BE    @RF00936                                            0936
@RT00936 DS    0H                                                  0937
*                                      /*NO RCD FOUND OR BAD TYPE    */
*                DO;                                               0937
*                  RABNRF = OFF;       /*RESET NO RCD FOUND          */
         L     @07,RSGRABCU(,REG6)                                 0938
         L     @07,GRABCURR(,@07)                                  0938
         NI    RABNRF(@07),B'11111101'                             0938
*                  CITFAINV = ON;      /*MARK INVALID                */
*                                                                  0939
         L     @07,RSPTWKC(,REG6)                                  0939
         L     @04,PTCITCUR(,@07)                                  0939
         OI    CITFAINV(@04),B'00000010'                           0939
*                  DO;                                             0940
*                  /*CALL CKERR*/                                  0941
*                    RSCKERR = RSCKERR && RSCKERR;                 0941
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      0941
*                    RSCKERN = RSE042;                             0942
         MVC   RSCKERN(2,REG6),@CH00971                            0942
*                    RSCKTERM = 'RETU';                            0943
         MVC   RSCKTERM(4,REG6),@CC03500                           0943
*                    RSCKMVAR(1) = ADDR(NVID);                     0944
         LA    @04,@CC00808                                        0944
         ST    @04,RSCKMVAR(,REG6)                                 0944
*                    RSCKMVAR(2) = ADDR(PTBASE->CNAME);            0945
         L     @07,PTBASE(,@07)                                    0945
         LA    @07,CNAME(,@07)                                     0945
         ST    @07,RSCKMVAR+4(,REG6)                               0945
*                    RSCKMVAR(3) = ADDR(GDGID);                    0946
*                                                                  0946
         LA    @07,@CC00810                                        0946
         ST    @07,RSCKMVAR+8(,REG6)                               0946
*                  /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR     */
*                  CALL CKERR;                                     0947
         L     @15,@CV03443                                        0947
         BALR  @14,@15                                             0947
*                  END;                                            0948
*                END;                                              0949
*                                                                  0949
*        /************************************************************/
*        /*                                                          */
*        /*       IF NON-VSAM READ, PROCESS IT                       */
*        /*       IF NON-VSAM ALREADY PROCESSED, DON'T               */
*        /*         TRY IT AGAIN.                                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  0950
*              ELSE                                                0950
*                IF RSWASSCK = OFF THEN                            0950
         B     @RC00936                                            0950
@RF00936 L     @07,RSGRABCU(,REG6)                                 0950
         L     @07,GRABCURR(,@07)                                  0950
         TM    RSWASSCK(@07),B'00000010'                           0950
         BNZ   @RF00950                                            0950
*                  /* CALL TO MODULE IDCRS02 FOR PROCEDURE PROCTYPE  */
*                  CALL PROCTYPE;                                  0951
         L     @15,@CV03431                                        0951
         BALR  @14,@15                                             0951
*            END;                                                  0952
@RF00950 DS    0H                                                  0952
@RC00936 DS    0H                                                  0953
*        END VERBNONV;                                             0953
@RF00915 L     @04,RSPTWKC(,REG6)                                  0953
         LA    @07,1                                               0953
         L     @04,PTCITNC-1(,@04)                                 0953
         LA    @04,0(,@04)                                         0953
         ALR   @07,@04                                             0953
@DE00910 L     @04,RSPTWKC(,REG6)                                  0953
         STCM  @07,7,PTCITNC(@04)                                  0953
         L     @04,RSPTWKC(,REG6)                                  0953
         L     @04,PTCITL-1(,@04)                                  0953
         LA    @04,0(,@04)                                         0953
         CR    @07,@04                                             0953
         BNH   @DL00910                                            0953
*        /************************************************************/
*        /*                                                          */
*        /*     RECONSTRUCT GDG GENLEVELS                            */
*        /*                                                          */
*        /************************************************************/
*                                                                  0954
*        /************************************************************/
*        /*                                                          */
*        /*       GET WORK AREA FOR LEVEL DIFFERENCE STRING          */
*        /*                                                          */
*        /************************************************************/
*                                                                  0954
*        GRABCURR = RABARRAY(ADDR(PTASSOC->TASSEN(1))->TASSRAB);   0954
         L     @07,RSGRABCU(,REG6)                                 0954
         L     @04,RSPTWKC(,REG6)                                  0954
         L     @04,PTASSOC(,@04)                                   0954
         LA    @04,TASSEN(,@04)                                    0954
         LH    @04,TASSRAB(,@04)                                   0954
         SLA   @04,2                                               0954
         L     @04,RABARRAY-4(@04,@07)                             0954
         ST    @04,GRABCURR(,@07)                                  0954
*                                      /*GDG BASE RECORD BUFFER      */
*        CALL CATRCDSU;            /*SET UP COMMON RCD PTRS      */
         BAL   @14,CATRCDSU                                        0955
*        RSGDGLL = LENGTH(GDGLDS) + (GDGLIMIT+1)*LENGTH(GDGENT);   0956
         L     @07,RSCPE1(,REG6)                                   0956
         LA    @04,1                                               0956
         SLR   @15,@15                                             0956
         IC    @15,GDGLIMIT(,@07)                                  0956
         ALR   @04,@15                                             0956
         ALR   @04,@04                                             0956
         AL    @04,@CF00215                                        0956
         ST    @04,RSGDGLL(,REG6)                                  0956
*                                      /*LEVEL DIFFERENCE WORK AREA  */
*        CALL IDCSAGP0(GDTTBL,RSGDGLL,RSGDGTB,POOL12,SETZERO);     0957
         ST    REG5,@AL00001                                       0957
         LA    @07,RSGDGLL(,REG6)                                  0957
         ST    @07,@AL00001+4                                      0957
         LA    @07,RSGDGTB(,REG6)                                  0957
         ST    @07,@AL00001+8                                      0957
         LA    @07,@CC00907                                        0957
         ST    @07,@AL00001+12                                     0957
         LA    @07,SETZERO                                         0957
         ST    @07,@AL00001+16                                     0957
         MVI   @AL00001+16,X'80'                                   0957
         L     @15,GDTGPL(,REG5)                                   0957
         LA    @01,@AL00001                                        0957
         BALR  @14,@15                                             0957
*        RESPECIFY RTNREG RSTD;                                    0958
*        TESTRC = RTNREG;                                          0959
         STH   RTNREG,TESTRC(,REG6)                                0959
*        RESPECIFY RTNREG UNRSTD;                                  0960
*        IF TESTRC ^= 0 THEN                                       0961
*                                                                  0961
         LH    @07,TESTRC(,REG6)                                   0961
         LTR   @07,@07                                             0961
         BZ    @RF00961                                            0961
*          DO;                                                     0962
*          /*CALL CKERR*/                                          0963
*            RSCKERR = RSCKERR && RSCKERR;                         0963
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      0963
*            RSCKERN = RSE099;                                     0964
         MVC   RSCKERN(2,REG6),@CH01078                            0964
*            RSCKTERM = 'TERM';                                    0965
*                                                                  0965
         MVC   RSCKTERM(4,REG6),@CC03527                           0965
*          /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR             */
*          CALL CKERR;                                             0966
         L     @15,@CV03443                                        0966
         BALR  @14,@15                                             0966
*          END;                                                    0967
*                                      /*INSUFFICIENT STORAGE        */
*                                                                  0968
*        /************************************************************/
*        /*                                                          */
*        /*       INITIALIZE UPPER LIMIT ON NO. OF GEN LEVELS        */
*        /*                                                          */
*        /************************************************************/
*                                                                  0968
*        GDGLMT = GDGLIMIT;                                        0968
*                                                                  0968
@RF00961 L     @07,RSGDGTB(,REG6)                                  0968
         L     @04,RSCPE1(,REG6)                                   0968
         SLR   @15,@15                                             0968
         IC    @15,GDGLIMIT(,@04)                                  0968
         STH   @15,GDGLMT(,@07)                                    0968
*        /************************************************************/
*        /*                                                          */
*        /*       DETERMINE IF WRAP AROUND FROM CURRENT STRING       */
*        /*                                                          */
*        /************************************************************/
*                                                                  0969
*        DO PTINDX3 = 1 TO VARLEN WHILE(GDGLVL(PTINDX3) ^= GLEND); 0969
         LA    @07,1                                               0969
         B     @DE00969                                            0969
@DL00969 L     @07,RSPTWKC(,REG6)                                  0969
         LH    @07,PTINDX3(,@07)                                   0969
         L     @04,RSCPE7(,REG6)                                   0969
         SLR   @15,@15                                             0969
         IC    @15,GDGLVL-1(@07,@04)                               0969
         C     @15,@CF00619                                        0969
         BE    @DC00969                                            0969
*          IF GDGLVL(PTINDX3)>GLBLOCK THEN /*LARGE GAP               */
         LA    @07,200                                             0970
         CR    @15,@07                                             0970
         BNH   @RF00970                                            0970
*            GDGVAL = GDGVAL + (GDGLVL(PTINDX3) - GLBLOCK)*GLBLOCK;
         L     @04,RSGDGTB(,REG6)                                  0971
         SLR   @15,@07                                             0971
         MR    @14,@07                                             0971
         AL    @15,GDGVAL(,@04)                                    0971
         ST    @15,GDGVAL(,@04)                                    0971
*          ELSE                                                    0972
*            GDGVAL = GDGVAL + GDGLVL(PTINDX3); /*GET TRUE LEVEL     */
         B     @RC00970                                            0972
@RF00970 L     @07,RSGDGTB(,REG6)                                  0972
         L     @04,RSPTWKC(,REG6)                                  0972
         LH    @04,PTINDX3(,@04)                                   0972
         L     @01,RSCPE7(,REG6)                                   0972
         SLR   @00,@00                                             0972
         IC    @00,GDGLVL-1(@04,@01)                               0972
         AL    @00,GDGVAL(,@07)                                    0972
         ST    @00,GDGVAL(,@07)                                    0972
*          IF GDGVAL=>WRPLIMIT THEN /*CHK FOR POSSIBLE WRAP          */
@RC00970 L     @07,RSGDGTB(,REG6)                                  0973
         L     @04,GDGVAL(,@07)                                    0973
         C     @04,@CF00757                                        0973
         BL    @RF00973                                            0973
*            GDGWRAP = ON; /*IND POSSIBLE WRAP                       */
         OI    GDGWRAP(@07),B'10000000'                            0974
*        END;                                                      0975
*                                                                  0975
@RF00973 L     @04,RSPTWKC(,REG6)                                  0975
         LA    @07,1                                               0975
         AH    @07,PTINDX3(,@04)                                   0975
@DE00969 L     @04,RSPTWKC(,REG6)                                  0975
         STH   @07,PTINDX3(,@04)                                   0975
         L     @04,RSCPE7(,REG6)                                   0975
         ICM   @04,12,VARLEN(@04)                                  0975
         SRA   @04,16                                              0975
         CR    @07,@04                                             0975
         BNH   @DL00969                                            0975
@DC00969 DS    0H                                                  0976
*        /************************************************************/
*        /*                                                          */
*        /*       PROCESS ALL GDG DATA SETS                          */
*        /*                                                          */
*        /************************************************************/
*                                                                  0976
*        PTF1END = OFF;                /*MORE ASSOCIATIONS           */
*        PTF1OK = ON;                  /*ASSUME LEVELS OK            */
         L     @07,RSPTWKC(,REG6)                                  0977
         OI    PTF1OK(@07),B'00100000'                             0977
         NI    PTF1END(@07),B'11111011'                            0977
*        PTLOC = PTLOC && PTLOC;                                   0978
         XC    PTLOC(20,@07),PTLOC(@07)                            0978
*        PTLBCITX = PTCITI;            /*SCAN GDG BASE               */
         MVC   PTLBCITX(3,@07),PTCITI(@07)                         0979
*        PTLFBAS1 = ON;                /*FOR ASSOCIATIONS            */
         OI    PTLFBAS1(@07),B'00100000'                           0980
*        PTLDITID = NVID;              /*TO ALIENS                   */
         MVI   PTLDITID(@07),C'A'                                  0981
*  GDGINSLP:                                                       0982
*        DO UNTIL (PTF1END=ON);        /*SCAN ALL ASSOCIATIONS       */
GDGINSLP DS    0H                                                  0982
@DL00982 DS    0H                                                  0983
*          /* CALL TO MODULE IDCRS02 FOR PROCEDURE LOCDIT            */
*          CALL LOCDIT;                                            0983
         L     @15,@CV03432                                        0983
         BALR  @14,@15                                             0983
*          IF PTLCDIT = 0 THEN         /*NO MORE ASSOCIATIONS        */
         L     @07,RSPTWKC(,REG6)                                  0984
         L     @04,PTLCDIT(,@07)                                   0984
         LTR   @04,@04                                             0984
         BNZ   @RF00984                                            0984
*            PTF1END = ON;                                         0985
*                                                                  0985
         OI    PTF1END(@07),B'00000100'                            0985
*        /************************************************************/
*        /*                                                          */
*        /*       NOTE BAD ASSOCIATION                               */
*        /*                                                          */
*        /************************************************************/
*                                                                  0986
*          ELSE                                                    0986
*            IF PTLCDIT->DITFAVER = OFF THEN                       0986
         B     @RC00984                                            0986
@RF00984 L     @07,RSPTWKC(,REG6)                                  0986
         L     @04,PTLCDIT(,@07)                                   0986
         TM    DITFAVER(@04),B'01000000'                           0986
         BNZ   @RF00986                                            0986
*              PTF1OK = OFF;                                       0987
*                                                                  0987
         NI    PTF1OK(@07),B'11011111'                             0987
*        /************************************************************/
*        /*                                                          */
*        /*       INSERT LEVEL                                       */
*        /*                                                          */
*        /************************************************************/
*                                                                  0988
*            ELSE                                                  0988
*              DO;                                                 0988
         B     @RC00986                                            0988
@RF00986 DS    0H                                                  0989
*                PACK(GDGPAK,PTLCDIT->DITDGML); /*CNVT LVL TO BINARY */
         L     @07,RSGDGTB(,REG6)                                  0989
         L     @04,RSPTWKC(,REG6)                                  0989
         L     @04,PTLCDIT(,@04)                                   0989
         PACK  GDGPAK(8,@07),DITDGML(4,@04)                        0989
*                CVB(GDGVAL,GDGPAK);                               0990
         CVB   @15,GDGPAK(,@07)                                    0990
         ST    @15,GDGVAL(,@07)                                    0990
*                IF PTLCDIT->DITDGML(1:1) = DIG0 & GDGWRAP=ON THEN 0991
         CLI   DITDGML(@04),C'0'                                   0991
         BNE   @RF00991                                            0991
         TM    GDGWRAP(@07),B'10000000'                            0991
         BNO   @RF00991                                            0991
*                                      /*GEN LVL WRAP AROUND         */
*                  GDGVAL = GDGVAL + WRAPVAL; /*WRAP LEVEL AROUND    */
*                                                                  0992
         AL    @15,@CF00759                                        0992
         ST    @15,GDGVAL(,@07)                                    0992
*        /************************************************************/
*        /*                                                          */
*        /*       FIND POINT OF INSERTION                            */
*        /*                                                          */
*        /************************************************************/
*                                                                  0993
*                IF GDGCNT = 0 THEN    /*1ST LEVEL                   */
@RF00991 L     @07,RSGDGTB(,REG6)                                  0993
         LH    @04,GDGCNT(,@07)                                    0993
         LTR   @04,@04                                             0993
         BNZ   @RF00993                                            0993
*                  DO;                                             0994
*                    GDGLVLT(1) = GDGVAL; /* NEW LEVEL               */
         L     @04,GDGVAL(,@07)                                    0995
         STH   @04,GDGLVLT(,@07)                                   0995
*                    GDGLVLT(2) = MAXGDGLV; /*FORCE INSERT FOR REST  */
         MVC   GDGLVLT+2(2,@07),@CH00755                           0996
*                    GDGCNT = 1;       /* 1ST LEVEL                  */
         MVC   GDGCNT(2,@07),@CH00212                              0997
*                  END;                                            0998
*                ELSE                  /*NTH LEVEL                   */
*                  DO;                                             0999
         B     @RC00993                                            0999
@RF00993 DS    0H                                                  1000
*                    DO PTINDX3 = 1 TO GDGCNT                      1000
*                     WHILE(GDGLVLT(PTINDX3) < GDGVAL);            1000
         LA    @07,1                                               1000
         B     @DE01000                                            1000
@DL01000 L     @07,RSPTWKC(,REG6)                                  1000
         LH    @07,PTINDX3(,@07)                                   1000
         ALR   @07,@07                                             1000
         L     @04,RSGDGTB(,REG6)                                  1000
         LH    @07,GDGLVLT-2(@07,@04)                              1000
         C     @07,GDGVAL(,@04)                                    1000
         BNL   @DC01000                                            1000
*                                      /*FIND POINT OF INSERT        */
*                    END;                                          1001
         L     @04,RSPTWKC(,REG6)                                  1001
         LA    @07,1                                               1001
         AH    @07,PTINDX3(,@04)                                   1001
@DE01000 L     @04,RSPTWKC(,REG6)                                  1001
         STH   @07,PTINDX3(,@04)                                   1001
         L     @04,RSGDGTB(,REG6)                                  1001
         CH    @07,GDGCNT(,@04)                                    1001
         BNH   @DL01000                                            1001
@DC01000 DS    0H                                                  1002
*                    IF GDGLVLT(PTINDX3) = GDGVAL THEN             1002
         L     @07,RSPTWKC(,REG6)                                  1002
         LH    @04,PTINDX3(,@07)                                   1002
         ALR   @04,@04                                             1002
         L     @15,RSGDGTB(,REG6)                                  1002
         LH    @04,GDGLVLT-2(@04,@15)                              1002
         C     @04,GDGVAL(,@15)                                    1002
         BNE   @RF01002                                            1002
*                                      /*CHK FOR DUPE GENERATION     */
*                      DO;                                         1003
*                        PTF1OK = OFF; /*NOTE ERROR                  */
         NI    PTF1OK(@07),B'11011111'                             1004
*                        PTLCDIT->DITFAVER = OFF; /*DELETE ASSN      */
         L     @07,PTLCDIT(,@07)                                   1005
         NI    DITFAVER(@07),B'10111111'                           1005
*                      END;                                        1006
*                    ELSE                                          1007
*                      IF GDGCNT => GDGLMT THEN /*TOO MANY LEVELS    */
         B     @RC01002                                            1007
@RF01002 L     @07,RSGDGTB(,REG6)                                  1007
         LH    @04,GDGCNT(,@07)                                    1007
         CH    @04,GDGLMT(,@07)                                    1007
         BL    @RF01007                                            1007
*                        DO;                                       1008
*                          PTF1OK = OFF; /*NOTE ERROR                */
         L     @07,RSPTWKC(,REG6)                                  1009
         NI    PTF1OK(@07),B'11011111'                             1009
*                          PTLCDIT->DITFAVER = OFF; /*DELETE ASSN    */
         L     @07,PTLCDIT(,@07)                                   1010
         NI    DITFAVER(@07),B'10111111'                           1010
*                        END;                                      1011
*                                                                  1011
*        /************************************************************/
*        /*                                                          */
*        /*         INSERT LEVEL                                     */
*        /*                                                          */
*        /************************************************************/
*                                                                  1012
*                      ELSE                                        1012
*                        DO;                                       1012
         B     @RC01007                                            1012
@RF01007 DS    0H                                                  1013
*                          GDGFRS = (PTINDX3-1) * LENGTH(GDGENT) + 1;
         L     @07,RSGDGTB(,REG6)                                  1013
         LA    @04,1                                               1013
         L     @01,RSPTWKC(,REG6)                                  1013
         LH    @15,PTINDX3(,@01)                                   1013
         BCTR  @15,0                                               1013
         ALR   @15,@15                                             1013
         ALR   @15,@04                                             1013
         STH   @15,GDGFRS(,@07)                                    1013
*                                      /*START OF FROM               */
*                          GDGFRE = (GDGCNT+1)*LENGTH(GDGENT);     1014
         LH    @14,GDGCNT(,@07)                                    1014
         ALR   @14,@04                                             1014
         ALR   @14,@14                                             1014
         STH   @14,GDGFRE(,@07)                                    1014
*                                      /*END OF FROM                 */
*                          GDGTOS = GDGFRS + LENGTH(GDGENT);       1015
         LA    @03,2                                               1015
         ALR   @15,@03                                             1015
         STH   @15,GDGTOS(,@07)                                    1015
*                                      /*START OF TO                 */
*                          GDGTOE = GDGFRE + LENGTH(GDGENT);       1016
         ALR   @14,@03                                             1016
         STH   @14,GDGTOE(,@07)                                    1016
*                                      /*END OF TO                   */
*                          GDGMVL = GDGTOE - GDGTOS + 1;           1017
         SLR   @14,@15                                             1017
         ALR   @14,@04                                             1017
         STH   @14,GDGMVL(,@07)                                    1017
*                                      /*LENGTH OF DATA TO MOVE      */
*                          DO WHILE (GDGMVL>256); /*MOVE LARGE SEGS  */
         B     @DE01018                                            1018
@DL01018 DS    0H                                                  1019
*                            GDGLENTS(GDGTOE-255:GDGTOE) =         1019
*                             GDGLENTS(GDGFRE-255:GDGFRE);         1019
         L     @07,RSGDGTB(,REG6)                                  1019
         LH    @04,GDGTOE(,@07)                                    1019
         ST    @04,@TF00001                                        1019
         ALR   @04,@07                                             1019
         AL    @04,@CF03748                                        1019
         LH    @15,GDGFRE(,@07)                                    1019
         ST    @15,@TF00002                                        1019
         ALR   @15,@07                                             1019
         AL    @15,@CF03748                                        1019
         MVC   @TS00001(256),GDGLENTS-32(@15)                      1019
         MVC   GDGLENTS-32(256,@04),@TS00001                       1019
*                            GDGTOE = GDGTOE - 256;                1020
         LA    @04,256                                             1020
         L     @15,@TF00001                                        1020
         SLR   @15,@04                                             1020
         STH   @15,GDGTOE(,@07)                                    1020
*                            GDGFRE = GDGFRE - 256;                1021
         L     @15,@TF00002                                        1021
         SLR   @15,@04                                             1021
         STH   @15,GDGFRE(,@07)                                    1021
*                            GDGMVL = GDGMVL - 256;                1022
         LCR   @04,@04                                             1022
         AH    @04,GDGMVL(,@07)                                    1022
         STH   @04,GDGMVL(,@07)                                    1022
*                          END;                                    1023
@DE01018 L     @07,RSGDGTB(,REG6)                                  1023
         LH    @04,GDGMVL(,@07)                                    1023
         C     @04,@CF03188                                        1023
         BH    @DL01018                                            1023
*                          GDGLENTS(GDGTOS:GDGTOE) =               1024
*                           GDGLENTS(GDGFRS:GDGFRE);               1024
         LH    @04,GDGTOS(,@07)                                    1024
         ST    @04,@TF00001                                        1024
         ALR   @04,@07                                             1024
         LH    @15,GDGTOE(,@07)                                    1024
         SL    @15,@TF00001                                        1024
         LH    @01,GDGFRS(,@07)                                    1024
         ALR   @01,@07                                             1024
         MVC   @TS00001(256),GDGLENTS-1(@01)                       1024
         EX    @15,@SM03749                                        1024
*                                      /*MOVE LAST BIT               */
*                          GDGENT(PTINDX3) =                       1025
*                           GDGENT(PTINDX3)&&GDGENT(PTINDX3);      1025
         L     @04,RSPTWKC(,REG6)                                  1025
         LH    @04,PTINDX3(,@04)                                   1025
         ALR   @04,@04                                             1025
         ST    @04,@TF00001                                        1025
         ALR   @04,@07                                             1025
         XC    GDGENT-2(2,@04),GDGENT-2(@04)                       1025
*                                      /*CLEAR ENTRY                 */
*                          GDGLVLT(PTINDX3) = GDGVAL; /*INSERT       */
         L     @04,GDGVAL(,@07)                                    1026
         L     @01,@TF00001                                        1026
         STH   @04,GDGLVLT-2(@01,@07)                              1026
*                          GDGCNT = GDGCNT + 1; /*INCR NO. OF LEVELS */
         LA    @04,1                                               1027
         AH    @04,GDGCNT(,@07)                                    1027
         STH   @04,GDGCNT(,@07)                                    1027
*                        END;                                      1028
*                  END;                                            1029
@RC01007 DS    0H                                                  1029
@RC01002 DS    0H                                                  1030
*              END;                                                1030
@RC00993 DS    0H                                                  1031
*        END GDGINSLP;                                             1031
*                                                                  1031
@RC00986 DS    0H                                                  1031
@RC00984 DS    0H                                                  1031
@DE00982 L     @07,RSPTWKC(,REG6)                                  1031
         TM    PTF1END(@07),B'00000100'                            1031
         BNO   @DL00982                                            1031
*        /************************************************************/
*        /*                                                          */
*        /*       COMPRESS GEN LEVEL TABLE FROM TABLE TO STRING      */
*        /*                                                          */
*        /************************************************************/
*                                                                  1032
*        GDGPLEV = 0;                  /*PREVIOUS LEVEL INIT         */
         L     @04,RSGDGTB(,REG6)                                  1032
         SLR   @15,@15                                             1032
         STH   @15,GDGPLEV(,@04)                                   1032
*        PTINDXV = 1;                  /*FIRST LEVEL DIFFERENCE      */
         LA    @04,1                                               1033
         STH   @04,PTINDXV(,@07)                                   1033
*        DO PTINDX3 = 1 TO GDGCNT;     /*STEP THRU LEVELS            */
         B     @DE01034                                            1034
@DL01034 DS    0H                                                  1035
*          GDGVAL = GDGLVLT(PTINDX3) - GDGPLEV; /*DIFFERENCE         */
         L     @07,RSGDGTB(,REG6)                                  1035
         L     @04,RSPTWKC(,REG6)                                  1035
         LH    @15,PTINDX3(,@04)                                   1035
         ALR   @15,@15                                             1035
         LH    @15,GDGLVLT-2(@15,@07)                              1035
         SH    @15,GDGPLEV(,@07)                                   1035
         ST    @15,GDGVAL(,@07)                                    1035
*          IF GDGVAL > GLBLOCK THEN    /*LARGE GAP                   */
         LA    @14,200                                             1036
         CR    @15,@14                                             1036
         BNH   @RF01036                                            1036
*            DO;                                                   1037
*              GDGVALB = GDGVAL/GLBLOCK + GLBLOCK; /*DETERMINE GAP   */
         LR    @00,@15                                             1038
         SRDA  @00,32                                              1038
         DR    @00,@14                                             1038
         ALR   @01,@14                                             1038
         STH   @01,GDGVALB(,@07)                                   1038
*              IF GDGVALB ^= GDGLVL(PTINDXV) THEN /*STRING CHANGED   */
         LH    @07,PTINDXV(,@04)                                   1039
         L     @15,RSCPE7(,REG6)                                   1039
         SLR   @14,@14                                             1039
         IC    @14,GDGLVL-1(@07,@15)                               1039
         CR    @01,@14                                             1039
         BE    @RF01039                                            1039
*                DO;                                               1040
*                  PTF1OK = OFF;       /*NOTE ERROR                  */
         NI    PTF1OK(@04),B'11011111'                             1041
*                  GDGLVL(PTINDXV) = GDGVALB; /*CHANGE STRING        */
         STC   @01,GDGLVL-1(@07,@15)                               1042
*                END;                                              1043
*              PTINDXV = PTINDXV + 1; /*NEXT STRING INTEGER          */
@RF01039 L     @07,RSPTWKC(,REG6)                                  1044
         LA    @04,1                                               1044
         AH    @04,PTINDXV(,@07)                                   1044
         STH   @04,PTINDXV(,@07)                                   1044
*              GDGVAL = GDGVAL//GLBLOCK; /*TRUE LEVEL                */
         L     @07,RSGDGTB(,REG6)                                  1045
         L     @00,GDGVAL(,@07)                                    1045
         SRDA  @00,32                                              1045
         D     @00,@CF00790                                        1045
         ST    @00,GDGVAL(,@07)                                    1045
*            END;                                                  1046
*          IF GDGVAL ^= GDGLVL(PTINDXV) THEN /*STRING CHANGED        */
@RF01036 L     @07,RSGDGTB(,REG6)                                  1047
         L     @07,GDGVAL(,@07)                                    1047
         L     @04,RSPTWKC(,REG6)                                  1047
         LH    @15,PTINDXV(,@04)                                   1047
         L     @14,RSCPE7(,REG6)                                   1047
         SLR   @03,@03                                             1047
         IC    @03,GDGLVL-1(@15,@14)                               1047
         CR    @07,@03                                             1047
         BE    @RF01047                                            1047
*            DO;                                                   1048
*              PTF1OK = OFF;           /*NOTE ERROR                  */
         NI    PTF1OK(@04),B'11011111'                             1049
*              GDGLVL(PTINDXV) = GDGVAL; /*INSERT NEW DIFFERENCE     */
         STC   @07,GDGLVL-1(@15,@14)                               1050
*            END;                                                  1051
*          PTINDXV = PTINDXV + 1;      /*NEXT DIFFERENCE             */
@RF01047 L     @07,RSPTWKC(,REG6)                                  1052
         LA    @04,1                                               1052
         AH    @04,PTINDXV(,@07)                                   1052
         STH   @04,PTINDXV(,@07)                                   1052
*          GDGPLEV = GDGLVLT(PTINDX3); /*NEW PREVIOUS LEVEL          */
         L     @04,RSGDGTB(,REG6)                                  1053
         LH    @07,PTINDX3(,@07)                                   1053
         ALR   @07,@07                                             1053
         LH    @07,GDGLVLT-2(@07,@04)                              1053
         STH   @07,GDGPLEV(,@04)                                   1053
*        END;                                                      1054
         L     @07,RSPTWKC(,REG6)                                  1054
         LA    @04,1                                               1054
         AH    @04,PTINDX3(,@07)                                   1054
@DE01034 L     @07,RSPTWKC(,REG6)                                  1054
         STH   @04,PTINDX3(,@07)                                   1054
         L     @07,RSGDGTB(,REG6)                                  1054
         CH    @04,GDGCNT(,@07)                                    1054
         BNH   @DL01034                                            1054
*        IF GDGLVL(PTINDXV) ^= GLEND THEN /*END OF STRING DIFFERENT  */
         LA    @07,255                                             1055
         L     @04,RSPTWKC(,REG6)                                  1055
         LH    @15,PTINDXV(,@04)                                   1055
         L     @14,RSCPE7(,REG6)                                   1055
         SLR   @03,@03                                             1055
         IC    @03,GDGLVL-1(@15,@14)                               1055
         CR    @07,@03                                             1055
         BE    @RF01055                                            1055
*          DO;                                                     1056
*            PTF1OK = OFF; /*NOTE ERROR                              */
         NI    PTF1OK(@04),B'11011111'                             1057
*            GDGLVL(PTINDXV) = GLEND;  /*NEW END OF DIFFERENCE STR   */
         STC   @07,GDGLVL-1(@15,@14)                               1058
*          END;                                                    1059
*                                                                  1059
*        /************************************************************/
*        /*                                                          */
*        /*  WRITE NEW STRING IF DIFFERENT THAN OLD                  */
*        /*                                                          */
*        /************************************************************/
*                                                                  1060
*        IF PTF1OK = OFF THEN                                      1060
@RF01055 L     @07,RSPTWKC(,REG6)                                  1060
         TM    PTF1OK(@07),B'00100000'                             1060
         BNZ   @RF01060                                            1060
*          DO;                                                     1061
*            /* CALL TO MODULE IDCRS05 FOR PROCEDURE ADDUPCR         */
*            CALL ADDUPCR;         /*UPDATE CRA                  */
*                                                                  1062
*                                                                  1062
         L     @15,@CV03442                                        1062
         BALR  @14,@15                                             1062
*            DO;                                                   1063
*            /*CALL CKERR*/                                        1064
*              RSCKERR = RSCKERR && RSCKERR;                       1064
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1064
*              RSCKERN = RSE028;                                   1065
         MVC   RSCKERN(2,REG6),@CH00946                            1065
*              RSCKTERM = 'RETU';                                  1066
         MVC   RSCKTERM(4,REG6),@CC03500                           1066
*              RSCKMVAR(1) = ADDR(CNAME);                          1067
         L     @07,RSGRABCU(,REG6)                                 1067
         LA    @04,8                                               1067
         AL    @04,GRABCURR(,@07)                                  1067
         LA    @07,CNAME(,@04)                                     1067
         ST    @07,RSCKMVAR(,REG6)                                 1067
*              RSCKMVAR(2) = ADDR(RCDID);                          1068
*                                                                  1068
         LA    @07,RCDID(,@04)                                     1068
         ST    @07,RSCKMVAR+4(,REG6)                               1068
*            /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR           */
*            CALL CKERR;                                           1069
         L     @15,@CV03443                                        1069
         BALR  @14,@15                                             1069
*            END; /*IDC21025I        */                            1070
*                                                                  1070
*                                                                  1070
*            DO;                                                   1071
*              RSRTYPE = ''B;                                      1072
         MVI   RSRTYPE(REG6),X'00'                                 1072
*              RSRUPDT = ON;     /* UPDRCD  */                     1073
         OI    RSRUPDT(REG6),B'00100000'                           1073
*              RSRUPD = ON;      /* UPDATE  */                     1074
         OI    RSRUPD(REG6),B'00001000'                            1074
*              RSRDS = ''B;                                        1075
         NI    RSRDS(REG6),B'00011111'                             1075
*              RSRWF = ON;       /* WORKFILE  */                   1076
*              RSRDIR = ON;      /* DIRECT  */                     1077
*                                                                  1077
         OI    RSRWF(REG6),B'10000100'                             1077
*            /* CALL TO MODULE IDCRS06 FOR PROCEDURE RECMGMT         */
*            CALL RECMGMT;                                         1078
         L     @15,@CV03452                                        1078
         BALR  @14,@15                                             1078
*              RFY RTNREG RSTD;                                    1079
*              TESTRC = RTNREG;                                    1080
         STH   RTNREG,TESTRC(,REG6)                                1080
*              RFY RTNREG UNRSTD;                                  1081
*            END;                                                  1082
*                                                                  1082
*          END;                                                    1083
*                                                                  1083
*        /************************************************************/
*        /*                                                          */
*        /*     DUMP WHILE STORAGE STILL AVAILABLE                   */
*        /*                                                          */
*        /************************************************************/
*                                                                  1084
*        IF GDTDBG = NULLPTR                                       1084
*          THEN;                                                   1084
@RF01060 L     @07,GDTDBG(,REG5)                                   1084
         LTR   @07,@07                                             1084
         BZ    @RT01084                                            1084
*          ELSE                                                    1086
*            CALL IDCDB010 (GDTTBL,'RSV4');                        1086
*                                                                  1086
         ST    REG5,@AL00001                                       1086
         LA    @07,@CC03587                                        1086
         ST    @07,@AL00001+4                                      1086
         MVI   @AL00001+4,X'80'                                    1086
         L     @15,GDTDBG(,REG5)                                   1086
         LA    @01,@AL00001                                        1086
         BALR  @14,@15                                             1086
*        /************************************************************/
*        /*                                                          */
*        /*  FREE ALL OF THE GDG STORAGE                             */
*        /*                                                          */
*        /************************************************************/
*                                                                  1087
*        CALL IDCSAFP0 (GDTTBL,POOL12);                            1087
@RT01084 ST    REG5,@AL00001                                       1087
         LA    @07,@CC00907                                        1087
         ST    @07,@AL00001+4                                      1087
         MVI   @AL00001+4,X'80'                                    1087
         L     @15,GDTFPL(,REG5)                                   1087
         LA    @01,@AL00001                                        1087
         BALR  @14,@15                                             1087
* CALL EXIT;  /*TERMINATE*/                                        1088
         BAL   @14,EXIT                                            1088
* END VERB; /*END OF PROCEDURE*/                                   1089
@EL00013 DS    0H                                                  1089
@EF00013 DS    0H                                                  1089
@ER00013 BR    @14                                                 1089
@PB00013 DS    0H                                                  1090
*/********************************************************************/
*/* PROCEDURE NAME - VLNCOMPR                                        */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     A VOLUME NOT CHOSEN FOR RESET IS BEING CHECKED FOR           */
*/*     SPACE CLAIMS BY OBJECTS WITH A DESCRIPTION ON A RESET        */
*/*     VOLUME. IF AN OBJECT EXISTS ON A NON-RESET VOLUME, BUT IS    */
*/*     NO LONGER DESCRIBED ON THAT VOLUME, THEN THE SPACE           */
*/*     WILL BE RETURNED FOR SUBALLOCATION.  THIS ROUTINE            */
*/*     BELIEVES THAT THE DATA OR INDEX IN THE CATALOG CORRECTLY     */
*/*     DESCRIBES THE SPACE ON THE NON-RESET VOLUME, SINCE THAT      */
*/*     VOLUME IS NOT BEING RESET. AGAINST THIS TEMPLATE OF          */
*/*     VIRTUE AND PULCHRITUDE IS PLACED THE OBJECT OF RESET.        */
*/*     IF IT CLAIMS SPACE ON THIS VOLUME FOR THIS DSDIR THEN IT     */
*/*     MUST BE AT LEAST A SUBSET OF THE TEMPLATE.                   */
*/*                                                                  */
*/* INPUT -                                                          */
*/*     RSPVSNTC - CATALOG VGOS                                      */
*/*     WORKFILE GRABRAB2 - DATA OR INDEX RECORD                     */
*/*     RSWASNVT - RSPVSNTC (CATALOG VGOS)                           */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*     RSPVDELT - DELETE THE DSDIR                                  */
*/*     RSMUNUS - MARK THE VGOS IN THE WORKFILE UNUSABLE FOR THIS    */
*/*               VOLUME AND DSDIR SEQUENCE NUMBER                   */
*/*     RSRETSPC - RETURN ADDITIONAL SPACE TO THE CATALOG.           */
*/*     RSPVSNT3 - WORKFILE VGOS                                     */
*/*                                                                  */
*/********************************************************************/
*      GENERATE;                                                   1090
         DS    0F
NAME0088 DC    CL8'VLNCOMPR'
*VLNCOMPR: PROCEDURE                                               1091
*        OPTIONS(NOSAVE,NOSAVEAREA);                               1091
*                                                                  1091
         B     @PB00014                                            1091
VLNCOMPR DS    0H                                                  1092
*      GENERATE REFS(RS03RG08, REG6);                              1092
*                                                                  1092
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         MVC   0(4,@15),NAME0088  PROCNAME TO REGSAVE
*        RFY SNDSDIR BASED(RSPVSNT8->RSFAENT);                     1093
*                                                                  1093
*        /************************************************************/
*        /*                                                          */
*        /*   ESTABLISH THE SPACE CURRENTLY ALLOCATED TO THIS OBJECT */
*        /*                                                          */
*        /************************************************************/
*                                                                  1094
*        RSCSFAE = RSFAENT;            /*INITIAL MATCHING VGO SNTAB  */
         L     @07,RSWASNVT(,REG6)                                 1094
         L     @04,RSFAENT(,@07)                                   1094
         ST    @04,RSCSFAE(,REG6)                                  1094
*        RSCSFCN = RSFCNDX;                                        1095
         LH    @07,RSFCNDX(,@07)                                   1095
         STH   @07,RSCSFCN(,REG6)                                  1095
*        RSTGBMAP = RSCABMAP;          /*SET CATALOG VGO MAP         */
         L     @04,RSCABMAP(,REG6)                                 1096
         ST    @04,RSTGBMAP(,REG6)                                 1096
*        RSPVSETB = ''B;               /*CLEAR OPTIONS               */
         MVI   RSPVSETB(REG6),X'00'                                1097
*        RSPVCLBM = ON;                /*CLEAR MAP INITIALLY         */
         OI    RSPVCLBM(REG6),B'00100000'                          1098
*        DO RSFCNDX = RSFCNDX TO RSFHNDX;                          1099
         B     @DE01099                                            1099
@DL01099 DS    0H                                                  1100
*          RSFAENT = RSFCADR + RSFENTLN*(RSFCNDX-1);               1100
         L     @07,RSWASNVT(,REG6)                                 1100
         LH    @04,RSFCNDX(,@07)                                   1100
         BCTR  @04,0                                               1100
         LR    @01,@04                                             1100
         SLR   @04,@04                                             1100
         IC    @04,RSFENTLN(,@07)                                  1100
         MR    @00,@04                                             1100
         AL    @01,RSFCADR(,@07)                                   1100
         ST    @01,RSFAENT(,@07)                                   1100
*          IF (SNVOLSER = RSCSFAE->SNVOLSER) &                     1101
*             (SDSDIRSN = RSCSFAE->SDSDIRSN) THEN                  1101
         L     @07,RSCSFAE(,REG6)                                  1101
         CLC   SNVOLSER(6,@01),SNVOLSER(@07)                       1101
         BNE   @RF01101                                            1101
         CLC   SDSDIRSN(2,@01),SDSDIRSN(@07)                       1101
         BNE   @RF01101                                            1101
*            DO;                                                   1102
*              CALL SETBITS;                                       1103
         BAL   @14,SETBITS                                         1103
*              RSPVCLBM = OFF;         /*DON'T CLEAR MAP AGAIN       */
         NI    RSPVCLBM(REG6),B'11011111'                          1104
*            END;                                                  1105
*        END;                                                      1106
@RF01101 L     @04,RSWASNVT(,REG6)                                 1106
         LA    @07,1                                               1106
         AH    @07,RSFCNDX(,@04)                                   1106
         L     @04,RSWASNVT(,REG6)                                 1106
         STH   @07,RSFCNDX(,@04)                                   1106
@DE01099 L     @04,RSWASNVT(,REG6)                                 1106
         CH    @07,RSFHNDX(,@04)                                   1106
         BNH   @DL01099                                            1106
*        RSFAENT = RSCSFAE;            /*RESTORE INIT MATCHING VGO   */
         L     @07,RSWASNVT(,REG6)                                 1107
         L     @04,RSCSFAE(,REG6)                                  1107
         ST    @04,RSFAENT(,@07)                                   1107
*        RSFCNDX = RSCSFCN;                                        1108
*                                                                  1108
         LH    @04,RSCSFCN(,REG6)                                  1108
         STH   @04,RSFCNDX(,@07)                                   1108
*        /************************************************************/
*        /*                                                          */
*        /*   IF OBJECT DOES NOT EXIST AT RESET OR IS AN             */
*        /*   INCOMPLETE OBJECT (HENCE, WILL BE DELETED), THEN       */
*        /*   DELETE THE DSDIR AND RETURN THE SUBALLOCATED SPACE     */
*        /*                                                          */
*        /************************************************************/
*                                                                  1109
*        RSGRABCU = ADDR(GRABSWF);                                 1109
         L     @07,RSIOTBL(,REG6)                                  1109
         ST    @07,RSGRABCU(,REG6)                                 1109
*        GRABCURR = GRABRAB2;                                      1110
         L     @04,GRABRAB2(,@07)                                  1110
         ST    @04,GRABCURR(,@07)                                  1110
*        RSRDS = ''B;                  /*CLEAR FILE OPTIONS          */
         NI    RSRDS(REG6),B'00011111'                             1111
*        RSRWF = ON;                   /*DEFAULT GET/PUT TO WF       */
         OI    RSRWF(REG6),B'10000000'                             1112
*        IF (RSWDLCAT = ON) × (RSWDSDIR = OFF) THEN                1113
         TM    RSWDLCAT(@04),B'01000000'                           1113
         BO    @RT01113                                            1113
         TM    RSWDSDIR(@04),B'00001000'                           1113
         BNZ   @RF01113                                            1113
@RT01113 DS    0H                                                  1114
*          DO;                                                     1114
*            RSPVDELT = ON;                                        1115
         OI    RSPVDELT(REG6),B'00100000'                          1115
*            RSRETSPC = ON;                                        1116
         OI    RSRETSPC(REG6),B'00000100'                          1116
*          END;                                                    1117
*                                                                  1117
*        /************************************************************/
*        /*                                                          */
*        /*   THE OBJECT MAY EXIST ON THE NON-RESET VOLUME.          */
*        /*   FIND ALL OF THE VGOS FOR THE RESET OBJECT.             */
*        /*                                                          */
*        /************************************************************/
*                                                                  1118
*        ELSE                                                      1118
*  VLNCFNDV:                                                       1118
*          DO;                                                     1118
*                                                                  1118
         B     @RC01113                                            1118
@RF01113 DS    0H                                                  1118
VLNCFNDV DS    0H                                                  1119
*            DO;                                                   1119
*              GRABBB = GRABCURR;                                  1120
         L     @07,RSGRABCU(,REG6)                                 1120
         L     @04,GRABCURR(,@07)                                  1120
         ST    @04,GRABBB(,@07)                                    1120
*              RSWGCODE = GCVOLGO;     /*SPECIFY GROUP CODE          */
         MVI   RSWGCODE(REG6),X'03'                                1121
*              RSWFONE = OFF;          /*FIND ALL OCCURRENCES        */
         NI    RSWFONE(REG6),B'01111111'                           1122
*              /* CALL THE FIND SUBROUTINE */                      1123
*                                                                  1123
*            /* CALL TO MODULE IDCRS04 FOR PROCEDURE FIND            */
*            CALL FIND;                                            1123
         L     @15,@CV03435                                        1123
         BALR  @14,@15                                             1123
*            END;                                                  1124
*                                                                  1124
*        /************************************************************/
*        /*                                                          */
*        /*   ATTEMPT TO LOCATE THE FIRST VGO FOR THE VOLUME-DSDIR   */
*        /*   BEING ANALYZED. IF NOT FOUND, THEN THE OBJECT IS BEING */
*        /*   RESET WITHOUT THE PREVIOUS REQUEST FOR SPACE ON THE    */
*        /*   VOLUME BEING ANALYZED. HENCE, DELETE THE DSDIR AND     */
*        /*   RETURN SUBALLOCATED SPACE.                             */
*        /*                                                          */
*        /************************************************************/
*                                                                  1125
*            IF RSFENTLN = 0 THEN      /*NO VGOS                     */
         L     @07,RSWASNVT(,REG6)                                 1125
         CLI   RSFENTLN(@07),0                                     1125
         BNE   @RF01125                                            1125
*              DO;                                                 1126
*                RSPVDELT = ON;                                    1127
         OI    RSPVDELT(REG6),B'00100000'                          1127
*                RSRETSPC = ON;                                    1128
         OI    RSRETSPC(REG6),B'00000100'                          1128
*              END;                                                1129
*            ELSE                                                  1130
*              DO;                                                 1130
         B     @RC01125                                            1130
@RF01125 DS    0H                                                  1131
*                RSPVSNT3 = RSWASNVT;  /*SAVE THE CRA VGOS SNTAB     */
         L     @07,RSWASNVT(,REG6)                                 1131
         ST    @07,RSPVSNT3(,REG6)                                 1131
*                RSFAENT = RSFCADR;                                1132
         L     @04,RSFCADR(,@07)                                   1132
         ST    @04,RSFAENT(,@07)                                   1132
*                DO RSFCNDX = 1 TO RSFHNDX                         1133
*                 WHILE((SNVOLSER^=VOLSRSER) ×                     1133
*                       (SDSDIRSN^=RSPVSNT8->RSFAENT->SNSN));      1133
         LA    @07,1                                               1133
         B     @DE01133                                            1133
@DL01133 L     @07,RSWASNVT(,REG6)                                 1133
         L     @07,RSFAENT(,@07)                                   1133
         L     @04,RSVTBENT(,REG6)                                 1133
         CLC   SNVOLSER(6,@07),VOLSRSER(@04)                       1133
         BNE   @DB01133                                            1133
         L     @04,RSPVSNT8(,REG6)                                 1133
         L     @04,RSFAENT(,@04)                                   1133
         CLC   SDSDIRSN(2,@07),SNSN(@04)                           1133
         BE    @DC01133                                            1133
@DB01133 DS    0H                                                  1134
*                  RSFAENT = RSFAENT + RSFENTLN;                   1134
         L     @07,RSWASNVT(,REG6)                                 1134
         SLR   @04,@04                                             1134
         IC    @04,RSFENTLN(,@07)                                  1134
         AL    @04,RSFAENT(,@07)                                   1134
         ST    @04,RSFAENT(,@07)                                   1134
*                END;                                              1135
         L     @04,RSWASNVT(,REG6)                                 1135
         LA    @07,1                                               1135
         AH    @07,RSFCNDX(,@04)                                   1135
@DE01133 L     @04,RSWASNVT(,REG6)                                 1135
         STH   @07,RSFCNDX(,@04)                                   1135
         L     @04,RSWASNVT(,REG6)                                 1135
         CH    @07,RSFHNDX(,@04)                                   1135
         BNH   @DL01133                                            1135
@DC01133 DS    0H                                                  1136
*                IF RSFCNDX > RSFHNDX THEN /*NO MATCHING VGO         */
         L     @07,RSWASNVT(,REG6)                                 1136
         LH    @04,RSFCNDX(,@07)                                   1136
         CH    @04,RSFHNDX(,@07)                                   1136
         BNH   @RF01136                                            1136
*                  DO;                                             1137
*                    RSPVDELT = ON;                                1138
         OI    RSPVDELT(REG6),B'00100000'                          1138
*                    RSRETSPC = ON;                                1139
         OI    RSRETSPC(REG6),B'00000100'                          1139
*                  END;                                            1140
*                                                                  1140
*        /************************************************************/
*        /*                                                          */
*        /*   THE OBJECT BEING RESET CLAIMS SPACE FOR THIS           */
*        /*   VOLUME-DSDIR. ENSURE THAT THE SPACE CLAIMED IS AT      */
*        /*   LEAST A SUBSET OF THE SPACE PREVIOUSLY CLAIMED ON      */
*        /*   THAT VOLUME. NOTE THAT THE SUMTT IN THE DSDIR MAY      */
*        /*   BE WRONG AND WILL NOT BE CORRECTED.                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  1141
*        /************************************************************/
*        /*                                                          */
*        /*     MAP RESET EXTENTS INTO BITMAP                        */
*        /*                                                          */
*        /************************************************************/
*                                                                  1141
*                ELSE                                              1141
*  VLNCSPCL:                                                       1141
*                  DO;                                             1141
         B     @RC01136                                            1141
@RF01136 DS    0H                                                  1141
VLNCSPCL DS    0H                                                  1142
*                    RSTGBMAP = RSCRBMAP; /*SET CRA VGO MAP          */
         L     @07,RSCRBMAP(,REG6)                                 1142
         ST    @07,RSTGBMAP(,REG6)                                 1142
*                    RSPVSETB = ''B;                               1143
         MVI   RSPVSETB(REG6),X'00'                                1143
*                    RSPVCLBM = ON; /*CLEAR VGO MAP INITIALLY        */
         OI    RSPVCLBM(REG6),B'00100000'                          1144
*                    RSCSFAE = RSFAENT; /*1ST MATCHING VGO           */
         L     @07,RSWASNVT(,REG6)                                 1145
         L     @04,RSFAENT(,@07)                                   1145
         ST    @04,RSCSFAE(,REG6)                                  1145
*                    RSCSFCN = RSFCNDX;                            1146
         LH    @07,RSFCNDX(,@07)                                   1146
         STH   @07,RSCSFCN(,REG6)                                  1146
*                    DO RSFCNDX = RSFCNDX TO RSFHNDX;              1147
         B     @DE01147                                            1147
@DL01147 DS    0H                                                  1148
*                      RSFAENT = RSFCADR + RSFENTLN*(RSFCNDX-1);   1148
         L     @07,RSWASNVT(,REG6)                                 1148
         LH    @04,RSFCNDX(,@07)                                   1148
         BCTR  @04,0                                               1148
         LR    @01,@04                                             1148
         SLR   @04,@04                                             1148
         IC    @04,RSFENTLN(,@07)                                  1148
         MR    @00,@04                                             1148
         AL    @01,RSFCADR(,@07)                                   1148
         ST    @01,RSFAENT(,@07)                                   1148
*                      IF (SNVOLSER=RSCSFAE->SNVOLSER) &           1149
*                         (SDSDIRSN = RSCSFAE->SDSDIRSN) THEN      1149
         L     @07,RSCSFAE(,REG6)                                  1149
         CLC   SNVOLSER(6,@01),SNVOLSER(@07)                       1149
         BNE   @RF01149                                            1149
         CLC   SDSDIRSN(2,@01),SDSDIRSN(@07)                       1149
         BNE   @RF01149                                            1149
*                        DO;                                       1150
*                          CALL SETBITS;                           1151
         BAL   @14,SETBITS                                         1151
*                          RSPVCLBM = OFF;                         1152
         NI    RSPVCLBM(REG6),B'11011111'                          1152
*                        END;                                      1153
*                    END;                                          1154
*                                                                  1154
@RF01149 L     @04,RSWASNVT(,REG6)                                 1154
         LA    @07,1                                               1154
         AH    @07,RSFCNDX(,@04)                                   1154
         L     @04,RSWASNVT(,REG6)                                 1154
         STH   @07,RSFCNDX(,@04)                                   1154
@DE01147 L     @04,RSWASNVT(,REG6)                                 1154
         CH    @07,RSFHNDX(,@04)                                   1154
         BNH   @DL01147                                            1154
*                    RSFAENT = RSCSFAE; /*1ST MATCHING VGO           */
         L     @07,RSWASNVT(,REG6)                                 1155
         L     @04,RSCSFAE(,REG6)                                  1155
         ST    @04,RSFAENT(,@07)                                   1155
*                    RSFCNDX = RSCSFCN;                            1156
*                                                                  1156
         LH    @04,RSCSFCN(,REG6)                                  1156
         STH   @04,RSFCNDX(,@07)                                   1156
*        /************************************************************/
*        /*                                                          */
*        /*     CHECK THE RESET OBJECT FOR A SUBSET OF               */
*        /*     PREVIOUSLY OWNED SPACE.                              */
*        /*                                                          */
*        /************************************************************/
*                                                                  1157
*                    RSTGBMAP = RSCRBMAP; /*CHECK RESET OBJECT       */
         L     @07,RSCRBMAP(,REG6)                                 1157
         ST    @07,RSTGBMAP(,REG6)                                 1157
*                    RSCKBMAP = RSCABMAP; /*AGAINST CATALOG OBJECT   */
         L     @07,RSCABMAP(,REG6)                                 1158
         ST    @07,RSCKBMAP(,REG6)                                 1158
*                    RSCK1TO1 = ON;                                1159
         OI    RSCK1TO1(REG6),B'00000001'                          1159
*                    CALL CHKBITS;                                 1160
*                                                                  1160
         BAL   @14,CHKBITS                                         1160
*        /************************************************************/
*        /*                                                          */
*        /*     RESET OBJECT NOT VALID FOR THIS VOLUME, I.E.         */
*        /*     NOT A SUBSET. - DELETE THE DSDIR, MARK THE           */
*        /*     RESET VGOS UNUSABLE, AND RETURN ANY                  */
*        /*     SUBALLOCATED SPACE.                                  */
*        /*                                                          */
*        /************************************************************/
*                                                                  1161
*                    IF RSCKBERR = ON THEN /*CONFLICT IN TRACKS      */
         TM    RSCKBERR(REG6),B'00000010'                          1161
         BNO   @RF01161                                            1161
*                      DO;                                         1162
*                        RSPVDELT = ON;                            1163
         OI    RSPVDELT(REG6),B'00100000'                          1163
*                        RSMUNUS = ON;                             1164
*                        RSRETSPC = ON;                            1165
         OI    RSMUNUS(REG6),B'10000100'                           1165
*                      END;                                        1166
*                                                                  1166
*        /************************************************************/
*        /*                                                          */
*        /*     RESET OBJECT IS VALID, SUBALLOCATE THE VALID         */
*        /*     OBJECT FROM THE TRACKS ALLOCATED TO THE CATALOG      */
*        /*     OBJECT. THERE MAY BE TRACKS NO LONGER CLAIMED        */
*        /*     BY THE RESET OBJECT. RETURN UNUSED SPACE WILL        */
*        /*     BE FLAGGED, TO INDICATE THAT UNUSED SPACE MAY        */
*        /*     EXIST (THE UNUSED TRACKS ARE MAPPED IN THE           */
*        /*     CATALOG VGO MAP) - SEE VLNRESET.                     */
*        /*                                                          */
*        /************************************************************/
*                                                                  1167
*                    ELSE                                          1167
*                      DO;                                         1167
         B     @RC01161                                            1167
@RF01161 DS    0H                                                  1168
*                        RSRETSPC = ON; /*POSSIBLE SPACE TO RETURN   */
         OI    RSRETSPC(REG6),B'00000100'                          1168
*                        RSPVSETB = ''B; /*CLEAR SET OPTIONS         */
         MVI   RSPVSETB(REG6),X'00'                                1169
*                        RSSETMAP = ON; /*SUBALLOCATE SPACE          */
*                        RSST1TO1 = OFF;                           1171
         OI    RSSETMAP(REG6),B'01000000'                          1171
         NI    RSST1TO1(REG6),B'11101111'                          1171
*                        RSTGBMAP = RSCABMAP; /*FROM CATALOG VGO MAP */
         L     @07,RSCABMAP(,REG6)                                 1172
         ST    @07,RSTGBMAP(,REG6)                                 1172
*                        RSSTBMAP = RSCRBMAP; /*CRA VGO MAP HAS EXTS */
         L     @07,RSCRBMAP(,REG6)                                 1173
         ST    @07,RSSTBMAP(,REG6)                                 1173
*                        CALL SETBITS;                             1174
         BAL   @14,SETBITS                                         1174
*                      END;                                        1175
*                  END VLNCSPCL;                                   1176
@RC01161 DS    0H                                                  1177
*              END;                                                1177
@RC01136 DS    0H                                                  1178
*          END VLNCFNDV;                                           1178
*                                                                  1178
@RC01125 DS    0H                                                  1179
*        RFY SNDSDIR;                  /*REVERT                      */
@RC01113 DS    0H                                                  1180
* CALL EXIT;  /*TERMINATE*/                                        1180
         BAL   @14,EXIT                                            1180
* END VLNCOMPR; /*END OF PROCEDURE*/                               1181
@EL00014 DS    0H                                                  1181
@EF00014 DS    0H                                                  1181
@ER00014 BR    @14                                                 1181
@PB00014 DS    0H                                                  1182
*/********************************************************************/
*/* PROCEDURE NAME - VLNRESET                                        */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     PROCESS A NON-RESET VOLUME. USING THE DATA SET               */
*/*     DIRECTORY ENTRIES (DSDIRS), LOCATE ALL DATA AND INDEX        */
*/*     FROM A VOLUME THAT WAS RESET, WHICH CLAIM SPACE ON           */
*/*     A VOLUME THAT WAS NOT RESET. IF THE COMPONENT NO             */
*/*     LONGER EXISTS OR NO LONGER CLAIMS SPACE ON THE               */
*/*     NON-RESET VOLUME, DELETE THE DSDIR AND RETURN ANY            */
*/*     SUBALLOCATED SPACE.                                          */
*/*                                                                  */
*/*     ALL OBJECTS CLAIMING SPACE HAVE ALREADY BEEN                 */
*/*     PROCESSED BY VERDSDIR, WHICH UPDATED THE CONTROL INTERVAL    */
*/*     NUMBER IN THE DSDIR(DATA SET DIRECTORY) IF THE DATA OR       */
*/*     INDEX WAS REASSIGNED TO A NEW LKR CIN. VERDSDIR PROCESSED    */
*/*     ALL VALID DATA AND INDEX. FOR RESET OBJECTS VERDSDIR ENSURED */
*/*     THAT THE DSDIR EXISTED ON ALL VOLUMES INDICATED BY THE VGOS. */
*/*     FOR NON-RESET OBJECTS, VERDSDIR ENSURED THAT THE DSDIR       */
*/*     EXISTED ON ALL RESET VOLUMES INDICATED BY THE VGOS.          */
*/*                                                                  */
*/*     VLNRESET WILL READ THE LOW KEY RANGE(LKR) FROM THE WORKFILE  */
*/*     AS INDICATED BY THE DSDIR. USING THE PRE-REASSIGNED CIN,     */
*/*     THE CATALOG RECORD IS READ IF AN OBJECT ON A RESET VOLUME    */
*/*     CLAIMED SPACE ON A NON-RESET VOLUME PRIOR TO RESET. THE      */
*/*     VGOS FOR THIS VOLUME-DSDIR ARE THEN LOCATED IN THE CATALOG.  */
*/*                                                                  */
*/*     SINCE THE VOLUME IS NOT BEING RESET WE MUST ASSUME           */
*/*     THAT THE CATALOG AND CRA FOR THAT VOLUME ARE IN SYNC.        */
*/*     FURTHER, WE WILL ALLOW FOR THE FOLLOWING POSSIBILITIES:      */
*/*        (1) THE OBJECT BEING RESET NO LONGER CLAIMS               */
*/*            SPACE ON THE NON-RESET VOLUME. SUBALLOCATED SPACE IS  */
*/*            RETURNED TO THE SPACE MAP. A MESSAGE(IDC11033I) IS    */
*/*            ISSUED FOR THE UNIQUES NOT SCRATCHED.                 */
*/*        (2) THE OBJECT BEING RESET CLAIMS A SUBSET (OR EQUAL SET) */
*/*            OF THE SPACE INDICATED IN THE CATALOG. THE UNUSED     */
*/*            SUBALLOCATED SPACE IS RETURNED TO THE SPACE MAP.      */
*/*                                                                  */
*/*     IF THE OBJECT BEING RESET                                    */
*/*        (1) CLAIMS SPACE ON A NON-RESET VOLUME AND                */
*/*            THAT VOLUME INDICATES THAT THAT OBJECT DOES NOT OWN   */
*/*            ANY SPACE ON THAT VOLUME (DSDIR MISCOMPARE), THEN     */
*/*            VERDSDIR WILL MARK THE VGOS UNUSABLE.                 */
*/*        (2) CLAIMS SPACE ON A NON-RESET VOLUME AND THE FORMER     */
*/*            DATA OR INDEX COMPONENT DOES NOT CLAIM AT LEAST       */
*/*            THOSE SAME EXTENTS, THEN VLNRESET WILL MARK THE       */
*/*            RESET OBJECT UNUSABLE AND RETURN SPACE FOR FUTURE     */
*/*            SUBALLOCATION.                                        */
*/*                                                                  */
*/*     NOTE THAT HEAVY RELIANCE IS PLACED ON THE CATALOG'S          */
*/*     REPRESENTATION OF THE OBJECT BEING RESET. THAT IS,           */
*/*     SPACE CLAIMED BY THAT OBJECT IS VIEWED AS VALID FOR          */
*/*     THE NON-RESET VOLUME. HENCE, IF THE CATALOG OBJECT           */
*/*     IS IN ERROR THEN THE OUTCOME WILL ALSO BE IN ERROR.          */
*/*     IF ANY ERROR IS ENCOUNTERED IN THE CATAOLG FOR THIS          */
*/*     VOLUME RECORD OR OBJECT, THEN THE NON-RESET VOLUME           */
*/*     WILL BE TREATED AS IN ERROR AND ONLY "IGNORE" WILL           */
*/*     PERMIT THE RESET TO OCCUR.                                   */
*/*                                                                  */
*/*     ALSO NOTE THAT IF RESETCAT FINDS AN ERROR IN A NON-RESET     */
*/*     VOLUME (LOGICAL ERROR - RECORD MISSING FROM SET OF           */
*/*     RECORDS, DATA OR INDEX IN CATALOG HAS LOGICAL ERRORS, ETC.)  */
*/*     THAT VOLUME IS FAGGED AS BAD, PER ABOVE. IN THIS CASE,       */
*/*     GIVEN THAT A RESET DATA OR INDEX HAS A CORRESPONDING VGO     */
*/*     FOR THAT VOLUME-DSDIR BEING PROCESSED, THE EXTENTS           */
*/*     DESCRIBED FOR THAT VGO WILL BE REGARDED AS GOOD. IN          */
*/*     ORDER TO DETERMINE WHETHER THE EXTENTS ARE TRULY VALID       */
*/*     RESETCAT MAY BE ISSUED FOR THIS BAD VOLUME.                  */
*/*                                                                  */
*/* INPUT -                                                          */
*/*     VOLUME RECORD IN WORKFILE BUFFER 1                           */
*/*     RSWKBMAP - ADDRESS OF SPACE MAP FOR FIND                     */
*/*     RSPBMAP - ADDRESS OF SPACE MAP FOR SUBALLOCATED SPACE        */
*/*     RSCABMAP - ADDRESS OF THE SPACE MAP FOR THE CATALOG          */
*/*                VGOS BEING PROCESSED.                             */
*/*     RSCRBMAP - ADDRESS OF THE SPACE MAP FOR THE CRA              */
*/*                VGOS BEING PROCESSED.                             */
*/*     RSMAPSIZ - SIZE OF THE SPACE MAP                             */
*/*     RSPVSNT6 - ADDRESS OF SN TABLE FOR THE SPACE HEADERS         */
*/*                ON THIS VOLUME                                    */
*/*     RSPVSNT8 - ADDRESS OF SN TABLE FOR THE DSDIRS ON THIS        */
*/*                VOLUME                                            */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*     CORRECT VOLUME SET OF RECORDS PER THE FUNCTIONAL             */
*/*     DESCRIPTION.                                                 */
*/*                                                                  */
*/* MESSAGES -                                                       */
*/*     IDC11033I - UNIQUE DSNAME NOT DELETED                        */
*/*     IDC11034I - SPACE MAP ERROR (INCORRECT LENGTH)               */
*/*     IDC11029I - SPACE MAP MODIFIED                               */
*/*                                                                  */
*/********************************************************************/
*      GENERATE;                                                   1182
         DS    0F
NAME0096 DC    CL8'VLNRESET'
*VLNRESET: PROCEDURE                                               1183
*        OPTIONS(NOSAVE,NOSAVEAREA);                               1183
*                                                                  1183
         B     @PB00015                                            1183
VLNRESET DS    0H                                                  1184
*      GENERATE REFS(RS03RG08, REG6);                              1184
*                                                                  1184
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         MVC   0(4,@15),NAME0096  PROCNAME TO REGSAVE
*        OLDERID2 = NEWERID2;                                      1185
         L     @07,GDTTR2(,REG5)                                   1185
         MVC   @TS00001(95),NEWERID2(@07)                          1185
         MVC   OLDERID2(95,@07),@TS00001                           1185
*        NEWID2 = 'RSVN';                                          1186
*                                                                  1186
         MVC   NEWID2(4,@07),@CC03601                              1186
*        /************************************************************/
*        /*                                                          */
*        /*  PROCESS ALL OF THE DSDIRS                               */
*        /*                                                          */
*        /************************************************************/
*                                                                  1187
*        RSWASNVT = RSPVSNT8;          /*ACTIVATE SN TABLE FOR DSDIRS*/
         L     @07,RSPVSNT8(,REG6)                                 1187
         ST    @07,RSWASNVT(,REG6)                                 1187
*        RSPVNRP = OFF;                /*RESET SPACE MAP UPDATE INDR */
         NI    RSPVNRP(REG6),B'11101111'                           1188
*        RSBDVOLS = OFF;               /*RESET BAD VOL RECORDS INDR  */
         NI    RSBDVOLS(REG6),B'11111101'                          1189
*  VLNRDSDI:                                                       1190
*        DO RSFCNDX = 1 TO RSFHNDX;                                1190
VLNRDSDI LA    @07,1                                               1190
         B     @DE01190                                            1190
@DL01190 DS    0H                                                  1191
*          RSFAENT = RSFCADR + RSFENTLN*(RSFCNDX - 1);             1191
*                                                                  1191
         L     @07,RSWASNVT(,REG6)                                 1191
         LH    @04,RSFCNDX(,@07)                                   1191
         BCTR  @04,0                                               1191
         LR    @01,@04                                             1191
         SLR   @04,@04                                             1191
         IC    @04,RSFENTLN(,@07)                                  1191
         MR    @00,@04                                             1191
         AL    @01,RSFCADR(,@07)                                   1191
         ST    @01,RSFAENT(,@07)                                   1191
*        /************************************************************/
*        /*                                                          */
*        /*   RESET ACTION TO BE TAKEN INDICATORS                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  1192
*          RSPVDELT = OFF;             /*RESET DSDIR DELETE          */
         NI    RSPVDELT(REG6),B'11011111'                          1192
*          RSMUNUS = OFF;              /*RESET MARK VGO UNUSABLE     */
*          RSRETSPC = OFF;             /*RESET RETURN SPACE          */
         NI    RSMUNUS(REG6),B'01111011'                           1194
*          RSPVSNT3 = 0;               /*CLEAR CRA VGO SNTAB         */
         SLR   @07,@07                                             1195
         ST    @07,RSPVSNT3(,REG6)                                 1195
*          RSPVSNTC = 0;               /*CLEAR CATALOG VGO SNTAB     */
*                                                                  1196
         ST    @07,RSPVSNTC(,REG6)                                 1196
*        /************************************************************/
*        /*                                                          */
*        /*   THIS IS A BAD VOLUME SET OF RECORDS IF A DSDIR         */
*        /*   GOP EXISTS WITH NO CORRESPONDING GO.                   */
*        /*                                                          */
*        /************************************************************/
*                                                                  1197
*          IF SNFUSE = OFF THEN                                    1197
         TM    SNFUSE(@01),B'10000000'                             1197
         BNZ   @RF01197                                            1197
*            RSBDVOLS = ON;                                        1198
*                                                                  1198
         OI    RSBDVOLS(REG6),B'00000010'                          1198
*        /************************************************************/
*        /*                                                          */
*        /*   ON A NON-RESET VOLUME IGNORE THE CATALOG CLUSTER       */
*        /*   RECORD, SINCE IT EXISTS WHOLLY ON THIS VOLUME          */
*        /*                                                          */
*        /************************************************************/
*                                                                  1199
*          ELSE                                                    1199
*            IF SDSIDNO = CLUSCI THEN;                             1199
*                                                                  1199
         B     @RC01197                                            1199
@RF01197 L     @07,RSWASNVT(,REG6)                                 1199
         L     @07,RSFAENT(,@07)                                   1199
         CLC   SDSIDNO(3,@07),@CF00149+1                           1199
         BE    @RT01199                                            1199
*        /************************************************************/
*        /*                                                          */
*        /*   GET THE DATA OR INDEX RECORD INTO BUFFER 2.            */
*        /*   ALLOW FOR NO RECORD FOUND, IN CASE NON-RESET VOLUME    */
*        /*   HAS AN ERROR.                                          */
*        /*                                                          */
*        /************************************************************/
*                                                                  1201
*            ELSE                                                  1201
*              DO;                                                 1201
*                RSGRABCU = ADDR(GRABSWF);                         1202
         L     @07,RSIOTBL(,REG6)                                  1202
         ST    @07,RSGRABCU(,REG6)                                 1202
*                GRABCURR = GRABRAB2;                              1203
         L     @04,GRABRAB2(,@07)                                  1203
         ST    @04,GRABCURR(,@07)                                  1203
*                GRABAFL1 = ''B;       /*CLEAR FILE OPTIONS          */
         MVI   GRABAFL1(@07),X'00'                                 1204
*                GRABAFL2 = ''B;       /*CLEAR FILE OPTIONS          */
         MVI   GRABAFL2(@07),X'00'                                 1205
*                GRABSFXT = ON;        /*ALLOW XLATE CIN ERROR       */
*                GRABSNRN = ON;        /*TREAT XLATE ERR AS NO RCDFND*/
         OI    GRABSFXT(@07),B'10000010'                           1207
*                RABRCDA = SDSIDNO;    /*CIN OF DATA OR INDEX        */
*                                                                  1208
*                                                                  1208
         L     @07,RSWASNVT(,REG6)                                 1208
         L     @07,RSFAENT(,@07)                                   1208
         SLR   @15,@15                                             1208
         ICM   @15,7,SDSIDNO(@07)                                  1208
         ST    @15,RABRCDA(,@04)                                   1208
*                DO;                                               1209
*                  RSRTYPE = ''B;                                  1210
         MVI   RSRTYPE(REG6),X'00'                                 1210
*                  RSRGET = ON;      /* GETRCD  */                 1211
         OI    RSRGET(REG6),B'10000000'                            1211
*                  RSRUPD = OFF;     /* NO UPDATE  */              1212
         NI    RSRUPD(REG6),B'11110111'                            1212
*                  RSRDS = ''B;                                    1213
         NI    RSRDS(REG6),B'00011111'                             1213
*                  RSRWF = ON;       /* WORKFILE  */               1214
*                  RSRDIR = ON;      /* DIRECT  */                 1215
*                  RSRKEY = ON;      /* KEY  */                    1216
*                                                                  1216
         OI    RSRWF(REG6),B'10010100'                             1216
*                /* CALL TO MODULE IDCRS06 FOR PROCEDURE RECMGMT     */
*                CALL RECMGMT;                                     1217
         L     @15,@CV03452                                        1217
         BALR  @14,@15                                             1217
*                  RFY RTNREG RSTD;                                1218
*                  TESTRC = RTNREG;                                1219
         STH   RTNREG,TESTRC(,REG6)                                1219
*                  RFY RTNREG UNRSTD;                              1220
*                END;                                              1221
*                                                                  1221
*                GRABSFXT = OFF;       /*RESET XLATE OPT             */
*                GRABSNRN = OFF;       /*RESET NRF OPT               */
*                                                                  1223
         L     @07,RSGRABCU(,REG6)                                 1223
         NI    GRABSFXT(@07),B'01111101'                           1223
*        /************************************************************/
*        /*                                                          */
*        /*   RECORD NOT FOUND - FOR NON-RESET VOLUME THE            */
*        /*   RECORD SHOULD HAVE BEEN FOUND. THIS MEANS THAT THERE   */
*        /*   IS AN ERROR IN THE DSDIRS FOR THE NON-RESET VOLUME     */
*        /*   BEING PROCESSED. TREAT IT AS A BAD VOLUME RECORD       */
*        /*   AND DISALLOW RESET UNLESS IGNORE WAS SPECIFIED.        */
*        /*                                                          */
*        /************************************************************/
*                                                                  1224
*                IF RABNRF = ON THEN                               1224
         L     @07,GRABCURR(,@07)                                  1224
         TM    RABNRF(@07),B'00000010'                             1224
         BNO   @RF01224                                            1224
*                  DO;                                             1225
*                    RABNRF = OFF;                                 1226
         NI    RABNRF(@07),B'11111101'                             1226
*                    RSBDVOLS = ON;                                1227
         OI    RSBDVOLS(REG6),B'00000010'                          1227
*                  END;                                            1228
*                                                                  1228
*        /************************************************************/
*        /*                                                          */
*        /*   FOR NON-RESET VOLUME, ONLY CARE ABOUT REQUESTS FOR     */
*        /*   SPACE BY DATA OR INDEX ON A RESET VOLUME.              */
*        /*                                                          */
*        /************************************************************/
*                                                                  1229
*                ELSE                                              1229
*                  IF RSWFCRA=OFF & RSWDLCAT=OFF THEN;             1229
*                                                                  1229
         B     @RC01224                                            1229
@RF01224 L     @07,RSGRABCU(,REG6)                                 1229
         L     @07,GRABCURR(,@07)                                  1229
         TM    RSWFCRA(@07),B'11000000'                            1229
         BZ    @RT01229                                            1229
*        /************************************************************/
*        /*                                                          */
*        /*   WE NOW KNOW THAT AN OBJECT ON A RESET VOLUME CLAIMED   */
*        /*   SPACE ON A NON-RESET VOLUME PRIOR TO RESET. SINCE THE  */
*        /*   NON-RESET VOLUME IS NOT BEING RESET, WE ASSUME THAT    */
*        /*   THE CATALOG MUST CORRESPOND TO THE CRA FOR THAT        */
*        /*   VOLUME.                                                */
*        /*                                                          */
*        /*   WE WILL READ THE CATALOG RECORD (DATA OR INDEX)        */
*        /*   CORRESPONDING TO THE DSDIR BEING PROCESSED. WE WILL    */
*        /*   ASSUME THAT THE EXTENTS ALLOCATED TO THAT OBJECT FOR   */
*        /*   THIS DSDIR-VOLUME AS REFLECTED BY THE VGOS IN THE      */
*        /*   CATALOG DO INDEED REPRESENT THE SPACE ALLOCATED        */
*        /*   TO THIS OBJECT ON THIS VOLUME. FROM THIS VANTAGE POINT */
*        /*   WE WILL ENSURE THE VALIDITY OF THE OBJECT BEING        */
*        /*   RESTORED (SEE THE PROCEDURE PROLOGUE).                 */
*        /*                                                          */
*        /************************************************************/
*                                                                  1231
*                  ELSE                                            1231
*  VLNR0010:                                                       1231
*                    DO;                                           1231
@RF01229 DS    0H                                                  1231
VLNR0010 DS    0H                                                  1232
*                      RSGRABCU = ADDR(GRABSCA);                   1232
         L     @07,RSIOTBL(,REG6)                                  1232
         LA    @04,GRABSCA(,@07)                                   1232
         ST    @04,RSGRABCU(,REG6)                                 1232
*                      GRABCURR = GRABRAB1;                        1233
*                                                                  1233
         L     @15,GRABRAB1(,@04)                                  1233
         ST    @15,GRABCURR(,@04)                                  1233
*                      DO;                                         1234
*                        RSRTYPE = ''B;                            1235
         MVI   RSRTYPE(REG6),X'00'                                 1235
*                        RSRGET = ON;      /* GETRCD  */           1236
         OI    RSRGET(REG6),B'10000000'                            1236
*                        RSRUPD = OFF;     /* NO UPDATE  */        1237
         NI    RSRUPD(REG6),B'11110111'                            1237
*                        RSRDS = ''B;                              1238
         NI    RSRDS(REG6),B'00011111'                             1238
*                        RSRCAT = ON;      /* CATALOG  */          1239
*                        RSRDIR = ON;      /* DIRECT  */           1240
*                        RSRKEY = OFF;     /* CNV  */              1241
         OI    RSRCAT(REG6),B'01000100'                            1241
         NI    RSRKEY(REG6),B'11101111'                            1241
*                        RSVIAFCR = ON;  /*INDICATE CRA SEARCH*/   1242
         OI    RSVIAFCR(REG6),B'10000000'                          1242
*                        RSVIACRA = NULLCRA; /*SET VOLSER */       1243
         MVC   RSVIACRA(6,REG6),@CC00780                           1243
*                        RSVIACIN = ADDR(ADDR(GRABSWF)->GRABRAB2->RABBU
*)->RCDCINO; /*SET CI NUMBER */                                    1244
*                                                                  1244
         L     @07,GRABRAB2(,@07)                                  1244
         MVC   RSVIACIN(3,REG6),RCDCINO+8(@07)                     1244
*                      /* CALL TO MODULE IDCRS05 FOR PROCEDURE GETVIA*/
*                      CALL GETVIA;                                1245
         L     @15,@CV03436                                        1245
         BALR  @14,@15                                             1245
*                      END;                                        1246
*                                                                  1246
*        /************************************************************/
*        /*                                                          */
*        /*   BAD VOLUME SET OF RECORDS IF DATA OR INDEX CANNOT      */
*        /*   BE LOCATED                                             */
*        /*                                                          */
*        /************************************************************/
*                                                                  1247
*                      IF RABNRF = ON THEN                         1247
         L     @07,RSGRABCU(,REG6)                                 1247
         L     @07,GRABCURR(,@07)                                  1247
         TM    RABNRF(@07),B'00000010'                             1247
         BNO   @RF01247                                            1247
*                        DO;                                       1248
*                          RABNRF = OFF;                           1249
         NI    RABNRF(@07),B'11111101'                             1249
*                          RSBDVOLS = ON;                          1250
         OI    RSBDVOLS(REG6),B'00000010'                          1250
*                        END;                                      1251
*                                                                  1251
*        /************************************************************/
*        /*                                                          */
*        /*  BAD DSDIR IF NOT ASSOCIATED WITH DATA OR INDEX          */
*        /*                                                          */
*        /************************************************************/
*                                                                  1252
*                      ELSE                                        1252
*                        IF (RCDID^=DATAID) & (RCDID^=INDEXID) THEN
         B     @RC01247                                            1252
@RF01247 L     @07,RSGRABCU(,REG6)                                 1252
         LA    @04,8                                               1252
         AL    @04,GRABCURR(,@07)                                  1252
         CLI   RCDID(@04),C'D'                                     1252
         BE    @RF01252                                            1252
         CLI   RCDID(@04),C'I'                                     1252
         BE    @RF01252                                            1252
*                          RSBDVOLS = ON;                          1253
*                                                                  1253
         OI    RSBDVOLS(REG6),B'00000010'                          1253
*        /************************************************************/
*        /*                                                          */
*        /*  FIND ALL OF THE VGOS FOR THE CATALOG OBJECT             */
*        /*       BAD DSDIR IF NO VGOS FOR THIS VOLUME-DSDIR         */
*        /*                                                          */
*        /************************************************************/
*                                                                  1254
*                        ELSE                                      1254
*  VLNRVGO:                                                        1254
*                          DO;                                     1254
         B     @RC01252                                            1254
@RF01252 DS    0H                                                  1254
VLNRVGO  DS    0H                                                  1255
*        RFY SNDSDIR BASED(RSPVSNT8->RSFAENT); /*DSDIR ADDR          */
*                                                                  1255
*                            DO;                                   1256
*                              GRABBB = GRABCURR;                  1257
         L     @07,RSGRABCU(,REG6)                                 1257
         L     @04,GRABCURR(,@07)                                  1257
         ST    @04,GRABBB(,@07)                                    1257
*                              RSWGCODE = GCVOLGO;                 1258
         MVI   RSWGCODE(REG6),X'03'                                1258
*                                      /*SPECIFY GROUP CODE          */
*                              RSWFONE = OFF;                      1259
         NI    RSWFONE(REG6),B'01111111'                           1259
*                                      /*FIND ALL OCCURRENCES        */
*                              /* CALL THE FIND SUBROUTINE */      1260
*                                                                  1260
*                            /* CALL TO MODULE IDCRS04 FOR PROCEDURE FI
*D                                                                   */
*                            CALL FIND;                            1260
         L     @15,@CV03435                                        1260
         BALR  @14,@15                                             1260
*                            END;                                  1261
*                            IF RSFENTLN ^= 0 THEN                 1262
         L     @07,RSWASNVT(,REG6)                                 1262
         CLI   RSFENTLN(@07),0                                     1262
         BE    @RF01262                                            1262
*                              RSPVSNTC = RSWASNVT; /*CAT VGO TBL ADR*/
         ST    @07,RSPVSNTC(,REG6)                                 1263
*                            IF (RSFENTLN = 0) × (RSFNRF = ON) THEN
@RF01262 L     @07,RSWASNVT(,REG6)                                 1264
         CLI   RSFENTLN(@07),0                                     1264
         BE    @RT01264                                            1264
         TM    RSFNRF(@07),B'10000000'                             1264
         BNO   @RF01264                                            1264
@RT01264 DS    0H                                                  1265
*                                      /*NO VGOS OR I/O ERROR        */
*                              RSBDVOLS = ON;                      1265
*                                                                  1265
         OI    RSBDVOLS(REG6),B'00000010'                          1265
*        /************************************************************/
*        /*                                                          */
*        /*  TRY TO FIND THE VGO FIRST FOR THIS DSDIR BY MATCHING    */
*        /*  THE VOLUME SERIAL NUMBER AND DSDIR SEQUENCE NUMBER. IF  */
*        /*  NOT FOUND, DELETE THE DSDIR.                            */
*        /*                                                          */
*        /************************************************************/
*                                                                  1266
*                            ELSE                                  1266
*                              DO;                                 1266
         B     @RC01264                                            1266
@RF01264 DS    0H                                                  1267
*                                RSFAENT = RSFCADR;                1267
         L     @07,RSWASNVT(,REG6)                                 1267
         L     @04,RSFCADR(,@07)                                   1267
         ST    @04,RSFAENT(,@07)                                   1267
*                                DO RSFCNDX = 1 TO RSFHNDX         1268
*                                 WHILE ((SNVOLSER^=VOLSRSER) ×    1268
*                                 (SDSDIRSN^=RSPVSNT8->RSFAENT->SNSN));
         LA    @07,1                                               1268
         B     @DE01268                                            1268
@DL01268 L     @07,RSWASNVT(,REG6)                                 1268
         L     @07,RSFAENT(,@07)                                   1268
         L     @04,RSVTBENT(,REG6)                                 1268
         CLC   SNVOLSER(6,@07),VOLSRSER(@04)                       1268
         BNE   @DB01268                                            1268
         L     @04,RSPVSNT8(,REG6)                                 1268
         L     @04,RSFAENT(,@04)                                   1268
         CLC   SDSDIRSN(2,@07),SNSN(@04)                           1268
         BE    @DC01268                                            1268
@DB01268 DS    0H                                                  1269
*                                  RSFAENT = RSFAENT + RSFENTLN;   1269
         L     @07,RSWASNVT(,REG6)                                 1269
         SLR   @04,@04                                             1269
         IC    @04,RSFENTLN(,@07)                                  1269
         AL    @04,RSFAENT(,@07)                                   1269
         ST    @04,RSFAENT(,@07)                                   1269
*                                END;                              1270
         L     @04,RSWASNVT(,REG6)                                 1270
         LA    @07,1                                               1270
         AH    @07,RSFCNDX(,@04)                                   1270
@DE01268 L     @04,RSWASNVT(,REG6)                                 1270
         STH   @07,RSFCNDX(,@04)                                   1270
         L     @04,RSWASNVT(,REG6)                                 1270
         CH    @07,RSFHNDX(,@04)                                   1270
         BNH   @DL01268                                            1270
@DC01268 DS    0H                                                  1271
*                                IF RSFCNDX > RSFHNDX THEN         1271
         L     @07,RSWASNVT(,REG6)                                 1271
         LH    @04,RSFCNDX(,@07)                                   1271
         CH    @04,RSFHNDX(,@07)                                   1271
         BNH   @RF01271                                            1271
*                                  RSBDVOLS = ON;                  1272
*                                                                  1272
         OI    RSBDVOLS(REG6),B'00000010'                          1272
*        /************************************************************/
*        /*                                                          */
*        /*  VGO IN CATALOG MUST BE COMPARED AGAINST RESET OBJECT    */
*        /*                                                          */
*        /************************************************************/
*                                                                  1273
*                                ELSE                              1273
*                                  CALL VLNCOMPR;                  1273
         B     @RC01271                                            1273
@RF01271 BAL   @14,VLNCOMPR                                        1273
*                              END;                                1274
@RC01271 DS    0H                                                  1275
*        RFY SNDSDIR;                  /*REVERT                      */
@RC01264 DS    0H                                                  1276
*                          END VLNRVGO;                            1276
*                    END VLNR0010;                                 1277
@RC01252 DS    0H                                                  1277
@RC01247 DS    0H                                                  1278
*              END;                                                1278
@RT01229 DS    0H                                                  1278
@RC01224 DS    0H                                                  1279
*        /************************************************************/
*        /*                                                          */
*        /*   REORIENT TO THE WORKFILE AND DSDIRS                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  1279
*          RSGRABCU = ADDR(GRABSWF);                               1279
@RT01199 DS    0H                                                  1279
@RC01197 L     @07,RSIOTBL(,REG6)                                  1279
         ST    @07,RSGRABCU(,REG6)                                 1279
*          GRABCURR = GRABRAB1;                                    1280
         L     @04,GRABRAB1(,@07)                                  1280
         ST    @04,GRABCURR(,@07)                                  1280
*          RSWASNVT = RSPVSNT8;                                    1281
         L     @07,RSPVSNT8(,REG6)                                 1281
         ST    @07,RSWASNVT(,REG6)                                 1281
*          RSRDS = ''B;                /* CLEAR FILE OPTIONS         */
         NI    RSRDS(REG6),B'00011111'                             1282
*          RSRWF = ON;                 /*DEFAULT GET/PUT TO WF       */
*                                                                  1283
         OI    RSRWF(REG6),B'10000000'                             1283
*        /************************************************************/
*        /*                                                          */
*        /*  DELETE THE DSDIR - VGO IS A NOGO                        */
*        /*                                                          */
*        /*  THE DSDIR IS BEING DELETED FOR A NON-RESET VOLUME       */
*        /*  BECAUSE, PRIOR TO THE RESET, AN OBJECT, WHICH WAS       */
*        /*  RESET, DESCRIBED SPACE ON THAT VOLUME, BUT THE RESET    */
*        /*  OBJECT EITHER DOES NOT EXIST OR DOES NOT DESCRIBE       */
*        /*  THE SPACE.                                              */
*        /*                                                          */
*        /************************************************************/
*                                                                  1284
*          IF RSPVDELT = ON THEN                                   1284
         TM    RSPVDELT(REG6),B'00100000'                          1284
         BNO   @RF01284                                            1284
*  VLNRDELT:                                                       1285
*            DO;                                                   1285
VLNRDELT DS    0H                                                  1286
*              GRABBB = GRABCURR;      /*BASE FOR DELETE             */
         L     @07,RSGRABCU(,REG6)                                 1286
         L     @04,GRABCURR(,@07)                                  1286
         ST    @04,GRABBB(,@07)                                    1286
*              /* CALL TO MODULE IDCRS04 FOR PROCEDURE DELGO         */
*              CALL DELGO;                                         1287
         L     @15,@CV03434                                        1287
         BALR  @14,@15                                             1287
*            END VLNRDELT;                                         1288
*                                                                  1288
*        /************************************************************/
*        /*                                                          */
*        /* MARK THE VGOS UNUSABLE                                   */
*        /*                                                          */
*        /*   MARK THE OBJECT UNUSABLE IF THE EXTENTS FOR THIS       */
*        /*   VOLUME-DSDIR ARE NOT COMPATIBLE WITH THE SPACE         */
*        /*   DESCRIBED FOR THIS SAME OBJECT IN THE CATALOG.         */
*        /*                                                          */
*        /************************************************************/
*                                                                  1289
*          IF RSMUNUS = ON THEN                                    1289
@RF01284 TM    RSMUNUS(REG6),B'10000000'                           1289
         BNO   @RF01289                                            1289
*  VLNRMUN:                                                        1290
*            DO;                                                   1290
VLNRMUN  DS    0H                                                  1291
*              RSWASNVT = RSPVSNT3;                                1291
         L     @07,RSPVSNT3(,REG6)                                 1291
         ST    @07,RSWASNVT(,REG6)                                 1291
*              RSASDSDI = ON;          /*SPACE CONFLICT              */
         OI    RSASDSDI(REG6),B'01000000'                          1292
*              GRABCURR = GRABRAB2;                                1293
         L     @07,RSGRABCU(,REG6)                                 1293
         L     @04,GRABRAB2(,@07)                                  1293
         ST    @04,GRABCURR(,@07)                                  1293
*              CALL MARKUNUS;                                      1294
*                                                                  1294
*                                                                  1294
         BAL   @14,MARKUNUS                                        1294
*              DO;                                                 1295
*                RSRTYPE = ''B;                                    1296
         MVI   RSRTYPE(REG6),X'00'                                 1296
*                RSRUPDT = ON;     /* UPDRCD  */                   1297
         OI    RSRUPDT(REG6),B'00100000'                           1297
*                RSRUPD = ON;      /* UPDATE  */                   1298
         OI    RSRUPD(REG6),B'00001000'                            1298
*                RSRDS = ''B;                                      1299
         NI    RSRDS(REG6),B'00011111'                             1299
*                RSRWF = ON;       /* WORKFILE  */                 1300
*                RSRDIR = ON;      /* DIRECT  */                   1301
*                RSRKEY = ON;      /* KEY  */                      1302
*                                                                  1302
         OI    RSRWF(REG6),B'10010100'                             1302
*              /* CALL TO MODULE IDCRS06 FOR PROCEDURE RECMGMT       */
*              CALL RECMGMT;                                       1303
         L     @15,@CV03452                                        1303
         BALR  @14,@15                                             1303
*                RFY RTNREG RSTD;                                  1304
*                TESTRC = RTNREG;                                  1305
         STH   RTNREG,TESTRC(,REG6)                                1305
*                RFY RTNREG UNRSTD;                                1306
*              END;                                                1307
*            END VLNRMUN;                                          1308
*                                                                  1308
*        /************************************************************/
*        /*                                                          */
*        /* RETURN SPACE NO LONGER USED                              */
*        /*                                                          */
*        /*   IF THE RESET OBJECT NO LONGER CLAIMS SPACE OR          */
*        /*   CLAIMS LESS SPACE FOR THIS VOLUME THEN RETURN          */
*        /*   SUBALLOCATED SPACE TO THE SPACE MAP. IF UNIQUES        */
*        /*   ARE NO LONGER USED, ISSUE AN INFORMATIONAL             */
*        /*   MESSAGE(IDC11033I).                                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  1309
*          IF RSRETSPC = ON THEN                                   1309
@RF01289 TM    RSRETSPC(REG6),B'00000100'                          1309
         BNO   @RF01309                                            1309
*  VLNRSPC:                                                        1310
*            DO;                                                   1310
*                                                                  1310
VLNRSPC  DS    0H                                                  1311
*        /************************************************************/
*        /*                                                          */
*        /*   RE-GET THE DATA OR INDEX FROM THE CATALOG              */
*        /*   WHICH MAY BE OVERLAID BY AN EXTENSION RECORD.          */
*        /*                                                          */
*        /************************************************************/
*                                                                  1311
*              RSGRABCU = ADDR(GRABSCA);                           1311
         L     @07,RSIOTBL(,REG6)                                  1311
         LA    @04,GRABSCA(,@07)                                   1311
         ST    @04,RSGRABCU(,REG6)                                 1311
*              GRABCURR = GRABRAB1;                                1312
*                                                                  1312
         L     @15,GRABRAB1(,@04)                                  1312
         ST    @15,GRABCURR(,@04)                                  1312
*              DO;                                                 1313
*                RSRTYPE = ''B;                                    1314
         MVI   RSRTYPE(REG6),X'00'                                 1314
*                RSRGET = ON;      /* GETRCD  */                   1315
         OI    RSRGET(REG6),B'10000000'                            1315
*                RSRUPD = OFF;     /* NO UPDATE  */                1316
         NI    RSRUPD(REG6),B'11110111'                            1316
*                RSRDS = ''B;                                      1317
         NI    RSRDS(REG6),B'00011111'                             1317
*                RSRCAT = ON;      /* CATALOG  */                  1318
*                RSRDIR = ON;      /* DIRECT  */                   1319
*                RSRKEY = OFF;     /* CNV  */                      1320
         OI    RSRCAT(REG6),B'01000100'                            1320
         NI    RSRKEY(REG6),B'11101111'                            1320
*                RSVIAFCR = ON;  /*INDICATE CRA SEARCH*/           1321
         OI    RSVIAFCR(REG6),B'10000000'                          1321
*                RSVIACRA = NULLCRA; /*SET VOLSER */               1322
         MVC   RSVIACRA(6,REG6),@CC00780                           1322
*                RSVIACIN = ADDR(ADDR(GRABSWF)->GRABRAB2->RABBUF)->RCDC
*NO; /*SET CI NUMBER */                                            1323
*                                                                  1323
         L     @07,GRABRAB2(,@07)                                  1323
         MVC   RSVIACIN(3,REG6),RCDCINO+8(@07)                     1323
*              /* CALL TO MODULE IDCRS05 FOR PROCEDURE GETVIA        */
*              CALL GETVIA;                                        1324
         L     @15,@CV03436                                        1324
         BALR  @14,@15                                             1324
*              END;                                                1325
*              RSRDS = ''B;            /*CLEAR FILE OPTIONS          */
         NI    RSRDS(REG6),B'00011111'                             1326
*              RSRWF = ON;             /*DEFAULT GET/PUT TO WF       */
*                                                                  1327
         OI    RSRWF(REG6),B'10000000'                             1327
*        /************************************************************/
*        /*                                                          */
*        /*   IF IT IS FOR UNIQUE SPACE, ISSUE A MESSAGE(IDC11033I)  */
*        /*   TO TELL THE USER THAT THE UNIQUE EXISTS ON THE PACK    */
*        /*   WITH NO CORRESPONDING CATALOG ENTRY                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  1328
*              IF CUNIQ = ON THEN                                  1328
         L     @07,RSGRABCU(,REG6)                                 1328
         LA    @04,8                                               1328
         AL    @04,GRABCURR(,@07)                                  1328
         TM    CUNIQ(@04),B'01000000'                              1328
         BNO   @RF01328                                            1328
*                DO;                                               1329
*                  IF RSPVDELT = ON THEN /*NO SPACE MATCH            */
*                                                                  1330
         TM    RSPVDELT(REG6),B'00100000'                          1330
         BNO   @RF01330                                            1330
*                    DO;                                           1331
*                    /*CALL CKERR*/                                1332
*                      RSCKERR = RSCKERR && RSCKERR;               1332
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1332
*                      RSCKERN = RSE044;                           1333
         MVC   RSCKERN(2,REG6),@CH00595                            1333
*                      RSCKTERM = 'RETU';                          1334
         MVC   RSCKTERM(4,REG6),@CC03500                           1334
*                      RSCKMVAR(1) = ADDR(CNAME);                  1335
         LA    @07,CNAME(,@04)                                     1335
         ST    @07,RSCKMVAR(,REG6)                                 1335
*                      RSCKMVAR(2) = ADDR(VOLSRSER);               1336
*                                                                  1336
         L     @07,RSVTBENT(,REG6)                                 1336
         LA    @07,VOLSRSER(,@07)                                  1336
         ST    @07,RSCKMVAR+4(,REG6)                               1336
*                    /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR   */
*                    CALL CKERR;                                   1337
         L     @15,@CV03443                                        1337
         BALR  @14,@15                                             1337
*                    END;                                          1338
*                END;                                              1339
*                                                                  1339
*        /************************************************************/
*        /*                                                          */
*        /*   IF THE OBJECT WAS SUBALLOCATED, THEN RETURN ANY        */
*        /*   UNUSED OR UNMATCHED EXTENTS FOR FUTURE SUBALLOCATION.  */
*        /*                                                          */
*        /************************************************************/
*                                                                  1340
*              ELSE                                                1340
*  VLNRSUBS:     DO;                                               1340
*                                                                  1340
         B     @RC01328                                            1340
@RF01328 DS    0H                                                  1340
VLNRSUBS DS    0H                                                  1341
*        /************************************************************/
*        /*                                                          */
*        /*  CHECK FOR ANY TRACKS STILL AVAILABLE                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  1341
*                  RSRETSPC = OFF;     /*RESET NO SPACE AVAILABLE    */
         NI    RSRETSPC(REG6),B'11111011'                          1341
*                  DO TMPSZ = 1 TO RSMAPSIZ;                       1342
         LA    @07,1                                               1342
         B     @DE01342                                            1342
@DL01342 DS    0H                                                  1343
*                    IF RSCABMAP->BMAP(TMPSZ:TMPSZ) ^= '00'X THEN  1343
         L     @07,TMPSZ(,REG6)                                    1343
         L     @04,RSCABMAP(,REG6)                                 1343
         ALR   @04,@07                                             1343
         BCTR  @04,0                                               1343
         CLI   BMAP(@04),X'00'                                     1343
         BE    @RF01343                                            1343
*                      RSRETSPC = ON; /*DEFINITELY SPACE TO RETURN   */
         OI    RSRETSPC(REG6),B'00000100'                          1344
*                  END;                                            1345
*                                                                  1345
@RF01343 LA    @07,1                                               1345
         AL    @07,TMPSZ(,REG6)                                    1345
@DE01342 ST    @07,TMPSZ(,REG6)                                    1345
         C     @07,RSMAPSIZ(,REG6)                                 1345
         BNH   @DL01342                                            1345
*        /************************************************************/
*        /*                                                          */
*        /*   MAP UNUSED TRACKS(IN CATALOG VGO MAP) INTO THE         */
*        /*   PRIMARY MAP                                            */
*        /*   DUMP POINT RSUA - SPACE BEING RETURNED TO THE MAP      */
*        /*                                                          */
*        /************************************************************/
*                                                                  1346
*                  IF RSRETSPC = ON THEN                           1346
         TM    RSRETSPC(REG6),B'00000100'                          1346
         BNO   @RF01346                                            1346
*                    DO;                                           1347
*                                                                  1347
*                      IF GDTDBG = NULLPTR                         1348
*                        THEN;                                     1348
         L     @07,GDTDBG(,REG5)                                   1348
         LTR   @07,@07                                             1348
         BZ    @RT01348                                            1348
*                        ELSE                                      1350
*                          CALL IDCDB010(GDTTBL,'RSUA');           1350
*                                                                  1350
         ST    REG5,@AL00001                                       1350
         LA    @07,@CC03618                                        1350
         ST    @07,@AL00001+4                                      1350
         MVI   @AL00001+4,X'80'                                    1350
         L     @15,GDTDBG(,REG5)                                   1350
         LA    @01,@AL00001                                        1350
         BALR  @14,@15                                             1350
*                      RSPVSETB = ''B; /*CLEAR SETBITS OPTIONS       */
@RT01348 MVI   RSPVSETB(REG6),X'00'                                1351
*                      RSSETMAP = ON;                              1352
*                      RSST1TO1 = ON; /*SET AVAILABLE TRACKS         */
         OI    RSSETMAP(REG6),B'01010000'                          1353
*                      RSTGBMAP = RSPBMAP; /*COLLECT IN PRIM MAP     */
         L     @07,RSPBMAP(,REG6)                                  1354
         ST    @07,RSTGBMAP(,REG6)                                 1354
*                      RSSTBMAP = RSCABMAP; /*UNUSED TRKS IN CAT MAP */
         L     @07,RSCABMAP(,REG6)                                 1355
         ST    @07,RSSTBMAP(,REG6)                                 1355
*                      CALL SETBITS;                               1356
         BAL   @14,SETBITS                                         1356
*                      RSPVNRP = ON; /*SPACE MAP TO BE UPDATED       */
         OI    RSPVNRP(REG6),B'00010000'                           1357
*                    END;                                          1358
*                                                                  1358
*                END VLNRSUBS;                                     1359
@RF01346 DS    0H                                                  1360
*            END VLNRSPC;                                          1360
*                                                                  1360
@RC01328 DS    0H                                                  1361
*        /************************************************************/
*        /*                                                          */
*        /*   FREE THE VGO SNTABS FOR REUSE                          */
*        /*                                                          */
*        /************************************************************/
*                                                                  1361
*          IF RSPVSNT3 ^= 0 THEN                                   1361
@RF01309 L     @07,RSPVSNT3(,REG6)                                 1361
         LTR   @07,@07                                             1361
         BZ    @RF01361                                            1361
*            RSPVSNT3->RSFENTLN = 0;                               1362
         MVI   RSFENTLN(@07),X'00'                                 1362
*          IF RSPVSNTC ^= 0 THEN                                   1363
@RF01361 L     @07,RSPVSNTC(,REG6)                                 1363
         LTR   @07,@07                                             1363
         BZ    @RF01363                                            1363
*            RSPVSNTC->RSFENTLN = 0;                               1364
*                                                                  1364
         MVI   RSFENTLN(@07),X'00'                                 1364
*        /************************************************************/
*        /*                                                          */
*        /*  REACTIVATE THE DSDIR SN TABLE                           */
*        /*                                                          */
*        /************************************************************/
*                                                                  1365
*          RSWASNVT = RSPVSNT8;                                    1365
@RF01363 L     @07,RSPVSNT8(,REG6)                                 1365
         ST    @07,RSWASNVT(,REG6)                                 1365
*          RSGRABCU = ADDR(GRABSWF); /*DEFAULT WORKFILE              */
         L     @07,RSIOTBL(,REG6)                                  1366
         ST    @07,RSGRABCU(,REG6)                                 1366
*        END VLNRDSDI;                                             1367
         L     @04,RSWASNVT(,REG6)                                 1367
         LA    @07,1                                               1367
         AH    @07,RSFCNDX(,@04)                                   1367
@DE01190 L     @04,RSWASNVT(,REG6)                                 1367
         STH   @07,RSFCNDX(,@04)                                   1367
         L     @04,RSWASNVT(,REG6)                                 1367
         CH    @07,RSFHNDX(,@04)                                   1367
         BNH   @DL01190                                            1367
*        /************************************************************/
*        /*                                                          */
*        /*  IF ANY SPACE WAS RETURNED FOR SUBALLOCATION, THEN       */
*        /*  UPDATE THE SPACE MAP FOR THE VOLUME.                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  1368
*        IF RSPVNRP = ON THEN                                      1368
         TM    RSPVNRP(REG6),B'00010000'                           1368
         BNO   @RF01368                                            1368
*  VLNRUPSM:                                                       1369
*          DO;                                                     1369
VLNRUPSM DS    0H                                                  1370
*            RSWFBMAP = RSWKBMAP;      /*SPACE MAP STG FOR FIND      */
         L     @07,RSWKBMAP(,REG6)                                 1370
         ST    @07,RSWFBMAP(,REG6)                                 1370
*            RSWFBMLN = RSMAPSIZ;      /*SIZE OF MAP                 */
         L     @07,RSMAPSIZ(,REG6)                                 1371
         STH   @07,RSWFBMLN(,REG6)                                 1371
*            GRABCURR = GRABRAB1;      /*VOLUME RECORD AS BASE       */
*                                                                  1372
         L     @07,RSGRABCU(,REG6)                                 1372
         L     @04,GRABRAB1(,@07)                                  1372
         ST    @04,GRABCURR(,@07)                                  1372
*            DO;                                                   1373
*              GRABBB = GRABCURR;                                  1374
         ST    @04,GRABBB(,@07)                                    1374
*              RSWGCODE = GCSPCMAP;    /*SPECIFY GROUP CODE          */
         MVI   RSWGCODE(REG6),X'05'                                1375
*              RSWFONE = OFF;          /*FIND ALL OCCURRENCES        */
         NI    RSWFONE(REG6),B'01111111'                           1376
*              /* CALL THE FIND SUBROUTINE */                      1377
*                                                                  1377
*            /* CALL TO MODULE IDCRS04 FOR PROCEDURE FIND            */
*            CALL FIND;                                            1377
         L     @15,@CV03435                                        1377
         BALR  @14,@15                                             1377
*            END;                                                  1378
*                                                                  1378
*        /************************************************************/
*        /*                                                          */
*        /*  IF THERE IS NO SPACE MAP OR IT WAS THE WRONG LENGTH,    */
*        /*  ISSUE MESSAGE IDC11034I.                                */
*        /*                                                          */
*        /************************************************************/
*                                                                  1379
*            IF (RSFENTLN=0) × (RSFLENBM^=RSMAPSIZ) THEN           1379
*                                                                  1379
         L     @07,RSWASNVT(,REG6)                                 1379
         CLI   RSFENTLN(@07),0                                     1379
         BE    @RT01379                                            1379
         LH    @07,RSFLENBM(,@07)                                  1379
         C     @07,RSMAPSIZ(,REG6)                                 1379
         BE    @RF01379                                            1379
@RT01379 DS    0H                                                  1380
*              DO;                                                 1380
*              /*CALL CKERR*/                                      1381
*                RSCKERR = RSCKERR && RSCKERR;                     1381
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1381
*                RSCKERN = RSE045;                                 1382
         MVC   RSCKERN(2,REG6),@CH00976                            1382
*                RSCKTERM = 'RETU';                                1383
         MVC   RSCKTERM(4,REG6),@CC03500                           1383
*                RSCKMVAR(1) = ADDR(VOLSRSER);                     1384
*                                                                  1384
         L     @07,RSVTBENT(,REG6)                                 1384
         LA    @07,VOLSRSER(,@07)                                  1384
         ST    @07,RSCKMVAR(,REG6)                                 1384
*              /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR         */
*              CALL CKERR;                                         1385
         L     @15,@CV03443                                        1385
         BALR  @14,@15                                             1385
*              END;                                                1386
*                                                                  1386
*        /************************************************************/
*        /*                                                          */
*        /*  RETURN SUBALLOCATED SPACE                               */
*        /*                                                          */
*        /************************************************************/
*                                                                  1387
*            ELSE                                                  1387
*              DO;                                                 1387
         B     @RC01379                                            1387
@RF01379 DS    0H                                                  1388
*                RSPVSETB = ''B;       /*CLEAR SETBITS OPTIONS       */
         MVI   RSPVSETB(REG6),X'00'                                1388
*                RSSETMAP = ON;        /*MAP TO MAP                  */
*                RSST1TO1 = ON;        /*MAKE TRACKS AVAILABLE       */
         OI    RSSETMAP(REG6),B'01010000'                          1390
*                RSTGBMAP = RSFABMAP;  /*SET SPACE MAP               */
         L     @07,RSWASNVT(,REG6)                                 1391
         L     @07,RSFABMAP(,@07)                                  1391
         ST    @07,RSTGBMAP(,REG6)                                 1391
*                RSSTBMAP = RSPBMAP;   /*TRACKS AVAILABLE IN PRIMARY */
         L     @07,RSPBMAP(,REG6)                                  1392
         ST    @07,RSSTBMAP(,REG6)                                 1392
*                CALL SETBITS;                                     1393
*                                                                  1393
         BAL   @14,SETBITS                                         1393
*        /************************************************************/
*        /*                                                          */
*        /*               MOFIFY THE SPACE MAP                       */
*        /*                                                          */
*        /************************************************************/
*                                                                  1394
*                /* CALL TO MODULE IDCRS04 FOR PROCEDURE MODGO       */
*                CALL MODGO;                                       1394
*                                                                  1394
         L     @15,@CV03433                                        1394
         BALR  @14,@15                                             1394
*        /************************************************************/
*        /*                                                          */
*        /*  INFORM THE USER THAT THE SPACE MAP WAS MODIFIED         */
*        /*  MESSAGE - IDC11029I.                                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  1395
*                                                                  1395
*                DO;                                               1395
*                /*CALL CKERR*/                                    1396
*                  RSCKERR = RSCKERR && RSCKERR;                   1396
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1396
*                  RSCKERN = RSE032;                               1397
         MVC   RSCKERN(2,REG6),@CH00215                            1397
*                  RSCKTERM = 'RETU';                              1398
         MVC   RSCKTERM(4,REG6),@CC03500                           1398
*                  RSCKMVAR(1) = ADDR(VOLSRSER);                   1399
*                                                                  1399
         L     @07,RSVTBENT(,REG6)                                 1399
         LA    @07,VOLSRSER(,@07)                                  1399
         ST    @07,RSCKMVAR(,REG6)                                 1399
*                /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR       */
*                CALL CKERR;                                       1400
         L     @15,@CV03443                                        1400
         BALR  @14,@15                                             1400
*                END;                                              1401
*              END;                                                1402
*            RSFENTLN = 0;             /*FREE SPACE MAP SNTAB        */
@RC01379 L     @07,RSWASNVT(,REG6)                                 1403
         MVI   RSFENTLN(@07),X'00'                                 1403
*          END VLNRUPSM;                                           1404
*                                                                  1404
*        /************************************************************/
*        /*                                                          */
*        /*   IF ANY LOGICAL OR PHYSICAL I/O ERRORS OCCURRED IN      */
*        /*   PROCESSING THE NON-RESET VOLUME, FORCE AN IGNORE-ONLY  */
*        /*   RESET. ISSUE MESSAGE FOR THIS BAD VOLUME (IDC31035I).  */
*        /*                                                          */
*        /************************************************************/
*                                                                  1405
*        IF RSBDVOLS = ON THEN                                     1405
@RF01368 TM    RSBDVOLS(REG6),B'00000010'                          1405
         BNO   @RF01405                                            1405
*          DO;                                                     1406
*            RSBADVOL = ON;            /*BAD VOLUME EXISTS           */
*                                                                  1407
         OI    RSBADVOL(REG6),B'00000010'                          1407
*            DO;                                                   1408
*            /*CALL CKERR*/                                        1409
*              RSCKERR = RSCKERR && RSCKERR;                       1409
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1409
*              RSCKERN = RSE047;                                   1410
         MVC   RSCKERN(2,REG6),@CH00747                            1410
*              RSCKTERM = 'RETU';                                  1411
         MVC   RSCKTERM(4,REG6),@CC03500                           1411
*              RSCKMVAR(1) = ADDR(VOLSRSER);                       1412
*                                                                  1412
         L     @07,RSVTBENT(,REG6)                                 1412
         LA    @07,VOLSRSER(,@07)                                  1412
         ST    @07,RSCKMVAR(,REG6)                                 1412
*            /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR           */
*            CALL CKERR;                                           1413
         L     @15,@CV03443                                        1413
         BALR  @14,@15                                             1413
*            END;                                                  1414
*          END;                                                    1415
*                                                                  1415
*  CALL EXIT;  /*TERMINATE*/                                       1416
@RF01405 BAL   @14,EXIT                                            1416
*  END VLNRESET; /*END OF PROCEDURE*/                              1417
@EL00015 DS    0H                                                  1417
@EF00015 DS    0H                                                  1417
@ER00015 BR    @14                                                 1417
@PB00015 DS    0H                                                  1418
*/********************************************************************/
*/* PROCEDURE NAME - VLRESET                                         */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*     PROCESS A RESET VOLUME. USING THE DATA SET                   */
*/*     DIRECTORY ENTRIES (DSDIRS), FIND EVERY OBJECT THAT           */
*/*     CLAIMS SPACE ON THE VOLUME. PERFORM THE FOLLOWING:           */
*/*       . DELETE THE DSDIR IF THE OBJECT CANNOT BE FOUND           */
*/*         OR A SPACE CONFLICT EXISTS.                              */
*/*       . UPDATE THD DSDIR IF THE OBJECT WAS REASSIGNED.           */
*/*       . MARK A VOLUME GROUP OCCURRENCE UNUSABLE, IF THERE        */
*/*         IS A SPACE CONFLICT.                                     */
*/*       . UPDATE THE SPACE MAP ON THE VOLUME TO REFLECT ANY        */
*/*         RETURNED SUBALLOCATED SPACE.                             */
*/*                                                                  */
*/* INPUT -                                                          */
*/*     VOLUME RECORD IN WORKFILE BUFFER 1                           */
*/*     RSWKBMAP - ADDRESS OF SPACE MAP FOR FIND                     */
*/*     RSPBMAP - ADDRESS OF SPACE MAP FOR SUBALLOCATED SPACE        */
*/*     RSMAPSIZ - SIZE OF THE SPACE MAP                             */
*/*     RSPVSNT6 - ADDRESS OF SN TABLE FOR THE SPACE HEADERS         */
*/*                ON THIS VOLUME                                    */
*/*     RSPVSNT8 - ADDRESS OF SN TABLE FOR THE DSDIRS ON THIS        */
*/*                VOLUME                                            */
*/*     RSENTPT - ADDRESS OF RESVOL ENTRY FOR THIS VOLUME            */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*     CORRECT VOLUME SET OF RECORDS PER THE FUNCTIONAL             */
*/*     DESCRIPTION.                                                 */
*/*                                                                  */
*/* MESSAGES -                                                       */
*/*     IDC11033I - UNIQUE DSNAME NOT DELETED                        */
*/*     IDC11034I - SPACE MAP ERROR (INCORRECT LENGTH)               */
*/*     IDC11029I - SPACE MAP MODIFIED                               */
*/*     IDC21027I - CRA OR CAT SPACE NOT OWNED BY CATALOG.           */
*/*     IDC11031I - UNIQUE DATA OR INDEX HAS FEWER EXTENTS           */
*/*                 THAN THE DATA SPACE.                             */
*/*                                                                  */
*/********************************************************************/
*      GENERATE;                                                   1418
         DS    0F
NAME0124 DC    CL8'VLRESET'
*VLRESET: PROCEDURE                                                1419
*        OPTIONS(NOSAVE,NOSAVEAREA);                               1419
*                                                                  1419
         B     @PB00016                                            1419
VLRESET  DS    0H                                                  1420
*      GENERATE REFS(RS03RG08, REG6);                              1420
*                                                                  1420
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         MVC   0(4,@15),NAME0124  PROCNAME TO REGSAVE
*        OLDERID2 = NEWERID2;                                      1421
         L     @07,GDTTR2(,REG5)                                   1421
         MVC   @TS00001(95),NEWERID2(@07)                          1421
         MVC   OLDERID2(95,@07),@TS00001                           1421
*        NEWID2 = 'RSVS';                                          1422
*                                                                  1422
         MVC   NEWID2(4,@07),@CC03624                              1422
*        /************************************************************/
*        /*                                                          */
*        /*  RESET FLAGS, ETC.                                       */
*        /*                                                          */
*        /************************************************************/
*                                                                  1423
*        RSPVRPC = OFF;                /*RESET PRIMARY CONFLICT      */
*        RSPVRSC = OFF;                /*RESET SECONDARY CONFLICT    */
*                                                                  1424
         NI    RSPVRPC(REG6),B'11110011'                           1424
*        /************************************************************/
*        /*                                                          */
*        /*  CRA - CHECK SUBALLOCATION CONFLICT                      */
*        /*     USING THE VGOS FOR THE CRA, BUILD A SPACE MAP WITH A */
*        /*     BIT ON FOR EACH TRACK OF THE CRA. CHECK IF ALL       */
*        /*     TRACKS ARE AVAILABLE FOR SUBALLOCATION. IF NOT       */
*        /*     SPACE IS IN CONFLICT - ISSUE MESSAGE IDC21027I. IF   */
*        /*     AVAILABLE, SUBALLOCATE IT.                           */
*        /*                                                          */
*        /************************************************************/
*                                                                  1425
*        RSPVSETB = ''B;               /*CLEAR SETBITS OPTIONS       */
         MVI   RSPVSETB(REG6),X'00'                                1425
*        RSSETCRA = ON;                /*CRA TYPE SET                */
*        RSPVCLBM = ON;                /*CLEAR WORK MAP BEFORE USING */
         OI    RSSETCRA(REG6),B'10100000'                          1427
*        RSTGBMAP = RSWKBMAP;          /*SET IN WORK MAP             */
         L     @07,RSWKBMAP(,REG6)                                 1428
         ST    @07,RSTGBMAP(,REG6)                                 1428
*        CALL SETBITS;                                             1429
*                                                                  1429
         BAL   @14,SETBITS                                         1429
*        RSCKBMAP = RSPBMAP;           /*CHECK FOR AVAILABLE TRACKS  */
         L     @07,RSPBMAP(,REG6)                                  1430
         ST    @07,RSCKBMAP(,REG6)                                 1430
*        RSCK1TO1 = ON;                /*ON MEANS AVAILABLE          */
         OI    RSCK1TO1(REG6),B'00000001'                          1431
*        CALL CHKBITS;                                             1432
*                                                                  1432
         BAL   @14,CHKBITS                                         1432
*        IF (RSCKBERR = ON) × (RSSETERR = ON) THEN /*CRA SPC NOT OWN */
*                                                                  1433
         TM    RSCKBERR(REG6),B'00000010'                          1433
         BO    @RT01433                                            1433
         TM    RSSETERR(REG6),B'00001000'                          1433
         BNO   @RF01433                                            1433
@RT01433 DS    0H                                                  1434
*          DO;                                                     1434
*          /*CALL CKERR*/                                          1435
*            RSCKERR = RSCKERR && RSCKERR;                         1435
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1435
*            RSCKERN = RSE030;                                     1436
         MVC   RSCKERN(2,REG6),@CH00950                            1436
*            RSCKTERM = 'RETU';                                    1437
         MVC   RSCKTERM(4,REG6),@CC03500                           1437
*            RSCKMVAR(1) = ADDR(VOLSRSER);                         1438
*                                                                  1438
         L     @07,RSVTBENT(,REG6)                                 1438
         LA    @07,VOLSRSER(,@07)                                  1438
         ST    @07,RSCKMVAR(,REG6)                                 1438
*          /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR             */
*          CALL CKERR;                                             1439
         L     @15,@CV03443                                        1439
         BALR  @14,@15                                             1439
*          END;                                                    1440
*        ELSE                                                      1441
*          DO;                                                     1441
         B     @RC01433                                            1441
@RF01433 DS    0H                                                  1442
*            RSPVSETB = ''B;           /*CLEAR SETBITS OPTIOSN       */
         MVI   RSPVSETB(REG6),X'00'                                1442
*            RSSETMAP = ON;            /*SUBALLOCATE TRACKS          */
*            RSST1TO1 = OFF;           /*BY SETTING BIT OFF IN MAP   */
         OI    RSSETMAP(REG6),B'01000000'                          1444
         NI    RSST1TO1(REG6),B'11101111'                          1444
*            RSTGBMAP = RSPBMAP;       /*TOTAL MAP                   */
         L     @07,RSPBMAP(,REG6)                                  1445
         ST    @07,RSTGBMAP(,REG6)                                 1445
*            RSSTBMAP = RSWKBMAP;      /*TRACKS TO BE ALLOCATED      */
         L     @07,RSWKBMAP(,REG6)                                 1446
         ST    @07,RSSTBMAP(,REG6)                                 1446
*            CALL SETBITS;                                         1447
         BAL   @14,SETBITS                                         1447
*          END;                                                    1448
*        /************************************************************/
*        /*                                                          */
*        /*  ALLOW FOR NO OBJECTS DEFINED ON THE RESET VOLUME        */
*        /*                                                          */
*        /************************************************************/
*                                                                  1449
*        RSWASNVT = RSPVSNT8;          /*DSDIR SN TABLE              */
@RC01433 L     @07,RSPVSNT8(,REG6)                                 1449
         ST    @07,RSWASNVT(,REG6)                                 1449
*        IF RSPVSNT8 = 0 THEN;                                     1450
*                                                                  1450
         LTR   @07,@07                                             1450
         BZ    @RT01450                                            1450
*        /************************************************************/
*        /*                                                          */
*        /*  PROCESS EACH DSDIR                                      */
*        /*                                                          */
*        /************************************************************/
*                                                                  1452
*        ELSE                                                      1452
*  VLRDSDIR:                                                       1452
*          DO RSFCNDX = 1 TO RSFHNDX;                              1452
VLRDSDIR LA    @07,1                                               1452
         B     @DE01452                                            1452
@DL01452 DS    0H                                                  1453
*            RSFAENT = RSFCADR + (RSFENTLN*(RSFCNDX-1));           1453
         L     @07,RSWASNVT(,REG6)                                 1453
         LH    @04,RSFCNDX(,@07)                                   1453
         BCTR  @04,0                                               1453
         LR    @01,@04                                             1453
         SLR   @04,@04                                             1453
         IC    @04,RSFENTLN(,@07)                                  1453
         MR    @00,@04                                             1453
         AL    @01,RSFCADR(,@07)                                   1453
         ST    @01,RSFAENT(,@07)                                   1453
*                                      /*NEXT DSDIR                  */
*            RSPVDELT = OFF;           /*RESET DELETE DSDIR          */
         NI    RSPVDELT(REG6),B'11011111'                          1454
*            RSMUNUS = OFF;            /*RESET MARK UNUSABLE         */
         NI    RSMUNUS(REG6),B'01111111'                           1455
*            RSPVSNT3 = 0;             /*NO VGO                      */
*                                                                  1456
         SLR   @07,@07                                             1456
         ST    @07,RSPVSNT3(,REG6)                                 1456
*        /************************************************************/
*        /*                                                          */
*        /*     CATALOG ALLOCATED ON THIS VOLUME                     */
*        /*                                                          */
*        /************************************************************/
*                                                                  1457
*            IF SDSIDNO = CLUSCI THEN                              1457
         CLC   SDSIDNO(3,@01),@CF00149+1                           1457
         BNE   @RF01457                                            1457
*  VLRCATLG:                                                       1458
*              DO;                                                 1458
VLRCATLG DS    0H                                                  1459
*                RSVLCATE = OFF;       /*RESET CATALOG CONFLICT      */
*                                                                  1459
         NI    RSVLCATE(REG6),B'10111111'                          1459
*        /************************************************************/
*        /*                                                          */
*        /*     CATALOG IS NOT THE CATALOG BEING RESET. MUST         */
*        /*     HAVE DEFINED A NEW CATALOG AND ISSUED A RESET FOR    */
*        /*     THE OLD CATALOG VOLUME. DELETE THE OLD CATALOG       */
*        /*     DSDIR.                                               */
*        /*                                                          */
*        /************************************************************/
*                                                                  1460
*                IF VOLSRSER ^= RSINVLSR THEN                      1460
         L     @07,RSVTBENT(,REG6)                                 1460
         CLC   VOLSRSER(6,@07),RSINVLSR(REG6)                      1460
         BE    @RF01460                                            1460
*                  RSPVDELT = ON;                                  1461
*                                                                  1461
         OI    RSPVDELT(REG6),B'00100000'                          1461
*        /************************************************************/
*        /*                                                          */
*        /*     CATALOG IS THE CATALOG BEING RESET. PROCESS          */
*        /*     THE DATA AND INDEX FOR SPACE.                        */
*        /*                                                          */
*        /************************************************************/
*                                                                  1462
*                ELSE                                              1462
*                  DO;                                             1462
         B     @RC01460                                            1462
@RF01460 DS    0H                                                  1463
*                    GRABCURR = GRABRAB2; /*USE BUFFER 2             */
         L     @07,RSGRABCU(,REG6)                                 1463
         L     @04,GRABRAB2(,@07)                                  1463
         ST    @04,GRABCURR(,@07)                                  1463
*                    RABRCDA = DATACI; /*PROCESS DATA FIRST          */
         SLR   @07,@07                                             1464
         ST    @07,RABRCDA(,@04)                                   1464
*                    DO RSIDX = 1 TO 2;                            1465
*                                                                  1465
         LA    @07,1                                               1465
         STH   @07,RSIDX(,REG6)                                    1465
@DL01465 DS    0H                                                  1466
*                      DO;                                         1466
*                        RSRTYPE = ''B;                            1467
         MVI   RSRTYPE(REG6),X'00'                                 1467
*                        RSRGET = ON;      /* GETRCD  */           1468
         OI    RSRGET(REG6),B'10000000'                            1468
*                        RSRUPD = OFF;     /* NO UPDATE  */        1469
         NI    RSRUPD(REG6),B'11110111'                            1469
*                        RSRDS = ''B;                              1470
         NI    RSRDS(REG6),B'00011111'                             1470
*                        RSRWF = ON;       /* WORKFILE  */         1471
*                        RSRDIR = ON;      /* DIRECT  */           1472
*                        RSRKEY = ON;      /* KEY  */              1473
*                                                                  1473
         OI    RSRWF(REG6),B'10010100'                             1473
*                      /* CALL TO MODULE IDCRS06 FOR PROCEDURE RECMGMT
*                                                                    */
*                      CALL RECMGMT;                               1474
         L     @15,@CV03452                                        1474
         BALR  @14,@15                                             1474
*                        RFY RTNREG RSTD;                          1475
*                        TESTRC = RTNREG;                          1476
         STH   RTNREG,TESTRC(,REG6)                                1476
*                        RFY RTNREG UNRSTD;                        1477
*                      END;                                        1478
*                                                                  1478
*        /************************************************************/
*        /*                                                          */
*        /*     FIND ALL OF THE VGOS.                                */
*        /*                                                          */
*        /************************************************************/
*                                                                  1479
*                                                                  1479
*                      DO;                                         1479
*                        GRABBB = GRABCURR;                        1480
         L     @07,RSGRABCU(,REG6)                                 1480
         L     @04,GRABCURR(,@07)                                  1480
         ST    @04,GRABBB(,@07)                                    1480
*                        RSWGCODE = GCVOLGO;                       1481
         MVI   RSWGCODE(REG6),X'03'                                1481
*                                      /*SPECIFY GROUP CODE          */
*                        RSWFONE = OFF;/*FIND ALL OCCURRENCES        */
         NI    RSWFONE(REG6),B'01111111'                           1482
*                        /* CALL THE FIND SUBROUTINE */            1483
*                                                                  1483
*                      /* CALL TO MODULE IDCRS04 FOR PROCEDURE FIND  */
*                      CALL FIND;                                  1483
         L     @15,@CV03435                                        1483
         BALR  @14,@15                                             1483
*                      END;                                        1484
*                      RSFAENT = RSFCADR; /*FIRST VGO                */
*                                                                  1485
         L     @07,RSWASNVT(,REG6)                                 1485
         L     @04,RSFCADR(,@07)                                   1485
         ST    @04,RSFAENT(,@07)                                   1485
*        /************************************************************/
*        /*                                                          */
*        /*     PROCESS ALL VGOS. IF SPACE NOT OWNED BY THE          */
*        /*     CATALOG, INDICATE AN ERROR. IF THE SPACE IS          */
*        /*     OWNED, SHOW IT AS SUBALLOCATED.                      */
*        /*                                                          */
*        /************************************************************/
*                                                                  1486
*                      IF RSFENTLN = 0 THEN                        1486
         CLI   RSFENTLN(@07),0                                     1486
         BNE   @RF01486                                            1486
*                        RSVLCATE = ON; /* ERROR - NO VGOS           */
         OI    RSVLCATE(REG6),B'01000000'                          1487
*                      ELSE                                        1488
*                        DO RSFCNDX = 1 TO RSFHNDX;                1488
         B     @RC01486                                            1488
@RF01486 LA    @07,1                                               1488
         B     @DE01488                                            1488
@DL01488 DS    0H                                                  1489
*                          IF SNSSWD = ON THEN; /*BYPASS IMBEDDED INX*/
         L     @07,RSWASNVT(,REG6)                                 1489
         L     @07,RSFAENT(,@07)                                   1489
         TM    SNSSWD(@07),B'10000000'                             1489
         BO    @RT01489                                            1489
*                          ELSE                                    1491
*                            DO;                                   1491
*                              RSTGBMAP = RSWKBMAP;                1492
         L     @07,RSWKBMAP(,REG6)                                 1492
         ST    @07,RSTGBMAP(,REG6)                                 1492
*                              RSPVSETB = ''B; /*CLEAR OPTIONS       */
         MVI   RSPVSETB(REG6),X'00'                                1493
*                              RSPVCLBM = ON; /*CLR BIT MAP BEFOR SET*/
         OI    RSPVCLBM(REG6),B'00100000'                          1494
*                              CALL SETBITS;                       1495
*                                                                  1495
         BAL   @14,SETBITS                                         1495
*                              RSCKBMAP = RSPBMAP; /*CHK FR SPC AVAIL*/
         L     @07,RSPBMAP(,REG6)                                  1496
         ST    @07,RSCKBMAP(,REG6)                                 1496
*                              RSCK1TO1 = ON; /*ON IS AVAIL          */
         OI    RSCK1TO1(REG6),B'00000001'                          1497
*                              CALL CHKBITS;                       1498
*                                                                  1498
         BAL   @14,CHKBITS                                         1498
*        /************************************************************/
*        /*                                                          */
*        /*     SPACE CONFLICT                                       */
*        /*                                                          */
*        /************************************************************/
*                                                                  1499
*                              IF RSCKBERR = ON × RSSETERR = ON THEN
         TM    RSCKBERR(REG6),B'00000010'                          1499
         BO    @RT01499                                            1499
         TM    RSSETERR(REG6),B'00001000'                          1499
         BNO   @RF01499                                            1499
@RT01499 DS    0H                                                  1500
*                                RSVLCATE = ON;                    1500
*                                                                  1500
         OI    RSVLCATE(REG6),B'01000000'                          1500
*        /************************************************************/
*        /*                                                          */
*        /*     SUBALLOCATE SPACE                                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  1501
*                              ELSE                                1501
*                                DO;                               1501
         B     @RC01499                                            1501
@RF01499 DS    0H                                                  1502
*                                  RSPVSETB = ''B;                 1502
         MVI   RSPVSETB(REG6),X'00'                                1502
*                                  RSSETMAP = ON; /*SUBALLOCATE TRKS */
*                                  RSST1TO1 = OFF; /*SET BITS OFF    */
         OI    RSSETMAP(REG6),B'01000000'                          1504
         NI    RSST1TO1(REG6),B'11101111'                          1504
*                                  RSTGBMAP = RSPBMAP; /*TOTAL MAP   */
         L     @07,RSPBMAP(,REG6)                                  1505
         ST    @07,RSTGBMAP(,REG6)                                 1505
*                                  RSSTBMAP = RSWKBMAP; /*TRKS       */
         L     @07,RSWKBMAP(,REG6)                                 1506
         ST    @07,RSSTBMAP(,REG6)                                 1506
*                                  CALL SETBITS;                   1507
         BAL   @14,SETBITS                                         1507
*                                END;                              1508
*                            END;                                  1509
@RC01499 DS    0H                                                  1510
*                          RSFAENT = RSFAENT + RSFENTLN;           1510
@RT01489 L     @07,RSWASNVT(,REG6)                                 1510
         SLR   @04,@04                                             1510
         IC    @04,RSFENTLN(,@07)                                  1510
         AL    @04,RSFAENT(,@07)                                   1510
         ST    @04,RSFAENT(,@07)                                   1510
*                        END;                                      1511
*                                                                  1511
         L     @04,RSWASNVT(,REG6)                                 1511
         LA    @07,1                                               1511
         AH    @07,RSFCNDX(,@04)                                   1511
@DE01488 L     @04,RSWASNVT(,REG6)                                 1511
         STH   @07,RSFCNDX(,@04)                                   1511
         L     @04,RSWASNVT(,REG6)                                 1511
         CH    @07,RSFHNDX(,@04)                                   1511
         BNH   @DL01488                                            1511
*        /************************************************************/
*        /*                                                          */
*        /*     PREPARE TO PROCESS THE INDEX VOL GOS                 */
*        /*                                                          */
*        /************************************************************/
*                                                                  1512
*                      RABRCDA = INDEXCI; /*2ND TIME, PROCESS INDEX  */
@RC01486 L     @07,RSGRABCU(,REG6)                                 1512
         L     @07,GRABCURR(,@07)                                  1512
         MVC   RABRCDA(4,@07),@CF00212                             1512
*                      RSFENTLN = 0; /*FREE THE VGO SNTAB            */
         L     @07,RSWASNVT(,REG6)                                 1513
         MVI   RSFENTLN(@07),X'00'                                 1513
*                    END;                                          1514
*                                                                  1514
         LA    @07,1                                               1514
         AH    @07,RSIDX(,REG6)                                    1514
         STH   @07,RSIDX(,REG6)                                    1514
         C     @07,@CF00149                                        1514
         BNH   @DL01465                                            1514
*        /************************************************************/
*        /*                                                          */
*        /*     IF SUBALLOCATION CONFLICT, ISSUE MESSAGE IDC21027I   */
*        /*                                                          */
*        /************************************************************/
*                                                                  1515
*                    IF RSVLCATE = ON THEN                         1515
*                                                                  1515
         TM    RSVLCATE(REG6),B'01000000'                          1515
         BNO   @RF01515                                            1515
*                      DO;                                         1516
*                      /*CALL CKERR*/                              1517
*                        RSCKERR = RSCKERR && RSCKERR;             1517
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1517
*                        RSCKERN = RSE043;                         1518
         MVC   RSCKERN(2,REG6),@CH00973                            1518
*                        RSCKTERM = 'RETU';                        1519
         MVC   RSCKTERM(4,REG6),@CC03500                           1519
*                        RSCKMVAR(1) = ADDR(VOLSRSER);             1520
*                                                                  1520
         L     @07,RSVTBENT(,REG6)                                 1520
         LA    @07,VOLSRSER(,@07)                                  1520
         ST    @07,RSCKMVAR(,REG6)                                 1520
*                      /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR */
*                      CALL CKERR;                                 1521
         L     @15,@CV03443                                        1521
         BALR  @14,@15                                             1521
*                      END;                                        1522
*                  END;                                            1523
*              END VLRCATLG;                                       1524
*        /************************************************************/
*        /*                                                          */
*        /*  PROCESS NON-CATALOG CLUSTER ENTRIES                     */
*        /*     GET THE RECORD INDICATED BY THE DSDIR                */
*        /*                                                          */
*        /************************************************************/
*                                                                  1525
*            ELSE                                                  1525
*  VLRNCAT:                                                        1525
*              DO;                                                 1525
         B     @RC01457                                            1525
@RF01457 DS    0H                                                  1525
VLRNCAT  DS    0H                                                  1526
*                GRABCURR = GRABRAB2;  /*BUFFER 2                    */
         L     @07,RSGRABCU(,REG6)                                 1526
         L     @04,GRABRAB2(,@07)                                  1526
         ST    @04,GRABCURR(,@07)                                  1526
*                IF SNFUSE=OFF THEN    /*VERTICAL GOP WITH NO GO     */
         L     @07,RSWASNVT(,REG6)                                 1527
         L     @07,RSFAENT(,@07)                                   1527
         TM    SNFUSE(@07),B'10000000'                             1527
         BNZ   @RF01527                                            1527
*                  RABNRF = ON;        /*TREAT AS NO RECORD FND      */
         OI    RABNRF(@04),B'00000010'                             1528
*                ELSE                                              1529
*                  DO;                                             1529
         B     @RC01527                                            1529
@RF01527 DS    0H                                                  1530
*                    RABRCDA = SDSIDNO; /*DATA OR INDEX              */
         L     @07,RSGRABCU(,REG6)                                 1530
         L     @04,GRABCURR(,@07)                                  1530
         L     @01,RSWASNVT(,REG6)                                 1530
         L     @01,RSFAENT(,@01)                                   1530
         SLR   @00,@00                                             1530
         ICM   @00,7,SDSIDNO(@01)                                  1530
         ST    @00,RABRCDA(,@04)                                   1530
*                    GRABAFL1 = ''B;   /*CLEAR GRAB OPTIONS          */
         MVI   GRABAFL1(@07),X'00'                                 1531
*                    GRABAFL2 = ''B;                               1532
         MVI   GRABAFL2(@07),X'00'                                 1532
*                    GRABSFXT = ON;    /*ALLOW XLATE ERROR ON CIN    */
*                    GRABSNRN = ON;    /*TREAT XLAT ERR AS NO RCD FND*/
*                                                                  1534
*                                                                  1534
         OI    GRABSFXT(@07),B'10000010'                           1534
*                    DO;                                           1535
*                      RSRTYPE = ''B;                              1536
         MVI   RSRTYPE(REG6),X'00'                                 1536
*                      RSRGET = ON;      /* GETRCD  */             1537
         OI    RSRGET(REG6),B'10000000'                            1537
*                      RSRUPD = ON;      /* UPDATE  */             1538
         OI    RSRUPD(REG6),B'00001000'                            1538
*                      RSRDS = ''B;                                1539
         NI    RSRDS(REG6),B'00011111'                             1539
*                      RSRWF = ON;       /* WORKFILE  */           1540
*                      RSRDIR = ON;      /* DIRECT  */             1541
*                      RSRKEY = ON;      /* KEY  */                1542
*                                                                  1542
         OI    RSRWF(REG6),B'10010100'                             1542
*                    /* CALL TO MODULE IDCRS06 FOR PROCEDURE RECMGMT */
*                    CALL RECMGMT;                                 1543
         L     @15,@CV03452                                        1543
         BALR  @14,@15                                             1543
*                      RFY RTNREG RSTD;                            1544
*                      TESTRC = RTNREG;                            1545
         STH   RTNREG,TESTRC(,REG6)                                1545
*                      RFY RTNREG UNRSTD;                          1546
*                    END;                                          1547
*                                                                  1547
*                    GRABAFL1 = ''B;                               1548
         L     @07,RSGRABCU(,REG6)                                 1548
         MVI   GRABAFL1(@07),X'00'                                 1548
*                    GRABAFL2 = ''B;                               1549
         MVI   GRABAFL2(@07),X'00'                                 1549
*                  END;                                            1550
*                                                                  1550
*        /************************************************************/
*        /*                                                          */
*        /*     DELETE THE DSDIR IF NO RECORD WAS FOUND OR           */
*        /*     THE DSDIRS FAILED TO BE CHECKED PREVIOUSLY BY        */
*        /*     VERDSDIR (BAD SET OF RECORDS).                       */
*        /*                                                          */
*        /************************************************************/
*                                                                  1551
*                IF RABNRF=ON × RSWDSDIR=OFF THEN                  1551
@RC01527 L     @07,RSGRABCU(,REG6)                                 1551
         L     @07,GRABCURR(,@07)                                  1551
         TM    RABNRF(@07),B'00000010'                             1551
         BO    @RT01551                                            1551
         TM    RSWDSDIR(@07),B'00001000'                           1551
         BNZ   @RF01551                                            1551
@RT01551 DS    0H                                                  1552
*                  DO;                                             1552
*                    RABNRF = OFF;     /*RESET NO RECORD FOUND       */
         L     @07,RSGRABCU(,REG6)                                 1553
         L     @07,GRABCURR(,@07)                                  1553
         NI    RABNRF(@07),B'11111101'                             1553
*                    RSPVDELT = ON;    /*DELETE THE DSDIR            */
         OI    RSPVDELT(REG6),B'00100000'                          1554
*                  END;                                            1555
*                                                                  1555
*        /************************************************************/
*        /*                                                          */
*        /*     FIND THE FIRST VGO FOR THIS DSDIR                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  1556
*                ELSE                                              1556
*                  DO;                                             1556
*                                                                  1556
         B     @RC01551                                            1556
@RF01551 DS    0H                                                  1557
*                    DO;                                           1557
*                      GRABBB = GRABCURR;                          1558
         L     @07,RSGRABCU(,REG6)                                 1558
         L     @04,GRABCURR(,@07)                                  1558
         ST    @04,GRABBB(,@07)                                    1558
*                      RSWGCODE = GCVOLGO;                         1559
         MVI   RSWGCODE(REG6),X'03'                                1559
*                                      /*SPECIFY GROUP CODE          */
*                      RSWFONE = OFF;  /*FIND ALL OCCURRENCES        */
         NI    RSWFONE(REG6),B'01111111'                           1560
*                      /* CALL THE FIND SUBROUTINE */              1561
*                                                                  1561
*                    /* CALL TO MODULE IDCRS04 FOR PROCEDURE FIND    */
*                    CALL FIND;                                    1561
         L     @15,@CV03435                                        1561
         BALR  @14,@15                                             1561
*                    END;                                          1562
*                    RSPVSNT3 = RSWASNVT; /*SAVE THE VGO SNTAB ADDR  */
         L     @07,RSWASNVT(,REG6)                                 1563
         ST    @07,RSPVSNT3(,REG6)                                 1563
*                    RSFAENT = RSFCADR; /*FIRST VGO                  */
         L     @04,RSFCADR(,@07)                                   1564
         ST    @04,RSFAENT(,@07)                                   1564
*                    IF RSFENTLN = 0 THEN; /*NO VGO DELETE THE DSDIR */
         CLI   RSFENTLN(@07),0                                     1565
         BE    @RT01565                                            1565
*                    ELSE                                          1567
*                      DO RSFCNDX = 1 TO RSFHNDX                   1567
*                       WHILE ((SNVOLSER ^= VOLSRSER) ×            1567
*                       (SDSDIRSN ^= RSPVSNT8->RSFAENT->SNSN));    1567
         LA    @07,1                                               1567
         B     @DE01567                                            1567
@DL01567 L     @07,RSWASNVT(,REG6)                                 1567
         L     @07,RSFAENT(,@07)                                   1567
         L     @04,RSVTBENT(,REG6)                                 1567
         CLC   SNVOLSER(6,@07),VOLSRSER(@04)                       1567
         BNE   @DB01567                                            1567
         L     @04,RSPVSNT8(,REG6)                                 1567
         L     @04,RSFAENT(,@04)                                   1567
         CLC   SDSDIRSN(2,@07),SNSN(@04)                           1567
         BE    @DC01567                                            1567
@DB01567 DS    0H                                                  1568
*                        RSFAENT = RSFAENT + RSFENTLN;             1568
         L     @07,RSWASNVT(,REG6)                                 1568
         SLR   @04,@04                                             1568
         IC    @04,RSFENTLN(,@07)                                  1568
         AL    @04,RSFAENT(,@07)                                   1568
         ST    @04,RSFAENT(,@07)                                   1568
*                      END;                                        1569
*                                                                  1569
         L     @04,RSWASNVT(,REG6)                                 1569
         LA    @07,1                                               1569
         AH    @07,RSFCNDX(,@04)                                   1569
@DE01567 L     @04,RSWASNVT(,REG6)                                 1569
         STH   @07,RSFCNDX(,@04)                                   1569
         L     @04,RSWASNVT(,REG6)                                 1569
         CH    @07,RSFHNDX(,@04)                                   1569
         BNH   @DL01567                                            1569
@DC01567 DS    0H                                                  1570
*        /************************************************************/
*        /*                                                          */
*        /*       DELETE THE DSDIR - THERE IS NO VGO                 */
*        /*                                                          */
*        /************************************************************/
*                                                                  1570
*                    IF ((RSFENTLN = 0) × (RSFCNDX > RSFHNDX)) THEN
@RT01565 L     @07,RSWASNVT(,REG6)                                 1570
         CLI   RSFENTLN(@07),0                                     1570
         BE    @RT01570                                            1570
         LH    @04,RSFCNDX(,@07)                                   1570
         CH    @04,RSFHNDX(,@07)                                   1570
         BNH   @RF01570                                            1570
@RT01570 DS    0H                                                  1571
*                      RSPVDELT = ON;                              1571
*                                                                  1571
         OI    RSPVDELT(REG6),B'00100000'                          1571
*        /************************************************************/
*        /*                                                          */
*        /*     VGO IS FOR A SUBALLOCATED CANDIDATE VOLUME - NO      */
*        /*     EXTENTS OR POSSIBLE SPACE CONFLICT.                  */
*        /*                                                          */
*        /************************************************************/
*                                                                  1572
*                    ELSE                                          1572
*                      IF SNVGOSS = 0 & SNTTNNC = 0 THEN;          1572
*                                                                  1572
         B     @RC01570                                            1572
@RF01570 L     @07,RSWASNVT(,REG6)                                 1572
         L     @07,RSFAENT(,@07)                                   1572
         ICM   @04,3,SNVGOSS(@07)                                  1572
         BNZ   @RF01572                                            1572
         CLI   SNTTNNC(@07),0                                      1572
         BE    @RT01572                                            1572
*        /************************************************************/
*        /*                                                          */
*        /*     FIRST VGO FOUND - LOCATE THE SPACE HEADER FOR IT.    */
*        /*                                                          */
*        /************************************************************/
*                                                                  1574
*                      ELSE                                        1574
*                        DO;                                       1574
@RF01572 DS    0H                                                  1575
*                          RSWASNVT = RSPVSNT6; /*SPACE HEADER SNTAB */
         L     @07,RSPVSNT6(,REG6)                                 1575
         ST    @07,RSWASNVT(,REG6)                                 1575
*                          IF RSPVSNT6 = 0 THEN; /*NO SPACE HEADERS  */
         LTR   @07,@07                                             1576
         BZ    @RT01576                                            1576
*                          ELSE                                    1578
*                            DO;                                   1578
*                              RSFAENT = RSFCADR;                  1579
         L     @07,RSWASNVT(,REG6)                                 1579
         L     @04,RSFCADR(,@07)                                   1579
         ST    @04,RSFAENT(,@07)                                   1579
*                              DO RSFCNDX = 1 TO RSFHNDX WHILE     1580
*                               (SNSN^=RSPVSNT3->RSFAENT->SNVGOSS);
         LA    @07,1                                               1580
         B     @DE01580                                            1580
@DL01580 L     @07,RSWASNVT(,REG6)                                 1580
         L     @04,RSFAENT(,@07)                                   1580
         L     @01,RSPVSNT3(,REG6)                                 1580
         L     @01,RSFAENT(,@01)                                   1580
         CLC   SNSN(2,@04),SNVGOSS(@01)                            1580
         BE    @DC01580                                            1580
*                                RSFAENT = RSFAENT + RSFENTLN;     1581
         SLR   @15,@15                                             1581
         IC    @15,RSFENTLN(,@07)                                  1581
         ALR   @04,@15                                             1581
         ST    @04,RSFAENT(,@07)                                   1581
*                              END;                                1582
         L     @04,RSWASNVT(,REG6)                                 1582
         LA    @07,1                                               1582
         AH    @07,RSFCNDX(,@04)                                   1582
@DE01580 L     @04,RSWASNVT(,REG6)                                 1582
         STH   @07,RSFCNDX(,@04)                                   1582
         L     @04,RSWASNVT(,REG6)                                 1582
         CH    @07,RSFHNDX(,@04)                                   1582
         BNH   @DL01580                                            1582
@DC01580 DS    0H                                                  1583
*                            END;                                  1583
*                                                                  1583
*        /************************************************************/
*        /*                                                          */
*        /*     SPACE HEADER NOT FOUND - DELETE DSDIR AND MARK THE   */
*        /*     VGO AS UNUSABLE.                                     */
*        /*                                                          */
*        /************************************************************/
*                                                                  1584
*                          IF (RSPVSNT6 = 0) × (RSFCNDX > RSFHNDX) 1584
*                           THEN                                   1584
@RT01576 L     @07,RSPVSNT6(,REG6)                                 1584
         LTR   @07,@07                                             1584
         BZ    @RT01584                                            1584
         L     @07,RSWASNVT(,REG6)                                 1584
         LH    @04,RSFCNDX(,@07)                                   1584
         CH    @04,RSFHNDX(,@07)                                   1584
         BNH   @RF01584                                            1584
@RT01584 DS    0H                                                  1585
*                            DO;                                   1585
*                              RSPVDELT = ON;                      1586
         OI    RSPVDELT(REG6),B'00100000'                          1586
*                              RSMUNUS = ON;                       1587
         OI    RSMUNUS(REG6),B'10000000'                           1587
*                            END;                                  1588
*                                                                  1588
*        /************************************************************/
*        /*                                                          */
*        /*     UNIQUE DATA SPACE - ENSURE EXTENTS MATCH OR SUBSET   */
*        /*                                                          */
*        /************************************************************/
*                                                                  1589
*                          ELSE                                    1589
*                            IF SNVSPUNQ = ON THEN                 1589
         B     @RC01584                                            1589
@RF01584 L     @07,RSWASNVT(,REG6)                                 1589
         L     @07,RSFAENT(,@07)                                   1589
         TM    SNVSPUNQ(@07),B'10000000'                           1589
         BNO   @RF01589                                            1589
*                              CALL CHKUNQ;                        1590
*                                                                  1590
         BAL   @14,CHKUNQ                                          1590
*        /************************************************************/
*        /*                                                          */
*        /*     SUBALLOCATED DATA SPACE - ENSURE NO SPACE CONFLICT   */
*        /*                                                          */
*        /************************************************************/
*                                                                  1591
*                            ELSE                                  1591
*                              CALL SETBMAP;                       1591
         B     @RC01589                                            1591
@RF01589 BAL   @14,SETBMAP                                         1591
*                        END;                                      1592
@RC01589 DS    0H                                                  1592
@RC01584 DS    0H                                                  1593
*                  END;                                            1593
@RT01572 DS    0H                                                  1593
@RC01570 DS    0H                                                  1594
*              END VLRNCAT;                                        1594
@RC01551 DS    0H                                                  1595
*        /************************************************************/
*        /*                                                          */
*        /*  DELETE THE DSDIR                                        */
*        /*                                                          */
*        /************************************************************/
*                                                                  1595
*            IF RSPVDELT = ON THEN                                 1595
@RC01457 TM    RSPVDELT(REG6),B'00100000'                          1595
         BNO   @RF01595                                            1595
*              DO;                                                 1596
*                RSWASNVT = RSPVSNT8;  /*DSDIR SNTAB                 */
         L     @07,RSPVSNT8(,REG6)                                 1597
         ST    @07,RSWASNVT(,REG6)                                 1597
*                GRABCURR = GRABRAB1;  /*VOL RCD AS BASE FOR DSDIRS  */
         L     @07,RSGRABCU(,REG6)                                 1598
         L     @04,GRABRAB1(,@07)                                  1598
         ST    @04,GRABCURR(,@07)                                  1598
*                GRABBB = GRABCURR;    /*BASE FOR DELETE             */
         ST    @04,GRABBB(,@07)                                    1599
*                /* CALL TO MODULE IDCRS04 FOR PROCEDURE DELGO       */
*                CALL DELGO;                                       1600
         L     @15,@CV03434                                        1600
         BALR  @14,@15                                             1600
*              END;                                                1601
*                                                                  1601
*        /************************************************************/
*        /*                                                          */
*        /*  MARK VGO UNUSABLE AND BASE INHIBIT UPDATE               */
*        /*                                                          */
*        /************************************************************/
*                                                                  1602
*            IF RSMUNUS = ON THEN                                  1602
@RF01595 TM    RSMUNUS(REG6),B'10000000'                           1602
         BNO   @RF01602                                            1602
*              DO;                                                 1603
*                RSWASNVT = RSPVSNT3;  /*VGO SNTAB                   */
         L     @07,RSPVSNT3(,REG6)                                 1604
         ST    @07,RSWASNVT(,REG6)                                 1604
*                GRABCURR = GRABRAB2;  /*DATA OR INDEX AS BASE       */
         L     @07,RSGRABCU(,REG6)                                 1605
         L     @04,GRABRAB2(,@07)                                  1605
         ST    @04,GRABCURR(,@07)                                  1605
*                RSASDSDI = ON;        /*SPACE CONFLICT              */
         OI    RSASDSDI(REG6),B'01000000'                          1606
*                CALL MARKUNUS;                                    1607
*                                                                  1607
*                                                                  1607
         BAL   @14,MARKUNUS                                        1607
*                DO;                                               1608
*                  RSRTYPE = ''B;                                  1609
         MVI   RSRTYPE(REG6),X'00'                                 1609
*                  RSRUPDT = ON;     /* UPDRCD  */                 1610
         OI    RSRUPDT(REG6),B'00100000'                           1610
*                  RSRUPD = ON;      /* UPDATE  */                 1611
         OI    RSRUPD(REG6),B'00001000'                            1611
*                  RSRDS = ''B;                                    1612
         NI    RSRDS(REG6),B'00011111'                             1612
*                  RSRWF = ON;       /* WORKFILE  */               1613
*                  RSRDIR = ON;      /* DIRECT  */                 1614
*                  RSRKEY = ON;      /* KEY  */                    1615
*                                                                  1615
         OI    RSRWF(REG6),B'10010100'                             1615
*                /* CALL TO MODULE IDCRS06 FOR PROCEDURE RECMGMT     */
*                CALL RECMGMT;                                     1616
         L     @15,@CV03452                                        1616
         BALR  @14,@15                                             1616
*                  RFY RTNREG RSTD;                                1617
*                  TESTRC = RTNREG;                                1618
         STH   RTNREG,TESTRC(,REG6)                                1618
*                  RFY RTNREG UNRSTD;                              1619
*                END;                                              1620
*                                      /*UPDATE THE DATA OR INDEX RCD*/
*              END;                                                1621
*                                                                  1621
*        /************************************************************/
*        /*                                                          */
*        /*  FREE THE BASE INDEX OR DATA RECORD                      */
*        /*                                                          */
*        /************************************************************/
*                                                                  1622
*            ELSE                                                  1622
*              DO;                                                 1622
         B     @RC01602                                            1622
@RF01602 DS    0H                                                  1623
*                GRABCURR = GRABRAB2;  /*DATA OR INDEX               */
*                                                                  1623
         L     @07,RSGRABCU(,REG6)                                 1623
         L     @04,GRABRAB2(,@07)                                  1623
         ST    @04,GRABCURR(,@07)                                  1623
*                DO;                                               1624
*                  RSRTYPE = ''B;                                  1625
         MVI   RSRTYPE(REG6),X'00'                                 1625
*                  RSRFREE = ON;     /* FREERCD  */                1626
         OI    RSRFREE(REG6),B'00000001'                           1626
*                  RSRUPD = ON;      /* UPDATE  */                 1627
         OI    RSRUPD(REG6),B'00001000'                            1627
*                  RSRDS = ''B;                                    1628
         NI    RSRDS(REG6),B'00011111'                             1628
*                  RSRWF = ON;       /* WORKFILE  */               1629
*                  RSRDIR = ON;      /* DIRECT  */                 1630
*                  RSRKEY = ON;      /* KEY  */                    1631
*                                                                  1631
         OI    RSRWF(REG6),B'10010100'                             1631
*                /* CALL TO MODULE IDCRS06 FOR PROCEDURE RECMGMT     */
*                CALL RECMGMT;                                     1632
         L     @15,@CV03452                                        1632
         BALR  @14,@15                                             1632
*                  RFY RTNREG RSTD;                                1633
*                  TESTRC = RTNREG;                                1634
         STH   RTNREG,TESTRC(,REG6)                                1634
*                  RFY RTNREG UNRSTD;                              1635
*                END;                                              1636
*              END;                                                1637
*                                                                  1637
*        /************************************************************/
*        /*                                                          */
*        /*  FREE THE VGO SNTAB FOR REUSE                            */
*        /*                                                          */
*        /************************************************************/
*                                                                  1638
*            IF RSPVSNT3 ^= 0 THEN                                 1638
@RC01602 L     @07,RSPVSNT3(,REG6)                                 1638
         LTR   @07,@07                                             1638
         BZ    @RF01638                                            1638
*              RSPVSNT3->RSFENTLN = 0;                             1639
*                                                                  1639
         MVI   RSFENTLN(@07),X'00'                                 1639
*        /************************************************************/
*        /*                                                          */
*        /*  REESTABLISH THE DSDIR SN TABLE                          */
*        /*                                                          */
*        /************************************************************/
*                                                                  1640
*            RSWASNVT = RSPVSNT8;                                  1640
@RF01638 L     @07,RSPVSNT8(,REG6)                                 1640
         ST    @07,RSWASNVT(,REG6)                                 1640
*          END VLRDSDIR;               /*END 1ST PASS DSDIR HANDLING */
         L     @04,RSWASNVT(,REG6)                                 1641
         LA    @07,1                                               1641
         AH    @07,RSFCNDX(,@04)                                   1641
@DE01452 L     @04,RSWASNVT(,REG6)                                 1641
         STH   @07,RSFCNDX(,@04)                                   1641
         L     @04,RSWASNVT(,REG6)                                 1641
         CH    @07,RSFHNDX(,@04)                                   1641
         BNH   @DL01452                                            1641
*        /************************************************************/
*        /*                                                          */
*        /*              RESOLVE CONFLICTS                           */
*        /*                                                          */
*        /************************************************************/
*                                                                  1642
*        IF (RSPVRPC = ON) × (RSPVRSC = ON) THEN                   1642
@RT01450 TM    RSPVRPC(REG6),B'00001100'                           1642
         BZ    @RF01642                                            1642
*  CONFLICT:                                                       1643
*          DO;                                                     1643
*                                                                  1643
CONFLICT DS    0H                                                  1644
*        /************************************************************/
*        /*                                                          */
*        /*     SCAN ALL OF THE DSDIRS FOR CONFLICTS                 */
*        /*                                                          */
*        /************************************************************/
*                                                                  1644
*            RSWASNVT = RSPVSNT8;                                  1644
         L     @07,RSPVSNT8(,REG6)                                 1644
         ST    @07,RSWASNVT(,REG6)                                 1644
*            DO RSFCNDX = 1 TO RSFHNDX;                            1645
         LA    @07,1                                               1645
         B     @DE01645                                            1645
@DL01645 DS    0H                                                  1646
*              RSFAENT = RSFCADR + RSFENTLN*(RSFCNDX - 1);         1646
*                                                                  1646
         L     @07,RSWASNVT(,REG6)                                 1646
         LH    @04,RSFCNDX(,@07)                                   1646
         BCTR  @04,0                                               1646
         LR    @01,@04                                             1646
         SLR   @04,@04                                             1646
         IC    @04,RSFENTLN(,@07)                                  1646
         MR    @00,@04                                             1646
         AL    @01,RSFCADR(,@07)                                   1646
         ST    @01,RSFAENT(,@07)                                   1646
*        /************************************************************/
*        /*                                                          */
*        /*     IGNORE DELETED DSDIRS.                               */
*        /*     IGNORE DSDIR FOR THE CATALOG CLUSTER.                */
*        /*                                                          */
*        /************************************************************/
*                                                                  1647
*              IF (SNFDEL=ON) × (SDSIDNO = CLUSCI) THEN;           1647
*                                                                  1647
         TM    SNFDEL(@01),B'01000000'                             1647
         BO    @RT01647                                            1647
         CLC   SDSIDNO(3,@01),@CF00149+1                           1647
         BE    @RT01647                                            1647
*        /************************************************************/
*        /*                                                          */
*        /*     GET THE BASE DATA OR INDEX                           */
*        /*                                                          */
*        /************************************************************/
*                                                                  1649
*              ELSE                                                1649
*                DO;                                               1649
*                  GRABCURR = GRABRAB2; /*BUFFER 2                   */
         L     @07,RSGRABCU(,REG6)                                 1650
         L     @04,GRABRAB2(,@07)                                  1650
         ST    @04,GRABCURR(,@07)                                  1650
*                  RABRCDA = SDSIDNO; /*DATA OR INDEX CIN            */
*                                                                  1651
         L     @07,RSWASNVT(,REG6)                                 1651
         L     @07,RSFAENT(,@07)                                   1651
         SLR   @15,@15                                             1651
         ICM   @15,7,SDSIDNO(@07)                                  1651
         ST    @15,RABRCDA(,@04)                                   1651
*                  DO;                                             1652
*                    RSRTYPE = ''B;                                1653
         MVI   RSRTYPE(REG6),X'00'                                 1653
*                    RSRGET = ON;      /* GETRCD  */               1654
         OI    RSRGET(REG6),B'10000000'                            1654
*                    RSRUPD = ON;      /* UPDATE  */               1655
         OI    RSRUPD(REG6),B'00001000'                            1655
*                    RSRDS = ''B;                                  1656
         NI    RSRDS(REG6),B'00011111'                             1656
*                    RSRWF = ON;       /* WORKFILE  */             1657
*                    RSRDIR = ON;      /* DIRECT  */               1658
*                    RSRKEY = ON;      /* KEY  */                  1659
*                                                                  1659
         OI    RSRWF(REG6),B'10010100'                             1659
*                  /* CALL TO MODULE IDCRS06 FOR PROCEDURE RECMGMT   */
*                  CALL RECMGMT;                                   1660
         L     @15,@CV03452                                        1660
         BALR  @14,@15                                             1660
*                    RFY RTNREG RSTD;                              1661
*                    TESTRC = RTNREG;                              1662
         STH   RTNREG,TESTRC(,REG6)                                1662
*                    RFY RTNREG UNRSTD;                            1663
*                  END;                                            1664
*                                                                  1664
*        /************************************************************/
*        /*                                                          */
*        /*     RESOLVE CONFLICTS                                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  1665
*                  IF ((VOLSRSER = RCDCRAVL) & (RSPVRPC = ON)) ×   1665
*                   ((VOLSRSER ^= RCDCRAVL) & (RSPVRSC = ON)) THEN 1665
         L     @07,RSVTBENT(,REG6)                                 1665
         L     @04,RSGRABCU(,REG6)                                 1665
         L     @04,GRABCURR(,@04)                                  1665
         CLC   VOLSRSER(6,@07),RCDCRAVL+8(@04)                     1665
         BNE   @GL00031                                            1665
         TM    RSPVRPC(REG6),B'00001000'                           1665
         BO    @RT01665                                            1665
@GL00031 L     @07,RSVTBENT(,REG6)                                 1665
         L     @04,RSGRABCU(,REG6)                                 1665
         L     @04,GRABCURR(,@04)                                  1665
         CLC   VOLSRSER(6,@07),RCDCRAVL+8(@04)                     1665
         BE    @RF01665                                            1665
         TM    RSPVRSC(REG6),B'00000100'                           1665
         BNO   @RF01665                                            1665
@RT01665 DS    0H                                                  1666
*                    DO;                                           1666
*                                                                  1666
*        /************************************************************/
*        /*                                                          */
*        /*       FIND THE VGO MATCHING THIS DSDIR                   */
*        /*                                                          */
*        /************************************************************/
*                                                                  1667
*                                                                  1667
*                      DO;                                         1667
*                        GRABBB = GRABCURR;                        1668
         L     @07,RSGRABCU(,REG6)                                 1668
         L     @04,GRABCURR(,@07)                                  1668
         ST    @04,GRABBB(,@07)                                    1668
*                        RSWGCODE = GCVOLGO;                       1669
         MVI   RSWGCODE(REG6),X'03'                                1669
*                                      /*SPECIFY GROUP CODE          */
*                        RSWFONE = OFF;/*FIND ALL OCCURRENCES        */
         NI    RSWFONE(REG6),B'01111111'                           1670
*                        /* CALL THE FIND SUBROUTINE */            1671
*                                                                  1671
*                      /* CALL TO MODULE IDCRS04 FOR PROCEDURE FIND  */
*                      CALL FIND;                                  1671
         L     @15,@CV03435                                        1671
         BALR  @14,@15                                             1671
*                      END;                                        1672
*                      RSPVSNT3 = RSWASNVT; /*SAVE THE VGO SNTAB     */
         L     @07,RSWASNVT(,REG6)                                 1673
         ST    @07,RSPVSNT3(,REG6)                                 1673
*                      RSFAENT = RSFCADR; /*FIRST VGO                */
         L     @04,RSFCADR(,@07)                                   1674
         ST    @04,RSFAENT(,@07)                                   1674
*                      DO RSFCNDX = 1 TO RSFHNDX                   1675
*                       WHILE ((VOLSRSER ^= SNVOLSER) ×            1675
*                       (SDSDIRSN ^= RSPVSNT8->RSFAENT->SNSN));    1675
         LA    @07,1                                               1675
         B     @DE01675                                            1675
@DL01675 L     @07,RSVTBENT(,REG6)                                 1675
         L     @04,RSWASNVT(,REG6)                                 1675
         L     @04,RSFAENT(,@04)                                   1675
         CLC   VOLSRSER(6,@07),SNVOLSER(@04)                       1675
         BNE   @DB01675                                            1675
         L     @07,RSPVSNT8(,REG6)                                 1675
         L     @07,RSFAENT(,@07)                                   1675
         CLC   SDSDIRSN(2,@04),SNSN(@07)                           1675
         BE    @DC01675                                            1675
@DB01675 DS    0H                                                  1676
*                        RSFAENT = RSFAENT + RSFENTLN;             1676
         L     @07,RSWASNVT(,REG6)                                 1676
         SLR   @04,@04                                             1676
         IC    @04,RSFENTLN(,@07)                                  1676
         AL    @04,RSFAENT(,@07)                                   1676
         ST    @04,RSFAENT(,@07)                                   1676
*                      END;                                        1677
*                                                                  1677
         L     @04,RSWASNVT(,REG6)                                 1677
         LA    @07,1                                               1677
         AH    @07,RSFCNDX(,@04)                                   1677
@DE01675 L     @04,RSWASNVT(,REG6)                                 1677
         STH   @07,RSFCNDX(,@04)                                   1677
         L     @04,RSWASNVT(,REG6)                                 1677
         CH    @07,RSFHNDX(,@04)                                   1677
         BNH   @DL01675                                            1677
@DC01675 DS    0H                                                  1678
*        /************************************************************/
*        /*                                                          */
*        /*       IF VGO MATCHES CHECK FOR CONFLICT WITH SPACE IN    */
*        /*       APPROPRIATE CONFLICT MAP.                          */
*        /*                                                          */
*        /************************************************************/
*                                                                  1678
*                      IF RSFCNDX > RSFHNDX THEN;                  1678
         L     @07,RSWASNVT(,REG6)                                 1678
         LH    @04,RSFCNDX(,@07)                                   1678
         CH    @04,RSFHNDX(,@07)                                   1678
         BH    @RT01678                                            1678
*                      ELSE                                        1680
*                        DO;                                       1680
*                                                                  1680
*        /************************************************************/
*        /*                                                          */
*        /*       MAP ALL OF THE VGOS FOR THIS DSDIR                 */
*        /*                                                          */
*        /************************************************************/
*                                                                  1681
*                          RSCSFAE = RSFAENT; /*1ST MATCHING VGO     */
         L     @07,RSWASNVT(,REG6)                                 1681
         L     @04,RSFAENT(,@07)                                   1681
         ST    @04,RSCSFAE(,REG6)                                  1681
*                          RSCSFCN = RSFCNDX;                      1682
         LH    @07,RSFCNDX(,@07)                                   1682
         STH   @07,RSCSFCN(,REG6)                                  1682
*                          DO RSFCNDX = RSFCNDX TO RSFHNDX;        1683
         B     @DE01683                                            1683
@DL01683 DS    0H                                                  1684
*                            RSFAENT = RSFCADR + RSFENTLN*(RSFCNDX-1);
         L     @07,RSWASNVT(,REG6)                                 1684
         LH    @04,RSFCNDX(,@07)                                   1684
         LR    @15,@04                                             1684
         BCTR  @15,0                                               1684
         SLR   @03,@03                                             1684
         IC    @03,RSFENTLN(,@07)                                  1684
         MR    @14,@03                                             1684
         AL    @15,RSFCADR(,@07)                                   1684
         ST    @15,RSFAENT(,@07)                                   1684
*                            IF (SNVOLSER = RSCSFAE->SNVOLSER) &   1685
*                               (SDSDIRSN = RSCSFAE->SDSDIRSN)     1685
*                             THEN                                 1685
         L     @07,RSCSFAE(,REG6)                                  1685
         CLC   SNVOLSER(6,@15),SNVOLSER(@07)                       1685
         BNE   @RF01685                                            1685
         CLC   SDSDIRSN(2,@15),SDSDIRSN(@07)                       1685
         BNE   @RF01685                                            1685
*                              DO;                                 1686
*                                RSTGBMAP = RSWKBMAP;              1687
         L     @07,RSWKBMAP(,REG6)                                 1687
         ST    @07,RSTGBMAP(,REG6)                                 1687
*                                RSPVSETB = ''B; /*CLR SETBITS OPTNS */
         MVI   RSPVSETB(REG6),X'00'                                1688
*                                IF RSFCNDX = RSCSFCN THEN         1689
         CH    @04,RSCSFCN(,REG6)                                  1689
         BNE   @RF01689                                            1689
*                                      /*CLEAR MAP 1ST TIME          */
*                                  RSPVCLBM = ON;                  1690
         OI    RSPVCLBM(REG6),B'00100000'                          1690
*                                CALL SETBITS;                     1691
@RF01689 BAL   @14,SETBITS                                         1691
*                              END;                                1692
*                          END;                                    1693
@RF01685 L     @04,RSWASNVT(,REG6)                                 1693
         LA    @07,1                                               1693
         AH    @07,RSFCNDX(,@04)                                   1693
         L     @04,RSWASNVT(,REG6)                                 1693
         STH   @07,RSFCNDX(,@04)                                   1693
@DE01683 L     @04,RSWASNVT(,REG6)                                 1693
         CH    @07,RSFHNDX(,@04)                                   1693
         BNH   @DL01683                                            1693
*                          RSFCNDX = RSCSFCN;                      1694
         L     @07,RSWASNVT(,REG6)                                 1694
         LH    @04,RSCSFCN(,REG6)                                  1694
         STH   @04,RSFCNDX(,@07)                                   1694
*                          RSFAENT = RSCSFAE; /*RESTORE 1ST VGO      */
*                                                                  1695
         L     @04,RSCSFAE(,REG6)                                  1695
         ST    @04,RSFAENT(,@07)                                   1695
*        /************************************************************/
*        /*                                                          */
*        /*       CHECK FOR A CONFLICT                               */
*        /*                                                          */
*        /************************************************************/
*                                                                  1696
*                          RSCK1TO1 = OFF; /*NO MATCH IS GOOD        */
         NI    RSCK1TO1(REG6),B'11111110'                          1696
*                          IF VOLSRSER = RCDCRAVL THEN             1697
         L     @07,RSVTBENT(,REG6)                                 1697
         L     @04,RSGRABCU(,REG6)                                 1697
         L     @04,GRABCURR(,@04)                                  1697
         CLC   VOLSRSER(6,@07),RCDCRAVL+8(@04)                     1697
         BNE   @RF01697                                            1697
*                            RSCKBMAP = RSPCBMAP; /*CHK PRIM CONF MAP*/
         L     @07,RSPCBMAP(,REG6)                                 1698
         ST    @07,RSCKBMAP(,REG6)                                 1698
*                          ELSE                                    1699
*                            RSCKBMAP = RSSCBMAP; /*CHK SEC CONF MAP */
         B     @RC01697                                            1699
@RF01697 L     @07,RSSCBMAP(,REG6)                                 1699
         ST    @07,RSCKBMAP(,REG6)                                 1699
*                          CALL CHKBITS; /*CHECK FOR CONFLICT    */
*                                                                  1700
@RC01697 BAL   @14,CHKBITS                                         1700
*        /************************************************************/
*        /*                                                          */
*        /*       CONFLICT - RETURN SUBALLOCATED SPACE               */
*        /*                                                          */
*        /************************************************************/
*                                                                  1701
*                          IF RSCKBERR = ON × RSSETERR = ON THEN   1701
         TM    RSCKBERR(REG6),B'00000010'                          1701
         BO    @RT01701                                            1701
         TM    RSSETERR(REG6),B'00001000'                          1701
         BNO   @RF01701                                            1701
@RT01701 DS    0H                                                  1702
*                            DO;                                   1702
*                              IF VOLSRSER=RCDCRAVL THEN           1703
         L     @07,RSVTBENT(,REG6)                                 1703
         L     @04,RSGRABCU(,REG6)                                 1703
         L     @04,GRABCURR(,@04)                                  1703
         CLC   VOLSRSER(6,@07),RCDCRAVL+8(@04)                     1703
         BNE   @RF01703                                            1703
*                                      /*PRIMARY CONFLICT            */
*                                RSTOMAP = RSPBMAP; /*UNALLOC P MAP  */
         L     @07,RSPBMAP(,REG6)                                  1704
         ST    @07,RSTOMAP(,REG6)                                  1704
*                              ELSE                                1705
*                                RSTOMAP=RSSBMAP; /*UNALLOC S MAP    */
*                                                                  1705
         B     @RC01703                                            1705
@RF01703 L     @07,RSSBMAP(,REG6)                                  1705
         ST    @07,RSTOMAP(,REG6)                                  1705
*                              RSFROMAP = RSWKBMAP;                1706
@RC01703 L     @07,RSWKBMAP(,REG6)                                 1706
         ST    @07,RSFROMAP(,REG6)                                 1706
*                              DO TMPSZ = RSMAPSIZ BY -256         1707
*                               WHILE(TMPSZ>256);                  1707
         L     @07,RSMAPSIZ(,REG6)                                 1707
         ST    @07,TMPSZ(,REG6)                                    1707
         B     @DE01707                                            1707
@DL01707 DS    0H                                                  1708
*                                RSTOMAP->BMAP(1:256) =            1708
*                                      RSTOMAP->BMAP(1:256) ×      1708
*                                      RSFROMAP->BMAP(1:256);      1708
         L     @07,RSTOMAP(,REG6)                                  1708
         L     @04,RSFROMAP(,REG6)                                 1708
         OC    BMAP(256,@07),BMAP(@04)                             1708
*                                RSTOMAP = RSTOMAP + 256;          1709
         LA    @15,256                                             1709
         ALR   @07,@15                                             1709
         ST    @07,RSTOMAP(,REG6)                                  1709
*                                RSFROMAP = RSFROMAP + 256;        1710
         ALR   @04,@15                                             1710
         ST    @04,RSFROMAP(,REG6)                                 1710
*                              END;                                1711
         L     @07,@CF03546                                        1711
         AL    @07,TMPSZ(,REG6)                                    1711
         ST    @07,TMPSZ(,REG6)                                    1711
@DE01707 L     @07,TMPSZ(,REG6)                                    1711
         C     @07,@CF03188                                        1711
         BH    @DL01707                                            1711
*                              RSTOMAP->BMAP(1:TMPSZ) =            1712
*                                      RSTOMAP->BMAP(1:TMPSZ) ×    1712
*                                      RSFROMAP->BMAP(1:TMPSZ);    1712
*                                                                  1712
         L     @04,RSTOMAP(,REG6)                                  1712
         BCTR  @07,0                                               1712
         L     @01,RSFROMAP(,REG6)                                 1712
         EX    @07,@SO03739                                        1712
*        /************************************************************/
*        /*                                                          */
*        /*       DELETE THE DSDIR                                   */
*        /*                                                          */
*        /************************************************************/
*                                                                  1713
*                              GRABCURR = GRABRAB1; /*VOL RECORD     */
         L     @07,RSGRABCU(,REG6)                                 1713
         L     @04,GRABRAB1(,@07)                                  1713
         ST    @04,GRABCURR(,@07)                                  1713
*                              GRABBB = GRABCURR; /*BASE FOR DELETE  */
         ST    @04,GRABBB(,@07)                                    1714
*                              RSWASNVT = RSPVSNT8; /*DSDIR SNTAB    */
         L     @07,RSPVSNT8(,REG6)                                 1715
         ST    @07,RSWASNVT(,REG6)                                 1715
*                              /* CALL TO MODULE IDCRS04 FOR PROCEDURE
*ELGO                                                                */
*                              CALL DELGO;                         1716
*                                                                  1716
         L     @15,@CV03434                                        1716
         BALR  @14,@15                                             1716
*        /************************************************************/
*        /*                                                          */
*        /*       MARK THE VGO UNUSABLE                              */
*        /*                                                          */
*        /************************************************************/
*                                                                  1717
*                              RSWASNVT = RSPVSNT3; /*VGO SNTAB      */
         L     @07,RSPVSNT3(,REG6)                                 1717
         ST    @07,RSWASNVT(,REG6)                                 1717
*                              RSASDSDI = ON; /*SPACE CONFLICT       */
         OI    RSASDSDI(REG6),B'01000000'                          1718
*                              GRABCURR = GRABRAB2; /*DATA OR INDEX  */
         L     @07,RSGRABCU(,REG6)                                 1719
         L     @04,GRABRAB2(,@07)                                  1719
         ST    @04,GRABCURR(,@07)                                  1719
*                              CALL MARKUNUS;                      1720
*                                                                  1720
*                                                                  1720
         BAL   @14,MARKUNUS                                        1720
*                              DO;                                 1721
*                                RSRTYPE = ''B;                    1722
         MVI   RSRTYPE(REG6),X'00'                                 1722
*                                RSRUPDT = ON;     /* UPDRCD  */   1723
         OI    RSRUPDT(REG6),B'00100000'                           1723
*                                RSRUPD = ON;      /* UPDATE  */   1724
         OI    RSRUPD(REG6),B'00001000'                            1724
*                                RSRDS = ''B;                      1725
         NI    RSRDS(REG6),B'00011111'                             1725
*                                RSRWF = ON;       /* WORKFILE  */ 1726
*                                RSRDIR = ON;      /* DIRECT  */   1727
*                                RSRKEY = ON;      /* KEY  */      1728
*                                                                  1728
         OI    RSRWF(REG6),B'10010100'                             1728
*                              /* CALL TO MODULE IDCRS06 FOR PROCEDURE
*ECMGMT                                                              */
*                              CALL RECMGMT;                       1729
         L     @15,@CV03452                                        1729
         BALR  @14,@15                                             1729
*                                RFY RTNREG RSTD;                  1730
*                                TESTRC = RTNREG;                  1731
         STH   RTNREG,TESTRC(,REG6)                                1731
*                                RFY RTNREG UNRSTD;                1732
*                              END;                                1733
*                                      /*MARK D OR I UNUSABLE        */
*                            END;                                  1734
*                        END;                                      1735
*                                                                  1735
@RF01701 DS    0H                                                  1736
*        /************************************************************/
*        /*                                                          */
*        /*  FREE THE VGO SN TABLE FOR REUSE BY FIND                 */
*        /*                                                          */
*        /************************************************************/
*                                                                  1736
*                      RSPVSNT3->RSFENTLN = 0;                     1736
@RT01678 L     @07,RSPVSNT3(,REG6)                                 1736
         MVI   RSFENTLN(@07),X'00'                                 1736
*                      RSPVSNT3 = 0;                               1737
         SLR   @07,@07                                             1737
         ST    @07,RSPVSNT3(,REG6)                                 1737
*                    END;                                          1738
*                  GRABCURR = GRABRAB2; /*FREE THE DATA OR INDEX RCD */
*                                                                  1739
@RF01665 L     @07,RSGRABCU(,REG6)                                 1739
         L     @04,GRABRAB2(,@07)                                  1739
         ST    @04,GRABCURR(,@07)                                  1739
*                  DO;                                             1740
*                    RSRTYPE = ''B;                                1741
         MVI   RSRTYPE(REG6),X'00'                                 1741
*                    RSRFREE = ON;     /* FREERCD  */              1742
         OI    RSRFREE(REG6),B'00000001'                           1742
*                    RSRUPD = ON;      /* UPDATE  */               1743
         OI    RSRUPD(REG6),B'00001000'                            1743
*                    RSRDS = ''B;                                  1744
         NI    RSRDS(REG6),B'00011111'                             1744
*                    RSRWF = ON;       /* WORKFILE  */             1745
*                    RSRDIR = ON;      /* DIRECT  */               1746
*                    RSRKEY = ON;      /* KEY  */                  1747
*                                                                  1747
         OI    RSRWF(REG6),B'10010100'                             1747
*                  /* CALL TO MODULE IDCRS06 FOR PROCEDURE RECMGMT   */
*                  CALL RECMGMT;                                   1748
         L     @15,@CV03452                                        1748
         BALR  @14,@15                                             1748
*                    RFY RTNREG RSTD;                              1749
*                    TESTRC = RTNREG;                              1750
         STH   RTNREG,TESTRC(,REG6)                                1750
*                    RFY RTNREG UNRSTD;                            1751
*                  END;                                            1752
*                END;                                              1753
*              RSWASNVT = RSPVSNT8;    /*RESTORE GC8 SNTAB           */
@RT01647 L     @07,RSPVSNT8(,REG6)                                 1754
         ST    @07,RSWASNVT(,REG6)                                 1754
*            END;                                                  1755
         L     @04,RSWASNVT(,REG6)                                 1755
         LA    @07,1                                               1755
         AH    @07,RSFCNDX(,@04)                                   1755
@DE01645 L     @04,RSWASNVT(,REG6)                                 1755
         STH   @07,RSFCNDX(,@04)                                   1755
         L     @04,RSWASNVT(,REG6)                                 1755
         CH    @07,RSFHNDX(,@04)                                   1755
         BNH   @DL01645                                            1755
*          END CONFLICT;                                           1756
*        /************************************************************/
*        /*                                                          */
*        /*  PRIMARY PLUS SECONDARY MAP REPRESENTS SUBALLOCATED SPACE*/
*        /*                                                          */
*        /************************************************************/
*                                                                  1757
*        RFY BMAP BASED(RSTOMAP);                                  1757
@RF01642 DS    0H                                                  1758
*        RSTOMAP = RSPBMAP;            /*TARGET MAP                  */
         L     @07,RSPBMAP(,REG6)                                  1758
         ST    @07,RSTOMAP(,REG6)                                  1758
*        RSFROMAP = RSSBMAP;           /*0 BIT MEANS TRACK ALLOCATED */
         L     @07,RSSBMAP(,REG6)                                  1759
         ST    @07,RSFROMAP(,REG6)                                 1759
*        DO TMPSZ = RSMAPSIZ BY -256 WHILE(TMPSZ>256);             1760
         L     @07,RSMAPSIZ(,REG6)                                 1760
         ST    @07,TMPSZ(,REG6)                                    1760
         B     @DE01760                                            1760
@DL01760 DS    0H                                                  1761
*          BMAP(1:256) = BMAP(1:256) & RSFROMAP->BMAP(1:256);      1761
         L     @07,RSTOMAP(,REG6)                                  1761
         L     @04,RSFROMAP(,REG6)                                 1761
         NC    BMAP(256,@07),BMAP(@04)                             1761
*                                      /*1 IN BOTH MEANS AVAILABLE   */
*          RSTOMAP = RSTOMAP + 256;                                1762
         LA    @15,256                                             1762
         ALR   @07,@15                                             1762
         ST    @07,RSTOMAP(,REG6)                                  1762
*          RSFROMAP = RSFROMAP + 256;                              1763
         ALR   @04,@15                                             1763
         ST    @04,RSFROMAP(,REG6)                                 1763
*        END;                                                      1764
         L     @07,@CF03546                                        1764
         AL    @07,TMPSZ(,REG6)                                    1764
         ST    @07,TMPSZ(,REG6)                                    1764
@DE01760 L     @07,TMPSZ(,REG6)                                    1764
         C     @07,@CF03188                                        1764
         BH    @DL01760                                            1764
*        BMAP(1:TMPSZ) = BMAP(1:TMPSZ) & RSFROMAP->BMAP(1:TMPSZ);  1765
         L     @04,RSTOMAP(,REG6)                                  1765
         BCTR  @07,0                                               1765
         L     @01,RSFROMAP(,REG6)                                 1765
         EX    @07,@SN03753                                        1765
*                                      /*PUT IN LAST LITTLE BIT      */
*        RFY BMAP;                     /*REVERT                      */
*                                                                  1766
*        /************************************************************/
*        /*                                                          */
*        /*  UPDATE THE SPACE MAP IF NECESSARY                       */
*        /*                                                          */
*        /************************************************************/
*                                                                  1767
*  VLRUPSM:                                                        1767
*        RSWFBMAP = RSWKBMAP;          /*SPACE MAP STG FOR FIND      */
VLRUPSM  L     @07,RSWKBMAP(,REG6)                                 1767
         ST    @07,RSWFBMAP(,REG6)                                 1767
*        RSWFBMLN = RSMAPSIZ;          /*SIZE OF MAP                 */
         L     @07,RSMAPSIZ(,REG6)                                 1768
         STH   @07,RSWFBMLN(,REG6)                                 1768
*        GRABCURR = GRABRAB1;          /*VOLUME RECORD AS BASE       */
*                                                                  1769
         L     @07,RSGRABCU(,REG6)                                 1769
         L     @04,GRABRAB1(,@07)                                  1769
         ST    @04,GRABCURR(,@07)                                  1769
*        DO;                                                       1770
*          GRABBB = GRABCURR;                                      1771
         ST    @04,GRABBB(,@07)                                    1771
*          RSWGCODE = GCSPCMAP;        /*SPECIFY GROUP CODE          */
         MVI   RSWGCODE(REG6),X'05'                                1772
*          RSWFONE = OFF;              /*FIND ALL OCCURRENCES        */
         NI    RSWFONE(REG6),B'01111111'                           1773
*          /* CALL THE FIND SUBROUTINE */                          1774
*                                                                  1774
*        /* CALL TO MODULE IDCRS04 FOR PROCEDURE FIND                */
*        CALL FIND;                                                1774
         L     @15,@CV03435                                        1774
         BALR  @14,@15                                             1774
*        END;                                                      1775
*                                                                  1775
*        /************************************************************/
*        /*                                                          */
*        /*  IF THERE IS NO SPACE MAP OR IT WAS THE WRONG LENGTH,    */
*        /*  ISSUE MESSAGE IDC11034I.                                */
*        /*                                                          */
*        /************************************************************/
*                                                                  1776
*        IF (RSFENTLN=0) × (RSFLENBM^=RSMAPSIZ) THEN               1776
*                                                                  1776
         L     @07,RSWASNVT(,REG6)                                 1776
         CLI   RSFENTLN(@07),0                                     1776
         BE    @RT01776                                            1776
         LH    @07,RSFLENBM(,@07)                                  1776
         C     @07,RSMAPSIZ(,REG6)                                 1776
         BE    @RF01776                                            1776
@RT01776 DS    0H                                                  1777
*          DO;                                                     1777
*          /*CALL CKERR*/                                          1778
*            RSCKERR = RSCKERR && RSCKERR;                         1778
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1778
*            RSCKERN = RSE045;                                     1779
         MVC   RSCKERN(2,REG6),@CH00976                            1779
*            RSCKTERM = 'RETU';                                    1780
         MVC   RSCKTERM(4,REG6),@CC03500                           1780
*            RSCKMVAR(1) = ADDR(VOLSRSER);                         1781
*                                                                  1781
         L     @07,RSVTBENT(,REG6)                                 1781
         LA    @07,VOLSRSER(,@07)                                  1781
         ST    @07,RSCKMVAR(,REG6)                                 1781
*          /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR             */
*          CALL CKERR;                                             1782
         L     @15,@CV03443                                        1782
         BALR  @14,@15                                             1782
*          END;                                                    1783
*                                                                  1783
*        /************************************************************/
*        /*                                                          */
*        /*  CHECK IF SPACE MAP CHANGED - IF SO, PROCEED TO UPDATE IT*/
*        /*                                                          */
*        /************************************************************/
*                                                                  1784
*        ELSE                                                      1784
*          DO;                                                     1784
         B     @RC01776                                            1784
@RF01776 DS    0H                                                  1785
*            RSTOMAP = RSPBMAP;        /*OUR SPACE MAP               */
         L     @07,RSPBMAP(,REG6)                                  1785
         ST    @07,RSTOMAP(,REG6)                                  1785
*            RSFROMAP = RSFABMAP;      /*THEIR SPACE MAP             */
         L     @07,RSWASNVT(,REG6)                                 1786
         L     @07,RSFABMAP(,@07)                                  1786
         ST    @07,RSFROMAP(,REG6)                                 1786
*            RSPVNRP = OFF;            /*IND NO SPACE MAP CHANGE     */
         NI    RSPVNRP(REG6),B'11101111'                           1787
*            DO TMPSZ = 1 TO RSMAPSIZ;                             1788
         LA    @07,1                                               1788
         B     @DE01788                                            1788
@DL01788 DS    0H                                                  1789
*              IF RSTOMAP->BMAP(1:1) ^= RSFROMAP->BMAP(1:1) THEN   1789
         L     @07,RSTOMAP(,REG6)                                  1789
         L     @04,RSFROMAP(,REG6)                                 1789
         CLC   BMAP(1,@07),BMAP(@04)                               1789
         BE    @RF01789                                            1789
*                RSPVNRP = ON;         /*IND SPC MAP DIFFERENT       */
         OI    RSPVNRP(REG6),B'00010000'                           1790
*              RSTOMAP = RSTOMAP + 1;                              1791
@RF01789 LA    @07,1                                               1791
         L     @04,RSTOMAP(,REG6)                                  1791
         ALR   @04,@07                                             1791
         ST    @04,RSTOMAP(,REG6)                                  1791
*              RSFROMAP = RSFROMAP + 1;                            1792
         AL    @07,RSFROMAP(,REG6)                                 1792
         ST    @07,RSFROMAP(,REG6)                                 1792
*            END;                                                  1793
*                                                                  1793
         LA    @07,1                                               1793
         AL    @07,TMPSZ(,REG6)                                    1793
@DE01788 ST    @07,TMPSZ(,REG6)                                    1793
         C     @07,RSMAPSIZ(,REG6)                                 1793
         BNH   @DL01788                                            1793
*        /************************************************************/
*        /*                                                          */
*        /*  RETURN SUBALLOCATED SPACE                               */
*        /*                                                          */
*        /************************************************************/
*                                                                  1794
*            IF RSPVNRP = ON THEN                                  1794
         TM    RSPVNRP(REG6),B'00010000'                           1794
         BNO   @RF01794                                            1794
*              DO;                                                 1795
*                RSTOMAP = RSFABMAP;   /*TO MAP                      */
         L     @07,RSWASNVT(,REG6)                                 1796
         L     @07,RSFABMAP(,@07)                                  1796
         ST    @07,RSTOMAP(,REG6)                                  1796
*                RSFROMAP = RSPBMAP;    /*FROM MAP                   */
         L     @07,RSPBMAP(,REG6)                                  1797
         ST    @07,RSFROMAP(,REG6)                                 1797
*                DO TMPSZ = RSMAPSIZ BY -256                       1798
*                 WHILE(TMPSZ > 256);                              1798
         L     @07,RSMAPSIZ(,REG6)                                 1798
         ST    @07,TMPSZ(,REG6)                                    1798
         B     @DE01798                                            1798
@DL01798 DS    0H                                                  1799
*                                      /*INSERT ALL BUT LAST SEGMENT */
*                  RSTOMAP->BMAP(1:256) = RSFROMAP->BMAP(1:256);   1799
         L     @07,RSTOMAP(,REG6)                                  1799
         L     @04,RSFROMAP(,REG6)                                 1799
         MVC   BMAP(256,@07),BMAP(@04)                             1799
*                                      /*REPLACE AVAIL SUBALLOCATED  */
*                  RSTOMAP = RSTOMAP + 256; /*NEXT SEGMENT           */
         LA    @15,256                                             1800
         ALR   @07,@15                                             1800
         ST    @07,RSTOMAP(,REG6)                                  1800
*                  RSFROMAP = RSFROMAP + 256;                      1801
         ALR   @04,@15                                             1801
         ST    @04,RSFROMAP(,REG6)                                 1801
*                END;                                              1802
         L     @07,@CF03546                                        1802
         AL    @07,TMPSZ(,REG6)                                    1802
         ST    @07,TMPSZ(,REG6)                                    1802
@DE01798 L     @07,TMPSZ(,REG6)                                    1802
         C     @07,@CF03188                                        1802
         BH    @DL01798                                            1802
*                RSTOMAP->BMAP(1:TMPSZ) = RSFROMAP->BMAP(1:TMPSZ); 1803
         L     @04,RSTOMAP(,REG6)                                  1803
         BCTR  @07,0                                               1803
         L     @01,RSFROMAP(,REG6)                                 1803
         EX    @07,@SM03734                                        1803
*                                      /*REPLACE LAST LITTLE BIT     */
*                                                                  1804
*        /************************************************************/
*        /*                                                          */
*        /*               MODIFY THE SPACE MAP                       */
*        /*                                                          */
*        /************************************************************/
*                                                                  1804
*                /* CALL TO MODULE IDCRS04 FOR PROCEDURE MODGO       */
*                CALL MODGO;                                       1804
*                                                                  1804
         L     @15,@CV03433                                        1804
         BALR  @14,@15                                             1804
*        /************************************************************/
*        /*                                                          */
*        /*  INFORM THE USER THAT THE SPACE MAP WAS MODIFIED         */
*        /*  MESSAGE - IDC11029I.                                    */
*        /*                                                          */
*        /************************************************************/
*                                                                  1805
*                                                                  1805
*                DO;                                               1805
*                /*CALL CKERR*/                                    1806
*                  RSCKERR = RSCKERR && RSCKERR;                   1806
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1806
*                  RSCKERN = RSE032;                               1807
         MVC   RSCKERN(2,REG6),@CH00215                            1807
*                  RSCKTERM = 'RETU';                              1808
         MVC   RSCKTERM(4,REG6),@CC03500                           1808
*                  RSCKMVAR(1) = ADDR(VOLSRSER);                   1809
*                                                                  1809
         L     @07,RSVTBENT(,REG6)                                 1809
         LA    @07,VOLSRSER(,@07)                                  1809
         ST    @07,RSCKMVAR(,REG6)                                 1809
*                /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR       */
*                CALL CKERR;                                       1810
         L     @15,@CV03443                                        1810
         BALR  @14,@15                                             1810
*                END;                                              1811
*              END;                                                1812
*            RSFENTLN = 0;             /*FREE SPACE MAP SNTAB        */
@RF01794 L     @07,RSWASNVT(,REG6)                                 1813
         MVI   RSFENTLN(@07),X'00'                                 1813
*          END;                                                    1814
* CALL EXIT;  /*TERMINATE*/                                        1815
@RC01776 BAL   @14,EXIT                                            1815
* END VLRESET; /*END OF PROCEDURE*/                                1816
@EL00016 DS    0H                                                  1816
@EF00016 DS    0H                                                  1816
@ER00016 BR    @14                                                 1816
@PB00016 DS    0H                                                  1817
*/********************************************************************/
*/* PROCEDURE NAME - VOLCHK                                          */
*/*                                                                  */
*/* FUNCTION - THIS SEGMENT IS CALLED BY MERGECRA. IT INSURES THAT   */
*/*            THERE IS A ONE-TO-ONE CORRESPONDENCE BETWEEN EACH     */
*/*            VSAM DATA SPACE ON A VOLUME (FORMAT 1 DSCB IN THE     */
*/*            VTOC) AND EACH SPACE HEADER IN THE VOLUME RECORD FOR  */
*/*            THAT VOLUME. IF A VSAM FORMAT 1 DSCB DOES NOT HAVE A  */
*/*            CORRESPONDING SPACE HEADER, THE FORMAT 1 DSCB IS      */
*/*            SCRATCHED. IF A SPACE HEADER REFERS TO A NON-         */
*/*            EXISTANT FORMAT 1 DSCB, THEN THE SPACE HEADER IS      */
*/*            DELETED. IF THE EXTENTS IN A SPACE HEADER ARE NOT     */
*/*            IDENTICAL TO THE EXTENTS IN THE CORRESPONDING FORMAT  */
*/*            1 DSCB, THE EXTENTS IN THE SPACE HEADER ARE CORRECTED */
*/*                                                                  */
*/* INPUT - MAIN WORK AREA (RSVTBENT MUST POINT TO CURRENT VOLSERTB  */
*/*            ENTRY AND RSENTPT MUST POINT TO CURRENT RESVOL ENTRY) */
*/*         RECORD MANAGEMENT CONTROL BLOCKS                         */
*/*                                                                  */
*/* OUTPUT - VTOC MAY BE UPDATED                                     */
*/*                                                                  */
*/* EXIT,NORMAL - RETURN TO CALLER                                   */
*/********************************************************************/
*      GENERATE;                                                   1817
         DS    0F
NAME0171 DC    CL8'VOLCHK'
*VOLCHK: PROCEDURE                                                 1818
*        OPTIONS(NOSAVE,NOSAVEAREA);                               1818
*                                                                  1818
         B     @PB00017                                            1818
VOLCHK   DS    0H                                                  1819
*      GENERATE REFS(RS03RG08, REG6);                              1819
         STM   @14,@12,12(@13)  SAVE REGISTERS
         LR    @15,@13  OLD SAVE AREA
         LA    @13,72(@13)  NEW SAVE AREA
         ST    @13,8(@15)  FORWARD CHAIN OLD TO NEW
         ST    @15,4(@13)  BACK CHAIN NEW TO OLD
         ENTRY VOLCHK  ENTRY POINT
         LM    @08,@12,RS03RG08(REG6)  PRIME BASE AND DATA REGS
         MVC   0(4,@15),NAME0171  PROCNAME TO REGSAVE
*        /************************************************************/
*        /*                                                          */
*        /*  STRUCTURE FOR FORMAT 1 DSCB                             */
*        /*                                                          */
*        /************************************************************/
*        DCL 1 FMT1DSCB BASED(IOCDAD),                             1820
*              2 FMT1NAME CHAR(44),    /*DSNAME           */       1820
*              2 FMT1ID  CHAR(1),      /*FORMAT IDENTIFIER*/       1820
*              2 *       CHAR(14),     /*UNREFERENCED*/            1820
*              2 FMT1NEXT BIN(8),      /*NUMBER EXTENTS*/          1820
*              2 *       CHAR(23),     /*UNREFERENCED*/            1820
*              2 FMT1ORG BIT(8),       /*DSORG*/                   1820
*                3 *        BIT(4),    /*UNREFERENCED*/            1820
*                3 FMT1VSAM BIT(1),    /*VSAM ORGANIZATION*/       1820
*                3 *        BIT(3),    /*UNREFERENCED*/            1820
*              2 *       CHAR(21),     /*UNREFERENCED*/            1820
*              2 FMT1EXTS(3) CHAR(10), /*UP TO 3 EXTENT DESCRIPTIONS*/
*                3 FMT1EXTY CHAR(1),   /*TYPE INDICATOR*/          1820
*                3 FMT1SEQ  BIN(8),    /*SEQUENCE NUMBER*/         1820
*                3 FMT1CCHH  CHAR(8),   /*STARTING & ENDING CCHH*/ 1820
*              2 FMT1PTR  CHAR(5);     /*CCHHR OF F3 DSCB*/        1820
*        DCL 1 F1TSCNVT(14) CHAR(1) DEF(RSVF1TS),                  1821
*                                      /*F1 NAME TS CONVERSION WA */
*              2 F1TSFIX  FIXED(8),    /*DECIMAL DIGIT       */    1821
*                3 F1TSZNE BIT(4),     /*ZONE                */    1821
*                3 F1TSDIG BIT(4);     /*DGIT                */    1821
*        DCL F1TS1 CHAR(7) DEF(RSVSCRNM) POS(20);                  1822
*                                      /*1ST 7 DIGITS OF F1 NAME TS */
*        DCL F1TS2 CHAR(7) DEF(RSVSCRNM) POS(29);                  1823
*                                      /*LAST 7 DIGITS OF F1 NAME TS*/
*        /************************************************************/
*        /*                                                          */
*        /*  STRUCTURE FOR FORMAT 3 DSCB                             */
*        /*                                                          */
*        /************************************************************/
*        DCL 1 FMT3DSCB BASED(IOCDAD),                             1824
*              2 *     CHAR(4),         /*UNREFERENCED*/           1824
*              2 FMT3EXTA(4) CHAR(10), /*UP TO 4 EXTENT DESCRIPTIONS*/
*                3 *   CHAR(2),        /*UNREFERENCED*/            1824
*                3 FMT3CCHA CHAR(8),   /*START & END CCHH*/        1824
*              2 *     CHAR(1),        /*UNREFERENCED*/            1824
*              2 FMT3EXTB(9) CHAR(10), /*UP TO 9 EXTENT DESCRIPTIONS*/
*                3 *   CHAR(2),        /*UNREFERENCED*/            1824
*                3 FMT3CCHB CHAR(8),   /*START & END CCHH*/        1824
*              2 *     CHAR(5);        /*UNREFERENCED*/            1824
*        DCL                                                       1825
*          DS4TIMS BASED(IOCDAD) POS(88) /*VSAM VOL/CAT MATCH*/    1825
*            CHAR(8),                  /*TIMESTAMP IN F4 DSCB*/    1825
*          DS4CCHH BASED(IOCDAD) POS(108) CHAR(4);                 1825
*                                        /*STARTING CCHH OF VTOC */
*        DCL 1 TTRZ CHAR(4) DEF(IOCTTR) BDY(WORD),                 1826
*                                      /* TTRZ                       */
*              2 TT       FIXED(15),   /* TT                         */
*              2 R        CHAR(1),     /* R                          */
*              2 Z        CHAR(1);     /* Z                          */
*        DCL 1 DRTS DEF(RSVF1TS),      /* DERIVED TIMESTAMP DIGITS   */
*              2 DRTS1 CHAR(7),        /* FIRST 7 DIGITS             */
*              2 DRTS2 CHAR(7);        /* LAST 7 DIGITS              */
*        RFY RESVOL BASED(RSENTPT);                                1828
*        RFY VOLSERTB BASED(RSVTBENT);                             1829
*        OLDERID2 = NEWERID2;                                      1830
         L     @07,GDTTR2(,REG5)                                   1830
         MVC   @TS00001(95),NEWERID2(@07)                          1830
         MVC   OLDERID2(95,@07),@TS00001                           1830
*        NEWID2 = 'RSVO';                                          1831
         MVC   NEWID2(4,@07),@CC03684                              1831
*        /************************************************************/
*        /*                                                          */
*        /*   SET CURRENT GRABS AND RAB POINTER                      */
*        /*                                                          */
*        /************************************************************/
*        RSVWFUPD = OFF;                                           1832
         NI    RSVWFUPD(REG6),B'11011111'                          1832
*        RSGRABCU = ADDR(GRABSWF);                                 1833
         L     @07,RSIOTBL(,REG6)                                  1833
         ST    @07,RSGRABCU(,REG6)                                 1833
*        GRABCURR = GRABRAB4;                                      1834
         L     @04,GRABRAB4(,@07)                                  1834
         ST    @04,GRABCURR(,@07)                                  1834
*        /************************************************************/
*        /*                                                          */
*        /*  ISSUE GETVIA TO LOCATE THE WORKFILE RECORD FOR THIS     */
*        /*  VOLUME.                                                 */
*        /*                                                          */
*        /************************************************************/
*                                                                  1835
*        DO;                                                       1835
*          RSRTYPE = ''B;                                          1836
         MVI   RSRTYPE(REG6),X'00'                                 1836
*          RSRGET = ON;      /* GETRCD  */                         1837
         OI    RSRGET(REG6),B'10000000'                            1837
*          RSRUPD = ON;      /* UPDATE  */                         1838
         OI    RSRUPD(REG6),B'00001000'                            1838
*          RSRDS = ''B;                                            1839
         NI    RSRDS(REG6),B'00011111'                             1839
*          RSRWF = ON;       /* WORKFILE  */                       1840
*          RSRDIR = ON;      /* DIRECT  */                         1841
*          RSRKEY = ON;      /* KEY  */                            1842
         OI    RSRWF(REG6),B'10010100'                             1842
*          RSVIAFCR = ON;  /*INDICATE CRA SEARCH*/                 1843
         OI    RSVIAFCR(REG6),B'10000000'                          1843
*          RSVIACRA = VOLSRSER; /*SET VOLSER */                    1844
         L     @07,RSVTBENT(,REG6)                                 1844
         MVC   RSVIACRA(6,REG6),VOLSRSER(@07)                      1844
*          RSVIACIN = VOLSRCI; /*SET CI NUMBER */                  1845
*                                                                  1845
         MVC   RSVIACIN(3,REG6),VOLSRCI+1(@07)                     1845
*        /* CALL TO MODULE IDCRS05 FOR PROCEDURE GETVIA              */
*        CALL GETVIA;                                              1846
         L     @15,@CV03436                                        1846
         BALR  @14,@15                                             1846
*        END;                                                      1847
*        /************************************************************/
*        /*                                                          */
*        /*  IF VOLUME RECORD WAS NOT FOUND, CALL CKERR TO TERMINATE.*/
*        /*                                                          */
*        /************************************************************/
*        IF RABNRF = ON                                            1848
*          THEN                                                    1848
*                                                                  1848
         L     @07,RSGRABCU(,REG6)                                 1848
         L     @07,GRABCURR(,@07)                                  1848
         TM    RABNRF(@07),B'00000010'                             1848
         BNO   @RF01848                                            1848
*            DO;                                                   1849
*            /*CALL CKERR*/                                        1850
*              RSCKERR = RSCKERR && RSCKERR;                       1850
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1850
*              RSCKERN = RSE100;                                   1851
         MVC   RSCKERN(2,REG6),@CH00143                            1851
*              RSCKTERM = 'TERM';                                  1852
*                                                                  1852
         MVC   RSCKTERM(4,REG6),@CC03527                           1852
*            /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR           */
*            CALL CKERR;                                           1853
         L     @15,@CV03443                                        1853
         BALR  @14,@15                                             1853
*            END;                                                  1854
*        /************************************************************/
*        /*                                                          */
*        /*  BUILD THE OPNAGL FOR UOPEN REQUEST TO OPEN VTOC         */
*        /*                                                          */
*        /************************************************************/
*        OPNPTR = ADDR(RSOPNAGL);                                  1855
@RF01848 L     @07,RSIOTBL(,REG6)                                  1855
         LA    @07,RSOPNAGL(,@07)                                  1855
         ST    @07,OPNPTR(,REG6)                                   1855
*        OPNAGL = OPNAGL && OPNAGL;                                1856
         XC    OPNAGL(48,@07),OPNAGL(@07)                          1856
*        /************************************************************/
*        /*                                                          */
*        /*    SET OPEN OPTIONS - INPUT,BLOCK,NON-VSAM,MODIFY JFCB   */
*        /*                                                          */
*        /************************************************************/
*        OPNOPTIN = ON;                                            1857
*        OPNOPTBK = ON;                                            1858
         OI    OPNOPTIN(@07),B'10010000'                           1858
*        OPNDSOPS = ON;                                            1859
         OI    OPNDSOPS(@07),B'01000000'                           1859
*        OPNOPTJM = ON;                                            1860
         OI    OPNOPTJM(@07),B'00100000'                           1860
*        OPNIOC = ADDR(RSVTIOCS);                                  1861
         LA    @04,RSVTIOCS(,REG6)                                 1861
         ST    @04,OPNIOC(,@07)                                    1861
*        OPNDDN = ADDR(RESVLDDN);                                  1862
         L     @04,RSENTPT(,REG6)                                  1862
         LA    @15,RESVLDDN(,@04)                                  1862
         ST    @15,OPNDDN(,@07)                                    1862
*        OPNDSN = ADDR(DS4DSNM);                                   1863
         LA    @15,DS4DSNM                                         1863
         ST    @15,OPNDSN(,@07)                                    1863
*        OPNBLK = VTCBLKSZ;                                        1864
         MVC   OPNBLK(4,@07),@CF00753                              1864
*        OPNKYL = LENGTH(DS4DSNM);                                 1865
         MVI   OPNKYL(@07),X'2C'                                   1865
*        OPNVOL = ADDR(RSRNVL);                                    1866
         LA    @15,RSRNVL(,REG6)                                   1866
         ST    @15,OPNVOL(,@07)                                    1866
*        RSRNVLC = 1;                                              1867
         MVI   RSRNVLC(REG6),X'01'                                 1867
*        RSRNVLSR = RESVLSER;                                      1868
         MVC   RSRNVLSR(6,REG6),RESVLSER(@04)                      1868
*        /************************************************************/
*        /*                                                          */
*        /*    ISSUE UOPEN TO OPEN VTOC                              */
*        /*                                                          */
*        /************************************************************/
*        CALL IDCIOOP0 (GDTTBL,OPNAGL);                            1869
         ST    REG5,@AL00001                                       1869
         ST    @07,@AL00001+4                                      1869
         MVI   @AL00001+4,X'80'                                    1869
         L     @15,GDTOPN(,REG5)                                   1869
         LA    @01,@AL00001                                        1869
         BALR  @14,@15                                             1869
*        RESPECIFY RTNREG RSTD;                                    1870
*        TESTRC = RTNREG;                                          1871
         STH   RTNREG,TESTRC(,REG6)                                1871
*        RESPECIFY RTNREG UNRSTD;                                  1872
*        IF TESTRC ^= 0                                            1873
*          THEN                                                    1873
*                                                                  1873
         LH    @07,TESTRC(,REG6)                                   1873
         LTR   @07,@07                                             1873
         BZ    @RF01873                                            1873
*            DO;                                                   1874
*            /*CALL CKERR*/                                        1875
*              RSCKERR = RSCKERR && RSCKERR;                       1875
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1875
*              RSCKERN = RSE050;                                   1876
         MVC   RSCKERN(2,REG6),@CH00985                            1876
*              RSCKTERM = 'TERM';                                  1877
*                                                                  1877
         MVC   RSCKTERM(4,REG6),@CC03527                           1877
*            /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR           */
*            CALL CKERR;                                           1878
         L     @15,@CV03443                                        1878
         BALR  @14,@15                                             1878
*            END;                                                  1879
*        /************************************************************/
*        /*                                                          */
*        /*  SET VTOC OPENED AUDIT FLAG ON                           */
*        /*                                                          */
*        /************************************************************/
*        RSVTOPN = ON;                                             1880
@RF01873 OI    RSVTOPN(REG6),B'00001000'                           1880
*        /************************************************************/
*        /*                                                          */
*        /*  ISSUE UGET FOR FORMAT 4 DSCB                            */
*        /*                                                          */
*        /************************************************************/
*        IOCSPTR = RSVTIOCS;                                       1881
         L     @07,RSVTIOCS(,REG6)                                 1881
         ST    @07,IOCSPTR(,REG6)                                  1881
*        CALL IDCIOGT0 (GDTTBL,IOCSPTR);                           1882
         ST    REG5,@AL00001                                       1882
         LA    @07,IOCSPTR(,REG6)                                  1882
         ST    @07,@AL00001+4                                      1882
         MVI   @AL00001+4,X'80'                                    1882
         L     @15,GDTGET(,REG5)                                   1882
         LA    @01,@AL00001                                        1882
         BALR  @14,@15                                             1882
*        RESPECIFY RTNREG RSTD;                                    1883
*        TESTRC = RTNREG;                                          1884
         STH   RTNREG,TESTRC(,REG6)                                1884
*        RESPECIFY RTNREG UNRSTD;                                  1885
*        IF TESTRC ^= 0                                            1886
*          THEN                                                    1886
*                                                                  1886
         LH    @07,TESTRC(,REG6)                                   1886
         LTR   @07,@07                                             1886
         BZ    @RF01886                                            1886
*            DO;                                                   1887
*            /*CALL CKERR*/                                        1888
*              RSCKERR = RSCKERR && RSCKERR;                       1888
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1888
*              RSCKERN = RSE051;                                   1889
         MVC   RSCKERN(2,REG6),@CH00987                            1889
*              RSCKTERM = 'TERM';                                  1890
*                                                                  1890
         MVC   RSCKTERM(4,REG6),@CC03527                           1890
*            /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR           */
*            CALL CKERR;                                           1891
         L     @15,@CV03443                                        1891
         BALR  @14,@15                                             1891
*            END;                                                  1892
*        /************************************************************/
*        /*                                                          */
*        /*  CONVERT STARTING CYLINDER, TRACK OF VTOC TO RELATIVE    */
*        /*  TRACK FROM BEGINNING OF PACK. WILL HAVE TO SUBTRACT     */
*        /*  THIS FROM RELATIVE TRACK OF F3DSCB FROM BEGINNING OF    */
*        /*  PACK TO DETERMINE RELATIVE TRACK OF F3DSCB FROM         */
*        /*  BEGINNING OF DATA SET.                                  */
*        /*                                                          */
*        /************************************************************/
*        RSCCHHP = ADDR(DS4CCHH);                                  1893
@RF01886 L     @07,IOCSPTR(,REG6)                                  1893
         L     @07,IOCDAD(,@07)                                    1893
         LA    @07,DS4CCHH(,@07)                                   1893
         ST    @07,RSCCHHP(,REG6)                                  1893
*        RSCFINN = OFF;                                            1894
         NI    RSCFINN(REG6),B'01111111'                           1894
*        /* CALL TO MODULE IDCRS07 FOR PROCEDURE CNVTCCHH            */
*        CALL CNVTCCHH;                                            1895
         L     @15,@CV03460                                        1895
         BALR  @14,@15                                             1895
*        RSVF4TT = RSTT;                                           1896
         LH    @07,RSTT(,REG6)                                     1896
         STH   @07,RSVF4TT(,REG6)                                  1896
*        /************************************************************/
*        /*                                                          */
*        /*  VOLUME RECORD TIMESTAMP DOES NOT MATCH F4DSCB TIMESTAMP */
*        /*                                                          */
*        /************************************************************/
*        IF COWNID ^= DS4TIMS                                      1897
*          THEN                                                    1897
         L     @07,RSGRABCU(,REG6)                                 1897
         LA    @04,8                                               1897
         AL    @04,GRABCURR(,@07)                                  1897
         L     @07,IOCSPTR(,REG6)                                  1897
         L     @07,IOCDAD(,@07)                                    1897
         CLC   COWNID(8,@04),DS4TIMS(@07)                          1897
         BE    @RF01897                                            1897
*            DO;                                                   1898
*        /************************************************************/
*        /*                                                          */
*        /*  UPDATE WORKFILE RECORD WITH TIMESTAMP FROM F4DSCB       */
*        /*                                                          */
*        /************************************************************/
*              COWNID = DS4TIMS;                                   1899
         MVC   COWNID(8,@04),DS4TIMS(@07)                          1899
*              RSVWFUPD = ON;                                      1900
         OI    RSVWFUPD(REG6),B'00100000'                          1900
*        /************************************************************/
*        /*                                                          */
*        /*  PREPARE TO UPDATE THE CRA RECORD VIA ADDUPCR            */
*        /*                                                          */
*        /************************************************************/
*              /* CALL TO MODULE IDCRS05 FOR PROCEDURE ADDUPCR       */
*              CALL ADDUPCR;                                       1901
         L     @15,@CV03442                                        1901
         BALR  @14,@15                                             1901
*        /************************************************************/
*        /*                                                          */
*        /*  CALL CKERR TO PRINT AN INFORMATIONAL MESSAGE            */
*        /*                                                          */
*        /************************************************************/
*                                                                  1902
*              DO;                                                 1902
*              /*CALL CKERR*/                                      1903
*                RSCKERR = RSCKERR && RSCKERR;                     1903
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1903
*                RSCKERN = RSE060;                                 1904
         MVC   RSCKERN(2,REG6),@CH01004                            1904
*                RSCKTERM = 'RETU';                                1905
         MVC   RSCKTERM(4,REG6),@CC03500                           1905
*                RSCKMVAR(1) = ADDR(RESVLSER);                     1906
*                                                                  1906
         L     @07,RSENTPT(,REG6)                                  1906
         LA    @07,RESVLSER(,@07)                                  1906
         ST    @07,RSCKMVAR(,REG6)                                 1906
*              /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR         */
*              CALL CKERR;                                         1907
         L     @15,@CV03443                                        1907
         BALR  @14,@15                                             1907
*              END;                                                1908
*            END;                                                  1909
*        /************************************************************/
*        /*                                                          */
*        /*  CALL RSMFIND TO EXTRACT ALL SPACE HDRS FOR VOL RECORD   */
*        /*                                                          */
*        /************************************************************/
*                                                                  1910
*        DO;                                                       1910
@RF01897 DS    0H                                                  1911
*          GRABBB = GRABCURR;                                      1911
         L     @07,RSGRABCU(,REG6)                                 1911
         L     @04,GRABCURR(,@07)                                  1911
         ST    @04,GRABBB(,@07)                                    1911
*          RSWGCODE = 6;               /*SPECIFY GROUP CODE          */
         MVI   RSWGCODE(REG6),X'06'                                1912
*          RSWFONE = OFF;              /*FIND ALL OCCURRENCES        */
         NI    RSWFONE(REG6),B'01111111'                           1913
*          /* CALL THE FIND SUBROUTINE */                          1914
*                                                                  1914
*        /* CALL TO MODULE IDCRS04 FOR PROCEDURE FIND                */
*        CALL FIND;                                                1914
         L     @15,@CV03435                                        1914
         BALR  @14,@15                                             1914
*        END;      /*EXTRACT ALL SPC HDRS*/                        1915
*        /************************************************************/
*        /*                                                          */
*        /*  INITIALIZE END OF FILE AND REPOSITIONING FLAGS.         */
*        /*                                                          */
*        /************************************************************/
*        RSVGTEOF = OFF;                                           1916
*        RSVREPOS = OFF;                                           1917
         NI    RSVGTEOF(REG6),B'00111111'                          1917
*        /************************************************************/
*        /*                                                          */
*        /*  IF NO RECORD FOUND INDICATOR RETURNED FROM FIND, SET    */
*        /*  INVALID VOLUME RECORD FLAG  AND DO NOT PROCESS VOLUME.  */
*        /*                                                          */
*        /************************************************************/
*        IF RSFNRF = ON × RSFENTLN = 0                             1918
*          THEN                                                    1918
         L     @07,RSWASNVT(,REG6)                                 1918
         TM    RSFNRF(@07),B'10000000'                             1918
         BO    @RT01918                                            1918
         CLI   RSFENTLN(@07),0                                     1918
         BNE   @RF01918                                            1918
@RT01918 DS    0H                                                  1919
*            DO;                                                   1919
*              RSBADVOL = ON;                                      1920
         OI    RSBADVOL(REG6),B'00000010'                          1920
*              RSVGTEOF = ON;                                      1921
         OI    RSVGTEOF(REG6),B'10000000'                          1921
*            END;                                                  1922
*        /************************************************************/
*        /*                                                          */
*        /*  PROCESS ALL VSAM OWNED FORMAT 1 DSCBS                   */
*        /*                                                          */
*        /************************************************************/
*VOLCLP1:                                                          1923
*        DO WHILE (RSVGTEOF = OFF);                                1923
@RF01918 DS    0H                                                  1923
VOLCLP1  B     @DE01923                                            1923
@DL01923 DS    0H                                                  1924
*          IOCSPTR = RSVTIOCS;                                     1924
         L     @07,RSVTIOCS(,REG6)                                 1924
         ST    @07,IOCSPTR(,REG6)                                  1924
*        /************************************************************/
*        /*                                                          */
*        /*    SETUP IOCTTR AND ISSUE UPOSIT IF POSITIONING TO NEXT  */
*        /*      DSCB IS NECESSARY                                   */
*        /*                                                          */
*        /************************************************************/
*          IF RSVREPOS = ON                                        1925
*            THEN                                                  1925
         TM    RSVREPOS(REG6),B'01000000'                          1925
         BNO   @RF01925                                            1925
*              DO;                                                 1926
*                IOCTTR = RSVSVTTR;                                1927
         MVC   IOCTTR(4,@07),RSVSVTTR(REG6)                        1927
*                Z = 1;                                            1928
         MVI   Z(@07),X'01'                                        1928
*                CALL IDCIOPO0 (GDTTBL,IOCSPTR);                   1929
         ST    REG5,@AL00001                                       1929
         LA    @07,IOCSPTR(,REG6)                                  1929
         ST    @07,@AL00001+4                                      1929
         MVI   @AL00001+4,X'80'                                    1929
         L     @15,GDTPOS(,REG5)                                   1929
         LA    @01,@AL00001                                        1929
         BALR  @14,@15                                             1929
*                RESPECIFY RTNREG RSTD;                            1930
*                TESTRC = RTNREG;                                  1931
         STH   RTNREG,TESTRC(,REG6)                                1931
*                RESPECIFY RTNREG UNRSTD;                          1932
*                IF TESTRC ^= 0                                    1933
*                  THEN                                            1933
*                                                                  1933
         LH    @07,TESTRC(,REG6)                                   1933
         LTR   @07,@07                                             1933
         BZ    @RF01933                                            1933
*                    DO;                                           1934
*                    /*CALL CKERR*/                                1935
*                      RSCKERR = RSCKERR && RSCKERR;               1935
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1935
*                      RSCKERN = RSE052;                           1936
         MVC   RSCKERN(2,REG6),@CH00989                            1936
*                      RSCKTERM = 'TERM';                          1937
*                                                                  1937
         MVC   RSCKTERM(4,REG6),@CC03527                           1937
*                    /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR   */
*                    CALL CKERR;                                   1938
         L     @15,@CV03443                                        1938
         BALR  @14,@15                                             1938
*                    END;                                          1939
*              END;                                                1940
@RF01933 DS    0H                                                  1941
*        /************************************************************/
*        /*                                                          */
*        /*    SET NOTE BIT ON IN IOCSTR TO RETURN TTRZ OF RECORD    */
*        /*      READ IN IOCTTR AND ISSUE UGET TO GET NEXT DSCB      */
*        /*                                                          */
*        /************************************************************/
*          IOCMACNT = ON;                                          1941
@RF01925 L     @07,IOCSPTR(,REG6)                                  1941
         OI    IOCMACNT(@07),B'00000001'                           1941
*          CALL IDCIOGT0 (GDTTBL,IOCSPTR);                         1942
         ST    REG5,@AL00001                                       1942
         LA    @07,IOCSPTR(,REG6)                                  1942
         ST    @07,@AL00001+4                                      1942
         MVI   @AL00001+4,X'80'                                    1942
         L     @15,GDTGET(,REG5)                                   1942
         LA    @01,@AL00001                                        1942
         BALR  @14,@15                                             1942
*          RESPECIFY RTNREG RSTD;                                  1943
*          TESTRC = RTNREG;                                        1944
         STH   RTNREG,TESTRC(,REG6)                                1944
*          RESPECIFY RTNREG UNRSTD;                                1945
*        /************************************************************/
*        /*                                                          */
*        /*    IF END OF FILE ON VTOC, SET EOF BIT ON                */
*        /*                                                          */
*        /************************************************************/
*          IF TESTRC = 16                                          1946
*            THEN                                                  1946
         LH    @07,TESTRC(,REG6)                                   1946
         C     @07,@CF00471                                        1946
         BNE   @RF01946                                            1946
*              RSVGTEOF = ON;                                      1947
         OI    RSVGTEOF(REG6),B'10000000'                          1947
*            ELSE                                                  1948
*        /************************************************************/
*        /*                                                          */
*        /*    CALL CKERR TO TERMINATE IF ERROR ON UGET OTHERWISE    */
*        /*      SAVE TTRZ OF RECORD READ  AND SET NO REPOSITIONING  */
*        /*                                                          */
*        /************************************************************/
*VOLCNEOF:                                                         1948
*              DO;                                                 1948
         B     @RC01946                                            1948
@RF01946 DS    0H                                                  1948
VOLCNEOF DS    0H                                                  1949
*                IF TESTRC ^= 0                                    1949
*                  THEN                                            1949
*                                                                  1949
         LH    @07,TESTRC(,REG6)                                   1949
         LTR   @07,@07                                             1949
         BZ    @RF01949                                            1949
*                    DO;                                           1950
*                    /*CALL CKERR*/                                1951
*                      RSCKERR = RSCKERR && RSCKERR;               1951
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1951
*                      RSCKERN = RSE053;                           1952
         MVC   RSCKERN(2,REG6),@CH00991                            1952
*                      RSCKTERM = 'TERM';                          1953
*                                                                  1953
         MVC   RSCKTERM(4,REG6),@CC03527                           1953
*                    /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR   */
*                    CALL CKERR;                                   1954
         L     @15,@CV03443                                        1954
         BALR  @14,@15                                             1954
*                    END;                                          1955
*                RSVSVTTR = IOCTTR;                                1956
@RF01949 L     @07,IOCSPTR(,REG6)                                  1956
         MVC   RSVSVTTR(4,REG6),IOCTTR(@07)                        1956
*                RSVREPOS = OFF;                                   1957
         NI    RSVREPOS(REG6),B'10111111'                          1957
*        /************************************************************/
*        /*                                                          */
*        /*    FOR VSAM OWNED FORMAT 1 DSCB'S, SAVE DSN  & VOL INFO  */
*        /*      DO NOT PROCESS ANY UNIQUE DATA SETS                 */
*        /*                                                          */
*        /************************************************************/
*                IF FMT1ID = DSCB1ID & FMT1VSAM = ON THEN          1958
         L     @07,IOCDAD(,@07)                                    1958
         CLC   FMT1ID(1,@07),DSCB1ID                               1958
         BNE   @RF01958                                            1958
         TM    FMT1VSAM(@07),B'00001000'                           1958
         BNO   @RF01958                                            1958
*                  IF FMT1NAME(1:7) = NOUNIQ THEN                  1959
         CLC   FMT1NAME(7,@07),@CC00846                            1959
         BNE   @RF01959                                            1959
*VOLCNUNQ:                                                         1960
*                    DO;                                           1960
VOLCNUNQ DS    0H                                                  1961
*                      RSVF1EXT = ''B;                             1961
         XC    RSVF1EXT(64,REG6),RSVF1EXT(REG6)                    1961
*                      RSVSCRPT = ADDR(RSSCRLST);                  1962
         L     @07,RSIOTBL(,REG6)                                  1962
         LA    @07,RSSCRLST(,@07)                                  1962
         ST    @07,RSVSCRPT(,REG6)                                 1962
*                      RFY UVOLLIST BASED(RSVSCRPT);               1963
*                      RSVEXTS = FMT1NEXT;  /*SAVE NUM EXTS*/      1964
         L     @04,IOCSPTR(,REG6)                                  1964
         L     @15,IOCDAD(,@04)                                    1964
         SLR   @14,@14                                             1964
         IC    @14,FMT1NEXT(,@15)                                  1964
         STC   @14,RSVEXTS(,REG6)                                  1964
*                      RSVSCRNM = FMT1NAME;                        1965
         MVC   RSVSCRNM(44,REG6),FMT1NAME(@15)                     1965
*                      UVOLCNT = 1;                                1966
         MVC   UVOLCNT(2,@07),@CH00212                             1966
*                      UVOLDEV(1) = RTDEVUCB;                      1967
         L     @01,RSGRABCU(,REG6)                                 1967
         L     @01,GRABCURR(,@01)                                  1967
         MVC   UVOLDEV(4,@07),RTDEVUCB(@01)                        1967
*                      UVOLVOL(1) = RESVLSER;                      1968
         L     @01,RSENTPT(,REG6)                                  1968
         MVC   UVOLVOL(6,@07),RESVLSER(@01)                        1968
*        /************************************************************/
*        /*                                                          */
*        /*    CALL CONVERSION RTN TO CONVERT EXTENTS IN FORMAT 1    */
*        /*      DSCB TO TTNN'S                                      */
*        /*                                                          */
*        /************************************************************/
*                      RSCIOCS = IOCSPTR;  /*PTR TO IOCSTR*/       1969
         ST    @04,RSCIOCS(,REG6)                                  1969
*                      IF RSVEXTS < 3                              1970
*                        THEN                                      1970
         CLI   RSVEXTS(REG6),3                                     1970
         BNL   @RF01970                                            1970
*                          RSIDX1 = RSVEXTS; /*SET LIMIT TO NO. OF   */
         STH   @14,RSIDX1(,REG6)                                   1971
*                                      /* EXTENTS RETURNED           */
*                        ELSE                                      1972
*                          RSIDX1 = DIM(FMT1EXTS); /*SET LIMIT TO    */
         B     @RC01970                                            1972
@RF01970 MVC   RSIDX1(2,REG6),@CH00158                             1972
*                                      /* NO. OF EXTENTS IN F1DSCB   */
*                      DO RSIDX =1 TO RSIDX1;                      1973
@RC01970 LA    @07,1                                               1973
         B     @DE01973                                            1973
@DL01973 DS    0H                                                  1974
*                        RSCCHHP = ADDR(FMT1CCHH(RSIDX));          1974
         LH    @07,RSIDX(,REG6)                                    1974
         MH    @07,@CH00034                                        1974
         L     @04,IOCSPTR(,REG6)                                  1974
         L     @04,IOCDAD(,@04)                                    1974
         LA    @07,FMT1CCHH-10(@07,@04)                            1974
         ST    @07,RSCCHHP(,REG6)                                  1974
*                        RSCFINN = ON;   /*RETURN NN*/             1975
         OI    RSCFINN(REG6),B'10000000'                           1975
*                        /* CALL TO MODULE IDCRS07 FOR PROCEDURE CNVTCC
*H                                                                   */
*                        CALL CNVTCCHH;                            1976
         L     @15,@CV03460                                        1976
         BALR  @14,@15                                             1976
*                        RSVF1TTN(RSIDX) = RSTTNN;                 1977
         LH    @07,RSIDX(,REG6)                                    1977
         SLA   @07,2                                               1977
         ALR   @07,REG6                                            1977
         MVC   RSVF1TTN-4(4,@07),RSTTNN(REG6)                      1977
*                        RSCFINN = OFF;                            1978
         NI    RSCFINN(REG6),B'01111111'                           1978
*                      END;                                        1979
         LA    @07,1                                               1979
         AH    @07,RSIDX(,REG6)                                    1979
@DE01973 STH   @07,RSIDX(,REG6)                                    1979
         CH    @07,RSIDX1(,REG6)                                   1979
         BNH   @DL01973                                            1979
*        /************************************************************/
*        /*                                                          */
*        /*    ISSUE UPOSIT AND UGET FOR FORMAT 3 DSCB IF ONE.       */
*        /*      CALL CKERR TO TERMINATE IF ANY ERRORS               */
*        /*                                                          */
*        /************************************************************/
*                      IF FMT1PTR ^= FMT3NULL                      1980
*                        THEN                                      1980
         L     @07,IOCSPTR(,REG6)                                  1980
         L     @07,IOCDAD(,@07)                                    1980
         CLC   FMT1PTR(5,@07),FMT3NULL                             1980
         BE    @RF01980                                            1980
*                          DO;                                     1981
*        /************************************************************/
*        /*                                                          */
*        /*    CALL CONVERSION RTN TO CONVERT F3 DSCB PTR TO TT.     */
*        /*    SET UP TTR0 IN IOCTTR.                                */
*        /*                                                          */
*        /************************************************************/
*                            RSCCHHP = ADDR(FMT1PTR);              1982
         LA    @07,FMT1PTR(,@07)                                   1982
         ST    @07,RSCCHHP(,REG6)                                  1982
*                            /* CALL TO MODULE IDCRS07 FOR PROCEDURE CN
*TCCHH                                                               */
*                            CALL CNVTCCHH;                        1983
         L     @15,@CV03460                                        1983
         BALR  @14,@15                                             1983
*                            TT = RSTT - RSVF4TT;                  1984
         L     @07,IOCSPTR(,REG6)                                  1984
         LH    @04,RSTT(,REG6)                                     1984
         SH    @04,RSVF4TT(,REG6)                                  1984
         STH   @04,TT(,@07)                                        1984
*                            R = FMT1PTR(5:5);                     1985
         L     @04,IOCDAD(,@07)                                    1985
         MVC   R(1,@07),FMT1PTR+4(@04)                             1985
*                            Z = 0;                                1986
         MVI   Z(@07),X'00'                                        1986
*                            RSVREPOS = ON;                        1987
         OI    RSVREPOS(REG6),B'01000000'                          1987
*                            CALL IDCIOPO0 (GDTTBL,IOCSPTR);       1988
         ST    REG5,@AL00001                                       1988
         LA    @07,IOCSPTR(,REG6)                                  1988
         ST    @07,@AL00001+4                                      1988
         MVI   @AL00001+4,X'80'                                    1988
         L     @15,GDTPOS(,REG5)                                   1988
         LA    @01,@AL00001                                        1988
         BALR  @14,@15                                             1988
*                            RESPECIFY RTNREG RSTD;                1989
*                            TESTRC = RTNREG;                      1990
         STH   RTNREG,TESTRC(,REG6)                                1990
*                            RESPECIFY RTNREG UNRSTD;              1991
*                            IF TESTRC ^= 0                        1992
*                              THEN                                1992
*                                                                  1992
         LH    @07,TESTRC(,REG6)                                   1992
         LTR   @07,@07                                             1992
         BZ    @RF01992                                            1992
*                                DO;                               1993
*                                /*CALL CKERR*/                    1994
*                                  RSCKERR = RSCKERR && RSCKERR;   1994
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      1994
*                                  RSCKERN = RSE052;               1995
         MVC   RSCKERN(2,REG6),@CH00989                            1995
*                                  RSCKTERM = 'TERM';              1996
*                                                                  1996
         MVC   RSCKTERM(4,REG6),@CC03527                           1996
*                                /* CALL TO MODULE IDCRS05 FOR PROCEDUR
* CKERR                                                              */
*                                CALL CKERR;                       1997
         L     @15,@CV03443                                        1997
         BALR  @14,@15                                             1997
*                                END;                              1998
*                            IOCMACNT = OFF;                       1999
@RF01992 L     @07,IOCSPTR(,REG6)                                  1999
         NI    IOCMACNT(@07),B'11111110'                           1999
*                            CALL IDCIOGT0 (GDTTBL,IOCSPTR);       2000
         ST    REG5,@AL00001                                       2000
         LA    @07,IOCSPTR(,REG6)                                  2000
         ST    @07,@AL00001+4                                      2000
         MVI   @AL00001+4,X'80'                                    2000
         L     @15,GDTGET(,REG5)                                   2000
         LA    @01,@AL00001                                        2000
         BALR  @14,@15                                             2000
*                            RESPECIFY RTNREG RSTD;                2001
*                            TESTRC = RTNREG;                      2002
         STH   RTNREG,TESTRC(,REG6)                                2002
*                            RESPECIFY RTNREG UNRSTD;              2003
*                            IF TESTRC ^= 0                        2004
*                              THEN                                2004
*                                                                  2004
         LH    @07,TESTRC(,REG6)                                   2004
         LTR   @07,@07                                             2004
         BZ    @RF02004                                            2004
*                                DO;                               2005
*                                /*CALL CKERR*/                    2006
*                                  RSCKERR = RSCKERR && RSCKERR;   2006
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      2006
*                                  RSCKERN = RSE053;               2007
         MVC   RSCKERN(2,REG6),@CH00991                            2007
*                                  RSCKTERM = 'TERM';              2008
*                                                                  2008
         MVC   RSCKTERM(4,REG6),@CC03527                           2008
*                                /* CALL TO MODULE IDCRS05 FOR PROCEDUR
* CKERR                                                              */
*                                CALL CKERR;                       2009
         L     @15,@CV03443                                        2009
         BALR  @14,@15                                             2009
*                                END;                              2010
*        /************************************************************/
*        /*                                                          */
*        /*    CALL CONVERSION RTN TO CONVERT F3 EXTENTS TO TTNN'S   */
*        /*                                                          */
*        /************************************************************/
*                            RSCIOCS = IOCSPTR;                    2011
@RF02004 L     @07,IOCSPTR(,REG6)                                  2011
         ST    @07,RSCIOCS(,REG6)                                  2011
*                            IF RSVEXTS < 7                        2012
*                              THEN                                2012
         CLI   RSVEXTS(REG6),7                                     2012
         BNL   @RF02012                                            2012
*                                RSIDX1 = RSVEXTS - 3; /*SET LIMIT TO*/
         SLR   @07,@07                                             2013
         IC    @07,RSVEXTS(,REG6)                                  2013
         SL    @07,@CF00158                                        2013
         STH   @07,RSIDX1(,REG6)                                   2013
*                                      /* NO. OF EXTENTS RETURNED    */
*                              ELSE                                2014
*                                RSIDX1 = DIM(FMT3EXTA); /*SET LIMIT */
         B     @RC02012                                            2014
@RF02012 MVC   RSIDX1(2,REG6),@CH00038                             2014
*                                      /* TO NO. OF EXTENTS IN FIRST */
*                                      /* PART OF F3DSCB             */
*                            DO RSIDX = 1 TO RSIDX1;               2015
@RC02012 LA    @07,1                                               2015
         B     @DE02015                                            2015
@DL02015 DS    0H                                                  2016
*                              RSCCHHP = ADDR(FMT3CCHA(RSIDX));    2016
         LH    @07,RSIDX(,REG6)                                    2016
         MH    @07,@CH00034                                        2016
         L     @04,IOCSPTR(,REG6)                                  2016
         L     @04,IOCDAD(,@04)                                    2016
         AL    @04,@CF03727                                        2016
         LA    @07,FMT3CCHA-6(@07,@04)                             2016
         ST    @07,RSCCHHP(,REG6)                                  2016
*                              RSCFINN = ON;   /*RETURN NN*/       2017
         OI    RSCFINN(REG6),B'10000000'                           2017
*                              /* CALL TO MODULE IDCRS07 FOR PROCEDURE
*NVTCCHH                                                             */
*                              CALL CNVTCCHH;                      2018
         L     @15,@CV03460                                        2018
         BALR  @14,@15                                             2018
*                              RSVF1TTN(RSIDX + 3) = RSTTNN;       2019
         LH    @07,RSIDX(,REG6)                                    2019
         SLA   @07,2                                               2019
         ALR   @07,REG6                                            2019
         MVC   RSVF1TTN+8(4,@07),RSTTNN(REG6)                      2019
*                              RSCFINN = OFF;                      2020
         NI    RSCFINN(REG6),B'01111111'                           2020
*                            END;                                  2021
         LA    @07,1                                               2021
         AH    @07,RSIDX(,REG6)                                    2021
@DE02015 STH   @07,RSIDX(,REG6)                                    2021
         CH    @07,RSIDX1(,REG6)                                   2021
         BNH   @DL02015                                            2021
*                            IF RSVEXTS > 7                        2022
*                              THEN                                2022
         CLI   RSVEXTS(REG6),7                                     2022
         BNH   @RF02022                                            2022
*                                DO RSIDX = 1 TO RSVEXTS - 7;      2023
         LA    @07,1                                               2023
         B     @DE02023                                            2023
@DL02023 DS    0H                                                  2024
*                                  RSCCHHP = ADDR(FMT3CCHB(RSIDX));
         LH    @07,RSIDX(,REG6)                                    2024
         MH    @07,@CH00034                                        2024
         L     @04,IOCSPTR(,REG6)                                  2024
         L     @04,IOCDAD(,@04)                                    2024
         LA    @07,FMT3CCHB-10(@07,@04)                            2024
         ST    @07,RSCCHHP(,REG6)                                  2024
*                                  RSCFINN = ON;  /*RETURN NN*/    2025
         OI    RSCFINN(REG6),B'10000000'                           2025
*                                  /* CALL TO MODULE IDCRS07 FOR PROCED
*RE CNVTCCHH                                                         */
*                                  CALL CNVTCCHH;                  2026
         L     @15,@CV03460                                        2026
         BALR  @14,@15                                             2026
*                                  RSVF1TTN(RSIDX + 7) = RSTTNN;   2027
         LH    @07,RSIDX(,REG6)                                    2027
         SLA   @07,2                                               2027
         ALR   @07,REG6                                            2027
         MVC   RSVF1TTN+24(4,@07),RSTTNN(REG6)                     2027
*                                  RSCFINN = OFF;                  2028
         NI    RSCFINN(REG6),B'01111111'                           2028
*                                END;                              2029
         LA    @07,1                                               2029
         AH    @07,RSIDX(,REG6)                                    2029
@DE02023 STH   @07,RSIDX(,REG6)                                    2029
         SLR   @04,@04                                             2029
         IC    @04,RSVEXTS(,REG6)                                  2029
         SL    @04,@CF00482                                        2029
         CR    @07,@04                                             2029
         BNH   @DL02023                                            2029
*                          END;                                    2030
@RF02022 DS    0H                                                  2031
*        /************************************************************/
*        /*                                                          */
*        /*    SCAN SNTABS TO LOCATE SPACE HEADER FOR THIS F1DSCB.   */
*        /*    COMPARE THE TIMESTAMP FROM THE F1DSCB NAME TO THE     */
*        /*    TIMESTAMP IN EACH SNTAB.                              */
*        /*                                                          */
*        /************************************************************/
*                      RSFAENT = RSFCADR;                          2031
@RF01980 L     @07,RSWASNVT(,REG6)                                 2031
         L     @04,RSFCADR(,@07)                                   2031
         ST    @04,RSFAENT(,@07)                                   2031
*        /************************************************************/
*        /*                                                          */
*        /*  EXTRACT THE 14 TIMESTAMP EBCDIC DIGITS FROM THE F1DSCB  */
*        /*  NAME AND PAD AT END WITH AN EBCDIC 0.                   */
*        /*                                                          */
*        /************************************************************/
*                      RSVF1TS1 = F1TS1;                           2032
         MVC   RSVF1TS1(7,REG6),F1TS1(REG6)                        2032
*                      RSVF1TS2 = F1TS2;                           2033
         MVC   RSVF1TS2(7,REG6),F1TS2(REG6)                        2033
*                      RSVF1PAD = DIG0;                            2034
         MVI   RSVF1PAD(REG6),C'0'                                 2034
*        /************************************************************/
*        /*                                                          */
*        /*  CHANGE C1-C6 (A-F) TO CA-CF FOR CONVERSION PURPOSES     */
*        /*                                                          */
*        /************************************************************/
*VOLCLP2:                                                          2035
*                      DO RSIDX1 = 1 TO DIM(F1TSCNVT);             2035
VOLCLP2  LA    @07,1                                               2035
         STH   @07,RSIDX1(,REG6)                                   2035
@DL02035 DS    0H                                                  2036
*                        IF F1TSZNE(RSIDX1) = CZONE                2036
*                          THEN                                    2036
         LH    @07,RSIDX1(,REG6)                                   2036
         ALR   @07,REG6                                            2036
         TM    F1TSZNE-1(@07),B'11000000'                          2036
         BNO   @RF02036                                            2036
         TM    F1TSZNE-1(@07),B'00110000'                          2036
         BNZ   @RF02036                                            2036
*                            F1TSFIX(RSIDX1) = F1TSFIX(RSIDX1)     2037
*                                + EBCCNV;                         2037
         LH    @07,RSIDX1(,REG6)                                   2037
         LA    @04,9                                               2037
         SLR   @15,@15                                             2037
         IC    @15,F1TSFIX-1(@07,REG6)                             2037
         ALR   @04,@15                                             2037
         STC   @04,F1TSFIX-1(@07,REG6)                             2037
*                      END VOLCLP2;                                2038
@RF02036 LA    @07,1                                               2038
         AH    @07,RSIDX1(,REG6)                                   2038
         STH   @07,RSIDX1(,REG6)                                   2038
         C     @07,@CF00631                                        2038
         BNH   @DL02035                                            2038
*        /************************************************************/
*        /*                                                          */
*        /*  CONVERT EBCDIC STRING TO PACKED HEX                     */
*        /*                                                          */
*        /************************************************************/
*                      PACK (RSVF1CTS,RSVF1TS);                    2039
         PACK  RSVF1CTS(8,REG6),RSVF1TS(15,REG6)                   2039
*                      RSVF1CTS(8:8) = NULLDIG;                    2040
         MVC   RSVF1CTS+7(1,REG6),NULLDIG                          2040
*        /************************************************************/
*        /*                                                          */
*        /*  SCAN THE SNTABS FOR THIS TIMESTAMP                      */
*        /*                                                          */
*        /************************************************************/
*VOLCLP3:              DO RSFCNDX = 1 TO RSFHNDX                   2041
*                        WHILE(RSVF1CTS ^= SDSCBTS);               2041
VOLCLP3  LA    @07,1                                               2041
         B     @DE02041                                            2041
@DL02041 L     @07,RSWASNVT(,REG6)                                 2041
         L     @04,RSFAENT(,@07)                                   2041
         CLC   RSVF1CTS(8,REG6),SDSCBTS(@04)                       2041
         BE    @DC02041                                            2041
*                        RSFAENT = RSFAENT + RSFENTLN;             2042
         SLR   @15,@15                                             2042
         IC    @15,RSFENTLN(,@07)                                  2042
         ALR   @04,@15                                             2042
         ST    @04,RSFAENT(,@07)                                   2042
*                      END VOLCLP3;                                2043
         L     @04,RSWASNVT(,REG6)                                 2043
         LA    @07,1                                               2043
         AH    @07,RSFCNDX(,@04)                                   2043
@DE02041 L     @04,RSWASNVT(,REG6)                                 2043
         STH   @07,RSFCNDX(,@04)                                   2043
         L     @04,RSWASNVT(,REG6)                                 2043
         CH    @07,RSFHNDX(,@04)                                   2043
         BNH   @DL02041                                            2043
@DC02041 DS    0H                                                  2044
*        /************************************************************/
*        /*                                                          */
*        /*    CALL SCRATCHP TO SCRATCH DSCB IF NO SPACE HEADER      */
*        /*      EXISTS FOR IT                                       */
*        /*                                                          */
*        /************************************************************/
*                      IF RSVF1CTS ^= SDSCBTS                      2044
*                        THEN                                      2044
         L     @07,RSWASNVT(,REG6)                                 2044
         L     @07,RSFAENT(,@07)                                   2044
         CLC   RSVF1CTS(8,REG6),SDSCBTS(@07)                       2044
         BE    @RF02044                                            2044
*                          DO;                                     2045
*                                                                  2045
*                            DO;                                   2046
*                            /*CALL CKERR*/                        2047
*                              RSCKERR = RSCKERR && RSCKERR;       2047
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      2047
*                              RSCKERN = RSE054;                   2048
         MVC   RSCKERN(2,REG6),@CH00993                            2048
*                              RSCKTERM = 'RETU';                  2049
         MVC   RSCKTERM(4,REG6),@CC03500                           2049
*                              RSCKMVAR(1) = ADDR(RSVSCRNM);       2050
*                                                                  2050
         LA    @07,RSVSCRNM(,REG6)                                 2050
         ST    @07,RSCKMVAR(,REG6)                                 2050
*                            /* CALL TO MODULE IDCRS05 FOR PROCEDURE CK
*RR                                                                  */
*                            CALL CKERR;                           2051
         L     @15,@CV03443                                        2051
         BALR  @14,@15                                             2051
*                            END;                                  2052
*                            /* CALL TO MODULE IDCRS07 FOR PROCEDURE SC
*ATCHP                                                               */
*                            CALL IDCRS7SP(RSVSCRNM,RSVSCRPT);     2053
         LA    @07,RSVSCRNM(,REG6)                                 2053
         ST    @07,@AL00001                                        2053
         LA    @07,RSVSCRPT(,REG6)                                 2053
         ST    @07,@AL00001+4                                      2053
         L     @15,@CV03462                                        2053
         LA    @01,@AL00001                                        2053
         BALR  @14,@15                                             2053
*                            RESPECIFY RTNREG RSTD;                2054
*                            TESTRC = RTNREG;                      2055
         STH   RTNREG,TESTRC(,REG6)                                2055
*                            RESPECIFY RTNREG UNRSTD;              2056
*                            IF TESTRC ^= 0                        2057
*                              THEN                                2057
*                                                                  2057
         LH    @07,TESTRC(,REG6)                                   2057
         LTR   @07,@07                                             2057
         BZ    @RF02057                                            2057
*                               DO;                                2058
*                               /*CALL CKERR*/                     2059
*                                 RSCKERR = RSCKERR && RSCKERR;    2059
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      2059
*                                 RSCKERN = RSE059;                2060
         MVC   RSCKERN(2,REG6),@CH01002                            2060
*                                 RSCKTERM = 'RETU';               2061
         MVC   RSCKTERM(4,REG6),@CC03500                           2061
*                                 RSCKMVAR(1) = ADDR(RSVSCRNM);    2062
*                                                                  2062
         LA    @07,RSVSCRNM(,REG6)                                 2062
         ST    @07,RSCKMVAR(,REG6)                                 2062
*                               /* CALL TO MODULE IDCRS05 FOR PROCEDURE
*CKERR                                                               */
*                               CALL CKERR;                        2063
         L     @15,@CV03443                                        2063
         BALR  @14,@15                                             2063
*                               END;                               2064
*                          END;                                    2065
*                        ELSE                                      2066
*                          DO;                             /*@ZA18274*/
         B     @RC02044                                            2066
@RF02044 DS    0H                                                  2067
*        /************************************************************/
*        /*                                                /*@ZA18274*/
*        /*    IF THIS IS A DATA SPACE CONTAINING AN OLD CATALOG,    */
*        /*      CLEAR THE CATALOG INDICATOR IN THE SPACE HEADER     */
*        /*      AND SAVE THE F1DSCB INFORMATION FOR LATER RENAMING  */
*        /*                                                /*@ZA18274*/
*        /************************************************************/
*                            IF UVOLVOL(1) ^= RSINVLSR &           2067
*                               SNVSPCAT = ON THEN DO;     /*@ZA18274*/
         L     @07,RSVSCRPT(,REG6)                                 2067
         CLC   UVOLVOL(6,@07),RSINVLSR(REG6)                       2067
         BE    @RF02067                                            2067
         L     @07,RSWASNVT(,REG6)                                 2067
         L     @07,RSFAENT(,@07)                                   2067
         TM    SNVSPCAT(@07),B'00001000'                           2067
         BNO   @RF02067                                            2067
*                              SNVSPCAT = OFF;             /*@ZA18274*/
         NI    SNVSPCAT(@07),B'11110111'                           2069
*                              /* CALL TO MODULE IDCRS04 FOR PROCEDURE
*ODGO                                                                */
*                              CALL MODGO;              /*@ZA18274*/
         L     @15,@CV03433                                        2070
         BALR  @14,@15                                             2070
*                              RSVWFUPD = ON;              /*@ZA18274*/
         OI    RSVWFUPD(REG6),B'00100000'                          2071
*                              IF (RSVSCRNM(1:7) = NOUNIQ) &       2072
*                               (RSVSCRNM(8) = '4' × RSVSCRNM(8) = '6')
*                               THEN DO;                   /*@ZA18274*/
         CLC   RSVSCRNM(7,REG6),@CC00846                           2072
         BNE   @RF02072                                            2072
         CLI   RSVSCRNM+7(REG6),C'4'                               2072
         BE    @RT02072                                            2072
         CLI   RSVSCRNM+7(REG6),C'6'                               2072
         BNE   @RF02072                                            2072
@RT02072 DS    0H                                                  2073
*                                CALL IDCSAGP0(GDTTBL,LENGTH(RSF1RNTB),
*  RSF1RNCU,POOL2,SETZERO);                                /*@ZA18274*/
         MVC   @AL00001+4(16),@AL02074                             2074
         ST    REG5,@AL00001                                       2074
         LA    @07,RSF1RNCU(,REG6)                                 2074
         ST    @07,@AL00001+8                                      2074
         L     @15,GDTGPL(,REG5)                                   2074
         LA    @01,@AL00001                                        2074
         BALR  @14,@15                                             2074
*                                RESPECIFY RTNREG RSTD;            2075
*                                TESTRC = RTNREG;                  2076
         STH   RTNREG,TESTRC(,REG6)                                2076
*                                RESPECIFY RTNREG UNRSTD;  /*@ZA18274*/
*                                IF TESTRC ^= 0 THEN               2078
*                                                                  2078
         LH    @07,TESTRC(,REG6)                                   2078
         LTR   @07,@07                                             2078
         BZ    @RF02078                                            2078
*                                  DO;                             2079
*                                  /*CALL CKERR*/                  2080
*                                    RSCKERR = RSCKERR && RSCKERR; 2080
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      2080
*                                    RSCKERN = RSE099;             2081
         MVC   RSCKERN(2,REG6),@CH01078                            2081
*                                    RSCKTERM = 'TERM';            2082
*                                                                  2082
         MVC   RSCKTERM(4,REG6),@CC03527                           2082
*                                  /* CALL TO MODULE IDCRS05 FOR PROCED
*RE CKERR                                                            */
*                                  CALL CKERR;                     2083
         L     @15,@CV03443                                        2083
         BALR  @14,@15                                             2083
*                                  END;/*@ZA18274*/                2084
*                                RSF1RNNX = RSF1RNAM;      /*@ZA18274*/
@RF02078 L     @07,RSF1RNCU(,REG6)                                 2085
         L     @04,RSF1RNAM(,REG6)                                 2085
         ST    @04,RSF1RNNX(,@07)                                  2085
*                                RSF1RNAM = RSF1RNCU;      /*@ZA18274*/
         ST    @07,RSF1RNAM(,REG6)                                 2086
*                                RSF1RNVL = UVOLVOL(1);    /*@ZA18274*/
         L     @04,RSVSCRPT(,REG6)                                 2087
         MVC   RSF1RNVL(6,@07),UVOLVOL(@04)                        2087
*                                RSF1RNDV = UVOLDEV(1);    /*@ZA18274*/
         MVC   RSF1RNDV(4,@07),UVOLDEV(@04)                        2088
*                                RSF1RNNM = RSVSCRNM;      /*@ZA18274*/
         MVC   RSF1RNNM(44,@07),RSVSCRNM(REG6)                     2089
*                              END;                        /*@ZA18274*/
*                            END;                          /*@ZA18274*/
*                                                                  2091
@RF02072 DS    0H                                                  2092
*        /************************************************************/
*        /*                                                          */
*        /*    IF EXTENTS IN SPACE HEADER NOT EQUAL TO EXTENTS IN    */
*        /*      DSCB, THEN CORRECT SPC HDR WITH EXTENTS FROM DSCB   */
*        /*                                                          */
*        /************************************************************/
*                            IF SSPEXTNT ^= RSVF1EXT               2092
*                              THEN                                2092
@RF02067 L     @07,RSWASNVT(,REG6)                                 2092
         L     @07,RSFAENT(,@07)                                   2092
         CLC   SSPEXTNT(64,@07),RSVF1EXT(REG6)                     2092
         BE    @RF02092                                            2092
*                                DO;                               2093
*                                  SNODSPXT = RSVEXTS;             2094
         IC    @04,RSVEXTS(,REG6)                                  2094
         STC   @04,SNODSPXT(,@07)                                  2094
*                                  SSPEXTNT = RSVF1EXT;            2095
         MVC   SSPEXTNT(64,@07),RSVF1EXT(REG6)                     2095
*                                  /* CALL TO MODULE IDCRS04 FOR PROCED
*RE MODGO                                                            */
*                                  CALL MODGO;                     2096
         L     @15,@CV03433                                        2096
         BALR  @14,@15                                             2096
*                                  RSVWFUPD = ON;                  2097
         OI    RSVWFUPD(REG6),B'00100000'                          2097
*                                             /*UPDATE WF VOL RECORD*/
*                                                                  2098
*                                  DO;                             2098
*                                  /*CALL CKERR*/                  2099
*                                    RSCKERR = RSCKERR && RSCKERR; 2099
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      2099
*                                    RSCKERN = RSE055;             2100
         MVC   RSCKERN(2,REG6),@CH00995                            2100
*                                    RSCKTERM = 'RETU';            2101
         MVC   RSCKTERM(4,REG6),@CC03500                           2101
*                                    RSCKMVAR(1) = ADDR(RSVSCRNM); 2102
*                                                                  2102
         LA    @07,RSVSCRNM(,REG6)                                 2102
         ST    @07,RSCKMVAR(,REG6)                                 2102
*                                  /* CALL TO MODULE IDCRS05 FOR PROCED
*RE CKERR                                                            */
*                                  CALL CKERR;                     2103
         L     @15,@CV03443                                        2103
         BALR  @14,@15                                             2103
*                                  END;                            2104
*                                END;                              2105
*                            SNFPROC = ON; /*SPC HDR PROCESSED*/   2106
@RF02092 L     @07,RSWASNVT(,REG6)                                 2106
         L     @07,RSFAENT(,@07)                                   2106
         OI    SNFPROC(@07),B'00010000'                            2106
*                          END;                                    2107
*                    END VOLCNUNQ;                                 2108
@RC02044 DS    0H                                                  2109
*              END VOLCNEOF;                                       2109
@RF01959 DS    0H                                                  2109
@RF01958 DS    0H                                                  2110
*        END VOLCLP1;                                              2110
@RC01946 DS    0H                                                  2110
@DE01923 TM    RSVGTEOF(REG6),B'10000000'                          2110
         BZ    @DL01923                                            2110
*        /************************************************************/
*        /*                                                          */
*        /*  SCAN SNTAB FOR SPACE HEADERS THAT WERE NOT PROCESSED    */
*        /*    AND DELETE THEM - IGNORE ANY UNIQUES                  */
*        /*                                                          */
*        /************************************************************/
*        IF RSFNRF = OFF & RSFENTLN ^= 0                           2111
*          THEN                                                    2111
         L     @07,RSWASNVT(,REG6)                                 2111
         TM    RSFNRF(@07),B'10000000'                             2111
         BNZ   @RF02111                                            2111
         CLI   RSFENTLN(@07),0                                     2111
         BE    @RF02111                                            2111
*            DO;                                                   2112
*              RSFAENT = RSFCADR;      /*GET FIRST SPC HDR*/       2113
         L     @04,RSFCADR(,@07)                                   2113
         ST    @04,RSFAENT(,@07)                                   2113
*              DO RSFCNDX = 1 TO RSFHNDX;                          2114
         LA    @07,1                                               2114
         B     @DE02114                                            2114
@DL02114 DS    0H                                                  2115
*                IF SNFPROC ^= ON & SNVSPUNQ ^= ON                 2115
*                  THEN                                            2115
         L     @07,RSWASNVT(,REG6)                                 2115
         L     @07,RSFAENT(,@07)                                   2115
         TM    SNFPROC(@07),B'00010000'                            2115
         BO    @RF02115                                            2115
         TM    SNVSPUNQ(@07),B'10000000'                           2115
         BO    @RF02115                                            2115
*                    DO;                                           2116
*                      /* CALL TO MODULE IDCRS04 FOR PROCEDURE DELGO */
*                      CALL DELGO;                                 2117
         L     @15,@CV03434                                        2117
         BALR  @14,@15                                             2117
*        /************************************************************/
*        /*                                                          */
*        /*  IF THE GROUP OCCURRENCE EXISTS, CALL CKERR TO PRINT     */
*        /*  INFORMATIONAL MESSAGE. MUST DERIVE ENTRY NAME FROM      */
*        /*  TIMESTAMP.                                              */
*        /*                                                          */
*        /************************************************************/
*                      IF SNFUSE = ON                              2118
*                        THEN                                      2118
         L     @07,RSWASNVT(,REG6)                                 2118
         L     @07,RSFAENT(,@07)                                   2118
         TM    SNFUSE(@07),B'10000000'                             2118
         BNO   @RF02118                                            2118
*                          DO;                                     2119
*        /************************************************************/
*        /*                                                          */
*        /*  MOVE THE MODEL DERIVED NAME TO THE DERIVED NAME AREA    */
*        /*                                                          */
*        /************************************************************/
*                            RSVSCRNM = DERVNM;                    2120
         MVI   RSVSCRNM+35(REG6),C' '                              2120
         MVC   RSVSCRNM+36(8,REG6),RSVSCRNM+35(REG6)               2120
         MVC   RSVSCRNM(35,REG6),@CC00849                          2120
*        /************************************************************/
*        /*                                                          */
*        /*  CONVERT THE TIMESTAMP DIGITS IN THE SPACE HEADER TO     */
*        /*  PRINTABLE CHARACTERS                                    */
*        /*                                                          */
*        /************************************************************/
*                            SDSCBTS(8:8) = PACKF;                 2121
         MVC   SDSCBTS+7(1,@07),PACKF                              2121
*                            UNPK (RSVF1TS,SDSCBTS);               2122
         UNPK  RSVF1TS(15,REG6),SDSCBTS(8,@07)                     2122
*VOLCLP4:                    DO RSIDX1 = 1 TO DIM(F1TSCNVT);       2123
VOLCLP4  LA    @07,1                                               2123
         STH   @07,RSIDX1(,REG6)                                   2123
@DL02123 DS    0H                                                  2124
*                              IF F1TSFIX(RSIDX1) > FALPHA         2124
*                                THEN                              2124
         LH    @07,RSIDX1(,REG6)                                   2124
         SLR   @04,@04                                             2124
         IC    @04,F1TSFIX-1(@07,REG6)                             2124
         C     @04,@CF00835                                        2124
         BNH   @RF02124                                            2124
*                                  F1TSFIX(RSIDX1) = F1TSFIX(RSIDX1)
*                                        - HEXCNV;                 2125
         SL    @04,@CF00837                                        2125
         STC   @04,F1TSFIX-1(@07,REG6)                             2125
*                            END VOLCLP4;                          2126
@RF02124 LA    @07,1                                               2126
         AH    @07,RSIDX1(,REG6)                                   2126
         STH   @07,RSIDX1(,REG6)                                   2126
         C     @07,@CF00631                                        2126
         BNH   @DL02123                                            2126
*        /************************************************************/
*        /*                                                          */
*        /*  PLACE THE TIMESTAMP DIGITS IN THE DERIVED NAME AREA     */
*        /*                                                          */
*        /************************************************************/
*                            F1TS1 = DRTS1;                        2127
         MVC   F1TS1(7,REG6),DRTS1(REG6)                           2127
*                            F1TS2 = DRTS2;                        2128
         MVC   F1TS2(7,REG6),DRTS2(REG6)                           2128
*        /************************************************************/
*        /*                                                          */
*        /*  CALL CKERR TO PRINT INFORMATIONAL MESSAGE GIVING        */
*        /*  DERIVED NAME                                            */
*        /*                                                          */
*        /************************************************************/
*                                                                  2129
*                            DO;                                   2129
*                            /*CALL CKERR*/                        2130
*                              RSCKERR = RSCKERR && RSCKERR;       2130
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      2130
*                              RSCKERN = RSE056;                   2131
         MVC   RSCKERN(2,REG6),@CH00997                            2131
*                              RSCKTERM = 'RETU';                  2132
         MVC   RSCKTERM(4,REG6),@CC03500                           2132
*                              RSCKMVAR(1) = ADDR(RSVSCRNM);       2133
*                                                                  2133
         LA    @07,RSVSCRNM(,REG6)                                 2133
         ST    @07,RSCKMVAR(,REG6)                                 2133
*                            /* CALL TO MODULE IDCRS05 FOR PROCEDURE CK
*RR                                                                  */
*                            CALL CKERR;                           2134
         L     @15,@CV03443                                        2134
         BALR  @14,@15                                             2134
*                            END;                                  2135
*                          END;                                    2136
*                    END;                                          2137
@RF02118 DS    0H                                                  2138
*                RSFAENT = RSFAENT + RSFENTLN;                     2138
@RF02115 L     @07,RSWASNVT(,REG6)                                 2138
         SLR   @04,@04                                             2138
         IC    @04,RSFENTLN(,@07)                                  2138
         AL    @04,RSFAENT(,@07)                                   2138
         ST    @04,RSFAENT(,@07)                                   2138
*              END;                                                2139
         L     @04,RSWASNVT(,REG6)                                 2139
         LA    @07,1                                               2139
         AH    @07,RSFCNDX(,@04)                                   2139
@DE02114 L     @04,RSWASNVT(,REG6)                                 2139
         STH   @07,RSFCNDX(,@04)                                   2139
         L     @04,RSWASNVT(,REG6)                                 2139
         CH    @07,RSFHNDX(,@04)                                   2139
         BNH   @DL02114                                            2139
*            END;                                                  2140
*        /************************************************************/
*        /*                                                          */
*        /*  FREE SNTAB                                              */
*        /*                                                          */
*        /************************************************************/
*        RSFENTLN = 0;                                             2141
@RF02111 L     @07,RSWASNVT(,REG6)                                 2141
         MVI   RSFENTLN(@07),X'00'                                 2141
*        /************************************************************/
*        /*                                                          */
*        /*  ISSUE UCLOSE TO CLOSE VTOC AND SET VTOC OPEN AUDIT FLAG */
*        /*    OFF                                                   */
*        /*                                                          */
*        /************************************************************/
*        IOCSPTR = RSVTIOCS;                                       2142
         L     @07,RSVTIOCS(,REG6)                                 2142
         ST    @07,IOCSPTR(,REG6)                                  2142
*        CALL IDCIOCL0 (GDTTBL,IOCSPTR);                           2143
         ST    REG5,@AL00001                                       2143
         LA    @07,IOCSPTR(,REG6)                                  2143
         ST    @07,@AL00001+4                                      2143
         MVI   @AL00001+4,X'80'                                    2143
         L     @15,GDTCLS(,REG5)                                   2143
         LA    @01,@AL00001                                        2143
         BALR  @14,@15                                             2143
*        RESPECIFY RTNREG RSTD;                                    2144
*        TESTRC = RTNREG;                                          2145
         STH   RTNREG,TESTRC(,REG6)                                2145
*        RESPECIFY RTNREG UNRSTD;                                  2146
*        IF TESTRC ^= 0                                            2147
*          THEN                                                    2147
*                                                                  2147
         LH    @07,TESTRC(,REG6)                                   2147
         LTR   @07,@07                                             2147
         BZ    @RF02147                                            2147
*            DO;                                                   2148
*            /*CALL CKERR*/                                        2149
*              RSCKERR = RSCKERR && RSCKERR;                       2149
         XC    RSCKERR(48,REG6),RSCKERR(REG6)                      2149
*              RSCKERN = RSE057;                                   2150
         MVC   RSCKERN(2,REG6),@CH00837                            2150
*              RSCKTERM = 'RETU';                                  2151
*                                                                  2151
         MVC   RSCKTERM(4,REG6),@CC03500                           2151
*            /* CALL TO MODULE IDCRS05 FOR PROCEDURE CKERR           */
*            CALL CKERR;                                           2152
         L     @15,@CV03443                                        2152
         BALR  @14,@15                                             2152
*            END;                                                  2153
*        RSVTOPN = OFF;                                            2154
@RF02147 NI    RSVTOPN(REG6),B'11110111'                           2154
*        /************************************************************/
*        /*                                                          */
*        /*  UPDATE WORKFILE VOLUME RECORD IF NEEDED,                */
*        /*  OTHERWISE FREE IT.                                      */
*        /*                                                          */
*        /************************************************************/
*        IF RSVWFUPD = ON                                          2155
*          THEN                                                    2155
*                                                                  2155
         TM    RSVWFUPD(REG6),B'00100000'                          2155
         BNO   @RF02155                                            2155
*            DO;                                                   2156
*              RSRTYPE = ''B;                                      2157
         MVI   RSRTYPE(REG6),X'00'                                 2157
*              RSRUPDT = ON;     /* UPDRCD  */                     2158
         OI    RSRUPDT(REG6),B'00100000'                           2158
*              RSRUPD = ON;      /* UPDATE  */                     2159
         OI    RSRUPD(REG6),B'00001000'                            2159
*              RSRDS = ''B;                                        2160
         NI    RSRDS(REG6),B'00011111'                             2160
*              RSRWF = ON;       /* WORKFILE  */                   2161
*              RSRDIR = ON;      /* DIRECT  */                     2162
*              RSRKEY = ON;      /* KEY  */                        2163
*                                                                  2163
         OI    RSRWF(REG6),B'10010100'                             2163
*            /* CALL TO MODULE IDCRS06 FOR PROCEDURE RECMGMT         */
*            CALL RECMGMT;                                         2164
         L     @15,@CV03452                                        2164
         BALR  @14,@15                                             2164
*              RFY RTNREG RSTD;                                    2165
*              TESTRC = RTNREG;                                    2166
         STH   RTNREG,TESTRC(,REG6)                                2166
*              RFY RTNREG UNRSTD;                                  2167
*            END;                                                  2168
*          ELSE                                                    2169
*                                                                  2169
*            DO;                                                   2169
         B     @RC02155                                            2169
@RF02155 DS    0H                                                  2170
*              RSRTYPE = ''B;                                      2170
         MVI   RSRTYPE(REG6),X'00'                                 2170
*              RSRFREE = ON;     /* FREERCD  */                    2171
         OI    RSRFREE(REG6),B'00000001'                           2171
*              RSRUPD = ON;      /* UPDATE  */                     2172
         OI    RSRUPD(REG6),B'00001000'                            2172
*              RSRDS = ''B;                                        2173
         NI    RSRDS(REG6),B'00011111'                             2173
*              RSRWF = ON;       /* WORKFILE  */                   2174
*              RSRDIR = ON;      /* DIRECT  */                     2175
*              RSRKEY = ON;      /* KEY  */                        2176
*                                                                  2176
         OI    RSRWF(REG6),B'10010100'                             2176
*            /* CALL TO MODULE IDCRS06 FOR PROCEDURE RECMGMT         */
*            CALL RECMGMT;                                         2177
         L     @15,@CV03452                                        2177
         BALR  @14,@15                                             2177
*              RFY RTNREG RSTD;                                    2178
*              TESTRC = RTNREG;                                    2179
         STH   RTNREG,TESTRC(,REG6)                                2179
*              RFY RTNREG UNRSTD;                                  2180
*            END;                                                  2181
*        RABRRN = OFF;                                             2182
*                                                                  2182
@RC02155 L     @07,RSGRABCU(,REG6)                                 2182
         L     @07,GRABCURR(,@07)                                  2182
         NI    RABRRN(@07),B'11101111'                             2182
*        IF GDTDBG = NULLPTR                                       2183
*          THEN;                                                   2183
         L     @07,GDTDBG(,REG5)                                   2183
         LTR   @07,@07                                             2183
         BZ    @RT02183                                            2183
*          ELSE                                                    2185
*            CALL IDCDB010 (GDTTBL,'RSV1');                        2185
*                                                                  2185
         ST    REG5,@AL00001                                       2185
         LA    @07,@CC03699                                        2185
         ST    @07,@AL00001+4                                      2185
         MVI   @AL00001+4,X'80'                                    2185
         L     @15,GDTDBG(,REG5)                                   2185
         LA    @01,@AL00001                                        2185
         BALR  @14,@15                                             2185
*        RFY UVOLLIST;                                     /*@ZA18274*/
@RT02183 DS    0H                                                  2187
*  CALL EXIT;  /*TERMINATE*/                                       2187
         BAL   @14,EXIT                                            2187
*  END VOLCHK; /*END OF PROCEDURE*/                                2188
@EL00017 DS    0H                                                  2188
@EF00017 DS    0H                                                  2188
@ER00017 BR    @14                                                 2188
@PB00017 DS    0H                                                  2189
*      GENERATE;                                                   2189
         DS    0F
         DC    CL8'EXIT'
*EXIT: PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                       2190
*                                                                  2190
         B     @PB00018                                            2190
EXIT     DS    0H                                                  2191
*        GEN(L     @13,4(,@13)); /*RESTORE CALLER'S REG SAVE*/     2191
         L     @13,4(,@13)
*        GEN(LM    @14,@12,12(@13));  /*RESTORE REGS*/             2192
         LM    @14,@12,12(@13)
*        GEN(MVI   12(@13),255);  /*MARK END OF SAVE LIST*/        2193
         MVI   12(@13),255
*        GEN(BR    14);  /*RETURN*/                                2194
         BR    14
*END EXIT;  /*END OF PROC EXIT*/                                   2195
*                                                                  2195
@EL00018 DS    0H                                                  2195
@EF00018 DS    0H                                                  2195
@ER00018 BR    @14                                                 2195
*END IDCRS03   /*END OF MODULE*/                                   2196
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IDCDF64 )                                        *
*/*%INCLUDE SYSLIB  (AMSDF00 )                                        *
*/*@INCLUDE SYSLIB  (AMSDF02 )                                        *
*/*%INCLUDE SYSLIB  (IDCCSRS )                                        *
*/*%INCLUDE SYSLIB  (AMSDF05 )                                        *
*/*%INCLUDE SYSLIB  (IEZCTGPL)                                        *
*/*%INCLUDE SYSLIB  (IEZCTGFL)                                        *
*/*%INCLUDE SYSLIB  (IEZCTGFV)                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (AMCBS   )                                        *
*/*%INCLUDE SYSLIB  (IGGCAXWA)                                        *
*/*%INCLUDE SYSLIB  (IFGACB  )                                        *
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                        *
*;                                                                 2196
@EL00001 DS    0H                                                  2196
@EF00001 DS    0H                                                  2196
@ER00001 LM    @14,@12,12(@13)                                     2196
         BR    @14                                                 2196
@DATA    DS    0H
@CH00038 DC    H'4'
@CH00280 DC    H'5'
@CH00152 DC    H'6'
@CH00034 DC    H'10'
@CH00937 DC    H'23'
@CH00946 DC    H'28'
@CH00950 DC    H'30'
@CH00954 DC    H'33'
@CH00956 DC    H'34'
@CH00971 DC    H'42'
@CH00973 DC    H'43'
@CH00595 DC    H'44'
@CH00976 DC    H'45'
@CH00747 DC    H'47'
@CH00983 DC    H'49'
@CH00985 DC    H'50'
@CH00987 DC    H'51'
@CH00989 DC    H'52'
@CH00991 DC    H'53'
@CH00993 DC    H'54'
@CH00995 DC    H'55'
@CH00997 DC    H'56'
@CH01002 DC    H'59'
@CH01004 DC    H'60'
@CH01078 DC    H'99'
@CH00143 DC    H'100'
@CH00755 DC    H'32767'
@SM03734 MVC   BMAP(0,@04),BMAP(@01)
@SX03737 XC    BMAP(0,@04),BMAP(@04)
@SO03739 OC    BMAP(0,@04),BMAP(@01)
@SO03741 OC    BMAP(0,@07),BMAP(@15)
@SX03743 XC    BMAP(0,@07),BMAP(@15)
@SM03749 MVC   GDGLENTS-1(0,@04),@TS00001
@SN03753 NC    BMAP(0,@04),BMAP(@01)
         DS    0F
@AL02074 DC    A(@CF01000)             LIST WITH   4 ARGUMENT(S)
         DS    F
         DC    A(@CC00897)
         DC    AL1(X'80')
         DC    AL3(SETZERO)
@DATD    DSECT
         DS    0F
@AL00001 DS    5A
@TF00001 DS    F
@TF00002 DS    F
IDCRS03  CSECT
         DS    0F
@CF00212 DC    F'1'
@CH00212 EQU   @CF00212+2
@CF00149 DC    F'2'
@CF00158 DC    F'3'
@CH00158 EQU   @CF00158+2
@CF00482 DC    F'7'
@CF00175 DC    F'8'
@CF00032 DC    F'12'
@CF00631 DC    F'14'
@CF00471 DC    F'16'
@CF00215 DC    F'32'
@CH00215 EQU   @CF00215+2
@CF00848 DC    F'35'
@CF00837 DC    F'57'
@CH00837 EQU   @CF00837+2
@CF01000 DC    F'58'
@CF00753 DC    F'96'
@CF00790 DC    F'200'
@CF00835 DC    F'249'
@CF00619 DC    F'255'
@CF03188 DC    F'256'
@CF00757 DC    F'9000'
@CF00759 DC    F'10000'
@CF03546 DC    F'-256'
@CF03748 DC    F'-224'
@CF03560 DC    F'-8'
@CF03727 DC    F'-4'
@DATD    DSECT
         DS    0D
@TS00001 DS    CL256
FDTTBL   DS    CL8
         ORG   FDTTBL
FDTVERB  DS    CL8
FDTPTR   DS    0A
         ORG   FDTTBL+8
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDCRS03  CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV03431 DC    V(PROCTYPE)
@CV03432 DC    V(LOCDIT)
@CV03433 DC    V(MODGO)
@CV03434 DC    V(DELGO)
@CV03435 DC    V(FIND)
@CV03436 DC    V(GETVIA)
@CV03439 DC    V(IDCRS5SR)
@CV03442 DC    V(ADDUPCR)
@CV03443 DC    V(CKERR)
@CV03452 DC    V(RECMGMT)
@CV03460 DC    V(CNVTCCHH)
@CV03462 DC    V(IDCRS7SP)
@CA03480 DC    A(ASSO3A)
@CV03444 DC    V(ADDTN)
@CV03430 DC    V(ASSOC)
@CV03461 DC    V(CATEOV)
@CV03428 DC    V(CATINIT)
@CV03456 DC    V(CRAEOV)
@CV03446 DC    V(CRAUPCHN)
@CV03445 DC    V(DELTN)
@CV03455 DC    V(ENSURECI)
@CV03458 DC    V(FRCRCCR)
@CV03447 DC    V(GENNAME)
@CV03441 DC    V(IDCRS5BR)
@CV03440 DC    V(IDCRS5BV)
@CV03437 DC    V(IDCRS5EN)
@CV03438 DC    V(IDCRS5SV)
@CV03454 DC    V(IDCRS6CD)
@CV03453 DC    V(IDCRS6CM)
@CV03451 DC    V(IDCRS6DC)
@CV03450 DC    V(IDCRS6DO)
@CV03457 DC    V(RENAMEF)
@CV03463 DC    V(RENAMEP)
@CV03459 DC    V(UPDCCR)
@CV03448 DC    V(WFDEF)
@CV03449 DC    V(WFDEL)
@CV03429 DC    V(WRAPUP)
         DS    0D
MAXCINO  DC    XL4'3FFFFF'
@CC00849 DC    C'Z9999992.VSAMDSPC.TXXXXXXX.TXXXXXXX'
@CC00846 EQU   @CC00849
@CC00780 DC    C'      '
@CC00897 DC    C'RS02'
@CC00905 DC    C'RS11'
@CC00907 DC    C'RS12'
@CC03496 DC    C'RSCD'
@CC03500 DC    C'RETU'
@CC03515 DC    C'RSGF'
@CC03521 DC    C'RSGN'
@CC03526 DC    C'RSGT'
@CC03527 DC    C'TERM'
@CC03531 DC    C'RSMU'
@CC03537 DC    C'RSPV'
@CC03549 DC    C'RSP2'
@CC03553 DC    C'RSST'
@CC03561 DC    C'RSS3'
@CC03566 DC    C'RSSB'
@CC03579 DC    C'RSVB'
@CC03587 DC    C'RSV4'
@CC03601 DC    C'RSVN'
@CC03618 DC    C'RSUA'
@CC03624 DC    C'RSVS'
@CC03684 DC    C'RSVO'
@CC03699 DC    C'RSV1'
@CC00808 DC    C'A'
@CC00810 DC    C'B'
@CC00828 DC    C'V'
ALL      DC    CL3'ALL'
FORMAT   DC    CL4'FORM'
HSECOND  DC    CL4'HSEC'
CLOCK    DC    CL4'KLOK'
SETZERO  DC    CL4'ZERO'
SETBLANK DC    CL4'BLNK'
NOSET    DC    CL4'NSET'
OVERRIDE DC    CL4'OVRD'
ACQUIRE  DC    CL8'ACQUIRE '
RELINQ   DC    CL8'RELINQ  '
MOUNT    DC    CL8'MOUNT   '
DEMOUNT  DC    CL8'DEMOUNT '
DEFINE   DC    CL8'DEFINE  '
MOVE     DC    CL8'MOVE    '
TRACEQ   DC    CL8'TRACEQ  '
COPYTABL DC    CL8'COPYTABL'
COPYCRTG DC    CL8'COPYCRTG'
COPYVOL  DC    CL8'COPYVOL '
VVIC     DC    CL8'VVIC    '
TUNE     DC    CL8'TUNE    '
NAMES    DC    CL4'NAME'
UNIT     DC    CL4'UNIT'
SHR      DC    CL4'SHR '
EXCL     DC    CL4'EXCL'
NOWAIT   DC    CL4'NWAI'
WAIT     DC    CL4'WAIT'
TNTYPES  DC    CL11'CDIAXBVUMGR'
MAXEXPDT DC    X'99999F'
DUMMYNM  DC    X'FFFFFFFFFFFFFFFF'
RDFCIDF  DC    X'0001F901F90000'
PACKF    DC    X'0F'
DSCB1ID  DC    X'F1'
VOLUNUSE DC    X'0000'
NULLDIG  DC    X'00'
BADVOLSW DC    X'00'
FMT3NULL DC    X'0000000000'
DS4DSNM  DS    CL44
         ORG   DS4DSNM
@NM00040 DC    44X'04'
         ORG   DS4DSNM+44
MODID    DC    CL4'RS03'
         DS    CL1
PATCH    DS    CL800
         ORG   PATCH
@NM00216 DC    CL32'PATCH 800 BYTES LAST USED 000000'
@NM00217 DC    768X'00'
         ORG   PATCH+800
MASKVAL  DC    X'FF7F3F1F0F070301'
MASKV1   DC    X'80C0E0F0F8FCFEFF'
MASKALL  DC    X'FF'
TRTBLE   DC    CL1'0'
         DC    CL1'1'
         DC    CL1'2'
         DC    CL1'3'
         DC    CL1'4'
         DC    CL1'5'
         DC    CL1'6'
         DC    CL1'7'
         DC    CL1'8'
         DC    CL1'9'
         DC    CL1'A'
         DC    CL1'B'
         DC    CL1'C'
         DC    CL1'D'
         DC    CL1'E'
         DC    CL1'F'
DEFNMTAB DC    CL8'DSETCRDT'
         DC    CL8'DSETEXDT'
         DC    CL8'PASSWALL'
         DC    CL8'AMDSBCAT'
         DC    CL8'DSATTR'
         DC    CL8'LRECL'
         DC    CL8'SPACPARM'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RTNREG   EQU   @15
REG5     EQU   @05
REG6     EQU   @06
REG8     EQU   @08
REG13    EQU   @13
REG15    EQU   @15
REG0     EQU   @00
REG1     EQU   @01
REG10    EQU   @10
REG11    EQU   @11
REG12    EQU   @12
REG14    EQU   @14
REG2     EQU   @02
REG3     EQU   @03
REG4     EQU   @04
REG7     EQU   @07
REG9     EQU   @09
         EXTRN ASSO3A
CVTPTR   EQU   16
GDTTBL   EQU   0
GDTTR1   EQU   GDTTBL+8
GDTTR2   EQU   GDTTBL+12
GDTIOH   EQU   GDTTBL+36
GDTDBG   EQU   GDTTBL+40
GDTSTC   EQU   GDTTBL+44
GDTPRT   EQU   GDTTBL+48
GDTESS   EQU   GDTTBL+52
GDTESA   EQU   GDTTBL+56
GDTRST   EQU   GDTTBL+60
GDTRES   EQU   GDTTBL+64
GDTCAL   EQU   GDTTBL+68
GDTGSP   EQU   GDTTBL+72
GDTFSP   EQU   GDTTBL+76
GDTGPL   EQU   GDTTBL+80
GDTFPL   EQU   GDTTBL+84
GDTLOD   EQU   GDTTBL+88
GDTDEL   EQU   GDTTBL+92
GDTPRL   EQU   GDTTBL+96
GDTEPL   EQU   GDTTBL+100
GDTTIM   EQU   GDTTBL+104
GDTIIO   EQU   GDTTBL+108
GDTTIO   EQU   GDTTBL+112
GDTOPN   EQU   GDTTBL+124
GDTCLS   EQU   GDTTBL+128
GDTGET   EQU   GDTTBL+132
GDTPUT   EQU   GDTTBL+136
GDTPOS   EQU   GDTTBL+140
GDTCPY   EQU   GDTTBL+144
GDTCAT   EQU   GDTTBL+148
GDTSNP   EQU   GDTTBL+164
GDTVFY   EQU   GDTTBL+172
GDTUID   EQU   GDTTBL+192
GDTPMT   EQU   GDTTBL+196
GDTCIR   EQU   GDTTBL+200
GDTLNK   EQU   GDTTBL+204
GDTALC   EQU   GDTTBL+208
GDTDLC   EQU   GDTTBL+212
GDTQAL   EQU   GDTTBL+216
GDTSTW   EQU   GDTTBL+220
GDTSSC   EQU   GDTTBL+224
GDTENQ   EQU   GDTTBL+228
GDTRSV   EQU   GDTTBL+232
GDTDEQ   EQU   GDTTBL+236
GDTSFO   EQU   GDTTBL+240
GDTWTO   EQU   GDTTBL+244
GDTSCR   EQU   GDTTBL+248
GDTUNT   EQU   GDTTBL+252
GDTRCT   EQU   GDTTBL+256
GDTIFO   EQU   GDTTBL+260
GDTEXP   EQU   GDTTBL+264
GDTSTA   EQU   GDTTBL+268
GDTERR   EQU   GDTTBL+272
GDTUNC   EQU   GDTTBL+276
GDTLOC   EQU   GDTTBL+280
IDCSAGP0 EQU   0
IDCSAFP0 EQU   0
TRACE1   EQU   0
OLDERID1 EQU   TRACE1
TRACE2   EQU   0
OLDERID2 EQU   TRACE2
NEWID2   EQU   TRACE2+95
NEWERID2 EQU   5
CIRAGL   EQU   0
CIRTYPE  EQU   CIRAGL
ALLAGL   EQU   0
ALLSTS   EQU   ALLAGL+24
ALLDSP   EQU   ALLAGL+25
ALLORG   EQU   ALLAGL+26
ALLOPT   EQU   ALLAGL+28
UNITABL  EQU   0
UNITADR  EQU   UNITABL+4
@NM00010 EQU   UNITADR
UNITSTAT EQU   UNITABL+6
IDCIOOP0 EQU   0
IDCIOCL0 EQU   0
IDCIOPO0 EQU   0
IDCIOGT0 EQU   0
IOCSTR   EQU   0
IOCDAD   EQU   IOCSTR
IOCDSO   EQU   IOCSTR+16
IOCRFM   EQU   IOCSTR+17
IOCMAC   EQU   IOCSTR+18
IOCMAC2  EQU   IOCSTR+19
IOCMACNT EQU   IOCMAC2
IOCCHP   EQU   IOCSTR+20
IOCMSG   EQU   IOCSTR+21
IOCRBA   EQU   IOCSTR+40
IOCTTR   EQU   IOCRBA
IOCMEM   EQU   IOCSTR+44
IOCNWM   EQU   IOCSTR+48
IOCREL   EQU   IOCSTR+60
IOCEXT   EQU   IOCSTR+64
OPNAGL   EQU   0
OPNOPT   EQU   OPNAGL
OPNOPTIN EQU   OPNOPT
OPNOPTBK EQU   OPNOPT
OPNRFM   EQU   OPNAGL+1
OPNTYP   EQU   OPNAGL+2
OPNMOD   EQU   OPNAGL+3
OPNIOC   EQU   OPNAGL+4
OPNDDN   EQU   OPNAGL+8
OPNDSN   EQU   OPNAGL+16
OPNDEV   EQU   OPNAGL+24
OPNBLK   EQU   OPNAGL+36
OPNKYL   EQU   OPNAGL+40
OPNDSO   EQU   OPNAGL+41
OPNDSOPS EQU   OPNDSO
OPNOPT2  EQU   OPNAGL+42
OPNOPTJM EQU   OPNOPT2
OPNVOL   EQU   OPNAGL+44
IOINFOPT EQU   0
UVOLLIST EQU   0
UVOLCNT  EQU   UVOLLIST
UVOLENT  EQU   UVOLLIST+2
UVOLDEV  EQU   UVOLENT
UVOLVOL  EQU   UVOLENT+4
DARGLIST EQU   0
DARGSTID EQU   DARGLIST+8
DARGARY  EQU   DARGLIST+20
DARGINS  EQU   DARGARY
DARGINL  EQU   DARGARY+2
FMTLIST  EQU   0
FMTFLGS  EQU   FMTLIST
FMTSPF   EQU   FMTLIST+2
FMTRFNO  EQU   FMTSPF
FMTILEN  EQU   FMTRFNO
FMTIOFF  EQU   FMTLIST+4
FMTTRBC  EQU   FMTIOFF
FMTSTO   EQU   FMTTRBC
FMTOCOL  EQU   FMTLIST+6
FMTCNVF  EQU   FMTLIST+10
ERCNVTAB EQU   0
ERTYPE   EQU   ERCNVTAB
EROPER   EQU   ERCNVTAB+1
EROSOPER EQU   ERCNVTAB+2
ERCATRC  EQU   ERCNVTAB+16
ERCPLPT  EQU   ERCNVTAB+20
IDCDB010 EQU   0
DMPITM   EQU   0
DMPARY   EQU   0
CATNM    EQU   0
CATNMFLG EQU   CATNM+10
CATDN    EQU   0
MRPW     EQU   0
WCAT     EQU   0
WCATFLG  EQU   WCAT+10
CRADN    EQU   0
CRAVL    EQU   0
CRADV    EQU   0
WFILE    EQU   0
IODATA   EQU   0
IODSID   EQU   IODATA+16
IOCSEX   EQU   0
IOCRPL   EQU   IOCSEX+4
IOCXAD   EQU   IOCSEX+16
IOCXPM   EQU   IOCSEX+20
IOCFLG   EQU   IOCSEX+32
IOCDEV   EQU   IOCSEX+33
IOCINF   EQU   IOCSEX+34
IOCMOD   EQU   IOCSEX+35
IOCDLM   EQU   IOCSEX+36
IOCRCV   EQU   IOCSEX+44
CATIEXT  EQU   0
VOLSERTB EQU   0
VOLSRNXT EQU   VOLSERTB
VOLSRCI  EQU   VOLSERTB+4
VOLSRFLG EQU   VOLSERTB+8
VOLSRLAS EQU   VOLSRFLG
VOLSRSER EQU   VOLSERTB+14
RESVOL   EQU   0
RESVLFLG EQU   RESVOL+8
RESVLNEX EQU   RESVOL+10
RESVLSER EQU   RESVOL+14
RESVLDDN EQU   RESVOL+20
RESVLEXT EQU   RESVOL+28
RSF1RNTB EQU   0
RSF1RNNX EQU   RSF1RNTB
RSF1RNVL EQU   RSF1RNTB+4
RSF1RNDV EQU   RSF1RNTB+10
RSF1RNNM EQU   RSF1RNTB+14
RSWORK   EQU   0
RSCABHP1 EQU   RSWORK+12
RSCABLP1 EQU   RSWORK+16
RSCPE1   EQU   RSWORK+68
RSCPE2   EQU   RSWORK+72
RSCPE3   EQU   RSWORK+76
RSCPE4   EQU   RSWORK+80
RSCPE5   EQU   RSWORK+84
RSCPE6   EQU   RSWORK+88
RSCPE7   EQU   RSWORK+92
RSCRVL   EQU   RSWORK+104
RSGCITS  EQU   RSWORK+108
RSGCITC  EQU   RSGCITS+8
@NM00045 EQU   RSGCITS+20
RSGDITS  EQU   RSWORK+136
RSGDITC  EQU   RSGDITS+8
@NM00048 EQU   RSGDITS+20
RSPSTACK EQU   RSWORK+164
RSPTWKC  EQU   RSPSTACK+8
RSTAB    EQU   RSWORK+192
RSTANCHR EQU   RSTAB
RSTENTAD EQU   RSTAB+4
@NM00053 EQU   RSTAB+8
RSTENTIX EQU   @NM00053+1
@NM00055 EQU   RSTAB+12
RSTWKIX  EQU   @NM00055+1
RSTABAD  EQU   RSTAB+16
RSXXREGS EQU   RSWORK+212
RS01REGS EQU   RSXXREGS
RS02REGS EQU   RSXXREGS+20
RS03REGS EQU   RSXXREGS+40
RS03RG08 EQU   RS03REGS
RS03RG09 EQU   RS03REGS+4
RS04REGS EQU   RSXXREGS+60
RS05REGS EQU   RSXXREGS+80
RS06REGS EQU   RSXXREGS+100
RS07REGS EQU   RSXXREGS+120
RSCRBP1  EQU   RSWORK+372
RSIOTBL  EQU   RSWORK+412
RSRABWA  EQU   RSWORK+416
RSGRABCU EQU   RSWORK+428
RSRMBP   EQU   RSWORK+432
RSWFBP1  EQU   RSWORK+436
RSWFBP2  EQU   RSWORK+440
RSVOLLST EQU   RSWORK+460
RSENTPT  EQU   RSWORK+484
RSVTBENT EQU   RSWORK+532
RSVTIOCS EQU   RSWORK+536
CAXWAPTR EQU   RSWORK+568
CBSPTR   EQU   RSWORK+572
CTGPLPTR EQU   RSWORK+576
CTGFLPTR EQU   RSWORK+580
RSCIXLTA EQU   RSWORK+600
RSUIRPT  EQU   RSWORK+612
RSF1RNAM EQU   RSWORK+652
RSF1RNCU EQU   RSWORK+656
RSORVLLS EQU   RSWORK+668
RSGOPLEN EQU   RSWORK+682
RSIDX    EQU   RSWORK+686
RSIDX1   EQU   RSWORK+688
RSUIOPT  EQU   RSWORK+700
RSNEWCAT EQU   RSWORK+965
RSFLAGSN EQU   RSWORK+979
RSFLAGN1 EQU   RSFLAGSN
RSVTOPN  EQU   RSFLAGN1
RSFLAGN2 EQU   RSFLAGSN+1
RSFLAGSI EQU   RSWORK+981
RSFLAGI1 EQU   RSFLAGSI
RSFLAGI2 EQU   RSFLAGSI+1
RSBADVOL EQU   RSFLAGI2+1
RSRECREQ EQU   RSWORK+984
RSRTYPE  EQU   RSRECREQ
RSRGET   EQU   RSRTYPE
RSRUPDT  EQU   RSRTYPE
RSRTERM  EQU   RSRTYPE
RSRFREE  EQU   RSRTYPE
RSROPT   EQU   RSRECREQ+1
RSRDS    EQU   RSROPT
RSRWF    EQU   RSRDS
RSRCAT   EQU   RSRDS
RSRBY    EQU   RSROPT
RSRKEY   EQU   RSRBY
RSRFOR   EQU   RSROPT
RSRUPD   EQU   RSRFOR
RSRUSE   EQU   RSROPT
RSRDIR   EQU   RSRUSE
RSASSOC  EQU   RSWORK+988
RSASSTBL EQU   RSASSOC
RSASSFLG EQU   RSASSOC+16
RSASSFL1 EQU   RSASSFLG
RSASDSDI EQU   RSASSFL1
RSGDG    EQU   RSASSOC+20
RSGDGTB  EQU   RSGDG
RSGDGLL  EQU   RSGDG+4
RSGDGLN  EQU   RSGDG+8
RSGDGNM  EQU   RSGDG+10
RSPROCVL EQU   RSWORK+1064
RSMAPS   EQU   RSPROCVL
RSWKBMAP EQU   RSMAPS
RSPBMAP  EQU   RSMAPS+4
RSSBMAP  EQU   RSMAPS+8
RSCABMAP EQU   RSSBMAP
RSPCBMAP EQU   RSMAPS+12
RSCRBMAP EQU   RSPCBMAP
RSSCBMAP EQU   RSMAPS+16
RSMAPAD  EQU   RSPROCVL+20
RSTGBMAP EQU   RSMAPAD
RSCKBMAP EQU   RSMAPAD+4
RSSTBMAP EQU   RSMAPAD+8
RSTOMAP  EQU   RSMAPAD+12
RSFROMAP EQU   RSMAPAD+16
RSMAPSIZ EQU   RSPROCVL+40
TMPSZ    EQU   RSPROCVL+44
RSPVSNT  EQU   RSPROCVL+48
RSPVSNTC EQU   RSPVSNT
RSPVSNT3 EQU   RSPVSNT+4
RSPVSNT6 EQU   RSPVSNT+12
RSPVSNT8 EQU   RSPVSNT+16
RSPVTTNN EQU   RSPROCVL+68
RSSETTT  EQU   RSPVTTNN
RSPVNEXT EQU   RSPVTTNN+4
RSPVTNEX EQU   RSPVTTNN+6
RSBITPOS EQU   RSPVTTNN+8
RSPVNN   EQU   RSPVTTNN+10
RSPVKNEX EQU   RSPVTTNN+12
RSMASK   EQU   RSPVTTNN+14
@NM00062 EQU   RSPROCVL+84
RSPVSETB EQU   @NM00062
RSSETCRA EQU   RSPVSETB
RSSETMAP EQU   RSPVSETB
RSPVCLBM EQU   RSPVSETB
RSST1TO1 EQU   RSPVSETB
RSPVFLG1 EQU   @NM00062+1
RSPVRVOL EQU   RSPVFLG1
RSPVDELT EQU   RSPVFLG1
RSPVNRP  EQU   RSPVFLG1
RSPVRPC  EQU   RSPVFLG1
RSPVRSC  EQU   RSPVFLG1
RSCKBERR EQU   RSPVFLG1
RSCK1TO1 EQU   RSPVFLG1
RSPVFLG2 EQU   @NM00062+2
RSMUNUS  EQU   RSPVFLG2
RSVLCATE EQU   RSPVFLG2
RSPERROR EQU   RSPVFLG2
RSSERROR EQU   RSPVFLG2
RSSETERR EQU   RSPVFLG2
RSRETSPC EQU   RSPVFLG2
RSBDVOLS EQU   RSPVFLG2
RSEOVWA  EQU   RSWORK+1152
@NM00065 EQU   RSEOVWA+8
@NM00067 EQU   RSEOVWA+12
RSEOVFLG EQU   @NM00067+1
RSGETVIA EQU   RSWORK+1168
RSVIACRA EQU   RSGETVIA
@NM00072 EQU   RSGETVIA+12
RSVIAFLG EQU   @NM00072
RSVIAFCR EQU   RSVIAFLG
RSVIACIN EQU   @NM00072+1
@NM00074 EQU   RSGETVIA+16
RSREASW  EQU   RSWORK+1188
RSCKERR  EQU   RSWORK+1192
RSCKERN  EQU   RSCKERR
RSCKTERM EQU   RSCKERR+4
RSCKMVAR EQU   RSCKERR+8
RSCKERRW EQU   RSWORK+1240
RSLASTCC EQU   RSCKERRW
RSCKTIME EQU   RSCKERRW+8
RSCKFLAG EQU   RSCKERRW+50
RSCIWA   EQU   RSWORK+1292
RSCIEXPT EQU   RSCIWA
RSINWA   EQU   RSWORK+1340
RSINDVL  EQU   RSINWA+24
RSINVLSR EQU   RSINWA+39
RSINATR1 EQU   RSINWA+53
RSINFLGS EQU   RSINWA+54
RSRNWA   EQU   RSWORK+1488
RSRNPLST EQU   RSRNWA
RSRNFLGS EQU   RSRNWA+46
RSRNVL   EQU   RSRNWA+99
RSRNVLC  EQU   RSRNVL
RSRNVLSR EQU   RSRNVL+1
RSRNUL   EQU   RSRNWA+106
RSRWORK  EQU   RSWORK+1604
RSRFLGS  EQU   RSRWORK+64
RSWFWA   EQU   RSWORK+1672
RSADWA   EQU   RSWORK+1724
RSADVL   EQU   RSADWA+32
RSADUL   EQU   RSADWA+39
RSCRWA   EQU   RSWORK+1772
RSGENWRK EQU   RSWORK+1780
RSGENDTE EQU   RSGENWRK+12
RSVOLWA  EQU   RSWORK+1796
RSVSCRPT EQU   RSVOLWA
RSVSCRNM EQU   RSVOLWA+4
RSVSVTTR EQU   RSVOLWA+48
RSVF1TS  EQU   RSVOLWA+52
RSVF1TS1 EQU   RSVF1TS
RSVF1TS2 EQU   RSVF1TS+7
RSVF1PAD EQU   RSVF1TS+14
RSVF1CTS EQU   RSVOLWA+67
RSVF1EXT EQU   RSVOLWA+75
RSVF1TTN EQU   RSVF1EXT
RSVEXTS  EQU   RSVOLWA+139
RSVFLAGS EQU   RSVOLWA+140
RSVGTEOF EQU   RSVFLAGS
RSVREPOS EQU   RSVFLAGS
RSVWFUPD EQU   RSVFLAGS
RSVF4TT  EQU   RSVOLWA+142
RSDF00W  EQU   RSWORK+1940
LISTSCAN EQU   RSDF00W+4
IOCSPTR  EQU   RSDF00W+8
OPNPTR   EQU   RSDF00W+12
DDSTRU   EQU   RSDF00W+16
FSADDR   EQU   RSDF00W+20
ERCNVADR EQU   RSDF00W+24
DMPINDEX EQU   RSDF00W+28
TESTRC   EQU   RSDF00W+34
RSCNVTCC EQU   RSWORK+1980
RSCIOCS  EQU   RSCNVTCC
RSCCHHP  EQU   RSCNVTCC+4
RSTTNN   EQU   RSCNVTCC+8
RSTT     EQU   RSTTNN
RSCNVTCF EQU   RSCNVTCC+12
RSCNVTF1 EQU   RSCNVTCF
RSCFINN  EQU   RSCNVTF1
RSWFNDWA EQU   RSWORK+1996
RSWASNVT EQU   RSWFNDWA+4
RSWSNFLG EQU   RSWFNDWA+8
RSWFONE  EQU   RSWSNFLG
RSWGCODE EQU   RSWFNDWA+9
RSWFBMAP EQU   RSWFNDWA+20
RSWFBMLN EQU   RSWFNDWA+24
RSGENMWA EQU   RSWORK+2052
RSGENAM  EQU   RSGENMWA+9
RSGDATE  EQU   RSGENAM+21
RSGTIME  EQU   RSGENAM+26
RSCDSDWA EQU   RSWORK+2108
RSCDSDIN EQU   RSCDSDWA
RSCDSNT8 EQU   RSCDSDIN
RSCDSNT3 EQU   RSCDSDIN+4
RSCDVOLR EQU   RSCDSDIN+8
RSCDDIR  EQU   RSCDSDIN+12
RSCDSDW  EQU   RSCDSDWA+16
RSCD3FAE EQU   RSCDSDW
RSCD8FAE EQU   RSCDSDW+4
RSCD3FCN EQU   RSCDSDW+8
RSCD8FCN EQU   RSCDSDW+10
RSCDSUMT EQU   RSCDSDW+12
RSCDINDX EQU   RSCDSDW+16
RSMARKUN EQU   RSWORK+2144
RSMA3FAE EQU   RSMARKUN
RSMA3FCN EQU   RSMARKUN+4
RSCSWA   EQU   RSWORK+2152
RSCSFAE  EQU   RSCSWA
RSCSFCN  EQU   RSCSWA+4
GRAB     EQU   0
GRABFLGS EQU   GRAB
GRABAFLS EQU   GRABFLGS+1
GRABAFL1 EQU   GRABAFLS
GRABSFXT EQU   GRABAFL1
GRABSNRN EQU   GRABAFL1
GRABAFL2 EQU   GRABAFLS+1
GRABBB   EQU   GRAB+4
GRABCURR EQU   GRAB+12
GRABRABS EQU   GRAB+16
GRABRAB1 EQU   GRABRABS
GRABRAB2 EQU   GRABRABS+4
GRABRAB4 EQU   GRABRABS+12
RSRAB    EQU   0
RABFLGS  EQU   RSRAB
RABFLG1  EQU   RABFLGS
RABRRN   EQU   RABFLG1
RABNRF   EQU   RABFLG1
RABRCDA  EQU   RSRAB+4
RABBUF   EQU   RSRAB+8
RABPROC  EQU   RSRAB+520
RMB      EQU   0
RMBCTL   EQU   RMB
RMBFLAGS EQU   RMBCTL+8
RSXCIXLT EQU   0
RSXCIENT EQU   RSXCIXLT+8
RSXCIFLG EQU   RSXCIENT+8
RSXCIFL1 EQU   RSXCIFLG
UIODSN   EQU   0
UIOVOL   EQU   0
RECIOWA  EQU   0
GRABSWF  EQU   RECIOWA
GRABSCA  EQU   RECIOWA+40
RSOPNAGL EQU   RECIOWA+248
ALLUL    EQU   RECIOWA+784
ALLVL    EQU   RECIOWA+796
RSCAMINN EQU   RECIOWA+816
RSSCRLST EQU   RECIOWA+872
UCATWA   EQU   RECIOWA+874
RSCNCCHH EQU   0
TASSENT  EQU   0
TASSFL1  EQU   TASSENT+1
TASSRAB  EQU   TASSENT+2
TASSO    EQU   0
TASSEN   EQU   TASSO+4
TABANCHR EQU   0
TABF     EQU   TABANCHR
TABL     EQU   TABANCHR+4
TABC     EQU   TABANCHR+8
TABSIZ   EQU   TABANCHR+12
TABEN    EQU   TABANCHR+18
@NM00102 EQU   TABANCHR+20
TABNU    EQU   @NM00102+1
TABUG    EQU   TABANCHR+24
TABHEAD  EQU   0
THEAD    EQU   TABHEAD
TABBACKW EQU   THEAD
TABFORW  EQU   THEAD+4
TABMAXT  EQU   THEAD+8
TABCURR  EQU   THEAD+10
TENTRY   EQU   TABHEAD+12
PTWORK   EQU   0
PTYPEDTA EQU   PTWORK+12
PTGCIT   EQU   PTYPEDTA
@NM00104 EQU   PTGCIT
PTCITI   EQU   @NM00104+1
@NM00106 EQU   PTGCIT+4
PTCITL   EQU   @NM00106+1
@NM00108 EQU   PTGCIT+8
PTCITNC  EQU   @NM00108+1
PTCITCUR EQU   PTGCIT+12
PTCITF   EQU   PTGCIT+16
PTGDIT   EQU   PTYPEDTA+24
@NM00110 EQU   PTGDIT
@NM00112 EQU   PTGDIT+4
@NM00114 EQU   PTGDIT+8
PTDITCUR EQU   PTGDIT+12
PTASSO   EQU   PTYPEDTA+48
PTASSOC  EQU   PTASSO
PTASSCUR EQU   PTASSO+4
PTASSOEA EQU   PTASSO+8
PTASSOE1 EQU   PTASSO+12
PTASSOE  EQU   PTASSOE1
PTASSEXP EQU   PTASSO+52
PTINDX   EQU   PTYPEDTA+104
PTINDX3  EQU   PTINDX+4
PTINDXV  EQU   PTINDX+6
PTBASE   EQU   PTYPEDTA+116
PTVERDI  EQU   PTYPEDTA+120
PTVALL   EQU   PTVERDI
PTVDI    EQU   PTVALL
PTXALIAS EQU   PTYPEDTA+152
PTXFLAGS EQU   PTXALIAS+30
PTXFLAG1 EQU   PTXFLAGS
PTCRAVL  EQU   PTYPEDTA+184
PTFLAGS  EQU   PTYPEDTA+190
PTF1     EQU   PTFLAGS
PTF1OK   EQU   PTF1
PTF1END  EQU   PTF1
PTF2     EQU   PTFLAGS+1
PTLOC    EQU   PTWORK+204
@NM00120 EQU   PTLOC
PTLBCITX EQU   @NM00120+1
PTLCDIT  EQU   PTLOC+8
@NM00122 EQU   PTLOC+12
PTLDITFB EQU   PTLOC+18
PTLFBAS1 EQU   PTLDITFB
PTLDITID EQU   PTLOC+19
PTASOE   EQU   0
GCITS    EQU   0
CITABE   EQU   0
CITFLA   EQU   CITABE
CITFAVER EQU   CITFLA
CITFAINV EQU   CITFLA
CITCIN   EQU   CITABE+1
@NM00127 EQU   CITABE+4
CITTYPE  EQU   @NM00127
@NM00128 EQU   CITABE+8
@NM00129 EQU   CITABE+12
@NM00131 EQU   CITABE+16
GDITS    EQU   0
DITABE   EQU   0
DITFA    EQU   DITABE
DITFAVER EQU   DITFA
DITFLB   EQU   DITABE+1
@NM00140 EQU   DITABE+4
DITSN    EQU   @NM00140
DITVSN   EQU   DITSN
@NM00143 EQU   DITABE+8
DITDGML  EQU   DITABE+12
GDGLDS   EQU   0
GDGLHEAD EQU   GDGLDS
GDGVAL   EQU   GDGLHEAD
GDGLMT   EQU   GDGLHEAD+4
GDGCNT   EQU   GDGLHEAD+6
GDGVALB  EQU   GDGLHEAD+8
GDGPLEV  EQU   GDGLHEAD+10
GDGTOS   EQU   GDGLHEAD+12
GDGTOE   EQU   GDGLHEAD+14
GDGFRS   EQU   GDGLHEAD+16
GDGFRE   EQU   GDGLHEAD+18
GDGMVL   EQU   GDGLHEAD+20
GDGPAK   EQU   GDGLHEAD+22
GDGFLG   EQU   GDGLHEAD+30
GDGWRAP  EQU   GDGFLG
GDGLENTS EQU   GDGLDS+32
GDGENT   EQU   GDGLENTS
GDGLVLT  EQU   GDGENT
BMAP     EQU   0
RSFSNVT  EQU   0
RSFLAGS  EQU   RSFSNVT+1
RSFNRF   EQU   RSFLAGS
RSFGCODE EQU   RSFSNVT+2
RSFENTLN EQU   RSFSNVT+3
RSFHNDX  EQU   RSFSNVT+4
RSFCNDX  EQU   RSFSNVT+6
RSFAENT  EQU   RSFSNVT+8
RSFLENBM EQU   RSFSNVT+14
RSFATTNN EQU   RSFSNVT+16
RSFABMAP EQU   RSFSNVT+20
RSFCADR  EQU   RSFSNVT+24
SNTAB    EQU   0
SNFIXED  EQU   SNTAB
SNFLAG   EQU   SNFIXED
SNFUSE   EQU   SNFLAG
SNFDEL   EQU   SNFLAG
SNFPROC  EQU   SNFLAG
SNSN     EQU   SNFIXED+1
SNENTRY  EQU   SNTAB+24
SNVDATA  EQU   SNENTRY
SDSCBTS  EQU   SNVDATA
SSPHDFLG EQU   SNVDATA+8
SNVSPUNQ EQU   SSPHDFLG
SNVSPCAT EQU   SSPHDFLG
SNODSPXT EQU   SNVDATA+9
SSPEXTNT EQU   SNVDATA+10
SSPEXTNN EQU   SSPEXTNT
SNASSOC  EQU   0
SNGLEV   EQU   SNASSOC+28
SNVGO    EQU   0
SNVOLSER EQU   SNVGO+28
SITYPEXT EQU   SNVGO+34
SNSSWD   EQU   SITYPEXT
SDSDIRSN EQU   SNVGO+35
SNVGOSS  EQU   SNVGO+37
SNTTNNX  EQU   SNVGO+39
SNTTNNC  EQU   SNVGO+40
SNEXTENT EQU   SNVGO+43
SNVSBM   EQU   0
SNDSDIR  EQU   0
SDSIDFLG EQU   SNDSDIR+24
SDSEXT   EQU   SDSIDFLG
SDSIDNO  EQU   SNDSDIR+25
SDSCRETS EQU   SNDSDIR+28
SDSSUMTT EQU   SNDSDIR+32
SNTTNN   EQU   0
SNTT     EQU   SNTTNN
SNNN     EQU   SNTTNN+2
CATGOPT  EQU   0
CATGOCI  EQU   CATGOPT
CATGOFLG EQU   CATGOCI
CATGOGC1 EQU   CATGOPT+3
CATGOSEQ EQU   CATGOPT+4
CATRCD   EQU   0
RCDCINO  EQU   CATRCD+1
RCDCRAVL EQU   CATRCD+5
RCDDICTS EQU   CATRCD+22
RCDID    EQU   CATRCD+44
RCDSIZ   EQU   CATRCD+45
NREPLF   EQU   CATRCD+48
REPCNTRL EQU   0
EXTRCDPT EQU   REPCNTRL
REPCNT   EQU   REPCNTRL+5
REPGOPT  EQU   REPCNTRL+6
VARFIELD EQU   0
VARLEN   EQU   VARFIELD
CNTRLINF EQU   0
CTGRBASE EQU   0
CNAME    EQU   CTGRBASE+49
COWNID   EQU   CTGRBASE+93
CATTR    EQU   CTGRBASE+107
CATTR1   EQU   CATTR
CUNIQ    EQU   CATTR1
CATTR2   EQU   CATTR+1
CNUS     EQU   CATTR2
COPEN    EQU   CTGRBASE+109
CSPACPRM EQU   CTGRBASE+114
CCR      EQU   0
ASGO     EQU   0
ASG1     EQU   ASGO+2
ASG2     EQU   ASGO+6
ASGOGDG  EQU   0
DSDIR    EQU   0
SPACEPRM EQU   0
SPCOPTNS EQU   SPACEPRM+6
RGATTRFL EQU   0
RGATTR1  EQU   RGATTRFL
RGATTSG1 EQU   RGATTRFL+1
VOLGO    EQU   0
GDGRCD   EQU   0
GDGLIMIT EQU   GDGRCD+107
GENLVLS  EQU   0
GDGLVL   EQU   GENLVLS+2
CTGPL    EQU   0
CTGOPTN1 EQU   CTGPL
CTGOPTN2 EQU   CTGPL+1
CTGEXT   EQU   CTGOPTN2
CTGERASE EQU   CTGOPTN2
CTGSMF   EQU   CTGERASE
CTGREL   EQU   CTGSMF
CTGPURG  EQU   CTGOPTN2
CTGVMNT  EQU   CTGPURG
CTGRCATN EQU   CTGVMNT
CTGGTNXT EQU   CTGOPTN2
CTGOPTN3 EQU   CTGPL+2
CTGOPTN4 EQU   CTGPL+3
CTGENT   EQU   CTGPL+4
CTGFVT   EQU   CTGENT
CTGCAT   EQU   CTGPL+8
CTGDSORG EQU   CTGPL+16
CTGDDNM  EQU   CTGPL+20
CTGNEWNM EQU   CTGDDNM
CTGFBFLG EQU   CTGNEWNM+2
CTGJSCB  EQU   CTGPL+24
CTGFL    EQU   0
CTGFLDRE EQU   CTGFL+3
CTGFLDAT EQU   CTGFL+16
CTGFV    EQU   0
CTGFVPRO EQU   CTGFV+1
CTGFVSPC EQU   CTGFV+52
CTGFVAMD EQU   CTGFV+56
CTGFVLMT EQU   CTGFV+72
CTGFVGAT EQU   CTGFV+76
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
AMCBS    EQU   0
CBSCMP   EQU   AMCBS+16
CBSVSRT  EQU   AMCBS+32
IGGCAXWA EQU   0
CAXFLGS  EQU   IGGCAXWA+8
CAXFLG2  EQU   IGGCAXWA+9
CAXFLG3  EQU   IGGCAXWA+10
CAXCCR   EQU   IGGCAXWA+32
CAXCNAM  EQU   IGGCAXWA+52
CAXOPLST EQU   IGGCAXWA+96
COPTS    EQU   CAXOPLST
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBVVIC  EQU   ACBINFLG
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDNEST  EQU   IDAAMDSB+4
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
FMT1DSCB EQU   0
FMT1NAME EQU   FMT1DSCB
FMT1ID   EQU   FMT1DSCB+44
FMT1NEXT EQU   FMT1DSCB+59
FMT1ORG  EQU   FMT1DSCB+83
FMT1VSAM EQU   FMT1ORG
FMT1EXTS EQU   FMT1DSCB+105
FMT1CCHH EQU   FMT1EXTS+2
FMT1PTR  EQU   FMT1DSCB+135
FMT3DSCB EQU   0
FMT3EXTA EQU   FMT3DSCB+4
FMT3CCHA EQU   FMT3EXTA+2
FMT3EXTB EQU   FMT3DSCB+45
FMT3CCHB EQU   FMT3EXTB+2
DS4TIMS  EQU   87
DS4CCHH  EQU   107
ALLP     EQU   0
ALLPPTR  EQU   0
AMSTP011 EQU   0
AMSTP041 EQU   0
AMSTP042 EQU   0
AMSTP043 EQU   0
AMSTP044 EQU   0
CABUFH1  EQU   0
CABUFL1  EQU   0
CAT      EQU   0
CATSN    EQU   0
CFILE    EQU   0
CFILECNT EQU   0
CIN      EQU   0
CRADNPTR EQU   0
CRADVPTR EQU   0
CRAVLPTR EQU   0
CRBUF1   EQU   0
CVOL     EQU   0
CVOLCNT  EQU   0
DMPTRM   EQU   0
IDCIOCO0 EQU   0
IDCIOIT0 EQU   0
IDCIOPT0 EQU   0
IDCIOSI0 EQU   0
IDCIOST0 EQU   0
IDCIOTM0 EQU   0
IDCIOVY0 EQU   0
IDCIO050 EQU   0
IDCSAAL0 EQU   0
IDCSACA0 EQU   0
IDCSACL0 EQU   0
IDCSACR0 EQU   0
IDCSADE0 EQU   0
IDCSADL0 EQU   0
IDCSADQ0 EQU   0
IDCSAEP0 EQU   0
IDCSAFS0 EQU   0
IDCSAGS0 EQU   0
IDCSAID0 EQU   0
IDCSALC0 EQU   0
IDCSALD0 EQU   0
IDCSALK0 EQU   0
IDCSANQ0 EQU   0
IDCSAPR0 EQU   0
IDCSAPT0 EQU   0
IDCSAQL0 EQU   0
IDCSARC0 EQU   0
IDCSARV0 EQU   0
IDCSASC0 EQU   0
IDCSASI0 EQU   0
IDCSASN0 EQU   0
IDCSASS0 EQU   0
IDCSAST0 EQU   0
IDCSATI0 EQU   0
IDCSAUC0 EQU   0
IDCSAWO0 EQU   0
IDCSA060 EQU   0
IDCST010 EQU   0
IDCTPER0 EQU   0
IGN      EQU   0
LASTCC   EQU   0
LISTTEST EQU   0
NEWERID1 EQU   5
NIGN     EQU   0
NONE     EQU   0
NONEPTR  EQU   0
PTASSEX  EQU   0
RABS     EQU   0
WFBUF1   EQU   0
WFBUF2   EQU   0
WFDN     EQU   0
RSWFLD   EQU   RABPROC
RSWFKG1  EQU   RSWFLD+8
RSWFCRA  EQU   RSWFKG1
RSWDLCAT EQU   RSWFKG1
RSWUPCAT EQU   RSWFKG1
RSWRASCI EQU   RSWFKG1
RSWASSCK EQU   RSWFKG1
RSWFLG2  EQU   RSWFLD+9
RSWDSDIR EQU   RSWFLG2
RABARRAY EQU   GRABRABS
BMAPARRY EQU   RSMAPS
@NM00165 EQU   CATTR1
CCATTR   EQU   @NM00165
@NM00166 EQU   CCATTR
@NM00168 EQU   CATTR1
CRGATTR  EQU   @NM00168
CUPG     EQU   CRGATTR
DEVCHARS EQU   RABBUF+101
@NM00177 EQU   DEVCHARS
RTDEVUCB EQU   @NM00177
RTNOCYLS EQU   @NM00177+8
RTNOTRKS EQU   @NM00177+10
RTBOKAB  EQU   @NM00177+14
RTDVFLGS EQU   @NM00177+17
@NM00191 EQU   CTGDDNM
CTGPROB  EQU   @NM00191
CTGREASN EQU   CTGPROB+2
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
F1TSCNVT EQU   RSVF1TS
F1TSFIX  EQU   F1TSCNVT
F1TSZNE  EQU   F1TSFIX
F1TS1    EQU   RSVSCRNM+19
F1TS2    EQU   RSVSCRNM+28
TTRZ     EQU   IOCTTR
TT       EQU   TTRZ
R        EQU   TTRZ+2
Z        EQU   TTRZ+3
DRTS     EQU   RSVF1TS
DRTS1    EQU   DRTS
DRTS2    EQU   DRTS+7
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
F1TSDIG  EQU   F1TSFIX
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
CTGREAS2 EQU   CTGREASN+1
CTGREAS1 EQU   CTGREASN
CTGMODID EQU   CTGPROB
RTTOLFCT EQU   @NM00177+18
RTTOLFLG EQU   RTDVFLGS
@NM00180 EQU   RTDVFLGS
RTKABFLG EQU   RTDVFLGS
@NM00179 EQU   RTDVFLGS
RTBONK   EQU   @NM00177+16
RTBOKLB  EQU   RTBOKAB+1
RTBOKNLB EQU   RTBOKAB
RTTRKSIZ EQU   @NM00177+12
RTMXDBLK EQU   @NM00177+4
RTCLSTYP EQU   RTDEVUCB+2
@NM00178 EQU   RTDEVUCB
@NM00169 EQU   CRGATTR
CUPD     EQU   CUPG
CPGSP    EQU   @NM00166
@NM00167 EQU   @NM00166
@NM00094 EQU   RSWFLG2
RSWCHRA  EQU   RSWFLG2
RSWCHNRR EQU   RSWFLG2
RSWUPCCH EQU   RSWFLG2
RSWDICHK EQU   RSWFLG2
RSWDUPRR EQU   RSWFLG2
RSWINVCI EQU   RSWFLG2
RSWDUPCI EQU   RSWFKG1
@NM00093 EQU   RSWFKG1
RSWUPCRA EQU   RSWFKG1
RSWDUPTR EQU   RSWFLD+4
RSWCHPTR EQU   RSWFLD
@NM00227 EQU   FMT3DSCB+135
@NM00226 EQU   FMT3EXTB
@NM00225 EQU   FMT3DSCB+44
@NM00224 EQU   FMT3EXTA
@NM00223 EQU   FMT3DSCB
FMT1SEQ  EQU   FMT1EXTS+1
FMT1EXTY EQU   FMT1EXTS
@NM00222 EQU   FMT1DSCB+84
@NM00221 EQU   FMT1ORG
@NM00220 EQU   FMT1ORG
@NM00219 EQU   FMT1DSCB+60
@NM00218 EQU   FMT1DSCB+45
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00215 EQU   IDAAMDSB+41
@NM00214 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDCINV  EQU   IDAAMDSB+20
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDKEYLN EQU   IDAAMDSB+8
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00213 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00212 EQU   ACBINFLG+1
ACBBYPSS EQU   ACBINFLG
ACBSDS   EQU   ACBVVIC
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00211 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00210 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00209 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00208 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00207 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00206 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00205 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00204 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00203 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00202 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
CAXCRACB EQU   IGGCAXWA+112
CAXJDE   EQU   IGGCAXWA+108
CAXCCA   EQU   IGGCAXWA+104
CAXOPEWA EQU   IGGCAXWA+100
COPACB   EQU   CAXOPLST+1
@NM00201 EQU   COPTS
CENLST   EQU   COPTS
@NM00200 EQU   CAXCNAM+22
CAXRADDN EQU   CAXCNAM+14
CAXRATEP EQU   CAXCNAM+10
CAXRACTS EQU   CAXCNAM+6
CAXVOLID EQU   CAXCNAM
CAXRPL   EQU   IGGCAXWA+48
CAXRPLCT EQU   IGGCAXWA+46
CAXASID  EQU   IGGCAXWA+44
CAXFDCI  EQU   CAXCCR+9
CAXCDCI  EQU   CAXCCR+6
CAXNFCI  EQU   CAXCCR+3
CAXHACI  EQU   CAXCCR
CAXUCB   EQU   IGGCAXWA+28
CAXACB   EQU   IGGCAXWA+24
CAXDRWP  EQU   IGGCAXWA+20
CAXSCHWA EQU   IGGCAXWA+16
CAXATIOT EQU   IGGCAXWA+12
CAXACT   EQU   IGGCAXWA+11
@NM00199 EQU   CAXFLG3
CAXF3B6  EQU   CAXFLG3
CAXF3B5  EQU   CAXFLG3
@NM00198 EQU   CAXFLG3
CAXF3ANE EQU   CAXFLG3
CAXF3AT  EQU   CAXFLG3
CAXF2VTU EQU   CAXFLG2
CAXF2REC EQU   CAXFLG2
CAXF2CA  EQU   CAXFLG2
CAXF2CLR EQU   CAXFLG2
CAXF2IOE EQU   CAXFLG2
CAXF2NCR EQU   CAXFLG2
CAXF2NDD EQU   CAXFLG2
CAXF2DT  EQU   CAXFLG2
CAXSCR   EQU   CAXFLGS
CAXCMR   EQU   CAXFLGS
CAXMCT   EQU   CAXFLGS
CAXCMP   EQU   CAXFLGS
CAXEOV   EQU   CAXFLGS
CAXCLS   EQU   CAXFLGS
CAXOPN   EQU   CAXFLGS
CAXBLD   EQU   CAXFLGS
CAXCHN   EQU   IGGCAXWA+4
@NM00197 EQU   IGGCAXWA+1
CAXID    EQU   IGGCAXWA
CBSVPTR  EQU   CBSVSRT+4
CBSVUSE  EQU   CBSVSRT
CBSCRTCB EQU   AMCBS+28
CBSCRACA EQU   AMCBS+24
CBSCAXCN EQU   AMCBS+20
CBSMCUCB EQU   CBSCMP
CBSCBP   EQU   AMCBS+12
CBSACB   EQU   AMCBS+8
CBSMCSTA EQU   AMCBS+4
CBSSIZ   EQU   AMCBS+2
CBSID    EQU   AMCBS
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00196 EQU   CVTFIX+248
@NM00195 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
CTGFVWKA EQU   CTGFV+88
CTGFVPWD EQU   CTGFV+84
CTGFVNAM EQU   CTGFV+80
CTGFVUPG EQU   CTGFVGAT
CTGFVEXT EQU   CTGFVLMT
CTGFVLRS EQU   CTGFV+68
CTGFVBUF EQU   CTGFV+64
CTGFVATR EQU   CTGFV+60
CTGFVFSN EQU   CTGFVAMD
CTGFVTTR EQU   CTGFVSPC
CTGFVDVT EQU   CTGFV+48
CTGFVRNG EQU   CTGFV+44
CTGFVVLT EQU   CTGFV+40
CTGFVCRE EQU   CTGFV+36
CTGFVEXP EQU   CTGFV+32
CTGFVOWN EQU   CTGFV+28
CTGFVSTY EQU   CTGFV+24
CTGFVENT EQU   CTGFV+20
CTGFVIND EQU   CTGFV+16
CTGFVVCH EQU   CTGFV+12
CTGFVICH EQU   CTGFV+8
CTGFVDCH EQU   CTGFV+4
@NM00194 EQU   CTGFV+3
CTGFVELM EQU   CTGFV+2
@NM00193 EQU   CTGFVPRO
CTGFVDRC EQU   CTGFVPRO
CTGFVNDC EQU   CTGFVPRO
CTGFVRVL EQU   CTGFVPRO
CTGFVAVL EQU   CTGFVPRO
CTGFVTYP EQU   CTGFV
CTGFLPT  EQU   CTGFLDAT+4
CTGFLNG  EQU   CTGFLDAT
CTGFLCHN EQU   CTGFL+12
CTGFLDNM EQU   CTGFL+8
CTGFLDWA EQU   CTGFL+4
CTGFLDTS EQU   CTGFLDRE
@NM00192 EQU   CTGFLDRE
CTGFLDGC EQU   CTGFL+2
CTGFLDCD EQU   CTGFL+1
CTGFLDNO EQU   CTGFL
CTGFIELD EQU   CTGPL+28
CTGPSWD  EQU   CTGJSCB
@NM00190 EQU   CTGFBFLG
CTGNGDSN EQU   CTGFBFLG
CTGGDGB  EQU   CTGFBFLG
CTGKEEP  EQU   CTGFBFLG
CTGPAR   EQU   CTGFBFLG
CTGFDBK  EQU   CTGNEWNM
CTGNOFLD EQU   CTGPL+19
CTGTYPE  EQU   CTGPL+18
@NM00189 EQU   CTGDSORG
CTGOPTNS EQU   CTGDSORG
CTGWKA   EQU   CTGPL+12
CTGCVOL  EQU   CTGCAT
@NM00188 EQU   CTGOPTN4
CTGBYPMT EQU   CTGOPTN4
@NM00187 EQU   CTGOPTN4
CTGNPROF EQU   CTGOPTN4
CTGDOCAT EQU   CTGOPTN4
CTGLBASE EQU   CTGOPTN4
CTGAM0   EQU   CTGOPTN3
CTGNUM   EQU   CTGOPTN3
CTGSRH   EQU   CTGOPTN3
CTGGDGL  EQU   CTGOPTN3
CTGSUPLT EQU   CTGOPTN3
CTGFUNC  EQU   CTGOPTN3
@NM00186 EQU   CTGOPTN2
CTGSCR   EQU   CTGOPTN2
CTGOVRID EQU   CTGOPTN2
CTGDISC  EQU   CTGOPTN2
CTGUCRAX EQU   CTGGTNXT
CTGSWAP  EQU   CTGRCATN
CTGGTALL EQU   CTGREL
CTGNSVS  EQU   CTGEXT
CTGGENLD EQU   CTGOPTN1
CTGCNAME EQU   CTGOPTN1
CTGNAME  EQU   CTGOPTN1
CTGREAD  EQU   CTGOPTN1
CTGUPD   EQU   CTGOPTN1
CTGCI    EQU   CTGOPTN1
CTGMAST  EQU   CTGOPTN1
CTGBYPSS EQU   CTGOPTN1
@NM00185 EQU   GENLVLS
@NM00184 EQU   GDGRCD+108
@NM00183 EQU   GDGRCD
@NM00182 EQU   VOLGO+34
NOBLKTRK EQU   VOLGO+32
@NM00181 EQU   VOLGO
@NM00176 EQU   RGATTSG1
RGATSUP1 EQU   RGATTSG1
@NM00175 EQU   RGATTR1
RGATTUPG EQU   RGATTR1
SPCROUND EQU   SPCOPTNS
SPCALXRQ EQU   SPCOPTNS
SPCMXIGR EQU   SPCOPTNS
SPCCNTIG EQU   SPCOPTNS
@NM00174 EQU   SPCOPTNS
SPCRQTYP EQU   SPCOPTNS
SPCSECDQ EQU   SPACEPRM+3
SPCPRIMQ EQU   SPACEPRM
DSSUMTT  EQU   DSDIR+9
DSCRETS  EQU   DSDIR+5
DSIDNO   EQU   DSDIR+2
@NM00173 EQU   DSDIR
ASGDGLVL EQU   ASGOGDG+6
@NM00172 EQU   ASGOGDG+2
@NM00171 EQU   ASGOGDG
ASCI2    EQU   ASG2+1
ASTYPE2  EQU   ASG2
ASCI     EQU   ASG1+1
ASTYPE   EQU   ASG1
@NM00170 EQU   ASGO
CCRRBAS  EQU   CCR+57
CCRFDCI  EQU   CCR+54
CCRCDCI  EQU   CCR+51
CCRNFCI  EQU   CCR+48
CCRHACI  EQU   CCR+45
CCRID    EQU   CCR+44
CCRKEY   EQU   CCR
CEXT     EQU   CTGRBASE+135
CDOSUINF EQU   CTGRBASE+133
CLRECL   EQU   CTGRBASE+129
CHIA     EQU   CTGRBASE+125
CHIU     EQU   CTGRBASE+121
CSORT    EQU   CSPACPRM+6
CSEC     EQU   CSPACPRM+3
CPRIM    EQU   CSPACPRM
CBUF     EQU   CTGRBASE+110
@NM00164 EQU   COPEN
COPENDS  EQU   COPEN
@NM00163 EQU   CATTR2
CATTRSSH EQU   CATTR2
CATTRISH EQU   CATTR2
CTRKOV   EQU   CATTR1
CTEMP    EQU   CATTR1
CINHIB   EQU   CATTR1
CRECOV   EQU   CATTR1
CERASE   EQU   CATTR1
CREUSE   EQU   CATTR1
CSP      EQU   CATTR1
CEXP     EQU   CTGRBASE+104
CCRE     EQU   CTGRBASE+101
@NM00162 EQU   CTGRBASE
LENFIX   EQU   CNTRLINF+1
CNTVAR   EQU   CNTRLINF
VARINFO  EQU   VARFIELD+2
@NM00161 EQU   EXTRCDPT+3
EXTGOCI  EQU   EXTRCDPT
NREPCV   EQU   CATRCD+47
@NM00160 EQU   CATRCD+26
RCDRACTS EQU   CATRCD+18
RCDCRADT EQU   CATRCD+14
RCDCRACI EQU   CATRCD+11
RCDRELID EQU   CATRCD+4
RCDKEYTY EQU   CATRCD
CATGOGC  EQU   CATGOGC1
CATGODEL EQU   CATGOGC1
CATGOEXT EQU   CATGOGC1
CATGODSP EQU   CATGOCI+1
@NM00159 EQU   CATGOFLG
@NM00158 EQU   SDSIDFLG
@NM00157 EQU   SNDSDIR
SNLBM    EQU   SNVSBM+28
SNABM    EQU   SNVSBM+24
@NM00156 EQU   SNVSBM
@NM00155 EQU   SNEXTENT+16
@NM00154 EQU   SNEXTENT+12
NTR      EQU   SNEXTENT+10
@NM00153 EQU   SNEXTENT+8
@NM00152 EQU   SNEXTENT+6
SHH      EQU   SNEXTENT+4
SCC      EQU   SNEXTENT+2
SS       EQU   SNEXTENT
SNEXTI   EQU   SNVGO+42
SNTTNNMC EQU   SNVGO+41
SNDEVTYP EQU   SNVGO+24
@NM00151 EQU   SNVGO
SNNAME2  EQU   SNGLEV+1
SNTYPE2  EQU   SNGLEV
SNNAME   EQU   SNASSOC+25
SNTYPE   EQU   SNASSOC+24
@NM00150 EQU   SNASSOC
@NM00149 EQU   SSPHDFLG
SNVGOEL  EQU   SNFIXED+20
SNEGOP   EQU   SNFIXED+16
SNECI    EQU   SNFIXED+13
SNAGOP   EQU   SNFIXED+11
SNACI    EQU   SNFIXED+8
SNGOP    EQU   SNFIXED+6
SNCI     EQU   SNFIXED+3
@NM00148 EQU   SNFLAG
SNFINC   EQU   SNFLAG
SNFMOD   EQU   SNFLAG
SNFALT   EQU   SNFLAG
RSFCILST EQU   RSFSNVT+28
RSFCNTTN EQU   RSFSNVT+12
@NM00147 EQU   RSFLAGS
RSFINVTY EQU   RSFLAGS
@NM00146 EQU   RSFSNVT
@NM00145 EQU   GDGFLG
DITCITAB EQU   @NM00143+1
@NM00144 EQU   @NM00143
@NM00142 EQU   @NM00140+2
DITOSN   EQU   DITVSN+1
@NM00141 EQU   DITVSN
DITOFS   EQU   DITABE+2
DITFB256 EQU   DITFLB
@NM00139 EQU   DITFLB
DITFBDGO EQU   DITFLB
@NM00138 EQU   DITFLB
DITFBAS2 EQU   DITFLB
DITFBAS1 EQU   DITFLB
DITFBGOE EQU   DITFLB
DITFBHEP EQU   DITFLB
@NM00137 EQU   DITFA
@NM00136 EQU   DITFA
@NM00135 EQU   DITFA
@NM00134 EQU   DITFA
DITFADEL EQU   DITFA
DITFARAS EQU   DITFA
@NM00133 EQU   DITFA
GDIENTRY EQU   GDITS+12
GDITHEAD EQU   GDITS
CITEXTBA EQU   @NM00131+1
@NM00132 EQU   @NM00131
CITEXTCH EQU   @NM00129+1
@NM00130 EQU   @NM00129
CITDITAB EQU   @NM00128+1
CITDICNT EQU   @NM00128
CITRCIN  EQU   @NM00127+1
CITFADGO EQU   CITFLA
CITFASCA EQU   CITFLA
CITFAGOE EQU   CITFLA
CITFAHEP EQU   CITFLA
CITFARAS EQU   CITFLA
@NM00126 EQU   CITFLA
CITABENT EQU   GCITS+12
GCITHEAD EQU   GCITS
PTASCIT1 EQU   PTASOE+4
PTASDIT1 EQU   PTASOE
@NM00125 EQU   PTLDITFB
PTLFBDGO EQU   PTLDITFB
@NM00124 EQU   PTLDITFB
PTLFBAS2 EQU   PTLDITFB
PTLFBGOE EQU   PTLDITFB
PTLFBHEP EQU   PTLDITFB
PTLSN    EQU   PTLOC+16
PTLNDIT  EQU   @NM00122+1
@NM00123 EQU   @NM00122
PTLCCIT  EQU   PTLOC+4
@NM00121 EQU   @NM00120
@NM00119 EQU   PTF2
PTF2KSDS EQU   PTF2
PTF1ENDA EQU   PTF1
PTF1ENDG EQU   PTF1
PTF1CKVL EQU   PTF1
PTF1DELT EQU   PTF1
PTF1HIT2 EQU   PTF1
PTF1HIT  EQU   PTF1
@NM00118 EQU   PTXFLAGS+1
@NM00117 EQU   PTXFLAG1
PTXEXIST EQU   PTXFLAG1
PTXEND   EQU   PTXFLAG1
PTXX2C   EQU   PTXALIAS+28
PTXX1C   EQU   PTXALIAS+26
PTXX0C   EQU   PTXALIAS+24
PTXCITX1 EQU   PTXALIAS+20
PTXX1X0D EQU   PTXALIAS+16
PTXX1X2D EQU   PTXALIAS+12
PTXX1AUD EQU   PTXALIAS+8
PTXX0X1D EQU   PTXALIAS+4
PTXUX1D  EQU   PTXALIAS
PTVDSSNT EQU   PTVERDI+28
@NM00116 EQU   PTVERDI+26
PTVCNT   EQU   PTVERDI+24
PTVDIASS EQU   PTVDI+8
PTVDISNT EQU   PTVDI+4
PTVDICIT EQU   PTVDI
PTINDX5  EQU   PTINDX+10
PTINDX4  EQU   PTINDX+8
PTINDX2  EQU   PTINDX+2
PTINDX1  EQU   PTINDX
PTASSCIT EQU   PTASSOE+4
PTASSDIT EQU   PTASSOE
PTDITWK  EQU   PTGDIT+20
PTDITF   EQU   PTGDIT+16
PTDITNC  EQU   @NM00114+1
@NM00115 EQU   @NM00114
PTDITL   EQU   @NM00112+1
@NM00113 EQU   @NM00112
PTDITI   EQU   @NM00110+1
@NM00111 EQU   @NM00110
PTCITWK  EQU   PTGCIT+20
@NM00109 EQU   @NM00108
@NM00107 EQU   @NM00106
@NM00105 EQU   @NM00104
PTHEAD   EQU   PTWORK
@NM00103 EQU   @NM00102
@NM00101 EQU   TABANCHR+16
TASSNENT EQU   TASSO+2
@NM00100 EQU   TASSO+1
TASSID   EQU   TASSO
@NM00099 EQU   TASSFL1
TASSSET  EQU   TASSFL1
TASSIS   EQU   TASSFL1
TASSVER  EQU   TASSFL1
TASSSCAN EQU   TASSFL1
TASSREAD EQU   TASSFL1
TASSTYPE EQU   TASSENT
RSCNHH2  EQU   RSCNCCHH+6
RSCNCC2  EQU   RSCNCCHH+4
RSCNHH1  EQU   RSCNCCHH+2
RSCNCC1  EQU   RSCNCCHH
RECPTRCD EQU   RECIOWA+978
UCATWRET EQU   UCATWA+4
UCATWRLN EQU   UCATWA+2
UCATWTLN EQU   UCATWA
UCBAREA  EQU   RECIOWA+861
RSCAMIND EQU   RSCAMINN+1
RSCAMINL EQU   RSCAMINN
RSCAMAJN EQU   RECIOWA+808
ALLVLSR  EQU   ALLVL+4
ALLVLLN  EQU   ALLVL+2
ALLVLC   EQU   ALLVL
ALLULNM  EQU   ALLUL+4
ALLULLN  EQU   ALLUL+2
ALLULC   EQU   ALLUL
RSVOLENT EQU   RECIOWA+692
RSVUENT  EQU   RECIOWA+664
RSALLAGL EQU   RECIOWA+632
CATHRMB  EQU   RECIOWA+192
CATLRMB  EQU   RECIOWA+180
CRARMB   EQU   RECIOWA+168
WFSRMB   EQU   RECIOWA+156
WFDRMB   EQU   RECIOWA+120
GRABSCR  EQU   RECIOWA+80
UIOVLS   EQU   UIOVOL+4
UIOVLN   EQU   UIOVOL+2
UIOVID   EQU   UIOVOL
UIODNM   EQU   UIODSN+4
UIODLN   EQU   UIODSN+2
UIODID   EQU   UIODSN
RSXCIREL EQU   RSXCIENT+12
@NM00098 EQU   RSXCIFL1
RSXCIRNG EQU   RSXCIFL1
RSXCILN  EQU   RSXCIENT+4
RSXCIBEG EQU   RSXCIENT
@NM00097 EQU   RSXCIXLT+4
RSXCIID  EQU   RSXCIXLT
RMBKEYA  EQU   RMB+12
@NM00096 EQU   RMBFLAGS
RMBGETU  EQU   RMBFLAGS
RMBKEQ   EQU   RMBFLAGS
RMBKEY   EQU   RMBFLAGS
RMBUPD   EQU   RMBFLAGS
RMBDIR   EQU   RMBFLAGS
RMBSEQ   EQU   RMBFLAGS
RMBARG   EQU   RMBCTL+4
RMBRPL   EQU   RMBCTL
@NM00095 EQU   RSRAB+530
RABFLG4  EQU   RABFLGS+3
RABFLG3  EQU   RABFLGS+2
RABFLG2  EQU   RABFLGS+1
RABDUP   EQU   RABFLG1
RABIOIGN EQU   RABFLG1
RABKEY   EQU   RABFLG1
RABADD   EQU   RABFLG1
RABUPD   EQU   RABFLG1
RABINUSE EQU   RABFLG1
GRABRAB6 EQU   GRABRABS+20
GRABRAB5 EQU   GRABRABS+16
GRABRAB3 EQU   GRABRABS+8
GRABRABE EQU   GRAB+8
GRABSN   EQU   GRAB+3
GRABSNRF EQU   GRABAFL2
GRABSDUP EQU   GRABAFL1
GRABSIOT EQU   GRABAFL1
GRABSIOF EQU   GRABAFL1
GRABSIOI EQU   GRABAFL1
GRABSEFN EQU   GRABAFL1
GRABSNRA EQU   GRABAFL1
GRABFLG1 EQU   GRABFLGS
@NM00092 EQU   RSCSWA+6
@NM00091 EQU   RSMARKUN+6
@NM00090 EQU   RSCDSDW+18
RSGTMEB  EQU   RSGTIME+11
RSGDELM2 EQU   RSGTIME+9
@NM00089 EQU   RSGTIME+2
RSGDELM1 EQU   RSGTIME
RSGDAY   EQU   RSGDATE+2
RSGYEAR  EQU   RSGDATE
RSGFIXID EQU   RSGENAM+8
RSGTMEA  EQU   RSGENAM+1
RSGDELM  EQU   RSGENAM
RSGUNPK  EQU   RSGENMWA
RSFCPE7  EQU   RSWFNDWA+52
RSFCPE6  EQU   RSWFNDWA+48
RSFCPE5  EQU   RSWFNDWA+44
RSFCPE4  EQU   RSWFNDWA+40
RSFCPE3  EQU   RSWFNDWA+36
RSFCPE2  EQU   RSWFNDWA+32
RSFCPE1  EQU   RSWFNDWA+28
@NM00088 EQU   RSWFNDWA+26
RSWFBUF  EQU   RSWFNDWA+16
RSWFCIN  EQU   RSWFNDWA+13
RSWFRCSN EQU   RSWFNDWA+12
RSWSEQNR EQU   RSWFNDWA+10
@NM00087 EQU   RSWSNFLG
RSWFIRST EQU   RSWSNFLG
RSWAFINF EQU   RSWFNDWA
@NM00086 EQU   RSCNVTCF+1
@NM00085 EQU   RSCNVTF1
RSNN     EQU   RSTTNN+2
LISTLN   EQU   RSDF00W+36
SETRC    EQU   RSDF00W+32
LISTPTR  EQU   RSDF00W
@NM00084 EQU   RSVOLWA+141
@NM00083 EQU   RSVFLAGS
RSGENDT  EQU   RSGENDTE+1
@NM00082 EQU   RSGENDTE
RSGENTME EQU   RSGENWRK+4
RSGENTPT EQU   RSGENWRK
RSCRGRBP EQU   RSCRWA+4
RSCRENTP EQU   RSCRWA
@NM00081 EQU   RSADUL+10
RSADSTP  EQU   RSADUL+10
RSADFLGS EQU   RSADUL+9
RSADULNM EQU   RSADUL+1
RSADULC  EQU   RSADUL
RSADVLSR EQU   RSADVL+1
RSADVLC  EQU   RSADVL
RSADDDNP EQU   RSADWA+28
RSADULP  EQU   RSADWA+24
RSADVLP  EQU   RSADWA+20
RSADENP  EQU   RSADWA+16
RSADVSRP EQU   RSADWA+12
RSADGRBP EQU   RSADWA+8
RSADDDN  EQU   RSADWA
RSWFAMDP EQU   RSWFWA+48
RSWFLR   EQU   RSWFWA+44
RSWFDFAR EQU   RSWFWA+40
RSWFFPLP EQU   RSWFWA+12
RSWFFVTP EQU   RSWFWA+4
RSWFSVCP EQU   RSWFWA
@NM00080 EQU   RSRWORK+65
RSRSKPSW EQU   RSRFLGS
RSRXSW   EQU   RSRFLGS
RSRXTRY  EQU   RSRFLGS
RSROKSW  EQU   RSRFLGS
RSRX     EQU   RSRWORK+63
RSRIXNO  EQU   RSRWORK+62
RSRU     EQU   RSRWORK+61
RSRI     EQU   RSRWORK+60
RSRLG    EQU   RSRWORK+59
RSRLU    EQU   RSRWORK+58
RSRSVFLG EQU   RSRWORK+48
RSMSGCI  EQU   RSRWORK+45
RSMSGRC  EQU   RSRWORK+42
RSRRLN   EQU   RSRWORK+40
RSRRCPY  EQU   RSRWORK+38
RSRWFRN  EQU   RSRWORK+36
RSRCATRN EQU   RSRWORK+34
RSRCRARN EQU   RSRWORK+32
RSRXLFND EQU   RSRWORK+28
RSRXLSV  EQU   RSRWORK+24
RSRRPL   EQU   RSRWORK+20
RSRSVARG EQU   RSRWORK+16
RSRFAD   EQU   RSRWORK+12
RSRDAD   EQU   RSRWORK+8
RSRRC    EQU   RSRWORK+4
RSRGRBPT EQU   RSRWORK
RSRNULNM EQU   RSRNUL+1
RSRNULC  EQU   RSRNUL
RSRNDDNM EQU   RSRNWA+91
RSRNOLDN EQU   RSRNWA+47
RSRNNOF1 EQU   RSRNFLGS
RSRNVDUP EQU   RSRNFLGS
RSRNSTP  EQU   RSRNFLGS
RSRNFAIL EQU   RSRNFLGS
RSRNRCRS EQU   RSRNFLGS
RSRNEVC  EQU   RSRNWA+44
RSRNEVP  EQU   RSRNWA+40
RSRNULP  EQU   RSRNWA+36
RSRNVLP  EQU   RSRNWA+32
RSRNVSPT EQU   RSRNWA+28
RSRNDDPT EQU   RSRNWA+24
RSRNVLPT EQU   RSRNWA+20
RSRNGRBP EQU   RSRNWA+16
RSRNPVLS EQU   RSRNPLST+12
RSRNPNDS EQU   RSRNPLST+8
RSRNPODS EQU   RSRNPLST+4
RSRNPFLG EQU   RSRNPLST
RSSVENT  EQU   RSINWA+55
RSINALL  EQU   RSINFLGS
@NM00079 EQU   RSINATR1
RSINRCV  EQU   RSINATR1
@NM00078 EQU   RSINATR1
RSINTS   EQU   RSINWA+45
RSINSVVL EQU   RSINWA+33
RSINDVLV EQU   RSINDVL+1
RSINDVLL EQU   RSINDVL
RSINDDPT EQU   RSINWA+20
RSINDNPT EQU   RSINWA+16
RSINDVPT EQU   RSINWA+12
RSINCVPT EQU   RSINWA+8
RSINWACB EQU   RSINWA+4
RSINUAP  EQU   RSINWA
RSCISVLK EQU   RSCIWA+44
RSCIEXT  EQU   RSCIWA+24
RSCIDFCI EQU   RSCIWA+20
RSCIRMEN EQU   RSCIWA+16
RSCILCI  EQU   RSCIWA+12
RSCINXCI EQU   RSCIWA+8
RSCIEXCU EQU   RSCIWA+4
@NM00077 EQU   RSCKFLAG
RSCKTSW  EQU   RSCKFLAG
RSCKIDX3 EQU   RSCKERRW+48
RSCKIDX2 EQU   RSCKERRW+46
RSCKIDX1 EQU   RSCKERRW+44
RSCATRC  EQU   RSCKERRW+42
RSOURCC  EQU   RSCKERRW+40
RSCKMDTB EQU   RSCKTIME+20
RSCKMDY  EQU   RSCKTIME+14
RSCKHMS  EQU   RSCKTIME+8
RSCKPDAY EQU   RSCKTIME+4
RSCKDAYS EQU   RSCKTIME
RSCKTPTR EQU   RSCKERRW+4
RSCKERNO EQU   RSCKERR+2
@NM00076 EQU   RSREASW
REASSW2  EQU   RSREASW
REASSW1  EQU   RSREASW
@NM00075 EQU   @NM00074+3
RSVIAGRB EQU   @NM00074
@NM00073 EQU   RSVIAFLG
RSVIARRN EQU   RSVIAFLG
RSVIAUPD EQU   RSVIAFLG
RSVIAIS  EQU   RSVIAFLG
RSVIAFND EQU   RSVIAFLG
RSVIADUP EQU   RSVIAFLG
@NM00071 EQU   RSGETVIA+8
RSVIAIDX EQU   RSGETVIA+6
@NM00070 EQU   RSVIACRA+4
RSVIADSC EQU   RSVIACRA
@NM00069 EQU   @NM00067+3
RSEOVERR EQU   @NM00067+2
@NM00068 EQU   RSEOVFLG
RSEOVPHY EQU   RSEOVFLG
RSEOVLOG EQU   RSEOVFLG
RSEOVEND EQU   RSEOVFLG
RSEOVFND EQU   RSEOVFLG
RSEOVXIO EQU   @NM00067
RSCATARG EQU   @NM00065+1
@NM00066 EQU   @NM00065
RSCATRPL EQU   RSEOVWA+4
RSEOVRAB EQU   RSEOVWA
RSPVFLG3 EQU   @NM00062+3
@NM00064 EQU   RSPVFLG2
RSCHKCON EQU   RSPVFLG1
@NM00063 EQU   RSPVSETB
@NM00061 EQU   RSPVTTNN+15
RSPVSNT5 EQU   RSPVSNT+8
@NM00060 EQU   RSASSFLG+1
@NM00059 EQU   RSASSFL1
RSASSEPA EQU   RSASSFL1
RSASSPAS EQU   RSASSOC+14
RSASSEXT EQU   RSASSOC+12
RSASSEND EQU   RSASSOC+8
RSASSCIN EQU   RSASSOC+4
RSRCHK   EQU   RSROPT
RSREND   EQU   RSROPT
RSRCRA   EQU   RSRDS
RSRINIT  EQU   RSRTYPE
RSRDEL   EQU   RSRTYPE
RSRPOS   EQU   RSRTYPE
RSRADD   EQU   RSRTYPE
@NM00058 EQU   RSFLAGI2+1
RSUCDTN  EQU   RSFLAGI2+1
RSUCATN  EQU   RSFLAGI2+1
RSHAVECR EQU   RSFLAGI2+1
RSFDELET EQU   RSFLAGI2+1
RSSRNSCN EQU   RSFLAGI2+1
RSOPDYN  EQU   RSFLAGI2+1
RSUCCCR  EQU   RSFLAGI2
RSUCTWWF EQU   RSFLAGI2
RSUCWFTN EQU   RSFLAGI2
RSUCCATN EQU   RSFLAGI2
RSMEBYV  EQU   RSFLAGI2
RSMEOP   EQU   RSFLAGI2
RSMETRM  EQU   RSFLAGI2
RSCCVFND EQU   RSFLAGI2
@NM00057 EQU   RSFLAGI1
RSDUPNRR EQU   RSFLAGI1
RSRENRR  EQU   RSFLAGI1
RSREARR  EQU   RSFLAGI1
RSCREXC  EQU   RSFLAGN2
RSCREOV  EQU   RSFLAGN2
RSTERM   EQU   RSFLAGN2
RSALLC   EQU   RSFLAGN2
RSCRAUA  EQU   RSFLAGN2
RSWFCREA EQU   RSFLAGN2
RSCAEOV  EQU   RSFLAGN2
RSENUFCI EQU   RSFLAGN2
RSIGNR   EQU   RSFLAGN1
RSCARES  EQU   RSFLAGN1
RSREASND EQU   RSFLAGN1
RSCAOPN  EQU   RSFLAGN1
RSCROPN  EQU   RSFLAGN1
RSWFOPN  EQU   RSFLAGN1
RSWFDEF  EQU   RSFLAGN1
RSNCTS   EQU   RSNEWCAT+10
RSNCDEVT EQU   RSNEWCAT+6
RSNCVLSR EQU   RSNEWCAT
RSWFPS   EQU   RSWORK+957
RSWCATPS EQU   RSWORK+949
RSWCATNM EQU   RSWORK+905
RSDFVLSR EQU   RSWORK+875
RSDFVLCT EQU   RSWORK+874
RSWFDSN  EQU   RSWORK+830
RSWFDDNM EQU   RSWORK+822
RSMRPS   EQU   RSWORK+814
RSCATVLS EQU   RSWORK+808
RSCATNCI EQU   RSWORK+805
RSCATTN  EQU   RSWORK+761
RSCATPS  EQU   RSWORK+753
RSCATDSN EQU   RSWORK+709
RSCATDDN EQU   RSWORK+701
RSUCCINO EQU   RSWORK+697
RSNOBLKT EQU   RSWORK+694
RSIDX3   EQU   RSWORK+692
RSIDX2   EQU   RSWORK+690
RSCAFUCN EQU   RSWORK+684
RSORSTAT EQU   RSORVLLS+12
RSORNVOL EQU   RSORVLLS+6
RSORNDEV EQU   RSORVLLS+2
RSORVLCT EQU   RSORVLLS
RSCRAVLN EQU   RSWORK+664
RSCHCRAN EQU   RSWORK+660
RSCIREMC EQU   RSWORK+648
RSCATSCN EQU   RSWORK+644
RSSUBSSZ EQU   RSWORK+640
RSSUBSTP EQU   RSWORK+636
RSSUBENP EQU   RSWORK+632
RSSUBGRP EQU   RSWORK+628
RSSUBRC  EQU   RSWORK+624
RSPROCRC EQU   RSWORK+620
RSUGLEN  EQU   RSWORK+616
RSCRADD  EQU   RSWORK+608
RSCIXLTB EQU   RSWORK+604
RSCATUCB EQU   RSWORK+596
RSCATACB EQU   RSWORK+592
RSCAPAS  EQU   RSWORK+588
CTGFVPTR EQU   RSWORK+584
RSUCNXT  EQU   RSWORK+564
RSTNNXT  EQU   RSWORK+560
RSDUPNXT EQU   RSWORK+556
RSRENEXT EQU   RSWORK+552
RSECPA   EQU   RSWORK+548
RSECBF1  EQU   RSWORK+544
RSWFIOCS EQU   RSWORK+540
RSWFDS   EQU   RSWORK+528
RSWFPAS  EQU   RSWORK+524
RSWFDD   EQU   RSWORK+520
RSWCPAS  EQU   RSWORK+516
RSWCDS   EQU   RSWORK+512
RSMRPAS  EQU   RSWORK+508
RSGDT    EQU   RSWORK+504
RSXRREND EQU   RSWORK+500
RSXCIEND EQU   RSWORK+496
RSENTNXT EQU   RSWORK+492
RSENTFBK EQU   RSWORK+488
RSENTST  EQU   RSWORK+480
RSTNCHN  EQU   RSWORK+476
RSREASS  EQU   RSWORK+472
RSREASSN EQU   RSWORK+468
RSVOLLUS EQU   RSWORK+464
RSRESLUS EQU   RSWORK+456
RSVOLALL EQU   RSWORK+452
RSWFHURR EQU   RSWORK+448
RSWFNEXT EQU   RSWORK+444
RSWFSCND EQU   RSWORK+424
RSWFPRIM EQU   RSWORK+420
RSFPL    EQU   RSWORK+392
RSFDT    EQU   RSWORK+388
RSCURRN  EQU   RSWORK+384
RSCURCI  EQU   RSWORK+380
RSCREND  EQU   RSWORK+376
RSCANFCN EQU   RSWORK+368
RSCMRR   EQU   RSWORK+364
RSCACDE  EQU   RSWORK+360
RSAVNEXT EQU   RSWORK+356
RSAVAILN EQU   RSWORK+352
RS07RG12 EQU   RS07REGS+16
RS07RG11 EQU   RS07REGS+12
RS07RG10 EQU   RS07REGS+8
RS07RG09 EQU   RS07REGS+4
RS07RG08 EQU   RS07REGS
RS06RG12 EQU   RS06REGS+16
RS06RG11 EQU   RS06REGS+12
RS06RG10 EQU   RS06REGS+8
RS06RG09 EQU   RS06REGS+4
RS06RG08 EQU   RS06REGS
RS05RG12 EQU   RS05REGS+16
RS05RG11 EQU   RS05REGS+12
RS05RG10 EQU   RS05REGS+8
RS05RG09 EQU   RS05REGS+4
RS05RG08 EQU   RS05REGS
RS04RG12 EQU   RS04REGS+16
RS04RG11 EQU   RS04REGS+12
RS04RG10 EQU   RS04REGS+8
RS04RG09 EQU   RS04REGS+4
RS04RG08 EQU   RS04REGS
RS03RG12 EQU   RS03REGS+16
RS03RG11 EQU   RS03REGS+12
RS03RG10 EQU   RS03REGS+8
RS02RG12 EQU   RS02REGS+16
RS02RG11 EQU   RS02REGS+12
RS02RG10 EQU   RS02REGS+8
RS02RG09 EQU   RS02REGS+4
RS02RG08 EQU   RS02REGS
RS01RG12 EQU   RS01REGS+16
RS01RG11 EQU   RS01REGS+12
RS01RG10 EQU   RS01REGS+8
RS01RG09 EQU   RS01REGS+4
RS01RG08 EQU   RS01REGS
@NM00056 EQU   @NM00055
@NM00054 EQU   @NM00053
RSPTWKUG EQU   RSPSTACK+24
@NM00052 EQU   RSPSTACK+20
@NM00051 EQU   RSPSTACK+18
@NM00050 EQU   RSPSTACK+16
RSPTWKLN EQU   RSPSTACK+12
RSPTWKL  EQU   RSPSTACK+4
RSPTWKF  EQU   RSPSTACK
RSGDITUG EQU   RSGDITS+24
RSGDITNU EQU   @NM00048+1
@NM00049 EQU   @NM00048
RSGDITEN EQU   RSGDITS+18
@NM00047 EQU   RSGDITS+16
RSGDITLN EQU   RSGDITS+12
RSGDITL  EQU   RSGDITS+4
RSGDITF  EQU   RSGDITS
RSGCITUG EQU   RSGCITS+24
RSGCITNU EQU   @NM00045+1
@NM00046 EQU   @NM00045
RSGCITEN EQU   RSGCITS+18
@NM00044 EQU   RSGCITS+16
RSGCITLN EQU   RSGCITS+12
RSGCITL  EQU   RSGCITS+4
RSGCITF  EQU   RSGCITS
RSCRIOCS EQU   RSWORK+100
RSCPE8   EQU   RSWORK+96
RSCITDUM EQU   RSWORK+48
RSCANFCI EQU   RSWORK+44
RSCAIOCS EQU   RSWORK+40
RSCAHALC EQU   RSWORK+36
RSCAHACI EQU   RSWORK+32
RSCAFUCI EQU   RSWORK+28
RSCADS   EQU   RSWORK+24
RSCADD   EQU   RSWORK+20
RSAVAIL  EQU   RSWORK+8
RSALLAGP EQU   RSWORK+4
RSA      EQU   RSWORK
@NM00043 EQU   RESVOL+12
@NM00042 EQU   RESVLFLG
RESVLBAD EQU   RESVLFLG
RESVLLAS EQU   RESVLFLG
RESVLALE EQU   RESVLFLG
RESVLMNT EQU   RESVLFLG
RESVLUPD EQU   RESVOL+4
RESVLNXT EQU   RESVOL
VOLSRTS  EQU   VOLSERTB+20
VOLSRNTK EQU   VOLSERTB+12
CATIHRBA EQU   CATIEXT+16
CATILRBA EQU   CATIEXT+12
@NM00041 EQU   CATIEXT
@NM00039 EQU   IOCRCV
IOCRCVRA EQU   IOCRCV
IOCRCVXM EQU   IOCRCV
IOCVLN   EQU   IOCSEX+42
IOCDNM   EQU   IOCSEX+40
IOCDDN   EQU   IOCDLM
IOCMODEX EQU   IOCMOD
IOCMODRP EQU   IOCMOD
IOCMODXM EQU   IOCMOD
IOCMODUB EQU   IOCMOD
IOCMODRG EQU   IOCMOD
IOCMODDY EQU   IOCMOD
IOCMODRR EQU   IOCMOD
IOCMODPD EQU   IOCMOD
IOCINFR1 EQU   IOCINF
IOCINFCT EQU   IOCINF
IOCINFDO EQU   IOCINF
IOCINFAC EQU   IOCINF
IOCINFQX EQU   IOCINF
IOCINFND EQU   IOCINF
IOCINFAE EQU   IOCINF
IOCINFPT EQU   IOCINF
@NM00038 EQU   IOCDEV
IOCDEVUR EQU   IOCDEV
IOCDEVMT EQU   IOCDEV
IOCDEVDA EQU   IOCDEV
@NM00037 EQU   IOCFLG
IOCFLGSP EQU   IOCFLG
IOCFLGOE EQU   IOCFLG
IOCFLGOP EQU   IOCFLG
IOCFLGIO EQU   IOCFLG
IOCFLGEF EQU   IOCFLG
IOCFLGDF EQU   IOCFLG
IOCFLGEX EQU   IOCFLG
IOCSID   EQU   IOCSEX+28
IOCNIO   EQU   IOCSEX+24
@NM00036 EQU   IOCXPM+2
IOCEXL   EQU   IOCXPM
IOCEXA   EQU   IOCXAD
IOCWKA   EQU   IOCSEX+12
IOCLRP   EQU   IOCSEX+10
IOCCBL   EQU   IOCSEX+8
IOCDEC   EQU   IOCRPL
IOCCBA   EQU   IOCSEX
@NM00035 EQU   IODATA+64
IODAEI   EQU   IODATA+60
@NM00034 EQU   IODATA+56
IODIOX   EQU   IODATA+52
IODOCS   EQU   IODATA+48
IODICS   EQU   IODATA+44
IODOSO   EQU   IODATA+40
IODOSS   EQU   IODATA+36
IODEOD   EQU   IODATA+32
@NM00033 EQU   IODATA+30
@NM00032 EQU   IODATA+28
IODOEV   EQU   IODATA+24
IODIEV   EQU   IODATA+20
IODINC   EQU   IODSID+2
IODMID   EQU   IODSID
IODXTN   EQU   IODATA+12
IODADD   EQU   IODATA+8
IODMSG   EQU   IODATA+4
IODIOC   EQU   IODATA
WFILEVAL EQU   WFILE+10
WFILELEN EQU   WFILE+9
WFILEPAS EQU   WFILE+1
WFILEPLN EQU   WFILE
CRADVVAL EQU   CRADV+1
CRADVLEN EQU   CRADV
CRAVLVAL EQU   CRAVL+1
CRAVLLEN EQU   CRAVL
CRADNVAL EQU   CRADN+1
CRADNLEN EQU   CRADN
WCATVAL  EQU   WCAT+21
WCATLEN  EQU   WCAT+20
WCATMEM  EQU   WCAT+12
WCATMLN  EQU   WCAT+11
WCATFUQ  EQU   WCATFLG
WCATPOS  EQU   WCAT+9
WCATPAS  EQU   WCAT+1
WCATPLN  EQU   WCAT
MRPWVAL  EQU   MRPW+1
MRPWLEN  EQU   MRPW
CATDNVAL EQU   CATDN+1
CATDNLEN EQU   CATDN
CATNMVAL EQU   CATNM+21
CATNMLEN EQU   CATNM+20
CATNMMEM EQU   CATNM+12
CATNMMLN EQU   CATNM+11
CATNMFUQ EQU   CATNMFLG
CATNMPOS EQU   CATNM+9
CATNMPAS EQU   CATNM+1
CATNMPLN EQU   CATNM
@NM00031 EQU   DMPARY+15
DMPARYTP EQU   DMPARY+14
DMPARYEX EQU   DMPARY+12
DMPARYIC EQU   DMPARY+10
DMPARYSZ EQU   DMPARY+8
DMPARYNM EQU   DMPARY
@NM00030 EQU   DMPITM+15
DMPITMTP EQU   DMPITM+14
DMPITMLN EQU   DMPITM+12
DMPITMPT EQU   DMPITM+8
DMPITMNM EQU   DMPITM
@NM00029 EQU   ERCNVTAB+24
ERDARBPT EQU   ERCPLPT
ERDYNRC  EQU   ERCATRC
ERDSNM   EQU   ERCNVTAB+12
@NM00028 EQU   ERCNVTAB+4
@NM00027 EQU   ERCNVTAB+3
@NM00026 EQU   EROSOPER
EROSUCDX EQU   EROSOPER
EROSCATL EQU   EROSOPER
@NM00025 EQU   EROPER
ERCATAL  EQU   EROPER
ERCATDL  EQU   EROPER
ERCATDE  EQU   EROPER
ERCATLC  EQU   EROPER
@NM00024 EQU   ERTYPE
ERDYNAL  EQU   ERTYPE
EROSCAT  EQU   ERTYPE
ERCATLG  EQU   ERTYPE
@NM00023 EQU   FMTCNVF+1
FMTAR    EQU   FMTCNVF+1
FMTBS    EQU   FMTCNVF+1
FMTSS    EQU   FMTCNVF+1
FMTAL    EQU   FMTCNVF+1
FMTZS    EQU   FMTCNVF+1
@NM00022 EQU   FMTCNVF
FMTPU    EQU   FMTCNVF
FMTBD    EQU   FMTCNVF
FMTBHD   EQU   FMTCNVF
FMTBHA   EQU   FMTCNVF
FMTBH    EQU   FMTCNVF
FMTOLEN  EQU   FMTLIST+8
FMTRIO   EQU   FMTOCOL
FMTSPT   EQU   FMTSTO
FMTSTL   EQU   FMTILEN
@NM00021 EQU   FMTFLGS+1
FMTSMSG  EQU   FMTFLGS+1
FMTHDF   EQU   FMTFLGS
FMTDFF   EQU   FMTFLGS
FMTSTF   EQU   FMTFLGS
FMTREPF  EQU   FMTFLGS
FMTBDF   EQU   FMTFLGS
FMTIDF   EQU   FMTFLGS
FMTSCF   EQU   FMTFLGS
FMTEOLF  EQU   FMTFLGS
DARGDTM  EQU   DARGARY+4
DARGPCT  EQU   DARGINL
DARGREP  EQU   DARGINS
@NM00020 EQU   DARGLIST+19
DARGIND  EQU   DARGLIST+18
DARGRETL EQU   DARGLIST+16
DARGCNT  EQU   DARGLIST+14
DARGILP  EQU   DARGLIST+12
DARGSENT EQU   DARGSTID+3
DARGSMOD EQU   DARGSTID
DARGRETP EQU   DARGLIST+4
DARGDBP  EQU   DARGLIST
@NM00019 EQU   IOINFOPT
IOINFLUB EQU   IOINFOPT
IOINFTMS EQU   IOINFOPT
IOINFSUP EQU   IOINFOPT
IOINFDSN EQU   IOINFOPT
IOINFVOL EQU   IOINFOPT
IOINFDVT EQU   IOINFOPT
OPNSTRNO EQU   OPNAGL+43
@NM00018 EQU   OPNOPT2
OPNOPTNM EQU   OPNOPT2
OPNOPTAS EQU   OPNOPT2
@NM00017 EQU   OPNDSO
OPNDSOPO EQU   OPNDSO
OPNDSOIS EQU   OPNDSO
OPNDSOAM EQU   OPNDSO
OPNREC   EQU   OPNAGL+32
OPNDEVIX EQU   OPNDEV+4
OPNDEVDT EQU   OPNDEV
OPNCBP   EQU   OPNAGL+20
OPNPWA   EQU   OPNAGL+12
OPNMODRP EQU   OPNMOD
OPNMODUB EQU   OPNMOD
OPNMODRS EQU   OPNMOD
OPNMODAX EQU   OPNMOD
OPNMODRR EQU   OPNMOD
OPNMODRC EQU   OPNMOD
OPNMODAC EQU   OPNMOD
OPNMODPD EQU   OPNMOD
OPNTYPSY EQU   OPNTYP
OPNTYPRV EQU   OPNTYP
OPNTYPEX EQU   OPNTYP
OPNTYPRA EQU   OPNTYP
OPNTYPXM EQU   OPNTYP
OPNTYPCI EQU   OPNTYP
OPNTYPSO EQU   OPNTYP
OPNTYPSI EQU   OPNTYP
@NM00016 EQU   OPNRFM
OPNRFMBK EQU   OPNRFM
OPNRFMSF EQU   OPNRFM
OPNRFMUN EQU   OPNRFM
OPNRFMVR EQU   OPNRFM
OPNRFMFX EQU   OPNRFM
OPNOPTSK EQU   OPNOPT
OPNOPTDR EQU   OPNOPT
OPNOPTCR EQU   OPNOPT
OPNOPTKS EQU   OPNOPT
OPNOPTUP EQU   OPNOPT
OPNOPTOT EQU   OPNOPT
IOCTSML  EQU   IOCREL+2
IOCTPML  EQU   IOCREL
IOCWORK  EQU   IOCSTR+56
IOCRRN   EQU   IOCSTR+52
IOCPNM   EQU   IOCNWM+2
IOCPTL   EQU   IOCNWM
IOCKYA   EQU   IOCMEM
IOCVRC   EQU   IOCTTR
IOCCBP   EQU   IOCSTR+36
IOCDSN   EQU   IOCSTR+32
IOCHURBA EQU   IOCSTR+28
IOCVOLSR EQU   IOCSTR+22
@NM00015 EQU   IOCMSG
IOCMSGSM EQU   IOCMSG
IOCMSGAE EQU   IOCMSG
IOCMSGCE EQU   IOCMSG
IOCMSGOE EQU   IOCMSG
IOCMSGOP EQU   IOCMSG
IOCCHPKG EQU   IOCMSG
IOCCHPKE EQU   IOCMSG
IOCCHPNU EQU   IOCCHP
IOCCHPUP EQU   IOCCHP
IOCCHPBK EQU   IOCCHP
IOCCHPCR EQU   IOCCHP
IOCCHPKS EQU   IOCCHP
IOCCHPSK EQU   IOCCHP
IOCCHPDR EQU   IOCCHP
IOCCHPSQ EQU   IOCCHP
IOCMACER EQU   IOCMAC2
IOCMACPA EQU   IOCMAC2
IOCMACEN EQU   IOCMAC2
IOCMACCP EQU   IOCMAC2
IOCMACRR EQU   IOCMAC2
IOCMACAS EQU   IOCMAC2
IOCMACSK EQU   IOCMAC2
@NM00014 EQU   IOCMAC
IOCMACCC EQU   IOCMAC
IOCMACDR EQU   IOCMAC
IOCMACBK EQU   IOCMAC
IOCMACCR EQU   IOCMAC
IOCMACUP EQU   IOCMAC
IOCMACOT EQU   IOCMAC
IOCMACIN EQU   IOCMAC
@NM00013 EQU   IOCRFM
IOCRFMBK EQU   IOCRFM
IOCRFMSF EQU   IOCRFM
IOCRFMUN EQU   IOCRFM
IOCRFMVR EQU   IOCRFM
IOCRFMFX EQU   IOCRFM
@NM00012 EQU   IOCDSO
IOCDSOPO EQU   IOCDSO
IOCDSOIS EQU   IOCDSO
IOCDSOPS EQU   IOCDSO
IOCDSOAM EQU   IOCDSO
IOCRKP   EQU   IOCSTR+13
IOCKYL   EQU   IOCSTR+12
IOCTRN   EQU   IOCSTR+8
IOCDLN   EQU   IOCSTR+4
UNITVTOC EQU   UNITABL+7
@NM00011 EQU   UNITSTAT
UNITUSHR EQU   UNITSTAT
UNITXSHR EQU   UNITSTAT
UNITISHR EQU   UNITSTAT
UNITUA   EQU   @NM00010+1
UNITCHA  EQU   @NM00010
UNITUCB  EQU   UNITABL
ALLUNCNT EQU   ALLAGL+30
ALLVLCNT EQU   ALLAGL+29
@NM00009 EQU   ALLOPT
ALLOPTUN EQU   ALLOPT
ALLOPTPV EQU   ALLOPT
ALLOPTDS EQU   ALLOPT
ALLOPTVL EQU   ALLOPT
@NM00008 EQU   ALLORG+1
ALLORGVS EQU   ALLORG+1
@NM00007 EQU   ALLORG+1
ALLORGGS EQU   ALLORG+1
ALLORGUN EQU   ALLORG
ALLORGPO EQU   ALLORG
ALLORGMQ EQU   ALLORG
ALLORGCQ EQU   ALLORG
ALLORGCX EQU   ALLORG
ALLORGDA EQU   ALLORG
ALLORGPS EQU   ALLORG
ALLORGIS EQU   ALLORG
ALLDSPUN EQU   ALLDSP
ALLDSPCG EQU   ALLDSP
ALLDSPDE EQU   ALLDSP
ALLDSPKP EQU   ALLDSP
@NM00006 EQU   ALLDSP
ALLSTSOD EQU   ALLSTS
ALLSTSMD EQU   ALLSTS
ALLSTSNW EQU   ALLSTS
ALLSTSSR EQU   ALLSTS
@NM00005 EQU   ALLSTS
ALLPWD   EQU   ALLAGL+20
ALLVLP   EQU   ALLAGL+16
ALLULP   EQU   ALLAGL+12
ALLDDN   EQU   ALLAGL+4
ALLDSN   EQU   ALLAGL
CIRPID   EQU   CIRAGL+28
CIRPWD   EQU   CIRAGL+24
CIRCAT   EQU   CIRAGL+20
CIRWKP   EQU   CIRAGL+16
CIRTLR   EQU   CIRAGL+12
CIRHDR   EQU   CIRAGL+8
CIRTLN   EQU   CIRAGL+6
CIRHLN   EQU   CIRAGL+4
@NM00004 EQU   CIRAGL+1
@NM00003 EQU   CIRTYPE
CIRTYPAQ EQU   CIRTYPE
CIRTYP1Q EQU   CIRTYPE
NEWID1   EQU   TRACE1+95
CALLID   EQU   OLDERID1+90
@NM00002 EQU   OLDERID1
GDTECT   EQU   GDTTBL+188
GDTPSB   EQU   GDTTBL+184
GDTUPT   EQU   GDTTBL+180
GDTCMB   EQU   GDTTBL+176
GDTSPR   EQU   GDTTBL+168
@NM00001 EQU   GDTTBL+160
GDTABH   EQU   GDTTBL+156
GDTABT   EQU   GDTTBL+152
GDTTOH   EQU   GDTTBL+120
GDTRIP   EQU   GDTTBL+116
GDTSAH   EQU   GDTTBL+32
GDTTPH   EQU   GDTTBL+28
GDTRIH   EQU   GDTTBL+24
GDTSTH   EQU   GDTTBL+20
GDTDBH   EQU   GDTTBL+16
GDTPRM   EQU   GDTTBL+4
GDTHDR   EQU   GDTTBL
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00743 EQU   @RC00729
@RC00814 EQU   @RC00809
@RC00820 EQU   @RC00809
@RF00826 EQU   @RC00809
@RF01330 EQU   @RC01328
@RC01460 EQU   @RC01457
@RF01515 EQU   @RC01457
@RF02057 EQU   @RC02044
@PB00018 EQU   @EL00001
@ENDDATA EQU   *
         END   IDCRS03,(C'PLS0731',0701,77119)
