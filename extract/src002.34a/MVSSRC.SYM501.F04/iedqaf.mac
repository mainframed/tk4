AF01     TITLE '''IEDQAF'' - INSERT DATA ROUTINE'
IEDQAF   CSECT
         SPACE 3
*CHANGE ACTIVITY = AS FOLLOWS:
*************** MICROFICHE FLAGS **************************** SUPT CODE
*A012184-012192,174000,200400-203600,242000,448600-451000,497000 S22025
*A502000,638000-647000,664400-680800,727000,730000,892600-895300 S22025
*C012675,012738,012783,012990,013116,600000,604000,836000        S22025
*D012189,236000-248000,496000-504000,640000-648000,668000-680000 S22025
*D728000,732000                                                  S22025
*C669400-669700                                                 SA56295
         SPACE 3
***********************************************************************
*                                                                     *
*TITLE: IEDQAF - INSERT DATA ROUTINE                                  *
*                                                                     *
*MODULE NAME = IEDQAF                                                 *
*                                                                     *
*DESCRIPTIVE NAME = INSERT DATA ROUTINE                               *
*                                                                     *
*COPYRIGHT = 'NONE'                                                   *
*                                                                     *
*STATUS: CHANGE LEVEL 5                                               *
*                                                                     *
*FUNCTION -- INSERTS DATA INTO THE BUFFER OR SHIFTS DATA LEFTWARDS    *
*   WITHIN THE BUFFER.                                                *
*                                                                     *
*   THE HEART OF THE INSERT DATA ROUTINE IS AN INSERT SUBROUTINE      *
*   WHICH INSERTS DATA ACCORDING TO THE FOLLOWING PARAMETERS PASSED   *
*   TO IT: (1) THE OFFSET INTO THE BUFFER AT WHICH DATA IS TO BE      *
*   INSERTED IS INDICATED BY A PAIR OF OFFSETS PASSED IN THE RECB,    *
*   NAMELY THE PREFIX DATA OFFSET AND THE PREFIX INSERT OFFSET. THE   *
*   PREFIX DATA OFFSET MINUS THE PREFIX INSERT OFFSET SPECIFIES THE   *
*   OFFSET FROM THE BEGINNING OF THE FIRST UNIT AT WHICH DATA IS TO   *
*   BE INSERTED. (2) THE LENGTH OF THE DATA TO BE INSERTED IS         *
*   PASSED IN THE SECOND AVT PARAMETER AREA (AVTPARM3). (3) DATA TO   *
*   BE INSERTED MAY BE A STRING OF CHARACTERS WHOSE ADDRESS IS        *
*   PASSED IN AVTPARM3, OR IT MAY BE A STRING OF IDENTICAL CHARAC-    *
*   TERS (NORMALLY, IDLE CHARACTERS, HENCE CALLED IDLE CHARACTERS     *
*   HERE), IN WHICH CASE THE CHARACTER ITSELF IS PASSED IN            *
*   AVTPARM3. THIS ROUTINE CHECKS TO SEE IF THE BUFFER CONTAINS  S22025
*   EOB AND UPDATES OFFSET TO EOB APPROPRIATELY ON DELETION OR   S22025
*   INSERTION OF DATA.                                           S22025
*                                                                     *
*   IT OFTEN HAPPENS THAT THE DATA TO BE INSERTED IS ITSELF LOCATED   *
*   IN THE BUFFER. IN THIS CASE THE INSERTION CONSTITUTES A SHIFT     *
*   OF DATA LEFTWARDS IN THE BUFFER.                                  *
*                                                                     *
*   INSERT DATA SUBROUTINE:                                           *
*   THE OFFSET AT WHICH DATA IS TO BE INSERTED IS COMPUTED BY         *
*   PICKING UP THE PREFIX DATA OFFSET AND SUBTRACTING THE PREFIX      *
*   INSERT OFFSET FROM IT. THIS OFFSET IS PASSED TO THE ADDRESS       *
*   FINDER ROUTINE (IEDQAL), REQUESTING THAT THE END-OF-UNIT          *
*   ADDRESS BE RETURNED IN ADDITION TO THE INSERT ADDRESS. ON         *
*   RETURN, THE COUNT OF BYTES FROM THE INSERT ADDRESS TO THE END     *
*   OF THE UNIT IS COMPUTED, AND THE LENGTH OF DATA TO BE INSERTED    *
*   IS PICKED UP FROM AVTPARM3. THE SUBROUTINE THEN TESTS IF THE      *
*   INSERT DATA IS A STRING OF IDLES OR DATA WHOSE ADDRESS IS         *
*   PASSED.                                                           *
*                                                                     *
*   IF THE DATA TO BE INSERTED IS A CHARACTER STRING WHOSE ADDRESS    *
*   IS PASSED, THAT ADDRESS IS LOADED FROM AVTPARM3. THE SUBROUTINE   *
*   TESTS IF THE NUMBER OF BYTES TO THE END OF THE UNIT IS LESS       *
*   THAN THE TOTAL LENGTH OF DATA TO BE INSERTED.  IF IT IS NOT,      *
*   ALL THE DATA WILL FIT INTO THE CURRENT UNIT, AND IT IS MOVED      *
*   THERE. IF ALL DATA WILL NOT FIT INTO THE CURRENT UNIT, ALL THE    *
*   DATA THAT WILL FIT IS MOVED THERE. THEN THE ADDRESS OF THE NEXT   *
*   UNIT IS ACCESSED AND THE REMAINING DATA IS MOVED INTO THAT        *
*   UNIT. THE SUBROUTINE THEN EXITS TO ITS CALLER.                    *
*                                                                     *
*   IF THE DATA TO BE INSERTED IS A STRING OF IDLES, THE IDLE CHAR-   *
*   ACTER IS PICKED UP FROM AVTPARM3. THE SUBROUTINE TESTS IF THE     *
*   NUMBER OF BYTES TO THE END OF THE UNIT IS LESS THAN THE TOTAL     *
*   NUMBER OF IDLES TO BE INSERTED. IF IT IS NOT, ALL THE IDLES       *
*   WILL FIT INTO THE CURRENT UNIT. A STORE-CHARACTER LOOP INSERTS    *
*   IDLES INTO THE UNIT UNTIL THE NUMBER OF IDLES SPECIFIED IS        *
*   INSERTED. IF ALL THE IDLES WILL NOT FIT INTO THE CURRENT UNIT,    *
*   ANOTHER STORE-CHARACTER LOOP INSERTS IDLES TO THE END OF THE      *
*   CURRENT UNIT. THEN THE ADDRESS OF THE NEXT UNIT IS ACCESSED,      *
*   AND THE FIRST STORE-CHARACTER LOOP INSERTS IDLES INTO THAT UNIT   *
*   UNTIL THE NUMBER OF IDLES SPECIFIED IS INSERTED. THE SUBROUTINE   *
*   THEN EXITS TO ITS CALLER.                                         *
*                                                                     *
*   ENTRIES TO THE INSERT DATA ROUTINE:                               *
*   THE INSERT DATA ROUTINE MAY BE ENTERED TO PERFORM ANY ONE OF      *
*   FOUR FUNCTIONS: (1) TO INSERT DATA AS SPECIFIED AND RETURN        *
*   IMMEDIATELY; (2) TO INSERT DATA AS SPECIFIED, ADJUST THE PREFIX   *
*   INSERT OFFSET BY THE LENGTH OF DATA INSERTED AND RETURN; (3) TO   *
*   SHIFT DATA ACROSS SEVERAL UNITS AS SPECIFIED AND RETURN; AND      *
*   (4) TO EXPAND THE BUFFER BY SHIFTING DATA LEFTWARDS INTO THE      *
*   RESERVE CHARACTERS AREA. THE FUNCTION REQUESTED IS INDICATED      *
*   BY FLAGS SET IN THE FIRST AVT PARAMETER AREA (AVTPARM).           *
*                                                                     *
*   (1) INSERT AND RETURN FUNCTION:                                   *
*   THE INSERT DATA ROUTINE LINKS TO THE INSERT SUBROUTINE TO         *
*   PERFORM THE SPECIFIED INSERTION. ON RETURN, EXIT IS MADE TO       *
*   THE CALLER VIA THE RETURN INTERFACE ROUTINE (IEDQUI+4).      S22025
*                                                                     *
*   (2) INSERT, ADJUST AND RETURN FUNCTION:                           *
*   THE INSERT DATA ROUTINE LINKS TO THE INSERT SUBROUTINE TO         *
*   PERFORM THE SPECIFIED INSERTION. ON RETURN, THE PREFIX INSERT     *
*   OFFSET IS ACCESSED, DECREMENTED BY THE TOTAL LENGTH OF DATA       *
*   INSERTED AND STORED BACK IN THE RECB. EXIT IS MADE TO THE         *
*   CALLER VIA THE RETURN INTERFACE ROUTINE (IEDQUI+4).          S22025
*                                                                     *
*   (3) MULTIPLE-UNIT SHIFT  FUNCTION:                                *
*   THE PREFIX DATA OFFSET IS ACCESSED FROM THE RECB, AND A SHIFT-    *
*   DATA LOOP IS ENTERED. IN THIS LOOP, THE PREFIX DATA OFFSET IS     *
*   PASSED TO THE ADDRESS FINDER ROUTINE (ENTERLOP), REQUESTING THAT  *
*   THE END-OF-UNIT ADDRESS BE RETURNED IN ADDITION TO THE DATA       *
*   ADDRESS. ON RETURN, THE COUNT OF BYTES FROM THE DATA   ADDRESS    *
*   TO THE END OF THE UNIT IS COMPUTED AND COMPARED TO THE TOTAL      *
*   LENGTH OF DATA TO BE INSERTED. IF THE COUNT OF BYTES TO THE END   *
*   OF THE UNIT IS GREATER, IT IS SET IN AVTPARM3; OTHERWISE THE      *
*   TOTAL LENGTH OF DATA TO BE INSERTED IS SET IN AVTPARM3. THEN      *
*   THE DATA ADDRESS IS SET IN AVTPARM3.  A NEW DATA OFFSET IS        *
*   CALCULATED, EQUAL TO THE CURRENT DATA OFFSET PLUS THE LENGTH AS   *
*   SET IN AVTPARM3, AND THE TOTAL LENGTH OF DATA TO BE INSERTED      *
*   IS DECREMENTED BY THE VALUE SET IN AVTPARM3. (NOTE THAT THIS      *
*   MAY REDUCE IT TO ZERO.) THE ROUTINE THEN LINKS TO THE INSERT      *
*   SUBROUTINE TO SHIFT ALL THE DATA IN THE CURRENT UNIT.             *
*                                                                     *
*   ON RETURN, THE REMAINING LENGTH OF DATA IS TESTED FOR A VALUE     *
*   OF ZERO. IF IT IS NOT ZERO, DATA IN THE NEXT UNIT MUST BE         *
*   SHIFTED AS WELL. THE NEW DATA OFFSET (WHICH IS IN THIS CASE       *
*   THE OFFSET TO THE START OF DATA IN THE NEXT UNIT) IS SET AS       *
*   THE PREFIX DATA OFFSET, AND THE SHIFT-DATA LOOP IS ENTERED        *
*   AGAIN.                                                            *
*                                                                     *
*   WHEN THE REMAINING LENGTH OF DATA IS REDUCED TO ZERO, A RETURN    *
*   CODE OF ZERO IS SET IN REGISTER 15 AND RETURN IS MADE TO THE      *
*   CALLER VIA THE RETURN INTERFACE ROUTINE (IEDQUI+4).          S22025
*                                                                     *
*   NOTE: IN THE MULTIPLE-UNIT SHIFT FUNCTION, THE PREFIX INSERT      *
*   OFFSET REMAINS ZERO THROUGHOUT THE ROUTINE.                       *
*                                                                     *
*   (4) EXPAND BUFFER FUNCTION:                                       *
*   THE EXPAND LENGTH REQUESTED IS ACCESSED FROM THE PARAMETER        *
*   LIST AND SET IN THE RECB AS THE PREFIX INSERT OFFSET. THE         *
*   NUMBER OF RESERVE CHARACTERS CURRENTLY IN THE BUFFER IS           *
*   ACCESSED FROM THE LCB (LCBISZE) AND COMPARED WITH THE EXPAND      *
*   LENGTH REQUESTED. IF AN EXPAND LENGTH GREATER THAN THE NUMBER     *
*   OF RESERVE CHARACTERS IS REQUESTED, THE EXPANSION CANNOT BE       *
*   PERFORMED. A RETURN CODE OF X'04' IS SET IN REGISTER 15 AND       *
*   RETURN IS MADE TO THE CALLER VIA THE RETURN INTERFACE ROUTINE     *
*   (IEDQUI+4).                                                  S22025
*                                                                     *
*   IF THE EXPANSION CAN BE PERFORMED, THE PREFIX DATA OFFSET IS      *
*   SET TO THE SIZE OF THE PREFIX PLUS THE NUMBER OF RESERVE CHAR-    *
*   ACTERS PLUS ONE. THE LENGTH OF DATA TO BE SHIFTED IS CALCULATED   *
*   AS THE CURRENT SETTING OF THE SCAN POINTER MINUS THE PREFIX       *
*   DATA OFFSET: THIS LENGTH WILL LATER BE SET IN AVTPARM3. THE       *
*   NUMBER OF RESERVE CHARACTERS IS DECREMENTED BY THE REQUESTED      *
*   EXPAND LENGTH AND SET BACK IN LCBISZE.                            *
*                                                                     *
*   THE SCB SECONDARY DESTINATION FIELD (SCBMRFSD) IS TESTED FOR A    *
*   VALUE OF ZERO. IF IT IS NOT ZERO, MULTIPLE ROUTING HAS BEEN       *
*   REQUESTED, AND THE OFFSET IN THIS FIELD MUST BE ADJUSTED FOR      *
*   THE EXPANSION ABOUT TO BE PERFORMED. THE FIELD IS LOADED,         *
*   DECREMENTED BY THE EXPAND LENGTH AND STORED BACK.                 *
*                                                                     *
*   THE SHIFT-DATA LOOP IS THEN ENTERED, AND PROCESSING PROCEEDS      *
*   AS DESCRIBED IN THE MULTIPLE-UNIT SHIFT FUNCTION DESCRIPTION.     *
*                                                                     *
*ENTRY POINTS --                                                      *
*       'IEDQAF01' TO INSERT DATA INTO THE BUFFER OR SHIFT DATA       *
*   LEFTWARDS WITHIN THE BUFFER.  CALLING SEQUENCE FROM USER          *
*   INTERFACE IS:                                                     *
*                                                                     *
*        L     R12,AVTMSGS-1            GET ADDR OF VCON TABLE        *
*        IC    R15,AVTEZERO(,R1)        GET INDEX TO ROUTINE ADDR     *
*        L     R12,AVTEZERO(R12,R15)    GET ROUTINE ADDRESS           *
*        BR    R12                      EXIT TO ROUTINE               *
*                                                                     *
*INPUT --                                                             *
*   REGISTER 1 - THE ADDRESS OF A PARAMETER LIST GENERATED BY A       *
*   MACRO EXPANSION OR BUILT BY A CALLING ROUTINE. PARAMETER LIST     *
*   FORMAT IS:                                                        *
*                                                                     *
*        EXPAND BUFFER FUNCTION              INDEX FLAGS:             *
*        *****************                                            *
*        * INDEX *EXPAND *                   X'00' - INSERT, ADJUST   *
*        *  TO   * LENGTH*                           & RETURN         *
*        *   AF  *       *                                            *
*        *****************                   X'01' - INSERT &         *
*                                                    RETURN           *
*        OTHER FUNCTIONS (ALWAYS IN AVTPARM)                          *
*        *****************                   X'02' - MULTIPLE-UNIT    *
*        * INDEX * DATA  *                           SHIFT            *
*        *  TO   *  TYPE *                                            *
*        *   AF  *  FLAG *                   X'03' - EXPAND BUFFER    *
*        *****************                                            *
*                                                                     *
*        DATA TYPE FLAGS= X'00' - DATA ADDRESS                        *
*                         X'01' - IDLE CHARACTERS                     *
*                                                                     *
*   REGISTER 3 - ADDRESS OF THE SCB.                                  *
*                                                                     *
*   REGISTER 4 - ADDRESS OF THE LCB.                                  *
*                                                                     *
*   REGISTER 6 - ADDRESS OF THE CURRENT BUFFER.                       *
*                                                                     *
*   REGISTER 9 - ADDRESS OF THE AVT.                                  *
*                                                                     *
*   REGISTER 12 - ENTRY POINT AND BASE REGISTER FOR THIS ROUTINE.     *
*                                                                     *
*   SECOND AVT PARAMETER AREA (AVTPARM3) - ON ENTRY FOR INSERT AND    *
*   RETURN FUNCTION OR INSERT, ADJUST AND RETURN FUNCTION,            *
*   CONTAINS A PARAMETER LIST IN THIS FORMAT:                         *
*                                                                     *
*   DATA TYPE = CHARACTER STRING                                      *
*   *********************************                                 *
*   *LNG OF *        ADDRESS        *                                 *
*   * INSERT*          OF           *                                 *
*   *  DATA *   CHARACTER STRING    *                                 *
*   *********************************                                 *
*                                                                     *
*   DATA TYPE = IDLE CHARACTERS                                       *
*   *********************************                                 *
*   *LNG OF * IDLE  *               *                                 *
*   * INSERT* CHAR- *   (UNUSED)    *                                 *
*   *  DATA * ACTER *               *                                 *
*   *********************************                                 *
*                                                                     *
*   BUFFER RECB - FOR ALL BUT EXPAND BUFFER FUNCTION, CONTAINS A      *
*   PREFIX INSERT OFFSET (HALFWORD AT RECB + 4) AND A PREFIX DATA     *
*   OFFSET (HALFWORD AT RECB + 6), SUCH THAT THE DATA OFFSET MINUS    *
*   THE INSERT OFFSET INDICATES THE OFFSET FROM THE START OF DATA     *
*   IN THE FIRST BUFFER AT WHICH INSERTION OF DATA, OR TO WHICH       *
*   SHIFTING OF DATA, IS TO START.                                    *
*                                                                     *
*OUTPUT --                                                            *
*   REGISTER 15 - FOR EXPAND BUFFER FUNCTION ONLY, RETURN CODE.       *
*   VALUE IS X'00' FOR SUCCESSFUL COMPLETION AND X'04' FOR INSUFFI-   *
*   CIENT RESERVE CHARACTERS.                                         *
*                                                                     *
*EXTERNAL REFERENCES --                                               *
*   'IEDQAL' - ADDRESS FINDER ROUTINE.                                *
*                                                                     *
*   'IEDQLM' - RETURN INTERFACE ROUTINE.                              *
*                                                                     *
*   AVT - ADDRESS VECTOR TABLE.                                       *
*                                                                     *
*   BUFFER CURRENTLY BEING PROCESSED.                                 *
*                                                                     *
*   LCB - LINE CONTROL BLOCK.                                         *
*                                                                     *
*   SCB - STATION CONTROL BLOCK.                                      *
*                                                                     *
*EXITS, NORMAL -- SUCCESSFUL COMPLETION. DATA IS INSERTED IN THE      *
*   BUFFER, OR SHIFTED LEFTWARDS IN THE BUFFER, AS SPECIFIED. FOR     *
*   EXPAND BUFFER FUNCTION, REGISTER 15 CONTAINS A RETURN CODE OF     *
*   X'00'.                                                            *
*                                                                     *
*EXITS, ERROR -- FOR EXPAND BUFFER FUNCTION ONLY, INSUFFICIENT        *
*   RESERVE CHARACTERS ARE PRESENT IN THE BUFFER. REGISTER 15 CON-    *
*   TAINS A RETURN CODE OF X'04'.                                     *
*                                                                     *
*TABLES/WORK AREAS -- N/A.                                            *
*                                                                     *
*ATTRIBUTES -- SERIALLY REUSABLE, REFRESHABLE, ENABLED,               *
*   RESIDENT, PROBLEM PROGRAM MODE.                                   *
*                                                                     *
*NOTES -- THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON AN        *
*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *
*                                                                     *
***********************************************************************
         EJECT
********* REGISTER EQUATES *********
         SPACE
R0       EQU   0                        WORK REGISTER
         SPACE
R1       EQU   1                        PARAMETER LIST ADDR
         SPACE
RWORK2   EQU   2                        WORK REGISTER
         SPACE
RSCB3    EQU   3                        SCB ADDRESS
RFROM3   EQU   3                        INSERT DATA ADDRESS
RCHAR3   EQU   3                        IDLE CHARACTER REGISTER
         SPACE
RLCB4    EQU   4                        ADDRESS OF LCB
RUNIT4   EQU   4                        ADDRESS OF CURRENT UNIT
         SPACE
RSCAN5   EQU   5                        ADDR OF INSERT LOCATION
         SPACE
RPREFIX  EQU   6                        ADDR OF RECEIVING UNIT
         SPACE
ROFF7    EQU   7                        DATA OFFSET REGISTER
         SPACE
RLIM8    EQU   8                        TOTAL SHIFT LENGTH REGISTER
         SPACE
RAVT9    EQU   9                        ADDR OF AVT
         SPACE
RLOCRTN  EQU   10                       LOCAL RETURN REGISTER
         SPACE
REX11    EQU   11                       LENGTH OF INSERT DATA
         SPACE
RBASE    EQU   12                       ENTRY POINT ADDRESS
*                                         AND BASE REGISTER
R13      EQU   13                       SAVE AREA ADDRESS
         SPACE
R14      EQU   14                       RETURN REGISTER
R15      EQU   15                       RETURN CODE REGISTER
         SPACE
********* OTHER EQUATES *********
         SPACE
ONE      EQU   1                        INCREMENT VALUE OF ONE
         SPACE
INSOFF   EQU   4                        OFFSET TO INSERT OFFSET
FOUR     EQU   4                        OFFSET USED ON RETURN    S22025
DATOFF   EQU   6                        OFFSET TO DATA OFFSET
TWELVE   EQU   12                       OFFSET FOR +4 SAVE ADDR  S22025
SIXTEEN  EQU   16                       OFFSET FOR +4 SAVE PTR   S22025
         SPACE
TESTFLAG EQU   X'03'                    ENTRY FLAGS
SHIFUNIT EQU   X'02'                    ONE-UNIT SHIFT REQUEST
IDLEFLAG EQU   X'01'                    INSERT IDLES FLAG
PARMINDX EQU   0                        INDEX BYTE
PARMLEN  EQU   1                        SHIFT LENGTH
FLAGOFF  EQU   X'00'                    TURN OFF FLAG            S22025
CHARDAT  EQU   X'80'                    DATA=CHAR STRING         S22025
IDLCT    EQU   X'40'                    DATA=COUNT OF INLES      S22025
DATCONT  EQU   X'20'                    DATA=CONTRACT            S22025
CHARTO   EQU   X'10'                    TO DELIMITER = CHAR STRINS22025
OFFSTO   EQU   X'08'                    TO DELIMITER=OFFSET      S22025
EXTTO    EQU   X'04'                    TO DELIMITER=EXTENT      S22025
INCLFROM EQU   X'02'                    FROM STRING INCL IN REM  S22025
INCLTO   EQU   X'01'                    TO STRING INCL IN REMOVE S22025
         EJECT
         USING IEDQPRF,RPREFIX
         USING IEDQAVTD,RAVT9
         USING IEDQLCB,RLCB4
         USING IEDQSCB,RSCB3
         USING IEDQAF,RBASE
         SPACE
IEDQAF01 EQU   *
         B     INSDATA                  BRANCH AROUND ID
IEDQAF02 EQU   *                                                 S22025
         B     SAVEIT-IEDQAF01(R15)     BRANCH AROUND ID         S22025
IEDQAF   IEDHJN ,                       MODULE ID                S22025
SAVEIT   DS    0H                                                S22025
         STM   R14,RBASE,TWELVE(R13)    SAVE CALLERS REGISTERS   S22025
         ST    R13,SIXTEEN(,R13)        STORE BACKWARD POINTER   S22025
         LA    R13,TWELVE(,R13)         ADJUST SAVE ADDRESS      S22025
         LR    RBASE,R15                BASE REG
         SPACE 1
         SPACE 1                                                 S22025
INSDATA  DS    0H                                                S22025
         TM    PARMINDX(R1),TESTFLAG    TEST ENTRY FLAGS
         SPACE
         BZ    INSERTR                  INSERT DATA
         BO    EXPNBUFF                 EXPAND BUFFER
         SPACE
         TM    PARMINDX(R1),SHIFUNIT    IS IT ONE-UNIT SHIFT
         BNO   SHIFINIT                 NO, GO DO MULT SHIFT
         SPACE
         LA    RLOCRTN,EXIT             YES, SET RETURN
         B     INSERT                   GO SHIFT ONE UNIT
         EJECT
EXPNBUFF EQU   *
         CLC   PRFSCAN,PRFSIZE          TEST IF RUN OUT OF BUFFER
         BNH   SETINSOF                 NO, PROCEED
         SPACE
         LA    R15,AVTECD4              YES, SET NEGATIVE
         LNR   R15,R15                    RETURN CODE IN REG 15
         B     EXIT                     RETURN IMMEDIATELY
         SPACE
SETINSOF EQU   *
         IC    R15,PARMLEN(,R1)         PICK UP SHIFT LENGTH
         STH   R15,INSOFF(,RPREFIX)     STORE AS INSERT OFFSET
         LR    RSCAN5,R15
         IC    RSCAN5,LCBISZE           PICK UP NO. OF IDLES
         LR    R14,RSCAN5               SAVE FOR LCB UPDATE
         CR    RSCAN5,R15               IS IT LESS THAN SHIFT LNG
         BNL   SETPARM                  NO, PROCEED
         SPACE
         LA    R15,AVTECD4              YES, SET ERROR RETURN CODE
         B     EXIT                     RETURN IMMEDIATELY
         SPACE
SETPARM  EQU   *
         LA    RSCAN5,AVTTXTSZ+1(,RSCAN5) ADD LNG OF TEXT PREFIX +1
         TM    PRFSTAT1,PRFNHDRN        IS IT HEADER PREFIX
         BO    SETDATA                  NO, STORE DATA OFFSET
         SPACE
         LA    RSCAN5,AVTHDRSZ-AVTTXTSZ(,RSCAN5) YES, ADD EXTRA
         SPACE
SETDATA  EQU   *
         STH   RSCAN5,DATOFF(,RPREFIX)  NO, STORE AS DATA OFFSET
         SR    R14,R15                  DECR NO. IDLES BY SHIFT LNG
         STC   R14,LCBISZE              STORE BACK IN LCB
         LH    RLIM8,PRFSCAN            LOAD SCAN POINTER OFFSET
         N     RLIM8,AVTCLRHI
         LA    RLIM8,ONE(,RLIM8)        SET TOTAL
         SR    RLIM8,RSCAN5               SHIFT LENGTH
         BZ    ZERORTN                  NO SHIFT NEEDED, RETURN
         SPACE
         IC    R1,AVTEZERO(,R1)         SAVE INDEX BYTE
         STC   R1,AVTPARM                 IN AVT PARAM AREA
         TM    LCBSTAT1,LCBSENDN        IS IT SEND               S22025
         BO    NOUP                     YES                      S22025
         STH   R15,PRFXTRA+1            OBTAIN EXPAND LENGTH     S22025
         MVI   PRFXTRA,AVTEZERO         CLEAR FLAG BYTE          S22025
NOUP     EQU   *                                                 S22025
         B     SAVEINIT                 GO EXPAND BUFFER
         SPACE
SHIFINIT EQU   *
         LTR   RLIM8,RLIM8              TEST LIMIT REG FOR ZERO
         BZ    ZERORTN                  ZERO, DON'T SHIFT, RETURN
         SPACE
         LH    RSCAN5,DATOFF(,RPREFIX)  GET INITIAL DATA OFFSET
         N     RSCAN5,AVTCLRHI
         SPACE
SAVEINIT EQU   *
         MVI   AVTPARM+1,AVTEZERO       SET DATA TYPE = CHARS
         LR    ROFF7,RSCAN5             SAVE INITIAL DATA OFFSET
         SPACE
SHIFDATA EQU   *
         LR    RWORK2,RPREFIX           LOAD PREFIX ADDR         S22025
         BAL   R14,ENTERLOP             GET ADDR OF SCAN POINTER S22025
         SPACE
         SR    REX11,RSCAN5             GET COUNT TO END OF UNIT
         CR    REX11,RLIM8              IS IT GT TOTAL SHIFT LENGTH
         BNH   SETPARM3                 NO, SET AS SHIFT LENGTH
         SPACE
         LR    REX11,RLIM8              YES, SET TOTAL AS SHIFT LNG
         SPACE
SETPARM3 EQU   *
         ST    RSCAN5,AVTPARM3          SET SHIFT ADDRESS
         STC   REX11,AVTPARM3           SET SHIFT LENGTH
         AR    ROFF7,REX11              SET NEW DATA OFFSET
         SR    RLIM8,REX11              DECREMENT TOTAL SHIFT LNG
         BAL   RLOCRTN,INSERT           GO SHIFT ONE UNIT OF DATA
         SPACE
         STH   ROFF7,DATOFF(,RPREFIX)   STORE NEW DATA OFFSET
         LR    RSCAN5,ROFF7             PREPARE FOR NEXT SHIFT
         LTR   RLIM8,RLIM8              IS LIMIT ZERO
         BNZ   SHIFDATA                 NO, SHIFT AGAIN
         SPACE
ZERORTN  EQU   *
         SR    R15,R15                  YES, SET GOOD RETURN CODE
         SPACE
EXIT     EQU   *
         L     RBASE,AVTUI              GET RETURN INTERFACE ADDRS22025
         B     FOUR(RBASE)              BRANCH TO RETURN ROUTINE S22025
         EJECT
INSERTR  EQU   *
         LA    RLOCRTN,INSEXIT          SET IMMEDIATE RETURN
         SPACE
INSERT   EQU   *
         LH    RSCAN5,DATOFF(,RPREFIX)  COMPUTE TRUE
         N     RSCAN5,AVTCLRHI           INSERT
         SH    RSCAN5,INSOFF(,RPREFIX)    OFFSET
         LR    R0,RSCAN5                SAVE DATA OFFSET         S22025
         LR    RWORK2,RPREFIX           LOAD PREFIX ADDR         S22025
         BAL   R14,ENTERLOP             GET ADDR OF SCAN POINTER S22025
         LR    R1,RWORK2                SAVE OFFSET              S22025
         SPACE
         SR    REX11,RSCAN5             GET EOU COUNT
         SR    RWORK2,RWORK2
         IC    RWORK2,AVTPARM3          GET INSERT LENGTH
         TM    LCBSTAT1,LCBSENDN        IS IT SENDING            S22025
         BO    CONTINUE                 YES CONTINUE AS USUAL    S22025
         L     RSCB3,LCBSCBA-1          OBTAIN SCBMADDRESS       S22025
         CLC   AVTADBUF+1(3),SCBDEOB+1  COMPARE FOR EOB BUFFER   S22025
         BNE   CLRSTAT                  NOT EOB BUF              S22025
         BCTR  R0,R0                    GET EXACT OFFSET         S22025
COMPARE  EQU   *                                                 S22025
         CH    R0,SCBEOB                COMP DATA OFFSET AND EOB S22025
         BNL   CLRSTAT                  BRANCH TO CLEAR STATUS   S22025
FUNCTION EQU   *                                                 S22025
         CLI   PRFXTRA,FLAGOFF          NO FUNCTION SPECIFIED    S22025
         BE    CONTINUE                 YES                      S22025
         TM    PRFXTRA,DATCONT          IS CONTRACT SPECIFIED    S22025
         BO    DELETE                   YES,GO DELETE            S22025
         CLI   PRFXTRA,IDLCT            ARE IDLES SPECIFIED     SA56295
         BE    INSRTEOB                 YES, COMPUTE            SA56295
CKREPL   EQU   *
         TM    PRFXTRA,OFFSTO+EXTTO+CHARTO           REPLACE     S22025
         BZ    INSRTEOB                 NO INSERT                S22025
*    CALCULATE EOB OFFSET FOR REPLACE FUNCTION                        *
CALCREPL EQU   *                                                 S22025
         SH    RWORK2,PRFXTRA+1         INSERT - DELETE          S22025
         B     INSRTEOB                 ADJUST EOB OFFSET        S22025
**         CALCULATE EOB OFFSET FOR DELETE                           **
DELETE   EQU   *                                                 S22025
         LH    RWORK2,PRFXTRA+1         GET DELETE LENGTH        S22025
         AR    R0,RWORK2                DATA OFFSET+DELETE LENGTHS22025
         CH    R0,SCBEOB                COMP DATA OFF+DEL LEN&EOBS22025
         BNL   DATADD                   ADJUST EOB OFFSET        S22025
**       EOB OFFSET GREATER THAN DATA OFFSET + DELETE LENGTH        **
         LNR   RWORK2,RWORK2            MAKE COUNT NEGATIVE      S22025
         B     INSRTEOB                 ADJUST EOB               S22025
**       EOB OFFSET LESS THAN OR EQUAL TO DATA OFFSET + DELETE LENGTH*
DATADD   EQU   *                                                 S22025
         SR    R0,RWORK2                GET DATA OFFSET          S22025
         STH   R0,SCBEOB                STORE EOB OFFSET         S22025
         B     CLRSTAT                  BRANCH TO CLEAR STATUS   S22025
*                    INSERT FUNCTION                                 *
INSRTEOB EQU   *                                                 S22025
         AH    RWORK2,SCBEOB            INCREMENT EOB OFFSET     S22025
         STH   RWORK2,SCBEOB            STORE EOB OFFSET         S22025
CLRSTAT  EQU   *                                                 S22025
         MVI   PRFXTRA,FLAGOFF          TURN OFF STATUS BYTE     S22025
         SR    RWORK2,RWORK2            CLEAR WORK REGISTER      S22025
         IC    RWORK2,AVTPARM3          GET INSERT LENGTH        S22025
CONTINUE EQU   *                                                 S22025
         TM    AVTPARM+1,IDLEFLAG       IDLES OR DATA
         BO    INSRTIDL                 IDLES,GO INSERT
         L     RFROM3,AVTPARM3          GET INSERT DATA ADDR
         SPACE
DATALOOP EQU   *
         CR    REX11,RWORK2             IS EOU COUNT LT DATA LNG
         BNL   MOVE2                    NO, INSERT ALL DATA
         SPACE
         BCTR  REX11,AVTEZERO           DECREMENT FOR EXECUTE
         EX    REX11,MOVEX              MOVE ALL DATA THAT FITS
         LA    REX11,ONE(,REX11)        RESET DATA COUNT
         SPACE
         AR    RFROM3,REX11             UPDATE DATA ADDRESS
         SR    RWORK2,REX11             DECR LENGTH BY NO. MOVED
         SPACE
         L     R1,PRFTIC-IEDQPRF(,R1)   GET NEW UNIT ADDRESS     S22025
         LA    RSCAN5,AVTUMALN(,R1)     POINT TO START OF DATA   S22025
         LH    REX11,AVTKEYLE           SET EOU COUNT = UNIT LENGTH
        B     DATALOOP                  GO SHIFT/MOVE NEXT UNIT
         SPACE
MOVE2    EQU   *
         BCTR  RWORK2,AVTEZERO          DECREMENT FOR EXECUTE
         EX    RWORK2,MOVEX             MOVE ALL DATA
         BR    RLOCRTN                  RETURN TO CALLER
         SPACE
         SPACE 3
********* EXECUTED INSTRUCTION *********
         SPACE
MOVEX    MVC   AVTEZERO(,RSCAN5),AVTEZERO(RFROM3)
         EJECT
INSRTIDL EQU   *
         LH    RCHAR3,AVTPARM3          GET IDLE CHARACTER
         SPACE
         BCTR  RSCAN5,AVTEZERO          ADJUST INSERT ADDR BACK
         SPACE
         CR    REX11,RWORK2             IS EOU COUNT LT IDLES COUNT
         BNL   STC2                     NO, INSERT ALL IDLES
         SPACE
         SR    RWORK2,REX11             SET COUNT FOR SECOND LOOP
         SPACE
STC1     EQU   *
         STC   RCHAR3,AVTEZERO(REX11,RSCAN5) INSERT IDLE
         BCT   REX11,STC1               LOOP TILL UNIT FULL
         SPACE
         L     RSCAN5,PRFTIC-IEDQPRF(,R1) GET NEW UNIT ADDRESS   S22025
         LA    RSCAN5,AVTUMALN-1(,RSCAN5) POINT TO START OF DATA -1
         SPACE
STC2     EQU   *
         STC   RCHAR3,AVTEZERO(RWORK2,RSCAN5) INSERT IDLE
         BCT   RWORK2,STC2              LOOP TILL COUNT RUNS OUT
         SPACE
         BR    RLOCRTN                  EXIT
         SPACE
INSEXIT  EQU   *
         IC    RWORK2,AVTPARM3          PICK UP INSERT LENGTH
         LNR   RWORK2,RWORK2            FLIP FOR INVERSE SUBTRACT
         AH    RWORK2,INSOFF(,RPREFIX)  DECREMENT NO. AVAIL BYTES
         STH   RWORK2,INSOFF(,RPREFIX)  STORE BACK
         B     ZERORTN                  RETURN TO CALLER
         SPACE 1                                                 S22025
ADDRLOOP EQU   *                                                 S22025
         L     RWORK2,PRFTIC-IEDQPRF(RWORK2) PT TO NEXT UNIT     S22025
         SH    RSCAN5,AVTKEYLE          SUBTRACT NO. BYTES PASSEDS22025
ENTERLOP EQU   *                                                 S22025
         CH    RSCAN5,AVTKEYLE          IS ITEM IN THIS UNIT     S22025
         BH    ADDRLOOP                 NO, TEST NEXT UNIT       S22025
         LA    RSCAN5,AVTUMALN-1(RSCAN5,RWORK2) YES, GET ADDR OF S22025
         LH    REX11,AVTKEYLE           GET KEY LENGTH           S22025
         LA    REX11,AVTUMALN(RWORK2,REX11) ADD RECB LNG + UNIT  S22025
         BR    R14                      RETURN TO CALLER         S22025
         EJECT
********* DSECTS *********
         SPACE
         TAVTD
         EJECT
         TLCBD
         SPACE
         TPRFD
         EJECT
         TSCBD
         SPACE
         END
