         TITLE 'IEDNSL, 3705 START/STOP I/O MODULE                     *
                        '
IEDNSL   CSECT ,                                                   0001
@PROLOG  DS    0H                                                  0002
         USING *,RBASE,RBASE2           /* ESTABISH ADDRESSABILITY   */
         DC    A(0)                     /* IEDNSL QCB POINTER        */
         DC    A(0)                     /* IEDNSL QCB CHAIN POINTER  */
         DC    AL1(6)                   /* IEDNSL VTO                */
         DC    AL3(*-1)                 /* IEDNSL STCB POINTER       */
         LR    RBASE,RQCB               /* SET UP THE BASE ADDRESS   */
         LA    RBASE2,X'FFF'(RBASE)     SETUP SECOND BASE-ONE
         LA    RBASE2,1(RBASE2)         ADDRESSABILITY FOR 2ND HALF
IEDNSL   IEDHJN AFTERHJN,HJN            MODULE IDENTIFICATION MACRO
*   IF RPARM->PRFPRI=PRIACTIV THEN  /* IF THIS THE REQUESTED BUFFER
*                                      FROM IEDQGA THEN              */
         CLI   PRFPRI(RPARM),X'E4'                                 0433
         BNE   @RF00433                                            0433
*     CALL RESUME;                  /* DETERMINE WHERE TO BEGIN AGAIN*/
         BAL   @14,RESUME                                          0434
*   ELSE                            /* NO, NOT BUFFER FROM GA        */
*     IF RPARM->PRFPRI=PRIOPCTL THEN/* IF THIS IS AN INTIAL REQUEST
*                                      FROM OPERATOR CONTROL THEN    */
         B     @RC00433                                            0435
@RF00433 CLI   PRFPRI(RPARM),X'DC'                                 0435
         BNE   @RF00435                                            0435
*       CALL INITIAL;               /* PROCESS THE REQUEST           */
         BAL   @14,INITIAL                                         0436
*     ELSE                          /* NO, NOT INITIAL ENTRY         */
*       IF RPARM->PRFPRI=PRIPRIME THEN/* IS THIS PRIME RECEIVE     0437
*                                      REQUEST                       */
         B     @RC00435                                            0437
@RF00435 CLI   PRFPRI(RPARM),X'DD'                                 0437
         BNE   @RF00437                                            0437
*         CALL PRIMEGP;             /* YES, GO AHEAD AND PRIME       */
         BAL   @14,PRIMEGP                                         0438
*       ELSE                        /* NOT PRIME RECEIVE REQUEST     */
*         CALL PRIMESND;            /* THEN IT IS PRIME SEND         */
         B     @RC00437                                            0439
@RF00437 BAL   @14,PRIMESND                                        0439
*   CALL DSPDISP;                   /* REQUEST FROM OFFTP,E - VF     */
@RC00437 DS    0H                                                  0440
@RC00435 DS    0H                                                  0440
@RC00433 LA    @15,DSPDISP(,RDISP)                                 0440
         BALR  @14,@15                                             0440
*                                                                  0441
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE DECIDES WHERE TO RESUME PROCESSING FOR THE    */
*   /* FUNCTION THAT REQUESTED A BUFFER BY POSTING AN ERB TO IEDQGA. */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0441
*RESUME:                                                           0441
*   PROC OPTIONS(RETREG,SAVE(14));                                 0441
@EL00001 DS    0H                                                  0441
@EF00001 DS    0H                                                  0441
@ER00001 BR    @14                                                 0441
RESUME   ST    @14,@SA00002                                        0441
*   RNSLBFR=RPARM-((ADDR(NSLERB)-ADDR(IEDNSLD)));/* BACK TO BEGINNING
*                                      OF BFR                        */
         LR    @10,RPARM                                           0442
         SL    @10,@CF01821                                        0442
         LR    RNSLBFR,@10                                         0442
*   IF NSLREQTY=NSLSTPTR×NSLREQTY=NSLSTPTR+NSLSTMSG THEN/* STOPTERM
*                                      REQ?                          */
         CLI   NSLREQTY(IEDNSLP),X'04'                             0443
         BE    @RT00443                                            0443
         CLI   NSLREQTY(IEDNSLP),12                                0443
         BNE   @RF00443                                            0443
@RT00443 DS    0H                                                  0444
*     CALL STOPTERM;                /* YES FINISH THE REQ NOW        */
         BAL   @14,STOPTERM                                        0444
*   ELSE                            /* DETERMINE WHICH FUNCTION THE
*                                      BUFFER IS FOR                 */
*     DO;                           /* FIND WHICH FUNCTION           */
         B     @RC00443                                            0445
@RF00443 DS    0H                                                  0446
*       IF NSLREQTY=NSLSTRGP THEN   /* IS STARTGP REQUEST?           */
         CLI   NSLREQTY(IEDNSLP),X'05'                             0446
         BNE   @RF00446                                            0446
*         CALL STARTGP;             /* YES, FINISH THE REQUEST       */
         BAL   @14,STARTGP                                         0447
*       ELSE                        /* REQUEST MUST BE STOPLINE      */
*         CALL STOPLINE;            /* FINISH THE STOPLINE REQ       */
         B     @RC00446                                            0448
@RF00446 BAL   @14,STOPLINE                                        0448
*     END;                          /* FOUND REUESTED FUNCTION       */
*   END RESUME;                     /* READY TO RESUME PROCESSING    */
@EL00002 DS    0H                                                  0450
@EF00002 DS    0H                                                  0450
@ER00002 L     @14,@SA00002                                        0450
         BR    @14                                                 0450
*                                                                  0451
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE DETERMINES THE TYPE OF INPUT AND WHICH        */
*   /* FUNCTION SUBROUTINE SHOULD GET CONTROL                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0451
*INITIAL:                                                          0451
*   PROC OPTIONS(RETREG,SAVE(14));                                 0451
INITIAL  ST    @14,@SA00003                                        0451
*   RNSLBFR=RPARM;                  /* EST. ADDRESSABILTY            */
         LR    RNSLBFR,RPARM                                       0452
*   IF NSLREQTY=NSLSTRTR THEN       /* IS IT START TERMREQUEST?      */
         CLI   NSLREQTY(IEDNSLP),X'03'                             0453
         BNE   @RF00453                                            0453
*     CALL STARTTRM;                /* YES, PROCESS START TERM     0454
*                                      REQUEST                       */
         BAL   @14,STARTTRM                                        0454
*   ELSE                            /* NO, DETERMINE REQUEST         */
*     DO;                                                          0455
         B     @RC00453                                            0455
@RF00453 DS    0H                                                  0456
*       IF NSLREQTY=NSLSTPTR×NSLREQTY=NSLSTPTR+NSLSTMSG THEN/* IS  0456
*                                      STOPTERM OR STOPTERM IN MIDDLE
*                                      MESSAGE THEN                  */
         CLI   NSLREQTY(IEDNSLP),X'04'                             0456
         BE    @RT00456                                            0456
         CLI   NSLREQTY(IEDNSLP),12                                0456
         BNE   @RF00456                                            0456
@RT00456 DS    0H                                                  0457
*         CALL STOPTERM;            /* PROCESS THE STOP TERM REQ     */
         BAL   @14,STOPTERM                                        0457
*       ELSE                        /* NO, DETERMINE REQUEST         */
*         DO;                                                      0458
         B     @RC00456                                            0458
@RF00456 DS    0H                                                  0459
*           IF NSLREQTY=NSLSTRTL THEN/* IS IT A START LINE REQ?      */
         CLI   NSLREQTY(IEDNSLP),X'01'                             0459
         BNE   @RF00459                                            0459
*             CALL STARTLNE;        /* YES, PROCESS START LINE       */
         BAL   @14,STARTLNE                                        0460
*           ELSE                    /* NO, DETERMINE REQUEST         */
*             DO;                                                  0461
         B     @RC00459                                            0461
@RF00459 DS    0H                                                  0462
*               IF NSLREQTY=NSLSTOPL×NSLREQTY=NSLSTPLI×NSLREQTY=   0462
*                   NSLCLOSN THEN   /* STOPLINE,C OR CLOSEDOWN OR    */
         CLI   NSLREQTY(IEDNSLP),X'02'                             0462
         BE    @RT00462                                            0462
         CLI   NSLREQTY(IEDNSLP),X'09'                             0462
         BE    @RT00462                                            0462
         CLI   NSLREQTY(IEDNSLP),X'0B'                             0462
         BNE   @RF00462                                            0462
@RT00462 DS    0H                                                  0463
*                 CALL STOPLINE;    /* STOPLINE, I THEN PROCESS LET
*                                      STOPLINE SUBROUTINE WORK WITH
*                                      BOTH REQUEST                  */
         BAL   @14,STOPLINE                                        0463
*               ELSE                /* NO,                           */
*                 DO;                                              0464
         B     @RC00462                                            0464
@RF00462 DS    0H                                                  0465
*                   IF NSLREQTY=NSLSTRGP THEN/* START GENERAL POLL?  */
         CLI   NSLREQTY(IEDNSLP),X'05'                             0465
         BNE   @RF00465                                            0465
*                     CALL STARTGP; /* YES, PROCESS STRT GP REQ      */
         BAL   @14,STARTGP                                         0466
*                   ELSE            /* NO,                           */
*                     DO;                                          0467
         B     @RC00465                                            0467
@RF00465 DS    0H                                                  0468
*                       IF NSLREQTY=NSLSTPGP THEN/* STOP GENERAL   0468
*                                      POLL?                         */
         CLI   NSLREQTY(IEDNSLP),X'06'                             0468
         BNE   @RF00468                                            0468
*                         CALL STOPGP;/* YES, PROCESS STP GP REQ     */
         BAL   @14,STOPGP                                          0469
*                       ELSE        /* IT IS START LU REQUEST        */
*                         CALL STARTLU;/* SO, PROCESS IT             */
         B     @RC00468                                            0470
@RF00468 BAL   @14,STARTLU                                         0470
*                     END;          /* COMPLETED STOP GP             */
*                 END;              /* COMPLETED STARTGP             */
*             END;                  /* COMPLETED STOPLINE C          */
*         END;                      /* COMPLETED STOPTERM            */
*     END;                          /* COMPLETED START TERM          */
*   END INITIAL;                    /* COMPLETED INITIAL REQUESTS    */
@EL00003 DS    0H                                                  0476
@EF00003 DS    0H                                                  0476
@ER00003 L     @14,@SA00003                                        0476
         BR    @14                                                 0476
*                                                                  0477
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE PROCESS THE START TERMINAL REQUEST FROM       */
*   /* OPERATOR CONTROL.THE DEVICE IS CHECKED FOR TSO SESSION BEFORE */
*   /* CONTINUING . IF THE REQUIREMENT IS MET, THE DEVICE IS MARK    */
*   /* ACTIVE AND I/O IS INITIATED BY PRIMING OR A RELEASE.          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0477
*STARTTRM:                                                         0477
*   PROC OPTIONS(RETREG,SAVE(14));                                 0477
STARTTRM ST    @14,@SA00004                                        0477
*   RFY                                                            0478
*     RENTRY RSTD;                                                 0478
*   RTRM=NSLTTEPT-LENGTH(IEDNTRM);  /* TRM ENTRY, BCKUP TO PREFIX  0479
*                                                            @ZM46791*/
         L     RTRM,NSLTTEPT(,IEDNSLP)                             0479
         SL    RTRM,@CF01178                                       0479
*   CALL CHKTSO;                    /* FIND OUT IF IN TSO     SESSION*/
         BAL   @14,CHKTSO                                          0480
*   IF RENTRY=AVTFZERO THEN         /* GOOD RETURN?                  */
         C     RENTRY,AVTFZERO(,IEDQAPTR)                          0481
         BNE   @RF00481                                            0481
*     DO;                           /* YES                           */
*       RTRM=NSLTTEPT-LENGTH(IEDNTRM);/* SET TRM BASE        @YM06076*/
         L     RTRM,NSLTTEPT(,IEDNSLP)                             0483
         SL    RTRM,@CF01178                                       0483
*       NSLCTTRM=RTRM;              /* SET CURRENT TTE       @YM06076*/
         STCM  RTRM,7,NSLCTTRM(IEDNSLP)                            0484
*       TRMRSACT=ON;                /* MARK ACTIVE                   */
         LA    @03,TRMRSACT(,RTRM)                                 0485
         LR    @07,@03                                             0485
         LA    @14,3                                               0485
         NR    @07,@14                                             0485
         LCR   @07,@07                                             0485
         ALR   @03,@07                                             0485
         L     @14,0(,@03)                                         0485
@GL00005 LR    @10,@14                                             0485
         O     @10,@CB02247+3(@07)                                 0485
         CS    @14,@10,0(@03)                                      0485
         BNE   @GL00005                                            0485
*       IF NSLBUFFR^=AVTFZERO THEN  /* RELEASE BUFFER ATTACHED       */
         L     @14,NSLBUFFR-1(,IEDNSLP)                            0486
         LA    @14,0(,@14)                                         0486
         C     @14,AVTFZERO(,IEDQAPTR)                             0486
         BE    @RF00486                                            0486
*         DO;                       /* YES                           */
*           RPARM=NSLBUFFR;         /* POST RELEASE REQUEST NOW      */
         LR    RPARM,@14                                           0488
*           NSLBUFFR=''B;           /* CLEAR TO INTERFACE WITH     0489
*                                      FREEBUF IF NECESSARY          */
         SLR   @14,@14                                             0489
         STCM  @14,7,NSLBUFFR(IEDNSLP)                             0489
*           CALL POSTELEM;          /* POST TO IEDQAS                */
         BAL   @14,POSTELEM                                        0490
*         END;                      /* FINISHED WITH RELEASE BUF     */
*       ELSE                        /* OK TO PRIME                   */
*         IF TRMGPACT^=ON THEN                                     0492
         B     @RC00486                                            0492
@RF00486 TM    TRMGPACT(RTRM),B'00001000'                          0492
         BO    @RF00492                                            0492
*           DO;                     /* GENERAL POLL NOT ACTIVE     0493
*                                                            @OY19202*/
*             CALL PRIMER;          /* PRIME TO GET I/O STARTED      */
         BAL   @14,PRIMER                                          0494
*           END;                    /*                       @OY19202*/
*         ELSE                                                     0496
*           ;                       /* GENERAL POLL IS ACTIVE      0496
*                                                            @OY19202*/
*                                                                  0496
@RF00492 DS    0H                                                  0497
*       /*************************************************************/
*       /*                                                           */
*       /* TRMRSACT ON BUT NO PRIMING                        @OY19202*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0497
*       CALL POSTOPCB;              /* WAKEUP OPERATOR CONTROL       */
@RC00486 BAL   @14,POSTOPCB                                        0497
*     END;                          /* OK PERFORMED THE START        */
*   ELSE                                                           0499
*     ;                             /* TSO REJECT                    */
@RF00481 DS    0H                                                  0500
*   RFY                                                            0500
*     RENTRY UNRSTD;                                               0500
*   END STARTTRM;                                                  0501
@EL00004 DS    0H                                                  0501
@EF00004 DS    0H                                                  0501
@ER00004 L     @14,@SA00004                                        0501
         BR    @14                                                 0501
*                                                                  0502
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE PROCESSES THE STOP TERMINAL REQUEST FROM      */
*   /* OPERATOR CONTROL TO STOP I/O BY MARKING THE DEVICE INACTIVE   */
*   /* AND SENDING A RESET OR SETTING A LCBOCNI IN THE PLCB.         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0502
*STOPTERM:                                                         0502
*   PROC OPTIONS(RETREG,SAVE(14));                                 0502
STOPTERM ST    @14,@SA00005                                        0502
*   RFY                                                            0503
*     RENTRY RSTD;                                                 0503
*   RTRM=NSLTTEPT-LENGTH(IEDNTRM);  /* TRM ENTRY ADDR, BCKUP TO    0504
*                                      PREFIX                @ZM46791*/
         L     RTRM,NSLTTEPT(,IEDNSLP)                             0504
         SL    RTRM,@CF01178                                       0504
*   CALL CHKTSO;                    /* FIND OUT IF IN TSO     SESSION*/
         BAL   @14,CHKTSO                                          0505
*   IF RENTRY=AVTFZERO THEN         /* GOOD RETURN?                  */
         C     RENTRY,AVTFZERO(,IEDQAPTR)                          0506
         BNE   @RF00506                                            0506
*     DO;                           /* YES                           */
*       IF NSLNGPST=ON THEN         /* RESUME?                       */
         TM    NSLNGPST(IEDNSLP),B'10000000'                       0508
         BNO   @RF00508                                            0508
*         DO;                       /* YES                           */
*           RTRM=NSLCTTRM;          /* GET CURRENT ENTRY             */
         L     RTRM,NSLCTTRM-1(,IEDNSLP)                           0510
         LA    RTRM,0(,RTRM)                                       0510
*           NSLNGPST=OFF;           /* RESET THE RESUME FLAG         */
         NI    NSLNGPST(IEDNSLP),B'01111111'                       0511
*         END;                      /* RE-INITIALIZED THE PTRS       */
*       ELSE                        /* INITIAL ENTRY                 */
*         DO;                       /* INITIALIZE THE PTRS           */
         B     @RC00508                                            0513
@RF00508 DS    0H                                                  0514
*           RTRM=NSLTTEPT-LENGTH(IEDNTRM);/* SET TRM BASE    @YM06076*/
         L     RTRM,NSLTTEPT(,IEDNSLP)                             0514
         SL    RTRM,@CF01178                                       0514
*           NSLCTTRM=RTRM;          /* SET CURRENT TTE       @YM06076*/
         STCM  RTRM,7,NSLCTTRM(IEDNSLP)                            0515
*           NSLPLCBR=OFF;           /* RESET PLCB SWITCH             */
         NI    NSLPLCBR(IEDNSLP),B'01111111'                       0516
*         END;                      /* DONE WITH INITIALIZATION      */
*       IF NSLBUFFR^=AVTFZERO THEN  /* BUFFER ATTACHED?              */
@RC00508 L     @14,NSLBUFFR-1(,IEDNSLP)                            0518
         LA    @14,0(,@14)                                         0518
         C     @14,AVTFZERO(,IEDQAPTR)                             0518
         BE    @RF00518                                            0518
*         DO;                       /* YES                           */
*           TRMRSACT=OFF;           /* MARK INACTIVE                 */
         LA    @03,TRMRSACT(,RTRM)                                 0520
         LR    @07,@03                                             0520
         LA    @14,3                                               0520
         NR    @07,@14                                             0520
         LCR   @07,@07                                             0520
         ALR   @03,@07                                             0520
         L     @14,0(,@03)                                         0520
@GL00006 LR    @10,@14                                             0520
         N     @10,@CB02252+3(@07)                                 0520
         CS    @14,@10,0(@03)                                      0520
         BNE   @GL00006                                            0520
*           CALL STPTERM;           /* STOP I/0 IF POSSIBLE          */
         BAL   @14,STPTERM                                         0521
*         END;                      /* PERFORMED THE STOPTERM        */
*       ELSE                        /* NO BUFFER                     */
*         DO;                       /* REQUEST A BUFFER              */
         B     @RC00518                                            0523
@RF00518 DS    0H                                                  0524
*           CALL GETBUF;            /* BUILD THE ERB                 */
         BAL   @14,GETBUF                                          0524
*           NSLNGPST=ON;            /* SET RESUME FLAG               */
         OI    NSLNGPST(IEDNSLP),B'10000000'                       0525
*         END;                      /* READY TO EXIT                 */
*       IF NSLNGPST=OFF THEN        /* EXIT FOR GOOD                 */
@RC00518 TM    NSLNGPST(IEDNSLP),B'10000000'                       0527
         BNZ   @RF00527                                            0527
*         DO;                       /* NO                            */
*           IF NSLBUFFR^=AVTFZERO THEN/* BUFFER ATTACHED?            */
         L     @14,NSLBUFFR-1(,IEDNSLP)                            0529
         LA    @14,0(,@14)                                         0529
         C     @14,AVTFZERO(,IEDQAPTR)                             0529
         BE    @RF00529                                            0529
*             CALL FREEBUF;         /* YES, FREE ATTACHED BUF 1ST    */
         BAL   @14,FREEBUF                                         0530
*           ELSE                                                   0531
*             ;                     /* NO BUFFERS TO FRE             */
@RF00529 DS    0H                                                  0532
*           IF NSLPLCBR=ON THEN     /* PLCB WILL RETURN?             */
         TM    NSLPLCBR(IEDNSLP),B'10000000'                       0532
         BNO   @RF00532                                            0532
*             CALL FREEBUF;         /* FREE THIS BUFFER              */
         BAL   @14,FREEBUF                                         0533
*           ELSE                    /* MUST REDRIVE OPCTL WITH BU    */
*             CALL POSTOPCB;        /* FER TO PUT OUT THE MSG        */
         B     @RC00532                                            0534
@RF00532 BAL   @14,POSTOPCB                                        0534
*         END;                      /* EXIT FOR GOOD                 */
*       ELSE                                                       0536
*         ;                         /* EXIT TEMPORARILY              */
@RF00527 DS    0H                                                  0537
*     END;                          /* PROCESSED THE STOPTERM      0537
*                                      NORMALLY                      */
*   ELSE                                                           0538
*     ;                             /* TSO SESSION REJECT REQUEST    */
@RF00506 DS    0H                                                  0539
*   RFY                                                            0539
*     RENTRY UNRSTD;                                               0539
*   END STOPTERM;                   /* READ OR INVITE OR CONTACT   0540
*                                      OUTSTANDING?                  */
@EL00005 DS    0H                                                  0540
@EF00005 DS    0H                                                  0540
@ER00005 L     @14,@SA00005                                        0540
         BR    @14                                                 0540
*                                                                  0541
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE DETERMINES HOW TO STOP I/O BASED ON THE TYPE  */
*   /* OF REQUEST AND WHETHER A PLCB IS ASSIGNED OR NOT.             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0541
*STPTERM:                                                          0541
*   PROC OPTIONS(RETREG,SAVE);                                     0541
STPTERM  STM   @14,@12,@SA00006                                    0541
*   RFY                                                            0542
*    (IEDQQPTR,                                                    0542
*     RQCB) RSTD;                                                  0542
*   RQCB=TRMDESTQ;                  /* GET THE QCB ADDRESS           */
         SLR   RQCB,RQCB                                           0543
         ICM   RQCB,7,TRMDESTQ(RTRM)                               0543
*   IF NSLREQTY=NSLSTOPL×NSLREQTY=NSLSTPLI×NSLREQTY=NSLCLOSN THEN/*
*                                      FLUSH CLOSEDOWN       @YM08540
*                                      STOPLINE,C OR STOPLINE,I?     */
         CLI   NSLREQTY(IEDNSLP),X'02'                             0544
         BE    @RT00544                                            0544
         CLI   NSLREQTY(IEDNSLP),X'09'                             0544
         BE    @RT00544                                            0544
         CLI   NSLREQTY(IEDNSLP),X'0B'                             0544
         BNE   @RF00544                                            0544
@RT00544 DS    0H                                                  0545
*     TRMSPACT=OFF;                 /* INDICATE SUPERIOR RESOURCE IS
*                                      INACTIVE                      */
         NI    TRMSPACT(RTRM),B'11101111'                          0545
*   ELSE                                                           0546
*     ;                             /* NOT STOPLINE REQUEST          */
@RF00544 DS    0H                                                  0547
*   IF NSLREQTY^=NSLSTOPL&NSLREQTY^=NSLSTPLI&NSLREQTY^=NSLCLOSN THEN
         CLI   NSLREQTY(IEDNSLP),X'02'                             0547
         BE    @RF00547                                            0547
         CLI   NSLREQTY(IEDNSLP),X'09'                             0547
         BE    @RF00547                                            0547
         CLI   NSLREQTY(IEDNSLP),X'0B'                             0547
         BE    @RF00547                                            0547
*                                   /* STOPTERM THEN SET OCNI      0548
*                                                            @YM08540*/
*     DO;                           /* YES, SET ALL FLAGS            */
*       TRMOCNI=ON;                 /* STOP IN PROGRESS              */
         OI    TRMOCNI(RTRM),B'00100000'                           0549
*       NSLPLCBR=ON;                /* PLCB WILL RETURN TO OPCTL     */
         OI    NSLPLCBR(IEDNSLP),B'10000000'                       0550
*     END;                          /* DONE                          */
*   ELSE                                                           0552
*     ;                             /* STOPLINE FALL THRU            */
@RF00547 DS    0H                                                  0553
*   IF QCBPLCBN=ON THEN             /* IS PLCB ASSIGNED?             */
         LR    @10,IEDQQPTR                                        0553
         AL    @10,@CF02259                                        0553
         TM    QCBPLCBN-4(@10),B'10000000'                         0553
         BNO   @RF00553                                            0553
*     CALL MARKPLCB;                /* SET STOP IN PLCB              */
         BAL   @14,MARKPLCB                                        0554
*   ELSE                            /* NO PLCB IS ASSIGNED           */
*     CALL STPNPLCB;                /* TRY TO STOP W/O PLCB ASSGN    */
         B     @RC00553                                            0555
@RF00553 BAL   @14,STPNPLCB                                        0555
*   RFY                                                            0556
*    (IEDQQPTR,                                                    0556
*     RQCB) UNRSTD;                                                0556
*   END STPTERM;                    /* FINISHED STOP I/O IF REQ      */
@EL00006 DS    0H                                                  0557
@EF00006 DS    0H                                                  0557
@ER00006 LM    @14,@12,@SA00006                                    0557
         BR    @14                                                 0557
*                                                                  0558
*   /*****************************************************************/
*   /*                                                               */
*   /* WHEN A PLCB IS ASSIGNED, THE STOPPING OF I/O IS INITIATED FOR */
*   /* A RESOURCE BY SETTING LCBOCNI.                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0558
*MARKPLCB:                                                         0558
*   PROC OPTIONS(RETREG,SAVE(14));                                 0558
MARKPLCB ST    @14,@SA00007                                        0558
*   RFY                                                            0559
*    (IEDQLPTR,                                                    0559
*     RLCB,                                                        0559
*     IEDQQPTR,                                                    0559
*     RQCB) RSTD;                                                  0559
*   RLCB=QCBPLCBA;                  /* GET THE PLCB ADDRESS          */
         LR    @10,IEDQQPTR                                        0560
         AL    @10,@CF02259                                        0560
         L     RLCB,QCBPLCBA-5(,@10)                               0560
         LA    RLCB,0(,RLCB)                                       0560
*   IF NSLREQTY^=NSLSTOPL&NSLREQTY^=NSLSTPLI&NSLREQTY^=NSLCLOSN THEN
         CLI   NSLREQTY(IEDNSLP),X'02'                             0561
         BE    @RF00561                                            0561
         CLI   NSLREQTY(IEDNSLP),X'09'                             0561
         BE    @RF00561                                            0561
         CLI   NSLREQTY(IEDNSLP),X'0B'                             0561
         BE    @RF00561                                            0561
*                                   /* STOPTERM THEN GO AHEAD        */
*     DO;                           /* AND                   @YM08540*/
*       LCBOCNI=ON;                 /* SET STOP IN PROGRESS IN THE 0563
*                                      PLCB                          */
         OI    LCBOCNI(IEDQLPTR),B'00100000'                       0563
*       NSLPLCBR=ON;                /* INDICATE PLCB WILL RETURN TO
*                                      OPERATOR CONTROL              */
         OI    NSLPLCBR(IEDNSLP),B'10000000'                       0564
*     END;                          /* ALL NECESSAY FLAGS ARE SET    */
*   ELSE                                                           0566
*     ;                             /* STOPLINE THEN FALL THRU       */
@RF00561 DS    0H                                                  0567
*   IF NSLREQTY=NSLSTPLI THEN       /* STOPLINE,I                    */
         CLI   NSLREQTY(IEDNSLP),X'09'                             0567
         BNE   @RF00567                                            0567
*     DO;                           /* YES                   @YM08441*/
*       TRMASNXI=ON;                /* RESET IN PROGRESS     @YM08441*/
*       TRMSTMM=ON;                 /* STOP MID MSG          @YM08441*/
         OI    TRMASNXI(RTRM),B'00110000'                          0570
*       IF SCBLCK1N=ON×SCBMSGLN=ON THEN                            0571
         L     @10,IEDQSPTR-1(,IEDQLPTR)                           0571
         LA    @10,0(,@10)                                         0571
         TM    SCBLCK1N(@10),B'00101000'                           0571
         BZ    @RF00571                                            0571
*         DO;                       /* YES, RESET SCB INDICATORS     */
*           SCBLCK1N=OFF;           /* RESET SCB LOCK INDICATOR      */
*           SCBMSGLN=OFF;           /* RESET SCB LOCK INDICATOR      */
         NI    SCBLCK1N(@10),B'11010111'                           0574
*           IF(LCBLOCKR=ON×LCBLOCKI=ON)&LCBBDFLG=OFF THEN/* LOCK MODE
*                                      AND IEDQBD HAS FINISHED     0575
*                                      PROCESSING THIS PLCB  @YM06447*/
         TM    LCBLOCKR(IEDQLPTR),B'00110000'                      0575
         BZ    @RF00575                                            0575
         TM    LCBBDFLG(IEDQLPTR),B'10000000'                      0575
         BNZ   @RF00575                                            0575
*             DO;                   /* YES                   @YM06447*/
*               QCBLKRLN=AVTEZERO;  /* CLEAR THE RECORD NUMBER       */
         MVI   QCBLKRLN(IEDQQPTR),X'00'                            0577
*               RFY                                                0578
*                 RENTRY RSTD;                                     0578
*               RENTRY=RLCB;        /* SET PLCB ADDRESS      @YM06447*/
         LR    RENTRY,RLCB                                         0579
*               CALL POSTR;         /* POST PLCB             @YM06447*/
         BAL   @14,POSTR                                           0580
*               RFY                                                0581
*                 RENTRY UNRSTD;                                   0581
*             END;                  /*                       @YM06447*/
*           ELSE                                                   0583
*             ;                     /* NOT LOCK AND IEDQBD HAS NOT 0583
*                                      FINISHED WITH THE PLCB        */
@RF00575 DS    0H                                                  0584
*           LCBINSRC=''B;           /* CLEAR PLCB LOCK INDICATORS    */
         SLR   @10,@10                                             0584
         STCM  @10,7,LCBINSRC(IEDQLPTR)                            0584
*         END;                      /* RESET ALL LOCK INDICATORS     */
*       ELSE                                                       0586
*         ;                         /* NOT IN LOCK MODE              */
@RF00571 DS    0H                                                  0587
*       CALL SENDRSET;              /* SEND RESET IF NEEDED          */
         BAL   @14,SENDRSET                                        0587
*     END;                          /* FINISHED WITH STOPLINE,I      */
*   ELSE                            /* CHECK FOR STOP TERM,M         */
*     IF NSLREQTY=NSLSTPTR+NSLSTMSG THEN/* STOPTERM,M?               */
         B     @RC00567                                            0589
@RF00567 CLI   NSLREQTY(IEDNSLP),12                                0589
         BNE   @RF00589                                            0589
*       DO;                         /*                       @YM08441*/
*         TRMSTMM=ON;               /* STOP MID MSG          @YM08441*/
         OI    TRMSTMM(RTRM),B'00100000'                           0591
*         CALL SENDRSET;            /* SEND RESET IF NEEDED          */
         BAL   @14,SENDRSET                                        0592
*       END;                        /*                       @YM08441*/
*     ELSE                                                         0594
*       ;                           /* NOT STOPTERM,M-- DON'T SEND 0594
*                                      RESET                         */
@RF00589 DS    0H                                                  0595
*   RFY                                                            0595
*    (IEDQLPTR,                                                    0595
*     RLCB,                                                        0595
*     IEDQQPTR,                                                    0595
*     RQCB) UNRSTD;                                                0595
*   END MARKPLCB;                   /* STOP THE TERM WITH PLCB       */
@EL00007 DS    0H                                                  0596
@EF00007 DS    0H                                                  0596
@ER00007 L     @14,@SA00007                                        0596
         BR    @14                                                 0596
*                                                                  0597
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE DETERMINES IF A RESET IS NECESSARY TO STOP    */
*   /* I/O.                                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0597
*STPNPLCB:                                                         0597
*   PROC OPTIONS(RETREG,SAVE(14));                                 0597
STPNPLCB ST    @14,@SA00008                                        0597
*   IF TRMINOUT=ON×TRMRDOUT=ON×(TRMCONT=ON&TRMSESSN=OFF) THEN/* READ
*                                      OR INVITE OR CONTACT        0598
*                                      OUTSTANDING?          @YM08442*/
         TM    TRMINOUT(RTRM),B'00000011'                          0598
         BNZ   @RT00598                                            0598
         TM    TRMCONT(RTRM),B'10000000'                           0598
         BNO   @RF00598                                            0598
         TM    TRMSESSN(RTRM),B'01000000'                          0598
         BNZ   @RF00598                                            0598
@RT00598 DS    0H                                                  0599
*     DO;                           /*                       @YM08441*/
*       IF NSLREQTY=NSLSTPLI THEN   /* STOPLINE I            @YM08441*/
         CLI   NSLREQTY(IEDNSLP),X'09'                             0600
         BNE   @RF00600                                            0600
*         DO;                       /* YES                   @YM08441*/
*           TRMASNXI=ON;            /* RESET IN PROGRESS     @YM08441*/
*           TRMSTMM=ON;             /* STOP MID MSG          @YM08441*/
         OI    TRMASNXI(RTRM),B'00110000'                          0603
*         END;                      /*                       @YM08441*/
*       ELSE                        /* NOT STOPLINE I        @YM08441*/
*         IF NSLREQTY=NSLSTPTR+NSLSTMSG THEN/* STOPTRM MID MSG     0605
*                                                            @YM08441*/
         B     @RC00600                                            0605
@RF00600 CLI   NSLREQTY(IEDNSLP),12                                0605
         BNE   @RF00605                                            0605
*           TRMSTMM=ON;             /* STOP MID MSG          @YM08441*/
         OI    TRMSTMM(RTRM),B'00100000'                           0606
*       CALL SENDRSET;              /* MUST BUILD RESET AND SEND TO
*                                      3705                          */
@RF00605 DS    0H                                                  0607
@RC00600 BAL   @14,SENDRSET                                        0607
*     END;                          /*                       @YM08441*/
*   ELSE                            /* RESOURCE NOT DOING ANYTHING   */
*     DO;                           /* YES                           */
         B     @RC00598                                            0609
@RF00598 DS    0H                                                  0610
*       IF NSLREQTY^=NSLSTPLI&NSLREQTY^=NSLSTOPL&NSLREQTY^=NSLCLOSN
*         THEN                      /* STOPTERM              @YM08540*/
         CLI   NSLREQTY(IEDNSLP),X'09'                             0610
         BE    @RF00610                                            0610
         CLI   NSLREQTY(IEDNSLP),X'02'                             0610
         BE    @RF00610                                            0610
         CLI   NSLREQTY(IEDNSLP),X'0B'                             0610
         BE    @RF00610                                            0610
*         DO;                       /* RESET ALL THE FLAGS           */
*           NSLPLCBR=OFF;           /* RESET SO BUFFER               */
         NI    NSLPLCBR(IEDNSLP),B'01111111'                       0612
*           TRMOCNI=OFF;            /* DO NOT REQ PLCB TO RETURN TO
*                                      OPERATOR CONTROL              */
         NI    TRMOCNI(RTRM),B'11011111'                           0613
*         END;                      /* RESET HAS BEEN DONE           */
*       ELSE                                                       0615
*         ;                         /* STOPLINE DON'T RESET          */
@RF00610 DS    0H                                                  0616
*     END;                          /* DONE WITH DO NOTHING RES      */
*   END STPNPLCB;                   /* STOP WITHOUT PLCB             */
@EL00008 DS    0H                                                  0617
@EF00008 DS    0H                                                  0617
@ER00008 L     @14,@SA00008                                        0617
         BR    @14                                                 0617
*                                                                  0618
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE MAKES SURE THAT THE CORRECT RESET IS BUILT BEFORE*/
*   /* POSTING.                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0618
*SENDRSET:                                                         0618
*   PROC OPTIONS(RETREG,SAVE(14));                                 0618
SENDRSET ST    @14,@SA00009                                        0618
*   RFY                                                            0619
*    (RPRF,                                                        0619
*     IEDQPPTR) RSTD;                                              0619
*   NSLPLCBR=ON;                    /* SET SWITCH IN BFR THAT A PLCB
*                                      WILL RETURN TO OPCNTL         */
         OI    NSLPLCBR(IEDNSLP),B'10000000'                       0620
*   RPRF=NSLBUFFR;                  /* EST. ADDRESSABILITY           */
         L     RPRF,NSLBUFFR-1(,IEDNSLP)                           0621
         LA    RPRF,0(,RPRF)                                       0621
*   NSLBUFFR=''B;                   /* CLEAR THE ERB CHAIN           */
         SLR   @10,@10                                             0622
         STCM  @10,7,NSLBUFFR(IEDNSLP)                             0622
*   CALL BUILD;                     /* READY TO BUILD THE RESET      */
         BAL   @14,BUILD                                           0623
*   IF NSLREQTY=NSLSTPLI THEN       /* STOPLINE,I?                   */
         CLI   NSLREQTY(IEDNSLP),X'09'                             0624
         BNE   @RF00624                                            0624
*     DO;                           /* YES,CHANGE THE MODIFIER       */
*       RFY                                                        0626
*         IEDPIU0 BASED(ADDR(PRFPIUO)+OFFSET);                     0626
*       RFY                                                        0627
*         IEDBDU BASED(ADDR(PIU0RU));                              0627
*       BDUMODIF=CD0CRI;            /* CHANGE MODIFIER TO A RESET  0628
*                                      IMMEDIATE                     */
         LA    @10,PRFPIUO(,IEDQPPTR)                              0628
         MVI   BDUMODIF+15(@10),X'44'                              0628
*       TRMERLCK=OFF;               /* RESET ERROR LOCK      @YM06108*/
         NI    TRMERLCK(RTRM),B'11111011'                          0629
*     END;                          /* MADE ALL CHANGES FOR STPLI    */
*   ELSE                            /* LEAVE THE BDU AS IS           */
*     DO;                           /* CHK FOR STOPLINE,C AND CU     */
         B     @RC00624                                            0631
@RF00624 DS    0H                                                  0632
*       IF NSLREQTY=NSLSTOPL&TRMTYPE=TRMCLUST THEN/* STOPLINE,C AND
*                                      CU THEN                       */
         CLI   NSLREQTY(IEDNSLP),X'02'                             0632
         BNE   @RF00632                                            0632
         CLI   TRMTYPE(RTRM),X'40'                                 0632
         BNE   @RF00632                                            0632
*         BDUMODIF=CD0CREOC;        /* CHANGE MODIFIER TO RESET AT 0633
*                                      THE END OF COMMAND            */
         LA    @10,PRFPIUO(,IEDQPPTR)                              0633
         MVI   BDUMODIF+15(@10),X'60'                              0633
*       ELSE                                                       0634
*         ;                         /* OTHERWISE LEAVE BDU AS IS     */
@RF00632 DS    0H                                                  0635
*     END;                          /* MADE REQ MODIFIER CHANGES     */
*   RPARM=RPRF;                     /* SETUP TO POST                 */
@RC00624 LR    RPARM,RPRF                                          0636
*   RFY                                                            0637
*    (RPRF,                                                        0637
*     IEDQPPTR) UNRSTD;                                            0637
*   CALL POSTELEM;                  /* POST RESET TO BE SENT TO 3705 */
         BAL   @14,POSTELEM                                        0638
*   END SENDRSET;                   /* BUILT AND SENT THE RESET      */
@EL00009 DS    0H                                                  0639
@EF00009 DS    0H                                                  0639
@ER00009 L     @14,@SA00009                                        0639
         BR    @14                                                 0639
*                                                                  0640
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE BUILD THE DEFAULT RESET---- THE RESET         */
*   /* CONDITIONAL----.                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0640
*BUILD:                                                            0640
*   PROC OPTIONS(RETREG,NOSAVE);                                   0640
BUILD    DS    0H                                                  0641
*   RFY                                                            0641
*    (IEDQPPTR,                                                    0641
*     RPRF,                                                        0641
*     RRETURN) RSTD;                                               0641
*   PRFPIUO=OFFSET;                 /* SET UP TO PIU                 */
         MVI   PRFPIUO(IEDQPPTR),X'01'                             0642
*   PRFTIC=INVLDTIC;                /* SET INVALID TIC       @YM04642*/
         MVC   PRFTIC(4,IEDQPPTR),@CB01344                         0643
*   PRFQCBA=SAVTSAO;                /* SETUP QCB ADDRESS             */
         L     @15,AVTSAVTP(,IEDQAPTR)                             0644
         MVC   PRFQCBA(3,IEDQPPTR),SAVTSAO+1(@15)                  0644
*   PRFPRI=PRIOUTBD;                /* SETUP THE PRIORITY            */
         MVI   PRFPRI(IEDQPPTR),X'E4'                              0645
*   IEDPF2=''B;                     /* CLEAR PREFIX TO SET THE     0646
*                                      INDICATOR TO DEBLOCK TO     0646
*                                      CONVERT TTCIN TO NAT          */
         LR    @10,IEDQPPTR                                        0646
         SL    @10,@CF00044                                        0646
         XC    IEDPF2(8,@10),IEDPF2(@10)                           0646
*   PRF2TNTI=ON;                    /* SET THE INDICATOR             */
         OI    PRF2TNTI(@10),B'10000000'                           0647
*   RFY                                                            0648
*     IEDPIU0 BASED(ADDR(PRFPIUO)+OFFSET);                         0648
*   PIU0PAD=PIU0PAD0;               /* PAD                           */
         LA    @10,PRFPIUO(,IEDQPPTR)                              0649
         LA    @07,1                                               0649
         ALR   @07,@10                                             0649
         MVI   PIU0PAD(@07),X'00'                                  0649
*   RFY                                                            0650
*     IEDTH BASED(ADDR(PIU0TH));                                   0650
*   TTHBYTE0=TTH0BYT0;              /* INDICATE BEGIN SEGMENT      0651
*                                      INDICATE END SEGMENT          */
         MVI   TTHBYTE0(@07),X'0C'                                 0651
*   TTHBYTE1=TTH0BYT1;              /* CLEAR                         */
         MVI   TTHBYTE1(@07),X'00'                                 0652
*   TTHDAF=NSLTTCIN;                /* DESTINATION TERM INDEX        */
         MVC   TTHDAF(2,@07),NSLTTCIN(IEDNSLP)                     0653
*   TTHOAF=SAVTTCPU;                /* TCAM PU INDEX                 */
         MVC   TTHOAF(2,@07),SAVTTCPU(@15)                         0654
*   TTHTAG=TTHTAG0;                 /* INDICATE RESET COMMAND SHOULD
*                                      NOT RETURN TO ME              */
         SLR   @15,@15                                             0655
         STCM  @15,3,TTHTAG(@07)                                   0655
*   TTHDCF=LENGTH(IEDPIU0)-LENGTH(IEDTH)+LENGTH(IEDBDU);/* SETUP DATA
*                                      COUNT                         */
         MVC   TTHDCF(2,@07),@CH01241                              0656
*   RFY                                                            0657
*     IEDRH BASED(ADDR(PIU0RH));                                   0657
*   PIU0RH=TRHFID0;                 /* DEFAULT FID0 COMMAND          */
         MVC   PIU0RH(3,@07),@CB01778                              0658
*   RFY                                                            0659
*     IEDBDU BASED(ADDR(PIU0RU));                                  0659
*   IEDBDU=''B;                     /* CLEAR RU PORTION              */
         AL    @10,@CF00102                                        0660
         XC    IEDBDU(6,@10),IEDBDU(@10)                           0660
*   BDUCMND=CD0CTRL;                /* CONTROL COMMAND               */
         MVI   BDUCMND(@10),X'08'                                  0661
*   BDUMODIF=CD0CRC;                /* RESET CONDITIONAL             */
         MVI   BDUMODIF(@10),X'50'                                 0662
*   RFY                                                            0663
*    (IEDQPPTR,                                                    0663
*     RPRF,                                                        0663
*     RRETURN) UNRSTD;                                             0663
*   END BUILD;                      /* BUILT THE RESET               */
@EL00010 DS    0H                                                  0664
@EF00010 DS    0H                                                  0664
@ER00010 BR    @14                                                 0664
*                                                                  0665
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE PROCESSES THE START LINE REQUESTS. THE        */
*   /* STARTLNE SUBROUTINE DETERMINES WHICH TERMINALS ON THE LINE ARE*/
*   /* TO BE PRIMED EITHER BY THE TERMINAL'S GEN'D STATUS OR MESSAGES*/
*   /* ON THE QUE.                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0665
*STARTLNE:                                                         0665
*   PROC OPTIONS(RETREG,SAVE(14));                                 0665
STARTLNE ST    @14,@SA00011                                        0665
*   RTRM=NSLTTEPT;                  /* GET RESOURCE ADDRESS PASSED BY
*                                      THE REQUESTOR                 */
         L     RTRM,NSLTTEPT(,IEDNSLP)                             0666
*   RTRM=RTRM-LENGTH(IEDNTRM);      /* BACKUP TO PREFIX              */
         SL    RTRM,@CF01178                                       0667
*   IF TRMSUBST^=AVTFZERO THEN      /* IS THERE A SUBSTRUCTURE?      */
         LH    @10,TRMSUBST(,RTRM)                                 0668
         N     @10,@CF02262                                        0668
         C     @10,AVTFZERO(,IEDQAPTR)                             0668
         BE    @RF00668                                            0668
*     DO;                           /* YES, COMPLETE THE START     0669
*                                      PROCESSING                    */
*       NSLTTCIN=TRMSUBST;          /* SET UP THE FIRST TNT INDEX OF
*                                      TERMINAL TO BE STARTED        */
         STH   @10,NSLTTCIN(,IEDNSLP)                              0670
*       RPARM=NSLTTCIN;             /* SETUP THE PARAMETER           */
         LR    RPARM,@10                                           0671
*       CALL GETTRM;                /* CALL SUBROUTINE TO OBTAIN   0672
*                                      TERMINAL ENTRY ADDRESS        */
         BAL   @14,GETTRM                                          0672
*       DO UNTIL(TRMTYPE=TRMNSDLC); /* LOOP UNTIL REACH LINE ENTRY 0673
*                                      AGAIN                         */
@DL00673 DS    0H                                                  0674
*         TRMSPACT=ON;              /* SET SUPERIOR RES ACTIVE       */
         OI    TRMSPACT(RTRM),B'00010000'                          0674
*         NSLCTTRM=RTRM;            /* SETUP CURRENT TRM ENTRY       */
         STCM  RTRM,7,NSLCTTRM(IEDNSLP)                            0675
*         IF TRMTYPE=TRMCLUST THEN  /* IS THIS GENERAL POLL CLUSTER  */
         CLI   TRMTYPE(RTRM),X'40'                                 0676
         BNE   @RF00676                                            0676
*           DO;                     /* YES,CHECK FOR SUBENTRIES      */
*             IF TRMSUBST^=AVTFZERO THEN/* SUBSTRUCTURE EXIST?       */
         LH    @10,TRMSUBST(,RTRM)                                 0678
         N     @10,@CF02262                                        0678
         C     @10,AVTFZERO(,IEDQAPTR)                             0678
         BE    @RF00678                                            0678
*               DO;                 /* PROCESS ALL GP TERMS UNDER THE
*                                      CLUSTER                       */
*                 CALL STRGPTRM;    /* YES, START TRMS UNDER THE   0680
*                                      CLUSTER                       */
         BAL   @14,STRGPTRM                                        0680
*                 CALL PRIMER;      /* PRIME GP CLUSTER              */
         BAL   @14,PRIMER                                          0681
*               END;                /* PROCESSED THE GP CLUSTER AND
*                                      ITS TERMINALS                 */
*             ELSE                                                 0683
*               ;                   /* NO SUBSTRUCTURE               */
@RF00678 DS    0H                                                  0684
*           END;                    /* COMPLETED FOR CLUSTER         */
*         ELSE                      /* NOT A CLUSTER                 */
*           CALL PRIMER;            /* REQUEST BRINGUP IF POSSBLE    */
         B     @RC00676                                            0685
@RF00676 BAL   @14,PRIMER                                          0685
*         NSLTTCIN=TRMCOHRT;        /* GET NEXT ADJACENT STRTURE     */
@RC00676 LH    @10,TRMCOHRT(,RTRM)                                 0686
         N     @10,@CF02262                                        0686
         STH   @10,NSLTTCIN(,IEDNSLP)                              0686
*         RPARM=NSLTTCIN;           /* SET UP PARAMETR FOR TNTCDE    */
         LR    RPARM,@10                                           0687
*         CALL GETTRM;              /* GET NEXT TRM ENTRY ADDRESS    */
         BAL   @14,GETTRM                                          0688
*       END;                        /* END OF LOOP                   */
@DE00673 CLI   TRMTYPE(RTRM),X'20'                                 0689
         BNE   @DL00673                                            0689
*     END;                          /* COMPLETE ALL POSSIBLE STRT    */
*   ELSE                                                           0691
*     ;                             /* NO SUBSTRUCTURES              */
@RF00668 DS    0H                                                  0692
*   IF TRMDIAL=ON THEN              /* ONLY FOR DIAL                 */
         TM    TRMDIAL(RTRM),B'00001000'                           0692
         BNO   @RF00692                                            0692
*     DO;                           /* PRIME ALL DIAL IF REQUIRED    */
*       LINETTE1=NSLTTEPT;          /* SETUP INPUT LINE ADDRESS      */
         L     @10,NSLTTEPT(,IEDNSLP)                              0694
         STCM  @10,7,LINETTE1                                      0694
*       LINETTE1=LINETTE1-LENGTH(IEDNTRM);/* BACKUP TO PREFIX        */
         SL    @10,@CF01178                                        0695
         STCM  @10,7,LINETTE1                                      0695
*       SAVETNT=TRMCOHTG;           /* GET NEXT LINE TTCIN TO IN   0696
*                                      ORDER TO OBTAIN RVT PTR       */
         LH    @10,TRMCOHTG(,RTRM)                                 0696
         N     @10,@CF02262                                        0696
         STH   @10,SAVETNT                                         0696
*       RPARM=TRMCOHTG;             /* SETUP PARAMETER               */
         LR    RPARM,@10                                           0697
*       CALL GETTRM;                /* GET TERM ENTRY                */
         BAL   @14,GETTRM                                          0698
*       DO UNTIL(RTRM=LINETTE1);    /* FIND TTCIN OF THIS LINE       */
@DL00699 DS    0H                                                  0700
*         IF TRMTYPE=TRMGRP THEN    /* GROUP                         */
         CLI   TRMTYPE(RTRM),X'00'                                 0700
         BNE   @RF00700                                            0700
*           DO;                     /* YES                           */
*             RPARM=TRMSUBST;       /* GET FIRST LINE                */
         LH    @10,TRMSUBST(,RTRM)                                 0702
         N     @10,@CF02262                                        0702
         LR    RPARM,@10                                           0702
*             SAVETNT=TRMSUBST;     /* SAVE TNT INDEX                */
         STH   @10,SAVETNT                                         0703
*             CALL GETTRM;          /* GET THE TERMINAL ENTRY        */
         BAL   @14,GETTRM                                          0704
*           END;                    /* GOT A VALID TNT INDEX         */
*         ELSE                      /* GET THE NEXT TTCIN            */
*           DO;                     /* GET TTCIN AND TRM ENTRY       */
         B     @RC00700                                            0706
@RF00700 DS    0H                                                  0707
*             SAVETNT=TRMCOHTG;     /* GET THE ADJACENT ENTRY        */
         LH    @10,TRMCOHTG(,RTRM)                                 0707
         N     @10,@CF02262                                        0707
         STH   @10,SAVETNT                                         0707
*             RPARM=TRMCOHTG;       /* SETUP PARAMETER TO IEDQTNT    */
         LR    RPARM,@10                                           0708
*             CALL GETTRM;          /* GET THE TERM ENTRY ADDR       */
         BAL   @14,GETTRM                                          0709
*           END;                    /* FIND FOR NON-GROUP ENTRY      */
*       END;                        /* END OF DO UNTIL               */
@RC00700 DS    0H                                                  0711
@DE00699 L     @10,LINETTE1-1                                      0711
         LA    @10,0(,@10)                                         0711
         CR    RTRM,@10                                            0711
         BNE   @DL00699                                            0711
*       SAVEDLGB=LINETTE1->TRMDESTQ->QCBLGBAD;/* SAVE LGB ADDR     0712
*                                                            @YM06925*/
         SLR   @03,@03                                             0712
         ICM   @03,7,TRMDESTQ(@10)                                 0712
         MVC   SAVEDLGB(3),QCBLGBAD(@03)                           0712
*       RPARM=SAVETNT;              /* SETUP PARAMETER TO IAP04      */
         LH    RPARM,SAVETNT                                       0713
         N     RPARM,@CF02262                                      0713
*       CALL IEDIAP04;              /* GET THE NAT ADDRESS           */
         L     @10,AVTSAVTP(,IEDQAPTR)                             0714
         L     @15,SAVTTNTX(,@10)                                  0714
         BALR  @14,@15                                             0714
*       RFY                                                        0715
*        (RVTPTR,                                                  0715
*         REND,                                                    0715
*         IEDQRVTP,                                                0715
*         IEDQSATP,                                                0715
*         IEDQNATP,                                                0715
*         RENTRY) RSTD;                                            0715
*       RVTPTR=RENTRY;              /* SETUP NETWORK ADDRESS         */
         LR    RVTPTR,RENTRY                                       0716
*       SHIFTLEN=((LENGTH(IEDNATD)*SHFTBITS)-SAVTSUBL);/* GET NO TO
*                                      SHIFT                         */
         L     @14,AVTSAVTP(,IEDQAPTR)                             0717
         LA    @10,16                                              0717
         SLR   @07,@07                                             0717
         IC    @07,SAVTSUBL(,@14)                                  0717
         SLR   @10,@07                                             0717
         STH   @10,SHIFTLEN                                        0717
*       SRL(RVTPTR,SHIFTLEN);       /* SHIFT OUT THE ELEMENT ADDR    */
         SRL   RVTPTR,0(@10)                                       0718
*       RVTPTR=((RVTPTR-ONE)*LENGTH(IEDSATD))+SAVTSAT;/* PT TO THE 0719
*                                      RVT FOR THIS LINE             */
         LR    @10,RVTPTR                                          0719
         BCTR  @10,0                                               0719
         SLA   @10,3                                               0719
         AL    @10,SAVTSAT(,@14)                                   0719
         LR    RVTPTR,@10                                          0719
*       RVTPTR=RVTPTR->SATRNRVT;    /* GET THE RVT TABLE ADDR THAT 0720
*                                      CONTAINS THIS LINE            */
         L     RVTPTR,SATRNRVT(,RVTPTR)                            0720
*       REND=RVTPTR+((RVTPTR->RVTNUM)*LENGTH(RVTINDEX));/* PT TO END */
         LH    REND,RVTNUM(,RVTPTR)                                0721
         ALR   REND,REND                                           0721
         ALR   REND,RVTPTR                                         0721
*       RVTPTR=RVTPTR+LENGTH(RVTINDEX);/* POINT PASSED THE NCP TNT   */
         AL    RVTPTR,@CF00064                                     0722
*       DO WHILE(RVTPTR^=REND&EXITTIME=OFF);/* LOOP UNTIL END OF THE
*                                      TABLE IS REACHED OR EXIT FLAG
*                                      ON                            */
         B     @DE00723                                            0723
@DL00723 DS    0H                                                  0724
*         RPARM=RVTPTR->RVTINDEX;   /* GET THE NEXT TNT INDEX        */
         LH    RPARM,RVTINDEX(,RVTPTR)                             0724
*         IF RPARM^=AVTFZERO THEN   /* EMPTY SLOT IN RVT?            */
         C     RPARM,AVTFZERO(,IEDQAPTR)                           0725
         BE    @RF00725                                            0725
*           DO;                     /* NO, CONTINUE                  */
*             CALL GETTRM;          /* GET TRM ENTRY ADDRESS         */
         BAL   @14,GETTRM                                          0727
*             IF TRMDIAL=ON&TRMTYPE^=TRMCTERM&TRMTYPE^=TRMNSDLC&   0728
*                 TRMDESTQ->QCBLGBAD=SAVEDLGB THEN/* DIAL, NOT CTERM
*                                      , NOT A LINE, AND LGB MATCHES */
         TM    TRMDIAL(RTRM),B'00001000'                           0728
         BNO   @RF00728                                            0728
         CLI   TRMTYPE(RTRM),X'48'                                 0728
         BE    @RF00728                                            0728
         CLI   TRMTYPE(RTRM),X'20'                                 0728
         BE    @RF00728                                            0728
         SLR   @14,@14                                             0728
         ICM   @14,7,TRMDESTQ(RTRM)                                0728
         CLC   QCBLGBAD(3,@14),SAVEDLGB                            0728
         BNE   @RF00728                                            0728
*               DO;                 /* VALID ENTRY CONTINUE          */
*                 IF TRMSPACT=OFF THEN/* HAS BEEN PRIMED     @YM04673*/
         TM    TRMSPACT(RTRM),B'00010000'                          0730
         BNZ   @RF00730                                            0730
*                   DO;             /* NO THEN               @YM04673*/
*                     TRMSPACT=ON;  /* SET SUPERIOR RESOURCE ACT     */
         OI    TRMSPACT(RTRM),B'00010000'                          0732
*                     IF(TRMHELDN=OFF&TRMDESTQ->QCBSTPRI^=QCBCALLN)
*                       THEN        /* NOT HELD AND NOT CALLIN       */
         TM    TRMHELDN(RTRM),B'00000100'                          0733
         BNZ   @RF00733                                            0733
         CLI   QCBSTPRI(@14),X'50'                                 0733
         BE    @RF00733                                            0733
*                       DO;         /* VERIFY WHAT TYPE OF PRIMNG    */
*                         RFY                                      0735
*                          (RPQCBPTR,                              0735
*                           RWORKREG,                              0735
*                           IEDQPPTR,                              0735
*                           IEDQQPTR,                              0735
*                           RQCB) RSTD;                            0735
*                         RQCB=TRMDESTQ;/* GET THE QCB ADDRESS       */
         LR    RQCB,@14                                            0736
*                         IF QCBREUS=ON×QCBNREUS=ON×QCBCORE=ON THEN
         TM    QCBREUS(IEDQQPTR),B'01110000'                       0737
         BZ    @RF00737                                            0737
*                           DO;     /* MIXED OR TSO ONLY QUES?       */
*                             IF QCBSTPRI=QCBCLK THEN/* CLOCK      0739
*                                      SPECIFIED?                    */
         CLI   QCBSTPRI(IEDQQPTR),X'80'                            0739
         BNE   @RF00739                                            0739
*                               CALL DELAYQUE;/* PUT ON TIMEDELAY    */
         BAL   @14,DELAYQUE                                        0740
*                             ELSE  /* NON-CLOCK                     */
*                               DO; /* FIND OUT IF THERE IS DATA     */
         B     @RC00739                                            0741
@RF00739 DS    0H                                                  0742
*                                 RPQCBPTR=IEDQQPTR+LENGTH(IEDQQCB)-
*                                     LENGTH(IEDQPQCB);/* GET THE  0742
*                                      FIRST PRIORITY QCB ADDRESS    */
         LR    RPQCBPTR,IEDQQPTR                                   0742
         SL    RPQCBPTR,@CF02234                                   0742
*                                 RFY                              0743
*                                   IEDQPQCB BASED(RPQCBPTR);/* EST.
*                                      ADDRERSSABILITY               */
*                                 DO UNTIL(QCBFFEFO^=AVTFZERO×QCBPRIPQ=
*                                       AVTEZERO);/* LOOP UNTIL MSG
*                                      ON QUE OR REACHED THE END OF
*                                      QUEUES                        */
@DL00744 DS    0H                                                  0745
*                                   RPQCBPTR=RPQCBPTR+LENGTH(IEDQPQCB);
         AL    RPQCBPTR,@CF01560                                   0745
*                                   /* POINT TO NEXT QUEUE           */
*                                 END;/* LOOP UNTIL CONDITION IS T   */
@DE00744 SLR   @14,@14                                             0746
         ICM   @14,7,QCBFFEFO(RPQCBPTR)                            0746
         C     @14,AVTFZERO(,IEDQAPTR)                             0746
         BNE   @DC00744                                            0746
         CLI   QCBPRIPQ(RPQCBPTR),X'00'                            0746
         BNE   @DL00744                                            0746
@DC00744 DS    0H                                                  0747
*                                 IF QCBFFEFO^=AVTFZERO THEN/* IS  0747
*                                      THERE A MSG?                  */
         SLR   @14,@14                                             0747
         ICM   @14,7,QCBFFEFO(RPQCBPTR)                            0747
         C     @14,AVTFZERO(,IEDQAPTR)                             0747
         BE    @RF00747                                            0747
*                                   CALL REQSEND;/* READY TO SEND    */
         BAL   @14,REQSEND                                         0748
*                                 ELSE/* NO DATA TO SEND             */
*                                   DO;/* FIND OUT IF TIMER IS REQ   */
         B     @RC00747                                            0749
@RF00747 DS    0H                                                  0750
*                                    IF QCBSTPRI=QCBCNTVL THEN/*   0750
*                                      INTERVAL SPECIFIED?           */
         CLI   QCBSTPRI(IEDQQPTR),X'70'                            0750
         BNE   @RF00750                                            0750
*                                     CALL DELAYQUE;/* PUT ON      0751
*                                      TIMEDELAY                     */
         BAL   @14,DELAYQUE                                        0751
*                                    ELSE                          0752
*                                     ;/* NO DO NOTHING              */
@RF00750 DS    0H                                                  0753
*                                   END;/* FINISHED WITH NO MESSAGES */
*                               END;/* FINISHED PROCESSING SEND    0754
*                                      OPERATION REQUEST             */
*                           END;    /* NO TSO ONLY                   */
*                         ELSE                                     0756
*                           ;       /* TSO ONLY                      */
@RF00737 DS    0H                                                  0757
*                         RFY                                      0757
*                          (RPQCBPTR,                              0757
*                           RWORKREG,                              0757
*                           IEDQPPTR,                              0757
*                           IEDQQPTR,                              0757
*                           RQCB) UNRSTD;                          0757
@RC00737 DS    0H                                                  0758
*                       END;        /* VERFIED TYPE OF PRIMING       */
*                   END;            /* FIRST TIME PRIMED     @YM04673*/
*                 ELSE              /* HAS BEEN PRIMED       @YM04673*/
*                   EXITTIME=ON;    /* GETOUT OF THE LOOP@YM04673    */
         B     @RC00730                                            0760
@RF00730 OI    EXITTIME,B'00100000'                                0760
*               END;                /* COMPLETED NECESSARY PRIMNG    */
*             ELSE                  /* DIDN'T PASS ALL OR SNA        */
*               DO;                 /* DETERMINE WHICH               */
         B     @RC00728                                            0762
@RF00728 DS    0H                                                  0763
*                 IF TRMTYPE=TRMSDLC THEN/* SNA LINE?                */
         CLI   TRMTYPE(RTRM),X'21'                                 0763
         BNE   @RF00763                                            0763
*                   EXITTIME=ON;    /* SET THE EXIT SWITCH           */
         OI    EXITTIME,B'00100000'                                0764
*                 ELSE                                             0765
*                   ;               /* CONTINUE LOOP                 */
@RF00763 DS    0H                                                  0766
*               END;                /* FOUND OUT WHICH               */
*           END;                    /* COMPLETED ALL PROCESSING FOR
*                                      NON-ZERO TNT INDEX            */
*         ELSE                                                     0768
*           ;                       /* ZERO TNT INDEX FALL THRU      */
@RF00725 DS    0H                                                  0769
*         RVTPTR=RVTPTR+LENGTH(RVTINDEX);/* BUMP TO THE NEXT         */
@RC00725 AL    RVTPTR,@CF00064                                     0769
*       END;                        /* END OF DO WHILE               */
@DE00723 CR    RVTPTR,REND                                         0770
         BE    @DC00723                                            0770
         TM    EXITTIME,B'00100000'                                0770
         BZ    @DL00723                                            0770
@DC00723 DS    0H                                                  0771
*       EXITTIME=OFF;               /* RESET SWITCH FOR NEXT TIME    */
         NI    EXITTIME,B'11011111'                                0771
*       RFY                                                        0772
*        (RVTPTR,                                                  0772
*         REND,                                                    0772
*         IEDQRVTP,                                                0772
*         IEDQSATP,                                                0772
*         IEDQNATP,                                                0772
*         RENTRY) UNRSTD;                                          0772
*     END;                          /* PERFORMED PRIMING FOR DIAL    */
*   ELSE                                                           0774
*     ;                             /* NON-DIAL FALL THROUGH         */
@RF00692 DS    0H                                                  0775
*   CALL POSTOPCB;                  /* POST BUFFER BACK TO OPCOB     */
         BAL   @14,POSTOPCB                                        0775
*   END STARTLNE;                   /* END OF SUBROUTINE             */
@EL00011 DS    0H                                                  0776
@EF00011 DS    0H                                                  0776
@ER00011 L     @14,@SA00011                                        0776
         BR    @14                                                 0776
*                                                                  0777
*   /*****************************************************************/
*   /*                                                               */
*   /* TO GET TERMINAL ADDRESS BY CALLING THE TNTCODE.               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0777
*GETTRM:                                                           0777
*   PROC OPTIONS(RETREG,SAVE(14));                                 0777
GETTRM   ST    @14,@SA00012                                        0777
*   CALL IEDQTNT;                   /* CALL TO GET TRM ENTRY @       */
         L     @15,AVTRNMPT(,IEDQAPTR)                             0778
         BALR  @14,@15                                             0778
*   RTRM=RPARM-LENGTH(IEDNTRM);     /* EST. ADDRESSABILTY            */
         LR    RTRM,RPARM                                          0779
         SL    RTRM,@CF01178                                       0779
*   END GETTRM;                     /* GET A TRM ENTRY ADDRESS       */
@EL00012 DS    0H                                                  0780
@EF00012 DS    0H                                                  0780
@ER00012 L     @14,@SA00012                                        0780
         BR    @14                                                 0780
*                                                                  0781
*   /*****************************************************************/
*   /*                                                               */
*   /* TO START ALL TERMINALS UNDER A CLUSTER WHEN A STARTLINE       */
*   /* REGUEST IS POSTED TO IEDNSL.                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0781
*STRGPTRM:                                                         0781
*   PROC OPTIONS(RETREG,SAVE(14));                                 0781
STRGPTRM ST    @14,@SA00013                                        0781
*   SAVCUPTR=RTRM;                  /* SAVE CU TRM ENTRY ADDRESS     */
         ST    RTRM,SAVCUPTR                                       0782
*   IF TRMRSACT=ON THEN             /* GEN'D ACTIVE?         @YM04643*/
         TM    TRMRSACT(RTRM),B'10000000'                          0783
         BNO   @RF00783                                            0783
*     TRMGPACT=ON;                  /* SET GP ACTIVE         @YM04643*/
         LA    @15,TRMGPACT(,RTRM)                                 0784
         LR    @14,@15                                             0784
         LA    @10,3                                               0784
         NR    @14,@10                                             0784
         LCR   @14,@14                                             0784
         ALR   @15,@14                                             0784
         L     @10,0(,@15)                                         0784
@GL00024 LR    @03,@10                                             0784
         O     @03,@CB02264+3(@14)                                 0784
         CS    @10,@03,0(@15)                                      0784
         BNE   @GL00024                                            0784
*   ELSE                                                           0785
*     ;                             /* NOT ACTIVE            @YM04643*/
@RF00783 DS    0H                                                  0786
*   TRMSPACT=ON;                    /* SET SUPERIOR RESOURCE ACTIVE
*                                                            @YM04630*/
         OI    TRMSPACT(RTRM),B'00010000'                          0786
*   RPARM=TRMSUBST;                 /* GET FIRST SUBSTRUCTURE        */
         LH    @10,TRMSUBST(,RTRM)                                 0787
         N     @10,@CF02262                                        0787
         LR    RPARM,@10                                           0787
*   NSLTTCIN=TRMSUBST;              /* SETUP CURRENT TNTINDEX        */
         STH   @10,NSLTTCIN(,IEDNSLP)                              0788
*   CALL GETTRM;                    /* GET TRM ENTRY ADDRESS         */
         BAL   @14,GETTRM                                          0789
*   NSLCTTRM=RTRM;                  /* SETUP CURRENT TRM ENTRY @     */
         STCM  RTRM,7,NSLCTTRM(IEDNSLP)                            0790
*   DO UNTIL(TRMTYPE=TRMCLUST);     /* LOOP UNTIL REACH THE CLUST  0791
*                                      AGAIN                         */
@DL00791 DS    0H                                                  0792
*     TRMSPACT=ON;                  /* SET SUPERIOR RESOURCE ACTIVE
*                                                            @YM04630*/
         OI    TRMSPACT(RTRM),B'00010000'                          0792
*     IF SAVCUPTR->TRMRSACT=ON THEN /* IF GNERAL POLL CLUSTER ACTIVE */
         L     @10,SAVCUPTR                                        0793
         TM    TRMRSACT(@10),B'10000000'                           0793
         BNO   @RF00793                                            0793
*       TRMGPACT=ON;                /* YES, SET GP ACTIVE IN SUB     */
         LA    @15,TRMGPACT(,RTRM)                                 0794
         LR    @14,@15                                             0794
         LA    @10,3                                               0794
         NR    @14,@10                                             0794
         LCR   @14,@14                                             0794
         ALR   @15,@14                                             0794
         L     @10,0(,@15)                                         0794
@GL00025 LR    @03,@10                                             0794
         O     @03,@CB02264+3(@14)                                 0794
         CS    @10,@03,0(@15)                                      0794
         BNE   @GL00025                                            0794
*     ELSE                                                         0795
*       ;                           /* NO IT IS INACTIVE             */
@RF00793 DS    0H                                                  0796
*     CALL PRIMER;                  /* REQUEST BRINGUP IF POSSBLE    */
         BAL   @14,PRIMER                                          0796
*     RPARM=TRMCOHRT;               /* GET NEXT TNT INDEX            */
         LH    @10,TRMCOHRT(,RTRM)                                 0797
         N     @10,@CF02262                                        0797
         LR    RPARM,@10                                           0797
*     NSLTTCIN=TRMCOHRT;            /* EST. CURRENT TNT INDEX        */
         STH   @10,NSLTTCIN(,IEDNSLP)                              0798
*     CALL GETTRM;                  /* GET TRM ENTRY ADDRESS         */
         BAL   @14,GETTRM                                          0799
*     NSLCTTRM=RTRM;                /* SETUP CURRENT TRM ENTRY @     */
         STCM  RTRM,7,NSLCTTRM(IEDNSLP)                            0800
*   END;                            /* COMPLETED PRIMMING FOR      0801
*                                      TERMINALS UNDER A CLUSTER     */
@DE00791 CLI   TRMTYPE(RTRM),X'40'                                 0801
         BNE   @DL00791                                            0801
*   END STRGPTRM;                   /* END START GP TERMS            */
@EL00013 DS    0H                                                  0802
@EF00013 DS    0H                                                  0802
@ER00013 L     @14,@SA00013                                        0802
         BR    @14                                                 0802
*                                                                  0803
*   /*****************************************************************/
*   /*                                                               */
*   /* PRIME SUBROUTINE DETERMINES BASED ON THE TYPE OF              */
*   /* RESOURCE,MESSAGES ON THE QUEUE CLOCK OR INTERVAL SPECIFIED,   */
*   /* SUPERIOR RESOURCE ACTIVE AND THE RESOURCE GEN'D ACTIVE TO     */
*   /* REQUEST A SEND OR RECEIVE ON BEHALF OF THE RESOURCE.          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0803
*PRIMER:                                                           0803
*   PROC OPTIONS(RETREG,SAVE(14));                                 0803
PRIMER   ST    @14,@SA00014                                        0803
*   RFY                                                            0804
*    (RWORKREG,                                                    0804
*     IEDQQPTR) RSTD;               /* RESTRICT REGS         @YM04696*/
*   IEDQQPTR=TRMDESTQ;              /* SET QCB BASE          @YM04696*/
         SLR   IEDQQPTR,IEDQQPTR                                   0805
         ICM   IEDQQPTR,7,TRMDESTQ(RTRM)                           0805
*   IF TRMSNA=OFF THEN              /* IS IT PRE-SNA?                */
         TM    TRMSNA(RTRM),B'00000010'                            0806
         BNZ   @RF00806                                            0806
*     DO;                           /* YES, PRIME ONLY PRE-SNA       */
*       IF TRMSPACT=ON THEN         /* SUPERIOR RESOURCE ACTIVE?     */
         TM    TRMSPACT(RTRM),B'00010000'                          0808
         BNO   @RF00808                                            0808
*         DO;                       /* YES, THEN CONTINUE TO PRME    */
*           IF TRMTYPE^=TRMCLUST&TRMTYPE^=TRMCTERM THEN/* GP CU OR 0810
*                                      CTERM NO              @YM04672*/
         CLI   TRMTYPE(RTRM),X'40'                                 0810
         BE    @RF00810                                            0810
         CLI   TRMTYPE(RTRM),X'48'                                 0810
         BE    @RF00810                                            0810
*             DO;                   /* NO CHECK FOR DATA TO SEND     */
*               IF QCBREUS=ON×QCBNREUS=ON×QCBCORE=ON THEN          0812
         TM    QCBREUS(IEDQQPTR),B'01110000'                       0812
         BZ    @RF00812                                            0812
*                 DO;               /* MIXED OR TCAM QUES            */
*                   RFY                                            0814
*                     RPQCBPTR RSTD;                               0814
*                   RPQCBPTR=IEDQQPTR+LENGTH(IEDQQCB)-LENGTH(IEDQPQCB);
         LR    RPQCBPTR,IEDQQPTR                                   0815
         SL    RPQCBPTR,@CF02234                                   0815
*                                   /* GET THE FIRST PRIORITY QCB  0816
*                                      ADDRESS                       */
*                   RFY                                            0816
*                     IEDQPQCB BASED(RPQCBPTR);/* EST. ADDRESSABILTY */
*                   DO UNTIL(QCBFFEFO^=AVTFZERO×QCBPRIPQ=AVTEZERO);/*
*                                      LOOP UNTIL MSG IS FOUND OR END
*                                      OF THE QUE HAS BEEN REACHED   */
@DL00817 DS    0H                                                  0818
*                     RPQCBPTR=RPQCBPTR+LENGTH(IEDQPQCB);/* POINT TO
*                                      NEXT QUEUE                    */
         AL    RPQCBPTR,@CF01560                                   0818
*                   END;            /* COMPLETED THE SCAN FOR MSG    */
@DE00817 SLR   @06,@06                                             0819
         ICM   @06,7,QCBFFEFO(RPQCBPTR)                            0819
         C     @06,AVTFZERO(,IEDQAPTR)                             0819
         BNE   @DC00817                                            0819
         CLI   QCBPRIPQ(RPQCBPTR),X'00'                            0819
         BNE   @DL00817                                            0819
@DC00817 DS    0H                                                  0820
*                   IF QCBFFEFO^=AVTFZERO THEN/* DATA FOUND?         */
         SLR   @06,@06                                             0820
         ICM   @06,7,QCBFFEFO(RPQCBPTR)                            0820
         C     @06,AVTFZERO(,IEDQAPTR)                             0820
         BE    @RF00820                                            0820
*                     DO;           /* YES MAKE CLOCK CHKS DON'T SEND
*                                      IF CLOCK                      */
*                       IF QCBSTPRI=QCBCLK THEN/* IS IT CLOCK        */
         CLI   QCBSTPRI(IEDQQPTR),X'80'                            0822
         BNE   @RF00822                                            0822
*                         CALL TIMEDLAY;/* YES, CHECK FOR TIME DELAY */
         BAL   @14,TIMEDLAY                                        0823
*                       ELSE        /* FALL THROUGH TRY PRIME RCV    */
*                         CALL REQSEND;/* OK TO REQUEST A SEND       */
         B     @RC00822                                            0824
@RF00822 BAL   @14,REQSEND                                         0824
*                     END;          /* COMPLETED SEND PRIMIMG        */
*                   ELSE            /* VERIFY IF DIAL                */
*                     CALL DIALCHKS;/* DETERMINE IF A DIAL TRM       */
         B     @RC00820                                            0826
@RF00820 BAL   @14,DIALCHKS                                        0826
*                 END;              /* DID SCAN BECAUSE OF NON- TSO
*                                      ONLY QUEUES AND GENRAL        */
*               ELSE                                               0828
*                 ;                 /* POLL CLUSTER DON'T SCAN     0828
*                                      PRIORITY QUEUES               */
@RF00812 DS    0H                                                  0829
*             END;                  /* PRIMED NON-GEN. POLL TERM     */
*           ELSE                                                   0830
*             ;                     /* GP CU OR CTERM        @YM04672
*                                      FALL THROUGH TO PRIME         */
@RF00810 DS    0H                                                  0831
*         END;                      /* COMPLETED SEND PRIMING BECAUSE
*                                      S. RES. WAS ACT               */
*       ELSE                        /* SUPERIOR RES IS INACTIVE      */
*         INTEXIT=ON;               /* READY TO EXIT SET INDICATR    */
         B     @RC00808                                            0832
@RF00808 OI    INTEXIT,B'10000000'                                 0832
*       RFY                                                        0833
*         RPQCBPTR UNRSTD;                                         0833
@RC00808 DS    0H                                                  0834
*       RFY                                                        0834
*         RENTRY RSTD;                                             0834
*       IF INTEXIT=OFF THEN         /* EXECUTE ONLY IF IT IS NOT     */
         TM    INTEXIT,B'10000000'                                 0835
         BNZ   @RF00835                                            0835
*         DO;                       /* TIME TO EXIT                  */
*           IF QCBPLCBN=OFF THEN    /* IF PLCB IS NOT ASSIGNED       */
         LR    @14,IEDQQPTR                                        0837
         SL    @14,@CF00044                                        0837
         TM    QCBPLCBN(@14),B'10000000'                           0837
         BNZ   @RF00837                                            0837
*             IF QCBRCVRQ=OFF THEN  /* HAS A PLCB BEEN REQUESTED     */
         TM    QCBRCVRQ(@14),B'00010000'                           0838
         BNZ   @RF00838                                            0838
*               IF(TRMTYPE=TRMCLUST&TRMGPACT=ON)×(TRMGPACT=OFF&TRMRSACT
*                   =ON) THEN       /* CLUSTER ENTRY AND GPACTIVE OR
*                                                            @YM08386
*                                      IS THIS RESOURCE ACTIVE?      */
         CLI   TRMTYPE(RTRM),X'40'                                 0839
         BNE   @GL00028                                            0839
         TM    TRMGPACT(RTRM),B'00001000'                          0839
         BO    @RT00839                                            0839
@GL00028 TM    TRMRSACT(RTRM),B'10000000'                          0839
         BNO   @RF00839                                            0839
         TM    TRMGPACT(RTRM),B'00001000'                          0839
         BNZ   @RF00839                                            0839
@RT00839 DS    0H                                                  0840
*                 DO;               /* GO AHEAD INITIATE PRIMING     */
*                   QCBRCVRQ=ON;    /* REQUEST A PLCB                */
         LR    @14,IEDQQPTR                                        0841
         AL    @14,@CF02259                                        0841
         OI    QCBRCVRQ-4(@14),B'00010000'                         0841
*                   RPARM=RQCB;     /* SET PARAMETER                 */
         LR    RPARM,RQCB                                          0842
*                   CALL IEDIAP;    /* GET A PLCB                    */
         L     @06,AVTSAVTP(,IEDQAPTR)                             0843
         L     @15,SAVTPREQ(,@06)                                  0843
         BALR  @14,@15                                             0843
*                   IF RENTRY^=AVTFZERO THEN/* RECEIVED A PLCB       */
         C     RENTRY,AVTFZERO(,IEDQAPTR)                          0844
         BE    @RF00844                                            0844
*                     CALL POSTR;   /* POST PLCB TO ITSELF           */
         BAL   @14,POSTR                                           0845
*                   ELSE                                           0846
*                     ;             /* NO QUEUED REQUEST             */
@RF00844 DS    0H                                                  0847
*                 END;              /* COMPLETED NECESSARY PRIMNG    */
*               ELSE                                               0848
*                 ;                 /* RESOURCE DOESN'T REQ PLCB     */
@RF00839 DS    0H                                                  0849
*             ELSE                                                 0849
*               ;                   /* PLCB HAD BEEN REQUESTED       */
@RF00838 DS    0H                                                  0850
*           ELSE                                                   0850
*             ;                     /* PLCB WAS ASSIGNED GET OUT     */
@RF00837 DS    0H                                                  0851
*           IF TRMGPACT=ON&TRMTYPE^=TRMCLUST THEN/* GEN POLL @YM08386*/
         TM    TRMGPACT(RTRM),B'00001000'                          0851
         BNO   @RF00851                                            0851
         CLI   TRMTYPE(RTRM),X'40'                                 0851
         BE    @RF00851                                            0851
*             TRMINPTP=ON;          /* INDICATE INPUT PENDING        */
         OI    TRMINPTP(RTRM),B'01000000'                          0852
*           ELSE                                                   0853
*             ;                     /* DON'T SET GPCU OR SPEC POLL 0853
*                                                            @YM08386*/
@RF00851 DS    0H                                                  0854
*           RFY                                                    0854
*             RENTRY UNRSTD;                                       0854
*         END;                      /* FINISHED RECEIVE PRIMING      */
*     END;                          /* BSC/START/STOP                */
*   ELSE                            /* NOT BSC/START/STOP RES.       */
*     IF TRMSESRQ=OFF THEN          /* SNA DEVICES           @XM05749*/
         B     @RC00806                                            0857
@RF00806 TM    TRMSESRQ(RTRM),B'00001000'                          0857
         BNZ   @RF00857                                            0857
*       CALL SNAPRIME;              /* PRIME SNA LU'S        @YM08047*/
         BAL   @14,SNAPRIME                                        0858
*     ELSE                                                         0859
*       ;                           /* COMPLETED PRIMING FOR SNA   0859
*                                                            @XM05749*/
@RF00857 DS    0H                                                  0860
*   RFY                                                            0860
*    (RWORKREG,                                                    0860
*     IEDQQPTR) UNRSTD;             /* RELEASE REGS          @YM04696*/
@RC00806 DS    0H                                                  0861
*   INTEXIT=OFF;                    /* REST INTERNALSUBRTNE FLAG     */
         NI    INTEXIT,B'01111111'                                 0861
*   END PRIMER;                     /* END OF PRIME SUBROUTINE       */
@EL00014 DS    0H                                                  0862
@EF00014 DS    0H                                                  0862
@ER00014 L     @14,@SA00014                                        0862
         BR    @14                                                 0862
*                                                                  0863
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE CHECKS TO SEE IF ANY MESSAGES ARE QUEUED. OUTPUT-*/
*   /* QCBFFEFO=0 IF NO MSGS ON QUEUE, AND QCBFFEFO^=0 IF ANY MSGS   */
*   /* ARE ON QUEUE.                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0863
*DATASEND:                                                         0863
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0863
DATASEND DS    0H                                                  0864
*   RFY                                                            0864
*    (RPQCBPTR,                                                    0864
*     IEDQPPTR,                                                    0864
*     IEDQQPTR,                                                    0864
*     RQCB) RSTD;                                                  0864
*   RPQCBPTR=IEDQQPTR+LENGTH(IEDQQCB)-LENGTH(IEDQPQCB);/* GET THE  0865
*                                      FIRST PRIORITY QCB ADDRESS    */
         LR    RPQCBPTR,IEDQQPTR                                   0865
         SL    RPQCBPTR,@CF02234                                   0865
*   RFY                                                            0866
*     IEDQPQCB BASED(RPQCBPTR);     /* EST. ADDRERSSABILITY          */
*   DO UNTIL(QCBFFEFO^=AVTFZERO×QCBPRIPQ=AVTEZERO);/* LOOP UNTIL MSG
*                                      ON QUE OR REACHED THE END OF
*                                      QUEUES                        */
@DL00867 DS    0H                                                  0868
*     RPQCBPTR=RPQCBPTR+LENGTH(IEDQPQCB);/* POINT TO NEXT QUEUE      */
         AL    RPQCBPTR,@CF01560                                   0868
*   END;                            /* LOOP UNTIL CONDITION IS T     */
@DE00867 SLR   @10,@10                                             0869
         ICM   @10,7,QCBFFEFO(RPQCBPTR)                            0869
         C     @10,AVTFZERO(,IEDQAPTR)                             0869
         BNE   @DC00867                                            0869
         CLI   QCBPRIPQ(RPQCBPTR),X'00'                            0869
         BNE   @DL00867                                            0869
@DC00867 DS    0H                                                  0870
*   RFY                                                            0870
*    (RPQCBPTR,                                                    0870
*     IEDQPPTR,                                                    0870
*     IEDQQPTR,                                                    0870
*     RQCB) UNRSTD;                                                0870
*   END DATASEND;                   /* FOR SENDING DATA              */
@EL00015 DS    0H                                                  0871
@EF00015 DS    0H                                                  0871
@ER00015 BR    @14                                                 0871
*                                                                  0872
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE DOES PRIMING, IF REQUIRED, FOR SNA LOGICAL UNITS.*/
*   /*                                                       @YM08047*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0872
*   RFY                                                            0872
*    (RPQCBPTR,                                                    0872
*     IEDQPPTR,                                                    0872
*     IEDQQPTR,                                                    0872
*     RQCB) RSTD;                   /*                       @YM08480*/
*   RFY                                                            0873
*     IEDQPQCB BASED(RPQCBPTR);     /*                       @YM08047*/
*SNAPRIME:                                                         0874
*   PROC OPTIONS(RETREG,SAVE(14));  /*                       @YM08047*/
SNAPRIME ST    @14,@SA00016                                        0874
*   IF TRMAUTO=ON THEN              /* AUTO BIND             @YM08047*/
         TM    TRMAUTO(RTRM),B'10000000'                           0875
         BNO   @RF00875                                            0875
*     DO;                           /* YES                   @YM08047*/
*       IF QCBSTPRI=QCBCLK THEN     /* WAS CLOCK SPECIFIED   @ZM46761*/
         CLI   QCBSTPRI(IEDQQPTR),X'80'                            0877
         BNE   @RF00877                                            0877
*         CALL DELAYQUE;            /* YES, CLOCK OVERRIDES AUT BIND
*                                                            @ZM46761*/
         BAL   @14,DELAYQUE                                        0878
*       ELSE                        /* AUTO BIND AND NO CLOCK      0879
*                                                            @ZM46761*/
*         DO;                       /* PRIME AUTO BIND LU    @ZM46761*/
         B     @RC00877                                            0879
@RF00877 DS    0H                                                  0880
*           IF QCBCORE=ON×QCBREUS=ON×QCBNREUS=ON THEN/* TSO ONLY Q 0880
*                                                            @YM08047*/
         TM    QCBCORE(IEDQQPTR),B'01110000'                       0880
         BZ    @RF00880                                            0880
*             DO;                   /* NO                    @YM08047*/
*               CALL DATASEND;      /* CHECK FOR MSG ON Q    @YM08047*/
         BAL   @14,DATASEND                                        0882
*               IF QCBFFEFO^=0 THEN /* MSG ON Q              @YM08047*/
         ICM   @10,7,QCBFFEFO(RPQCBPTR)                            0883
         BZ    @RF00883                                            0883
*                 QCBSNDRQ=ON;      /* YES, REQUEST SEND SCHED TO BE
*                                      PUT IN QCB            @YM08047*/
         LR    @10,IEDQQPTR                                        0884
         AL    @10,@CF02259                                        0884
         OI    QCBSNDRQ-4(@10),B'00100000'                         0884
*             END;                  /*                       @YM08047*/
@RF00883 DS    0H                                                  0886
*/*                                                          @YM08047*/
*                                                                  0886
*           TRMSESRQ=ON;            /* INDICATE SESSION HAS BEEN   0886
*                                      REQUESTED             @YM08047*/
@RF00880 LA    @03,TRMSESRQ(,RTRM)                                 0886
         LR    @15,@03                                             0886
         LA    @10,3                                               0886
         NR    @15,@10                                             0886
         LCR   @15,@15                                             0886
         ALR   @03,@15                                             0886
         L     @10,0(,@03)                                         0886
@GL00032 LR    @04,@10                                             0886
         O     @04,@CB02264+3(@15)                                 0886
         CS    @10,@04,0(@03)                                      0886
         BNE   @GL00032                                            0886
*           CALL POSTQCB;           /* POST QCB TO LUS TO START    0887
*                                      SESSION               @YM08047*/
         BAL   @14,POSTQCB                                         0887
*         END;                      /*                       @YM08047*/
*     END;                          /*                       @YM08047*/
*   ELSE                            /* NOT AUTO BIND         @YM08047*/
*     DO;                           /*                       @YM08047*/
         B     @RC00875                                            0890
@RF00875 DS    0H                                                  0891
*       IF TRMLUIT=ON THEN          /* ONLY LU ALLOWED TO START    0891
*                                      SESSION               @YM08047*/
         TM    TRMLUIT(RTRM),B'01000000'                           0891
         BNO   @RF00891                                            0891
*         DO;                       /* YES                   @YM08047*/
*           IF QCBCORE=ON×QCBREUS=ON×QCBNREUS=ON THEN/* TSO ONLY Q 0893
*                                                            @YM08047*/
         TM    QCBCORE(IEDQQPTR),B'01110000'                       0893
         BZ    @RF00893                                            0893
*             DO;                   /* NO                    @YM08047*/
*               CALL DATASEND;      /* CHECK FOR MSG ON Q    @YM08047*/
         BAL   @14,DATASEND                                        0895
*               IF QCBFFEFO^=0 THEN /* MSG ON Q              @YM08047*/
         ICM   @10,7,QCBFFEFO(RPQCBPTR)                            0896
         BZ    @RF00896                                            0896
*                 QCBSNDRQ=ON;      /* INDICATE SEND SCHED IS TO BE
*                                      PUT IN STCB CHAIN WHEN PLCB IS
*                                      ASSIGNED              @YM08047*/
         LR    @10,IEDQQPTR                                        0897
         AL    @10,@CF02259                                        0897
         OI    QCBSNDRQ-4(@10),B'00100000'                         0897
*             END;                  /*                       @YM08047*/
*         END;                      /*                       @YM08047*/
*       ELSE                        /* NOT LU INIT ONLY      @YM08047*/
*         DO;                       /*                       @YM08047*/
         B     @RC00891                                            0900
@RF00891 DS    0H                                                  0901
*           IF QCBCORE=ON×QCBREUS=ON×QCBNREUS=ON THEN/* TSO ONLY Q 0901
*                                                            @YM08047*/
         TM    QCBCORE(IEDQQPTR),B'01110000'                       0901
         BZ    @RF00901                                            0901
*             DO;                   /* NO                    @YM08047*/
*               CALL DATASEND;      /* CHECK FOR MSG ON Q    @YM08047*/
         BAL   @14,DATASEND                                        0903
*               IF QCBFFEFO^=0&QCBSTPRI^=QCBCLK THEN/* DATA ON Q AND
*                                      LU NOT CLOCK          @XM05734*/
         ICM   @10,7,QCBFFEFO(RPQCBPTR)                            0904
         BZ    @RF00904                                            0904
         CLI   QCBSTPRI(IEDQQPTR),X'80'                            0904
         BE    @RF00904                                            0904
*                 CALL REQSEND;     /* YES, REQUEST SEND OPERATION 0905
*                                                            @YM08047*/
         BAL   @14,REQSEND                                         0905
*               ELSE                /* NO MSG ON Q           @YM08047*/
*                 IF QCBSTPRI>=QCBCNTVL THEN/* CLOCK OR CINTVAL    0906
*                                                            @YM08047*/
         B     @RC00904                                            0906
@RF00904 CLI   QCBSTPRI(IEDQQPTR),X'70'                            0906
         BL    @RF00906                                            0906
*                   CALL DELAYQUE;  /* YES, PUT QCB ON TIME DELAY  0907
*                                                            @YM08047*/
         BAL   @14,DELAYQUE                                        0907
*             END;                  /*                       @YM08047*/
*         END;                      /*                       @YM08047*/
*     END;                          /*                       @YM08047*/
*   END SNAPRIME;                   /*                       @YM08047*/
@EL00016 DS    0H                                                  0911
@EF00016 DS    0H                                                  0911
@ER00016 L     @14,@SA00016                                        0911
         BR    @14                                                 0911
*   RFY                                                            0912
*    (RPQCBPTR,                                                    0912
*     IEDQQPTR,                                                    0912
*     IEDQPPTR,                                                    0912
*     RQCB) UNRSTD;                 /*                       @YM08047*/
*                                                                  0913
*   /*****************************************************************/
*   /*                                                               */
*   /* TO DETERMINE IF QCB IS ON TIME DELAY OR IF QCB NEEDS TO BE.   */
*   /* THE TIME IS ADJUSTED BASED ON THE INTERVAL SPECIFIED,FOR      */
*   /* EXAMPLE, IF TIME IS GREATER THAN 12 HOURS THEN THE TIME SHOULD*/
*   /* BE ADJUSTED.                                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0913
*TIMEDLAY:                                                         0913
*   PROC OPTIONS(RETREG,SAVE(14));                                 0913
TIMEDLAY ST    @14,@SA00017                                        0913
*   RFY                                                            0914
*    (IEDQQPTR,                                                    0914
*     RQCB,                                                        0914
*     RWORKREG,                                                    0914
*     RTIMENOW) RSTD;                                              0914
*   INTEXIT=ON;                     /* SET EXIT FLAG TO GET OUT AS 0915
*                                      SOON AS POSSIBLE              */
         OI    INTEXIT,B'10000000'                                 0915
*   IF QCBDELAY=OFF                 /* QCB ON TIME DELAY     @OY14058*/
*       &(QCBSTPRI=QCBCLK           /* AND CLOCK OR          @OY14058*/
*       ×(QCBSTPRI=QCBCNTVL&QCBINTVL>ZERO)) THEN/* CNTVL>0   @OY14058*/
         TM    QCBDELAY(IEDQQPTR),B'00000010'                      0916
         BNZ   @RF00916                                            0916
         CLI   QCBSTPRI(IEDQQPTR),X'80'                            0916
         BE    @RT00916                                            0916
         CLI   QCBSTPRI(IEDQQPTR),X'70'                            0916
         BNE   @RF00916                                            0916
         CLC   QCBINTVL(2,IEDQQPTR),@CH00621                       0916
         BNH   @RF00916                                            0916
@RT00916 DS    0H                                                  0917
*     DO;                           /* NO, PUT QCB ON TIME DELAY     */
*       RWORKREG=QCBINTVL;          /* PICK UP INTERVAL TO BE USED TO
*                                      CALCULATE TIME                */
         LH    RWORKREG,QCBINTVL(,IEDQQPTR)                        0918
         N     RWORKREG,@CF02262                                   0918
*       IF QCBSTPRI=QCBCLK THEN     /* IF CLOCK IS SPECIFIED THEN    */
         CLI   QCBSTPRI(IEDQQPTR),X'80'                            0919
         BNE   @RF00919                                            0919
*         DO;                       /* ADJUST THE TIME IF NEEDED     */
*           RWORKREG=RWORKREG*DOUBLE;/* DOUBLE THE TIME              */
         ALR   RWORKREG,RWORKREG                                   0921
*           GEN(TIME BIN);                                         0922
         TIME BIN
*           RTIMENOW=RZERO/HUNDRED; /* SETUP TIME NOW                */
         LR    @05,RZERO                                           0923
         SLR   @04,@04                                             0923
         D     @04,@CF02044                                        0923
         LR    RTIMENOW,@05                                        0923
*           IF RTIMENOW>=RWORKREG THEN/* IS TIME NOW GREATER THAN  0924
*                                      CALLUP TIME                   */
         CR    RTIMENOW,RWORKREG                                   0924
         BL    @RF00924                                            0924
*             RWORKREG=RWORKREG+TWNTY4HR;/* ADD 1 DAY TO CALLUP TIME */
         AL    RWORKREG,@CF02042                                   0925
*           RWORKREG=RWORKREG-RTIMENOW;/* GET INTERVAL               */
@RF00924 SLR   RWORKREG,RTIMENOW                                   0926
*         END;                      /* ADJUST TIMER FOR CLOCK        */
*       ELSE                                                       0928
*         ;                         /* INTERVAL SPECIFIED            */
@RF00919 DS    0H                                                  0929
*       IF RWORKREG>SECPR12H THEN   /* IS INTERVAL >=4320 SECS?      */
         L     @06,@CF02040                                        0929
         CR    RWORKREG,@06                                        0929
         BNH   @RF00929                                            0929
*         DO;                       /* YES, ADJUST THE TIME TO FIT IN
*                                      A 12 HR PERIOD                */
*           RWORKREG=RWORKREG-SECPR12H;/* ADJUST TO USE TIMER POP  0931
*                                      BASED ON AN INTERVAL          */
         SLR   RWORKREG,@06                                        0931
*           QCBTIME=ON;             /* INDICATE CLOCK SPECIFIED    0932
*                                      GREATER THAN 12 HOURS         */
         OI    QCBTIME(IEDQQPTR),B'00000001'                       0932
*         END;                      /* END OF CLOCK SPECIFIED GREATER
*                                      THAN 12 HOURS                 */
*       ELSE                                                       0934
*         ;                         /* DO NOT CHANGE INTERVAL FOR  0934
*                                      CLOCK SPECIFIED < = 12 HRS    */
@RF00929 DS    0H                                                  0935
*       QCBEOLDT=RWORKREG;          /* STORE DELAY TIME              */
         STH   RWORKREG,QCBEOLDT(,IEDQQPTR)                        0935
*       QCBLKRLN=QCBLKRLN&&QCBLKRLN;/* INDICATE QCB OFFSET           */
         XC    QCBLKRLN(1,IEDQQPTR),QCBLKRLN(IEDQQPTR)             0936
*       IF QCBSTCHN=ADDR(QCBSTVTO) THEN/* IS SEND SCHEDULER IN THE 0937
*                                      QCB?                          */
         LA    @06,QCBSTVTO(,IEDQQPTR)                             0937
         L     @15,QCBSTCHN-1(,IEDQQPTR)                           0937
         LA    @15,0(,@15)                                         0937
         CR    @06,@15                                             0937
         BNE   @RF00937                                            0937
*         QCBSTCHN=QCBSLINK;        /* REMOVE SEND SCHEDULER         */
         MVC   QCBSTCHN(3,IEDQQPTR),QCBSLINK(IEDQQPTR)             0938
*       ELSE                                                       0939
*         ;                         /* SEND SCHEDULER WASN'T IN      */
@RF00937 DS    0H                                                  0940
*       QCBELCHN=RQCB;              /* SET QCB ADDRESS       @YM08084*/
         STCM  RQCB,7,QCBELCHN(IEDQQPTR)                           0940
*       QCBPRI=PRIEDISP;            /* SET POST PRIORITY     @YM08084*/
         MVI   QCBPRI(IEDQQPTR),X'E0'                              0941
*       RPARM=RQCB;                 /* SET PARAMETER TO HG           */
         LR    RPARM,RQCB                                          0942
*       CALL IEDQHG;                /* PUT QCB ON TIME DELAY         */
         L     @15,AVTHG01(,IEDQAPTR)                              0943
         BALR  @14,@15                                             0943
*     END;                          /* END OF PROCESSING FOR QCB NOT
*                                      ON TIME DELAY                 */
*   ELSE                                                           0945
*     ;                             /* QCB ALREADY ON TIME DELAY     */
@RF00916 DS    0H                                                  0946
*   RFY                                                            0946
*    (IEDQQPTR,                                                    0946
*     RQCB,                                                        0946
*     RWORKREG,                                                    0946
*     RTIMENOW) UNRSTD;                                            0946
*   END TIMEDLAY;                   /* COMPLETED TIMER SEARCH        */
@EL00017 DS    0H                                                  0947
@EF00017 DS    0H                                                  0947
@ER00017 L     @14,@SA00017                                        0947
         BR    @14                                                 0947
*                                                                  0948
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE DETERMINES THE TYPE OF DIAL TERMINAL AND BASED*/
*   /* ON HOW THE RESOURCE IS DEFINED PRIMES THE DEVICE IF POSSIBLE. */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0948
*DIALCHKS:                                                         0948
*   PROC OPTIONS(RETREG,SAVE(14));                                 0948
DIALCHKS ST    @14,@SA00018                                        0948
*   RFY                                                            0949
*    (RQCB,                                                        0949
*     IEDQQPTR) RSTD;                                              0949
*   IF TRMDIAL=ON THEN              /* DIAL TERMINAL?                */
         TM    TRMDIAL(RTRM),B'00001000'                           0950
         BNO   @RF00950                                            0950
*     DO;                           /* YES, CHK FOR INVTL-CLK        */
*       IF QCBSTPRI>=QCBCNTVL THEN  /* IS CLK OR INTVL SPECIFIED?    */
         CLI   QCBSTPRI(IEDQQPTR),X'70'                            0952
         BL    @RF00952                                            0952
*         CALL TIMEDLAY;            /* DIAL AND INTVL-CLK SPEC.      */
         BAL   @14,TIMEDLAY                                        0953
*       ELSE                        /* NO CLK OR INTVL CHK CTERM     */
*         DO;                       /* PROCESS NON-CLK-INTVL         */
         B     @RC00952                                            0954
@RF00952 DS    0H                                                  0955
*           IF TRMTYPE^=TRMCTERM THEN/* DIAL NO CLK-INTVL-NO CTERM   */
         CLI   TRMTYPE(RTRM),X'48'                                 0955
         BE    @RF00955                                            0955
*             INTEXIT=ON;           /* SET EXIT FLAG TO GET OUT AS 0956
*                                      SOON AS POSSIBLE              */
         OI    INTEXIT,B'10000000'                                 0956
*           ELSE                                                   0957
*             ;                     /* CTERM ENTRY DO NOTHING NOW    */
@RF00955 DS    0H                                                  0958
*         END;                      /* COMPLETED NON CLK-INVTL       */
*     END;                          /* END OF DIAL PRIMING           */
*   ELSE                                                           0960
*     ;                             /* NON-DIAL FALL THROUGH AND   0960
*                                      PRIMED                        */
@RF00950 DS    0H                                                  0961
*   RFY                                                            0961
*    (IEDQQPTR,                                                    0961
*     RQCB) UNRSTD;                                                0961
*   END DIALCHKS;                   /* COMPLETED PRIMING FOR DIAL    */
@EL00018 DS    0H                                                  0962
@EF00018 DS    0H                                                  0962
@ER00018 L     @14,@SA00018                                        0962
         BR    @14                                                 0962
*                                                                  0963
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE VERIFIES IF A QCB IS ON TIME DELAY OR IF IT   */
*   /* NEEDS TO BE. IF THE QCB IS NOT ON TIME DELAY, THEN THE TIME ON*/
*   /* THE QUE IS DETERMINED BY THE CLOCK OR INTERVAL SPECIFIED AND  */
*   /* THE TIME OF DAY.                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0963
*DELAYQUE:                                                         0963
*   PROC OPTIONS(RETREG,SAVE);      /* TIME DELAY PROC       @YM05626*/
DELAYQUE STM   @14,@12,@SA00019                                    0963
*   RFY                                                            0964
*    (IEDQQPTR,                                                    0964
*     RQCB,                                                        0964
*     RWORKREG,                                                    0964
*     RTIMENOW) RSTD;               /*                       @OY14058*/
*   IF QCBDELAY=OFF                 /* QCB ON TIME DELAY     @OY14058*/
*       &(QCBSTPRI=QCBCLK           /* AND CLOCK OR          @OY14058*/
*       ×(QCBSTPRI=QCBCNTVL&QCBINTVL>ZERO)) THEN/* CNTVL>0   @OY14058*/
         TM    QCBDELAY(IEDQQPTR),B'00000010'                      0965
         BNZ   @RF00965                                            0965
         CLI   QCBSTPRI(IEDQQPTR),X'80'                            0965
         BE    @RT00965                                            0965
         CLI   QCBSTPRI(IEDQQPTR),X'70'                            0965
         BNE   @RF00965                                            0965
         CLC   QCBINTVL(2,IEDQQPTR),@CH00621                       0965
         BNH   @RF00965                                            0965
@RT00965 DS    0H                                                  0966
*     DO;                           /* NO, PUT QCB ON TIME DELAY     */
*       RWORKREG=QCBINTVL;          /* PICK UP INTERVAL TO BE USED TO
*                                      CALCULATE TIME                */
         LH    RWORKREG,QCBINTVL(,IEDQQPTR)                        0967
         N     RWORKREG,@CF02262                                   0967
*       IF QCBSTPRI=QCBCLK THEN     /* IF CLOCK IS SPECIFIED THEN    */
         CLI   QCBSTPRI(IEDQQPTR),X'80'                            0968
         BNE   @RF00968                                            0968
*         DO;                       /* ADJUST THE TIME IF NEEDED     */
*           RWORKREG=RWORKREG*DOUBLE;/* DOUBLE THE TIME              */
         ALR   RWORKREG,RWORKREG                                   0970
*           GEN( TIME BIN);                                        0971
          TIME BIN
*           RTIMENOW=RZERO/HUNDRED; /* SETUP TIME NOW                */
         LR    @05,RZERO                                           0972
         SLR   @04,@04                                             0972
         D     @04,@CF02044                                        0972
         LR    RTIMENOW,@05                                        0972
*           IF RTIMENOW>=RWORKREG THEN/* IS TIME NOW GREATER THAN  0973
*                                      CALLUP TIME                   */
         CR    RTIMENOW,RWORKREG                                   0973
         BL    @RF00973                                            0973
*             RWORKREG=RWORKREG+TWNTY4HR;/* ADD 1 DAY TO CALLUP TIME */
         AL    RWORKREG,@CF02042                                   0974
*           RWORKREG=RWORKREG-RTIMENOW;/* GET THE INTERVAL           */
@RF00973 SLR   RWORKREG,RTIMENOW                                   0975
*         END;                      /* ADJUST TIMER FOR CLOCK        */
*       ELSE                                                       0977
*         ;                         /* INTERVAL SPECIFIED            */
@RF00968 DS    0H                                                  0978
*       IF RWORKREG>=SECPR12H THEN  /* IS INTERVAL >=4320 SECS?      */
         L     @06,@CF02040                                        0978
         CR    RWORKREG,@06                                        0978
         BL    @RF00978                                            0978
*         DO;                       /* YES, ADJUST THE TIME TO FIT IN
*                                      A 12 HR PERIOD                */
*           RWORKREG=RWORKREG-SECPR12H;/* ADJUST TO USE TIMER POP  0980
*                                      BASED ON AN INTERVAL          */
         SLR   RWORKREG,@06                                        0980
*           QCBTIME=ON;             /* INDICATE CLOCK SPECIFIED    0981
*                                      GREATER THAN 12 HOURS         */
         OI    QCBTIME(IEDQQPTR),B'00000001'                       0981
*         END;                      /* END OF CLOCK SPECIFIED GREATER
*                                      THAN 12 HOURS                 */
*       ELSE                                                       0983
*         ;                         /* DO NOT CHANGE INTERVAL FOR  0983
*                                      CLOCK SPECIFIED < = 12 HRS    */
@RF00978 DS    0H                                                  0984
*       QCBEOLDT=RWORKREG;          /* STORE DELAY TIME              */
         STH   RWORKREG,QCBEOLDT(,IEDQQPTR)                        0984
*       QCBLKRLN=QCBLKRLN&&QCBLKRLN;/* INDICATE QCB OFFSET           */
         XC    QCBLKRLN(1,IEDQQPTR),QCBLKRLN(IEDQQPTR)             0985
*       IF QCBSTCHN=ADDR(QCBSTVTO) THEN/* IS SEND SCHEDULER IN THE 0986
*                                      QCB?                          */
         LA    @06,QCBSTVTO(,IEDQQPTR)                             0986
         L     @15,QCBSTCHN-1(,IEDQQPTR)                           0986
         LA    @15,0(,@15)                                         0986
         CR    @06,@15                                             0986
         BNE   @RF00986                                            0986
*         QCBSTCHN=QCBSLINK;        /* REMOVE SEND SCHEDULER         */
         MVC   QCBSTCHN(3,IEDQQPTR),QCBSLINK(IEDQQPTR)             0987
*       ELSE                                                       0988
*         ;                         /* SEND SCHEDULER WASN'T IN      */
@RF00986 DS    0H                                                  0989
*       QCBELCHN=RQCB;              /* SET ELEMENT AS ITSELF @YM08081*/
         STCM  RQCB,7,QCBELCHN(IEDQQPTR)                           0989
*       QCBPRI=PRIEDISP;            /* SET POST PRIORITY     @YM08084*/
         MVI   QCBPRI(IEDQQPTR),X'E0'                              0990
*       RPARM=RQCB;                 /* SET PARAMETER TO HG           */
         LR    RPARM,RQCB                                          0991
*       CALL IEDQHG;                /* PUT QCB ON TIME DELAY         */
         L     @15,AVTHG01(,IEDQAPTR)                              0992
         BALR  @14,@15                                             0992
*     END;                          /* END OF PROCESSING FOR QCB NOT
*                                      ON TIME DELAY                 */
*   ELSE                                                           0994
*     ;                             /* QCB ALREADY ON TIME DELAY     */
@RF00965 DS    0H                                                  0995
*   RFY                                                            0995
*    (IEDQQPTR,                                                    0995
*     RQCB,                                                        0995
*     RWORKREG,                                                    0995
*     RTIMENOW) UNRSTD;                                            0995
*   END DELAYQUE;                   /* COMPLETED TIMER SEARCH        */
@EL00019 DS    0H                                                  0996
@EF00019 DS    0H                                                  0996
@ER00019 LM    @14,@12,@SA00019                                    0996
         BR    @14                                                 0996
*                                                                  0997
*   /*****************************************************************/
*   /*                                                               */
*   /* POST ANY ELEMENT.                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0997
*POSTELEM:                                                         0997
*   PROC OPTIONS(RETREG,SAVE(3,7,14));                             0997
POSTELEM ST    @14,@SA00020                                        0997
         ST    @03,@SA00020+4                                      0997
         ST    @07,@SA00020+8                                      0997
*   CALL DSPPOSTR;                  /* POST ONE ELEMENT              */
         LA    @15,DSPPOSTR(,RDISP)                                0998
         BALR  @14,@15                                             0998
*   END POSTELEM;                   /* POSTED ONE ELEMENT            */
@EL00020 DS    0H                                                  0999
@EF00020 DS    0H                                                  0999
@ER00020 L     @14,@SA00020                                        0999
         L     @03,@SA00020+4                                      0999
         L     @07,@SA00020+8                                      0999
         BR    @14                                                 0999
*                                                                  1000
*   /*****************************************************************/
*   /*                                                               */
*   /* POST QCB TO REQUEST A SESSION TO BE STARTED FOR THIS LU       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1000
*POSTQCB:                                                          1000
*   PROC OPTIONS(RETREG,SAVE(3,7,14));                             1000
POSTQCB  ST    @14,@SA00021                                        1000
         ST    @03,@SA00021+4                                      1000
         ST    @07,@SA00021+8                                      1000
*   RFY                                                            1001
*    (RQCB,                                                        1001
*     IEDQQPTR) RSTD;                                              1001
*   IF QCBDELAY=ON THEN             /* QCB ON TIME DELAY Q   @YM08081*/
         TM    QCBDELAY(IEDQQPTR),B'00000010'                      1002
         BNO   @RF01002                                            1002
*     DO;                           /* YES                   @YM08081*/
*       RPARM=RQCB;                 /* QCB ADDRESS           @YM08081*/
         LR    RPARM,RQCB                                          1004
*       CALL IEDQHG02;              /* REMOVE QCB FROM TIME DELAY Q
*                                                            @YM08081*/
         L     @15,AVTHG02(,IEDQAPTR)                              1005
         BALR  @14,@15                                             1005
*       QCBSLINK=QCBSTCHN;          /* RESTORE LINK POINTER  @YM08084*/
         MVC   QCBSLINK(3,IEDQQPTR),QCBSTCHN(IEDQQPTR)             1006
*       QCBSTCHN=ADDR(QCBSTVTO);    /* PUT SEND SCHED BACK IN QCB  1007
*                                                            @YM08081*/
         LA    @10,QCBSTVTO(,IEDQQPTR)                             1007
         STCM  @10,7,QCBSTCHN(IEDQQPTR)                            1007
*     END;                          /*                       @YM08081*/
*   QCBELCHN=ADDR(SAVTLUSQ);        /* SET UP LUS QCB ADDR           */
@RF01002 L     @10,AVTSAVTP(,IEDQAPTR)                             1009
         LA    @10,SAVTLUSQ(,@10)                                  1009
         STCM  @10,7,QCBELCHN(IEDQQPTR)                            1009
*   QCBPRI=PRILUSQB;                /* SETUP PRIORITY FOR POST       */
         MVI   QCBPRI(IEDQQPTR),X'E2'                              1010
*   RPARM=RQCB;                     /* SETUP THE ELEMENT TO POST     */
         LR    RPARM,RQCB                                          1011
*   CALL DSPPOSTR;                  /* POST ONE ELEMENT AND RETRN    */
         LA    @15,DSPPOSTR(,RDISP)                                1012
         BALR  @14,@15                                             1012
*   RFY                                                            1013
*    (RQCB,                                                        1013
*     IEDQQPTR) UNRSTD;                                            1013
*   END POSTQCB;                    /* END POST QCB TO LUS           */
@EL00021 DS    0H                                                  1014
@EF00021 DS    0H                                                  1014
@ER00021 L     @14,@SA00021                                        1014
         L     @03,@SA00021+4                                      1014
         L     @07,@SA00021+8                                      1014
         BR    @14                                                 1014
*                                                                  1015
*   /*****************************************************************/
*   /*                                                               */
*   /* POST BUFFER BACK TO OPERATOR CONTROL TO INDICATE REQUEST      */
*   /* SERVICED                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1015
*POSTOPCB:                                                         1015
*   PROC OPTIONS(RETREG,SAVE(3,7,14));                             1015
POSTOPCB ST    @14,@SA00022                                        1015
         ST    @03,@SA00022+4                                      1015
         ST    @07,@SA00022+8                                      1015
*   RNSLBFR->OPREPRI=NSLPRIBK;      /* EST. THE CALLER'S PRI         */
         MVC   OPREPRI(1,RNSLBFR),NSLPRIBK(IEDNSLP)                1016
*   RNSLBFR->OPREFLG1=NSLFLGBK;     /* EST. THE CALLER'S FLAG        */
         MVC   OPREFLG1(1,RNSLBFR),NSLFLGBK(IEDNSLP)               1017
*   RNSLBFR->OPREQCB=ADDR(AVTOPCOB);/* OPCTL QCB                     */
         LA    @10,AVTOPCOB(,IEDQAPTR)                             1018
         STCM  @10,7,OPREQCB(RNSLBFR)                              1018
*   RPARM=RNSLBFR;                  /* SETUP TO POST         @YM03733*/
         LR    RPARM,RNSLBFR                                       1019
*   CALL DSPPOSTR;                  /* POST ONE ELEMENT AND RETRN    */
         LA    @15,DSPPOSTR(,RDISP)                                1020
         BALR  @14,@15                                             1020
*   END POSTOPCB;                   /* END POST BFR TO OPCTL         */
@EL00022 DS    0H                                                  1021
@EF00022 DS    0H                                                  1021
@ER00022 L     @14,@SA00022                                        1021
         L     @03,@SA00022+4                                      1021
         L     @07,@SA00022+8                                      1021
         BR    @14                                                 1021
*                                                                  1022
*   /*****************************************************************/
*   /*                                                               */
*   /* POST PLCB TO ITSELF                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1022
*POSTR:                                                            1022
*   PROC OPTIONS(RETREG,SAVE(3,7,14));                             1022
POSTR    ST    @14,@SA00023                                        1022
         ST    @03,@SA00023+4                                      1022
         ST    @07,@SA00023+8                                      1022
*   RFY                                                            1023
*     RENTRY RSTD;                                                 1023
*   RPARM=RENTRY;                   /* EST. ADDRESSABILTITY          */
         LR    RPARM,RENTRY                                        1024
*   RPARM->LCBPRI=PRILNFRE;         /* SETUP THE PRIORITY TO POST THE
*                                      PLCB TO ITSELF                */
         MVI   LCBPRI(RPARM),X'E0'                                 1025
*   RPARM->LCBQCBA=RPARM;           /* SETUP QCB TO POST PLCB        */
         STCM  RPARM,7,LCBQCBA(RPARM)                              1026
*   CALL DSPPOSTR;                  /* POST ONE ELEMENT AND RETRN    */
         LA    @15,DSPPOSTR(,RDISP)                                1027
         BALR  @14,@15                                             1027
*   RFY                                                            1028
*     RENTRY UNRSTD;                                               1028
*   END POSTR;                      /* POSTING PLCB TO ITSELF        */
@EL00023 DS    0H                                                  1029
@EF00023 DS    0H                                                  1029
@ER00023 L     @14,@SA00023                                        1029
         L     @03,@SA00023+4                                      1029
         L     @07,@SA00023+8                                      1029
         BR    @14                                                 1029
*                                                                  1030
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE BUILD AN ERB TO POST TO IEDQGA TO REQUEST A   */
*   /* BUFFER TO BUILD A RESET TO STOP I/O.                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1030
*GETBUF:                                                           1030
*   PROC OPTIONS(RETREG,SAVE(14));                                 1030
GETBUF   ST    @14,@SA00024                                        1030
*   NSLERB=NSLERB&&NSLERB;          /* CLEAR ERB FIELDS              */
         XC    NSLERB(14,IEDNSLP),NSLERB(IEDNSLP)                  1031
*   NSLMPPI=ON;                     /* INDICATE TO POST THE ERB BACK
*                                      HERE, QCB @ AND PRI IS ALREADY
*                                      SET                           */
         OI    NSLMPPI(IEDNSLP),B'00000010'                        1032
*   NSLUNCNT=ONEBUFFR;              /* REUESTING ONE BUFFER          */
         MVC   NSLUNCNT(2,IEDNSLP),@CH02037                        1033
*   NSLERQCB=ADDR(AVTBFREB);        /* GET IEDQGA QCB ADDRESS        */
         LA    @10,AVTBFREB(,IEDQAPTR)                             1034
         ST    @10,NSLERQCB(,IEDNSLP)                              1034
*   NSLERBPR=PRIACTIV;              /* SETUP THE PRIORITY            */
         MVI   NSLERBPR(IEDNSLP),X'E4'                             1035
*   RPARM=ADDR(NSLERB);             /* SETUP ADDRESS OF ELEMENT TO BE
*                                      POSTED                        */
         LA    RPARM,NSLERB(,IEDNSLP)                              1036
*   CALL POSTELEM;                  /* POST THE ERB                  */
         BAL   @14,POSTELEM                                        1037
*   END GETBUF;                     /* POSTED THE REQUEST CON'T      */
@EL00024 DS    0H                                                  1038
@EF00024 DS    0H                                                  1038
@ER00024 L     @14,@SA00024                                        1038
         BR    @14                                                 1038
*                                                                  1039
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE FREES BUFFERS WHEN A REQUEST HAS BEEN         */
*   /* FULFILLED. BOTH THE BUFFER IN THE ERB CHAIN OR THE REQUEST    */
*   /* BUFFER CAN BE FREED. A BUFFER IS FREED ONE AT A TIME.         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1039
*FREEBUF:                                                          1039
*   PROC OPTIONS(RETREG,SAVE(14));                                 1039
FREEBUF  ST    @14,@SA00025                                        1039
*   IF NSLBUFFR^=AVTFZERO THEN      /* BUFFER ADDRESS IN ERB CHN     */
         L     @10,NSLBUFFR-1(,IEDNSLP)                            1040
         LA    @10,0(,@10)                                         1040
         C     @10,AVTFZERO(,IEDQAPTR)                             1040
         BE    @RF01040                                            1040
*     DO;                           /* YES                           */
*       RPARM=NSLBUFFR;             /* SETUP THE BFR TO BE FREED     */
         LR    RPARM,@10                                           1042
*       NSLBUFFR=''B;               /* CLEAR TO KEEP FROM FREEING THE
*                                      SAME BUFFER TWICE             */
         SLR   @10,@10                                             1043
         STCM  @10,7,NSLBUFFR(IEDNSLP)                             1043
*     END;                          /* FREE THE EXTRA BUFFER FRST    */
*   ELSE                            /* GET THE ADDR OF REQ BFR       */
*     RPARM=RNSLBFR;                /* EST. INTERFACE PARAMETER      */
         B     @RC01040                                            1045
@RF01040 LR    RPARM,RNSLBFR                                       1045
*   RPARM->OPREQCB=ADDR(AVTBFRTB);  /* GET IEDQGB QCB ADDRESS        */
@RC01040 LA    @10,AVTBFRTB(,IEDQAPTR)                             1046
         STCM  @10,7,OPREQCB(RPARM)                                1046
*   RPARM->OPREPRI=PRIBFRTB;        /* SETUP THE PRIORITY            */
         MVI   OPREPRI(RPARM),X'E0'                                1047
*   RPARM->OPRETIC=INVLDTIC;        /* INDICATE ONLY BUFFER BEING  1048
*                                      FREED                         */
         MVC   OPRETIC(4,RPARM),@CF01344                           1048
*   RPARM->OPREFLG1=ONE;            /* INDICATE ONE UNIT BUFFER      */
         MVI   OPREFLG1(RPARM),X'01'                               1049
*   CALL POSTELEM;                  /* POST THE REQUEST AND RETRN    */
         BAL   @14,POSTELEM                                        1050
*   END FREEBUF;                    /* FINISH THE REQ FREE BFR       */
@EL00025 DS    0H                                                  1051
@EF00025 DS    0H                                                  1051
@ER00025 L     @14,@SA00025                                        1051
         BR    @14                                                 1051
*                                                                  1052
*   /*****************************************************************/
*   /*                                                               */
*   /* BRANCH TO LCBSCAN TO REQUEST A SEND OPERATION TO BE STARTED   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1052
*REQSEND:                                                          1052
*   PROC OPTIONS(RETREG,NOSAVE,NOSAVEAREA);/*                @YM07746*/
REQSEND  DS    0H                                                  1053
*   STM(RZERO,RENTRY,SAVE3);        /* SAVE REGS IN AVTSAVE3 @YM07746*/
         STM   RZERO,RENTRY,SAVE3(IEDQAPTR)                        1053
*   CALL LCBSCAN;                   /* REQUEST A SEND OPERATION      */
         L     @10,AVTSEND(,IEDQAPTR)                              1054
         BCTR  @10,0                                               1054
         BCTR  @10,0                                               1054
         LH    @15,SSCHINDX(,@10)                                  1054
         ALR   @15,@10                                             1054
         BALR  @14,@15                                             1054
*   LM(RZERO,RENTRY,SAVE3);         /* RESTORE REGS          @YM07746*/
         LM    RZERO,RENTRY,SAVE3(IEDQAPTR)                        1055
*   END REQSEND;                    /* TO BE STARTED FOR THIS RES.   */
@EL00026 DS    0H                                                  1056
@EF00026 DS    0H                                                  1056
@ER00026 BR    @14                                                 1056
*                                                                  1057
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE PROCESSES A STOPLINE REQUEST FROM OPERATOR    */
*   /* CONTROL TO QUIESE ALL RESOURCES ATTACHED TO A 3705 LINE.      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1057
*STOPLINE:                                                         1057
*   PROC OPTIONS(RETREG,SAVE(14));                                 1057
STOPLINE ST    @14,@SA00027                                        1057
*   IF NSLNGPSL=ON THEN             /* BUFFER RETURNING FOR STOP LINE
*                                      REQUEST                       */
         TM    NSLNGPSL(IEDNSLP),B'00100000'                       1058
         BNO   @RF01058                                            1058
*     DO;                           /* RE-INITIALIZE THE TRM @       */
*       RTRM=NSLTTEPT;              /* GET LINE PTR          @YM09060*/
         L     RTRM,NSLTTEPT(,IEDNSLP)                             1060
*       RTRM=RTRM-LENGTH(IEDNTRM);  /* BACKUP TO PREFIX      @YM09060*/
         SL    RTRM,@CF01178                                       1061
*       CALL GETNCP;                /* GET NCP PTR           @YM09060*/
         BAL   @14,GETNCP                                          1062
*       NCPPTR=RTRM;                /* SAVE NCP PTR          @YM09060*/
         STCM  RTRM,7,NCPPTR                                       1063
*       RTRM=NSLCTTRM;              /* GET THE CURRENT TRM ENTRY     */
         L     RTRM,NSLCTTRM-1(,IEDNSLP)                           1064
         LA    RTRM,0(,RTRM)                                       1064
*       NSLNGPSL=OFF;               /* RESET BUFFER RETUN SWITCH     */
         NI    NSLNGPSL(IEDNSLP),B'11011111'                       1065
*     END;                          /* RE-INITIALIZATION -- DONE     */
*   ELSE                            /* INITIAL ENTRY                 */
*     DO;                           /* YES,FALL THROUGH              */
         B     @RC01058                                            1067
@RF01058 DS    0H                                                  1068
*       RTRM=NSLTTEPT;              /* SET UP INPUT LINE ADDR        */
         L     RTRM,NSLTTEPT(,IEDNSLP)                             1068
*       RTRM=RTRM-LENGTH(IEDNTRM);  /* BACKUP TO PREFIX              */
         SL    RTRM,@CF01178                                       1069
*       LINEPTR=RTRM;               /* SAVE LINE PTR         @YM09060*/
         STCM  RTRM,7,LINEPTR                                      1070
*       CALL GETNCP;                /* GET NCP PTR           @YM09060*/
         BAL   @14,GETNCP                                          1071
*       NCPPTR=RTRM;                /* SAVE NCP PTR          @YM09060*/
         STCM  RTRM,7,NCPPTR                                       1072
*       RTRM=LINEPTR;               /* RESTORE LINE PTR      @YM09060*/
         L     RTRM,LINEPTR-1                                      1073
         LA    RTRM,0(,RTRM)                                       1073
*       CALL VERIFY;                /* SET THE BIT REPRESENTS STOP   */
         BAL   @14,VERIFY                                          1074
*       IF TRMSUBST^=AVTFZERO THEN  /* ANY SUBSTRUCURES              */
         LH    @10,TRMSUBST(,RTRM)                                 1075
         N     @10,@CF02262                                        1075
         C     @10,AVTFZERO(,IEDQAPTR)                             1075
         BE    @RF01075                                            1075
*         DO;                       /* PERFORM THE INITIAL BRNGUP    */
*           IF TRMDIAL=ON&TRMUTERM^=ZERO&TRMSUBST^=TRMUTERM THEN/* 1077
*                                      DIAL AND LOGICAL TERM       1077
*                                      CONNECTED?            @YM08530*/
         TM    TRMDIAL(RTRM),B'00001000'                           1077
         BNO   @RF01077                                            1077
         LH    @10,TRMUTERM(,RTRM)                                 1077
         N     @10,@CF02262                                        1077
         LTR   @10,@10                                             1077
         BZ    @RF01077                                            1077
         CLC   TRMSUBST(2,RTRM),TRMUTERM(RTRM)                     1077
         BE    @RF01077                                            1077
*             DO;                   /* YES                   @YM05733*/
*               NSLTTCIN=TRMUTERM;  /* KILL THE CTERM 1ST    @YM05733*/
         LH    @10,TRMUTERM(,RTRM)                                 1079
         N     @10,@CF02262                                        1079
         STH   @10,NSLTTCIN(,IEDNSLP)                              1079
*               NSLDRDRV=ON;        /* SIGNAL TO STOP THE LOGICAL  1080
*                                      TERMINAL NEXT         @YM05733*/
         OI    NSLDRDRV(IEDNSLP),B'00001000'                       1080
*             END;                  /* READY TO STOP CTERM@YM05733   */
*           ELSE                    /* OTHERWISE             @YM05733*/
*             NSLTTCIN=TRMSUBST;    /* SAVE CURRENT TNT INDEX        */
         B     @RC01077                                            1082
@RF01077 LH    @10,TRMSUBST(,RTRM)                                 1082
         N     @10,@CF02262                                        1082
         STH   @10,NSLTTCIN(,IEDNSLP)                              1082
*           RPARM=NSLTTCIN;         /* SETUP INTERFACE TO GETTRM     */
@RC01077 LH    RPARM,NSLTTCIN(,IEDNSLP)                            1083
         N     RPARM,@CF02262                                      1083
*           CALL GETTRM;            /* GET TERMINAL ENTRY ADDRESS    */
         BAL   @14,GETTRM                                          1084
*           NSLCTTRM=RTRM;          /* SAVE TERMINAL ADDRESS         */
         STCM  RTRM,7,NSLCTTRM(IEDNSLP)                            1085
*         END;                      /* COMPLETED INITIALIZATION      */
*       ELSE                        /* NO SUBSTRUCURES               */
*         EXITFLAG=ON;              /* SET EXIT INDICATORS           */
         B     @RC01075                                            1087
@RF01075 OI    EXITFLAG,B'00010000'                                1087
*     END;                          /* FINISHED INITIAL BRINGUP      */
@RC01075 DS    0H                                                  1089
*   IF NSLSDIAL=ON THEN             /* DIAL RESUME ?                 */
@RC01058 TM    NSLSDIAL(IEDNSLP),B'00010000'                       1089
         BNO   @RF01089                                            1089
*     DO;                           /* YES PROCESS REDRIVE           */
*       CALL STOPDIAL;              /* PICKUP THE LAST DIAL RES      */
         BAL   @14,STOPDIAL                                        1091
*       IF NSLSDIAL=ON THEN         /* DIAL REDRIVE?         @YM05736*/
         TM    NSLSDIAL(IEDNSLP),B'00010000'                       1092
         BNO   @RF01092                                            1092
*         DO;                       /* YES                   @YM05736*/
*           CALL GETBUF;            /* GET A BUFFER          @YM05736*/
         BAL   @14,GETBUF                                          1094
*           NSLNGPSL=ON;            /* STOPLINE AND DIAL     @YM05736*/
         OI    NSLNGPSL(IEDNSLP),B'00100000'                       1095
*         END;                      /* SETUP TO REDRIVE      @YM05736*/
*       ELSE                        /* NOT DIAL DO NO MORE           */
*         DO;                       /* READY TO EXIT DETERMINE HOW   */
         B     @RC01092                                            1097
@RF01092 DS    0H                                                  1098
*           IF NSLBUFFR^=AVTFZERO THEN/* BUFFER IN THE ERB CHAIN?    */
         L     @10,NSLBUFFR-1(,IEDNSLP)                            1098
         LA    @10,0(,@10)                                         1098
         C     @10,AVTFZERO(,IEDQAPTR)                             1098
         BE    @RF01098                                            1098
*             CALL FREEBUF;         /* YES FREE IT                   */
         BAL   @14,FREEBUF                                         1099
*           ELSE                                                   1100
*             ;                     /* FALL THROUGH NO EXTRA BUFS    */
@RF01098 DS    0H                                                  1101
*           IF NSLPLCBR=ON THEN     /* WILL A PLCB RETURN TO OPCTL   */
         TM    NSLPLCBR(IEDNSLP),B'10000000'                       1101
         BNO   @RF01101                                            1101
*             CALL FREEBUF;         /* YES FREE THE INPUT BUFFER     */
         BAL   @14,FREEBUF                                         1102
*           ELSE                    /* NO PLCB TO RETURN SO POST     */
*             CALL POSTOPCB;        /* THIS BUFFER TO LET OPCTL KNOW
*                                      ALL IS DONE                   */
         B     @RC01101                                            1103
@RF01101 BAL   @14,POSTOPCB                                        1103
*         END;                      /* FREED BUFFERS IF NECESSARY SO
*                                      EXIT                          */
*     END;                          /* DONE WITH ALL STOPS           */
*   ELSE                            /* NO DIAL RESUME OK TO          */
*     DO;                           /* LOOP THROUGH THE HEIRARCHY    */
         B     @RC01089                                            1106
@RF01089 DS    0H                                                  1107
*       DO WHILE(NSLBUFFR^=AVTFZERO&EXITFLAG=OFF);                 1107
         B     @DE01107                                            1107
@DL01107 DS    0H                                                  1108
*         IF TRMTYPE=TRMCTERM×TRMDIAL=OFF THEN/* CTERM OR          1108
*                                      N.DIA@YM06016                 */
         CLI   TRMTYPE(RTRM),X'48'                                 1108
         BE    @RT01108                                            1108
         TM    TRMDIAL(RTRM),B'00001000'                           1108
         BNZ   @RF01108                                            1108
@RT01108 DS    0H                                                  1109
*           TRMSPACT=OFF;           /* RESET ACTIVE SUPERIOR RESOU   */
         NI    TRMSPACT(RTRM),B'11101111'                          1109
*         ELSE                                                     1110
*           ;                       /* DIAL NONCTERM         @YM06016*/
@RF01108 DS    0H                                                  1111
*         IF NSLGPTSP=ON THEN       /* STOPPING A GENERAL POLL TRM   */
         TM    NSLGPTSP(IEDNSLP),B'01000000'                       1111
         BNO   @RF01111                                            1111
*           DO;                     /* YES                           */
*             NSLGPTSP=OFF;         /* RESET THE RESUME FLAG         */
         NI    NSLGPTSP(IEDNSLP),B'10111111'                       1113
*             CALL STPLNEGP;        /* STOP IF POSSIBLE              */
         BAL   @14,STPLNEGP                                        1114
*           END;                    /* READY TO REDRIVE              */
*         ELSE                      /* FIRST TIME THROUGH            */
*           IF TRMTYPE=TRMCLUST THEN/* CONTROL UNIT                  */
         B     @RC01111                                            1116
@RF01111 CLI   TRMTYPE(RTRM),X'40'                                 1116
         BNE   @RF01116                                            1116
*             DO;                   /* YES, FIRST STOP THE CU        */
*               IF TRMGPACT=ON THEN /* GENERAL POLLING?      @YM05730*/
         TM    TRMGPACT(RTRM),B'00001000'                          1118
         BNO   @RF01118                                            1118
*                 DO;               /* YES                   @YM05730*/
*                   TRMGPACT=OFF;   /* INDICATE NO G.P.      @YM05730*/
         LA    @15,TRMGPACT(,RTRM)                                 1120
         LR    @14,@15                                             1120
         LA    @10,3                                               1120
         NR    @14,@10                                             1120
         LCR   @14,@14                                             1120
         ALR   @15,@14                                             1120
         L     @10,0(,@15)                                         1120
@GL00043 LR    @03,@10                                             1120
         N     @03,@CB02272+3(@14)                                 1120
         CS    @10,@03,0(@15)                                      1120
         BNE   @GL00043                                            1120
*                   IF NSLREQTY=NSLSTOPL&/* STOPLINE,C       @YM09060*/
*                       (AVTQUCKN=OFF&NCPPTR->TRMNCPCL=OFF) THEN   1121
         CLI   NSLREQTY(IEDNSLP),X'02'                             1121
         BNE   @RF01121                                            1121
         TM    AVTQUCKN(IEDQAPTR),B'00000010'                      1121
         BNZ   @RF01121                                            1121
         L     @10,NCPPTR-1                                        1121
         TM    TRMNCPCL(@10),B'01000000'                           1121
         BNZ   @RF01121                                            1121
*                     DO;           /* YES                   @YM08526*/
*                       CALL CHKTSO;/* CHECK FOR TSO         @YM08526*/
         BAL   @14,CHKTSO                                          1123
*                       IF RENTRY=AVTFZERO THEN/* NOT IN TSO SESSION
*                                                            @YM08526*/
         C     RENTRY,AVTFZERO(,IEDQAPTR)                          1124
         BNE   @RF01124                                            1124
*                         CALL STPTERM;/* STOPGP POLLING             */
         BAL   @14,STPTERM                                         1125
*                       ELSE                                       1126
*                         ;         /* DON'T SEND RESET      @YM08526*/
@RF01124 DS    0H                                                  1127
*                     END;          /* ALL OTHER STOPLINE    @YM08526*/
*                   ELSE            /* OK TRY TO SEND REST@YM08526   */
*                     CALL STPTERM; /* STOPGP POLLING        @YM08526*/
         B     @RC01121                                            1128
@RF01121 BAL   @14,STPTERM                                         1128
*                 END;              /* STOPPED THE CU        @YM05730*/
*               ELSE                                               1130
*                 ;                 /* NOT G.P. DO NOTHING TO THE  1130
*                                      CONTROL UNIT          @YM05730*/
@RF01118 DS    0H                                                  1131
*               IF TRMSUBST^=AVTFZERO THEN/* SUBSTRUCTURES?          */
@RC01118 LH    @10,TRMSUBST(,RTRM)                                 1131
         N     @10,@CF02262                                        1131
         C     @10,AVTFZERO(,IEDQAPTR)                             1131
         BE    @RF01131                                            1131
*                 DO;               /* YES, STOP THE HEADS           */
*                   NSLTTCIN=TRMSUBST;/* SAVE FIRST TNT INDEX        */
         STH   @10,NSLTTCIN(,IEDNSLP)                              1133
*                   RPARM=TRMSUBST; /* GET THE FIRST SUBSTRUCURES    */
         LR    RPARM,@10                                           1134
*                   CALL GETTRM;    /* GET THE TERMINAL ENTRY ADDR   */
         BAL   @14,GETTRM                                          1135
*                   NSLCTTRM=RTRM;  /* ADJUST THE CURRENT RES PTR    */
         STCM  RTRM,7,NSLCTTRM(IEDNSLP)                            1136
*                   CALL STPLNEGP;  /* STOP THE HEADS NOW            */
         BAL   @14,STPLNEGP                                        1137
*                 END;              /* NO SUBSTRUCURES               */
*               ELSE                                               1139
*                 ;                 /* STOPPED MULTIPLE STRUCTURE    */
@RF01131 DS    0H                                                  1140
*             END;                  /* WITH HIGHEST FIRST            */
*           ELSE                    /* STOP SINGLE STRUCTURE         */
*             DO;                   /* CHECK IF POSSIBLE     @YM08526*/
         B     @RC01116                                            1141
@RF01116 DS    0H                                                  1142
*               IF NSLREQTY=NSLSTOPL&/* STOPLINE,C           @YM09060*/
*                   (AVTQUCKN=OFF&NCPPTR->TRMNCPCL=OFF) THEN       1142
         CLI   NSLREQTY(IEDNSLP),X'02'                             1142
         BNE   @RF01142                                            1142
         TM    AVTQUCKN(IEDQAPTR),B'00000010'                      1142
         BNZ   @RF01142                                            1142
         L     @10,NCPPTR-1                                        1142
         TM    TRMNCPCL(@10),B'01000000'                           1142
         BNZ   @RF01142                                            1142
*                 DO;               /* YES                   @YM08526*/
*                   CALL CHKTSO;    /* TSO SESSION?          @YM08526*/
         BAL   @14,CHKTSO                                          1144
*                   IF RENTRY=AVTFZERO THEN/* NOT IN TSO SESSION   1145
*                                                            @YM08526*/
         C     RENTRY,AVTFZERO(,IEDQAPTR)                          1145
         BNE   @RF01145                                            1145
*                     CALL STPTERM; /* TRY TO STOP THIS ONE          */
         BAL   @14,STPTERM                                         1146
*                   ELSE                                           1147
*                     ;             /* TSO SESSION           @YM08526*/
@RF01145 DS    0H                                                  1148
*                 END;              /*                       @YM08526*/
*               ELSE                /* ALL OTHER STOPLINE    @YM08526*/
*                 CALL STPTERM;     /* TRY TO STOP THIS ONE          */
         B     @RC01142                                            1149
@RF01142 BAL   @14,STPTERM                                         1149
*             END;                  /* STOPPED THE SINGLE    @YM08526*/
@RC01142 DS    0H                                                  1151
*         IF NSLGPTSP=OFF THEN      /* REDRIVE FOR GP SET?@YM05730   */
@RC01116 DS    0H                                                  1151
@RC01111 TM    NSLGPTSP(IEDNSLP),B'01000000'                       1151
         BNZ   @RF01151                                            1151
*           DO;                     /* NO                    @YM05730*/
*             RPARM=NSLTTEPT;       /* SETUP THE LINE ADDR@YM06453   */
         L     RPARM,NSLTTEPT(,IEDNSLP)                            1153
*             RPARM=RPARM-LENGTH(IEDNTRM);/* BACKUP TO THE         1154
*                                      PREFX@YM06453                 */
         SL    RPARM,@CF01178                                      1154
*             IF NSLDRDRV=ON&       /* DIAL REDRIVE AND      @YM06453*/
*                 RPARM->TRMSUBST^=RPARM->TRMUTERM THEN/* LOGICAL TRM
*                                      CONNECTED             @YM06453*/
         TM    NSLDRDRV(IEDNSLP),B'00001000'                       1155
         BNO   @RF01155                                            1155
         CLC   TRMSUBST(2,RPARM),TRMUTERM(RPARM)                   1155
         BE    @RF01155                                            1155
*               DO;                 /* YES                   @YM05733*/
*                 NSLDRDRV=OFF;     /* RESET REDRIVE SWTCH@YM05733   */
         NI    NSLDRDRV(IEDNSLP),B'11110111'                       1157
*                 NSLTTCIN=RPARM->TRMSUBST;/* STOP THE LOGICAL     1158
*                                      CONNECTION NOW BY INDICATING
*                                                            @YM05733*/
         LH    @10,TRMSUBST(,RPARM)                                1158
         N     @10,@CF02262                                        1158
         STH   @10,NSLTTCIN(,IEDNSLP)                              1158
*               END;                /* THE CURRENT TNT IND@YM05733   */
*             ELSE                  /* OTHERWISE             @YM05733*/
*               NSLTTCIN=TRMCOHRT;  /* SAVE THIS TNT INDEX           */
         B     @RC01155                                            1160
@RF01155 LH    @10,TRMCOHRT(,RTRM)                                 1160
         N     @10,@CF02262                                        1160
         STH   @10,NSLTTCIN(,IEDNSLP)                              1160
*             RPARM=NSLTTCIN;       /* SETUP INTERFACE TO GETTERM    */
@RC01155 LH    RPARM,NSLTTCIN(,IEDNSLP)                            1161
         N     RPARM,@CF02262                                      1161
*             CALL GETTRM;          /* GET TERMINAL ENTRY ADDRESS    */
         BAL   @14,GETTRM                                          1162
*             NSLCTTRM=RTRM;        /* SAVE CURRENT TRM ENTRY ADDR   */
         STCM  RTRM,7,NSLCTTRM(IEDNSLP)                            1163
*             IF TRMTYPE=TRMNSDLC THEN/* BYSNC-START-STOP LINE?      */
         CLI   TRMTYPE(RTRM),X'20'                                 1164
         BNE   @RF01164                                            1164
*               EXITFLAG=ON;        /* SET EXIT INDICATORS           */
         OI    EXITFLAG,B'00010000'                                1165
*             ELSE                                                 1166
*               ;                   /* CONTINUE THE LOOP             */
@RF01164 DS    0H                                                  1167
*           END;                    /* OK'D TO BUMP TO NXT@YM05733   */
*         ELSE                                                     1168
*           ;                       /* LOOP                  @YM05733*/
@RF01151 DS    0H                                                  1169
*       END;                        /* END OF DO WHILE               */
@DE01107 L     @10,NSLBUFFR-1(,IEDNSLP)                            1169
         LA    @10,0(,@10)                                         1169
         C     @10,AVTFZERO(,IEDQAPTR)                             1169
         BE    @DC01107                                            1169
         TM    EXITFLAG,B'00010000'                                1169
         BZ    @DL01107                                            1169
@DC01107 DS    0H                                                  1170
*       IF EXITFLAG=OFF THEN        /* IS TIME TO EXIT?              */
         TM    EXITFLAG,B'00010000'                                1170
         BNZ   @RF01170                                            1170
*         DO;                       /* TEMP EXIT TO GET A BUFFER     */
*           CALL GETBUF;            /* REQUEST A BUFFER              */
         BAL   @14,GETBUF                                          1172
*           NSLNGPSL=ON;            /* SET BUFFER RESUME FLAG        */
         OI    NSLNGPSL(IEDNSLP),B'00100000'                       1173
*         END;                      /* EXIT FOR NOW                  */
*       ELSE                        /* EXIT FOR GOOD                 */
*         DO;                       /* EXIT PROPERLY                 */
         B     @RC01170                                            1175
@RF01170 DS    0H                                                  1176
*           EXITFLAG=OFF;           /* RESET FLAG                    */
         NI    EXITFLAG,B'11101111'                                1176
*           IF TRMDIAL=ON THEN      /* DIAL?                         */
         TM    TRMDIAL(RTRM),B'00001000'                           1177
         BNO   @RF01177                                            1177
*             DO;                   /* YES, THEN SCAN RVT            */
*               CALL STOPDIAL;      /* STOP ANY DIAL TERM COMINGUP   */
         BAL   @14,STOPDIAL                                        1179
*               IF NSLSDIAL=ON THEN /* DIAL REDRIVE?                 */
         TM    NSLSDIAL(IEDNSLP),B'00010000'                       1180
         BNO   @RF01180                                            1180
*                 DO;               /* YES                           */
*                   CALL GETBUF;    /* REQUEST A BUFFER              */
         BAL   @14,GETBUF                                          1182
*                   NSLNGPSL=ON;    /* SET STOPLINE REDRIVE SWITCH   */
         OI    NSLNGPSL(IEDNSLP),B'00100000'                       1183
*                 END;              /* GET OUT TEMPORARILY           */
*               ELSE                /* READY TO GET OUT FOR GOOD     */
*                 DO;               /* READY TO EXIT DETERMINE HOW   */
         B     @RC01180                                            1185
@RF01180 DS    0H                                                  1186
*                   IF NSLBUFFR^=AVTFZERO THEN/* BUFFER IN THE ERB 1186
*                                      CHAIN?                        */
         L     @10,NSLBUFFR-1(,IEDNSLP)                            1186
         LA    @10,0(,@10)                                         1186
         C     @10,AVTFZERO(,IEDQAPTR)                             1186
         BE    @RF01186                                            1186
*                     CALL FREEBUF; /* YES FREE IT                   */
         BAL   @14,FREEBUF                                         1187
*                   ELSE                                           1188
*                     ;             /* FALL THROUGH NO EXTRA BUFS    */
@RF01186 DS    0H                                                  1189
*                   IF NSLPLCBR=ON THEN/* WILL A PLCB RETURN TO OPCTL*/
         TM    NSLPLCBR(IEDNSLP),B'10000000'                       1189
         BNO   @RF01189                                            1189
*                     CALL FREEBUF; /* YES FREE THE INPUT BUFFER     */
         BAL   @14,FREEBUF                                         1190
*                   ELSE            /* NO PLCB TO RETURN SO POST     */
*                     CALL POSTOPCB;/* THIS BUFFER TO LET OPCTL KNOW
*                                      ALL IS DONE                   */
         B     @RC01189                                            1191
@RF01189 BAL   @14,POSTOPCB                                        1191
*                 END;              /* FREED BUFFERS IF NECESSARY SO
*                                      EXIT                          */
*             END;                  /* DONE WITH DIAL                */
*           ELSE                    /* NOT DIAL DO NO MORE           */
*             DO;                   /* READY TO EXIT DETERMINE HOW   */
         B     @RC01177                                            1194
@RF01177 DS    0H                                                  1195
*               IF NSLBUFFR^=AVTFZERO THEN/* BUFFER IN THE ERB CHAIN?*/
         L     @10,NSLBUFFR-1(,IEDNSLP)                            1195
         LA    @10,0(,@10)                                         1195
         C     @10,AVTFZERO(,IEDQAPTR)                             1195
         BE    @RF01195                                            1195
*                 CALL FREEBUF;     /* YES FREE IT                   */
         BAL   @14,FREEBUF                                         1196
*               ELSE                                               1197
*                 ;                 /* FALL THROUGH NO EXTRA BUFS    */
@RF01195 DS    0H                                                  1198
*               IF NSLPLCBR=ON THEN /* WILL A PLCB RETURN TO OPCTL   */
         TM    NSLPLCBR(IEDNSLP),B'10000000'                       1198
         BNO   @RF01198                                            1198
*                 CALL FREEBUF;     /* YES FREE THE INPUT BUFFER     */
         BAL   @14,FREEBUF                                         1199
*               ELSE                /* NO PLCB TO RETURN SO POST     */
*                 CALL POSTOPCB;    /* THIS BUFFER TO LET OPCTL KNOW
*                                      ALL IS DONE                   */
         B     @RC01198                                            1200
@RF01198 BAL   @14,POSTOPCB                                        1200
*             END;                  /* FREED BUFFERS IF NECESSARY SO
*                                      EXIT                          */
*         END;                      /* END OF NORMAL SCAN            */
*     END;                          /* GET OUT NOW                   */
*   END STOPLINE;                   /* QUIESCE IF REUIRED            */
@EL00027 DS    0H                                                  1204
@EF00027 DS    0H                                                  1204
@ER00027 L     @14,@SA00027                                        1204
         BR    @14                                                 1204
*                                                                  1205
*   /*****************************************************************/
*   /*                                                               */
*   /* IF ALL THE LINES EXCEPT ONE IN ONE GROUP HAS BEEN DEACTIVAT   */
*   /* THEN THE RVT IS SEARCHED FOR DIAL TERMINALS WITH CONTACT      */
*   /* OUTSTANDING AND OR ON THE TIME DELAY QUE THEN A RESET IS SENT */
*   /* FOR CONTACT OUTSTANDING AND A REQUEST FOR REMOVAL FROM TIME   */
*   /* DELAY QUE IS SENT IF NEEDED.                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1205
*STOPDIAL:                                                         1205
*   PROC OPTIONS(RETREG,SAVE(14));                                 1205
STOPDIAL ST    @14,@SA00028                                        1205
*   IF NSLSDIAL=OFF THEN            /* NOT REDRIVE, NORMAL SCAN      */
         TM    NSLSDIAL(IEDNSLP),B'00010000'                       1206
         BNZ   @RF01206                                            1206
*     DO;                           /* YES, FALL THROUGH             */
*       STOPLNCT=AVTEZERO;          /* INITIALIZE THE COUNTER        */
         MVI   STOPLNCT,X'00'                                      1208
*       CALL GETNCP;                /* GET NCP TTE           @YM05736*/
         BAL   @14,GETNCP                                          1209
*       SAVENCP1=RTRM;              /* SAVE THIS LINE'S NCP  @YM05736*/
         STCM  RTRM,7,SAVENCP1                                     1210
*       RTRM=NSLTTEPT;              /* RESTORE LINE TTE      @YM05736*/
         L     RTRM,NSLTTEPT(,IEDNSLP)                             1211
*       RTRM=RTRM-LENGTH(IEDNTRM);  /* BACKUP TO PREFIX              */
         SL    RTRM,@CF01178                                       1212
*       LINETTE2=RTRM;              /* FOR COMPARISON INPUT LINE     */
         STCM  RTRM,7,LINETTE2                                     1213
*       SAVETNT1=TRMCOHTG;          /* GET NEXT LINE TTCIN TO IN   1214
*                                      ORDER TO OBTAIN RVT PTR       */
         LH    @10,TRMCOHTG(,RTRM)                                 1214
         N     @10,@CF02262                                        1214
         STH   @10,SAVETNT1                                        1214
*       RPARM=TRMCOHTG;             /* SETUP PARAMETER               */
         LR    RPARM,@10                                           1215
*       CALL GETTRM;                /* GET TERM ENTRY                */
         BAL   @14,GETTRM                                          1216
*       DO UNTIL RTRM=LINETTE2;     /* SEARCH UNTIL BACK TO BEGNG    */
@DL01217 DS    0H                                                  1218
*         IF TRMTYPE=TRMGRP THEN    /* GROUP                         */
         CLI   TRMTYPE(RTRM),X'00'                                 1218
         BNE   @RF01218                                            1218
*           DO;                     /* YES                           */
*             RPARM=TRMSUBST;       /* GET FIRST LINE                */
         LH    @10,TRMSUBST(,RTRM)                                 1220
         N     @10,@CF02262                                        1220
         LR    RPARM,@10                                           1220
*             SAVETNT1=TRMSUBST;    /* SAVE TNT INDEX                */
         STH   @10,SAVETNT1                                        1221
*           END;                    /* GOT A VALID TNT INDEX         */
*         ELSE                      /* VALID TTCIN                   */
*           DO;                     /* CHECK EVERYBODY STATUS        */
         B     @RC01218                                            1223
@RF01218 DS    0H                                                  1224
*             RPARM=TRMCOHTG;       /* GET NEXT LINE IF POSSIBLE     */
         LH    RPARM,TRMCOHTG(,RTRM)                               1224
         N     RPARM,@CF02262                                      1224
*             SAVETNT1=RPARM;       /* SAVE TO OBTAIN THE NAT        */
         STH   RPARM,SAVETNT1                                      1225
*           END;                    /* GOT VALID TNT INDEX           */
*         CALL GETTRM;              /* GET TRM ENTRY                 */
@RC01218 BAL   @14,GETTRM                                          1227
*         SAVETTE=RTRM;             /* SAVE THIS TTE         @YM05736*/
         STCM  RTRM,7,SAVETTE                                      1228
*         IF TRMCOHRT^=ZERO&TRMTYPE^=TRMGRP THEN/* UP AND NOT GROUP
*                                                            @OY20601*/
         LH    @10,TRMCOHRT(,RTRM)                                 1229
         N     @10,@CF02262                                        1229
         LTR   @10,@10                                             1229
         BZ    @RF01229                                            1229
         CLI   TRMTYPE(RTRM),X'00'                                 1229
         BE    @RF01229                                            1229
*           DO;                     /* YES                   @YM09049*/
*             CALL GETNCP;          /* GET THIS LINE'S TTE   @YM05736*/
         BAL   @14,GETNCP                                          1231
*             SAVENCP2=RTRM;        /* SAVE THIS LINE'S NCP  @YM05736*/
         STCM  RTRM,7,SAVENCP2                                     1232
*             RTRM=SAVETTE;         /* RESTORE TTE           @YM05736*/
         L     RTRM,SAVETTE-1                                      1233
         LA    RTRM,0(,RTRM)                                       1233
*             IF(SAVENCP1=SAVENCP2)&(TRMRSACT=ON&TRMTYPE^=TRMGRP)&RTRM
*                 ^=LINETTE2 THEN   /*                       @YM08480
*                                      LINE ACTIVE AND CONNECTED TO
*                                      SAME GROUP            @YM05736*/
         CLC   SAVENCP1(3),SAVENCP2                                1234
         BNE   @RF01234                                            1234
         TM    TRMRSACT(RTRM),B'10000000'                          1234
         BNO   @RF01234                                            1234
         CLI   TRMTYPE(RTRM),X'00'                                 1234
         BE    @RF01234                                            1234
         L     @10,LINETTE2-1                                      1234
         LA    @10,0(,@10)                                         1234
         CR    RTRM,@10                                            1234
         BE    @RF01234                                            1234
*               STOPLNCT=STOPLNCT+ONE;/* ONE SHOULD BE ACTIVE        */
         IC    @10,STOPLNCT                                        1235
         LA    @10,1(,@10)                                         1235
         STC   @10,STOPLNCT                                        1235
*             ELSE                                                 1236
*               ;                   /* DON'T INCREMENT               */
@RF01234 DS    0H                                                  1237
*           END;                    /* CHECKED FOR SAME      @YM09049*/
*         ELSE                                                     1238
*           ;                       /* NCP OTHERWISE INACTYM09049    */
@RF01229 DS    0H                                                  1239
*       END;                        /* END OF DO UNTIL               */
@DE01217 L     @10,LINETTE2-1                                      1239
         LA    @10,0(,@10)                                         1239
         CR    RTRM,@10                                            1239
         BNE   @DL01217                                            1239
*       IF STOPLNCT=ZERO THEN       /* YES,OK STOP DIAL IF REQ'RD    */
         CLI   STOPLNCT,0                                          1240
         BNE   @RF01240                                            1240
*         DO;                       /* GO AHEAD AND DEPRIME          */
*           LGBSAVED=LINETTE2->TRMDESTQ->QCBLGBAD;/* SAVE LGB ADDR 1242
*                                                            @YM06925*/
         SLR   @03,@03                                             1242
         ICM   @03,7,TRMDESTQ(@10)                                 1242
         MVC   LGBSAVED(3),QCBLGBAD(@03)                           1242
*           RPARM=SAVETNT1;         /* SETUP PARAMETER TO IAP04      */
         LH    RPARM,SAVETNT1                                      1243
         N     RPARM,@CF02262                                      1243
*           CALL IEDIAP04;          /* GET THE NAT ADDRESS           */
         L     @10,AVTSAVTP(,IEDQAPTR)                             1244
         L     @15,SAVTTNTX(,@10)                                  1244
         BALR  @14,@15                                             1244
*           CALL RVTSCAN;           /* SCAN THE RVT                  */
         BAL   @14,RVTSCAN                                         1245
*         END;                      /* PERFORMED PRIMING FOR DIAL    */
*       ELSE                                                       1247
*         ;                         /* MORE THAN ONE LINE UP         */
@RF01240 DS    0H                                                  1248
*     END;                          /* DONE WITH NORMAL PATH         */
*   ELSE                            /* DIAL REDRIVE                  */
*     CALL RVTSCAN;                 /* STOP THE DIAL TERMINAL        */
         B     @RC01206                                            1249
@RF01206 BAL   @14,RVTSCAN                                         1249
*   END STOPDIAL;                   /* STOP ANY DIAL IF NECESSARY    */
@EL00028 DS    0H                                                  1250
@EF00028 DS    0H                                                  1250
@ER00028 L     @14,@SA00028                                        1250
         BR    @14                                                 1250
*                                                                  1251
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE VERIFIES THE NUMBER OF PLCBS TO RETURN TO     */
*   /* OPERTOR CONTROL WHEN STOPPING A BYSNC/START/STOP LINE BY      */
*   /* SETTING TRMOCNI AND OR LCBOCNI WITHOUT GIVING UP CONTROL.     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1251
*VERIFY:                                                           1251
*   PROC OPTIONS(RETREG,SAVE(14));                                 1251
VERIFY   ST    @14,@SA00029                                        1251
*   RFY                                                            1252
*    (RQCB,                                                        1252
*     IEDQQPTR) RSTD;                                              1252
*   IF TRMSUBST^=AVTFZERO THEN      /* ANY SUBSTRUCTURES?            */
         LH    @10,TRMSUBST(,RTRM)                                 1253
         N     @10,@CF02262                                        1253
         C     @10,AVTFZERO(,IEDQAPTR)                             1253
         BE    @RF01253                                            1253
*     DO;                           /* YES                           */
*       IF TRMDIAL=ON&TRMSUBST^=TRMUTERM THEN/* DIAL AND LOGICAL   1255
*                                      CONNECTED             @YM06453*/
         TM    TRMDIAL(RTRM),B'00001000'                           1255
         BNO   @RF01255                                            1255
         CLC   TRMSUBST(2,RTRM),TRMUTERM(RTRM)                     1255
         BE    @RF01255                                            1255
*         SAVEUTRM=TRMUTERM;        /* SAVE CTERM TTCIN      @YM06453*/
         LH    @10,TRMUTERM(,RTRM)                                 1256
         N     @10,@CF02262                                        1256
         STH   @10,SAVEUTRM                                        1256
*       ELSE                                                       1257
*         ;                         /* FALL THROUGH          @YM06453*/
@RF01255 DS    0H                                                  1258
*       RPARM=TRMSUBST;             /* GET THE SUB TNT INDEX         */
         LH    RPARM,TRMSUBST(,RTRM)                               1258
         N     RPARM,@CF02262                                      1258
*       CALL GETTRM;                /* GET TERMINAL ENTRY ADDRESS    */
         BAL   @14,GETTRM                                          1259
*       IF TRMDIAL=ON&SAVEUTRM^=AVTFZERO THEN/* DIAL AND LOGICAL   1260
*                                      CONNECTED             @YM06453*/
         TM    TRMDIAL(RTRM),B'00001000'                           1260
         BNO   @RF01260                                            1260
         LH    @10,SAVEUTRM                                        1260
         N     @10,@CF02262                                        1260
         C     @10,AVTFZERO(,IEDQAPTR)                             1260
         BE    @RF01260                                            1260
*         DO;                       /* YES                   @YM06453*/
*           SAVLOGCL=RTRM;          /* SAVE THE CURRENT TRM ENTRY  1262
*                                                            @YM06453*/
         STCM  RTRM,7,SAVLOGCL                                     1262
*           RPARM=SAVEUTRM;         /* GET CTERM TTCIN       @YM06453*/
         LR    RPARM,@10                                           1263
*           CALL GETTRM;            /* GET THE TRM ENTRY ADDR      1264
*                                                            @YM06453*/
         BAL   @14,GETTRM                                          1264
*           RQCB=TRMDESTQ;          /* GET THE QCB ADDR      @YM06453*/
         SLR   RQCB,RQCB                                           1265
         ICM   RQCB,7,TRMDESTQ(RTRM)                               1265
*           IF QCBPLCBN=ON THEN     /* PLCB ASSIGNED?        @YM06453*/
         LR    @10,IEDQQPTR                                        1266
         AL    @10,@CF02259                                        1266
         TM    QCBPLCBN-4(@10),B'10000000'                         1266
         BNO   @RF01266                                            1266
*             DO;                   /* YES                   @YM06453*/
*               IF NSLREQTY=NSLCLOSN THEN/* FLUSH CLOSE?     @YM06966*/
         CLI   NSLREQTY(IEDNSLP),X'0B'                             1268
         BNE   @RF01268                                            1268
*                 TRMCLOSN=ON;      /* YES SET FLUSH STOP INDICATOR
*                                                            @YM06966*/
         LA    @03,TRMCLOSN(,RTRM)                                 1269
         LR    @15,@03                                             1269
         LA    @10,3                                               1269
         NR    @15,@10                                             1269
         LCR   @15,@15                                             1269
         ALR   @03,@15                                             1269
         L     @10,0(,@03)                                         1269
@GL00056 LR    @06,@10                                             1269
         O     @06,@CB02277+3(@15)                                 1269
         CS    @10,@06,0(@03)                                      1269
         BNE   @GL00056                                            1269
*               ELSE                /* STOPLINE OR QUICK CLOSE     1270
*                                                            @YM06966*/
*                 DO;               /* FALL THROUGH          @YM06966*/
         B     @RC01268                                            1270
@RF01268 DS    0H                                                  1271
*                   TRMOCNI=ON;     /* SET OCNI              @YM06453*/
         OI    TRMOCNI(RTRM),B'00100000'                           1271
*                   QCBPLCBA->LCBOCNI=ON;/* FORCE RETURN PLCB TO   1272
*                                      OPCTL                 @YM06453*/
         LR    @10,IEDQQPTR                                        1272
         AL    @10,@CF02259                                        1272
         L     @10,QCBPLCBA-5(,@10)                                1272
         OI    LCBOCNI(@10),B'00100000'                            1272
*                 END;              /* SET ALL BITS FOR EITHER TYPE
*                                      OF STOP               @YM06966*/
*               NSLPLCBR=ON;        /* INDICATE PLCB WILL RETURN   1274
*                                                            @YM06453*/
@RC01268 OI    NSLPLCBR(IEDNSLP),B'10000000'                       1274
*             END;                  /* DONE                  @YM06453*/
*           ELSE                    /* NO PLCB ASSIGNED      @YM06453*/
*             DO;                   /* YES                   @YM06453*/
         B     @RC01266                                            1276
@RF01266 DS    0H                                                  1277
*               IF TRMINOUT=ON×TRMRDOUT=ON×(TRMCONT=ON&TRMSESSN=OFF)
*                 THEN                                             1277
*                                                                  1277
         TM    TRMINOUT(RTRM),B'00000011'                          1277
         BNZ   @RT01277                                            1277
         TM    TRMCONT(RTRM),B'10000000'                           1277
         BNO   @RF01277                                            1277
         TM    TRMSESSN(RTRM),B'01000000'                          1277
         BNZ   @RF01277                                            1277
@RT01277 DS    0H                                                  1278
*/* INVITE OR READ OR CONTACT OUTSTANDING @YM06453                   */
*                                                                  1278
*                 DO;               /* YES                   @YM06453*/
*                   IF NSLREQTY=NSLCLOSN THEN/* FLUSH CLOSE? @YM06966*/
         CLI   NSLREQTY(IEDNSLP),X'0B'                             1279
         BNE   @RF01279                                            1279
*                     TRMCLOSN=ON;  /* SET FLUSH STOP INDICATOR    1280
*                                                            @YM06966*/
         LA    @03,TRMCLOSN(,RTRM)                                 1280
         LR    @15,@03                                             1280
         LA    @10,3                                               1280
         NR    @15,@10                                             1280
         LCR   @15,@15                                             1280
         ALR   @03,@15                                             1280
         L     @10,0(,@03)                                         1280
@GL00058 LR    @06,@10                                             1280
         O     @06,@CB02277+3(@15)                                 1280
         CS    @10,@06,0(@03)                                      1280
         BNE   @GL00058                                            1280
*                   ELSE            /* REGULAR STOPLINE OR QUICK   1281
*                                      CLOSE                 @YM06966*/
*                     TRMOCNI=ON;   /* SET OCNI              @YM06453*/
         B     @RC01279                                            1281
@RF01279 OI    TRMOCNI(RTRM),B'00100000'                           1281
*                   NSLPLCBR=ON;    /* INDICATE PLCB WILL RETURN   1282
*                                                            @YM06453*/
@RC01279 OI    NSLPLCBR(IEDNSLP),B'10000000'                       1282
*                 END;              /* SET ALL FLAGS FOR NO PLCB   1283
*                                      ASSIGNED              @YM06453*/
*               ELSE                                               1284
*                 ;                 /* NOT DOING ANYTHING    @YM06453*/
@RF01277 DS    0H                                                  1285
*             END;                  /* DONE                  @YM06453*/
*           SAVEUTRM=''B;           /* CLEAR                 @YM06453*/
@RC01266 SLR   @10,@10                                             1286
         STH   @10,SAVEUTRM                                        1286
*           RTRM=SAVLOGCL;          /* RESTORE TERMINAL ENTRY      1287
*                                                            @YM06453*/
         L     RTRM,SAVLOGCL-1                                     1287
         LA    RTRM,0(,RTRM)                                       1287
*           SAVLOGCL=''B;           /* CLEAR                 @YM06453*/
         STCM  @10,7,SAVLOGCL                                      1288
*         END;                      /* CTERM PLCB SHOULD RETURN IF 1289
*                                      NECCESSARY            @YM06453*/
*       ELSE                                                       1290
*         ;                         /* NORMAL CASES FALL THROUGH   1290
*                                                            @YM06453*/
@RF01260 DS    0H                                                  1291
*       DO UNTIL(TRMTYPE=TRMNSDLC); /* DO UNTIL LINE IS REACHED AG   */
@DL01291 DS    0H                                                  1292
*         RQCB=TRMDESTQ;            /* GET THE QCB ADDRESS           */
         SLR   RQCB,RQCB                                           1292
         ICM   RQCB,7,TRMDESTQ(RTRM)                               1292
*         IF QCBPLCBN=ON THEN       /* PLCB ASSIGNED?                */
         LR    @10,IEDQQPTR                                        1293
         AL    @10,@CF02259                                        1293
         TM    QCBPLCBN-4(@10),B'10000000'                         1293
         BNO   @RF01293                                            1293
*           DO;                     /* YES                           */
*             IF NSLREQTY=NSLCLOSN THEN/* FLUSH CLOSE?       @YM06966*/
         CLI   NSLREQTY(IEDNSLP),X'0B'                             1295
         BNE   @RF01295                                            1295
*               TRMCLOSN=ON;        /* SET FLUSH STOP INDICATOR    1296
*                                                            @YM06966*/
         LA    @03,TRMCLOSN(,RTRM)                                 1296
         LR    @15,@03                                             1296
         LA    @10,3                                               1296
         NR    @15,@10                                             1296
         LCR   @15,@15                                             1296
         ALR   @03,@15                                             1296
         L     @10,0(,@03)                                         1296
@GL00059 LR    @06,@10                                             1296
         O     @06,@CB02277+3(@15)                                 1296
         CS    @10,@06,0(@03)                                      1296
         BNE   @GL00059                                            1296
*             ELSE                  /* STOPLINE OR QUICK CLOSE     1297
*                                                            @YM06966*/
*               DO;                 /* FALL THRU                     */
         B     @RC01295                                            1297
@RF01295 DS    0H                                                  1298
*                 TRMOCNI=ON;       /* PLCB WILL RETURN TO OPCTL     */
         OI    TRMOCNI(RTRM),B'00100000'                           1298
*                 QCBPLCBA->LCBOCNI=ON;/* FORCE RETURN TO OPCTL      */
         LR    @10,IEDQQPTR                                        1299
         AL    @10,@CF02259                                        1299
         L     @10,QCBPLCBA-5(,@10)                                1299
         OI    LCBOCNI(@10),B'00100000'                            1299
*               END;                /* VERIFIED THIS PLCB WILL RETURN*/
*             NSLPLCBR=ON;          /* INDICATE PLCB WILL RTN        */
@RC01295 OI    NSLPLCBR(IEDNSLP),B'10000000'                       1301
*           END;                    /* SET ALL BITS FOR WHATEVER TYPE
*                                      IT IS                 @YM06966*/
*         ELSE                      /* NO PLCB ASSIGNED              */
*           DO;                     /* DO                            */
         B     @RC01293                                            1303
@RF01293 DS    0H                                                  1304
*             IF TRMINOUT=ON×TRMRDOUT=ON×(TRMCONT=ON&TRMSESSN=OFF) THEN
         TM    TRMINOUT(RTRM),B'00000011'                          1304
         BNZ   @RT01304                                            1304
         TM    TRMCONT(RTRM),B'10000000'                           1304
         BNO   @RF01304                                            1304
         TM    TRMSESSN(RTRM),B'01000000'                          1304
         BNZ   @RF01304                                            1304
@RT01304 DS    0H                                                  1305
*                                   /* INVITE OR READ OR CONTACT   1305
*                                      OUTSTANDING           @YM05736*/
*               DO;                 /* YES                           */
*                 IF NSLREQTY=NSLCLOSN THEN/* FLUSH CLOSE ?  @YM06966*/
         CLI   NSLREQTY(IEDNSLP),X'0B'                             1306
         BNE   @RF01306                                            1306
*                   TRMCLOSN=ON;    /* SET FLUSH STOP INDICATOR      */
         LA    @03,TRMCLOSN(,RTRM)                                 1307
         LR    @15,@03                                             1307
         LA    @10,3                                               1307
         NR    @15,@10                                             1307
         LCR   @15,@15                                             1307
         ALR   @03,@15                                             1307
         L     @10,0(,@03)                                         1307
@GL00061 LR    @06,@10                                             1307
         O     @06,@CB02277+3(@15)                                 1307
         CS    @10,@06,0(@03)                                      1307
         BNE   @GL00061                                            1307
*                 ELSE              /* REGULAR STOPLINE OR QUICK   1308
*                                      CLOSE                 @YM06966*/
*                   TRMOCNI=ON;     /* PLCB WILL RETURN TO OPCTL     */
         B     @RC01306                                            1308
@RF01306 OI    TRMOCNI(RTRM),B'00100000'                           1308
*                 NSLPLCBR=ON;      /* INDICATE PLCB WILL RETURN     */
@RC01306 OI    NSLPLCBR(IEDNSLP),B'10000000'                       1309
*               END;                /* VERIFIED A PLCB WILL RETURN   */
*             ELSE                  /* GET PLCB FOR GEN POLL IF IN 1311
*                                      SESSION               @YM07649*/
*               DO;                                                1311
         B     @RC01304                                            1311
@RF01304 DS    0H                                                  1312
*                 RQCB=TRMDESTQ;    /* GET QCB               @YM07649*/
         SLR   RQCB,RQCB                                           1312
         ICM   RQCB,7,TRMDESTQ(RTRM)                               1312
*                 IF QCBPLCBN=OFF&QCBRCVRQ=OFF THEN/* PLCB NOT     1313
*                                      ASSIGNED OR REQUESTED         */
         LR    @10,IEDQQPTR                                        1313
         SL    @10,@CF00044                                        1313
         TM    QCBPLCBN(@10),B'10010000'                           1313
         BNZ   @RF01313                                            1313
*                   IF TRMINPTP=ON&TRMSESSN=ON THEN/* DO WE NEED TO
*                                      BREAK THE NCP SESSION @OZ29191*/
         TM    TRMINPTP(RTRM),B'01000000'                          1314
         BNO   @RF01314                                            1314
         TM    TRMSESSN(RTRM),B'01000000'                          1314
         BNO   @RF01314                                            1314
*                     DO;                                          1315
*                       TRMINPTP=OFF;/* SET INPUT PENDING OFF, TO  1316
*                                      PREVENT FURTHER USE OF THE  1316
*                                      PLCB                  @OZ29191*/
         NI    TRMINPTP(RTRM),B'10111111'                          1316
*                       QCBRCVRQ=ON;/* REQUEST A PLCB        @YM07649*/
         OI    QCBRCVRQ(@10),B'00010000'                           1317
*                       RPARM=RQCB; /* SET PARAMETER         @YM07649*/
         LR    RPARM,RQCB                                          1318
*                       CALL IEDIAP;/* GET A PLCB            @YM07649*/
         L     @10,AVTSAVTP(,IEDQAPTR)                             1319
         L     @15,SAVTPREQ(,@10)                                  1319
         BALR  @14,@15                                             1319
*                       RFY                                        1320
*                         RENTRY RSTD;                             1320
*                       IF RENTRY^=AVTEZERO THEN/* DID WE GET A PLCB
*                                      ?                     @YM07649*/
         LTR   RENTRY,RENTRY                                       1321
         BZ    @RF01321                                            1321
*                         DO;                                      1322
*                           IF NSLREQTY=NSLCLOSN THEN/* FLUSH CLOSE ?
*                                                            @YM07649*/
         CLI   NSLREQTY(IEDNSLP),X'0B'                             1323
         BNE   @RF01323                                            1323
*                             TRMCLOSN=ON;/* SET FLUSH STOP INDICATOR
*                                                            @YM07649*/
         LA    @06,TRMCLOSN(,RTRM)                                 1324
         LR    @03,@06                                             1324
         LA    @14,3                                               1324
         NR    @03,@14                                             1324
         LCR   @03,@03                                             1324
         ALR   @06,@03                                             1324
         L     @14,0(,@06)                                         1324
@GL00063 LR    @10,@14                                             1324
         O     @10,@CB02277+3(@03)                                 1324
         CS    @14,@10,0(@06)                                      1324
         BNE   @GL00063                                            1324
*                           ELSE    /* STOPLINE OR QUICK CLOSE     1325
*                                                            @YM07649*/
*                             DO;                                  1325
         B     @RC01323                                            1325
@RF01323 DS    0H                                                  1326
*                               TRMOCNI=ON;                        1326
         OI    TRMOCNI(RTRM),B'00100000'                           1326
*                               QCBPLCBA->LCBOCNI=ON;/* FORCE RETURN
*                                      TO OP CONTROL         @YM07649*/
         LR    @14,IEDQQPTR                                        1327
         AL    @14,@CF02259                                        1327
         L     @14,QCBPLCBA-5(,@14)                                1327
         OI    LCBOCNI(@14),B'00100000'                            1327
*                             END;                                 1328
*                           NSLPLCBR=ON;/* INDICATE PLCB WILL RETURN
*                                                            @YM07649*/
@RC01323 OI    NSLPLCBR(IEDNSLP),B'10000000'                       1329
*                           CALL POSTR;/* POST PLCB TO ITSELF,     1330
*                                      CAUSING IEDNKA TO SEND A    1330
*                                      DISCONNECT            @OZ29191*/
         BAL   @14,POSTR                                           1330
*                           RFY                                    1331
*                             RENTRY UNRSTD;                       1331
*                         END;                                     1332
*                     END;                                         1333
@RF01321 DS    0H                                                  1334
*               END;                                               1334
@RF01314 DS    0H                                                  1334
@RF01313 DS    0H                                                  1335
*           END;                    /* ALL THAT IS NEEDED WAS DONE   */
@RC01304 DS    0H                                                  1336
*         IF TRMTYPE=TRMCLUST&CLUSTFLG=OFF THEN/* CLUSTER AND 1ST  1336
*                                      TIME                          */
@RC01293 CLI   TRMTYPE(RTRM),X'40'                                 1336
         BNE   @RF01336                                            1336
         TM    CLUSTFLG,B'00001000'                                1336
         BNZ   @RF01336                                            1336
*           DO;                     /* THROUGH THEN DO               */
*             CLUSTFLG=ON;          /* SET NOT THE FIRST TIME FLAG   */
         OI    CLUSTFLG,B'00001000'                                1338
*             IF TRMSUBST^=AVTFZERO THEN/* SUBSTRUCTURES?            */
         LH    @10,TRMSUBST(,RTRM)                                 1339
         N     @10,@CF02262                                        1339
         C     @10,AVTFZERO(,IEDQAPTR)                             1339
         BE    @RF01339                                            1339
*               RPARM=TRMSUBST;     /* GET THE TNT INDEX             */
         LR    RPARM,@10                                           1340
*             ELSE                  /* NO SUBSTRUCURES               */
*               DO;                 /* UNDER THE CLUSTER             */
         B     @RC01339                                            1341
@RF01339 DS    0H                                                  1342
*                 CLUSTFLG=OFF;     /* RESET 1ST TIME FLAG           */
         NI    CLUSTFLG,B'11110111'                                1342
*                 RPARM=TRMCOHRT;   /* GET THE ADJACENT STRUCTURE    */
         LH    RPARM,TRMCOHRT(,RTRM)                               1343
         N     RPARM,@CF02262                                      1343
*               END;                /* REACH EVERY POSSIBLE RESOUR   */
*           END;                    /* DONE WITH THIS CLUSTER        */
*         ELSE                      /* NOT A CLUSTER OR THE FLAG IS
*                                      SET                           */
*           DO;                     /* YES                           */
         B     @RC01336                                            1346
@RF01336 DS    0H                                                  1347
*             IF TRMTYPE=TRMCLUST THEN/* CLUSTER?                    */
         CLI   TRMTYPE(RTRM),X'40'                                 1347
         BNE   @RF01347                                            1347
*               CLUSTFLG=OFF;       /* TIME TO RESET FLAG            */
         NI    CLUSTFLG,B'11110111'                                1348
*             ELSE                                                 1349
*               ;                   /* FALL THROUGH                  */
@RF01347 DS    0H                                                  1350
*             RPARM=TRMCOHRT;       /* GET NEXT RESOURCE             */
         LH    RPARM,TRMCOHRT(,RTRM)                               1350
         N     RPARM,@CF02262                                      1350
*           END;                    /* TO GET THROUGH THE LOOP       */
*         CALL GETTRM;              /* GET THE TERMINAL ADDRESS      */
@RC01336 BAL   @14,GETTRM                                          1352
*         IF TRMTYPE=TRMCLUST&CLUSTFLG=ON THEN/* SAME CLUSTER REACHED
*                                      TWICED?@YM05730               */
         CLI   TRMTYPE(RTRM),X'40'                                 1353
         BNE   @RF01353                                            1353
         TM    CLUSTFLG,B'00001000'                                1353
         BNO   @RF01353                                            1353
*           DO;                     /* YES                   @YM05730*/
*             RPARM=TRMCOHRT;       /* GET NEXT TERMINAL     @YM05730*/
         LH    RPARM,TRMCOHRT(,RTRM)                               1355
         N     RPARM,@CF02262                                      1355
*             CLUSTFLG=OFF;         /* SET FLAG OFF          @YM07727*/
         NI    CLUSTFLG,B'11110111'                                1356
*             CALL GETTRM;          /* GET TERMINAL ADDRESS  @YM05730*/
         BAL   @14,GETTRM                                          1357
*           END;                    /* SKIP SETTING OCNI TWICE     1358
*                                                            @YM05730*/
*         ELSE                                                     1359
*           ;                       /* GO AHEAD AND SET OCNI IF OK 1359
*                                                            @YM05730*/
@RF01353 DS    0H                                                  1360
*       END;                        /* END OF DO UNTIL               */
@DE01291 CLI   TRMTYPE(RTRM),X'20'                                 1360
         BNE   @DL01291                                            1360
*     END;                          /* FINI WITH SUBSTRUCTURES       */
*   ELSE                                                           1362
*     ;                             /* NO SUBS RETURN                */
@RF01253 DS    0H                                                  1363
*   RFY                                                            1363
*    (RQCB,                                                        1363
*     IEDQQPTR) UNRSTD;                                            1363
*   END VERIFY;                     /* VERIFIED ALL PLCBS RETURNING
*                                      TO OPERATOR CONTROL           */
@EL00029 DS    0H                                                  1364
@EF00029 DS    0H                                                  1364
@ER00029 L     @14,@SA00029                                        1364
         BR    @14                                                 1364
*                                                                  1365
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE DOES THE ACTUAL SCAN AND INITIATES THE RESET  */
*   /* AND REMOVAL REQUEST.                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1365
*RVTSCAN:                                                          1365
*   PROC OPTIONS(RETREG,SAVE(14));                                 1365
RVTSCAN  ST    @14,@SA00030                                        1365
*   RFY                                                            1366
*    (RVTPTR,                                                      1366
*     REND,                                                        1366
*     IEDQRVTP,                                                    1366
*     IEDQSATP,                                                    1366
*     IEDQNATP,                                                    1366
*     RENTRY) RSTD;                                                1366
*   IF NSLSDIAL=ON THEN             /* DIAL REDRIVE?                 */
         TM    NSLSDIAL(IEDNSLP),B'00010000'                       1367
         BNO   @RF01367                                            1367
*     DO;                           /* YES, REINTIALIZE PTRS         */
*       LGBSAVED=NSLSAVE;           /* RESTORE LGB ADDR      @YM05736*/
         MVC   LGBSAVED(3),NSLSAVE(IEDNSLP)                        1369
*       RNSLBFR=RNSLBFR-LENGTH(IEDNNSLD);/* BACKUP TO THE PREFIX     */
         LA    @14,8                                               1370
         SLR   RNSLBFR,@14                                         1370
*       RVTPTR=RNSLBFR->NSLSAVE1;   /* RESTORE THE RVT PTR           */
         L     RVTPTR,NSLSAVE1(,RNSLBFR)                           1371
*       REND=RNSLBFR->NSLSAVE2;     /* RESTORE THE END OF RVT PTR    */
         L     REND,NSLSAVE2(,RNSLBFR)                             1372
*       RNSLBFR=RNSLBFR+LENGTH(IEDNNSLD);/* ADJUST THE PTR TO REG  1373
*                                      BASE                          */
         ALR   RNSLBFR,@14                                         1373
*     END;                          /* REINITIALIZATION COMPLETE     */
*   ELSE                            /* NORMAL PATH                   */
*     DO;                           /* SETUP NETWORK ADDR AND RVT    */
         B     @RC01367                                            1375
@RF01367 DS    0H                                                  1376
*       RVTPTR=RENTRY;              /* SETUP NETWORK ADDRESS         */
         LR    RVTPTR,RENTRY                                       1376
*       SHIFTLEN=((LENGTH(IEDNATD)*SHFTBITS)-SAVTSUBL);/* GET NO TO
*                                      SHIFT                         */
         L     @14,AVTSAVTP(,IEDQAPTR)                             1377
         LA    @10,16                                              1377
         SLR   @07,@07                                             1377
         IC    @07,SAVTSUBL(,@14)                                  1377
         SLR   @10,@07                                             1377
         STH   @10,SHIFTLEN                                        1377
*       SRL(RVTPTR,SHIFTLEN);       /* SHIFT OUT THE ELEMENT ADDR    */
         SRL   RVTPTR,0(@10)                                       1378
*       RVTPTR=((RVTPTR-ONE)*LENGTH(IEDSATD))+SAVTSAT;/* PT TO THE 1379
*                                      RVT FOR THIS LINE             */
         LR    @10,RVTPTR                                          1379
         BCTR  @10,0                                               1379
         SLA   @10,3                                               1379
         AL    @10,SAVTSAT(,@14)                                   1379
         LR    RVTPTR,@10                                          1379
*       RVTPTR=RVTPTR->SATRNRVT;    /* GET THE RVT TABLE ADDR THAT 1380
*                                      CONTAINS THIS LINE            */
         L     RVTPTR,SATRNRVT(,RVTPTR)                            1380
*       REND=RVTPTR+((RVTPTR->RVTNUM)*LENGTH(RVTINDEX));/* PT TO END */
         LH    REND,RVTNUM(,RVTPTR)                                1381
         ALR   REND,REND                                           1381
         ALR   REND,RVTPTR                                         1381
*       RVTPTR=RVTPTR+LENGTH(RVTINDEX);/* POINT TO NCP TNT INDEX     */
         AL    RVTPTR,@CF00064                                     1382
*     END;                          /* INITIALIZATION COMPLETED      */
*   DO UNTIL(RPARM^=AVTFZERO&RVTEXIT=ON);/* FIND 1ST TNT INDEX THAT
*                                      CAN BE USED           @YM05736*/
@RC01367 DS    0H                                                  1384
@DL01384 DS    0H                                                  1385
*     RPARM=RVTPTR->RVTINDEX;       /* GET TNT INDEX         @YM05736*/
         LH    RPARM,RVTINDEX(,RVTPTR)                             1385
*     IF RPARM^=AVTFZERO THEN       /* TNT INDEX SET CURRENT TNT   1386
*                                      INDEX                 @YM05736*/
         C     RPARM,AVTFZERO(,IEDQAPTR)                           1386
         BE    @RF01386                                            1386
*       DO;                         /* YES                   @YM05736*/
*         RVTEXIT=ON;               /* FOUND ONE             @YM05736*/
         OI    RVTEXIT,B'00000100'                                 1388
*         NSLTTCIN=RPARM;           /* SAVE TNT INDEX        @YM05736*/
         STH   RPARM,NSLTTCIN(,IEDNSLP)                            1389
*       END;                        /* READY TO LEAVE LOO@YM05736    */
*     ELSE                          /* EMPTY SLOT            @YM05736*/
*       DO;                         /* YES                   @YM05736*/
         B     @RC01386                                            1391
@RF01386 DS    0H                                                  1392
*         IF REND=RVTPTR THEN       /* REACHED THE END       @YM05736*/
         CR    REND,RVTPTR                                         1392
         BNE   @RF01392                                            1392
*           RVTEXIT=ON;             /* SET EXIT SWITCH       @YM05736*/
         OI    RVTEXIT,B'00000100'                                 1393
*         ELSE                                                     1394
*           ;                       /* CONTINUE TO LOOP      @YM05736*/
@RF01392 DS    0H                                                  1395
*       END;                        /* BUMPED TO NEXT        @YM05736*/
*     RVTPTR=RVTPTR+LENGTH(RVTINDEX);/* PICK UP NEXT ENTRY   @OY18822*/
@RC01386 AL    RVTPTR,@CF00064                                     1396
*   END;                            /* DONE                  @YM05736*/
@DE01384 C     RPARM,AVTFZERO(,IEDQAPTR)                           1397
         BE    @DL01384                                            1397
         TM    RVTEXIT,B'00000100'                                 1397
         BNO   @DL01384                                            1397
*   DO WHILE(RVTPTR^=REND&EXITTIME=OFF&NSLBUFFR^=AVTFZERO);/* LOOP 1398
*                                      UNTIL END OF THE TABLE IS   1398
*                                      REACHED OR EXIT FLAG ON       */
         B     @DE01398                                            1398
@DL01398 DS    0H                                                  1399
*     IF NSLSDIAL=ON THEN           /* DIAL REDRIVE                  */
         TM    NSLSDIAL(IEDNSLP),B'00010000'                       1399
         BNO   @RF01399                                            1399
*       DO;                         /* YES, DON'T GET NEXT TNT I     */
*         NSLSDIAL=OFF;             /* TURN OFF REDRIVE SWITCH       */
         NI    NSLSDIAL(IEDNSLP),B'11101111'                       1401
*         RPARM=NSLTTCIN;           /* USE THE TNT CURRENTLY WORK- 1402
*                                      ING WITH BEFORE TEMP. EXIT    */
         LH    RPARM,NSLTTCIN(,IEDNSLP)                            1402
         N     RPARM,@CF02262                                      1402
*       END;                        /* DONE                          */
*     ELSE                          /* ADJUST TO NEXT TNT INDEX      */
*       RPARM=RVTPTR->RVTINDEX;     /* GET THE NEXT TNT INDEX        */
         B     @RC01399                                            1404
@RF01399 LH    RPARM,RVTINDEX(,RVTPTR)                             1404
*     IF RPARM^=AVTFZERO THEN       /* EMPTY SLOT IN RVT?            */
@RC01399 C     RPARM,AVTFZERO(,IEDQAPTR)                           1405
         BE    @RF01405                                            1405
*       DO;                         /* NO, CONTINUE                  */
*         NSLTTCIN=RPARM;           /* INDICATE CURRENT TNT INDEX    */
         STH   RPARM,NSLTTCIN(,IEDNSLP)                            1407
*         CALL GETTRM;              /* GET TRM ENTRY ADDRESS         */
         BAL   @14,GETTRM                                          1408
*         NSLCTTRM=RTRM;            /* SETUP CURRENT TRM PTR         */
         STCM  RTRM,7,NSLCTTRM(IEDNSLP)                            1409
*         IF TRMDIAL=ON&TRMTYPE^=TRMCTERM&TRMTYPE^=TRMNSDLC&TRMDESTQ->
*             QCBLGBAD=LGBSAVED THEN/* DIAL, NOT CTERM , NOT A LINE
*                                      AND LGB MATCHES               */
         TM    TRMDIAL(RTRM),B'00001000'                           1410
         BNO   @RF01410                                            1410
         CLI   TRMTYPE(RTRM),X'48'                                 1410
         BE    @RF01410                                            1410
         CLI   TRMTYPE(RTRM),X'20'                                 1410
         BE    @RF01410                                            1410
         SLR   @14,@14                                             1410
         ICM   @14,7,TRMDESTQ(RTRM)                                1410
         CLC   QCBLGBAD(3,@14),LGBSAVED                            1410
         BNE   @RF01410                                            1410
*           DO;                     /* VALID ENTRY CONTINUE          */
*             TRMSPACT=OFF;         /* SET SUPERIOR RESOURCE ACT     */
         NI    TRMSPACT(RTRM),B'11101111'                          1412
*             IF NSLREQTY=NSLSTOPL& /* STOPLINE,C            @YM09060*/
*                 (AVTQUCKN=OFF&NCPPTR->TRMNCPCL=OFF) THEN         1413
         CLI   NSLREQTY(IEDNSLP),X'02'                             1413
         BNE   @RF01413                                            1413
         TM    AVTQUCKN(IEDQAPTR),B'00000010'                      1413
         BNZ   @RF01413                                            1413
         L     @14,NCPPTR-1                                        1413
         TM    TRMNCPCL(@14),B'01000000'                           1413
         BNZ   @RF01413                                            1413
*               DO;                 /* YES                   @YM08526*/
*                 CALL CHKTSO;      /* TSO SESSION?          @YM08526*/
         BAL   @14,CHKTSO                                          1415
*                 IF RENTRY=AVTFZERO THEN/* NOT IN TSO             1416
*                                      SESSION@YM08526               */
         C     RENTRY,AVTFZERO(,IEDQAPTR)                          1416
         BNE   @RF01416                                            1416
*                   CALL STPTERM;   /* STOP IF NECESSARY             */
         BAL   @14,STPTERM                                         1417
*                 ELSE                                             1418
*                   ;               /* TSO SESSION           @YM08526*/
@RF01416 DS    0H                                                  1419
*               END;                /*                       @YM08526*/
*             ELSE                  /* ALL OTHER STOPLINE@YM08526    */
*               CALL STPTERM;       /* TRY TO STOP IT        @YM08526*/
         B     @RC01413                                            1420
@RF01413 BAL   @14,STPTERM                                         1420
*             IF TRMDESTQ->QCBDELAY=ON THEN/* ON TIME DELAY? @YM05736*/
@RC01413 SLR   @14,@14                                             1421
         ICM   @14,7,TRMDESTQ(RTRM)                                1421
         TM    QCBDELAY(@14),B'00000010'                           1421
         BNO   @RF01421                                            1421
*               DO;                 /* YES, REQUEST REMOVAL          */
*                 RPARM=TRMDESTQ;   /* GET QCB ADDRESS               */
         LR    RPARM,@14                                           1423
*                 CALL IEDQHG02;    /* REQUEST REMOVAL               */
         L     @15,AVTHG02(,IEDQAPTR)                              1424
         BALR  @14,@15                                             1424
*                 TRMDESTQ->QCBSLINK=TRMDESTQ->QCBSTCHN;/* RESET LINK
*                                      FIELD                 @YM08480*/
         SLR   @14,@14                                             1425
         ICM   @14,7,TRMDESTQ(RTRM)                                1425
         MVC   QCBSLINK(3,@14),QCBSTCHN(@14)                       1425
*                 TRMDESTQ->QCBSTCHN=ADDR(TRMDESTQ->QCBSTVTO);/*   1426
*                                      SETUP STCB POINTER    @YM08480*/
         LA    @10,QCBSTVTO(,@14)                                  1426
         STCM  @10,7,QCBSTCHN(@14)                                 1426
*               END;                /* DEPRIMED THE RESOURCE         */
*             ELSE                                                 1428
*               ;                   /* NOT ON THE QUE DO NOTHING     */
@RF01421 DS    0H                                                  1429
*           END;                    /* COMPLETED NECESSARY PRIMNG    */
*         ELSE                      /* DIDN'T PASS ALL OR SNA        */
*           DO;                     /* DETERMINE WHICH               */
         B     @RC01410                                            1430
@RF01410 DS    0H                                                  1431
*             IF TRMTYPE=TRMSDLC THEN/* SNA LINE?                    */
         CLI   TRMTYPE(RTRM),X'21'                                 1431
         BNE   @RF01431                                            1431
*               EXITTIME=ON;        /* SET THE EXIT SWITCH           */
         OI    EXITTIME,B'00100000'                                1432
*             ELSE                                                 1433
*               ;                   /* CONTINUE LOOP                 */
@RF01431 DS    0H                                                  1434
*           END;                    /* FOUND OUT WHICH               */
*       END;                        /* COMPLETED ALL PROCESSING FOR
*                                      NON-ZERO TNT INDEX            */
*     ELSE                                                         1436
*       ;                           /* ZERO TNT INDEX FALL THRU      */
@RF01405 DS    0H                                                  1437
*     RVTPTR=RVTPTR+LENGTH(RVTINDEX);/* BUMP TO THE NEXT             */
@RC01405 AL    RVTPTR,@CF00064                                     1437
*   END;                            /* END OF DO WHILE               */
@DE01398 CR    RVTPTR,REND                                         1438
         BE    @DC01398                                            1438
         TM    EXITTIME,B'00100000'                                1438
         BNZ   @DC01398                                            1438
         L     @14,NSLBUFFR-1(,IEDNSLP)                            1438
         LA    @14,0(,@14)                                         1438
         C     @14,AVTFZERO(,IEDQAPTR)                             1438
         BNE   @DL01398                                            1438
@DC01398 DS    0H                                                  1439
*   IF EXITTIME=OFF&RVTPTR^=REND THEN/* NOT THROUGH YET      @YM05736*/
         TM    EXITTIME,B'00100000'                                1439
         BNZ   @RF01439                                            1439
         CR    RVTPTR,REND                                         1439
         BE    @RF01439                                            1439
*     DO;                           /* YES                           */
*       NSLSDIAL=ON;                /* SET REDRIVE NEEDED            */
         OI    NSLSDIAL(IEDNSLP),B'00010000'                       1441
*       NSLSAVE=LGBSAVED;           /* SAVE ACROSS POST      @YM05736*/
         MVC   NSLSAVE(3,IEDNSLP),LGBSAVED                         1442
*       RNSLBFR=RNSLBFR-LENGTH(IEDNNSLD);/* BACKUP TO PREFIX         */
         LA    @14,8                                               1443
         SLR   RNSLBFR,@14                                         1443
*       RNSLBFR->NSLSAVE1=RVTPTR;   /* SAVE THE RVT PTR              */
         ST    RVTPTR,NSLSAVE1(,RNSLBFR)                           1444
*       RNSLBFR->NSLSAVE2=REND;     /* SAVE THE END OF RVT PTR       */
         ST    REND,NSLSAVE2(,RNSLBFR)                             1445
*       RNSLBFR=RNSLBFR+LENGTH(IEDNNSLD);/* ADJUST TO BASE STRUCTURE */
         ALR   RNSLBFR,@14                                         1446
*     END;                          /* DONE READY TO EXIT TEMP       */
*   ELSE                            /* READY TO EXIT FOR GOOD        */
*     EXITTIME=OFF;                 /* RESET SWITCH FOR NEXT TIME    */
         B     @RC01439                                            1448
@RF01439 NI    EXITTIME,B'11011111'                                1448
*   RFY                                                            1449
*    (RVTPTR,                                                      1449
*     REND,                                                        1449
*     IEDQRVTP,                                                    1449
*     IEDQSATP,                                                    1449
*     IEDQNATP,                                                    1449
*     RENTRY) UNRSTD;                                              1449
*   END RVTSCAN;                                                   1450
@EL00030 DS    0H                                                  1450
@EF00030 DS    0H                                                  1450
@ER00030 L     @14,@SA00030                                        1450
         BR    @14                                                 1450
*                                                                  1451
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE INITIATES A REQUEST FOR A BUFFER OR A REQUEST */
*   /* TO STOP I/0.                                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1451
*STPLNEGP:                                                         1451
*   PROC OPTIONS(RETREG,SAVE(14));                                 1451
STPLNEGP ST    @14,@SA00031                                        1451
*   DO WHILE(NSLBUFFR^=AVTFZERO&TRMTYPE^=TRMCLUST);                1452
         B     @DE01452                                            1452
@DL01452 DS    0H                                                  1453
*     IF TRMGPACT=ON THEN           /* GENERAL POLLING?      @YM05730*/
         TM    TRMGPACT(RTRM),B'00001000'                          1453
         BNO   @RF01453                                            1453
*       TRMGPACT=OFF;               /* NO GP                 @YM05730*/
         LA    @15,TRMGPACT(,RTRM)                                 1454
         LR    @14,@15                                             1454
         LA    @10,3                                               1454
         NR    @14,@10                                             1454
         LCR   @14,@14                                             1454
         ALR   @15,@14                                             1454
         L     @10,0(,@15)                                         1454
@GL00075 LR    @03,@10                                             1454
         N     @03,@CB02272+3(@14)                                 1454
         CS    @10,@03,0(@15)                                      1454
         BNE   @GL00075                                            1454
*     ELSE                                                         1455
*       ;                           /* FALL THROUGH          @YM05730*/
@RF01453 DS    0H                                                  1456
*     IF NSLREQTY=NSLSTOPL&         /* STOPLINE,C            @YM09060*/
*         (AVTQUCKN=OFF&NCPPTR->TRMNCPCL=OFF) THEN                 1456
         CLI   NSLREQTY(IEDNSLP),X'02'                             1456
         BNE   @RF01456                                            1456
         TM    AVTQUCKN(IEDQAPTR),B'00000010'                      1456
         BNZ   @RF01456                                            1456
         L     @10,NCPPTR-1                                        1456
         TM    TRMNCPCL(@10),B'01000000'                           1456
         BNZ   @RF01456                                            1456
*       DO;                         /* YES                   @YM08526*/
*         CALL CHKTSO;              /* TSO SESSION?          @YM08526*/
         BAL   @14,CHKTSO                                          1458
*         IF RENTRY=AVTFZERO THEN   /* NOT IN TSO SESSION@YM08526    */
         C     RENTRY,AVTFZERO(,IEDQAPTR)                          1459
         BNE   @RF01459                                            1459
*           CALL STPTERM;           /* STOP I/O IF POSSIBLE          */
         BAL   @14,STPTERM                                         1460
*         ELSE                                                     1461
*           ;                       /* DO NOTHING            @YM08526*/
@RF01459 DS    0H                                                  1462
*       END;                        /*                       @YM08526*/
*     ELSE                          /* ALL OTHER STOPLINE@YM08526    */
*       CALL STPTERM;               /* TRY TO STOP IT        @YM08526*/
         B     @RC01456                                            1463
@RF01456 BAL   @14,STPTERM                                         1463
*     NSLTTCIN=TRMCOHRT;            /* GET THE TNT INDEX             */
@RC01456 LH    @10,TRMCOHRT(,RTRM)                                 1464
         N     @10,@CF02262                                        1464
         STH   @10,NSLTTCIN(,IEDNSLP)                              1464
*     RPARM=NSLTTCIN;               /* SETUP INTERFACE TO GETTRM     */
         LR    RPARM,@10                                           1465
*     CALL GETTRM;                  /* GET TRM ENTRY ADDRESS         */
         BAL   @14,GETTRM                                          1466
*     NSLCTTRM=RTRM;                /* SETUP CURRENT TRM ENTRY       */
         STCM  RTRM,7,NSLCTTRM(IEDNSLP)                            1467
*   END;                            /* END THE DO WHILE              */
@DE01452 L     @10,NSLBUFFR-1(,IEDNSLP)                            1468
         LA    @10,0(,@10)                                         1468
         C     @10,AVTFZERO(,IEDQAPTR)                             1468
         BE    @DC01452                                            1468
         CLI   TRMTYPE(RTRM),X'40'                                 1468
         BNE   @DL01452                                            1468
@DC01452 DS    0H                                                  1469
*   IF TRMTYPE^=TRMCLUST THEN       /* EXIT BECAUSE A BUF IS REQ     */
         CLI   TRMTYPE(RTRM),X'40'                                 1469
         BE    @RF01469                                            1469
*     NSLGPTSP=ON;                  /* YES, SET REDRIVE              */
         OI    NSLGPTSP(IEDNSLP),B'01000000'                       1470
*   ELSE                                                           1471
*     ;                             /* FINISHED NOW                  */
@RF01469 DS    0H                                                  1472
*   END STPLNEGP;                   /* DONE WITH GP                  */
@EL00031 DS    0H                                                  1472
@EF00031 DS    0H                                                  1472
@ER00031 L     @14,@SA00031                                        1472
         BR    @14                                                 1472
*GETNCP:                                                           1473
*   PROC OPTIONS(RETREG,SAVE(14));  /* GET NCP TTE           @YM06090*/
GETNCP   ST    @14,@SA00032                                        1473
*   DO UNTIL TRMTYPE=TRMLNCP;       /* LOOP UNTIL REACH NCP  @YM05736*/
@DL01474 DS    0H                                                  1475
*     RPARM=TRMCOHRT;               /* GET NEXT LINE TNT INDEX     1475
*                                                            @YM05736*/
         LH    RPARM,TRMCOHRT(,RTRM)                               1475
         N     RPARM,@CF02262                                      1475
*     CALL GETTRM;                  /* GET TRM ENTRY         @YM05736*/
         BAL   @14,GETTRM                                          1476
*   END;                            /* END OF DO UNTIL       @YM05736*/
@DE01474 CLI   TRMTYPE(RTRM),X'0F'                                 1477
         BNE   @DL01474                                            1477
*   END GETNCP;                     /* GOT NCP TTE           @YM05736*/
@EL00032 DS    0H                                                  1478
@EF00032 DS    0H                                                  1478
@ER00032 L     @14,@SA00032                                        1478
         BR    @14                                                 1478
*                                                                  1479
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE HANDLES THE STARTGP REQUEST BY STOPPING ALL   */
*   /* THE TERMINALS UNDER THE CONTROL UNIT THAT ARE IN SPECIFIC MODE*/
*   /* AND EVENTUALLY INITIATING GENERAL POLL OPERATION.             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1479
*STARTGP:                                                          1479
*   PROC OPTIONS(RETREG,SAVE(14));                                 1479
STARTGP  ST    @14,@SA00033                                        1479
*   RFY                                                            1480
*    (RQCB,                                                        1480
*     IEDQQPTR) RSTD;                                              1480
*   IF NSLGPTSP=ON THEN             /* BUFFER BEEN REQUESTED?        */
         TM    NSLGPTSP(IEDNSLP),B'01000000'                       1481
         BNO   @RF01481                                            1481
*     DO;                           /* YES, INITIALIZE THE PTRS AS 1482
*                                      BEFORE THE EXIT FOR BFR       */
*       RTRM=NSLCTTRM;              /* GET THE CURRENT TRM ADDR      */
         L     RTRM,NSLCTTRM-1(,IEDNSLP)                           1483
         LA    RTRM,0(,RTRM)                                       1483
*       NSLGPTSP=OFF;               /* RESET STARTGP RESUME        1484
*                                      PROCESSING SWITCH             */
         NI    NSLGPTSP(IEDNSLP),B'10111111'                       1484
*     END;                          /* COMPLETED INITIALIZATION      */
*   ELSE                            /* FIRST TIME PROCESSING         */
*     DO;                           /* PERFORM FIRST TIME PROCSS     */
         B     @RC01481                                            1486
@RF01481 DS    0H                                                  1487
*       RTRM=NSLTTEPT;              /* GET THE TERMINAL ENTRY @      */
         L     RTRM,NSLTTEPT(,IEDNSLP)                             1487
*       RTRM=RTRM-LENGTH(IEDNTRM);  /* BACKUP TO PREFIX              */
         SL    RTRM,@CF01178                                       1488
*       TRMGPACT=ON;                /* SET GENERAL POLL ACTIVE       */
*       TRMRSACT=ON;                /* INDICATE CONTROL UNIT IS    1490
*                                      ACTIVE                        */
         LA    @03,TRMGPACT(,RTRM)                                 1490
         LR    @15,@03                                             1490
         LA    @10,3                                               1490
         NR    @15,@10                                             1490
         LCR   @15,@15                                             1490
         ALR   @03,@15                                             1490
         L     @10,0(,@03)                                         1490
@GL00079 LR    @06,@10                                             1490
         O     @06,@CB02282+3(@15)                                 1490
         CS    @10,@06,0(@03)                                      1490
         BNE   @GL00079                                            1490
*       PLCBRCTR=AVTEZERO;          /* INTIALIZE THE COUNT           */
         MVI   PLCBRCTR,X'00'                                      1491
*       RPARM=TRMSUBST;             /* GET THE 1ST SUBSTRUCTURE      */
         LH    RPARM,TRMSUBST(,RTRM)                               1492
         N     RPARM,@CF02262                                      1492
*       CALL GETTRM;                /* GET THE TRM ENTRY ADDRESS     */
         BAL   @14,GETTRM                                          1493
*       DO UNTIL(TRMTYPE=TRMCLUST); /* DO ONLY IF IT IS NOT C.U.     */
@DL01494 DS    0H                                                  1495
*         RQCB=TRMDESTQ;            /* GET THE QCB ADDRESS           */
         SLR   RQCB,RQCB                                           1495
         ICM   RQCB,7,TRMDESTQ(RTRM)                               1495
*         IF QCBPLCBN=ON THEN       /* IS A PLCB ASSIGNED?           */
         LR    @10,IEDQQPTR                                        1496
         SL    @10,@CF00044                                        1496
         TM    QCBPLCBN(@10),B'10000000'                           1496
         BNO   @RF01496                                            1496
*           DO;                     /* YES, SET OCNI IN PLCB         */
*             QCBPLCBA->LCBOCNI=ON; /* SET OCNI TO PREVENT ANY     1498
*                                      FURTHER ACTION                */
         L     @10,QCBPLCBA-1(,@10)                                1498
         OI    LCBOCNI(@10),B'00100000'                            1498
*             TRMOCNI=ON;           /* SET TRMOCNI ALSO IN CASE THE
*                                      PLCB IS FREED                 */
         OI    TRMOCNI(RTRM),B'00100000'                           1499
*             PLCBRCTR=PLCBRCTR+ONE;/* INDICATE 1 MORE PLCB WILL   1500
*                                      RETURN TO OPERATOR CONTROL    */
         IC    @10,PLCBRCTR                                        1500
         LA    @10,1(,@10)                                         1500
         STC   @10,PLCBRCTR                                        1500
*           END;                    /* FINISHED IF A PLCB IS ASSG    */
*         ELSE                      /* NO PLCB CHK FOR CURR ACT.     */
*           DO;                     /* PERFORMED IF NO PLCB ASSGN    */
         B     @RC01496                                            1502
@RF01496 DS    0H                                                  1503
*             IF TRMINOUT=ON×TRMRDOUT=ON THEN/* INVITE OR READ     1503
*                                      OUTSTANDING                   */
         TM    TRMINOUT(RTRM),B'00000011'                          1503
         BZ    @RF01503                                            1503
*               DO;                 /* YES PREVENT ANY FURTHER     1504
*                                      SPECIFIC POLL ACTION          */
*                 TRMOCNI=ON;       /* SET OCNI TO PREVENT ACTION    */
         OI    TRMOCNI(RTRM),B'00100000'                           1505
*                 PLCBRCTR=PLCBRCTR+ONE;/* INDICATE 1 MORE TO RETURN */
         IC    @10,PLCBRCTR                                        1506
         LA    @10,1(,@10)                                         1506
         STC   @10,PLCBRCTR                                        1506
*               END;                /* FINISHED IF RD OR INV OUT     */
*             ELSE                                                 1508
*               ;                   /* DON'T SET OCNI DOING ZERO     */
@RF01503 DS    0H                                                  1509
*           END;                    /* FINISHED IF NO PLCB ASSIGN    */
*         TRMGPACT=ON;              /* SET GP ACTIVE TO PREVENT ANY
*                                      FURTHER SPECIFIC POLL ACTION  */
@RC01496 LA    @03,TRMGPACT(,RTRM)                                 1510
         LR    @15,@03                                             1510
         LA    @10,3                                               1510
         NR    @15,@10                                             1510
         LCR   @15,@15                                             1510
         ALR   @03,@15                                             1510
         L     @10,0(,@03)                                         1510
@GL00080 LR    @06,@10                                             1510
         O     @06,@CB02264+3(@15)                                 1510
         CS    @10,@06,0(@03)                                      1510
         BNE   @GL00080                                            1510
*         RPARM=TRMCOHRT;           /* GET THE ADJACENT STRUCTURE    */
         LH    RPARM,TRMCOHRT(,RTRM)                               1511
         N     RPARM,@CF02262                                      1511
*         CALL GETTRM;              /* GET TRM ENTRY ADDRESS         */
         BAL   @14,GETTRM                                          1512
*       END;                        /* FINISHED DO LOOP              */
@DE01494 CLI   TRMTYPE(RTRM),X'40'                                 1513
         BNE   @DL01494                                            1513
*       TRMGPCNT=PLCBRCTR;          /* INDICATE THE NUMBER OF PLCB TO
*                                      RETURN TO OP CONTROL          */
         MVC   TRMGPCNT(1,RTRM),PLCBRCTR                           1514
*       IF TRMGPCNT^=AVTEZERO THEN  /* ANY PLCBS RETURNNG TO OPCB    */
         CLI   TRMGPCNT(RTRM),X'00'                                1515
         BE    @RF01515                                            1515
*         NSLPLCBR=ON;              /* SET PLCB SWTCH INDICATOR      */
         OI    NSLPLCBR(IEDNSLP),B'10000000'                       1516
*       ELSE                        /* INITIALIZE PLCB RETURN        */
*         NSLPLCBR=OFF;             /* SWITCH INDICATING NO RETRN    */
         B     @RC01515                                            1517
@RF01515 NI    NSLPLCBR(IEDNSLP),B'01111111'                       1517
*       RFY                                                        1518
*        (IEDQQPTR,                                                1518
*         RQCB) UNRSTD;                                            1518
@RC01515 DS    0H                                                  1519
*       NSLTTCIN=TRMSUBST;          /* GET FIRST SUBSTRUCTURE        */
         LH    @10,TRMSUBST(,RTRM)                                 1519
         N     @10,@CF02262                                        1519
         STH   @10,NSLTTCIN(,IEDNSLP)                              1519
*       RPARM=NSLTTCIN;             /* SETUP INTERFACE TO GET      1520
*                                      TERMINAL ENTRY ADDRESS        */
         LR    RPARM,@10                                           1520
*       CALL GETTRM;                /* GET TERMINAL ENTRY ADDR       */
         BAL   @14,GETTRM                                          1521
*       NSLCTTRM=RTRM;              /* EST. CURRENT TRM ENTRY IN THE
*                                      BUFFER                        */
         STCM  RTRM,7,NSLCTTRM(IEDNSLP)                            1522
*     END;                          /* FINISHED FIRST TIME         1523
*                                      INITIALIZATION                */
*   CALL STPGPTRM;                  /* STOP SPECIFIC TERMINAL IF ANY */
@RC01481 BAL   @14,STPGPTRM                                        1524
*   IF NSLGPTSP=OFF THEN            /* DID THE PREVIOUS SUBROUTNE  1525
*                                      NEED A BUFFER                 */
         TM    NSLGPTSP(IEDNSLP),B'01000000'                       1525
         BNZ   @RF01525                                            1525
*     DO;                           /* NO CHECK FOR BFR IN CHAIN     */
*       IF NSLBUFFR^=AVTFZERO THEN  /* ANY BUFFERS IN ERB CHAIN      */
         L     @10,NSLBUFFR-1(,IEDNSLP)                            1527
         LA    @10,0(,@10)                                         1527
         C     @10,AVTFZERO(,IEDQAPTR)                             1527
         BE    @RF01527                                            1527
*         CALL FREEBUF;             /* FREE THE EXTRA BUFFER         */
         BAL   @14,FREEBUF                                         1528
*       ELSE                                                       1529
*         ;                         /* NO EXTRA BUFFER CONTINUE      */
@RF01527 DS    0H                                                  1530
*       IF NSLPLCBR=ON THEN         /* WILL A PLCB RETURN TO OPCB    */
         TM    NSLPLCBR(IEDNSLP),B'10000000'                       1530
         BNO   @RF01530                                            1530
*         CALL FREEBUF;             /* YES FREE THE NSL REQ BUFFR    */
         BAL   @14,FREEBUF                                         1531
*       ELSE                        /* NO PLCB TO WAKE UP OPCNTRL    */
*         CALL POSTOPCB;            /* POST REQ BFR TO DO THAT       */
         B     @RC01530                                            1532
@RF01530 BAL   @14,POSTOPCB                                        1532
*     END;                          /* READY TO EXIT FOR GOOD        */
*   ELSE                                                           1534
*     ;                             /* DO NOTHING UNTIL THE BFR    1534
*                                      RETURNS                       */
@RF01525 DS    0H                                                  1535
*   END STARTGP;                    /* FINISHED STARTGP REQUEST      */
@EL00033 DS    0H                                                  1535
@EF00033 DS    0H                                                  1535
@ER00033 L     @14,@SA00033                                        1535
         BR    @14                                                 1535
*                                                                  1536
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE ISSUES THE ACTUAL REQUEST TO STOP I/O.           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1536
*STPGPTRM:                                                         1536
*   PROC OPTIONS(RETREG,SAVE(14));                                 1536
STPGPTRM ST    @14,@SA00034                                        1536
*   RFY                                                            1537
*    (RPRF,                                                        1537
*     IEDQPPTR,                                                    1537
*     IEDQQPTR,                                                    1537
*     RQCB) RSTD;                                                  1537
*   EXTEXIT=OFF;                    /* INTIALIZE THE EXIT SWITCH     */
         NI    EXTEXIT,B'10111111'                                 1538
*   DO WHILE(NSLBUFFR^=AVTFZERO&EXTEXIT=OFF);                      1539
         B     @DE01539                                            1539
@DL01539 DS    0H                                                  1540
*     RQCB=TRMDESTQ;                /* GET THE QCB ADDRESS           */
         SLR   RQCB,RQCB                                           1540
         ICM   RQCB,7,TRMDESTQ(RTRM)                               1540
*     IF QCBPLCBN=OFF&(TRMINOUT=ON×TRMRDOUT=ON) THEN/* IF PLCB IS NOT
*                                      ASSIGNED AND EITHER A READ OR
*                                      INVITE IS OUTSTANDING THEN    */
         LR    @10,IEDQQPTR                                        1541
         AL    @10,@CF02259                                        1541
         TM    QCBPLCBN-4(@10),B'10000000'                         1541
         BNZ   @RF01541                                            1541
         TM    TRMINOUT(RTRM),B'00000011'                          1541
         BZ    @RF01541                                            1541
*       DO;                         /* SEND THE RESET                */
*         RPRF=NSLBUFFR;            /* GET THE BFR ADDR FROM ERB   1543
*                                      CHAIN                         */
         L     RPRF,NSLBUFFR-1(,IEDNSLP)                           1543
         LA    RPRF,0(,RPRF)                                       1543
*         NSLBUFFR=''B;             /* CLEAR ERB CHAIN BFR           */
         SLR   @10,@10                                             1544
         STCM  @10,7,NSLBUFFR(IEDNSLP)                             1544
*         CALL BUILD;               /* BUILD THE RESET               */
         BAL   @14,BUILD                                           1545
*         RPARM=RPRF;               /* SETUP REG1 TO POST@YM03734    */
         LR    RPARM,RPRF                                          1546
*         CALL POSTELEM;            /* PUT ON QUE            @YM03734*/
         BAL   @14,POSTELEM                                        1547
*       END;                        /* FINISHED WITH NO PLCB NO READ
*                                      OR INVITE OUTSTND AND         */
*     ELSE                                                         1549
*       ;                           /* PLCB IS ASSIGNED DO NOTHNG    */
@RF01541 DS    0H                                                  1550
*     NSLTTCIN=TRMCOHRT;            /* GET ADJACENT SUBSTRUCTURE     */
         LH    @10,TRMCOHRT(,RTRM)                                 1550
         N     @10,@CF02262                                        1550
         STH   @10,NSLTTCIN(,IEDNSLP)                              1550
*     RPARM=NSLTTCIN;               /* SET INTERFACE TO GET TRM @    */
         LR    RPARM,@10                                           1551
*     CALL GETTRM;                  /* GET TRM ENTRY ADDRESS         */
         BAL   @14,GETTRM                                          1552
*     NSLCTTRM=RTRM;                /* EST. TRM ENTRY IN NSLBFR      */
         STCM  RTRM,7,NSLCTTRM(IEDNSLP)                            1553
*     IF TRMTYPE=TRMCLUST THEN      /* LOOP TO THE CLUSTER?          */
         CLI   TRMTYPE(RTRM),X'40'                                 1554
         BNE   @RF01554                                            1554
*       EXTEXIT=ON;                 /* SET EXIT SWITCH TO GET OUT    */
         OI    EXTEXIT,B'01000000'                                 1555
*     ELSE                                                         1556
*       ;                           /* NOT CLUSTER CONTINUE LOOP     */
@RF01554 DS    0H                                                  1557
*   END;                            /* END OF DO UNTIL LOOP FOR    1557
*                                      CLUSTER                       */
@DE01539 L     @10,NSLBUFFR-1(,IEDNSLP)                            1557
         LA    @10,0(,@10)                                         1557
         C     @10,AVTFZERO(,IEDQAPTR)                             1557
         BE    @DC01539                                            1557
         TM    EXTEXIT,B'01000000'                                 1557
         BZ    @DL01539                                            1557
@DC01539 DS    0H                                                  1558
*   IF EXTEXIT=OFF THEN             /* DETERMINE IF IT IS TIME TO  1558
*                                      EXIT                          */
         TM    EXTEXIT,B'01000000'                                 1558
         BNZ   @RF01558                                            1558
*     DO;                           /* NO, REQUEST A BUFFER          */
*       CALL GETBUF;                /* NO A BUFFER IS NEEDED         */
         BAL   @14,GETBUF                                          1560
*       NSLGPTSP=ON;                /* SET GP TERM BUFFER RETURN     */
         OI    NSLGPTSP(IEDNSLP),B'01000000'                       1561
*     END;                          /* NOW READY TO EXIT FOR BFR     */
*   ELSE                                                           1563
*     ;                             /* READY TO EXIT                 */
@RF01558 DS    0H                                                  1564
*   RFY                                                            1564
*    (IEDQPPTR,                                                    1564
*     RPRF,                                                        1564
*     IEDQQPTR,                                                    1564
*     RQCB) UNRSTD;                                                1564
*   END STPGPTRM;                   /* STOP ALL SUBSTRUCTURES UNDER
*                                      THE CONTROL UNIT              */
@EL00034 DS    0H                                                  1565
@EF00034 DS    0H                                                  1565
@ER00034 L     @14,@SA00034                                        1565
         BR    @14                                                 1565
*                                                                  1566
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE INITIATES THE STOPPING OF GENERAL POLL AND ALL*/
*   /* THE TERMINALS UNDER THE CONTROL UNIT ARE BROUGHT UP AGAIN TO  */
*   /* RUN IN SPECIFIC MODE TO COMPLETE THE REQUEST.                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1566
*STOPGP:                                                           1566
*   PROC OPTIONS(RETREG,SAVE(14));                                 1566
STOPGP   ST    @14,@SA00035                                        1566
*   RFY                                                            1567
*    (IEDQQPTR,                                                    1567
*     RQCB,                                                        1567
*     RLCB,                                                        1567
*     IEDQLPTR) RSTD;                                              1567
*   RTRM=NSLTTEPT;                  /* GET THE TERMINAL ENTRY @      */
         L     RTRM,NSLTTEPT(,IEDNSLP)                             1568
*   RTRM=RTRM-LENGTH(IEDNTRM);      /* BACKUP TO PREFIX              */
         SL    RTRM,@CF01178                                       1569
*   TRMOCNI=ON;                     /* STP IN PROGRESS               */
         OI    TRMOCNI(RTRM),B'00100000'                           1570
*   TRMRSACT=OFF;                   /* DEACTIVATE THE CU             */
         LA    @05,TRMRSACT(,RTRM)                                 1571
         LR    @03,@05                                             1571
         LA    @10,3                                               1571
         NR    @03,@10                                             1571
         LCR   @03,@03                                             1571
         ALR   @05,@03                                             1571
         L     @10,0(,@05)                                         1571
@GL00083 LR    @06,@10                                             1571
         N     @06,@CB02252+3(@03)                                 1571
         CS    @10,@06,0(@05)                                      1571
         BNE   @GL00083                                            1571
*   RQCB=TRMDESTQ;                  /* GET THE QCB ADRESS            */
         SLR   RQCB,RQCB                                           1572
         ICM   RQCB,7,TRMDESTQ(RTRM)                               1572
*   IF QCBPLCBN=ON THEN             /* PLCB ASSIGNED                 */
         LR    @10,IEDQQPTR                                        1573
         SL    @10,@CF00044                                        1573
         TM    QCBPLCBN(@10),B'10000000'                           1573
         BNO   @RF01573                                            1573
*     DO;                           /* YES JUST SET OCNI             */
*       RLCB=QCBPLCBA;              /* GET LCB ADDRESS               */
         L     RLCB,QCBPLCBA-1(,@10)                               1575
         LA    RLCB,0(,RLCB)                                       1575
*       LCBOCNI=ON;                 /* STP IN PROGRESS               */
         OI    LCBOCNI(IEDQLPTR),B'00100000'                       1576
*       CALL FREEBUF;               /* PLCB WILL RETURN TO OP CONTROL
*                                      SO FREE NSL BFR               */
         BAL   @14,FREEBUF                                         1577
*     END;                          /* PROCESSEDTHE CU WITH PLCB     */
*   ELSE                            /* NO PLCB IS ASSIGNED           */
*     DO;                           /* BUILD RESET IN NSL REQ BFR    */
         B     @RC01573                                            1579
@RF01573 DS    0H                                                  1580
*       IF TRMINOUT=ON THEN         /* IF INVITE PERPET.     @XM05720*/
         TM    TRMINOUT(RTRM),B'00000001'                          1580
         BNO   @RF01580                                            1580
*         DO;                       /* OUTSTANDING THEN      @XM05720*/
*           SAVCUTNT=NSLTTCIN;      /* SAVE THE TTCIN BEFORE THE   1582
*                                      CLEARING OF THE BUFFER      1582
*                                                            @YM04642*/
         LH    @10,NSLTTCIN(,IEDNSLP)                              1582
         N     @10,@CF02262                                        1582
         STH   @10,SAVCUTNT                                        1582
*           IEDNSLD=''B;            /* CLEAR THE BUFFER              */
         XC    IEDNSLD(48,IEDNSLP),IEDNSLD(IEDNSLP)                1583
*           RFY                                                    1584
*            (IEDQPPTR,                                            1584
*             RPRF) RSTD;                                          1584
*           RPRF=RNSLBFR;           /* EST. ADDRESSABILITY           */
         LR    RPRF,RNSLBFR                                        1585
*           CALL BUILD;             /* BUILD THE RESET               */
         BAL   @14,BUILD                                           1586
*           RFY                                                    1587
*             IEDPIU0 BASED(ADDR(PRFPIUO)+OFFSET);                 1587
*           PIU0PAD=PIU0PAD0;       /* SETUP THE PAD         @YM04642*/
         LA    @10,PRFPIUO(,IEDQPPTR)                              1588
         LA    @05,1                                               1588
         ALR   @05,@10                                             1588
         MVI   PIU0PAD(@05),X'00'                                  1588
*           RFY                                                    1589
*             IEDTH BASED(ADDR(PIU0TH));                           1589
*           TTHDAF=SAVCUTNT;        /* SET DAF               @YM04642*/
         MVC   TTHDAF(2,@05),SAVCUTNT                              1590
*           RFY                                                    1591
*             IEDBDU BASED(ADDR(PIU0RU));                          1591
*           BDUMODIF=CD0CREOC;      /* CHANGE MODIFIER TO RESET AT 1592
*                                      THE END OF COMMAND            */
         MVI   BDUMODIF+15(@10),X'60'                              1592
*           RPARM=RPRF;             /* SETUP TO POST         @YM03734*/
         LR    RPARM,RPRF                                          1593
*           CALL POSTELEM;          /* POST RESET TO BE SENT TO THE
*                                      3705                          */
         BAL   @14,POSTELEM                                        1594
*           RFY                                                    1595
*            (IEDQPPTR,                                            1595
*             RPRF) UNRSTD;                                        1595
*         END;                      /*                       @XM05720*/
*       ELSE                        /* NO INVITE OUT.        @XM05720*/
*         DO;                       /*                       @XM05720*/
         B     @RC01580                                            1597
@RF01580 DS    0H                                                  1598
*           CALL PRIMERCV;          /* REQUEST A RCV OP WHICH WILL 1598
*                                      CAUSE A PLCB TO BE ASSIGNED 1598
*                                      WITH LCBOCNI SET. THIS WILL 1598
*                                      CAUSE THE PLCB TO BE RETURNED
*                                      TO OP. CTL. (IGCVA10D)      1598
*                                                            @XM05720*/
         BAL   @14,PRIMERCV                                        1598
*           CALL FREEBUF;           /* FREE NSL BFR          @XM05720*/
         BAL   @14,FREEBUF                                         1599
*         END;                      /*                       @XM05720*/
*     END;                          /* COMPLETED PROCESSING W/0 PLCB */
*   RFY                                                            1602
*    (IEDQLPTR,                                                    1602
*     RLCB,                                                        1602
*     IEDQQPTR,                                                    1602
*     RQCB) UNRSTD;                                                1602
*   END STOPGP;                     /* FINISHED WITH STOP GP REQ     */
@EL00035 DS    0H                                                  1603
@EF00035 DS    0H                                                  1603
@ER00035 L     @14,@SA00035                                        1603
         BR    @14                                                 1603
*                                                                  1604
*   /*****************************************************************/
*   /*                                                               */
*   /* TO PROCESS A REQUEST BY ACTIVATE TO PRIME A LU.               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1604
*STARTLU:                                                          1604
*   PROC OPTIONS(RETREG,SAVE(14));                                 1604
STARTLU  ST    @14,@SA00036                                        1604
*   RTRM=NSLTTEPT;                  /* SET UP INPUT LINE ADDR        */
         L     RTRM,NSLTTEPT(,IEDNSLP)                             1605
*   RTRM=RTRM-LENGTH(IEDNTRM);      /* BACKUP TO PREFIX              */
         SL    RTRM,@CF01178                                       1606
*   NSLCTTRM=RTRM;                  /* GET THE CURRENT LU TRM @      */
         STCM  RTRM,7,NSLCTTRM(IEDNSLP)                            1607
*   CALL PRIMER;                    /* TRY TO GET A SESSION STARTED
*                                      IF NECESSARY                  */
         BAL   @14,PRIMER                                          1608
*   CALL FREEBUF;                   /* FREE THE REQUEST BUFFER NO  1609
*                                      RESPONSE REQUIRED             */
         BAL   @14,FREEBUF                                         1609
*   END STARTLU;                    /* COMPLETED START LU PROCSS     */
@EL00036 DS    0H                                                  1610
@EF00036 DS    0H                                                  1610
@ER00036 L     @14,@SA00036                                        1610
         BR    @14                                                 1610
*                                                                  1611
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE PROCESS A PRIME REQUEST FOR A GENERAL POLL    */
*   /* RESOURCE BECAUSE OF A STARTGP OR STOPGP INITIAL REQUEST.      */
*   /* EITHER A SEND OR RECEIVE OPERATION IS INITIATED BASED ON THE  */
*   /* STATE OF THE RESOURCE DURING THE PROCESSING OF THE INTIAL     */
*   /* REQUEST.                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1611
*PRIMEGP:                                                          1611
*   PROC OPTIONS(RETREG,SAVE(14));                                 1611
PRIMEGP  ST    @14,@SA00037                                        1611
*   RFY                                                            1612
*    (IEDQLPTR,                                                    1612
*     RLCB,                                                        1612
*     RQCB,                                                        1612
*     IEDQQPTR) RSTD;                                              1612
*   RNSLBFR=RPARM;                  /* SET PARAMETER PASSED TO BE  1613
*                                      ADDRESSABLE                   */
         LR    RNSLBFR,RPARM                                       1613
*   RTRM=NSLTTEPT;                  /* GET THE TERMINAL ENTRY @      */
         L     RTRM,NSLTTEPT(,IEDNSLP)                             1614
*   RTRM=RTRM-LENGTH(IEDNTRM);      /* BACKUP TO PREFIX              */
         SL    RTRM,@CF01178                                       1615
*   IF NSLREQTY=NSLSTRGP THEN       /* STARTGP REQUEST?              */
         CLI   NSLREQTY(IEDNSLP),X'05'                             1616
         BNE   @RF01616                                            1616
*     DO;                           /* YES, PERFORM PRIME RECEIVE FOR
*                                      ONTP                          */
*       CALL PRIMERCV;              /* PRIME RECEIVE                 */
         BAL   @14,PRIMERCV                                        1618
*       CALL FREEBUF;               /* FREE UP THE REQUEST BFR       */
         BAL   @14,FREEBUF                                         1619
*     END;                          /* FINISHED WITH PRIME FOR ONTP  */
*   ELSE                            /* STOPGP REQUEST                */
*     DO;                           /* PERFORM PRIME RECEIVE FOR   1621
*                                      OFFTP REQUEST                 */
         B     @RC01616                                            1621
@RF01616 DS    0H                                                  1622
*       TRMGPACT=OFF;               /* RESET GP ACTIVE               */
         LA    @05,TRMGPACT(,RTRM)                                 1622
         LR    @03,@05                                             1622
         LA    @10,3                                               1622
         NR    @03,@10                                             1622
         LCR   @03,@03                                             1622
         ALR   @05,@03                                             1622
         L     @10,0(,@05)                                         1622
@GL00084 LR    @06,@10                                             1622
         N     @06,@CB02272+3(@03)                                 1622
         CS    @10,@06,0(@05)                                      1622
         BNE   @GL00084                                            1622
*       NSLTTCIN=TRMSUBST;          /* GET THE FIRST SUBSTRUCTURE    */
         LH    @10,TRMSUBST(,RTRM)                                 1623
         N     @10,@CF02262                                        1623
         STH   @10,NSLTTCIN(,IEDNSLP)                              1623
*       RPARM=NSLTTCIN;             /* SETUP INTERFACE GETTRM        */
         LR    RPARM,@10                                           1624
*       CALL GETTRM;                /* GET TRM ENTRY ADDRESS         */
         BAL   @14,GETTRM                                          1625
*       DO UNTIL(TRMTYPE=TRMCLUST); /* LOOP UNTIL REACH      @YM03734
*                                      THE CONTROL UNIT      @YM03734*/
@DL01626 DS    0H                                                  1627
*         TRMGPACT=OFF;             /* RESET GP ACTIVE IN SUBS       */
         LA    @05,TRMGPACT(,RTRM)                                 1627
         LR    @03,@05                                             1627
         LA    @10,3                                               1627
         NR    @03,@10                                             1627
         LCR   @03,@03                                             1627
         ALR   @05,@03                                             1627
         L     @10,0(,@05)                                         1627
@GL00085 LR    @06,@10                                             1627
         N     @06,@CB02272+3(@03)                                 1627
         CS    @10,@06,0(@05)                                      1627
         BNE   @GL00085                                            1627
*         IF NSLREQTY=NSLSTPGP&TRMRSACT=OFF&TRMINPUT=ON THEN       1628
         CLI   NSLREQTY(IEDNSLP),X'06'                             1628
         BNE   @RF01628                                            1628
         TM    TRMRSACT(RTRM),B'10000000'                          1628
         BNZ   @RF01628                                            1628
         TM    TRMINPUT(RTRM),B'01000000'                          1628
         BNO   @RF01628                                            1628
*           TRMRSACT=ON;            /* IF OFFTP,E THEN SET ALL     1629
*                                      TERMINALS ACTIVE      @OY20296*/
         LA    @05,TRMRSACT(,RTRM)                                 1629
         LR    @03,@05                                             1629
         LA    @10,3                                               1629
         NR    @03,@10                                             1629
         LCR   @03,@03                                             1629
         ALR   @05,@03                                             1629
         L     @10,0(,@05)                                         1629
@GL00088 LR    @06,@10                                             1629
         O     @06,@CB02247+3(@03)                                 1629
         CS    @10,@06,0(@05)                                      1629
         BNE   @GL00088                                            1629
*         IF NSLREQTY=NSLSTPGP×(NSLREQTY=NSLSTPGB&TRMRSACT=ON) THEN
@RF01628 CLI   NSLREQTY(IEDNSLP),X'06'                             1630
         BE    @RT01630                                            1630
         CLI   NSLREQTY(IEDNSLP),X'0D'                             1630
         BNE   @RF01630                                            1630
         TM    TRMRSACT(RTRM),B'10000000'                          1630
         BNO   @RF01630                                            1630
@RT01630 DS    0H                                                  1631
*           DO;                     /* IF OFFTP,E THEN PRIME SPECIFIC
*                                      POLL ENTRIES. IF OFFTP,B THEN
*                                      PRIME ONLY THOSE SPECIFIC POLL
*                                      ENTRIES WHICH HAVE TRMRSACT ON
*                                                            @OY20296*/
*             IF TRMCONT=ON&TRMSESSN=ON×TRMCONT=OFF THEN           1632
         TM    TRMCONT(RTRM),B'11000000'                           1632
         BO    @RT01632                                            1632
         TM    TRMCONT(RTRM),B'10000000'                           1632
         BNZ   @RF01632                                            1632
@RT01632 DS    0H                                                  1633
*               DO;                 /* IF TRMCONT IS ON AND TRMSESSN
*                                      IS OFF- NO PRIME      @OX20593*/
*                 IF TRMINPTP=ON&TRMNLOUT=OFF THEN/* INPUT PENDING 1634
*                                      FOR THIS GP TERM & NO CONTACT
*                                      OUTSTANDING ?         @OX20593*/
         TM    TRMINPTP(RTRM),B'01000000'                          1634
         BNO   @RF01634                                            1634
         TM    TRMNLOUT(RTRM),B'00000100'                          1634
         BNZ   @RF01634                                            1634
*                   DO;             /* YES TRY TO PRIME              */
*                     TRMINPTP=OFF; /* RESET INPUT PENDING IN SUB    */
         NI    TRMINPTP(RTRM),B'10111111'                          1636
*                     RQCB=TRMDESTQ;/* GET QCB ADDRESS               */
         SLR   RQCB,RQCB                                           1637
         ICM   RQCB,7,TRMDESTQ(RTRM)                               1637
*                     IF QCBPLCBN=ON THEN/* IS PLCB ASSIGNED?        */
         LR    @10,IEDQQPTR                                        1638
         SL    @10,@CF00044                                        1638
         TM    QCBPLCBN(@10),B'10000000'                           1638
         BNO   @RF01638                                            1638
*                       DO;         /* DETERMINE WHY PLCB IS ASSIGNED*/
*                         RLCB=QCBPLCBA;/* GET THE LCB ADDRESS       */
         L     RLCB,QCBPLCBA-1(,@10)                               1640
         LA    RLCB,0(,RLCB)                                       1640
*                         IF(SCBLCK1N=ON×SCBMSGLN=ON) THEN/* LOCK  1641
*                                      MODE                          */
         L     @10,IEDQSPTR-1(,IEDQLPTR)                           1641
         TM    SCBLCK1N(@10),B'00101000'                           1641
         BZ    @RF01641                                            1641
*                           DO;     /* YES                           */
*                             LCBSTAT1=AVTEZERO;/* CLEAR ALL STATUS
*                                      FLAGS                         */
         MVI   LCBSTAT1(IEDQLPTR),X'00'                            1643
*                             LCBSENDN=ON;/* SET SENDING             */
         OI    LCBSENDN(IEDQLPTR),B'00000001'                      1644
*                           END;    /* PRIME SENDING IF LOCK         */
*                         ELSE                                     1646
*                           ;       /* NOT IN LOCK MODE              */
@RF01641 DS    0H                                                  1647
*                         RFY                                      1647
*                           RENTRY RSTD;                           1647
*                         RENTRY=QCBPLCBA;/* SETUP INTERFACE TO POST */
         LR    @10,IEDQQPTR                                        1648
         AL    @10,@CF02259                                        1648
         L     RENTRY,QCBPLCBA-5(,@10)                             1648
         LA    RENTRY,0(,RENTRY)                                   1648
*                         RFY                                      1649
*                           RENTRY UNRSTD;                         1649
*                         CALL POSTR;/* POST PLCB                    */
         BAL   @14,POSTR                                           1650
*                       END;        /* PERFORM PRIME WITH PLCB       */
*                     ELSE          /* NO PLCB ASSIGNED              */
*                       CALL PRIMERCV;/* PRIME RECEIVE               */
         B     @RC01638                                            1652
@RF01638 BAL   @14,PRIMERCV                                        1652
*                   END;            /* NO NEED TO PRIME              */
*                 ELSE                                             1654
*                   ;               /* WAS NOT DOING ANYTHING        */
@RF01634 DS    0H                                                  1655
*               END;                /*                       @OX20593*/
*             ELSE                                                 1656
*               ;                   /*                       @OX20593*/
@RF01632 DS    0H                                                  1657
*           END;                    /* END OF OFFTP,E        @OY20296*/
*         ELSE                                                     1658
*           ;                       /* OFFTP,B               @OY20296*/
@RF01630 DS    0H                                                  1659
*         RPARM=TRMCOHRT;           /* GET ADJACENT RESOURCE         */
@RC01630 LH    RPARM,TRMCOHRT(,RTRM)                               1659
         N     RPARM,@CF02262                                      1659
*         CALL GETTRM;              /* GET TRM ENTRY ADDRESS         */
         BAL   @14,GETTRM                                          1660
*       END;                        /* REACHED THE CLUSTER READY TO
*                                      POST BACK TO OPERATOR CONTROL */
@DE01626 CLI   TRMTYPE(RTRM),X'40'                                 1661
         BNE   @DL01626                                            1661
*       CALL POSTOPCB;              /* POST THE REQ BFR TO OPCOB     */
         BAL   @14,POSTOPCB                                        1662
*     END;                          /* FINISHED WITH OFFTP           */
*   RFY                                                            1664
*    (IEDQLPTR,                                                    1664
*     RLCB,                                                        1664
*     RQCB,                                                        1664
*     IEDQQPTR) UNRSTD;                                            1664
*   END PRIMEGP;                    /* END OF PRIME RECEIVE          */
@EL00037 DS    0H                                                  1665
@EF00037 DS    0H                                                  1665
@ER00037 L     @14,@SA00037                                        1665
         BR    @14                                                 1665
*                                                                  1666
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE BASICALLY INITIATES A RECEIVE OPERATION BY    */
*   /* REQUESTING A PLCB WITH ONLY A RECEIVE SCHEDULER IN THE STCB   */
*   /* CHAIN.                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1666
*PRIMERCV:                                                         1666
*   PROC OPTIONS(RETREG,SAVE(14));                                 1666
PRIMERCV ST    @14,@SA00038                                        1666
*   RFY                                                            1667
*    (IEDQQPTR,                                                    1667
*     RQCB) RSTD;                                                  1667
*   RFY                                                            1668
*     RENTRY RSTD;                                                 1668
*   RQCB=TRMDESTQ;                  /* GET QCB ADDRESS               */
         SLR   RQCB,RQCB                                           1669
         ICM   RQCB,7,TRMDESTQ(RTRM)                               1669
*   IF QCBPLCBN=OFF&QCBRCVRQ=OFF THEN/* NO PLCB ASSIGNED AND QCB IS
*                                      NOT WAITING FOR PLCB          */
         LR    @14,IEDQQPTR                                        1670
         SL    @14,@CF00044                                        1670
         TM    QCBPLCBN(@14),B'10010000'                           1670
         BNZ   @RF01670                                            1670
*     DO;                           /* YES, FALL THROUGH             */
*       QCBRCVRQ=ON;                /* REQUEST PLCB WITHOUT SNDSC    */
         OI    QCBRCVRQ(@14),B'00010000'                           1672
*       RPARM=RQCB;                 /* SETUP INTERFACE TO IEDIAP     */
         LR    RPARM,RQCB                                          1673
*       CALL IEDIAP;                /* REQUEST A PLCB                */
         L     @10,AVTSAVTP(,IEDQAPTR)                             1674
         L     @15,SAVTPREQ(,@10)                                  1674
         BALR  @14,@15                                             1674
*       IF RENTRY^=AVTFZERO THEN    /* DID GET PLCB?                 */
         C     RENTRY,AVTFZERO(,IEDQAPTR)                          1675
         BE    @RF01675                                            1675
*         CALL POSTR;               /* YES,POST PLCB TO ITSELF       */
         BAL   @14,POSTR                                           1676
*       ELSE                                                       1677
*         ;                         /* NO PLCB DO NOTHING            */
@RF01675 DS    0H                                                  1678
*     END;                          /* FINISHED PROCESSING WITH NO 1678
*                                      PLCB                          */
*   ELSE                                                           1679
*     ;                             /* DO NOTHING PLCB IS ASSIGND    */
@RF01670 DS    0H                                                  1680
*   RFY                                                            1680
*    (IEDQQPTR,                                                    1680
*     RQCB) UNRSTD;                                                1680
*   RFY                                                            1681
*     RENTRY UNRSTD;                                               1681
*   END PRIMERCV;                   /* FINISHED PRIME RECEIVE        */
@EL00038 DS    0H                                                  1682
@EF00038 DS    0H                                                  1682
@ER00038 L     @14,@SA00038                                        1682
         BR    @14                                                 1682
*                                                                  1683
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS SUBROUTINE DETERMINES IF STCB CHAIN SHOULD BE FOR PRIMING*/
*   /* PURPOSES. IF THE SEND SCHEDULER STCB IS IN THE QCB, THE THE   */
*   /* STCB IS REMOVED FROM THE QCB AND PUT IN THE PLCB.             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1683
*PRIMESND:                                                         1683
*   PROC OPTIONS(RETREG,SAVE(14));                                 1683
PRIMESND ST    @14,@SA00039                                        1683
*   RFY                                                            1684
*    (IEDQQPTR,                                                    1684
*     RQCB,                                                        1684
*     RSTCB,                                                       1684
*     RENTRY,                                                      1684
*     RTIMENOW,                                                    1684
*     RLCB,                                                        1684
*     IEDQLPTR) RSTD;                                              1684
*   RSTCB=RPARM;                    /* GET THE PLCB ADDRESS TO HAVE
*                                      SEND SCHEDULER PUT IN ITS STCB
*                                      CHAIN                         */
         LR    RSTCB,RPARM                                         1685
*   RLCB=RPARM;                     /* SAVE TO USE WHEN READY TO POST
*                                      THE PLCB TO ITSELF            */
         LR    RLCB,RPARM                                          1686
*   RPARM=LCBTTCIN;                 /* GET THE TERMINALS INDEX       */
         LH    RPARM,LCBTTCIN(,IEDQLPTR)                           1687
         N     RPARM,@CF02262                                      1687
*   CALL GETTRM;                    /* GET THE TERM ENTRY ADDRESS    */
         BAL   @14,GETTRM                                          1688
*   IF TRMSPACT=ON THEN             /* LINE UP?              @YM06016*/
         TM    TRMSPACT(RTRM),B'00010000'                          1689
         BNO   @RF01689                                            1689
*     DO;                           /* YES                   @YM06016*/
*       RQCB=TRMDESTQ;              /* GET THE QCB ADDRESS           */
         SLR   RQCB,RQCB                                           1691
         ICM   RQCB,7,TRMDESTQ(RTRM)                               1691
*       RPARM=ADDR(QCBSTVTO);       /* ADDRESS OF THE VTO IN THE   1692
*                                      CHAIN                         */
         LA    RPARM,QCBSTVTO(,IEDQQPTR)                           1692
*       IF RPARM=QCBSTCHN THEN      /* DOES ADDRESS OF VTO PT BACK TO
*                                      ITSELF?                       */
         L     @14,QCBSTCHN-1(,IEDQQPTR)                           1693
         LA    @14,0(,@14)                                         1693
         CR    RPARM,@14                                           1693
         BNE   @RF01693                                            1693
*         CALL DSPUNAVR;            /* REMOVE THE STCB FROM ONE QCB
*                                      TO ANOTHER                    */
         LA    @15,DSPUNAVR(,RDISP)                                1694
         BALR  @14,@15                                             1694
*       ELSE                                                       1695
*         ;                         /* NO DO NOTHING                 */
@RF01693 DS    0H                                                  1696
*     END;                          /* SWAP THE STCB         @YM06016*/
*   ELSE                                                           1697
*     ;                             /* DIDN'T SWAP           @YM06016*/
@RF01689 DS    0H                                                  1698
*   RENTRY=RLCB;                    /* SETUP INTERFACE TO POST THE 1698
*                                      PLCB TO ITSELF                */
         LR    RENTRY,RLCB                                         1698
*   CALL POSTR;                     /* POST THE PLCB                 */
         BAL   @14,POSTR                                           1699
*   RFY                                                            1700
*    (IEDQQPTR,                                                    1700
*     RQCB,                                                        1700
*     RSTCB,                                                       1700
*     RTIMENOW,                                                    1700
*     RENTRY,                                                      1700
*     IEDQLPTR,                                                    1700
*     RLCB) UNRSTD;                                                1700
*   END PRIMESND;                   /* FINISHED THE NECESSARY SEND 1701
*                                      PRIMING                       */
@EL00039 DS    0H                                                  1701
@EF00039 DS    0H                                                  1701
@ER00039 L     @14,@SA00039                                        1701
         BR    @14                                                 1701
*CHKTSO:                                                           1702
*   PROC OPTIONS(RETREG,SAVE(14));                                 1702
*                                                                  1702
CHKTSO   ST    @14,@SA00040                                        1702
*   /*****************************************************************/
*   /*                                                               */
*   /* VERIFY IF THE DEVICE IS CURRENTLY IN TSO SESSION.             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1703
*   RFY                                                            1703
*    (RQCB,                                                        1703
*     IEDQQPTR,                                                    1703
*     RENTRY) RSTD;                                                1703
*   IF NSLREQTY=NSLSTRTR×           /*                       @XM05748*/
*       NSLREQTY=NSLSTPTR×          /* STOP TERMINAL ?       @OX19839*/
*       NSLREQTY=NSLSTPTR+NSLSTMSG THEN/* START / STOP TERM  @YM08526*/
         CLI   NSLREQTY(IEDNSLP),X'03'                             1704
         BE    @RT01704                                            1704
         CLI   NSLREQTY(IEDNSLP),X'04'                             1704
         BE    @RT01704                                            1704
         CLI   NSLREQTY(IEDNSLP),12                                1704
         BNE   @RF01704                                            1704
@RT01704 DS    0H                                                  1705
*     DO;                           /* YES                   @YM08526*/
*       RQCB=TRMDESTQ;              /* GET THE QCB ADDRESS           */
         SLR   RQCB,RQCB                                           1706
         ICM   RQCB,7,TRMDESTQ(RTRM)                               1706
*       IF QCBTSSES=ON THEN         /* TSO SESSION?                  */
         TM    QCBTSSES(IEDQQPTR),B'10000000'                      1707
         BNO   @RF01707                                            1707
*         DO;                       /* SET TSO REJECT                */
*           IF NSLBUFFR^=AVTFZERO THEN/* BUFFER ATTACHED?            */
         L     @14,NSLBUFFR-1(,IEDNSLP)                            1709
         LA    @14,0(,@14)                                         1709
         C     @14,AVTFZERO(,IEDQAPTR)                             1709
         BE    @RF01709                                            1709
*             CALL FREEBUF;         /* FREE IT NOW                   */
         BAL   @14,FREEBUF                                         1710
*           ELSE                                                   1711
*             ;                     /* NO DO NO MORE NOW             */
@RF01709 DS    0H                                                  1712
*           RNSLBFR->OPREPRI=PRIHIFLG;/* SET UP PRIORITY             */
         MVI   OPREPRI(RNSLBFR),X'E9'                              1712
*           RNSLBFR->OPREQCB=ADDR(AVTOPCOB);/* QCB ADDRESS TO POST TO*/
         LA    @14,AVTOPCOB(,IEDQAPTR)                             1713
         STCM  @14,7,OPREQCB(RNSLBFR)                              1713
*           RNSLBFR->OPREFLG1=NSLFLGBK;/* FLAG ROUTER USED BY 00     */
         MVC   OPREFLG1(1,RNSLBFR),NSLFLGBK(IEDNSLP)               1714
*           RPARM=RNSLBFR;          /* EST. ELEMENT PTR TO POST      */
         LR    RPARM,RNSLBFR                                       1715
*           CALL POSTELEM;          /* PUT ON QUE AND RETURN         */
         BAL   @14,POSTELEM                                        1716
*           RENTRY=RETCODE4;        /* SET BAD RETURN CODE           */
         LA    RENTRY,4                                            1717
*         END;                      /* READY TO RETURN               */
*       ELSE                        /* SET GOOD RETURN CODE          */
*         RENTRY=RETCODE0;          /* SET TO ZERO                   */
         B     @RC01707                                            1719
@RF01707 SLR   RENTRY,RENTRY                                       1719
*     END;                          /* START/STOP TERM       @YM08526*/
*   ELSE                            /* STOPLINE,C            @YM08526*/
*     DO;                           /* MAKE SURE -TSO        @YM08526*/
         B     @RC01704                                            1721
@RF01704 DS    0H                                                  1722
*       RQCB=TRMDESTQ;              /* SETUP QCB BASE        @YM09000*/
         SLR   RQCB,RQCB                                           1722
         ICM   RQCB,7,TRMDESTQ(RTRM)                               1722
*       IF QCBTSSES=ON THEN         /* TSO SESSION?          @YM08526*/
         TM    QCBTSSES(IEDQQPTR),B'10000000'                      1723
         BNO   @RF01723                                            1723
*         RENTRY=RETCODE4;          /* YES, SET BAD RC       @YM08526*/
         LA    RENTRY,4                                            1724
*       ELSE                        /* NO                    @YM08526*/
*         RENTRY=RETCODE0;          /* GOOD RC               @YM08526*/
         B     @RC01723                                            1725
@RF01723 SLR   RENTRY,RENTRY                                       1725
*     END;                          /* STOP STOPLINE,C       @YM08526*/
*   RFY                                                            1727
*    (IEDQQPTR,                                                    1727
*     RQCB,                                                        1727
*     RENTRY) UNRSTD;                                              1727
*   END CHKTSO;                                                    1728
@EL00040 DS    0H                                                  1728
@EF00040 DS    0H                                                  1728
@ER00040 L     @14,@SA00040                                        1728
         BR    @14                                                 1728
*   END IEDNSL                                                     1729
*                                                                  1729
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (TAVTD   )                                       */
*/*%INCLUDE SYSLIB  (TBDUD   )                                       */
*/*%INCLUDE SYSLIB  (TCD0D   )                                       */
*/*%INCLUDE SYSLIB  (TDISPD  )                                       */
*/*%INCLUDE SYSLIB  (TLCBD   )                                       */
*/*%INCLUDE SYSLIB  (TNATD   )                                       */
*/*%INCLUDE SYSLIB  (TNSLD   )                                       */
*/*%INCLUDE SYSLIB  (TOPRED  )                                       */
*/*%INCLUDE SYSLIB  (TPIU0D  )                                       */
*/*%INCLUDE SYSLIB  (TPRFD   )                                       */
*/*%INCLUDE SYSLIB  (TPRIOR  )                                       */
*/*%INCLUDE SYSLIB  (TQCBD   )                                       */
*/*%INCLUDE SYSLIB  (TRVTD   )                                       */
*/*%INCLUDE SYSLIB  (TSATD   )                                       */
*/*%INCLUDE SYSLIB  (TSCBD   )                                       */
*/*%INCLUDE SYSLIB  (TRHD    )                                       */
*/*%INCLUDE SYSLIB  (TTRMD   )                                       */
*/*%INCLUDE SYSLIB  (TTHD    )                                       */
*                                                                  1729
*       ;                                                          1729
@DATA    DS    0H
@CH00621 DC    H'0'
@CH01241 DC    H'10'
@CH02037 DC    XL2'0101'
         DS    0F
@SA00002 DS    1F
@SA00003 DS    1F
@SA00037 DS    1F
@SA00039 DS    1F
@SA00005 DS    1F
@SA00033 DS    1F
@SA00027 DS    1F
@SA00004 DS    1F
@SA00011 DS    1F
@SA00035 DS    1F
@SA00036 DS    1F
@SA00040 DS    1F
@SA00020 DS    3F
@SA00014 DS    1F
@SA00022 DS    3F
@SA00006 DS    15F
@SA00024 DS    1F
@SA00025 DS    1F
@SA00007 DS    1F
@SA00008 DS    1F
@SA00023 DS    3F
@SA00009 DS    1F
@SA00012 DS    1F
@SA00013 DS    1F
@SA00019 DS    15F
@SA00017 DS    1F
@SA00018 DS    1F
@SA00016 DS    1F
@SA00021 DS    3F
@SA00032 DS    1F
@SA00029 DS    1F
@SA00028 DS    1F
@SA00031 DS    1F
@SA00030 DS    1F
@SA00034 DS    1F
@SA00038 DS    1F
         DS    0F
@CF00064 DC    F'2'
@CF00044 DC    F'8'
@CF01178 DC    F'14'
@CF00102 DC    F'15'
@CF01821 DC    F'20'
@CF01560 DC    F'28'
@CF02044 DC    F'100'
@CF02040 DC    F'43200'
@CF02042 DC    F'86400'
@CF02234 DC    F'-12'
@CF02259 DC    F'-4'
@CF01344 DC    XL4'08000002'
@CF02262 DC    XL4'0000FFFF'
         DS    0D
SAVCUPTR DC    A(0)
SHIFTLEN DC    H'0'
SAVETNT  DC    AL2(0)
SAVETNT1 DC    AL2(0)
SAVCUTNT DC    AL2(0)
SAVEUTRM DC    AL2(0)
         DS    CL3
SAVEDLGB DC    AL3(0)
         DS    CL1
LGBSAVED DC    AL3(0)
         DS    CL1
SAVETTE  DC    AL3(0)
         DS    CL1
SAVENCP1 DC    AL3(0)
         DS    CL1
SAVENCP2 DC    AL3(0)
         DS    CL1
NCPPTR   DC    AL3(0)
         DS    CL1
SAVLOGCL DC    AL3(0)
         DS    CL1
LINETTE1 DC    AL3(0)
         DS    CL1
LINETTE2 DC    AL3(0)
         DS    CL1
LINEPTR  DC    AL3(0)
@CB01344 DC    X'08000002'
@CB01778 DC    X'0B8000'
@CB02247 DC    B'000000000000000000000000100000000000000000000000000000C
               00'
@CB02252 DC    B'111111111111111111111111011111111111111111111111111111C
               11'
@CB02264 DC    B'000000000000000000000000000010000000000000000000000000C
               00'
@CB02272 DC    B'111111111111111111111111111101111111111111111111111111C
               11'
@CB02277 DC    B'000000000000000000000000001000000000000000000000000000C
               00'
@CB02282 DC    B'000000000000000000000000100010000000000000000000000000C
               00'
SWITCHES DC    B'00000000'
         ORG   SWITCHES
INTEXIT  DS    BL1
EXTEXIT  EQU   SWITCHES+0
EXITTIME EQU   SWITCHES+0
EXITFLAG EQU   SWITCHES+0
CLUSTFLG EQU   SWITCHES+0
RVTEXIT  EQU   SWITCHES+0
@NM00197 EQU   SWITCHES+0
         ORG   SWITCHES+1
PLCBRCTR DS    CL1
STOPLNCT DS    CL1
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
IEDQAPTR EQU   @13
RDISP    EQU   @11
IEDQLPTR EQU   @04
LCBXPTR  EQU   @05
IEDQNATP EQU   @06
IEDNSLP  EQU   @02
IEDQPPTR EQU   @06
IEDQQPTR EQU   @07
IEDQRVTP EQU   @06
IEDQSATP EQU   @06
RTRM     EQU   @08
RZERO    EQU   @00
RPARM    EQU   @01
RNSLBFR  EQU   @02
RTIMENOW EQU   @03
RSTCB    EQU   @03
REND     EQU   @04
RLCB     EQU   @04
RPQCBPTR EQU   @05
RVTPTR   EQU   @06
RPRF     EQU   @06
RQCB     EQU   @07
RBASE2   EQU   @09
RWORKREG EQU   @10
RBASE    EQU   @12
RAVT     EQU   @13
RRETURN  EQU   @14
RENTRY   EQU   @15
IEDQAVTD EQU   0
AVTSAVE3 EQU   IEDQAVTD+72
AVTSAVEX EQU   IEDQAVTD+216
AVTREADD EQU   IEDQAVTD+308
AVTBUFSW EQU   IEDQAVTD+312
@NM00004 EQU   IEDQAVTD+316
AVTCKFLG EQU   @NM00004
AVTBASE  EQU   IEDQAVTD+340
AVTPKF   EQU   AVTBASE
AVTRNMPT EQU   IEDQAVTD+352
AVTOSECB EQU   IEDQAVTD+420
AVTECB1  EQU   AVTOSECB
AVTHG02  EQU   IEDQAVTD+456
AVTDISP  EQU   IEDQAVTD+480
AVTHD    EQU   IEDQAVTD+484
AVTSCOPT EQU   AVTHD
AVTSEND  EQU   IEDQAVTD+524
AVTSAVTP EQU   IEDQAVTD+540
AVTSAVTF EQU   AVTSAVTP
AVTCKPEL EQU   IEDQAVTD+580
AVTCKRMV EQU   AVTCKPEL
AVTCKELF EQU   IEDQAVTD+608
AVTCKBYT EQU   IEDQAVTD+619
AVTHG01  EQU   IEDQAVTD+620
AVTCKLNK EQU   IEDQAVTD+624
AVTCRELE EQU   IEDQAVTD+636
AVTCCELE EQU   AVTCRELE
AVTCLRHI EQU   IEDQAVTD+644
AVTADBUF EQU   IEDQAVTD+648
AVTSYSER EQU   IEDQAVTD+656
AVTBFREB EQU   IEDQAVTD+708
AVTBFRFG EQU   IEDQAVTD+712
AVTBFRTB EQU   IEDQAVTD+720
AVTCKPQB EQU   IEDQAVTD+732
AVTCKPTB EQU   AVTCKPQB
AVTCKPEC EQU   AVTCKPQB+4
AVTCKPCC EQU   AVTCKPEC
AVTOPCQB EQU   IEDQAVTD+744
AVTOPCOB EQU   AVTOPCQB
AVTOPCEC EQU   AVTOPCQB+4
AVTOPCCC EQU   AVTOPCEC
AVTOLTQB EQU   IEDQAVTD+756
AVTFZERO EQU   IEDQAVTD+836
AVTCWFL1 EQU   IEDQAVTD+852
AVTCWFL2 EQU   IEDQAVTD+853
AVTSUBT  EQU   IEDQAVTD+876
AVTIOTR  EQU   IEDQAVTD+877
AVTBIT1  EQU   IEDQAVTD+978
AVTQUCKN EQU   AVTBIT1
AVTBIT2  EQU   IEDQAVTD+979
AVTBIT3  EQU   IEDQAVTD+980
AVTBIT4  EQU   IEDQAVTD+1064
@NM00086 EQU   IEDQAVTD+1160
IEDNSVTD EQU   0
SAVTDIAG EQU   IEDNSVTD
SAVTDIAF EQU   SAVTDIAG
SAVTPREQ EQU   IEDNSVTD+16
SAVTSAT  EQU   IEDNSVTD+80
SAVTLUSQ EQU   IEDNSVTD+88
SAVTSAO  EQU   IEDNSVTD+196
SAVTTCPU EQU   IEDNSVTD+238
SAVTTNTX EQU   IEDNSVTD+252
SAVTZELM EQU   IEDNSVTD+270
SAVTSUBL EQU   IEDNSVTD+272
SAVTRDRV EQU   IEDNSVTD+284
SAVTCKQB EQU   IEDNSVTD+300
SAVTCKTB EQU   SAVTCKQB
SAVTCKEC EQU   SAVTCKQB+4
SAVTCKCC EQU   SAVTCKEC
IEDBDU   EQU   0
BDUCMND  EQU   IEDBDU
BDUMODIF EQU   IEDBDU+1
BDUFNFLG EQU   IEDBDU+2
BDUBDUFG EQU   IEDBDU+3
BDURSP   EQU   IEDBDU+4
BDUSYRSP EQU   BDURSP
BDUEXRSP EQU   BDURSP+1
BDUEND   EQU   IEDBDU+6
IEDQDISP EQU   0
DSPDISP  EQU   4
DSPPOSTR EQU   28
DSPUNAVR EQU   44
IEDQLCB  EQU   0
LCBRCB   EQU   IEDQLCB
LCBQCBA  EQU   LCBRCB+1
LCBPRI   EQU   LCBRCB+4
LCBTSOB  EQU   IEDQLCB+19
LCBCHAIN EQU   IEDQLCB+20
LCBSCRNN EQU   LCBCHAIN
LCBTETEN EQU   LCBCHAIN
LCBINSRC EQU   IEDQLCB+21
LCBLKMDE EQU   LCBINSRC+2
LCBBDFLG EQU   LCBLKMDE
LCBLOCKR EQU   LCBLKMDE
LCBLOCKI EQU   LCBLKMDE
LCBNTXT  EQU   IEDQLCB+24
LCBSTAT4 EQU   LCBNTXT
LCBPHASE EQU   LCBSTAT4
LCBSCBDA EQU   IEDQLCB+25
LCBMHA   EQU   IEDQLCB+29
LCBFLAG1 EQU   IEDQLCB+32
LCBIOBSN EQU   IEDQLCB+33
LCBSNS   EQU   LCBIOBSN+1
LCBSENS0 EQU   LCBSNS
LCBLOSDT EQU   LCBSENS0
LCBTMOUT EQU   LCBSENS0
LCBFLAG3 EQU   LCBIOBSN+7
LCBCSW   EQU   LCBIOBSN+8
LCBCSWST EQU   LCBCSW+3
LCBCSWUS EQU   LCBCSWST
LCBCSWCS EQU   LCBCSWST+1
LCBSIOCC EQU   LCBIOBSN+15
LCBDCBPT EQU   IEDQLCB+52
LCBRCQCB EQU   IEDQLCB+56
LCBRESTR EQU   LCBRCQCB
LCBTHSQ  EQU   IEDQLCB+60
LCBINCAM EQU   LCBTHSQ
LCBERRCT EQU   IEDQLCB+62
LCBLSPCI EQU   IEDQLCB+65
LCBRCBFR EQU   LCBLSPCI
LCBSTATE EQU   IEDQLCB+70
LCBSTAT1 EQU   LCBSTATE
LCBOCNI  EQU   LCBSTAT1
LCBSENDN EQU   LCBSTAT1
LCBSTAT2 EQU   LCBSTATE+1
LCBBEOTN EQU   LCBSTAT2
LCBSYNC  EQU   LCBSTAT2
LCBDIAL  EQU   LCBSTAT2
LCBTSTSW EQU   IEDQLCB+72
LCBERB   EQU   IEDQLCB+76
LCBERBST EQU   IEDQLCB+84
LCBDLNKN EQU   LCBERBST
LCBERBCT EQU   IEDQLCB+88
LCBRBCT2 EQU   LCBERBCT+1
LCBTTCIN EQU   IEDQLCB+90
LCBMSGFM EQU   IEDQLCB+92
LCBSCBA  EQU   IEDQLCB+93
LCBOBRCH EQU   IEDQLCB+96
LCBINVPT EQU   LCBOBRCH+1
LCBBFRW  EQU   LCBINVPT
LCBTPCD  EQU   IEDQLCB+100
LCBSTAT5 EQU   LCBTPCD
LCBSTAT6 EQU   LCBTPCD+4
LCBRSPSV EQU   LCBTPCD+8
LCBSAVSN EQU   IEDQLCB+112
LCBERCCW EQU   IEDQLCB+120
LCBCPA   EQU   IEDQLCB+144
LCBCCW5  EQU   LCBCPA+32
LCBATTEL EQU   LCBCCW5
LCBQEBPL EQU   LCBATTEL
IEDQLCBX EQU   0
LCBXCON  EQU   IEDQLCBX
LCBXFLAG EQU   LCBXCON
LCBXDCT  EQU   LCBXCON+1
LCBXRADR EQU   LCBXCON+4
IEDNATD  EQU   0
IEDNNSLD EQU   0
NSLSAVE1 EQU   IEDNNSLD
NSLSAVE2 EQU   IEDNNSLD+4
IEDNSLD  EQU   0
NSLPLCB  EQU   IEDNSLD+8
NSLPLCBR EQU   NSLPLCB
NSLSAVE  EQU   IEDNSLD+9
NSLGPCUS EQU   IEDNSLD+12
NSLNGPST EQU   NSLGPCUS
NSLGPTSP EQU   NSLGPCUS
NSLNGPSL EQU   NSLGPCUS
NSLSDIAL EQU   NSLGPCUS
NSLDRDRV EQU   NSLGPCUS
NSLCTTRM EQU   IEDNSLD+13
NSLTTCIN EQU   IEDNSLD+16
NSLPRIBK EQU   IEDNSLD+18
NSLFLGBK EQU   IEDNSLD+19
NSLERB   EQU   IEDNSLD+20
NSLERQCB EQU   NSLERB
NSLERBPR EQU   NSLERB+4
NSLESTAT EQU   NSLERB+8
NSLMPPI  EQU   NSLESTAT
NSLBUFFR EQU   NSLERB+9
NSLUNCNT EQU   NSLERB+12
NSLREQTY EQU   IEDNSLD+35
NSLGRPNM EQU   IEDNSLD+36
NSLTTEPT EQU   IEDNSLD+44
IEDOPRED EQU   0
OPREQCB  EQU   IEDOPRED+1
OPREPRI  EQU   IEDOPRED+4
OPRESAVE EQU   IEDOPRED+8
OPRETIC  EQU   OPRESAVE
OPREFLG1 EQU   IEDOPRED+12
OPREFLG3 EQU   IEDOPRED+14
IEDPIU0  EQU   0
PIU0TH   EQU   IEDPIU0
PIU0RH   EQU   IEDPIU0+10
PIU0PAD  EQU   IEDPIU0+13
PIU0RU   EQU   IEDPIU0+14
IEDQPRF  EQU   0
PRFRCB   EQU   IEDQPRF
PRFKEY   EQU   PRFRCB
PRFQCBA  EQU   PRFRCB+1
PRFPRI   EQU   PRFRCB+4
PRFLINK  EQU   PRFRCB+5
PRFTIC   EQU   IEDQPRF+8
PRFTICC  EQU   PRFTIC
PRFNBUNT EQU   IEDQPRF+12
PRFSUNIT EQU   PRFNBUNT
PRFPLQCB EQU   PRFSUNIT
PRFPIUO  EQU   PRFPLQCB
@NM00161 EQU   IEDQPRF+16
PRFSVFFO EQU   @NM00161
PRFSTAT1 EQU   IEDQPRF+20
PRFEOFN  EQU   PRFSTAT1
PRFCORE  EQU   IEDQPRF+21
PRFXTRA  EQU   PRFCORE
PRFSCAN  EQU   IEDQPRF+24
PRFTQBCK EQU   IEDQPRF+26
PRFNTXT  EQU   PRFTQBCK
PRFEOBOF EQU   PRFNTXT
PRFCHDR  EQU   IEDQPRF+32
PRFHQBCK EQU   IEDQPRF+35
IEDPF1   EQU   0
PRF1FLG1 EQU   IEDPF1+3
PRF1WD2  EQU   IEDPF1+4
PRF1SEQP EQU   PRF1WD2
PRF1SQID EQU   PRF1SEQP
PRF1TAG1 EQU   PRF1SQID
IEDPF2   EQU   0
PRF2FLG2 EQU   IEDPF2
PRF2TNTI EQU   PRF2FLG2
PRF2WD2  EQU   IEDPF2+4
IEDQQCB  EQU   0
QCBDSFLG EQU   IEDQQCB
QCBCORE  EQU   QCBDSFLG
QCBDISK  EQU   QCBDSFLG
QCBNREUS EQU   QCBDISK
QCBREUS  EQU   QCBDISK
QCBELCHN EQU   IEDQQCB+1
QCBPRI   EQU   IEDQQCB+4
QCBSTVTO EQU   IEDQQCB+8
QCBSTCHN EQU   IEDQQCB+9
QCBSTPRI EQU   IEDQQCB+12
QCBSLINK EQU   IEDQQCB+13
QCBEOLDT EQU   IEDQQCB+16
QCBBYTE1 EQU   QCBEOLDT+1
QCBLKRLN EQU   IEDQQCB+18
QCBRETCT EQU   QCBLKRLN
QCBSTAT  EQU   IEDQQCB+19
QCBTIME  EQU   QCBSTAT
QCBINSRC EQU   IEDQQCB+21
@NM00171 EQU   QCBINSRC
QCBTSOF2 EQU   @NM00171+1
QCBTSOF1 EQU   @NM00171+2
QCBDELAY EQU   QCBTSOF1
QCBINTVL EQU   IEDQQCB+24
QCBPREN  EQU   IEDQQCB+28
QCBLKRRN EQU   QCBPREN+1
QCBDCBAD EQU   IEDQQCB+33
QCBLGBAD EQU   QCBDCBAD
QCBFLAG  EQU   IEDQQCB+36
QCBTSSES EQU   QCBFLAG
IEDQPQCB EQU   0
QCBFHDLZ EQU   IEDQPQCB+3
QCBPFEFO EQU   QCBFHDLZ+1
QCBFHDTZ EQU   IEDQPQCB+6
QCBINTLF EQU   IEDQPQCB+12
QCBFFEFO EQU   IEDQPQCB+15
QCBPRIPQ EQU   IEDQPQCB+24
IEDNQCB  EQU   0
QCBSTAT1 EQU   IEDNQCB+4
QCBPLCBN EQU   QCBSTAT1
QCBSNDRQ EQU   QCBSTAT1
QCBRCVRQ EQU   QCBSTAT1
QCBPLCBA EQU   IEDNQCB+5
IEDRVTD  EQU   0
RVTNUM   EQU   IEDRVTD
RVTINDEX EQU   IEDRVTD+2
IEDSATD  EQU   0
SATRNRVT EQU   IEDSATD+4
IEDQSCB  EQU   0
SCBSTATE EQU   IEDQSCB
SCBSEQIN EQU   SCBSTATE
SCBLCK1N EQU   SCBSTATE
SCBMSGLN EQU   SCBSTATE
SCBRCVCT EQU   IEDQSCB+4
SCBMBHEN EQU   IEDQSCB+5
SCBBKFCT EQU   IEDQSCB+9
SCBEOBSZ EQU   SCBBKFCT+1
SCBSALEV EQU   IEDQSCB+12
SCBQTYPE EQU   SCBSALEV
SCBERRST EQU   IEDQSCB+16
SCBERR1  EQU   SCBERRST
SCBHDRRN EQU   SCBERR1
SCBORIGN EQU   SCBERR1
SCBNOTRM EQU   SCBERR1
SCBSEQHN EQU   SCBERR1
SCBSEQLN EQU   SCBERR1
SCBCUTFN EQU   SCBERR1
SCBERR2  EQU   SCBERRST+1
SCBABRTN EQU   SCBERR2
SCBERR3  EQU   SCBERRST+2
SCBLOSTN EQU   SCBERR3
SCBTMIDN EQU   SCBERR3
SCBFORMN EQU   SCBERR3
SCBATTN  EQU   SCBERR3
SCBXCEPN EQU   SCBERR3
SCBERR4  EQU   SCBERRST+3
SCBTXTTN EQU   SCBERR4
SCBCTLUN EQU   SCBERR4
SCBCHANN EQU   SCBERR4
SCBDLPTR EQU   IEDQSCB+22
SCBEOBAC EQU   SCBDLPTR
SCBCTBAC EQU   SCBEOBAC
SCBBSCFM EQU   IEDQSCB+24
SCBDATEN EQU   SCBBSCFM
SCBITBSZ EQU   IEDQSCB+40
SCBCTBSV EQU   SCBITBSZ
SCBDNSEG EQU   IEDQSCB+41
SCBCLSEG EQU   IEDQSCB+45
SCBITBAC EQU   IEDQSCB+48
SCBCTBFL EQU   SCBITBAC
SCBBLKCT EQU   SCBCTBFL
SCBDCSEG EQU   IEDQSCB+49
SCBSTAT1 EQU   IEDQSCB+60
SCBCORE  EQU   IEDQSCB+61
SCBSCAN  EQU   IEDQSCB+64
SCBNTXT  EQU   IEDQSCB+66
SCBCHDR  EQU   IEDQSCB+72
SCBCCSEG EQU   IEDQSCB+75
SCBEND   EQU   IEDQSCB+84
IEDRH    EQU   0
TRHBYTE0 EQU   IEDRH
TRHBYTE1 EQU   IEDRH+1
TRHBYTE2 EQU   IEDRH+2
IEDTRM   EQU   0
IEDNTRM  EQU   IEDTRM
TRMBYTE4 EQU   IEDNTRM
TRMBYTE3 EQU   IEDNTRM+1
TRMBYTE2 EQU   IEDNTRM+2
TRMRSACT EQU   TRMBYTE2
TRMINPG  EQU   TRMBYTE2
TRMCLOSN EQU   TRMINPG
TRMGPACT EQU   TRMBYTE2
TRMBYTE1 EQU   IEDNTRM+3
TRMSCPRQ EQU   TRMBYTE1
TRMINPTP EQU   TRMBYTE1
TRMCOHRT EQU   IEDNTRM+4
TRMBYTE0 EQU   IEDNTRM+6
TRMINPUT EQU   TRMBYTE0
TRMDIAL  EQU   TRMBYTE0
TRMSNA   EQU   TRMBYTE0
TRMSIBPT EQU   IEDNTRM+7
TRMGPCNT EQU   TRMSIBPT
TRMCOHTG EQU   TRMSIBPT+1
TRMTYPE  EQU   IEDNTRM+11
TRMSUBST EQU   IEDNTRM+12
IEDQTRM  EQU   IEDTRM+14
TRMSTATE EQU   IEDQTRM
TRMLOG   EQU   TRMSTATE
TRMHELDN EQU   TRMSTATE
TRMDESTQ EQU   IEDQTRM+1
TRMINSEQ EQU   IEDQTRM+4
TLISTCNT EQU   TRMINSEQ
TRMUTERM EQU   TLISTCNT
TRMOUTSQ EQU   IEDQTRM+6
TLISTEN  EQU   TRMOUTSQ
TRMDSORG EQU   TLISTEN
TRMALTD  EQU   IEDQTRM+8
TRMDEVFL EQU   IEDQTRM+10
TRMSTAT  EQU   IEDQTRM+12
IEDTH    EQU   0
TTHBYTE0 EQU   IEDTH
TTHBYTE1 EQU   IEDTH+1
TTHDAF   EQU   IEDTH+2
TTHOAF   EQU   IEDTH+4
TTHSNF   EQU   IEDTH+6
TTHTAG   EQU   TTHSNF
TTHTAG1  EQU   TTHTAG
TTHDCF   EQU   IEDTH+8
SSCHINDX EQU   0
LCBSCAN  EQU   0
IEDIAP04 EQU   0
IEDQTNT  EQU   0
IEDQHG   EQU   0
IEDQHG02 EQU   0
IEDIAP   EQU   0
DSPBYPAS EQU   20
DSPCHAIN EQU   12
DSPLIFO  EQU   56
DSPLIFOR EQU   60
DSPLIST  EQU   8
DSPPOST  EQU   24
DSPPRIO  EQU   48
DSPPRIOR EQU   52
DSPTRACE EQU   64
DSPTSTQ  EQU   32
DSPTSTQR EQU   36
DSPUNAV  EQU   40
DSPWAIT  EQU   16
QCBLDCB  EQU   0
LCBRSPIN EQU   LCBIOBSN
LCBLUSNS EQU   LCBRSPIN+5
LCBSCPRS EQU   LCBRSPIN+9
LCBCSWU1 EQU   LCBSCPRS+2
LCBRSPFG EQU   LCBRSPIN+15
LCBCOREQ EQU   LCBTPCD
@NM00133 EQU   LCBCPA+40
LCBQNX   EQU   LCBERCCW
LCBQNXMN EQU   LCBQNX
LCBCANCL EQU   LCBSAVSN
LCBCANFG EQU   LCBCANCL
IEDQSPTR EQU   LCBSCBA
TRMPRE1  EQU   TRMBYTE4
TRMCONT  EQU   TRMPRE1
TRMSESSN EQU   TRMPRE1
TRMOCNI  EQU   TRMPRE1
TRMSPACT EQU   TRMPRE1
TRMERLCK EQU   TRMPRE1
TRMNCP1  EQU   TRMBYTE4
TRMPRE   EQU   TRMBYTE3
TRMSTMM  EQU   TRMPRE
TRMASNXI EQU   TRMPRE
TRMNLOUT EQU   TRMPRE
TRMRDOUT EQU   TRMPRE
TRMINOUT EQU   TRMPRE
TRMNCP   EQU   TRMBYTE3
TRMNCPCL EQU   TRMNCP
TRMPU    EQU   TRMBYTE3
TRMLU    EQU   TRMBYTE3
TRMAUTO  EQU   TRMLU
TRMLUIT  EQU   TRMLU
TRMSESRQ EQU   TRMLU
TRMLINK  EQU   TRMBYTE3
SAVE3    EQU   AVTSAVE3
BDUTEXT  EQU   BDUEND
PRFSHDR  EQU   IEDQPRF+42
SCBRGSAV EQU   SCBEND
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00194 EQU   TRMLINK
TRMLSTAT EQU   TRMLINK
TRMLINT  EQU   TRMLINK
TRMEPMOD EQU   TRMLINK
TRMLULOG EQU   TRMLU
TRMINERR EQU   TRMLU
TRMLUREQ EQU   TRMLU
TRMTDIFF EQU   TRMLU
TRMLUTM  EQU   TRMLU
TRMPCONT EQU   TRMPU
@NM00193 EQU   TRMPU
TRMNCONT EQU   TRMNCP
TRMQUCKN EQU   TRMNCP
TRMSLOWN EQU   TRMNCP
TRMSYGEN EQU   TRMNCP
TRMIPLDM EQU   TRMNCP
TRMWROUT EQU   TRMPRE
TRMCMODE EQU   TRMPRE
TRMSTPND EQU   TRMPRE
@NM00192 EQU   TRMNCP1
TRMINOP  EQU   TRMNCP1
TRMLYNCH EQU   TRMPRE1
TRMSPOUT EQU   TRMPRE1
TRMQNPL  EQU   TRMPRE1
@NM00141 EQU   LCBCANCL+3
LCBCANTH EQU   LCBCANCL+1
@NM00140 EQU   LCBCANFG
LCBCANCD EQU   LCBCANFG
@NM00139 EQU   LCBCANFG
LCBCANEB EQU   LCBCANFG
LCBCANXT EQU   LCBCANFG
LCBUNADD EQU   LCBQNX+21
LCBUASZE EQU   LCBQNX+20
LCBDSTEA EQU   LCBQNX+16
@NM00138 EQU   LCBQNX+8
LCBIOSBS EQU   LCBQNX+5
@NM00137 EQU   LCBQNX+4
LCBSTSAV EQU   LCBQNX+1
@NM00136 EQU   LCBQNXMN
LCBNX509 EQU   LCBQNXMN
LCBNX162 EQU   LCBQNXMN
LCBNX142 EQU   LCBQNXMN
LCBNX064 EQU   LCBQNXMN
@NM00135 EQU   @NM00133+4
LCBNCPPT EQU   @NM00133+1
@NM00134 EQU   @NM00133
LCBWRSCH EQU   LCBCOREQ+8
LCBCQLNK EQU   LCBCOREQ+4
LCBCQELE EQU   LCBCOREQ
LCBPAKCH EQU   LCBRSPIN+16
@NM00132 EQU   LCBRSPFG
LCBRSRH  EQU   LCBRSPFG
LCBEXPI  EQU   LCBRSPFG
@NM00131 EQU   LCBRSPIN+12
LCBUSUE1 EQU   LCBCSWU1
@NM00130 EQU   LCBCSWU1
@NM00129 EQU   LCBSCPRS+1
LCBDFCMD EQU   LCBSCPRS
LCBUSER  EQU   LCBLUSNS+2
LCBSMIN  EQU   LCBLUSNS+1
LCBSMAJ  EQU   LCBLUSNS
LCBRHSV  EQU   LCBRSPIN+2
LCBSNS0  EQU   LCBRSPIN+1
@NM00128 EQU   LCBRSPIN
TTHTAG2  EQU   TTHTAG+1
@NM00196 EQU   TTHTAG1
TTHTAGS  EQU   TTHTAG1
TTHEFI   EQU   TTHBYTE0
@NM00195 EQU   TTHBYTE0
TTHEBIU  EQU   TTHBYTE0
TTHBBIU  EQU   TTHBYTE0
TTHFTYPE EQU   TTHBYTE0
TRMOPT   EQU   IEDTRM+34
TRMOPTBL EQU   IEDQTRM+18
TRMOPNO  EQU   IEDQTRM+17
TRMCHCIN EQU   IEDQTRM+16
TRMSENSE EQU   TRMSTAT+3
TRMTEMPR EQU   TRMSTAT+2
TRMSIO   EQU   TRMSTAT
@NM00191 EQU   TRMDEVFL+1
TRMTPIN  EQU   TRMDEVFL+1
TRMNCPI  EQU   TRMDEVFL+1
TRMRNTRM EQU   TRMDEVFL+1
@NM00190 EQU   TRMDEVFL+1
TRMLMD   EQU   TRMDEVFL+1
TRMCONC  EQU   TRMDEVFL+1
TRMTSOB  EQU   TRMDEVFL
TRMBFDY  EQU   TRMDEVFL
TRMTBLK  EQU   TRMDEVFL
TRMSBLK  EQU   TRMDEVFL
TRMBLKS  EQU   TRMDEVFL
TRMADDC  EQU   TRMDEVFL
TRMDDIG  EQU   TRMDEVFL
TRMBUFS  EQU   TRMDEVFL
TRMPRILK EQU   TRMALTD
TRMLGB   EQU   TRMDSORG
TRMSCNYN EQU   TRMSTATE
TRMOPTFN EQU   TRMSTATE
TRMACPTN EQU   TRMSTATE
TRMPREF  EQU   TRMSTATE
TRMPROC  EQU   TRMLOG
TRMLIST  EQU   TRMLOG
TRMLINE  EQU   TRMSTATE
TRMRLMCT EQU   IEDNTRM+10
TRMBUFRD EQU   TRMBYTE0
TRMGP    EQU   TRMBYTE0
@NM00189 EQU   TRMBYTE0
TRMOUTPT EQU   TRMBYTE0
TRMUDEF  EQU   TRMBYTE0
TRMSTOTE EQU   TRMBYTE1
TRMCKPRN EQU   TRMBYTE1
TRMTSATN EQU   TRMBYTE1
TRMTRACE EQU   TRMBYTE1
TRMSWBCK EQU   TRMBYTE1
TRMAUTOC EQU   TRMBYTE1
TRMWTNEG EQU   TRMSCPRQ
TRMWRBRK EQU   TRMBYTE2
TRMNOSND EQU   TRMBYTE2
TRMPREP  EQU   TRMBYTE2
TRMANDL  EQU   TRMBYTE2
TRMREMB  EQU   TRMBYTE2
@NM00188 EQU   TRHBYTE2
@NM00187 EQU   TRHBYTE2
@NM00186 EQU   TRHBYTE2
TRHCSI   EQU   TRHBYTE2
@NM00185 EQU   TRHBYTE2
TRHCDI   EQU   TRHBYTE2
TRHEB    EQU   TRHBYTE2
TRHBB    EQU   TRHBYTE2
TRHPI    EQU   TRHBYTE1
@NM00184 EQU   TRHBYTE1
@NM00183 EQU   TRHBYTE1
@NM00182 EQU   TRHBYTE1
TRHER    EQU   TRHBYTE1
TRHDR2   EQU   TRHBYTE1
@NM00181 EQU   TRHBYTE1
TRHDR1   EQU   TRHBYTE1
TRHEC    EQU   TRHBYTE0
TRHBC    EQU   TRHBYTE0
TRHSDI   EQU   TRHBYTE0
TRHFI    EQU   TRHBYTE0
@NM00180 EQU   TRHBYTE0
TRHRUCAT EQU   TRHBYTE0
TRHTYPE  EQU   TRHBYTE0
SCBTRANS EQU   IEDQSCB+81
SCBUNTCT EQU   IEDQSCB+80
SCBEOB   EQU   IEDQSCB+78
SCBNXCPB EQU   SCBCCSEG
SCBNHDR  EQU   SCBCHDR
SCBCRCD  EQU   IEDQSCB+69
SCBTQBCK EQU   SCBNTXT
SCBOSEQ  EQU   SCBSCAN
SCBXTRA  EQU   SCBCORE
SCBNOPST EQU   SCBSTAT1
SCBNIDLE EQU   SCBSTAT1
SCBCEND  EQU   SCBSTAT1
SCBCBGN  EQU   SCBSTAT1
SCBSIZE  EQU   IEDQSCB+58
SCBSRCE  EQU   IEDQSCB+56
SCBDEOB  EQU   IEDQSCB+52
SCBFEFO  EQU   SCBDCSEG
SCBCTBND EQU   SCBBLKCT
SCBSCHDR EQU   SCBCLSEG
SCBHBFNO EQU   IEDQSCB+44
SCBSCSEG EQU   SCBDNSEG
SCBBCTR  EQU   SCBCTBSV
SCBCCHDR EQU   IEDQSCB+37
SCBDESTL EQU   IEDQSCB+36
SCBDCHDR EQU   IEDQSCB+33
SCBCPBNO EQU   IEDQSCB+32
SCBMBSSA EQU   IEDQSCB+25
SCBMLMTN EQU   SCBBSCFM
SCBNOEOT EQU   SCBBSCFM
@NM00179 EQU   SCBBSCFM
SCBNPDTR EQU   SCBDATEN
SCBCNTEN EQU   SCBBSCFM
SCBRCVTX EQU   SCBBSCFM
SCBNONTR EQU   SCBBSCFM
SCBTRNSP EQU   SCBBSCFM
SCBENDCR EQU   SCBCTBAC+1
SCBCRLEN EQU   SCBCTBAC
SCBMRFSD EQU   IEDQSCB+20
SCBUNDFN EQU   SCBERR4
SCBSTERN EQU   SCBCHANN
SCBCPMEN EQU   SCBCTLUN
@NM00178 EQU   SCBERR4
SCBTRMLN EQU   SCBERR4
SCBCONNN EQU   SCBERR4
SCBAPERR EQU   SCBTXTTN
SCBSLCTN EQU   SCBERR4
SCBPERRN EQU   SCBXCEPN
SCBTHRSN EQU   SCBATTN
SCBFIERN EQU   SCBFORMN
SCBUSERN EQU   SCBERR3
SCBSATTN EQU   SCBERR3
SCBTMINN EQU   SCBERR3
SCBXPD   EQU   SCBTMIDN
SCBXPI   EQU   SCBLOSTN
SCBSOHE  EQU   SCBERR2
SCBFRWDN EQU   SCBERR2
SCBRRJN  EQU   SCBABRTN
SCBOLTR  EQU   SCBERR2
SCBALN   EQU   SCBERR2
SCBCODER EQU   SCBERR2
SCBCRMAX EQU   SCBERR2
SCBCRMIN EQU   SCBERR2
SCBRVISL EQU   SCBCUTFN
SCBNOBFN EQU   SCBERR1
@NM00177 EQU   SCBERR1
SCBNOVAC EQU   SCBSEQLN
SCBNOTSO EQU   SCBSEQHN
SCBRVITX EQU   SCBNOTRM
SCBHANG  EQU   SCBORIGN
SCBNOLOG EQU   SCBHDRRN
SCBMRFPL EQU   IEDQSCB+13
SCBBFMM  EQU   SCBQTYPE
SCBBBFTM EQU   SCBQTYPE
SCBNOFF  EQU   SCBQTYPE
SCBCONC  EQU   SCBQTYPE
SCBNREUS EQU   SCBQTYPE
SCBREUS  EQU   SCBQTYPE
SCBCOREQ EQU   SCBQTYPE
SCBNORCL EQU   SCBQTYPE
SCBCTBSZ EQU   SCBEOBSZ
@NM00176 EQU   SCBBKFCT
SCBPRI   EQU   IEDQSCB+8
SCBMACR  EQU   SCBMBHEN
SCBSNDCT EQU   SCBRCVCT
SCBDESTQ EQU   IEDQSCB+1
SCBCODE  EQU   SCBSTATE
SCBPRER  EQU   SCBSTATE
SCBCKPT  EQU   SCBSTATE
SCBERSDS EQU   SCBSTATE
SCBMGFMN EQU   SCBSEQIN
SCBTRANP EQU   SCBSTATE
SATRNLCB EQU   IEDSATD
QCBTTCIN EQU   QCBPLCBA+1
@NM00175 EQU   QCBPLCBA
@NM00174 EQU   QCBSTAT1
QCBFLUSH EQU   QCBSTAT1
QCBNDXRQ EQU   QCBSTAT1
QCBESIG  EQU   QCBSTAT1
QCBWAITC EQU   QCBSTAT1
QCBCHAIN EQU   IEDNQCB
QCBPQBCK EQU   IEDQPQCB+25
QCBCFHDR EQU   IEDQPQCB+21
QCBLFEFO EQU   IEDQPQCB+18
QCBPREVF EQU   QCBINTLF
QCBINTFF EQU   IEDQPQCB+9
QCBDATSQ EQU   QCBFHDTZ+1
@NM00173 EQU   QCBFHDTZ
@NM00172 EQU   QCBPFEFO
QCBDATFL EQU   QCBFHDLZ
QCBDNHDR EQU   IEDQPQCB
QCBQBACK EQU   IEDQQCB+37
QCBCKPT  EQU   QCBFLAG
QCBPROC  EQU   QCBFLAG
QCBSDFFO EQU   QCBFLAG
QCBTERMQ EQU   QCBFLAG
QCBRSRV  EQU   QCBFLAG
QCBREAD  EQU   QCBFLAG
QCBNOBRK EQU   QCBFLAG
QCBRELLN EQU   IEDQQCB+32
QCBTJID  EQU   QCBLKRRN+1
QCBCARCT EQU   QCBLKRRN
QCBPRLVL EQU   QCBPREN
QCBMSGCT EQU   IEDQQCB+26
QCBEXTO  EQU   QCBINTVL
QCBDISC  EQU   QCBTSOF1
QCBPARTO EQU   QCBTSOF1
QCBSATRD EQU   QCBTSOF1
QCBNOBUF EQU   QCBTSOF1
QCBTPUT  EQU   QCBTSOF1
QCBTGET  EQU   QCBTSOF1
QCBWRBRK EQU   QCBTSOF1
QCBSATLC EQU   QCBTSOF2
QCBSATTI EQU   QCBTSOF2
QCBSATCH EQU   QCBTSOF2
QCBSIMRD EQU   QCBTSOF2
QCBDSSMI EQU   QCBTSOF2
QCBPOSTO EQU   QCBTSOF2
QCBBUFQ  EQU   QCBTSOF2
QCBINHBN EQU   QCBTSOF2
QCBSATCT EQU   @NM00171
QCBSCBOF EQU   IEDQQCB+20
QCBCLOCK EQU   QCBSTAT
QCBSCHDL EQU   QCBSTAT
QCBSMODE EQU   QCBSTAT
QCBSEND  EQU   QCBSTAT
QCBBUFRD EQU   QCBSTAT
QCBTRMHO EQU   QCBSTAT
QCBEOM   EQU   QCBSTAT
QCBHUCT  EQU   QCBRETCT
QCBIEND  EQU   QCBRETCT
QCBEND   EQU   QCBRETCT
QCBNL    EQU   QCBRETCT
QCBLOGCT EQU   QCBRETCT
@NM00170 EQU   QCBBYTE1
QCBRITRM EQU   QCBBYTE1
@NM00169 EQU   QCBEOLDT
QCBLINK  EQU   IEDQQCB+5
QCBCNTEN EQU   QCBELCHN+2
@NM00168 EQU   QCBELCHN+2
@NM00167 EQU   QCBELCHN
QCBHELD  EQU   QCBDSFLG
QCBFQCB  EQU   QCBDSFLG
QCBDRQQ  EQU   QCBDSFLG
QCBALTMH EQU   QCBDSFLG
QCBTSQ   EQU   QCBDSFLG
PRF2SEQP EQU   PRF2WD2
@NM00166 EQU   IEDPF2+1
@NM00165 EQU   PRF2FLG2
PRF2TERM EQU   PRF2FLG2
PRF2SMI  EQU   PRF2FLG2
PRF2FORM EQU   PRF2FLG2
PRF1RULN EQU   PRF1SEQP+2
PRF1TAG2 EQU   PRF1SQID+1
@NM00164 EQU   PRF1TAG1
PRF1TAGS EQU   PRF1TAG1
@NM00163 EQU   PRF1FLG1
PRF1LOGD EQU   PRF1FLG1
PRF1USS  EQU   PRF1FLG1
PRF1FORM EQU   PRF1FLG1
PRF1EXPI EQU   PRF1FLG1
PRF1FIDI EQU   PRF1FLG1
PRF1RH   EQU   IEDPF1
PRFDEST  EQU   IEDQPRF+40
PRFISEQ  EQU   IEDQPRF+38
PRFSTXT  EQU   PRFHQBCK
PRFNHDR  EQU   PRFCHDR
PRFCRCD  EQU   IEDQPRF+29
PRFSVSEQ EQU   PRFNTXT+1
PRFSVPRI EQU   PRFEOBOF
PRFISIZE EQU   PRFSCAN+1
@NM00162 EQU   PRFSCAN
PRFEOB   EQU   PRFXTRA+1
PRFSTSO  EQU   PRFXTRA
PRFNHDRN EQU   PRFSTAT1
PRFNLSTN EQU   PRFSTAT1
PRFLOCK  EQU   PRFEOFN
PRFDUPLN EQU   PRFSTAT1
PRFTSMSG EQU   PRFSTAT1
PRFITCPN EQU   PRFSTAT1
PRFERMGN EQU   PRFSTAT1
PRFCNCLN EQU   PRFSTAT1
PRFSVFLG EQU   @NM00161+3
PRFSIZE  EQU   PRFSVFFO+2
PRFSRCE  EQU   PRFSVFFO
PRFLCB   EQU   IEDQPRF+13
PRFTI0   EQU   PRFTIC+1
@NM00160 EQU   PRFTICC
@NM00159 EQU   PRFTICC
@NM00158 EQU   PRFTICC
PRFTICON EQU   PRFTICC
@NM00157 EQU   PRFTICC
@NM00156 EQU   PRFTICC
PRFBFMM  EQU   PRFTICC
PRFEOMSG EQU   PRFTICC
PRFCOUNT EQU   PRFLINK+1
@NM00155 EQU   PRFLINK
PRFFLAGS EQU   PRFPRI
PRFIOADR EQU   PRFQCBA
PRFOPCDE EQU   PRFKEY
@NM00154 EQU   OPREFLG3
OPREATCH EQU   OPREFLG3
@NM00153 EQU   OPREFLG3
OPREFLG2 EQU   IEDOPRED+13
OPRELINK EQU   IEDOPRED+5
OPREKEY  EQU   IEDOPRED
@NM00152 EQU   NSLGRPNM+4
NSLOPCEP EQU   NSLGRPNM
@NM00151 EQU   IEDNSLD+34
@NM00150 EQU   NSLESTAT
@NM00149 EQU   NSLESTAT
NSLELINK EQU   NSLERB+5
@NM00148 EQU   NSLGPCUS
@NM00147 EQU   NSLPLCB
NSLOPRE  EQU   IEDNSLD
NATODAF  EQU   IEDNATD
LCBERADR EQU   LCBXRADR+1
LCBPCIRC EQU   LCBXRADR
LCBDCT3  EQU   LCBXDCT+2
LCBDCT2  EQU   LCBXDCT+1
LCBDCT1  EQU   LCBXDCT
@NM00146 EQU   LCBXFLAG
LCBERPND EQU   LCBXFLAG
LCBSRCPF EQU   LCBXFLAG
LCBGPCTV EQU   LCBXFLAG
@NM00145 EQU   LCBXFLAG
@NM00144 EQU   LCBXFLAG
@NM00143 EQU   LCBXFLAG
@NM00142 EQU   LCBXFLAG
LCBCCW10 EQU   LCBCPA+72
LCBCCW9  EQU   LCBCPA+64
LCBCCW8  EQU   LCBCPA+56
LCBCCW7  EQU   LCBCPA+48
LCBCCW6  EQU   LCBCPA+40
LCBCP    EQU   LCBQEBPL+4
LCBIOSB  EQU   LCBQEBPL+1
LCBSIO   EQU   LCBQEBPL
LCBCCW4  EQU   LCBCPA+24
LCBCCW3  EQU   LCBCPA+16
LCBCCW2  EQU   LCBCPA+8
LCBCCW1  EQU   LCBCPA
@NM00127 EQU   LCBERCCW+16
LCBATL05 EQU   LCBERCCW+8
@NM00126 EQU   LCBERCCW
LCBCSWSV EQU   LCBSAVSN+1
LCBSNSV  EQU   LCBSAVSN
LCBBFSNS EQU   LCBRSPSV
LCBWAITC EQU   LCBTPCD+5
LCBINPAK EQU   LCBSTAT6
LCBMHBID EQU   LCBSTAT6
LCBRTRRO EQU   LCBSTAT6
LCBHDRPD EQU   LCBSTAT6
LCBCHN   EQU   LCBSTAT6
LCBBFRSV EQU   LCBTPCD+1
@NM00125 EQU   LCBSTAT5
LCBLUS   EQU   LCBSTAT5
LCBLUNIT EQU   LCBSTAT5
LCBPERM  EQU   LCBSTAT5
LCBNXCMD EQU   LCBBFRW
LCBERMSK EQU   LCBOBRCH
LCBOLT   EQU   LCBMSGFM
LCBEOT   EQU   LCBMSGFM
LCBENQ   EQU   LCBMSGFM
LCBTTD   EQU   LCBMSGFM
LCBRSTRT EQU   LCBMSGFM
LCBVSTRT EQU   LCBMSGFM
LCBACKI  EQU   LCBMSGFM
LCBNAK   EQU   LCBMSGFM
@NM00124 EQU   LCBRBCT2
LCBDCNT  EQU   LCBRBCT2
LCBRBCT1 EQU   LCBERBCT
LCBERBCH EQU   IEDQLCB+85
LCBCOMPL EQU   LCBDLNKN
LCBPRCPG EQU   LCBERBST
LCBERROR EQU   LCBERBST
LCBLOGDV EQU   LCBERBST
LCBINQ   EQU   LCBERBST
LCBRDERR EQU   LCBERBST
LCBEOMSG EQU   LCBERBST
LCBMSG   EQU   LCBERBST
LCBERBLK EQU   IEDQLCB+81
LCBERBPY EQU   IEDQLCB+80
LCBERBQB EQU   LCBERB+1
LCBERBKY EQU   LCBERB
LCBRECAD EQU   IEDQLCB+73
@NM00123 EQU   LCBTSTSW
@NM00122 EQU   LCBTSTSW
@NM00121 EQU   LCBTSTSW
@NM00120 EQU   LCBTSTSW
@NM00119 EQU   LCBTSTSW
@NM00118 EQU   LCBTSTSW
@NM00117 EQU   LCBTSTSW
LCBCONCT EQU   LCBTSTSW
LCBRESP  EQU   LCBSTAT2
LCBBFRAV EQU   LCBDIAL
LCBATTN  EQU   LCBSYNC
LCBNEGRP EQU   LCBSTAT2
LCBSNDPR EQU   LCBSTAT2
LCBCONNN EQU   LCBBEOTN
LCBMSGNN EQU   LCBSTAT2
LCBTRACE EQU   LCBSTAT2
LCBRECVN EQU   LCBSTAT1
LCBFREEN EQU   LCBSTAT1
LCBCONT  EQU   LCBSTAT1
LCBINITN EQU   LCBSTAT1
LCBOCWTN EQU   LCBSTAT1
LCBRCLLN EQU   LCBSTAT1
LCBRECOF EQU   IEDQLCB+68
LCBRDBFR EQU   LCBRCBFR
LCBUCBX  EQU   IEDQLCB+64
LCBTTBIN EQU   LCBERRCT
@NM00116 EQU   LCBINCAM
LCBGETMN EQU   LCBINCAM
@NM00115 EQU   LCBRESTR+1
LCBCMDSV EQU   LCBRESTR
LCBPCILK EQU   LCBDCBPT
LCBSTART EQU   LCBIOBSN+16
LCBAP4OL EQU   LCBSIOCC
LCBAP3OL EQU   LCBSIOCC
LCBAP2OL EQU   LCBSIOCC
LCBAP1OL EQU   LCBSIOCC
LCBSIOC2 EQU   LCBSIOCC
LCBSIOC1 EQU   LCBSIOCC
@NM00114 EQU   LCBSIOCC
LCBCSWRC EQU   LCBCSW+5
LCBCSCHC EQU   LCBCSWCS
LCBCSICC EQU   LCBCSWCS
LCBCSCCC EQU   LCBCSWCS
LCBCSCDC EQU   LCBCSWCS
LCBCSPTC EQU   LCBCSWCS
LCBCSPGC EQU   LCBCSWCS
LCBCSIL  EQU   LCBCSWCS
LCBCSPCI EQU   LCBCSWCS
LCBUSUE  EQU   LCBCSWUS
LCBUSUC  EQU   LCBCSWUS
LCBUSDE  EQU   LCBCSWUS
LCBUSCE  EQU   LCBCSWUS
LCBUSBSY EQU   LCBCSWUS
LCBUSCUE EQU   LCBCSWUS
LCBUSSM  EQU   LCBCSWUS
LCBUSAT  EQU   LCBCSWUS
LCBCSWCA EQU   LCBCSW
LCBOBR   EQU   LCBFLAG3
LCBOBRRD EQU   LCBFLAG3
LCBIOMSG EQU   LCBFLAG3
LCBSOHC  EQU   LCBFLAG3
LCBRLAD  EQU   LCBFLAG3
LCBSOHR  EQU   LCBFLAG3
@NM00113 EQU   LCBFLAG3
LCBECBPT EQU   LCBIOBSN+4
LCBECBCC EQU   LCBIOBSN+3
LCBSENS1 EQU   LCBSNS+1
LCBABORT EQU   LCBTMOUT
LCBNOTIN EQU   LCBLOSDT
LCBOVRUN EQU   LCBSENS0
LCBDATCK EQU   LCBSENS0
LCBEQUCK EQU   LCBSENS0
LCBBUSCK EQU   LCBSENS0
LCBINTRQ EQU   LCBSENS0
LCBCMDRJ EQU   LCBSENS0
LCBFLAG2 EQU   LCBIOBSN
@NM00112 EQU   LCBFLAG1
LCBUNREL EQU   LCBFLAG1
LCBEXCPN EQU   LCBFLAG1
@NM00111 EQU   LCBFLAG1
LCBERPIN EQU   LCBFLAG1
@NM00110 EQU   LCBFLAG1
LCBFSBFR EQU   LCBMHA
LCBISZE  EQU   IEDQLCB+28
LCBLNENT EQU   LCBSCBDA+1
@NM00109 EQU   LCBSCBDA
LCBCPGMH EQU   LCBSTAT4
LCBREAL  EQU   LCBPHASE
@NM00108 EQU   LCBSTAT4
LCBACTRQ EQU   LCBSTAT4
LCBIPLRQ EQU   LCBSTAT4
LCBDACRQ EQU   LCBSTAT4
LCBDMPRQ EQU   LCBSTAT4
@NM00107 EQU   LCBLKMDE
LCBHMFLG EQU   LCBLKMDE
@NM00106 EQU   LCBINSRC
LCBABRTN EQU   LCBCHAIN
LCBCTLMD EQU   LCBTETEN
LCBBFRSZ EQU   LCBCHAIN
LCBUREQN EQU   LCBCHAIN
LCBNORTY EQU   LCBCHAIN
LCBERMSG EQU   LCBCHAIN
LCBEXCP  EQU   LCBCHAIN
LCBINVRQ EQU   LCBSCRNN
LCB2741N EQU   LCBTSOB
LCBINHBN EQU   LCBTSOB
LCBCIRCD EQU   LCBTSOB
LCBPREP  EQU   LCBTSOB
LCBSOPL  EQU   LCBTSOB
LCBSATRD EQU   LCBTSOB
LCBTSBUF EQU   LCBTSOB
LCBWRBRK EQU   LCBTSOB
LCBTDL   EQU   IEDQLCB+18
LCBEOLTD EQU   IEDQLCB+16
LCBRSLNK EQU   IEDQLCB+13
LCBRSPRI EQU   IEDQLCB+12
LCBSTCBA EQU   IEDQLCB+9
LCBRSKEY EQU   IEDQLCB+8
LCBLINK  EQU   LCBRCB+5
LCBKEY   EQU   LCBRCB
BDUXGRPH EQU   BDUEXRSP
BDUXFINL EQU   BDUEXRSP
BDUXINIT EQU   BDUEXRSP
BDURESP  EQU   BDUSYRSP
BDUPHASE EQU   BDUSYRSP
BDUERROR EQU   BDUSYRSP
BDUXERLK EQU   BDUBDUFG
BDUALTAK EQU   BDUFNFLG
BDUNEGAK EQU   BDUFNFLG
BDUPOSAK EQU   BDUFNFLG
BDUTPTX  EQU   BDUFNFLG
BDUFRSTB EQU   BDUFNFLG
BDULEADG EQU   BDUFNFLG
BDUHEADR EQU   BDUFNFLG
BDUSTHDR EQU   BDUFNFLG
SAVTLLCB EQU   IEDNSVTD+316
SAVTBITN EQU   IEDNSVTD+312
@NM00105 EQU   SAVTCKQB+8
@NM00104 EQU   SAVTCKEC+1
@NM00103 EQU   SAVTCKCC
SAVTCKPO EQU   SAVTCKCC
SAVTCKWA EQU   SAVTCKCC
SAVTCKCH EQU   SAVTCKTB+1
SAVTCKVT EQU   SAVTCKTB
@NM00102 EQU   IEDNSVTD+297
SAVTRDFG EQU   SAVTRDRV+12
@NM00101 EQU   SAVTRDRV+5
SAVTRDPY EQU   SAVTRDRV+4
SAVTRDQB EQU   SAVTRDRV+1
SAVTRDKY EQU   SAVTRDRV
SAVTNID  EQU   IEDNSVTD+280
SAVTDVAS EQU   IEDNSVTD+276
SAVTPLSZ EQU   IEDNSVTD+274
@NM00100 EQU   IEDNSVTD+273
@NM00099 EQU   SAVTZELM+1
SAVTSUBM EQU   SAVTZELM
SAVTMHDX EQU   IEDNSVTD+268
SAVTNAT1 EQU   IEDNSVTD+266
SAVTSH20 EQU   IEDNSVTD+264
SAVTLCBS EQU   IEDNSVTD+260
SAVTRNMP EQU   IEDNSVTD+256
SAVTNAX  EQU   IEDNSVTD+248
SAVTSUBV EQU   IEDNSVTD+247
SAVTSUBA EQU   IEDNSVTD+246
SAVTSIBC EQU   IEDNSVTD+244
SAVTBSM  EQU   IEDNSVTD+240
SAVTSCPT EQU   SAVTTCPU
SAVTRQTG EQU   IEDNSVTD+236
SAVTRQCH EQU   IEDNSVTD+232
SAVTMAND EQU   IEDNSVTD+228
SAVTSPLN EQU   IEDNSVTD+224
SAVTNADL EQU   IEDNSVTD+222
SAVTNATL EQU   IEDNSVTD+220
SAVTMHTB EQU   IEDNSVTD+216
SAVTSSMH EQU   IEDNSVTD+212
SAVTQRS  EQU   IEDNSVTD+208
SAVTRQIN EQU   IEDNSVTD+204
SAVTDFCO EQU   IEDNSVTD+200
SAVTSARI EQU   IEDNSVTD+192
SAVTSAC  EQU   IEDNSVTD+188
SAVTSAI  EQU   IEDNSVTD+184
SAVTCSCI EQU   IEDNSVTD+180
SAVTSSRP EQU   IEDNSVTD+176
SAVTSSRQ EQU   IEDNSVTD+172
SAVTSCLU EQU   IEDNSVTD+168
SAVTXTRQ EQU   IEDNSVTD+164
SAVTMVBF EQU   IEDNSVTD+160
@NM00098 EQU   IEDNSVTD+148
SAVTIPCQ EQU   IEDNSVTD+144
@NM00097 EQU   IEDNSVTD+136
SAVTXFMI EQU   IEDNSVTD+132
@NM00096 EQU   IEDNSVTD+124
SAVTXFMO EQU   IEDNSVTD+120
@NM00095 EQU   IEDNSVTD+116
SAVTSSSR EQU   IEDNSVTD+112
SAVTSCPQ EQU   IEDNSVTD+108
SAVTSLCB EQU   IEDNSVTD+104
SAVTLUSR EQU   IEDNSVTD+100
@NM00094 EQU   SAVTLUSQ+8
SAVTLUSP EQU   SAVTLUSQ+4
SAVTLUSB EQU   SAVTLUSQ
@NM00093 EQU   IEDNSVTD+84
SAVTNAT  EQU   IEDNSVTD+76
SAVTCLUP EQU   IEDNSVTD+72
SAVTPIUT EQU   IEDNSVTD+68
SAVTRNTA EQU   IEDNSVTD+64
SAVTDNIR EQU   IEDNSVTD+60
SAVTCNIR EQU   IEDNSVTD+56
SAVTFLDH EQU   IEDNSVTD+52
SAVTSRTN EQU   IEDNSVTD+48
SAVTSREQ EQU   IEDNSVTD+44
SAVTFAIL EQU   IEDNSVTD+42
SAVTSUSE EQU   IEDNSVTD+40
SAVTSIB  EQU   IEDNSVTD+36
SAVTPRTN EQU   IEDNSVTD+32
@NM00092 EQU   IEDNSVTD+28
SAVTWH20 EQU   IEDNSVTD+26
SAVTPWT  EQU   IEDNSVTD+24
SAVTPRTQ EQU   IEDNSVTD+20
SAVTPH20 EQU   IEDNSVTD+14
SAVTPUSE EQU   IEDNSVTD+12
SAVTPLCB EQU   IEDNSVTD+8
SAVTPOOL EQU   IEDNSVTD+4
SAVTPRMT EQU   SAVTDIAF
SAVTVIRT EQU   SAVTDIAF
AVTCPBNO EQU   IEDQAVTD+1172
AVTHRESS EQU   IEDQAVTD+1171
@NM00091 EQU   IEDQAVTD+1170
@NM00090 EQU   IEDQAVTD+1169
@NM00089 EQU   IEDQAVTD+1168
@NM00088 EQU   IEDQAVTD+1165
@NM00087 EQU   IEDQAVTD+1164
AVTHRESE EQU   @NM00086
AVTRADDR EQU   IEDQAVTD+1156
AVTNADDR EQU   IEDQAVTD+1152
AVTHRESN EQU   IEDQAVTD+1148
AVTVOLRN EQU   IEDQAVTD+1144
AVTTOTNN EQU   IEDQAVTD+1140
AVTTRCYN EQU   IEDQAVTD+1136
AVTRCTRN EQU   IEDQAVTD+1132
AVTNOVON EQU   IEDQAVTD+1128
AVTADEBN EQU   IEDQAVTD+1124
AVTVOLRR EQU   IEDQAVTD+1120
AVTTOTNR EQU   IEDQAVTD+1116
AVTTRCYR EQU   IEDQAVTD+1112
AVTRCTRR EQU   IEDQAVTD+1108
AVTNOVOR EQU   IEDQAVTD+1104
AVTADEBR EQU   IEDQAVTD+1100
AVTLODPT EQU   IEDQAVTD+1096
AVTIOBN  EQU   IEDQAVTD+1092
AVTIOBR  EQU   IEDQAVTD+1088
AVTCPBPT EQU   IEDQAVTD+1084
AVTFCPB  EQU   IEDQAVTD+1080
@NM00085 EQU   IEDQAVTD+1076
AVTINCPQ EQU   IEDQAVTD+1072
@NM00084 EQU   IEDQAVTD+1068
@NM00083 EQU   IEDQAVTD+1065
@NM00082 EQU   AVTBIT4
@NM00081 EQU   AVTBIT4
@NM00080 EQU   AVTBIT4
@NM00079 EQU   AVTBIT4
@NM00078 EQU   AVTBIT4
@NM00077 EQU   AVTBIT4
@NM00076 EQU   AVTBIT4
AVTRUFTN EQU   AVTBIT4
@NM00075 EQU   IEDQAVTD+1060
AVTNOBFQ EQU   IEDQAVTD+1056
@NM00074 EQU   IEDQAVTD+1052
AVTDKENQ EQU   IEDQAVTD+1048
@NM00073 EQU   IEDQAVTD+1044
AVTDKAPQ EQU   IEDQAVTD+1040
AVTCOPY  EQU   IEDQAVTD+1036
AVTIA    EQU   IEDQAVTD+1032
AVTFL    EQU   IEDQAVTD+1028
@NM00072 EQU   IEDQAVTD+1024
AVTNCPBQ EQU   IEDQAVTD+1020
AVTTOTNC EQU   IEDQAVTD+1016
AVTCMAX  EQU   IEDQAVTD+1012
AVTCMIN  EQU   IEDQAVTD+1008
AVTHM02  EQU   IEDQAVTD+1004
AVTOPCIN EQU   IEDQAVTD+1002
AVTDCTLN EQU   IEDQAVTD+1000
AVTOPMSK EQU   IEDQAVTD+996
AVTDDFT  EQU   IEDQAVTD+992
AVTSTEAL EQU   IEDQAVTD+988
AVTOPTN  EQU   IEDQAVTD+984
AVTDSKCT EQU   IEDQAVTD+982
AVTCKRST EQU   IEDQAVTD+981
AVTSTAN  EQU   AVTBIT3
AVTSTACN EQU   AVTBIT3
AVTSTAIN EQU   AVTBIT3
AVTSTAYN EQU   AVTBIT3
AVTOLTBN EQU   AVTBIT3
AVTTSAB  EQU   AVTBIT3
AVTRFULN EQU   AVTBIT3
AVTRECVN EQU   AVTBIT3
@NM00071 EQU   AVTBIT2
@NM00070 EQU   AVTBIT2
AVTOPEIN EQU   AVTBIT2
AVTSTRTN EQU   AVTBIT2
AVTTOPOL EQU   AVTBIT2
AVTCOPYN EQU   AVTBIT2
AVTREUSN EQU   AVTBIT2
AVTEXTSC EQU   AVTBIT2
AVTDISKN EQU   AVTBIT1
AVTCLOSN EQU   AVTBIT1
AVTREADN EQU   AVTBIT1
AVTDLAYN EQU   AVTBIT1
AVTAQTAN EQU   AVTBIT1
AVTTSON  EQU   AVTBIT1
AVTAPLKN EQU   AVTBIT1
AVTDUMBR EQU   IEDQAVTD+976
AVTDLQX  EQU   IEDQAVTD+974
AVTINTLV EQU   IEDQAVTD+972
AVTSMCNT EQU   IEDQAVTD+970
AVTAVFCT EQU   IEDQAVTD+968
AVTOPCON EQU   IEDQAVTD+966
AVTOPCNT EQU   IEDQAVTD+964
AVTLNCNT EQU   IEDQAVTD+962
AVTKEYLE EQU   IEDQAVTD+960
AVTHA16  EQU   IEDQAVTD+958
AVTHA7   EQU   IEDQAVTD+956
AVTHA4   EQU   IEDQAVTD+954
AVTHA3   EQU   IEDQAVTD+952
AVTHA2   EQU   IEDQAVTD+950
AVTGETMS EQU   IEDQAVTD+949
@NM00069 EQU   IEDQAVTD+948
AVTGETMD EQU   IEDQAVTD+944
AVTGETMN EQU   IEDQAVTD+940
AVTCWTOT EQU   IEDQAVTD+936
AVTCWINT EQU   IEDQAVTD+884
AVTDTRAP EQU   IEDQAVTD+880
@NM00068 EQU   IEDQAVTD+878
@NM00067 EQU   AVTIOTR
AVTIOTRH EQU   AVTIOTR
AVTIOTRE EQU   AVTIOTR
@NM00066 EQU   AVTSUBT
AVTSUBPT EQU   AVTSUBT
AVTSUBON EQU   AVTSUBT
AVTAFE30 EQU   IEDQAVTD+872
AVTAFE20 EQU   IEDQAVTD+868
AVTAFE10 EQU   IEDQAVTD+864
AVTCWEC2 EQU   IEDQAVTD+860
AVTCWPM2 EQU   IEDQAVTD+856
AVTCWTS2 EQU   IEDQAVTD+855
AVTCWTS1 EQU   IEDQAVTD+854
AVTCWCLD EQU   AVTCWFL2
AVTCWRAP EQU   AVTCWFL2
@NM00065 EQU   AVTCWFL2
@NM00064 EQU   AVTCWFL2
@NM00063 EQU   AVTCWFL2
@NM00062 EQU   AVTCWFL2
@NM00061 EQU   AVTCWFL2
AVTCWACT EQU   AVTCWFL2
@NM00060 EQU   AVTCWFL1
@NM00059 EQU   AVTCWFL1
@NM00058 EQU   AVTCWFL1
@NM00057 EQU   AVTCWFL1
@NM00056 EQU   AVTCWFL1
@NM00055 EQU   AVTCWFL1
@NM00054 EQU   AVTCWFL1
AVTCOMWN EQU   AVTCWFL1
AVTCWEC1 EQU   IEDQAVTD+848
AVTCWPM1 EQU   IEDQAVTD+844
AVTCAREA EQU   IEDQAVTD+840
AVTCADDR EQU   IEDQAVTD+832
AVTCOREC EQU   IEDQAVTD+828
@NM00053 EQU   IEDQAVTD+820
AVTCPBCB EQU   IEDQAVTD+816
@NM00052 EQU   IEDQAVTD+808
AVTDSIOB EQU   IEDQAVTD+804
@NM00051 EQU   IEDQAVTD+796
AVTCPRMB EQU   IEDQAVTD+792
@NM00050 EQU   IEDQAVTD+784
AVTCLOSB EQU   IEDQAVTD+780
@NM00049 EQU   IEDQAVTD+772
AVTACTIB EQU   IEDQAVTD+768
@NM00048 EQU   IEDQAVTD+764
AVTOLTEB EQU   IEDQAVTD+760
AVTOLTCH EQU   AVTOLTQB+1
AVTOLTVT EQU   AVTOLTQB
@NM00047 EQU   AVTOPCQB+8
@NM00046 EQU   AVTOPCEC+1
@NM00045 EQU   AVTOPCCC
AVTOPCPO EQU   AVTOPCCC
AVTOPCWA EQU   AVTOPCCC
AVTOPCCH EQU   AVTOPCOB+1
AVTOPCVT EQU   AVTOPCOB
@NM00044 EQU   AVTCKPQB+9
AVTCKPTS EQU   AVTCKPQB+8
@NM00043 EQU   AVTCKPEC+1
@NM00042 EQU   AVTCKPCC
AVTCKPPO EQU   AVTCKPCC
AVTCKPWA EQU   AVTCKPCC
AVTCKPCH EQU   AVTCKPTB+1
AVTCKPVT EQU   AVTCKPTB
@NM00041 EQU   IEDQAVTD+724
@NM00040 EQU   IEDQAVTD+716
AVTSELCH EQU   IEDQAVTD+713
AVTBFRTN EQU   AVTBFRFG
AVTTIMQ  EQU   IEDQAVTD+704
@NM00039 EQU   IEDQAVTD+700
AVTIMQPS EQU   IEDQAVTD+696
AVTINOUT EQU   IEDQAVTD+694
AVTREFTM EQU   IEDQAVTD+692
@NM00038 EQU   IEDQAVTD+680
AVTDELYB EQU   IEDQAVTD+676
AVTOCQPT EQU   IEDQAVTD+672
AVTTSOPT EQU   IEDQAVTD+668
AVTSUPPT EQU   IEDQAVTD+664
AVTCBQCB EQU   IEDQAVTD+660
AVTMSGS  EQU   IEDQAVTD+657
@NM00037 EQU   AVTSYSER
@NM00036 EQU   AVTSYSER
@NM00035 EQU   AVTSYSER
@NM00034 EQU   AVTSYSER
@NM00033 EQU   AVTSYSER
@NM00032 EQU   AVTSYSER
AVTCMAXN EQU   AVTSYSER
AVTCMINN EQU   AVTSYSER
AVT2260L EQU   IEDQAVTD+652
AVTABEPL EQU   AVTADBUF
AVTHFF   EQU   AVTCLRHI+2
@NM00031 EQU   AVTCLRHI
AVTCCLNK EQU   AVTCRELE+5
AVTCCPRI EQU   AVTCRELE+4
AVTCCQCB EQU   AVTCCELE+1
AVTCCKEY EQU   AVTCCELE
AVTDELAD EQU   IEDQAVTD+632
AVTDELEM EQU   IEDQAVTD+628
AVTBSX   EQU   AVTCKLNK
AVTOPETR EQU   AVTHG01
@NM00030 EQU   AVTCKBYT
AVTCKONQ EQU   AVTCKBYT
@NM00029 EQU   AVTCKBYT
@NM00028 EQU   AVTCKBYT
@NM00027 EQU   AVTCKBYT
@NM00026 EQU   AVTCKBYT
@NM00025 EQU   AVTCKBYT
@NM00024 EQU   AVTCKBYT
AVTOPERT EQU   IEDQAVTD+618
AVTOPXCL EQU   IEDQAVTD+616
AVTOPERL EQU   IEDQAVTD+615
@NM00023 EQU   IEDQAVTD+614
AVTCKTIM EQU   IEDQAVTD+612
AVTCKELV EQU   IEDQAVTD+610
AVTCPRCD EQU   IEDQAVTD+609
AVTWARMN EQU   AVTCKELF
AVTCRTLN EQU   AVTCKELF
AVTCPIPN EQU   AVTCKELF
AVTCCLCN EQU   AVTCKELF
AVTCINCN EQU   AVTCKELF
@NM00022 EQU   AVTCKELF
AVTCMCPN EQU   AVTCKELF
AVTNQBCK EQU   AVTCKELF
AVTCKQAD EQU   IEDQAVTD+605
AVTSCBSZ EQU   IEDQAVTD+604
@NM00021 EQU   IEDQAVTD+600
AVTCKELE EQU   IEDQAVTD+596
@NM00020 EQU   AVTCKPEL+8
AVTCKRLK EQU   AVTCKPEL+5
AVTCKRPR EQU   AVTCKPEL+4
AVTCKRMQ EQU   AVTCKRMV+1
AVTCKRKY EQU   AVTCKRMV
AVTHK    EQU   IEDQAVTD+576
AVTHI    EQU   IEDQAVTD+572
AVTIOT   EQU   IEDQAVTD+568
AVTNX    EQU   IEDQAVTD+564
AVTTONE  EQU   IEDQAVTD+560
AVTA3TL  EQU   IEDQAVTD+556
AVTDMECB EQU   IEDQAVTD+552
AVTABEND EQU   IEDQAVTD+546
AVTPLCBN EQU   IEDQAVTD+544
@NM00019 EQU   AVTSAVTP+1
@NM00018 EQU   AVTSAVTF
AVTSNA   EQU   AVTSAVTF
AVTONSNA EQU   AVTSAVTF
AVTVTMCP EQU   AVTSAVTF
@NM00017 EQU   IEDQAVTD+536
AVTCMBSS EQU   IEDQAVTD+532
AVTRCV   EQU   IEDQAVTD+528
AVTCSCH  EQU   IEDQAVTD+520
AVTQ1    EQU   IEDQAVTD+516
AVTE7    EQU   IEDQAVTD+512
AVTHB    EQU   IEDQAVTD+508
AVTR1    EQU   IEDQAVTD+504
AVTBZ    EQU   IEDQAVTD+500
AVTEZ    EQU   IEDQAVTD+496
AVTEC    EQU   IEDQAVTD+492
AVTEW    EQU   IEDQAVTD+488
AVTNDIAL EQU   AVTSCOPT
AVTN2741 EQU   AVTSCOPT
AVTCONCO EQU   AVTSCOPT
AVTCONC  EQU   AVTSCOPT
AVTCMBUF EQU   AVTSCOPT
AVTAPDMP EQU   AVTSCOPT
@NM00016 EQU   AVTSCOPT
AVTHA    EQU   AVTDISP
AVTEA    EQU   IEDQAVTD+476
AVTAX    EQU   IEDQAVTD+472
AVTA3    EQU   IEDQAVTD+468
AVTGD    EQU   IEDQAVTD+464
AVTAL    EQU   IEDQAVTD+460
AVTOLTST EQU   AVTHG02
AVTE8    EQU   IEDQAVTD+452
AVTUI    EQU   IEDQAVTD+448
AVTCOMPT EQU   IEDQAVTD+444
AVTCRSRF EQU   IEDQAVTD+440
@NM00015 EQU   IEDQAVTD+436
AVTKA02  EQU   IEDQAVTD+432
AVTOPTPT EQU   IEDQAVTD+428
AVTPCBPT EQU   IEDQAVTD+424
@NM00014 EQU   AVTECB1
AVTCOMP  EQU   AVTECB1
@NM00013 EQU   AVTECB1
AVTOPECA EQU   IEDQAVTD+416
AVTOLECA EQU   IEDQAVTD+412
AVTCKECA EQU   IEDQAVTD+408
AVTCWECA EQU   IEDQAVTD+404
AVTCWTCB EQU   IEDQAVTD+400
AVTOLTCB EQU   IEDQAVTD+396
AVTOCTCB EQU   IEDQAVTD+392
AVTCKTCB EQU   IEDQAVTD+388
AVTAS    EQU   IEDQAVTD+384
AVTNOLBF EQU   IEDQAVTD+382
AVTNCKPR EQU   IEDQAVTD+381
AVTCIB   EQU   IEDQAVTD+380
AVTSPLPT EQU   IEDQAVTD+376
AVTMVBFR EQU   IEDQAVTD+372
AVTSBTA  EQU   IEDQAVTD+368
AVTRARTN EQU   IEDQAVTD+364
AVTBSCAN EQU   IEDQAVTD+360
AVTRDYA  EQU   IEDQAVTD+356
AVTDISTR EQU   IEDQAVTD+348
AVTPARM3 EQU   IEDQAVTD+344
@NM00012 EQU   AVTPKF
@NM00011 EQU   AVTPKF
@NM00010 EQU   AVTPKF
AVTFTCHF EQU   AVTPKF
@NM00009 EQU   AVTPKF
@NM00008 EQU   AVTPKF
@NM00007 EQU   AVTPKF
@NM00006 EQU   AVTPKF
AVTPARM  EQU   IEDQAVTD+336
AVTEXS2A EQU   IEDQAVTD+330
AVTEXA2S EQU   IEDQAVTD+324
AVTOCGET EQU   IEDQAVTD+320
AVTCKAVT EQU   @NM00004+1
@NM00005 EQU   AVTCKFLG
AVTCKHLT EQU   AVTCKFLG
AVTCKREQ EQU   AVTCKFLG
AVTCKENV EQU   AVTCKFLG
AVTCKNAC EQU   AVTCKFLG
AVTCKTAC EQU   AVTCKFLG
AVTBUENT EQU   IEDQAVTD+314
@NM00003 EQU   IEDQAVTD+313
AVTFULLT EQU   AVTBUFSW
AVTUNCON EQU   AVTBUFSW
@NM00002 EQU   AVTBUFSW
AVTBUFTR EQU   AVTREADD
AVTREADY EQU   IEDQAVTD+304
AVTRACE  EQU   IEDQAVTD+300
AVTTCB   EQU   IEDQAVTD+296
AVTPASWD EQU   IEDQAVTD+288
AVTCTLCH EQU   IEDQAVTD+280
AVTDOUBL EQU   IEDQAVTD+272
AVTDOUBX EQU   IEDQAVTD+264
AVTDPARM EQU   IEDQAVTD+260
AVTCSTCS EQU   IEDQAVTD+256
AVTDLQ   EQU   AVTSAVEX+32
@NM00001 EQU   AVTSAVEX
AVTSAVE4 EQU   IEDQAVTD+144
AVTSAVE2 EQU   IEDQAVTD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00443 EQU   @EL00002
@RC00446 EQU   @EL00002
@RC00453 EQU   @EL00003
@RC00456 EQU   @EL00003
@RC00459 EQU   @EL00003
@RC00462 EQU   @EL00003
@RC00465 EQU   @EL00003
@RC00468 EQU   @EL00003
@RC00506 EQU   @EL00005
@RC00553 EQU   @EL00006
@RC00567 EQU   @EL00007
@RC00598 EQU   @EL00008
@RC00739 EQU   @RC00737
@RC00747 EQU   @RC00737
@RC00728 EQU   @RC00725
@RC00810 EQU   @RC00808
@RF00835 EQU   @RC00806
@RC00875 EQU   @EL00016
@RC00891 EQU   @EL00016
@RF00901 EQU   @EL00016
@RF00906 EQU   @EL00016
@RC00904 EQU   @EL00016
@RC00950 EQU   @EL00018
@RC01121 EQU   @RC01118
@RC01089 EQU   @EL00027
@RC01170 EQU   @EL00027
@RC01177 EQU   @EL00027
@RC01198 EQU   @EL00027
@RC01206 EQU   @EL00028
@RC01339 EQU   @RC01336
@RC01410 EQU   @RC01405
@RC01439 EQU   @EL00030
@RC01525 EQU   @EL00033
@RC01573 EQU   @EL00035
@RC01580 EQU   @EL00035
@RC01632 EQU   @RC01630
@RC01616 EQU   @EL00037
@RC01704 EQU   @EL00040
@RC01723 EQU   @EL00040
@PB00040 EQU   @EL00001
@RC00527 EQU   @RC00506
@RC00730 EQU   @RC00728
@RC00812 EQU   @RC00810
@RC00877 EQU   @RC00875
@RF00893 EQU   @RC00891
@RF00896 EQU   @RC00891
@RC00952 EQU   @RC00950
@RC01092 EQU   @RC01089
@RC01101 EQU   @RC01089
@RC01180 EQU   @RC01177
@RC01189 EQU   @RC01177
@RC01530 EQU   @RC01525
@RC01634 EQU   @RC01632
@PB00039 EQU   @PB00040
@RC01707 EQU   @RC01704
@RC00532 EQU   @RC00527
@RF00733 EQU   @RC00730
@RC00820 EQU   @RC00812
@RC01638 EQU   @RC01634
@PB00038 EQU   @PB00039
@RC00822 EQU   @RC00820
@PB00037 EQU   @PB00038
@PB00036 EQU   @PB00037
@PB00035 EQU   @PB00036
@PB00034 EQU   @PB00035
@PB00033 EQU   @PB00034
@PB00032 EQU   @PB00033
@PB00031 EQU   @PB00032
@PB00030 EQU   @PB00031
@PB00029 EQU   @PB00030
@PB00028 EQU   @PB00029
@PB00027 EQU   @PB00028
@PB00026 EQU   @PB00027
@PB00025 EQU   @PB00026
@PB00024 EQU   @PB00025
@PB00023 EQU   @PB00024
@PB00022 EQU   @PB00023
@PB00021 EQU   @PB00022
@PB00020 EQU   @PB00021
@PB00019 EQU   @PB00020
@PB00018 EQU   @PB00019
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IEDNSL,(C'PLS1109',0701,78123)
