IEDQAX   TITLE 'IEDQAX - BUFFER SCAN ROUTINE'
IEDQAX   CSECT
***********************************************************************
*C000000-999999                                                  S22025
*                                                                     *
* TITLE 'IEDQAX' - BUFFER SCAN ROUTINE                                *
*                                                                     *
* STATUS - CHANGE LEVEL 001                                           *
*                                                                     *
* FUNCTION - SEARCHS BUFFER FOR CHARACTER(S) PASSED TO IT BY CALLER.  *
*    BEGINS WITH THE OFFSET PASSED AND ENDS WITH CHARACTER(S) FOUND   *
*    OR OUT OF BUFFER.                                                *
*                                                                     *
* ENTRY POINT - 'IEDQAX'                                              *
*    CALLING SEQUENCE -                                               *
*         L    R15,AVTAX                                              *
*         BALR R14,R15                                                *
*                                                                     *
*    REGISTERS 2-12 ARE SAVED IN PASSED R13                           *
*                                                                     *
* INPUT -                                                             *
*    EXPECTED REGISTER CONTENTS                                       *
*         USING R6,BUFFER DSECT                                       *
*         USING R9,AVT BASE                                           *
*         USING R13,SAVE AREA                                         *
*         USING R15,BASE REGISTER                                     *
*                                                                     *
*    PARAMETERS PASSED IN REGISTERS R0,R1,AND R2                      *
*         R0 - HIGH ORDER BYTE, COUNT OF CHARACTERS OR ZERO           *
*              LOW ORDER TWO BYTES, OFFSET IN BUFFER TO BEGIN SCAN    *
*         R1 - ADDRESS OF CHARACTER STRING                            *
*         R2 - BLANK OR NEGATIVE IF BLANKS ARE IGNORED                *
*                                                                     *
*    IF COUNT IN R0 IS ZERO THEN THE COUNT OF CHARACTERS PASSED WILL  *
*    BE THE FIRST BYTE OF THE CHARACTER STRING PASSED.                *
*                                                                     *
* OUTPUT -                                                            *
*    PARAMETERS IN R0,R1, AND R15                                     *
*         R0 - OFFSET OF LAST CHARACTER FOUND                         *
*         R1 - ADDRESS OF LAST CHARACTER FOUND                        *
*         R15 - NUMBER OF CHARACTERS FOUND                            *
*                                                                     *
*    AVTDOUBL - CHARACTER(S) FOUND IF ANY                             *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    BUFFER CURRENTLY BEING PROCESSED                                 *
*    AVT - ADDRESS VECTOR TABLE                                       *
*                                                                     *
* EXIT,NORMAL - RETURN TO CALLER VIA A BRANCH R14 WITH PARAMETERS     *
*    SET IN THE PROPER REGISTERS.                                     *
*                                                                     *
* EXIT,ERROR - N/A                                                    *
*                                                                     *
* TABLES/WORK AREAS - N/A                                             *
*                                                                     *
* ATTRIBUTES - SERIALLY REUSABLE,ENABLED                              *
*                                                                     *
* CHARACTER CODE DEPENDENCY - THE OPERATION OF THIS MODULE DOES NOT   *
*    DEPEND UPON AN INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER *
*    SET.                                                             *
*                                                                     *
* NOTES - N/A                                                         *
*                                                                     *
***********************************************************************
         EJECT
         SPACE 3
***********************************************************************
*        EQUATES                                                      *
***********************************************************************
         SPACE 3
R0       EQU   0                        REG 0                    S22026
RLENGTH  EQU   0                        REG 0                    S22026
R1       EQU   1                        REG 1                    S22026
R2       EQU   2                        REG 2                    S22026
R3       EQU   3                        REG 3                    S22026
RCHARST  EQU   3                        REG 3                    S22026
RUNIT    EQU   4                        REG 4                    S22026
RSCAN    EQU   5                        REG 5                    S22026
RPREFIX  EQU   6                        REG 6                    S22026
RSCANBUF EQU   7                        REG 7                    S22026
R8       EQU   8                        REG 8                    S22026
RAVT     EQU   9                        REG 9                    S22026
RBLANK   EQU   10                       REG 10                   S22026
R11      EQU   11                       REG 11                   S22026
R12      EQU   12                       REG 12                   S22026
RSCANUNT EQU   12                       REG 12                   S22026
R13      EQU   13                       REG 13                   S22026
R14      EQU   14                       REG 14                   S22026
R15      EQU   15                       REG 15                   S22026
SEVEN    EQU   7                        MOVE LENGTH
EIGHT    EQU   8                        MAXIMUM COUNT ALLOWED
ONE      EQU   1                        VALUE OF ONE
ZERO     EQU   0                        OFFSET FOR COMPARE
TWENTY4  EQU   24                       SHIFT LENGHT FOR COUNT
         EJECT
         USING IEDQPRF,RPREFIX
         USING IEDQAVTD,RAVT
         USING IEDQAX,R15
         SPACE
IEDQAX   IEDHJN TESTCNT
         STM   R14,R12,12(R13)          SAVE REGS                S22026
         LR    RCHARST,R1               SET CHAR STRING REG      S22026
         LR    RBLANK,R2                SET BLANK REG            S22026
         LR    RSCANBUF,R0              SET SCAN BUFFER REG      S22026
         N     RSCANBUF,AVTCLRHI        CLEAR HI-ORDER HALF      S22026
         SRL   RLENGTH,TWENTY4          SET LENGTH REG           S22026
         LA    R8,EIGHT                 SET MAX LENGTH           S22026
         LTR   RLENGTH,RLENGTH          LENGTH ZERO              S22026
         BNZ   COMPARE                  BRANCH IF NO             S22026
         IC    RLENGTH,ZERO(RCHARST)    GET LENGTH FROM LIST     S22026
         LA    RCHARST,ONE(RCHARST)     BUMP BY ONE              S22026
COMPARE  EQU   *                                                 S22026
         CR    RLENGTH,R8               MAX LENGTH EXCEEDED      S22026
         BNH   LENGTHOK                 BRANCH IF NO             S22026
         LR    RLENGTH,R8               SET LENGTH TO MAX        S22026
LENGTHOK EQU   *                                                 S22026
         LA    R2,TABLE                 TRAN TABLE ADDR          S22026
         SR    R1,R1                    ZERO REG                 S22026
         IC    R1,ZERO(RCHARST)         GET FIRST COMPARE CHAR   S22026
         AR    R2,R1                    INDEX TO TABLE           S22026
         STC   R1,ZERO(R2)              SET CHAR IN TALBE        S22026
         LR    RUNIT,RPREFIX            SET UNIT REG             S22026
         LR    RSCANUNT,RSCANBUF        SET UNIT SCAN REG        S22026
TRTLOOP  EQU   *                                                 S22026
         SR    R8,R8                    ZERO REG                 S22026
         BAL   R14,SETSCAN              SET SCAN ADDR            S22026
         LH    R2,AVTKEYLE              LOAD KEY LENGTH          S22026
         SR    R2,RSCANUNT              CALCULATE LENGTH TO SCAN S22026
         LH    R1,PRFSIZE               LOAD PRFSIZE             S22026
         SR    R1,RSCANBUF              SUB BUFFER OFFSET        S22026
         CR    R1,R2                    LESS THAN A COMPLETE     S22026
*                                       UNIT TO SCAN             S22026
         BH    AMTSET                   BRANCH IF NO             S22026
         LR    R2,R1                    SET AMOUNT TO SCAN       S22026
AMTSET   EQU   *                                                 S22026
         LA    R1,ZERO(R2,RSCAN)        SET TO END OF UNIT       S22026
         EX    R2,TRT                   TRT FOR CHAR             S22026
         BALR  R2,ZERO                  SAVE COND CODE           S22026
         SR    R1,RSCAN                 CALCULATE NEW OFFSET     S22026
         AR    RSCANBUF,R1              UPDATE BUFFER SCAN PTR   S22026
         AR    RSCANUNT,R1              UPDATE UNIT SCAN PTR     S22026
         AR    RSCAN,R1                 UPDATE SCAN PTR          S22026
         SPM   R2                       SET COND CODE            S22026
         BZ    SETSCAN                  BRANCH IF CHAR NOT FOUND S22026
         MVC   AVTDOUBL(ONE),ZERO(RSCAN) SAVE CHAR FOUND         S22026
         SR    R11,R11                  CLEAR REG                S22026
NEXTCHAR EQU   *                                                 S22026
         LA    R8,ONE(R8)               ADD ONE TO COUNT REG     S22026
         CR    R8,RLENGTH               ALL CHARS FOUND          S22026
         BE    RETURN                   BRANCH IF YES            S22026
         BAL   R14,SETSCAN              GET SCAN START ADDR      S22026
         LTR   RBLANK,RBLANK            BLANKS TO SKIPPED        S22026
         BM    NOBLANK                  BRANCH IF NO             S22026
         EX    RBLANK,CLI               NEXT CHAR A BLANK        S22026
         BNE   NOBLANK                  BRANCH IF NO             S22026
         LA    R11,ONE(R11)             ADD ONE                  S22026
         B     SETSCAN                  SET SCAN POINTER         S22026
NOBLANK  EQU   *                                                 S22026
         IC    R2,ZERO(RSCAN)           GET NEXT CHAR            S22026
         STC   R2,AVTDOUBL(R8)          SAVE CHAR                S22026
         EX    R8,CLC                   NEXT CHAR EQUAL          S22026
         BE    NEXTCHAR                 BRANCH IF YES            S22026
         AR    R8,R11                   ADD NUMBER OF BLANKS     S22026
         SR    RSCANBUF,R8              SET SCAN POINTER BACK    S22026
         LR    RSCANUNT,RSCANBUF        SET UNIT SCAN PTR BACK   S22026
         LR    RUNIT,RPREFIX            INITIALIZE RUNIT         S22026
         B     TRTLOOP                  TRT FOR FIRST CHAR       S22026
         SPACE 3
***********************************************************************
*        SCAN POINTER UPDATE ROUTINE                                  *
***********************************************************************
         SPACE 3
NXTUNIT  EQU   *                                                 S22026
         L     RUNIT,PRFTIC-IEDQPRF(RUNIT)                       S22026
*                                       NEXT UNIT ADDR
         SH    RSCANUNT,AVTKEYLE        SET UNIT SCAN POINTER    S22026
SETSCAN  EQU   *                                                 S22026
         CH    RSCANBUF,PRFSIZE         SCAN PTR BEYOND END OF   S22026
*                                       BUFFER                   S22026
         BNL   RETURN                   BRANCH IF YES            S22026
         CH    RSCANUNT,AVTKEYLE        SCAN PTR IN THIS UNIT    S22026
         BNL   NXTUNIT                  BRANCH IF NO             S22026
         LA    RSCAN,AVTUMALN(RSCANUNT,RUNIT)                    S22026
*                                       SET SCAN POINTER REG     S22026
         LA    RSCANBUF,ONE(RSCANBUF)   POINT TO NEXT CHAR       S22026
         LA    RSCANUNT,ONE(RSCANUNT)   POINT TO NEXT CHAR       S22026
         BR    R14                      RETURN                   S22026
RETURN   EQU   *                                                 S22026
         SPACE 3
***********************************************************************
*        THIS CODE IS USED TO CLEAR THE TRAN TABLE BECAUSE IT         *
*        IS MUCH FASTER THAN A 255 BYTE XC                            *
***********************************************************************
         SPACE 3
         SR    R1,R1                    ZERO REG                 S22026
         IC    R1,ZERO(RCHARST)         GET FIRST CHAR           S22026
         LA    R2,TABLE                 ADDR OF TRAN TABLE       S22026
         AR    R2,R1                    ADDR OF CHAR IN TABLE    S22026
         MVI   ZERO(R2),AVTEZERO        ZERO CHAR IN TABLE       S22026
         LR    R0,RSCANBUF              SET SCAN OFFSET          S22026
         LR    R1,RSCAN                 SET CHAR ADDR            S22026
         LR    R2,RSCANBUF              LOAD SCAN OFFSET         S22026
         SR    R2,R8                    SUB NUMBER OF CHARS      S22026
         SR    R2,R11                   SUB NUMBER OF BLANKS     S22026
         LR    R15,R8                   SET NUM OF CHARS FOUND   S22026
         LM    R3,R12,32(R13)           RESTORE REGS             S22026
         L     R14,12(R13)              RESTORE REG              S22026
         BR    R14                      RETURN TO CALLER         S22026
         SPACE 3
***********************************************************************
*        EXECUTED INSTRUCTIONS                                        *
***********************************************************************
         SPACE 3
CLC      CLC   ZERO(ONE,RCHARST),AVTDOUBL                        S22026
*                                       COMPARE FOR CHARS        S22026
TRT      TRT   ZERO(ONE,RSCAN),TABLE    TRT FOR FIRST CHAR       S22026
CLI      CLI   ZERO(RSCAN),AVTEZERO     CLI FOR BLANK CHAR       S22026
         SPACE 3
***********************************************************************
*        TRANSLATE TABLE                                              *
***********************************************************************
         SPACE 3
TABLE    DC    XL256'0'                 TRAN TABLE
         EJECT
         SPACE 3
***********************************************************************
*        DSECTS                                                       *
***********************************************************************
         SPACE 3
         TAVTD
         TPRFD
         END
AX01     TITLE '''IEDQAX'' - SCAN ROUTINE'
IEDQAX   CSECT
**********************************************************************
*                                                                     *
*STATUS -- CHANGE LEVEL 0                                             *
*                                                                     *
*FUNCTION -- RETURNS THE ADDRESS OF THE NEXT SEQUENTIAL BYTE IN THE   *
*   BUFFER.                                                           *
*                                                                     *
*   THE SCAN POINTER ADDRESS REGISTER (RSCAN) AND THE SCAN POINTER    *
*   OFFSET REGISTER (RSCANOFF) ARE EACH INCREMENTED BY ONE.           *
*   RSCANOFF IS COMPARED WITH THE BUFFER PREFIX DATA SIZE FIELD       *
*   (PRFSIZE).  IF RSCANOFF IS HIGHER,  THE END OF DATA IN THE        *
*   BUFFER HAS BEEN PASSED.  RETURN IS MADE TO THE CALLER.            *
*                                                                     *
*   RSCAN IS COMPARED TO THE END-OF-UNIT REGISTER (REOUAD).  IF       *
*   RSCAN IS LOWER,  THE REGISTERS ARE CORRECTLY SET.  RETURN IS      *
*   MADE TO THE CALLER FOUR BYTES BEYOND THE PASSED RETURN ADDRESS.   *
*                                                                     *
*   IF RSCAN IS NOT LOWER THAN REOUAD,  THE END OF THE CURRENT UNIT   *
*   HAS BEEN PASSED.  THE ADDRESS OF THE NEXT UNIT IS ACCESSED FROM   *
*   THE RECB OF THE CURRENT UNIT.  RSCAN IS SET TO THE ADDRESS OF     *
*   THE FIRST DATA BYTE IN THE NEW UNIT.  REOUAD IS SET TO THE        *
*   ADDRESS OF THE FIRST BYTE BEYOND THE END OF THE NEW UNIT.         *
*   RETURN IS MADE TO THE CALLER FOUR BYTES BEYOND THE PASSED         *
*   RETURN ADDRESS.                                                   *
*                                                                     *
*ENTRY POINTS --                                                      *
*       'IEDQAX' TO RETURN THE ADDRESS OF THE NEXT SEQUENTIAL BYTE    *
*   IN THE BUFFER.  CALLING SEQUENCE IS:                              *
*                                                                     *
*        L     R15,AVTAX                GET ADDRESS OF BUFFER STEP    *
*        BALR  R14,R15                  LINK TO BUFFER STEP           *
*                                                                     *
*INPUT --                                                             *
*   REGISTER 4 - CURRENT UNIT ADDRESS.                                *
*                                                                     *
*   REGISTER 5 - SCAN POINTER ADDRESS.                                *
*                                                                     *
*   REGISTER 6 - BUFFER ADDRESS.                                      *
*                                                                     *
*   REGISTER 7 - SCAN POINTER OFFSET.                                 *
*                                                                     *
*   REGISTER 9 - AVT ADDRESS.                                         *
*                                                                     *
*   REGISTER 11 - END-OF-UNIT ADDRESS.                                *
*                                                                     *
*OUTPUT --                                                            *
*   REGISTER 4 - UPDATED CURRENT UNIT ADDRESS.                        *
*                                                                     *
*   REGISTER 5 - UPDATED SCAN POINTER ADDRESS.                        *
*                                                                     *
*   REGISTER 7 - UPDATED SCAN POINTER OFFSET.                         *
*                                                                     *
*   REGISTER 11 - UPDATED END-OF-UNIT ADDRESS.                        *
*                                                                     *
*EXTERNAL REFERENCES --                                               *
*   AVT - ADDRESS VECTOR TABLE.                                       *
*                                                                     *
*   BUFFER CURRENTLY BEING PROCESSED.                                 *
*                                                                     *
*EXITS,  NORMAL -- REGISTER 5 CONTAINS THE ADDRESS OF THE NEXT BYTE   *
*   IN THE BUFFER.  REGISTER 7 CONTAINS THE OFFSET TO THE NEXT BYTE   *
*   IN THE BUFFER.  IF THE NEXT BYTE IS IN ANOTHER UNIT,  REGISTER    *
*   4 CONTAINS THE ADDRESS OF THE NEXT UNIT AND REGISTER 11           *
*   CONTAINS THE ADDRESS OF THE FIRST BYTE BEYOND THE END OF THE      *
*   NEXT UNIT.  (RETURN IS TO FOUR BYTES BEYOND THE RETURN            *
*   ADDRESS.)                                                         *
*                                                                     *
*   THE END OF THE BUFFER HAS BEEN PASSED.  REGISTER 7 CONTAINS THE   *
*   OFFSET TO THE FIRST BYTE BEYOND THE END OF DATA IN THE BUFFER.    *
*   (RETURN IS TO THE RETURN ADDRESS.)                                *
*                                                                     *
*EXITS,  ERROR -- N/A.                                                *
*                                                                     *
*TABLES/WORK AREAS -- N/A.                                            *
*                                                                     *
*ATTRIBUTES -- REENTRANT,  SERIALLY REUSABLE,  REFRESHABLE,           *
*   ENABLED,  RESIDENT,  PROBLEM PROGRAM MODE.                        *
*                                                                     *
*NOTES -- THE OPERATION OF THIS MODULE DOES NOT DEPEND ON THE         *
*   INTERNAL REPRESENTATION OF AN EXTERNAL CHARACTER SET.             *
*                                                                     *
***********************************************************************
*
********* REGISTER EQUATES **********
         SPACE
R0       EQU   0                        DUMMY BASE REGISTER
         SPACE
RUNIT    EQU   4
         SPACE
RSCAN    EQU   5                        SCAN POINTER
         SPACE
RPREFIX  EQU   6                        ADDRESS OF BUFFER
         SPACE
RSCANOFF EQU   7                        SCAN POINTER OFFSET REG
         SPACE
RAVT     EQU   9                        BASE FOR AVT
         SPACE
REOUAD   EQU   11                       END-OF-UNIT ADDRESS
         SPACE
R13      EQU   13                       SAVE AREA POINTER
R14      EQU   14                       RETURN REGISTER
R15      EQU   15                       BRANCH REGISTER AND
*                                         RETURN CODE REGISTER
         SPACE
********* CONDITION CODES *********
         SPACE
HIGH     EQU   2                        HIGH
        SPACE
********* OTHER EQUATES **********
         SPACE
INC1     EQU   1                        INCREMENT VALUE
FOUR     EQU   4                        LENGTH OF A FULLWORD
         EJECT
         USING IEDQPRF,RPREFIX
         USING IEDQAVTD,RAVT
         USING IEDQAX,R15
         SPACE
SCAN     EQU   *
         LA    RSCAN,INC1(,RSCAN)       BUMP SCAN ADDR
         LA    RSCANOFF,INC1(,RSCANOFF) BUMP SCAN OFFSET
         SPACE
         CH    RSCANOFF,PRFSIZE         TEST IF OUT OF BUFFER
         BCR   HIGH,R14                 YES, RETURN
         SPACE
         CR    RSCAN,REOUAD             BEYOND END OF UNIT
         BL    FOUR(R14)                NO, RETURN
         SPACE
         L     RUNIT,PRFTIC-IEDQPRF(,RUNIT) POINT TO NEXT UNIT
         LA    RUNIT,AVTEZERO(,RUNIT)   CLEAR HIGH ORDER BYTE
         SPACE
         LA    RSCAN,AVTUMALN(,RUNIT)   POINT SCAN TO 1ST BYTE OF
*                                         NEW UNIT
         SPACE
         LH    REOUAD,AVTKEYLE          GET KEY LENGTH
         N     REOUAD,AVTCLRHI          CLEAR TOP HALF OF REGISTER
         LA    REOUAD,AVTUMALN(RUNIT,REOUAD) ADD RECB LNG + UNIT
         B     FOUR(R14)                RETURN
         SPACE
         EJECT
********* DSECT ***********
         SPACE
         TAVTD
         TPRFD
         END
