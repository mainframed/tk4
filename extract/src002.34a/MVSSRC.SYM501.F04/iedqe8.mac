IEDQE8   TITLE 'IEDQE8  -  BINARY SEARCH ROUTINE'
IEDQE8   CSECT
*A203000-205000,209000-211000,215000-217000,233000-241000,       Y01004
*A257000-265000,331000,346000,375700-377100,421000-422000,439000,Y01004
*A457000,470000-472000,543400-545400,550000-551000               Y01004
*C180000,201000,207000,213000,225000,249000,273000,324000,342000,Y01004
*C393000,405000,468000,474000,543000                             Y01004
*D183000-186000,204000,210000,216000,228000-246000,252000-270000,Y01004
*D276000-279000,288000-291000,327000-336000,345000-348000,471000,Y01004
*D492000-495000,507000,516000-525000,531000-534000,564000-579000 Y01004
***********************************************************************
*                                                                     *
*STATUS -- CHANGE LEVEL 0                                             *
*                                                                     *
*FUNCTION -- SEARCHES THE TERMINAL NAME TABLE TO FIND THE ENTRY       *
*   NAME PASSED.                                                      *
*                                                                     *
*   THE ADDRESS OF THE FIELD CONTAINING THE TERMINAL NAME SOUGHT      *
*   AND THE LENGTH OF THE FIELD ARE LOADED FROM THE PARAMETER LIST    *
*   INTO REGISTERS 2 AND 1 RESPECTIVELY.  REGISTER 4 IS INITIALIZED   *
*   TO THE ADDRESS OF THE TERMINAL NAME TABLE (AVTRNMPT) AND          *
*   REGISTER 7 TO THE ENTRY LENGTH FROM THE TERMINAL NAME TABLE.      *
*                                                                     *
*   THE LENGTH FROM THE PARAMETER LIST IS COMPARED WITH THE LENGTH    *
*   FROM THE TERMINAL NAME TABLE.  IF THE LENGTH FROM THE TABLE IS    *
*   HIGHER THAN OR EQUAL TO THE LENGTH PASSED,  THE LENGTH PASSED     *
*   IS TO BE USED AS THE COMPARE LENGTH.  IT IS LEFT IN REGISTER 1.   *
*   IF THE LENGTH FROM THE TABLE IS LOW,  THE LENGTH FROM THE TABLE   *
*   IS USED AS THE COMPARE LENGTH.  IT IS MOVED INTO REGISTER 1       *
*   FROM REGISTER 7.                                                  *
*                                                                     *
*   REGISTER 1 IS DECREMENTED TO BE USED FOR EXECUTING THE SUBSE-     *
*   QUENT COMPARE.  REGISTER 10 IS INITIALIZED TO THE ADDRESS OF      *
*   THE MIDDLE ENTRY FROM THE TERMINAL NAME TABLE.  REGISTER 7 IS     *
*   INCREMENTED BY 3 TO GET THE FULL LENGTH OF A TERMINAL NAME        *
*   TABLE ENTRY,  AND THIS VALUE IS SAVED IN REGISTER 11.  REGISTER   *
*   8 IS SET TO POINT ONE ENTRY BEYOND THE LAST ENTRY IN THE TABLE.   *
*   REGISTER 7 IS MULTIPLIED BY THE SEARCH EXTENT FACTOR IN THE       *
*   TERMINAL NAME TABLE TO GET THE LENGTH OF THE FIRST SEARCH         *
*   EXTENT.  THE SEARCH LOOP IS THEN ENTERED.                         *
*                                                                     *
*   REGISTER 10 (THE ADDRESS OF THE ENTRY TO BE COMPARED) IS          *
*   COMPARED TO REGISTER 8 (THE ADDRESS OF THE LAST ENTRY,  PLUS      *
*   THE LENGTH OF ONE ENTRY) TO DETERMINE IF THE SEARCH IS BEYOND     *
*   THE END OF THE TABLE.  IF SO,  THE CURRENT ENTRY IS NOT           *
*   COMPARED (BECAUSE IT IS NOT A REAL ENTRY).  INSTEAD IT IS         *
*   IMMEDIATELY DECREMENTED BY THE SEARCH EXTENT IN REGISTER 7 AND    *
*   COMPARED WITH REGISTER 11.                                        *
*                                                                     *
*   IF THE CURRENT ENTRY IS A REAL ENTRY,  IT IS COMPARED TO THE      *
*   ENTRY PASSED (POINTED TO BY REGISTER 2).  IF THE CURRENT ENTRY    *
*   IS HIGH,  REGISTER 10 IS DECREMENTED BY REGISTER 7 (THE CURRENT   *
*   SEARCH EXTENT);  IF IT IS LOW,  IT IS INCREMENTED BY REGISTER     *
*   7.  REGISTER 7 IS THEN COMPARED WITH REGISTER 11 (THE LENGTH OF   *
*   ONE ENTRY).  IF REGISTER 7 IS LESS THAN THE LENGTH OF ONE         *
*   ENTRY,  THE SEARCH HAS FAILED.  REGISTER 15 IS SET TO A RETURN    *
*   CODE OF X'00',  THE ADDRESS OF THE SCB IS SET IN REGISTER 0 AND   *
*   RETURN IS MADE VIA THE RETURN INTERFACE ROUTINE.                  *
*                                                                     *
*   IF REGISTER 7 IS NOT LESS THAN THE LENGTH OF ONE ENTRY,  IT IS    *
*   DIVIDED BY TWO TO OBTAIN A NEW SEARCH EXTENT AND THE SEARCH       *
*   LOOP IS REENTERED.                                                *
*                                                                     *
*   IF THE CURRENT ENTRY IS EQUAL TO THE NAME PASSED,  THE SEARCH     *
*   IS COMPLETE.  THE KEY (ORDINAL INDEX) TO THE MATCHING ENTRY IS    *
*   COMPUTED BY DIVIDING THE LENGTH FROM THE FIRST ENTRY TO THE       *
*   MATCHING ENTRY BY THE LENGTH OF ONE ENTRY AND ADDING ONE.  THE    *
*   KEY IS RETURNED IN REGISTER 15.                                   *
*                                                                     *
*ENTRY POINTS --                                                      *
*       'IEDQE8' TO SEARCH THE TERMINAL NAME TABLE TO FIND THE        *
*   ENTRY NAME PASSED.  CALLING SEQUENCE FROM APPLICATION PROGRAM     *
*   MODULES IS:                                                       *
*                                                                     *
*        L     REG,16                   GET CVT ADDRESS INTO ANY REG  *
*        L     REG,AVTCVTPT(,REG)       GET ADDRESS OF DISPATCHER     *
*                                       WORK AREA.                    *
*        LA    REG,64(,REG)             GET ADDRESS OF IEDQE8'S ENTRY *
*                                       IN TABLE.                     *
*        L     R15,0(,REG)              GET IEDQE8'S ADDRESS.         *
*        BALR  R14,R15                  LINK TO IEDQE8.               *
*                                                                     *
*INPUT --                                                             *
*   REGISTER 0 - ADDRESS OF TPROCESS ENTRY NAME (QNAME=)              *
*                                                                     *
*   REGISTER 13 - ADDRESS OF CALLER'S SAVE AREA                       *
*                                                                     *
*   REGISTER 14 - CALLER'S RETURN ADDRESS                             *
*                                                                     *
*   REGISTER 15 - ENTRY POINT ADDRESS                                 *
*                                                                     *
*OUTPUT --                                                            *
*   REGISTER 15 - IF A MATCHING ENTRY IS FOUND,  THE KEY (ORDINAL     *
*   INDEX) TO THE MATCHING ENTRY.  IF NO MATCHING ENTRY IS FOUND,     *
*   A RETURN CODE OF X'00'.                                           *
*                                                                     *
*EXTERNAL REFERENCES --                                               *
*                                                                     *
*   TERMINAL NAME TABLE.                                              *
*                                                                     *
*   AVT - ADDRESS VECTOR TABLE.                                       *
*                                                                     *
*EXITS, NORMAL -- A MATCHING ENTRY IS FOUND.  REGISTER 15 CONTAINS    *
*   THE KEY (ORDINAL INDEX) TO THE MATCHING ENTRY.                    *
*                                                                     *
*EXITS, ERROR -- NO MATCHING ENTRY IS FOUND.  REGISTER 15 CONTAINS    *
*   A RETURN CODE OF ZEROES.                                          *
*                                                                     *
*TABLES/WORK AREAS -- N/A.                                            *
*                                                                     *
*ATTRIBUTES -- SERIALLY REUSABLE, REFRESHABLE, ENABLED, RESIDENT,     *
*   PROBLEM PROGRAM MODE.                                             *
*                                                                     *
*   NOTES -- THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON AN     *
*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *
*                                                                     *
*            THIS MODULE IS LOADED INTO PROTECTED CORE, AND RUNS IN   *
*   PROTECT KEY ZERO.                                                 *
*                                                                     *
***********************************************************************
         EJECT
********* REGISTER EQUATES **********
         SPACE
R0       EQU   0                        DUMMY BASE REG
         SPACE
R1       EQU   1                        WORK REGISTER            Y01004
         SPACE
RFLD     EQU   2                        ADDR OF FIELD PASSED
         SPACE
R3       EQU   3                        WORK REGISTER            Y01004
         SPACE
RTAB     EQU   4                        ADDR OF TABLE TO BE
*                                         SEARCHED
         SPACE
RLEN     EQU   5                        LENGTH OF FIELD PASSED
         SPACE
R6       EQU   6                        WORK REGISTER            Y01004
         SPACE
RSRCHX   EQU   7                        SEARCH EXTENT REGISTER
         SPACE
RLAST    EQU   8                        ADDR OF LAST ENTRY + 1
         SPACE
RAVT     EQU   9                        ADDRESS OF AVT
         SPACE
RADDR    EQU   10                       ADDR OF CURRENT ENTRY IN
*                                         TABLE
         SPACE
RTRULEN  EQU   11                       FULL LENGTH OF A TABLE ENTRY
         SPACE
RBASE    EQU   12                       BASE REGISTER
         SPACE
R13      EQU   13                       CALLERS SAVE AREA ADDR
         SPACE
R14      EQU   14                       RETURN REGISTER
         SPACE
R15      EQU   15                       INPUT - ENTRY POINT ADDR Y01004
*                                       OUTPUT - INDEX TO ENTRY, Y01004
*                                       OR RETURN CODE           Y01004
         SPACE
********* OTHER EQUATES **********
         SPACE
ADDRLEN  EQU   3                        LENGTH OF AN ADDR CONSTANT
         SPACE
DIVIDE   EQU   1                        SHIFT LENGTH TO HALVE A
*                                         VALUE IN A REG
         SPACE
INCX     EQU   1                        FACTOR TO GET ORDINAL INDEX
         SPACE
CVTOFF   EQU   16                       ADDRESS OF CVT
         EJECT
         USING IEDQTNTD,RTAB
         USING *,R15                    ADDRESSABILITY.          Y01004
KEY0E8   DS    0H                       START OF KEY ZERO CODE.  Y01004
         B     SAVEIT                   BRANCH AROUND CONSTANTS. Y01004
         DC    X'00'                    PADDING.                 Y01004
E8CODE   DC    X'04'                    IEDQE8'S ACTION CODE.    Y01004
         DC    AL2(KEY0E8-IEDQE8)       OFFSET TO KEY ZERO CODE. Y01004
IEDQE8   IEDHJN
SAVEIT   SAVE (14,12)
         LR    RBASE,R15                SET BASE REGISTER
         DROP  R15                      DISCARD OLD BASE.        Y01004
         USING IEDQE8,RBASE             CSECT ADDRESSABILITY.    Y01004
         L     RAVT,CVTOFF              GET ADDRESS OF CVT
         L     RAVT,AVTCVTPT(,RAVT)     FIND POINTER TO AVT
         L     RAVT,AVTEZERO(,RAVT)     GET ADDRESS OF AVT
         USING IEDQAVTD,RAVT
         SPACE
         L     RTAB,AVTRNMPT            GET ADDR OF TERMNAME TABLE
         LR    RFLD,R0                  LOAD TERM NAME ADDRESS
         SR    RLEN,RLEN                CLEAR REGISTER 5
         IC    RLEN,TNTENLEN            PUT LENGTH OF TABLE IN R5
         LR    RSRCHX,RLEN              SET TERM LENGTH
         SPACE
         BCTR  RLEN,AVTEZERO            DECREMENT FOR COMPARE
         L     RADDR,TNTMIDEN-1         GET ADDR OF MIDDLE ENTRY
         LA    RADDR,AVTEZERO(,RADDR)   CLEAR HIGH-ORDER BYTE
         LA    RSRCHX,ADDRLEN(,RSRCHX)  GET FULL ENTRY LENGTH
         LR    RTRULEN,RSRCHX           SAVE FULL ENTRY LENGTH
         MH    RSRCHX,TNTLEN            GET OFFSET TO LAST + 1
         LA    RLAST,TNTFIRST           GET ADDR OF FIRST ENTRY
         AR    RLAST,RSRCHX             GET ADDR OF LAST + 1
         LR    RSRCHX,RTRULEN           GET FULL ENTRY LNG
         MH    RSRCHX,TNTSRCHX          MULTIPLY BY SEARCH EXTENT
*                                         FACTOR TO GET SEARCH
*                                         EXTENT
         B     ENTRLOOP                 ENTER LOOP
         SPACE
LOOP     EQU   *
         CR    RSRCHX,RTRULEN           SEARCH EXTENT LT TRUE LNG
         BL    BADRTN                   YES, ENTRY NOT FOUND
         SRL   RSRCHX,DIVIDE            DIVIDE EXTENT BY TWO
         CR    RADDR,RLAST              POINTING BEYOND TABLE END
         BNL   LO                       YES, GO ADJUST DOWN
         SPACE
ENTRLOOP EQU   *
         EX    RLEN,COMPEX              COMPARE ENTRY WITH FIELD
         BH    HI                       HIGH, GO ADJUST UP
         BE    FOUND                    EQUAL, ENTRY FOUND
         EJECT
LO       EQU   *
         SR    RADDR,RSRCHX             LO, ADJUST DOWN
         B     LOOP                     BRANCH TO COMPARE NAME
         SPACE
HI       EQU   *
         BXH   RADDR,RSRCHX,LOOP        ADJUST UP AND LOOP
         SPACE
FOUND    EQU   *
         LA    RTAB,TNTOFF(,RTAB)       GET ADDRESS OF 1ST ENTRY
         SR    RADDR,RTAB               GET OFFSET TO OUR ENTRY
         SR    R0,R0                    CLEAR FOR DIVIDE
         LR    R1,RADDR                 MOVE OFFSET TO DIVIDE REG
         SPACE
         DR    R0,RTRULEN               DIVIDE TO GET INDEX
         LA    R15,INCX(,R1)            INCREMENT TO GET ORDINAL
*                                         INDEX
         SPACE
         B     RETURN                   RETURN TO CALLER
         SPACE
BADRTN   EQU   *
         SR    R15,R15                  RETURN X'00' RETURN CODE
         SPACE
RETURN   EQU   *
         SPACE
         L     R14,12(R13)              LOAD CALLERS RETURN ADDRESS
         LM    RFLD,RBASE,28(R13)       RESTORE REGISTERS
         MVI   12(R13),X'FF'            SET FLAG
         BR    R14                      RETURN TO CALLER
         SPACE
********* EXECUTED INSTRUCTIONS **********
         SPACE
         SPACE
COMPEX   CLC   AVTEZERO(1,RFLD),AVTEZERO(RADDR) FIELD-ENTRY COMPARE
         EJECT
********* DSECTS *********
         SPACE 2
         TAVTD
         EJECT
         TTNTD
         END
