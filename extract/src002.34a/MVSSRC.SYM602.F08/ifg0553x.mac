         TITLE 'IFG0553X                      EOV DA INPUT - BUILD NEW D
               DEB MODULE'                                       Y02134
IFG0553X CSECT
***********************************************************************
*                                                                     *
*                                                                     *
*        VS2 RELEASE 02 DELETIONS                                     *
*                                                                     *
*        VS2 RELEASE 3 DELETIONS                               @ZM30032
*0000008553,743003,743050-743150,804000                        @Y30LSBS
*0000                                                          @ZA18313
*C742938-743820,811200,931200                                  @ZA19720
*                                                                     *
*        VS2 RELEASE 037 DELETIONS
*0000                                                          @ZA02204
*0000                                                          @ZA10274
*0000                                                          @ZA13569
*        VS2 RELEASE 037 CHANGES AND ADDITIONS
*0000                                                          @ZA15655
*D74296903-74297400,74299237,74299337                          @ZA16059
*D742961                                                       @ZA28613
*AXXXXXX                                                       @ZA28613
*C743355,743369,743376,743390,743411,743425                    @ZA28613
***********************************************************************
*                                                                     *
* MODULE NAME = IFG0553X (OS/VS2)                                     *
*                                                                     *
* DESCRIPTIVE NAME = EOV DA INPUT - BUILD NEW DEB MODULE              *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = RELEASE 2, LEVEL 0                                         *
*                                                                     *
* FUNCTION =                                                          *
*        ENTERED FROM IFG0554C (ALIAS NAME FOR IFG0194C) AFTER        *
*        MOUNTING NEW DIRECT ACCESS VOLUME AND READING DSCB(S) ON     *
*        THE NEW VOLUME.                                              *
*                                                                     *
*        1) THE DEB IS PAGE FREED IF IT HAD BEEN PAGE FIXED.          *
*        SAVE OLD DEB IN WORK AREA, AND DELETE IT FROM THE TCB-DEB    *
*        CHAIN.                                                       *
*                                                                     *
*        2A) IF RECORD FORMAT IS NOT VBS AND NOT OPEN FOR UPDATE -    *
*        VERIFY THAT THE EOV OCCURRED IN THE SAME TASK AS THE OPEN    *
*        BY CHECKING THAT THE TCB ADDRESS IN THE DEB IS THE SAME AS   *
*        THE CURRENT TCB ADDRESS, AND IF IT IS,REMOVE THE DEB FROM    *
*        THE DEBTABLE BY USING THE DEBCHK MACRO. IF RUNNING UNDER     *
*        ANOTHER TCB, SEARCH THE DEBTABLE FOR THE OLD DEB ADDRESS,    *
*        (IF IT IS NOT FOUND, CALL PROBLEM DETERMINATION FOR AN       *
*        437-0C ABEND) AND SAVE THE OFFSET INTO THE DEB TABLE OF THE  *
*        DEB ADDRESS IN THE DEB TABLE.                                *
*                                                                     *
*        2B) IF RECORD FORMAT IS VBS AND OPEN FOR UPDATE THE DEB      *
*        ADDRESS IS SAVED IN DCBIOBAD, AND THE DEB IS MADE            *
*        UN-EXCPABLE BY FLIPPING THE LOW ORDER BIT OF THE DEBDCBAD    *
*        FIELD IN THE DEB AFTER POINTING DEBDCBAD TO THE USER DCB.    *
         EJECT
*        3) GET CORE FOR AND BUILD NEW DEB. MERGE IN FIELDS FROM THE  *
*        DSCB AND THE OLD DEB IN THE WORK AREA. CALCULATE THE BEGINN- *
*        ING AND ENDING ADDRES AND THE NUMBER OF TRACKS FOR EACH      *
*        EXTENT AND STORE IN THE NEW DEB.                             *
*                                                                     *
*        4) VERIFY THAT THE EOV OCCURRED IN THE SAME TASK AS THE OPEN *
*        BY CHECKING THAT THE TCB ADDRESS IN THE DEB IS THE SAME AS   *
*        THE CURRENT TCB ADDRESS.                                     *
*                                                                     *
*        4A) IF THE TCB ADDRESSES ARE EQUAL, CHAIN IT TO THE TCB DEB  *
*        CHAIN OF THE CURRENT TCB. ADD THE DEB TO THE DEBTABLE BY     *
*        USING THE DEBCHK MACRO.                                      *
*                                                                     *
*        4B) IF THE TCB ADDRESSES ARE NOT EQUAL, AND IF THE OLD       *
*        DEB WAS NOT SAVED (UNDER 2B ABOVE), CHAIN THE DEB TO         *
*        THE DEB CHAIN OF THE TCB THE DCB WAS OPENED UNDER.           *
*        MODIFY THE OLD DEB'S DEB TABLE ENTRY TO POINT TO THE NEW     *
*        DEB.                                                         *
*                                                                     *
*        4C) IF THE TCB ADDRESSES ARE NOT EQUAL, AND IF THE OLD DEB   *
*        WAS SAVED (UNDER 2B ABOVE), CHAIN THE DEB TO THE CURRENT TCB *
*        DEB CHAIN (NOT THE ONE THE DCB WAS OPENED UNDER), ADD THE    *
*        DEB TO THE DEB TABLE USING THE DEBCHK-ADD MACRO, UNCHAIN THE *
*        DEB FROM THE CURRENT TCB'S DEB CHAIN, AND CHAIN THE DEB TO   *
*        THE TCB DEB CHAIN OF THE TCB THE DCB WAS OPENED UNDER.       *
*                                                                     *
*        5) UPDATE DEBVOLSQ AND DEBVOLNM                              *
*                                                                     *
*        6) GIVE CONTROL NEXT TO IFG0553Z.                            *
         EJECT
* NOTES =                                                             *
*        1) IF THE DEB IS NOT CHAINED OFF THE CURRENT TCB'S DEB CHAIN,*
*        THE DEBCHK-DELETE, DEBCHK-ADD LOGIC IS AVOIDED BECAUSE       *
*        DEBCHK-ADD REQUIRES THE DEB TO BE CHAINED OFF THE CURRENT    *
*        TCB'S DEB CHAIN.                                             *
*                                                                     *
*        2) THE OLD DEB IS SAVED IN DCBIOBAD IF DCBRECFM IS VBS AND   *
*        THE DCB IS OPENED FOR UPDATE AND A SPANNED RECORD WAS BEING  *
*        READ WHEN EOV OCCURRED. ONCE EOV IS COMPLETE AND THE         *
*        COMPLETED RECORD IS PASSED TO THE USER, HE MAY UPDATE AND    *
*        PUTX IT. THE FIRST SEGMENT OF THE RECORD ON THE PREVIOUS     *
*        VOLUME MUST BE REWRITTEN. A SPECIAL REPOSITIONING CALL OF    *
*        FEOV IS INVOKED WHICH REESTABLISHES THE OLD DEB AND FREES    *
*        THE THEN CURRENT DEB.                                        *
*                                                                     *
*        3) A DIRECTED FREEMAIN/GETMAIN IS USED TO FREE THE OLD DEB & *
*        OBTAIN CORE FOR THE NEW DEB SO THE CORE IS ATTACHED TO THE   *
*        TCB UNDER WHICH THE DEB WAS OPENED AND WILL BE FREED DURING  *
*        CLOSE. THIS TCB'S ADDRESS IS IN DEBTCBAD.                    *
*                                                                     *
*        4) UPON COMPLETION OF THE DEB, A LOOP THROUGH ITS EX-        *
*        TENT LIST IS MADE IF IT IS DISCOVERED THAT THE DATA          *
*        SET RESIDES ON MSS VIRTUAL DASD.  THE DEB EXTENTS ARE        *
*        USED TO BUILD A PARAMETER LIST THAT WILL BE USED BY          *
*        THE ICBACREL MACRO TO ACQUIRE DASD SPACE.                    *
*                                                                     *
*    DEPENDENCIES =                                                   *
*            CLASS ONE CHARACTER CODE.  THE EBCDIC CHARACTER CODE     *
*            WAS USED FOR ASSEMBLY.  THE MODULE MUST BE REASSEMBLED   *
*            IF A DIFFERENT CHARACTER SET IS USED FOR EXECUTION.      *
         EJECT
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    REGISTER CONVENTIONS =                                           *
*            R2 POINTS TO DCB                                         *
*            R4 POINTS TO EOV WORK AREA                               *
*            R5 POINTS TO THE RESIDENT ROUTINE                        *
*            R6 POINTS TO THE WTG TABLE                               *
*            R8 POINTS TO THE CURRENT WTG TABLE ENTRY                 *
*            R9 POINTS TO THE DD ENTRY IN THE TIOT                    *
*            R10 POINTS TO THE UCB                                    *
*            R11 POINTS TO USER'S DEB                                 *
*            R14 RETURN ADDRESS OR ENTRY INDICATOR                    *
*            DCB,DEB,IOB,AND JFCB IN THE EOV WORK AREA                *
*                                                                     *
*    PATCH LABEL = SEE THIRD FROM LAST LABEL BEFORE ORG STATEMENT AT  *
*                  END OF LISTING.                                    *
*                                                                     *
* MODULE TYPE = CONTROL (OPEN, CLOSE, EOV DATA MANAGEMENT)            *
*                                                                     *
*    PROCESSOR = ASSEMBLER XF                                         *
*                                                                     *
*    MODULE SIZE = SEE EXTERNAL SYMBOL DICTIONARY OR LOC FIELD ON     *
*                  ORG STATEMENT AT END OF LISTING                    *
*                                                                     *
*    ATTRIBUTES = REENTRANT, REFRESHABLE,READ-ONLY, ENABLED,          *
*                  PRIVILEGED, SUPERVISOR STATE, DATA MANAGEMENT KEY, *
*                  LINK PACK AREA RESIDENT/PAGEABLE                   *
*                                                                     *
* ENTRY POINT = IFG0553X FROM:                                        *
*               IFG0554C - MOUNT VERIFY                               *
*                                                                     *
*    PURPOSE = SEE FUNCTION                                           *
*                                                                     *
*    LINKAGE = REGISTERS AS DEFINED IN REGISTER CONVENTIONS AND       *
*              CONTROL BLOCKS IN WORK AREA.                           *
*                                                                     *
* INPUT = REGISTERS AND WORK AREA                                     *
*         REGISTER 2 POINTS TO COPIED DCB                             *
*         REGISTER 4 POINTS TO EOV WORKAREA                           *
*         FORMAT 1 DSCB IN DXDSCB IN EOV WORKAREA                     *
*         FORMAT 3, IF PRESENT, POINTED TO BY DSCCORE                 *
*         DEB POINTING TO COPIED DCB                                  *
*                                                                     *
* OUTPUT = NEW DEB ON THE TCB-DEB CHAIN AND IN THE DEBTABLE           *
*          DEB POINTS TO COPIED DCB                                   *
*          REGISTER 2 POINTING TO COPIED DCB                          *
*          REGISTER 4 POINTING TO EOV WORKAREA                        *
         EJECT
* EXIT-NORMAL = IFG0553Z DA INPUT FINAL EXIT MODULE                   *
*                                                                     *
* EXIT-ERROR = IFG0550P PROBLEM DETERMINATION IF THE OLD DEB WAS NOT  *
*              IN THE DEBTABLE.                                       *
*              INTERNAL ABEND CODE 199 CAUSING A 437-0C SYSTEM ABEND  *
*              IS PASSED TO IFG0550P.                                 *
*                                                                     *
*              INTERNAL ABEND CODE 111 CAUSES A 737-34 SYSTEM  @Y30LSBS
*              ABEND WHEN THE ICBACREL MACRO DETECTS AN ERROR. @Y30LSBS
*                                                                     *
*              DMABCOND PCK IF PAGE FREE ERROR                   YM5929
*                                                                     *
* EXTERNAL REFERENCES = SEE BELOW                                     *
*                                                                     *
*    ROUTINES = IFG019RA                                              *
*                                                                     *
*               IEAVPSIB VIA CVTVPSIB TO PAGE FREE DEB           YM5929
*               R0 = 0, NO ECB ADDRESS                           YM5929
*               R1 = X'20', DEB PREFIX ADDRESS, START OF PGFREE  YM5929
*               R2 = ADDR OF LAST BYTE OF DEB + 1, END OF FREE   YM5929
*               R4 = TCB ADDRESS FROM DEBTCBAD                   YM5929
*                                                                     *
*    DATA AREAS =                                                     *
*        EOV WORKAREA                                                 *
*                                                                     *
*    CONTROL BLOCK =                                                  *
*        DEB                                                          *
*        CURRENT TCB AND/OR TCB UPON WHICH DEB IS CHAINED             *
*        DCB                                                          *
*        ACCESS METHOD IOB                                            *
*        CVT                                                          *
*        DEB TABLE                                                    *
*        JSCB                                                         *
*                                                                     *
* TABLES = NONE                                                       *
*                                                                     *
* MACROS =                                                            *
*        MODESET                                                      *
*        SETLOCK                                                      *
*        DEBCHK                                                       *
*        DMABCOND                                                     *
*        FREEMAIN                                                     *
*        GETMAIN                                                      *
*        IECRES-GET/FREE                                              *
*        IECRES-LOAD                                                  *
*        IECRES-LOCJFCB                                               *
*        XCTLTABL                                                     *
*        IECDSECS                                                     *
*        IECEQU                                                       *
*        ICBACREL                                                     *
*                                                                     *
* CHANGE ACTIVITY =                                                   *
*        SEE 'CHANGES/DELETIONS' SECTION JUST AFTER CSECT CARD        *
*                                                                     *
***********************************************************************
         EJECT
ERR199   EQU   199                      ABEND CODE
         BALR  RBASE,0                  ESTABLISH ADDRESSABILITY
         USING FORCORE,RCORE
         USING WTG,RWTG                 BASE FOR WTG TABLE       Y02080
         USING TIOENTRY,RTIOT
         USING UCBOB,RUCB
         USING DEBBASIC,RDEB                                     YM1272
         USING IHADCB,RDCB
         USING CVT,RF
         USING *,RBASE
*
*
         OI    DXATALL,DXATFC           FORCE CLOSE ON ERROR     YM7099
         L     RDEB,DCBDEBAD            REESTABLISH DEB ADDRESS
         LA    RDEB,DEBBASIC            CLEAR HIGH BYTE          YM5929
         MVC   DXCCW10(K8),JFCBELNM     SAVE MEMBER NAME FOR BLDL IF,PO
         MVC   DXCCW11(K1),DSCFILTY     SAVE DSCB DSORG
         MVC   DXCCW11+K1(K1),JFCBIND1  SAVE PDS MEMBER IND IN THE JFCB
         MVC   DXCCW11+K2(K6),DSCEXTYP  SAVE EXTENT FROM F1 DSCB FOR UL
*                                       PROCESSING
*
*        SAVING OLD DEB IN WORK AREA
*
         MVC   DXCCW12+K4(K1),JFCBLTYP  SAVE LABL TYPE FOR UL
         L     RF,DEBAPPAD              AVT ADDRESS              YM5929
         SH    RDEB,COLC0036            SUBTRACT 36 (PREF + APP)
         TM    DEBSIOAB-DEBAVT(RF),X10  IS DEB FIXED             YM5929
         BZ    EDI09440                 BRANCH IF NOT            YM5929
         XR    RF,RF                    CLEAR FOR IC             YM5929
         IC    RF,DEBLNGTH-DEBAVT(RDEB) LENGTH OF DEB IN DWORDS  YM5929
         SLL   RF,K3                    LENGTH OF DEB IN BYTES   YM5929
         AR    RF,RDEB                  END OF DEB + 1           YM5929
         LR    R1,RDEB                  START OF DEB             YM5929
*        PGFREE R,A=(1),EA=(15)         PAGE FREE DEB            YM5929
         LA    R2,K0(,RF)               END ADDRESS OF PGFREE    YM5929
         L     RF,DXXPREFX              PREFIX ADDRESS           YM5929
         STM   RDEB,RET,IECREGSV-IECPREFX(RF) SAVE SETLOCK REGS  YM5929
         MODESET EXTKEY=SUPR            SETLOCK, PGFREE KEY      YM5929
EDI09430 SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                  YM5929*
               RELATED=(LOCAL,IFG0553X(EDI09435)) GET LOCAL LOCK YM5929
         LM    RDEB,RET,IECREGSV-IECPREFX(RF) RESTORE REGS       YM5929
         EJECT
         XR    R0,R0                    NO ECB                   YM5929
         ICM   R1,B'1000',=AL1(X20)     PGFREE BIT               YM5929
         LR    RDEB,RCORE               SAVE RCORE               YM5929
         L     RCORE,DEBTCBAD-DEB(,R1)  PGFREE BY TCB            YM5929
         L     RF,CVTPTR                CVT                      YM5929
         L     RF,CVTVPSIB-CVT(,RF)     IEAVPSIB ENTRY           YM5929
         BALR  RET,RF                   REGS 0-14 UNCHANGED      YM5929
         LTR   RF,RF                    ERROR IN PGFREE          YM5929
         BNZ   EDI10782                 BRANCH IF YES            YM5929
         LR    RCORE,RDEB               RESTORE RCORE            YM5929
         L     RDCB,DXPDCBAD            RESTORE DCB ADDRESS      YM5929
         L     RDEB,DCBDEBAD            RESTORE DEB ADDRESS      YM5929
         L     RF,DEBAPPAD              DEB AVT ADDR             YM5929
         NI    DEBSIOAB-DEBAVT(RF),K255-X10 ZERO DEB FIXED BIT   YM5929
         LA    RDEB,DEBBASIC            CLEAR HIGH BYTE          YM5929
         SH    RDEB,COLC0036            SUBTRACT 36 (PREF + APP) YM5929
         L     RF,DXXPREFX              PREFIX ADDRESS           YM5929
         STM   RDEB,RET,IECREGSV-IECPREFX(RF) SAVE SETLOCK REGS  YM5929
EDI09435 SETLOCK RELEASE,TYPE=LOCAL,                             YM5929*
               RELATED=(LOCAL,IFG0553X(EDI09430)) RELEASE LOCK   YM5929
         LM    RDEB,RET,IECREGSV-IECPREFX(RF) RESTORE REGS       YM5929
         MODESET EXTKEY=DATAMGT         RETURN TO D M KEY        YM5929
         EJECT
EDI09440 EQU   *                        SAVE DEB IN WORKAREA     YM5929
         MVC   JFCBDSNM(K74),DEBBASIC   SAVING PREF,BASIC,EXT    YM1272
         LA    RDEB,K36(,RDEB)          RESET DEB REGISTER
         MVC   JFCBDSNM+K68(K6),DXDEBUCB  PICK UP UCBADDR AND BB
         MVC   JFCBDSNM+K23(K5),DXCCW7  SAVE DSCB COUNT
         MVC   JFCBDSNM+K21(K2),ZEROI   INSURE BB OF ZERO
*
*                                       SUBROUTINE IDS IN SAVE AREA
*
         SR    R1,R1                    ZEROS IN RF
         IC    R1,DEBNMEXT              PICK UP NUMBER OF EXTENTS
         SLL   R1,K4                    MULTIPLY BY 16
         AR    R1,RDEB                  ADD DEB ADDRESS
         LA    R1,K32(,R1)              ADD THIRTY TWO
         SR    R7,R7                    ZEROS IN R7
         IC    R7,DEBNMSUB              PICK UP NUMBER OF SUBROUTINES
         SLL   R7,K1                    MULTIPLY BY 2
         SR    RF,RF                    CLEAR WORK REGISTER
         IC    RF,DEBAMLNG              LEN FOR MEMBER NAME,VOL  YM1272
         AR    R7,RF                    SEQUENCE NUM AND NUM OF VOLUMES
         EX    R7,EDI10500              SAVING VOLSQ,VOLNM,SUBRTINE
         L     RD,DEBTCBAD              TCB FROM WHICH TO        Y02082
*                                       UNCHAIN THE DEB          Y02082
         BAL   RET,EDI10750             UNCHAIN DEB FROM TCB     Y02082
         EJECT
         TM    K12(RDEB),K4             IS THIS UPDATE MODE
         BZ    EDI09500                 NO,FREE DEB
         TM    K12(RDEB),DEBOPOUT-DEBOPUPD  TEST FURTHER FOR UPDATE
         BNZ   EDI09500                 BRANCH IF NOT UPDATE
*
         TM    DCBMACRF,DCBMEXCP        IS THIS AN EXCP DCB-     A37815
         BO    EDI09500                 ..BR IF YES- NO IOB ADDR A37815
*        SPAN RECORD TEST ONLY IF NOT CHAINED SCHEDULING         YM1194
         TM    DCBCIND2,DCBC2CHN        CHAINED SCHEDULING TEST  YM1194
         BO    EDI09500                 BRANCH IF YES            YM1194
         L     R8,DCBIOBA               LOAD ADDR OF IOB PREFIX  S21940
         MODESET KEYADDR=DXUKEY,WORKREG=1 KEY OF IOB             YM1134
         L     R8,K0(R8)                LOAD ADDR OF IOB TO BE
*                                       TESTED
         TM    K0(R8),K4                IS THIS A SPAN RECORD
         BZ    EDI09500                 NO,FREE DEB
         EJECT
         MODESET EXTKEY=DATAMGT         RETURN TO O/C/E KEY      Y02082
         STCM  RDEB,B'0111',DCBIOBAD+K1 OLD DEB ADDR IN DCBIOBAD YM3909
*
*        SAVE OLD DEB AND INVALIDATE IT TO PREVENT IT'S BEING
*        USED FOR AN EXCP BY FLIPPING THE LOW ORDER BIT OF DEBDCBAD
*
         XI    DXUDCBAD+K3,K1           FLIP LAST BIT            YM3909
         MVC   DEBDCBAD+K1(L'DEBDCBAD-K1),DXUDCBAD+K1 POINT DEB  Y02082*
                                        TO USER DCB              Y02082
         XI    DXUDCBAD+K3,K1           FLIP LAST BIT            YM3909
         L     R1,DXDEBXAD              PT TO DEB EXTENSION      YM1272
         NI    DEBXFLG1-DEBXTN(R1),ALLBITS-DEBXCDCB DEB PT USER  YM1272
         MVI   DXCCW6+K4,CHARFF         INDICATE DEBCHK ADD      YM2133
         OI    DCBIOBAD,DCBIODEB        TURN ON SAVE DEB
*                                       INDICATOR
         L     RF,DXXPREFX              GET PREFIX               Y02080
         STM   R0,RF,IECREGSV-IECPREFX(RF)  SAVE REGS            Y02080
         MODESET  EXTKEY=ZERO           SUPERVISOR KEY           Y02080
EDI09450 SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND, GET LOCAL LOCK   Y02080*
               RELATED=(LOCAL,IFG0553X(EDI09650))                Y02080
         MODESET  EXTKEY=DATAMGT        DATA MANAGEMENT KEY      Y02080
         LM    R0,RF,IECREGSV-IECPREFX(RF)  RESTORE REGS         Y02080
         LR    RA,RF                    PUT PREFIX ADDR IN RA    YM3909
*                                       FOR SUBSEQUENT LM        YM3909
         LA    R1,K1                    LOAD REGISTER FOR COMPARE
         CH    R1,DXNOUNIT              IS THERE ONLY ONE DEVICE
         BNE   EDI09600                 NO,MORE THAN ONE DEVICE
         OI    DCBIOBAD,DCBIOONE        TURN ON FLAG IN DCBIOBAD
         B     EDI09600                 BRANCH TO COMPARE LNGTH
*                                       OF DEB
         EJECT
*
*        DELETE DEB FROM DEB TABLE
*
EDI09500 EQU   *                        DEBCHK IF DEB ON CURRENT TCB
*                                                                     *
         MODESET EXTKEY=DATAMGT         RETURN TO O/C/E KEY      YM1134
         L     R1,DEBTCBAD              TCB ADDRESS              YM2133
         CLM   R1,B'0111',DXTCBADR+K1   IS DEB ON CURRENT TCB    YM2133
         BNE   EDI09550                 NO - BYPASS DEBCHK DLTE  YM2133
         L     R1,DXPDCBAD              POINT TO COPIED DCB      Y02082
         DEBCHK (R1),TYPE=DELETE        DELETE OLD DEB           Y01021
         L     RF,DXXPREFX              GET PREFIX               Y02080
         STM   R0,RF,IECREGSV-IECPREFX(RF)  SAVE REGS            Y02080
         MODESET  EXTKEY=ZERO           SUPERVISOR KEY           Y02080
EDI09525 SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND, GET LOCAL LOCK   Y02080*
               RELATED=(LOCAL,IFG0553X(EDI09650))                Y02080
         MODESET  EXTKEY=DATAMGT        DATA MANAGEMENT KEY      Y02080
         LM    R0,RF,IECREGSV-IECPREFX(RF)  RESTORE REGS         Y02080
         B     EDI09580                 BYPASS DEBTABLE SEARCH   YM2133
         EJECT
*                                                                YM2133
*        SEARCH DEBTABLE FOR OLD DEB ADDRESS AND INVALIDATE      YM2133
*        IT BY FLIPPING LOW ORDER BIT OF DEB ADDRESS IN DEB TABLE
*                                                                YM2133
EDI09550 EQU   *                        SAVE DEB TABLE OFFSET    YM2133
         USING TCB,R1                   R1 CONTAINS DEB TCB ADDR YM2133
         L     RC,TCBJSCB               ADDR OF JOB STEP JSCB    YM2133
         DROP  R1                                                YM2133
         L     R1,DCBDEBAD              GET ADDRESS OF DEB       Y02082
         LA    R1,0(,R1)                CLEAR HIGH ORDER BYTE    Y02082
         BCTR  R1,R0                    POINT TO                 YM2133
         BCTR  R1,R0                    DEBTBLOF FLD IN DEB PFX  YM2133
         LH    R1,K0(R1)                GET TABLE OFFSET         Y02080
         SLL   R1,K2                    MPY BY ENTRY LENGTH      YM2133
         ST    R1,DXCCW6+K4             SAVE DEB TABLE OFFSET    Y02080
         L     RF,DXXPREFX              GET PREFIX               Y02080
         STM   R0,RF,IECREGSV-IECPREFX(RF)  SAVE REGS            Y02080
         MODESET  EXTKEY=ZERO           SUPERVISOR KEY           Y02080
EDI09555 SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                  Y02080X
               RELATED=(LOCAL,IFG0553X(EDI09565,EDI09650))       Y02080
         MODESET  EXTKEY=DATAMGT        DATA MANAGEMENT KEY      Y02080
         LM    R0,RF,IECREGSV-IECPREFX(RF)  RESTORE REGS         Y02080
         EJECT
EDI09560 EQU   *                        DEBTABLE SEARCH          YM2133
         USING IEZJSCB,RC               ADDRESSABILITY FOR JSCB  YM2133
         L     R8,JSCBDBTB              DEB TABLE ADDRESS        YM2133
         LA    RF,K0(R1,R8)             POINT TO ENTRY           YM2133
         CLM   RDEB,B'0111',K1(RF)      CORRECT ENTRY            Y02082
         BE    EDI09570                 YES - CONTINUE           YM2133
         L     RF,DXXPREFX              GET PREFIX
         STM   R0,RF,IECREGSV-IECPREFX(RF) SAVE REGS             Y02080
         MODESET  EXTKEY=ZERO           KEY 0                    Y02080
EDI09565 SETLOCK RELEASE,TYPE=LOCAL,                             Y02080X
               RELATED=(LOCAL,IFG0553X(EDI09555))                Y02080
         MODESET  EXTKEY=DATAMGT        DATA MANAGEMENT KEY      Y02080
         LM    R0,RF,IECREGSV-IECPREFX(RF)  RESTORE REGS         Y02080
*
*        REREAD JFCB TO REFRESH WORKAREA OVERLAID BY DEB         YM3116
*
         L     RTIOT,DXTIOTAD           GET TIOT ENTRY ADDR      YM3116
         LA    RF,TIOEJFCB              GET JFCB ADDRESS ADDRESS YM3116
         IECRES LOCJFCB,(RF)            LOCATE JFCB ADDRESS      YM3116
         MVC   DXJBF(JFCBLGTH),INFMJFCB-INFMJFCB(RF) MOVE JFCB   YM3116
*
         LA    RWTGC,DXXENTRY           SET RWTGC FOR RES RTN    YM2133
         LA    RWTG,DXXAREA             POINT TO EOV WTG         YM2133
         DMABCOND ERR199,LOAD0P         LOAD ERROR CODE          YM2133
         EJECT
EDI09570 EQU   *                        CONTINUE                 YM2133
         MODESET EXTKEY=ZERO            KEY OF DEB TABLE         Y02082
         OI    K3(RF),K1                INVALIDATE OLD ENTRY     YM2133
         MODESET EXTKEY=DATAMGT         RETURN TO O/C/E KEY      Y02082
EDI09580 EQU   *                        CONT AFTER DEBTABLE SRCH YM2133
         SR    RF,RF                                             YM0856
         LR    R1,RDEB
         SH    R1,COLC0036
         IC    RF,DEB+K32-DEB(,R1)      PUT DEB LENGTH IN DOUBLE WORD
         SLL   RF,K3                    MULTIPLY BY 8
         LR    R0,RF                    GET LENGTH OF DEB        Y02080
         L     RF,DXXPREFX              PREFIX ADDR              Y02080
         STM   R0,RET,IECREGSV-IECPREFX(RF) SAVE REGS            Y02080
         LR    RA,RF                    SAVE PREFIX ADDR         Y02080
         MODESET EXTKEY=SUPR            FREEMAIN KEY             Y02080
         L     R7,DXASCBAD              ASCB ADDR FOR FREEMAIN   Y02080
         L     RCORE,DEBTCBAD-DEB(R1)   TCB ADDR FOR FREEMAIN    Y02080
         LA    RCORE,K0(,RCORE)         CLEAR HIGH BYTE          Y02080
         FREEMAIN RU,LV=(0),A=(1),SP=230,KEY=5,BRANCH=YES        Y02080
         MODESET EXTKEY=DATAMGT         DATA MANAGEMENT KEY      Y02080
         LM    RBASE,R7,IECREGSV-IECPREFX+RBASE*K4(RA) GET 3,4,7 Y02080
         OI    DXATEOV,DXATDFRE         SHOW DEB CORE FREED      Y02144
         EJECT
*                                                                Y02144
*        COMPUTING LENGTH OF NEW DEB
*
EDI09600 EQU   *                        BUILD NEW DEB
         SR    RET,RET                  ZEROS IN RD
         IC    RET,DSCNOEXT             PICK UP NUMBER OF EXT IN DSCB
         LTR   RET,RET                   ANY EXTENTS           @ZA02204
         BNZ   EDI09625                  YES, BRANCH           @ZA02204
         LA    RET,K1                    SET NO EXTENTS TO ONE @ZA02204
         TM    DCBMACRF,DCBMEXCP         EXCP DCB              @ZA02204
         BO    EDI09625                  YES, BRANCH           @ZA02204
         OI    DCBCIND1,DCBCNEVB         SET VOL FULL          @ZA02204
EDI09625 EQU   *                                               @ZA02204
         STC   RET,JFCBDSNM+K52         SAVING NUMBER OF EXT
         SLL   RET,K4                   MULTIPLY BY 16
         AR    RET,R7                   ADD VOLSEQ,VOLNM,SUBRTINES
*
*        GET CORE FOR NEW DEB
*
         LA    R0,K69(K0,RET)           ADD LENGTH OF APPENDAGE  Y02080
*                                       + BASIC DEB              Y02080
         ST    R0,IECREGSV-IECPREFX+RET*K4(,RA) SAVE LENGTH OF   YM3909
*                                       GETMAIN WHERE RET WILL   YM3909
*                                       BE RESTORED              YM3909
         L     R7,DXASCBAD              ASCB ADDR FOR GETMAIN    Y02080
         L     RCORE,JFCBDSNM+(DEBTCBAD-DEB) TCB ADD FOR GETMAIN Y02080
         LA    RCORE,K0(,RCORE)         CLEAR HIGH BYTE          Y02080
         MODESET EXTKEY=SUPR            GETMAIN KEY              Y02080
         GETMAIN RU,LV=(0),SP=230,KEY=5,BRANCH=YES GET NEW DEB   Y02080
         EJECT
         MODESET EXTKEY=SUPR            SETLOCK KEY              Y02080
EDI09650 SETLOCK RELEASE,TYPE=LOCAL,    RELEASE LOCAL LOCK       Y02080*
               RELATED=(LOCAL,IFG0553X(EDI09525,EDI09555,EDI09450))
         LM    R2,RET,IECREGSV-IECPREFX+R2*K4(RA) GET ALL REGS   Y02080
         MODESET EXTKEY=DATAMGT         RETURN TO DATA MGT. KEY  Y02080
         OI    DXATEOV,DXATDNEW         SHOW NEW DEB CORE GOTTEN Y02144
         EJECT
*                                                                Y02144
*        BUILDING NEW DEB
*
*        MERGE OLD/NEW DEB AND UPDATING OF BASIC PORTION
*
         LR    RDEB,R1                  UPDATE DEB REGISTER
         MVC   DEBBASIC(K74),JFCBDSNM   MOVE PREF,BASIC,EXT PART YM1272
*
*        COMPUTING DEB LENGTH IN DOUBLE WORD
*
         LA    RDEB,K32(K0,RDEB)        ADD 32 IN DEB REGISTER
         LR    R0,RET                   SAVE NUMBER OF OBTAINED BYTES
         LA    RET,K7(,RET)             ADD K7
         SRL   RET,K3                   DIVIDING BY K8
         STC   RET,0(,RDEB)             LENGTH IN DOUBLE WORDS TO DEB
         LA    RDEB,K4(,RDEB)           RESET DEB REGISTER TO POINT TO
         ST    R1,DEBAPPAD              ADDRESS OF APP POINTERS TO NEW
         NI    DEBOFLGS,K255-DEBOFEOF   SET EOF INDICATOR OFF    Y02080
         TM    DSCDSIND,UCBMOUNT        IS LAST VOLIND ON IN DSCB
         BZ    EDI09700                 NO BYPASS SET OF EOF IN
*                                       NEW DEB
         OI    DEBOFLGS,DEBOFEOF        SET EOF IN DEBOFLGS
EDI09700 EQU   *                        CONT UPDATING NEW DEB
         MVI   DEBEXSCL,DCBOEOF         ESTABLISH LEN OF DEVICE  YM1272
*                                       DEPENDENT SECTION
         ST    RDEB,JFCINTVL            STORE NEW DEB ADDRESS
         SR    R0,R7
         AR    R1,R0                    ADD NEW DEB ADDRESS
         BCTR  R1,K0                    ADD 1 TO LENGTH OF SUBROUTINE
         EX    R7,EDI10600              MOVE VOLSEQ,VOLNUM,IDS
         EJECT
*
*        MERGE DSCB EXTENTS/NEW DEB
*
*        COMPUTING # OF TRACKS
*
*        CONVERT ROUTINE MBBCCHHR TO TTR
*
         LR    R7,RCORE                 SET RG AS CORE REGISTER
         ST    R7,DXWORK1               SAVE FORMAT 1 POINTER    Y02134
         LA    R7,K56+K1(,R7)           POINT TO START OF EXTENT ENTRY
         LA    R8,DEBBASND              PT TO DA SECT            YM1272
         USING DEBDASD,R8               BASE FOR DA SECTION      YM1272
         SR    RC,RC                    CLEAR REGISTER
         ST    RC,DXCCW5                SET -M- OF SEARCH TO ZERO
EDI09800 TM    DSCBEXTY-DXDSCB(R7),HEX40 USER LABEL EXTENT       Y02134
         BO    EDI10400                 IF UL EXTENT,BR TO SET INDIC
         MVC   DEBDVMOD(K6),JFCBDSNM+K68                         YM1272
         MVI   DEBDVMOD,X40+X10         INHIBIT WRITE COMMANDS & YM1272
*                                       PERMIT SEEK HH COMMANDS
         TM    JFCBDSNM+K48,DEBOPIO     INOUT OR OUTIN
         BO    EDI09900                 YES, BRANCH
         TM    JFCBDSNM+K48,DEBOPRBK    IS DEBOPATB FLD INPUT OR UPDATE
         BO    EDI10000                 NO, BRANCH
         TM    JFCBDSNM+K48,DEBOPUPD    IS DEBOPATB FIELD = UPDATE
         BZ    EDI10000                 NO, BRANCH
EDI09900 EQU   *                        INOUT OR OUTIN
         MVI   DEBDVMOD,DEBOPRRD        PERMIT SEEK HH COMM      YM1272
EDI10000 CLI   DSCBEXTY-DXDSCB(R7),X'81' IS THIS CYLINDER ALLOC  Y02134
         BE    EDI10100                 YES,FILE MASK IS ALREADY SET
         OI    DEBDVMOD,DEBOFDCB        NO,INHIBIT ALL SEEK CMNDSYM1272
EDI10100 EQU   *                        FILE MASK SETTING NOW COMPLETE
         MVC   DEBSTRCC(K8),DSCBLLMT-DXDSCB(R7) LOWR+UPPR        YM1272
         EJECT
*
*        SETTING MBBCCHHR
*
*        FOR BEGINNING OF EXTENT
*
         ST    RDCB,DXCCW7
         STM   RTIOT,RD,DXCCW7+K4
         L     RF,CVTPTR                ADDR OF COMMU VECTOR TABLE
         USING CVT,RF                   CVT ADDRESSABILITY       Y02080
         L     RF,CVTPRLTV              ENTRY POINT OF CONVERT ROUTINE
         LA    RDCB,DXCCW5              LOAD MBBCCHHR ADDRESS
         LA    R1,DXDEB                 LOAD DUMMY DEB ADDRESS
         MVC   DXCCW5+K1(K2),JFCBDSNM+K72  UPDATE BB
         MVC   DXCCW5+K3(K4),DSCBLLMT-DXDSCB(R7) LOWR LIMIT CCHH Y02134
         MVI   DXCCW5+K7,K0             SET R=0
         BALR  RET,RF                   MBBCCHHR TO TTR CONVERT ROUTINE
*
*        FOR END OF EXTENT
*
         ST    R0,DXCCW4                SAVE BEGINNING OF EXTENT TTR0
         MVC   DXCCW5+K3(K4),DSCBULMT-DXDSCB(R7) UPPR LIMIT CCHH Y02134
         L     RF,CVTPTR                ADDR OF COMMU VECTOR TABLE
         L     RF,CVTPRLTV              LOAD ENTRY POINT OF CONVERT ROU
         BALR  RET,RF                   MBBCCHHR TO TTR CONVERT ROUTINE
         L     RDCB,DXCCW7              RESTORE ADDRESS OF USER'S DCB
         LM    RTIOT,RD,DXCCW7+K4
         LA    RC,K1(,RC)
         EJECT
*
*        COMPUTING # OF TRACKS
*
         S     R0,DXCCW4                SUBTRACT BEGINNING TTR0 FROM EN
         SRL   R0,K16                   RIGHT JUSTIFY TO REMOVE RECORD
         LR    R1,R0                    PICK UP NUMBER OF TRACKS MINUS
         LA    R1,K1(,R1)               ADD 1 TO NUMBER OF TRACKS
         STH   R1,DEBNMTRK              STORE # TRKS IN EXTENT   YM1272
         NC    DEBSTRCC(K8),DEBSTRCC     ANY EXTENTS           @ZA02204
         BNZ   EDI10150                  YES, BRANCH           @ZA02204
         MVC   DEBSTRCC(K4),FOXES        SET INVALID EXTENT    @ZA02204
EDI10150 EQU   *                                               @ZA02204
         SR    R1,R1                    ZEROS IN RF
         IC    R1,DEBNMEXT              NUMBER EXTNTS IN NEW DEB
         CR    R1,RC                    IS LAST EXTENT
         BE    EDI10700                 YES
         LA    R8,K16(,R8)              ADD 16
         DROP  R8                                                YM1272
EDI10200 LA    R7,K10(,R7)              ADD 10
         LA    R1,K3                    IF NO UL, 3 EXTENTS IN F1
         CLI   DXCCW12+K3,CSWUNITX      CK IF WAS UL EXTENT
         BNE   EDI10300                 NO, BRANCH
         BCTR  R1,K0                    UL EXTNT, ONLY 2 EXTNTS IN F1
EDI10300 EQU   *                        UL17
         CR    R1,RC                    CK IF LAST EXTNT FROM F1 IN DEB
         BNE   EDI09800                 NO, MERGE NEXT EXTENT
*                                                                Y02134
         L     R1,DXWORK1               GET PTR TO DSCB          Y02134
         L     R7,CORECH(,R1)           LOAD POINTER TO F3       Y02134
         LA    R1,L'JFCBDSNM(,R7)       BUMP PASSED KEY          Y02134
         ST    R1,DXWORK1               SAVE F3 PTR              Y02134
*                                       CCHHR OF FORMAT 3 FROM FORMAT1
         MVC   DSCBFMID+K44-DXDSCB(K91,R7),DSCBFMID+K45-DXDSCB(R7)
*                                       CONCATENATE THE EXTENTS  Y02134
         B     EDI09800                 GO TO SET UP ENTENTS IN THE NEW
*
EDI10400 EQU   *                        UL EXTENT
         MVI   DXCCW12+K3,CSWUNITX      SET UL EXTENT INDICATOR
         B     EDI10200                 BR TO GET NEXT EXTENT
         SPACE 1
EDI10500 EQU   *                        USED IN EX INSTRUCTION
         MVC   JFCBDSNM+K74(K0),K0(R1)
EDI10600 EQU   *                        USED IN EX INSTRUCTION
         MVC   K0(K0,R1),JFCBDSNM+K74
         EJECT
*
*        INCLUDE NEW DEB IN THE CHAINING
*
EDI10700 L     R1,DEBTCBAD              ADDR OF THE TCB FOR THIS TASK
         LA    RDEB,K0(,RDEB)           CLEAR HI-ORDER BYTE      Y02082
         STCM  RDEB,B'0111',DCBDEBAD+K1 PUT DEBAD IN COPY DCB    Y02082
         L     RET,DXUDCBAD             ADDR USER DCB            Y02082
         MODESET KEYADDR=DXUKEY,WORKREG=13 KEY USER DCB          YM5305
         DROP  RDCB                                              Y02082
         USING IHADCB,RET               USER DCB BASE            Y02082
         STCM  RDEB,B'0111',DCBDEBAD+K1 PUT DEBAD IN USER DCB    Y02082
         DROP  RET                                               Y02082
         USING IHADCB,RDCB              REESTABLISH COPY BASE    Y02082
         MODESET EXTKEY=DATAMGT         BACK TO EOV KEY          Y02082
         CLM   R1,B'0111',DXTCBADR      DOES DEB POINT TO        Y02082
*                                       CURRENT TCB              Y02082
         BE    EDI10702                 BRANCH IF YES - CHAIN    Y02082
*                                       DEB TO CURRENT TCB       Y02082
         CLI   DXCCW6+K4,CHARFF         WAS OLD DEB SAVED        Y02082
         BNE   EDI10702                 BRANCH IF NO TO CHAIN    Y02082
*                                       DEB TO DEBTCBAD TCB      Y02082
         L     R1,DXTCBADR              CHAIN DEB TO CURRENT TCB Y02082
*                                       SO DEBCHK-ADD WORKS      Y02082
         EJECT
EDI10702 EQU   *                        CHAIN DEB TO R1'S TCB    Y02082
         BAL   RET,EDI10780             GO TO DEB CHAIN SUBRTN.  Y02082
         L     R1,DEBTCBAD              TCB WHICH DEB SHOULD BE  Y02082
*                                       CHAINED TO               Y02082
         L     RET,DXDEBXAD             GET DEB EXTENSION ADDR   Y02134
         USING DEBXTN,RET                                        Y02134
         MVC   DEBXDBPR,JFCINTVL        MOVE DEB ADDR TO DEBX    Y02134
         DROP  RET                                               Y02134
         LA    RWTGC,DXXENTRY           CURRENT MODULE NAME
         LA    RWTG,DXXAREA             NEXT MODULE NAME
         MVC   JFCBLTYP,DXCCW12+K4      RESTORE LABEL TYPE FOR UL
         MVC   JFCBELNM(K8),DXCCW10     RESTORE MEMBER FOR BLDL
         MVC   DSCFILTY(K1),DXCCW11     RESTORE DSCB DSORG
         MVC   JFCBIND1,DXCCW11+K1      RESTORE PDS MEM IND IN THE JFCB
         MVC   DSCEXTYP(K6),DXCCW11+K2
*        CHECK FOR DEB CHAINED TO CURRENT TCB                    YM2133
*                                                                YM2133
         L     RF,CVTADDR               CVT ADDRESS              YM2133
         L     RF,CVTTCBP-CVT(RF)       ADDR TCB PTRS            Y02080
         L     RF,K4(RF)                ADDRESS OF CURRENT TCB   YM2133
         LA    RF,K0(RF)                ZERO HIGH ORDER BYTE     YM2133
         LA    R1,K0(R1)                ZERO HIGH ORDER BYTE     YM2133
*                                                                YM2133
*        THE EOV WAS ISSUED FROM A TASK DIFFERENT THAN THE ONE   YM2133
*        IN WHICH THE DEB WAS CREATED IF THE TCB ADDRESS IN THE  YM2133
*        DEB IS NOT THE SAME AS THE CURRENT TCB ADDRESS.         YM2133
*                                                                YM2133
         CLR   R1,RF                    IS DEB ON THIS TCB       YM2133
         BE    EDI10705                 YES - ISSUE DEBCHK       YM2133
         CLI   DXCCW6+K4,CHARFF         SPAN RCD IN UPDATE MODE  YM2133
         BNE   EDI10710                 NO - BYPASS DEBCHK ADD   YM2133
*                                                                YM2133
*        EOV IN SAME TASK AS OPEN, OR IN DIFFERENT TASK BUT      YM2133
*        OLD DEB SAVED - ISSUE DEBCHK ADD                        Y02082
*                                                                YM2133
         EJECT
EDI10705 EQU   *                        INITIALIZE DEB PREFIX    YM2133
         L     RD,DEBTCBAD              GET DEB'S TCB ADDR       Y02082
         MVC   DEBTCBAD+K1(K3),DXTCBADR+K1 POINT DEB TO CURRENT  Y02082
*                                       TCB FOR DEBCHK           Y02082
         LA    RET,K3                   NEGATIVE OFFSET OF       Y01021
*                                       DEBAMTYP                 Y01021
         SR    RDEB,RET                 ADDRESS AMTYPE           Y01021
         IC    RET,K0(R0,RDEB)          GET ACCESS METHOD TYPE   Y01021
         XC    K0(K3,RDEB),K0(RDEB)     ZERO DEBAMTYP & DEBTBLOF Y01021
         L     R1,DXPDCBAD              POINT TO PROTECTED DCB   Y02082
         DEBCHK (R1),TYPE=ADD,AM=((RET))     ADD DEB TO DEBTABLE Y01021
         LR    RDEB,R1                  RESTORE DEB ADDRESS      Y01021
         STCM  RD,B'0111',DEBTCBAD+K1   REPLACE DEB'S TCB ADDR   Y02082
         CLC   DEBTCBAD+K1(K3),DXTCBADR+K1 IS DEB ON CURRENT TCB Y02082
         BE    EDI10720                 BRANCH IF YES            Y02082
*
*        DEB IS CHAINED ON WRONG TCB BECAUSE OLD DEB WAS SAVED   Y02082
*        TO SUPPORT VBS UPDATE - DEB NOW IN DEB TABLE SO UNCHAIN Y02082
*        FROM CURRENT TCB AND CHAIN TO CORRECT (DEBTCBAD) TCB    Y02082
*
         L     RD,DXTCBADR              CURRENT TCB              Y02082
         BAL   RET,EDI10750             UNCHAIN FROM CURRENT TCB Y02082
         L     R1,DEBTCBAD              CORRECT TCB              Y02082
         BAL   RET,EDI10780             CHAIN TO CORRECT TCB     Y02082
         B     EDI10720                 GO TO NEXT MODULE        YM2133
         EJECT                                                   YM2133
*                                                                YM2133
*        THE FOLLOWING CODE IS EXECUTED IN LIEU OF DEBCHK        YM2133
*        WHENEVER THE DEB IS CHAINED TO A TCB DIFFERENT THAN     YM2133
*        THE CURRENT ONE.  THIS IS ACCOMPLISHED BY REPLACING     YM2133
*        THE EXISTING DEBTABLE ENTRY WITH THE NEW DEB ADDRESS.   YM2133
*                                                                YM2133
EDI10710 EQU   *                        OBTAIN LOCK FOR DEBTABLE YM2133
         L     RF,DXXPREFX              GET PREFIX               Y02080
         STM   R0,RF,IECREGSV-IECPREFX(RF)  SAVE REGS            Y02080
         MODESET  EXTKEY=ZERO           KEY 0                    Y02080
EDI10712 SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                  Y02080X
               RELATED=(LOCAL,IFG0553X(EDI10714))                Y02080
         MODESET  EXTKEY=DATAMGT        DATA MANAGEMENT KEY      Y02080
         LM    R0,RF,IECREGSV-IECPREFX(RF)  RESTORE REGS         Y02080
         L     RF,DXTCBADR              GET CURRENT TCB ADDR     Y02080
         USING TCB,RF                   ESTABLISH TCB ADDR       Y02080
         L     RF,TCBJSCB               GET ADDR OF JSCB         Y02080
         DROP  RF                                                Y02080
         USING IEZJSCB,RF               ESTABLISH JSCB ADDR      Y02080
         L     R1,JSCBDBTB              GET ADDR OF DEB TBL      Y02080
         DROP  RF                                                Y02080
         L     RF,DXCCW6+K4             GET SAVED OFFSET         Y02080
         LA    RDEB,K0(RDEB)            ZERO HIGH ORDER BYTE     YM2133
         MODESET EXTKEY=ZERO            KEY OF DEB TABLE         Y02082
         ST    RDEB,K0(RF,R1)           PLACE NEW ADDR IN TABLE  Y02080
         EJECT
         L     RF,DXXPREFX              GET PREFIX               Y02080
         STM   R0,RF,IECREGSV-IECPREFX(RF)  SAVE REGS            Y02080
EDI10714 SETLOCK RELEASE,TYPE=LOCAL,                             Y02080X
               RELATED=(LOCAL,IFG0553X(EDI10712))                Y02080
         MODESET EXTKEY=DATAMGT         RET EOV KEY              Y02082
         LM    R0,RF,IECREGSV-IECPREFX(RF)  RESTORE REGS         Y02080
         EJECT 1                                               @Y30LSBS
*                                                              @Y30LSBS
*        CHECK THE UCB FOR AN MSS SUBSYTEM VIRTUAL DASD AND    @Y30LSBS
*        CREATE A PARAMETER LIST FROM THE DEB EXTENTS TO       @ZA19720
*        ACQUIRE STAGING SPACE UP TO THE LAST WRITTEN RECORD   @Y30LSBS
*        ALL SUCH EXTENTS ARE STAGED.                          @ZA19720
*                                                              @ZA19720
*        IF THE DATA SET HAS BEEN OPENED WITH THE INOUT OPTION,@ZA19720
*        IT IS POSSIBLE FOR THE USER TO READ TO EOF,TCLOSE     @ZA19720
*        AND THEN START WRITING. IF THE USER DOES THIS, WE WILL@ZA19720
*        CYLINDER FAULT FOR ALL CYLINDERS BEYOND EOF.          @ZA19720
*                                                              @ZA19720
EDI10720 EQU   *                        VIRTUAL DASD ROUTINE   @Y30LSBS
         LA    RC,DEBBASND              EXTENT ADDRESSABILITY  @ZA19720
         USING DEBDASD,RC                                      @ZA19720
         L     RUCB,DEBUCBAD            POINTER TO THE UCB     @ZA19720
         TM    UCBTBYT2,UCBRVDEV        IS IT VIRTUAL          @Y30LSBS
         BNO   EDI1074D                 NO, CONTINUE MAINLINE  @Y30LSBS
         CLC   DEBSTRCC,FOXES           YES,VALID EXTENT?      @ZA19720
         BE    EDI1074D                 NO, CONTINUE MAINLINE  @ZA19720
         DROP  RTIOT                                           @ZA19720
         LA    RTIOT,DXJBF              ESTABLISH ACQUIRE LIST @ZA19720
         USING ACQLST,RTIOT                                    @ZA19720
         XC    ACQLST(ACQPLN+8),ACQLST  ZERO OUT A WORK AREA   @ZA19720
*                                       PARM LIST + MBBCC SAVE @ZA19720
         MVI   ACQLST+3,ACQPLN          MOVE IN LIST LENGTH    @ZA19720
         MVC   ARVOL,UCBVOLI            MOVE IN THE VOLID      @ZA19720
         CLC   DSCLSTAR(K5),ZEROI       IS TTRLL = 0           @Y30LSBS
         MVI   MCCSAVE,X7F              MAKE M = X'7F00'       @ZA19720
         BE    EDI10730                 BYPASS TTR CNVT        @ZA19720
         MVI   MCCSAVE,K0               MAKE M = X'00XX'       @ZA28613
*                                                              @Y30LSBS
*        DETERMINE WHERE AND IN WHAT EXTENT LAST RECORD WAS    @Y30LSBS
*        WRITTEN                                               @Y30LSBS
*                                                              @Y30LSBS
EDI10727 EQU   *                                               @Y30LSBS
         L     RF,DXXPREFX              GET PREFIX             @Y30LSBS
         STM   R0,RF,IECREGSV-IECPREFX(RF) SAVE ALL REGS       @Y30LSBS
         SR    R0,R0                    ZERO                   @Y30LSBS
         ICM   R0,B'1110',DSCLSTAR      GET THE TTR            @ZA19720
         LA    R1,R0(RB)                POINT TO THE DEB       @Y30LSBS
         LA    R2,MCCSAVE+1             MBBCCHHR SAVE AREA     @ZA19720
         L     RF,CVTADDR               POINT TO CVT           @Y30LSBS
         L     RF,CVTPCNVT-CVT(RF)      POINT TO TTR CNVT RTN  @Y30LSBS
         BALR  RET,RF                   GO TO CONVERT ROUTINE  @ZM30032
         L     RF,DXXPREFX              POINT TO PREFIX        @Y30LSBS
         LM    R0,RF,IECREGSV-IECPREFX(RF) RESTORE REGS        @Y30LSBS
*                                                              @Y30LSBS
*        M = X'7F00' - NOT LAST VOLUME OF DATA SET             @ZA19720
*                                                              @ZA19720
*        M = X'00XX' - THE EXTENT WHERE THE LAST RECORD WAS    @Y30LSBS
*                      WRITTEN FOR A PHYS. SEQ. DATA SET       @ZA19720
*                      'M' IS FOLLOWED BY THE BBCCHH. R IS NOT @ZA19720
*                      NEEDED.                                 @ZA19720
*                                                              @Y30LSBS
EDI10730 EQU   *                                               @Y30LSBS
         SR    RF,RF                    ZERO A REG             @Y30LSBS
         LR    RET,RF                   ZERO ANOTHER           @Y30LSBS
         IC    RET,DEBNMEXT             GET NUMBER OF EXTENTS  @Y30LSBS
*                                                              @Y30LSBS
*        CREATE THE PARAMETER LIST FOR THE ACQUIRE             @Y30LSBS
*                                                              @Y30LSBS
EDI10734 EQU   *                                               @ZA19720
         MVC   AREXT(2),DEBSTRCC        MOVE IN THE LO CC      @ZA19720
         CH    RF,JFCTRKBL              EXTENT OF LAST PHYS REC@ZA28613
         BNE   EDI10745                 NO, GET THE HI CC      @ZM30032
         LH    R1,JFCRECFM              GET THE CC OF LAST REC @ZA28613
         CLC   JFCBLKSI(2),DEBENDHH     LAST TRACK OF DS ON CYL@ZA28613
         BL    EDI10736                 NO, JUST GET UP TO CYL @ZM30032
         CH    R1,DEBENDCC              LAST CYL OF EXTENT     @ZA28613
         BE    EDI10738                 YES,GO SEE IF ANOTHER  @ZA19720
*                                       DEB EXTENT             @ZA19720
         LA    R1,1(,R1)                INSURE EOF MARK GOTTEN @ZA28613
EDI10736 EQU   *                                               @Y30LSBS
         STH   R1,AREXT+2               CC IS THE LAST STAGED  @ZA28613
         LA    RF,K1(RF)                NUMBER OF EXTENTS      @Y30LSBS
         B     EDI10749                 GO SAVE NUM OF EXTENTS @ZA19720
EDI10738 EQU   *  EOF MAY NOT BE ON CYL CONTAING LAST REC      @ZA19720
         STH   R1,AREXT+2               ENDING CYL OF THIS EXT @ZA19720
         LA    RF,1(RF)                 COUNT THIS EXTENT      @ZA19720
         BCTR  RET,0                    IS THERE ANOTHER EXTENT@ZA19720
         BZ    EDI10749                 NO,GO ISSUE ACQUIRE    @ZA19720
         LA    RTIOT,L'AREXT(RTIOT)     YES,POINT TO NEXT      @ZA19720
         LA    RC,DEBEXTLN              EXTENT IN DEB AND ACQ  @ZA19720
         MVC   AREXT(2),DEBSTRCC        EOF MAY BE ON THE FIRST@ZA19720
         MVC   AREXT+2(2),DEBSTRCC      TRACK OF THIS CYLINDER @ZA19720
         LA    RF,1(RF)                 ACCOUNT FOR THIS EXTENT@ZA19720
         B     EDI10749                 GO ISSUE ACQUIRE       @ZA19720
EDI10745 EQU   *                                               @Y30LSBS
         MVC   AREXT+2(2),DEBENDCC      GET HI CC              @ZA19720
EDI10746 EQU   *                                               @Y30LSBS
         LA    RTIOT,L'AREXT(RTIOT)     POINT TO NEXT LIST ENT @ZA19720
         LA    RF,K1(RF)                INCREMENT COUNTER      @Y30LSBS
EDI10747 EQU   *                                               @Y30LSBS
         LA    RC,DEBEXTLN              POINT TO NEXT DEB EXT  @ZA19720
         BCT   RET,EDI10734             RETURN FOR MORE EXTENTS@ZA19720
*                                                              @Y30LSBS
*        ISSUE ICBACREL                                        @ZA19720
*                                                              @Y30LSBS
EDI10749 EQU   *                                               @Y30LSBS
         LA    RTIOT,DXJBF                                     @ZA19720
         STC   RF,ARNMEXTS              ST NUMBER OF EXTENTS   @ZA19720
         LR    R1,RTIOT                                        @ZA19720
         DROP  RTIOT                                           @ZA19720
         USING ACQLST,R1                                       @ZA19720
         MVI   ACQLST+K4,K2                                    @ZA28613
         ICBACREL TYPE=ACQ,MF=(E,ACQLST) ACQUIRE THE SPACE     @ZM30032
         DROP  R1                                              @ZA19720
         LTR   RF,RF                    ANY ERRORS             @Y30LSBS
         BZ    EDI1074D                 NO                     @ZA19720
*        ACQUIRE FAILED - ABEND                                @Y30LSFY
ERR111   EQU   111                      IDMS FAILURE CODE      @Y30LSFY
         LR    RB,R1                    PASS PARM LIST PTR     @Y30LSFY
         LA    RWTGC,DXXENTRY           SET RWTGC FOR RES RTN  @Y30LSFY
         LA    RWTG,DXXAREA             POINT TO EOV WTG       @Y30LSFY
         DMABCOND ERR111,LOAD0P         XCTL TO PROB DET       @Y30LSFY
         DROP  RC                                              @ZA19720
         USING TIOENTRY,RTIOT                                  @ZA19720
         EJECT 1                                               @Y30LSBS
*
*        REREAD JFCB TO REFRESH WORKAREA OVERLAID BY DEB         YM3116
*
EDI1074D EQU   *                        RETURN TO RES ROUTINE  @Y30LSBS
         L     RTIOT,DXTIOTAD           GET TIOT ENTRY ADDR      YM3116
         LA    RET,TIOEJFCB             GET JFCB ADDRESS ADDRESS YM3116
         IECRES LOCJFCB,(RET)           LOCATE JFCB ADDRESS      YM3116
         MVC   DXJBF(JFCBLGTH),INFMJFCB-INFMJFCB(RET) MOVE JFCB  YM3116
*
*        SETUP NEW DEBVOLSQ AND DEBVOLNM                         YM5340
*        DEBVOLNM CHANGES IF CONCATENATION OF LIKE ATTRIBUTES    YM5340
*
         XR    RET,RET                  ZERO FOR IC              YM5340
         IC    RET,DEBNMEXT             NUMBER OF 16-BYTE EXTNTS YM5340
         SLL   RET,K4                   LENGTH OF EXTENTS        YM5340
         LA    RET,DEBBASND-DEBBASIC(RET,RDEB) RET POINTS TO     YM5340
*                                       ACCESS METHOD SECTION    YM5340
         USING DEBACSMD,RET                                      YM5340
         MVC   DEBVOLSQ,DXVOLSEQ        UPDATE DEBVOLSQ          YM5340
         MVC   DEBVOLNM+K1(K1),JFCBNVOL UPDATE DEBVOLNM          YM5340
         DROP  RET                                               YM5340
         LA    RET,K0                   SET RETURN CODE
         LA    RF,LOA5553Z
         IECRES LOAD,MODID=(RF),BRCODE=(RET),BRANCH=QUEUED       Y02080
         EJECT
*
*        SUBROUTINE TO UNCHAIN DEB FROM TCB                      Y02082
*        ENTERED IN KEY 5 - EXIT IN KEY 5                        Y02082
*              RDEB POINTS TO DEB                                Y02082
*              RD POINTS TO TCB                                  Y02082
*              RET IS RETURN ADDRESS                             Y02082
*        REGS 0-14 WILL BE SAVED IN THE WORKAREA PREFIX AND      Y02082
*        WILL BE RETURNED                                        Y02082
*        RF WILL BE DESTROYED                                    Y02082
*
EDI10750 EQU   *                        UNCHAIN DEB              Y02082
         L     RF,WTGPREFX              PT TO PREFIX             Y02082
         USING IECPREFX,RF                                       Y02082
         STM   R0,RET,IECREGSV          SAVE REGS THRU LOCK      Y02082
         MODESET EXTKEY=SUPR            SUPERVISOR KEY           Y02082
*                                       OBTAIN LOCAL LOCK        Y02082
EDI10755 SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                  Y02082*
               RELATED=(LOCAL,IFG0553X(EDI10775))                Y02082
         LM    R0,RET,IECREGSV          RESTORE REGS             Y02082
EDI10760 EQU   *                        LOAD REGISTERS           Y02082
         LR    RC,RDEB                  PRIME WITH DEB ADDR      Y02082
         LA    R1,K4(,RD)               TCB ADDRESS + 4          Y02082
EDI10765 EQU   *                        CHECK FOR CORRECT DEB    YM1482
         CLM   RC,B'0111',DEBDEBAD+K1-DEBBASIC(R1) EQUAL?        YM1482
         BE    EDI10770                 BRANCH, IF YES
         L     R1,DEBDEBAD-DEBBASIC(,R1) GET CORRECT DEB         YM1482
         B     EDI10765                 BRANCH TO TEST FOR CORRECT DEB
EDI10770 EQU   *                        CORRECT DEB DELETE IT    Y02082
         L     R8,DEBDEBAD              PTR TO NEXT DEB          Y02082
         ICM   R8,B'1000',DEBDEBAD-DEBBASIC(R1) PRIME HI BYTE    YM1482
         ICM   RC,B'1000',DEBDEBAD-DEBBASIC(R1)                  YM1482
         CS    RC,R8,DEBDEBAD-DEBBASIC(R1) DECHAIN DEB           YM1482
         BNZ   EDI10760                 BR IF NOT SUCCESSFUL     Y02082
         OI    DXATEOV,DXATDCHN         SHOW DEB DECHAINED       Y02144
         EJECT
EDI10775 SETLOCK RELEASE,TYPE=LOCAL,                             Y02082*
               RELATED=(LOCAL,IFG0553X(EDI10755))                Y02082
         LM    R0,RET,IECREGSV          RESTORE REGS             Y02082
         MODESET EXTKEY=DATAMGT         DATA MANAGEMENT KEY      Y02082
         BR    RET                      RETURN TO CALLER         Y02082
         DROP  RF                                                Y02082
         SPACE 2
*
*        SUBROUTINE TO CHAIN DEB TO TCB                          Y02082
*        ENTERED IN KEY 5, EXIT IN KEY 5                         Y02082
*              RDEB POINTS TO DEB                                Y02082
*              R1 POINTS TO TCB                                 Y02082
*              RET POINTS TO RETURN ADDRESS                      Y02082
*              RD WILL BE DESTROYED IN THIS SUBROUTINE           Y02082
*
EDI10780 EQU   *                        CHAIN DEB TO TCB         Y02082
         USING TCB,R1
         LA    RDEB,K0(,RDEB)           CLEAR HIGH BYTE          Y02082
         L     RD,TCBDEB                PT TO FIRST DEB          Y02080
         MVC   DEBDEBAD+K1(K3),TCBDEB+K1 DEB POINTER FROM TCB    Y02082
         MODESET EXTKEY=SUPR            TCB MODIFIED             Y02082
         CS    RD,RDEB,TCBDEB           CHAIN NEW DEB            Y02082
         MODESET EXTKEY=DATAMGT         EOV KEY                  Y02082
         BNZ   EDI10780                 BR IF NOT SUCCESSFUL     Y02082
         NI    DXATEOV,X'FF'-DXATDCHN   SHOW DEB CHAINED         Y02144
         BR    RET                      RETURN TO CALLER
         SPACE 2
EDI10782 DMABCOND PCK,PGFREE            PGFREE ERROR             YM5929
         EJECT
*
*                   CONSTANTS
*
         SPACE 1
         DS    0F
COLC0036 DC    H'36'                    CONSTANT 36
FOXES    DC    X'FFFFFFFF'              INVALID EXTENT         @Y30LSBS
ZEROI    DC    X'0000000000'            ZEROS                  @Y30LSBS
*                                                              @Y30LSBS
*        SOME MSS  EQUATES                                     @Y30LSBS
*                                                              @Y30LSBS
ACQPLN   EQU   96                       PARM LIST LENGTH       @Y30LSBS
ACQOP    EQU   X'02'                    ACQUIRE OP CODE        @Y30LSBS
X7F      EQU   X'7F'                    A VERY HIGH 'M' VALUE  @Y30LSBS
         EJECT
         XCTLTABL ID=(LOA5553Z,3Z,LOAD0P,0P),                    Y02134X
               SVC=055,BRT=YES,LENGTH=                           Y02080
         IECDSECS CVT,TCB,TIOT,DCB,UCB,MAIN,WTG,PREFX,IEZDEB,    YM1272*
               JSCB,PSA,EXPAND=YES                               Y02134
DEBEXTLN EQU    DEBNMTRK+L'DEBNMTRK                            @ZA19720
         IECEQU IEZDEB=YES                                       Y02134
ACQLST   DSECT                                                 @Y30LSFY
         ICBACREL TYPE=ACQ,MF=L         LIST FORM OF ACQUIRE   @Y30LSBS
MCCSAVE  DS    CL9                                             @ZA19720
         END
