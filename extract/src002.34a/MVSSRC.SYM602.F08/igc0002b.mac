         TITLE 'IGC0002B                      OPEN TYPE=J - INITIAL MODU
               ULE, MOVE JFCB'
IGC0002B CSECT
***********************************************************************
*                                                                     *
*        VS 2 RELEASE 030 DELETIONS/CHANGES                           *
*0000276070-276140,284600-285000,664548-666018,784300-784600   @ZA00118
*814500,828001-828002,834800,835300,836000                     @ZA00118
*0000                                                          @ZA08282
*0000                                                          @ZA09633
*0000826350,829365                                             @ZA09969
*0000664816-664828                                             @ZA10275
*0000664799,664805,664808                                      @ZA10558
*0000666454                                                    @ZA15088
*                                                                     *
*        VS 2 RELEASE 020 DELETIONS/CHANGES                           *
*0000333904                                                     ZA01282
*0000                                                          @ZA08282
*0000                                                          @ZA09633
*0000826350,829365                                             @ZA09969
*0000664816-664828                                             @ZA10275
*0000664799,664805,664808                                      @ZA10558
*                                                                     *
* MODULE NAME = IGC0002B (OS/VS2)                                     *
*                                                                     *
* DESCRIPTIVE NAME = OPEN TYPE = J INITIAL MODULE, MOVE JFCB          *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = RELEASE 2, LEVEL 0                                         *
*                                                                     *
* FUNCTION =                                                          *
*        1. SAVE REGISTERS 2-12 IN SVRB EXTENDED SAVE AREA, AND GET   *
*        MAIN STORAGE (VIA RESIDENT ROUTINE) FOR:                     *
*           A. WHERE-TO-GO TABLE.                                     *
*                                                                     *
*        2. OBTAIN COPIED PARAMETER LIST IN DATA MANAGEMENT KEY.      *
*                                                                     *
*        3. INITIALIZE EACH WHERE-TO-GO ENTRY EXCEPT FOR VTAM         *
*        REQUESTS.                                                    *
*                                                                     *
*        4. GET WORK AREA FOR A COPY OF EACH DCB/ACB; INITIALIZE IT,  *
*        AND COPY DCB/ACB.  IF DDNAME IS NOT IN TIOT, FREE WORK AREA  *
*        AFTER ISSUING THE WTO MESSAGE "IEC130I DDNAMEXX DD STATEMENT *
*        MISSING".                                                    *
*                                                                     *
*        5. MOVE THE JFCB FROM THE SCHEDULER WORK AREA INTO THE OPEN  *
*        WORK AREA. CHECK TO SEE IF THE TRACE ROUTINE HAS BEEN        *
*        REQUESTED.  IF IT HAS, THEN TURN ON THE TRACE ROUTINE        *
*        INDICATOR AT WTGPATHS+K1.                                    *
*                                                                     *
*        6. LOCATE X'07' ENTRY IN DCB EXIT LIST AND MOVE THE JFCB     *
*        INTO THE MAIN DCB WORK AREA.                                 *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES =                                                   *
*            CLASS ONE CHARACTER CODE.  THE EBCDIC CHARACTER CODE     *
*            WAS USED FOR ASSEMBLY.  THE MODULE MUST BE REASSEMBLED   *
*            IF A DIFFERENT CHARACTER SET IS USED FOR EXECUTION.      *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    REGISTER CONVENTIONS =                                           *
*            R2 POINTS TO DCB                                         *
*            R4 POINTS TO OPEN WORK AREA                              *
*            R5 POINTS TO THE RESIDENT ROUTINE                        *
*            R6 POINTS TO THE WTG TABLE                               *
*            R7 POINTS TO THE CURRENT PARAMETER LIST ENTRY            *
*            R8 POINTS TO THE CURRENT WTG TABLE ENTRY                 *
*            R9 POINTS TO THE DD ENTRY IN THE TIOT                    *
*            R10 POINTS TO THE UCB                                    *
*                                                                     *
*    PATCH LABEL = SEE THIRD LABEL BEFORE ORG STATEMENT AT END        *
*                  OF LISTING.                                        *
*                                                                     *
* MODULE TYPE = CONTROL (OPEN, CLOSE, EOV DATA MANAGEMENT)            *
*                                                                     *
*    PROCESSOR = ASSEMBLER XF                                         *
*                                                                     *
*    MODULE SIZE = SEE EXTERNAL SYMBOL DICTIONARY OR LOC FIELD ON     *
*                  ORG STATEMENT AT END OF LISTING                    *
*                                                                     *
*    ATTRIBUTES = REENTRANT, REFRESHABLE,READ-ONLY, ENABLED,          *
*                 PRIVILEGED, SUPERVISOR STATE, DATA MANAGEMENT KEY,  *
*                 LINK PACK AREA RESIDENT/PAGEABLE                    *
*                                                                     *
* ENTRY POINT = OPEN TYPE = J OR SVC 22                               *
*                                                                     *
*    PURPOSE = INITIALIZE WORK AREAS FOR OPEN PROCESSING WITH CALLER  *
*              SUPPLIED JFCB.                                         *
*                                                                     *
*    LINKAGE = REGISTER 1 POINTING TO VARIABLE PARAMETER LIST         *
*                                                                     *
* INPUT = REGISTER 1 POINTING TO THE PARAMETER LIST                   *
*                                                                     *
* OUTPUT = WORK AREAS AND REGISTERS INITIALIZED FOR OPEN PROCESSING   *
*                                                                     *
* EXIT-NORMAL = IFG0193A NORMAL OPEN PROCESSING                       *
*                                                                     *
* EXIT-ERROR = CALLER IF NO DCB CAN BE OPENED                         *
*                                                                     *
* EXTERNAL REFERENCES = SEE BELOW                                     *
*                                                                     *
*    ROUTINES = IFG0193A,IFG019RA.                                    *
*                                                                     *
*    DATA AREAS = SEE PARAMETERS OF IECDSECS MACRO.                   *
*                                                                     *
*    CONTROL BLOCK = SEE PARAMETERS OF IECDSECS MACRO.                *
*                                                                     *
* TABLES = SEE XCTLTABL MACRO AT END OF LISTING.                      *
*                                                                     *
* MACROS = IECDSECS,IECEQU,IECRES,WTO,ENQ,XCTLTABL.                   *
*                                                                     *
* CHANGE ACTIVITY = NEW RELEASE (LEVEL 0)                             *
*                                                                     *
***********************************************************************
         EJECT
*
         USING IHADCB,RDCB              DEFINE BASE TO USER'S DCB
         USING FORCORE,RCORE            DEFINE BASE TO MAIN WORK AREA
         USING TIOENTRY,RTIOT           DEFINE BASE TO TIOT DD ENTRY
*
         BALR  RBASE,R0                 ESTABLISH BASE REGISTER
         USING *,RBASE                  DEFINE BASE REGISTER
*
         LR    RF,R5                    POINTER TO SVRB          YM1363
         LR    RPAR,R1                  SAVE DCB PARAM LIST ADDR Y02080
         USING RBBASIC,RF                                        Y02080
*
***********************************************************************
*
*  GETMAIN THE WHERE-TO-GO TABLE
*
*                                                                Y02080
* SAVE REGISTERS 2-12 IN SVRB EXTENDED SAVE AREA                 Y02080
*                                                                Y02080
*                                                                Y02080
         IECRES GET,PREFIX=WTG,         GETMAIN FOR WTG TABLE    Y02080*
               STM=(2,12,RBEXSAVE),A=(RPAR)                      Y02080
*
*        REGISTER 0 CONTAINS RETURN CODE FROM SYSZTIOT ENQ       YM2869
*
         DROP  RF                                                Y02080
         LA    RWTG,DXDCBLST-DXDCBLST(,R1) WTG ADDR TO RWTG REG  A39979
         USING WTG,RWTG                 DEFINE BASE TO WTG TABLE A39979
         IECRES LOAD,MODNM=OPENJ,BRANCH=NO,PREFIX=WTGPREFX       Y02080*
                                        GIVE OPT TRACE A SHOT    Y02080
*
*        OBTAIN COPIED PARAMETER LIST IN DATA MANAGEMENT KEY     Y02082
*
         L     RPAR,WTGPREFX            WTG PREFIX ADDRESS       Y02082
         L     RC,IECRRPRM-IECPREFX(,RPAR) GET RRPLIST ADDRESS   Y02144
         MVI   RRFUNCTN-RRPLIST(RC),RRFOPENJ IND OPENJ FUNCTION  Y02144
         L     RPAR,IECUPRML-IECPREFX(,RPAR) COPY PARM LIST ADDR Y02082
*
*  INITIALIZE EACH WHERE-TO-GO TABLE ENTRY
*
         SR    RD,RD                    SET GO SWITCH OFF        A39979
         LR    RPARC,RPAR               ADDR FIRST ENT PARM LIST A39979
         LA    RWTGC,WTGENTRY           ADDR FIRST ENT WTG TABLE A39979
         USING WTGENTRY,RWTGC           BASE TO CURRENT WTG ENT  A39979
*
*        TEST RESULT OF SYSZTIOT ENQ                             YM2869
*              REGISTER 0 NONZERO INDICATES CALLER OF OPENJ      YM2869
*              OBTAINED SYSZTIOT RESOURCE EXCLUSIVELY.           YM2869
*        THIS SHOULD NEVER OCCUR AND WILL NOT BE TOLERATED.      YM2869
*
         LTR   R0,R0                    IS RETURN CODE 0         YM2869
         BNZ   OIN23250                 BRANCH IF NOT            YM2869
*
OIN20200 EQU   *                        PROCESS PARM LIST LOOP
         L     RDCB,PLISTDCB(,RPARC)    LOAD CURRENT DCB ADDR
*
*        MAKE SURE THIS DCB IS NOT PREVIOUSLY DUPLICATED IN      YM2869
*        THE PARAMETER LIST                                      YM2869
*
         DROP  RWTGC                                             YM2869
         LA    R1,WTGENTRY              FIRST DCB'S WTG ENTRY    YM2869
         USING WTGENTRY,R1                                       YM2869
OIN20220 EQU   *                        PROCESS EACH DCB         YM2869
         CR    R1,RWTGC                 AT CURRENT ENTRY YET     YM2869
         BE    OIN20260                 BR IF YES-NO DUPLICATE   YM2869
         L     RCORE,WTGCORE-K1         GET WORKAREA             YM2869
         LA    RCORE,K0(,RCORE)         CLEAR HIGH BYTE FOR LTR  YM2869
         LTR   RCORE,RCORE              IS WORKAREA PRESENT      YM2869
         BZ    OIN20240                 BR IF NO-GET NEXT DCB    YM2869
         CLM   RDCB,B'0111',DXUDCBAD+K1 IS CURRENT DCB BEING     YM2869
*                                       PROCESSED ALREADY        YM2869
         BE    OIN20400                 BR IF YES-DON'T PROCESS  YM2869
OIN20240 EQU   *                        GET NEXT DCB'S ENTRY     YM2869
         LA    R1,WTGENTRY+L'WTGENTRY   INCREMENT TO NEXT WTG    YM2869
         B     OIN20220                 CHECK NEXT ENTRY         YM2869
         DROP  R1                                                YM2869
         USING WTGENTRY,RWTGC                                    YM2869
OIN20260 EQU   *                        ON DUPLICATE             YM2869
*
         L     RA,CVTPTR                GET CVT ADDRESS          Y02082
         L     RA,CVTTCBP-CVT(,RA)      ADDR OF TCB POINTERS     Y02082
         L     RA,K4(,RA)               GET CURRENT TCB ADDR     Y02082
         USING TCB,RA                   PROVIDE ADDRESSABILITY   Y02082
         MODESET EXTKEY=RBT234,WORKREG=15 ASSUME USER KEY        Y02082
         TM    DCBOFLGS,DCBOFOPN+DCBOFIOF OPEN OR BUSY BITS ON   YM2869
         BNZ   OIN20400                 BR IF YES-GET NEXT DCB   Y02134
*                                                                Y02004
* DO NOT PROCESS VTAM REQUESTS                                   Y02004
*                                                                Y02004
         TM    DCBMACR,DCBMEXCP         TEST FOR EXCP            Y02004
         BO    OIN20300                 YES, CANNOT BE ACB       Y02004
         TM    DCBDSRG2,ACBDORGA        IS THIS AN ACB?          Y02004
         BZ    OIN20300                 BR IF NO                 Y02004
         USING IFGACB,RACB              ADDRESS ACB              Y02004
         CLC   ACBDDNM,=X'FF00000000000000' IS THIS A VTAM ACB?  Y02004
         BNE   OIN20300                 NO, OK TO OPEN           Y02004
         MVI   ACBERFLG,VSCACBCL        SET ACB ERROR FLAG       Y02004
         USING IHADCB,RDCB              RESTORE BASE FOR DCB     Y02004
         B     OIN20400                 GET NEXT DCB/ACB         Y02004
*        DETERMINE SIZE OF DCB/ACB FOR COPYING IT INTO WORKAREA  Y02134
OIN20300 EQU   *                        GET OPEN J WORK AREA
         MODESET EXTKEY=DATAMGT         DM KEY                   Y02082
         LA    R0,OPENSIZE              SIZE OF OPEN WORKAREA    Y02134
         IECRES GET,LV=(0),PREFIX=YES,STM=(2,14,WTGPREFX),       Y02134*
               ID=OJWA                                           Y02144
         LR    RCORE,R1                 ESTABLISH WORKAREA BASE  Y02134
         ST    RCORE,WTGCORE-K1         SAVE IN WTG TABLE ENTRY  Y02134
         L     RF,WTGPREFX              GET PREFIX POINTER      ZA01282
         MVC   DXATCOM3,IECRRPRM-IECPREFX(RF) SAVE RRPLIST PTR  ZA01282
*        INITIALIZE WORKAREA WITH CONTROL BLOCK POINTERS AND     Y02134
*        COPY DCB/ACB INTO WORKAREA                              Y02134
         IECRES INIT,DCBCOPY=TOWKAR,DEB=NO,STM=(3,14,WTGPREFX),  Y02134*
               PREFIX=WTGPREFX                                   Y02082
         CLI   DXWCOPYE,K0              WAS COPY/INIT OK         Y02082
         BE    OIN20325                 BRANCH IF YES            Y02082
         CLI   DXWCOPYE,K2              WAS DDNAME MISSING       Y02082
         BNE   OIN20350                 NO-SOME OTHER REASON     Y02082
*
***********************************************************************
*
*  WRITE  'IEC130I DDNAMEXX DD STATEMENT MISSING'  ERROR MESSAGE
*
OIN20310 EQU   *                        DDNAME MISSING FROM JCL
         MVC   DXLBL(OIN2500L),OIN2500K MOVE MSG TO WORKAREA     Y02134
         MVC   K12(L'DCBDDNAM,RCORE),DCBDDNAM MOVE DDNAME TO MSG Y02134
         LA    R1,DXLBL                 LOAD FOR WTO             Y02134
         WTO   MF=(E,(1))               WRITE MESSAGE TO PROGRAMMER
*
         B     OIN20350                 BR TO PROCESS NEXT DCB   Y02134
*
***********************************************************************
OIN20325 EQU   *                        ASYNCHRONOUS PROCESSING? Y02082
         TM    DCBOFLGS,DCBOPEN         CHECK FOR OPENED DCB
         BO    OIN20350                 BR IF YES                Y02082
         TM    DCBOFLGS,DCBOLOCK        IS DCB NOT-LOCKED BIT ON
         BZ    OIN20350                 BR IF NO                 Y02134
         TM    DCBOFLGS,DCBOBUSY        IS DCB BUSY BIT ON
         BO    OIN20600                 BR IF YES TO OPEN DCB    Y02134
*
OIN20350 EQU   *                        FREE WORKAREA            Y02134
         NI    DCBOFLGS,X'FF'-DCBOBUSY  TURN OFF BUSY BIT        Y02082
         IECRES INIT,DCBCOPY=FRWKAR,STM=(2,14,WTGPREFX)          Y02082
         XC    WTGENTRY,WTGENTRY        INVALIDATE THIS DCB      Y02134
OIN20400 EQU   *                        GET NEXT DCB IN PARM LIST
         MODESET EXTKEY=DATAMGT         DM KEY                   Y02082
         TM    PLISTOPT(RPARC),LASTNTRY  CHECK FOR LAST ENTRY
         LA    RPARC,K4(,RPARC)         INCR TO NEXT DCB IN PARM LIST
         LA    RWTGC,L'WTGENTRY(,RWTGC) ADVANCE WTG ENTRY        A39979
         BZ    OIN20200                 BR IF NOT LAST ENTRY     A39979
         B     OIN23000                 BR TO EXIT OR XCTL       A39979
*
***********************************************************************
*
*  DCB NEEDS TO BE OPENED.
*
OIN20600 EQU   *                        DCB PROCESSING LOOP
         L     R9,DXDSAB                FETCH DSAB ADDRESS       YM6510
         USING DSAB,R9                  DSAB ADDRESSABILITY      YM6510
         TM    DSABFLG4,DSABCKDS+DSABCKVL ARE DSAB CHKPT BITS ON YM6510
         BZ    OIN20700                 IF NOT, SKIP RESET TEST  YM6510
         TESTAUTH FCTN=1,KEY=YES,STATE=YES TEST CALLER STATE     YM6510
         LTR   RF,RF                    IS CALLER AUTHORIZED     YM6510
         BZ    OIN20700                 IF YES, SKIP RESET       YM6510
         MODESET EXTKEY=SCHED           DSAB KEY                 Y02083
         NI    DSABFLG4,ALLBITS-DSABCKDS-DSABCKVL RESET CHKPT FLGY02083
         MODESET EXTKEY=DATAMGT         BACK TO D/M KEY          Y02083
         DROP  R9                                                YM6510
         USING TIOENTRY,RTIOT           TIOT ADDRESSABILITY      YM6510
OIN20700 EQU   *                        DCB PROCESSING LOOP CONT YM6510
         MVC   WTGIDTTR-WTGENTRY(L'WTGIDTTR,RWTGC),OPENNEXT 193A Y02080
         XC    DXREGE,DXREGE            IND FIRST ENTRY TO 193A  Y02080
         XC    DXREG0,DXREG0            CLEAR DMABCOND INDR      Y02080
         L     RTIOT,DXTIOTAD           GET TIOT ENTRY ADDRESS   Y02134
         L     RET,DXTCBADR             GET TCB ADDRESS          Y02134
         L     RET,TCBTIO-TCB(RET)      LOAD TIOT ADDRESS        Y02134
*
         TM    DCBOFLGS,DCBOCON         CHECK FOR EOV CONCATENATION
         BZ    OIN20800                 BR IF NO TO CHK DDNAME   Y02082
         TM    DCBDSRG2,ACBDORGA        IS CONTROL BLOCK AN ACB  Y02082
         BZ    OIN20350                 BR NO, EOVC BIT CANNOT=1 Y02082
         LTR   RTIOT,RTIOT              TIOT ENTRY FOUND         Y02082
         BZ    OIN20350                 NO, BR TO FREE WORK AREA Y02082
         TM    TIOELINK,TIOESSDS        TEST IF SPOOLED INPUT    YM5126
         BZ    OIN20350                 BR NO, EOVC BIT CANNOT=1 Y02082
         CLI   TIOEDDNM,BLANK           BLANK DDNAME FOR CONCAT  Y02082
         BNE   OIN20350                 BR NO, ERROR             Y02082
*                                                                Y02082
         L     RF,WTGPREFX              GET PREFIX ADDR          Y02082
         LA    RF,IECREGSV-IECPREFX(RF) GET REG SAVE ADDR        Y02082
         LR    RC,RF                    SAVE REGSAVE POINTER     Y02082
         STM   RET,R3,IECREGSV-IECREGSV(RF) SAVE REGS            Y02082
*                                                                Y02082
         TESTAUTH STATE=YES,FCTN=1      TEST STATE, APF          Y02082
*                                                                Y02082
         LTR   RF,RF                    IS CALLER AUTHORIZED TO  Y02082
*                                       HAVE EOVC BIT = 1        Y02082
         LM    RET,R3,IECREGSV-IECREGSV(RC) RESTORE REGS         Y02082
         BZ    OIN21300                 IF YES, BR TO CONTINUE   Y02082
         B     OIN20350                 IF NO, GO FREE WORK AREA Y02082
*
OIN20800 EQU *                          CONTINUE
*
*
OIN21300 EQU   *                        CHECK FOR SPOOLED ACB
*
*        TEST FOR A NON-SUBSYSTEM ACB                            YM1363
*        - IF FOUND THE ACB WILL BE BYPASSED                     YM1363
*          WORKAREA WILL NOT BE GOTTEN AND                       YM1363
*          THE BUSY BIT WILL NOT BE TURNED ON                    YM1363
*
         TM    DCBMACR,DCBMEXCP         IS ACCESS METHOD EXCP
         BO    OIN21350                 YES, CANNOT BE AN ACB    YM3073
*
         TM    DCBDSORG+K1,ACBDORGA     IS CONTROL BLOCK AN ACB
         BZ    OIN21400                 NO, TAKE NORMAL DCB PATH
*
         TM    DCBMACR,ACBMJEP          IS THIS A SUBSYSTEM ACB  YM1363
         BO    OIN21400                 YES, VALID ACB
*
         TM    TIOELINK,TIOTSPOL        IS THIS A SPOOLED ACB
         BM    OIN21400                 YES, VALID ACB
*
         B     OIN20350                 BYPASS INVALID ACB, BUSY Y02134
*                                       BIT OFF - NO WORK AREA
*                                                                YM3073
OIN21350 EQU   *                        TEST FOR EXCP & SPOOL    YM3073
*                                                                YM3073
         TM    TIOELINK,TIOTSPOL        IS THIS A SPOOLED DCB    YM3073
         BNM   OIN21400                 NO, OPENJ EXCP DCB       YM3073
*                                                                YM3073
*****************************************************************YM3073
*                                                                YM3073
*   WRITE  'IEC132I DDNAMEXX, MACRF=E WAS SPECIFIED FOR          YM3073
*   A SYSIN OR SYSOUT DATA SET' ERROR MESSAGE                    YM3073
*                                                                YM3073
*****************************************************************YM3073
*                                                                YM3073
         LR    R1,RCORE                 MSG ADDR FOR WTO         YM3073
         MVC   0(OIN2500N,R1),OIN2500M  MOVE MSG TO WORKAREA     YM3073
         MVC   K12(L'DCBDDNAM,R1),DCBDDNAM MOVE DDNAME TO MSG    YM3073
         WTO   MF=(E,(1))               WRITE MSG TO PROGRAMMER  YM3073
         B     OIN20350                 BYPASS OPEN              YM3073
*
*
*  THIS DCB IS OPENABLE                                          Y02082
*  INITIALIZE CONTROL BLOCKS IN MAIN WORK AREA.
*
OIN21400 EQU   *                        INITIALIZE TO PROCESS OPEN
         LR    RF,RTIOT                 CALC TIOT DD ENTRY OFFSET FROM
         SR    RF,RET                   START OF TIOT
         STH   RF,DCBTIOT               STORE TIOT OFFSET IN DCB
         MVC   DCBMACRF,DCBMACR         MOVE MACRF
         OI    DCBOFLGS,DCBOBUSY        SET DCB BUSY BIT ON
         LR    RD,RCORE                 SET OPEN GO SWITCH ON    Y02080
*
         ST    RCORE,DCBDEBAD           SAVE CORE ADDR IN DCB DEB SLOT
         MVC   DCBIFLGS,DCBIFLG         MOVE IN IOS FLAGS
         IECRES INIT,DCBCOPY=FRWKAR,STM=(0,14,WTGPREFX) UPDATE   YM5702*
                                        THE USER'S DCB           YM5702
*
*        CONSTRUCT CONTROL BLOCKS TO READ JFCB
*
*        DEB, FIRST 36-BYTE
*
         L     RB,CVTPTR                LOAD ADDR OF CVT         Y02134
         L     R1,CVTSVDCB-CVT(,RB)     ADDRESS OF SVCLIB DCB    Y02080
         L     R1,DCBDEBAD-IHADCB(,R1)  ADDR OF TASK SCHEDULER DEB
         MVC   DXDEB(K48),K0(R1)        COPY TASK SCHEDULER DEB
         MVI   DXDEB+(DEBNMEXT-DEBBASIC),K1 SET NO. EXTENT TO 1 YA03003
         MVC   DXDEBAPP,CVTXAPG-CVT(RB) SET DUMMY APP VEC TBL    Y02080
         MVI   DXDEBMOD,K0              SET FILE MASK TO ZERO    YM6841
         XC    DXDEBECB+K1(K3),DXDEBECB+K1  ZERO PURGE ECB ADDR  M0032
         LA    RF,DXDCB                 STORE ADDR OF WORK DCB IN WORK
         ST    RF,DXDCBAD               DEB FOR EXCP VALIDITY CHECK
         ST    RF,IOBWGHT               STORE WORK DCB ADDR IN IOB
         MVI   DXDEBID,DEBIDENT         DEB ID
*
*        ECB, NEXT 4-BYTE
*
         MVI   DXECB,K32                POST JFCB MOVE
*
*        DCB, NEXT 8-BYTE
*
         LA    RF,DXDEB                 STORE ADDR OF WORK DEB IN WORK
         ST    RF,DXDCBDEB              DCB FOR EXCP VALIDITY CHECK
*
*        IOB, NEXT 32-BYTE
*
         MVI   IOBFLAG1,IOBUNREL        MAKE I/O REQUESTS UNRELATED
         LA    RF,DXECB                 STORE ADDR OF WORK ECB IN
         ST    RF,IOBECBPT              WORK IOB
         LA    RF,DXCCW1                STORE START CCW ADDR IN
         ST    RF,IOBSTART-K1           WORK IOB
*
         TM    DCBMACR,DCBMEXCP         IS ACCESS METHOD EXCP
         BO    OIN21450                 YES  NORMAL PROCESSING
*
         TM    DCBDSORG+K1,ACBDORGA     IS CONTROL BLOCK AN ACB
         BZ    OIN21450                 NO  NORMAL PROCESSING
*
         TM    TIOELINK,TIOTSPOL        IS THIS A SPOOLED ACB
         BZ    OIN21450                 NO  NORMAL PROCESSING
         USING IFGACB,RACB              DEFINE BASE FOR ACB
*
         L     RF,ACBUJFCB              LOAD ADDRESS OF JFCB     X02050
         LTR   RF,RF                    VALID ADDRESS
         BZ    OIN22400                 NO  POST JFCB ERROR
         LA    RC,OIN21447              BR                       Y02082
*  OBTAIN LOCAL LOCK TO LOCK OUT GET/FREEMAINS; ENSURE JFCB IS INY02082
*  USER KEY, AND DO MOVE IN KEY ZERO.                            Y02082
OIN21435 EQU   *                        COPY JFCB                Y02082
         LR    RET,RF                   SAVE USER JFCB ADDR      Y02082
         L     RF,WTGPREFX              GET WTG PREFIX ADDR      Y02082
         STM   R0,RET,IECREGSV-IECPREFX(RF) SAVE REGS            Y02082
         MODESET EXTKEY=ZERO            SETLOCK KEY              Y02082
OIN21440 EQU   *                        SETLOCK                  Y02082
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND, GET LOCK         Y02082*
               RELATED=(FREEMAIN,IGC0002B(OIN21445))             Y02082
         LM    R0,RET,IECREGSV-IECPREFX(RF) RESTORE REGS         Y02082
         MODESET KEYADDR=DXUKEY,WORKREG=11 ASSUME USER KEY       Y02082
         OC    K0(L'DXJBF,RET),K0(RET)  TOUCH USER'S JFCB        Y02082
         MODESET EXTKEY=ZERO            ASSUME KEY O             Y02082
         MVC   DXJBF,K0(RET)            MOVE USER JFCB           Y02082
OIN21445 EQU   *                        RELEASE SETLOCK          Y02082
         SETLOCK RELEASE,TYPE=LOCAL,    RELEASE LOCK             Y02082*
               RELATED=(FREEMAIN,IGC0002B(OIN21140))             Y02082
         LM    R0,RET,IECREGSV-IECPREFX(RF) RESTORE REGS         Y02082
         MODESET EXTKEY=DATAMGT         RESTORE DM KEY           Y02082
         TM    JFCBMASK+K6,JFCTRACE     IS TRACE ROUTINE DESIRED?
         BZR   RC                       NO, RETURN TO COMPLETE PROCESS
         OI    WTGPATHS+K1,WTGTRACE     YES, SET TRACE INDR ON
         BR    RC                       RETURN                   Y02082
OIN21447 EQU   *                        ERROR                    Y02082
         B     OIN22780                 BYPASS NORMAL PROCESSING
*
         USING IHADCB,RDCB              DEFINE BASE TO USER'S DCB
OIN21450 EQU   *                        COPY JFCB FROM USER
*
***********************************************************************
*
*  LOCATE AND MOVE THE JFCB FROM THE AREA POINTED TO BY THE DCB
*  EXIT LIST X'07' ENTRY TO THE DCB MAIN WORK AREA.
*
         TM    DCBMACRF,DCBMEXCP        CHECK FOR EXCP
         BNO   OIN22000                 BR IF NO
         TM    DCBMACRF,DCBMFOUN        CHECK FOR FOUNDATION ENTENSION
         BNO   OIN22400                 BR IF NO
*
OIN22000 EQU   *                        VALIDITY CHECK EXIT LIST
         CLC   DCBEXLST+K1(K3),OIN2570K  IS EXIT LIST ADDR 0 OR 1
         BNH   OIN22400                 BR IF NO EXIT LIST
         L     RF,DCBEXLST              PICK UP ADDR OF EXIT LIST
         MODESET KEYADDR=DXUKEY,WORKREG=1 USER KEY FOR EXITLIST  Y02082
*
OIN22200 EQU   *                        CHECK FOR OPEN J ENTRY
         CLI   0(RF),XLRDJFCB           CHECK FOR JFCB ADDR ENTRY
         BE    OIN22600                 BR IF FOUND
         CLI   0(RF),XLRDJFCB+LASTNTRY  CHECK FOR JFCB ADDR ENTRY
         BE    OIN22600                 BR IF FOUND
*
         TM    K0(RF),LASTNTRY          CHECK FOR LAST ENTRY
         LA    RF,K4(RF)                ADVANCE TO NEXT ENTRY
         BNO   OIN22200                 BR IF MORE ENTRIES       Y02080
*
OIN22400 EQU   *                        SET OFF JFCB ERROR
         MODESET EXTKEY=DATAMGT         DM KEY                   Y02082
         MVI   DXECB,ECBCOD7F-ECBNOERR  'POST' ECB WITH 'ERROR' CODE
         B     OIN22780                 BR TO ABEND IN NEXT MODULE
*
OIN22600 EQU   *                        CONTINUE
         L     RF,0(RF)                 GET JFCB ADDR FROM EXIT LIST
         MODESET EXTKEY=DATAMGT         RET TO OPEN KEY FOR SWAP Y02082
         BAL   RC,OIN21435              MOVE USER JFCB           Y02082
         EJECT
*
***********************************************************************
*
*        IN ORDER TO AVOID ALLOWING THE DATA SET
*        TO BE SCRATCHED WHILE IT IS OPEN
*        ENQ ON DATA SET NAME BEING OPENED IF 1) - 4) ARE TRUE   YM5388
*        1) SYSTEM JFCB EXISTS                                   YM5388
*        2) DATA SET NAME DIFFERENT THAN SYSTEM JFCB'S           YM5388
*        3) DIRECT ACCESS DEVICE                                 YM5388
*        4) NOT ACB OPEN                                         YM5388
*
***********************************************************************
*                                                                Y02082
         L     RF,DXUCBADR              GET UCB ADDRESS          Y02082
         LTR   RF,RF                    IS THERE ONE             Y02082
         BZ    OIN22700                 BR IF NO                 Y02082
         TM    UCBTBYT3-UCBOB(RF),UCB3DACC  IS IT DIRECT ACCESS  Y02082
         BZ    OIN22700                 BR IF NO                 Y02082
         TM    DCBMACRF,DCBMEXCP        CHECK FOR EXCP           Y02082
         BO    OIN22605                 BRANCH IF YES            Y02082
         TM    DCBDSRG2,ACBDORGA        IS IT ACB                Y02082
         BO    OIN22700                 BRANCH IF YES            Y02082
OIN22605 EQU   *                        ENQ DSNAME               Y02082
         XR    RB,RB                    ZERO FOR ICM             YM5388
         ICM   RB,B'0111',TIOEJFCB      GET SYSTEM JFCB ADDRESS  YM5388
         BZ    OIN22780                 BRANCH IF ZERO - SKIP    YM5388X
                                        JFCB PROCESSING          YM5388
         LA    RB,TIOEJFCB              LOAD ADDR OF JFCB ADDR   YM5388
         IECRES LOCJFCB,(RB)            LOCATE SYSTEM JFCB       YM5388
         CLC   JFCBDSNM,JFCBDSNM-INFMJFCB(RB) ARE DSNAMES EQUAL  YM5388
         BE    OIN22700                 SKIP ENQ IF YES          YM5388
         CLC   JFCBDSNM,VTOCNAME        TEST IF F4 DSCB NAME     YM6549
         BE    OIN22700                 SKIP ENQ IF YES          YM6549
         L     RF,WTGPREFX              POINT TO SAVE AREA     @ZA10275
         STM   R0,RET,IECREGSV-IECPREFX(RF) SAVE REGS          @ZA10275
         TESTAUTH FCTN=1,KEY=YES,BRANCH=YES AUTHORIZED CALLER  @ZA10275
         LTR   RF,RF                    TEST FOR AUTHORZTN     @ZA10275
         L     RF,WTGPREFX              LOAD SAVE AREA POINTER @ZA10275
         LM    R0,RET,IECREGSV-IECPREFX(RF) RESTORE REGS       @ZA10275
         BZ    OIN22700                 BYPASS ENQ             @ZA10275
*
***********************************************************************
*
*        IF UPDATING DSNAME, ISSUE ENQ IF
*        1) NEW DATA SET NAME WILL REPLACE OLD DSNAME
*        2) OLD DATA SET IS NOT CURRENTLY OPEN
*
*        IF NOT UPDATING DSNAME DYNAMICALLY
*        ALLOCATE THE DATA SET
*
***********************************************************************
*
         TM    JFCBTSDM,JFCNWRIT        INHIBIT JFCB UPDATE    @ZA02193
         BO    OIN22650                 BRANCH TO ALLOCATE     @ZA02193
         EJECT
*
***********************************************************************
*                                                                Y02082
*        ENQ SHARED IF DISP=SHR                                  YM5388
*        ENQ EXCLUSIVE OTHERWISE                                 YM5388
*
*        ENQ IS DONE BY DYNAMIC ALLOCATION
*
*        MAJOR NAME - SYSDSN                                     YM5388
*        MINOR NAME - DATASET NAME WITH TRAILING BLANKS STRIPPED YM5388
*
***********************************************************************
*
*        GET NUMBER OF NON-BLANK CHARACTERS IN DATASET NAME      YM2881
*
         LA    RB,JFCBDSNM+L'JFCBDSNM-K1 LAST BYTE OF DSNAME     YM2881
OIN22607 EQU   *                        SEARCH FOR NON-BLANK     YM2881
         CLI   K0(RB),C' '              IS THIS ONE BLANK        YM2881
         BNE   OIN22608                 BR IF NO TO COMPUTE      YM2881
*                                       LENGTH OF NAME           YM2881
         BCT   RB,OIN22607              TRY NEXT BYTE            YM2881
OIN22608 EQU   *                        CALCULATE LENGTH         YM2881
         LA    RC,JFCBDSNM-K1           BYTE PRECEDING DSNAME    YM2881
         SR    RB,RC                    RB HAS LENGTH FOR ENQ    YM2881
         EJECT
*
***********************************************************************
*
*        SETUP PARMLIST FOR IEFAB4DC
*
***********************************************************************
*
SCHED    EQU   X'01'                    KEY 1 FOR IEFAB4DC     @ZA00118
         IECRES GET,LV=QLENGTH,KEY=SCHED, GET IEFAB4DC PRMLST  @OZ00118X
               PREFIX=YES,ID=DSN,                              @OZ00118X
               STM=(R2,RET,WTGPREFX)                           @OZ00118
         USING QSYSDSN,R1               PARMLIST BASE          @ZA00118
         LA    RF,JCTPTR                GET JCT POINTER        @ZA08282
         ST    RF,QMPARMS               SAVE IN PARM LIST      @ZA08282
         LA    RF,JCTADDR               GET JCT ADDRESS        @ZA08282
         ST    RF,JCTPTR                SAVE IN JCT POINTER    @ZA08282
         ST    RF,QJCT                  SAVE IN PARM LIST      @ZA08282
         LA    RF,RLCONST               GET POINTER TO RL      @ZA08282
         ST    RF,RLPTR                 SAVE IN RL POINTER     @ZA08282
         L     RF,DXJSCBAD              LOAD JSCB POINTER      @ZA08282
         L     R0,JSCBJCT-IEZJSCB(,RF)  POINT TO JCT PTR       @ZA08282
         SLL   R0,K8(0)                 SHIFT TO HI ORDER BYTE @ZA08282
         ST    R0,JCTPFIX               SAVE IN PARM LIST      @ZA08282
         MVC   RLCONST,RL               LOAD RL CONSTANT       @ZA08282
         MVC   B0CONST,B0               LOAD B0 CONSTANT       @ZA08282
         LR    R0,R1                    SAVE WORK AREA PTR     @ZA08282
         ST    RD,SAVEAREA+K4           SAVE SWITCH            @ZA08282
         LA    RD,SAVEAREA              LOAD SAVE AREA         @ZA08282
         LA    R1,QMPARMS               LOAD PTR FOR Q MNGR    @ZA08282
         L     RF,CVTPTR(,0)            GET CVT ADDRESS        @ZA08282
         L     RF,CVTJESCT-CVT(,RF)     GET JESCT ADDRESS      @ZA08282
         L     RF,K8(,RF)               GET QMNGIO ADDRESS     @ZA08282
         MODESET EXTKEY=ZERO            KEY ZERO FOR Q MANAGER @ZA08282
         BALR  RET,RF                                          @ZA08282
         LR    R1,R0                    RESTORE REQ 1          @ZA08282
         STH   RB,DSNLEN                SAVE LENGTH            @ZA00118
         L     RD,SAVEAREA+K4           RESTORE SAVE AREA PTR  @ZA08282
         MVC   DSNAME,JFCBDSNM          SET UP DSN FOR ENQ     @ZA00118
         LA    RF,DSRRFMAP              GET POINTER            @ZA00118
         ST    RF,QDSRRF                SAVE IN PARM LIST      @ZA00118
         MVC   DSRRFMAP,DSRRFBIT        INIT DSRRFMAP          @ZA00118
         L     RF,DXJSCBAD              LOAD JSCB POINTER      @ZA00118
         LA    R0,JSCBTCBP-IEZJSCB(,RF) INITIATOR TCB POINTER  @ZA00118
         LA    RF,JSCBSTEP-IEZJSCB(,RF) GET STEP POINTER       @ZA08282
         ST    RF,QSTEPNUM              SAVE IN PARM LIST      @ZA08282
         LA    RF,DSNLEN                POINT TO DSNAME        @ZA00118
         ST    RF,QDSNP                 SAVE IN PARMLIST       @ZA00118
         ST    R0,QTCB                  SAVE IN PARM LIST      @ZA00118
         LA    RF,ALFNCMAP              POINT AT ALFNCMAP      @ZA00118
         ST    RF,QALFNC                SAVE IN PARM LIST      @ZA00118
         MVC   ALFNCMAP,ALFNCBIT        INIT ALFNCMAP          @ZA00118
         LA    RF,QRETCODE              POINT TO RET CODE      @ZA00118
         ST    RF,QRET                  SAVE IN PARM LIST      @ZA00118
         L     RF,DXTCBADR              LOAD TCB ADDRESS       @ZA00118
         LA    RF,TCBTIO-TCB(,RF)       POINT TO TIOT PTR      @ZA00118
         ST    RF,QMSGPARM              SAVE IN PARM LIST      @ZA00118
         EJECT
*
***********************************************************************
*
*        CHECK FOR SHARE ENQ OR EXCLUSIVE
*
***********************************************************************
*
         TM    JFCBIND2,JFCSHARE        IS DISP SHR              YM5388
         BO    OIN22610                 ENQ SHR IF YES         @ZA00118
*
***********************************************************************
*
         OI    DSRRFMAP,ENQEXCL         INDICATE EXCLUSIVE ENQ @ZA00118
         OI    ALFNCMAP+K6,NQEXCLSW     INDICATE EXCLUSIVE ENQ @ZA00118
         B     OIN22615                 GOTO IEFAB4DC          @ZA00118
*
OIN22610 EQU   *                        SETUP FOR ENQ SHR      @ZA00118
*
         OI    DSRRFMAP,ENQSHR          INDICATE SHARED ENQ    @ZA00118
*
OIN22615 EQU   *                        GOTO IEFAB4DC          @ZA00118
*
         ST    RD,SAVEAREA+K4           SAVE SWITCH            @ZA00118
         MODESET EXTKEY=ZERO            KEY ZERO FOR IFG019RA  @ZA00118
         LA    RD,SAVEAREA              LOAD SAVE AREA         @ZA00118
         IECRES LOAD,MODNM=IEFAB4DC,BRCODE=OIN22620, IEFAB4DC  @ZA00118X
               PREFIX=WTGPREFX,BRANCH=DIRECT
         EJECT
*
***********************************************************************
*
*        RETURN FROM IEFAB4DC
*
***********************************************************************
*
OIN22620 EQU   *                        RETURN FROM IEFAB4DC   @ZA00118
*
         MODESET EXTKEY=DATAMGT         OPEN KEY               @ZA00118
         IECRES LOAD,MODNM=OPENJ,BRANCH=NO,PREFIX=WTGPREFX     @ZA00118
         XC    WTGMODEP,WTGMODEP        CLEAR ADDRESS          @ZA00118
         L     RD,SAVEAREA+K4           RESTORE RD             @ZA00118
         CLC   QRETCODE,ZEROS           CHECK RETURN CODE      @ZA10558
         BNE   OIN22630                 BRANCH IF ERROR        @ZA10558
*
         LH    RB,DSNLEN                LOAD DSN LENGTH (ENQ)  @ZA00118
         LA    RC,JFCBDSNM              RCORE DSN FOR ENQ      @ZA00118
         DROP  R1
         IECRES FREE,PREFIX=YES,A=(1),STM=(R0,RET,WTGPREFX)    @ZA00118
*
         EJECT
*
***********************************************************************
*
*        SYSZOPEN ENQ FOR SCRATCH PROTECTION
*
***********************************************************************
*
         LA    RB,TIOEJFCB              LOAD ADDR OF JFCB ADDR @ZA00118
         IECRES LOCJFCB,(RB)            LOCATE SYSTEM JFCB     @ZA00118
*
*        GET NUMBER OF NON-BLANK CHARACTERS IN DATASET NAME
*
         LA    RC,JFCBDSNM-INFMJFCB(,RB) SAVE DSN POINTER      @ZA00118
         BCTR  RC,K0                    BYTE PRECEDING DSN     @ZA00118
         LA    RB,JFCBDSNM-INFMJFCB+L'JFCBDSNM-K1(,RB) END DSN @ZA00118
*
OIN22622 EQU   *                        SEARCH FOR NON-BLANK   @ZA00118
*
         CLI   K0(RB),C' '              IS THIS ONE BLANK      @ZA00118
         BNE   OIN22623                 BR IF NO TO COMPUTE    @ZA00118
*                                       LENGTH OF NAME         @ZA00118
         BCT   RB,OIN22622              TRY NEXT BYTE          @ZA00118
*
OIN22623 EQU   *                        CALCULATE LENGTH       @ZA00118
*
         SR    RB,RC                    RB HAS LENGTH FOR ENQ  @ZA00118
         LA    RC,JFCBDSNM-INFMJFCB+K1(,RC) DSNAME FOR ENQ     @ZA00118
*
OIN22625 EQU   *                        ENQ ON SYSZOPEN        @ZA00118
*
* SYSZOPEN PREVENTS UNALLOCATION OF OPEN DATA SETS
*
         MVC   DXWORK(L'ENQLIST),ENQLIST INIT ENQ LIST         @ZA00118
         L     RF,DXJSCBAD              LOAD JSCB ADDRESS      @ZA00118
         L     R0,JSCBTCBP-IEZJSCB(,RF) INITIATOR TCB POINTER  @ZA00118
         ENQ   (SYSZOPEN,(RC),,(RB)),   TCB ENQ EXCLUSIVE      @ZA00118X
               TCB=(R0),RET=USE,MF=(E,DXWORK1),                @ZA00118X
               RELATED=(SYSZOPEN,IFG0202K(SYSZOPEN))           @ZA00118
*
         LTR   RF,RF                    DSNAME ALREADY IN USE  @ZA00118
         BZ    OIN22640                 BRANCH IF NO ERROR     @ZA02193
*
         CLI   K3(RF),K8                TASK ALREADY ENQD      @ZA00118
         BE    OIN22640                 BRANCH TO CONTINUE     @ZA02193
*
OIN22630 EQU   *                        ISSUE 913 ABEND        @ZA00118
*
OABD140  EQU   140                      PD INTERNAL ABEND CODE @ZA00118
         LA    R0,OABD140               913 ABEND INDICATOR    @ZA00118
         ST    R0,DXREG0                SAVE ERROR CODE        @ZA00118
         B     OIN20400                 BRANCH, PROCESS ERROR  @ZA00118
         EJECT
*
OIN22640 EQU   *                        UPDATE JFCB WITH DSN   @ZA02193
*
*        SAVE FIRST 100 BYTES PASSED DSNAME                    @ZA02193
         MVC   FORCORE(INFMJFCB-FORCORE),INFMJFCB+L'JFCBDSNM 1 @ZA02193
*        SAVE LAST 32 BYTES IN CCWS 1-4                        @ZA02193
         MVC   DXCCW1(K32),INFMJFCB+L'JFCBDSNM+INFMJFCB-FORCORE
*
*        MOVE SYSTEM JFCB TO WORK AREA                         @ZA02193
         MVC   INFMJFCB+L'JFCBDSNM(JFCBLGTH-L'JFCBDSNM),L'JFCBDSNM(RC)
*
*        UPDATE SYSTEM JFCB WITH NEW DATA SET NAME             @ZA02193
         LA    R1,TIOEJFCB              POINT TO SYS JFCB      @ZA02193
         LA    R0,INFMJFCB              POINT TO NEW JFCB      @ZA02193
         IECRES WRJFCB,(R1),(R0)        UPDATE DSNAME          @ZA02193
*
*        RESTORE JFCB                                          @ZA02193
         MVC   INFMJFCB+L'JFCBDSNM(INFMJFCB-FORCORE),FORCORE 1 @ZA02193
         MVC   INFMJFCB+L'JFCBDSNM+INFMJFCB-FORCORE(K32),DXCCW1 2
         XC    FORCORE(INFMJFCB-FORCORE),FORCORE CLEAR 1       @ZA02193
         XC    DXCCW1(K32),DXCCW1       CLEAR 2                @ZA02193
         B     OIN22700                 CONTINUE OPEN          @ZA02193
         EJECT
*
OIN22650 EQU   *                        DYNAMIC ALLOCATION     @ZA02193
*
***********************************************************************
*
*        DYNAMICALLY ALLOCATE
*
* //SYSDDN DD DSN=JFCBDSNM,DISP=OLD/SHR,UNIT=UCBNAME,VOL=SER=UCBVOLI
*
***********************************************************************
*
         L     RF,WTGPREFX              POINT TO SAVE AREA     @ZA02193
         STM   R0,RET,IECREGSV-IECPREFX(RF) SAVE REGS          @ZA02193
         TESTAUTH FCTN=1,KEY=YES,BRANCH=YES AUTHORIZED CALLER  @ZA02193
         LTR   RF,RF                    TEST FOR AUTHORZTN     @ZA02193
         L     RF,WTGPREFX              LOAD SAVE AREA POINTER @ZA02193
         LM    R0,RET,IECREGSV-IECPREFX(RF) RESTORE REGS       @ZA02193
         BZ    OIN22700                 BYPASS ALLOC           @ZA02193
*
*        SET UP PARMLIST FOR SVC 99 DYNAMIC ALLOCATION
*
         XC    DXXCTL(OPNJDLEN),DXXCTL  CLEAR PARM LIST        @ZA02193
         XC    FORCORE(JFCBDSNM-FORCORE),FORCORE CLEAR TEXT    @ZA02193
         LA    R1,DXXCTL                PARM LIST              @ZA02193
         USING OPNJDYNA,R1              R1 PTR TO PARM WORD    @ZA02193
         LA    RF,PARMS                 POINT TO PARM LIST     @ZA02193
         ST    RF,DAPTR                 R1 -> DAPTR -> PARMS   @ZA02193
         OI    DAPTR,LASTNTRY           SET LAST IN LIST       @ZA02193
         MVC   PARMS(L'DYNPRM1),DYNPRM1 SET UP LIST            @ZA02193
         LA    RF,FORCORE               POINT TO TEXT UNITS    @ZA02193
         ST    RF,TXTPP                 TXTPP -> TEXT UNITS    @ZA02193
         MVI   FLAGS21,DYNEQU           SET FLAGS              @ZA02193
*
         LA    R1,FORCORE               POINT TO TEXT UNITS    @ZA02193
         USING TEXTUNIT,R1              TEXT UNIT POINTER      @ZA02193
         LA    RF,UNIT1                 POINT TO DDNAME UNIT   @ZA02193
         ST    RF,TEXTU1                UNIT 1 POINTER         @ZA02193
         LA    RF,UNIT2                 POINT TO FREE=CLOSE    @ZA02193
         ST    RF,TEXTU2                UNIT 2 POINTER         @ZA02193
         LA    RF,UNIT3                 POINT TO DISP UNIT     @ZA02193
         ST    RF,TEXTU3                UNIT 3 POINTER         @ZA02193
         LA    RF,UNIT4                 POINT TO VOL=SER UNIT  @ZA02193
         ST    RF,TEXTU4                UNIT 4 POINTER         @ZA02193
         LA    RF,UNIT5                 POINT TO UNIT= UNIT    @ZA02193
         ST    RF,TEXTU5                UNIT 5 POINTER         @ZA02193
         LA    RF,UNIT6                 POINT TO DSNAME UNIT   @ZA02193
         ST    RF,TEXTU6                UNIT 6 POINTER         @ZA02193
         OI    TEXTU6,LASTNTRY          IND LAST IN LIST       @ZA02193
*
*        SET UP TEXT UNITS
*
         MVC   UNIT1(L'DYNU1),DYNU1     DDNAME RETURN PARMS    @ZA02193
         MVC   UNIT2(L'DYNU2),DYNU2     FREE=CLOSE PARMS       @ZA02193
         MVC   UNIT3(L'DYNU3),DYNU3     DISP= PARMS            @ZA02193
         MVC   UNIT4(L'DYNU4),DYNU4     VOL=SER PARMS          @ZA02193
         MVC   UNIT5(L'DYNU5),DYNU5     UNIT= PARMS            @ZA02193
         MVC   UNIT6(L'DYNU6),DYNU6     DSNAME PARMS           @ZA02193
*
         MVI   U3PRM,U3SHR              SET TO DISP=SHR        @ZA02193
         TM    JFCBIND2,JFCSHARE        TEST FOR DISP=SHR      @ZA02193
         BO    OIN22665                 BRANCH IF DISP=SHR     @ZA02193
         MVI   U3PRM,U3OLD              SET TO DISP=OLD        @ZA02193
*
OIN22665 EQU   *                        SET UP VOL=SER         @ZA02193
*
         L     RF,DXUCBADR              LOAD UCB ADDRESS       @ZA02193
         MVC   U4PRM(L'UCBVOLI),UCBVOLI-UCBOB(RF) VOL=UCBVOLI  @ZA02193
         MVC   U5PRM(L'UCBNAME),UCBNAME-UCBOB(RF) UNIT=UCBNAME @ZA02193
*
*        GET NUMBER OF NON-BLANK CHARACTERS IN DATASET NAME
*
         LA    RB,JFCBDSNM+L'JFCBDSNM-K1 LAST BYTE OF DSNAME   @ZA02193
OIN22655 EQU   *                        SEARCH FOR NON-BLANK   @ZA02193
         CLI   K0(RB),C' '              IS THIS ONE BLANK      @ZA02193
         BNE   OIN22657                 BR IF NO TO COMPUTE    @ZA02193
*                                       LENGTH OF NAME         @ZA02193
         BCT   RB,OIN22655              TRY NEXT BYTE          @ZA02193
OIN22657 EQU   *                        CALCULATE LENGTH       @ZA02193
         LA    RC,JFCBDSNM-K1           BYTE PRECEDING DSNAME  @ZA02193
         SR    RB,RC                    RB HAS LENGTH FOR ENQ  @ZA02193
         STH   RB,U6LEN                 STORE DSNAME LENGTH    @ZA02193
*
         DROP  R1
         LA    R1,DXXCTL                DYN ALLOC PRM LIST     @ZA02193
         DYNALLOC                       CALL DYNAMIC ALLOC     @ZA02193
         LTR   RF,RF                    TEST IF SUCCESS ALLOC  @ZA02193
         BNZ   OIN22695                 BRANCH IF NOT          @ZA02193
*
*        FIND ALLOCATED ENTRY
*
         LA    R1,FORCORE               POINT TO TEXT UNITS    @ZA02193
         USING TEXTUNIT,R1              TEXT UNITS             @ZA02193
         OC    U1PRM(L'TIOEDDNM),BLANKS FOLD ZEROS             @ZA02193
         L     RF,DXDSABQD              LOAD QDB ADDR          @ZA02193
         L     RF,QDBFELMP-QDB(,RF)     FIRST DSAB             @ZA02193
OIN22670 EQU   *                        FIND TIOT ENTRY        @ZA02193
         LTR   RF,RF                    TEST FOR LAST          @ZA02193
         BZ    OIN22695                 BRANCH IF NOT FOUND    @ZA02193
         L     RB,DSABTIOT-DSAB(,RF)    POINT AT TIOENTRY      @ZA02193
         CLC   TIOEDDNM-TIOENTRY(L'TIOEDDNM,RB),U1PRM DDNAMES  @ZA02193
         BE    OIN22675                 BRANCH IF FOUND        @ZA02193
         L     RF,DSABFCHN-DSAB(,RF)    LOAD NEXT DSAB         @ZA02193
         B     OIN22670                 LOOP TO CHECK NEXT     @ZA02193
*
OIN22675 EQU   *                        FOUND TIOENTRY         @ZA02193
*
         ST    RF,DXDSAB                SAVE DSAB PTR          @ZA02193
         XC    DXXCTL(OPNJDLEN),DXXCTL  CLEAR PARM LIST        @ZA02193
         XC    FORCORE(JFCBDSNM-FORCORE),FORCORE CLEAR TEXT    @ZA02193
         DROP  R1
         B     OIN22701                 CONTINUE OPEN          @ZA15088
*
OIN22695 EQU   *                        ISSUE 913 ABEND        @ZA02193
*
         LA    R0,OABD140               913 ABEND INDICATOR    @ZA02193
         ST    R0,DXREG0                SAVE ERROR CODE        @ZA02193
         B     OIN20400                 BRANCH, PROCESS ERROR  @ZA02193
         EJECT
OIN22700 EQU   *                        PASSWORD/DISP=NEW        Y02082
*****************************************************************Y02082
*                                                                Y02082
* THE FOLLOWING CODE TO LABEL ENDPSWD WAS INSERTED               Y02082
* TO SUPPORT THE OPENJ/PASSWORD BYPASS PROBLEM                   Y02082
*                                                                Y02082
*****************************************************************Y02082
         SR    R5,R5                    ZERO REGISTER            YM5358
         ICM   R5,B'0111',TIOEJFCB      GET SYSTEM JFCB ADDR     YM5358
         BZ    OIN22780                 IF ZERO,BYPASS JFCB PROC Y02082
*        LOCATE ACTUAL SYSTEM JFCB ADDRESS                       Y02082
         LA    R1,TIOEJFCB              POINT TO JFCB ADDR       Y02082
         IECRES LOCJFCB,(R1)                                     Y02082
         LR    R5,R1                    SAVE SYS JFCB ADDR       YM5358
         MVC   JFCBEXAD(L'JFCBEXAD),JFCBEXAD-DXJBF(R5) ENSURE    YM5358X
                                        SYSTEM JFCB EXT USED     Y02082
*                                                                Y02134
*****************************************************************Y02134
*                                                                Y02134
*        VERIFY VOLUME SERIAL NUMBERS                            YM1363
*                                                                Y02134
*****************************************************************Y02134
*                                                                Y02134
OIN22701 EQU   *                                               @ZA15088
*                                                              @ZA15088
         L     RUCB,TIOESTTB            GET UCB ADDR           @ZA09633
         LA    RUCB,K0(,RUCB)           CLEAR HIGH ORDER BYTE  @ZA09633
         TM    UCBTBYT3-UCBOB(RUCB),UCB3DACC  CHK FOR DA       @ZA09633
         BO    OIN22710                 BR IF DA               @ZA09633
         CLC   JFCBVOLS,JFCBVOLS-INFMJFCB(R5) CHK VOLSERS        YM5358
         BE    OIN22710                 BRANCH IF SAME           Y02134
*                                                                Y02134
         MVI   JFCBNVOL,K0              INITIALIZE VOL COUNTER   YM1363
         LA    RB,JFCBVOLS-INFMJFCB(,R5) LOAD SYSTEM JFCB VOLS   YM5358
         LA    RC,JFCBVOLS              POINT TO FIRST VOL SER   Y02134
*                                                                Y02134
OIN22702 EQU   *                        LOOP FOR MORE VOL SERS   Y02134
*                                                                Y02134
         LA    RF,JFCBVOLS+L'UCBVOLI*K5 END OF VOL LIST          YM1363
         CR    RC,RF                    CHECK FOR END            YM1363
         BNL   OIN22710                 BRANCH IF MORE VOLS      YM1363
         CLI   JFCBVOLS-JFCBVOLS(RC),BLANK CHECK FOR NO VOL SER  YM1363
         BE    OIN22703                 BRANCH OUT IF BLANK      YM1363
         CLI   JFCBVOLS-JFCBVOLS(RC),CHAR00 CHECK FOR NO VOL SER YM1363
         BE    OIN22703                 BRANCH OUT IF BLANK      YM1363
         CLC   JFCBVOLS-JFCBVOLS(L'UCBVOLI,RC),JFCBVOLS-JFCBVOLS(RB)
         BE    OIN22708                 BRANCH IF OK             YM1363
         CLI   JFCBVOLS-JFCBVOLS(RC),VIRTUAL VIRTUAL VOLSER      YM1363
         BNE   OIN22704                 BRANCH IF NOT VIRTUAL    YM1363
*                                                                Y02134
OIN22703 EQU   *                        SET VOL SER TO BLANKS    Y02134
*                                                                Y02134
         MVC   JFCBVOLS-JFCBVOLS(L'UCBVOLI,RC),BLANKS SCRTCH REQ YM1363
         LA    R0,L'UCBVOLI(,RC)        POINT TO NEXT            YM1363
         CR    R0,RF                    CHECK FOR END            YM1363
         BE    OIN22710                 BRANCH OUT IF AT END     YM1363
         MVI   L'UCBVOLI(RC),BLANK      SET ALL VOLS TO SCRTCH   YM1363
         B     OIN22709                 PROCESS FURTHER          YM1373
*                                                                Y02134
OIN22704 EQU   *                        ENQ VOL SER              Y02134
*                                                                Y02134
         MVC   DXWORK1(K16),ENQLIST     INIT ENQ LIST            Y02134
         L     RF,DXJSCBAD              LOAD JSCB ADDRESS        Y02134
         L     R0,JSCBTCBP-IEZJSCB(,RF) INITIATOR TCB POINTER    Y02134
         ENQ   (,(RC)),TCB=(0),RET=USE,MF=(E,DXWORK2),           Y02134X
               RELATED=(SYSZVOLS,IFG0194A(VUS02450))             Y02134
*                                                                Y02134
         LTR   RF,RF                    VOLUME ALREADY IN USE    Y02134
         BZ    OIN22708                 BRANCH IF NO ERROR       Y02134
*                                                                Y02134
         CLI   K3(RF),K8                SEE IF TASK HAS RESOURCE Y02134
         BE    OIN22708                 BRANCH IF ALREADY HELD   Y02134
         LA    R0,K1                    413-04 ABEND             YM1363
         ST    R0,DXREG0                SAVE ERROR CODE          Y02134
         B     OIN22780                 BRANCH TO PROCESS ERROR  Y02134
*                                                                Y02134
OIN22708 EQU   *                        INCREMENT VOL COUNT      YM1363
*                                                                Y02134
         XR    RF,RF                    CLEAR FOR IC INST        YM1363
         IC    RF,JFCBNVOL              GET VOL COUNT            YM1363
         LA    RF,K1(,RF)               INCREMENT COUNT BY 1     YM1363
         STC   RF,JFCBNVOL              SAVE COUNT               YM1363
*                                                                YM1363
OIN22709 EQU   *                        LOOP IF MORE VOLS        YM1363
*                                                                YM1363
         LA    RB,L'UCBVOLI(RB)         POINT TO NEXT VOL SER    YM1363
         LA    RC,L'UCBVOLI(RC)         POINT TO NEXT VOL SER    YM1363
         B     OIN22702                 LOOP FOR MORE VOLS       YM1363
         EJECT
*                                                                Y02134
OIN22710 EQU   *                        VALIDITY CHECK JFCB      Y02134
*                                                                Y02134
         L     RUCB,TIOESTTB            GET UCB ADDR             Y02082
         LA    RUCB,K0(,RUCB)           CLEAR FOR LTR            Y02082
         LTR   RUCB,RUCB                IS THERE A UCB           Y02082
         BZ    OIN22780                 BRANCH IF NO             Y02082
         TM    UCBTBYT3-UCBOB(RUCB),UCB3DACC  CHK FOR DA         Y02082
         BNO   OIN22740                 BR IF NOT, CHK FOR TAPE  Y02082
         TM    JFCBIND2,JFCNEW          CHK USER JFCB FOR NEW    Y02082
         BNO   OIN22780                 BRANCH IF NO             Y02082
*        SET JFCBPWBP BIT IF USER MODIFIED DISPOSITION,          Y02082
*        DSNAME OR VOLSERS IN JFCB                               Y02082
         TM    JFCBIND2-INFMJFCB(R5),JFCNEW SYS JFCB DISP NEW    YM5358
         BNO   OIN22720                 NO, SET JFCBPWBP BIT     Y02082
         CLC   JFCBVOLS,JFCBVOLS-INFMJFCB(R5) CHK VOLSERS        YM5358
         BNE   OIN22720                 IF NOT SAME GO SET BIT   Y02082
         CLC   JFCBDSNM,JFCBDSNM-INFMJFCB(R5) CHK DSNAME         YM5358
         BE    OIN22780                 IF EQUAL, BRANCH OUT     Y02082
OIN22720 EQU   *                        PASSWORD BYPASS INDICATORY02082
         OI    JFCBFLG1,JFCBPWBP        INDICATE JFCB MODIFD     Y02082
         B     OIN22780                 BR TO RESUME PROC        Y02082
*                                                                Y02082
*        ROUTINE TO DO BLP CHECKING                              Y02082
*                                                                Y02082
OIN22740 EQU   *                        AUTHORIZE USE OF BLP     Y02082
         TM    UCBTBYT3-UCBOB(RUCB),UCB3TAPE CHK FOR MAG TAPE    Y02082
         BNO   OIN22780                 BR IF NOT                Y02082
         TM    JFCBLTYP,JFCBLP          BLP SPEC IN USER JFCB    Y02082
         BZ    OIN22780                 NO, BYPASS BLP CHECK     Y02082
OIN22760 EQU   *                        CHECK IF BLP SPECIFIED   Y02082
         TM    JFCBLTYP-INFMJFCB(R5),JFCBLP BLP SPEC SYS JFCB    YM5358
         BO    OIN22780                 YES, BYPASS TESTAUTH     Y02082
         L     RF,WTGPREFX              GET PREFIX ADDR          Y02082
         LA    RF,IECREGSV-IECPREFX(RF) GET REG SAVE ADDR        Y02082
         LR    R5,RF                    SAVE REGSAVE PTR         YM5358
         STM   RET,R3,K0(RF)            SAVE REGS                Y02082
*                                                                Y02082
         TESTAUTH FCTN=1,KEY=YES                                 Y02082
*                                                                Y02082
         LTR   RF,RF                    AUTHORIZED TASK          Y02082
         LM    RET,R3,K0(R5)            RESTORE REGISTERS        YM5358
         BZ    OIN22780                 YES, DO NOT ABEND        Y02082
OIN7700A EQU   139                      INTERNAL ABEND CODE      Y02082
         LA    R0,OIN7700A              IND 913 ABEND            Y02082
         ST    R0,DXREG0                193A WILL DO DMABCOND    Y02082
*                                                                Y02082
OIN22780 EQU   *                        CONTINUE PROCESSING
*
         ST    RTIOT,DXREG9             SAVE RTIOT ACROSS XCTL   A39979
         B     OIN20400                 BR TO PROCESS NEXT DCB
*
***********************************************************************
*
OIN23000 EQU   *                        EXIT IF ALL DCBS IN ERROR
*  IF NO DCB CAN BE OPENED, FREEMAIN WHERE-TO-GO TABLE
*  AND EXIT TO CALLER OF OPEN
*
         LTR   RD,RD                    CHECK THE GO SWITCH
         BNZ   OIN23200                 BR IF ON
*
*
         IECRES FREE,PREFIX=WTG,A=(RWTG) FREMAIN WTG TABLE       Y02080
*
         LA    RF,K4                    SET OPEN RETURN CODE TO 4
*
*        RETURN TO CALLER                                        Y02080
*                                                                Y02080
         IECRES EXIT                    RETURN                   Y02080
*                                                                Y02080
*
***********************************************************************
*
*  INITIALIZE WHERE-TO-GO TABLE BASE FOR XCTL
*
OIN23200 EQU   *                        GO TO SECOND LOAD        A39979
         MVC   WTGMODNM,OIN2710A        SET MODULE NAME TO 193A  Y02080
*
*  XCTL TO SECOND LOAD OF OPEN
*
         L     RC,WTGPREFX              GET PTR TO WTG PREFIX    Y02144
         L     RC,IECRRPRM-IECPREFX(,RC) GET RRPLIST ADDRESS     Y02144
         OI    RRFLAGS2-RRPLIST(RC),RRFFIN1 1ST LOAD COMPLETED   Y02144
         LR    RCORE,RD                 GET LAST VALID WORK AREA Y02134
         LM    RTIOT,RET,DXREG9         GET REGS THIS DCB        Y02134
         LM    R0,R1,DXREG0             FOR QUEUED PROCESSING    Y02134
         L     R5,CVTPTR                PTR CVT                  Y02134
         L     R5,CVTDMSR-CVT(,R5)      ADDRESS OF RESIDENT RTN  Y02134
         IECRES XCTL                    BR QUEUED TO NEXT MOD    Y02134
*
         DROP  RWTG
*
OIN23250 EQU   *                        SYSZTIOT ENQ ERROR       YM2869
         DMABCOND PCK,CALLER-HOLDS-TIOT-RESOURCE-EXCLUSIVELY     YM2869
         EJECT
***********************************************************************
*
*        CONSTANTS
*
OIN2710A DC    CL8'IFG0190 '            LOWEST OPEN NAME         Y02134
OIN2500K WTO   'IEC130I DDNAMEXX DD STATEMENT MISSING',MF=L,           X
               DESC=6,                  JOB STATUS                     X
               ROUTCDE=(11)             PROGRAMMER INFORMATION
OIN2500L EQU   *-OIN2500K               LENGTH OF ERROR MESSAGE
VTOCNAME DC    44X'04'                  FORMAT 4 DSCB KEY        YM6549
*
OIN2500M WTO   'IEC132I DDNAMEXX, MACRF=E SPECIFIED FOR A SYSIN OR SYSOX
               UT DATA SET',MF=L,                                YM3073X
               DESC=6,                  JOB STATUS               YM3073X
               ROUTCDE=(11)             PROGRAMMER INFORMATION   YM3073
OIN2500N EQU   *-OIN2500M               LENGTH OF MESSAGE        YM3073
*
         DS    0F,XL1                   PAD TO WORD BDY        @ZA00118
OIN2570K DC    AL3(1)                   ADDR IF NO DCB EXIT LIST
*
         DS    0F                       ALIGN BDY FOR ENQ      @ZA00118
ENQLIST  DC    0XL16'00',A(0)           ENQ LIST               @ZA00118
         ENQ   (SYSZVOLS,,E,6,SYSTEM),TCB=,RET=USE,MF=L          Y02134
SYSZVOLS DC    CL8'SYSZVOLS'            ENQ VOL SER MAJOR NAME   Y02134
SYSZOPEN DC    CL8'SYSZOPEN'            ENQ DSN MAJOR NAME     @ZA00118
BLANKS   DC    CL8' '                   BLANKS                 @ZA02193
ZEROS    DC    XL6'00'                  ZERO VOLUME SERIAL NO.   Y02134
RL       DC    X'D9D30000'              CONSTANT OF RL         @ZA08282
B0       DC    X'000000B0'              CONSTANT OF B0         @ZA08282
         EJECT
*
***********************************************************************
*
*        IEF4B4DC PARAMETERS
*
***********************************************************************
*
DSRRFBIT DC    0XL2'00'                 DSRRFMAP BITS          @ZA00118
         DC    AL1(ADCHENQ)             DSRRFMAP BYTE 1        @ZA00118
         DC    AL1(SRCHDSNM+1)          DSRRFMAP BYTE 2        @ZA00118
ALFNCBIT DC    0XL8'00'                 ALFNCMAP BITS          @ZA00118
         DC    AL1(ONCNVTSW+NOCNVTSW+NOMONTSW) ALFNCMAP BYTE 1 @ZA00118
         DC    AL1(0)                   ALFNCMAP BYTE 2        @ZA00118
         DC    AL1(TIOTNQSW)            ALFNCMAP BYTE 3        @ZA09969
         DC    AL1(0)                   ALFNCMAP BYTE 4        @ZA00118
         DC    AL1(0)                   ALFNCMAP BYTE 5        @ZA00118
         DC    AL1(0)                   ALFNCMAP BYTE 6        @ZA00118
         DC    AL1(0)                   ALFNCMAP BYTE 7        @ZA00118
         DC    AL1(0)                   ALFNCMAP BYTE 8        @ZA00118
         EJECT
*
***********************************************************************
*
*        DYNAMIC ALLOCATION PARAMETERS
*
***********************************************************************
*
DYNPRM1  DS    0CL3                     SVC 99 PARMS           @ZA02193
         DC    AL1(S99RBEND-S99RB)      LENGTH OF PARMS        @ZA02193
         DC    AL1(S99VRBAL)            ALLOCATE DSNAME        @ZA02193
         DC    AL1(S99NOCNV+S99NOMNT)   NEW ENTRY NO MOUNT     @ZA02193
         DS    0F                       ALIGN BOUNDRY          @ZA02193
DYNU1    DS    0CL6                     RETURN TIOT NAME       @ZA02193
         DC    AL2(DALRTDDN)            RETURN DDNAME FUNCTION @ZA02193
         DC    AL2(K1)                  1 PARM                 @ZA02193
         DC    AL2(L'TIOEDDNM)          LENGTH OF DDNAME       @ZA02193
DYNU2    DS    0CL2                     FREE=CLOSE             @ZA02193
         DC    AL2(DALCLOSE)            FREE=CLOSE FUNCTION    @ZA02193
DYNU3    DS    0CL6                     DISP=                  @ZA02193
         DC    AL2(DALSTATS)            DISP= FUNCTION         @ZA02193
         DC    AL2(K1)                  1 PARM                 @ZA02193
         DC    AL2(K1)                  LENGTH OF DISP         @ZA02193
DYNU4    DS    0CL6                     VOL=SER=               @ZA02193
         DC    AL2(DALVLSER)            VOL=SER= FUNCTION      @ZA02193
         DC    AL2(K1)                  1 PARM                 @ZA02193
         DC    AL2(L'UCBVOLI)           LENGTH OF VOLSERS      @ZA02193
DYNU5    DS    0CL6                     UNIT=                  @ZA02193
         DC    AL2(DALUNIT)             UNIT= FUNCTION         @ZA02193
         DC    AL2(K1)                  1 PARM                 @ZA02193
         DC    AL2(L'UCBNAME)           LENGTH OF CUU          @ZA02193
DYNU6    DS    0CL4                     DSNAME=                @ZA02193
         DC    AL2(DALDSNAM)            DSNAME= FUNCTION       @ZA02193
         DC    AL2(K1)                  1 PARM                 @ZA02193
         EJECT
*
         XCTLTABL ID=(OPENJ,IGC0002B,OPENNEXT,3A,,IEFAB4DC),   @ZA00118X
               SVC=019,BRT=YES,LENGTH=                         @ZA00118
         EJECT
*
***********************************************************************
*
*        PARMLIST FOR IEFAB4DC
*
***********************************************************************
*
QSYSDSN  DSECT                          SYSDSN ENQ INTERFACE   @ZA00118
QDSRRF   DS    A                        POINTER TO DSRRFMAP    @ZA00118
QJCT     DS    A                        JSCBJCT POINTER        @ZA00118
QDSNP    DS    A                        POINTER TO DSNAME      @ZA00118
QEPADDR  DS    A                        EPA ADDRESS            @ZA00118
QTCB     DS    A                        POINTER TO DXTCBADR    @ZA00118
QSTEPNUM DS    A                        POINTER TO STEP NUMBER @ZA00118
QDSENQ   DS    A                        PTR TO DSENQ RECORD    @ZA00118
QALFNC   DS    A                        POINTER TO ALFNCMAP    @ZA00118
QRET     DS    A                        POINTER TO RET CODE    @ZA00118
QRECORD  DS    A                        PTR TO FIRST RECORD    @ZA00118
QMSGPARM DS    A                        POINTER TO TCBTIOT     @ZA00118
QENDP    EQU   *                        END OF PARM LIST       @ZA00118
QRETCODE DS    F                        RETURN CODE            @ZA00118
*
         EJECT
***********************************************************************
*
*        ALFNCMAP FROM IEFAB4DC
*
***********************************************************************
*
ALFNCMAP DS    0XL8                     SEE PLS DSECT IEFAB4DC @ZA00118
INPUTSW  DS    XL6                      INPUT SWITCHES         @ZA00118
ONCNVTSW EQU   X'80'                    DON'T USE AN EXISTING
*                                       ALLOCATION THAT DOES
*                                       NOT HAVE THE CONVERTIBLE
*                                       ATTRIBUTE TO SATISFY
*                                       THE REQUEST
NOCNVTSW EQU   X'40'                    DON'T USE AN EXISTING
*                                       ALLOCATION TO SATISFY
*                                       THE REQUEST
NOMONTSW EQU   X'20'                    DON'T MOUNT VOLUMES OR
*                                       CONSIDER OFFLINE DEVICES
JOBRLSYS EQU   X'10'                    JOB RELATED SYSOUT
******** EQU   X'0F'                    RESERVED
******** EQU   X'FF'                    RESERVED
WTVOLSW  EQU   X'80'                    WAIT FOR VOLUMES
WTDSNSW  EQU   X'40'                    WAIT FOR DSNAME
NORESSW  EQU   X'20'                    DON'T DO DSNAME RESERVATION
WTUNTSW  EQU   X'10'                    WAIT FOR UNITS
OFFLINSW EQU   X'08'                    CONSIDER OFFLINE UNITS
TIOTNQSW EQU   X'04'                    TIOT ENQ DONE-ONLY USED
*                                       BY SVC 99 CONTROL
CATLOGSW EQU   X'02'                    SET SPECIAL CATALOG
*                                       DATA SET INDICATORS
MOUNTSW  EQU   X'01'                    ALLOW VOLUME MOUNTING
UNITDEVT EQU   X'80'                    UNIT NAME IS A DEVICE TYPE
******** EQU   X'7F'                    RESERVED
******** EQU   X'FF'                    RESERVED
******** EQU   X'FF'                    RESERVED
PROCESSW DS    XL2                      INTERNAL PROCESSING SWITCHES
******** EQU   X'80'                    RESERVED
COPYSW   EQU   X'40'                    COPY MODE DSAB AVAILABLE
ERRPROSW EQU   X'30'                    SWITCHES TO CONTROL ERROR
*                                       RECOVERY PROCESSING
DEQDSNSW EQU   X'20'                    DEQ DSNAME DSNAME ON ERROR
UNALOCSW EQU   X'10'                    UNALLOCATE ON ERROR
NQEXCLSW EQU   X'08'                    DO DSNAME ENQ FROM
*                                       SHR TO EXCLUSIVE
DCBSPCSW EQU   X'04'                    DCB PARM(S) SPECIFIED
FRRPERSW EQU   X'02'                    ESTAE PERCOLATED TO BY FRR
EPAJCTSW EQU   X'01'                    EPA FOR JCT ALREADY ON CHAIN
EPASCTSW EQU   X'80'                    EPA FOR SCT ALREADY ON CHAIN
EPALSISW EQU   X'40'                    EPA FOR LAST SIOT ALREADY
*                                       ON CHAIN
USERERSW EQU   X'20'                    EXECUTING CODE WHICH SHOULD
*                                       ABEND ONLY IF USER ERROR
DISMSGSW EQU   X'10'                    ISSUE DISP MSGS IF ERROR
*                                       FORCES UNALLOCATION
HSKPDQSW EQU   X'08'                    IF ERROR OCCURES, DEQ DSN
*                                       WHICH WAS ENQ BY HOUSEKPG
******** EQU   X'07'                    RESERVED
         EJECT
*
***********************************************************************
*
*        DSRRFMAP FROM IEFAB4DC
*
***********************************************************************
*
DSRRFMAP DS    XL2                      SEE PLS DSECT IEFAB4DC @ZA00118
ADDRPASS EQU   X'80'                    USE PASSED ADDRESS OF ENTRY
ADCHONLY EQU   X'40'                    ADD/CHANGE ENTRY ONLY
ADCHENQ  EQU   X'20'                    ADD/CHANGE ENTRY AND ENQ
DELEONLY EQU   X'10'                    DELETE ENTRY ONLY
DELEDEQ  EQU   X'08'                    DELETE ENTRY AND DEQ
NOSHRXCL EQU   X'04'                    DON'T DO SHR TO EXCLUSIVE
*                                       CHANGE OF ENTRY NOR ENQ
ENQSHR   EQU   X'02'                    ENQ SHARE
ENQEXCL  EQU   X'01'                    ENQ EXCLUSIVE
ENQWAIT  EQU   X'80'                    DO UNCONDITIONAL ENQ
RETADDR  EQU   X'40'                    RETURN ADDRESS OF DSENQ
*                                       ENTRY AND DSENQ RECORD
RETINDIC EQU   X'20'                    RETURN INDICATION OF NAME
*                                       ADDED TO TABLE OR SHR TO
*                                       EXCLUSIVE CHANGE NECESSARY
READALL  EQU   X'10'                    READ AND CHAIN ALL DSENQ
*                                       RECORDS IN CORE AND RETURN
*                                       THE ADDRESS OF THE 1ST RECORD
INCORREC EQU   X'08'                    RECORDS ARE IN CORE AND
*                                       ADDRESS OF THE 1ST IS INPUT
EPAJCTEX EQU   X'04'                    AN EPA FOR THE JCT IS ALREADY
*                                       ON THE EPA CHAIN-ON ENTRY, IF
*                                       THIS BIT IS OFF ON ENTRY AND
*                                       THE JCT IS UPDATED, THIS BIT
*                                       IS SET ON ON EXIT.
SRCHDSNM EQU   X'02'                    SEARCH DSENQ TABLE FOR DSNAME
******** EQU   X'01'                    DON'T RETURN EPA
         EJECT
*
***********************************************************************
*
*        DSNAME PARAMETER FOR IEFAB4DC
*
***********************************************************************
*
DSNLEN   DS    H                        LENGTH OF DSNAME
DSNAME   DS    CL44                     DATA SET NAME FOR ENQ
SAVEAREA DS    18F                      IEFAB4DC SAVE AREA     @ZA00118
*
***********************************************************************
*
*               PARAMETER FOR Q MANAGER TO LOCATE JCT
*
***********************************************************************
*
QMPARMS  DS    F                        QMANAGER WORK AREA     @ZA08282
RLPTR    DS    F                        PTR TO CONSTANT OF RL  @ZA08282
JCTPTR   DS    F                        PRT TO REAL JCT        @ZA08282
RLCONST  DS    F                        CONSTANT OF RL         @ZA08282
JCTADDR  DS    F                        POINTER TO JCT         @ZA08282
JCTPFIX  DS    F                        POINTER TO JCT PREFIX  @ZA08282
B0CONST  DS    F                        CONSTANT OF B0         @ZA08282
         DS    0D                       END OF PARMLIST        @ZA00118
QLENGTH  EQU   *-QSYSDSN                LENGTH OF LIST         @ZA00118
         EJECT
*
***********************************************************************
*
*        DYNAMIC ALLOCATION MACROS AND WORKAREAS               @ZA02193
*
***********************************************************************
*
         IEFZB4D0                       DYNAMIC ALLOC PARM LIST@ZA02193
         EJECT
         IEFZB4D2                       DYNAMIC ALLOC KEYS     @ZA02193
         EJECT
*
***************************************************************@ZA02193
*                                                              @ZA02193
*        DYNAMIC ALLOCATE PARMLIST FOR OPEN TYPE=J             @ZA02193
*                                                              @ZA02193
***************************************************************@ZA02193
*                                                              @ZA02193
OPNJDYNA DSECT                          ALLOCATION PARMS       @ZA02193
DAPTR    DS    A                        POINTER TO PARMS       @ZA02193
PARMS    DS    0A                       PARM LIST              @ZA02193
LENGTH   DC    AL1(S99RBEND-S99RB)      LENGTH OF LIST         @ZA02193
VERB     DC    AL1(S99VRBAL)            ALLOCATE DSNAME        @ZA02193
FLAGS1   DS    0AL2                     FLAG BYTES 1           @ZA02193
FLAGS11  DC    AL1(S99NOCNV+S99NOMNT)   NEW REQ-NO MOUNT       @ZA02193
FLAGS12  DC    AL1(0)                   RESERVED               @ZA02193
ERRCODE  DS    AL2                      ERROR RETURN CODE      @ZA02193
INFOCODE DS    AL2                      INFORMATION CODE       @ZA02193
TXTPP    DS    A                        TEXT POINTER           @ZA02193
         DS    F                        RESERVED FIELD         @ZA02193
FLAGS2   DS    0A                       FLAG BYTES 2           @ZA02193
DYNEQU1  EQU   S99WTVOL                 WAIT FOR VOLUMES       @ZA02193
DYNEQU2  EQU   S99WTDSN                 WAIT FOR DATA SETS     @ZA02193
DYNEQU3  EQU   S99WTUNT                 WAIT FOR UNITS         @ZA02193
DYNEQU4  EQU   S99OFFLN                 CONSIDER OFFLINE UNITS @ZA02193
DYNEQU5  EQU   S99TIONQ                 TIOT ENQD              @ZA02193
DYNEQU6  EQU   S99MOUNT                 MOUNTING PERMITED      @ZA02193
DYNEQU   EQU   DYNEQU3+DYNEQU4+DYNEQU5+DYNEQU6                 @ZA09969
FLAGS21  DC    AL1(DYNEQU)              ALLOCATION REQUEST     @ZA02193
FLAGS22  DS    AL1                      RESERVED               @ZA02193
FLAGS23  DS    AL1                      RESERVED               @ZA02193
FLAGS24  DS    AL1                      RESERVED               @ZA02193
OPNJDEND DS    0F                       END OF PARM LIST       @ZA02193
OPNJDLEN EQU   OPNJDEND-OPNJDYNA        LENGTH OF ALLOC PARMS  @ZA02193
*
TEXTUNIT DSECT                          TEXT UNITS             @ZA02193
TEXTU1   DC    A(UNIT1)                 PTR TEXT UNIT 1        @ZA02193
TEXTU2   DC    A(UNIT2)                 PTR TEXT UNIT 2        @ZA02193
TEXTU3   DC    A(UNIT3)                 PTR TEXT UNIT 3        @ZA02193
TEXTU4   DC    A(UNIT4)                 PTR TEXT UNIT 4        @ZA02193
TEXTU5   DC    A(UNIT5)                 PTR TEXT UNIT 5        @ZA02193
TEXTU6   DC    AL1(LASTNTRY),AL3(UNIT6) PTR TEXT UNIT 6        @ZA02193
UNIT1    DS    0CL14                    DDNAME RETURN UNIT     @ZA02193
U1KEY    DC    AL2(DALRTDDN)            DDNAME RETURN FUNCTION @ZA02193
U1NUM    DC    AL2(K1)                  NUMBER OF PARMS        @ZA02193
U1LEN    DC    AL2(L'TIOEDDNM)          LENGTH OF DDNAME       @ZA02193
U1PRM    DS    CL8                      PARM                   @ZA02193
UNIT2    DS    0CL4                     FREE=CLOSE UNIT        @ZA02193
U2KEY    DC    AL2(DALCLOSE)            FREE=CLOSE FUNCTION    @ZA02193
U2NUM    DC    AL2(K0)                  NUMBER OF PARMS        @ZA02193
UNIT3    DS    0CL8                     DISPOSITION UNIT       @ZA02193
U3KEY    DC    AL2(DALSTATS)            DISP FUNCTION          @ZA02193
U3NUM    DC    AL2(K1)                  NUMBER OF PARMS        @ZA02193
U3LEN    DC    AL2(K1)                  LENGTH OF PARM         @ZA02193
U3PRM    DC    X'00'                    DISP=SHR-08 DISP=OLD-01@ZA02193
U3SHR    EQU   X'08'                    DISP=SHR FLAG          @ZA02193
U3OLD    EQU   X'01'                    DISP=OLD FLAG          @ZA02193
         DS    X                        FILL                   @ZA02193
UNIT4    DS    0CL12                    VOL SER UNIT           @ZA02193
U4KEY    DC    AL2(DALVLSER)            VOL=SER FUNCTION       @ZA02193
U4NUM    DC    AL2(K1)                  1 VOL SER              @ZA02193
U4LEN    DC    AL2(L'UCBVOLI)           VOL SER LEN            @ZA02193
U4PRM    DS    CL6                      VOL=SER=PARM           @ZA02193
UNIT5    DS    0CL10                    UNIT= UNIT             @ZA02193
U5KEY    DC    AL2(DALUNIT)             UNIT= FUNCTION         @ZA02193
U5NUM    DC    AL2(K1)                  1 UNIT                 @ZA02193
U5LEN    DC    AL2(L'UCBNAME)           LENGTH OF UNIT PARM    @ZA02193
U5PRM    DS    CL3                      PARM                   @ZA02193
         DS    X                        FILL                   @ZA02193
         ORG   TEXTUNIT+100-6           ORG IN FRONT OF DSNAME @ZA02193
UNIT6    DS    0CL50                    DSNAME UNIT            @ZA02193
U6KEY    DC    AL2(DALDSNAM)            DSNAME FUNCTION        @ZA02193
U6NUM    DC    AL2(K1)                  NUMBER OF PARMS        @ZA02193
U6LEN    DC    AL2(L'JFCBDSNM)          LENGTH OF DSNAME       @ZA02193
U6PRM    DS    CL44                     JFCBDSNM FIELD         @ZA02193
         EJECT
         IECDSECS PSA,                                         @ZA00118X
               CVT,                                            @ZA00118X
               TCB,                                            @ZA00118X
               JSCB,                                           @ZA00118X
               RB,                                             @ZA00118X
               QDB,                                            @ZA02193X
               DSAB,                                           @ZA00118X
               TIOT,                                           @ZA00118X
               UCB,                                            @ZA00118X
               IEZDEB,                                         @ZA00118X
               DCB,                                            @ZA00118X
               ACB,                                            @ZA00118X
               WTG,                                            @ZA00118X
               MAIN,                                           @ZA00118X
               PREFX,                                          @ZA00118X
               RRPL,                                           @ZA00118X
               EXPAND=YES               EXPAND DESIRED DSECTS  @ZA00118
ACBMJEP  EQU  X'40'                     ACB CREATED BY JEPS    @ZA00118
TIOTSPOL EQU   X'06'                    SPOOL DATA SET INDICTR @ZA00118
         IECEQU AOS=YES,IEZDEB=YES                             @ZA00118
         END
