         TITLE 'IGC0003A - FEOV EXECUTOR (SAM)'
IGC0003A CSECT
***********************************************************************
*                                                                     *
*                                                                     *
*          VS2 RELEASE 04 CHANGES/DELETIONS                           *
*0000678000,738000-748000                                      @ZA02215
*A795540-795680,A795980-795990                                 @ZA29752
*A674500-675800,714500,72600                                   @ZA30750
*          VS2 RELEASE 02 DELETIONS                                   *
*                                                                     *
*                                                                     *
***********************************************************************
*                                                                     *
* MODULE NAME = IGC0003A (OS/VS2)                                     *
*                                                                     *
* DESCRIPTIVE NAME = FEOV EXECUTOR (SAM) FUNCTION
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = RELEASE 4, LEVEL 0                                         *
*                                                                     *
* FUNCTION =                                                          *
*        THIS EXECUTOR WILL BE THE FIRST LOAD OF THE EOV ROUTINES     *
*        WHEN THE FEOV (SVC 31) MACRO IS ISSUED.                      *
*        IT WILL CHECK THE VALIDITY OF THE DCB.                       *
*        FLUSH QSAM OUTPUT BUFFERS AND WAIT FOR QUIESENCE.            *
*        DEB VALIDITY CHECKING IS ACCOMPLISHED VIA A DEB VALIDITY     *
*        CHECK ROUTINE WHICH MAINTAINS AND UPDATES A TABLE OF VALID   *
*        DEB ADDRESSES IN PROTECTED CORE.                             *
*        THE EOV WORKAREA IS OBTAINED USING THE IECRES MACRO WHICH    *
*        WILL RESULT IN A SHARED ENQ ON THE TIOT.                     *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES =                                                   *
*            CLASS ONE CHARACTER CODE.  THE EBCDIC CHARACTER CODE     *
*            WAS USED FOR ASSEMBLY.  THE MODULE MUST BE REASSEMBLED   *
*            IF A DIFFERENT CHARACTER SET IS USED FOR EXECUTION.      *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    REGISTER CONVENTIONS =                                           *
*            R2 POINTS TO DCB                                         *
*            R4 POINTS TO EOV WORK AREA                               *
*            R5 POINTS TO THE RESIDENT ROUTINE                        *
*            R6 POINTS TO THE WTG TABLE                               *
*            R7 POINTS TO THE CURRENT PARAMETER LIST ENTRY            *
*            R8 POINTS TO THE CURRENT WTG TABLE ENTRY                 *
*            R9 POINTS TO THE DD ENTRY IN THE TIOT                    *
*            R10 POINTS TO THE UCB                                    *
*                                                                     *
*    PATCH LABEL = SEE THIRD FROM LAST LABEL BEFORE ORG STATEMENT AT  *
*                  END OF LISTING.                                    *
         EJECT
* MODULE TYPE = CONTROL (EOV DATA MANAGEMENT)                         *
*                                                                     *
*    PROCESSOR = ASSEMBLER XF                                         *
*                                                                     *
*    MODULE SIZE = SEE EXTERNAL SYMBOL DICTIONARY OR LOC FIELD ON     *
*                  ORG STATEMENT AT END OF LISTING                    *
*                                                                     *
*    ATTRIBUTES = REENTRANT, REFRESHABLE,READ-ONLY, ENABLED,          *
*                 PRIVILEGED, SUPERVISOR STATE, DATA MANAGEMENT KEY,  *
*                 LINK PACK AREA RESIDENT/PAGEABLE                    *
*                                                                     *
* ENTRY POINT = IGC0003A                                              *
*                                                                     *
*    PURPOSE = SEE FUNCTION                                           *
*                                                                     *
*    LINKAGE =                                                        *
*        FEOV MACRO (SVC 31) WITH DCB ADDRESS IN REGISTER 1           *
*                                                                     *
* INPUT =                                                             *
*        REGISTERS - REGISTER 1 POINTS TO USER'S DCB.                 *
*        A POINTER IN REGISTER 4 TO THE TCB SET BY THE SVC INTERRUPT  *
*        HANDLER.                                                     *
*                                                                     *
* OUTPUT =                                                            *
*        CONTROL PASSED IN PROTECT KEY 5.                             *
*        EOV WORKAREA.                                                *
*        REGISTERS -                                                  *
*        R2 POINTS TO DCB COPY                                        *
*        R4 POINTS TO EOV WORK AREA                                   *
*        R5 POINTS TO THE RESIDENT ROUTINE                            *
*        R6 POINTS TO THE WTG TABLE                                   *
*        R8 POINTS TO THE CURRENT WTG TABLE ENTRY                     *
*                                                                     *
* EXIT-NORMAL =                                                       *
*        IFG0551F VIA IECRES-BRANCH MACRO                             *
         EJECT
* EXIT-ERROR =                                                        *
*        IFG0550P VIA DMABCOND AND IECRES-BRANCH MACRO TO ISSUE       *
*        1) INTERNAL ABEND CODE 182 CAUSING                           *
*        437-08 SYSTEM ABEND - INVALID DCB POINTER IN DEB.            *
*        2) INTERNAL ABEND CODE 242 CAUSING                           *
*        937-18 ABEND - DSAB INDICATES CHECKPOINT SECURITY            *
*        INTERFACE ALREADY ESTABLISHED.                               *
*                                                                     *
*        EXIT TO CALLER VIA IECRES-EXIT MACRO IF                      *
*        1) VTAM ACB, IN WHICH CASE THE ACBERFLG IS SET TO 04         *
*        2) EXCP DCB                                                  *
*        3) DCB DEVICE TYPE INDICATES TERMINAL DEVICE                 *
*        4) DUMMY DATA SET (UCB ADDRESS ZERO IN TIOT)                 *
*        5) ERROR RETURN FROM IECRES-INIT MACRO INDICATING DEB/DEB    *
*        EXTENSION/DSAB/DCBTIOT OFFSET INVALID                        *
*        6) OPEN AND LOCK BITS NOT ON IN DCBOFLGS                     *
*        7) THE DEB ACCESS METHOD TYPE INDICATES A SUBSYSTEM DEB      *
*        8) AN ACB INSTEAD OF A DCB ADDRESS IS PASSED IN REGISTER 1.  *
*        9) DEB CHAINED ON ANOTHER TCB AND IT IS BEING CLOSED BY      *
*        THE TASK CLOSE ROUTINE FOR THAT TCB                          *
*                                                                     *
*        DMABCOND PCK ISSUED IF IECRES-GET,PREFIX=EOV RETURNS    YM3185
*        A NON-ZERO RETURN CODE IN REGISTER 0, INDICATING THAT   YM3185
*        THE CALLER OF EOV WAS EXCLUSIVELY ENQUEUED ON THE TIOT. YM3185
*                                                                     *
* EXTERNAL REFERENCES = SEE BELOW                                     *
*                                                                     *
*    ROUTINES =                                                       *
*        THE FOLLOWING ROUTINES ARE GIVEN CONTROL EITHER VIA THE      *
*        SYNCH MACRO IF THE CALLER OF THIS SVC ROUTINE, AS INDICATED  *
*        BY THE RESUME PSW IN THE RB, IS IN A USER                    *
*        KEY (8-15), OR VIA A BALR IN THE CALLERS KEY IF THE CALLER   *
*        IS IN A SYSTEM KEY (0-7).                                    *
*                                                                     *
*        SEQUENTIAL ACCESS METHOD TRUNC ROUTINE POINTED TO BY         *
*        DCBPUT WITH BRANCH OFFSET OF 8.                              *
*                                                                     *
*        SEQUENTIAL ACCESS METHOD PUT ROUTINE POINTED TO BY DCBPUT.   *
*                                                                     *
*        SEQUENTIAL ACCESS METHOD PUT ERROR ROUTINE POINTED TO BY     *
*        DCBPERR.                                                     *
*                                                                     *
*        DATA MANAGEMENT SERVICE ROUTINE, IFG019RA, THROUGH           *
*        IECRES MACRO INSTRUCTION.                                    *
*                                                                     *
*    DATA AREAS =                                                     *
*        NONE.                                                        *
         EJECT
*    CONTROL BLOCK =                                                  *
*        TCB                                                          *
*        SVRB                                                         *
*        DEB                                                          *
*        TIOT                                                         *
*        CVT                                                          *
*        DSAB                                                         *
*        SEQUENTIAL ACCESS METHOD IOBS                                *
*        DEB EXTENSION                                                *
*                                                                     *
* TABLES =                                                            *
*        EOV WORKAREA MAPPED BY FORCORE DSECT.                        *
*                                                                     *
* MACROS =                                                            *
*        MODESET                                                      *
*        DMABCOND                                                     *
*        IECRES EXIT                                                  *
*        IECRES GET                                                   *
*        IECRES LOAD                                                  *
*        IECRES INIT                                                  *
*        IECRES FREE                                                  *
*        DEBCHK                                                       *
*        SYNCH                                                        *
*        WAIT                                                         *
*        PURGE                                                        *
*        XCTLTABL                                                     *
*        IECDSECS                                                     *
*                                                                     *
* CHANGE ACTIVITY =                                                   *
*        SEE 'CHANGES/DELETIONS' SECTION JUST AFTER CSECT CARD        *
*                                                                     *
***********************************************************************
         EJECT
         BALR  RBASE,0                   ESTABLISH BASE
         USING *,RBASE                   DEFINE BASE REGISTER
*
         USING IHADCB,RDCB
         USING SRT,RUCB
         USING DEBBASIC,RDEB                                     Y02134
         USING FORCORE,RCORE
         USING WTG,RWTG                 BASE OF WTG TABLE        Y02080
         USING TIOENTRY,RTIOT           DEFINE BASE TO TIOT DD ENTRY
*
*  INTERNAL CODE FOR ABEND VIA PROBLEM DETERMINATION MODULE
*
EABD182  EQU   182                      CODE FOR ABEND 437-08    A48604
EABD242  EQU   242                      937-18 INTERNAL CD       Y02083
*
EIN03200 EQU   *                        BASE REGISTER POINTS HERE
         DROP  RCORE                                             Y02082
         USING TCB,R4                   SVC GETS R4 AS TCB ADDR  Y02082
         MODESET EXTKEY=RBT234,WORKREG=2 ASSUME CALLER'S KEY     Y02082
         DROP  R4                                                Y02082
         USING FORCORE,RCORE                                     Y02082
         LR    RDCB,R1                  GET DCB ADDRESS IN PROPER REG
         LA    R1,0(R1)                 CLEAR HIGH ORDER BYTE    A48604
         TM    DCBMACRF,DCBMEXCP        DCB USING EXCP MACRO     A48604
         BO    EIN03300                 YES RETURN TO USER       A48604
         TM    DCBOFLGS,DCBOPEN+DCBOLOCK IS DCB OPEN + UNLOCKED SA52379
         BNO   EIN03300                 NO RETURN TO USER       SA52379
*                                                                Y02004
* DO NOT PROCESS VTAM REQUESTS                                   Y02004
*                                                                Y02004
         TM    DCBDSRG2,ACBDORGA        IS THIS AN ACB?          Y02004
         BZ    EIN03210                 BR IF NO                 Y02004
         USING IFGACB,RACB              ADDRESS ACB              Y02004
         CLI   ACBAMETH,ACBVTAM         IS THIS ACB FOR VTAM?    YM3011
         BNE   EIN03300                 NO, EXIT                 Y02004
         MVI   ACBERFLG,VSCACBCL        SET ACB ERROR FLAG       Y02004
         B     EIN03300                 RETURN TO USER           Y02004
         USING IHADCB,RDCB              RESTORE BASE FOR DCB     Y02004
         EJECT
EIN03210 EQU   *                        GET DEB TO CHECK
         CLI   DCBDEVT,DCBDEVTM         CHECK FOR TERMINAL       Y02082
         BE    EIN03300                 IF YES, RETURN TO USER   Y02082
         L     RDEB,DCBDEBAD            GET DEB FROM DCB         A48604
         LA    RDEB,0(RDEB)             CLEAR HIGH ORDER BYTE    A48604
*
*  NOW CHECK IF DEB POINTS TO DCB
*
EIN03230 EQU   *                        CHECK DEBAMTYP           A48604
         LR    R8,RDEB                  GET DEB IN R8            YM1196
         LA    R9,K3                    OFFSET BACK TO ACCESS    Y02120
*                                       METHOD INDICATOR         Y02120
         SR    R8,R9                    R8 POINTS TO AM TYPE     Y02120
         CLC   K0(K1,R8),SUBSYSAM       SUBSYSTEM DEB?           Y02120
         BE    EIN03300                 EXIT IF YES              Y02120
         L     R8,DEBDCBAD              GET DEB'S DCB PT         Y02134
         LA    R8,0(R8)                 CLEAR HIGH ORDER BYTE    A48604
         CR    R8,R1                    DOES DEB PT TO DCB       A48604
         BE    EIN03270                 BR YES - VALID DCB       A48604
         EJECT
EIN03260 EQU   *                        ABEND ERROR EXIT         A48604
         BAL   R8,EIN03420              GET CORE FOR EOV RTNS    A48604
*
*              CONTROL RETURNED IN DATA MANAGEMENT KEY           Y02082
*
         NI    DCBOFLGS,K255-DCBOBUSY   CONTINUE WITH ABEND      Y02134
*              WHETHER OR NOT IECRES INIT WAS SUCCESSFUL         Y02134
         LA    RWTG,DXXAREA             WTG REG PTS TO DUMMY WTG A48604
         LA    RWTGC,DXXENTRY           CURRENT PTR POINTS TO    A48604
*                                       ..DUMMY ENTRY
         ST    RCORE,DXXCORE-K1-DXXENTRY(RWTGC)  SAVE WORK AREA  A48604
*                                       ..POINTER IN WTG ENTRY
         DMABCOND  EABD182,ABEND2Z,RES=NO,REGSAVE=YES            A48604
*
*  INITIALIZE WHERE-TO-GO TABLE FOR XCTL TO PROBLEM DETERMINATION
*
         MVC   DXXMODID,ABEND2Z         SET MODULE ID TO 0P      A48604
         MVC   DXXMODEP+K1(K3),ABEND2Z+K2 AND TTR OF IFG0550P    Y02080
         B     EIN05120                 GO TO XCTL               A48604
*
EIN03270 EQU   *                        CHECK FOR DUMMY          A48604
         USING DEBBASIC,RDEB                                     Y02134
*        TCB ADDRESS PASSED TO SVC IN REGISTER 4                 Y02134
         USING TCB,RCORE                                         Y02134
         L     RTIOT,TCBTIO             GET TIOT ADDRESS         Y02134
         USING FORCORE,RCORE                                     Y02134
         AH    RTIOT,DCBTIOT            GET ADDR TIOT DD ENTRY
         L     RUCB,TIOEFSRT-K1         GET UCB ADDRESS
         LA    RUCB,K0(RUCB)            CLEAR HIGH-ORDER BYTE
         LTR   RUCB,RUCB                IS THIS A DUMMY DATA SET
         BZ    EIN03300                 YES RETURN TO USER
*
         L     RDEB,DCBDEBAD            GET DEB ADDRESS
         L     RUCB,DEBSUCBA            GET UCB ADDRESS          Y02134
         B     EIN03400                 BRANCH TO CONTINUE       Y02134
         EJECT
EIN03300 EQU   *                        RETURN TO CALLER
*
*        RETURN TO CALLER                                        Y02080
*                                                                Y02080
         SR    RF,RF                    CLEAR ERR ROUTINE PTR   SA52379
         IECRES EXIT                    RETURN                   Y02080
         EJECT
EIN03400 EQU   *                        CONTINUE NORMAL FEOV
*
*        DON'T PROCESS DEB CHAINED OFF ANOTHER TCB IF TASK CLOSE YM2869
*        IS PROCESSING THE DEB                                   YM2869
*
*        RCORE STILL POINTS TO TCB                               YM2869
*
         CLM   RCORE,B'0111',DEBTCBAD+K1 IS DEB ON CURRENT TCB   YM2869
         BE    EIN03410                 BRANCH IF YES            YM2869
         LR    R8,RDEB                  DEB ADDRESS              YM2869
         LA    RF,DEBBASIC-DEBXTNP      OFFSET TO DEBX ADDR      YM2869
         SR    R8,RF                    R8 POINTS TO DEBX ADDR   YM2869
         USING DEBXTNP,R8                                        YM2869
         L     R8,DEBXTNP               R8 POINTS TO DEBX        YM2869
         USING DEBXTN,R8                                         YM2869
         TM    DEBXFLG1,DEBXTSK         IS TASK CLOSE PROCESSING YM2869
*                                       THIS DEB                 YM2869
         BO    EIN03300                 EXIT IF YES              YM2869
         DROP  R8                                                YM2869
DEBXTSK  EQU   X'40'                    TASKCLOSE PROCESSING DEB YM2869
EIN03410 EQU   *                        CONTINUE NORMAL FEOV     YM2869
*
*  GET SPACE FOR END OF VOLUME ROUTINES
*
         LA    R8,EIN03450              LOAD ADDR FOR RETURN     A48604
*                                       ..FROM
         EJECT
EIN03420 EQU   *                        GET EOV WORKAREA         A48604
*                                                                Y02080
* SAVE REGISTERS 2-12 IN SVRB EXTENDED SAVE AREA                 Y02080
*                                                                Y02080
         L     RF,CVTPTR                GET POINTER TO CVT       Y02080
         L     RF,CVTTCBP-CVT(,RF)      GET TCB WORDS            Y02080
         L     RF,K4(,RF)               TCB ADDRESS              Y02080
         L     RF,K0(,RF)               POINTER TO SVRB          Y02080
*                                                                Y02080
         MODESET EXTKEY=SUPR            SUPR KEY TO STM IN SVRB  Y02082
         IECRES GET,PREFIX=EOV,LV=EOVSIZE,STM=(2,12,96(15)),     Y02080*
               A=(RDCB)
*
*        IF REG 0 IS NONZERO, IT IS BECAUSE THE CALLER HAS       YM3185
*        ENQUEUED EXCLUSIVELY ON THE TIOT. THIS MUST NOT BE      YM3185
*        ALLOWED TO GO UNNOTICED.                                YM3185
*
         LTR   R0,R0                    IS R0 ZERO               YM3185
         BNZ   EIN05160                 BRANCH IF NO             YM3185
*
         LR    RCORE,R1
         LA    RWTG,DXXAREA             GET POINTER TO WTG TABLE Y02134
         L     RF,DXXPREFX              GET PREFIX PTR           Y02144
         L     RF,IECRRPRM-IECPREFX(,RF) GET RRPLIST PTR         Y02144
         USING RRPLIST,RF                                        Y02144
         MVI   RRFUNCTN,RRFFEOV         INDICATE FEOV FUNCTION   Y02144
         ST    RF,DXATCOM3              SAVE RRPLIST PTR IN W/A  Y02144
         DROP  RF                                                Y02144
         EJECT
         IECRES LOAD,PREFIX=DXXPREFX,MODNM=FEOV,BRANCH=NO        Y02080X
                                        GIVE OPT TRACE A SHOT    Y02080
         IECRES INIT,DEB=YES,PREFIX=DXXPREFX,STM=(2,12,DXXPREFX) Y02134
         BR    R8                       RETURN FROM REQUEST FOR  A48604
*                                       ..EOV WORK AREA
*
EIN03450 EQU   *                        EXIT IF INIT FAILED      A48604
         CLI   DXWCOPYE,K0              WAS INIT SUCCESSFUL      Y02082
         BE    EIN03475                 BRANCH IF YES            Y02082
EIN03460 EQU   *                        FREE EOV WORKAREA, EXIT  Y02082
         IECRES FREE,PREFIX=EOV,A=(RCORE)                        Y02134*
                                        R15 STILL IS SAVE AREA   Y02134
*                                                                Y02080
*        RETURN TO CALLER                                        Y02080
*                                                                Y02080
         IECRES EXIT                    RETURN                   Y02080
         EJECT
EIN03475 EQU   *                        CHECK FOR SECURITY INTRF YM1320
         LA    RWTG,DXXAREA             GET PNTR TO WTG TABLE    YM1418
         LA    RWTGC,DXXENTRY           GET PNTR TO WTG ENTRY    YM1418
         L     RF,DXDSAB                GET DSAB ADDRESS         YM1320
         USING DSAB,RF                  ADDRESS DSAB             YM1320
         TM    DSABFLG4,DSABCKSI        DS SECURITY INTERFACE ON Y02083
         BNO   EIN03480                 NO  CONTINUE             YM1320
         DROP  RF                       DSAB ADDRESSABILITY      YM1320
***********************************************************************
*              ISSUE ABEND 937-18 UNAUTHORIZED USER ATTEMPTING        *
*              TO FORCE END OF VOLUME ON A CHECKPOINT DATA SET.       *
***********************************************************************
         LA    R0,EABD242               LOAD INTERNAL ABEND CD   Y02083
         DMABCOND (R0),ABCD0P,RES=NO,REGSAVE=YES SETUP TO ABEND  YM1320
         B     EIN05120                 GO TO XCTL               YM1320
         EJECT
EIN03480 EQU   *                        END CHKPT D/S TEST       YM1320
         LA    RWTG,DXXAREA             GET PNTR TO WTG TABLE    YM1320
         LA    RWTGC,DXXENTRY           GET PNTR TO WTG ENTRY    YM1320
         XR    RD,RD                    CLEAR FOR IC INST        Y02134
         MODESET KEYADDR=DXUKEY,WORKREG=13 USER KEY              Y02134
         NI    DCBOFLGS,K255-DCBOBUSY   TURN OFF BUSY BIT        Y02134
         MODESET EXTKEY=DATAMGT         RETURN TO DM KEY         Y02082
         SRL   RD,K4                    PUT KEY IN LOW 4 BITS    Y02082
*
*        GET CALLER KEY SAVE AREA WITH WHICH TO INTERFACE WITH
*        THE SEQUENTIAL ACCESS METHOD ROUTINES
*
         IECRES GET,LV=72,KEY=(RD),PREFIX=NO,STM=(2,14,DXXPREFX) Y02082*
                                        GET USER SAVE AREA       Y02082
*
         LR    RD,R1                    SET UP FOR QSAM SAVE AREA
         EJECT
         DEBCHK (RDCB)                  VALIDATE DEB             Y01021
         LR    RDEB,R1                  LOAD VERIFIED DEB ADDR   Y01021
*
         L     RC,DCBIOBA               GET CURRENT IOB ADDRESS
         LA    RC,K0(RC)                CLEAR HI BYTE
         TM    DEBOPATB,DEBOPUPD        OPEN FOR UPDATE?         Y02134
         BNO   EIN03500                 IF NOT, BRANCH
         TM    DEBOPATB,K15-DEBOPUPD    MAYBE--TEST FURTHUR      Y02134
         BZ    EIN03700                 YES, BRANCH
*                                       NO, CONTINUE
EIN03500 EQU   *                        NOT UPDATE-CHECK OUTPUT
         TM    DEBOPATB,DEBOPOUT        WAS IT USED FOR A WRITE  Y02134
         BNO   EIN04800                 NO BRANCH
*
EIN03600 EQU   *                        OUTPUT-CHECK QSAM
         TM    DCBCIND2,DCBC2QSM        DCB USING QSAM
         BNO   EIN04300                 NO, BRANCH.
*
*        QSAM OUTPUT - SETUP FOR TRUNC ROUTINE
*
         OI    DCBCIND2,DCBC2FEO        TURN ON FEOV BIT         A35349
         LR    R1,RDCB                  DCB ADDR. IN PROPER REG.-1
*
         MODESET EXTKEY=DATAMGT         GET IN DM KEY TO STORE   Y02082
         LA    R0,BRCODE                SAVE ENTRY POINT FOR     M0189
*                                       SYNCH                    M0189
         BAL   RET,EIN05150             GET PTR TO FEOV SVRB     M0189
         USING RBSECT,RF                                         M0189
         MODESET EXTKEY=SUPR            SVRB KEY                 Y02082
         STM   R2,RC,RBEXSAVE           SAVE REGS 2-12 IN SVRB   M0189
*                                       EXTENDED SAVE AREA
         CLI   DXUKEY,X80               IS CALLER IN SYSTEM KEY  Y02082
         BNL   EIN03620                 BRANCH IF NO             Y02082
         EJECT
         MODESET KEYADDR=DXUKEY,WORKREG=14 ASSUME CALLER'S KEY   Y02082
         LM    R2,R8,RBGRS2             RESTORE USER REGS 2-8    Y02082
         LR    RF,R0                    INITIALIZE EXIT ADDRESS  Y02082
         BALR  RET,RF                   LINK TO TRUNC ROUTINE    Y02082
         MODESET EXTKEY=DATAMGT         ASSUME DATA MGT KEY      Y02082
         BALR  RET,0                    ESTABLISH ADDRESSABILITY Y02082
         USING *,RET                    BASE FOR NEXT BRANCH     Y02080
         B     EIN03630                 BRANCH TO RESTORE REGS   Y02082
         DROP  RET                      BASE NOT NEEDED AGAIN    Y02080
EIN03620 EQU   *                        SETUP SYNCH              Y02082
         MODESET EXTKEY=DATAMGT         RETURN TO DM KEY         Y02082
         LM    R2,R8,RBGRS2             RESTORE USER REGS 2-8    Y02082
*                                       THIS IS NECESSARY IN CASE
*                                       THE ACCESS METHOD ROUTINES
*                                       ISSUE EOV, SO THAT EOV
*                                       CAN FIND THE USER REGS
         DROP  RBASE                                             M0189
         LR    RF,R0                    INITIALIZE R15 FOR SYNCH M0189
         DROP  RF                                                M0189
         SYNCH (15)                     LINK TO TRUNC            M0189
         EJECT
EIN03630 EQU   *                        RETURN FROM TRUNC        Y02082
         BALR  RET,0                    SET UP ADDRESSABILITY
         USING *,RET                    BASE FOR NEXT BRANCH     Y02080
         BAL   RET,EIN05150             GET SVRB PTR
         DROP  RET                      BASE NOT NEEDED          Y02080
         USING RBSECT,RF                                         M0189
         LM    R2,RC,RBEXSAVE           RESTORE REGS 2-12        M0189
         DROP  RF                                                M0189
         DEBCHK (RDCB)                  VALIDATE DEB             Y01021
         LR    RDEB,R1                  RESTORE VALID DEB ADDR   Y01021
         LA    R1,DEBBASIC-DEBXTNP      OFFSET TO EXTENSION      Y02134
         SR    RDEB,R1                  RDEB POINTS TO EXT. ADDR Y02134
         USING DEBXTNP,RDEB                                      Y02134
         MVC   DXDEBXAD,DEBXTNP         UPDATE DEB EXT ADDR      Y02134
         LA    RDEB,DEBBASIC            RELOAD RDEB TO DEB START Y02134
         USING DEBBASIC,RDEB                                     Y02134
         MVC   DXUCBADR+K1(L'DXUCBADR-K1),DEBSUCBA+K1 UPDATE UCB
         USING EIN03200,RBASE                                    M0189
*
*  ISSUE EXTRA PUT TO WRITE LAST RECORD IF PUT LOCATE
*
         MODESET KEYADDR=DXUKEY,WORKREG=1 CALLER'S KEY           Y02082
*
         OI    DCBCIND2,DCBC2FEO        TURN ON FEOV BIT        SA52460
         TM    DCBMACRF+K1,K20          DCB USING LOCATE MODE
         BZ    EIN03650                 YES BRANCH
         TM    DEBOPATB,DEBOPUPD        OPEN FOR UPDATE?         Y02134
         BNO   EIN03900                 IF NOT, BRANCH
         TM    DEBOPATB,K15-DEBOPUPD    MAYBE--TEST FURTHUR      Y02134
         BNZ   EIN03900                 NOT, BRANCH
         EJECT
EIN03650 EQU   *                        LOCATE MODE/UPDATE       M0189
         LR    R1,RDCB                  GET DCB ADDESS IN PROPER REG
*
         BAL   RET,EIN05150             GET PTR TO FEOV SVRB     M0189
         USING RBSECT,RF                                         M0189
         MODESET EXTKEY=SUPR            SVRB KEY                 Y02082
         STM   R2,RC,RBEXSAVE           SAVE REGS 2-12 IN SVRB   M0189
*                                       EXTENDED SAVE AREA
         MODESET KEYADDR=DXUKEY,WORKREG=2  ASSUME CALLERS KEY    Y02082
         CLI   DXUKEY,X80               IS CALLER IN SYSTEM KEY  Y02082
         BNL   EIN03670                 BRANCH IF NO             Y02082
         LM    R2,R8,RBGRS2             RESTORE USER REGS 2-8    Y02082
         L     RF,DCBPUT-IHADCB(,R1)    GET ADDR OF PUT ROUTINE  Y02082
         BALR  RET,RF                   LINK TO PUT ROUTINE      Y02082
         BALR  RET,0                    ESTABLISH ADDRESSABILITY Y02082
         USING *,RET                    BASE FOR NEXT BRANCH     Y02080
         B     EIN03680                 BRANCH TO RESTORE REGS   Y02082
         DROP  RET                      BASE NOT NEEDED          Y02080
EIN03670 EQU   *                        SETUP FOR SYNCH          Y02082
         LM    R2,R8,RBGRS2             RESTORE USER REGS 2-8    M0189
         DROP  RBASE                                             M0189
*                                       THIS IS NECESSARY IN CASE
*                                       THE ACCESS METHOD ROUTINES
*                                       ISSUE EOV, SO THAT EOV
*                                       CAN FIND THE USER REGS
         DROP  RF                                                M0189
         L     RF,DCBPUT-IHADCB(,R1)    GET ADDR OF PUT ROUTINE  Y02082
         SYNCH (15)                     LINK TO PUT IN PP STATE  M0189
         EJECT
EIN03680 EQU   *                        RETURN FROM PUT ROUTINE  Y02082
         BALR  RET,0                    ESTABLISH ADDRESSABILITY
         USING *,RET                    BASE FOR NEXT BRANCH     Y02080
         BAL   RET,EIN05150             GET SVRB PTR             M0189
         DROP  RET                      BASE NOT NEEDED          Y02080
*                                       RET IS USED AS BASE REG
*                                       FOR THIS INSTRUCTION BECAUSE
*                                       UPON RETURN FROM SYNCH,
*                                       IT IS POINTING HERE AND RBASE
*                                       HAS NOT BEEN REINITIALIZED
         USING RBSECT,RF                                         M0189
         LM    R2,RC,RBEXSAVE           RESTORE REGS 2-12        M0189
         DROP  RF                                                M0189
         LR    RET,R1                   SAVE RECORD ADDR         Y01021
         MODESET EXTKEY=DATAMGT         RETURN TO DM KEY         Y02082
         DEBCHK (RDCB)                  VALIDATE DEB             Y01021
         LR    RDEB,R1                  LOAD VALID DEB ADDRESS   Y01021
         LA    R1,DEBBASIC-DEBXTNP      OFFSET TO EXTENSION      Y02134
         SR    RDEB,R1                  RDEB POINTS TO EXT. ADDR Y02134
         USING DEBXTNP,RDEB                                      Y02134
         MVC   DXDEBXAD,DEBXTNP         UPDATE DEB EXT ADDR      Y02134
         LA    RDEB,DEBBASIC            RELOAD RDEB TO DEB START Y02134
         USING DEBBASIC,RDEB                                     Y02134
         MVC   DXUCBADR+K1(L'DXUCBADR-K1),DEBSUCBA+K1 UPDATE UCB
         USING EIN03200,RBASE                                    M0189
         LR    R1,RET                   RESTORE RECORD ADDR      Y01021
         MODESET KEYADDR=DXUKEY,WORKREG=15 CALLER'S KEY          Y02082
         OI    DCBCIND2,DCBC2FEO        TURN ON FEOV BIT        SA52460
         TM    DCBRECFM,DCBRECUN        U RECORDS USED
         BC    9,EIN03800               YES BRANCH
         TM    DCBRECFM,DCBRECF         U OR F RECORDS USED      YM5563
         BO    EIN03800                 YES BRANCH
         LA    R0,K4                    GET CONSTANT OF FOUR
         SR    R1,R0                    REDUCE RECORD ADDRESS BY FOUR
         XC    K0(K6,R1),K0(R1)         ZERO LARGE AND SMALL LL FIELDS
         MVI   K1(R1),K4                STORE LL OF 4 IN BUFFER
         B     EIN03900                 BR TO BACK UP IOB PTR
         EJECT
EIN03700 EQU   *                        TEST FOR FEOV REPOSITIONING
*        PCI AND FEOV REPOSITIONING ARE MUTUALLY EXCLUSIVE       YM1194
         TM    DCBCIND2,DCBC2CHN        IS PCI BEING USED        YM1194
         BO    EIN03750                 BRANCH IF YES-DCBIOBAD   YM1194
*                                       TEST IS INVALID          YM1194
         CLC   DCBIOBAD,MASKFLAG        IS THIS REPOSITIONING
*                                       FEOV
         BNE   EIN05100                 YES,REPOSITIONING MODULE
EIN03750 EQU   *                        NOT FEOV REPOSITIONING   YMRELE
         OI    DCBCIND2,DCBC2FEO        SET FEOV MODE ON
         B     EIN03600                 BR TO QSAM CHECK
*
EIN03800 EQU   *                        UPDATE RECAD
         ST    R1,DCBRECAD              STORE IN DCB
*
* MUST BACK UP IOB AS PUT LOCATE WILL ADVANCE IOB TO NEXT. IN THE
* CASE OF COBOL THEY ARE AHEAD OF THEMSELVES BY ONE PUT LOCATE
* AND DO NOT WISH TO OUTPUT. THEY STOP PUT LOCATE BY SETTING
* RECAD TO START OF BUFFER WHICH CAUSES PUT TO FIND A RECORD
* LENGTH OF ZERO AND RETURN WITHOUT ADVANCING THE IOB ADDRESS.
*
EIN03900 EQU   *                        GET IOBS
         L     RC,DCBIOBA               GET ADDR OF IOB PAST THE
*                                       LAST ONE SCHEDULED FOR
*                                        SIMPLE-PUT-MOVE-VARIABLE
         LA    RC,K0(RC)
         LR    R7,RC                    SAVE IOBA
         LR    RET,RC                   SAVE IOBA
*
EIN04000 EQU   *                        TEST FOR COMPLETE
         L     R7,K0(R7)                GET NEXT IOB
         LA    R7,K0(R7)                GET ADDR
         TM    K4(R7),ECBCOMPL          IS IOB COMPLETED
         BO    EIN04100                 YES CHECK IF IN ERROR
         L     R1,K12(R7)               NO GET ECB ADDRESS
         WAIT  ECB=(1)                  WAIT ON IOB
         EJECT
EIN04100 EQU   *                        TEST FOR UPDATE
         TM    DEBOPATB,DEBOPUPD        OPEN FOR UPDATE?         Y02134
         BNO   EIN04150                 BR IF NOT               SA53132
         TM    DEBOPATB,K15-DEBOPUPD    MAYBE--TEST FURTHUR      Y02134
         BNZ   EIN04150                 BR IF NOT               SA53132
         SR    R5,R5                    CLEAR REG               SA53132
         IC    R5,DCBOFFSR              OFFS TO READ CCW        SA53132
         AR    R5,R7                    ADDR OF READ CCW        SA53132
         SH    R5,CONST56               END OF WRITE CHAN PGM   SA53132
         CLI   K16(R5),CCWSTSEC         RPS CHAN PGM?           SA53132
         BE    EIN04120                 BR IF YES               SA53132
         AH    R5,CONST8                ADJUST FOR NON-RPS PGM  SA53132
* THE PUT MODULE IGG019AE TURNED OFF THE COMMAND CHAIN BIT TO   SA53132
* PREVENT READING AFTER FEOV WAS ISSUED.IT MUST BE RESTORED NOW.SA53132
EIN04120 OI    K4(R5),CCWCMDCH          TURN ON COMM CHAIN BIT  SA53132
EIN04150 EQU   *                        NOT UPDATE              SA53132
         CR    R7,RC                    IS THE NEXT IOB = IOBA
         BE    EIN04154                 YES,TEST COMPLETION      YM5563
         LR    RET,R7                   SAVE THIS IOB BEFORE NEXT
*                                        IS OBTAINED
         B     EIN04000                 GO TRY AGAIN
*
EIN04154 EQU   *                        TEST FOR COMPLETION     YM5563
         CLI   K4(RC),ECBCOD7F          IOBA IN ERROR?          YM5563
         BE    EIN04155                 NO, TEST PREVIOUS IOB   YM5563
         LR    RET,RC                   SET IOB TO PREVIOUS     YM5563
EIN04155 EQU   *                        TEST PREVIOUS IOB       YM5563
         CLI   K4(RET),ECBCOD7F         PREVIOUS IOB IN ERROR?  YM5563
         BE    EIN04200                 NO, ALL DONE            YM5563
         CR    RET,RC                   TEST IF IOB HAS BEEN    YM5563 C
                                        BACKED UP               YM5563
         BE    EIN04156                 BRANCH IF NO            YM5563
         MODESET EXTKEY=DATAMGT         GET IN D.M. KEY         YM3150
         MVI   DXCCW1,ECBCOD7F          SET INDICATOR           YM5563
         MODESET KEYADDR=DXUKEY,WORKREG=7 RETURN TO CALLER KEY  YM3150
EIN04156 EQU   *                        IOB NOT BACKED UP       YM5563
         IC    R7,DCBIOBA               GET HIGH ORDER BYTE     YM5563
         SLL   R7,K24                   SHIFT TO HIGH BYTE      YM5563
         OR    RET,R7                   PUT INTO REG 14         YM5563
         ST    RET,DCBIOBA              SET DCBIOBA TO THE      YM5563 C
                                        CORRECT IOB             YM5563
         LA    RET,K0(RET)              CLEAR  HIGH ORDER BYTE  YM5563
         LR    RC,RET                   INITIALIZE REGISTER     YM5563
         LR    R7,RC                    SAVE IOB                YM5563
EIN04157 EQU   *                        SEARCH IOB'S            YM5563
         L     R7,K0(R7)                GET NEXT IOB            YM5563
         LA    R7,K0(R7)                GET ADDRESS             YM5563
         CLI   K4(R7),ECBCOD7F          IS IOB IN ERROR         YM5563
         BNE   EIN04400                 YES GO TO ERROR ROUTINE YM5563
         LR    RET,R7                   SAVE PREVIOUS IOB       YM5563
         B     EIN04157                 LOOP TO FIND ERROR      YM5563
         EJECT
EIN04200 EQU   *                        TEST FOR UPDATE
         L     RC,DCBIOBA               BE SURE RB HAS CURRENT IOB ADDR
         L     RDEB,DCBDEBAD            LOAD DEB ADDR            Y02082
*
         TM    DEBOPATB,DEBOPUPD        OPEN FOR UPDATE?         Y02134
         BNO   EIN04300                 IF NOT, BRANCH.
         TM    DEBOPATB,K15-DEBOPUPD    MAYBE--TEST FURTHUR      Y02134
         BZ    EIN04600                 YES, BRANCH
*
EIN04300 EQU   *                        DSAB OUTPUT ENTERS HERE
         ST    RC,K4(K0,RC)             SET ADDRESS OF THIS IOB FOR EOV
*                                       IT WILL NOT RESCHEDULE ANY FOR
*                                       OUTPUT DATA SET AFTER FEOV.
         MVI   K4(RC),ECBCOD7F          SET THIS IOB COMPLETE, NO ERROR
         B     EIN05100                 GO LINK TO EOV.
         EJECT
EIN04400 EQU   *                        ENTER ERROR CHECKING ROUTINE
*
*              FIND THE ERROR IOB AND GO TO THE ERROR ROUTINE WITH THE
*              ADDRESS OF THE IOB PREVIOUS TO IT
*
         MODESET EXTKEY=DATAMGT         RETURN TO DM KEY         Y02082
         STM   R0,RF,K8(RCORE)          SAVE ALL REGS
         MODESET EXTKEY=SUPR            SVRB KEY                 Y02082
*
         LR    R1,RDCB                  STORE DCB IN PROPER REG 1
         LR    R0,RET                   SAVE IOB ADDR            M0189
         BAL   RET,EIN05150             GET PTR TO FEOV SVRB     M0189
         USING RBSECT,RF                                         M0189
*                                       REGS 2-8 BEFORE SYNCHING
         STM   R2,RC,RBEXSAVE           SAVE REGS 2-12 IN SVRB   M0189
*                                       EXTENDED SAVE AREA
         MODESET KEYADDR=DXUKEY,WORKREG=9 CALLER'S KEY           Y02082
         MVC   K28(K44,RD),RBGRSAVE     MOVE USER REGS 0-8 TO    M0189
*                                       SAVE AREA PASSED TO SAM
*                                       SO THAT IF SAM ISSUES
*                                       EOV, THE RIGHT REGS WILL
*                                       BE SWAPPED
         LM    R9,RD,RBGRS9             RESTORE USERS REGS 9-13 SA57952
*                                       SO THAT IF SAM ISSUES EOV
*                                       AND A SYNAD EXIT IS TAKEN
*                                       THE USER WILL RECEIVE HIS
*                                       REGS
         DROP  RF                                                M0189
         L     RF,DCBPERR-IHADCB(,R1)   GET PUT ERR RTN ADDR     M0189
         EJECT
         CLI   DXUKEY,X80               IS CALLER IN USER KEY    Y02082
         BNL   EIN04540                 BRANCH IF YES            Y02082
         LR    RBASE,R0                 PUT IOB ADDR IN PROPER   Y02082
*                                       REGISTER                 Y02082
         DROP  RBASE                                             Y02082
         BALR  RET,RF                   BRANCH TO PUT ERROR RTN  Y02082
         BALR  RET,0                    ESTABLISH ADDRESSABILITY Y02082
         USING *,RET                    BASE FOR NEXT BAL        Y02080
         B     EIN04560                 BRANCH TO RESTORE REGS   Y02082
         DROP  RET                      BASE NOT NEEDED          Y02080
EIN04540 EQU   *                        SYNCH                    Y02082
         USING EIN03200,RBASE                                    Y02082
         MODESET EXTKEY=SUPR            SYSTEM KEY FOR SYNCH     Y02082
         LR    RBASE,R0                 PUT IOB ADDR IN PROPER   Y02082
*                                       REGISTER                 Y02082
         DROP  RBASE                                             Y02082
         SYNCH (15)                     LINK TO PERR IN PP STATE
*
*          AT THIS POINT CONTROL GOES TO THE PUT ERROR ROUTINE
*        TO DETERMINE THE CAUSE OF THE EXCEPTIONAL CONDITION.  IF MORE
*        SPACE IS REQUIRED, THE VOLUME SWITCHING ROUTINES GET CONTROL.
*        CONTROL WILL RETURN FROM THE PUT ERROR ROUTINE WHEN ALL
*        OUTSTANDING REQUESTS HAVE BEEN RESCHEDULED.  IF THE
*        USER GETS A SYNAD ENTRY, THIS ROUTINE MAY NOT
*        REGAIN CONTROL.
         EJECT
EIN04560 EQU   *                        RETURN FROM PERR         Y02082
         BALR  RET,0                    ESTABLISH ADDRESSABILITY
         USING *,RET                    BASE FOR NEXT BAL        Y02080
         BAL   RET,EIN05150             GET SVRB PTR             M0189
*                                       RET IS USED AS BASE REG
*                                       FOR THIS INSTRUCTION BECAUSE
*                                       UPON RETURN FROM SYNCH,
*                                       IT IS POINTING HERE AND RBASE
*                                       HAS NOT BEEN REINITIALIZED
         DROP  RET                      BASE NOT NEEDED          Y02080
         MODESET EXTKEY=DATAMGT         RETURN TO DM KEY         Y02082
         USING RBSECT,RF                                         M0189
         L     RCORE,RBEXSAVE+K4*(R4-R2) RESTORE REG 4          SA54463
         LM    R0,RF,K8(RCORE)          RESTORE ALL REGS        SA54463
         DROP  RF                                                M0189
         DEBCHK (RDCB)                  VERIFY DEB               Y01021
         LR    RDEB,R1                  LOAD VERIFIED DEB        Y01021
         LA    R1,DEBBASIC-DEBXTNP      OFFSET TO EXTENSION      Y02134
         SR    RDEB,R1                  RDEB POINTS TO EXT. ADDR Y02134
         USING DEBXTNP,RDEB                                      Y02134
         MVC   DXDEBXAD,DEBXTNP         UPDATE DEB EXT ADDR      Y02134
         LA    RDEB,DEBBASIC            RELOAD RDEB TO DEB START Y02134
         USING DEBBASIC,RDEB                                     Y02134
         MVC   DXUCBADR+K1(L'DXUCBADR-K1),DEBSUCBA+K1 UPDATE UCB
         USING EIN03200,RBASE                                    M0189
         LR    R7,RET                   LOAD PREVIOUS IOB       SA54463
         MODESET KEYADDR=DXUKEY,WORKREG=1 CALLER'S KEY           Y02082
         MVC   DCBIOBA+K1(K3),K50+K7(RCORE) MOVE IOB ADDR FROM  SA54463
*                                       SAVE AREA TO DCB        SA54463
         CLI   DXCCW1,ECBCOD7F          TEST IF BACK UP SW SET  YM5563
         BNE   EIN04000                 BRANCH IF NOT SET       YM5563
         L     R1,DCBIOBA               GET IOBA ADDRESS        YM5563
         MVC   DCBIOBA+K1(K3),K1(R1)    SET IOBA TO NEXT        YM5563
         MODESET EXTKEY=DATAMGT         SWITCH TO DATAMGT KEY    YM3874
         MVI   DXCCW1,K0                CLEAR INDICATOR         YM5563
         MODESET KEYADDR=DXUKEY,WORKREG=1  RTN TO CALLER'S KEY   YM3874
         B     EIN03900                 CHECK IOB'S ON QUEUE    YM5563
         EJECT
EIN04600 EQU   *                        SIMULATE END OF BUFFER
         MVC   DCBRECAD+K1(K3),DCBEOBAD+K1  SIMULATE EOB CONDITION
*
*  THIS WILL CAUSE THE UPDATE GET ROUTINE TO SCHEDULE THE LAST
*    REMAINING IOB BEFORE GIVING THE USER THE FIRST RECORD ON THE NEW
*     VOLUME
*
         SR    RPAR,RPAR                CLEAR REG
         SR    RET,RET                  CLEAR REG
         IC    RPAR,DCBWCPO             GET WRITE CHANNEL PROG. OFFSET
         IC    RET,DCBWCPL              GET WRITE CHANNEL PROG. LENGTH
         SLL   RET,K3                   CHANGE DB WDS TO BYTES
         LA    RPAR,K8(RPAR,RET)        COMBINE AND ADD 8 TO POINT
*                                         TO THE CP READ SEQUENCE
*
* RC HAS ADDRESS OF CURRENT IOB
*
         LA    RC,K0(RC)                CLEAR HI BYTE FOR COMPARISON.
         LR    R8,RC                    COPY ADDR FOR IOB MOD LOOP
*
EIN04700 EQU   *                        UPDATE IOB
         AR    RPAR,R8                  ADD IOB ADDR TO RD CP OFFSET
         ST    RPAR,K24(R8)             PLACE IN CHANNEL POINTER
         OI    K0(R8),IOBREAD           TURN ON ONLY READ FLAG
*
         SR    RPAR,R8                  RETURN R5 TO RD CP OFFSET
*
         L     R8,K0(R8)                LINK TO NEXT IOB
         LA    R8,K0(R8)                CLEAR HI BYTE FOR COMPARISON.
         CR    R8,RC                    WAS THIS IOB SET TO READ
         BE    EIN04300                 YES, BRANCH.
         B     EIN04700                 NO
         EJECT
*  PURGE ALL INPUT I/O.  (IF BASM, ALL READS AND WRITES ARE SUPPOSED
*  TO HAVE ALREADY BEEN CHECKED.)
*
EIN04800 EQU   *                        INPUT ENTERS HERE
*        PURGE OPTIONS ARE -
*          1 = PURGE REQUESTS ASSOCIATED WITH THIS DEB ONLY,
*          1 = POST THE PURGED IOB'S,                          @ZA02215
*          0 = ALLOW ACTIVE I/O TO QUIESCE,                    @ZA02215
*          0 = PURGE ALL REQUESTS,                             @ZA02215
*          0 = NORMAL PURGE (NOT TCB LIST),
*          0 = PURGE ALL QUEUES,
*          0 = PURGE BY DEB.
*
* SINCE A RESTORE IS NEVER DONE FOR TAPE DEVICES, WE WILL
* WAIT ON THE USERS IOB INSTEAD OF DOING A PURGE QUIESCE.
* WE ENTER HERE IN USERS KEY.
         TM    DCBDEVT,DCBDEVTP         IS IT TAPE             @ZA30750
         BZ    EIN04808                 BRANCH NO              @ZA30750
         TM    DCBCIND2,DCBC2CHN        CHAINED SCHEDULING     @ZA30750
         BNO   EIN04801                 BRANCH NO              @ZA30750
         L     RC,DCBIOBAD              GET CH SCHED IOB       @ZA30750
         LA    RC,0(RC)                 CLEAR HI BYTE          @ZA30750
         L     R1,K20(RC)               GET CH SCHED ECB       @ZA30750
         TM    0(R1),ECBPOST            IOB POSTED             @ZA30750
         BO    EIN04807                 YES CONTINUE           @ZA30750
         WAIT  ECB=(1)                  WAIT ON LIST           @ZA30750
         B     EIN04809                 CONTINUE               @ZA30750
EIN04801 L     RC,DCBIOBA               GET NORMAL IOB         @ZA30750
         LA    RC,0(RC)                 CLEAR HI BYTE          @ZA30750
         LR    RF,RC                    SAVE FOR COMPARE       @ZA30750
EIN04802 L     R1,K12(RC)               GET NORMAL ECB         @ZA30750
         TM    0(R1),ECBPOST            ECB POSED              @ZA30750
         BO    EIN04803                 YES CONTINUE           @ZA30750
         WAIT  ECB=(1)                  WAIT                   @ZA30750
EIN04803 L     RC,0(RC)                 GET NEXT IOB ADDR      @ZA30750
         LA    RC,0(RC)                 CLEAR HI BYTE          @ZA30750
         CR    RC,RF                    LAST IOB               @ZA30750
         BE    EIN04809                 YES CONTINUE           @ZA30750
         B     EIN04802                 TEST FOR COMPLETION    @ZA30750
EIN04808 MODESET EXTKEY=DATAMGT         DM KEY                 @ZA30750
         ST    RDEB,0(RCORE)            STORE DEB ADDRESS
         MVI   0(RCORE),X'C0'           OPTIONS TO PURGE WITH  @ZA02215
         XC    K4(K4,RCORE),K4(RCORE)   ZERO TCB ADDR / ECB FIELD
         LA    R0,DEBUSRPG              GET CHAINING ADDRESS     Y02134
         ST    R0,K8(RCORE)             STORE FOR PURGE
*
         PURGE (RCORE)                  ISSUE PURGE SVC
*
         WAIT  ECB=K4(RCORE)            WAIT FOR PURGE POST COMPLETE
*
EIN04807 MODESET KEYADDR=DXUKEY,WORKREG=1 CALLER'S KEY           Y02082
         ST    RC,K4(,RC)               PUT ADDR OF FIRST IOB TO BE
*                                       RESCHEDULED INTO ECB OF CURRENT
*                                       IOB, WHICH WILL BE THE LAST IOB
*                                       RESCHEDULED.
*
*  TEST IF A TAPE MARK WAS ENCOUNTERED BY AN UNCHECKED QSAM GET,
*  BECAUSE THIS AFFECTS THE DISPOSITION POSITIONING OF THE TAPE.
*  THE PRIOR PURGE MUST BE QUIESCE AND POST SO THAT THIS TEST CAN
*  BE MADE.                                                    @ZA02215
*
EIN04809 TM    DCBIFLGS,DCBIFPIO        ERRORS ASSC WITH INPUT
         BNO   EIN05100                 NO BRANCH
         TM    DCBCIND2,DCBC2QSM        IS DCB QSAM            @ZA02215
         BZ    EIN05100                 BR IF NO               @ZA02215
         TM    DEBOPATB,DEBOPOUT        WAS OPEN FOR INPUT     @ZA02215
         BNZ   EIN05100                 BR IF NO               @ZA02215
         L     RUCB,DEBSUCBA            GET UCB ADDRESS        @ZA02215
         CLI   UCBTBYT3,UCB3TAPE        IS THIS MAGNETIC TAPE  @ZA02215
         BNE   EIN05100                 BR IF NO               @ZA02215
*
         LR    RF,RC                    SAVE IOB ADDRESS       @ZA02215
*
EIN04900 EQU   *                        SKIP THROUGH IOBS        Y02082
         TM    K20(RC),CSWUNITX         TAPE MARK INDICATION     Y02082
         BO    EIN05000                 YES BRANCH
*
         L     RC,0(,RC)                GET NEXT IOB           @ZA02215
         LA    RC,0(,RC)                CLEAR HI BYTE          @ZA02215
*
         CR    RF,RC                    ARE IOB ADDRS THE SAME @ZA02215
         BNE   EIN04900                 BR NO TO TEST NEXT IOB @ZA02215
         B     EIN05100                 BR TO NEXT FUNCTION    @ZA02215
*
EIN05000 EQU   *                        SET TAPE MARK READ BIT
         OI    DCBOFLGS,DCBOEOF         SET CONDITION FOR END OF VOLUME
         EJECT
*
*  FREEMAIN 72 BYTE USER SAVE AREA USED FOR SAM PUT ROUTINES
*
EIN05100 EQU   *                        FREE SAVE AREA
         LR    R1,RD
         MODESET EXTKEY=DATAMGT         RETURN TO DM KEY         Y02082
         SR    RD,RD                    SR FOR IC                Y02082
         IC    RD,DXUKEY                KEY OF CORE TO FREE      Y02082
         SRL   RD,K4                    PUT KEY IN LOW 4 BITS    Y02082
         IECRES FREE,A=(1),LV=72,KEY=(RD),PREFIX=NO,             Y02082*
               STM=(0,14,DXXPREFX)      FREE USER SAVE AREA      Y02082
         EJECT
*
*        SET UP COMMUNICATION BIT FOR THE END OF VOLUME ROUTINES
*
         MODESET KEYADDR=DXUKEY,WORKREG=15 USER KEY              YM1303
         OI    DCBCIND2,DCBC2FEO        SET INDIC FOR NEXT EXEC EOV
         L     RDEB,DCBDEBAD            LOAD DEB ADDR            YM1303
         MODESET EXTKEY=DATAMGT         RETURN TO DM KEY         Y02082
*
         L     RUCB,DEBSUCBA            GET UCB ADDRESS          YM1303
         MVC   DXXMODID,MOD0Z3A         MOVE IN NAME             A48604
         MVC   DXXMODEP+K1(K3),MOD0Z3A+K2 AND TTR TO XCTL AREA   Y02080
*
EIN05120 EQU   *                        GET READY TO XCTL        A48604
         ST    R0,DXWORK1               SAVE R0 FROM IECRES CALL YM1320
         MODESET EXTKEY=DATAMGT         RETURN TO DM KEY IF NEED Y02082
         IECRES INIT,DCBCOPY=TOWKAR,PREFIX=DXXPREFX,             Y02082*
               STM=(3,14,DXXPREFX)      PASS NEXT MOD COPIED DCB Y02082
         EJECT
         L     R0,DXWORK1               REFRESH R0               YM1320
         CLI   DXWCOPYE,K0              WAS COPY OK              Y02082
         BE    EIN05130                 BRANCH IF YES            Y02082
         CLC   DXXMODID,ABEND2Z         GOING TO PROBLEM DET     Y02082
         BNE   EIN03460                 EXIT IF NO               Y02082
EIN05130 EQU   *                        SET FIRST LOAD BIT       Y02082
         CLC   DXXMODID,MOD0Z3A         GOING TO IFG0551F        Y02144
         BNE   EIN05140                 BR IF NO                 Y02144
         L     RF,DXATCOM3              GET RRPLIST PTR          Y02144
         USING RRPLIST,RF                                        Y02144
         OI    RRFLAGS2,RRFFIN1         SET 1ST LOAD COMPLETED   Y02144
         DROP  RF                                                Y02144
EIN05140 EQU   *                        TRANSFER CONTROL         Y02144
         MVC   DXXATTRB(K7),XCTLCN3A    SET UP FOR XCTL
         MVC   DXXMODNM(K6),IGG3A       BASIC EOV MODULE NAME
         XR    RET,RET                  ZERO BRANCH REG          X02989
         LA    RWTG,DXXMODNM            GET ADDR OF MOD NAME     A48604
         IECRES LOAD,PREFIX=DXXPREFX,BRANCH=DIRECT               Y02134
         EJECT
EIN05150 EQU   *                        GET SVRB ADDRESS         M0189
*
*        SUBROUTINE TO LOAD CURRENT SVRB ADDRESS INTO RF.
*        RETURN IS ON RET.
*
         L     RF,CVTPTR                ADDRESS OF CVT           Y02134
         L     RF,CVTTCBP-CVT(,RF)      TCB VECTORS              Y02134
         L     RF,K4(,RF)               CURRENT TCB ADDRESS      Y02134
         L     RF,TCBRBP-TCB(,RF)       PTR TO FEOV RB           M0189
         BR    RET                      RETURN TO CALLER         M0189
*
BRCODE   DS    0H                       TRUNC CALL               M0189
*
*        CALLING SEQUENCE TO ENTER TRUNC ROUTINE
*
         L     RF,DCBPUT-IHADCB(,R1)    PUT ADDR FROM DCB        M0189
         USING PUTDSECT,RF              USING TO ENTER TRUNC     Y02080
         B     TRUNCRTN                 BRANCH TO TRUNC          M0189
         DROP  RF                       RF NOT NEEDED            Y02080
         SPACE 2
EIN05160 EQU   *                        CALLER ENQED ON TIOT EXC YM3185
*
*   THE CALLER OF FEOV HOLDS THE TIOT RESOURSE EXCLUSIVELY.    @ZA29752
*   THIS SHOULD NEVER VALIDLY HAPPEN AND CANNOT BE ALLOWED.    @ZA29752
*
         SR    RF,RF                    ZERO REG               @ZA29752
         SR    RC,RC                    ZERO REG               @ZA29752
         LA    RF,K20                   RETURN CODE            @ZA29752
         L     RC,ABND50D               ABEND CODE             @ZA29752
         ABEND (RC),DUMP                                       @ZA29752
         EJECT
*
***********************************************************************
*
*        CONSTANTS
*
ABND50D  DS    0F                                              @ZA29752
         DC    XL4'0000050D'                                   @ZA29752
IGG3A    DC    C'IFG055'                1ST 6 CHAR OF MOD NAME
MASKFLAG DC    F'1'                     MASK FOR IOBAD
CONST8   DC    H'8'                     CONSTANT 8              SA53132
CONST56  DC    H'56'                    CONSTANT 56             SA53132
XCTLCN3A DC    X'C378'                  XCTL ATTR.-REENT.,REUSEABLE
*                                         NOT IN OV'LAY,NOT TEST,NOT
*                                         ONLY LOADABLE,BLOCK FORMAT,
*                                         EXECUTABLE,1 TEXT,COMPAT.,
*                                         ORIGIN AT 0,ENTRY PT.0,NO RLD
*                                         NO ESD,NO SYMBOL CARDS
         DC    X'0004000400'            TOTAL LENGTH  TEXT LENGTH
         DC    X'000000'                LENGTH OF WTG TABLE
SUBSYSAM DEBCHK AM=SUBSYS,MF=L          SUBSYSTEM ACCESS METHOD  Y02120*
                                        TYPE IN DEBAMTYP         Y02120
         EJECT
XCTLTA3A XCTLTABL  ID=(ABEND2Z,0P,MOD0Z3A,1F,FEOV,IGC0003A,      Y02080X
               ABCD0P,0P),                                       Y02083X
               SVC=055,BRT=YES,LENGTH=                           Y02080
         EJECT
         IECDSECS DCB,ACB,UCB,IEZDEB,MAIN,CVT,TCB,WTG,PREFX,     Y02134*
               TIOT,DSAB,                                        Y02083X
               RB,RRPL,EXPAND=YES                                Y02144
PUTDSECT DSECT ,                        DSECT FOR TRUNC RTN      Y02080
         DS    F                        PUT ROUTINE              Y02080
         DS    F                        PUTX ROUTINE             Y02080
TRUNCRTN DS    F                        TRUNC ROUTINE            Y02080
         EJECT
         IECEQU AOS=YES,IEZDEB=YES                               Y02134
         END
