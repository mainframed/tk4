         TITLE 'IMDUSRFF - OPEN/CLOSE/EOV GTF UTILITY FORMAT APPENDAGE *
                        '
IMDUSRFF CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IMDUSRFF  75.005'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  LA    @09,4095(,@11)                                      0001
         LA    @08,4095(,@09)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@09                                    0001
         USING @PSTART+8190,@08                                    0001
         EJECT
*   WTABPTR=R1->GCORPTR;            /* INITIALIZE PTR TO WORK TABLE
*                                      GOTTEN CORE AREA              */
         L     WTABPTR,GCORPTR(,R1)                                0065
*   SACALLER=RD;                    /* SAVE CALLER'S SAVE AREA PTR   */
         ST    RD,SACALLER(,WTABPTR)                               0066
*   RD->SACALLED=ADDR(SAVAREA);     /* SAVE CALLED SAVE AREA PTR     */
         ST    WTABPTR,SACALLED(,RD)                               0067
*   RD=ADDR(SAVAREA);               /* PT TO CALLED SAVE AREA        */
         LR    RD,WTABPTR                                          0068
*   OBUFRPTR=R1->OUTPTR;            /* INITIALIZE OUTPUT BFR PTR     */
         L     @10,OUTPTR(,R1)                                     0069
         ST    @10,OBUFRPTR(,WTABPTR)                              0069
*   GPARMPTR=R1;                    /* INITIALIZE PTR TO INPUT     0070
*                                      PARAMETER LIST                */
         ST    R1,GPARMPTR(,WTABPTR)                               0070
*   RFY                                                            0071
*     R1 UNRSTD;                                                   0071
*   OUTBUFFR='';                    /* CLEAR OUTPUT BFR TO BLANKS    */
*                                                                  0072
         MVI   OUTBUFFR(@10),C' '                                  0072
         MVC   OUTBUFFR+1(109,@10),OUTBUFFR(@10)                   0072
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE WHETHER THIS IS FIRST ENTRY FROM GTF                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0073
*   IF FLAGS(1)='1'B THEN           /* NOT FIRST ENTRY FROM GTF,   0073
*                                      INITIALIZATION HAS BEEN DONE  */
         TM    FLAGS(WTABPTR),B'10000000'                          0073
         BO    @RT00073                                            0073
*     GOTO CALCBMN;                 /* GO GET PTR TO CONTROL BLOCK 0074
*                                      MONITOR AND BRANCH TO IT      */
*   ELSE                                                           0075
*     ;                             /* THIS IS FIRST ENTRY FROM GTF,
*                                      INITIALIZATION IS NECESSARY   */
*   SCANPTR=ADDR(SCANTBLE);         /* INITIALIZE PTR TO SCANTBLE  0076
*                                      TABLE TO SCAN FOR TRACE CODE. */
         LA    @10,SCANTBLE                                        0076
         ST    @10,SCANPTR(,WTABPTR)                               0076
*   BUFRPTR=INPTR;                  /* INITIALIZE PTR TO INPUT RECORD
*                                      ADDRESS                       */
         L     @10,GPARMPTR(,WTABPTR)                              0077
         L     @10,INPTR(,@10)                                     0077
         ST    @10,BUFRPTR(,WTABPTR)                               0077
*   LNGTH=INBUFFER(1:2);            /* LENGTH OF INPUT BUFFER IS   0078
*                                      TAKEN FROM 1ST TWO BYTES      */
         MVC   LNGTH(2,WTABPTR),INBUFFER(@10)                      0078
*SCAN:                                                             0079
*                                                                  0079
*   /*****************************************************************/
*   /*                                                               */
*   /* HAS END OF SCANTBLE BEEN REACHED                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0079
*   IF TRCCODE=ZERO                 /* ZERO IS TABLE END       YM8285*/
*     THEN                          /* END OF SCANTBLE REACHED, DATA
*                                      WILL NOT BE PRINTED           */
SCAN     L     @10,SCANPTR(,WTABPTR)                               0079
         CLI   TRCCODE(@10),0                                      0079
         BE    @RT00079                                            0079
*     GOTO RETURN8;                 /* GO MAKE FINAL EXIT TO GTF, DO
*                                      NOT PRINT DATA                */
*   ELSE                            /* TRACE CODES ARE NOT EQUAL     */
*                                                                  0081
*     /***************************************************************/
*     /*                                                             */
*     /* FIND A MATCH BETWEEN THE TRACE CODE KEY IN THE SCANTBLE &   */
*     /* THE TRACE CODE IN THE FIRST BYTE OF THE INPUT TRACE DATA    */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0081
*     IF DATA(1)=TRCCODE            /* TEST TRACE CODE         YM8285*/
*       THEN                        /* THE TRACE CODES IN SCANTBLE 0081
*                                      KEY AND THE INPUT TRACE DATA
*                                      MATCH. THIS IS THE PROPER   0081
*                                      SCANTBLE ENTRY                */
         L     @03,GPARMPTR(,WTABPTR)                              0081
         L     @03,DATAPTR(,@03)                                   0081
         CLC   DATA(1,@03),TRCCODE(@10)                            0081
         BE    @RT00081                                            0081
*       GOTO BLDTBL;                /* GO BUILD THE WORK TABLE USING
*                                      THIS SCANTBLE ENTRY           */
*     ELSE                          /* MORE ENTRIES IN SCANTBLE      */
*       SCANPTR=SCANPTR+LENGTH(BASDSCAN);/* INCREMENT SCANTBLE ENTRY
*                                      PTR TO NEXT ENTRY             */
         AL    @10,@CF00089                                        0083
         ST    @10,SCANPTR(,WTABPTR)                               0083
*   GOTO SCAN;                      /* GO LOOP TO CHECK NEXT ENTRY   */
*                                                                  0084
         B     SCAN                                                0084
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD THE WORK TABLE (WORKTABL) FOR USE BY THE CONTROL BLOCK  */
*   /* MONITORS, TRANSLATE ROUTINE, ETC. UPON FINDING THE CORRECT    */
*   /* SCANTBLE ENTRY                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0085
*BLDTBL:                                                           0085
*   BUFRPTR=DATAPTR+LENGTH(TRCCODE);/* POINT TO DATA IN BUFFER BEYOND
*                                      TRACE CODE                    */
BLDTBL   L     @10,GPARMPTR(,WTABPTR)                              0085
         LA    @03,1                                               0085
         AL    @03,DATAPTR(,@10)                                   0085
         ST    @03,BUFRPTR(,WTABPTR)                               0085
*   LNGTH=LNGTH-(BUFRPTR-INPTR);    /* SET LENGTH TO LENGTH OF DATA
*                                      TO BE FORMATTED               */
         SL    @03,INPTR(,@10)                                     0086
         LCR   @03,@03                                             0086
         AH    @03,LNGTH(,WTABPTR)                                 0086
         STH   @03,LNGTH(,WTABPTR)                                 0086
*   DTBLPTR=DPNTR;                  /* PTR TO DATA TABLE             */
         L     @10,SCANPTR(,WTABPTR)                               0087
         L     @03,DPNTR(,@10)                                     0087
         ST    @03,DTBLPTR(,WTABPTR)                               0087
*   TTBLPTR=TITLPTR;                /* PTR TO TITLE TABLE            */
         L     @03,TITLPTR(,@10)                                   0088
         ST    @03,TTBLPTR(,WTABPTR)                               0088
*   CBMONPTR=CBPTR;                 /* PTR TO CONTROL BLOCK MON      */
         L     @10,CBPTR-1(,@10)                                   0089
         LA    @10,0(,@10)                                         0089
         ST    @10,CBMONPTR(,WTABPTR)                              0089
*   FLAGS(1)='1'B;                  /* SET SECOND ENTRY SWITCH       */
*                                                                  0090
         OI    FLAGS(WTABPTR),B'10000000'                          0090
*   /*****************************************************************/
*   /*                                                               */
*   /* LOAD THE ADDRESS OF THE APPROPRIATE CONTROL BLOCK MONITOR INTO*/
*   /* A REGISTER AND BRANCH TO THE CONTROL BLOCK REGISTER           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0091
*CALCBMN:                                                          0091
*   CBMONREG=CBMONPTR;              /* LOAD ADDRESS OF CONTROL BLOCK
*                                      MONITOR IN REG.               */
CALCBMN  L     CBMONREG,CBMONPTR(,WTABPTR)                         0091
*   GEN;                                                           0092
         BR    CBMONREG                 GO TO CONTROL BLOCK MONITOR
*RETURN8:                           /* RETURN TO EDIT AND TELL IT NOT
*                                      TO PRINT THE OUTPUT BUFFER BUT
*                                      TO GET THE NEXT LOGICAL RECORD*/
*   FLAGS(1)='0'B;                  /* TURN OFF SECOND TIME SW       */
RETURN8  NI    FLAGS(WTABPTR),B'01111111'                          0093
*   RD=SACALLER;                    /* PT TO SAVE AREA OF CALLER     */
         L     RD,SACALLER(,WTABPTR)                               0094
*   RETURN CODE(8);                                                0095
         LA    @15,8                                               0095
         L     @14,12(,@13)                                        0095
         LM    @00,@12,20(@13)                                     0095
         BR    @14                                                 0095
*   GEN(EJECT);                                                    0096
         EJECT
*                                                                  0097
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT MONITOR (FORMON) THIS ROUTINE WILL DETERMINE WHETHER A */
*   /* TITLE OR DATA LINE IS TO BE PRINTED. IF A TITLE IS TO BE      */
*   /* PRINTED, THEN THE TITLE IS TAKEN FROM THE TABLE AND MOVED TO  */
*   /* THE OUTPUT BUFFER, THE BUFFER POINTER IS UPDATED, THE DATA    */
*   /* SWITCH IS SET TO ONE, AND A RETURN CODE OF 0 IS PASSED TO THE */
*   /* GTF UTILITY. THIS RETURN CODE REQUESTS GTF TO PRINT THE BUFFER*/
*   /* AND RETURN TO THE FORMAT APPENDAGE. IF A DATA LINE IS TO BE   */
*   /* PRINTED, THE OUTPUT BUFFER POINTER IS UPDATED BY NINE BYTES,  */
*   /* AND THE TRANSLATE ROUTINE IS CALLED TO MOVE THE DATA TO THE   */
*   /* BUFFER AND TRANSLATE IT TO EBCDIC. THE TRANSLATE ROUTINE IS   */
*   /* PASSED A POINTER TO THE DATA TABLE, THE INPUT BUFFER, AND THE */
*   /* OUTPUT BUFFER. IT WILL MOVE FROM ZERO TO FOUR BYTES TO THE    */
*   /* OUTPUT BUFFER DEPENDING ON THE INFORMATION IN THE DATA TABLE. */
*   /* THE TRANSLATE IS CALLED TEN TIMES, ONCE FOR EACH TEN BYTE DATA*/
*   /* FIELD IN THE OUTPUT BUFFER. AFTER EACH CALL TO THE TRANSLATE  */
*   /* ROUTINE, POINTERS AND THE REMAINING LENGTH OF THE DATA IN THE */
*   /* INPUT BUFFER ARE UPDATED. THE OUTPUT BUFFER BEING FILLED, A   */
*   /* TEST IS MADE FOR END OF DATA IN THE INPUT BUFFER. IF IT IS END*/
*   /* OF DATA, A FINAL EXIT IS TAKEN TO THE GTF UTILITY TO PRINT THE*/
*   /* OUTPUT BUFFER (RETURN CODE 4). IF THE END OF THE INPUT RECORD */
*   /* HAS NOT BEEN REACHED, A CHECK IS MADE FOR THE NEXT LINE BEING */
*   /* A TITLE. IF THE NEXT LINE IS TO BE A TITLE, FLAGS BIT 1 IS SET*/
*   /* OFF. IF THE NEXT LINE IS TO BE DATA, FLAGS BIT 1 IS LEFT ON.  */
*   /* GTF IS PASSED A RETURN CODE OF 0 TO PRINT THE OUTPUT BUFFER   */
*   /* AND RETURN. FOR ALL BUT CONTROL BLOCKS WITH                   */
*   /* TRACE-DATA-DEPENDENT PROCESSING, THIS ROUTINE CONTROLS THE    */
*   /* BUILDING OF THE OUTPUT RECORDS. THIS ROUTINE IS ENTERED A     */
*   /* NUMBER OF TIMES, ONCE FOR EACH OUTPUT LINE, IN THE PROCESSING */
*   /* OF EACH INPUT TRACE RECORD.                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0097
*FORMON:                                                           0097
*                                                                  0097
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE WHETHER DATA OR TITLE IS TO BE PRINTED              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0097
*   IF FLAGS(2)='1'B THEN           /* BIT ON, DATA TO BE PRINTED    */
FORMON   TM    FLAGS(WTABPTR),B'01000000'                          0097
         BO    @RT00097                                            0097
*     GOTO PRNTDAT;                 /* GO CONSTRUCT OUTPUT BUFFER  0098
*                                      FROM DATA                     */
*   ELSE                                                           0099
*     ;                             /* TITLE TO BE PRINTED           */
*   OUTBUFFR=TITLET;                /* MOVE TITLE TO BUFFER          */
         L     @10,OBUFRPTR(,WTABPTR)                              0100
         MVI   OUTBUFFR+109(@10),C' '                              0100
         L     @03,TTBLPTR(,WTABPTR)                               0100
         MVC   OUTBUFFR(109,@10),TITLET(@03)                       0100
*   TTBLPTR=TTBLPTR+LENGTH(TITLET); /* INCREMENT TITLE TBL PTR       */
         AL    @03,@CF00241                                        0101
         ST    @03,TTBLPTR(,WTABPTR)                               0101
*   FLAGS(2)='1'B;                  /* TITLE THIS TIME, CHANGE SW TO
*                                      INDICATE DATA TO BE PRINTED 0102
*                                      NEXT TIME THROUGH             */
         OI    FLAGS(WTABPTR),B'01000000'                          0102
*RETURN0:                                                          0103
*   RD=SACALLER;                    /* PT TO SAVE AREA OF CALLER     */
RETURN0  L     RD,SACALLER(,WTABPTR)                               0103
*   RETURN CODE(0);                 /* INDICATE THAT GTF IS TO PRINT
*                                      THE OUTPUT BUFFER AND RETURN
*                                      TO IMDUSRFF                   */
         SLR   @15,@15                                             0104
         L     @14,12(,@13)                                        0104
         LM    @00,@12,20(@13)                                     0104
         BR    @14                                                 0104
*PRNTDAT:                                                          0105
*   OBUFRPTR=OBUFRPTR+9;            /* INCR OUTPUT BUFFER PTR TO SKIP
*                                      INITIAL BLANKS                */
*                                                                  0105
PRNTDAT  LA    @10,9                                               0105
         AL    @10,OBUFRPTR(,WTABPTR)                              0105
         ST    @10,OBUFRPTR(,WTABPTR)                              0105
*   /*****************************************************************/
*   /*                                                               */
*   /* REPEATEDLY CALL TRANSLATE ROUTINE TO FILL OUTPUT BUFFER FIELDS*/
*   /* WITH TRANSLATED DATA                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0106
*   DO COUNT=1 TO 10 BY 1;          /* LOOP THROUGH NO. OF DATA    0106
*                                      FIELDS IN OUTPUT BFR          */
         LA    @10,1                                               0106
         STH   @10,COUNT(,WTABPTR)                                 0106
@DL00106 DS    0H                                                  0107
*     CALL XLATE;                   /* CALL TRANSLATE                */
         BAL   @14,XLATE                                           0107
*     OBUFRPTR=OBUFRPTR+10;         /* INCR OUTPUT BFR PTR BY DATA 0108
*                                      FIELD LENGTH                  */
         LA    @10,10                                              0108
         AL    @10,OBUFRPTR(,WTABPTR)                              0108
         ST    @10,OBUFRPTR(,WTABPTR)                              0108
*     BUFRPTR=BUFRPTR+DATAT;        /* INCR INPUT BFR PTR BY LENGTH
*                                      OF INPUT DATA JUST FORMATTED  */
         L     @10,DTBLPTR(,WTABPTR)                               0109
         SLR   @03,@03                                             0109
         IC    @03,DATAT(,@10)                                     0109
         L     @15,BUFRPTR(,WTABPTR)                               0109
         ALR   @15,@03                                             0109
         ST    @15,BUFRPTR(,WTABPTR)                               0109
*     LNGTH=LNGTH-DATAT;            /* SUBTR LENGTH OF DATA JUST   0110
*                                      FORMATTED TO GET NO. BYTES  0110
*                                      LEFT IN INPUT RECORD          */
*                                                                  0110
         LCR   @03,@03                                             0110
         AH    @03,LNGTH(,WTABPTR)                                 0110
         STH   @03,LNGTH(,WTABPTR)                                 0110
*     /***************************************************************/
*     /*                                                             */
*     /* CHECK FOR END OF INPUT DATA RECORD                          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0111
*     IF LNGTH^>0 THEN              /* NO BYTES LEFT IN INPUT      0111
*                                      RECORD--ALL DONE              */
         LTR   @03,@03                                             0111
         BNP   @RT00111                                            0111
*       GOTO EODATA;                /* GO MAKE FINAL EXIT TO GTF     */
*     ELSE                          /* MORE DATA LEFT TO PROCESS     */
*       DTBLPTR=DTBLPTR+1;          /* INCR DATA TABLE PTR           */
         AL    @10,@CF00240                                        0113
         ST    @10,DTBLPTR(,WTABPTR)                               0113
*   END;                                                           0114
*                                                                  0114
         LA    @10,1                                               0114
         AH    @10,COUNT(,WTABPTR)                                 0114
         STH   @10,COUNT(,WTABPTR)                                 0114
         C     @10,@CF00629                                        0114
         BNH   @DL00106                                            0114
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK LAST BYTE OF ENTRY FOR LAST ENTRY INDICATOR             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0115
*   IF DATAT='01'X THEN             /* END OF DATA TABLE ENTRIES     */
         L     @10,DTBLPTR(,WTABPTR)                               0115
         CLI   DATAT(@10),X'01'                                    0115
         BE    @RT00115                                            0115
*     GOTO EODATA;                  /* GO MAKE FINAL EXIT TO GTF     */
*   ELSE                            /* MORE DATA LEFT TO PROCESS     */
*                                                                  0117
*     /***************************************************************/
*     /*                                                             */
*     /* DETERMINE WHETHER NEXT LINE IS DATA OR TITLE                */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0117
*     IF DATAT='02'X THEN           /* ANOTHER DATA LINE FOLLOWS     */
         CLI   DATAT(@10),X'02'                                    0117
         BNE   @RF00117                                            0117
*       DO;                                                        0118
*         DTBLPTR=DTBLPTR+1;        /* INCR DATA TABLE PTR           */
         AL    @10,@CF00240                                        0119
         ST    @10,DTBLPTR(,WTABPTR)                               0119
*         GOTO RETURN0;             /* GO RETURN TO GTF TO HAVE    0120
*                                      OUTPUT BUFFER PRINTED         */
         B     RETURN0                                             0120
*       END;                                                       0121
*     ELSE                          /* NOT END OF DATA AND NOT DATA
*                                      LINE NEXT--TITLE NEXT         */
*       DO;                                                        0122
@RF00117 DS    0H                                                  0123
*         DTBLPTR=DTBLPTR+1;        /* INCR DATA TABLE PTR           */
         LA    @10,1                                               0123
         AL    @10,DTBLPTR(,WTABPTR)                               0123
         ST    @10,DTBLPTR(,WTABPTR)                               0123
*         FLAGS(2)='0'B;            /* SET SW TO TITLE NEXT          */
         NI    FLAGS(WTABPTR),B'10111111'                          0124
*         GOTO RETURN0;             /* GO RETURN TO GTF TO HAVE    0125
*                                      OUTPUT BUFFER PRINTED         */
         B     RETURN0                                             0125
*       END;                                                       0126
*EODATA:                                                           0127
*   RD=SACALLER;                    /* PT TO SAVE AREA OF CALLER     */
EODATA   L     RD,SACALLER(,WTABPTR)                               0127
*   RETURN CODE(4);                 /* MAKE FINAL EXIT TO GTF. GTF 0128
*                                      WILL PRINT OUTPUT BFR         */
*                                                                  0128
         LA    @15,4                                               0128
         L     @14,12(,@13)                                        0128
         LM    @00,@12,20(@13)                                     0128
         BR    @14                                                 0128
*   /*****************************************************************/
*   /*                                                               */
*   /* CONTROL BLOCK MONITOR ROUTINES THE FOLLOWING CONTROL BLOCK    */
*   /* MONITOR ROUTINES CONTROL THE OUTPUT TITLE AND DATA FORMATTING */
*   /* FOR CONTROL BLOCKS HAVING A VARIABLE FORMAT, I.E. A           */
*   /* DATA-DEPENDENT FORMAT WHICH CANNOT BE DETERMINED SOLEY BY THE */
*   /* TITLE AND DATA TABLES. DUPLICATE FIELDS CONTROL BLOCK MONITOR */
*   /* (DUPMON) THIS ROUTINE HANDLES CONTROL BLOCKS HAVING AN        */
*   /* INDEFINITE NO. OF SIMILAR DATA LINES, SUCH AS CCW'S AND DCB   */
*   /* EXIT LIST ENTRIES. AFTER THE TITLE IS PRINTED ON THE FIRST    */
*   /* ENTRY TO THIS ROUTINE, THE DATA TABLE POINTER IS RESET TO     */
*   /* RE-USE THE SAME DATA TABLE ENTRY UNTIL END OF DATA IS REACHED.*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0129
*DUPMON:                                                           0129
*   OUTBUFFR='';                    /* CLEAR OUTPUT BUFFER           */
*                                                                  0129
DUPMON   L     @10,OBUFRPTR(,WTABPTR)                              0129
         MVI   OUTBUFFR(@10),C' '                                  0129
         MVC   OUTBUFFR+1(109,@10),OUTBUFFR(@10)                   0129
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR FIRST ENTRY TO THIS ROUTINE                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0130
*   IF FLAGS(3)='0'B THEN           /* FIRST ENTRY                   */
         TM    FLAGS(WTABPTR),B'00100000'                          0130
         BNZ   @RF00130                                            0130
*     DO;                                                          0131
*       FLAGS(3)='1'B;              /* SET SECOND ENTRY SW           */
         OI    FLAGS(WTABPTR),B'00100000'                          0132
*       GOTO FORMON;                /* GO PRINT TITLE FIRST TIME     */
         B     FORMON                                              0133
*     END;                                                         0134
*   ELSE                            /* NOT FIRST ENTRY               */
*     DO;                                                          0135
@RF00130 DS    0H                                                  0136
*       DTBLPTR=DPNTR;              /* ALWAYS INITIALIZE DATA TABLE
*                                      PTR TO FIRST ENTRY            */
         L     @10,SCANPTR(,WTABPTR)                               0136
         L     @10,DPNTR(,@10)                                     0136
         ST    @10,DTBLPTR(,WTABPTR)                               0136
*       GOTO PRNTDAT;               /* GO FORMAT AND PRINT DATA LINE */
         B     PRNTDAT                                             0137
*     END;                                                         0138
*                                                                  0138
*   /*****************************************************************/
*   /*                                                               */
*   /* TAPE LABEL CONTROL BLOCK MONITOR (LBL1MON) THIS ROUTINE       */
*   /* DETERMINES WHICH OF THE THREE LABEL TYPES IS TRACED--VOL,     */
*   /* LBL1, OR LBL2. THE DATA AND TITLE TABLE ENTRY POINTERS ARE    */
*   /* INITIALIZED IN THE WORK TABLE TO POINT TO THE APPROPRIATE     */
*   /* ENTRIES (VOL, LBL1, OR LBL2). ONCE THE CORRECT TABLE ENTRIES  */
*   /* HAVE BEEN DETERMINED, PROCESSING IS STRAIGHTFORWARD, SO THE   */
*   /* CONTROL BLOCK MONITOR POINTER IS SET TO THE FORMAT MONITOR,   */
*   /* WHICH IS GIVEN CONTROL TO PROCESS THE LABELS AS FIXED CONTROL */
*   /* BLOCKS DETERMINE WHETHER HAVE VOL LABEL.                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0139
*TLBLMON:                                                          0139
*   IF DATA(2:4)='VOL' THEN         /* HAVE VOL LABEL                */
TLBLMON  L     @10,GPARMPTR(,WTABPTR)                              0139
         L     @10,DATAPTR(,@10)                                   0139
         CLC   DATA+1(3,@10),@CC00674                              0139
         BNE   @RF00139                                            0139
*     DO;                           /* SET TABLE PTRS FOR VOL LBL    */
*       DTBLPTR=ADDR(VLBLD);        /* SET DATA TABLE PTR FOR VOL    */
         LA    @10,VLBLD                                           0141
         ST    @10,DTBLPTR(,WTABPTR)                               0141
*       TTBLPTR=ADDR(VOLLABEL);     /* SET TITLE TABLE PTR FOR VOL   */
         LA    @10,VOLLABEL                                        0142
         ST    @10,TTBLPTR(,WTABPTR)                               0142
*       GOTO SKIP12CK;              /* SKIP CHECKING FOR LBL 1 OR 2  */
         B     SKIP12CK                                            0143
*     END;                                                         0144
*   ELSE                                                           0145
*     ;                             /* MUST HAVE LBL 1 OR 2          */
*                                                                  0145
@RF00139 DS    0H                                                  0146
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE WHETHER HAVE LABEL1 OR LABEL2                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0146
*   IF DATA(5)='2' THEN             /* IF FOURTH CHARACTER IS A 2, IT
*                                      IS A LABEL2.                  */
         L     @10,GPARMPTR(,WTABPTR)                              0146
         L     @10,DATAPTR(,@10)                                   0146
         CLI   DATA+4(@10),C'2'                                    0146
         BNE   @RF00146                                            0146
*     DO;                           /* SET TABLE PTRS FOR LABEL2     */
*       DTBLPTR=ADDR(LBL2D);        /* SET DATA TABLE PTR FOR LBL2   */
         LA    @10,LBL2D                                           0148
         ST    @10,DTBLPTR(,WTABPTR)                               0148
*       TTBLPTR=ADDR(LBL2);         /* TITLE TABLE PTR FOR LBL2      */
         LA    @10,LBL2                                            0149
         ST    @10,TTBLPTR(,WTABPTR)                               0149
*     END;                                                         0150
*   ELSE                                                           0151
*     ;                             /* IT IS A LABEL1, LEAVE PTRS SET
*                                      FOR LABEL1.                   */
@RF00146 DS    0H                                                  0152
*SKIP12CK:                                                         0152
*   CBMONPTR=ADDR(FORMON);          /* SET CONTROL BLOCK MONITOR TO
*                                      THE FORMAT MONITOR. TREAT AS A
*                                      FIXED CONTROL BLOCK           */
SKIP12CK LA    @10,FORMON                                          0152
         ST    @10,CBMONPTR(,WTABPTR)                              0152
*   GOTO FORMON;                    /* GO PROCESS BY FORMAT MONITOR  */
*                                                                  0153
         B     FORMON                                              0153
*   /*****************************************************************/
*   /*                                                               */
*   /* TIOT CONTROL BLOCK MONITOR (TIOTMON) THIS ROUTINE, AFTER THE  */
*   /* TIOT DD ENTRY HAS BEEN PRINTED IN THE NORMAL MANNER, USES THE */
*   /* FORMAT MONITOR TO FORMAT THE DEVICE ENTRY DATA LINES BY       */
*   /* RESETTING THE DATA TABLE POINTER (DTBLPTR) TO THE ADDRESS OF  */
*   /* THE DEVICE ENTRY DATA TABLE ENTRY AFTER EACH LINE. THE FORMAT */
*   /* MONITOR DETECTS THE END OF DATA AND TERMINATES PROCESSING.    */
*   /* DETERMINE WHETHER DEVICE ENTRY HAS BEEN REACHED               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0154
*TIOTMON:                                                          0154
*   IF CBMONCTR=3 THEN              /* THREE LINES PRINTED           */
TIOTMON  LH    @10,CBMONCTR(,WTABPTR)                              0154
         C     @10,@CF00066                                        0154
         BE    @RT00154                                            0154
*     GOTO DEVENTRY;                /* GO SET UP FOR DEVICE ENTRIES
*                                      IF 3 LINES (DD TITLE, DD DATA,
*                                      DEVICE ENTRY TITLE), PRINT  0155
*                                      CONSECUTIVE DEVICE ENTRIES    */
*   ELSE                                                           0156
*     ;                             /* STILL ON FIRST THREE LINES    */
*                                                                  0156
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE WHETHER PRINTING DATA OR TITLE                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0157
*   IF FLAGS(3)='1'B THEN           /* ARE IN PROCESS OF PRINTING    */
         TM    FLAGS(WTABPTR),B'00100000'                          0157
         BO    @RT00157                                            0157
*     GO TO DEVDATA;                /* DATA. RESET DATA PTR.         */
*   ELSE                                                           0159
*     ;                             /* NOT PRINTING DATA             */
*   CBMONCTR=CBMONCTR+1;            /* INCREMENT TIOT CTR BY ONE LINE*/
         AL    @10,@CF00240                                        0160
         STH   @10,CBMONCTR(,WTABPTR)                              0160
*   GOTO FORMON;                    /* GO PRINT LINE                 */
         B     FORMON                                              0161
*DEVENTRY:                                                         0162
*   CBMONCTR=0;                     /* RESTORE TIOT CTR              */
DEVENTRY SLR   @10,@10                                             0162
         STH   @10,CBMONCTR(,WTABPTR)                              0162
*   FLAGS(3)='1'B;                  /* SET SW INDICATING DATA LINES
*                                      ONLY ARE LEFT TO BE PRINTED   */
         OI    FLAGS(WTABPTR),B'00100000'                          0163
*   GOTO FORMON;                    /* GO PRINT FIRST DATA LINE OF 0164
*                                      DEVICE ENTRY                  */
         B     FORMON                                              0164
*DEVDATA:                                                          0165
*   DTBLPTR=ADDR(TIOTDEVD);         /* RESTORE DATA TABLE PTR TO THE
*                                      DEVICE DATA ADDR. I.E. USE THE
*                                      SAME DATA TABLE ENTRY OVER  0165
*                                      AGAIN.                        */
DEVDATA  LA    @10,TIOTDEVD                                        0165
         ST    @10,DTBLPTR(,WTABPTR)                               0165
*   GOTO FORMON;                    /* GO PRINT SUCCEEDING DATA    0166
*                                      LINES.                        */
*                                                                  0166
         B     FORMON                                              0166
*   /*****************************************************************/
*   /*                                                               */
*   /* UCB CONTROL BLOCK MONITOR (UCBMON) THE FORMAT MONITOR         */
*   /* COMPLETES PROCESSING AS FOR A FIXED CONTROL BLOCK.            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0167
*UCBMON:                                                           0167
*                                                                  0167
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE WHETHER LAST UCB COMMON DATA LINE HAS BEEN REACHED  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0167
*   IF CBMONCTR=3 THEN              /* THREE LINES PRINTED, ON DATA
*                                      LINE NOW                      */
UCBMON   LH    @10,CBMONCTR(,WTABPTR)                              0167
         C     @10,@CF00066                                        0167
         BE    @RT00167                                            0167
*     GOTO NOT;                     /* GO DETERMINE FURTHER Y02080 0168
*                                      PROCESSING                    */
*   CBMONCTR=CBMONCTR+1;            /* INCREMENT LINE COUNTER        */
         AL    @10,@CF00240                                        0169
         STH   @10,CBMONCTR(,WTABPTR)                              0169
*   GOTO FORMON;                    /* GO TO FORMAT MONITOR FOR THIS
*                                      LINE                          */
*                                                                  0170
         B     FORMON                                              0170
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE FORMAT REQUIRED Y02080                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0171
*NOT:                                                              0171
*   CBMONPTR=ADDR(FORMON);          /* TREAT AS FIXED CB Y02080 LET
*                                      FORMAT MONITOR HANDLE IT      */
NOT      LA    @10,FORMON                                          0171
         ST    @10,CBMONPTR(,WTABPTR)                              0171
*RSETUCBC:                                                         0172
*   CBMONCTR=0;                     /* RESET LINE COUNTER            */
RSETUCBC SLR   @10,@10                                             0172
         STH   @10,CBMONCTR(,WTABPTR)                              0172
*   GOTO FORMON;                    /* GO FORMAT NEXT LINE           */
*                                                                  0173
         B     FORMON                                              0173
*   /*****************************************************************/
*   /*                                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0174
*XLATE:                                                            0174
*   PROC OPTIONS(NOSAVEAREA);                                      0174
*                                                                  0174
XLATE    STM   @14,@12,12(@13)                                     0174
*   /*****************************************************************/
*   /*                                                               */
*   /* TRANSLATE ROUTINE (XLATE) THE FOLLOWING ROUTINE MOVES DATA    */
*   /* FROM THE INPUT BUFFER TO THE OUTBUFFER, UNPACKS IT, AND       */
*   /* CONVERTS IT TO EBCDIC. IT USES THE ONE BYTE ENTRY IN THE DATA */
*   /* TABLE TO DETERMINE THE LENGTH OF THE PIECE OF DATA TO BE MOVED*/
*   /* AND CONVERTED.                                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0175
*   DCL                                                            0175
*     R3 REG(3) PTR(31) RSTD;       /* WORK REG Y02080               */
*   DCL                                                            0176
*     R4 REG(4) PTR(31) RSTD;       /* WORK REG Y02080               */
*   DCL                                                            0177
*     R5 REG(5) PTR(31) RSTD;       /* WORK REG Y02080               */
*   GEN DATA;                                                      0178
*                                                                  0178
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR ZERO ENTRY IN DATA TABLE                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0179
*   IF DATAT='00'X                  /* Y02080                        */
*     THEN                          /* IF DATA TABLE ENTRY IS ZERO,
*                                      NO DATA IS TO BE MOVED        */
         L     @10,DTBLPTR(,WTABPTR)                               0179
         CLI   DATAT(@10),X'00'                                    0179
         BE    @RT00179                                            0179
*     GOTO EXIT;                    /* GO RETURN                     */
*   ELSE                                                           0181
*     ;                             /* DATA TO TRANSLATE, CONTINUE   */
*   R3=ADDR(DATAT);                 /* POINTER TO DATA TABLE ENTRY   */
         LR    R3,@10                                              0182
*   R4=0;                           /* ZERO WORK REG                 */
         SLR   R4,R4                                               0183
*   GEN;                                                           0184
         IC    R4,ORG(R3)               PUT NO. OF CHARS TO BE MOVED
*                                       IN WORK REG
         LR    R3,R4
         SLL   R4,DBLMOV                MOVE LNG TO HI-ORDER HALF-BYTE
*                                       AND DOUBLE FOR RECEIVING
*                                       FIELD LENGTH
         OR    R3,R4                    PUT LNG OF RECEIVING FIELD IN
*                                       REG 3. NOW REG HAS BOTH LENGTH
*                                       OF SENDING AND RECEIVING FLDS
*   R4=BUFRPTR;                     /* POINT TO INPUT BUFFER         */
         L     R4,BUFRPTR(,WTABPTR)                                0185
*   R5=ADDR(OUTBUFFR);              /* POINT TO OUTPUT BUFFER        */
         L     R5,OBUFRPTR(,WTABPTR)                               0186
*   GEN;                                                           0187
         EX    R3,UNPACK                UNPACK DATA TO BE PRINTED
         TR    0(TEN,R5),TRTABLE        TRANSLATE TO EBCDIC
         SRL   R3,MOVRITE               MOVE RECEIVING LENGTH TO
*                                       LOW-ORDER HALF BYTE OF REG
         AR    R5,R3                    POINT PAST TRANSLATED DATA
         MVI   ORG(R5),BLANK            BLANK SIGN THAT MAY BE LEFT
*                                       FROM UNPK INSTRUCTION
*EXIT:                                                             0188
*   RETURN;                         /* RETURN TO CALLER              */
@EL00002 DS    0H                                                  0188
@EF00002 DS    0H                                                  0188
@ER00002 LM    @14,@12,12(@13)                                     0188
         BR    @14                                                 0188
*   END XLATE;                                                     0189
         B     @EL00002                                            0189
*   GEN DATA;                                                      0190
*   END IMDUSRFF;                                                  0191
@EL00001 DS    0H                                                  0191
@EF00001 DS    0H                                                  0191
@ER00001 LM    @14,@12,12(@13)                                     0191
         BR    @14                                                 0191
@DATA    DS    0H
@DATD    DSECT
         DS    0F
IMDUSRFF CSECT
         DS    0F
@CF00240 DC    F'1'
@CF00066 DC    F'3'
@CF00629 DC    F'10'
@CF00089 DC    F'12'
@CF00241 DC    F'109'
@DATD    DSECT
         DS    0D
IMDUSRFF CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC00674 DC    C'VOL'
         DS    CL1
SCANTBLE DS    CL244
         ORG   SCANTBLE
CODE04   DS    CL12
         ORG   CODE04
IOBCODE  DC    AL1(4)
IOBCBPTR DC    AL3(FORMON)
IOBDPTR  DC    AL4(IOBD)
IOBTPTR  DC    AL4(IOB)
         ORG   SCANTBLE+12
CODE08   DS    CL12
         ORG   CODE08
TIOTCODE DC    AL1(8)
TIOCBPTR DC    AL3(TIOTMON)
TIOTPTR  DC    AL4(TIOTD)
TIOTTPTR DC    AL4(TIOT)
         ORG   SCANTBLE+24
CODE0C   DS    CL12
         ORG   CODE0C
JVOLCODE DC    AL1(12)
JVLCBPTR DC    AL3(FORMON)
JVOLDPTR DC    AL4(JVOLD)
JVOLTPTR DC    AL4(JFCBVOLS)
         ORG   SCANTBLE+36
CODE10   DS    CL12
         ORG   CODE10
TLBLCODE DC    AL1(16)
TLBCBPTR DC    AL3(TLBLMON)
TLBLDPTR DC    AL4(LBL1D)
TLBLTPTR DC    AL4(LBL1)
         ORG   SCANTBLE+48
CODE14   DS    CL12
         ORG   CODE14
JDSNCODE DC    AL1(20)
JDSCBPTR DC    AL3(FORMON)
JDSNDPTR DC    AL4(JDSND)
JDSNTPTR DC    AL4(JFCBDSNM)
         ORG   SCANTBLE+60
CODE18   DS    CL12
         ORG   CODE18
VLBLCODE DC    AL1(24)
VLBCBPTR DC    AL3(FORMON)
VLBLDPTR DC    AL4(VLBLD)
VLBLTPTR DC    AL4(VOLLABEL)
         ORG   SCANTBLE+72
CODE1C   DS    CL12
         ORG   CODE1C
DSCBCODE DC    AL1(28)
DSCCBPTR DC    AL3(FORMON)
DSCBDPTR DC    AL4(F1DSCBD)
DSCBTPTR DC    AL4(F1DSCB)
         ORG   SCANTBLE+84
CODE20   DS    CL12
         ORG   CODE20
CCWCODE  DC    AL1(32)
CCWCBPTR DC    AL3(DUPMON)
CCWDPTR  DC    AL4(CCWD)
CCWTPTR  DC    AL4(CCW)
         ORG   SCANTBLE+96
CODE24   DS    CL12
         ORG   CODE24
UCBCODE  DC    AL1(36)
UCBCBPTR DC    AL3(UCBMON)
UCBDPTR  DC    AL4(UCBD)
UCBTPTR  DC    AL4(UCB)
         ORG   SCANTBLE+108
CODE28   DS    CL12
         ORG   CODE28
DCBCODE  DC    AL1(40)
DCBCBPTR DC    AL3(FORMON)
DCBDPTR  DC    AL4(DCBD)
DCBTPTR  DC    AL4(DCB)
         ORG   SCANTBLE+120
CODE34   DS    CL12
         ORG   CODE34
JELNCODE DC    AL1(52)
JELCBPTR DC    AL3(FORMON)
JELNDPTR DC    AL4(JFCELNMD)
JELNTPTR DC    AL4(JFCBELNM)
         ORG   SCANTBLE+132
CODE38   DS    CL12
         ORG   CODE38
DEXLCODE DC    AL1(56)
DEXCBPTR DC    AL3(DUPMON)
DEXLDPTR DC    AL4(DCBXLSTD)
DEXLPTR  DC    AL4(DCBEXLST)
         ORG   SCANTBLE+144
CODE48   DS    CL12
         ORG   CODE48
WK1CODE  DC    AL1(72)
WK1CBPTR DC    AL3(FORMON)
WK1DPTR  DC    AL4(WKAREA1D)
WK1TPTR  DC    AL4(WKAREA1)
         ORG   SCANTBLE+156
CODE4C   DS    CL12
         ORG   CODE4C
WK2CODE  DC    AL1(76)
WK2CBPTR DC    AL3(FORMON)
WK2DPTR  DC    AL4(WKAREA2D)
WK2TPTR  DC    AL4(WKAREA2)
         ORG   SCANTBLE+168
CODE50   DS    CL12
         ORG   CODE50
WK3CODE  DC    AL1(80)
WK3CBPTR DC    AL3(FORMON)
WK3DPTR  DC    AL4(WKAREA3D)
WK3TPTR  DC    AL4(WKAREA3)
         ORG   SCANTBLE+180
CODE54   DS    CL12
         ORG   CODE54
WK4CODE  DC    AL1(84)
WK4CBPTR DC    AL3(FORMON)
WK4DPTR  DC    AL4(WKAREA4D)
WK4TPTR  DC    AL4(WKAREA4)
         ORG   SCANTBLE+192
CODE64   DS    CL12
         ORG   CODE64
WK5CODE  DC    AL1(100)
WK5CBPTR DC    AL3(FORMON)
WK5DPTR  DC    AL4(WKAREA5D)
WK5TPTR  DC    AL4(WKAREA5)
         ORG   SCANTBLE+204
CODE58   DS    CL12
         ORG   CODE58
F2DSCODE DC    AL1(88)
F2DCBPTR DC    AL3(FORMON)
F2DSDPTR DC    AL4(F2DSCBD)
F2DSTPTR DC    AL4(F2DSCB)
         ORG   SCANTBLE+216
CODE5C   DS    CL12
         ORG   CODE5C
F3DSCODE DC    AL1(92)
F3DCBPTR DC    AL3(FORMON)
F3DSDPTR DC    AL4(F3DSCBD)
F3DSTPTR DC    AL4(F3DSCB)
         ORG   SCANTBLE+228
CODE60   DS    CL12
         ORG   CODE60
WTGCODE  DC    AL1(96)
WTGCBPTR DC    AL3(FORMON)
WTGDPTR  DC    AL4(WTGTBLD)
WTGTPTR  DC    AL4(WTGTBL)
         ORG   SCANTBLE+240
CODE00   DS    CL4
         ORG   CODE00
STOPCODE DC    A(0)
         ORG   SCANTBLE+244
IOBD     DC    5AL1(1)
         DC    AL1(3)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(4)
         DC    AL1(1)
         DC    AL1(0)
         DC    AL1(3)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(4)
         DC    2AL1(2)
         DC    3AL1(4)
         DC    AL1(0)
         DC    AL1(1)
IOB      DC    CL109'IOB      IOBFLG1   IOBFLG2   IOBSENS0  IOBSENS1  IC
               OBECBCC  IOBECBPT  IOBFLG3   IOBCSW              IOBSIOCC
               C'
         DC    CL109'         IOBSTART  RESERVED  IOBDCBPT  IOBRESTR  IC
               OBINCAM  IOBERRCT  /IOB EXTENSION'
TIOTD    DC    4AL1(1)
         DC    2AL1(4)
         DC    AL1(3)
         DC    AL1(1)
         DC    3AL1(0)
TIOT     DC    CL109'TIOT TT  TIOELNGH  TIOESTTA  TIOEWTCT  TIOELINK  TC
               IOEDDNM            TIOEJFCB  TIOESTTC'
JVOLD    DC    AL1(4)
         DC    AL1(2)
         DC    AL1(4)
         DC    AL1(2)
         DC    AL1(4)
         DC    AL1(2)
         DC    AL1(4)
         DC    AL1(2)
         DC    AL1(4)
         DC    AL1(2)
         DC    AL1(1)
JFCBVOLS DC    CL109'JFCBVOLS (VOL SER 1)         (VOL SER 2)         (C
               VOL SER 3)         (VOL SER 4)         (VOL SER 5)'
LBL1D    DC    AL1(3)
         DC    AL1(1)
         DC    4AL1(4)
         DC    AL1(1)
         DC    AL1(4)
         DC    AL1(2)
         DC    AL1(4)
         DC    AL1(0)
         DC    2AL1(4)
         DC    AL1(2)
         DC    AL1(4)
         DC    AL1(2)
         DC    AL1(4)
         DC    AL1(2)
         DC    AL1(1)
         DC    AL1(4)
         DC    AL1(2)
         DC    AL1(0)
         DC    3AL1(4)
         DC    AL1(1)
         DC    AL1(4)
         DC    AL1(3)
         DC    4AL1(0)
         DC    AL1(1)
LBL1     DC    CL109'LBL 1    FL1LABI   FL1NO     FL1ID                C
                                            FL1FILSR            FL1VOLSC
               Q'
         DC    CL109'         FL1FILSQ  FL1GNO    FL1VNG    FL1CRDT    C
                        FL1EXPDT            FL1FSEC   FL1BLKCT'
         DC    CL109'         FL1SYSCD                                RC
               ESERVED'
JDSND    DC    10AL1(4)
         DC    AL1(2)
         DC    AL1(4)
         DC    9AL1(0)
         DC    AL1(1)
JFCBDSNM DC    CL109'JFCBDSNM'
VLBLD    DC    AL1(3)
         DC    AL1(1)
         DC    AL1(4)
         DC    AL1(2)
         DC    AL1(1)
         DC    AL1(4)
         DC    AL1(2)
         DC    AL1(4)
         DC    AL1(0)
         DC    AL1(4)
         DC    AL1(3)
         DC    2AL1(4)
         DC    AL1(2)
         DC    5AL1(4)
         DC    AL1(0)
         DC    2AL1(4)
         DC    AL1(2)
         DC    7AL1(0)
         DC    AL1(1)
         DS    2XL1
VOLLABEL DC    CL109'VOL LBL  VOLLABI   VOLNO     VOLSERNO            RC
               ESERVED    VOLVTOC/RESERVED   RESERVED'
         DC    CL109'         RESERVED            VOLOWNER             C
                         RESERVED'
         DC    CL109'         RESERVED'
F1DSCBD  DC    AL1(1)
         DC    AL1(4)
         DC    2AL1(2)
         DC    2AL1(3)
         DC    3AL1(1)
         DC    AL1(0)
         DC    AL1(0)
         DC    3AL1(4)
         DC    AL1(1)
         DC    AL1(4)
         DC    AL1(3)
         DC    AL1(2)
         DC    2AL1(1)
         DC    AL1(2)
         DC    AL1(0)
         DC    AL1(2)
         DC    AL1(1)
         DC    AL1(2)
         DC    AL1(1)
         DC    AL1(4)
         DC    AL1(3)
         DC    2AL1(2)
         DC    2AL1(4)
         DC    AL1(0)
         DC    AL1(2)
         DC    2AL1(4)
         DC    AL1(2)
         DC    2AL1(4)
         DC    AL1(2)
         DC    AL1(4)
         DC    AL1(1)
         DC    AL1(0)
         DC    AL1(1)
F1DSCB   DC    CL109'F1 DSCB  DS1FMTID  DS1DSSN             DS1VOLSQ  DC
               S1CREDT  DS1EXPDT  DS1NOEPV  DS1NOBDB  RESERVED'
         DC    CL109'         DS1SYSCD                                RC
               ESERVED            DS1DSORG  DS1RECFM  DS1OPTCD  DS1BLKLC
               '
         DC    CL109'         DS1LRECL  DS1KEYL   DS1RKP    DS1DSIND  DC
               S1SCALO  DS1LSTAR  DS1TRBAL  RESERVED  DS1EXT1'
         DC    CL109'                   DS1EXT2                       DC
               S1EXT3                       DS1PTRDS'
CCWD     DC    AL1(1)
         DC    AL1(3)
         DC    2AL1(1)
         DC    AL1(2)
         DC    6AL1(0)
CCW      DC    CL109'CCW      COMMAND   DATA ADDR FLAGS     RESERVED  BC
               YTE CT'
UCBD     DC    10AL1(1)
         DC    AL1(0)
         DC    3AL1(1)
         DC    AL1(3)
         DC    AL1(4)
         DC    2AL1(2)
         DC    3AL1(0)
         DC    AL1(0)
         DC    9AL1(4)
         DC    AL1(0)
         DC    AL1(1)
UCB      DC    CL109'UCB COMM SRTEJBNR  UCBFLS    UCBID     SRTESTAT  UC
               CBCHA    UCBUA     UCBFL1    UCBDTI    UCBETI    UCBSTI'
         DC    CL109'         UCBLCI    UCBATI    UCBWGT    UCBNAME   UC
               CBTYP    UCBLTS    UCBSNS'
DCBD     DC    5AL1(4)
         DC    6AL1(0)
         DC    AL1(1)
         DC    AL1(3)
         DC    2AL1(2)
         DC    AL1(4)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(2)
         DC    AL1(0)
         DC    AL1(2)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(1)
         DC    6AL1(0)
         DC    AL1(0)
         DC    AL1(3)
         DC    9AL1(4)
         DC    AL1(2)
         DC    2AL1(4)
         DC    8AL1(0)
         DC    AL1(1)
DCB      DC    CL109'DCB      DEVICE INTERFACE'
         DC    CL109'         DCBBUFNO  DCBBUFCB  DCBBUFL   DCBDSORG  DC
               CBIOBAD  DCBHIARC  DCBEODAD  DCBRECFM  DCBEXLST  DCBTIOTC
               '
         DC    CL109'         DCBMACRF  DCBIFLGS  DCBDEBAD  DCBOFLGS'
         DC    CL109'         ACCESS  METHOD INTERFACE'
JFCELNMD DC    2AL1(4)
         DC    8AL1(0)
         DC    AL1(1)
JFCBELNM DC    CL109'JFCBELNM'
DCBXLSTD DC    AL1(4)
         DC    10AL1(0)
DCBEXLST DC    CL109'DCBEXLST'
WKAREA1D DC    10AL1(4)
         DC    AL1(0)
         DC    10AL1(4)
         DC    AL1(0)
         DC    5AL1(4)
         DC    5AL1(0)
         DC    AL1(1)
WKAREA1  DC    CL109'WKAREA 1 VOL LBL, FILE LBL, DSCBS, OR MSG AREA   +C
               10       +14       +18       +1C       +20       +24'
         DC    CL109'         +28       +2C       +30       +34       +C
               38       +3C       +40       +44       +48       +4C'
         DC    CL109'         +50       +54       +58       +5C       +C
               60'
WKAREA2D DC    10AL1(4)
         DC    AL1(0)
         DC    3AL1(4)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(4)
         DC    2AL1(3)
         DC    2AL1(1)
         DC    AL1(0)
         DC    2AL1(2)
         DC    2AL1(4)
         DC    2AL1(3)
         DC    4AL1(1)
         DC    AL1(0)
         DC    AL1(2)
         DC    3AL1(1)
         DC    AL1(3)
         DC    AL1(2)
         DC    2AL1(1)
         DC    2AL1(2)
         DC    AL1(0)
         DC    2AL1(1)
         DC    AL1(4)
         DC    2AL1(1)
         DC    AL1(2)
         DC    2AL1(1)
         DC    2AL1(0)
         DC    AL1(0)
         DC    7AL1(4)
         DC    AL1(2)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(0)
         DC    AL1(3)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(1)
         DC    2AL1(3)
         DC    AL1(2)
         DC    2AL1(3)
         DC    AL1(1)
         DC    AL1(0)
         DC    AL1(1)
         DC    9AL1(0)
         DC    AL1(1)
WKAREA2  DC    CL109'WKAREA 2 JFCB-JFCBDSNM'
         DC    CL109'         (CONT.)   JFCBELNM            JFCBTSDM  JC
               FCDSCB   JFCFCBID  JFCAMPTR  JFCRDBPT  JFCBLTYP  JFCBOTTC
               R/'
         DC    CL109'         /JFCBFLSQ JFCBVLSQ  JFCBMASK            JC
               FCBCRDT  JFCBXPDT  JFCBIND1  JFCBIND2  JFCBUFNO  JFCBHIAC
               R'
         DC    CL109'         JFCBUFL   JFCEROPT  DEV CHAR  JFCDEN    JC
               FCLIMCT  JFCDSORG  JFCRECFM  JFCOPTCD  JFCBLKSI  JFCLRECC
               L'
         DC    CL109'         JFCNCP    JFCNTM    SEGMENTS            JC
               FCCPRI   JFCSOWA   RESERVED  JFCBNVOL'
         DC    CL109'         JFCBVOLS                                 C
                                                      JFCBEXTL  JFCBEXAC
               D'
         DC    CL109'         JFCBPQTY  JFCBCTRI  JFCBSQTY  RESERVED  JC
               FCBDQTY  JFCBSPNM  JFCBABST  JFCBSBNM  JFCBDRLH  JFCBVLCC
               T'
         DC    CL109'         JFCBSPTN'
WKAREA3D DC    AL1(4)
         DC    9AL1(0)
         DC    AL1(0)
         DC    AL1(1)
         DC    AL1(0)
         DC    4AL1(1)
         DC    AL1(3)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(1)
         DC    AL1(0)
         DC    AL1(1)
         DC    AL1(2)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(4)
         DC    2AL1(2)
         DC    AL1(0)
         DC    AL1(0)
         DC    2AL1(4)
         DC    8AL1(0)
         DC    AL1(0)
         DC    AL1(4)
         DC    AL1(0)
         DC    AL1(1)
         DC    AL1(3)
         DC    4AL1(1)
         DC    2AL1(0)
         DC    AL1(0)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(1)
         DC    AL1(0)
         DC    AL1(3)
         DC    AL1(1)
         DC    AL1(3)
         DC    AL1(1)
         DC    AL1(0)
         DC    AL1(3)
         DC    6AL1(2)
         DC    3AL1(0)
         DC    AL1(0)
         DC    AL1(4)
         DC    9AL1(0)
         DC    AL1(1)
WKAREA3  DC    CL109'WKAREA 3 DXECB'
         DC    CL109'       * IOB-IOBFLAG1        IOBFLAG2  IOBSENS0  IC
               OBSENS1  IOBECBCC  IOBECBPT  IOBFLAG3  IOBCOMAD  IOBSTATC
               0'
         DC    CL109'         IOBSTAT1  IOBCNT    IOBSIOCC  IOBSTART  IC
               OBWGHT   IOBDCBPT  IOBRESTR  IOBINCAM  IOBERRCT'
         DC    CL109'         DXDAADDR'
         DC    CL109'       * DEB-DXDEBDEB        DEBOFLGS  DEBIRBAD  DC
               EBOPATB  DEBQSCNT  DEBFLGS1  RESERVED'
         DC    CL109'         DEBNMEXT  DEBUSRPG  DEBPRIOR  DEBECBAD  DC
               EBPROTG/DEBDEBID   DEBDCBAD  DEBEXSCL  DEBAPPAD  DEBDVMOC
               D'
         DC    CL109'         DEBUCBAD  DEBBINUM  DEBSTRCC  DEBSTRHH  DC
               EBENDCC  DEBENDHH  DEBNMTRK'
         DC    CL109'       * DCB-DCBIFLGS/DCBDEBAD'
WKAREA4D DC    10AL1(4)
         DC    AL1(0)
         DC    4AL1(4)
         DC    6AL1(0)
         DC    AL1(0)
         DC    AL1(4)
         DC    AL1(0)
         DC    7AL1(4)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(2)
         DC    AL1(0)
         DC    AL1(2)
         DC    AL1(3)
         DC    AL1(1)
         DC    2AL1(4)
         DC    3AL1(0)
         DC    AL1(0)
         DC    2AL1(2)
         DC    AL1(3)
         DC    AL1(1)
         DC    6AL1(0)
         DC    AL1(1)
WKAREA4  DC    CL109'WKAREA 4 7 CCW''S-DXCCW1      DXCCW2              C
               DXCCW3              DXCCW4              DXCCW5'
         DC    CL109'         DXCCW6              DXCCW7'
         DC    CL109'       * REG SAVE-DXREG9     DXREGA    DXREGB    DC
               XREGC    DXREGD    DXREGE    DXREG0    DXREG1'
         DC    CL109'       * MOD IDS-DXCALLID    DXRETID   DXRETTTR  DC
               XRETCOD  (RESERVED)'
         DC    CL109'         DXABCODE  DXSAVID   DXSAVADR  DXSAVOFF'
WKAREA5D DC    6AL1(4)
         DC    AL1(2)
         DC    AL1(4)
         DC    AL1(2)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(4)
         DC    4AL1(2)
         DC    4AL1(1)
         DC    AL1(0)
         DC    AL1(0)
         DC    10AL1(4)
         DC    AL1(0)
         DC    2AL1(4)
         DC    2AL1(2)
         DC    2AL1(4)
         DC    4AL1(0)
         DC    AL1(0)
         DC    6AL1(4)
         DC    4AL1(0)
         DC    AL1(1)
WKAREA5  DC    CL109'WKAREA 5 DXWORK    DXWORK1   DXWORK2   DXWORK3   DC
               XWORK4   DXVOLSR1            DXVOLSR2'
         DC    CL109'         DXVOLSR3            DXVOLSEQ  DXNOUNIT  DC
               XUNITOF  DXRESSW   DXWKEYSV  DXUKEY    DXEXTSW'
         DC    CL109'         DXASCBAD  DXTCBADR  DXJSCBAD  DXDSABQD  DC
               XDSABAD  DXDSAB    DXDEBXAD  DXTIOTAD  DXUCBADR  DXUCBSAC
               V'
         DC    CL109'         DXUDCBAD  DXPDCBAD  DXUDCBPL  DXUDCBML  DC
               XPRPARC  DXMSGADR'
         DC    CL109'         DXATCOM1  DXATCOM2  DXATCOM3  DXATCOM4  DC
               XATEXC1  DXATEXC2'
F2DSCBD  DC    AL1(1)
         DC    AL1(4)
         DC    AL1(2)
         DC    AL1(4)
         DC    AL1(1)
         DC    AL1(4)
         DC    AL1(3)
         DC    AL1(4)
         DC    AL1(1)
         DC    AL1(4)
         DC    AL1(0)
         DC    3AL1(4)
         DC    AL1(3)
         DC    3AL1(1)
         DC    AL1(3)
         DC    AL1(2)
         DC    AL1(1)
         DC    AL1(0)
         DC    6AL1(1)
         DC    AL1(2)
         DC    AL1(3)
         DC    AL1(2)
         DC    AL1(1)
         DC    AL1(0)
         DC    AL1(4)
         DC    AL1(1)
         DC    AL1(4)
         DC    AL1(3)
         DC    AL1(4)
         DC    AL1(3)
         DC    AL1(4)
         DC    AL1(3)
         DC    2AL1(4)
         DC    AL1(0)
         DC    AL1(4)
         DC    AL1(1)
         DC    AL1(4)
         DC    AL1(1)
         DC    AL1(4)
         DC    AL1(1)
         DC    2AL1(4)
         DC    2AL1(2)
         DC    AL1(0)
         DC    2AL1(2)
         DC    AL1(3)
         DC    AL1(4)
         DC    AL1(1)
         DC    5AL1(0)
         DC    AL1(1)
F2DSCB   DC    CL109'F2 DSCB           DS22MIND            DS2L2MEN    C
                       DS23MIND            DS2L3MIN            RESERVEDC
               '
         DC    CL109'         RESERVED                                DC
               S2FMTID  DS2NOLEV  DS2DVIND  DS21RCYL  DS2LTCYL  DS2CYLOC
               V'
         DC    CL109'         DS2HIRIN  DS2HIRPD  DS2HIROV  DS2RSHTR  DC
               S2HIRTI  RESERVED  DS2TAGDT  DS2RORG3  DS2NOBYT  DS2NOTRC
               K'
         DC    CL109'         DS2PRCTR  DS2STIND  DS2CYLAD            DC
               S2ADLIN            DS2ADHIN            DS2LPRAD'
         DC    CL109'         DS2LTRAD            DS2LCYAD            DC
               S2LMSAD            DS2LOVAD            DS2BYOVL  DS2RORGC
               2'
         DC    CL109'         DS2OVRCT  DS2RORG1  DS2NIRT   DS2PTRDS'
F3DSCBD  DC    2AL1(4)
         DC    AL1(2)
         DC    2AL1(4)
         DC    AL1(2)
         DC    2AL1(4)
         DC    AL1(2)
         DC    2AL1(0)
         DC    2AL1(4)
         DC    AL1(2)
         DC    AL1(1)
         DC    2AL1(4)
         DC    AL1(2)
         DC    2AL1(4)
         DC    AL1(2)
         DC    AL1(2)
         DC    2AL1(4)
         DC    AL1(2)
         DC    2AL1(4)
         DC    AL1(2)
         DC    2AL1(4)
         DC    AL1(2)
         DC    AL1(0)
         DC    AL1(2)
         DC    2AL1(4)
         DC    AL1(2)
         DC    2AL1(4)
         DC    AL1(2)
         DC    2AL1(4)
         DC    AL1(2)
         DC    AL1(0)
         DC    AL1(2)
         DC    2AL1(4)
         DC    AL1(2)
         DC    7AL1(0)
         DC    AL1(1)
F3DSCB   DC    CL109'F3 DSCB            DS3EXTNT'
         DC    CL109'                                       DS3FMTID  DC
               S3ADEXT'
WTGTBLD  DC    AL1(4)
         DC    2AL1(2)
         DC    5AL1(4)
         DC    AL1(2)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(2)
         DC    AL1(4)
         DC    AL1(1)
         DC    AL1(3)
         DC    6AL1(0)
         DC    AL1(1)
WTGTBL   DC    CL109'WTG TBL  WTGMODNM            WTGMODID  WTGMODEP  NC
               OT USED  WTGPREFX  NOT USED'
         DC    CL109'         WTGPATHS  *WTGENTRY-WTGIDTTR  WTGCORE'
DEVENT   DC    CL109'DEV ENT  TIOESTTB  TIOEFSRT'
UCBDEV   DC    CL109'UCB    * DEVICE DEPENDENT SECTION                +C
               28       +2C       +30       +34       +38'
LBL2     DC    CL109'LBL 2    FL2ABI    FL2NO     FL2RECFM  FL2BLKL    C
                        FL2LRECL            FL2DEN    FL2ILP'
         DC    CL109'         FL2JOBD             FL2JSSP   FL2STEPD   C
                        FL2TRTCH  FL2CNTRL  RESERVED  FL2BLKA   RESERVEC
               D'
         DC    CL109'         RESERVED'
TIOTDEVD DC    AL1(1)
         DC    AL1(3)
         DC    8AL1(0)
         DC    AL1(2)
LBL2D    DC    AL1(3)
         DC    2AL1(1)
         DC    AL1(4)
         DC    AL1(1)
         DC    AL1(4)
         DC    3AL1(1)
         DC    AL1(0)
         DC    AL1(0)
         DC    2AL1(4)
         DC    AL1(1)
         DC    2AL1(4)
         DC    AL1(2)
         DC    3AL1(1)
         DC    AL1(4)
         DC    AL1(0)
         DC    9AL1(4)
         DC    AL1(1)
         DC    AL1(1)
@DATD    DSECT
*                                       /*                    Y02080  *
IMDUSRFF CSECT                                                   Y02080
DBLMOV   EQU   5
TEN      EQU   10
ORG      EQU   0
MOVRITE  EQU   4
BLANK    EQU   C' '
UNPACK   UNPK  ORG(0,R5),ORG(0,R4)
TRTABLE  DC    240C' '
         DC    C'0123456789ABCDEF'
@DATD    DSECT
*                                       /* XCTLTABL             Y02080*
IMDUSRFF CSECT                                                   Y02080
         XCTLTABL SVC=000,BRT=YES,LENGTH=                        Y02080
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IMDUSRFF CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
WTABPTR  EQU   @12
CBMONREG EQU   @02
R1       EQU   @01
R2       EQU   @02
RD       EQU   @13
R3       EQU   @03
R4       EQU   @04
R5       EQU   @05
GPARM    EQU   0
INPTR    EQU   GPARM
OUTPTR   EQU   GPARM+4
DATAPTR  EQU   GPARM+16
GCORPTR  EQU   GPARM+24
WORKTABL EQU   0
SAVAREA  EQU   WORKTABL
SACALLER EQU   SAVAREA+4
SACALLED EQU   SAVAREA+8
CBMONPTR EQU   WORKTABL+72
BUFRPTR  EQU   WORKTABL+76
DTBLPTR  EQU   WORKTABL+80
TTBLPTR  EQU   WORKTABL+84
OBUFRPTR EQU   WORKTABL+88
GPARMPTR EQU   WORKTABL+92
SCANPTR  EQU   WORKTABL+96
LNGTH    EQU   WORKTABL+100
COUNT    EQU   WORKTABL+102
CBMONCTR EQU   WORKTABL+104
FLGBFR   EQU   WORKTABL+106
FLAGS    EQU   FLGBFR
BASDSCAN EQU   0
TRCCODE  EQU   BASDSCAN
CBPTR    EQU   BASDSCAN+1
DPNTR    EQU   BASDSCAN+4
TITLPTR  EQU   BASDSCAN+8
OUTBUFFR EQU   0
INBUFFER EQU   0
DATA     EQU   0
TITLET   EQU   0
DATAT    EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00001 EQU   SAVAREA
GFMTPPT  EQU   GPARM+28
GFMTRPT  EQU   GPARM+20
EIDPTR   EQU   GPARM+12
OPTPTR   EQU   GPARM+8
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00073 EQU   CALCBMN
@RT00079 EQU   RETURN8
@RT00081 EQU   BLDTBL
@RT00097 EQU   PRNTDAT
@RT00111 EQU   EODATA
@RT00115 EQU   EODATA
@RT00154 EQU   DEVENTRY
@RT00157 EQU   DEVDATA
@RT00167 EQU   NOT
EXIT     EQU   @EL00002
@RT00179 EQU   EXIT
@ENDDATA EQU   *
         END   IMDUSRFF,(C'PLS1646',0602,75005)
