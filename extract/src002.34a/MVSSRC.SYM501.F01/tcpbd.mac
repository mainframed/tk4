         MACRO
         TCPBD &MERLIN
.*A430000                                                        S21101
         SPACE
IEDQCPB  DSECT
*                       SEEK HEAD CCW
CPBHEADF DS    0F .
CPBSEEK  DS    C .                      SEEK HEAD OP CODE
CPBHEAD  DS    AL3 .                    PTR TO HEAD ID
CPBSEKFL DS    C .                      SEEK CCW FLAG, CMD CHAINING
         DS    C .                      IGNORED
CPBSEKCT DS    H .                      SEEK COUNT OF 6
CPBSEK6  EQU   6 .                      BYTE COUNT SEEK CCW
*        AIF   ('&MERLIN' NE '3330').SKP                       @Y17XAXF
*                       SET SECTOR CCW
CPBSETAF DS    0F .
CPBSET   DS    X .                      SET SECTOR OP CODE
CPBSETA  DS    AL3 .                    PTR TO SECTOR ID BYTE
CPBSETFL DS    X .                      SET SECTOR CHAIN BIT FLAG
         DS    X .                      IGNORED
CPBSETCT DS    H .                      SET SECTOR COUNT OF 1
CPBSET1  EQU   1 .                      BYTE COUNT SET SECTOR CCW
*SKP     ANOP                                                  @Y17XAXF
*                        SEARCH ID EQ CCW
CPBSRECF DS    0F .
CPBSRCH  DS    C .                      SEARCH ID EQ OP CODE
CPBSREC  DS    AL3 .                    PTR TO RECORD ID
CPBSRHFL DS    C .                      SEARCH CCW FLAG
         DS    C .                      IGNORED
CPBSRHCT DS    H .                      SEARCH COUNT OF 5
CPBSRH5  EQU   5 .                      BYTE COUNT SEARCH CCW
*                        TIC TO SEARCH CCW
CPBTICSF DS    0F .
CPBTIC1  DS    C .                      TIC OP CODE
CPBTICS  DS    AL3 .                    ADDR OF SEARCH CCW
CPBUNUSD DS    0F .                     UNUSED IF NO SET SECTOR CCW
CPBSECTR DS    X .                      SECTOR ID
CPBUNUSA DS    AL3 .                    UNUSED
*                        RD/WR CCW
CPBAREAF DS    0F .
CPBRDWR  DS    C .                      RD/WR OP CODE
CPBAREA  DS    AL3 .                    ADDRESS OF I/O AREA
CPBRWFL  DS    C .                      RD/WR FLAG
         DS    C .                      IGNORED
CPBCOUNT DS    H .                      NUMBER OF BYTES
*                        SECOND RD/WR CCW
CPBXREAF DS    0F .
CPBXDWR  DS    C .                      RD/WR OP CODE
CPBXREA  DS    AL3 .                    ADDRESS OF I/O AREA
CPBXWFL  DS    C .                      RD/WR FLAG
         DS    C .                      IGNORED
CPBXOUNT DS    H .                      NUMBER OF BYTES
*                        TIC TO NEXT CPB
CPBNEXTF DS    0F .
CPBTIC2  DS    C .                      TIC OP CODE
CPBNEXT  DS    AL3 .                    PTR TO NEXT CPB
CPBFLAG  DS    0C .                     FLAG BYTE
*                       CPBFLAG BIT DEFINITIONS
CPBREUSN EQU   X'80' .                  SPECIAL CPB BELONGS TO REUS
CPBCOPYN EQU   X'40' .                  SPECIAL CPB BELONGS TO COPY
CPBRDSKN EQU   X'20' .                  REUSABLE DISK B'XX10XXXX'
CPBNDSKN EQU   X'10' .                  NON-REUS DISK B'XX01XXXX'
*
* LOW ORDER 4 BITS OF CPBFLAG ARE USED AS AN INDEX INTO A BRANCH
* TABLE TO INDICATE THE PROGRESS OF THE MESSAGE BEING MOVED.  THESE
* BITS ARE REFERENCED ONLY BY IGG019RP, REUS/COPY.
*
*              X'00' .                  'CANCELLED HEADER' MOVE
*                                         ASSIGNED NEXT HEADER
*                                         TO CURRENT ZONE
CPBADKD1 EQU   X'01' .                  'READ BAD K+D 1' FIRST FEFO
*                                         MSG WAS TOO OLD
CPBRDGD  EQU   X'02' .                  'READ GOOD DATA' FOLLOW FEFO
*                                         CHAIN THRU RECENT MSGS
CPBADKD2 EQU   X'03' .                  'READ BAD K+D 2' NON-FIRST
*                                         FEFO MSG WAS TOO OLD
CPBWRDAT EQU   X'04' .                  'WRITE DATA' WIPE OUT FEFO
*                                         POINTER THAT USED TO
*                                         POINT TO A BAD MSG WITH
*                                         CONTENTS OF DATA FIELD OF
*                                         BAD MSG SO IT SKIPS BAD
*                                         MSG BUT POINTS TO NEXT ONE
CPBWRHED EQU   X'05' .                  'WRITE HEADER' FIRST RECORD
*                                         OF OLD MSG GOES TO
*                                         ALTERNATE DESTINATION
CPBRDXTR EQU   X'06' .                  'READ XTRA' GET NON-FIRST
*                                         UNITS OF ANY BUFFER
CPBWRXTR EQU   X'07' .                  'WRITE XTRA' PUT NON-FIRST
*                                         UNIT OF ANY BUFFER TO
*                                         ALTERNATE DESTINATION
CPBRDNXT EQU   X'08' .                  'READ NEXT' GET FIRST UNIT
*                                         OF ANY NON-FIRST BUFFER
CPBSERVC EQU   X'09' .                  'WRITE SERVICED' MARK
*                                         ORIGINAL OLD COPY AS
*                                         SERVICED (NOT SENT, BUT
*                                         QUEUED FOR ALTERNATE
*                                         DESTINATION)
CPBUFEFO EQU   X'0A' .                  'UPDATE FEFO' ADD NEW MSG
*                                         ONTO FEFO CHAIN OF MSG
*                                         THAT WAS LAST ON FEFO
*                                         CHAIN OF ALTERNATE
*                                         DESTINATION
CPBWRHOL EQU   X'0B' .                  'WRITE HOLD DATA' IN MOVING
*                                         HELD Q TO FRONT OF FEFO Q
*                                         CHAIN FIRST FEFO MSG ONTO
*                                         FEFO Q OF LAST HELD MSG
CPBRDHOL EQU   X'0C' .                  'READ HOLD DATA' IN MOVING
*                                         HELD Q TO FRONT OF FEFO Q
*                                         AND SINCE FIRST FEFO MSG
*                                         IS BEING SERVICED, READ
*                                         ITS FEFO POINTER TO FIND
*                                       SECOND FEFO MSG SO IT CAN
*                                         BE LINKED ONTO THE LAST
*                                         HELD MSG
CPBADDR  DS    F .                      ABSOLUTE RECORD NO.
*                                                                S21101
CPBQTYPE EQU   X'03'                    LOW ORDER 2 BITS OF      S21101
*                                       CPBFLAG INDICATE QUEUE   S21101
*                                       TYPE -                   S21101
*                                         CORE           B'00'   S21101
*                                         NON-REUS DISK  B'01'   S21101
*                                         RESERVED       B'10'   S21101
*                                         REUSABLE DISK  B'11'   S21101
*                                                                S21101
CPBABSAD DS    D .                      MBBCCHHR
CPBLCB   DS    0A .                     DESTINATION LCB ADDRESS
*                                         (REUS/COPY ONLY)
CPBINWKA DS    X .                      COUNT OF DATA IN WORKAREA
CPBTOUNT DS    X .                      COUNT OF DATA TO BE MOVED
*                                         INTO UNIT
CPBWKACT DS    X .                      WHERE IN WORKAREA TO START
CPBNUMB  DS    X .                      SEQUENTIAL NO. OF THIS CPB
CPBWORK  DS    0A .                     ADDRESS OF UNIT USED AS
*                                         WORKAREA (REUS/COPY ONLY)
CPBAERBF DS    0A .                     ADDRESS OF ERB
CPBUNTCT DS    X .                      COUNT OF DATA ALREADY IN UNIT
CPBAERB  DS    AL3 .
CPBSIZE  EQU   * .
*                        CCW BIT DEFINITIONS
CPBCDC   EQU   X'80' .                  DATA CHAINING
CPBCCC   EQU   X'40' .                  COMMAND CHAINING
CPBSLIC  EQU   X'20' .                  SUPPRESS INCORRECT LENGTH
CPBSKIPC EQU   X'10' .                  SKIP DATA
CPBTICC  EQU   X'08' .                  TIC COMMAND
CPBSEEKC EQU   X'1B' .                  SEEK HEAD COMMAND
CPBSETC  EQU   X'23' .                  SET SECTOR COMMAND
CPBRDKC  EQU   X'0E' .                  READ KEY AND DATA COMMAND
CPBWRKC  EQU   X'0D' .                  WRITE KEY AND DATA COMMAND
CPBRDC   EQU   X'06' .                  READ DATA COMMAND
CPBWRC   EQU   X'05' .                  WRITE DATA COMMAND
CPBSRCHC EQU   X'31' .                  SEARCH ID EQ OP
CPBNOPC  EQU   X'03' .                  NO OP
CPBWRITB EQU   X'01' .                  WRITE DATA OR K+D BIT
CPBKEYB  EQU   X'08' .                  KEY BIT
         SPACE 2
         MEND
