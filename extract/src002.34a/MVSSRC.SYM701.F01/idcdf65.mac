 %       /************************************************************/
         /*                                                          */
         /* REPAIRV GLOBAL DATA AREAS - AMSDF65                      */
         /*                                                          */
         /*     1) PLS/2 MACRO DEFINITIONS                           */
         /*     2) GLOBAL REPTBL - REPAIRV COMMUNICATIONS REGION     */
         /*     3) DATA STRUCTURES                                   */
         /*                                                          */
         /************************************************************/

         /************************************************************/
         /*                                                          */
         /* PLS/2 MACRO DEFINITONS(MUST PRECEDE OTHER DECLARES)      */
         /*                                                          */
         /************************************************************/


         /************************************************************/
         /* FUNCTION - THESE MACROS ARE USED BY REPAIRV FOR ALL      */
         /*            CALLS TO IDCRDIO                              */
         /*                                                          */
         /* INVOCATION - ?FUNRCD DS(DSOPT) FOR(FOROPT);              */
         /*                                                          */
         /* INPUT -                                                  */
         /*            FUN = LOAD × ADD × GET × UPD × POS            */
         /*            DSOPT = IN × OUT                              */
         /*            FOROPT = NUP × UPD                            */
         /*                                                          */
         /* OUTPUT - APPRORIATE BITS ARE SET IN WFREQ                */
         /*                                                          */
         /* ERROR MESSAGES - ISSUED IF MACRO CALLED IMPROPERLY       */
         /*                                                          */
         /* RETURN CODE - 0 = SUCCESSFUL EXPANSION                   */
         /*               4 = NO EXPANSION DUE TO ERROR              */
         /*                                                          */
         /************************************************************/

  LOADRCD: ADDRCD: GETRCD: UPDRCD: POSRCD:
         MACRO KEYS(DS,FOR);
         DCL OP CHAR;
         DCL RCODE FIXED;
         OP = MACNAME(1:1);
         RCODE = 4;
         IF DS(1) = '' THEN RCODE = 0;
         IF DS(1) = 'IN' THEN RCODE = 0;
         IF DS(1) = 'OUT' THEN RCODE = 0;
         IF RCODE = 4 THEN DO;
           ANS MSG('DS OPTION UNRECOGNIZABLE');
           GOTO WFMOUT;
         END;
         RCODE = 4;
         IF DS(1) = 'IN' THEN DO;
           IF OP = 'P' THEN RCODE = 0;
           IF OP = 'G' THEN RCODE = 0;
         END;
         ELSE RCODE = 0;
         IF RCODE = 4 THEN DO;
           ANS MSG('FUNCTION NOT VALID FOR INPUT DS');
           GOTO WFMOUT;
         END;
         RCODE = 4;
         IF FOR(1) = '' THEN RCODE = 0;
         IF FOR(1) = 'NUP' THEN RCODE = 0;
         IF FOR(1) = 'UPD' THEN RCODE = 0;
         IF RCODE = 4 THEN DO;
           ANS MSG('FOR OPTION UNRECOGNIZABLE');
           GOTO WFMOUT;
         END;
         IF OP = 'G' THEN
           IF DS(1) = '' THEN DO;
             ANS MSG('DS OPTION MUST BE CODED FOR GETRCD');
             RCODE = 4;
             GOTO WFMOUT;
           END;
         IF OP = 'G' THEN DO;
           IF DS(1) = 'OUT' THEN IF FOR(1) = '' THEN RCODE = 4;
         END;
         IF RCODE = 4 THEN DO;
           ANS MSG('FOR OPTION MUST BE CODED FOR GETRCD DS(OUT)');
           GOTO WFMOUT;
         END;
         ANS('DO;') SKIP COL(MACCOL);
         ANS('WFREQ = ''''B;') SKIP COL(MACCOL+2);
         /*************************************************************/
         /* DETERMINE IF ADDRCD,LOADRCD, OR GETCRD HAS BEEN REQUESTED */
         /*************************************************************/
         IF OP = 'L' THEN DO;
           ANS('WFRLD  = ON;') SKIP COL(MACCOL+2);
           ANS('/* LOADRCD */') COL(MACCOL+20);
         END;
         IF OP = 'A' THEN DO;
           ANS('WFRADD = ON;') SKIP COL(MACCOL+2);
           ANS('/*  ADDRCD */') COL(MACCOL+20);
         END;
         IF OP = 'G' THEN DO;
           ANS('WFRGET = ON;') SKIP COL(MACCOL+2);
           ANS('/*  GETRCD */') COL(MACCOL+20);
           IF DS(1) = 'IN' THEN DO;
             ANS('WFRIN  = ON;') SKIP COL(MACCOL+2);
             ANS('/* INPUT DS */') COL(MACCOL+20);
           END;
           ELSE DO;
             IF FOR(1) = 'UPD' THEN DO;
               ANS('WFRUP  = ON;') SKIP COL(MACCOL+2);
               ANS('/* UPDATE */') COL(MACCOL+20);
             END;
           END;
         END;
         /*************************************************************/
         /* DETERMINE IF UPDRCD OR POSRCD FUNCTION WAS REQUESTED*/
         /*************************************************************/
         IF OP = 'U' THEN DO;
           ANS('WFRUPD = ON;') SKIP COL(MACCOL+2);
           ANS('/*  UPDRCD */') COL(MACCOL+20);
           ANS('WFRUP  = ON;') SKIP COL(MACCOL+2);
           ANS('/* UPDATE */') COL(MACCOL+20);
         END;
         IF OP = 'P' THEN DO;
           ANS('WFRPOS = ON;') SKIP COL(MACCOL+2);
           ANS('/*  POSRCD */') COL(MACCOL+20);
           IF DS(1) = 'IN' THEN DO;
             ANS('WFRIN  = ON;') SKIP COL(MACCOL+2);
             ANS('/* INPUT DS */') COL(MACCOL+20);
           END;
         END;
         ANS('CALL IDCRDIO;') SKIP COL(MACCOL+2);
         ANS('RFY RTNREG RSTD;') SKIP COL(MACCOL+2);
         ANS('TESTRC = RTNREG;') SKIP COL(MACCOL+2);
         ANS('RFY RTNREG UNRSTD;') SKIP COL(MACCOL+2);
         ANS('END;') SKIP COL(MACCOL);
 WFMOUT: RETURN CODE(RCODE);
 %END;
 @EJECT;
 %       /************************************************************/
         /* FUNCTION - THIS MACRO IS USED BY REPAIRV FOR ALL         */
         /*            CALLS TO CKERR                                */
         /*                                                          */
         /* INVOCATION - ?CALLCKER(ERRNUM,MSGVARX,...);              */
         /*                                                          */
         /* INPUT -                                                  */
         /*            ERRNUM = ENTRY NUMBER FOR CKERR ACTION TABLE  */
         /*            MSGVARX = MESSAGE VARIABLES TO BE INSERTED    */
         /*                      IN MESSAGE                          */
         /*                                                          */
         /* OUTPUT - APPRORIATE BITS ARE SET IN CKREQ                */
         /*                                                          */
         /************************************************************/

  CALLCKER:
         MACRO;
         DCL INDEX1 FIXED;
         DCL INDEX2 FIXED;
         INDEX1 = 1;
         INDEX2 = 2;
         ANS('DO;') SKIP COL(MACCOL);
         ANS('CKREQ = CKREQ && CKREQ;') SKIP COL(MACCOL+2);
         ANS('CKRERN = '××MACLIST(1)××';') SKIP COL(MACCOL+2);
         IF NUMBER(MACLIST) > 1
           THEN
 MVAR:       DO;
               ANS('CKRMVAR(INDEX1) = ADDR('××MACLIST(INDEX2)××');')
                 SKIP COL(MACCOL+2);
               INDEX1 = INDEX1 + 1;
               INDEX2 = INDEX2 + 1;
               IF INDEX2 <= NUMBER(MACLIST)
                 THEN
                   GOTO MVAR;
             END;
         ANS('CALL IDCRDER;') SKIP COL(MACCOL+2);
         ANS('END;') SKIP COL(MACCOL);
 %END;

 %       /************************************************************/
         /*                                                          */
         /* FUNCTION - THIS MACRO SIMULATES THE MVCL ASSEMBLER       */
         /*            INSTRUCTION THUS ALLOWING MORE THAN 256       */
         /*            BYTES TO BE MOVED AT A TIME.                  */
         /*                                                          */
         /* INVOCATION - ?MOVELONG TARGET(TARAREA,TARLENG)           */
         /*                        SOURCE(SRCAREA,SRCLENG);          */
         /*                                                          */
         /* INPUT - TARAREA = ADDRESS OF RECEIVING FIELD             */
         /*         TARLENG = LENGTH OF RECEIVING FIELD              */
         /*         SRCAREA = ADDRESS OF SOURCE FIELD                */
         /*         SRCLENG = LENGTH OF SOURCE FIELD                 */
         /*                                                          */
         /* OUTPUT - RECEIVING FIELD GETS THE STRING                 */
         /*          OF THE SOURCE FIELD AS IN THE MVCL              */
         /*          ASSEMBLER INSTRUCTION.                          */
         /*                                                          */
         /************************************************************/

  MOVELONG: MACRO KEYS(TARGET,SOURCE);
         ANS('RFY (REG2,REG3,REG4,REG5) RSTD;')
                   SKIP COL(MACCOL);
         ANS('REG2 = '××TARGET(1)××';') SKIP COL(MACCOL);
         ANS('REG3 = '××TARGET(2)××';') SKIP COL(MACCOL);
         ANS('REG4 = '××SOURCE(1)××';') SKIP COL(MACCOL);
         ANS('REG5 = '××SOURCE(2)××';') SKIP COL(MACCOL);
         ANS('MVCL (REG2,REG4);') SKIP COL(MACCOL);
         ANS('RFY(REG2,REG3,REG4,REG5) UNRSTD;')
                   SKIP COL(MACCOL);
 %END;

         /**********************************************************/
         /*                                                        */
         /* REPAIRV COMMUNICATIONS REGION                          */
         /*                                                        */
         /**********************************************************/
         DCL 1 REPTBL,
               2 REPCB,
                 3 REPRESER CHAR(12),   /*SPACE FOR IDENTIFER REPTBL*/
                 3 REPARFIO PTR(31),    /*PTR TO IOCSTR FOR
                                              ALTERNATE REPORT FILE */
                 3 REPIRWIO PTR(31),    /*PTR TO IOCSTR FOR IN
                                          REPAIR WORK FILE          */
                 3 REPORWIO PTR(31),    /*PTR TO IOCSTR FOR OUT
                                                 REPAIR WORK FILE   */
                 3 REPIDSOP PTR(31),    /*PTR TO IOCTLBK FOR IN FILE*/
                 3 REPODSOP PTR(31),    /*PTR TO IOCTLBK FOR OUT DS */
                 3 REPIDSAR PTR(31),    /*PTR TO UEXCP READ ARGUMENT
                                            LIST FOR INPUT DATA SET */
                 3 REPODSAR PTR(31),    /*PTR TO UEXCP READ ARGUMENT
                                            LIST FOR OUTPUT DATA SET*/
                 3 REPSPRIT PTR(31),    /*PTR TO IDCRDPT ARG LIST   */
                 3 REPIBFPT PTR(31),    /*PTR TO IN BUFFER FOR FILE */
                 3 REPOBFPT PTR(31),    /*PTR TO OUT BUFFER FOR DS  */
                 3 REPBUFF0 PTR(31),    /*PTR TO IN BUFFER FOR
                                              REPAIR WORK FILE      */
                 3 REPBUFF1 PTR(31),    /*PTR TO OUT BUFFER TO
                                              REPAIR WORK FILE      */
                 3 REPRWHDI PTR(31),    /*PTR TO INPUT REPAIR WORK
                                            FILE HEADER RECORD      */
                 3 REPRWHDO PTR(31),    /*PTR TO OUTPUT REPAIR WORK
                                            FILE HEADER RECORD      */
                 3 REPINCL  PTR(31),    /*TO CLOSE INPUT            */
                 3 REPOUTCL PTR(31),    /*TO CLOSE OUTPUT           */
                 3 REPIXTN2 PTR(31),    /*ADDR OF INPUT XTNTTBL2    */
                 3 REPIXTNT PTR(31),    /*ADDR OF INPUT XTNTTBL     */
                 3 REPOXTN2 PTR(31),    /*ADDR OF OUTPUT XTNTTBL2   */
                 3 REPOXTNT PTR(31),    /*ADDR OF OUTPUT XTNTTBL    */
                 3 REPIINFO PTR(31),    /*ADDR OF INPUT UIOINFO AREA*/
                 3 REPOINFO PTR(31),    /*ADDR OF OUTPT UIOINFO AREA*/
                 3 REPRWHAR PTR(31),    /*ADDR OF REPAIR WORK FILE
                                         HEADER INFORMATION AREA    */
                 3 REPRWINA PTR(31),    /*ADDR OF REPAIR WORK FILE
                                                INFORMATION AREA    */
                 3 REPISYSI PTR(31),    /*INPUT USYSINFO AREA ADDR  */
                 3 REPOSYSI PTR(31),    /*OUTPUT USYSINFO AREA ADDR */
                 3 REPILCPT PTR(31),    /*PTR TO LOCATION TABLE FOR
                                          THE INPUT DATA SET        */
                 3 REPOLCPT PTR(31),    /*PTR TO LOCATION TABLE FOR
                                          THE OUTPUT DATA SET       */
                 3 REPIDEVA PTR(31),    /* PTR TO INPUT DEVTYPE AREA*/
                 3 REPODEVA PTR(31),    /* PTR TO OPUT DEVTYPE AREA */
                 3 REPQRPTR PTR(31),    /* PTR TO QNAME AND RNAME   */
                 3 REPALLAG PTR(31),    /* PTR TO SPACE FOR ALLAGL  */
                 3 REPEXOAR PTR(31),    /* PTR TO SPACE FOR EXOARG  */
                 3 REPOPAGL PTR(31),    /* PTR TO SPACE FOR OPNAGL  */
                 3 REPCPPTR PTR(31),    /* PTR TO CATALOG PARM LIST */
                 3 REPCDSOP PTR(31),    /* IOCPTR FOR DS            */
               /*****************************************************/
               /*                                                   */
               /* WORKING STORAGE FOR IDCRD02-IDCRD07               */
               /*                                                   */
               /*****************************************************/
               2 REPCBEXT,
                 3 REPR0LN  FIXED(16),  /* RWF RECORD 0 LENGTH      */
                 3 REPR1LN  FIXED(16),  /* RWF RECORD 1 LENGTH      */
                 3 REPSRPR,
                   4 REPSRPRT BIT(1),   /*HEADER SWITCH FOR IDCRDPT */
                   4 *        BIT(7),
                   4 * CHAR(1),         /*RESERVED                  */
                 3 REPRC FIXED(16),     /*RETURN CODE               */
                 3 REPRCDCT FIXED(31),  /*RECORDS PROCESSED COUNTER */
                 3 I        FIXED(8),   /* INDEX1 FOR TNTTBL PROCESS*/
                 3 J        FIXED(8),   /* INDEX2 FOR TNTTBL PROCESS*/
                 3 K        FIXED(8),   /* INDEX3 FOR TNTTBL PROCESS*/
                 3 *        FIXED(8),   /* RESERVED                 */
                 3 CKREQ BDY(WORD),     /*   CKERR PARM LIST        */
                   4 CKRERN  FIXED(15), /*   ERROR NUMBER           */
                   4 *       FIXED(15), /*   RESERVED               */
                   4 CKRMVAR (10) PTR(31), /*  PTRS TO MSG VARIABLES*/
                 3 RDCATRC FIXED(31),   /*     UCATLG RETURN CODE   */
                 3 WFIOGUK CHAR(11),    /*     GET UPDATE KEY       */
                 3 *         CHAR(1),   /*   RESERVED               */
                 3 WFAREA BDY(WORD),    /*   WFIO ARGUEMENTS        */
                   4 WFIODAD PTR(31),   /*   DATA ADDRESS           */
                   4 WFIODLN FIXED(31), /*   DATA LENGTH            */
                   4 WFIOKYA PTR(31),   /*   KEY ADDRESS            */
                   4 WFREQ BIT(16),     /*   FUNCTION FLAGS         */
                     5 WFRTYP BIT(8),   /*   FUNCTION TYPE          */
                       6 WFRADD BIT(1), /*   ADDRCD                 */
                       6 WFRLD  BIT(1), /*   LOADRCD                */
                       6 WFRGET BIT(1), /*   GETRCD                 */
                       6 WFRUPD BIT(1), /*   UPDRCD                 */
                       6 WFRPOS BIT(1), /*   POSRCD                 */
                       6 *      BIT(3), /*   RESERVED               */
                     5 WFROPT BIT(8),   /*   OPTIONS                */
                       6 WFRIN  BIT(1), /*   INPUT DS               */
                       6 WFRUP  BIT(1), /*   UPDATE                 */
                       6 *      BIT(6), /*   RESERVED               */
                 3 REPENQSW FIXED(8);   /*   ENQUEUE SENSE SWITCH   */

         /***********************************************************/
         /*                                                         */
         /* DATA STRUCTURES FOR REPAIRV                             */
         /*                                                         */
         /***********************************************************/

          /* REPAIR WORKFILE HEADER RECORD                          */

          DCL 1 RWFHDR BDY(WORD) BASED,
                2 RWFHKEY   CHAR(11),   /* RWF KEY                  */
                2 RWFHDSNR  CHAR(44),   /*  REPAIRWORKFILE          */
                2 RWFHDSNU  CHAR(44),   /* DSNAME OF USER DATA SET  */
                2 RWFHFM CHAR(4);       /* INFO AREA - SEE RWDEF    */
          /* ADDRESSABILITY TO INFORMATION AREA OF WORKFILE HDR REC */
          DCL 1 RWDEF  DEFINED(RWFHDR) BDY(WORD),
                2 * CHAR(89),           /* SEE RWFHDR               */
                2 RWFHFT  CHAR(1),      /* F MEANS FIXED RECORD
                                           BLANK MEANS NOT FIXED    */
                2 RWFHDLN FIXED(16),    /* RCD LENGTH OR ZERO       */
                2 RWFHKLN FIXED(8);     /* KEY LENGTH OR ZERO       */

          /* IDCRDPT ARGUMENT LIST                                  */
          DCL 1 SRPRTARG BDY(WORD) BASED(REPSPRIT),

                2 SRVRECL FIXED(31),    /* VSAM REC LEN MINUS F + K */
                2 SRVREPTR PTR(31),     /* PTR TO VSAM RECORD       */
                2 SRDSNHDR PTR(31),     /* PTR TO DSNAME IN RWF     */
                2 SRVOLPTR PTR(31),     /* PTR TO VOL SER NUMBER    */
                2 SRRWFDSN PTR(31),     /* PTR TO DSNAME OF RWF     */
                2 SRRWFKEY PTR(31),     /* PTR TO KEY OF RWF        */
                2 SRERCODE PTR(31),     /* PTR TO ERROR CODE        */
                2 SRDSNPTR PTR(31),     /* PTR TO DSNAME - DATA SET */
                2 SRSPRECL FIXED(31),   /* KEY + DATA LEN STAGPACK  */
                2 SRRECPTR PTR(31),     /* PTR TO COUNT OF NON-VSAM */
                2 SRCCHHRP PTR(31);     /* PTR TO CCHHR             */

         /* REPAIR WORKFILE INFORMATION AREA                        */

         DCL 1 RWFINFO BASED(REPRWINA),
               2 RWFDDN CHAR(8),        /* DDNAME                   */
               2 RWFDSN CHAR(44),       /* DSNAME                   */
               2 RWFVOL (5) CHAR(6),    /* VOLSER                   */
               2 RWFKEY1,               /* BEGINING RWF KEY         */
                 3 RWFKVOL1 CHAR(6),    /* VOLSER                   */
                 3 RWFKCHR1 CHAR(5),    /* CCHHR                    */
               2 RWFKEY2,               /* ENDING RWF KEY           */
                 3 RWFKVOL2 CHAR(6),    /* VOLSER                   */
                 3 RWFKCHR2 CHAR(5);    /* CCHHR                    */

         /* RWF HEADER RECORD INFORMATION                           */

         DCL 1 RWHDRINF BASED(REPRWHAR),
               2 RWHDRFIX CHAR(1),      /* F FOR FBS RECORD FORMAT  */
                                        /* 0 FOR OTHER RCD FORMATS  */
               2 *        CHAR(4),
               2 RWHDRKLN FIXED(8),     /* KEY LN IF RWHDRFIX = F   */
                                        /* 0 IF RWHDRFIX ^= F       */
               2 RWHDRDLN FIXED(16);    /* DATA LN IF RWHDRFIX = F  */
                                        /* 0 IF RWHDRFIX ^= F       */

         /* IDCRDRD  ARGUMENT LIST                                  */

         DCL 1 RDARG BDY(WORD) BASED,
               2 RDRES      CHAR(8),    /*RESERVED                  */
               2 RDCTLBK    PTR(31),    /*POINTER TO I/O CNTL BLK   */
               2 RDIOAREA   PTR(31),    /*PTR TO RIOAREA            */
               2 RDDARE     PTR(31),    /*PTR TO DATA READ          */
               2 RDLOCPTR   PTR(31),    /*POINTER TO LOC TABLE      */
               2 RDCCWCNT   FIXED(15),  /*NUM OF CCWS EXECUTED      */
               2 RDCHR,
                  3 RDCC    FIXED(16),  /*CYLINDER NUMBER           */
                  3 RDHH    FIXED(16),  /*HEAD NUMBER               */
                  3 RDRECNUM FIXED(8),  /*RECORD NUMBER             */
               2 RDDS       FIXED(8),   /* ZERO FOR DATA SET        */
               2 RDRWPKLN   PTR(31),    /* KEY LEN POINTER          */
               2 RDSPACE,               /* RESERVED FOR UEXCP       */
                  3 *       FIXED(8),   /* RESERVED                 */
                  3 *       PTR(24),    /* RESERVED                 */
                  3 *       FIXED(15),  /* RESERVED                 */
                  3 *       FIXED(15),  /* RESERVED                 */
                  3 *       FIXED(15),  /* RESERVED                 */
               2 RDFUNC FIXED(8),       /* WRITE FUNCTION BYTE      */
               2 RDSPKL FIXED(8),       /* STAGING PACK KEY LENGTH  */
               2 RDSPDL FIXED(15),      /* STAGING PACK DATA LENGTH */
               2 RDLENTOT FIXED(15),    /* NUM OF LENGTH ENTRIES    */
               2 RDKLEN    PTR(31),     /* PTR LEN ENTRIES FOR KL   */
               2 RDDLEN    PTR(31);     /* PTR LEN ENTRIES FOR DL   */

         DCL RDSPKLDL CHAR(3) DEFINED(RDSPKL);
         /* UIOINFO RETURN AREAS                                    */

         DCL 1 INFOAREA BASED,
               2 INFAREAL   FIXED(16),  /* LENGTH OF RETURN AREA    */
               2 INFDATAL   FIXED(16),  /* LENGTH OF DATA RETURNED  */
               2 INFAREA    CHAR(*);
         DCL 1 INFODSN BASED,
               2 INFDSNID   CHAR(2),    /* IDENTIFIER - X'0001'     */
               2 INFDSNLN   FIXED(16),  /* LENGTH OF DATA RETURNED  */
               2 INFDSN     CHAR(44);   /* DATA SET NAME            */
         DCL 1 INFOVOL BASED,
               2 INFVOLID   CHAR(2),    /* IDENTIFIER - X'0002'     */
               2 INFVOLLN   FIXED(16),  /* LENGTH OF DATA RETURNED  */
               2 INFVOL(5)  CHAR(6);    /* VOLUME SERIAL NUMBER LIST*/

         /* DEVICE TYPE AREA DSECT                                  */

         DCL 1 DEVAREA BDY(WORD) BASED,
               2 DEVDEVTP,              /* UCB DEVICE TYPE          */
                 3 DEVTBYT1 BIT(8),     /* MODEL BITS               */
                 3 DEVTBYT2,            /* OPTION FLAGS             */
                   4 * BIT(4),
                   4 DEVRVDEV BIT(1),   /* 0 = REAL DEVICE          */
                                        /* 1 = VIRTUAL DEVICE       */
                   4 * BIT(3),
                 3 DEVTBYT3 BIT(8),     /* CLASS BITS               */
                 3 DEVTBYT4 BIT(8),     /* DEVICE CODE              */
               2 DEVMAXBK   FIXED(32),  /* MAXIMUM DEVICE BLOCKSIZE */
               2 *,
                 3 DEVMAXCC FIXED(16),  /* MAXIMUM PHYSICAL CYLINDER*/
                 3 DEVMAXHH FIXED(16),  /* MAXIMUM PHYSICAL TRACKS  */
               2 DEVWORD3,
                 3 DEVTC    FIXED(16),  /*TRACK CAPACITY            */
                 3 DEVBOH,
                   4 DEVBOH1 FIXED(8),  /* BLOCK OVERHEAD 3330      */
                   4 DEVBOH2 FIXED(8),  /* THIS & ABOVE IS BLOCK    */
               2 DEVWORD4,
                 3 DEVKC    FIXED(8),   /* KEY CONSTANT             */
                 3 DEV4B1,
                   4 *      BIT(4),
                   4 INF4FLG BIT(1),    /* ON INDICATES TWO BYTES
                                   OF BLOCK OVERHEAD MUST BE HANDLED*/
                   4 *      BIT(3),
                   4 *      CHAR(2),    /* RESERVED                 */
               2 DEVWORD5 FIXED(32);

         /* EXTENT TABLE 2: DATA SET DEB EXTENTS                    */

         DCL 1 XTNTTBL2 BASED,
               2 XTN2ENT(140),
                 3 XTN2DSN CHAR(44),      /* DATA SET NAME          */
                 3 XTN2CHR1,              /*  LOWER LIMIT CCHH      */
                   4 XTN2CC1  FIXED(16),
                   4 XTN2HH1  FIXED(16),
                 3 XTN2CHR2,              /*  UPPER LIMIT CCHH      */
                   4 XTN2CC2   FIXED(16),
                   4 XTN2HH2   FIXED(16);

         /* EXTENT TABLE 3: USER SUPPLIED RANGE MERGED WITH XTNTTBL2*/

         DCL 1 XTNTTBL BASED,
               2 XTNTHDR,                 /* EXTENT TABLE HEADER    */
                 3 XTNHDDN   CHAR(8),     /* DDNAME                 */
                 3 XTNHDSN   CHAR(44),    /* DSNAME                 */
                 3 XTNHVOLN  CHAR(1),     /* VOLUME COUNT OF 1      */
                 3 XTNHVOL   CHAR(6),     /* VOLSER                 */
                 3 *         CHAR(1),
                 3 XTNHPWD   CHAR(8),     /* PASSWORD               */
                 3 XTNHCHR1,              /* USER LOWER LIMIT CCHHR */
                   4 XTNHCC1   FIXED(16),
                   4 XTNHHH1   FIXED(16),
                   4 XTNHR1    FIXED(8),
                 3 *         CHAR(3),     /* RESERVED               */
                 3 XTNHCHR2,              /* USER UPPER LIMIT CCHHR */
                   4 XTNHCC2   FIXED(16),
                   4 XTNHHH2   FIXED(16),
                   4 XTNHR2    FIXED(8),
                 3 *         CHAR(3),     /* RESERVED               */
                 3 XTNHMODE  CHAR(1),     /* I=INPUT,O=OUTPUT       */
                 3 *         CHAR(3),
               2 XTNTENT(140),            /* EXTENT TABLE ENTRIES   */
                 3 XTNTDDN   CHAR(8),     /* DDNAME                 */
                 3 XTNTDSN   CHAR(44),    /* DSNAME                 */
                 3 XTNTVOLN  CHAR(1),     /* VOLUME COUNT OF 1      */
                 3 XTNTVOL   CHAR(6),     /* VOLSER                 */
                 3 *         CHAR(3),     /* RESERVED               */
                 3 XTNTCHR1,              /* MERGED LOW LIM  CCHHR  */
                   4 XTNTCC1   FIXED(16),
                   4 XTNTHH1   FIXED(16),
                   4 XTNTR1    FIXED(8),
                 3 *         CHAR(3),     /* RESERVED               */
                 3 XTNTCHR2,              /* MERGED UPPER LIM CCHHR */
                   4 XTNTCC2   FIXED(16),
                   4 XTNTHH2   FIXED(16),
                   4 XTNTR2    FIXED(8),
                 3 *         CHAR(3);     /* RESERVED               */
         /* STRUCTURE TO REFERENCE 'RESERVE' QUEUE PARAMETERS       */
         DCL 1 SPLIST BASED(REPQRPTR),
               2 SPQNAME CHAR(8),         /* QNAME                  */
               2 SPRNAME,                 /* RNAME                  */
                 3 SPRLEN CHAR(1),        /* RNAME LENGTH           */
                 3 SPRVOL CHAR(6);        /* VOLSER                 */
         /* REPAIR WORKFILE DATA RECORD                             */
         DCL 1 RWFR BASED BDY(WORD),
               2 RWFRKEY  CHAR(11),       /* RWF KEY                */
               2 RWFRFLG CHAR(5),         /* SEE RWFRDE             */
               2 RWFRCNT,
                 3 RWFRCC FIXED(16),      /* CC                     */
                 3 RWFRHH FIXED(16),      /* HH                     */
                 3 RWFRR  FIXED(8),       /* R                      */
                 3 RWFRKLN FIXED(8),      /* RECORD KEY LENGTH      */
                 3 RWFRDLN FIXED(16),     /* RECORD DATA LENGTH     */
               2 RWFRKD CHAR(*);          /* RECORD KEY/DATA        */
         /* STRUCTURE TO ALLOW ADDRESSABILITY TO STATUS FIELDS OF
                               OF REPAIR WORKFILE DATA RECORD       */
         DCL 1 RWFRDE DEFINED(RWFR),
               2 * CHAR(11),              /* SEE RWFR               */
               2 RWFRF1 CHAR(1),          /* 0 WHEN FILE CREATED    */
                                          /* 1 WHEN FILE MODIFIED   */
                                          /* 2 WHEN FILE DEBLOCKED  */
                                          /* 3 WHEN DEBLOCKED AND   */
                                          /* MODIFIED               */
                                          /* DEBLOCKED              */
               2 RWFRF2 FIXED(16),        /* STATUS CODE            */
               2 RWFROV FIXED(8),         /* OVERFLOW RECORD        */
               2 * CHAR(*);               /* SEE RWFR               */

         /***********************************************************/
         /*                                                         */
         /*  END OF REPAIRV GLOBAL DECLARATIONS                     */
         /*                                                         */
         /***********************************************************/
