* %/* START OF SPECIFICATIONS  ***                           @Z40LB22
*                                                            @Z40LB22
*01*  MODULE-NAME = ICBQUERY                                 @Z40LB22
*                                                            @Z40LB22
*01*  DESCRIPTIVE-NAME = READ SA WCS, READ MCS WCS, READ MSC @Z40LB22
*                        TABLES, LABEL READ, AND CELL AUDIT  @Z40LB22
*                                                            @Z40LB22
*01*  COPYRIGHT = NONE                                       @Z40LB22
*                                                            @Z40LB22
*01*  STATUS =  OS/VS2                                       @Z40LB22
*                                                            @Z40LB22
*01*  FUNCTION = BUILDS A REQUEST BLOCK FOR A REQUEST.       @Z40LB22
*                THE MACRO IS A COMMUNICATION LINK BETWEEN   @Z40LB22
*                THE CALLER AND THE MSSC SVC MODULE.         @Z40LB22
*                                                            @Z40LB22
*01*  NOTES = ICBQUERY IS CODED IN PLS ONLY.                 @Z40LB22
*                                                            @Z40LB22
*02*    DEPENDENCIES = NONE                                  @Z40LB22
*                                                            @Z40LB22
*02*    RESTRICTIONS = THE PREFIXES ICB AND QUERY SHOULD BE  @Z40LB22
*                      AVOIDED WHEN INVOKING THIS MACRO.     @Z40LB22
*                                                            @Z40LB22
*02*    REGISTER-CONVENTIONS = FOLLOWS NORMAL USE OF         @Z40LB22
*                              REGISTERS BY MACROS:          @Z40LB22
*                              R0,R1,R14, AND R15.           @Z40LB22
*                                                            @Z40LB22
*01*  MODULE-TYPE = MACRO                                    @Z40LB22
*                                                            @Z40LB22
*02*    PROCESSOR = PLS2                                     @Z40LB22
*                                                            @Z40LB22
*01*  INPUT = PARAMETERS SPECIFIED ON THE PLS MACRO          @Z40LB22
*             INVOCATION.                                    @Z40LB22
*                                                            @Z40LB22
*     THE READ SA WCS REQUEST IS ISSUED WHEN THE CALLER      @Z40LB22
*     WANTS TO MOVE ONE SECTOR (256 BYTES) OF SA STORAGE     @Z40LB22
*     INTO MSC DIAGNOSTIC BUFFER AT OFFSET 256 - 511.        @Z40LB22
*                                                            @Z40LB22
*     THE READ MSC WCS REQUEST IS ISSUED WHEN THE CALLER     @Z40LB22
*     WANTS TO MOVE ONE SECTOR (256 BYTES) INTO MSC          @Z40LB22
*     DIAGNOSTIC BUFFER AT OFFSET 256 - 511.                 @Z40LB22
*                                                            @Z40LB22
*     THE READ MSC TABLES REQUEST IS ISSUED WHEN THE CALLER  @Z40LB22
*     WANTS TO READ ONE RECORD (264 BYTES) INTO MSC          @Z40LB22
*     DIAGNOSTIC BUFFER AT OFFSET 248 - 511.                 @Z40LB22
*                                                            @Z40LB22
*     THE LABEL READ REQUEST IS ISSUED WHEN THE CALLER WANTS @Z40LB22
*     TO READ A CARTRIDGE LABEL (256 BYTES) INTO DIAGNOSTIC  @Z40LB22
*     BUFFER AT OFFSET 256 - 511.                            @Z40LB22
*                                                            @Z40LB22
*     THE CELL AUDIT REQUEST IS ISSUED WHEN THE CALLER WANTS @Z40LB22
*     TO TEST THE LIBRARY CELLS FOR FULL/EMPTY STATUS AND    @Z40LB22
*     LOAD THE RESULTS IN DIAGNOSTIC BUFFER AT OFFSET 0 - 31 @Z40LB22
*                                                            @Z40LB22
*     MACRO SYNTAX                                           @Z40LB22
*                                                            @Z40LB22
*     LIST FORM                                              @Z40LB22
*                                                            @Z40LB22
*     VERB        REQUIRED PARMS             OPTIONAL PARMS  @Z40LB22
*                                                            @Z40LB22
*     ICBQUERY    MF(L,NAME/(R)[,ATTRIBUTE])                 @Z40LB22
*                                                            @Z40LB22
*     EXECUTE FORM                                           @Z40LB22
*                                                            @Z40LB22
*     VERB        REQUIRED PARMS             OPTIONAL PARMS  @Z40LB22
*                                                            @Z40LB22
*     ICBQUERY    MF(E,NAME/(R))            MF(E,NAME/(R)    @Z40LB22
*                 TYPE(QSWCS/QLAB/QMWCS/      [,COMPLETE])   @Z40LB22
*                      QTAB/QCEL)           PARMS(ADDR/(R))  @Z40LB22
*                                           FLAGS(ADDR/(R))  @Z40LB22
*                                           SECT(ADDR/(R))   @Z40LB22
*                                           SSID(ADDR/(R))   @Z40LB22
*                                           MSFID(ADDR/(R))  @Z40LB22
*                                           CMAP(ADDR/(R))   @Z40LB22
*                                           LZYX(ADDR/(R))   @Z40LB22
*                                           LOC(ADDR/(R))    @Z40LB22
*                                          DASDCHR(ADDR/(R)) @Z40LB22
*                                          DATAPTR(NAME/(R)) @Z40LB22
*                                                            @Z40LB22
*     KEYWORD PARAMETERS:                                    @Z40LB22
*                                                            @Z40LB22
*     MF  -  MACRO FORMAT: THIS PARAMETER DESCRIBES THE      @Z40LB22
*            MACRO FORMAT AND MAY GIVE THE ADDRESS OR        @Z40LB22
*            ADDRESS IN A REGISTER WHERE THE REQUEST BLOCK   @Z40LB22
*            IS STORED.                                      @Z40LB22
*                                                            @Z40LB22
*            L - LIST FORM:  THE EXPANSION OF THE L-FORM     @Z40LB22
*                MACRO WILL RESULT IN AN UNINITIALIZED       @Z40LB22
*                REQUEST BLOCK.                              @Z40LB22
*                                                            @Z40LB22
*            (1) NAME - THE MACRO INVOKER MUST SPECIFY A     @Z40LB22
*                NAME FOR HIS STRUCTURE WHEN INVOKING THE    @Z40LB22
*                PLS LIST FORM.                              @Z40LB22
*                                                            @Z40LB22
*            (2) ATTRIBUTE - THE MACRO WILL PLACE ANY PLS    @Z40LB22
*                ATTRIBUTE SPECIFIED IN THE MACRO INVOCATION @Z40LB22
*                IN AN UNINITIALIZED REQUEST BLOCK.          @Z40LB22
*                ATTRIBUTE EXAMPLE:                          @Z40LB22
*                                                            @Z40LB22
*                CHAR, FIXED, STATIC LOCAL, NONLOCAL,        @Z40LB22
*                BASED(*), ETC.                              @Z40LB22
*                                                            @Z40LB22
*            E - EXECUTABLE FORM:  THE EXPANSION OF THIS     @Z40LB22
*                FORM CONSISTS OF A LINKAGE INSTRUCTION AND  @Z40LB22
*                POSSIBLY, PARAMETER BINDING INSTRUCTIONS.   @Z40LB22
*                                                            @Z40LB22
*                SUB-PARAMETERS                              @Z40LB22
*                (1)  AN E MUST BE SPECIFIED IN THE FIRST    @Z40LB22
*                     SUB-PARAMETER POSITION.  THIS          @Z40LB22
*                     INDICATES THAT THE MACRO IS IN         @Z40LB22
*                     EXECUTABLE FORM.                       @Z40LB22
*                                                            @Z40LB22
*                (2)  A NAME OR A REGISTER MUST BE SPECIFIED @Z40LB22
*                     IN THE SECOND SUB-PARAMETER.           @Z40LB22
*                                                            @Z40LB22
*                (3)  'COMPLETE' - COMPLETE WILL CAUSE THE   @Z40LB22
*                     MACRO TO ZERO OUT THE REQUEST BLOCK.   @Z40LB22
*                     AFTER ZEROING THE REQUEST BLOCK THE    @Z40LB22
*                     FUNCTION OPCODE, CODE AND LENGTH ARE   @Z40LB22

*                     PLACED IN THE REQUEST BLOCK.           @Z40LB22
*                                                            @Z40LB22
*     TYPE - INDICATES WHETHER THE REQUEST IS FOR READ SA    @Z40LB22
*            WCS (QSWCS), READ MSC WCS (QMWCS), LABEL READ   @Z40LB22
*            (QLAB), READ MSC TABLES (QTAB), OR CELL AUDIT   @Z40LB22
*            (QCEL).  THE ORDER AND CODE FIELD OF THE        @Z40LB22
*            REQUEST BLOCK IS FILLED IN BY THE EXECUTE FORM  @Z40LB22
*            MARCO. THE FOLLOWING TABLE GIVES THE ORDERS     @Z40LB22
*            AND CODES FOR EACH REQUEST.                     @Z40LB22
*                                                            @Z40LB22
*                REQUEST          × ORDER    × CODE          @Z40LB22
*                --------------------------------------      @Z40LB22
*                READ MSC WCS     × HEX'0B'  × HEX'03'       @Z40LB22
*                READ MSC TABLES  × HEX'05'  × HEX'06'       @Z40LB22
*                LABEL READ       × HEX'05'  × HEX'08'       @Z40LB22
*                READ SA WCS      × HEX'05'  × HEX'10'       @Z40LB22
*                CELL AUDIT       × HEX'07'  × N/A           @Z40LB22
*                                                            @Z40LB22
*02*    INVOCATION PARAMETERS                                @Z40LB22
*       WITH THE SINGLE EXCEPTION OF THE RESERVED FIELDS,    @Z40LB22
*       ALL OF THE INVOCATION PARAMETERS ARE REQUIRED.       @Z40LB22
*                                                            @Z40LB22
*                                                            @Z40LB22
*       READ MSC WCS - (F,X,CODE,SECT,X,A,X)                 @Z40LB22
*                                                            @Z40LB22
*       (1)  ORDER (F) - 1 BYTE                              @Z40LB22
*            THIS BYTE IS ALWAYS X'0B' FOR THIS ORDER        @Z40LB22
*                                                            @Z40LB22
*       (2)  RESERVED (X) - 1 BYTE                           @Z40LB22
*                                                            @Z40LB22
*       (3)  OPCODE (CODE) - 1 BYTE                          @Z40LB22
*            THIS BYTE IS ALWAYS X'03' FOR THIS ORDER        @Z40LB22
*                                                            @Z40LB22
*       (4)  SECTOR (SECT) - 1 BYTE                          @Z40LB22
*            THIS BYTE REPRESENTS THE SECTOR OF WCS CODE     @Z40LB22
*            TO BE READ INTO THE MSC DIAGNOSTIC BUFFER.  A   @Z40LB22
*            VALID SECTOR RANGE IS FROM X'00' TO X'FF'.      @Z40LB22
*                                                            @Z40LB22
*       (5)  RESERVED (X) - 2 BYTES                          @Z40LB22
*                                                            @Z40LB22
*       (6)  FLAGS (A) - 1 BYTE                              @Z40LB22
*            BIT 0 = 0; READ FROM MAIN STORAGE               @Z40LB22
*            BIT 0 = 1; READ FROM EXTENDED STORAGE           @Z40LB22
*            BIT 1 - 6; UNUSED                               @ZA27590
*            BIT 7 = 0; DUMP PRIMARY MSC                     @ZA27590
*            BIT 7 = 1; DUMP ALTERNATE MSC                   @ZA27590
*                                                            @Z40LB22
*       (7)  RESERVED (X) - 29 BYTES                         @Z40LB22
*                                                            @Z40LB22
*                                                            @Z40LB22
*       READ MSC TABLES - (F,X,CODE,X,PARMS,X)               @Z40LB22
*                                                            @Z40LB22
*       (1)  ORDER (F) - 1 BYTE                              @Z40LB22
*            THIS BYTE IS ALWAYS X'05' FOR THIS ORDER        @Z40LB22
*                                                            @Z40LB22
*       (2)  RESERVED (X) - 1 BYTE                           @Z40LB22
*                                                            @Z40LB22
*       (3)  OPCODE (CODE) - 1 BYTE                          @Z40LB22
*            THIS BYTE IS ALWAYS X'06' FOR THIS ORDER        @Z40LB22
*                                                            @Z40LB22
*       (4)  RESERVED (X) - 1 BYTE                           @Z40LB22
*                                                            @Z40LB22
*       (5)  PARAMETERS (PARMS) - 20 BYTES                   @Z40LB22
*            THIS 20 BYTE AREA CONTAINS THE INPUT PARAMETERS @Z40LB22
*            TO THE TABLE MODULE, NORMALLY FOUND IN MSC      @Z40LB22
*            JOBLIST AT OFFSET X'0C' - X'1F'.  THE CHR OF    @Z40LB22
*            BLOCKS TO BE READ (OPTIONAL) AT OFFSET X'30' -  @Z40LB22
*            X'33'.                                          @Z40LB22
*                                                            @Z40LB22
*            (A)  PARAMETER PASS AREA IN MSC JOBLIST         @Z40LB22
*                 X'0C'  BIT 0 - 3  TABLE ID                 @Z40LB22
*                        BIT 4 - 7  SECTOR ID                @Z40LB22
*                 X'0D'  BIT 0 - 7  FLAG BYTE                @Z40LB22
*                        BIT 3 = 1  BLOCK CHR SUPPLIED       @Z40LB22
*                        BIT 7 = 1  READ                     @Z40LB22
*                 X'0E' - X'1F'     TABLE DEPENDENT DATA     @Z40LB22
*                 X'30' - X'33'     CHR                      @Z40LB22
*       (6)  RESERVED (X) - 8 BYTES                          @Z40LB22
*                                                            @Z40LB22
*                                                            @Z40LB22
*       LABEL READ - (F,X,CODE,A,LZYX,X)                     @Z40LB22
*                                                            @Z40LB22
*       (1)  ORDER (F) - 1 BYTE                              @Z40LB22
*            THIS BYTE WILL ALWAYS BE X'05' FOR THIS ORDER   @Z40LB22
*                                                            @Z40LB22
*       (2)  RESERVED (X) - 1 BYTE                           @Z40LB22
*                                                            @Z40LB22
*       (3)  OPCODE (CODE) - 1 BYTE                          @Z40LB22
*            THIS BYTE IS ALWAYS X'08' FOR THIS ORDER        @Z40LB22
*                                                            @Z40LB22
*       (4)  ATTRIBUTES (A) - 1 BYTE                         @Z40LB22
*            THIS BYTE IS ALWAYS X'10'.  THIS BYTE INDICATES @Z40LB22
*            THAT THE LZYX OF THE CARTRIDGE IS SUPPLIED.     @Z40LB22
*                                                            @Z40LB22
*       (5)  LOCATION (LZYX) - 2 BYTES                       @Z40LB22
*            THE MSF AND CELL ADDRESS OF CARTRIDGE TO BE     @Z40LB22
*            READ.                                           @Z40LB22
*                                                            @Z40LB22
*       (6)  RESERVED (X) - 30 BYTES                         @Z40LB22
*                                                            @Z40LB22
*                                                            @Z40LB22
*       READ SA WCS - (F,X,CODE,SECT,SSID,A,X)               @Z40LB22
*                                                            @Z40LB22
*       (1)  ORDER (F) - 1 BYTE                              @Z40LB22
*            THIS BYTE WILL ALWAYS BE X'05' FOR THIS ORDER   @Z40LB22
*                                                            @Z40LB22
*       (2)  RESERVED (X) - 1 BYTE                           @Z40LB22
*                                                            @Z40LB22
*       (3)  OPCODE (CODE) - 1 BYTE                          @Z40LB22
*            THIS BYTE IS ALWAYS X'10' FOR THIS ORDER        @Z40LB22
*                                                            @Z40LB22
*       (4)  SECTOR (SECT) - 1 BYTE                          @Z40LB22
*            THIS BYTE REPRESENTS THE SECTOR OF THE WCS      @Z40LB22
*            CODE TO BE READ INTO THE DIAGNOSTIC BUFFER.     @Z40LB22
*            A VALID SECTOR RANGE IS FROM X'00' TO X'FF'.    @Z40LB22
*                                                            @Z40LB22
*       (5)  SUB-SYSTEM ID (SSID) - 2 BYTES                  @Z40LB22
*            THESE 2 BYTES (ONLY 12 BITS ARE USED) ARE THE   @Z40LB22
*            SSID OF THE SA.                                 @Z40LB22
*                                                            @Z40LB22
*       (6)  FLAGS (A) - 1 BYTE                              @Z40LB22
*            BIT 0 = 0; READ FROM MAIN STORAGE               @Z40LB22
*            BIT 0 = 1; READ FROM EXTENDED STORAGE           @Z40LB22
*            BIT 1 - 6; UNUSED                               @ZA27590
*            BIT 7 = 0; DUMP PRIMARY MSC                     @ZA27590
*            BIT 7 = 1; DUMP ALTERNATE MSC                   @ZA27590
*                                                            @Z40LB22
*       (7)  RESERVED (X) - 29 BYTES                         @Z40LB22
*                                                            @Z40LB22
*                                                            @Z40LB22
*       CELL AUDIT - (F,X,MSF,ADDR,CMAP)                     @Z40LB22
*                                                            @Z40LB22
*       (1)  ORDER (F) - 1 BYTE                              @Z40LB22
*            THIS ONE BYTE FIELD WILL ALWAYS BE X'07'.       @Z40LB22
*                                                            @Z40LB22
*       (2)  RESERVED (X) - 1 BYTE                           @Z40LB22
*                                                            @Z40LB22
*       (3)  MSFID (MSF) - 1 BYTE                            @Z40LB22
*            THIS BYTE WILL CONTAIN THE IDENTIFICATION OF    @Z40LB22
*            THE MASS STORAGE FACILITY TO BE AUDITED.        @Z40LB22
*            (IE, 0,1).  THE ID WILL BE PLACED IN BITS       @Z40LB22
*            0 - 1.                                          @Z40LB22
*                                                            @Z40LB22
*       (4)  ADDRESS (ADDR) - 1 BYTE                         @Z40LB22
*            ONE BYTE WHICH GIVES THE START (X) ADDRESS OF   @Z40LB22
*            CELLS TO BE AUDITED IN A SPECIFIED MASS STORAGE @Z40LB22
*            FACILITY.                                       @Z40LB22
*                                                            @Z40LB22
*       (5)  CELL MAP (CMAP) -32 BYTES                       @Z40LB22
*            32 BYTES THAT CONTAIN THE BIT MAP OF CELL       @Z40LB22
*            ADDRESS TO BE TESTED (BIT = 1 MEANS TEST CELL). @Z40LB22
*            EACH WORD IS FOR ONE X ADDRESS, ONE Z ADDRESS,  @Z40LB22
*            AND Y ADDRESSES 0 -27 (THE LAST FOUR BITS WILL  @Z40LB22
*            ALWAYS BE ZERO IN EACH WORD).                   @Z40LB22
*            DIRECTION:                                      @Z40LB22
*              FOR Z = 0, 0 --> 27                           @Z40LB22
*              FOR Z = 1, 27 --> 0                           @Z40LB22
*                                                            @Z40LB22
*01*  EXIT-NORMAL = VALID INVOCATION                         @Z40LB22
*                                                            @Z40LB22
*02*    CONDITION = RETURN CODE = 0.                         @Z40LB22
*                 = RETURN CODE = 4.                         @Z40LB22
*                                                            @Z40LB22
*02*    OUTPUT = IN-LINE PLS STATEMENTS THAT PERFORM THE     @Z40LB22
*                REQUESTED FUNCTION.                         @Z40LB22
*              = A WARNING MESSAGE WILL BE PRINTED, AND      @Z40LB22
*                THE EXPANSION WILL CONTINUE.                @Z40LB22
*                                                            @Z40LB22
*01*  EXIT-ERROR = INVALID INVOCATION                        @Z40LB22
*                                                            @Z40LB22
*02*    CONDITION = RETURN CODE = 12.                        @Z40LB22
*                                                            @Z40LB22
*02*    OUTPUT = ERROR MESSAGE                               @Z40LB22
*                                                            @Z40LB22
*01*  EXTERNAL-REFERENCES = NONE                             @Z40LB22
*                                                            @Z40LB22
*01*  TABLES = NONE                                          @Z40LB22
*                                                            @Z40LB22
*01*  MESSAGES = AS FOLLOWS:                                 @Z40LB22
*                                                            @Z40LB22
*            ICB600I:  TYPE MUST BE SPECIFIED                @Z40LB22
*            ICB601I:  TYPE IS INCORRECTLY SPECIFIED         @Z40LB22
*            ICB602I:  A NAME FOR THE REQUEST BLOCK MUST     @Z40LB22
*                      BE SPECIFIED IN MF(2)                 @Z40LB22
*            ICB604I:  WARNING - ONLY MF PARAMETER IS        @Z40LB22
*                      VALID FOR LIST FORM                   @Z40LB22
*            ICB612I:  MF(2) MUST CONTAIN REQ BLK NAME       @Z40LB22
*                      IF EXEC MACRO FORM REQUESTED          @Z40LB22
*            ICB620I:  INVALID MF PARAMETER SPECIFIED,       @Z40LB22
*                      MUST BE L  OR E.                      @Z40LB22
*                                                            @Z40LB22
*01*  INNER-MACRO = NONE                                     @Z40LB22
*                                                            @Z40LB22
*01*  SYSTEM-MACRO = NONE                                    @Z40LB22
*                                                            @Z40LB22
*01*  CHANGE-ACTIVITY = ZA09556                              @ZA09556
*     CHANGE 01 07/21/77 - DUMP OF THE ALTERNATE MSC         @ZA27590
*                                                            @Z40LB22
**** END OF SPECIFICATIONS ***                               @Z40LB22*/
*/*                                                          @Z40LB22*/
*/*                                                          @Z40LB22*/
* ICBQUERY: MACRO KEYS(MF,TYPE,PARMS,FLAGS,SECT,CODE,SSID,
*          MSFID,CMAP,LZYX,LOC,DASDCHR,DATAPTR);
*/*                                                          @Z40LB22*/
*/*                                                          @Z40LB22*/
*/* EXTERNAL DECLARES                                        @Z40LB22*/
*   DCL QUERYREG FIXED EXT;            /*USED AS A TEST TO   @Z40LB22*/
*                                      /*SEE IF R1 ALREADY   @Z40LB22*/
*                                      /*DECLARED            @Z40LB22*/
*/* INTERNAL DECLARES                                        @Z40LB22*/
*   DCL RETCODE FIXED;                 /*RETURN CODE         @Z40LB22*/
*   DCL QMCODE CHAR;                  /*QMWCS OPCODE         @Z40LB22*/
*   DCL QLCODE CHAR;                  /*QLAB OPCODE          @Z40LB22*/
*   DCL QTCODE CHAR;                  /*QTAB OPCODE          @Z40LB22*/
*   DCL QSCODE CHAR;                  /*QSWCS OPCODE         @Z40LB22*/
*   DCL QCCODE CHAR;                  /*QCEL OPCODE          @Z40LB22*/
*   DCL QMTYPE CHAR;                  /*QMWCS TYPE           @Z40LB22*/
*   DCL QLTYPE CHAR;                  /*QLAB TYPE            @Z40LB22*/
*   DCL QLFLAG CHAR;                  /*QLAB FLAG            @Z40LB22*/
*   DCL QTTYPE CHAR;                  /*QTAB TYPE            @Z40LB22*/
*   DCL QSTYPE CHAR;                  /*QSWCS TYPE           @Z40LB22*/
*   DCL LENGTH CHAR;                  /*LENGTH OF LIST       @Z40LB22*/
*   DCL CTR FIXED;                     /*CTR  SWITCH         @Z40LB22*/
*   DCL ESW FIXED;                     /*EXIT SWITCH         @Z40LB22*/
*   DCL BSW FIXED;                     /*BRANCH SWITCH       @Z40LB22*/
*   DCL LSW FIXED;                     /*LINK SWITCH         @Z40LB22*/
*   QMCODE='0B';                      /*QMWCS OPCODE         @Z40LB22*/
*   QLCODE='05';                      /*QLAB OPCODE          @Z40LB22*/
*   QTCODE='05';                      /*QTAB OPCODE          @Z40LB22*/
*   QSCODE='05';                      /*QSWCS OPCODE         @Z40LB22*/
*   QCCODE='07';                      /*QCEL OPCODE          @Z40LB22*/
*   QMTYPE='03';                      /*QMWCS CODE TYPE      @Z40LB22*/
*   QLTYPE='08';                      /*QLAB CODE TYPE       @Z40LB22*/
*   QSTYPE='10';                      /*QSWCS CODE TYPE      @Z40LB22*/
*   QTTYPE='06';                      /*QTAB CODE TYPE       @Z40LB22*/
*   QLFLAG='10';                      /*QLAB CODE FLAG       @Z40LB22*/
*   LENGTH='2C';                       /*DEFINE LENGTH       @Z40LB22*/
*/*     INITIALIZE SWITCHES TO ZERO                          @Z40LB22*/
*   CTR=0;                                                 /*@Z40LB22*/
*   ESW=0;                                                 /*@Z40LB22*/
*   BSW=0;                                                 /*@Z40LB22*/
*   LSW=0;                                                 /*@Z40LB22*/
*/* END OF DECLARES AND INITIALIZATION                       @Z40LB22*/
*   IF QUERYREG=0 THEN                 /*WAS R1 ALREADY      @Z40LB22*/
*                                      /*DECLARED?           @Z40LB22*/
*        DO;                           /*NO,PRT DCL FOR R1   @Z40LB22*/
*             ANS('DCL QUERR1  REG(1) PTR; '××             /*@Z40LB22*/
*                  '/* WILL CONTAIN BLK ADDRESS @Z40LB22*/') SKIP(1);
*             QUERYREG=1;              /*TURN SWITCH ON      @Z40LB22*/
*        END;                                              /*@Z40LB22*/
*   IF MF(1)^='L' THEN                 /*IF NOT LIST FORM    @Z40LB22*/
*        GO TO EXCHECK;                /*BRANCH              @Z40LB22*/
*   IF MF(2)='' THEN                   /*WAS A NAME GIVEN?   @Z40LB22*/
*        DO;                           /*IF NOT, THEN        @Z40LB22*/
*             ESW=1;                   /*TURN ON ESW         @Z40LB22*/
*                                      /*AND,PRT ERROR MSG   @Z40LB22*/
*             ANS MSG('  ICB602I - A NAME FOR THE '××
*                  'REQUEST BLOCK MUST BE SPECIFIED '××
*                  'IN MF(2)')SKIP(5);                     /*@Z40LB22*/
*             RETCODE=12;                                  /*@Z40LB22*/
*        END;                                              /*@Z40LB22*/
*   IF ESW=1 THEN                      /*ESW ON?             @Z40LB22*/
*        GO TO EXIT;                   /*YES,BRANCH TO EXIT  @Z40LB22*/
*/*********************************************************  @Z40LB22*/
*/* CHECK FOR VALID PARAMETERS                               @Z40LB22*/
*/*********************************************************  @Z40LB22*/
*   IF TYPE ^= '' THEN              /*TYPE SPECIFIED?        @Z40LB22*/
*       CTR = CTR + 1;              /*YES, INCREMENT CTR     @Z40LB22*/
*   IF PARMS ^= '' THEN              /*PARMS SPECIFIED?      @Z40LB22*/
*       CTR = CTR + 1;              /*YES, INCREMENT CTR     @Z40LB22*/
*   IF FLAGS ^= '' THEN             /*FLAGS SPECIFIED?       @Z40LB22*/
*       CTR = CTR + 1;              /*YES, INCREMENT CTR     @Z40LB22*/
*   IF SECT ^= '' THEN              /*SECT SPECIFIED?        @Z40LB22*/
*       CTR = CTR + 1;              /*YES, INCREMENT CTR     @Z40LB22*/
*   IF CODE ^= '' THEN              /*CODE SPECIFIED?        @Z40LB22*/
*       CTR = CTR + 1;              /*YES, INCREMENT CTR     @Z40LB22*/
*   IF SSID ^= '' THEN              /*SSID SPECIFIED?        @Z40LB22*/
*       CTR = CTR + 1;              /*YES, INCREMENT CTR     @Z40LB22*/
*   IF MSFID ^= '' THEN             /*MSFID SPECIFIED?       @Z40LB22*/
*       CTR = CTR + 1;              /*YES, INCREMENT CTR     @Z40LB22*/
*   IF CMAP ^= '' THEN              /*CMAP SPECIFIED?        @Z40LB22*/
*       CTR = CTR + 1;              /*YES, INCREMENT CTR     @Z40LB22*/
*   IF LZYX ^= '' THEN              /*LZYX SPECIFIED?        @Z40LB22*/
*       CTR = CTR + 1;              /*YES, INCREMENT CTR     @Z40LB22*/
*   IF LOC ^= '' THEN               /*LOC SPECIFIED?         @Z40LB22*/
*       CTR = CTR + 1;              /*YES, INCREMENT CTR     @Z40LB22*/
*   IF DASDCHR ^= '' THEN           /*DASDCHR SPECIFIED?     @Z40LB22*/
*       CTR = CTR + 1;              /*YES, INCREMENT CTR     @Z40LB22*/
*   IF DATAPTR ^= '' THEN           /*DATAPTR SPECIFIED?     @Z40LB22*/
*       CTR = CTR + 1;              /*YES, INCREMENT CTR     @Z40LB22*/
*   IF CTR > 0 THEN                 /*CTR GT ZERO?           @Z40LB22*/
*      DO;                          /*YES, PRINT WARNING MSG @Z40LB22*/
*        RETCODE = 4;               /*SET RETURN CODE TO 4   @Z40LB22*/
*        ANS MSG('  ICB604I - WARNING-ONLY'××
*            ' THE MF PARAMETER IS VALID FOR THE'××
*            ' LIST FORM  ')SKIP;
*      END;                                                /*@Z40LB22*/
*   IF MF(3) ^= '' THEN                /*ATTRIBUTE GIVEN?    @Z40LB22*/
*        GO TO ATTRLST;                                    /*@Z40LB22*/
*/*********************************************************  @Z40LB22*/
*/*********************************************************  @Z40LB22*/
*/*                                                          @Z40LB22*/
*ATTRLST:
*   ANS('/*******************************************'××
*       '************* @Z40LB22*/')SKIP;
*   ANS('/*MSSC QMWCS/QLAB/QTAB/QSWCS/QCEL MACRO'××
*       '             @Z40LB22*/')SKIP;
*   ANS('/*OS/VS2 VERSION--03/21/75 LEVEL 00    '××
*       '              @Z40LB22*/')SKIP;
*   ANS('/*THIS IS THE UNINITIALIZED LIST FORM       '××
*       '              @Z40LB22*/')SKIP;
*   ANS('/*GENERAL AREA TO BE OVERLAID BY SPECIFIC '××
*       'ORDERS        @Z40LB22*/')SKIP;
*   ANS('/*******************************************'××
*       '************* @Z40LB22*/')SKIP;
*   ANS('DCL 1   '××MF(2)××' '××MF(3)××','××
*              '/*REQUEST BLOCK @Z40LB22*/') SKIP(1);
*            ANS('       2  QULEN  FIXED(31),  '××
*                  ' /*LENGTH = 44 BYTES @Z40LB22*/')  SKIP(1);
*            ANS('       2  QUORD  CHAR(1),    '××
*                  ' /*ORDER - COULD BE FOR QMWCS '××
*                  ' (0B), QLAB (05), QTAB (05), '××
*                  ' QSWCS (05), OR QCEL (07) '××
*                  ' @Z40LB22*/')  SKIP(1);
*            ANS('       2  QURES  CHAR(1),    '××
*                  ' /*RESERVED BITS @Z40LB22*/')  SKIP(1);
*            ANS('       2  QUCODE BIT(8),     '××
*                  ' /*CODE - COULD BE FOR QMWCS '××
*                  ' (03), QLAB (08), QTAB (06), '××
*                  ' OR QSWCS (10) @Z40LB22*/') SKIP(1);
*            ANS('        3  QULIB BIT(8),     '××
*                  ' /*QCEL ONLY - ID OF THE MSF '××
*                  ' TO BE AUDITED @Z40LB22*/')  SKIP(1);
*            ANS('       2  QUSECT  BIT(8),    '××
*                  ' /*QMWCS AND QSWCS ONLY - THE '××
*                  ' SECTOR OF CODE TO BE READ '××
*                  ' @Z40LB22*/') SKIP(1);
*            ANS('        3  QUXADDR BIT(8),   '××
*                  ' /*QCEL ONLY - THE START X '××
*                  ' ADDR OF CELLS TO BE AUDITED '××
*                  ' @Z40LB22*/') SKIP (1);
*            ANS('         4  QUFLAG  BIT(8),  '××
*                  ' /*QLAB ONLY - SET TO HEX 10, '××
*                  ' THE LZYX OF CART IS SUPPLIED'××
*                  ' @Z40LB22*/') SKIP(1);
*            ANS('          5  QURES1  CHAR(1), '××
*                 ' /*QTAB ONLY - RESERVED BITS '××
*                 ' @Z40LB22*/')  SKIP (1);
*             ANS('      2  QUPARM  CHAR(32),  '××
*                  ' /*PARM AREA FOR ANY SPECIFIED '××
*                  ' @Z40LB22*/')  SKIP(1);
*             ANS('      2  QUPTR  FIXED(31);  '××
*                  ' /*ADDR OF A 512 BYTE DATA AREA'××
*                  ' @Z40LB22*/')  SKIP(1);
 /*  READ MSC WCS (QMWCS) AND READ SA WCS (QSWCS) QUPARM AREA */
*             ANS('DCL  1  QWPARM  DEFINED(QUPARM),'××
*                  '/*MSC AND SA WCS READ @Z40LB22*/') SKIP (1);
*             ANS('      2  QWRES1  CHAR(2),   '××
*                  '/*MSC WCS ONLY - RESERVED BITS'××
*                  ' @Z40LB22*/')  SKIP(1);
*             ANS('       3  QWSSID  CHAR(2),  '××
*                  '/*SA WCS ONLY - SUBSYSTEM  '××
*                  ' ID OF THE SA @Z40LB22*/')  SKIP(1);
*             ANS('      2  QWFLAG  BIT(8),    '××
*                  ' /*READ INDICATOR @Z40LB22*/') SKIP(1);
*             ANS('       3  QWMEM  BIT(1),    '××
*                  ' /*BIT 0=0 READ FROM MAIN STORAGE '××
*                  ' BIT 0=1 READ FROM EXTENDED STORAGE '××
*                  ' @Z40LB22*/')  SKIP(1);
*             ANS('       3  *      BIT(6), /*UNUSED '××
*                  ' @ZA27590*/')  SKIP(1);
*             ANS('       3  QWALTMSC BIT(1), '××
*                  ' /*BIT 7=0 DUMP PRIMARY MSC '××
*                  ' BIT 7=1 DUMP ALTERNATE MSC '××
*                  ' @ZA27590*/')  SKIP(1);
*             ANS('      2  QWRES2  CHAR(29);   '××
*                  ' /*RESERVED BITS @Z40LB22*/') SKIP(1);
 /*  SPECIFIC QUPARM AREA FOR READ MSC TABLES (QTAB) @Z40LB22*/
*             ANS('DCL  1  QTPARM  DEFINED(QUPARM), '××
*                  '/*QTAB REQUEST BLOCK @Z40LB22*/') SKIP(1);
*             ANS('      2  QTID  BIT(8),  '××
*                  '/*@Z40LB22*/')  SKIP(1);
*             ANS('       3  QTTABID  BIT(4),       '××
*                  '/*TABLE ID @Z40LB22*/')  SKIP(1);
*             ANS('      2  QTFLAG  BIT(8), /* READ CHR '××
*                  ' BIT 3=1 BLOCK CHR SUPPLIED '××
*                  ' BIT 7=1 READ REQUEST @Z40LB22*/') SKIP(1);
*             ANS('      2  QTDATA CHAR(18), /* TABLE '××
*                  ' DEPENDENT DATA @Z40LB22*/') SKIP(1);
*             ANS('      2  QTDASCHR BIT(32), /* THE '××
*                  ' CHR OF RECORD TO BE READ '××
*                  ' ORDER @Z40LB22*/')  SKIP (1);
*             ANS('      2  QTRES CHAR(8); /* '××
*                  ' RESERVED @Z40LB22*/') SKIP(1);
 /*  SPECIFIC QUPARM AREA FOR READ LABEL (QLAB) @Z40LB22*/
*             ANS('DCL  1  QLPARM  DEFINED(QUPARM), '××
*                  '/*QLAB REQUEST BLOCK @Z40LB22*/') SKIP(1);
*             ANS('      2  QLZYX  FIXED(15), /*THE MSF '××
*                  ' AND CELL ADDR OF CART. TO BE READ '××
*                  ' @Z40LB22*/')  SKIP(1);
*             ANS('      2  QLRES  CHAR(30); /*RESERVED '××
*                  ' @Z40LB22*/')  SKIP(1);
 /*  SPECIFIC QUPARM AREA FOR CELL AUDIT (QCEL) @Z40LB22*/
*             ANS('DCL  1  QCPARM  DEFINED(QUPARM), '××
*                  '/*QCEL 8 WORD BIT MAP @Z40LB22*/') SKIP(1);
*             ANS('      2  QCMAD0Z0 BIT(32), /*WORD 1 '××
*                  ' OF CELL ADDR TO BE TESTED '××
*                  ' @Z40LB22*/')  SKIP(1);
*             ANS('      2  QCMAD0Z1 BIT(32), /*WORD 2 '××
*                  ' OF CELL ADDR TO BE TESTED '××
*                  ' @Z40LB22*/')  SKIP(1);
*             ANS('      2  QCMAD1Z0 BIT(32), /*WORD 3 '××
*                  ' OF CELL ADDR TO BE TESTED '××
*                  ' @Z40LB22*/')  SKIP(1);
*             ANS('      2  QCMAD1Z1 BIT(32), /*WORD 4 '××
*                  ' OF CELL ADDR TO BE TESTED '××
*                  ' @Z40LB22*/')  SKIP(1);
*             ANS('      2  QCMAD2Z0 BIT(32), /*WORD 5 '××
*                  ' OF CELL ADDR TO BE TESTED '××
*                  ' @Z40LB22*/')  SKIP(1);
*             ANS('      2  QCMAD2Z1 BIT(32), /*WORD 6 '××
*                  ' OF CELL ADDR TO BE TESTED '××
*                  ' @Z40LB22*/')  SKIP(1);
*             ANS('      2  QCMAD3Z0 BIT(32), /*WORD 7 '××
*                  ' OF CELL ADDR TO BE TESTED '××
*                  ' @Z40LB22*/')  SKIP(1);
*             ANS('      2  QCMAD3Z1 BIT(32); /*WORD 8 '××
*                  ' OF CELL ADDR TO BE TESTED '××
*                  ' @Z40LB22*/')  SKIP(1);
*   GO TO EXIT;
*/*                                                          @Z40LB22*/
*   ANS('/*******************************************'××
*       '************* @Z40LB22*/')SKIP;
*   ANS('/*END OF DCLS TO BE PRINTED OUT FOR REQUEST '××
*       'BLOCK         @Z40LB22*/')SKIP;
*   ANS('/*******************************************'××
*       '************* @Z40LB22*/')SKIP;
*/*                                                          @Z40LB22*/
*/*                                                          @Z40LB22*/
*   ANS('/*******************************************'××
*       '************* @Z40LB22*/')SKIP;
*   ANS('/*THE MACRO BRANCHES HERE IF EXECUTABLE FORM '××
*       'WAS REQUESTED @Z40LB22*/')SKIP;
*   ANS('/*******************************************'××
*       '************* @Z40LB22*/')SKIP;
*/*                                                          @Z40LB22*/
*EXCHECK:                                                  /*@Z40LB22*/
*   IF TYPE(1)='QMWCS'  THEN           /*QMWCS  REQUEST?     @Z40LB22*/
*        GO TO TEST1;                  /*YES, BRANCH         @Z40LB22*/
*   IF TYPE(1)='QLAB'  THEN             /*QLAB  REQUEST?     @Z40LB22*/
*        GO TO TEST1;                  /*YES, BRANCH         @Z40LB22*/
*   IF TYPE(1)='QTAB' THEN              /*QTAB REQUEST?      @Z40LB22*/
*        GO TO TEST1;                  /*YES, BRANCH         @Z40LB22*/
*   IF TYPE(1)='QSWCS' THEN              /*QSWCS  REQUEST?   @Z40LB22*/
*        GO TO TEST1;                  /*YES, BRANCH         @Z40LB22*/
*   IF TYPE(1)='QCEL' THEN              /*CELL  REQUEST?     @Z40LB22*/
*        GO TO TEST1;                  /*YES, BRANCH         @Z40LB22*/
*   ESW=1;                             /*TURN ON ESW         @Z40LB22*/
*   IF TYPE(1)='' THEN                 /*IS TYPE NULL?       @Z40LB22*/
*        DO;                           /*YES,PRT ERROR MSG   @Z40LB22*/
*             ANS MSG('  ICB600I - TYPE'××
*                  ' MUST BE SPECIFIED') SKIP(5);          /*@Z40LB22*/
*        END;                                              /*@Z40LB22*/
*   ELSE                               /*PRINT ERROR MSG     @Z40LB22*/
*        DO;                                               /*@Z40LB22*/
*             ANS MSG('  ICB601I - TYPE'××
*                  ' IS INCORRECTLY SPECIFIED') SKIP(5);   /*@Z40LB22*/
*        END;                                              /*@Z40LB22*/
*   RETCODE=12;                                            /*@Z40LB22*/
*TEST1: IF ESW=1 THEN                  /*ESW ON?             @Z40LB22*/
*             GO TO EXIT;              /*YES, GO TO EXIT     @Z40LB22*/
*       IF MF(1)='E' THEN              /*EXEC FORM SPECD?    @Z40LB22*/
*             GO TO EXFORM;            /*YES, BRANCH         @Z40LB22*/
*   ESW=1;                             /*TURN ON ESW         @Z40LB22*/
*   DO;                                /*PRINT ERROR MSG     @Z40LB22*/
*        ANS MSG('  ICB620I - INVALID MF PARAMETER SPECIFIED,'××
*             ' MUST BE L OR E ') SKIP(1);                 /*@Z40LB22*/
*   END;                                /*                   @Z40LB22*/
*   RETCODE=12;                        /*SET RETURN CODE     @Z40LB22*/
*   GO TO EXIT;                       /*BRANCH              @Z40LB22*/
*EXFORM: IF MF(2)='' THEN              /*ADDRESS GIVEN?      @Z40LB22*/
*             DO;                      /*NO,TURN ON ESW AND  @Z40LB22*/
*                  ESW=1;              /*PRINT ERROR MSG     @Z40LB22*/
*                  ANS MSG('  ICB612I - MF(2) MUST CONTAIN'××
*                       ' REQ BLK NAME IF EXEC MACRO '××
*                       'FORM REQUESTED')SKIP(5);          /*@Z40LB22*/
*                  RETCODE=12;         /*SET RETURN CODE     @Z40LB22*/
*                  GO TO EXIT;        /*BRANCH              @Z40LB22*/
*             END;                                         /*@Z40LB22*/
*   ANS('/*******************************************'××
*       '************* @Z40LB22*/')SKIP;
*   ANS('/*MSSC ICBQUERY QSWCS/QLAB/QTAB/QSWCS QCEL  '××
*       'MACRO         @Z40LB22*/')SKIP;
*   ANS('/*OS/VS2 VERSION-- 03/21/75 LEVEL 00        '××
*       '              @Z40LB22*/')SKIP;
*   ANS('/*THIS IS THE OUTPUT FOR THE EXECUTE FORM.  '××
*       '              @Z40LB22*/')SKIP;
*   ANS('/*THE LIST FORM OF THIS MACRO SHOULD BE     '××
*       '              @Z40LB22*/')SKIP;
*   ANS('/*INVOKED FIRST IN ORDER TO SET UP NECESSARY'××
*       '              @Z40LB22*/')SKIP;
*   ANS('/*DECLARES.  IF THE COMPLETE ARGUMENT IS    '××
*       '              @Z40LB22*/')SKIP;
*   ANS('/*SPECIFIED THE REQ BLOCK WILL BE ZEROED.   '××
*       '              @Z40LB22*/')SKIP;
*   ANS('/*******************************************'××
*       '************* @Z40LB22*/')SKIP;
*   ANS ('RFY(QUERR1)RSTD;/*RESTRICT  R1 @Z40LB22*/')SKIP;
*   ANS('QUERR1=ADDR('××MF(2)××
*        '); /*SET QUERR1 TO REQ BLOCK @Z40LB22*/')  SKIP(1);
*   IF MF(3) = 'COMPLETE' THEN
*      DO;                                                 /*@Z40LB22*/
*        ANS(' '××MF(2)××'='××MF(2)××'&&'××MF(2)××';'××    /*@Z40LB22*/
*           '/*ZERO REQUEST BLOCK @Z40LB22*/')SKIP;
*      END;                                                /*@Z40LB22*/
*   IF TYPE(1)='QMWCS' THEN             /*SET LENGTH FLD=44  @Z40LB22*/
*      DO;
*        ANS('QULEN='××QUOTE(LENGTH)××'X; /*SET LENGTH '××
*            'FIELD @Z40LB22*/')SKIP(1);
*        ANS('QUORD='××QUOTE(QMCODE)××'X; /*SET OPCODE '××
*            'FIELD @Z40LB22*/') SKIP(1);
*        ANS('QUCODE='××QUOTE(QMTYPE)××'X; /*SET CODE '××
*            'TYPE @Z40LB22*/') SKIP(1);
*      END;
*   ELSE
*         GO TO CKTAB;
*   IF SECT ^='' THEN                  /*SECT SPECIFIED?     @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QUSECT='××SECT××';          /*FILL IN SECTOR ID   @Z40LB22*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*   IF FLAGS ^='' THEN                /*FLAGS SPECIFIED?     @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QWFLAG='××FLAGS××';       /*FILL IN FLAGS FIELD   @ZA09556*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*   IF DATAPTR ^='' THEN           /*DATAPTR SPECIFIED?     @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QUPTR=ADDR'××DATAPTR××';  /*ADDR OF DATAPTR FIELD @Z40LB22*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*    GO TO LINK;
*CKTAB:
*   IF TYPE(1)='QTAB' THEN             /*SET LENGTH FLD=44  @Z40LB22*/
*      DO;
*        ANS('QULEN='××QUOTE(LENGTH)××'X; /*SET LENGTH '××
*            'FIELD @Z40LB22*/')SKIP(1);
*        ANS('QUORD='××QUOTE(QTCODE)××'X; /*SET OPCODE '××
*            'FIELD @Z40LB22*/') SKIP(1);
*        ANS('QUCODE='××QUOTE(QTTYPE)××'X; /*SET CODE '××
*            'TYPE @Z40LB22*/') SKIP(1);
*      END;
*   ELSE
*         GO TO CKLAB;
*   IF PARMS ^='' THEN               /*PARMS SPECIFIED?      @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QUPARM='××PARMS××';       /*FILL IN PARAMETERS    @Z40LB22*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*   IF DASDCHR ^='' THEN               /*CHR SPECIFIED?      @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QTDASCHR='××DASDCHR××';     /*FILL IN CHR         @Z40LB22*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*   IF DATAPTR ^='' THEN           /*DATAPTR SPECIFIED?     @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QUPTR=ADDR'××DATAPTR××';  /*ADDR OF DATAPTR FIELD @Z40LB22*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*    GO TO LINK;
*CKLAB:
*   IF TYPE(1)='QLAB' THEN             /*INITIALIZE FIELDS  @Z40LB22*/
*      DO;
*        ANS('QULEN='××QUOTE(LENGTH)××'X; /*SET LENGTH '××
*            'FIELD @Z40LB22*/')SKIP(1);
*        ANS('QUORD='××QUOTE(QLCODE)××'X; /*SET OPCODE '××
*            'FIELD @Z40LB22*/') SKIP(1);
*        ANS('QUCODE='××QUOTE(QLTYPE)××'X; /*SET CODE '××
*            'TYPE @Z40LB22*/') SKIP(1);
*        ANS('QUFLAG='××QUOTE(QLFLAG)××'X; /*SET CODE '××
*            'FLAG @Z40LB22*/') SKIP(1);
*      END;
*   ELSE
*         GO TO CKQSWCS;
*   IF LZYX ^='' THEN               /*CELL ADDR SPECIFIED?   @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QLZYX='××LZYX××';         /*FILL IN LZYX          @Z40LB22*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*   IF DATAPTR ^='' THEN           /*DATAPTR SPECIFIED?     @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QUPTR=ADDR'××DATAPTR××';  /*ADDR OF DATAPTR FIELD @Z40LB22*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*    GO TO LINK;
*CKQSWCS:
*   IF TYPE(1)='QSWCS' THEN             /*INITIALIZE FIELDS  @Z40LB22*/
*      DO;
*        ANS('QULEN='××QUOTE(LENGTH)××'X; /*SET LENGTH '××
*            'FIELD @Z40LB22*/')SKIP(1);
*        ANS('QUORD='××QUOTE(QSCODE)××'X; /*SET OPCODE '××
*            'FIELD @Z40LB22*/') SKIP(1);
*        ANS('QUCODE='××QUOTE(QSTYPE)××'X; /*SET CODE '××
*            'TYPE @Z40LB22*/') SKIP(1);
*      END;
*   ELSE
*         GO TO CKCEL;
*   IF SECT ^='' THEN                /*SECTOR ID SPECIFIED?  @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QUSECT='××SECT××';       /*FILL IN SECTOR ID      @Z40LB22*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*   IF SSID ^='' THEN               /*SUBSYSTEM ID?          @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QWSSID='××SSID××';        /*FILL SUBSYSTEM ID     @Z40LB22*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*   IF FLAGS ^='' THEN               /*READ INDICATOR?       @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QWFLAG='××FLAGS××';        /*FILL IN FLAG FIELD   @ZA09556*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*   IF DATAPTR ^='' THEN           /*DATAPTR SPECIFIED?     @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QUPTR=ADDR'××DATAPTR××';  /*ADDR OF DATAPTR FIELD @Z40LB22*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*    GO TO LINK;
*CKCEL:
*   IF TYPE(1)='QCEL' THEN              /*INITIALIZE FIELDS  @Z40LB22*/
*      DO;
*        ANS('QULEN='××QUOTE(LENGTH)××'X; /*SET LENGTH '××
*            'FIELD @Z40LB22*/')SKIP(1);
*        ANS('QUORD='××QUOTE(QCCODE)××'X; /*SET OPCODE '××
*            'FIELD @Z40LB22*/') SKIP(1);
*      END;
*   ELSE
*         GO TO EXIT;
*   IF MSFID ^='' THEN                /*MSF ID SPECIFIED?    @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QULIB='××MSFID××';       /*MSF TO BE AUDITED ID   @Z40LB22*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*   IF LOC ^='' THEN                /*START X ADDR?          @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QUXADDR='××LOC××';        /*FILL IN X ADDR        @Z40LB22*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*   IF CMAP ^='' THEN               /*CELL MAP SPECIFIED?    @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QUPARM='××CMAP××';        /*FILL IN CELL BIT MAP  @Z40LB22*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*   IF DATAPTR ^='' THEN           /*DATAPTR SPECIFIED?     @Z40LB22*/
*      DO;                                                 /*@Z40LB22*/
*   ANS('QUPTR=ADDR'××DATAPTR××';  /*ADDR OF DATAPTR FIELD @Z40LB22*/')
*      SKIP(1);                                            /*@Z40LB22*/
*      END;                                                /*@Z40LB22*/
*   IF ESW=1 THEN                      /*ESW ON?             @Z40LB22*/
*        GO TO EXIT;                   /*YES, BRANCH         @Z40LB22*/
*LINK: ANS('SVC  (126); /*ISSUE SVC INST.  @Z40LB22*/') SKIP(1);
*      ANS ('RFY(QUERR1)UNRSTD;/*UNRESTRICT'××
*           ' R1 @Z40LB22*/')SKIP;
*EXIT: RETURN CODE(RETCODE);                               /*@Z40LB22*/
*   %END;                                                  /*@Z40LB22*/
