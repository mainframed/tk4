 TITLE 'IGG019GB  - PUT, WR CHK'
IGG019GB CSECT
*          RELEASE OS/VS2-02 DELETIONS                                *
*D078000                                                        YM03178
*                                                               YM05395
*                                                               YM06516
*                                                                     *
*          RELEASE 19 DELETIONS                                       *
*2182215000                                                      A27810
*          RELEASE 20 DELETIONS                                       *
*0751357400,363400,374800,378600,386700,398100                   M5864
*0751344300,357200-358200,363200-363600,371000,374600-375400,    A37537
*0751378000-379200,382900,386200-387200,397600-398600            A37537
*0751062860-062880,066200-066600,082260-082440                   A32496
*0751062840,063400-063600                                        A31998
*0751069600-069700                                               M1857
*                                                                S20201
*1202289500-290300                                               M0170
*1202106400-106600                                               A42181
*1202282400                                                      A41405
*1202147500                                                      A46109
*D062920                                                         XM6075
*        VS2 030 PTF CHANGES                                   @ZA07607
*C071800,073260,216600                                         @ZA07607
*A073220-074600                                                @ZA07607
*A0741700-074200,C078600                                       @ZA10227
*A216500                                                       @ZA10226
*D198800,199000                                                @ZA28406
*
* STATUS CHANGE LEVEL 010
*FUNCTION/OPERATION- THIS MODULE CONTAINS THE BASIC LOAD MODE PUT     *
*   ROUTINES. THESE ROUTINES INVOLVE RECORD PROCESSING FOR MOVE MODE  *
*   AND FOR LOCATE MODE, BUFFER MANAGEMENT, CHANNEL PROGRAM INITIAL-  *
*   IZATION, AND CHANNEL PROGRAM EXECUTION.                           *
*                                                                     *
*ENTRY POINTS- 'IGG019GB' (ISLFX01) IS THE ENTRY FOR A LOAD MODE PUT  *
*   MACRO INSTRUCTION. THE GENERATED CALLING SEQUENCE IS,             *
*   LA   1,DCB                                                        *
*   LA   0,RECORD   FOR MOVE MODE                                     *
*   L    15,48(0,1)                                                   *
*   BALR 14,15                                                        *
*                                                                     *
*INPUT- REGISTER 0  -POINTS TO USERS RECORD IN WORK AREA (MOVE MODE). *
*       REGISTER 1  -POINTS TO DCB.                                   *
*       REGISTER 13 -POINTS TO USER SAVE AREA.                        *
*       REGISTER 14 -POINTS TO RETURN FROM PUT                        *
*                                                                     *
*OUTPUT- REGISTER 1 -POINTS TO NEXT AVAILABLE SPACE IN OUTPUT BUFFER  *
*                    (LOCATE MODE).                                   *
*        REGISTER 1 -POINTS TO BAD BUFFER IF WRITE ERROR OCCURRED.    *
*        REGISTER 0 -POINTS TO IOB IF WRITE ERROR OCCURRED.           *
*        REGISTER 14-POINTS TO RETURN TO CLOSE IF WRITE ERROR         *
*                      OCCURRED DURING CLOSE.                         *
*                                                                     *
*EXTERNAL ROUTINES- 'IGG019GD'-CHANNEL PROGRAM APPENDAGE ROUTINES     *
*   USED TO PROCESS I/O RETURNS. ALSO, CHANNEL PROGRAMS AND IOS.      *
*                                                                     *
*EXITS-NORMAL- (ISLFX13), USER RECORD HAS BEEN PROCESSED SUCCESSFULLY.*
*     -ERROR-  (ISLFX05), AN ERROR OCCURRED DURING THE PROCESSING OF  *
*   THE USER RECORD. THE ERROR CONDITION IS FLAGGED AS FOLLOWS,       *
*   DCBEXCD1 BIT 5 ON = WRITE ERROR, REG 1 POINTS TO BAD BUFFER       *
*                                    REG 0 POINTS TO IOB              *
*   DCBEXCD1 BIT 2 ON = SPACE ERROR, NOT ENOUGH SPACE FOR DATA SET.   *
*   DCBEXCD2 BIT 1 ON = DUPLICATE KEY.                                *
*   DCBEXCD2 BIT 0 ON = KEY OUT OF SEQUENCE.                          *
*                                    REG 0 POINTS TO HIGH KEY     20852
*                                                                     *
*TABLES/WORK AREAS-                                                   *
*   DCB      - COMMUNICATION WITH USER.                               *
*   DEB      - COMMUNICATION WITH IOS                                 *
*   ISLCOMON - COMMUNICATION WITHIN LOAD MODE.                        *
*   ISLIOBA  - COMMUNICATION WITH I/O FOR CP18 AND 20.                *
*   ISLIOBB  - COMMUNICATION WITH I/O FOR CP21.                       *
*   ISLIOBC  - COMMUNICATION WITH I/O FOR CP19.                       *
*   ISLAREAZ - WORK AREA USED FOR PREFORMATTING.                      *
*   ISLIXLT  - INDEX LOCATION TABLE, LOCATES HI-LEVEL INDICIES.       *
*   ISLY     - WORK AREA USED WHEN WRITING INDICIES.                  *
*   ISLVPTRS - VARIABLE POINTERS, REFERENCE VARIABLE LENGTH BLOCKS.   *
*   IOBBCT   - BUFFER CONTROL TABLE, CONTROLS BUFFER USAGE.           *
*                                                                     *
*ATTRIBUTES- READ ONLY, REENTRANT, REUSABLE.                          *
*                                                                     *
*NOTES- THIS MODULE, TOGETHER WITH THE APPENDAGE MODULE 'IGG019GD',   *
*   AND THE CHANNEL PROGRAMS, CREATE THE ISAM DATA SET WHEN WRITE-    *
*   CHECKING IS SPECIFIED. ALL OTHER LOAD MODE MODULES MERELY PROVIDE *
*   THE OPEN AND CLOSE FUNCTIONS.                                     *
*       SECTIONS OF THE PROCESSING IN THIS MODULE ARE ENTERED         *
*   DIRECTLY FROM CLOSE PROCESSING. IN SUCH CASES, PROCESSING IS      *
*   CARRIED ON AS THOUGH IT WAS PART OF CLOSE.                        *
*        ENTRY POINTS - ISLFX01                                       *
*                     - ISLFX20                                       *
*                     - ISLFY01                                       *
*                     - ISLFZ01                                       *
*                     - ISLPA01                                       *
*                                                                     *
*    ******************************************************************
*    THE FOLLOWING NOTATION IS FREQUENTLY USED THROUGHOUT COMMENTS -  *
*              C(FIELD X) = A(FIELD Y)                                *
*     CONTENTS OF FIELD X = ADDRESS OF FIELD Y                        *
*
*                                                                     *
         EJECT
IGG019GB CSECT
********************
* DCB REFERENCE    *
********************
*
         DCBD  DSORG=(IS)
         USING IHADCB,R1
         EJECT
********************
* DEB REFERENCE    *
********************
*
IHADEB   IGGDEBD
DEBXTN   DSECT
DEBXLNGH  DS   H                        LENGTH DEB EXTENSION
DEBXFLG1  DS   B                        FLAG BYTE
DEBXTSKC EQU   X'40'                    TASK CLOSE CLOSING DCB
         USING IHADEB,R8                                         S20201
         EJECT
ISLCOMON IGGLOAD
         USING ISLCOMON,R12                                      S20201
*
* IOBBCT REFERENCE         C(ISLVPTRS+8)=A(IOBBCT)
*
IOBBCT   DSECT
         USING IOBBCT,R11
         DS    0D
IOBFLAGS DS    0CL1                     FLAGS
IOBPTRA  DS    A                        PTR A
IOBB     DS    0CL1                     B
IOBPTRB  DS    A                        PTR B
IOBS     DS    0CL1                     S - STATUS FIELD FOR BUF NO 1
IOBABUF  DS    A                        A(BUF NO 1) - ADR OF BUF NO 1
*
*------------------ VARIABLE AREA ------------------------------------
*
*        --
*        --
*        --
*        --
*
* ISLY REFERENCE           C(ISLVPTRS)=A(ISLY)
*
ISLY     DSECT
         USING ISLY,R9
         DS    0D
         DS    CL8                      CYL-MAST IX    COUNT    Y+0
         DS    CL10                                    DATA     Y+8
         DS    CL8                      TRK IX NORM    COUNT    Y+18
         DS    CL10                                    DATA     Y+26
         DS    CL8                      TRK IX OVFL    COUNT    Y+36
         DS    CL10                                    DATA     Y+44
         DS    CL8                      TRK IX DUMM    COUNT    Y+54
*        DS    CL(IL)                                  KEY 1S   Y+62
*        DS    CL10                                    DATA     Y+62+IL
*
         EJECT
IHAIOB   DSECT
         USING IHAIOB,R2
         DS    0D
IOBFLG1  DS    CL1                      FLAGS 1
IOBFLG2  DS    CL1                      FLAGS 2
         DS    CL1
IOBSENSE DS    CL1                      SENSE
IOBECBAD DS    A                        ECB POINTER
IOBCSW   DS    CL8                      CHANNEL STATUS WORD
IOBSIOCC DS    0CL1                     SIO CC
IOBCPSAD DS    A                        CHANNEL PROG START ADR
IOBWT    DS    0CL1                     WEIGHT
IOBDCBAD DS    A                        DCB POINTER
IOBCPRAD DS    A                        CHANNEL PROG RESTART ADR
IOBBCTI  DS    CL2                      BLK CTR INCR
IOBECT   DS    CL2                      ERROR CTR
IOBDADAD DS    CL8                      DIR ACCESS DEV ADR MBBCCHHR
*
IXLT     DSECT
         USING IXLT,R7
         DS    0D
IXLTIND  DS    CL1                      INDICATOR
IXLBEG   DS    CL8                      BEGINING COUNT MBBCCHHR
IXLSTP   DS    CL8                      STEPPING COUNT MBBCCHHR
IXLEND   DS    CL8                      ENDING COUNT   NBBCCHHR
         DS    CL1
         DS    CL26                                                LEV2
         DS    CL26                                                LEV3
         DS    CL26                                                LEV4
         EJECT
CPSX     DSECT
         IGGLDCP OPTCD=W,RECFM=F        LOAD CHANNEL PROGRAMS    S20201
         EJECT
         IKJRB DSECT=YES                                        YM03178
         SPACE 4
         IHAPSA                                                 YM05395
         EJECT
***********************************************************************
* ISL PUT - BEGIN                                                     *
***********************************************************************
*
*
IGG019GB CSECT
ISLF800  SAVE  (14,12)                  SAVE USERS REGS
         BALR  R15,0
         USING *,R15
         B     ISLFX01
         B     ISLFX20
         B     ISLFY01
         B     ISLFZ01
         B     ISLPA01
*
* EQUATE SYMBOLIC REGISTERS
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   8
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   9
R16      EQU   15
CVTPTR   EQU   16
RSLOAD   EQU   X'20'                    DCBST - RESUME LOAD      S20201
*                                       *       INDICATOR
K1       EQU   1                        CONSTANT                 S20201
L3       EQU   3                        LENGTH                   S20201
K3       EQU   3                        CONSTANT                 S20201
K24      EQU   24                       CONSTANT                 S20201
K8       EQU   8                        CONSTANT                 S20201
K7       EQU   7                        CONSTANT                 S20201
K4       EQU   4                        CONSTANT                 S20201
*
L4       EQU   4                        LENGTH                   S20201
K0       EQU   0                        CONSTANT                 S20201
COMPLETE EQU   X'40'                    IOB COMPLETED            A42181
IOERROR  EQU   X'04'                    DCBEXCD1 - I/O ERROR     A42181
CQT5ATIC EQU   CQT5A+5                  TIC TO SEEK              M5864
CQT5ANOP EQU   CQT4A+5                  TIC TO CQT5B             M5864
ISLKEYVL EQU   X'04'                    KEY SEQUENCE VALID       XM6075
INCLOSE  EQU   X'10'                    ENTERED FROM CLOSE      YM05395
DMCODE   EQU   119                      INTERNAL PROB DET CODE  YM05395
         EJECT
***********************************************************************
* CHART FX - PUT (MOVE/LOCATE)                                        *
***********************************************************************
*
         USING IHADEB,R8
*
* FX HOUSEKEEPING
*
ISLFX01  L     R12,DCBWKPT1             C(R12)=A(COMMON)
         L     R10,DCBWKPT6             C(R10)=A(VPTRS)           14251
         L     R11,8(R10)               C(R11)=A(BCT)             14251
         TM    IOBFLAGS,X'10'           DID WE COME FROM CLOSE    14251
         BO    CONTINUE                 YES TAKE BRANCH           14251
         ST    R13,ISLVRSAV+4                                     14251
CONTINUE EQU   *                                                  14251
         LA    R2,ISLIOBA               C(R2)=A(IOBA)
         NI    DCBEXCD2,X'3F'           SET EXCD2 BITS 0 AND 1 = 00
*
         TM    DCBEXCD1,X'04'           HAS AN OUTPUT ERROR      A31998
*                                       * OCCURRED$
         BO    ISLFX02                  YES TAKE SYNAD           A31998
* TEST DCBST BIT 1 FOR LOAD MODE (FIRST TIME SW)
*
         TM    DCBST,X'40'              TEST ST BIT 1 (1=NOT FRST TIME)
         BC    14,ISLFX10A              BRANCH NOT ON
         LH    R5,DCBRKP                RELATIVE KEY POSITION    A32496
*
         TM    DCBST,X'20'              RESUME LOAD               P4701
         BZ    ISLFX022                 NOT RESUME LOAD          A31998
         TM    DCBMACRF+1,X'08'         PUT - LOCATE MODE         P4701
         BO    ISLFX07A                 BR-YES                   XM6075
         L     R4,4(R10)                PT TO HIGH KEY           A32496
         B     ISLFY022                 BRANCH TO CHECK SEQUENCE A32496
* TEST DCBEXCD1 BIT 5 FOR PREVIOUS UNCORRECTABLE WRITE ERROR
*
ISLFX02  L     R13,ISLVRSAV+4           C(R13)=A(USERS SAVE AREA) 20852
         MVC   24(4,R13),ISLVPTRA       A(BAD BUFFER) IN USER R1  25463
         LA    R0,ISLIOBA               C(R0)=A(IOBA)
         ST    R0,20(R13)               STORE A(IOBA) IN USERS R0
         B     ISLFX05                  B TO TAKE SYNAD
*
* SEQUENCE CHECK
****************
*
ISLFX022 EQU   *                        *                        A32496
         L     R4,ISLCBF                                         A32496
         AR    R4,R5                    PT TO KEY                A32496
ISLFY022 EQU   *                                                 A32496
         SR    R3,R3
         IC    R3,DCBKEYLE              C(R3)=KEYLEN, 000000NN
         BCTR  R3,0                     C(R3)=KEYLEN-1, FOR EXECUTE
*
* TEST FOR MOVE OR LOCATE PUT
*
         TM    DCBMACRF+1,X'10'         TEST MACRF BIT 11
         BC    1,ISLFX08                B IF ON = MOVE PUT
*
* LOCATE PUT ***
*
         L     R5,4(R10)                C(R5)=A(KEYSAVE)=A(PREV KEY)
         EX    R3,ISLFX02A              C(CBF+RKP) VS C(KEYSAVE)
         BH    ISLFX06                  B IF NEW KEY HIGH
         BE    ISLFX023                 BR - SEQUENCE CORRECT     20852
         LR    R4,R5                    PTR TO KEY               M1857
         B    ISLFX041                  BR TO POST ERROR         M1857
*
* LOCATE PUT,KEYS EQUAL- TEST IF 2ND PUT (SEQ CHK ONLY AFTER 2ND PUT)
*
ISLFX023 EQU   *                                                  20852
         L     R6,DCBNREC               C(R6)=NREC
         C     R6,ISLONEF               TEST NREC VS 1
         BE    ISLFX06                  B IF NREC = 1, ONLY 2ND PUT
*
* DUPLICATE RECORDS = ERROR
*
ISLFX03  OI    DCBEXCD2,X'40'           SET EXCD2 BIT 1 ON = DUPLICATE
         B     ISLFX04A                                        @ZA07607
*
* MOVE PUT ***
*
ISLFX08  AR    R5,R0                    C(R5)=C(AREA+RKP)=A(NEW KEY)
         EX    R3,ISLFX08A              C(NEW KEY) VS C(CBF+RKP)
         BH    ISLFX07                  BRANCH IF NEW KEY HIGH
         BE    ISLFX03                  BR IF KEYS EQUAL=DUPLIC ATES
ISLFX041 EQU   *                        *                        M1857
* SEQUENCE ERROR                                               @ZA07607
         OI    DCBEXCD2,X'80'           EXCD2 BIT 0,SEQ ERROR  @ZA07607
         TM    IOBFLAGS,X'10'           IN CLOSE                 M1857
         BO    ISLFX04A                 YES - DON'T SAVE KEY   @ZA07607
         ST    R4,20(R13)               HI KEY ADDR INTO USER R0  20852
         OI    20(R13),X'80'            TURN REG 0 NEG         @ZA07607
         B     ISLFX05                  BR TO SYNAD            @ZA07607
*
* TAKE SYNAD EXIT
ISLFX04A LA    R0,ISLIOBA               LOAD IOB ADDR          @ZA07607
         TM    IOBFLAGS,X'10'           IN CLOSE?              @ZA10227
         BO    ISLFX05                  YES BRANCH             @ZA10227
         ST    R0,20(R13)               ST IN USER SAVE AREA   @ZA07607
ISLFX05  LR    R4,R14                   SAVE RETURN IN R4
         L     R16,DCBSYNAD
         C     R16,ISLONEF              TEST SYNAD VS 1
         BE    ISLFX052                 BR IF 1 - NO SYNAD
         TM    IOBFLAGS,X'10'           TEST FLAGS BIT 3 (CLOSE)
         BC    1,ISLFX051               B IF ON = CLOSE
         L     R13,ISLVRSAV+4           RESTORE USER R13
         L     R14,12(R13)              RESTORE USER R14
         LM    0,12,20(R13)             RESTORE REGS
         BR    R16                      TAKE SYNAD EXIT
ISLFX051 TM    DCBEXCD2,X'20'           TEST EXCD2 BIT 2    ***CLOSE***
         BC    1,0(R4)                  B IF ON, RETURN TO CLOSE
         L     R5,DCBDEBAD              DEB ADDRESS             YM06516
         LA    R5,0(R5)                 CLEAR HIGH ORDER BYTE   YM06516
         S     R5,ISL8                  PT TO DEB EXTENSION PTR YM06516
         L     R5,0(R5)                 ADDR DEB EXTENSION      YM06516
         USING DEBXTN,R5                DEB EXT. ADDRESSABILITY YM06516
         TM    DEBXFLG1,DEBXTSKC        TASK CLOSE CLOSING DCB  YM06516
         BO    ISLFTERM                 BR YES - ISSUE MESSAGE  YM06516
         USING PSA,R0                   LOW CORE ADDRESABILITY  YM05395
         L     R5,PSATOLD               TCB ADDRESS             YM05395
         DROP  R0,R5                    END LOW CORE DEB ADDR   YM06516
         L     R5,0(R5)
         USING RBBASIC,R5               SYNCH RB ADDRESSABILITY YM03178
         L     R5,RBLINK                OPEN SVRB ADDRESS       YM03178
         DROP  R5                       END RB ADDRESSABILITY   YM03178
         LA    R13,ISLVRSAV             SAVE AREA ADDRESS       YM03178
         OI    DCBEXCD2,X'20'           SET EXCD2 BIT 2 ON = CLOSE
         L     1,24(R13)                SET REG 1              @ZA10227
         LM    2,13,40(R5)              RESTORE USERS REGS 2 - 13
         BR    R16                      TAKE SYNAD EXIT - WILL   Y02072
*                                       RETURN TO CLOSE AS REG   Y02072
*                                       14 HAS RETURN ADDR TO    Y02072
*                                       CLOSE ESTABLISHED BY     Y02072
*                                       SYNCH ISSUED BY CLOSE    Y02072
*
*
ISLFX052 EQU   *                        NO SYNAD = ABEND 31
         TM    IOBFLAGS,INCLOSE         ENTERED FROM CLOSE      YM05395
         BZ    ISLFX054                 BR NO - ISSUE ABEND     YM05395
         L     R5,DCBDEBAD              DEB ADDRESS             YM06516
         LA    R5,0(R5)                 CLEAR HIGH ORDER BYTE   YM06516
         S     R5,ISL8                  PT TO DEB EXTENSION PTR YM06516
         L     R5,0(R5)                 ADDR DEB EXTENSION      YM06516
         USING DEBXTN,R5                DEB EXT. ADDRESSABILITY YM06516
         TM    DEBXFLG1,DEBXTSKC        TASK CLOSE CLOSING DCB  YM06516
         BO    ISLFTERM                 BR YES - ISSUE MESSAGE  YM05395
         DROP  R5                       END DEB EXT. USING      YM06516
ISLFX054 EQU   *                        ISSUE ABEND             YM05395
         ABEND X'031',DUMP,,SYSTEM      SYSTEM 031 ABEND         Y02072
         SPACE 2
*        ISSUE ERROR MESSAGE AND TERMINATE TASK WITH 031 ABEND -
*        TASK TERMINATION ISSUED CLOSE FOR USER.
         SPACE 2
ISLFTERM EQU   *                        ISSUE MESSAGE-TERM. TSK YM05395
         DMABCOND DMCODE,SVC=YES,DCB=(R1)                       YM05395
         SPACE 2
*
* LOCATE PUT,SEQUENCE OK- MOVE KEY TO KEYAVE AREA
*
ISLFX06  EX    R3,ISLFX06A              MOVE C(CBF+RKP) TO C(KEYSAVE)
*
* BUMP CBF
*
ISLFX07  EQU   *                        *                        A32496
         OI    ISLIXLT,ISLKEYVL         VALID RECORD ADDED        M6075
ISLFX07A L     R7,ISLCBF                C(R7)=A(CURR BUFR PTR)   S20201
*                                        P470                    S20201
         A     R7,ISLBMPR               C(R7)=CBF+BMPR           S20201
         ST    R7,ISLCBF                C(CBF)=CBF+BMPR
         B     ISLFX10
*
* BUMP NREC
*
ISLFX10A OI    DCBST,X'40'              SET ST BIT ON
         CLC   DCBLPDA(1),DCBMSWA       TEST FOR SAME M           16305
         BNE   KEEPGOIN                                           16305
         CLC   DCBLPDA+3(4),DCBMSWA+3   TEST FOR OUT OF SPACE     16305
         BH    ISLPA205                 BRANCH NO SPACE           16305
KEEPGOIN EQU   *                                                  16305
ISLFX10  L     R3,DCBNREC               C(R3)=NREC
         A     R3,ISLONEF               C(R3)=NREC+1
         ST    R3,DCBNREC               C(NREC)=NREC+1
*
* TEST BOB SWITCH (APPLIES ONLY TO MOVE PUT, BOBSW = 1 FOR LOCATE PUT)
*
         TM    IOBFLAGS,X'08'           TEST FLAGS BIT 4 VS 1 (BOBSW)
         BC    1,ISLFX11                B IF ON = NOT 0
*
*                                       BOBSW = 0
         OI    IOBFLAGS,X'08'           SET FLAGS BIT 4 = 1 (BOBSW ON)
         BAL   R14,ISLPA01             *LINK TO BOB ROUTINE
*
         TM    DCBST,RSLOAD             IS IT RESUME LOAD        S20201
         BZ    ISLFX11                  NO - O.K.                S20201
         MVC   IOBPTRA+K1(L3),IOBPTRB+K1 MAKE IT THE FIRST       S20201
*                                       BOBSW = 1
* TEST FOR MOVE OR LOCATE PUT
*
ISLFX11  TM    DCBMACRF+1,X'10'         TEST MACRF BIT 11
         BC    1,ISLFX20                B IF ON = MOVE PUT
*
* LOCATE PUT
* TEST FOR EOB, HAS USERS LAST RCD FILLED A BUFFER -
*
         L     R7,ISLCBF                C(R7)=CBF
         C     R7,ISLEOB                TEST CBF VS EOB
         BNL   ISLFX24                  B IF EOB
*
*                                       NOT EOB
ISLFX12  TM    IOBFLAGS,X'40'           TEST FLAGS BIT 1
         BC    1,ISLFX14                B IF ON = WRITE SHOULD BE
*                                                 ATTEMPTED
*
* NOT EOB, FLAGS BIT 1 OFF, RESTORE REGS AND RETURN TO USER
*
* EXIT PUT
*
ISLFX13  TM    IOBFLAGS,X'10'           TEST FLAGS BIT-3 (CLOSE)
         BC    1,0(R14)                 B IF ON = CLOSE
*                                       * INDICATOR
         TM    DCBST,RSLOAD             RESUME LOAD              S20201
         BZ    ISLFX13R                 NO - BUFFERS CORRECT     S20201
         NI    DCBST,X'FF'-RSLOAD       TURN OFF RESUME LOAD     S20201
         MVC   IOBPTRA+K1(L3),IOBPTRB+K1 CORRECT PTRS            S20201
ISLFX13R EQU   *                        *                        S20201
         TM    DCBMACRF+1,X'10'         TEST MACRF BIT 11 (MOVE PUT)
         BC    1,ISLFX132               B IF ON = MOVE PUT
         L     R1,ISLCBF                C(R1)=CBF, FOR LOCATE PUT
ISLFX132 L     R13,ISLVRSAV+4
         L     R14,12(R13)              RESTORE R14
         RETURN (2,12)                  RESTORE USERS REGS AND EXIT
*
*
*
* NOT EOB, FLAGS BIT 1 ON, SET FLAGS BIT 1 OFF AND ATTEMPT WRITE
*
ISLFX14  NI    IOBFLAGS,X'BF'           SET FLAGS BIT 1 OFF
         OI    IOBFLAGS,X'20'           SET FLAGS BIT 2 ON (NOT EOB)
         B     ISLFY02                 *
*
*
*
* MOVE PUT
* MOVE RECORD FROM USER AREA TO CURRENT BUFFER VIA CBF
*
ISLFX20  L     R3,ISLMVC                C(R3)=COUNT OF EXECUTED MOVE
         L     R4,ISLCBF                C(R4)=CBF=MOVE DESTINATION
         LR    R5,R0                    C(R5)=MOVE ORIGIN
         L     R6,ISLMVCT               C(R6)=NBR OF 255 BYTE MOVES
ISLFX21  BCT   R6,ISLFX22               TO MOVE 255 BYTES
         EX    R3,ISLFX21A              MOVE RCD AT R0 TO CBF
         B     ISLFX23                  MOVE COMPLETED
ISLFX22  MVC   0(255,R4),0(R5)          MOVE 255 BYTES OF RECORD
         LA    R4,255(R4)               BUMP DESTINATION          8M800
         LA    R5,255(R5)               BUMP ORIGIN               8M800
         B     ISLFX21                  TO MOVE REST OF RECORD
*
* TEST FOR EOB, HAS RCD JUST MOVED FILLED A BUFFER
*
ISLFX23  L     R7,ISLCBF                C(R7)=CBF
         A     R7,ISLBMPR               C(R7)=CBF+BMPR
         C     R7,ISLEOB                TEST CBF+BMPR VS EOB
         BL    ISLFX12                  B IF NOT EOB
*
*
*                                       EOB
*
* SET BOB SW TO ZERO (RESET)
*
         NI    IOBFLAGS,X'F7'           SET FLAGS BIT 4 = 0 (BOBSW OFF)
         NI    DCBST,X'FF'-RSLOAD       TURN OFF RESUME LOAD     S20201
*
* MARK CURRENT BUFFER AND BUMP B IN BCT.
*
ISLFX24  L     R3,IOBPTRB               C(R3)=PTR B = A(CURRENT SLOT)
         TM    DCBST,RSLOAD             RESUME LOAD              S20201
         BO    ISLFY01                  YES - DON'T SCHEDULE     S20201
         NI    0(R3),X'DF'              SET STATUS BIT 2 = 0
         OI    0(R3),X'40'              SET STATUS BIT 1 = 1
*                                       STATUS BITS 1 AND 2 = 10
*                                       =BUF FULL BUT NOT SCHED
         IC    R4,IOBB                  C(R4)-000N, FULL BUFRS    P4701
         LA    R4,1(0,R4)               C(R4)-000000NN+1          P4701
         STC   R4,IOBB                  C(PTRB)=NNAAAAAA, NN = B
*
         EJECT
***********************************************************************
* CHART FY - PUT (EOB)                                                *
***********************************************************************
*
* TEST B VS FBW (ARE WE READY TO ATTEMPT TO WRITE)
*
ISLFY01  SR    R3,R3
         IC    R3,IOBB                  C(R3)=000N  N=NO. FILLED,
*                                         UNSCHEDULED BUFFERS
         C     R3,ISLFBW                TEST B VS FBW
         BL    ISLFY41                  B IF NOT ENOUGH BUFFERS FILLED
*
*                                       B G.E. FBW, ATTEMPT WRITE
* TEST FLAGS BIT 0 VS 1, (IWR)-IS CP AVAILABLE
*
ISLFY02  EQU   *                        *                        A42181
         TM    ISLECBA,COMPLETE         IOB AVAILABLE            A42181
         BZ    ISLFY41A                 NO - SCHEDULE LATER      A42181
         TM    DCBEXCD1,IOERROR         HAS AN I/O ERROR         A42181
*                                       OCCURRED                 A42181
         BO    ISLFX02                  YES - TERMINATE LOAD.    A42181
*
* B GE FBW AND FLAGS BIT 0 = 0 (CP AVAILABLE), SET UP TO WRITE
*
ISLFY03  SR    R3,R3
         IC    R3,IOBB                  C(R3)=000N
         S     R3,ISLFBW                C(R3)=B-FBW, WE WILL SCHED FBW
*                                                    BUFFRS
         STC   R3,IOBB                  C(PTRB)=NNAAAAAA, NN = B
*
         NI    IOBFLAGS,X'BF'           SET FLAGS BIT 1 OFF
*
*
*
* WAIT FOR PREVIOUS I/O TO COMPLETE
*
*
*
* MAKE SURE CP21 HAS COMPLETED
*
         LA    R2,ISLIOBB               SET BASE FOR IOB FOR CP21
         BAL   R4,ISLFY99               BR TO WAIT SUBROUTINE
*
* TEST STATUS BIT-6 (PF BIT) PERTAING TO 1ST BFR.  IF PF BIT ON, THIS
* IS THE 1ST BUFFER TO BE WRITTEN ON A NEW CYLINDER WITH SHARED TRACKS
*
         TM    0(R3),X'02'              TEST STATUS BIT-6
         BC    8,ISLFY08                B IF PF NOT ON
*
* STATUS BIT-6 (PF BIT) IS ON. WE ARE ABOUT TO SCHED THE 1ST WRITE ON
* A NEW, SHARED-TRACK, CYLINDER. FIRST WE MUST BE SURE CP19 HAS
* FINISHED PRE-FORMATTING.
*
         LA    R2,ISLIOBC               SET BASE FOR IOB FOR CP19
         BAL   R4,ISLFY99               BR TO WAIT SUBROUTINE
         NI    0(R3),X'FD'              SET STATUS BIT 6 (PF BIT) OFF
*
*
* SCHED FBW BUFFRS FOR WRITING VIA PTR A (STATUS BITS 1,2 ON)
* AT THE SAME TIME TEST STATUS BYTES FOR BIT-3 ON = NEW EXTENT
*
ISLFY08  L     R4,ISLFBW                C(R4)= NO OF SLOTS TO SCHED
ISLFY10  OI    0(R3),X'60'              SET STATUS BITS 1,2 = 11
         TM    0(R3),X'10'              TEST STATUS BIT-3
         BC    8,ISLFY11                B IF 0, SAME EXTENT
         IC    R5,IOBDADAD              C(R5)-M                   P4701
         LA    R5,1(0,R5)               C(R5)-M+1                 P4701
         STC   R5,IOBDADAD              C(IOBA+32)=MBBCCHHR, M=M+1
         BAL   R5,ISLFZ21
         NI    0(R3),X'EF'              SET STATUS BIT-3 = 0
ISLFY11  A     R3,ISL4                  BUMP R3 TO ADR NEXT SLOT
         C     R3,ISLBUFN               TEST FOR ADR OF NTH SLOT
         BC    13,ISLFY20A              BR IF NOT HIGH
ISLFY12  BCT   R4,ISLFY13               WRAPAROUND POSSIBLE
         B     ISLFY20                  OUT, SLOT N WAS LAST
ISLFY13  LA    R3,IOBABUF               WRAPAROUND REAL, C(R3)=A(SLOT1)
         B     ISLFY10                  LOOP AGAIN
*
*                                       SAVE ADR OF LAST SLOT IN REG 7
ISLFY20A BCT   R4,ISLFY10
ISLFY20  LR    R7,R3                    C(R7)=A(LAST SLOT SCHED + 4)
         S     R7,ISL4                  C(R7)=A(LAST SLOT SCHED)
*
* INITIALIZE CP18 AND CP20 IN SUBROUTINE
*
*
         STM   R2,R11,ISLVRSAV+28       SAVE REGS 2-11
         B     ISLF801
ISLFY21  LM    R2,R11,ISLVRSAV+28       RESTORE REGS 2-11
*
* SAVE CONTENTS OF BCT SLOT WITH STATUS AND POINTER OF LAST BUFF SCHED
*
         MVC   ISLF9WK1(4),0(R7)        SAVE SLOT CONTENTS OF     16305
*                                       LAST BCT SLOT             16305
*
* TEST LAST BUFFER FOR END OF CYLINDER (C-BIT ON)
*
         TM    0(R7),X'04'              TEST S BIT 5 VS 1 (C-BIT)
         BC    1,ISLFZ01                B IF ON
*
*
* EXECUTE CP18 (CP20)
*
*
ISLFY30  LA    R13,ISLVRSAV             C(R13)=A(VRSAV)
         LR    R3,R0                    SAVE R0
         LR    R4,R1                    SAVE R1
         LR    R5,R14                   SAVE R14
*                                                                  8791
*                                                                  8791
*                                                                  8791
* SET FLAGS BIT-0 (IWR BIT)=1, CP IS NOT AVAIL                     8791
*                                                                  8791
         OI    IOBFLAGS,X'80'           TURN ON FLAGS BIT 0        8791
*                                                                  8791
         EXCP  IHAIOB                   EXECUTE CHANNEL PROGRAM
         LR    R0,R3                    RESTORE R0
         LR    R1,R4                    RESTORE R1
         LR    R14,R5                   RESTORE R14
*
* SET FBW IN SUBROUTINE
*
         LA    R7,ISLF9WK1              C(R7)=A(LAST SLOT) FROZEN
         B     ISLPB01                  GO TO SUBROUTINE
ISLFY41A OI    IOBFLAGS,X'40'           SET FLAGS BIT 1 ON TO ATTEMPT
*                                       TO WRITE LATER
*
*
*
* TEST FLAGS BIT 2 (NOT EOB INDICATOR)
*
ISLFY41  TM    IOBFLAGS,X'20'           TEST FLAGS BIT 2
         BC    8,ISLFY42                B IF NOT ON (EOB)
         NI    IOBFLAGS,X'DF'           TURN FLAGS BIT 2 OFF
         B     ISLFX13                  RTRN TO FX (DONT GET LOC BUFF)
*
* TEST FOR MOVE OR LOCATE PUT
*
ISLFY42  TM    DCBMACRF+1,X'10'         TEST MACRF BIT 11
         BC    1,ISLFX13                B IF ON = MOVE PUT, RTRN TO FX
*
* LOCATE PUT
*
         BAL   R14,ISLPA01             *LINK TO BOB ROUTINE
         B     ISLFX13                  RETURN TO FX
*
*
***WAIT SUBROUTINE***
* THIS SUBROUTINE DETERMINES IF A CHANNEL PROGRAM IS AVAILABLE, AND
* IF IT IS NOT, WAITS UNTIL IT IS.  THE ROUTINE EXPECTS THE  FOLLOWING
* INPUT - R2 = ADDR OF IOB FOR CHANNEL PROGRAM TO BE TESTED
*         R4 = RETURN ADDRESS
*
ISLFY99  EQU   *
         ST    R4,ISLVRSAV              SAVE RETURN ADDRESS        0700
         LR    R3,R1                    SAVE R1
         L     R1,IOBECBAD              C(R1)=A(ECB)
         TM    0(R1),X'40'              TEST ECB BIT 1 (C-BIT)
         BC    1,ISLFY995               B IF 1, I/O COMPLETE-DON'T WAIT
         LA    R13,ISLVRSAV             C(R13)=A(VRSAV)
         LR    R4,R0                    SAVE R0
         LR    R5,R14                   SAVE R14
         WAIT  ECB=(1)
         LR    R0,R4                    RESTORE R0
         LR    R14,R5                   RESTORE R14
*
ISLFY995 LA    R2,ISLIOBA               C(R2)=A(IOBA)
         LR    R1,R3                    RESTORE R1
         L     R3,IOBPTRA               C(R3)=A(1ST SLOT TO SCHED)
         LA    R3,0(R3)
         L     R4,ISLVRSAV              GET RETURN ADDRESS         0700
         BCR   15,R4                    RETURN
*
         EJECT
***********************************************************************
* CHART FZ - CYLINDER INDEX ENTRY SETUP                               *
***********************************************************************
*
*
* STORE ADDR OF STATUS BYTE WITH C-BIT ON IN CP21 AT CQ41
* -THIS IS DONE TO PERMIT APPENDAGE TO TURN OFF C-BIT-
*            * R7 CONTAINS ADDR OF THE STATUS BYTE *
*
ISLFZ01  L     R10,DCBWKPT6             C(R10)=A(VPTRS)
         L     R10,24(R10)              C(R10)=A(CP21-CQ40)
         ST    R7,12(R10)               C(CQ41+4)=A(LAST SLOT SCHED)
         NI    ISLIXLT,X'F7'            SET IXLT LEV1 BIT-4 OFF- TRK IX
*
*
* LOCATE LEVEL IN INDEX LOCATION TABLE AT CYLINDER INDEX
*
         LA    R7,ISLIXLT               C(R7)=A(IXLT)
         OI    0(R7),X'20'              IXLTIND BIT-2 ON IN LEV1
         NI    26(R7),X'DF'                     BIT-2 OFF IN LEV2
         NI    52(R7),X'DF'                                  LEV3
         NI    78(R7),X'DF'                                  LEV4
*
* CONSTRUCT COUNT FOR CYLINDER INDEX ENTRY IN AREA Y, Y+0
*
         L     R10,DCBWKPT6             C(R10)=A(VPTRS)
         L     R9,0(R10)                C(R9)=A(AREA Y)
         MVC   0(4,R9),12(R7)           COUNT = CCHH FROM IXLT S0
         SR    R3,R3
         IC    R3,16(R7)                C(R3)=R FROM IXLT S0, 000N
         A     R3,ISLONEF               C(R3)=R+1
         STC   R3,4(R9)                 COUNT = CCHHR WITH R=R+1
*
* CONSTRUCT DATA FOR CYLINDER INDEX ENTRY IN AREA Y, Y+8
*
         TM    0(R7),X'40'              TEST IXLTIND BIT 1 (DUMMY SW)
         BC    1,ISLFZ10                B IF ON
*
*                                       DUMMY SW OFF
*  A. NORMAL DATA
*
         MVC   8(7,R9),IOBDADAD         DATA=MBBCCHH FROM IOBA+32
         MVI   14(R9),X'00'             FOR 2321 SET TO TRACK 0
         CLI   DCBFIRSH+1,X'00'         H OF FIRSH VS 0          A46109
         MVI   15(R9),X'00'             DATA = MBBCCHHR WITH R=0 A46109
         BNE   ISLFZ03                  BIF HH NOT 00            A46109
*                                       HH OF FIRSH = 00
         MVC   15(1,R9),DCBFIRSH+2      DATA = MBBCCHHR WITH R   A46109
*                                       OF FIRSH
ISLFZ03  MVI   16(R9),X'01'             DATA = MBBCCHHRF WITH F = 01
*
         SR    R6,R6
         IC    R6,9(R7)                 C(R6) = M FROM IXLT S0
         BCTR  R6,0                     C(R6)=M-1
         SLL   R6,4                     C(R6) = M-1 X 16 (USE AS INDX)
*
         SR    R5,R5
         IC    R5,IOBDADAD              C(R5) = M FROM IOBA+32
         BCTR  R5,0                     C(R5)=M-1
         SLL   R5,4                     C(R5) = M-1 X 16 (USE AS INDX)
*
         L     R8,DCBDEBAD              C(R8)=A(DEB)
         L     R4,DEBFPEAD              C(R4)=A(1ST PRIM EXTENT ENTRY)
         LA    R4,0(R6,R4)              C(R4)=A(CURR INDX EXTENT ENTRY)
         L     R3,DEBFPEAD              C(R3)=A(1ST PRIM EXTENT ENTRY)
         LA    R3,0(R5,R3)              C(R3)=A(CURR PRIM EXTENT ENTRY)
         L     R9,0(R10)                C(R9)=A(AREA Y)
*
         CLC   1(3,R3),1(R4)            COMP UCB ADDRS, PRIM VS INDX
         BNE   ISLFZ04                  B IF NOT EQUAL
*
*                                       UCBS EQUAL
         MVI   17(R9),X'0B'             DATA = MBBCCHHRFP WITH P=0B
         B     ISLFZ05
*
*                                       UCBS UNEQUAL
ISLFZ04  MVI   17(R9),X'07'             DATA = MBBCCHHRFP WITH P=07
*
*                                       SET CQ43 (CP21) TO ADDRESS KEY
*                                       OF LAST RECORD IN LAST BUFFER
*
ISLFZ05  L     R4,ISLKEYAD              =A(KEY OF LAST WR CKD)    13165
         B     ISLFZ20
*
*                                       DUMMY SW ON = END OF CYLINDER
*  B. DUMMY DATA
*
*                                       TEST CC+1 VS DEBENDCC FOR
*                                       POSSIBLE END OF INDEX EXTENT
*
ISLFZ10  EQU   *
         SR    R6,R6
         IC    R6,9(R7)                 C(R6)=M FROM IXLT S0, 000M
         BCTR  R6,0
         SLL   R6,4                     C(R6)=16(M-1) FOR USE AS INDEX
*                                       TO DEB ENTRY FOR CURR IX EXTNT
*
         L     R8,DCBDEBAD              C(R8)=A(DEB)
         L     R4,DEBFPEAD              C(R4)=A(1ST PRIM EXTENT ENTRY)
         LA    R4,0(R6,R4)              C(R4)=A(CURR INDX EXTNT ENTRY)
*
         L     R9,0(R10)                C(R9)=A(AREA Y)
         MVC   ISLFXWK1(4),12(R7)       C(FXWK1)=CCHH OF IXLT SO  13165
         L     R3,ISLFXWK1              C(R3)=CCHH
         MVC   ISLFXWK2(4),10(R4)       C(FXWK2)=CCHH FROM DEBENDCC
*
         SRL   R3,16                    C(R3)=00CC
         LA    R3,1(R3)                 ADD 1 FOR NEXT CYL C(R3)=00CC+1
         SLL   R3,16                    C(R3)=CC+100
         ST    R3,ISLFXWK1              C(FXWK1)=CC+100
         CLC   ISLFXWK1(2),ISLFXWK2     CC+1 VS ENDCC
         BH    ISLFZ11                  BR IF CC+1 HI - IN NEW EXTENT
*
*                                       CC+1    IN CURRENT EXTENT
ISLFZ11A MVC   8(3,R9),9(R7)            DATA=MBB FROM IXLT S0
         MVC   11(4,R9),ISLFXWK1        DATA=MBBCCHH  CC=CC+1 HH=00
         BC    15,ISLFZ12               BR TO PICK UP R, ETC.
*
*
ISLFZ11  EQU   *
         L     R8,DCBDEBAD              C(R8)=A(DEB)              13165
         LA    R6,16(R6)                INDEX TO NEXT EXTENT      7M402
         L     R4,DEBFPEAD              C(R4)=A(1ST PRIM EXTENT ENTRY)
         LA    R4,0(R6,R4)              C(R4)=A(NEXT INDEX EXT)   7M568
*
         L     R9,0(R10)                C(R9)=A(AREA Y)           13165
         MVC   11(4,R9),6(R4)           DATA=CCHH OF NEW EXTENT   7M568
         SRL   R6,4                     C(R6) = M FOR NEXT EXTENT
         A     R6,ISLONEF               C(R6) = M+1 (M=1 FOR EXTENT 0)
         STC   R6,8(R9)                 DATA = MBBCCHH OF NEW EXTENT
*
ISLFZ12  MVC   15(3,R9),ISLRFP          RFP=002907                8M800
*
*                                       SET CQ43(CP21) TO ADDRESS KEY
*                                       OF ALL ONES AT AREA Y +62
*
         LA    R4,62(R9)                C(R4)=A(AREA Y +62)
*
* PLACE IXLT S0 IN IOBB+32
*
ISLFZ20  L     R10,24(R10)              C(R10)=A(CP21-CQ40)       13165
         IC    R5,24(R10)               SAVE OP                   13165
         ST    R4,24(R10)               PTR TO REAL OR DUMMY KEY  13165
         STC   R5,24(R10)               RESTORE OP                13165
         LA    R2,ISLIOBB               C(R2)=A(IOBB)             13165
         MVC   IOBDADAD(8),9(R7)        C(IOBB+32)=C(IXLT SO)     13165
         BAL   R5,ISLFZ21
*
*
*
* EXECUTE CP21
*
         LA    R13,ISLVRSAV             C(R13)=A(VRSAV)
         LR    R3,R0                    SAVE R0
         LR    R4,R1                    SAVE R1
         LR    R5,R14                   SAVE R14
         EXCP  IHAIOB                   EXECUTE CHANNEL PROGRAM
         LR    R0,R3                    RESTORE R0
         LR    R1,R4                    RESTORE R1
         LR    R14,R5                   RESTORE R14
*
         LA    R2,ISLIOBA               C(R2)=A(IOBA)
         TM    IOBFLAGS,X'12'           TEST FLAGS BITS 3&6 (CLOSE X)
         BCR   1,R14                    BR IF ON = CLOSE
         B     ISLFY30                  EXIT
*
ISLFZ21  EQU   *
         L     R13,DCBDEBAD
         LA    R13,32(R13)   START MOVE OF DEB BB INTO IOB
         SR    R8,R8
         IC    R8,IOBDADAD
         SLL   R8,4
         AR    R8,R13
         MVC   IOBDADAD+2(1),5(R8)
         BR    R5
         EJECT
***********************************************************************
* CHART PA - BEGINING OF BUFFER                                       *
***********************************************************************
*
*
* USING PTR B TO REFERENCE COUNT IN LAST BUFFER FILLED -
*   SET REG 5 = R               - REG A = 000R
*   SET REG 6 = CCHH            - REG B = CCHH
*   SET REG 7 = HI-RCD ON TRACK - REG C = 000R
*
ISLPA01  ST    R14,ISLF9WK1             SAVE R14 FOR RETURN TO FX
         MVC   DCBFTMI3(8),DCBLPDA      SAVE PREVIOUS LPDA FOR CLOSE
         L     R3,IOBPTRB               C(R3)=C(PTRB)
         LA    R3,0(R3)                 C(R3)=A(SLOT S)
         L     R4,0(R3)                 C(R4)=C(SLOT S)=A(BUF B)
         SR    R5,R5
         IC    R5,4(R4)                 C(R5)=000R
         MVC   ISLFXWK2(4),0(R4)        C(FXWK2)=CCHH
         L     R6,ISLFXWK2              C(R6)=CCHH
*
*                                       TEST HH FOR SHARED TRACK
         SR    R7,R7
         CLI   DCBHIRSH,X'00'           HIRSH VS 0
         BE    ISLPA02                  BR IF 0 - NO SHARED TRACKS
         STC   R6,ISLFXWK1              C(FXWK1)= H FROM BUF CNT
ISLPA01A NC    ISLFXWK1(1),DCBFIRSH+3   REDUCE TO TRACK
ISLPA01B CLC   DCBFIRSH+1(1),ISLFXWK1   H OF FIRSH VS H OF BUFR CNT
         IC    R7,DCBHIRSH              C(R7)=HIRSH
         BE    ISLPA03                  BR EQ, SHARED TRK - R7=HIRSH
ISLPA02  IC    R7,DCBHIRPD              NOT A SHARED TRACK, C(R7)=HIRPD
*
* STEP PTR B TO NEXT SLOT IN BCT (MAY WRAPAROUND)
*
ISLPA03  C     R3,ISLBUFN               TEST FOR ADR OF NTH SLOT
         LA    R3,4(R3)                 STEP TO NEXT SLOT
         BNE   ISLPA05                  NOT NTH SLOT, GO UPDATE PTR B
ISLPA04  LA    R3,IOBABUF               C(R3)=0AAA, AAA= ADR 1ST SLOT
ISLPA05  IC    R4,IOBB                  SAVE B
         ST    R3,IOBPTRB               STORE UPDATED PTR B
         STC   R4,IOBB                  RESTORE B
*
* UPDATE CBF AND EOB FOR NEW BUFFER VIA PTR B
*
         L     R4,0(R3)                 C(R4)=C(SLOT S)=A(BUFF B)
         LA    R4,0(R4)
         LR    R3,R4                    C(R3)=A(BUFF B)
         A     R3,ISL8                  C(R3)=A(BUFF B)+8
         ST    R3,ISLCBF                C(CBF)=A(BUFF B)+8
         LH    R3,DCBBUFL               C(R3)=00NN                8M800
         BCTR  R3,0                     C(R3)=00NN-1
         AR    R3,R4                    C(R3)=A(BUFF B)+BUFL-1
         ST    R3,ISLEOB                C(EOB)=A(BUFF B)+BUFL-1
*
*
* ROUTINE TO SET UP NEW COUNT FIELD FOR NEW BUFFER
* ************************************************
*
*
* TEST IF LAST BUFFR FILLED WAS EOT
*
         CR    R7,R5                    TEST REG C VS REG A
         BE    ISLPA20                  B IF EOT
*
*
* STEP REG A TO NEXT R ON CURRENT TRACK
*
         A     R5,ISLONEF               C(R5)=000R+1
*
* TEST IF NEXT BUFFR TO BE FILLED IS AVAILABLE (STATUS BITS)
*
ISLPA50  L     R3,IOBPTRB               C(R3)=PTR B = A(NEXT SLOT) OR-
         LA    R3,0(R3)                 C(R3)=A(STATUS BITS)
*
*                                       BITS 1 AND 2 = 11 OR 10
*
* WAIT FOR CP18, AND/OR CP20, AND/OR CP21 BEFORE RE-FILLING BUFFER
*
ISLPA60  L     R4,IOBECBAD              C(R4)=A(ECB)
         TM    0(R4),X'40'              TEST ECB BIT 1 (C-BIT)
         BC    1,ISLPA70                B IF 1, I/O COMPLETE-DONT WAIT
         LA    R13,ISLVRSAV             C(R13)=A(VRSAV)
         LR    R3,R1                    SAVE R1
         LR    R1,R4                    C(R1)=A(ECB)
         LR    R4,R0                    SAVE R0
         WAIT  ECB=(1)                  WAIT
         LR    R0,R4                    RESTORE R0
         LR    R1,R3                    RESTORE R1
         L     R3,IOBPTRB               C(R3)=PTR B = A(NEXT SLOT) OR-
         LA    R3,0(R3)                 C(R3)=A(STATUS BITS)
*
*
* TEST DCBEXCD1 BIT 5 FOR PREVIOUS UNCORRECTABLE WRITE ERROR
*
ISLPA70  TM    DCBEXCD1,X'04'           TEST EXCD1 BIT 5
         BC    8,ISLPA72                B IF NOT ON
         TM    IOBFLAGS,X'10'           TEST FLAGS BIT 3 (CLOSE)
         BC    1,ISLPA72                B IF ON = CLOSE
         L     R10,DCBWKPT6             C(R10)=A(VPTRS) FROM VPTR10
         L     R13,ISLVRSAV+4           C(R13)=A(USERS SAVE AREA)
         MVC   24(4,R13),36(R10)  STORE A(BAD BUF) IN USERS R1)
         LA    R0,ISLIOBA               C(R0)=A(IOBA)
         ST    R0,20(R13)               STORE A(IOBA) IN USERS R0
         MVC   40(4,R10),DCBSYNAD       SET VPTR 11 = A(SYNAD)
         B     ISLFX05                  B TO TAKE SYNAD
*
ISLPA72  EQU   *
         LA    R2,ISLIOBB               C(R2)=A(IOBB)
         TM    0(R3),X'04'              TEST BIT 5 (C-BIT)
         BC    7,ISLPA60                BR IF 1 - C-BIT ON
*
*                                       C-BIT OFF
         LA    R2,ISLIOBA               C(R2)=A(IOBA)
*
* TEST IF NEXT BUFFER TO BE FILLED WILL BE EOT (AND EOC)
* IF EOT, TURN ON T-BIT  IF EOC, TURN ON C-BIT
*
ISLPA80  CR    R7,R5                    TEST REG C VS REG A
         BNE   ISLPA84                  B IF NOT EOT
*
*                                       NEXT BUFFER EOT
         OI    0(R3),X'08'              TURN T-BIT ON (STATUS BIT 4)
         ST    R6,ISLFXWK1              C(FXWK1)= CCHH FROM REG B
ISLPA8A  NC    ISLFXWK1+3(1),DCBFIRSH+3 REDUCE TO TRACK FROM REG B
ISLPA8B  CLC   DCBLDT+1(1),ISLFXWK1+3   H OF LDT VS H FROM REG B
         BNE   ISLPA84                  B IF NOT LDT
         OI    0(R3),X'04'              TURN C-BIT ON (STATUS BIT 5)
*
* ENTER NEW COUNT IN BUFFER USING REG A AND REG B AND UPDATE LPDA
*
ISLPA84  L     R3,0(R3)                 C(R3)=C(SLOT S)=A(NEXT BUFFR)
         LA    R3,0(R3)
         ST    R6,ISLFXWK2              STORE CCHH FROM REG B
         MVC   0(4,R3),ISLFXWK2
         STC   R5,4(R3)                 STORE R FROM REG A
         MVC   DCBLPDA+3(5),0(R3)       STORE CCHHR FROM BUF IN LPDA
         L     R14,ISLF9WK1             RESTORE R14 FOR RETURN TO FX
         BR    R14                     *EXIT
*----------------------------------------------------------------------
*
*                                       LAST BUFFR FILLED EOT
* SET REG 7 (REG C) = HIRPD, NEXT TRACK CANT BE SHARED
*
ISLPA20  IC    R7,DCBHIRPD              NOT A SHARED TRACK, C(R7)=HIRPD
         ST    R6,ISLFXWK1              C(FXWK1)=CCHH FROM REG B
*
* TEST FOR OUT-OF-SPACE
*
         CLC   DCBLPDA(1),DCBMSWA       CURRENT M VS HI M
         BNE   ISLPA21                  B IF NOT HI PRIME M
         CLC   ISLFXWK1(4),DCBMSWA+3    CURRENT CCHH VS HI CCHH
         BL    ISLPA21                  BR LESS THAN HIGH PRIME  A27810
*                                       CCHH                     A27810
         TM    IOBFLAGS,X'10'           TEST FOR CLOSE
         BO    ISLPA21                  IF CLOSE, GET COUNT       17925
*                                       ELSE OUT OF SPACE         17925
*                                      *---------OUT-OF-SPACE---------*
ISLPA205 EQU   *
         OI    DCBEXCD1,X'20'           SET EXCD1 BIT 2 ON = SPACE ERR
         L     R13,ISLVRSAV+4           RESTORE USER REG 13    @ZA10226
         B     ISLFX04A                 B TO TAKE SYNAD        @ZA07607
*
* TEST IF LAST BUFFER FILLED WAS EOT AND EOC
*
ISLPA21  EQU   *
         EX    R0,ISLPA8A               EXECUTE NC
         EX    R0,ISLPA8B               EXECUTE CLC
         BE    ISLPA30                  B IF EOT AND EOC
*
*                                       EOT NOT EOC
* STEP REG B TO NEXT HH AND SET REG A TO R = 1
*
         A     R6,ISLONEF               C(R6)=CCHH+1
         L     R5,ISLONEF               C(R5)=000R, R = 1
         B     ISLPA50
*
*
*                                       EOT,EOC
* NEXT BUFFER TO BE FILLED WILL BE THE 1ST BUFFR ON A NEW CYLINDER
*
* TEST IF SHARED TRACKS
*
ISLPA30  CLI   DCBHIRSH,X'00'           HIRSH VS 0
         BE    ISLPA31                  B IF 0, NOT SHARED
*
*                                       SHARED TRACKS
* IF SHARED TRACKS, 1ST PRIME DATA ON NEW CYLINDER IS ON A SHARED TRACK
*
         L     R3,IOBPTRB               C(R3)=PTR B = A(NEXT SLOT) OR-
         OI    0(R3),X'02'              TURN PF-BIT ON (STATUS BIT 6)
*
* SET REG 7 (REG C) = HIRSH
*
         IC    R7,DCBHIRSH              SHARED TRACK NEXT, C(R7)=HIRSH
*
* TEST IF LAST BUFFER FILLED WAS EOT, EOC, AND EOE
*
ISLPA31  L     R8,DCBDEBAD              C(R8)=A(DEB)
         L     R3,DEBFPEAD              C(R3)=A(1ST PRIME EXTENT ENTRY)
         LA    R3,0(R3)
         L     R4,DCBLPDA               C(R4)=MBBC
         SRL   R4,24                    C(R4)=000M
         BCTR  R4,0                     C(R4)=M-1
         SLL   R4,4                     C(R4)=000M-1 X 16 (USE AS INDX)
         L     R8,12(R4,R3)             C(R8)=HHXX-END HH OF CURR EXTNT
         SRL   R8,16                    C(R8)=00HH
*
         L     R8,8(R4,R3)              C(R8)=END HHCC OF CURR EXTENT
         SLL   R8,16                    C(R8)=CC00
         SRL   R8,16                    C(R8)=00CC=END CC OF EXTENT
         LR    R5,R6                    C(R5)=CCHH
         SRL   R5,16                    C(R5)=00CC=CC JUST FILLED
         CR    R8,R5                    COMPARE FOR LAST CYLINDER
         BH    ISLPA33                  B IF END CC IS HIGH
*
*                                       EOT, EOC, AND EOE
*
* SET REG 6 (REG B) TO CC FROM NEXT EXTENT
*
         LA    R4,16(R4)                C(R4)=MX16  INDEX TO NEXT EXTNT
         L     R8,4(R4,R3)              C(R8)=STR BBCC OF NEXT EXTENT
         SLL   R8,16                    C(R8)=CC00
         LR    R6,R8                    C(R6)=CC00, HH SET LATER
*
* SET M IN DCBLPDA = M+1
*
         SRL   R4,4                     C(R4)=000M
         A     R4,ISLONEF               C(R4)=000M+1 (M=1 FOR EXTENT 0)
         STC   R4,DCBLPDA               C(LPDA)=000M+1
*
* SET STATUS BIT-3 ON = NEW EXTEN STARTS WITH THIS BUFFR
*
         L     R3,IOBPTRB               C(R3)=PTR B = A(NEXT SLOT) OR-
         LA    R3,0(R3)                 C(R3)=A(STATUS BITS)
         OI    0(R3),X'10'              TURN STATUS BIT-3 ON
*
         B     ISLPA34
*
*
* SET REG 6 (REG B) TO CC +1            EOT, EOC, NOT EOE
*
ISLPA33  A     R5,ISLONEF               C(R5)=00CC+1, PREVIOUS CC +1
         SLL   R5,16                    C(R5)=CC00
         LR    R6,R5                    C(R6)=CC00, HH SET BELOW
*
* SET REG 6 (REG B) TO HH FROM FIRSH
*
ISLPA34  ST    R6,ISLFXWK1              C(FXWK1)=CC00
         MVC   ISLFXWK1+2(2),DCBFIRSH   C(FXWK1)=CCHH, HH FROM FIRSH
         L     R6,ISLFXWK1              C(R6)=CCHH
*
* SET REG 5 (REG A) TO R FROM FIRSH
*
ISLPA35  EQU   *
         SR    R5,R5
         IC    R5,DCBFIRSH+2            C(R5)=000R, R FROM FIRSH
*
* PREFORMAT SHARED TRACK OF NEW CYLINDER IF NECESSARY
*
         TM    DCBOPTCD,X'08'           TEST OPTCD BIT-4 FOR CYL OVFL
         BC    1,ISLPA40                B IF ON = CYL OVFL
         CLI   DCBHIRSH,X'00'           TEST HIRSH VS 0           8M800
         BE    ISLPA50                  B IF 0, NOT SHARED
*
*                                       SHARED TRACKS - PREFORMAT
*
* INITIALIZE CP19
*****************
*
ISLPA40  LA    R2,ISLIOBC               C(R2)=A(IOBC)
*
* BE SURE CP19 NOT IN USE
*
         L     R4,IOBECBAD              C(R4)=A(ECB)
         TM    0(R4),X'40'              TEST ECB BIT 1 (C-BIT)
         BC    1,ISLPA41                B IF 1, I/O COMPLETE-DONT WAIT
         LA    R13,ISLVRSAV             C(R13)=A(VRSAV)
         LR    R3,R1                    SAVE R1
         LR    R1,R4                    C(R1)=A(ECB)
         LR    R4,R0                    SAVE R0
         WAIT  ECB=(1)                  WAIT
         LR    R0,R4                    RESTORE R0
         LR    R1,R3                    RESTORE R1
ISLPA41  STM   R2,R11,ISLVRSAV+28       SAVE REGS 2-11
*
*  1. SET IOBC+32 TO NEW CC AND NEW M IF ANY
*
         ST    R6,ISLFXWK2              C(FXWK2)=CCHH FROM REG B
         MVC   32(3,R2),DCBLPDA         MOVE MBB FROM LPDA
         MVC   35(3,R2),ISLFXWK2        MOVE CCH FROM REG B       22619
*
*  2. SET CM27 TO NEW CC AND NEW M IF ANY
*
         L     R10,DCBWKPT6             C(R10)=A(VPTRS)
         L     R10,16(R10)              C(R10)=A(CP19)
         USING CM1,R10                  ADDRESSABILITY CP19      S20201
         MVC   CM27(L3),DCBLPDA         MOVE MBB FROMLPDA        S20201
         MVC   CM27+L3(L4),ISLFXWK2     MOVE IN CCHH             S20201
         DROP  R10                                               S20201
*
*  3. SET UP AREA Z WITH NEW CC
*
         LA    R9,ISLAREAZ              C(R9)=A(AREA Z)
         LA    R3,10                    C(R3) = 10 = COUNT
         LA    R4,6(R9)                 C(R4)=A(Z+6)
ISLPA42  MVC   0(4,R4),ISLFXWK2         STORE CCHH IN Z
         A     R4,ISL8                  STEP Z
         BCT   R3,ISLPA42               LOOP
*
*
* EXECUTE CP19 - PREFORMAT NEW CYLINDER
***************************************
*
         LM    R2,R11,ISLVRSAV+28       RESTORE REGS 2-11
         LA    R13,ISLVRSAV             C(R13)=A(VRSAV)
         LR    R3,R0                    SAVE R0
         LR    R4,R1                    SAVE R1
         EXCP  IHAIOB                   EXECUTE CHANNEL PROGRAM
         LR    R0,R3                    RESTORE R0
         LR    R1,R4                    RESTORE R1
         LA    R2,ISLIOBA               C(R2)=A(IOBA)
*
         B     ISLPA50
*
*----------------------------------------------------------------------
*
         EJECT
***********************************************************************
* CHART PB - SET FBW                                                  *
***********************************************************************
*
*
* C(R7)=A(LAST SLOT SCHED) AS IT WAS FROZEN BEFORE I/O
*    SET REG 8 = NO OF BUFFRS NEEDED TO COMPLETE TRACK  - REG C
*
ISLPB01  L     R6,0(R7)                 C(R6)=A(LAST BUFF)
         LA    R6,0(R6)
         SR    R3,R3
         SR    R8,R8
         IC    R3,4(R6)                 C(R3)=LAST R
*
* TEST IF SHARED TRACKS ARE USED
*
         IC    R8,DCBHIRPD         C(R8)=HIRPD
         CLI   DCBHIRSH,X'00'      HIRSH VS 0
         BE    ISLPB02                  B IF 0, NO SHARED TRACKS
*
* TEST IF CURRENT TRACK SHARED
*
ISLPB01A MVC   ISLFXWK1(1),3(R6)   H (TRK BYTE) FROM BUFFER CNT
         EX    R0,ISLPA01A         REDUCE TO TRACK ADDR
         EX    R0,ISLPA01B         H OF FIRSH VS H OF BUFFER CNT
         BE    ISLPB03                  B IF EQUAL, TRACK SHARED
*
* TEST IF LAST BUFF WAS EOC, IF SO- NEXT TRACK IS SHARED
*
         TM    0(R7),X'04'              TEST S BIT 5 VS 1 (C-BIT)
         BC    1,ISLPB05                B IF 1, EOC
*
* 1. SHARED TRACKS-
*        CURR TRACK NOT SHARED AND NOT EOC
* 2. SHARED TRACKS NOT USED-
*
ISLPB02  EQU   *
         TM    0(R7),X'08'              TEST S BIT 4 VS 1 (T-BIT)
         BC    1,ISLPB06                B IF 1, EOT
         B     ISLPB06A
*
* 3. SHARED TRACKS-
*        CURR TRACK SHARED
*
ISLPB03  TM    0(R7),X'08'              TEST S BIT 4 VS 1 (T-BIT)
         BC    1,ISLPB06                B IF 1, EOT
         IC    R8,DCBHIRSH              C(R8)=HIRSH
         B     ISLPB06A
*
* 4. SHARED TRACKS-
*        CURR TRACK NOT SHARED, BUT EOC
*
ISLPB05  IC    R8,DCBHIRSH              C(R8)=HIRSH
         IC    R3,DCBFIRSH+2            C(R3)=FIRSH R
         A     R8,ISLONEF               C(R8)=HIRSH-FIRSH R +1
*
ISLPB06A CR    R8,R3                    END OF TRACK?            A41405
         BNE   SUBTR                    NO, CALCULATE FBW        A41405
         IC    R8,DCBHIRPD              YES,LAST REC UNSHARED    A41405
*                                       TRK                      A41405
         B     ISLPB06                  STORE HIRPD IN ISLFBW    A41405
SUBTR    SR    R8,R3                    CALCULATE FBW            A41405
*   REG C = HI R IF FULL TRACK TO BE WRITTEN
*   REG C = HI R - R IF PARTIAL TRACK TO BE WRITTEN
*                  R = NO. OF BUFFERS WRITTEN SO FAR ON THIS TRACK
*
ISLPB06  ST    R8,ISLFBW                R8 = REG C, C(FBW)=C(REG C)
*
* TEST NEW FBW VS BUFNO AND ADJUST FBW IF NECESSARY
*
         LA    R4,1                     C(R4)=1
         CLC   ISLFBW+3(1),ISLBUFNO     TEST FBW VS BUFNO
         BL    ISLPB20                  B IF FBW LOW
*
*                                       FBW HI OR EQ -
*
         CLC   ISLBUFNO(1),ISLONEF+3    TEST BUFNO VS 1
         BE    ISLPB10                  B IF BUFNO = 1
*
         IC    R4,ISLBUFNO              BUFNO NOT 1, C(R4)=BUFNO
         BCTR  R4,0                     C(R4)-BUFNO-1             P4701
*
*                                       BUFNO=1
ISLPB10  EQU   *
         ST    R4,ISLFBW                C(FBW)=1
*
ISLPB20  B     ISLFY41                 *EXIT
         EJECT
***********************************************************************
* CHART F8 - INITIALIZE CP18 FOR CURRENT BUFFER SET                   *
***********************************************************************
*
*
* SET OFFST AND D ACCORDING TO RECFM (IOBA FLAGS BIT 7)
*
ISLF801  L     R10,DCBWKPT6             C(R10)=A(VPTRS)
*
* CALC FSTBF = # OF SLOTS SLOT X IS FROM SLOT #1 IN BUF CTRL TABLE
*
ISLF803  L     R3,IOBPTRA               C(R3)=C(PTR A)=A(SLOT X)
         LA    R3,0(R3)
         LA    R4,IOBS                  C(R4)=A(SLOT #1)
         SR    R3,R4                    C(R3)= # OF BYTES X IS FROM #1
         SRA   R3,2                     DIV BY 4, C(R3)= DIFF IN SLOTS
         ST    R3,ISLFSTBF              C(FSTBF)= # OF SLOTS FROM #1
*                                         THAT FIRST BUF SCHED IS
*
* CALC ADDR OF WR CKD X (SCHED TO WR FIRST) FOR TIC IN CP18
*
         L     R5,ISLOFFST              C(R4+R5)=OFFST
         MR    R4,R3                    FSTBF X OFFST, C(R5)= THE # OF
*                                         BYTES WR CKD X IS FROM THE
*                                         FIRST BYTE OF WR CKD #1
         L     R10,12(R10)              C(R10)=A(CP18)
         LA    R4,24(R10)               C(R4)=A(WR CKD #1)
         AR    R4,R5                    C(R4)=A(WR CKD X)
         IC    R6,16(R10)               C(R6)=TIC OP CODE AT CP18+16
         ST    R4,16(R10)               C(CP18+16)=A(WR CKD X),4 BYTES
         STC   R6,16(R10)               C(CP18+16)=TIC OP CODE,1 BYTE
*
* CALC LSTBF = FBW SLOTS FROM FSTBF -1, MAY WRAPAROUND
*
         L     R3,ISLFSTBF              C(R3)=# OF SLOTS FROM SLOT #1
         A     R3,ISLFBW                C(R3)= FSTBF + FBW
         BCTR  R3,0                     C(R3)=FSTBF + FBW-1 = LSTBF
         SR    R4,R4                    C(R4)= 0000
         IC    R4,ISLBUFNO              C(R4)=NO OF BUFFRS
         CR    R3,R4                    LSTBF VS BUFNO, TEST WRAPAROUND
         BL    ISLF806                  B IF NO WRAPAROUND, LSTBF OK
         SR    R3,R4                    C(R3)=LSTBF-BUFNO = LSTBF
*                                         LSTBF SET FOR WRAPAROUND
ISLF806  ST    R3,ISLLSTBF              C(LSTBF)= # OF SLOTS FROM #1
*                                         THAT LAST BUF SCHED IS
         L     R5,ISLOFFST              C(R4+R5)=OFFST
         MR    R4,R3                    LSTBF X OFFST, C(R5)= THE # OF
*                                         BYTES LAST WR CKD TO BE
*                                         EXECUTED IS FROM THE FIRST
*                                         BYTE OF WR CKD #1
         AR    R5,R10                   *                         13334
         IC    R4,ISLBUFNO              * C(6)=BUFFER NUMBER      13334
         LR    R3,R10                   * C(R3)=A(CP18)           13334
ISLF811  AL    R3,ISLOFFST              *C(R3)=A OF 1ST WRT. COMD 13334
         MVC   17(3,R3),21(R3)          * RESTORE ORIGN. TIC ADDR.13334
         BCT   R4,ISLF811               * LOOP , UNTIL ALL DONE   13334
         TM    IOBFLAGS,X'01'           * RKP=0 ?                 13334
         BC    1,ISLF808                * BRANCH IF RKP=0         13334
         MVC   49(3,R5),13(R10)         * SET TIC BRANCH TO WRT.CK13334
         MVC   ISLKEYAD+1(3),33(R5)     * SET LAST WRITE KEY ADDR.13334
ISLF809  L     R5,12(R10)               * C(R5)=A(TIC CCW)        13334
         L     R3,ISLFBW                * C(R3)=NO. OF BUF. TO WRT13334
         L     R4,20(R10)               * C(R4)=A(READ BACK CCW)  13334
ISLF807  SL    R4,ISL8                  * C(R4)=A(FIRST READ CCW) 13334
         BCT   R3,ISLF807               * LOOP,IF MORE THAN 1 BUFR13334
         ST    R4,K24(R5)               * C(R4)=A(FIRST READ     S20201
*                                       CCW)                     S20201
         OI    K24(R5),TIC              * RESTORE TIC OP CODE    S20201
         B     ISLF901                                            13334
*                                                                 13334
ISLF808  MVC   33(3,R5),13(R10)         * SET TIC BRANCH TO WRT.CK13334
         L     R4,24(R5)                * C(R4)=A(CKD OF LAST WRT)13334
         LA    R4,8(R4)                 * C(R4)=A(KEY OF LAST WRT)13334
         ST    R4,ISLKEYAD              * SET UP LAST KEY ADDR.   13334
         B     ISLF809                  * RETURN TO MAIN LINE     13334
         EJECT
***********************************************************************
* CHART F9 - INITIALIZE CP20 FOR CURRENT TRACK                        *
***********************************************************************
*
         USING ISLY,R9
*
* F9 HOUSEKEEPING
*
ISLF901  L     R6,IOBPTRA               C(R6)=C(PTR A)=A(SLOT X)
         L     R6,0(R6)                 C(R6)=C(SLOT X)=A(1ST BUF)
         LA    R6,0(R6)
         MVC   ISLFXWK1(4),1(R6)        C(FXWK1)=CHHR OF CNT IN 1ST BUF
         L     R7,ISLFXWK1              C(R7)=CHHR
         BCTR  R7,0                     C(R7)=CCHR-1
*
* TEST LAST BUFFER FOR END OF TRACK (T-BIT ON)
*
         L     R3,ISLLSTBF              C(R3)=LSTBF
         SLA   R3,2                     MULT BY 4, C(R3)=LSTBF IN BYTES
         LA    R3,IOBS(R3)              C(R3)=A(LSTBF SLOT IN BCT)
         TM    0(R3),X'08'              TEST S BIT 4 VS 1 (T-BIT)
         BC    1,ISLF902                B IF T-BIT ON
*
*                                       T-BIT OFF, NO CP20 YET
*
* SET IOBA+32 (IOBDADAD) = COUNT OF 1ST BUF SCHED, R=R-1 FOR SRCH ID
*
         MVC   IOBDADAD+3(1),0(R6)      C(IOBA+35)=C FROM 1ST BUF
         ST    R7,IOBDADAD+4            C(IOBA+35)=CCHHR WITH R=R-1
         IC    R4,IOBCPSAD              SAVE SIOCC
         ST    R10,IOBCPSAD             C(CPSAD)=CP18 START ADR
         STC   R4,IOBCPSAD              RESTORE SIOCC
*
* SET CL1 IN CP18 TO REFERENCE IOBA+35
*
         LA    R3,IOBDADAD+3            C(R3)=A(IOBA+35)
         O     R3,SCHCOM                *COMBINE SCH OP CODER.    13334
         ST    R3,0(R10)                *UPDATE CP18 SCH COMD.    13334
         ST    R3,CL1-CL0(R5)           *UPDATE CP18 WRT. CK.    S20201
*                                       SCH                      S20201
         B     ISLFY21                  * RETURN TO FYRT. CK. SCH 13334
*
*                                       T-BIT ON, INITL CP20
* CLEAR TWO SW
*
ISLF902  NI    IOBFLAGS,X'FB'           SET FLAGS BIT 5 = 0 (TWOSW OFF)
         OI    ISLIXLT,X'08'            SET IXLT LEV1 BIT-4 ON- TRK IX
*
* SET CP20 LINE CQ14A = CCHHR FROM COUNT OF 1ST BUF SCHED, R=R-1
*                         MBB FROM IOBA+32 (IOBDADAD)
*
         LR    R5,R10                   C(R5)=A(CP18,CL1)
*
         L     R10,DCBWKPT6             C(R10)=A(VPTRS)
         L     R10,20(R10)              C(R10)=A(CP20)
         USING CQ1,R10                  ADDRESSABILITY CP20      S20201
         MVC   112(3,R10),IOBDADAD      C(CQ14A)=MBB FROM IOBA+32
         MVC   115(1,R10),0(R6)         C(CQ14A)=C FROM 1ST BUF
         ST    R7,116(R10)              C(CQ14A)=MBBCCHHR WITH R=R-1
*
* SET CL1 IN CP18 TO REFERENCE CQ14A+3
*
         LA    R3,115(R10)              C(R3)=A(CQ14A+3)
         O     R3,SCHCOM                *COMBINE SCH OP CODER.    13334
         ST    R3,0(R5)                 *UPDATE CP18 SCH COMD.    13334
         L     R4,12(R5)                *C(R4)=A(SCHCMD.OF CP18)  13334
         ST    R3,K8(R4)                *UPDATE SCH CMD. ADDR.   S20201
*
* TEST COUNT OF 1ST BUFFR SCHED, HH VS FIRSH HH, FOR NEW CYLINDER
*
         EX    R0,ISLPB01A              H FROM COUNT
         EX    R0,ISLPA01A              REDUCE TO TRACK ADDR
         EX    R0,ISLPA01B              COUNT VS FIRSH
         BE    ISLF909                  B IF EQUAL, NEW CYLINDER
*
* TEST IF LAST IX ENTRY IS ON A SHARED TRACK
*
         CLI   DCBHIRSH,X'00'           HIRSH VS 0
         BE    ISLF905                  B IF 0, NOT SHARED
ISLF904A MVC   ISLFXWK1(1),ISLOCNT+3    H FROM OVFLO COUNT
         EX    R0,ISLPA01A              REDUCE TO TRACK ADDR
         EX    R0,ISLPA01B              OVFLO CNT VS FIRSH
         BNE   ISLF905                  B IF NOT EQUAL, NOT SHARED
*                                       SHARED TRACK
*
* CALC - NO ENTRIES REMAINING = (FIRSH-1) - LAST IX ENTRY, R-R
*
         MVC   ISLF9WK1+3(1),DCBFIRSH+2
         L     R3,ISLF9WK1              C(R3)=000R FROM FIRSH
         BCTR  R3,0                     C(R3)=000R-1 FROM FIRSH
*                                            = R OF LAST IX ENT ON TRK
         B     ISLF906A
*                                       NOT A SHARED TRACK
*
* CALC - NO ENTRIES REMAINING = HIRT - LAST IX ENTRY, R-R
*
ISLF905  MVC   ISLF9WK1+3(1),ISLHIRT
         L     R3,ISLF9WK1              C(R3)=000R FROM HIRT
*                                       = R OF LAST IX ENTRY ON TRACK
ISLF906A EQU   *
         MVC   ISLF9WK1+3(1),ISLOCNT+4
*                                       = R OF LAST IX ENTRY
         S     R3,ISLF9WK1              C(R3)=HIRT-OCNT
         ST    R3,ISLNOENT              C(NOENT)=HIRT-OCNT
*
* TEST NO ENTRIES
*
ISLF906  EQU   *
         LTR   R3,R3                    TEST NOENT VS 0
         BC    8,ISLF908                B IF ZERO - END OF IX TRACK
         C     R3,ISLTWOF               TEST NOENT  VS 2
         BL    ISLG101                  BR LOW - NOENT=1
         BNE   ISLF907                  B NOT 2, ROOM FOR MORE THAN 2
*
* NO ENTRIES = 2, SET TWO SW ON
*
         OI    IOBFLAGS,X'04'           SET FLAGS BIT 5 = 1 (TWOSW ON)
*
* NO ENTRIES = 2 OR MORE, BUMP R IN NORMAL AND OVERFLOW COUNTS
*
ISLF907  SR    R3,R3
         IC    R3,ISLOCNT+4             C(R3)=R FROM OCNT
         LA    R3,1(R3)                 C(R3)=R+1
         STC   R3,ISLNCNT+4             C(NCNT)=CCHHR, R=R+1
         LA    R3,1(R3)                 C(R3)=(R+1)+1=R+2
         STC   R3,ISLOCNT+4             C(OCNT)=CCHHR, R=R+2
         MVC   ISLNCNT+2(2),ISLOCNT+2   C(NCNT)=CCHHR, HH FROM OCNT
         B     ISLG201
*
* NO ENTRIES = 0, BUMP HH IN NORMAL AND OVERFLOW COUNTS AND SET R = 1
*
ISLF908  L     R3,ISLNCNT               C(R3)=CCHH FROM NCNT
         A     R3,ISLONEF               C(R3)=CCHH+1
         ST    R3,ISLNCNT               C(NCNT)=CCHH+1
         B     ISLF9095
*
* NEW CYLINDER, NORMAL AND OVERFLOW COUNTS RESET USING 1ST BUFFR SCHED
*
ISLF909  EQU   *
         MVC   ISLNCNT(4),0(R6)         C(NCNT)=CCHH FROM 1ST BFR
*                             SET TRACK=0
*
         MVC   ISLNCNT+2(2),ISLZEROF    C(NCNT)=CCHH WITH HH=00
ISLF9095 EQU   *
         MVI   ISLNCNT+4,X'01'          C(NCNT)=CCHHR WITH R=1
         MVC   ISLOCNT(4),ISLNCNT       C(OCNT)=CCHH FROM NCNT
         MVI   ISLOCNT+4,X'02'          C(OCNT)=CCHHR WITH R=2
         B     ISLG201
         EJECT
*                                                                     *
* CHART G1 - CONTINUATION OF CHART F9, INDEX ENTRIES SPLIT            *
***********************************************************************
*
* NO ENTRIES = 1, BUMP R IN NORMAL COUNT AND HH IN OVERFLOW COUNT
*                 SET R = 1 IN OVERFLOW COUNT
*
ISLG101  IC    R3,ISLNCNT+4             C(R3)-R FROM NCNT         P4701
         LA    R3,2(0,R3)               R=R+2                     P4701
         STC   R3,ISLNCNT+4             C(NCNT)=CCHHR, R=R+2
         L     R3,ISLOCNT               C(R3)=CCHH FROM OCNT
         A     R3,ISLONEF               C(R3)=CCHH+1
         ST    R3,ISLOCNT               C(OCNT)=CCHH+1
         MVI   ISLOCNT+4,X'01'          C(OCNT)=CCHHR, R=1
*
* SET IOBA+35 (IOBDADAD) = NORMAL CCHHR, R=R-1 FOR SRCH ID
*
         MVC   IOBDADAD+3(5),ISLNCNT    C(IOBA+35)=CCHHR FROM NCNT
         L     R3,IOBDADAD+4            C(R3)=CHHR
         BCTR  R3,0                     C(R3)=CCHR-1
         ST    R3,IOBDADAD+4            C(DADAD)=MBBCCHHR WITH R=R-1
*
* TEST IF OVFLO HH IS ON A SHARED TRACK (IS IT FORMATTED)
*
         CLI   DCBHIRSH,X'00'           HIRSH VS 0
         BE    ISLG102                  BR IF 0, NOT SHARED
         EX    R0,ISLF904A              C(FXWK1)=H FROM OVFLO CNT
         EX    R0,ISLPA01A              REDUCE TO TRACK ADDR
         EX    R0,ISLPA01B              H OF FIRSH VS C(FXWK1) OVFLO CT
         BNE   ISLG102                  B IF NOT EQUAL, NOT SHARED
*                                       SHARED TRACK
*
* INITL CP20 FOR SHARED TRACK (FORMATTED TRACK)
*
         LA    R3,CQ15                  C((R3)=A(CQ15)           S20201
         IC    R4,IOBCPSAD              SAVE SIOCC
         ST    R3,IOBCPSAD              C(CPSAD)=CP20 START ADR, CQ15
         STC   R4,IOBCPSAD              RESTORE SIOCC
         L     R3,ISLKEYAD              C(R3)=A(KEY OF LAST WR CKD)
         IC    R4,48(R10)               SAVE OP AT CQ7
         ST    R3,48(R10)               STORE KEY ADR AT CQ7
         STC   R4,48(R10)               RESTORE OP
         IC    R4,CQ18                  SAVE OP AT CQ18          S20201
         ST    R3,CQ18                  STORE KEY ADR AT CQ18    S20201
         STC   R4,CQ18                  RESTORE OP               S20201
         LA    R3,32(R10)               C(R3)=A(CQ5)
         IC    R4,CQ20                  SAVE OP AT CQ20          S20201
         ST    R3,CQ20                  STORE A(CQ5) AT CQ20     S20201
         STC   R4,CQ20                  RESTORE OP               S20201
         B     ISLG202
*----------------------------------------------------------------------
*
*                                       NOT A SHARED TRACK
*
* INITL CP20 FOR UNSHARED TRACK (NON-FORMATTED TRACK)
*
ISLG102  L     R3,ISLKEYAD              C(R3)=A(KEY OF LAST WR CKD)
         IC    R4,CQ18                  SAVE OP AT CQ18          S20201
         ST    R3,CQ18                  STORE KEY ADR AT CQ18    S20201
         STC   R4,CQ18                  RESTORE OP               S20201
         IC    R4,CQ22                  SAVE OP AT CQ22          S20201
         ST    R3,CQ22                  STORE KEY ADR AT CQ22    S20201
         STC   R4,CQ22                  RESTORE OP               S20201
*
* TEST LAST BUFFER FOR END OF CYLINDER (C-BIT ON)
*
         L     R3,ISLLSTBF              C(R3)=LSTBF
         SLA   R3,2                     MULT BY 4, C(R3)=LSTBF IN BYTES
         LA    R3,IOBS(R3)              C(R3)=A(LSTBF SLOT IN BCT
         TM    0(R3),X'04'              TEST S BIT 5 VS 1 (C-BIT)
         BC    1,ISLG103                B IF C-BIT ON
*
*                                       C-BIT OFF
         LA    R3,96(R10)               C(R3)=A(CQ13)
         IC    R4,CQ24                  SAVE OP AT CQ24          S20201
         ST    R3,CQ24                  STORE A(CQ13) AT CQ24    S20201
         STC   R4,CQ24                  RESTORE OP               S20201
*
         MVC   CQT5A+1(3),CQT5ATIC      SKIP INACTIVE CHECK      M5864
ISLG104  EQU   *                        *                        A37537
*
         LA    R3,CQ27                  C(R3)=A(CQ27)            S20201
         IC    R4,CQ20                  SAVE OP AT CQ20          S20201
         ST    R3,CQ20                  STORE A(CQ27) AT CQ20    S20201
         STC   R4,CQ20                  RESTORE OP               S20201
         LA    R3,CQ21                  C(R3)=A(CQ21)            S20201
         IC    R4,CQ29                  SAVE OP AT CQ29          S20201
         ST    R3,CQ29                  STORE A(CQ21) AT CQ29    S20201
         STC   R4,CQ29                  RESTORE OP               S20201
         B     ISLG221
*----------------------------------------------------------------------
*
*
*                                       C-BIT ON
ISLG103  MVC   ISLDCNT(5),ISLOCNT       C(DCNT)=CCHHR FROM OCNT
         SR    R3,R3
         IC    R3,ISLDCNT+4             C(R3)=R FROM DCNT
         LA    R3,1(R3)                 C(R3)=R+1
         STC   R3,ISLDCNT+4             C(DCNT)=CCHHR, R=R+1
         LA    R3,CQ25                  C(R3)=A(CQ25)            S20201
         IC    R4,CQ24                  SAVE OP AT CQ24          S20201
         ST    R3,CQ24                  STORE A(CQ25) AT CQ24    S20201
         STC   R4,CQ24                  RESTORE OP               S20201
*
         MVC   CQT5A+1(3),CQT5ANOP      CHECK INACTIVE ENTRY     M5864
*
         B     ISLG104
         EJECT
*                                                                     *
* CHART G2 - CONTINUATION OF CHARTS F9 AND G1                         *
***********************************************************************
*
* TEST IF OVFLO HH IS ON A SHARED TRACK (IS IT FORMATTED)
*
ISLG201  EQU   *
         CLI   DCBHIRSH,X'00'           HIRSH VS 0
         BE    ISLG210                  BR IF 0 - NOT SHARED
         EX    R0,ISLF904A              C(FXWK1)=H FROM OVFLO CNT
         EX    R0,ISLPA01A              REDUCE TO TRACK ADDR
         EX    R0,ISLPA01B              H OF FIRSH VS H OF OVFLO CNT
         BNE   ISLG210                  B IF NOT EQUAL, NOT SHARED
*                                       SHARED TRACK
*
* INITL CP20 FOR SHARED TRACK (FORMATTED TRACK) AND SET IOBA+35
*
         IC    R4,IOBCPSAD              SAVE SIOCC
         ST    R10,IOBCPSAD             C(CPSAD)=CP20 START ADR, CQ1
         STC   R4,IOBCPSAD              RESTORE SIOCC
*                                       SET IOBA+35 = NORMAL CCHHR
         MVC   IOBDADAD+3(5),ISLNCNT    C(IOBA+35)=CCHHR FROM NCNT
*
         L     R3,ISLKEYAD              C(R3)=A(KEY OF LAST WR CKD)
         IC    R4,16(R10)               SAVE OP AT CQ3
         ST    R3,16(R10)               STORE KEY ADR AT CQ3
         STC   R4,16(R10)               RESTORE OP
         IC    R4,48(R10)               SAVE OP AT CQ7
         ST    R3,48(R10)               STORE KEY ADR AT CQ7
         STC   R4,48(R10)               RESTORE OP
*
*
* TEST LAST BUFFER FOR END OF CYLINDER (C-BIT ON)
*
ISLG202  L     R3,ISLLSTBF              C(R3)=LSTBF
         SLA   R3,2                     MULT BY 4, C(R3)=LSTBF IN BYTES
         LA    R3,IOBS(R3)              C(R3)=A(LSTBF SLOT IN BCT)
         TM    0(R3),X'04'              TEST S BIT 5 VS 1 (C-BIT)
         BC    1,ISLG203                B IF C BIT ON
*
*                                       C-BIT OFF
         LA    R3,96(R10)               C(R3)=A(CQ13)
         IC    R4,64(R10)               SAVE OP AT CQ9
         ST    R3,64(R10)               STORE A(CQ13) AT CQ9
         STC   R4,64(R10)               RESTORE OP
*
         MVC   CQT5A+1(3),CQT5ATIC      SKIP INACTIVE CHECK      M5864
         B     ISLG250                  BR - SET UP N,O DAT      A37537
*
*                                       C-BIT ON
ISLG203  MVC   ISLDCNT(5),ISLOCNT       C(DCNT)=CCHHR FROM OCNT
         IC    R3,ISLDCNT+4             C(R3)=R FROM DCNT
         LA    R3,1(0,R3)               C(R3)-R+1                 P4701
         STC   R3,ISLDCNT+4             C(DCNT)=CCHHR, R=R+1
         LA    R3,72(R10)               C(R3)=A(CQ10)
         IC    R4,64(R10)               SAVE OP AT CQ9
         ST    R3,64(R10)               STORE A(CQ10) AT CQ9
         STC   R4,64(R10)               RESTORE OP
*
         MVC   CQT5A+1(3),CQT5ANOP      CHECK INACTIVE ENTRY     M5864
*
         B     ISLG250
*
*                                       NOT A SHARED TRACK
*
* INITL CP20 FOR UNSHARED TRACK (NON FORMATTED) AND SET IOBA+35
*
*                                       SET IOBA+35 = NORMAL CCHHR-1
ISLG210  MVC   IOBDADAD+3(5),ISLNCNT    C(IOBA+35)=CCHHR FROM NCNT
         L     R3,IOBDADAD+4            C(R3)=CHHR
         BCTR  R3,0                     C(R3)=CHHR-1
         ST    R3,IOBDADAD+4            C(DADAD)=MBBCCHHR WITH R=R-1
         L     R3,ISLKEYAD              C(R3)=A(KEY OF LAST WR CKD)
         IC    R4,CQ18                  SAVE OP AT CQ18          S20201
         ST    R3,CQ18                  STORE KEY ADR AT CQ18    S20201
         STC   R4,CQ18                  RESTORE OP               S20201
         IC    R4,CQ22                  SAVE OP AT CQ22          S20201
         ST    R3,CQ22                  STORE KEY ADR AT CQ22    S20201
         STC   R4,CQ22                  RESTORE OP               S20201
*
* TEST LAST BUFFER FOR END OF CYLINDER (C-BIT ON)
*
         L     R3,ISLLSTBF              C(R3)=LSTBF
         SLA   R3,2                     MULT BY 4, C(R3)=LSTBF IN BYTES
         LA    R3,IOBS(R3)              C(R3)=A(LSTBF SLOT IN BCT)
         TM    0(R3),X'04'              TEST S BIT 5 VS 1 (C-BIT)
         BC    1,ISLG211                B IF C BIT ON
*
*                                       C-BIT OFF
         LA    R3,96(R10)               C(R3)=A(CQ13)
         IC    R4,CQ24                  SAVE OP AT CQ24          S20201
         ST    R3,CQ24                  STORE A(CQ13) AT CQ24    S20201
         STC   R4,CQ24                  RESTORE OP               S20201
*
         MVC   CQT5A+1(3),CQT5ATIC      SKIP INACTIVE CHECK      M5864
*
ISLG220  LA    R3,CQ21                  C(R3)=A(CQ21)            S20201
         IC    R4,CQ20                  SAVE OP AT CQ20          S20201
         ST    R3,CQ20                  STORE A(CQ21) AT CQ20    S20201
         STC   R4,CQ20                  RESTORE OP               S20201
*
ISLG221  LA    R3,CQ15                  C(R3)=A(CQ15)            S20201
         IC    R4,IOBCPSAD              SAVE SIOCC
         ST    R3,IOBCPSAD              C(CPSAD)=CP20 START ADR, CQ15
         STC   R4,IOBCPSAD              RESTORE SIOCC
         MVC   CQ30,IOBDADAD            C(CQ30)=MBBCCHH FROM     S20201
*                                       IOBA+32                  S20201
         MVI   CQ30+K7,K0               C(CQ30)=MBBCCHHR, R=0    S20201
         L     R3,CQ30+K4               C(R3)=CHHR               S20201
         A     R3,ISLTENF               C(R3)=CHHR, HH=HH+1
         ST    R3,CQ30+K4               C(CQ30)=MBBCCHHR, HH+1,  S20201
*                                       R=0                      S20201
*
* SET NORMAL DATA = COUNT FROM 1ST BUF SCHED (BOTH SHARED AND UNSHARED)
*
ISLG250  MVC   ISLNDAT(3),IOBDADAD      C(NDAT)=MBB FROM IOBA+32
         MVC   ISLNDAT+3(4),0(R6)       C(NDAT)=CCHH FROM 1ST BUF
         MVC   ISLODAT(7),ISLNDAT       C(ODAT)=MBBCCHH FROM NDAT
         MVC   ISLNDAT+7(2),ISLZEROF    NORMAL DATA F=0  (SHARED)
*                                       R=0
*
         CLI   DCBHIRSH,X'00'           HIRSH VS 0
         BE    ISLG252                  BR IF 0, NOT SHARED
         MVC   ISLFXWK1(1),ISLNDAT+6    C(FXWK1)=H OF NORMAL DATA ENTRY
         EX    R0,ISLPA01A              REDUCE TO TRACK ADDR
         EX    R0,ISLPA01B              H OF FIRSH VS C(FXWK1)
         BNE   ISLG252
*
         MVI   ISLNDAT+8,X'08'          NORMAL DATA F = 08 (SHARED)
         MVC   ISLNDAT+7(1),DCBFIRSH+2  NORMAL DATA R = FIRSH R
*
* SET UP AREA Y
*
ISLG252  L     R10,DCBWKPT6             C(R10)=A(VPTRS)
         L     R9,0(R10)                C(R9)=A(Y)
         MVC   ISLY+18(8),ISLNCNT       C(Y+18)=NORM COUNT
         MVC   ISLY+26(10),ISLNDAT      C(Y+26)=NORM DATA
         MVC   ISLY+36(8),ISLOCNT       C(Y+36)=OVFL COUNT
         MVC   ISLY+44(10),ISLODAT      C(Y+44)=OVFL DATA
         MVC   ISLY+54(8),ISLDCNT       C(Y+54)=DUMM COUNT
*
* END OF EXPANSION
*
ISLG260  B     ISLFY21                  RETURN TO FY
*----------------------------------------------------------------------
*
*
*                                       C-BIT ON
ISLG211  MVC   CQT5A+1(3),CQT5ANOP      CHECK INACTIVE ENTRY     M5864
*
*
* TEST TWO SW, IS THERE ROOM FOR JUST 2 MORE ENTRIES AT END OF CYLINDER
*
         TM    IOBFLAGS,X'04'           TEST FLAGS BIT 5 VS 1 (TWOSW)
         BC    1,ISLG212                B IF ON
*
*                                       TWOSW OFF
         MVC   ISLDCNT(5),ISLOCNT       C(DCNT)=CCHHR FROM OCNT
         SR    R3,R3
         IC    R3,ISLDCNT+4             C(R3)=R FROM DCNT
         LA    R3,1(R3)                 C(R3)=R+1
         STC   R3,ISLDCNT+4             C(DCNT)=CCHHR, R=R+1
         LA    R3,CQ25                  C(R3)=A(CQ25)            S20201
         B     ISLG213A
*
*                                       TWOSW ON
ISLG212  MVC   ISLDCNT(5),ISLOCNT       C(DCNT)=CCHHR FROM OCNT
         L     R3,ISLDCNT               C(R3)=CCHH FROM DCNT
         A     R3,ISLONEF               C(R3)=CCHH+1
         ST    R3,ISLDCNT               C(DCNT)=CCHH+1
         MVI   ISLDCNT+4,X'01'          C(DCNT)=CCHHR, R=1
*
* TEST IF DUMMY HH IS A SHARED TRACK (FORMATTED)
*
         CLI   DCBHIRSH,X'00'           HIRSH VS 0
         BE    ISLG213                  B IF 0, NOT SHARED
         MVC   ISLFXWK1(1),ISLDCNT+3    C(FXWK1)=H FROM DUMMY COUNT
         EX    R0,ISLPA01A              REDUCE TO TRACK ADDR
         EX    R0,ISLPA01B              FIRSH VS C(FXWK1)
         BNE   ISLG213                  B IF NOT EQUAL, NOT SHARED
*
*                                       SHARED TRACK (FORMATTED)
         LA    R3,72(R10)               C(R3)=A(CQ10)
         B     ISLG213A
*
*                                       NOT A SHARED TRACK
ISLG213  LA    R3,CQ25                  C(R3)=A(CQ25)            S20201
         IC    R4,CQ29                  SAVE OP AT CQ29          S20201
         ST    R3,CQ29                  STORE C(R3) AT CQ29      S20201
         STC   R4,CQ29                  RESTORE OP               S20201
*
         LA    R3,CQ27                  C(R3)=A(CQ27)            S20201
ISLG213A EQU   *
         IC    R4,CQ24                  SAVE OP A CQ24           S20201
         ST    R3,CQ24                  STORE C(R3) AT CQ24      S20201
         STC   R4,CQ24                  RESTORE OP               S20201
         B     ISLG220
*
         EJECT
*
* F8 CONSTANTS
*
ISL8     DC    F'0008'
CONSF8   DC    F'248'                                             13334
*
* F9 CONSTANTS
*
ISL4     DC    F'0004'
ISLONEF  DC    F'0001'
ISLTWOF  DC    F'0002'
SCHCOM   DC    X'31000000'                                        13334
ISLZEROF EQU   SCHCOM+1                 ISLZEROF=4 BYTES OF ZEROS 20852
ISLTENF  DC    X'00000100'
ISLRFP   EQU   ISLTENF+3                RFP OF MBBCCHHRFP =       8M800
*                                       002907                    8M800
ISLFP    DC    X'2907'                  FP OF ISLRFP              8M800
*
* FX CONSTANTS
*
ISLFX02A CLC   0(1,R4),0(R5)            KEY COMP TO BE EXECUTED (L)
ISLFX06A MVC   0(1,R5),0(R4)            MOVE KEY TO BE EXECUTED (L)
ISLFX08A CLC   0(1,R5),0(R4)            KEY COMP TO BE EXECUTED (M)
ISLFX21A MVC   0(1,R4),0(R5)            MOVE RCD TO BE EXECUTED (M)
*
PATCH    DC    XL((*-IGG019GB)/20)'00'  ZEROED PATCH AREA        Y02072
*
         END
