         TITLE 'IGG019G4 - APPENDAGES-PART 1,BLKD,SYS WA,NO WRT CHK'
IGG019G4 CSECT
*          RELEASE OS/VS2-02 DELETIONS                                *
*          RELEASE 19 DELETIONS                                       *
*2452064500,071810-071930,072100                                 A28692
*          RELEASE 20 DELETIONS                                       *
*0150                                                            A38857
*0150042200,042260-042320,064540,069200,069400,069600,069800,    A31323
*0150070000,072140,072400,078800-079000,103200-106000            A31323
*0150018250-018300,018350,018400,038600-038800,039000-039800,    S20201
*0150045600,045800-046800,048600,049600,049800-050200,052800,    S20201
*0150058200,147600,147800,148000-148800,165600-167400,167600-    S20201
*0150171400,171600-175400,175600-180400,180600-191000,197000-    S20201
*0150199800,200000-209800,210200-211000,211200-215360,215600-    S20201
*0150216400,216600-223000                                        S20201
*          RELEASE 21 DELETIONS                                       *
*1201021600,022600                                               S21045
*1201                                                            A33533
*1201036200,043200,119000-119200,152200,157200-157400,159000-    A37184
*1201159400                                                      A37184
*1201                                                            M0060
*XXXX                                                            A49403
*1201021400                                                      A50670
*            CHANGES SINCE VS2-3.7                                    *
*A023460-023520,A156930-156960                                 @ZA26522
*                                                                     *
*STATUS CHANGE LEVEL 008
*
* FUNCTION/OPERATION- APPENDAGE ROUTINES FOR BISAM
*        WHEN WRITE KN IS USED WITH OR WITHOUT READ AND UPDATE
*        WHEN THE USER HAS NOT SUPPLIED A READ-IN AREA,
*        WHEN WRITE VALIDITY CHECKING IS NOT REQUESTED,
*        AND RECORD FORMAT IS   BLOCKED.
*        (PART 1)
*
*        CEND  - IF CHANNEL PROGRAM ENDS
*                **WITHOUT ERROR, EITHER
*                    PROCESSING COMPLETION WILL BE SCHEDULED,
*                    PROCESSING CONTINUATION WILL BE SCHEDULED,
*                    OR PROCESSING WILL CONTINUE.
*                **WITH A LENGTH CHECK, TESTS DETERMINE WHETHER
*                    OR NOT TO TREAT THE SITUATION AS A REAL
*                    ERROR.
*                **ANY OTHER ERROR, IN GENERAL, 'UNREACHABLE
*                    BLOCK' IS INDICATED IN THE DECB, AND
*                    PROCESSING COMPLETION WILL BE SCHEDULED.
*
*        ABEND - IF CHANNEL PROGRAM ENDS ABNORMALLY BECAUSE OF
*                **PERMANENT ERROR, 'UNCORRECTABLE I/O ERROR'
*                    IS INDICATED IN THE DECB, AND PROCESSING
*                    COMPLETION WILL BE SCHEDULED.
*                **NON-PERMANENT ERROR, ONE RE-TRY IS MADE
*                    BEFORE INDICATING A PERMANENT ERROR.
*                **FILE PROTECTION, TESTS DETERMINE WHETHER
*                    OR NOT TO TREAT THE SITUATION AS A REAL
*                    ERROR.
*                **ANY OTHER ERROR, IN GENERAL, 'UNREACHABLE
*                    BLOCK' IS INDICATED IN THE DECB, AND
*                    PROCESSING COMPLETION WILL BE SCHEDULED.
* ENTRY POINTS-
*        ENTRY POINT               FUNCTION
*        -----------               --------
*        APPCEND                   CEND
*        APPABEND                  ABEND
*
* INPUT - N/A
* OUTPUT - N/A
* EXTERNAL ROUTINES - N/A
* EXITS- 1. RETURN TO IOS VIA THE APPENDAGE RETURN VECTOR TABLE POINTED
*            TO BY REGISTER 14.  SEE THE DSECT LABELED    APPRV FOR THE
*            FORMAT OF THIS TABLE AND THE USE OF EACH EXIT.
*           USED TO CONTINUE PROCESSING.
*        2. SCHEDULE AN ASYNCHRONOUS ROUTINE - BRANCH VIA THE EXIT
*            EFFECTOR ADDRESS IN THE COMMUNICATION VECTOR TABLE.
*           USED TO SCHEDULE PROCESSING COMPLETION OR CONTINUATION.
*        3. IF THE DESIRED APPENDAGE ROUTINE IS IN PART 2, BRANCH TO
*            THAT ROUTINE VIA THE PART 2 VECTOR TABLE.  THE POINTER TO
*            THE MODULE IS IN DCBWKPT5.  SEE THE DSECT LABELED
*            IHAPART2 FOR RELATIVE ADDRESSES AND USES OF THE ROUTINES.
*
* TABLES/WORK AREAS - DECB, DCB, IOB AND EXTENTION, DCB WA (DCW), DEB,
*        CVT, PART 2 VECTOR TABLE.
*        SEE DSECTS AT END OF MODULE FOR FORMAT AND DESCRIPTIONS.
*
* ATTRIBUTES- REENTRANT. DISABLED.
* NOTES - NONE
         EJECT
* GENERAL REGISTERS ARE USED AS FOLLOWS
*
R0       EQU   0                   *    -----
R1       EQU   1                   *    12* ADDRESS
R2       EQU   2                   *    IOB
R3       EQU   3                   *    DEB
R4       EQU   4                   *    DCB
BASEXXXX EQU   5                        BASE REG FOR CLEANUP     Y02072
SAVEXXXX EQU   6                        SAVE AREA FOR CLEANUP    Y02072
R7       EQU   7                   *    UCB
R8       EQU   8                   *
R9       EQU   9                   #    WORK REGISTER
R10      EQU   10                       CHANNEL PROGRAM POINTER
R11      EQU   11                       DECB
R12      EQU   12                       WORK REGISTER
R13      EQU   13                       WORK REGISTER
R14      EQU   14                       IOS RETURN VECTOR TABLE
R15      EQU   15                       BASE REGISTER
*
*        * MEANS THIS REGISTER IS SET UP UPON ENTRY FROM IOS,
*          AND ITS CONTENTS MUST BE RESTORED UPON RETURN TO IOS
*        # MEANS THIS REGISTER MAY BE CHANGED, BUT UPON RETURN TO IOS
*          MUST CONTAIN ZEROES IN THE THREE HIGH ORDER BYTES
*
PERRMASK EQU   X'20'          TO TEST FOR PERMANENT ERROR, TEST
PERRYES  EQU   8               IOBECBAD, B2. IF OFF (CONDITION CODE 8)
PERRNO   EQU   7               THERE IS A PERM ERR. ELSE B2 ON ( CD 7)
ONE      EQU   1                        MISC OFFSETS             S20201
TWO      EQU   2                        *                        S20201
THREE    EQU   3                        *                        S20201
FOUR     EQU   4                        *                        S20201
FIVE     EQU   5                        *                        S20201
SEVEN    EQU   7                        *                        S20201
EIGHT    EQU   8                        *                        S20201
SIXTEEN  EQU   16                       *                        S20201
OFLOW    EQU   X'10'                    OVERFLOW BIT OF F BYTE   S20201
DUMMY    EQU   X'20'                    DUMMY BIT OF F BYTE      S20201
NOSPACE  EQU   X'20'                    NO-SPACE-FOUND IND      SA59778
CCOFF    EQU   X'BF'                    MASK FOR CC OFF
BYP      EQU   12                       RETURN TO IOS/BYPASS     S20201
EXCP     EQU   8                        RETURN TO IOS/EXCP       S20201
NORMAL   EQU   0                        RETURN TO IOS/NORMAL     S20201
ABENTRY  EQU   X'01'                    ABEND ENTRY INDICATOR    A50670
DATACHK  EQU   X'08'                    DATA CHECK IOB SENSE     A50670
REEXCP   EQU   8                        REEXCP RETURN TO IOS     Y02072
SKIPX    EQU   4                        SKIP RETURN TO IOS       Y02072
BYPASS   EQU   12                       BYPASS RETURN TO IOS     Y02072
FMVIOL   EQU   X'04'                    FILE MASK VIOLATION
NOTSEEK  EQU   8                        CC - SEEK TEST SENSE B0  Y02072
SEEKCHK  EQU   X'01'                    SEEK CHECK INDICATOR     Y02072
*
         USING RQE,R1                   RQE ADDRESSABILITY       Y02072
         USING IHAIOB,R2                IOB POINTER              S20201
         USING IHADEB,R3                DEB POINTER
         USING IHADCB,R4                DCB POINTER
         USING IHAWKNCP,R10             CHANNEL PROGRAM POINTER
         USING IHADECB,R11              DECB POINTER
         USING IHADCW,R12               DCB WA POINTER ONLY AS WORK REG
         SPACE 4
*                             APPENDAGE VECTOR TABLE
APP      DC    A(APPCEND-APP)           CHANNEL END     USED BY WKN
         DC    A(APPABEND-APP)          ABNORMAL END  -     USED BY WKN
APPNO    EQU   *
         USING APPCEND,R15
APPCEND  NI    IOBINDCT,X'FE'          INDICATE CEND ENTRY
         B     SETUPREG                 BRANCH TO SET UP REGISTERS
APPABEND EQU   *                                                 A50670
         USING APPABEND,R15
*                                                                A50670
*        IF THIS IS A CORRECTABLE DATA CHECK FROM AN RPS         A50670
*        DEVICE THEN RETURN TO IOS FOR ERP HANDLING              A50670
*                                                                A50670
         TM    IOBECBAD,PERRMASK        PERMANENT ERROR          A50670
         BZ    NOCDACK                  YES CONTINUE AS USUAL    A50670
         TM    IOBSENS1,FMVIOL          WAS IT A SEEK CHECK      Y02072
         BCR   NOTSEEK,R14              NO - RETURN TO ERPS      Y02072
         SPACE 3
NOCDACK  EQU   *                                                 A50670
         OI    IOBINDCT,ABENTRY         INDICATE ABEND ENTRY     A50670
SETUPREG L     R15,DEBEXPTR              GET ADDR OF DEB         S21045
*                                       EXTENSION PTR            S21045
         USING DEBEXT,R15                                        S21045
         L     R15,DEBWKPT4              R15  BASE               S21045
         DROP  R15
         USING APP,R15
*
*   SAVE IOS REGISTERS AND SET UP ADDRESSABILITY TO RETURN TO SPECIAL
*   CLEANUP ROUTINE.
*
         STM   R14,R12,0(R13)           SAVE REGISTERS           Y02072
         LR    SAVEXXXX,R13             SAVE SAVE AREA PTR       Y02072
         LA    R14,IOSRETS              RETURN TO RETURN TO IOS  Y02072
         LR    BASEXXXX,R14             BASE REG FOR RETURN      Y02072
         SPACE 2
         MODESET KEYADDR=RQEPRT,WORKREG=13 ACQUIRE USER KEY      Y02072
         SPACE 3
         L     R10,IOBCCWAD             R10  CP
         LA    R10,0(R10)               CLEAR HIGH ORDER BYTE    A49403
         MVC   IOBECBAD+1(3),IOBBCHAD+1 RESTORE ECB              A33533
         L     R11,IOBECBAD             R11  DECB
         L     R13,DEBEXPTR              GET ADDR OF DEB         S21045
*                                       EXTENSION PTR            S21045
         USING DEBEXT,R13                                        S21045
         L     R13,DEBWKPT5              R13  BASE, PART 2       S21045
         DROP  R13                                               S21045
         L     R12,IOBCSW               CSW = STOP ADDR PLUS 8
         LA    R12,0(R12)               CLEAR HIGH ORDER BYTE
         USING IHAPART2,R13
         IC    R9,IOBAPP                R9   RELATIVE ADDRESS IN
         CH    R9,TWOTHREE              IS APP CODE GT 23?     @ZA26522
         BH    INVAPPCD                 IF YES-GO PROGCHK      @ZA26522
         SLL   R9,2                            APPENDAGE TABLE
         TM    IOBINDCT,X'01'
         BO    APPABENT(R9)            IF ABEND, BRANCH VIA ABEND TABLE
         B     APPCENDT(R9)            IF CEND, BRANCH VIA THAT TABLE
         EJECT
***********************************************************************
*****              CHANNEL END APPENDAGE VECTOR TABLE             *****
***********************************************************************
APPCENDT EQU   *              CODE      FOR COMPLETION OF
         B     APPABA2   0             CP4/CP5, READ
         B     APPABA2   1             CP4/CP5, WRITE
         B     APPADB2   2             CP7
         B     APPAAB2   3             CP1 OR CP2, READ AND UPDATE
         B     APPRVNOR  4             NOT USED
         B     APPACA2   5             CP6
         B     APPRVNOR  6             NOT USED
         B     APPM67CE  7             CP1 OR CP2, WRITE KN
         B     APPN3B21
         B     APPN7B2   9             CP10A  - TRUE INSERT
         B     APPN8A2   10            CP10B  - TRUE INSERT
         B     APPN8A2   11            CP10B  - ADD TO END
         B     APPM4A2   12            CP14  - SETUPS 1, 2, OR 5
         B     APPM5A2   13            CP14  - SETUPS 3, 4, OR 6
         B     APPM1B21
         B     APPM2B2   15            CP16 - SITUATION 2
         B     APPM3B2   16            CP16 - SITUATION 3
         B     APPN9A2   17            CP17  - TRACK INDEX ONLY
         B     APPN9A2   18            CP17  - TRACK AND HIGHER LEVELS
         B     APPN9A2   19            CP17  - HIGHER LEVELS ONLY
         B     APPD1B2   20            CP11A
         B     APPD2B2   21            CP11B
         B     APPRVNOR  22            NOT USED
         B     APPN7B2   23             CP10A  - ADD TO END
         EJECT
***********************************************************************
*****             ABNORMAL END APPENDAGE VECTOR TABLE             *****
***********************************************************************
APPABENT EQU   *              CODE      FOR COMPLETION OF
         B     APPABD2   0             CP4/CP5, READ
         B     APPABD2   1             CP4/CP5, WRITE
         B     APPADE2   2             CP7
         B     APPAAA2   3             CP1 OR CP2, READ AND UPDATE
         B     APPRVNOR  4             NOT USED
         B     APPACE2   5             CP6
         B     APPRVNOR  6             NOT USED
         B     APPM67AE  7             CP1 OR CP2, WRITE KN
         B     APPN3E2   8             CP8
         B     APPN7J2   9             CP10A  - TRUE INSERT
         B     APPN8G2   10            CP10B  - TRUE INSERT
         B     APPN8G2   11            CP10B  - ADD TO END
         B     APPM4E2   12            CP14  - SETUPS 1, 2, OR 5
         B     APPM5E2   13            CP14  - SETUPS 3, 4, OR 6
         B     APPM1J2   14            CP15
         B     APPM2H2   15            CP16 - SITUATION 2
         B     APPM2H2   16            CP16 - SITUATION 3
         B     APPN9G4   17            CP17  - TRACK INDEX ONLY
         B     APPN9G4   18            CP17  - TRACK AND HIGHER LEVELS
         B     APPN9G4   19            CP17  - HIGHER LEVELS ONLY
         B     APPD3B2   20            CP11A
         B     APPD3F2   21            CP11B
         B     APPRVNOR  22            NOT USED
         B     APPN7J2   23             CP10A  - ADD TO END
         DROP  R13
         EJECT
*   SPECIAL IOS RETURN CLEANUP ROUTINE INTERCEPTS ALL RETURNS TO
*   IOS AND RESTORES REGISTERS AND SETS PROTECTION KEY TO 0.
         SPACE 2                                                 Y02072
IOSRETS  EQU   *                        RETURN POINT             Y02072
         USING *,BASEXXXX               ADDRESSABILITY           Y02072
         B     NORMRET                  NORMAL RETURN            Y02072
         B     SKIPRET                  SKIP POST RETURN         Y02072
         B     REEXCPRT                 REEXCP RETURN            Y02072
         SPACE 2
BYPASRET EQU   *                        BYPASS POST RETURN       Y02072
         BAL   R12,IOSRETX              RESTORE REGS AND KEY     Y02072
         LA    R14,BYPASS(R14)          SCHEDULE ASYNCH ROUTINE  Y02072
         L     R13,CVTPTR               CVT ADDRESSABILITY       Y02072
         USING CVT,R13                  *                        Y02072
         L     R13,CVT0EF00             ASYNCH SCHED ROUTINE     Y02072
         DROP  R13                      *                        Y02072
         BR    R13                      GO TO ROUTINE            Y02072
         SPACE 2
REEXCPRT EQU   *                        REEXCP RETURN            Y02072
         BAL   R12,IOSRETX              RESTORE REGS AND KEY     Y02072
         B     REEXCP(R14)              RETURN - REEXCP          Y02072
         SPACE 2
SKIPRET  EQU   *                        RETURN - SKIP            Y02072
         BAL   R12,IOSRETX              RESTORE REGS AND KEY     Y02072
         B     SKIPX(R14)               RETURN - SKIP            Y02072
         SPACE 2
NORMRET  EQU   *                        RETURN - NORMAL          Y02072
         BAL   R12,IOSRETX              RESTORE REGS AND KEY     Y02072
         BR    R14                      RETURN                   Y02072
         SPACE 2
IOSRETX  EQU   *                        RESTORE REGS AND KEY     Y02072
         MODESET KEYADDR=KEY0,WORKREG=13   SET KEY = 0           Y02072
         SPACE 2
         LM    R14,R11,0(SAVEXXXX)      RESTORE REGISTERS        Y02072
         BR    R12                      RETURN                   Y02072
         DROP  BASEXXXX                 RESET ADDRESSABILITY     Y02072
         SPACE 2                                                 Y02072
KEY0     DC    H'0'                     KEY 0                    Y02072
         EJECT                                                   Y02072
*              CHANNEL  END CP8,    APPENDAGE CODE  8,         CHART N3
APPN3B2  EQU   *                        *
*
         LA    R13,CB8A+EIGHT           DID CHANNEL PROGRAM END ON
         CLR   R12,R13                  CB8A
         BNE   APPAOS22                 NO, CONTINUE
         TM    CB8A+FIVE,CC             WAS CB8A CHAINED
         BZ    APPAOS22                 NO, CP UNCHANGED
         NI    CB8A+FIVE,CCOFF          RESET CHAIN IND.
         OI    CB8A+FOUR,CC             TURN CC BACK ON
         CLI   CB12,SEEKHH              CB12 SET FOR HEAD SEEK
         BNE   APPN3F3                  NO,  FILE PROTECT
         LA    R13,CB16                 RESET IOBSTART
         ST    R13,IOBSTART-ONE         START CP WITH SETSECT
         MVC   IOBDADAD,CB10+SEVEN      RESET IOBSEEK
         B     APPRVXCP                 SECHDULE EXCP IOS RETURN
APPAOS22 EQU   *                        *
*
         LA    R13,CB21+EIGHT           DID CHAN PROG STOP AT CB21
         CLR   R12,R13                  BE MEANS YES, BNE MEANS NO
         BNE   APPN3A3                  NO - CHECK FOR LENGTH ERROR
         TM    CB11+7,X'08'             TEST IF TRACK IS SHARED
         L     R12,DCBWKPT2             CREATE PROPER 'R' IN DCWHIRPS
         BO    APPN3C2A                 BO IF SHARED
         MVC   DCWHIRPS,DCBHIRPD        UNSHARED - USE DCBHIRPD
         B     APPN3C2B
APPN3C2A MVC   DCWHIRPS,DCBHIRSH        SHARED   - USE DCBHIRSH
APPN3C2B EQU   *                        *                        S20201
APPN3C2D MVC   IOBDADAD+3(5),CB23+3     MOVE CB23 CCHHR TO IOB
         MVI   IOBAPP,X'14'             SET APPENDAGE CODE TO 20
         OI    IOBFLAG1,X'C0'           USE DATA AND COMMAND CHAINING
         LA    R13,CC1                  START AT CC1
         ST    R13,IOBSTART-1
         L     R12,DCBWKPT2
         OI    DCWWKNI,X'04'            SET ON CP11A FIRST TIME SW
         LA    R13,IOBDADAD+3           PUT IOB ADDRESS IN CC1 AND CC4
         ST    R13,CC1
         MVI   CC1,X'31'
         MVC   CC4(4),CC1
         NI    IOBINDCT,X'FF'-LASTIND   FLAG NORMAL USE OF CP11A A31323
*
*        TEST FOR OUT OF SPACE CONDITION
*
         TM    DCBOPTCD,X'08'          CYL OVFL OPTION           A31323
         BZ    APPNSC                  IF NO-BRANCH              A31323
         CLI   CB22+5,X'00'            CYL OVFL FULL             A31323
         BNE   APPRVXCP                IF NO-BRANCH              A31323
APPNSC   TM    DCBOPTCD,X'10'          INDEP OVFL OPTION         A31323
         BZ    APPNSE                  IF NO-BRANCH              A31323
*      ADJUST DCBRORG2 TO ZERO IF IND OVFL IS FULL              SA53815
         LH    R13,DCBRORG2             LAST UNFILLED IOV TRK?  SA53815
*
         LTR   R13,R13                  ANY IND OVRFLOW TRKS    SA65051
         BZ    APPNSD                   BRANCH IF NO            SA65051
         BCT   R13,APPRVXCP             NO - BR TO READ BLOCK   SA53815
*                                       YES - CONTINUE          SA53815
APPNSD   IC    R13,DCBLIOV+7            GET LIOV (REC NO.)      SA65051
         LA    R13,1(R13)               BUMP REC NO.            SA53815
         SR    R12,R12                  CLEAR REG               SA53815
         IC    R12,DCBHIIOV             GET HIGHEST REC. NO.    SA53815
         CLR   R13,R12                  LIOV+EOF FILLS LAST TRK?SA53815
         BNE   APPRVXCP                 NO - BR TO READ BLOCK   SA53815
*                                       YES - CONTINUE          SA53815
         SR    R13,R13                  REDUCE NUMBER OF -      SA53815
         STH   R13,DCBRORG2             IND OVFL TRKS TO ZERO   SA53815
APPNSE   CLC   IOBDADAD(7),DCBLPDA      ON LAST TRK OF DATA SET  A31323
         BNE   APPNSG                   NO, BRANCH               A31323
         TM    DCBST,X'03'              IS LAST TRACK FULL       A31323
         BNO   APPRVXCP                 NO, BR--SPACE IS AVAIL   A31323
APPNSG   TM    DCBOPTCD,X'02'           WAS DELETE OPTION TAKEN  A31323
         BO    APPNSI                   YES, BR--RD LAST BLK TO  A31323
*
*        CHECK FOR DELETED RECORDS.  OTHERWISE, SET NO SPACE FND
*
         OI    DECBEXC1,X'20'           THEN READ DESIRED BLK    A31323
         B     APPRVXCP                 TO CHECK FOR DUP REC.    A31323
APPNSI   OI    IOBINDCT,LASTIND         WILL CHECK LAST RECORD   A31323
         L     R12,DCBWKPT2             RESTORE WORK AREA BASE   A31323
         USING IHADCW,R12                                        A31323
         MVC   IOBDADAD+7(1),DCWHIRPS   SET R TO LAST ON TRK     A31323
         B     APPRVXCP                 CHK RECORD FOR DELETION  A31323
APPNOB3  TM    DECBEXC1,NOSPACE         OUT OF SPACE?           SA59778
         BO    APPN3B1                  YES, GO ASYN RETURN     SA59778
APPN3B3  OI    DECBEXC1,X'04'           RECORD IS UNREACHABLE
APPN3B1  L     R3,RQEDEB                RESTORE DEB POINTER      Y02072
         LA    R3,0(R0,R3)              RESTORE DEB POINTER      A31323
APPN3B4  MVI   IOBASYN,X'08'            SCHEDULE PROCESSING COMPLETION
APPN3B5  B     BYP(R14)                 SCHEDULE ASYNCH ROUTINE  Y02072
         SPACE 5
APPN3B6  LA    R13,CB8A+EIGHT           DID CP STOP AT CB8A      S20201
         CLR   R12,R13                  COMPARE REGS             S20201
         BNE   APPN3B3                  NO, UNREACHABLE BLOCK    S20201
         TM    CB11+SEVEN,OFLOW+DUMMY   OFLO, INACTIVE, OR DUMMY S20201
         BNZ   APPN3F3                  YES, GO TO FILE PROTECT  S20201
         MVC   CB23+THREE(FOUR),CB11+TWO  SET UP CCHH            S20201
         MVI   CB23+SEVEN,ONE           SET R EQUAL TO 1         S20201
         B     APPN3C2D                 GO READ RECORD           S20201
         EJECT
*              ABNORMAL END CP8,    APPENDAGE CODE  8,         CHART N3
APPN3E2  EQU   *                                                  19374
         TM    IOBSENSE+1,X'04'         WAS ABEND DUE TO          15924
*                                       FILE PROTECT              15924
         BO    APPN3F2                  YES--BRANCH               19374
         TM    IOBECBAD,PERRMASK        PERMANENT ERROR?          19374
         BC    PERRYES,APPN3B3          YES--BRANCH               19374
         B     APPRVNOR                 NO--RETRY CHANNEL PGM     19374
APPN3F2  LA    R13,CB12+8               DID CHAN PROG STOP AT CB12
         CLR   R12,R13                  BE MEANS YES, BNE MEANS NO
         BNE   APPN3B3                  NO - RECORD IS UNREACHABLE
APPN3F3  TM    CB11+SEVEN,OFLOW         WAS OFLO TRK IX ENTRY RD S20201
         BZ    APPN3G3                  BZ IF NO                 S20201
         TM    CB11+SEVEN,DUMMY         DUMMY OR INACTIVE        S20201
         BO    APPN3G3                  BO IF NO
         MVC   CJ11(7),IOBDADAD         SAVE TRK INDEX MBBCCHH
         MVI   IOBAPP,X'10'             SET APPENDAGE CODE TO 16
         NI    IOBFLAG1,X'7F'           DONT USE DATA CHAINING
         OI    IOBFLAG1,X'40'           USE COMMAND CHAINING
         LA    R13,CJ1                  START AT CJ1
         ST    R13,IOBSTART-1
         MVC   IOBDADAD,CB10+7          PUT CB10 MBBCCHHR IN IOB
         LA    R13,IOBDADAD+3           PUT SEEK ADDRESS IN CJ1 AND CJ5
         IC    R9,CJ1
         ST    R13,CJ1
         STC   R9,CJ1
         MVC   CJ5+ONE(THREE),CJ1+ONE   MOVE IN ADDR OF SEEK     S20201
         MVC   CJ3+ONE(THREE),DECBKEY+ONE  MOVE IN ADDR OF KEY   S20201
         MVC   CJ7+ONE(THREE),DECBKEY+ONE  MOVE IN ADDR OF KEY   S20201
         L     R12,DCBWKPT2             SET ON FIRST TIME ONLY SWITCH
         USING IHADCW,R12                                        S20201
         OI    DCWWKNI,X'40'
         LA    R12,0(R0,R0)             IS FIRST OFLO ON SAME MODULE
         IC    R12,CB10+7                      GET M OF OFLO ENTRY
         SLL   R12,4(R0)                       MULT BY 16
         L     R12,32(R12,R3)                  LOAD UCB ADDR FROM DEB
         LA    R12,0(R0,R12)                   COMP WITH UCB AD IN 7
         CR    R12,R7
         BE    APPRVXCP                 SAME MODULE - EXCP RTRN TO IOS
         MVI   IOBASYN,X'01'            DIFFERENT MODULE - MUST EXCP
         B     APPN3B5                   IN ASYNCHRONOUS ROUTINE
APPN3A3  TM    IOBCSW+5,X'40'           DID CHAN PROG HAVE LENGTH ERROR
         BZ    APPN3B6                  GO TEST FOR SPECIAL CASE S20201
         TM    CB11+7,X'30'             WAS ENTRY INACTIVE
         BO    APPN3B3                  BO IF YES
APPN3G3  TM    CB11+7,X'20'             VERIFY ADD-TO-END SITUATION
         BZ    APPN3B3                  BZ IF DUMMY OR INACTIVE
         CLI   DCBNLEV,X'00'            ERROR IF 2 OR MORE INDEX LEVELS
         BNE   APPN3B3                  BNE IF MORE THAN 1 INDEX LEVEL
         TM    CB11+7,X'08'             TEST IF TRACK IS SHARED
         L     R12,DCBWKPT2             CREATE PROPER 'R' IN DCWHIRPS
         USING IHADCW,R12               ESTABLISH ADDRESSABILITY S20201
         BO    APPN3G33                 BO IF SHARED
         MVC   DCWHIRPS,DCBHIRPD        UNSHARED - USE DCBHIRPD
         B     APPN3G5
APPN3G33 MVC   DCWHIRPS,DCBHIRSH        SHARED   - USE DCBHIRSH
APPN3G5  MVI   IOBAPP,X'0E'             SET APPENDAGE CODE TO 14
         MVC   IOBDADAD(3),DCBLPDA      SEEK TO DCBLETI'S CYLINDER
         MVC   IOBDADAD+3(4),DCBLETI    CCHH
         OC    IOBDADAD+6(1),DCBFIRSH+3
         XC    IOBDADAD+6(1),DCBFIRSH+3 REDUCE TO TRK BNDRY OR ZERO
         MVI   IOBDADAD+7,0
         LA    R12,CI1                  START AT CI1
         ST    R12,IOBSTART-1
         NI    IOBFLAG1,X'7F'           DON'T USE DATA CHAINING
         OI    IOBFLAG1,X'40'           USE COMMAND CHAINING
         LA    R12,IOBDADAD+3           PUT SEEK ADDRESS IN CI1
         IC    R9,CI1
         ST    R12,CI1
         STC   R9,CI1
         MVC   CI5+TWO(FIVE),DCBLETI    PUT DCBLETI CCHHR IN CI5 S20201
         MVC   CI5(TWO),DCBLPDA+ONE     MOVE IN BB FOR HEAD SEEK S20201
         B     APPRVXCP
         EJECT
*              CHANNEL  END CP11A,  APPENDAGE CODE 20,         CHART D1
APPD1B2  LA    R13,CC2A+8               DID CHAN PROG END AT CC2A
         CLR   R12,R13
         BE    APPD1B3                  YES
         LA    R13,CC3+8                DID CHAN PROG STOP AT CC3
         CLR   R12,R13
         BNE   APPN3B3                  NO
APPD1B3  L     R12,DCBWKPT2
         USING IHADCW,R12                                        S20201
         TM    DCWWKNI,X'10'            WAS CP11A USED FOR ADD-TO-END
         BO    APPD1A4                  BO IF YES
         TM    DCWWKNI,X'04'
         BO    APPD1D2                  BO FIRST TIME THROUGH
         TM    IOBCSW+4,X'01'           DID CHAN PROG END WITH EOF
         BZ    APPD1H2                  BZ IF NO
         TM    DCBST,X'02'              IS LAST BLOCK FULL
         BO    APPD1D4                  BO IF YES
         L     R12,DCBMSWA              POINT TO W
         AH    R12,CC6+6                POINT TO W+IL+AL
         SH    R12,DCBLRECL             POINT TO W+IL+AL-RL
         BAL   R13,APPPAD10             IS IT PADDING
         B     APPN3B4                  YES - SCHEDULE COMPLETION
         OI    DCBST,X'02'              NO - SET ON LAST BLOCK FULL SW
         B     APPN3B4
*        REGISTERS  3 AND 10 MUST NOW BE DESTROYED
APPD1A4  L     R12,CC3                  SEND ADDRESS = W + IL + RL
         LA    R12,0(R0,R12)
         LR    R13,R12
         SH    R13,DCBLRECL             RCV  ADDRESS = W + IL
APPD1A42 BAL   R3,APPMOV10              MOVE RECORD DOWN 1 SLOT
*
*                       GIVE UNREACHABLE BLOCK CONDITION IF NO KEY
*                       IN BLOCK READ IS HIGHER THAN KEY TO BE
*                       ADDED
*
         L     R10,IOBCCWAD             GET CP ADDRESS AGAIN      24080
         L     R3,CC3                   ADDRESS OF BLOCK READ     24080
         LA    R3,0(0,R3)                                         24080
         AH    R3,DCBBLKSI              ADDRESS OF END OF BLOCK   24080
         CR    R12,R3                   NEXT LRECL TO BE MOVED VS 24080
*                                       END OF BLOCK
         BNL   APPN3B3                  BRANCH IF BEYOND END     A31323
         LH    R3,DCBRKP                POINT TO SEND   AREA'S KEY
         AR    R3,R12
         L     R10,DECBKEY
         LA    R10,0(R0,R10)            POINT TO INSERT AREA'S KEY
         IC    R9,DCBKEYLE
         BCTR  R9,R0                    COMPARE KEYLE BYTES
         EX    R9,APPD1A44              IS SEND AREA PADDING
         BH    APPD1A42                 BH IF NO, TO LOOP
         L     R12,DECBAREA
         LA    R12,16(R0,R12)           SEND ADDRESS = AREA + 16
         BAL   R3,APPMOV10              MOVE NEW RECORD INTO BLOCK
         L     R3,RQEDEB                RESTORE DEB POINTER      Y02072
         LA    R3,0(R0,R3)              RESTORE DEB POINTER
         L     R10,IOBCCWAD             RESTORE CP8 POINTER
         L     R12,DECBKEY
         LA    R12,0(R0,R12)            POINT TO INSERT AREA'S KEY
         L     R13,DCBMSWA              POINT TO BLOCK  AREA'S KEY
         IC    R9,DCBKEYLE
         BCTR  R9,R0                    MOVE KEYLE BYTES
         EX    R9,APPD1B52              MOVE INSERT KEY TO BLOCK KEY
         B     APPD1H5
APPD1A44 CLC   0(0,R10),0(R3)           INSERT KEY VS. SEND KEY
APPD1B52 MVC   0(0,R13),0(R12)          INSERT KEY TO BLOCK KEY
APPD1D2  L     R13,CC3                  GET ADDR OF BLOCK READ   A31323
         LA    R13,0(R0,R13)            CLEAR HIGH BYTE          A31323
         AH    R13,DCBBLKSI             POINT TO END OF BLOCK    A31323
         SH    R13,DCBLRECL             POINT TO LAST RECORD     A31323
         TM    IOBINDCT,LASTIND         WAS THE LAST BLK RD      A31323
         BZ    APPD1D3                  NO, BRANCH TO CONTINUE   A31323
         NI    IOBINDCT,X'FF'-LASTIND   TURN OFF BIT             A31323
         CLI   0(R13),X'FF'             IS THIS RECORD DELETED   A31323
         BNE   APPN4B50                 NO, BR--SPACE NOT AVAIL  A31323
         BAL   R13,COMPLDT              YES, SPACE MAY BE AVAIL  A31323
*
*        RETURN HERE IF RECORD MUST BE BUMPED.  RETURN HERE + 4
*        (AFTER THE NEXT INSTRUCTION) IF RECORD NEED NOT GO INTO
*        OVERFLOW.
*
APPN4B50 OI    DECBEXC1,X'20'           SPACE IS NOT AVAILABLE   A31323
APPD1E3  CLC   DCWHIRPS(1),CB23+7       IS THIS THE DESIRED BLK  A31323
         BE    APPD1D2                  YES, BRANCH              A31323
         MVC   IOBDADAD+7(1),CB23+7     NO, SEEK TO CORRECT BLK  A31323
         B     APPRVXCP                 GO READ IT IN            A31323
APPD1D3  NI    DCWWKNI,X'FB'            SET OFF FIRST TIME SW    A31323
         SH    R13,DCBBLKSI             RESTORE REG 13           A31323
         LR    R12,R13                                           A31323
         AH    R12,DCBLRECL                                      A31323
*
*        SEND ADDRESS (R12) IS W + LRECL + KL.
*        RECEIVE ADDRESS (R13) IS W + KL.
*
APPD1E2  LH    R3,DCBRKP                POINT TO SEND   AREA'S KEY
         AR    R3,R12
         L     R10,DECBKEY
         LA    R10,0(R0,R10)            POINT TO INSERT AREA'S KEY
         IC    R9,DCBKEYLE
         BCTR  R9,R0                    COMPARE KEYLE BYTES
         EX    R9,APPD1A44              UPDATE, INSERT, OR LOOP
         BL    APPD1F2                  INSERT
         BE    APPD1E1                  UPDATE
*
         BAL   R3,APPMOV10              MOVE RECORD
*
*                       GIVE UNREACHABLE BLOCK CONDITION IF NO KEY
*                       IN BLOCK READ IS HIGHER THAN KEY TO BE
*                       ADDED
*
         L     R10,IOBCCWAD             GET CP ADDRESS AGAIN      24080
         L     R3,CC3                   ADDRESS OF BLOCK READ     24080
         LA    R3,0(0,R3)                                         24080
         AH    R3,DCBBLKSI              ADDRESS OF END OF BLOCK   24080
         CR    R12,R3                   NEXT LRECL TO BE MOVED VS 24080
*                                       END OF BLOCK
         BNL   APPNOB3                  BRANCH IF BEYOND END    SA59778
         B     APPD1E2                  CHECK AGAIN
APPD1F2  TM    DECBEXC1,X'20'           WAS NO SPACE AVAIL       A31323
         BO    APPN3B1                  YES, POST REQ IN ERROR   A31323
         L     R12,DECBAREA                                      A31323
         LA    R12,16(R0,R12)           SEND ADDRESS = AREA + 16
         BAL   R3,APPMOV10              MOVE AREA + 16 INTO BLOCK
         L     R3,RQEDEB                RESTORE DEB POINTER      Y02072
         LA    R3,0(R0,R3)              RESTORE DEB POINTER
         L     R10,IOBCCWAD             RESTORE CP8 POINTER
         NI    CC5+4,X'7F'              SET OFF REPL-OF-DEL FLAG
APPD1H2  CLC   IOBDADAD,DCBLPDA         WAS THE SEEK TO LAST RCD
         BNE   APPD1J3                  BNE IF NO
         TM    DCBST,X'02'              IS LAST BLOCK FULL
         BO    APPD1J3                  BRANCH IF YES
APPD1H5  L     R12,DCBNREC           H5 ADD 1 TO NUMBER OF PRIME DATA
         LA    R12,1(0,R12)              RECORDS - A LOGICAL RECORD
         ST    R12,DCBNREC               WILL REPLACE A PADDING RECORD.
         B     APPD1J4
APPD1J3  L     R13,DCBMSWA              POINT TO BLOCK'S KEY
         LR    R12,R13
         AH    R12,CC6+6
         SH    R12,DCBLRECL
         AH    R12,DCBRKP               POINT TO NEXT-TO-LAST KEY
         IC    R9,DCBKEYLE
         BCTR  R9,R0                    MOVE KEYLE BYTES
         EX    R9,APPD1B52              KEY OF NEXT-TO-LAST TO BLOCK'S
APPD1J4  LA    R12,CC4                  START AT CC4
         ST    R12,IOBSTART-1
         NI    IOBFLAG1,X'7F'           DONT USE DATA CHAINING
         OI    IOBFLAG1,X'40'           USE COMMAND CHAINING
         MVI   IOBAPP,X'15'             SET APPENDAGE CODE TO 21
         B     APPRVXCP                 EXCP RETURN TO IOS
APPD1E1  TM    DCBOPTCD,X'02'           WAS DELETE OPTION TAKEN
         BO    APPD1F1                  BO IF YES
APPD1D1  OI    DECBEXC1,X'01'           RECORD IS A DUPLICATE
         B     APPN3B1                  SCHEDULE COMPLETION      A31323
APPD1F1  CLI   0(R12),X'FF'             IS RECORD IN BLOCK DELETED
         BNE   APPD1D1                  BNE IF NO
         NI    DECBEXC1,X'DF'                                    A38857
         L     R12,DECBAREA
         LA    R12,16(R0,R12)           SEND ADDRESS = AREA +16
APPD1H1  BAL   R3,APPMOV10              MOVE AREA + 16 INTO BLOCK
         L     R3,RQEDEB                RESTORE DEB POINTER     Y02072
         LA    R3,0(R0,R3)
         L     R10,IOBCCWAD             RESTORE CCW POINTER
         L     R12,DCBMSWA
         AH    R12,CC6+6                POINTER TO LAST RECORD
         CLR   R12,R13                  HAS IT BEEN FILLED
         BE    APPD1J1                  BE IF YES
         LR    R12,R13
         AH    R12,DCBLRECL             RE-CREATE SEND POINTER
         B     APPD1H1                  MOVE UNTIL BLOCK IS DONE
APPD1J1  OI    CC5+4,X'80'              SET ON REPL-OF-DEL FLAG
         B     APPD1H2
APPD1D4  L     R12,CC3
         LA    R12,0(R0,R12)            START PADDING AT 2D RECORD
         L     R13,DCBMSWA
         AH    R13,CC6+6                STOP AT LAST RECORD
         CLR   R12,R13                  IS PADDING NECESSARY      12244
         BE    APPD1D5                  NO--BRANCH (1 REC/BLOCK)  12244
APPD1D42 MVI   0(R12),X'FF'             PAD BLOCK REMAINDER
         LA    R12,1(R0,R12)            INCREMENT INDEX
         CLR   R12,R13
         BL    APPD1D42                 BL IF LOOP COMPLETE
         NI    DCBST,X'FD'              LAST BLOCK NOT FULL       12244
APPD1D5  EQU   *                                                  12244
         L     R13,DCBMSWA              POINT TO BLOCK'S KEY
         LR    R12,R13
         IC    R9,DCBKEYLE
         AR    R12,R9
         AH    R12,DCBRKP               POINT TO FIRST KEY
         BCTR  R9,R0                    MOVE KEYLE BYTES
         EX    R9,APPD1B52              MOVE FIRST KEY TO BLOCK'S KEY
         LA    R12,CB46                 START AT CB46
         ST    R12,IOBSTART-1
         OI    IOBFLAG1,X'C0'           USE DATA AND COMMAND CHAINING
         LA    R12,IOBDADAD+3           PUT IOB ADDRESS IN CB46
         STH   R12,CB46+2
         SRL   R12,16
         STC   R12,CB46+1
         MVC   CB49+1(3),DCBMSWA+1      PUT KEY ADDRESS IN CB49
         L     R12,DCBMSWA
         AH    R12,CC2A+6
         ST    R12,CB50                 PUT DATA ADDRESS IN CB50
         MVC   CB51(5),IOBDADAD+3       PUT IOB CCHHR IN CB51
         IC    R9,IOBDADAD+7             DECREASING R IN IOB BY 1
         BCTR  R9,R0
         STC   R9,IOBDADAD+7
         MVI   IOBAPP,X'09'             SET APPENDAGE TO 9
         B     APPRVXCP                 EXCP RETURN TO IOS
         SPACE 5
*              TEST FOR PADDING SUBROUTINE
*
* ENTRY  LA    12,FIRSTPOS    FIRSTPOS = LOGICAL RECORD FIRST BYTE
*        BAL   13,APPPAD10
*
* DESTROYS     REGISTERS 9 (ONE BYTE), 12, 13 DESTRUCTIVELY
*              REGISTER 11, BUT RESTORES IT TO IOBECBAD
*
* RETURNS      TO BAL INSTRUCTION PLUS FOUR BYTES IF PADDING
*              TO BAL INSTRUCTION PLUS EIGHT BYTES IF NO
*
APPPAD10 CLI   0(R12),X'FF'             TEST FIRST BYTE FOR ALL ONES
         BNE   APPPAD40                 BRANCH IF BLOCK IS FULL
         LH    R11,DCBLRECL             PLACE RECORD LENGTH IN REG 11
         LA    R9,255(R0,R0)            PLACE 255 IN REG 9
         LH    R11,DCBLRECL             PLACE RECORD LENGTH IN IR 11
         BCTR  R11,R0                   LRECL MINUS ONE COMPARES REQD
APPPAD20 CLR   R11,R9                   LENGTH REMAINDER MORE THAN 255
         BNH   APPPAD30                 NO - NO MORE LOOPING
         CLC   0(255,R12),1(R12)        COMPARE 255 BYTES
         BNE   APPPAD40                 NOT PADDING
         SR    R11,R9                   REDUCE LENGTH REMAINDER BY 255
         AR    R12,R9                   INCREASE INDEXING BY 255
         B     APPPAD20                 LOOP
APPPAD30 BCTR  R11,R0                   ADJUST FOR MACHINE LANGUAGE
         EX    R11,APPPAD60             COMPARE 255 OR FEWER BYTES
         BE    APPPAD50                 PADDING
APPPAD40 LA    R13,4(R0,R13)            MODIFY RETURN FOR NOT PADDING
APPPAD50 L     R11,IOBECBAD             RESTORE REGISTER 11
         BR    R13                      RETURN
APPPAD60 CLC   0(0,R12),1(R12)          EXECUTED COMPARE
         EJECT
*              GENERALIZED MOVE OF LOGICAL RECORD SUBROUTINE
*
* ENTRY  LA    12,SENDADDR    SENDADDR = SEND ADDRESS FIRST BYTE
*        LA    13,RCVADDR     RCVADDR = RECEIVE ADDRESS FIRST BYTE
*        BAL   3,APPMOV10
*
* DESTROYS     REGISTER 9 (ONE BYTE), REGISTERS 3, 10, 12, 13
*
* AT EXIT      REGISTER 3 CONTAINS RETURN ADDR
*              REGISTER 9 CONTAINS X'FF' IN LOW-ORDER BYTE
*              REGISTER 10 CONTAINS A VARIABLE QUANTITY, LESS THAN 256
*              REGISTER 12 CONTAINS SENDADDR + DCBLRECL
*              REGISTER 13 CONTAINS RCVADDR + DCBLRECL
*
* RETURNS      TO BAL INSTRUCTION PLUS FOUR BYTES
*
APPMOV10 LA    R9,255(R0,R0)            PLACE 255 IN REG 9
         LH    R10,DCBLRECL             PLACE RECORD LENGTH IN REG 10
         BCTR  R10,R0                   MOVE LRECL BYTES
APPMOV20 CLR   R10,R9                   COMPARE LENGTH REMAINDER TO 255
         BNH   APPMOV30                 BRANCH LAST TIME
         MVC   0(255,R13),0(R12)        MOVE 255 BYTES
         SR    R10,R9                   REDUCE LENGTH REMAINDER BY 255
         AR    R12,R9                   INCREASE SEND INDEXING BY 255
         AR    R13,R9                   INCREASE RCV INDEXING BY 255
         B     APPMOV20                 LOOP
APPMOV30 EX    R10,APPMOV40             MOVE 255 OR FEWER BYTES
         LA    R12,1(R12,R10)           UPDATE INDEXING BY 255 OR LESS
         LA    R13,1(R13,R10)           UPDATE INDEXING BY 255 OR LESS
         BR    R3                       RETURN FROM SUB-ROUTINE
APPMOV40 MVC   0(0,R13),0(R12)          LENGTH, RCV ADDR, SEND ADDR
         EJECT
*              CHANNEL  END CP11B,  APPENDAGE CODE 21,         CHART D2
APPD2B2  LA    R13,CC6+8                DID CHAN PROG STOP AT CC6
         CLR   R12,R13
         BNE   APPN3B3                  NO   N3B3
         L     R12,DCBWKPT2             WAS CP11B USED FOR ADD-TO-END
         USING IHADCW,R12                                        S20201
         TM    DCWWKNI,X'10'
         BO    APPD2A3                  YES  D2
         TM    CC5+4,X'80'              WAS REPL OF DELE FLAG ON
         BO    APPN3B4                  YES  N3B4
         CLC   DCWHIRPS,IOBDADAD+7      DOES R IN IOB EQUAL DCWHIRPS
         BNE   APPD2D3                  NO   D3
         CLC   DCBLPDA,IOBDADAD         WAS SEEK TO LAST RCD OF DATASET
         BE    APPD2F3                  YES  F3
APPD2G2  EQU   *
         TM    DCBOPTCD,X'02'           WAS DELETE OPTION TAKEN
         BZ    APPD2G3                  NO   G3
         LH    R12,CC6+6                IS LAST RCD IN W TO BE DELETED
         L     R13,DCBMSWA
         AR    R12,R13
         CLI   0(R12),X'FF'
         BNE   APPD2G3                  NO   G3
         BAL   R13,COMPLDT              SEE IF MUST BUMP RECORD  A31323
         B     APPD2G3                  YES, RETURN HERE         A31323
*        NO, RETURN HERE
         MVC   IOBDADAD+5(3),CB23       MOVE CB23 CCHHR TO IOB
         MVI   IOBAPP,X'11'             SET APPENDAGE CODE TO 17
         OI    IOBFLAG1,X'C0'           USE DATA AND COMMAND CHAINING
         LA    R12,CK1                  START AT CK1
         ST    R12,IOBSTART-1
         LA    R12,IOBDADAD+3           PUT IOB ADDRESS IN CK1 AND CK4
         ST    R12,CK1
         MVI   CK1,X'31'
         MVC   CK4(4),CK1
         L     R12,CC6                  PUT NEXT-TO-LAST RCD'S KEY
         LA    R12,0(R0,R12)             ADDRESS IN CK6
         AH    R12,CC6+6
         AH    R12,DCBRKP
         SH    R12,DCBLRECL
         STH   R12,CK6+2
         SRL   R12,16
         STC   R12,CK6+1
         B     APPRVXCP
APPD2A3  L     R12,DCBMSWA              POINT TO NEXT-TO-LAST RCD IN W
         AH    R12,CC6+6
         SH    R12,DCBLRECL
         BAL   R13,APPPAD10             IS IT PADDING
         BE    APPD2A5                  YES - BLOCK IS NOT FULL
         OI    DCBST,X'02'              SET ON LAST BLOCK FULL SW
         B     APPD2C1
APPD2A5  MVI   IOBAPP,X'12'             SET APPENDAGE CODE TO 18
         OI    IOBFLAG1,X'C0'           USE DATA AND COMMAND CHAINING
         LA    R12,CK1                  START AT CK1
         ST    R12,IOBSTART-1
         MVC   IOBDADAD+3(5),DCBLETI    PUT DCBLETI CCHHR IN IOB
         MVC   IOBDADAD(3),DCBLPDA
         LA    R12,IOBDADAD+3           PUT IOB ADDRESS IN CK1 AND CK4
         ST    R12,CK1
         MVI   CK1,X'31'
         MVC   CK4(4),CK1
         MVC   CK6+1(3),DECBKEY+1       PUT KEY ADDRESS IN CK6
         B     APPRVXCP                 EXCP RETURN TO IOS
APPD2D3  IC    R9,IOBDADAD+7            ADD 1 TO R IN IOB
         LA    R12,1(R0,R9)
         STC   R12,IOBDADAD+7
         NI    IOBFLAG1,X'7F'           DONT USE DATA CHAINING
         OI    IOBFLAG1,X'40'           USE COMMAND CHAINING
         MVI   IOBAPP,X'14'             SET APPENDAGE CODE TO 20
         LA    R12,CC1                  START AT CC1
         ST    R12,IOBSTART-1
         L     R12,DCBMSWA              MOVE LAST LOGICAL RCD TO W+IL
         AH    R12,CC6+6
         L     R13,DCBMSWA
         IC    R9,DCBKEYLE
         LA    R13,0(R9,R13)
         BAL   R3,APPMOV10
         L     R3,RQEDEB                RESTORE DEB POINTER      Y02072
         LA    R3,0(R0,R3)
         B     APPRVXCP                 EXCP RETURN TO IOS
APPD2F3  TM    DCBST,X'02'              IS LAST BLOCK FULL
         BO    APPD2G2                  YES  G2
         L     R12,DCBMSWA              TEST NEXT-TO-LAST RCD IN W
         AH    R12,CC6+6
         SH    R12,DCBLRECL
         BAL   R13,APPPAD10             IS IT PADDING
         BE    APPN3B4                  YES - SCHEDULE COMPLETION
         OI    DCBST,X'03'              SET ON LAST BLK AND TRK FULL SW
         B     APPN3B4
APPD2G3  EQU   *                                                 A37184
         L     R13,DECBAREA
         LA    R13,16(R0,R13)
*
         LR    R12,R4                   SAVE DCB ADDRESS         Y02072
         LR    R3,R14                   SAVE REG FOR IOS RETURN  Y02072
         L     R4,RQEDEB                ADDR OF CURRENT DEB      Y02072
         L     R4,0(R4)                 ADDR OF CURRENT TCB      Y02072
         LR    R8,R15                   SAVE BASE ADDRESS        Y02072
         LR    R9,R1                    SAVE RQE ADDRESS         Y02072
         LR    R10,R2                   SAVE IOB ADDRESS         Y02072
         SR    R2,R2                    IND. NO RANGE FOR TEST   Y02072
         LR    R1,R13                   ADDR TO BE VALIDATED     Y02072
         SPACE 2
         MODESET  KEYADDR=KEY0,WORKREG=15  SET PROTECTION KEY 0  Y02072
         SPACE 2
         L     R15,CVTPTR               ADDR OF CVT              Y02072
         USING CVT,R15                  CVT ADDRESSABILITY       Y02072
         L     R15,CVT0VL00             ADDR OF VALIDATION RTN   Y02072
         DROP  R15                      END USING ON CVT         Y02072
         SPACE 1
         BALR  R14,R15                  VALIDATE ADDR            Y02072
         SPACE 1
         LR    R1,R9                    RESTORE RQE ADDRESS      Y02072
         LR    R2,R10                   RESTORE IOB ADDRESS      Y02072
         LR    R4,R12                   RESTORE DCB ADDRESS      Y02072
         LR    R14,R3                   RESTORE IOS RETURN ADDR  Y02072
         LR    R15,R8                   RESTORE BASE ADDRESS AND Y02072
         USING APP,R15                  MODULE ADDRESSABILITY    Y02072
         SPACE 2
         MODESET  KEYADDR=RQEPRT,WORKREG=10  SET USER'S KEY      Y02072
         SPACE 2
         BZ    OKAREA                   B IF VALID TO CONTINUE   A37184
         OI    DECBEXC1,X'10'           SET INVALID REQUEST      A37184
         B     APPN3B1                  BR TO SCHED ASYNC        A37184
OKAREA   EQU   *                                                 A37184
         L     R10,IOBCCWAD             *                        M0060
         L     R12,DCBMSWA              MOVE LAST RCD IN W TO    A37184
         AH    R12,CC6+6                       AREA + 16         A37184
         BAL   R3,APPMOV10
         L     R3,RQEDEB                RESTORE DEB POINTER      Y02072
         LA    R3,0(R0,R3)              RESTORE CP8 POINTER
         L     R10,IOBCCWAD                  RESTORE 10
         L     R12,DCBMSWA
         AH    R12,CC6+6
         AH    R12,DCBRKP
         SR    R9,R9                                             A37184
         IC    R9,DCBKEYLE
         BCTR  R9,R0                    MOVE KEYLE BYTES
         L     R13,DECBKEY
         EX    R9,APPD2G4A              MOVE NEW KEY
         NI    IOBINDCT,X'DF'           OFLO RCD IS IN AREA AND I
         L     R12,DCBMSWA              PUT KEY ADDRESS IN CH7
         AH    R12,CC6+6
         AH    R12,DCBRKP
         SH    R12,DCBLRECL
         ST    R12,CH7
         MVI   CH7,X'0D'
         MVI   IOBASYN,X'09'            SET ASYNCHRONOUS CODE TO 9
         B     APPN3B5                  SCHEDULE ASYNCHRONOUS ROUTINE
APPD2C1  L     R12,DCBWKPT2             IS LAST RCD IN LAST SLOT ON TRK
         USING IHADCW,R12               ESTABLISH ADDRESSABILITY S20201
         CLC   DCWHIRPS,DCBLPDA+7
         BNE   APPD2A5                  BNE IF NO
         OI    DCBST,X'01'              SET ON LAST TRACK FULL SW
         B     APPD2A5
APPD2G4A MVC   0(0,R13),0(R12)          EXECUTED INSTRUCTION
COMPLDT  IC    R9,DCBHMASK              GET TRACK MASK           A31323
         SLL   R13,8                    MOVE OVER RETURN ADDR    A31323
         IC    R13,IOBDADAD+6           PICK UP TRACK BYTE       A31323
         NR    R9,R13                   MASK OFF TRACK           A31323
         SRL   R13,8                    RESTORE RETURN ADDR      A31323
         EX    R9,CLILDT                SEE IF LAST TRK OF CYL   A31323
         BE    COMPLDT1                 BRANCH IF ON LAST TRACK  A31323
*
*        IF NOT LAST TRACK, CHECK TO SEE IF LAST TRK OF PRIME.
*
         CLC   IOBDADAD(7),DCBLPDA      LAST PRIME DATA TRK      A31323
         BNE   4(R13)                   NO, DON'T BUMP RECORD    A31323
COMPLDT1 TM    CB26,X'08'               DOES OVERFLOW IX ENTRY   A31323
*
*        INDICATE THE EXISTENCE OF A CHAIN.
*
         BO    4(R13)                   YES, NO NEED TO BUMP     A31323
         BR    R13                      MUST BUMP--NO CHAIN YET  A31323
CLILDT   CLI   DCBLDT+1,0
         EJECT
*              ABNORMAL END CP11A,  APPENDAGE CODE 20,         CHART D3
APPD3B2  TM    IOBECBAD,PERRMASK        WAS ABEND DUE TO PERM. ERROR
         BC    PERRNO,APPRVNOR          NO - NORMAL RETURN TO IOS
         TM    IOBSENSE,X'08'           WAS ABEND DUE TO DATA CHECK
         BZ    APPN3B3                  NO - BRANCH, RECORD UNREACHABLE
         LA    R13,CC2A+8               DID CHAN PROG STOP AT CC2A
         CLR   R12,R13
         BE    APPD3E2                  YES - BRANCH TO E2
         LA    R13,CC3+8
         CLR   R12,R13                  DID CHAN PROG STOP AT CC3
         BNE   APPN3B3                  NO - BRANCH, RECORD UNREACHABLE
APPD3E2  OI    DECBEXC1,X'08'           YES - INDICATE UNCORRECTABLE
         B     APPN3B4                  I/O ERROR AND BRANCH
         EJECT
*              ABNORMAL END CP11B,  APPENDAGE CODE 21,         CHART D3
APPD3F2  TM    IOBECBAD,PERRMASK        WAS ABEND DUE TO PERM ERROR
         BC    PERRNO,APPRVNOR          NO - NORMAL RETURN TO IOS
         TM    IOBSENSE,X'08'           WAS ABEND DUE TO DATA CHECK
         BZ    APPN3B3                  NO - BRANCH, RECORD UNREACHABLE
         LA    R13,CC6+8                DID CHAN PROG STOP AT CC6
         CLR   R12,R13
         BNE   APPN3B3                  NO - BRANCH, RECORD UNREACHABLE
         B     APPD3E2
         EJECT
*              CHANNEL  END CP15,   APPENDAGE CODE 14,         CHART M1
APPM1B2  LA    R13,CI4+8                DID CHAN PROG STOP AT CI4
         CLR   R12,R13                  BE MEANS YES, BNE MEANS NO
         BNE   APPM1B3                  NO - RECORD IS UNREACHABLE
         L     R12,DCBWKPT2
         USING IHADCW,R12               ESTABLISH                S20201
*                                       ADDRESSABLILITY          S20201
         OI    DCWWKNI,X'10'            SET ADD-TO-END INDICATOR ON
         TM    DCBHIRSH,X'FF'           IS ADD TO SHARED TRACK    13401
         BZ    APPM1B2A                 NO BRANCH, YES CK AGAIN   13401
         CLC   DCBFIRSH+1(1),DCBLPDA+6  ADD TO END OF SHARED TRK  13401
         BNE   APPM1B2A                 BRANCH IF NOT SHARED      13401
         MVC   DCWHIRPS(1),DCBHIRSH     MOVE HIRSH TO WORK AREA   13401
         B     APPM1B2B                                           13401
APPM1B2A MVC   DCWHIRPS(1),DCBHIRPD     MOVE HIRPD TO WORK AREA   13401
APPM1B2B EQU   *
*              SIMULATE CHART D4 SUBROUTINE
         TM    DCBST,X'02'              IS LAST BLOCK FULL
         BO    APPD4B3                  BO IF YES
         MVC   IOBDADAD+3(5),DCBLPDA+3  PUT DCBLPDA CCHHR IN IOB
         OI    IOBFLAG1,X'C0'           USE DATA AND COMMAND CHAINING
         LA    R12,CC1                  START AT CC1
         ST    R12,IOBSTART-1
         LA    R12,IOBDADAD+3           PUT IOB ADDRESS IN CC1 AND CC4
         STH   R12,CC1+2
         SRL   R12,16
         STC   R12,CC1+1
         MVC   CC4+1(3),CC1+1
         MVI   IOBAPP,X'14'             SET APPENDAGE CODE TO 20
         B     APPRVXCP                 EXCP RETURN TO IOS
APPD4B3  TM    DCBST,X'01'              IS LAST TRACK FULL
         BO    APPM1C2                  BO IF YES, TO SET UP CP16
         L     R13,DCBMSWA              MOVE RCD FROM AREA+16 TO W+IL
         IC    R9,DCBKEYLE
         LA    R13,0(R9,R13)
         L     R12,DECBAREA
         LA    R12,16(R0,R12)
*              SIMULATE GENERALIZED MOVE SUBROUTINE
         LA    R9,255(R0,R0)            PLACE 255 IN IR 9
         LH    R10,DCBLRECL             RCD LGTH IN IR 10
         BCTR  R10,R0                   LRECL MOVES REQD
APPD4B3B CLR   R10,R9                   LGTH REMAINDER MORE THAN 255
         BNH   APPD4B3C                 BRANCH LAST TIME
         MVC   0(255,R13),0(R12)        MOVE 255 CHS
         SR    R10,R9                   REDUCE LGTH REMAINDER BY 255
         AR    R12,R9                   INCREASE INDEXING BY 255
         AR    R13,R9
         B     APPD4B3B                 LOOP
APPD4B3C EX    R10,APPD4B3D             MOVE 255 OR FEWER BYTES
APPD4B3D MVC   0(0,R13),0(R12)          EXECUTED MOVE
         L     R12,DCBMSWA              FORM PADDING RECORDS
         IC    R9,DCBKEYLE
         LA    R12,0(R9,R12)
         LR    R10,R12
         AH    R12,DCBLRECL
         AH    R10,DCBBLKSI
         CLR   R10,R12                  IS PADDING NECESSARY      12244
         BE    APPD4B3E                 NO--BRANCH (1 REC/BLOCK)  12244
APPD4B3A MVI   0(R12),X'FF'
         LA    R12,1(R0,R12)
         CLR   R12,R10
         BL    APPD4B3A
         NI    DCBST,X'FD'              LAST BLOCK NOT FULL       12244
APPD4B3E EQU   *                                                  12244
         L     R10,IOBCCWAD             RESTORE CP8 POINTER
         MVI   IOBAPP,X'17'             SET APPENDAGE CODE TO 23
         MVC   IOBDADAD+3(5),DCBLPDA+3  PUT DCBLPDA CCHHR IN IOB
         MVC   CB51(4),IOBDADAD+3       USE DATA AND COMMAND CHAINING
         IC    R12,IOBDADAD+7           MOVE DCBLPDA CCHHR TO CB51
         LA    R12,1(R0,R12)
         STC   R12,CB51+4
         OI    IOBFLAG1,X'C0'            THEN INCREASE CB51 R BY 1
         LA    R12,CB46                 START AT CB46
         ST    R12,IOBSTART-1
         LA    R12,IOBDADAD+3           MOVE IOB ADDRESS TO CB46
         STH   R12,CB46+2
         SRL   R12,16
         STC   R12,CB46+1
         MVC   CB49+1(3),DECBKEY+1      MOVE KEY  ADDRESS TO CB49
         L     R12,DCBMSWA
         IC    R9,DCBKEYLE
         LA    R12,0(R9,R12)
         ST    R12,CB50                 MOVE DATA ADDRESS TO CB50
         B     APPRVXCP                 EXCP RETURN TO IOS
APPM1C2  EQU   *
         TM    CB26,X'08'               WAS ENTRY READ IN CB25 OFLO END
         BZ    APPM1D3                  YES  M1D3
         MVC   IOBDADAD,CB25            MOVE CB25 MBBCCHHR TO IOB
         MVI   IOBAPP,X'0F'             SET APPENDAGE CODE TO 15
         NI    IOBFLAG1,X'7F'           DONT USE DATA CHAINING
         OI    IOBFLAG1,X'40'           USE COMMAND CHAINING
         LA    R12,CJ1                  START AT CJ1
         ST    R12,IOBSTART-1
         LA    R12,IOBDADAD+3           MOVE IOB ADDRESS TO CJ1 AND CJ5
         ST    R12,CJ1                  STORE ADDRESS            S20201
         MVI   CJ1,SIDEQ                RESTORE COMMAND CODE     S20201
         MVC   CJ5+ONE(THREE),CJ1+ONE   MOVE IN ADDR OF SEEK     S20201
         MVC   CJ3+ONE(THREE),DECBKEY+ONE  MOVE IN ADDR OF KEY   S20201
         MVC   CJ7+ONE(THREE),DECBKEY+ONE  MOVE IN ADDR OF KEY   S20201
         LA    R12,0(R0,R0)             CMP TRK INDEX AND OFLO RCD MODL
         IC    R12,CB25                  ARE THEY THE SAME
         SLL   R12,4(R0)
         L     R12,32(R3,R12)
         LA    R12,0(R0,R12)
         CLR   R12,R7
         BE    APPRVXCP                 YES - EXCP RETURN TO IOS
         MVI   IOBASYN,X'01'
         B     APPM1D4                  EXCP IN ASYNCHRONOUS ROUTINE
APPM1D3  MVI   IOBASYN,X'0A'            SET ASYNCHRONOUS CODE TO 10
APPM1D4  NI    IOBINDCT,X'DF'           INDICATE OFLO RECORD IN AREA
         B     APPM1B5                  SCHEDULE ASYNCHRONOUS ROUTINE
APPM1B3  OI    DECBEXC1,X'04'           RECORD IS UNREACHABLE
APPM1B4  MVI   IOBASYN,X'08'            SCHEDULE PROCESSING COMPLETION
APPM1B5  B     BYP(R14)                 SCHEDULE ASYNCH ROUTINE  Y02072
         EJECT
*              ABNORMAL END CP15,   APPENDAGE CODE 14,         CHART M1
APPM1J2  TM    IOBECBAD,PERRMASK        WAS ABEND DUE TO PERM ERROR
         BC    PERRNO,APPRVNOR          NO   CONTINUE, NORMAL IOS
         B     APPM1B3                  YES  M1B3
APPN3B21 LA    R13,APPN3B2
         BC    15,APPN3B22
APPM1B21 LA    R13,APPM1B2
APPN3B22 BR    R13                      NULL ROUTINE             Y02072
         SPACE 3
APPRVXCP EQU   *
         SR    R12,R12
         IC    R12,IOBDADAD             CURRENT EXTENT
         SLL   R12,4                    LENGTH OF 1 EXTENT = 16
         LA    R12,32(R12,R3)           ADDRESS OF CURRENT EXTENT
         MVC   IOBDADAD+1(2),4(R12)     MOVE BB TO IOB
         LA    R14,EXCP(R14)            SETUP FOR EXCP IOS RETURN 15924
         XC    IOBFLAG2(3),IOBFLAG2     CLEAR FLAG2,SENSE BYTES   15924
         XC    IOBCSW(9),IOBCSW         CLEAR FLAG3,CSW,AND SIOCC 15924
         XC    IOBERRCT(2),IOBERRCT     CLEAR ERROR COUNT         15924
         NI    IOBFLAG1,X'C2'           RESET FLAG1               15924
APPRVNOR BR    R14                      RETURN TO IOS             15924
INVAPPCD DC    H'0'                PROGCHK FOR BAD APP CODE    @ZA26522
TWOTHREE DC    X'0017'             MAX VALUE FOR APP CODE      @ZA26522
         SPACE 2
LASTIND  EQU   X'02'       LAST BLK READ TO CHK FOR DELETES      A31323
*                             RETURN TO IOS VECTOR TABLE
*
MODID    DC    C'IGG019G4'         MODULE NAME                 @ZA26522
DATE     DC    CL8'&SYSDATE'       FIX DATE                    @ZA26522
FIX      DC    C' OZ26522'         LATEST FIX                  @ZA26522
PATCH    DC    XL((*-IGG019G4)/20)'00'  ZEROED PATCH AREA        Y02072
*
         EJECT
RQE      IECDRQE ,                      RQE                      Y02072
         EJECT
CVT      DSECT
         CVT
IHAPART2 DSECT                                 PART2 VECTOR      A37184
*                                       TABLE                    A37184
*        ROUTINE FOR          CODE      CEND COMPLETION OF
APPM67CE DS    CL6            7         CP1 OR CP2, WRITE KN
APPN7B2  DS    CL6            9,23      CP10A
APPN8A2  DS    CL6            10,11     CP10B
APPM4A2  DS    CL6            12        CP14  - SETUPS 1, 2, OR 5
APPM5A2  DS    CL6            13        CP14  - SET UPS 3, 4, OR 6
APPM2B2  DS    CL6            15        CP16 - SITUATION 2
APPM3B2  DS    CL6            16        CP16 - SITUATION 3
APPN9A2  DS    CL6            17,18,19  CP17
         DS    CL6                                                17332
*        ROUTINE FOR          CODE     ABEND COMPLETION OF
APPM67AE DS    CL6            7         CP1 OR CP2, WRITE KN
APPN7J2  DS    CL6            9,23      CP10A
APPN8G2  DS    CL6            10,11     CP10B
APPM4E2  DS    CL6            12        CP14  -SETUPS 1, 2, OR 5
APPM5E2  DS    CL6            13        CP14  -SETUPS 3, 4, OR 6
APPM2H2  DS    CL6            15,16     CP16
APPN9G4  DS    CL6            17,18,19  CP17
         DS    CL6                                                17332
APPN7A3  DS    CL4            CONTINUATION OF ROUTINES BEGUN IN
APPN7B4  DS    CL4                 PART 1
*        ROUTINE FOR          CODE      CEND COMPLETION OF
APPABA2  DS    CL6            0,1       CP4/CP5
APPADB2  DS    CL6            2         CP7
APPAAB2  DS    CL6            3         CP1 OR CP2, READ AND UPDATE
APPACA2  DS    CL6            5         CP6
*        ROUTINE FOR          CODE     ABEND COMPLETION OF
APPABD2  DS    CL6            0,1       CP4/CP5
APPADE2  DS    CL6            2         CP7
APPAAA2  DS    CL6            3         CP1 OR CP2, READ AND UPDATE
APPACE2  DS    CL6            5         CP6
         EJECT
*        WRITE KEY NEW CHANNEL PROGRAM REFERENCES (NO WRITE CHECK)
IHAWKNCP IGGWKNCP
         IGGCP11A
         IGGCP11B
         EJECT
*              DATA EVENT CONTROL BLOCK
IHADECB  DSECT
         DS    0F
DECBECB  DS    CL4                      EVENT CONTROL BLOCK (ECB)
DECBTYP1 DS    BL1                      TYPE B6 - 1 IF LENGTH IS S
*                                            B7 - 1 IF AREA IS S
DECBTYP2 DS    BL1                           B0 - 1 IF READ K
*                                            B1 - 1 IF READ KX
*                                            B2 - 1 IF READ KU
*                                            B4 - 1 IF WRITE K
*                                            B5 - 1 IF WRITE KN
DECBLGTH DS    CL2                      LENGTH OF BLOCK
DECBDCBA DS    A                        POINTER TO DCB
DECBAREA DS    A                        ADDRESS OF AREA
DECBLOGR DS    A                        POINTER TO LOGICAL RECORD
DECBKEY  DS    A                        POINTER TO KEY
DECBEXC1 DS    BL1                      EXCPTN CD B0-RECORD NOT FOUND
*                                                 B1-RECORD LGTH CHK
*                                                 B2-NO SPACE
*                                                 B3-INVALID REQUEST
*                                                 B4-UNCORRECTABLE IO
*                                                 B5-UNREACHABLE BLOCK
*                                                 B6-OVERFLOW RECORD
*                                                 B7-DUPLICATE
DECBEXC2 DS    BL1                                B7-READ KU
         EJECT
         DCBD  DSORG=(IS)
         EJECT
IHAIOB   IGGIOBD
         EJECT
IHADCW   IGGBISAM
         EJECT
IHADEB   IGGDEBD
         END
