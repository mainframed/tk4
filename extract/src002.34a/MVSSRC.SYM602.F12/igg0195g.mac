 TITLE 'IGG0195G - OPEN, RESUME LOAD'
IGG0195G CSECT
*
***********************************************************************
*                                                                     *
* MODULE-NAME = IGG0195G                                              *
*                                                                     *
* DESCRIPTIVE-NAME = ISAM OPEN, RESUME LOAD MODE                      *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = RELEASE OS/VS2-02, LEVEL 0                                 *
*                                                                     *
* FUNCTION = INITIALIZE PART OF ISAM LOAD MODE WORK AREA:  ISLCBF,    *
*            EOB, BUMPR, FBW, MVC, & MVCT.  SET DCBMSWA (DCBLPDT) =   *
*            MBBCCHHR OF NEXT-TO-LAST TRACK IN LAST PRIME EXTENT.     *
*            INITIALIZE AREA Y.                                       *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = NONE                                              *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    REGISTER-CONVENTIONS = SEE REGISTER EQUATES.                     *
*                                                                     *
*    PATCH-LABEL = PATCH, A DC STATEMENT.                             *
*                                                                     *
* MODULE-TYPE = OPEN EXECUTOR                                         *
*                                                                     *
*    PROCESSOR = ASSEMXF-370R                                         *
*                                                                     *
*    MODULE-SIZE = 764 DECIMAL BYTES                                  *
*                                                                     *
*    ATTRIBUTES = PRIVILEGED, REENTRANT                               *
*                                                                     *
* ENTRY-POINT = IGG0195G                                              *
*                                                                     *
*    PURPOSE = SEE FUNCTION                                           *
*                                                                     *
*    LINKAGE = RECEIVES CONTROL FROM ISAM OPEN EXECUTOR IGG0196D IN   *
*              STORAGE PROTECT KEY 5 AND PRIVILEGED STATE.            *
*                                                                     *
* INPUT = REGISTERS ESTABLISHED UPON ENTRY ARE                        *
*         REG 5 (RPAR) POINTS TO THE DCB COPY PARAMETER LIST          *
*         REG 6 (RWTG) POINTS TO THE O/C/EOV WHERE-TO-GO TABLE        *
*         REG 7 (RPARC) POINTS TO THE CURRENT ENTRY IN THE DCB COPY   *
*               PARAMETER LIST                                        *
*         REG 8 (RWTGC) POINTS TO THE CURRENT ENTRY IN THE WTG TABLE  *
*                                                                     *
* OUTPUT = REGISTERS 5 THROUGH 8 WILL BE IN THE SAME CONDITION AS     *
*          UPON ENTRY TO THIS MODULE                                  *
*                                                                     *
* EXIT-NORMAL = XCTL TO ISAM OPEN EXECUTOR IGG0196G IN STORAGE        *
*               PROTECT KEY 5.                                        *
*                                                                     *
* EXIT-ERROR = ABEND CODES:                                           *
*              03E - OUT OF SPACE CONDITION                           *
*                                                                     *
* EXTERNAL-REFERENCES = SEE BELOW                                     *
*                                                                     *
*    ROUTINES = NONE                                                  *
*                                                                     *
*    DATA-AREAS = AREAS REFERENCED ARE:                               *
*                 FORCORE - OPEN WORK AREA                            *
*                 ISLCOMON - ISAM LOAD MODE WORK AREA                 *
*                                                                     *
*    CONTROL-BLOCKS = DCB COPY, DEB, AND IOB.                         *
*                                                                     *
* TABLES = IOBBCT                                                     *
*                                                                     *
* MACROS = MODESET, ABEND, AND XCTL.                                  *
*                                                                     *
* CHANGE-ACTIVITY = AS FOLLOWS:                                       *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
********************
* DCB REFERENCE    *
********************
         DCBD  DSORG=(IS)
         USING IHADCB,R1
         EJECT
****************************
* OPEN WORK AREA REFERENCE *
****************************
FORCORE DSECT                           OPEN/CLOSE/EOV WORK AREA Y01021
         IECDSECT                                                Y01021
         EJECT
********************
* DEB REFERENCE    *
********************
*
IHADEB   DSECT
         USING IHADEB,R8
         DS    0D
DEBNMSUB DS    0CL1
DEBTCBAD DS    A
DEBAMLNG DS    0CL1
DEBDEBAD DS    A
DEBOFLGS DS    0CL1
DEBIRBAD DS    A
DEBOPATB DS    0CL1
DEBSYSPG DS    A
DEBNMEXT DS    0CL1
DEBUSRPG DS    A
DEBPRIOR DS    0CL1
DEBECBAD DS    A
DEBPROTG DS    0BL1
DEBDEBID DS    0BL1
DEBDCBAD DS    A
DEBEXSCL DS    0CL1
DEBAPPAD DS    A
DEBNIEE  DS    0CL1
DEBFIEAD DS    A
DEBNPEE  DS    0CL1
DEBFPEAD DS    A
DEBNOEE  DS    0CL1
DEBFOEAD DS    A
         DS    CL4
DEBDVMOD DS    0CL1
DEBUCBAD DS    A
DEBBINUM DS    CL2
DEBSTRCC DS    CL2
DEBSTRHH DS    CL2
DEBENDCC DS    CL2
DEBENDHH DS    CL2
DEBNMTRK DS    CL2
         EJECT
***********************************************************************
* ISLCOMON REFERENCE     C(DCBWKPT1)=A(ISLCOMMON)                     *
***********************************************************************
*
ISLCOMON IGGLOAD
         USING ISLCOMON,R12
*
*
* IOBBCT REFERENCE         C(ISLVPTRS+8)=A(IOBBCT)
*
IOBBCT   DSECT
         USING IOBBCT,R11
         DS    0D
IOBFLAGS DS    0CL1                     FLAGS
IOBPTRA  DS    A                        PTR A
IOBB     DS    0CL1                     B
IOBPTRB  DS    A                        PTR B
IOBS     DS    0CL1                     S - STATUS FIELD FOR BUF NO 1
IOBABUF  DS    A                        A(BUF NO 1) - ADR OF BUF NO 1
         EJECT
********************
* IOB REFERENCE    *
********************
*
IHAIOB   DSECT
         USING IHAIOB,R2
         DS    0D
IOBFLG1  DS    CL1                      FLAGS 1
IOBFLG2  DS    CL1                      FLAGS 2
AIOBSENS DS    CL2                      SENSE BYTES              Y01021
IOBECBAD DS    A                        ECB POINTER
AIOBCSW  DS    CL8                      CHANNEL STATUS WORD      Y01021
AIOBSIOC DS    0CL1                     SIO CC                   Y01021
IOBCPSAD DS    A                        CHANNEL PROGRAM START ADR
IOBWT    DS    0CL1                     WEIGHT
IOBDCBAD DS    A                        DCB POINTER
IOBCPRAD DS    A                        CHANNEL PROGRAM RESTART ADR
IOBBCTI  DS    CL2                      BLK CTR INCR
IOBECT   DS    CL2                      ERROR CTR
IOBDADAD DS    CL8                      DIR ACESS DEV ADR MBBCCHHR
*
CP31A    DSECT
         DS    0D                                                A34959
CA1      DS    CL8                      SRCH ID EQ               A34959
CA2      DS    CL8                      TIC TO CA1               A34959
CA3      DS    CL8                      RD OVFLOW TI CNT - SKIP  A34959
CA4      DS    CL1                      RD KEY INTO KEYSAVE      A34959
CA41     DS    CL6                                               A34959
CA47     DS    CL1                                               A34959
*
*   CP31B
CB1      DS    CL8                      SEEK HEAD                A34959
CB2      DS    CL8                      SRCH ID EQ               A34959
CB3      DS    CL8                      TIC TO CB2               A34959
CB4      DS    CL8                      RD CNT OF LAST PR DATA   A34959
CB5      DS    CL8                      READ LAST DATA RECORD    A34959
CB5V1    DS    CL8                      SRCH FOR R0 - VLR ONLY   A34959
CB5V2    DS    CL8                      TIC TO CB5V1             A34959
CB5V3    DS    CL8                      RD DATA OF R0            A34959
CB6      DS    CL1                      LPDA                     A34959
CB61     DS    CL6                      SEEK ADDRESS             A34959
CB67     DS    CL1                      R OF LPDA                A34959
CB7      DS    CL8                      SEARCH ARG FOR R0        A34959
CPEND    EQU   *                                                 A34959
         EJECT
*
*
IGG0195G CSECT
         BALR  R9,0
         USING *,R9
BASETAG  L     R1,0(RPARC)
         L     RCORE,4(RWTGC)
         USING FORCORE,RCORE            OPEN WA ADDRESSABILITY   Y02072
         L     R12,DCBWKPT1
         STM   R0,R15,DXCCW1            SAVE REGISTERS           Y02072
         LR    RD,RCORE                 SAVE OPEN WA ADDR        Y02072
         DROP  RCORE                    DROP OPEN WA ADDR        Y02072
         USING FORCORE,RD               OPEN WA ADDRESSABILITY   Y02072
*
* EQUATE SYMBOLIC REGISTERS
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
RBASE    EQU   3
RCORE    EQU   4
RPAR     EQU   5
RWTG     EQU   6
RPARC    EQU   7
RWTGC    EQU   8
RD       EQU   14
RJ       EQU   15
OUTSP    EQU   X'02'                                             A34959
MCCH     EQU   X'07'                    MASK TO STORE CCH        Y02072
CCH      EQU   3                        CCH BYTES                Y02072
ONE      EQU   1                        TEST FOR ONE TRACK       Y02072
*
         EJECT
***********************************************************************
*                                                                     *
*              SET UP CBF, EOB, BUMPR AND FBW.                        *
*                                                                     *
***********************************************************************
TSTHSK   LA    R2,ISLIOBA               C(R2)=A(IOBA)
*
         MODESET  KEYADDR=DXUKEY,WORKREG=10  SET USERS KEY       Y02072
*
         L     R11,ISLVPTR3             C(R11)=A(BCT)            Y02072
         L     R3,8(0,R11)              C(R3) = A(BUF1)
         LA    R3,0(0,R3)               ZERO HIGH ORDER BYTE
         AH    R3,TST8                  C(R3)-A(BUF1+8)
         ST    R3,ISLCBF
         AH    R3,DCBBUFL
         SH    R3,TST9
         ST    R3,ISLEOB
         LH    R3,DCBLRECL
         TM    DCBRECFM,X'10'           TEST RECFM BIT 3
*                                       BLOCKED FORMAT
         BO    TSTHK021                 BR-BLOCKED
         CLC   DCBRKP(2),TST1           IS RKP = 0
         BNE   TSTHK021                 BR-RKP N.E. 0
         MVC   TSTWK1C+3(1),DCBKEYLE    C(WK1C)-000N
         AH    R3,TSTWK1C+2             C(R3)-LRECL+KEYLEN
TSTHK021 ST    R3,ISLBMPR               C(BMPR)-LRECL OR LRECL +
*                                       KEYLEN
         MVC   ISLFBW(4),TST1           C(FBW)=0001
*
         MODESET  EXTKEY=DATAMGT        SET DATA MGMT KEY        Y02072
         EJECT
***********************************************************************
*                                                                     *
*        SET DCBMSWA (DCBLPDT) = MBBCCHH OF NEXT-TO-LAST TRACK IN     *
*        LAST PRIME EXTENT.                                           *
*                                                                     *
***********************************************************************
         XC    DCBMSWA,DCBMSWA          CLEAR MSWA
         L     R8,DCBDEBAD              C(R8)=A(DEB)
         L     R3,DEBFPEAD              C(R3)=A(1ST PRIME EXTENT ENTRY)
         SR    R4,R4
         IC    R4,DEBNPEE               C(R4)=000M
*
         CLI   DCBNLEV,0                TEST FOR NO HI LVL INDEX
         BE    TSTHK042                 BRANCH IF NONE
         CLI   DEBNIEE,X'00'            TEST SEPARATE IX AREA
         BNE   TSTHK042                 B IF PRESENT
         CLI   DEBNOEE,X'00'            TEST SEPARATE OVFLOW AREA
         BNE   TSTHK042                 B IF PRESENT
*
*  1. NO SEPERATE IX OR OVFL AREAS
*
         IC    R4,DCBFTHI               C(R4)=000M
         BCTR  R4,0                     C(R4)=000M-1 (M-1 FOR EXTENT 0)
         SLL   R4,4                     C(R4)=000M-1 X 16 (USE AS INDX)
         LA    R8,6(R4,R3)              C(R8)=STRCC OF LAST EXTENT
TSTK040  CLC   DCBFTHI+3(3),0(R8)       TEST FTHI VS STRCC OF HI M
         BNE   TSTHK041                 B IF FTHI NOT STRCC OF HI M
*
         SRL   R4,4                     FTHI = STRCC OF HI M
         B     TSTHK042                 BACK UP AN EXTENT         8M748
TSTK042  CLI   DCBFTHI+4,X'00'          TEST C2 VRS 0             10284
         BNE   TSTK043                                            10284
         SRL   R5,8                     C(R5)=000C                10284
         BCTR  R5,0                     C(R5)=000C-1              10284
         SLL   R5,16                                              10284
         AH    R5,MASK(R8)              C(R5)=CCH                 10284
         B     TSTK044                                            10284
*
TSTHK041 LH    R5,DCBFTHI+3                  C(R5) = CC OF IX
         SR    R8,R8
         IC    R8,DCBDEVT               C(R8)= DEVT (INDEX FO2 2 BYTE
         SLL   R8,1                       DEVICE MASK)
         CLI   DCBFTHI+5,X'00'          TEST H1 VS 0
         BE    TSTK042                  BRANCH =  H1 IS 0
         SLL   R5,8
         IC    R5,DCBFTHI+5             C(R5)= FTHI CCH
         BCTR  R5,0                     C(R5)= FTHI CCH-1
         B     TSTK044
TSTK043  BCTR  R5,0                     C(R5)= CC-1
         SLL   R5,8                     C(R5)= CC0
         IC    R5,MASK+1(R8)            C(R5)= CCH
TSTK044  EQU   *                        STORE 0CCH               Y02072
         STCM  R5,MCCH,DCBLPDT+3        C(DCBLPDT) = 000CCH0     Y02072
         B     TSTHK043
*
*  2. SEPERATE IX OR OVFL AREA
*
TSTHK042 BCTR  R4,0                     C(R4)= 000M-1
         SLL   R4,4                     C(R4)=000M-1 X 16 (USE AS INDX)
         LA    R8,10(R4,R3)            C(R8) = A(ENDCCH)
         MVC   DCBMSWA+3(3),0(R8)      MOVE CCH
TSTHK043 LH    R5,DCBLDT               END HH
         BCTR  R5,0                    END HH - 1
         STC   R5,DCBMSWA+6            STORE HH
         LA    R8,4(R4,R3)             C(R8)=A(BB)-1
         MVC   DCBMSWA+1(2),0(R8)       MOVE BB TO MSWA
         LR    R5,R4                    SAVE CURRENT EXTENT      Y02072
         SRL   R4,4                                              Y02072
         LA    R4,1(R4)                 C(R4) = 000M             Y02072
*                                       M = 1 FOR FIRST EXTENT   Y02072
         STC   R4,DCBLPDT               STORE M                  Y02072
         CLI   DCBFIRSH+2,ONE           ANY SHARED TRACKS        Y02072
         BE    CHECKHH                  BR IF NO                 Y02072
         CLC   DCBLDT,DCBFIRSH          IS SHARED TRK ONLY TRK   Y02072
         BH    CONTINUE                 BR IF NO                 Y02072
         B     CHECKCC                  CHECK IF MORE THAN 1 CYL Y02072
*
CHECKHH  EQU   *                        TEST NO. PRIME TRKS      Y02072
         CLC   DCBLPDT+5(L'DCBLDT),HWONE MORE THAN 1 PRIME TRK   Y02072
         BNL   CONTINUE                 BR IF YES                Y02072
CHECKCC  EQU   *                        TEST NO. CYLINDERS       Y02072
         MVC   DCBLPDT+6(1),DCBLDT+1    SET END 0H TO LDT 0H     Y02072
         LR    R4,R5                    RESET LAST EXTENT        Y02072
         LA    R8,DEBSTRCC-DEBDVMOD(R4,R3) ADDR OF START CC      Y02072
         CLC   0(L'DEBSTRCC,R8),DEBENDCC-DEBSTRCC(R8) END = STRT Y02072
         BE    RESETM                   BR IF ENDCC = STRCC      Y02072
         IC    R5,DCBLPDT+3             HIGH ORDER CYL BYTE      Y02072
         SLL   R5,8                     SHIFT 1 BYTE IN REG      Y02072
         IC    R5,DCBLPDT+4             C(R5) = LPDT CC          Y02072
         BCTR  R5,0                     CYLINDER - 1             Y02072
         STC   R5,DCBLPDT+4             RESTORE LOW ORDER CYL    Y02072
         SRL   R5,8                     SHIFT CYL BYTE           Y02072
         STC   R5,DCBLPDT+3             HIGH ORDER CYL BYTE      Y02072
         B     CONTINUE                 INIT. MVC AND MVCT       Y02072
RESETM   EQU   *
         CLI   DCBLPDT,ONE              MORE THAN ONE EXTENT     Y02072
         BNH   CONTINUE                 BR IF NO                 Y02072
         SRL   R4,4                     EXTENTS - 1              Y02072
         STC   R4,DCBLPDT               NEW EXTENT               Y02072
         BCTR  R4,0                     SUBTRACT ONE TO          Y02072
         SLL   R4,4                     GET BACK TO              Y02072
         LA    R8,DEBENDCC-DEBDVMOD(R4,R3) LAST GOOD             Y02072
         MVC   DCBLPDT+3(CCH),0(R8)     CYLINDER                 Y02072
CONTINUE EQU   *
         SPACE 3
***********************************************************************
*                                                                     *
*        CALCULATE MVC AND MVCT FOR RECORD MOVE BY DIVIDING           *
*        BMPR BY 255.                                                 *
*                                                                     *
***********************************************************************
         SPACE 2
         MODESET  KEYADDR=DXUKEY,WORKREG=4   SET USERS KEY       Y02072
*
         SR    R4,R4                    CLEAR REGISTER 4
         ST    R4,TSTWK2C               CLEAR WORK AREA
         L     R5,ISLBMPR               DIVIDEND = 000000NN IN R4-R5
         D     R4,TST255                DIVISOR  =     0255
*                                       C(R4) = REMAINDER R
*                                       C(R5) = QUOTIENT  Q
         LTR   R4,R4                    TEST R VS 0
         BC    8,TSTHK05                B IF R = 0
*                                       R NOT 0
         A     R5,TST1                  C(R5)=Q+1
         B     TSTK055A
*
TSTHK06A MVC   63(1,R7),62(R7)          MOVE 1S IS TO BE EXECUTD
*                                       R = 0
TSTHK05  L     R4,TST255                C(R4)=0255
TSTK055A BCTR  R4,0
         ST    R4,ISLMVC                C(MVC)=0254, COUNT OF EX MOVE
         ST    R5,ISLMVCT               C(MVCT)=Q, NO OF 255 BYTE MVS
         EJECT
***********************************************************************
*                                                                     *
*              INITIALIZE AREA Y                                      *
*                                                                     *
***********************************************************************
         L     R7,ISLVPTR1              C(R7)=A(AREA Y)          Y02072
*                                                                     *
*     MOVE BINARY ONES TO KEY OF DUMMY INDEX ENTRY AT Y+62            *
*                                                                     *
*
         SR    R3,R3
         IC    R3,DCBKEYLE              C(R3)=KEYLE
         MVI   62(R7),X'FF'             SET 1ST BYTE OF KEY = 1S
         CLI   DCBKEYLE,X'01'           TEST IF KEYLE = 1
         BE    TSTHK07                  B IF KEYLE = 1
         BCTR  R3,0                     R3 EQUALS
         BCTR  R3,0                      KEYLE-2
         EX    R3,TSTHK06A              MOVE IS TO REST OF KEY
*
*
*  3. MOVE HEX 00000000000000002007 TO Y+62+IL FOR DUMMY DATA, TRK IX
*
TSTHK07  EQU   *                                                  10284
         IC    R3,DCBKEYLE              C(R3)=KEYLE
         AR    R7,R3                    C(R7)=A(AREA Y + IL)
         MVC   62(10,R7),TSTDDAT        DUMDAT TO AREA Y +62 +IL
*
*   CHECK FOR 'OUT OF SPACE' CONDITION
*
         CLC   DCBLPDA(7),DCBMSWA       LAST TRK OF DATA SET     A34959
*
         MODESET  EXTKEY=DATAMGT        SET DATA MGMT KEY        Y02072
*
         BNE   FININIT                  NOT OUT OF SPACE         A34959
         CLC   DCBLPDA+7(1),DCBHIRPD    LAST TRACK FULL?        SA57123
         BL    FININIT                  YES, NO-SPACE; DONT BR  SA57123
         OI    DCBEXCD1,OUTSP           INDICATE OUT OF SPACE    A34959
ABEND3E  EQU   *                        ABEND CODE = 03E         A34959
         ABEND X'03E',DUMP,,SYSTEM      SYSTEM 03E ABEND         Y02072
         EJECT
*
* EXIT ********** EXIT ***************** EXIT *********** EXIT ********
*
FININIT  EQU   *                                                 A34959
         LM    R0,R15,DXCCW1            RESTORE REGISTERS        Y02072
         DROP  RD                       END OPEN WA ADDR         Y02072
         USING FORCORE,RCORE                                     Y01021
         MVC   0(L'LOAD6G,RWTGC),LOAD6G ID OF IGG0196G           Y02072
RELOOP   LA    RWTGC,8(RWTGC)           INCREMENT WTG CURNT ENTRY
         LA    RPARC,4(RPARC)           INCREMENT DCB CURNT ENTRY
         CLC   0(2,RWTGC),THISLOAD
         BE    BASETAG                  BR-BEGINNING OF THIS MOD
         CLC   0(2,RWTGC),OPNLOD7       TEST FOR END OF WTG TABLE
         BC    7,RELOOP                 BRANCH=NOT AT END
ATEND    LR    RPARC,RPAR               INITIALIZE RPARC
         LA    RWTGC,32(RWTG)           INITIALIZE RWTGC
ZCHECK   CLI   0(RWTGC),X'00'           TEST FOR ENTRY = 0
         BC    7,TCTLRTN                BRANCH = NOT ZERO
ITSZERO  LA    RWTGC,8(RWTGC)
         LA    RPARC,4(RPARC)
         B     ZCHECK
TCTLRTN  EQU   *
         MVC   6(2,RWTG),0(RWTGC)       MOVE ID
         LA    RJ,DXCCW12                                        Y01021
         XCTL  EPLOC=(RWTG),DCB=0,SF=(E,(15)) XCTL TO NEXT LOAD  Y02072
*
TST1     DC    F'0001'
HWONE    EQU   TST1+2                   HALFWORD ONE FOR COMPARE Y02072
TST8     DC    H'08'
TST9     DC    H'09'
TST255   DC    F'0255'
TSTDDAT  DC    X'00000000000000002007'  DUMMY DATA (MBBCCHHRFP)
MASK     DC    5H'00'
         DC    X'0904'                  2321 MASK
         DC    3H'00'
THISLOAD DC    C'5G'                    CURRENT MODULE ID
OPNLOD7  DC    C'0S'
LOAD6G   DC    C'6G'                    ID OF MODULE IGG0196G    Y02072
*
PATCH    DC    XL50'00'                 ZEROED PATCH AREA        Y02072
         END
