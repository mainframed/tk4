         TITLE 'IDA0200B - VSAM CLOSE CLUSTER                          *
                        '
IDA0200B CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA0200B  78.158'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @03,0                                               0001
@PSTART  LA    @12,4095(,@03)                                      0001
         USING @PSTART,@03                                         0001
         USING @PSTART+4095,@12                                    0001
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
RBPRFXLN EQU 64
RBPRFLNA EQU 32
PRBLEN   EQU 136
SIRBLEN  EQU 200
TIRBLEN  EQU 136
IRBLEN   EQU 128
SVRBLEN  EQU 224
*                                                                  0341
*/********************************************************************/
*/*                                                                  */
*/*                     MODULE IDA0200B                              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0341
*   PDPFUNC=PDF110;                 /* SET FUNCTION CODE             */
         L     @05,CLWCOMWK(,RCORE)                                0341
         MVI   PDPFUNC+280(@05),X'6E'                              0341
*   CLWAMBPT=ZERO;                  /* ZERO CURRENT AMB POINTER IN 0342
*                                      CLW                           */
         SLR   @05,@05                                             0342
         ST    @05,CLWAMBPT(,RCORE)                                0342
*   CALL INIT200B;                  /* BUILD MODULE WORK AREA        */
         BAL   @14,INIT200B                                        0343
*   GEN(USING @DATD,R13);           /* EATABLISH ADDRESSABILITY      */
         USING @DATD,R13
*   MWASFIPT=ADDR(CLWSFI);          /* INITIALIZE POINTER TO SFI AREA*/
         LA    @05,CLWSFI(,RCORE)                                  0345
         STCM  @05,7,MWASFIPT                                      0345
*   AMBLDTA->AMBWKA=ADDR(MWADTAWK); /* DATA AMB CATALOG WORK AREA    */
         L     @05,ACBAMBL(,RACB)                                  0346
         L     @01,AMBLDTA(,@05)                                   0346
         LA    @00,MWADTAWK                                        0346
         ST    @00,AMBWKA(,@01)                                    0346
*   IF AMBLIX^=ZERO THEN            /* INDEX AMB EXIST               */
         L     @05,AMBLIX(,@05)                                    0347
         LTR   @05,@05                                             0347
         BZ    @RF00347                                            0347
*     AMBLIX->AMBWKA=ADDR(MWAIDXWK);/* INDEX AMB CATALOG WK AREA     */
         LA    @15,MWAIDXWK                                        0348
         ST    @15,AMBWKA(,@05)                                    0348
*   IF AMBLCAT=OFF THEN             /* IF NOT CATALOG OR SCRA        */
@RF00347 L     @05,ACBAMBL(,RACB)                                  0349
         TM    AMBLCAT(@05),B'00000010'                            0349
         BNZ   @RF00349                                            0349
*     DO;                                                          0350
*       CALL VALCHECK;              /* VALIDITY CHECK AMBL AND DEB'S */
         BAL   @14,VALCHECK                                        0351
*       CLWAMBPT=ZERO;              /* ZERO CURRENT AMB POINTER IN 0352
*                                      CLW                           */
         SLR   @05,@05                                             0352
         ST    @05,CLWAMBPT(,RCORE)                                0352
*       IF AMBLUCRA=OFF THEN        /* IF NOT UCRA                   */
         L     @05,ACBAMBL(,RACB)                                  0353
         TM    AMBLUCRA(@05),B'00000100'                           0353
         BNZ   @RF00353                                            0353
*         DO;                                                      0354
*                                                                  0354
*           /*********************************************************/
*           /*                                                       */
*           /* IF DB/DC AND SUPRESS WRITE BUFFER IS OFF, DO WRTBFR.  */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0355
*           IF(AMBLLSR=ON×AMBLGSR=ON)&CLWNWRIT=OFF THEN            0355
         TM    AMBLLSR(@05),B'01100000'                            0355
         BZ    @RF00355                                            0355
         TM    CLWNWRIT(RCORE),B'00100000'                         0355
         BNZ   @RF00355                                            0355
*             DO;                   /* IF DB/DC AND OK TO WRITBFR  0356
*                                      THEN ISSUE WRITBFR.           */
*               CALL WRITBUFR;      /* ISSUE WRTBFR MACRO            */
         BAL   @14,WRITBUFR                                        0357
*               IF MWANOCOR=ON THEN /* IF ERROR ECOUNTERED           */
         TM    MWANOCOR,B'10000000'                                0358
         BNO   @RF00358                                            0358
*                 CLWCNOUP=ON;      /* SUPPRESS CATALOG UPDATE       */
         OI    CLWCNOUP(RCORE),B'01000000'                         0359
*             END;                  /* END OF LOGIC FOR DB/DC      0360
*                                      WRBUFFER.             @Y30DSMD*/
@RF00358 DS    0H                                                  0361
*           IF CLWPRMCL=ON THEN     /* PRIMARY CLOSE                 */
@RF00355 TM    CLWPRMCL(RCORE),B'10000000'                         0361
         BNO   @RF00361                                            0361
*             DO;                                                  0362
*               CLWAMBPT=AMBLDTA;   /* POINT TO DATA AMB             */
         L     @05,ACBAMBL(,RACB)                                  0363
         L     @15,AMBLDTA(,@05)                                   0363
         ST    @15,CLWAMBPT(,RCORE)                                0363
*               AMDLM=ON;           /* INDICATE DATA SET LOADED      */
         L     @01,AMBDSB(,@15)                                    0364
         OI    AMDLM(@01),B'00001000'                              0364
*               IF AMBLIX^=ZERO THEN/* IF INDEX AMB EXIST            */
         L     @05,AMBLIX(,@05)                                    0365
         LTR   @05,@05                                             0365
         BZ    @RF00365                                            0365
*                 DO;                                              0366
*                   CLWAMBPT=AMBLIX;/* POINT TO INDEX AMB            */
         ST    @05,CLWAMBPT(,RCORE)                                0367
*                   AMDLM=ON;       /* INDICATE DATA SET LOADED      */
         L     @05,AMBDSB(,@05)                                    0368
         OI    AMDLM(@05),B'00001000'                              0368
*                 END;                                             0369
*               CLWAMBPT=ZERO;      /* ZERO POINTER TO AMB           */
@RF00365 SLR   @05,@05                                             0370
         ST    @05,CLWAMBPT(,RCORE)                                0370
*               CLWAMBPT=AMBLDTA;   /* POINT TO DATA AMB             */
         L     @05,ACBAMBL(,RACB)                                  0371
         L     @05,AMBLDTA(,@05)                                   0371
         ST    @05,CLWAMBPT(,RCORE)                                0371
*               MWAOPEN='80'X;      /* PRESET OPEN INDICATOR         */
         L     @05,AMBWKA(,@05)                                    0372
         MVI   MWAOPEN(@05),X'80'                                  0372
*               CALL SHARE;         /* SHARE PROCESSING FOR DATA AMB */
         BAL   @14,SHARE                                           0373
*               IF AMBLIX^=ZERO THEN/* IF KSDS                       */
         L     @05,ACBAMBL(,RACB)                                  0374
         L     @05,AMBLIX(,@05)                                    0374
         LTR   @05,@05                                             0374
         BZ    @RF00374                                            0374
*                 DO;                                              0375
*                   CLWAMBPT=AMBLIX;/* POINT TO INDEX AMB            */
         ST    @05,CLWAMBPT(,RCORE)                                0376
*                   MWAOPEN='80'X;  /* PRESET OPEN INDICATOR         */
         L     @05,AMBWKA(,@05)                                    0377
         MVI   MWAOPEN(@05),X'80'                                  0377
*                   CALL SHARE;     /* SHARE PROCESSING FOR INDEX AMB*/
         BAL   @14,SHARE                                           0378
*                 END;                                             0379
*             END;                                                 0380
@RF00374 DS    0H                                                  0381
*         END;                                                     0381
@RF00361 DS    0H                                                  0382
*     END;                                                         0382
@RF00353 DS    0H                                                  0383
*   IF CLWCNOUP=OFF THEN            /* CATALOG UPDATE REQUIRED       */
@RF00349 TM    CLWCNOUP(RCORE),B'01000000'                         0383
         BNZ   @RF00383                                            0383
*     CALL UPCATACB;                /* UPDATE CATALOG                */
         BAL   @14,UPCATACB                                        0384
*   CLWAMBPT=AMBLDTA;               /* POINT TO DATA AMB             */
@RF00383 L     @05,ACBAMBL(,RACB)                                  0385
         L     @05,AMBLDTA(,@05)                                   0385
         ST    @05,CLWAMBPT(,RCORE)                                0385
*   CALL VMTPROC;                   /* VMT PROCESSING FOR DATA AMB   */
         BAL   @14,VMTPROC                                         0386
*   IF AMBLIX^=ZERO THEN            /* IF KSDS                       */
         L     @05,ACBAMBL(,RACB)                                  0387
         L     @05,AMBLIX(,@05)                                    0387
         LTR   @05,@05                                             0387
         BZ    @RF00387                                            0387
*     DO;                                                          0388
*       CLWAMBPT=AMBLIX;            /* POINT TO INDEX AMB            */
         ST    @05,CLWAMBPT(,RCORE)                                0389
*       CALL VMTPROC;               /* VMT PROCESSING FOR INDEX AMB  */
         BAL   @14,VMTPROC                                         0390
*     END;                                                         0391
*   CLWAMBPT=ZERO;                  /* ZERO THE AMB POINTER          */
@RF00387 SLR   @05,@05                                             0392
         ST    @05,CLWAMBPT(,RCORE)                                0392
*   IF CVTSMCA^=ZERO&               /* IF SMCA EXIST                 */
*       SMCADSA=ON&                 /* IF DATA SET INFORMATION     0393
*                                      REQUIRED                      */
*       SMCAUSER=ON&SMCAMAN=ON&     /* IF SMF RECORDING              */
*       TCBTCTB^=ZERO THEN          /* IF TCT EXIST          @ZA29395*/
         L     @01,CVTPTR                                          0393
         L     @15,CVTSMCA(,@01)                                   0393
         CR    @15,@05                                             0393
         BE    @RF00393                                            0393
         TM    SMCADSA(@15),B'00010000'                            0393
         BNO   @RF00393                                            0393
         TM    SMCAUSER(@15),B'11000000'                           0393
         BNO   @RF00393                                            0393
         L     @05,PSATOLD                                         0393
         L     @05,TCBTCTB-1(,@05)                                 0393
         LA    @05,0(,@05)                                         0393
         LTR   @05,@05                                             0393
         BZ    @RF00393                                            0393
*     CALL UPSMF;                   /* DO SMF PROCESSING             */
         BAL   @14,UPSMF                                           0394
*   CLWAMBPT=ZERO;                  /* ZERO CURRENT AMB POINTER IN 0395
*                                      CLW                           */
@RF00393 SLR   @05,@05                                             0395
         ST    @05,CLWAMBPT(,RCORE)                                0395
*   IF CLWSECCL=OFF THEN            /* IF NOT SECONDARY CLOSE        */
         TM    CLWSECCL(RCORE),B'01000000'                         0396
         BNZ   @RF00396                                            0396
*     DO;                                                          0397
*       IF CLWPARCL=OFF&            /* IF NOT PARTIAL CLOSE          */
*           AMBLCAT=OFF&AMBLSCRA=OFF THEN/* IF NOT CATALOG OR SCRA   */
         TM    CLWPARCL(RCORE),B'00000001'                         0398
         BNZ   @RF00398                                            0398
         L     @05,ACBAMBL(,RACB)                                  0398
         TM    AMBLCAT(@05),B'00001010'                            0398
         BNZ   @RF00398                                            0398
*         DO;                                                      0399
*           CLWAMBPT=AMBLDTA;       /* POINT TO DATA AMB             */
         L     @05,AMBLDTA(,@05)                                   0400
         ST    @05,CLWAMBPT(,RCORE)                                0400
*           IF AMBLSR=OFF&AMBGSR=OFF THEN/* IF SHARED RESOURCE WE  0401
*                                      HAVE NO IRB           @ZA09627*/
         TM    AMBLSR(@05),B'01100000'                             0401
         BNZ   @RF00401                                            0401
*             IF IQEIRBA->RBFACTV=ON THEN/* IS THE IRB ACTIVE      0402
*                                                            @ZA02280*/
         L     @05,AMBIOMB(,@05)                                   0402
         L     @05,IOMIQE(,@05)                                    0402
         L     @05,IQEIRBA-1(,@05)                                 0402
         TM    RBFACTV(@05),B'01000000'                            0402
         BNO   @RF00402                                            0402
*               CALL DECHNIRB;      /* YES, THEN DECHAIN IT  @ZA02280*/
         BAL   @14,DECHNIRB                                        0403
*           MWADEBPT=AMBDEBAD;      /* GET ADDRESS OF DEB            */
@RF00402 DS    0H                                                  0404
@RF00401 L     @05,CLWAMBPT(,RCORE)                                0404
         L     MWADEBPT,AMBDEBAD-1(,@05)                           0404
         LA    MWADEBPT,0(,MWADEBPT)                               0404
*           CALL DEHOOK;            /* DECHAIN DEB,DELETE FROM DEB 0405
*                                      TABLE                         */
         BAL   @14,DEHOOK                                          0405
*           IF AMBLIX^=ZERO THEN    /* IF KSDS                       */
         L     @05,ACBAMBL(,RACB)                                  0406
         L     @05,AMBLIX(,@05)                                    0406
         LTR   @05,@05                                             0406
         BZ    @RF00406                                            0406
*             DO;                                                  0407
*               CLWAMBPT=AMBLIX;    /* POINT TO INDEX AMB            */
         ST    @05,CLWAMBPT(,RCORE)                                0408
*               MWADEBPT=AMBDEBAD;  /* GET ADDRESS OF DEB            */
         L     MWADEBPT,AMBDEBAD-1(,@05)                           0409
         LA    MWADEBPT,0(,MWADEBPT)                               0409
*               CALL DEHOOK;        /* DECHAIN DEB,DELETE FROM DEB 0410
*                                      TABLE                         */
         BAL   @14,DEHOOK                                          0410
*             END;                                                 0411
*         END;                                                     0412
@RF00406 DS    0H                                                  0413
*       CLWAMBPT=ZERO;              /* ZERO CURRENT AMB POINTER IN 0413
*                                      CLW                           */
@RF00398 SLR   @05,@05                                             0413
         ST    @05,CLWAMBPT(,RCORE)                                0413
*       IF CLWPRMCL=ON&             /* PRIMARY CLOSE AND BIB SHOWS   */
*           BIBVIRT=ON THEN         /* VIRTUAL DEVICES               */
         TM    CLWPRMCL(RCORE),B'10000000'                         0414
         BNO   @RF00414                                            0414
         L     @05,ACBAMBL(,RACB)                                  0414
         L     @05,AMBLBIB(,@05)                                   0414
         TM    BIBVIRT(@05),B'10000000'                            0414
         BNO   @RF00414                                            0414
*         CALL VIRTPROC;            /* PERFORM NECESSARY DESTAGES    */
         BAL   @14,VIRTPROC                                        0415
*       CALL CBRELE;                /* RELEASE CONTROL BLOCKS        */
@RF00414 BAL   @14,CBRELE                                          0416
*     END;                                                         0417
*LTRM200B:                                                         0418
*   MWASPOOL=WKPOOL;                /* SUBPOOL NUMBER                */
@RF00396 DS    0H                                                  0418
LTRM200B MVI   MWASPOOL,X'FC'                                      0418
*   RESPECIFY                                                      0419
*    (R0,                                                          0419
*     R1) RESTRICTED;                                              0419
*   GEN(L R1,@SIZDATD);             /* GET SIZE OF AUTOMATICS        */
         L R1,@SIZDATD
*   MWABYTES=R1;                    /* NUMBER OF BYTES TO BE FREED   */
         STCM  R1,7,MWABYTES                                       0421
*   R1=R13;                         /* GET ADDRESS OF MWA            */
         LR    R1,R13                                              0422
*   R0=MWAMNWRD;                    /* GET SUBPOOL NO. AND NO. OF  0423
*                                      BYTES                         */
         L     R0,MWAMNWRD                                         0423
*   GEN(L R13,4(R13));              /* SAVE ADDR OF PREVIOUS SAVE  0424
*                                      AREA                          */
         L R13,4(R13)
*   GEN(FREEMAIN R,LV=(R0),A=(R1)); /* FREE MODULE WORK AREA         */
         FREEMAIN R,LV=(R0),A=(R1)
*   RESPECIFY                                                      0426
*    (R0,                                                          0426
*     R1) UNRESTRICTED;                                            0426
*ENDLABEL:                          /* EXIT PROCESSING               */
*   RESPECIFY                                                      0427
*     RETCODE RESTRICTED;                                          0427
ENDLABEL DS    0H                                                  0428
*   IF CLWTERM=ON THEN              /* IF TERMINATING ERROR          */
         TM    CLWTERM(RCORE),B'00010000'                          0428
         BNO   @RF00428                                            0428
*     RETCODE=FOUR;                 /* INDICATE TERMINATING ERROR    */
         LA    RETCODE,4                                           0429
*   ELSE                            /* IF NO TERMINATING ERROR       */
*     RETCODE=ZERO;                 /* INDICATE NO TERMINATING ERROR */
         B     @RC00428                                            0430
@RF00428 SLR   RETCODE,RETCODE                                     0430
*   GEN(ST RETCODE,16(R13));        /* PUT RETURN CODE IN CALLER'S 0431
*                                      REGISTERS SAVE AREA           */
@RC00428 DS    0H                                                  0431
         ST RETCODE,16(R13)
*   RESPECIFY                                                      0432
*     RETCODE UNRESTRICTED;                                        0432
*   GEN(LM RET,R12,12(R13));        /* RESTORE REGISTERS             */
         LM RET,R12,12(R13)
*   GEN(BR RET);                    /* EXIT MODULE                   */
         BR RET
*INIT200B:                                                         0435
*                                                                  0435
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - MODULE INITIALIZATION, BUILD MODULE WORK AREA */
*/*      01 INPUTS -   1. CORE SIZE FOR AUTOMATICS                   */
*/*      01 OUTPUTS -  1. MODULE WORK AREA BUILT AND ENQUEUE         */
*/*                       PARAMETER LIST INITIALIZED.                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0435
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0435
INIT200B DS    0H                                                  0436
*   RESPECIFY                                                      0436
*    (R9,                                                          0436
*     RET,                                                         0436
*     RETCODE) RESTRICTED;                                         0436
*   RSTATRTN=IDAR200B;              /* NOTE THE MODULE IN CONTROL. 0437
*                                                            @Z30SSMD*/
         L     @08,CLWCOMWK(,RCORE)                                0437
         MVC   RSTATRTN(4,@08),@CC03816                            0437
*   R9=RET;                         /* SAVE RETURN ADDRESS           */
         LR    R9,RET                                              0438
*/********************************************************************/
*/*           IDAGMAIN - GETS CORE STORAGE FOR AUTOMATICS.           */
*/*                      FOR VS2 IDAGMAIN WILL MOVE THE      @Z30SSRL*/
*/*                      ID AND DATE OF THE MODULE TO A      @Z30SSRL*/
*/*                      LOCATION DIRECTLY AFTER THE PLS     @Z30SSRL*/
*/*                      GENERATED SAVE AREA.                @Z30SSRL*/
*/*           DATE OF LAST CHANGE = 3 DECEMBER 74            @Z30SSRL*/
*/********************************************************************/
*                                                                  0439
*   GEN;                                                           0439
         L     @00,@SIZDATD             LOAD LENGTH OF AUTOMATICS
         GETMAIN RC,LV=(0),SP=0         ISSUE GETMAIN IN SUBPOOL ZERO
         LTR   @15,@15                  TEST RETURN CODE FOR ERROR
         BNZ   GMN00100                 BRANCH IF ERROR ENCOUNTERED
*                                       IF NO ERROR WAS ENCOUNTERED
         LR    @00,@01                  ADDRESS OF GOTTEN AREA IN R0
         LR    @14,@01                  SAVE THE ADDRESS IN REGISTER 14
         L     @01,@SIZDATD             LENGTH OF GOTTEN AREA
         MVCL  @00,@14                  ZERO THE GOTTEN AREA, R15=0
         LR    @15,@14                  ADDRESS OF AREA IN REGISTER 15
         ST    @15,8(,@13)              FORWARD CHAIN THIS SAVE AREA
         L     @01,@SIZDATD             LENGTH OF GOTTEN AREA
         ST    @01,88(,@15)             STORE LENGTH OF AREA
         LR    @14,@03                  LOAD BASE REGISTER OF MODULE
         LA    @01,23                   LOAD NEGATIVE OFFSET BYTE NO.
         SR    @14,@01                  NEGITIVE OFFSET 23 BYTES
         MVC   72(16,@15),0(@14)        GET MODULE NAME AND DATE
         B     GMN00200                 BYPASS SETTING ERROR
GMN00100 SR    @15,@15                  REGISTER 15 = 0 INDICATES ERROR
GMN00200 EQU   *                        R15 CONTAINS ADDRESS OR ZERO
*        REGISTER 15 CONTAINS EITHER THE ADDRESS OF GOTTEN CORE OR
*        ZERO IF THE GETMAIN WAS UNSUCCESSFUL.
*   IF RETCODE^=ZERO THEN           /* GETMAIN SUCCESSFUL            */
         LTR   RETCODE,RETCODE                                     0440
         BZ    @RF00440                                            0440
*     DO;                                                          0441
*       GEN(ST R13,4(RETCODE));     /* SAVE PREVIOUS SAVEAREA ADDRESS*/
         ST R13,4(RETCODE)
*       R13=RETCODE;                /* POINT TO MODULE WORK AREA     */
         LR    R13,RETCODE                                         0443
*       GEN(USING @DATD,R13);       /* ESTABLISH ADDRESSABILITY      */
         USING @DATD,R13
*       CLWGMAIN=ON;                /* INDICATE GETMAIN SUCCESSFUL   */
         OI    CLWGMAIN(RCORE),B'00100000'                         0445
*     END;                                                         0446
*   ELSE                            /* GETMAIN FAILED                */
*     DO;                                                          0447
         B     @RC00440                                            0447
@RF00440 DS    0H                                                  0448
*       PDPACB->ACBERFLG=OPERR136;  /* SET USER ACB ERROR FLAG       */
         LA    @08,280                                             0448
         AL    @08,CLWCOMWK(,RCORE)                                0448
         L     @05,PDPACB(,@08)                                    0448
         MVI   ACBERFLG(@05),X'88'                                 0448
*       PDPCODE=PP20;               /* SET PROBLEM CODE              */
         MVI   PDPCODE(@08),X'14'                                  0449
*       CLWTERM=ON;                 /* INDICATE TERMINATING ERROR    */
         OI    CLWTERM(RCORE),B'00010000'                          0450
*       CALL PROBDT;                /* PROBLEM DETERMINATION       0451
*                                      PROCESSING                    */
         BAL   @14,PROBDT                                          0451
*       RETURN TO ENDLABEL;         /* EXIT MODULE                   */
         LA    @14,ENDLABEL                                        0452
@EL00002 DS    0H                                                  0452
@EF00002 DS    0H                                                  0452
@ER00002 BR    @14                                                 0452
*     END;                                                         0453
*   MWAQNAME='SYSVSAM ';            /* SET QNAME FOR ENQ/DEQ         */
@RC00440 MVC   MWAQNAME(8),@CC04976                                0454
*   ENQTCB=TCBJSTCB;                /* GET JOB STEP TCB ADDRESS    0455
*                                                            @Z30SSMD*/
         L     @08,PSATOLD                                         0455
         L     @08,TCBJSTCB(,@08)                                  0455
         ST    @08,ENQTCB                                          0455
*   ENQQNADR=ADDR(MWAQNAME);        /* GET QNAME ADDRESS             */
         LA    @08,MWAQNAME                                        0456
         ST    @08,ENQQNADR                                        0456
*   ENQRLEN=LENGTH(MWARNAME);       /* LENGTH OF RNAME               */
         MVI   ENQRLEN,X'08'                                       0457
*   ENQRNADR=ADDR(MWARNAME);        /* GET RNAME ADDRESS             */
         LA    @08,MWARNAME                                        0458
         ST    @08,ENQRNADR                                        0458
*   RESPECIFY                                                      0459
*     RET RESTRICTED;                                              0459
*   RET=R9;                         /* GET RETURN ADDRESS            */
         LR    RET,R9                                              0460
*   RESPECIFY                                                      0461
*    (R9,                                                          0461
*     RET,                                                         0461
*     RETCODE) UNRESTRICTED;                                       0461
*   END INIT200B;                                                  0462
         B     @EL00002                                            0462
*VALCHECK:                                                         0463
*                                                                  0463
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - VALIDITY CHECK AMBL AND AMB DEB'S             */
*/*      01 INPUTS -   1. ADDRESS OF AMBL IN MWAMBLPT                */
*/*      01 OUTPUTS -  1. VALIDITY CHECKS SUCCESSFUL                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0463
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0463
VALCHECK DS    0H                                                  0464
*   RESPECIFY                                                      0464
*    (RET,                                                         0464
*     RETCODE) RESTRICTED;                                         0464
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0465
*   RESPECIFY                                                      0466
*     RET UNRESTRICTED;                                            0466
*   MWAPFUNC=PDF111;                /* SET FUNCTION CODE             */
         MVI   MWAPFUNC,X'6F'                                      0467
*   MWAVATPT=JSCBSHR;               /* POINT TO THE VAT              */
         L     @14,PSATOLD                                         0468
         L     @14,TCBJSCB(,@14)                                   0468
         L     MWAVATPT,JSCBSHR(,@14)                              0468
*   DO WHILE AMBLVRT^=VATVRT&VATNEXT^=ZERO;/* FIND CORRECT VAT     0469
*                                      EXTENSION                     */
         B     @DE00469                                            0469
@DL00469 DS    0H                                                  0470
*     MWAVATPT=VATNEXT;             /* POINT TO NEXT EXTENSION       */
         L     MWAVATPT,VATNEXT(,MWAVATPT)                         0470
*   END;                                                           0471
@DE00469 L     @14,ACBAMBL(,RACB)                                  0471
         CLC   AMBLVRT(1,@14),VATVRT(MWAVATPT)                     0471
         BE    @DC00469                                            0471
         L     @14,VATNEXT(,MWAVATPT)                              0471
         LTR   @14,@14                                             0471
         BNZ   @DL00469                                            0471
@DC00469 DS    0H                                                  0472
*   IF AMBLENO<=VATENO&             /* IF USER AMBL IS VALID         */
*       ACBAMBL=VATAMBL(AMBLENO) THEN/* CHECK AMBL AGAINST VAT       */
         L     @14,ACBAMBL(,RACB)                                  0472
         CLC   AMBLENO(1,@14),VATENO(MWAVATPT)                     0472
         BH    @RF00472                                            0472
         SLR   @11,@11                                             0472
         IC    @11,AMBLENO(,@14)                                   0472
         SLA   @11,2                                               0472
         C     @14,VATAMBL-4(@11,MWAVATPT)                         0472
         BNE   @RF00472                                            0472
*     DO;                           /* IF AMBL IS VALID              */
*       RESPECIFY                                                  0474
*         R1 RESTRICTED;                                           0474
*       R1=AMBLDTA;                 /* POINT TO DATA AMB             */
         L     R1,AMBLDTA(,@14)                                    0475
*       GEN(DEBCHK (1),TYPE=VERIFY,AM=VSAM);/* VERIFY DATA DEB       */
         DEBCHK (1),TYPE=VERIFY,AM=VSAM
*       IF AMBLIX^=ZERO THEN        /* IF KSDS                       */
         L     @14,ACBAMBL(,RACB)                                  0477
         L     @14,AMBLIX(,@14)                                    0477
         LTR   @14,@14                                             0477
         BZ    @RF00477                                            0477
*         DO;                                                      0478
*           R1=AMBLIX;              /* POINT TO INDEX AMB            */
         LR    R1,@14                                              0479
*           GEN(DEBCHK (1),TYPE=VERIFY,AM=VSAM);/* VERIFY INDEX DEB  */
         DEBCHK (1),TYPE=VERIFY,AM=VSAM
*         END;                                                     0481
*       RESPECIFY                                                  0482
*         R1 UNRESTRICTED;                                         0482
@RF00477 DS    0H                                                  0483
*     END;                                                         0483
*   ELSE                            /* IF AMBL IS INVALID            */
*     DO;                                                          0484
         B     @RC00472                                            0484
@RF00472 DS    0H                                                  0485
*       MWAPCODE=PP78;              /* PROBLEM CODE FOR INVALID AMBL */
         MVI   MWAPCODE,X'4E'                                      0485
*       CLWTERM=ON;                 /* INDICATE TERMINATING ERROR    */
         OI    CLWTERM(RCORE),B'00010000'                          0486
*       CALL PROBDT;                /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT                                          0487
*       RETURN TO LTRM200B;         /* GO TO TERM200B                */
         LA    @14,LTRM200B                                        0488
@EL00003 DS    0H                                                  0488
@EF00003 DS    0H                                                  0488
@ER00003 BR    @14                                                 0488
*     END;                                                         0489
*   MWAVATPT=JSCBSHR;               /* RESTORE VAT POINTER           */
@RC00472 L     @14,PSATOLD                                         0490
         L     @14,TCBJSCB(,@14)                                   0490
         L     MWAVATPT,JSCBSHR(,@14)                              0490
*   RESPECIFY                                                      0491
*     RET RESTRICTED;                                              0491
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        0492
*   RESPECIFY                                                      0493
*    (RET,                                                         0493
*     RETCODE) UNRESTRICTED;                                       0493
*   END VALCHECK;                                                  0494
         B     @EL00003                                            0494
*WRITBUFR:                                                         0495
*                                                                  0495
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - DYNAMICALLY GENERATE RPL, PLH & IO BLOCKS FOR */
*/*                    INTERFACE WITH RECORD MANAGEMENT TO WRITE OUT */
*/*                    BUFFERS                                       */
*/*      01 INPUTS -   1. KEY LENGTH FROM AMDSB                      */
*/*                    2. POINTER TO VAT IN JSCBSHR                  */
*/*      01 OUTPUTS -  1. BUFFERS FOR AMBL WRITTEN OUT               */
*/*                                                                  */
*/* IN VS2 THIS ROUTINE IS CHANGED TO INTERFACE WITH IDA0192Y TO     */
*/* OBTAIN AND BUILD THE I/O BLOCKS NECESSARY FOR THE WRTBFR.       .*/
*/********************************************************************/
*                                                                  0495
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0495
WRITBUFR DS    0H                                                  0496
*   RESPECIFY                                                      0496
*    (RET,                                                         0496
*     RETCODE) RESTRICTED;          /*                       @Y30DSMD*/
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0497
*   RESPECIFY                                                      0498
*     RET UNRESTRICTED;                                            0498
*   PDPFUNC=PDF115;                 /* SET FUNCTION CODE             */
         L     @14,CLWCOMWK(,RCORE)                                0499
         MVI   PDPFUNC+280(@14),X'73'                              0499
*   CLWAMBPT=AMBLDTA;               /* ADDRESSABILITY TO DATA AMB    */
         L     @05,ACBAMBL(,RACB)                                  0500
         L     @11,AMBLDTA(,@05)                                   0500
         ST    @11,CLWAMBPT(,RCORE)                                0500
*   MWABYTES=((LENGTH(IFGRPL)+(FWORDLEN-ONE))&(-FWORDLEN))+LENGTH( 0501
*       MWABUFSA);                  /* BUILD DUMMY RPL AND REGISTER
*                                      SAVE AREA                     */
         MVC   MWABYTES(3),@CF02732+1                              0501
*   IF AMBLGSR=ON THEN              /* IS THIS A GSR DATA SET?     0502
*                                                            @Z30SSMD*/
         TM    AMBLGSR(@05),B'01000000'                            0502
         BNO   @RF00502                                            0502
*     DO;                           /* IF SO THE N USE GSR SUBPOOL 0503
*                                      AND KEY.              @Z30SSMD*/
*       MWASPOOL=GSRSPOOL;          /* USE THE GSR POOL.     @Z30SSMD*/
         MVI   MWASPOOL,X'F1'                                      0504
*       MWAFRKEY=DXUKEY;            /* REQUEST GSR KEY       @Z40ESSR*/
         MVC   MWAFRKEY(1),DXUKEY(@14)                             0505
*     END;                          /* END OF GSR DO GROUP.  @Z30SSMD*/
*   ELSE                            /* OTHERWISE JUST DEFAULT TO   0507
*                                      USERPOOL.             @Z30SSMD*/
*     MWASPOOL=USERPOOL;            /* UNPROTECTED SUBPOOL FOR     0507
*                                      PROBLEM PROGRAM STATE         */
         B     @RC00502                                            0507
@RF00502 MVI   MWASPOOL,X'FA'                                      0507
*   CALL GETCORE;                   /* BUILD DUMMY RPL               */
@RC00502 BAL   @14,GETCORE                                         0508
*   IF MWANOCOR=OFF THEN            /* BUILD DUMMY RPL SUCCESSFUL    */
         TM    MWANOCOR,B'10000000'                                0509
         BNZ   @RF00509                                            0509
*     DO;                                                          0510
*       MWARPLBD=ON;                /* INDICATE DUMMY RPL BUILT      */
         OI    MWARPLBD,B'10000000'                                0511
*       MWARPLPT=MWADDRES;          /* ADDRESSABILITY FOR DUMMY RPL  */
         L     @14,MWADDRES                                        0512
         ST    @14,MWARPLPT                                        0512
*       RPLDACB=RACB;               /* POINT TO USER ACB.    @Y30DSMD*/
         ST    RACB,RPLDACB(,@14)                                  0513
*       IF RACB=DXPACBAD THEN       /* IS THIS ACB THE ACB COPY?   0514
*                                                            @Y30DSMD*/
         L     @05,CLWCOMWK(,RCORE)                                0514
         L     @11,DXPACBAD-1(,@05)                                0514
         LA    @11,0(,@11)                                         0514
         CR    RACB,@11                                            0514
         BNE   @RF00514                                            0514
*         DO;                       /* PROCESS THE ACB COPY. @Y30DSMD*/
*           RPLDACB=DXUACBAD;       /* IF SO , POINT TO USER ACB NOT
*                                      COPY.                         */
         L     @05,DXUACBAD-1(,@05)                                0516
         LA    @05,0(,@05)                                         0516
         ST    @05,RPLDACB(,@14)                                   0516
*           DXUACBAD->ACBDEB->DEBDCBB=DXUACBAD;/* POINT DDEB TO USER
*                                      ACB.                          */
         L     @14,ACBDEB-1(,@05)                                  0517
         STCM  @05,7,DEBDCBB(@14)                                  0517
*           DXUACBAD->ACBAMBL->AMBLACB=DXUACBAD;/* POINT AMBL TO USER
*                                      ACB                           */
         L     @14,ACBAMBL(,@05)                                   0518
         ST    @05,AMBLACB(,@14)                                   0518
*         END;                      /* END OF COPY ACB PROCESSING. 0519
*                                                            @Y30DSMD*/
*       CALL WRBUFFER;              /* CALL ROUTINE TO ISSUE WRTBFR  */
@RF00514 BAL   @14,WRBUFFER                                        0520
*       IF RETCODE=EIGHT&RPLFDBK=RPLNOPLH THEN/* IF PLH NOT AVAILABLE*/
         C     RETCODE,@CF00037                                    0521
         BNE   @RF00521                                            0521
         L     @14,MWARPLPT                                        0521
         CLC   RPLFDBK(3,@14),@CF00214+1                           0521
         BNE   @RF00521                                            0521
*         DO;                       /* GET ONE FROM IDA0192Y @Y30DSMD*/
*           MWASAVED=RCORE;         /* SAVE POINTER TO ACB WORKAREA  */
         LR    MWASAVED,RCORE                                      0523
*           MWASAVEE=RACB;          /* SAVE THE ACB POINTER. @Y30DSMD*/
         LR    MWASAVEE,RACB                                       0524
*           RCORE=ADDR(FORCORE);    /* GET POINTER TO COMMON WORKAREA*/
         L     RCORE,CLWCOMWK(,RCORE)                              0525
*           BLPFLAGS=ZERO;          /* CLEAR THE PARAMETER LIST FLAGS
*                                                            @Z30SSRL*/
         LA    @14,MWABLPRM                                        0526
         SLR   @06,@06                                             0526
         STH   @06,BLPFLAGS(,@14)                                  0526
*           IF AMBLGSR=ON THEN      /* IS THIS A GSR DATA SET?     0527
*                                                            @Y30DSMD*/
         L     @06,ACBAMBL(,RACB)                                  0527
         TM    AMBLGSR(@06),B'01000000'                            0527
         BNO   @RF00527                                            0527
*             BLPFGSR=ON;           /* IF SO SET P/L SWITCH. @Y30DSMD*/
         OI    BLPFGSR(@14),B'00001000'                            0528
*           ELSE                    /* IF NOT THEN IT IS LSR.      0529
*                                                            @Y30DSMD*/
*             BLPFLSR=ON;           /* INDICATE LSR REQUEST  @Y30DSMD*/
         B     @RC00527                                            0529
@RF00527 LA    @14,MWABLPRM                                        0529
         OI    BLPFLSR(@14),B'00010000'                            0529
*           BLPFBLD=ON;             /* INDICATE BUILD REQUEST      0530
*                                                            @Y30DSMD*/
@RC00527 LA    @14,MWABLPRM                                        0530
         OI    BLPFBLD(@14),B'01000000'                            0530
*           BLPFIOSR=ON;            /* INDICATE I/O SUPPORT REQUEST  */
         OI    BLPFIOSR(@14),B'00000010'                           0531
*           RACB=MWARPLPT;          /* ADDRESS OF PSUEDO PARM LIST   */
         L     RACB,MWARPLPT                                       0532
*           CALL IDA0192Y;          /* CALL BLDVRP ROUTINE   @Y30DSMD*/
         L     @15,@CV04985                                        0533
         BALR  @14,@15                                             0533
*           RCORE->RSTATRTN=IDAR200B;/* NOTE 200B IN CONTROL @Y30DSMD*/
         MVC   RSTATRTN(4,RCORE),@CC03816                          0534
*           RCORE=MWASAVED;         /* RESTORE ADDRESS OF CLOSE W.A. */
         LR    RCORE,MWASAVED                                      0535
*           RACB=MWASAVEE;          /* RESTORE POINTER TO DATA SET 0536
*                                      ACB                           */
         LR    RACB,MWASAVEE                                       0536
*           IF RETCODE^=ZERO THEN   /* IF ERROR EXIST        @Z30SSRL*/
         LTR   RETCODE,RETCODE                                     0537
         BZ    @RF00537                                            0537
*             DO;                   /*                       @Z30SSRL*/
*               MWAPCODE=PP20;      /* SET PROBLEM CODE      @Y30DSMD*/
         MVI   MWAPCODE,X'14'                                      0539
*               CALL PROBDT;        /* CALL PROBLEM DETERMINATION    */
         BAL   @14,PROBDT                                          0540
*             END;                  /*                       @Y30DSMD*/
*           ELSE                    /* CONTINUE WITH WRTBFR  @Z30SSRL*/
*             DO;                   /*                       @Z30SSRL*/
         B     @RC00537                                            0542
@RF00537 DS    0H                                                  0543
*               BLPFLAGS=ZERO;      /* CLEAR THE PARAMETER LIST FLAGS
*                                                            @Z30SSRL*/
         LA    @14,MWABLPRM                                        0543
         SLR   @05,@05                                             0543
         STH   @05,BLPFLAGS(,@14)                                  0543
*               RPLPLHPT=BLPIOPLH;  /* POINT TO PLH FROM 192Y      0544
*                                                            @Z30SSRL*/
         L     @14,BLPIOPLH(,@14)                                  0544
         L     @05,MWARPLPT                                        0544
         ST    @14,RPLPLHPT(,@05)                                  0544
*               CALL WRBUFFER;      /* CALL ROUTINE TO ISSUE WRTBFR  */
         BAL   @14,WRBUFFER                                        0545
*               IF RETCODE^=ZERO THEN/* IF WRTBFR ERROR EXIST      0546
*                                                            @Z30SSRL*/
         LTR   RETCODE,RETCODE                                     0546
         BZ    @RF00546                                            0546
*                 DO;               /*                       @Z30SSRL*/
*                   MWAPCODE=PP128; /* SET PROBLEM CODE      @Y30DSMD*/
         MVI   MWAPCODE,X'80'                                      0548
*                   CALL PROBDT;    /* CALL PROBLEM DETERMINATION    */
         BAL   @14,PROBDT                                          0549
*                 END;              /*                       @Y30DSMD*/
*               MWASAVED=RCORE;     /* SAVE POINTER TO ACB WORKAREA  */
@RF00546 LR    MWASAVED,RCORE                                      0551
*               MWASAVEE=RACB;      /* SAVE POINTER TO DATA SET ACB.
*                                                            @Y30DSMD*/
         LR    MWASAVEE,RACB                                       0552
*               RCORE=ADDR(FORCORE);/* GET POINTER TO COMMON WORKAREA*/
         L     RCORE,CLWCOMWK(,RCORE)                              0553
*               BLPFLAGS=ZERO;      /* CLEAR THE PARAMETER LIST FLAGS
*                                                            @Z30SSRL*/
         LA    @14,MWABLPRM                                        0554
         SLR   @06,@06                                             0554
         STH   @06,BLPFLAGS(,@14)                                  0554
*               IF AMBLGSR=ON THEN  /* IS THIS A GSR DATA SET?     0555
*                                                            @Y30DSMD*/
         L     @06,ACBAMBL(,RACB)                                  0555
         TM    AMBLGSR(@06),B'01000000'                            0555
         BNO   @RF00555                                            0555
*                 BLPFGSR=ON;       /* IS SO THEN SW P/L SWITCH.   0556
*                                                            @Y30DSMD*/
         OI    BLPFGSR(@14),B'00001000'                            0556
*               ELSE                /* IF NOT THEN SET IT AS LSR.  0557
*                                                            @Y30DSMD*/
*                 BLPFLSR=ON;       /* INDICATE LSR REQUEST  @Y30DSMD*/
         B     @RC00555                                            0557
@RF00555 LA    @14,MWABLPRM                                        0557
         OI    BLPFLSR(@14),B'00010000'                            0557
*               BLPFDEL=ON;         /* INDICATE DELETE REQUEST     0558
*                                                            @Y30DSMD*/
@RC00555 LA    @14,MWABLPRM                                        0558
         OI    BLPFDEL(@14),B'00100000'                            0558
*               BLPFIOSR=ON;        /* INDICATE I/O SUPPORT REQUEST  */
         OI    BLPFIOSR(@14),B'00000010'                           0559
*               RACB=MWARPLPT;      /* ADDRESS OF PSUEDO PARM LIST   */
         L     RACB,MWARPLPT                                       0560
*               CALL IDA0192Y;      /* CALL DELVRP ROUTINE   @Y30DSMD*/
         L     @15,@CV04985                                        0561
         BALR  @14,@15                                             0561
*               RCORE->RSTATRTN=IDAR200B;/* NOTE 200B IN CONTROL   0562
*                                                            @Y30DSMD*/
         MVC   RSTATRTN(4,RCORE),@CC03816                          0562
*               RCORE=MWASAVED;     /* RESTORE ADDRESS OF CLOSE W.A. */
         LR    RCORE,MWASAVED                                      0563
*               RACB=MWASAVEE;      /* RESTORE POINTER TO COPIED ACB */
         LR    RACB,MWASAVEE                                       0564
*             END;                  /* END OF LOGIC IF P/L OBTAINED.
*                                                            @Y30DSMD*/
*         END;                      /* END OF LOGIC IF PLH NOT     0566
*                                      AVAILABLE.            @Y30DSMD*/
*       ELSE                        /* IF PLH AVAILABLE      @Z30SSRL*/
*         DO;                                                      0567
         B     @RC00521                                            0567
@RF00521 DS    0H                                                  0568
*           IF RETCODE^=ZERO THEN   /* IF WRTBFR ERROR EXIST @Z30SSRL*/
         LTR   RETCODE,RETCODE                                     0568
         BZ    @RF00568                                            0568
*             DO;                                                  0569
*               MWAPCODE=PP128;     /* SET PROBLEM CODE      @Y30DSMD*/
         MVI   MWAPCODE,X'80'                                      0570
*               CALL PROBDT;        /* CALL PROBLEM DETERMINATION    */
         BAL   @14,PROBDT                                          0571
*             END;                  /* END OF WRTBFR ERROR LOGIC.  0572
*                                                            @Y30DSMD*/
*         END;                      /* END OF LOGIC FOR PLH        0573
*                                      AVAILABLE.            @Y30DSMD*/
@RF00568 DS    0H                                                  0574
*     END;                          /* END OF RPL OBTAINED DO GROUP.
*                                                            @Z30SSMD*/
@RC00521 DS    0H                                                  0575
*   IF MWARPLBD=ON THEN             /* IF DUMMY RPL EXIST            */
@RF00509 TM    MWARPLBD,B'10000000'                                0575
         BNO   @RF00575                                            0575
*     DO;                           /* LOGIC IF RPL WAS OBTAINED.    */
*       MWADDRES=MWARPLPT;          /* POINT TO DUMMY RPL            */
         L     @14,MWARPLPT                                        0577
         ST    @14,MWADDRES                                        0577
*       IF AMBLGSR=ON THEN          /* IS THIS A GSR DATA SET?     0578
*                                                            @Z30SSMD*/
         L     @14,ACBAMBL(,RACB)                                  0578
         TM    AMBLGSR(@14),B'01000000'                            0578
         BNO   @RF00578                                            0578
*         DO;                       /* IF SO THE N USE GSR SUBPOOL 0579
*                                      AND KEY.              @Z30SSMD*/
*           MWASPOOL=GSRSPOOL;      /* USE THE GSR POOL.     @Z30SSMD*/
         MVI   MWASPOOL,X'F1'                                      0580
*           MWAFRKEY=DXUKEY;        /* REQUEST GSR KEY       @Z40ESSR*/
         L     @14,CLWCOMWK(,RCORE)                                0581
         MVC   MWAFRKEY(1),DXUKEY(@14)                             0581
*         END;                      /* END OF GSR DO GROUP.  @Z30SSMD*/
*       ELSE                        /* OTHERWISE JUST DEFAULT TO   0583
*                                      USERPOOL.             @Z30SSMD*/
*         MWASPOOL=USERPOOL;        /* UNPROTECTED SUBPOOL NUMBER    */
         B     @RC00578                                            0583
@RF00578 MVI   MWASPOOL,X'FA'                                      0583
*       MWABYTES=LENGTH(IFGRPL)+LENGTH(MWABUFSA);/* SIZE OF DUMMY RPL
*                                      AND REGISTER SAVE AREA        */
@RC00578 MVC   MWABYTES(3),@CF02732+1                              0584
*       CALL FREECORE;              /* FREE DUMMY RPL AND RELATED  0585
*                                      CORE                          */
         BAL   @14,FREECORE                                        0585
*     END;                          /* END OF LOGIC IF RPL OBTAINED.
*                                                            @Y30DSMD*/
*   CLWAMBPT=ZERO;                  /* ZERO AMB POINTER IN CLW       */
@RF00575 SLR   @14,@14                                             0587
         ST    @14,CLWAMBPT(,RCORE)                                0587
*   IF RACB=DXPACBAD THEN           /* IS THIS ACB THE COPY ACB?   0588
*                                                            @Y30DSMD*/
         L     @14,CLWCOMWK(,RCORE)                                0588
         L     @05,DXPACBAD-1(,@14)                                0588
         LA    @05,0(,@05)                                         0588
         CR    RACB,@05                                            0588
         BNE   @RF00588                                            0588
*     DO;                           /* PROCESS THE AFFECTED BLOCKS.
*                                                            @Y30DSMD*/
*       DXUACBAD->ACBDEB->DEBDCBB=DXPACBAD;/* POINT TO COPY ACB      */
         L     @14,DXUACBAD-1(,@14)                                0590
         LA    @14,0(,@14)                                         0590
         L     @01,ACBDEB-1(,@14)                                  0590
         STCM  @05,7,DEBDCBB(@01)                                  0590
*       DXUACBAD->ACBAMBL->AMBLACB=DXPACBAD;/* POINT TO COPY ACB.    */
         L     @14,ACBAMBL(,@14)                                   0591
         ST    @05,AMBLACB(,@14)                                   0591
*     END;                          /* END OF SPECIAL COPY ACB     0592
*                                      PROCESSING.           @Y30DSMD*/
*   RESPECIFY                                                      0593
*     RET RESTRICTED;                                              0593
@RF00588 DS    0H                                                  0594
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        0594
*   RESPECIFY                                                      0595
*    (RET,                                                         0595
*     RETCODE) UNRESTRICTED;        /*                       @Y30DSMD*/
*   END WRITBUFR;                                                  0596
@EL00004 DS    0H                                                  0596
@EF00004 DS    0H                                                  0596
@ER00004 BR    @14                                                 0596
*WRBUFFER:                                                         0597
*                                                                  0597
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - INTERFACE WITH RECORD MANAGEMENT TO WRITE OUT */
*/*                    BUFFERS                                       */
*/*      01 INPUTS -   1. ADDRESS OF DUMMY RPL IN MWARPLPT           */
*/*      01 OUTPUTS -  1. WRTBFR PERFORMED                           */
*/*                                                                  */
*/* THIS ROUTINE IS ALTERED FOR VS2. THE R/M INTERFACE HAS          .*/
*/* CHANGED FOR VSAM REL 2. R/M WILL RETURN CONTROL IN THE KEY OF    */
*/* IOMCKEY (FOR GSR THIS MEANS KEY 7). ALSO R/M WILL BE BRANCHED TO */
*/* FOR GSR DATA SETS IN ORDER TO KEEP THE SUPERVISOR STATE  BIT     */
*/* SINCE SYNCH WILL FORCE PROBLEM STATE.                           .*/
*/********************************************************************/
*                                                                  0597
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0597
WRBUFFER DS    0H                                                  0598
*   RESPECIFY                                                      0598
*    (R0,                                                          0598
*     R1,                                                          0598
*     R6,                                                          0598
*     R7,                                                          0598
*     RET,                                                         0598
*     RETCODE) RESTRICTED;          /*                       @Z30SSMD*/
*   MWASAVEC=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEC                                        0599
*   RESPECIFY                                                      0600
*     RET UNRESTRICTED;                                            0600
*   STM(RACB,R13,XRBESA);           /* SAVE REGISTER IN RB SAVE AREA */
         L     @14,PSATOLD                                         0601
         L     @14,TCBRBP(,@14)                                    0601
         STM   RACB,R13,XRBESA(@14)                                0601
*   R6=R13;                         /* GET ADDRESSABILITY            */
         LR    R6,R13                                              0602
*   GEN(DROP R13);                  /* DROP R13 AS BASE REGISTER     */
         DROP R13
*   GEN(USING @DATD,R6);            /* TEMPORORY ADDRESSABILITY      */
         USING @DATD,R6
*   R0=RPLWRTB;                     /* INDICATE WRTBFR REQUEST       */
         LA    R0,15                                               0605
*   R1=MWARPLPT;                    /* POINT TO DUMMY RPL            */
         L     R1,MWARPLPT                                         0606
*   R13=(R1+LENGTH(IFGRPL)+(FWORDLEN-ONE))&(-FWORDLEN);/* PT TO REG
*                                      SAVE AREA ON FULL WORD BDY    */
         LA    R13,79                                              0607
         ALR   R13,R1                                              0607
         N     R13,@CF05073                                        0607
*   R15=BIBINTRF;                   /* ADDRESS OF INTERFACE ROUTINE  */
         L     @05,ACBAMBL(,RACB)                                  0608
         L     @14,AMBLBIB(,@05)                                   0608
         L     R15,BIBINTRF(,@14)                                  0608
*   R7=ADDR(RBGRS2);                /* POINT TO USER REGISTER SAVE 0609
*                                      AREA                          */
         L     @14,PSATOLD                                         0609
         L     R7,TCBRBP(,@14)                                     0609
         LA    R7,RBGRS2(,R7)                                      0609
*   IF AMBLLSR=ON THEN              /* IF THIS IS JUST LSR CONTINUE.
*                                                            @Y30DSMD*/
         TM    AMBLLSR(@05),B'00100000'                            0610
         BNO   @RF00610                                            0610
*     DO;                           /* BY DOING SYNCH TO R/M FOR   0611
*                                      WRBFR.                @Y30DSMD*/
*       GEN(LM RACB,R12,0(R7));     /* RESTORE USER'S REGISTERS    0612
*                                                            @Z30SSMD*/
         LM RACB,R12,0(R7)
*       GEN(SYNCH (15));            /* GO TO WRTBFR IN USER KEY      */
         SYNCH (15)
*       LM(RACB,R13,XRBESA);        /* RESTORE REGISTERS             */
         L     @14,PSATOLD                                         0614
         L     @14,TCBRBP(,@14)                                    0614
         LM    RACB,R13,XRBESA(@14)                                0614
*       GEN(DROP R6);               /* DROP TEMPORORY ADDRESSABILITY */
         DROP R6
*       GEN(USING @DATD,R13);       /* REESTABLISH ADDRESSABILITY    */
         USING @DATD,R13
*     END;                          /* END OF LOGIC FOR LSR ONLY.  0617
*                                                            @Y30DSMD*/
*   ELSE                            /* PROCESS NON-LSR BUFFERS     0618
*                                                            @Z30SSRL*/
*     DO;                                                          0618
         B     @RC00610                                            0618
@RF00610 DS    0H                                                  0619
*       GEN( DROP R13);             /* R13 IS NOT USABLE AT THIS   0619
*                                      POINT.                @Z30SSMD*/
          DROP R13
*       GEN( USING @DATD,R6);       /* SO USE R13 AS SAVED IN R6.  0620
*                                                            @Z30SSMD*/
          USING @DATD,R6
*       IF AMBLGSR=ON THEN          /* IF THIS IS GSR CONTINUE.    0621
*                                                            @Z30SSMD*/
         L     @14,ACBAMBL(,RACB)                                  0621
         TM    AMBLGSR(@14),B'01000000'                            0621
         BNO   @RF00621                                            0621
*         DO;                       /* BY DOING BRANCH TO R/M FOR  0622
*                                      WRBFR.                @Y30DSMD*/
*           RFY                                                    0623
*             R14 RSTD;             /*                       @Z40ESSR*/
*           R14=DXUKEY;             /* LOAD USER KEY INTO REG      0624
*                                                            @Z40ESSR*/
         L     @05,CLWCOMWK(,RCORE)                                0624
         SLR   R14,R14                                             0624
         IC    R14,DXUKEY(,@05)                                    0624
*           SPKA(R14);              /* MODESET TO USER KEY   @Z40ESSR*/
         SPKA  0(R14)                                              0625
*           RFY                                                    0626
*             R14 UNRSTD;           /*                       @Z40ESSR*/
*           GEN(LM RACB,R12,0(R7)); /* RESTORE USER'S REGISTERS    0627
*                                                            @Z40ESSR*/
         LM RACB,R12,0(R7)
*           GEN(BALR  14,15 );      /* GO TO WRTBFR IN PRIV KEY    0628
*                                                            @Y30DSMD*/
         BALR  14,15
*           GEN( MODESET EXTKEY=ZERO);/* INSURE KEY ZERO.    @Y30DSMD*/
          MODESET EXTKEY=ZERO
*           LM(RACB,R13,XRBESA);    /* RESTORE REGISTERS     @Y30DSMD*/
         L     @14,PSATOLD                                         0630
         L     @14,TCBRBP(,@14)                                    0630
         LM    RACB,R13,XRBESA(@14)                                0630
*           GEN(DROP R6);           /* DROP TEMPORORY ADDRESSABILITY */
         DROP R6
*           GEN(USING @DATD,R13);   /* REESTABLISH ADDRESSABILITY    */
         USING @DATD,R13
*         END;                      /* END OF LOGIC FOR GSR ONLY.  0633
*                                                            @Y30DSMD*/
*     END;                          /* END OF DO GROUP FOR GSR ONLY.
*                                                            @Z30SSMD*/
@RF00621 DS    0H                                                  0635
*   IF RETCODE^=ZERO THEN           /* ERROR IN WRTBFR               */
@RC00610 LTR   RETCODE,RETCODE                                     0635
         BZ    @RF00635                                            0635
*     DO;                                                          0636
*       CLWCNOUP=ON;                /* INDICATE NO CATALOG UPDATE    */
         OI    CLWCNOUP(RCORE),B'01000000'                         0637
*       MWAPCODE=PP128;             /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'80'                                      0638
*       CALL PROBDT;                /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT                                          0639
*     END;                                                         0640
*   RESPECIFY                                                      0641
*     RET RESTRICTED;                                              0641
@RF00635 DS    0H                                                  0642
*   RET=MWASAVEC;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEC                                        0642
*   RESPECIFY                                                      0643
*    (R0,                                                          0643
*     R1,                                                          0643
*     R6,                                                          0643
*     R7,                                                          0643
*     RET,                                                         0643
*     RETCODE) UNRESTRICTED;        /*                       @Z30SSMD*/
*   END WRBUFFER;                                                  0644
@EL00005 DS    0H                                                  0644
@EF00005 DS    0H                                                  0644
@ER00005 BR    @14                                                 0644
*SHARE:                                                            0645
*                                                                  0645
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - SEARCH FOR CONCURRENT USER OF RESOURCES       */
*/*                    DEQ ALL UNUSED RESOURCES                      */
*/*      01 INPUTS -   1. POINTER TO AMB IN CLWAMBPT                 */
*/*      01 OUTPUTS -  1. RESOURCES NOT CONCURRENTLY USED WERE DEQ   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0645
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0645
SHARE    DS    0H                                                  0646
*   RESPECIFY                                                      0646
*     RET RESTRICTED;                                              0646
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0647
*   RESPECIFY                                                      0648
*     RET UNRESTRICTED;                                            0648
*   MWAVATPT=JSCBSHR;               /* POINT TO FIRST VAT            */
         L     @01,PSATOLD                                         0649
         L     @01,TCBJSCB(,@01)                                   0649
         L     MWAVATPT,JSCBSHR(,@01)                              0649
*   MWASWTCH=OFF;                   /* IND OTHER STRUCTURE EXIST     */
         NI    MWASWTCH,B'01111111'                                0650
*   MWAOUTSW=OFF;                   /* IND OTHER OUTPUT STRUCTURE  0651
*                                      EXIST                         */
         NI    MWAOUTSW,B'01111111'                                0651
*   DO WHILE MWAVATPT^=ZERO&        /* LOOP UNTIL VAT END OR         */
*         MWAOUTSW=OFF;             /* STRUCTURE FOR OUTPUT FOUND    */
         B     @DE00652                                            0652
@DL00652 DS    0H                                                  0653
*     DO MWAINDEX=1 TO VATENO;      /* INDEX FOR AMBL ENTRY          */
         LA    MWAINDEX,1                                          0653
         B     @DE00653                                            0653
@DL00653 DS    0H                                                  0654
*       IF VATAMBL(MWAINDEX)^=ZERO& /* IF NOT AN INACTIVE AMBL AND   */
*           VATAMBL(MWAINDEX)->AMBLDTA^=AMBLDTA&/* NOT OWN DATA AMB  */
*           MWAOUTSW=OFF THEN       /* STRUCTURE FOR OUTPUT NOT FOUND*/
         SLR   @08,@08                                             0654
         LR    @15,MWAINDEX                                        0654
         SLA   @15,2                                               0654
         L     @15,VATAMBL-4(@15,MWAVATPT)                         0654
         CR    @15,@08                                             0654
         BE    @RF00654                                            0654
         L     @01,ACBAMBL(,RACB)                                  0654
         CLC   AMBLDTA(4,@15),AMBLDTA(@01)                         0654
         BE    @RF00654                                            0654
         TM    MWAOUTSW,B'10000000'                                0654
         BNZ   @RF00654                                            0654
*         DO;                                                      0655
*           RESPECIFY                                              0656
*             IDAAMBL BASED(MWAMBLPT);                             0656
*           MWAMBLPT=VATAMBL(MWAINDEX);/* POINT TO AMBL IN VAT       */
         LR    MWAMBLPT,@15                                        0657
*           IF((AMBLIX^=ZERO&       /* INDEX AMB EXIST AND           */
*               AMBLIX->AMBCACB=AMBCACB&/* INDEX AMB'S CATALOG ACB 0658
*                                      MATCH                         */
*               AMBLIX->AMBDDSN=AMBDDSN)×/* AND DATA SET NAME MATCH
*                                      OR                            */
*               (AMBLDTA->AMBCACB=AMBCACB&/* DATA AMB'S CATALOG ACB
*                                      MATCH                         */
*               AMBLDTA->AMBDDSN=AMBDDSN)) THEN/* AND DATA SET NAME
*                                      MATCH                         */
         L     @07,AMBLIX(,MWAMBLPT)                               0658
         CR    @07,@08                                             0658
         BE    @GL00012                                            0658
         L     @08,CLWAMBPT(,RCORE)                                0658
         CLC   AMBCACB(4,@07),AMBCACB(@08)                         0658
         BNE   @GL00012                                            0658
         CLC   AMBDDSN(3,@07),AMBDDSN(@08)                         0658
         BE    @RT00658                                            0658
@GL00012 L     @08,AMBLDTA(,MWAMBLPT)                              0658
         L     @07,CLWAMBPT(,RCORE)                                0658
         CLC   AMBCACB(4,@08),AMBCACB(@07)                         0658
         BNE   @RF00658                                            0658
         CLC   AMBDDSN(3,@08),AMBDDSN(@07)                         0658
         BNE   @RF00658                                            0658
@RT00658 DS    0H                                                  0659
*             DO;                                                  0659
*               MWASWTCH=ON;        /* SET SWITCH TO INDICATE        */
         OI    MWASWTCH,B'10000000'                                0660
*               IF CMBOUT=ON THEN   /* TEST FOR OTHER STRUCTURE      */
         L     @08,AMBLCMB(,MWAMBLPT)                              0661
         TM    CMBOUT(@08),B'10000000'                             0661
         BNO   @RF00661                                            0661
*                 MWAOUTSW=ON;      /* IND OTHER STRUCTURE FOR OUTPUT
*                                      EXIST                         */
         OI    MWAOUTSW,B'10000000'                                0662
*             END;                                                 0663
@RF00661 DS    0H                                                  0664
*           RESPECIFY                                              0664
*             IDAAMBL BASED(ACBAMBL);                              0664
@RF00658 DS    0H                                                  0665
*         END;                                                     0665
*     END;                                                         0666
@RF00654 AL    MWAINDEX,@CF00051                                   0666
@DE00653 SLR   @08,@08                                             0666
         IC    @08,VATENO(,MWAVATPT)                               0666
         CR    MWAINDEX,@08                                        0666
         BNH   @DL00653                                            0666
*     MWAVATPT=VATNEXT;             /* POINT TO NEXT VAT             */
         L     MWAVATPT,VATNEXT(,MWAVATPT)                         0667
*   END;                                                           0668
@DE00652 LTR   MWAVATPT,MWAVATPT                                   0668
         BZ    @DC00652                                            0668
         TM    MWAOUTSW,B'10000000'                                0668
         BZ    @DL00652                                            0668
@DC00652 DS    0H                                                  0669
*   MWAVATPT=JSCBSHR;               /* RESET VAT POINTED TO JSCBSHR  */
         L     @01,PSATOLD                                         0669
         L     @01,TCBJSCB(,@01)                                   0669
         L     MWAVATPT,JSCBSHR(,@01)                              0669
*   CALL SHAREDEQ;                  /* DEQ RESOURCES                 */
         BAL   @14,SHAREDEQ                                        0670
*   RESPECIFY                                                      0671
*     RET RESTRICTED;                                              0671
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        0672
*   RESPECIFY                                                      0673
*     RET UNRESTRICTED;                                            0673
*   END SHARE;                                                     0674
@EL00006 DS    0H                                                  0674
@EF00006 DS    0H                                                  0674
@ER00006 BR    @14                                                 0674
*SHAREDEQ:                                                         0675
*                                                                  0675
*/********************************************************************/
*/*      01 FUNCTION - ISSUE DEQ FOR RESOURCES THAT ARE NO LONGER    */
*/*                    NEEDED                                        */
*/*      01 INPUTS -   1. ADDRESS OF AMB IN CLWAMBPT                 */
*/*      01 OUTPUTS -  1. RESOURCES THAT ARE NOT NEEDED WERE DEQUEUED*/
*/*                                                                  */
*/********************************************************************/
*                                                                  0675
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0675
SHAREDEQ DS    0H                                                  0676
*   RESPECIFY                                                      0676
*    (RET,                                                         0676
*     RETCODE) RESTRICTED;                                         0676
*   MWASAVEB=RET;                   /* GET RETURN ADDRESS            */
         ST    RET,MWASAVEB                                        0677
*   RESPECIFY                                                      0678
*     RET UNRESTRICTED;                                            0678
*   ENQDIR=ON;                      /* INDICATE ENQ DIRECTED         */
         OI    ENQDIR,B'00000001'                                  0679
*   ENQRNCI=AMBDDSN;                /* CI NUMBER FOR RNAME           */
         L     @14,CLWAMBPT(,RCORE)                                0680
         MVC   ENQRNCI(3),AMBDDSN(@14)                             0680
*   ENQRNACB=AMBCACB;               /* ACB ADDRESS IN RNAME          */
         MVC   ENQRNACB(4),AMBCACB(@14)                            0681
*   ENQEND=ON;                      /* INDICATE LAST ENTRY           */
         OI    ENQEND,B'10000000'                                  0682
*   IF CMBOUT=ON&MWAOUTSW=OFF THEN  /* OUTPUT INDICATED AND NO OHTER
*                                      OUTPUT STRUCTURE IN REGION    */
         L     @14,ACBAMBL(,RACB)                                  0683
         L     @14,AMBLCMB(,@14)                                   0683
         TM    CMBOUT(@14),B'10000000'                             0683
         BNO   @RF00683                                            0683
         TM    MWAOUTSW,B'10000000'                                0683
         BNZ   @RF00683                                            0683
*     DO;                                                          0684
*       ENQRNIND='O';               /* INDICATE OUTPUT FOR DEQ       */
         MVI   ENQRNIND,C'O'                                       0685
*       ENQOPT2=ENQOPT2&&ENQOPT2;   /* ZERO OPTION BYTE              */
         XC    ENQOPT2(1),ENQOPT2                                  0686
*       GEN(DEQ (,,,SYSTEM),MF=(E,ENQENTRY));/* DEQ FOR OUTPUT       */
         DEQ (,,,SYSTEM),MF=(E,ENQENTRY)
*       ENQOPT2=ENQOPT2&&ENQOPT2;   /* ZERO OPTION BYTE              */
         XC    ENQOPT2(1),ENQOPT2                                  0688
*       GEN(ENQ (,,E,,SYSTEM),MF=(E,ENQENTRY),RET=TEST);/* IS THIS 0689
*                                      LAST ENQ IN REGION FOR OUTPUT */
         ENQ (,,E,,SYSTEM),MF=(E,ENQENTRY),RET=TEST
*       IF RETCODE=ZERO THEN        /* IF LAST ENQ IN REGION FOR   0690
*                                      OUTPUT                        */
         LTR   RETCODE,RETCODE                                     0690
         BNZ   @RF00690                                            0690
*         DO;                                                      0691
*           MWAOPEN=MWAOPEN&&MWAOPEN;/* RESET OPEN INDICATOR BYTE    */
         L     @14,CLWAMBPT(,RCORE)                                0692
         L     @14,AMBWKA(,@14)                                    0692
         XC    MWAOPEN(1,@14),MWAOPEN(@14)                         0692
*           MWAOUTBT=ON;            /* INDICATE OPENNED FOR OUTPUT   */
         OI    MWAOUTBT(@14),B'10000000'                           0693
*         END;                                                     0694
*       IF MWASWTCH=OFF THEN        /* NO OTHER STRUCTURES EXIST     */
@RF00690 TM    MWASWTCH,B'10000000'                                0695
         BNZ   @RF00695                                            0695
*         DO;                                                      0696
*           ENQRNIND='I';           /* INDICATE DEQ IN-USE RESOURCES */
         MVI   ENQRNIND,C'I'                                       0697
*           ENQOPT2=ENQOPT2&&ENQOPT2;/* ZERO OPTION BYTE             */
         XC    ENQOPT2(1),ENQOPT2                                  0698
*           GEN(DEQ (,,,SYSTEM),MF=(E,ENQENTRY));/* DEQ FOR IN-USE   */
         DEQ (,,,SYSTEM),MF=(E,ENQENTRY)
*         END;                                                     0700
*     END;                                                         0701
@RF00695 DS    0H                                                  0702
*   IF CMBOUT=OFF&MWASWTCH=OFF THEN /* NOT OUTPUT AND NO OTHER     0702
*                                      STRUCTURE EXIST               */
@RF00683 L     @14,ACBAMBL(,RACB)                                  0702
         L     @14,AMBLCMB(,@14)                                   0702
         TM    CMBOUT(@14),B'10000000'                             0702
         BNZ   @RF00702                                            0702
         TM    MWASWTCH,B'10000000'                                0702
         BNZ   @RF00702                                            0702
*     DO;                                                          0703
*       ENQRNIND='I';               /* INDICATE DEQ IN-USE RESOURCES */
         MVI   ENQRNIND,C'I'                                       0704
*       ENQOPT2=ENQOPT2&&ENQOPT2;   /* ZERO OPTION BYTE              */
         XC    ENQOPT2(1),ENQOPT2                                  0705
*       GEN(DEQ (,,,SYSTEM),MF=(E,ENQENTRY));/* DEQ FOR IN-USE       */
         DEQ (,,,SYSTEM),MF=(E,ENQENTRY)
*     END;                                                         0707
*   RESPECIFY                                                      0708
*     RET RESTRICTED;                                              0708
@RF00702 DS    0H                                                  0709
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        0709
*   RESPECIFY                                                      0710
*    (RET,                                                         0710
*     RETCODE) UNRESTRICTED;                                       0710
*   END SHAREDEQ;                                                  0711
@EL00007 DS    0H                                                  0711
@EF00007 DS    0H                                                  0711
@ER00007 BR    @14                                                 0711
*VMTPROC:                                                          0712
*                                                                  0712
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - DECREMENT VMT USE COUNT FOR EACH CLUSTER IN A */
*/*                    PRIMARY CLOSE                                 */
*/*      01 INPUTS -   1. POINTER TO VMT IN BIB                      */
*/*                    2. POINTER TO AMB IN CLWAMBPT                 */
*/*      01 OUTPUTS -  1. VMT PROCESSING COMPLETED                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0712
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0712
VMTPROC  DS    0H                                                  0713
*   RESPECIFY                                                      0713
*     RET RESTRICTED;                                              0713
*   RESPECIFY                                                      0714
*     DEBDASD BASED(MWADEBEX);      /* BASE EXTENT ON POINTER IN MWA */
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0715
*   RESPECIFY                                                      0716
*     RET UNRESTRICTED;                                            0716
*   MWADEBPT=AMBDEBAD;              /* GET ADDRESS OF DEB            */
         L     @11,CLWAMBPT(,RCORE)                                0717
         L     MWADEBPT,AMBDEBAD-1(,@11)                           0717
         LA    MWADEBPT,0(,MWADEBPT)                               0717
*   MWADEBEX=ADDR(DEBBASND);        /* POINT TO FIRST DEB EXTENT     */
         LA    MWADEBEX,DEBBASND(,MWADEBPT)                        0718
*   MWAUCBPT=ZERO;                  /* ZERO UCB POINTER              */
         SLR   MWAUCBPT,MWAUCBPT                                   0719
*   MWASVPTR=ZERO;                  /* ZERO SAVE POINTER             */
         SLR   @11,@11                                             0720
         ST    @11,MWASVPTR                                        0720
*   DO MWACOUNT=1 TO DEBNMEXT;      /* LOOP THROUGH DEB EXTENTS      */
         LA    MWACOUNT,1                                          0721
         B     @DE00721                                            0721
@DL00721 DS    0H                                                  0722
*     IF MWAUCBPT^=DEBUCBAD&MWASVPTR^=DEBUCBAD THEN/* UNPROCESSED UCB*/
         L     @11,DEBUCBAD(,MWADEBEX)                             0722
         CR    MWAUCBPT,@11                                        0722
         BE    @RF00722                                            0722
         C     @11,MWASVPTR                                        0722
         BE    @RF00722                                            0722
*       DO;                                                        0723
*         MWAUCBPT=DEBUCBAD;        /* POINT TO UCB                  */
         LR    MWAUCBPT,@11                                        0724
*         MWASWTCH=OFF;             /* INITIALIZE SWITCH TO OFF      */
         NI    MWASWTCH,B'01111111'                                0725
*         MWAVMTPT=BIBVMT;          /* POINT TO FIRST VMT            */
         L     @11,ACBAMBL(,RACB)                                  0726
         L     @11,AMBLBIB(,@11)                                   0726
         L     MWAVMTPT,BIBVMT(,@11)                               0726
*         DO WHILE MWAVMTPT^=ZERO&MWASWTCH=OFF;/* LOOK THROUGH VMT'S */
         B     @DE00727                                            0727
@DL00727 DS    0H                                                  0728
*           IF VMTDVTYP=UCBTYP(3:4) THEN/* DEVICE TYPE MATCH         */
         CLC   VMTDVTYP(2,MWAVMTPT),UCBTYP+2(MWAUCBPT)             0728
         BNE   @RF00728                                            0728
*             DO;                                                  0729
*               DO MWAINDEX=1 TO VMTNOVOL;/* SCAN VMT VOLUME ENTRIES */
         LA    MWAINDEX,1                                          0730
         B     @DE00730                                            0730
@DL00730 DS    0H                                                  0731
*                 IF VMTUCB(MWAINDEX)=MWAUCBPT THEN/* SAME UCB AS DEB*/
         LR    @11,MWAINDEX                                        0731
         SLA   @11,4                                               0731
         C     MWAUCBPT,VMTUCB-16(@11,MWAVMTPT)                    0731
         BNE   @RF00731                                            0731
*                   VMTUSECT(MWAINDEX)=VMTUSECT(MWAINDEX)-ONE;/*   0732
*                                      UPDATE VMT USE COUNT          */
         L     @15,VMTUSECT-16(@11,MWAVMTPT)                       0732
         BCTR  @15,0                                               0732
         ST    @15,VMTUSECT-16(@11,MWAVMTPT)                       0732
*               END;                                               0733
@RF00731 AL    MWAINDEX,@CF00051                                   0733
@DE00730 CH    MWAINDEX,VMTNOVOL(,MWAVMTPT)                        0733
         BNH   @DL00730                                            0733
*               MWASWTCH=ON;        /* INDICATE DEVICE TYPE MATCH  0734
*                                      FOUND                         */
         OI    MWASWTCH,B'10000000'                                0734
*               MWASVPTR=MWAUCBPT;  /* SAVE PROCESSED UCB ADDRESS    */
         ST    MWAUCBPT,MWASVPTR                                   0735
*             END;                                                 0736
*           ELSE                    /* UNLIKE DEVICE TYPE            */
*             MWAVMTPT=VMTNXT;      /* GO TO NEXT VMT                */
         B     @RC00728                                            0737
@RF00728 L     MWAVMTPT,VMTNXT(,MWAVMTPT)                          0737
*         END;                                                     0738
@RC00728 DS    0H                                                  0738
@DE00727 LTR   MWAVMTPT,MWAVMTPT                                   0738
         BZ    @DC00727                                            0738
         TM    MWASWTCH,B'10000000'                                0738
         BZ    @DL00727                                            0738
@DC00727 DS    0H                                                  0739
*       END;                                                       0739
*     MWADEBEX=MWADEBEX+LENGTH(DEBDASD);/* POINT TO NEXT EXTENT      */
@RF00722 AL    MWADEBEX,@CF00048                                   0740
*   END;                                                           0741
         AL    MWACOUNT,@CF00051                                   0741
@DE00721 SLR   @11,@11                                             0741
         IC    @11,DEBNMEXT(,MWADEBPT)                             0741
         CR    MWACOUNT,@11                                        0741
         BNH   @DL00721                                            0741
*   RESPECIFY                                                      0742
*     DEBDASD BASED(ADDR(DEBBASND));                               0742
*   RESPECIFY                                                      0743
*     RET RESTRICTED;                                              0743
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        0744
*   RESPECIFY                                                      0745
*     RET UNRESTRICTED;                                            0745
*   END VMTPROC;                                                   0746
@EL00008 DS    0H                                                  0746
@EF00008 DS    0H                                                  0746
@ER00008 BR    @14                                                 0746
*UPCATACB:                                                         0747
*                                                                  0747
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - UPDATE CATALOG                                */
*/*      01 INPUTS -   1. CATALOG'S ACB AND DEB                      */
*/*      01 OUTPUTS -  1. CATALOG UPDATE COMPLETE                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0747
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0747
UPCATACB DS    0H                                                  0748
*   RESPECIFY                                                      0748
*     RET RESTRICTED;                                              0748
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0749
*   RESPECIFY                                                      0750
*     RET UNRESTRICTED;                                            0750
*   GEN(STCK MWATIMES);             /* GET TIMESTAMP FROM SYSTEM     */
         STCK MWATIMES
*   MWADEBPT=AMBLDTA->AMBCACB;      /* POINT TO CATALOG ACB          */
         L     @11,ACBAMBL(,RACB)                                  0752
         L     @11,AMBLDTA(,@11)                                   0752
         L     MWADEBPT,AMBCACB(,@11)                              0752
*   MWADEBPT=MWADEBPT->ACBAMBL->AMBLDTA->AMBDEBPT;/* GET POINTER TO
*                                      CATALOG'S DEB                 */
         L     @09,ACBAMBL(,MWADEBPT)                              0753
         L     @09,AMBLDTA(,@09)                                   0753
         L     @09,AMBDEBPT(,@09)                                  0753
         LR    MWADEBPT,@09                                        0753
*   MWAUCBPT=DEBUCBA;               /* GET UCB ADDRRESS              */
         L     MWAUCBPT,DEBUCBA+31(,MWADEBPT)                      0754
         LA    MWAUCBPT,0(,MWAUCBPT)                               0754
*   CLWAMBPT=AMBLDTA;               /* POINT TO DATA AMB             */
         ST    @11,CLWAMBPT(,RCORE)                                0755
*   CALL UPCATDEQ;                  /* DO CATALOG UPDATE FOR DATA AMB*/
         BAL   @14,UPCATDEQ                                        0756
*   IF AMBLIX^=ZERO THEN            /* IF KSDS                       */
         L     @11,ACBAMBL(,RACB)                                  0757
         L     @11,AMBLIX(,@11)                                    0757
         LTR   @11,@11                                             0757
         BZ    @RF00757                                            0757
*     DO;                                                          0758
*       CLWAMBPT=AMBLIX;            /* POINT TO INDEX AMB            */
         ST    @11,CLWAMBPT(,RCORE)                                0759
*       CALL UPCATDEQ;              /* DO CATALOG UPDATE FOR INDEX 0760
*                                      AMB                           */
         BAL   @14,UPCATDEQ                                        0760
*     END;                                                         0761
*   RESPECIFY                                                      0762
*     RET RESTRICTED;                                              0762
@RF00757 DS    0H                                                  0763
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        0763
*   RESPECIFY                                                      0764
*     RET UNRESTRICTED;                                            0764
*   END UPCATACB;                                                  0765
@EL00009 DS    0H                                                  0765
@EF00009 DS    0H                                                  0765
@ER00009 BR    @14                                                 0765
*UPCATDEQ:                                                         0766
*                                                                  0766
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - UPDATE CATALOG FOR EACH AMB                   */
*/*      01 INPUTS -   1. POINTER TO AMB IN CLWAMBPT                 */
*/*      01 OUTPUTS -  1. CATALOG UPDATED FOR EACH AMB               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0766
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0766
UPCATDEQ DS    0H                                                  0767
*   RESPECIFY                                                      0767
*    (RET,                                                         0767
*     RETCODE) RESTRICTED;                                         0767
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        0768
*   RESPECIFY                                                      0769
*     RET UNRESTRICTED;                                            0769
*   IF AMBLWRIT=ON THEN             /* IF ACB IS OPENNED FOR OUTPUT  */
         L     @14,ACBAMBL(,RACB)                                  0770
         TM    AMBLWRIT(@14),B'00100000'                           0770
         BNO   @RF00770                                            0770
*     DO;                                                          0771
*       AMDSTSP=MWATIMES;           /* UPDATE TIMESTAMP IN AMDSB     */
         L     @14,CLWAMBPT(,RCORE)                                0772
         L     @11,AMBDSB(,@14)                                    0772
         MVC   AMDSTSP(8,@11),MWATIMES                             0772
*       MWAOUTBT=ON;                /* INDICATE OUTPUT TO CATALOG    */
         L     @14,AMBWKA(,@14)                                    0773
         OI    MWAOUTBT(@14),B'10000000'                           0773
*     END;                                                         0774
*   MWACATID=CLM;                   /* INDICATE CLOSE                */
@RF00770 MVI   MWACATID,X'08'                                      0775
*   ENQRNCI=AMBDDSN;                /* CI NUMBER FOR RNAME           */
         L     @14,CLWAMBPT(,RCORE)                                0776
         MVC   ENQRNCI(3),AMBDDSN(@14)                             0776
*   ENQRNACB=AMBCACB;               /* ACB ADDRESS IN RNAME          */
         MVC   ENQRNACB(4),AMBCACB(@14)                            0777
*   IF UCB2OPT2=ON THEN             /* IF CATALOG ON SHARE DEVICE    */
         TM    UCB2OPT2(MWAUCBPT),B'00100000'                      0778
         BNO   @RF00778                                            0778
*     DO;                                                          0779
*       ENQRNIND='R';               /* INDICATE RESERVE IN RNAME     */
         MVI   ENQRNIND,C'R'                                       0780
*       ENQDIR=OFF;                 /* NOT ENQ DIRECT                */
         NI    ENQDIR,B'11111110'                                  0781
*       ENQOPT2=ENQOPT2&&ENQOPT2;   /* ZERO UNUSED OPTION BYTE       */
         XC    ENQOPT2(1),ENQOPT2                                  0782
*       ENQEND=ON;                  /* INDICATE LAST ENTRY           */
         OI    ENQEND,B'10000000'                                  0783
*       ENQUCADR=ADDR(DEBUCBAD);    /* POINT TO UCB                  */
         LA    @14,32                                              0784
         ALR   @14,MWADEBPT                                        0784
         ST    @14,ENQUCADR                                        0784
*       GEN(RESERVE (,,E,,SYSTEMS),MF=(E,ENQENTRY));/* ISSUE RESERVE */
         RESERVE (,,E,,SYSTEMS),MF=(E,ENQENTRY)
*     END;                                                         0786
*   RESPECIFY                                                      0787
*    (R1,                                                          0787
*     R5) RESTRICTED;                                              0787
@RF00778 DS    0H                                                  0788
*   R1=ADDR(MWACATPM);              /* POINT TO IDA0192C PARAMETER 0788
*                                      LIST                          */
         LA    R1,MWACATPM                                         0788
*   R5=CLWAMBPT;                    /* ADDRESS OF AMB                */
         L     R5,CLWAMBPT(,RCORE)                                 0789
*   CALL IDA0192C;                  /* UPDATE CATALOG FOR AMB        */
         L     @15,@CV05018                                        0790
         BALR  @14,@15                                             0790
*   IF RETCODE^=ZERO THEN           /* IF ERROR DURING CATALOG UPDATE*/
         LTR   RETCODE,RETCODE                                     0791
         BZ    @RF00791                                            0791
*     DO;                                                          0792
*       PDPSFI=MWASFIPT;            /* POINT TO SFI AREA             */
         L     @14,CLWCOMWK(,RCORE)                                0793
         L     @11,MWASFIPT-1                                      0793
         LA    @11,0(,@11)                                         0793
         ST    @11,PDPSFI+280(,@14)                                0793
*       MWAPDPRM=RETCODE;           /* SAVE RETURN CODE              */
         ST    RETCODE,MWAPDPRM                                    0794
*       CALL PROBDT;                /* CALL PROBLEM DETERMINATION    */
         BAL   @14,PROBDT                                          0795
*     END;                                                         0796
*   RESPECIFY                                                      0797
*    (R1,                                                          0797
*     R5) UNRESTRICTED;                                            0797
@RF00791 DS    0H                                                  0798
*   IF UCB2OPT2=ON THEN             /* IF CATALOG ON SHARE DEVICE    */
         TM    UCB2OPT2(MWAUCBPT),B'00100000'                      0798
         BNO   @RF00798                                            0798
*     DO;                                                          0799
*       ENQOPT2=ENQOPT2&&ENQOPT2;   /* ZERO OPTION BYTE              */
         XC    ENQOPT2(1),ENQOPT2                                  0800
*       GEN(DEQ (,,,SYSTEMS),MF=(E,ENQENTRY));/* ISSUE DEQ           */
         DEQ (,,,SYSTEMS),MF=(E,ENQENTRY)
*     END;                                                         0802
*   RESPECIFY                                                      0803
*     RET RESTRICTED;                                              0803
@RF00798 DS    0H                                                  0804
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        0804
*   RESPECIFY                                                      0805
*    (RET,                                                         0805
*     RETCODE) UNRESTRICTED;                                       0805
*   END UPCATDEQ;                                                  0806
@EL00010 DS    0H                                                  0806
@EF00010 DS    0H                                                  0806
@ER00010 BR    @14                                                 0806
*VIRTPROC:                                                         0807
*                                                                  0807
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - CALL IDA0192D TO RELINGQUISH VIRTUAL DEVICES. */
*/*      01 INPUTS -   1. PARAMETER LIST FOR IDA0192D.               */
*/*      01 OUTPUTS -  1. DESTAGING PERFORMED.                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0807
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0807
VIRTPROC DS    0H                                                  0808
*   RESPECIFY                                                      0808
*     RET RESTRICTED;                                              0808
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0809
*   RESPECIFY                                                      0810
*     RET UNRESTRICTED;                                            0810
*   VIRTACB=RACB;                   /* GET ACB ADDRESS               */
         LA    @05,MWAVIRT                                         0811
         ST    RACB,VIRTACB(,@05)                                  0811
*   VIRTTIOE=PDPTIOT;               /* POINT TO DD NAME TIOT         */
         L     @01,CLWCOMWK(,RCORE)                                0812
         L     @15,PDPTIOT+280(,@01)                               0812
         ST    @15,VIRTTIOE(,@05)                                  0812
*   VIRTBACB=ON;                    /* INDICATE CALL BY ACB          */
         OI    VIRTBACB(@05),B'00010000'                           0813
*   RESPECIFY                                                      0814
*    (R1,                                                          0814
*     RETCODE) RESTRICTED;                                         0814
*   R1=ADDR(IDAVIRT);               /* POINT TO PARAMETER LIST       */
         LR    R1,@05                                              0815
*   CALL IDA0192D;                  /* PERFORM RELINGQUISH IF      0816
*                                      NECESSARY                     */
         L     @15,@CV05022                                        0816
         BALR  @14,@15                                             0816
*   IF RETCODE^=ZERO THEN           /* IF ERROR ENCOUNTERED          */
         LTR   RETCODE,RETCODE                                     0817
         BZ    @RF00817                                            0817
*     DO;                                                          0818
*       MWAPDPRM=RETCODE;           /* SAVE RETURN CODE              */
         ST    RETCODE,MWAPDPRM                                    0819
*       CALL PROBDT;                /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT                                          0820
*     END;                                                         0821
*   RESPECIFY                                                      0822
*     RET RESTRICTED;                                              0822
@RF00817 DS    0H                                                  0823
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        0823
*   RESPECIFY                                                      0824
*    (R1,                                                          0824
*     RET,                                                         0824
*     RETCODE) UNRESTRICTED;                                       0824
*   END VIRTPROC;                                                  0825
@EL00011 DS    0H                                                  0825
@EF00011 DS    0H                                                  0825
@ER00011 BR    @14                                                 0825
*UPSMF:                                                            0826
*                                                                  0826
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - WRITE SMF RECORDS TYPE 64                     */
*/*      01 INPUTS -   1. PARAMETER LIST FOR RECORD 64               */
*/*      01 OUTPUTS -  1. SMF RECORDS TYPE 64 WRITTEN                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0826
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0826
UPSMF    DS    0H                                                  0827
*   RESPECIFY                                                      0827
*    (R1,                                                          0827
*     R6,                                                          0827
*     RET,                                                         0827
*     RETCODE) RESTRICTED;                                         0827
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0828
*   RESPECIFY                                                      0829
*     RET UNRESTRICTED;                                            0829
*   RESPECIFY                                                      0830
*     IGGCAXWA BASED(R6);           /* ADDRESSABILITY FOR CATLG WK 0830
*                                      AREA                          */
*   PDPFUNC=PDF112;                 /* SET FUNCTION CODE             */
         L     @14,CLWCOMWK(,RCORE)                                0831
         MVI   PDPFUNC+280(@14),X'70'                              0831
*   MWARCNBR=MWACLOSE;              /* SET RECORD NUMBER             */
         MVI   MWARCNBR,X'40'                                      0832
*   MWARCLOS=ON;                    /* INDICATE CALL FROM CLOSE      */
         OI    MWARCLOS,B'10000000'                                0833
*   IF AMBLCAT=ON×                  /* IF CATALOG ACB OR     @ZA16061*/
*       AMBLUCRA=ON×                /* UCRA ACB OR           @ZA16061*/
*       AMBLSCRA=ON THEN            /* SCRA ACB OR           @ZA16061*/
         L     @14,ACBAMBL(,RACB)                                  0834
         TM    AMBLCAT(@14),B'00001110'                            0834
         BZ    @RF00834                                            0834
*     R6=ACBUAPTR;                  /* GET ADDR OF CAXWA     @ZA16061*/
         L     R6,ACBUAPTR(,RACB)                                  0835
*   ELSE                            /*                       @ZA16061*/
*     R6=AMBLDTA->AMBCACB->ACBUAPTR;/* GET ADDRESS OF CAXWA          */
         B     @RC00834                                            0836
@RF00834 L     @14,ACBAMBL(,RACB)                                  0836
         L     @14,AMBLDTA(,@14)                                   0836
         L     @14,AMBCACB(,@14)                                   0836
         L     R6,ACBUAPTR(,@14)                                   0836
*   IF AMBLUCRA=ON×AMBLSCRA=ON THEN /* IF CRA THEN           @ZA31854*/
@RC00834 L     @14,ACBAMBL(,RACB)                                  0837
         TM    AMBLUCRA(@14),B'00001100'                           0837
         BZ    @RF00837                                            0837
*     DO;                           /*                       @ZA31854*/
*       MWARCCSN=ADDR(CAXACB->ACBUAPTR->CAXCNAM);/* POINT TO CATALOG
*                                      DATASET NAME          @ZA31854*/
         L     @14,CAXACB(,R6)                                     0839
         L     @14,ACBUAPTR(,@14)                                  0839
         LA    @14,CAXCNAM(,@14)                                   0839
         ST    @14,MWARCCSN                                        0839
*       MWARCCRA=ON;                /* INDICATE CRA CLOSE    @ZA31854*/
         OI    MWARCCRA,B'01000000'                                0840
*     END;                          /*                       @ZA31854*/
*   ELSE                            /* NOT CRA               @ZA31854*/
*     MWARCCSN=ADDR(CAXCNAM);       /* POINT TO CATALOG DATA SET NAME*/
         B     @RC00837                                            0842
@RF00837 LA    @14,CAXCNAM(,R6)                                    0842
         ST    @14,MWARCCSN                                        0842
*   MWASTIOT=PDPTIOT;               /* SET UP TIOT POINTER   @XXXXXXX*/
@RC00837 L     @14,CLWCOMWK(,RCORE)                                0843
         L     @07,PDPTIOT+280(,@14)                               0843
         ST    @07,MWASTIOT                                        0843
*   R1=ADDR(MWARCD64);              /* GET ADDRESS OF PARAMETER LIST */
         LA    R1,MWARCD64                                         0844
*   MWARCAMB=AMBLDTA;               /* DATA AMB ADDRESS FOR SMF      */
         L     @07,ACBAMBL(,RACB)                                  0845
         L     @07,AMBLDTA(,@07)                                   0845
         ST    @07,MWARCAMB                                        0845
*   CLWAMBPT=AMBLDTA;               /* ADDRESSABILITY FOR DATA AMB   */
         ST    @07,CLWAMBPT(,RCORE)                                0846
*   IF TCBFA=ON THEN                /* ABENDING?             @ZA10857*/
         L     @07,PSATOLD                                         0847
         TM    TCBFA(@07),B'10000000'                              0847
         BNO   @RF00847                                            0847
*     MWARCDSN=ADDR(JFCBDSNM);      /* YES,USE JFCB DSN      @ZA10857*/
         AL    @14,@CF02712                                        0848
         ST    @14,MWARCDSN                                        0848
*   ELSE                            /* NO,                   @ZA10857*/
*     MWARCDSN=ADDR(MWADSN);        /* POINT TO WORK AREA DSN      0849
*                                                            @ZA10857*/
         B     @RC00847                                            0849
@RF00847 L     @14,CLWAMBPT(,RCORE)                                0849
         L     @14,AMBWKA(,@14)                                    0849
         ST    @14,MWARCDSN                                        0849
*   CALL IDA0192S;                  /* WRITE SMF RECORD              */
@RC00847 L     @15,@CV05027                                        0850
         BALR  @14,@15                                             0850
*   IF RETCODE^=ZERO THEN           /* IF ERROR ENCOUNTERED          */
         LTR   RETCODE,RETCODE                                     0851
         BZ    @RF00851                                            0851
*     DO;                                                          0852
*       MWAPDPRM=RETCODE;           /* SAVE RETURN CODE              */
         ST    RETCODE,MWAPDPRM                                    0853
*       CALL PROBDT;                /* CALL PROBLEM DETERMINATION    */
         BAL   @14,PROBDT                                          0854
*     END;                                                         0855
*   ELSE                            /* NO ERROR ENCOUNTERED          */
*     DO;                                                          0856
         B     @RC00851                                            0856
@RF00851 DS    0H                                                  0857
*       IF AMBLIX^=ZERO THEN        /* IF KSDS                       */
         L     @14,ACBAMBL(,RACB)                                  0857
         L     @14,AMBLIX(,@14)                                    0857
         LTR   @14,@14                                             0857
         BZ    @RF00857                                            0857
*         DO;                                                      0858
*           MWARCAMB=AMBLIX;        /* POINT TO INDEX AMB            */
         ST    @14,MWARCAMB                                        0859
*           CLWAMBPT=AMBLIX;        /* ADDRESSABILITY FOR INDEX AMB  */
         ST    @14,CLWAMBPT(,RCORE)                                0860
*           IF TCBFA=ON THEN        /* IF ABENDING           @ZA29395*/
         L     @14,PSATOLD                                         0861
         TM    TCBFA(@14),B'10000000'                              0861
         BNO   @RF00861                                            0861
*             MWARCDSN=ADDR(JFCBDSNM);/* PTR TO JFCB DSN     @ZA29395*/
         LA    @14,100                                             0862
         AL    @14,CLWCOMWK(,RCORE)                                0862
         ST    @14,MWARCDSN                                        0862
*           ELSE                    /* NOT ABENDING          @ZA29395*/
*             MWARCDSN=ADDR(MWADSN);/* POINT TO DATA SET NAME        */
         B     @RC00861                                            0863
@RF00861 L     @14,CLWAMBPT(,RCORE)                                0863
         L     @14,AMBWKA(,@14)                                    0863
         ST    @14,MWARCDSN                                        0863
*           CALL IDA0192S;          /* WRITE SMF RECORDS             */
@RC00861 L     @15,@CV05027                                        0864
         BALR  @14,@15                                             0864
*           IF RETCODE^=ZERO THEN   /* IF ERROR ENCOUNTERED          */
         LTR   RETCODE,RETCODE                                     0865
         BZ    @RF00865                                            0865
*             DO;                                                  0866
*               MWAPDPRM=RETCODE;   /* SAVE RETURN CODE              */
         ST    RETCODE,MWAPDPRM                                    0867
*               CALL PROBDT;        /* CALL PROBLEM DETERMINATION    */
         BAL   @14,PROBDT                                          0868
*             END;                                                 0869
*         END;                                                     0870
@RF00865 DS    0H                                                  0871
*     END;                                                         0871
@RF00857 DS    0H                                                  0872
*   RESPECIFY                                                      0872
*     IGGCAXWA BASED(ACBUAPTR);                                    0872
@RC00851 DS    0H                                                  0873
*   RESPECIFY                                                      0873
*     RET RESTRICTED;                                              0873
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        0874
*   RESPECIFY                                                      0875
*    (R1,                                                          0875
*     R6,                                                          0875
*     RET,                                                         0875
*     RETCODE) UNRESTRICTED;                                       0875
*   END UPSMF;                                                     0876
@EL00012 DS    0H                                                  0876
@EF00012 DS    0H                                                  0876
@ER00012 BR    @14                                                 0876
*PROBDT:                                                           0877
*                                                                  0877
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - PROBLEM DETERMINATION AND WRITE ERROR MESSAGES*/
*/*      01 INPUTS -   1. PROBLEM DETERMINATION PARAMETER LIST       */
*/*      01 OUTPUTS -  1. ERROR MESSAGE                              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0877
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0877
PROBDT   DS    0H                                                  0878
*   RESPECIFY                                                      0878
*    (R6,                                                          0878
*     RET) RESTRICTED;                                             0878
*   R6=RET;                         /* SAVE RETURN ADDRESS           */
         LR    R6,RET                                              0879
*   RESPECIFY                                                      0880
*     RET UNRESTRICTED;                                            0880
*   IF CLWGMAIN=ON THEN             /* MODULE WORK AREA EXIST        */
         TM    CLWGMAIN(RCORE),B'00100000'                         0881
         BNO   @RF00881                                            0881
*     DO;                                                          0882
*       MWASAVED=R6;                /* SAVE RETURN ADDRESS IN MWA    */
         LR    MWASAVED,R6                                         0883
*       MWACATID=CLC;               /* SET-UP CALLER ID              */
         MVI   MWACATID,X'30'                                      0884
*       MWACI=AMBLDTA->AMBDDSN;     /* CI NUMBER OF DATA AMB         */
         L     @11,ACBAMBL(,RACB)                                  0885
         L     @11,AMBLDTA(,@11)                                   0885
         MVC   MWACI(3),AMBDDSN(@11)                               0885
*       MWACACB=AMBLDTA->AMBCACB;   /* CATALOG ACB ADDRESS           */
         L     @11,AMBCACB(,@11)                                   0886
         ST    @11,MWACACB                                         0886
*       RESPECIFY                                                  0887
*        (R1,                                                      0887
*         RETCODE) RESTRICTED;                                     0887
*       MWASFIPT=ZERO;              /* ZERO SFI POINTER IN PARM LIST */
         SLR   @14,@14                                             0888
         STCM  @14,7,MWASFIPT                                      0888
*       R1=ADDR(MWACATPM);          /* POINT TO PARM LIST FOR      0889
*                                      IDA0192C                      */
         LA    R1,MWACATPM                                         0889
*       CALL IDA0192C;              /* OBTAIN CLUSTER NAME FOR CI IN
*                                      DATA AMB                      */
         L     @15,@CV05018                                        0890
         BALR  @14,@15                                             0890
*       MWASFIPT=ADDR(CLWSFI);      /* REINITIALIZE SFI POINTER      */
         LA    @14,CLWSFI(,RCORE)                                  0891
         STCM  @14,7,MWASFIPT                                      0891
*       IF RETCODE=ZERO THEN        /* NO ERROR                      */
         LTR   RETCODE,RETCODE                                     0892
         BNZ   @RF00892                                            0892
*         PDPCLSNM=ADDR(MWACLSNM);  /* GET ADDRESS OF CLUSTER NAME   */
         L     @14,CLWCOMWK(,RCORE)                                0893
         LA    @11,MWACLSNM                                        0893
         ST    @11,PDPCLSNM+280(,@14)                              0893
*       ELSE                        /* ERROR ENCOUNTERED             */
*         PDPDSTYP=PDPDDNM;         /* INDICATE USE DD DATA SET NAME */
         B     @RC00892                                            0894
@RF00892 L     @14,CLWCOMWK(,RCORE)                                0894
         MVI   PDPDSTYP+280(@14),X'01'                             0894
*       IF CLWAMBPT^=ZERO THEN      /* ERROR RELATED TO INDIVIDUAL DS*/
@RC00892 SLR   @14,@14                                             0895
         L     @11,CLWAMBPT(,RCORE)                                0895
         CR    @11,@14                                             0895
         BE    @RF00895                                            0895
*         DO;                                                      0896
*           MWACATID=CLD;           /* SET CALLER ID                 */
         MVI   MWACATID,X'28'                                      0897
*           MWASFIPT=ZERO;          /* ZERO SFI POINTER IN PARM LIST */
         STCM  @14,7,MWASFIPT                                      0898
*           MWACI=CLWAMBPT->AMBDDSN;/* GET DATA SET CI NUMBER        */
         MVC   MWACI(3),AMBDDSN(@11)                               0899
*           R1=ADDR(MWACATPM);      /* POINT TO PARM LIST FOR      0900
*                                      IDA0192C                      */
         LA    R1,MWACATPM                                         0900
*           CALL IDA0192C;          /* GET DATA SET NAME             */
         L     @15,@CV05018                                        0901
         BALR  @14,@15                                             0901
*           MWASFIPT=ADDR(CLWSFI);  /* REINITIALIZE SFI POINTER      */
         LA    @14,CLWSFI(,RCORE)                                  0902
         STCM  @14,7,MWASFIPT                                      0902
*           IF RETCODE=ZERO THEN    /* DATA SET NAME OBTAINED        */
         LTR   RETCODE,RETCODE                                     0903
         BNZ   @RF00903                                            0903
*             DO;                                                  0904
*               MWADSN=MWACLSNM;    /* MOVE DATA SET NAME TO AMB WORK
*                                      AREA                          */
         L     @14,CLWAMBPT(,RCORE)                                0905
         L     @14,AMBWKA(,@14)                                    0905
         MVC   MWADSN(44,@14),MWACLSNM                             0905
*               PDPDSN=ADDR(MWADSN);/* INITIALIZE DATA SET NAME IN 0906
*                                      PROBLEM DETERMINATION PARM  0906
*                                      LIST                          */
         L     @11,CLWCOMWK(,RCORE)                                0906
         ST    @14,PDPDSN+280(,@11)                                0906
*             END;                                                 0907
*         END;                                                     0908
@RF00903 DS    0H                                                  0909
*       CALL ERRORFLG;              /* DETERMINE CORRECT ACBERFLG    */
@RF00895 BAL   @14,ERRORFLG                                        0909
*       R6=MWASAVED;                /* PUT RETURN ADDRESS IN REGISTER
*                                      6                             */
         LR    R6,MWASAVED                                         0910
*     END;                                                         0911
*   R1=CLWCOMWK;                    /* POINT TO COMMON WORK AREA     */
@RF00881 L     R1,CLWCOMWK(,RCORE)                                 0912
*   CALL IDA0192P;                  /* CALL PROBLEM DETERMINATION    */
         L     @15,@CV05033                                        0913
         BALR  @14,@15                                             0913
*   PDPSFI=ZERO;                    /* ZERO CATALOG SFI POINTER      */
         SLR   @14,@14                                             0914
         L     @11,CLWCOMWK(,RCORE)                                0914
         LA    @09,280                                             0914
         ALR   @09,@11                                             0914
         ST    @14,PDPSFI(,@09)                                    0914
*   PDPCLSNM=ADDR(JFCBDSNM);        /* RESET CLUSTER NAME TO DD DS 0915
*                                      NAME                          */
         AL    @11,@CF02712                                        0915
         ST    @11,PDPCLSNM(,@09)                                  0915
*   PDPDSN=ZERO;                    /* RESET DATA SET NAME TO ZERO   */
         ST    @14,PDPDSN(,@09)                                    0916
*   RESPECIFY                                                      0917
*     RET RESTRICTED;                                              0917
*   RET=R6;                         /* GET RETURN ADDRESS            */
         LR    RET,R6                                              0918
*   RESPECIFY                                                      0919
*    (R1,                                                          0919
*     R6,                                                          0919
*     RET,                                                         0919
*     RETCODE) UNRESTRICTED;                                       0919
*   END PROBDT;                                                    0920
@EL00013 DS    0H                                                  0920
@EF00013 DS    0H                                                  0920
@ER00013 BR    @14                                                 0920
*ERRORFLG:                                                         0921
*                                                                  0921
*/********************************************************************/
*/*                                                                  */
*/*    01 FUNCTION - THIS ROUTINE SELECT THE CORRECT ERROR FLAG FOR  */
*/*                  THE ACBERFLG                                    */
*/*    01 INPUT -    1. PROBLEM DETERMINATION PROBLEM CODE (MWAPCODE)*/
*/*                  2. PROBLEM DETERMINATION FUNCTION CODE(MWAPFUNC)*/
*/*                  3. PROB DETERMINATION SUB FUNCTION CODE(MWAPSFC)*/
*/*    01 OUTPUT -   1. THE CURRENT ERROR IS SET                     */
*/*                  2. ACBERFLG IS SET IF CURRENT ERROR IS GREATER  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0921
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0921
ERRORFLG DS    0H                                                  0922
*   RESPECIFY                                                      0922
*     RET RESTRICTED;                                              0922
*   MWASAVEE=RET;                   /* SAVE RETURN ADDRESS           */
         LR    MWASAVEE,RET                                        0923
*   RESPECIFY                                                      0924
*     RET UNRESTRICTED;                                            0924
*   PDPFUNC=MWAPFUNC;               /* GET FUNCTION CODE             */
         LA    @11,280                                             0925
         AL    @11,CLWCOMWK(,RCORE)                                0925
         IC    @09,MWAPFUNC                                        0925
         STC   @09,PDPFUNC(,@11)                                   0925
*   PDPCODE=MWAPCODE;               /* GET PROBLEM CODE              */
         SLR   @09,@09                                             0926
         IC    @09,MWAPCODE                                        0926
         STC   @09,PDPCODE(,@11)                                   0926
*   PDPSFC=MWAPSFC;                 /* GET SUB FUNCTION CODE         */
         IC    @06,MWAPSFC                                         0927
         STC   @06,PDPSFC(,@11)                                    0927
*   IF PDPACB->ACBERFLG<IDAERMAP(PDPCODE) THEN/* IF CURRENT ERROR IS
*                                      GREATER THAN ACB ERROR FLAG   */
         L     @11,PDPACB(,@11)                                    0928
         SLR   @06,@06                                             0928
         IC    @06,IDAERMAP-1(@09)                                 0928
         SLR   @09,@09                                             0928
         IC    @09,ACBERFLG(,@11)                                  0928
         CR    @06,@09                                             0928
         BNH   @RF00928                                            0928
*     PDPACB->ACBERFLG=IDAERMAP(PDPCODE);/* SET THE HIGHER ERROR CODE*/
         STC   @06,ACBERFLG(,@11)                                  0929
*   RESPECIFY                                                      0930
*     RET RESTRICTED;                                              0930
@RF00928 DS    0H                                                  0931
*   RET=MWASAVEE;                   /* RESTORE RETURN ADDRESS        */
         LR    RET,MWASAVEE                                        0931
*   RESPECIFY                                                      0932
*     RET UNRESTRICTED;                                            0932
*   END ERRORFLG;                                                  0933
@EL00014 DS    0H                                                  0933
@EF00014 DS    0H                                                  0933
@ER00014 BR    @14                                                 0933
*DEHOOK:                                                           0934
*                                                                  0934
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - DECHAIN DEB AND REMOVE DEB FROM DEB TABLE     */
*/*      01 INPUTS -   1. ADDRESS OF DEB IN MWADEBPT                 */
*/*      01 OUTPUTS -  1. DEB DECHAINED AND DELETED FROM DEB TABLE   */
*/*                                                                  */
*/* THIS ROUTINE IS ALTERD FOR VS2. IN VS2 A DEB CHAIN/DECHAIN       */
*/* PROTOCOL EXISTS FOR THE MP ENVIRONMENT.                         .*/
*/********************************************************************/
*                                                                  0934
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0934
DEHOOK   DS    0H                                                  0935
*   RESPECIFY                                                      0935
*    (R1,                                                          0935
*     R6,                                                          0935
*     R7,                                                          0935
*     RET) RESTRICTED;                                             0935
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0936
*   RESPECIFY                                                      0937
*     RET UNRESTRICTED;                                            0937
*   R6=MWADEBPT;                    /* SAVE POINTER TO DEB FOR     0938
*                                      DECHAIN                       */
         LR    R6,MWADEBPT                                         0938
*   RFY                                                            0939
*     R11 RSTD;                     /* INFORM THE COMPILER.  @Y30DSMD*/
*   MWALCKA=R11;                    /* SAVE OFF REGISTER ELEVEN.   0940
*                                                            @Y30DSMD*/
         ST    R11,MWALCKA                                         0940
*   RFY                                                            0941
*     R11 UNRSTD;                   /* INFORM THE COMPILER.  @Y30DSMD*/
*   MWALCKB=R12;                    /* SAVE OFF REGISTER TWELVE.   0942
*                                                            @Y30DSMD*/
         ST    R12,MWALCKB                                         0942
*   MWALCKC=R1;                     /* REGISTER ONE ALSO IS SAVED. 0943
*                                                            @Y30DSMD*/
         LR    MWALCKC,R1                                          0943
*   R1=R13;                         /* SWITCH REGISTER 13 FOR LATER.
*                                                            @Y30DSMD*/
         LR    R1,R13                                              0944
*   GEN SETS(R11,R12,R13,RET) REFS(PSALITA,FLC);                   0945
*                                                          /*@Y30DSMD*/
          SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                       *
               RELATED=(LOCAL,IDA0200T(DECHNDEB))
*   R13=R1;                         /* RE-ESTABLISH REGISTER 13.   0946
*                                                            @Y30DSMD*/
         LR    R13,R1                                              0946
*   R1=MWALCKC;                     /* RELOAD REGISTER ONE.  @Y30DSMD*/
         LR    R1,MWALCKC                                          0947
*   R12=MWALCKB;                    /* RE-LOAD REGISTER 12.  @Y30DSMD*/
         L     R12,MWALCKB                                         0948
*   RFY                                                            0949
*     R11 RSTD;                     /* INFORM THE COMPILER.  @Y30DSMD*/
*   R11=MWALCKA;                    /* RE-LOAD FINAL REGISTER.     0950
*                                                            @Y30DSMD*/
         L     R11,MWALCKA                                         0950
*   RFY                                                            0951
*     R11 UNRSTD;                   /* INFORM THE COMPILER.  @Y30DSMD*/
*   RFY                                                            0952
*     TCB BASED(DEBTCBAD);          /* USE THE TCB FROM THE DEB    0952
*                                      (CURRENT × JS).               */
*   IF TCBDEB=MWADEBPT THEN         /* IS MY DEB THE FIRST ON THE  0953
*                                      CHAIN?                        */
         L     @09,DEBTCBAD(,MWADEBPT)                             0953
         C     MWADEBPT,TCBDEB(,@09)                               0953
         BNE   @RF00953                                            0953
*     DO;                           /* PROCESS THE FIRST DEB ON THE
*                                      CHAIN.                @Y30DSMD*/
*       MWARDEB=MWADEBPT;           /* SET UP OUR DEB PTR.   @Y30DSMD*/
         LR    MWARDEB,MWADEBPT                                    0955
*       MWANDEB=DEBDEBB;            /* SET UP NEXT DEB PTR.  @Y30DSMD*/
         L     MWANDEB,DEBDEBB-1(,MWADEBPT)                        0956
         LA    MWANDEB,0(,MWANDEB)                                 0956
*       CS(MWARDEB,MWANDEB,TCBDEB); /* MAKE NEXT DEB THE FIRST.      */
         L     @15,DEBTCBAD(,MWADEBPT)                             0957
         CS    MWARDEB,@09,TCBDEB(@15)                             0957
*       BC(8,DECHND1);              /* GOTO DECHND1 IF SUCCESSFUL. 0958
*                                                            @Y30DSMD*/
         BC    8,DECHND1                                           0958
*     END;                          /* END OF FIRST DEB PROCESSING.
*                                                            @Y30DSMD*/
*   MWADEBPT=DEBTCBAD+FWORDLEN;     /* LOAD PTR TO 1ST DEB IN      0960
*                                      DEB-CHAIN                     */
@RF00953 LA    @09,4                                               0960
         AL    @09,DEBTCBAD(,MWADEBPT)                             0960
         LR    MWADEBPT,@09                                        0960
*   DO WHILE(DEBDEBB^=R6&DEBDEBB^=0);/* IF NO MATCH FOUND    @Y30DSMD*/
         B     @DE00961                                            0961
@DL00961 DS    0H                                                  0962
*     MWADEBPT=DEBDEBB;             /* POINT TO NEXT DEB     @Y30DSMD*/
         L     @09,DEBDEBB-1(,MWADEBPT)                            0962
         LA    @09,0(,@09)                                         0962
         LR    MWADEBPT,@09                                        0962
*   END;                            /*                       @Y30DSMD*/
@DE00961 L     @09,DEBDEBB-1(,MWADEBPT)                            0963
         LA    @09,0(,@09)                                         0963
         CR    @09,R6                                              0963
         BE    @DC00961                                            0963
         LTR   @09,@09                                             0963
         BNZ   @DL00961                                            0963
@DC00961 DS    0H                                                  0964
*   IF DEBDEBB^=ZERO THEN           /* IF DEB MATCH FOUND    @Y30DSMD*/
         L     @09,DEBDEBB-1(,MWADEBPT)                            0964
         LA    @09,0(,@09)                                         0964
         LTR   @09,@09                                             0964
         BZ    @RF00964                                            0964
*     DEBDEBB=DEBDEBB->DEBDEBB;     /* DECHAIN THE DEB       @Y30DSMD*/
         L     @09,DEBDEBB-1(,@09)                                 0965
         LA    @09,0(,@09)                                         0965
         STCM  @09,7,DEBDEBB(MWADEBPT)                             0965
*DECHND1:                           /* DECHAIN DEB           @Z30SSRL*/
*   RFY                                                            0966
*     R11 RSTD;                     /* MAKE A NOTE FOR THE COMPILER.
*                                                            @Y30DSMD*/
@RF00964 DS    0H                                                  0966
DECHND1  DS    0H                                                  0967
*   MWALCKA=R11;                    /* SAVE OFF REGISTER ELEVEN.   0967
*                                                            @Y30DSMD*/
         ST    R11,MWALCKA                                         0967
*   RFY                                                            0968
*     R11 UNRSTD;                   /* THE COMPILER NEEDS REGISTER 0968
*                                      INFO.                 @Y30DSMD*/
*   MWALCKB=R12;                    /* SAVE OFF REGISTER TWELVE.   0969
*                                                            @Y30DSMD*/
         ST    R12,MWALCKB                                         0969
*   MWALCKC=R1;                     /* REGISTER ONE ALSO IS SAVED. 0970
*                                                            @Y30DSMD*/
         LR    MWALCKC,R1                                          0970
*   R1=R13;                         /* SWITCH REGISTER 13 FOR LATER.
*                                                            @Y30DSMD*/
         LR    R1,R13                                              0971
*   GEN SETS(R11,R12,R13,RET) REFS(PSALITA,FLC);                   0972
*                                                          /*@Y30DSMD*/
          SETLOCK RELEASE,TYPE=LOCAL,                                  *
               RELATED=(LOCAL,IDA0200T(DECHNDEB))
*   R13=R1;                         /* RE-ESTABLISH REGISTER 13.   0973
*                                                            @Y30DSMD*/
         LR    R13,R1                                              0973
*   R1=MWALCKC;                     /* RELOAD REGISTER ONE.  @Y30DSMD*/
         LR    R1,MWALCKC                                          0974
*   R12=MWALCKB;                    /* RE-LOAD REGISTER 12.  @Y30DSMD*/
         L     R12,MWALCKB                                         0975
*   RFY                                                            0976
*     R11 RSTD;                     /* INFORM THE COMPILER.  @Y30DSMD*/
*   R11=MWALCKA;                    /* RE-LOAD FINAL REGISTER.     0977
*                                                            @Y30DSMD*/
         L     R11,MWALCKA                                         0977
*   RFY                                                            0978
*     R11 UNRSTD;                   /* INFORM THE COMPILER.  @Y30DSMD*/
*   MWADEBPT=R6;                    /* COPY DEB POINTER      @Y30DSMD*/
         LR    MWADEBPT,R6                                         0979
*   R1=DEBDCBB;                     /* POINT TO CURRENT DEB  @Y30DSMD*/
         L     R1,DEBDCBB-1(,MWADEBPT)                             0980
         LA    R1,0(,R1)                                           0980
*   IF R1^=ZERO THEN                /* DOES THE DEB EXIST?   @Y30DSMD*/
         LTR   R1,R1                                               0981
         BZ    @RF00981                                            0981
*     GEN(DEBCHK (1),TYPE=DELETE,AM=VSAM);/* DELETE DEB FROM DEB   0982
*                                      TABLE                         */
         DEBCHK (1),TYPE=DELETE,AM=VSAM
*   RFY                                                            0983
*     RET RSTD;                     /* INFORM THE COMPILER.  @Y30DSMD*/
@RF00981 DS    0H                                                  0984
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        0984
*   RESPECIFY                                                      0985
*    (R1,                                                          0985
*     R6,                                                          0985
*     R7,                                                          0985
*     RET) UNRESTRICTED;                                           0985
*   RFY                                                            0986
*     TCB BASED(PSATOLD);           /* RESET TO DEFAULT TCB        0986
*                                      (CURRENT).            @Z30SSMD*/
*   END DEHOOK;                                                    0987
@EL00015 DS    0H                                                  0987
@EF00015 DS    0H                                                  0987
@ER00015 BR    @14                                                 0987
*FREECORE:                                                         0988
*                                                                  0988
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - FREE GOTTEN STORAGE                           */
*/*      01 INPUTS -   1. ADDRESS OF STORAGE TO BE FREED IN MWADDRES */
*/*                    2. NUMBER OF BYTES TO BE FREED IN MWABYTES    */
*/*                    3. SUBPOOL NUMBER IN MWASPOOL                 */
*/*      01 OUTPUTS -  1. CORE STORAGE FREED                         */
*/*                                                                  */
*/* IN VS2 THIS ROUTINE IA ALTERED TO PROVIDE KEY SUPPORT FOR        */
*/* GSR KEY & KEY 5 STORAGE. THE CALLING ROUTINE MUST SET    @Z40ESSR*/
*/* MWAFRKEY. IF MWAFRKEY IS K50 THEN THE CORE IS ASSUMED TO @Z40ESSR*/
*/* BE IN KEY 5. IF MWAFRKEY IS SET TO GSR KEY STORAGE IS IN @Z40ESSR*/
*/* GSR KEY(0 TO 7). IF NEITHER GSR KEY NOR K50 IS THE VALUE @Z40ESSR*/
*/* IN MWAFRKEY THEN THE CORE WILL BE FREEMAINED WHILE IN    @Z40ESSR*/
*/* KEY 0(DEFAULT). MWAFRKEY IS SET TO 0 AT THE CONCLUSION   @Z40ESSR*/
*/* OF THIS ROUTINE                                          @Z40ESSR*/
*/********************************************************************/
*                                                                  0988
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0988
FREECORE DS    0H                                                  0989
*   RESPECIFY                                                      0989
*    (R0,                                                          0989
*     R1,                                                          0989
*     R7,                                                          0989
*     RET) RESTRICTED;              /*                       @Y30DSMD*/
*   MWASAVEC=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEC                                        0990
*   RESPECIFY                                                      0991
*     RET UNRESTRICTED;                                            0991
*   R1=MWADDRES;                    /* ADDRESS OF CORE TO BE FREED   */
         L     R1,MWADDRES                                         0992
*   R0=MWAMNWRD;                    /* SUBPOOL NO. AND BYTES TO BE 0993
*                                      FREE                          */
*                                                                  0993
         L     R0,MWAMNWRD                                         0993
*   /*****************************************************************/
*   /*                                                               */
*   /* IS A DEB BEING FREED? IF SO THEN A SPECIAL BRANCH . ENTRY TO  */
*   /* FREEMAIN MUST BE USED.                                @Y30DSMD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0994
*   IF MWAFRKEY=K50&MWASPOOL=RDEBPOOL THEN/* IS THIS A DEB?  @Y30DSMD*/
         CLI   MWAFRKEY,X'50'                                      0994
         BNE   @RF00994                                            0994
         CLI   MWASPOOL,230                                        0994
         BNE   @RF00994                                            0994
*     DO;                           /* IF DEB AND NOT CTLG OR GSR  0995
*                                      THEN PROCESS IT.      @Y30DSMD*/
*                                                                  0995
*       /*************************************************************/
*       /*                                                           */
*       /* THE BRANCH ENTRY TO FREEMAIN USES R3,4,7. SAVE THEM.      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0996
*       MWADEBR3=R3;                /* SAVE OFF REG(3).      @Y30DSMD*/
         LR    MWADEBR3,R3                                         0996
*       MWADEBR4=R4;                /* SAVE OFF REG(4) IN MWA.     0997
*                                                            @Y30DSMD*/
         LR    MWADEBR4,R4                                         0997
*       MWADEBR7=R7;                /* SAVE OFF REG(7) IN THE MWA. 0998
*                                                            @Y30DSMD*/
*                                                                  0998
         ST    R7,MWADEBR7                                         0998
*       /*************************************************************/
*       /*                                                           */
*       /* OBTAIN THE LOCAL LOCK TO SERIALIZE FREEMAIN.      @Y30DSMD*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0999
*       RFY                                                        0999
*         R11 RSTD;                 /* INFORM THE COMPILER.  @Y30DSMD*/
*       MWALCKA=R11;                /* SAVE OFF REGISTER ELEVEN.   1000
*                                                            @Y30DSMD*/
         ST    R11,MWALCKA                                         1000
*       RFY                                                        1001
*         R11 UNRSTD;               /* INFORM THE COMPILER.  @Y30DSMD*/
*       MWALCKB=R12;                /* SAVE OFF REGISTER TWELVE.   1002
*                                                            @Y30DSMD*/
         ST    R12,MWALCKB                                         1002
*       MWALCKC=R1;                 /* REGISTER ONE ALSO IS SAVED. 1003
*                                                            @Y30DSMD*/
         LR    MWALCKC,R1                                          1003
*       R1=R13;                     /* SWITCH REGISTER 13 FOR LATER.
*                                                            @Y30DSMD*/
         LR    R1,R13                                              1004
*       GEN SETS(R11,R12,R13,RET) REFS(PSALITA,FLC);               1005
*                                                          /*@Y30DSMD*/
          SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                       *
               RELATED=(LOCAL,IDA0200B(FREECORE))
*       R13=R1;                     /* RE-ESTABLISH REGISTER 13.   1006
*                                                            @Y30DSMD*/
         LR    R13,R1                                              1006
*       R1=MWALCKC;                 /* RELOAD REGISTER ONE.  @Y30DSMD*/
         LR    R1,MWALCKC                                          1007
*       R12=MWALCKB;                /* RE-LOAD REGISTER 12.  @Y30DSMD*/
         L     R12,MWALCKB                                         1008
*       RFY                                                        1009
*         R11 RSTD;                 /* KEEP COMPILER INFORMED.     1009
*                                                            @Y30DSMD*/
*       R11=MWALCKA;                /* RESTORE REG(11) FROM MWA.   1010
*                                                            @Y30DSMD*/
         L     R11,MWALCKA                                         1010
*       RFY                                                        1011
*         R11 UNRSTD;               /* RELEASE REG(11).      @Y30DSMD*/
*                                                                  1011
*       /*************************************************************/
*       /*                                                           */
*       /* THE LOCAL LOCK HAS BEEN OBTAINED, THE BRANCH TO FREEMAIN  */
*       /* MAY NOW BE DONE.                                  @Y30DSMD*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  1012
*       R0=MWABYTES;                /* ADJUST REG(0) FOR THIS      1012
*                                      FREEMAIN.             @Y30DSMD*/
         L     R0,MWABYTES-1                                       1012
         ICM   R0,8,@CB00222                                       1012
*       R4=TCBJSTCB;                /* SET TCB ADDRS, MAY NOT BE   1013
*                                      CURRENT TCB.          @Y30DSMD*/
         L     @11,PSATOLD                                         1013
         L     R4,TCBJSTCB(,@11)                                   1013
*       R7=PSAAOLD;                 /* SET ASCB AS CURRENT ASCB.   1014
*                                                            @Y30DSMD*/
         L     R7,PSAAOLD                                          1014
*       GEN SETS(RETCODE,R0,R1,R3) REFS(CVTCRMN,R4,R7);            1015
*                                                                  1015
*                                                          /*@Y30DSMD*/
    FREEMAIN RU,LV=(0),A=(1),SP=230,BRANCH=YES,KEY=5
*       /*************************************************************/
*       /*                                                           */
*       /* THE DEB HAS BEEN FREED. RESTORE REGS AND RELEASE THE LOCK.*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  1016
*       R3=MWADEBR3;                /* RESTORE REG(3) FROM THE MWA.
*                                                            @Y30DSMD*/
         LR    R3,MWADEBR3                                         1016
*       R4=MWADEBR4;                /* RESTORE REG(4) FROM THE MODULE
*                                      WORK AREA.            @Y30DSMD*/
         LR    R4,MWADEBR4                                         1017
*       R7=MWADEBR7;                /* RESTORE REG(7).       @Y30DSMD*/
         L     R7,MWADEBR7                                         1018
*       RFY                                                        1019
*         R11 RSTD;                 /* MAKE A NOTE FOR THE COMPILER.
*                                                            @Y30DSMD*/
*       MWALCKA=R11;                /* SAVE OFF REGISTER ELEVEN.   1020
*                                                            @Y30DSMD*/
         ST    R11,MWALCKA                                         1020
*       RFY                                                        1021
*         R11 UNRSTD;               /* THE COMPILER NEEDS REGISTER 1021
*                                      INFO.                 @Y30DSMD*/
*       MWALCKB=R12;                /* SAVE OFF REGISTER TWELVE.   1022
*                                                            @Y30DSMD*/
         ST    R12,MWALCKB                                         1022
*       MWALCKC=R1;                 /* REGISTER ONE ALSO IS SAVED. 1023
*                                                            @Y30DSMD*/
         LR    MWALCKC,R1                                          1023
*       R1=R13;                     /* SWITCH REGISTER 13 FOR LATER.
*                                                            @Y30DSMD*/
         LR    R1,R13                                              1024
*       GEN SETS(R11,R12,R13,RET) REFS(PSALITA,FLC);               1025
*                                                          /*@Y30DSMD*/
          SETLOCK RELEASE,TYPE=LOCAL,                                  *
               RELATED=(LOCAL,IDA0200B(FREECORE))
*       R13=R1;                     /* RESTORE REG(13) FROM REG(1).
*                                                            @Y30DSMD*/
         LR    R13,R1                                              1026
*       R1=MWALCKC;                 /* RESTORE REG(1) FROM MWA.    1027
*                                                            @Y30DSMD*/
         LR    R1,MWALCKC                                          1027
*       R12=MWALCKB;                /* RESTORE REG(12) FROM MWA.   1028
*                                                            @Y30DSMD*/
         L     R12,MWALCKB                                         1028
*       RFY                                                        1029
*         R11 RSTD;                 /* INFORM COMPILER OF USAGE.   1029
*                                                            @Y30DSMD*/
*       R11=MWALCKA;                /* RESTORE REG(11) FROM MWA.   1030
*                                                            @Y30DSMD*/
         L     R11,MWALCKA                                         1030
*       RFY                                                        1031
*         R11 UNRSTD;               /* INFORM COMPILER OF REG USAGE.
*                                                            @Y30DSMD*/
*                                                                  1031
*       /*************************************************************/
*       /*                                                           */
*       /* THE LOCAL LOCK HAS BEEN RELEASED.                 @Y30DSMD*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  1032
*     END;                          /* END OF SPECIAL FREEMAIN FOR 1032
*                                      DEBS.                 @Y30DSMD*/
*                                                                  1032
*   /*****************************************************************/
*   /*                                                               */
*   /* IF NOT A DEB OR IF A CTLG OR A GSR DEB THEN COME HERE.        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1033
*   ELSE                            /* IF NOT DEB OR IF GSR OR CTLG
*                                      DEB THEN.             @Y30DSMD*/
*     DO;                           /* USE THIS FREEMAIN LOGIC.    1033
*                                                            @Z30SSMD*/
         B     @RC00994                                            1033
@RF00994 DS    0H                                                  1034
*       IF MWAFRKEY<K80 THEN        /* IF IN SYSTEM KEY THEN @Z40ESSR*/
         CLI   MWAFRKEY,X'80'                                      1034
         BNL   @RF01034                                            1034
*         DO;                       /*                       @Z40ESSR*/
*           RFY                                                    1036
*             R14 RSTD;             /*                       @Z40ESSR*/
*           R14=MWAFRKEY;           /* LOAD KEY INTO REG     @Z40ESSR*/
         SLR   R14,R14                                             1037
         IC    R14,MWAFRKEY                                        1037
*           SPKA(R14);              /* MODESET TO USER KEY   @Z40ESSR*/
         SPKA  0(R14)                                              1038
*           RFY                                                    1039
*             R14 UNRSTD;           /*                       @Z40ESSR*/
*         END;                      /*                       @Z40ESSR*/
*       GEN(FREEMAIN R,LV=(R0),A=(R1));/* FREEMAIN                   */
@RF01034 DS    0H                                                  1041
         FREEMAIN R,LV=(R0),A=(R1)
*       GEN( MODESET EXTKEY=ZERO);  /* FORCE KEY ZERO.       @Z30SSMD*/
          MODESET EXTKEY=ZERO
*     END;                          /* END OF OTHER FREEMAIN LOGIC.
*                                                            @Z30SSMD*/
*   MWAFRKEY=K00;                   /* RESET FREEMAIN KEY.   @Z30SSMD*/
@RC00994 MVI   MWAFRKEY,X'00'                                      1044
*   RESPECIFY                                                      1045
*     RET RESTRICTED;                                              1045
*   RET=MWASAVEC;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEC                                        1046
*   RESPECIFY                                                      1047
*    (R0,                                                          1047
*     R1,                                                          1047
*     R7,                                                          1047
*     RET) UNRESTRICTED;            /*                       @Y30DSMD*/
*   END FREECORE;                                                  1048
@EL00016 DS    0H                                                  1048
@EF00016 DS    0H                                                  1048
@ER00016 BR    @14                                                 1048
*GETCORE:                                                          1049
*                                                                  1049
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-ISSUE GETMAIN'S TO OBTAIN CORE STORAGE        */
*/*      01   INPUTS-  1. SUBPOOL NUMBER IN MWASPOOL                 */
*/*                    2. NUMBER OF BYTES REQUIRED IN MWABYTES       */
*/*      01   OUTPUTS- 1. ADDRESS OF GOTTEN CORE IN MWADDRES         */
*/*                    2. IF GETMAIN FAILED, PROBLEM DETERM IS CALLED*/
*/*      IN VS2 THIS ROUTINE HAS BEEN ALTERED TO PROVIDE SUPPORT     */
*/*      FOR SUBPOOL 241(GSRPOOL) GSR KEY FOR RPL REQMTS.    @Z40ESSR*/
*/*                                                                  */
*/********************************************************************/
*                                                                  1049
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1049
GETCORE  DS    0H                                                  1050
*   RESPECIFY                                                      1050
*    (R1,                                                          1050
*     R6,                                                          1050
*     R7,                                                          1050
*     R8,                                                          1050
*     R9,                                                          1050
*     RET) RESTRICTED;              /*                       @Z30SSMD*/
*   MWASAVEC=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEC                                        1051
*   RESPECIFY                                                      1052
*     RET UNRESTRICTED;                                            1052
*   MWANOCOR=OFF;                   /* INDICATOR SET TO OFF          */
         NI    MWANOCOR,B'01111111'                                1053
*   IF MWAFRKEY<=K70 THEN           /* IF IN SYSTEM KEY THEN @Z40ESSR*/
         CLI   MWAFRKEY,X'70'                                      1054
         BH    @RF01054                                            1054
*     DO;                           /* MODESET TO SYSTEM KEY @Z40ESSR*/
*       R6=MWAFRKEY;                /* LOAD KEY INTO REG 6   @Z40ESSR*/
         SLR   R6,R6                                               1056
         IC    R6,MWAFRKEY                                         1056
*       SPKA(R6);                   /* MODESET TO SYSTEM KEY @Z40ESSR*/
         SPKA  0(R6)                                               1057
*     END;                          /*                       @Z40ESSR*/
*   R6=MWASPOOL;                    /* SUBPOOL NUMBER                */
@RF01054 SLR   R6,R6                                               1059
         IC    R6,MWASPOOL                                         1059
*   R7=MWABYTES;                    /* NUMBER OF BYTES REQUIRED      */
         L     R7,MWABYTES-1                                       1060
         LA    R7,0(,R7)                                           1060
*   GEN(GETMAIN RC,LV=(R7),SP=(R6))                                1061
*   SETS(RETCODE,R1);               /* ISSUE GETMAIN         @Z30SSMD
*                                                            @Z30SSMD*/
         GETMAIN RC,LV=(R7),SP=(R6)
*   GEN(MODESET EXTKEY=ZERO FORCE RETURN TO KEY ZERO);/* SWITCH PSW
*                                      KEY                           */
         MODESET EXTKEY=ZERO FORCE RETURN TO KEY ZERO
*   RESPECIFY                                                      1063
*     RETCODE RESTRICTED;                                          1063
*   MWAFRKEY=K00;                   /* RESET KEY SWITCH TO DEFAULT TO
*                                      ZERO.                 @Z30SSMD*/
         MVI   MWAFRKEY,X'00'                                      1064
*   IF RETCODE=ZERO THEN            /* GETMAIN SUCCESSFUL            */
         LTR   RETCODE,RETCODE                                     1065
         BNZ   @RF01065                                            1065
*     DO;                                                          1066
*       MWADDRES=R1;                /* STORE OFF THE STORAGE ADDRESS.
*                                                            @Z30SSMD*/
         ST    R1,MWADDRES                                         1067
*       R6=MWADDRES;                /* ADDRESS OF GOTTEN CORE        */
         L     @14,MWADDRES                                        1068
         LR    R6,@14                                              1068
*       R9=ZERO;                    /* ZERO PAD BYTE                 */
         SLR   R9,R9                                               1069
*       GEN(MVCL R6,R8)                                            1070
*       NOSETS;                     /* ZERO GOTTEN CORE              */
         MVCL R6,R8
*       RESPECIFY                                                  1071
*        (R1,                                                      1071
*         R6,                                                      1071
*         R7,                                                      1071
*         R8,                                                      1071
*         R9) UNRESTRICTED;         /*                       @Z30SSMD*/
*     END;                                                         1072
*   ELSE                            /* IF GETMAIN FAILED             */
*     DO;                                                          1073
         B     @RC01065                                            1073
@RF01065 DS    0H                                                  1074
*       MWANOCOR=ON;                /* INDICATE GETMAIN FAILED       */
         OI    MWANOCOR,B'10000000'                                1074
*       MWAPCODE=PP20;              /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'14'                                      1075
*       CALL PROBDT;                /* CALL PROBLEM DETERMINATION    */
         BAL   @14,PROBDT                                          1076
*     END;                                                         1077
*   RESPECIFY                                                      1078
*     RET RESTRICTED;                                              1078
@RC01065 DS    0H                                                  1079
*   RET=MWASAVEC;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEC                                        1079
*   RESPECIFY                                                      1080
*    (RET,                                                         1080
*     RETCODE) UNRESTRICTED;                                       1080
*   END GETCORE;                                                   1081
@EL00017 DS    0H                                                  1081
@EF00017 DS    0H                                                  1081
@ER00017 BR    @14                                                 1081
*CBRELE:                                                           1082
*                                                                  1082
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - FREE ALL NO LONGER USED CONTROL BLOCKS        */
*/*                    DECHAIN BUFC'S AND PLH'S                      */
*/*      01 INPUTS -   1. ADDRESS OF AMBL IN MWAMBLPT                */
*/*      01 OUTPUTS -  1. ALL UNUSED CONTROL BLOCKS FREED            */
*/*                                                                  */
*/********************************************************************/
*                                                                  1082
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1082
CBRELE   DS    0H                                                  1083
*   RESPECIFY                                                      1083
*     RET RESTRICTED;                                              1083
*   RESPECIFY                                                      1084
*     IDABUFDR BASED(AMBBUFC);                                     1084
*   RESPECIFY                                                      1085
*     IDABUFC BASED(MWABUFCP);                                     1085
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        1086
*   RESPECIFY                                                      1087
*     RET UNRESTRICTED;                                            1087
*   MWAPFUNC=PDF114;                /* SET FUNCTION CODE             */
         MVI   MWAPFUNC,X'72'                                      1088
*   IF CLWPRMCL=ON THEN             /* IS THIS A PRIMARY CLOSE?    1089
*                                                            @XA09247*/
         TM    CLWPRMCL(RCORE),B'10000000'                         1089
         BNO   @RF01089                                            1089
*     DO;                           /* PRIMARY CLOSE PROCESSING.   1090
*                                                            @XA09247*/
*       IF AMBLFIX=ON THEN          /* IF AMBL INDICATE PAGE FIXED   */
         L     @05,ACBAMBL(,RACB)                                  1091
         TM    AMBLFIX(@05),B'00001000'                            1091
         BNO   @RF01091                                            1091
*         CALL PAGEFREE;            /* BUILD PAGE FREE LIST          */
         BAL   @14,PAGEFREE                                        1092
*       DO MWAINDEX=1 TO CMBCNT;    /* LOOP THRUGH CMB ENTRIES       */
@RF01091 LA    MWAINDEX,1                                          1093
         B     @DE01093                                            1093
@DL01093 DS    0H                                                  1094
*         IF MWAPTR(MWAINDEX)^=ZERO THEN/* CMB ENTRY IS NOT ZERO     */
         LR    @08,MWAINDEX                                        1094
         SLA   @08,2                                               1094
         L     @05,ACBAMBL(,RACB)                                  1094
         L     @05,AMBLCMB(,@05)                                   1094
         L     @08,MWAPTR+4(@08,@05)                               1094
         LTR   @08,@08                                             1094
         BZ    @RF01094                                            1094
*           DO;                                                    1095
*             MWAHEBPT=MWAPTR(MWAINDEX);/* GET CMB ENTRY             */
         LR    MWAHEBPT,@08                                        1096
*             CALL FREEHEB;         /* FREE CORE                     */
         BAL   @14,FREEHEB                                         1097
*           END;                                                   1098
*       END;                                                       1099
@RF01094 AL    MWAINDEX,@CF00051                                   1099
@DE01093 L     @08,ACBAMBL(,RACB)                                  1099
         L     @08,AMBLCMB(,@08)                                   1099
         CH    MWAINDEX,CMBCNT(,@08)                               1099
         BNH   @DL01093                                            1099
*       CMBID=ZERO;                 /* ZERO CMBID            @ZA02280*/
         L     @05,ACBAMBL(,RACB)                                  1100
         L     @15,AMBLCMB(,@05)                                   1100
         MVI   CMBID(@15),X'00'                                    1100
*       MWADDRES=AMBLCMB;           /* POINT TO CMB                  */
         ST    @15,MWADDRES                                        1101
*       MWABYTES=CMBLEN;            /* LENGTH OF CMB         @ZA02280*/
         LH    @15,CMBLEN(,@15)                                    1102
         STCM  @15,7,MWABYTES                                      1102
*       IF AMBLCAT=ON THEN          /* IF THIS IS CATALOG            */
         TM    AMBLCAT(@05),B'00000010'                            1103
         BNO   @RF01103                                            1103
*         MWASPOOL=CATPOOL;         /* GET CATALOG SUBPOOL NUMBER    */
         MVI   MWASPOOL,X'E7'                                      1104
*       ELSE                        /* IF NOT CATALOG        @Z30SSRL*/
*         IF AMBLGSR=ON×AMBLCBIC=ON THEN/* IS THIS GSR OR CBIC     1105
*                                                            @ZA16012*/
         B     @RC01103                                            1105
@RF01103 L     @05,ACBAMBL(,RACB)                                  1105
         TM    AMBLGSR(@05),B'01000000'                            1105
         BO    @RT01105                                            1105
         TM    AMBLCBIC(@05),B'10000000'                           1105
         BNO   @RF01105                                            1105
@RT01105 DS    0H                                                  1106
*           MWASPOOL=GSRSPOOL;      /* THEN USE GLOBAL SUB-POOL.   1106
*                                                            @Y30DSMD*/
         MVI   MWASPOOL,X'F1'                                      1106
*         ELSE                      /* IF THIS IS NOT CATALOG OR GSR */
*           MWASPOOL=CMBPOOL;       /* SUBPOOL OF CMB                */
         B     @RC01105                                            1107
@RF01105 MVI   MWASPOOL,X'FC'                                      1107
*       CALL FREECORE;              /* FREE CMB                      */
@RC01105 DS    0H                                                  1108
@RC01103 BAL   @14,FREECORE                                        1108
*     END;                          /* END OF PRIMARY CLOSE ONLY   1109
*                                      LOGIC.                @XA09247*/
*   ELSE                            /* IF NOT PRIMARY THEN IT IS   1110
*                                      PARTIAL CLOSE.        @XA09247*/
*     IF AMBLLSR=OFF&AMBLGSR=OFF THEN/* THEN IF NOT DB/DC.   @XA09247*/
         B     @RC01089                                            1110
@RF01089 L     @05,ACBAMBL(,RACB)                                  1110
         TM    AMBLLSR(@05),B'01100000'                            1110
         BNZ   @RF01110                                            1110
*       DO;                         /* PROCESS PARTIAL CLOSE ,     1111
*                                      (NON-DB/DC).          @XA09247*/
*         CLWAMBPT=AMBLDTA;         /* POINT TO DATA AMB             */
         L     @15,ACBAMBL(,RACB)                                  1112
         L     @15,AMBLDTA(,@15)                                   1112
         ST    @15,CLWAMBPT(,RCORE)                                1112
*         MWABUFCP=BUFDBUFC;        /* ADDRESSABILITY TO FIRST BUFC  */
         L     @15,AMBBUFC(,@15)                                   1113
         L     MWABUFCP,BUFDBUFC(,@15)                             1113
*         BUFDRNO=0;                /* RESET BUFC COUNT      @ZA19562*/
         MVI   BUFDRNO(@15),X'00'                                  1114
*         DO WHILE BUFCUPG=ON;      /* DECHAIN ALL NON-UPGRADE BUFC  */
         B     @DE01115                                            1115
@DL01115 DS    0H                                                  1116
*           BUFDRNO=BUFDRNO+1;      /* COUNT BUFC'S WE KEEP  @ZA19562*/
         L     @01,CLWAMBPT(,RCORE)                                1116
         L     @15,AMBBUFC(,@01)                                   1116
         LA    @14,1                                               1116
         SLR   @11,@11                                             1116
         IC    @11,BUFDRNO(,@15)                                   1116
         ALR   @14,@11                                             1116
         STC   @14,BUFDRNO(,@15)                                   1116
*           MWASVPTR=MWABUFCP;      /* SAVE CURRENT BUFC POINTER     */
         ST    MWABUFCP,MWASVPTR                                   1117
*           MWABUFCP=BUFCHAIN;      /* POINT TO NEXT BUFC IN CHAIN   */
         L     MWABUFCP,BUFCHAIN(,MWABUFCP)                        1118
*         END;                                                     1119
@DE01115 TM    BUFCUPG(MWABUFCP),B'10000000'                       1119
         BO    @DL01115                                            1119
*         MWASVPTR->BUFCHAIN=ZERO;  /* ZERO CHAIN POINTER OF LAST  1120
*                                      BUFC                          */
         SLR   @05,@05                                             1120
         L     @01,MWASVPTR                                        1120
         ST    @05,BUFCHAIN(,@01)                                  1120
*         AMBPH=ZERO;               /* ZERO AMB POINTER TO PATH PLH'S*/
         L     @01,CLWAMBPT(,RCORE)                                1121
         ST    @05,AMBPH(,@01)                                     1121
*         IF AMBLIX^=ZERO THEN      /* IF KSDS                       */
         L     @01,ACBAMBL(,RACB)                                  1122
         L     @15,AMBLIX(,@01)                                    1122
         CR    @15,@05                                             1122
         BE    @RF01122                                            1122
*           DO;                                                    1123
*             CLWAMBPT=AMBLIX;      /* PUT INDEX AMB POINTER IN CLW  */
         ST    @15,CLWAMBPT(,RCORE)                                1124
*             MWABUFCP=BUFDBUFC;    /* POINT TO FIRST BUFC IN CHAIN  */
         L     @01,AMBBUFC(,@15)                                   1125
         L     MWABUFCP,BUFDBUFC(,@01)                             1125
*             DO WHILE BUFCUPG=OFF; /* BYPASS ALL NON-UPGRADE BUFC'S */
         B     @DE01126                                            1126
@DL01126 DS    0H                                                  1127
*               BUFDRNO=BUFDRNO-1;  /* DROP CNT WITH BUFC    @ZA19562*/
         L     @01,CLWAMBPT(,RCORE)                                1127
         L     @15,AMBBUFC(,@01)                                   1127
         SLR   @14,@14                                             1127
         IC    @14,BUFDRNO(,@15)                                   1127
         BCTR  @14,0                                               1127
         STC   @14,BUFDRNO(,@15)                                   1127
*               MWABUFCP=BUFCHAIN;  /* POINT TO NEXT BUFC            */
         L     MWABUFCP,BUFCHAIN(,MWABUFCP)                        1128
*             END;                                                 1129
@DE01126 TM    BUFCUPG(MWABUFCP),B'10000000'                       1129
         BZ    @DL01126                                            1129
*             BUFDBUFC=MWABUFCP;    /* CHAIN UPGRADE BUFC & BUFC   1130
*                                      HEADER                        */
         L     @15,CLWAMBPT(,RCORE)                                1130
         L     @01,AMBBUFC(,@15)                                   1130
         ST    MWABUFCP,BUFDBUFC(,@01)                             1130
*             AMBPH=ZERO;           /* ZERO AMB POINTER TO PATH PLH'S*/
         SLR   @05,@05                                             1131
         ST    @05,AMBPH(,@15)                                     1131
*           END;                                                   1132
*         MWAHEBPT=CMBSTPTR;        /* POINT TO STRING BLOCK HEB     */
@RF01122 L     @01,ACBAMBL(,RACB)                                  1133
         L     @01,AMBLCMB(,@01)                                   1133
         L     MWAHEBPT,CMBSTPTR(,@01)                             1133
*         CALL FREEHEB;             /* FREE STRING BLOCK             */
         BAL   @14,FREEHEB                                         1134
*         CMBSTPTR=ZERO;            /* CLEAR STRING BLK PTR          */
         L     @01,ACBAMBL(,RACB)                                  1135
         L     @15,AMBLCMB(,@01)                                   1135
         SLR   @14,@14                                             1135
         ST    @14,CMBSTPTR(,@15)                                  1135
*         MWAHEBPT=CMBFSTPT;        /* POINT TO FIXED STRING BLOCK   */
         L     MWAHEBPT,CMBFSTPT(,@15)                             1136
*         CALL FREEHEB;             /* FREE FIXED STRING BLOCK       */
         BAL   @14,FREEHEB                                         1137
*         CMBFSTPT=ZERO;            /* CLEAR FIXSTR BLK PTR          */
         L     @01,ACBAMBL(,RACB)                                  1138
         L     @15,AMBLCMB(,@01)                                   1138
         SLR   @14,@14                                             1138
         ST    @14,CMBFSTPT(,@15)                                  1138
*         MWAHEBPT=CMBBFRPT;        /* POINT TO BUFFER BLOCK         */
         L     MWAHEBPT,CMBBFRPT(,@15)                             1139
*         CALL FREEHEB;             /* FREE BUFFER BLOCK             */
         BAL   @14,FREEHEB                                         1140
*         CMBBFRPT=ZERO;            /* CLEAR BFR BLK PTR             */
         L     @05,ACBAMBL(,RACB)                                  1141
         L     @05,AMBLCMB(,@05)                                   1141
         SLR   @15,@15                                             1141
         ST    @15,CMBBFRPT(,@05)                                  1141
*         CMBNST=ZERO;              /* RESET NUMBER OF STRINGS TO  1142
*                                      ZERO                          */
         MVI   CMBNST(@05),X'00'                                   1142
*       END;                        /* END OF PARTIAL CLOSE        1143
*                                      (NON-DB/DC).          @XA09247*/
*   RESPECIFY                                                      1144
*     RET RESTRICTED;                                              1144
@RF01110 DS    0H                                                  1144
@RC01089 DS    0H                                                  1145
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        1145
*   RESPECIFY                                                      1146
*     RET UNRESTRICTED;                                            1146
*   END CBRELE;                                                    1147
@EL00018 DS    0H                                                  1147
@EF00018 DS    0H                                                  1147
@ER00018 BR    @14                                                 1147
*FREEHEB:                                                          1148
*                                                                  1148
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - FREE STORAGE POINTED TO BY HEADER ELEMENT     */
*/*                    BLOCK                                         */
*/*      01 INPUTS -   1. ADDR OF FIRST HEB OF HEB CHAIN IN MWAHEBPT */
*/*      01 OUTPUTS -  1. STORAGE POINTED TO BY HEB'S WERE FREED     */
*/*                    2. THE FREED HEB'S WERE CHAINED TO THE BIB    */
*/*                                                                  */
*/* IN VS2 THIS ROUTINE IS ALTERED TO DETECT KEY 5 AND KEY 7        .*/
*/* CORE. MWAFRKEY IS THEN SET FOR THE FREECORE ROUTINE.            .*/
*/********************************************************************/
*                                                                  1148
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1148
FREEHEB  DS    0H                                                  1149
*   RESPECIFY                                                      1149
*     RET RESTRICTED;                                              1149
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1150
*   RESPECIFY                                                      1151
*     RET UNRESTRICTED;                                            1151
*   DO WHILE MWAHEBPT^=ZERO;        /* FREE HEB CHAIN                */
         B     @DE01152                                            1152
@DL01152 DS    0H                                                  1153
*     MWADDRES=HEBBLKPT;            /* POINT TO CORE TO BE FREED     */
         L     @08,HEBBLKPT(,MWAHEBPT)                             1153
         ST    @08,MWADDRES                                        1153
*     MWASPOOL=HEBSP;               /* SUBPOOL NUMBER                */
         IC    @08,HEBSP(,MWAHEBPT)                                1154
         STC   @08,MWASPOOL                                        1154
*     MWABYTES=HEBLN;               /* LENGTH OF CORE TO BE FREED    */
         MVC   MWABYTES(3),HEBLN(MWAHEBPT)                         1155
*     IF HEBKEY5=ON THEN            /* IS CORE IN KEY 5 CORE?      1156
*                                                            @Y30DSMD*/
         TM    HEBKEY5(MWAHEBPT),B'01000000'                       1156
         BNO   @RF01156                                            1156
*       MWAFRKEY=K50;               /* YES, SET SW FOR FREECORE.   1157
*                                                            @Y30DSMD*/
         MVI   MWAFRKEY,X'50'                                      1157
*     ELSE                          /* IF NOT KEY 5 CORE     @Z30SSRL*/
*       IF HEBGSRKT=ON THEN         /* IF GSR BLOCK THEN     @Z40ESSR*/
         B     @RC01156                                            1158
@RF01156 TM    HEBGSRKT(MWAHEBPT),B'00100000'                      1158
         BNO   @RF01158                                            1158
*         MWAFRKEY=HEBGSRK;         /* MOVE GSR USER KEY     @Z40ESSR*/
*                                                                  1159
         IC    @08,HEBGSRK(,MWAHEBPT)                              1159
         STC   @08,MWAFRKEY                                        1159
*     /***************************************************************/
*     /*                                                             */
*     /* IF NOT KEY 5 & NOT GSR THEN DEFAULT TO KEY 0        @Z40ESSR*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  1160
*     CALL FREECORE;                /* FREE CORE INDICATED IN HEB    */
@RF01158 DS    0H                                                  1160
@RC01156 BAL   @14,FREECORE                                        1160
*     MWASVPTR=HEBELCHN;            /* SAVE POINTER TO NEXT HEB      */
         L     @08,HEBELCHN(,MWAHEBPT)                             1161
         ST    @08,MWASVPTR                                        1161
*     HEBHDREL=HEBHDREL&&HEBHDREL;  /* ZERO OUT HEB ELEMENT          */
         XC    HEBHDREL(24,MWAHEBPT),HEBHDREL(MWAHEBPT)            1162
*     HEBELCHN=BIBHEBFQ;            /* CHAIN TO FREE HEB CHAIN       */
         L     @01,ACBAMBL(,RACB)                                  1163
         L     @15,AMBLBIB(,@01)                                   1163
         L     @14,BIBHEBFQ(,@15)                                  1163
         ST    @14,HEBELCHN(,MWAHEBPT)                             1163
*     BIBHEBFQ=MWAHEBPT;            /* CHAIN UP WITH BIB             */
         ST    MWAHEBPT,BIBHEBFQ(,@15)                             1164
*     MWAHEBPT=MWASVPTR;            /* POINT TO NEXT HEB             */
         LR    MWAHEBPT,@08                                        1165
*   END;                                                           1166
@DE01152 LTR   MWAHEBPT,MWAHEBPT                                   1166
         BNZ   @DL01152                                            1166
*   RESPECIFY                                                      1167
*     RET RESTRICTED;                                              1167
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        1168
*   RESPECIFY                                                      1169
*     RET UNRESTRICTED;                                            1169
*   END FREEHEB;                                                   1170
@EL00019 DS    0H                                                  1170
@EF00019 DS    0H                                                  1170
@ER00019 BR    @14                                                 1170
*PAGEFREE:                                                         1171
*                                                                  1171
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - PAGE FREE ALL FIXED RESOURCES                 */
*/*      01 INPUTS -   1. ELEMENTS TO BE FREED                       */
*/*      01 OUTPUTS -  1. PAGE FREE COMPLETE                         */
*/*                                                                  */
*/********************************************************************/
*                                                                  1171
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1171
PAGEFREE DS    0H                                                  1172
*   RESPECIFY                                                      1172
*     RET RESTRICTED;                                              1172
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1173
*   RESPECIFY                                                      1174
*     RET UNRESTRICTED;                                            1174
*   MWACOUNT=ZERO;                  /* INITIALIZE COUNT TO ZERO      */
         SLR   MWACOUNT,MWACOUNT                                   1175
*   DO MWAINDEX=1 TO CMBCNT;        /* LOOP THRUGH CMB               */
         LA    MWAINDEX,1                                          1176
         B     @DE01176                                            1176
@DL01176 DS    0H                                                  1177
*     MWAHEBPT=MWAPTR(MWAINDEX);    /* GET CMB ENTRIES               */
         LR    @08,MWAINDEX                                        1177
         SLA   @08,2                                               1177
         L     @06,ACBAMBL(,RACB)                                  1177
         L     @06,AMBLCMB(,@06)                                   1177
         L     MWAHEBPT,MWAPTR+4(@08,@06)                          1177
*     DO WHILE MWAHEBPT^=ZERO;      /* IF CMB ENTRY IS NOT ZERO      */
         B     @DE01178                                            1178
@DL01178 DS    0H                                                  1179
*       IF MWAHEBPT^=CMBDEBPT&      /* NOT POINTER TO DEB AND        */
*           MWAHEBPT^=CMBFSTPT THEN /* NOT POINTER TO FIXED STRING 1179
*                                      BLOCK                         */
         L     @08,ACBAMBL(,RACB)                                  1179
         L     @08,AMBLCMB(,@08)                                   1179
         C     MWAHEBPT,CMBDEBPT(,@08)                             1179
         BE    @RF01179                                            1179
         C     MWAHEBPT,CMBFSTPT(,@08)                             1179
         BE    @RF01179                                            1179
*         MWACOUNT=MWACOUNT+ONE;    /* INCREASE COUNT BY ONE         */
         AL    MWACOUNT,@CF00051                                   1180
*       MWAHEBPT=HEBELCHN;          /* POINT TO NEXT HEB IN CHAIN    */
@RF01179 L     MWAHEBPT,HEBELCHN(,MWAHEBPT)                        1181
*     END;                                                         1182
@DE01178 LTR   MWAHEBPT,MWAHEBPT                                   1182
         BNZ   @DL01178                                            1182
*   END;                                                           1183
         AL    MWAINDEX,@CF00051                                   1183
@DE01176 L     @08,ACBAMBL(,RACB)                                  1183
         L     @08,AMBLCMB(,@08)                                   1183
         CH    MWAINDEX,CMBCNT(,@08)                               1183
         BNH   @DL01176                                            1183
*   MWASPOOL=FIXDPOOL;              /* GET CORE FROM FIXED POOL      */
         MVI   MWASPOOL,X'F5'                                      1184
*   MWABYTES=MWACOUNT*DWORDLEN;     /* GET CORE FOR PAGE FREE LIST   */
         LR    @06,MWACOUNT                                        1185
         SLA   @06,3                                               1185
         STCM  @06,7,MWABYTES                                      1185
*   CALL GETCORE;                   /* ISSUE GETMAIN                 */
         BAL   @14,GETCORE                                         1186
*   IF MWANOCOR=ON THEN             /* GETMAIN FAILED                */
         TM    MWANOCOR,B'10000000'                                1187
         BNO   @RF01187                                            1187
*     DO;                                                          1188
*       CLWTERM=ON;                 /* INDICATE TERMINATING ERROR    */
         OI    CLWTERM(RCORE),B'00010000'                          1189
*       RETURN TO LTRM200B;         /* TERMINATION PROCESSING        */
         LA    @14,LTRM200B                                        1190
@EL00020 DS    0H                                                  1190
@EF00020 DS    0H                                                  1190
@ER00020 BR    @14                                                 1190
*     END;                                                         1191
*   RESPECIFY                                                      1192
*     PAGELIST BASED(MWADDRES);     /* ADDRESSABILITY FOR PAGE FREE
*                                      LIST                          */
@RF01187 DS    0H                                                  1193
*   MWAIND=ONE;                     /* INITIALIZE INDEX              */
         LA    @05,1                                               1193
         LR    MWAIND,@05                                          1193
*   DO MWAINDEX=1 TO CMBCNT;        /* LOOP THRUGH CMB ENTRIES       */
         LR    MWAINDEX,@05                                        1194
         B     @DE01194                                            1194
@DL01194 DS    0H                                                  1195
*     MWAHEBPT=MWAPTR(MWAINDEX);    /* GET CMB ENTRIES               */
         LR    @08,MWAINDEX                                        1195
         SLA   @08,2                                               1195
         L     @07,ACBAMBL(,RACB)                                  1195
         L     @07,AMBLCMB(,@07)                                   1195
         L     MWAHEBPT,MWAPTR+4(@08,@07)                          1195
*     DO WHILE MWAHEBPT^=ZERO;      /* IF CMB ENTRY IS NOT ZERO      */
         B     @DE01196                                            1196
@DL01196 DS    0H                                                  1197
*       IF MWAHEBPT^=CMBDEBPT&      /* IF NOT DEB POINTER AND        */
*           MWAHEBPT^=CMBFSTPT THEN /* NOT POINTER TO FIXED STRING 1197
*                                      BLOCK                         */
         L     @08,ACBAMBL(,RACB)                                  1197
         L     @08,AMBLCMB(,@08)                                   1197
         C     MWAHEBPT,CMBDEBPT(,@08)                             1197
         BE    @RF01197                                            1197
         C     MWAHEBPT,CMBFSTPT(,@08)                             1197
         BE    @RF01197                                            1197
*         DO;                                                      1198
*           PFLBGAD(MWAIND)=HEBBLKPT;/* BEGINNING ADDRESS OF BLOCK   */
         L     @08,MWADDRES                                        1199
         LR    @07,MWAIND                                          1199
         SLA   @07,3                                               1199
         L     @15,HEBBLKPT(,MWAHEBPT)                             1199
         ST    @07,@TF00001                                        1199
         ALR   @07,@08                                             1199
         AL    @07,@CF05088                                        1199
         STCM  @15,7,PFLBGAD-1(@07)                                1199
*           PFLENDAD(MWAIND)=HEBBLKPT+HEBLN;/* END ADDRESS OF BLOCK  */
         L     @07,HEBLN-1(,MWAHEBPT)                              1200
         LA    @07,0(,@07)                                         1200
         ALR   @15,@07                                             1200
         AL    @08,@TF00001                                        1200
         AL    @08,@CF05089                                        1200
         STCM  @15,7,PFLENDAD-5(@08)                               1200
*           MWAIND=MWAIND+ONE;      /* INCREASE INDEX BY ONE         */
         AL    MWAIND,@CF00051                                     1201
*         END;                                                     1202
*       MWAHEBPT=HEBELCHN;          /* POINT TO NEXT HEB ELEMENT     */
@RF01197 L     MWAHEBPT,HEBELCHN(,MWAHEBPT)                        1203
*     END;                                                         1204
@DE01196 LTR   MWAHEBPT,MWAHEBPT                                   1204
         BNZ   @DL01196                                            1204
*   END;                                                           1205
         AL    MWAINDEX,@CF00051                                   1205
@DE01194 L     @08,ACBAMBL(,RACB)                                  1205
         L     @08,AMBLCMB(,@08)                                   1205
         CH    MWAINDEX,CMBCNT(,@08)                               1205
         BNH   @DL01194                                            1205
*   PFLEND(MWAIND-ONE)=ON;          /* IND LAST ENTRY OF PAGE FREE 1206
*                                      LIST                          */
         L     @07,MWADDRES                                        1206
         LR    @05,MWAIND                                          1206
         SLA   @05,3                                               1206
         ALR   @05,@07                                             1206
         AL    @05,@CF05090                                        1206
         OI    PFLEND-4(@05),B'10000000'                           1206
*   RESPECIFY                                                      1207
*     R7 RESTRICTED;                                               1207
*   R7=ADDR(PAGELIST);              /* POINT TO PAGE FREE LIST       */
         L     @05,MWADDRES                                        1208
         LR    R7,@05                                              1208
*   GEN(PGFREE L,LA=(R7));          /* PAGE FREE ALL CMB FIXED     1209
*                                      STORAGE                       */
         PGFREE L,LA=(R7)
*   RESPECIFY                                                      1210
*     R7 UNRESTRICTED;                                             1210
*   CALL FREECORE;                  /* FREEMAIN FOR PAGE FREE LIST   */
         BAL   @14,FREECORE                                        1211
*   RESPECIFY                                                      1212
*     RET RESTRICTED;                                              1212
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        1213
*   RESPECIFY                                                      1214
*     RET UNRESTRICTED;                                            1214
*   END PAGEFREE;                                                  1215
         B     @EL00020                                            1215
*DECHNIRB:                                                         1216
*                                                                  1216
*   /*****************************************************************/
*   /*                                                               */
*   /* DECHNIRB DECHAINS THE IRB FROM THE TCB RB QUEUE.      @ZA02280*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1216
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @ZA02280*/
DECHNIRB DS    0H                                                  1217
*   RFY                                                            1217
*     RET RSTD;                     /* RESERVE REG(14).      @ZA02280*/
*   IF IQEIRB->RBIQE->IQETCBA^=ADDR(TCB) THEN/* OUR TCB ?    @ZA02280*/
         L     @15,PSATOLD                                         1218
         L     @05,CLWAMBPT(,RCORE)                                1218
         L     @05,AMBIOMB(,@05)                                   1218
         L     @05,IOMIQE(,@05)                                    1218
         L     @01,IQEIRB(,@05)                                    1218
         L     @01,RBIQE(,@01)                                     1218
         L     @11,IQETCBA-1(,@01)                                 1218
         LA    @11,0(,@11)                                         1218
         CR    @15,@11                                             1218
         BNE   @RT01218                                            1218
*     RETURN;                       /* NO, DO NOT DECHAIN    @ZA02280*/
*   MWASAVEA=RET;                   /* SAVE RETURN ADDR      @ZA02280*/
         ST    @05,@TF00001                                        1220
         ST    RET,MWASAVEA                                        1220
*   RFY                                                            1221
*     RET UNRSTD;                   /* RELEASE THE REGISTER. @ZA02280*/
*   MWAIRBPT=IQEIRBA;               /* ADDRESS OF IRB        @ZA02280*/
         L     @01,@TF00001                                        1222
         L     MWAIRBPT,IQEIRBA-1(,@01)                            1222
         LA    MWAIRBPT,0(,MWAIRBPT)                               1222
*   MWARBPTR=ADDR(RBBASIC);         /* ADDRESS OF TOP RB     @ZA02280*/
         L     MWARBPTR,TCBRBP(,@15)                               1223
*   RESPECIFY                                                      1224
*     RBBASIC BASED(MWARBPTR);      /* ADDRESS CURRENT RB    @ZA02280*/
*   DO UNTIL MWAIRBPT->RBFACTV=OFF× /* LOOP UNTIL DECHAINED  @ZA02280*/
*         RBTCBNXT=ON;              /* OR THE LAST RB FOUND  @ZA02280*/
@DL01225 DS    0H                                                  1226
*     IF RBLINKB=MWAIRBPT THEN      /* IF NEXT RB IS THE IRB @ZA02280*/
         L     @07,RBLINKB-1(,MWARBPTR)                            1226
         LA    @07,0(,@07)                                         1226
         CR    MWAIRBPT,@07                                        1226
         BNE   @RF01226                                            1226
*       DO;                         /* DECHAIN IT            @ZA02280*/
*         RBLINKB=MWAIRBPT->RBLINKB;/* UPDATE RB LINK FIELD  @ZA02280*/
         MVC   RBLINKB(3,MWARBPTR),RBLINKB(MWAIRBPT)               1228
*         MWAIRBPT->RBFACTV=OFF;    /* TURN OFF ACTIVE IND   @ZA02280*/
         NI    RBFACTV(MWAIRBPT),B'10111111'                       1229
*       END;                        /* END OF IRB DECHAIN    @ZA02280*/
*     MWARBPTR=RBLINK;              /* POINT TO NEXT RB      @ZA02280*/
@RF01226 L     MWARBPTR,RBLINK(,MWARBPTR)                          1231
*   END;                            /* END OF RB SCAN        @ZA02280*/
@DE01225 TM    RBFACTV(MWAIRBPT),B'01000000'                       1232
         BZ    @DC01225                                            1232
         TM    RBTCBNXT(MWARBPTR),B'10000000'                      1232
         BNO   @DL01225                                            1232
@DC01225 DS    0H                                                  1233
*   RESPECIFY                                                      1233
*     RBBASIC BASED(TCBRBP);        /* DEFAULT RB BASING     @ZA02280*/
*   RFY                                                            1234
*     RET RSTD;                     /* INFORM THE COMPILER.  @ZA02280*/
*   RET=MWASAVEA;                   /* RESTORE RET REG       @ZA02280*/
         L     RET,MWASAVEA                                        1235
*   RFY                                                            1236
*     RET UNRSTD;                   /* RELEASE REG(14).      @ZA02280*/
*   END DECHNIRB;                   /* END DECHNIRB.         @ZA02280*/
@EL00021 DS    0H                                                  1237
@EF00021 DS    0H                                                  1237
@ER00021 BR    @14                                                 1237
@PB00021 DS    0H                                                  1237
*   END IDA0200B                    /*                       @ZA02280*/
*                                                                  1238
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (LCGPLSSW)                                       */
*/*%INCLUDE SYSLIB  (IDABLPRM)                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDABIB  )                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IGGCAXWA)                                       */
*/*%INCLUDE SYSLIB  (IDACMB  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IDAHEB  )                                       */
*/*%INCLUDE SYSLIB  (IDAIOMB )                                       */
*/*%INCLUDE SYSLIB  (IHAIQE  )                                       */
*/*%INCLUDE SYSLIB  (IEZJSCB )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IKJRB   )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IEESMCA )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*/*%INCLUDE SYSLIB  (IDAVAT  )                                       */
*/*%INCLUDE SYSLIB  (IDARTMAC)                                       */
*/*%INCLUDE SYSLIB  (IDAVMT  )                                       */
*/*%INCLUDE SYSLIB  (IDAVSRT )                                       */
*/*%INCLUDE SYSLIB  (IDAFOREC)                                       */
*/*%INCLUDE SYSLIB  (IECDSECT)                                       */
*/*%INCLUDE SYSLIB  (IECDSECS)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBX)                                       */
*/*%INCLUDE SYSLIB  (IDAPDPRM)                                       */
*/*%INCLUDE SYSLIB  (IDAERRCD)                                       */
*/*%INCLUDE SYSLIB  (IDAERMAP)                                       */
*/*%INCLUDE SYSLIB  (IDAPDFCD)                                       */
*/*%INCLUDE SYSLIB  (IDAPPCDE)                                       */
*/*%INCLUDE SYSLIB  (IDAOCECN)                                       */
*/*%INCLUDE SYSLIB  (IDAVIRT )                                       */
*/*%INCLUDE SYSLIB  (IDACLWRK)                                       */
*/*%INCLUDE SYSLIB  (IDAGMAIN)                                       */
*                                                                  1238
*       ;                                                          1238
@DATA    DS    0H
@DATD    DSECT
         DS    0F
@SA00001 DS    23F
@TF00001 DS    F
IDA0200B CSECT
         DS    0F
@CF00051 DC    F'1'
@CF00037 DC    F'8'
@CF00048 DC    F'16'
@CF00214 DC    F'64'
@CF02712 DC    F'100'
@CF02732 DC    F'148'
@CF05090 DC    F'-12'
@CF05088 DC    F'-7'
@CF05073 DC    F'-4'
@CF05089 DC    F'-3'
@DATD    DSECT
         DS    0D
MWASVPTR DS    A
MWASAVEA DS    A
MWASAVEB DS    A
MWASAVEC DS    A
MWARPLPT DS    A
MWALCKA  DS    A
MWALCKB  DS    A
MWADEBR7 DS    A
MWAPFECB DS    FL4
         ORG   MWAPFECB
@NM00011 DS    CL3
MWAECBCC DS    CL1
         ORG   MWAECBCC
@NM00012 DS    BL1
MWAPFBIT EQU   MWAECBCC+0
         ORG   MWAPFECB+4
MWAFRKEY DS    BL1
         DS    CL3
MWAMNPRM DS    CL20
         ORG   MWAMNPRM
MWADDRES DS    AL4
MWAMNWRD DS    FL4
         ORG   MWAMNWRD
MWASPOOL DS    FL1
MWABYTES DS    AL3
         ORG   MWAMNPRM+8
MWAWORK  DS    3A
         ORG   MWAMNPRM+20
MWAPARML DS    CL20
         ORG   MWAPARML
ENQTCB   DS    AL4
ENQENTRY DS    CL16
         ORG   ENQENTRY
ENQOPT1  DS    BL1
         ORG   ENQOPT1
ENQEND   DS    BL1
ENQNEW   EQU   ENQOPT1+0
@NM00007 EQU   ENQOPT1+0
ENQDIR   EQU   ENQOPT1+0
         ORG   ENQENTRY+1
ENQRLEN  DS    FL1
ENQOPT2  DS    BL1
         ORG   ENQOPT2
ENQSHR   DS    BL1
         ORG   ENQENTRY+3
ENQRETC  DS    FL1
ENQQNADR DS    AL4
ENQRNADR DS    AL4
ENQUCADR DS    AL4
         ORG   MWAPARML+20
MWARNAME DS    CL8
         ORG   MWARNAME
ENQRNCI  DS    CL3
ENQRNACB DS    CL4
ENQRNIND DS    CL1
         ORG   MWARNAME+8
MWACATPM DS    CL56
         ORG   MWACATPM
MWACATID DS    CL1
MWASFIPT DS    AL3
@NM00008 DS    CL1
MWACI    DS    CL3
MWACACB  DS    AL4
MWACLSNM DS    CL44
         ORG   MWACATPM+56
MWARCD64 DS    CL24
         ORG   MWARCD64
MWARCNBR DS    FL1
MWARCIN  DS    BL1
         ORG   MWARCIN
MWARCLOS DS    BL1
MWARCCRA EQU   MWARCIN+0
         ORG   MWARCD64+2
@NM00009 DS    CL2
MWARCAMB DS    AL4
MWARCDSN DS    AL4
MWARCNTR DS    FL4
MWARCCSN DS    AL4
MWASTIOT DS    AL4
         ORG   MWARCD64+24
MWAPDPRM DS    CL4
         ORG   MWAPDPRM
MWAPCODE DS    FL1
MWAPFUNC DS    FL1
MWAPSFC  DS    FL1
@NM00010 DS    CL1
         ORG   MWAPDPRM+4
MWAVIRT  DS    CL24
         DS    CL4
MWATIMES DS    CL8
MWAQNAME DS    CL8
MWADTAWK DS    CL46
MWAIDXWK DS    CL46
MWABLPRM DS    CL52
MWAOUTSW DS    BL1
MWASWTCH DS    BL1
MWARPLBD DS    BL1
MWANOCOR DS    BL1
IDA0200B CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV04985 DC    V(IDA0192Y)
@CV05018 DC    V(IDA0192C)
@CV05022 DC    V(IDA0192D)
@CV05027 DC    V(IDA0192S)
@CV05033 DC    V(IDA0192P)
         DS    0D
@CC04976 DC    C'SYSVSAM '
@CC03816 DC    C'200B'
@CB00222 DC    X'00'
IDAERMAP DC    3AL1(0)
         DC    AL1(132)
         DC    15AL1(0)
         DC    AL1(136)
         DC    AL1(0)
         DC    AL1(184)
         DC    5AL1(0)
         DC    AL1(180)
         DC    3AL1(0)
         DC    AL1(148)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(144)
         DC    AL1(148)
         DC    AL1(196)
         DC    AL1(100)
         DC    AL1(152)
         DC    AL1(160)
         DC    2AL1(0)
         DC    AL1(160)
         DC    AL1(96)
         DC    AL1(192)
         DC    AL1(160)
         DC    AL1(160)
         DC    AL1(224)
         DC    AL1(176)
         DC    AL1(0)
         DC    AL1(168)
         DC    AL1(0)
         DC    AL1(160)
         DC    AL1(0)
         DC    AL1(116)
         DC    AL1(0)
         DC    AL1(108)
         DC    AL1(104)
         DC    AL1(240)
         DC    7AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(188)
         DC    AL1(0)
         DC    AL1(188)
         DC    AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(232)
         DC    3AL1(0)
         DC    AL1(160)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(236)
         DC    AL1(236)
         DC    AL1(0)
         DC    5AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(164)
         DC    3AL1(0)
         DC    AL1(220)
         DC    3AL1(0)
         DC    AL1(228)
         DC    3AL1(0)
         DC    AL1(184)
         DC    3AL1(0)
         DC    AL1(208)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(204)
         DC    3AL1(0)
         DC    AL1(212)
         DC    3AL1(0)
         DC    AL1(216)
         DC    7AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(244)
         DC    3AL1(0)
         DC    AL1(200)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(204)
         DC    AL1(160)
         DC    AL1(160)
         DC    58AL1(0)
IDA0200B CSECT
         DS    0D                       DOUBLE WORD BOUNDARY
PTCH200B DC    ((*-IDA0200B)/20)X'00'   PATCH AREA
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA0200B CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
MWAIND   EQU   @06
MWAINDEX EQU   @09
MWACOUNT EQU   @07
MWADEBR4 EQU   @08
MWADEBR3 EQU   @06
MWALCKC  EQU   @10
MWARDEB  EQU   @05
MWANDEB  EQU   @09
MWAIRBPT EQU   @06
MWARBPTR EQU   @05
MWAVMTPT EQU   @05
MWAUCBPT EQU   @10
MWADEBEX EQU   @06
MWADEBPT EQU   @08
MWAVATPT EQU   @05
MWASAVEE EQU   @05
MWASAVED EQU   @07
MWAMBLPT EQU   @06
MWABUFCP EQU   @05
MWAHEBPT EQU   @05
RCORE    EQU   @04
R0       EQU   @00
R1       EQU   @01
RACB     EQU   @02
RBASEA   EQU   @03
RBASEB   EQU   @12
R12      EQU   @12
R13      EQU   @13
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
R11      EQU   @11
RET      EQU   @14
RETCODE  EQU   @15
R15      EQU   @15
R14      EQU   @14
R3       EQU   @03
RDEB     EQU   @11
RTIOT    EQU   @09
RUCB     EQU   @10
R10      EQU   @10
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
IDABLPRM EQU   0
BLPBUFLP EQU   IDABLPRM+4
BLPUACB  EQU   BLPBUFLP
BLPIOPLH EQU   BLPUACB
BLPFLAGS EQU   IDABLPRM+10
BLPFLAG1 EQU   BLPFLAGS
BLPFBLD  EQU   BLPFLAG1
BLPFDEL  EQU   BLPFLAG1
BLPFLSR  EQU   BLPFLAG1
BLPFGSR  EQU   BLPFLAG1
BLPFLAG2 EQU   BLPFLAGS+1
BLPFIOSR EQU   BLPFLAG2
BLPCORE  EQU   IDABLPRM+16
BLPGFLG  EQU   BLPCORE
BLPIOACB EQU   IDABLPRM+24
BLPBUFL  EQU   0
BLPBRLFG EQU   BLPBUFL+4
MWABUFSA EQU   0
MWAPTR   EQU   0
MWACATWK EQU   0
MWADSN   EQU   MWACATWK
MWACLFLG EQU   MWACATWK+44
MWAOUTBT EQU   MWACLFLG
MWAOPEN  EQU   MWACATWK+45
PAGELIST EQU   0
PFLIST   EQU   PAGELIST
PFLBGAD  EQU   PFLIST+1
@NM00014 EQU   PFLIST+4
PFLEND   EQU   @NM00014
PFLENDAD EQU   PFLIST+5
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBDEB   EQU   ACBDDNM+5
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBERFLG EQU   ACBCOMN+49
ACBINFLG EQU   ACBCOMN+50
ACBINFL1 EQU   ACBINFLG
ACBVVIC  EQU   ACBINFL1
ACBINFL2 EQU   ACBINFLG+1
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
ACBUAPTR EQU   ACBCOMN+64
IDAAMB   EQU   0
AMBBUFC  EQU   IDAAMB+8
AMBPH    EQU   IDAAMB+12
AMBCACB  EQU   IDAAMB+16
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBIOMB  EQU   AMBIOBAD
AMBDDSN  EQU   IDAAMB+35
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBDEBAD EQU   AMBDEBPT+1
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBWKA   EQU   IDAAMB+60
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBLSR   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
IDAAMBL  EQU   0
AMBLACB  EQU   IDAAMBL+8
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLGSR  EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLVC   EQU   IDAAMBL+28
AMBLVRT  EQU   AMBLVC
AMBLENO  EQU   AMBLVC+1
AMBLTYPE EQU   IDAAMBL+30
AMBLFIX  EQU   AMBLTYPE
AMBLQ2   EQU   IDAAMBL+31
AMBLCBIC EQU   AMBLQ2
AMBLSHAR EQU   IDAAMBL+33
AMBLWRIT EQU   AMBLSHAR
AMBLFLG1 EQU   IDAAMBL+35
AMBLVVIC EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
AMBLBIB  EQU   IDAAMBL+60
AMBLCMB  EQU   IDAAMBL+64
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDNEST  EQU   IDAAMDSB+4
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDLM    EQU   AMDATTR3
AMDSTAT  EQU   IDAAMDSB+48
AMDSTSP  EQU   AMDSTAT
IDABIB   EQU   0
BIBHDR   EQU   IDABIB
BIBFLG1  EQU   BIBHDR+1
BIBVIRT  EQU   BIBFLG1
BIBVMT   EQU   IDABIB+12
BIBHEBFQ EQU   IDABIB+36
BIBRTNS  EQU   IDABIB+60
BIBINTRF EQU   BIBRTNS
IDABUFDR EQU   0
BUFDRNO  EQU   IDABUFDR+1
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
BUFDBUFC EQU   IDABUFDR+12
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCUPG  EQU   BUFCFLG1
BUFCIOFL EQU   IDABUFC+2
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCINV  EQU   IDABUFC+28
BUFCHAIN EQU   IDABUFC+48
IGGCAXWA EQU   0
CAXFLGS  EQU   IGGCAXWA+8
CAXFLG2  EQU   IGGCAXWA+9
CAXFLG3  EQU   IGGCAXWA+10
CAXACB   EQU   IGGCAXWA+24
CAXCCR   EQU   IGGCAXWA+32
CAXCNAM  EQU   IGGCAXWA+52
CAXOPLST EQU   IGGCAXWA+96
COPTS    EQU   CAXOPLST
CAXCCA   EQU   IGGCAXWA+104
CAXECB   EQU   IGGCAXWA+120
CAXECBHB EQU   CAXECB
CAXHRPLW EQU   IGGCAXWA+128
IDACMB   EQU   0
CMBID    EQU   IDACMB
CMBLEN   EQU   IDACMB+2
CMBFLGS  EQU   IDACMB+4
CMBOUT   EQU   CMBFLGS
CMBNST   EQU   IDACMB+5
CMBCNT   EQU   IDACMB+6
CMBPTRS  EQU   IDACMB+8
CMBSTPTR EQU   CMBPTRS+8
CMBFSTPT EQU   CMBPTRS+16
CMBBFRPT EQU   CMBPTRS+24
CMBDEBPT EQU   CMBPTRS+32
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTSMCA  EQU   CVTMAP+196
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBDEBB  EQU   DEBDEBAD+1
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBNMEXT EQU   DEBUSRPG
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBDCBB  EQU   DEBDCBAD+1
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBUCBA  EQU   DEBUCBAD+1
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
HEBHDREL EQU   0
HEBFREMN EQU   HEBHDREL
HEBSP    EQU   HEBFREMN
HEBLN    EQU   HEBFREMN+1
HEBBLKPT EQU   HEBFREMN+4
HEBFLAGS EQU   HEBHDREL+8
HEBKEY5  EQU   HEBFLAGS
HEBGSRKT EQU   HEBFLAGS
HEBELCHN EQU   HEBHDREL+12
@NM00069 EQU   HEBHDREL+20
HEBGSRK  EQU   @NM00069
IDAHEB   EQU   0
IDAIOMB  EQU   0
IOMIQE   EQU   IDAIOMB+20
IOMFLAGS EQU   IDAIOMB+40
IOMFL    EQU   IOMFLAGS
IOMAPEND EQU   IOMFL
IOMSTIND EQU   IOMFLAGS+2
IOMSAVER EQU   IDAIOMB+52
IQESECT  EQU   0
IQELNK   EQU   IQESECT
IQEIRB   EQU   IQESECT+8
IQEFLAGS EQU   IQEIRB
IQEIRBA  EQU   IQEIRB+1
IQETCB   EQU   IQESECT+12
IQETCBA  EQU   IQETCB+1
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBSHR  EQU   JSCBSEC1+8
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBEND1 EQU   IEZJSCB+260
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
XRBPSW   EQU   RBOPSW
RBOPSWB2 EQU   XRBPSW+1
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
RBPREFIX EQU   0
RBRSV019 EQU   RBPREFIX+14
RBRSV028 EQU   RBPREFIX+15
RBRSV041 EQU   RBPREFIX+27
RBRSV054 EQU   RBPREFIX+39
RBRTOPSW EQU   RBPREFIX+40
RBRTPSW2 EQU   RBRTOPSW+8
RBRTICIL EQU   RBRTPSW2
RBFLAGS1 EQU   RBPREFIX+56
RBINTCDA EQU   RBPREFIX+61
RBSECT   EQU   0
RBPPSAV  EQU   RBSECT
@NM00122 EQU   RBSECT+10
@NM00123 EQU   @NM00122
RBTRSVRB EQU   @NM00123
@NM00125 EQU   @NM00122+1
RBETXR   EQU   @NM00125
RBEP     EQU   RBSECT+12
RBPGMQ   EQU   RBSECT+24
@NM00132 EQU   RBSECT+28
@NM00133 EQU   @NM00132
IRBEND   EQU   RBSECT+96
@NM00136 EQU   RBSECT+96
RBRSV138 EQU   @NM00136+7
RBSCBB   EQU   RBSECT+144
RBSPARM  EQU   RBSCBB+8
RBSFLGS1 EQU   RBSPARM
RBSIOPRC EQU   RBSFLGS1
RBSOWNR  EQU   RBSCBB+12
RBSFLGS2 EQU   RBSOWNR
RBSDATA  EQU   RBSCBB+16
RBSFLG3  EQU   RBSDATA
RBRSV150 EQU   RBSECT+167
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLPLHPT EQU   RPLCOMN+4
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
SMCABASE EQU   0
SMCAOPT  EQU   SMCABASE
SMCADSA  EQU   SMCAOPT
SMCAMISC EQU   SMCABASE+1
SMCAUSER EQU   SMCAMISC
SMCAMAN  EQU   SMCAMISC
SMCABUF  EQU   SMCABASE+12
SMCAPSTA EQU   SMCABASE+30
SMCAPLBL EQU   SMCABASE+34
SMCASTA  EQU   SMCABASE+46
SMCAALBL EQU   SMCABASE+50
SMCAENTY EQU   SMCABASE+80
SMCAENDI EQU   SMCAENTY
SMCAFOPT EQU   SMCABASE+82
SMCASWA  EQU   SMCABASE+104
SMCAASCB EQU   SMCABASE+120
SMCAPGIN EQU   SMCABASE+136
SMCAPGOT EQU   SMCABASE+140
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBRBP   EQU   TCB
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBDEB   EQU   TCB+8
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFA    EQU   TCBFLGS1
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBTCTB  EQU   TCBTCT+1
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBSTAWA EQU   TCB+252
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00151 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
IDAVAT   EQU   0
VATHDR   EQU   IDAVAT
VATNEXT  EQU   IDAVAT+4
VATVSRT  EQU   IDAVAT+8
VATVPTR  EQU   VATVSRT+4
VATVC    EQU   IDAVAT+20
VATVRT   EQU   VATVC
VATENO   EQU   VATVC+1
VATAMBL  EQU   IDAVAT+28
IDAVGTT  EQU   0
VGTTTYPE EQU   IDAVGTT+4
IDAVMT   EQU   0
VMTHDR   EQU   IDAVMT
VMTNXT   EQU   IDAVMT+4
VMTNOVOL EQU   IDAVMT+8
VMTDEV   EQU   IDAVMT+13
VMTDVTYP EQU   VMTDEV+1
VMTVOL   EQU   IDAVMT+16
VMTUSECT EQU   VMTVOL
VMTVFLG1 EQU   VMTVOL+4
VMTUCB   EQU   VMTVOL+12
IDAVSRT  EQU   0
VSRTFLGS EQU   IDAVSRT+12
VSRTCSL  EQU   IDAVSRT+44
VSRTCSLF EQU   VSRTCSL
VSRTCSBF EQU   VSRTCSLF
VSRTCSPF EQU   VSRTCSLF
FORCORE  EQU   0
DXDSCB   EQU   FORCORE
DXJBF    EQU   FORCORE+100
DXIOB    EQU   FORCORE+280
DXDAADDR EQU   FORCORE+312
DXDCB    EQU   FORCORE+320
DXCCW    EQU   FORCORE+368
DXCCW5   EQU   DXCCW+32
DXCCW8   EQU   DXCCW+56
DXCCW12  EQU   DXCCW+88
DXXCTL   EQU   FORCORE+472
DXVOLSR  EQU   FORCORE+500
DXVOLSR1 EQU   DXVOLSR
DXVOLSR2 EQU   DXVOLSR+6
DXVOLSR3 EQU   DXVOLSR+12
DXRESSW  EQU   FORCORE+524
DXUKEY   EQU   FORCORE+526
DXUCBSAV EQU   FORCORE+564
DXUDCBAD EQU   FORCORE+568
DXUACBAD EQU   DXUDCBAD+1
DXPDCBAD EQU   FORCORE+572
DXPACBAD EQU   DXPDCBAD+1
DXATCOM1 EQU   FORCORE+588
DXATGENS EQU   DXATCOM1
DXATVGIV EQU   DXATGENS
DXATOUTA EQU   DXATCOM1+2
DXATDACC EQU   DXATCOM1+3
DXATCOM2 EQU   FORCORE+592
DXATEOV  EQU   DXATCOM2
DXATOPEN EQU   DXATCOM2+1
DXATALL  EQU   DXATCOM2+2
DXATEXC1 EQU   FORCORE+604
DXATEXB1 EQU   DXATEXC1
DXATEXC2 EQU   FORCORE+608
DSECTSIZ EQU   FORCORE+612
IECPREFX EQU   0
IECEXTPR EQU   IECPREFX+32
IECWTGTB EQU   IECEXTPR+72
IECUPRML EQU   IECEXTPR+80
IECRESWA EQU   IECEXTPR+84
RWARESWA EQU   0
RWAPREFX EQU   RWARESWA
USERPRML EQU   0
IECRRPL  EQU   0
RRPLIST  EQU   IECRRPL
RRFUNCTN EQU   RRPLIST
RRFLAGS1 EQU   RRPLIST+1
RRFLAGS2 EQU   RRPLIST+2
RRFLAGS3 EQU   RRPLIST+3
RRXRETRY EQU   RRPLIST+12
DSMADTRL EQU   0
DSMADTW1 EQU   DSMADTRL
DSMADTB1 EQU   DSMADTW1
DSMADTB2 EQU   DSMADTW1+1
WTGTABLE EQU   0
WTGWTOPR EQU   WTGTABLE
WTG      EQU   0
WTGAREA  EQU   WTG
WTGMODNM EQU   WTGAREA
WTGPREFX EQU   WTGAREA+16
WTGPATHS EQU   WTG+30
WTGENTRY EQU   0
WTGIDTTR EQU   WTGENTRY
APPNMTBL EQU   0
APPENTRY EQU   APPNMTBL+4
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
JFCBX    EQU   0
IDAPDPRM EQU   0
PDPCODE  EQU   IDAPDPRM+1
PDPFUNC  EQU   IDAPDPRM+2
PDPSFC   EQU   IDAPDPRM+3
PDPACB   EQU   IDAPDPRM+4
PDPTIOT  EQU   IDAPDPRM+12
PDPCLSNM EQU   IDAPDPRM+20
PDPDSN   EQU   IDAPDPRM+24
PDPDSTYP EQU   IDAPDPRM+33
PDPMSGFL EQU   IDAPDPRM+34
PDPSFI   EQU   IDAPDPRM+36
IDAVIRT  EQU   0
VIRTFLAG EQU   IDAVIRT+1
VIRTBACB EQU   VIRTFLAG
VIRTACB  EQU   IDAVIRT+4
VIRTTIOE EQU   IDAVIRT+16
IDACLWRK EQU   0
CLWCOMWK EQU   IDACLWRK+8
CLWAMBPT EQU   IDACLWRK+12
CLWSFI   EQU   IDACLWRK+16
CLWCNOUP EQU   IDACLWRK+28
CLWNWRIT EQU   IDACLWRK+28
CLWPARCL EQU   IDACLWRK+28
CLWPRMCL EQU   IDACLWRK+29
CLWSECCL EQU   IDACLWRK+29
CLWGMAIN EQU   IDACLWRK+29
CLWTERM  EQU   IDACLWRK+29
IQEEND   EQU   0
MWAECB   EQU   0
UCBBGN   EQU   0
CVTPTR   EQU   FLCCVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTCRMN  EQU   CVTS01+156
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBFBYT EQU   JSCBSEC3+10
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCSCT   EQU   JSCBSEC3+68
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
FLC      EQU   PSA
PSARSVTE EQU   PSARSVT
RBSECS03 EQU   RBEP
RBCDE    EQU   RBSECS03
RBCDFLGS EQU   RBCDE
RBSECS05 EQU   RBPGMQ
RBSQE    EQU   RBSECS05
RBSECS06 EQU   RBPGMQ
RBIQE    EQU   RBSECS06
RBSECS07 EQU   RBPGMQ
RBIQE2   EQU   RBSECS07
RBSECS08 EQU   IRBEND
RBSECS09 EQU   IRBEND
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00150 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
IDARRPL  EQU   DXATCOM1
IDARRFLG EQU   IDARRPL+1
IDARSTAT EQU   DXATEXC1
RSTAT    EQU   IDARSTAT
RSTATCRO EQU   RSTAT+1
RSTATOP2 EQU   RSTAT+2
IDARRTN  EQU   DXATEXC2
RSTATRTN EQU   IDARRTN
DXXWTG   EQU   DSECTSIZ
DXXAREA  EQU   DSECTSIZ+4
DXXMODNM EQU   DXXAREA
DXXLNG   EQU   DXXAREA+29
DXXENTRY EQU   DXXAREA+32
DXXIDTTR EQU   DXXENTRY
DXREGSAV EQU   DXCCW8
DXREG1   EQU   DXREGSAV+28
DXIDENT  EQU   DXCCW12
DXRETMOD EQU   DXIDENT+2
@NM00196 EQU   DXXCTL
DXSAVMOD EQU   @NM00196+2
@NM00197 EQU   DXRESSW
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
JFCBSPNM EQU   JFCBS001+45
JFCBFLG3 EQU   JFCBSPNM
PDWLIST  EQU   FORCORE
PDWWORK  EQU   DXDCB
BUFCRSC1 EQU   BUFCAVL
DXBTAMX  EQU   DXREG1
DXDSNAME EQU   DXCCW5
IDAESPL  EQU   DXATCOM1
IDARTSA  EQU   DXJBF
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PDWORKSP EQU   PDWWORK+88
PDWERRCD EQU   PDWWORK+84
PDWMSGPT EQU   PDWWORK+80
PDWSAVED EQU   PDWWORK+76
PDWSAVEC EQU   PDWWORK+72
PDWSAVEB EQU   PDWWORK+68
PDWSAVEA EQU   PDWWORK+64
PDWSAVE  EQU   PDWWORK
WTPROUT  EQU   PDWLIST+75
WTPMSG   EQU   PDWLIST+4
WTPFLGS  EQU   PDWLIST+2
WTPLNGTH EQU   PDWLIST
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBRV08 EQU   JFCBSPNM+1
JFCBRV07 EQU   JFCBFLG3
JFCBRV06 EQU   JFCBFLG3
JFCBRV05 EQU   JFCBFLG3
JFCBRV04 EQU   JFCBFLG3
JFCBRV03 EQU   JFCBFLG3
JFCBRV02 EQU   JFCBFLG3
JFCBEXP  EQU   JFCBFLG3
JFCDQDSP EQU   JFCBFLG3
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCBADSP EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBMSGP EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXAD EQU   JFCBS001+31
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00201 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNVOL EQU   JFCUCSEG+9
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00200 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCORGIS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00199 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
DXRESIND EQU   @NM00197
DXSAVOFF EQU   @NM00196+7
DXSAVADR EQU   DXSAVMOD+2
DXSAVID  EQU   DXSAVMOD
DXABCODE EQU   @NM00196
DXRETCOD EQU   DXIDENT+7
DXRETTTR EQU   DXRETMOD+2
DXRETID  EQU   DXRETMOD
DXCALLID EQU   DXIDENT
DXREG0   EQU   DXREGSAV+24
DXREGE   EQU   DXREGSAV+20
DXREGD   EQU   DXREGSAV+16
DXREGC   EQU   DXREGSAV+12
DXREGB   EQU   DXREGSAV+8
DXREGA   EQU   DXREGSAV+4
DXREG9   EQU   DXREGSAV
DXXEND   EQU   DXXAREA+48
DXXLAST  EQU   DXXAREA+40
DXXCORE  EQU   DXXENTRY+5
DXETTR   EQU   DXXIDTTR+2
DXEID    EQU   DXXIDTTR
DXXPATHS EQU   DXXAREA+30
DXOPCLSW EQU   DXXLNG
DXXTXTLN EQU   DXXAREA+27
DXXMODSZ EQU   DXXAREA+24
DXXATTRB EQU   DXXAREA+22
@NM00181 EQU   DXXAREA+20
DXXPREFX EQU   DXXAREA+16
@NM00180 EQU   DXXAREA+12
DXXMODEP EQU   DXXAREA+8
DXXMODID EQU   DXXMODNM+6
@NM00179 EQU   DXXMODNM
DXXWTOPR EQU   DXXWTG
@NM00162 EQU   RSTAT+3
@NM00161 EQU   RSTATOP2
RSTATCSA EQU   RSTATOP2
IDARCURS EQU   RSTATCRO
IDARCRCU EQU   RSTATCRO
IDARRSTR EQU   RSTATCRO
IDARCKPT EQU   RSTATCRO
RSTATOPT EQU   RSTAT
@NM00160 EQU   IDARRPL+2
@NM00159 EQU   IDARRFLG
RRPLVSAM EQU   IDARRFLG
@NM00158 EQU   IDARRFLG
@NM00157 EQU   IDARRPL
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00150
UCBSKPFG EQU   @NM00150
UCBRIPND EQU   @NM00150
UCBRTIAC EQU   @NM00150
UCBRSV79 EQU   @NM00150
UCBRSV78 EQU   @NM00150
UCBRSV77 EQU   @NM00150
UCBOLTEP EQU   @NM00150
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBDQDSP EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00149 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
RBRSV161 EQU   RBSECS09+64
RBSIRBWA EQU   RBSECS09
RBIQEWRK EQU   RBSECS08+4
RBNEXAV  EQU   RBSECS08
RBIQEA   EQU   RBIQE2
RBIQE1   EQU   RBIQE+1
RBUSE    EQU   RBIQE
RBSQEA   EQU   RBSQE+1
@NM00137 EQU   RBSQE
RBCDE1   EQU   RBCDE+1
RBCDLOAD EQU   RBCDFLGS
RBCDXCTL EQU   RBCDFLGS
RBCDSYNC EQU   RBCDFLGS
RBCDNODE EQU   RBCDFLGS
RBCDSAVE EQU   RBCDFLGS
RBCDATCH EQU   RBCDFLGS
RBRSV009 EQU   RBCDFLGS
RBNOCELL EQU   RBCDFLGS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCBASWA EQU   JSCBSEC3+96
JSCBUFPT EQU   JSCBSEC3+92
JSCBACT  EQU   JSCBSEC3+88
JSCBSWSP EQU   JSCBSEC3+87
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCDSABQ EQU   JSCBSEC3+60
JSCBSSIB EQU   JSCBSEC3+56
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00086 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00085 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCBRV08 EQU   JSCBSEC3+11
JSCBRV07 EQU   JSCBFBYT
JSCBRV06 EQU   JSCBFBYT
JSCBRV05 EQU   JSCBFBYT
JSCBRV04 EQU   JSCBFBYT
JSCBRV03 EQU   JSCBFBYT
JSCBRV02 EQU   JSCBFBYT
JSCBADSP EQU   JSCBFBYT
JSCBRV01 EQU   JSCBFBYT
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
CLWOUTPT EQU   IDACLWRK+28
CLWDUMMY EQU   IDACLWRK+28
CLWSPHCL EQU   IDACLWRK+28
CLWPATH  EQU   IDACLWRK+28
CLWBNOFL EQU   IDACLWRK+28
CLWID    EQU   IDACLWRK
@NM00208 EQU   IDAVIRT+22
VIRTLENG EQU   IDAVIRT+20
VIRTEXT  EQU   IDAVIRT+12
VIRTUCB  EQU   IDAVIRT+8
@NM00207 EQU   IDAVIRT+2
VIRTMNT  EQU   VIRTFLAG
VIRTBEXT EQU   VIRTFLAG
VIRTBUCB EQU   VIRTFLAG
VIRTNOUN EQU   VIRTFLAG
VIRTINHB EQU   VIRTFLAG
VIRTACQ  EQU   VIRTFLAG
@NM00206 EQU   IDAVIRT
@NM00205 EQU   IDAPDPRM+35
PDPNOMSG EQU   PDPMSGFL
PDPNOTRC EQU   PDPMSGFL
PDPSPACE EQU   PDPMSGFL
PDPNOTFC EQU   PDPMSGFL
PDPKEY   EQU   IDAPDPRM+32
PDPCTACB EQU   IDAPDPRM+28
PDPVLSER EQU   IDAPDPRM+16
PDPUCB   EQU   IDAPDPRM+8
PDPCALL  EQU   IDAPDPRM
JFCBXNXT EQU   JFCBX+172
@NM00204 EQU   JFCBX+144
JFCBXDEV EQU   JFCBX+140
JFCBXNAM EQU   JFCBX+96
@NM00203 EQU   JFCBX+94
JFCBXVOL EQU   JFCBX+4
@NM00202 EQU   JFCBX+3
JFCBXTTR EQU   JFCBX
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00198 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCAMSTR EQU   JFCBFRID+2
JFCAMCRO EQU   JFCBFRID
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
APPNAMID EQU   APPNMTBL+24
APPOFFST EQU   APPENTRY+2
APPCOUNT EQU   APPENTRY
APPSIZE  EQU   APPNMTBL+2
APPBAL   EQU   APPNMTBL
WTGCORE  EQU   WTGENTRY+5
WTGETTR  EQU   WTGIDTTR+2
WTGEID   EQU   WTGIDTTR
WTGOPD   EQU   WTGPATHS+1
WTGRECHK EQU   WTGPATHS+1
WTGTSENQ EQU   WTGPATHS+1
@NM00195 EQU   WTGPATHS+1
WTGTRACE EQU   WTGPATHS+1
@NM00194 EQU   WTGPATHS
WTGJFCBW EQU   WTGPATHS
WTGSMF   EQU   WTGPATHS
WTGTCOS  EQU   WTGPATHS
WTGNSL   EQU   WTGPATHS
WTGPRLSE EQU   WTGPATHS
WTGLNG   EQU   WTG+29
WTGTXTLN EQU   WTGAREA+27
WTGMODSZ EQU   WTGAREA+24
WTGATTRB EQU   WTGAREA+22
@NM00193 EQU   WTGAREA+20
@NM00192 EQU   WTGAREA+12
WTGMODEP EQU   WTGAREA+8
WTGMODID EQU   WTGMODNM+6
@NM00191 EQU   WTGMODNM
DSMADTW6 EQU   DSMADTRL+20
DSMADTW5 EQU   DSMADTRL+16
DSMADTW4 EQU   DSMADTRL+12
DSMADTW3 EQU   DSMADTRL+8
DSMADTW2 EQU   DSMADTRL+4
DSMADTB4 EQU   DSMADTW1+3
DSMADTB3 EQU   DSMADTW1+2
@NM00190 EQU   DSMADTB2
DSMDSNE  EQU   DSMADTB2
DSMTIOTE EQU   DSMADTB2
DSMSMCE  EQU   DSMADTB2
DSMVTOCR EQU   DSMADTB2
DSMASWAP EQU   DSMADTB1
DSMUCBAL EQU   DSMADTB1
DSMRPSAP EQU   DSMADTB1
DSMLOCK  EQU   DSMADTB1
@NM00189 EQU   DSMADTB1
DSMVIO   EQU   DSMADTB1
DSMISAM  EQU   DSMADTB1
RRFWORK  EQU   RRPLIST+20
RRMLRTRY EQU   RRPLIST+16
RRUCBPTR EQU   RRXRETRY
RR1RETRY EQU   RRPLIST+8
RR1WRKAR EQU   RRPLIST+4
@NM00188 EQU   RRFLAGS3
RRFTERM  EQU   RRFLAGS3
RRFFCEXC EQU   RRFLAGS3
RRFFINFC EQU   RRFLAGS3
RRFNRTCA EQU   RRFLAGS3
@NM00187 EQU   RRFLAGS3
RRFENQUL EQU   RRFLAGS2
RRFPRDET EQU   RRFLAGS2
@NM00186 EQU   RRFLAGS2
RRFQMNGR EQU   RRFLAGS2
RRFENQPW EQU   RRFLAGS2
@NM00185 EQU   RRFLAGS2
RRFFIN1  EQU   RRFLAGS2
RRFTRACE EQU   RRFLAGS1
RRFSMF   EQU   RRFLAGS1
RRFNSL   EQU   RRFLAGS1
RRFAMSTR EQU   RRFLAGS1
RRFAMEXR EQU   RRFLAGS1
RRFAMEXG EQU   RRFLAGS1
RRFUSREX EQU   RRFLAGS1
@NM00184 EQU   RRFLAGS1
RRFRJFCB EQU   RRFUNCTN
RRFDADSM EQU   RRFUNCTN
DXDCBLST EQU   USERPRML
RWALIST  EQU   RWARESWA+12
RWAPARM  EQU   RWAPREFX+8
RWATRBUF EQU   RWAPREFX+4
RWATRACE EQU   RWAPREFX
IECQMNGR EQU   IECEXTPR+92
IECMSGQA EQU   IECEXTPR+88
IECDCBNO EQU   IECUPRML
IECRRPRM EQU   IECEXTPR+76
IECREGSV EQU   IECEXTPR
IECCORP2 EQU   IECPREFX+28
IECCORP1 EQU   IECPREFX+24
IECCORPS EQU   IECPREFX+20
IECCORSP EQU   IECPREFX+19
@NM00183 EQU   IECPREFX+17
IECCORKY EQU   IECPREFX+16
IECCORAD EQU   IECPREFX+12
IECCORLN EQU   IECPREFX+8
@NM00182 EQU   IECPREFX+4
IECCORID EQU   IECPREFX
DXATEXB2 EQU   DXATEXC2
DXEXHASP EQU   DXATEXB1
DXATCOM4 EQU   FORCORE+600
DXATCOM3 EQU   FORCORE+596
@NM00178 EQU   DXATCOM2+3
@NM00177 EQU   DXATALL
DXATSWAP EQU   DXATALL
DXATFC   EQU   DXATALL
@NM00176 EQU   DXATOPEN
DXATDFIN EQU   DXATOPEN
DXATDSIN EQU   DXATOPEN
DXATMODM EQU   DXATOPEN
DXATMODE EQU   DXATOPEN
DXATMODS EQU   DXATOPEN
DXATIGN  EQU   DXATOPEN
DXATVCAT EQU   DXATEOV
DXATDADM EQU   DXATEOV
DXATREMT EQU   DXATEOV
DXATDNEW EQU   DXATEOV
DXATDFRE EQU   DXATEOV
DXATDCHN EQU   DXATEOV
DXATNVOL EQU   DXATEOV
DXATCCAT EQU   DXATEOV
DXATRDDB EQU   DXATDACC
DXATEOF  EQU   DXATDACC
@NM00175 EQU   DXATDACC
DXATSMF  EQU   DXATDACC
DXATUPDB EQU   DXATDACC
DXATDRCT EQU   DXATDACC
DXATTRAK EQU   DXATDACC
DXATF1CE EQU   DXATDACC
DXATNSL  EQU   DXATOUTA
DXATTTM2 EQU   DXATOUTA
DXATTTM1 EQU   DXATOUTA
DXATTRL2 EQU   DXATOUTA
DXATTRL1 EQU   DXATOUTA
DXATDATM EQU   DXATOUTA
DXATHDTM EQU   DXATOUTA
DXATVLHD EQU   DXATOUTA
DXATCLOS EQU   DXATCOM1+1
DXATSRET EQU   DXATGENS
DXATVCIG EQU   DXATVGIV
DXATVTMG EQU   DXATVGIV
DXATVSMG EQU   DXATVGIV
DXATJFCB EQU   DXATGENS
DXATDISP EQU   DXATGENS
DXATREFR EQU   DXATGENS
DXATDMCT EQU   DXATGENS
DXMSGADR EQU   FORCORE+584
DXPRPARC EQU   FORCORE+580
DXUDCBML EQU   FORCORE+578
DXUDCBPL EQU   FORCORE+576
@NM00174 EQU   DXPDCBAD
@NM00173 EQU   DXUDCBAD
DXUCBSVV EQU   DXUCBSAV+1
@NM00172 EQU   DXUCBSAV
DXUCBADR EQU   FORCORE+560
DXTIOTAD EQU   FORCORE+556
DXDEBXAD EQU   FORCORE+552
DXDSAB   EQU   FORCORE+548
DXDSABAD EQU   FORCORE+544
DXDSABQD EQU   FORCORE+540
DXJSCBAD EQU   FORCORE+536
DXTCBADR EQU   FORCORE+532
DXASCBAD EQU   FORCORE+528
DXEXTSW  EQU   FORCORE+527
DXWKEYSV EQU   FORCORE+525
DXUNITOF EQU   FORCORE+522
DXNOUNIT EQU   FORCORE+520
DXVOLSEQ EQU   FORCORE+518
DXVOLMT3 EQU   DXVOLSR3
DXVOLMT2 EQU   DXVOLSR2
DXVOLMT1 EQU   DXVOLSR1
DXWORK4  EQU   FORCORE+496
DXWORK3  EQU   FORCORE+492
DXWORK2  EQU   FORCORE+488
DXWORK1  EQU   FORCORE+484
DXWORK   EQU   FORCORE+480
@NM00171 EQU   FORCORE+464
DXCCW11  EQU   DXCCW+80
DXCCW10  EQU   DXCCW+72
DXCCW9   EQU   DXCCW+64
DXCCW7   EQU   DXCCW+48
DXCCW6   EQU   DXCCW+40
DXCCW4   EQU   DXCCW+24
DXCCW3   EQU   DXCCW+16
DXCCW2   EQU   DXCCW+8
DXCCW1   EQU   DXCCW
DXDCBDEB EQU   DXDCB+44
@NM00170 EQU   DXDCB+24
DXDEBDCB EQU   DXDCB+20
@NM00169 EQU   DXDCB
DXDEB    EQU   DXDAADDR+4
@NM00168 EQU   DXDAADDR
DXECB    EQU   FORCORE+276
DSCCORE  EQU   FORCORE+96
DXLBL    EQU   DXDSCB
VSRTCSLN EQU   VSRTCSL+5
VSRTCSSP EQU   VSRTCSL+4
VSRTCSAD EQU   VSRTCSL+1
VSRTCSBH EQU   VSRTCSLF
VSRTCSIO EQU   VSRTCSLF
VSRTCSPL EQU   VSRTCSLF
VSRTCSWS EQU   VSRTCSLF
VSRTCSVG EQU   VSRTCSPF
VSRTCSGT EQU   VSRTCSBF
VSRTCSVS EQU   VSRTCSLF
VSRTCSFX EQU   VSRTCSLF
VSRTNEXT EQU   IDAVSRT+40
VSRTASCB EQU   IDAVSRT+36
VSRTVIOT EQU   IDAVSRT+32
VSRTWAH  EQU   IDAVSRT+28
VSRTCPAH EQU   IDAVSRT+24
VSRTBUFH EQU   IDAVSRT+20
VSRTPLHH EQU   IDAVSRT+16
VSRTSTRN EQU   IDAVSRT+15
VSRTKL   EQU   IDAVSRT+14
@NM00167 EQU   VSRTFLGS
VSRTBFRF EQU   VSRTFLGS
VSRTIOBF EQU   VSRTFLGS
VSRTLSRF EQU   VSRTFLGS
VSRTGSRF EQU   VSRTFLGS
VSRTEOV  EQU   IDAVSRT+8
VSRTID   EQU   IDAVSRT+4
VSRTLEN  EQU   IDAVSRT+2
VSRTKEY  EQU   IDAVSRT+1
VSRTBKID EQU   IDAVSRT
VMTVLSER EQU   VMTVOL+6
@NM00166 EQU   VMTVOL+5
@NM00165 EQU   VMTVFLG1
VMTOPEN  EQU   VMTVFLG1
VMTDVOPT EQU   VMTDEV
@NM00164 EQU   IDAVMT+10
VMTLEN   EQU   VMTHDR+2
@NM00163 EQU   VMTHDR+1
VMTID    EQU   VMTHDR
VGTTCORE EQU   IDAVGTT+32
@NM00156 EQU   IDAVGTT+28
VGTTPSB  EQU   IDAVGTT+24
VGTTVUSE EQU   IDAVGTT+20
VGTTBIB  EQU   IDAVGTT+16
VGTTNEXT EQU   IDAVGTT+12
VGTTSIZE EQU   IDAVGTT+8
VGTTSP   EQU   IDAVGTT+7
VGTTGSRK EQU   IDAVGTT+6
@NM00155 EQU   IDAVGTT+5
@NM00154 EQU   VGTTTYPE
VGTTCBIC EQU   VGTTTYPE
VGTTOPEN EQU   VGTTTYPE
VGTTCTLG EQU   VGTTTYPE
VGTTLSR  EQU   VGTTTYPE
VGTTGSR  EQU   VGTTTYPE
VGTTSDS  EQU   VGTTTYPE
VGTTID   EQU   IDAVGTT
VATNAE   EQU   IDAVAT+24
@NM00153 EQU   IDAVAT+22
VATPAMBL EQU   IDAVAT+16
VATVUSE  EQU   VATVSRT
VATLEN   EQU   VATHDR+2
@NM00152 EQU   VATHDR+1
VATID    EQU   VATHDR
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBFCBPE EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00151
UCBHALI  EQU   @NM00151
UCBRSV09 EQU   @NM00151
UCBRSV08 EQU   @NM00151
UCBRSV07 EQU   @NM00151
UCBRSV06 EQU   @NM00151
UCBRSV05 EQU   @NM00151
UCBRSV04 EQU   @NM00151
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00148 EQU   UCB
@NM00147 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00146 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAFX EQU   TCBSTAWA
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00145 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00144 EQU   TCBPMASK
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
SMCASTCB EQU   SMCABASE+176
SMCAWTCB EQU   SMCABASE+172
SMCAU83  EQU   SMCABASE+168
SMCAPGM  EQU   SMCABASE+164
SMCARGNM EQU   SMCABASE+160
SMCASPOT EQU   SMCABASE+156
SMCASPIN EQU   SMCABASE+152
SMCARGNS EQU   SMCABASE+148
SMCAPGRL EQU   SMCABASE+144
SMCADOMY EQU   SMCAPGOT
SMCADOMX EQU   SMCAPGIN
SMCATEXP EQU   SMCABASE+132
SMCASAVE EQU   SMCABASE+128
SMCARS21 EQU   SMCABASE+124
SMCATJID EQU   SMCAASCB+2
SMCAPOST EQU   SMCAASCB
SMCADSCT EQU   SMCABASE+116
SMCADSTM EQU   SMCABASE+108
SMCASWD  EQU   SMCABASE+107
SMCASWC  EQU   SMCABASE+106
SMCASWB  EQU   SMCABASE+105
SMCADSSW EQU   SMCASWA
SMCADSSP EQU   SMCASWA
SMCAZEOD EQU   SMCASWA
SMCANAVL EQU   SMCASWA
SMCANADA EQU   SMCASWA
SMCAOPFL EQU   SMCASWA
SMCADSTR EQU   SMCASWA
SMCASWAR EQU   SMCASWA
SMCAXNAM EQU   SMCABASE+96
@NM00143 EQU   SMCABASE+92
SMCAXCTL EQU   SMCABASE+88
SMCAWRTP EQU   SMCABASE+84
SMCAENAL EQU   SMCABASE+83
SMCAFGN  EQU   SMCAFOPT
SMCAFTDS EQU   SMCAFOPT
SMCAFR01 EQU   SMCAFOPT
SMCAFVOL EQU   SMCAFOPT
SMCAFDSA EQU   SMCAFOPT
SMCAFEXT EQU   SMCAFOPT
SMCAFOP2 EQU   SMCAFOPT
SMCAFOP1 EQU   SMCAFOPT
SMCAENOP EQU   SMCAENTY+1
SMCADSNF EQU   SMCAENDI
SMCARS20 EQU   SMCAENDI
SMCARS19 EQU   SMCAENDI
SMCARS18 EQU   SMCAENDI
SMCARS17 EQU   SMCAENDI
SMCARS16 EQU   SMCAENDI
SMCARS15 EQU   SMCAENDI
SMCARS14 EQU   SMCAENDI
SMCAWAIT EQU   SMCABASE+72
SMCASGFT EQU   SMCABASE+68
SMCASGWR EQU   SMCABASE+64
SMCABECB EQU   SMCABASE+60
SMCAWECB EQU   SMCABASE+56
SMCAADCB EQU   SMCABASE+52
SMCAYORX EQU   SMCABASE+51
SMCAANL  EQU   SMCAALBL
SMCAASL  EQU   SMCAALBL
SMCAANSL EQU   SMCAALBL
SMCARS13 EQU   SMCAALBL
SMCARS12 EQU   SMCAALBL
SMCARS11 EQU   SMCAALBL
SMCARS10 EQU   SMCAALBL
SMCARS09 EQU   SMCAALBL
SMCAADAR EQU   SMCABASE+47
SMCAAVOL EQU   SMCASTA
SMCAAUNT EQU   SMCASTA
SMCARS08 EQU   SMCASTA
SMCAAMOD EQU   SMCASTA
SMCAAMTY EQU   SMCASTA
SMCAADA  EQU   SMCASTA
SMCAATAP EQU   SMCASTA
SMCAANAV EQU   SMCASTA
SMCAADEV EQU   SMCABASE+40
SMCAPDCB EQU   SMCABASE+36
SMCAXORY EQU   SMCABASE+35
SMCAPNL  EQU   SMCAPLBL
SMCAPSL  EQU   SMCAPLBL
SMCAPNSL EQU   SMCAPLBL
SMCARS07 EQU   SMCAPLBL
SMCARS06 EQU   SMCAPLBL
SMCARS05 EQU   SMCAPLBL
SMCARS04 EQU   SMCAPLBL
SMCARS03 EQU   SMCAPLBL
SMCAPDAR EQU   SMCABASE+31
SMCAPVOL EQU   SMCAPSTA
SMCAPUNT EQU   SMCAPSTA
SMCARS02 EQU   SMCAPSTA
SMCAMOD  EQU   SMCAPSTA
SMCAPMTY EQU   SMCAPSTA
SMCAPDA  EQU   SMCAPSTA
SMCAPTAP EQU   SMCAPSTA
SMCAPNAV EQU   SMCAPSTA
SMCAPDEV EQU   SMCABASE+24
SMCABUFP EQU   SMCABASE+20
SMCASID  EQU   SMCABASE+16
SMCABSIZ EQU   SMCABUF
SMCAJWT  EQU   SMCABASE+8
SMCATIOT EQU   SMCABASE+4
SMCATOFF EQU   SMCABASE+2
SMCADUMP EQU   SMCAMISC
SMCABSW  EQU   SMCAMISC
SMCADBSY EQU   SMCAMISC
SMCAPSDP EQU   SMCAMISC
SMCAFIRT EQU   SMCAMISC
SMCAOPI  EQU   SMCAMISC
SMCAFGND EQU   SMCAOPT
SMCATDS  EQU   SMCAOPT
SMCARS01 EQU   SMCAOPT
SMCAVOL  EQU   SMCAOPT
SMCAEXT  EQU   SMCAOPT
SMCAOPT2 EQU   SMCAOPT
SMCAOPT1 EQU   SMCAOPT
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00142 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00141 EQU   RPLRBAR+3
@NM00140 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00139 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
@NM00138 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
SVRBEND  EQU   RBSECT+192
RBFEPARM EQU   RBSECT+168
SIRBEND  EQU   RBSECT+168
RBRSV158 EQU   RBRSV150
RBRSV157 EQU   RBRSV150
RBRSV156 EQU   RBRSV150
RBRSV155 EQU   RBRSV150
RBRSV154 EQU   RBRSV150
RBRSV153 EQU   RBRSV150
RBRSV152 EQU   RBRSV150
RBRSV151 EQU   RBRSV150
RBRSV149 EQU   RBSECT+166
RBRSV148 EQU   RBSECT+164
RBRSV169 EQU   RBSDATA+3
RBSID    EQU   RBSDATA+2
RBSPKEY  EQU   RBSDATA+1
RBRSV168 EQU   RBSFLG3
RBSTERMO EQU   RBSFLG3
RBSBRNTR EQU   RBSFLG3
RBSPRNTR EQU   RBSFLG3
RBSCNCEL EQU   RBSFLG3
RBSRECRD EQU   RBSFLG3
RBSTERMI EQU   RBSFLG3
RBRSV167 EQU   RBSFLG3
RBSOWNRA EQU   RBSOWNR+1
RBSSUPER EQU   RBSFLGS2
RBSKEY0  EQU   RBSFLGS2
RBRSV166 EQU   RBSFLGS2
RBRSV165 EQU   RBSFLGS2
RBSINUSE EQU   RBSFLGS2
RBRSV164 EQU   RBSFLGS2
RBSXCTL2 EQU   RBSFLGS2
RBRSV163 EQU   RBSFLGS2
RBSPARMA EQU   RBSPARM+1
RBSHALT  EQU   RBSIOPRC
RBSNOIOP EQU   RBSIOPRC
RBSASYNC EQU   RBSFLGS1
RBRSV162 EQU   RBSFLGS1
RBSESTAE EQU   RBSFLGS1
RBSDUMMY EQU   RBSFLGS1
RBSSTAR  EQU   RBSFLGS1
RBSSTAI  EQU   RBSFLGS1
RBSEXIT  EQU   RBSCBB+4
RBSCHAIN EQU   RBSCBB
TIRBEND  EQU   @NM00136+8
PRBEND   EQU   @NM00136+8
RBRSV146 EQU   RBRSV138
RBRSV145 EQU   RBRSV138
RBRSV144 EQU   RBRSV138
RBRSV143 EQU   RBRSV138
RBRSV142 EQU   RBRSV138
RBRSV141 EQU   RBRSV138
RBRSV140 EQU   RBRSV138
RBRSV139 EQU   RBRSV138
RBRSV137 EQU   @NM00136+6
RBRSV136 EQU   @NM00136+4
RBRSV135 EQU   @NM00136
@NM00135 EQU   RBSECT+32
@NM00134 EQU   @NM00132+1
RBSCF    EQU   @NM00133
RBPGMQ1  EQU   RBPGMQ+1
@NM00131 EQU   RBPGMQ
@NM00130 EQU   RBSECT+16
@NM00129 EQU   @NM00125
@NM00128 EQU   @NM00125
RBIQETP  EQU   @NM00125
RBUSIQE  EQU   RBETXR
RBATTN   EQU   @NM00125
@NM00127 EQU   @NM00125
@NM00126 EQU   @NM00125
RBPMSVRB EQU   @NM00123
RBATNXIT EQU   @NM00123
@NM00124 EQU   @NM00123
RBWAITP  EQU   @NM00123
RBFNSVRB EQU   RBTRSVRB
RBFTP    EQU   @NM00123
RBSIZE   EQU   RBSECT+8
RBABOPSW EQU   RBSECT+4
RBPPSAV1 EQU   RBPPSAV+1
@NM00121 EQU   RBPPSAV
RBPRFXND EQU   RBPREFIX+64
RBINTCOD EQU   RBINTCDA+1
RBINLNTH EQU   RBINTCDA
RBWCSA   EQU   RBPREFIX+60
RBRSV004 EQU   RBPREFIX+57
RBSSSYN  EQU   RBFLAGS1
RBSCB    EQU   RBFLAGS1
RBLONGWT EQU   RBFLAGS1
RBASIR   EQU   RBFLAGS1
RBRSV159 EQU   RBFLAGS1
RBABEND  EQU   RBFLAGS1
RBXWAIT  EQU   RBFLAGS1
RBSLOCK  EQU   RBFLAGS1
RBRTRAN  EQU   RBRTPSW2+4
RBRTINCD EQU   RBRTICIL+2
RBRTILC  EQU   RBRTICIL+1
RBRSV160 EQU   RBRTICIL
RBRTPSW1 EQU   RBRTOPSW
RBRSV062 EQU   RBRSV054
RBRSV061 EQU   RBRSV054
RBRSV060 EQU   RBRSV054
RBRSV059 EQU   RBRSV054
RBRSV058 EQU   RBRSV054
RBRSV057 EQU   RBRSV054
RBRSV056 EQU   RBRSV054
RBRSV055 EQU   RBRSV054
RBRSV053 EQU   RBPREFIX+38
RBRSV052 EQU   RBPREFIX+36
RBRSV051 EQU   RBPREFIX+32
RBPRFXST EQU   RBPREFIX+32
RBRSV050 EQU   RBPREFIX+28
RBRSV049 EQU   RBRSV041
RBRSV048 EQU   RBRSV041
RBRSV047 EQU   RBRSV041
RBRSV046 EQU   RBRSV041
RBRSV045 EQU   RBRSV041
RBRSV044 EQU   RBRSV041
RBRSV043 EQU   RBRSV041
RBRSV042 EQU   RBRSV041
RBRSV040 EQU   RBPREFIX+26
RBRSV039 EQU   RBPREFIX+24
RBRSV038 EQU   RBPREFIX+20
RBRSV037 EQU   RBPREFIX+16
RBRSV036 EQU   RBRSV028
RBRSV035 EQU   RBRSV028
RBRSV034 EQU   RBRSV028
RBRSV033 EQU   RBRSV028
RBRSV032 EQU   RBRSV028
RBRSV031 EQU   RBRSV028
RBRSV030 EQU   RBRSV028
RBRSV029 EQU   RBRSV028
RBRSV027 EQU   RBRSV019
RBRSV026 EQU   RBRSV019
RBRSV025 EQU   RBRSV019
RBRSV024 EQU   RBRSV019
RBRSV023 EQU   RBRSV019
RBRSV022 EQU   RBRSV019
RBRSV021 EQU   RBRSV019
RBRSV020 EQU   RBRSV019
RBRSV018 EQU   RBPREFIX+13
RBRSV017 EQU   RBPREFIX+12
RBSRV016 EQU   RBPREFIX+11
RBRSV015 EQU   RBPREFIX+10
RBRSV014 EQU   RBPREFIX+8
RBRSV013 EQU   RBPREFIX+4
RBRSV012 EQU   RBPREFIX
RBEXSAVE EQU   XRBESA
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00120 EQU   RBBASIC+24
RBOPSWPS EQU   RBOPSWB2
@NM00119 EQU   RBOPSWB2
@NM00118 EQU   XRBPSW
@NM00117 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00116 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00115 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00114 EQU   XSTAB1
@NM00113 EQU   RBBASIC+8
@NM00112 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00111 EQU   RBPRFX
JSCBCSCB EQU   JSCBSEC1+68
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00084 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00083 EQU   IEZJSCB
IQEOUTLM EQU   IQESECT+20
IQEDCB   EQU   IQESECT+16
IQESTAT2 EQU   IQETCB
@NM00082 EQU   IQEFLAGS
@NM00081 EQU   IQEFLAGS
@NM00080 EQU   IQEFLAGS
@NM00079 EQU   IQEFLAGS
@NM00078 EQU   IQEFLAGS
@NM00077 EQU   IQEFLAGS
@NM00076 EQU   IQEFLAGS
IQEPURGE EQU   IQEFLAGS
IQEPARAM EQU   IQESECT+4
IQELNKA  EQU   IQELNK+1
IQESTAT1 EQU   IQELNK
IOMSTCB  EQU   IDAIOMB+128
IOMSRBP  EQU   IDAIOMB+124
IOMUFLD  EQU   IDAIOMB+120
IOMNXT1  EQU   IDAIOMB+116
IOMSAVEF EQU   IOMSAVER+60
IOMSAVEE EQU   IOMSAVER+56
IOMSAVED EQU   IOMSAVER+52
IOMSAVEC EQU   IOMSAVER+48
IOMSAVEB EQU   IOMSAVER+44
IOMSAVEA EQU   IOMSAVER+40
IOMSAVE9 EQU   IOMSAVER+36
IOMSAVE8 EQU   IOMSAVER+32
IOMSAVE7 EQU   IOMSAVER+28
IOMSAVE6 EQU   IOMSAVER+24
IOMSAVE5 EQU   IOMSAVER+20
IOMSAVE4 EQU   IOMSAVER+16
IOMSAVE3 EQU   IOMSAVER+12
IOMSAVE2 EQU   IOMSAVER+8
IOMSAVE1 EQU   IOMSAVER+4
IOMSAVE0 EQU   IOMSAVER
IOMNSEG  EQU   IDAIOMB+50
IOMNBUF  EQU   IDAIOMB+48
IOMNMOD  EQU   IDAIOMB+46
IOMLOCK  EQU   IDAIOMB+45
IOMPFERR EQU   IDAIOMB+44
IOMCKEY  EQU   IDAIOMB+43
IOMSR    EQU   IOMSTIND
IOMSRBM  EQU   IOMSTIND
IOMSLOC  EQU   IOMSTIND
IOMLLOCK EQU   IOMSTIND
IOMEOVXC EQU   IOMSTIND
IOMEOVTS EQU   IOMSTIND
IOMEOVW  EQU   IOMSTIND
IOMAMUSE EQU   IOMSTIND
@NM00075 EQU   IOMFL+1
IOMIRBSW EQU   IOMFL+1
IOMEEXIT EQU   IOMFL+1
@NM00074 EQU   IOMFL+1
IOMCPRB  EQU   IOMFL+1
IOMDDR   EQU   IOMFL+1
IOMCSW   EQU   IOMFL
IOMPGFIX EQU   IOMFL
IOMADERR EQU   IOMFL
IOMCBERR EQU   IOMFL
@NM00073 EQU   IOMFL
IOMPURGE EQU   IOMFL
IOMAE    EQU   IOMAPEND
IOMNE    EQU   IOMAPEND
IOMIOSB  EQU   IDAIOMB+36
IOMPGAD  EQU   IDAIOMB+32
IOMVSL   EQU   IDAIOMB+28
IOMECBPT EQU   IDAIOMB+24
IOMAMB   EQU   IDAIOMB+16
IOMPLH   EQU   IDAIOMB+12
IOMCPA   EQU   IDAIOMB+8
IOMBUFC  EQU   IDAIOMB+4
IOMBID   EQU   IDAIOMB
HEBHDELS EQU   IDAHEB+12
HEBCNT   EQU   IDAHEB+10
@NM00072 EQU   IDAHEB+8
HEBNHEB  EQU   IDAHEB+4
HEBLEN   EQU   IDAHEB+2
@NM00071 EQU   IDAHEB+1
HEBID    EQU   IDAHEB
@NM00070 EQU   @NM00069+1
HEBNBYTE EQU   HEBHDREL+16
HEBAVSP  EQU   HEBHDREL+9
HEBRTFLG EQU   HEBFLAGS
HEBIOSUP EQU   HEBFLAGS
HEBJSTCB EQU   HEBFLAGS
DEBXSAMB EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBESMVR EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00068 EQU   DEBACS08+12
@NM00067 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00066 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00065 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBDVMOD EQU   DEBUCBAD
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00064 EQU   CVTFIX+248
@NM00063 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00062 EQU   CMBPTRS+52
CMBFXDPT EQU   CMBPTRS+48
CMBPUSPT EQU   CMBPTRS+44
CMBPSTPT EQU   CMBPTRS+40
CMBEDBPT EQU   CMBPTRS+36
CMBUBFPT EQU   CMBPTRS+28
CMBUFSPT EQU   CMBPTRS+20
CMBUSPTR EQU   CMBPTRS+12
CMBPRPTR EQU   CMBPTRS+4
CMBUSRPT EQU   CMBPTRS
@NM00061 EQU   IDACMB+1
CAXWNQID EQU   CAXHRPLW+2
CAXHRPLC EQU   CAXHRPLW
CAXASCBP EQU   IGGCAXWA+124
@NM00060 EQU   CAXECB+1
@NM00059 EQU   CAXECBHB
CAXECBPB EQU   CAXECBHB
CAXECBWB EQU   CAXECBHB
CAXRACP  EQU   IGGCAXWA+116
CAXCRACB EQU   IGGCAXWA+112
CAXJDE   EQU   IGGCAXWA+108
CAXPLOCK EQU   CAXCCA
CAXOPEWA EQU   IGGCAXWA+100
COPACB   EQU   CAXOPLST+1
@NM00058 EQU   COPTS
CENLST   EQU   COPTS
@NM00057 EQU   CAXCNAM+22
CAXRADDN EQU   CAXCNAM+14
CAXRATEP EQU   CAXCNAM+10
CAXRACTS EQU   CAXCNAM+6
CAXVOLID EQU   CAXCNAM
CAXRPL   EQU   IGGCAXWA+48
CAXRPLCT EQU   IGGCAXWA+46
CAXASID  EQU   IGGCAXWA+44
CAXFDCI  EQU   CAXCCR+9
CAXCDCI  EQU   CAXCCR+6
CAXNFCI  EQU   CAXCCR+3
CAXHACI  EQU   CAXCCR
CAXUCB   EQU   IGGCAXWA+28
CAXDRWP  EQU   IGGCAXWA+20
CAXSCHWA EQU   IGGCAXWA+16
CAXATIOT EQU   IGGCAXWA+12
CAXACT   EQU   IGGCAXWA+11
@NM00056 EQU   CAXFLG3
CAXF3B6  EQU   CAXFLG3
CAXF3B5  EQU   CAXFLG3
CAXRAC   EQU   CAXFLG3
@NM00055 EQU   CAXFLG3
CAXF3ANE EQU   CAXFLG3
CAXF3AT  EQU   CAXFLG3
CAXF2VTU EQU   CAXFLG2
CAXF2REC EQU   CAXFLG2
CAXF2CA  EQU   CAXFLG2
CAXF2CLR EQU   CAXFLG2
CAXF2IOE EQU   CAXFLG2
CAXF2NCR EQU   CAXFLG2
CAXF2NDD EQU   CAXFLG2
CAXF2DT  EQU   CAXFLG2
CAXSCR   EQU   CAXFLGS
CAXCMR   EQU   CAXFLGS
CAXMCT   EQU   CAXFLGS
CAXCMP   EQU   CAXFLGS
CAXEOV   EQU   CAXFLGS
CAXCLS   EQU   CAXFLGS
CAXOPN   EQU   CAXFLGS
CAXBLD   EQU   CAXFLGS
CAXCHN   EQU   IGGCAXWA+4
@NM00054 EQU   IGGCAXWA+1
CAXID    EQU   IGGCAXWA
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFXORBA EQU   IDABUFC+44
BUFXIRBA EQU   IDABUFC+40
BUFCNXT2 EQU   IDABUFC+37
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCBAD  EQU   IDABUFC+20
BUFCCPA  EQU   IDABUFC+16
BUFCORBA EQU   IDABUFC+12
BUFCDDDD EQU   IDABUFC+8
BUFCAMB  EQU   BUFCPLH
@NM00053 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCMW   EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00052 EQU   IDABUFDR+16
@NM00051 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRID  EQU   IDABUFDR
BIBVSRTP EQU   IDABIB+104
BIBASCB  EQU   IDABIB+100
BIBDDNM  EQU   IDABIB+92
BIBSTPNM EQU   IDABIB+84
BIBJOBNM EQU   IDABIB+76
BIBSIOAP EQU   BIBRTNS+12
BIBASYRT EQU   BIBRTNS+8
BIBCEAPP EQU   BIBRTNS+4
BIBVGTT  EQU   IDABIB+56
BIBPSAB  EQU   IDABIB+52
BIBCSL   EQU   IDABIB+48
BIBWSHD  EQU   IDABIB+44
BIBVCRT  EQU   IDABIB+40
BIBHEBPT EQU   IDABIB+32
BIBPRSPH EQU   IDABIB+28
BIBSPHPT EQU   IDABIB+24
BIBPAMBL EQU   IDABIB+20
BIBDACB  EQU   IDABIB+16
BIBUPT   EQU   IDABIB+8
@NM00050 EQU   IDABIB+5
BIBFLG2  EQU   IDABIB+4
BIBLEN   EQU   BIBHDR+2
@NM00049 EQU   BIBFLG1
BIBCKPT  EQU   BIBFLG1
BIBREST  EQU   BIBFLG1
BIBID    EQU   BIBHDR
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
@NM00048 EQU   IDAAMDSB+41
@NM00047 EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDCINV  EQU   IDAAMDSB+20
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDKEYLN EQU   IDAAMDSB+8
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00046 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00045 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00044 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLSDS  EQU   AMBLVVIC
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00043 EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00042 EQU   AMBLQ2
@NM00041 EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00040 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00039 EQU   AMBCSWD1+1
@NM00038 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
@NM00037 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00036 EQU   IDAAMB+68
AMBIWA   EQU   IDAAMB+64
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00035 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00034 EQU   AMBOFLGS
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBSDS   EQU   AMBINFL
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00033 EQU   AMBINFL
@NM00032 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00031 EQU   IDAAMB+38
AMBCDSN  EQU   IDAAMB+32
@NM00030 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00029 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00028 EQU   AMBFLG0
AMBSWSP  EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00027 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00026 EQU   ACBINFL2
ACBCBIC  EQU   ACBINFL2
@NM00025 EQU   ACBINFL2
ACBBYPSS EQU   ACBINFL1
ACBSDS   EQU   ACBVVIC
ACBUCRA  EQU   ACBINFL1
ACBSCRA  EQU   ACBINFL1
ACBCAT   EQU   ACBINFL1
ACBIJRQE EQU   ACBINFL1
ACBJEPS  EQU   ACBINFL1
@NM00024 EQU   ACBINFL1
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00023 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00022 EQU   ACBOFLGS
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00021 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00020 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00019 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00018 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00017 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00016 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00015 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
@NM00013 EQU   PFLIST
BLPBFLCT EQU   BLPBUFL+6
@NM00006 EQU   BLPBUFL+5
@NM00005 EQU   BLPBRLFG
BLPBFLST EQU   BLPBRLFG
BLPBUFSZ EQU   BLPBUFL
BLPERFLG EQU   IDABLPRM+51
@NM00004 EQU   IDABLPRM+49
BLPOFLGS EQU   IDABLPRM+48
@NM00003 EQU   IDABLPRM+28
BLPDSORG EQU   BLPIOACB+3
@NM00002 EQU   BLPIOACB
BLPGAD   EQU   BLPCORE+5
BLPGSP   EQU   BLPCORE+4
BLPGSZ   EQU   BLPCORE+1
BLPGPG   EQU   BLPGFLG
BLPGREQ  EQU   BLPGFLG
BLPOACB  EQU   IDABLPRM+13
BLPOCODE EQU   IDABLPRM+12
BLPFRSTR EQU   BLPFLAG2
BLPFINDX EQU   BLPFLAG2
BLPFDATA EQU   BLPFLAG2
BLPFPRIM EQU   BLPFLAG2
BLPFPATH EQU   BLPFLAG2
BLPFUPGR EQU   BLPFLAG2
BLPFPART EQU   BLPFLAG2
BLPFSTAD EQU   BLPFLAG1
BLPFBFRF EQU   BLPFLAG1
BLPFIOBF EQU   BLPFLAG1
BLPFDBDC EQU   BLPFLAG1
BLPSTRNO EQU   IDABLPRM+9
BLPKEYLN EQU   IDABLPRM+8
@NM00001 EQU   IDABLPRM+2
BLPACBST EQU   IDABLPRM+1
BLPACBID EQU   IDABLPRM
@NM00110 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00109 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00108 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00107 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00106 EQU   FLCFSA
@NM00105 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00104 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00103 EQU   FLCIOA
@NM00102 EQU   FLCMCLA+15
@NM00101 EQU   FLCMCLA+14
@NM00100 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00099 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00098 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00097 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00096 EQU   FLCPER
@NM00095 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00094 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00093 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00092 EQU   FLCPIILC
@NM00091 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00090 EQU   FLCSVILC
@NM00089 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00088 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00087 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00537 EQU   @RC00521
@PB00020 EQU   @PB00021
@RT01218 EQU   @EL00021
@PB00019 EQU   @PB00020
@PB00018 EQU   @PB00019
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IDA0200B,(C'PLS1839',0701,78158)
