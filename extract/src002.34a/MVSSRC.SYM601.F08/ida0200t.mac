         TITLE 'IDA0200T - VSAM CLOSE ACB                              *
                        '
IDA0200T CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA0200T  78.199'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @03,0                                               0001
@PSTART  LA    @12,4095(,@03)                                      0001
         USING @PSTART,@03                                         0001
         USING @PSTART+4095,@12                                    0001
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
RBPRFXLN EQU 64
RBPRFLNA EQU 32
PRBLEN   EQU 136
SIRBLEN  EQU 200
TIRBLEN  EQU 136
IRBLEN   EQU 128
SVRBLEN  EQU 224
         LA RACB,0(RACB)
*   RSTATRTN=IDAR200T;              /* NOTE CSECT IN CONTROL @Z30SSRL*/
         MVC   RSTATRTN(4,RCORE),@CC04085                          0346
*   CALL INIT200T;                  /* PERFORM MODULE INITIALIZATION */
         BAL   @14,INIT200T                                        0347
*   GEN(USING @DATD,R13);           /* ESTABLISH ADDRESSABILITY      */
         USING @DATD,R13
*   IF CLWDUMMY=OFF THEN            /* IF NOT DUMMY DATA SET         */
         TM    CLWDUMMY(RCORE),B'00000100'                         0349
         BNZ   @RF00349                                            0349
*     DO;                                                          0350
*       IF CLWBNOFL=OFF&            /* BUFFER FLUSH NOT SUPPRESSED 0351
*                                      AND                           */
*           AMBLFSTP=OFF THEN       /* NOT FAST PATH PROCESSING (ICI)*/
         TM    CLWBNOFL(RCORE),B'10000000'                         0351
         BNZ   @RF00351                                            0351
         L     @05,MWAMBLPT                                        0351
         TM    AMBLFSTP(@05),B'00010000'                           0351
         BNZ   @RF00351                                            0351
*         CALL FLQUIS;              /* FLUSH AND QUIES I/O           */
         BAL   @14,FLQUIS                                          0352
*       IF CLWPATH=ON THEN          /* IF PATH PROCESSING INDICATED  */
@RF00351 TM    CLWPATH(RCORE),B'00010000'                          0353
         BNO   @RF00353                                            0353
*         CALL CLSPATH;             /* CLOSE PATH DATA SET           */
         BAL   @14,CLSPATH                                         0354
*       CALL CLSBASE;               /* CLOSE BASE DATA SET           */
@RF00353 BAL   @14,CLSBASE                                         0355
*     END;                                                         0356
*   IF CLWSPHCL=ON THEN             /* IF CLOSING ENTIRE SPHERE      */
@RF00349 TM    CLWSPHCL(RCORE),B'00001000'                         0357
         BNO   @RF00357                                            0357
*     CALL CLSPHERE;                /* CLOSE SPHERE PROCESSING       */
         BAL   @14,CLSPHERE                                        0358
*   IF AMBLFIX=ON THEN              /* IF BASE AMBL IS FIXED         */
@RF00357 L     @05,MWAMBLPT                                        0359
         TM    AMBLFIX(@05),B'00001000'                            0359
         BNO   @RF00359                                            0359
*     CALL PGFRAMBL;                /* PAGE FREE BASE AMBL           */
         BAL   @14,PGFRAMBL                                        0360
*   MWADDRES=MWABAMBL;              /* BASE AMBL ADDRESS             */
@RF00359 L     @05,MWABAMBL                                        0361
         ST    @05,MWADDRES                                        0361
*   IF AMBLCAT=ON THEN              /* IF CATALOG OR SCRA OR SYSTEM
*                                      DATA SET              @Z40WSRL*/
         L     @05,MWAMBLPT                                        0362
         TM    AMBLCAT(@05),B'00000010'                            0362
         BNO   @RF00362                                            0362
*     MWASPOOL=CATPOOL;             /* CATALOG SUBPOOL NUMBER        */
         MVI   MWASPOOL,X'E7'                                      0363
*   ELSE                            /* NOT CATALOG OR SCRA   @Z30SSRL*/
*     IF AMBLGSR=ON×AMBLCBIC=ON THEN/* IF GSR OR CBIC        @ZA16012*/
         B     @RC00362                                            0364
@RF00362 L     @05,MWAMBLPT                                        0364
         TM    AMBLGSR(@05),B'01000000'                            0364
         BO    @RT00364                                            0364
         TM    AMBLCBIC(@05),B'10000000'                           0364
         BNO   @RF00364                                            0364
@RT00364 DS    0H                                                  0365
*       MWASPOOL=GSRSPOOL;          /* GSR SUBPOOL NUMBER    @Z30SSRL*/
         MVI   MWASPOOL,X'F1'                                      0365
*     ELSE                          /* IF NOT GSR            @Z30SSRL*/
*       MWASPOOL=AMBLPOOL;          /* DEFAULT TO SUBPOOL FOR AMBL 0366
*                                                            @Z30SSRL*/
         B     @RC00364                                            0366
@RF00364 MVI   MWASPOOL,X'FC'                                      0366
*   MWABYTES=LENGTH(IDAAMBL);       /* LENGTH OF AMBL                */
@RC00364 DS    0H                                                  0367
@RC00362 MVC   MWABYTES(3),@CF05095+1                              0367
*   CALL FREECORE;                  /* FREE BASE AMBL                */
         BAL   @14,FREECORE                                        0368
*   MWAAMBLF=ON;                    /* INDICATE AMBL FREED   @Z30SSRL*/
         OI    MWAAMBLF,B'10000000'                                0369
*LTRM200T:                                                         0370
*   CALL TERM200T;                  /* CALL TERMINATION PROCESSING   */
LTRM200T BAL   @14,TERM200T                                        0370
*ENDLABEL:                                                         0371
*   GEN(LM RET,R12,12(R13));        /* RESTORE REGISTERS             */
ENDLABEL LM RET,R12,12(R13)
*   GEN(BR RET);                    /* EXIT MODULE                   */
         BR RET
*INIT200T:                                                         0373
*                                                                  0373
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-INITIALIZE PARAMETER LIST FOR PROBLEM         */
*/*                    DETERMINATION                                 */
*/*                    BUILD MODULE WORK AREA (MWA)                  */
*/*                    BUILD ACB WORK AREA (CLW)                     */
*/*                    ENQ ALL DATA SETS                             */
*/*      01   INPUTS-  1. ADDR OF COMMON WORK AREA IN RCORE          */
*/*                    2. ADDR OF PREVIOUS SAVE AREA IN REGISTER 13  */
*/*                    3. ADDR OF USER ACB IN REGISTER 2             */
*/*      01   OUTPUTS- 1. ADDR OF ACB WORK AREA IN RCORE             */
*/*                    2. ADDR OF MODULE WORK AREA IN REGISTER 13    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0373
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0373
INIT200T DS    0H                                                  0374
*   RESPECIFY                                                      0374
*    (R11,                                                         0374
*     RET) RESTRICTED;                                             0374
*   R11=RET;                        /* SAVE RETURN ADDR IN R11       */
         LR    R11,RET                                             0375
*   RESPECIFY                                                      0376
*     RET UNRESTRICTED;                                            0376
*   IDAPDPRM=IDAPDPRM&&IDAPDPRM;    /* ZERO PROBLEM DETERMINATION  0377
*                                      (PD) PARAMETER LIST           */
         LA    @10,280                                             0377
         ALR   @10,RCORE                                           0377
         XC    IDAPDPRM(40,@10),IDAPDPRM(@10)                      0377
*   PDPCALL=PDPCLOSE;               /* INDICATE CALLER IS CLOSE      */
         MVI   PDPCALL(@10),X'04'                                  0378
*   PDPFUNC=PDF101;                 /* SET FUNCTION CODE IN PD LIST  */
         MVI   PDPFUNC(@10),X'65'                                  0379
*   PDPACB=RACB;                    /* SET PTR TO USER ACB FOR PD    */
         ST    RACB,PDPACB(,@10)                                   0380
*   PDPDSTYP=PDPDDNM;               /* INDICATE DD DATA SET NAME USED*/
         MVI   PDPDSTYP(@10),X'01'                                 0381
*   PDPCLSNM=ADDR(JFCBDSNM);        /* SET CLUSTER NAME TO USER DS 0382
*                                      NAME IN DD STATEMENT          */
         LA    @05,100                                             0382
         ALR   @05,RCORE                                           0382
         ST    @05,PDPCLSNM(,@10)                                  0382
*   PDPDSN=ZERO;                    /* ZERO OUT DS NAME              */
         SLR   @05,@05                                             0383
         ST    @05,PDPDSN(,@10)                                    0383
*   IF ACBAMBL->AMBLDUMY=OFF THEN   /* NOT DUMMY DATA SET            */
         L     @05,ACBAMBL(,RACB)                                  0384
         TM    AMBLDUMY(@05),B'00000001'                           0384
         BNZ   @RF00384                                            0384
*     PDPCTACB=ACBAMBL->AMBLDTA->AMBCACB;/* SET PTR TO CATALOG ACB   */
         L     @05,AMBLDTA(,@05)                                   0385
         L     @05,AMBCACB(,@05)                                   0385
         ST    @05,PDPCTACB(,@10)                                  0385
*   PDPTIOT=DXTIOTAD;               /* POINT TO CORRECT TIOT ENTRY 0386
*                                                            @Y30DSMD*/
@RF00384 L     @10,DXTIOTAD(,RCORE)                                0386
         ST    @10,PDPTIOT+280(,RCORE)                             0386
*/********************************************************************/
*/*           IDAGMAIN - GETS CORE STORAGE FOR AUTOMATICS.           */
*/*                      FOR VS2 IDAGMAIN WILL MOVE THE      @Z30SSRL*/
*/*                      ID AND DATE OF THE MODULE TO A      @Z30SSRL*/
*/*                      LOCATION DIRECTLY AFTER THE PLS     @Z30SSRL*/
*/*                      GENERATED SAVE AREA.                @Z30SSRL*/
*/*           DATE OF LAST CHANGE = 3 DECEMBER 74            @Z30SSRL*/
*/********************************************************************/
*                                                                  0387
*   GEN;                                                           0387
         L     @00,@SIZDATD             LOAD LENGTH OF AUTOMATICS
         GETMAIN RC,LV=(0),SP=0         ISSUE GETMAIN IN SUBPOOL ZERO
         LTR   @15,@15                  TEST RETURN CODE FOR ERROR
         BNZ   GMN00100                 BRANCH IF ERROR ENCOUNTERED
*                                       IF NO ERROR WAS ENCOUNTERED
         LR    @00,@01                  ADDRESS OF GOTTEN AREA IN R0
         LR    @14,@01                  SAVE THE ADDRESS IN REGISTER 14
         L     @01,@SIZDATD             LENGTH OF GOTTEN AREA
         MVCL  @00,@14                  ZERO THE GOTTEN AREA, R15=0
         LR    @15,@14                  ADDRESS OF AREA IN REGISTER 15
         ST    @15,8(,@13)              FORWARD CHAIN THIS SAVE AREA
         L     @01,@SIZDATD             LENGTH OF GOTTEN AREA
         ST    @01,88(,@15)             STORE LENGTH OF AREA
         LR    @14,@03                  LOAD BASE REGISTER OF MODULE
         LA    @01,23                   LOAD NEGATIVE OFFSET BYTE NO.
         SR    @14,@01                  NEGITIVE OFFSET 23 BYTES
         MVC   72(16,@15),0(@14)        GET MODULE NAME AND DATE
         B     GMN00200                 BYPASS SETTING ERROR
GMN00100 SR    @15,@15                  REGISTER 15 = 0 INDICATES ERROR
GMN00200 EQU   *                        R15 CONTAINS ADDRESS OR ZERO
*        REGISTER 15 CONTAINS EITHER THE ADDRESS OF GOTTEN CORE OR
*        ZERO IF THE GETMAIN WAS UNSUCCESSFUL.
*   RESPECIFY                                                      0388
*    (R1,                                                          0388
*     R11,                                                         0388
*     R12,                                                         0388
*     R13,                                                         0388
*     RETCODE) RESTRICTED;                                         0388
*   IF RETCODE=ZERO THEN            /* IF GETMAIN FAILED             */
         LTR   RETCODE,RETCODE                                     0389
         BNZ   @RF00389                                            0389
*     DO;                                                          0390
*       PDPCODE=PP20;               /* SET PROBLEM CODE FOR PD       */
         MVI   PDPCODE+280(RCORE),X'14'                            0391
*       ACBERFLG=OPERR136;          /* SET ACB ERROR FLAG            */
         MVI   ACBERFLG(RACB),X'88'                                0392
*       R1=RCORE;                   /* COPY PTR TO COMMON WORK AREA  */
         LR    R1,RCORE                                            0393
*       RSTATRTN=IDAR192P;          /* NOTE CONTROL GIVEN TO       0394
*                                      IDA0192P.             @Y30DSMD*/
         MVC   RSTATRTN(4,RCORE),@CC04071                          0394
*       CALL IDA0192P;              /* CALL PROBLEM DETERMINATION    */
         L     @15,@CV05327                                        0395
         BALR  @14,@15                                             0395
*       RSTATRTN=IDAR200T;          /* NOTE CSECT NOW IN CONTROL.  0396
*                                                            @Y30DSMD*/
         MVC   RSTATRTN(4,RCORE),@CC04085                          0396
*       RETURN TO ENDLABEL;         /* RETURN TO IDA0200T AND EXIT   */
         LA    @14,ENDLABEL                                        0397
@EL00002 DS    0H                                                  0397
@EF00002 DS    0H                                                  0397
@ER00002 BR    @14                                                 0397
*     END;                                                         0398
*   GEN(ST R13,4(RETCODE));         /* BACKCHAIN TO PREVIUOS SAVEAREA*/
@RF00389 DS    0H                                                  0399
         ST R13,4(RETCODE)
*   R13=RETCODE;                    /* ADDR OF MODULE WORK AREA TO 0400
*                                      R13                           */
         LR    R13,RETCODE                                         0400
*   RESPECIFY                                                      0401
*    (R1,                                                          0401
*     RETCODE) UNRESTRICTED;                                       0401
*   GEN(USING @DATD,R13);           /* ESTABLISH ADDRESSABILITY      */
         USING @DATD,R13
*   MWASAVEA=R11;                   /* SAVE RETURN ADDR IN MWA       */
         ST    R11,MWASAVEA                                        0403
*   RESPECIFY                                                      0404
*     R11 UNRESTRICTED;                                            0404
*   MWACORAD=RCORE;                 /* SAVE COMMON WORK AREA ADDRESS */
         ST    RCORE,MWACORAD                                      0405
*   RESPECIFY                                                      0406
*     FORCORE BASED(MWACORAD);                                     0406
*   GEN( LA RACB,0(,RACB));         /* ZERO THE OPTION BYTE. @Y30DSMD*/
          LA RACB,0(,RACB)
*   MWARACB=RACB;                   /* SAVE USER ACB ADDRESS         */
         ST    RACB,MWARACB                                        0408
*   MWATIOTP=PDPTIOT;               /* SAVE TIOT DD ENTRY ADDR     0409
*                                                            @ZA19549*/
         L     @05,MWACORAD                                        0409
         L     @05,PDPTIOT+280(,@05)                               0409
         ST    @05,MWATIOTP                                        0409
*   MWABYTES=LENGTH(IDACLWRK);      /* BYTES FOR ACB WORK AREA       */
         MVC   MWABYTES(3),@CF04755+1                              0410
*   MWASPOOL=WKPOOL;                /* SUBPOOL NUMBER                */
         MVI   MWASPOOL,X'FC'                                      0411
*   CALL GETCORE;                   /* BUILD ACB WORK AREA (CLW)     */
         BAL   @14,GETCORE                                         0412
*   MWACBWK=ON;                     /* SET BIT TO INDICATE CLW BUILT */
         OI    MWACBWK,B'10000000'                                 0413
*   RCORE=MWADDRES;                 /* REGISTER 4 GETS ADDR OF CLW   */
         L     RCORE,MWADDRES                                      0414
*   CLWCOMWK=MWACORAD;              /* SAVE COMMON WORK AREA ADDR IN
*                                      CLW                           */
         L     @05,MWACORAD                                        0415
         ST    @05,CLWCOMWK(,RCORE)                                0415
*   CLWID='IDACLWRK';               /* SET CLW ID            @Z30SSRL*/
         MVC   CLWID(8,RCORE),@CC05330                             0416
*   MWAMBLPT=ACBAMBL;               /* ADDRESSABILITY FOR AMBL       */
         L     @05,ACBAMBL(,RACB)                                  0417
         ST    @05,MWAMBLPT                                        0417
*   MWAVGTT=BIBVGTT;                /* MAKE A LOCAL COPY OF VGTT   0418
*                                      POINTER.              @Z30SSMD*/
         L     @01,AMBLBIB(,@05)                                   0418
         L     @15,BIBVGTT(,@01)                                   0418
         ST    @15,MWAVGTT                                         0418
*   IF AMBLGSR=ON×AMBLCBIC=ON THEN  /* IF GSR OR CBIC        @ZA16012*/
         TM    AMBLGSR(@05),B'01000000'                            0419
         BO    @RT00419                                            0419
         TM    AMBLCBIC(@05),B'10000000'                           0419
         BNO   @RF00419                                            0419
@RT00419 DS    0H                                                  0420
*     DXUKEY=VGTTGSRK;              /* SET USER KEY TO GSR   @ZA16012*/
         L     @05,MWAVGTT                                         0420
         IC    @15,VGTTGSRK(,@05)                                  0420
         L     @05,MWACORAD                                        0420
         STC   @15,DXUKEY(,@05)                                    0420
*   ACBDEB->DEBDCBB=RACB;           /* POINT DEB TO COPY ACB.      0421
*                                                            @Z30SSMD*/
@RF00419 L     @15,ACBDEB-1(,RACB)                                 0421
         LA    @15,0(,@15)                                         0421
         STCM  RACB,7,DEBDCBB(@15)                                 0421
*   AMBLACB=RACB;                   /* POINT AMBL TO COPY ACB.     0422
*                                                            @Z30SSMD*/
         L     @14,MWAMBLPT                                        0422
         ST    RACB,AMBLACB(,@14)                                  0422
*   MWAAMBPT=AMBLDTA;               /* ADDRESSABILITY FOR DATA AMB   */
         L     @11,AMBLDTA(,@14)                                   0423
         ST    @11,MWAAMBPT                                        0423
*   MWADDFRE=OFF;                   /* NOTE THAT DUMMY DEB NOT FREED.
*                                                            @Y30DSMD*/
         NI    MWADDFRE,B'01111111'                                0424
*   MWAAMBLF=OFF;                   /* NOTE AMBL FROM RACB NOT FREED.
*                                                            @Y30DSMD*/
         NI    MWAAMBLF,B'01111111'                                0425
*   MWADEBPT=ACBDEB;                /* SET MWADEBPT TO DUMMY-DEB.  0426
*                                                            @Z30SSMD*/
         LR    MWADEBPT,@15                                        0426
*   RFY                                                            0427
*     DEB BASED(MWADEBPT-LENGTH(DEB));/* THERE IS NO AVT FOR D-DEB.  */
*   DEBXCDCB=ON;                    /* PREVENT TASK CLOSE ON THE   0428
*                                      DUMMY-DEB.            @Z30SSMD*/
         LR    @01,MWADEBPT                                        0428
         AL    @01,@CF05495                                        0428
         L     @01,DEBXTNP-28(,@01)                                0428
         OI    DEBXCDCB(@01),B'10000000'                           0428
*   RFY                                                            0429
*     DEB BASED(DEBAPPAD);          /* RE-BASE FOR R-DEB.    @Z30SSMD*/
*   IF AMBLUCRA=ON THEN             /* IF UCRA                       */
         TM    AMBLUCRA(@14),B'00000100'                           0430
         BNO   @RF00430                                            0430
*     MWAUCRA=ON;                   /* INDICATE UCRA IN MWA          */
         OI    MWAUCRA,B'10000000'                                 0431
*   IF AMBLLSR=ON THEN              /* IF THIS IS LSR THEN   @Y30DSMD*/
@RF00430 L     @05,MWAMBLPT                                        0432
         TM    AMBLLSR(@05),B'00100000'                            0432
         BNO   @RF00432                                            0432
*     MWALSR=ON;                    /* SET WORK AREA LSR SWITCH.   0433
*                                                            @Y30DSMD*/
         OI    MWALSR,B'10000000'                                  0433
*   ELSE                            /* IF NOT LSR            @Z30SSRL*/
*     IF AMBLGSR=ON THEN            /* IS THIS GSR?          @Y30DSMD*/
         B     @RC00432                                            0434
@RF00432 L     @05,MWAMBLPT                                        0434
         TM    AMBLGSR(@05),B'01000000'                            0434
         BNO   @RF00434                                            0434
*       MWAGSR=ON;                  /* IF SO SET GSR SWITCH. @Y30DSMD*/
         OI    MWAGSR,B'10000000'                                  0435
*   IF AMBLCBIC=ON THEN             /* IF CBIC               @ZA16012*/
@RF00434 DS    0H                                                  0436
@RC00432 L     @05,MWAMBLPT                                        0436
         TM    AMBLCBIC(@05),B'10000000'                           0436
         BNO   @RF00436                                            0436
*     MWACBIC=ON;                   /* INDICATE SO           @ZA16012*/
         OI    MWACBIC,B'10000000'                                 0437
*   IF AMBLCAT=OFF THEN             /* IF NOT CATALOG OR SCRA        */
@RF00436 L     @05,MWAMBLPT                                        0438
         TM    AMBLCAT(@05),B'00000010'                            0438
         BNZ   @RF00438                                            0438
*     GEN(DEBCHK (RACB),TYPE=VERIFY,AM=VSAM);/* VERIFY DUMMY DEB     */
         DEBCHK (RACB),TYPE=VERIFY,AM=VSAM
*   ELSE                            /* IF CATALOG OR SCRA            */
*     DO;                                                          0440
         B     @RC00438                                            0440
@RF00438 DS    0H                                                  0441
*       MWACAT=ON;                  /* INDICATE CATALOG IN MWA       */
         OI    MWACAT,B'10000000'                                  0441
*       IF(AMBCREAT=OFF&            /* DATA AMB INDICATE NOT CREATE
*                                      AND                           */
*           ACBSDS=OFF) THEN        /* NOT SYSTEM DATA SET   @Z40WSRL*/
         L     @05,MWAAMBPT                                        0442
         TM    AMBCREAT(@05),B'10000000'                           0442
         BNZ   @RF00442                                            0442
         TM    ACBSDS(RACB),B'00000010'                            0442
         BNZ   @RF00442                                            0442
*         CLWBNOFL=ON;              /* INDICATE SUPPRESS BUFFER FLUSH*/
         OI    CLWBNOFL(RCORE),B'10000000'                         0443
*     END;                                                         0444
@RF00442 DS    0H                                                  0445
*   ACBERFLG=ZERO;                  /* ZERO ACB ERROR FLAG   @Z30SSRL*/
@RC00438 MVI   ACBERFLG(RACB),X'00'                                0445
*   IF(AMBLCAT=ON&AMBCREAT=OFF)×    /* CATALOG AND NOT CREATE OR     */
*       AMBLSCRA=ON×AMBLUCRA=ON THEN/* SCRA OR RESET         @Z30SSMD*/
         L     @05,MWAMBLPT                                        0446
         TM    AMBLCAT(@05),B'00000010'                            0446
         BNO   @GL00005                                            0446
         L     @05,MWAAMBPT                                        0446
         TM    AMBCREAT(@05),B'10000000'                           0446
         BZ    @RT00446                                            0446
@GL00005 L     @05,MWAMBLPT                                        0446
         TM    AMBLSCRA(@05),B'00001100'                           0446
         BZ    @RF00446                                            0446
@RT00446 DS    0H                                                  0447
*     CLWCNOUP=ON;                  /* INDICATE NO CATALOG UPDATE IN
*                                      CLW                           */
         OI    CLWCNOUP(RCORE),B'01000000'                         0447
*   IF AMBLDUMY=OFF THEN            /* IF NOT A DUMMY DATA SET       */
@RF00446 L     @05,MWAMBLPT                                        0448
         TM    AMBLDUMY(@05),B'00000001'                           0448
         BNZ   @RF00448                                            0448
*     DO;                                                          0449
*       IF AMBPSDS=ON THEN          /* IF THIS IS PAGE SPACE DATA SET
*                                      THEN,                         */
         L     @05,MWAAMBPT                                        0450
         TM    AMBPSDS(@05),B'10000000'                            0450
         BNO   @RF00450                                            0450
*         CLWCNOUP=ON;              /* DO NOT UPDATE CTLG ON CLOSE.
*                                                            @Y30DSMD*/
         OI    CLWCNOUP(RCORE),B'01000000'                         0451
*       IF TCBFA=ON THEN            /* IF ABEND INDICATED            */
@RF00450 L     @05,CVTPTR                                          0452
         L     @05,CVTTCBP(,@05)                                   0452
         L     @05,TCBPTR(,@05)                                    0452
         TM    TCBFA(@05),B'10000000'                              0452
         BNO   @RF00452                                            0452
*         DO;                                                      0453
*           CLWNWRIT=ON;            /* SUPPRESS WRTBFR               */
*           CLWBNOFL=ON;            /* SUPPRESS BUFFER FLUSH         */
*           CLWCNOUP=ON;            /* SUPPRESS CATALOG UPDATE       */
         OI    CLWNWRIT(RCORE),B'11100000'                         0456
*         END;                                                     0457
*       CALL ENQFUNC;               /* CALL ENQUEING FUNCTION        */
@RF00452 BAL   @14,ENQFUNC                                         0458
*       MWAMBLPT=ACBAMBL;           /* GET AMBL POINTED TO BY USER 0459
*                                      ACB                           */
         L     @05,ACBAMBL(,RACB)                                  0459
         ST    @05,MWAMBLPT                                        0459
*       IF AMBLPATH=ON THEN         /* IF THIS IS PATH AMBL          */
         TM    AMBLPATH(@05),B'10000000'                           0460
         BNO   @RF00460                                            0460
*         MWAMBLPT=AMBLXPT;         /* POINT TO BASE AMBL            */
         L     @05,AMBLXPT(,@05)                                   0461
         ST    @05,MWAMBLPT                                        0461
*       IF AMBLPRIM=ON&             /* PRIMARY AMBL AND              */
*           AMBLSCHN=ZERO THEN      /* NO SECONDARY CHAIN            */
@RF00460 L     @05,MWAMBLPT                                        0462
         TM    AMBLPRIM(@05),B'10000000'                           0462
         BNO   @RF00462                                            0462
         L     @05,AMBLSCHN(,@05)                                  0462
         LTR   @05,@05                                             0462
         BNZ   @RF00462                                            0462
*         CLWSPHCL=ON;              /* INDICATE SPHERE CLOSE         */
         OI    CLWSPHCL(RCORE),B'00001000'                         0463
*     END;                                                         0464
*   ELSE                            /* IF A DUMMY DATA SET           */
*     DO;                           /* DO DUMMY INITIALIZATION       */
         B     @RC00448                                            0465
@RF00448 DS    0H                                                  0466
*       CLWDUMMY=ON;                /* INDICATE DUMMY DATA SET IN CLW*/
*       CLWSPHCL=ON;                /* INDICATE SPHERE CLOSE @ZA26774*/
         OI    CLWDUMMY(RCORE),B'00001100'                         0467
*       MWABAMBL=MWAMBLPT;          /* INIT BASE AMBL PTR            */
         L     @05,MWAMBLPT                                        0468
         ST    @05,MWABAMBL                                        0468
*     END;                                                         0469
*   MWAMBLPT=ACBAMBL;               /* POINT TO USER ACB AMBL        */
@RC00448 L     @05,ACBAMBL(,RACB)                                  0470
         ST    @05,MWAMBLPT                                        0470
*   RESPECIFY                                                      0471
*     RET RESTRICTED;                                              0471
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        0472
*   RESPECIFY                                                      0473
*     RET UNRESTRICTED;                                            0473
*   END INIT200T;                                                  0474
         B     @EL00002                                            0474
*GETCORE:                                                          0475
*                                                                  0475
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-ISSUE GETMAIN TO OBTAIN CORE STORAGE          */
*/*      01   INPUTS-  1. SUBPOOL NUMBER IN MWASPOOL                 */
*/*                    2. NUMBER OF BYTES REQUIRED IN MWABYTES       */
*/*      01   OUTPUTS- 1. ADDRESS OF GOTTEN CORE IN MWADDRES         */
*/*                    2. IF GETMAIN FAILED, PROBLEM DETERM IS CALLED*/
*/*      THIS ROUTINE HAS BEEN ALTERED FOR VS2. IF MWAFRKEY IS SET   */
*/*      TO SYS KEY THIS RTN WILL MODESET TO SYS KEY BEFORE  @Z40ESSR*/
*/*      DOING THE GETMAIN. THE DEFAULT IS TO GETMAIN IN KEY ZERO.   */
*/*      MWAFRKEY IS RESET TO K00 FOR EACH CALL TO ENFORCE KEY ZERO. */
*/*                                                                  */
*/********************************************************************/
*                                                                  0475
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0475
GETCORE  DS    0H                                                  0476
*   RESPECIFY                                                      0476
*    (R1,                                                          0476
*     R6,                                                          0476
*     R7,                                                          0476
*     R8,                                                          0476
*     R9,                                                          0476
*     RET) RESTRICTED;              /*                       @Z30SSMD*/
*   MWASAVEC=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEC                                        0477
*   RESPECIFY                                                      0478
*     RET UNRESTRICTED;                                            0478
*   IF MWAFRKEY<=K70 THEN           /* IF IN SYSTEM KEY THEN @Z40ESSR*/
         CLI   MWAFRKEY,X'70'                                      0479
         BH    @RF00479                                            0479
*     DO;                           /* MODESET TO SYSTEM KEY @Z40ESSR*/
*       R6=MWAFRKEY;                /* LOAD REG 6 WITH SYS KEY     0481
*                                                            @Z40ESSR*/
         SLR   R6,R6                                               0481
         IC    R6,MWAFRKEY                                         0481
*       SPKA(R6);                   /* MODESET TO SYSTEM KEY @Z40ESSR*/
         SPKA  0(R6)                                               0482
*     END;                          /*                       @Z40ESSR*/
*   R6=MWASPOOL;                    /* SUBPOOL NUMBER                */
@RF00479 SLR   R6,R6                                               0484
         IC    R6,MWASPOOL                                         0484
*   R7=MWABYTES;                    /* NUMBER OF BYTES REQUIRED      */
         L     R7,MWABYTES-1                                       0485
         LA    R7,0(,R7)                                           0485
*   GEN(GETMAIN RC,LV=(R7),SP=(R6))                                0486
*   SETS(RETCODE,R1);               /* ISSUE GETMAIN         @Z30SSMD*/
         GETMAIN RC,LV=(R7),SP=(R6)
*   GEN( MODESET EXTKEY=ZERO  FORCE KEY 0);/* RETURN TO KEY 0      0487
*                                                            @Z30SSMD*/
          MODESET EXTKEY=ZERO  FORCE KEY 0
*   RESPECIFY                                                      0488
*     RETCODE RESTRICTED;                                          0488
*   MWAFRKEY=K00;                   /* RESET TO FORCE KEY ZERO     0489
*                                      DEFAULT.              @Z30SSMD*/
         MVI   MWAFRKEY,X'00'                                      0489
*   IF RETCODE=ZERO THEN            /* GETMAIN SUCCESSFUL            */
         LTR   RETCODE,RETCODE                                     0490
         BNZ   @RF00490                                            0490
*     DO;                           /* PROCESS THE STORAGE.  @Z30SSMD*/
*       MWADDRES=R1;                /* SAVE THE ADDRESS OF THE     0492
*                                      STORAGE.              @Z30SSMD*/
         ST    R1,MWADDRES                                         0492
*       R6=MWADDRES;                /* ADDRESS OF GOTTEN CORE        */
         L     @14,MWADDRES                                        0493
         LR    R6,@14                                              0493
*       R9=ZERO;                    /* ZERO PAD BYTE                 */
         SLR   R9,R9                                               0494
*       GEN(MVCL R6,R8)                                            0495
*       NOSETS;                     /* ZERO GOTTEN CORE              */
         MVCL R6,R8
*       RESPECIFY                                                  0496
*        (R6,                                                      0496
*         R7,                                                      0496
*         R8,                                                      0496
*         R9) UNRESTRICTED;                                        0496
*     END;                          /* END OF LOGIC FOR GETMAIN    0497
*                                      RETCODE=ZERO.         @Z30SSMD*/
*   ELSE                            /* IF GETMAIN FAILED             */
*     DO;                           /* IF GETMAIN FAILED, CALL     0498
*                                      IDA0192P.             @Z30SSMD*/
         B     @RC00490                                            0498
@RF00490 DS    0H                                                  0499
*       ACBERFLG=OPERR136;          /* SET USER ACB ERROR FLAG       */
         MVI   ACBERFLG(RACB),X'88'                                0499
*       R1=MWACORAD;                /* POINT TO COMMON WORK AREA     */
         L     @14,MWACORAD                                        0500
         LR    R1,@14                                              0500
*       PDPCODE=PP20;               /* SET PROBLEM CODE              */
         MVI   PDPCODE+280(@14),X'14'                              0501
*       RSTATRTN=IDAR192P;          /* NOTE WHICH CSECT IN CONTROL.
*                                                            @Y30DSMD*/
         MVC   RSTATRTN(4,@14),@CC04071                            0502
*       CALL IDA0192P;              /* CALL PROBLEM DETERMINATION    */
         L     @15,@CV05327                                        0503
         BALR  @14,@15                                             0503
*       RSTATRTN=IDAR200T;          /* NOTE WHICH CSECT IS IN      0504
*                                      CONTROL.              @Y30DSMD*/
         L     @14,MWACORAD                                        0504
         MVC   RSTATRTN(4,@14),@CC04085                            0504
*       RETURN TO LTRM200T;         /* TERMINATION PROCESSING        */
         LA    @14,LTRM200T                                        0505
@EL00003 DS    0H                                                  0505
@EF00003 DS    0H                                                  0505
@ER00003 BR    @14                                                 0505
*     END;                          /* END OF LOGIC IF GETMAIN     0506
*                                      FAILED.               @Z30SSMD*/
*   RESPECIFY                                                      0507
*     RET RESTRICTED;                                              0507
@RC00490 DS    0H                                                  0508
*   RET=MWASAVEC;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEC                                        0508
*   RESPECIFY                                                      0509
*    (R1,                                                          0509
*     RET,                                                         0509
*     RETCODE) UNRESTRICTED;        /*                       @Z30SSMD*/
*   END GETCORE;                                                   0510
         B     @EL00003                                            0510
*ENQFUNC:                                                          0511
*                                                                  0511
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-BUILD ENQ PARAMETER LIST AND ISSUE ENQ'S      */
*/*      01   INPUTS-  1. POINTER TO AMBL IN ACBAMBL                 */
*/*      01   OUTPUTS- 1. ENQ ALL DATA SETS CONNECTED TO USER ACB    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0511
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0511
ENQFUNC  DS    0H                                                  0512
*   RESPECIFY                                                      0512
*     RET RESTRICTED;                                              0512
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS OF CALLER */
         ST    RET,MWASAVEB                                        0513
*   RESPECIFY                                                      0514
*     RET UNRESTRICTED;                                            0514
*   MWAMBLPT=ACBAMBL;               /* GET AMBL POINTED TO BY USER 0515
*                                      ACB                           */
         L     @11,ACBAMBL(,RACB)                                  0515
         ST    @11,MWAMBLPT                                        0515
*   MWADSCNT=ZERO;                  /* TOTAL COUNT OF DATA SETS      */
         SLR   @05,@05                                             0516
         ST    @05,MWADSCNT                                        0516
*   MWAQNAME='SYSVSAM ';            /* INITIALIZE THE QNAME          */
         MVC   MWAQNAME(8),@CC05342                                0517
*   MWAPAMBL=ZERO;                  /* INITLZ PATH AMBL ADDR @ZA16012*/
         SLR   MWAPAMBL,MWAPAMBL                                   0518
*   IF AMBLPATH=ON THEN             /* IF THIS IS A PATH AMBL        */
         TM    AMBLPATH(@11),B'10000000'                           0519
         BNO   @RF00519                                            0519
*     DO;                                                          0520
*       MWADSCNT=MWADSCNT+TWO;      /* TOTAL DATA SET COUNT          */
         AL    @05,@CF00096                                        0521
         ST    @05,MWADSCNT                                        0521
*       CLWPATH=ON;                 /* INDICATE PATH PROCESSING IN 0522
*                                      CLW                           */
         OI    CLWPATH(RCORE),B'00010000'                          0522
*       MWAPAMBL=MWAMBLPT;          /* SAVE PATH AMBL ADDRESS        */
         LR    MWAPAMBL,@11                                        0523
*       MWAMBLPT=AMBLXPT;           /* POINT TO BASE DATA SET AMBL   */
         L     @11,AMBLXPT(,@11)                                   0524
         ST    @11,MWAMBLPT                                        0524
*     END;                                                         0525
*   MWABAMBL=MWAMBLPT;              /* SAVE POINTER TO BASE AMBL     */
@RF00519 L     @11,MWAMBLPT                                        0526
         ST    @11,MWABAMBL                                        0526
*   IF BIBUPT^=ZERO THEN            /* UPT EXIST                     */
         L     @11,AMBLBIB(,@11)                                   0527
         L     @11,BIBUPT(,@11)                                    0527
         LTR   @11,@11                                             0527
         BZ    @RF00527                                            0527
*     MWADSCNT=MWADSCNT+UPTNOENT*TWO;/* INCREASE DATA SET COUNT BY 0528
*                                      NO. OF UPGRADE DS'S           */
         SLR   @05,@05                                             0528
         IC    @05,UPTNOENT(,@11)                                  0528
         ALR   @05,@05                                             0528
         AL    @05,MWADSCNT                                        0528
         ST    @05,MWADSCNT                                        0528
*   IF AMBLIX=ZERO THEN             /* IF ESDS                       */
@RF00527 L     @11,MWAMBLPT                                        0529
         L     @11,AMBLIX(,@11)                                    0529
         LTR   @11,@11                                             0529
         BNZ   @RF00529                                            0529
*     MWADSCNT=MWADSCNT+ONE;        /* INCREMENT DATA SET COUNT BY 0530
*                                      ONE                           */
         LA    @11,1                                               0530
         AL    @11,MWADSCNT                                        0530
         ST    @11,MWADSCNT                                        0530
*   ELSE                            /* IF KSDS                       */
*     MWADSCNT=MWADSCNT+TWO;        /* INCREMENT DATA SET COUNT BY 0531
*                                      TWO                           */
         B     @RC00529                                            0531
@RF00529 LA    @11,2                                               0531
         AL    @11,MWADSCNT                                        0531
         ST    @11,MWADSCNT                                        0531
*   MWAMBLPT=ACBAMBL;               /* AMBL POINTED TO BY USER ACB   */
@RC00529 L     @11,ACBAMBL(,RACB)                                  0532
         ST    @11,MWAMBLPT                                        0532
*   MWABYTES=LENGTH(ENQTCB)+MWADSCNT*(LENGTH(ENQENTRY)+LENGTH(ENQRNAME)
*       );                          /* BYTES REQUIRED FOR ENQ      0533
*                                      PARAMETER LIST AND RNAME LIST */
         L     @11,MWADSCNT                                        0533
         MH    @11,@CH00585                                        0533
         LA    @11,4(,@11)                                         0533
         STCM  @11,7,MWABYTES                                      0533
*   MWASPOOL=WKPOOL;                /* SUBPOOL NUMBER                */
         MVI   MWASPOOL,X'FC'                                      0534
*   CALL GETCORE;                   /* GETMAIN FOR ENQ PARAMETER LIST*/
         BAL   @14,GETCORE                                         0535
*   MWAENQFG=ON;                    /* INDICATE ENQ PARAMETER LIST 0536
*                                      BUILT                         */
         OI    MWAENQFG,B'10000000'                                0536
*   MWAENQPT=MWADDRES;              /* ADDRESSABILITY FOR ENQ PARM 0537
*                                      LIST                          */
         L     @11,MWADDRES                                        0537
         ST    @11,MWAENQPT                                        0537
*   MWARNPTR=MWADDRES+LENGTH(ENQPARML)+MWADSCNT*(LENGTH(ENQENTRY));/*
*                                      ADDRESSING FOR RNAME LIST     */
         AL    @11,@CF00143                                        0538
         L     MWARNPTR,MWADSCNT                                   0538
         MH    MWARNPTR,@CH00033                                   0538
         ALR   @11,MWARNPTR                                        0538
         LR    MWARNPTR,@11                                        0538
*   CALL ENQINIT;                   /* INITIALIZE ENQ PARAMETER LIST */
         BAL   @14,ENQINIT                                         0539
*   RESPECIFY                                                      0540
*     R1 RESTRICTED;                                               0540
*   R1=MWAENQPT+LENGTH(ENQTCB);     /* POINT TO ENQ PARAMETER LIST   */
         LA    R1,4                                                0541
         AL    R1,MWAENQPT                                         0541
*   GEN(ENQ    MF=(E,(R1)));        /* ENQ ON DATA SET       @ZA10878*/
         ENQ    MF=(E,(R1))
*   RESPECIFY                                                      0543
*     RET RESTRICTED;                                              0543
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        0544
*   RESPECIFY                                                      0545
*    (R1,                                                          0545
*     RET) UNRESTRICTED;                                           0545
*   END ENQFUNC;                                                   0546
@EL00004 DS    0H                                                  0546
@EF00004 DS    0H                                                  0546
@ER00004 BR    @14                                                 0546
*ENQINIT:                                                          0547
*                                                                  0547
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-INITIALIZE ENQ PARAMETER LIST FOR ALL THE     */
*/*                    DATA SETS                                     */
*/*      01   INPUTS-  1. POINTER TO AMBL IN ACBAMBL                 */
*/*      01   OUTPUTS- 1. ENQ PARAMETER LIST INITIALIZED             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0547
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0547
ENQINIT  DS    0H                                                  0548
*   RESPECIFY                                                      0548
*     RET RESTRICTED;                                              0548
*   MWASAVEC=RET;                   /* SAVE CALLER RETURN ADDRESS    */
         ST    RET,MWASAVEC                                        0549
*   RESPECIFY                                                      0550
*     RET UNRESTRICTED;                                            0550
*   MWAEQIDX=ONE;                   /* INDEX FOR ENQ PARAMETER LIST  */
         LA    MWAEQIDX,1                                          0551
*   IF CLWPATH=ON THEN              /* IF PATH PROCESSING            */
         TM    CLWPATH(RCORE),B'00010000'                          0552
         BNO   @RF00552                                            0552
*     DO;                           /* INITIALIZE PATH CI'S IN ENQ 0553
*                                      PARAMETER LIST                */
*       MWAAMBPT=AMBLDTA;           /* POINT TO DATA AMB OF PATH AMBL*/
         L     @11,MWAMBLPT                                        0554
         L     @11,AMBLDTA(,@11)                                   0554
         ST    @11,MWAAMBPT                                        0554
*       CALL PARMINIT;              /* INITIALIZE RNAME OF DATA DS IN
*                                      ENQ PARAMETER LIST            */
         BAL   @14,PARMINIT                                        0555
*       MWAAMBPT=AMBLIX;            /* POINT TO INDEX AMB OF PATH  0556
*                                      AMBL                          */
         L     @11,MWAMBLPT                                        0556
         L     @11,AMBLIX(,@11)                                    0556
         ST    @11,MWAAMBPT                                        0556
*       CALL PARMINIT;              /* INITIALIZE RNAME OF INDEX DS
*                                      IN ENQ PARAMETER LIST         */
         BAL   @14,PARMINIT                                        0557
*       MWAMBLPT=AMBLXPT;           /* POINT TO BASE AMBL            */
         L     @11,MWAMBLPT                                        0558
         L     @11,AMBLXPT(,@11)                                   0558
         ST    @11,MWAMBLPT                                        0558
*     END;                                                         0559
*   IF AMBLIX^=ZERO THEN            /* IF BASE INDEX DS EXIST (KSDS) */
@RF00552 L     @11,MWAMBLPT                                        0560
         L     @11,AMBLIX(,@11)                                    0560
         LTR   @11,@11                                             0560
         BZ    @RF00560                                            0560
*     DO;                                                          0561
*       MWAAMBPT=AMBLIX;            /* POINT TO INDEX AMB OF BASE  0562
*                                      AMBL                          */
         ST    @11,MWAAMBPT                                        0562
*       CALL PARMINIT;              /* INIT RNAME IN ENQ PARM LIST   */
         BAL   @14,PARMINIT                                        0563
*     END;                                                         0564
*   MWAAMBPT=AMBLDTA;               /* POINT TO DATA AMB OF BASE AMBL*/
@RF00560 L     @11,MWAMBLPT                                        0565
         L     @11,AMBLDTA(,@11)                                   0565
         ST    @11,MWAAMBPT                                        0565
*   CALL PARMINIT;                  /* PERFORM RNAME INITIALIZATION  */
         BAL   @14,PARMINIT                                        0566
*   IF BIBUPT^=ZERO THEN            /* UPT EXIST                     */
         L     @11,MWAMBLPT                                        0567
         L     @11,AMBLBIB(,@11)                                   0567
         L     @11,BIBUPT(,@11)                                    0567
         LTR   @11,@11                                             0567
         BZ    @RF00567                                            0567
*     DO MWAINDEX=1 TO UPTNOENT BY 1;/* LOOP THRUGH UPT              */
         LA    @11,1                                               0568
         ST    @11,MWAINDEX                                        0568
         B     @DE00568                                            0568
@DL00568 DS    0H                                                  0569
*       IF UPTF1NOP(MWAINDEX)=OFF THEN/* IF ENTRY IS VALID           */
         MH    @11,@CH00033                                        0569
         L     @07,MWAMBLPT                                        0569
         L     @07,AMBLBIB(,@07)                                   0569
         L     @07,BIBUPT(,@07)                                    0569
         ST    @11,@TF00001                                        0569
         ALR   @11,@07                                             0569
         TM    UPTF1NOP-12(@11),B'00010000'                        0569
         BNZ   @RF00569                                            0569
*         DO;                                                      0570
*           MWAMBLPT=UPTRPL(MWAINDEX)->RPLDACB->ACBAMBL;/* U-RPL TO
*                                      U-ACB TO U-AMBL               */
         L     @11,@TF00001                                        0571
         L     @11,UPTRPL-12(@11,@07)                              0571
         L     @11,RPLDACB(,@11)                                   0571
         L     @11,ACBAMBL(,@11)                                   0571
         ST    @11,MWAMBLPT                                        0571
*           IF MWAPAMBL=ZERO×       /* IF PATH AMBL DOES NOT EXIST OR*/
*               AMBLDTA^=MWAPAMBL->AMBLDTA THEN/* NOT PATH THROUGH 0572
*                                      UPGRADE                       */
         LTR   MWAPAMBL,MWAPAMBL                                   0572
         BZ    @RT00572                                            0572
         CLC   AMBLDTA(4,@11),AMBLDTA(MWAPAMBL)                    0572
         BE    @RF00572                                            0572
@RT00572 DS    0H                                                  0573
*             DO;                                                  0573
*               MWAAMBPT=AMBLIX;    /* GET INDEX AMB OF UPGRADE DS   */
         L     @11,MWAMBLPT                                        0574
         L     @11,AMBLIX(,@11)                                    0574
         ST    @11,MWAAMBPT                                        0574
*               CALL PARMINIT;      /* INITIALIZE ENQ RNAME          */
         BAL   @14,PARMINIT                                        0575
*               MWAAMBPT=AMBLDTA;   /* GET DATA AMB OF UPGRADE DS    */
         L     @11,MWAMBLPT                                        0576
         L     @11,AMBLDTA(,@11)                                   0576
         ST    @11,MWAAMBPT                                        0576
*               CALL PARMINIT;      /* INITIALIZE ENQ RNAME          */
         BAL   @14,PARMINIT                                        0577
*             END;                                                 0578
*         END;                                                     0579
@RF00572 DS    0H                                                  0580
*     END;                                                         0580
@RF00569 LA    @11,1                                               0580
         AL    @11,MWAINDEX                                        0580
         ST    @11,MWAINDEX                                        0580
@DE00568 L     @07,MWAMBLPT                                        0580
         L     @07,AMBLBIB(,@07)                                   0580
         L     @07,BIBUPT(,@07)                                    0580
         SLR   @15,@15                                             0580
         IC    @15,UPTNOENT(,@07)                                  0580
         CR    @11,@15                                             0580
         BNH   @DL00568                                            0580
*   ENQEND(MWAEQIDX-ONE)=ON;        /* INDICATE LAST ENTRY IN ENQ  0581
*                                      LIST                          */
@RF00567 LR    @15,MWAEQIDX                                        0581
         MH    @15,@CH00033                                        0581
         L     @01,MWAENQPT                                        0581
         ALR   @01,@15                                             0581
         AL    @01,@CF05496                                        0581
         OI    ENQEND-4(@01),B'10000000'                           0581
*   RESPECIFY                                                      0582
*     RET RESTRICTED;                                              0582
*   RET=MWASAVEC;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEC                                        0583
*   RESPECIFY                                                      0584
*     RET UNRESTRICTED;                                            0584
*   END ENQINIT;                                                   0585
@EL00005 DS    0H                                                  0585
@EF00005 DS    0H                                                  0585
@ER00005 BR    @14                                                 0585
*PARMINIT:                                                         0586
*                                                                  0586
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-INITIALIZE RNAME LIST FOR EACH AMB            */
*/*      01   INPUTS-  1. POINTER TO AMB IN MWAAMBPT                 */
*/*      01   OUTPUTS- 1. RNAME LIST IS INITIALIZED                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0586
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0586
PARMINIT DS    0H                                                  0587
*   RESPECIFY                                                      0587
*     RET RESTRICTED;                                              0587
*   MWASAVED=RET;                   /* SAVE CALLER RETURN ADDR       */
         ST    RET,MWASAVED                                        0588
*   RESPECIFY                                                      0589
*     RET UNRESTRICTED;                                            0589
*   ENQRNCI(MWAEQIDX)=AMBDDSN;      /* PUT CI NUMBER INTO RNAME      */
         LR    @11,MWAEQIDX                                        0590
         SLA   @11,3                                               0590
         ST    @11,@TF00001                                        0590
         ALR   @11,MWARNPTR                                        0590
         AL    @11,@CF05495                                        0590
         L     @15,MWAAMBPT                                        0590
         MVC   ENQRNCI(3,@11),AMBDDSN(@15)                         0590
*   ENQRNACB(MWAEQIDX)=AMBCACB;     /* PUT ACB ADDRESS INTO RNAME    */
         L     @11,AMBCACB(,@15)                                   0591
         LR    @01,MWARNPTR                                        0591
         AL    @01,@TF00001                                        0591
         AL    @01,@CF05497                                        0591
         STCM  @11,15,ENQRNACB-3(@01)                              0591
*   ENQRNIND(MWAEQIDX)='B';         /* SET RNAME INDICATOR BYTE      */
         LR    @11,MWARNPTR                                        0592
         AL    @11,@TF00001                                        0592
         BCTR  @11,0                                               0592
         MVI   ENQRNIND-7(@11),C'B'                                0592
*   ENQRNADR(MWAEQIDX)=ADDR(ENQRNAME(MWAEQIDX));/* ADDR OF RNAME     */
         L     @11,MWAENQPT                                        0593
         LR    @15,MWAEQIDX                                        0593
         MH    @15,@CH00033                                        0593
         L     @01,@TF00001                                        0593
         AL    @01,@CF05495                                        0593
         LA    @14,ENQRNAME(@01,MWARNPTR)                          0593
         ST    @14,ENQRNADR-12(@15,@11)                            0593
*   ENQQNADR(MWAEQIDX)=ADDR(MWAQNAME);/* GET QNAME ADDRESS           */
         LA    @14,MWAQNAME                                        0594
         LA    @01,0(@15,@11)                                      0594
         AL    @01,@CF05478                                        0594
         ST    @14,ENQQNADR-8(,@01)                                0594
*   ENQRLEN(MWAEQIDX)=LENGTH(ENQRNAME(MWAEQIDX));/* GET RNAME LENGTH */
         LA    @14,8                                               0595
         LA    @01,0(@15,@11)                                      0595
         AL    @01,@CF05498                                        0595
         STC   @14,ENQRLEN-5(,@01)                                 0595
*   ENQSHARE(MWAEQIDX)=OFF;         /* SET EXCLUSIVE         @ZA10878*/
*   ENQSYSTM(MWAEQIDX)=ON;          /* SET SYSTEM            @ZA10878*/
         ALR   @11,@15                                             0597
         AL    @11,@CF05499                                        0597
         OI    ENQSYSTM-6(@11),B'01000000'                         0597
         NI    ENQSHARE-6(@11),B'01111111'                         0597
*   MWAENQLP=MWAEQIDX-1;            /* INIT LOOP CNTL        @ZA10264*/
         LR    MWAENQLP,MWAEQIDX                                   0598
         BCTR  MWAENQLP,0                                          0598
*   DO MWAENQLP=MWAENQLP TO 1 BY-1  /* CHECK ALL ENTRIES     @ZA10264*/
*         WHILE ENQRNAME(MWAENQLP)^=ENQRNAME(MWAEQIDX);/* FOR DUPS   */
         B     @DE00599                                            0599
@DL00599 LR    @11,MWAENQLP                                        0599
         SLA   @11,3                                               0599
         LR    @15,MWAEQIDX                                        0599
         SLA   @15,3                                               0599
         ALR   @11,MWARNPTR                                        0599
         AL    @11,@CF05495                                        0599
         ALR   @15,MWARNPTR                                        0599
         AL    @15,@CF05495                                        0599
         CLC   ENQRNAME(8,@11),ENQRNAME(@15)                       0599
         BE    @DC00599                                            0599
*   END;                            /*                       @ZA10264*/
         BCTR  MWAENQLP,0                                          0600
@DE00599 LTR   MWAENQLP,MWAENQLP                                   0600
         BP    @DL00599                                            0600
@DC00599 DS    0H                                                  0601
*   IF MWAENQLP=0 THEN              /* IF NO DUPLICATES      @ZA10264*/
         LTR   MWAENQLP,MWAENQLP                                   0601
         BNZ   @RF00601                                            0601
*     MWAEQIDX=MWAEQIDX+ONE;        /* PREPARE FOR NEXT ENTRY        */
         AL    MWAEQIDX,@CF00080                                   0602
*   ELSE                                                           0603
*     ;                             /*                       @ZA10264*/
@RF00601 DS    0H                                                  0604
*   RESPECIFY                                                      0604
*     RET RESTRICTED;                                              0604
*   RET=MWASAVED;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVED                                        0605
*   RESPECIFY                                                      0606
*     RET UNRESTRICTED;                                            0606
*   END PARMINIT;                                                  0607
@EL00006 DS    0H                                                  0607
@EF00006 DS    0H                                                  0607
@ER00006 BR    @14                                                 0607
*FLQUIS:                                                           0608
*                                                                  0608
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-BUFFER FLUSH AND QUIESCE                      */
*/*      01   INPUTS-  1. INVOKED FOR ALL DATA SETS EXCEPT FOR DUMMY */
*/*                       DATA SET                                   */
*/*      01   OUTPUTS- 1. FLUSH BUFFERS PERFORMED                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0608
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0608
FLQUIS   DS    0H                                                  0609
*   RESPECIFY                                                      0609
*    (R1,                                                          0609
*     RET) RESTRICTED;                                             0609
*   MWASAVEA=RET;                   /* GET CALLER RETURN ADDRESS     */
         ST    RET,MWASAVEA                                        0610
*   RESPECIFY                                                      0611
*     RET UNRESTRICTED;                                            0611
*   PDPFUNC=PDF103;                 /* SET PD FUNCTION CODE          */
         L     @05,MWACORAD                                        0612
         MVI   PDPFUNC+280(@05),X'67'                              0612
*   MWARETCD=ZERO;                  /* INITIALIZE RETURN CODE TO ZERO*/
         SLR   @05,@05                                             0613
         ST    @05,MWARETCD                                        0613
*   MWAAMBPT=AMBLDTA;               /* POINT TO DATA AMB             */
         L     @05,MWAMBLPT                                        0614
         L     @05,AMBLDTA(,@05)                                   0614
         ST    @05,MWAAMBPT                                        0614
*   CALL ENDIO;                     /* FINISH I/O OPERATION          */
         BAL   @14,ENDIO                                           0615
*   IF AMBTRACE^=ZERO THEN          /* IF IDATRACE ACTIVE THEN     0616
*                                                            @ZA29388*/
         L     @05,MWAAMBPT                                        0616
         L     @05,AMBTRACE(,@05)                                  0616
         LTR   @05,@05                                             0616
         BZ    @RF00616                                            0616
*     DO;                           /* PERFORM IDATRACE TERMINATION
*                                      PROCESSING            @ZA29388*/
*       RESPECIFY                                                  0618
*         R10 RESTRICTED;           /*                       @ZA29388*/
*       R10=RBASEA;                 /* SAVE BASE REG         @ZA29388*/
         LR    R10,RBASEA                                          0619
*       GEN(DROP RBASEA);           /* ESTABLISH NEW BASE REG      0620
*                                                            @ZA29388*/
         DROP RBASEA
*       GEN(USING @PSTART,R10);     /*                       @ZA29388*/
         USING @PSTART,R10
*       RBASEA=AMBLDTA;             /* GET DATA AMB          @ZA29388*/
         L     @11,MWAMBLPT                                        0622
         L     RBASEA,AMBLDTA(,@11)                                0622
*       RESPECIFY                                                  0623
*         IDAAMB BASED(RBASEA);     /*                       @ZA29388*/
*       RESPECIFY                                                  0624
*         IDATRACE BASED(AMBTRACE); /*                       @ZA29388*/
*       CALL IDA019ST;              /* CALL IDATRACE         @ZA29388*/
         L     @11,AMBTRACE(,RBASEA)                               0625
         L     @15,TRAENTRY(,@11)                                  0625
         BALR  @14,@15                                             0625
*       GEN(DC X'0000');            /* INDICATE CLOSE IS CALLER    0626
*                                                            @ZA29388*/
         DC X'0000'
*       RESPECIFY                                                  0627
*         IDAAMB BASED(MWAAMBPT);   /*                       @ZA29388*/
*       RBASEA=R10;                 /* RESTORE BASE REG      @ZA29388*/
         LR    RBASEA,R10                                          0628
*       GEN(DROP R10);              /* REESTABLISH BASE REG  @ZA29388*/
         DROP R10
*       GEN(USING @PSTART,RBASEA);  /*                       @ZA29388*/
         USING @PSTART,RBASEA
*     END;                          /* END TRACE PROCESSING  @ZA29388*/
*   IF MWARETCD^=ZERO THEN          /* IF ENDIO ENCOUNTERED ERROR    */
@RF00616 L     @11,MWARETCD                                        0632
         LTR   @11,@11                                             0632
         BZ    @RF00632                                            0632
*     DO;                                                          0633
*       CLWCNOUP=ON;                /* INDICATE NO CATALOG UPDATE    */
         OI    CLWCNOUP(RCORE),B'01000000'                         0634
*       PDPCODE=PP22;               /* SET PROBLEM CODE              */
         L     @11,MWACORAD                                        0635
         MVI   PDPCODE+280(@11),X'16'                              0635
*       ACBERFLG=OPERR184;          /* SET USER ACB ERROR FLAG       */
         MVI   ACBERFLG(RACB),X'B8'                                0636
*       R1=MWACORAD;                /* GET ADDRESS OF COMMON WORK  0637
*                                      AREA                          */
         LR    R1,@11                                              0637
*       RSTATRTN=IDAR192P;          /* NOTE CONTROL PASSED TO 2P.  0638
*                                                            @Y30DSMD*/
         MVC   RSTATRTN(4,@11),@CC04071                            0638
*       CALL IDA0192P;              /* CALL PROBLEM DETERMINATION    */
         L     @15,@CV05327                                        0639
         BALR  @14,@15                                             0639
*       RSTATRTN=IDAR200T;          /* NOTE THIS CSECT BACK IN     0640
*                                      CONTROL.                      */
         L     @11,MWACORAD                                        0640
         MVC   RSTATRTN(4,@11),@CC04085                            0640
*     END;                                                         0641
*   ELSE                            /* IF NO ERROR IN ENDIO          */
*     IF AMBLSR=ON&CLWSPHCL=OFF THEN/* IF LSR AND NOT CLOSE SPHERE   */
         B     @RC00632                                            0642
@RF00632 L     @11,MWAAMBPT                                        0642
         TM    AMBLSR(@11),B'01000000'                             0642
         BNO   @RF00642                                            0642
         TM    CLWSPHCL(RCORE),B'00001000'                         0642
         BNZ   @RF00642                                            0642
*       CLWCNOUP=ON;                /* INDICATE NO CATALOG UPDATE    */
         OI    CLWCNOUP(RCORE),B'01000000'                         0643
*   IF AMBLCAT=ON THEN              /* IF CATALOG OR SCRA            */
@RF00642 DS    0H                                                  0644
@RC00632 L     @11,MWAMBLPT                                        0644
         TM    AMBLCAT(@11),B'00000010'                            0644
         BNO   @RF00644                                            0644
*     AMBCREAT=OFF;                 /* RESET AMB CREATE BIT          */
         L     @11,MWAAMBPT                                        0645
         NI    AMBCREAT(@11),B'01111111'                           0645
*   RESPECIFY                                                      0646
*     RET RESTRICTED;                                              0646
@RF00644 DS    0H                                                  0647
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        0647
*   RESPECIFY                                                      0648
*    (R1,                                                          0648
*     RET) UNRESTRICTED;                                           0648
*   END FLQUIS;                                                    0649
@EL00007 DS    0H                                                  0649
@EF00007 DS    0H                                                  0649
@ER00007 BR    @14                                                 0649
*ENDIO:                                                            0650
*                                                                  0650
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-WRITE OUT ANY OUTPUT BUFFERS TO STORAGE       */
*/*                    THAT HAVEN'T BEEN WRITTEN AND WAIT FOR        */
*/*                    COMPLETION OF ANY ASYNCHRONOUS REQUESTS THAT  */
*/*                    THE USER DIDN'T CHECK BEFORE CLOSING          */
*/*      01   INPUTS-  1. KEY LENGTH FROM AMDSB                      */
*/*                    2. NUMBER OF PLH'S FROM PLHDR                 */
*/*                    3. POINTER TO DATA AMB IN MWAAMBPT            */
*/*      01   OUTPUTS- 1. BUFFERS FLUSHED AND QUIESED                */
*/*      IN VS2, IF THE DATA SET IS GSR OR CBIC, THE         @ZA16012*/
*/*      DUMMY RPL AND SAVE AREA ARE OBTAINED IN SUBPOOL     @ZA16012*/
*/*      241 (GSR OR CBIC KEY). FOR GSR, A CONCURRENT        @ZA16012*/
*/*      CLOSE MAY BE RUNNING IN ANOTHER MEMORY WHICH ALSO   @Z40ESSR*/
*/*      REFERENCES THE POOL. BECAUSE ENDIO LOGIC SCANS ALL  @Z40ESSR*/
*/*      THE POOL PLH'S, ANY RPL'S IN USE BY GSR MUST BE IN  @Z40ESSR*/
*/*      GLOBAL STORAGE(SUBPOOL 241).                        @Z40ESSR*/
*/*                                                                  */
*/********************************************************************/
*                                                                  0650
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0650
ENDIO    DS    0H                                                  0651
*   RESPECIFY                                                      0651
*     RET RESTRICTED;                                              0651
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        0652
*   RESPECIFY                                                      0653
*     RET UNRESTRICTED;                                            0653
*   MWABYTES=((LENGTH(IFGRPL)+(FWORDLEN-ONE))&(-FWORDLEN))+LENGTH( 0654
*       MWAFLQSA);                  /* BUILD DUMMY RPL AND REGISTER
*                                      SAVE AREA                     */
         MVC   MWABYTES(3),@CF04879+1                              0654
*   IF AMBLGSR=ON×AMBLCBIC=ON THEN  /* IS THIS GSR OR CBIC   @ZA16012*/
         L     @11,MWAMBLPT                                        0655
         TM    AMBLGSR(@11),B'01000000'                            0655
         BO    @RT00655                                            0655
         TM    AMBLCBIC(@11),B'10000000'                           0655
         BNO   @RF00655                                            0655
@RT00655 DS    0H                                                  0656
*     DO;                           /* PROCESS GSR/CBIC WITH GSR   0656
*                                      SUBPOOLS              @ZA16012*/
*       MWAFRKEY=DXUKEY;            /* SET STORAGE TO GSR/CBIC KEY 0657
*                                                            @ZA16012*/
         L     @11,MWACORAD                                        0657
         MVC   MWAFRKEY(1),DXUKEY(@11)                             0657
*       MWASPOOL=GSRSPOOL;          /* USE A GSR/CBIC SUBPOOL      0658
*                                                            @ZA16012*/
         MVI   MWASPOOL,X'F1'                                      0658
*     END;                          /* END OF SPECIAL GSR/CBIC     0659
*                                      PROCESSING            @ZA16012*/
*   ELSE                            /* OTHERWISE USE KEY ZERO AND  0660
*                                      USERPOOL.             @Z30SSMD*/
*     MWASPOOL=USERPOOL;            /* UNPROTECTED SUBPOOL NUMBER FOR
*                                      PROBLEM PROGRAM STATE         */
         B     @RC00655                                            0660
@RF00655 MVI   MWASPOOL,X'FA'                                      0660
*   CALL GETCORE;                   /* BUILD DUMMY RPL               */
@RC00655 BAL   @14,GETCORE                                         0661
*   MWARPLPT=MWADDRES;              /* ADDR OF GOTTEN CORE IN      0662
*                                      MWARPLPT                      */
*                                                                  0662
         L     @11,MWADDRES                                        0662
         ST    @11,MWARPLPT                                        0662
*   /*****************************************************************/
*   /*                                                               */
*   /* BEFORE CALLING RECORD MANAGEMENT POINT THE DUMMY DEB AND THE  */
*   /* AMBL TO THE USER ACB. THOSE TWO BLOCKS WERE CHANGED TO POINT  */
*   /* TO THE COPY ACB UPON ENTRY TO 200T.                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0663
*   RACB=DXUACBAD;                  /* GET THE POINTER TO USER ACB.
*                                                            @Y30DSMD*/
         L     @05,MWACORAD                                        0663
         L     RACB,DXUACBAD-1(,@05)                               0663
         LA    RACB,0(,RACB)                                       0663
*   ACBDEB->DEBDCBB=RACB;           /* POINT DUMMY DEB TO USER ACB.
*                                                            @Y30DSMD*/
         L     @05,ACBDEB-1(,RACB)                                 0664
         STCM  RACB,7,DEBDCBB(@05)                                 0664
*   AMBLACB=RACB;                   /* POINT THE AMBL TO THE USER  0665
*                                      ACB.                  @Y30DSMD*/
         L     @05,MWAMBLPT                                        0665
         ST    RACB,AMBLACB(,@05)                                  0665
*   RPLDACB=RACB;                   /* POINT TO USER ACB             */
         ST    RACB,RPLDACB(,@11)                                  0666
*   RPLPOST=ON;                     /* TURN RPL POST ON              */
         OI    RPLPOST(@11),B'01000000'                            0667
*   MWAPLHPT=ADDR(IDAPLHDR)+LENGTH(IDAPLHDR);/* PT TO 1ST PLH ENTRY  */
         LA    @11,16                                              0668
         L     @05,MWAAMBPT                                        0668
         AL    @11,AMBPH(,@05)                                     0668
         ST    @11,MWAPLHPT                                        0668
*   DO MWAINDEX=1 TO PLHCNT WHILE MWARETCD=ZERO;/* LOOP THRU PLH'S   */
         LA    @11,1                                               0669
         B     @DE00669                                            0669
@DL00669 L     @11,MWARETCD                                        0669
         LTR   @11,@11                                             0669
         BNZ   @DC00669                                            0669
*     IF PLHAVL^='00'X&             /* IF PLH IS NOT A FREE PLH AND  */
*         PLHACB=ADDR(IFGACB) THEN  /* IF ACBS MATCH         @ZA14829*/
         L     @11,MWAPLHPT                                        0670
         CLI   PLHAVL(@11),X'00'                                   0670
         BE    @RF00670                                            0670
         C     RACB,PLHACB(,@11)                                   0670
         BNE   @RF00670                                            0670
*       DO;                         /* PROCESS THE PLH ENTRY USING 0671
*                                      THE DUMMY RPL.        @Z30SSMD*/
*         PLHMRPL=MWARPLPT;         /* POINT PLH TO RPL              */
         L     @05,MWARPLPT                                        0672
         ST    @05,PLHMRPL(,@11)                                   0672
*         PLHCRPL=MWARPLPT;         /* INIT CURRENT RPL PTR IN PLH   */
         ST    @05,PLHCRPL(,@11)                                   0673
*         RPLPLHPT=MWAPLHPT;        /* POINT RPL TO PLH ENTRY        */
         ST    @11,RPLPLHPT(,@05)                                  0674
*         STM(RACB,R13,XRBESA);     /* SAVE REGISTERS                */
         L     @11,CVTPTR                                          0675
         L     @11,CVTTCBP(,@11)                                   0675
         L     @11,TCBPTR(,@11)                                    0675
         L     @11,TCBRBP(,@11)                                    0675
         STM   RACB,R13,XRBESA(@11)                                0675
*         RESPECIFY                                                0676
*          (R0,                                                    0676
*           R1,                                                    0676
*           R6) RESTRICTED;                                        0676
*         R1=MWARPLPT;              /* POINT TO DUMMY RPL            */
         LR    R1,@05                                              0677
*         R0=RPLENDRE;              /* INDICATE ENDREQ               */
         LA    R0,4                                                0678
*         R6=R13;                   /* COPY MODULE WORK AREA POINTER */
         LR    R6,R13                                              0679
*         GEN(DROP R13);                                           0680
         DROP R13
*         GEN(USING @DATD,R6);      /* USE R6 FOR A DATA REGISTER    */
         USING @DATD,R6
*         R13=(R1+LENGTH(IFGRPL)+(FWORDLEN-ONE))&(-FWORDLEN);/* POINT
*                                      TO SAVE AREA ON FULL WORD BDY */
         LA    R13,79                                              0682
         ALR   R13,R1                                              0682
         N     R13,@CF05478                                        0682
*         RESPECIFY                                                0683
*           R15 RESTRICTED;                                        0683
*         R15=BIBINTRF;             /* GET ADDRESS OF INTERFACE    0684
*                                      ROUTINE                       */
         L     @11,MWAMBLPT                                        0684
         L     @07,AMBLBIB(,@11)                                   0684
         L     R15,BIBINTRF(,@07)                                  0684
*         RESPECIFY                                                0685
*           R7 RESTRICTED;                                         0685
*         R7=ADDR(RBGRS2);          /* POINT TO USER REGISTER SAVE 0686
*                                      AREA                          */
         L     @14,CVTPTR                                          0686
         L     @14,CVTTCBP(,@14)                                   0686
         L     @14,TCBPTR(,@14)                                    0686
         L     R7,TCBRBP(,@14)                                     0686
         LA    R7,RBGRS2(,R7)                                      0686
*         IF AMBLCAT=ON×((DXUKEY<K80)&(AMBLGSR=OFF)&AMBLCBIC=OFF) THEN
*                                                                  0687
         TM    AMBLCAT(@11),B'00000010'                            0687
         BO    @RT00687                                            0687
         L     @14,MWACORAD                                        0687
         CLI   DXUKEY(@14),X'80'                                   0687
         BNL   @RF00687                                            0687
         TM    AMBLGSR(@11),B'01000000'                            0687
         BNZ   @RF00687                                            0687
         TM    AMBLCBIC(@11),B'10000000'                           0687
         BNZ   @RF00687                                            0687
@RT00687 DS    0H                                                  0688
*           /*********************************************************/
*           /*                                                       */
*           /* IF SPEC D/S OR KEY 0 TO 7 BUT NOT GSR OR CBIC @ZA16012*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0688
*           DO;                     /* RETAIN THE SUPERVISOR STATE 0688
*                                      BIT.                  @Z30SSMD*/
*             GEN(LM RACB,R12,0(R7));/* RESTORE USER'S REGISTERS     */
         LM RACB,R12,0(R7)
*             GEN(BALR RET,R15);    /* STAY IN SUPERVISOR STATE      */
         BALR RET,R15
*             GEN(MODESET EXTKEY=ZERO);/* RETURN TO KEY ZERO.        */
         MODESET EXTKEY=ZERO
*             GEN(DROP RBASEA);     /* DROP PERMANENT BASE           */
         DROP RBASEA
*             GEN(BALR RET,0);      /* ESTABLISH ADDRESSABILITY    0693
*                                                            @ZA07195*/
         BALR RET,0
*             GEN(USING *,RET);     /* SET UP TEMPORARY BASE         */
         USING *,RET
*           END;                    /* END OF CATALOG PROCESSING.  0695
*                                                            @Y30DSMD*/
*         ELSE                      /* IF NOT CAT THEN CHECK @Y30DSMD*/
*           DO;                     /* PROCESS NON-CTLG.     @Z30SSMD*/
         B     @RC00687                                            0696
@RF00687 DS    0H                                                  0697
*             GEN(DROP RET);        /* DROP TEMPORORY BASE   @Z30SSMD*/
         DROP RET
*             GEN(USING @PSTART,RBASEA);/* RE-ESTABLISH BASE REG   0698
*                                                            @Z30SSMD*/
         USING @PSTART,RBASEA
*             IF AMBLGSR=ON×AMBLCBIC=ON THEN/* IF GSR OR CBIC      0699
*                                                            @ZA16012*/
         L     @14,MWAMBLPT                                        0699
         TM    AMBLGSR(@14),B'01000000'                            0699
         BO    @RT00699                                            0699
         TM    AMBLCBIC(@14),B'10000000'                           0699
         BNO   @RF00699                                            0699
@RT00699 DS    0H                                                  0700
*               DO;                 /* PROCESS GSR/CBIC DATA SET   0700
*                                                            @ZA16012*/
*                 RFY                                              0701
*                   RET RSTD;       /*                       @Z40ESSR*/
*                 RET=DXUKEY;       /* LOAD GSR/CBIC USER KEY INTO 0702
*                                      REG                   @ZA16012*/
         L     @11,MWACORAD                                        0702
         SLR   RET,RET                                             0702
         IC    RET,DXUKEY(,@11)                                    0702
*                 SPKA(RET);        /* MODESET TO GSR/CBIC USER KEY
*                                                            @ZA16012*/
         SPKA  0(RET)                                              0703
*                 RFY                                              0704
*                   RET UNRSTD;     /*                       @Z40ESSR*/
*                 GEN(LM RACB,R12,0(R7));/* RESTORE USER'S REGS    0705
*                                                            @Z40ESSR*/
         LM RACB,R12,0(R7)
*                 GEN(BALR RET,R15);/* STAY IN SUPERVISOR STATE    0706
*                                                            @Y30DSMD*/
         BALR RET,R15
*                 GEN( MODESET EXTKEY=ZERO);/* FORCE KEY ZERO.     0707
*                                                            @Y30DSMD*/
          MODESET EXTKEY=ZERO
*                 GEN(DROP RBASEA); /* DROP PERMANENT BASE   @Y30DSMD*/
         DROP RBASEA
*                 GEN(BALR RET,0);  /* ESTABLISH ADDRESSABILITY    0709
*                                                            @ZA07195*/
         BALR RET,0
*                 GEN(USING *,RET); /* SET UP TEMPORARY BASE @Y30DSMD*/
         USING *,RET
*               END;                /* END OF GSR/CBIC PROCESSING  0711
*                                                            @ZA16012*/
*             ELSE                  /* IF NOT GSR OR CBIC    @ZA16012*/
*               DO;                 /* PROCESS AS A NORMAL DATA SET.
*                                                            @Y30DSMD*/
         B     @RC00699                                            0712
@RF00699 DS    0H                                                  0713
*                 GEN(DROP RET);    /* DROP TEMPORORY BASE           */
         DROP RET
*                 GEN(USING @PSTART,RBASEA);/* RE-ESTABLISH BASE REG */
         USING @PSTART,RBASEA
*                 GEN(LM RACB,R12,0(R7));/* RESTORE USER'S REGISTERS */
         LM RACB,R12,0(R7)
*                 GEN(SYNCH (15));  /* CHANGE TO PROBLEM PROGRAM   0716
*                                      STATE                         */
         SYNCH (15)
*               END;                /* END OF PROBLEN STATE PROCESS.
*                                                            @Z30SSMD*/
*           END;                    /* END OF NON-CTLG DO GROUP.   0718
*                                                            @Z30SSMD*/
@RC00699 DS    0H                                                  0719
*         LM(RACB,R13,XRBESA);      /* RESTORE REGISTERS             */
*                                                                  0719
@RC00687 L     @14,CVTPTR                                          0719
         L     @14,CVTTCBP(,@14)                                   0719
         L     @14,TCBPTR(,@14)                                    0719
         L     @14,TCBRBP(,@14)                                    0719
         LM    RACB,R13,XRBESA(@14)                                0719
*         /***********************************************************/
*         /*                                                         */
*         /* AT THIS POINT R13 AND THE BASE REG HAVE BEEN RESTORED.  */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0720
*         GEN(DROP R6);             /* DROP R6 AS A DATA REGISTER    */
         DROP R6
*         GEN(USING @DATD,R13);     /* USE R13 AS DATA REGISTER      */
         USING @DATD,R13
*         MWARETCD=RETCODE;         /* SET RETURN CODE               */
         ST    RETCODE,MWARETCD                                    0722
*         RESPECIFY                                                0723
*          (R0,                                                    0723
*           R1,                                                    0723
*           R6,                                                    0723
*           R7,                                                    0723
*           R15) UNRESTRICTED;                                     0723
*       END;                        /* END OF DO GROUP FOR THIS    0724
*                                      PLH/ACB ENTRY.        @Z30SSMD*/
*     MWAPLHPT=PLHCHAIN;            /* POINT TO NEXT PLH ENTRY       */
@RF00670 L     @11,MWAPLHPT                                        0725
         L     @11,PLHCHAIN(,@11)                                  0725
         ST    @11,MWAPLHPT                                        0725
*   END;                            /* END OF DO LOOP FOR ALL PLH  0726
*                                      ENTRIES.              @Z30SSMD*/
         LA    @11,1                                               0726
         AL    @11,MWAINDEX                                        0726
@DE00669 ST    @11,MWAINDEX                                        0726
         L     @05,MWAAMBPT                                        0726
         L     @05,AMBPH(,@05)                                     0726
         SLR   @15,@15                                             0726
         IC    @15,PLHCNT(,@05)                                    0726
         CR    @11,@15                                             0726
         BNH   @DL00669                                            0726
@DC00669 DS    0H                                                  0727
*   IF AMBLGSR=ON×AMBLCBIC=ON THEN  /* IF GSR OR CBIC        @ZA16012*/
         L     @11,MWAMBLPT                                        0727
         TM    AMBLGSR(@11),B'01000000'                            0727
         BO    @RT00727                                            0727
         TM    AMBLCBIC(@11),B'10000000'                           0727
         BNO   @RF00727                                            0727
@RT00727 DS    0H                                                  0728
*     DO;                           /* PROCESS FOR GSR/CBIC  @ZA16012*/
*       MWAFRKEY=DXUKEY;            /* SET STORAGE TO GSR/CBIC KEY 0729
*                                                            @ZA16012*/
         L     @11,MWACORAD                                        0729
         MVC   MWAFRKEY(1),DXUKEY(@11)                             0729
*       MWASPOOL=GSRSPOOL;          /* SET SUBPOOL TO GLOBAL.      0730
*                                                            @Z30SSMD*/
         MVI   MWASPOOL,X'F1'                                      0730
*     END;                          /* END OF SPECIAL PROCESSING FOR
*                                      GSR/CBIC              @ZA16012*/
*   CALL FREECORE;                  /* FREE DUMMY RPL                */
*                                                                  0732
@RF00727 BAL   @14,FREECORE                                        0732
*   /*****************************************************************/
*   /*                                                               */
*   /* NOW THAT CALL TO RECORD MANAGEMENT IS FINISHED,       @Y30DSMD*/
*   /* POINT THE AMBL AND THE DUMMY DEB BACK TO THE ACB COPY.        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0733
*   RACB=DXPACBAD;                  /* GET THE ACB COPY ADDRESS.   0733
*                                                            @Y30DSMD*/
         L     @11,MWACORAD                                        0733
         L     RACB,DXPACBAD-1(,@11)                               0733
         LA    RACB,0(,RACB)                                       0733
*   ACBDEB->DEBDCBB=RACB;           /* POINT DUMMY DEB TO ACB COPY.
*                                                            @Y30DSMD*/
         L     @11,ACBDEB-1(,RACB)                                 0734
         STCM  RACB,7,DEBDCBB(@11)                                 0734
*   AMBLACB=RACB;                   /* POINT AMBL TO ACB COPY.     0735
*                                                            @Y30DSMD*/
         L     @11,MWAMBLPT                                        0735
         ST    RACB,AMBLACB(,@11)                                  0735
*   RESPECIFY                                                      0736
*     RET RESTRICTED;                                              0736
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        0737
*   RESPECIFY                                                      0738
*     RET UNRESTRICTED;                                            0738
*   END ENDIO;                      /* END OF ENDIO PROCEDURE.     0739
*                                                            @Z30SSMD*/
@EL00008 DS    0H                                                  0739
@EF00008 DS    0H                                                  0739
@ER00008 BR    @14                                                 0739
*PGFRAMBL:                                                         0740
*                                                                  0740
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-PAGE FREE FIXED BASE AMBL                     */
*/*      01   INPUTS-  1. POINTER TO BASE AMBL IN MWABAMBL           */
*/*      01   OUTPUTS- 1. PAGE FREE PERFORMED                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0740
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0740
PGFRAMBL DS    0H                                                  0741
*   RESPECIFY                                                      0741
*     RET RESTRICTED;                                              0741
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0742
*   RESPECIFY                                                      0743
*     RET UNRESTRICTED;                                            0743
*   MWABYTES=DWORDLEN;              /* GET EIGHT BYTES FOR THE PFL   */
         MVC   MWABYTES(3),@CF00071+1                              0744
*   MWASPOOL=FIXDPOOL;              /* GETMAIN FROM FIXED CORE       */
         MVI   MWASPOOL,X'F5'                                      0745
*   CALL GETCORE;                   /* ISSUE GETMAIN FOR PFL         */
         BAL   @14,GETCORE                                         0746
*   RESPECIFY                                                      0747
*     PAGELIST BASED(MWADDRES);                                    0747
*   PFLBGAD(1)=MWABAMBL;            /* BEGINNING ADDR OF BASE AMBL   */
         L     @11,MWABAMBL                                        0748
         L     @05,MWADDRES                                        0748
         STCM  @11,7,PFLBGAD(@05)                                  0748
*   PFLENDAD(1)=MWABAMBL+LENGTH(IDAAMBL);/* END ADDR OF BASE AMBL    */
         AL    @11,@CF05095                                        0749
         STCM  @11,7,PFLENDAD(@05)                                 0749
*   PFLEND(1)=ON;                   /* INDICATE LAST ENTRYRY         */
         OI    PFLEND(@05),B'10000000'                             0750
*   RESPECIFY                                                      0751
*     R7 RESTRICTED;                                               0751
*   R7=ADDR(PAGELIST);              /* PFL ADDRESS                   */
         LR    R7,@05                                              0752
*   GEN(PGFREE L,LA=(R7));          /* PAGE FREE                     */
         PGFREE L,LA=(R7)
*   RESPECIFY                                                      0754
*     R7 UNRESTRICTED;                                             0754
*   CALL FREECORE;                  /* FREEMAIN PAGE FREE LIST       */
         BAL   @14,FREECORE                                        0755
*   RESPECIFY                                                      0756
*     RET RESTRICTED;                                              0756
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        0757
*   RESPECIFY                                                      0758
*     RET UNRESTRICTED;                                            0758
*   END PGFRAMBL;                                                  0759
@EL00009 DS    0H                                                  0759
@EF00009 DS    0H                                                  0759
@ER00009 BR    @14                                                 0759
*TERM200T:                                                         0760
*                                                                  0760
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-MODULE TERMINATION PROCESSING                 */
*/*                    DEQ THE ENQ'ED AMB'S                          */
*/*                    FREE ACB WORK AREA AND MODULE WORK AREA       */
*/*      01   INPUTS-  1. INDICATE IF MWA, CLW AND ENQ PARM LIST     */
*/*                       WAS BUILT OR NOT                           */
*/*      01   OUTPUTS- 1. FREE MWA, CLW AND ENQ LIST IF EXIST        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0760
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0760
TERM200T DS    0H                                                  0761
*   RESPECIFY                                                      0761
*    (R1,                                                          0761
*     RET) RESTRICTED;                                             0761
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0762
*   RESPECIFY                                                      0763
*     RET UNRESTRICTED;                                            0763
*   IF MWACBWK=ON THEN              /* ACB WORK AREA EXIST           */
         TM    MWACBWK,B'10000000'                                 0764
         BNO   @RF00764                                            0764
*     DO;                                                          0765
*       IF MWAENQFG=ON×CLWDUMMY=ON THEN/* ENQ/DEQ PARAMETER LIST   0766
*                                      EXIST OR DUMMY DATA SET       */
         TM    MWAENQFG,B'10000000'                                0766
         BO    @RT00766                                            0766
         TM    CLWDUMMY(RCORE),B'00000100'                         0766
         BNO   @RF00766                                            0766
@RT00766 DS    0H                                                  0767
*         DO;                                                      0767
*           MWADEBPT=ACBDEB;        /* LOAD POINTER TO DUMMY DEB     */
         L     MWADEBPT,ACBDEB-1(,RACB)                            0768
         LA    MWADEBPT,0(,MWADEBPT)                               0768
*           CALL DEHOOK;            /* DECHAIN DUMMY DEB AND FREEMAIN*/
         BAL   @14,DEHOOK                                          0769
*           IF(MWACAT=ON&ACBSDS=OFF)×/* (CATALOG & NOT SYSTEM DATA 0770
*                                      SET) OR               @Z40WSRL*/
*               MWAUCRA=ON THEN     /* SCRA OR UCRA                  */
         TM    MWACAT,B'10000000'                                  0770
         BNO   @GL00018                                            0770
         TM    ACBSDS(RACB),B'00000010'                            0770
         BZ    @RT00770                                            0770
@GL00018 TM    MWAUCRA,B'10000000'                                 0770
         BNO   @RF00770                                            0770
@RT00770 DS    0H                                                  0771
*             DO;                                                  0771
*               RESPECIFY                                          0772
*                 R5 RESTRICTED;                                   0772
*               MWACATID=DUM;       /* INDICATE DUMMY LOCATE         */
         MVI   MWACATID,X'1C'                                      0773
*               MWASFIPT=ADDR(CLWSFI);/* POINT TO SFI AREA IN CLW    */
         LA    @11,CLWSFI(,RCORE)                                  0774
         STCM  @11,7,MWASFIPT                                      0774
*               R1=ADDR(MWACATPM);  /* POINT TO CATALOG PARAMETER  0775
*                                      LIST                          */
         LA    R1,MWACATPM                                         0775
*               R5=ADDR(IDAAMB)-ADDR(AMBCACB)+ADDR(MWARACB);/*     0776
*                                      SIMULATE AMB FOR CATALOG      */
         LA    R5,MWARACB                                          0776
         AL    R5,@CF05479                                         0776
*               RSTATRTN=IDAR192C;  /* NOTE CONTROL GOING TO 2C.   0777
*                                                            @Y30DSMD*/
         L     @11,MWACORAD                                        0777
         MVC   RSTATRTN(4,@11),@CC04061                            0777
*               CALL IDA0192C;      /* ISSUE DUMMY LOCATE            */
         L     @15,@CV05373                                        0778
         BALR  @14,@15                                             0778
*               RSTATRTN=IDAR200T;  /* NOTE CONTROL PASSED BACK.   0779
*                                                            @Y30DSMD*/
         L     @11,MWACORAD                                        0779
         MVC   RSTATRTN(4,@11),@CC04085                            0779
*               RESPECIFY                                          0780
*                 R5 UNRESTRICTED;                                 0780
*             END;                                                 0781
*           IF MWAENQFG=ON THEN     /* ENQ WAS ISSUED                */
@RF00770 TM    MWAENQFG,B'10000000'                                0782
         BNO   @RF00782                                            0782
*             DO;                                                  0783
*               R1=MWAENQPT+LENGTH(ENQTCB);/* PT TO ENQ PARM LIST    */
         LA    R1,4                                                0784
         AL    R1,MWAENQPT                                         0784
*               GEN(DEQ   MF=(E,(R1)));/* DEQ DATA SET       @ZA10878*/
         DEQ   MF=(E,(R1))
*               MWADDRES=MWAENQPT;  /* GET ADDR OF ENQ/DEQ PARM LIST */
         L     @11,MWAENQPT                                        0786
         ST    @11,MWADDRES                                        0786
*               MWASPOOL=WKPOOL;    /* GET SUBPOOL NUMBER            */
         MVI   MWASPOOL,X'FC'                                      0787
*               MWABYTES=LENGTH(ENQTCB)+MWADSCNT*(LENGTH(ENQENTRY)+
*                   LENGTH(ENQRNAME));/* NUMBER OF BYTES TO BE FREED */
         L     @11,MWADSCNT                                        0788
         MH    @11,@CH00585                                        0788
         LA    @11,4(,@11)                                         0788
         STCM  @11,7,MWABYTES                                      0788
*               CALL FREECORE;      /* FREE ENQ/DEQ AND RNAME PARM 0789
*                                      LIST                          */
         BAL   @14,FREECORE                                        0789
*             END;                                                 0790
*           CALL RESTORE;           /* RESTORE USER ACB              */
@RF00782 BAL   @14,RESTORE                                         0791
*         END;                                                     0792
*       MWADDRES=RCORE;             /* GET ADDR OF ACB WORK AREA   0793
*                                      (CLW)                         */
@RF00766 ST    RCORE,MWADDRES                                      0793
*       MWABYTES=LENGTH(IDACLWRK);  /* BYTES IN ACB WORK AREA (CLW)  */
         MVC   MWABYTES(3),@CF04755+1                              0794
*       MWASPOOL=WKPOOL;            /* SUBPOOL NUMBER OF CLW         */
         MVI   MWASPOOL,X'FC'                                      0795
*       CALL FREECORE;              /* FREE ACB WORK AREA (CLW)      */
         BAL   @14,FREECORE                                        0796
*     END;                                                         0797
*   RESPECIFY                                                      0798
*    (R0,                                                          0798
*     R1) RESTRICTED;                                              0798
@RF00764 DS    0H                                                  0799
*   MWASPOOL=WKPOOL;                /* SUBPOOL NUMBER FOR MWA        */
         MVI   MWASPOOL,X'FC'                                      0799
*   GEN(L R1,@SIZDATD);             /* NUMBER OF MWA BYTES           */
         L R1,@SIZDATD
*   MWABYTES=R1;                    /* NUMBER OF BYTES TO BE FREED   */
         STCM  R1,7,MWABYTES                                       0801
*   R1=R13;                         /* MODULE WORK AREA ADDRESS      */
         LR    R1,R13                                              0802
*   R0=MWAMNWRD;                    /* GET SUBPOOL NO. AND NO. OF  0803
*                                      BYTES                         */
         L     R0,MWAMNWRD                                         0803
*   RESPECIFY                                                      0804
*     R6 RESTRICTED;                                               0804
*   R6=MWASAVEA;                    /* GET RETURN ADDRESS FROM MWA   */
         L     R6,MWASAVEA                                         0805
*   GEN(L R13,4(R13));              /* SAVE ADDR OF PREVIOUS SAVE  0806
*                                      AREA                          */
         L R13,4(R13)
*   GEN(FREEMAIN R,LV=(R0),A=(R1)); /* FREE MODULE WORK AREA         */
         FREEMAIN R,LV=(R0),A=(R1)
*   RESPECIFY                                                      0808
*     RET RESTRICTED;                                              0808
*   RET=R6;                         /* GET RETURN ADDRESS            */
         LR    RET,R6                                              0809
*   END TERM200T;                                                  0810
@EL00010 DS    0H                                                  0810
@EF00010 DS    0H                                                  0810
@ER00010 BR    @14                                                 0810
*   RESPECIFY                                                      0811
*    (R0,                                                          0811
*     R1,                                                          0811
*     R6,                                                          0811
*     RET) UNRESTRICTED;                                           0811
*DEHOOK:                                                           0812
*                                                                  0812
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-DECHAIN AND FREE DUMMY DEB                    */
*/*      01   INPUTS-  1. POINTER TO DUMMY DEB IN MWADEBPT           */
*/*      01   OUTPUTS- 1. DUMMY DEB FREED                            */
*/*                                                                  */
*/* IN VS2 THIS ROUTINE IS MODIFIED TO CONSIDER THE DEB AND         .*/
*/* DEB EXTENTION AS NOT CONTIGUOUS.                         @Y30DSMD*/
*/********************************************************************/
*                                                                  0812
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0812
DEHOOK   DS    0H                                                  0813
*   RESPECIFY                                                      0813
*     RET RESTRICTED;                                              0813
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        0814
*   RESPECIFY                                                      0815
*     RET UNRESTRICTED;                                            0815
*   IF MWACAT=OFF THEN              /* IF NOT CATALOG OR SCRA        */
         TM    MWACAT,B'10000000'                                  0816
         BNZ   @RF00816                                            0816
*     CALL DECHNDEB;                /* DECHAIN THE DEB               */
*                                                                  0817
         BAL   @14,DECHNDEB                                        0817
*   /*****************************************************************/
*   /*                                                               */
*   /* CONSIDER THE DEB AND THE DEB XTN AS NON-CONTIGUOUS.FIRST .    */
*   /* FREEMAIN THE DEB XTN. .                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0818
*   RFY                                                            0818
*     DEB BASED(MWADEBPT-LENGTH(DEB));/* DEB IS IN FRONT OF DEBBASIC.*/
@RF00816 DS    0H                                                  0819
*   MWADDRES=ADDR(DEBXTN);          /* ADDRESS OF DEB EXTENTION.   0819
*                                                            @Y30DSMD*/
         LR    @11,MWADEBPT                                        0819
         AL    @11,@CF05495                                        0819
         L     @11,DEBXTNP-28(,@11)                                0819
         ST    @11,MWADDRES                                        0819
*   MWABYTES=LENGTH(DEBXTN);        /* NOTE THE SIZE OF THE XTN.   0820
*                                                            @Y30DSMD*/
         MVC   MWABYTES(3),@CF00508+1                              0820
*   IF MWACAT=OFF THEN              /* IF NOT CATALOG OR SCRA        */
         TM    MWACAT,B'10000000'                                  0821
         BNZ   @RF00821                                            0821
*     DO;                           /* PROCESS THE NON-CTLG DDEB.  0822
*                                                            @Y30DSMD*/
*       IF MWAGSR=ON×MWACBIC=ON THEN/* IS THIS GSR OR CBIC   @ZA16012*/
         TM    MWAGSR,B'10000000'                                  0823
         BO    @RT00823                                            0823
         TM    MWACBIC,B'10000000'                                 0823
         BNO   @RF00823                                            0823
@RT00823 DS    0H                                                  0824
*         MWASPOOL=GSRSPOOL;        /* INDICATE GSR SUB-POOL.      0824
*                                                            @Y30DSMD*/
         MVI   MWASPOOL,X'F1'                                      0824
*       ELSE                        /* IF NOT GSR DATA SET   @Z30SSRL*/
*         MWASPOOL=DDEBPOOL;        /* SUBPOOL OF DEB        @Y30DSMD*/
         B     @RC00823                                            0825
@RF00823 MVI   MWASPOOL,X'E6'                                      0825
*       MWAFRKEY=K50;               /* REQUEST KEY 5 FREEMAIN.     0826
*                                                            @Y30DSMD*/
@RC00823 MVI   MWAFRKEY,X'50'                                      0826
*     END;                          /* END OF NON-CTLG DDEB LOGIC  0827
*                                      BYPASS.               @Y30DSMD*/
*   ELSE                            /* IF CATALOG OR SCRA            */
*     MWASPOOL=SCATPOOL;            /* SUBPOOL OF CATALOG    @Z30SSMD*/
         B     @RC00821                                            0828
@RF00821 MVI   MWASPOOL,X'F1'                                      0828
*   CALL FREECORE;                  /* FREE DEB EXTENTION.   @Y30DSMD*/
*                                                                  0829
@RC00821 BAL   @14,FREECORE                                        0829
*   /*****************************************************************/
*   /*                                                               */
*   /* NOW FREE THE OTHER PART OF THE DUMMY DEB. THIS PART CONSISTS  */
*   /* OF NO AVT, THE PREFIX, THE BASIC SECTION AND NO DASD   SECTION*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0830
*   MWADDRES=ADDR(DEBPREFX);        /* ADDRESS OF DEB BLOCK. @Y30DSMD*/
         LR    @11,MWADEBPT                                        0830
         SL    @11,@CF00576                                        0830
         LA    @15,DEBPREFX(,@11)                                  0830
         ST    @15,MWADDRES                                        0830
*   MWABYTES=DEBLNGTH*DWORDLEN;     /* NOTE THE SIZE OF THE BLK.   0831
*                                                            @Y30DSMD*/
         SLR   @15,@15                                             0831
         IC    @15,DEBLNGTH(,@11)                                  0831
         SLA   @15,3                                               0831
         STCM  @15,7,MWABYTES                                      0831
*   IF MWACAT=OFF THEN              /* IF NOT CATALOG OR SCRA      0832
*                                                            @Y30DSMD*/
         TM    MWACAT,B'10000000'                                  0832
         BNZ   @RF00832                                            0832
*     DO;                           /* PROCESS THE NON-CTLG DDEB.  0833
*                                                            @Y30DSMD*/
*       IF MWAGSR=ON×MWACBIC=ON THEN/* IS THIS GSR OR CBIC   @ZA16012*/
         TM    MWAGSR,B'10000000'                                  0834
         BO    @RT00834                                            0834
         TM    MWACBIC,B'10000000'                                 0834
         BNO   @RF00834                                            0834
@RT00834 DS    0H                                                  0835
*         MWASPOOL=GSRSPOOL;        /* INDICATE GSR SUB-SPOOL.     0835
*                                                            @Y30DSMD*/
         MVI   MWASPOOL,X'F1'                                      0835
*       ELSE                        /* IF NOT GSR DATA SET   @Z30SSRL*/
*         MWASPOOL=DDEBPOOL;        /* SUBPOOL OF DEB        @Y30DSMD*/
         B     @RC00834                                            0836
@RF00834 MVI   MWASPOOL,X'E6'                                      0836
*       MWAFRKEY=K50;               /* REQUEST KEY 5 FREEMAIN.     0837
*                                                            @Y30DSMD*/
@RC00834 MVI   MWAFRKEY,X'50'                                      0837
*     END;                          /* END OF NON-CTLG DDEB LOGIC  0838
*                                      BYPASS.               @Y30DSMD*/
*   ELSE                            /* IF CATALOG OR SCRA    @Y30DSMD*/
*     MWASPOOL=SCATPOOL;            /* SUBPOOL OF CATALOG    @Z30SSMD*/
         B     @RC00832                                            0839
@RF00832 MVI   MWASPOOL,X'F1'                                      0839
*   CALL FREECORE;                  /* FREE DEB EXTENTION.   @Y30DSMD*/
@RC00832 BAL   @14,FREECORE                                        0840
*   MWADDFRE=ON;                    /* NOTE DUMMY DEB WAS FREMAINED.
*                                                            @Y30DSMD*/
         OI    MWADDFRE,B'10000000'                                0841
*   RESPECIFY                                                      0842
*     RET RESTRICTED;                                              0842
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        0843
*   RESPECIFY                                                      0844
*     RET UNRESTRICTED;                                            0844
*   RFY                                                            0845
*     DEB BASED(DEBAPPAD);          /* RESET DEB OVERRIDE.   @Z30SSMD*/
*   END DEHOOK;                                                    0846
@EL00011 DS    0H                                                  0846
@EF00011 DS    0H                                                  0846
@ER00011 BR    @14                                                 0846
*DECHNDEB:                                                         0847
*                                                                  0847
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-DECHAIN DEB AND REMOVE DEB ENTRY FROM         */
*/*                    THE DEB TABLE                                 */
*/*      01   INPUTS-  1. POINTER TO DEB IN MWADEBPT                 */
*/*      01   OUTPUTS- 1. DEB DECHAINED AND REMOVED FROM DEB TABLE   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0847
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0847
DECHNDEB DS    0H                                                  0848
*   RESPECIFY                                                      0848
*    (R1,                                                          0848
*     R6,                                                          0848
*     R7,                                                          0848
*     RET) RESTRICTED;                                             0848
*   MWASAVEC=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEC                                        0849
*   RESPECIFY                                                      0850
*     RET UNRESTRICTED;                                            0850
*   R6=MWADEBPT;                    /* SAVE POINTER TO DEB FOR     0851
*                                      DECHAIN                       */
         LR    R6,MWADEBPT                                         0851
*   CALL LOCKUP;                    /* SERIALIZE THE PORCESS.      0852
*                                                            @Y30DSMD*/
         BAL   @14,LOCKUP                                          0852
*   RFY                                                            0853
*     TCB BASED(DEBTCBAD);          /* DIRECT THE COMPILER.  @Y30DSMD*/
*   IF TCBDEB=MWADEBPT THEN         /* IS MY DEB THE FIRST ON THE  0854
*                                      CHAIN?                        */
         L     @11,DEBTCBAD(,MWADEBPT)                             0854
         C     MWADEBPT,TCBDEB(,@11)                               0854
         BNE   @RF00854                                            0854
*     DO;                           /* PROCESS THE FIRST DEB ON THE
*                                      CHAIN.                @Y30DSMD*/
*       MWARDEB=MWADEBPT;           /* SET UP OUR DEB PTR.   @Y30DSMD*/
         LR    MWARDEB,MWADEBPT                                    0856
*       MWANDEB=DEBDEBB;            /* SET UP NEXT DEB PTR.  @Y30DSMD*/
         L     MWANDEB,DEBDEBB-1(,MWADEBPT)                        0857
         LA    MWANDEB,0(,MWANDEB)                                 0857
*       CS(MWARDEB,MWANDEB,TCBDEB); /* MAKE NEXT DEB THE FIRST.      */
         CS    MWARDEB,@09,TCBDEB(@11)                             0858
*       BC(EIGHT,DECHND1);          /* GOTO DECHND1 IF SUCCESSFUL  0859
*                                                            @Z30SSRL*/
         BC    8,DECHND1                                           0859
*     END;                          /* END OF FIRST DEB PROCESSING.
*                                                            @Y30DSMD*/
*   MWADEBPT=DEBTCBAD+FWORDLEN;     /* LOAD PTR TO 1ST DEB IN      0861
*                                      DEB-CHAIN                     */
@RF00854 LA    @11,4                                               0861
         AL    @11,DEBTCBAD(,MWADEBPT)                             0861
         LR    MWADEBPT,@11                                        0861
*   DO WHILE(DEBDEBB^=R6&DEBDEBB^=ZERO);/* IF NO MATCH FOUND         */
         B     @DE00862                                            0862
@DL00862 DS    0H                                                  0863
*     MWADEBPT=DEBDEBB;             /* POINT TO NEXT DEB             */
         L     @11,DEBDEBB-1(,MWADEBPT)                            0863
         LA    @11,0(,@11)                                         0863
         LR    MWADEBPT,@11                                        0863
*   END;                                                           0864
@DE00862 L     @11,DEBDEBB-1(,MWADEBPT)                            0864
         LA    @11,0(,@11)                                         0864
         CR    @11,R6                                              0864
         BE    @DC00862                                            0864
         LTR   @11,@11                                             0864
         BNZ   @DL00862                                            0864
@DC00862 DS    0H                                                  0865
*   IF DEBDEBB^=ZERO THEN           /* IF DEB MATCH FOUND            */
         L     @11,DEBDEBB-1(,MWADEBPT)                            0865
         LA    @11,0(,@11)                                         0865
         LTR   @11,@11                                             0865
         BZ    @RF00865                                            0865
*     DEBDEBB=DEBDEBB->DEBDEBB;     /* DECHAIN THE DEB               */
         L     @11,DEBDEBB-1(,@11)                                 0866
         LA    @11,0(,@11)                                         0866
         STCM  @11,7,DEBDEBB(MWADEBPT)                             0866
*DECHND1:                                                          0867
*   CALL UNLOCK;                    /* RELEASE THE SERIALIZATION.  0867
*                                                            @Y30DSMD*/
@RF00865 DS    0H                                                  0867
DECHND1  BAL   @14,UNLOCK                                          0867
*   MWADEBPT=R6;                    /* COPY DEB POINTER              */
         LR    MWADEBPT,R6                                         0868
*   R1=DEBDCBB;                     /* POINT TO CURRENT DEB          */
         L     R1,DEBDCBB-1(,MWADEBPT)                             0869
         LA    R1,0(,R1)                                           0869
*   IF R1^=ZERO THEN                /* DOES THEN DUMMY DEB EXIST?  0870
*                                                            @Y30DSMD*/
         LTR   R1,R1                                               0870
         BZ    @RF00870                                            0870
*     GEN(DEBCHK (1),TYPE=DELETE,AM=VSAM);/* DELETE DEB FROM DEB   0871
*                                      TABLE                         */
         DEBCHK (1),TYPE=DELETE,AM=VSAM
*   RESPECIFY                                                      0872
*     RET RESTRICTED;                                              0872
@RF00870 DS    0H                                                  0873
*   RET=MWASAVEC;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEC                                        0873
*   RESPECIFY                                                      0874
*    (R1,                                                          0874
*     R6,                                                          0874
*     R7,                                                          0874
*     RET) UNRESTRICTED;                                           0874
*   RFY                                                            0875
*     TCB BASED(TCBPTR);            /* DIRECT THE COMPILER.  @Z30SSMD*/
*   END DECHNDEB;                                                  0876
@EL00012 DS    0H                                                  0876
@EF00012 DS    0H                                                  0876
@ER00012 BR    @14                                                 0876
*RESTORE:                                                          0877
*                                                                  0877
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-RESTORE USER ACB,DUMMY DEB AND AMBL.  @Y30DSMD*/
*/*      01   INPUTS-  1. USER ACB                                   */
*/*      01   OUTPUTS- 1. ACB RESTORED,DUMMY DEB AND AMBL CHANGED.   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0877
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0877
RESTORE  DS    0H                                                  0878
*   RESPECIFY                                                      0878
*     RET RESTRICTED;                                              0878
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        0879
*   IF MWADDFRE=OFF THEN            /* IF DUMMY DEB NOT FREED THEN,
*                                                            @Y30DSMD*/
         TM    MWADDFRE,B'10000000'                                0880
         BNZ   @RF00880                                            0880
*     DO;                           /* PROCESS THE DUMMY DEB.      0881
*                                                            @Y30DSMD*/
*       MWADEBPT=ACBDEB;            /* POINT TO DUMMY-DEB.   @Z30SSMD*/
         L     MWADEBPT,ACBDEB-1(,RACB)                            0882
         LA    MWADEBPT,0(,MWADEBPT)                               0882
*       RFY                                                        0883
*         DEB BASED(MWADEBPT-LENGTH(DEB));/* RE-BASE FOR D-DEB.    0883
*                                                            @Z30SSMD*/
*       DEBXCDCB=OFF;               /* THE DUMMY-DEB MAY BE TASK   0884
*                                      CLOSED.               @Z30SSMD
*                                                            @Z30SSMD*/
         LR    @15,MWADEBPT                                        0884
         AL    @15,@CF05495                                        0884
         L     @15,DEBXTNP-28(,@15)                                0884
         NI    DEBXCDCB(@15),B'01111111'                           0884
*       RFY                                                        0885
*         DEB BASED(DEBAPPAD);      /* RE-BASE FOR R-DEB.    @Z30SSMD*/
*       DEBDCBB=DXUACBAD;           /* RESET USER ACB IN D-DEB.    0886
*                                                            @Z30SSMD*/
         L     @15,MWACORAD                                        0886
         MVC   DEBDCBB(3,MWADEBPT),DXUACBAD(@15)                   0886
*     END;                          /* END OF DUMMY DEB RESTORE.   0887
*                                                            @Y30DSMD*/
*   IF MWAAMBLF=OFF THEN            /* IF AMBL FOR RACB NOT FREED  0888
*                                      THEN,                 @Y30DSMD*/
@RF00880 TM    MWAAMBLF,B'10000000'                                0888
         BNZ   @RF00888                                            0888
*     AMBLACB=DXUACBAD;             /* POINT AMBL BACK TO USER ACB.
*                                                            @Y30DSMD*/
         L     @15,MWACORAD                                        0889
         L     @15,DXUACBAD-1(,@15)                                0889
         LA    @15,0(,@15)                                         0889
         L     @11,MWAMBLPT                                        0889
         ST    @15,AMBLACB(,@11)                                   0889
*   MWATIOTP=PDPTIOT;               /* TIOT DD ENTRY POINTER         */
@RF00888 L     @15,MWACORAD                                        0890
         L     @15,PDPTIOT+280(,@15)                               0890
         ST    @15,MWATIOTP                                        0890
*   ACBDDNM=TIOEDDNM;               /* RESTORE ACB DDNAME            */
         MVC   ACBDDNM(8,RACB),TIOEDDNM(@15)                       0891
*   ACBOPEN=OFF;                    /* SET OPEN BIT OFF              */
*   ACBEXFG=ON;                     /* SET LOCK OFF INDICATED BY '1' */
*   ACBIOSFG=OFF;                   /* SET BUSY BIT OFF              */
         OI    ACBEXFG(RACB),B'00000010'                           0894
         NI    ACBOPEN(RACB),B'11101110'                           0894
*   ACBAMBL=ZERO;                   /* ZERO AMBL POINTER IN ACB      */
         SLR   @15,@15                                             0895
         ST    @15,ACBAMBL(,RACB)                                  0895
*   ACBINRTN=ZERO;                  /* ZERO ADDRESS FOR INTERFACE RTN*/
         ST    @15,ACBINRTN(,RACB)                                 0896
*   ACBCROPS='00'B;                 /* ZERO CHECK POINT/RESTART    0897
*                                      OPTION BITS                   */
         NI    ACBCROPS(RACB),B'00111111'                          0897
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        0898
*   RESPECIFY                                                      0899
*     RET UNRESTRICTED;                                            0899
*   END RESTORE;                                                   0900
@EL00013 DS    0H                                                  0900
@EF00013 DS    0H                                                  0900
@ER00013 BR    @14                                                 0900
*CLSPATH:                                                          0901
*                                                                  0901
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-CLOSE PATH AMBL, DECHAIN FROM PATH AMBL CHAIN */
*/*                    REMOVE PATH AMBL ENTRY FROM VAT               */
*/*      01   INPUTS-  1. AMBL POINTER IN ACBAMBL                    */
*/*      01   OUTPUTS- 1. PATH AMBL CLOSED AND FREED                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0901
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0901
CLSPATH  DS    0H                                                  0902
*   RESPECIFY                                                      0902
*     RET RESTRICTED;                                              0902
*   MWASAVEA=RET;                   /* SAVE RETURN CODE              */
         ST    RET,MWASAVEA                                        0903
*   RESPECIFY                                                      0904
*     RET UNRESTRICTED;                                            0904
*   MWAVATPT=JSCBSHR;                                              0905
         L     @05,CVTPTR                                          0905
         L     @05,CVTTCBP(,@05)                                   0905
         L     @05,TCBPTR(,@05)                                    0905
         L     @05,TCBJSCB(,@05)                                   0905
         L     MWAVATPT,JSCBSHR(,@05)                              0905
*   MWASWTCH=OFF;                   /* SET INDICATOR SWITCH FOR LOOP */
         NI    MWASWTCH,B'01111111'                                0906
*   PDPFUNC=PDF104;                 /* SET FUNCTION CODE FOR PD      */
         L     @11,MWACORAD                                        0907
         MVI   PDPFUNC+280(@11),X'68'                              0907
*   MWAMBLPT=ACBAMBL;               /* AMBL POINTED TO BY USER ACB   */
         L     @11,ACBAMBL(,RACB)                                  0908
         ST    @11,MWAMBLPT                                        0908
*   IF AMBLPRIM=ON&AMBLSCHN=ZERO THEN/* NO OTHER PATH AMBL           */
         TM    AMBLPRIM(@11),B'10000000'                           0909
         BNO   @RF00909                                            0909
         SLR   @05,@05                                             0909
         C     @05,AMBLSCHN(,@11)                                  0909
         BNE   @RF00909                                            0909
*     DO;                                                          0910
*       IF BIBUPT^=ZERO THEN        /* IF UPGRADE TABLE EXIST        */
         L     @01,AMBLBIB(,@11)                                   0911
         C     @05,BIBUPT(,@01)                                    0911
         BE    @RF00911                                            0911
*         DO;                                                      0912
*           MWADSPTR=AMBLDTA;       /* SAVE DATA AMB POINTER FROM  0913
*                                      PATH AMBL                     */
         L     MWADSPTR,AMBLDTA(,@11)                              0913
*           DO MWAINDEX=1 TO UPTNOENT BY 1;/* LOOP THROUGH UPT       */
         LA    @11,1                                               0914
         ST    @11,MWAINDEX                                        0914
         B     @DE00914                                            0914
@DL00914 DS    0H                                                  0915
*             IF MWADSPTR=UPTRPL(MWAINDEX)->RPLDACB->ACBAMBL->AMBLDTA
*               THEN                /* IF UPGRADE DATA AMB MATCH PATH
*                                      DATA AMB                      */
         MH    @11,@CH00033                                        0915
         L     @01,MWAMBLPT                                        0915
         L     @01,AMBLBIB(,@01)                                   0915
         L     @01,BIBUPT(,@01)                                    0915
         L     @11,UPTRPL-12(@11,@01)                              0915
         L     @11,RPLDACB(,@11)                                   0915
         L     @11,ACBAMBL(,@11)                                   0915
         C     MWADSPTR,AMBLDTA(,@11)                              0915
         BNE   @RF00915                                            0915
*               CLWPARCL=ON;        /* INDICATE PARTIAL CLOSE IN CLW */
         OI    CLWPARCL(RCORE),B'00000001'                         0916
*           END;                                                   0917
@RF00915 LA    @11,1                                               0917
         AL    @11,MWAINDEX                                        0917
         ST    @11,MWAINDEX                                        0917
@DE00914 L     @01,MWAMBLPT                                        0917
         L     @01,AMBLBIB(,@01)                                   0917
         L     @01,BIBUPT(,@01)                                    0917
         SLR   @00,@00                                             0917
         IC    @00,UPTNOENT(,@01)                                  0917
         CR    @11,@00                                             0917
         BNH   @DL00914                                            0917
*         END;                                                     0918
*       IF CLWPARCL=OFF THEN        /* IF NO UPGRADE AMBL FOR PATH 0919
*                                      AIX                           */
@RF00911 TM    CLWPARCL(RCORE),B'00000001'                         0919
         BNZ   @RF00919                                            0919
*         CLWPRMCL=ON;              /* INDICATE PRIMARY CLOSE IN CLW */
         OI    CLWPRMCL(RCORE),B'10000000'                         0920
*     END;                                                         0921
*   ELSE                            /* OTHER PATH AMBL'S FOR THIS AIX
*                                      EXIST                         */
*     DO;                                                          0922
         B     @RC00909                                            0922
@RF00909 DS    0H                                                  0923
*       IF AMBLPRIM=ON THEN         /* PATH AMBL IS PRIMARY AND    0923
*                                      SECONDARY PATH AMBL EXIST     */
         L     @11,MWAMBLPT                                        0923
         TM    AMBLPRIM(@11),B'10000000'                           0923
         BNO   @RF00923                                            0923
*         DO;                                                      0924
*           IF AMBLESET=ON THEN     /* COPY EOV ERROR FLAG   @ZA13508*/
         TM    AMBLESET(@11),B'01000000'                           0925
         BNO   @RF00925                                            0925
*             AMBLSCHN->AMBLESET=ON;/*                       @ZA13508*/
         L     @11,AMBLSCHN(,@11)                                  0926
         OI    AMBLESET(@11),B'01000000'                           0926
*           MWAMBLPT=AMBLSCHN;      /* POINT TO SECONDARY AMBL       */
@RF00925 L     @11,MWAMBLPT                                        0927
         L     @11,AMBLSCHN(,@11)                                  0927
         ST    @11,MWAMBLPT                                        0927
*           AMBLPRIM=ON;            /* CHANGE SECONDARY AMBL TO    0928
*                                      PRIMARY                       */
         OI    AMBLPRIM(@11),B'10000000'                           0928
*           MWAAMBPT=AMBLDTA;       /* POINT TO DATA AMB             */
         L     @05,AMBLDTA(,@11)                                   0929
         ST    @05,MWAAMBPT                                        0929
*           AMBPAMBL=MWAMBLPT;      /* POINT TO CURRENT PRIMARY AMBL */
         ST    @11,AMBPAMBL(,@05)                                  0930
*           IF AMBLIX^=ZERO THEN    /* IF INDEX AMB EXIST            */
         L     @05,AMBLIX(,@11)                                    0931
         LTR   @05,@05                                             0931
         BZ    @RF00931                                            0931
*             DO;                                                  0932
*               MWAAMBPT=AMBLIX;    /* POINT TO INDEX AMB            */
         ST    @05,MWAAMBPT                                        0933
*               AMBPAMBL=MWAMBLPT;  /* POINT TO CURRENT PRIMARY AMBL */
         ST    @11,AMBPAMBL(,@05)                                  0934
*             END;                                                 0935
*           MWAMBLPT=ACBAMBL;       /* GO BACK TO PREVIOUS PRIMARY 0936
*                                      AMBL                          */
@RF00931 L     @11,ACBAMBL(,RACB)                                  0936
         ST    @11,MWAMBLPT                                        0936
*           CLWSECCL=ON;            /* INDICATE SECONDARY CLOSE      */
         OI    CLWSECCL(RCORE),B'01000000'                         0937
*         END;                                                     0938
*       ELSE                        /* IF PATH AMBL IS SECONDARY     */
*         DO;                                                      0939
         B     @RC00923                                            0939
@RF00923 DS    0H                                                  0940
*           MWAMBLPT=BIBPAMBL;      /* POINT TO PRIMARY AMBL FOR BASE*/
         L     @11,MWAMBLPT                                        0940
         L     @11,AMBLBIB(,@11)                                   0940
         L     @11,BIBPAMBL(,@11)                                  0940
         ST    @11,MWAMBLPT                                        0940
*           DO UNTIL MWAMBLPT=ZERO× /* LOOP UNTIL SECONDARY  @ZA19550
*                                      CHAIN END             @ZA19550*/
*                 MWASWTCH=ON;      /* OR AMBL FOUND         @ZA19550*/
@DL00941 DS    0H                                                  0942
*             IF AMBLXPT^=ZERO THEN /* IF PATH AMBL POINTER EXIST    */
         L     @11,MWAMBLPT                                        0942
         L     @11,AMBLXPT(,@11)                                   0942
         LTR   @11,@11                                             0942
         BZ    @RF00942                                            0942
*               DO;                                                0943
*                 IF AMBLXPT->AMBLSCHN=ACBAMBL THEN/* PATH AMBL FOUND*/
         CLC   AMBLSCHN(4,@11),ACBAMBL(RACB)                       0944
         BNE   @RF00944                                            0944
*                   MWASWTCH=ON;    /* SET SWITCH TO INDICATE        */
         OI    MWASWTCH,B'10000000'                                0945
*                 ELSE              /* IF NOT FOUND THEN CONTINUE  0946
*                                      LOOP                          */
*                   MWAMBLPT=AMBLSCHN;/* POINT TO NEXT AMBL          */
         B     @RC00944                                            0946
@RF00944 L     @11,MWAMBLPT                                        0946
         L     @11,AMBLSCHN(,@11)                                  0946
         ST    @11,MWAMBLPT                                        0946
*               END;                                               0947
*             ELSE                  /*                       @ZA19550*/
*               MWAMBLPT=AMBLSCHN;  /* POINT TO NEXT AMBL    @ZA19550*/
         B     @RC00942                                            0948
@RF00942 L     @11,MWAMBLPT                                        0948
         L     @11,AMBLSCHN(,@11)                                  0948
         ST    @11,MWAMBLPT                                        0948
*           END;                                                   0949
@RC00942 DS    0H                                                  0949
@DE00941 L     @11,MWAMBLPT                                        0949
         LTR   @11,@11                                             0949
         BZ    @DC00941                                            0949
         TM    MWASWTCH,B'10000000'                                0949
         BNO   @DL00941                                            0949
@DC00941 DS    0H                                                  0950
*           IF MWASWTCH=ON THEN     /* IF PATH AMBL WAS FOUND        */
         TM    MWASWTCH,B'10000000'                                0950
         BNO   @RF00950                                            0950
*             DO;                                                  0951
*               MWASWTCH=OFF;       /* RESET INDICATOR SWITCH        */
         NI    MWASWTCH,B'01111111'                                0952
*               MWAMBLPT=AMBLXPT;   /* POINT TO AMBL THAT POINT TO 0953
*                                      THE PATH AMBL                 */
         L     @11,MWAMBLPT                                        0953
         L     @11,AMBLXPT(,@11)                                   0953
         ST    @11,MWAMBLPT                                        0953
*               AMBLSCHN=AMBLSCHN->AMBLSCHN;/* DECHAIN PATH AMBL     */
         L     @05,AMBLSCHN(,@11)                                  0954
         L     @05,AMBLSCHN(,@05)                                  0954
         ST    @05,AMBLSCHN(,@11)                                  0954
*             END;                                                 0955
*         END;                                                     0956
@RF00950 DS    0H                                                  0957
*       CLWSECCL=ON;                /* INDICATE SECONDARY CLOSE      */
@RC00923 OI    CLWSECCL(RCORE),B'01000000'                         0957
*     END;                                                         0958
*   RESPECIFY                                                      0959
*     RETCODE RESTRICTED;                                          0959
@RC00909 DS    0H                                                  0960
*   PDPDSTYP=PDPPATH;               /* INDICATE PATH DATA SET        */
         L     @14,MWACORAD                                        0960
         MVI   PDPDSTYP+280(@14),X'03'                             0960
*   RSTATRTN=IDAR200B;              /* NOTE 200B GAINING CONTROL.  0961
*                                                            @Y30DSMD*/
         MVC   RSTATRTN(4,@14),@CC04083                            0961
*   CALL IDA0200B;                  /* CLOSE PATH DATA SET           */
         L     @15,@CV05403                                        0962
         BALR  @14,@15                                             0962
*   RSTATRTN=IDAR200T;              /* NOTE 200T BACK IN CONTROL.  0963
*                                                            @Y30DSMD*/
         L     @14,MWACORAD                                        0963
         MVC   RSTATRTN(4,@14),@CC04085                            0963
*   IF RETCODE^=ZERO THEN           /* TERMINATING ERROR ENCOUNTERED */
         LTR   RETCODE,RETCODE                                     0964
         BZ    @RF00964                                            0964
*     RETURN TO LTRM200T;           /* GO TO TERM200T                */
         LA    @14,LTRM200T                                        0965
@EL00014 DS    0H                                                  0965
@EF00014 DS    0H                                                  0965
@ER00014 BR    @14                                                 0965
*   PDPDSTYP=PDPDDNM;               /* RESET DATA SET TYPE TO DD NAME*/
@RF00964 L     @14,MWACORAD                                        0966
         MVI   PDPDSTYP+280(@14),X'01'                             0966
*   MWAMBLPT=ACBAMBL;               /* AMBL POINTED TO BY USER ACB   */
         L     @14,ACBAMBL(,RACB)                                  0967
         ST    @14,MWAMBLPT                                        0967
*   CALL RMOVAMBL;                  /* REMOVE AMBL FROM VAT          */
         BAL   @14,RMOVAMBL                                        0968
*   MWADDRES=ACBAMBL;               /* ADDR OF PATH AMBL TO BE FREED */
         L     @14,ACBAMBL(,RACB)                                  0969
         ST    @14,MWADDRES                                        0969
*   IF AMBLCAT=ON THEN              /* IF THIS IS CATALOG            */
         L     @14,MWAMBLPT                                        0970
         TM    AMBLCAT(@14),B'00000010'                            0970
         BNO   @RF00970                                            0970
*     MWASPOOL=CATPOOL;             /* SUBPOOL NUMBER FOR CATALOG    */
         MVI   MWASPOOL,X'E7'                                      0971
*   ELSE                            /* NOT CATALOG           @Z30SSRL*/
*     IF MWAGSR=ON×MWACBIC=ON THEN  /* THIS IS A GSR OR CBIC @ZA16012*/
         B     @RC00970                                            0972
@RF00970 TM    MWAGSR,B'10000000'                                  0972
         BO    @RT00972                                            0972
         TM    MWACBIC,B'10000000'                                 0972
         BNO   @RF00972                                            0972
@RT00972 DS    0H                                                  0973
*       MWASPOOL=GSRSPOOL;          /* DATA SET USE GLOBAL CORE.   0973
*                                                            @Y30DSMD*/
         MVI   MWASPOOL,X'F1'                                      0973
*     ELSE                          /* IF THIS IS NOT CATALOG OR GSR.*/
*       MWASPOOL=AMBLPOOL;          /* SUBPOOL NUMBER FOR AMBL       */
         B     @RC00972                                            0974
@RF00972 MVI   MWASPOOL,X'FC'                                      0974
*   MWABYTES=LENGTH(IDAAMBL);       /* LENGTH OF PATH AMBL           */
@RC00972 DS    0H                                                  0975
@RC00970 MVC   MWABYTES(3),@CF05095+1                              0975
*   CALL FREECORE;                  /* FREE PATH AMBL                */
         BAL   @14,FREECORE                                        0976
*   CLWPRMCL=OFF;                   /* RESET PRIMARY CLOSE INDICATOR */
*   CLWSECCL=OFF;                   /* RESET SECONDARY CLOSE       0978
*                                      INDICATOR                     */
         NI    CLWPRMCL(RCORE),B'00111111'                         0978
*   CLWPARCL=OFF;                   /* RESET PARTIAL CLOSE INDICATOR */
         NI    CLWPARCL(RCORE),B'11111110'                         0979
*   RESPECIFY                                                      0980
*     RET RESTRICTED;                                              0980
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        0981
*   RESPECIFY                                                      0982
*    (RET,                                                         0982
*     RETCODE) UNRESTRICTED;                                       0982
*   END CLSPATH;                                                   0983
         B     @EL00014                                            0983
*CLSBASE:                                                          0984
*                                                                  0984
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-CLOSE BASE AMBL, DECHAIN FROM BASE AMBL CHAIN */
*/*                    REMOVE BASE AMBL ENTRY FROM VAT               */
*/*      01   INPUTS-  1. POINTER TO AMBL IN ACBAMBL                 */
*/*      01   OUTPUTS- 1. BASE AMBL DECHAINED AND REMOVED FROM VAT   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0984
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0984
CLSBASE  DS    0H                                                  0985
*   RESPECIFY                                                      0985
*     RET RESTRICTED;                                              0985
*   MWASAVEA=RET;                   /* SET RETURN ADDRESS            */
         ST    RET,MWASAVEA                                        0986
*   RESPECIFY                                                      0987
*     RET UNRESTRICTED;                                            0987
*   MWAMBLPT=MWABAMBL;              /* POINT TO BASE AMBL THRUGH PATH
*                                      AMBL                          */
         L     @05,MWABAMBL                                        0988
         ST    @05,MWAMBLPT                                        0988
*   MWAVATPT=JSCBSHR;               /* SET POINTER TO VAT            */
         L     @01,CVTPTR                                          0989
         L     @01,CVTTCBP(,@01)                                   0989
         L     @01,TCBPTR(,@01)                                    0989
         L     @01,TCBJSCB(,@01)                                   0989
         L     MWAVATPT,JSCBSHR(,@01)                              0989
*   PDPFUNC=PDF105;                 /* SET FUNCTION CODE             */
         L     @01,MWACORAD                                        0990
         MVI   PDPFUNC+280(@01),X'69'                              0990
*   IF AMBLCAT=ON THEN              /* IF CATALOG OR SCRA OR SYSTEM
*                                      DATA SETS             @Z40WSRL*/
         TM    AMBLCAT(@05),B'00000010'                            0991
         BNO   @RF00991                                            0991
*     CLWPRMCL=ON;                  /* INDICATE PRIMARY CLOSE        */
         OI    CLWPRMCL(RCORE),B'10000000'                         0992
*   ELSE                            /* IF THIS IS NOT CATALOG        */
*     DO;                                                          0993
         B     @RC00991                                            0993
@RF00991 DS    0H                                                  0994
*       IF AMBLPRIM=OFF THEN        /* AMBL IS SECONDARY             */
         L     @05,MWAMBLPT                                        0994
         TM    AMBLPRIM(@05),B'10000000'                           0994
         BNZ   @RF00994                                            0994
*         DO;                                                      0995
*           MWAMBLPT=BIBPAMBL;      /* PRIM AMBL ON P-AMBL CHAIN FOR
*                                      THIS SPHERE                   */
         L     @11,AMBLBIB(,@05)                                   0996
         L     @11,BIBPAMBL(,@11)                                  0996
         ST    @11,MWAMBLPT                                        0996
*           DO WHILE AMBLSCHN^=ZERO&AMBLSCHN^=MWABAMBL;/* SEARCH FOR
*                                      AMBL IN SECONDARY CHAIN       */
         B     @DE00997                                            0997
@DL00997 DS    0H                                                  0998
*             MWAMBLPT=AMBLSCHN;    /* POINT TO NEXT S-AMBL IN CHAIN */
         L     @11,MWAMBLPT                                        0998
         L     @11,AMBLSCHN(,@11)                                  0998
         ST    @11,MWAMBLPT                                        0998
*           END;                                                   0999
@DE00997 L     @11,MWAMBLPT                                        0999
         L     @11,AMBLSCHN(,@11)                                  0999
         LTR   @11,@11                                             0999
         BZ    @DC00997                                            0999
         C     @11,MWABAMBL                                        0999
         BNE   @DL00997                                            0999
@DC00997 DS    0H                                                  1000
*           CLWSECCL=ON;            /* INDICATE SECONDARY CLOSE      */
         OI    CLWSECCL(RCORE),B'01000000'                         1000
*           IF AMBLSCHN^=ZERO THEN  /* IF SECONDARY AMBL EXIST       */
         L     @11,MWAMBLPT                                        1001
         L     @05,AMBLSCHN(,@11)                                  1001
         LTR   @05,@05                                             1001
         BZ    @RF01001                                            1001
*             AMBLSCHN=AMBLSCHN->AMBLSCHN;/* DECHAIN AMBL FROM     1002
*                                      SECONDARY CHAIN               */
         L     @05,AMBLSCHN(,@05)                                  1002
         ST    @05,AMBLSCHN(,@11)                                  1002
*         END;                                                     1003
*       ELSE                        /* BASE AMBL IS PRIMARY          */
*         DO;                                                      1004
         B     @RC00994                                            1004
@RF00994 DS    0H                                                  1005
*           MWARNAME='AMBLCHAIN';   /* SET RNAME FOR ENQ             */
         MVC   MWARNAME(9),@CC05408                                1005
*           MWAEQEND=ON;            /* INDICATE LAST ENTRY           */
         OI    MWAEQEND,B'10000000'                                1006
*           MWAEQRNM=LENGTH(MWARNAME);/* LENGTH OF RNAME             */
         MVI   MWAEQRNM,X'09'                                      1007
*           MWAEQQAD=ADDR(MWAQNAME);/* ADDRESS OF QNAME              */
         LA    @05,MWAQNAME                                        1008
         ST    @05,MWAEQQAD                                        1008
*           MWAEQRAD=ADDR(MWARNAME);/* ADDRESS OF RNAME              */
         LA    @05,MWARNAME                                        1009
         ST    @05,MWAEQRAD                                        1009
*           GEN(ENQ (,,E,,STEP),MF=(E,MWAEQENT));/* ENQ FOR STEP     */
         ENQ (,,E,,STEP),MF=(E,MWAEQENT)
*           MWAMBLPT=VATPAMBL;      /* PT TO 1ST PRIMARY AMBL ON   1011
*                                      P-CHN                         */
         L     @05,VATPAMBL(,MWAVATPT)                             1011
         ST    @05,MWAMBLPT                                        1011
*           IF MWAMBLPT=MWABAMBL THEN/* BASE AMBL 1ST ON THE P-CHAIN */
         C     @05,MWABAMBL                                        1012
         BNE   @RF01012                                            1012
*             VATPAMBL=AMBLPCHN;    /* DECHAIN OWN P-AMBL            */
         L     @05,AMBLPCHN(,@05)                                  1013
         ST    @05,VATPAMBL(,MWAVATPT)                             1013
*           ELSE                    /* BASE NOT FIRST ON P-CHAIN     */
*             DO;                                                  1014
         B     @RC01012                                            1014
@RF01012 DS    0H                                                  1015
*               DO WHILE AMBLPCHN^=ZERO&AMBLPCHN^=MWABAMBL;/* FIND 1015
*                                      PREVIOUS BASE AMBL            */
         B     @DE01015                                            1015
@DL01015 DS    0H                                                  1016
*                 MWAMBLPT=AMBLPCHN;/* POINT TO NEXT PRIMARY AMBL    */
         L     @05,MWAMBLPT                                        1016
         L     @05,AMBLPCHN(,@05)                                  1016
         ST    @05,MWAMBLPT                                        1016
*               END;                                               1017
@DE01015 L     @05,MWAMBLPT                                        1017
         L     @05,AMBLPCHN(,@05)                                  1017
         LTR   @05,@05                                             1017
         BZ    @DC01015                                            1017
         C     @05,MWABAMBL                                        1017
         BNE   @DL01015                                            1017
@DC01015 DS    0H                                                  1018
*               IF AMBLPCHN=MWABAMBL THEN/* IF PREVIOUS AMBL FOUND   */
         L     @05,MWAMBLPT                                        1018
         L     @15,AMBLPCHN(,@05)                                  1018
         C     @15,MWABAMBL                                        1018
         BNE   @RF01018                                            1018
*                 AMBLPCHN=AMBLPCHN->AMBLPCHN;/* DECHAIN OWN P-AMBL  */
         L     @15,AMBLPCHN(,@15)                                  1019
         ST    @15,AMBLPCHN(,@05)                                  1019
*             END;                  /* AT THIS POINT OUR BASE AMBL 1020
*                                      HAS BEEN DECHAINED FROM THE 1020
*                                      P-AMBL CHAIN                  */
@RF01018 DS    0H                                                  1021
*           MWAMBLPT=MWABAMBL;      /* ADDRESS FOR BASE AMBL         */
@RC01012 L     @05,MWABAMBL                                        1021
         ST    @05,MWAMBLPT                                        1021
*           IF AMBLSCHN=ZERO THEN   /* IF NO SECONDARY AMBL          */
         L     @05,AMBLSCHN(,@05)                                  1022
         LTR   @05,@05                                             1022
         BNZ   @RF01022                                            1022
*             CLWPRMCL=ON;          /* INDICATE PRIMARY CLOSE        */
         OI    CLWPRMCL(RCORE),B'10000000'                         1023
*           ELSE                    /* SECONDARY AMBL EXIST          */
*             DO;                                                  1024
         B     @RC01022                                            1024
@RF01022 DS    0H                                                  1025
*               MWAMBLPT=AMBLSCHN;  /* ADDRESS FOR FIRST SECONDARY 1025
*                                      AMBL                          */
         L     @05,MWAMBLPT                                        1025
         L     @05,AMBLSCHN(,@05)                                  1025
         ST    @05,MWAMBLPT                                        1025
*               IF MWABAMBL->AMBLESET=ON THEN/* IF EOV FAILED      1026
*                                                            @ZA13508*/
         L     @01,MWABAMBL                                        1026
         TM    AMBLESET(@01),B'01000000'                           1026
         BNO   @RF01026                                            1026
*                 AMBLESET=ON;      /* CARRY THE FLAG        @ZA13508*/
         OI    AMBLESET(@05),B'01000000'                           1027
*               AMBLPRIM=ON;        /* 1ST SECONDARY BECOMES NEW PRIM*/
@RF01026 L     @05,MWAMBLPT                                        1028
         OI    AMBLPRIM(@05),B'10000000'                           1028
*               CLWSECCL=ON;        /* INDICATE SECONDARY CLOSE      */
         OI    CLWSECCL(RCORE),B'01000000'                         1029
*               MWAAMBPT=AMBLDTA;   /* POINT TO DATA AMB             */
         L     @15,AMBLDTA(,@05)                                   1030
         ST    @15,MWAAMBPT                                        1030
*               AMBPAMBL=MWAMBLPT;  /* POINT TO CURRENT PRIMARY AMBL */
         ST    @05,AMBPAMBL(,@15)                                  1031
*               IF AMBLIX^=ZERO THEN/* IF INDEX AMB EXIST            */
         L     @15,AMBLIX(,@05)                                    1032
         LTR   @15,@15                                             1032
         BZ    @RF01032                                            1032
*                 DO;                                              1033
*                   MWAAMBPT=AMBLIX;/* POINT TO INDEX AMB            */
         ST    @15,MWAAMBPT                                        1034
*                   AMBPAMBL=MWAMBLPT;/* PT TO CURRENT PRIMARY AMBL  */
         ST    @05,AMBPAMBL(,@15)                                  1035
*                 END;                                             1036
*               BIBPAMBL=ADDR(IDAAMBL);/* UPDATE BIB P-AMBL POINTER  */
@RF01032 L     @05,MWAMBLPT                                        1037
         L     @01,AMBLBIB(,@05)                                   1037
         ST    @05,BIBPAMBL(,@01)                                  1037
*               AMBLPCHN=VATPAMBL;  /* NEW PRIMARY POINT TO HEAD OF
*                                      PRIMARY CHAIN                 */
         L     @15,VATPAMBL(,MWAVATPT)                             1038
         ST    @15,AMBLPCHN(,@05)                                  1038
*               VATPAMBL=ADDR(IDAAMBL);/* NEW PRIMARY BECOMES HEAD OF
*                                      PRIMARY CHAIN                 */
         ST    @05,VATPAMBL(,MWAVATPT)                             1039
*             END;                                                 1040
*           MWAEQOP2=MWAEQOP2&&MWAEQOP2;/* ZERO OPTION BYTE          */
@RC01022 XC    MWAEQOP2(1),MWAEQOP2                                1041
*           GEN(DEQ (,,,STEP),MF=(E,MWAEQENT));/* ISSUE DEQ FOR STEP */
         DEQ (,,,STEP),MF=(E,MWAEQENT)
*         END;                                                     1043
*     END;                                                         1044
@RC00994 DS    0H                                                  1045
*   IF CLWPATH=ON THEN              /* IF PATH PROCESSING            */
@RC00991 TM    CLWPATH(RCORE),B'00010000'                          1045
         BNO   @RF01045                                            1045
*     DO;                           /* THEN SET UP DUMMY ACB @XM02092*/
*       RACB=BIBDACB;               /* POINT TO BIB DUMMY ACB        */
         L     @11,MWAMBLPT                                        1047
         L     @11,AMBLBIB(,@11)                                   1047
         L     RACB,BIBDACB(,@11)                                  1047
*       ACBBUSY=ON;                 /* INDICATE ACB BUSY     @XM02092*/
         OI    ACBBUSY(RACB),B'00000001'                           1048
*     END;                          /*                       @XM02092*/
*   RESPECIFY                                                      1050
*     RETCODE RESTRICTED;                                          1050
@RF01045 DS    0H                                                  1051
*   PDPDSTYP=PDPBASE;               /* INDICATE DATA SET TYPE IS BASE*/
         L     @14,MWACORAD                                        1051
         MVI   PDPDSTYP+280(@14),X'02'                             1051
*   RSTATRTN=IDAR200B;              /* NOTE CONTROL IS GOING TO 200B.
*                                                            @Y30DSMD*/
         MVC   RSTATRTN(4,@14),@CC04083                            1052
*   CALL IDA0200B;                  /* CLOSE BASE DATA SET           */
         L     @15,@CV05403                                        1053
         BALR  @14,@15                                             1053
*   IF CLWPATH=ON THEN              /* IF PATH PROCESSING    @XM02092*/
         TM    CLWPATH(RCORE),B'00010000'                          1054
         BNO   @RF01054                                            1054
*     ACBBUSY=OFF;                  /* THEN RESET BUSY BIT   @XM02092*/
         NI    ACBBUSY(RACB),B'11111110'                           1055
*   RSTATRTN=IDAR200T;              /* NOTE THAT 200T IS BACK.     1056
*                                                            @Y30DSMD*/
@RF01054 L     @14,MWACORAD                                        1056
         MVC   RSTATRTN(4,@14),@CC04085                            1056
*   RACB=MWARACB;                   /* POINT BACK TO USER ACB        */
         L     RACB,MWARACB                                        1057
*   PDPDSTYP=PDPDDNM;               /* RESET DATA SET TYPE TO DD NAME*/
         MVI   PDPDSTYP+280(@14),X'01'                             1058
*   IF RETCODE^=ZERO THEN           /* TERMINATING ERROR             */
         LTR   RETCODE,RETCODE                                     1059
         BZ    @RF01059                                            1059
*     RETURN TO LTRM200T;           /* GO TO TERM200T                */
         LA    @14,LTRM200T                                        1060
@EL00015 DS    0H                                                  1060
@EF00015 DS    0H                                                  1060
@ER00015 BR    @14                                                 1060
*   MWAMBLPT=MWABAMBL;              /* POINT TO BASE AMBL            */
@RF01059 L     @14,MWABAMBL                                        1061
         ST    @14,MWAMBLPT                                        1061
*   IF AMBLCAT=OFF THEN             /* NOT CATALOG OR SCRA OR SYSTEM
*                                      DATA SETS             @Z40WSRL*/
         TM    AMBLCAT(@14),B'00000010'                            1062
         BNZ   @RF01062                                            1062
*     CALL RMOVAMBL;                /* REMOVE BASE AMBL FROM VAT     */
         BAL   @14,RMOVAMBL                                        1063
*   CLWPRMCL=OFF;                   /* RESET PRIMARY CLOSE INDICATOR */
@RF01062 DS    0H                                                  1065
*   CLWSECCL=OFF;                   /* RESET SECONDARY CLOSE       1065
*                                      INDICATOR                     */
         NI    CLWPRMCL(RCORE),B'00111111'                         1065
*   RESPECIFY                                                      1066
*     RET RESTRICTED;                                              1066
*   RET=MWASAVEA;                                                  1067
         L     RET,MWASAVEA                                        1067
*   RESPECIFY                                                      1068
*    (RET,                                                         1068
*     RETCODE) UNRESTRICTED;                                       1068
*   END CLSBASE;                                                   1069
         B     @EL00015                                            1069
*CLSUPGR:                                                          1070
*                                                                  1070
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-CLOSE UPGRADE AMBL'S, REMOVE UPGRADE AMBL     */
*/*                    ENTRIES FROM THE VAT                          */
*/*      01   INPUTS-  1. POINTER TO UPGRADE TABLE IN BIBUPT         */
*/*      01   OUTPUTS- 1. ALL UPGRADE DATA SETS CLOSED               */
*/*                                                                  */
*/********************************************************************/
*                                                                  1070
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1070
CLSUPGR  DS    0H                                                  1071
*   RESPECIFY                                                      1071
*    (RET,                                                         1071
*     RETCODE) RESTRICTED;                                         1071
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1072
*   RESPECIFY                                                      1073
*     RET UNRESTRICTED;                                            1073
*   PDPFUNC=PDF107;                 /* SET FUNCTION CODE             */
         L     @14,MWACORAD                                        1074
         MVI   PDPFUNC+280(@14),X'6B'                              1074
*   DO MWAINDEX=1 TO UPTNOENT BY 1; /* GO THROUGH UPT                */
         LA    @14,1                                               1075
         ST    @14,MWAINDEX                                        1075
         B     @DE01075                                            1075
@DL01075 DS    0H                                                  1076
*     CLWPRMCL=ON;                  /* INDICATE PRIMARY CLOSE        */
         OI    CLWPRMCL(RCORE),B'10000000'                         1076
*     RACB=UPTRPL(MWAINDEX)->RPLDACB;/* POINT TO UPGRADE ACB         */
         MH    @14,@CH00033                                        1077
         L     @11,MWAMBLPT                                        1077
         L     @11,AMBLBIB(,@11)                                   1077
         L     @11,BIBUPT(,@11)                                    1077
         L     @05,UPTRPL-12(@14,@11)                              1077
         L     RACB,RPLDACB(,@05)                                  1077
*     PDPDSTYP=PDPUPGR;             /* INDICATE UPGRADE DATA SET     */
         L     @05,MWACORAD                                        1078
         MVI   PDPDSTYP+280(@05),X'04'                             1078
*     IF UPTF1NOP(MWAINDEX)=OFF THEN/* AIX IS OPENNED                */
         ALR   @11,@14                                             1079
         TM    UPTF1NOP-12(@11),B'00010000'                        1079
         BNZ   @RF01079                                            1079
*       DO;                                                        1080
*         RSTATRTN=IDAR200B;        /* NOTE THE TRANSFER OF CSECTS.
*                                                            @Y30DSMD*/
         MVC   RSTATRTN(4,@05),@CC04083                            1081
*         ACBBUSY=ON;               /* INDICATE ACB BUSY     @XM02092*/
         OI    ACBBUSY(RACB),B'00000001'                           1082
*         CALL IDA0200B;            /* CLOSE UPGRADE DATA SET        */
         L     @15,@CV05403                                        1083
         BALR  @14,@15                                             1083
*         ACBBUSY=OFF;              /* RESET BUSY BIT        @XM02092*/
         NI    ACBBUSY(RACB),B'11111110'                           1084
*         RSTATRTN=IDAR200T;        /* NOTE THE TRANSFER OF CSECTS.
*                                                            @Y30DSMD*/
         L     @14,MWACORAD                                        1085
         MVC   RSTATRTN(4,@14),@CC04085                            1085
*         IF RETCODE^=ZERO THEN     /* TERMINATING ERROR FROM      1086
*                                      IDA0200B                      */
         LTR   RETCODE,RETCODE                                     1086
         BZ    @RF01086                                            1086
*           DO;                                                    1087
*             RACB=MWARACB;         /* POINT BACK TO USER ACB        */
         L     RACB,MWARACB                                        1088
*             RETURN TO LTRM200T;   /* TERMINATION PROCESSING        */
         LA    @14,LTRM200T                                        1089
@EL00016 DS    0H                                                  1089
@EF00016 DS    0H                                                  1089
@ER00016 BR    @14                                                 1089
*           END;                                                   1090
*       END;                                                       1091
@RF01086 DS    0H                                                  1092
*     PDPDSTYP=PDPDDNM;             /* RESET DATA SET TYPE TO DD NAME*/
@RF01079 L     @14,MWACORAD                                        1092
         MVI   PDPDSTYP+280(@14),X'01'                             1092
*     MWAMBLPT=ACBAMBL;             /* POINT TO DUMMY AMBL           */
         L     @14,ACBAMBL(,RACB)                                  1093
         ST    @14,MWAMBLPT                                        1093
*     CALL RMOVAMBL;                /* DELETE AMBL FROM VAT          */
         BAL   @14,RMOVAMBL                                        1094
*   END;                                                           1095
         LA    @14,1                                               1095
         AL    @14,MWAINDEX                                        1095
         ST    @14,MWAINDEX                                        1095
@DE01075 L     @05,MWAMBLPT                                        1095
         L     @05,AMBLBIB(,@05)                                   1095
         L     @05,BIBUPT(,@05)                                    1095
         SLR   @09,@09                                             1095
         IC    @09,UPTNOENT(,@05)                                  1095
         CR    @14,@09                                             1095
         BNH   @DL01075                                            1095
*   RACB=MWARACB;                   /* POINT BACK TO USER ACB        */
         L     RACB,MWARACB                                        1096
*   MWAMBLPT=MWABAMBL;              /* RESTORE AMBL PTR TO BASE AMBL */
         L     @14,MWABAMBL                                        1097
         ST    @14,MWAMBLPT                                        1097
*   CLWPRMCL=OFF;                   /* RESET PRIMARY CLOSE INDICATOR */
         NI    CLWPRMCL(RCORE),B'01111111'                         1098
*   RESPECIFY                                                      1099
*     RET RESTRICTED;                                              1099
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        1100
*   RESPECIFY                                                      1101
*    (RET,                                                         1101
*     RETCODE) UNRESTRICTED;                                       1101
*   END CLSUPGR;                                                   1102
         B     @EL00016                                            1102
*CLSPHERE:                                                         1103
*                                                                  1103
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-CLOSE ENTIRE SPHERE, CLOSE UPGRADE DATA SETS  */
*/*                    IF UPT EXIST, DO VMT PROCESSING, FREE SPHERE  */
*/*                    AND PROTECTED SPHERE BLOCK, FREE BIB AND      */
*/*                    DECREMENT VSRT USE COUNT                      */
*/*      01   INPUTS-  1. POINTER TO VAT IN JSCBSHR                  */
*/*                    2. POINTER TO BIB IN AMBLBIB                  */
*/*      01   OUTPUTS- 1. FUNCTIONS PERFORMED                        */
*/*                                                                  */
*/* IN VS2 THIS ROUTINE IS MODIFIED TO HANDLE THE SPHERE VGTT AS     */
*/* WELL AS SPECIAL PROCESSING FOR GSR CLOSE.                .       */
*/* FOR GSR CLOSE, THE VSRTASCB FIELD IS CHECKED FOR ZERO WHEN       */
*/* THE USE COUNT GOES TO ZERO. IF THE ASCB FIELD HAS BEEN ZEROED    */
*/* THEN THE MEMORY WHICH DID THE GSR BLDVRP HAS TERMINATED. THIS    */
*/* WOULD LEAVE THE GLOBAL CORE UNAVAILABLE SO THE GSR POOL IS       */
*/* FORCE FREED BY INVOKING GSR DLVRP.                       @Y30DSMD*/
*/********************************************************************/
*                                                                  1103
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1103
CLSPHERE DS    0H                                                  1104
*   RESPECIFY                                                      1104
*     RET RESTRICTED;                                              1104
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        1105
*   RESPECIFY                                                      1106
*     RET UNRESTRICTED;                                            1106
*   MWAVATPT=JSCBSHR;               /* ADDRESSABILITY FOR VAT        */
         L     @05,CVTPTR                                          1107
         L     @05,CVTTCBP(,@05)                                   1107
         L     @05,TCBPTR(,@05)                                    1107
         L     @05,TCBJSCB(,@05)                                   1107
         L     MWAVATPT,JSCBSHR(,@05)                              1107
*   PDPFUNC=PDF106;                 /* SET FUNCTION CODE             */
         L     @05,MWACORAD                                        1108
         MVI   PDPFUNC+280(@05),X'6A'                              1108
*   IF BIBDACB^=ZERO THEN           /* IF BIB DUMMY AMBL EXIST       */
         L     @05,MWAMBLPT                                        1109
         L     @05,AMBLBIB(,@05)                                   1109
         L     @05,BIBDACB(,@05)                                   1109
         LTR   @05,@05                                             1109
         BZ    @RF01109                                            1109
*     DO;                                                          1110
*       MWAMBLPT=BIBDACB->ACBAMBL;  /* GET DUMMY AMBL ADDRESS        */
         L     @05,ACBAMBL(,@05)                                   1111
         ST    @05,MWAMBLPT                                        1111
*       CALL RMOVAMBL;              /* REMOVE DUMMY AMBL FROM VAT    */
         BAL   @14,RMOVAMBL                                        1112
*       MWAMBLPT=MWABAMBL;          /* RESTORE POINTER TO BASE AMBL  */
         L     @05,MWABAMBL                                        1113
         ST    @05,MWAMBLPT                                        1113
*     END;                                                         1114
*   IF BIBUPT^=ZERO THEN            /* UPT EXIST                     */
@RF01109 L     @05,MWAMBLPT                                        1115
         L     @05,AMBLBIB(,@05)                                   1115
         L     @05,BIBUPT(,@05)                                    1115
         LTR   @05,@05                                             1115
         BZ    @RF01115                                            1115
*     CALL CLSUPGR;                 /* CLOSE UPGRADE AIX'S           */
         BAL   @14,CLSUPGR                                         1116
*   IF AMBLDUMY=OFF THEN            /* IF NOT A DUMMY DATASET      1117
*                                                            @ZA29854*/
@RF01115 L     @05,MWAMBLPT                                        1117
         TM    AMBLDUMY(@05),B'00000001'                           1117
         BNZ   @RF01117                                            1117
*     CALL VMTPROC;                 /* VMT PROCESSING                */
*                                                                  1118
         BAL   @14,VMTPROC                                         1118
*   /*****************************************************************/
*   /*                                                               */
*   /* FREE THE SPACE POINTED TO BY THE WSHD.                @Y30DSMD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1119
*   MWAWSHPT=BIBWSHD;               /* POINT TO WORK SPACE HEADER    */
@RF01117 L     @05,MWAMBLPT                                        1119
         L     @05,AMBLBIB(,@05)                                   1119
         L     MWAWSHPT,BIBWSHD(,@05)                              1119
*   DO WHILE MWAWSHPT^=ZERO;        /* LOOP THRUGH WORK SPACE HEADERS*/
         B     @DE01120                                            1120
@DL01120 DS    0H                                                  1121
*     DO MWAINDEX=1 TO WSHDNUS BY 1;/* GO THRUGH ALL ACTIVE BLOCKS   */
         LA    @06,1                                               1121
         ST    @06,MWAINDEX                                        1121
         B     @DE01121                                            1121
@DL01121 DS    0H                                                  1122
*       MWADDRES=WSHDSAD(MWAINDEX); /* POINT TO BLOCK TO BE FREED    */
         SLA   @06,4                                               1122
         L     @05,WSHDSAD-16(@06,MWAWSHPT)                        1122
         ST    @05,MWADDRES                                        1122
*       MWAMNWRD=WSHDSFM(MWAINDEX); /* GET BYTES & SUBPOOL NUMBER    */
         L     @06,WSHDSFM-16(@06,MWAWSHPT)                        1123
         ST    @06,MWAMNWRD                                        1123
*       IF AMBLGSR=ON×AMBLCBIC=ON THEN/* IS THIS GSR OR CBIC @ZA16012*/
         L     @06,MWAMBLPT                                        1124
         TM    AMBLGSR(@06),B'01000000'                            1124
         BO    @RT01124                                            1124
         TM    AMBLCBIC(@06),B'10000000'                           1124
         BNO   @RF01124                                            1124
@RT01124 DS    0H                                                  1125
*         MWAFRKEY=DXUKEY;          /* IF SO PASS GSR KEY    @Z40ESSR*/
         L     @06,MWACORAD                                        1125
         MVC   MWAFRKEY(1),DXUKEY(@06)                             1125
*       IF MWADDRES^=ZERO THEN      /* IS THERE A BLOCK?     @ZA25527*/
@RF01124 L     @06,MWADDRES                                        1126
         LTR   @06,@06                                             1126
         BZ    @RF01126                                            1126
*         CALL FREECORE;            /* FREE THE BLOCK                */
         BAL   @14,FREECORE                                        1127
*     END;                                                         1128
*                                                                  1128
@RF01126 LA    @06,1                                               1128
         AL    @06,MWAINDEX                                        1128
         ST    @06,MWAINDEX                                        1128
@DE01121 CH    @06,WSHDNUS(,MWAWSHPT)                              1128
         BNH   @DL01121                                            1128
*     /***************************************************************/
*     /*                                                             */
*     /* FREE THE HEADERS THEMSELVES.                        @Z30SSMD*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  1129
*     MWADDRES=MWAWSHPT;            /* POINT TO WORK SPACE HEADERS TO
*                                      BE FREED                      */
         ST    MWAWSHPT,MWADDRES                                   1129
*     IF AMBLCAT=ON THEN            /* IF CATALOG OR SCRA            */
         L     @06,MWAMBLPT                                        1130
         TM    AMBLCAT(@06),B'00000010'                            1130
         BNO   @RF01130                                            1130
*       MWASPOOL=CATPOOL;           /* GET CATALOG SUBPOOL NUMBER    */
         MVI   MWASPOOL,X'E7'                                      1131
*     ELSE                          /* IF NOT CATALOG OR SCRA      1132
*                                                            @Z30SSRL*/
*       IF AMBLGSR=ON×AMBLCBIC=ON THEN/* IF GSR OR CBIC      @ZA16012*/
         B     @RC01130                                            1132
@RF01130 L     @06,MWAMBLPT                                        1132
         TM    AMBLGSR(@06),B'01000000'                            1132
         BO    @RT01132                                            1132
         TM    AMBLCBIC(@06),B'10000000'                           1132
         BNO   @RF01132                                            1132
@RT01132 DS    0H                                                  1133
*         MWAFRKEY=DXUKEY;          /* YES, PASS GSR KEY     @Z40ESSR*/
         L     @06,MWACORAD                                        1133
         MVC   MWAFRKEY(1),DXUKEY(@06)                             1133
*       ELSE                        /* NOT CATALOG OR SCRA OR GSR.   */
*         MWASPOOL=WSHDPOOL;        /* SUBPOOL NUMBER OF WSHD        */
         B     @RC01132                                            1134
@RF01132 IC    @06,WSHDPOOL(,MWAWSHPT)                             1134
         STC   @06,MWASPOOL                                        1134
*     MWABYTES=WSHDLEN;             /* LENGTH OF WORK SPACE HEADER   */
@RC01132 DS    0H                                                  1135
@RC01130 LH    @06,WSHDLEN(,MWAWSHPT)                              1135
         STCM  @06,7,MWABYTES                                      1135
*     MWAWSHPT=WSHDNEXT;            /* POINT TO NEXT WSHD            */
         L     @06,WSHDNEXT-1(,MWAWSHPT)                           1136
         LA    @06,0(,@06)                                         1136
         LR    MWAWSHPT,@06                                        1136
*     CALL FREECORE;                /* FREE WSHD                     */
         BAL   @14,FREECORE                                        1137
*   END;                                                           1138
@DE01120 LTR   MWAWSHPT,MWAWSHPT                                   1138
         BNZ   @DL01120                                            1138
*   MWAHEBPT=BIBSPHPT;              /* POINT TO SPHERE BLOCK         */
         L     @05,MWAMBLPT                                        1139
         L     @05,AMBLBIB(,@05)                                   1139
         L     MWAHEBPT,BIBSPHPT(,@05)                             1139
*   CALL FREESPHR;                  /* FREE SPHERE BLOCKS            */
         BAL   @14,FREESPHR                                        1140
*   MWAHEBPT=BIBPRSPH;              /* POINT TO PROTECTED SPHERE   1141
*                                      BLOCKS                        */
         L     @05,MWAMBLPT                                        1141
         L     @01,AMBLBIB(,@05)                                   1141
         L     MWAHEBPT,BIBPRSPH(,@01)                             1141
*   IF(AMBLCAT=OFF&AMBLLSR=OFF)×AMBLSDS=ON THEN/* NOT A CTLG,NOT LSR
*                                      OR SYSTEM DATA SET    @Z40WSRL*/
         TM    AMBLCAT(@05),B'00000010'                            1142
         BNZ   @GL00030                                            1142
         TM    AMBLLSR(@05),B'00100000'                            1142
         BZ    @RT01142                                            1142
@GL00030 L     @07,MWAMBLPT                                        1142
         TM    AMBLSDS(@07),B'00010000'                            1142
         BNO   @RF01142                                            1142
@RT01142 DS    0H                                                  1143
*     MWAPSBSW=ON;                  /* INDICATE PSB BEING FREED.   1143
*                                                            @Z30SSMD*/
         OI    MWAPSBSW,B'10000000'                                1143
*   CALL FREESPHR;                  /* FREE PROTECTED SPHERE BLOCKS  */
@RF01142 BAL   @14,FREESPHR                                        1144
*   MWAHEBPT=BIBPSAB;               /* FREE UP THE PSABS.    @Y30DSMD*/
         L     @05,MWAMBLPT                                        1145
         L     @05,AMBLBIB(,@05)                                   1145
         L     MWAHEBPT,BIBPSAB(,@05)                              1145
*   CALL FREESPHR;                  /* PROT. SPHERE AMBL BLOCKS.   1146
*                                                            @Y30DSMD*/
         BAL   @14,FREESPHR                                        1146
*   IF AMBLDUMY=ON THEN             /* IF CLOSING A DUMMY            */
         L     @05,MWAMBLPT                                        1147
         TM    AMBLDUMY(@05),B'00000001'                           1147
         BNO   @RF01147                                            1147
*     MWALISTP=ADDR(DUMYLIST);      /* POINT TO DUMMY LOAD LIST      */
         LA    MWALISTP,DUMYLIST                                   1148
*   ELSE                            /* IF NOT CLOSING A DUMMY        */
*     DO;                                                          1149
         B     @RC01147                                            1149
@RF01147 DS    0H                                                  1150
*       IF AMBLFSTP=ON THEN         /* IF FAST PATH (ICI) PROCESSING */
         L     @05,MWAMBLPT                                        1150
         TM    AMBLFSTP(@05),B'00010000'                           1150
         BNO   @RF01150                                            1150
*         MWALISTP=ADDR(ICILIST);   /* POINT TO ICI LOAD LIST        */
         LA    MWALISTP,ICILIST                                    1151
*       ELSE                        /* IF NOT ICI PROCESSING         */
*         MWALISTP=ADDR(NORMLIST);  /* POINT TO NORMAL LOAD LIST     */
         B     @RC01150                                            1152
@RF01150 LA    MWALISTP,NORMLIST                                   1152
*     END;                                                         1153
@RC01150 DS    0H                                                  1154
*   MWACOMNM=RCDMGTPR;              /* GET COMMON PART OF MODULE NAME*/
@RC01147 MVC   MWACOMNM(6),@CC00158                                1154
*   DO MWAINDEX=1 TO LDLNOENT;      /* LOOP THROUGH LOAD LIST        */
         LA    @15,1                                               1155
         B     @DE01155                                            1155
@DL01155 DS    0H                                                  1156
*     MWAMODID=LDLID(MWAINDEX);     /* LOAD LAST TWO CHAR OF MOD NAME*/
         ALR   @15,@15                                             1156
         ALR   @15,MWALISTP                                        1156
         BCTR  @15,0                                               1156
         MVC   MWAMODID(2),LDLID-1(@15)                            1156
*     GEN(DELETE EPLOC=MWAMODNM);   /* DECREMENT USE COUNT FOR MODULE*/
         DELETE EPLOC=MWAMODNM
*   END;                                                           1158
         LA    @15,1                                               1158
         AL    @15,MWAINDEX                                        1158
@DE01155 ST    @15,MWAINDEX                                        1158
         SLR   @14,@14                                             1158
         IC    @14,LDLNOENT(,MWALISTP)                             1158
         CR    @15,@14                                             1158
         BNH   @DL01155                                            1158
*   IF JFCAMSYN^=MWAZERNM&          /* SYNAD NAME EXIST              */
*       ACBEXLST>ONE&EXLLEN>FIFTEEN THEN/* EXLST HAS SYNAD           */
         LA    @05,100                                             1159
         AL    @05,MWACORAD                                        1159
         CLC   JFCAMSYN(8,@05),MWAZERNM                            1159
         BE    @RF01159                                            1159
         L     @15,ACBEXLST(,RACB)                                 1159
         C     @15,@CF00080                                        1159
         BNH   @RF01159                                            1159
         LH    @15,EXLLEN(,@15)                                    1159
         C     @15,@CF00133                                        1159
         BNH   @RF01159                                            1159
*     DO;                                                          1160
*       RESPECIFY                                                  1161
*         R6 RESTRICTED;                                           1161
*       R6=ADDR(JFCAMSYN);          /* GET ADDRESS OF SYNAD ROUTINE  */
         LA    R6,JFCAMSYN(,@05)                                   1162
*       GEN(DELETE EPLOC=(R6));     /* DELETE SYNAD                  */
         DELETE EPLOC=(R6)
*       EXLSYNP=ZERO;               /* ZERO SYNAD ADDRESS IN EXLST   */
         L     @07,ACBEXLST(,RACB)                                 1164
         SLR   @05,@05                                             1164
         STCM  @05,15,EXLSYNP(@07)                                 1164
*       RESPECIFY                                                  1165
*         R6 UNRESTRICTED;                                         1165
*     END;                                                         1166
*   IF AMBLCAT=ON THEN              /* IF CATALOG OR SCRA            */
@RF01159 L     @05,MWAMBLPT                                        1167
         TM    AMBLCAT(@05),B'00000010'                            1167
         BNO   @RF01167                                            1167
*     MWASPOOL=CATPOOL;             /* GET CATALOG SUBPOOL NUMBER    */
         MVI   MWASPOOL,X'E7'                                      1168
*   ELSE                            /* NOT CATALOG OR SCRA   @Z30SSRL*/
*     IF AMBLGSR=ON×AMBLCBIC=ON THEN/* IS THIS GSR OR CBIC   @ZA16012*/
         B     @RC01167                                            1169
@RF01167 L     @05,MWAMBLPT                                        1169
         TM    AMBLGSR(@05),B'01000000'                            1169
         BO    @RT01169                                            1169
         TM    AMBLCBIC(@05),B'10000000'                           1169
         BNO   @RF01169                                            1169
@RT01169 DS    0H                                                  1170
*       MWASPOOL=GSRSPOOL;          /* YES, USE GLOBAL CORE. @Y30DSMD*/
         MVI   MWASPOOL,X'F1'                                      1170
*     ELSE                          /* IF NOT CATALOG OR SCRA OR GSR.*/
*       MWASPOOL=BIBPOOL;           /* SUBPOOL NUMBER FOR BIB        */
         B     @RC01169                                            1171
@RF01169 MVI   MWASPOOL,X'FC'                                      1171
*   MWADDRES=AMBLBIB;               /* ADDRESS OF BIB                */
@RC01169 DS    0H                                                  1172
@RC01167 L     @05,MWAMBLPT                                        1172
         L     @05,AMBLBIB(,@05)                                   1172
         ST    @05,MWADDRES                                        1172
*   MWABYTES=LENGTH(IDABIB);        /* LENGTH OF BIB                 */
         MVC   MWABYTES(3),@CF04867+1                              1173
*   IF BIBVGTT^=ZERO THEN           /* IF VGTT EXIST         @Z40WSRL*/
         SLR   @15,@15                                             1174
         C     @15,BIBVGTT(,@05)                                   1174
         BE    @RF01174                                            1174
*     VGTTBIB=ZERO;                 /* MAKE NOTE OF BIB FREEMAIN.  1175
*                                                            @Z30SSMD*/
         L     @05,MWAVGTT                                         1175
         ST    @15,VGTTBIB(,@05)                                   1175
*   CALL FREECORE;                  /* FREE THE BIB          @Z40WSRL*/
@RF01174 BAL   @14,FREECORE                                        1176
*   IF AMBLLSR=ON THEN              /* IF LSR                        */
         L     @05,MWAMBLPT                                        1177
         TM    AMBLLSR(@05),B'00100000'                            1177
         BNO   @RF01177                                            1177
*     DO;                                                          1178
*       MWACSOP1=VATVUSE;           /* GET VAT VSRT USE COUNT        */
         L     MWACSOP1,VATVUSE(,MWAVATPT)                         1179
*LABEL1:                            /* LOOP UNTIL VATVUSE DECREMENTED*/
*       MWACSOP2=MWACSOP1-ONE;      /* DECREMENT USE COUNT BY ONE    */
LABEL1   LR    MWACSOP2,MWACSOP1                                   1180
         BCTR  MWACSOP2,0                                          1180
*       CS(MWACSOP1,MWACSOP2,VATVUSE);/* COMPARE AND SWAP            */
         CS    MWACSOP1,@09,VATVUSE(MWAVATPT)                      1181
*       BC(FOUR,LABEL1);            /* LOOP IF COMPARE AND SWAP    1182
*                                      FAILED                @Z30SSRL*/
         BC    4,LABEL1                                            1182
*     END;                                                         1183
*   ELSE                            /* IF NOT LSR THEN TEST  @Y30DSMD*/
*     IF AMBLGSR=ON THEN            /* IF GSR DATA SET,      @Y30DSMD*/
         B     @RC01177                                            1184
@RF01177 L     @11,MWAMBLPT                                        1184
         TM    AMBLGSR(@11),B'01000000'                            1184
         BNO   @RF01184                                            1184
*       DO;                         /* PROCESS THE GSR DATA SET.   1185
*                                                            @Y30DSMD*/
*         MWACBSPT=ADDR(CBSVSRT((DXUKEY/SIXTEEN)+ONE));/* BASE VSRT
*                                                            @Z40ESSR*/
         L     @11,MWACORAD                                        1186
         SLR   @15,@15                                             1186
         IC    @15,DXUKEY(,@11)                                    1186
         SRL   @15,4                                               1186
         SLA   @15,3                                               1186
         L     @11,CVTPTR                                          1186
         L     @11,CVTCBSP(,@11)                                   1186
         LA    @11,CBSVSRT(@15,@11)                                1186
         ST    @11,MWACBSPT                                        1186
*         MWACSOP1=BWAVSUSE;        /* GET VSRT USE COUNT    @Z40ESSR*/
         L     MWACSOP1,BWAVSUSE(,@11)                             1187
*LABEL1A:                           /* LOOP UNTIL USE COUNT        1188
*                                      DECREMENTED           @Z40ESSR*/
*         MWACSOP2=MWACSOP1-ONE;    /* DECREMENT USE COUNT BY ONE    */
LABEL1A  LR    MWACSOP2,MWACSOP1                                   1188
         BCTR  MWACSOP2,0                                          1188
*         IF MWACSOP2<ZERO THEN     /* IF THE COUNT IS MINUS,      1189
*                                                            @Z30SSMD*/
         LTR   MWACSOP2,MWACSOP2                                   1189
         BNM   @RF01189                                            1189
*           MWACSOP2=ZERO;          /* THEN FORCE IT TO ZERO.      1190
*                                                            @Z30SSMD*/
         SLR   MWACSOP2,MWACSOP2                                   1190
*         CS(MWACSOP1,MWACSOP2,BWAVSUSE);/* SWAP COUNTS      @Z40ESSR*/
@RF01189 L     @08,MWACBSPT                                        1191
         CS    MWACSOP1,@09,BWAVSUSE(@08)                          1191
*         BC(FOUR,LABEL1A);         /* IF CS FAILS LOOP TO LABEL1A.
*                                                            @Z30SSMD*/
         BC    4,LABEL1A                                           1192
*         CALL LOCKUP;              /* GET THE LOCAL MEMORY LOCK,  1193
*                                      SERIALIZE.            #Y30DSMD*/
         BAL   @14,LOCKUP                                          1193
*         VGTTVUSE=ZERO;            /* FORCE THE VGTT USE COUNT TO 1194
*                                      ZERO.                 @Z30SSMD*/
         L     @11,MWAVGTT                                         1194
         SLR   @05,@05                                             1194
         ST    @05,VGTTVUSE(,@11)                                  1194
*         CALL UNLOCK;              /* RELEASE THE LOCK NOW. #Y30DSMD*/
         BAL   @14,UNLOCK                                          1195
*         IF BWAVSUSE=ZERO THEN     /* IS VSRT USE COUNT ZERO?     1196
*                                                            @Z40ESSR*/
         SLR   @11,@11                                             1196
         L     @05,MWACBSPT                                        1196
         C     @11,BWAVSUSE(,@05)                                  1196
         BNE   @RF01196                                            1196
*           DO;                     /* IF THE GSR VSRT COUNT IS ZERO,
*                                      THEN SPECIAL PROCESSING     1197
*                                      OCCURS.               #Y30DSMD*/
*             IF VSRTASCB=ZERO THEN /* IF THE ASCB PTR HAS BEEN    1198
*                                      ZEROED,                       */
         L     @05,BWAVSPTR(,@05)                                  1198
         C     @11,VSRTASCB(,@05)                                  1198
         BNE   @RF01198                                            1198
*               DO;                 /* THEN THE VSRT WILL BE FORCE 1199
*                                      DELETED.              #Y30DSMD*/
*                 CALL FDLVRP;      /* CALL FORCE DELETE VRP.      1200
*                                                            #Y30DSMD*/
         BAL   @14,FDLVRP                                          1200
*               END;                /* END OF FORCE DLVRP.   #Y30DSMD*/
*           END;                    /* END OF LOGIC FOR            1202
*                                      VSRTASCB=ZERO.        #Y30DSMD*/
@RF01198 DS    0H                                                  1203
*       END;                        /* END OF GSR PROCESSING.      1203
*                                                            @Y30DSMD*/
*                                                                  1203
@RF01196 DS    0H                                                  1204
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THIS IS NOT CTLG(CTLG,SCRA,UCRA) OR LSR AND IS NOT A DUMMY */
*   /* DATASET THEN A VGTT EXISTS FOR THE SPHERE. IT IS DECHAINED AND*/
*   /* FREEMAINED.                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1204
*   IF((AMBLCAT=OFF&AMBLLSR=OFF)×   /* NOT CTLG OR LSR       @ZA29854*/
*       ACBSDS=ON)&                 /* OR SYSTEM DATA SET    @ZA29854*/
*       AMBLDUMY=OFF THEN           /* AND NOT DUMMY D/S     @ZA29854*/
@RF01184 DS    0H                                                  1204
@RC01177 L     @11,MWAMBLPT                                        1204
         TM    AMBLCAT(@11),B'00000010'                            1204
         BNZ   @GL00036                                            1204
         TM    AMBLLSR(@11),B'00100000'                            1204
         BZ    @GL00035                                            1204
@GL00036 TM    ACBSDS(RACB),B'00000010'                            1204
         BNO   @RF01204                                            1204
@GL00035 L     @11,MWAMBLPT                                        1204
         TM    AMBLDUMY(@11),B'00000001'                           1204
         BNZ   @RF01204                                            1204
*     DO;                           /* PROCESS THE VGTT.     #Y30DSMD*/
*       CALL REMVGTT;               /* REMOVE VGTT.          #Y30DSMD*/
         BAL   @14,REMVGTT                                         1206
*       CALL FREVGTT;               /* THEN FREEMAIN IT.     #Y30DSMD*/
         BAL   @14,FREVGTT                                         1207
*     END;                          /* END OF SPHERE VGTT PROCESSING.
*                                                            #Y30DSMD*/
*   RESPECIFY                                                      1209
*     RET RESTRICTED;                                              1209
@RF01204 DS    0H                                                  1210
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        1210
*   RESPECIFY                                                      1211
*     RET UNRESTRICTED;                                            1211
*   END CLSPHERE;                                                  1212
@EL00017 DS    0H                                                  1212
@EF00017 DS    0H                                                  1212
@ER00017 BR    @14                                                 1212
*FREESPHR:                                                         1213
*                                                                  1213
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-FREE SPHERE OR PROTECTED SPHERE BLOCK         */
*/*      01   INPUTS-  1. POINTER TO SPHERE OR PROTECTED SPHERE BLOCK*/
*/*                       IN MWAHEBPT                                */
*/*      01   OUTPUTS- 1. CONTROL BLOCKS FREED                       */
*/*                                                                  */
*/* IN VS2 THIS ROUTINE IS MODIFIED TO DETERMINE THE KEY OF THE CORE */
*/* FROM THE HEB ENTRY BEING PROCESSED. IF THE HEBKEY5 FIELD IS ON   */
*/* THEN A MODESET TO KEY50 IS DONE PRIOR TO THE FREEMAIN. IF       .*/
*/* HEBGSRKT IS ON THEN A MODESET TO GSRKEY. IF THE SUBPOOL  @Z40ESSR*/
*/* IS 250 THEN NEITHER FIELD SHUOLD HAVE BEEN SET. IF NEITHER     . */
*/* HEBKEY5 NOR HEBGSRKT IS ON THEN FREEMAIN MUST BE DONE IN @Z40ESSR*/
*/* KEY ZERO. THIS ROUTINE PASSES THE KEY TO THE FREECORE PROCEDURE  */
*/* IN FIELD MWAFRKEY.                                       @Y30DSMD*/
*/*                                                                 .*/
*/********************************************************************/
*                                                                  1213
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1213
FREESPHR DS    0H                                                  1214
*   RESPECIFY                                                      1214
*     RET RESTRICTED;                                              1214
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1215
*   RESPECIFY                                                      1216
*     RET UNRESTRICTED;                                            1216
*   DO WHILE MWAHEBPT^=ZERO;        /* LOOP THRUGH SPHERE BLOCK CHAIN*/
         B     @DE01217                                            1217
@DL01217 DS    0H                                                  1218
*     MWADDRES=HEBBLKPT;            /* ADDR OF SPHERE BLOCK TO BE  1218
*                                      FREED                         */
         L     @07,HEBBLKPT(,MWAHEBPT)                             1218
         ST    @07,MWADDRES                                        1218
*     MWASPOOL=HEBSP;               /* SUBPOOL OF SPHERE BLOCKS      */
         IC    @07,HEBSP(,MWAHEBPT)                                1219
         STC   @07,MWASPOOL                                        1219
*     MWABYTES=HEBLN;               /* LENGTH OF SPHERE BLOCK        */
         MVC   MWABYTES(3),HEBLN(MWAHEBPT)                         1220
*     MWAFRKEY=ZERO;                /* SET DEFAULT TO NO MODESET   1221
*                                      NEEDED.               @Z30SSMD*/
         MVI   MWAFRKEY,X'00'                                      1221
*     IF HEBKEY5=ON THEN            /* SPECIAL KEY 5 CORE?   @Z30SSMD*/
         TM    HEBKEY5(MWAHEBPT),B'01000000'                       1222
         BNO   @RF01222                                            1222
*       MWAFRKEY=K50;               /* INDICATE MODESET TO KEY FIVE
*                                      NEEDED.               @Z30SSMD*/
         MVI   MWAFRKEY,X'50'                                      1223
*     ELSE                          /* IF NOT FIVE TEST FOR SEVEN. 1224
*                                                            @Z30SSMD*/
*       IF HEBGSRKT=ON THEN         /* IS CORE IN GSR KEY?   @Z40ESSR*/
         B     @RC01222                                            1224
@RF01222 TM    HEBGSRKT(MWAHEBPT),B'00100000'                      1224
         BNO   @RF01224                                            1224
*         MWAFRKEY=HEBGSRK;         /* PASS GSR KEY          @Z40ESSR*/
         IC    @07,HEBGSRK(,MWAHEBPT)                              1225
         STC   @07,MWAFRKEY                                        1225
*     MWAHEBPT=HEBELCHN;            /* POINT TO NEXT SPHERE BLOCK    */
@RF01224 DS    0H                                                  1226
@RC01222 L     MWAHEBPT,HEBELCHN(,MWAHEBPT)                        1226
*     IF MWAPSBSW=ON THEN           /* PSB BEING FREED       @Z40WSRL*/
         TM    MWAPSBSW,B'10000000'                                1227
         BNO   @RF01227                                            1227
*       VGTTPSB=MWAHEBPT;           /* IF SO NOTE THE NEXT PSB ADDRS.
*                                                            @Y30DSMD*/
         L     @07,MWAVGTT                                         1228
         ST    MWAHEBPT,VGTTPSB(,@07)                              1228
*     CALL FREECORE;                /* FREE THE SPHERE BLOCK @Z40WSRL*/
@RF01227 BAL   @14,FREECORE                                        1229
*   END;                                                           1230
@DE01217 LTR   MWAHEBPT,MWAHEBPT                                   1230
         BNZ   @DL01217                                            1230
*   MWAPSBSW=OFF;                   /* RESET PSB SWITCH NOW THAT ALL
*                                      ARE DONE.             @Y30DSMD*/
         NI    MWAPSBSW,B'01111111'                                1231
*   RESPECIFY                                                      1232
*     RET RESTRICTED;                                              1232
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        1233
*   RESPECIFY                                                      1234
*     RET UNRESTRICTED;                                            1234
*   END FREESPHR;                                                  1235
@EL00018 DS    0H                                                  1235
@EF00018 DS    0H                                                  1235
@ER00018 BR    @14                                                 1235
*VMTPROC:                                                          1236
*                                                                  1236
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-DECREMENT UCB USE COUNTS AND FREE VMT'S       */
*/*      01   INPUTS-  1. POINTER TO FIRST VMT IN BIBVMT             */
*/*      01   OUTPUTS- 1. VMT'S FREED AND UCB USE COUNTS DECREMENTED */
*/*                                                                  */
*/********************************************************************/
*                                                                  1236
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1236
VMTPROC  DS    0H                                                  1237
*   RESPECIFY                                                      1237
*     RET RESTRICTED;                                              1237
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1238
*   RESPECIFY                                                      1239
*     RET UNRESTRICTED;                                            1239
*   MWAVMTPT=BIBVMT;                /* POINT TO FIRST VMT            */
         L     @05,MWAMBLPT                                        1240
         L     @01,AMBLBIB(,@05)                                   1240
         L     MWAVMTPT,BIBVMT(,@01)                               1240
*   PDPFUNC=PDF108;                 /* SET FUNCTION CODE FOR PD      */
         L     @08,MWACORAD                                        1241
         MVI   PDPFUNC+280(@08),X'6C'                              1241
*   IF AMBLCAT=ON&AMBLSCRA=OFF&AMBLSDS=OFF THEN/* IF THIS IS CATALOG
*                                                            @Z40WSRL*/
         TM    AMBLCAT(@05),B'00000010'                            1242
         BNO   @RF01242                                            1242
         TM    AMBLSCRA(@05),B'00011000'                           1242
         BNZ   @RF01242                                            1242
*     DO;                                                          1243
*       IF TIOEFSRT=VMTUCB(1) THEN  /* TIOT UCB MATCH VMT UCB        */
         L     @08,VMTUCB(,MWAVMTPT)                               1244
         L     @05,MWATIOTP                                        1244
         L     @05,TIOEFSRT-1(,@05)                                1244
         LA    @05,0(,@05)                                         1244
         CR    @08,@05                                             1244
         BNE   @RF01244                                            1244
*         DO;                                                      1245
*           MWAUCBPT=VMTUCB(1);     /* POINT TO UCB                  */
         LR    MWAUCBPT,@08                                        1246
*           CALL DCRUCBCT;          /* DECREMENT UCB USE COUNT       */
         BAL   @14,DCRUCBCT                                        1247
*         END;                                                     1248
*       MWADDRES=MWAVMTPT;          /* ADDRESS OF VMT TO BE FREED    */
@RF01244 ST    MWAVMTPT,MWADDRES                                   1249
*       MWABYTES=LENGTH(IDAVMT)+VMTNOVOL*LENGTH(VMTVOL);/* BYTES NO. */
         LH    @08,VMTNOVOL(,MWAVMTPT)                             1250
         SLA   @08,4                                               1250
         LA    @08,16(,@08)                                        1250
         STCM  @08,7,MWABYTES                                      1250
*       MWASPOOL=CATPOOL;           /* SUBPOOL NUMBER FOR VMT        */
         MVI   MWASPOOL,X'E7'                                      1251
*       CALL FREECORE;              /* FREE VMT                      */
         BAL   @14,FREECORE                                        1252
*     END;                                                         1253
*   ELSE                            /* NOT CATALOG                   */
*     DO WHILE MWAVMTPT^=ZERO;      /* IF VMT EXIST                  */
         B     @RC01242                                            1254
@RF01242 B     @DE01254                                            1254
@DL01254 DS    0H                                                  1255
*       IF AMBLSCRA=OFF&            /* NOT SCRA AND          @Z30SSMD*/
*           AMBLUCRA=OFF THEN       /* NOT UCRA THEN         @Z30SSMD*/
         L     @08,MWAMBLPT                                        1255
         TM    AMBLSCRA(@08),B'00001100'                           1255
         BNZ   @RF01255                                            1255
*         DO MWAINDEX=1 TO VMTNOVOL;/* LOOP THROUGH ENTRIES          */
         LA    @08,1                                               1256
         B     @DE01256                                            1256
@DL01256 DS    0H                                                  1257
*           IF VMTVLSER(MWAINDEX)^=MWAVLSER THEN/* VALID VOL SER NO. */
         SLA   @08,4                                               1257
         ST    @08,@TF00001                                        1257
         ALR   @08,MWAVMTPT                                        1257
         CLC   VMTVLSER-16(6,@08),MWAVLSER                         1257
         BE    @RF01257                                            1257
*             DO;                                                  1258
*               MWAUCBPT=VMTUCB(MWAINDEX);/* POINT TO UCB            */
         L     @08,@TF00001                                        1259
         L     MWAUCBPT,VMTUCB-16(@08,MWAVMTPT)                    1259
*               CALL DCRUCBCT;      /* DECREMENT UCB USE COUNT       */
         BAL   @14,DCRUCBCT                                        1260
*             END;                                                 1261
*         END;                                                     1262
@RF01257 LA    @08,1                                               1262
         AL    @08,MWAINDEX                                        1262
@DE01256 ST    @08,MWAINDEX                                        1262
         CH    @08,VMTNOVOL(,MWAVMTPT)                             1262
         BNH   @DL01256                                            1262
*       MWADDRES=MWAVMTPT;          /* ADDRESS OF VMT TO BE FREED    */
@RF01255 ST    MWAVMTPT,MWADDRES                                   1263
*       MWABYTES=LENGTH(IDAVMT)+VMTNOVOL*LENGTH(VMTVOL);/* BYTES TO
*                                      BE FREED                      */
         LH    @08,VMTNOVOL(,MWAVMTPT)                             1264
         SLA   @08,4                                               1264
         LA    @08,16(,@08)                                        1264
         STCM  @08,7,MWABYTES                                      1264
*       IF AMBLCAT=ON THEN          /* IF CATALOG OR SCRA            */
         L     @08,MWAMBLPT                                        1265
         TM    AMBLCAT(@08),B'00000010'                            1265
         BNO   @RF01265                                            1265
*         MWASPOOL=CATPOOL;         /* SUBPOOL NUMBER FOR CATALOG    */
         MVI   MWASPOOL,X'E7'                                      1266
*       ELSE                        /* NOT CATALOG OR SCRA   @Z30SSRL*/
*         IF AMBLGSR=ON×AMBLCBIC=ON THEN/* IS THIS GSR OR CBIC     1267
*                                                            @ZA16012*/
         B     @RC01265                                            1267
@RF01265 L     @08,MWAMBLPT                                        1267
         TM    AMBLGSR(@08),B'01000000'                            1267
         BO    @RT01267                                            1267
         TM    AMBLCBIC(@08),B'10000000'                           1267
         BNO   @RF01267                                            1267
@RT01267 DS    0H                                                  1268
*           MWASPOOL=GSRSPOOL;      /* YES, USE GLOBAL CORE. @Y30DSMD*/
         MVI   MWASPOOL,X'F1'                                      1268
*         ELSE                      /* NOT CATALOG OR SCRA OR GSR.   */
*           MWASPOOL=VMTPOOL;       /* SUBPOOL NUMBER FOR VMT        */
         B     @RC01267                                            1269
@RF01267 MVI   MWASPOOL,X'FC'                                      1269
*       MWAVMTPT=VMTNXT;            /* POINT TO NEXT VMT             */
@RC01267 DS    0H                                                  1270
@RC01265 L     MWAVMTPT,VMTNXT(,MWAVMTPT)                          1270
*       CALL FREECORE;              /* FREE VMT'S                    */
         BAL   @14,FREECORE                                        1271
*     END;                                                         1272
@DE01254 LTR   MWAVMTPT,MWAVMTPT                                   1272
         BNZ   @DL01254                                            1272
*   RESPECIFY                                                      1273
*     RET RESTRICTED;                                              1273
@RC01242 DS    0H                                                  1274
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        1274
*   RESPECIFY                                                      1275
*     RET UNRESTRICTED;                                            1275
*   END VMTPROC;                                                   1276
@EL00019 DS    0H                                                  1276
@EF00019 DS    0H                                                  1276
@ER00019 BR    @14                                                 1276
*DCRUCBCT:                                                         1277
*                                                                  1277
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-DECREMENT UCB USE COUNT                       */
*/*      01   INPUTS-  1. POINTER TO UCB IN MWAUCBPT                 */
*/*      01   OUTPUTS- 1. UCB USE COUNT DECREMENTED                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  1277
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1277
DCRUCBCT DS    0H                                                  1278
*   RESPECIFY                                                      1278
*    (R6,                                                          1278
*     R7,                                                          1278
*     R8,                                                          1278
*     RET) RESTRICTED;                                             1278
*   MWASAVEC=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEC                                        1279
*   RET=MWAUCBPT;                   /* GET POINTER TO UCB            */
         LR    RET,MWAUCBPT                                        1280
*   IF UCBDMCT^='00'X THEN          /* IF UCB USE COUNT IS NOT ZERO  */
         CLI   UCBDMCT(MWAUCBPT),X'00'                             1281
         BE    @RF01281                                            1281
*     DO;                                                          1282
*       GEN;                                                       1283
*                                  /*DECREMENT UCB USE COUNT         */
THREE    EQU   3                       CONSTANT OF THREE
LABEL2   L     R6,UCBDMCT-THREE(RET)   LOAD FWORD WITH UCB USE COUNT
         SR    R7,R7                   ZERO REGISTER 7
         IC    R7,UCBDMCT(RET)         GET UCB USE COUNT
         BCTR  R7,R0                   DECREMENT USE COUNT BY ONE
         L     R8,UCBDMCT-THREE(RET)   GET FWORD WITH UCB USE COUNT
         SRL   R8,8                    SHIFT OUT OLD USE COUNT
         SLL   R8,8                    SHIFT BACK TO ORIGINAL POSITION
         OR    R7,R8                   LOGICALLY OR IN NEW USE COUNT
         CS    R6,R7,UCBDMCT-THREE(RET) COMPARE AND SWAP
         BC    7,LABEL2                IF UNSUCCESSFUL TRY AGAIN
*     END;                                                         1284
*   RET=MWASAVEC;                   /* GET RETURN ADDRESS            */
@RF01281 L     RET,MWASAVEC                                        1285
*   RESPECIFY                                                      1286
*    (R6,                                                          1286
*     R7,                                                          1286
*     R8,                                                          1286
*     RET) UNRESTRICTED;                                           1286
*   END DCRUCBCT;                                                  1287
@EL00020 DS    0H                                                  1287
@EF00020 DS    0H                                                  1287
@ER00020 BR    @14                                                 1287
*FREECORE:                                                         1288
*                                                                  1288
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-FREEMAIN CORE STORAGE                         */
*/*      01   INPUTS-  1. SUBPOOL NUMBER IN MWASPOOL                 */
*/*                    2. NUMBER OF BYTES TO BE FREED IN MWABYTES    */
*/*                    3. ADDRESS OF CORE TO BE FREED IN MWADDRES    */
*/*      01   OUTPUTS- 1. CORE STORAGE FREED                         */
*/*                                                                  */
*/* IN VS2 THIS ROUTINE IS MODIFIED TO HANDLE KEY 0 TO 7     @Z40ESSR*/
*/* CORE. THE ROUTINE WILL CHECK MWAFRKEY TO DETERMINE WHETHER OR    */
*/* NOT A MODESET IS NEEDED PRIOR TO THE FREEMAIN. THE DEFAULT IS TO */
*/* REMAIN IN KEY ZERO WHEN FREEMAINING. THIS ROUTINE WILL SET THE   */
*/* FIELD MWAFRKEY TO ZERO AFTER THE SUCCESSFUL FREEMAIN TO INSURE   */
*/* THE DEFAULT OF ZERO.                                     @Y30DSMD*/
*/*                                                                 .*/
*/********************************************************************/
*                                                                  1288
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1288
FREECORE DS    0H                                                  1289
*   RESPECIFY                                                      1289
*    (R0,                                                          1289
*     R1,                                                          1289
*     RET) RESTRICTED;                                             1289
*   MWASAVEC=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEC                                        1290
*   RESPECIFY                                                      1291
*     RET UNRESTRICTED;                                            1291
*   IF MWAFRKEY<=K70 THEN           /* IF MODESET IS REQUIRED THEN 1292
*                                                            @Z40ESSR*/
         CLI   MWAFRKEY,X'70'                                      1292
         BH    @RF01292                                            1292
*     DO;                           /*                       @Z40ESSR*/
*       R1=MWAFRKEY;                /* LOAD KEY INTO REG     @Z40ESSR*/
         SLR   R1,R1                                               1294
         IC    R1,MWAFRKEY                                         1294
*       SPKA(R1);                   /* MODESET TO SYSTEM KEY @Z40ESSR*/
         SPKA  0(R1)                                               1295
*     END;                          /*                       @Z40ESSR*/
*   R1=MWADDRES;                    /* ADDRESS OF CORE TO BE FREED   */
@RF01292 L     R1,MWADDRES                                         1297
*   R0=MWAMNWRD;                    /* SUBPOOL NO. AND BYTES TO BE 1298
*                                      FREE                          */
         L     R0,MWAMNWRD                                         1298
*   GEN(FREEMAIN R,LV=(R0),A=(R1)); /* FREEMAIN                      */
         FREEMAIN R,LV=(R0),A=(R1)
*   GEN( MODESET EXTKEY=ZERO);      /* FORCE KEY ZERO.       @Z30SSMD*/
*                                                                  1300
          MODESET EXTKEY=ZERO
*   /*****************************************************************/
*   /*                                                               */
*   /* RESET MWAFRKEY TO INSURE THE DEFAULT OF ZERO.         @Y30DSMD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1301
*   MWAFRKEY=K00;                   /* RESET FREEMAIN SWITCH.      1301
*                                                            @Y30DSMD*/
         MVI   MWAFRKEY,X'00'                                      1301
*   RESPECIFY                                                      1302
*     RET RESTRICTED;                                              1302
*   RET=MWASAVEC;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEC                                        1303
*   RESPECIFY                                                      1304
*    (R0,                                                          1304
*     R1,                                                          1304
*     RET) UNRESTRICTED;                                           1304
*   END FREECORE;                                                  1305
@EL00021 DS    0H                                                  1305
@EF00021 DS    0H                                                  1305
@ER00021 BR    @14                                                 1305
*RMOVAMBL:                                                         1306
*                                                                  1306
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-REMOVE AMBL ENTRY FROM VAT                    */
*/*      01   INPUTS-  1. POINTER TO AMBL IN MWAMBLPT                */
*/*      01   OUTPUTS- 1. AMBL ENTRY DELETED FROM VAT                */
*/*                                                                  */
*/********************************************************************/
*                                                                  1306
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1306
RMOVAMBL DS    0H                                                  1307
*   RESPECIFY                                                      1307
*     RET RESTRICTED;                                              1307
*   MWASAVEC=RET;                   /* SAVE CALLER RETURN ADDRESS    */
         ST    RET,MWASAVEC                                        1308
*   RESPECIFY                                                      1309
*     RET UNRESTRICTED;                                            1309
*   MWAVATPT=JSCBSHR;               /* VAT POINTED TO BY JSCBSHR     */
         L     @05,CVTPTR                                          1310
         L     @05,CVTTCBP(,@05)                                   1310
         L     @05,TCBPTR(,@05)                                    1310
         L     @05,TCBJSCB(,@05)                                   1310
         L     MWAVATPT,JSCBSHR(,@05)                              1310
*   DO WHILE AMBLVRT^=VATVRT&MWAVATPT^=ZERO;/* GO TO CORRECT VAT     */
         B     @DE01311                                            1311
@DL01311 DS    0H                                                  1312
*     MWAVATPT=VATNEXT;             /* IF NOT CORRECT VAT GOTO NEXT
*                                      ONE                           */
         L     MWAVATPT,VATNEXT(,MWAVATPT)                         1312
*   END;                                                           1313
@DE01311 L     @05,MWAMBLPT                                        1313
         CLC   AMBLVRT(1,@05),VATVRT(MWAVATPT)                     1313
         BE    @DC01311                                            1313
         LTR   MWAVATPT,MWAVATPT                                   1313
         BNZ   @DL01311                                            1313
@DC01311 DS    0H                                                  1314
*   RESPECIFY                                                      1314
*    (R6,                                                          1314
*     R7,                                                          1314
*     R8) RESTRICTED;                                              1314
*   IF MWAVATPT^=ZERO THEN          /* DOES VAT EXIST                */
         SLR   @09,@09                                             1315
         CR    MWAVATPT,@09                                        1315
         BE    @RF01315                                            1315
*     DO;                           /* YES                           */
*       VATAMBL(AMBLENO)=ZERO;      /* ZERO AMBL ENTRY IN VAT        */
         L     @01,MWAMBLPT                                        1317
         SLR   @15,@15                                             1317
         IC    @15,AMBLENO(,@01)                                   1317
         SLA   @15,2                                               1317
         ST    @09,VATAMBL-4(@15,MWAVATPT)                         1317
*       MWACSOP1=VATNAE;            /* GET CORRENT NO. OF ACTIVE   1318
*                                      ENTRIES                       */
         L     MWACSOP1,VATNAE(,MWAVATPT)                          1318
*LABEL3:                            /* LOOP UNTIL VATNAE DECREMENTED */
*       MWACSOP2=MWACSOP1-ONE;      /* DECREMENT NUMBER BY ONE       */
LABEL3   LR    MWACSOP2,MWACSOP1                                   1319
         BCTR  MWACSOP2,0                                          1319
*       CS(MWACSOP1,MWACSOP2,VATNAE);/* ATTEMPT COMPARE AND SWAP     */
         CS    MWACSOP1,@09,VATNAE(MWAVATPT)                       1320
*       BC(FOUR,LABEL3);            /* LOOP IF COMPARE AND SWAP    1321
*                                      FAILED                @Z30SSRL*/
         BC    4,LABEL3                                            1321
*     END;                                                         1322
*   MWAVATPT=JSCBSHR;               /* RESTORE VAT POINTER FROM    1323
*                                      JSCBSHR                       */
@RF01315 L     @09,CVTPTR                                          1323
         L     @09,CVTTCBP(,@09)                                   1323
         L     @09,TCBPTR(,@09)                                    1323
         L     @09,TCBJSCB(,@09)                                   1323
         L     MWAVATPT,JSCBSHR(,@09)                              1323
*   RESPECIFY                                                      1324
*     RET RESTRICTED;                                              1324
*   RET=MWASAVEC;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEC                                        1325
*   RESPECIFY                                                      1326
*    (R6,                                                          1326
*     R7,                                                          1326
*     R8,                                                          1326
*     RET) UNRESTRICTED;                                           1326
*   END RMOVAMBL;                                                  1327
@EL00022 DS    0H                                                  1327
@EF00022 DS    0H                                                  1327
@ER00022 BR    @14                                                 1327
*LOCKUP:                                                           1328
*                                                                  1328
*/********************************************************************/
*/*                                                                 .*/
*/*      01   FUNCTION-OBTAIN THE LOCAL LOCK TO SERIALIZE A PROCESS. */
*/*      01   INPUTS-  1.NONE BUT LOCAL LOCK MUST NOT ALREADY BE HELD*/
*/*      01   OUTPUTS- 1. LOCAL MEMORY LOCK IS OBTAINED.            .*/
*/*                                                          @Y30DSMD*/
*/********************************************************************/
*                                                                  1328
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @Y30DSMD*/
LOCKUP   DS    0H                                                  1329
*   RFY                                                            1329
*    (R1,                                                          1329
*     R11,                                                         1329
*     RET) RSTD;                    /* INFORM THE COMPILER.  @Y30DSMD*/
*   MWASAVEF=RET;                   /* SAVE THE RETURN ADDRESS.    1330
*                                                            @Y30DSMD*/
         ST    RET,MWASAVEF                                        1330
*   MWALCKA=R11;                    /* SAVE OFF REGISTER ELEVEN.   1331
*                                                            @Y30DSMD*/
         ST    R11,MWALCKA                                         1331
*   RFY                                                            1332
*     R11 UNRSTD;                   /* INFORM THE COMPILER.  @Y30DSMD*/
*   MWALCKB=R12;                    /* SAVE OFF REGISTER TWELVE.   1333
*                                                            @Y30DSMD*/
         ST    R12,MWALCKB                                         1333
*   MWALCKC=R1;                     /* REGISTER ONE ALSO IS SAVED. 1334
*                                                            @Y30DSMD*/
         ST    R1,MWALCKC                                          1334
*   R1=R13;                         /* SWITCH REGISTER 13 FOR LATER.
*                                                            @Y30DSMD*/
         LR    R1,R13                                              1335
*   GEN SETS(R11,R12,R13,RET) REFS(PSALITA,FLC);                   1336
*                                                          /*@Y30DSMD*/
          SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                       *
               RELATED=(LOCAL,IDA0200T(UNLOCK))
*   R13=R1;                         /* RESTORE R13.          @Y30DSMD*/
         LR    R13,R1                                              1337
*   R1=MWALCKC;                     /* RESTORE R1.           @Y30DSMD*/
         L     R1,MWALCKC                                          1338
*   R12=MWALCKB;                    /* DO THE SAME FOR TWELEVE.    1339
*                                                            @Y30DSMD*/
         L     R12,MWALCKB                                         1339
*   RFY                                                            1340
*     R11 RSTD;                     /* INFORM THE COMPILER.  @Y30DSMD*/
*   R11=MWALCKA;                    /* AND FINALLY ELEVEN.   @Y30DSMD*/
         L     R11,MWALCKA                                         1341
*   RFY                                                            1342
*     R11 UNRSTD;                   /* INFORM THE COMPILER.  @Y30DSMD*/
*   RFY                                                            1343
*     RET RSTD;                     /* INFORM THE COMPILER.  @Y30DSMD*/
*   RET=MWASAVEF;                   /* RESTORE THE RETURN ADDRESS. 1344
*                                                            @Y30DSMD*/
         L     RET,MWASAVEF                                        1344
*   RFY                                                            1345
*    (RET,                                                         1345
*     R1) UNRSTD;                   /* INFORM THE COMPILER.  @Y30DSMD*/
*   END LOCKUP;                     /* END OF LOCK UP ROUTINE.     1346
*                                                            @Y30DSMD*/
@EL00023 DS    0H                                                  1346
@EF00023 DS    0H                                                  1346
@ER00023 BR    @14                                                 1346
*UNLOCK:                                                           1347
*                                                                  1347
*/********************************************************************/
*/*                                                                 .*/
*/*      01   FUNCTION-RELEASE THE LOCAL LOCK TO RELEASE A PROCESS.  */
*/*      01   INPUTS-  1.NONE BUT LOCAL LOCK MUST  ALREADY BE HELD.  */
*/*      01   OUTPUTS- 1. LOCAL MEMORY LOCK IS RELEASED .           .*/
*/*                                                          @Y30DSMD*/
*/********************************************************************/
*                                                                  1347
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @Y30DSMD*/
UNLOCK   DS    0H                                                  1348
*   RFY                                                            1348
*    (RET,                                                         1348
*     R1,                                                          1348
*     R11) RSTD;                    /* INFORM THE COMPILER.  @Y30DSMD*/
*   MWASAVEF=RET;                   /* SAVE THE RETURN ADDRESS.    1349
*                                                            @Y30DSMD*/
         ST    RET,MWASAVEF                                        1349
*   RFY                                                            1350
*     RET UNRSTD;                   /* INFORM THE COMPILER.  @Y30DSMD*/
*   MWALCKA=R11;                    /* SAVE OFF REGISTER ELEVEN.   1351
*                                                            @Y30DSMD*/
         ST    R11,MWALCKA                                         1351
*   RFY                                                            1352
*     R11 UNRSTD;                   /* INFORM THE COMPILER.  @Y30DSMD*/
*   MWALCKB=R12;                    /* SAVE OFF REGISTER TWELVE.   1353
*                                                            @Y30DSMD*/
         ST    R12,MWALCKB                                         1353
*   MWALCKC=R1;                     /* REGISTER ONE ALSO IS SAVED. 1354
*                                                            @Y30DSMD*/
         ST    R1,MWALCKC                                          1354
*   R1=R13;                         /* SWITCH REGISTER 13 FOR LATER.
*                                                            @Y30DSMD*/
         LR    R1,R13                                              1355
*   GEN SETS(R11,R12,R13,RET) REFS(PSALITA,FLC);                   1356
*                                                          /*@Y30DSMD*/
          SETLOCK RELEASE,TYPE=LOCAL,                                  *
               RELATED=(LOCAL,IDA0200T(LOCKUP))
*   R13=R1;                         /* RESTORE R13.          @Y30DSMD*/
         LR    R13,R1                                              1357
*   R1=MWALCKC;                     /* RESTORE R1.           @Y30DSMD*/
         L     R1,MWALCKC                                          1358
*   R12=MWALCKB;                    /* DO THE SAME FOR TWELEVE.    1359
*                                                            @Y30DSMD*/
         L     R12,MWALCKB                                         1359
*   RFY                                                            1360
*     R11 RSTD;                     /* INFORM THE COMPILER.  @Y30DSMD*/
*   R11=MWALCKA;                    /* AND FINALLY ELEVEN.   @Y30DSMD*/
         L     R11,MWALCKA                                         1361
*   RFY                                                            1362
*     R11 UNRSTD;                   /* INFORM THE COMPILER.  @Y30DSMD*/
*   RFY                                                            1363
*     RET RSTD;                     /* INFORM THE COMPILER.  @Y30DSMD*/
*   RET=MWASAVEF;                   /* RESTORE THE RETURN ADDRESS. 1364
*                                                            @Y30DSMD*/
         L     RET,MWASAVEF                                        1364
*   RFY                                                            1365
*    (R1,                                                          1365
*     RET) UNRSTD;                  /* KEEP COMPILER INFORMED.     1365
*                                                            @Y30DSMD*/
*   END UNLOCK;                     /* END OF UNLOCK ROUTINE.      1366
*                                                            @Y30DSMD*/
@EL00024 DS    0H                                                  1366
@EF00024 DS    0H                                                  1366
@ER00024 BR    @14                                                 1366
*REMVGTT:                                                          1367
*                                                                  1367
*/********************************************************************/
*/*      01  FUNCTION-REMOVE THE SPHERE VGTT FROM THE ASCB/VGTT      */
*/*                   CHAIN.                                        .*/
*/*      01  INPUT-MWAVGTT CONTAINS THE VGTT ADDRESS.               .*/
*/*      01  OUTPUT-THE SPHERE VGTT IN MWAVGTT IS DECHAINED.        .*/
*/********************************************************************/
*                                                                  1367
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @Y30DSMD*/
REMVGTT  DS    0H                                                  1368
*   RFY                                                            1368
*    (R14,                                                         1368
*     RET) RSTD;                    /* INFORM THE COMPILER.  @Y30DSMD*/
*   MWASAVEE=RET;                   /* SAVE THE RETURN ADDRESS.    1369
*                                                            @Y30DSMD*/
         ST    RET,MWASAVEE                                        1369
*   CALL LOCKUP;                    /* SERIALIZE THIS PROCESS.     1370
*                                                            @Y30DSMD*/
         BAL   @14,LOCKUP                                          1370
*   IF ASCBVGTT=MWAVGTT THEN        /* IS THIS VGTT FIRST ON CHAIN?
*                                                            @Y30DSMD*/
         L     @15,MWAVGTT                                         1371
         L     @11,PSAAOLD                                         1371
         L     @05,ASCBVGTT(,@11)                                  1371
         CR    @05,@15                                             1371
         BNE   @RF01371                                            1371
*     DO;                           /* IF SO , THEN USE THIS LOGIC.
*                                                            @Y30DSMD*/
*       MWACSOP2=VGTTNEXT;          /* GET NEXT VGTT FOR CHAIN HEAD.
*                                                            @Y30DSMD*/
         L     MWACSOP2,VGTTNEXT(,@15)                             1373
*       MWACSOP1=ASCBVGTT;          /* GET THE EFFECTED LOCATION.  1374
*                                                            @Y30DSMD*/
         L     @15,PSAAOLD                                         1374
         L     @15,ASCBVGTT(,@15)                                  1374
         LR    MWACSOP1,@15                                        1374
*       CS(MWACSOP1,MWACSOP2,ASCBVGTT);/* SET A NEW CHAIN HEAD.      */
         CS    MWACSOP1,@09,ASCBVGTT(@11)                          1375
*       BC(EIGHT,DECHNV1);          /* GOTO DECHNV1 IF SWAP WORKED 1376
*                                                            @Z30SSRL*/
         BC    8,DECHNV1                                           1376
*     END;                          /* IF SWAP FAILED OR IF NOT FIRST
*                                      VGTT THEN FALL THRU.          */
*   R14=ASCBVGTT;                   /* GET THE FIRCT VGTT ON CHAIN.
*                                                            @Y30DSMD*/
@RF01371 L     @11,PSAAOLD                                         1378
         L     R14,ASCBVGTT(,@11)                                  1378
*   DO WHILE(R14->VGTTNEXT^=MWAVGTT&R14^=ZERO);/* SCAN THE VGTT'S  1379
*                                                            @Z30SSRL*/
         B     @DE01379                                            1379
@DL01379 DS    0H                                                  1380
*     R14=R14->VGTTNEXT;            /* LOOP UNTIL END OR VGTT FOUND.
*                                                            @Y30DSMD*/
         L     R14,VGTTNEXT(,R14)                                  1380
*   END;                            /* IF NOT FOUND R14=ZERO.      1381
*                                                            @Y30DSMD*/
@DE01379 CLC   VGTTNEXT(4,R14),MWAVGTT                             1381
         BE    @DC01379                                            1381
         LTR   R14,R14                                             1381
         BNZ   @DL01379                                            1381
@DC01379 DS    0H                                                  1382
*   IF R14^=ZERO THEN               /* WAS THE VGTT ON THE CHAIN?  1382
*                                                            @Z30SSRL*/
         LTR   R14,R14                                             1382
         BZ    @RF01382                                            1382
*     R14->VGTTNEXT=MWAVGTT->VGTTNEXT;/* IF SO, DECHAIN IT.          */
         L     @15,MWAVGTT                                         1383
         L     @15,VGTTNEXT(,@15)                                  1383
         ST    @15,VGTTNEXT(,R14)                                  1383
*   ELSE                            /* IF NOT FOUND THEN IGNORE THE
*                                      DECHAIN.              @Y30DSMD*/
*     ;                                                            1384
@RF01382 DS    0H                                                  1385
*DECHNV1:                           /* COME TO THIS LABEL IF VGTT  1385
*                                      FIRST AND DECHAINED.          */
*   CALL UNLOCK;                    /* SERIALIZATION IS ENDED.     1385
*                                                            @Y30DSMD*/
DECHNV1  BAL   @14,UNLOCK                                          1385
*   RET=MWASAVEE;                   /* RESTORE RETURN ADDRESS.     1386
*                                                            @Y30DSMD*/
         L     RET,MWASAVEE                                        1386
*   RFY                                                            1387
*    (RET,                                                         1387
*     R14) UNRSTD;                  /* INFORM THE COMPILER.  @Y30DSMD*/
*   END REMVGTT;                    /* END OF REMVGTT ROUTINE.     1388
*                                                            @Y30DSMD*/
@EL00025 DS    0H                                                  1388
@EF00025 DS    0H                                                  1388
@ER00025 BR    @14                                                 1388
*FREVGTT:                                                          1389
*                                                                  1389
*/********************************************************************/
*/*      01  FUNCTION-FREEMAIN THE VGTT FOR THE SPHERE.             .*/
*/*      01  INPUT-MWAVGTT CONTAINS THE ADDRESS OF THE VGTT.        .*/
*/*      01  OUTPUT-MWAVGTT IS NOT ZEROED, VGTT IS FREEMAINED.      .*/
*/********************************************************************/
*                                                                  1389
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @Y30DSMD*/
FREVGTT  DS    0H                                                  1390
*   RFY                                                            1390
*     RET RSTD;                     /* INFORM THE COMPILER.  @Y30DSMD*/
*   MWASAVEE=RET;                   /* SAVE OFF THE RETURN ADDRESS.
*                                                            @Y30DSMD*/
         ST    RET,MWASAVEE                                        1391
*   RFY                                                            1392
*     RET UNRSTD;                   /* INFORM THE COMPILER.  @Y30DSMD*/
*   MWADDRES=MWAVGTT;               /* GET THE ADDRESS TO FREE.    1393
*                                                            @Y30DSMD*/
         L     @11,MWAVGTT                                         1393
         ST    @11,MWADDRES                                        1393
*   MWABYTES=VGTTSIZE;              /* GET THE SIZE OF THE VGTT.   1394
*                                                            @Y30DSMD*/
         MVC   MWABYTES(3),VGTTSIZE+1(@11)                         1394
*   MWASPOOL=VGTTSP;                /* GET THE SUBPOOL.      @Y30DSMD*/
         IC    @05,VGTTSP(,@11)                                    1395
         STC   @05,MWASPOOL                                        1395
*   CALL FREECORE;                  /* FREEMIAN THE VGTT, DONOT ZERO
*                                      MWAVGTT.              @Y30DSMD*/
         BAL   @14,FREECORE                                        1396
*   RFY                                                            1397
*     RET RSTD;                     /* KEEEP THE COMPILER UP TO DATE.
*                                                            @Y30DSMD*/
*   RET=MWASAVEE;                   /* RESTORE THE RETURN ADDRESS. 1398
*                                                            @Y30DSMD*/
         L     RET,MWASAVEE                                        1398
*   RFY                                                            1399
*     RET UNRSTD;                   /* INFORM THE COMPILER.  @Y30DSMD*/
*   END FREVGTT;                    /* END OF FREVGTT ROUTINE.     1400
*                                                            @Y30DSMD*/
@EL00026 DS    0H                                                  1400
@EF00026 DS    0H                                                  1400
@ER00026 BR    @14                                                 1400
*FDLVRP:                                                           1401
*                                                                  1401
*/********************************************************************/
*/*       01 FUNCTION-FORCE DELETE VRP. THIS IS THE LAST DATA SET    */
*/*                   OPEN AGIANST THE RESOURCE POOL AND THE ASCB    */
*/*                   ORIGINATING THE POOL HAS ALREADY TERMINATED.   */
*/*                   IF THE DELETE IS NOT DONE, RESOURCES WILL BE   */
*/*                   LOST TO THE SYSTEM. THAT IS THE CORE WILL      */
*/*                   NEVER BE RELEASED FOR RE-USE.                 .*/
*/*       01 INPUT-THE GSR VSRT IS POINTED BY MWAVSPTR       @Z40ESSR*/
*/*       01 OUTPUT-THE RESOURCE POOL IS DECHAINED AND FREEMAINED.   */
*/********************************************************************/
*                                                                  1401
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* THIS IS THE DLVRP ROUTINE.    */
FDLVRP   DS    0H                                                  1402
*   RFY                                                            1402
*     RET RSTD;                     /* KEEP THE COMPILER INFORMED. 1402
*                                                            @Y30DSMD*/
*   MWASAVEB=RET;                   /* SAVE THE RETURN ADDRESS.    1403
*                                                            @Y30DSMD*/
*                                                                  1403
         ST    RET,MWASAVEB                                        1403
*   /*****************************************************************/
*   /*                                                               */
*   /* BEFORE DELETING THE VSRT, DUMP THE GLOBAL CORE.       @Z30SSMD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1404
*   CALL GSRDUMP;                   /* DUMP THE VSRT AND RELATED   1404
*                                      GLOBAL.               @Z30SSMD*/
*                                                                  1404
         BAL   @14,GSRDUMP                                         1404
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN SPACE FOR A P/L FOR IDA0192Y.                  @Y30DSMD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1405
*   MWASPOOL=WKPOOL;                /* USE PROTECTED SUBPOOL.      1405
*                                                            @Y30DSMD*/
         MVI   MWASPOOL,X'FC'                                      1405
*   MWABYTES=LENGTH(IDABLPRM);      /* COMPUTE THE LENGTH.   @Y30DSMD*/
         MVC   MWABYTES(3),@CF04954+1                              1406
*   CALL GETCORE;                   /* DO THE GETMAIN.       @Y30DSMD*/
         BAL   @14,GETCORE                                         1407
*   RFY                                                            1408
*     IDABLPRM BASED(MWADDRES);     /* POINT TO THE P/L.     @Y30DSMD*/
*                                                                  1408
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE THE P/L FOR IDA0192Y(DLVRP).               @Y30DSMD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1409
*   BLPACBID=KACBID;                /* SET ACB ID.           @Y30DSMD*/
         L     @15,MWADDRES                                        1409
         MVI   BLPACBID(@15),X'A0'                                 1409
*   BLPACBST=KSTVRP;                /* SET SUB-TYPE AS VRP.  @Y30DSMD*/
         MVI   BLPACBST(@15),X'11'                                 1410
*   BLPFDBDC=ON;                    /* INDICATE DB/DC REQUEST.     1411
*                                                            @Y30DSMD*/
*   BLPFDEL=ON;                     /* DO DLVRP.             @Y30DSMD*/
*   BLPFGSR=ON;                     /* THIS IS GSR DATA SET. @Y30DSMD*/
         OI    BLPFDBDC(@15),B'10101000'                           1413
*   BLPDSORG=EIGHT;                 /* SET DSORG AS REQUIRED.      1414
*                                                            @Y30DSMD*/
         MVI   BLPDSORG(@15),X'08'                                 1414
*   BLPOFLGS=TWO;                   /* INSURE REQUIRED OPEN FLAGS. 1415
*                                                            @Y30DSMD*/
         MVI   BLPOFLGS(@15),X'02'                                 1415
*   BLPERFLG=ZERO;                  /* CLEAR ERRROR FLAGS FIELD.   1416
*                                                            @Y30DSMD*/
*                                                                  1416
         MVI   BLPERFLG(@15),X'00'                                 1416
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL IDA0192Y TO DO A DLVRP.                          @Y30DSMD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1417
*   MWASAVED=RACB;                  /* SAVE ACB POINTER.     @Y30DSMD*/
         ST    RACB,MWASAVED                                       1417
*   MWASAVEE=RCORE;                 /* SAVE POINTER TO CLWRK.      1418
*                                                            @Y30DSMD*/
         ST    RCORE,MWASAVEE                                      1418
*   RCORE=ADDR(FORCORE);            /* PASS ADDRS OF FORCORE.      1419
*                                                            @Y30DSMD*/
         L     @11,MWACORAD                                        1419
         LR    RCORE,@11                                           1419
*   RACB=ADDR(IDABLPRM);            /* PASS THE P/L IN REG(2).     1420
*                                                            @Y30DSMD*/
         LR    RACB,@15                                            1420
*   RSTATRTN=IDAR192Y;              /* NOTE CONTROL LEAVING 200T.  1421
*                                                            @Y30DSMD*/
         MVC   RSTATRTN(4,@11),@CC04079                            1421
*   CALL IDA0192Y;                  /* INVOKE DLVRP THROUGH IDA0192Y.
*                                                            @Y30DSMD*/
         L     @15,@CV05463                                        1422
         BALR  @14,@15                                             1422
*   RSTATRTN=IDAR200T;              /* NOTE CONTROL RETURNED TO 200T.
*                                                            @Y30DSMD*/
*                                                                  1423
         L     @15,MWACORAD                                        1423
         MVC   RSTATRTN(4,@15),@CC04085                            1423
*   /*****************************************************************/
*   /*                                                               */
*   /* IF AN ERROR OCCURRED IN 2Y IGNORE IT. TERMINATION     @Y30DSMD*/
*   /* WILL DO ANY NECCESSARY CLEANUP.                       @Y30DSMD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1424
*   RCORE=MWASAVEE;                 /* RESTORE POINTER TO CLWRK .  1424
*                                                            @Y30DSMD*/
         L     RCORE,MWASAVEE                                      1424
*   RACB=MWASAVED;                  /* RESTORE REG(2) AS ACB POINTER.
*                                                            @Y30DSMD*/
*                                                                  1425
         L     RACB,MWASAVED                                       1425
*   /*****************************************************************/
*   /*                                                               */
*   /* FREEMAIN THE P/L FOR IDA0192Y. MWA VARIABLES ARE INTACT.      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1426
*   CALL FREECORE;                  /* FREE THE IDABLPRM.    @Y30DSMD*/
*                                                                  1426
         BAL   @14,FREECORE                                        1426
*   /*****************************************************************/
*   /*                                                               */
*   /* ISUUE A MSG TO INFORM THE OPERATOR AND THE USER OF FDLVRP.    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1427
*   CALL FDLMSG;                    /* ISSUE MESSAGE FOR THE FORCE 1427
*                                      DELETE.               @Z30SSMD*/
         BAL   @14,FDLMSG                                          1427
*   RET=MWASAVEB;                   /* RETURN TO CALLER.     @Y30DSMD*/
         L     RET,MWASAVEB                                        1428
*   RFY                                                            1429
*     RET UNRSTD;                   /* INFORM THE CIMPILER.  @Y30DSMD*/
*   END FDLVRP;                     /* END OF FDLVRP ROUTINE.      1430
*                                                            @Y30DSMD*/
@EL00027 DS    0H                                                  1430
@EF00027 DS    0H                                                  1430
@ER00027 BR    @14                                                 1430
*GSRDUMP:                                                          1431
*                                                                  1431
*/********************************************************************/
*/*      01 FUNCTION-GSRDUMP. THIS ROUTINE WILL DUMP GSR DATA TO THE */
*/*                  SYS1.DUMP DATA SET. THE AMCBS, VSRT AND ALL  SYS*/
*/*                  ASSOCIATED GLOBAL STORAGE IS DUMPED. MWADRET IS */
*/*                  SET FOR THE FDLMSG ROUTINE IN ORDER TO DETERMINE*/
*/*                  WHICH MESSAGE OF SEVERAL POSSIBLES TO ISSUE.    */
*/*      01 INPUT-GSR VSRT ASSUMED TO BE POINTED BY MWAVSPTR @Z40ESSR*/
*/*      01 OUTPUT-GLABAL DATA IS DUMPED IN UNFORMATTED MODE TO      */
*/*                SYS1.DUMP USING  SVC DUMP (SDUMP MACRO).         .*/
*/********************************************************************/
*                                                                  1431
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* DUMP GSR DATA ROUTINE.        */
GSRDUMP  DS    0H                                                  1432
*   RFY                                                            1432
*     RET RSTD;                     /* RESERVE RET (R15).    @Z30SSMD*/
*   MWASAVEC=RET;                   /* SAVE CALLERS RETURN ADDRESS.
*                                                            @Z30SSMD*/
         ST    RET,MWASAVEC                                        1433
*   MWADRET=ONE;                    /* INITIALIZE THE SDUMP RETURN 1434
*                                      CODE.                 @Z30SSMD*/
*                                                                  1434
         MVC   MWADRET(4),@CF00080                                 1434
*   /*****************************************************************/
*   /*                                                               */
*   /* DUMP THE AMCBS.                                       @Z30SSMD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1435
*   MWADADRS=ADDR(AMCBS);           /* POINT TO THE AMCBS.   @Z30SSMD*/
         L     @15,CVTPTR                                          1435
         MVC   MWADADRS(3),CVTCBSP+1(@15)                          1435
*   MWADLEN=LENGTH(AMCBS);          /* SET THE BYTE COUNT FOR THE  1436
*                                      DUMP.                 @Z30SSMD*/
         LA    MWADLEN,96                                          1436
*   CALL SDLOAD;                    /* MOVE THE INFO TO THE DUMP DATA
*                                      SET.                  @Z30SSMD*/
*                                                                  1437
         BAL   @14,SDLOAD                                          1437
*   /*****************************************************************/
*   /*                                                               */
*   /* DUMP THE VSRT ITSELF.                                 @Z30SSMD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1438
*   MWADADRS=ADDR(IDAVSRT);         /* POINT TO THE VSRT.    @Z30SSMD*/
         L     @15,MWACBSPT                                        1438
         L     @15,BWAVSPTR(,@15)                                  1438
         STCM  @15,7,MWADADRS                                      1438
*   MWADLEN=VSRTLEN;                /* USE ACTUAL LENGHT IN BYTES. 1439
*                                                            @Z30SSMD*/
         LH    MWADLEN,VSRTLEN(,@15)                               1439
*   CALL SDLOAD;                    /* MOVE AND DUMP THE DATA.     1440
*                                                            @Z30SSMD*/
*                                                                  1440
         BAL   @14,SDLOAD                                          1440
*   /*****************************************************************/
*   /*                                                               */
*   /* DUMP THE WORK AREA HEADER AND ASSOCIATED CORE.        @Z30SSMD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1441
*   RFY                                                            1441
*     IDAWSHD BASED(MWADWSHD);      /* INFORN THE COMPILER OF BASE.  */
*   MWADWSHD=VSRTWAH;               /* POINT TO THE FIRST WSHD.    1442
*                                                            @Z30SSMD*/
*                                                                  1442
         L     @15,MWACBSPT                                        1442
         L     @15,BWAVSPTR(,@15)                                  1442
         L     MWADWSHD,VSRTWAH(,@15)                              1442
*   /*****************************************************************/
*   /*                                                               */
*   /* DUMP THE WSHD ITSELF.                                 @Z30SSMD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1443
*   DO WHILE MWADWSHD^=ZERO;        /* LOOP THROUGH THE WSHD CHAIN.
*                                                            @Z30SSMD*/
         B     @DE01443                                            1443
@DL01443 DS    0H                                                  1444
*     MWADADRS=ADDR(IDAWSHD);       /* POINT TO A WSHD.      @Z30SSMD*/
         STCM  MWADWSHD,7,MWADADRS                                 1444
*     MWADLEN=WSHDLEN;              /* USE ACTUAL WSHD LENGHT IN   1445
*                                      BYTES.                @Z30SSMD*/
         LH    MWADLEN,WSHDLEN(,MWADWSHD)                          1445
*     CALL SDLOAD;                  /* DUMP THE DATA.        @Z30SSMD*/
*                                                                  1446
         BAL   @14,SDLOAD                                          1446
*     /***************************************************************/
*     /*                                                             */
*     /* DUMP THE CORE ASSOCIATED WITH THE WSHD.             @Z30SSMD*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  1447
*     DO MWADCTR=WSHDNUS BY-1 TO ONE;/* LOOP THRU SLOTS.     @Z30SSRL*/
         LH    MWADCTR,WSHDNUS(,MWADWSHD)                          1447
         B     @DE01447                                            1447
@DL01447 DS    0H                                                  1448
*       MWADADRS=WSHDSAD(MWADCTR);  /* POINT TO ASSOCIATED SLOT    1448
*                                      CORE.@Z30SSMD                 */
         LR    @15,MWADCTR                                         1448
         SLA   @15,4                                               1448
         L     @08,WSHDSAD-16(@15,MWADWSHD)                        1448
         STCM  @08,7,MWADADRS                                      1448
*       MWADLEN=WSHDSFLN(MWADCTR);  /* GET SIZE IN BYTES OF        1449
*                                      CORE.@Z30SSMD                 */
         L     MWADLEN,WSHDSFLN-17(@15,MWADWSHD)                   1449
         LA    MWADLEN,0(,MWADLEN)                                 1449
*       CALL SDLOAD;                /* DUMP THE DATA.        @Z30SSMD*/
         BAL   @14,SDLOAD                                          1450
*     END;                          /* END OF WSHD OWNED CORE LOOP.
*                                                            @Z30SSMD*/
         BCTR  MWADCTR,0                                           1451
@DE01447 LTR   MWADCTR,MWADCTR                                     1451
         BP    @DL01447                                            1451
*     MWADWSHD=WSHDNEXT;            /* GET THE NEXT WSHD IN THE    1452
*                                      CHAIN.                @Z30SSMD*/
         L     @15,WSHDNEXT-1(,MWADWSHD)                           1452
         LA    @15,0(,@15)                                         1452
         LR    MWADWSHD,@15                                        1452
*   END;                            /* END OF WSHD AND RELATED CORE
*                                      DUMP.                 @Z30SSMD*/
@DE01443 LTR   MWADWSHD,MWADWSHD                                   1453
         BNZ   @DL01443                                            1453
*   MWADWSHD=VSRTCPAH;              /* POINT TO FIRST CPA WSHD.    1454
*                                                            @Z30SSMD*/
*                                                                  1454
         L     @15,MWACBSPT                                        1454
         L     @15,BWAVSPTR(,@15)                                  1454
         L     MWADWSHD,VSRTCPAH(,@15)                             1454
*   /*****************************************************************/
*   /*                                                               */
*   /* DUMP THE CPA WSHD AND ASSOCIATED CORE.                @Z30SSMD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1455
*   DO WHILE MWADWSHD^=ZERO;        /* LOOP THROUGH THE CPAWSHD    1455
*                                      CHAIN.@Z30SSMD                */
         B     @DE01455                                            1455
@DL01455 DS    0H                                                  1456
*     MWADADRS=ADDR(IDAWSHD);       /* POINT TO A CPA WSHD.  @Z30SSMD*/
         STCM  MWADWSHD,7,MWADADRS                                 1456
*     MWADLEN=WSHDLEN;              /* USE ACTUAL WSHD LENGHT IN   1457
*                                      BYTES.                @Z30SSMD*/
         LH    MWADLEN,WSHDLEN(,MWADWSHD)                          1457
*     CALL SDLOAD;                  /* DUMP THE DATA.        @Z30SSMD*/
*                                                                  1458
         BAL   @14,SDLOAD                                          1458
*     /***************************************************************/
*     /*                                                             */
*     /* DUMP THE CORE ASSOCIATED WITH THE CPA WSHD.         @Z30SSMD*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  1459
*     DO MWADCTR=WSHDNUS BY-1 TO ONE;/* LOOP THRU SLOTS.     @Z30SSRL*/
         LH    MWADCTR,WSHDNUS(,MWADWSHD)                          1459
         B     @DE01459                                            1459
@DL01459 DS    0H                                                  1460
*       MWADADRS=WSHDSAD(MWADCTR);  /* POINT TO ASSOCIATED SLOT CORE
*                                                            @Z30SSMD*/
         LR    @15,MWADCTR                                         1460
         SLA   @15,4                                               1460
         L     @08,WSHDSAD-16(@15,MWADWSHD)                        1460
         STCM  @08,7,MWADADRS                                      1460
*       MWADLEN=WSHDSFLN(MWADCTR);  /* GET SIZE IN BYTES OF CORE.  1461
*                                                            @Z30SSMD*/
         L     MWADLEN,WSHDSFLN-17(@15,MWADWSHD)                   1461
         LA    MWADLEN,0(,MWADLEN)                                 1461
*       CALL SDLOAD;                /* DUMP THE DATA.        @Z30SSMD*/
         BAL   @14,SDLOAD                                          1462
*     END;                          /* END OF WSHD OWNED CORE LOOP.
*                                                            @Z30SSMD*/
         BCTR  MWADCTR,0                                           1463
@DE01459 LTR   MWADCTR,MWADCTR                                     1463
         BP    @DL01459                                            1463
*     MWADWSHD=WSHDNEXT;            /* GET THE NEXT CPA WSHD IN THE
*                                      CHAIN.@Z30SSMD                */
         L     @15,WSHDNEXT-1(,MWADWSHD)                           1464
         LA    @15,0(,@15)                                         1464
         LR    MWADWSHD,@15                                        1464
*   END;                            /* END OF CPA WSHD AND RELATED 1465
*                                      CORE DUMP.            @Z30SSMD*/
*                                                                  1465
@DE01455 LTR   MWADWSHD,MWADWSHD                                   1465
         BNZ   @DL01455                                            1465
*   /*****************************************************************/
*   /*                                                               */
*   /* DUMP CORE POINTED TO BY VSRT CSL LIST.                @Z30SSMD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1466
*   MWADCTR=ONE;                    /* START WITH THE FIRST ENTRY. 1466
*                                                            @Z30SSMD*/
         LA    MWADCTR,1                                           1466
*   DO WHILE VSRTCSVS(MWADCTR)^=ON; /* LOOP UNTIL END.       @Z30SSMD*/
         B     @DE01467                                            1467
@DL01467 DS    0H                                                  1468
*     MWADADRS=VSRTCSAD(MWADCTR);   /* LOAD A CSL ENTRY.     @Z30SSMD*/
         LR    @15,MWADCTR                                         1468
         SLA   @15,3                                               1468
         L     @08,MWACBSPT                                        1468
         L     @08,BWAVSPTR(,@08)                                  1468
         ST    @15,@TF00001                                        1468
         ALR   @15,@08                                             1468
         MVC   MWADADRS(3),VSRTCSAD-8(@15)                         1468
*     MWADLEN=VSRTCSLN(MWADCTR);    /* LOAD THE LENGTH.      @Z30SSMD*/
         L     @15,@TF00001                                        1469
         L     MWADLEN,VSRTCSLN-9(@15,@08)                         1469
         LA    MWADLEN,0(,MWADLEN)                                 1469
*     IF(MWADADRS^=ZERO&MWADLEN^=ZERO) THEN/* ENTRY NULL?    @Z30SSMD*/
         L     @15,MWADADRS-1                                      1470
         LA    @15,0(,@15)                                         1470
         LTR   @15,@15                                             1470
         BZ    @RF01470                                            1470
         LTR   MWADLEN,MWADLEN                                     1470
         BZ    @RF01470                                            1470
*       CALL SDLOAD;                /* IF ANY DATA DUMP IT.  @Z30SSMD*/
         BAL   @14,SDLOAD                                          1471
*     MWADCTR=MWADCTR+ONE;          /* INCREMENT COUNTER BY ONE    1472
*                                                            @Z30SSRL*/
@RF01470 AL    MWADCTR,@CF00080                                    1472
*   END;                            /* END OF DUMP VSRT CSL LOOP.  1473
*                                                            @Z30SSMD*/
*                                                                  1473
@DE01467 LR    @15,MWADCTR                                         1473
         SLA   @15,3                                               1473
         L     @11,MWACBSPT                                        1473
         L     @11,BWAVSPTR(,@11)                                  1473
         ALR   @11,@15                                             1473
         TM    VSRTCSVS-8(@11),B'01000000'                         1473
         BNO   @DL01467                                            1473
*   /*****************************************************************/
*   /*                                                               */
*   /* AT THIS POINT A BUFFER FLUSH MAY BE NEEDED.           @Z30SSMD*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1474
*   RET=MWASAVEC;                   /* RESTORE THE RETURN ADDRESS. 1474
*                                                            @Z30SSMD*/
         L     RET,MWASAVEC                                        1474
*   RFY                                                            1475
*     RET UNRSTD;                   /* INFORM THE COMPILER.  @Z30SSMD*/
*   END GSRDUMP;                    /* END OF GSRDUMP ROUTINE.     1476
*                                                            @Z30SSMD*/
@EL00028 DS    0H                                                  1476
@EF00028 DS    0H                                                  1476
@ER00028 BR    @14                                                 1476
*SDLOAD:                                                           1477
*                                                                  1477
*/********************************************************************/
*/*       01 FUNCTION-MOVE OUTPUT DATA FOR GSRDUMP ROUTINE.         .*/
*/*       01 INPUT-MWADADRS POINT TO THE AREA TO BE DUMPED.         .*/
*/*               -MWADLEN CONTAINS THE SIZE OF THE AREA.          . */
*/*       01 OUTPUT-DATA IS SVC DUMPED TO SYS1.DUMP DATA SET.        */
*/********************************************************************/
*                                                                  1477
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* DUMP GSR DATA ROUTINE.        */
SDLOAD   DS    0H                                                  1478
*   RFY                                                            1478
*    (RET,                                                         1478
*     RETCODE,                                                     1478
*     R5,                                                          1478
*     R6) RSTD;                     /* INFORM THE COMPILER.  @Z30SSMD*/
*   MWASAVED=R14;                   /* SAVE THE RETURN ADDRESS.    1479
*                                                            @Z30SSMD*/
         ST    R14,MWASAVED                                        1479
*   MWASAVEE=R5;                    /* SAVE REG(5) IN THIS PROC.   1480
*                                                            @Z30SSMD*/
         ST    R5,MWASAVEE                                         1480
*   MWASAVEF=R6;                    /* SAVE REG(6) ALSO.     @Z30SSMD*/
         ST    R6,MWASAVEF                                         1481
*   R5=MWADADRS;                    /* GET STARTING ADDRESS. @Z30SSMD*/
         L     R5,MWADADRS-1                                       1482
         LA    R5,0(,R5)                                           1482
*   R6=R5+MWADLEN-ONE;              /* COMPUTE ENDING ADDRESS.     1483
*                                                            @Z30SSMD*/
         LR    R6,R5                                               1483
         ALR   R6,MWADLEN                                          1483
         BCTR  R6,0                                                1483
*   SDLSTSA=R5;                     /* SET STARTING ADDR IN STORAGE
*                                      LIST                  @ZA12192*/
         STCM  R5,7,SDLSTSA                                        1484
*   SDLSTEA=R6;                     /* SET ENDING ADDR IN STORAGE  1485
*                                      LIST                  @ZA12192*/
         STCM  R6,7,SDLSTEA                                        1485
*   SDLSTEOL=ON;                    /* SET END OF LIST INDICATOR   1486
*                                                            @ZA12192*/
         OI    SDLSTEOL,B'10000000'                                1486
*   MWASDUMP=SDUMPPL;               /* INIT SDUMP PARM LIST  @Z30SSRL*/
         MVC   MWASDUMP(72),SDUMPPL                                1487
*   GEN SETS(RETCODE,RET) REFS(R5,R6);                             1488
*                                                          /*@Z30SSMD*/
         SDUMP LIST=MWASDLST,BUFFER=NO,QUIESCE=YES,BRANCH=NO,          *
               MF=(E,MWASDUMP)         EXECUTE FORM OF SDUMP  @ZA12192
*   IF MWADRET=ONE THEN             /* HAVE ANY DUMPS BEEN ATTEMPTED?
*                                                            @Z30SSMD*/
         CLC   MWADRET(4),@CF00080                                 1489
         BNE   @RF01489                                            1489
*     DO;                           /* IF NOT THEN PROCESS THE SDUMP
*                                      RETURN CODE HERE.     @Z30SSMD*/
*       MWADRET=RETCODE;            /* USE THE CURRENT SDUMP RETURN
*                                      CODE.                 @Z30SSMD*/
         ST    RETCODE,MWADRET                                     1491
*     END;                          /* END OF RET PROCESSING.      1492
*                                                            @Z30SSMD*/
*   ELSE                            /* IF NOT CONTINUE TESTING     1493
*                                      STATUS.               @Z30SSMD*/
*     IF MWADRET=ZERO THEN          /* HAVE ALL DUMPS BEEN         1493
*                                      COMPLLETED?          @Z30SSMD*/
         B     @RC01489                                            1493
@RF01489 SLR   @11,@11                                             1493
         C     @11,MWADRET                                         1493
         BNE   @RF01493                                            1493
*       DO;                         /* PROCESS THE SDUMP RETURN CODE
*                                      HERE.                 @Z30SSMD*/
*         IF RETCODE=ZERO THEN      /* STILL DUMPING OK?     @Z30SSMD*/
         CR    RETCODE,@11                                         1495
         BNE   @RF01495                                            1495
*           MWADRET=ZERO;           /* SET DUMP RET CODE AS ALL OK.
*                                                            @Z30SSMD*/
         ST    @11,MWADRET                                         1496
*         ELSE                      /* IF THIS DUMP NOT OK CONTINUE
*                                      TESTING.              @Z30SSMD*/
*           IF RETCODE=FOUR×RETCODE=EIGHT THEN/* IS CODE EXPECTED? 1497
*                                                            @Z30SSMD*/
         B     @RC01495                                            1497
@RF01495 C     RETCODE,@CF00143                                    1497
         BE    @RT01497                                            1497
         C     RETCODE,@CF00071                                    1497
         BNE   @RF01497                                            1497
@RT01497 DS    0H                                                  1498
*             MWADRET=FOUR;         /* IF PARTIAL OR NO DUMP THEN NOW
*                                      PARTIAL.                      */
         MVC   MWADRET(4),@CF00143                                 1498
*       END;                        /* END OF RET PROCESSING GROUP.
*                                                            @Z30SSMD*/
*     ELSE                          /* IF NOT, CONTINUE TESTING.   1500
*                                                            @Z30SSMD*/
*       IF MWADRET=FOUR THEN        /* ANY PARTIAL DUMPS DONE TO THIS
*                                      POINT?                        */
         B     @RC01493                                            1500
@RF01493 LA    @11,4                                               1500
         C     @11,MWADRET                                         1500
         BNE   @RF01500                                            1500
*         MWADRET=FOUR;             /* STATE IS UNCHANGED BY THIS  1501
*                                      SDUMP.                @Z30SSMD*/
         ST    @11,MWADRET                                         1501
*       ELSE                        /* IF NONE OF THE ABOVE THE TEST
*                                      FOR                   @Z30SSMD*/
*         IF MWADRET=EIGHT THEN     /* NO DUMP TAKEN YET.    @Z30SSMD*/
         B     @RC01500                                            1502
@RF01500 CLC   MWADRET(4),@CF00071                                 1502
         BNE   @RF01502                                            1502
*           DO;                     /* PROCESS THE SDUMP RETURN CODE.
*                                                            @Z30SSMD*/
*             IF RETCODE=ZERO×      /* IF THIS DUMP IS OK THEN     1504
*                                                            @Z30SSMD*/
*                 RETCODE=FOUR THEN /* OR IF PARTIAL DUMP THEN     1504
*                                                            @Z30SSMD*/
         LTR   RETCODE,RETCODE                                     1504
         BZ    @RT01504                                            1504
         C     RETCODE,@CF00143                                    1504
         BNE   @RF01504                                            1504
@RT01504 DS    0H                                                  1505
*               MWADRET=FOUR;       /* STATE IS NOW PARTIAL DUMP.  1505
*                                                            @Z30SSMD*/
         MVC   MWADRET(4),@CF00143                                 1505
*             ELSE                  /* IF NOT ZERO OR FOUR   @Z30SSMD*/
*               IF RETCODE=EIGHT THEN/* IS IT EIGHT?         @Z30SSMD*/
         B     @RC01504                                            1506
@RF01504 LA    @11,8                                               1506
         CR    RETCODE,@11                                         1506
         BNE   @RF01506                                            1506
*                 MWADRET=EIGHT;    /* STILL NO DUMPS TAKEN. @Z30SSMD*/
         ST    @11,MWADRET                                         1507
*           END;                    /* END OF RET PROCESSING.      1508
*                                                            @Z30SSMD*/
@RF01506 DS    0H                                                  1508
@RC01504 DS    0H                                                  1509
*   R5=MWASAVEE;                    /* RESTORE REG(5).       @Z30SSMD*/
@RF01502 DS    0H                                                  1509
@RC01500 DS    0H                                                  1509
@RC01493 DS    0H                                                  1509
@RC01489 L     R5,MWASAVEE                                         1509
*   R6=MWASAVEF;                    /* RESTORE REG(6).       @Z30SSMD*/
         L     R6,MWASAVEF                                         1510
*   RET=MWASAVED;                   /* RESTORE RETURN ADDRESS.     1511
*                                                            @Z30SSMD*/
         L     RET,MWASAVED                                        1511
*   RFY                                                            1512
*    (RET,                                                         1512
*     R6,                                                          1512
*     R5) UNRSTD;                   /* KEEP COMPILER UP TO DATE.   1512
*                                                            @Z30SSMD*/
*   END SDLOAD;                     /* END OF SDLOAD ROUTINE.      1513
*                                                            @Z30SSMD*/
@EL00029 DS    0H                                                  1513
@EF00029 DS    0H                                                  1513
@ER00029 BR    @14                                                 1513
*FDLMSG:                                                           1514
*                                                                  1514
*/********************************************************************/
*/*       01 FUNCTION-THIS ROUTINE CALLS IDA0192P TO ISSUE A MSG     */
*/*                   INFORMING THE OPERATOR AND THE USER THAT A     */
*/*                   FORCE DELETE  VRP WAS DONE AND THAT NO DUMP, A */
*/*                   PARTIAL DUMP OR A FULL DUMP WAS TAKEN.       . */
*/*       01 INPUT-MWADRET CONTAINS A RETURN CODE INDICATING SDUMP   */
*/*                RETURN CODES.                                    .*/
*/*       01 OUTPUT-THE CALL TO IDA0192P WILL RESULT IN AN IEC251    */
*/*                 MSG FOR THE USER AND THE SYSTEM OPERATOR.       .*/
*/********************************************************************/
*                                                                  1514
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* FORCE DELETE MSG ROUTINE.     */
FDLMSG   DS    0H                                                  1515
*   RFY                                                            1515
*     RET RSTD;                     /* INFORM THE COMPILER.  @Z30SSMD*/
*   RFY                                                            1516
*     R1 RSTD;                      /* INFORM THE COMPILER.  @Z30SSMD*/
*   MWASAVEC=R14;                   /* SAVE THE RETURN ADDRESS.    1517
*                                                            @Z30SSMD*/
         ST    R14,MWASAVEC                                        1517
*   PDPNOTRC=ON;                    /* SET SUPRESS GTF TRACE.      1518
*                                                            @Z30SSMD*/
*   PDPNOMSG=ON;                    /* SET SUPRESS MSG AREA .      1519
*                                                            @Z30SSMD*/
         LA    @11,280                                             1519
         AL    @11,MWACORAD                                        1519
         OI    PDPNOTRC(@11),B'00110000'                           1519
*   PDPCALL=PDPCLOSE;               /* NOTE THE CALLER.      @Z30SSMD*/
         MVI   PDPCALL(@11),X'04'                                  1520
*   PDPFUNC=PDF148;                 /* THIS IS FORCE DLVRP.  @Z30SSMD*/
         MVI   PDPFUNC(@11),X'94'                                  1521
*   IF MWADRET=ZERO THEN            /* ALL DUMPS SUCCESSFUL? @Z30SSMD*/
         L     @05,MWADRET                                         1522
         LTR   @05,@05                                             1522
         BNZ   @RF01522                                            1522
*     PDPCODE=PP176;                /* SET MSG CODE.         @Z30SSMD*/
         MVI   PDPCODE(@11),X'B0'                                  1523
*   ELSE                            /* IF NOT TEST ANOTHER CONDITION.
*                                                            @Z30SSMD*/
*     IF MWADRET=FOUR THEN          /* PARTIAL DUMPS?        @Z30SSMD*/
         B     @RC01522                                            1524
@RF01522 CLC   MWADRET(4),@CF00143                                 1524
         BNE   @RF01524                                            1524
*       PDPCODE=PP180;              /* SET MSG CODE.         @Z30SSMD*/
         L     @11,MWACORAD                                        1525
         MVI   PDPCODE+280(@11),X'B4'                              1525
*     ELSE                          /* IF NOT THAT THEN TEST AGAIN.
*                                                            @Z30SSMD*/
*       IF MWADRET=ONE×MWADRET=EIGHT THEN/* NO DUMPS?        @Z30SSMD*/
         B     @RC01524                                            1526
@RF01524 L     @11,MWADRET                                         1526
         C     @11,@CF00080                                        1526
         BE    @RT01526                                            1526
         C     @11,@CF00071                                        1526
         BNE   @RF01526                                            1526
@RT01526 DS    0H                                                  1527
*         PDPCODE=PP184;            /* SET MSG CODE.         @Z30SSMD*/
         L     @11,MWACORAD                                        1527
         MVI   PDPCODE+280(@11),X'B8'                              1527
*   R1=ADDR(FORCORE);               /* POINT TO WORK AREA.   @Z30SSMD*/
@RF01526 DS    0H                                                  1528
@RC01524 DS    0H                                                  1528
@RC01522 L     R1,MWACORAD                                         1528
*   CALL IDA0192P;                  /* ISSUE IEC251 MSG.     @Z30SSMD*/
         L     @15,@CV05327                                        1529
         BALR  @14,@15                                             1529
*   PDPNOTRC=OFF;                   /* RESET SUPRESS GTF TRACE.    1530
*                                                            @Z30SSMD*/
*   PDPNOMSG=OFF;                   /* RESET SUPRESS MSG AREA .    1531
*                                                            @Z30SSMD*/
         L     @11,MWACORAD                                        1531
         NI    PDPNOTRC+280(@11),B'11001111'                       1531
*   RET=MWASAVEC;                   /* RESTORE RETURN ADDRESS.     1532
*                                                            @Z30SSMD*/
         L     RET,MWASAVEC                                        1532
*   RFY                                                            1533
*     RET UNRSTD;                   /* INFORM THE COMPILER.  @Z30SSMD*/
*   RFY                                                            1534
*     R1 UNRSTD;                    /* FREE-UP REG(1).       @Z30SSMD*/
*   END FDLMSG;                     /* END OF FORCE DELETE MESSAGE 1535
*                                      ROUTINE.              @Z30SSMD*/
@EL00030 DS    0H                                                  1535
@EF00030 DS    0H                                                  1535
@ER00030 BR    @14                                                 1535
@PB00030 DS    0H                                                  1535
*   END IDA0200T                                                   1536
*                                                                  1536
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (LCGPLSSW)                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDATRACE)                                       */
*/*%INCLUDE SYSLIB  (AMCBS   )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IDABIB  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IFGEXLST)                                       */
*/*%INCLUDE SYSLIB  (IDAHEB  )                                       */
*/*%INCLUDE SYSLIB  (IEZJSCB )                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IKJRB   )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*/*%INCLUDE SYSLIB  (IDAUPT  )                                       */
*/*%INCLUDE SYSLIB  (IDAVAT  )                                       */
*/*%INCLUDE SYSLIB  (IDARTMAC)                                       */
*/*%INCLUDE SYSLIB  (IDAVMT  )                                       */
*/*%INCLUDE SYSLIB  (IDAVSRT )                                       */
*/*%INCLUDE SYSLIB  (IDAWSHD )                                       */
*/*%INCLUDE SYSLIB  (IDAFOREC)                                       */
*/*%INCLUDE SYSLIB  (IECDSECT)                                       */
*/*%INCLUDE SYSLIB  (IECDSECS)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBX)                                       */
*/*%INCLUDE SYSLIB  (IDAPDPRM)                                       */
*/*%INCLUDE SYSLIB  (IDAERRCD)                                       */
*/*%INCLUDE SYSLIB  (IDAPDFCD)                                       */
*/*%INCLUDE SYSLIB  (IDAPPCDE)                                       */
*/*%INCLUDE SYSLIB  (IDAOCECN)                                       */
*/*%INCLUDE SYSLIB  (IDABLPRM)                                       */
*/*%INCLUDE SYSLIB  (IDACLWRK)                                       */
*/*%INCLUDE SYSLIB  (IDAGMAIN)                                       */
*                                                                  1536
*       ;                                                          1536
@DATA    DS    0H
@CH00033 DC    H'12'
@CH00585 DC    H'20'
@DATD    DSECT
         DS    0F
@SA00001 DS    23F
@TF00001 DS    F
IDA0200T CSECT
         DS    0F
@CF00080 DC    F'1'
@CF00096 DC    F'2'
@CF00143 DC    F'4'
@CF00071 DC    F'8'
@CF00133 DC    F'15'
@CF04755 DC    F'30'
@CF00508 DC    F'32'
@CF00576 DC    F'36'
@CF04954 DC    F'52'
@CF05095 DC    F'68'
@CF04867 DC    F'108'
@CF04879 DC    F'148'
@CF05496 DC    F'-20'
@CF05479 DC    F'-16'
@CF05495 DC    F'-8'
@CF05498 DC    F'-7'
@CF05499 DC    F'-6'
@CF05497 DC    F'-5'
@CF05478 DC    F'-4'
@DATD    DSECT
         DS    0D
MWARACB  DS    A
MWACORAD DS    A
MWAMBLPT DS    A
MWAAMBPT DS    A
MWAENQPT DS    A
MWAPLHPT DS    A
MWARPLPT DS    A
MWATIOTP DS    A
MWABAMBL DS    A
MWASAVEA DS    A
MWASAVEB DS    A
MWASAVEC DS    A
MWASAVED DS    A
MWASAVEE DS    A
MWASAVEF DS    A
MWAVGTT  DS    A
MWACBSPT DS    A
MWAINDEX DS    F
MWARETCD DS    F
MWADSCNT DS    F
MWADRET  DS    F
         DS    CL1
MWADADRS DS    AL3
MWAMNPRM DS    CL20
         ORG   MWAMNPRM
MWADDRES DS    AL4
MWAMNWRD DS    FL4
         ORG   MWAMNWRD
MWASPOOL DS    FL1
MWABYTES DS    AL3
         ORG   MWAMNPRM+8
MWAWORK  DS    3A
         ORG   MWAMNPRM+20
MWAEQPRM DS    CL20
         ORG   MWAEQPRM
MWAEQTCB DS    AL4
MWAEQENT DS    CL16
         ORG   MWAEQENT
MWAEQOP1 DS    BL1
         ORG   MWAEQOP1
MWAEQEND DS    BL1
MWAEQNEW EQU   MWAEQOP1+0
@NM00001 EQU   MWAEQOP1+0
         ORG   MWAEQENT+1
MWAEQRNM DS    FL1
MWAEQOP2 DS    BL1
MWAEQRET DS    FL1
MWAEQQAD DS    AL4
MWAEQRAD DS    AL4
MWAEQUCB DS    AL4
         ORG   MWAEQPRM+20
MWACATPM DS    CL4
         ORG   MWACATPM
MWACATID DS    CL1
MWASFIPT DS    AL3
         ORG   MWACATPM+4
MWAMODNM DS    CL8
         ORG   MWAMODNM
MWACOMNM DS    CL6
MWAMODID DS    CL2
         ORG   MWAMODNM+8
MWAQNAME DS    CL8
MWAVLSER DS    CL6
MWARNAME DS    CL9
MWAZERNM DS    CL8
MWACBWK  DS    BL1
MWAENQFG DS    BL1
MWASWTCH DS    BL1
MWACAT   DS    BL1
MWAUCRA  DS    BL1
MWADDFRE DS    BL1
MWALSR   DS    BL1
MWAGSR   DS    BL1
MWACBIC  DS    BL1
MWAPSBSW DS    BL1
MWAFRKEY DS    BL1
MWAAMBLF DS    BL1
         DS    CL1
MWASDUMP DS    CL72
MWALCKSA DS    CL12
         ORG   MWALCKSA
MWALCKA  DS    AL4
MWALCKB  DS    AL4
MWALCKC  DS    AL4
         ORG   MWALCKSA+12
MWASDLST DS    CL8
         ORG   MWASDLST
@NM00013 DS    CL1
SDLSTSA  DS    AL3
@NM00014 DS    CL1
         ORG   @NM00014
SDLSTEOL DS    BL1
@NM00015 EQU   @NM00014+0
         ORG   MWASDLST+5
SDLSTEA  DS    AL3
         ORG   MWASDLST+8
IDA0200T CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV05327 DC    V(IDA0192P)
@CV05373 DC    V(IDA0192C)
@CV05403 DC    V(IDA0200B)
@CV05463 DC    V(IDA0192Y)
         DS    0D
@CC05408 DC    C'AMBLCHAIN'
@CC05330 DC    C'IDACLWRK'
@CC05342 DC    C'SYSVSAM '
@CC00158 DC    C'IDA019'
@CC04061 DC    C'192C'
@CC04071 DC    C'192P'
@CC04079 DC    C'192Y'
@CC04083 DC    C'200B'
@CC04085 DC    C'200T'
NORMLIST DS    CL5
         ORG   NORMLIST
@NM00002 DC    AL1(2)
@NM00003 DC    CL2'L1'
@NM00004 DC    CL2'R7'
         ORG   NORMLIST+5
ICILIST  DS    CL3
         ORG   ICILIST
@NM00005 DC    AL1(1)
@NM00006 DC    CL2'L2'
         ORG   ICILIST+3
DUMYLIST DS    CL3
         ORG   DUMYLIST
@NM00007 DC    AL1(1)
@NM00008 DC    CL2'RD'
         ORG   DUMYLIST+3
IDA0200T CSECT
SDUMPPL  SDUMP HDR='IEC251I, VSAM GSR FORCE DLVRP DUMP DATA',MF=L
*                                       LIST FORM OF SDUMP      Z30SSRL
IDA0200T CSECT
*                                                          /*@Y30DSMD*/
         DS    0D                       DOUBLE WORD BOUNDARY
PTCH200T DC    ((*-IDA0200T)/20)X'00'   PATCH AREA
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA0200T CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
MWADWSHD EQU   @07
MWADCTR  EQU   @09
MWADLEN  EQU   @11
MWANDEB  EQU   @09
MWARDEB  EQU   @08
MWACSOP2 EQU   @09
MWACSOP1 EQU   @05
MWAEQIDX EQU   @05
MWALISTP EQU   @05
MWAVATPT EQU   @11
MWAVMTPT EQU   @09
MWADSPTR EQU   @05
MWAPAMBL EQU   @10
MWAUCBPT EQU   @05
MWADEBPT EQU   @05
MWAWSHPT EQU   @07
MWAHEBPT EQU   @06
MWARNPTR EQU   @06
MWAENQLP EQU   @07
RCORE    EQU   @04
R0       EQU   @00
R1       EQU   @01
RACB     EQU   @02
RBASEA   EQU   @03
RBASEB   EQU   @12
R12      EQU   @12
R13      EQU   @13
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
R10      EQU   @10
R11      EQU   @11
RET      EQU   @14
RETCODE  EQU   @15
R15      EQU   @15
R14      EQU   @14
RDEB     EQU   @11
RTIOT    EQU   @09
RUCB     EQU   @10
CVTPTR   EQU   16
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
BWAVSDW  EQU   0
BWAVSUSE EQU   BWAVSDW
BWAVSPTR EQU   BWAVSDW+4
MWAFLQSA EQU   0
LDLSTMAP EQU   0
LDLNOENT EQU   LDLSTMAP
LDLID    EQU   LDLSTMAP+1
ENQPARML EQU   0
ENQTCB   EQU   ENQPARML
ENQENTRY EQU   ENQPARML+4
ENQOPT1  EQU   ENQENTRY
ENQEND   EQU   ENQOPT1
ENQRLEN  EQU   ENQENTRY+1
ENQOPT2  EQU   ENQENTRY+2
ENQSHARE EQU   ENQOPT2
ENQSYSTM EQU   ENQOPT2
ENQQNADR EQU   ENQENTRY+4
ENQRNADR EQU   ENQENTRY+8
ENQRNM   EQU   0
ENQRNAME EQU   ENQRNM
ENQRNCI  EQU   ENQRNAME
ENQRNACB EQU   ENQRNAME+3
ENQRNIND EQU   ENQRNAME+7
PAGELIST EQU   0
PFLIST   EQU   PAGELIST
PFLBGAD  EQU   PFLIST+1
@NM00012 EQU   PFLIST+4
PFLEND   EQU   @NM00012
PFLENDAD EQU   PFLIST+5
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBINRTN EQU   ACBCOMN+8
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBDEB   EQU   ACBDDNM+5
ACBOFLGS EQU   ACBCOMN+48
ACBOPEN  EQU   ACBOFLGS
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBBUSY  EQU   ACBIOSFG
ACBERFLG EQU   ACBCOMN+49
ACBINFLG EQU   ACBCOMN+50
ACBINFL1 EQU   ACBINFLG
ACBVVIC  EQU   ACBINFL1
ACBSDS   EQU   ACBVVIC
ACBINFL2 EQU   ACBINFLG+1
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMB   EQU   0
AMBPH    EQU   IDAAMB+12
AMBCACB  EQU   IDAAMB+16
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBPSDS  EQU   AMBFLG0
AMBFLG1  EQU   IDAAMB+25
AMBCREAT EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBDDSN  EQU   IDAAMB+35
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBPAMBL EQU   IDAAMB+76
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBLSR   EQU   AMBAFLG
AMBTRACE EQU   IDAAMB+120
IDAAMBL  EQU   0
AMBLPCHN EQU   IDAAMBL
AMBLSCHN EQU   IDAAMBL+4
AMBLACB  EQU   IDAAMBL+8
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLESET EQU   AMBLEFLG
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLGSR  EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLXPT  EQU   IDAAMBL+24
AMBLVC   EQU   IDAAMBL+28
AMBLVRT  EQU   AMBLVC
AMBLENO  EQU   AMBLVC+1
AMBLTYPE EQU   IDAAMBL+30
AMBLPATH EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLQ2   EQU   IDAAMBL+31
AMBLCBIC EQU   AMBLQ2
AMBLSHAR EQU   IDAAMBL+33
AMBLPRIM EQU   AMBLSHAR
AMBLFLG1 EQU   IDAAMBL+35
AMBLVVIC EQU   AMBLFLG1
AMBLSDS  EQU   AMBLVVIC
AMBLSCRA EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLDUMY EQU   AMBLFLG1
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
AMBLBIB  EQU   IDAAMBL+60
IDATRACE EQU   0
SAVE1X   EQU   IDATRACE
TRAENTRY EQU   SAVE1X
REPLY@   EQU   IDATRACE+180
REPLYMSG EQU   REPLY@+16
OUTLINE  EQU   IDATRACE+208
MESSAGES EQU   OUTLINE
HEADER   EQU   MESSAGES
STATUS   EQU   IDATRACE+496
STATUS2  EQU   IDATRACE+497
SAVEIN1  EQU   IDATRACE+500
SAVE2X   EQU   IDATRACE+560
SAVE3X   EQU   IDATRACE+1120
FLAG0    EQU   IDATRACE+1740
FLAG1    EQU   IDATRACE+1741
FLAG2    EQU   IDATRACE+1742
FLAG3    EQU   IDATRACE+1743
FLAG4    EQU   IDATRACE+1744
FLAG5    EQU   IDATRACE+1745
AIXOPT   EQU   IDATRACE+1750
IDA019ST EQU   0
AMCBS    EQU   0
CBSCMP   EQU   AMCBS+16
CBSVSRT  EQU   AMCBS+32
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBRSM  EQU   ASCB+52
ASCBRSMF EQU   ASCBRSM
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
ASCBVGTT EQU   ASCB+184
IDABIB   EQU   0
BIBHDR   EQU   IDABIB
BIBFLG1  EQU   BIBHDR+1
BIBUPT   EQU   IDABIB+8
BIBVMT   EQU   IDABIB+12
BIBDACB  EQU   IDABIB+16
BIBPAMBL EQU   IDABIB+20
BIBSPHPT EQU   IDABIB+24
BIBPRSPH EQU   IDABIB+28
BIBWSHD  EQU   IDABIB+44
BIBPSAB  EQU   IDABIB+52
BIBVGTT  EQU   IDABIB+56
BIBRTNS  EQU   IDABIB+60
BIBINTRF EQU   BIBRTNS
CVTMAP   EQU   0
CVTTCBP  EQU   CVTMAP
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTCBSP  EQU   CVTMAP+256
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBDEBB  EQU   DEBDEBAD+1
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBDCBB  EQU   DEBDCBAD+1
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBLNGTH EQU   DEBPREFX+12
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
DEBXCDCB EQU   DEBXFLG1
IFGEXLST EQU   0
EXLCOMN  EQU   IFGEXLST
EXLLEN   EQU   EXLCOMN+2
EXLEODF  EQU   EXLCOMN+5
EXLSYNF  EQU   EXLCOMN+10
EXLSYNP  EQU   EXLCOMN+11
EXLLERF  EQU   EXLCOMN+15
EXLSCIPF EQU   EXLCOMN+20
EXLUPADF EQU   EXLSCIPF
EXLSCIPS EQU   EXLUPADF
EXLSCIPA EQU   EXLUPADF
EXLSCIPK EQU   EXLUPADF
EXLSCIPP EQU   EXLCOMN+21
EXLLGNF  EQU   EXLCOMN+25
EXLJRNF  EQU   EXLCOMN+30
EXLOPNF  EQU   EXLCOMN+35
IFGEXLEF EQU   0
EXLENTRY EQU   IFGEXLEF
EXLFLAG  EQU   EXLENTRY
EXLENFL  EQU   EXLFLAG
EXLEXITP EQU   EXLENTRY+1
HEBHDREL EQU   0
HEBFREMN EQU   HEBHDREL
HEBSP    EQU   HEBFREMN
HEBLN    EQU   HEBFREMN+1
HEBBLKPT EQU   HEBFREMN+4
HEBFLAGS EQU   HEBHDREL+8
HEBKEY5  EQU   HEBFLAGS
HEBGSRKT EQU   HEBFLAGS
HEBELCHN EQU   HEBHDREL+12
@NM00077 EQU   HEBHDREL+20
HEBGSRK  EQU   @NM00077
IDAHEB   EQU   0
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBSHR  EQU   JSCBSEC1+8
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBEND1 EQU   IEZJSCB+260
IDAPLHDR EQU   0
PLHCNT   EQU   IDAPLHDR+1
IDAPLH   EQU   0
PLHAVL   EQU   IDAPLH
PLHFLG1  EQU   IDAPLH+2
PLHFLG2  EQU   IDAPLH+3
PLHEFLGS EQU   IDAPLH+4
PLHFLG3  EQU   IDAPLH+6
PLHAFLGS EQU   IDAPLH+7
PLHACB   EQU   IDAPLH+8
PLHMRPL  EQU   IDAPLH+16
PLHCRPL  EQU   IDAPLH+20
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHRSCS  EQU   IDAPLH+43
PLHDIOB  EQU   IDAPLH+76
PLHCHAIN EQU   IDAPLH+112
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHKEYPT EQU   IDAPLH+248
PLHTMRPL EQU   IDAPLH+265
PLHEND   EQU   IDAPLH+280
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
XRBPSW   EQU   RBOPSW
RBOPSWB2 EQU   XRBPSW+1
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
RBPREFIX EQU   0
RBRSV019 EQU   RBPREFIX+14
RBRSV028 EQU   RBPREFIX+15
RBRSV041 EQU   RBPREFIX+27
RBRSV054 EQU   RBPREFIX+39
RBRTOPSW EQU   RBPREFIX+40
RBRTPSW2 EQU   RBRTOPSW+8
RBRTICIL EQU   RBRTPSW2
RBFLAGS1 EQU   RBPREFIX+56
RBINTCDA EQU   RBPREFIX+61
RBSECT   EQU   0
RBPPSAV  EQU   RBSECT
@NM00129 EQU   RBSECT+10
@NM00130 EQU   @NM00129
RBTRSVRB EQU   @NM00130
@NM00132 EQU   @NM00129+1
RBETXR   EQU   @NM00132
RBEP     EQU   RBSECT+12
RBPGMQ   EQU   RBSECT+24
@NM00139 EQU   RBSECT+28
@NM00140 EQU   @NM00139
IRBEND   EQU   RBSECT+96
@NM00143 EQU   RBSECT+96
RBRSV138 EQU   @NM00143+7
RBSCBB   EQU   RBSECT+144
RBSPARM  EQU   RBSCBB+8
RBSFLGS1 EQU   RBSPARM
RBSIOPRC EQU   RBSFLGS1
RBSOWNR  EQU   RBSCBB+12
RBSFLGS2 EQU   RBSOWNR
RBSDATA  EQU   RBSCBB+16
RBSFLG3  EQU   RBSDATA
RBRSV150 EQU   RBSECT+167
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLPLHPT EQU   RPLCOMN+4
RPLECB   EQU   RPLCOMN+8
RPLPOST  EQU   RPLECB
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
TCBWORDS EQU   0
TCBPTR   EQU   TCBWORDS+4
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBRBP   EQU   TCB
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBDEB   EQU   TCB+8
TCBTIO   EQU   TCB+12
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFA    EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBFLGS2 EQU   TCBFLGS+1
TCBSYSTK EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFLGS3 EQU   TCBFLGS+2
TCBADINP EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBDWSTA EQU   TCBFLGS3
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBFTJST EQU   TCB+44
TCBJPQ   EQU   TCBFTJST
TCBPURGE EQU   TCBJPQ
TCBFTJSA EQU   TCBJPQ+1
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBIDF   EQU   TCBFSA
TCBTME   EQU   TCB+120
TCBPIB   EQU   TCB+124
TCBJSTCB EQU   TCBPIB
TCBPIBT  EQU   TCBJSTCB
TCBPIBA  EQU   TCBJSTCB+1
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBPQE   EQU   TCB+152
TCBFTFLG EQU   TCBPQE+1
TCBFTFL1 EQU   TCBFTFLG
TCBFTFL2 EQU   TCBFTFLG+1
TCBFTFL3 EQU   TCBFTFLG+2
TCBAQE   EQU   TCB+156
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBXCTL  EQU   TCBNSTAE
TCBSCAT  EQU   TCBNSTAE
TCBSUPER EQU   TCBNSTAE
TCBRETRY EQU   TCBNSTAE
TCBVALID EQU   TCBNSTAE
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBLJSND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBNDINT EQU   TCBNDSP3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBCPU   EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBNTJS  EQU   TCBFLGS6
TCBFLGS7 EQU   TCBBITS+3
TCBGPECB EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBPCB   EQU   TCB+212
TCBARB   EQU   TCB+220
TCBTTQE  EQU   TCB+224
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
TIOT1    EQU   0
TIOENTRY EQU   0
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOEDDNM EQU   TIOENTRY+4
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
TIOEFSRT EQU   TIOENTRY+17
POOLSTAR EQU   TIOENTRY+20
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00162 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
IDAUPT   EQU   0
UPTHDR   EQU   IDAUPT
UPTFLG0  EQU   UPTHDR+1
UPTNOENT EQU   IDAUPT+13
UPTSA    EQU   IDAUPT+16
UPTAXENT EQU   IDAUPT+88
UPTRPL   EQU   UPTAXENT
UPTFLG1  EQU   UPTAXENT+4
UPTF1NOP EQU   UPTFLG1
IDAVAT   EQU   0
VATHDR   EQU   IDAVAT
VATNEXT  EQU   IDAVAT+4
VATVSRT  EQU   IDAVAT+8
VATVUSE  EQU   VATVSRT
VATPAMBL EQU   IDAVAT+16
VATVC    EQU   IDAVAT+20
VATVRT   EQU   VATVC
VATNAE   EQU   IDAVAT+24
VATAMBL  EQU   IDAVAT+28
IDAVGTT  EQU   0
VGTTTYPE EQU   IDAVGTT+4
VGTTGSRK EQU   IDAVGTT+6
VGTTSP   EQU   IDAVGTT+7
VGTTSIZE EQU   IDAVGTT+8
VGTTNEXT EQU   IDAVGTT+12
VGTTBIB  EQU   IDAVGTT+16
VGTTVUSE EQU   IDAVGTT+20
VGTTPSB  EQU   IDAVGTT+24
IDAVMT   EQU   0
VMTHDR   EQU   IDAVMT
VMTNXT   EQU   IDAVMT+4
VMTNOVOL EQU   IDAVMT+8
VMTDEV   EQU   IDAVMT+13
VMTVOL   EQU   IDAVMT+16
VMTVFLG1 EQU   VMTVOL+4
VMTVLSER EQU   VMTVOL+6
VMTUCB   EQU   VMTVOL+12
IDAVSRT  EQU   0
VSRTLEN  EQU   IDAVSRT+2
VSRTFLGS EQU   IDAVSRT+12
VSRTCPAH EQU   IDAVSRT+24
VSRTWAH  EQU   IDAVSRT+28
VSRTASCB EQU   IDAVSRT+36
VSRTCSL  EQU   IDAVSRT+44
VSRTCSLF EQU   VSRTCSL
VSRTCSVS EQU   VSRTCSLF
VSRTCSBF EQU   VSRTCSLF
VSRTCSPF EQU   VSRTCSLF
VSRTCSAD EQU   VSRTCSL+1
VSRTCSLN EQU   VSRTCSL+5
IDAWSHD  EQU   0
WSHDPOOL EQU   IDAWSHD+1
WSHDLEN  EQU   IDAWSHD+2
WSHDACHN EQU   IDAWSHD+4
WSHDNEXT EQU   WSHDACHN+1
WSHDNUS  EQU   IDAWSHD+18
WSHDSLT  EQU   IDAWSHD+28
WSHDSAD  EQU   WSHDSLT
@NM00180 EQU   WSHDSAD
WSHDSGMW EQU   WSHDSLT+4
WSHDSFM  EQU   WSHDSGMW
WSHDSFLN EQU   WSHDSFM+1
WSHDSFLG EQU   WSHDSGMW+10
FORCORE  EQU   0
DXDSCB   EQU   FORCORE
DXJBF    EQU   FORCORE+100
DXIOB    EQU   FORCORE+280
DXDAADDR EQU   FORCORE+312
DXDCB    EQU   FORCORE+320
DXCCW    EQU   FORCORE+368
DXCCW5   EQU   DXCCW+32
DXCCW8   EQU   DXCCW+56
DXCCW12  EQU   DXCCW+88
DXXCTL   EQU   FORCORE+472
DXVOLSR  EQU   FORCORE+500
DXVOLSR1 EQU   DXVOLSR
DXVOLSR2 EQU   DXVOLSR+6
DXVOLSR3 EQU   DXVOLSR+12
DXRESSW  EQU   FORCORE+524
DXUKEY   EQU   FORCORE+526
DXTIOTAD EQU   FORCORE+556
DXUCBSAV EQU   FORCORE+564
DXUDCBAD EQU   FORCORE+568
DXUACBAD EQU   DXUDCBAD+1
DXPDCBAD EQU   FORCORE+572
DXPACBAD EQU   DXPDCBAD+1
DXATCOM1 EQU   FORCORE+588
DXATGENS EQU   DXATCOM1
DXATVGIV EQU   DXATGENS
DXATOUTA EQU   DXATCOM1+2
DXATDACC EQU   DXATCOM1+3
DXATCOM2 EQU   FORCORE+592
DXATEOV  EQU   DXATCOM2
DXATOPEN EQU   DXATCOM2+1
DXATALL  EQU   DXATCOM2+2
DXATEXC1 EQU   FORCORE+604
DXATEXB1 EQU   DXATEXC1
DXATEXC2 EQU   FORCORE+608
DSECTSIZ EQU   FORCORE+612
IECPREFX EQU   0
IECEXTPR EQU   IECPREFX+32
IECWTGTB EQU   IECEXTPR+72
IECUPRML EQU   IECEXTPR+80
IECRESWA EQU   IECEXTPR+84
RWARESWA EQU   0
RWAPREFX EQU   RWARESWA
USERPRML EQU   0
IECRRPL  EQU   0
RRPLIST  EQU   IECRRPL
RRFUNCTN EQU   RRPLIST
RRFLAGS1 EQU   RRPLIST+1
RRFLAGS2 EQU   RRPLIST+2
RRFLAGS3 EQU   RRPLIST+3
RRXRETRY EQU   RRPLIST+12
DSMADTRL EQU   0
DSMADTW1 EQU   DSMADTRL
DSMADTB1 EQU   DSMADTW1
DSMADTB2 EQU   DSMADTW1+1
WTGTABLE EQU   0
WTGWTOPR EQU   WTGTABLE
WTG      EQU   0
WTGAREA  EQU   WTG
WTGMODNM EQU   WTGAREA
WTGPREFX EQU   WTGAREA+16
WTGPATHS EQU   WTG+30
WTGENTRY EQU   0
WTGIDTTR EQU   WTGENTRY
APPNMTBL EQU   0
APPENTRY EQU   APPNMTBL+4
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
JFCBX    EQU   0
IDAPDPRM EQU   0
PDPCALL  EQU   IDAPDPRM
PDPCODE  EQU   IDAPDPRM+1
PDPFUNC  EQU   IDAPDPRM+2
PDPACB   EQU   IDAPDPRM+4
PDPTIOT  EQU   IDAPDPRM+12
PDPCLSNM EQU   IDAPDPRM+20
PDPDSN   EQU   IDAPDPRM+24
PDPCTACB EQU   IDAPDPRM+28
PDPDSTYP EQU   IDAPDPRM+33
PDPMSGFL EQU   IDAPDPRM+34
PDPNOTRC EQU   PDPMSGFL
PDPNOMSG EQU   PDPMSGFL
IDABLPRM EQU   0
BLPACBID EQU   IDABLPRM
BLPACBST EQU   IDABLPRM+1
BLPBUFLP EQU   IDABLPRM+4
BLPUACB  EQU   BLPBUFLP
BLPFLAGS EQU   IDABLPRM+10
BLPFLAG1 EQU   BLPFLAGS
BLPFDBDC EQU   BLPFLAG1
BLPFDEL  EQU   BLPFLAG1
BLPFGSR  EQU   BLPFLAG1
BLPFLAG2 EQU   BLPFLAGS+1
BLPCORE  EQU   IDABLPRM+16
BLPGFLG  EQU   BLPCORE
BLPIOACB EQU   IDABLPRM+24
BLPDSORG EQU   BLPIOACB+3
BLPOFLGS EQU   IDABLPRM+48
BLPERFLG EQU   IDABLPRM+51
BLPBUFL  EQU   0
BLPBRLFG EQU   BLPBUFL+4
IDACLWRK EQU   0
CLWID    EQU   IDACLWRK
CLWCOMWK EQU   IDACLWRK+8
CLWSFI   EQU   IDACLWRK+16
CLWBNOFL EQU   IDACLWRK+28
CLWCNOUP EQU   IDACLWRK+28
CLWNWRIT EQU   IDACLWRK+28
CLWPATH  EQU   IDACLWRK+28
CLWSPHCL EQU   IDACLWRK+28
CLWDUMMY EQU   IDACLWRK+28
CLWPARCL EQU   IDACLWRK+28
CLWPRMCL EQU   IDACLWRK+29
CLWSECCL EQU   IDACLWRK+29
PLHKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
UCBBGN   EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBFBYT EQU   JSCBSEC3+10
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCSCT   EQU   JSCBSEC3+68
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
FLC      EQU   PSA
PSARSVTE EQU   PSARSVT
RBSECS03 EQU   RBEP
RBCDE    EQU   RBSECS03
RBCDFLGS EQU   RBCDE
RBSECS05 EQU   RBPGMQ
RBSQE    EQU   RBSECS05
RBSECS06 EQU   RBPGMQ
RBIQE    EQU   RBSECS06
RBSECS07 EQU   RBPGMQ
RBIQE2   EQU   RBSECS07
RBSECS08 EQU   IRBEND
RBSECS09 EQU   IRBEND
TCBS01   EQU   TCBPCB
TCBXSCT  EQU   TCBS01+28
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCBS01+32
TCBESTAE EQU   TCBS01+52
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCBS01+64
TCBFBYT2 EQU   TCBS01+65
TCBRV124 EQU   TCBS01+66
TCBRV133 EQU   TCBS01+67
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00161 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
IDARRPL  EQU   DXATCOM1
IDARRFLG EQU   IDARRPL+1
IDARSTAT EQU   DXATEXC1
RSTAT    EQU   IDARSTAT
RSTATCRO EQU   RSTAT+1
RSTATOP2 EQU   RSTAT+2
IDARRTN  EQU   DXATEXC2
RSTATRTN EQU   IDARRTN
DXXWTG   EQU   DSECTSIZ
DXXAREA  EQU   DSECTSIZ+4
DXXMODNM EQU   DXXAREA
DXXLNG   EQU   DXXAREA+29
DXXENTRY EQU   DXXAREA+32
DXXIDTTR EQU   DXXENTRY
DXREGSAV EQU   DXCCW8
DXREG1   EQU   DXREGSAV+28
DXIDENT  EQU   DXCCW12
DXRETMOD EQU   DXIDENT+2
@NM00210 EQU   DXXCTL
DXSAVMOD EQU   @NM00210+2
@NM00211 EQU   DXRESSW
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
JFCBSPNM EQU   JFCBS001+45
JFCBFLG3 EQU   JFCBSPNM
PDWLIST  EQU   FORCORE
PDWWORK  EQU   DXDCB
DXBTAMX  EQU   DXREG1
DXDSNAME EQU   DXCCW5
IDAESPL  EQU   DXATCOM1
IDARTSA  EQU   DXJBF
MWADACB  EQU   RPLDACB+1
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PDWORKSP EQU   PDWWORK+88
PDWERRCD EQU   PDWWORK+84
PDWMSGPT EQU   PDWWORK+80
PDWSAVED EQU   PDWWORK+76
PDWSAVEC EQU   PDWWORK+72
PDWSAVEB EQU   PDWWORK+68
PDWSAVEA EQU   PDWWORK+64
PDWSAVE  EQU   PDWWORK
WTPROUT  EQU   PDWLIST+75
WTPMSG   EQU   PDWLIST+4
WTPFLGS  EQU   PDWLIST+2
WTPLNGTH EQU   PDWLIST
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBRV08 EQU   JFCBSPNM+1
JFCBRV07 EQU   JFCBFLG3
JFCBRV06 EQU   JFCBFLG3
JFCBRV05 EQU   JFCBFLG3
JFCBRV04 EQU   JFCBFLG3
JFCBRV03 EQU   JFCBFLG3
JFCBRV02 EQU   JFCBFLG3
JFCBEXP  EQU   JFCBFLG3
JFCDQDSP EQU   JFCBFLG3
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCBADSP EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBMSGP EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXAD EQU   JFCBS001+31
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00215 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNVOL EQU   JFCUCSEG+9
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00214 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCORGIS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00213 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
DXRESIND EQU   @NM00211
DXSAVOFF EQU   @NM00210+7
DXSAVADR EQU   DXSAVMOD+2
DXSAVID  EQU   DXSAVMOD
DXABCODE EQU   @NM00210
DXRETCOD EQU   DXIDENT+7
DXRETTTR EQU   DXRETMOD+2
DXRETID  EQU   DXRETMOD
DXCALLID EQU   DXIDENT
DXREG0   EQU   DXREGSAV+24
DXREGE   EQU   DXREGSAV+20
DXREGD   EQU   DXREGSAV+16
DXREGC   EQU   DXREGSAV+12
DXREGB   EQU   DXREGSAV+8
DXREGA   EQU   DXREGSAV+4
DXREG9   EQU   DXREGSAV
DXXEND   EQU   DXXAREA+48
DXXLAST  EQU   DXXAREA+40
DXXCORE  EQU   DXXENTRY+5
DXETTR   EQU   DXXIDTTR+2
DXEID    EQU   DXXIDTTR
DXXPATHS EQU   DXXAREA+30
DXOPCLSW EQU   DXXLNG
DXXTXTLN EQU   DXXAREA+27
DXXMODSZ EQU   DXXAREA+24
DXXATTRB EQU   DXXAREA+22
@NM00195 EQU   DXXAREA+20
DXXPREFX EQU   DXXAREA+16
@NM00194 EQU   DXXAREA+12
DXXMODEP EQU   DXXAREA+8
DXXMODID EQU   DXXMODNM+6
@NM00193 EQU   DXXMODNM
DXXWTOPR EQU   DXXWTG
@NM00174 EQU   RSTAT+3
@NM00173 EQU   RSTATOP2
RSTATCSA EQU   RSTATOP2
IDARCURS EQU   RSTATCRO
IDARCRCU EQU   RSTATCRO
IDARRSTR EQU   RSTATCRO
IDARCKPT EQU   RSTATCRO
RSTATOPT EQU   RSTAT
@NM00172 EQU   IDARRPL+2
@NM00171 EQU   IDARRFLG
RRPLVSAM EQU   IDARRFLG
@NM00170 EQU   IDARRFLG
@NM00169 EQU   IDARRPL
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00161
UCBSKPFG EQU   @NM00161
UCBRIPND EQU   @NM00161
UCBRTIAC EQU   @NM00161
UCBRSV79 EQU   @NM00161
UCBRSV78 EQU   @NM00161
UCBRSV77 EQU   @NM00161
UCBOLTEP EQU   @NM00161
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBDQDSP EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00160 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
TIOUCBP  EQU   TIOEDEVE+1
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
@NM00155 EQU   TCBS01+84
TCBSVCA2 EQU   TCBS01+80
TCBSWASA EQU   TCBS01+76
TCBDBTB  EQU   TCBS01+72
TCBRPT   EQU   TCBS01+68
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCBS01+62
TCBRV326 EQU   TCBS01+60
TCBUKYSP EQU   TCBS01+56
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBSTAFX EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCBS01+48
TCBTCBID EQU   TCBS01+44
TCBSTAWA EQU   TCBS01+40
TCBSWA   EQU   TCBS01+36
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCBS01+27
TCBTID   EQU   TCBS01+26
TCBRSVAA EQU   TCBS01+25
TCBABCUR EQU   TCBS01+24
TCBTMSAV EQU   TCBS01+20
TCBIOTIM EQU   TCBS01+16
TCBRTWA  EQU   TCBS01+12
TCBBACK  EQU   TCBS01+8
TCBTIRB  EQU   TCBS01+4
TCBAECB  EQU   TCBS01
RBRSV161 EQU   RBSECS09+64
RBSIRBWA EQU   RBSECS09
RBIQEWRK EQU   RBSECS08+4
RBNEXAV  EQU   RBSECS08
RBIQEA   EQU   RBIQE2
RBIQE1   EQU   RBIQE+1
RBUSE    EQU   RBIQE
RBSQEA   EQU   RBSQE+1
@NM00144 EQU   RBSQE
RBCDE1   EQU   RBCDE+1
RBCDLOAD EQU   RBCDFLGS
RBCDXCTL EQU   RBCDFLGS
RBCDSYNC EQU   RBCDFLGS
RBCDNODE EQU   RBCDFLGS
RBCDSAVE EQU   RBCDFLGS
RBCDATCH EQU   RBCDFLGS
RBRSV009 EQU   RBCDFLGS
RBNOCELL EQU   RBCDFLGS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00093 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCBASWA EQU   JSCBSEC3+96
JSCBUFPT EQU   JSCBSEC3+92
JSCBACT  EQU   JSCBSEC3+88
JSCBSWSP EQU   JSCBSEC3+87
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCDSABQ EQU   JSCBSEC3+60
JSCBSSIB EQU   JSCBSEC3+56
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00084 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00083 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCBRV08 EQU   JSCBSEC3+11
JSCBRV07 EQU   JSCBFBYT
JSCBRV06 EQU   JSCBFBYT
JSCBRV05 EQU   JSCBFBYT
JSCBRV04 EQU   JSCBFBYT
JSCBRV03 EQU   JSCBFBYT
JSCBRV02 EQU   JSCBFBYT
JSCBADSP EQU   JSCBFBYT
JSCBRV01 EQU   JSCBFBYT
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
CLWTERM  EQU   IDACLWRK+29
CLWGMAIN EQU   IDACLWRK+29
CLWOUTPT EQU   IDACLWRK+28
CLWAMBPT EQU   IDACLWRK+12
BLPBFLCT EQU   BLPBUFL+6
@NM00225 EQU   BLPBUFL+5
@NM00224 EQU   BLPBRLFG
BLPBFLST EQU   BLPBRLFG
BLPBUFSZ EQU   BLPBUFL
@NM00223 EQU   IDABLPRM+49
@NM00222 EQU   IDABLPRM+28
@NM00221 EQU   BLPIOACB
BLPGAD   EQU   BLPCORE+5
BLPGSP   EQU   BLPCORE+4
BLPGSZ   EQU   BLPCORE+1
BLPGPG   EQU   BLPGFLG
BLPGREQ  EQU   BLPGFLG
BLPOACB  EQU   IDABLPRM+13
BLPOCODE EQU   IDABLPRM+12
BLPFRSTR EQU   BLPFLAG2
BLPFIOSR EQU   BLPFLAG2
BLPFINDX EQU   BLPFLAG2
BLPFDATA EQU   BLPFLAG2
BLPFPRIM EQU   BLPFLAG2
BLPFPATH EQU   BLPFLAG2
BLPFUPGR EQU   BLPFLAG2
BLPFPART EQU   BLPFLAG2
BLPFSTAD EQU   BLPFLAG1
BLPFBFRF EQU   BLPFLAG1
BLPFIOBF EQU   BLPFLAG1
BLPFLSR  EQU   BLPFLAG1
BLPFBLD  EQU   BLPFLAG1
BLPSTRNO EQU   IDABLPRM+9
BLPKEYLN EQU   IDABLPRM+8
BLPIOPLH EQU   BLPUACB
@NM00220 EQU   IDABLPRM+2
PDPSFI   EQU   IDAPDPRM+36
@NM00219 EQU   IDAPDPRM+35
PDPSPACE EQU   PDPMSGFL
PDPNOTFC EQU   PDPMSGFL
PDPKEY   EQU   IDAPDPRM+32
PDPVLSER EQU   IDAPDPRM+16
PDPUCB   EQU   IDAPDPRM+8
PDPSFC   EQU   IDAPDPRM+3
JFCBXNXT EQU   JFCBX+172
@NM00218 EQU   JFCBX+144
JFCBXDEV EQU   JFCBX+140
JFCBXNAM EQU   JFCBX+96
@NM00217 EQU   JFCBX+94
JFCBXVOL EQU   JFCBX+4
@NM00216 EQU   JFCBX+3
JFCBXTTR EQU   JFCBX
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00212 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCAMSTR EQU   JFCBFRID+2
JFCAMCRO EQU   JFCBFRID
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
APPNAMID EQU   APPNMTBL+24
APPOFFST EQU   APPENTRY+2
APPCOUNT EQU   APPENTRY
APPSIZE  EQU   APPNMTBL+2
APPBAL   EQU   APPNMTBL
WTGCORE  EQU   WTGENTRY+5
WTGETTR  EQU   WTGIDTTR+2
WTGEID   EQU   WTGIDTTR
WTGOPD   EQU   WTGPATHS+1
WTGRECHK EQU   WTGPATHS+1
WTGTSENQ EQU   WTGPATHS+1
@NM00209 EQU   WTGPATHS+1
WTGTRACE EQU   WTGPATHS+1
@NM00208 EQU   WTGPATHS
WTGJFCBW EQU   WTGPATHS
WTGSMF   EQU   WTGPATHS
WTGTCOS  EQU   WTGPATHS
WTGNSL   EQU   WTGPATHS
WTGPRLSE EQU   WTGPATHS
WTGLNG   EQU   WTG+29
WTGTXTLN EQU   WTGAREA+27
WTGMODSZ EQU   WTGAREA+24
WTGATTRB EQU   WTGAREA+22
@NM00207 EQU   WTGAREA+20
@NM00206 EQU   WTGAREA+12
WTGMODEP EQU   WTGAREA+8
WTGMODID EQU   WTGMODNM+6
@NM00205 EQU   WTGMODNM
DSMADTW6 EQU   DSMADTRL+20
DSMADTW5 EQU   DSMADTRL+16
DSMADTW4 EQU   DSMADTRL+12
DSMADTW3 EQU   DSMADTRL+8
DSMADTW2 EQU   DSMADTRL+4
DSMADTB4 EQU   DSMADTW1+3
DSMADTB3 EQU   DSMADTW1+2
@NM00204 EQU   DSMADTB2
DSMDSNE  EQU   DSMADTB2
DSMTIOTE EQU   DSMADTB2
DSMSMCE  EQU   DSMADTB2
DSMVTOCR EQU   DSMADTB2
DSMASWAP EQU   DSMADTB1
DSMUCBAL EQU   DSMADTB1
DSMRPSAP EQU   DSMADTB1
DSMLOCK  EQU   DSMADTB1
@NM00203 EQU   DSMADTB1
DSMVIO   EQU   DSMADTB1
DSMISAM  EQU   DSMADTB1
RRFWORK  EQU   RRPLIST+20
RRMLRTRY EQU   RRPLIST+16
RRUCBPTR EQU   RRXRETRY
RR1RETRY EQU   RRPLIST+8
RR1WRKAR EQU   RRPLIST+4
@NM00202 EQU   RRFLAGS3
RRFTERM  EQU   RRFLAGS3
RRFFCEXC EQU   RRFLAGS3
RRFFINFC EQU   RRFLAGS3
RRFNRTCA EQU   RRFLAGS3
@NM00201 EQU   RRFLAGS3
RRFENQUL EQU   RRFLAGS2
RRFPRDET EQU   RRFLAGS2
@NM00200 EQU   RRFLAGS2
RRFQMNGR EQU   RRFLAGS2
RRFENQPW EQU   RRFLAGS2
@NM00199 EQU   RRFLAGS2
RRFFIN1  EQU   RRFLAGS2
RRFTRACE EQU   RRFLAGS1
RRFSMF   EQU   RRFLAGS1
RRFNSL   EQU   RRFLAGS1
RRFAMSTR EQU   RRFLAGS1
RRFAMEXR EQU   RRFLAGS1
RRFAMEXG EQU   RRFLAGS1
RRFUSREX EQU   RRFLAGS1
@NM00198 EQU   RRFLAGS1
RRFRJFCB EQU   RRFUNCTN
RRFDADSM EQU   RRFUNCTN
DXDCBLST EQU   USERPRML
RWALIST  EQU   RWARESWA+12
RWAPARM  EQU   RWAPREFX+8
RWATRBUF EQU   RWAPREFX+4
RWATRACE EQU   RWAPREFX
IECQMNGR EQU   IECEXTPR+92
IECMSGQA EQU   IECEXTPR+88
IECDCBNO EQU   IECUPRML
IECRRPRM EQU   IECEXTPR+76
IECREGSV EQU   IECEXTPR
IECCORP2 EQU   IECPREFX+28
IECCORP1 EQU   IECPREFX+24
IECCORPS EQU   IECPREFX+20
IECCORSP EQU   IECPREFX+19
@NM00197 EQU   IECPREFX+17
IECCORKY EQU   IECPREFX+16
IECCORAD EQU   IECPREFX+12
IECCORLN EQU   IECPREFX+8
@NM00196 EQU   IECPREFX+4
IECCORID EQU   IECPREFX
DXATEXB2 EQU   DXATEXC2
DXEXHASP EQU   DXATEXB1
DXATCOM4 EQU   FORCORE+600
DXATCOM3 EQU   FORCORE+596
@NM00192 EQU   DXATCOM2+3
@NM00191 EQU   DXATALL
DXATSWAP EQU   DXATALL
DXATFC   EQU   DXATALL
@NM00190 EQU   DXATOPEN
DXATDFIN EQU   DXATOPEN
DXATDSIN EQU   DXATOPEN
DXATMODM EQU   DXATOPEN
DXATMODE EQU   DXATOPEN
DXATMODS EQU   DXATOPEN
DXATIGN  EQU   DXATOPEN
DXATVCAT EQU   DXATEOV
DXATDADM EQU   DXATEOV
DXATREMT EQU   DXATEOV
DXATDNEW EQU   DXATEOV
DXATDFRE EQU   DXATEOV
DXATDCHN EQU   DXATEOV
DXATNVOL EQU   DXATEOV
DXATCCAT EQU   DXATEOV
DXATRDDB EQU   DXATDACC
DXATEOF  EQU   DXATDACC
@NM00189 EQU   DXATDACC
DXATSMF  EQU   DXATDACC
DXATUPDB EQU   DXATDACC
DXATDRCT EQU   DXATDACC
DXATTRAK EQU   DXATDACC
DXATF1CE EQU   DXATDACC
DXATNSL  EQU   DXATOUTA
DXATTTM2 EQU   DXATOUTA
DXATTTM1 EQU   DXATOUTA
DXATTRL2 EQU   DXATOUTA
DXATTRL1 EQU   DXATOUTA
DXATDATM EQU   DXATOUTA
DXATHDTM EQU   DXATOUTA
DXATVLHD EQU   DXATOUTA
DXATCLOS EQU   DXATCOM1+1
DXATSRET EQU   DXATGENS
DXATVCIG EQU   DXATVGIV
DXATVTMG EQU   DXATVGIV
DXATVSMG EQU   DXATVGIV
DXATJFCB EQU   DXATGENS
DXATDISP EQU   DXATGENS
DXATREFR EQU   DXATGENS
DXATDMCT EQU   DXATGENS
DXMSGADR EQU   FORCORE+584
DXPRPARC EQU   FORCORE+580
DXUDCBML EQU   FORCORE+578
DXUDCBPL EQU   FORCORE+576
@NM00188 EQU   DXPDCBAD
@NM00187 EQU   DXUDCBAD
DXUCBSVV EQU   DXUCBSAV+1
@NM00186 EQU   DXUCBSAV
DXUCBADR EQU   FORCORE+560
DXDEBXAD EQU   FORCORE+552
DXDSAB   EQU   FORCORE+548
DXDSABAD EQU   FORCORE+544
DXDSABQD EQU   FORCORE+540
DXJSCBAD EQU   FORCORE+536
DXTCBADR EQU   FORCORE+532
DXASCBAD EQU   FORCORE+528
DXEXTSW  EQU   FORCORE+527
DXWKEYSV EQU   FORCORE+525
DXUNITOF EQU   FORCORE+522
DXNOUNIT EQU   FORCORE+520
DXVOLSEQ EQU   FORCORE+518
DXVOLMT3 EQU   DXVOLSR3
DXVOLMT2 EQU   DXVOLSR2
DXVOLMT1 EQU   DXVOLSR1
DXWORK4  EQU   FORCORE+496
DXWORK3  EQU   FORCORE+492
DXWORK2  EQU   FORCORE+488
DXWORK1  EQU   FORCORE+484
DXWORK   EQU   FORCORE+480
@NM00185 EQU   FORCORE+464
DXCCW11  EQU   DXCCW+80
DXCCW10  EQU   DXCCW+72
DXCCW9   EQU   DXCCW+64
DXCCW7   EQU   DXCCW+48
DXCCW6   EQU   DXCCW+40
DXCCW4   EQU   DXCCW+24
DXCCW3   EQU   DXCCW+16
DXCCW2   EQU   DXCCW+8
DXCCW1   EQU   DXCCW
DXDCBDEB EQU   DXDCB+44
@NM00184 EQU   DXDCB+24
DXDEBDCB EQU   DXDCB+20
@NM00183 EQU   DXDCB
DXDEB    EQU   DXDAADDR+4
@NM00182 EQU   DXDAADDR
DXECB    EQU   FORCORE+276
DSCCORE  EQU   FORCORE+96
DXLBL    EQU   DXDSCB
WSHDSBM  EQU   WSHDSGMW+11
WSHDSFNO EQU   WSHDSFLG
WSHDSBV  EQU   WSHDSGMW+8
WSHDSONX EQU   WSHDSGMW+4
WSHDSFSP EQU   WSHDSFM
WSHDGSR  EQU   @NM00180
@NM00181 EQU   @NM00180
WSHDOCHN EQU   IDAWSHD+24
WSHDGMRA EQU   IDAWSHD+20
WSHDGMWA EQU   IDAWSHD+8
WSHDGMTB EQU   WSHDACHN
WSHDID   EQU   IDAWSHD
VSRTCSSP EQU   VSRTCSL+4
VSRTCSBH EQU   VSRTCSLF
VSRTCSIO EQU   VSRTCSLF
VSRTCSPL EQU   VSRTCSLF
VSRTCSWS EQU   VSRTCSLF
VSRTCSVG EQU   VSRTCSPF
VSRTCSGT EQU   VSRTCSBF
VSRTCSFX EQU   VSRTCSLF
VSRTNEXT EQU   IDAVSRT+40
VSRTVIOT EQU   IDAVSRT+32
VSRTBUFH EQU   IDAVSRT+20
VSRTPLHH EQU   IDAVSRT+16
VSRTSTRN EQU   IDAVSRT+15
VSRTKL   EQU   IDAVSRT+14
@NM00179 EQU   VSRTFLGS
VSRTBFRF EQU   VSRTFLGS
VSRTIOBF EQU   VSRTFLGS
VSRTLSRF EQU   VSRTFLGS
VSRTGSRF EQU   VSRTFLGS
VSRTEOV  EQU   IDAVSRT+8
VSRTID   EQU   IDAVSRT+4
VSRTKEY  EQU   IDAVSRT+1
VSRTBKID EQU   IDAVSRT
@NM00178 EQU   VMTVOL+5
@NM00177 EQU   VMTVFLG1
VMTOPEN  EQU   VMTVFLG1
VMTUSECT EQU   VMTVOL
VMTDVTYP EQU   VMTDEV+1
VMTDVOPT EQU   VMTDEV
@NM00176 EQU   IDAVMT+10
VMTLEN   EQU   VMTHDR+2
@NM00175 EQU   VMTHDR+1
VMTID    EQU   VMTHDR
VGTTCORE EQU   IDAVGTT+32
@NM00168 EQU   IDAVGTT+28
@NM00167 EQU   IDAVGTT+5
@NM00166 EQU   VGTTTYPE
VGTTCBIC EQU   VGTTTYPE
VGTTOPEN EQU   VGTTTYPE
VGTTCTLG EQU   VGTTTYPE
VGTTLSR  EQU   VGTTTYPE
VGTTGSR  EQU   VGTTTYPE
VGTTSDS  EQU   VGTTTYPE
VGTTID   EQU   IDAVGTT
@NM00165 EQU   IDAVAT+22
VATENO   EQU   VATVC+1
VATVPTR  EQU   VATVSRT+4
VATLEN   EQU   VATHDR+2
@NM00164 EQU   VATHDR+1
VATID    EQU   VATHDR
UPTBG    EQU   UPTAXENT+10
UPTLNCDE EQU   UPTAXENT+9
UPTPASS  EQU   UPTAXENT+8
UPTRKP   EQU   UPTAXENT+6
UPTF1PUD EQU   UPTFLG1+1
UPTF1PNU EQU   UPTFLG1+1
UPTF1ERA EQU   UPTFLG1+1
UPTF1PHY EQU   UPTFLG1+1
UPTF1LOG EQU   UPTFLG1+1
UPTF1BKO EQU   UPTFLG1+1
UPTF1UPG EQU   UPTFLG1
UPTF1RTY EQU   UPTFLG1
UPTF1KEY EQU   UPTFLG1
UPTF1NRF EQU   UPTFLG1
UPTF1NUK EQU   UPTFLG1
UPTF1ATV EQU   UPTFLG1
UPTF1LST EQU   UPTFLG1
UPTF1LOP EQU   UPTRPL
UPTR15   EQU   UPTSA+16
UPTR14   EQU   UPTSA+12
UPTSARES EQU   UPTSA+11
@NM00163 EQU   UPTSA+10
UPTBERCD EQU   UPTSA+9
UPTBEREG EQU   UPTSA+8
UPTLSA   EQU   UPTSA+4
UPTBRPL  EQU   UPTSA
UPTLLEN  EQU   IDAUPT+14
UPTRSC   EQU   IDAUPT+12
UPTOLD   EQU   IDAUPT+8
UPTNEW   EQU   IDAUPT+4
UPTLEN   EQU   UPTHDR+2
UPTPWS   EQU   UPTFLG0
UPTID    EQU   UPTHDR
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBFCBPE EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00162
UCBHALI  EQU   @NM00162
UCBRSV09 EQU   @NM00162
UCBRSV08 EQU   @NM00162
UCBRSV07 EQU   @NM00162
UCBRSV06 EQU   @NM00162
UCBRSV05 EQU   @NM00162
UCBRSV04 EQU   @NM00162
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00159 EQU   UCB
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00158 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00157 EQU   POOLSTAR
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOEJFCB EQU   TIOENTRY+12
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOEWTCT EQU   TIOERLOC
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
TIOELNGH EQU   TIOENTRY
TIOCSTEP EQU   TIOT1+8
TIOCNJOB EQU   TIOT1
@NM00156 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00154 EQU   TCB+232
TCBRV190 EQU   TCB+229
TCBSVCA1 EQU   TCB+228
TCBJSONQ EQU   TCBTTQE
TCBARBA  EQU   TCBARB+1
TCBRSV85 EQU   TCBARB
TCBGQE   EQU   TCB+216
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBRSV84 EQU   TCBADMP
TCBRSV83 EQU   TCBRSTSK
TCBSVCS  EQU   TCBFLGS7
TCBFWDD  EQU   TCBSTACK
TCBFDDEI EQU   TCBRSV34
TCBFDDT  EQU   TCBRSV33
TCBFDD   EQU   TCBGPECB
TCBSTIJS EQU   TCBNTJS
TCBDSINQ EQU   TCBAPG
TCBRUNJB EQU   TCBMIGR
TCBRUNPN EQU   TCBRV303
TCBFPROT EQU   TCBSPVLK
TCBPANIC EQU   TCBCPU
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBNDGTF EQU   TCBNDSP5
TCBNDSPL EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00153 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBRSV28 EQU   TCBNDINT
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBNDSDA EQU   TCBSRBND
TCBABTER EQU   TCBRV302
TCBTERM  EQU   TCBLJSND
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBVALID
TCBRV301 EQU   TCBRETRY
TCBSYNCH EQU   TCBSUPER
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBSCAT
TCB33E   EQU   TCBXCTL
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBDDRTI EQU   TCBAQE
TCBRSV73 EQU   TCBFTFL3
TCBRSV72 EQU   TCBFTFL3
TCBFTDUM EQU   TCBFTFL3
TCBRSV71 EQU   TCBFTFL3
TCBRSV70 EQU   TCBFTFL3
TCBRSV69 EQU   TCBFTFL3
TCBRSV68 EQU   TCBFTFL3
TCBRSV67 EQU   TCBFTFL3
TCBRSV66 EQU   TCBFTFL2
TCBSYSAB EQU   TCBFTFL2
@NM00152 EQU   TCBFTFL2
TCBRSV65 EQU   TCBFTFL2
TCBLPAGE EQU   TCBFTFL2
TCBDDEN  EQU   TCBFTFL2
TCBRSV62 EQU   TCBFTFL2
TCBRSV61 EQU   TCBFTFL2
TCBENQ   EQU   TCBFTFL1
TCBFTCOM EQU   TCBFTFL1
TCBFTTOP EQU   TCBFTFL1
TCBRSV60 EQU   TCBFTFL1
TCBRSV59 EQU   TCBFTFL1
TCBRWTOR EQU   TCBFTFL1
TCBVTAM  EQU   TCBFTFL1
TCBTCAM  EQU   TCBFTFL1
TCBFTLMP EQU   TCBPQE
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBPIBA
TCBSCHED EQU   TCBPIBT
TCBWRITE EQU   TCBPIBT
TCBSCHTI EQU   TCBPIBT
TCBRSV54 EQU   TCBPIBT
TCBSTOP  EQU   TCBPIBT
TCBSIZE  EQU   TCBPIBT
TCBPART  EQU   TCBPIBT
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBIDF
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBFTJSA
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBRSV53 EQU   TCBDWSTA
TCBPKCHG EQU   TCBRSV08
TCBSCHAB EQU   TCBRSV07
TCBFLREG EQU   TCBRSV06
TCBRSV52 EQU   TCBABGM
TCBSYSER EQU   TCBABTRM
TCBRSV51 EQU   TCBADINP
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBRSV50 EQU   TCBFDSOP
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBSYSTK
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBPOOL  EQU   TCBFT
TCBDMPA  EQU   TCBPDUMP
TCBJSTE  EQU   TCBNONPR
@NM00151 EQU   TCBFERA
TCBFE    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00150 EQU   TCBPMASK
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
NEXTTCB  EQU   TCBWORDS
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00149 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00148 EQU   RPLRBAR+3
@NM00147 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00146 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
@NM00145 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLWAIT  EQU   RPLECB
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
SVRBEND  EQU   RBSECT+192
RBFEPARM EQU   RBSECT+168
SIRBEND  EQU   RBSECT+168
RBRSV158 EQU   RBRSV150
RBRSV157 EQU   RBRSV150
RBRSV156 EQU   RBRSV150
RBRSV155 EQU   RBRSV150
RBRSV154 EQU   RBRSV150
RBRSV153 EQU   RBRSV150
RBRSV152 EQU   RBRSV150
RBRSV151 EQU   RBRSV150
RBRSV149 EQU   RBSECT+166
RBRSV148 EQU   RBSECT+164
RBRSV169 EQU   RBSDATA+3
RBSID    EQU   RBSDATA+2
RBSPKEY  EQU   RBSDATA+1
RBRSV168 EQU   RBSFLG3
RBSTERMO EQU   RBSFLG3
RBSBRNTR EQU   RBSFLG3
RBSPRNTR EQU   RBSFLG3
RBSCNCEL EQU   RBSFLG3
RBSRECRD EQU   RBSFLG3
RBSTERMI EQU   RBSFLG3
RBRSV167 EQU   RBSFLG3
RBSOWNRA EQU   RBSOWNR+1
RBSSUPER EQU   RBSFLGS2
RBSKEY0  EQU   RBSFLGS2
RBRSV166 EQU   RBSFLGS2
RBRSV165 EQU   RBSFLGS2
RBSINUSE EQU   RBSFLGS2
RBRSV164 EQU   RBSFLGS2
RBSXCTL2 EQU   RBSFLGS2
RBRSV163 EQU   RBSFLGS2
RBSPARMA EQU   RBSPARM+1
RBSHALT  EQU   RBSIOPRC
RBSNOIOP EQU   RBSIOPRC
RBSASYNC EQU   RBSFLGS1
RBRSV162 EQU   RBSFLGS1
RBSESTAE EQU   RBSFLGS1
RBSDUMMY EQU   RBSFLGS1
RBSSTAR  EQU   RBSFLGS1
RBSSTAI  EQU   RBSFLGS1
RBSEXIT  EQU   RBSCBB+4
RBSCHAIN EQU   RBSCBB
TIRBEND  EQU   @NM00143+8
PRBEND   EQU   @NM00143+8
RBRSV146 EQU   RBRSV138
RBRSV145 EQU   RBRSV138
RBRSV144 EQU   RBRSV138
RBRSV143 EQU   RBRSV138
RBRSV142 EQU   RBRSV138
RBRSV141 EQU   RBRSV138
RBRSV140 EQU   RBRSV138
RBRSV139 EQU   RBRSV138
RBRSV137 EQU   @NM00143+6
RBRSV136 EQU   @NM00143+4
RBRSV135 EQU   @NM00143
@NM00142 EQU   RBSECT+32
@NM00141 EQU   @NM00139+1
RBSCF    EQU   @NM00140
RBPGMQ1  EQU   RBPGMQ+1
@NM00138 EQU   RBPGMQ
@NM00137 EQU   RBSECT+16
@NM00136 EQU   @NM00132
@NM00135 EQU   @NM00132
RBIQETP  EQU   @NM00132
RBUSIQE  EQU   RBETXR
RBATTN   EQU   @NM00132
@NM00134 EQU   @NM00132
@NM00133 EQU   @NM00132
RBPMSVRB EQU   @NM00130
RBATNXIT EQU   @NM00130
@NM00131 EQU   @NM00130
RBWAITP  EQU   @NM00130
RBFNSVRB EQU   RBTRSVRB
RBFTP    EQU   @NM00130
RBSIZE   EQU   RBSECT+8
RBABOPSW EQU   RBSECT+4
RBPPSAV1 EQU   RBPPSAV+1
@NM00128 EQU   RBPPSAV
RBPRFXND EQU   RBPREFIX+64
RBINTCOD EQU   RBINTCDA+1
RBINLNTH EQU   RBINTCDA
RBWCSA   EQU   RBPREFIX+60
RBRSV004 EQU   RBPREFIX+57
RBSSSYN  EQU   RBFLAGS1
RBSCB    EQU   RBFLAGS1
RBLONGWT EQU   RBFLAGS1
RBASIR   EQU   RBFLAGS1
RBRSV159 EQU   RBFLAGS1
RBABEND  EQU   RBFLAGS1
RBXWAIT  EQU   RBFLAGS1
RBSLOCK  EQU   RBFLAGS1
RBRTRAN  EQU   RBRTPSW2+4
RBRTINCD EQU   RBRTICIL+2
RBRTILC  EQU   RBRTICIL+1
RBRSV160 EQU   RBRTICIL
RBRTPSW1 EQU   RBRTOPSW
RBRSV062 EQU   RBRSV054
RBRSV061 EQU   RBRSV054
RBRSV060 EQU   RBRSV054
RBRSV059 EQU   RBRSV054
RBRSV058 EQU   RBRSV054
RBRSV057 EQU   RBRSV054
RBRSV056 EQU   RBRSV054
RBRSV055 EQU   RBRSV054
RBRSV053 EQU   RBPREFIX+38
RBRSV052 EQU   RBPREFIX+36
RBRSV051 EQU   RBPREFIX+32
RBPRFXST EQU   RBPREFIX+32
RBRSV050 EQU   RBPREFIX+28
RBRSV049 EQU   RBRSV041
RBRSV048 EQU   RBRSV041
RBRSV047 EQU   RBRSV041
RBRSV046 EQU   RBRSV041
RBRSV045 EQU   RBRSV041
RBRSV044 EQU   RBRSV041
RBRSV043 EQU   RBRSV041
RBRSV042 EQU   RBRSV041
RBRSV040 EQU   RBPREFIX+26
RBRSV039 EQU   RBPREFIX+24
RBRSV038 EQU   RBPREFIX+20
RBRSV037 EQU   RBPREFIX+16
RBRSV036 EQU   RBRSV028
RBRSV035 EQU   RBRSV028
RBRSV034 EQU   RBRSV028
RBRSV033 EQU   RBRSV028
RBRSV032 EQU   RBRSV028
RBRSV031 EQU   RBRSV028
RBRSV030 EQU   RBRSV028
RBRSV029 EQU   RBRSV028
RBRSV027 EQU   RBRSV019
RBRSV026 EQU   RBRSV019
RBRSV025 EQU   RBRSV019
RBRSV024 EQU   RBRSV019
RBRSV023 EQU   RBRSV019
RBRSV022 EQU   RBRSV019
RBRSV021 EQU   RBRSV019
RBRSV020 EQU   RBRSV019
RBRSV018 EQU   RBPREFIX+13
RBRSV017 EQU   RBPREFIX+12
RBSRV016 EQU   RBPREFIX+11
RBRSV015 EQU   RBPREFIX+10
RBRSV014 EQU   RBPREFIX+8
RBRSV013 EQU   RBPREFIX+4
RBRSV012 EQU   RBPREFIX
RBEXSAVE EQU   XRBESA
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00127 EQU   RBBASIC+24
RBOPSWPS EQU   RBOPSWB2
@NM00126 EQU   RBOPSWB2
@NM00125 EQU   XRBPSW
@NM00124 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00123 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00122 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00121 EQU   XSTAB1
@NM00120 EQU   RBBASIC+8
@NM00119 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00118 EQU   RBPRFX
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00092 EQU   IDAPLH+266
@NM00091 EQU   PLHTMRPL
PLHTMIOB EQU   PLHTMRPL
PLHTMINX EQU   PLHTMRPL
PLHTMDTA EQU   PLHTMRPL
PLHTMDIW EQU   PLHTMRPL
PLHTMBUF EQU   PLHTMRPL
PLHTERM  EQU   PLHTMRPL
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00090 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHRBUFC EQU   IDAPLH+192
PLHIBUFC EQU   IDAPLH+188
PLHNRBA  EQU   IDAPLH+184
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00089 EQU   IDAPLH+172
@NM00088 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHAMB   EQU   IDAPLH+108
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHRDFP  EQU   IDAPLH+68
PLHFSP   EQU   IDAPLH+64
PLHRECP  EQU   IDAPLH+60
PLHNBUFC EQU   IDAPLH+56
PLHDBUFC EQU   IDAPLH+52
PLHLRECL EQU   IDAPLH+48
PLHARDB  EQU   IDAPLH+44
@NM00087 EQU   PLHRSCS
PLHDBPER EQU   PLHRSCS
PLHDSERR EQU   PLHRSCS
PLHASYER EQU   PLHRSCS
@NM00086 EQU   PLHRSCS
PLHBUFHD EQU   PLHRSCS
PLHINEOV EQU   PLHRSCS
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00085 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
PLHSR    EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHASKBF EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHID    EQU   IDAPLHDR
JSCBCSCB EQU   JSCBSEC1+68
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00082 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00081 EQU   IEZJSCB
HEBHDELS EQU   IDAHEB+12
HEBCNT   EQU   IDAHEB+10
@NM00080 EQU   IDAHEB+8
HEBNHEB  EQU   IDAHEB+4
HEBLEN   EQU   IDAHEB+2
@NM00079 EQU   IDAHEB+1
HEBID    EQU   IDAHEB
@NM00078 EQU   @NM00077+1
HEBNBYTE EQU   HEBHDREL+16
HEBAVSP  EQU   HEBHDREL+9
HEBRTFLG EQU   HEBFLAGS
HEBIOSUP EQU   HEBFLAGS
HEBJSTCB EQU   HEBFLAGS
EXLEADDR EQU   EXLEXITP
@NM00076 EQU   EXLENFL
EXLLNK   EQU   EXLENFL
EXLACTM  EQU   EXLENFL
EXLSPEC  EQU   EXLENFL
EXLOPNP  EQU   EXLCOMN+36
@NM00075 EQU   EXLOPNF
EXLOPNK  EQU   EXLOPNF
EXLOPNA  EQU   EXLOPNF
EXLOPNS  EQU   EXLOPNF
EXLJRNP  EQU   EXLCOMN+31
@NM00074 EQU   EXLJRNF
EXLJRNK  EQU   EXLJRNF
EXLJRNA  EQU   EXLJRNF
EXLJRNS  EQU   EXLJRNF
EXLLGNP  EQU   EXLCOMN+26
@NM00073 EQU   EXLLGNF
EXLLGNK  EQU   EXLLGNF
EXLLGNA  EQU   EXLLGNF
EXLLGNS  EQU   EXLLGNF
EXLUPADP EQU   EXLSCIPP
@NM00072 EQU   EXLUPADF
EXLUPADK EQU   EXLSCIPK
EXLUPADA EQU   EXLSCIPA
EXLUPADS EQU   EXLSCIPS
EXLLERP  EQU   EXLCOMN+16
@NM00071 EQU   EXLLERF
EXLLERK  EQU   EXLLERF
EXLLERA  EQU   EXLLERF
EXLLERS  EQU   EXLLERF
@NM00070 EQU   EXLSYNF
EXLSYNK  EQU   EXLSYNF
EXLSYNA  EQU   EXLSYNF
EXLSYNS  EQU   EXLSYNF
EXLEODP  EQU   EXLCOMN+6
@NM00069 EQU   EXLEODF
EXLEODK  EQU   EXLEODF
EXLEODA  EQU   EXLEODF
EXLEODS  EQU   EXLEODF
@NM00068 EQU   EXLCOMN+4
EXLLEN2  EQU   EXLLEN
EXLSTYP  EQU   EXLCOMN+1
EXLID    EQU   EXLCOMN
DEBXSAMB EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBESMVR EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00067 EQU   DEBACS08+12
@NM00066 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00065 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00064 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBUCBA  EQU   DEBUCBAD+1
DEBDVMOD EQU   DEBUCBAD
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBNMEXT EQU   DEBUSRPG
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00063 EQU   CVTFIX+248
@NM00062 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVT      EQU   CVTMAP
BIBVSRTP EQU   IDABIB+104
BIBASCB  EQU   IDABIB+100
BIBDDNM  EQU   IDABIB+92
BIBSTPNM EQU   IDABIB+84
BIBJOBNM EQU   IDABIB+76
BIBSIOAP EQU   BIBRTNS+12
BIBASYRT EQU   BIBRTNS+8
BIBCEAPP EQU   BIBRTNS+4
BIBCSL   EQU   IDABIB+48
BIBVCRT  EQU   IDABIB+40
BIBHEBFQ EQU   IDABIB+36
BIBHEBPT EQU   IDABIB+32
@NM00061 EQU   IDABIB+5
BIBFLG2  EQU   IDABIB+4
BIBLEN   EQU   BIBHDR+2
@NM00060 EQU   BIBFLG1
BIBCKPT  EQU   BIBFLG1
BIBREST  EQU   BIBFLG1
BIBVIRT  EQU   BIBFLG1
BIBID    EQU   BIBHDR
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSMA EQU   ASCBRSM+1
ASCBRV54 EQU   ASCBRSMF
ASCBRV53 EQU   ASCBRSMF
ASCBRV52 EQU   ASCBRSMF
ASCBRV51 EQU   ASCBRSMF
ASCBVEQR EQU   ASCBRSMF
ASCBN2LP EQU   ASCBRSMF
ASCB1LPU EQU   ASCBRSMF
ASCB2LPU EQU   ASCBRSMF
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
CBSVPTR  EQU   CBSVSRT+4
CBSVUSE  EQU   CBSVSRT
CBSCRTCB EQU   AMCBS+28
CBSCRACA EQU   AMCBS+24
CBSCAXCN EQU   AMCBS+20
CBSMCUCB EQU   CBSCMP
CBSCBP   EQU   AMCBS+12
CBSACB   EQU   AMCBS+8
CBSMCSTA EQU   AMCBS+4
CBSSIZ   EQU   AMCBS+2
CBSID    EQU   AMCBS
BUFFER0  EQU   IDATRACE+2440
DECB0    EQU   IDATRACE+2040
TRACE    EQU   IDATRACE+1952
ZEROLINE EQU   IDATRACE+1912
CURDECBT EQU   IDATRACE+1908
CURREC   EQU   IDATRACE+1904
OPENLST  EQU   IDATRACE+1896
DECB@0   EQU   IDATRACE+1816
COUNT    EQU   IDATRACE+1812
COUNT2   EQU   IDATRACE+1808
COUNTE   EQU   IDATRACE+1804
COUNTS   EQU   IDATRACE+1800
DDNAME   EQU   IDATRACE+1792
STEPNAME EQU   IDATRACE+1784
JOBNAME  EQU   IDATRACE+1776
HOOK     EQU   IDATRACE+1772
DBUFFLEN EQU   IDATRACE+1768
IBUFFLEN EQU   IDATRACE+1764
LPMBADR  EQU   IDATRACE+1760
ECB@     EQU   IDATRACE+1756
PSWKEY   EQU   IDATRACE+1752
UPGCOUNT EQU   IDATRACE+1751
AIXUPG   EQU   AIXOPT
AIXNOBSE EQU   AIXOPT
AIXNOAIX EQU   AIXOPT
ONLYCALL EQU   AIXOPT
@NM00059 EQU   AIXOPT
AIXIN    EQU   IDATRACE+1747
FLAG6    EQU   IDATRACE+1746
ERRCDPMT EQU   FLAG5
COUNTX   EQU   FLAG5
AIXX     EQU   FLAG5
NOTE1    EQU   FLAG5
PAPSAVE  EQU   FLAG5
DLL      EQU   FLAG5
IICBX    EQU   FLAG5
REGX     EQU   FLAG5
KEYX     EQU   FLAG4
RECDX    EQU   FLAG4
VSRTX    EQU   FLAG4
VATX     EQU   FLAG4
HEBX     EQU   FLAG4
BIBX     EQU   FLAG4
UPTX     EQU   FLAG4
BSPHX    EQU   FLAG4
DEBX     EQU   FLAG3
ARDBX    EQU   FLAG3
AMDSBX   EQU   FLAG3
AMBX     EQU   FLAG3
ICWAX    EQU   FLAG3
CPAX     EQU   FLAG3
IOBX     EQU   FLAG3
BUFFX    EQU   FLAG3
AMBLX    EQU   FLAG2
BUFFCX   EQU   FLAG2
ALLCB    EQU   FLAG2
PLHX     EQU   FLAG2
ACBX     EQU   FLAG2
RPLX     EQU   FLAG2
INDEXCB  EQU   FLAG2
DATACB   EQU   FLAG2
COUNTING EQU   FLAG1
RMERRCD  EQU   FLAG1
@NM00058 EQU   FLAG1
PARMS    EQU   FLAG1
ADDRONLY EQU   FLAG1
MVS      EQU   FLAG1
COUNTOLY EQU   FLAG1
STOP     EQU   FLAG1
NODDNAME EQU   FLAG0
CISPLIT  EQU   FLAG0
CASPLIT  EQU   FLAG0
NOSAVE   EQU   FLAG0
NOCORE   EQU   FLAG0
INDEXOFF EQU   FLAG0
@NM00057 EQU   FLAG0
SWAPED   EQU   FLAG0
SAVE6X   EQU   IDATRACE+1720
SAVE5X   EQU   IDATRACE+1700
SAVE4X   EQU   IDATRACE+1680
SAVEIN3  EQU   SAVE3X
SAVEIN2  EQU   SAVE2X
R14IN    EQU   SAVEIN1+56
R13IN    EQU   SAVEIN1+52
@NM00056 EQU   SAVEIN1+16
AMBIN    EQU   SAVEIN1+12
PLHIN    EQU   SAVEIN1+8
RPLIN    EQU   SAVEIN1+4
@NM00055 EQU   SAVEIN1
HOOKCALL EQU   IDATRACE+498
@NM00054 EQU   STATUS2
UNSWAP   EQU   STATUS2
UPGDONE  EQU   STATUS
BASEDONE EQU   STATUS
PATHDONE EQU   STATUS
UPGSHORT EQU   STATUS
HEADOUT  EQU   STATUS
INDXPROC EQU   STATUS
GOOD     EQU   STATUS
WTOR     EQU   STATUS
BUFFLEN  EQU   IDATRACE+492
VATADDR  EQU   IDATRACE+488
PLH      EQU   IDATRACE+484
RPL      EQU   IDATRACE+480
DAMB     EQU   IDATRACE+476
IAMB     EQU   IDATRACE+472
AMBL     EQU   IDATRACE+468
INLENGTH EQU   IDATRACE+464
UPGPTR   EQU   IDATRACE+460
CPLH     EQU   IDATRACE+456
IRBNUM   EQU   IDATRACE+452
WORK6    EQU   IDATRACE+448
WORK5    EQU   IDATRACE+444
WORK3    EQU   IDATRACE+440
WORK2    EQU   IDATRACE+436
WORK1    EQU   IDATRACE+432
UNPACK   EQU   IDATRACE+420
DBUFFC   EQU   IDATRACE+416
IBUFFC   EQU   IDATRACE+412
OUTREG   EQU   IDATRACE+408
DLLLINE  EQU   IDATRACE+341
@NM00053 EQU   HEADER+124
ENGLISH  EQU   HEADER+90
LINE2    EQU   HEADER+52
LINE1    EQU   HEADER+13
@NM00052 EQU   HEADER+11
DISPLACE EQU   HEADER+8
@NM00051 EQU   HEADER+7
ADDRESS  EQU   HEADER+1
@NM00050 EQU   HEADER
MSGLNG   EQU   IDATRACE+204
RELYECB  EQU   REPLY@+20
REPLYIN  EQU   REPLYMSG+1
REPLYLYL EQU   REPLYMSG
@NM00049 EQU   REPLY@
ROUTCDE  EQU   IDATRACE+176
OLDSAVE  EQU   IDATRACE+172
HOLDREGS EQU   IDATRACE+140
PRTSAVE  EQU   IDATRACE+76
@NM00048 EQU   SAVE1X+4
AMBLCMB  EQU   IDAAMBL+64
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00047 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00046 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00045 EQU   AMBLFLG2
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00044 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00043 EQU   AMBLQ2
@NM00042 EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00041 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLWAIT EQU   AMBLEFLG
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00040 EQU   AMBCSWD1+1
@NM00039 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
@NM00038 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPIXP  EQU   IDAAMB+72
@NM00037 EQU   IDAAMB+68
AMBIWA   EQU   IDAAMB+64
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00036 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00035 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBSDS   EQU   AMBINFL
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00034 EQU   AMBINFL
@NM00033 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00032 EQU   IDAAMB+38
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00031 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00030 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
@NM00029 EQU   AMBFLG0
AMBSWSP  EQU   AMBFLG0
AMBDSB   EQU   IDAAMB+20
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00028 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00027 EQU   ACBINFL2
ACBCBIC  EQU   ACBINFL2
@NM00026 EQU   ACBINFL2
ACBBYPSS EQU   ACBINFL1
ACBUCRA  EQU   ACBINFL1
ACBSCRA  EQU   ACBINFL1
ACBCAT   EQU   ACBINFL1
ACBIJRQE EQU   ACBINFL1
ACBJEPS  EQU   ACBINFL1
@NM00025 EQU   ACBINFL1
ACBLOCK  EQU   ACBEXFG
@NM00024 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00023 EQU   ACBOFLGS
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00022 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00021 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00020 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00019 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00018 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00017 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00016 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
@NM00011 EQU   PFLIST
ENQRETC  EQU   ENQENTRY+3
ENQRET   EQU   ENQOPT2
@NM00010 EQU   ENQOPT2
ENQDIR   EQU   ENQOPT1
@NM00009 EQU   ENQOPT1
ENQNEW   EQU   ENQOPT1
@NM00117 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00116 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00115 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00114 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00113 EQU   FLCFSA
@NM00112 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00111 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00110 EQU   FLCIOA
@NM00109 EQU   FLCMCLA+15
@NM00108 EQU   FLCMCLA+14
@NM00107 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00106 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00105 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00104 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00103 EQU   FLCPER
@NM00102 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00101 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00100 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00099 EQU   FLCPIILC
@NM00098 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00097 EQU   FLCSVILC
@NM00096 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00095 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00094 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00462 EQU   @RC00448
@RF00919 EQU   @RC00909
@RC00944 EQU   @RC00942
@RF01001 EQU   @RC00994
@RF01497 EQU   @RC01493
@RC01495 EQU   @RC01493
@PB00029 EQU   @PB00030
@PB00028 EQU   @PB00029
@PB00027 EQU   @PB00028
@PB00026 EQU   @PB00027
@PB00025 EQU   @PB00026
@PB00024 EQU   @PB00025
@PB00023 EQU   @PB00024
@PB00022 EQU   @PB00023
@PB00021 EQU   @PB00022
@PB00020 EQU   @PB00021
@PB00019 EQU   @PB00020
@PB00018 EQU   @PB00019
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IDA0200T,(C'PLS1202',0701,78199)
