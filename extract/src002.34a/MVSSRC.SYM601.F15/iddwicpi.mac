IDDWICPI TITLE 'CHANNEL PROGRAM INTERPRETER - MODULE DESCRIPTION'
         ENTRY FRROPEND                                         YM03980
IDDWICPI CSECT
***********************************************************************
*                                                                     *
* MODULE NAME = IDDWICPI                                              *
*                                                                     *
* DESCRIPTIVE NAME = EXCP INTERCEPT PROCESSOR - CHANNEL PROGRAM       *
*                    INTERPRETER                                      *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = CHANGE LEVEL 0                                             *
*                                                                     *
* FUNCTION = THIS MODULE INTERPRETS A CHANNEL PROGRAM DIRECTED        *
*            TO A VIRTUAL DEVICE.                                     *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*      DEPENDENCIES = NONE                                            *
*                                                                     *
*      RESTRICTIONS = THE FOLLOWING COMMANDS ARE CONSIDERED           *
*                     INVALID CHANNEL COMMAND OP CODES WHEN           *
*                     PRESENTED TO THE CPI:                           *
*                        COMMAND                              HEX     *
*                        SPACE COUNT                          0F      *
*                        SEARCH KEY AND DATA EQ               2D      *
*                        SEARCH KEY AND DATA HI               4D      *
*                        SEARCH KEY AND DATA EQ OR HI         6D      *
*                        CONTINUE SCAN EQ                     25      *
*                        SET STATUS MODIFIER                  35      *
*                        CONTINUE SCAN HI                     45      *
*                        CONTINUE SCAN EQ OR HI               65      *
*                        CONTINUE SCAN NO COMPARE             55      *
*                        CONTINUE SCAN SET COMPARE            75      *
*                        DIANOSTIC LOAD                       53      *
*                        DIAGNOSTIC WRITE                     73      *
*                        VARY SENSING                         27      *
*                        READ BUFFERED LOG                    24      *
*                        READ RESET BUFFER LOG                A4      *
*                        READ DIAGNOSTIC STATUS               44      *
*                        RECALIBRATE                          13      *
*                        ORIENT                               2B      *
*                        WRITE HOME ADDRESS                   19      *
*                        WRITE R0                             15      *
*                     IN ADDITION, SINCE THIS MODULE ASSUMES THAT A   *
*                     SET FILE MASK CCW WOULD HAVE BEEN PREFIXED TO   *
*                     THE CHANNEL PROGRAM, THE FOLLOWING OP CODES     *
*                     WILL GENERATE AN INVALID SEQUENCE TERMINATION   *
*                     OF THE CHANNEL PROGRAM:                         *
*                        COMMAND                              HEX     *
*                        SET FILE MASK                        1F      *
*                        READ IPL                             02      *
*                        DEVICE RELEASE                       94      *
*                        DEVICE RESERVE                       B4      *
*                                                                     *
*      REGISTER CONVENTIONS = SEE REGISTER USAGE FOLLWING INTRODUC-   *
*                             TORY COMMENTS.                          *
*                                                                     *
*      PATCH LABEL = CPIPATCH                                         *
*                                                                     *
* MODULE TYPE = CSECT                                                 *
*                                                                     *
*      PROCESSOR = BAL                                                *
*                                                                     *
*      MODULE SIZE = 3928 DECIMAL BYTES                               *
*                                                                     *
*      ATTRIBUTES = REENTERABLE, SUPERVISOR STATE, EXECUTES IN THE    *
*                   KEY OF THE USER, HOLDS BUT DOES NOT OBTAIN THE    *
*                   LOCAL MEMORY LOCK, AND RESIDES IN LPALIB.         *
*                                                                     *
* ENTRY POINT = IDDWICPI - MAIN ENTRY POINT                           *
*                                                                     *
*      PURPOSE = SEE FUNCTION. ENTERED BY MODULE IDDWITRM.            *
*                                                                     *
*      LINKAGE = R14 LOADED WITH RETURN ADDRESS                       *
*                R15 LOADED WITH ENTRY POINT ADDRESS                  *
*                ENTERED BY A DIRECT BRANCH                           *
*                                                                     *
* ENTRY POINT = FRROPEND - SECONDARY ENTRY POINT                      *
*                                                                     *
*      PURPOSE = THIS ENTRY POINT IS USED BY THE SYSTEM               *
*                RECOVERY MANAGER AFTER THE FUNCTIONAL                *
*                RECOVERY ROUTINE (MODULE IDDWIFRR) HAS               *
*                BEEN ENTERED AND DETERMINED THAT RECOVERY            *
*                WAS POSSIBLE.  THE FOLLOWING ERRORS ARE              *
*                CONSIDERED RECOVERABLE:                              *
*                   PROGRAM CHECK CAUSED BY                           *
*                      1 - INVALID CCW ADDR                           *
*                      2 - INVALID DATA ADDR IN CCW ADDR FIELD        *
*                   PROTECTION CHECK CAUSED BY                        *
*                      1 - INVALID CCW ADDR                           *
*                      2 - INVALID DATA ADDR IN CCW ADDR FIELD        *
*                THESE ERRORS OCCUR ONLY WHEN THE CHANNEL             *
*                PROGRAM INTERPRETER WAS IN CONTROL.  THE             *
*                RECOVERY ROUTINE THEREFORE INDICATES THE             *
*                CPI AS A RETRY ROUTINE AT THE SECONDARY              *
*                ENTRY POINT IN ORDER TO TERMINATE THE                *
*                CHANNEL PROGRAM AND POST THE USER'S IOB              *
*                WITH THE APPROPRIATE ERROR CONDITION.                *
*                                                                     *
*      LINKAGE = LPSW USING THE ADDRESS OF IDDWICPE                   *
*                                                                     *
* INPUT = THE FOLLOWING IS THE REGISTER INPUT FOR ENTRY IDDWICPI:     *
*            R0 - VDSCB ADDRESS                                       *
*            R1 - TRACK BUFFER ADDRESS                                *
*            R2 - IOB ADDRESS                                         *
*            R3-R11 - UNDEFINED IF NOT A RESTART SITUATION.           *
*            R3-R11 - RESTORED CONTENTS OF REGISTERS AS THEY WERE     *
*                     RETURNED TO THE TRACK MANAGER IN A RESTART      *
*                     SITUATION SUCH AS A REQUEST FOR A NEW TRACK     *
*                     OR A PCI REQUEST.                               *
*            R12 - WICB ADDRESS                                       *
*            R13 - UNDEFINED                                          *
*            R14 - RETURN ADDRESS                                     *
*            R15 - ENTRY POINT ADDRESS OF THIS MODULE                 *
*         THE FOLLOWING IS THE REGISTER INPUT FOR ENTRY CPIOPEND:     *
*            R0-R15 CONTENTS AT TIME OF ERROR                         *
*                                                                     *
* OUTPUT = R0 - VDSCB ADDRESS                                         *
*          R1 - TRACK BUFFER ADDRESS                                  *
*          R2 - IOB ADDRESS                                           *
*          R3-R11 - UNDEFINED AS OUTPUT BUT ARE TO BE SAVED           *
*                   AND RESTORED BY THE TRACK MANAGER                 *
*          R12 - WICB ADDRESS                                         *
*          R13 - VBPPL SAVE AREA ADDRESS                              *
*          R14 - RETURN ADDRESS OF TRACK MANAGER                      *
*          R15 - RETURN CODE WITH MEANINGS OF:                        *
*                  0 - RETURN CONTROL TO THE APPENDAGE INTER-         *
*                      FACE HANDLER (MODULE IDDWIAPP) AS CHAN-        *
*                      PROGRAM HAS TERMINATED OR A PCI HAS            *
*                      BEEN REQUESTED                                 *
*                  4 - A NEW TRACK IS NEEDED BEFORE THE CPI CAN       *
*                      CONTINUE WITH INTERPRETATION DUE TO            *
*                      A HEAD SWITCH ETC.                             *
*                                                                     *
* EXIT NORMAL = SEE OUTPUT                                            *
*                                                                     *
* EXIT ERROR = SAME AS EXIT NORMAL                                    *
*                                                                     *
* EXTERNAL REFERENCES = SEE BELOW                                     *
*                                                                     *
*      ROUTINES = NONE                                                *
*                                                                     *
*      DATA AREAS = VTRACK (TRACK BUFFER)                             *
*                   CHANNEL PROGRAM BUFFER                            *
*                                                                     *
*      CONTROL BLOCKS = VDSCB (VIRTUAL DATA SET CONTROL BLOCK)        *
*                       WICB (EXCP INTERCEPT PROCESSOR CONTROL BLK)   *
*                                                                     *
* TABLES = KOPMAP1, KOPMAP2, AND KMASKOP                              *
*             TO ELIMINATE INVALID CHANNEL COMMAND OP CODES.  SEE     *
*             TABLE DESCRIPTION PRECEDING TABLE KOPMAP1 FOR MORE      *
*             DETAILS.                                                *
*          KPOSTAB                                                    *
*             TO POSITION TO A GIVEN AREA WITHIN A RECORD.  SEE       *
*             TABLE DESCRIPTION PRECEDING TABLE KPOSTAB FOR AN        *
*             EXTENDED DESCRIPTION OF USE.                            *
*          KERRTAB1 AND KERRTAB2                                      *
*             TO POST THE IOB WITH THE APPROPRIATE SENSE INFORMA-     *
*             TION WHICH IS DEVICE DEPENDENT.  SEE THE DESCRIPTION    *
*             PRECEDING TABLE KERRTAB1 FOR ADDITIONAL INFORMATION.    *
*                                                                     *
* MACROS = EXECUTABLE                                                 *
*             NONE                                                    *
*          MAPPING                                                    *
*             IDDWICB                                                 *
*             IDDVDSCB                                                *
*             IDDTRACK                                                *
*             IEZIOB                                                  *
*                                                                     *
* CHANGE ACTIVITY = SEE BELOW                                         *
*                                                                     *
*      RELEASE 2 DELETIONS                                            *
*                                                              ZA00143*
*                                                                     *
***********************************************************************
         TITLE 'CHANNEL PROGRAM INTERPRETER - EQUATES'
***********************************************************************
*                                                                     *
*        REGISTER USAGE                                               *
*                                                                     *
***********************************************************************
*
RVDSCB   EQU   0                        VIRTUAL DATA SET CONTROL BLOCK
R0       EQU   0                        USED TO DECREMNT A REG BY ONE
*
RTRKBFR  EQU   1                        POINTER TO TRACK BEGINNING
*
RFROM    EQU   2                        USED IN MOVE CHAR LONG
RIOB     EQU   2                        IOB POINTER
*
RFROMCNT EQU   3                        COUNT OF FROM ADDRESS
*                                       WHEN USED WITH REGISTER
*                                       RFROM
RWORK    EQU   3                        WORK REGISTER
*
RTO      EQU   4                        USED IN MOVE CHAR LONG
RWORK1   EQU   4                        GENERAL WORK REGISTER
*
RTOCNT   EQU   5                        COUNT OF TO ADDRESS
*                                       WHEN USED WITH REGISTER RTO
RWORK2   EQU   5                        GENERAL WORK REGISTER
RERRDISP EQU   5                        FOR SETTING DISPLACEMENT OF
*                                       ERROR CONDITION TO BE USED WITH
*                                       AN APPROPRIATE ERROR TABLE
*
RCURSOR  EQU   6                        CURRENT PONTER WITHIN TRACK
*                                       WCHICH IS A BYTE LOCATOR
REVNPAIR EQU   6                        EVEN REG FOR PAIRED INSTRUCTION
*
RXFERBAL EQU   7                        NUMBER OF BYTES CURRENTLY
*                                       AVAILABLE FOR AN OPERATION
RODDPAIR EQU   7                        ODD REG FOR PAIRED INSTRUCTION
*
RBFRDATA EQU   8                        CURRENT POINTER TO DATA
*                                       IN THE CHANNEL PROGRAM
*                                       BUFFER
*
REQBAL   EQU   9                        CURRENT REQUEST BALANCE INIT-
*                                       ITIALLY SET TO CCW COUNT
*
RCCW     EQU   10                       POINTER TO CCW
*
RCXFER   EQU   11                       CURRENTLY USED LENGTH FOR
*                                       AN OPERATION AND IS THE
*                                       SMALLER OF THAT AVAILABLE
*                                       AND THAT REQUESTED
ROPCODE  EQU   11                       MASKED OP CODE REGISTER
*
RWICB    EQU   12                       INTERCEPT PROCESSOR BLOCK
*
RLINK    EQU   13                       INTERNAL LINK REGISTER
R13      EQU   13                       SAVE AREA LOCATOR
*
RLINK2   EQU   14                       SECOND LINK REGISTER USED
R14      EQU   14                       RETURN REGISTER
*
R15      EQU   15                       RETURN CODE REG
RBASE    EQU   15                       ADDRESSING BASE FOR CODE
         EJECT
***********************************************************************
*                                                                     *
*        EQUATES                                                      *
*                                                                     *
*        THE FOLLOWING EQUATES ARE THOSE WHICH ARE NOT DIRECTLY       *
*        RELATED TO A CONTROL BLOCK.  THOSE EQUATES WHICH ARE RELATED *
*        TO A PARTICULAR CONTROL BLOCK APPEAR WITH THE DESCRIPTION OF *
*        THAT CONTROL BLOCK.                                          *
*                                                                     *
*                                                                     *
***********************************************************************
*
*
*              USED FOR CLEARING ALL OR SPECIFIED BITS IN FLAG BYTES
*
FULLBYTE EQU   B'11111111'              USED IN AND INSTRUCTIONS
*                                       TO CLEAR SPECIFIED BITS
FLAGCLR  EQU   B'00000000'              TO CLEAR ONE BYTE FLAGS
*
*
*              BRANCH CONDITIONS USED FOR AN EXECUTED BRANCH INSTRUC-
*              TIONS.
*
HIBRCON  EQU   X'20'                    BRANCH CONDITION CODE FOR
*                                       A HIGH SEARCH
EQBRCON  EQU   X'80'                    BRANCH CONDITION CODE FOR
*                                       AN EQUAL SEARCH
*
*
*              BRANCH CONDITIONS USED IN BRANCH REGISTER INSTRUCTIONS.
*
NOTLOW   EQU   11                       BR REG CONDITION OF NOT LOW
EQZERO   EQU   8                        BRANCH REG CONDITION OF 8
LOW      EQU   4                        BRANCH REG CONDITION OF 4
*
*              SHIFT REGISTER EQUATES
*
DIVBY512 EQU   9                        SHIFT REG TO DIVIDE BY 512
DIVBY2   EQU   1                        SHIFT REG ONE POSITION
MULBY2   EQU   1                        SHIFT REG ONE POSITION
HWSHIFT  EQU   16                       SHIFT REG BY A HALF WORD
LW3TONXT EQU   3                        DOUBLE SHIFT LOW THREE BITS
*                                       FROM ONE REG TO NEXT
HI3TOLW3 EQU   29                       PLACE THREE HIGH ODER BITS OF
*                                       REG IN LOW ORDER POSITION
*
*              RETURN CODES
*
NEWTRACK EQU   4                        NEW TRACK REQUESTED
*                                       FILE MASK NOT VIOLATED
*
*              SENSE BYTE LENGTHS
*
SEN0TO5  EQU   6                        SIX BYTES OF SENSE INFORMATION
SEN6TO23 EQU   18                       ADDITIONAL SENSE BYTES 6-23
*
*
*              MISCELLANEOUS
*
REG14SAV EQU   0                        DISPLACEMENT VALUE INTO SAVE
*                                       AREA FOR REG 14 SAVED
SCHKEYEQ EQU   X'29'                    SEARCH KEY EQUAL OP CODE
LOW3BITS EQU   B'00000111'              MASK FOR CHECKING 3 LOW ORDER
*                                       BITS OF A BYTE
HWMASK   EQU   B'0011'                  MASK USED TO INSERT HALFWORDS
*                                       AS POSITIVE VALUES
ADDRMASK EQU   B'0111'                  USED FOR INSERTING AND STORING
*                                       THREE BYTE ADDRESS FIELDS
FWMASK   EQU   B'1111'                  MASK FOR ACCESSING FULL WORD
*
LOWBYTWD EQU   3                        DISP FOR LOW ORDER BYTE OF WORD
ADDRONLY EQU   0                        FOR CLEARING HIGH ORDER BYTE
*                                       OF REGISTER-DISPLACEMENT VALUE
NORMLSIO EQU   X'40'                    NORMAL SIO CONDITION CODE
BUMPONE  EQU   1                        COUNTER
PADONE   EQU   1                        USED TO BUMP THE AMOUNT MOVED
*                                       DURING A WRITE OPERATION BY
*                                       A PADDING FACTOR OF ONE
NOKEY    EQU   X'00'                    TEST FOR ZERO KEY LENGTH
OREDBYTE EQU   0                        USED IN EXECUTED INSTRUCTIONS
*                                       FOR THE BYTE WHICH GETS OR'ED
*                                       INTO INSTRUCTION
LSECTARG EQU   1                        SECTOR ARGUMENT LENGTH
SECTZERO EQU   X'00'                    SECTOR VALUE USED FOR ALL
*                                       READ SECTORS
SECTXFF  EQU   X'FF'                    SECTOR VALUE WHICH IS GREATER
*                                       THAN THE MAXIMUM PERMISSIBLE
*                                       VALUE BUT IS A LEGAL SECTOR
*                                       VALUE
DUMMYOP  EQU   B'00000100'              THIS IS A DUMMY OP CODE USED
*                                       DURING THE PROCESSING OF AN
*                                       OVERFLOW RECORD AND TELLS THE
*                                       POSITION ROUTINE TO POSITION
*                                       TO THE DATA PORTION OF THE
*                                       OVERFLOW SEGMENT
*
ZERO     EQU   0                        CONSTANT = 0
*
ONE      EQU   1                        CONSTANT = 1
*
TWO      EQU   2                        CONSTANT = 2
*
         TITLE 'CHANNEL PROGRAM INTERPRETER - INITIALIZATION'
         USING *,RBASE                  ADDRESSIBILITY FOR CODE
         USING IOBSTDRD,RIOB            USE STANDARD SECTION OF IOB
         USING WICB,RWICB               INTERCEPT PROCESSOR BLOCK
         USING VTRACK,RTRKBFR           VIRTUAL TRACK
         USING CCWDES,RCCW              CCW ADDRESSABILITY
         B     XSTART                  GO TO XSTART
         DC    C'IDDWICPI'             MODULE NAME              YM02274
*
*
XSTART   TM    WICRESTA,WICRSTRT        IS THIS A RESTART SITUATION
         BO    CPIRSTRT                 YES-GO DETERMINE TYPE
CPIINIT  EQU   *                        NEW CHANNEL PROGRAM
         XC    WICAVXFR(WICCPINT),WICAVXFR  CLEAR THE FIELDS
*                                       USED FOR EACH CHANNEL PGM AND
*                                       ARE THE FOLLOWING
*                                       WICAVXFR
*                                       WICREQXF
*                                       WICOFLG1
*                                       WICOFLG2
*                                       WICSEQFG
*                                       WICXOFLG
*                                       WICWORK
*                                       WICERDSP
*                                       WICLSTOP
*                                       WICCUROP
*                                       WICRESTA
         XC    IOBSENS0(L'IOBSENS0+L'IOBSENS1),IOBSENS0  CLEAR SENSE
         XC    IOBCSW,IOBCSW            CLEAR IOB CSW FIELD
*
*        PERFORM THE NECESSARY CHECKING THAT WOULD HAVE BEEN DONE IF
*        IOS HAD CONSTRUCTED A SET FILE MASK AND TIC TO THE CHANNEL
*        PROGRAM BEING PROCESSED.
*
         TM    WICFMASK,WICFMVAL        CHECK FORMAT OF FILE MASK
         BNZ   CPIIOSFM                 BRANCH - REQUIRED BITS NOT ZERO
         OI    WICSEQFG,WICTICFG        SET TIC SEQUENCE FLAG SINCE
*                                       LAST OP CODE WOULD HAVE BEEN
*                                       A TIC FROM IOS
         MVI   IOBSIOCC,NORMLSIO        SET USER'S SIO CC TO NORMAL
         L     RCCW,WICSTART            GET ADDR OF FIRST CCW
         LA    RCCW,ADDRONLY(RCCW)      CLEAR HI-ORDER BYTE
         TM    WICSTART+LOWBYTWD,LOW3BITS  COMMAND ON DOUBLE WORD
         BNZ   CPIIOSTC                 NO, 3 LOW ORDER BITS NOT ZERO
         TITLE 'CHANNEL PROGRAM INTERPRETER - OP CODE BREAKDOWN'
***********************************************************************
*                                                                     *
*        OPERATION START ROUTINE                                      *
*                                                                     *
*        THE FOLLOWING LABEL IS USED TO START AN OPERATION            *
*        FOLLOWING THE SUCCESSFUL COMPLETION OF THE PRECEDING         *
*        OPERATION.                                                   *
*                                                                     *
***********************************************************************
*
CPIOPROC EQU   *                        *
         XC    WICAVXFR(WICOPINT),WICAVXFR  CLEAR FIELDS USED
*                                       FOR EACH OPERATION AND ARE
*                                       THE FOLLOWING
*                                       WICAVXFR
*                                       WICREQXF
*                                       WICOFLG1
*                                       WICOFLG2
         BAL   RLINK,CPICCWCK           CHECK FORMAT OF CCW
         TM    WICOFLG2,WICINTRP        INTERRUPT SET BY CCW CHECK
         BO    CPIOPEND                 YES GO END CHANNEL PGM
*
***********************************************************************
*        THE FOLLOWING CODE ELIMINATES ALL INVALID OP CODES WHICH     *
*        HAVE PASSED THE FORMAT CHECKING IN CPICCWCK.  THIS IS DONE   *
*        BY USING A BIT MAP WITH A ONE TO ONE CORRESPONDENCE BETWEEN  *
*        EACH POSSIBLE OP CODE AND ITS CORRESPONDING BIT IN THE MAP.  *
*        A BIT SETTING OF ONE DESIGNATES A VALID OP CODE.  THE        *
*        OP CODE ITSELF IS USED TO LOCATE THE CORRECT BYTE IN THE     *
*        MAP AND ALSO TO LOCATE A TEST MASK FOR THAT BYTE.  THE       *
*        BIT MAP IS KOPMAP1 AND THE TABLE OF MASKS TO USE IS KMASKOP. *
*        A TIC SCHOULD NEVER COME THROUGH HERE TO BE VALIDIDATED AS   *
*        ROUTINE CPICCWCK WILL TRANSFER TO THE TICED TO CCW.          *
***********************************************************************
*
CPIOPVAL EQU   *                        *
         SR    REVNPAIR,REVNPAIR        CLEAR FOR INSERT
         IC    REVNPAIR,CCWOPCDE        GET OP CODE
         SRDL  REVNPAIR,LW3TONXT        ROPCODE TO BE USED FOR BYTE
*                                       LOCATION IN BIT MAP
         SRL   RODDPAIR,HI3TOLW3        USED FOR INDEX INTO MASK TBL
         LA    RWORK,KOPMAP1(REVNPAIR)  ADDR OF APPROPRIATE BYTE IN TBL
         IC    RODDPAIR,KMASKOP(RODDPAIR)    GET MASK FROM MASK TABLE
         EX    RODDPAIR,EXOPTEST        TEST THE APPROPRIATE BIT IN MAP
         BZ    CPIOPERR                 BRANCH-OP CODE IS INVALID
CPIOPOK  EQU   *                        CHECK OP CODE
*
*        ALL BUT BITS 3-5 OF THE OP CODE ARE MASKED OFF.  BITS 3-5
*        ARE THEN USED FOR INDEXING INTO THE APPROPRIATE BRANCH TABLE
*        AND ALSO USED BY THE POSITIONING ROUTINE TO POSITION TO THE
*        APPROPRIATE AREA WITHIN A RECORD.  BITS 3-5 DESIGNATE THE
*        COUNT, KEY, AND DATA BITS OF THE OP CODE.
*
         IC    ROPCODE,CCWOPCDE         LOAD COMMAND CODE
         MVC   WICLSTOP,WICCUROP        SAVE LAST OP CODE
         STC   ROPCODE,WICCUROP         SAVE CURRENT OP CODE
         N     ROPCODE,KOPBRMSK         MASK FOR BITS 3-5
*
*        DETERMINE THE TYPE OF OPERATION THAT THIS OP CODE REPRESENTS.
*        THIS IS ACCOMPLISHED BY EXAMINING BITS 6-7 OF THE OP CODE
*        IN CONJUNCTION WITH BITS 1-2 FOR THE CASE OF WRITE AND
*        SEARCH OP CODES.  BITS 6-7 REPRESENT THE TYPE OF OP CODE
*        AND ARE UNIQUE EXCEPT FOR SEARCH AND WRITE WHICH USES
*        BITS 1-2.  BITS 1-2 DESIGNATE THE EQUAL OR HIGH
*        CONDITION FOR SEARCHES AND ARE ALWAYS ZERO FOR WRITES.
*
         TM    CCWOPCDE,CCWTYPE         CHECK TYPE BITS OF OP CODE
         BO    CPICONOP                 CONTROL OP CODE BRANCH
         BZ    CPISENOP                 SENSE OP CODE BRANCH
         TM    CCWOPCDE,CCWREAD         CHECK TYPE FOR READ
         BO    CPIREAD(ROPCODE)         GO TO READ ROUTINE
         TM    CCWOPCDE,CCWHICON+CCWEQCON CHECK FOR SEARCH CONDITION
         BNZ   CPISCHOP                 SEARCH OP CODE BRANCH
         OI    WICOFLG2,WICWRTIP        SET WRITE IN PROGRESS FLAG
         B     CPIWRITE(ROPCODE)        GO TO WRITE JUMP TABLE
*
*
*              ENTERED WHEN A RESTART SITUATION EXISTS AT THE TIME
*              THE TRACK MANAGER CALLS THIS MODULE
*
CPIRSTRT EQU   *                        *
         TM    WICRESTA,WICTRKRS        IS THIS A RESTART FROM A NEW
*                                       TRACK REQUEST
         BO    CPITRKRS                 YES - CONTINUE WITH TRACK
*                                       REQUEST ROUTINE
         TM    WICRESTA,WICPCIRS        RESTART FROM PCI EXIT
         BO    CPIPCIRS                 YES, GO TO PCI RESTART
         B     CPIIOSSK                 ONLY OTHER CONDITION USING
*                                       THE RESTART BIT IS THAT
*                                       THE TRACK MANAGER DETECTED
*                                       AN INVALID INITIAL SEEK
*                                       GO INDICATE THE ERROR
         EJECT
***********************************************************************
*                                                                     *
*        THE FOLLWOING TABLES ARE USED TO ISOLATE THE OP CODE AFTER   *
*        THE TYPE HAS BEEN DETERMINED.  BITS 3-5 OF THE OP CODE WHICH *
*        ARE CURRENTLY IN REGISTER ROPCODE ARE USED TO INDEX INTO     *
*        THE CORRECT PROCESSING ROUTINE.                              *
*                                                                     *
***********************************************************************
*
CPISCHOP EQU   *                        *
         MVI   WICSEQFG,FLAGCLR         CLEAR SEQUENCE FLAGS
         OI    WICOFLG2,WICDATAX        INDICATE OPERATION STARTED
         TM    CCWFLAGS,CCWDC           TEST FLAGS FOR DATA CHAINING
         BO    CPIDCERR                 BRANCH-DATA CHAINING ON SEARCH
*                                       IS NOT SUPPORTED BY THIS MODULE
         B     CPISERCH(ROPCODE)        BRANCH TO ROUTINE FOR OP CODE
*                                       SEARCH
CPISERCH EQU   *                        *
         B     CPIDCERR                 ERROR
         B     CPIDCERR                 ERROR
         B     CPISKEY                  SEARCH KEY
         B     CPIDCERR                 ERROR
         B     CPISID                   SEARCH ID
         B     CPIDCERR                 ERROR
         B     CPISHA                   SEARCH HA
         B     CPIDCERR                 ERROR
*
CPIREAD  EQU   *                        READ
         B     CPIRSECT                 READ SECTOR
         B     CPIRD                    RD
         B     CPIDCERR                 ERROR
         B     CPIRKD                   RKD
         B     CPIRC                    RC, DOESN'T DETECT EOF
         B     CPIRR0                   RR0
         B     CPIRHA                   RHA
         B     CPIRCKD                  RCKD
*
CPIWRITE EQU   *                        WRITE
         B     CPIWSCKD                 WRITE SPECIAL COUNT KEY DATA
*                                       OVERFLOW FEATURE
         B     CPIWD                    WD
         B     CPIDCERR                 ERROR
         B     CPIWKD                   WKD
         B     CPIERASE                 ERASE
         B     CPIDCERR                 ERROR
         B     CPIDCERR                 ERROR
         B     CPIWCKD                  WCKD
*
CPICONOP EQU   *                        NOP
         MVI   WICSEQFG,FLAGCLR         CLEAR SEQUENCE FLAGS
         TM    CCWFLAGS,CCWDC           TEST FLAGS FOR DATA CHAINING
         BO    CPIDCERR                 BRANCH-DATA CHAINING ON CONTROL
*                                       IS NOT SUPPORTED BY THIS MODULE
         B     CPICONT(ROPCODE)         BRANCH TO CORRECT CONTROL RTN
*                                       CONTROL
CPICONT  EQU   *                        *
         B     CPINOP                   NOP AND SET SECTOR
         B     CPISEEK                  FULL SEEK
         B     CPISEEKC                 CYLINDER SEEK
         B     CPIDCERR                 ERROR
         B     CPIDCERR                 ERROR
         B     CPIRSTOR                 RESTORE
         B     CPISEEKH                 HEAD SEEK
         B     CPIDCERR                 ERROR
*
CPISENOP EQU   *                        NOP
         MVI   WICSEQFG,FLAGCLR         CLEAR SEQUENCE FLAGS
         TM    CCWFLAGS,CCWDC           IS DATA CHAINING SPECIFIED
         BO    CPIDCERR                 BRANCH-DATA CHAINING NOT
*                                       SUPPORTED ON SENSE OPERATION
         B     CPISENSE                 GO PROCESS SENSE OPERATION
         EJECT
*
*        THE FOLLOWING LABEL IS ENTERED WHEN IT HAS BEEN DETERMINED
*        THAT AN INVALID OP CODE IS BEING PROCESSED.  THE REGISTERS
*        ARE SET UP FOLLOWING LABEL CPIOPVAL AND ARE USED TO FURTHER
*        ANALYZE THE OP CODE.  THE FURTHER TESTING DONE WILL BE
*        TO FIND THOSE OP CODES WHICH ARE LEGAL BUT WHICH ARE NOT
*        ALLOWED TO BE PRECEDED BY A SET FILE MASK INSTRUCTION.
*
CPIOPERR EQU   *                        *
         OI    WICOFLG2,WICINTRP        INDICATE THAT AN ERROR WAS
*                                       PRIOR TO STARTING OPERATION
         LA    RERRDISP,ERR01DSP        DISPLACEMENT FOR INVALID OP
*                                       CODE ERROR
         STH   RERRDISP,WICERDSP        DISPLACEMENT WILL BE USED BY
*                                       END ROUTINE
         LA    RWORK,KOPMAP2(REVNPAIR)  MAP FOR VALID OP CODE BUT
*                                       INVALID SEQUENCE
         EX    RODDPAIR,EXOPTEST        CHECK SECOND BIT MAP
         BZ    CPIOPEND                 BRANCH-INVALID OP CODE
*                                       GO PROCESS OPERATION END
         LA    RERRDISP,ERR02DSP        DISPLACMENT FOR INVALID SEQ
*                                       ERROR
         STH   RERRDISP,WICERDSP        DISPLACMENT WILL BE USED BY
*                                       END ROUTINE
         B     CPIOPEND                 BRANCH-TERMINATE CHANNEL PGM
*
*
*              THE FOLLOWING ERROR CONDITION IS ENCOUNTER WHEN THE FILE
*              MASK PASSED BY THE USER PROGRAM IS INVALID IN FORMAT.
*              THIS WOULD HAVE BEEN DETECTED BY THE SET FILE MASK
*              CCW WHICH DOES NOT NOW EXIST.
CPIIOSFM EQU   *                        *
         MVC   WICCCWER(L'CCW),KIOSSFM  MOVE IN SKELTON CCW FOR DUM-
*                                       MYING UP A CCW
         LA    RCCW,WICCCWER            INDICATE THIS IS CCW
         LA    RWORK,WICFMASK           POINT TO FILE MASK USED
         STCM  RWORK,ADDRMASK,CCWDATAD+L'CCWOPCDE  SET THE ADDRESS
*                                       PORTION OF THE CCW TO POINT
*                                       TO THE FILE MASK USED
         LA    RERRDISP,ERR01DSP        DISPLACEMENT FOR INVALID FILE
*                                       MASK ERROR
         STH   RERRDISP,WICERDSP        WILL BE USED BY THE END RTN
         OI    WICOFLG2,WICDATAX+WICERROR  INDICATE THAT AN ERROR
*                                       HAS OCCURRED AND THAT DATA
*                                       WAS BEING TRANSFERRED THAT IS
*                                       THE OPERATION HAS STARTED
         XC    WICAVXFR(L'WICAVXFR+L'WICREQXF),WICAVXFR  CLEAR THE
*                                       REQUEST BALANE AND AVAILABLE
*                                       FIELDS FOR END ROUTINE
         B     CPIOPEND                 GO END OPERATION AND CHANNEL
*                                       PROGRAM
*
*
*
*              THE FOLLOWING ERROR CONDITION IS ENCOUNTERED WHEN
*              THE FIRST CCW IN THE CHANNEL PROGRAM DOES NOT START
*              ON A DOUBLE WORD BOUNDARY.
CPIIOSTC EQU   *                        *
         MVC   WICCCWER(L'CCW),KIOSTIC  MOVE IN SKELTON CCW FOR DUM-
*                                       MYING UP A CCW
         LA    RCCW,WICCCWER            INDICATE THIS IS CCW
         MVC   CCWDATAD+L'CCWOPCDE(L'CCWDATAD-L'CCWOPCDE),WICSTART+L'CC*
               WOPCDE
         OI    WICOFLG2,WICINTRP        INDICATE THAT AN INTERRUPT
*                                       IS PENDING
         OI    IOBCSWS1,IOBCSWPG        INDICATE A PROGRAM CHECK
         B     CPIOPEND                 GO PROCESS ENDING OF OPERATION
*
*
*              THE FOLLOWING ERROR CONDITION IS SET WHEN A CCW IS
*              ENCOUNTERED WHICH SPECIFIES DATA CHAINING AND DATA
*              CHAINING IS NOT SUPPORTED FOR THE OPERATION.  THIS
*              APPLIES TO SEEKS, SEARCHES, AND CONTROL OP CODES.
*
CPIDCERR EQU   *                        *
         OI    IOBCSWS1,IOBCSWCC        INDICATE THE ERROR AS A
*                                       CHANNEL CONTROL CHECK
         OI    WICOFLG2,WICERROR        INDICATE THAT AN ERROR WAS
*                                       DETECTED PRIOR TO STARTING
*                                       THIS OPERATION
         B     CPIOPEND                 GO PROCESS ENDING OF THIS
*                                       OPERATION AND TERMINATE THE
*                                       CHANNEL PROGRAM
*
*
*              THE FOLLOWING IS ENTERED WHEN THE TRACK MANAGER HAS
*              DETECTED AN INVALID INITIAL SEEK ADDRESS AND HAS SET
*              THE RESTART BITS ON SO CONTROL IS PASSED HERE
*              FOR SETTING UP THE POSTING OF THE ERROR CONDITION
*
CPIIOSSK EQU   *                        *
         MVC   WICCCWER(L'CCW),KIOSSEEK MOVE SKELTON FORM OF SEEK CCW
*                                       WHICH WOULD HAVE BEEN PREFIXED
*                                       TO THE CHANNEL PROGRAM
         LA    RCCW,WICCCWER            USE THIS AS THE CCW
         LA    RWORK,WICSKBCH           ADDR OF SEEK USED
         STCM  RWORK,ADDRMASK,CCWDATAD+L'CCWOPCDE  POINT THE CCW
*                                       TO THE SEEK ADDRESS
         OI    WICOFLG2,WICDATAX+WICERROR  INDICATE THAT AN ERROR
*                                       HAS OCCURRED AND THAT DATA
*                                       WAS BEING TRANSFERRED THAT IS
*                                       THE OPERATION HAS STARTED
         XC    WICAVXFR(L'WICAVXFR+L'WICREQXF),WICAVXFR  CLEAR THE
*                                       REQUEST BALANE AND AVAILABLE
*                                       FIELDS FOR END ROUTINE
         LA    RERRDISP,ERR03DSP        DISPLACEMENT FOR INVALID SEEK
*                                       ARGUMENT OR SEEK CHECK ERROR
         STH   RERRDISP,WICERDSP        WILL BE USED BY THE END RTN
         NI    WICRESTA,FULLBYTE-WICRSTRT-WICTRMSK  TURN OFF RESTART
         B     CPIOPEND                 GO TERMINATE CHANNEL PGM
         TITLE 'CHANNEL PROGRAM INTERPRETER - POSITIONING ROUTINE'
***********************************************************************
*                                                                     *
*        POSITIONING ROUTINE                                          *
*                                                                     *
*        THIS ROUTINE ORIENTS A COMMAND TO THE CORRECT AREA OF A      *
*        RECORD.  A DETERMINATION IS MADE AS TO WHETHER OR NOT        *
*        THE DESIRED AREA IS WITHIN THE CURRENT RECORD AS IN-         *
*        DICATED BY THE CURRENT SETTING OF THE RELATIVE POSTION       *
*        POINTER) OR IF THE NEXT REOCRD MUST BE USED TO OBTAIN        *
*        THE DESIRED AREA.                                            *
*                                                                     *
*        IN ADDITION, THIS ROUTINE CALCULATES THE NUMBER OF BYTES     *
*        WHICH ARE AVAILABLE FOR THE REQUESTED OPERATION, AND         *
*        DETERMINES THE STARTING ADDRESS OF THE DESIRED AREA.         *
*                                                                     *
*        IF THE END OF TRACK IS REACHED WHILE TRYING TO LOCATE        *
*        THE DESIRED AREA AND THE COMMAND IS A MULTITRACK OP          *
*        CODE, THE 'NEXT TRACK ROUTINE' IS CALLED.  IF THE OP CODE    *
*        IS NOT MULTITRACK AND THE INDEX POINT HAS BEEN PASSED,       *
*        THEN A NO RECORD FOUND CONDITION EXISTS , OTHERWISE IF       *
*        IF THE INDEX POINT HAS NOT BEEN PASSED THEN THE BEGINNING    *
*        OF THE CURRENT TRACK IS USED TO LOCATE THE DESIRED AREA      *
*        AFTER SETTING THE INDEX POINT PASSED.                        *
*                                                                     *
*        A TABLE OF RELATIVE AREA VALUES IS USED BASED ON THE         *
*        BITS 3-5 OF THE OP CODE.  THE FOLLOWING VALUES DESCRIBE      *
*        THE VARIOUS AREAS WITHIN A RECORD.                           *
*              1 = BEFORE COUNT                                       *
*              2 = BEFORE KEY                                         *
*              3 = BEFORE DATA                                        *
*              4 = AFTER DATA                                         *
*              5 = BEFORE HOME ADDRESS                                *
*              6 = BEFORE R0 (AFTER A HOME ADDRESS COMMAND)           *
*              7 = AFTER R0 (FOLLOWING AN R0 COMMAND)                 *
*                                                                     *
*        INPUT - REG ROPCODE CONTAINS THE MASKED VALUE OF THE OP      *
*                    CODE (ALL BUT BITS 3-5 HAVE BEEN SET TO ZERO).   *
*                                                                     *
*        OUTPUT - REG RXFERBAL CONTAINS THE NUMBER OF BYTES THAT      *
*                     ARE AVAILABLE FOR THIS OPERATION.               *
*                 REG RCURSOR CONTAINS THE ADDRESS OF THE AREA TO     *
*                     BE USED FOR THIS OPERARION.                     *
*                                                                     *
*        ADDITIONAL REGISTERS USED - RWORK,RWORK1                     *
*                                                                     *
***********************************************************************
*
CPIPOS   EQU   *                        *
         SRL   ROPCODE,DIVBY2           POSITION TABLES ARE HALF WORDS
         LH    RWORK,KPOSTAB(ROPCODE)   GET DESIRED AREA ORIENTATION
         LH    RWORK1,WICRELTP          GET CURRENT AREA POSITION
         CH    RWORK,KPOSHA             HA OR R0 NEEDED
         BNL   CPIPOSHA                 YES- GO POSITION FOR HA OR R0
         CH    RWORK1,KPOSHA            CURRENT POSITIONED TO HA OR R0
         BNL   CPIPOS60                 YES-GO DETERMINE WHERE TO BEGIN
*                                       FOR DESIRED POSITION
         L     RCURSOR,WICCAM           CURRENT RECORD ADDRESS
         CR    RWORK1,RWORK             COMPARE CURRENT POSITION TO
*                                       DESIRED POSITION
         BNH   CPIPOS10                 BR SINCE DESIRED POSITIONING
*                                       IS IN THIS RECORD
*
*        THE DESIRED AREA IS NOT IN THE CURRENT RECORD AND THEREFORE
*        THE NEXT RECORD IS LOCATED AND THE AREA WITHIN THAT RECORD
*        IS LOCATED.
*
         MVI   WICSEQFG,FLAGCLR         CLEAR SEQUENCE FLAGS SINCE
*                                       A RECORD BOUNDARY HAS BEEN
*                                       CROSSED
         LA    RCURSOR,L'CNTFIELD(RCURSOR) ADD LENGTH OF COUNT AREA
         AH    RCURSOR,WICKL            BUMP BY KEY LENGTH
         A     RCURSOR,WICDL            BUMP BY DATA LENGTH
         C     RCURSOR,WICDATND         NOW AT END OF TRACK
         BNL   CPIPOS40                 YES-BRANCH TO SEE IF IT IS
*                                       POSSIBLE TO CONTINUE
         ST    RCURSOR,WICCAM           ADDRESS OF NEW RECORD
         USING COUNTDES,RCURSOR         DESCRIBE COUNT AREA
*                                       UPDATE NEW KEY LENGTH
         MVC   WICKL+L'WICKL-L'CNTKL(L'CNTKL),CNTKL
*                                       UPDATE NEW DATA LENGTH
         MVC   WICDL+L'WICDL-L'CNTDL(L'CNTDL),CNTDL
         DROP  RCURSOR                  END CURRENT DESCRIPTION
*
*              DETERMINE THE ADDRESS OF THE AREA STARTING WITH THE
*              BEGINNING ADRESS OF THE RECORD.
*
CPIPOS10 EQU   *                        *
         CH    RWORK,KPOSKEY            DESIRED POSITION IN RELATION
*                                       TO KEY POSTION
         BL    CPIPOS30                 BR-WANT COUNT AREA
         BE    CPIPOS20                 BR-WANT KEY AREA
*
*              DATA AREA DESIRED
*
         AH    RCURSOR,WICKL            BUMP BY LENGTH OF CURRENT KEY
*
*              KEY AREA DESIRED OR DATA AREA DESIRED
*
CPIPOS20 EQU   *                         *
         LA    RCURSOR,L'CNTFIELD(RCURSOR) BUMP BY LENGTH OF COUNT
*
*              CALCULATE THE NUMBER OF BYTES AVAILABLE FOR THIS COMMAND
*
CPIPOS30 EQU   *                        *
         SR    RXFERBAL,RXFERBAL        CLEAR REGISTER
         TM    CCWOPCDE,CCWUSECT        IS COUNT USED
         BZ    CPIPOS31                 BRANCH - NO
         LA    RWORK,BUMPONE(RWORK)     UPDATE NUMBER OF AREAS USED
         LA    RXFERBAL,L'CNTFIELD(RXFERBAL) AND NUMBER OF BYTES TO USE
CPIPOS31 EQU   *                        *
         TM    CCWOPCDE,CCWUSEKY        IS KEY USED
         BZ    CPIPOS32                 BRANCH - NO
         LA    RWORK,BUMPONE(RWORK)     UPDATE NUMBER OF AREAS USED
         AH    RXFERBAL,WICKL           AND NUMBER OF BYTES TO USE
CPIPOS32 EQU   *                        *
         TM    CCWOPCDE,CCWUSEDT        IS DATA AREA USED
         BZ    CPIPOS33                 BRANCH - NO
         LA    RWORK,BUMPONE(RWORK)     UPDATE NUMBER OF AREAS USED
         A     RXFERBAL,WICDL           AND NUMBER OF BYTES TO USE
CPIPOS33 EQU   *                        *
         STH   RWORK,WICRELTP           STORE THE POSITION OF THE
*                                       AREA AS IT WILL APPEAR WHEN
*                                       THE OPERATION HAS COMPLETED
*
*              DETERMINE IF THIS IS AN OPERATION PROCESSING AN OVER-
*              FLOW RECORD.
*
         TM    WICOFLG1,WICOVFOP        IS THIS A READ/WRITE DATA/
*                                       KEY DATA OR READ CKD
         BCR   EQZERO,RLINK             RETURN SINCE THESE ARE THE
*                                       ONLY CANDIDATES FOR OVERFLOW
*                                       RECORD PROCESSING
         TM    VTST,VTOVFL              IS THERE AN OVERFLOW REC
         BCR   EQZERO,RLINK             NO - RETURN
         L     RWORK,WICCAM             CURRENT RECORD ADDRESS
         LA    RWORK,L'CNTFIELD(RWORK)  COUNT LENGTH
         AH    RWORK,WICKL              CURRENT KEY LENGTH
         A     RWORK,WICDL              CURRENT DATA LENGTH
         C     RWORK,WICDATND           IS THIS THE LAST RECORD
*                                       ON THE TRACK
         BCR   LOW,RLINK                RETURN IF THE END ADDR
*                                       OF THIS RECORD IS LESS THAN
*                                       THE END OF TRACK
         OI    WICRESTA,WICOVFIP        INDICATE THAT THIS RECORD
*                                       IS OVERFLOW
         BR    RLINK                    RETURN TO CALLER
*
*
*              THE FOLLOWING LABEL IS ENTERED WHEN END OF TRACK HAS
*              BEEN REACHED.
*
CPIPOS40 EQU   *                        *
         TM    CCWOPCDE,CCWMLTRK        MULTITRACK OPERATION
         BO    CPIPOS50                 YES-GO REQUEST NEW TRACK
*
*              SINGLE TRACK OPERATION AND END OF TRACK REACHED
*
         TM    WICXOFLG,WICNDXPT        HAS INDEX POINT BEEN PASSED
         BO    CPIPOS90                 YES-GO SET NO RECORD FOUND
         OI    WICXOFLG,WICNDXPT        SET INDEX POINT PASSED
         B     CPIPOS60                 GO ORIENT TO CORRECT RECORD
*
*              ENTERED AT END OF TRACK AND OPERATION IS MULTITRACK
*
CPIPOS50 EQU   *                        *
         BAL   RLINK2,CPINXTRK          GO REQUEST NEXT TRACK
*
*              ENTERED TO DETERMINE IF ORIENTATION SHOULD BE TO
*              RECORD ZERO OR RECORD ONE WHEN THE BEGINNING OF
*              THE TRACK IS BEING USED.
*
CPIPOS60 EQU   *                        *
         TM    WICOFLG1,WICSID          IS THIS A SEARCH ID COMMAND
         BO    CPIPOS70                 YES-GO ORIENT TO R0
*
*              ORIENT TO RECORD ONE AND IF IT EXISTS THEN CONTINUE
*              WITH THIS TRACK.  OTHERWISE, CHECK TO SEE IF A NEW
*              TRACK CAN BE REQUESTED.
*
         LA    RCURSOR,VTR1             ADDRESS OF R1
         C     RCURSOR,WICDATND         IS R0 THE END OF DATA
         BNL   CPIPOS40                 RECORD ONE DOESN'T EXIST
*                                       SO GO CHECK IF A TRACK SWITCH
*                                       IS DESIRED
         ST    RCURSOR,WICCAM           ADDRESS OF RECORD ONE
         USING COUNTDES,RCURSOR         DESCRIBE COUNT AREA
*                                       UPDATE NEW KEY LENGTH
         MVC   WICKL+L'WICKL-L'CNTKL(L'CNTKL),CNTKL
*                                       UPDATE NEW DATA LENGTH
         MVC   WICDL+L'WICDL-L'CNTDL(L'CNTDL),CNTDL
         DROP  RCURSOR                  END CURRENT DESCRIPTION
         B     CPIPOS10                 GO DETERMINE AREA TO USE
*
*              ENTERED FOR SEARCH ID WHEN POSITIONING
*              IS REQUIRED TO START AT THE BEGINNING OF THE TRACK
*
CPIPOS70 EQU   *                        *
         LA    RCURSOR,VTR0             ORIENTATION TO R0
         ST    RCURSOR,WICCAM           ADDRESS OF R0
         USING COUNTDES,RCURSOR         DESCRIBE COUNT AREA
         MVI   WICKL+ONE,NOKEY          KEY LENGTH OF R0
*                                       UPDATE NEW DATA LENGTH
         MVC   WICDL+L'WICDL-L'CNTDL(L'CNTDL),CNTDL
         DROP  RCURSOR                  DISCONTINUE DESCRIPTION
         MVI   WICRELTP+ONE,WICBFKEY    POSITIONING WILL BE BEFORE
*                                       KEY WHEN OPERATION IS DONE
         BR    RLINK                    RETURN TO CALLER
*
*
*
*              THE FOLLOWING IN ENTERED WHEN A NO RECORD FOUND CON-
*              DITION EXISTS.
*
CPIPOS90 EQU   *                        *
         LA    RERRDISP,ERR06DSP        DISPLACEMENT FOR NO RECORD
*                                       FOUND ERROR
         STH   RERRDISP,WICERDSP        WILL BE USED BY END ROUTINE
         SR    RWORK1,RWORK1            CLEAR REG
         ST    RWORK1,WICAVXFR          SET AVAILABLE BYTES TO ZERO
         ST    REQBAL,WICREQXF          SET REQUESTED AMOUNT
         OI    WICOFLG2,WICERROR        NOTE AN ERROR HAS OCCURED
         LA    RWORK1,WICWORK           IF THE POSITIONING ROUTINE
*                                       WAS CALLED FROM THE MOVE RTN
*                                       FOR THE PURPOSE OF PROCESSING
*                                       AN OVERFLOW RECORD THEN RCCW
*                                       POINTS TO WICWORK INSTEAD OF
*                                       TO THE ACTUAL CCW FROM THE
*                                       CHANNEL PROGRAM AND THE
*                                       CONTENTS OF THE FIELD WICWORK
*                                       IS THE ACTUAL CCW ADDRESS -
*                                       SEE THE MOVE ROUTINE FOR MORE
*                                       DETAILS ON PROCESSING OVER-
*                                       FLOW RECORDS
         CR    RWORK1,RCCW              IS THIS THE DUMMY CCW USED BY
*                                       THE MOVE ROUTINE
         BNE   CPIOPEND                 BR MEANS NOT CALLED FROM
*                                       MOVE ROUTINE
*
*              CALLED BY MOVE ROUTINE WHEN PROCESSING AN OVERLOW
*              RECORD BUT THERE IS NO RECORD ON THE TRACK TO WHICH
*              THE OVERFLOW OCCURRED
*
         L     RCCW,WICWORK             GET THE ACTUAL CCW USED
         LA    RCCW,ADDRONLY(RCCW)      CLEAR OFF DUMMY OP CODE
         B     CPIOPEND                 GO TERMINATE OPERATION
         EJECT
*
*              ENTERED WHEN POSTIONING IS DESIRED BEFORE HOME ADDRESS
*              OR RECORD ZERO.  USE THE CONDITION CODE SETTING WHICH
*              CAUSED THIS ENTRY TO DETERMINE WHICH IS DESIRED.
*
CPIPOSHA EQU   *                        *
         BH    CPIPOSR0                 POSITION FOR R0 COMMAND
*
*              ENTERED WHEN POSITIONING IS REQUESTED FOR HOME ADDRESS
*              AND APPLIES ONLY TO READ HOME ADDRESS AS SEARCH HOME
*              ADDRESS DOES NOT CALL THE POSITIONING ROUTINE.
*
         MVI   WICSEQFG,FLAGCLR         CLEAR SEQUENCE FLAGS
         TM    CCWOPCDE,CCWMLTRK        IS THIS A MULTITRACK OP CODE
         BZ    CPIPHA10                 NO-USE THE CURRENT TRACK
         BAL   RLINK2,CPINXTRK          OTHERWISE REQUEST THE NEXT
*                                       TRACK TO BE USED
CPIPHA10 EQU   *                        *
         LA    RXFERBAL,L'VTHA          INDICATE THAT FIVE BYTES ARE
*                                       AVAILABLE FOR THIS COMMAND
         MVI   WICKL+ONE,NOKEY          KEY LENGTH OF R0
*                                       WHEN OPERATION IS COMPLETED
*
*              SET THE CURRENT RECORD ADDRESS TO R0 AND UPDATE
*              THE CURRENT KEY AND DATA LENGTHS.
*
         LA    RCURSOR,VTR0             POINT TO R0
         ST    RCURSOR,WICCAM           ADDRESS OF R0
         USING COUNTDES,RCURSOR         DESCRIBE COUNT AREA
         MVI   WICKL+ONE,NOKEY          KEY LENGTH OF R0
*                                       UPDATE NEW DATA LENGTH
         MVC   WICDL+L'WICDL-L'CNTDL(L'CNTDL),CNTDL
         DROP  RCURSOR                  DISCONTINUE DESCRIPTION
*
*
         LA    RCURSOR,VTHA             INDICATE THAT THIS OPERATION
*                                       BEGINS AT HOME ADDRESS
         BR    RLINK                    RETURN TO CALLER
*
*              THE FOLLOWING LABEL IS ENTERED WHEN POISTIONING IS
*              DESIRED BEFORE R0 AND IS ONLY ENTERED FOR READ R0
*
CPIPOSR0 EQU   *                        *
         MVI   WICSEQFG,FLAGCLR         CLEAR SEQUENCE FLAGS
         CR    RWORK1,RWORK             COMPARE THE CURRENT POSITION
*                                       (RWORK1) TO SIX (THE DESIRED
*                                       POSITION)
         BE    CPIPR010                 CURRENT POSITON IS BEFORE
*                                       R0 SO USE THIS TRACK
         TM    CCWOPCDE,CCWMLTRK        IS THIS A MULTITRACK OP CODE
         BZ    CPIPR010                 N0-GO USE CURRENT TRACK
         BAL   RLINK2,CPINXTRK          OTHERWISE REQUEST NEXT TRK
*
CPIPR010 EQU   *                        *
*
*              UPDATE THE CURRENT RECORD ADDRESS AND THE KEY AND
*              DATA LENGTHS
*
         LA    RCURSOR,VTR0             ADDRESS OF R0
         ST    RCURSOR,WICCAM           AND UPDATE CONTROL BLOCK
         USING COUNTDES,RCURSOR         DESCRIBE COUNT AREA
         MVI   WICKL+ONE,NOKEY          KEY LENGTH OF R0
*                                       UPDATE NEW DATA LENGTH
         MVC   WICDL+L'WICDL-L'CNTDL(L'CNTDL),CNTDL
         MVI   WICRELTP+ONE,WICAFR0     POSITIONING WILL BE AFTER R0
*                                       WHEN OPERATION IS COMPLETED
         DROP  RCURSOR                  DISCONTINUE DESCRIPTION
*
*              CALCULATE THE NUMBER OF BYTES AVAILABLE
*
         LA    RXFERBAL,L'VTR0CNT+L'VTR0DATA   LENGTH OF RECORD ZERO
         BR    RLINK                    RETURN TO CALLER
         TITLE 'CHANNEL PROGRAM INTERPRETER - TRACK REQUEST ROUTINE'
***********************************************************************
*                                                                     *
*        NEXT TRACK ROUTINE                                           *
*                                                                     *
*        THIS ROUTINE IS ENTERED WHENEVER IT HAS BEEN DETERMINED      *
*        HAS THE NEXT TRACK IS NEEDED.  THIS OCCURS DURING OVERF-     *
*        FLOW PROCESING, AND MULTITRACK OPERATIONS.  THIS ROUTINE     *
*        DETERMINES IF HEAD SWITCHING IS ALLOWED AND IF SO RETURNS    *
*        TO THE TRACK MANAGER ROUTINE WITH A REQUEST FOR A NEW        *
*        TRACK.  IF HEAD SWITCHING IS NOT ALLOWED, THE CHANNEL        *
*        PROGRAM IS POSTED IN ERROR AND TERMINATED.  A RETURN TO THE  *
*        CALLER IS ONLY TAKEN IF THE REQUEST WAS SATISFIED.           *
*                                                                     *
*        THIS ROUTINE IS ALSO USED BY THE SEEK COMMANDS WHEN A NEW    *
*        TRACK IS NEEDED.                                             *
*                                                                     *
***********************************************************************
*                                                                     *
*                                                                     *
CPINXTRK EQU   *                        *
         STM   RWORK,RWORK1,WICRGSV0    SAVE NON-VECTOR CONTENTS
*
*              IF ROUTINE HAS BEEN CALLED BY THE SEEK ROUTINE THEN
*              BYPASS CALCULATION OF NEW SEEK ADDRESS.
*
         TM    WICRESTA,WICSEKRS        CALLED BY SEEK ROUTINE
         BO    CPITRK05                 YES-BYPASS NEW ADDR CALCULATION
         SR    RWORK,RWORK              CLEAR FOR INSERT
         ICM   RWORK,HWMASK,WICSKAHH    GET CURRENT HEAD VALUE
         LA    RWORK,BUMPONE(RWORK)     BUMP HEAD BY ONE
         CH    RWORK,WICMAXHH           COMPARE TO MAXIMUM HEAD
         BNL   CPITRK10                 BR TO INDICATE END OF CYLINDER
         STCM  RWORK,HWMASK,WICSKAHH    UPDATE TO REQUESTED TRACK
         TM    WICFMASK,WICFMSEK        IS HEAD SWITCHING ALLOWED
         BO    CPITRK20                 NO-GO INDICATE FILE MASK
*                                       VIOLATED
*
*              NEXT TRACK WITHIN THIS CYLINDER AND FILE MASK HAS
*              NOT BEEN VIOLATED. RETURN TO TRACK MANAGER WITH A
*              REQUEST FOR A NEW TRACK.
*
CPITRK05 EQU   *                        *
         OI    WICRESTA,WICTRKRS+WICRSTRT      INDICATE TRACK REQUEST
*                                       RESTART
         LR    RWORK,R13                SAVE REG 13 CONTENTS
         LR    RWORK1,R14               SAVE REG 14 CONTENTS
         LR    R13,RVDSCB               VDSCB ADDRESS
         USING VDSCB,R13                DESCRIBE CONTROL BLOCK
         L     R13,VDSVBPPL             PARAMETER LIST CONTAINS SAVE
*                                       AREA FOR LOCATING RETURN
*                                       ADDRESS
         DROP  R13                      DISCONTINUE DESCRIPTION
         USING VBPPL,R13                DESCRIBE PARM LIST
         L     R14,VBPPLSAV+REG14SAV    GET RETURN ADDR FROM SAVE
         LA    R15,NEWTRACK             SET RETURN CODE FOR NEW TRACK
         DROP  R13                      DISCONTINUE DESCRIPTION
         BR    R14                      RETURN TO TRACK MANAGER
*
*              THE FOLLOWING LABEL IS ENTERED WHEN THE DESIRED
*              TRACK HAS BEEN OBTAINED. THE REGISTERS HAVE BEEN
*              SAVED AND RESTORED BY THE TRACK MANAGER.  THE BASE REG
*              HAS ALSO BEEN RESTORED WITH THE BASE OF THIS MODULE.
*
CPITRKRS EQU   *                        *
         LR    R13,RWORK                RESTORE FORMER CONTENTS
         LR    R14,RWORK1               RESTORE FORMER CONTENTS
         NI    WICRESTA,FULLBYTE-WICTRKRS-WICRSTRT  CLEAR RESTART FLAGS
         MVI   WICSEQFG,FLAGCLR         CLEAR ALL SEQUENCE FLAGS
         OI    WICXOFLG,WICNDXPT        SET INDEX POINT PASSED
         LM    RWORK,RWORK1,WICRGSV0    RESTORE FORMER CONTENTS
*
*              NEW TRACK IS NOW READY SO RETURN TO CALLER
*
         BR    RLINK2                   RETURN TO CALLER
*
*
*              THE FOLLOWING LABEL IS ENTERED WHEN THE DESIRED TRACK
*              IS NOT WITHIN THE CURRENT CYLINDER.
CPITRK10 EQU   *                        *
         ICM   RWORK,HWMASK,WICSKACC    GET CURRENT CYLINDER
         LA    RWORK,BUMPONE(RWORK)     BUMP CYLINDER BY ONE
         SLL   RWORK,HWSHIFT            SHIFT VALUE TO SET HEAD
*                                       VALUE TO ZERO
         STCM  RWORK,FWMASK,WICSKACC    UPDATE ADDRESS TO NEXT CYL
*                                       AND HEAD ZERO
         LA    RERRDISP,ERR10DSP        DISPLACEMENT FOR END OF CYL
*                                       ERROR
         B     CPITRK30                 GO SET UP FOR ENDING OPERATION
*
*              ENTERED WHEN THE DESIRED TRACK IS WITHIN THIS CYLINDER
*              BUT THE FILE MASK DOES NOT ALLOW HEAD SWITCHING.
CPITRK20 EQU   *                        *
         LA    RERRDISP,ERR08DSP        DISPLACEMENT FOR FILE PROTECT
*                                       ERROR ON HEAD SWITCHING
*
*              PREPARE TO END OPERATION
*
CPITRK30 EQU   *                         *
         SR    RWORK,RWORK              CLEAR REGISTER
         ST    RWORK,WICAVXFR           INDICATE ZERO BYTES AVAILABLE
         ST    REQBAL,WICREQXF          STORE REQUESTED AMOUNT
         OI    WICOFLG2,WICERROR        INDICATE AN ERROR HAS OCCURRED
         TM    WICRESTA,WICOVFIP        IS OVERFLOW IN PROCESS
         STH   RERRDISP,WICERDSP        SAVE DISP FOR USE BY END RTN
         BZ    CPIOPEND                 NO-GO END OPERATION
         LA    RERRDISP,L'ERRENTRY(RERRDISP)  BUMP ERROR DISP TO
*                                       ENTRY WIHICH INCLUDES OVER-
*                                       FLOW INCOMPLETE
*                                       THIS WILL CORRESPOND TO END
*                                       OF CYLINDER WITH OVERFLOW IN-
*                                       COMPLETE OR FILE PROTECT WITH
*                                       OVERFLOW INCOMPLETE
         STH   RERRDISP,WICERDSP        WILL BE USED BY THE END RTN
*                                       IS INCOMPLETE
         B     CPIOPEND                 GO END OPERATION
         TITLE 'CHANNEL PROGRAM INTERPRETER -  READ ROUTINE'
***********************************************************************
*                                                                     *
*        READ ROUTINE                                                 *
*                                                                     *
*        THE FOLLOWING ROUTINE IS ENTERED AT VARIOUS POINTS CORRES-   *
*        PONDING TO THE COMMAND.  FOR THOSE COMMANDS WHICH DETECT     *
*        END OF FILE, THE TEST IS MADE AFTER CALLING THE POSITION     *
*        ROUTINE.                                                     *
*                                                                     *
*        FOR THE READ COUNT OP CODE, A TEST IS MADE FOR A READ        *
*        COUNT-SEARCH KEY-TIC TO READ COUNT COMBINATION.  IF THIS     *
*        SEQUENCE IS PRESENT, AND CONFINED TO A SINGLE TRACK, A       *
*        BIT IS SET TO TELL THE SUBSEQUENT SEARCH KEY OF THE          *
*        COMBINATION.  FOR THIS SITUATION, THE READ COUNT IS PER-     *
*        FORMED ONCE THEN THE SEARCH IS PERFORMED IN A REPETIVE       *
*        MANNER UNTIL THE DESIRED RECORD IS FOUND OR NOT FOUND AS     *
*        THE CASE MAY BE.  AT THE END OF THE SEARCH KEY OPERATION     *
*        THE PRECEDING COUNT FIELD IS READ TO SATISFY THE DESIRED     *
*        RESULTS.                                                     *
*                                                                     *
***********************************************************************
*                                                                     *
*
*              ENTERED FOR READ DATA/KEY DATA/COUNT KEY DATA
*
CPIRD    EQU   *                        READ DATA
CPIRKD   EQU   *                        READ KEY AND DATA
CPIRCKD  EQU   *                        READ COUNT,KEY AND DATA
         OI    WICOFLG2,WICDATAX        NOTE OPERATION BEGUN
         OI    WICOFLG1,WICOVFOP        NOTE THAT THESE OPERATIONS
*                                       QUALIFY FOR OVERFLOW PROCESSING
         BAL   RLINK,CPIPOS             POSITION TO CORRECT AREA
         ST    REQBAL,WICREQXF          SAVE REQUESTED AMOUNT
         ST    RXFERBAL,WICAVXFR        SAVE AMOUNT AVAILABLE
         ICM   RWORK,FWMASK,WICDL       RETRIEVE DATA LENGTH
         BNZ   CPIBASRW                 NO-SINCE THIS IS NOT END OF
*                                       FILE GO PROCESS MOVE
*              END OF FILE DETECTED
*
         OI    IOBCSWS0,IOBCSWUE        INDICATE UNIT EXCEPTION
         OI    WICOFLG2,WICERROR        NOTE THAT AN ERROR OCCURRED
         NI    WICRESTA,FULLBYTE-WICOVFIP  DO NOT ALLOW OVERFLOW TO
*                                       OCCUR ON END OF FILE
         LTR   RXFERBAL,RXFERBAL        ARE ANY BYTES AVAILABLE FOR
*                                       MOVEMENT
         BNZ   CPIBASRW                 YES-GO PERFORM MOVEMENT OF
*                                       THAT WHICH IS AVAILABLE
         B     CPIOPEND                 NO BYTES ARE AVAILABLE SO GO
*                                       END OPERATION AND CHANNEL PGM
*
*
*              ENTERED FOR READ R0/HA
*
CPIRHA   EQU   *                        READ HOME ADDRESS
CPIRR0   EQU   *                        READ RECORD ZERO
         OI    WICOFLG2,WICDATAX        INDICATE OPERATION STARTED
         BAL   RLINK,CPIPOS             GO GET DESIRED ORIENTATION
         ST    REQBAL,WICREQXF          SAVE AMOUNT REQUESTED
         ST    RXFERBAL,WICAVXFR        SAVE AMOUNT AVAILABLE
         B     CPIBASRW                 GO PERFORM DESIRED MOVE
*
*
*              ENTERED FOR READ COUNT.  END OF FILE IS NOT DETECTED
*              BY THIS COMMAND.  DETERMINE IF A RC-SCH KEY-TIC *-16
*              IS PRESENT.
*
CPIRC    EQU   *                        *
         OI    WICOFLG2,WICDATAX        INDICATE OPERATION STARTED
         TM    CCWOPCDE,CCWMLTRK        IS THIS A MULTITRACK OP CODE
         BO    CPIRC10                  YES-DOESN'T QUALIFY FOR
*                                       SPECIAL PROCESSING
         TM    CCWFLAGS,CCWDC           DATA CHAINED            YM06876
         BO    CPIRC10                  YES-DOESN'T QUALIFY FOR YM06876
*                                       SPECIAL PROCESSING      YM06876
         TM    CCWFLAGS,CCWCC           COMMAND CHAINED         YM06876
         BZ    CPIRC10                  NO-DOESN'T QUALIFY FOR  YM06876
*                                       SPECIAL PROCESSING      YM06876
         LA    RWORK,L'CCW(RCCW)        ADDR OF NEXT CCW
         DROP  RCCW                     DISCONTINUE CURRENT DESCRIPTION
         USING CCWDES,RWORK             DESCRIBE THAT CCW
         CLI   CCWOPCDE,SCHKEYEQ        IS NEXT CCW A SINGLE TRACK
*                                       SEARCH KEY EQUAL
         BNE   CPIRC10                  NO-DOESN'T QUALIFY FOR SPECIAL
*                                       PROCESSING
         TM    CCWFLAGS,CCWDC           DATA CHAINED            YM06876
         BO    CPIRC10                  YES-DOESN'T QUALIFY FOR YM06876
*                                       SPECIAL PROCESSING      YM06876
         TM    CCWFLAGS,CCWCC           IS THE SEARCH KEY EQUAL
*                                       COMMAND CHAINED
         BZ    CPIRC10                  NO-DOESN'T QUALIFY FOR
*                                       SPECIAL PROCESSING
         LA    RWORK,L'CCW(RWORK)       GET ADDR OF CCW FOLLOWING
*                                       THE SEARCH KEY EQUAL
         TM    CCWOPCDE,LOW3BITS        LOW 3 ZERO ONLY FOR TIC
         BNZ   CPIRC10                  BR - NOT A TIC SINCE NON ZERO
         TM    CCWOPCDE,CCWTICBT        SECOND PART OF TIC TEST
         BZ    CPIRC10                  BR - NOT A TIC SO CONTINUE
*
*              SEE IF TIC IS A TIC TO READ COUNT
*
         L     RWORK,CCWDATAD           GET ADDRESS FIELD OF CCW
         DROP  RWORK                    DISCONTINUE DESCRIPTION OF
*                                       NON-CURRENT CCW
         USING CCWDES,RCCW              CCW ADDRESSABILITY
         LA    RWORK,ADDRONLY(RWORK)    CLEAR OP CODE FROM ADDR
         CR    RCCW,RWORK               TIC ADDR SAME AS READ COUNT
         BNE   CPIRC10                  NO-DOESN'T QUALIFY FOR SPE-
*                                       CIAL PROCESSING
*
*              READ COUNT-SEARCH KEY EQUAL- TIC TO READ COUNT HAS
*              BEEN QUALIFIED.
*
         OI    WICXOFLG,WICRCSKT        NOTE HIS FACT SO SEARCH KEY
*                                       OPERATION WILL PERFORM A
*                                       REPETIVE SEARCH
CPIRC10  EQU   *                        CONTINUE-NON-SPECIAL
         BAL   RLINK,CPIPOS             GET PROPER ORIENTATION
         ST    REQBAL,WICREQXF          SAVE AMOUNT REQUESTED
         ST    RXFERBAL,WICAVXFR        SAVE AMOUNT AVAILABLE
         B     CPIBRWLP                 GO TO READ WRITE ROUTINE
*                                       BY BYPASSING THE CLEARING
*                                       OF THE INDEX SWITCH
*
*
*              THE FOLLOWING ROUTINE OPERATES FOR THE READ COUNT SEARCH
*              KEY TIC COMBINATION AND IS USED BY THE SEARCH KEY
*              ROUTINE TO PERFORM THE READ COUNT OPERATION AT THE
*              CONCLUSION OF THE SEARCH KEY ROUTINE.  IT IS CALLED
*              REGARDLESS OF WHETHER OR NOT THE SEARCH WAS SUCESSFUL.
*
*              MUST MOVE THE COUNT FIELD OF THE CURRENT RECORD IN
*              ORDER TO SATISFY THE READ COUNT OPERATION.  AT THIS
*              POINT ONLY THE FIRST READ COUNT WAS PERFORMED AND
*              WAS DONE TO ENSURE THAT THE OPERATION WOULD GO
*              SUCCESSFULLY (THAT IS AN ERROR SITUATION DID NOT
*              NOT EXIST WITH THE READ COUNT).
*
CPIRCSKT EQU   *                        *
         S     RCCW,KCCWLGTH            BACK UP TO READ COUNT CCW
         SR    REQBAL,REQBAL            PREPARE FOR INSERT
         ICM   REQBAL,HWMASK,CCWCOUNT   GET REQUESTED LENGTH
         TM    CCWFLAGS,CCWSKIP         TRANSFER WANTED
         BO    CPIRCSK5                 NO-PREPARE TO RETURN
         L     RBFRDATA,CCWDATAD        GET DATA ADDR FROM CCW
         LA    RBFRDATA,ADDRONLY(RBFRDATA)  CLEAR OP CODE OFF
         L     RCURSOR,WICCAM           GET CURRENT RECORD ADDR
         LA    RXFERBAL,L'CNTFIELD      GET AMOUNT AVAILABLE
         BAL   RLINK,CPIXMITL           GET LENGTH TO USE
         BCTR  RCXFER,R0                PREPARE FOR EXECUTE
         EX    RCXFER,EXMOVCNT          MOVE DESIRED BYTES
CPIRCSK5 EQU   *                        NO TRANSFER
         NI    WICXOFLG,FULLBYTE-WICRCSKT   CLEAR COMBINATION FLAG
         LA    RCCW,L'CCW(RCCW)         RESTORE CCW ADDRESS OF SEARCH
*                                       KEY
         BR    RLINK2                   RETURN TO CALLER
*
*
*
*              READ SECTOR ENTRY
*
CPIRSECT EQU   *                        *
         CLI   WICSECT,WICNORPS         IF MAXIMUM SECTOR VALUE IS
*                                       ZERO THEN THIS IS NOT AN RPS
*                                       DEVICE
         BE    CPIRSTER                 BR AS THIS OP CODE IS NOT
*                                       VALID FOR A NON RPS DEVICE
         OI    WICOFLG2,WICDATAX        INDICATE OPERATION STARTED
         LA    RXFERBAL,LSECTARG        NUMBER OF BYTES TO USE IS ONE
         ST    RXFERBAL,WICAVXFR        SAVE FOR ENDING ROUTINE
         ST    REQBAL,WICREQXF          NUMBER OF BYTES SPECIFIED
*                                       IN CCW COUNT
XPGCK01  MVI   ADDRONLY(RBFRDATA),SECTZERO  RETURN A SECTOR OF ZERO
         MVI   WICSEQFG,FLAGCLR         CLEAR PREVIOUS SEQUENCE
         B     CPIOPEND                 GO END OPERATION
*
*
*              ENTERED FOR READ SETOR WHEN DEVICE IS NOT AN RPS DEVICE
*
CPIRSTER EQU   *                        *
         OI    WICOFLG2,WICINTRP        INDICATE ERROR CONDITION
         LA    RERRDISP,ERR01DSP        DISPLACEMENT INTO ERROR TBL
*                                       FOR INVALID OP CODE ERROR
         STH   RERRDISP,WICERDSP        SAVE FOR ENDING RTN
         B     CPIOPEND                 GO END OPERATION
         TITLE 'CHANNEL PROGRAM INTERPRETER - MOVE ROUTINE'
***********************************************************************
*                                                                     *
*        DATA MOVEMENT ROUTINE                                        *
*                                                                     *
*        THE FOLLOWING PERFORMS THE DATA MOVEMENT FOR THE READ AND    *
*        WRITE OPERATION AND CONTINUES PROCESSING UNTIL THE OPER-     *
*        ATION IS COMPLETE.  THIS INCLUDES DATA CHAINED CCW(S)        *
*        AND PROCESSING OF OVERFLOW RECORDS.                          *
*                                                                     *
*        INPUT - REG REQBAL CONTAINS THE CURRENT REQUESTED AMOUNT     *
*                REG RXFERBAL CONTAINS THE CURRENT AVAILABLE          *
*                REG RCURSOR IS THE CURRENT TRACK LOCATION            *
*                REG RBFRDATA IS THE CURRENT LOCATION IN THE BUFFER   *
*                                                                     *
***********************************************************************
*
CPIBASRW EQU   *                        *
         NI    WICXOFLG,FULLBYTE-WICNDXPT  CLEAR INDEX PASSED
*
*              ENTERED BY READ COUNT WHICH DOESN'T CLEAR INDEX
*              PASSED AND ALSO IS THE MOVE LOOP BEGINNING
*
CPIBRWLP EQU   *                        *
         TM    WICOFLG2,WICXFCOM        TRANSFER COMPLETE OR NOT
*                                       DESIRED SUCH AS ERASE
         BO    CPIBRW40                 YES - SKIP DATA MOVEMENT
         TM    WICOFLG2,WICWRTIP        IS THIS A WRITE
         BZ    CPIBRW20                 BR READ IN PROCESS
         OI    VTST,VTUPDATE            INDICATE TRACK UPDATE
         CR    RXFERBAL,REQBAL          COMPARE THE WRITE CONTROL
*                                       AMOUNT WHICH REPRESENTS THE
*                                       AMOUNT AVAILABLE TO THAT
*                                       WHICH IS REQUESTED OR THE
*                                       CCW AMOUNT
         BNH   CPIBRW10                 TRACK AMOUNT IS LESS THAN
*                                       OR EQUAL TO THAT REQUESTED
*                                       WHEN BRANCH IS TAKEN
*
*              TRACK AVAILABLE AMOUNT IS GREATER THAN THE CURRENT CCW
*              REQUEST AMOUNT.  SET THE AMOUNT TO USE SUCH THAT ONE
*              BYTE OF PADDING RESULTS WHEN THE MOVE IS PERFORMED.
*              THIS IS DONE IN ORDER TO EXPLOIT THE CONDITION CODE
*              WHICH IS SET AT THE COMPLETION OF THE MOVE CHARACTER
*              LONG
*
         LR    RCXFER,RXFERBAL          CALCULATE THE AMOUNT WHICH
         SR    RCXFER,REQBAL            IS THE AVAILABLE RESIDUAL
         LA    RXFERBAL,PADONE(REQBAL)  THE TO COUNT WILL BE ONE
*                                       GREATER THAN THAT WHICH IS
*                                       SPECIFIED IN THE CURRENT CCW
*
*              PERFORM THE MOVE FOR A WRITE OPERATION
*
CPIBRW10 EQU   *                        *
XPGCK02  MVCL  RCURSOR,RBFRDATA         MOVE DESIRED AMOUNT
         BE    CPIBRW60                 BR MEANS THAT THE REQUESTED
*                                       AND THE AVAILABLE AMOUNTS
*                                       WERE THE SAME
         BL    CPIBRW50                 BR MEANS THAT THE CCW COUNT
*                                       EXCEEDED THE AVAILABLE AMOUNT
*                                       WHICH MEANS THAT THE AMOUNT
*                                       NOW AVAILABLE IS ZERO AND
*                                       THE REQUESTED AMOUNT IS GREATER
*                                       THAN ZERO SO GO CHECK TO SEE
*                                       IF THIS IS AN OVERFLOW RECORD
*
*              AVAILABLE AMOUNT EXCEEDED THAT REQUESTED WHICH MEANS
*              THAT THE REQUEST AMOUNT IS NOW = 0 AND THE AVAILABLE
*              AMOUNT IS STILL GREATER THAN 0
*
         BCTR  RCURSOR,ZERO             BACK UP TRACK POINTER ONE
         LR    RXFERBAL,RCXFER          RESIDUAL OF AVAILABLE BYTES
         B     CPIBRW90                 GO SEE IF ANOTHER CCW IS
*                                       AVAILABLE FOR USE
*
*              ENTERED WHEN THE OPERATION IS A READ REQUEST AND
*              TRANSFER IS NOT COMPLETE
*
CPIBRW20 EQU   *                        *
         TM    CCWFLAGS,CCWSKIP         SKIP TRANSFER FOR READ
         BO    CPIBRW40                 YES SKIP MOVE
         LR    RCXFER,REQBAL            CALCULATE THE RESIDUAL IN CASE
         SR    RCXFER,RXFERBAL          THE REQUESTED AMOUNT IS GREATER
*                                       THAN THE AVAILABLE AMOUNT
         BNP   CPIBRW21                 BR MEANS THAT THE BUFFER IS
*                                       SMALLER THAN THE AMOUNT ON
*                                       THE TRACK SO USE THE REQUESTED
*                                       AMOUNT FOR THE TO COUNT
         LR    REQBAL,RXFERBAL          SINCE THE REQUESTED AMOUNT
*                                       IS GREATER THAN OR EQUAL TO
*                                       THAT ON THE TRACK USE THE
*                                       AVAILABLE AMOUNT FOR THE TO
*                                       COUNT TO AVOID ANY PADDING
*                                       IN THE USER'S BUFFER
*
*              PERFORM THE DATA MOVEMENT FOR A READ REQUEST
*
CPIBRW21 EQU   *                        *
XPGCK03  MVCL  RBFRDATA,RCURSOR         MOVE DATA TO CCW BUFFER
         LTR   RCXFER,RCXFER            TEST RESIDUAL WHICH WAS
*                                       CALCULATED ABOVE
         BZ    CPIBRW60                 BR MEANS BOTH THE REQUESTED
*                                       AND THE AVAILABLE AMOUNTS
*                                       HAVE GONE TO ZERO - GO SEE
*                                       IF ANOTHER CCW FOLLOWS AND
*                                       CHECK FOR OVERFLOW PROCESSING
         BM    CPIBRW90                 BR MEANS THAT THE AVILABLE
*                                       AMOUNT WAS LARGER AND IS NOT
*                                       ZERO YET SO GO CHECK FOR NEXT
*                                       CCW DATA CHAINED
*
*              FALL THROUGH MEANS THAT THE REQUESTED AMOUNT WAS GREATER
*              THAN THAT WHICH WAS AVAILABLE SO SET THE CURRENT REQUEST
*              AMOUNT EQUAL TO THE RESIDUAL OF THIS MOVE AND THEN GO
*              CHECK TO SEE IF THIS IS AN OVERFLOW RECORD WHICH WOULD
*              MEAN THAT PROCESSING WOULD CONTINUE AS THE AVAILABLE
*              AMOUNT WOULD BE UPDATED
*
         LR    REQBAL,RCXFER            CURRENT REQUEST BALANCE
         B     CPIBRW50                 GO TEST FOR OVERFLOW RECORD
*
CPIBRW40 EQU   *                        *
         BAL   RLINK,CPIXMITL           GET AMOUNT TO MOVE WHICH
*                                       IS THE SMALLER OF REQUEST
*                                       BALANCE OR TRANSFER BALANCE
         SR    RXFERBAL,RCXFER          DECREASE BYTES AVAILABLE
         SR    REQBAL,RCXFER            DECREASE BYTES REQUESTED
         AR    RCURSOR,RCXFER           BUMP TRACK CURSOR
         AR    RBFRDATA,RCXFER          BUMP BUFFER CURSOR
         CR    RXFERBAL,REQBAL          COMPARE REMAINING VALUES
         BE    CPIBRW60                 EQUAL COMPARE MEANS THAT BOTH
*                                       THE REQUESTED AMOUNT AND THAT
*                                       AVAILABLE HAVE GONE TO ZERO
*                                       GO CHECK FOR ANOTHER CCW DATA
*                                       CHAINED FROM THIS ONE AND SEE
*                                       IF THIS IS AN OVERFLOW RECORD
*
         BH    CPIBRW90                 AVAILABLE AMOUNT IS GREATER
*                                       THAN THAT REQUESTED WHICH MEANS
*                                       THAT THE REQUEST BALANCE HAS
*                                       REACHED ZERO BUT THAT AVAILABLE
*                                       IS GREATER THAN ZERO
*                                       GO CHECK FOR ANOTHER CCW DATA
*                                       CHAINED FROM THIS ONE
*
*              ENTERED WHEN THE AVAILABLE AMOUNT HAS GONE TO ZERO.
*              IF THIS IS AN OVERFLOW RECORD THEN NEXT TRACK NEEDS TO
*              BE PROCESSED
*
CPIBRW50 EQU   *                        *
         TM    WICRESTA,WICOVFIP        IS THIS AN OVERFLOW REC
         BO    CPIBRW80                 YES - GO PREPARE FOR NEW TRACK
*
*              END OF MOVEMENT
*
         B     CPIOPEND                 GO TO OPERATION END
*
*              ENTERED WHEN BOTH THE CURRENTLY AVAILABLE BYTES AND THE
*              REQUESTED BYTES ARE ZERO
*
CPIBRW60 EQU   *                        *
         TM    WICOFLG2,WICINTRP        WAS AN ERROR DETECTED WHEN
*                                       THE LAST CCW OF THIS OPERATION
*                                       WAS FETCHED
         BO    CPIBRW50                 YES - DO NOT PROCESS NEXT CCW
*                                       AT THIS TIME BUT GO CHECK TO
*                                       SEE IF OPERATION IS DONE
         TM    CCWFLAGS,CCWDC           DATA CHAINED
         BO    CPIBRW70                 YES - GET NEXT CCW
         OI    WICOFLG2,WICXFCOM        INDICATE NO MORE TRANSFER
         B     CPIBRW50                 GO SEE IF FINISHED
CPIBRW70 EQU   *                        *
         OI    WICOFLG2,WICDC           INDICATE DATA CHAINING SO
*                                       CCW CHECK ROUTINE WILL
*                                       IGNORE OP CODE
         LA    RCCW,L'CCW(RCCW)         NEXT CCW
         BAL   RLINK,CPICCWCK           CHECK FORMAT OF NEW CCW AND
*                                       GET NEW COUNT AND ADDRESS
         L     RWORK,WICREQXF           PREVIOUS TOTAL
         AR    RWORK,REQBAL             NEW REQUEST COUNT
         ST    RWORK,WICREQXF           AND SAVE FOR ENDING
*
*              IF OVERFLOW RECORD THEN MUST PROCESS FOR NEXT TRACK
*
         TM    WICRESTA,WICOVFIP        OVERFLOW RECORD
         BO    CPIBRW80                 GO PREPARE FOR NEXT TRACK
         OI    WICOFLG2,WICXFCOM        INDICATE NO MORE TRANSFER
         B     CPIBRWLP                 GO THROUGH LOOP ONE MORE TIME
*                                       WITH NEW REQUEST
*
*              THE FOLLOWING LABEL IS ENTERED WHEN THE CURRENT RECORD
*              IS AN OVERFLOW RECORD.  A NEW TRACK MUST BE REQUESTED
*              AND THE TOTAL AVAILABLE BYTES UPDATED.
*
CPIBRW80 EQU   *                        *
         BAL   RLINK2,CPINXTRK          REQUEST NEXT TRACK
*
*              OVERFLOW RESTART LABEL ENTERED WHEN NEW TRACK READY
*
CPIOVFRS EQU   *                        *
         NI    WICRESTA,FULLBYTE-WICOVFIP  CLEAR OVERFLOW PROCESS FLAG
*
*              THE POSITIONING ROUTINE MUST BE CALLED TO OBTAIN
*              THE DESIRED POSITION AND OBTAIN THE CURRENT AVAIL-
*              ABLE BYTES.  HOWEVER, SINCE THE REQUIRED PARAMETERS
*              MAY NOT BE SET UP AT THIS TIME, A SET OF DUMMY
*              PARAMETERS IS CONSTRUCTED TO OBTAIN THE DESIRED
*              RESULTS.  THE KEY PORTION MUST BE SKIPPED.
*
         ST    RCCW,WICWORK             SAVE CURRENT CCW
         LA    RCCW,WICWORK             SET DUMMY CCW ADDR
         MVI   CCWOPCDE,DUMMYOP         SET OP CODE OF FAKE CCW IN
*                                       THAT POSITION ROUTINE WILL
*                                       POSITION TO THE DATA FIELD OF
*                                       RECORD ONE FOR THE OVERFLOW
*                                       SEGMENT
         SR    ROPCODE,ROPCODE          CLEAR REGISTER
         IC    ROPCODE,CCWOPCDE         DUMMY OP CODE
         BAL   RLINK,CPIPOS             GET POSITION AND AVAIL BYTES
         NI    WICXOFLG,FULLBYTE-WICNDXPT   CLEAR INDEX POINT PASSED
         L     RCCW,WICWORK             RESTORE CCW ADDR
         LA    RCCW,ADDRONLY(RCCW)      CLEAR OFF DUMMY OP CODE
*
*              UPDATE TOTAL AVAILABLE BYTES
*
         L     RWORK,WICAVXFR           PREVIOUS TOTAL
         AR    RWORK,RXFERBAL           ADD NEW AMOUNT
         ST    RWORK,WICAVXFR           NEW TOTAL
         B     CPIBRWLP                 CONTINUE PROCESS
*
*              ENTERED WHEN CURRENT TRANSFER BALANCE IS NOT ZERO
*
CPIBRW90 EQU   *                        *
         TM    WICOFLG2,WICINTRP        CHANNEL PGM INTERRUPT SET
*                                       THIS WOULD BE THE CASE IF
*                                       DATA CHAINING CAUSED A NEW
*                                       CCW TO BE FETCHED WHICH RE-
*                                       SULTED IN AN ERROR
         BO    CPIBRW95                 YES - DO NOT FETCH ANOTHER
*                                       CCW BUT PERFORM A ZERO FILL
*                                       IF NEEDED
         TM    CCWFLAGS,CCWDC           DATA CHAINING SPECIFIED
         BZ    CPIBRW95                 NO - PROCESS LONG BLOCK
         OI    WICOFLG2,WICDC           INDICATE DATA CHAINING SO
*                                       CCW CHECK ROUTINE WILL
*                                       IGNORE OP CODE
         LA    RCCW,L'CCW(RCCW)         NEXT CCW
         BAL   RLINK,CPICCWCK           CHECK FORMAT OF NEW CCW AND
*                                       GET NEW COUNT AND ADDRESS
         L     RWORK,WICREQXF           PREVIOUS TOTAL
         AR    RWORK,REQBAL             NEW REQUEST COUNT
         ST    RWORK,WICREQXF           AND SAVE FOR ENDING
         B     CPIBRWLP                 CONTINUE PROCESS
*
*              ENTERED WHEN CURRENT TRANSFER BALANCE IS NOT ZERO
*              AND DATA CHAINING NOT SPECIFIED.  PROCESS LONG BLOCK.
*
CPIBRW95 EQU   *                        *
         TM    WICOFLG2,WICWRTIP        WRITE IN PROCESS
         BZ    CPIBRW96                 NO - SET TRANSFER COMPLETE
*
*              FILL REMAINDER OF RECORD WITH ZEROES AS THIS IS A WRITE
*
         SR    REQBAL,REQBAL            INDICATE NO DATA MOVEMENT
*                                       ONLY PADDING WITH ZEROES
         MVCL  RCURSOR,RBFRDATA         WILL PAD WITH ZEROES
         OI    VTST,VTUPDATE            INDICATE TRACK UPDATED
*
CPIBRW96 EQU   *                        *
         OI    WICOFLG2,WICXFCOM        TRANSFER IS COMPLETE
         B     CPIBRW50                 GO CHECK IF DONE
         TITLE 'CHANNEL PROGRAM INTERPRETER - WRITE COMMANDS'
***********************************************************************
*                                                                     *
*        WRITE ROUTINE                                                *
*                                                                     *
*        THE FOLLOWING CODE IS THE COMBINED ROUTINES FOR WCKD,        *
*        WSPCKD, WD, AND WKD.  EACH OP CODE HAS ITS OWN ENTRY POINT.  *
*        WRITE PREREQUISITES ARE CHECKED AND THE FILE MASK IS         *
*        CHECKED.  FOR THE FORMATTING WRITES, THE END OF DATA IS      *
*        CALCULATED ALONG WITH THE EFFECTIVE END OF DATA.  THE        *
*        EFFECTIVE END OF DATA IS THE END OF DATA PLUS THE SUM OF     *
*        THE OVERHEADS (GAPS) WHICH WOULD HAVE BEEN REQUIRED ON AN    *
*        ACTUAL DEVICE.                                               *
*                                                                     *
***********************************************************************
*
*              ENTERED FOR WSPCKD
*
CPIWSCKD EQU   *                        *
         OI    WICOFLG1,WICWSCKD        INDICATE WSPCKD ENTRY
         B     CPIWRT10                 BR TO INDICATE FORMAT WRITE
*
*              ENTERED FOR ERASE
*
CPIERASE EQU   *                        *
         OI    WICOFLG1,WICERASE        INDICATE ERASE ENTRY
         B     CPIWRT10                 BR TO INDICATE FORMAT WRITE
*
*              ENTERED FOR WCKD
*
CPIWCKD  EQU   *                        *
         OI    WICOFLG1,WICWCKD         INDICATE WCKD ENTRY
CPIWRT10 EQU   *                        *
         OI    WICOFLG1,WICFMTW         INDICATE FORMAT WRITE
*
*              PERFORM THE FUNCTIONS WHICH ARE DONE IN THE POSITION
*              ROUTINE SINCE IT WILL NOT BE CALLED.  IF THE PRE-
*              REQUISITES HAVE BEEN MET, THE POSITION IS KNOWN.
*
*              DETERMINE THE BEGINNING OF WRITE AREA ON TRACK
*
         L     RCURSOR,WICCAM           ADDR OF LAST RECORD
         LA    RCURSOR,L'CNTFIELD(RCURSOR)  BUMP OVER COUNT
         AH    RCURSOR,WICKL            PREVIOUS REC KEY LENGTH
         A     RCURSOR,WICDL            PREVIOUS REC DATA LENGTH
*
         LA    RWORK,WICAFDAT           RELATIVE POSITION WILL BE
         STH   RWORK,WICRELTP           AFTER DATA WHEN DONE
*
*              COMPUTE THE NUMBER OF BYTES INVOLVED IN WRITE
*
         USING CNTFIELD,RBFRDATA        DESCRIBE COUNT TO BE USED
         SR    RXFERBAL,RXFERBAL        CLEAR REG
         ST    RXFERBAL,WICWORK         CLEAR WORK AREA
XPGCK04  IC    RXFERBAL,CNTKL           GET KEY LENGTH
         LA    RXFERBAL,L'CNTFIELD(RXFERBAL) LENGTH OF COUNT
*                                       GET LENGTH OF DATA TO WRITE
XPGCK05  MVC   WICWORK+L'WICWORK-L'CNTDL(L'CNTDL),CNTDL MOVE DATA
         A     RXFERBAL,WICWORK         ADD DATA LENGTH
         DROP  RBFRDATA                 DISCONTINUE USE
*
*              CHECK THE WRITE PREREQUISITES AS INDICATED BY THE
*              SEQUENCE FLAGS.
*
         TM    WICSEQFG,WICLWCKD        LAST OPERATION A WCKD
         BO    CPISEQOK                 BR PREREQUISITE SATISFIED
*
*              ENTERED FOR WD - CONTINUE PREREQUISITE CHECKING
*
CPIWD    EQU   *                        *
         TM    WICSEQFG,WICFSKE         CHAINED FROM A FULL SEARCH
*                                       KEY EQUAL
         BO    CPISEQOK                 BR PREREQUISITES SATISFIED
*
*              ENTERED FOR WKD - CONTINUE PREREQUISITE CHECKING
*
CPIWKD   EQU   *                        *
         TM    WICSEQFG,WICFSIDE        CHAINED FROM A FULL SID EQ
         BZ    CPISEQER                 BR PREREQUISITES NOT SATISFIED
*                                       GO SET INVALID SEQUENCE
*              ENTERED WHEN WRITE PREREQUISITES VERIFIED
*
CPISEQOK EQU   *                        *
         MVI   WICSEQFG,FLAGCLR         CLEAR PREVIOUS SEQUENCE
         TM    WICOFLG1,WICWCKD         THIS A WCKD
         BZ    CPIWRT20                 BR DOESN'T QUALIFY AS A
*                                       PREREQUISITE FOR NEXT
         OI    WICSEQFG,WICLWCKD        INDICATE SEQUENCE OF WCKD
CPIWRT20 EQU   *                        NON-WCKD
         TM    WICOFLG1,WICFMTW         THIS A FORMAT WRITE
         BZ    CPIWRT80                 GO PROCESS WD AND WKD
*
*              CHECK TO MAKE SURE THAT AN OVERFLOW RECORD DOES NOT
*              PRECEDE THIS RECORD TO BE WRITTEN.
*
         TM    VTST,VTOVFL              OVERFLOW REC ON TRACK
         BZ    CPIWRT30                 NO - BR SEQUENCE ALRIGHT
         C     RCURSOR,WICDATND         OVERLAYING THE OVERFLOW REC
         BNL   CPISEQER                 NO - GO SET INVALID SEQUENCE
*                                       AS OVERFLOW REC MUST BE LAST
*
*              CHECK FILE MASK FOR FORMAT WRITE ALLOWED
*
CPIWRT30 EQU   *                        *
         TM    WICFMASK,WICFMWRT        FILE MASK ALLOW WRITE
         BM    CPIFMER                  NO - GO SET FILE MASK
*                                       VIOLATION ERROR
*
*              INITIATE OPERATION
*
         NI    VTST,FULLBYTE-VTOVFL     TURN OFF OVERFLOW FLAG
*
*              DETERMINE IF THIS RECORD WILL CAUSE TRACK OVERRRUN.
*              THIS WILL BE ACCOMPLISHED BY CALCULATING THE TRACK
*              BALANCE FROM THE POINT THAT THIS RECORD WILL BE
*              WRITTEN.  THE CURRENT TRACK BALANCE WILL UPDATED TO
*              REFLECT ANY RECORDS WHICH ARE BEING OVERLAYED (IF
*              ANY).  THE EFFECTIVE LENGTH OF THIS RECORD (CALCU-
*              LATED AS THE LAST BLOCK) IS THE COMPARED TO THE
*              NEW TRACK BALANCE AND IF THE RECORD WILL FIT,  THE
*              TRACK BALANCE WILL BE DECREASED BY THE EFFECTIVE
*              LENGTH OF THIS RECORD CALCULATED AS NOT THE LAST
*              RECORD ON THE TRACK.
*
*              DETERMINE THE EFFECTIVE LENGTH OF RECORDS BEING
*              OVERLAYED.
*
         ST    RFROM,WICRGSV0           SAVE CONTENTS
         ST    RTO,WICRGSV1             SAVE CONTENTS
         LR    RFROM,RCURSOR            BEGINNING ADDR OF WRITE
         L     RTO,WICDATND             ENDING ADDR OF CURRENT
*                                       DATA
         BAL   RLINK,CPISPACE           GET EFFECTIVE LENGTH RE-
*                                       TURNED IN RWORK
         L     RFROM,WICRGSV0           RESTORE CONTENTS
         L     RTO,WICRGSV1             RESTORE CONTENTS
         A     RWORK,VTRKBAL            ADD TO PREVIOUS BALANCE
         ST    RWORK,VTRKBAL            UPDATE TRACK BALANCE
         LTR   RWORK,RWORK              IS NEW TRK BAL LESS THAN
*                                       OR EQUAL TO ZERO
         BNH   CPIWRT40                 BR - INDICATES TRACK IS
*                                       COMPLETLY FILLED - GO
*                                       PROCESS OVERRUN
*
*              CALCULATE THE LENGTH OF THIS BLOCK AS THE LAST
*
         LR    RWORK,RXFERBAL           LENGTH OF REC TO WRITE
         S     RWORK,KCNTLGTH           DECREASE BY LENGTH OF COUNT
*                                       LEAVING (KL+DL)
         AH    RWORK,WICLGAP            ADD LAST BLOCK OVERHEAD
         USING COUNTDES,RBFRDATA        DESCRIBE COUNT TO BE WRITTEN
         CLI   CNTKL,NOKEY              IS KEY PRESENT
         DROP  RBFRDATA                 DICONTINUE DESCRIPTION
         BNE   CPIWRT35                 YES - RESULTS CORRECT
         SH    RWORK,WICKEYGP           SUBTRACT KEY CONSTANT SINCE
*                                       NOT PRESENT
CPIWRT35 EQU   *                        *
         C     RWORK,VTRKBAL            WILL THIS RECORD FIT
         BH    CPIWRT50                 NO - GO PROCESS OVERRUN
         TM    WICOFLG1,WICERASE        IS THIS AN ERASE
         BO    CPIWRT60                 YES - GO PROCESS ERASE
*
*              DECREASE THE TRACK BALANCE BY THE EFFECTIVE LENGTH
*              OF THIS RECORD CALCULATED AS NOT THE LAST RECORD
*              ON THE TRACK.
*
         ST    RFROM,WICRGSV0           SAVE REG CONTENTS
         LR    RFROM,RBFRDATA           USE START OF DATA AREA AS
*                                       BEGINNING ADDR
         LA    RTO,ADDRONLY(RBFRDATA,RXFERBAL)  USE AN ENDING ADDR
*                                       OF LENGTH OF THIS RECORD
         BAL   RLINK,CPISPACE           GET TRACK REDUCTION AMOUNT
*                                       RWORK CONTAINS RESULTS
         L     RFROM,WICRGSV0           RESTORE CONTENTS
         L     RWORK1,VTRKBAL           GET TRACK BALANCE
         SR    RWORK1,RWORK             DECREASE BY THE AMOUNT USED
*                                       BY THIS RECORD - THIS VALUE
*                                       MAY GO NEGATIVE BUT IS COM-
*                                       PENSATED FOR ON SUBSEQUENT
*                                       USES WHEN TRACK BALANCE IS
*                                       INCREASED FOR RECORDS BEING
*                                       OVERLAYED
         ST    RWORK1,VTRKBAL           SET NEW TRACK BALANCE
*              UPDATE THE ENDING DATA ADDRESS
*
         LA    RWORK,ADDRONLY(RCURSOR,RXFERBAL)  BEGINNING ADDR
*                                       PLUS LENGTH OF RECORD
         ST    RWORK,WICDATND           AND SAVE
         SR    RWORK,RTRKBFR            DISPLACEMENT FROM START OF
*                                       TRACK AREA
         ST    RWORK,VTDATEND           AND SAVE
         ST    RCURSOR,WICCAM           SAVE START OF THIS RECORD
         USING COUNTDES,RBFRDATA        DESCRIBE DATA COUNT
         MVC   WICKL+L'WICKL-L'CNTKL(L'CNTKL),CNTKL  SAVE KEY LENGTH
         MVC   WICDL+L'WICDL-L'CNTDL(L'CNTDL),CNTDL  AND DATA LENGTH
         DROP  RBFRDATA                 DISCONTINUE DESCPIPTION
*
*              TURN ON TRACK OVERFLOW BIT IF THIS IS A WSPCKD
*
         TM    WICOFLG1,WICWSCKD        WRITE SPECIAL
         BZ    CPIWRTND                 NO - GO PREPARE FOR MOVE
         OI    VTST,VTOVFL              TURN ON OVERLOW SWITCH
         B     CPIWRTND                 GO PREPARE FOR MOVE
*
*              ENTERED WHEN THE TRACK BALANCE WAS ZERO OR NEGATIVE
*
CPIWRT40 EQU   *                        *
         SR    RXFERBAL,RXFERBAL        SET THE NUMBER OF AVAILABLE
*                                       BYTES TO ZERO
         LA    RERRDISP,ERR05DSP        DISPLACEMENT FOR TRACK OVER-
*                                       RUN ERROR
         STH   RERRDISP,WICERDSP        WILL BE USED BY END RTN
         OI    WICOFLG2,WICERROR        INDICATE AN ERROR SITUATION
*                                       HAS BEEN ENCOUNTERED
         B     CPIWRT70                 GO INDICATE NO TRANSFER
*                                       TO TAKE PLACE
*              ENTERED WHEN TRACK BALANCE GREATER THAN ZERO BUT
*              RECORD TO BE WRITTEN WILL CAUSE TRACK OVERRUN
*
CPIWRT50 EQU   *                        *
         L     RXFERBAL,VTRKBAL         SET AVAILABLE BYTES AS
*                                       THE TRACK BALANCE
*                                       THAT IS CALCULATE THE   ZA00143
*                                       BYTES WHICH WOULD       ZA00143
*                                       BE WRITTEN AS           ZA00143
*                                       8 + CURRENT TRACK BAL   ZA00143
*                                       - LAST GAP OVERHEAD     ZA00143
         LA    RXFERBAL,L'CNTFIELD(RXFERBAL)  COUNT FIELD       YM04660
         SH    RXFERBAL,WICLGAP         DECREASE BY LAST GAP    ZA00143
*                                       OVERHEAD                ZA00143
         USING COUNTDES,RBFRDATA        DESCRIBE COUNT FIELD    ZA00143
         CLI   CNTKL,NOKEY              DOES RECORD COUNT FIELD ZA00143
*                                       INDICATE KEYED RECORD   ZA00143
         BNE   CPIWRT55                 YES - VALUE IS CORRECT  ZA00143
*                                       AS LAST GAP OVERHEAD    ZA00143
*                                       ASSUMES KEYED RECORD    ZA00143
         DROP  RBFRDATA                 DISCONTINUE CURRENT     ZA00143
*                                       DESCRIPTION             ZA00143
         AH    RXFERBAL,WICKEYGP        FOR NON KEYED REC       ZA00143
*                                       ADD BACK IN THE KEY     ZA00143
*                                       OVERHEAD WHICH HAS      ZA00143
*                                       BEEN ALREADY SUBTRACTED ZA00143
*                                       OUT                     ZA00143
CPIWRT55 EQU   *                        *                       ZA00143
         LTR   RXFERBAL,RXFERBAL        IF VALUE GOES NEGATIVE  ZA00143
         BM    CPIWRT40                 THEN WE DON'T HAVE      ZA00143
*                                       ENOUGH FOR OVERHEAD     ZA00143
         LA    RERRDISP,ERR05DSP        DISPLACEMENT FOR TRACK OVER-
*                                       RUN ERROR
         STH   RERRDISP,WICERDSP        WILL BE USED BY END RTN
         OI    WICOFLG2,WICERROR        INDICATE AN ERROR SITUATION
*                                       HAS BEEN ENCOUNTERED
*
*              ENTERED WHEN AN ERASE IN PROCESS WHICH DOESN'T
*              CAUSE TRACK OVERRUN AS WELL AS FALL THROUGH FROM ABOVE
*
CPIWRT60 EQU   *                        *
         ST    RCURSOR,WICDATND         SET END OF DATA
         LR    RWORK,RCURSOR            CALCULATE THE DISPLACEMENT
         SR    RWORK,RTRKBFR            FROM BEGINNING OF TRACK AREA
         ST    RWORK,VTDATEND           SET NEW DATA END OFFSET
*
*              INDICATE THAT NO TRANSFER IS TO TAKE PLACE (DATA
*              MOVEMENT) AND TURN OFF WRITE IN PROCESS FLAG WHICH
*              IS USED FOR ZERO FILLS IN MOVE ROUTINE.
*
CPIWRT70 EQU   *                        *
         NI    WICOFLG2,FULLBYTE-WICWRTIP   TURN OFF WRITE BIT
         OI    WICOFLG2,WICXFCOM        INDICATE NO MOVE
*
*              THE FOLLOWING IS ENTERED BEFORE GOING TO THE MOVE
*              ROUTINE IN ORDER TO INITIALIZE THE SUM OF THE
*              BYTES AVAILABLE AND THE SUM OF THE BYTES REQUESTED.
*
CPIWRTND EQU   *                        *
         OI    WICOFLG2,WICDATAX        INDICATE THAT OPERATION HAS
*                                       STARTED
         ST    RXFERBAL,WICAVXFR        INIT BYTES AVAILABLE
         ST    REQBAL,WICREQXF          INIT BYTES REQUESTED
         B     CPIBASRW                 GO PERFORM MOVEMENT
*
*              THE FOLLOWING IS ENTERED FOR A WD AND WKD
*
CPIWRT80 EQU   *                        *
*
*              SEE IF THE FILE MASK ALLOWS THE OPERATION
*
         TM    WICFMASK,WICFMW11        IF BITS 0-1 ARE BOTH ZERO
*                                       THEN WD OR WKD ALLOWED
         BZ    CPIRD                    FILE MASK OK SO GO USE THE
*                                       READ ROUTINE TO GET POSITION-
*                                       ING AND TO CHECK FOR END OF
*                                       FILE
         TM    WICFMASK,WICFMW10        IF BITS 0-1 ARE NOT BOTH ZERO
*                                       THEN BIT 0 MUST BE ON TO ALLOW
*                                       OPERATION
         BNZ   CPIRD                    FILE MASK OK SO GO USE THE
*                                       READ ROUTINE TO GE POSITION-
*                                       ING AND TO CHECK FOR END OF
*                                       FILE
*
*              THE FOLLOWING IS ENTERED WHEN A WRITE FILE MASK
*              VIOLATION HAS OCCURRED.
CPIFMER  EQU   *                        *
         OI    WICOFLG2,WICINTRP        NOTE ERROR OCCURRED BEFORE
*                                       DATA REQUESTED
         LA    RERRDISP,ERR04DSP        DISPLACEMENT FOR FILE MASK
*                                       ERROR ON WRITE
         STH   RERRDISP,WICERDSP        WILL BE USED BY THE END RTN
         B     CPIOPEND                 GO END OPERATION
*
*
*              THE FOLLOWING IS ENTERED WHEN AN INVALID SEQUENCE OF
*              OF CCW(S) IS DETECTED DURING WRITE PREREQUISIT CHECKING.
*              IF THE CHANNEL PROGRAM INTERPRETER WAS ENTERED WITH
*              A REQUEST TO WRITE DATA ON AN OVERFLOW RECORD AFTER
*              AN ENDING FOR FILE MASK VIOLATION ON THE PREVIOUS
*              TRACK THE THE APPENDAGE HANDLER IS IN A RESTART
*              SITUATION AND HAS NOT PRECEDED THE WRITE DATA
*              WITH A SEARCH ID EQUAL.  IF THIS IS THE CASE THEN
*              AN ERROR CONDITION DOES NOT EXISTS AND THE CHANNEL
*              PROGRAM MAY CONTINUE.
*
CPISEQER EQU   *                        *
         TM    WICERPSW,WICERPWR        RESTART FROM ERP RESTART
         BZ    CPISEQ05                 BR - NO AND SO SEQUENCE IS
*                                       INVALID
         NI    WICERPSW,FULLBYTE-WICERPWR  TURN OFF RESTART SWITCH
         B     CPISEQOK                 GO CONTINUE WITH CHANNEL PGM
*
CPISEQ05 EQU   *                        *
         OI    WICOFLG2,WICINTRP        NOTE THAT ERROR OCCURED BE-
*                                       FORE DATA REQUESTED
         LA    RERRDISP,ERR02DSP        DISPLACEMENT FOR INVALID SEQ
*                                       ERROR
         STH   RERRDISP,WICERDSP        WILL BE USED BY THE END RTN
         B     CPIOPEND                 GO END OPERATION AND CHANNEL
*                                       PROGRAM
         TITLE 'CHANNEL PROGRAM INTERPRETER - SEEK COMMANDS'
***********************************************************************
*                                                                     *
*        SEEK ROUTINE                                                 *
*                                                                     *
***********************************************************************
*
*              ENTERED FOR SEEK HEAD COMMAND
*
CPISEEKH EQU   *                        *
         TM    WICFMASK,WICFMS11        IF BITS 3-4 ARE BOTH ONE THEN
*                                       ALL SEEKS INHIBITED
         BO    CPISEKE1                 SEEK NOT ALLOWED-GO INDICATE
*                                       ERROR OF FILE MASK VIOLATED
         SR    RWORK,RWORK              NOTE THAT THIS IS SEEK HEAD
         B     CPISEK20                 GO PROCESS REQUEST
*
*              ENTERED FOR SEEK CYLINDER
*
CPISEEKC EQU   *                        *
         TM    WICFMASK,WICFMS10        IF BIT FOUR OF MASK IS ZERO
*                                       THEN CYLINDER SEEK PERMITTED
         BO    CPISEKE1                 SEEK CYL NOT ALLOWEDSO GO
*                                       SET FILE MASK ERROR
         B     CPISEK10                 GO PROCESS REQUEST
*
*              ENTERED FOR SEEK COMMAND
*
CPISEEK  EQU   *                        *
         TM    WICFMASK,WICFMS11        BITS 3-4 OF FILE MASK MUST BE
*                                       ZERO TO ALLOW FULL SEEK
         BNZ   CPISEKE1                 SEEK NOT ALLOWED SO GO SET
*                                       FILE MASK ERROR
*
*              BRANCHED TO ONLY FOR SEEK CYLINDER AND SEEK
*
CPISEK10 EQU   *                        *
         LA    RWORK,L'DASDCC           NOTE THIS IS SEEK/SEEK CYL
*
CPISEK20 EQU   *                        *
         OI    WICOFLG2,WICDATAX        NOTE THAT OPERATION STARTED
         LA    RXFERBAL,L'DASDARG       INDICATE THAT SIX BYTES MUST
*                                       BE USED FOR THIS OPERATION
         CR    REQBAL,RXFERBAL          COMPARE REQUESTED LENGTH WITH
*                                       THE NECESSARY SIX BYTE LENGTH
         BL    CPISEKE2                 SEEK ARGUMENT IS LESS THAN SIX
*                                       SO GO SET SEEK CHECK ERROR
*
*              VALIDATE THE SEEK ADDRESS ARGUMENT
*
         USING DASDADDR,RBFRDATA        DESCRIBE ARGUMENT
XPGCK06  ICM   RWORK1,HWMASK,DASDBB     INSERT BIN NUMBER FROM ARGUMENT
*                                       OF ARGUMENT TO TEST FOR ZERO
         BNZ   CPISEKE2                 NOT ZERO SO GO SET A SEEK
*                                       CHECK ERROR
XPGCK07  CLC   DASDCC,WICMAXCC          IS THIS A VALID CYLINDER
         BNL   CPISEKE2                 NO-GO SET SEEK CHECK ERROR
XPGCK08  CLC   DASDHH,WICMAXHH          IS THIS A VALID HEAD NUMBER
         BNL   CPISEKE2                 NO-GO SET SEEK CHECK ERROR
*
*                                       IS THE DESIRED TRACK THE SAME
*                                       AS THE CURRENT
         CLC   DASDARG(L'DASDARG),WICSEEKA+L'WICSKAM
         BE    CPISEKND                 YES-GO PREPARE TO END OPERATION
*
*              MUST REQUEST A NEW TRACK AND WILL USE THE NEXT TRACK
*              ROUTINE TO SET UP FOR A RETURN TO THE TRACK MANAGER
*              WITH A REQUEST FOR A NEW TRACK.  A RETURN WILL INDICATE
*              THAT THE DESIRED TRACK IS READY.
*
         OI    WICRESTA,WICSEKRS        NOTIFY 'NEXT TRACK ROUTINE'
*                                       THAT CALLER IS THE SEEK RTN
         MVC   WICSKAHH,DASDHH          UPDATE SEEK ADDRESS HEAD
         LTR   RWORK,RWORK              WAS ENTRY FROM A SEEK HEAD
         BZ    CPISEK30                 YES-BYPASS SETTING OF CYLINDER
         MVC   WICSKACC,DASDCC          UPDATE CYLINDER VALUE
*
CPISEK30 EQU   *                        *
         BAL   RLINK2,CPINXTRK          GO REQUEST A NEW TRACK
*
*              RETURNED TO WHEN NEW TRACK IS READY
*
         NI    WICRESTA,FULLBYTE-WICSEKRS  CLEAR SEEK RESTART FLAG
*
*              PREPARE TO END OPERATION
*
CPISEKND EQU   *                        *
         ST    REQBAL,WICREQXF          SET NUMBER OF BYTES IN
*                                       SEEK ARGUMENT FOR END ROUTINE
         ST    RXFERBAL,WICAVXFR        SET NUMBER OF BYTES AVAILABLE
*                                       FOR THIS OPERATION
         B     CPIOPEND                 GO END OPERATION
*
*
*              ENTERED WHEN THE FILE MASK DOES NOT ALLOW THE SEEK
*              WHICH HAS BEEN REQUESTED.
*
CPISEKE1 EQU   *                        *
*
*                                       UPDATE THE SEEK ADDRESS
XPGCK09  MVC   WICSKACC(L'WICSKACC+L'WICSKAHH),DASDCC MOVE CCHH
         OI    WICOFLG2,WICINTRP        INDICATE ERROR OCCURRED BEFORE
*                                       ARGUMENT WAS REQUESTED
         LA    RERRDISP,ERR07DSP        DISPLACEMENT FOR FILE MASK
*                                       VIOLATION ON SEEK
         STH   RERRDISP,WICERDSP        WILL BE USED BY END RTN
         B     CPIOPEND                 GO END OPERATION AND END
*                                       CHANNEL PROGRAM
*
*
*              ENTERED FOR ERROR CONDITIONS WHICH OCCUR AFTER THE
*              THE FILE MASK HAS BEEN CHECKED.
*
CPISEKE2 EQU   *                        *
         ST    REQBAL,WICREQXF          SET NUMBER OF BYTES OF THE
*                                       SEARCH ARGUMENT
         ST    RXFERBAL,WICAVXFR        SET BYTES AVAILABLE
         OI    WICOFLG2,WICERROR        INDICATE AN ERROR HAS OCCURRED
         LA    RERRDISP,ERR03DSP        DISPLACEMENT FOR INVALID SEEK
*                                       ARGUMENT OR SEEK CHECK ERROR
         STH   RERRDISP,WICERDSP        WILL BE USED BY THE END RTN
         B     CPIOPEND                 GO END OPERATION AND TERMINATE
*                                       CHANNEL PROGRAM
         DROP  RBFRDATA                 DISCONTINUE DESCRIPTION OF
*                                       ARGUMENT
         TITLE 'CHANNEL PROGRAM INTERPRETER - SEARCH HOME ADDRESS'
***********************************************************************
*                                                                     *
*        SEARCH HOME ADDRESS ROUTINE                                  *
*                                                                     *
***********************************************************************
*
CPISHA   EQU   *                        *
         TM    CCWFLAGS,CCWCC           COMMAND CHAINING SPECIFIED
         BZ    CPISHA10                 NO - SKIP SHA-TIC TEST
*
*              SEE IF THIS IS A SHA TIC *-8 COMBINATION
*
         LA    RWORK,L'CCW(RCCW)        POINT TO NEXT CCW
         DROP  RCCW                     DISCONTINUE CURRENT DESCRIPTION
         USING CCWDES,RWORK             DESCRIBE NEXT CCW
         TM    CCWOPCDE,LOW3BITS        LOW 3 ZERO ONLY FOR TIC
         BC    7,CPISHA10               BR - NOT A TIC SINCE NON ZERO
         TM    CCWOPCDE,CCWTICBT        SECOND PART OF TIC TEST
         BZ    CPISHA10                 BR - NOT A TIC SO CONTINUE
*
*              SEE IF TIC IS A TIC TO PREVIOUS CCW
*
         L     RWORK,CCWDATAD           GET ADDRESS FIELD OF CCW
         DROP  RWORK                    DISCONTINUE DESCRIPTION OF
*                                       NON-CURRENT CCW
         USING CCWDES,RCCW              CCW ADDRESSABILITY
         LA    RWORK,ADDRONLY(RWORK)    CLEAR OP CODE OFF
         CR    RCCW,RWORK               ARE ADDRESSES SAME
         BNE   CPISHA10                 BR - NOT A TIC *-8
         OI    WICOFLG1,WICSCHTC        INDICATE A SEARCH TIC COMBIN-
*                                       ATION
CPISHA10 EQU   *                        *
         LA    RCURSOR,VTHACCHH         SET CURSOR TO ADDR PORTION
*                                       OF HOME ADDRESS
         LA    RWORK,WICBFR0            INDICATE OPERATION WILL LEAVE
         STH   RWORK,WICRELTP           BERFORE R0
         LA    RXFERBAL,L'VTHACCHH      AVAILABLE BYTES IS 4
*
*              GO DETERMINE NUMBER OF BYTES TO USE.  THIS WILL BE
*              SMALLER OF THAT REQUESTED OR THAT WHICH IS AVAILABE.
*
         BAL   RLINK,CPIXMITL           SEE COMMENT ABOVE
         BCTR  RCXFER,R0                FOR EXECUTING COMPARE
         CR    REQBAL,RXFERBAL          REQUESTED SEARCH FOUR BYTES
         BNE   CPISHA50                 BR - TO TEST THE SILI BIT
*                                       AND TURN OFF SID-TIC FLAG IF
*                                       SILI IS NOT ON
CPISHALP EQU   *                        *
         TM    CCWOPCDE,CCWMLTRK        IS THIS A MULTITRACK OP CODE
         BO    CPISHA20                 YES GO REQUEST NEXT TRACK
         TM    WICXOFLG,WICNDXPT        FOR SINGLE TRACK HAS INDEX
*                                       POINT BEEN PASSED
         BO    CPISHAER                 YES GO SET NO RECOURD FOUND
         OI    WICXOFLG,WICNDXPT        SET INDEX POINT PASSED
         B     CPISHA30                 GO PERFORM COMPARE
*
*              FOR MULTITRACK REQUEST THE NEXT TRACK
*
CPISHA20 EQU   *                        *
         BAL   RLINK2,CPINXTRK          REQUEST NEXT TRACK
CPISHA30 EQU   *                        *
XPGCK10  EX    RCXFER,EXCOMPAR          DO THE ARGUMENTS COMPARE
         BNE   CPISHA40                 NO-GO SEE IF CONTINUATION
*                                       IS REQUESTED
*
*              SEARCH HAS BEEN SATISFIED
*
         OI    IOBCSWS0,IOBCSWSM        SET STATUS MODIFIER
*
*              PREPARE TO END OPERATION
*
CPISHAND EQU   *                        *
         ST    REQBAL,WICREQXF          SET BYTES REQUESTED
         ST    RXFERBAL,WICAVXFR        SET BYTES AVAILABLE
         B     CPIOPEND                 GO END OPERATION
*
*
*              SEARCH WAS NOT SATISFIED
*
CPISHA40 EQU   *                        *
         TM    WICOFLG1,WICSCHTC        WAS THIS A SEARCH TIC
         BZ    CPISHAND                 NO-GO PREPARE TO END OPERATION
         B     CPISHALP                 GO SEE IF MULTITRACKING WAS
*                                       SPECIFIED
*
*              ENTERED WHEN THE SEARCH IS NOT FOUR BYTES
*
CPISHA50 EQU   *                        *
         TM    CCWFLAGS,CCWSILI         SUPPRESS INCORRECT LENGTH
         BO    CPISHALP                 YES - BEGIN COMPARE
         NI    WICOFLG1,FULLBYTE-WICSCHTC  PERFORM ONLY ONE COMPARE
         B     CPISHALP                 GO SEARCH ONCE
*
*
CPISHAER EQU   *                        *
         ST    REQBAL,WICREQXF          THE AMOUNT REQUESTED FOR
*                                       THIS OPERATION - THE AMOUNT
*                                       AVAILABLE WAS INITIALLY SET TO
*                                       ZERO AND WILL BE SENT TO END
*                                       ROUTINE AS ZERO
         LA    RERRDISP,ERR06DSP        DISPLACEMENT FOR NO RECORD
*                                       FOUND ERROR
         STH   RERRDISP,WICERDSP        WILL BE USED BY END RTN
         OI    WICOFLG2,WICERROR        INDICATE AN ERROR CONDITION
         B     CPIOPEND                 GO END THIS OPERATION
*
         TITLE 'CHANNEL PROGRAM INTERPRETER - SEARCH ID COMMANDS'
***********************************************************************
*                                                                     *
*        SEARCH ID ROUTINE                                            *
*                                                                     *
***********************************************************************
*
*
CPISID   EQU   *                        *
         OI    WICOFLG1,WICSID          INDICATE THIS IS A SEARCH ID
         BAL   RLINK,CPIPOS             GET INITIAL POSITIONING
         TM    CCWFLAGS,CCWCC           COMMAND CHAINING SPECIFIED
         BZ    CPISID10                 NO - SKIP SID-TIC TEST
*
*              SEE IF THIS IS A SID TIC *-8 COMBINATION
*
         LA    RWORK,L'CCW(RCCW)        POINT TO NEXT CCW
         DROP  RCCW                     DISCONTINUE CURRENT DESCRIPTION
         USING CCWDES,RWORK             DESCRIBE NEXT CCW
         TM    CCWOPCDE,LOW3BITS        LOW 3 ZERO ONLY FOR TIC
         BC    7,CPISID10               BR - NOT A TIC SINCE NON ZERO
         TM    CCWOPCDE,CCWTICBT        SECOND PART OF TIC TEST
         BZ    CPISID10                 BR - NOT A TIC SO CONTINUE
*
*              SEE IF TIC IS A TIC TO PREVIOUS CCW
*
         L     RWORK,CCWDATAD           GET ADDRESS FIELD OF CCW
         LA    RWORK,ADDRONLY(RWORK)    CLEAR OP CODE OFF
         CR    RCCW,RWORK               ARE ADDRESSES SAME
         BNE   CPISID10                 BR - NOT A TIC *-8
         OI    WICOFLG1,WICSCHTC        INDICATE SID TIC *-8
         DROP  RWORK                    RESUME THIS CCW
         USING CCWDES,RCCW              CCW ADDRESSABILITY
*
CPISID10 EQU   *                        *
*              GO DETERMINE IF SEARCH IS EQ, HI, HI OR EQ.  A FLAG
*              WILL BE SET IF IT IS A SEARCH EQUAL ONLY. IN ADDITION
*              THE APPROPRIATE BRANCH CONDITION CODE WILL BE RETURNED
*              IN REGISTER RWORK.
*
         BAL   RLINK,CPITYPE            SEE COMMENT ABOVE
         LA    RXFERBAL,L'CNTID         AVAILABLE BYTES IS 5
*
*              GO DETERMINE NUMBER OF BYTES TO USE.  THIS WILL BE
*              SMALLER OF THAT REQUESTED OR THAT WHICH IS AVAILABE.
*
         BAL   RLINK,CPIXMITL           SEE COMMENT ABOVE
         BCTR  RCXFER,R0                FOR EXECUTING COMPARE
         CR    REQBAL,RXFERBAL          REQUESTED SEARCH FIVE BYTES
         BNE   CPISID30                 BR - TO TEST THE SILI BIT
*                                       AND TURN OFF SCH-TIC FLAG IF
*                                       SILI IS NOT ON
CPISIDLP EQU   *                        *
XPGCK11  EX    RCXFER,EXCOMPAR          THIS THE ID SOUGHT
         EX    RWORK,EXBRSID            BRANCH CONDITION SET BY
*                                       CPITYPE
*              BRANCH TO CPISIDOK WHEN SEARCH HAS BEEN SATISFIED
*
         TM    WICOFLG1,WICSCHTC        REPETITIVE SEARCH
         BZ    CPISIDND                 NO - END SEARCH
*
*              ADVANCE TO NEXT RECORD
*
         LA    RCURSOR,L'CNTFIELD(RCURSOR) LENGTH OF COUNT FIELD
         AH    RCURSOR,WICKL            CURRENT KEY LENGTH
         A     RCURSOR,WICDL            CURRENT DATA LENGTH
         C     RCURSOR,WICDATND         IS THIS THE END OF TRACK
         BNL   CPISID40                 YES - GO CHECK MULTITRACK
CPISID20 EQU   *                        *
         ST    RCURSOR,WICCAM           SAVE CURRENT RECORD ADDRESS
         USING COUNTDES,RCURSOR         DESCRIBE CURRENT COUNT FIELD
         MVC   WICKL+L'WICKL-L'CNTKL(L'CNTKL),CNTKL
*                                       SAVE CURRENT KEY LENGTH
         MVC   WICDL+L'WICDL-L'CNTDL(L'CNTDL),CNTDL
*                                       SAVE CURRENT DATA LENGTH
         B     CPISIDLP                 GO CONTINUE SEARCH
         DROP  RCURSOR                  DISCONTINUE DESCRIPTION
*
*
*              ENTERED WHEN A SEARCH IS NOT A FIVE BYTE SEARCH
*
CPISID30 EQU   *                        *
         TM    CCWFLAGS,CCWSILI         SUPPRESS INCORRECT LENGTH
         BO    CPISIDLP                 YES - BEGIN SEARCH
         NI    WICOFLG1,FULLBYTE-WICSCHTC  NO - DON'T PERFORM A
*                                       REPETITIVE SEARCH
         B     CPISIDLP                 GO SEARCH ONCE
*
*              ENTERED WHEN THE END OF TRACK HAS BEEN REACHED
*
CPISID40 EQU   *                        *
         TM    CCWOPCDE,CCWMLTRK        IS THIS MULTITRACK OP CODE
         BO    CPISID50                 YES - GO SET UP FOR A
*                                       REQUEST FOR A NEW TRACK
         TM    WICXOFLG,WICNDXPT        INDEX POINT PASSED
         BO    CPISIDER                 BR - NON MULTITRACK AND
*                                       INDEX PASSED
*
*              START SEARCHING THIS TRACK FROM THE BEGINNING OF THE
*              TRACK.
*
         OI    WICXOFLG,WICNDXPT        SET INDEX POINT PASSED
         LA    RCURSOR,VTR0             START SEARCH AT R0
         B     CPISID20                 BRANCH TO UPDATE CURRENT
*                                       RECORD ADDR, KEY LENGTH,
*                                       AND DATA LENGTH BEFORE
*                                       CONTINUING SEARCH
*
*              ENTERED WHEN MULTITRACKING HAS BEEN SPECIFIED AND
*              A NEW TRACK MUST BE REQUESTED.
CPISID50 EQU   *                        *
         BAL   RLINK2,CPINXTRK          GO SET UP FOR REQUEST
         LA    RCURSOR,VTR0             RETURN MEANS THAT REQUEST WAS
*                                       SATISFIED AND THERFORE START
*                                       AT RECORD ZERO OF NEW TRACK
         LA    RWORK1,WICBFKEY          THE RELATIVE POSTION
*                                       AFTER THE SID WILL BE BEFORE
         STH   RWORK1,WICRELTP          THE KEY AREA
         B     CPISID20                 GO UPDATE CURRENT RECORD ADDR
*                                       AND CURRENT KEY AND DATA
*                                       LENGTHS
*
*              ENTERED WHEN THE SEARCH HAS BEEN SATISFIED
*
CPISIDOK EQU   *                        *
         OI    IOBCSWS0,IOBCSWSM        SET STATUS MODIFIER
*
*              DETERMINE IF THIS OPERATION QUALIFIES FOR A WRITE
*              PREREQUISITE.
*
         TM    WICOFLG2,WICSCHEQ        WAS THIS A SEARCH EQ
         BZ    CPISIDND                 NO - DOESN'T QUALIFY
         CR    REQBAL,RXFERBAL          AMOUNT SEARCHED EQUAL TO
*                                       THAT AVAILABLE (5 BYTES)
         BL    CPISIDND                 NO - DOESN'T QUALIFY
         OI    WICSEQFG,WICFSIDE        INDICATE THAT A FULL SID
*                                       EQUAL HAS BEEN PERFORMED
*
*              ENTERED AT NORMAL END OF SEARCH ID
*
CPISIDND EQU   *                        *
*
*              SET UP INPUT FOR OPERATION END.  THIS INCLUDES THE
*              AMOUNT REQUESTED AND THE AMOUNT AVAILABLE TO
*              BE USED FOR INCORRECT LENGTH CHECKING.
*
         ST    REQBAL,WICREQXF          AMOUNT REQUESTED
         ST    RXFERBAL,WICAVXFR        AMOUNT AVAILABLE
         B     CPIOPEND                 COMPLETE THIS OPERATION
*
*              ENTERED WHEN SEARCH WAS A REPETITIVE SEARCH (SID-TIC)
*              AND RECORD HAS NOT BEEN FOUND AND SEARCH WAS NOT
*              MULTITRACK
*
CPISIDER EQU   *                        *
         ST    REQBAL,WICREQXF          THE AMOUNT REQUESTED FOR
*                                       THIS OPERATION - THE AMOUNT
*                                       AVAILABLE WAS INITIALLY SET TO
*                                       ZERO AND WILL BE SENT TO END
*                                       ROUTINE AS ZERO
         OI    WICOFLG2,WICERROR        INDICATE AN ERROR CONDITION
         LA    RERRDISP,ERR06DSP        DISPLACEMENT FOR NO RECORD
*                                       FOUND ERROR
         STH   RERRDISP,WICERDSP        WILL BE USED BY THE END RTN
         B     CPIOPEND                 GO END THIS OPERATION
         TITLE 'CHANNEL PROGRAM INTERPRETER - SEARCH CONDITION ROUTINE'
***********************************************************************
*                                                                     *
*        SEARCH TYPE ROUTINE                                          *
*                                                                     *
*        THE FOLLOWING ROUTINE IS ENTERED BY SEARCH ROUTINES FOR      *
*        THE PURPOSE OF ESTABLISHING A BRANCH CONDITION CODE.  THIS   *
*        IS ACCOMPLISHED BY EXAMINING THE OP CODE AND COMPOSING AN    *
*        APPROPRIATE CONDITION CODE.  THE CONDITION CODE WHICH        *
*        IS ESTABLISHED IS THEN USED IN AN EXECUTED-BRANCH AFTER      *
*        THE COMPARE HAS BEEN PERFORMED.                              *
*                                                                     *
*        IN ADDITION THIS ROUTINE WILL SET A FLAG IF THE SEARCH IS    *
*        AN EQUAL ONLY SEARCH WHICH IS USED IN CONJUNCTION WITH A     *
*        FULL SEARCH TO INDICATE THAT A WRITE PREREQUISITE HAS BEEN   *
*        MET.                                                         *
*                                                                     *
*        OUTPUT - REG RWORK CONTAINS THE CONDITION CODE REQUIRED      *
*                 FOR A SATISFACTORY SEARCH                           *
*                                                                     *
*                 FLAG SET IF SEARCH EQUAL ONLY                       *
*                                                                     *
***********************************************************************
*
*
CPITYPE  EQU   *                        *
         SR    RWORK,RWORK              CLEAR OUPUT REG
         OI    WICOFLG2,WICSCHEQ        ASSUME AN EQUAL ONLY SEARCH
         TM    CCWOPCDE,CCWHICON        SEARCH HIGH CONDITION
         BZ    CPITYPE2                 BR - HIGH NOT SPECIFIED
         LA    RWORK,HIBRCON(RWORK)     INCREASE CONDITION BY X'20'
         NI    WICOFLG2,FULLBYTE-WICSCHEQ  TURN OFF EQUAL ONLY FLAG
CPITYPE2 EQU   *                        *
         TM    CCWOPCDE,CCWEQCON        EQUAL CONDITION SPECIFIED
         BCR   8,RLINK                  NO - RETURN
         LA    RWORK,EQBRCON(RWORK)     INCREASE CONDITION BY X'80'
         BR    RLINK                    RETURN
         TITLE 'CHANNEL PROGRAM INTERPRETER - SEARCH KEY COMMANDS'
***********************************************************************
*                                                                     *
*        SEARCH KEY ROUTINE                                           *
*                                                                     *
***********************************************************************
*
*
CPISKEY  EQU   *                        *
         BAL   RLINK,CPIPOS             GET INITIAL POSITIONING
         TM    WICXOFLG,WICRCSKT        WAS A READ COUNT SEARCH KEY
*                                       TIC COMBINATION ENCOUTERED
*                                       DURING THE READ COUNT PRO-
*                                       CESSING
         BO    CPIKEY10                 YES-GO INDICATE A REPETITIVE
*                                       SEARCH SITUATION
*
*              SEE IF THIS IS A SEARCH KEY TIC *-8 COMBINATION
*
         TM    CCWFLAGS,CCWCC           COMMAND CHAINING SPECIFIED
         BZ    CPIKEY20                 NO - SKIP SEARCH KEY-TIC TEST
         LA    RWORK,L'CCW(RCCW)        POINT TO NEXT CCW
         DROP  RCCW                     DISCONTINUE CURRENT DESCRIPTION
         USING CCWDES,RWORK             DESCRIBE NEXT CCW
         TM    CCWOPCDE,LOW3BITS        LOW 3 ZERO ONLY FOR TIC
         BC    7,CPIKEY20               BR - NOT A TIC SINCE NON ZERO
         TM    CCWOPCDE,CCWTICBT        SECOND PART OF TIC TEST
         BZ    CPIKEY20                 BR - NOT A TIC SO CONTINUE
*
*              SEE IF TIC IS A TIC TO PREVIOUS CCW
*
         L     RWORK,CCWDATAD           GET ADDRESS FIELD OF CCW
         LA    RWORK,ADDRONLY(RWORK)    CLEAR OP CODE OFF
         CR    RCCW,RWORK               ARE ADDRESSES SAME
         BNE   CPIKEY20                 BR - NOT A TIC *-8
         DROP  RWORK                    RESUME THIS CCW DESCRIPTION
         USING CCWDES,RCCW              CCW ADDRESSABILITY
CPIKEY10 EQU   *                        *
         OI    WICOFLG1,WICSCHTC        INDICATE REPETITIVE SEARCH
*
CPIKEY20 EQU   *                        *
*              GO DETERMINE IF SEARCH IS EQ, HI, HI OR EQ.  A FLAG
*              WILL BE SET IF IT IS A SEARCH EQUAL ONLY. IN ADDITION
*              THE APPROPRIATE BRANCH CONDITION CODE WILL BE RETURNED
*              IN REGISTER RWORK.
*
         BAL   RLINK,CPITYPE            SEE COMMENT ABOVE
*
*              BEGINNING OF SEARCH LOOP
*
CPIKEYLP EQU   *                        *
         LTR   RXFERBAL,RXFERBAL        CONTAINS CURRENT KEY LENDTH
         BZ    CPIKEY40                 IF ZERO GO CHECK FOR SILI
*                                       BIT ON IN FLAGS
         CR    REQBAL,RXFERBAL          IS THE SEARCH ARGUMENT LENGTH
*                                       EQUAL TO KEY LENGTH
         BNE   CPIKEY50                 NO- GO TEST FOR SILI BIT
*                                       ON IN CCW FLAGS
*
*              GO DETERMINE NUMBER OF BYTES TO USE.  THIS WILL BE
*              SMALLER OF THAT REQUESTED OR THAT WHICH IS AVAILABE.
*
CPIKEY23 EQU   *                        *
         BAL   RLINK,CPIXMITL           SEE COMMENT ABOVE
         BCTR  RCXFER,R0                FOR EXECUTING COMPARE
XPGCK12  EX    RCXFER,EXCOMPAR          THIS THE ID SOUGHT
         EX    RWORK,EXBRKEY            BRANCH CONDITION SET BY
*                                       CPITYPE
*              BRANCH TO CPIKEYOK WHEN SEARCH HAS BEEN SATISFIED.
*              OTHERWISE, CHECK TO SEE IF SEARCH IS TO CONTINUE.
*
CPIKEY25 EQU   *                        *
         TM    WICOFLG1,WICSCHTC        REPETITIVE SEARCH
         BZ    CPIKEYND                 NO - END SEARCH
*
*              ADVANCE TO NEXT RECORD
*
         AH    RCURSOR,WICKL            CURRENT KEY LENGTH
         A     RCURSOR,WICDL            CURRENT DATA LENGTH
         C     RCURSOR,WICDATND         IS THIS THE END OF TRACK
         BNL   CPIKEY60                 YES - GO CHECK MULTITRACK
CPIKEY30 EQU   *                        *
         ST    RCURSOR,WICCAM           SAVE CURRENT RECORD ADDRESS
         USING COUNTDES,RCURSOR         DESCRIBE CURRENT COUNT FIELD
         MVC   WICKL+L'WICKL-L'CNTKL(L'CNTKL),CNTKL
*                                       SAVE CURRENT KEY LENGTH
         MVC   WICDL+L'WICDL-L'CNTDL(L'CNTDL),CNTDL
*                                       SAVE CURRENT DATA LENGTH
         LA    RCURSOR,L'CNTFIELD(RCURSOR)  BUMP OVER COUNT FIELD
         LH    RXFERBAL,WICKL           GET CURRENT BYTES AVAILABLE
         B     CPIKEYLP                 GO CONTINUE SEARCH
         DROP  RCURSOR                  DISCONTINUE DESCRIPTION
*
*
*              ENTERED WHEN THE CURRENT KEY LENGTH IS ZERO AND
*              IF SILI IS NOT ON IN CCW FLAGS THEN OPERATION MUST
*              BE TERMINATED.  IF ON, NO COMPARISON IS MADE BUT
*              SEARCH WILL CONTINUE.
*
CPIKEY40 EQU   *                        *
         TM    CCWFLAGS,CCWSILI         IS SILI ON IN FLAGS
         BO    CPIKEY25                 YES-GO CONTINUE SEARCH AT
*                                       NEXT RECORD
         B     CPIKEYND                 IF NOT PREPARE TO END OPERATION
*
*
*              ENTERED WHEN THE SEARCH ARGUMENT LENGTH IS NO THE
*              SAME AS THE KEY LENGTH.
*
CPIKEY50 EQU   *                        *
         TM    CCWFLAGS,CCWSILI         SUPPRESS INCORRECT LENGTH
         BO    CPIKEY23                 YES - BEGIN SEARCH
         NI    WICOFLG1,FULLBYTE-WICSCHTC  NO - DON'T PERFORM A
*                                       REPETITIVE SEARCH
         B     CPIKEY23                 GO SEARCH ONCE
*
*              ENTERED WHEN THE END OF TRACK HAS BEEN REACHED
*
CPIKEY60 EQU   *                        *
         TM    WICXOFLG,WICRCSKT        IF THIS IS A READ COUNT SEARCH
*                                       KEY TIC COMBINATION THE BYPASS
*                                       MULTITRACK TEST AS THE COMBIN-
*                                       ATION IS CONFINED TO SINGLE
*                                       TRACK OPERATIONS
         BO    CPIKEY70                 YES-GO CHECK TO SEE IF INDEX
*                                       POINT HAS BEEN PASSED
         TM    CCWOPCDE,CCWMLTRK        IS THIS MULTITRACK OP CODE
         BO    CPIKEY80                 YES - GO SET UP FOR A
*                                       REQUEST FOR A NEW TRACK
CPIKEY70 EQU   *                        ROC-SRCK-TIC
         TM    WICXOFLG,WICNDXPT        INDEX POINT PASSED
         BO    CPIKEYER                 BR - NON MULTITRACK AND
*                                       INDEX PASSED
*
*              START SEARCHING THIS TRACK FROM THE BEGINNING OF THE
*              TRACK.
*
         OI    WICXOFLG,WICNDXPT        SET INDEX POINT PASSED
         LA    RCURSOR,VTR1             START SEARCH AT RECORD ONE
         B     CPIKEY30                 BRANCH TO UPDATE CURRENT
*                                       RECORD ADDR, KEY LENGTH,
*                                       AND DATA LENGTH BEFORE
*                                       CONTINUING SEARCH
*
*
*              ENTERED WHEN MULTITRACKING HAS BEEN SPECIFIED AND
*              A NEW TRACK MUST BE REQUESTED.
*
CPIKEY80 EQU   *                        *
         BAL   RLINK2,CPINXTRK          GO SET UP FOR REQUEST
         LA    RCURSOR,VTR1             RETURN MEANS THAT REQUEST WAS
*                                       SATISFIED AND THERFORE START
*                                       AT RECORD ONE OF NEW TRACK
         C     RCURSOR,WICDATND         DOES RECORD ONE EXISTS
         BNL   CPIKEY80                 NO-GO REQUEST NEXT TRACK
*
*              RECORD ONE DOES EXIST ON NEW TRACK
*
         LA    RWORK1,WICBFDAT          THE RELATIVE POSITION AFTER
*                                       THE SEARCH KEY WILL BE
         STH   RWORK1,WICRELTP          BEFORE THE KEY AREA
         B     CPIKEY30                 GO UPDATE CURRENT RECORD ADDR
*                                       AND CURRENT KEY AND DATA
*                                       LENGTHS
*
*              ENTERED WHEN THE SEARCH HAS BEEN SATISFIED
*
CPIKEYOK EQU   *                        *
         OI    IOBCSWS0,IOBCSWSM        SET STATUS MODIFIER
*
*              DETERMINE IF THIS OPERATION QUALIFIES FOR A WRITE
*              PREREQUISITE.
*
         TM    WICOFLG2,WICSCHEQ        WAS THIS A SEARCH EQ
         BZ    CPIKEYND                 NO - DOESN'T QUALIFY
         CR    REQBAL,RXFERBAL          AMOUNT SEARCHED EQUAL TO
*                                       THAT AVAILABLE (KL BYTES)
         BL    CPIKEYND                 NO - DOESN'T QUALIFY
         OI    WICSEQFG,WICFSKE         INDICATE THAT A FULL SEARCH KEY
*                                       EQUAL HAS BEEN PERFORMED
*
*              ENTERED AT NORMAL END OF SEARCH KEY
*
CPIKEYND EQU   *                        *
*
*              SET UP INPUT FOR OPERATION END.  THIS INCLUDES THE
*              AMOUNT REQUESTED AND THE AMOUNT AVAILABLE TO
*              BE USED FOR INCORRECT LENGTH CHECKING.
*
         ST    REQBAL,WICREQXF          AMOUNT REQUESTED
         ST    RXFERBAL,WICAVXFR        SET AMOUNT AVAILABLE
         TM    WICXOFLG,WICRCSKT        IS THIS A READ COUNT SEARCH
*                                       KEY TIC COMBINATION
         BZ    CPIOPEND                 NO-GO END OPERATION
         BAL   RLINK2,CPIRCSKT          YES-GO PERFORM THE MOVING
*                                       OF THE COUNT FIELD FOR THIS
*                                       RECORD
         B     CPIOPEND                 GO END OPERATION
*
*
*              ENTERED WHEN SEARCH WAS A REPETITIVE SEARCH (KEY-TIC)
*              AND RECORD HAS NOT BEEN FOUND AND SEARCH WAS NOT
*              MULTITRACK
*
CPIKEYER EQU   *                        *
         ST    REQBAL,WICREQXF          THE AMOUNT REQUESTED FOR
*                                       THIS OPERATION - THE AMOUNT
*                                       AVAILABLE WAS INITIALLY SET TO
*                                       ZERO AND WILL BE SENT TO END
*                                       ROUTINE AS ZERO
         OI    WICOFLG2,WICERROR        INDICATE AN ERROR CONDITION
         LA    RERRDISP,ERR06DSP        DISPLACEMENT FOR NO RECORD
*                                       FOUND ERROR
         STH   RERRDISP,WICERDSP        WILL BE USED BY THE END RTN
         TM    WICXOFLG,WICRCSKT        IS THIS A READ COUNT SEARCH
*                                       COMBINATION
         BZ    CPIOPEND                 NO-GO END OPERATION
         BAL   RLINK2,CPIRCSKT          GO PERFORM THE MOVING OF THE
*                                       COUNT FIELD FOR THIS RECORD
         S     RCCW,KCCWLGTH            BACK UP CCW POINTER TO THE
*                                       READ COUNT CCW
         ST    REQBAL,WICREQXF          SET THE REQUESTED AMOUNT
*                                       EQUAL TO THE CCW COUNT OF
*                                       THE READ COUNT CCW SINCE THE
*                                       NO RECORD FOUND ENDED WITH
*                                       THE READ COUNT CCW - THIS
*                                       COUNT WAS LOADED INTO REG
*                                       REQBAL IN THE READ COUNT-
*                                       SEARCH KEY-TIC SUBROUTINE
         B     CPIOPEND                 GO TERMINATE CHANNEL PROGRAM
         TITLE 'CHANNEL PROGRAM INTERPRETER - NOP-RESTORE-SET SECTOR'
***********************************************************************
*                                                                     *
*        NOP, RESTORE, AND SET SECTOR                                 *
*                                                                     *
*        THE RESTORE COMMAND OPERATES AS A NOP COMMAND.               *
*                                                                     *
*        INPUT - REG REQBAL CONTAINS THE CCW COUNT SPECIFIED          *
*                                                                     *
***********************************************************************
*                                                                     *
*
*              NOP AND SET SECTOR ENTRY
*
CPINOP   EQU   *                        *
         TM    CCWOPCDE,CCWEQCON        IF THE EQUAL BIT IS ON THEN THE
*                                       COMMAND IS A SET SECTOR
         BO    CPISSECT                 GO PROCESS SET SECTOR
         ST    REQBAL,WICAVXFR          SET AVAILABLE EQUAL    @YM03864
*                                       TO REQUESTED SO NO     @YM03864
*                                       INTERRUPT WILL OCCUR   @YM03864
*
*              RESTORE ENTRY
*
CPIRSTOR EQU   *                        *
         OI    WICOFLG2,WICDATAX        INDICATE OPERATION STARTED
         NI    WICXOFLG,FULLBYTE-WICNDXPT    CLEAR INDEX POINT PASSED
         ST    REQBAL,WICREQXF          SAVE THE CCW COUNT - THE
*                                       AVAILABLE COUNT IS ZERO
         LA    RWORK,WICAFDAT           SET RELATIVE AREA POINTER PAST
         STH   RWORK,WICRELTP           DATA AS ORIENTATION WITHIN
*                                       THE CURRENT RECORD IS LOST
         B     CPIOPEND                 GO PROCESS END OF OPERATION
*
*
*              PROCESS SET SECTOR
*
CPISSECT EQU   *                        *
         CLI   WICSECT,WICNORPS         IF MAXIMUM SECTOR VALUE IS
*                                       ZERO THEN THIS IS NOT AN
*                                       RPS DEVICE
         BE    CPISSTE1                 INVALID OP CODE FOR NON RPS
         OI    WICOFLG2,WICDATAX        INDICATE OPERATION STARTED
         NI    WICXOFLG,FULLBYTE-WICNDXPT   CLEAR INDEX POINT
         LA    RXFERBAL,LSECTARG        NUMBER OF BYTES TO USE IS ONE
         ST    RXFERBAL,WICAVXFR        SAVE FOR ENDING ROUTINE
         ST    REQBAL,WICREQXF          BYTES SPECIFIED IN CCW CNT
XPGCK13  CLC   ADDRONLY(LSECTARG,RBFRDATA),WICSECT  IS THE SECTOR
*                                       VALUE BEING SET LESS THAN
*                                       THE MAXIMUM VALUE
         BL    CPIOPEND                 YES-VALUE IS LEGAL SO GO
*                                       END THE OPERATION
         CLI   ADDRONLY(RBFRDATA),SECTXFF  IS THE VALUE SUPPLIED A
*                                       SECTOR OF X'FF'
         BE    CPIOPEND                 GO END OPERATION AS THIS IS
*                                       A VALID VALUE EVEN THOUGH
*                                       IT EXCEEDS THE MAXIMUM
         OI    WICOFLG2,WICERROR        INDICATE AN ERROR SITUATION
*                                       AFTER OPERATION STARTED
         B     CPISSTE2                 GO SET ERROR CODE
*
*
*              ENTERED FOR A SET SECTOR TO A NON RPS DEVICE
*
CPISSTE1 EQU   *                        *
         OI    WICOFLG2,WICINTRP        INDICATE AN ERROR DETECTED
*                                       BEFORE STARTING
*
CPISSTE2 EQU   *                        *
         LA    RERRDISP,ERR01DSP        SET DISPLACEMNT INTO ERROR TBL
*                                       FOR INVALID OP CODE OR SECTOR
*                                       VALUE TOO LARGE
         STH   RERRDISP,WICERDSP        SAVE FOR END ROUTINE
         B     CPIOPEND                 GO END OPERATION AND END
*                                       CHANNEL PROGRAM IN ERROR
         TITLE 'CHANNEL PROGRAM INTERPRETER - LENGTH TO USE ROUTINE'
***********************************************************************
*                                                                     *
*        LENGTH TO USE ROUTINE                                        *
*                                                                     *
*        THE FOLLOWING ROUTINE CALCULATES THE NUMBER OF BYTES TO USE  *
*        FOR A GIVEN OPERATION.  THE AMOUNT TO USE IS THE SMALLER OF  *
*        THAT REQUESTED OR THAT WHICH IS AVAILABLE.                   *
*                                                                     *
*        INPUT - REG REQBAL CONTAINS THE REQUESTED AMOUNT             *
*                REG RXFERBAL CONTAINS THE AMOUNT NOW AVAILABLE       *
*                                                                     *
*        OUTPUT - REG RCXFER CONTAINS THE SMALLER OF THE INPUTS       *
*                                                                     *
***********************************************************************
*
*
CPIXMITL EQU   *                        *
         LR    RCXFER,RXFERBAL          ASSUME AVAILABLE SMALLER
         CR    REQBAL,RXFERBAL          COMPARE INPUTS
         BCR   NOTLOW,RLINK             RETURN - REQUESTED IS GREATER
*                                       THAN OR EQ TO THAT AVAILABLE
         LR    RCXFER,REQBAL            USE REQUESTED SINCE IT IS LESS
         BR    RLINK                    RETURN
         TITLE 'CHANNEL PROGRAM INTERPRETER - SENSE COMMAND'
***********************************************************************
*                                                                     *
*        SENSE COMMAND                                                *
*                                                                     *
*        THE SENSE COMMAND RETURNS SENSE INFORMATION CONSISTING OF    *
*        ALL ZEROES.  THIS IS THE RESULT OF SENSE BEING CLEARED       *
*        AT THE BEGINNING OF THE CHANNEL PROGRAM. IF ANY CONDITION    *
*        HAS CAUSED THE SENSE TO BE SET, THE CHANNEL PROGRAM WOULD    *
*        HAVE ALREADY BEEN TERMINATED.                                *
*                                                                     *
*        INPUT - REGISTER REQBAL CONTAINS THE REQUESTED COUNT         *
*                RBFRDATA CONTAINS THE ADDRESS TO PLACE THE DATA      *
*                                                                     *
***********************************************************************
*
CPISENSE EQU   *                        *
         OI    WICOFLG2,WICDATAX        INDICATE OPERATION STARTED
         LA    RXFERBAL,SEN0TO5         ASSUME SIX BYTES OF SENSE
*                                       ARE AVAILABLE
         CLI   WICDEVTP,WIC2314         IS THIS A 2314 DEVICE
         BE    CPISEN10                 BR - SIX BYTE ASSUMPTION OKAY
         LA    RXFERBAL,SEN6TO23(RXFERBAL)  INCREASE BYTES AVAILABE TO
*                                       TWENTY FOUR
CPISEN10 EQU   *                        *
         ST    REQBAL,WICREQXF          NUMBER OF BYTES REQUESTED
         ST    RXFERBAL,WICAVXFR        NUMBER OF BYTES AVAILABLE
         TM    CCWFLAGS,CCWSKIP         TRANSFER DESIRED
         BO    CPIOPEND                 NO - GO END OPERATION
*
         BAL   RLINK,CPIXMITL           GET SHORTER OF REQUESTED
*                                       OR AVAILABLE AMOUNTS
*                                       RESULTS IN REG RCXFER
         LR    REQBAL,RCXFER            NUMBER OF BYTES TO ZERO OUT
         SR    RXFERBAL,RXFERBAL        NO BYTES WILL BE MOVED
         L     RCURSOR,WICCAM           USE CURRENT RECORD POINTER
XPGCK14  MVCL  RBFRDATA,RCURSOR         ZERO AREA
         B     CPIOPEND                 GO END OPERATION
         TITLE 'CPI RETRY ENTRY POINT FROM WIFRR ROUTINE'
***********************************************************************
*                                                                     *
*        RETRY FROM FRR.                                              *
*        LOAD REG 15 WITH PROPER BASE FROM BASEADDR                   *
*        AND GO TO CPIOPEND.                                          *
*                                                                     *
***********************************************************************
FRROPEND L     R15,BASEADDR-FRROPEND(,R15)  R15 = BASE          YM03980
         TITLE 'CHANNEL PROGRAM INTERPRETER - OP CODE END ROUTINE'
***********************************************************************
*                                                                     *
*        OPERATION END ROUTINE                                        *
*                                                                     *
*        THE FOLLOWING CODE IS ENTERED WHEN AN OPERATION HAS COM-     *
*        EITHER SUCCESSFULLY OR NOT.  IF A PCI HAS BEEN REQUESTED     *
*        DURING THE OPERATION, IT IS TAKEN PRIOR TO THE DETERMI-      *
*        NATION OF WHETHER TO CONTINUE THE CHANNEL PROGRAM OR TO      *
*        TERMINATE IT.                                                *
*                                                                     *
***********************************************************************
*
CPIOPEND EQU   *                        *
         TM    WICRESTA,WICPCIRS        HAS PCI BEEN REQUESTED AS
*                                       SET IN THE CCW FORMAT
*                                       CHECKING ROUTINE CPICCWCK
         BO    CPIPCI                   YES - GO PROCESS PCI
*
*              ENTERED WHEN PCI PROCESSING HAS BEEN COMPLETED
CPIEND10 EQU   *                        *
         SR    RWORK,RWORK              ASSUME A ZERO RESIDUAL COUNT
         TM    WICOFLG2,WICINTRP        WAS AN ERROR DETECTED BEFORE
*                                       AN OPERATION INTIATED TRANS-
*                                       FER OR DURING A CCW FETCH
*                                       AFTER TRANSFER STARTED
         BO    CPIABEND                 YES AN ERROR HAS BEEN SET
*
*              SINCE AN OPERATION HAS STARTED AND WAS NOT INTERRUPTED
*              BY A CHANNEL PROGRAM CHECK, DETERMINE IF AN INCORRECT
*              LENGTH CONDITION EXISTS.
*
         L     REQBAL,WICREQXF          TOTAL REQUESTED BYTE COUNT
         L     RXFERBAL,WICAVXFR        TOTAL AVAILABLE BYTE COUNT
         CR    REQBAL,RXFERBAL          COMPARE THAT REQUESTED TO
*                                       THAT WHICH WAS AVAILABLE
         BNE   CPIEND30                 GO DETERMINE IF THIS WILL
*                                       CAUSE AN INCORRECT LENGTH
*                                       INTERRRUPT
*
*              DETERMINE IF ANY ERROR CONDITION HAS BEEN SET AFTER
*              OPERATION WAS INITIATED.
CPIEND20 EQU   *                        *
         TM    WICOFLG2,WICERROR        ANY ERRORS INDICATED
         BO    CPIABE05                 YES GO PROCESS ERROR
*
*              NO ERRORS HAVE BEEN DETECTED.  DETERMINE IF CHANNEL
*              PROGRAM IS FINISHED OR IF A NEW OPERATION IS DESIRED.
*
         TM    CCWFLAGS,CCWCC           COMMAND CHAINED
         BZ    CPINREND                 NO - GO END NORMALLY
         LA    RCCW,L'CCW(RCCW)         NEXT CCW
         TM    IOBCSWS0,IOBCSWSM        STATUS MODIFIER SET
         BZ    CPIOPROC                 NO - PROCESS NEXT OPERATION
         LA    RCCW,L'CCW(RCCW)         SKIP A CCW
         NI    IOBCSWS0,FULLBYTE-IOBCSWSM  CLEAR STATUS MODIFIER
         B     CPIOPROC                 GO PROCESS NEXT OPERATION
*
*              ENTERED WHEN THE NUMBER OF BYTES AVAILABLE AND THE
*              NUMBER OF BYTES REQUESTED ARE NOT THE SAME.  USE THE
*              CONDITION CODE SETTING WHICH CAUSED THIS ENTRY TO
*              DETERMINE WHICH IS GREATER.
*
CPIEND30 EQU   *                        *
         BL    CPIEND50                 REQUESTED LESS THAN AVAILABLE
*
*              ENTERED WHEN A PREVIOUS ERROR HAS NOT OCCURED BUT
*              THE AMOUNT REQUESTED FOR THE OPERATION WAS GREATER
*              THAN THAT AVAILABLE.
*
         SR    REQBAL,RXFERBAL          CALCULATE RESIDUAL
         LR    RWORK,REQBAL             SAVE RESIDUAL FOR CSW
         TM    CCWFLAGS,CCWDC           IS DATA CHAINING SPECIFIED
         BZ    CPIEND50                 NO GO TEST FOR SILI BIT
*                                       DATA CHAINING NULLIFIES THE
*                                       SILI BEING SET
CPIEND40 EQU   *                        *
         OI    IOBCSWS1,IOBCSWIL        INCORRECT LENGTH INTERRUPT
         B     CPIABE05                 GO END CHANNEL PROGRAM
*                                       ABNORMALLY
*
*              ENTERED WHEN REQUESTED AMOUNT IS LESS THAN THAT
*              AVAILABLE.
CPIEND50 EQU   *                        *
         TM    CCWFLAGS,CCWSILI         IS SILI BIT SET
         BZ    CPIEND40                 NO - GO SET INCORRECT LENGTH
         B     CPIEND20                 GO CONTINUE NORMAL OPERATION
*                                       ENDING
*
*
*              ENTERED WHEN THE CHANNEL PROGRAM IS ENDING NORMALLY.
CPINREND EQU   *                        *
         OI    IOBCSWS0,IOBCSWCE+IOBCSWDE  SET CHANNEL END AND
*                                       DEVICE END
*
*              ENTERED FOR BOTH NORMAL AND ABNORMAL ENDINGS
CPICPEND EQU   *                        *
         STH   RWORK,IOBCSWBC           SET RESIDUAL COUNT
         LA    RCCW,L'CCW(RCCW)         ENDING CCW
         STCM  RCCW,ADDRMASK,IOBCSWCA   SET STOP ADDRESS IN CSW
         MVC   WICSENSE,IOBSENS0        SAVE SENSE
         NI    WICRESTA,FULLBYTE-WICRSTRT  CLEAR RESTART FLAG
*
*
*              END OF CHANNEL PROGRAM.  RETURN TO THE TRACK MANAGER.
*
         LR    R13,RVDSCB               VDSCB ADDRESS
         USING VDSCB,R13                DESCRIBE CONTROL BLOCK
         L     R13,VDSVBPPL             PARAMETER LIST CONTAINS SAVE
*                                       AREA FOR LOCATING RETURN
*                                       ADDRESS
         DROP  R13                      DISCONTINUE DESCRIPTION
         USING VBPPL,R13                DESCRIBE PARM LIST
         L     R14,VBPPLSAV+REG14SAV    GET RETURN ADDR FROM SAVE
         DROP  R13                      DISCONTINUE DESCRIPTION
         SR    R15,R15                  SET RETURN CODE FOR CHANNEL
*                                       PGM ENDING
         BR    R14                      EXIT TO CALLER
*
*
*
*              AN ERROR WAS DETECTED BEFORE OPEARTION WAS INITIATED
*              OR OCCURRED DURING THE OPERATION WHEN A NEW CCW
*              WAS FETCHED FOR DATA CHAINED CCWS
*
CPIABEND EQU   *                        *
         ICM   RWORK,HWMASK,CCWCOUNT    SET RESIDUAL AS CCW COUNT
*
*              ENTERED FOR ERRORS WHICH OCCUR AFTER AN OPERATION
*              HAS STARTED.
CPIABE05 EQU   *                        *
*
*              MOVE IN THE APPROPRIATE SENSE BYTES INTO THE IOB FROM
*              THE DEVICE DEPENDENT TABLES.  IF NO ERROR HAS OCCURRED
*              WHICH WOULD HAVE SET SENSE INFORMATION THEN THE
*              DISPLACEMENT INTO THE SENSE BYTE TABLES IS ZERO
*              WHICH WILL SET BOTH SENSE BYTES TO ZERO.  THE DISPLACE-
*              MENT WHICH INDICATE ERRORS IS SET WHENEVER THE ERROR
*              WAS DETECTED.  THE ERROR TABLES USED ARE 'KERRTAB1'
*              AND 'KERRTAB2'.  THE DISPLACEMENT USED FOR THESE
*              TABLES HAS BEEN SAVE AT 'WICERDSP' IN THE WICB.
*
         LA    RERRDISP,KERRTAB2        ASSUME THAT THE SENSE BYTES
*                                       TO USE ARE FOR DEVICES OTHER
*                                       THAN A 2314
         CLI   WICDEVTP,WIC2314         IS THE DEVICE A 2314
         BNE   CPIABE06                 NO-ASSUMPTION CORRECT
         LA    RERRDISP,KERRTAB1        ADDRESS FOR 2314 SENSE BYTES
CPIABE06 EQU   *                        *
         AH    RERRDISP,WICERDSP        DISPLACE TO THE ERROR AS
*                                       INDICATED WHEN DETECTED
*                                       MOVE SENSE TO IOB
         MVC   IOBSENS0(L'IOBSENS0+L'IOBSENS1),ADDRONLY(RERRDISP)
         OC    IOBSENS0(L'IOBSENS0+L'IOBSENS1),IOBSENS0  ANY SENSE
         BZ    CPIABE10                 NO - CONTINUE
         OI    IOBCSWS0,IOBCSWUC        INDICATE UNIT CHECK
CPIABE10 EQU   *                        *
         TM    WICOFLG2,WICDATAX        WAS DATA TRANSFER STARTED
         BZ    CPICPEND                 NO - GO END CHANNEL PGM
         OI    IOBCSWS0,IOBCSWCE+IOBCSWDE  INDICATE CHANNEL END AND
*                                       DEVICE END
         B     CPICPEND                 BR TO COMPLETE ENDING
*
*
*              ENTERED DURING THE ENDING OF AN OPERATION WHEN PCI
*              HAS BEEN REQUESTED.
CPIPCI   EQU   *                        *
         MVC   WICSENSE,IOBSENS0        SAVE CURRENT SINSE
         MVC   WICCSWSV,IOBCSW          SAVE CURRENT CSW
         SR    RWORK,RWORK              CLEAR REG
         STH   RWORK,IOBCSWS0           CLEAR CSW STATUS FOR PCI
         STH   RWORK,IOBSENS0           CLEAR SENSE FOR PCI
         LA    RWORK,L'CCW(RCCW)        ENDING ADDRESS FOR PCI
         STCM  RWORK,ADDRMASK,IOBCSWCA   AND SET IN CSW
         OI    IOBCSWS1,IOBCSWPI        INDICATE PCI IN CSW
         OI    WICRESTA,WICRSTRT        INDICATE RESTART SITUATION
*
*              TAKE THE PCI RETURN TO THE TRACK MANAGER WHICH IS A
*              RESTART SITUATION.
*
         LR    R13,RVDSCB               VDSCB ADDRESS
         USING VDSCB,R13                DESCRIBE CONTROL BLOCK
         L     R13,VDSVBPPL             PARAMETER LIST CONTAINS SAVE
*                                       AREA FOR LOCATING RETURN
*                                       ADDRESS
         DROP  R13                      DISCONTINUE DESCRIPTION
         USING VBPPL,R13                DESCRIBE PARM LIST
         L     R14,VBPPLSAV+REG14SAV    GET RETURN ADDR FROM SAVE
         DROP  R13                      DISCONTINUE DESCRIPTION
         SR    R15,R15                  SET RETURN CODE FOR PCI EXIT
         BR    R14                      RETURN TO TRACK MANAGER
*
*              RETURNED TO AFTER THE PCI EXIT HAS BEEN TAKEN.
*              REGISTERS HAVE BEEN SAVED AND RESTORED IN THE TRACK
*              MANAGER.  THE BASE REG FOR THIS MODULE HAS BEEN
*              RESTORED.
*
CPIPCIRS EQU   *                        *
         MVC   IOBSENS0(L'IOBSENS0+L'IOBSENS1),WICSENSE  RESTORE
         MVC   IOBCSW,WICCSWSV          RESTORE CSW
         NI    WICRESTA,FULLBYTE-WICPCIRS-WICRSTRT  CLEAR RESTART FLAGS
         B     CPIEND10                 GO CONTINUE WITH THE ENDING
*                                       OF THIS OPERATION
         TITLE 'CHANNEL PROGRAM INTERPRETER - EFFECTIVE LENGTH ROUTINE'
***********************************************************************
*                                                                     *
*        EFFECTIVE LENGTH SUMMATION ROUTINE                           *
*                                                                     *
*        THE FOLLOWING ROUTINE COMPUTES THE EFFECTIVE LENGTHS OF ALL  *
*        RECORDS BETWEEN A LOWER LIMIT AND A HIGHER LIMIT WHICH ARE   *
*        THE INPUTS.  THE CALCULATIONS ARE PERFORMED USING THE NOT    *
*        LAST RECORD ON TRACK FORMULA.                                *
*                                                                     *
*        INPUT - REG RFROM CONTAINS STARTING ADDRESS                  *
*                REG RTO CONTAINS THE ENDING ADDRESS                  *
*        OUTPUT - REG RWORK CONTAINS THE EFFECTIVE LENGTH             *
*                                                                     *
*        ADDITIONAL REGS USED - RWORK2                                *
*                                                                     *
***********************************************************************
*
CPISPACE EQU   *                        *
         SR    RWORK,RWORK              CLEAR EFFECTIVE SUM
CPISPALP EQU   *                        *
         CR    RFROM,RTO                CALCULATIONS FINISHED
         BCR   NOTLOW,RLINK             YES - RETURN WITH RESULTS
         SR    RWORK2,RWORK2            CLEAR WORKING REG
         ST    RWORK2,WICWORK           CLEAR WORK AREA
         USING COUNTDES,RFROM           DESCRIBE COUNT THIS REC
         IC    RWORK2,CNTKL             GET KEY LENGTH
*                                       GET DATA LENGTH AND KEY LENGTH
         MVC   WICWORK+ONE(L'CNTKL+L'CNTDL),CNTKL MOVE KL AND DL
         AH    RWORK2,WICWORK+TWO       KEY LENGTH PLUS DATA LENGTH
         AR    RFROM,RWORK2             BUMP LOWER LIMIT
         CLI   WICTOLSW,WICTOLAP        DOES TOLERANCE FACTOR APPLY
         BZ    CPISPA10                 NO - THE LOW ORDER BYTE OF
*                                       THE TOLERANCE IS ZERO AND
*                                       INDICATES DOES NOT APPLY
         MH    RWORK2,WICTOL            (KL+DL) * TOLERANCE
         SRA   RWORK2,DIVBY512          ((KL+DL)*TOLERANCE)/512)
CPISPA10 EQU   *                        *
         AH    RWORK2,WICIGAP           ADD NORMAL OVERHEAD
         CLI   WICWORK+ONE,NOKEY        IS KEY PRESENT
         BNE   CPISPA20                 YES - RESULTS CORRECT
         SH    RWORK2,WICKEYGP          SUBTRACT KEY CONSTANT SINCE
*                                       NOT PRESENT
CPISPA20 EQU   *                        *
         AR    RWORK,RWORK2             SUMM EFFECTIVE LENGTHS
         LA    RFROM,L'CNTFIELD(RFROM)  BUMP BY COUNT LENGTH
         B     CPISPALP                 CONTINUE SUMMATION
         DROP  RFROM                    DISCONTINUE DESCRIPTION
         USING IOBSTDRD,RIOB            RESUME IOB DESCRIPTION
         TITLE 'CHANNEL PROGRAM INTERPRETER -  CCW FORMAT CHECK'
***********************************************************************
*                                                                     *
*        CCW FORMAT CHECKING ROUTINE                                  *
*                                                                     *
*        THE FUNCTION OF THIS ROUTINE IS TO VALIDATE THE FORMAT OF A  *
*        CCW.  THE ROUTINE IS ENTERED WHENEVER A NEW CCW IS TO BE     *
*        USED AS A RESULT OF EITHER DATA CHAINING OR COMMAND CHAIN-   *
*        ING.  IF THE OP CODE IS A TIC,  THEN THE TICED TO CCW IS     *
*        PROCESSED AND THE NEW CCW ADDRESS IS RETURNED TO THE CALLER. *
*                                                                     *
*        INPUT -  REG RCCW CONTAINS THE ADDRESS OF THE CCW TO BE      *
*                 VALIDATED
*        OUTPUT - REG REQBAL CONTAINS THE CCW COUNT                   *
*                 REG RBFRDATA CONTAINS THE CCW ADDR FIELD            *
*                 REG RCCW CONTAINS THE UPDATED CCW ADDR IF THE INPUT *
*                     CCW WAS A TIC.                                  *
***********************************************************************
*
CPICCWCK EQU   *                        *
XPGCK15  TM    CCWOPCDE,LOW3BITS        TEST 3 LOW ORDER BITS FOR ZERO
         BZ    CPICCWTS                 POSSIBLE TIC BR TO TEST
CPICCW10 EQU   *                        *
         SR    REQBAL,REQBAL            CLEAR REG FOR CCW COUNT
XPGCK16  TM    CCWFLAGS,LOW3BITS        LOW 3 ORDER BITS OF FLAGS ZERO
         BC    7,CPIPGMCK               NO-CHANNEL PGM CHECK
XPGCK17  ICM   REQBAL,HWMASK,CCWCOUNT   GET CCW COUNT - CONDITION CODE
*                                       IS ZERO IF COUNT INSERTED IS
*                                       ZERO AND IS ONLY VALID FOR
*                                       A TIC
         BZ    CPIPGMCK                 YES-CHANNEL PGM CHECK
         L     RBFRDATA,CCWDATAD        GET ADDR POINTED TO BY CCW
         LA    RBFRDATA,ADDRONLY(RBFRDATA)  CLEAR OFF OP CODE
*
*              ALSO ENTERED AFTER A CHANNEL PROGRAM CHECK HAS OCCURRED
*              IN ORDER TO CHECK FOR PCI REQUESTED.
CPICCW20 EQU   *                        *
         TM    CCWFLAGS,CCWPCI          IS PCI REQUESTED
         BZ    CPICCW30                 NOT REQUESTED
         OI    WICRESTA,WICPCIRS        SET PCI REQUEST FLAG
CPICCW30 EQU   *                        *
         NI    WICSEQFG,FULLBYTE-WICTICFG   CLEAR TIC SEQ FLAG
*
*              RETURN TO CALLER WITH THE RESULTS OF FORMAT CHECKING
*              WHICH WILL INDICATE THAT AN ERROR HAS BEEN DETECTED AND
*              AND INTERRUPT IN THE CHANNEL PROGRAM IS PENDING IF ANY
*              ERROR WAS DETERMINED.  OTHERWISE THE CHECKING WAS
*              SUCCESSFUL AND THE OPERATION CAN PROCEED NORMALLY.
*
         BR    RLINK                    RETURN TO CALLER
*
CPICCWTS EQU   *                        *
         TM    CCWOPCDE,CCWTICBT        COMPLETE TEST FOR TIC
         BZ    CPICCW40                 BRANCH-OP CODE NOT A TIC AND
*                                       IS INVALID UNLESS DATA
*                                       CHAINING IS IN EFFECT
         TM    WICSEQFG,WICTICFG        IS THIS A TIC FROM A TIC
         BO    CPIPGMCK                 BRANCH-PGM CHECK ERROR
         OI    WICSEQFG,WICTICFG        SET TIC SEQUENCE FLAG
         TM    LOWBYTWD(RCCW),LOW3BITS  TICED TO CCW ON A DOUBLE
*                                       WORD BOUNDARY
         BNZ   CPIPGMCK                 TICED TO CCW NOT ON A DOUBLE
*                                       WORD-CHANNEL PGM CHECK
XPGCK18  L     RCCW,CCWDATAD            ADDR OF TICED TO CCW
         LA    RCCW,ADDRONLY(RCCW)      CLEAR HIAH ORDER BYTE
         B     CPICCWCK                 CHECK NEW CCW
*
CPICCW40 EQU   *                        *
         TM    WICOFLG2,WICDC           IS DATA CHAINING IN EFFECT
         BO    CPICCW10                 IGNORE INVALID OP CODE IF
*                                       DATA CHAINED IN EFFECT ELSE
*                                       INVALID OP CODE SINCE THE 3
*                                       LOW ORDER BITS ARE ZERO, NOT
*                                       A TIC AND THIS IS NOT DATA
*                                       CHAINING
*              INDICATE THAT A CHANNEL PROGRAM CHECK IS PENDING AND
*              SET THE NECESSARY FLAGS TO TERMINATE THE PROCESSING.
CPIPGMCK EQU   *                        *
         OI    IOBCSWS1,IOBCSWPG        SET CHANNEL PGM CHECK
         OI    WICOFLG2,WICINTRP        INDICATE THAT THE CHANNEL PGM
*                                       HAS BEEN INTERRUPTED WHICH
*                                       WILL PREVENT SUBSEQUENT CCWS
*                                       FROM BEING FETCH IF DATA
*                                       MOVEMENT WAS IN PROCESS
         SR    REQBAL,REQBAL            SET REQUESTED BYTES TO ZERO
         OI    WICOFLG2,WICXFCOM        INDICATE NO MORE DATA MOVEMENT
*                                       TO TAKE PLACE
         B     CPICCW20                 GO TEST FOR PCI REQUEST
         TITLE 'CHANNEL PROGRAM INTERPRETER -  EXECUTED INSTRUCTIONS'
***********************************************************************
*                                                                     *
*        EXECUTED INSTRUCTIONS                                        *
*                                                                     *
***********************************************************************
*
EXOPTEST TM    ADDRONLY(RWORK),OREDBYTE USED FOR TESTING THE OP CODE
*                                       BIT MAP
*
*              FOR USE IN A READ COUNT SEARCH KEY TIC TO READ COUNT
*              SEQUENCE AFTER THE SEARCH KEY HAS BEEN COMPLETED.
*
EXMOVCNT MVC   ADDRONLY(OREDBYTE,RBFRDATA),ADDRONLY(RCURSOR)  ABOVE
*
*              FOR USE IN SEARCH OPERATION WHERE THE SEARCH ARGUMENT
*              IS LOCATED BY REG RBFRDATA WHICH CONTAINS THE ADDRESS
*              POINTED TO BY THE CCW.
*
EXCOMPAR CLC   ADDRONLY(OREDBYTE,RCURSOR),ADDRONLY(RBFRDATA)  ABOVE
*
*
*              FOR USE WHEN A SEARCH ID IS BEING EXECUTED AND CAUSES
*              THE BRANCH TO BE TAKEN WHEN THE DESIRED SEARCH CONDITION
*              HAS BEEN SATISFIED.
*
EXBRSID  BC    OREDBYTE,CPISIDOK        SEARCH SATISFIED BRANCH
*
*              FOR USE WHEN A SEARCH KEY IS BEING EXECUTED AND CAUSES
*              THE BRANCH TO BE TAKEN WHEN THE DESIRED SEARCH CONDITION
*              HAS BEEN SATISFIED.
*
EXBRKEY  BC    OREDBYTE,CPIKEYOK        SEARCH SATISFIED BRANCH
         TITLE 'CHANNEL PROGRAM INTERPRETER - TABLES'
***********************************************************************
*                                                                     *
*        OP CODE VALIDATION TABLES                                    *
*                                                                     *
*        THE FOLLOWING TABLES ARE USED IN VALIDATING A GIVEN OP       *
*        CODE AFTER THE FORMAT OF THE CCW HAS BEEN VALIDATED.         *
*        THERE IS A ONE TO ONE CORRESPONDENCE BETWEEN THE BIT MAP     *
*        AND ALL POSSIBLE OP CODES AS EACH BIT REPRESENTS AN OP       *
*        CODE.  A VALUE OF 1 MEANS THE OP CODE IS VALID AND 0 INVALID.*
*        THE OP CODE IS USED TO INDEX INTO THE TABLE TO THE APPROPRI- *
*        ATE BYTE TO TEST.  THE OP CODE IS ALSO USED TO INSERT        *
*        A MASK VALUE FROM THE MASK TABLE TO TEST THE                 *
*        APPROPRIATE BIT WITHIN THE GIVEN BYTE.  THIS IS ACCOM-       *
*        PLISHED BY USING THE 5 HIGH ORDER BITS OF THE OP             *
*        CODE TO INDEX INTO THE BIT MAP, AND USING THE LOW            *
*        ORDER 3 BITS TO INDEX INTO THE TABLE OF MASKS.  THUS         *
*        AN OP CODE SUCH AS '1D' (B'00011-101') WOULD INDEX TO        *
*        BYTE 3 OF THE MAP TABLE AND USE THE MASK FROM THE MASK       *
*        TABLE AT AN OFFSET OF 5.  THIS MEANS THAT BYTE 3 OF THE      *
*        MAP TABLE WOULD BE TESTED WITH A MASK OF X'04'.  THIS        *
*        BIT REPRESENTS THE WCKD OP CODE.                             *
*                                                                     *
***********************************************************************
*
         DS    0B
KOPMAP1  EQU   *                        *
* OP CODES 0X
         DC    B'01011111'              WSPCKD,NOP,SENSE,WD,RD,SEEK
         DC    B'00010110'              SEEKC,WKD,RKD
* OP CODES 1X
         DC    B'01100011'              ERASE,RC,RR0,RESTORE
         DC    B'00110110'              RHA,SEEKH,WCKD,RCKD
* OP CODES 2X
         DC    B'00110000'              RSEC,SETSEC
         DC    B'01000000'              SKE
* OP CODES 3X
         DC    B'01000000'              SIDE
         DC    B'01000000'              SHAE
* OP CODES 4X
         DC    B'00000000'              NONE
         DC    B'01000000'              SKH
* OP CODES 5X
         DC    B'01000000'              SIDH
         DC    B'00000000'              NONE
* OP CODES 6X
         DC    B'00000000'              NONE
         DC    B'01000000'              SKEH
* OP CODES 7X
         DC    B'01000000'              SIDEH
         DC    B'00000000'              NONE
* OP CODES 8X
         DC    B'00000010'              RD(MT)
         DC    B'00000010'              RKD(MT)
* OP CODES 9X
         DC    B'00100010'              RC(MT),RR0(MT)
         DC    B'00100010'              RHA(MT),RCKD(MT)
* OP CODES AX
         DC    B'00000000'              NONE
         DC    B'01000000'              SKE(MT)
* OP CODES BX
         DC    B'01000000'              SIDE(MT)
         DC    B'01000000'              SHAE(MT)
* OP CODES CX
         DC    B'00000000'              NONE
         DC    B'01000000'              SKH(MT)
* OP CODES DX
         DC    B'01000000'              SIDH(MT)
         DC    B'00000000'              NONE
* OP CODES EX
         DC    B'00000000'              NONE
         DC    B'01000000'              SKHE(MT)
* OP CODES FX
         DC    B'01000000'              SIDHE(MT)
         DC    B'00000000'              NONE
*
*
*        THE FOLLOWING TABLE IS USED TO ELIMINATE OP CODES WHICH
*        ARE VALID BUT ARE NOT ALLOWED TO BE PRECEDED BY A SET FILE
*        MASK INSTRUCTION.
*
         DS    0B
KOPMAP2  EQU   *                        *
*
* OP CODES 0X
         DC    B'00100000'              READ IPL
         DC    B'00000000'              NONE
* OP CODES 1X
         DC    B'00000000'              NONE
         DC    B'00000001'              SET FILE MASK
* OP CODES 2X
         DC    B'00000000'              NONE
         DC    B'00000000'              NONE
* OP CODES 3X
         DC    B'00000000'              NONE
         DC    B'00000000'              NONE
* OP CODES 4X
         DC    B'00000000'              NONE
         DC    B'00000000'              NONE
* OP CODES 5X
         DC    B'00000000'              NONE
         DC    B'00000000'              NONE
* OP CODES 6X
         DC    B'00000000'              NONE
         DC    B'00000000'              NONE
* OP CODES 7X
         DC    B'00000000'              NONE
         DC    B'00000000'              NONE
* OP CODES 8X
         DC    B'00000000'              NONE
         DC    B'00000000'              NONE
* OP CODES 9X
         DC    B'00001000'              RELEASE
         DC    B'00000000'              NONE
* OP CODES AX
         DC    B'00000000'              NONE
         DC    B'00000000'              NONE
* OP CODES BX
         DC    B'00001000'              RESERVE
         DC    B'00000000'              NONE
* OP CODES CX
         DC    B'00000000'              NONE
         DC    B'00000000'              NONE
* OP CODES DX
         DC    B'00000000'              NONE
         DC    B'00000000'              NONE
* OP CODES EX
         DC    B'00000000'              NONE
         DC    B'00000000'              NONE
* OP CODES FX
         DC    B'00000000'              NONE
         DC    B'00000000'              NONE
*
*        THE FOLLOWING TABLE CONTAINS THE MASK FOR TESTING THE OP
*        CODE BIT MAP BYTE.
*
         DS    0X
KMASKOP  EQU   *                        *
         DC    X'80'                    TEST BIT 0
         DC    X'40'                    TEST BIT 1
         DC    X'20'                    TEST BIT 2
         DC    X'10'                    TEST BIT 3
         DC    X'08'                    TEST BIT 4
         DC    X'04'                    TEST BIT 5
         DC    X'02'                    TEST BIT 6
         DC    X'01'                    TEST BIT 7
         EJECT
***********************************************************************
*                                                                     *
*        POSITION TABLE                                               *
*                                                                     *
*        THIS TABLE CONTAINS VALUES WHICH RELATE AN OP CODE TO A      *
*        RELATIVE POSITION WITH A RECORD OR TO A SPECIFIC AREA        *
*        ON THE TRACK SUCH AS HOME ADDRESS OR RECORD ZERO.  BITS 3-5  *
*        OF THE OP CODE DETERMINE THE AREA WHICH THE OPERATION        *
*        STARTS.  THESE THREE BITS ARE THE COUNT, KEY, AND DATA BITS  *
*        OF THE OP CODE.                                              *
*                                                                     *
*        THE FOLLOWING VALUES REPRESENT THE AREAS OF A TRACK.         *
*              1 = BEFORE COUNT                                       *
*              2 = BEFORE KEY                                         *
*              3 = BEFORE DATA                                        *
*              4 = AFTER DATA                                         *
*              5 = BEFORE HOME ADDRESS                                *
*              6 = BEFORE R0 (AFTER A HOME ADDRESS COMMAND)           *
*              7 = AFTER R0 (FOLLOWING AN R0 COMMAND)                 *
*                                                                     *
*        THE TABLE CONSISTS OF HALFWORK VALUES WHICH MAP THE          *
*        SETTINGS OF BITS 3-5 OF THE OP CODE INTO A SUBSET OF THE     *
*        VALUES ABOVE.  THIS IS DONE BY USING THE BITS (SHIFTED       *
*        ONE TO THE RIGHT) TO INDEX INTO THE TABLE.  SEE REMARKS      *
*        IN THE TABLE FOR THE RELATIONSHIP.                           *
*                                                                     *
***********************************************************************
*
         DS    0H                       ALIGNMENT
KPOSTAB  EQU   *                        *
*                                       BITS 3-5  POSITION (COMMANDS)
KPOSSCKD DC    H'1'                     '000'     COUNT (SPECIAL WRITE)
KPOSDATA DC    H'3'                     '001'     DATA  (DATA)
KPOSKEY  DC    H'2'                     '010'     KEY  (KEY)
KPOSKEYD DC    H'2'                     '011'     KEY  (KEY AND DATA)
KPOSCNT  DC    H'1'                     '100'     COUNT (COUNT)
KPOSR0   DC    H'6'                     '101'     RECORD ZERO  (R0)
KPOSHA   DC    H'5'                     '110'     HOME ADDRESS  (HA)
KPOSCKD  DC    H'1'                     '111'     COUNT (CNT,KEY,DATA)
         EJECT
***********************************************************************
*                                                                     *
*        SENSE BYTE TABLES                                            *
*                                                                     *
*        THESE TABLES ARE USED TO POST THE IOB WITH THE CORRECT SENSE *
*        BYTES.  THIS IS DONE SINCE THE SENSES BYTES ARE NOT CONSIST- *
*        SISTENT ACCROSS DEVICES.  HENCE, WHEN AN ERROR IS DETECTED,  *
*        A DISPLACEMENT IS CALCULATED (USING DSECT ERRTABLE) SO THAT  *
*        WHEN IT IS TIME TO POST THE SENSE IT ONLY HAS TO BE DETER-   *
*        MINED WHICH TABLE TO USE FOR THE ERROR FOR THE GIVEN DEVICE. *
*                                                                     *
*        SEE DSECT ERRTABLE FOR THE ERROR REASONS.                    *
*                                                                     *
***********************************************************************
*
*
*              THE FOLLOWING EQUATES ARE USED TO INDICATE A ZERO SENSE
*              BYTE.
*
NOSENS0  EQU   X'00'                    ZERO SENSE BYTE ZERO
NOSENS1  EQU   X'00'                    ZERO SENSE BYTE ONE
*
*              THE REMEAINDER OF THE EQUATES USED IN THESE TABLES ARE
*              DEFINED IN THE IOB DSECT.
*
*
*              THE FOLLOWING TABLE IS USED WHEN THE DEVICE IS A 2314
*
         DS    0H                       ALIGNMENT
KERRTAB1 EQU   *                        *
*
* ERROR00 - INDICATES NO SENSE RELATED ERROR
*
         DC    AL1(NOSENS0)             ZERO SENSE
         DC    AL1(NOSENS1)             ZERO SENSE
*
* ERROR01 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(IOBCMDRJ)            X'80' COMMAND REJECT
         DC    AL1(NOSENS1)             X'00' ZERO SENSE BYTE
*
* ERROR02 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(IOBCMDRJ)            X'80' COMMAND REJECT
         DC    AL1(IOBINVSQ)            X'10' INVALID SEQUENCE
*
* ERROR03 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(IOBCMDRJ+IOBSKCHK)   X'81' COMMAND REJECT AND SEEK
*                                             CHECK
         DC    AL1(NOSENS1)             X'00' ZERO SENSE BYTE
*
* ERROR04 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(IOBCMDRJ)            X'80' COMMAND REJECT
         DC    AL1(IOBFILEP)            X'04' FILE PROTECT
*
* ERROR05 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(NOSENS0)             X'00' ZERO SENSE BYTE
         DC    AL1(IOBTOVRN)            X'40' TRACK OVERRUN
*
* ERROR06 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(NOSENS0)             X'00' ZERO SENSE BYTE
         DC    AL1(IOBNRECF)            X'08' NO RECORD FOUND
*
* ERROR07 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(NOSENS0)             X'00' ZERO SENSE BYTE
         DC    AL1(IOBFILEP)            X'04' FILE PROTECT
*
* ERROR08 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(NOSENS0)             X'00' ZERO SENSE BYTE
         DC    AL1(IOBFILEP)            X'04' FILE PROTECT
*
* ERROR09 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(NOSENS0)             X'00' ZERO SENSE BYTE
         DC    AL1(IOBFILEP+IOBOVINC)   X'05' FILE PROTECT AND OVER-
*                                             FLOW INCOMPLETE
*
* ERROR10 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(NOSENS0)             X'00' ZERO SENSE BYTE
         DC    AL1(IOBEOCYL)            X'20' END OF CYLINDER
*
* ERROR11 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(NOSENS0)             X'00' ZERO SENSE BYTE
         DC    AL1(IOBEOCYL+IOBOVINC)   X'21' END OF CYLINDER AND
*                                             OVERFLOW INCOMPLETE
*
*
*              THE FOLLOWING TABLE IS USED FOR ALL DEVICES OTHER THAN
*              THE 2314 DEVICE.
*
         DS    0H                       ALIGNMENT
KERRTAB2 EQU   *                        *
*
* ERROR00 - INDICATES NO SENSE RELATED ERROR
*
         DC    AL1(NOSENS0)             ZERO SENSE
         DC    AL1(NOSENS1)             ZERO SENSE
*
* ERROR01 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(IOBCMDRJ)            X'80' COMMAND REJECT
         DC    AL1(NOSENS1)             X'00' ZERO SENSE BYTE
*
* ERROR02 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(IOBCMDRJ)            X'80' COMMAND REJECT
         DC    AL1(NOSENS1)             X'00' ZERO SENSE BYTE
*
* ERROR03 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(IOBCMDRJ)            X'80' COMMAND REJECT
         DC    AL1(NOSENS1)             X'00' ZERO SENSE BYTE
*
* ERROR04 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(IOBCMDRJ)            X'80' COMMAND REJECT
         DC    AL1(NOSENS1)             X'00' ZERO SENSE BYTE
*
* ERROR05 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(NOSENS0)             X'00' ZERO SENSE BYTE
         DC    AL1(IOBTOVRN)            X'40' TRACK OVERRUN
*
* ERROR06 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(NOSENS0)             X'00' ZERO SENSE BYTE
         DC    AL1(IOBNRECF)            X'08' NO RECORD FOUND
*
* ERROR07 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(NOSENS0)             X'00' ZERO SENSE BYTE
         DC    AL1(IOBFILEP)            X'04' FILE PROTECT
*
* ERROR08 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(NOSENS0)             X'00' ZERO SENSE BYTE
         DC    AL1(IOBFILEP)            X'04' FILE PROTECT
*
* ERROR09 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(NOSENS0)             X'00' ZERO SENSE BYTE
         DC    AL1(IOBFILEP+IOBOVINC)   X'05' FILE PROTECT AND OVER-
*                                             FLOW INCOMPLETE
*
* ERROR10 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(NOSENS0)             X'00' ZERO SENSE BYTE
         DC    AL1(IOBEOCYL)            X'20' END OF CYLINDER
*
* ERROR11 - SEE DSECT ERRTABLE FOR ERROR DESCRIPTION
*
         DC    AL1(NOSENS0)             X'00' ZERO SENSE BYTE
         DC    AL1(IOBEOCYL+IOBOVINC)   X'21' END OF CYLINDER AND
*                                             OVERFLOW INCOMPLETE
         TITLE 'CHANNEL PROGRAM INTERPRETER -  MISCELLANEOUS CONSTANTS'
***********************************************************************
*                                                                     *
*        MISCELLANEOUS CONSTANTS                                      *
*                                                                     *
***********************************************************************
*
*
KCCWLGTH DS    0F                       LENGTH OF CCW
KCNTLGTH DC    F'8'                     LENGTH OF COUNT
*
KOPBRMSK DC    X'0000001C'              MASK FOR BYTES 3-5 OF OP CODE
*
KIOSSFM  DC    X'1F00000000000001'      SET FILE MASK CCW SKELETON
KIOSTIC  DC    X'0800000000000000'      TIC CCW SKELETON
KIOSSEEK DC    X'0700000000000006'      SEEK CCW SKELETON
BASEADDR DC    A(IDDWICPI)         BASE ADDR OF THIS MODULE     YM03980
*                                 USED FOR RETRY FROM FRR
         TITLE 'CHANNEL PROGRAM INTERPRETOR - PATCH AREA'
***********************************************************************
*                                                                     *
*        PATCH AREA                                                   *
*                                                                     *
***********************************************************************
*
CPIPATCH DC    10F'0'                   PATCH AREA
         TITLE 'CHANNEL PROGRAM INTERPRETER -  ERROR TABLE DSECT'
***********************************************************************
*                                                                     *
*        SENSE BYTE TABLE DSECT                                       *
*                                                                     *
***********************************************************************
*
ERRTABLE DSECT
*
ERRENTRY DS    0H                       LENGTH OF EACH ENTRY
*
*              THE FIRST POSITION OF EACH TABLE REPRESENTS A NO
*              SENSE BYTE RELATED ERROR.
*
ERROR00  DS    H                        TWO SENSE BYTES FOR ERROR
ERR00DSP EQU   ERROR00-ERRTABLE         DISPLACEMENT FOR ERROR
*
*              THE FOLLOWING ERROR IS FOR
*                  INVALID FILE MASK FORMAT
*                  INVALID OP CODE
*
ERROR01  DS    H                        TWO SENSE BYTES FOR ERROR
ERR01DSP EQU   ERROR01-ERRTABLE         DISPLACEMENT FOR ERROR
*
*              THE FOLLOWING ERROR IS FOR
*                  INVALID CHANNEL PROGRAM SEQUENCE
*
ERROR02  DS    H                        TWO SENSE BYTES FOR ERROR
ERR02DSP EQU   ERROR02-ERRTABLE         DISPLACEMENT FOR ERROR
*
*              THE FOLLOWING ERROR IS FOR
*                  INVALID SEEK ARGUMENT
*
ERROR03  DS    H                        TWO SENSE BYTES FOR ERROR
ERR03DSP EQU   ERROR03-ERRTABLE         DISPLACEMENT FOR ERROR
*
*              THE FOLLOWING ERROR IS FOR
*                  WRITE FILE MASK VIOLATION
*
ERROR04  DS    H                        TWO SENSE BYTES FOR ERROR
ERR04DSP EQU   ERROR04-ERRTABLE         DISPLACEMENT FOR ERROR
*
*              THE FOLLOWING ERROR IS FOR
*                  TRACK OVERRUN CONDITION
*
ERROR05  DS    H                        TWO SENSE BYTES FOR ERROR
ERR05DSP EQU   ERROR05-ERRTABLE         DISPLACEMENT FOR ERROR
*
*              THE FOLLOWING ERROR IS FOR
*                  NO RECORD FOUND CONDITION
*
ERROR06  DS    H                        TWO SENSE BYTES FOR ERROR
ERR06DSP EQU   ERROR06-ERRTABLE         DISPLACEMENT FOR ERROR
*
*              THE FOLLOWING ERROR IS FOR
*                  FILE MASK VIOLATION ON A SEEK
*
ERROR07  DS    H                        TWO SENSE BYTES FOR ERROR
ERR07DSP EQU   ERROR07-ERRTABLE         DISPLACEMENT FOR ERROR
*
*              THE FOLLOWING ERROR IS FOR
*                  FILE MASK VIOLATION FOR A MULTITRACK READ OR SEARCH
*
ERROR08  DS    H                        TWO SENSE BYTES FOR ERROR
ERR08DSP EQU   ERROR08-ERRTABLE         DISPLACEMENT FOR ERROR
*
*              THE FOLLOWING ERROR IS FOR
*                  FILE MASK VIOLATION FOR A MULTITRACK READ OR SEARCH
*                  WHEN THE REC BEING PROCESSED IS AN OVERFLOW RECORD
*
ERROR09  DS    H                        TWO SENSE BYTES FOR ERROR
ERR09DSP EQU   ERROR09-ERRTABLE         DISPLACEMENT FOR ERROR
*
*              THE FOLLOWING ERROR IS FOR
*                  END OF CYLINDER REACHED
*
ERROR10  DS    H                        TWO SENSE BYTES FOR ERROR
ERR10DSP EQU   ERROR10-ERRTABLE         DISPLACEMENT FOR ERROR
*
*              THE FOLLOWING ERROR IS FOR
*                  END OF CYLINDER REACHED AND RECORD BEING PROCESSED
*                  IS AN OVERFLOW RECORD
*
ERROR11  DS    H                        TWO SENSE BYTES FOR ERROR
ERR11DSP EQU   ERROR11-ERRTABLE         DISPLACEMENT FOR ERROR
         TITLE 'CHANNEL PROGRAM INTERPRETER -  VIRTUAL TRACK DSECT'
         IDDTRACK
         TITLE 'CHANNEL PROGRAM INTERPRETER -  CCW DSECT'
***********************************************************************
*                                                                     *
*        CHANNEL COMMAND WORD DESCRIPTION                             *
*                                                                     *
***********************************************************************
*
*
CCWDES   DSECT
CCW      DS    0CL8                     LENGTH OF CCW
*
CCWOPCDE DS    XL1                      OPERATION CODE
*
CCWMLTRK EQU   X'80'                    MULTITRACKING BIT
CCWHICON EQU   X'40'                    SEARCH HIGH CONDITION BIT
CCWEQCON EQU   X'20'                    SEARCH EQUAL CONDITION BIT
CCWUSECT EQU   X'10'                    USE COUNT AREA BIT
CCWTICBT EQU   X'08'                    TIC BIT WHEN BITS 5-7 ARE ZERO
CCWUSEKY EQU   X'08'                    USE KEY AREA BIT
CCWUSEDT EQU   X'04'                    USE DATA AREA BIT
CCWTYPE  EQU   X'03'                    BITS 6-7 DESCRIBE TYPE
CCWCNTRL EQU   X'03'                    '11' CONTROL
CCWREAD  EQU   X'02'                    '10' READ
CCWSRCH  EQU   X'01'                    '01' SEARCH
CCWWRITE EQU   X'01'                    '01' WRITE
CCWSENSE EQU   X'00'                    '00' SENSE
         ORG   CCW                      BEGINNING OF CCW
CCWDATAD DS    A                        ADDRESS FIELD
*
CCWFLAGS DS    XL1                      FLAG BYTE
*
CCWDC    EQU   X'80'                    DATA CHAINING
CCWCC    EQU   X'40'                    COMMAND CHAINING
CCWSILI  EQU   X'20'                    SUPPRESS INCORRECT LENGTH
CCWSKIP  EQU   X'10'                    SKIP DATA TRANSFER
*
CCWPCI   EQU   X'08'                    PROGRAM CONTROLLED INTERRUPT
CCWLOW3  EQU   X'07'                    MUST BE ZERO
         DS    XL1                      UNUSED
CCWCOUNT DS    H                        BYTE COUNT
         TITLE 'CHANNEL PROGRAM INTERPRETER -  COUNT FIELD DSECT'
***********************************************************************
*                                                                     *
*        THE FOLLOWING DESCRIBES THE COUNT AREA OF A RECORD           *
*                                                                     *
***********************************************************************
*
*
COUNTDES DSECT
CNTFIELD DS    0CL8                     LENGTH OF COUNT AREA
*
CNTID    DS    CL5                      FIVE BYTE ID USUALLY OF THE
*                                       FORM CCHHR
CNTKL    DS    AL1                      KEY LENGTH OF RECORD
CNTDL    DS    AL2                      DATA LENGTH OF RECORD
         TITLE 'CHANNEL PROGRAM INTERPRETER -  DASD ADDRESS DSECT'
***********************************************************************
*                                                                     *
*        SEEK ARGUMENT DESCRIPTION USED IN CONJUNCTION WITH SEEK      *
*        COMMANDS.                                                    *
*                                                                     *
***********************************************************************
*
*
DASDADDR DSECT
DASDARG  DS    0CL6                     ADDRESS DESCPRITION
DASDBB   DS    CL2                      BB - BIN NUMBER
DASDCC   DS    CL2                      CC - CYLINDER NUMBER
DASDHH   DS    CL2                      HH - HEAD NUMBER
         TITLE 'CHANNEL PROGRAM INTERPRETER -  IOB DSECT'
***********************************************************************
*                                                                     *
*        IOB DESCRIPTION                                              *
*                                                                     *
*        THE STANDARD DSECT IS INVOKED BY CODING THE CALLING MACRO    *
*        IEZIOB.  THIS IS FOLLOWED BY EQUATES CODED IN THIS MODULE    *
*        TO DESCRIBE THE SENSE BYTES 0 AND 1.  THESE EQUATES APPEAR   *
*        IMMEDIATELY FOLLOWING THE INCLUDED DSECT AND GIVE MORE       *
*        MEANINGFUL DESCRIPTIONS FOR THE 2 SENSE BYTES AS THEY ARE    *
*        USED FOR DIRECT ACCESS DEVICES.  IN ADDITION, A DETAILED     *
*        DESCRIPTION OF THE CSW IS CODED FOLLOWING THE EQUATES FOR    *
*        THE SENSE BYTES.                                             *
*                                                                     *
***********************************************************************
*
         IEZIOB
*
***********************************************************************
*                                                                     *
*        SENSE BYTE EQUATES                                           *
*                                                                     *
*        THE FOLLOWING EQUATES GIVE THE DIRECT ACCESS USE FOR SENSE   *
*        BYTES 0 AND 1 DEFINED IN THE IOB DSECT                       *
*                                                                     *
***********************************************************************
*
*        SENSE BYTE 0
*
IOBCMDRJ EQU   IOBS0B0                  X'80'-COMMAND REJECT
IOBINTRQ EQU   IOBS0B1                  X'40'-INTERVENTION REQUIRED
IOBBUSPR EQU   IOBS0B2                  X'20'-BUS OUT PARITY
IOBEQUIP EQU   IOBS0B3                  X'10'-EQUIPMENT CHECK
*
IOBDATCK EQU   IOBS0B4                  X'08'-DATA CHECK
IOBOVRUN EQU   IOBS0B5                  X'04'-OVERRUN
IOBTRKCD EQU   IOBS0B6                  X'02'-TRACK CONDITION
IOBSKCHK EQU   IOBS0B7                  X'01'-SEEK CHECK
*
*        SENSE BYTE 1
*
IOBDATCT EQU   IOBS1B0                  X'80'-DATA CHECK COUNT FIELD
IOBTOVRN EQU   IOBS1B1                  X'40'-TRACK OVERRUN
IOBEOCYL EQU   IOBS1B2                  X'20'-END OF CYLINDER
IOBINVSQ EQU   IOBS1B3                  X'10'-INVALID SEQUENCE
*
IOBNRECF EQU   IOBS1B4                  X'08'-NO RECORD FOUND
IOBFILEP EQU   IOBS1B5                  X'04'-FILE PROTECT
IOBNAMRK EQU   IOBS1B6                  X'02'-MISSING ADDRESS MARKER
IOBOVINC EQU   IOBS1B7                  X'01'-OVERFLOW INCOMPLETE
*
*                                                                     *
***********************************************************************
*                                                                     *
*        DESCRIBE THE CSW                                             *
*                                                                     *
***********************************************************************
*
         ORG   IOBCSW                   START AT IOBCSW
IOBCSWCA DS    AL3                      COMMAND ADDRESS
*
IOBCSWS0 DS    CL1                      STATUS BYTE ZERO
*
IOBCSWAT EQU   X'80'                    ATTENTION
IOBCSWSM EQU   X'40'                    STATUS MODIFIER
IOBCSWCU EQU   X'20'                    CONTROL UNIT END
IOBCSWBS EQU   X'10'                    BUSY
*
IOBCSWCE EQU   X'08'                    CHANNEL END
IOBCSWDE EQU   X'04'                    DEVICE END
IOBCSWUC EQU   X'02'                    UNIT CHECK
IOBCSWUE EQU   X'01'                    UNIT EXCEPTION
*
IOBCSWS1 DS    CL1                      STATUS BYTE ONE
*
IOBCSWPI EQU   X'80'                    PROGRAM CONTROLLED INTERRUPT
IOBCSWIL EQU   X'40'                    INCORRECT LENGTH
IOBCSWPG EQU   X'20'                    PROGRAM CHECK
IOBCSWPT EQU   X'10'                    PROTECTION CHECK
*
IOBCSWCD EQU   X'08'                    CHANNEL DATA CHECK
IOBCSWCC EQU   X'04'                    CHANNEL CONTROL CHECK
IOBCSWIC EQU   X'02'                    INTERFACE CONTROL CHECK
IOBCSWCH EQU   X'01'                    CHAINING CHECK
*
IOBCSWBC DS    AL2                      BYTE COUNT
         TITLE 'CHANNEL PROGRAM INTERPRETER -  VDSCB DSECT'
         IDDVDSCB
         TITLE 'CHANNEL PROGRAM INTERPRETER -  VBPPL DSECT'
         IDDVBPPL
         TITLE 'CHANNEL PROGRAM INTERPRETER -  WICB DSECT'
         IDDWICB
         END
