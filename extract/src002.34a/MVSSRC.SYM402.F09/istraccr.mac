         TITLE 'ISTRACCR - CONTROL BLOCK QUEUE REMOVE PROCEDURE        *
                        '
ISTRACCR CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTRACCR  75.130'                                 0001
         DROP  @15
@PROLOG  STM   @14,@00,12(@13)                                     0001
         STM   @02,@12,28(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
*   ISTQAPTR=PLISTQAB;              /* SET UP QAB                    */
         L     ISTQAPTR,PLISTQAB(,PLISTPTR)                        0014
*   IF QABCT=0 THEN                                                0015
         LH    @14,QABCT(,ISTQAPTR)                                0015
         LTR   @14,@14                                             0015
         BNZ   @RF00015                                            0015
*     RCREG=16;                     /* IF NO Q ELEMENTS BAD RETURN 0016
*                                      CODE                          */
         LA    RCREG,16                                            0016
*   ELSE                                                           0017
*     DO;                                                          0017
         B     @RC00015                                            0017
@RF00015 DS    0H                                                  0018
*       IF PLISTCBA=0 THEN                                         0018
         L     @14,PLISTCBA(,PLISTPTR)                             0018
         LTR   @14,@14                                             0018
         BNZ   @RF00018                                            0018
*         PFXPTR=QABFIRST;          /* INIT C.B. ADDRESS             */
         L     PFXPTR,QABFIRST(,ISTQAPTR)                          0019
*       ELSE                                                       0020
*         PFXPTR=PLISTCBA;          /* INIT C.B. ADDRESS             */
         B     @RC00018                                            0020
@RF00018 L     PFXPTR,PLISTCBA(,PLISTPTR)                          0020
*       NWPFXREG=PFXPTR+QABFWDDS;   /* GET ADDRESS OF FORWARD PTR    */
@RC00018 LR    NWPFXREG,PFXPTR                                     0021
         AH    NWPFXREG,QABFWDDS(,ISTQAPTR)                        0021
*       NWPFXREG=NWPFXREG->QABID;   /* GET ADDRESS OF NEXT C.B.      */
         L     NWPFXREG,QABID(,NWPFXREG)                           0022
*       BKPFXREG=PFXPTR+QABBCKDS;   /* GET ADDRESS OF BACKWARD PTR   */
         LR    BKPFXREG,PFXPTR                                     0023
         AH    BKPFXREG,QABBCKDS(,ISTQAPTR)                        0023
*       BKPFXREG=BKPFXREG->QABID;   /* GET ADDRESS OF PREVIOUS C.B.  */
         L     BKPFXREG,QABID(,BKPFXREG)                           0024
*/* IF DEQUING 1ST C.B. POINT QAB FWDPTR TO NEXT.                    */
*                                                                  0025
*       IF BKPFXREG=ISTQAPTR THEN                                  0025
         CR    BKPFXREG,ISTQAPTR                                   0025
         BNE   @RF00025                                            0025
*         QABFIRST=NWPFXREG;                                       0026
*                                                                  0026
         ST    NWPFXREG,QABFIRST(,ISTQAPTR)                        0026
*/* IF NOT, UPDATE FWD POINTER IN PREVIOUS C.B. ON Q.                */
*                                                                  0027
*       ELSE                                                       0027
*         DO;                                                      0027
         B     @RC00025                                            0027
@RF00025 DS    0H                                                  0028
*           BKPFXREG=BKPFXREG+QABFWDDS;/* NEXT@                      */
         LH    @14,QABFWDDS(,ISTQAPTR)                             0028
         ALR   BKPFXREG,@14                                        0028
*           BKPFXREG->QABID=NWPFXREG;/* UPDATE PTR                   */
         ST    NWPFXREG,QABID(,BKPFXREG)                           0029
*           BKPFXREG=BKPFXREG-QABFWDDS;/* GET BACK BEGINNING OF CB   */
         SLR   BKPFXREG,@14                                        0030
*         END;                                                     0031
*                                                                  0031
*/* IF DEQUEING LAST POINT QAB LAST TO PREVIOUS.                     */
*                                                                  0032
*       IF NWPFXREG=ISTQAPTR THEN                                  0032
@RC00025 CR    NWPFXREG,ISTQAPTR                                   0032
         BNE   @RF00032                                            0032
*         QABLAST=BKPFXREG;                                        0033
*                                                                  0033
         ST    BKPFXREG,QABLAST(,ISTQAPTR)                         0033
*/* IF NOT UPDATE BACK POINTER OF NEXT C.B. ON Q.                    */
*                                                                  0034
*       ELSE                                                       0034
*         DO;                                                      0034
         B     @RC00032                                            0034
@RF00032 DS    0H                                                  0035
*           NWPFXREG=NWPFXREG+QABBCKDS;/* GET POINTER TO PREVIOUS CB */
         AH    NWPFXREG,QABBCKDS(,ISTQAPTR)                        0035
*           NWPFXREG->QABID=BKPFXREG;/* UPDATE PTR                   */
         ST    BKPFXREG,QABID(,NWPFXREG)                           0036
*         END;                                                     0037
*                                                                  0037
*/* IF ONLY ONE ELEMENT ON Q ZERO OUT FIRST AND LAST PTRS.           */
*                                                                  0038
*       IF QABFIRST=ADDR(ISTQAB) THEN                              0038
@RC00032 C     ISTQAPTR,QABFIRST(,ISTQAPTR)                        0038
         BNE   @RF00038                                            0038
*         DO;                                                      0039
*           QABFIRST=0;                                            0040
         SLR   @14,@14                                             0040
         ST    @14,QABFIRST(,ISTQAPTR)                             0040
*           QABLAST=0;                                             0041
         ST    @14,QABLAST(,ISTQAPTR)                              0041
*         END;                                                     0042
*       ELSE                                                       0043
*         ;                                                        0043
@RF00038 DS    0H                                                  0044
*       PLISTPTR=PFXPTR;            /* PUT C.B. POINTER IN REG1      */
         LR    PLISTPTR,PFXPTR                                     0044
*       RCREG=0;                    /* SET UP SUCCESSFUL R.C.        */
         SLR   RCREG,RCREG                                         0045
*       QABCT=QABCT-1;              /* DECREMENT QAB COUNT           */
         LH    @14,QABCT(,ISTQAPTR)                                0046
         BCTR  @14,0                                               0046
         STH   @14,QABCT(,ISTQAPTR)                                0046
*     END;                                                         0047
*   RETURN CODE(RCREG);             /* RETURN TO CALLER              */
@RC00015 L     @14,12(,@13)                                        0048
         L     @00,20(,@13)                                        0048
         LM    @02,@12,28(@13)                                     0048
         BR    @14                                                 0048
*   END ISTRACCR;                                                  0049
@DATA    DS    0H
         DS    0F
         DS    0F
         DS    0D
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
PLISTPTR EQU   @01
ISTQAPTR EQU   @02
PFXPTR   EQU   @03
NWPFXREG EQU   @04
BKPFXREG EQU   @05
RCREG    EQU   @15
PLIST    EQU   0
PLISTQAB EQU   PLIST
PLISTCBA EQU   PLIST+4
ISTPFX   EQU   0
PFXID    EQU   ISTPFX
ISTQAB   EQU   0
QABID    EQU   ISTQAB
QABCT    EQU   ISTQAB+4
QABFIRST EQU   ISTQAB+8
QABLAST  EQU   ISTQAB+12
QABATTR  EQU   ISTQAB+16
QABATTR2 EQU   QABATTR+1
QABFWDDS EQU   ISTQAB+20
QABBCKDS EQU   ISTQAB+22
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
QABPTYDS EQU   ISTQAB+18
@NM00006 EQU   QABATTR2
@NM00005 EQU   QABATTR2
@NM00004 EQU   QABATTR2
@NM00003 EQU   QABATTR2
QABFIFO  EQU   QABATTR2
QABLIFO  EQU   QABATTR2
QABPRTY  EQU   QABATTR2
@NM00002 EQU   QABATTR2
QABATTR1 EQU   QABATTR
@NM00001 EQU   ISTQAB+6
PFXBCK   EQU   ISTPFX+12
PFXFWD   EQU   ISTPFX+8
PFXLNG   EQU   ISTPFX+5
PFXPRTY  EQU   ISTPFX+4
PFXCBID  EQU   PFXID
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   ISTRACCR,(C'PLS0946',0603,75130)
