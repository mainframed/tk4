***********************************************************************
*                                                                     *
*                         CHANEY SYSTEMS SUPPORT, INC.                *
*                                                                     *
*                                                                     *
*        THIS PROGRAM COPIES INPUT GENERATION DATASETS                *
*        IN REVERSE ORDER (OLDEST GDG FIRST) TO AN OUTPUT             *
*        DATASET(SYSUT2) ALLOWING A USER TO MAINTAIN DATA             *
*        IN CHRONOLOGICAL SEQUENCE.  THIS IS REQUIRED IF USING        *
*        RMF OR OTHER POST PROCESSOR SYSTEMS THAT REQUIRE SMF         *
*        DATA TO BE IN SEQUENCE (IT AVOIDS LARGE SORTS).              *
*                                                                     *
*        THE INPUT DATASET NAME (HIGH LEVEL OF THE GDG) IS PASSED     *
*        AS PARM INFORMATION AND IS USED TO "DYNAMICALLY" ALLOCATE    *
*        EACH GENERATION LEVEL OF THE GROUP.  ONCE THIS ROUTINE       *
*        IS COMPLETE, THE USER MAY SCRATCH AND UNCATALOG THE          *
*        GENERATION DATA SETS IF HE WISHES (THIS ROUTINE "WILL NOT"   *
*        SCRATCH OR UNCATALOG ANY DATASET).                           *
*                                                                     *
*        SINCE THIS ROUTINE IS OF GENERAL PURPOSE, THE USER MUST      *
*        PROVIDE ALL DCB INFORMATION INFORMATION FOR BOTH SYSUT1      *
*        (IF NON-LABELED OR NSL) AND SYSUT2 BY CODING DCB ON THE      *
*        DD CARD.  IF THE INPUT GDG (PARM INFO) IS STANDARD LABEL,    *
*        IT NEED NOT BE DEFINED BY SYSUT1.  IN EITHER CASE, SYSUT1    *
*        WILL BE DYNAMICALLY DEALLOCATED AND UNCHANGED (SINCE PARM    *
*        INFO IS USED TO IDENTIFY THE INPUT FILE(GDG)).               *
*                                                                     *
*        NOTE THAT FOR VS/VBS FILES, "BFTEK=A" WILL AUTOMATICALLY     *
*        BE ADDED TO THE SYSUT1 DCB VIA AN OPEN EXIT.  THIS IS        *
*        DONE TO INSURE THAT A LOGICAL RECORD IS PASSED BY QSAM       *
*        AND ALLOWS THE OUTPUT TO BE REBLOCKED (IF SPECIFIED).        *
*                                                                     *
*                                                                     *
*  REQUIRED JCL:                                                      *
*                                                                     *
*        <----------- STANDARD LABELED INPUT FILE ----------------->  *
*         //GDGCOPY  EXEC PGM=GDGCOPY,PARM='STD.LABELED.GDG.PREFIX'   *
*         //SYSUT2   DD DSN=OUTPUT.DSN(+1)                            *
*                                                                     *
*        <-----------    NON-LABELED INPUT FILE   ----------------->  *
*         //GDGCOPY  EXEC PGM=GDGCOPY,PARM='NON.LABELED.GDG.PREFIX'   *
*         //SYSUT1   DD DCB=????                                      *
*         //SYSUT2   DD DSN=OUTPUT.DSN(+1)                            *
*                                                                     *
*  LINKAGE EDITOR ATTRIBUTES AND CONSIDERATIONS                       *
*  ENTRY POINT: GDGCOPY (NON-RENT)                                    *
*                                                                     *
***********************************************************************
         PRINT NOGEN
         EJECT
*----------------------------------------------------------------------
*
*        INITIALIZATION AND DCB/JFCB/DSCB MERGE
*
*----------------------------------------------------------------------
GDGCOPY  $PROLOG R12              LINKAGE CONVENTIONS
ENTRY010 DS    0H
         L     R1,0(R1)           GET PARM POINTER
         LH    R2,0(R1)           GET PARM SIZE
         CH    R2,=H'0'           ANY PARM?
         BE    RETURN             NO, RETURN TO CALLER
         CH    R2,=H'35'          VALID SIZE?
         BH    RETURN             NO, RETURN TO CALLER
         LA    R3,CAMDSN(R2)      GET OFFSET TO GDG SUFFIX
         MVC   0(3,R3),=C'(0)'    START WITH CURRENT GENERATION
         ST    R3,GDGADDR         SAVE ADDRESS OF GENERATION LEVEL
         BCTR  R2,0               DECREMENT FOR EXECUTE
         EX    R2,PARMMOVE        MOVE DSNAME TO CAMLIST
         L     R1,16              GET CVT POINTER
         L     R1,0(R1)           OLD/NEW TCB POINTER
         L     R1,4(R1)           OUR TCB POINTER
         L     R1,12(R1)          OUR TIOT POINTER
         LA    R1,24(R1)          ADDRESS OF 1ST DD ENTRY
         SR    R15,R15            CLEAR FOR ICM
AAA010   ICM   R15,1,0(R1)        GET SIZE OF ENTRY
         BZ    ENTRY020           NOT FOUND, CONTINUE
         CLC   4(8,R1),=CL8'SYSUT1' IS THIS SYSUT1 DD NAME?
         BE    BBB010             FOUND, OPEN DUMMY FILE
         AR    R1,R15             BUMP TO NEXT DD ENTRY
         B     AAA010             CHECK NEXT ENTRY
*        OPEN TO ALLOW NORMAL MERGE (RDJFCB ONLY GETS JCL INFO)
*        NOTE: SYSUT1 IS ONLY NEEDED IF INPUT IS NL
BBB010   OI    FLAG,UT1           INDICATE SYSUT1 WAS FOUND
         OPEN  (SYSUT1,(INPUT))   OPEN DUMMY INPUT FILE TO FILL DCB
         LA    R6,SYSUT1          ADDRESSABILITY TO DCB
         USING IHADCB,R6          INFORM ASSEMBLER
         TM    DCBOFLGS,DCBOFOPN  WAS THE SYSUT1 CARD PROVIDED
         BZ    ENTRY020           NO, SKIP THE MERGE
         LH    R3,DCBBLKSI        GET BLKSIZE
         LH    R4,DCBLRECL        GET LRECL
         IC    R5,DCBRECFM        GET RECFM
         CLOSE (SYSUT1)           CLOSE THE DUMMY INPUT FILE
         STH   R3,DCBBLKSI        SET BLKSIZE
         STH   R4,DCBLRECL        SET LRECL
         STC   R5,DCBRECFM        SET RECFM
         B     ENTRY020           BRANCH AROUND
PARMMOVE MVC   CAMDSN(0),2(R1)    MOVE DSNAME TO LIST
         EJECT
*----------------------------------------------------------------------
*
*        FIND THE OLDEST GENERATION DATASET NAME VIA THE CATALOG
*
*----------------------------------------------------------------------
ENTRY020 DS    0H
         LOCATE CAMLIST           IS THIS THERE A '0' GENERATION
         LTR   R15,R15            ZERO RETURN CODE ?
         BNZ   RETURN             NO - END OF THE LINE
AAA020   AP    GDG#,=P'1'         ADD 1 TO RELATIVE GENERATION NUMBER
         BAL   R14,ENTRY900       CONVERT GDG#
         LOCATE CAMLIST           LOOK FOR OLDEST GENERATION
         LTR   R15,R15            ZERO RETURN CODE ?
         BZ    AAA020             YES, CHECK FOR NEXT
         SP    GDG#,=P'1'         BUMP BACK TO PREVIOUS GDG#
         BAL   R14,ENTRY900       CONVERT GDG#
         LOCATE CAMLIST           CONVERT GDG NUMBER
         LTR   R15,R15            ZERO RETURN CODE ?
         BZ    BBB020             YES, CONTINUE
         ABEND 0,DUMP             SHOULD NOT OCCUR
BBB020   TM    FLAG,UT1           SHOULD WE DE-ALLOCATE SYSUT1
         BZ    CCC020             NO, CONTINUE
         BAL   R14,ENTRY920       DEALLOCATE THE DUMMY FILE
CCC020   OPEN  (SYSUT2,(OUTPUT))  OPEN OUTPUT FILE
EXIT020  EQU   *
         EJECT
*----------------------------------------------------------------------
*
*        COPY THE GDG TO THE OUTPUT FILE
*
*----------------------------------------------------------------------
ENTRY030 DS    0H
         BAL   R14,ENTRY910       ALLOC THE INPUT GDG
         MVC   STATUS+26(44),CAMDSN MODIFY WRITE TO PROGRAMMER
STATUS   WTO   'GDGCOPY  - ACTIVE=                                     X
                      ',ROUTCDE=11 INFORM USER GENERATIONS COPIED
         OPEN  SYSUT1             OPEN THE INPUT GDG
AAA030   EQU   *
         GET   SYSUT1             GET A RECORD
         ST    R1,SAVE14          SAVE FOR DEBUGGING 002 ABENDS
         LR    R0,R1              POINT TO RECORD FOR PUT
         PUT   SYSUT2,(0)         WRITE RECORD
         B     AAA030             GET NEXT RECORD
BBB030   EQU   *
         CLOSE SYSUT1             CLOSE THE INPUT DATA SET
         BAL   R14,ENTRY920       DE-ALLOCATE THE GDG
         B     ENTRY040           SKIP OVER OPEN EXIT CODE
         SPACE 3
CCC030   LA    R6,SYSUT1          GET ADDRESS OF INPUT DCB
         TM    DCBRECFM,DCBRECF   CHECK FOR FIXED LENGTH
         BOR   R14                YES, IGNORE IT
         TM    DCBRECFM,DCBRECV   CHECK FOR VARIABLE LENGTH
         BZR   R14                NO, IGNORE IT
         TM    DCBRECFM,DCBRECSB  CHECK FOR SPANNED RECORDS
         BZR   R14                NO, IGNORE IT
         OI    DCBBFALN,DCBBFTA   OVER-RIDE TO BFTEK=A
         BR    R14                RETURN TO OPEN
*----------------------------------------------------------------------
*
*        UPDATE TO THE NEXT GENERATION IF ANY
*
*----------------------------------------------------------------------
ENTRY040 DS    0H
         CP    GDG#,=P'0'         DID WE JUST PROCESS GDG(0)?
         BE    EOJ                YES, ALL DONE
         SP    GDG#,=P'1'         NO, DECREMENT TO NEXT GENERATION
         BAL   R14,ENTRY900       CONVERT GDG#
         LOCATE CAMLIST           CONVERT NAME FOR DYNALLOC
         LTR   R15,R15            ZERO RETURN CODE ?
         BZ    ENTRY030           YES, CONTINUE
         ABEND 0,DUMP             SHOULD NOT OCCUR
         SPACE 3
*----------------------------------------------------------------------
*
*        CONVERT THE GDG NUMBER FOR ALLOCATE/LOCATE
*
*----------------------------------------------------------------------
ENTRY900 DS    0H
         L     R15,GDGADDR        GET MOVE TO ADDRESS
         MVC   0(9,R15),=CL9' '   CLEAR POSSIBLE REDUNDANT GDG#
         UNPK  1(3,R15),GDG#      UNPACK TO CAMLIST
         OI    3(R15),X'F0'       CHANGE SIGN
         MVI   1(R15),C'-'        NEGATIVE GDG NUMBER
         MVI   0(R15),C'('        MOVE LEFT PAREN
         MVC   4(2,R15),=CL25') ' MOVE RIGHT PAREN AND BLANK
         BR    R14                RETURN
         EJECT
*----------------------------------------------------------------------
*
*        ALLOCATE THE GENERATION DATA SET
*
*----------------------------------------------------------------------
ENTRY910 DS    0H
         ST    R14,SAVE14         SAVE CALLED FROM ADDRESS
         LA    R11,DAWORK         ADDRESS OF REQUEST BLOCK
         USING S99RBP,R11         REQ BLK POINTER DSECT
         LA    R10,S99RBP+4       ADDRESSABILITY OF RB DSECT
         USING S99RB,R10          RB DSECT
         ST    R10,S99RBPTR       MAKE RBPTR POINT TO RB
         OI    S99RBPTR,S99RBPND  TURN ON HOB IN RBPTR
         XC    S99RB(RBLEN),S99RB  CLEAR RB
         MVI   S99RBLN,RBLEN      PUT LEN IN ITS LENGTH FIELD
         MVI   S99VERB,S99VRBAL   SET VERB CODE TO ALLOCATE
* SET BITS FOR "WAIT FOR DEVICES" & "WAIT FOR VOLUMES"
         LA    R9,S99RB+RBLEN     POINT BEYOND RB (1ST TEXT PTR)
         USING S99TUPL,R9         ADDRESSABILITY OF TEXT UNIT POINTERS
         ST    R9,S99TXTPP        INIT TEXT PTR IN RB
         LA    R8,S99TUPL+16      POINT BEYOND LAST TXT PTR
*                                 (ROOM FOR 4 TEXT UNITS)
         USING S99TUNIT,R8        ADDRESSABILITY OF TEXT UNITS
* DDNAME
         ST    R8,S99TUPTR        1ST PTR TO 1ST UNIT
         LA    R1,DALDDNAM        KEY FOR DDNAME
         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'6'     MOVE 6 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(6),=C'SYSUT1'  DDNAME
         LA    R8,12(R8)          BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
* DISP
         ST    R8,S99TUPTR        2ND PTR TO 2ND UNIT
         LA    R1,DALSTATS        KEY FOR DSN STATUS
         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'1'     MOVE 1 TO TXT UNIT LNGTH FLD
         MVI   S99TUPAR,X'08'     INDICATE SHR DATA SET
         LA    R8,9(R8)           BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
* DATA SET NAME
         ST    R8,S99TUPTR        3RD PTR TO 3RD UNIT
         OI    S99TUPTR,S99TUPLN  TURN ON HOB TO INIDICATE LAST PTR
         LA    R1,DALDSNAM        KEY FOR DSNAME
         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'44'    MOVE 44 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(44),CAMDSN  DSNAME
RETRY    DS    0H
         LR    R1,R11             ADDR OF REQUEST BLOCK
         DYNALLOC
         ST    R15,RC             SAVE RETURN CODE
         LTR   R15,R15            RETURN CODE ZERO ?
         BNZ   ERROR1             NO - DECODE ERROR
         L     R14,SAVE14         GET CALLED FROM ADDRESS
         BR    R14
         EJECT
*----------------------------------------------------------------------
*
*     DE-ALLOCATE THE GENERATION DATA SET
*
*----------------------------------------------------------------------
ENTRY920 DS    0H
         ST    R14,SAVE14         SAVE CALLED FROM ADDRESS
         LA    R11,DAWORK         ADDRESS OF REQUEST BLOCK
         USING S99RBP,R11         REQ BLK POINTER DSECT
         LA    R10,S99RBP+4       ADDRESSABILITY OF RB DSECT
         USING S99RB,R10          RB DSECT
         ST    R10,S99RBPTR       MAKE RBPTR POINT TO RB
         OI    S99RBPTR,S99RBPND  TURN ON HOB IN RBPTR
         XC    S99RB(RBLEN),S99RB  CLEAR RB
         MVI   S99RBLN,RBLEN      PUT LEN IN ITS LENGTH FIELD
         MVI   S99VERB,S99VRBUN   SET VERB CODE TO UN-ALLOCATE
         LA    R9,S99RB+RBLEN     POINT BEYOND RB (1ST TEXT PTR)
         USING S99TUPL,R9         ADDRESSABILITY OF TEXT UNIT POINTERS
         ST    R9,S99TXTPP        INIT TEXT PTR IN RB
         LA    R8,S99TUPL+16      POINT BEYOND LAST TXT PTR
*                                 (ROOM FOR 4 TEXT UNITS)
         USING S99TUNIT,R8        ADDRESSABILITY OF TEXT UNITS
* DDNAME
         ST    R8,S99TUPTR        1ST PTR TO 1ST UNIT
         LA    R1,DALDDNAM        KEY FOR DDNAME
         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'1'     MOVE 1 TO TXT UNIT NUMBR FLD
         MVC   S99TULNG,=H'6'     MOVE 6 TO TXT UNIT LNGTH FLD
         MVC   S99TUPAR(6),=C'SYSUT1'  DDNAME
         LA    R8,12(R8)          BUMP TO NEXT TXT UNIT
         LA    R9,4(R9)           BUMP TO NEXT TXT UNIT PTR
* IN-USE ATTRIBUTE
         ST    R8,S99TUPTR        2ND PTR TO 2ND UNIT
         OI    S99TUPTR,S99TUPLN  TURN ON HOB TO INIDICATE LAST PTR
         LA    R1,DUNUNALC        KEY FOR UNALLOC IF IN-USE
         STH   R1,S99TUKEY        PUT IN TEXT UNIT KEY FIELD
         MVC   S99TUNUM,=H'0'     MOVE 0 TO TXT UNIT NUMBR FLD
         LR    R1,R11             ADDR OF REQUEST BLOCK
         DYNALLOC
         ST    R15,RC             SAVE RETURN CODE
         LTR   R15,R15            RETURN CODE ZERO ?
         BNZ   ERROR1             NO - DECODE ERROR
         L     R14,SAVE14         GET CALLED FROM ADDRESS
         BR    R14
         EJECT
*----------------------------------------------------------------------
*
*        END OF JOB
*
*----------------------------------------------------------------------
EOJ      XC    RC,RC              CLEAR RETCODE
         CLOSE (SYSUT2)           CLOSE OUTPUT FILE
         WTO   'GDGCOPY  - NORMAL COMPLETION',ROUTCDE=11
RETURN   L     R15,RC             PICK UP RETURN CODE
         $EPILOG
         SPACE 3
*----------------------------------------------------------------------
*
*        ERROR ROUTINES
*
*----------------------------------------------------------------------
ERROR1   DS    0H
         L     R1,RC              PICK UP RETURN CODE
         CVD   R1,DBWRD
         UNPK  MSG1+9(3),DBWRD+6(2)        RETURN CODE
         OI    MSG1+11,X'F0'
         UNPK  MSG1+15(5),S99ERROR(3)      DYNAMIC ERROR CODE
         MVI   MSG1+19,X'40'
         UNPK  MSG1+29(5),S99INFO(3)      DYNAMIC INFO CODE
         MVI   MSG1+33,X'40'
MSG1     WTO   ' XXX - XXXXX ERROR - XXXXX INFO (DYNAMIC ALLOC ERROR)',X
               ROUTCDE=11
         CLC   MSG1+9(10),=CL10'004 - 0214' NO DEVICES AVAILABLE?
         BE    SLEEP                    YES, WAIT A MINUTE
         CLC   MSG1+9(10),=CL10'004 - 0484' NO DEVICES AVAILABLE?
         BNE   ABEND1                   NO, ABEND
SLEEP    DS    0H
         STIMER WAIT,DINTVL=WAITTIME    WAIT A WHILE
         XC    RC,RC                    RESET D/A RETURN CODE
         XC    S99ERROR,S99ERROR        RESET D/A ERROR CODE
         XC    S99INFO,S99INFO          RESET D/A INFO CODE
         B     RETRY                    AND RETRY THE REQUEST
ABEND1   DS    0H
         ABEND 1,DUMP
DBWRD    DC    D'0'
         EJECT
*----------------------------------------------------------------------
*
*        CAMLIST FOR LOCATING EACH GDG
*
*----------------------------------------------------------------------
CAMLIST  CAMLST NAME,CAMDSN,,CAMWORK
CAMDSN   DC    CL44' '
CAMWORK  DS    0D
         DC    265C' '
*----------------------------------------------------------------------
*
*        STORAGE AREAS
*
*----------------------------------------------------------------------
GDGADDR  DC    F'0'               ADDRESS OF '(NNN)' FIELD
RC       DC    F'16'              RETURN CODE (PRIMED FOR ERROR)
SAVE14   DC    F'0'               REG 14 SAVE AREA
EXLST    DC    X'85',AL3(CCC030)  OPEN LIST FOR SYSUT1
GDG#     DC    PL2'0'             CURRENT GDG NUMBER
FLAG     DC    X'00'              OPTIONS SWITCHES
UT1      EQU   X'01'              SYSUT1 WAS FOUND IN TIOT
WAITTIME DC    C'00010000'        WAIT TIME FOR DYNALLOC
         LTORG
SYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GL,EODAD=BBB030,           X
               EXLST=EXLST
SYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM
DAWORK   DC    XL256'00'
         DCBD  DSORG=QS
         IEFZB4D0
         IEFZB4D2
RBLEN    EQU   (S99RBEND-S99RB)
         END
