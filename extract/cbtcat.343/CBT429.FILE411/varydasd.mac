VARYDASD TITLE 'VARY DASD OFFLINE DEPENDING ON VOLSER'
*-------------------------------------------------------------------*
* Name            : VARYDASD
*
* Function        : This program will vary DASD volumes OFFLINE by
*                   checking to see if the volser matches a list
*                   supplied by the SYSIN DD card. If no match, the
*                   program uses IEEVARYD to vary the devices
*                   offline.
*
*                   The list supplied by the SYSIN DD can contain a
*                   placeholder '%' to indicate any character.
*
*                   The volser mask must be placed in the columns
*                   1-6 in the SYSIN dataset.
*
*                   System symbols are supported - they must be
*                   6 characters long and specified WITHOUT the
*                   trailing dot.
*
*                   Comments are indicated by any of the following :
*                   (a) Blank in column 1
*                   (b) Asterix in column 1
*                   (c) '/*' in columns 1-2
*
*                   The program can be run in two modes supplied as
*                   a parameter to the program :
*
*                   (1) TYPE=CHECK
*                       The program issues a WTO indicating the
*                       ONLINE/OFFLINE status for each device against
*                       the supplied SYSIN cards. No action is taken
*                       against any unit.
*                       This mode allows the user to verify the SYSIN
*                       cards. This is the default h
*                   (2) TYPE=APPLY
*                       The program will vary required devices OFFLINE.
*
*                   The program can also issue WTO messages depending
*                   on a paramter passed to the program :
*
*                   (1) WTO=NONE
*                       No WTOs indicating device status are issued
*                       by this program.
*                   (2) WTO=ONLINE
*                       A WTO is issued for each device that is to
*                       remain ONLINE.
*                   (3) WTO=OFFLINE
*                       A WTO is issued for each device that is to
*                       be varied OFFLINE.
*                   (4) WTO=BOTH
*                       A WTO is issued for each device that is to
*                       be varied OFFLINE and also for devices that
*                       remain ONLINE. This is the default
*
* Example JCL  :
*
* //VARY     EXEC PGM=VARYDASD,PARM='TYPE=CHECK,WTO=ONLINE'
* //STEPLIB  DD   DISP=SHR,DSN=some.apf.dataset
* //SYSIN    DD   *
* D2%%%%
* MVS2%%
* JES2%%
* CAT2%%
* &SYSR1
* &SYSR2
* /*
*
*
* IBM Macros Used : MODID, STORAGE, UCBSCAN, IEEVARYD, WTO, ABEND,
*                   OPEN, GET, CLOSE, UCBDEVN, MODESET, LINK,
*                   DCB, CVT, IEFUCBOB, IEEZB833, ASASYMBP
*
* Attributes      : Amode(31)
*                   Rmode(24)
*                   NORENT
*                   NOREUS
*                   NOREFR
*                   AC(1)
*
* Register Usage  :
*
* R1  - Used in STATUS routine
* R2  - work
* R3  - Device array for IEEVARYD
* R4  - UCB
* R5  - Used in STATUS routine
* R6  - Table of volser masks (float)
* R7  - Work
* R8  - Table of volser masks (start)
* R9  - Number of volser masks
* R10 - Branch and Link
* R11 - Device count
* R12 - Base reg
* R13 - Workarea
* R14 - Used in STATUS Routine
*
* ABEND Codes :
* U101  = Invalid length on paramter (must be <= 22)
*
*
*-------------------------------------------------------------------*
* Changes
* 27/10/1999  Rob Scott  Code Written                            V1.0
* 07/12/1999  Rob Scott  Added support for System Symbols        V1.1
*-------------------------------------------------------------------*
*
*-------------------------------------------------------------------*
* Copyright : Scott Enterprise Consultancy Ltd
*-------------------------------------------------------------------*
VARYDASD CSECT
VARYDASD AMODE 31
VARYDASD RMODE 24
         BAKR  R14,R0                 linkage stack
         LAE   R12,0(R15,0)           set R12 as base
         USING VARYDASD,R12           address it
         MODID ,                      eyecatcher
         LR    R2,R1                  copy any parms passed
GETWORK  EQU   *
*--------------------------------------------------------------------*
* Get some workarea storage and init to zeros.
*--------------------------------------------------------------------*
         STORAGE OBTAIN,              get the workarea storage         X
               LENGTH=WORKLEN,        this much                        X
               ADDR=(R13),            address in r13                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               LOC=BELOW,             below the line                   X
               COND=NO                unconditional
         USING WORKAREA,R13           address workarea
         LR    R14,R13                Copy workarea address
         L     R15,=A(WORKLEN)        Get length of workarea
         XR    R0,R0                  Clear
         XR    R1,R1                  Clear
         MVCL  R14,R0                 Init to zeros
         MVC   4(4,R13),=C'F1SA'      set label in savearea
*--------------------------------------------------------------------*
* Set runtype defaults :
* TYPE=CHECK,WTO=ALL
*--------------------------------------------------------------------*
         OI    RUNTYPE,RUNCHECK+RUNWTOON+RUNWTOOF
GETARRAY EQU   *
*--------------------------------------------------------------------*
* Get some storage for the IEEVARYD service
*--------------------------------------------------------------------*
         STORAGE OBTAIN,              get the storage                  X
               LENGTH=DISK65K,        enough for 65K disks             X
               ADDR=(R3),             address in r3                    X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               LOC=ANY,               above the line                   X
               COND=NO                unconditional
         USING WORKAREA,R13           address workarea
         LR    R14,R3                 Copy workarea address
         L     R15,=A(DISK65K)        Get length of workarea
         XR    R0,R0                  Clear
         XR    R1,R1                  Clear
         MVCL  R14,R0                 Init to zeros
         XR    R11,R11                Zero device count
         ST    R3,DEVARRAY            Store start address
GETPARMS EQU   *
         LTR   R2,R2                  Any parms ?
         BZ    GETVTABL               No - leave as default
         ICM   R2,B'1111',0(R2)       Any parms ?
         BZ    GETVTABL               No - leave as default
         XR    R1,R1                  Clear
         ICM   R1,B'0011',0(R2)       Get length of parms
         C     R1,=F'22'              Correct length ?
         BNH   GOODPARM               Yes - OK
         WTO   'VARYDASD - INCORRECT PARAMETER LENGTH'
         ABEND 101,DUMP
GOODPARM EQU   *
         LR    R15,R1                 copy parm length
         BCTR  R15,R0                 -1 for execute
         EX    R15,PARMCOPY           Copy the parms in
         LA    R2,COPYPARM            Point to the parms
PARMLOOP EQU   *
         CLC   0(10,R2),=CL10'TYPE=APPLY'
         BE    SETAPPLY               Set TYPE=APPLY flag
         CLC   0(10,R2),=CL10'TYPE=CHECK'
         BE    SETCHECK               Set TYPE=CHECK flag
         CLC   0(8,R2),=CL10'WTO=BOTH'
         BE    SETBOTH                Set WTO=BOTH flag
         CLC   0(8,R2),=CL10'WTO=NONE'
         BE    SETNONE                Set WTO=NONE flag
         CLC   0(10,R2),=CL10'WTO=ONLINE'
         BE    SETON                  Set WTO=ONLINE flag
         CLC   0(11,R2),=CL11'WTO=OFFLINE'
         BE    SETOFF                 Set WTO=OFFLINE flag
NEXTPARM EQU   *
         LA    R2,1(R2)               Shuffle down parms
         BCT   R1,PARMLOOP            Loop for all
         B     GETVTABL               and carry on
SETAPPLY NI    RUNTYPE,255-RUNCHECK   Reset flag
         OI    RUNTYPE,RUNAPPLY       Set flag
         B     NEXTPARM               and get next char
SETCHECK NI    RUNTYPE,255-RUNAPPLY   Reset flag
         OI    RUNTYPE,RUNCHECK       Set flag
         B     NEXTPARM               and get next char
SETBOTH  OI    RUNTYPE,RUNWTOON       Set flag
         OI    RUNTYPE,RUNWTOOF       Set flag
         B     NEXTPARM               and get next char
SETNONE  NI    RUNTYPE,255-RUNWTOON   Reset flag
         NI    RUNTYPE,255-RUNWTOOF   Reset flag
         B     NEXTPARM               and get next char
SETON    NI    RUNTYPE,255-RUNWTOOF   Reset flag
         OI    RUNTYPE,RUNWTOON       Set flag
         B     NEXTPARM               and get next char
SETOFF   NI    RUNTYPE,255-RUNWTOON   Reset flag
         OI    RUNTYPE,RUNWTOOF       Set flag
         B     NEXTPARM               and get next char
GETVTABL EQU   *
*--------------------------------------------------------------------*
* Get some storage to hold the volume serials from SYSIN.
*--------------------------------------------------------------------*
         STORAGE OBTAIN,              get the workarea storage         X
               LENGTH=10000*6,        room for 10000 volsers           X
               ADDR=(R8),             address in r8                    X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               LOC=BELOW,             above the line                   X
               COND=NO                unconditional
         XR    R9,R9                  init count
         LR    R6,R8                  copy start address
*--------------------------------------------------------------------*
* Now open and read in the SYSIN cards
* The volser should be specified in columns 1 to 6.
* Comments are indicated by either :
* (a) A Space in column 1
* (b) An asterix in column 1
* (c) A '/*' in column 1 and 2
*--------------------------------------------------------------------*
         OPEN  (SYSIN,(INPUT))        open the sysin cards
READCARD EQU   *
         GET   SYSIN,INREC            Get the record
         CLI   INREC,C' '             Space ?
         BE    READCARD               Yes - ignore
         CLI   INREC,C'*'             Comment ?
         BE    READCARD               Yes - ignore
         CLC   INREC(2),=CL2'/*'      Comment ?
         BE    READCARD               Yes - ignore
         MVC   TEMPVALU(6),INREC      No - copy the value
*--------------------------------------------------------------------*
* We now check to see if a System Symbol has been specified. If so
* we call ASASYMBM to translate it for us and then place it in
* the table.
*--------------------------------------------------------------------*
         CLI   INREC,X'50'            Is it a symbol ?
         BNE   GOODCARD               No carry on
         LA    R7,PARMSYMB            Point to ASASYMBM parms
         USING SYMBP,R7               Address it
         XC    PARMSYMB(SYMBP_LEN),PARMSYMB
         MVC   TEMPSYMB(6),INREC      Copy the symbol
         MVI   TEMPSYMB+6,C'.'        add a dot
         LA    R1,TEMPSYMB            Point to the symbol
         ST    R1,SYMBPPATTERN@       Store in parm list
         LA    R1,7                   Set length of input
         ST    R1,SYMBPPATTERNLENGTH  Store in parm list
         LA    R1,TEMPVALU            Point to the answer area
         ST    R1,SYMBPTARGET@        Store in parm list
         LA    R1,F6                  Set length of input
         ST    R1,SYMBPTARGETLENGTH@  Store in parmlist
         LA    R1,TEMPRC              Point to rc
         ST    R1,SYMBPRETURNCODE@    Store in parmlist
         LINK  EP=ASASYMBM,MF=(E,PARMSYMB)
         CLC   TEMPRC(4),=F'0'        did we xlate the symbol ?
         BE    GOODCARD               yes - carry on
         MVC   BADSYM+53(6),TEMPSYMB
BADSYM   WTO   'VARYDASD - ERROR TRANSLATING SYSTEM SYMBOL : xxxxxx'
         B     READCARD
GOODCARD EQU   *
*--------------------------------------------------------------------*
* This is NOT a comment card, copy the six chars into the table of
* volume masks and increment count (R9) and current pointer (R6)
*--------------------------------------------------------------------*
         MVC   0(6,R6),TEMPVALU       Copy in the mask
         LA    R9,1(R9)               Add to count
         LA    R6,6(R6)               Point to next volser
         C     R9,=F'10000'           Maximum number ?
         BL    READCARD               no - get next record
ENDSYSIN EQU   *
         CLOSE (SYSIN)                Close the SYSIN dataset
         LR    R6,R8                  Put back to start
*
DASDINIT EQU   *
*--------------------------------------------------------------------*
* Now we set up the UCBSCAN loop to shuffle thru the DASD devices and
* compare the volser to all of the supplied masks.
*--------------------------------------------------------------------*
         LA    R4,UCBAREA             Point to copy of UCB
         USING UCBCMSEG,R4            address it
         XC    WORKUCB,WORKUCB        Clear UCB workarea
DASDSCAN EQU   *
         UCBSCAN COPY,                Perform UCBSCAN                  X
               WORKAREA=WORKUCB,      Use this workarea                X
               UCBAREA=UCBAREA,       Copy UCB here                    X
               CMXTAREA=CMXTAREA,     UCB Common extension             X
               DEVCLASS=DASD,         Only find DASD                   X
               DEVN=0,                Start at beginning               X
               RANGE=ALL,             Include 4-digit devices          X
               DYNAMIC=YES            and dynamic UCBs
         LR    R7,R15                 COPY RETURN CODE
         C     R7,=F'4'               CHECK RC
         BH    DASDSCAN               If RC > 4 ignore
         BE    DASDFINI               If RC = 4 then finished
         TM    UCBSTAT,UCBONLI        Is it Online ?
         BNO   DASDSCAN               No - get next
*--------------------------------------------------------------------*
* We copy the volser to field VOLSER and translate the hex unit
* address to EBCDIC field UNITADDR
* Once this is done, we call the STATUS routine to determine if the
* volume should be varied ONLINE or OFFLINE.
*--------------------------------------------------------------------*
         MVC   VOLSER(6),UCBVOLI      Copy the Volser
         UCBDEVN DEVN=UNITADDR        Get the unit address
         BAL   R10,STATUS             Check the status
         LTR   R15,R15                Does volume stay online ?
         BZ    ONLINE                 Yes - tell ops
OFFLINE  EQU   *
         TM    RUNTYPE,RUNWTOOF       Issue OFFLINE WTO ?
         BNO   BYPWTOOF               No - bypass it
         MVC   VARYOFFT+16(4),UNITADDR Copy CUA to MSG
         MVC   VARYOFFT+28(6),VOLSER   Copy volser to MSG
         WTO   TEXT=VARYOFF           Issue WTO
BYPWTOOF EQU   *
         MVC   0(2,R3),UCBCHAN        Copy UCB address (binary)
         LA    R11,1(R11)             Add one to device count
         LA    R3,4(R3)               Point to next
         B     DASDSCAN               and get next UCB
ONLINE   EQU   *
         TM    RUNTYPE,RUNWTOON       Issue ONLINE WTO ?
         BNO   DASDSCAN               No - bypass it
         MVC   KEEPONT+16(4),UNITADDR Copy CUA to MSG
         MVC   KEEPONT+28(6),VOLSER   Copy volser to MSG
         MVC   KEEPONT+43(6),MATCHED  Copy pattern to MSG
         WTO   TEXT=KEEPON            No - just issue WTO
         B     DASDSCAN               and get next UCB
DASDFINI EQU   *
*--------------------------------------------------------------------*
* We have finished looping thru the UCBs. If we are running
* TYPE=APPLY, we issue the IEEVARYD service to vary the devices
* offline.
*--------------------------------------------------------------------*
         TM    RUNTYPE,RUNAPPLY       Do the varies ?
         BNO   FINISHED               No
         LTR   R11,R11                Any devices to vary ?
         BZ    FINISHED               no - exit
         ST    R11,NUMDEVS            Store number of devices
         MVC   CALLERID(8),=CL8'VARYDASD'
         LA    R2,DEVINPUT            Point to IEEVARYD input
         USING VDEV,R2                Address it
         MVC   VDEV_ID(4),=CL4'VDEV'  Init fields
         MVI   VDEV_VERSION,VDEV_VERN
         OI    VDEV_KEYWORDS1,VDEV_OFFLINE
         L     R3,DEVARRAY            Point to start
         MODESET MODE=SUP,KEY=ZERO
         IEEVARYD OPERATION=DEVINPUT, Operation is VARY OFFLINE        x
               DEVICES=(R3),          List of devices                  x
               NUMDEVS=NUMDEVS,       Number of devices                x
               CALLERID=CALLERID,     Plug in VARYDASD as caller       x
               RETCODE=RETCODE,       Store RC and RSN code            x
               RSNCODE=RSNCODE
         MODESET MODE=PROB,KEY=NZERO
         STORAGE RELEASE,             release storage                  X
               LENGTH=DISK65K,        this much                        X
               ADDR=(R3),             address in R3                    X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               COND=NO                unconditional
FINISHED EQU   *
         STORAGE RELEASE,             release workarea storage         X
               LENGTH=WORKLEN,        this much                        X
               ADDR=(R13),            address in R13                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               COND=NO                unconditional
         XR    R15,R15                set rc to zero
         PR                           return
*
STATUS   EQU   *
*--------------------------------------------------------------------*
* Determine if volume is in list to be ONLINE or OFFLINE
*
* Regs and fields on input :
*   R9 = Number of volser masks (patterns)
*   R8 = Starting address of volser mask table
*   VOLSER = Six char actual volume serial of DASD in question
*
* Regs used during processing
*   R0 = Branch and count within volser mask (up to six)
*   R1 = Pointer to character within pattern
*   R5 = Pointer to character within volser
*   R6 = Pointer to current mask
*   R14= Branch and count (number of masks)
*--------------------------------------------------------------------*
         LR    R14,R9                 Copy number of patterns
         LR    R6,R8                  Point to start of table
PATNLOOP EQU   *
*--------------------------------------------------------------------*
* This loop processes each volser mask within the table
*--------------------------------------------------------------------*
         LR    R1,R6                  point to 1st char in pattern
         LA    R0,6                   Set loop count
         LA    R5,VOLSER              Point to the 1st char in volser
CHARLOOP EQU   *
*--------------------------------------------------------------------*
* This loop processes each character within the volser and the mask
*--------------------------------------------------------------------*
         CLI   0(R1),C'%'             Placeholder ?
         BE    NEXTCHAR               Yes - assume match
         CLC   0(1,R5),0(R1)          Matched char ?
         BE    NEXTCHAR               Yes
         B     NEXTPATN               No - try next pattern
NEXTCHAR EQU   *
         LA    R1,1(R1)               Move along the pattern
         LA    R5,1(R5)               Move along the volser
         BCT   R0,CHARLOOP            Loop for 6 chars
         MVC   MATCHED(6),0(R6)       Copy the pattern
         B     STATON                 If we get here - volser ONLINE
NEXTPATN EQU   *
         LA    R6,6(R6)               Point to next pattern
         BCT   R14,PATNLOOP           Loop thru all patterns
STATOFF  EQU   *
         LA    R15,8                  Set RC=4
         BR    R10                    Return
STATON   EQU   *
         XR    R15,R15                Zero RC
         BR    R10                    Return
*
*-------------------------------------------------------------------*
* Constants, Variables and DSECTs
*-------------------------------------------------------------------*
*
PARMCOPY MVC   COPYPARM(0),2(R2)     Copy in the parms
         LTORG
         DS    0F
F6       DC    F'6'
*
DISK65K  EQU   65536*4
SYSIN    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,EODAD=ENDSYSIN
*
VARYOFF  DS    0F
         DC    H'80'
VARYOFFT DC    CL80'VARYDASD - Unit uuuu Volser=vvvvvv placed OFFLINE'
KEEPON   DS    0F
         DC    H'80'
KEEPONT  DC    CL80'VARYDASD - Unit uuuu Volser=vvvvvv Pattern=pppppp kx
               ept ONLINE'
*
WORKAREA DSECT
SAVEAREA DS    18F                    save area
INREC    DS    CL80                   SYSIN record
         DS    0D
VOLSER   DS    CL6                    Volser
MATCHED  DS    CL6                    Volser matched pattern
UNITADDR DS    CL4                    Unit address
COPYPARM DS    CL48                   Copy of parms passed
TEMPSYMB DS    CL7                    Area for system symbol
TEMPVALU DS    CL6                    Area for returned value
         DS    0F
TEMPRC   DS    F                      RC from ASASYMBM
PARMSYMB DS    CL(SYMBP_LEN)          Parmlist for ASASYMBM)
         DS    0F
RUNTYPE  DS    X                      Type of run
RUNCHECK EQU   X'80'                  Just check (Issue WTO)
RUNAPPLY EQU   X'40'                  Issue IEEVARYD
RUNWTOON EQU   X'20'                  Issue WTO for ONLINE volumes
RUNWTOOF EQU   X'10'                  Issue WTO for OFFLINE volumes
         DS    0D
UCBRC    DS    F                      Return code from UCBSCAN
UCBRSN   DS    F                      Reason code from UCBSCAN
         DS    0D
UCBAREA  DS    CL48                   area to get UCB copy
UCBPAREA DS    CL48                   area to get UCB prefix copy
CMXTAREA DS    CL32                   area to get CMXT copy
WORKUCB  DS    CL100                  UCBSCAN workarea
         DS    0F
CALLERID DS    CL8                    Caller ID for IEEVARYD
RETCODE  DS    F                      IEEVARYD return code
RSNCODE  DS    F                      IEEVARYD reason code
NUMDEVS  DS    F                      Number of devices
DEVARRAY DS    F                      Address of device array
DEVINPUT DS    CL(VDEV_LENGTH)        Length of IEEVARYD input
WORKLEN  EQU   *-WORKAREA
*
         CVT DSECT=YES,LIST=NO
         IEFUCBOB
         IEEZB833
         ASASYMBP
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
