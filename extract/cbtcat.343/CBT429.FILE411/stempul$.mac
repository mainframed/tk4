 Sharing REXX Stems Using STEMPUSH and STEMPULL
 ----------------------------------------------

 Installation of STEMPUSH and STEMPULL

 Assemble and link STEMPUSH and STEMPULL into a load library
 that is available to your TSO userid. Both modules have the
 following attributes :

        AMODE(31)
        RMODE(ANY)
        RENT
        REUS
        AC(0)

 Using STEMPUSH

 The STEMPUSH function places one or more REXX stem variables onto
 a stack that can be passed to other REXX Execs in the same address
 space.

 Syntax :

 token = STEMPUSH('MAXBLOCKS=nnnnn','Stem1.','Stem2.',...,'StemN.')

 Keywords :

     TOKEN
       The returned unique 16-byte identifier of the created stack
       that contains the REXX stem variables. If this value is
       0 then there is an error in the parameter list.

     MAXBLOCKS=nnnnn
       Optional keyword that specifies the size of the dataspace stack
       in 4K blocks. The value of nnnnn must be between 10 and 99999.
       The default value is 4000 (approx 16meg). Note that unused space
       in the dataspace stack is released after all stems have been
       placed onto the stack.

     STEM1 to STEMn
       Specifies the REXX stem variable name(s) that are to be
       placed on the stack. Each STEMNAME must be enclosed in
       quotes with the last character of the name being a dot (.).
       If multiple STEMNAME parameters are to be coded then they
       must be separated by commas.

 Example :

 token = STEMPUSH('line.','userlist.')


 Notes   :

   (a)  If not retrieved by the STEMPULL function, any stack created
        by STEMPUSH exists for the lifetime of the address space.
   (b)  If there are no actual variables that match the STEMNAME
        parameters, an empty stack is created.
   (c)  STEMPUSH cannot copy variables that are 'hidden' by REXX,
        i.e. non-EXPOSEd variables within a PROCEDURE.
   (d)  If there is not enough storage available in the dataspace
        stack, STEMPUSH will complete successfully by copying as many
        variables as it can and will indicate to STEMPULL that
        truncation has occurred (STEMPULL will issue return code 1).


 Using STEMPULL

 The STEMPULL function retrieves the REXX stem variables that exist
 on a stack that matches the specified token.

 Syntax :

 rcode = STEMPUSH(token,delflag)

 Keywords :

     RCODE
       The return code from the STEMPULL function. This can be one
       of the following values :
         0   - One or more REXX stem variables was retrieved from
               the stack.
         1   - One or more REXX stem variables was retrieved from
               the stack, but STEMPUSH has indicated that one or
               more variables could not be placed onto the stack
               because the stack is full. Re-invoke STEMPUSH with
               the MAXBLOCKS=nnnnn keyword to increase the size
               of the stack.
         2   - The specified stack is empty.
         4   - No stack found that matches the token value.
         8   - The token is either invalid or missing or there is
               an error in the delflag setting.

     TOKEN
       The returned unique 16-byte identifier of the created stack
       that contains the REXX stem variables. The value of TOKEN
       is set by the STEMPUSH function.

     DELFLAG
       An optional keyword that specifies if the dataspace stack is to
       be deleted after all of the variables have been retrieved from it
       Possible settings :

      'DELETE'   Delete the stack unconditionally after processing has
                 completed. This is the default setting.
      'NODELETE' Do not delete the stack.

 Example :

 rcode = STEMPULL(token,'NODELETE')



 Example of using STEMPUSH and STEMPULL

 In the following example, the REXX Exec 'TOON1' calls REXX Exec
 'TOON2' to add names to the 'first_name' and 'last_name' stems.

    TOON1 :
    /* REXX */
    first_name.0 = 2                      /* Init the stems         */
    first_name.1 = "Fred"
    first_name.2 = "Barney"
    last_name.0  = 2
    last_name.1  = "Flintstone"
    last_name.2  = "Rubble"
    /*--------------------------------------------------------------*/
    /* Push the stems onto the stack and get its token              */
    /*--------------------------------------------------------------*/
    token = STEMPUSH('first_name.','last_name.')
    /*--------------------------------------------------------------*/
    /* Now call TOON2 to add to the stems                           */
    /*--------------------------------------------------------------*/
    if token <> 0 then call TOON2 token
    newtoken = result                     /* Get the token returned */
    rcode = STEMPULL(newtoken)            /* Get stems passed back  */
    i = 1                                 /* Init loop count        */
    do first_name.0                       /* Print stem values      */
        say first_name.i last_name.i
        i = i + 1
        end
    exit

    TOON2 :
    /* REXX */
    /*--------------------------------------------------------------*/
    /* Add extra entries to the passed stem values                  */
    /*--------------------------------------------------------------*/
    arg token                             /* Get the token          */
    rcode = STEMPULL(token)               /* Pull the stem values   */
    first_name.0 = first_name.0 + 2       /* Add 2 extra entries    */
    last_name.0 = last_name.0 + 2
    first_name.3 = "Wilma"
    first_name.4 = "Betty"
    last_name.3  = "Flintstone"
    last_name.4  = "Rubble"
    /*--------------------------------------------------------------*/
    /* Push the stems onto a new stack as the old one has been      */
    /* deleted.                                                     */
    /*--------------------------------------------------------------*/
    newtoken = STEMPUSH('first_name.','last_name.')
    /*--------------------------------------------------------------*/
    /* Return the new token value to TOON1                          */
    /*--------------------------------------------------------------*/
    return newtoken
    exit

