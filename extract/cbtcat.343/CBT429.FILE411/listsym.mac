LISTSYM TITLE 'Gather MVS Static Symbols and Create REXX Stems'
*-------------------------------------------------------------------*
* Function        : This program provides an external REXX function
*                   to place the MVS Static Symbol names and values
*                   into REXX Stem variables.
*
*                   The following REXX Stem variables are created :
*                   (a) MVS_SYMBOL_NAME.   Static Symbol Name
*                   (b) MVS_SYMBOL_VALUE.  Static Symbol Value
*
*
* Syntax          : x = LISTSYM()
*
* Example         : /* REXX */
*
*                   x = listsym()
*                   i = 1
*                   do MVS_SYMBOL_NAME.0
*                      say MVS_SYMBOL_NAME.i MVS_SYMBOL_VALUE.i
*                      i = i + 1
*                      end
*
*
* IBM Macros Used : MODID, STORAGE, LOAD, DELETE, CVT, IHAECVT,
*                   ASASYMBP, IRXEVALB, IRXEFPL, IRXSHVB
*
* Attributes      : Amode(31)
*                   Rmode(Any)
*                   RENT
*                   REUS
*                   NOREFR
*                   AC(0)
*
* Register Usage  :
*
* R1  - Parms passed              : +0 ---> REXX EFPL
* R2  - EFPL
* R3  - EVALBLOCK
* R4  - Name buffer address
* R5  - Value buffer address
* R6  - Number of symbols (branch and count)
* R7  - SYMBTE Start address
* R8  - SYMBTE floating pointer
* R9  - SYMBT
* R10 - Branch and Link
* R11 - SHVBLOCK
* R12 - Base reg
* R13 - Workarea
*
*-------------------------------------------------------------------*
* (c) Scott Enterprise Consultancy Ltd
*-------------------------------------------------------------------*
* Changes
* 17/06/1996  Rob Scott  Code Written                            V1.0
*-------------------------------------------------------------------*
LISTSYM  CSECT
LISTSYM  AMODE 31
LISTSYM  RMODE ANY
         BAKR  R14,R0                 linkage stack
         LR    R12,R15                set R12 as base
         USING LISTSYM,R12            address it
         MODID ,                      eyecatcher
         LR    R2,R1                  copy any parms passed
GETWORK  EQU   *
*--------------------------------------------------------------------*
* Get some workarea storage and init to zeros. We also load the
* address of IRXEXCOM for later calls.
*--------------------------------------------------------------------*
         STORAGE OBTAIN,              get the workarea storage         X
               LENGTH=WORKLEN,        this much                        X
               ADDR=(R13),            address in r13                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               LOC=ANY,               above the line                   X
               COND=NO                unconditional
         USING WORKAREA,R13           address workarea
         LR    R14,R13                Copy workarea address
         L     R15,=A(WORKLEN)        Get length of workarea
         XR    R0,R0                  Clear
         XR    R1,R1                  Clear
         MVCL  R14,R0                 Init to zeros
         MVC   4(4,R13),=C'F1SA'      set label in savearea
         LOAD  EP=IRXEXCOM            Get address of IRXEXCOM
         ST    R0,AIRXEXCM            Store for later
GETPARMS EQU   *
*--------------------------------------------------------------------*
* Process the parms passed to this REXX function. This will be the
* standard REXX function parameter list.
*--------------------------------------------------------------------*
         USING EFPL,R2                address REXX function parms
         L     R3,EFPLEVAL            Get pointer to Eval_Block
         L     R3,0(R3)               REXX Eval_Block address
         USING EVALBLOCK,R3           Address it
GETSHVB  EQU   *
*--------------------------------------------------------------------*
* Create the storage for the REXX SHVB (required by IRXECCOM).
* We reserve 250 bytes for the variable name and 3K for the value
*--------------------------------------------------------------------*
         STORAGE OBTAIN,              get the SHVBLOCK storage         X
               LENGTH=4096,           this much                        X
               ADDR=(R11),            address in r11                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               LOC=ANY,               above the line                   X
               COND=NO                unconditional
         USING SHVBLOCK,R11           address SHVBLOCK
         LA    R4,SHVBLEN(R11)        Point to name buffer
         ST    R4,ASHVNAMA            Store for IRXEXCOM
         MVC   NAMALEN,=F'250'        Set length of name buffer
         LA    R5,256(R4)             Point to value buffer
         ST    R5,ASHVVALA            Store for IRXEXCOM
         MVC   VALALEN,=F'3072'       Set length of value buffer
GETSYMBT EQU   *
*-------------------------------------------------------------------*
* Chain through control blocks to find the SYMBT
*-------------------------------------------------------------------*
         L     R6,CVTPTR              Get CVT address
         USING CVTMAP,R6              address it
         L     R6,CVTECVT             Get ECVT address
         USING ECVT,R6                address it
         ICM   R9,B'1111',ECVTSYMT    Point to Symbol Table
         BZ    RETURN00               if none - exit
         USING SYMBT,R9               address it
*-------------------------------------------------------------------*
* We now have the address of the symbol table. We need to get the
* address of the first entry in the table. This will be found by
* either:
*   a) Getting the address of the SYMBTTABLEENTRIES field
* or:
*   b) Getting the address of the SYMBTTABLEENTRIES field
*   c) Getting the contents of SYMBTESYMBOLAREAADDR from the SYMBTE
*      area if the symbol table is in indirect mode.
*-------------------------------------------------------------------*
         LA    R7,SYMBTTABLEENTRIES   Point to symbol table entries
         USING SYMBTE,R7              address it
*-------------------------------------------------------------------*
* Now test if the symbol table is indirect
*-------------------------------------------------------------------*
         TM    SYMBTFLAG1,SYMBTINDIRECTSYMBOLAREA
*
         BNO   NORMSYMT               Normal symbol table
*-------------------------------------------------------------------*
* Symbol table is indirect, therefore replace address of the SYMBTE
* with the contents of SYMBTESYMBOLAREAADDR.
*-------------------------------------------------------------------*
         L     R7,SYMBTESYMBOLAREAADDR
         DROP  R7                     Drop R7 addressability to SYMBTE
NORMSYMT EQU   *
         LR    R8,R7                  Copy the SYMBTE address
         USING SYMBTE,R8              Map it using R8
*                                     Get number of active symbols
         XR    R6,R6                  Clear R6
         ICM   R6,B'0011',SYMBTNUMBEROFSYMBOLS
         BZ    RETURN00               If none - exit
*-------------------------------------------------------------------*
* Set up the 'ZERO' stem values to tell REXX how many entries we
* have on the stems.
*-------------------------------------------------------------------*
         MVC   0(17,R4),=C'MVS_SYMBOL_NAME.0'
         MVC   SHVNAML,=F'17'         Set length of name
         CVD   R6,PWORK               convert number to packed
         UNPK  UWORK,PWORK            unpack it
         OI    UWORK+3,X'F0'          remove sign
         MVC   0(4,R5),UWORK          set the value
         MVC   SHVVALL,=F'4'          set the value length
         BAL   R10,MAKEVAR            Create REXX variable
         MVC   0(18,R4),=C'MVS_SYMBOL_VALUE.0'
         MVC   SHVNAML,=F'18'         Set length of name
         MVC   0(4,R5),UWORK          set the value
         MVC   SHVVALL,=F'4'          set the value length
         BAL   R10,MAKEVAR            Create REXX variable
*
         MVC   PCNT,=PL3'1'           Set to first stem number
*
SYMTABLE EQU   *
*-------------------------------------------------------------------*
* This code will loop through all of the entries in the symbol
* table. Each entry contains a pointer to the name and value of
* a symbol. The pointers can be real addresses *or* offsets from
* the beginning of the SYMBTE table. We use R2 here to point to
* the required storage, initially it is set to the start address
* of the symbte table.
* (o) If the pointers are offsets, they are added to the contents
*     of R2. If the pointers are addresses, R2 is set
* (o) If the pointers are addresses, R2 is set to zero before the
*     add
*-------------------------------------------------------------------*
         LR    R2,R7                  Copy start address of SYMBTE
         TM    SYMBTFLAG0,SYMBTPTRSAREOFFSETS
         BO    CONTINU1               ptrs are offsets - carry on
         LA    R2,0                   ptrs are addresses - zero R2
CONTINU1 EQU   *
         MVC   0(16,R4),=C'MVS_SYMBOL_NAME.'
         MVC   SHVNAML,=F'16'         move in length of name
         BAL   R10,STEMNAME           add stem number
*-------------------------------------------------------------------*
* Now point to the name of the symbol - just add the address to
* whatever is in r2 (either '0' or start address of SYMBTE)
*-------------------------------------------------------------------*
         A     R2,SYMBTESYMBOLOFFSET  point to symbol name
         MVC   SHVVALL,SYMBTESYMBOLLENGTH
         L     R15,SYMBTESYMBOLLENGTH get length of name
         BCTR  R15,R0                 minus one for move
         EX    R15,MOVEVAL            move in the name
         BAL   R10,MAKEVAR            Create REXX Variable
         MVC   0(17,R4),=C'MVS_SYMBOL_VALUE.'
         MVC   SHVNAML,=F'17'         move in length of name
         BAL   R10,STEMNAME           add stem number
         LR    R2,R7                  copy start address of SYMBTE
         TM    SYMBTFLAG0,SYMBTPTRSAREOFFSETS
         BO    CONTINU2               ptrs are offsets - carry on
         LA    R2,0                   ptrs are addresses - zero R2
CONTINU2 EQU   *
*-------------------------------------------------------------------*
* Now point to the value of the symbol - just add the address to
* whatever is in r2 (either '0' or start address of SYMBTE)
*-------------------------------------------------------------------*
         A     R2,SYMBTESUBTEXTOFFSET  point to symbol name
         MVC   SHVVALL,SYMBTESUBTEXTLENGTH
         L     R15,SYMBTESUBTEXTLENGTH
         BCTR  R15,R0                 minus one for move
         EX    R15,MOVEVAL            move in the value
         BAL   R10,MAKEVAR            Create REXX Variable
NEXTSYM  EQU   *
         LA    R8,SYMBTE_LEN(R8)      get next entry
         AP    PCNT,=PL3'1'           add to stem count
         BCT   R6,SYMTABLE            loop back
*
RETURN00 EQU   *
*--------------------------------------------------------------------*
* Return to the user
*--------------------------------------------------------------------*
         MVC   EVALBLOCK_EVLEN(4),=F'1' Set length of result
         MVI   EVALBLOCK_EVDATA,C'0'
         BAL   R10,RELSHVB            free the SHVB area
         BAL   R10,RELWORK            free the workarea
         XR    R15,R15                set rc to zero
         PR                           return
*
*--------------------------------------------------------------------*
* General Routines
*--------------------------------------------------------------------*
*
MAKEVAR  EQU   *
*--------------------------------------------------------------------*
* Link to IRXEXCOM to create the REXX variable
*--------------------------------------------------------------------*
         LA    R1,EXCOMID             Point to IRXEXCOM id
         ST    R1,AEXCOMP1            Store in parm list
         LA    R1,ZERO                Point to fullword zero
         ST    R1,AEXCOMP2            Store in parm list
         ST    R1,AEXCOMP3            Store in parm list
         ST    R11,AEXCOMP4           Store SHVB as parm #4
         LA    R1,ZERO                Point to fullword zero
         ST    R1,AEXCOMP5            Store in parm list
         LA    R1,EXCOMRC             Point to return code
         ST    R1,AEXCOMP6            Store in parm list
         OI    AEXCOMP6,X'80'         Indicate end of list
         MVI   SHVCODE,SHVSTORE       Indicate "Set"
         MVC   SHVNAMA,ASHVNAMA       Point to name buffer
         MVC   SHVVALA,ASHVVALA       Point to value buffer
         LA    R1,EXCOMPRM            Point to the parm list
         L     R15,AIRXEXCM           Load address of routine
         BALR  R14,R15                Call it
         BR    R10
*
STEMNAME EQU   *
*-------------------------------------------------------------------*
* Routine to construct a REXX stem name from the core variable
* name plus a packed index count.
*-------------------------------------------------------------------*
         LR    R15,R4                 Point to the name
         A     R15,SHVNAML            add on length of name
         UNPK  UCNT,PCNT              unpack the count
         OI    UCNT+3,X'F0'           get rid of sign
THOUSAND EQU   *
         CLI   UCNT,C'0'              is there a zero ?
         BE    HUNDRED                yes - UCNT < 1000
         MVC   0(4,R15),UCNT          add on to name
         L     R15,SHVNAML            load up current length
         A     R15,=F'4'              add four
         ST    R15,SHVNAML            store as new length
         B     STEMDONE
HUNDRED  EQU   *
         CLI   UCNT+1,C'0'            is there a zero ?
         BE    TENS                   yes - UCNT < 100
         MVC   0(3,R15),UCNT+1        add on to name
         L     R15,SHVNAML            load up current length
         A     R15,=F'3'              add three
         ST    R15,SHVNAML            store as new length
         B     STEMDONE
TENS     EQU   *
         CLI   UCNT+2,C'0'            is there a zero ?
         BE    UNITS                  yes - UCNT < 10
         MVC   0(2,R15),UCNT+2        add on to name
         L     R15,SHVNAML            load up current length
         A     R15,=F'2'              add two
         ST    R15,SHVNAML            store as new length
         B     STEMDONE
UNITS    EQU   *
         MVC   0(1,R15),UCNT+3        add on to name
         L     R15,SHVNAML            load up current length
         LA    R15,1(R15)             add one
         ST    R15,SHVNAML            store as new length
STEMDONE EQU   *
         BR    R10
*
RELWORK  EQU   *
*--------------------------------------------------------------------*
* Release workarea storage
*--------------------------------------------------------------------*
         DELETE EP=IRXEXCOM           Delete IRXEXCOM from storage
         STORAGE RELEASE,             release workarea storage         X
               LENGTH=WORKLEN,        this much                        X
               ADDR=(R13),            address in R13                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               COND=NO                unconditional
         BR    R10                    return
*
RELSHVB  EQU   *
*--------------------------------------------------------------------*
* Release SHVB storage
*--------------------------------------------------------------------*
         STORAGE RELEASE,             release SHVB storage             X
               LENGTH=4096,           this much                        X
               ADDR=(R11),            address in R11                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               COND=NO                unconditional
         BR    R10                    return
*
*
*-------------------------------------------------------------------*
* Executed instructions
*-------------------------------------------------------------------*
MOVEVAL  MVC   0(0,R5),0(R2)
*
*-------------------------------------------------------------------*
* Constants, Variables and DSECTs
*-------------------------------------------------------------------*
*
         LTORG
EXCOMID  DC    CL8'IRXEXCOM'          IRXEXCOM ID
ZERO     DC    F'0'                   Zero fullword
*
WORKAREA DSECT
SAVEAREA DS    18F                    save area
AIRXEXCM DS    F                      address of IRXEXCOM
ASHVNAMA DS    F                      address of SHVB name buffer
ASHVVALA DS    F                      address of SHVB value buffer
NAMALEN  DS    F                      length of SHVB name buffer
VALALEN  DS    F                      length of SHVB value buffer
EXCOMRC  DS    F                      Return code from IRXEXCOM
EXCOMPRM DS    0F                     Parm list for IRXEXCOM
AEXCOMP1 DS    F                      ---> IRXEXCOM ID
AEXCOMP2 DS    F                      ---> 0
AEXCOMP3 DS    F                      ---> 0
AEXCOMP4 DS    F                      ---> SHVBLOCK
AEXCOMP5 DS    F                      ---> ENVBLOCK
AEXCOMP6 DS    F                      ---> Return Code
         DS    0F
UCNT     DS    F                      Unpack field
PCNT     DS    PL3                    packed count field
         DS    0F
UWORK    DS    F                      unpack work
PWORK    DS    D                      packed work
WORKLEN  EQU   *-WORKAREA
*
*
         IRXEFPL                      REXX External Function
         IRXEVALB                     REXX Evaluation Block
         IRXSHVB                      REXX Shared Variable Block
         CVT DSECT=YES,LIST=YES       CVT
         IHAECVT LIST=YES             ECVT
         ASASYMBP DSECT=YES,          Symbol tables                    X
               LIST=YES,                                               X
               SYMBP=NO,                                               X
               SYMBT=YES,                                              X
               SYMBTE=YES
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
