/* REXX   - Exec to show the translated text after substitution of    */
/*          MVS symbols while in EDIT or VIEW of a member.            */
/*                                                                    */
/*          This macro isn't foolproof, but gives a good impression   */
/*          of what the text may look like.                           */
/*                                                                    */
/*          Note: Uses the LISTSYM external Rexx function.            */
/*                                                                    */
/*--------------------------------------------------------------------*/
/* Changes                                                            */
/* 20/09/1996  Rob Scott  Code Written                                */
/*--------------------------------------------------------------------*/
                                            /*                        */
address ISREDIT "MACRO"                     /* declare as edit macro  */
address ISREDIT "(lines) = LINENUM .ZLAST"  /* get # of source lines  */
i = 1                                       /* stem loop count        */
lines = strip(lines,l,'0')                  /* strip zeros for stems  */
srcline.0 = lines                           /* set stem count         */
newline.0 = lines                           /* set stem count         */
                                            /*                        */
x = listsym()                               /* Get the symbols        */
                                            /*                        */
/*--------------------------------------------------------------------*/
/* First of all capture the current editted source and place it in    */
/* the srcline stem variable.                                         */
/*--------------------------------------------------------------------*/
                                            /*                        */
do while i <= lines                         /* do for all lines       */
   address ISREDIT "(linedat) = LINE "i     /* get the line contents  */
   srcline.i = substr(linedat,1,80)         /* ensure 80 chars        */
   i = i + 1                                /* get next line number   */
   end                                      /*                        */
                                            /*                        */
/*--------------------------------------------------------------------*/
/* Now examine each line in the srcline stem and see if we could have */
/* an MVS symbol ( i.e. look for an '&' ) - if not the source line    */
/* remains unchanged.                                                 */
/*--------------------------------------------------------------------*/
                                            /*                        */
i = 1                                       /* set loop count to 1    */
do while i <= srcline.0                     /* go thru all lines      */
   if index(srcline.i,'&') =0 then do       /* if not '&' then..      */
      newline.i = srcline.i                 /* ..it remains the same  */
      end                                   /*                        */
   else do                                  /* we may have a symbol.. */
      newline.i = REPLACE_SYMBOL(srcline.i) /* call routine to change */
      end                                   /*                        */
   i = i + 1                                /* get next line          */
   end                                      /*                        */
                                            /*                        */
/*--------------------------------------------------------------------*/
/* We have the translated lines held in newline. Lines that have been */
/* changed are highlited by using the MSGLINE type of edit comment    */
/* while unchanged ones are left as NOTELINEs.                        */
/*--------------------------------------------------------------------*/
i = newline.0                               /* get maximum line number*/
                                            /*                        */
do while i > 0                              /* go backwards thru line */
   if newline.i <> srcline.i then do        /* if line changed..      */
      msgline = newline.i                   /* hilite it ..           */
      address ISREDIT "LINE_AFTER  0  = MSGLINE (msgline) "
      end                                   /*                        */
   else do                                  /* if line not changed    */
      noteline = newline.i                  /* don't hilite it.       */
      address ISREDIT "LINE_AFTER  0  = NOTELINE (noteline) "
      end                                   /*                        */
   i = i - 1                                /* get next line          */
   end                                      /*                        */
exit


REPLACE_SYMBOL: procedure expose MVS_SYMBOL_NAME. MVS_SYMBOL_VALUE.
/*--------------------------------------------------------------------*/
/* Procedure to replace the text in a source line with the current    */
/* symbol values substituted (if found).                              */
/*--------------------------------------------------------------------*/
src_line = arg(1)                           /* get the passed arg     */
j = 1                                       /* point to first         */
do while j <= MVS_SYMBOL_NAME.0             /* loop for all symbols   */
/*--------------------------------------------------------------------*/
/* check to see if any of the symbols can be found in the line.       */
/* if so - replace ALL occurences and re-contruct the line.           */
/*--------------------------------------------------------------------*/
   do while index(src_line,MVS_SYMBOL_NAME.j) <> 0
      indxsym = index(src_line,MVS_SYMBOL_NAME.j)
      lensym = length(MVS_SYMBOL_NAME.j)
      new_line = substr(src_line,1,indxsym-1)××MVS_SYMBOL_VALUE.j
      new_line = new_line××substr(src_line,indxsym+lensym,80-indxsym)
      src_line = new_line
      end                                   /*                        */
   j = j + 1                                /* process next symbol    */
   end                                      /*                        */
   return src_line                          /* returned translated    */

