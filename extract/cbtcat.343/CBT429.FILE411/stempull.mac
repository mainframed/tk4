STEMPULL TITLE 'PULL REXX STEMS FROM A STACK CREATED BY STEMPUSH'
*-------------------------------------------------------------------*
* Name            : STEMPULL
*
*
* Function        : This program provides an external REXX function
*                   to retrive REXX stem variables from the stack
*                   created by the STEMPUSH function.
*
*                   The 'stack' is in fact a dataspace whose STOKEN
*                   is passed (in EBCDIC) from the STEMPUSH function.
*                   This 'token' is used by this program to access
*                   the dataspace and set up the REXX variables.
*
*                   After the stack has been processed it is deleted
*                   unless the user specifies the 'NODELETE' keyword.
*
* Syntax          : rcode = STEMPULL(token,delflag)
*
*                   where :   rcode  -  Return code :
*                                       0  - One or more stem variables
*                                            have been 'pulled' from
*                                            the stack.
*                                       1  - Stack is full - truncation
*                                            occurred in STEMPUSH
*                                       2  - Stack is empty.
*                                       4  - No stack found that
*                                            matches the 'token'.
*                                       8  - Token missing or delflag
*                                            invalid.
*
*                             token  -  The 16-byte token returned by
*                                       STEMPUSH that identifies the
*                                       stem variable 'stack'.
*
*                             delflag-  Indicator that specifies if the
*                                       dataspace is deleted after
*                                       being processed.
*                                       Possible values :
*                                       'DELETE'   - Always delete the
*                                                    dataspace. This
*                                                    is the deafult.
*                                       'NODELETE' - Do not delete the
*                                                    dataspace.
*
*
*
* Example         : /* REXX - EXEC1 */
*                   fname.0 = 2
*                   fname.1 = 'Fred'
*                   fname.2 = 'Barney'
*                   sname.0 = 2
*                   sname.1 = 'Flinstone'
*                   sname.2 = 'Rubble'
*                   token = stempush('fname.','sname.')
*                   if token <> 0 then call EXEC2 token
*                   exit
*
*                   /* REXX - EXEC2 */
*                   arg token
*                   rcode = STEMPULL(token,'NODELETE')
*                   if rcode = 0 then do
*                     say fname.1 sname.1
*                     say fname.2 sname.2
*                   end
*                   exit
*
* IBM Macros Used : MODID, STORAGE, LOAD, SYSSTATE, ALESERV, DSPSERV,
*                   DELETE, IRXEFPL, IRXENVB, IRXEVALB, IRXSHVB,
*                   IRXARGTB
*
* Attributes      : Amode(31)
*                   Rmode(Any)
*                   RENT
*                   REUS
*                   NOREFR
*                   AC(0)
*
* Register Usage  :
*
* R1  - Parms passed              : +0 ---> REXX EFPL
* R2  - EFPL
* R3  - EVALBLOCK
* R4  - ARGTABLE
* R5  - REXX Arg Pointer
* R6  - REXX Arg Length
* R7  - Branch and count
* R8  - Dataspace (RSST)
* R9  - Current pointer in dataspace
* R10 - Branch and Link
* R11 - SHVB
* R12 - Base reg
* R13 - Workarea
*
*-------------------------------------------------------------------*
* (c) Scott Enterprise Consultancy Ltd
*-------------------------------------------------------------------*
* Changes
* 17/06/1998  Rob Scott  Code Written                            V1.0
* 24/07/1998  Rob Scott  Add the code to convert the 16-byte
*                        EBCDIC token to its 8-byte equivalent.
*                        STEMPUSH now provides the DSPDTOKN in
*                        EBCDIC form rather than original hex.   V1.1
* 29/07/1998  Rob Scott  Use MVCL to copy the data from the RSST.
*                        This allows values > 256 bytes long to
*                        be retrieved from the RSST.             V1.2
* 14/08/1998  Rob Scott  Ensure AR15 is zero prior to the copy
*                        from the RSST. This prevents 0E0 abends
*                        in OS/390 2.5.                          V1.3
* 04/09/1998  Rob Scott  Handle truncation of the RSST by setting
*                        a new return code of 1 to indicate to
*                        the user that truncation has occurred.
*                        Add the 'DELETE/NODELETE' keywords to give
*                        users the ability to leave the dataspace
*                        in existance after being processed.     V1.4
*-------------------------------------------------------------------*
STEMPULL CSECT
STEMPULL AMODE 31
STEMPULL RMODE ANY
         BAKR  R14,R0                 linkage stack
         LAE   R12,0(R15,0)           set R12 as base
         USING STEMPULL,R12           address it
         MODID ,                      eyecatcher
         LR    R2,R1                  copy any parms passed
GETWORK  EQU   *
*--------------------------------------------------------------------*
* Get some workarea storage and init to zeros. We also load the
* address of IRXEXCOM for later calls.
*--------------------------------------------------------------------*
         STORAGE OBTAIN,              Get the workarea storage         X
               LENGTH=WORKLEN,        this much                        X
               ADDR=(R13),            address in r13                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               LOC=ANY,               above the line                   X
               COND=NO                unconditional
         USING WORKAREA,R13           address workarea
         LR    R14,R13                Copy workarea address
         L     R15,=A(WORKLEN)        Get length of workarea
         XR    R0,R0                  Clear
         XR    R1,R1                  Clear
         MVCL  R14,R0                 Init to zeros
         MVC   4(4,R13),=C'F1SA'      set label in savearea
         LOAD  EP=IRXEXCOM            Get address of IRXEXCOM
         ST    R0,AIRXEXCM            Store for later
GETPARMS EQU   *
*--------------------------------------------------------------------*
* Get the REXX function parameters passed.
* The 1st parameter must be the 16-byte token with an optional 2nd
* parm of 'DELETE' or 'NODELETE'
*--------------------------------------------------------------------*
         USING EFPL,R2                address REXX function parms
         L     R3,EFPLEVAL            Get pointer to Eval_Block
         L     R3,0(R3)               REXX Eval_Block address
         USING EVALBLOCK,R3           Address it
         L     R4,EFPLARG             REXX Argument table
         USING ARGTABLE_ENTRY,R4      Address it
         CLC   0(8,R4),HEXFF          No arguments passed ?
         BE    RETURN08               then error
         L     R5,ARGTABLE_ARGSTRING_PTR
         L     R6,ARGTABLE_ARGSTRING_LENGTH
         C     R6,=F'16'              Look at the length
         BNE   RETURN08               not 16 ?
         MVC   TOKEN(16),0(R5)        copy in the token
         BAL   R10,CHAR2HEX           convert to hex
         LA    R4,8(R4)               Point to next arg
         CLC   0(8,R4),HEXFF          No argument ?
         BE    GETSHVB                then use default DELETE
*--------------------------------------------------------------------*
* Process the optional 2nd parm
*--------------------------------------------------------------------*
         L     R5,ARGTABLE_ARGSTRING_PTR
         L     R6,ARGTABLE_ARGSTRING_LENGTH
         C     R6,=F'6'               Test length
         BL    RETURN08               < 6 chars = error
         C     R6,=F'8'               Test length
         BH    RETURN08               > 8 chars = error
         BCTR  R6,R0                  minus 1 for execute
         EX    R6,CONVUPPR            xlate to uppercase
         CLC   0(6,R5),=C'DELETE'     Is it DELETE ?
         BE    GETSHVB                yes - leave flag unchanged
         CLC   0(8,R5),=C'NODELETE'   Is it NODELETE ?
         BNE   RETURN08               no - error
         OI    DSPFLAG,NODELETE       Set flag to indicate
GETSHVB  EQU   *
*--------------------------------------------------------------------*
* We have the token, so now we need to get storage for the
* REXX SHVB (required by IRXEXCOM). We reserve 250 bytes for the
* variable name and 3K for the variable value.
*--------------------------------------------------------------------*
         STORAGE OBTAIN,              get the SHVBLOCK storage         X
               LENGTH=4096,           this much                        X
               ADDR=(R11),            address in r11                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               LOC=ANY,               above the line                   X
               COND=NO                unconditional
         USING SHVBLOCK,R11           address SHVBLOCK
         LA    R15,SHVBLEN(R11)       Point to name buffer
         ST    R15,ASHVNAMA           Store for IRXEXCOM
         MVC   NAMALEN,=F'250'        Set length of name buffer
         LA    R15,256(R15)           Point to value buffer
         ST    R15,ASHVVALA           Store for IRXEXCOM
         MVC   VALALEN,=F'3072'       Set length of value buffer
GETDSP   EQU   *
*--------------------------------------------------------------------*
* Now we search for the ALET that matches the STOKEN for the
* dataspace
*--------------------------------------------------------------------*
         SAC   512                    Switch into AR mode
         SYSSTATE ASCENV=AR           Set Global bit for AR mode
         MVC   DSPALET,=F'-1'         Reset the ALET
         ALESERV SEARCH,              Get the ALET                     x
               STOKEN=DSPDTOKN,       For the dataspace STOKEN         x
               ALET=DSPALET,          Place ALET here                  x
               AL=PASN,               Available globaly                x
               MF=(E,ALESERV1)
         LTR   R15,R15                Test rc
         BNZ   RETURN04
*--------------------------------------------------------------------*
* Set the origin to to x'1000' (STEMPUSH does this as well)
* Establish addressability to the dataspace and check if we have any
* entries in the RSST.
*--------------------------------------------------------------------*
         MVC   DSPORIG,=F'4096'       Set origin to 4K
         LAM   R8,R8,DSPALET          Load AR8 with ALET
         CPYA  R9,R8                  Copy AR8 into AR9
         L     R8,DSPORIG             Load R8 with start address
         USING RSST,R8                Address DSECT
         LA    R9,RSSTENT             Load R9 with start entry address
         ICM   R7,B'1111',RSSTNMBR    Any entries ?
         BZ    RETURN02               No - tell user
VARLOOP  EQU   *
*--------------------------------------------------------------------*
* We have at least one entry in the RSST, so we now loop through the
* RSST extracting the variable names/values. For each name/value pair
* we call IRXEXCOM with the 'Set' code to create the REXX variable.
*--------------------------------------------------------------------*
         LA    R1,EXCOMID             Point to IRXEXCOM id
         ST    R1,AEXCOMP1            Store in parm list
         LA    R1,ZERO                Point to fullword zero
         ST    R1,AEXCOMP2            Store in parm list
         ST    R1,AEXCOMP3            Store in parm list
         ST    R11,AEXCOMP4           Store SHVB as parm #4
         LA    R1,ZERO                Point to fullword zero
         ST    R1,AEXCOMP5            Store in parm list
         LA    R1,EXCOMRC             Point to return code
         ST    R1,AEXCOMP6            Store in parm list
         OI    AEXCOMP6,X'80'         Indicate end of list
         MVI   SHVCODE,SHVSTORE       Indicate "Set"
         ICM   R1,B'1111',0(R9)       Get the name length
         STCM  R1,B'1111',SHVNAML     Set name buffer length
         L     R15,ASHVNAMA           Point to name area
         LA    R9,4(R9)               Point to name
         BCTR  R1,R0                  Minus 1 from length for execute
         CPYA  R15,R12                Ensure AR15 is same as AR12
         EX    R1,COPYRSST            Copy in the name
         A     R9,SHVNAML             Re-load the length
         ICM   R1,B'1111',0(R9)       Get the value length
         STCM  R1,B'1111',SHVVALL     Set value buffer length
         LR    R15,R1                 Copy for MVCL
         L     R0,ASHVVALA            Point to value area
         LA    R9,4(R9)               Point to value
         LR    R14,R9                 Copy R9 for MVCL
         CPYA  R14,R9                 Copy AR9 to AR14 for MVCL
         MVCL  R0,R14                 Copy the data
         A     R9,SHVVALL             Re-load the length
         MVC   SHVNAMA,ASHVNAMA       Point to name buffer
         MVC   SHVVALA,ASHVVALA       Point to value buffer
         SYSSTATE ASCENV=P            Reset AR Mode
         SAC   0
         LA    R1,EXCOMPRM            Point to the parm list
         L     R15,AIRXEXCM           Load address of routine
         BALR  R14,R15                Call it
         SAC   512                    Switch into AR mode
         SYSSTATE ASCENV=AR           Set Global bit for AR mode
         BCT   R7,VARLOOP             Loop for all variables
         TM    RSSTFLAG,RSSTFULL      Did truncation occur
         BO    RETURN01               Yes - tell user
RETURN00 EQU   *
*--------------------------------------------------------------------*
* RSST is OK - we only delete the dataspace if DELETE is set
*--------------------------------------------------------------------*
         TM    DSPFLAG,NODELETE       Do we delete the dataspace ?
         BO    NODEL00                no - bypass delete
         ALESERV DELETE,              Delete the ALET                  x
               ALET=DSPALET,          for the dataspace                x
               MF=(E,ALESERV1)
         DSPSERV DELETE,              Delete the dataspace             x
               STOKEN=DSPDTOKN,       With this STOKEN                 x
               MF=(E,DSPSERV1)
NODEL00  EQU   *
         SYSSTATE ASCENV=P            Reset AR Mode
         SAC   0
         BAL   R10,RELWORK            free the workarea
         MVC   EVALBLOCK_EVLEN(4),=F'1'  Set length of result
         MVC   EVALBLOCK_EVDATA(1),=C'0' Move in result data
         XR    R15,R15                set rc to zero
         PR                           return
RETURN01 EQU   *
*--------------------------------------------------------------------*
* RSST is truncated - we only delete the dataspace if DELETE is set
*--------------------------------------------------------------------*
         TM    DSPFLAG,NODELETE       Do we delete the dataspace ?
         BO    NODEL01                no - bypass delete
         ALESERV DELETE,              Delete the ALET                  x
               ALET=DSPALET,          for the dataspace                x
               MF=(E,ALESERV1)
         DSPSERV DELETE,              Delete the dataspace             x
               STOKEN=DSPDTOKN,       With this STOKEN                 x
               MF=(E,DSPSERV1)
NODEL01  EQU   *
         SYSSTATE ASCENV=P            Reset AR Mode
         SAC   0
         BAL   R10,RELWORK            free the workarea
         MVC   EVALBLOCK_EVLEN(4),=F'1'  Set length of result
         MVC   EVALBLOCK_EVDATA(1),=C'1' Move in result data
         XR    R15,R15                set rc to zero
         PR                           return
RETURN02 EQU   *
*--------------------------------------------------------------------*
* RSST is empty - we ALWAYS delete the dataspace.
*--------------------------------------------------------------------*
         ALESERV DELETE,              Delete the ALET                  x
               ALET=DSPALET,          for the dataspace                x
               MF=(E,ALESERV1)
         DSPSERV DELETE,              Delete the dataspace             x
               STOKEN=DSPDTOKN,       With this STOKEN                 x
               MF=(E,DSPSERV1)
         SYSSTATE ASCENV=P            Reset AR Mode
         SAC   0
         BAL   R10,RELWORK            free the workarea
         MVC   EVALBLOCK_EVLEN(4),=F'1'  Set length of result
         MVC   EVALBLOCK_EVDATA(1),=C'2' Move in result data
         XR    R15,R15                set rc to zero
         PR                           return
RETURN04 EQU   *
*--------------------------------------------------------------------*
* Could not find the stack
*--------------------------------------------------------------------*
         SYSSTATE ASCENV=P            Reset AR Mode
         SAC   0
         BAL   R10,RELSHVB            free the workarea
         BAL   R10,RELWORK            free the workarea
         MVC   EVALBLOCK_EVLEN(4),=F'1'  Set length of result
         MVC   EVALBLOCK_EVDATA(1),=C'4' Move in result data
         PR                           return
RETURN08 EQU   *
*--------------------------------------------------------------------*
* Token missing or invalid, or error specifying DELETE/NODELETE
*--------------------------------------------------------------------*
         BAL   R10,RELWORK            free the workarea
         MVC   EVALBLOCK_EVLEN(4),=F'1'  Set length of result
         MVC   EVALBLOCK_EVDATA(1),=C'8' Move in result data
         PR                           return
*
*--------------------------------------------------------------------*
* General Routines
*--------------------------------------------------------------------*
*
CHAR2HEX EQU   *
*--------------------------------------------------------------------*
* Convert EBCDIC to HEX
* We receive a 16-byte token in EBCDIC eg 'F0C1F1C2F0F0......' and
* we need to convert it to hex eg '0A1B00.....'
*--------------------------------------------------------------------*
         LA    R15,TOKEN              Point to the token
         LA    R1,DSPDTOKN            Point to the dataspace token
         LA    R0,8                   Set loop count
LEFTHALF EQU   *
         XR    R7,R7                  Clear
         ICM   R7,B'0001',0(R15)      Pick up byte of token
         CH    R7,=H'198'             C1-C6 ?
         BH    LEFTNMBR               No - number
         SH    R7,=H'183'             A-F - Turn C1-C6 into 0A-0F
         B     LEFTDONE
LEFTNMBR EQU   *
         SH    R7,=H'240'             0-9 - Turn F0-F9 into 0-9
LEFTDONE EQU   *
         LR    R14,R7                 Remember for later
         SLL   R14,4                  Make room for next half byte
         LA    R15,1(R15)             Next token byte
RGHTHALF EQU   *
         XR    R7,R7                  Clear
         ICM   R7,B'0001',0(R15)      Pick up byte of token
         CH    R7,=H'198'             C1-C6 ?
         BH    RGHTNMBR               No - number
         SH    R7,=H'183'             A-F - Turn C1-C6 into 0A-0F
         B     RGHTDONE
RGHTNMBR EQU   *
         SH    R7,=H'240'             0-9 - Turn F0-F9 into 0-9
RGHTDONE EQU   *
         OR    R14,R7                 combine half bytes
         STCM  R14,B'0001',0(R1)      Store as hex byte
         LA    R1,1(R1)               point to next hex byte
         LA    R15,1(R15)             Next token byte
         BCT   R0,LEFTHALF            Loop for all bytes
         BR    R10
*
RELWORK  EQU   *
*--------------------------------------------------------------------*
* Release workarea storage
*--------------------------------------------------------------------*
         DELETE EP=IRXEXCOM           Delete IRXEXCOM from storage
         STORAGE RELEASE,             release workarea storage         X
               LENGTH=WORKLEN,        this much                        X
               ADDR=(R13),            address in R13                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               COND=NO                unconditional
         BR    R10                    return
*
RELSHVB  EQU   *
*--------------------------------------------------------------------*
* Release SHVB storage
*--------------------------------------------------------------------*
         STORAGE RELEASE,             release SHVB storage             X
               LENGTH=4096,           this much                        X
               ADDR=(R11),            address in R11                   X
               SP=0,KEY=8,            subpool 0 storage key 8          X
               COND=NO                unconditional
         BR    R10                    return
*
*-------------------------------------------------------------------*
* Executed Instructions
*-------------------------------------------------------------------*
*
COPYRSST MVC   0(0,R15),0(R9)         Executed move
CONVUPPR TR    0(0,R5),UPPER          Xlate to upper case
*
*-------------------------------------------------------------------*
* Constants, Variables and DSECTs
*-------------------------------------------------------------------*
*
         LTORG
HEXFF    DC    XL8'FFFFFFFFFFFFFFFF'  High values
EXCOMID  DC    CL8'IRXEXCOM'          IRXEXCOM ID
ZERO     DC    F'0'                   Fullword zero
UPPER    DS    0CL256
         DC    X'000102030405060708090A0B0C0D0E0F'
         DC    X'101112131415161718191A1B1C1D1E1F'
         DC    X'202122232425262728292A2B2C2D2E2F'
         DC    X'303132333435363738393A3B3C3D3E3F'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F'
         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'
         DC    X'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
*
WORKAREA DSECT
SAVEAREA DS    18F                    save area
TOKEN    DS    CL16                   EBCDIC token passed
DSPTTOKN DS    CL16                   TCB Token
DSPNAME  DS    CL8                    Dataspace name
DSPDTOKN DS    CL8                    Dataspace token
DSPORIG  DS    F                      Dataspace origin
DSPALET  DS    F                      Dataspace ALET
AIRXEXCM DS    F                      address of IRXEXCOM
ASHVNAMA DS    F                      address of SHVB name buffer
ASHVVALA DS    F                      address of SHVB value buffer
NAMALEN  DS    F                      length of SHVB name buffer
VALALEN  DS    F                      length of SHVB value buffer
EXCOMRC  DS    F                      Return code from IRXEXCOM
DSPFLAG  DS    X                      DELETE flag
NODELETE EQU   X'80'                  Don't delete the dataspace
EXCOMPRM DS    0F                     Parm list for IRXEXCOM
AEXCOMP1 DS    F                      ---> IRXEXCOM ID
AEXCOMP2 DS    F                      ---> 0
AEXCOMP3 DS    F                      ---> 0
AEXCOMP4 DS    F                      ---> SHVBLOCK
AEXCOMP5 DS    F                      ---> ENVBLOCK
AEXCOMP6 DS    F                      ---> Return Code
         DS    0F
         DSPSERV MF=(L,DSPSERV1)      List form of DSPSERV
ALESERV1 ALESERV MF=L                 List form of ALESERV
         DS    0D
WORKLEN  EQU   *-WORKAREA
*
RSST     DSECT
*-------------------------------------------------------------------*
* The Pushed REXX Stem Variable Storage Table (RSST)
*
* The RSST consists of a 12 byte header plus a variable amount of
* individual entries. Each entry is constructed as follows :
* Namel     DS   AL4(Name)        Length of name
* Name      DS   CL(Namel)        REXX Variable Name
* Valuel    DS   AL4(Value)       Length of value
* Value     DS   CL(Valuel)       REXX Variable value
*
* For example, an entry for a variable 'STEM.11' with a value 'FRED'
* would look like this :
*   Namel   Name          Valuel  Value
* x'00000007E2E3C5D44BF1F100000004C6D9C5C4'
*-------------------------------------------------------------------*
RSSTID   DS    CL4                    Eyecatcher
RSSTNMBR DS    CL4                    Number of entries
RSSTSIZE DS    CL4                    Size of table (including header)
RSSTFLAG DS    X                      Flag byte
RSSTFULL EQU   X'80'                  RSST is full
         DS    XL3                    Reserved
RSSTHSIZ EQU   *-RSST                 Size of header
RSSTENT  DS    0C                     Entry
*
         IRXEFPL                      REXX External Function
         IRXEVALB                     REXX Evaluation Block
         IRXENVB                      REXX Environment Block
         IRXSHVB                      REXX Shared Variable Block
         IRXARGTB DECLARE=YES         REXX Argument Table
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
