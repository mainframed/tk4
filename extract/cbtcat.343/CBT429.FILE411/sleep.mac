SLEEP    TITLE 'REXX function to wait for a specified time'
*--------------------------------------------------------------------*
* Program Name  : SLEEP
*
* Language      : Assembler
* LinkEdit Attr : RENT REUS REFR
* AMODE         : 31
* RMODE         : ANY
* AC            : 00
*
* IBM Macros    : MODID, STORAGE, STIMER
*
*--------------------------------------------------------------------*
* Program Function
*
* External REXX function to wait for a specified time.
*
* The program will wait for a specified amount of seconds. The number
* of seconds to wait for is passed as a parameter to the function
* by the invoking REXX Exec. If no parameter is passed, a default of
* 10 seconds is used. The maximum specification is 99999 seconds.
*
* Syntax
*
* rcode = sleep(secs)
*
* Keywords
*
* RCODE   The return code from sleep  :  0  Success
*                                     : -1  Parameter error
* SECS    The number of seconds to wait for (1 - 99999)
*
*--------------------------------------------------------------------*
* Registers On Entry
*
* R0   -  n/a
* R1   -  Paramters passed ---> +0  REXX EFPL
* R15  -  n/a
*
* Registers Used in Program
*
* R2   -  REXX EFPL
* R3   -  REXX Evalblock
* R4   -  REXX Arg Table
* R5   -  REXX Arg passed = time in seconds
* R6   -  Length of arg passed
* R7   -  work
* R8   -
* R9   -
* R10  -  Branch and Link
* R11  -
* R12  -  Base Register
* R13  -  Savearea
*
* Registers On Exit
*
* R0   -  n/a
* R1   -  n/a
* R15  -  Return Code : 0 - Success
*
*--------------------------------------------------------------------*
* (c) Scott Enterprise Consultancy Ltd
*--------------------------------------------------------------------*
* Changes
* 01/11/1996  Rob Scott  Code Written                             V1.0
* 21/06/1999  Rob Scott  Correct typo in PARMERR                  V1.1
*--------------------------------------------------------------------*
SLEEP    CSECT
SLEEP    AMODE 31
SLEEP    RMODE ANY
         BAKR  R14,R0                 linkage stack
         LR    R12,R15                copy entry address to base
         USING SLEEP,R12              address it
         MODID ,                      eyecatcher
         LR    R2,R1                  copy parms passed
GETWORK  EQU   *
         STORAGE OBTAIN,              Get the workarea storage         X
               LENGTH=WORKLEN,        This much                        X
               ADDR=(R13),            Address in R13                   X
               SP=0,KEY=8,            Subpool 0 Key 8                  X
               LOC=ANY,               Anywhere                         X
               COND=NO                Unconditional
         USING WORKAREA,R13           Address workarea
         LR    R14,R13                Copy workarea address
         L     R15,=A(WORKLEN)        Get length of workarea
         XR    R0,R0                  Clear
         XR    R1,R1                  Clear
         MVCL  R14,R0                 Init to zeros
         LA    R13,SAVEAREA           Point to savearea
         MVC   4(4,R13),=C'F1SA'      Set Acronym
GETPARMS EQU   *
*-------------------------------------------------------------------*
* Capture the standard REXX function control blocks passed via
* R1. This includes the result (or evaluation) table and a table
* of arguments used to invoke the function by the user.
*-------------------------------------------------------------------*
         MVC   UWORK(7),TIMEMASK      Move in default seconds
         USING EFPL,R2                addr REXX func parms
         L     R3,EFPLEVAL            addr of pointer to eval block
         L     R3,0(R3)               REXX eval block addr
         USING EVALBLOCK,R3           address it
         L     R4,EFPLARG             REXX arg list
         USING ARGTABLE_ENTRY,R4      address arg table
         MVC   INTERVAL(8),TIMEMASK   set default time
         CLC   0(4,R4),HEXFF          are there no arguments ?
         BE    WAITFOR                no - use default
GOTPARMS EQU   *
         L     R5,ARGTABLE_ARGSTRING_PTR
         ICM   R6,B'1111',ARGTABLE_ARGSTRING_LENGTH
         BZ    WAITFOR                If no parm - use default
         C     R6,=F'5'               Bigget than 99999 seconds ?
         BH    PARMERR                Yes - error
         BCTR  R6,R0                  Subtract 1 for execute
         EX    R6,ISNUMBER            Check for numbers
         BNZ   PARMERR                non-numeric found - error
         MVC   UWORK(7),ZEROS         Init the time field
         LA    R1,UWORK+6             Point to the end
         SR    R1,R6                  Subtract length of seconds
         EX    R6,MOVESECS            Move in the seconds
WAITFOR  EQU   *
         PACK  PWORK(4),UWORK(7)      Pack the seconds
         MP    PWORK(4),=PL2'100'     x 100 for BINTVL
         CVB   R7,PACKTIME            Convert to binary
         ST    R7,INTERVAL            and store for STIMER
         STIMER WAIT,BINTVL=INTERVAL  Wait for the specified time
RETURN00 EQU   *
         BAL   R10,FREEWORK           Free the workarea and set rc
         MVC   EVALBLOCK_EVLEN(4),=F'1'
         MVC   EVALBLOCK_EVDATA(1),=C'0'
         LA    R15,0
         PR
PARMERR  EQU   *
         BAL   R10,FREEWORK           Free the workarea and set rc
         MVC   EVALBLOCK_EVLEN(4),=F'2'
         MVC   EVALBLOCK_EVDATA(2),=C'-1'
         LA    R15,0
         PR
*
*-------------------------------------------------------------------*
* General Routines                                                  *
*-------------------------------------------------------------------*
*
FREEWORK EQU   *
         STORAGE RELEASE,             Free the workarea storage        X
               LENGTH=WORKLEN,        This much                        X
               ADDR=(R13),            Address in R13                   X
               SP=0,KEY=8,            Subpool 0 Key 8                  X
               COND=NO                Unconditional
         BR    R10
*
*-------------------------------------------------------------------*
* Executed Instructions                                             *
*-------------------------------------------------------------------*
ISNUMBER TRT   0(0,R5),NUMBERS        Test for numbers
MOVESECS MVC   0(0,R1),0(R5)          Move in the seconds
*
*-------------------------------------------------------------------*
* Constants, Variables and DSECTs                                   *
*-------------------------------------------------------------------*
HEXFF    DC    X'FFFFFFFFFFFFFFFF'    hex ff
TIMEMASK DC    CL7'0000010'           time mask (10 seconds)
ZEROS    DC    CL7'0000000'           zeros
*
NUMBERS  DC    256X'FF'               Translate table - Numbers
         ORG   NUMBERS+C'0'
         DC    10X'00'
*
WORKAREA DSECT
SAVEAREA DS    18F                    SaveArea
INTERVAL DS    F                      Time interval
PACKTIME DS    0D                     8-byte packed time in secs
         DS    F                      Leading zeros
PWORK    DS    F                      Packed time field
UWORK    DS    CL7                    Unpacked work field
WORKLEN  EQU   *-WORKAREA
         IRXEFPL                      REXX mapping macros
         IRXEVALB
         IRXARGTB DECLARE=YES
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
