/*------------------------------ Rexx -------------------------------*/
/*       Liste des ASCBs                                             */
/* option='s' (liste des STCs)                                       */
/* option='t' (liste des TSUs)                                       */
/* option='j' (liste des JOBs)                                       */
/* option='a' (liste de tous)                                        */
/* option=' ' (statistiques globales)                                */
/*-------------------------------------------------------------------*/
  arg opt
  upper opt

  say '            Liste de tous les postes ASCB en ASVT'
  if opt = '' then say 'Utilisez l''option' ,
  ' S pour stcs, T pour tsus, J pour jobs, A pour tous'
  say ' '


  asidn = 1
  ctrnonr = 0
  ctrtsu = 0
  ctrjob = 0
  ctrstc = 0
  ctrind = 0
  ctrfree = 0

  cvt  = storage(10,4)                   /* cvt address in memory */
                                         /*                       */
  asvt   = storage(d2x(556+c2d(cvt)),4)  /* adresse asvt          */
  ascb1  = storage(d2x(528+c2d(asvt)),4)   /* ASCB de *MASTER*  */


  acro   = storage(d2x(512+c2d(asvt)),4)  /* acronyme "ASVT"       */
  maxu   = storage(d2x(516+c2d(asvt)),4)  /* asvtmaxu (maxi esp.ad)*/
  max =  c2d(maxu)
  if  acro \= 'ASVT' then do
      say '** Erreur d adressage, ASVT non trouvee'
      exit (8)
      end

  do forever
    job = getjbn(asidn)               /* job actif dans le   syst}me */
    if job=0 then leave
    if job='' then ctrfree = ctrfree + 1
    end

  say ' '
  say 'TOTAL : ' ctrstc 'started tasks,' ,
  ctrtsu 'users TSO,' ctrjob 'jobs.'
  if ctrind \= 0 then say '        ' ctrind 'job/stc/tsu "STARTING"'
  if ctrnonr \= 0 then say '        ' ctrnonr 'non-reusable asvt' ,
     'entries'
  tot = ctrstc + ctrtsu + ctrjob + ctrind
  say '        ' tot 'espaces-adresses utilises sur un maxi de' max ,
      ', ' ctrfree 'postes libres'
  exit(0)


/*------------------------------ Rexx -------------------------------*/
/* Cette proc{dure donne le job suivant dans le syst}me              */
/*-------------------------------------------------------------------*/
getjbn: procedure expose asidn  ctrtsu ctrjob ctrstc ctrnonr ,
                         cvt asvt max ctrind opt ascb1

  if asidn > max  then return 0   /* fin de liste des jobs */
  offset = 4*asidn-4
  asvten =  d2x(offset+528+c2d(asvt))
  ascb   = storage(d2x(offset+528+c2d(asvt)),4)
  asidn = asidn + 1

  /* ASCBs non reutilisables          */
  if substr(c2x(ascb),1,1) = '8' then do    /* poste asvt non pris */
         if substr(c2x(ascb),2,7) =  substr(c2x(ascb1),2,7) then do
            ctrnonr = ctrnonr + 1
  say 'asid=' asidn-1 '  asidx=' d2x(asidn-1) '  NON-REUSABLE ' ,
        '  asvt entry=' asvten
            end
    /*   say 'asid=' asidn-1  ' ascb=' c2x(ascb)     */
         return ''       /*   asid libre */
         end

  /* D{tection anomalie (ascb a zero) */
  if substr(c2x(ascb),2,7) = '0000000' then do
     say ' ** ANOMALIE dans l''asvt, poste a zero en ' asvten ,
           ' asid' asidn-1 '(dec)'
     end

  ascbjbni   = storage(d2x(172+c2d(ascb)),4)
  ascbjbns   = storage(d2x(176+c2d(ascb)),4)
  jobname = 'STARTING'
  typ = '   '      /* type ind{termin{ par d{faut */

  /* Cas d'une STC ou d'un user TSO                  */

  if c2x(ascbjbns) \= 0 then do
               jobname = storage(c2x(ascbjbns),8)
               typ = 'stc'
               ctrstc = ctrstc + 1
               tsb = storage(d2x(60+c2d(ascb)),4)
               if c2x(tsb) \= 0 then do
                                typ = 'tsu'
                                ctrstc = ctrstc - 1
                                ctrtsu = ctrtsu + 1
                                end
               end

  /* Cas d'un JOB                                    */

  if c2x(ascbjbni) \= 0 then do
               jobname = storage(c2x(ascbjbni),8)
               ctrjob = ctrjob + 1
               ctrstc = ctrstc - 1
               typ = 'job'
               end

  /* type ind{termin{ (starting) */

  if typ = '   ' then ctrind = ctrind + 1

  /* consommations CPU                               TF 22-4-97 */

  ascbejst   = storage(d2x(64+c2d(ascb)),8)    /* temps TCB     */
  ascbsrbt   = storage(d2x(200+c2d(ascb)),8)   /* temps SRB     */
  numeric digits 20  /* necessaire sinon le x2d plante   */
  tcbtime = x2d(substr(c2x(ascbejst),1,13))  /* tcb en millioniemes  */
  srbtime = x2d(substr(c2x(ascbsrbt),1,13))  /* tcb en millioniemes  */
  tcbtime = FORMAT(tcbtime/1000000,,2)    /* temps TCB secondes   */
  srbtime = FORMAT(srbtime/1000000,,2)  /* temps SRB secondes   */

  /* consommations en I/Os                           TF 22-4-97 */

  ascbiosc   = storage(d2x(320+c2d(ascb)),4)    /* nombre d'IOs  */
  ios        = c2d(ascbiosc)


  /* Infos generales tq STEPNAME tirees du CSCB      TF 22-4-97 */
  /* NB : le CSCB est insuffisant pour les jobs      TF 22-4-97 */
  /*      il faut passer par ASCBJBNI                TF 22-4-97 */

  if    typ  = 'job'  then do
             cscb       = storage(d2x(c2d(ascbjbni)+8),4)
             stepname   = storage(d2x(64+c2d(cscb)),8)
             end
                      else do
             cscb       = storage(d2x(56+c2d(ascb)),4)
             stepname   = storage(d2x(16+c2d(cscb)),8)
             end

  /* Affichage */

  if ( opt = 'S' & typ = 'stc' ) ×  ,
     ( opt = 'T' & typ = 'tsu' ) ×  ,
     ( opt = 'J' & typ = 'job' ) ×  ,
     ( typ = '   ')              ×  ,
     ( opt = 'A')    then ,
  say 'asid'××asidn-1 '('××d2x(asidn-1)××') '××typ××'='××jobname ,
   'ascb='××c2x(ascb) 'asvt='××asvten ,
    'TCB='××tcbtime××'s' 'SRB='××srbtime××'s' 'IO='××ios  ,
    stepname
  return jobname
