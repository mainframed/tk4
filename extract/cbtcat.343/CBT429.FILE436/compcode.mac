* THIS PROGRAM IS DESIGNED TO REPORT STEP COMPLETION CODES FOR BATCH
*
* JOBS.  WHAT AND WHERE IT WRITES IS DETERMINED BY A PARAMETER LIST
*
* AND A DD STATEMENT.  THE PROGRAM IS TO BE RUN AS ITS OWN JOBSTEP
*
* FOLLOWING ANY JOBSTEPS THAT IT IS TO REPORT ON. IF A NOTIFY DDCARD
*
* IS PRESENT, E-MAIL NOTIFICATION WILL BE MADE TO THE REQUESTED
*
* MAILIDS.
*
* EXAMPLE:
*
* //*
* //COMPCODE EXEC PGM=COMPCODE,COND=EVEN,
* //         PARM='USER=(RWGV3),ROUT=(2,3,11),STEP=(ASMFCL.*,TESTER)'
* //SYSPRINT DD   DSN=RWGV3.SYSPRINT,DISP=MOD          (optional)
* //NOTIFY   DD   DSN=Zxxxx.ONCALL.LIST,DISP=SHR       (optional)
* //*
*             OR MORE PRACTICALLY:
* //*
* //COMPCODE EXEC PGM=COMPCODE,COND=EVEN
* //NOTIFY   DD   DSN=Zxxxx.ONCALL.LIST,DISP=SHR       (optional)
* //*
*
*
* (1)    COND=EVEN SHOULD ALWAYS BE SPECIFIED SO THAT THE STEP WILL
*        EXECUTE EVEN IF A PREVIOUS STEP HAS ABENDED.
*
* (2)    VALID PARMS ARE AS FOLLOWS:
*
*    (A) USER= SPECIFIES WHICH USER(S) ARE TO BE NOTIFIED BY COMPCODE.
*              THIS PARAMETER IS OPTIONAL.  THE USER LIST MUST BE
*              ENCLOSED IN PARENTHESIS' EVEN IF ONLY ONE USER IS
*              SPECIFIED. EX. USER=(S001,S002) OR USER=(S001) .
*              THE MAXIMUM NUMBER OF USERS IS THREE.  IF NO USERS
*              ARE SPECIFIED, NO USERS WILL BE NOTIFIED.
*
*    (B) ROUT= SPECIFIES THE ROUTE CODES THAT THE MESSAGE(S) ARE TO BE
*              SENT TO.  THIS PARAMETER IS OPTIONAL.  THE ROUTCDE LIST
*              MUST BE ENCLOSED IN PARENTHESIS' EVEN IF ONLY ONE
*              ROUTE CODE IS SPECIFIED. EX. ROUT=(1,2,3) OR ROUT=(3).
*              VALID ROUTE CODES ARE 1-16.  IF NO ROUTE CODES ARE
*              SPECIFIED, NO MESSAGES WILL BE SENT TO OPERATOR
*              CONSOLES.
*
*    (C) STEP= SPECIFIES THE STEP(S) THAT COMPCODE IS TO REPORT ON.
*              THIS PARAMETER IS OPTIONAL.  IF OMITTED, ALL STEPS WILL
*              BE REPORTED ON (EXCEPT FOR STEPS THAT HAVE NOT YET EX-
*              CUTED OR THE "COMPCODE" STEP, BOTH OF WHICH ARE NEVER
*              LISTED) . THE STEP LIST MUST BE ENCLOSED IN PAREN-
*              THESIS' EVEN IF ONLY ONE STEP IS SPECIFIED.  STEPS MUST
*              BE INDICATED IN ONE OF THREE WAYS:
*
*        (1)   PROGRAM EXECUTION - WHERE THE EXEC CARD SPECIFIES PGM= .
*              FOR //STEP1 DD PGM=IEBGENER ,
*              THE STEP PARM WOULD READ : STEP=(STEP1,ETC,ETC)
*
*        (2)   PROC EXECUTION(SINGLE STEP) - WHERE THE EXEC CARD
*              SPECIFIES A PROC AND ONLY ONE STEP OF THE PROC IS TO
*              BE REPORTED ON.
*              FOR //ASMNLINK EXEC ASMFCL ,
*              TO GET ONLY THE LKED STEP,
*              THE STEP PARM WOULD READ : STEP=(ASMNLINK.LKED,ETC,ETC)
*
*        (3)   PROC EXECUTION(ALL STEPS) - WHERE THE EXEC CARD
*              SPECIFIES A PROC AND ALL STEPS FOR THE PROC ARE TO
*              BE REPORTED ON.
*              FOR //ASMNLINK EXEC ASMFCL ,
*              TO GET ALL STEPS,
*              THE STEP PARM WOULD READ : STEP=(ASMNLINK.*,ETC,ETC)
*
* (3)    SYSPRINT DD STATEMENT - IF A SYSPRINT DD STATEMENT IS
*        INCLUDED, THE MESSAGE WILL BE WRITTEN INTO THE DATASET
*        SPECIFIED IN ADDITION TO THE USER= AND ROUT= REPORTING.  IF
*        THE DATASET EXISTS AND HAS DCB ATTRIBUTES, THEY ARE NOT
*        CHANGED.  IF NO DCB ATTRIBUTES ARE SPECIFIED, THE DATA
*        IS WRITTEN AS RECFM=FB,LRECL=133,BLKSIZE=6118.
*
* (4)    SNAPDUMP DD STATEMENT - THIS DD STATEMENT IS TO BE USED FOR
*        DIAGNOSTIC PURPOSES ONLY.  IF INCLUDED, A SNAPDUMP OF THE
*        PERTINENT CONTROL BLOCKS WILL BE DONE.  NOTE THAT THE DCB
*        ATTRIBUTES FOR THIS DCB ARE HARD-CODED TO RECFM=VBA,LRECL=125,
*        BLKSIZE=1632, A RESTRICTION IMPOSED BY THE SNAP FACILITY.
*
* (5)    NOTIFY DD STATEMENT - THIS DD STATEMENT IS USED TO IDENTIFY
*        WHAT MAILIDS ARE TO BE SENT THE SAME NOTIFICATION MESSAGES
*        THAT ARE SENT TO TSOUSER IDS OR WTO'ED. THIS DDCARD IS
*        OPTIONAL. THE CONTROL CARDS IN THE NOTIFY DATASET HAVE ONE
*        FULLY QUALIFIED MAIL ID PER CARD, BEGINNING IN COLUMN 1. ANY
*        NUMBER OF CARDS MAY BE IN THE DATASET. FORMAT OF THE NOTIFY
*        DATASET IS FB, LRECL = 80, ANY VALID BLOCKSIZE.  AN * IN
*        COLUMN ONE DENOTES A COMMENT AND IS IGNORED. THIS PROGRAM USES
*        IBM'S SMTP (SIMPLE MAIL TRANSPORT PROTOCOL) AS THE ROUTING
*        MECHANISM TO THE CORPORATE E-MAIL SYSTEM. DELIVERY OF THE
*        MESSAGE TO THE CORPORATE E-MAIL IS USUSALLY WITHIN A COUPLE
*        SECONDS OF STEP TERMINATION. DELIVERY TO THE END USER(S) IS
*        MOSTLY DEPENDENT ON HOW OFTEN THE USER'S MAIL CLIENT CHECKS
*        FOR MAIL.
*
*         EXAMPLE OF NOTIFY CARD, BEGINNING IN COLUMN 1:
*          mailid@company.com
*
*        MAILID ADDRESS MAY BE IN EITHER UPPER OR LOWER CASE.
*        IF A NOTIFY DDCARD IS NOT DETECTED, OR THE CORRECT
*        INTERMEDIARY DATASETS SUCCESSFULLY DYNAMICALLY ALLOCATED,
*        E-MAIL WILL NOT BE ATTEMPTED.
*
* NOTE:  THAT THIS PROGRAM MUST RUN APF-AUTHORIZED IF THE "USER="
*
*        PARAMETER IS SPECIFIED.
*
***********************************************************************
*                                                                     *
* Note:  This program must be modified for the installed site for     *
*        e-mail notification.                                         *
*                                                                     *
* Modifications Required:  The user must specify what SMFID's are in  *
*                          each JES domain (MAS complex - NODE        *
*                          statement in JES definition) (see code     *
*                          before label DOMADONE), and establish      *
*                          the domain name (see labels SETBDOM,       *
*                          SETDDOM, and SETTDOM. Add/subtract as      *
*                          necessary.                                 *
*                          Update RETNMSG with what APPEARS to be a   *
*                          valid return address for your installation.*
*                          Update SUBJMSG with the name of your data  *
*                          center (or whatever you want).             *
*                          Update OUTTXT01 with the length and name   *
*                          of your MVS SMTP started task name.        *
*                                                                     *
***********************************************************************
*
* This code is running on OS/390 V2R5
*
***********************************************************************
*
* Modifications made from the original COMPCODE program taken from
* the CBT tape (don't remember what file it was):
*
*  -  Added support for e-mail notification
*  -  Changed code to get the actual previous step
*     execution/termination code instead of highest code from JCT
*  -  Made dates Y2K friendly
*
*                           Glenn Jones
*                           Saudi Aramco, Dhahran, Saudi Arabia
*                           email: jonesgk@aramco.com.sa
*                                  g_k_j@yahoo.com
*
         MACRO
&NAME    H2C   &TO,&FROM,&LEN
         GBLA  &H2CCNT
.*
         AIF   ('&TO' EQ '').ERR1
         AIF   ('&LEN' EQ '').ERR1
         AIF   ('&FROM' EQ '').ERR1
.*
&TOLEN   SETA  &LEN+1
&FROMLEN SETA  &LEN/2+1
*
* THIS MACRO TRANSLATES HEX DATA TO EBCDIC.  NOTICE THAT THE "FROM"
*
* AND "TO" FIELDS MUST HAVE AN EXTRA BYTE FOLLOWING THEM TO ALLOW THE
*
* TRANSLATION TO TAKE PLACE.
*
         AIF   ('&TO'(1,1) EQ '(').REGTO
&NAME    LA    15,&TO              LOAD ADDR OF "TO" AREA
         AGO   .CHKFROM
.REGTO   ANOP
&NAME    LR    15,&TO              LOAD ADDR OF "TO" AREA
.*
.CHKFROM AIF   ('&FROM'(1,1) EQ '(').REGFROM
         LA    14,&FROM            LOAD ADDR OF "FROM" AREA
         AGO   .REGDONE
.REGFROM LR    14,&FROM            LOAD ADDR OF "FROM" AREA
.*
.REGDONE ANOP
         UNPK  0(&TOLEN,15),0(&FROMLEN,14) CONVERT ZONES TO EBCDIC
         AIF   (&H2CCNT EQ 1).NOT1ST
&H2CCNT  SETA  1
         BAL   1,H2C0002           LOAD ADDR OF PARTIAL TBL AND BRANCH
H2C0001  DC    C'0123456789ABCDEF' PARTIAL TRANSLATE TABLE
         AGO   .H2C0002
.*
.NOT1ST  LA    1,H2C0001           LOAD TBL ADDR FROM LAST INVOCATION
         AGO   .SKPALGN
.H2C0002 ANOP
H2C0002  DS    0H
.SKPALGN ANOP
         LA    0,C'0'              LOAD OFFSET INTO TABLE
         SR    1,0                 SET PTR TO BEGINNING OF TABLE
         TR    0(&LEN,15),0(1)     TRANSLATE TO CORRECT EBCDIC CHARS
         MEXIT
*
.ERR1    MNOTE 8,'REQUIRED OPERAND NOT SPECIFIED'
         MEND
         MACRO
&NAME    DCBEXIT &RECFM=,&LRECL=,&BLKSIZE=
.*
         LCLA  &I,&D
&I       SETA  1
&D       SETA  &SYSNDX
.*
&NAME    DS    0F
         DC    X'85',AL3(*+3)      END OF LIST, DCB EXIT, EXIT ADDRESS
*
         USING *,R15               OBTAIN ADDRESSABILITY FOR EXIT RTN
         SLR   R0,R0               ZERO REG0
.*
         AIF   ('&RECFM' EQ '').LRECL
*
         CLI   36(R1),X'00'        IS THE RECFM ZERO?
         BNE   D&D.I&I             IF NOT, DON'T REPLACE IT
         OI    36(R1),DCBRECF      RECFM=F
.*
.LRECL   AIF   ('&LRECL' EQ '').BLKSIZE
*
D&D.I&I  DS    0H
&I       SETA  &I+1
         CH    R0,52(,R1)          IS THE LRECL ZERO?
         BNE   D&D.I&I             IF NOT, DON'T REPLACE IT
         MVC   52(2,R1),=AL2(&LRECL) ELSE MOVE IN SPECIFIED VALUE
.*
.BLKSIZE AIF   ('&BLKSIZE' EQ '').EXIT
*
D&D.I&I  DS    0H
&I       SETA  &I+1
         CH    R0,62(,R1)          IS THE BLKSIZE ZERO?
         BNE   D&D.I&I             IF NOT, DON'T REPLACE IT
         MVC   62(2,R1),=AL2(&BLKSIZE) ELSE MOVE IN SPECIFIED VALUE
.*
.EXIT    ANOP
*
D&D.I&I  DS    0H
         DROP  R15                 DISCONTINUE MAPPING
         BR    R14                 RETURN
         MEND
         PRINT GEN
COMPCODE CSECT                     DEFINE CSECT NAME
COMPCODE AMODE 24
COMPCODE RMODE 24
R0       EQU   0                   E
R1       EQU   1                     Q
R2       EQU   2                       U
R3       EQU   3                         A
R4       EQU   4                           T
R5       EQU   5                             E
R6       EQU   6
R7       EQU   7                   R
R8       EQU   8                     E
R9       EQU   9                       G
R10      EQU   10                        I
R11      EQU   11                          S
R12      EQU   12                            T
R13      EQU   13                              E
R14      EQU   14                                R
R15      EQU   15                                  S
         B     BEGIN-*(R15)        BRANCH TO BEGINNING OF PROGRAM
         DC    17F'0'              REST OF SAVEAREA
PGMNAME  DC    CL8'COMPCODE'       PROGRAM NAME
         DC    CL8'G. JONES'       PROGRAMMER NAME
         DC    CL8'&SYSDATE'       ASSEMBLY DATE
         DC    CL8'&SYSTIME'       ASSEMBLY TIME
BEGIN    DS    0H                  ALIGN TO HALFWORD BOUNDARY
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         ST    R13,4(,R15)         SAVE ADDRESS OF CALLER'S SAVEAREA
         ST    R15,8(,R13)         STORE ADDRESS OF MY SAVEAREA
         LR    R13,R15             LOAD 13 WITH ADDR OF SAVEAREA & PGM
         USING COMPCODE,R13        SET PRIMARY BASE
         LA    R12,2048(,R13)          2ND BASE REG
         LA    R12,2048(,R12)          2ND BASE REG
         USING COMPCODE+4096,R12
         USING PSA,R0              MAP PSA
*
*        PARSE INITIALIZATION
*
         L     R1,0(,R1)           GET ADDRESS OF PARMLIST
         LH    R10,0(,R1)          GET LENGTH OF PARMLIST
         LTR   R10,R10             WAS A PARMLIST PROVIDED?
         BZ    PARSDONE            IF NOT, SKIP PARSING PARMLIST
         LA    R10,1(R10,R1)       SET POINTER TO LAST BYTE IN PARMLIST
         CLI   0(R10),C')'         IS THE LAST BYTE A ")" ?
         BE    FIRSTPRM            IF SO, CONTINUE
*
         MVI   RETCODE+3,X'08'     SET NON-ZERO RETURN CODE
         LA    R1,PARMERR1         LOAD ADDRESS OF ERROR MESSAGE
         LA    R11,END             LOAD RETURN ADDRESS
         B     ERRORRTN            GO TO ERROR ROUTINE
*
FIRSTPRM DS    0H
         LA    R9,2(,R1)           SET POINTER TO 1ST KEYWORD
         B     PARSLVL1            GO TO LEVEL 1 PARSE ROUTINE
*
         TITLE 'PERFORM SOME ADDITIONAL INITIALIZATION FOR PROCESSING'
*
PARSDONE DS    0H
*        OPEN SYSPRINT AND SNAPDUMP DCBS IF THEIR DD CARDS EXISTS
*
         L     R1,PSATOLD          GET ADDRESS OF CURRENT TCB
         USING TCB,R1              MAP IT
         L     R8,TCBTIO           GET ADDRESS OF TIOT
         USING TIOT1,R8            MAP IT
         LA    R8,TIOENTRY         BUMP PTR TO 1ST DD ENTRY
         USING TIOENTRY,R8         MAP IT
         XR    R7,R7               CLEAR LENGTH HOLDER
*
TIOTLOOP DS    0H
         CLC   TIOENTRY(4),=4X'00' IS THIS ENTRY THE END?
         BE    TIOTDONE            IF SO, WE'RE DONE
         CLC   TIOEDDNM(8),=C'SYSPRINT' IS THIS A SYSPRINT DD CARD?
         BE    OPENSYSP            IF SO, GO OPEN DCB
         CLC   TIOEDDNM(8),=C'SNAPDUMP' IS THIS A SNAPDUMP DD CARD?
         BE    OPENSNAP            IF SO, GO OPEN DCB
         CLC   TIOEDDNM(8),=C'SMTPMAIL' IS THIS A SMTPMAIL DD CARD?
         BE    OPENSMTP            IF SO, GO OPEN DCB
         CLC   TIOEDDNM(8),=C'NOTIFY  ' IS THIS A NOTIFY DD CARD?
         BE    OPENNOTI            IF SO, GO OPEN DCB
         CLC   TIOEDDNM(8),=C'SMTP    ' IS THIS A SMTP SYSOUT CARD?
         BE    FLGSMTP             YES:  GO FLAG SMTP PROVIDED
         B     BUMPTIOT            ELSE, BUMP PTR TO NEXT TIOT ENTRY
*
OPENSYSP DS    0H
         OPEN  (SYSPRINT,(OUTPUT)) OPEN THE DCB
         LTR   R15,R15             DID OPEN GO O.K.?
         BNZ   SYSPFAIL            NO:  GO OUTPUT ERROR MESSAGE
         OI    FLAGS,PRINTIT       TURN ON FLAG TO ACTIVATE PRINT RTN
         B     BUMPTIOT            CONTINUE SEARCH FOR OTHER DDNAME
*
OPENSNAP DS    0H
         OPEN  (SNAPDUMP,(OUTPUT)) OPEN THE DCB
         OI    FLAGS,SNAPIT        TURN ON FLAG TO ACTIVATE SNAP RTN
         B     BUMPTIOT            CONTINUE SEARCH FOR OTHER DDNAME
*
OPENSMTP DS    0H
         TM    FLAG2,NOEMAIL       HAS EMAIL BEEN DISALLOWED?
         BO    BUMPTIOT            YES:  BYPASS SMTPMAIL OPEN
         OPEN  (SMTPMAIL,(OUTPUT)) OPEN THE DCB
         LTR   R15,R15             DID OPEN GO O.K.?
         BNZ   MAILFAIL            NO:  GO OUTPUT ERROR MESSAGE
         OI    FLAG2,MAILPROV      TURN ON FLAG TO SMTPMAIL PROVIDED
         B     BUMPTIOT            CONTINUE SEARCH FOR OTHER DDNAME
*
FLGSMTP  DS    0H
         OI    FLAGS,SMTPPROV      FLAG THAT SMTP OUTPUT PROVIDED
         B     BUMPTIOT            CONTINUE SEARCH FOR OTHER DDNAME
*
OPENNOTI DS    0H
         TM    FLAG2,NOEMAIL       HAS EMAIL BEEN DISALLOWED?
         BO    BUMPTIOT            YES:  BYPASS NOTIFY OPEN
         OPEN  (NOTIFY,(INPUT))    OPEN THE DCB
         LTR   R15,R15             DID OPEN GO O.K.?
         BNZ   NOTIFAIL            NO:  GO OUTPUT ERROR MESSAGE
         OI    FLAG2,NOTISCAN      SET FLAG NOTIFY SCAN IS IN PROGRESS
SCANLOOP EQU   *
         GET   NOTIFY,RECORD       GO READ RECORD
         CLI   RECORD,C'*'         IS THIS A COMMENT?
         BE    SCANLOOP            YES:  GO READ AGAIN
         OI    FLAGS,NOTIPRES      TURN ON FLAG TO ACTIVATE NOTIFY RTN
         NI    FLAG2,255-NOTISCAN  RESET SCANNING FLAG
         LA    R1,16               HEX 10
         L     R2,0(R1)            ADDRESS OF CVT
         USING CVT,R2
         L     R3,CVTSMCA          ADDRESS OF SMF CONTROL AREA
         USING SMCABASE,R3
         MVC   SMFID,SMCASID       SAVE SMFID
         DROP  R2,R3
         CLC   SMFID,=C'B303'      IS THIS THE B MACHINE?
         BE    SETBDOM             YES:  GO SET B DOMAIN NAMES
         CLC   SMFID,=C'ASYS'      IS THIS THE A MACHINE?
         BE    SETBDOM             YES:  GO SET B DOMAIN NAMES
         CLC   SMFID,=C'DSYS'      IS THIS THE D MACHINE?
         BE    SETDDOM             YES:  GO SET D DOMAIN NAMES
         CLC   SMFID,=C'ESYS'      IS THIS THE E MACHINE?
         BE    SETDDOM             YES:  GO SET D DOMAIN NAMES
         CLC   SMFID,=C'TEST'      IS THIS THE T MACHINE?
         BE    SETTDOM             YES:  GO SET T DOMAIN NAMES
DOMADONE EQU   *
         MVC   HELOMSG+09(8),DOMAIN MOVE IN DOMAIN NAME
         MVC   SUBJDOMN,DOMAIN     MOVE IN DOMAIN NAME
         MVC   SUBJSMF,SMFID       MOVE IN SMFID INTO SUBJECT
         B     BUMPTIOT            GO CHECK NEXT TIOT ENTRY
*
BUMPTIOT DS    0H
         IC    R7,TIOELNGH         GET THE LENGTH OF THIS ENTRY
         LA    R8,TIOENTRY(R7)     BUMP THE POINTER TO THE NEXT ENTRY
         B     TIOTLOOP            GO CHECK NEXT ENTRY
         DROP  R8                  DISCONTINUE MAPPING
*
         EJECT
TIOTDONE DS    0H
         TM    FLAGS,NOTIPRES      WAS NOTIFY SUCCESSFULLY DETECTED?
         BO    *+8                 YES:  BYPASS KILLING EMAIL
         OI    FLAG2,NOEMAIL       NO:  KILL EMAIL
         TM    FLAG2,NOEMAIL       HAS EMAIL BEEN DISALLOWED?
         BO    MAILDONE            YES:  BYPASS NOTIFY OPEN
****************************************************************
*        ADD DYNAMIC OUTPUT STATEMENT                          *
****************************************************************
         TM    FLAGS,SMTPPROV      WAS A SMTP OUTPUT PROVIDED?
         BO    SMTPDONE            YES:  BYPASS SMTP DYNALLOC
         OI    OUTPTR01,S99TUPLN   TURN ON HIGH ORDER BYTE
OUTSMTP  OUTADD SYSNAME=SMTPDDN,TEXTPTR=OUTPTR01,MF=(E,SMTPLIST)
         LTR   R15,R15             DID ADD GO O.K.?
         BNZ   ERROR02             GO OUTPUT ERROR MESSAGE
         OI    FLAGS,OUTADDOK      TURN ON FLAG THAT DYNAM OUTADD DONE
SMTPDONE EQU   *
         TM    FLAG2,MAILPROV      WAS A SMTPMAIL DD SYSOUT PROVIDED?
         BO    MAILDONE            YES:  BYPASS SMTP DYNALLOC & OPEN
         OI    S99RBPTR,S99TUPLN   TURN ON HI ORDER BYTE
         OI    S99TXEND,S99TUPLN   TURN ON HI ORDER BYTE
         LA    R1,S99RBPTR         LOAD ADDR OF PARM LIST
         DYNALLOC                  INVOKE DYNALLOC SVC
         LTR   R15,R15             DID IT ALLOC O.K. ?
         BNZ   ERROR01             NO:  ISSUE ERROR MSG
         OI    FLAG2,MAILDYNA      SET FLAG FOR DYNAMIC SMTPMAIL DD
         MVC   SMTPMAIL+40(8),OUTDDN SAVE DDNAME TO DCB ALSO
         MVC   S99DEADD,OUTDDN     SAVE DDNAME FOR UNALLOC
         OPEN  (SMTPMAIL,(OUTPUT)) OPEN THE DCB
         LTR   R15,R15             DID OPEN GO O.K.?
         BZ    MAILDONE            CONTINUE PROCESSING
         OI    FLAG2,DYNSMTFA+NOEMAIL SET FLAG THAT OPEN OF DYNAMIC
*                                  SMTPMAIL DATASET FAILED
         B     MAILFAIL            GO OUTPUT ERROR MESSAGE
         SPACE 1
*
*        MAKE SURE WE'RE APF-AUTHORIZED IF USER= WAS SPECIFIED
*
MAILDONE EQU   *
         TM    FLAGS,SENDIT        WAS "USER=" SPECIFIED?
         BZ    GETTIME             IF NOT, SKIP THIS
         TESTAUTH FCTN=1           SEE IF WE'RE AUTH'D (TO ISSUE CMDS)
         LTR   R15,R15             ARE WE?
         BZ    GETTIME             IF SO, SKIP REST OF THIS
         LA    R1,PARMERR5         LOAD ADDRESS OF ERROR MESSAGE
         BAL   R11,ERRORRTN        GO TO ERROR ROUTINE
         MVI   RETCODE+3,X'08'     SET NON-ZERO RETURN CODE
         TM    FLAGS,WTOIT+PRINTIT WERE ANY OTHER OPTIONS SELECTED?
         BZ    END                 IF NOT, GO END
         MVI   RETCODE+3,X'04'     ELSE, SET LESS-SEVERE RETURN CODE
         NI    FLAGS,255-SENDIT    TURN OFF SEND ROUTINE
*
*        GET TIME AND DATE
*
GETTIME  DS    0H
         XC    TIMEDATE,TIMEDATE   ZERO RETURN AREA
         TIME  DEC,TIMEDATE,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY
         LTR   R15,R15             DID TIME GO O.K.?
         BNZ   TIMERROR            GO OUTPUT ERROR MESSAGE
*        DERIVE THE CORRECT DAY
         L     R5,TIMEDATE+8       LOAD DATE VALUE INTO REG AGAIN
         SLL   R5,8                SHIFT OFF MONTH
         SRL   R5,20               SHIFT OFF YEAR & 4 EXTRA BITS
         O     R5,=X'0000000F'     PLACE VALID SIGN IN REGISTER
         ST    R5,PACKWORK+4       SAVE INTO WORKING STORAGE
         UNPK  J1DAY,PACKWORK+6(2) UNPACK INTO MSG LINE
*        DERIVE THE CORRECT YEAR
         L     R5,TIMEDATE+8       LOAD DATE VALUE INTO REG AGAIN
         SLL   R5,16               SHIFT OFF DAY & MONTH
         SRL   R5,12               SHIFT BACK TO LOW ORDER SIDE
         O     R5,=X'0000000F'     PLACE VALID SIGN IN REGISTER
         ST    R5,PACKWORK+4       SAVE INTO WORKING STORAGE
         UNPK  J1YEAR,PACKWORK+5(3) UNPACK INTO MSG LINE
*        DERIVE THE CORRECT MONTH
         L     R5,TIMEDATE+8       LOAD DATE VALUE INTO REG
         SRL   R5,20               SHIFT OFF UNNECESSARY BITS
         ST    R5,PACKWORK+4       SAVE INTO WORKING STORAGE
         OI    PACKWORK+7,X'0F'    PLACE VALID SIGN INTO FIELD
         CVB   R5,PACKWORK         CONVERT TO BINARY
         SLL   R5,2                MULTIPLY BY 4 TO GET OFFSET
         LA    R6,MONTHS-4         POINT TO MONTHS TABLE -4
         LA    R6,0(R5,R6)         POINT TO CORRECT MONTH
         MVC   J1MONTH,0(R6)       MOVE MONTH TO PRINT LINE
*
DOTIME   EQU   *
         MVN   TIMEDATE+3(1),=X'0F' MAKE VALID PACKED NUMBER
         ED    TIME-1(9),TIMEDATE  EDIT IN VALUE
         SPACE 2
*
*        GET JOBNAME, JESJOBID, AND POINTER TO FIRST SCT
*
         L     R1,PSATOLD          GET ADDRESS OF CURRENT TCB (US)
         USING TCB,R1              MAP IT
         ICM   R1,B'0111',TCBJSCBB GET ADDRESS OF JSCB
         USING IEZJSCB,R1          MAP IT
         L     R4,JSCBJCT          GET ADDRESS OF JCT
         LA    R4,16(,R4)          BUMP PTR OVER JCT PREFIX
         USING INJMJCT,R4          MAP IT
         L     R8,JSCBSSIB         GET ADDRESS OF SSIB
         USING SSIB,R8             MAP IT
         MVC   JESJOBID(1),SSIBJBID MOVE J, T, OR S IDENTIFIER INTO MSG
         MVC   JESJOBID+1(5),SSIBJBID+3 MOVE JES JOB NUMBER INTO MSG
         DROP  R8                  DISCONTINUE MAPPING WITH R1
         MVC   JOBNAME(8),JCTJNAME MOVE JOBNAME INTO MESSAGE
*
         TM    FLAGS,SNAPIT        DID A SNAPDUMP DDNAME EXIST?
         BZ    SCTS                IF NOT, SKIP SNAPS
         ST    R4,SNAPLIST         STORE ADDR OF JCT
         LA    R0,176(,R4)         LOAD ADDR OF END OF JCT
         ST    R0,SNAPEND          STORE IT
         OI    SNAPEND,X'80'       TURN ON END-OF-LIST INDICATOR
         LA    R0,JCTHDR           LOAD ADDR OF TITLE LINE
         ST    R0,HDRLIST          STORE IT
         OI    HDRLIST,X'80'       TURN ON END-OF-LIST INDICATOR
         SNAP  DCB=SNAPDUMP,LIST=SNAPLIST,STRHDR=HDRLIST STAP AREA
*
*        ST    R8,SNAPLIST         STORE ADDR OF SSIB
*        LA    R0,36(,R8)          LOAD ADDR OF END OF SSIB
*        ST    R0,SNAPEND          STORE IT
*        OI    SNAPEND,X'80'       TURN ON END-OF-LIST INDICATOR
*        LA    R0,SSIBHDR          LOAD ADDR OF TITLE LINE
*        ST    R0,HDRLIST          STORE IT
*        OI    HDRLIST,X'80'       TURN ON END-OF-LIST INDICATOR
*        SNAP  DCB=SNAPDUMP,LIST=SNAPLIST,STRHDR=HDRLIST STAP AREA
*
         TITLE 'PROCESS SCTS'
*
SCTS     DS    0H
         L     R10,JCTSDKAD        GET TTR ADDRESS OF FIRST SCT
         L     R3,LISTPTR          LOAD ADDRESS OF END OF USED LIST
SCTLOOP  DS    0H
         SRL   R10,8               CORRECT SCT ADDRESS
         LA    R10,16(,R10)        BUMP PTR OVER SCT PREFIX
         USING INSMSCT,R10         MAP SCT
*
         TM    FLAGS,SNAPIT        DID A SNAPDUMP DDNAME EXIST?
         BZ    NOSCTSNP            IF NOT, SKIP SNAPS
         ST    R10,SNAPLIST        STORE ADDR OF SCT
         LA    R0,176(,R10)        LOAD ADDR OF END OF SCT
         ST    R0,SNAPEND          STORE IT
         OI    SNAPEND,X'80'       TURN ON END-OF-LIST INDICATOR
         LA    R0,SCTHDR           LOAD ADDR OF TITLE LINE
         ST    R0,HDRLIST          STORE IT
         OI    HDRLIST,X'80'       TURN ON END-OF-LIST INDICATOR
         SNAP  DCB=SNAPDUMP,LIST=SNAPLIST,STRHDR=HDRLIST STAP AREA
*
NOSCTSNP DS    0H
         TM    SCTSTEND,SCTSTPND   THIS STEP BEEN EXECUTED(OR FLUSHED)?
         BO    SCTCOMP             IF SO, CONTINUE
         TM    FLAGS,SNAPIT        DID A SNAPDUMP DDNAME EXIST?
         BZ    END                 IF NOT, WE'RE DONE
         B     NEXTSCT2            ELSE, RUN ALL SCTS
*
SCTCOMP  DS    0H
         CLC   SCTPGMNM(8),PGMNAME IS THIS ONE A COMPCODE?
         BE    NEXTSCT2            IF SO, GO BUMP TO NEXT SCT
         CLI   STEPLIST,C'*'       NO STEPS SPECIFIED?
         BE    SHOWIT              IF SO, SHOW ALL STEPS
         LA    R2,STEPLIST         SET POINTER TO BEGINNING OF STEPLIST
*
LOOP     DS    0H
         CR    R2,R3               IS THIS THE END OF THE LIST?
         BNL   NEXTSCT2            IF SO, GO BUMP PTR TO NEXT SCT
         CLI   8(R2),C'*'          STEPNAME.* SPECIFIED?
         BNE   CHECKALL            IF NOT, GO CHECK STEPNAME & PRCSTPNM
*
         CLC   0(8,R2),SCTSCLPC    ELSE, IS THIS STEPNAME IN THE LIST?
         BE    SHOWIT              IF SO, GO DISPLAY IT
         LA    R2,16(,R2)          ELSE, BUMP TO NEXT LIST ENTRY,
         B     LOOP                AND TRY IT
*
CHECKALL DS    0H
         CLC   0(16,R2),SCTSCLPC   DO STEPNAME AND PRCSTPNM MATCH?
         BE    SHOWIT              IF SO, GO DISPLAY IT
BUMPSCT  DS    0H
         LA    R2,16(,R2)          ELSE, BUMP TO NEXT LIST ENTRY,
         B     LOOP                AND TRY IT
         SPACE 3
TIMERROR EQU   *
         MVC   J1MONTH,=CL4'X'     SET BOGUS MONTH
         MVC   J1YEAR,=CL4'X'      SET BOGUS MONTH
         MVC   J1DAY,=CL2'X'       SET BOGUS MONTH
         B     DOTIME              GO DO TIME
*
         TITLE 'COMPLETE MESSAGE AND DISPLAY IT'
*
SHOWIT   DS    0H
         TM    SCTABCND,SCTABEND   DID THIS STEP ABEND?
         BZ    CHKFLSH             IF NOT, GO CHECK FOR FLUSHED STEP
         MVC   RESULT(9),ABENDED   MOVE "ABEND" INTO MESSAGE
         L     R14,SCTXBTTR        LOAD POINTER TO SCT EXTENSION
         SRL   R14,8               SHIFT TO 24 BIT ADDR
         LTR   R14,R14             IS THERE AN EXTENSION?
         BZ    NOSCTXSN            NO:  BYPASS STORAGE DUMP
         LA    R14,16(,R14)        POINT TO CORRECT ADDRESS
         USING SCTXIN,R14          POINT TO EXTENSION BLOCK
         TM    FLAGS,SNAPIT        DID A SNAPDUMP DDNAME EXIST?
         BZ    USSCTXSN            IF NOT, SKIP SNAPS
         ST    R14,SNAPLIST        STORE ADDR OF SCT
         LA    R0,176(,R14)        LOAD ADDR OF END OF SCTX
         ST    R0,SNAPEND          STORE IT
         OI    SNAPEND,X'80'       TURN ON END-OF-LIST INDICATOR
         LA    R0,SCTXHDR          LOAD ADDR OF TITLE LINE
         ST    R0,HDRLIST          STORE IT
         OI    HDRLIST,X'80'       TURN ON END-OF-LIST INDICATOR
         SNAP  DCB=SNAPDUMP,LIST=SNAPLIST,STRHDR=HDRLIST STAP AREA
USSCTXSN EQU   *
         XR    R1,R1               ZERO WORK REG
         ICM   R1,B'0111',SCTXABCC+1 LOAD SYSTEM ABEND CODE
         DROP  R14                 KILL ADDRESSABILITY TO SCTX
         LTR   R1,R1               DO WE HAVE AN ABEND CODE?
         BNZ   *+10                YES:  DON'T USE JCT CODE
NOSCTXSN EQU   *
         XR    R1,R1               ZERO WORK REG
         ICM   R1,B'0111',JCTACODE+1 GET ABEND CODE
         LA    R0,4095             GET MAXIMUM USER ABEND CODE
         CR    R1,R0               IS THIS A USER ABEND?
         BH    SYSTEM              IF NOT, PROCESS AS SYSTEM ABEND
*
         CVD   R1,PACKWORK         CONVERT ABEND VALUE TO DECIMAL
         UNPK  CONDCODE(5),PACKWORK+5(3) UPPACK IT INTO MSG
         OI    CONDCODE+4,X'F0'    CORRECT THE SIGN
         MVI   CONDCODE,C'U'       MOVE IN USER ABEND IDENTIFIER
         MVI   CONDCODE+5,C','     ADD COMMA
         B     BLANKFLD            SKIP PROCESSING NORMAL COND CODE
*
SYSTEM   DS    0H
         SRL   R1,12               SHIFT TO LOW-ORDER BYTES
         ST    R1,ABEND            STORE IT
         H2C   CONDCODE,ABEND+2,4  CONVERT SYSTEM ABEND CODE TO CHAR
         MVI   CONDCODE,C'S'       MOVE IN SYSTEM ABEND IDENTIFIER
         MVI   CONDCODE+4,C','     ADD COMMA
         B     BLANKFLD            SKIP PROCESSING NORMAL COND CODE
*
CHKFLSH  DS    0H
         TM    SCTSTEND,SCTSTSRT   DID THIS STEP EVER START?
         BO    CC                  IF SO, GO GET CONDITION CODE
         MVC   RESULT(9),FLUSHED   MOVE "FLUSHED" INTO MESSAGE
         MVC   CONDCODE(4),=C'----' MOVE DASHES INTO CONDE CODE FIELD
         MVI   CONDCODE+4,C','     ADD COMMA
         B     BLANKFLD            SKIP PROCESSING NORMAL COND CODE
*
CC       DS    0H
         MVC   RESULT(9),ENDED     MOVE "ENDED" INTO MESSAGE
         LH    R1,SCTSEXEC         GET STEP COMPLETION CODE
         CVD   R1,PACKWORK         CONVERT IT TO PACKED DECIMAL
         UNPK  CONDCODE(4),PACKWORK+5(3) UNPACK IT INTO DISPLAY FIELD
         OI    CONDCODE+3,X'F0'    CORRECT THE SIGN
         MVI   CONDCODE+4,C','     ADD COMMA
*
BLANKFLD DS    0H
         MVI   STEPNAME,C' '       SEED BLANK
         MVC   STEPNAME+1(16),STEPNAME BLANK OUT STEPNAME/PRCSTPNM FLD
         CLI   SCTSCLPC,C' '       DOES THIS STEP CALL A PROC?
         BNE   MOVEPROC            IF SO, GO MOVE IT AND PRCSTPNM IN
         MVC   STEPNAME(8),SCTSNAME MOVE PRCSTPNM INTO DISPLAY FIELD
         B     SENDRTN             GO DISPLAY IT
*
MOVEPROC DS    0H
         MVC   STEPNAME(8),SCTSCLPC MOVE IN STEPNAME
         MVI   PERIOD,C'.'         MOVE IN SEPARATOR
         MVC   PRCSTPNM(8),SCTSNAME MOVE IN PRCSTPNM
         EJECT
*
SENDRTN  DS    0H
         TM    FLAGS,SENDIT        ARE WE SUPPOSED TO SEND IT?
         BZ    WTORTN              IF, NOT SKIP IT
         MVC   SENDBUF(LMESSAGE),MESSAGE MOVE MESSAGE INTO BUFFER
*        APFAUTH ON                TURN ON APF-AUTHORIZATION
         MODESET MODE=SUP,KEY=ZERO GET INTO SUP STATE, KEY 0 FOR SVC34
         LA    R1,SEND             GET ADDRESS OF SEND PARMLIST
         XR    R0,R0               SPECIFY "SYSTEM-ENTERED COMMAND"
         SVC   34                  ISSUE COMMAND SVC
         MODESET MODE=PROB,KEY=NZERO GET BACK INTO PROBLEM STATE
*        APFAUTH OFF               TURN OFF APF-AUTHORIZATION
*
WTORTN   DS    0H
         TM    FLAGS,WTOIT         ARE WE SUPPOSED TO WTO IT?
         BZ    PRINTRTN            IF, NOT SKIP IT
         MVC   WTOBUF(LMESSAGE),MESSAGE MOVE MESSAGE INTO BUFFER
         WTO   MF=(E,WTO)          WTO THE MESSAGE
*
PRINTRTN DS    0H
         TM    FLAGS,PRINTIT       ARE WE SUPPOSED TO PRINT IT?
         BZ    NEXTSCT             IF, NOT SKIP IT
         MVC   PRINTBUF(LMESSAGE),MESSAGE MOVE MESSAGE INTO BUFFER
         PUT   SYSPRINT,PRINTBUF   PRINT THE MESSAGE
*
NEXTSCT  DS    0H
         TM    FLAG2,NOEMAIL       HAS EMAIL BEEN SQUASHED?
         BO    *+8                 YES:  BYPASS EMAIL SETUP
         BAL   R11,NOTIPROS        GO MAKE INTERNET NOTIFICATIONS
         MVI   CONDCODE+5,C' '     BLANK FIELD IF USED
NEXTSCT2 EQU   *
         ICM   R10,B'1111',SCTANSCT LOAD ADDRESS OF NEXT SCT,
         BNZ   SCTLOOP             AND PROCESS IT
*
END      DS    0H
         TM    SYSPRINT+48,X'10'   WAS THE SYSPRINT DCB OPENED?
         BZ    CLOSESNP            IF NOT, JUST END
         CLOSE SYSPRINT            ELSE, CLOSE DCB
*
CLOSESNP DS    0H
         TM    SNAPDUMP+48,X'10'   WAS THE SNAPDUMP DCB OPENED?
         BZ    CLOSESMT            NO:  GO CHECK SMT FILE
         CLOSE SNAPDUMP            ELSE, CLOSE DCB
*
CLOSESMT DS    0H
         TM    SMTPMAIL+48,X'10'   WAS THE SMTPMAIL DCB OPENED?
         BZ    UNALMAIL            GO CHECK FOR DYNAMIC ALLOC
         PUT   SMTPMAIL,BLANMSG    GO OUTPUT BLANK LINE MSG
         PUT   SMTPMAIL,BLANMSG    GO OUTPUT BLANK LINE MSG
         CLOSE SMTPMAIL            CLOSE DCB
UNALMAIL EQU   *
         TM    FLAG2,MAILDYNA      WAS SMTPMAIL DYNAMICALLY ADDED?
         BNO   DELOUTP             NO:  BYPASS DYNAMIC UNALLOC
***********************************************************************
*  PLACE DYNAMIC UNALLOC FOR SMTPMAIL HERE                            *
***********************************************************************
*
*
         MVI   S99VERB,X'02'       SET DYNALLOC VERB FOR UNALLOC
         LA    R1,S99DEALC         POINT TO UNALLOCATION PARM LIST
         ST    R1,S99PTR01         SET AS FIRST TEXT UNIT
         OI    S99RBPTR,S99TUPLN   SET HI-ORDER BYTE OF PARM LIST
         OI    S99PTR01,S99TUPLN   AND ONLY TEXT UNIT
         LA    R1,S99RBPTR         LOAD ADDR OF PARM LIST
         DYNALLOC                  GO PERFORM UNALLOCATION
DELOUTP  DS    0H
         TM    FLAGS,OUTADDOK      DID WE DYNAMICALLY ADD OUTPUT CARD?
         BNO   ALLDONE             NO:  BYPASS DELETE
         OUTDEL NAME=SMTPDDN,MF=(E,SMTPDEL)
ALLDONE  DS    0H
         L     R15,RETCODE         LOAD RETURN CODE
         L     R13,4(,R13)         RELOAD CALLER'S REGISTER 13
         L     R14,12(,R13)        RELOAD CALLER'S REGISTER 14
         LM    R0,R12,20(R13)      RESTORE CALLER'S REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE 3
SYSPFAIL EQU   *
         MVC   DYNAFMSG(9),=C' ****OPEN' OVERWRITE MESSAGE
         MVC   DYNAFDDN,=C'SYSPRINT' MOVE IN DDNAME
         ST    R15,ABEND           SAVE OPEN RETURN CODE
         H2C   DYNAFRTC,ABEND+2,4  CONVERT TO PRINTABLE
         LA    R1,DYNAFMSG         POINT TO CORRECT MSG
         LA    R11,BUMPTIOT        GO WTO OPEN FAILURE
         NI    FLAGS,255-PRINTIT   RESET PRINT FLAG
         BAL   R11,ERRORRTN        GO OUTPUT FORMAT RETURN CODE
         MVC   DYNAFMSG(9),=C' DYNALLOC' PUT BACK TO ORIGINAL TEXT
         MVI   RETCODE+3,X'04'     SET WARNING RETURN CODE
         B     BUMPTIOT            GO PROCESS NEXT DDCARD
         SPACE 2
NOTIFAIL EQU   *
         MVC   DYNAFMSG(9),=C' ****OPEN' OVERWRITE MESSAGE
         MVC   DYNAFDDN,=C'NOTIFY  ' MOVE IN DDNAME
         OI    FLAG2,NOEMAIL       SET FLAG DISALLOWING E-MAIL
         B     ABENDRTC            GO OUTPUT FORMAT RETURN CODE
         SPACE 2
MAILFAIL EQU   *
         MVC   DYNAFMSG(9),=C' ****OPEN' OVERWRITE MESSAGE
         MVC   DYNAFDDN,=C'SMTPMAIL' MOVE IN DDNAME
         B     ABENDRTC            GO OUTPUT FORMAT RETURN CODE
         SPACE 2
ERROR01  EQU   *
         MVC   DYNAFDDN,=C'SMTPMAIL' MOVE DD IDENTIFIER TO PRT MSG
ABENDRTC EQU   *
         OI    FLAG2,NOEMAIL       SET FLAG DISALLOWING E-MAIL
         ST    R15,ABEND           SAVE OPEN RETURN CODE
         H2C   DYNAFRTC,ABEND+2,4  CONVERT TO PRINTABLE
         TM    FLAGS,PRINTIT       DO WE HAVE A SYSPRINT?
         BNO   WTOMSG              NO:  GO WTO ERROR MESSAGE
         PUT   SYSPRINT,DYNAFMSG   OUTPUT ERROR MESSAGE
         MVC   DYNAFMSG(9),=C' DYNALLOC' PUT BACK TO ORIGINAL TEXT
         MVI   RETCODE+3,X'04'     SET WARNING RETURN CODE
         TM    FLAG2,DYNSMTFA      DID OPEN OF DYNAMICALLY ALLOC
*                                  SMTPMAIL DATASET FAIL?
         BO    MAILDONE            GO PROCESS WITHOUT EMAIL
         B     TIOTDONE            GO HANDLE WITHOUT EMAIL NOTIFICATION
         SPACE 3
ERROR02  EQU   *
         MVC   DYNAFMSG(9),=C' **OUTADD' OVERWRITE MESSAGE
         MVC   DYNAFDDN(8),=C'SMTP    ' MOVE DD IDENTIFIER TO PRT MSG
         OI    FLAG2,NOEMAIL       KILL EMAIL PROCESSING
         B     ABENDRTC            GO BUILD REST OF MSG
         SPACE 2
ERROR03  EQU   *
         OI    FLAG2,NOEMAIL       KILL EMAIL PROCESSING
         MVI   RETCODE+3,X'04'     SET WARNING RETURN CODE
         LA    R1,NOTIERR1         POINT TO NOTIFY ERROR MESSAGE
         BAL   R11,ERRORRTN        GO OUTPUT ERROR MESSAGE
         B     BUMPTIOT            GO CHECK NEXT TIOT ENTRY
         SPACE 2
WTOMSG   EQU   *
         LA    R1,DYNAFMSG+1       LOAD POINTER TO ERROR MESSAGE
         BAL   R11,ERRORRTN        GO OUTPUT ERROR MESSAGE
         B     BUMPTIOT            GO CHECK FOR NEXT DDCARD
*
         TITLE 'PARSE ROUTINES'
*
*        LEVEL 1 PARSE ROUTINE (KEYWORD PROCESSING ROUTINE)
*
PARSLVL1 DS    0H
         LA    R1,KEYWORDS         GET ADDRESS OF KEYWORD LIST
KEYLOOP  DS    0H
         CLI   0(R1),C' '          IS THIS THE END OF THE KEYWORD LIST?
         BNE   CHECKKEY            IF NOT, CONTINUE
*
         MVI   RETCODE+3,X'08'     SET NON-ZERO RETURN CODE
         LA    R1,PARMERR2         LOAD ADDRESS OF ERROR MESSAGE
         LA    R11,END             LOAD RETURN ADDRESS
         B     ERRORRTN            GO TO ERROR ROUTINE
*
CHECKKEY DS    0H
         CLC   0(4,R9),0(R1)       IS THIS A VALID KEYWORD?
         BE    FOUNDKEY            IF SO, GO LOAD LEVEL 3 ROUTINE ADDRS
         LA    R1,12(,R1)          ELSE BUMP TO NEXT KEYWORD,
         B     KEYLOOP             AND TRY IT
*
FOUNDKEY DS    0H
         L     R7,4(,R1)           LOAD ADDRESS OF PRIMARY LEVEL 3 RTN
         L     R8,8(,R1)           LOAD ADDRESS OF LEVEL 3 END ROUTINE
         LA    R1,5(,R9)           LOAD ADDRESS PAST XXXX=
         B     PARSLVL2            GO TO LEVEL 2 PARSE ROUTINE
*
KEYWORDS DS    0F
         DC    C'USER',A(PARSUSER,USEREND)
         DC    C'ROUT',A(PARSROUT,ROUTEND)
         DC    C'STEP',A(PARSSTEP,STEPEND)
         DC    C' '
         EJECT
*
*        LEVEL 2 PARSE ROUTINE (DELIMITER PROCESSING ROUTINE)
*
PARSLVL2 DS    0H
         CLI   0(R1),C'('          IS THIS A VALID "OPEN" DELIMITER
         BE    PARMSCAN            IF SO, CONTINUE
*
         MVI   RETCODE+3,X'08'     SET NON-ZERO RETURN CODE
         LA    R1,PARMERR3         LOAD ADDRESS OF ERROR MESSAGE
         LA    R11,END             LOAD RETURN ADDRESS
         B     ERRORRTN            GO TO ERROR ROUTINE
*
PARMSCAN DS    0H
         LA    R5,1(,R1)           SET BASE POINTER IN PARM
         LA    R6,1(,R5)           SET POINTER TO SCAN FOR DELIMITER
*
PARMLOOP DS    0H
         CLI   0(R6),C','          IS THIS A PARM SEPARATOR?
         BE    PARMSEP             IF SO, GO PROCESS IT
         CLI   0(R6),C')'          IS THIS PARM END?
         BE    PARMEND             IF SO, GO PROCESS IT
         LA    R6,1(,R6)           BUMP POINTER
         B     PARMLOOP            PROCESS NEXT CHARACTER
*
PARMSEP  DS    0H
         BALR  R11,R7              GO TO APPROPRIATE LEVEL 3 ROUTINE
         LR    R1,R6               COPY ADDRESS OF DELIMITER
         B     PARMSCAN            PROCESS NEXT PARM
*
PARMEND  DS    0H
         BALR  R11,R7              GO TO APPROPRIATE LEVEL 3 ROUTINE
         BALR  R11,R8              GO TO APPROPRIATE LVL 3 END ROUTINE
         CLI   1(R6),C','          IS THERE ANOTHER PARM KEYWORD?
         BNE   PARSDONE            IF NOT, PARSING IS DONE
*
         LA    R9,2(,R6)           ELSE, LOAD ADDRESS OF NEXT KEYWORD,
         B     PARSLVL1            AND GO PROCESS IT
         EJECT
*
*        LEVEL 3 ROUTINE (USER PARM AND USER END PROCESSING ROUTINES)
*
PARSUSER DS    0H
         BR    R11                 NO PROCESSING TILL END OF PARM
*
USEREND  DS    0H
         LR    R1,R6               COPY ADDRESS OF END OF PARM FIELD
         SR    R1,R9               GET LENGTH OF PARM (WITH KEYWORD)
*
         LA    R14,SENDBUF+LMESSAGE GET ADDR OF 1ST BYTE PAST MESSAGE
         MVI   0(R14),X'7D'        MOVE IN CLOSE QUOTE
         MVI   1(R14),C','         MOVE IN COMMA
*
         EX    R1,*+8              SAVE USER PARM FIELD FOR SEND CMD
         B     *+10                BRANCH AROUND EX ISN
         MVC   2(0,R14),0(R9)      EX ISN
*
         LA    R14,3(R1,R14)       BUMP POINTER PAST USER= PARM
         MVC   0(6,R14),=C',LOGON' MOVE IN END OF MESSAGE
         LA    R14,6(,R14)         GET END POINTER
         LA    R15,SEND            GET ADDRESS OF SEND COMMAND
         SR    R14,R15             GET TOTAL LENGTH OF COMMAND
         STH   R14,SEND            STORE IT IN SEND PARMLIST
*
         OI    FLAGS,SENDIT        TURN ON FLAG TO ACTIVATE SEND RTN
         BR    R11                 RETURN TO CALLING ROUTINE
         EJECT
*
*        LEVEL 3 ROUTINE (ROUT PARM AND ROUT END PROCESSING ROUTINES)
*
PARSROUT DS    0H
         LH    R0,ROUTCDE          LOAD ACCUMULATED ROUTCDE
         LR    R1,R6               COPY END POINTER
         SR    R1,R5               GET LENGTH OF PARM
         BCTR  R1,0                SUBTRACT ONE FOR EX ISN
         EX    R1,*+8              PACK ROUTCODE
         B     *+10                BRANCH AROUND EX ISN
         PACK  PACKWORK(8),0(0,R5) PACK ROUTCODE
*
         CVB   R1,PACKWORK         CONVERT IT TO BINARY
         BCTR  R1,0                SUBTRACT ONE FOR 1-16, NOT 0-15
         STC   R1,SHIFTISN+3       ALTER SHIFT ISN FOR CORRECT LENGTH
         L     R1,=X'00008000'     LOAD SEED
SHIFTISN DS    0H
         SRL   R1,0                SHIFT CORRECT AMOUNT
         OR    R0,R1               ADD THIS ROUTCDE TO ACCUMULATOR
         STH   R0,ROUTCDE          STORE UPDATED ROUTCDE
         BR    R11                 RETURN TO CALLING ROUTINE
*
ROUTEND  DS    0H
         MVC   WTOBUF+LMESSAGE(4),WTOCODES MOVE IN DESCRIPT & ROUTCDES
         LA    R0,LMESSAGE+4       GET WTO PARMLIST LENGTH
         STH   R0,WTO              STORE LENGTH IN PARMLIST
         OI    FLAGS,WTOIT         TURN ON FLAG TO ACTIVATE WTO RTN
         BR    R11                 RETURN TO CALLING ROUTINE
         EJECT
*
*        LEVEL 3 ROUTINE (STEP PARM AND STEP END PROCESSING ROUTINES)
*
PARSSTEP DS    0H
         L     R1,LISTPTR          LOAD CURRENT LIST POINTER
         L     R0,LISTNUM          LOAD CURRENT LIST ENTRY COUNTER
         BCT   R0,STPINIT1         DECREMENT COUNTER AND CONTINUE
*
         MVI   RETCODE+3,X'08'     SET NON-ZERO RETURN CODE
         LA    R1,PARMERR4         LOAD ADDRESS OF ERROR MESSAGE
         LA    R11,END             LOAD RETURN ADDRESS
         B     ERRORRTN            GO TO ERROR ROUTINE
*
STPINIT1 DS    0H
         LR    R14,R5              COPY POINTER TO BEGINNING OF PARM
STPINIT2 DS    0H
         LA    R15,1(,R14)         LOAD POINTER TO FIRST CHAR TO CHECK
STEPLOOP DS    0H
         CR    R15,R6              IS THIS END OF PARM?
         BNL   DELIMIT1            IS SO, PROCESS PARM
*
         CLI   0(R15),C'.'         IS THIS DELIMITER FOR PRCSTPNM
         BE    DELIMIT2            IF SO, PROCESS IT
*
         LA    R15,1(,R15)         ELSE, BUMP POINTER,
         B     STEPLOOP            AND CONTINUE
*
DELIMIT2 DS    0H
         SR    R15,R14             CALCULATE LENGTH OF PARM
         BCTR  R15,0               SUBTRACT ONE FOR EX ISN
         EX    R15,*+8             MOVE STEPNAME INTO LIST
         B     *+10                BRANCH AROUND EX ISN
         MVC   0(0,R1),0(R14)      EX ISN
         LA    R14,2(R15,R14)      BUMP BASE TO PRCSTPNM
         B     STPINIT2            GO PROCESS PRCSTPNM
*
DELIMIT1 DS    0H
         SR    R15,R14             CALCULATE LENGTH OF PARM
         BCTR  R15,0               SUBTRACT ONE FOR EX ISN
         EX    R15,*+8             MOVE PRCSTPNM INTO LIST
         B     *+10                BRANCH AROUND EX ISN
         MVC   8(0,R1),0(R14)      EX ISN
         LA    R1,16(,R1)          BUMP POINTER TO NEXT SLOT IN LIST
*
         ST    R1,LISTPTR          STORE CURRENT LIST POINTER
         ST    R0,LISTNUM          STORE CURRENT LIST ENTRY COUNTER
         BR    R11                 RETURN TO CALLING ROUTINE
*
STEPEND  DS    0H
         CLI   STEPLIST,C'*'       WAS "LIST ALL" FLAG NOT OVERWRITTEN?
         BNER  R11                 IF OVERWRITTEN, JUST RETURN
         MVI   STEPLIST,C' '       ELSE, BLANK FLAG OUT
         BR    R11                 RETURN TO CALLING ROUTINE
         SPACE 3
NOTIPROS EQU   *
         TM    FLAG2,NOEMAIL       HAS E-MAIL BEEN DISALLOWED?
         BOR   R11                 YES:  DONE HERE
         TM    FLAGS,EMAILINT      HAS EMAIL BEEN INITIALIZED?
         BO    MOVESUBJ            YES:  GO MOVE SUBJECT ONLY
         OI    FLAGS,EMAILINT      SET FLAG AS INITIAL STUFF DONE
         PUT   SMTPMAIL,HELOMSG    GO OUTPUT HELO MESSAGE
         PUT   SMTPMAIL,RETNMSG    GO OUTPUT RETURN ADDR MESSAGE
         B     GET1DONE            INITIAL GET ALREADY DONE
**************************************************************
*       BUILD RECEIPENTS CARDS                               *
**************************************************************
GETCARD  EQU   *
         GET   NOTIFY,RECORD       GET EMAIL ADDRESS
         CLI   RECORD,C'*'         IS THIS A COMMENT?
         BE    GETCARD             YES:  GO GET ANOTHER RECORD
GET1DONE EQU   *
         MVC   RCPTID(RCPTIDL),RECORD  MOVE RECORD TO CARD
         LA    R15,RCPTID          LOAD ADDRESS TO BEGIN CHECK FROM
         LA    R14,RCPTIDL         LOAD MAX TIMES THROUGH LOOP
NAMELOOP EQU   *
         CLI   0(R15),C' '         END OF NAME?
         BE    DOPUT               YES:  GO DO PUT
         LA    R15,1(,R15)         NO:  BUMP TO NEXT CHARACTER
         BCT   R14,NAMELOOP        GO CHECK NEXT CHARACTER
DOPUT    EQU   *
         MVI   0(R15),C'>'         PUT IN CLOSING CHARACTER
         PUT   SMTPMAIL,RCPTMSG    GO OUTPUT RECEIPENT MESSAGE
         MVI   RCPTID,C' '         BLANK OUT FIRST CHARACTER
         MVC   RCPTID+1(RCPTIDL-1),RCPTID BLANK FIELD FOR NEXT USE
         B     GETCARD             GO DO ANOTHER NOTIFY CARD
         SPACE 2
READEND  EQU   *
         TM    FLAG2,NOTISCAN      WAS A SCAN IN PROGRESS?
         BO    ERROR03             YES:  GO TERMMINATE EMAIL PROCESSING
         PUT   SMTPMAIL,DATAMSG    GO OUTPUT DATA MESSAGE
         PUT   SMTPMAIL,XMAIMSG    GO OUTPUT XMAIL MESSAGE
         PUT   SMTPMAIL,FROMMSG    GO OUTPUT FROM MESSAGE
         PUT   SMTPMAIL,SUBJMSG    GO OUTPUT SUBJECT MESSAGE
         PUT   SMTPMAIL,MIMVMSG    GO OUTPUT MIME VERSION MESSAGE
         PUT   SMTPMAIL,CONTMSG    GO OUTPUT CONTENT TYPE MESSAGE
         PUT   SMTPMAIL,BOUNMSG    GO OUTPUT BOUNDARY TYPE MESSAGE
         PUT   SMTPMAIL,MIMPMSG    GO OUTPUT MIME PAGE TYPE MESSAGE
         PUT   SMTPMAIL,CONYMSG    GO OUTPUT CONTENT TYPE MESSAGE
         PUT   SMTPMAIL,BLANMSG    GO OUTPUT BLANK LINE MESSAGE
MOVESUBJ EQU   *
         MVC   EMAILMSG(LMESSAGE),MESSAGE MOVE MESSAGE TO EMAIL LINE
         PUT   SMTPMAIL,EMAIMSG    GO OUTPUT ACTUAL MESSAGE TEXT
         BR    R11                 RETURN TO CALLER
         SPACE 3
SETBDOM  EQU   *
         MVC   DOMAIN,=CL8'SAOTOWER' SET CORRECT DOMAIN FOR SMFID
         B     DOMADONE            DOMAIN ESTABLISHMENT DONE
         SPACE 1
SETDDOM  EQU   *
         MVC   DOMAIN,=CL8'SAONORTH' SET CORRECT DOMAIN FOR SMFID
         B     DOMADONE            DOMAIN ESTABLISHMENT DONE
         SPACE 1
SETTDOM  EQU   *
         MVC   DOMAIN,=CL8'SAOTEST ' SET CORRECT DOMAIN FOR SMFID
         B     DOMADONE            DOMAIN ESTABLISHMENT DONE
         SPACE 1
LISTPTR  DC    A(STEPLIST)
LISTNUM  DC    A(NUMNAMES+1)
*
         TITLE 'ERROR MESSAGE ROUTINE'
*
ERRORRTN DS    0H
         MVC   ERRORWTO+19(50),0(R1) MOVE ERROR MESSAGE INTO WTO
ERRORWTO WTO   'COMPCODE - 12345678901234567890123456789012345678901234X
               567890',ROUTCDE=11
         BR    R11                 RETURN TO CALLING ROUTINE
*
PARMERR1 DC    CL50'PARMLIST DOES NOT END WITH A CLOSE PARENTHESIS'
*
PARMERR2 DC    CL50'PARMLIST CONTAINS UNRECOGINIZED KEYWORD'
*
PARMERR3 DC    CL50'OPEN PARENTHESIS NOT FOUND FOR KEYWORD'
*
PARMERR4 DC    CL50'MORE THAN 16 STEPNAMES SPECIFIED'
*
PARMERR5 DC    CL50'UNABLE TO ISSUE SEND COMMANDS, NOT APF-AUTHORIZED'
*
NOTIERR1 DC    CL50'NO NOTIFY ADDRESSES DETECTED. EMAIL TERMINATED.  '
*
         TITLE 'WTO, SEND, AND PRINT CONTROL BLOCK CONSTANTS'
*
WTOCODES DS    0H
DSCPTCDE DC    B'0000000000000000' DESCRIPTOR CODES (NONE)
ROUTCDE  DC    B'0000000000000000' ROUTE CODE(S)
*
*
WTO      DC    H'0'                TEXT LENGTH
         DC    B'1000000000000000' MCS FLAGS
WTOBUF   DC    CL80' '             MSG, DESCRIPTOR AND ROUTCDES
*
SEND     DC    H'0'                COMMAND LENGTH
         DC    H'0'                CONSOLE ID
         DC    C'SE ',X'7D'        MESSAGE PREFIX
SENDBUF  DC    (LMESSAGE+34)C' '   ALLOW FOR MSG AND -
*                                  ',USER=(XXXXXXX),LOGON   (22 CHARS)
*
PRINTBUF DC    CL133' '
*
MESSAGE  DS    0H
JOBNAME  DC    C'XXXXXXXX('
JESJOBID DC    C'XYYYYY)- '
STEPNAME DC    C'XXXXXXXX'
PERIOD   DC    C'.'
PRCSTPNM DC    C'XXXXXXXX '
RESULT   DC    C'         '
         DC    C'CODE '
CONDCODE DC    C'XXXX   '
J1DAY    DC    C'01'
         DC    C' '
J1MONTH  DC    C'JAN'
         DC    C' '
J1YEAR   DC    C'1979'
         DC    C' '
TIME     DC    X'20217A20207A2020'
LMESSAGE EQU   *-MESSAGE
*
         TITLE 'SMTP CONTROL CARDS '
*
HELOMSG  DS    0H
         DC    AL2(HELOMSGL),AL2(0)
         DC    C'helo SAOTEST '
HELOMSGL EQU   *-HELOMSG
RETNMSG  DS    0H
         DC    AL2(RETNMSGL),AL2(0)
         DC    C'mail from:<COMPCODE@company.com>'
RETNMSGL EQU   *-RETNMSG
RCPTMSG  DS    0H
         DC    AL2(RCPTMSGL),AL2(0)
         DC    C'rcpt to:<'
RCPTID   DC    CL60' '
RCPTIDL  EQU   *-RCPTID
RCPTMSGL EQU   *-RCPTMSG
DATAMSG  DS    0H
         DC    AL2(DATAMSGL),AL2(0)
         DC    C'data '
DATAMSGL EQU   *-DATAMSG
XMAIMSG  DS    0H
         DC    AL2(XMAIMSGL),AL2(0)
         DC    C'x-mailer: COMPCODE Program'
XMAIMSGL EQU   *-XMAIMSG
FROMMSG  DS    0H
         DC    AL2(FROMMSGL),AL2(0)
         DC    C'From:  COMPCODE Program'
FROMMSGL EQU   *-FROMMSG
SUBJMSG  DS    0H
         DC    AL2(SUBJMSGL),AL2(0)
         DC    C'Subject: JOB/STEP Notification - Tower Computer Centerx
                - NJE Network Node: '
SUBJDOMN DC    CL8' '
         DC    CL10'  SYSID: '
SUBJSMF  DC    CL4' '
         DC    CL2' '
SUBJMSGL EQU   *-SUBJMSG
MIMVMSG  DS    0H
         DC    AL2(MIMVMSGL),AL2(0)
         DC    C'Mime-Version 1.0'
MIMVMSGL EQU   *-MIMVMSG
CONTMSG  DS    0H
         DC    AL2(CONTMSGL),AL2(0)
         DC    C'Content-Type: multipart/mixed'
CONTMSGL EQU   *-CONTMSG
BOUNMSG  DS    0H
         DC    AL2(BOUNMSGL),AL2(0)
         DC    C'boundary="Mime.Part.CONDCODE.24jul651rhg.0x0zaxld"'
BOUNMSGL EQU   *-BOUNMSG
MIMPMSG  DS    0H
         DC    AL2(MIMPMSGL),AL2(0)
         DC    C'--Mime.Part.CONDCODE.24jul651rhg.0x0zaxld'
MIMPMSGL EQU   *-MIMPMSG
CONYMSG  DS    0H
         DC    AL2(CONYMSGL),AL2(0)
         DC    C'Content-Type: text/plain'
CONYMSGL EQU   *-CONYMSG
BLANMSG  DS    0H
         DC    AL2(BLANMSGL),AL2(0)
         DC    C'                        '
BLANMSGL EQU   *-BLANMSG
EMAIMSG  DS    0H
         DC    AL2(EMAIMSGL),AL2(0)
EMAILMSG DC    (LMESSAGE)C' '
EMAIMSGL EQU   *-EMAIMSG
CHARMSG  DS    0H
         DC    AL2(CHARMSGL),AL2(0)
         DC    C'Charset="US-ASCII"'
CHARMSGL EQU   *-CHARMSG
CON7MSG  DS    0H
         DC    AL2(CON7MSGL),AL2(0)
         DC    C'Content-Transfer-Encoding: 7bit'
CON7MSGL EQU   *-CON7MSG
ENDEMSG  DS    0H
         DC    AL2(ENDEMSGL),AL2(0)
         DC    C'--Mime.Part.CONDCODE.24jul651rhg.0x0zaxld--'
ENDEMSGL EQU   *-ENDEMSG
*
         TITLE 'SNAPDUMP CONSTANTS'
*
SNAPLIST DS    F
SNAPEND  DS    F
HDRLIST  DS    F
*
JCTHDR   DC    AL1(LJCTHDR-1)
         DC    C'SNAP DUMP OF JOB CONTROL TABLE (JCT)'
LJCTHDR  EQU   *-JCTHDR
*
SSIBHDR  DC    AL1(LSSIBHDR-1)
         DC    C'SUBSYSTEM IDENTIFICATION BLOCK (SSIB)'
LSSIBHDR EQU   *-SSIBHDR
*
SCTHDR   DC    AL1(LSCTHDR-1)
         DC    C'STEP CONTROL TABLE (SCT) (ONE PER STEP)'
LSCTHDR  EQU   *-SCTHDR
*
SCTXHDR  DC    AL1(LSCTXHDR-1)
         DC    C'STEP CONTROL TABLE EXT (SCTX) (ONE PER STEP)'
LSCTXHDR EQU   *-SCTXHDR
*
         TITLE 'OTHER MISCELANEOUS CONSTANTS'
*
PACKWORK DS    D
RETCODE  DC    F'0'
ABEND    DS    F,X
FLAGS    DC    X'00'
*
SENDIT   EQU   X'80'
WTOIT    EQU   X'40'
PRINTIT  EQU   X'20'
SNAPIT   EQU   X'10'
SMTPPROV EQU   X'08'
EMAILINT EQU   X'04'
NOTIPRES EQU   X'02'               NOTIFY CARD PRESENT
OUTADDOK EQU   X'01'               DYNAMIC OUTADD DONE
FLAG2    DC    X'00'
MAILPROV EQU   X'80'               SMTPMAIL DD CARD PROVIDED
NOEMAIL  EQU   X'40'               EMAIL NOT ALLOWED
MAILDYNA EQU   X'20'               SMTPMAIL DYNAMICALLY ALLOCATED
NOTISCAN EQU   X'10'               NOTIFY IS SCANNING FOR VALID MAIL ID
DYNSMTFA EQU   X'08'               OPEN OF DYN ALLOC SMTPMAIL FAILED
         DS    0F
MONTHS   DC    CL4'JAN'
         DC    CL4'FEB'
         DC    CL4'MAR'
         DC    CL4'APR'
         DC    CL4'MAY'
         DC    CL4'JUN'
         DC    CL4'JUL'
         DC    CL4'AUG'
         DC    CL4'SEP'
         DC    CL4'OCT'
         DC    CL4'NOV'
         DC    CL4'DEC'
TIMEDATE DS    CL16
DOMAIN   DC    CL8' '
SMFID    DC    CL4' '
*
ABENDED  DC    CL9'ABENDED,'
FLUSHED  DC    CL9'FLUSHED,'
ENDED    DC    CL9'ENDED,'
*
STEPLIST DC    CL16'*'
         DC    15CL16' '
NUMNAMES EQU   (*-STEPLIST)/16
*
         TITLE 'DYNAMIC ALLOCATION CONSTANTS'
         DS    0F
S99RBPTR DC     AL4(S99RB)         POINTER TO REQUEST BLOCK
S99RB    DS     0F                 REQUEST BLOCK
S99RBLN  DC     X'14'              LENGTH OF REQUEST BLOCK
S99VERB  DC     XL1'01'            VERB CODE
S99FLAG1 DS     0CL2               FLAGS
S99FLG11 DS     CL1                FIRST FLAGS BYTE
S99FLG12 DS     CL1                SECOND BYTE OF FLAGS
S99RSC   DS     0CL4               REASON CODE FIELDS
S99ERROR DS     XL2                ERROR REASON CODE
S99INFO  DS     XL2                INFORMATION REASON CODE
S99TXTPP DC     A(S99TUPL)         ADDR OF LIST OF TEXT UNIT PTRS
S99RSV01 DS     F                  RESERVED
S99FLAG2 DS     0CL4               FLAGS FOR AUTHORIZED FUNCTIONS
S99FLG21 DS     CL1                FIRST BYTE OF FLAGS
S99FLG22 DS     CL1                SECOND BYTE OF FLAGS
S99FLG23 DS     CL1                THIRD BYTE OF FLAGS
S99FLG24 DS     CL1                FOURTH BYTE OF FLAGS
S99RBEND EQU    *                  END MARKER
***********************************************************************
* SVC 99 TEXT UNIT POINTER LIST
***********************************************************************
S99TUPL  DS     0F                 TEXT UNIT POINTER LIST
S99PTR01 DC     A(S99TXT01)        TEXT UNIT POINTER TO DDNAME
S99PTR02 DC     A(S99TXT02)        TEXT UNIT POINTER TO SYSOUT=B
S99TXEND DC     A(S99TXT03)        TEXT UNIT POINTER TO OUTPUT=SMTP
S99TUPLN EQU    X'80'              LAST TEXT UNIT POINTER IN LIST
***********************************************************************
* SVC 99 TEXT UNIT
***********************************************************************
S99SYS01 DS    0F
S99TXT01 DC    X'005500010008'    ALLOC DDN FOR SMTPMAIL
OUTDDN   DC    CL8' '             SYSTEM RETURNED OUTPUT DDNAME
S99TXT02 DC    X'001800010001',C'B' CLASS B OUTPUT
S99TXT03 DC    X'800200010008'    DDNAME OF OUTPUT CARD
SMTPDDN  DC    CL8'SMTP'          DEFAULT IN CASE NOT DYNAMIC ALLOC
         SPACE
S99DEALC DS    0H
         DC    X'000100010008'
S99DEADD DC    CL8'SMTPMAIL'      DEFAULT IN CASE NOT DYNAMIC
***********************************************************************
* OUTADD TEXT POINTERS
***********************************************************************
         DS    0F
SMTPLIST OUTADD MF=L
SMTPDEL  OUTDEL MF=L
OUTPTR01 DC    AL4(OUTTXT01)
OUTTXT01 DC    X'000C00010004',C'SMTP' STC SMTP PROC NAME
RECORD   DC    CL80' '
DYNAFMSG DS    0CL133
         DC    CL21' DYNALLOC FAILED FOR '
DYNAFDDN DC    CL8' '
         DC    CL17'. RETURN CODE IS '
DYNAFRTC DC    CL4' '
         DC    CL83'.  EMAIL NOTIFICATION TERMINATED.'
         PRINT NOGEN
SYSPRINT DCB   DDNAME=SYSPRINT,                                        X
               DSORG=PS,                                               X
               MACRF=PM,                                               X
               RECFM=FB,                                               X
               LRECL=133,                                              X
               BLKSIZE=27930
*              EXLST=DCBEXIT
*
DCBEXIT  DCBEXIT BLKSIZE=6118      SEE MACRO EXPANSION
*
SNAPDUMP DCB   DDNAME=SNAPDUMP,                                        X
               DSORG=PS,                                               X
               MACRF=W,                                                X
               RECFM=VBA,                                              X
               LRECL=125,                                              X
               BLKSIZE=1632
*
SMTPMAIL DCB   DDNAME=SMTPMAIL,                                        X
               DSORG=PS,                                               X
               MACRF=PM,                                               X
               RECFM=VB,                                               X
               LRECL=125,                                              X
               BLKSIZE=27998
*
NOTIFY   DCB   DDNAME=NOTIFY,                                          X
               DSORG=PS,                                               X
               MACRF=GM,                                               X
               RECFM=FB,                                               X
               EODAD=READEND,                                          X
               LRECL=80
*
         IHAPSA                    PSA DSECT
         IKJTCB                    TCB DSECT
         IEZJSCB                   JSCB DSECT
         IEFSCTX                   SCTX DSECT
         IEFJSSIB                  SSIB DSECT
         IEFAJCTB                  JCT DSECT
         IEFASCTB                  SCT DSECT
         IEFTIOT1                  TIOT DSECT
*        IHADCB DSORG=PS           DCB DSECT
         DCBD   DSORG=PS           DCB DSECT
         IEESMCA
         CVT    DSECT=YES
         END
