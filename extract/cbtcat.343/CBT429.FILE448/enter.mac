         MACRO
&N       ENTER    &BASE=,&SAVE=,&ID=
.* General purpose entry point macro
.*  Mark C. Lawrence        ITS -- Stanford University
.*  Last revision  1996/10/03
.*  This macro saves registers, establishes base register(s), and
.*  provides standard save area linkage.
.*
.*
.*  This macro will save all registers according to the standard
.*  convention, chain save areas together in the standard way, load
.*  base register(s), issue any necessary USING instructions to the
.*  Assembler, and name the entry point.  The  entry point name
.*  will be the symbol naming the ENTER statement, if any, else the
.*  CSECT name.
.*
.*  The following keyword arguments are allowed:
.*
.*    BASE     is the  desired  base  register  (expressed  as  a
.*             decimal number).  It may be a list of numbers enclosed
.*             in parenthesis.  If omitted, the previously defined
.*             base register(s) will be used, and if none have been
.*             specified in a previous ENTER macro in this CSECT,
.*             then the default will be used.  The default is 12 if a
.*             save area is specified, else 13.
.*
.*    AREA     is the save area to be used.  It may be any type of
.*             symbol which may appear as the argument of a LA
.*             instruction.  If omitted, the save area defined in the
.*             first ENTER macro in this CSECT will be used, or, if
.*             this is the first invocation of the ENTER macro in
.*             this CSECT, then a save area will be generated.  If
.*             SAVE=0 is specified, no save area will be used.
.*
.*    ID       is an optional identifier string, which will be
.*             assembled at the entry point, in addition to the
.*             default identifier, which is the entry name, date and
.*             time of assembly.
.*
         GBLC  &SNAME,&CSECT
         GBLA  &B(16),&NBASE
         LCLB  &SAVEGEN
         LCLA  &IDL,&NB,&M,&BDISP,&SDISP,&JDISP
         LCLC  &BP,&STR,&U
         CNOP  0,4                 ALIGN
         AIF   ('&SYSECT' EQ '&CSECT').OLD   If not first entry
.*  Here if first entry this CSECT
&CSECT   SETC  '&SYSECT'           Remember CSECT name
.*  Define the default base register.
&NBASE   SETA  1                   Number of base registers
         AIF   ('&SAVE' NE '').DB1    If savearea specified
&B(1)    SETA  13                  Default base
         AGO   .SET
.DB1     ANOP
&B(1)    SETA  12                  Default base
.SET     ANOP
&SNAME   SETC  ''                  Save area name--none
         AIF   ('&N' NE '').ENTRY  If entry name
         AGO   .BC
.OLD     AIF   ('&N' EQ '').NN
.ENTRY   ENTRY &N
.*  Base registers
.BC      AIF   (N'&BASE EQ 0).BOK  None specified, use default
&NBASE   SETA  N'&BASE
.*  Copy list of base registers.
.BLOOP   ANOP
&NB      SETA  &NB+1
&B(&NB)  SETA  &BASE(&NB)
         AIF   (&NB LT &NBASE).BLOOP
.BOK     ANOP
.*  Save area
         AIF   ('&SAVE' EQ '').NOSAV    If none specified
.*  User specified a name; he can't also use R13 as base.
         AIF   (&B(1) EQ 13).BAD2  Can't use 13 here...
&SNAME   SETC  '&SAVE'             Save area name
         AGO   .SAVDONE
.NOSAV   ANOP
         AIF   ('&SNAME' NE '').SAVDONE  If name already set
&SNAME   SETC  'SAV&SYSNDX'        Generate save area name
&SAVEGEN  SETB  1                  Show save area generated
.SAVDONE ANOP
.*  Build an identifying string.
.*  First, the entry or CSECT name.
&STR     SETC  '&CSECT'
&M       SETA  K'&CSECT            Default -- CSECT name
         AIF   ('&N' EQ '').ID1    If no name on ENTER macro
&STR     SETC  '&N'                Use name on macro
&M       SETA  K'&N                and its length
.ID1     ANOP
.*  Next, the date and time assembled.
&STR     SETC  '&STR.-&SYSDATC.-&SYSTIME'
&M       SETA  &M+K'&SYSDATC+K'&SYSTIME+2
.*  If user coded ID, add it to the string.
         AIF   ('&ID' EQ '').NOID
.*  Strip off quotes if supplied.
         AIF   ('&ID'(1,1) NE '''').IDOK  If no quotes
&U       SETC  '&ID'(2,K'&ID-2)    Strip quotes
&IDL     SETA  K'&ID-2             Length
         AGO   .IDDONE
.IDOK    ANOP
&U       SETC  '&ID'
&IDL     SETA  K'&ID
.IDDONE  ANOP
&STR     SETC  '&STR.:&U'
&M       SETA  &M+&IDL+1
.NOID    ANOP
.*
.*  M is the length of the identifying string.  Now compute the
.*  displacements for various machine-instructions.
.*  &BDISP points to adcon for base address, which will follow ID
.*  The adcon will be omitted if BASE=13
&BDISP   SETA  ((&M+8)/4)*4        Length of ID+1 for length byte,
.*                                   +4 for instruction length,
.*                                   +3 for round to fullword
&SDISP   SETA  &BDISP              For save area or its adcon (init.)
         AIF   (&B(1) EQ 13).B13   If BASE=13, no adcon for base
&SDISP   SETA  &SDISP+4            Skip base adcon
.B13     ANOP
.*  &JDISP will be the displacement in the branch instruction.
&JDISP   SETA  &SDISP              Tentative
         AIF   ('&SNAME' EQ '0').SAVSPEC  Skip this stuff if no save
&JDISP   SETA  &JDISP+4            Allow for save area adcon
         AIF   (NOT &SAVEGEN).SAVSPEC  If save area not included here
&JDISP   SETA  &JDISP+68           Allow for save area (less the 4 we
.*                                 already allowed)
.SAVSPEC ANOP
.*
.*  Start generating instructions.
.*
&N       B     &JDISP.(0,15)       Branch around constants
         DC    AL1(&M)             ID length
         DC    CL&M'&STR'  ID
         AIF   (&B(1) EQ 13).B13A  If base 13, no adcon for base
         DC    A(&SYSECT)          Base address
&BP      SETC  '&SYSECT'           For using
         AGO   .SAVTST
.B13A    ANOP
&BP      SETC  '&SNAME'            For using
.SAVTST  AIF   (&SAVEGEN).SAVGEN   If save area to be generated
         AIF   ('&SNAME' EQ '0').STM   If no save
         DC    A(&SNAME)           Save area address
         AGO   .STM
.SAVGEN  ANOP
&SNAME   DS    18F                 Save area
.STM     STM   14,12,12(13)        Save registers
.*  Chain save areas
         AIF   (&SAVEGEN).SGB
         AIF   ('&SNAME' EQ '0').SAVE0    If no save
.*  Save area not in-line here.
         L     2,&SDISP.(15)       Save area address
         AGO   .CHAIN
.SAVE0   ANOP
         SR    2,2                 Show no
         ST    2,8(13)                low savearea
         AGO   .LOADB
.SGB     LA    2,&SDISP.(15)       Save area address
.CHAIN   ST    2,8(13)             Low savearea ptr in caller's area
         ST    13,4(2)             High savearea ptr in our save area
         LR    13,2                Save area address
         SR    2,2                 Zero
         ST    2,8(13)                our LSA pointer
.*
.*  Load base register(s)
.*
.LOADB   AIF   (&B(1) EQ 13).R13   Already loaded if 13
         L     &B(1),&BDISP.(15)   Base address
.R13     AIF   (&NBASE LT 2).USING If only one base reg
&NB      SETA  0
.LOOP    ANOP
&NB      SETA  &NB+1               Loop counter
         AIF   (&B(&NB+1) EQ 13).BAD5
         LA    &B(&NB+1),2048(&B(&NB))
         LA    &B(&NB+1),2048(&B(&NB+1))
         AIF   (&NBASE GT &NB+1).LOOP   If more regs to set up
.*  Generate the USING command.
.USING   ANOP
&NB      SETA  1                   Loop counter
&U       SETC  '&B(1)'             First base reg.
         AIF   (&NBASE EQ 1).UU    If only one
.ULOOP   ANOP
&NB      SETA  &NB+1               Bump counter
&U       SETC  '&U.,&B(&NB)'       Add next reg to string
         AIF   (&NB LT &NBASE).ULOOP   Do next one
.UU      USING &BP,&U
.DONE    MEXIT
.*
.*
.NN      MNOTE 4,'  WARNING:  No entry point name specified'
         AGO   .BC
.BAD2    MNOTE 4,'Can''t specify save area if BASE=13; SAVE ignored'
         AGO   .NOSAV              Continue...
.BAD5    MNOTE 8,'  Can''t use R13 as 2nd or subsequent base register'
         MEND
