         MACRO
&NAME BSPENTER &BASE=R3,                  , BASE REGISTER              +
               &RENT=YES,                 , MAKE REENTRANT PGM         +
               &DATA=WORKAREA,            , name of reentrant storage  +
               &SP=1,                     , SUBPOOL FOR SAVE AREA      +
               &CHAIN=YES                 , CHAIN SAVEAREAS
.**********************************************************************
.*                                                                    *
.* Name: BSPENTER                                                     *
.*                                                                    *
.* Type: Assembler macro                                              *
.*                                                                    *
.* Desc: Provide entry coding and house keeping for assembler modules *
.*                                                                    *
.* Use: <NAME> BSPENTER BASE=(REG1,...),                              *
.*                      CSECT=<YES×NO>,                               *
.*                      RENT=<YES×NO>,                                *
.*                      SP=<SUBPOOL NUMBER>                           *
.*                      CHAIN=<YES×NO>                                *
.*                                                                    *
.*       <NAME>   - A SYMBOLIC TAG ASSIGNED TO THE FIRST INSTRUCTION  *
.*                  GENERATED OR, IF APPLICABLE, TO THE CSECT CREATED *
.*                                                                    *
.*       BASE     - A LIST OF BASE REGISTERS TO BE USED.  THE DEFAULT *
.*                  IS REGISTER 3                                     *
.*                                                                    *
.*       RENT     - YES: REENTRANT CODE IS GENERATED BY THIS MACRO    *
.*                  NO:  NON-REENTRANT CODE IS GENERATED              *
.*                                                                    *
.*       SP       - SPECIFIES THE SUBPOOL NUMBER WHERE THE SAVE AREA  *
.*                  FOR REENTRANT CODE IS GETMAINED FROM              *
.*                  THE DEFAULT IS 1                                  *
.*                                                                    *
.*       CHAIN    - YES:  SAVE AREAS ARE TO BE CHAINED                *
.*                  NO: DO NOT CHAIN SAVE AREAS.  THIS IS INTENDED    *
.*                      FOR HIGH-USE REENTRANT MODULES TO AVOID  THE  *
.*                      OVERHEAD OF GETMAIN/FREEMAIN                  *
.*                                                                    *
.**********************************************************************
         COPY  BSPGLBLS                   , GET NAMES OF GLOBALS
         COPY  BSPSGLBL                   , SET GLOBALS
         GBLC  &BSPDSCT,&BSPDSCE,&BSPSP
         GBLB  &BSPRENT
         LCLA  &NUMREGS,&REGNO
         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&FIRST,&TMPDATA
         LCLC  &DATAEND,&BEG,&BYP,&LEN
&BSPRENT SETB  0
&BSPSP   SETC  '&SP'
&TMPDATA SETC  'BSPA'.'&SYSNDX'
&DATAEND SETC  'BSPB'.'&SYSNDX'           , SAVE AREA LABEL, END
&BEG     SETC  'BSPC'.'&SYSNDX'           , PROGRAM BEGIN LABEL
&BYP     SETC  'BSPD'.'&SYSNDX'           , END OF EYECATCHER
&LEN     SETC  'BSPE'.'&SYSNDX'           , LENGTH OF EYECATCHER
&BSPDSCT SETC  '&DATA'                    , NAME OF AUTOMATIC STORAGE
&BSPDSCE SETC  '&DATAEND'                 , end of getmain area
         AIF   ('&RENT' NE 'YES').NORENT
&BSPRENT SETB  1
         AIF   ('&DATA' NE '').DATA
&BSPDSCT SETC  '&TMPDATA'                 , NAME OF DATA AREA
         MNOTE 8,'REQUIRED OPERAND ''NAME'' MISSING. &BSPDSCT USED'
.DATA    ANOP
         AIF   ('&SP' NE '').SP
&BSPSP   SETC  '1'
         MNOTE 8,'REQUIRED OPERAND ''SP'' MISSING. SP=&BSPSP USED'
.SP      ANOP
.NORENT  ANOP
&BSPCSCT SETC  '&NAME'
         AIF   ('&NAME' NE '').CSECT
&BSPCSCT SETC  'BSPF'.'&SYSNDX'
         MNOTE 8,'REQUIRED OPERAND ''NAME'' MISSING. &BSPCSCT USED'
.CSECT   ANOP
         @     &BSPCSCT
&BSPCSCT BOX   'Module name .................. &BSPCSCT',              +
               'Writenn by ................... &BSPAUTH',              +
               'Assembly date ................ &SYSDATE',              +
               'Assembly time ................ &SYSTIME',              +
               'Workarea name ................ &BSPDSCT',
&BSPCSCT CSECT
         REGISTER
         USING &BSPCSCT,R15               , Temporary addressability
         B     &BYP                       , branch around eyecatcher
&BEG     EQU   *                          , Beginning of eyecatcher
         DC    AL1(&BYP-&BEG)             , Length of eyecatcher
         DC    CL8'&BSPCSCT'              , CSECT name
         DC    C' VER. &BSPVER..&BSPMOD ' , Version and Mod Level
         DC    C'&SYSDATE._&SYSTIME'      , ASSEMBLY DATE AND TIME
         DC    C' &BSPAUTH'               , Author
&BYP     DS    0H                         , end of eyecatcher
         STM   R14,R12,12(R13)            , save callers registers
&NUMREGS SETA  1
.CKBASE  ANOP
&REG     SETC  '&BASE(&NUMREGS)'(1,3)
         AIF   ('&REG'(1,1) NE 'R').SKIPBAS
&TEMP    SETC  '&REG'(2,2)
&REGNO   SETA  &TEMP
         AIF   (&REGNO LT 2).BADBASE
         AIF   (&REGNO GT 12).BADBASE
         AIF   (&REGNO NE 2).SETBASE
         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+
               ST INSTRUCTION WILL DESTROY CONTENTS.'
.SETBASE ANOP
         AIF   ('&FIRST' NE '').SETBAS2
         LR    &REG,R15                   , load base register
&FIRST   SETC  '&REG'
         AGO   .SETLAST
.SETBAS2 LA    &REG,2048(&LAST)           , add 2048 to last base
         LA    &REG,2048(&REG)            , make it 4096 for next base
.SETLAST ANOP
&LAST    SETC  '&REG'
&USING   SETC  '&USING.,&REG'
         AGO   .NEXTBAS
.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'
         AGO   .NEXTBAS
.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'
.NEXTBAS ANOP
&NUMREGS SETA  &NUMREGS+1
         AIF   (&NUMREGS LE N'&BASE).CKBASE
         DROP  R15                         , forget old base register
         USING &BSPCSCT.&USING             , TELL NEW BASE TO ASSEMBLER
.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE
         AIF   (&BSPRENT).GETMAIN
         LR    R15,R13                     , OLD SAVE AREA POINTER
         CNOP  0,4                    , Align to fullword boundary
         BAL   R13,&DATAEND           , Load new save area address
&DATA    DC    9CL8'&BSPCSCT'         , Save area
&DATAEND ST    R13,8(0,R15)           , Store into old save area
         AGO   .CHAIN
.GETMAIN ANOP
 MNOTE *,'GETMAIN R,LV=&BSPDSCE-&BSPDSCT,SP=&SP'
         GETMAIN R,LV=&BSPDSCE-&BSPDSCT,SP=&SP
         LR    R15,R13                , old save area pointer
         LR    R13,R1                 , r13 points to new save area
         USING &DATA,R13              , tell assembler
         LM    R0,R1,20(R15)          , restore original R0 and R1
.CHAIN   ST    R15,4(R13)             , address of old SA into new SA
         ST    R13,8(R15)             , address of new SA into old SA
.DONE    ANOP
         MEND
