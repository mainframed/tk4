         MACRO
&NAME    GENESIS &REGS=(14,12),&ID=*,&BASE=13,&SAVE=,&LV=,&SP=0,       *
               &CSECT=,&EQU=(N,N),&TYPE=
.*
         GBLA  &ESAVEC(2),&ESAVEL,&ESAVEB(2)
         GBLB  &ESAVES(3)
         GBLC  &ESAVEX
         LCLA  &A,&B,&C,&IDL,&R,&D
         LCLB  &F,&R13,&DC
         LCLC  &IDC
.*
.*       GENESIS (EXTENDED SAVE) FUNCTION
.*             REWRITTEN 09-01-74, MACRO LEVEL 4
.*
.*       THIS MACRO SUPPORTS THE FOLLOWING MODES: IN-LINE SAVE AREA,
.*       REMOTE SAVE AREA, DYNAMICALLY-OBTAINED SAVE AREA.     08-01-74
.*
.*       NOTE: THIS MACRO CALLS ITSELF RECURSIVELY TO EXPAND THE STM
.*             INSTRUCTION; THIS SAVES CODE FROM BEING DUPLICATED AND
.*             THE NECESSITY OF USING THE IBM SAVE MACRO WHICH IS
.*             NOT COMPATIBLE WITH ALL OF THE MODES SUPPORTED BY THIS
.*             MACRO.  THE TYPE PARAMETER DETERMINES IF THIS IS A
.*             RECURSIVE CALL TO THIS MACRO.
.*
.*
         AIF   ('&TYPE(1)' NE 'RECURSIVE').GO  IS THIS A RECURSIVE CALL
.*
         AIF   ('&NAME' EQ '').I1  IF SO, SHOULD WE GENERATE THE 'DS'?
&NAME    DS    0H
.I1      ANOP
         AIF   ('&REGS' NE '').I2  REGS MAY VALIDLY BE NULL
         MEXIT                     IF SO, WE DON'T GENERATE ANYTHING
.*
.I2      ANOP
&A       SETA  20+4*&REGS(1)       OFFSET IF &REGS(1) ISN'T 14 OR 15
         AIF   (&REGS(1) NE 14 AND &REGS(1) NE 15).I3
&A       SETA  12+(&REGS(1)-14)*4  OFFSET FOR 14 OR 15 TO FIRST WORD
.I3      ANOP
         AIF   (N'&REGS EQ 2).I5   IF STM IS DESIRED, GO PROCESS IT
.I4      ANOP
         AIF   ('&TYPE(2)' EQ 'L').I4A  IF CALLED FROM ERETURN
         ST    &REGS(1),&A.(,13)
         MEXIT
.I4A     ANOP
         L     &REGS(1),&A.(,13)
         MEXIT
.*
.I5      ANOP
         AIF   (&REGS(1) EQ &REGS(2)).I4  DON'T GEN A 'STM RX,RX,...'
         AIF   (&REGS(1) LT &REGS(2)).I6  WE WILL PERFORM THIS LOGICAL
         AIF   (&REGS(1) EQ 14 OR &REGS(1) EQ 15).I6  FOR THE USER
         IHBERMAC 1001,REGS,&REGS  ELSE FLAG INVALID STM SEQUENCE
         MEXIT
.*
.I6      ANOP
         AIF   ('&TYPE(2)' EQ 'L').I7  IF CALLED FROM ERETURN
         STM   &REGS(1),&REGS(2),&A.(13)
         MEXIT
.I7      ANOP
         LM    &REGS(1),&REGS(2),&A.(13)
         MEXIT
.*
.*       END OF RECURSIVE CALL PROCESSING
.*
.*
.*       NORMAL GENESIS PROCESSING
.*
.GO      ANOP
         AIF   ('&CSECT' EQ '').GX WE WILL PROCESS THE CSECT NAME FIRST
.*                                 SO THAT THE REST OF THE ASSEMBLY MAY
.*                                 PROCEED EVEN THO THERE MAY BE
.*                                 ERRORS IN THE GENESIS CALL.
&CSECT   CSECT
         AGO   .G1
.*
.GX      ANOP
         CNOP 0,8
.G1      ANOP
.*             NOW WE PROCEED WITH ERROR CHECKING ON THE INPUT PARMS.
.*
         AIF   ('&BASE' NE '').G2  WE MUST HAVE BASE REGISTERS
         IHBERMAC 1014,BASE        ELSE FLAG THE CALL
&F       SETB  1                   SET FAIL FLAG AND KEEP GOING
.*
.G2      ANOP
         AIF   (N'&REGS LE 2).G3   CAN HAVE AT MOST 2 REGS HERE
         IHBERMAC 1012,REGS        ELSE FLAG THE CALL
&F       SETB  1                   SET FAIL FLAG AND KEEP GOING
.*
.G3      ANOP
         AIF   ('&REGS' NE '').G3A BYPASS CHECKS IF REGS IS NULL
&ESAVEC(1) SETA 100                INDICATE NULL TO ERETURN
         AGO   .G5                 GO CHECK NEXT PARM
.G3A     ANOP
         AIF   (T'&REGS(1) EQ 'N').G4 FORCE THIS FOR SETA'S
         IHBERMAC 1001,REGS,&REGS(1)  ELSE FLAG THE CALL
&F       SETB  1                   SET FAIL FLAG AND KEEP GOING
         AGO   .G4A
.*
.G4      ANOP
&ESAVEC(1) SETA &REGS(1)
&ESAVEB(1) SETA &REGS(1)
.G4A     ANOP
&ESAVEC(2) SETA 100
&ESAVEB(2) SETA 99
         AIF   (N'&REGS EQ 1).G5   CAN'T CHECK 2 IF THERE'S ONLY 1
         AIF   (T'&REGS(2) EQ 'N').G4B FORCE THIS FOR SETA'S
         IHBERMAC 1001,REGS,&REGS(2) ELSE FLAG THE CALL
&F       SETB  1                   SET FAIL FLAG AND KEEP GOING
         AGO   .G5
.G4B     ANOP
&ESAVEC(2) SETA &REGS(2)
&ESAVEB(2) SETA &REGS(2)
.*
.G5      ANOP
         AIF   ('&SAVE' EQ '' OR '&LV' EQ '').G6  CAN'T HAVE BOTH
         IHBERMAC 1020,SAVE,LV     FLAG THE CALL
&F       SETB  1                   SET FAIL FLAG AND KEEP GOING
.*
.G6      ANOP                      SCAN ROUTINE FOR BASE=R13
&R       SETA  1                   INITIALIZE LOCATOR
.G7      ANOP
         AIF   ('&BASE(&R)' NE '13' AND '&BASE(&R)' NE 'R13').G8
&R13     SETB  1                   INDICATE R13 WAS FOUND
         AGO   .G9                 GO CONTINUE CHECKING
.G8      ANOP
&R       SETA  &R+1                BUMP LOCATOR
         AIF   (&R LE N'&BASE).G7  LOOP THRU BASE PARAMETER
.*
.G9      ANOP
         AIF   ('&SAVE' EQ '' OR NOT &R13).G10  CAN'T HAVE BOTH
         IHBERMAC 1020,SAVE,''BASE=&BASE(&R)''  FLAG THE CALL
&F       SETB  1                   SET FAIL FLAG AND KEEP GOING
.*
.G10     ANOP
         AIF   ('&LV' EQ '' OR NOT &R13).G11  CAN'T HAVE BOTH
         IHBERMAC 1020,LV,''BASE=&BASE(&R)''  FLAG THE CALL
&F       SETB  1                   SET FAIL FLAG AND KEEP GOING
.*
.G11     ANOP
         AIF   ('&SAVE' EQ '').G15 BYPASS SAVE CHECKING IF NULL
         AIF   (N'&SAVE EQ 1 OR N'&SAVE EQ 3 OR N'&SAVE EQ 4).G12
         IHBERMAC 1012,SAVE        ONLY GOOD VALUES AREA 1, 3, AND 4
&F       SETB  1                   SET FAIL FLAG AND KEEP GOING
.*
.G12     ANOP
         AIF   ('&SAVE(1)' NE '').G13  MUST HAVE SAVE AREA NAME
         IHBERMAC 1010,SAVE,FIRST  FLAG THE CALL
&F       SETB  1                   SET FAIL FLAG AND KEEP GOING
.*
.G13     ANOP
         AIF   (N'&SAVE EQ 1).G15  IF SAVE AREA ONLY, SKIP CHECKS
         AIF   ('&SAVE(3)' NE '').G14  MUST HAVE A REGISTER
         IHBERMAC 1010,SAVE,THIRD  FLAG THE CALL
&F       SETB  1                   SET FAIL FLAG AND CONTINUE
.*
.G14     ANOP
         AIF   ('&SAVE(2)' NE '' OR '&SAVE(4)' NE '').G15
         IHBERMAC 1001,SAVE,&SAVE  MUST HAVE ONE OR THE OTHER
&F       SETB  1                   SET FAIL FLAG AND CONTINUE
.*
.G15     ANOP
.*
.*       IF ANY OF THE PRECEEDING CHECKS FAILED, THE FAIL FLAG IS SET
.*       AND WE EXIT THE MACRO HERE.  FROM THIS POINT ON THE INPUT
.*       PARAMETERS ARE ASSUMED TO BE VALID.
.*
.G16     ANOP
         AIF   (NOT &F).GEN        IF FLAG IS OFF, GO GEN CODE
         MEXIT
.*
.*
.GEN     ANOP
&ESAVES(3) SETB 1                  INDICATE GENESIS IS GO
*
         AIF   ('&ID(1)' EQ '' AND '&LV' NE '').GEN0  SKIP USING
         USING *,15
         AIF   (NOT &R13 OR '&ID(2)' NE 'P').GEN0
*
&NAME    B     IHB&SYSNDX
*
         DROP  15
.*
.GEN0    ANOP
&IDL     SETA  0                   INITIALIZE ID LENGTH
         AIF   ('&ID(1)' EQ '').GEN10 IF NO ID, BYPASS THIS CODE
         AIF   ('&ID(1)' EQ '*').GEN7 IF CSECT NAME OR LABEL, GO PROCES
&IDL     SETA  K'&ID(1)            ELSE SET ID LENGTH
&IDC     SETC  '&ID(1)'            SET ID FOR LATER
         AGO   .GEN10              GO PROCESS BRANCH
.GEN7    ANOP
         AIF   ('&CSECT' NE '').GEN7A  USE GENERATED CSECT IF PRESENT
         AIF   ('&SYSECT' EQ ' ').GEN8  IF WE'RE IN PC GO USE &NAME
&IDL     SETA  K'&SYSECT           ELSE SET LENGTH
&IDC     SETC  '&SYSECT'           SET ID
         AGO   .GEN10              THEN GO PROCESS BRANCH
.GEN7A   ANOP
&IDL     SETA  K'&CSECT            SET LENGTH OF ID
&IDC     SETC  '&CSECT'            SET ID
         AGO   .GEN10              GO GENERATE BRANCH
.GEN8    ANOP
         AIF   ('&NAME' NE '').GEN9 IF THERE IS A NAME, USE IT
         IHBERMAC 78               ELSE FLAG FUNNY CONDITION
         AGO   .GEN10              AND KEEP GENERATING
.GEN9    ANOP
&IDL     SETA  K'&NAME             SET ID LENGTH
&IDC     SETC  '&NAME'             SET ID
.*
.*
.GEN10   ANOP
         AIF   (&R13).R13          IF R13 IS A BASE, IT MUST BE FIRST
         USING *,&BASE(1)
&A       SETA  2                   START SCAN AT SECOND
         AGO   .GEN1               GO GENERATE USINGS
.*
.R13     ANOP
&A       SETA  1
&D       SETA  0
         AIF   ('&ID(2)' NE 'P' OR &IDL EQ 0).GEN1A
&D       SETA  (&IDL+8)/4*4-4
         USING *+&D,&BASE(&R)
         AGO   .GEN1
.GEN1A   ANOP
         USING *,&BASE(&R)
&A       SETA  1                   START SCAN AT BEGINNING
.*
.GEN1    ANOP
         AIF   (N'&BASE EQ 1).GEN4  IF ONLY 1 BASE, SKIP LOOP
&B       SETA  4096+&D             AND SET OFFSET TO SECOND 4K
.GEN2    ANOP
         AIF   (&A EQ &R).GEN3     DON'T GENERATE R13 TWICE
         USING *+&B,&BASE(&A)
&B       SETA  &B+4096             BUMP TO NEXT 4K
.GEN3    ANOP
&A       SETA  &A+1                BUMP TO NEXT BASE REG
         AIF   (&A LE N'&BASE).GEN2 IF MORE TO GEN, LOOP THRU THEM
.*
.GEN4    ANOP
         AIF   (N'&SAVE LE 1).GEN6 IF NO COMMON AREA USING, BYPASS IT
         AIF   ('&SAVE(4)' EQ '').GEN5 TEST FOR DSECT NAME FIRST
         USING &SAVE(4),&SAVE(3)
         AGO   .GEN6               THEN GO PROCESS ID
.GEN5    ANOP
         USING &SAVE(2),&SAVE(3)
.GEN6    ANOP
*
         AIF   (&IDL EQ 0 AND '&LV' NE '').GEN34  IF NO BR, GO GEN RENT
         AIF   (&R13 AND '&ID(2)' EQ 'P').GEN6A
&NAME    B     IHB&SYSNDX
*
         DROP  15
.GEN6A   ANOP
&B       SETA  (&IDL+8)/4*4        OFFSET OF FIRST FULLWORD AFTER ID
         AIF   ('&SAVE' NE '' OR '&LV' NE '' OR                        *
               ('&ID(2)' EQ 'P' AND &IDL GT 0)).GEN11
         DC    17F'0'
&B       SETA  0                   RESET OFFSET TO SAVE AREA TO 0
.*
.GEN11   ANOP
         AIF   (&IDL EQ 0).GEN12   IF THERE IS NO ID, SKIP IT
         DC    AL1(&IDL),C'&IDC'
.*
.GEN12   ANOP
         AIF   ('&LV' NE '').GEN25 IF WE NEED RENT CODE, GO DO IT
         AIF   (&B EQ 0 OR '&SAVE' NE '').GEN13  IF ALREADY GEN'ED A SA
         DC    18F'0'
.*
.GEN13   ANOP
         AIF   ('&SAVE(2)' EQ '').GEN14  IF NO CSECT NAME, BYPASS IT
         DC    AL4(&SAVE(2))
.*
.GEN14   ANOP
*
IHB&SYSNDX GENESIS REGS=&REGS,TYPE=RECURSIVE  GENERATE THE STM
.*
         AIF   (&IDL GT 0 OR '&SAVE' NE '' OR &B GT 0).GEN21
.GEN14A  ANOP
         ST    13,4(,15)
         ST    15,8(,13)
.*
.GEN15   ANOP
         AIF   (N'&BASE EQ 1).GEN16 DON'T NEED LA FOR 1 BASE
         LA    14,4095
.*
.GEN16   ANOP
         AIF   (&R13).GEN17        IF WE NEED ONLY 13, GO DO IT
         AIF   ('&SAVE' NE '' OR &B GT 0).GEN16A
         LR    13,15
.GEN16A  ANOP
         LR    &BASE(1),15
&A       SETA  2                   SET BASE INDEX TO 2
&C       SETA  1                   SET LAST BASE TO 1
         AGO   .GEN18              GO GENERATE LA'S
.GEN17   ANOP
         AIF   (&B GT 0).GEN17A
         LR    &BASE(&R),15
.GEN17A  ANOP
&A       SETA  1                   SET BASE INDEX TO 1
&C       SETA  &R                  SET LAST BASE TO R13 LOCATOR
.GEN18   ANOP
         AIF   (&A GT N'&BASE).GEN20  IF ALL BASES SET, EXIT LOOP
         AIF   (&A EQ &R).GEN19    DON'T CLOBBER R13
         LA    &BASE(&A),1(14,&BASE(&C))
&C       SETA  &A                  COPY LAST GEN'ED BASE INDEX
.GEN19   ANOP
&A       SETA  &A+1                BUMP TO NEXT BASE
         AGO   .GEN18              LOOP THRU BASES
.*
.GEN20   ANOP
         AIF (N'&SAVE EQ 1).GEN24
*
         AGO   .EQU                GO TERMINATE MACRO
.*
.GEN21   ANOP
         AIF   ('&SAVE' NE '').GEN23 GO PROCESS REMOTE SAVE AREA
         AIF   (&B EQ 0).GEN14A    IF 17 WORD SA, GO SET UP REGS
         LR    14,13
         LA    13,&B.(,15)
.*
.GEN22   ANOP
         ST    14,4(,13)
         ST    13,8(,14)
         AIF (N'&SAVE EQ 1).EQU
         AGO   .GEN15              GO GENERATE LA'S
.*
.*       PROCESS REMOTE SAVE AREA
.*
.GEN23   ANOP
         AIF (N'&SAVE EQ 1).GEN15
         AIF   ('&SAVE(2)' EQ '').GEN24  NEED TO SET REG?
         AIF   (&IDL EQ 0).GEN23A
&C       SETA  &IDL+5
         AGO   .GEN23B
.GEN23A  ANOP
&C       SETA  4
.GEN23B  ANOP
         ICM   &SAVE(3),15,&C.(15)
.GEN24   ANOP
         LR    14,13
         LA    13,&SAVE(1)
         AGO   .GEN22              GO GENERATE LA'S
.*
.*       PROCESS REENTRANT CODE
.*
.GEN25   ANOP
         AIF   ('&ID' EQ '' OR &IDL GT 0).GEN26 NEED DROP?
         DROP  15
.*
.GEN26   ANOP
         AIF   (T'&LV EQ 'N' AND T'&SP EQ 'N').GEN28 MAY NOT NEED DC
.GEN27   ANOP
         DC    AL1(&SP),AL3(&LV)
&DC      SETB  1                   INDICATE DC GENERATED
         AGO   .GEN29              GO GENERATE STM
.*
.GEN28   ANOP
         AIF   (&LV GT 4096 OR &SP NE 0).GEN27 NEED DC FOR THESE
.GEN29   ANOP
*
IHB&SYSNDX GENESIS REGS=&REGS,TYPE=RECURSIVE GENERATE STM
.GEN30   ANOP
&ESAVES(1) SETB 1                  INDICATE RENT CODE
         LR    &BASE(1),15
         LR    14,1
         AIF   (&DC).GEN31         DID WE GENERATE A DC?
&ESAVEL  SETA  &LV                 SAVE LENGTH
         LA    0,&LV
         AGO   .GEN32              THEN GO CONTINUE CODE
.GEN31   ANOP
         AIF   (&IDL EQ 0).GEN31A
&C       SETA  &IDL+5
         AGO   .GEN31B
.GEN31A  ANOP
&C       SETA  4
.GEN31B  ANOP
&ESAVES(2) SETB 1                  INDICATE DC GEN'ED
&ESAVEL  SETA  &C                  SAVE OFFSET
&ESAVEX  SETC  '&BASE(1)'          COPY BASE REG
         ICM   0,15,&C.(15)
.GEN32   ANOP
         LNR   1,15
         SVC   10
         ST    13,4(,1)
         ST    1,8(,13)
         ST    15,8(,1)
         LR    13,1
         LR    1,14
         AIF   (N'&BASE EQ 1).GEN20 GO GENERATE THE *
         LA    14,4095
&A       SETA  2                   SET INDEX
.GEN33   ANOP
         AIF   (&A GT N'&BASE).GEN20  EXIT HERE WHEN DONE
         LA    &BASE(&A),1(14,&BASE(&A-1))
&A       SETA  &A+1                BUMP TO NEXT GUY
         AGO   .GEN33              LOOP THRU BASES
.*
.GEN34   ANOP
         AIF   (T'&LV NE 'N' OR T'&SP NE 'N').GEN11  NEED BRANCH?
         AIF   (&LV GT 4095 OR &SP NE 0).GEN11  IF SO, GO GEN IT
*
&NAME    GENESIS REGS=&REGS,TYPE=RECURSIVE GEN STM
         AGO   .GEN30              GO GEN RENT CODE
.*
.*
.*       PROCESS EQUATE REQUEST
.*
.EQU     ANOP
         AIF   ('&EQU(1)' NE 'Y').EQU2  IF NOT GEN REGS
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
.*
.EQU2    ANOP
         AIF   ('&EQU(2)' NE 'Y').END
*
F0       EQU   0
F2       EQU   2
F4       EQU   4
F6       EQU   6
*
.*
.END     ANOP
*
         MEND
