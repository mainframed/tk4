1

    This will document the access restrictions within JDF.

    Any TSO user can look at all SYSIN and SYSOUT files in a job if the
    job name has the userid as the leading 5 characters, or if the TSO
    user submitted the job.

    With the execeptions noted below, anyone can also look at:

            1. SYSLOG. This is the console log for MVSA or MVSB.
            2. Initiators--which are active, job classes, etc.
            3. Job status--what jobs are active, awaiting print, etc.
            4. JES datasets--JCL, condition codes, allocation messages,
               and JOB LOG for any job.
            5. Any job with a blank submitting userid field.


    The exceptions are:

            1. Software Engineering jobs can be looked at only by
               Software Engineering users.
            2. BPSCAN can look at all jobs except Software Engineering
               jobs.
            3. Software Engineering users can look at all jobs except:
                   a) MPS (Payroll) production jobs.
                   b) R3 (6670 confidential) reports, memos, etc.
            4. Operations users can look at all jobs except:
                   a) MPS (Payroll) production jobs.
                   b) R3 (6670 confidential) reports, memos, etc.
                   c) Software Engineering jobs.
            5. Canadian Salt "BCS" jobs can be looked at by users EFBVF
               and EFCPZ.


    The restrictions on looking at jobs also apply to issuing commands
    that affect the status of jobs, such as HOLD, RELEASE, CANCEL, etc.

    All of these rules and exceptions are hard-coded in the program,
    which makes maintenance difficult.


    I propose that we change this entire scheme so that access to jobs
    is controlled by ACF2 Generalized Resource rules. We would continue
    to allow anyone to view a job if they submitted it, or if the jobnam
    is prefixed by their userid, without reference to ACF2. Otherwise,
    JDF would call the ACFCHK module.

    We may also want to continue to deny non-Software Engineering users
    access to our jobs, just as a blanket rule, since they often contain
    VSAM passwords, system exits, and the like.
1



    I propose the following ACF2 resource structure:

        1. Exception resources. This identifies production jobs
           that cannot be viewed or acted upon through JDF by
           any userid without specific authority. At present,
           only MPS (payroll) jobs are in this category.

                  TYPE======> MPS                    <== system-id
                   KEY======> EXCEPTION              <== literal
                  USER======> SYSADM                 <== literal

        2. Privileged users. This identifies users that may have
           a requirement to view outputs from any jobs.

                  TYPE======> JDF                    <== literal
                   KEY======> ALLJOBS                <== literal
                  USER======> AOYQJ

        3. System-wide users. This identifies users that may have
           a requirement to view outputs from any jobs in a particular
           system.

                  TYPE======> BCS                    <== system-id
                   KEY======> ALLJOBS                <== literal
                  USER======> EHCPK

        4. Single-job users. This identifies users that may have
           a requirement to view outputs from a particular job.

                  TYPE======> BCS                    <== system-id
                   KEY======> BCSM0100               <== job name
                  USER======> EHKLM

    JDF would use this as follows:

        1. Tests would be made for the BPSCAN userid and Software
           Engineering jobs, and the same actions would be taken
           as are taken today. These are static requirements, and
           require no maintenance.

        2. If the jobname matches the userid, or was submitted by
           the userid, access would always be allowed. For test
           jobs, or confidential outputs, these are the only criteria.

        3. For production jobs, the following series of tests would
           be made:

           A. If a rule exists with type=system-id and key=EXCEPTION,
              go to step C, below.

           B. If a rule exists with type=JDF and key=ALLJOBS for the
              userid, allow access.

           C. If a rule exists with type=system-id and key=ALLJOBS
              for the userid, allow access.

           D. If a rule exists with type=system-id and key=jobname
              for the userid, allow access.

           E. In all other cases, disallow access.
