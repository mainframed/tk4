//ASQCCSVC  JOB (X0041,QCC,ASQCC),'X-BRIAN COOK',
//   MSGCLASS=X,
//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC
/*JOBPARM L=999
//*
//* TECH.XA.SOURCE   (JDFSVC)
//*
//JOBLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR,
//         UNIT=3380,VOL=SER=MVSTGT
//*
//ASM     EXEC PGM=IEV90,REGION=1024K,
//             PARM='OBJECT,NODECK,TERM,RENT,XREF(SHORT),BATCH'
//SYSLIB   DD  DSN=SYS1.HASPSRC,DISP=SHR,
//         UNIT=3380,VOL=SER=MVSDLB
//         DD  DSN=SYS1.MACLIB,DISP=SHR,
//         UNIT=3380,VOL=SER=MVSTGT
//         DD  DSN=SYS1.AMODGEN,DISP=SHR,
//         UNIT=3380,VOL=SER=MVSDLB
//         DD  DISP=SHR,DSN=SYS2.MACLIB   <== JDFMACS, CVTUSERS
//SYSUT1   DD  SPACE=(CYL,(5,5)),
//             UNIT=SYSDA
//SYSTERM  DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//SYSPUNCH DD  DUMMY
//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),
//             DISP=(MOD,PASS)
//SYSIN    DD  *
JDFSVC   TITLE 'CHANGE LOG'
***********************************************************************
*  CHANGE LOG                                                         *
*                                                                     *
*  9/26/86  BRIAN COOK   ADDED SUPPORT FOR TEST JDF SVC, KEYED OFF    *
*                        CVTUSER SUB-FIELD.                           *
*                                                                     *
*  8/31/86  BRIAN COOK   NOW MCSLINES IN BUFFER HAVE 12 BYTES OF      *
*                        JUNK, AND LINES ARE 90 INSTEAD OF 84 BYTES.  *
*                                                                     *
*  4/20/86  BRIAN COOK   ADDED JOE GROUP ID FIELDS TO JDF JOB RECORD. *
*                                                                     *
*  2/03/86  BRIAN COOK   MCSLINES IN BUFFER HAVE 6 BYTES OF JUNK      *
*                                                                     *
*  1/31/86  BRIAN COOK   CODED MAXJQE'S=2000, MAXJOE'S=3000           *
*                                                                     *
*  1/27/86  BRIAN COOK   REVISED MCSSVC LINE COUNT LOGIC              *
*                                                                     *
*  1/24/86  BRIAN COOK   FORGOT TO MVCP LENGTH FIELDS (SIGH)          *
*                                                                     *
*  1/19/86  BRIAN COOK   CHANGED MCSSVC TO CALCULATE LENGTH FOR MVCP  *
*                        FROM "IEECDCM" VALUES.                       *
*                                                                     *
*  1/15/86  BRIAN COOK   CHANGED CDF INTERFACE TO USE UCM ASID AS     *
*                        CROSS-MEMORY-SERVICES ASID.                  *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         TITLE 'IGC0023G  -  JES2 SPOOL INTERFACE SVC 237'
***********************************************************************
*                                                                     *
* TITLE -      JES2 SPOOL INTERFACE SVC                               *
*                                                                     *
* RELEASE -    1.5         JES SPOOL INTERFACE RELEASE                *
*                                                                     *
* AUTHOR -     MICHAEL LEE EMIGH                                      *
*              UNITED AIR LINES - EXOKF COMPUTER CENTER               *
*              1200 W. ALGONQUIN ROAD                                 *
*              ELK GROVE VILLAGE, ILLINOIS                            *
*              PHONE: 312-952-4371                                    *
*                                                                     *
* FUNCTION -   PROVIDES INTERFACE BETWEEN AN APPLICATION PROGRAM AND  *
*              JES2 FOR READING JES2 CHECKPOINT RECORDS AND READING   *
*              OR WRITING TO THE JES2 SPOOL DATASETS.                 *
*                                                                     *
* INPUT -      STANDARD SVC LINKAGE CONVENTIONS                       *
*              REGISTER 0 - FUNCTION PARAMETER REGISTER               *
*              REGISTER 1 - FUNCTION PARAMETER REGISTER               *
*              REGISTER 3 - ADDRESS OF CVT                            *
*              REGISTER 4 - ADDRESS OF TCB                            *
*              REGISTER 5 - ADDRESS OF SVRB                           *
*              REGISTER 6 - ADDRESS OF SVC ENTRY POINT                *
*              REGISTER 7 - ADDRESS OF ASCB                           *
*              REGISTER 15 - FUNCTION CODE:                           *
*                                                                     *
*                                  FUNCTION CODE = 1   --> CMD        *
*                                  FUNCTION CODE = 2   --> JQE'S/JOE'S*
*                                  FUNCTION CODE = 3   --> READ SPOOL *
*                                  FUNCTION CODE = 4   --> SS REQUEST *
*                                  FUNCTION CODE = 5   --> AUTHORIZE  *
*                                  FUNCTION CODE = 6   --> UNAUTHORIZE*
*                                                                     *
* OUTPUT -     REGISTER 0  - FUNCTION DEPENDENT DATA                  *
*              REGISTER 1  - FUNCTION DEPENDENT DATA                  *
*              REGISTER 15 - RETURN CODE FROM FUNCTION AS FOLLOWS     *
*                 0 - NORMAL RETURN FROM FUNCTION                     *
*                 4 - JES2 NOT ACTIVE                                 *
*                 8 - INVALID FUNCTION CODE                           *
*             >= 12 - FUNCTION DEPENDENT CODE                         *
*                                                                     *
*                                                                     *
* ATTRIBUTES - REENTERANT, REUSABLE, REFRESHABLE                      *
*                                                                     *
* NOTES -      THIS CODE IS JES2 RELEASE DEPENDENT.  CURRENT JES2     *
*              RELEASE SUPPORTED IS 4.1 AND NJE R3.                   *
*                                                                     *
*              REVISED FOR SP 1.3.4 BY BRIAN COOK, MNP.               *
*                                                                     *
*                                                                     *
***********************************************************************
         COPY  JDFMACS
         TITLE 'IGC0023G  -  JES2 SPOOL INTERFACE SVC 237'
IGC0023G CSECT                     JES2 SPOOL INTERFACE SVC
         USING *,12
         LR    R12,R6              LOAD BASE ADDRESS
         B     BEGINSVC
         DC    C'IGC0023G_JDF_INTERFACE_SVC_&SYSTIME_&SYSDATE'
BEGINSVC DS    0H                  JES2 SPOOL INTERFACE SVC
         USING RBSECT,R5           SET SVRB ADDRESSIBILITY
         USING CVT,R3              SET CVT ADDRESSIBILITY
         USING TCB,R4              SET TCB ADDRESSIBILITY
         USING ASCB,R7             SET ASCB ADDRESSIBILITY
         USING IOBNIOBA,R8         SET BUFFER ADDRESSIBILITY
*
*
*  ADDED SUPPORT FOR TEST 237
*
*
         L     R6,CVTUSER
         USING CVTUSERS,6
         CLC   CVT237ID(4),=C'T237'   TEST 237 INSTALLED
         BNE   NOTST237               NO
         L     R6,CVT237AD
         DROP  6
         LTR   R6,R6                  TEST 237 INSTALLED
         BZ    NOTST237               NO
         CR    R12,R6                 AM I THE TEST 237
         BE    NOTST237               YES, CONTINUE
*
         BR    R6                     INVOKE TEST 237
*
NOTST237 DS    0H
*
*
         XC    JIRETURN(JISL),JIRETURN CLEAR SVRB WORK AREA
         STM   R14,R1,JIRETURN     SAVE RETURN ADDRESS AND PARM REGS
*
         CLI   JISR15+3,1          TEST
         BE    CMD                 FUNCTION CODE = 1   --> CMD
         CLI   JISR15+3,4          TEST
         BE    SSREQ               FUNCTION CODE = 4   --> SS REQUEST
         CLI   JISR15+3,16         TEST
         BE    DYNAL               FUNCTION CODE = 16  --> DYNALLOC
*
         MVI   AXLIST+1,1          INITIALIZE AXLIST TO MASTER ASID
         SLR   R1,R1               CLEAR SSVT ADDRESS REG
         SLR   R0,R0               CLEAR SJB ADDRESS
*
         L     R6,TCBJSCB          POINT TO JSCB
         LR    R15,R6              COPY JSCB ADDRESS
         L     R15,JSCBSSIB-IEZJSCB(,R15) LOAD SSIB ADDRESS
         L     R15,SSIBSUSE-SSIBEGIN(,R15) LOAD SJB ADDRESS
         L     R15,SJBSJXB-SJBDSECT(,R15) LOAD SJB EXTENSION
         MVC   SVCDCB(4),SJXIDCB-SJXDSECT(R15) LOAD SJB DCB ADDRESS
*
         L     R6,JSCBSSIB-IEZJSCB(,R6) POINT TO SSIB
         USING SSIB,R6             SSIB ADDRESSIBILITY
         L     R2,CVTJESCT         POINT TO SUBSYSTEM CNTL TBL
         USING JESCT,R2            JESCT ADDRESSIBILITY
         LA    R2,JESSSCT-(SSCTSCTA-SSCT) POINT TO SSCT HEAD
         USING SSCT,R2             SSCT ADDRESSIBILITY
         SPACE 2
         LA    R15,4               SET JES2 NOT ACTIVE ERROR CODE
INIT0    DS    0H                  SEARCH FOR JES2 SSCT
         ICM   R2,15,SSCTSCTA      POINT TO NEXT SSCT
         BZR   R14                 IF ZERO THEN ERROR
         CLC   SSCTSNAM,SSIBSSNM   JES SSCT?
         BNE   INIT0               NO, THEN LOOP
         ICM   R6,15,SSCTSSVT      LOAD SSVT ADDRESS
         BZR   R14                 IF ZERO THEN JES2 NOT ACTIVE
         USING SSVT,6              JES2 SSVT ADDRESSIBILITY
*
*        MVC   SVCNUMDA(1),$SVNUMDA NUMBER OF SPOOL EXTENTS
         MVC   SVCBFSIZ(2),$SVBFSIZ BUFFER SIZE
         MVC   SVCDAS(4),$SVTDAS1  TRACK EXTENT TABLE
         MVC   SVCHCT(4),$SVHCT
*
         LA    R15,8               SET FUNCTION ERROR CODE
         LM    R0,R1,JISR0         RELOAD PARAMETER REGISTERS
         CLI   JISR15+3,1          TEST
         BE    CMD                 FUNCTION CODE = 1   --> CMD
         CLI   JISR15+3,2          TEST
         BE    GETJQES             FUNCTION CODE = 2   --> XMEM JQE/JOE
         CLI   JISR15+3,3          TEST
         BE    RDSPOOL             FUNCTION CODE = 3   --> READ SPOOL
         CLI   JISR15+3,4          TEST
         BE    SSREQ               FUNCTION CODE = 4   --> SS REQUEST
         CLI   JISR15+3,5          TEST
         BE    AUTHON              FUNCTION CODE = 5   --> AUTHORIZE
         CLI   JISR15+3,6          TEST
         BE    AUTHOFF             FUNCTION CODE = 6   --> UNAUTHORIZE
         CLI   JISR15+3,7          TEST
         BE    NOSWAP              FUNCTION CODE = 7   --> NONSWAPPABLE
         CLI   JISR15+3,8          TEST
         BE    OKSWAP              FUNCTION CODE = 8   --> SWAPPABLE
         CLI   JISR15+3,9          TEST
         BE    NOPASS              FUNCTION CODE = 9   --> PPTNOPAS
         CLI   JISR15+3,10         TEST
         BE    NEEDPASS            FUNCTION CODE = 10  --> PPTPAS
         CLI   JISR15+3,11         TEST
         BE    MCONS               FUNCTION CODE = 11  --> MCONS BUFF
         CLI   JISR15+3,12         TEST
         BE    JDFJQE2             FUNCTION CODE = 12  --> NEW JDF
         CLI   JISR15+3,13         TEST
         BE    MVSCMD2             FUNCTION CODE = 13  --> COMMANDS
         CLI   JISR15+3,14         TEST
         BE    JCTACC              FUNCTION CODE = 14  --> JCT ACCESS
         CLI   JISR15+3,15         TEST
         BE    PDDBACC             FUNCTION CODE = 15  --> PDDB ACCESS
         BR    R14                 UNIDENTIFIED FUNCTION CODE
         EJECT
ERROR    DS    0H                  ERROR RETURN
         STM   R15,R1,JISR15       SAVE PARAMETER REGISTERS
*
EXIT0    DS    0H            EXIT SVC
         LM    R14,R1,JIRETURN     RELOAD REGISTERS
         BR    R14                 RETURN
JESNOTUP DS    0H            EXIT SVC
         LM    R14,R1,JIRETURN     RELOAD REGISTERS
         LA    R15,12              SET RETURN CODE
         BR    R14                 RETURN
   TITLE 'IGC0023G - FUNCTION 1 - MVS/JES2 COMMAND INTERFACE'
***********************************************************************
*                                                                     *
* TITLE -      FUNCTION 1 - MVS/JES2 COMMAND INTERFACE                *
*                                                                     *
* FUNCTION -   ISSUE A MVS/JES2 COMMAND VIA SVC 34.                   *
*                                                                     *
* INPUT -      STANDARD LINKAGE CONVENTIONS                           *
*              REGISTER 0 - CONSOLE IDENTIFICATION                    *
*              REGISTER 1 - ADDRESS OF MVS/JES2 COMMAND TEXT          *
*                                                                     *
* OUTPUT -     RETURN CODE TO APPLICATION PROGRAM                     *
*              REGISTER 15 CONTAINS RETURN CODE FROM SVC 34.          *
*                                                                     *
*                                                                     *
* NOTES -      THIS ROUTINE WILL ISSUE ANY MVS OR JES2 COMMAND.       *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
CMD      DS    0H                  ISSUE MVS/JES2 COMMAND
         SVC   34                  ISSUE COMMAND SCHEDULER SVC
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         BR    R14                 RETURN
*
         TITLE 'IGC0023G - FUNCTION 2 - XMEM JQE/JOE S'
***********************************************************************
*                                                                     *
* TITLE -      FUNCTION 2 - COPY JQES/JOE'S FROM HCT TO USER AREA     *
*                                                                     *
* INPUT -      REGISTER 0 - ADDRESS OF OUTPUT JOE'S                   *
*              REGISTER 1 - ADDRESS OF OUTPUT JQE'S                   *
*              REGISTER 3 - ADDRESS OF CVT                            *
*              REGISTER 4 - ADDRESS OF TCB                            *
*              REGISTER 5 - ADDRESS OF SVRB                           *
*              REGISTER 6 - ADDRESS OF JES2 SSVT                      *
*              REGISTER 7 - ADDRESS OF ASCB                           *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
GETJQES  DS    0H                  READ JES2 JCT
*
         BAL   R7,AXSETUP          SET UP FOR JES2 XMEM SERVICES
*
*
         L     R4,MYJQES
         L     R3,JISR1
         LA    R15,2000                NUMBER OF JQE'S
JQELOOP  DS    0H
         LA    R1,JQELNGTH
         SLR   R0,R0                   SET STORAGE KEY
         MVCP  0(R1,R3),0(R4),R0       MOVE JQE'S
*
         LA    R4,JQELNGTH(,R4)        BUMP "FROM" ADDRESS
         LA    R3,JQELNGTH(,R3)        BUMP "TO"   ADDRESS
         BCT   R15,JQELOOP                 GO GET NEXT
*
SETJOES  DS    0H
*
         L     R4,MYJOES
         L     R3,JISR0
         LA    R15,3000                NUMBER OF JOE'S
JOELOOP  DS    0H
         LA    R1,JOESIZE
         SLR   R0,R0                   SET STORAGE KEY
         MVCP  0(R1,R3),0(R4),R0       MOVE JQE'S
*
         LA    R4,JOESIZE(,R4)         BUMP "FROM" ADDRESS
         LA    R3,JOESIZE(,R3)         BUMP "TO"   ADDRESS
         BCT   R15,JOELOOP                 GO GET NEXT
*
DONEJOES DS    0H
*
*
         BAL   R7,AXDROP           DROP JES2 XMEM SERVICES
*
         B     EXIT0
         TITLE 'IGC0023G - FUNCTION 3 - READ JES2 SPOOL BLOCK'
***********************************************************************
*                                                                     *
* TITLE -      FUNCTION 3 - READ JES2 SPOOL BLOCK                     *
*                                                                     *
* FUNCTION -   READ A JES2 BLOCK FROM JES2 SPOOL DATASET.             *
*                                                                     *
* INPUT -      REGISTER 0 - BUFFER ADDRESS (4K) IN CALLER'S REGION    *
*              REGISTER 1 - TRACK ADDRESS OF BLOCK TO BE READ (MTTR)  *
*              REGISTER 3 - ADDRESS OF CVT                            *
*              REGISTER 4 - ADDRESS OF TCB                            *
*              REGISTER 5 - ADDRESS OF SVRB                           *
*              REGISTER 6 - ADDRESS OF JES2 SSVT                      *
*              REGISTER 7 - ADDRESS OF ASCB                           *
*                                                                     *
*                                                                     *
* OUTPUT -     REGISTER 15 - RETURN CODE                              *
*                 0 - NORMAL COMPLETION                               *
*                 4 - JES2 NOT ACTIVE                                 *
*                 8 - FUNCTION CODE ERROR                             *
*                12 - INVALID EXTENT TRACK EXTENT                     *
*                16 - INVALID TRACK ADDRESS                           *
*                20 - I/O ERROR                                       *
*                24 - SVC FAILURE                                     *
*                                                                     *
*                                                                     *
* BUFFER OUTPUT -                                                     *
*              OFFSET    LENGTH    DESCRIPTION                        *
*               +00         4      FILLER                             *
*               +04         4      FILLER                             *
*               +08         4      POINTER TO FIRST DATA BYTE         *
*                                                                     *
*                                                                     *
* NOTES -      NONE                                                   *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
RDSPOOL  DS    0H                  READ JES2 SPOOL
         LA    R15,12              ASSUME EXTENT INVALID
*        CLM   R1,8,SVCNUMDA       CHECK FOR VALID EXTENT
*        BNLR  R14                 IF NOT LOW THEN INVALID
         SR    R2,R2               CLEAR BUFFER LENGTH REGISTER
         ICM   R2,3,SVCBFSIZ       LOAD BUFFER SIZE
         BAL   R11,GETBUF          LINK AND GET BUFFER
         L     R0,JISR1            RELOAD MTTR
         BAL   R11,SETIOBS         LINK AND SET IOBSEEK ADDRESS
         BAL   R11,EXCP            READ A SPOOL BLOCK
         LA    R2,BUFSTART         LOAD BLOCK START ADDRESS
         LA    R1,1                LOAD BUFFER LENGTH
         LA    R0,4095(,R1)                            4096
         L     R1,JISR1            LOAD BUFFER  ADDRESS
         STM   R0,R2,IOBNIOBA      STORE IN BLOCK
         SLR   R15,R15             SET NORMAL RC
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         BR    R14                 RETURN
   TITLE 'IGC0023G - FUNCTION 4 - SUB-SYSTEM REQUEST INTERFACE'
***********************************************************************
*                                                                     *
* TITLE -      FUNCTION 4 - JES2 SUB-SYSTEM REQUEST INTERFACE         *
*                                                                     *
* FUNCTION -   ISSUE A MVS/JES2 COMMAND VIA IEFJSSREQ                 *
*                                                                     *
* INPUT -      STANDARD LINKAGE CONVENTIONS                           *
*              REGISTER 1 - ADDRESS OF SSREQ PARM LIST                *
*                                                                     *
* OUTPUT -     RETURN CODE TO APPLICATION PROGRAM                     *
*              REGISTER 15 CONTAINS RETURN CODE FROM IEFJSSREQ.       *
*                                                                     *
*                                                                     *
* NOTES -      THIS ROUTINE WILL ISSUE ANY SUBSYSTEM REQUEST.         *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
SSREQ    DS    0H                  ISSUE MVS/JES2 COMMAND
*
***                                                                 ***
**     IEFSSREQ                                                      **
***                                                                 ***
         L     R15,16              PICK UP CVT
         L     R15,296(,15)        PICK UP JESCT
         L     R15,20(,15)         PICK UP JESSSREQ
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         BR    R15                 GO DO IT
*
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         BR    R14                 GO DO IT
*
   TITLE 'IGC0023G - FUNCTION 5 -   AUTHORIZE THE JOB-STEP'
***********************************************************************
*                                                                     *
* TITLE -      FUNCTION 5 - JSCB AUTHORIZATION                        *
*                                                                     *
* FUNCTION -   AUTHORIZE THE JOB-STEP                                 *
*                                                                     *
* INPUT -      STANDARD LINKAGE CONVENTIONS                           *
*              REGISTER 4 - ADDRESS OF TCB                            *
*                                                                     *
*                                                                     *
***********************************************************************
*
AUTHON   DS    0H
*
         L     1,TCBJSCB  PICK UP CALLER'S JSCB
         USING IEZJSCB,1
         OI    JSCBOPTS,JSCBAUTH   AUTH ON
*
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         SR    R15,15              SET RC
         BR    R14                 RETURN
*
*
   TITLE 'IGC0023G - FUNCTION 6 - UNAUTHORIZE THE JOB-STEP'
***********************************************************************
*                                                                     *
* TITLE -      FUNCTION 6 - JSCB AUTHORIZATION                        *
*                                                                     *
* FUNCTION -   UNAUTHORIZE THE JOB-STEP                               *
*                                                                     *
* INPUT -      STANDARD LINKAGE CONVENTIONS                           *
*              REGISTER 4 - ADDRESS OF TCB                            *
*                                                                     *
*                                                                     *
***********************************************************************
*
AUTHOFF  DS    0H
*
         L     1,TCBJSCB  PICK UP CALLER'S JSCB
         USING IEZJSCB,1
         NI    JSCBOPTS,255-JSCBAUTH   AUTH OFF
*
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         SR    R15,15              SET RC
         BR    R14                 RETURN
*
   TITLE 'IGC0023G - FUNCTION 7 - MAKE THE ADDRESS SPACE NON-SWAPPABLE'
***********************************************************************
*                                                                     *
* TITLE -      FUNCTION 7 - MAKE THE ADDRESS SPACE NON-SWAPPABLE      *
*                                                                     *
*                                                                     *
***********************************************************************
*
NOSWAP   DS    0H
*
         SR    R0,0
         SYSEVENT DONTSWAP,ASID=(0)
*
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         SR    R15,15              SET RC
         BR    R14                 RETURN
*
   TITLE 'IGC0023G - FUNCTION 8 - MAKE THE ADDRESS SPACE SWAPPABLE'
***********************************************************************
*                                                                     *
* TITLE -      FUNCTION 8 - MAKE THE ADDRESS SPACE SWAPPABLE          *
*                                                                     *
*                                                                     *
***********************************************************************
*
OKSWAP   DS    0H
*
         SR    R0,0
         SYSEVENT OKSWAP,ASID=(0)
*
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         SR    R15,15              SET RC
         BR    R14                 RETURN
*
   TITLE 'IGC0023G - FUNCTION 9 - BYPASS PASSWORD CHECKING'
***********************************************************************
*                                                                     *
* TITLE -      FUNCTION 9 - MARK THE JSCB PPTNOPAS.                   *
*                                                                     *
*                                                                     *
***********************************************************************
*
NOPASS   DS    0H
*
         L     1,TCBJSCB  PICK UP CALLER'S JSCB
         USING IEZJSCB,1
         OI    JSCBSWT1,JSCBPASS   NO PASSWORD CHECKING
*
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         SR    R15,15              SET RC
         BR    R14                 RETURN
*
   TITLE 'IGC0023G - FUNCTION 10 - RESUME PASSWORD CHECKING'
***********************************************************************
*                                                                     *
* TITLE -     FUNCTION 10 - MARK THE JSCB PPTPAS                      *
*                                                                     *
*                                                                     *
***********************************************************************
*
NEEDPASS DS    0H
*
         L     1,TCBJSCB  PICK UP CALLER'S JSCB
         USING IEZJSCB,1
         NI    JSCBSWT1,255-JSCBPASS   PASSWORD CHECKING NEEDED
*
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         SR    R15,15              SET RC
         BR    R14                 RETURN
*
   TITLE 'IGC0023G - SUBROUTINE - SET UP THE AX FOR JES2 XMEM'
*
*
*
*
AXSETUP  DS    0H                  READ JES2 JCT
*                                      PICK UP THE JES2 ASID NUMBER
*
         SYSEVENT DONTSWAP
*
         USING PSA,0
         L     R1,FLCCVT
         USING CVT,1
         L     R14,CVTJESCT   WHILE I'M HERE, SAVE THIS
         USING JESCT,14
         L     R1,CVTASVT
         USING ASVT,1
         L     R2,ASVTMAXU  MAXIMUM NUMBER OF ADDRESS SPACES
         LA    R3,ASVTENTY  ADDRESS OF FIRST ENTRY
         DROP  1
         USING ASCB,15
ASCBLOOP DS    0H
         L     R15,0(,R3)   SET ASCB ADDRESS
         L     R4,ASCBJBNS  POINT TO JOB NAME
         CLC   0(5,R4),=C'JES2 '     IS THIS JES2
         BE    GOTJES2A     YES
         LA    R3,4(,R3)    BUMP ASVT LOOP
         BCT   R2,ASCBLOOP
*
         B     JESNOTUP
*
GOTJES2A DS    0H
         LH    R4,ASCBASID
*
         L     R1,SVCHCT               PICK UP THE JES2 HCT
         USING HCTDSECT,1
         LA    R2,$JOBQPTR             START OF JQE'S
         LA    R3,$JOTABLE             START OF JOE'S
         DROP  1
*
*                                      SET UP FOR CROSS MEMORY MOVE
*
         AXRES AXLIST=AXLIST           RESERVE AN AX
*
         LA    R0,1                    SET OUR AX TO 1
         AXSET AX=(0)
*
         SSAR  R4                      SET 'JES2' AS SECONDARY
         SLR   R0,R0                   SECONDARY KEY
         LA    R1,4                    TRUE LENGTH
         MVCP  MYJQES(R1),0(R2),R0     SET JQE START ADDRESS
         SLR   R0,R0                   SECONDARY KEY
         LA    R1,4                    TRUE LENGTH
         MVCP  MYJOES(R1),0(R3),R0     SET JOE START ADDRESS
*
         BR    R7                      RETURN
   TITLE 'IGC0023G - SUBROUTINE - RESET THE AX FOR JES2 XMEM'
AXDROP   DS    0H
*---------------------------------------------------------------------*
*                                                                     *
*        RESET PRIMARY AND SECONDARY ADDRESS SPACES TO BE THE SAME.   *
*                                                                     *
*---------------------------------------------------------------------*
*
         EPAR  R1                 EXTRACT PRIMARY ASN
         SSAR  R1
*
         SYSEVENT OKSWAP
*
         BR    R7                 GO OUT
*
         TITLE 'IGC0023G - READ/WRITE EXCP ROUTINE'
***********************************************************************
*                                                                     *
* TITLE -      READ OR WRITE ROUTINE                                  *
*                                                                     *
* FUNCTION -   ISSUE EXCP TO READ FROM OR WRITE TO THE JES2 SPOOL     *
*              DATASETS.  FOR I/O ERRORS, LOAD APPROPRIATE STATUS     *
*              INFORMATION TO BE PASSED BACK TO THE CALLING ROUTINE.  *
*                                                                     *
***********************************************************************
         SPACE 2
EXCP     DS    0H                  ISSUE EXCP TO READ OR WRITE
         XC    IOBNECB,IOBNECB     CLEAR ECB
         EXCP  IOBSTDRD            READ SPOOL BLOCK
         WAIT  ECB=IOBNECB         WAIT FOR I/O TO COMPLETE
         CLI   IOBNECB,X'7F'       NORMAL COMPLETION?
         BER   R11                 IF NORMAL THEN RETURN
         LA    R15,16              ASSUME TRACK ADDRESS ERROR
         CLI   IOBNECB,X'42'       TEST ASSUMPTION
         BE    ERROR               IF CORRECT THEN SKIP CODES
         L     R1,IOBCSW-1         LOAD LAST CCW ADDRESS + 8
         LA    R1,0(R1)            CLEAR HIGH BYTE
         SH    R1,=H'8'            POINT TO LAST CCW
         ICM   R0,8,0(R1)          INSERT OPERATION CODE
         ICM   R0,4,IOBFLAG3       INSERT IOB FLAG3 CODE
         ICM   R0,3,IOBSENS0       INSERT IOB SENSE BYTES
         ST    R0,IOBCSW-1         STORE STATUS
         LD    R0,IOBCSW-1         LOAD STATUS
         L     R1,IOBNECB          LOAD ERROR CODE
         LA    R15,20              SET I/O ERROR RC
         B     ERROR               GO THRU ERROR RETURN
     TITLE 'IGC0023G - CONVERT MTTR AND SET IOB SEEK ADDRESS'
***********************************************************************
*                                                                     *
* TITLE -      CONVERT MTTR AND SET IOB SEEK ADDRESS                  *
*                                                                     *
* FUNCTION -   CONVERT MTTR TO AN ABSOLUTE TRACK ADDRESS AND SET      *
*              THE IOB SEEK ADDRESS. FOR RPS DEVICES, THE SECTOR      *
*              IS COMPUTED AND A SET SECTOR CCW IS CONSTRUCTED.       *
*                                                                     *
***********************************************************************
         SPACE 2
SETIOBS  DS    0H                 SET IOB SEEK ADDRESS
         LA    R15,16             ASSUME INVALID TRACK ADDRESS
         LR    R3,R0               COPY MTTR
         LA    R0,0(,R3)           MAKE R0 0TTR
         XR    R3,R0               MAKE R3 M000
         ST    R3,IOBM             STORE EXTENT IN IOB
         STC   R0,IOBR             STORE RECORD NUMBER IN IB
         L     R9,SVCDAS           LOAD TRACK EXTENT TBL ADDRESS
         USING DASDSECT,R9         TED ADDRESSIBILITY
*
TSTDAS   DS    0H
         CLM   R3,1,DASEXTNO       MATCH ON EXTENT NUMBER?
         BE    GOTDAS              YES
*
*
GOTDAS   DS    0H
         LR    R2,R0               COPY 0TTR
         SRDL  R2,40               SET TT IN R2. R3 FOR DIVIDE
         ICM   R0,15,DASTKCYL      GET NUMBER OF TRACKS/CYLINDERS
         BZ    ERROR               IF ZERO THEN SPOOL PACK ABSENT
         DR    R2,R0               ELSE COMPUTE CC HH
         STCM  R3,3,IOBCC          STORE CC IN IOB
         STCM  R2,3,IOBHH          STORE HH IN IOB
         MVI   CCW1,X'03'          ASSUME NO RPS
         TM    DASFLAG,DASRPSF     IS TABLE VALID
         BZR   R11                 IF NOT, SKIP THIS
         LA    R2,DASRPS           POINT TO EXT RPS TBL
         SLR   R3,R3               ELSE ZERO REGISTER FOR INSERT
         IC    R3,IOBR             INSERT RECORD NUMBER FROM IOB
         IC    R3,0(R3,R2)         GET CORRES SECTOR NUMBER
         STC   R3,CCW1+5           SET SECTOR DATA
         MVI   CCW1,X'23'          SET SET-SECTOR COMMAND
         BR    R11                 RETURN
         SPACE 1
         TITLE 'IGC0023G - GET AND INITIALIZE BUFFER   '
***********************************************************************
*                                                                     *
* TITLE -      GET AND INITIALIZE BUFFER                              *
*                                                                     *
* FUNCTION -   1) CLEAR BUFFER TO ZERO AND INITIALIZE INPUT/OUTPUT    *
*              BLOCK.                                                 *
*              2) CONSTRUCT CHANNEL PROGRAM.                          *
*                                                                     *
***********************************************************************
         SPACE 2
GETBUF   DS    0H                  GET BUFFER
         L     R8,JISR0          LOAD BUFFER ADDRESS REGISTER
         LR    R0,R8               SET ADDRESS FOR CLEAR
         LA    R1,4095             SET LENGTH FOR CLEAR
         SR    R15,R15             SET LENGTH TO ZERO
         MVCL  R0,R14              CLEAR BUFFER TO ZEROS
         MVI   IOBFLAG1,IOBCMDCH+IOBUNREL CMD CHAINING AND UNRELATED
         LA    R0,IOBNECB          LOAD ECB ADDRESS
         ST    R0,IOBECBPT         STORE IN IOB
         MVC   IOBDCBPT(4),SVCDCB  STORE DCB ADDRESS IN IOB
         LA    R0,IOBSEEK+8        LOAD CHANNEL PGM ADDRESS
         ST    R0,IOBSTART         STORE CP ADDRESS IN IOB
         LA    R0,CCW2             LOAD SEARCH CCW ADDRESS
         ST    R0,CCW3             STORE IN CCW3 FOR TIC
         LA    R0,BUFSTART         LOAD BUFSTART ADDRESS
         ST    R0,CCW4             STORE IN READ CCW
         LA    R0,IOBSEEK+3        LOAD SEARCH ID ADDRESS
         ST    R0,CCW2             STORE IN SEARCH ID CCW
         LA    R0,CCW1+5           LOAD SECTOR ADDRESS
         ST    R0,CCW1             STORE IN RPS CCW
         STH   R2,CCW4+6           STORE BLOCK LENGTH IN READ CCW
         OC    CCW1(LCP),CP        OR IN REST OF CHANNEL PGM
         BR    R11                 RETURN TO CALLING ROUTINE
         EJECT
      TITLE 'IGC0023G - CHANNEL PROGRAMS AND MISCELLANEOUS CONSTANTS'
FZERO    DC    F'0'
BLANKS   DS    0CL80
SPACES   DC    CL80' '
FPLUS1   DC    F'1'
EDMASK3P DC    XL4'2020204B'
EDMASK3  DC    XL3'202020'
EDMASK10 DC    XL10'40206B2020206B202120'
CP       DS    0D                  CHANNEL PROGRAM
CPCCW1   CCW   X'03',0,SILI+CC,1   NOP
CPCCW2   CCW   X'31',0,SILI+CC,5   SEARCH ID EQUAL
CPCCW3   CCW   X'08',0,SILI+CC,1   TIC
CPCCW4   CCW   X'06',0,SILI,0      READ DATA
         SPACE
LCP      EQU   *-CP                LENGTH OF CHANNEL PGM
         SPACE 3
   TITLE 'IGC0023G - FUNCTION 11 - COPY MASTER CONSOLE BUFFER'
***********************************************************************
*                                                                     *
* TITLE -     FUNCTION 11 - COPY THE MASTER CONSOLE BUFFER            *
*                                                                     *
* INPUT -      STANDARD LINKAGE CONVENTIONS                           *
*              REGISTER 0 - POINTS TO BUFFER                          *
*              REGISTER 1 - POINTS TO SAVE AREA                       *
*                                                                     *
*                                                                     *
***********************************************************************
*
MCONS    DS    0H
*
         L     R1,JISR1   PICK UP SAVE AREA
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         L     R6,MCONADD         EPA OF MCS DISPLAY
         BR    R6         GO DO IT
*
MCONADD  DC    V(MCSSVC)
*
JDFJQE2  DS    0H
*
         L     R1,JISR1   PICK UP SAVE AREA
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         L     R6,JDFJQADD        EPA OF JQE DISPLAY
         BR    R6         GO DO IT
*
JDFJQADD DC    V(JDFJQES)
*
*
MVSCMD2  DS    0H
*
         L     R1,JISR1   PICK UP SAVE AREA
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         L     R6,CMD2ADD         EPA OF COMMAND INTERFACE
         BR    R6         GO DO IT
*
CMD2ADD  DC    V(MVSCMD)
*
*
JCTACC   DS    0H
*
         L     R1,JISR1   PICK UP SAVE AREA
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         L     R6,JCTADDR         EPA OF JCT READ SVC
         BR    R6         GO DO IT
*
JCTADDR  DC    V(JCTSVC)
*
*
PDDBACC  DS    0H
*
         L     R1,JISR1   PICK UP SAVE AREA
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         L     R6,PDDBADD         EPA OF PDDB READ SVC
         BR    R6         GO DO IT
*
PDDBADD  DC    V(PDDBSVC)
*
*
   TITLE 'IGC0023G - FUNCTION 16 - DYNAMIC ALLOCATION'
***********************************************************************
*                                                                     *
* TITLE -      FUNCTION 16 - DYNAMIC ALLOCATION                       *
*                                                                     *
* FUNCTION -   ISSUE A DYNAMIC ALLOCATION REQUEST                     *
*                                                                     *
* INPUT -      STANDARD LINKAGE CONVENTIONS                           *
*              REGISTER 1 - ADDRESS OF DYNAMIC ALLOCATION REQUEST BLK *
*                                                                     *
* OUTPUT -     RETURN CODE TO APPLICATION PROGRAM                     *
*              REGISTER 15 CONTAINS RETURN CODE FROM DYNALLOC.        *
*                                                                     *
*                                                                     *
* NOTES -      THIS ROUTINE WILL ISSUE ANY AUTHORIZED DYNAMIC         *
*              ALLOCATION REQUEST.                                    *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
DYNAL    DS    0H
*
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         DYNALLOC
*
         L     R14,JIRETURN        RELOAD RETURN ADDRESS
         BR    R14                 GO DO IT
*
         LTORG
         TITLE 'IGC0023G - MISCELLANEOUS DSECTS'
         PRINT NOGEN
         CVT   DSECT=YES
         CVTUSERS
         SPACE 2
         IKJTCB
         SPACE 2
         IEFJESCT
         SPACE 2
         IEFJSSIB
         SPACE 2
         IEZJSCB
         SPACE 2
         IHAASVT
         IHAPSA
         IHAASCB
         IHARB
         SPACE 2
         TITLE 'IGC0023G - SVRB SAVE AREA MAP'
         ORG   RBEXSAVE
         DS    0CL48         MAX LENGTH OF WORK AREA
JIRETURN DS    A             SVC EXIT ADDRESS
JISR15   DS    A             ENTRY REGISTER 15
JISR0    DS    A             ENTRY REGISTER 0
JISR1    DS    A             ENTRY REGISTER 1
*
MYJQES   DS    F                       JES JQE ADDRESSES
AXLIST   DS    F             AX
MYJOES   DS    F                       JES JOE ADDRESSES
SVCDAS   DS    F             TRACK EXTENT TABLE
*
SVCHCT   DS    F             HCT ADDRESS
SVCDCB   DS    F             SPOOL DCB
DWORD    DS    F             START OF DOUBLE-WORD WORK AREA
SVCBFSIZ DS    H             BUFFER SIZE
SVCNUMDA DS    XL1           NUMBER OF EXTENTS IN SPOOL
         DS    XL1
*
JISL     EQU   *-JIRETURN    LENGTH OF SVRB WORK AREA
         SPACE 2
LPRFX    EQU   X'58'              BUFFER PREFIX LENGTH
CD       EQU   X'80'              DATA CHAIN
CC       EQU   X'40'              COMMAND CHAIN
SILI     EQU   X'20'              SUPPRESS INCORRECT LENGTH
SKIP     EQU   X'10'              SKIP DATA TRANSFER
PCI      EQU   X'08'              PROGRAM CONTROLLED INTERRUPTION
IDA      EQU   X'04'              INDIRECT ADDRESSING
         SPACE 2
         IEZIOB
         SPACE 2
         ORG   IOBSEEK+8
CHANPGM  DS    0D                  CHANNEL PGM AREA
CCW1     DS    D                   SET SECTOR / READ HA
CCW2     DS    D                   SEARCH ID EQUAL
CCW3     DS    D                   TIC
CCW4     DS    D                   READ KEY AND DATA
COUNT    DS    D                   DA COUNT FIELD
         SPACE 2
BUFDSECT EQU   IOBNIOBA            EQUATE BUFDSECT
         SPACE
         ORG   IOBNIOBA+LPRFX      ORG PAST PREFIX
         SPACE 1
BUFSTART DS    0D                  BUFFER START
         SPACE 3
         IEFJSSOB (SO,CS,JS,RQ,RR)
         IEFJSCVT
*
IGC0023G CSECT ,
         PRINT OFF
         COPY $HASPGBL
         $HASPEQU
         $SJB
         IEZDEB
DEBEXLEN EQU   16
         $SJXB
         $DAS
         $SVT
*                       BELOW REQUIRED FOR $HCT
         $JCT
         $SCAT
         $XECB
         $MIT
         $CAT
         $PCE
         $HCT
*
         $JQE
         $JOE
*
         END
MCSSVC TITLE 'CONSOLE DISPLAY FACILITY (MCS)'
***********************************************************************
*                                                                     *
*                                                                     *
*                 CONSOLE DISPLAY FACILITY (MCS)                      *
*                                                                     *
*                                                                     *
* ABSTRACT: DISPLAY MVS MASTER CONSOLE ACTIVITY.                      *
*                                                                     *
*                                                                     *
* FUNCTION: MCS IS DESIGNED TO TO BE INVOKED FROM ANY ASSEMBLER       *
*           PROGRAM.                                                  *
*                                                                     *
*           IT RETURNS CONSOLE BUFFERS TO THE CALLING PROGRAM.        *
*                                                                     *
*           MCS LOOKS AT VARIOUS MVS SP 1.3.0 CONTROL BLOCKS.         *
*                                                                     *
*                                                                     *
* INVOKING:                                                           *
*                                                                     *
*         LA    R15,0        <== MY SVC OFFSET NUMBER                 *
*         LA    R1,WORKADDR  <== 8K WORK AREA ADDRESS                 *
*         SVC   236          <== SUPERSVC ROUTER                      *
*                                                                     *
* OUTPUT:
*                                                                     *
*         R0    =   MASTER CONSOLE NUMBER                             *
*         R15   =   NUMBER OF CONSOLE LINES
*                                                                     *
*    WORKAREA   =   512 BYTES UNPREDICTABLE
*                   76  BYTES CONSOLE BUFFER LINE 1
*                   76  BYTES CONSOLE BUFFER LINE 2
*                             "                                       *
*                             "                                       *
*                   76  BYTES CONSOLE BUFFER LINE 43
*                                                                     *
*                   THE ENDING LINE IS SET TO X'FF', SO THE CALLING   *
*                   PROGRAM CAN TEST FOR THAT INSTEAD OF CHECKING R15.*
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
* EXTERNAL REFERENCE: NONE.                                           *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
* CHANGE LOG:                                                         *
*                                                                     *
*   2/04/85  BRIAN COOK.     INITIAL ENTRY.                           *
*                                                                     *
*                                                                     *
***********************************************************************
         COPY JDFMACS
         EJECT
MCSSVC CSECT
         USING *,12
         USING RBSECT,R5           SET SVRB ADDRESSIBILITY
         LR    R12,R6         SET SVC BASE REGISTER
         B     STARTUP
         DC    C'MCSSVC CONSOLE DISPLAY BRIAN COOK 2/7/85'
STARTUP  DS    0H
         L     R13,0(,R1)     SET WORKAREA REGISTER
         USING MCSDSECT,13
         STM   R0,R15,MCSREGS SAVE THE REGISTERS
         USING PSA,0
         L     R3,FLCCVT      POINT TO CVT
         USING CVT,3
         L     R4,CVTCUCB         R4 = ADDR OF 'CUCB' (UCM BASE)
         USING UCM,R4
         DROP  3
*
         LA    R9,MCSLINE1    POINT TO PARAMETER LIST
         ST    R9,LINEPTR     POINT TO FIRST OUTPUT LINE
*
*
*
*
         TITLE 'MCS   START OF SHOW CONSOLE LOOP'
SHOWCONS DS    0H
*
*
*---------------------------------------------------------------------*
*                                                                     *
*          BUILD A TABLE OF UCM ADDRESSES (ONE PER CONSOLE)           *
*                                                                     *
*---------------------------------------------------------------------*
BLDUCMS  DS    0H
         L     R3,UCMVEA          R3 = ADDR OF FIRST UCM ENTRY
         L     R6,UCMVEZ          R6 = LENGTH OF EACH UCM ENTRY
         L     R7,UCMVEL          R7 = ADDR OF LAST UCM ENTRY
         LA    R8,UCMTAB+4        R8 = ADDR OF UCMTAB
         LA    R9,UCMTABE         R9 = ADDR OF END OF UCMTAB
         XR    R2,R2              R2  = 0 (NUMBER OF VALID UCMS)
UCMLOOP  ST    R3,0(0,R8)         SAVE UCM ADDRESS IN UCMTAB
         LA    R2,1(0,R2)         R2  = R2  + 1  (ONE MORE UCM)
         LA    R8,4(0,R8)         R8 = ADDR OF NEXT UCMTAB ENTRY
         CR    R8,R9              DOES R8 POINT PAST END OF UCMTAB?
         BNL   UCMDONE            YES; LEAVE LOOP
         AR    R3,R6              R3 = ADDR OF NEXT UCM ENTRY
         CR    R3,R7              DOES R3 POINT PAST UCM ENTRIES?
         BL    UCMLOOP            NOPE; KEEP GOING
UCMDONE  STH   R2,NUMUCMS         SAVE NUMBER OF UCMS FOUND
*---------------------------------------------------------------------*
*        SCAN THE UCM FOR THE MASTER CONSOLE TO DISPLAY IT
*---------------------------------------------------------------------*
SETMAST  LA    R14,1              SET DEFAULT TO FIRST CONSOLE     JL1
MASTSCAN LA    R3,UCMTAB          SET POINTER TO UCM ADDRESS TABLE GMM
         CH    R14,NUMUCMS        IS NUMBER TOO HIGH?              GMM
         BNH   MASTCONT           NO, CONTINUE                     GMM
         ABEND 1                  IMPOSSIBLE .. NO MASTER CONSOLE ?GMM
MASTCONT SLL   R14,2              MAKE CONSOLE NUMBER TABLE INDEX  GMM
         LA    R3,0(R3,R14)       SET POINTER TO UCM ADDRESS SLOT  GMM
         L     R3,0(0,R3)         SET POINTER TO UCM               GMM
         USING UCMLIST,R3         TELL ASSEMBLER ABOUT UCM         GMM
         L     R6,UCMXB
         USING IEERDCM,6
         TM    UCMDISP1,UCMDISPA  IS THIS A MASTER CONSOLE?        GMM
         BO    MASTFND            YES ? FOUND THE MASTER CONSOLE ..GMM
         SRL   R14,2              RESET CONSOLE NUMBER TO RELATIVE GMM
         LA    R14,1(0,R14)       SET POINTER TO NEXT CONSOLE      GMM
         B     MASTSCAN           CONTINUE MASTER CONSOLE SCAN LOOPGMM
MASTFND  SRL   R14,2              RESET CONSOLE NUMBER TO RELATIVE GMM
         ST    R14,OLDCONS        SET VALID OLD CONSOLE NUMBER     GMM
         ST    R14,CONSOLE        SET VALID CONSOLE NUMBER (MASTER)GMM
         MVC   CDFUCMID(1),UCMID  SAVE THE UCMID OF THE MASTER      BC
         L     R7,UCMUCB          R7 = ADDR OF UCB
         L     R7,DCMADTRN        GET ADDRESS OF TDCM              GMM
         USING STRTDCM,7
         SPACE 2
         TITLE 'MCS   CROSS MEMORY SERVICES     '
*---------------------------------------------------------------------*
*                                                                     *
*                 CMS ENQUEUE                                         *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
*
         ENQ   (USER,CMS,E,3,SYSTEM),RET=HAVE
*
         LTR   R15,R15
         BZ    GOTENQ
*
         LA    R15,512            SET BAD RETURN CODE
         L     R14,MCSR14     RESTORE THE RETURN ADDRESS
         BR    R14            RETURN TO OUR CALLER
*
USER     DC    CL8'USER'
CMS      DC    CL8'CMS'
*
GOTENQ   DS    0H
*                                      SET UP FOR CROSS MEMORY MOVE
*
         AXRES AXLIST=AXLIST           RESERVE AN AX               JPB
         SPACE 2
         LH    R1,UCMCTID         CONSOLE ASID
         AXEXT ASID=(1)                EXTRACT AX OF 'CONSOLE'IN R0JPB
         SPACE 2
         AXSET AX=(0)                  SET OUT AX TO THAT OF CONSOLEPB
         SPACE 2
         LH    R1,UCMCTID         CONSOLE ASID
         SSAR  R1                      SET 'CONSOLE' AS SECONDARY  JPB
         SPACE 2
         PRINT ON,GEN
*
*                                      PICK UP LAST LINE
*
*                                      PICK UP START ADDRESS
*
         LH    R1,UCMCTID         CONSOLE ASID
         SSAR  R1
         LA    R1,4               SET TRUE LENGTH                  JPB
         SLR   R0,R0              SET STORAGE KEY                  JPB
         MVCP  SIBPTR(R1),DCMASCRN-STRTDCM(R7),R0 PT TO SCRN ADRJPB
*
         LA    R1,2               SET LENGTH = HALFWORD
         SLR   R0,R0              SET STORAGE KEY
         MVCP  MCSLINES(R1),DCMMSGAL-STRTDCM(R7),R0  COPY LINES
         LH    R3,MCSLINES             MAX NUMBER OF LINES
         LA    R3,1(,R3)               PLUS 1 FOR IEEMSG
         STH   R3,MCSLINES             MAX NUMBER OF LINES FOR CDF
*
** THIS IS THE LENGTH OF THE DATA PORTION OF THE LINE
*
         LA    R1,2               SET LENGTH = HALFWORD
         SLR   R0,R0              SET STORAGE KEY
         MVCP  MCSLSIZE(R1),DCMLGNTH-STRTDCM(R7),R0  COPY LINE LEN
*
** THIS IS THE TOTAL LINE LENGTH IN THE BUFFER
*
         LA    R1,2               SET LENGTH = HALFWORD
         SLR   R0,R0              SET STORAGE KEY
         MVCP  MCSBUMP(R1),DCMCORLN-STRTDCM(R7),R0  COPY LINE INCR
*
*                                      SET UP FOR XMEM MOVE LOOP
         DROP  R4,R6
         LA    R4,MCSLINE1        R4 = ADDR OF OUTPUT BUFFER
         L     R8,SIBPTR          R8 = ADDR OF SCREEN IMAGE
         LH    R6,MCSLINES        R6 = MAX NUMBER OF LINES
         LA    R6,1(,6)           ADD 1 FOR RELATIVE 0
*
         SLR   R0,R0              RESET THE KEY
*
MVCPLOOP DS    0H
*
         LH    R3,MCSLSIZE        R3 = MAX LINE LENGTH
         MVCP  0(R3,R4),0(R8),R0  LOOP THRU THE CONSOLE BUFFER
*
         AH    R8,MCSBUMP         BUMP CONSOLE BUFF POINTER
         AH    R4,MCSLSIZE        BUMP CDF LINE POINTER
         BCT   R6,MVCPLOOP
*
         MVC   0(78,R4),IEEMSG    MOVE DUMMY LINE TO SPF AREA
*
RESETSAR DS    0H
*
         EPAR  R1                 EXTRACT PRIMARY ASN
         SSAR  R1
*
         DEQ   (USER,CMS,3,SYSTEM),RET=HAVE
*
         AXFRE AXLIST=AXLIST
         DROP  R3,R7
*
*
         LH    R15,MCSLINES        R15 = UCM MAX LINES
         LA    R15,2(,R15)        ADD 1 FOR DUMMY, 1 FOR REL ZERO
         L     R0,CONSOLE         LOAD THE CONSOLE NUMBER
         L     R14,MCSR14     RESTORE THE RETURN ADDRESS
         BR    R14            RETURN TO OUR CALLER
*
         TITLE 'MISCELLANEOUS CONSTANTS'
         LTORG
*
IEEMSG   DC    C'IEE152I'        BOTTOM MESSAGE ON OPER CONSOLE
BLANKS   DC    CL80' '
         DS    0F
*
*---------------------------------------------------------------------*
*                                                                     *
*        FOLLOWING IS IN SUPPORT OF C M S                             *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
* AXLIST   DC    H'1',H'0'           AXRES PARMLIST
         SPACE 2
         CNOP  0,8
*---------------------------------------------------------------------*
*                                                                     *
*               DISPLAY SCREEN - TRAILER SECTION                      *
*                                                                     *
*---------------------------------------------------------------------*
         LTORG
         SPACE 5
         TITLE 'EQUATES'
***********************************************************************
*                                                                     *
*        REGISTER EQUATES                                             *
*                                                                     *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
         MCSDSECT
         PRINT NOGEN
*.....................................................................*
*        MAPPING DSECT FOR SRM USER CONTROL BLOCK
*.....................................................................*
         IRAOUCB
*.....................................................................*
*        MAPPING DSECT FOR DMDT (DOMAIN DESCRIPTOR TABLE)             *
*.....................................................................*
         SPACE
DMDT     DSECT
DMDTNO   DS    XL1             DOMAIN NUMBER
DMDTLO   DS    XL1             MIN  MPL LEVEL
DMDTHI   DS    XL1             MAX  MPL LEVEL
DMDTWT   DS    XL1             WEIGHTING FACTOR
DMDTMPLT DS    XL2             CURRENT MPL TARGET
DMDTRUA  DS    XL2             AVE # OF READY USERS
DMDTGOOU DS    XL2             CURRENT # USERS GOING OUT
DMDTCMPL DS    XL2             CURRENT MPL
DMDTOUTU DS    XL2             CURRENT # USERS ON OUT Q
DMDTINCU DS    XL2             CURRENT # SWAPPABLE INCORE USERS
DMDTRUC  DS    XL4             ACCUM FOR READY USER AVERAGE
DMDTEND  DS    0X              END OF DMT
DMDTLEN  EQU   *-DMDT
         SPACE 2
*
* EQUATES....
*
RMCTDMDT EQU   X'B4'           POINTER TO DOMAIN TABLE
RMCTDMNC EQU   X'BC'           COUNT OF NUMBER OF DOMAINS
RMCTWMST EQU   X'18'           ADDRESS OF WLM SPEC TABLE
         SPACE 2
         TITLE '*** COMMUNICATION VECTOR TABLE ***'                GMM
         CVT   DSECT=YES                                           GMM
         TITLE '*** RDCM DSECT ***'                                GMM
IEERDCM  DSECT ,                                                   GMM
         IEECRDCM                                                  GMM
         TITLE '*** TDCM DSECT ***'                                GMM
*
         PRINT GEN
DCMENTR2 EQU   0           TO RESOLVE ADCON IN DSECT
IEETDCM  DSECT ,                                                   GMM
         IEECDCM                                                   GMM
         TITLE '*** MULTIPLE CONSOLE SUPPORT (MCS) UCM PREFIX ***' GMM
         IEECUCM FORMAT=NEW
         PRINT NOGEN
         IHAPSA
         IHARB
         SPACE 2
         TITLE 'IGC0023G - SVRB SAVE AREA MAP'
         ORG   RBEXSAVE
         DS    0CL48         MAX LENGTH OF WORK AREA
JIRETURN DS    A             SVC EXIT ADDRESS
JISR15   DS    A             ENTRY REGISTER 15
JISR0    DS    A             ENTRY REGISTER 0
JISR1    DS    A             ENTRY REGISTER 1
*
MYJQES   DS    F                       JES JQE ADDRESSES
AXLIST   DS    F             AX
MYJOES   DS    F                       JES JOE ADDRESSES
SVCDAS   DS    F             TRACK EXTENT TABLE
*
SVCHCT   DS    F             HCT ADDRESS
SVCDCB   DS    F             SPOOL DCB
DWORD    DS    F             START OF DOUBLE-WORD WORK AREA
SVCBFSIZ DS    H             BUFFER SIZE
SVCNUMDA DS    XL1           NUMBER OF EXTENTS IN SPOOL
         DS    XL1
*
JISL     EQU   *-JIRETURN    LENGTH OF SVRB WORK AREA
         END
JDFJQES TITLE 'JQE/JOE ACCESS'
***********************************************************************
*                                                                     *
* CHANGE LOG:                                                         *
*                                                                     *
*   5/09/85  BRIAN COOK.     CHANGED QUEUE SEARCH TO USE $JQHEADS     *
*                            THE JOBS ARE RETURNED IN PRIORITY ORDER. *
*                                                                     *
*   3/08/85  BRIAN COOK.     ADDED "AXFRE" AT END OF XMEM MODE.       *
*                                                                     *
*   2/07/85  BRIAN COOK.     INITIAL ENTRY.                           *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                                                                     *
*                 JQE/JOE ACCESS                                      *
*                                                                     *
*                                                                     *
* ABSTRACT: COPY JQE'S AND JOE'S FROM JES2 ADDRESS SPACE TO USER AREA.*
*                                                                     *
*                                                                     *
* FUNCTION: SVC IS DESIGNED TO TO BE INVOKED FROM ANY ASSEMBLER       *
*           PROGRAM.                                                  *
*                                                                     *
*           IT USES CROSS-MEMORY SERVICES TO ACCESS THE JQE'S AND     *
*           JOE'S IN THE JES2 ADDRESS SPACE AND COPY THEM TO STORAGE  *
*           IN THE CALLER'S ADDRESS SPACE.                            *
*                                                                     *
*                                                                     *
* INVOKING:                                                           *
*                                                                     *
*         LA    R15,8        <== I AM ENTRY NUMBER 8                  *
*         LA    R1,WORKADDR  <== 8K WORK AREA ADDRESS                 *
*         SVC   236          <== SUPERSVC ROUTER                      *
*                                                                     *
*         NOTE: THE WORK AREA MUST CONTAIN 512 BYTES OF WORK AREA     *
*               FOR THIS SVC. AFTER 512 BYTES, THE AREA WILL BE       *
*               USED TO STORE JQEAND JOE DATA.                        *
*                                                                     *
*                                                                     *
*               FOR EXAMPLE:                                          *
*                                                                     *
*               WORKADDR DC    A(WORKAREA)                            *
*               WORKAREA DS    XL512                                  *
*               JOBDATA1 DS    CL80                 <== JQE/JOE DATA  *
*                                                                     *
* OUTPUT:
*                                                                     *
*         R15   =   512    UNABLE TO GET CMS ENQ                      *
*                                                                     *
*                                                                     *
*                                                                     *
* EXTERNAL REFERENCE: NONE.                                           *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         COPY  JDFMACS
         EJECT
JDFJQES CSECT
         USING *,12
         LR    R12,R6         SET SVC BASE REGISTER
         B     STARTUP
         DC    C'JDFJQES JQE/JOE COPY BRIAN COOK 2/8/85'
STARTUP  DS    0H
         L     R13,0(,R1)     POINT TO WORK AREA
         USING JJSDSECT,13
         ST    R14,JJSR14          SAVE THE RETURN REGISTER
         USING CVT,R3              SET CVT ADDRESSIBILITY
         USING TCB,R4              SET TCB ADDRESSIBILITY
         USING ASCB,R7             SET ASCB ADDRESSIBILITY
         LA    R0,41               DONTSWAP
         ST    R0,JJSNSWP          DONTSWAP
         MVC   JJSNSWP(2),ASCBASID SET MY ASID
         LA    R0,42               OKSWAP
         ST    R0,JJSOKSWP         OKSWAP
         MVC   JJSOKSWP(2),ASCBASID SET MY ASID
*
         MVI   JJSAXLST+1,1        INITIALIZE AXLIST TO MASTER ASID
         SLR   R1,R1               CLEAR SSVT ADDRESS REG
         SLR   R0,R0               CLEAR SJB ADDRESS
*
         L     R6,TCBJSCB          POINT TO JSCB
*
         L     R6,JSCBSSIB-IEZJSCB(,R6) POINT TO SSIB
         USING SSIB,R6             SSIB ADDRESSIBILITY
         L     R2,CVTJESCT         POINT TO SUBSYSTEM CNTL TBL
         USING JESCT,R2            JESCT ADDRESSIBILITY
         LA    R2,JESSSCT-(SSCTSCTA-SSCT) POINT TO SSCT HEAD
         USING SSCT,R2             SSCT ADDRESSIBILITY
         SPACE 2
         LA    R15,4               SET JES2 NOT ACTIVE ERROR CODE
INIT0    DS    0H                  SEARCH FOR JES2 SSCT
         ICM   R2,15,SSCTSCTA      POINT TO NEXT SSCT
         BZR   R14                 IF ZERO THEN ERROR
         CLC   SSCTSNAM,SSIBSSNM   JES SSCT?
         BNE   INIT0               NO, THEN LOOP
         ICM   R6,15,SSCTSSVT      LOAD SSVT ADDRESS
         BZ    JESNOTUP            IF ZERO THEN JES2 NOT ACTIVE
         USING SSVT,6              JES2 SSVT ADDRESSIBILITY
*
         MVC   JJSBFSIZ(2),$SVBFSIZ BUFFER SIZE
         MVC   JJSDAS(4),$SVTDAS1  TRACK EXTENT TABLE
         MVC   JJSHCT(4),$SVHCT
         DROP  6
*
         EJECT
GETJQES  DS    0H                  READ JES2 JCT
*
*
         USING PSA,0
         L     R1,FLCCVT
         USING CVT,1
         L     R14,CVTJESCT
         USING JESCT,14
         L     R1,CVTASVT
         USING ASVT,1
         L     R2,ASVTMAXU  MAXIMUM NUMBER OF ADDRESS SPACES
         LA    R3,ASVTENTY  ADDRESS OF FIRST ENTRY
         DROP  1
         USING ASCB,15
ASCBLOOP DS    0H
         L     R15,0(,R3)   SET ASCB ADDRESS
         L     R4,ASCBJBNS  POINT TO JOB NAME
         CLC   0(5,R4),=C'JES2 '     IS THIS JES2
         BE    GOTJES2A     YES
         LA    R3,4(,R3)    BUMP ASVT LOOP
         BCT   R2,ASCBLOOP
*
         B     JESNOTUP
*
GOTJES2A DS    0H
         LH    R4,ASCBASID
*
         L     R1,JJSHCT               PICK UP THE JES2 HCT
         USING HCTDSECT,1
         LA    R2,$JOBQPTR             START OF JQE'S
         LA    R3,$JOTABLE             START OF JOE'S
         LA    R9,$MAXJOBS             MAX JOBS IN SYSTEM
         LA    R10,$OWNNODE            CURRENT JES NODE
         LA    R6,$JQHEADS             ACTIVE JOB QUEUE CHAINS
         DROP  1
*
*                                      SET UP FOR CROSS MEMORY MOVE
         LR    R7,R13                  MY SAVE AREA
*        LA    R13,JJSSAVE2           SRM SAVE AREA
*        SYSEVENT DONTSWAP,ENTRY=BRANCH
         L     R0,JJSNSWP
         LA    R13,JJSSAVE2           SRM SAVE AREA
         L     R15,FLCCVT
         L     R15,CVTOPTE-CVT(,R15)
         BALR  R14,R15
*
         LR    R13,R7                  MY SAVE AREA
*
*
         ENQ   (USER,CMS,E,3,SYSTEM),RET=HAVE
*
         LTR   R15,R15
         BZ    GOTENQ
*
         LA    R15,512            SET BAD RETURN CODE
         L     R14,JJSR14     RESTORE THE RETURN ADDRESS
         BR    R14            RETURN TO OUR CALLER
*
GOTENQ   DS    0H
*                                      SET UP FOR CROSS MEMORY MOVE
*
*
         AXRES AXLIST=JJSAXLST         RESERVE AN AX
*
         LA    R0,1                    SET OUR AX TO 1
         AXSET AX=(0)
*
         SSAR  R4                      SET 'JES2' AS SECONDARY
         SLR   R0,R0                   SECONDARY KEY
         LA    R1,4                    SET LENGTH
         MVCP  JJSJQES(R1),0(R2),R0    HCT JQE START ADDRESS
         SLR   R0,R0                   SECONDARY KEY
         LA    R1,4                    SET LENGTH
         MVCP  JJSJOES(R1),0(R3),R0    HCT JOE START ADDRESS
         SLR   R0,R0                   SECONDARY KEY
         LA    R1,2                    SET LENGTH
         MVCP  JJSMAXJQ(R1),0(R9),R0   HCT MAX JQES
         SLR   R0,R0                   SECONDARY KEY
         LA    R1,2                    SET LENGTH
         MVCP  JJSNODE(R1),0(R10),R0   HCT THIS NODE
         SLR   R0,R0                   SECONDARY KEY
         LA    R1,192                  SET LENGTH
         MVCP  JJSHEADS(R1),0(R6),R0   $JQHEADS
*
*
*
         LH    R9,JJSMAXJQ             LOOP CONTROL
*
         L     R4,JJSJQES              POINT TO HCT JQE AREA
*
         LA    R10,JJSLINE1            SET DSECT BASE FOR JDF JOB REC
         LA    R10,JOBSIZE(,R10)                 POINT TO NEXT REC
         USING JOBDSECT,10
         LA    R5,JJSCURRJ
         USING JQE,5
*
         MVC   JJSHEADS+192(4),=X'FFFFFFFF' SET END OF LIST FLAG
         LA    R11,JJSHEADS-4
*
JQELOOP1 DS    0H
         LA    R11,4(,R11)             POINT TO NEXT JQE CHAIN ENTRY
         CLC   0(4,R11),=X'FFFFFFFF'   AT END OF LIST?
         BE    XMEMDONE       ALL DONE WITH JQE'S
         L     R4,0(,R11)              POINT TO FIRST JQE CHAIN OFFS
         LTR   R4,R4                   IF CHAIN IS EMPTY
         BZ    JQELOOP1                PICK UP NEXT QUEUE
*
         A     R4,JJSJQES              POINT TO FIRST JQE
*
JQELOOP2 DS    0H
         SLR   R0,R0                   SET STORAGE KEY
         LA    R1,JQELNGTH            LENGTH OF MOVE
         MVCP  0(R1,R5),0(R4),R0       MOVE JQE'S
*
         CLI   JQEJNAME,C' '  NEVER USED
         BE    JQESKIP                 PICK UP NEXT JQE
         CLI   JQEJNAME,X'00' NEVER USED
         BE    JQESKIP                 PICK UP NEXT JQE
         CLI   JQETYPE,$FREE  FREE QUEUE
         BE    JQESKIP                 PICK UP NEXT JQE
*
*
         XC    0(JOBSIZE,R10),0(R10) CLEAR JDF JOB LINE
*
         MVC   JOBTYPE(1),JQETYPE
         MVC   JOBFLAGS(1),JQEFLAGS
         MVC   JOBFLAG3(1),JQEFLAG3
         MVC   JOBFLAG4(1),JQEFLAG4
         MVC   JOBHLDCT(2),JQEHLDCT
         MVC   JOBINPND(2),JQEINPND
         MVC   JOBTHISN(2),JJSNODE
         MVC   JOBXEQND(2),JQEXEQND
         MVC   JOBJCLAS(1),JQEJCLAS
         MVC   JOBJNAME(8),JQEJNAME
         MVC   JOBJOBNO(2),JQEJOBNO
         MVC   JOBPRNOD(2),JQEPRNOD
         MVC   JOBTRAK(4),JQETRAK
*
         TM    JQEFLAGS,QUEBUSY   IF JQE IS "BUSY", THEN PRTRT
         BO    RPUNJQE               IS OVERLAID WITH DEVID
*
         CLC   JQEPRTRT(4),HEXZEROS
         BE    RPUNJQE
*
         MVC   JOBRNODE(2),JQEPRNOD
         MVC   JOBREMOT(2),JQEPRREM
         B     WJOEJQE
*
RPUNJQE  DS    0H
*
         MVC   JOBRNODE(2),JQEPUNOD
         MVC   JOBREMOT(2),JQEPUREM
*
WJOEJQE  DS    0H
*
         SR    R1,R1
         ICM   R1,7,JQEJOEB
         LTR   R1,R1                 IS THERE A WORK JOE?
         BZ    JQECONTN              NO, JUST GET ANOTHER JQE
         L     R6,JJSJOES
         AR    R6,R1
*
NEXTJOE  DS    0H
* POINT TO FIRST WORK JOE
*
         LA    R1,JOESIZE              SET LENGTH OF MOVE
         SLR   R0,R0                   SET STORAGE KEY
         LA    R8,JJSCURRW             SET "TO" ADDRESS FOR MOVE
         USING JOEDSECT,8
         MVCP  0(R1,R8),0(R6),R0       MOVE WORK JOE
*
         TM    JOETYPE,$JOEFREE         FREE JOE
         BO    JQECONTN
*                                       WORK JOE FIELDS
         MVC   JOBCURCL(1),JOECURCL
         MVC   JOBDEVID(3),JOEDEVID
         MVC   JOBRECCT(4),JOERECCT
         MVC   JOBRNODE(2),JOERNODE
         MVC   JOBREMOT(2),JOEREMOT
         MVC   JOBGNAME(8),JOENAME       OUTPUT GROUP NAME
         MVC   JOBGID1(2),JOEID1
         MVC   JOBGID2(2),JOEID2
*
         MVC   JOBCFLAG(1),JOEFLAG
         NI    JOBCFLAG,X'7F'          CLEAR BURST FLAG
*
*
         SR    R1,R1
         ICM   R1,7,JOECHARB
         LTR   R1,R1
         BZ    NXTWJOE
         L     R6,JJSJOES
         AR    R6,R1
*
         LA    R1,JOESIZE
         SLR   R0,R0                   SET STORAGE KEY
         LA    R8,JJSCURRC             SET "TO" ADDRESS FOR MOVE
         MVCP  0(R1,R8),0(R6),R0       MOVE CHARACTERISTIC JOE
*                                     CHARACTERISTIC JOE FIELDS
         TM    JOECFLAG,$JOEBRST      BURST FLAG ON?
         BZ    *+8                     NO, LEAV IT OFF IN JOB REC
         OI    JOBCFLAG,$JOEBRST      ELSE SET BURST FLAG ON IN JOB REC
         MVC   JOBFORM(8),JOEFORM
         MVC   JOBWTRID(8),JOEWTRID
*
NXTWJOE  DS    0H
*
         LA    R8,JJSCURRW             SET DSECT BASE
         SR    R1,R1
         ICM   R1,7,JOEJQNXB
         LTR   R1,R1
         BZ    JQECONTN
         L     R6,JJSJOES
         AR    R6,R1
*
         XC    JOBSIZE(JOBSIZE,R10),JOBSIZE(R10) CLEAR NEXT REC
         MVC   JOBSIZE(JOBJQELN,R10),0(R10)      MOVE JQE FIELDS
         LA    R10,JOBSIZE(,R10)                 POINT TO NEXT REC
*
*
         B     NEXTJOE
*
JQECONTN DS    0H
*
         LA    R10,JOBSIZE(,R10)                 POINT TO NEXT REC
*
JQESKIP  DS    0H
         SR    R1,R1
         ICM   R1,7,JQENEXTB  POINT TO NEXT JQE IN THIS CHAIN
*
         LTR   R1,R1          IF THERE ISN'T ONE,
         BZ    JQELOOP1       POINT TO THE NEXT CHAIN
*
         L     R4,JJSJQES     PICK UP START ADDRESS OF JQES
         AR    R4,R1          ADD OFFSET
         B     JQELOOP2       GO PROCESS
*
*
XMEMDONE DS    0H
*---------------------------------------------------------------------*
*                                                                     *
*        RESET PRIMARY AND SECONDARY ADDRESS SPACES TO BE THE SAME.   *
*                                                                     *
*---------------------------------------------------------------------*
*
         EPAR  R1                 EXTRACT PRIMARY ASN
         SSAR  R1
*
*
         DEQ   (USER,CMS,3,SYSTEM),RET=HAVE
*
*                                    FREE THE AUTHORIZATION INDEX (AX)
         AXFRE AXLIST=JJSAXLST
*
         LR    R7,R13                  MY SAVE AREA
*        LA    R13,JJSSAVE2           SRM SAVE AREA
*        SYSEVENT OKSWAP,ENTRY=BRANCH
         L     R0,JJSOKSWP
         LA    R13,JJSSAVE2           SRM SAVE AREA
         L     R15,FLCCVT
         L     R15,CVTOPTE-CVT(,R15)
         BALR  R14,R15
         LR    R13,R7                  MY SAVE AREA
*
         MVI   0(R10),X'FF'            SET END OF ENTRIES
         MVC   1(JOBSIZE-1,R10),0(R10) SET END OF ENTRIES
*
*
*
EXIT0    DS    0H            EXIT SVC
         L     R14,JJSR14          RELOAD REGISTER
         SR    R15,R15             SET RETURN CODE
         BR    R14                 RETURN
JESNOTUP DS    0H            EXIT SVC
*
         LA    R10,JJSLINE1            SET DSECT BASE FOR JDF JOB REC
         MVI   0(R10),X'FF'            SET END OF ENTRIES
         MVC   1(JOBSIZE-1,R10),0(R10) SET END OF ENTRIES
*
         L     R14,JJSR14          RELOAD REGISTER
         LA    R15,12              SET RETURN CODE
         BR    R14                 RETURN
         EJECT
      TITLE 'MISCELLANEOUS CONSTANTS'
FZERO    DC    F'0'
BLANKS   DS    0CL80
SPACES   DC    CL80' '
HEXZEROS DC    8X'00'
*
FOURTYK  DC    F'40960'
F256     DC    F'256'
*
FPLUS1   DC    F'1'
EDMASK3P DC    XL4'2020204B'
EDMASK3  DC    XL3'202020'
EDMASK10 DC    XL10'40206B2020206B202120'
*
USER     DC    CL8'USER'
CMS      DC    CL8'CMS'
*
         SPACE 3
*
         LTORG
         TITLE ' MISCELLANEOUS DSECTS'
         PRINT NOGEN
         CVT   DSECT=YES
         IKJTCB
         IEFJESCT
         IEFJSSIB
         IEZJSCB
         IHAASVT
         IHAPSA
         IHAASCB
         IEFJSCVT
*
JDFJQES CSECT ,
         PRINT OFF
         COPY $HASPGBL
         $HASPEQU
         $SJB
         IEZDEB
DEBEXLEN EQU   16
         $SJXB
         $DAS
         $SVT
*                       BELOW REQUIRED FOR $HCT
         $BUFFER
         $JCT
         $SCAT
         $XECB
         $MIT
         $CAT
         $PCE
         $HCT
*
         $JQE
         $JOE
*
         PRINT ON
         JJSDSECT
         JDFJOB
         END
MVSCMD TITLE 'MVS/JES2 COMMAND INTERFACE'
***********************************************************************
*                                                                     *
*                                                                     *
*                 COMMAND INTERFACE                                   *
*                                                                     *
*                                                                     *
* ABSTRACT: ISSUE MVS/JES2 OPERATOR COMMANDS.                         *
*                                                                     *
*                                                                     *
* FUNCTION: CMD IS DESIGNED TO TO BE INVOKED FROM ANY ASSEMBLER       *
*           PROGRAM.                                                  *
*                                                                     *
*           IT INVOKES SVC 34, SETTING CONSOLE ID TO THE MVS MASTER   *
*           CONSOLE.                                                  *
*                                                                     *
*                                                                     *
* INVOKING:                                                           *
*                                                                     *
*         LA    R15,4        <== I AM ENTRY NUMBER 4                  *
*         LA    R1,WORKADDR  <== 8K WORK AREA ADDRESS                 *
*         SVC   236          <== SUPERSVC ROUTER                      *
*                                                                     *
*         NOTE: THE WORK AREA MUST CONTAIN 512 BYTES OF WORK AREA     *
*               FOR THIS SVC. AFTER 512 BYTES, THE COMMAND TO BE      *
*               ISSUED MUST BE SPECIFIED AS A LIST FORM WTO.          *
*               FOR EXAMPLE:                                          *
*                                                                     *
*               WORKADDR DC    A(WORKAREA)                            *
*               WORKAREA DS    XL512                                  *
*               CMDWTO   WTO   '$DU,LNE1',ROUTCDE=11,MF=L             *
*                                                                     *
* OUTPUT:
*                                                                     *
*         R15   =   SVC 34 RETURN CODE
*                                                                     *
*                                                                     *
*                                                                     *
* EXTERNAL REFERENCE: NONE.                                           *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
* CHANGE LOG:                                                         *
*                                                                     *
*   2/07/85  BRIAN COOK.     INITIAL ENTRY.                           *
*                                                                     *
*                                                                     *
***********************************************************************
         COPY  JDFMACS
         EJECT
MVSCMD CSECT
         USING *,12
         LR    R12,R6         SET SVC BASE REGISTER
         B     STARTUP
         DC    C'MVSCMD MVS/JES2 COMMANDS BRIAN COOK 2/7/85'
STARTUP  DS    0H
         L     R13,0(,R1)     POINT TO COMMAND TEXT
         USING CMDDSECT,13
         STM   R0,R15,CMDREGS SAVE THE REGISTERS
         USING PSA,0
         L     R3,FLCCVT      POINT TO CVT
         USING CVT,3
         L     R4,CVTCUCB         R4 = ADDR OF 'CUCB' (UCM BASE)
         USING UCM,R4
*
*
*
*
         TITLE 'CMD   SEARCH FOR MASTER CONSOLE'
*
*
*---------------------------------------------------------------------*
*                                                                     *
*          BUILD A TABLE OF UCM ADDRESSES (ONE PER CONSOLE)           *
*                                                                     *
*---------------------------------------------------------------------*
BLDUCMS  DS    0H
         L     R5,UCMVEA          R5 = ADDR OF FIRST UCM ENTRY
         L     R6,UCMVEZ          R6 = LENGTH OF EACH UCM ENTRY
         L     R7,UCMVEL          R7 = ADDR OF LAST UCM ENTRY
         LA    R8,UCMTAB+4        R8 = ADDR OF UCMTAB
         LA    R9,UCMTABE         R9 = ADDR OF END OF UCMTAB
         XR    R2,R2              R2  = 0 (NUMBER OF VALID UCMS)
UCMLOOP  ST    R5,0(0,R8)         SAVE UCM ADDRESS IN UCMTAB
         LA    R2,1(0,R2)         R2  = R2  + 1  (ONE MORE UCM)
         LA    R8,4(0,R8)         R8 = ADDR OF NEXT UCMTAB ENTRY
         CR    R8,R9              DOES R8 POINT PAST END OF UCMTAB?
         BNL   UCMDONE            YES; LEAVE LOOP
         AR    R5,R6              R5 = ADDR OF NEXT UCM ENTRY
         CR    R5,R7              DOES R5 POINT PAST UCM ENTRIES?
         BL    UCMLOOP            NOPE; KEEP GOING
UCMDONE  STH   R2,NUMUCMS         SAVE NUMBER OF UCMS FOUND
         DROP  R4
*---------------------------------------------------------------------*
*        SCAN THE UCM FOR THE MASTER CONSOLE AS THE DEFAULT
*        CONSOLE WHEN ENTERING COMMANDS.
*---------------------------------------------------------------------*
SETMAST  LA    R4,1               SET DEFAULT TO FIRST CONSOLE
         ST    R4,CONSOLE         SET DEFAULT CONSOLE NUMBER
MASTSCAN LA    R5,UCMTAB          SET POINTER TO UCM ADDRESS TABLE
         CH    R4,NUMUCMS         IS NUMBER TOO HIGH?
         BNH   MASTCONT           NO, CONTINUE
         B     ISSUE34            IMPOSSIBLE .. NO MASTER CONSOLE ?
MASTCONT SLL   R4,2               MAKE CONSOLE NUMBER TABLE INDEX
         LA    R5,0(R5,R4)        SET POINTER TO UCM ADDRESS SLOT
         L     R5,0(0,R5)         SET POINTER TO UCM
         USING UCMLIST,R5         TELL ASSEMBLER ABOUT UCM
         L     R6,UCMXB
         USING IEERDCM,6
         TM    UCMDISP1,UCMDISPA  IS THIS A MASTER CONSOLE?
         BO    MASTFND            YES ? FOUND THE MASTER CONSOLE ..
         SRL   R4,2               RESET CONSOLE NUMBER TO RELATIVE
         LA    R4,1(0,R4)         SET POINTER TO NEXT CONSOLE
         B     MASTSCAN           CONTINUE MASTER CONSOLE SCAN LOOP
MASTFND  SRL   R4,2               RESET CONSOLE NUMBER TO RELATIVE
         ST    R4,OLDCONS         SET VALID OLD CONSOLE NUMBER
         ST    R4,CONSOLE         SET VALID CONSOLE NUMBER (MASTER)
         MVC   CDFUCMID(1),UCMID  SAVE THE UCMID OF THE MASTER
         TITLE 'ISSUE SVC 34'
*
*                                      SET UP FOR SVC 34
ISSUE34  DS    0H
*
         L     R0,CONSOLE
         LA    R1,CMDWTO
         SVC   34
*
         L     R14,CMDR14     RESTORE THE RETURN ADDRESS
         BR    R14            RETURN TO OUR CALLER
*
         TITLE 'MISCELLANEOUS CONSTANTS'
         LTORG
*
         DS    0F
         TITLE 'EQUATES'
***********************************************************************
*                                                                     *
*        REGISTER EQUATES                                             *
*                                                                     *
***********************************************************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
         PRINT NOGEN
*.....................................................................*
*        MAPPING DSECT FOR SRM USER CONTROL BLOCK
*.....................................................................*
         IRAOUCB
*.....................................................................*
*        MAPPING DSECT FOR DMDT (DOMAIN DESCRIPTOR TABLE)             *
*.....................................................................*
         SPACE
DMDT     DSECT
DMDTNO   DS    XL1             DOMAIN NUMBER
DMDTLO   DS    XL1             MIN  MPL LEVEL
DMDTHI   DS    XL1             MAX  MPL LEVEL
DMDTWT   DS    XL1             WEIGHTING FACTOR
DMDTMPLT DS    XL2             CURRENT MPL TARGET
DMDTRUA  DS    XL2             AVE # OF READY USERS
DMDTGOOU DS    XL2             CURRENT # USERS GOING OUT
DMDTCMPL DS    XL2             CURRENT MPL
DMDTOUTU DS    XL2             CURRENT # USERS ON OUT Q
DMDTINCU DS    XL2             CURRENT # SWAPPABLE INCORE USERS
DMDTRUC  DS    XL4             ACCUM FOR READY USER AVERAGE
DMDTEND  DS    0X              END OF DMT
DMDTLEN  EQU   *-DMDT
         SPACE 2
*
* EQUATES....
*
RMCTDMDT EQU   X'B4'           POINTER TO DOMAIN TABLE
RMCTDMNC EQU   X'BC'           COUNT OF NUMBER OF DOMAINS
RMCTWMST EQU   X'18'           ADDRESS OF WLM SPEC TABLE
         SPACE 2
         TITLE '*** COMMUNICATION VECTOR TABLE ***'                GMM
         CVT   DSECT=YES                                           GMM
         TITLE '*** RDCM DSECT ***'                                GMM
IEERDCM  DSECT ,                                                   GMM
         IEECRDCM                                                  GMM
         TITLE '*** MULTIPLE CONSOLE SUPPORT (MCS) UCM PREFIX ***' GMM
         IEECUCM FORMAT=NEW
         IHAPSA
         CMDDSECT
         END
JCTSVC TITLE 'JES2 JCT ACCESS'
***********************************************************************
*                                                                     *
*                                                                     *
*                 JCT ACCESS                                          *
*                                                                     *
*                                                                     *
* ABSTRACT: RETURN FIELDS EXTRACTED FROM THE JES2 JCT.                *
*                                                                     *
*                                                                     *
* FUNCTION: JCT IS DESIGNED TO TO BE INVOKED FROM ANY ASSEMBLER       *
*           PROGRAM.                                                  *
*                                                                     *
*           IT INVOKES THE SPOOLIO MODULE FOR READING THE JCT FROM    *
*           THE JES2 SPOOL.                                           *
*                                                                     *
*                                                                     *
* INVOKING:                                                           *
*                                                                     *
*         LA    R15,12       <== I AM ENTRY NUMBER 12                 *
*         LA    R1,WORKADDR  <== 12K WORK AREA ADDRESS                *
*         SVC   236          <== SUPERSVC ROUTER                      *
*                                                                     *
*         NOTE: THE WORK AREA MUST CONTAIN 512 BYTES OF WORK AREA     *
*               FOR THIS SVC. AFTER 508 BYTES, THE MTTR OF THE JCT    *
*               TO BE READ MUST BE PROVIDED.                          *
*                                                                     *
*               THE JCT DATA WILL BE RETURNED AFTER THE 512 BYTES.    *
*                                                                     *
*               FOR EXAMPLE:                                          *
*                                                                     *
*               WORKADDR DC    A(WORKAREA)                            *
*                        DS    0D           ** MANDATORY **           *
*               WORKAREA DS    XL508                                  *
*               MTTRATA  DS    XL4                                    *
*               JCTDATA  DS    0XL24                                  *
*       JDFSPIOT DS    XL4   JCTSPIOT    SPIN IOT ADDRESS
*       JDFIOT   DS    XL4   JCTIOT      IOT ADDRESS
*       JDFEXSID DS    CL4   JCTEXSID    EXECUTION SMF SYSTEM-ID
*       JDFUSEID DS    CL8   JCTUSEID    SUBMITTING USER-ID
*                                                                     *
* OUTPUT:
*                                                                     *
*         R15   =   RETURN CODE
*                                                                     *
*                                                                     *
*                                                                     *
* EXTERNAL REFERENCE: NONE.                                           *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
* CHANGE LOG:                                                         *
*                                                                     *
*   2/12/85  BRIAN COOK.     INITIAL ENTRY.                           *
*                                                                     *
*                                                                     *
***********************************************************************
         COPY JDFMACS
         EJECT
JCTSVC CSECT
         USING *,12
         LR    R12,R6         SET SVC BASE REGISTER
         B     STARTUP
         DC    C'JCTSVC JES2 JCT EXTRACT BRIAN COOK 2/12/85'
STARTUP  DS    0H
         L     R13,0(,R1)     POINT TO WORK AREA
         USING JEDDSECT,13
         STM   R0,R15,JEDREGS SAVE THE REGISTERS
*
         CALL  SPOOLIO
*
         LTR   R15,R15
         BNZ   ERROR
*
         LA    R3,JEDBUFF
         USING JCTID,3
*
         LA    R8,JCTNJHDR             NJE HEADER
         USING NJHDSECT,8
*
         CLC   JCTID(3),=C'JCT'  GOT ONE
         BNE   ERROR12
*
* WATCH IT!!!!!
*
* THE FIELDS IN THE JCT ARE ACTUALLY OVERLAID BY THE EXTRACT FIELDS.
*
         ICM   R4,15,JCTJBKEY
         ICM   R5,15,JCTSPIOT
         ICM   R6,15,JCTIOT
         ICM   R7,15,JCTEXSID
*
         LA    R1,JCTUSEID
*
         CLC   NJHGORGN(4),=C'CIS '     ORIGIN RSCS
         BE    RSCS                     YES
*
         CLC   NJHGORGN(8),=C'CANASALT' DOS/VSE POWER/NJE
         BE    POWERNJE                 YES
*
         B     SETREST
*
RSCS     DS    0H
*
         LA    R1,NJHGUSID       USERID PUT HERE BY RSCS
         B     SETREST
*
POWERNJE DS    0H
*
         LA    R1,NJHGXEQU       USERID PUT HERE BY POWER/NJE
         B     SETREST
*
SETREST  DS    0H
*
         DROP  8
         ICM   R8,15,JCTODTON
*
         MVC   JEDUSEID(8),0(R1)
         STCM  R4,15,JEDJBKEY
         STCM  R5,15,JEDSPIOT
         STCM  R6,15,JEDIOT
         STCM  R7,15,JEDEXSID
         STCM  R8,15,JEDATOUT
*
RETURN0  DS    0H
         L     R14,JEDR14
         SR    R15,R15
         BR    R14
*
ERROR12  DS    0H
         LA    R15,12
*
ERROR    DS    0H
         L     R14,JEDR14
         BR    R14
*
         EJECT
         JEDDSECT
BUFSTART EQU   *+88
BUFDSECT EQU   *
         $JCT
         $NHD
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12                  1ST BASE REG
R13      EQU   13                  WORK AREA
R14      EQU   14
R15      EQU   15
*
         END
PDDBSVC TITLE 'JES2 PDDB ACCESS'
***********************************************************************
*                                                                     *
*                                                                     *
*                 PDDB ACCESS                                         *
*                                                                     *
*                                                                     *
* ABSTRACT: RETURN FIELDS EXTRACTED FROM THE JES2 IOT.                *
*                                                                     *
*                                                                     *
* FUNCTION: PDDB IS DESIGNED TO TO BE INVOKED FROM ANY ASSEMBLER      *
*           PROGRAM.                                                  *
*                                                                     *
*           IT INVOKES THE SPOOLIO MODULE FOR READING THE IOT  FROM   *
*           THE JES2 SPOOL.                                           *
*                                                                     *
*                                                                     *
* INVOKING:                                                           *
*                                                                     *
*         LA    R15,16       <== I AM ENTRY NUMBER 16                 *
*         LA    R1,WORKADDR  <== 40K WORK AREA ADDRESS                *
*         SVC   236          <== SUPERSVC ROUTER                      *
*                                                                     *
*         NOTE: THE WORK AREA MUST CONTAIN 512 BYTES OF WORK AREA     *
*               FOR THIS SVC. AFTER 512 BYTES, THE MTTR OF THE SPIN   *
*               IOT AND THE NORMAL IOT MUST BE PROVIDED.              *
*                                                                     *
*               THE PDDB DATA WILL BE RETURNED AFTER THE 512 BYTES.   *
*                                                                     *
*               FOR EXAMPLE:                                          *
*                                                                     *
*               WORKADDR DC    A(WORKAREA)                            *
*                        DS    0D           ** MANDATORY **           *
*               WORKAREA DS    XL512                                  *
*               SPINIOT  DS    XL4                                    *
*               NORMIOT  DS    XL4                                    *
*                        DS    XL12                                   *
*               DDLINES  DS    XL12288                                *
*                                                                     *
* OUTPUT:
*                                                                     *
*         R15   =   RETURN CODE
*                                                                     *
*                                                                     *
*                                                                     *
* EXTERNAL REFERENCE: NONE.                                           *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
* CHANGE LOG:                                                         *
*                                                                     *
*   4/04/85  BRIAN COOK.     INCREASED WORK AREA TO 40K               *
*                                                                     *
*                                                                     *
*   2/12/85  BRIAN COOK.     INITIAL ENTRY.                           *
*                                                                     *
*                                                                     *
***********************************************************************
         COPY  JDFMACS
         EJECT
PDDBSVC CSECT
         USING *,12
         LR    R12,R6         SET SVC BASE REGISTER
         B     STARTUP
         DC    C'PDDBSVC JES2 PDDB FORMAT BRIAN COOK 2/12/85'
STARTUP  DS    0H
         L     R13,0(,R1)     POINT TO COMMAND TEXT
         USING PEDDSECT,13,14,15
         STM   R0,R15,PEDREGS SAVE THE REGISTERS
         LA    R15,2048
         LA    R14,2048(R13,R15)
         LA    R15,2048(R14,R15)
*
         LR    R11,R13        POINT DOWN 34K
         A     R11,K34        POINT DOWN 34K
         USING JEDDSECT,11
*
         EJECT
*
*
         CLC   FZEROS(4),NORMIOT    IOT DISK ADDRESS
         BE    ABADIOT
*                              READ 1ST NORMAL IOT
         LA    R8,DDAREA
         USING DDLINE,8
*
         MVC   JEDMTTR2(4),NORMIOT
*
PDDBLOOP DS    0H
*
         LR    R10,R13
         LR    R13,R11
         CALL  SPOOLIO
         LR    R13,R10
*
         LTR   R15,R15
         BNZ   ERROR
*
         LA    R9,JEDBUFF
         LR    R7,R9
         USING IOTSTART,9
         CLC   0(4,R9),=C'IOT '
         BE    GOTIOT2
*
         LA    R15,12
         B     ERROR
*
GOTIOT2  DS    0H
*
*
         L     R6,IOTPDDBP  END OF PDDB'S OFFSET
         LA    R6,0(6,R7)   END OF PDDB'S ADDRESS
         MVC   NORMIOT(4),IOTIOTTR    NEXT IOT DISK ADDRESS
         MVC   JEDMTTR2(4),IOTIOTTR   NEXT IOT DISK ADDRESS
         A     R7,IOTPDDB     OFFSET OF FIRST PDDB
         LA    R1,IOTSTART-IOTDSECT   ADJUST FOR BUFF CTL INFO
         SR    R7,R1
         USING PDBDSECT,7
*
*
NEXTPDDB DS    0H
*
         SR    R1,1
         LH    R1,PDBDSKEY
         C     R1,FZEROS               IF DSKEY ZERO
         BE    SKIPPDDB                SKIP THIS
*
         MVI   DDLINE,C' '      CLEAR OUTPUT AREA
         MVC   DDLINE+1(DDLINESZ-1),DDLINE
         MVI   DDLINESZ(R8),X'FF'    RESET END OF LIST FLAG
*
         MVC   DDN(8),PDBDDNAM       SET THE DDNAME
         MVC   STEPNAME(8),PDBSNAME  SET THE STEPNAME
         MVC   PROCNAME(8),PDBPNAME  SET THE PROCSTEPNAME
*
         CVD   R1,DOUBLEWD
         OI    DOUBLEWD+7,X'0F'
         UNPK  DDLDSID(3),DOUBLEWD+6(2)
         CLI   SPINFLAG,0           NOT DOING SPIN DATASETS
         BE    *+14                 SKIP THIS
         MVI   DDLDSID,C'9'         MAKE SPIN DSID'S 900
         MVC   DDN(8),=C'--SPIN--'  FLAG IT
*
         CLC   PDBDRMT(2),=X'0000'  IS THERE A REMOTE DEST
         BE    *+8                  NOPE
         MVI   DDREMOTE,C'R'        SET FLAG
*
GOTDDNOW DS    0H
         MVC   DDCLASS(1),PDBCLASS
         SR    14,14
         IC    R14,PDBCOPYS
         CVD   R14,DOUBLEWD
         MVC   DDCOPIES-1(4),EDIT4
         ED    DDCOPIES-1(4),DOUBLEWD+6
         TM    PDBFLAG2,PDB2BRST        IS IT BURST
         BZ    *+8                      NOPE
         MVI   DDBURST,C'B'
*
         L     R14,PDBRECCT   LINES
         CVD   R14,DOUBLEWD
         MVC   DDLINES(8),EDIT8
         ED    DDLINES,DOUBLEWD+4
*
         MVC   DDMTTR(4),PDBMTTR
*
         MVC   DDFORM(4),PDBFORMS
         OC    DDFORM(4),SPACES        CHANGE ZEROS TO BLANKS
         MVC   DDFCB(4),PDBFCB
         MVC   DDUCS(4),PDBUCS
         MVC   DDLRECL(2),PDBLRECL
*
         SR    R14,R14
         ICM   R14,3,PDBLRECL
         CVD   R14,DOUBLEWD
         MVC   DDDRECL(6),EDIT6
         ED    DDDRECL,DOUBLEWD+5
*
         MVC   DDRECFM(1),PDBRECFM
         TM    DDRECFM,X'C0'
         BO    PDDBRECU
         BZ    PDDBRECU
*
         TM    DDRECFM,X'80'
         BO    PDDBRECF
         MVI   DDDRECF,C'V'         SET RECFM "V"
         B     PDDBLOCK             SEE IF IT'S BLOCKED
*
FZEROS   DC    F'0'
HEXTABLE DC    C'0123456789ABCDEF'
PDDBRECU DS    0H
*
         MVI   DDDRECF,C'U'         SET RECFM "U"
         B     PDDBBBMP             GO BUMP
*
PDDBRECF DS    0H
*
         MVI   DDDRECF,C'F'         SET RECFM "F"
*
PDDBLOCK DS    0H
*
         TM    DDRECFM,X'10'
         BZ    PDDBCCCC             NOT BLOCKED, CHECK FOR CARR CTL
         MVI   DDDRECF+1,C'B'       SET BLOCKED
*
PDDBCCCC DS    0H
*
         TM    DDRECFM,X'06'        ANY CARRIAGE CONTROL
         BZ    PDDBBBMP             NO, JUST BUMP
         BO    PDDBBBMP             NO, JUST BUMP
*
         TM    DDRECFM,X'04'        ASA CARRIAGE CONTROL
         BO    PDDBASAC             YES, SET IT
*
         CLI   DDDRECF+1,C' '       BLANK
         BNE   *+12                 NO, MUST BE BLOCKED
         MVI   DDDRECF+1,C'M'       SET IT
         B     PDDBBBMP             GO BUMP
         MVI   DDDRECF+2,C'M'       SET IT
         B     PDDBBBMP             GO BUMP
*
PDDBASAC DS    0H
*
         CLI   DDDRECF+1,C' '       BLANK
         BNE   *+12                 NO, MUST BE BLOCKED
         MVI   DDDRECF+1,C'A'       SET IT
         B     *+8                  GO BUMP
         MVI   DDDRECF+2,C'A'       SET IT
*
PDDBBBMP DS    0H
         LA    R8,DDLINESZ(,R8)      BUMP TO NEXT ENTRY
         MVI   0(R8),X'FF'        END OF ENTRIES
SKIPPDDB DS    0H
         LA    R7,PDBLENG(,7)        BUMP TO NEXT PDDB
         CR    R7,R6
         BL    NEXTPDDB
         MVC   JEDMTTR2(4),NORMIOT    IOT DISK ADDRESS
         L     R1,NORMIOT
         LTR   R1,1
         BNZ   PDDBLOOP
         L     R1,SPINIOT
         LTR   R1,1
         BZ    RETURN0
         MVI   SPINFLAG,1           NOW DOING SPIN DATASETS
         MVC   NORMIOT(4),SPINIOT     IOT DISK ADDRESS
         MVC   JEDMTTR2(4),SPINIOT    IOT DISK ADDRESS
         XC    SPINIOT(4),SPINIOT     IOT DISK ADDRESS
         B     PDDBLOOP
*
RETURN0  DS    0H
         L     R14,PEDR14
         SR    R15,R15
         BR    R14
*
ABADIOT  DS    0H
         LA    R15,12
*
ERROR    DS    0H
         L     R14,PEDR14
         BR    R14
*
SPACES   DC    CL8' '
*
EDIT4    DC    X'40202120'
EDIT6    DC    X'402020202121'
EDIT8    DC    X'4020202020202120'
K34      DC    F'34816'
*
         PEDDSECT
         JEDDSECT
         DDLINE
BUFSTART EQU   *+88
BUFDSECT EQU   *
         PRINT NOGEN
         $TAB
         $IOT
         $PDDB
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12                  1ST BASE REG
R13      EQU   13                  WORK AREA
R14      EQU   14
R15      EQU   15
*
         END
SPOOLIO TITLE 'JES2 SPOOL READ'
***********************************************************************
*                                                                     *
*                                                                     *
*                 SPOOL I/O                                           *
*                                                                     *
*                                                                     *
* ABSTRACT: READ A BLOCK FROM SPOOL.                                  *
*                                                                     *
*                                                                     *
* FUNCTION: SPOOLIO IS DESIGNED TO TO BE INVOKED FROM ANY ASSEMBLER   *
*           PROGRAM.                                                  *
*                                                                     *
*           IT ISSUES EXCP USING THE SJBDCB.                          *
*                                                                     *
*                                                                     *
* INVOKING:                                                           *
*                                                                     *
*         LA    R1,WORKADDR  <== 12K WORK AREA ADDRESS                *
*         CALL  SPOOLIO      <== CALL STATEMENT                       *
*                                                                     *
*         NOTE: THE WORK AREA MUST CONTAIN 512 BYTES OF WORK AREA     *
*               FOR THIS PROGRAM. THE BLOCK RETRIEVED FROM THE SPOOL  *
*               WILL BE PLACED AFTER THE 512 BYTES. THE LAST 4 BYTES  *
*               OF THE 512-BYTE AREA MUST CONTAIN THE MTTR OF THE     *
*               BLOCK TO BE READ FROM SPOOL.                          *
*                                                                     *
*               FOR EXAMPLE:                                          *
*                                                                     *
*               WORKADDR DC    A(WORKAREA)                            *
*                        DS    0D           ** MANDATORY **           *
*               WORKAREA DS    XL508                                  *
*               READMTTR DS    XL4                                    *
*               BUFFER   DS    XL4096                                 *
*                        DS    XL8192                                 *
*                                                                     *
* OUTPUT:
*                                                                     *
*         R15   =   RETURN CODE
*                                                                     *
*                                                                     *
*                                                                     *
* EXTERNAL REFERENCE: NONE.                                           *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
* CHANGE LOG:                                                         *
*                                                                     *
*   2/12/85  BRIAN COOK.     INITIAL ENTRY.                           *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
SPOOLIO CSECT
         USING *,12
         STM   R14,R12,12(R13)    SAVE REGS
         LR    R12,R15
         B     STARTUP
         DC    C'SPOOLIO JES2 SPOOL READ BRIAN COOK 2/12/85'
STARTUP  DS    0H
         LR    R11,R13        CALLING SAVE AREA
         USING JESDSECT,11
         LA    R1,SAVE2       MY SAVE AREA
         ST    R1,8(,R13)     CALLING SAVE AREA
         ST    R13,4(,R1)     CALLING SAVE AREA
*
         LR    R13,R1         POINT TO COMMAND TEXT
         MVC   READMTTR(4),PASSMTTR  SAVE THIS
         DROP  11
         USING SAVE2,13
         USING PSA,0
*
*
         L     R3,FLCCVT           SET CVT ADDRESSIBILITY
         USING CVT,R3
         L     R4,PSATOLD          SET TCB ADDRESSIBILITY
         USING TCB,R4
         USING IOBNIOBA,R8         SET BUFFER ADDRESSIBILITY
*
*
         L     R6,TCBJSCB          POINT TO JSCB
         LR    R15,R6              COPY JSCB ADDRESS
         L     R15,JSCBSSIB-IEZJSCB(,R15) LOAD SSIB ADDRESS
         L     R15,SSIBSUSE-SSIBEGIN(,R15) LOAD SJB ADDRESS
         L     R15,SJBSJXB-SJBDSECT(,R15) LOAD SJB EXTENSION
         MVC   SVCDCB(4),SJXIDCB-SJXDSECT(R15) LOAD SJB DCB ADDRESS
*
         L     R6,JSCBSSIB-IEZJSCB(,R6) POINT TO SSIB
         USING SSIB,R6             SSIB ADDRESSIBILITY
         L     R2,CVTJESCT         POINT TO SUBSYSTEM CNTL TBL
         USING JESCT,R2            JESCT ADDRESSIBILITY
         LA    R2,JESSSCT-(SSCTSCTA-SSCT) POINT TO SSCT HEAD
         USING SSCT,R2             SSCT ADDRESSIBILITY
         SPACE 2
         LA    R15,4               SET JES2 NOT ACTIVE ERROR CODE
INIT0    DS    0H                  SEARCH FOR JES2 SSCT
         ICM   R2,15,SSCTSCTA      POINT TO NEXT SSCT
         BZR   R14                 IF ZERO THEN ERROR
         CLC   SSCTSNAM,SSIBSSNM   JES SSCT?
         BNE   INIT0               NO, THEN LOOP
         ICM   R6,15,SSCTSSVT      LOAD SSVT ADDRESS
         BZR   R14                 IF ZERO THEN JES2 NOT ACTIVE
         USING SSVT,6              JES2 SSVT ADDRESSIBILITY
*
*        MVC   SVCNUMDA(1),$SVNUMDA NUMBER OF SPOOL EXTENTS
         MVC   SVCBFSIZ(2),$SVBFSIZ BUFFER SIZE
         MVC   SVCDAS(4),$SVTDAS1  TRACK EXTENT TABLE
         MVC   SVCHCT(4),$SVHCT
*
RDSPOOL  DS    0H                  READ JES2 SPOOL
         LA    R15,12              ASSUME EXTENT INVALID
*        CLM   R1,8,SVCNUMDA       CHECK FOR VALID EXTENT
*        BNLR  R14                 IF NOT LOW THEN INVALID
         SR    R2,R2               CLEAR BUFFER LENGTH REGISTER
         ICM   R2,3,SVCBFSIZ       LOAD BUFFER SIZE
*
         LA    R8,SPOOLIOB       LOAD BUFFER ADDRESS REGISTER
         LR    R0,R8               SET ADDRESS FOR CLEAR
         LA    R1,4095             SET LENGTH FOR CLEAR
         SR    R15,R15             SET LENGTH TO ZERO
         MVCL  R0,R14              CLEAR BUFFER TO ZEROS
         MVI   IOBFLAG1,IOBCMDCH+IOBUNREL CMD CHAINING AND UNRELATED
         LA    R0,IOBNECB          LOAD ECB ADDRESS
         ST    R0,IOBECBPT         STORE IN IOB
         MVC   IOBDCBPT(4),SVCDCB  STORE DCB ADDRESS IN IOB
         LA    R0,IOBSEEK+8        LOAD CHANNEL PGM ADDRESS
         ST    R0,IOBSTART         STORE CP ADDRESS IN IOB
         LA    R0,CCW2             LOAD SEARCH CCW ADDRESS
         ST    R0,CCW3             STORE IN CCW3 FOR TIC
         LA    R0,BUFSTART         LOAD BUFSTART ADDRESS
         ST    R0,CCW4             STORE IN READ CCW
         LA    R0,IOBSEEK+3        LOAD SEARCH ID ADDRESS
         ST    R0,CCW2             STORE IN SEARCH ID CCW
         LA    R0,CCW1+5           LOAD SECTOR ADDRESS
         ST    R0,CCW1             STORE IN RPS CCW
         STH   R2,CCW4+6           STORE BLOCK LENGTH IN READ CCW
         OC    CCW1(LCP),CP        OR IN REST OF CHANNEL PGM
*
         L     R0,READMTTR         RELOAD MTTR
*
         LA    R15,16             ASSUME INVALID TRACK ADDRESS
         LR    R3,R0               COPY MTTR
         LA    R0,0(,R3)           MAKE R0 0TTR
         XR    R3,R0               MAKE R3 M000
         ST    R3,IOBM             STORE EXTENT IN IOB
         STC   R0,IOBR             STORE RECORD NUMBER IN IB
         L     R9,SVCDAS           LOAD TRACK EXTENT TBL ADDRESS
         USING DASDSECT,R9         TED ADDRESSIBILITY
*
TSTDAS   DS    0H
         CLM   R3,1,DASEXTNO       MATCH ON EXTENT NUMBER?
         BE    GOTDAS              YES
*
*
GOTDAS   DS    0H
         LR    R2,R0               COPY 0TTR
         SRDL  R2,40               SET TT IN R2. R3 FOR DIVIDE
         ICM   R0,15,DASTKCYL      GET NUMBER OF TRACKS/CYLINDERS
         BZ    ERROR               IF ZERO THEN SPOOL PACK ABSENT
         DR    R2,R0               ELSE COMPUTE CC HH
         STCM  R3,3,IOBCC          STORE CC IN IOB
         STCM  R2,3,IOBHH          STORE HH IN IOB
         MVI   CCW1,X'03'          ASSUME NO RPS
         TM    DASFLAG,DASRPSF     IS TABLE VALID
         BZ    EXCPSTEP            IF NOT, SKIP THIS
         LA    R2,DASRPS           POINT TO EXT RPS TBL
         SLR   R3,R3               ELSE ZERO REGISTER FOR INSERT
         IC    R3,IOBR             INSERT RECORD NUMBER FROM IOB
         IC    R3,0(R3,R2)         GET CORRES SECTOR NUMBER
         STC   R3,CCW1+5           SET SECTOR DATA
         MVI   CCW1,X'23'          SET SET-SECTOR COMMAND
*
EXCPSTEP DS    0H
         XC    IOBNECB,IOBNECB     CLEAR ECB
         EXCP  IOBSTDRD            READ SPOOL BLOCK
         WAIT  ECB=IOBNECB         WAIT FOR I/O TO COMPLETE
         CLI   IOBNECB,X'7F'       NORMAL COMPLETION?
         BE    READONE             IF NORMAL THEN RETURN
         LA    R15,16              ASSUME TRACK ADDRESS ERROR
         CLI   IOBNECB,X'42'       TEST ASSUMPTION
         BE    ERROR               IF CORRECT THEN SKIP CODES
         L     R1,IOBCSW-1         LOAD LAST CCW ADDRESS + 8
         LA    R1,0(R1)            CLEAR HIGH BYTE
         SH    R1,=H'8'            POINT TO LAST CCW
         ICM   R0,8,0(R1)          INSERT OPERATION CODE
         ICM   R0,4,IOBFLAG3       INSERT IOB FLAG3 CODE
         ICM   R0,3,IOBSENS0       INSERT IOB SENSE BYTES
         ST    R0,IOBCSW-1         STORE STATUS
         LD    R0,IOBCSW-1         LOAD STATUS
         L     R1,IOBNECB          LOAD ERROR CODE
         LA    R15,20              SET I/O ERROR RC
         B     ERROR               GO THRU ERROR RETURN
*
READONE  DS    0H
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         SR    R15,R15
         BR    R14
ERROR    DS    0H
         L     R13,4(,R13)
         L     R14,12(,R13)
         LM    R0,R12,20(R13)
         BR    R14
      TITLE 'SPOOLIO - CHANNEL PROGRAMS AND MISCELLANEOUS CONSTANTS'
FZERO    DC    F'0'
BLANKS   DS    0CL80
SPACES   DC    CL80' '
FPLUS1   DC    F'1'
EDMASK3P DC    XL4'2020204B'
EDMASK3  DC    XL3'202020'
EDMASK10 DC    XL10'40206B2020206B202120'
CP       DS    0D                  CHANNEL PROGRAM
CPCCW1   CCW   X'03',0,SILI+CC,1   NOP
CPCCW2   CCW   X'31',0,SILI+CC,5   SEARCH ID EQUAL
CPCCW3   CCW   X'08',0,SILI+CC,1   TIC
CPCCW4   CCW   X'06',0,SILI,0      READ DATA
         SPACE
LCP      EQU   *-CP                LENGTH OF CHANNEL PGM
         SPACE 3
*
         LTORG
         TITLE 'SPOOLIO - MISCELLANEOUS DSECTS'
         PRINT NOGEN
         CVT   DSECT=YES
         SPACE 2
         IKJTCB
         SPACE 2
         IEFJESCT
         SPACE 2
         IEFJSSIB
         SPACE 2
         IEZJSCB
         SPACE 2
         IHAASVT
         IHAPSA
         SPACE 2
LPRFX    EQU   X'58'              BUFFER PREFIX LENGTH
CD       EQU   X'80'              DATA CHAIN
CC       EQU   X'40'              COMMAND CHAIN
SILI     EQU   X'20'              SUPPRESS INCORRECT LENGTH
SKIP     EQU   X'10'              SKIP DATA TRANSFER
PCI      EQU   X'08'              PROGRAM CONTROLLED INTERRUPTION
IDA      EQU   X'04'              INDIRECT ADDRESSING
         SPACE 2
         IEZIOB
         SPACE 2
         ORG   IOBSEEK+8
CHANPGM  DS    0D                  CHANNEL PGM AREA
CCW1     DS    D                   SET SECTOR / READ HA
CCW2     DS    D                   SEARCH ID EQUAL
CCW3     DS    D                   TIC
CCW4     DS    D                   READ KEY AND DATA
COUNT    DS    D                   DA COUNT FIELD
         SPACE 2
BUFDSECT EQU   IOBNIOBA            EQUATE BUFDSECT
         SPACE
         ORG   IOBNIOBA+LPRFX      ORG PAST PREFIX
         SPACE 1
BUFSTART DS    0D                  BUFFER START
IOBLEN   EQU   *-IOBNIOBA
         SPACE 3
         IEFJSSOB (SO,CS,JS,RQ,RR)
         IEFJSCVT
*
SPOOLIO CSECT ,
         PRINT OFF
         COPY $HASPGBL
         $HASPEQU
         $SJB
         IEZDEB
DEBEXLEN EQU   16
         $SJXB
         $DAS
         $SVT
*                       BELOW REQUIRED FOR $HCT
         $JCT
         $SCAT
         $XECB
         $MIT
         $CAT
         $PCE
         $JQE
         $HCT
*
*
         PRINT ON
*
*
JESDSECT DSECT
         DS    18F
SVCREGS  DS    0F
SVCR0    DS    F
SVCR1    DS    F
SVCR2    DS    F
SVCR3    DS    F
SVCR4    DS    F
SVCR5    DS    F
SVCR6    DS    F
SVCR7    DS    F
SVCR8    DS    F
SVCR9    DS    F
SVCR10   DS    F
SVCR11   DS    F
SVCR12   DS    F
SVCR13   DS    F
SVCR14   DS    F
SVCR15   DS    F
*
SAVE2    DS    18F
*
         DS    0F
SVCDAS   DS    F             TRACK EXTENT TABLE
*
SVCHCT   DS    F             HCT ADDRESS
SVCDCB   DS    F             SPOOL DCB
DWORD    DS    F             START OF DOUBLE-WORD WORK AREA
SVCBFSIZ DS    H             BUFFER SIZE
SVCNUMDA DS    XL1           NUMBER OF EXTENTS IN SPOOL
         DS    XL1
READMTTR DS    XL4
*
         ORG   JESDSECT+508
*
PASSMTTR DS    XL4
*
         ORG   *-IOBLEN
SPOOLIOB DS    XL(IOBLEN)    JCTSPIOT    SPIN IOT ADDRESS
*
WORKLEN  EQU   *-JESDSECT
         END
/*
//LKED1   EXEC PGM=HEWLH096,PARM=(XREF,LET,LIST,NCAL,RENT),
//             COND=(2,LT,ASM),REGION=1024K
//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,PASS)
//         DD  DDNAME=SYSIN
//SYSLIB   DD  DSN=SYS2.LINKLIB,DISP=SHR
//SYSLMOD  DD  DISP=SHR,
//             DSN=SYS1.LPALIB,
//         UNIT=3380,VOL=SER=MVSTGT
//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))
//SYSTERM  DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  *
     NAME IGC0023G(R)
/*
