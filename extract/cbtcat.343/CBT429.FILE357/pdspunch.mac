//***
//***  PARTITIONED DATA SET PUNCH UTILITY ASSEMBLY AND LINK
//***
//***    ( CHANGE -YOUR-STEPLIB- TO YOUR LOAD MOD LIBRARY )
//***
//A          EXEC     PGM=ASMA90,REGION=4M,
//             PARM='RENT'
//SYSLIB       DD       DSN=SYS1.MACLIB,DISP=SHR

         TITLE '***  PDSPUNCH  --  FREEWARE  --  STELI INC. 2000  ***'

*  PDSPUNCH IS FREEWARE AND MAY BE USED AT NO COST. NEITHER A LICENCE
*  NOR REGISTRATION IS REQUIRED.  YOU MAY INDICATE TO STELI THAT YOU'RE
*  A PDSPUNCH USER VIA WWW.STELI.COM OR BY MAIL. SUGGESTIONS, QUESTIONS
*  OR PROBLEMS ARE WELCOME.
*      STELI INC.
*      PDSPUNCH TEAM
*      27 HALF HOLLOW TURN
*      MONROE, NY  10950-4118

***********************************************************************
*    DEFAULT OPTION VALUES
***********************************************************************

&DDOPTS  SETC  'SYSIN'            DDNAME FOR OPTIONS FILE
&DDPDS   SETC  'SYSUT1'           DDNAME FOR PARTITIONED DATA SET
&DDPUNCH SETC  'SYSPUNCH'         DDNAME FOR PUNCH FILE

&DEFDUPS  SETC 'N'                DUPS DEFAULT
&DEFDUPSO SETC 'N'                DUPS ONLY DEFAULT
&DEF1ST   SETA 99999999           FIRST OPTION CHOSEN DEFAULT
&DEFMEMGT SETC '
&DEFMEMLT SETC 'ÿÿÿÿÿÿÿÿ'         HIGHEST MEMBER TO BE SELECTED-HEX F'S

***********************************************************************
*    PROGRAM ENTRY
***********************************************************************

PDSPUNCH AMODE 31
PDSPUNCH RMODE ANY

R0       EQU    0                 VARIED USAGE - ROUTINE DEPENDENT
R1       EQU    1                   "      "        "        "
R2       EQU    2                   "      "        "        "
R3       EQU    3                   "      "        "        "
R4       EQU    4                   "      "        "        "
R5       EQU    5                   "      "        "        "
R6       EQU    6                   "      "        "        "
R7       EQU    7                   "      "        "        "
R8       EQU    8                   "      "        "        "
R9       EQU    9                   "      "        "        "
R10      EQU   10                 BASE REGISTER
R11      EQU   11                 BASE REGISTER
R12      EQU   12                 RETURN REGISTER FOR SUBROUTINES
R13      EQU   13                 SAVE AREA & MISCELLANEOUS STORAGE
R14      EQU   14                 OCCASIONAL RETURN REGISTER (PUNCHRET)
R15      EQU   15                 SHORT TERM WORK REGISTER

PDSPUNCH CSECT                    ENTRY POINT
         STM   R14,R12,12(R13)
         LR    R10,R15
         LA    R11,4095
         LA    R11,1(R10,R11)
         USING PDSPUNCH,R10,R11
         LA    R0,DYNAML+WORKL
         STORAGE  OBTAIN,LENGTH=(0),LOC=BELOW
         ST    R1,8(R13)
         ST    R13,4(R1)
         LM    R0,R1,20(R13)
         L     R13,8(R13)
         USING WORKAREA,R13       R13 -> SAVEAREA + DYNAMIC STORAGE
         USING IHADCB,R7          PERIODIC USE - REQUIRES LOCAL LOAD

***********************************************************************
*    MAIN LINE
***********************************************************************

         BAS   R12,INITSTOR       INITIALIZE OBTAINED MEMORY
         BAS   R12,OPENDSS        OPEN FILES
         BAS   R12,GETOPTNS       READ AND SET UP PARMS
         BAS   R12,READDIR        BUILD THE DIRECTORY LIST
         BAS   R12,DETDUPS        DETERMINE WHICH ARE DUPS
         BAS   R12,PUNCHMEM       PUNCH THE MEMBER DATA
         BAS   R12,CLOSERTN       CLOSE ALL FILES
EXITALL  EQU   *
         L     R15,FINALRC        SET LAST RETURN CODE
         LR    R1,R13             TERMINATE PROGRAM
         L     R13,4(R13)
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BR    R14

***********************************************************************
*    INITIALIZE THE OBTAINED STORAGE WITH STARTING VALUES OR WITH
*    I/O MACRO EXPANSIONS
***********************************************************************

INITSTOR EQU   *

         XC    FINALRC,FINALRC    INITIALIZE FINAL RETURN CODE TO 0

         LA    R0,WKINGSTG        INITIALIZE DYNAMIC STORAGE AREA
         LA    R1,DYNAML
         LA    R14,DYNAMA
         LA    R15,DYNAML
         MVCL  R0,R14

         BR    R12

***********************************************************************
*    OPEN THE DCBS FROM THE GETMAINED AREAS
***********************************************************************

*  R1 -> OPEN MACRO
*  R5 -> DCB
*  R6 -> DCB
*  R7 -> DCB

OPENDSS  EQU   *
         LA    R1,OPEN
         LA    R5,DIR
         LA    R6,PDS
         LA    R7,SYSPUNCH
         OPEN  ((R5),,(R6),,(R7),OUTPUT),MF=(E,(R1)),MODE=31
         LTR   R15,R15
         BZ    OPENOK01
         ST    R15,FINALRC
         B     EXITALL

OPENOK01 EQU   *
         LA    R1,OPENSYSI
         LA    R5,SYSIN
         OPEN  ((R5)),MF=(E,(R1)),MODE=31
         LTR   R15,R15
         BZ    OPENOK02
         MVI   SYSINOK,C'N'

OPENOK02 EQU   *
         BR    R12

***********************************************************************
*    GET ANY SYSIN PARAMETERS
***********************************************************************

*  R0 -> REMAINDER AFTER DIVIDE; STORAGE LENGTH
*  R1 -> QUOTIENT AFTER DIVIDE; RETURNED STORAGE ADDRESS
*  R2 -> TRT CLOBBERS IT UNDER SOME CIRCUMSTANCES
*  R5 -> END OF OPTION CARD (COL 72)
*  R6 -> LENGTH REMAINING
*  R7 -> IHADCB; TRT REGISTER (OPTNUMCK)
*  R8 -> MOVING POINTER TO OPTION CARD

GETOPTNS EQU   *
         CLI   SYSINOK,C'Y'       SYSIN PROVIDED?
         BNE   OPTNEXIT

         GET   SYSIN
         LA    R5,71(R1)          POINT TO END OF CARD
         LR    R8,R1
OPTNSCAN EQU   *
         LR    R6,R5              CALCULATE LENGTH REMAINING
         SR    R6,R8
         LA    R6,1(R6)
         C     R6,FW2             CHECK IF ANY POSSIBLE DATA
         BL    GETOPTNS
         CLC   OPTNO,0(R8)        CHECK FOR 'NO'
         BE    OPTNNO
         C     R6,FW3             CHECK FOR APPROPRIATE LENGTHS
         BL    GETOPTNS
         C     R6,FW4
         BNH   OPTL4
         C     R6,FW6
         BNH   OPTL6
         C     R6,FW7
         BNH   OPTL7
         C     R6,FW8
         BNH   OPTL8
         C     R6,FW10
         BNH   OPTL10

OPTL10   EQU   *
         CLC   OPTDUPO,0(R8)      CHECK FOR DUPS(ONLY)
         BNE   OPTL1X
         MVI   DEFDO,C'Y'
         MVI   DEFD,C'Y'
         LA    R8,L'OPTDUPO(R8)
         B     OPTNSCAN

OPTL1X   EQU   *
         CLC   OPTGTMEM,0(R8)     CHECK FOR >MEMBER(...)
         BNE   OPTL1Z
         LA    R8,L'OPTGTMEM(R8)
         LR    R14,R8
OPTL1XA  EQU   *
         CLI   0(R14),C')'
         BE    OPTL1XB
         LA    R14,1(R14)
         CR    R14,R5
         BH    OPTNEXT
         B     OPTL1XA
OPTL1XB  EQU   *
         CR    R8,R14
         BE    OPTNEXT
         SR    R14,R8
         BCTR  R14,0
         MVC   DEFMEMG,BLANKS
         EX    R14,MVCMEMGT
         LA    R8,0(R14,R8)
         B     OPTNSCAN

OPTL1Z   EQU   *
         CLC   OPTLTMEM,0(R8)     CHECK FOR <MEMBER(...)
         BNE   OPTL8
         LA    R8,L'OPTLTMEM(R8)
         LR    R14,R8
OPTL1YA  EQU   *
         CLI   0(R14),C')'
         BE    OPTL1YB
         LA    R14,1(R14)
         CR    R14,R5
         BH    OPTNEXT
         B     OPTL1YA
OPTL1YB  EQU   *
         CR    R8,R14
         BE    OPTNEXT
         SR    R14,R8
         BCTR  R14,0
         MVC   DEFMEML,BLANKS
         EX    R14,MVCMEMLT
         LA    R8,0(R14,R8)
         B     OPTNSCAN

OPTL8    EQU   *
         CLC   OPTFIRST,0(R8)     CHECK FOR FIRST(...)
         BNE   OPTL7
         LA    R8,L'OPTFIRST(R8)
         LR    R14,R8
OPTL1FJ  EQU   *
         CLI   0(R14),C')'
         BE    OPTL1FK
         LA    R14,1(R14)
         CR    R14,R5
         BH    OPTNEXT
         B     OPTL1FJ
OPTL1FK  EQU   *
         CR    R8,R14
         BE    OPTNEXT
         SR    R14,R8
         BCTR  R14,0
         LR    R7,R8
         EX    R14,OPTNUMCK
         BNZ   OPTNEXT
         EX    R14,OPTPACK
         CVB   R15,DW
         ST    R15,DEF1
         LA    R8,1(R14,R8)
         B     OPTNSCAN

OPTL7    EQU   *
OPTL6    EQU   *
OPTL4    EQU   *
         CLC   OPTDUPS,0(R8)      CHECK FOR DUPS
         BNE   OPTNEXT
         MVI   DEFD,C'Y'
         LA    R8,L'OPTDUPS(R8)
         B     OPTNSCAN

OPTNEXT  LA    R8,1(R8)
         B     OPTNSCAN

OPTNNO   EQU   *                  CHECK FOR "NO" OPTIONS
         LA    R8,2(R8)
         BCTR  R6,0
         BCTR  R6,0
         C     R6,FW4             CHECK FOR APPROPRIATE LENGTHS
         BNH   OPTN4
         C     R6,FW6
         BNH   OPTN6
         C     R6,FW7
         BNH   OPTN7

OPTN7    EQU   *
OPTN6    EQU   *
OPTN4    EQU   *
         CLC   OPTDUPS,0(R8)      CHECK FOR NEGATIVE DUPS
         BNE   OPTNEXT
         MVI   DEFD,C'N'
         LA    R8,L'OPTDUPS(R8)
         B     OPTNSCAN

OPTNEXIT EQU   *
         BR    R12

***********************************************************************
*    READ THE DIRECTORY(S)
***********************************************************************

*  R2 -> NUMBER OF SLOTS LEFT
*  R3 -> END OF DIR ENTRY
*  R4 -> MEMBER IN DIR ENTRY
*  R6 -> NEW SLOT POINTER
*  R7 -> IHADCB
*  R8 -> CURRENT MEMBER IN SLOT LIST
*  R9 -> NEXT MEMBER IN SLOT LIST

READDIR  EQU   *
         LA    R2,1
         LA    R7,DIR
         LA    R8,EIGHTXFF
         LR    R9,R8

RDDIR010 EQU   *
         GET   (R7)               GET A DIRECTORY BLOCK
         LH    R3,0(R1)
         LA    R4,2(R1)
         LA    R3,0(R1,R3)

RDDIR030 EQU   *
         CR    R4,R3              END OF BLOCK?
         BNL   RDDIR010
         CLC   EIGHTXFF,0(R4)     TERMINATING ENTRY FOR A PDS?
         BNE   RDDIR040
         L     R14,CATCNT         GET READY FOR NEXT PDS (IF ANY)
         LA    R14,1(R14)
         ST    R14,CATCNT
         FEOV  DIR
         B     RDDIR010

RDDIR040 EQU   *
         CLC   DEFMEMG,0(R4)      SHOULD THIS MEMBER BE SELECTED?
         BH    RDDIR110
         CLC   DEFMEML,0(R4)
         BL    RDDIR110
         BCT   R2,RDDIR050
         L     R0,FW12288         LOAD SLOT AREA SIZE FOR GETMAIN
         STORAGE  OBTAIN,LENGTH=(0),LOC=ANY
         LR    R6,R1              SAVE POINTER TO MEMBER SLOT AREA
         LA    R2,614

RDDIR050 EQU   *
         MVC   SLOTOFFM(11,R6),0(R4)  SAVE DIRECTORY DATA INTO LIST
         MVC   SLOTOFFC(1,R6),CATCNT+3
         MVC   SLOTOFFX(L'DEFSLOT,R6),DEFSLOT
         TM    11(R4),X'80'       CHECK IF ALIAS
         BNO   RDDIR055
         MVI   SLOTOFFA(R6),C'Y'

RDDIR055 EQU   *
         SR    R14,R14
         IC    R14,11(R4)
         SLL   R14,27             POINT TO NEXT DIRECTORY ENTRY
         SRL   R14,26
         LA    R4,12(R14,R4)
         CLC   SLOTOFFM(8,R6),SLOTOFFM(R8)  PUT NEW MEMBER INTO CHAIN
         BNL   RDDIR090
         L     R8,FIRSTMEM
         CLC   SLOTOFFM(8,R6),SLOTOFFM(R8)
         BL    RDDIR080
         L     R8,12(R8)
         L     R9,12(R8)
         CLC   SLOTOFFM(8,R6),SLOTOFFM(R8)  CHECK IF HIGHER THAN 2ND
         BNL   RDDIR090
         LR    R9,R8
         L     R8,FIRSTMEM
         B     RDDIR090

RDDIR080 EQU   *
         ST    R8,SLOTOFFN(R6)    NEW FIRST MEMBER
         LR    R9,R8
         ST    R6,FIRSTMEM
         LR    R8,R6
         LA    R6,SLOTSIZE(R6)
         B     RDDIR030

RDDIR090 EQU   *
         CLC   SLOTOFFM(8,R6),SLOTOFFM(R9)  BETWEEN CURRENT AND NEXT?
         BL    RDDIR100
         LR    R8,R9
         L     R9,12(R8)
         B     RDDIR090

RDDIR100 EQU   *
         ST    R6,SLOTOFFN(R8)    STORE AS NEW BETWEEN
         LR    R8,R6
         ST    R9,SLOTOFFN(R6)
         LA    R6,SLOTSIZE(R6)
         B     RDDIR030

RDDIR110 EQU   *
         SR    R14,R14
         IC    R14,11(R4)
         SLL   R14,27             POINT TO NEXT DIRECTORY ENTRY
         SRL   R14,26                WHEN MEMBER NOT SELECTED
         LA    R4,12(R14,R4)
         B     RDDIR030

RDDIREOF EQU   *
         BR    R12

***********************************************************************
*    DETERMINE WHICH ARE DUPS (FOR DUPS/DUPS(ONLY) USAGE
***********************************************************************

*  R8 -> CURRENT MEMBER IN SLOT LIST
*  R9 -> NEXT MEMBER IN SLOT LIST

DETDUPS  EQU   *
         CLI   DEFD,C'Y'
         BNE   DETDEXIT
         L     R8,FIRSTMEM
         L     R9,12(R8)

DEFD010  EQU   *
         CLC   SLOTOFFM(8,R8),EIGHTXFF
         BE    DETDEXIT
         CLC   SLOTOFFM(8,R8),SLOTOFFM(R9)
         BNE   DEFD040
         MVI   SLOTOFFD(R8),C'Y'
         MVI   SLOTOFFD(R9),C'Y'

DEFD040  EQU   *
         LR    R8,R9
         L     R9,SLOTOFFN(R8)
         B     DEFD010

DETDEXIT EQU   *
         BR    R12

***********************************************************************
*    PUNCH MEMBER DATA
***********************************************************************

*  R2 -> LRECL SIZE
*  R3 -> INPUT PDS MEMBER BUFFER
*  R4 -> LINES OUTPUT
*  R5 -> PAGE SIZE
*  R6 -> FIND MEMBER POINTER, END OF DATA
*  R7 -> IHADCB
*  R8 -> CURRENT MEMBER IN SLOT LIST
*  R9 -> DATA POINTER
*  R14-> SHORT TERM RETURN POINTER (SAVED IN PUNCHRET)

PUNCHMEM EQU   *
         LA    R7,PDS
         LH    R0,DCBBLKSI
         STORAGE  OBTAIN,LENGTH=(0),LOC=ANY
         LR    R3,R1
         L     R8,FIRSTMEM
         MVC   LASTMEMP,EIGHTX00

PUNCH020 EQU   *
         CLC   SLOTOFFM(8,R8),EIGHTXFF  LAST MEMBER PROCESSED?
         BE    PUNCH990
         CLI   DEFDO,C'Y'         CHECK FOR DUP ONLY STATUS
         BNE   PUNCH030
         CLI   SLOTOFFD(R8),C'Y'
         BNE   PUNCH025
         B     PUNCH040

PUNCH025 EQU   *
         MVC   SLOTOFFT(3,R8),EIGHTXFF
         B     PUNCHEOF

PUNCH030 EQU   *
         CLI   DEFD,C'Y'          CHECK FOR DUP STATUS
         BE    PUNCH040
         CLC   SLOTOFFM(8,R8),LASTMEMP  FOR NODUPS, ELIM DUP MEMBERS
         BE    PUNCH025

PUNCH040 EQU   *
         LA    R6,SLOTOFFT(R8)
         FIND  PDS,(R6),C
         SR    R4,R4              SET LINES PUNCHED SO FAR TO 0
         MVC   DOTSLASH+15(8),SLOTOFFM(R8)
         MVC   PNCHLINE,BLANKS
         PUT   SYSPUNCH,DOTSLASH

PUNCH060 EQU   *
         READ  PDSDECB,SF,(R7),(R3),'S',MF=E
         CHECK PDSDECB
         LR    R9,R3
         L     R14,PDSDECB+16     FIGURE DATA LENGTH ACTUALLY READ
         LH    R6,DCBBLKSI
         SH    R6,14(R14)
         TM    DCBRECFM,DCBRECU
         BO    PUNCHU
         TM    DCBRECFM,DCBRECV
         BO    PUNCHV

PUNCHF   EQU   *                  FIXED RECFM
         LA    R6,0(R6,R9)

PUNCHF10 EQU   *
         LH    R2,DCBLRECL
         C     R2,FW80
         BH    PUNCHF40
         BCTR  R2,0
         ST    R2,PUNLEN
         EX    R2,MVCDATA
         BAS   R14,PUNCHRTN
         LA    R9,1(R2,R9)
         CR    R9,R6
         BL    PUNCHF10
         B     PUNCH060

PUNCHF40 EQU   *
         MVC   PNCHLINE,0(R9)
         MVC   PUNLEN,FW79
         BAS   R14,PUNCHRTN
         S     R2,FW80
         LA    R9,80(R9)
         B     PUNCHF10

PUNCHU   EQU   *                  UNFORMATTED RECFM
         LR    R2,R6
         LA    R6,0(R6,R9)

PUNCHU10 EQU   *
         C     R2,FW80
         BH    PUNCHU40
         BCTR  R2,0
         ST    R2,PUNLEN
         EX    R2,MVCDATA
         BAS   R14,PUNCHRTN
         B     PUNCH060

PUNCHU40 EQU   *
         MVC   PNCHLINE,0(R9)

         MVC   PUNLEN,FW79
         BAS   R14,PUNCHRTN
         S     R2,FW80
         LA    R9,80(R9)
         B     PUNCHU10

PUNCHV   EQU   *                  VARIABLE RECFM
         LH    R6,0(R9)
         LA    R6,0(R6,R9)
         LA    R9,4(R9)

PUNCHV05 EQU   *
         LH    R2,0(R9)
         LA    R9,4(R9)
         S     R2,FW4

PUNCHV20 EQU   *
         C     R2,FW80
         BH    PUNCHV60
         BCTR  R2,0
         ST    R2,PUNLEN
         EX    R2,MVCDATA
         BAS   R14,PUNCHRTN
         LA    R9,1(R2,R9)
         CR    R9,R6
         BL    PUNCHV05
         B     PUNCH060

PUNCHV60 EQU   *
         MVC   PNCHLINE,0(R9)
         MVC   PUNLEN,FW79
         BAS   R14,PUNCHRTN
         S     R2,FW80
         LA    R9,80(R9)
         B     PUNCHV20

PUNCHEOF EQU   *                  END OF INDIVIDUAL MEMBER DATA
         MVC   LASTMEMP,SLOTOFFM(R8)
         L     R8,SLOTOFFN(R8)
         B     PUNCH020

PUNCH990 EQU   *                  EXIT FROM PUNCH MEMBER ROUTINE
         BR    R12

***********************************************************************
*   GENERAL PUNCH ROUTINE FOR MEMBER DATA - REGISTERS ARE THE
*   SAME AS FOR PUNCHMEM PLUS R14 IS USED TO RETURN TO PUNCHMEM
***********************************************************************

PUNCHRTN EQU   *
         ST    R14,PUNCHRET
         PUT   SYSPUNCH,PNCHLINE
         MVC   PNCHLINE,BLANKS
         LA    R4,1(R4)
         C     R4,DEF1          CHECK IF REACHED LINES TO BE PUT OUT
         BNL   PUNCHEOF
         L     R14,PUNCHRET
         BR    R14

***********************************************************************
*    CLOSE ALL DCBS AND FREE ANY OBTAINED STORAGE
***********************************************************************

*  R1 -> CLOSE MACRO
*  R5 -> DCB
*  R6 -> DCB
*  R7 -> DCB

CLOSERTN EQU   *
         LA    R1,CLOSE           CLOSE FILES
         LA    R5,DIR
         LA    R6,PDS
         LA    R7,SYSPUNCH
         CLOSE ((R5),,(R6),,(R7)),MF=(E,(R1)),MODE=31
         CLI   SYSINOK,C'Y'
         BNE   CLOSEOUT
         LA    R1,CLOSSYSI
         LA    R5,SYSIN
         CLOSE ((R5)),MF=(E,(R1)),MODE=31

CLOSEOUT EQU   *
         BR    R12

***********************************************************************
*    OFFSETS FOR SLOT LIST
***********************************************************************

SLOTSIZE EQU   20                 SLOT SIZE

SLOTOFFM EQU    0                 MEMBER NAME
SLOTOFFT EQU    8                 PDS TTR (INITIALLY)
SLOTOFFC EQU   11                 PDS CONCATENATION COUNT
SLOTOFFN EQU   12                 NEXT SLOT LIST MEMBER
SLOTOFFX EQU   16                 ATTRIBUTES OF MEMBER
SLOTOFFA EQU   16                 ALIAS
SLOTOFFD EQU   17                 DUPLICATE

***********************************************************************
*    STATIC DATA
***********************************************************************

OPTDUPO  DS   0CL10
OPTDUPS  DC    CL4'DUPS'
         DC    CL1'('
ONLY     DC    CL4'ONLY'
         DC    CL1')'
OPTFIRST DC    CL6'FIRST('
OPTVARS  DC    CL6'VARSEQ'
OPTLTMEM DC    CL8'<MEMBER('
OPTGTMEM DC    CL8'>MEMBER('

EIGHTX00 DS    CL08'0000000000000000'
EIGHTXFF DS   0D   *****  LEAVE BEFORE NUMTABLE  *****
NUMTABLE DC    240X'FF',010X'00',006X'FF'

FW10     DC    F'10'
FW12     DC    F'12'
FW12288  DC    F'12288'
FW2      DC    F'2'
FW3      DC    F'3'
FW4      DC    F'4'
FW6      DC    F'6'
FW7      DC    F'7'
FW79     DC    F'79'
FW8      DC    F'8'
FW80     DC    F'80'

MVCDATA  MVC   PNCHLINE(1),0(R9)
MVCMEMGT MVC   DEFMEMG(1),0(R8)
MVCMEMLT MVC   DEFMEML(1),0(R8)
OPTPACK  PACK  DW,0(1,R7)
OPTNUMCK TRT   0(1,R7),NUMTABLE

DEFSLOT  DC    CL4'NNNN'
BLANKS   DC    CL80' '

YES      DC    CL3'YES'
OPTNO    DS   0CL2
NO       DC    CL3'NO '

***********************************************************************
*    LIST FORM OF I/O MACRO INSTRUCTIONS AND OTHER DYNAMIC DATA
*    TO BE COPIED TO OBTAINED STORAGE
***********************************************************************

DYNAMA   DS    0D

         PRINT NOGEN
XPEN     OPEN  (XIR,(INPUT),XDS,(INPUT),XYSPUNCH,(OUTPUT)),MF=L,MODE=31

XPENSYSI OPEN  (XYSIN,(INPUT)),MF=L,MODE=31

XRDJFCB  RDJFCB  (XIR),MF=L

XLOSE    CLOSE (XIR,,XDS,,XYSPUNCH),MF=L,MODE=31

XLOSSYSI CLOSE (XYSIN),MF=L,MODE=31

XEADPDS  READ  XDSDECB,SF,XDS,0,'S',MF=L

XIR      DCB   DSORG=PS,MACRF=GL,DDNAME=&DDPDS,                        *
               RECFM=F,LRECL=256,BLKSIZE=256,                          *
               DCBE=XIRE
XIRE     DCBE  RMODE31=BUFF,EODAD=RDDIREOF

XDS      DCB   DSORG=PO,MACRF=R,DDNAME=&DDPDS,                         *
               DCBE=XDSE
XDSE     DCBE  RMODE31=BUFF,EODAD=PUNCHEOF

XYSIN    DCB   DSORG=PS,MACRF=GL,DDNAME=&DDOPTS,                       *
               RECFM=FB,LRECL=80,DCBE=XYSINE
XYSINE   DCBE  RMODE31=BUFF,EODAD=OPTNEXIT

XYSPUNCH DCB   DSORG=PS,MACRF=PM,DDNAME=&DDPUNCH,                      *
               RECFM=FB,LRECL=80
         PRINT   GEN

         DS    0D
XIRSTMEM DC    A(EIGHTXFF)
XATCNT   DC    F'0'

*  OPTIONS CHOSEN OR DEFAULTED

XDEF1    DC    F'&DEF1ST'         FIRST # OF LINES
XDEFD    DC    CL1'&DEFDUPS'      DUPS
XDEFDO   DC    CL1'&DEFDUPSO'     DUPS ONLY
XDEFMEMG DC    CL8'&DEFMEMGT'     FIRST MEMBER SELECTED
XDEFMEML DC    CL8'&DEFMEMLT'     LAST MEMBER SELECTED

XYSINOK  DC    CL1'Y'             SYSIN OPENED OK
XOTSLASH DC    CL80'./  ADD   NAME='

DYNAML   EQU   *-DYNAMA

***********************************************************************
*    DSECTS
***********************************************************************

WORKAREA DSECT

SAVEAREA DS    9D

DW       DS    D
FINALRC  DS    F                  FINAL RETURN CODE
EXLST    DS    F                  EXIT LIST FOR READ JFCB
PUNCHRET DS    A                  RETURN ADDRESS FOR PUNCH SUBROUTINE
PUNLEN   DS    F                  ACTUAL DATA LENGTH FOR HEX TRANSLATE
*                                    AND CHARACTER TRANSLATE
LASTMEMP DS    CL008              LAST MEMBER NAME PUNCHED

PNCHLINE DS    CL80

WORKL    EQU   (*-WORKAREA)

WKINGSTG DS    0D  *  BEGIN DYNAMIC AREA REQUIRING INITIALIZATION -----

         PRINT NOGEN
OPEN     OPEN  (DIR,(INPUT),PDS,(INPUT),SYSPUNCH,(OUTPUT)),MF=L,MODE=31

OPENSYSI OPEN  (SYSIN,(INPUT)),MF=L,MODE=31

RDJFCB   RDJFCB  (DIR),MF=L

CLOSE    CLOSE (DIR,,PDS,,SYSPUNCH),MF=L,MODE=31

CLOSSYSI CLOSE (SYSIN),MF=L,MODE=31

READPDS  READ  PDSDECB,SF,0,0,'S',MF=L

DIR      DCB   DSORG=PS,MACRF=GL,DDNAME=&DDPDS,                        *
               RECFM=F,LRECL=256,BLKSIZE=256,                          *
               DCBE=DIRE
DIRE     DCBE  RMODE31=BUFF,EODAD=RDDIREOF

PDS      DCB   DSORG=PO,MACRF=R,DDNAME=&DDPDS,                         *
               DCBE=PDSE
PDSE     DCBE  RMODE31=BUFF,EODAD=PUNCHEOF

SYSIN    DCB   DSORG=PS,MACRF=GL,DDNAME=&DDOPTS,                       *
               RECFM=FB,LRECL=80,DCBE=SYSINE
SYSINE   DCBE  RMODE31=BUFF,EODAD=OPTNEXIT

SYSPUNCH DCB   DSORG=PS,MACRF=PM,DDNAME=&DDPUNCH,                      *
               RECFM=FB,LRECL=80
         PRINT   GEN

         DS    0D
FIRSTMEM DS    A
CATCNT   DS    F

*  OPTIONS CHOSEN OR DEFAULTED

DEF1     DS    F                  FIRST # OF LINES
DEFD     DS    CL1                DUPS
DEFDO    DS    CL1                DUPS ONLY
DEFMEMG  DS    CL8                FIRST MEMBER SELECTED
DEFMEML  DS    CL8                LAST MEMBER SELECTED

SYSINOK  DS    CL1
DOTSLASH DS    CL80

*  END OF DYNAMIC AREA ------------------------------------------------

***********************************************************************

         PRINT NOGEN
         DCBD  DSORG=(PS,PO),DEVD=DA

         END   PDSPUNCH
//SYSUT1       DD       UNIT=VIO,
//             SPACE=(CYL,(5,2),,CONTIG)
//SYSPRINT     DD       SYSOUT=*,
//             DCB=(RECFM=FM,LRECL=121,BLKSIZE=121)
//SYSLIN       DD       DSN=&&LOADSET,DISP=(MOD,PASS),
//             UNIT=VIO,SPACE=(2960,(111,12)),DCB=BLKSIZE=2960
//***
//***
//L          EXEC     PGM=IEWL,
//             PARM='RENT,AMODE(31),RMODE(ANY),XREF,LIST,LET,DCBS',
//             REGION=4M,COND=(5,LE)
//SYSUT1       DD       UNIT=VIO,
//             SPACE=(CYL,(5,2),,CONTIG)
//SYSPRINT     DD       SYSOUT=*
//SYSLMOD      DD       DSN=-YOUR-STEPLIB-,DISP=OLD
//SYSLIN       DD       DSN=&&LOADSET,DISP=(OLD,DELETE,DELETE)
//             DD       *
  SETSSI   00010400
  ENTRY    PDSPUNCH
  NAME     PDSPUNCH(R)
//***
