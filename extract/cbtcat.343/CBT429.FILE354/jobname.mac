//JOBNAME JOB
/*ROUTE  PRINT  R7
//* $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
//* $  CBT.SOURCE(JOBNAME)
//* $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
//S1        EXEC  HLASMCL,CLASS='*',
//   COND.LKED=(7,LT,ASM)
//ASM.SYSLIB DD DSN=SYS1.MACLIB
//   DD DSN=SYS2.HASPMODS.PROD.SOURCE,DISP=SHR  BCSC SOURCE
//   DD DSN=SYS1.HASPSRC,DISP=SHR
//   DD DSN=SYS1.AMODGEN,DISP=SHR
//   DD DSN=SYS1.MODGEN,DISP=SHR
//ASM.SYSIN DD  *
*
*              NOTE... THIS VERSION WILL WORK ON STARTED TASKS!
*
*              THIS LITTLE PROGRAM IS USED TO GET THE
*              JOBNAME AND THE JOB NUMBER FOR THE CALLING JOB,
*
*              INPUT TO JOBNAME   IS THROUGH A PASSED PARM.
*
*              INPUT IS :
*              A(JOBNAME)     PLACE  TO PUT JOB NAME
*              A(JOBNUMBER)   PLACE  TO PUT JOB NUMBER
*
*
*              THIS PGM IS AN EXAMPLE OF HOW TO USE JES2
*              CONTROL BLOCKS TO  GET YOUR JOB NUMBER
*              SEE SYS2.SMP.SOURCE($GETWHO) ALSO
*
*              WE ALSO USE 31 BIT  ADDRESSING
*
         PRINT ON                  RESTORE THE PRINT ENVIRONMENT   @136
         TITLE 'GET JOB NAME AND NUMBER FROM JES2'
         SPACE 3
JOBNAME  CSECT
*OBNAME  AMODE 31
*OBNAME  RMODE ANY
         USING JOBNAME,R15
         B     AROUND             BRANCH AROUND DUMP TITLE
         DC    AL1(EYELTH)
EYECATCH DS    0C                 IDENTIFIER
         DC    C'JOBNAME '        PROGRAM NAME
         DC    C'VERSION 2 '      VERSION NUMBER
         DC    C' '               BLANK
         DC    C'&SYSDATE'        DATE WRITTEN
         DC    C' '               BLANK
         DC    C'&SYSTIME'        TIME WRITTEN
         DC    C' '               BLANK
         DC    C'GET JOBNAME/NUMBER'
         DC    C' '               BLANK
EYELTH   EQU   *-EYECATCH         LTH OF EYE CATCHER
         SPACE 1
AROUND   DS    0H
         DROP  R15                DROP R15 BASE
         LA    R1,0(0,R1)         CLEAR HI-ORDER BYTE FOR 31 BIT
         LA    R13,0(0,R13)       CLEAR HI-ORDER BYTE FOR 31 BIT
         BSM   R14,0              SAVE CURRENT AMODE
         STM   R14,R12,12(R13)
         LR    R12,R15
         USING JOBNAME,R12
         LR    R6,R1              R6 -> TO PARM ADDRESS
         LA    R4,SAVE            R4 -> TO SAVE AREA
         ST    R13,SAVE+4         CHAIN
         ST    R4,8(0,R13)              SAVE
         LA    R13,SAVE                    AREAS
*
*        BECAUSE SOME OF THE CONTROL BLOCKS MUST BE ACCESSED IN 31
*        BIT MODE (SVT  FOR ONE) PUT US INTO 31 BIT MODE ADDRESSING
*
         LA    R12,0(0,R12)       CLEAR BYTE 0 OF BASE REG 12       RH
*        LA    R1,*+4             GET 31 BIT MODE ADDRESS           RH
*        A     R1,EIGHTBIT        GET 31 BIT MODE ADDRESS           RH
         L     R1,XADDR1          GET 31 BIT MODE ADDRESS           RH
         BSM   0,R1               GET INTO 31 BIT MODE              RH
         DS    0F                 ALIGN ON FULLWORD
XADDR1   DC    A(*+4+X'80000000') NEXT ADDRESS IS 31 BIT MODE       RH
*ADDR1   DC    X'80',AL3(*+3)     NEXT ADDRESS IS 31 BIT MODE       RH
*
*
*********************************************************************
*
*              GET THE TIOT SO WE  CAN GET OUR JOBNAME
*
*********************************************************************
*
CHEKTIOT DS    0H
         USING PSA,R0             SET PSA  BASE
         L     R1,PSATOLD         R1 = A(OUR TCB)
         DROP  R0                 DROP PSA BASE
         L         R1,12(R1)      R1 = A(TIOT)
         MVC   JOBSNAME,0(R1)     SAVE OUR JOBNAME
         SPACE 1
*
*********************************************************************
*
*              GET THE JES2 SJB SO WE CAN GET OUR JOBNAME/NUMBER
*              THIS IS TAKEN FROM  SYS1.HASPMODS.PROD.SOURCE($SETWHO)
*              THIS WAS TAKEN FROM  SYS2.SMP.SOURCE($SETWHO)
*
*********************************************************************
*
         USING PSA,R0             SET PSA  BASE
         L     R1,PSATOLD         R1 = A(OUR TCB)
         DROP  R0                 DROP PSA BASE
         L     R1,TCBJSCB-TCB(,R1)      R1 -> TO OUR TCB
         L     R1,JSCBACT-IEZJSCB(,R1)  R1 -> TO OUR JSCB
         L     R1,JSCBSSIB-IEZJSCB(,R1) R1 -> TO OUR SSIB
         L     R5,SSIBSUSE-SSIB(,R1)    R5 -> TO OUR SJB
         USING SJB,R5             SET BASE
         CLC   =C'SJB',0(R5)      DO WE REALLY HAVE THE SJB?
         BNE   NOMOVE             NO, BYPASS MVC'S
         LA    R1,64              R1 = LTH TO SEARCH
         LA    R2,SJBJOBNM        R2 -> TO WHERE JOBNAME S/B IN SJB
         SPACE 1
FNDJOBNM DS    0H                                                   RH
         CLC   JOBSNAME,0(R2)     SAME JOBNAME AS IN TIOT?
         BE    GOTJOBNM           YES, JOBNAME IS SET
         LA    R2,1(0,R2)         R2 -> TO NEXT BYTE
         BCT   R1,FNDJOBNM        GO CHECK AGAIN
         B     NOMOVE             NO JOBNAME, LEAVE FIELDS BLANK
         SPACE 1
GOTJOBNM DS    0H                                                   RH
         SH    R2,=H'8'           R2 -> TO JOB NUMBER
         MVC   JOBSNUMB,0(R2)     SAVE THE JOB NUMBER FROM THE SJB
*        MVC   JOBSNAME,SJBJOBNM  SAVE THE JOB NAME   FROM THE SJB
*        MVC   JOBSNUMB,SJBJOBID  SAVE THE JOB NUMBER FROM THE SJB
         SPACE 1
NOMOVE   DS    0H                                                   RH
*
*        NOW GO BACK TO 24 BIT MODE ADDRESSING
*
         LA    R1,XADDR4          GET BACK INTO 24 BIT MODE         RH
         BSM   0,R1               ''                                RH
XADDR4   DS    0H                                                   RH
*
         TM    0(R6),X'80'        IS 1ST PARM ONLY PARM?
         BO    NOPARM             YES, PUT JOBNAME TO SYSPRINT
         SPACE 1
         L     R1,0(0,R6)         R1 -> TO PLI JOBNAME FIELD
*        L     R1,0(0,R1)         R1 -> PLI ARGUMENT IN SDV
         MVC   0(8,R1),JOBSNAME   PUT JOBNAME IN PLI FIELD
         L     R1,4(0,R6)         R1 -> TO PLI JOBNBR FIELD
*        L     R1,0(0,R1)         R1 -> PLI ARGUMENT IN SDV
         MVC   0(8,R1),JOBSNUMB   PUT JOBNBR IN PLI FIELD
         B     RETURN9            WE ARE FINISHED
         SPACE 1
NOPARM   DS    0H
         MVC   PRTJOB,JOBSNAME    PUT JOBNAME IN OUTPUT
         MVC   PRTNBR,JOBSNUMB    PUT JOBNBR IN OUTPUT
*
*        OPEN SYSPRINT DATASET
*
         LA    R6,SYSPRINT        R6 -> TO DCB
         USING IHADCB,R6
*        TM    DCBOFLGS,DCBOFOPN  TEST IF OPEN
*        BNZ   RPTOPEN          IF ALREADY OPEN
         OPEN  (SYSPRINT,(OUTPUT))
         TM    DCBOFLGS,DCBOFOPN  TEST IF OPEN
         BNO   RETURN9          IF CANNOT OPEN
         DROP  R6
         SPACE 1
RPTOPEN  DS    0H
*
*            GO TO 24 BIT MODE ADDRESSING FOR PRINTING
*
         LA    R1,*+4+2           GET INTO 24 BIT MODE              RH
         BSM   0,R1               ''                                RH
*
         PUT   SYSPRINT,HDR1      PRINT 1ST 120 CHARS OF MSG
*
*        GET BACK TO 31 BIT MODE ADDRESSING
*
         L     R1,XADDR2          GET 31 BIT MODE ADDRESS           RH
*        LA    R1,*+4             GET 31 BIT MODE ADDRESS           RH
*        A     R1,=F'80000000'    GET 31 BIT MODE ADDRESS           RH
         BSM   0,R1               GET INTO 31 BIT MODE              RH
         DS    0F                 ALIGN ON A FULLWORD BOUNDARY      RH
XADDR2   DC    A(*+4+X'80000000') NEXT ADDRESS IS 31 BIT MODE       RH
*ADDR1   DC    X'80',AL3(*+3)     NEXT ADDRESS IS 31 BIT MODE       RH
         SPACE 1
*        LA    R6,SYSPRINT        R6 -> TO DCB
*        USING IHADCB,R6
*        TM    DCBOFLGS,DCBOFOPN  TEST IF OPEN
*        BZ    RPNTOPEN           NOT OPEN, SO DON'T CLOSE IT
         CLOSE (SYSPRINT)         CLOSE SYSPRINT FILE
         SPACE 1
RPNTOPEN DS    0H
         SPACE 1
RETURN9  DS    0H
         L     R13,SAVE+4
         LM    R14,R12,12(R13)
         SLR   R15,R15
         BR    R14
         SPACE 3
* $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*        WORK AREAS
* $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
DUMPTITL DC    C'WORKING STORAGE SECTION'
SAVE     DC    18F'-1'
JOBSNUMB DC    CL8'NO PIT'
JOBSNAME DC    CL8'NONE'
*
EIGHTBIT EQU   X'80000000'
         SPACE 1
*PRTLINE DS    CL121
HDR1     DS    0CL121
         DC    C' '
PRTJOB   DC    CL8' '
BYTE2    DC    C' '
PRTNBR   DC    CL8' '
         DC    CL(121-(*-HDR1))'  '
         SPACE 2
         LTORG
         SPACE 3
* ------ DCB'S                    ------------------------------------
         SPACE 3
         PRINT NOGEN
*
SYSPRINT DCB   DSORG=PS,DDNAME=SYSPRINT,LRECL=121,RECFM=FBA,        XXXX
               MACRF=(PM),BLKSIZE=121
         SPACE 1
*
         SPACE 1
         LTORG
         SPACE 1
         PRINT NOGEN
         CVT   DSECT=YES,LIST=NO
         IHAPSA
         IEFJSCVT
         IEFJESCT
        IKJPSCB
        IKJTCB
        IEZJSCB
        IEFJSSIB
        IFGRPL AM=VTAM,                                                X
               DSECT=YES
$MAXDA   EQU   253                      REFERENCE MACRO - $HASPEQU
        $BUFFER
        $JCT
         PRINT   GEN
$ODANYWP EQU   1
$TKNLEN  EQU   8
        $SJB
        $TQE
*
         DCBD  DEVD=DA,DSORG=QS
*
*    REGISTER EQUATES
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   JOBNAME
/*
//LKED.SYSLMOD DD DSN=SYS9.IMSUTIL.LOAD,DISP=SHR
//LKED.SYSIN DD *
  SETCODE AC(0)
  NAME JOBNAME(R)
/*
//*
//*
//COPYPGM EXEC PGM=PDSFAST,REGION=4096K,COND=(0,NE)
//*
//SYSPRINT DD SYSOUT=*
//SYSUDUMP DD SYSOUT=X,HOLD=YES
//SYSUT3   DD UNIT=SYSDA,SPACE=(CYL,(50,10))
//SYSUT4   DD UNIT=SYSDA,SPACE=(CYL,(50,10))
//*
//SYSLOUT      DD DSN=IMSVS.AUTHLIB1,DISP=SHR
//SYSLIN       DD DSN=SYS9.IMSUTIL.LOAD,DISP=SHR
//SYSIN    DD *
 COPY I=SYSLIN,O=SYSLOUT
 S M=((JOBNAME,,R))
/*
//
