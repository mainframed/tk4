//CDSCB    JOB
/*ROUTE PRINT R7
//*
//ASM     EXEC HLASMCL,
//             PARMC='ALIGN,NORLD',
//             CLASS='*',COND.LKED=(7,LT,ASM)
//*            PARMC='NOALIGN,NORLD,XREF(LONG)',
//ASM.SYSLIB DD DSN=SYS1.MACLIB
//    DD DSN=SYS1.AMODGEN,DISP=SHR
//    DD DISP=SHR,DSN=CBT.SOURCE
//ASM.SYSIN DD *
         COPY  MACROS                                               RH
*
         TITLE '    C D S C B              '
***********************************************************************
*                                                                     *
*        'CDSCB' TSO COMMAND                                          *
*                                                                     *
*        THE COMMAND IS:                                              *
*                                                                     *
*        CDSCB DSNAME                  DATASET NAME OF DSCB TO CHANGE *
*              VOLUME(VOLSER)          VOLSER IF NOT CATALOGUED       *
*              UNIT(CCCCCCCC)          UNIT IF NOT CATALOGUED         *
*              ZAP(OFFSET,VERDATA,REPDATA) ZAP IF NO KEYWORD          *
*              RECFM(F/FB/FBA ETC)     ANY VALID RECFM                *
*              LRECL(NNNNN)            MAX = 32767                    *
*              BLKSIZE(NNNNN)          MAX = 32767                    *
*              DSORG(PS/PO ETC)        ANY VALID DSORG                *
*              PW                                                     *
*              PWREAD                                                 *
*              PWWRITE                                                *
*              NOPW                                                   *
*              RACF                    RACF INDICATED                 *
*              NORACF                  NOT RACF INDICATED             *
*              ALLOC(NONE/BLOCKS/TRACKS/CYLINDERS) ALLOCATION TYPE    *
*              SPACE(NNNN)             SECONDARY SPACE AMOUNT (9999)  *
*              CREATE(YYDDD)           CREATE DATE                    *
*              EXPDT(YYDDD)            EXPIRY DATE                    *
*              REFDT(YYDDD)            LAST REFERENCED DATA           *
*              LOG                     LOG TO CONSOLE IF EXPDT CHANGED*
*              NOLOG                   DON'T LOG TO CONSOLE           *
*              CHBIT(ON/OFF)           HSM MODIFIED BIT ON/OFF        *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
*        'CDSCB' TSO COMMAND                                          *
*                                                                     *
***********************************************************************
         SPACE 1
*        MODIFIED BY.. RANDY HALL , DIVERSIFIED DEVELOPMENTS.
*        INSTALLATION. ITSD COMPUTER CENTER, VICTORIA BC
*        DATE UPDATED. AUG.24 1998.
*        CHANGES...... ADDED RACF CHECKING VIA RACHECK FOR
*                      CLASS=DASDVOL,ENTITY=VTOC_VOLSER
*
*                      TO USE CDSCB, YOU MUST BE IN A GROUP
*                      THAT HAS ALTER ACCESS TO DASDVOL/VOLSER.
*
*              NOTE .. YOU STILL MUST AUTHORIZE IT BY ADDING THE
*                      NAME OF THE COMMAND TO THE TABLE IN MODULE
*                      IKJEFT02 CSECT IKJEFTE2.  OR, WRITE AN SVC
*                      AND REPLACE THE 'NOPR' INSTRUCTION AT LABELS
*                      USRSVC & USRSVC2 IN THIS PROGRAM WITH THE SVC.
*               ...... MODIFIED EXPDT() TO ACCEPT * (TODAYS DATE)
*               ...... ADDED THIS DOC HERE....
*
*    MULTIPLE KEYWORDS CAN BE PROCESSED WITH ONE COMMAND
*
*  * ZAP(OFFSET,VER). ALLOCATE DATASET SHARE.....
*  * VERIFY ONLY...OFFSET MUST BE OVER 2D...NO DSNAME ZAP
*  CDSCB 'HALL.MYVTOC2' ZAP(40,C1) SHR
*
*  * ZAP(OFFSET,VER)
*  * VERIFY ONLY...OFFSET MUST BE OVER 2D...NO DSNAME ZAP
*  CDSCB 'HALL.MYVTOC2' ZAP(40,C1)
*
*  * ZAP(OFFSET,VER,REP)
*  * VERIFY, AND REPLACE...OFFSET MUST BE OVER 2D...NO DSNAME ZAP
*  CDSCB 'HALL.MYVTOC2' ZAP(40,D4,C1)
*
*  * CHANGE RECFM...ANY VALID RECFM
*  CDSCB 'HALL.MYVTOC2' RECFM(FB)
*
*  * CHANGE LRECL MAX 5 DIGITS...32767
*  CDSCB 'HALL.MYVTOC2' LRECL(80)
*
*  * CHANGE BLKSIZE MAX 5 DIGITS...32767
*  CDSCB 'HALL.MYVTOC2' BLKSIZE(80)
*
*  * CHANGE DSORG...ANY VALID DSORG
*  CDSCB 'HALL.MYVTOC2' DSORG(PS)
*
*  * CHANGE ALLOCATION TYPE..NONE, BLOCKS, TRACKS, CYLINDERS
*  CDSCB 'HALL.MYVTOC2' ALLOC(TRACKS)
*
*  * CREATE, EXPDT, AND REFDT CAN BE (*) TO SAY TODAY...
*  CDSCB 'HALL.MYVTOC2' CREATE(98204)
*  CDSCB 'HALL.MYVTOC2' EXPDT(99365)
*  CDSCB 'HALL.MYVTOC2' REFDT(99365)
*  CDSCB 'HALL.MYVTOC2' REFDT(*)
*
*  * TURN DS1IND02 BIT ON OR OFF
*  CDSCB 'HALL.MYVTOC2' CHBIT(ON)
*
*  * TURN DS1IND02 BIT ON, AND SET REFDATE TO TODAY
*  CDSCB 'HALL.MYVTOC2' CHBIT(ON) REFDT(*)
*
*  * TURN ON RACF INDICATE BIT
*  CDSCB 'HALL.MYVTOC2' RACF
*
*  * TURN OFF RACF INDICATE BIT
*  CDSCB 'HALL.MYVTOC2' NORACF
*  *
*
*        DATE UPDATED. JUNE 5 1998.
*        CHANGES...... ADDED A CHBIT(ON)/(OFF) KEYWORD TO INDICATE
*                      DATASET WAS MODIFIED. (FOR HSM)
*                   .. ADDED CHECK FOR PROPER RACF GROUP
*
         SPACE 1
*        WRITTEN BY. BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).
*        INSTALLATION. PRC COMPUTER CENTER, MCLEAN VA.
*        DATE WRITTEN. MAY 20 1975.
*        DATE UPDATED. FEBRUARY 12 1982.
*        ATTRIBUTES. RE-ENTRANT, REFRESHABLE, REUSABLE.
*        COMMENTS.
*            THIS TSO COMMAND ALTERS THE CONTENTS OF A
*            FORMAT-1 DSCB IN A VTOC.
*
*            THE DATA SET IS ALLOCATED, THEN THE VTOC OF THE
*            VOLUME CONTAINING IT IS OPENED VIA TYPE-J OPEN.
*            THE DSCB IS READ USING THE DSNAME AS A KEY. THE
*            TTR (BLOCK ADDRESS) OF THE RECORD IS RETURNED BY
*            THE READ.  THE DSCB IS RE-WRITTEN USING THE DSNAME
*            AS THE KEY, WITH THE KEY SEARCH STARTING AT THE
*            TTR ADDRESS FROM THE READ.
*
*            NOTE. UNDER VS2 MVS, A VTOC MAY BE OPENED FOR
*            UPDATE ONLY BY AUTHORIZED PROGRAMS. THEREFORE
*            THIS WILL ABEND WITH A 913-10 UNLESS THE COMMAND
*            CAN BE MADE TO RUN AUTHORIZED.
*
*            AUTHORIZE IT BY ADDING THE NAME OF THE COMMAND
*            TO THE TABLE IN MODULE IKJEFT02 CSECT IKJEFTE2.
*            OR, WRITE AN SVC AND REPLACE THE 2 'NOPR'
*            INSTRUCTIONS IN THIS PROGRAM WITH THE SVC.
*
*            04NOV77 - ADDED RECFM, DSORG, CREATE, EXPDT, UNIT
*            09DEC77 - ADDED IMPLEXEC, EXIT12
*            29MAR78 - JFCB+52 SET ON TO PREVENT WRITE-BACK
*            26JUL78 - PREFIXING DONE BY PARSE (USID)
*            22NOV78 - REMOVE LOCATE IF VOL NOT SPEC
*            24NOV78 - ADD CLEAR, PUTLINE, PUTMSG, 2ND BASE REG
*            12OCT79 - ADD GBLB, RESERVE, DEVTYPE FOR LIMCT.
*            14OCT79 - ADD STACK DELETE.
*            10APR80 - USID REMOVED FROM IKJPOSIT FOR SVS/MVT.
*            11APR80 - SHR KEYWORD ADDED.
*            25JUL80 - TESTAUTH ADDED. ASTERISK IN CREATE DATE.
*            01APR81 - ERROR MESSAGE FOR BAD DATES. COMMON EXIT PATH
*                      USING STATUS. MESSAGE IF NOTHING CHANGED.
*                      MORE RECFMS AND DSORGS. REFDT. FORMAT1 DSECT.
*                      ALLOW TO RUN IF UNDER STARTED TASK (TSSO).
*                      WTO MESSAGE WHEN CHANGING EXPDT.
*            20APR81 - RACF/NORACF KEYWORDS ADDED.
*            08MAY81 - MORE RECFMS ADDED (UA UM UT).
*            07JUL81 - CK FOR ASMI USERID INSTEAD OF ASFI.
*            12FEB82 - CHECK DSORG RECFM LRECL BLKSI CREDT
*                      FOR CHANGING TO SAME AS EXISTING VALUE.
*
*            SPECIFYING 'SYSPARM(OS)' TO THE ASSEMBLER WILL CAUSE
*            A VERSION FOR OS/MVT TO BE ASSEMBLED.
*            THE VS ASSEMBLER (OR H ASSEMBLER) MUST BE USED.
         SPACE 1
         GBLB  &MVS
&MVS     SETB  ('&SYSPARM' NE 'OS')
         EJECT
CDSCB    CSECT
CDSCB    AMODE 24
CDSCB    RMODE 24
         USING *,R15              GET  ADDRESSABILITY               RH
         B     @PROLOG-*(,R15)    BRANCH AROUND EYE CATCHER         RH
         DC    AL1(@PROLOG-*)     LTH OF EYE CATCHER                RH
EYECATCH DS    0C                                                   RH
         DC    C'CDSCB'           PROGRAM NAME                      RH
         DC    C' VERSION 2.0 '   VERSION                           RH
         DC    CL8'&SYSDATE'      DATE WRITTEN                      RH
         DC    CL6'&SYSTIME'      TIME WRITTEN                      RH
         DC    C'..VTOC MODIFIER TSO COMMAND'    COMMENT            RH
$$$COIBM DC    C' COPYRIGHT RANDY HALL AND BILL GODFREY'            RH
EYELTH   EQU   *-EYECATCH         LTH OF EYE CATCHER                RH
@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)  SUBPOOL AND LENGTH         RH
         SPACE 1                                                    RH
@PROLOG  DS    0H                                                   RH
         LA    R1,0(0,R1)         CLEAR HI-ORDER BYTE FOR 31 BIT    RH
         LA    R13,0(0,R13)       CLEAR HI-ORDER BYTE FOR 31 BIT    RH
         BSM   R14,0              SAVE CURRENT AMODE                RH
*                                                                   RH
SAVEREG  SAVE  (14,12)            SAVE REGISTERS                    RH
         DROP  R15                DROP TEMP BASE                    RH
         LR    R10,R15            SET 1ST BASE REG                  RH
         LA    R11,1(0,R10)       SET 2ND BASE REG                  RH
         LA    R11,4095(0,R11)    ''                                RH
         USING CDSCB,R10,R11      TELL ASSEMBLER                    RH
         LR    R2,R1
         USING CPPL,R2
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         LR    R9,R1               SET WORKAREA POINTER
         USING @DATA,R9           SET DSECT BASE
         SPACE 1
         LR    R15,R1              POINT TO AREA TO CLEAR
         L     R1,@SIZE            GET LENGTH TO CLEAR
         LA    R0,0(,R1)           CLEAR HIGH ORDER BYTE
         SRDL  R0,8                DIVIDE BY 256
         SRL   R1,24               ISOLATE REMAINDER
         LTR   R0,R0               IS QUOTIENT ZERO
         BZ    CLEARR              YES, GO DO REMAINDER
CLEARQ   XC    0(256,R15),0(R15)   ZERO 256 BYTES
         LA    R15,256(,R15)       INCREMENT ADDRESS
         BCT   R0,CLEARQ           DECREMENT QUOTIENT AND BRANCH
CLEARR   LTR   R1,R1               IS REMAINDER ZERO?
         BZ    CLEARX              YES, BRANCH TO EXIT
         BCTR  R1,0                LENGTH MINUS 1 FOR EX
         B     *+10                GO AROUND EXECUTED INST
         XC    0(0,R15),0(R15)     EXECUTED
         EX    R1,*-6              DO THE ABOVE XC
CLEARX   EQU   *
         SPACE 1
         ST    R13,4(,R9)
         ST    R9,8(,R13)
         LR    R13,R9
         SPACE 1
         MVC   SIZE,@SIZE
         EJECT
         AIF   (NOT &MVS).SKIP1
         L     R1,548              PSAAOLD
         L     R15,172(,R1)        ASCBJBNI
         LTR   R15,R15             IS THIS A JOB
         BNZ   AUTHID              YES, ASSUME BATCH TSO            RH
*        BNZ   IMPLEXEC            YES, QUIT
         L     R15,60(,R1)         ASCBTSB
         LTR   R15,R15             IS THIS A TSO SESSION
         BZ    PROCEED             NO, BRANCH IF STARTED TASK
.SKIP1   ANOP
*
AUTHID   DS    0H
         L     R1,16               CVTPTR
         L     R15,0(,R1)          TCB WORDS CVTTCBP
         L     R15,4(,R15)         CURRENT TCB
         L     R1,180(,R15)        TCBJSCB
         L     R1,264(,R1)         JSCBPSCB
         LTR   R1,R1               ANY PSCB?
         BNZ   PROCEED             YES, BRANCH IF TSO SESSION
*        BZ    IMPLEXEC            NO - NOT A TSO SESSION
         USING PSCB,R1
         SPACE 1
IMPLEXEC DS    0H                                                   RH
         L     R1,CPPLCBUF
         XC    2(2,R1),2(R1)       SET CBUF TO IMPLICIT EXEC
         L     R1,CPPLECT          GET ECT ADDRESS
         USING ECT,R1
         CLI   ECTSCMD,C' '        IS THIS A SUBCOMMAND
         BNE   *+10                YES - SAY SUBCOMMAND NOT FOUND
         MVC   ECTPCMD,=CL8'EXEC'  NO  - SAY COMMAND NOT FOUND
         DROP  R1                  ECT
         LR    R1,R13
         L     R0,@SIZE
         L     R13,4(,R13)
         FREEMAIN R,A=(1),LV=(0)
         L     R1,24(,R13)         RESTORE CPPL POINTER
         LA    R15,12(,R13)        POINT TO 2-WORD XCTL PARM
         XC    0(8,R15),0(R15)     CLEAR IT
         XCTL  (2,12),EP=EXEC,SF=(E,(15))
         EJECT
************************************************************
*                                                          *
*        SET UP IOPL FOR PUTLINE                           *
*                                                          *
************************************************************
         SPACE 1
PROCEED  LA    R15,MYIOPL
         USING IOPL,R15
         MVC   IOPLUPT(4),CPPLUPT
         MVC   IOPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,IOPLECB
         XC    MYECB,MYECB
         LA    R0,MYPTPB
         ST    R0,IOPLIOPB
         DROP  R15
         SPACE 1
         AIF   (NOT &MVS).SKIP2
         L     R15,16              LOAD CVT POINTER
         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)
         BNO   PUTLOAD             NO - BRANCH TO LOAD
         L     R15,444(,R15)       YES - USE CVTPUTL
         B     PUTLOADX            BRANCH AROUND LOAD
.SKIP2   ANOP
*
PUTLOAD  LA    R0,=CL8'IKJPUTL '
         LOAD  EPLOC=(0)
         LR    R15,R0              GET ENTRY ADDRESS
         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE
PUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS
*                                                                   RH
*                                                                   RH
*                                                                   RH
************************************************************
*                                                          *
*        SET UP PPL FOR PARSE                              *
*                                                          *
************************************************************
         SPACE 1
SETPPL   DS    0H                                                   RH
         LA    R15,MYPPL
         USING PPL,R15
         MVC   PPLUPT(4),CPPLUPT
         MVC   PPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         XC    MYECB,MYECB
*        L     R0,=A(CDSCBPCL)
         LA    R0,PCLADDR
         ST    R0,PPLPCL
         LA    R0,MYANS
         ST    R0,PPLANS
         MVC   PPLCBUF(4),CPPLCBUF
         ST    R9,PPLUWA
         DROP  R15                 PPL
         SPACE 1
************************************************************
*                                                          *
*        CALL THE PARSE SERVICE ROUTINE                    *
*                                                          *
************************************************************
         SPACE 1
         LR    R1,R15              POINT TO PPL
         AIF   (NOT &MVS).SKIP3
         L     R15,16              CVTPTR
         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON
         BNO   PARSELNK               THEN DO LINK, NOT CALL
         L     R15,524(,R15)       CVTPARS
         BALR  R14,R15             CALL IKJPARS
         B     PARSEEXT            SKIP AROUND LINK
PARSELNK EQU   *
.SKIP3   ANOP
         LINK  EP=IKJPARS,SF=(E,LINKAREA)
PARSEEXT EQU   *
         SPACE 1
         LTR   R15,R15
         BNZ   PARSERR
         EJECT
         L     R12,MYANS
         USING IKJPARMD,R12
         SPACE 1
************************************************************
*                                                          *
*        PROCESS THE 'ZAP' PARAMETER'                      *
*                                                          *
************************************************************
         SPACE 1
         CLI   ZAPKW+1,0           ZAP SPECIFIED?
         BE    NOREP               NO - BRANCH
         TM    REP+6,X'80'         ZAP SPECIFIED?
         BZ    NOREP
         CLI   REP+8,X'FF'         ONLY ONE REP PARAMETER?
         BE    INVREP              YES - ERROR - BRANCH
         MVC   OFFSET(5),=XL5'00'
         LA    R1,OFFSET
         CLI   REP+5,4
         BE    MOVEOFF
         CLI   REP+5,2
         BNE   INVREP              OFFSET MUST BE 2 OR 4 CHARS
         LA    R1,OFFSET+1
MOVEOFF  L     R14,REP             REG 14 --> OFFSET
         LH    R15,REP+4           REG 15  =  LENGTH (2 OR 4)
         BCTR  R15,0
         B     *+10
         MVC   0(0,R1),0(R14)      MOVE 1ST REP TO OFFSET
         EX    R15,*-6
         SPACE 1
         LH    R0,REP+4
         SRL   R0,1                CUT LENGTH IN HALF
         BAL   R14,PACK            CONVERT TO BINARY
         CLI   OFFSET+1,44+1       OFFSETS START WITH X'2D'
         BL    REPOERR             IF LESS ISSUE MESSAGE
         SPACE 1
         L     R6,REP+8            REG 6 --> NEXT PDE IN LIST (VER DATA
         L     R14,0(,R6)          REG 14 --> VERDATA
         LH    R15,4(,R6)          REG 15  =  LENGTH
         BCTR  R15,0
         B     *+10
         MVC   VERDATA+1(0),0(R14) MOVE 2ND REP TO VERDATA
         EX    R15,*-6
         LH    R0,4(,R6)
         SRL   R0,1                CUT LENGTH IN HALF
         BCTR  R0,0
         STC   R0,VERDATA
         LH    R0,4(,R6)
         SRL   R0,1                CUT LENGTH IN HALF
         LA    R1,VERDATA+1
         BAL   R14,PACK
         SR    R14,R14
         IC    R14,VERDATA         R14 = LEN-1 OF VERDATA
         AH    R14,OFFSET
         CH    R14,ENDOFREC        BEYOND END OF RECORD?
         BH    REPVERR             YES - ISSUE MESSAGE
         SPACE 1
         CLI   8(R6),X'FF'         3RD REP (REPDATA) SPECIFIED?
         MVI   VR,C'V'
         BE    REPX
         L     R6,8(,R6)           REG 6 --> NEXT PDE (REP DATA)
         MVI   VR,C'R'
         L     R14,0(,R6)          REG 14 --> REPDATA
         LH    R15,4(,R6)          R15  =  LENGTH
         BCTR  R15,0
         B     *+10
         MVC   REPDATA+1(0),0(R14) MOVE 3RD REP TO REPDATA
         EX    R15,*-6
         LH    R0,4(,R6)
         SRL   R0,1                CUT LENGTH IN HALF
         BCTR  R0,0
         STC   R0,REPDATA
         LH    R0,4(,R6)
         SRL   R0,1                CUT LENGTH IN HALF
         LA    R1,REPDATA+1
         BAL   R14,PACK
         CLC   VERDATA(1),REPDATA  COMPARE LENGTHS
         BL    REPDERR             VER DATA MUST NOT BE SHORTER
REPX     EQU   *
NOREP    EQU   *
         SPACE 1
************************************************************
*                                                          *
*        PROCESS THE 'RECFM' KEYWORD                       *
*                                                          *
************************************************************
         SPACE 1
         LH    R1,RECFM            GET RECFM
         LTR   R1,R1               RECFM SPECIFIED?
         BZ    NOREC               NO - BRANCH
         IC    R14,RECFMTAB(R1)    GET RECFM BITS
         STC   R14,NEWRECFM        SAVE NEW RECFM
         MVI   NEWRECSW,C'R'       SET SWITCH ON
NOREC    EQU   *
         SPACE 1
************************************************************
*                                                          *
*        PROCESS THE 'BLKSIZE' KEYWORD                     *
*                                                          *
************************************************************
         SPACE 1
         CLI   BLKKW+1,0           BLKSIZE SPECIFIED?
         BE    NOBLK               NO - BRANCH
         TM    BLK+6,X'80'         VALUE PRESENT?
         BZ    NOBLK               NO - BRANCH
         LH    R14,BLK+4           GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BZ    NOBLK               YES - BRANCH
         L     R1,BLK              POINT TO VALUE
         BCTR  R14,0
         B     *+10
         PACK  DOUBLE(8),0(0,R1)
         EX    R14,*-6
         CVB   R1,DOUBLE           GET BINARY VALUE
         C     R1,=F'32767'        TOO LARGE?
         BNH   *+8                 NO - BRANCH
         L     R1,=F'32767'        YES - REDUCE IT
         STH   R1,NEWBLK           SAVE IT
         MVI   NEWBLKSW,C'B'       SET SWITCH ON
NOBLK    EQU   *
         SPACE 1
************************************************************
*                                                          *
*        PROCESS THE 'LRECL' KEYWORD                       *
*                                                          *
************************************************************
         SPACE 1
         CLI   LREKW+1,0           LRECL SPECIFIED?
         BE    NOLRE               NO - BRANCH
         TM    LRE+6,X'80'         VALUE PRESENT?
         BZ    NOLRE               NO - BRANCH
         LH    R14,LRE+4           GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BZ    NOLRE               YES - BRANCH
         L     R1,LRE              POINT TO VALUE
         BCTR  R14,0
         B     *+10
         PACK  DOUBLE(8),0(0,R1)
         EX    R14,*-6
         CVB   R1,DOUBLE           GET BINARY VALUE
         C     R1,=F'32767'        TOO LARGE?
         BNH   *+8                 NO - BRANCH
         L     R1,=F'32767'        YES - REDUCE IT
         STH   R1,NEWLRE           SAVE IT
         MVI   NEWLRESW,C'L'       SET SWITCH ON
NOLRE    EQU   *
         SPACE 1
************************************************************
*                                                          *
*        PROCESS THE 'DSORG' KEYWORD                       *
*                                                          *
************************************************************
         SPACE 1
         LH    R1,DSORG            GET DSORG
         LTR   R1,R1               DSORG SPECIFIED?
         BZ    NODSO               NO - BRANCH
         IC    R14,DSORGTAB(R1)    GET DSORG BITS
         STC   R14,NEWDSORG        SAVE NEW DSORG
         MVI   NEWDSORG+1,0        NEW DSORG PART 2
         MVI   NEWDSOSW,C'R'       SET SWITCH ON
NODSO    EQU   *
         SPACE 1
************************************************************
*                                                          *
*        PROCESS THE PROTECTION KEYWORDS                   *
*                                                          *
************************************************************
         SPACE 1
         CLI   PROKW+1,0           ANY PROTECTION KEYWORDS?
         BE    NOPRO               NO - BRANCH
         MVI   NEWPRO0,X'FF'       START WITH NO BITS TO SET OFF
         MVI   NEWPRO1,X'00'              AND NO BITS TO SET ON.
         CLI   PROKW+1,2           'PW' OR 'PWREAD'?
         BH    PRO3                NO - BRANCH
         MVI   NEWPRO0,B'11111011' SET OFF 1 BIT
         MVI   NEWPRO1,B'00010000' SET ON 1 BIT
         B     PROX
PRO3     CLI   PROKW+1,3           'PWWRITE'?
         BNE   PRO4                NO - BRANCH
         MVI   NEWPRO1,B'00010100' SET ON 2 BITS
         B     PROX
PRO4     CLI   PROKW+1,4           'NOPW'?
         BNE   PRO5                NO - BRANCH
         MVI   NEWPRO0,B'11101011' SET OFF 2 BITS
         B     PROX
PRO5     CLI   PROKW+1,5           'RACF'
         BNE   PRO6
         MVI   NEWPRO1,X'40'       SET ON 1 BIT
         B     PROX
PRO6     CLI   PROKW+1,6           'NORACF'
         BNE   NOPRO
         MVI   NEWPRO0,255-X'40'   SET OFF 1 BIT
PROX     MVI   NEWPROSW,C'P'       SET SWITCH ON
NOPRO    EQU   *
         SPACE 1                                                    RH
************************************************************        RH
*                                                          *        RH
*        PROCESS THE CHBIT   KEYWORDS                      *        RH
*                                                          *        RH
************************************************************        RH
         SPACE 1                                                    RH
         CLI   BACKBIT+1,0         ANY CHBIT KEYWORDS?              RH
         BE    NOCHB               NO - BRANCH                      RH
         MVI   NEWCHB0,X'FF'       START WITH NO BITS TO SET OFF    RH
         MVI   NEWCHB1,X'00'              AND NO BITS TO SET ON.    RH
         CLI   BACKBIT+1,1         'ON' ?                           RH
         BH    CHB3                NO - BRANCH                      RH
         MVI   NEWCHB0,B'11111101' SET OFF 1 BIT                    RH
         MVI   NEWCHB1,B'00000010' SET ON 1 BIT                     RH
         B     CHBX                                                 RH
CHB3     CLI   BACKBIT+1,2         'OFF'?                           RH
         BNE   NOCHB               NO - BRANCH                      RH
         MVI   NEWCHB0,255-X'02'   SET OFF 1 BIT                    RH
CHBX     MVI   NEWCHBSW,C'P'       SET SWITCH ON                    RH
NOCHB    EQU   *                                                    RH
         SPACE 1
************************************************************
*                                                          *
*        PROCESS THE 'ALLOC' KEYWORD                       *
*                                                          *
************************************************************
         SPACE 1
         CLI   ALLKW+1,0           'ALLOC' SPECIFIED?
         BE    NOALL               NO - BRANCH
         CLI   ALL+1,0             ANY SUBKEYWORDS?
         BE    NOALL               NO - BRANCH
         MVI   NEWALL0,X'FF'       START WITH NO BITS TO SETOFF
         MVI   NEWALL1,X'00'              AND NO BITS TO SETON
         CLI   ALL+1,1             'NONE'?
         BNE   ALL2                NO - BRANCH
         MVI   NEWALL0,B'00111111' SET OFF 2 BITS
         B     ALLX
ALL2     CLI   ALL+1,2             'BLOCKS'
         BNE   ALL3                NO - BRANCH
         MVI   NEWALL0,B'01111111' SET OFF 1 BIT
         MVI   NEWALL1,B'01000000' SET ON 1 BIT
         B     ALLX
ALL3     CLI   ALL+1,3             'TRACKS'
         BNE   ALL4                NO - BRANCH
         MVI   NEWALL0,B'10111111' SET OFF 1 BIT
         MVI   NEWALL1,B'10000000' SET ON 1 BIT
         B     ALLX
ALL4     CLI   ALL+1,4             'CYLINDERS'
         BNE   NOALL               NO - BRANCH
         MVI   NEWALL1,B'11000000' SET ON 2 BITS
ALLX     MVI   NEWALLSW,C'A'       SET ON SWITCH
NOALL    EQU   *
         SPACE 1
************************************************************
*                                                          *
*        PROCESS THE 'SPACE' PARAMETER                     *
*                                                          *
************************************************************
         SPACE 1
         CLI   SPAKW+1,0           SPACE SPECIFIED?
         BE    NOSPA               NO - BRANCH
         TM    SPA+6,X'80'         VALUE PRESENT?
         BZ    NOSPA               NO - BRANCH
         LH    R14,SPA+4           GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BZ    NOSPA               YES - BRANCH
         L     R1,SPA              POINT TO VALUE
         BCTR  R14,0
         B     *+10
         PACK  DOUBLE(8),0(0,R1)
         EX    R14,*-6
         CVB   R1,DOUBLE           GET BINARY VALUE
         C     R1,=F'32767'        TOO LARGE?
         BNH   *+8                 NO - BRANCH
         L     R1,=F'32767'        YES - REDUCE IT
         ST    R1,NEWSPA           SAVE IT
         MVI   NEWSPASW,C'S'       SET SWITCH ON
NOSPA    EQU   *
         EJECT
************************************************************
*                                                          *
*        PROCESS THE 'CREATE' KEYWORD                      *
*                                                          *
************************************************************
         SPACE 1
         CLI   CREATEKW+1,0        CREATE SPECIFIED?
         BE    CREATEX             NO - BRANCH
         TM    CREATE+6,X'80'      VALUE PRESENT?
         BZ    CREATEX             NO - BRANCH
         LH    R14,CREATE+4        GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BZ    CREATEX             YES - BRANCH
         L     R1,CREATE           POINT TO VALUE
         CLI   0(R1),C'*'          ASTERISK
         BE    CTODAY              YES, BRANCH
         BCTR  R14,0
         B     *+10
         PACK  DOUBLE(8),0(0,R1)
         EX    R14,*-6
         CVB   R15,DOUBLE          GET BINARY VALUE
         LTR   R15,R15             IS IT ZERO?
         BZ    CREOK               YES - BRANCH
         CH    R14,=H'4'           WERE 5 DIGITS SPECIFIED?
         BNE   ERRCDATE            NO - BRANCH TO ERROR (IGNORE)
CREPACK  PACK  DOUBLE(8),0(2,R1)   PACK YY
         CVB   R14,DOUBLE          GET BINARY YY
         SLL   R14,16              00YY0000
         PACK  DOUBLE(8),2(3,R1)   PACK DDD
         CVB   R15,DOUBLE          GET BINARY DDD
         OR    R15,R14             00YY0DDD
CREOK    ST    R15,NEWCRE          SAVE NEW CREATION DATE
         MVI   NEWCRESW,C'C'       SET SWITCH ON
         B     CREATEX
CTODAY   EQU   *
         TIME  BIN
         ST    R1,DOUBLE           STORE 00YYDDDC
         LA    R1,DATE5            POINT TO FAKE OPERAND
         UNPK  0(5,R1),DOUBLE+1(3) YYDDD
         OI    4(R1),C'0'          FIX SIGN BITS
         B     CREPACK             JUMP BACK IN WITH FAKE OPERAND
CREATEX  EQU   *
         EJECT
************************************************************
*                                                          *
*        PROCESS THE 'EXPDT' KEYWORD                       *
*                                                          *
************************************************************
         SPACE 1
         CLI   EXPDTEKW+1,0        EXPDTE SPECIFIED?
         BE    NOEXP               NO - BRANCH
         TM    EXPDTE+6,X'80'      VALUE PRESENT?
         BZ    NOEXP               NO - BRANCH
         LH    R14,EXPDTE+4        GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BZ    NOEXP               YES - BRANCH
         MVC   EXPCH,=C'00000'
         L     R1,EXPDTE           POINT TO VALUE
         CLI   0(R1),C'*'          ASTERISK                         RH
         BE    ETODAY              YES, BRANCH                      RH
         BCTR  R14,0
         B     *+10
         PACK  DOUBLE(8),0(0,R1)
         EX    R14,*-6
         CVB   R15,DOUBLE          GET BINARY VALUE
         LTR   R15,R15             IS IT ZERO?
         BZ    EXPOK               YES - BRANCH
         CH    R14,=H'4'           WERE 5 DIGITS SPECIFIED?
         BNE   ERRXDATE            NO - BRANCH TO ERROR (IGNORE)
         MVC   EXPCH,0(R1)         SAVE EXPDT
*                                                                   RH
EXPPACK  DS    0H                                                   RH
         PACK  DOUBLE(8),0(2,R1)   PACK YY
         CVB   R14,DOUBLE          GET BINARY YY
         SLL   R14,16              00YY0000
         PACK  DOUBLE(8),2(3,R1)   PACK DDD
         CVB   R15,DOUBLE          GET BINARY DDD
         OR    R15,R14             00YY0DDD
EXPOK    ST    R15,NEWEXP          SAVE NEW EXPIRATION DATE
         MVI   NEWEXPSW,C'C'       SET SWITCH ON
NOEXP    EQU   *
         SPACE 1
ENDEXP   DS    0H
         B     EXPEXIT                                              RH
*                                                                   RH
ETODAY   EQU   *                                                    RH
         TIME  BIN                                                  RH
         ST    R1,DOUBLE           STORE 00YYDDDC                   RH
         LA    R1,DATE5            POINT TO FAKE OPERAND            RH
         UNPK  0(5,R1),DOUBLE+1(3) YYDDD                            RH
         OI    4(R1),C'0'          FIX SIGN BITS                    RH
         B     EXPPACK             JUMP BACK IN WITH FAKE OPERAND   RH
         SPACE 1                                                    RH
EXPEXIT  DS    0H                                                   RH
         SPACE 3                                                    RH
************************************************************
*                                                          *
*        PROCESS THE 'REFDT' KEYWORD                       *
*                                                          *
************************************************************
         SPACE 1
         CLI   REFDTEKW+1,0        REFDT SPECIFIED?
         BE    REFDTEX             NO - BRANCH
         TM    REFDTE+6,X'80'      VALUE PRESENT?
         BZ    REFDTEX             NO - BRANCH
         LH    R14,REFDTE+4        GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BZ    REFDTEX             YES - BRANCH
         L     R1,REFDTE           POINT TO VALUE
         CLI   0(R1),C'*'          ASTERISK
         BE    RTODAY              YES, BRANCH
         BCTR  R14,0
         B     *+10
         PACK  DOUBLE(8),0(0,R1)
         EX    R14,*-6
         CVB   R15,DOUBLE          GET BINARY VALUE
         LTR   R15,R15             IS IT ZERO?
         BZ    REFOK               YES - BRANCH
         CH    R14,=H'4'           WERE 5 DIGITS SPECIFIED?
         BNE   ERRRDATE            NO - BRANCH TO ERROR (IGNORE)
REFPACK  PACK  DOUBLE(8),0(2,R1)   PACK YY
         CVB   R14,DOUBLE          GET BINARY YY
         SLL   R14,16              00YY0000
         PACK  DOUBLE(8),2(3,R1)   PACK DDD
         CVB   R15,DOUBLE          GET BINARY DDD
         OR    R15,R14             00YY0DDD
REFOK    ST    R15,NEWREF          SAVE NEW REFERENCED DATE
         MVI   NEWREFSW,C'C'       SET SWITCH ON
         B     REFDTEX
RTODAY   EQU   *
         TIME  BIN
         ST    R1,DOUBLE           STORE 00YYDDDC
         LA    R1,DATE5            POINT TO FAKE OPERAND
         UNPK  0(5,R1),DOUBLE+1(3) YYDDD
         OI    4(R1),C'0'          FIX SIGN BITS
         B     REFPACK             JUMP BACK IN WITH FAKE OPERAND
REFDTEX  EQU   *
         EJECT
************************************************************
*                                                          *
*        PROCESS THE DSNAME PARAMETER                      *
*                                                          *
************************************************************
         SPACE 1
         LA    R1,DSN
         L     R8,0(,R1)           R8  -> DSNAME
         LH    R7,4(,R1)           R7  =  LENGTH
         LTR   R7,R7               IS LENGTH ZERO?
         BZ    ERRDSN              YES, WAS (MEMBER) ONLY
         LR    R6,R7
         MVI   DSNAME,C' '
         MVC   DSNAME+1(43),DSNAME
         SLR   R14,R14
         AIF   (&MVS).SKIP4        PREFIX DSNAME WITH USERID
         TM    6(R1),X'40'         IS DSN QUOTED?
         BO    DSNQUOTE
         SPACE 1
*
*              GET THE USERID AND PREFIX THE DSNAME
*
         SPACE 1
         L     R15,CPPLPSCB
         USING PSCB,R15
         IC    R14,PSCBUSRL        LENGTH OF PREFIX
         LTR   R14,R14             NOPREFIX
         BZ    DSNQUOTE            SAME AS QUOTED
         LA    R6,1(R14,R6)        R6 = TOTAL LEN
         MVC   DSNAME(7),PSCBUSER
         DROP  R15                 UPT
         LA    R14,DSNAME(R14)
         MVI   0(R14),C'.'         ADD PERIOD
         LA    R14,1(,R14)         PERIOD LENGTH
         B     *+8
.SKIP4   ANOP
DSNQUOTE LA    R14,DSNAME(R14)
         BCTR  R7,0
         B     *+10
         MVC   0(0,R14),0(R8)
         EX    R7,*-6
         STH   R6,DSNAMEL
         EJECT
************************************************************
*                                                          *
*        PROCESS THE VOLUME PARAMETER                      *
*                                                          *
************************************************************
         SPACE 1
         MVC   WRKUNIT,=CL8' '
         MVC   WRKVOL(6),=CL8' '
         TM    VOL+6,X'80'         VOLUME SPECIFIED?
         BZ    NOVOL               NO - BRANCH
         L     R14,VOL             R14 --> VOLUME
         LH    R15,VOL+4           R15  =  LENGTH
         BCTR  R15,0
         B     *+10
         MVC   WRKVOL(0),0(R14)
         EX    R15,*-6
         SPACE 1
************************************************************
*                                                          *
*        IF VOLUME SPECIFIED, CHECK FOR UNIT PARAMETER     *
*                                                          *
************************************************************
         SPACE 1
         TM    UNIT+6,X'80'        UNIT SPECIFIED?
         BZ    NOUNIT              NO - BRANCH
         L     R14,UNIT            POINT TO UNIT NAME
         LH    R15,UNIT+4          LENGTH OF UNIT NAME
         BCTR  R15,0
         B     *+10
         MVC   WRKUNIT(0),0(R14)
         EX    R15,*-6
NOUNIT   EQU   *
NOVOL    EQU   *
         EJECT
************************************************************
*                                                          *
*        CALL DYNAMIC ALLOCATION                           *
*                                                          *
************************************************************
         SPACE 1
DYNALLOC EQU   *
         LA    R1,MYDAPL
         USING DAPL,R1
         MVC   DAPLUPT(4),CPPLUPT
         MVC   DAPLECT(4),CPPLECT
         LA    R0,MYECB
         ST    R0,DAPLECB
         MVC   DAPLPSCB(4),CPPLPSCB
         LA    R0,MYDAPB
         ST    R0,DAPLDAPB
         SPACE 1
         XC    MYECB,MYECB
         L     R15,DAPLDAPB
         USING DAPB08,R15
         XC    0(84,R15),0(R15)
         MVI   DA08CD+1,X'08'
         LA    R14,DA08DDN
         MVI   0(R14),X'40'
         MVC   1(23,R14),0(R14)  DD,UNIT,VOL
         MVC   DA08SER(6),WRKVOL
         MVC   DA08UNIT(8),WRKUNIT
         MVC   DA08MNM(16),0(14)
         MVC   DA08ALN(8),0(R14)
         LA    R0,DSNAMEL
         ST    R0,DA08PDSN
         MVI   DA08DSP1,DA08OLD
         CLI   SHRKW+1,0           'SHR' SPECIFIED ?
         BE    *+8                 BRANCH IF NOT
         MVI   DA08DSP1,DA08SHR    'SHR' SPECIFIED
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         BAL   R14,CALLDAIR
         SPACE 1
         LTR   R15,R15
         BNZ   DAIRERR
         OI    STATUS,STATA        INDICATE ALLOCATED
         EJECT
************************************************************
*                                                          *
*        SET UP THE DCB                                    *
*                                                          *
************************************************************
         SPACE 1
         MVC   DCB(DCBLEN),DCBMODEL
         LA    R15,MYDAPB
         LA    R3,DCB
         USING IHADCB,R3
         MVC   DCBDDNAM(8),DA08DDN
         LA    R15,JFCB
         ST    R15,EXLSTD
         MVI   EXLSTD,X'87'
         LA    R15,EXLSTD
         IC    R14,DCBEXLST
         ST    R15,DCBEXLST        SET DCB EXLST=EXLSTD
         STC   R14,DCBEXLST
         SPACE 1
************************************************************
*                                                          *
*        READ THE JFCB                                     *
*                                                          *
************************************************************
         SPACE 1
         MVC   RDJFCBD,RDJFCB
         RDJFCB ((R3)),MF=(E,RDJFCBD)
         SPACE 1
************************************************************
*                                                          *
*        DEFER ATTENTION INTERRUPTS                        *
*                                                          *
************************************************************
         SPACE 1
         MVC   STAXD(20),STAXDEF
         STAX  DEFER=YES,MF=(E,STAXD)
         SPACE 1
************************************************************
*                                                          *
*        INSTALLATION-DEPENDENT CODE                       *
*        TO GET AROUND ABEND 913-10                        *
*                                                          *
************************************************************
         SPACE 1
         L     1,16
         L     1,0(,1)
         L     1,4(,1)             R1 --> TCB
         L     4,180(,1)           R4 --> JSCB
         TM    236(4),X'01'        ARE WE AUTHORIZED
         BO    KEY0X               YES, BYPASS AUTHSET
         LA    0,0                 R0 = FUNCTION CODE FOR USER SVC
         LA    15,KEY0A            R15 POINTS TO ROUTINE TO BE CALLED
USRSVC   NOPR  0                   *** REPLACE WITH USER SVC ***
         B     KEY0B               BRANCH AROUND ROUTINE
KEY0A    OI    236(4),X'01'        SET ON JSCBAUTH
         BR    14                  RETURN TO SVC
KEY0B    OI    STATUS,STATM        INDICATE AUTH HAS BEEN CHANGED
KEY0X    EQU   *
         SPACE 1
         AIF   (NOT &MVS).SKIP5    TESTAUTH
         TESTAUTH FCTN=1
         LTR   R15,R15            WAS AUTH OKAY?
         BNZ   NOTAUTH3           NO. DOESN'T MATTER IF RACF OKAY   RH
*                                                                   RH
*        GO SEE IF WE HAVE ACCESS TO VTOC RESOURCE CLASS            RH
*                                                                   RH
         L     R5,=V(USRDSN)      R5 -> TO CLASS AREA               RH
         LA    R15,JFCB                                             RH
         USING JFCBD,R15          SET JFCB BASE                     RH
         MVC   0(6,R5),JFCBVOLS   VOLSER IS THE CLASS               RH
         DROP  R15                DROP JFCB BASE                    RH
         PERFORM RACHEC    ,ERR=BADAUTH                             RH
         LTR   R15,R15            WAS AUTH OKAY?                    RH
         BZ    DODEV              YES, AUTH OKAY....                RH
*                                                                   RH
NOTAUTH3 DS    0H                                                   RH
         OI    STATUS,STATNA      SAY NOT AUTH'D                    RH
         LA    R1,AUTHMSG                                           RH
         LA    R0,L'AUTHMSG                                         RH
         BAL   R14,PUTMSG                                           RH
         B     DODEV              AUTH OKAY....                     RH
*                                                                   RH
AUTHMSG  DC    C'YOU ARE NOT AUTHORIZED TO CHANGE A VTOC'           RH
*                                                                   RH
.SKIP5   ANOP
         SPACE 1
************************************************************
*                                                          *
*        OPEN THE VTOC                                     *
*                                                          *
************************************************************
         SPACE 1
DODEV    DEVTYPE DCBDDNAM,DEVAREA,DEVTAB
         SPACE 1
         LH    R1,DEVAREA+10       TRACKS PER CYL
         MH    R1,=H'5'            ASSUME 5 CYLINDER VTOC
         STH   R1,TRACKS
         SPACE 1
         GETPOOL (R3),2,96
         SPACE 1
         OI    STATUS,STATG        INDICATE GETPOOL ISSUED
         MVI   JFCB,X'04'
         MVC   JFCB+1(43),JFCB
         OI    JFCB+52,X'08'       DO NOT WRITE BACK      29MAR78
         MVC   OPENJD,OPENJ
         TM    STATUS,STATNA      ARE WE AUTH'D                     RH
         BNO   OPENU              YES                               RH
*        CLC   =X'9604',OPENA+8   GOT UPDAT BIT?                    RH
*        BNE   AUTHERR            NO, TOO BAD                       RH
*        MVI   OPENA+9,X'00'      YES, CHANGE UPDAT TO INPUT        RH
         OPEN  ((R3),INPUT),TYPE=J,MF=(E,OPENJD)                    RH
         B     CHKOPEN            SEE IF VTOC OPENED...             RH
*                                                                   RH
OPENU    OPEN  ((R3),UPDAT),TYPE=J,MF=(E,OPENJD)                    RH
*                                                                   RH
CHKOPEN  DS    0H                                                   RH
         TM    DCBOFLGS,X'10'
         BZ    OPENERR
         OI    STATUS,STATO        INDICATE OPENED
         EJECT
************************************************************
*                                                          *
*        ENQ ON THE VTOC                                   *
*                                                          *
************************************************************
         SPACE 1
         TM    STATUS,STATNA      ARE WE AUTH'D                     RH
         BO    NOENQ              NO, DON'T DO ENQ                  RH
         L     R1,DCBDEBAD         POINT TO DEB
         L     R1,32(,R1)          POINT TO UCB
         ST    R1,UCBAD            STORE UCB ADDRESS
         MVC   RNAME,28(R1)        MOVE VOLUME TO RNAME
         MVC   QNAME,=CL8'SYSVTOC'
         MVC   RW(RL),R            MOVE MF=L TO WORK AREA
         SPACE 1
         RESERVE (QNAME,RNAME,E,6,SYSTEMS),RET=HAVE,UCB=UCBAD,MF=(E,RW)
         SPACE 1
         OI    STATUS,STATQ        INDICATE ENQ ACTIVE
         SPACE 1
************************************************************
*                                                          *
*        READ THE FORMAT 1 DSCB USING DSNAME AS KEY        *
*                                                          *
************************************************************
         SPACE 1
NOENQ    GETBUF (R3),(R4)
         SPACE 1
         LH    R1,TRACKS
         STH   R1,DCBLIMCT+1
         MVC   READDECB(READL),DECBMODR
         MVC   TTR(3),=X'000001'
         SPACE 1
         READ  READDECB,DKF,(R3),(R4),'S',DSNAME,TTR,MF=E
         SPACE 1
         MVI   SYNADSWT,0
         SPACE 1
         CHECK READDECB
         SPACE 1
         CLI   SYNADSWT,0          SYNAD EXIT TAKEN?
         BNE   READERR             YES - BRANCH
         L     R4,READDECB+12      R4 --> AREA ADDRESS
         LR    R5,R4
         SH    R5,=H'44'           R5 --> IMAGINARY KEY-DATA AREA
         USING FORMAT1,R5
         SPACE 1
************************************************************
*                                                          *
*        VERIFY                                            *
*                                                          *
************************************************************
         SPACE 1
         CLI   VR,0                REP SPECIFIED?
         BE    VRX                 NO - BRANCH
         LR    R1,R5
         AH    R1,OFFSET           R1 --> LOCATION OF VICTIM
         SR    R14,R14
         IC    R14,VERDATA
         B     *+10
         CLC   0(0,R1),VERDATA+1
         EX    R14,*-6             COMPARE VICTIM TO VER DATA
         BNE   VERREJ              NOT EQUAL - REJECT
         SPACE 1
         CLI   VR,C'R'             WAS REP DATA SPECIFIED?
         BE    REPROUT             YES - BRANCH
         LA    R1,=C'VERIFIED'
         LA    R0,8
         BAL   R14,PUTMSG
         SPACE 1
         B     VRX
         SPACE 1
************************************************************
*                                                          *
*        REPLACE                                           *
*                                                          *
************************************************************
         SPACE 1
REPROUT  IC    R14,REPDATA
         B     *+10
         MVC   0(0,R1),REPDATA+1
         EX    R14,*-6              MOVE REP DATA TO RECORD
         MVI   CHANGED,C'C'         SET CHANGED SWITCH
VRX      EQU   *
         SPACE 1
         CLI   NEWRECSW,0          RECFM SPECIFIED?
         BE    NURECX              NO - BRANCH
         CLC   DS1RECFM,NEWRECFM   ALREADY THAT
         BE    NURECX              YES - BRANCH
         MVC   DS1RECFM,NEWRECFM   MOVE IN NEW RECFM
         MVI   CHANGED,C'C'        SET SWITCH ON
NURECX   EQU   *
         SPACE 1
         CLI   NEWDSOSW,0          DSORG SPECIFIED?
         BE    NUDSOX              NO - BRANCH
         CLC   DS1DSORG,NEWDSORG   ALREADY THAT
         BE    NUDSOX              YES, BRANCH
         MVC   DS1DSORG,NEWDSORG   MOVE IN NEW DSORG
         MVI   CHANGED,C'C'        SET SWITCH ON
NUDSOX   EQU   *
         SPACE 1
         CLI   NEWBLKSW,0          BLKSIZE SPECIFIED?
         BE    NUBLKX              NO - BRANCH
         CLC   DS1BLKL,NEWBLK      ALREADY THAT
         BE    NUBLKX              YES - BRANCH
         MVC   DS1BLKL,NEWBLK      MOVE IN NEW BLKSIZE
         MVI   CHANGED,C'C'        SET SWITCH ON
NUBLKX   EQU   *
         SPACE 1
         CLI   NEWLRESW,0          LRECL SPECIFIED?
         BE    NULREX              NO - BRANCH
         CLC   DS1LRECL,NEWLRE     ALREADY THAT
         BE    NULREX              YES - BRANCH
         MVC   DS1LRECL,NEWLRE     MOVE IN NEW LRECL
         MVI   CHANGED,C'C'        SET SWITCH ON
NULREX   EQU   *
         SPACE 1
         CLI   NEWPROSW,0          PROTECTION MODIFIED?
         BE    NUPROX              NO - BRANCH
         MVC   NEWPROSV,DS1DSIND   HOLD A COPY
         NC    DS1DSIND,NEWPRO0    SET REQUIRED BITS OFF
         OC    DS1DSIND,NEWPRO1    SET REQUIRED BITS ON
         CLC   NEWPROSV,DS1DSIND   ANY CHANGE?
         BE    *+8                 NO - LEAVE SWITCH OFF
         MVI   CHANGED,C'C'        YES - SET SWITCH ON
NUPROX   EQU   *
         CLI   NEWALLSW,0          SEC. ALLOCATION ALTERED?
         BE    NUALLX              NO - BRANCH
         MVC   NEWPROSV,DS1SCALO   HOLD A COPY
         NC    DS1SCALO(1),NEWALL0 SET REQUIRED BITS OFF
         OC    DS1SCALO(1),NEWALL1 SET REQUIRED BITS ON
         CLC   NEWPROSV,DS1SCALO   ANY CHANGE?
         BE    *+8                 NO - LEAVE SWITCH OFF
         MVI   CHANGED,C'C'        YES - SET SWITCH ON
NUALLX   EQU   *
         CLI   NEWSPASW,0          SPACE SPECIFIED?
         BE    NUSPAX              NO - BRANCH
         MVC   DS1SCALO+1(3),NEWSPA+1 MOVE IN NEW SPACE 1
         MVI   CHANGED,C'C'        SET SWITCH ON
NUSPAX   EQU   *
         SPACE 1
         CLI   NEWCRESW,0          CREATE SPECIFIED?
         BE    NUCREX              NO - BRANCH
         CLC   DS1CREDT,NEWCRE+1   IS IT ALREADY THAT VALUE
         BE    NUCREX              YES, BRANCH
         MVC   DS1CREDT,NEWCRE+1   MOVE IN NEW CREATION DATE
         MVI   CHANGED,C'C'        SET SWITCH ON
NUCREX   EQU   *
         SPACE 1
         MVI   EXPSW,X'FF'
         CLI   NEWEXPSW,0          EXPDT SPECIFIED?
         BE    NUEXPX              NO - BRANCH
         CLC   DS1EXPDT,NEWEXP+1   IS IT ALREADY THAT VALUE
         BE    NUEXPX              YES, BRANCH
         MVC   DS1EXPDT,NEWEXP+1   MOVE IN NEW EXPIRATION DATE
         MVI   CHANGED,C'C'        SET SWITCH ON
         MVI   EXPSW,1             INDICATE NEW EXPDT
         CLC   NEWEXP+1(3),=AL3(0)
         BNE   *+8
         MVI   EXPSW,0             INDICATE NEW EXPDT ZERO
NUEXPX   EQU   *
         SPACE 1
         CLI   NEWREFSW,0          REFDT SPECIFIED?
         BE    NUREFX              NO - BRANCH
         CLC   DS1REFD,NEWREF+1    IS IT ALREADY THAT VALUE
         BE    NUREFX              YES, BRANCH
         MVC   DS1REFD,NEWREF+1    MOVE IN NEW REFERENCE DATE
         MVI   CHANGED,C'C'        SET SWITCH ON
         SPACE 1                                                    RH
NUREFX   EQU   *
         CLI   NEWCHBSW,0          DS1IND02 MODIFIED?               RH
         BE    NUCHBX              NO - BRANCH                      RH
         MVC   NEWCHBSV,DS1DSIND   HOLD A COPY                      RH
         NC    DS1DSIND,NEWCHB0    SET REQUIRED BITS OFF            RH
         OC    DS1DSIND,NEWCHB1    SET REQUIRED BITS ON             RH
         CLC   NEWCHBSV,DS1DSIND   ANY CHANGE?                      RH
         BE    *+8                 NO - LEAVE SWITCH OFF            RH
         MVI   CHANGED,C'C'        YES - SET SWITCH ON              RH
         SPACE 1                                                    RH
NUCHBX   EQU   *                                                    RH
         DROP  R5                  FORMAT1
         CLI   CHANGED,0           ANYTHING CHANGED?
         BNE   REWRITE             YES, GO REWRITE THE DSCB
         LA    R1,SAMEMSG
         LA    R0,L'SAMEMSG
         BAL   R14,PUTMSG
         B     EXIT0
SAMEMSG  DC    C'NOTHING CHANGED'
         SPACE 1
************************************************************
*                                                          *
*        REWRITE THE FORMAT 1 DSCB                         *
*                                                          *
************************************************************
         SPACE 1
REWRITE  DS    0H                                                   RH
         TM    STATUS,STATNA      ARE WE AUTH'D                     RH
         BNO   REWRITE2           YES, DO RE-WRITE                  RH
         LA    R1,CHNGMSG                                           RH
         LA    R0,L'CHNGMSG                                         RH
         BAL   R14,PUTMSG                                           RH
         B     EXIT0                                                RH
CHNGMSG  DC    C'CDSCB NOT AUTHORIZED. VTOC NOT CHANGED'            RH
*HNGMSG  DC    C'IF AUTH''D, VTOC WOULD HAVE BEEN CHANGED'          RH
*                                                                   RH
REWRITE2 DS    0H                                                   RH
         MVC   WRITDECB(WRITEL),DECBMODW
         WRITE WRITDECB,DK,(R3),(R4),,DSNAME,TTR,MF=E
         SPACE 1
         MVI   SYNADSWT,0
         SPACE 1
         CHECK WRITDECB
         SPACE 1
         CLI   SYNADSWT,0          SYNAD EXIT TAKEN?
         BNE   WRITERR             YES - BRANCH
TEMPJUMP EQU   *
         LA    R1,=C'CHANGED'
         LA    R0,7
         BAL   R14,PUTMSG
         SPACE 1
************************************************************
*                                                          *
*         WRITE A MESSAGE ON THE CONSOLE LOG               *
*                                                          *
************************************************************
         SPACE 1
         CLI   LOGKW+1,2           NOLOG
         BE    NOLOG
         CLI   EXPSW,X'FF'         WAS EXPDT CHANGED
         BE    NOLOG               NO, BRANCH
         MVC   MSGW(LOGL),LOG
         L     R1,16
         L     R1,0(,R1)
         L     R1,4(,R1)
         L     R1,12(,R1)          TIOT
         LA    R15,MSGW+21
         MVC   0(8,R15),0(R1)      INSERT JOBNAME/USERID IN MESSAGE
         LA    R15,7(,R15)         POINT TO LAST BYTE OF JOBNAME
         CLI   0(R15),C' '
         BNE   *+8
         BCT   R15,*-8
         MVC   2(44,R15),DSNAME
         LA    R15,45(,R15)        POINT TO LAST BYTE OF DSNAME
         CLI   0(R15),C' '
         BNE   *+8
         BCT   R15,*-8
         MVC   2(2,R15),=C'ON'
         AH    R1,40(,R3)          DCBTIOT
         L     R1,16(,R1)          TIOEFSRT-1, PTR TO UCB
         MVC   5(6,R15),28(R1)     UCBVOLI
         MVC   12(5,R15),EXPCH     NEW EXPDT
         WTO   MF=(E,MSGW)
NOLOG    B     EXIT0
         EJECT
************************************************************
*                                                          *
*        THIS ROUTINE IS ENTERED DURING THE 'CHECK' MACRO  *
*        IF AN I/O ERROR OCCURS.                           *
*                                                          *
************************************************************
         SPACE 1
SYNAD    SYNADAF ACSMETH=BDAM
         MVC   SYNADMSG(78),50(R1)
         MVI   SYNADSWT,X'FF'      INDICATE EXIT TAKEN
         SYNADRLS
         BR    R14
         EJECT
************************************************************
*                                                          *
*        CALL IKJDAIR                                      *
*                                                          *
************************************************************
         SPACE 1
CALLDAIR EQU   *
         AIF   (NOT &MVS).SKIP6
         L     R15,16              CVTPTR
         TM    X'02DC'(R15),X'80'  IF HI ORDER BIT NOT ON
         BNO   CALLDLNK               THEN DO LINK, NOT CALL
         L     R15,X'02DC'(,R15)   CVTDAIR
         BR    R15                 CALL IKJDAIR (R14 IS SET)
CALLDLNK EQU   *
.SKIP6   ANOP
         ST    R14,CALLDR14
         LINK  EP=IKJDAIR,SF=(E,LINKAREA)
         L     R14,CALLDR14
         BR    R14
         EJECT
************************************************************
*                                                          *
*        PARSE VALIDITY CHECK ROUTINE FOR 'REP' KEYWORD    *
*                                                          *
************************************************************
         SPACE 1
REPVALCK EQU   *
         DROP  R10,R11
         USING *,R6
         STM   R14,R12,12(R13)
         LR    R6,R15
         L     R7,0(,R1)           REG 7 --> PDE
         L     R4,0(,R7)           REG 4 --> CHARACTER STRING
         LH    R0,4(,R7)           REG 0  =  LENGTH
         LA    R15,4               RETURN 4 IF CHECK FAILS
         TM    5(R7),X'01'         LENGTH AN EVEN NUMBER?
         BO    VALEXIT             NO - EXIT WITH RC=4
VALLOOP  CLI   0(R4),C'0'          NUMERIC?
         BNL   VALINCR             YES - THIS CHAR OK
         CLI   0(R4),C'F'          IN RANGE A THRU F?
         BH    VALEXIT             NO - EXIT WITH RC=4
VALINCR  LA    R4,1(,R4)           POINT TO NEXT CHAR
         BCT   R0,VALLOOP
         SR    R15,R15             SET RC=0
VALEXIT  L     R14,12(,R13)
         LM    0,12,20(R13)
         BR    R14
         DROP  R6
         USING CDSCB,R10,R11
         EJECT
************************************************************
*                                                          *
*        THIS ROUTINE CONVERTS EXTERNAL HEX TO BINARY HEX  *
*                                                          *
************************************************************
         SPACE 1
PACK     ST    R14,PACK14
         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD
         SR    R14,R14
         IC    R14,0(,R1)          REG 14  =  1ST CHAR
         CLI   0(R1),C'0'          NUMBER OR LETTER
         BNL   *+8                 NUMBER - BRANCH
         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF
         SLL   R14,4               SHIFT LEFT 4 BITS
         STC   R14,0(,R15)         STORE THE LEFT HALF
         IC    R14,1(,R1)          REG 14  =  2ND CHAR
         CLI   1(R1),C'0'          NUMBER OR LETTER
         BNL   *+8                 NUMBER - BRANCH
         LA    R14,57(,R14)        LETTER - CONVERT
         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION
         SRL   R14,28              SHIFT BACK AGAIN
         STC   R14,1(,R15)         STORE RIGHT HALF
         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF
         LA    R1,2(,R1)           INCREMENT SENDING FIELD
         LA    R15,1(,R15)         INCREMENT RECEIVING FLD
         BCT   R0,PACK+6           LOOP USING LENGTH IN REG 0
         L     R14,PACK14
         BR    R14                 EXIT
         SPACE 1
         SPACE 1
************************************************************
*                                                          *
*  UNPACK - CONVERT A FIELD TO HEXADECIMAL.                *
*  REG 1 --> INPUT   REG 15 --> OUTPUT                     *
*  REG 0  =  INPUT LENGTH  (OUTPUT IS TWICE PLUS 1 BLANK)  *
*  REG 14 --> RETURN ADDRESS ( BAL   R14,UNPACK )          *
*                                                          *
************************************************************
         SPACE 1
UNPACK   UNPK  0(3,R15),0(2,R1)    UNPACK
         TR    0(2,R15),UNPACKT-240
         LA    R15,2(,R15)         INCREMENT OUTPUT PTR
         LA    R1,1(,R1)           INCREMENT INPUT PTR
         BCT   R0,UNPACK           DECREMENT LENGTH, THEN LOOP
         MVI   0(R15),C' '         BLANK THE TRAILING BYTE
         BR    R14                 RETURN TO CALLER
UNPACKT  DC    C'0123456789ABCDEF' TRANSLATE TABLE
         EJECT
************************************************************
*                                                          *
*        ERROR MESSAGES                                    *
*                                                          *
************************************************************
         SPACE 1
INVREP   LA    R1,INVREPM
         LA    R0,L'INVREPM
         B     ERRMSG
INVREPM  DC    C'MISSING OR INVALID REP PARAMETER'
         SPACE 1
READERR  EQU   *
WRITERR  LA    R1,SYNADMSG
         LA    R0,78
         B     ERRMSG
         SPACE 1
REPDERR  LA    R1,REPDERRM
         LA    R0,L'REPDERRM
         B     ERRMSG
REPDERRM DC    CL44'INVALID REP - REP LENGTH EXCEEDS VER LENGTH '
         SPACE 1
REPOERR  LA    R1,REPOERRM
         LA    R0,40
         B     ERRMSG
REPOERRM DC    CL40'REP OFFSET INVALID - MUST BE AT LEAST 2D'
         SPACE 1
REPVERR  LA    R1,REPVERRM
         LA    R0,L'REPVERRM
         B     ERRMSG
REPVERRM DC    CL32'REP GOES BEYOND END OF RECORD   '
         SPACE 1
VERREJ   LA    R1,VERREJM
         LA    R0,L'VERREJM
         B     ERRMSG
VERREJM  DC    CL14'VERIFY REJECT '
         SPACE 1
LOCERR   LA    R1,LOCERRM
         LA    R0,L'LOCERRM
         B     ERRMSG
LOCERRM  DC    CL22'DATASET NOT IN CATALOG'
         SPACE 1
DAIRERR  BAL   R14,DAIRFAIL
         B     EXIT12
         SPACE 1
AUTHERR  LA    R1,AUTHERRM
         LA    R0,L'AUTHERRM
         B     ERRMSG
AUTHERRM DC    C'ENVIRONMENT IS NOT APF AUTHORIZED'
         SPACE 1
OPENERR  LA    R1,OPENERRM
         LA    R0,L'OPENERRM
         B     ERRMSG
OPENERRM DC    CL12'OPEN FAILED '
         SPACE 1
PARSERR  LA    R1,PARSERRM
         LA    R0,L'PARSERRM
         B     ERRMSG
PARSERRM DC    C'PARSE FAILED'
         SPACE 1
ERRCDATE LA    R1,CDATERRM
         LA    R0,L'CDATERRM
         B     ERRMSG
CDATERRM DC    C'INVALID CREATE DATE'
         SPACE 1
ERRXDATE LA    R1,XDATERRM
         LA    R0,L'XDATERRM
         B     ERRMSG
XDATERRM DC    C'INVALID EXPIRATION DATE'
         SPACE 1
ERRRDATE LA    R1,RDATERRM
         LA    R0,L'RDATERRM
         B     ERRMSG
RDATERRM DC    C'INVALID REFERENCE DATE'
         SPACE 1
ERRDSN   LA    R1,MSGDSN
         LA    R0,L'MSGDSN
ERRMSG   BAL   R14,PUTMSG
         B     EXIT12
MSGDSN   DC    C'DATA SET NAME MUST NOT CONTAIN MEMBER NAME'
         SPACE 1
************************************************************
*                                                          *
*        PUTMSG ROUTINE                                    *
*                                                          *
************************************************************
         SPACE 1
PUTMSG   STM   R14,R1,PUTSAVE
         XC    MYOLD(8),MYOLD
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPM
         LA    R14,1               NO. OF MESSAGE SEGMENTS
         ST    R14,MYOLD
         LA    R14,MYSEG1          POINT TO 1ST SEGMENT
         ST    R14,MYOLD+4
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         LA    R15,MYSEG1+4
         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?
         BE    *+16                YES - BRANCH
         LA    R14,1(,R14)         ADD 1 TO LENGTH
         MVI   0(R15),C' '         INSERT LEADING BLANK
         LA    R15,1(,R15)         BUMP POINTER
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE 1
         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))
         SPACE 1
         LM    R14,R1,PUTSAVE
         BR    R14
         SPACE 1
************************************************************
*                                                          *
*        PUTLINE ROUTINE                                   *
*                                                          *
************************************************************
         SPACE 1
PUTLINE  STM   R14,R1,PUTSAVE
         XC    MYSEG1(4),MYSEG1
         MVC   MYPTPB(12),MODLPTPB
         LR    R14,R0              LENGTH IN R0
         LA    R14,4(,R14)         ADD 4
         STH   R14,MYSEG1
         LR    R14,R0
         BCTR  R14,0
         B     *+10
         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN
         EX    R14,*-6
         LA    R1,MYIOPL
         L     R15,MYPUTLEP
         SPACE 1
         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))
         SPACE 1
         LM    R14,R1,PUTSAVE
         BR    R14
         SPACE 1
         PRINT GEN
         EJECT
************************************************************
*                                                          *
*        DYNAMIC ALLOCATION FAILURE ROUTINE                *
*                                                          *
************************************************************
         SPACE 1
DAIRFAIL ST    R14,MYDFREGS
         LA    R1,MYDFPARM
*        USING DFDSECTD,R1         MAPPED BY IKJEFFDF DFDSECT=YES MACRO
         ST    R15,MYDFRC
         LA    R15,MYDFRC
         ST    R15,4(,R1)          DFRCP
         LA    R15,MYDAPL
         ST    R15,0(,R1)          DFDAPLP
         SLR   R15,R15
         ST    R15,MYJEFF02
         LA    R15,MYJEFF02
         ST    R15,8(,R1)          DFJEFF02
         LA    R15,1               DFDAIR
         STH   R15,MYDFID
         LA    R15,MYDFID
         ST    R15,12(,R1)         DFIDP
         ST    R2,16(,R1)          DFCPPLP
         LINK  EP=IKJEFF18,SF=(E,LINKAREA)
         L     R15,MYDFRC
*        DROP  R1                  DFDSECTD
         L     R14,MYDFREGS
         BR    R14
         SPACE 1
         EJECT
************************************************************
*                                                          *
*        CLOSE THE VTOC                                    *
*                                                          *
************************************************************
         SPACE 1
EXIT12   LA    R15,12
         B     EXIT
EXIT0    SR    R15,R15             RETURN CODE ZERO
EXIT     ST    R15,RC
         TM    STATUS,STATQ        IS ENQ ACTIVE
         BZ    EXITNODQ            NO, SKIP DEQ
         MVC   DW(DL),D            MOVE MF=L TO WORK AREA
         SPACE 1
         DEQ   (QNAME,RNAME,6,SYSTEMS),RET=HAVE,MF=(E,DW)
         SPACE 1
         NI    STATUS,255-STATQ    DEQ
EXITNODQ EQU   *
         TM    STATUS,STATO        IS DCB OPEN
         BZ    EXITNOCL            NO, SKIP CLOSE
         FREEBUF (R3),(R4)
         SPACE 1
         MVC   CLOSED,CLOSE
         CLOSE ((R3)),MF=(E,CLOSED)
         NI    STATUS,255-STATO    CLOSED
EXITNOCL EQU   *
         SPACE 1
         TM    STATUS,STATG        WAS GETPOOL ISSUED
         BZ    EXITNOFP            NO, SKIP FREEPOOL
         FREEPOOL (R3)
         NI    STATUS,255-STATG    CLOSED
EXITNOFP EQU   *
         SPACE 1
************************************************************
*                                                          *
*        INSTALLATION-DEPENDENT CODE                       *
*        TO UNDO THE EARLIER INSTALLATION-DEPENDENT CODE   *
*                                                          *
************************************************************
         SPACE 1
         L     1,16                CVTPTR
         L     1,0(,1)             TCB WORDS
         L     1,4(,1)             CURRENT TCB
         L     4,180(,1)           JSCB
         TM    STATUS,STATM        WAS AUTH CHANGED
         BZ    EXITNOMS            NO, BRANCH
         LA    0,0                 R0 = FUNCTION CODE FOR USER SVC
         LA    15,KEYUA            R15 POINTS TO ROUTINE TO BE CALLED
USRSVC2  NOPR  0                   *** REPLACE WITH USER SVC ***
         B     KEYUB               BRANCH AROUND THE ROUTINE
KEYUA    NI    236(4),X'FE'        SET OFF JSCBAUTH
         BR    14                  RETURN TO SVC
KEYUB    NI    STATUS,255-STATM
EXITNOMS EQU   *
         SPACE 1
************************************************************
*                                                          *
*        UNALLOCATE VIA DYNAMIC ALLOCATION                 *
*                                                          *
************************************************************
         SPACE 1
         TM    STATUS,STATA        WAS ALLOCATE DONE
         BZ    EXITNOFR            NO, BYPASS FREE
         LA    R1,MYDAPL
         USING DAPL,R1
         L     14,DAPLECB
         XC    0(4,14),0(14)
         L     15,DAPLDAPB
         DROP  R1
         USING DAPB18,15
         XC    0(40,15),0(15)
         MVI   DA18CD+1,X'18'
         MVC   DA18MNM,=CL8' '
         MVI   DA18DPS2,DA18KEEP
         MVI   DA18CTL,X'00'
         MVC   DA18SCLS(2),=CL8' '
         MVC   DA18JBNM(8),=CL8' '
         MVC   DA18DDN(8),DCBDDNAM
         SPACE 1
         BAL   R14,CALLDAIR
         NI    STATUS,255-STATA
EXITNOFR EQU   *
         SPACE 1
************************************************************
*                                                          *
*        FINAL EXIT FROM PROGRAM                           *
*                                                          *
************************************************************
         SPACE 1
         IKJRLSA MYANS
         CLI   RC+3,0              IS RC ZERO?
         BE    STACKDX             YES, BRANCH
         MVC   MYSTPB(STACKDL),STACKD
         SPACE 1
         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)
         SPACE 1
         TCLEARQ
STACKDX  EQU   *
         SPACE 1
         L     R15,RC
         LR    R1,R13
         L     R0,SIZE
         L     R13,4(0,R13)       R13 -> TO CALLERS SAVE AREA       RH
         LR    R2,R15
         FREEMAIN R,A=(1),LV=(0)
         LR    R15,R2
*        RETURN (14,12),RC=(15)
*        L     R15,RETCODE        LOAD RC
*        L     R13,4(R13)         R13 -> TO CALLERS SAVE AREA
         L     R14,12(R13)        SET R14 TO WHAT CALLER'S R14
         LM    R0,R12,20(R13)     SET R0-R12 TO CALLERS REGS
*              GET INTO PROPER MODE AND GO BACK TO CALLER
         BSM   0,R14              RETURN TO CALLING PROGRAM
         SPACE 1
************************************************************
*                                                          *
*        CONSTANTS                                         *
*                                                          *
************************************************************
         SPACE 1
         LTORG
         SPACE 1
*              THE BYTES IN THE FOLLOWING TABLE
*              MUST BE IN THE SAME ORDER AS THE
*              'IKJNAME' ENTRIES IN THE PARSE
*              PCL PARAMETERS.
RECFMTAB DC    X'00'              NO RECFM
         DC    X'80'               F
         DC    X'88'               FS
         DC    X'84'               FA
         DC    X'82'               FM
         DC    X'90'               FB
         DC    X'98'               FBS
         DC    X'94'               FBA
         DC    X'92'               FBM
         DC    X'40'               V
         DC    X'48'               VS
         DC    X'44'               VA
         DC    X'42'               VM
         DC    X'50'               VB
         DC    X'58'               VBS
         DC    X'54'               VBA
         DC    X'52'               VBM
         DC    X'C0'               U
         DC    X'C4'               UA
         DC    X'C2'               UM
         DC    X'E0'               UT
DSORGTAB DC    X'00'
         DC    X'40'               PS
         DC    X'41'               PSU
         DC    X'02'               PO
         DC    X'03'               POU
         DC    X'20'               DA
         DC    X'21'               DAU
         SPACE 1
MODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE 1
MODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L
         SPACE 1
ENDOFREC DC    0H'0',AL2(44+96-1) OFFSET TO LAST BYTE OF RECORD
         PRINT GEN                 LIST DCB SO LIMCT CAN BE ZAPPED
         SPACE 1
DCBMODEL DCB   DDNAME=DYNAM,DSORG=DA,MACRF=(RKC,WKC),                  X
               BUFL=96,OPTCD=EF,LIMCT=57,                              X
               RECFM=F,BLKSIZE=96,KEYLEN=44,                           X
               EXLST=0,SYNAD=SYNAD
DCBLEN   EQU   *-DCBMODEL
         PRINT GEN
         SPACE 1
RDJFCB   RDJFCB 0,MF=L
         SPACE 1
OPENJ    OPEN  0,TYPE=J,MF=L
         SPACE 1
CLOSE    CLOSE 0,MF=L
         SPACE 1
READ     READ  DECBMODR,DKF,0,'S','S',0,0,MF=L
READL    EQU   *-DECBMODR
         SPACE 1
WRITE    WRITE  DECBMODW,DK,0,'S','S',0,0,MF=L
WRITEL   EQU   *-DECBMODW
         SPACE 1
STAXDEF  STAX  DEFER=YES,MF=L
         SPACE 1
STAXDEN  STAX  DEFER=NO,MF=L
         SPACE 1
R        RESERVE (77,88,E,6,SYSTEMS),RET=HAVE,UCB=99,MF=L
RL       EQU   *-R
         SPACE 1
D        DEQ   (77,88,6,SYSTEMS),RET=HAVE,MF=L
DL       EQU   *-D
         SPACE 1
LOG      WTO   'CMI000I CDSCB BY                                       +
                                                 ',ROUTCDE=(2),MF=L
LOGL     EQU   *-LOG
*        WTO   'CMI000I CDSCB BY UUUUUUUU TO DSNAME78901234567890123456
*              789012345678901234 ON VVVVVV EEEEE',ROUTCDE=(2),MF=L
         SPACE 1
STACKD   STACK DELETE=ALL,MF=L
STACKDL  EQU   *-STACKD
PCLADDR  DC    0D'0'               END OF CSECT, BEGIN PARSE PCL CSECT
         SPACE 1
************************************************************
*                                                          *
*         PARSE PCL CSECT AND PDL DSECT                    *
*                                                          *
************************************************************
         PRINT NOGEN
         SPACE 1
CDSCBPCL IKJPARM
         AIF   (NOT &MVS).SKIP7
DSN      IKJPOSIT DSNAME,USID,PROMPT='DATASET NAME'
.SKIP7   AIF   (&MVS).SKIP8
DSN      IKJPOSIT DSNAME,PROMPT='DATA SET NAME'
.SKIP8   ANOP
SHRKW    IKJKEYWD
         IKJNAME 'SHR'
VOLKW    IKJKEYWD
         IKJNAME 'VOLUME',SUBFLD=VOLSUB
UNIKW    IKJKEYWD
         IKJNAME 'UNIT',SUBFLD=UNISUB
ZAPKW    IKJKEYWD
         IKJNAME 'ZAP',SUBFLD=ZAPSUB
RECKW    IKJKEYWD
         IKJNAME 'RECFM',SUBFLD=RECSF
LREKW    IKJKEYWD
         IKJNAME 'LRECL',SUBFLD=LRESF
BLKKW    IKJKEYWD
         IKJNAME 'BLKSIZE',SUBFLD=BLKSF
DSOKW    IKJKEYWD
         IKJNAME 'DSORG',SUBFLD=DSOSF
PROKW    IKJKEYWD
         IKJNAME 'PW'
         IKJNAME 'PWREAD'
         IKJNAME 'PWWRITE'
         IKJNAME 'NOPW'
         IKJNAME 'RACF'
         IKJNAME 'NORACF'
ALLKW    IKJKEYWD
         IKJNAME 'ALLOC',SUBFLD=ALLSF
SPAKW    IKJKEYWD
         IKJNAME 'SPACE',SUBFLD=SPASF
CREATEKW IKJKEYWD
         IKJNAME 'CREATE',SUBFLD=CRESF
EXPDTEKW IKJKEYWD
         IKJNAME 'EXPDT',SUBFLD=EXPSF
REFDTEKW IKJKEYWD
         IKJNAME 'REFDT',SUBFLD=REFSF
LOGKW    IKJKEYWD
         IKJNAME 'LOG'
         IKJNAME 'NOLOG'
CHBIT    IKJKEYWD                        ,                          RH
         IKJNAME 'CHBIT',SUBFLD=CHBSF    ,                          RH
*
*              SUBFIELDS
*
VOLSUB   IKJSUBF
VOL      IKJIDENT 'VOLUME',FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,    X
               PROMPT='VOLUME SERIAL'
UNISUB   IKJSUBF
UNIT     IKJIDENT 'UNIT',FIRST=ALPHANUM,OTHER=ANY,MAXLNTH=8,           +
               PROMPT='UNIT NAME'
ZAPSUB   IKJSUBF
REP      IKJIDENT 'ZAP PARAMETER',LIST,                                +
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=12,               +
               PROMPT='ZAP IN FORMAT OFFSET,VERDATA,REPDATA',          +
               VALIDCK=REPVALCK
CHBSF    IKJSUBF                  ,                                 RH
BACKBIT  IKJKEYWD                 ,                                 RH
         IKJNAME 'ON'             ,                                 RH
         IKJNAME 'OFF'            ,                                 RH
*                                                                   RH
RECSF    IKJSUBF
RECFM    IKJKEYWD
         IKJNAME 'F'
         IKJNAME 'FS'
         IKJNAME 'FA'
         IKJNAME 'FM'
         IKJNAME 'FB'
         IKJNAME 'FBS'
         IKJNAME 'FBA'
         IKJNAME 'FBM'
         IKJNAME 'V'
         IKJNAME 'VS'
         IKJNAME 'VA'
         IKJNAME 'VM'
         IKJNAME 'VB'
         IKJNAME 'VBS'
         IKJNAME 'VBA'
         IKJNAME 'VBM'
         IKJNAME 'U'
         IKJNAME 'UA'
         IKJNAME 'UM'
         IKJNAME 'UT'
LRESF    IKJSUBF
LRE      IKJIDENT 'LRECL',                                             +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +
               PROMPT='LOGICAL RECORD LENGTH'
BLKSF    IKJSUBF
BLK      IKJIDENT 'BLOCK SIZE',                                        +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +
               PROMPT='BLOCK SIZE'
DSOSF    IKJSUBF
DSORG    IKJKEYWD
         IKJNAME 'PS'
         IKJNAME 'PSU'
         IKJNAME 'PO'
         IKJNAME 'POU'
         IKJNAME 'DA'
         IKJNAME 'DAU'
ALLSF    IKJSUBF
ALL      IKJKEYWD
         IKJNAME 'NONE'
         IKJNAME 'BLOCKS'
         IKJNAME 'TRACKS'
         IKJNAME 'CYLINDERS'
SPASF    IKJSUBF
SPA      IKJIDENT 'SECONDARY SPACE AMOUNT',                            +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=4,                  +
               PROMPT='SECONDARY SPACE AMOUNT'
CRESF    IKJSUBF
CREATE   IKJIDENT 'CREATION DATE',ASTERISK,                            +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +
               PROMPT='CREATION DATE'
EXPSF    IKJSUBF
EXPDTE   IKJIDENT 'EXPIRATION DATE',ASTERISK,                       RH +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +
               PROMPT='EXPIRATION DATE'
REFSF    IKJSUBF
REFDTE   IKJIDENT 'REFERENCE DATE',ASTERISK,                           +
               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=5,                  +
               PROMPT='REFERENCE DATE'
         IKJENDP
         SPACE 1
         LTORG
         SPACE 1
************************************************************
*                                                          *
*        DSECTS                                            *
*                                                          *
************************************************************
         PRINT GEN
         SPACE 1
@DATA    DSECT
         DS    18F
SIZE     DS    F
LINKAREA DS    2F
STATUS   DS    F
STATA    EQU   X'80'
STATM    EQU   X'40'
STATG    EQU   X'20'
STATO    EQU   X'10'
STATQ    EQU   X'08'
STATNA   EQU   X'04'              NOT AUTH'D                        RH
MYPPL    DS    8F                                                   RH
MYANS    DS    F
MYECB    DS    F                   USED BY PUTLINE ROUTINE
MYIOPL   DS    4F                  USED BY PUTLINE ROUTINE
MYPTPB   DS    3F                  USED BY PUTLINE ROUTINE
MYPUTLEP DS    F                   USED BY PUTLINE ROUTINE
MYOLD    DS    2F                  USED BY PUTLINE ROUTINE
MYSEG1   DS    2H,CL100            USED BY PUTLINE ROUTINE
PUTSAVE  DS    4F                  USED BY PUTLINE ROUTINE
MYSTPB   DS    5F
MYDAPL   DS    5F
MYDAPB   DS    21F
CALLDR14 DS    F
DSNAMEL  DS    H
DSNAME   DS    CL44
RW       DS    4F
QNAME    DS    CL8
RNAME    DS    CL6
UCBAD    DS    F
DW       DS    3F
DEVAREA  DS    5F
TRACKS   DS    H
SYNADMSG DS    0CL78
MSGW     DS    CL100
SYNADSWT DS    C
CHANGED  DS    C
EXPSW    DS    C
EXPCH    DS    CL5
NEWPROSW DS    C
NEWPRO0  DS    C
NEWPRO1  DS    C
NEWPROSV DS    C
NEWBLKSW DS    C
NEWLRESW DS    C
NEWBLK   DS    H
NEWLRE   DS    H
NEWALLSW DS    C
NEWALL0  DS    C
NEWALL1  DS    C
NEWSPASW DS    C
NEWSPA   DS    F
NEWCRESW DS    C
NEWEXPSW DS    C
NEWREFSW DS    C
NEWCRE   DS    F
NEWEXP   DS    F
NEWREF   DS    F
NEWRECSW DS    C
NEWRECFM DS    C
NEWDSOSW DS    CL2
NEWDSORG DS    C
NEWCHBSW DS    C
NEWCHB0  DS    C
NEWCHB1  DS    C
NEWCHBSV DS    C
TTR      DS    D
OPEND    DS    F
OPENJD   DS    F
RDJFCBD  DS    F
READDECB DS    7F
WRITDECB DS    7F
CLOSED   DS    F
DCB      DS    0D,XL104
JFCB     DS    0D,XL176
EXLSTD   DS    F
WRKUNIT  DS    CL8
DATE5    DS    0CL5
WRKVOL   DS    CL6
OFFSET   DS    H,CL3
VERDATA  DS    CL14     LENGTH TIED TO MAXLNTH IN IKJPOSIT
REPDATA  DS    CL14     1ST BYTE IS LENGTH, LAST BYTE USED BY 'PACK'
VR       DS    C
PACK14   DS    F
EXTRACTD DS    3F
EXTRACT  DS    2F
STAXD    DS    5F
DOUBLE   DS    D
RC       DS    F
MYDFPARM DS    5F  USED BY DAIRFAIL
MYDFREGS DS    F   USED BY DAIRFAIL
MYDFRC   DS    F   USED BY DAIRFAIL
MYJEFF02 DS    F   USED BY DAIRFAIL
MYDFID   DS    H   USED BY DAIRFAIL
         DS    0D
@DATAL   EQU   *-@DATA
*                                                                   RH
 TITLE 'RACHEC - GO SEE IF THEY HAVE UPDATE ACCESS TO RESOURCE'     RH
         DS    0H                                                   RH
RACHEC   SECTION GEN=YES                                            RH
*                                                                   RH
*                                                                   RH
********************************************************************RH
*                                                                   RH
* RETRIEVE THE USERS RACF USERID AND GROUP FROM THE ACEE TO         RH
* SEE IF WE HAVE ACCESS TO GROUP SPECIAL OR OPERATNS                RH
*                                                                   RH
********************************************************************RH
*                                                                   RH
*                                                                   RH
GETUSER  DS    0H                                                   RH
         L     R15,PSAAOLD-PSA         LOAD ADDRESS OF CURRENT ASCB RH
         L     R15,ASCBASXB-ASCB(R15)  LOAD ASXB ADDRESS            RH
         L     R15,ASXBSENV-ASXB(R15)  LOAD ACEE ADDRESS            RH
         ST    R15,ACEEADDR       SAVE IT                           RH
         MVC   USRLTH(9),ACEEUSER-ACEE(R15) SAVE USERID FROM ACEE   RH
         MVC   RACGROUP(9),ACEEGRP-ACEE(R15) SAVE ACEE GROUP        RH
*                                                                   RH
         SPACE 1                                                    RH
***********************************************************************
*                                                                   RH
*  MAKE SURE WE HAVE RACF ACCESS TO GROUP/CLASS....                 RH
*                                                                   RH
***********************************************************************
         SR    R6,R6              CLEAR R6                          RH
         IC    R6,USERACC         R6 = ACCESS CODE                  RH
         LA    R7,RACGROUP+1      ADDRESS OF GROUP                  RH
         LA    R5,LTHCLAS2        ADDRESS OF CLASS                  RH
         LA    R2,ACEEUSR         ADDRESS OF USRID                  RH
         ICM   R3,15,ACEEADDR     R3 -> TO ACEE                     RH
         SPACE 1                                                    RH
ACEEOK2  DS    0H                                                   RH
*              DO RACHECK....DOESN'T NEED APF...                    RH
         LA    R4,USRDSN          ADDRESS OF RESOURCE BUFFER        RH
*        RACHECK ENTITY=((R4)),CLASS=(R5),ATTR=(6),                 RH
         RACHECK ,                                                  RH +
               ATTR=(6),          ALTER....                         RH +
               CLASS=(5),         S/B DASDVOL                       RH +
               ENTITY=((4)),      THE VOLSER IN CLASS               RH +
               LOG=NONE                                             RH
         AGO   .SKIPRTE                                             RH
*        NOTE  YOU MUST BE APF'D  TO USE RACROUTE....               RH
         LA    R4,LTHDSNB         ADDRESS OF RESOURCE BUFFER        RH
         LA    R1,RACMAC          ADDRESS OF RACROUTE LIST          RH
         RACROUTE REQUEST=AUTH,                                     RH +
               ACEE=(3),          NEEDS AC(1)                       RH +
               ATTR=(6),          WAS UPDATE                        RH +
               CLASS=(5),         S/B DASDVOL                       RH +
               ENTITYX=((4)),     THE VOLSER IN CLASS               RH +
               GROUPID=(7),                                         RH +
               RELEASE=1.9,                                         RH +
               USERID=(2),        NEEDS AC(1)                       RH +
               WORKA=RACWORK,                                       RH +
               MF=(E,(1))                                           RH
*                                                                   RH
         SPACE 1                                                    RH
.SKIPRTE ANOP                                                       RH
*        LTR   R15,R15            ARE WE OKAY?                      RH
*        BZ    RACRET             YES                               RH
*        LA    R15,4              RC = 4                            RH
RACRET   DS    0H                                                   RH
         SPACE 1                                                    RH
RACHEC9  SECEXIT GEN=YES                                            RH
         SPACE 2                                                    RH
**********************************************************************
         SPACE 2                                                    RH
         ENTRY USRCLAS2,LTHCLAS2                                    RH
LTHCLAS2 DC    X'07'              CLASS LTH                         RH
USRCLAS2 DC    CL08'DASDVOL '     CLASS                             RH
*                                                                   RH
RACGROUP DC    AL1(4),CL8'SYS1'                                     RH
         ENTRY USRDSN,LTHDSND                                       RH
         CNOP  0,4                ON FULLWORD BOUNDARY....          RH
ACEEADDR DC    F'0'                                                 RH
LTHDSNB  DC    AL2(44)            LTH OF RESOURCE BUFFER            RH
LTHDSND  DC    AL2(6)             LTH OF RESOURCE IN BUFFER         RH
USRDSN   DC    CL44'VOLSER '      RESOURCE                          RH
USERACC  DC    X'80'              USER ACCESS                       RH
*        EQU   X'02'              ACCESS=READ                       RH
*        EQU   X'04'              ACCESS=UPDATE                     RH
*        EQU   X'08'              ACCESS=CONTROL                    RH
*        EQU   X'80'              ACCESS=ALTER                      RH
*                                                                   RH
*                                                                   RH
RACWORK  DS    CL512                                                RH
WORK64   DS    CL64                64 BYTE WKA                      RH
WORK716  DS    CL716               716 BYTE WKA                     RH
USRLTH   DC    X'08'              USERID LTH                        RH
ACEEUSR  DC    CL8' '             ACEE USERID...MUST BE AFTER USRLTHRH
*                                                                   RH
RACMAC   RACROUTE REQUEST=AUTH,                                     RH +
               WORKA=RACWORK,                                       RH +
               RELEASE=1.9,                                         RH +
               MF=L                                                 RH
*                                                                   RH
*                                 OTHER RACROUTE PARMS.....         RH
*              ATTR=UPDATE,                                         RH
*              LOG=ASIS                                             RH
         LTORG                                                      RH
*                                                                   RH
         SPACE 2                                                    RH
IHADCB   DSECT
         DS    XL36
DCBEXLST DS    F
DCBDDNAM DS    XL8
DCBDEBAD EQU   *-4,4
DCBOFLGS DS    X
DCBLIMCT EQU   IHADCB+81,3
         SPACE 1
         IKJCPPL
         SPACE 2
         IKJIOPL
         SPACE 2
         IKJUPT
         SPACE 2
         IKJPSCB
         SPACE 2
         IKJECT
         SPACE 2
         IKJPPL
         SPACE 2
         IKJDAPL
         SPACE 2
         IKJDAP08
         SPACE 2
         IKJDAP18
         SPACE 2
FORMAT1  DSECT
IECSDSL1 EQU   *                   FORMAT 1 DSCB
IECSDSF1 EQU   IECSDSL1
DS1DSNAM DS    CL44                DATA SET NAME
DS1FMTID DS    CL1                 FORMAT IDENTIFIER
DS1DSSN  DS    CL6                 DATA SET SERIAL NUMBER
DS1VOLSQ DS    XL2                 VOLUME SEQUENCE NUMBER
DS1CREDT DS    XL3                 CREATION DATE
DS1EXPDT DS    XL3                 EXPIRATION DATE
DS1NOEPV DS    XL1                 NUMBER OF EXTENTS ON VOLUME
DS1NOBDB DS    XL1                 NUMBER OF BYTES USED IN LAST
*                                     DIRECTORY BLOCK
         DS    XL1                 RESERVED
DS1SYSCD DS    CL13                SYSTEM CODE
DS1REFD  DS    XL3                 DATE LAST REFERENCED OR    @G60ASBJ
*                                     ZERO IF NOT MAINTAINED  @G60ASBJ
         DS    XL4                 RESERVED                   @G60ASBJ
DS1DSORG DS    XL2                 DATA SET ORGANIZATION
DS1RECFM DS    XL1                 RECORD FORMAT
DS1OPTCD DS    XL1                 OPTION CODE
DS1BLKL  DS    XL2                 BLOCK LENGTH
DS1LRECL DS    XL2                 RECORD LENGTH
DS1KEYL  DS    XL1                 KEY LENGTH
DS1RKP   DS    XL2                 RELATIVE KEY POSITION
DS1DSIND DS    XL1                 DATA SET INDICATORS
DS1IND80 EQU   X'80'               LAST VOLUME ON WHICH A DATA@G60ASBJ
*                                  SET RESIDES                @G60ASBJ
DS1IND40 EQU   X'40'               DATA SET IS RACF DEFINED   @G60ASBJ
DS1IND20 EQU   X'20'               BLOCK LENGTH IS A MULTIPLE @G60ASBJ
*                                  OF 8 BYTES                 @G60ASBJ
DS1IND10 EQU   X'10'               PASSWORD IS REQUIRED TO    @G60ASBJ
*                                  READ OR WRITE OR BOTH-SEE  @G60ASBJ
*                                  DS1IND04                   @G60ASBJ
DS1IND08 EQU   X'08'               RESERVED                   @G60ASBJ
DS1IND04 EQU   X'04'               IF DS1IND10 IS 1 THEN IF   @G60ASBJ
*                                  DS1IND04 IS . . .          @G60ASBJ
*                                  1-PASSWORD REQUIRED TO     @G60ASBJ
*                                  WRITE BUT NOT TO READ      @G60ASBJ
*                                  0-PASSWORD REQUIRED TO     @G60ASBJ
*                                  WRITE AND TO READ          @G60ASBJ
DS1IND02 EQU   X'02'               DATASET OPENED FOR OTHER   @G60ASBJ
*                                  THAN INPUT SINCE LAST      @G60ASBJ
*                                  BACKUP COPY MADE.          @G60ASBJ
DS1DSCHA EQU   DS1IND02            SAME USE AS BIT DS1IND02   @G60ASBJ
DS1IND01 EQU   X'01'               RESERVED                   @G60ASBJ
DS1SCALO DS    XL4                 SECONDARY ALLOCATION
DS1LSTAR DS    XL3                 LAST USED TRACK AND BLOCK ON TRACK
DS1TRBAL DS    XL2                 BYTES REMAINING ON LAST TRACK USED
         DS    XL2                 RESERVED
DS1EXT1  DS    XL10                FIRST EXTENT DESCRIPTION
*        FIRST BYTE                EXTENT TYPE INDICATOR
*        SECOND BYTE               EXTENT SEQUENCE NUMBER
*        THIRD - SIXTH BYTES       LOWER LIMIT
*        SEVENTH - TENTH BYTES     UPPER LIMIT
DS1EXT2  DS    XL10                SECOND EXTENT DESCRIPTION
DS1EXT3  DS    XL10                THIRD EXTENT DESCRIPTION
DS1PTRDS DS    XL5                 POSSIBLE PTR TO A FORMAT 2 OR 3 DSCB
DS1END   EQU   *
         SPACE 1                                                    RH
         REQUATE                                                    RH
         IHAPSA                                                     RH
         IHAACEE                                                    RH
         IHAASCB                                                    RH
         IHAASXB                                                    RH
         SPACE 3                                                    RH
* DUMMY JFCB                                                        RH
JFCBD    DSECT                                                      RH
         IEFJFCBN ,                                                 RH
         END
/*
//LKED.SYSLMOD DD DSN=IMSVS.AUTHLIB1,DISP=SHR
//LKED.SYSIN DD *
    SETCODE AC(1)
    NAME CDSCB(R)
/*
//
