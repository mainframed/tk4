//DAYDATE  JOB
/*ROUTE PRINT R7
//*
//*    DSN=CBT.SOURCE(DAYDATE)
//*
//S EXEC HLASMCL,PARMC='NOALIGN,NORLD',CLASS='*',COND.LKED=(7,LT,ASM)
//ASM.SYSIN DD *
DAYDATE   TITLE 'TIME OF DAY AND DATE SUBROUTINE.'
         PRINT ON,GEN,DATA
*                                                                   Y2
*              MODIFIED  BY R. HALL, DIVERSIFIED DEVELOPMENTS,      Y2
*              JAN 06 1997, TO SHOW 4 DIGIT YEAR FOR YEAR 2000      Y2
*              CHANGES FOR YEAR 2000 HAVE Y2 IN COLS 69-70          Y2
*
*              MODIFIED BY R. HALL, DIVERSIFIED DEVELOPMENTS,
*              JUL 23, 1991, TO   ACCEPT A JULIAN DATE PASSED IN
*              POSITION 1 OF THE TIMEDATE FIELD.
*
*              CORRECTED BY R. HALL, DIVERSIFIED DEVELOPMENTS,
*              OCT 10, 1987,      CHANGE TO ONLY ASSEMBLER TYPE CALL.
*
*              CORRECTED BY R. HALL, DIVERSIFIED DEVELOPMENTS,
*              MAY 11, 1987,      TO WORK EVEN BETTER.
*
*              CORRECTED BY R. HALL, DIVERSIFIED DEVELOPMENTS,
*              DECEMBER 31, 1985, TO WORK PROPERLY!
*
*
*        THIS VERSION OF DAYDATE IS RE-ENTRANT. IT WILL ONLY
*        RUN ON A 370 BECAUSE OF BYTE ALIGNMENT AND EXISTENCE OF THE
*        TIME-OF-DAY CLOCK.
*
*
*        DAYDATE IS AN ASSEMBLER SUBROUTINE WHICH WILL PLACE IN THE
*        40 BYTE AREA PROVIDED BY THE CALLER THE IPL DATE AND CURRENT
*        TIME, IN EBCDIC, AS:
*
*                   HH.MM.SS YYYY.DDD  DAY DD MON YYYY              Y2
*
*        THE SIGNIFICANT FEATURE OF THIS ROUTINE, IS THAT THE EXACT
*        DAY OF THE WEEK (SUNDAY THROUGH SATURDAY) IS RETURNED AS
*        PART OF THE GREGORIAN FORM DATE.(9 CHARACTERS IN THIS VERSION)
*
*
*
*  * * * DAYDATE ALSO SUPPORTS THE TIME-OF-DAY CLOCK OF S/370. * * *
*
*        A SECOND PARAMETER PASSED TO DAYDATE IMPLIES TOD CLOCK
*        PROCESSING IS REQUIRED.  ONE OF TWO MANIPULATIONS WILL
*        BE PERFORMED, DETERMINED BY THE CONTENTS OF THE 8 BYTE
*        FIELD PASSED TO DAYDATE, AS THE SECOND PARAMETER:
*
*        1. A BINARY ZERO FILLED FIELD ON INPUT WILL CONTAIN THE
*           CURRENT TOD CLOCK VALUE ON OUTPUT, AND THIS VALUE WILL
*           HAVE BEEN USED TO CALCULATE THE TIME AND DATE INSERTED
*           INTO THE 40 BYTE FIRST PARAMETER. UF A SECOND PARAMETER
*           IS NOT PASSED THE PROGRAM PUTS THE TOD VALUE IN THE
*           40 BYTE AREA AS A WORK.
*
*        2. A NON-ZERO FIELD IS ASSUMED TO BE A VALID TOD CLOCK
*           VALUE, AND THIS VALUE IS USED TO CALCULATE THE TIME
*           AND DATE RETURNED IN THE 40 BYTE FIRST PARAMETER.
         EJECT
*
*
*
*
*
*  * * * EXAMPLE INVOCATION OF THIS ROUTINE:
*
*        (A)  FROM PL/I:
*
*
*             DCL  TIMEDATE  CHAR (40),
*
*                  1  TOD_CLOCK,
*                     2  SECONDS FIXED BINARY (31,0),
*                     2  MIC_SEC FIXED BINARY (31,0);
*
*
*             TIMEDATE = ' ';           /* SIGNAL CURRENT DATE REQD */
*             CALL DAYDATE(TIMEDATE);
*
*             TOD_CLOCK = 0B;
*             CALL DAYDATE(TIMEDATE,SECONDS);
*             /* NOTE SCALER (SECONDS), NOT STRUCTURE (TOD_CLOCK) ARG*/
*
*
*
*
*
*        (B)  FORTRAN
*
*
*             INTEGER*4  DATE(10), TOD(2)/0,0/
*
*             CALL DAYDATE(DATE,TOD)
*
*             CALL DAYDATE(DATE)
*
*
         EJECT
DAYDATE  CSECT
DAYDATE  AMODE 24                 WAS 31
DAYDATE  RMODE 24                 WAS ANY
         ENTRY DAYDAT
DAYDAT   DS    0H
         USING *,R15              SET TEMP BASE
         B     AROUND             BRANCH AROUND DUMP TITLE
         DC    AL1(EYELTH)
EYECATCH DC    C'DAYDATE '        PROGRAM NAME
         DC    C'VERSION 3.0 '    VERSION                           Y2
         DC    C'&SYSDATE'        DATE WRITTEN
         DC    C' '               BLANK
         DC    C'&SYSTIME'        TIME WRITTEN
         DC    C' CHANGE JULIAN OUTPUT TO 4 CHARS FOR YEAR 2000'    Y2
*        DC    C' CREATE ALPHABETIC DATE MSG, VERSION 2'
EYELTH   EQU   *-EYECATCH         LTH OF EYE CATCHER
         SPACE 1
AROUND   DS    0H
*        USING *,R15
START    SR    R15,R15                  SIGNAL NON-PL/1 ENTRY
         DROP  R15
         LA    R1,0(0,R1)         CLEAR HI-ORDER BYTE FOR 31 BIT
         LA    R13,0(0,R13)       CLEAR HI-ORDER BYTE FOR 31 BIT
         BSM   R14,0              SAVE CURRENT AMODE
         STM   R14,R10,12(R13)          SAVE CALLER'S REGS
         BALR  R10,0                    EST. BASE REG
         USING *,R10,R9
         LA    R9,4095(0,R10)     SET 2ND BASE REG...
         LA    R9,1(0,R9)         ''
*        ST    R13,SAVE+4         CHAIN SAVE AREAS
*        LA    R3,SAVE            ''
*        ST    R3,8(0,R13)        CHAIN SAVE AREAS
*        LA    R13,SAVE           ''
         USING DDSECT,R13               BASE FOR DOUBLE WORD WORK AREA
*                                       IS 2ND & 3RD WORD OF SAVE AREA
*
*
*        ANALYSE PARAMETER LIST PASSED IN R1  (PARM)
*
*
         L     R3,0(R1)                 GET PTR TO FIRST ARGUMENT
         USING FELDMASK,R3
         SPACE 1
         TM    0(R1),X'80'              IS FRST ARG LAST?
         BZ    TODCLOCK                 NO - XTRA ARG FOR TOD CLOCK
         SPACE 1
         CLI   TIMEDATE,C' '      IS A DATE SUPPLIED?
         BE    NODATE             NO
         TM    TIMEDATE+3,X'0F'   IS IT A PACKED FIELD?
         BNO   NODATE             NO
         SR    R0,R0              YES, SET TIME TO ZERO
         L     R1,TIMEDATE        PUT JULIAN DATE IN R1
         MVC   TIMEDATE(4),=CL4' ' CLEAR TIMEDATE
         LR    R4,R1              R4 = JULIAN DATE
         SRL   R4,24              R4 = CENTURY
*        ST    R4,DOUBLE
*        PACK  DOUBLE+4(2),DOUBLE+3(4)
*        SR    R1,R1                    CLEAR R1                    Y2
*        IC    R1,SAVETIME+8            R1 = CENTURY FROM YYYY      Y2
         SLL   R4,4                     MULT BY 16                  Y2
         LA    R4,15(R4)                ADD SIGN                    Y2
         XC    DOUBLE(8),DOUBLE         CLEAR DOUBLE                Y2
         ST    R4,DOUBLE+4              STORE YEAR                  Y2
         CVB   R4,DOUBLE                GET YEARS IN CENTURY        Y2
         ST    R4,CENTURY               SAVE CENTURY                Y2
*        MVC   CENTURY+3(1),DOUBLE+4 SET CENTURY
         SR    R4,R4              CLEAR R4
*        LA    R4,DOUBLE                POINT TO AREA IN 1ST PARAM
         B     GOTTIME            GO CONVERT IT...
         SPACE 1
NODATE   DS    0H
         LA    R4,DOUBLE                POINT TO AREA IN 1ST PARAM
         B     TOD3               SINCE STCK CODE DOESN'T WORK      RH
*        B     TOD2                                                 RH
         SPACE 1
GOTTIME  DS    0H
         STM   R0,R1,DOUBLE             PLACE TIME & DATE IN WORKAREA
         STM   R0,R1,DOUBLE2      SAVE DATE FOR LEAP TEST TOO       RH
         ST    R1,SAVEJUL         SAVE DATE                         RH
         SPACE 1
         OI    DOUBLE+3,X'0F'           MAKE TIME A VALID PACKED DEC NO
         MVO   DOUBLE(4),DOUBLE(3)      NOW HAVE "0H HM MS S+"
         MVI   HHMMSS,C' '              BLANK OUT OUTPUT FIELD
         MVC   HHMMSS+1(39),HHMMSS      ''
         ED    TIMEPTRN(10),DOUBLE      EDIT THE TIME TO "  HH.MM.SS"
         MVC   0(8,R3),TIMEPTRN+2       SHIFT STRING TO START OF FIELD
         MVI   HHMMSS+8,X'40'           BLANK OUT EXTRA FIELD
*
NOTIME   DS    0H
         ED    DATEMASK(9),DOUBLE+4     EDIT THE JULIAN DATE        Y2
         MVC   YYYYDDD,DATEMASK+1       PUT JULIAN DATE IN OUTPUT   Y2
*
******** ***** ****************** **********
         LA    R8,4                     OFFSET TO LEAP YEAR ENTRIES
*
         LA    R4,DOUBLE2+4       R4 -> AT CC IN CCYY
         CLI   DOUBLE2+5,X'00'    IS IT A CENTURY?
         BE    LEAPCENT           YES
         LA    R4,DOUBLE2+5       R4 -> AT YY IN CCYY
*
LEAPCENT DS    0H
*
*        TEST FOR LEAP YEAR
*
*        NI    DOUBLE2+5,X'13'     EXTRACT BITS FOR TESTING YEAR FOR
         NI    0(R4),X'13'         EXTRACT BITS FOR TESTING YEAR FOR
*                                  DIVISIBILITY BY 4
         BZ    LEAPYEAR            DIVISIBLE - EVEN HIGH DIGIT
*        XI    DOUBLE2+5,X'12'     TEST FOR DIVIDE BY 4- ODD HIGH DIGIT
         XI    0(R4),X'12'         TEST FOR DIVIDE BY 4- ODD HIGH DIGIT
         BZ    LEAPYEAR            DIVISIBLE - ODD HIGH DIGIT
         LA    R8,6               OFFSET TO NON-LEAP YEAR ENTRIES
*
LEAPYEAR DS    0H
*
MYCODE   DS    0H
*        SR    R1,R1                    CLEAR FOR WORK
*        IC    R1,DOUBLE+5              SAVE YEAR
*        SLL   R1,4                     MULT BY 16
*        LA    R1,15(R1)                ADD SIGN
         XC    DOUBLE(6),DOUBLE         CLEAR DOUBLE
         CVB   R0,DOUBLE                GET DAYS IN BINARY
         C     R0,=F'366'         *IF #  OF DAYS > 366
         BH    BADDATE                  YES REPORT ERROR.
         ST    R0,SAVEDAY         STORE DAY OF YEAR
*        ST    R1,DOUBLE+4              STORE YEAR
*        CVB   R1,DOUBLE                GET YEARS IN CENTURY
*
FINDMON  EQU   *
*        ST    R1,DOUBLE                PLACE BINARY YEAR OF CENTURY
         AGO   .SKIP1
**       ST    R1,ZYEAR           SAVE YEAR FOR ZELLER'S CONGRUENCE
*
*        L     R3,ZYEAR           *LOAD FOR WEEKDAY CALC'N          CUL
         SR    R0,R0              *CALC                             CUL
         D     R0,=F'4'           *  YY MOD(4)                      CUL
         LA    R4,DAYTAB-4        *ASSUME NOT LEAP YEAR             CUL
         LTR   R0,R0              *REMAINDER (YY/4) ^= 0            CUL
         BNZ   *+8                *  =>  NOT LEAP YEAR              CUL
         LA    R4,DAYTABLP-4      *  ELSE LOAD LEAP YEAR DAY TABLE  CUL
         SPACE 1                                                    CUL
         LA    R2,8               *OFFSET OF FEB IN DAYS TABLE      CUL
         L     R5,SAVEDAY         R5 = DAY OF YEAR                  RH
GETMON1  DS    0H                                                   RH
         C     R5,0(R2,R4)        *# DAYS < OR = ENTRY IN TABLE     CUL
         BNH   GETDAY             *  => HAVE FOUND MONTH+1          CUL
         LA    R2,4(,R2)          *  ELSE GO CHECK                  CUL
         B     GETMON1            *    NEXT ENTRY                   CUL
         SPACE 1                                                    CUL
GETDAY   S     R2,=F'4'           *BACKUP 1 MONTH                   CUL
         S     R5,0(R2,R4)        *CALCULATE DAY OF MONTH           CUL
*        ST    R5,ZDAY            *  & SAVE FOR LATER               CUL
         SRL   R2,2               *CONVERT INDEX TO MONTH           CUL
*        ST    R2,ZMONTH          *  AND SAVE IT                    CUL
         SPACE 1                                                    CUL
*        TM    DOUBLE+3,X'03'           IS IT A LEAP YEAR (DIVISIBLE 4)
*        BC    7,NOTLEAP                ^0 => NOT LEAP
*        LA    R8,4                     0 => LEAP YR.  RESET TABLE OFST
.SKIP1   ANOP
*
NOTLEAP  DS    0H
*        L     R0,SAVEDAY         R0 = DAY OF YEAR AGAIN            RH
         LA    R5,LASTDAY-4             SET PTR FOR LAST DAY PROCESSING
         CH    R0,0(R8,R5)              IS DAY OF YEAR TOO HIGH?
         BH    BADDATE                  YES REPORT ERROR.
         LA    R5,12                    12 MONTHS / YEAR
         MVC   YEAR,YYYYDDD       EBCDIC YYYY FIELD REQD AT END TOO Y2
         LA    R2,LASTMON               GET ADDR OF EBCDIC MONTH TABLE
*
PREVMON  CH    R0,0(R8,R2)              IS   DAY OF YEAR IN THIS MONTH
         BH    FOUNDMON                 YES -
         LA    R2,8(0,R2)               NO - CHECK PREVIOUS MONTH
         BCT   R5,PREVMON
*
BADDATE  MVC   DAY(13),=C'INVALID DATE ' MOVE "INVALID DATE" MESSAGE IN
         LA    R15,16
         B     EXIT
         EJECT
*
*
*
FOUNDMON DS    0H
         LR    R6,R0                    SAVE DAY OF YEAR
*        ST    R5,MONTH           SAVE MTH FOR ZELLER'S CONGRUENCE
         SH    R0,0(R8,R2)              CALC DAY OF MONTH
*        ST    R0,ZDAY            SAVE DAY FOR ZELLER'S CONGRUENCE
         CVD   R0,DOUBLE                CONVERT DAY OF MONTH TO DEC
         ED    DDMASK(4),DOUBLE+6       EDIT THE DAY                Y2
         MVC   DD(2),DDMASK+2           SAVE THE DAY                Y2
*
MOVEMON  MVC   MON,0(R2)                MOVE IN EBCDIC MONTH
*
**********************************************************************
*                                                                    *
*        CALCULATE DAY OF WEEK USING T.F. WONG'S FORMULA             *
*        SEE HTTP://WWW/ASIAONLIN.NET.HK/~TFWONG/MATHS.HTM
*                                                                    *
*        DAY OF WEEK
*
*                     Y - 1        Y - 1        Y - 1
*   S = (Y - 1) + INT(-----) - INT(-----) + INT(-----) + D
*                       4           100          400
*
*        WHERE: 1) ALL OPERATIONS ARE DONE USING INTEGER ARITH
*               2) D = JULIAN DAY OF YEAR
*               3) Y = YEAR
*
*   AFTER CALCULATING THE VALUE S, DIVIDE IT BY 7, AND GET THE
*   REMAINDER. IF THE REMAINDER IS 0, THE DAY IS SUNDAY, IF IT IS 1,
*   THE DAY IS MONDAY, ..., IF IT IS 6, THE DAY IS SATURDAY.
*
*        R1 : ACCUMULATOR
*
**********************************************************************
*
*              GET YEAR
*
         SR    R4,R4              CLEAR R4
         L     R5,SAVEJUL         R5 = JULIAN DATE
         SRL   R5,16              DROP DAY
         SLL   R5,4               LEFT 4 BITS
         LA    R5,15(0,R5)        ADD SIGN
         XC    DOUBLE,DOUBLE      CLEAR DWORD
         ST    R5,DOUBLE+4        SAVE IT
         CVB   R5,DOUBLE          CONVERT TO BINARY
         BCTR  R5,0               -1
         LR    R1,R5              S STARTS WITH YEAR-1
*
*              GET (YEAR-1)/4
*
         SR    R6,R6              CLEAR R6
         LR    R7,R5              R7 = Y-1
         D     R6,=F'4'           CALC IF LEAP YEAR
         AR    R1,R7              ADD IT TO S
*
*              GET (YEAR-1)/100
*
         SR    R6,R6              CLEAR R6
         LR    R7,R5              R7 = Y-1
         D     R6,=F'100'
         SR    R1,R7              SUBTRACT IT FROM S
*
*              GET (YEAR-1)/400
*
         SR    R6,R6              CLEAR R6
         LR    R7,R5              R7 = Y-1
         D     R6,=F'400'
         AR    R1,R7              ADD IT TO S
*
*              GET JULIAN DAY OF YEAR
*
         SR    R6,R6              CLEAR R6
         L     R7,SAVEJUL         R7 = JULIAN DATE
         SLL   R7,16              DROP YEAR
         SRL   R7,16              ''
         XC    DOUBLE,DOUBLE      CLEAR DWORD
         ST    R7,DOUBLE+4        SAVE IT
         CVB   R7,DOUBLE          CONVERT TO BINARY
         AR    R1,R7              ADD IT TO S
*
*              DIVIDE S BY 7
*
         SR    R4,R4              CLEAR R4
         LR    R5,R1              R5 = ??
         D     R4,=F'7'           CALC WEEKS IN YEAR
*
*              GET DAY OF WEEK BASED ON REMAINDER IN R4
*
         MH    R4,=H'9'           R4 -> TO WEEK DAY
         LA    R5,WEEKDAYS(R4)          GET DAY OF WEEK
SETDAY   MVC   DAY,0(R5)                MOVE EBCDIC DAY TO FIELD
*
         LA    R15,0                    SIGNAL NORMAL RETURN
*
EXIT     DS    0H
         L     R14,12(0,R13)      R14 -> TO CALLER'S R13
         LM    R0,R10,20(R13)     SET R0-R10 TO CALLERS REGS
         OI    15(13),X'01'       SAY WE ARE FINISHED WITH SAVEAREA
*              GET INTO PROPER MODE AND GO BACK TO CALLER
         BSM   0,R14              RETURN TO CALLING PROGRAM
         EJECT
*
*
*        A SECOND ARGUMENT HAS BEEN RECEIVED, IMPLYING TOD CLOCK
*        PROCESSING IS REQUIRED.
*
TODCLOCK L     R4,4(R1)                 GET PTR TO 2ED ARG
         NC    0(8,R4),0(R4)            TOD VALUE SUPPLIED BY USER?
         BNZ   CONVERT                  YES - AVOID STCK
         SPACE 1
TOD2     STCK  0(R4)                    GET CURRENT TOD CLOCK VALUE.
         BZ    CONVERT                  CLOCK OPERATIVE? ... YES
         SPACE 1
         LA    R15,8                    NO - WARN USER
*                                                                   Y2
*
*/*       SVC INVOCATIONS                                            */
*/*         THE TIME OF DAY IS RETURNED IN R0 FOR DEC, BIN, AND      */
*/*         TU. FOR MIC AND STCK, THE TIME OF DAY IS RETURNED        */
*/*         IN THE SPECIFIED ADDRESS.                                */
*/*         THE DATE IS RETURNED IN R1 AS PACKED DECIMAL IN THE      */
*/*         FORM CCYYDDDF, WHERE:                                    */
*/*              CC  - IS THE CENTURY                                */
*/*              YY  - IS THE LAST TWO DIGITS OF THE YEAR            */
*/*              DDD - IS THE DAY OF THE YEAR                        */
*/*              F   - ALLOWS FOR UNPACKING                          */
*/*                                                                  */
*/*       PC INVOCATIONS                                             */
*/*         THE TIME OF DAY IS RETURNED TO THE FIRST TWO WORDS OF    */
*/*         A USER SPECIFIED FOURWORD AREA.  THE DATE IS RETURNED    */
*/*         TO THE THIRD WORD IN DECIMAL FORMAT (NOT PACKED DECIMAL) */
*/*         IN THE FORMS GIVEN BELOW.                                */
*
*
TOD3     DS    0H                                                   RH
         TIME  DEC,SAVETIME,            GET THE SYS TIME            Y2 +
               LINKAGE=SYSTEM,DATETYPE=YYYYMMDD     IN THIS CASE    Y2
         SR    R1,R1                    CLEAR R1                    Y2
         IC    R1,SAVETIME+8            R1 = CENTURY FROM YYYY      Y2
         SLL   R1,4                     MULT BY 16                  Y2
         LA    R1,15(R1)                ADD SIGN                    Y2
         XC    DOUBLE(8),DOUBLE         CLEAR DOUBLE                Y2
         ST    R1,DOUBLE+4              STORE YEAR                  Y2
         CVB   R1,DOUBLE                GET YEARS IN CENTURY        Y2
         ST    R1,CENTURY               SAVE CENTURY                Y2
         TIME  DEC                      GET THE SYS TIME IN R0-R1
         ST    R1,DOUBLE                SAVE R1                     Y2
         MVC   DOUBLE(1),SAVETIME+8     CHANGE 00YY TO YYYY         Y2
         L     R1,DOUBLE                RELOAD R1                   Y2
         B     GOTTIME                  GO WITH O.S. TIME & DATE
*
SAVETIME DC    XL16'00'                                             Y2
*
*
CONVERT  L     R7,0(R4)                 HI-ORD WORD OF TOD CLOCK
*
* DROP HIGH ORDER BIT, WHICH IS 11.56.54, MAY 11, 1971              RH
*
         N     R7,=XL4'7FFFFFFF'        CLEAR HIGH ORDER BIT
*
*              CONVERT FROM TIMER UNITS TO SECONDS, WHERE
*              1 TIMER UNIT IS 1.048576 SECONDS.
*
         M     R6,D16384                CONVERT FROM 1.048576 MIC-SEC
         D     R6,D15625                DIVIDE TO GET SECONDS
*
* CALCULATE NUMBER OF DAYS SINCE 11.56.54, MAY 11, 1971             RH
*
         XR    R6,R6                    CLEAR REMAINDER
*
* WE HAVE CUT OFF HIGH BIT IN CLOCK WORD WHICH IS MAY 11 11.56.54   RH
* SO ADD 11.56.54 BACK IN SECONDS                                   RH
*
         A     R7,=A(11*3600+56*60+54)
         D     R6,D86400                DIV BY SEC/DAY TO GET DAY #
         LR    R4,R6                    SAVE REM. SEC FOR TIME CALC
         XR    R6,R6
         D     R6,D1461                 DIV # DAYS BY #DAYS IN 4 YEARS
         LR    R5,R7                    SAVE # 4 YEAR BLOCKS
         SRDL  R6,32
         D     R6,D365            GET # YEARS SINCE LEAP YEAR
*                                 IN R7 AND DAY OF YEAR IN R6       RH
*
* WE HAVE CUT OFF HIGH BIT IN CLOCK WORD WHICH IS MAY 11 11.56.54   RH
* SO ADD DAYS UP TO MAY 11 (130)  TO DAY OF YEAR                    RH
*
         LA    R6,130(0,R6)                                         RH
         CH    R6,=H'365'         OVER 365?                         RH
         BNH   DAYOK              NO                                RH
         SH    R6,=H'365'         YES, SUBT 365 AND                 RH
         LA    R7,1(0,R7)         ADD 1 TO THE YEAR                 RH
         SPACE 1                                                    RH
DAYOK    DS    0H                                                   RH
         LA    R7,71(R7)                1971 IS FIRST YR OF CLOCK
         SLL   R5,2               NBR YRS = 4(NBR 4 YR BLKS)
         AR    R7,R5
*
*        PLACE RESULT JULIAN DATE IN REG 1 TO SIMULATE TIME MACRO.
*
SETR1    SR    R1,R1                    CLEAR REG
         MH    R7,D10                   FROM X'072+' TO X'720+'
         CVD   R7,DOUBLE
         ICM   R1,4,DOUBLE+6            R1 = X'00720000'
         CVD   R6,DOUBLE                CVD DAY OF YEAR
         ICM   R1,3,DOUBLE+6            R1 = X'0072DDD+'
         EJECT
*
*
*
*        CONVERT SECONDS TO HHMMSS AND PLACE IN REG 0 LIKE TIME MACRO.
*
         SR    R0,R0                    CLEAR RESULT REG
         LR    R7,R4                    GET SAVED # SEC
         SR    R6,R6
         D     R6,D3600                 CALC # HOURS (3600 SEC/HR)
         MH    R7,D10
         CVD   R7,DOUBLE                PACK # HOURS
         ICM   R0,8,DOUBLE+6            R0 = P'HH000000'
         SRDL  R6,32                    SECONDS LEFT OVER (ABOVE HRS)
         D     R6,D60                   CALC # MIN  (60 SEC/MIN)
         MH    R7,D10
         CVD   R7,DOUBLE                PACK # MIN
         ICM   R0,4,DOUBLE+6            R0 = P'HHMM0000'
         MH    R6,D10
         CVD   R6,DOUBLE                PACK # SECONDS
         ICM   R0,2,DOUBLE+6            R0 = P'HHMMSS00'
         B     GOTTIME
*
*
DOUBLE   DC    D'0'
DOUBLE2  DC    D'0'                                                 RH
SAVE     DS    18F
SAVE05   DS    6F
CENTURY  DC    F'19'                    PROGRAM ASSUMES 1900
D16384   DC    F'16384'
D15625   DC    F'15625'
D86400   DC    F'86400'
D366     DC    F'366'
D1461    DC    F'1461'
D365     DC    F'365'
D3600    DC    F'3600'
D60      DC    F'60'
D10      DC    F'10'
*
*ZYEAR   DC    F'0'
*ZMONTH  DC    F'0'
*ZDAY    DC    F'0'
*
*MONTH   DC    F'0'
*MONTH1  DC    F'0'
*WEEKDAY DC    F'0'
*WEEKDAYA DC    A(WEEKDAYS)
SAVEDAY  DC    F'0'
SAVEJUL  DC    F'0'
*
WEEKDAYS EQU   *
*        DC    CL9'      '
         DC    CL9'SUNDAY'
         DC    CL9'MONDAY'
         DC    CL9'TUESDAY'
         DC    CL9'WEDNESDAY'
         DC    CL9'THURSDAY'
         DC    CL9'FRIDAY'
         DC    CL9'SATURDAY'
*
LASTDAY  DC    H'366'                   NUMBER OF DAYS IN LEAP YEAR
         DC    H'365'                   NUMBER OF DAYS IN NON-LEAP YEAR
LASTMON  DC    C'DEC '
         DC    H'335'             JULIAN DEC 1 IF NOT A LEAP YEAR
         DC    H'334'             JULIAN DEC 1 IF     A LEAP YEAR
         DC    C'NOV '
         DC    H'305'
         DC    H'304'
         DC    C'OCT '
         DC    H'274'
         DC    H'273'
         DC    C'SEP '
         DC    H'244'
         DC    H'243'
         DC    C'AUG '
         DC    H'213'
         DC    H'212'
         DC    C'JUL '
         DC    H'182'
         DC    H'181'
         DC    C'JUN '
         DC    H'152'
         DC    H'151'
         DC    C'MAY '
         DC    H'121'
         DC    H'120'
         DC    C'APR '
         DC    H'91'
         DC    H'90'
         DC    C'MAR '
         DC    H'60'
         DC    H'59'
         DC    C'FEB '
         DC    H'31'
         DC    H'31'
         DC    C'JAN '
         DC    H'0'
         DC    H'0'
*
*
         AGO   .SKIP2
DAYTAB   DC    F'0'               *DAYS IN YEAR TABLE FOR NORMAL YEACUL
         DC    F'31'                                                CUL
         DC    F'59'                                                CUL
         DC    F'90'                                                CUL
         DC    F'120'                                               CUL
         DC    F'151'                                               CUL
         DC    F'181'                                               CUL
         DC    F'212'                                               CUL
         DC    F'243'                                               CUL
         DC    F'273'                                               CUL
         DC    F'304'                                               CUL
         DC    F'334'                                               CUL
         DC    F'365'                                               CUL
DAYTABLP DC    F'0'               *DAYS IN YEAR TABLE FOR LEAP YEAR CUL
         DC    F'31'                                                CUL
         DC    F'60'                                                CUL
         DC    F'91'                                                CUL
         DC    F'121'                                               CUL
         DC    F'152'                                               CUL
         DC    F'182'                                               CUL
         DC    F'213'                                               CUL
         DC    F'244'                                               CUL
         DC    F'274'                                               CUL
         DC    F'305'                                               CUL
         DC    F'335'                                               CUL
         DC    F'366'                                               CUL
         AGO   .SKIP2
.SKIP2   ANOP
*
TIMEPTRN DC    X'402120204B20204B2020'                              Y2
DATEMASK DC    X'40212020204B202020'                                Y2
*        DC    C'  '
         DS    CL8                                                  Y2
DDMASK   DC    X'40212020'                                          Y2
         DC    C' '                                                 Y2
         DS    CL1                                                  Y2
*        DS    CL3                                                  Y2
         DC    C' 19'
         AGO   .YEARO
*
*              COMMON YEARS, 1995  - 2050
*
YEARTAB1 DS    0H
         DC    CL30'1998 2026 2009 2037 2015 2043 '
TAB1OFF  EQU   *-YEARTAB1
INDXTAB1 DC    XL12'040707030501030602040702'
LINDTAB1 EQU   *-INDXTAB1
*
         DC    CL30'1999 2027 2010 2038 2021 2049 '
         DC    XL12'050101040602040703050103'
*
         DC    CL30'2005 2033 2011 2039 2022 2050 '
         DC    XL12'060202050703050104060204'
*
         DC    CL30'2019 2047 2002 2030 2013 2041 '
         DC    XL12'020505010306010407020507'
*
         DC    CL30'1997 2025 2003 2031 2014 2042 '
         DC    XL12'030606020407020501030601'
*
         DC    CL30'1995 2023 2006 2034 2017 2045 '
         DC    XL12'070303060104060205070305'
*
         DC    CL30'2001 2029 2007 2035 2018 2046 '
         DC    XL12'010404070205070306010406'
*
*
*              LEAP YEARS, 1996  - 2048
*
YEARTAB2 DS    0H
         DC    CL10'2012 2040 '
TAB2OFF   EQU    *-YEARTAB2
INDXTAB2 DC    XL12'070304070205070306010406'
LYRTAB2  EQU   *-YEARTAB2
LINDTAB2 EQU   *-INDXTAB2
*
         DC    CL10'2016 2044 '
         DC    XL12'050102050703050104060204'
*
         DC    CL10'2020 2048 '
         DC    XL12'030607030501030602040702'
*
         DC    CL10'1996 2024 '
         DC    XL12'010405010306010407020507'
*
         DC    CL10'2000 2028 '
         DC    XL12'060203060104060205070305'
*
         DC    CL10'2004 2032 '
         DC    XL12'040701040602040703050103'
*
         DC    CL10'2006 2036 '
         DC    XL12'020506020407020501030601'
*
*              COMMON YEARS, 1800 - 2078
*
YEARTAB1 DS    0H
         DC    C'1801 1829 1857 1885 1914 1942 197O 1998 2026 2054 '
         DC    C'1807 1835 1863 1891 1925 1953 1981 2009 2037 2065 '
         DC    C'1818 1646 1874 1903 1931 1959 1987 2015 2043 2071 '
NBRYEAR1 EQU   (*-YEARTAB1)/5
TAB1OFF  EQU   *-YEARTAB1
INDXTAB1 DC    XL12'040707030501030602040702'
LINDTAB1 EQU   *-INDXTAB1
*
         DC    C'1802 1830 1858 1886 1915 1943 1971 1999 2027 2055 '
         DC    C'1813 1841 1869 1897 1926 1954 1982 2010 2038 2066 '
         DC    C'1819 1847 1975 1909 1937 1965 1993 2021 2049 2077 '
         DC    XL12'050101040602040703050103'
*
         DC    C'1803 1831 1859 1887 1921 1949 1977 2005 2033 2061 '
         DC    C'1814 1842 1870 1898 1927 1955 1983 2011 2039 2067 '
         DC    C'1825 1853 1881 1910 1938 1966 1994 2022 2050 2078 '
         DC    XL12'060202050703050104060204'
*
         DC    C'1805 1833 1861 1889 1907 1935 1963 1991 2019 2047 '
         DC    C'1811 1839 1867 1895 1918 1946 1974 2002 2030 2058 '
         DC    C'1822 1850 1878 1901 1929 1957 1985 2013 2041 2069 '
         DC    XL12'020505010306010407020507'
*
         DC    C'1800 1823 1851 1879 1913 1941 1869 1997 2025 2053 '
         DC    C'1806 1834 1862 1890 1919 1947 1975 2003 2031 2059 '
         DC    C'1817 1845 1873 1902 1930 1958 1966 2014 2042 2070 '
         DC    XL12'030606020407020501030601'
*
         DC    C'1809 1837 1865 1893 1911 1939 1967 1995 2023 2051 '
         DC    C'1815 1843 1871 1899 1922 1950 1978 2006 2034 2062 '
         DC    C'1826 1854 1882 1905 1933 1961 1989 2017 2045 2073 '
         DC    XL12'070303060104060205070305'
*
         DC    C'1810 1838 1866 1894 1917 1945 1973 2001 2029 2057 '
         DC    C'1821 1849 1877 1900 1923 1951 1979 2007 2035 2062 '
         DC    C'1827 1855 1883 1906 1934 1962 1990 2018 2046 2074 '
         DC    XL12'010404070205070306010406'
*
*              LEAP YEARS, 1804  - 2068
*
YEARTAB2 DS    0H
         DC    C'1804 1832 1860 1888 1928 1956 1984 2012 2040 2068 '
NBRYEAR2 EQU   (*-YEARTAB2)/5
TAB2OFF  EQU   *-YEARTAB2
INDXTAB2 DC    XL12'070304070205070306010406'
LYRTAB2  EQU   *-YEARTAB2
LINDTAB2 EQU   *-INDXTAB2
*
*
         DC    C'1808 1836 1864 1892 1904 1932 1960 1988 2016 2044 '
         DC    XL12'050102050703050104060204'
*
         DC    C'1812 1840 1868 1896 1908 1936 1964 1992 2020 2048 '
         DC    XL12'030607030501030602040702'
*
         DC    C'1816 1844 1872 1912 1940 1968 1996 2024 2024 2052 '
         DC    XL12'010405010306010407020507'
*
         DC    C'1820 1848 1976 1916 1944 1972 2000 2028 2028 2056 '
         DC    XL12'060203060104060205070305'
*
         DC    C'1824 1852 1880 1920 1948 1976 2004 2032 2032 2060 '
         DC    XL12'040701040602040703050103'
*
         DC    C'1828 1856 1884 1924 1952 1980 2008 2036 2036 2064 '
         DC    XL12'020506020407020501030601'
*
*
*              DAY OF MONTH TO DAY OF WEEK TABLE
*
*              DAY OFFSET = REMAINDER OF DAY-OF-MONTH/7
*
         DS    0H
DAYTABOF DC    AL2(LDAYTAB)
DAYTAB1  DS    0H
         DC    1CL9'         '    FOR OFFSET 0.....
         DC    CL45'MONDAY   TUESDAY  WEDNESDAYTHURSDAY FRIDAY   '
         DC    CL18'SATURDAY SUNDAY   '
LDAYTAB  EQU   *-DAYTAB1
*
DAYTAB2  DS    0H
         DC    1CL9'         '    FOR OFFSET 0.....
         DC    CL45'TUESDAY  WEDNESDAYTHURSDAY FRIDAY   SATURDAY '
         DC    CL18'SUNDAY   MONDAY   '
*
DAYTAB3  DS    0H
         DC    1CL9'         '    FOR OFFSET 0.....
         DC    1CL9'WEDNESDAY'
         DC    CL45'THURSDAY FRIDAY   SATURDAY SUNDAY   MONDAY   '
         DC    CL09'TUESDAY  '
*
DAYTAB4  DS    0H
         DC    1CL9'         '    FOR OFFSET 0.....
         DC    CL45'THURSDAY FRIDAY   SATURDAY SUNDAY   MONDAY   '
         DC    CL18'TUESDAY  WEDNESDAY'
*
DAYTAB5  DS    0H
         DC    1CL9'         '    FOR OFFSET 0.....
         DC    CL45'FRIDAY   SATURDAY SUNDAY   MONDAY   TUESDAY  '
         DC    CL18'WEDNESDAYTHURSDAY '
*
DAYTAB6  DS    0H
         DC    1CL9'         '    FOR OFFSET 0.....
         DC    CL45'SATURDAY SUNDAY   MONDAY   TUESDAY  WEDNESDAY'
         DC    CL18'THURSDAY FRIDAY   '
*
DAYTAB7  DS    0H
         DC    1CL9'         '    FOR OFFSET 0.....
         DC    CL45'SUNDAY   MONDAY   TUESDAY  WEDNESDAYTHURSDAY '
         DC    CL18'FRIDAY   SATURDAY '
*
DAYTABA  DS    0H
*        DC    1CL9'         '    FOR OFFSET 0.....
*        DC    5CL9'MONDAY   TUESDAY  WEDNESDAYTHURSDAY FRIDAY   '
*        DC    5CL9'SATURDAY SUNDAY   MONDAY   TUESDAY  WEDNESDAY'
*        DC    5CL9'THURSDAY FRIDAY   SATURDAY SUNDAY   MONDAY   '
*        DC    5CL9'TUESDAY  WEDNESDAYTHURSDAY FRIDAY   SATURDAY '
*        DC    5CL9'SUNDAY   MONDAY   TUESDAY  WEDNESDAYTHURSDAY '
*        DC    5CL9'FRIDAY   SATURDAY SUNDAY   MONDAY   TUESDAY  '
*        DC    1CL9'WEDNESDAY'
*
.YEARO   ANOP
         LTORG
*
*              FELDMASK OVERLAYS THE 40 BYTE WORKAREA PASSED TO US
*              BY THE CALLING PROGRAM
*
FELDMASK DSECT
TIMEDATE DS    0C
HHMMSS   DS    CL8
         DS    CL1                                                  Y2
YYYYDDD  DS    CL8                                                  Y2
         DS    CL2
DAY      DS    CL9
         DS    CL1
DD       DS    CL2
         DS    CL1
MON      DS    CL3
         DS    CL1                                                  Y2
YEAR     DS    CL4                                                  Y2
*
DDSECT   DSECT
         DS    16F    RESERVE FOR PLI
*
*        STANDARD EQUATES AND REGISTER USAGE
*
*
R0       EQU   0                        BINARY DAY OF YEAR OR DAY OF MO
R1       EQU   1                        BINARY YEAR OF CENTURY
R2       EQU   2                        PTR TO EBCDIC MONTH
R3       EQU   3
R4       EQU   4                        WORK REGISTER
R5       EQU   5                        BINARY MONTH OF YEAR
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10                       PGM BASE REG
R11      EQU   11
R12      EQU   12
R13      EQU   13                       SAVE AREA PTR
R14      EQU   14                       RETURN ADDRESS
R15      EQU   15                       RETURN CODE REGISTER
*        EJECT
         END
/*
//*
//*
//LKED.SYSLMOD DD DSN=IMSVS.AUTHLIB1,DISP=SHR
//LKED.SYSIN DD *
*  ALIAS DAYDAT
   ENTRY DAYDATE
   SETCODE AC(1)          IF CALLED FROM AN AUTH'D LIB/MODULE
   NAME DAYDATE(R)
/*
//
