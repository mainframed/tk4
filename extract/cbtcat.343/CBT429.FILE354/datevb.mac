//DATEVB   JOB
/*ROUTE  PRINT R7
//STEP1 EXEC PGM=IEBGENER,REGION=50K
//SYSPRINT DD SYSOUT=A
//SYSIN DD DUMMY
//SYSUT2 DD DSN=&&T(SDP10),UNIT=SYSDA,DISP=(,PASS),SPACE=(TRK,(5,1,5)),
//  DCB=(RECFM=FB,LRECL=80,BLKSIZE=9440),VOL=SER=WORK01
//SYSUT1 DD *
START1   DC    F'0'                     CONTROL FIELD 1
LENGTH1  DC    F'0'                     *
TYPE1    DC    C'A'                     *
START2   DC    F'0'                     CONTROL FIELD 2
LENGTH2  DC    F'0'                     *
TYPE2    DC    C'A'                     *
START3   DC    F'0'                     CONTROL FIELD 3
LENGTH3  DC    F'0'                     *
TYPE3    DC    C'A'                     *
START4   DC    F'0'                     CONTROL FIELD 4
LENGTH4  DC    F'0'                     *
TYPE4    DC    C'A'                     *
START5   DC    F'0'                     CONTROL FIELD 5
LENGTH5  DC    F'0'                     *
TYPE5    DC    C'A'                     *
         SPACE
OPENFLGS DC    BL1'0'                   OPEN FLAGS
STRTPOS  DC    C' '                START POSITION
*        DC    C' '                START AT DATA, NOT RDW
*        DC    C'R'                START AT RDW, POS 1 IN DECIMAL
*        DC    C'H'                START AT RDW, POS 0 IN HEX
OUT1CTR  DC    F'0'                     OUT1 COUNTER
OUT2CTR  DC    F'0'                     OUT2 COUNTER
OUT3CTR  DC    F'0'                     OUT3 COUNTER
OUT4CTR  DC    F'0'                     OUT4 COUNTER
OUT5CTR  DC    F'0'                     OUT5 COUNTER
OUT6CTR  DC    F'0'                     OUT6 COUNTER
OUT7CTR  DC    F'0'                     OUT7 COUNTER
HEAD1    DC    CL74'RECORDS SPLIT TO OUT1'
HEAD2    DC    CL74'RECORDS SPLIT TO OUT2'
HEAD3    DC    CL74'RECORDS SPLIT TO OUT3'
/*
//*
//STEP2 EXEC PGM=IEBGENER,REGION=50K
//SYSPRINT DD SYSOUT=A
//SYSIN DD DUMMY
//SYSUT2 DD DSN=&&T(SDP20),UNIT=SYSDA,DISP=(SHR,PASS)
//SYSUT1 DD *
         DC    F'0'                     SELECT 1
         DC    X'80'                    CF1
         DC    111X'FF'                 *
         DC    F'12'                    CF2 CONTROL TABLE DISPLACEMENT
         DC    X'80'                    *   COMPARE CODE
         DC    111X'FF'                 *   SEARCH VALUE
         DC    F'24'                    CF3
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'36'                    CF4
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'48'                    CF5
         DC    X'80'                    *
         DC    111X'FF'                 *
         SPACE
         DC    F'0'                     SELECT 2
         DC    X'80'                    CF1
         DC    111X'FF'                 *
         DC    F'12'                    CF2
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'24'                    CF3
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'36'                    CF4
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'48'                    CF5
         DC    X'80'                    *
         DC    111X'FF'                 *
         SPACE
         DC    F'0'                     SELECT 3
         DC    X'80'                    CF1
         DC    111X'FF'                 *
         DC    F'12'                    CF2
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'24'                    CF3
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'36'                    CF4
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'48'                    CF5
         DC    X'80'                    *
         DC    111X'FF'                 *
         SPACE
*                                       SELECT 4
         DC    F'0'                     CF1
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'12'                    CF2
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'24'                    CF3
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'36'                    CF4
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'48'                    CF5
         DC    X'80'                    *
         DC    111X'FF'                 *
         SPACE
*                                       SELECT 5
         DC    F'0'                     CF1
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'12'                    CF2
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'24'                    CF3
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'36'                    CF4
         DC    X'80'                    *
         DC    111X'FF'                 *
         DC    F'48'                    CF5
         DC    X'80'                    *
         DC    111X'FF'                 *
/*
//*
//STEP3 EXEC HLASMC,PARMC='XREF(FULL)'
//ASM.SYSLIB DD
//          DD
//    DD DSN=&&T,DISP=(SHR,PASS)
//SYSIN DD *
**********************************************************************
*
*        MODIFICATIONS:
*        JULY 03, 1996...ADDED COMMENT CHECK IN INPUT VERIFY
*                        ROUTINE. COMMENTS CAN START WITH * OR /.
*
*        JUNE 24, 1996...ADDED START=HEX PARM THAT SAYS START AT
*                        OFFSET 0 AND USE HEXADECIMAL START POSITION
*                        NOTE...START=HEX MUST BE FIRST CONTROL CARD
*
**********************************************************************
*
*                    DATEVB
*
*DATEVB CAN BE USED TO SPLIT RECORDS FROM A VARIABLE LENGTH FILE
*TO A SYSOUT FILE OR TO ANOTHER VARIABLE LENGTH FILE.
*DATEVB CAN ALSO BE USED TO CREATE A FIXED LENGTH FILE FROM A
*VARIABLE LENGTH FILE.
*
*                    JCL
*
*TO EXECUTE DATEVB THE FOLLOWING JCL IS REQUIRED:
*
*//   JOBCARD
*//STEPNAME   EXEC PGM=DATEVB,REGION=60K
*//STEPLIB    DD   DSN=SYS1.USERLIB2,DISP=SHR
*//SYSPRINT   DD   SYSOUT=A
*//TAPEIN     DD   DSN=....ETC.
*//OUT1
*//OUT7
*//SYSIN      DD  *
*CONTROL CARDS
*//
*
*THE OUT1 TO OUT7 DD CARDS ARE:
*//OUT1       DD  SYSOUT=A
*//OUT2       DD  SYSOUT=A
*//OUT3       DD  SYSOUT=A
*//OUT4       DD  DSN=, UNIT=, DISP=, SPACE=, DCB=
*//OUT5       DD  ''
*//OUT6       DD  ''
*//OUT7       DD  ''
*
*FOR OUT4, OUT5, OUT6:
*DSN= ANY NAME UP TO 44 CHARACTERS LONG CONSISTING OF
*     1-8 CHARS.1-8 CHARS.ETC
*UNIT= TAPE FOR TAPE
*      USER  FOR PERMANENT DISK FILES
*      SYSDA   FOR TEMPORARY FILES
*DISP= (,CATLG) FOR PERMANENT FILES
*      (,PASS)  FOR TEMPORARY FILES
*SPACE= IS REQUIRED ONLY IF UNIT=SYSDA OR USER
*      (TRK,(NBR OF TRKS,3),RLSE)
*      NBR OF TRKS DEPENDS ON THE NUMBER OF RECORDS BEING SPLIT.
*      IF BLKSIZE=3532, THERE WILL BE 5 BLOCKS PER TRACK ON A
*      3350, SO 100 BLOCKS WOULD NEED 20 TRACKS.
*DCB=  (LRECL=REC LEN+4,BLKSIZE=(REC LEN+4)*BLK FACTOR)+4)
*      EG- IF REC LEN = 1760 AND BLK FACTOR = 2,
*      LRECL=1764,BLKSIZE=3532
*      IF RECFM IS LEFT OFF OUT4 - OUT6 DCB'S, IT WILL
*      DEFAULT TO THE RECFM OF THE INPUT FILE.
*
*FOR OUT7:
*DCB=  (RECFM=FB,LRECL=REC LEN,BLKSIZE=REC LEN*BLK FACTOR)
*      THE VB FILE IS REBLOCKED TO THE REC LEN SPECIFIED IN
*      THE LRECL=. IF THE FB LRECL IS LARGER THAN THE VB LRECL,
*      THE FB RECORD IS PADDED WITH BLANKS.
*
*
*                    CONTROL CARDS
*
*DATEVB IS CONTROLLED BY THE FOLLOWING CONTROL CARDS:
*INPUT=TAPEIN,CONTROL=(CF1 CONTROL DATA,....CF5 CONTROL DATA)
*OUTPUT=OUT1,OUT2,.....OUT7
*START=HEX
*START=RDW
*SELECT=OUT1,CF1=
*HEAD1=
*HEAD2=
*HEAD3=
*
*THE INPUT= STATEMENT IS USED TO SET UP THE SELECTION CRITERIA
*FOR THE 1 TO 5 CONTROL FIELDS.
*
*THE OUTPUT= STATEMENT DETERMINES WHICH OF THE 7 OUTPUT
*FILES WILL BE USED.
*
*THE START=HEX STATEMENT INDICATES THAT THE SEARCH STARTS
*              AT OFFSET 0(THE RECORD LENGTH FIELD) AND THAT
*              THE START POSITION IS IN HEXADECIMAL.
*
*THE START=RDW STATEMENT INDICATES THAT THE SEARCH STARTS
*              AT OFFSET 0(THE RECORD LENGTH FIELD) AND THAT
*              THE START POSITION IS IN DECIMAL.
*
*IF  START=RDW OR START=HEX IS NOT SPECIFIED, THE SEARCH
*              STARTS AT OFFSET 5(THE RECORD DATA) AND THE
*              START POSITION IS IN DECIMAL.
*
*THE SELECT= STATEMENT IS USED TO DETERMINE WHICH OUTPUT
*FILE WILL RECEIVE THE DATA SELECTED BY THE SPECIFIED 1
*TO 5 CONTROL FIELDS.
*
*THE HEAD1= STATEMENT IS USED TO CHANGE THE DEFAULT HEADING
*ON THE OUT1 LISTING.
*
*THE HEAD2= STATEMENT IS USED TO CHANGE THE DEFAULT HEADING
*ON THE OUT2 LISTING.
*
*THE HEAD3= STATEMENT IS USED TO CHANGE THE DEFAULT HEADING
*ON THE OUT3 LISTING.
*
*THE FOLLOWING RESTRICTIONS MUST BE OBSERVED:
*
*OUT1, OUT2, OUT3 CAN ONLY BE SYSOUT=A FILES.
*
*OUT4, OUT5, OUT6 CAN ONLY BE VB FILES ON TAPE OR DISK.
*
*OUT7 CAN ONLY BE AN FB FILE ON TAPE OR DISK.
*
*ON THE OUTPUT= CARD, THE OUT'S MUST BE IN SEQUENCE.
*
*
*THERE CAN BE 1 TO 5 CONTROL FIELDS IN THE CONTROL=(START,LENGTH,TYPE)
*PARAMETER.
*
*START
*START IS THE STARTING POSITION WITHIN THE RECORD.
*IF THE START POSITION IS OUTSIDE THE LENGTH OF THE VB RECORD,
*IT IS TREATED THE SAME AS CONDITION NOT MET.
*
*LENGTH
*LENGTH IS THE NUMBER OF CHARACTERS IN THE FIELD.
*
*THE MAXIMUM LENGTH ALLOWED FOR ALPHANUMERIC FIELDS IS 111.
*
*THE MAXIMUM LENGTH ALLOWED FOR PACKED OR HEXADECIMAL FIELDS IS 16.
*
*FOR PACKED FIELDS, THE LENGTH IS THE NUMBER OF DIGITS IN THE
*FIELD, NOT THE NUMBER OF BYTES IN THE FIELD...EG...A 2 BYTE
*PACKED FIELD WILL HOLD 3 DIGITS...123C, SO THE LENGTH IS 3, NOT 2.
*TO SPECIFY A POSITIVE(+) OR A NEGATIVE(-) PACKED NUMBER, THE LAST
*DIGIT MUST CONSIST OF THE NUMBER AND A 12 OR 11 PUNCH. THIS CAN
*BE ACCOMPLISHED BY USING THE CHARACTER '{' AND THE LETTERS
*'A - I' TO DESIGNATE +0 TO +9  OR THE CHARACTER '}' AND THE
*LETTERS 'J - R' TO DESIGNATE -0 TO -9. FOR EXAMPLE, TO SELECT +1230,
*YOU WOULD CODE 123{, AND TO SELECT -1230 YOU WOULD CODE 123}. TO
*SELECT +1234 YOU WOULD CODE 123D, AND TO SELECT -1879, YOU WOULD
*CODE 187R.
*THE CORRESPONDING LETTERS FOR THE POSITIVE AND NEGATIVE NUMBERS ARE:
*     +0 = {            -0 = }
*     +1 = A            -1 = J
*     +2 = B            -2 = K
*     +3 = C            -3 = L
*     +4 = D            -4 = M
*     +5 = E            -5 = N
*     +6 = F            -6 = O
*     +7 = G            -7 = P
*     +8 = H            -8 = Q
*     +9 = I            -9 = R
*
*FOR HEXADECIMAL FIELDS, THE LENGTH IS A MULTIPLE OF 2, AS IT TAKES
*2 DIGITS TO REPRESENT 1 HEXADECIMAL DIGIT...EG...X'12' WOULD BE
*12 IN YOUR CONTROL FIELD, SO THE LENGTH IS 2, NOT 1.
*
*TYPE
*THE TYPE SPECIFIED CAN BE 1 OF THE FOLLOWING:
*'A' TO INDICATE ALPHANUMERIC DATA,
*'P' TO INDICATE PACKED DATA,
*'H' TO INDICATE HEXADECIMAL DATA.
*
*THERE CAN BE 1 TO 5 SELECT STATEMENTS FOR EACH OUT FILE.
*
*RECORDS CAN BE SELECTED ON:
*  1- ALL CONDITIONS           - CF1=ALL,...CF5=...
*  2- EQUAL CONDITIONS         - CF1=(= ),...CF5=...
*  3- GREATER THAN CONDITIONS  - CF1=(> ),...CF5=...
*  4- LESS THAN CONDITIONS     - CF1=(< ),...CF5=...
*  5- NOT EQUAL CONDITIONS     - CF1=(# ),...CF5=...
*
*THE ABILITY TO PUT A HEADING ON OUT1, OUT2, OUT3 HAS BEEN INCLUDED.
*THE CONTROL CARDS ARE:
*HEAD1=
*HEAD2=
*HEAD3=
*THE HEADINGS CAN BE 1-74 CHARACTERS LONG. IF HEADING CARDS ARE NOT
*INCLUDED, THE DEFAULTS ARE:
*   HEAD1=RECORDS SPLIT TO OUT1
*   HEAD2=RECORDS SPLIT TO OUT2
*   HEAD3=RECORDS SPLIT TO OUT3
*
*
*                         CONTROL CARDS EXAMPLE
*
*INPUT=TAPEIN,CONTROL=(1,1,A,59,6,A,72,5,P,32,2,H)
*OUTPUT=OUT1,OUT2,OUT3,OUT4,OUT7
*SELECT=OUT1,CF1=ALL
*SELECT=OUT2,CF2=(>111100)
*SELECT=OUT3,CF3=(<40406)
*SELECT=OUT4,CF3=(=40405)
*SELECT=OUT4,CF3=(=40405)
*SELECT=OUT7,CF1=ALL
*HEAD1=NEW HEADING FOR OUT1
*
*ADDITIONAL COPIES OF THIS DOCUMENTATION CAN BE OBTAINED BY LISTING
*   HALL.SOURCE.CNTL(HOWVSPLT)
*
**********************************************************************
         EJECT
ROOTSECT CSECT
         SAVE  (14,12)
         LR    R12,R15                  LOAD BASE REGISTER
         USING ROOTSECT,R12             ESTABLISH ADDRESSABILITY
         ST    R13,ROOTSAVE+4           CHAIN SAVE AREAS
         LR    R11,R13                  *
         LA    R13,ROOTSAVE             *
         ST    R13,8(R11)               *
         SPACE 2
***********************************************************************
*        CALL ROUTINE TO ANALYZE CONTROL CARDS AND TO SET UP          *
*        THE TABLES USED TO PRINT THE REPORTS                         *
***********************************************************************
         SPACE
         CALL  CTRLEDIT,(CONTROLS,SELECTS)
         SPACE 2
***********************************************************************
*        CALL ROUTINE USED TO SELECT RECORDS AND PRODUCE ALL          *
*        THE OUTPUTS                                                  *
***********************************************************************
         SPACE
         CALL  VPRINT,(CONTROLS,SELECTS)
         SPACE 2
*                                       RETURN CONTROL TO SYSTEM
         L     R13,ROOTSAVE+4           *
         RETURN (14,12),RC=0            *
         SPACE
ROOTSAVE DC    18F'0'                   REGISTER SAVE AREA
R0       EQU   0                        REGISTER EQUATES
R1       EQU   1                        *
R2       EQU   2                        *
R3       EQU   3                        *
R4       EQU   4                        *
R5       EQU   5                        *
R6       EQU   6                        *
R7       EQU   7                        *
R8       EQU   8                        *
R9       EQU   9                        *
R10      EQU   10                       *
R11      EQU   11                       *
R12      EQU   12                       *
R13      EQU   13                       *
R14      EQU   14                       *
R15      EQU   15                       *
*
*        THIS TABLE CONTAINS THE START POSITION WITHIN THE RECORD,
*        THE LENGTH OF THE FIELD AND THE TYPE OF DATA FOR CF'S
*        1 TO 5. WHEN FIRST CALLED, THE TABLE IS INITIALIZED AS
*        FOLLOWS : START = 0, LENGTH = 0, TYPE = A
*
CONTROLS DS    0F
         COPY  SDP10
*
*        THIS TABLE CONTAINS THE CF DISPLACEMENT, TYPE OF COMPARE
*        (=,<,>), AND THE VALUE TO BE TESTED FOR IN THE CONTROL FIELD.
*        THERE IS A SECTION FOR OUT1 - OUT6. EACH SECTION ALLOWS
*        FOR 5 SETS OF CONTROL FIELDS. WHEN FIRST CALLED, EACH SECTION
*        IS INITIALIZED AS FOLLOWS :
*              CF DISPLACEMENT = 0 TO 36
*              TYPE OF COMPARE = X'80'
*              VALUE = 11X'FF'
*
SELECTS  DS    0F
*                                       SELECT FOR OUT1
         COPY  SDP20
*                                       SELECT FOR OUT2
         COPY  SDP20
*                                       SELECT FOR OUT3
         COPY  SDP20
*                                       SELECT FOR OUT4
         COPY  SDP20
*                                       SELECT FOR OUT5
         COPY  SDP20
*                                       SELECT FOR OUT6
         COPY  SDP20
*                                       SELECT FOR OUT7
         COPY  SDP20
         END   ROOTSECT
/*
//*
//STEP4 EXEC HLASMC,PARMC='XREF(FULL)'
//ASM.SYSLIB DD
//          DD
//    DD DSN=&&T,DISP=(SHR,PASS)
//ASM.SYSIN DD *
         EJECT
***********************************************************************
*        E D I T   C O N T R O L   C A R D S                          *
***********************************************************************
         SPACE 2
CTRLEDIT CSECT                          NAME CSECT
         B     12+4(R0,R15)             BRANCH AROUND IDENTIFIER
         DC    C'EDIT SECTION'
A10SAVE  DS    0H
         SAVE  (14,12)                  SAVE REGISTERS
         BALR  R12,0                    LOAD BASE REGISTER
         USING *,R12                    ESTABLISH ADDRESSABILITY
         ST    R13,EDITSAVE+4           CHAIN SAVE AREAS
         LR    R11,R13                  *
         LA    R13,EDITSAVE             *
         ST    R13,8(R11)               *
         L     R5,0(0,R1)               LOAD TABLE BASE REG
         USING TABLED,R5                ESTABLISH TABLE ADDRESSABILITY
         SPACE 2
         OPEN  (INFILE,,OUTFILE,(OUTPUT)) OPEN CONTROL FILES
         SPACE
         BAL   R11,Y10SKIP1             SKIP TO NEW PAGE
         MVC   P(L'CTLHEAD),CTLHEAD     MOVE HEADING TO PRINT
         BAL   R11,Y10WSP3              PRINT, SPACE 3
         SPACE
A20READ  DS    0H
         GET   INFILE                   READ CONTROL CARD
         LR    R2,R1                    MOVE RECORD ADDRESS TO REG 2
         MVC   P(80),0(R1)              MOVE RECORD TO PRINT
         BAL   R11,Y10WSP2              PRINT, SPACE 2
         CLI   0(R2),C'*'         START WITH *?
         BE    A20READ            YES, IT'S A COMMENT
         CLI   0(R2),C'/'         START WITH /?
         BE    A20READ            YES, IT'S A COMMENT
         ST    R2,EDITSAVE        SAVE RECORD ADDRESS
         SPACE
A30      NOP   A60
A40      NOP   A50
         SPACE
         CLC   0(6,R2),INPUT            IS CONTROL = INPUT= ?
         BNE   A50                      NO, CHECK FOR OUTPUT=
         SPACE
         OI    A40+1,X'F0'              CHANGE A40 TO A BRANCH
         BAL   R11,B10INPUT             EDIT INPUT CARD
         B     A20READ                  READ NEXT CARD
         SPACE
A50      CLC   0(7,R2),OUTPUT           IS CONTROL = OUTPUT= ?
         BNE   A60                      NO, CHECK FOR SELECT=
         SPACE
         OI    A30+1,X'F0'              CHANGE A30 TO A BRANCH
         BAL   R11,C10OUT1              EDIT OUTPUT CARD
         B     A20READ                  READ NEXT CARD
         SPACE
A60      DS    0H
         CLC   0(7,R2),SELECT           IS CONTROL = SELECT=
         BNE   A70HEAD1                 NO, CHECK FOR HEADING CARDS
         SPACE
         BAL   R11,D10SLECT             EDIT SELECT CARD
         B     A20READ                  READ NEXT CARD
         SPACE
A70HEAD1 DS    0H
         CLC   0(6,R2),HD1              CONTROL = HEAD1 ?
         BNE   A70HEAD2                 NO, CHECK FOR HEAD2
         MVC   HEAD1,6(R2)              STORE OUT1 HEADING
         B     A20READ                  READ NEXT CONTROL CARD
         SPACE
A70HEAD2 DS    0H
         CLC   0(6,R2),HD2              CONTROL = HEAD2 ?
         BNE   A70HEAD3                 NO, CHECK FOR HEAD3
         MVC   HEAD2,6(R2)              STORE OUT2 HEADING
         B     A20READ                  READ NEXT CONTROL CARD
         SPACE
A70HEAD3 DS    0H
         CLC   0(6,R2),HD3              CONTROL = HEAD3 ?
         BNE   A75START                 NO, PRINT ERROR MESSAGE
         MVC   HEAD3,6(R2)              STORE OUT3 HEADING
         B     A20READ                  READ NEXT CONTROL CARD
         SPACE
A75START DS    0H
         CLC   0(9,R2),STARTRDW         CONTROL = START=RDW ?
         BNE   A76START                 NO, SEE IF START=HEX
         MVI   STRTPOS,C'R'             YES, SAY START AT RDW
         B     A20READ                  READ NEXT CONTROL CARD
         SPACE 1
A76START DS    0H
         CLC   0(9,R2),STARTHEX         CONTROL = START=HEX ?
         BNE   A80ERROR                 NO, PRINT ERROR MESSAGE
         MVI   STRTPOS,C'H'             YES, SAY START AT RDW & HEX
         B     A20READ                  READ NEXT CONTROL CARD
         SPACE 1
A80ERROR DS    0H
         MVC   P(L'CTLMS1),CTLMS1       MOVE MESSAGE TO PRINT
         BAL   R11,Y10WSP2              PRINT, SPACE 2
         B     A20READ            GET NEXT CARD
         SPACE 2
***********************************************************************
*        E N D   O F   C O N T R O L   C A R D S                      *
***********************************************************************
         SPACE 2
A90END   DS    0H
         MVC   P(L'CTLMS13),CTLMS13     MOVE MESSAGE TO PRINT
         BAL   R11,Y10WSP3              PRINT, SPACE 3
         SPACE
         CLOSE (INFILE,,OUTFILE)        CLOSE FILES
         L     R13,EDITSAVE+4           RETURN TO ROOT SEGMENT
         RETURN (14,12),RC=0            *
         EJECT
***********************************************************************
*        E D I T   I N P U T   C A R D                                *
***********************************************************************
         SPACE 2
B10INPUT DS    0H
         LA    R2,6(R2)                 ADD 6 TO RECORD ADDRESS
         CLC   0(6,R2),TAPEIN           INPUT = TAPEIN
         BE    B20CTL                   YES, CHECK FOR CONTROL=
         SPACE
         MVC   P(L'CTLMS2),CTLMS2       MVC MESSAGE TO PRINT
         B     B90ABEND                 PRINT, SPACE 1, CANCEL JOB
         SPACE
B20CTL   DS    0H
         LA    R2,7(R2)                 POINT TO CONTROL=
         CLC   0(9,R2),CONTROL          IS CONTROL = CONTROL=( ?
         BE    B30LA                    YES, STORE VALUES
         SPACE
         MVC   P(L'CTLMS3),CTLMS3       MOVE MESSAGE TO PRINT
         B     B90ABEND                 PRINT, SPACE 1, CANCEL JOB
         SPACE
B30LA    DS    0H
         LA    R10,CONTROLS             LOAD ADDRESS CONTROL TABLE
         LA    R2,9(R2)                 POINT TO START LOCATION
B40LOOP  DS    0H
         LR    R3,R2                    STORE START ADDRESS
B41      DS    0H
         CLI   0(R2),C'0'               IS DIGIT LESS THAN 0 ?
         BL    B42                      YES, CHECK FOR COMMA
         SPACE
         CLI   0(R2),C'9'               IS DIGIT GREATER THAN 9 ?
         BH    B50ERROR                 YES, GO TO ERROR ROUTINE
         SPACE
         LA    R2,1(R2)                 POINT TO NEXT DIGIT
         B     B41                      CHECK NEXT DIGIT
*
B42      DS    0H
         CLI   STRTPOS,C'H'       START AT RDW & OFFSET IN HEX?
         BNE   B43                NO, CAN JUST HAVE COMMA
*        BNE   B50ERROR           NO, GO TO ERROR ROUTINE
*
         CLI   0(R2),C'A'               IS DIGIT LESS THAN A ?
         BL    B43                      YES, CHECK FOR COMMA
         SPACE
         CLI   0(R2),C'F'               IS DIGIT GREATER THAN F ?
         BH    B50ERROR                 YES, GO TO ERROR ROUTINE
         SPACE
         LA    R2,1(R2)                 POINT TO NEXT DIGIT
         B     B42                      CHECK NEXT DIGIT
*
B43      DS    0H
         CLI   0(R2),C','               IS DIGIT = , ?
         BNE   B50ERROR                 NO, GO TO ERROR ROUTINE
         SPACE
         LR    R4,R2                    CALCULATE NUMBER OF DIGITS
         SR    R4,R3                    IN START LOCATION PARAMETER
         CLI   STRTPOS,C'H'       START AT RDW & OFFSET IN HEX?
         BNE   B43A               NO, ON WE GO
         XC    DWORD,DWORD        CLEAR DWORD
         XC    TRANDATA,TRANDATA  CLEAR TRANDATA
         SR    R15,R15            CLEAR R15
         LA    R15,DWORD+4        R15 -> AT END OF DWORD
         LA    R15,TRANDATA+4     R15 -> AT END OF DWORD
*        SRL   R4,1               DIVIDE BY FOR (HEX DATA)
         SR    R15,R4             R15 -> WHERE DATA GOES
*        SLL   R4,1               PUT BACK
         BCTR  R4,0               SUBTRACT 1 TO GET MACHINE LGTH
         EX    R4,MVCDATA         PUT CHAR DATA IN DWORD
*        EX    R4,LOADDATA        PUT CHAR DATA IN R15
*        ST    R15,DWORD+4        PUT IT IN DWORD
*        EX    R4,TRHEX2          TRANSLATE INPUT TO 00-0F
*        TR    DWORD,TRTAB        TRANSLATE TO 00-0F
         TR    TRANDATA(4),TRTAB2 TRANSLATE TO 00-0F
         PACK  DWORD(5),TRANDATA(5) PACK FIELD
         L     R4,DWORD           PUT IT IN R4
*        L     R4,DWORD+4         PUT IT IN R4
*        LA    R15,1(0,R7)        R15 = REAL LTH OF INPUT
*        C     R15,MAXPACK        AT MAX LTH OF 16 ?
*        BE    F50MAX             YES, TREAT DIFFERENTLY
*        EX    R15,F50PACK        NO, PACK ALL OF FIELD
*        BCTR  R4,0                     SUBTRACT 1 TO GET MACHINE LGTH
*        EX    R4,B48PACK               PACK START LOC IN DOUBLE WORD
*        CVB   R4,DWORD                 CONVERT TO BINARY
*        SRL   R4,8               DROP GARBAGE BYTE
         B     B43C               GO SAVE HEX OFFSET
TRHEX2   TR    TRANDATA(0),TRTAB2 TRANSLATE TO 00-0F
MVCDATA  MVC   0(0,R15),0(R3)     SET UP DATA FOR TRANSLATE
*VCDATA  MVC   DWORD(0),0(R3)     SET UP DATA FOR TRANSLATE
LOADDATA ICM   R15,0,0(R3)        PUT DATA IN R15
B10PACK  PACK  DWORD,TRANDATA(4)        PACK FIELD
TRANDATA DC    D'0'
*RTAB2   EQU   *-193              SET START OF SHORT TRANS TABLE
TRTAB2   DS    0XL256             SET START OF SHORT TRANS TABLE
         DC    X'00'              CHANGE 00 TO 00
         DC    XL192'00'          CHANGE 01-C0 TO 00
         DC    X'FAFBFCFDFEFF'    CHANGE C1-C6 TO FA-FF
         DC    41X'00'            CHANGE C7-EF TO 00
         DC    X'F0F1F2F3F4F5F6F7F8F9'   CHANGE F0-F9 TO F0-F9
         DC    XL(256-(*-TRTAB2))'00'    CHANGE FA-FF TO 00
*
B43A     DS    0H
         BCTR  R4,0                     SUBTRACT 1 TO GET MACHINE LGTH
         EX    R4,B48PACK               PACK START LOC IN DOUBLE WORD
         CVB   R4,DWORD                 CONVERT TO BINARY
         BCTR  R4,0                     SUBT 1 TO GIVE MACHINE LENGTH
*
B43C     DS    0H
         ST    R4,0(R10)                STORE START LOCATION IN TABLE
         SPACE
         LA    R2,1(R2)                 POINT TO LENGTH PARAMETER
         LR    R3,R2                    STORE START OF LENGTH PARM
B44      DS    0H
         CLI   0(R2),C'0'               DIGIT LESS THAN 0 ?
         BL    B46                      YES, CHECK FOR COMMA
         SPACE
         CLI   0(R2),C'9'               DIGIT GREATER THAN 9 ?
         BH    B60ERROR                 YES, GO TO ERROR ROUTINE
         SPACE
         LA    R2,1(R2)                 POINT TO NEXT DIGIT
         B     B44                      CHECK NEXT DIGIT
B46      DS    0H
         CLI   0(R2),C','               DIGIT A COMMA ?
         BNE   B60ERROR                 NO, GO TO ERROR ROUTINE
         SPACE
         LR    R4,R2                    CALCULATE NUMBER OF DIGITS
         SR    R4,R3                    IN LENGTH PARAMETER
         SPACE
         BCTR  R4,0                     SUBTRACT 1 TO GET MACHINE LTH
         EX    R4,B48PACK               PACK LENGTH PARM IN DOUBLE WORD
         CVB   R4,DWORD                 CONVERT TO BINARY
         CLI   1(R2),C'A'               IS TYPE = A ?
         BNE   B47PACK                  NO, MAXLEN = 16
         C     R4,MAXLEN                LENGTH OVER MAXIMUM LTH ?
         BH    B70ERROR                YES, GO TO ERROR ROUTINE
         SPACE 1
B47      DS    0H
         L     R3,ADDLTH          R3 = LTH OF DATA TO ADD
         AR    R3,R4              ADD THIS LTH
         ST    R3,ADDLTH          SAVE NEW LTH TO ADD
         BCTR  R4,0                     SUBT 1 TO GIVE MACHINE LENGTH
         ST    R4,4(R10)                STORE LENGTH IN TABLE
         SPACE
         LA    R2,1(R2)                 POINT TO TYPE PARAMETER
         CLI   0(R2),C'P'               IS TYPE = P ?
         BE    B80STORE                 YES, STORE TYPE
         SPACE
         CLI   0(R2),C'A'               IS TYPE = A ?
         BE    B80STORE                 YES, STORE TYPE
         SPACE
         CLI   0(R2),C'H'         IS TYPE = H ?
         BE    B80STORE           YES, STORE TYPE
         BAL   R11,G10SET2        POINT R2 TO WHERE ERROR MSG GOES
         MVC   0(L'CTLMS4,R2),CTLMS4     MOVE MESSAGE TO PRINT
         B     B90ABEND                 PRINT, SPACE 1, CANCEL JOB
         SPACE 1
B47PACK  DS    0H
         C     R4,MAXPACK         IS LTH OVER 16 ?
         BH    B75ERROR           YES, TOO BAD
         CLI   1(R2),C'P'         PACKED DATA ?
         BE    B47PACK2           YES, FIX PACKED LENGTH
         SRL   R4,1               HEX LTH = LTH/2
         B     B47                LTH NOW OKAY
         SPACE 1
B47PACK2 DS    0H
         LA    R4,1(0,R4)         MAKE LTH EVEN
         SRL   R4,1               LTH/2 = PACKED LTH
         B     B47                PACKED LTH OKAY NOW TOO
         SPACE 2
B48PACK  PACK  DWORD,0(0,R3)            PACK FIELD
         SPACE 2
B50ERROR DS    0H
         BAL   R11,G10SET2        POINT R2 TO WHERE ERROR MSG GOES
         MVC   0(L'CTLMS6,R2),CTLMS6    PUT MSG UNDER BAD CHAR
         B     B90ABEND                 PRINT, SPACE 1, CANCEL JOB
         SPACE
B60ERROR DS    0H
         BAL   R11,G10SET2        POINT R2 TO WHERE ERROR MSG GOES
         MVC   0(L'CTLMS7,R2),CTLMS7    PUT MSG UNDER BAD CHAR
         B     B90ABEND                 PRINT, SPACE 1, CANCEL JOB
         SPACE
B70ERROR DS    0H
         BAL   R11,G10SET2        POINT R2 TO WHERE ERROR MSG GOES
         MVC   0(L'CTLMS9,R2),CTLMS9    PUT MSG UNDER BAD CHAR
         B     B90ABEND                 PRINT, SPACE 1, CANCELL JOB
         SPACE
B75ERROR DS    0H
         BAL   R11,G10SET2        POINT R2 TO WHERE THE ERROR MSG GOES
         MVC   0(L'CTLMS9),CTLMS9 MOVE MESSAGE TO PRINT LINE
         MVI   23(R2),C'6'        CHANGE LTH IN MSG TO 16
         MVI   24(R2),C' '        *
         B     B90ABEND           PRINT MSG, CANCEL JOB
         SPACE 1
B80STORE DS    0H
         MVC   8(1,R10),0(R2)           STORE TYPE IN TABLE
         CLI   1(R2),C','               ANY MORE PARAMETERS ?
         BCR   7,R11                    NO, RETURN TO CALLER
         SPACE 2
         LA    R10,12(R10)              POINT TO NEXT CONTROL FIELD
         LA    R2,2(R2)                 POINT TO NEXT START PARM
         AP    CFCTR,ONE                ADD 1 TO CONTROL FIELD CTR
         CP    CFCTR,FIVE               OVER 5 PARAMETERS ?
         BNH   B40LOOP                  NO, PROCESS NEXT FIELD
         SPACE
         MVC   P(L'CTLMS5),CTLMS5       MOVE MESSAGE TO PRINT
         BAL   R11,Y10WSP1              PRINT, SPACE 1
         SPACE
B90ABEND BAL   R11,Y10WSP1              PRINT, SPACE 1
         ABEND 16                       CANCEL JOB
         EJECT
***********************************************************************
*        E D I T   O U T P U T   C O N T R O L   C A R D              *
***********************************************************************
         SPACE 2
C10OUT1  DS    0H
         MVI   OPENFLGS,X'00'           CLEAR OPEN FLAGS
         LA    R2,7(R2)                 POINT TO OUTPUT FILES
         CLC   0(4,R2),OUT1             USING FILE OUT1 ?
         BNE   C20OUT2                  NO, CHECK FOR OUT2.
         SPACE
         OI    OPENFLGS,B'10000000'     TURN OPEN OUT1 FLAG ON
         LA    R2,5(R2)                 POINT TO NEXT FILE NAME
         SPACE
C20OUT2  DS    0H
         CLC   0(4,R2),OUT2             USING FILE OUT2 ?
         BNE   C30OUT3                  NO, CHECK FOR OUT3
         SPACE
         OI    OPENFLGS,B'01000000'     TURN OPEN OUT2 FLAG ON
         LA    R2,5(R2)                 POINT TO NEXT FILE NAME
C30OUT3  DS    0H
         CLC   00(4,R2),OUT3            USING FILE OUT3 ?
         BNE   C40OUT4                  NO, CHECK FOR OUT4
         SPACE
         OI    OPENFLGS,B'00100000'     TURN OPEN OUT3 FLAG ON
         LA    R2,5(R2)                 POINT TO NEXT FILE NAME
         SPACE
C40OUT4  DS    0H
         CLC   00(4,R2),OUT4            USING FILE OUT4 ?
         BNE   C50OUT5                  NO, CHECK FOR OUT5
         SPACE
         OI    OPENFLGS,B'00010000'     TURN OPEN OUT4 FLAG ON
         LA    R2,5(R2)                 POINT TO NEXT FILE NAME
         SPACE
C50OUT5  DS    0H
         CLC   00(4,R2),OUT5            USING FILE OUT5 ?
         BNE   C60OUT6                  NO, CHECK FOR OUT6
         SPACE
         OI    OPENFLGS,B'00001000'    TURN OPEN OUT5 FLAG ON
         LA    R2,5(R2)                 POINT TO NEXT FILE NAME
C60OUT6  DS    0H
         CLC   00(4,R2),OUT6            USING FILE OUT6 ?
         BNE   C60OUT7                  NO, CHECK FOR OUT7
         SPACE
         OI    OPENFLGS,B'00000100'     TURN OPEN OUT6 FLAG ON
         LA    R2,5(R2)                 POINT TO NEXT FILE NAME
         SPACE
C60OUT7  DS    0H
         CLC   0(4,R2),OUT7             USING FILE OUT7 ?
         BNE   C70END                   NO, CHECK FOR END OF INPUT
         SPACE
         OI    OPENFLGS,X'02'           TURN OPEN OUT7 FLAG ON
         LA    R2,5(0,R2)         POINT TO NEXT FILE NAME
         SPACE
C70END   DS    0H
         CLI   0(R2),C' '               AT END OF CONTROL CARD ?
         BE    C90END                   YES, RETURN TO CALLER
         SPACE
         MVC   P(L'CTLMS8),CTLMS8       MOVE MESSAGE TO PRINT
         BAL   R11,Y10WSP1              PRINT, SPACE 1
         ABEND 16                       CANCEL JOB
C90END   BR    R11                      RETURN TO CALLER
         EJECT
***********************************************************************
*        E D I T   S E L E C T   C O N T R O L   C A R D              *
***********************************************************************
         SPACE 2
D10SLECT DS    0H
         LA    R3,SELECTS               LOAD ADDRESS SELECT TABLE
         LA    R2,7(R2)                 POINT TO SELECTED FILE NAME
         CLC   0(4,R2),OUT1             FILE = OUT1 ?
         BNE   D20OUT2                  NO, CHECK FOR OUT2
         SPACE
         LA    R9,OUT1CTR               LOAD ADDRESS OUT1 COUNTER
D10LOOP  DS    0H
         LA    R2,5(R2)                 POINT TO CF
         BAL   R10,F10EDIT              EDIT CONTROL FIELDS
         L     R15,0(0,R9)              LOAD COUNTER IN REG 15
         LA    R10,4                    R10 = 4
         CR    R15,R10                  IF SELECT COUNTER > 4
         BH    D85ERROR                 BOMB RUN
         SPACE
         M     R14,ENTLTH               MULTIPLY BY TABLE ENTRY LENGTH
         AR    R3,R15                   ADD DISP TO SELECT BASE REG
         CLI   CFWK1,X'FF'              IS CONTROL FIELD 1 USED
         BE    D12CF2                   NO, CHECK CF2
         SPACE
         MVC   4(L'CFWK1,R3),CFWK1           STORE CF1
         SPACE
D12CF2   DS    0H
         LA    R3,116(R3)                POINT TO CF2
         CLI   CFWK2,X'FF'              CONTROL FIELD 2 USED ?
         BE    D14CF3                   NO, CHECK FOR CF3
         SPACE
         MVC   4(L'CFWK2,R3),CFWK2           STORE CF2
         SPACE
D14CF3   DS    0H
         LA    R3,116(R3)                POINT TO CF3
         CLI   CFWK3,X'FF'              CONTROL FIELD 3 USED ?
         BE    D16CF4                   NO, CHECK FOR CF4
         SPACE
         MVC   4(L'CFWK3,R3),CFWK3      STORE CF3
         SPACE
D16CF4   DS    0H
         LA    R3,116(R3)                POINT TO CF4
         CLI   CFWK4,X'FF'              CONTROL FIELD 4 USED ?
         BE    D18CF5                   NO, CHECK FOR CF5
         SPACE
         MVC   4(L'CFWK4,R3),CFWK4      STORE CF4
         SPACE
D18CF5   DS    0H
         LA    R3,116(R3)                POINT TO CF5
         CLI   CFWK5,X'FF'              CONTROL FIELD 5 USED ?
         BE    D19ADD                   NO, ADD 1 TO COUNTER
         SPACE
         MVC   4(L'CFWK5,R3),CFWK5      STORE CF5
         SPACE
D19ADD   DS    0H
         L     R10,0(0,R9)              ADD 1 TO OUT  COUNTER
         LA    R10,1(R10)               *
         ST    R10,0(0,R9)              *
         B     D80END                   RETURN TO CALLER
         SPACE
D20OUT2  DS    0H
         LA    R3,2900(0,R3)         POINT TO OUT2 SELECT
         CLC   0(4,R2),OUT2             FILE = OUT2 ?
         BNE   D30OUT3                  NO, CHECK FOR OUT3
         SPACE
         LA    R9,OUT2CTR               LOAD ADDRESS OUT2 COUNTER
         B     D10LOOP                  PROCESS CF'S
         SPACE
D30OUT3  DS    0H
         LA    R3,2900(0,R3)         POINT TO OUT3 SELECT
         CLC   0(4,R2),OUT3             FILE = OUT3 ?
         BNE   D40OUT4                  NO, CHECK FOR OUT4
         SPACE
         LA    R9,OUT3CTR               LOAD ADDRESS OUT3 COUNTER
         B     D10LOOP                  PROCESS
         SPACE
D40OUT4  DS    0H
         LA    R3,2900(0,R3)         POINT TO OUT4 SELECT
         CLC   0(4,R2),OUT4             FILE = OUT4 ?
         BNE   D50OUT5                  NO, CHECK FOR OUT5
         SPACE
         LA    R9,OUT4CTR               LOAD ADDRESS OUT4 COUNTER
         B     D10LOOP                  PROCESS OUT4
         SPACE
D50OUT5  DS    0H
         LA    R3,2900(0,R3)         POINT TO OUT5 SELECT
         CLC   0(4,R2),OUT5             FILE = OUT5 ?
         BNE   D60OUT6                  NO, CHECK FOR OUT6
         SPACE
         LA    R9,OUT5CTR               LOAD ADDRESS OUT5 COUNTER
         B     D10LOOP                  PROCESS OUT5
         SPACE
D60OUT6  DS    0H
         LA    R3,2900(0,R3)         POINT TO OUT6 SELECT
         CLC   0(4,R2),OUT6             FILE = OUT6 ?
         BNE   D70OUT7                  NO, CHECK FOR OUT7
         SPACE
         LA    R9,OUT6CTR               LOAD ADDRESS OUT6 COUNTER
         B     D10LOOP                  PROCESS OUT6
         SPACE
D70OUT7  DS    0H
         LA    R3,2900(0,R3)         POINT TO OUT7 SELECT
         CLC   0(4,R2),OUT7       FILE = OUT7 ?
         BNE   D90ERROR           NO, PRINT ERROR MSG
         SPACE 1
         LA    R9,OUT7CTR               LOAD ADDR OUT7 COUNTER
         B     D10LOOP                  PROCESS OUT7
         SPACE
D80END   DS    0H
         BR    R11                      RETURN TO CALLER
         SPACE
D90ERROR DS    0H
         MVC   P(L'CTLMS8),CTLMS8       MOVE MESSAGE TO PRINT
D95      DS    0H
         BAL   R11,Y10WSP1              PRINT, SPACE 1
         ABEND 16                       CANCEL JOB
         SPACE
D85ERROR DS    0H
         MVC   P(L'CTLMS14),CTLMS14     PRINT ERROR MESSAGE
         B     D95                      *
         EJECT
***********************************************************************
*        E D I T   C O N T R O L   F I E L D S                        *
***********************************************************************
         SPACE 2
F10EDIT  DS    0H
         MVC   CFWK1(112),WKFILL         INITIALIZE WORK AREAS
         MVC   CFWK2(112),WKFILL         INITIALIZE WORK AREAS
         MVC   CFWK3(112),WKFILL         INITIALIZE WORK AREAS
         MVC   CFWK4(112),WKFILL         INITIALIZE WORK AREAS
         MVC   CFWK5(112),WKFILL         INITIALIZE WORK AREAS
         CLC   0(4,R2),CF1              CONTROL FIELD 1 ?
         BNE   F20CF2                   NO, CHECK FOR CF2
         LA    R8,CFWK1                 LOAD ADDRESS WORK 1
         L     R7,LENGTH1               LOAD LENGTH
         LA    R14,TYPE1          R14 -> TO TYPE FIELD
         BAL   R6,F10LOOP               CHECK CF1
         B     F20CF2
F10LOOP  LA    R2,4(R2)                 POINT TO COMPARE OPERAND
         CLC   0(3,R2),ALL              CF = ALL ?
         BNE   F12                      NO, EDIT CF1
         LA    R2,4(R2)                 POINT TO NEXT CF
         MVI   0(R8),C'0'               ZERO WORK AREA
         MVC   1(111,R8),0(R8)          *
         BR    R6                       RETURN
F12      DS    0H
         CLI   0(R2),C'('               LEFT BRACKET ?
         BNE   F60ERROR                 NO, PRINT MESSAGE
         SPACE
         LA    R2,1(R2)                 POINT TO COMPARE OPERAND
         CLI   0(R2),C'='               EQUAL COMPARE ?
         BNE   F14                      NO, CHECK FOR <
         MVI   0(R8),X'80'              SET COMPARE CODE
         B     F18
F14      DS    0H
         CLI   0(R2),C'<'               LESS THAN COMPARE ?
         BNE   F16                      NO, CHECK FOR >
         MVI   0(R8),X'40'              SET COMPARE CODE
         B     F18
F16      DS    0H
         CLI   0(R2),C'>'               GREATER THAN COMPARE ?
         BNE   F17                      NO, CHECK FOR \
         MVI   0(R8),X'20'              SET COMPARE CODE
         B     F18
         SPACE
F17      DS    0H
         CLI   0(R2),C'#'               NOT EQUAL COMPARE ?
         BNE   F70ERROR                 NO, PRINT ERROR MESSAGE
         MVI   0(R8),X'70'              SET COMPARE NOT EQUAL CODE
         SPACE
F18      LA    R2,1(R2)                 POINT TO COMPARE VALUE
         LA    R8,1(R8)                 POINT TO VALUE WORK AREA
         CLI   0(R14),C'A'        IS IT CHARACTER DATA?
         BNE   F50HEX             NO, CHECK FOR HEX OR PACKED
         EX    R7,F20                   MVC VALUE TO WORK AREA
F19      DS    0H
         AR    R2,R7                    POINT TO CLOSING BRACKET
         LA    R2,1(R2)                 *
         CLI   0(R2),C')'               CLOSING BRACKET ?
         BNE   F60ERROR                 NO, PRINT MESSAGE
         SPACE
F19NEXT  DS    0H
         LA    R2,2(R2)                 POINT TO NEXT CF
         BR    R6                       RETURN TO CALLER
         SPACE
F20      MVC   0(0,R8),0(R2)            MOVE VALUE TO WORKAREA
         SPACE
F20CF2   DS    0H
         CLC   0(4,R2),CF2              CF2 ?
         BNE   F30CF3                   NO, CHECK FOR CF3
         SPACE
         LA    R8,CFWK2                 LOAD ADDRESS WORK 2
         L     R7,LENGTH2               LOAD LENGTH 2
         LA    R14,TYPE2          R14 -> TO TYPE FIELD
         BAL   R6,F10LOOP               CHECK CF2
         SPACE
F30CF3   DS    0H
         CLC   0(4,R2),CF3              CF3 ?
         BNE   F40CF4                   NO, CHECK FOR CF4
         LA    R8,CFWK3                 LOAD ADDRESS WORK 3
         L     R7,LENGTH3               LOAD LENGTH 3
         LA    R14,TYPE3          R14 -> TO TYPE FIELD
         BAL   R6,F10LOOP               CHECK CF3
F40CF4   DS    0H
         CLC   0(4,R2),CF4              CF4 ?
         BNE   F50CF5                   NO, CHECK FOR CF5
         LA    R8,CFWK4                 LOAD ADDRESS WORK 4
         L     R7,LENGTH4               LOAD LENGTH 4
         LA    R14,TYPE4          R14 -> TO TYPE FIELD
         BAL   R6,F10LOOP               CHECK CF4
         SPACE
F50CF5   DS    0H
         CLC   0(4,R2),CF5              CF5 ?
         BNE   F80ERROR                 NO, CHECK FOR END OF SELECT
         LA    R8,CFWK5                 LOAD ADDRESS WORK 5
         L     R7,LENGTH5               LOAD LENGTH 5
         LA    R14,TYPE5          R14 -> TO TYPE FIELD
         BAL   R6,F10LOOP               CHECK CF5
         BR    R10                      RETURN TO CALLER
         SPACE 2
F50HEX   DS    0H
         CLI   0(R14),C'P'        IS DATA PACKED ?
         BE    F51PACK            YES, SET UP PACKED DATA
         SPACE 1
         LA    R7,1(0,R7)         ADD 1 TO R7
         SLL   R7,1               R7*2 = REAL INPUT LTH
         BCTR  R7,0               R7 = HEX LTH OF INPUT
         SPACE 1
         EX    R7,TRHEX           TRANSLATE INPUT TO 00-0F
         LA    R15,1(0,R7)        R15 = REAL LTH OF INPUT
         C     R15,MAXPACK        AT MAX LTH OF 16 ?
         BE    F50MAX             YES, TREAT DIFFERENTLY
         EX    R15,F50PACK        NO, PACK ALL OF FIELD
         SPACE 1
F50HEX2  DS    0H
         SRL   R15,1              LTH/2 = LTH OF HEX FIELD
         LA    R14,CTLHEAD+14     R14 -> TO LAST BYTE OF HEX DATA
         SR    R14,R15            R14 -> TO FIRST BYTE OF HEX DATA
         BCTR  R15,0              R15 = HEX LTH
         EX    R15,F50MOVE        MOVE HEX VALUE TO WORK AREA
         B     F19                DO REST OF EDIT
         SPACE 1
F50MAX   DS    0H
         PACK  CTLHEAD(5),0(9,R2) PACK 1ST 8 DIGITS
         PACK  CTLHEAD+4(5),8(9,R2) PACK 2ND 8 DIGITS
         MVC   0(8,R8),CTLHEAD    MOVE HEX CHARS TO WORK AREA
         B     F19                DO REST OF EDIT
         SPACE 1
F51PACK  DS    0H
         SLL   R7,1               R7*2 = HEX LTH OF IN INPUT
         EX    R7,F50PACK         PACK INPUT DATA
         LR    R15,R7             R15 = LTH
         SRL   R15,1              LTH /2 = PACKED LTH
         LA    R14,CTLHEAD+14     R14 -> TO LAST PACKED BYTE
         SR    R14,R15            R14 -> TO FIRST PACKED BYTE
         EX    R15,F50MOVE        MOVE PACKED DATA TO WORK AREA
         B     F19                DO REST OF EDIT
         SPACE 2
TRHEX    TR    0(0,R2),TRTAB      TRANSLATE TO 00-0F
F50PACK  PACK  CTLHEAD(15),0(0,R2)  PACK INPUT
F50MOVE  MVC   0(0,R8),0(R14)     MOVE TO TABLE AREA
         SPACE 2
F60ERROR DS    0H
         BAL   R11,G10SET2        POINT R2 TO WHERE ERROR MSG GOES
         MVC   0(L'CTLMS10,R2),CTLMS10  PUT ERROR MSG UNDER BAD CHAR
         B     F90WRITE                 PRINT, CANCEL JOB
         SPACE
F70ERROR DS    0H
         BAL   R11,G10SET2        POINT R2 TO WHERE ERROR MSG GOES
         MVC   0(L'CTLMS11,R2),CTLMS11  PUT ERROR MSG UNDER BAD CHAR
         B     F90WRITE                 PRINT, CANCEL JOB
         SPACE
F80ERROR DS    0H
         CLI   0(R2),C' '               ANY MORE FIELDS ?
         BCR   8,R10                    NO, RETURN TO CALLER
         SPACE
         BAL   R11,G10SET2        POINT R2 TO WHERE ERROR MSG GOES
         MVC   0(L'CTLMS12,R2),CTLMS12  PUT ERROR MSG UNDER BAD CHAR
F90WRITE DS    0H
         BAL   R11,Y10WSP1              PRINT, SPACE 1
         ABEND 16                       CANCEL JOB
         EJECT
***********************************************************************
*        POINT R2 TO THE PRINT POSITION AT WHICH THE ERROR OCCURRED   *
***********************************************************************
         SPACE 2
G10SET2  DS    0H
         S     R2,EDITSAVE        R2 = DISP TO BAD CHARACTER
         LA    R2,P(R2)           R2 -> TO WHERE ERROR MSG GOES
         BR    R11                RETURN TO CALLER
         EJECT
***********************************************************************
*        P R I N T   C O N T R O L   R O U T I N E                    *
***********************************************************************
         SPACE 2
Y10SKIP1 DS    0H
         MVI   CTLCHR,X'8B'             SKIP TO CHANNEL 1
         B     Y40
         SPACE
Y10WSP1  DS    0H
         MVI   CTLCHR,X'09'             PRINT, SPACE 1
         B     Y40
         SPACE
Y10WSP2  DS    0H
         MVI   CTLCHR,X'11'             PRINT, SPACE 2
         B     Y40
         SPACE
Y10WSP3  DS    0H
         MVI   CTLCHR,X'19'             PRINT, SPACE 3
         SPACE
Y40      DS    0H
         PUT   OUTFILE,PRINT            PRINT
         MVI   P,C' '                   CLEAR PRINT BUFFER
         MVC   P+1(L'P-1),P             *
         SPACE
         BR    R11                      RETURN TO CALLER
         EJECT
***********************************************************************
*        F I L E   D E C L A R E S                                    *
***********************************************************************
         SPACE 2
         PRINT NOGEN
INFILE   DCB   DDNAME=SYSIN,DSORG=PS,MACRF=GL,EODAD=A90END
OUTFILE  DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=FBM,LRECL=133,  +
               BLKSIZE=9310
         PRINT GEN
         SPACE 2
***********************************************************************
*              D E C L A R A T I V E S                                *
***********************************************************************
         SPACE
EDITSAVE DC    18F'0'
ELEVEN   DC    F'11'
MAXLEN   DC    F'111'
DWORD    DC    D'0'
MAXPACK  DC    F'16'
         ENTRY ADDLTH
ADDLTH   DC    F'0'               LTH OF DATA TO ADD
CTLHEAD  DC    C'*****  CONTROL STATEMENT LISTING  *****'
PRINT    DS    0CL133
CTLCHR   DC    X'09'
P        DC    CL132' '
INPUT    DC    C'INPUT='
OUTPUT   DC    C'OUTPUT='
SELECT   DC    C'SELECT='
TAPEIN   DC    C'TAPEIN'
CONTROL  DC    C'CONTROL=('
HD1      DC    C'HEAD1='
HD2      DC    C'HEAD2='
HD3      DC    C'HEAD3='
STARTRDW DC    C'START=RDW'       START AT POS 1, OFFSET IN DECIMAL
STARTHEX DC    C'START=HEX'       START AT POS 0, OFFSET IN HEX
CFCTR    DC    P'1'
ONE      DC    P'1'
FIVE     DC    P'5'
ALL      DC    C'ALL'
CTLMS1   DC    C'       INVALID CONTROL CARD IGNORED '
CTLMS2   DC    C'       DDNAME MUST BE TAPEIN'
CTLMS3   DC    C'       INVALID CONTROL'
CTLMS4   DC    C'TYPE NOT P, H OR A'
CTLMS5   DC    C'       ONLY 5 CONTROL FIELDS ALLOWED'
CTLMS6   DC    C'START LOCATION NOT NUMERIC OR HEXADECIMAL'
CTLMS7   DC    C'LENGTH NOT NUMERIC'
CTLMS8   DC    C'       INVALID FILE NAME'
CTLMS9   DC    C' LENGTH CANNOT EXCEED 111'
CTLMS10  DC    C'CF VALUE NOT IN ( ) OR SIZE NOT = TO CONTROL SIZE'
CTLMS11  DC    C'COMPARE OPERAND MUST BE = # > OR <'
CTLMS12  DC    C'CF FIELD MUST BE CF1 - CF5'
CTLMS13  DC    C'*****  END OF CONTROL CARD LISTING  *****'
CTLMS14  DC    C'       ONLY 5 SELECTS PER FILE ALLOWED'
OUT1     DC    C'OUT1'
OUT2     DC    C'OUT2'
OUT3     DC    C'OUT3'
OUT4     DC    C'OUT4'
OUT5     DC    C'OUT5'
OUT6     DC    C'OUT6'
OUT7     DC    C'OUT7'
CFWK1    DS    CL112
CFWK2    DS    CL112
CFWK3    DS    CL112
CFWK4    DS    CL112
CFWK5    DS    CL112
ENTLTH   DC    F'580'
WKFILL   DC    112X'FF'
CF1      DC    C'CF1='
CF2      DC    C'CF2='
CF3      DC    C'CF3='
CF4      DC    C'CF4='
CF5      DC    C'CF5='
ZEROS    DC    12C'0'
TRTAB    EQU   *-193              SET START OF SHORT TRANS TABLE
         DC    X'0A0B0C0D0E0F'
         DC    41X'00'
         DC    X'00010203040506070809'
R0       EQU   0                        REGISTER EQUATES
R1       EQU   1                        *
R2       EQU   2                        *
R3       EQU   3                        *
R4       EQU   4                        *
R5       EQU   5                        *
R6       EQU   6                        *
R7       EQU   7                        *
R8       EQU   8                        *
R9       EQU   9                        *
R10      EQU   10                       *
R11      EQU   11                       *
R12      EQU   12                       *
R13      EQU   13                       *
R14      EQU   14                       *
R15      EQU   15                       *
         SPACE
*
*              T A B L E S
*
TABLED   DSECT
CONTROLS DS    0F
         COPY  SDP10
SELECTS  DS    0F
         COPY  SDP20
CTRLEDIT CSECT
         LTORG
         END   CTRLEDIT
/*
//*
//STEP5 EXEC HLASMCL,PARMC='XREF(FULL)',
//             PARM.LKED='LIST,LET,MAP'
//*            PARM.LKED='OVLY,LIST,LET,MAP'
//ASM.SYSLIB DD
//          DD
//    DD DSN=&&T,DISP=(SHR,PASS)
//ASM.SYSIN DD *
         EJECT
***********************************************************************
*        W R I T E   R E P O R T S   R E Q U I R E D                  *
***********************************************************************
         SPACE 2
VPRINT   CSECT                          NAME CONTROL SECTION
         USING *,R15
         B     A10SAVE                  BRANCH AROUND IDENTIFIER
         DC    AL1(14)
         DC    C'VPRINT SECTION'        IDENTIFIER
A10SAVE  DS    0H
         DROP  R15
         SAVE  (14,12)                  SAVE REGISTERS
         BALR  R12,0                    LOAD BASE REGISTER
         USING *,R12,R10,R4             ESTABLISH ADDRESSABILITY
         LA    R11,1                    LOAD BASE REGISTER 2
         LA    R10,4095(R11,R12)        *
         LA    R4,4095(R11,R10)         LOAD BASE REGISTER 3
         ST    R13,VSAVE+4              CHAIN SAVE AREAS
         LR    R11,R13                  *
         LA    R13,VSAVE                *
         ST    R13,8(R11)               *
         L     R6,0(0,R1)               LOAD DSECT BASE REG
         USING CONTROLS,R6              ESTABLISH DSECT ADDRESSABILITY
         SPACE 2
         OPEN  (INFILE)                 OPEN INPUT FILE
         SPACE 1
         LH    R0,INFILE+82       R0 = LRECL
         GETMAIN R,LV=(0)         GET RECORD WORK AREA
         LTR   R15,R15            IS RC = 0 ?
         BZ    A15OK              YES, CONTINUE
         ABEND 4                  NO, ABEND WITH RC = 4
         SPACE 1
A15OK    DS    0H
         ST    R1,RECADDR         SAVE A(RECORD AREA)
         ST    R1,OFFADDR         SAVE A(RECORD AREA)
         SPACE
         SR    R14,R14            R14 = 0
         LH    R15,INFILE+62      R15 = BLKSIZE
         LH    R1,INFILE+82       R1 = LRECL
         DR    R14,R1             CALC RECORDS/BLK IN R15
         L     R2,=V(ADDLTH)      R2 -> AT NEW LTH
         A     R1,0(0,R2)         ADD NEW LTH TO OLD LRECL
         MR    R14,R1             NEW BLKSIZE = NEW LRECL * RECS/BLK
         STH   R15,OUT4DCB+62     PUT NEW BLKSIZE IN OUTPUT DCB
         STH   R1,OUT4DCB+82      PUT NEW LRECL IN OUTPUT DCB
         STH   R1,MAXLTHO         SAVE NEW LRECL FOR CLEAR INST
         LR    R0,R1              PUT NEW LRECL IN R0
         SPACE
*        LA    R0,32              R0 = MAX BYTES TO ADD
*        AH    R0,INFILE+82       R0 = LRECL + MAX NEW BYTES
         GETMAIN R,LV=(0)         GET RECORD WORK AREA
         LTR   R15,R15            IS RC = 0 ?
         BZ    A15OK2             YES, CONTINUE
         ABEND 5                  NO, ABEND WITH RC = 5
         SPACE 1
A15OK2   DS    0H
         ST    R1,RECADDRO        SAVE A(RECORD AREA)
         ST    R1,OFFADDRO        SAVE A(RECORD AREA)
         SPACE
A20OPEN1 DS    0H
         TM    OPENFLGS,B'10000000'     OPEN OUT1 ?
         BNO   A20OPEN2                 NO, CHECK FOR OPEN OUT2
         SPACE
         OPEN  (OUT1DCB,(OUTPUT))       OPEN OUT1
         NI    A50WRT1+1,X'0F'          SET SWITCH TO WRITE OUT1
         NI    A30DATE+1,X'0F'          SET SWITCH TO GET DATE
         NI    A70STAT1+1,X'0F'         SET STATS 1 SWITCH
         SPACE
A20OPEN2 DS    0H
         TM    OPENFLGS,B'01000000'     OPEN OUT2 ?
         BNO   A20OPEN3                 NO, OPEN OUT3?
         SPACE
         OPEN  (OUT2DCB,(OUTPUT))       OPEN OUT2
         NI    A50WRT2+1,X'0F'          SET SWITCH TO WRITE OUT2
         NI    A30DATE+1,X'0F'          SET SWITCH TO GET DATE
         NI    A70STAT2+1,X'0F'         SET STATS 2 SWITCH
A20OPEN3 DS    0H
         TM    OPENFLGS,B'00100000'     OPEN OUT3 ?
         BNO   A20OPEN4                 NO, OPEN OUT4?
         SPACE
         OPEN  (OUT3DCB,(OUTPUT))       OPEN OUT3
         NI    A50WRT3+1,X'0F'          SET SWITCH TO WRITE OUT3
         NI    A30DATE+1,X'0F'          SET SWITCH TO GET DATE
         NI    A70STAT3+1,X'0F'         SET STATS 3 SWITCH
A20OPEN4 DS    0H
         TM    OPENFLGS,B'00010000'     OPEN OUT4 ?
         BNO   A20OPEN5                 NO, OPEN OUT5 ?
         SPACE
         OPEN  (OUT4DCB,(OUTPUT))       OPEN OUT4
         NI    A50WRT4+1,X'0F'          SET SWITCH TO WRITE OUT4
         NI    A70STAT4+1,X'0F'         SET STATS 4 SWITCH ON
         TM    OUT4DCB+36,X'58'   RECFM=V, VB, OR VBS ?
         BNZ   *+10               YES, DON'T CHANGE IT
         MVC   OUT4DCB+36(2),INFILE+36 NO, SET IT THE SAME AS THE INPUT
A20OPEN5 DS    0H
         TM    OPENFLGS,B'00001000'     OPEN OUT5 ?
         BNO   A20OPEN6                 NO, OPEN OUT6 ?
         SPACE
         OPEN  (OUT5DCB,(OUTPUT))       OPEN OUT5
         NI    A50WRT5+1,X'0F'          SET SWITCH TO WRITE OUT5
         NI    A70STAT5+1,X'0F'         SET STATS 5 SWITCH ON
         TM    OUT5DCB+36,X'58'   RECFM=V, VB, OR VBS ?
         BNZ   *+10               YES, DON'T CHANGE IT
         MVC   OUT5DCB+36(2),INFILE+36 NO, SET IT THE SAME AS THE INPUT
A20OPEN6 DS    0H
         TM    OPENFLGS,B'00000100'     OPEN OUT6 ?
         BNO   A20OPEN7                 NO, OPEN OUT7 ?
         SPACE
         OPEN  (OUT6DCB,(OUTPUT))       OPEN OUT6
         NI    A50WRT6+1,X'0F'          SET SWITCH TO WRITE OUT6
         NI    A70STAT6+1,X'0F'         SET STATS 6 SWITCH ON
         TM    OUT6DCB+36,X'58'   RECFM=V, VB, OR VBS ?
         BNZ   *+10               YES, DON'T CHANGE IT
         MVC   OUT6DCB+36(2),INFILE+36 NO, SET IT THE SAME AS THE INPUT
         SPACE
A20OPEN7 DS    0H
         TM    OPENFLGS,X'02'           OPEN OUT7 ?
         BNO   A25RDW             NO, START AT RDW ??
         SPACE
         OPEN  (OUT7DCB,(OUTPUT))       OPEN OUT7
         NI    A50WRT7+1,X'0F'          SET SWITCH TO WRITE OUT7
         NI    A70STAT7+1,X'0F'         SET SWITCH TO WRITE STATS7
         SPACE
A25RDW   CLI   STRTPOS,C'R'       START AT RDW ?
         BNE   A26RDW             NO, START AT RDW IN HEX?
         MVI   H4+1,X'00'         YES, START AT RDW (OFFSET 0)
         SPACE 1
A26RDW   CLI   STRTPOS,C'H'       START AT RDW WITH HEX OFFSET?
         BNE   A30DATE            NO, START AT DATA (OFFSET 4)
         MVI   H4+1,X'00'         YES, START AT RDW (OFFSET 0)
         SPACE 1
A30DATE  B     A40READ                  DATE SWITCH
         BAL   R11,B10DATE              PERFORM DATE ROUTINE
         SPACE
A40READ  DS    0H
         L     R0,RECADDR         R0 -> TO RECORD AREA
         GET   INFILE,(0)               READ INPUT RECORD
         L     R1,RECADDR         R1 -> TO INPUT RECORD
         L     R2,RECADDR         R2 -> TO INPUT RECORD
         AH    R2,H4                 ADD OFFSET (0 IF RDW, 4 IF DATA)
         ST    R2,OFFADDR         SAVE IT
         L     R2,RECADDRO        R2 -> TO OUTPUT RECORD AREA
         SPACE 1
         STM   R2,R5,SAVE2TO5     SAVE SOME REGS
*                                 CAUSE MVCL CLOBBERS "TO" REG...
*        FIRST FILL AREA WITH SPACES
         L     R9,=X'40000000'    MAKE BLANK THE PAD, LENGTH =0
         LA    R8,0               NOT THAT IT REALLY MATTERS
         LH    R3,MAXLTHO         R3 = TOTAL LTH TO CLEAR
*        LH    R3,OUT4DCB+82      R3 = TOTAL LTH TO MOVE TO
         SPACE 1
         MVCL  R2,R8              CLEAR THE BUFFER
*
         LM    R2,R5,SAVE2TO5     LOAD SOME REGS
*
         AH    R2,H4                 ADD OFFSET (0 IF RDW, 4 IF DATA)
         ST    R2,OFFADDRO        SAVE IT
         LH    R2,0(0,R1)               GET LTH OF RECORD+CW
         ST    R2,VRLTHO                SAVE LTH OF RECORD
         SH    R2,H4                    DROP LTH OF CW
         ST    R2,VRLTH                 SAVE LTH OF RECORD
         ST    R2,VRLTHL                SAVE LTH OF RECORD
         LR    R2,R1                    POINT REG 2 TO INPUT RECORD
         AH    R2,H4                 ADD OFFSET (0 IF RDW, 4 IF DATA)
         AP    INCTR,ONE                ADD 1 TO RECORD COUNTER
         LA    R3,0               RESET LAST OFFSET
         ST    R3,LASTOFF               FIELD
         SPACE
A50WRT1  DS    0H
         B     A50WRT2                  WRITE 1 SWITCH
         LA    R3,A50WRT2               LOAD RETURN ADDRESS
         LA    R5,SELECTS+0             LOAD ADDRESS OUT1 TABLE
         L     R15,OUT1CTR              LOAD OUT1 COUNTER
         BAL   R11,D10COMP              CHECK CONTROL FIELDS
         SPACE
         LA    R1,OUT1                  LOAD DCB ADDRESS
         MVC   PHD,HEAD1                MOVE HEAD1 TO PRINT
         BAL   R11,E10PRT               PRINT,REPORT 1
         AP    OUTCTR1,ONE              ADD 1 TO OUT1 COUNTER
         BAL   R3,D70BR                 RETURN TO D10COMP
         SPACE
A50WRT2  DS    0H
         B     A50WRT3                  WRITE 2 SWITCH
         LA    R3,A50WRT3               LOAD RETURN ADDRESS
         L     R15,OUT2CTR              LOAD OUT2 COUNTER
         LA    R5,SELECTS            LOAD ADDRESS OUT2 TABLE
         A     R5,OFF2               *
         BAL   R11,D10COMP              CHECK CONTROL FIELDS
         SPACE
         LA    R1,OUT2                  LOAD OUT2 DCB ADDRESS
         MVC   PHD,HEAD2                MOVE HEAD2 TO PRINT
         BAL   R11,E10PRT               PRINT REPORT 2
         AP    OUTCTR2,ONE              ADD 1 TO OUT2 COUNTER
         BAL   R3,D70BR                 RETURN TO D10COMP
         SPACE
A50WRT3  DS    0H
         B     A50WRT4                  WRITE 3 SWITCH
         LA    R3,A50WRT4               LOAD RETURN ADDRESS
         L     R15,OUT3CTR              LOAD OUT3 COUNTER
         LA    R5,SELECTS            LOAD ADDRESS OUT3 TABLE
         A     R5,OFF3               *
         BAL   R11,D10COMP              CHECK CONTROL FIELDS
         SPACE
         LA    R1,OUT3                  LOAD OUT3 DCB ADDRESS
         MVC   PHD,HEAD3                MOVE HEAD3 TO PRINT
         BAL   R11,E10PRT               PRINT REPORT 3
         AP    OUTCTR3,ONE              ADD 1 TO OUT3 COUNTER
         BAL   R3,D70BR                 RETURN TO D10COMP
         SPACE
A50WRT4  DS    0H
         B     A50WRT5                  WRITE 4 SWITCH
         LA    R3,A50WRT5               LOAD RETURN ADDRESS
         L     R15,OUT4CTR              LOAD OUT4 COUNTER
         LA    R5,SELECTS            LOAD ADDRESS OUT4 TABLE
         A     R5,OFF4               *
         BAL   R11,D10COMP              CHECK CONTROL FIELDS
         SPACE
         LA    R1,OUT4DCB               LOAD OUT4 DCB ADDRESS
         BAL   R11,F10WRITE             WRITE OUT4
         AP    OUTCTR4,ONE              ADD 1 TO OUT4 COUNTER
         BAL   R3,D70BR                 RETURN TO D10COMP
         SPACE
A50WRT5  DS    0H
         B     A50WRT6                  WRITE 5 SWITCH
         LA    R3,A50WRT6               LOAD RETURN ADDRESS
         L     R15,OUT5CTR              LOAD OUT5 COUNTER
         LA    R5,SELECTS           LOAD ADDRESS OUT5 TABLE
         A     R5,OFF5               *
         BAL   R11,D10COMP              CHECK CONTROL FIELDS
         SPACE
         LA    R1,OUT5DCB               LOAD ADDRESS OUT5 DCB
         BAL   R11,F10WRITE             WRITE OUT5
         AP    OUTCTR5,ONE              ADD 1 TO OUT5 COUNTER
         BAL   R3,D70BR                 RETURN TO D10COMP
         SPACE
A50WRT6  DS    0H
         B     A50WRT7                  WRITE 6 SWITCH
         LA    R3,A60LOOP               LOAD RETURN ADDRESS
         L     R15,OUT6CTR              LOAD OUT6 COUNTER
         LA    R5,SELECTS           LOAD OUT6 TABLE ADDRESS
         A     R5,OFF6               *
         BAL   R11,D10COMP              CHECK CONTROL FIELDS
         SPACE
         LA    R1,OUT6DCB               LOAD OUT6 DCB ADDRESS
         BAL   R11,F10WRITE             WRITE OUT6
         AP    OUTCTR6,ONE              ADD 1 TO OUT6 COUNTER
         BAL   R3,D70BR                 RETURN TO D10COMP
         SPACE
A50WRT7  DS    0H
         B     A60LOOP                  WRITE 7 SWITCH
         LA    R3,A60LOOP               LOAD RETURN ADDRESS
         L     R15,OUT7CTR              LOAD OUT7 COUNTER
         LA    R5,SELECTS           LOAD OUT7 TABLE ADDRESS
         A     R5,OFF7               *
         BAL   R11,D10COMP              CHECK CONTROL FIELDS
         SPACE
         LA    R1,OUT7DCB               LOAD OUT7 DCB ADDRESS         1
         BAL   R11,F50WRITE             WRITE OUT7                    2
         AP    OUTCTR7,ONE              ADD 1 TO OUT7 COUNTER         3
         BAL   R3,D70BR                 RETURN TO D10COMP             4
         SPACE
A60LOOP  DS    0H
         B     A40READ
         SPACE
A70STATS DS    0H
         OPEN  (SYSOUT,(OUTPUT))        OPEN SYSPRINT FILE
         LA    R1,OUT4            R1 -> TO SYSOUT PARMS
         MVI   P,C' '                    CLEAR PRINT LINE
         MVC   P+1(L'P-1),P             *
         MVC   SEDWDUT1,PLEDWD1         EDIT INPUT RECORDS COUNTER
         ED    SEDWDUT1,INCTR           *
         MVC   P(L'SHDUT1),SHDUT1       MOVE STATS HEAD TO PRINT
         BAL   R11,Y10WSP2              PRINT, SPACE 2
         SPACE
A70STAT1 DS    0H
         B     A70STAT2                 STATS 1 SWITCH
         MVC   SEDWD1,PLEDWD1           EDIT OUT1 COUNTER
         ED    SEDWD1,OUTCTR1           *
         MVC   P(L'SHD1),SHD1           MOVE STATS TO PRINT
         LA    R1,OUT4            R1 -> TO SYSOUT PARMS
         BAL   R11,Y10WSP2              PRINT STATS 1
         SPACE
A70STAT2 DS    0H
         B     A70STAT3                 STATS 2 SWITCH
         MVC   SEDWD2,PLEDWD1           EDIT OUT2 COUNTER
         ED    SEDWD2,OUTCTR2           *
         MVC   P(L'SHD2),SHD2           MOVE STATS2 HEADING TO PRINT
         LA    R1,OUT4            R1 -> TO SYSOUT PARMS
         BAL   R11,Y10WSP2              PRINT STATS 2
         SPACE
A70STAT3 DS    0H
         B     A70STAT4                 STATS 3 SWITCH
         MVC   SEDWD3,PLEDWD1           EDIT OUT3 COUNTER
         ED    SEDWD3,OUTCTR3           *
         MVC   P(L'SHD3),SHD3           MOVE STATS 3 HEAD TO PRINT
         LA    R1,OUT4            R1 -> TO SYSOUT PARMS
         BAL   R11,Y10WSP2              PRINT STATS 3
         SPACE
A70STAT4 DS    0H
         B     A70STAT5                 STATS 4 SWITCH
         MVC   SEDWD4,PLEDWD1           EDIT OUT4 COUNTER
         ED    SEDWD4,OUTCTR4           *
         MVC   P(L'SHD4),SHD4           MOVE STATS 4 HEAD TO PRINT
         LA    R1,OUT4            R1 -> TO SYSOUT PARMS
         BAL   R11,Y10WSP2              PRINT STATS 4
         SPACE
A70STAT5 DS    0H
         B     A70STAT6                 STATS 5 SWITCH
         MVC   SEDWD5,PLEDWD1           EDIT OUT5 COUNTER
         ED    SEDWD5,OUTCTR5           *
         MVC   P(L'SHD5),SHD5           MOVE STATS HEAD 5 TO PRINT
         LA    R1,OUT4            R1 -> TO SYSOUT PARMS
         BAL   R11,Y10WSP2              PRINT STATS 5
         SPACE
A70STAT6 DS    0H
         B     A70STAT7                 STATS 6 SWITCH
         MVC   SEDWD6,PLEDWD1           EDIT OUT6 COUNTER
         ED    SEDWD6,OUTCTR6           *
         MVC   P(L'SHD6),SHD6           MOVE STATS 6 HEAD TO PRINT
         LA    R1,OUT4            R1 -> TO SYSOUT PARMS
         BAL   R11,Y10WSP2              PRINT STATS 6
         SPACE
A70STAT7 DS    0H
         B     A90END                   STATS 7 SWITCH
         MVC   SEDWD7,PLEDWD1           EDIT OUT7 COUNTER
         ED    SEDWD7,OUTCTR7           *
         MVC   P(L'SHD7),SHD7           MOVE STATS 7 HEAD TO PRINT
         LA    R1,OUT4            R1 -> TO SYSOUT PARMS
         BAL   R11,Y10WSP2              PRINT STATS 7
         SPACE
A90END   DS    0H
         L     R13,VSAVE+4              RETURN TO ROOT SECTION
         RETURN (14,12),RC=0            *
         SPACE 2
OFF2     DC    F'2900'               OFFSET TO CF2
OFF3     DC    F'5800'               OFFSET TO CF3
OFF4     DC    F'8700'               OFFSET TO CF4
OFF5     DC    F'11600'              OFFSET TO CF5
OFF6     DC    F'14500'              OFFSET TO CF6
OFF7     DC    F'17400'              OFFSET TO CF7
         EJECT
***********************************************************************
*        R O U T I N E   T O   S E T   U P   D A T E                  *
***********************************************************************
         SPACE 2
B10DATE  DS    0H
         TIME  DEC,SAVETIME,            GET THE SYS TIME            Y2 +
               LINKAGE=SYSTEM,DATETYPE=YYYYMMDD     IN THIS CASE    Y2
         L     R0,SAVETIME              R= TIME                     Y2
         L     R1,SAVETIME+8            R1 = 0YYYYDDD               Y2
         SLL   R1,4                     SHIFT LEFT 4 BITS           Y2
         AH    R1,=H'15'                ADD SIGN...15=F             Y2
*
*        TIME  DEC                      GET DATE
         ST    R1,DWRK1                 STORE DATE
         MVO   DWRK2,DWRK1(2)           SAVE DAY
         UNPK  HD1YR,DWRK2+1(2)         UNPACK YEAR
         MVZ   HD1YR+1(1),HD1YR         CHANGE ZONE TO F
         SPACE
         DP    DWRK2,FOUR               DIVIDE YEAR BY 4
         CP    DWRK2+2(1),ZERO          REMAINDER = 0 ?
         BNE   B30NOLEP                 NO, GO TO PROCESS NO LEAP YEAR
         SPACE
         LA    R7,YTAB3+6               ADD 1 TO JULIAN DAY
         LA    R8,10                    IN TABLE TO COMPENSATE
B20LEAP  AP    0(2,R7),ONE              FOR LEAP YEAR TO
         LA    R7,8(R7)                 MONTHS MARCH
         BCT   R8,B20LEAP               TO DECEMBER
         SPACE
B30NOLEP DS    0H
         ZAP   DWRK3,DWRK1+2(2)         MOVE JULIAN DAY TO WORK AREA
         LA    R7,TABEND                LOAD ADDRESS TABLE END
         LA    R8,8                     LOAD 8
B40      DS    0H
         CP    6(2,R7),DWRK3            COMPARE JUL DAY TO TABLE JUL
         BL    B50                      BRANCH LOW
         SR    R7,R8                    POINT TO NEXT ENTRY
         B     B40                      LOOP BACK TO  40
         SPACE
B50      DS    0H
         MVC   HD1MTH,4(R7)             MOVE MONTH TO REPORT DATE
         SP    DWRK3,6(2,R7)            SUBTRACT JUL DAY IN TABLE
         ED    HD1DAY,DWRK3             FROM CURRENT JUL DAY AND EDIT
         SPACE
B90END   DS    0H
         BR    R11                      RETURN TO CALLER
         SPACE 2
         CNOP  0,4                      ALIGN ON FULLWORD BOUNDARY
DWRK1    DC    PL4'0'
DWRK2    DC    PL3'0'
DWRK3    DC    PL2'0'
FOUR     DC    P'4'
ZERO     DC    P'0'
*
         CNOP  0,4                      ALIGN ON FULLWORD BOUNDARY
SAVETIME DC    XL16'00'                                             Y2
*
         SPACE
YTAB     DC    C' JAN01'
         DC    P'000'
         DC    C' FEB02'
         DC    P'031'
YTAB3    DC    C' MAR03'
         DC    P'059'
         DC    C' APR04'
         DC    P'090'
         DC    C' MAY05'
         DC    P'120'
         DC    C'JUNE06'
         DC    P'151'
         DC    C'JULY07'
         DC    P'181'
         DC    C' AUG08'
         DC    P'212'
         DC    C'SEPT09'
         DC    P'243'
         DC    C' OCT10'
         DC    P'273'
         DC    C' NOV11'
         DC    P'304'
TABEND   DC    C' DEC12'
         DC    P'334'
         EJECT
***********************************************************************
*        C O M P A R E   C O N T R O L   F I E L D S   T O   T A B L E*
***********************************************************************
         SPACE 2
D10COMP  DS    0H
         ST    R11,STORED               SAVE RETURN ADDRESS
*        ST    R2,OFFADDR         SAVE INPUT DATA ADDRESS  ...
*        L     R2,RECADDRO        R2 -> TO OUTPUT DATA ADDRESS  ...
*        ST    R2,OFFADDRO        SAVE IT
D10STBCT LA    R7,5                     LOAD 5 IN REG 7
         NI    OPENFLGS,X'FE'           TURN WRITE SWITCH OFF
         ST    R15,STORED4              SAVE OUT COUNTER
         SPACE
D20LOOP  DS    0H
         CLI   5(R5),X'FF'              SELECT CF USED ?
         BE    D60PTCF                  NO, CHECK NEXT CF
         SPACE
*        CLI   4(R5),C'0'               SELECT ALL VALUES ?
*        BE    D50SWON                  YES, TURN WRITE SWITCH ON
         SPACE
         LA    R8,CONTROLS              LOAD CONTROLS ADDRESS
         A     R8,0(R0,R5)              ADD DISPLACEMENT FROM SELECTAB
         SPACE
         L     R11,VRLTH                GET LTH OF VARIABLE RECORD
         C     R11,0(0,R8)              START LOC IN RECORD ?
         BL    D40NO                    NO, CAN'T COMPARE THIS FIELD
*        LR    R1,R2                    POINT TO VARIABLE RECORD
         SPACE
D20OUT   DS    0H
*        A     R1,0(R0,R8)              ADD START TO RECORD ADDRESS
*        L     R9,0(0,R8)               MOVE HEX LTH TO REG 9
         L     R11,OFFADDRO       R11 -> TO WHERE DATA GOES...
*        L     R9,OFFADDR         R9 -> TO START OF INPUT DATA
*        AR    R2,R9              ADD NEXT START OFFSET
*        A     R9,0(0,R8)         ADD HEX LTH
         L     R9,0(0,R8)         R9 = OFFSET TO THIS FIELD
         S     R9,LASTOFF         - OFFSET TO LAST FIELD
         BCTR  R9,0               R9 = HEX LTH TO MOVE
         L     R2,0(0,R8)         R2 = OFFSET TO THIS FIELD
         ST    R2,LASTOFF         SAVE IT
         L     R2,OFFADDR         R2 -> TO WHERE DATA COMES FROM
         SPACE
D40SETBR DS    0H
*        MVC   D40BR+1(1),4(R5)         SET BRANCH CONDITION
*        EX    R9,D40MVC                MOVE DATA
*        LA    R9,1(0,R9)         R9 = LTH MOVED
         SPACE 1
         LA    R9,1(0,R9)         R9 = REAL LTH TO MOVE
         STM   R2,R5,SAVE2TO5     SAVE SOME REGS
*                                 CAUSE MVCL CLOBBERS "TO" REG...
         LR    R4,R11             R4 -> TO WHERE DATA GOES
         LR    R5,R9              R5 = TOTAL LTH TO MOVE TO
*                                 R2 -> TO WHERE DATA COMES FROM
         LR    R3,R9              R3 = TOTAL LTH TO MOVE FROM
         SPACE 1
         MVCL  R4,R2              MOVE PART OF RECORD
         LM    R2,R5,SAVE2TO5     LOAD SOME REGS
*
D40BR    BC    0,D50SWON                BRANCH
         AR    R11,R9             R11 -> TO WHERE NEXT DATA GOES...
         CLI   8(R8),C'A'         IS DATE ALPHA?
         BNE   NOTALPHA           NO
         L     R1,4(0,R8)         R1 = LTH TO MOVE
*        BCTR  R1,0               R1 = HEX LTH TO MOVE
         EX    R1,D40MVC2               MOVE DATA
*        LA    R1,1(0,R1)         R1 = LTH MOVED
*        MVC   0(2,R11),=C'19'    SET ALPHA CENTURY TO 19
*        LA    R11,2(0,R11)       SET R11
*        AR    R11,R1             ADD TO LTH
         LA    R11,1(R1,R11)      ADD TO LTH, +1
         ST    R11,OFFADDRO       R11 -> TO WHERE NEXT DATA GOES...
         L     R11,VRLTHL         R11 = DATA LEFT TO MOVE...
         SR    R11,R9             - WHAT WE MOVED
         ST    R11,VRLTHL         R11 = DATA LEFT TO MOVE...
         LR    R11,R2             R11 -> AT INPUT DATA
         AR    R11,R9             R11 -> AT NEXT DATA TO MOVE
         ST    R11,OFFADDR        SAVE IT
         L     R11,VRLTHO         R11 = LTH OF DATA MOVED...
*        AH    R11,=H'2'          + 2 FOR "19"
*        AR    R11,R1             ADD LTH OF ADDED DATA
         LA    R11,1(R1,R11)      ADD TO LTH, +1
         ST    R11,VRLTHO         SAVE LTH MOVED...
         B     D50SWON            TURN WRITE SWITCH ON
         SPACE
NOTALPHA DS    0H
*        CLI   8(R8),C'P'         IS DATE PACKED?
*        BNE   NOTPACK            NO
*        MVC   0(1,R11),X'19'     SET PACKED CENTURY TO 19
         L     R1,4(0,R8)         R1 = LTH TO MOVE
*        BCTR  R1,0               R1 = HEX LTH TO MOVE
         EX    R1,D40MVC2               MOVE DATA
*        LA    R1,1(0,R1)         R1 = LTH MOVED
*        AR    R11,R1             ADD TO LTH
         LA    R11,1(R1,R11)      ADD TO LTH, +1
*        MVI   0(R11),X'19'       SET PACKED CENTURY TO 19
*        LA    R11,1(0,R11)       SET R11
         ST    R11,OFFADDRO       R11 -> TO WHERE DATA GOES...
         L     R11,VRLTHL         R11 = DATA LEFT TO MOVE...
         SR    R11,R9             - WHAT WE MOVED
         ST    R11,VRLTHL         R11 = DATA LEFT TO MOVE...
         LR    R11,R2             R11 -> AT INPUT DATA
         AR    R11,R9             R11 -> AT NEXT DATA TO MOVE
         ST    R11,OFFADDR        SAVE IT
         L     R11,VRLTHO         R11 = LTH OF DATA MOVED...
*        AH    R11,=H'1'          + 1 FOR "19"
*        AR    R11,R1             ADD LTH OF ADDED DATA
         LA    R11,1(R1,R11)      ADD TO LTH, +1
         ST    R11,VRLTHO         SAVE LTH MOVED...
         B     D50SWON            TURN WRITE SWITCH ON
         SPACE
NOTPACK  DS    0H
         SPACE
D40NO    DS    0H
         NI    OPENFLGS,X'FE'           TURN WRITE SWITCH OFF
         LR    R11,R7                R11 = NBR OF CF'S LEFT
         MH    R11,H116              R11 * 116 = LTH OF CF'S LEFT
         AR    R5,R11                R5 -> TO NEXT CF SET FOR THIS OUT
         B     D70BR                    CONDITION NOT MET, REJECT TEST
         SPACE
D40MVC   MVC   0(0,R11),0(R2)     MOVE DATA
D40MVC2  MVC   0(0,R11),5(R5)     MOVE DATA 2...
D40CLC   CLC   0(0,R1),5(R5)            COMPARE
         SPACE
D50SWON  DS    0H
         OI    OPENFLGS,X'01'           TURN WRITE SWITCH ON
         SPACE
D60PTCF  DS    0H
         LA    R5,116(R5)               POINT TO NEXT CF
H116     EQU   *-2                   HALFWORD OF 116
         BCT   R7,D20LOOP               5 CF'S PROCESSED ?
*
         L     R9,VRLTHL          R9 = DATA LEFT TO MOVE...
*        BCTR  R9,0               R9 = HEX LTH TO MOVE
         LTR   R9,R9              R9 ALREADY 0?
         BZ    NOMOVE2            YES, DON'T SUBT 1
         L     R2,OFFADDR         R2 -> TO WHERE DATA COMES FROM
         L     R11,OFFADDRO       R11 -> TO WHERE DATA GOES...
*        EX    R9,D40MVC                MOVE DATA
         SPACE 1
*        LA    R9,1(0,R9)         R9 = REAL LTH TO MOVE
         STM   R2,R5,SAVE2TO5     SAVE SOME REGS
*                                 CAUSE MVCL CLOBBERS "TO" REG...
         LR    R4,R11             R4 -> TO WHERE DATA GOES
         LR    R5,R9              R5 = TOTAL LTH TO MOVE TO
*                                 R2 -> TO WHERE DATA COMES FROM
         LR    R3,R9              R3 = TOTAL LTH TO MOVE FROM
         SPACE 1
         MVCL  R4,R2              MOVE PART OF RECORD
         LM    R2,R5,SAVE2TO5     LOAD SOME REGS
*
         SPACE
NOMOVE2  DS    0H
*        LA    R9,1(0,R9)         R9 = LTH MOVED
         L     R11,VRLTHO         R11 = LTH OF DATA MOVED...
*        AH    R11,H4                ADD OFFSET (0 IF RDW, 4 IF DATA)
*        ST    R11,VRLTHO         SAVE LTH MOVED...
         L     R9,RECADDRO        R9 -> TO OUTPUT RECORD
         STH   R11,0(0,R9)        UPDATE LTH
*
         TM    OPENFLGS,X'01'           YES, WRITE RECORD ?
         BNO   D70BR                    NO, GO TO D70BR
         SPACE
         L     R11,STORED               LOAD RETURN ADDRESS
         BR    R11                      RETURN TO WRITE RECORD
         SPACE
D70BR    DS    0H
         TM    OPENFLGS,X'01'           RECORD ALREADY WRITTEN ?
         BO    D80BR                    YES, CHECK NEXT FILE
         SPACE
         L     R15,STORED4              LOAD OUT COUNTER
         BCT   R15,D10STBCT             ANY MORE OUTS FOR THIS TEST ?
D80BR    DS    0H
         BR    R3                       NO, SET UP NEXT OUT TEST
         SPACE
STORED   DS    F
STORED4  DS    F                        OUT COUNTER
SAVE2TO5 DS    4F                 SAVE AREA
MAXLTHO  DC    H'0'               MAX LTH OF OUTPUT BUFFER
         EJECT
***********************************************************************
*        R O U T I N E   T O   P R I N T   R E P O R T S   1,2,3      *
***********************************************************************
         SPACE 2
E10PRT   DS    0H
         ST    R11,STORE1               SAVE RETURN ADDRESS
         ST    R1,STORE2          SAVE A(OUT1) PARMS
         L     R7,VRLTH           R7 = VARIABLE RECORD LTH
         LR    R9,R2              R9 -> TO V RECORD
E20LOOP  L     R3,8(0,R1)         R3 -> LINE COUNTER
         CP    0(3,R3),FULLPAGE   IS PAGE FULL ?
         BL    E30                NO
         BAL   R11,Y10SKIP1       YES, SKIP TO NEW PAGE
         L     R1,STORE2          R1 -> TO PARMS
         BAL   R11,Y10SPCE3       SKIP DOWN 3 LINES
         L     R1,STORE2          R1 -> TO PARMS
         L     R3,4(0,R1)         R3 -> TO PAGE COUNTER
         MVC   HD1PAGE,PLEDWD1    EDIT PAGE COUNTER
         ED    HD1PAGE,0(R3)      *
         MVC   P(L'PHD),PHD       MOVE HEADING TO PRINT
         MVC   P+100(L'HD1),HD1   *
         BAL   R11,Y10WSP2        PRINT HEADING, SPACE 2
         SPACE
E30      DS    0H
         LA    R8,132             R8 = LTH OF OUTPUT LINE
H132     EQU   *-2                HALFWORD 132
E40      DS    0H
         CR    R7,R8              REC LTH OVER 132?
         BH    E50                YES, PRINT IN 132 BYTE CHUNKS
         SPACE
         SH    R7,H1              R7 = LRECL - 1
         EX    R7,MOVETOP         MOVE DATA TO PRINT LINE
         L     R1,STORE2          R1 -> TO PARMS
         BAL   R11,Y10WSP2        PRINT LAST LINE, SPACE 2
         L     R11,STORE1         LOAD RETURN ADDRESS
         BR    R11                GO BACK TO CALLER
         SPACE
E50      DS    0H
         SH    R8,H1              R8= 131
         EX    R8,MOVETOP         MOVE 132 BYTES TO PRINT
         L     R1,STORE2          R1 -> TO PARMS
         BAL   R11,Y10WSP1        PRINT,SPACE 1
         SPACE
         SH    R7,H132            R7 = LRECL REMAINING
         AH    R9,H132            R9 -> TO NEXT PART OF RECORD
         L     R1,STORE2          R1 -> TO PARMS
         B     E20LOOP            PRINT NEXT CHUNK OF RECORD
         SPACE 2
MOVETOP  MVC   P(1),0(R9)         MOVE DATA TO P
FULLPAGE DC    PL3'50'
H1       DC    H'1'
H4       DC    H'4'
OUT1     DC    A(OUT1DCB)
         DC    A(PAGECTR1)
         DC    A(LINECTR1)
         SPACE
OUT2     DC    A(OUT2DCB)
         DC    A(PAGECTR2)
         DC    A(LINECTR2)
         SPACE
OUT3     DC    A(OUT3DCB)
         DC    A(PAGECTR3)
         DC    A(LINECTR3)
         SPACE
OUT4     DC    A(SYSOUT)
         DC    A(PAGECTR4)
         DC    A(LINECTR4)
         SPACE
PAGECTR4 DC    PL3'0'
LINECTR4 DC    PL3'75'
         SPACE
         SPACE
STORE1   DS    F                        RETURN ADDRESS
STORE2   DS    F
STORE5   DS    F
STOREDCB DS    F                        DCB ADDRESS
NINES    DC    C' 999999999'
SPACES   DC    CL10' '
PHD      DS    CL74
         EJECT
***********************************************************************
*        R O U T I N E   T O   P R I N T   R E P O R T S   4,5,6      *
***********************************************************************
         SPACE 2
F10WRITE DS    0H
         L     R0,RECADDRO              R0 -> TO NEW RECORD
         PUT   (1),(0)                  PRINT
         BR    R11                      RETURN
         SPACE
F50WRITE DS    0H
         PUT   (1)                      GET OUTPUT AREA
         LR    R15,R1                   R15 -> TO OUTPUT BUFFER
         L     R7,VRLTH                 R7 = LTH OF INPUT RECORD
         LH    R8,OUT7DCB+82            R8 = OUTPUT LRECL
         SPACE
F55COMP  DS    0H
         CH    R8,H256            LRECL OVER 256 ?
         BH    F60                YES, CLEAR IN CHUNKS
         SPACE
         SH    R8,=H'2'           R8 = LRECL - 2
         MVI   0(R1),X'40'        CLEAR BUFFER
         EX    R8,CLEAROUT        *
         B     F65MOVE            MOVE INPUT TO OUTPUT
         SPACE
F60      DS    0H
         MVI   0(R1),X'40'        CLEAR OUTPUT BUFFER
         MVC   1(255,R1),0(R1)    *
         LA    R1,256(R1,0)       ADD 256 TO R1
H256     EQU   *-2                HALFWORD 256
         SH    R8,H256            R8 = LRECL - 256
         B     F55COMP            CLEAR NEXT CHUNK OF BUFFER
         SPACE
F65MOVE  DS    0H
         LR    R3,R2              R3 -> TO INPUT RECORD
         LH    R8,OUT7DCB+82      R8 = OUTPUT LRECL
         CR    R7,R8              IS OUTPUT LONGER THAN INPUT ?
         BL    F70COMP2           YES, MOVE ALL OF INPUT
         LR    R7,R8              NO, MOVE OUTPUT LENGTH ONLY
         SPACE
F70COMP2 DS    0H
         CH    R7,H256            INPUT LTH OVER 256 ?
         BH    F80                YES, MOVE IN CHUNKS
         SH    R7,H1              R7 = IBM LTH OF INPUT
         EX    R7,MOVEDATA        MOVE INPUT TO OUTPUT
         BR    R11                RETURN TO CALLER
         SPACE
CLEAROUT MVC   1(0,R1),0(R1)      CLEAR BUFFER
MOVEDATA MVC   0(0,R15),0(R3)     MOVE INPUT TO OUTPUT
         SPACE
F80      DS    0H
         MVC   0(256,R15),0(R3)   MOVE INPUT TO OUTPUT
         SH    R7,H256            R7 = LTH LEFT
         AH    R3,H256            R3 -> REST OF INPUT
         AH    R15,H256           R15 -> TO REST OF OUTPUT
         B     F70COMP2           MOVE REST OF DATA
         EJECT
***********************************************************************
*        P R I N T E R   A N D   C A R R I A G E   C O N T R O L      *
***********************************************************************
         SPACE 2
Y10SKIP1 DS    0H
         MVI   CTLCHR,X'8B'             SKIP1 TO CHANNEL 1
         L     R3,4(0,R1)         R3 -> TO PAGE COUNTER
         AP    0(3,R3),ONE        ADD 1 TO PAGE COUNT
         L     R3,8(0,R1)         R3 -> TO LINE COUNTER
         SP    0(3,R3),0(3,R3)    CLEAR LINE COUNTER
         B     Y40
         SPACE
Y10SPCE1 DS    0H
         MVI   CTLCHR,X'0B'             SPACE 1 IMMEDIATE
         L     R3,8(0,R1)         R3 -> TO LINE COUNTER
         AP    0(3,R3),ONE        ADD 1 TO LINE COUNT
         B     Y40
         SPACE
Y10SPCE2 DS    0H
         MVI   CTLCHR,X'13'             SPACE 2 IMMEDIATE
         L     R3,8(0,R1)         R3 -> TO LINE COUNTER
         AP    0(3,R3),TWO        ADD 2 TO LINE COUNTER
         B     Y40
         SPACE
Y10SPCE3 DS    0H
         MVI   CTLCHR,X'1B'             SPACE 3 IMMEDIATE
         L     R3,8(0,R1)         R3 -> TO LINE COUNTER
         AP    0(3,R3),THREE      ADD 3 TO LINE COUNTER
         B     Y40
         SPACE
Y10WSP1  DS    0H
         MVI   CTLCHR,X'09'             PRINT, SPACE 1
         L     R3,8(0,R1)         R3 -> TO LINE COUNTER
         AP    0(3,R3),ONE        ADD 1 TO LINE COUNTER
         B     Y40
         SPACE
Y10WSP2  DS    0H
         MVI   CTLCHR,X'11'             PRINT, SPACE 2
         L     R3,8(0,R1)         R3 -> TO LINE COUNTER
         AP    0(3,R3),TWO        ADD 2 TO LINE COUNTER
         B     Y40
         SPACE
Y10WSP3  DS    0H
         MVI   CTLCHR,X'19'             PRINT, SPACE 3
         L     R3,8(0,R1)         R3 -> TO LINE COUNTER
         AP    0(3,R3),THREE      ADD 3 TO LINE COUNTER
         SPACE
Y40      DS    0H
         L     R1,0(0,R1)               LOAD DCB ADDRESS
         PUT   (1),PRINT                PRINT
         MVI   P,C' '                   CLEAR PRINT BUFFER
         MVC   P+1(L'P-1),P             *
         SPACE
         BR    R11                      RETURN
         EJECT
***********************************************************************
*        IF THERE IS NO RECFM, LRECL OR BLKSIZE ON FILES              *
*        OUT4, OUT5, OUT6 OR OUT7 AND THE OPEN BOMBS, WE              *
*        WILL TRY TO RECOVER BY MAKING THEIR DCB INFORMATION          *
*        THE SAME AS THE INPUT FILE.                                  *
***********************************************************************
         SPACE 2
DCBEXIT  DS    0H
         USING DCBEXIT,R15        SET BASE ADDRESSABLITY
         CLI   36(R1),X'00'       RECFM SET ?
         BNE   DCB10              YES, CHECK BLKSIZE
         MVC   36(1,R1),INFILE+36 NO, SET SAME AS INPUT FILE
         SPACE 1
DCB10    DS    0H
         CLC   62(2,R1),DWRK1     BLKSIZE SET ?
         BNE   DCB20              YES, CHECK LRECL
         MVC   62(2,R1),INFILE+62 NO, SET SAME AS INPUT FILE
         SPACE 1
DCB20    DS    0H
         CLC   82(2,R1),DWRK1     LRECL SET ?
         BNE   DCB30              YES, GO BACK TO OPEN
         MVC   82(2,R1),INFILE+82 NO, SET SAME AS INPUT FILE
         SPACE 1
DCB30    DS    0H
         BR    R14                GO BACK TO OPEN
         DROP  R15                DROP R15 AS A BASE
         EJECT
***********************************************************************
*        F I L E    D E C L A R E S   F O R   V P R I N T             *
***********************************************************************
         SPACE 2
         PRINT NOGEN
OUT1DCB  DCB   DDNAME=OUT1,DSORG=PS,MACRF=PM,RECFM=FBM,                +
               LRECL=133,BLKSIZE=665
OUT2DCB  DCB   DDNAME=OUT2,DSORG=PS,MACRF=PM,RECFM=FBM,                +
               LRECL=133,BLKSIZE=665
OUT3DCB  DCB   DDNAME=OUT3,DSORG=PS,MACRF=PM,RECFM=FBM,                +
               LRECL=133,BLKSIZE=665
OUT4DCB  DCB   DDNAME=OUT4,DSORG=PS,MACRF=PM,EXLST=BLKEXLST
OUT5DCB  DCB   DDNAME=OUT5,DSORG=PS,MACRF=PM,EXLST=BLKEXLST
OUT6DCB  DCB   DDNAME=OUT6,DSORG=PS,MACRF=PM,EXLST=BLKEXLST
OUT7DCB  DCB   DDNAME=OUT7,DSORG=PS,MACRF=PL,RECFM=FB,EXLST=BLKEXLST
BLKEXLST DC    X'85',AL3(DCBEXIT)
INFILE   DCB   DDNAME=TAPEIN,DSORG=PS,MACRF=GM,EODAD=A70STATS
SYSOUT   DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,RECFM=FBM,            +
               LRECL=133,BLKSIZE=665
         PRINT GEN
         SPACE 2
***********************************************************************
*        D E C L A R A T I V E S   F O R   V P R I N T                *
***********************************************************************
         SPACE
VSAVE    DC    18F'0'                   REGISTER SAVE AREA
VRLTH    DC    F'0'               LTH OF INPUT RECORD
VRLTHL   DC    F'0'               LTH OF INPUT RECORD LEFT TO MOVE
VRLTHO   DC    F'0'               LTH OF OUTPUT RECORD
*VRLTH2L DC    F'0'               LTH OF OUTPUT RECORD LEFT TO MOVE
RECADDR  DC    F'0'               ADDRESS OF INPUT RECORD
OFFADDR  DC    F'0'               OFFSET TO INPUT DATA TO MOVE
LASTOFF  DC    F'0'               OFFSET TO LAST MOVED DATA
RECADDRO DC    F'0'               ADDRESS OF OUTPUT RECORD
OFFADDRO DC    F'0'               OFFSET TO OUTPUT DATA AREA
PAGECTR1 DC    PL3'0'                   OUT1 PAGE COUNTER
PAGECTR2 DC    PL3'0'                   OUT2 PAGE COUNTER
PAGECTR3 DC    PL3'0'                   OUT3 PAGE COUNTER
LINECTR1 DC    PL3'75'            OUT1 LINE COUNTER
LINECTR2 DC    PL3'75'            OUT2 LINE COUNTER
LINECTR3 DC    PL3'75'            OUT3 LINE COUNTER
INCTR    DC    PL4'0'                   INPUT RECORDS COUNTER
OUTCTR1  DC    PL4'0'                   RECORDS ON OUT1 COUNTER
OUTCTR2  DC    PL4'0'                   RECORDS ON OUT2 COUNTER
OUTCTR3  DC    PL4'0'                   RECORDS ON OUT3 COUNTER
OUTCTR4  DC    PL4'0'                   RECORDS ON OUT4 COUNTER
OUTCTR5  DC    PL4'0'                   RECORDS ON OUT5 COUNTER
OUTCTR6  DC    PL4'0'                   RECORDS ON OUT6 COUNTER
OUTCTR7  DC    PL4'0'             RECORDS ON OUT7 COUNTER
ONE      DC    P'1'
TWO      DC    P'2'
THREE    DC    P'3'
HD1      DS    0CL30
         DC    C'DATE'
HD1DAY   DC    X'40202020'
         DC    C'/'
HD1MTH   DS    CL2
         DC    C'/'
HD1YR    DS    CL2
         DC    CL10'     PAGE'
HD1PAGE  DS    CL6
PRINT    DS    0CL133
CTLCHR   DC    X'09'
P        DS    CL132
PLEDWD1  DC    12X'4020202020202020212040'
         SPACE
*                                       END OF FILE MESSAGES
         SPACE
SHD1     DS    0CL58
         DC    CL20' '
SEDWD1   DS    CL8
         DC    CL30'  RECORDS WRITTEN ON OUT1'
SHD2     DS    0CL58
         DC    CL20' '
SEDWD2   DS    CL8
         DC    CL30'  RECORDS WRITTEN ON OUT2'
SHD3     DS    0CL58
         DC    CL20' '
SEDWD3   DS    CL8
         DC    CL30'  RECORDS WRITTEN ON OUT3'
SHD4     DS    0CL58
         DC    CL20' '
SEDWD4   DS    CL8
         DC    CL30'  RECORDS WRITTEN ON OUT4'
SHD5     DS    0CL58
         DC    CL20' '
SEDWD5   DS    CL8
         DC    CL30'  RECORDS WRITTEN ON OUT5'
SHD6     DS    0CL58
         DC    CL20' '
SEDWD6   DS    CL8
         DC    CL30'  RECORDS WRITTEN ON OUT6'
SHD7     DS    0CL58
         DC    CL20' '
SEDWD7   DS    CL8
         DC    CL30'  RECORDS WRITTEN ON OUT7'
SHDUT1   DS    0CL58
         DC    CL20' '
SEDWDUT1 DS    CL8
         DC    CL30'  RECORDS READ ON TAPEIN'
         SPACE
         LTORG
R0       EQU   0                       REGISTER EQUATES
R1       EQU   1                       *
R2       EQU   2                       *
R3       EQU   3                       *
R4       EQU   4                       *
R5       EQU   5                       *
R6       EQU   6                       *
R7       EQU   7                       *
R8       EQU   8                       *
R9       EQU   9                       *
R10      EQU   10                      *
R11      EQU   11                      *
R12      EQU   12                      *
R13      EQU   13                      *
R14      EQU   14                      *
R15      EQU   15                      *
CONTROLS DSECT
         COPY  SDP10
SELECTS  DS    0F
         COPY  SDP20
VPRINT   CSECT
         END   VPRINT
//LKED.SYSLMOD DD DSN=HALL.LINKLIB(DATEVB),DISP=SHR
//
//*                 NO OVERLAY FOR TESTING...
//*
//LKED.OLDIN DD *
         ENTRY ROOTSECT
       OVERLAY ONE
        INSERT CTRLEDIT
       OVERLAY ONE
        INSERT VPRINT
//
