//CALLIDC  JOB
//*    DSN=CBT.SOURCE(CALLIDC)
/*ROUTE PRINT R7
//* EXEC HLASMCL,PARMC='NOALIGN,NORLD',CLASS='*',COND.LKED=(7,LT,ASM)
//S EXEC HLASMCL,PARMC='ALIGN,NORLD,ESD',
//             CLASS='*',COND.LKED=(7,LT,ASM)
//ASM.SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR
//   DD DSN=CBT.SOURCE,DISP=SHR  IF HDUMP USED.....
//ASM.SYSIN DD *
*                                                                   RH
*        THIS  VERSION USES IDCAMS TO GET THE VOLSERS               RH
*        A DATA SET IS CATALOGED TO....                             RH
*                                                                   RH
*                                                                   RH
*                                                                   RH
*              MACRO TO DUMP CORE                                   RH
*                                                                   RH
*        COPY  HDUMP                                                RH
*                                                                   RH
*              END OF MACRO                                  DEBUG  RH
*                                                                   RH
*                                                                   RH
*        JCL MUST STEPLIB TO DSN CONTAINING HALLDUMP...             RH
*                                                                   RH
*                  THIS IS CODE TO DUMP CORE                 DEBUG  RH
*        SPACE 4                                             DEBUG  RH
*                                 DUMP 1024 BYTES AT R12     DEBUG  RH
*        HDUMP OUTDCB,R12,1024,NOTOPEN,OPEN                  DEBUG  RH
*        L     R3,DSSEJFCB        R3 -> TO JFCB              DEBUG  RH
*                                 DUMP 1024 BYTES AT JFCB    DEBUG  RH
*        HDUMP OUTDCB,R3,1024,OPEN,CLOSE                     DEBUG  RH
*        HDUMP OUTDCB,0,0,TITLE='DUMP REGS ONLY'             DEBUG  RH
*        SPACE 1                                             DEBUG  RH
*                  THIS IS END OF CODE TO DUMP CORE          DEBUG  RH
*                                                                   RH
*                                                                   RH
         SPACE 1
*        STANDARD REGISTER EQUATES. B.C. GOVERNMENT.
         SPACE 1
*        GENERAL PURPOSE REGISTERS.
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
*        FLOATING POINT
FL0      EQU   0
FL2      EQU   2
FL4      EQU   4
FL6      EQU   6
         SPACE 2
BASE     EQU   12
*DAMSV   CSECT
*START   DS    0H
*
*        ENTRY POINT
*
CALLIDC  CSECT
CALLIDC  AMODE 24
CALLIDC  RMODE 24
         USING *,R15      GET TEMP ADDRESSABILITY
         B     AROUND             BRANCH AROUND DUMP TITLE
         DC    AL1(EYELTH)        LTH OF EYE CATCHER
EYECATCH DS    0C
         DC    C'CALLIDC'         PROGRAM NAME
         DC    C' VERSION 2.0 '   VERSION
         DC    CL8'&SYSDATE'      DATE WRITTEN
         DC    CL6'&SYSTIME'      TIME WRITTEN
         DC    C'..MAKE 31-BIT COMPLIANT'    COMMENT
*        DC    C'..HANDLE AMODE 31 MODULES'    COMMENT
EYELTH   EQU   *-EYECATCH         LTH OF EYE CATCHER
         SPACE 1
AROUND   DS    0H
         LA    R1,0(0,R1)         CLEAR HI-ORDER BYTE FOR 31 BIT
         LA    R13,0(0,R13)       CLEAR HI-ORDER BYTE FOR 31 BIT
         BSM   R14,0              SAVE CURRENT AMODE
         STM   R14,R12,12(R13)    SAVE CALLERS REGS
         LR    R12,R15            SET OUR 1ST BASE REG
         DROP  R15                DROP TEMP BASE
         USING CALLIDC,R12,R11    SET OUR ADDRESSABILITY
         LA    R11,4095(0,R12)   LOAD SECOND BASE REGISTER
         LA    R11,1(0,R11)      LOAD SECOND BASE REGISTER
         SPACE 1
         LA    15,SAVEAREA
         ST    13,4(15)
         ST    15,8(13)
         LR    13,15
         B     CONTINUE
         SPACE
SAVEAREA DC    18F'0'
         SPACE
CONTINUE DS    0H
         ST    R1,PARMADDR        SAVE PARM ADDRESS
         OPEN  (REPORT,(OUTPUT))
         TM    REPORT+48,X'10'    DID REPORT FILE OPEN ?            RH
         BO    GETCAT2            YES                               RH
         DC    H'0'
*        BZ    NEXTCAT            NO                                RH
         SPACE
GETCAT2  DS    0H
*        RDJFCB STEPCAT           READ STEPCAT JFCB
         GETMAIN LU,LA=VVDSLTH,A=VVDSADDR GET CORE FOR VVDS RECS
         L     R1,VVDSADDR        R1 ->  VVDS  CORE
         ST    R1,VVDSREC         SAVE IT'S ADDRESS FOR IDCAMS EXIT
         OPEN  (INFILE,(INPUT))   OPEN CATALOG NAME FILE
         L     R1,VVDSLTH         R1 = LTH OF AREA
         LA    R1,0(0,R1)         CLEAR HI ORDER BYTE
         SR    R0,R0              CLEAR R0
         D     R0,=F'12'          R1 NOW = NBR VVDS AREAS
         L     R14,=V(MAXVVDS)    R14 -> TO VVDS MAX CTR
         ST    R1,0(0,R14)        SAVE IT
         SPACE
         L     R1,PARMADDR        R1 ->  PARM, IF ANY
         L     R1,0(0,R1)         R1 -> TO PARMS
         LH    R2,0(0,R1)         R2 = PARM LTH
         LTR   R2,R2              IS THERE A PARM ?
         BZ    NEXTCAT            NO, GO READ CATIN
         LA    R3,2(0,R1)         R3 -> TO PARM
         LR    R4,R3              R4 -> TO PARM
         SPACE 1
LOOP     DS    0H
         CLI   0(R4),C'.'         IS CHAR A PERIOD?
         BE    ENDLOOP            YES, END OF LOCATE NAME
         LA    R4,1(0,R4)         NO, R4 -> TO NEXT BYTE
         BCT   R2,LOOP            LOOK AT ALL CHARS IN PARM
         LH    R2,0(0,R1)         R2 = LTH OF PARM
         CH    R2,=H'8'           IS LTH OVER 8?
         BH    SVC3               YES, ERROR ALSO
         BCTR  R2,0               R2 = HEX LTH
         EX    R2,SETNAME         SET UP ATTACH NAME
         B     GETCAT             GO LOCATE CATALOG NAME
         SPACE 1
ENDLOOP  DS    0H
         BCTR  R2,0               -1 FOR PERIOD
         SR    R4,R3              R4 = LTH OF ATTACH NAME
         CH    R4,=H'8'           IS LTH OVER 8 ?
         BH    SVC3               YES, ERROR
         BCTR  R4,0               -1 TO GET HEX LTH
         EX    R4,SETNAME         SET UP ATTACH NAME
         B     GETCAT             GO AROUND DC'S
         SPACE
SETNAME  MVC   DSNAME(0),2(R1)    SET UP ATTACH NAME
PARMADDR DS    F                  SET UP ATTACH NAME
         SPACE 2
*        TCAM   LIST
TCAML    DS     0F
TCFLGS   DC     X'44000000'              TCAM ON DSN
TCAMDSN  DC     A(DSNAME)                A(DSN)
         DC     A(0)                     VOL POINTER
         DC     A(TWORK)                 A(265 BYTE WORK AREA)
         DS    0D                 PUT ON DOUBLE WORD BOUNDARY
TWORK    DS     0CL265
VOLCNT   DC     H'0'                     VOL COUNT
DEVTYP   DC     XL4'00'                  DEVICE TYPE
TVOL     DC     CL6' '                   FIRST VOL SER
         DC     CL244' '                 REST OF TCAML DATA
         DC     CL12' '                  REST OF TCAML DATA
         SPACE 2
DSNAME   DC    CL44' '            DSNAME FOR LOCATE
         SPACE
GETCAT   DS    0H
         LOCATE TCAML                    GO FIND VOL SER
         LTR    R15,R15                  WAS IT FOUND ?
         BNZ   NEXTCAT            NO, GO READ CATIN
         SPACE 1
         CLC   DSNAME(8),=C'CATALOG.' ICF CATALOG POINTER?       XA RH
         BNE   NEXTCAT            NO, GO READ CATIN                 RH
         MVC   INCATLG,DSNAME     MOVE CATALOG NAME TO IDCAMS CTL STMT
         B     NOSMCA             GO DO IDCAMS CALL
         SPACE
NEXTCAT  DS    0H
         L     R1,VVDSADDR        R1 ->  VVDS  CORE
         ST    R1,VVDSREC         SAVE IT'S ADDRESS FOR IDCAMS EXIT
         SPACE
         TM    INFILE+48,X'10'    DID NAME FILE OPEN ?              RH
         BZ    SVC3               NO                                RH
         GET   INFILE,JFCB        READ A CATALOG NAME
         MVC   INCATLG,JFCBDSNM   MOVE CATALOG NAME TO IDCAMS CTL STMT
         SPACE
NOSMCA   DS    0H                                                   RH
         LINK  EP=IDCAMS,PARAM=(OPTIONS,DNAMES,PGNO,IOLIST),VL=1
         LTR   R15,R15            WAS LINK OKAY
         BZ    SVCOKAY2           YES
         SPACE 1
*
*              CONVERT RC TO DECIMAL
*
         ST    R15,DWORD          SAVE RC
         MVC   LOCRC(3),DWORD+1   PUT IN HEX RC
         UNPK  LOCRC(4),DWORD+2(3) UNPACK ECB             DEBUG
         MVI   LOCRC+3,X'EF'      TRANSLATES TO BLANK     DEBUG
         TR    LOCRC(4),TRTAB-239 TRANSLATE TO DISPLAY    DEBUG
         SPACE 1
         SPACE 1
         MVC   MSG(L'LOCMSG3),LOCMSG3  MOVE MSG TO LINE             RH
         LA    R15,MSG+L'LOCMSG3+2                                  RH
         MVC   0(LOCMSGRL,R15),LOCMSGR PUT RC IN LINE               RH
         B     PRINTIT            PRINT LOCATE ERROR MSG            RH
         SPACE 1
SVCOKAY2 DS    0H                                                   RH
         MVC   MSG(L'LOCMSG4),LOCMSG4  MOVE MSG TO LINE             RH
         SPACE 1
PRINTIT  DS    0H
*
*              IDCAMS EXITS WILL  HAVE CLOSED THE REPORT            RH
*              DCB, SO RE-OPEN IT                                   RH
*
         OPEN  (REPORT,(OUTPUT))
         TM    REPORT+48,X'10'    DID REPORT FILE OPEN ?            RH
         BO    GETCAT3            YES                               RH
         DC    H'0'
         SPACE
GETCAT3  DS    0H
         PUT   REPORT,INFO1       OUTPUT THE MSG
         MVI   MSG,C' '           CLEAR PRINT LINE
         MVC   MSG+1(131),MSG     *
         SPACE 1



         TM    SW,X'40'           END OF LINKS ?
         BZ    NOSMCA             NO,  DO ANOTHER ONE
         SPACE 1
         NI    SW,255-X'40'       CLEAR SWITCH
         L     R1,VVDSADDR        R1 -> TO 1ST VVDS
         ST    R1,VVDSREC         SAVE IT'S ADDRESS
*        OPEN  (REPORT,(OUTPUT))
*        TM    REPORT+48,X'10'    DID REPORT FILE OPEN ?            RH
*        BZ    NEXTCAT            NO                                RH

*        HDUMP OUTDCB,0,0,NOTOPEN,OPEN   OPEN SYSOUT         DEBUG  RH
*        HDUMP OUTDCB,0,0,TITLE='BACK FROM IDCAMS'           DEBUG  RH
         SPACE 1
DYNLOOP  DS    0H
         L     R2,VVDSREC         R2 -> TO VVDS NAME
*                                 DUMP 44 BYTES AT R2        DEBUG  RH
*        HDUMP OUTDCB,R2,44,OPEN,OPEN                        DEBUG  RH
*        L     R3,DSSEJFCB        R3 -> TO JFCB              DEBUG  RH
*                                 DUMP 1024 BYTES AT JFCB    DEBUG  RH
*        HDUMP OUTDCB,R3,1024,OPEN,CLOSE                     DEBUG  RH
*        HDUMP OUTDCB,0,0,TITLE='DUMP REGS ONLY'             DEBUG  RH
         MVC   PRINT+1(6),6(R2)   MVC IT TO PRINT AREA
         PUT   REPORT,PRINT       PRINT IT
         LA    R2,12(0,R2)        R2 -> TO NEXT VVDS NAME
         ST    R2,VVDSREC         SAVE IT
         L     R1,VVDSCTR         R1 = NUMBER OF VVDS'S
         LTR   R1,R1              ANY MORE ?
         BZ    NEXTCAT            NO, GET NEXT CATALOG NAME
         BCTR  R1,0               -1
         ST    R1,VVDSCTR         SAVE NUMBER LEFT
         SPACE 1
         B     DYNLOOP            GO FOR NEXT VVDS
         SPACE 1
SVC3     DS    0H
         CLOSE INFILE             CLOSE SYSIN
         L     R15,0              LOAD RC
         L     R13,4(R13)         R13 -> TO CALLERS SAVE AREA
         L     R14,12(R13)        SET R14 TO WHAT CALLER'S R14
         LM    R0,R12,20(R13)     SET R0-R12 TO CALLERS REGS
*              GET INTO PROPER MODE AND GO BACK TO CALLER
         BSM   0,R14              RETURN TO CALLING PROGRAM
*
*        ABEND
*
         SPACE 3
ABEND    ABEND 81,DUMP,STEP      BAD READ OF VSAM DATA SET
         SPACE 3
DWORD    DC    D'0'
LOCMSG3  DC    C'LINK TO IDCAMS FAILED...'
LOCMSG4  DC    C'LINK TO IDCAMS WAS OKAY.'
LOCMSGR  DS    0C
         DC    C'RC='
LOCRC    DC    C'XXX'
         DC    C' ... FDBK='
LOCFDBK  DC    C'YYYY'
LOCMSGRL EQU   *-LOCMSGR
*
INFO1    DS    0CL133
         DC    C'0'
MSG      DC    CL44' '
CTLTOTAL DC    CL8' '
         DC    CL80' '
*
TRTAB    DC    C' 0123456789ABCDEF'
*
OPTIONS  DC    H'0'
DNAMES   DC    H'0'
PGNO     DC    H'0'
IOLIST   DC    F'2'
         DC    A(ASYSIN)          CONTROLLER FOR SYSIN
         DC    A(INRTN)
         DC    A(AUDATA)
         DC    A(BSYSOUT)         CONTROLLER FOR SYSPRINT
         DC    A(OUTRTN)
         DC    A(BUDATA)
ASYSIN   DC    CL10'DDSYSIN'
BSYSOUT  DC    CL10'DDSYSPRINT'
AUDATA   DC    CL256' '
BUDATA   DC    CL256' '
         SPACE 5
* DYNALLOC PARAMETER LIST
         DS    0D
         ENTRY VVDSADDR
VVDSADDR DC    A(VVDSNAME)
VVDSLTH  DC    AL1(128)
         DC    AL3(1200)          ROOM FOR 100 VOLSERS....
PARML    DC    A(VVDSNAME)
         DC    XL1'80',AL3(VVDSVOL)
*
VVDSNAME DC    CL44' '
VVDSVOL  DC    CL6' '
*
         SPACE 1
*
*        ENTRY POINT
*
*NRTN    CSECT
*NRTN    AMODE 24
*NRTN    RMODE 24
INRTN    DS    0H
         USING *,R15      GET TEMP ADDRESSABILITY
         B     AROUND2            BRANCH AROUND DUMP TITLE
         DC    AL1(EYELTH2)       LTH OF EYE CATCHER
EYECAT2  DS    0C
         DC    C'INRTN  '         PROGRAM NAME
         DC    C' VERSION 2.0 '   VERSION
         DC    CL8'&SYSDATE'      DATE WRITTEN
         DC    CL6'&SYSTIME'      TIME WRITTEN
         DC    C'..MAKE 31-BIT COMPLIANT'    COMMENT
*        DC    C'..HANDLE AMODE 31 MODULES'    COMMENT
EYELTH2  EQU   *-EYECAT2          LTH OF EYE CATCHER
         SPACE 1
AROUND2  DS    0H
         LA    R1,0(0,R1)         CLEAR HI-ORDER BYTE FOR 31 BIT
         LA    R13,0(0,R13)       CLEAR HI-ORDER BYTE FOR 31 BIT
         BSM   R14,0              SAVE CURRENT AMODE
         STM   R14,R12,12(R13)    SAVE CALLERS REGS
         LR    R12,R15            SET OUR 1ST BASE REG
         DROP  R15                DROP TEMP BASE
         USING INRTN,R12,R11      SET OUR ADDRESSABILITY
         LA    R11,4095(0,R12)   LOAD SECOND BASE REGISTER
         LA    R11,1(0,R11)      LOAD SECOND BASE REGISTER
         SPACE 1
         LA    15,INSAVE
         ST    13,4(15)
         ST    15,8(13)
         LR    13,15
         B     CONT2
         SPACE
INSAVE   DC    18F'0'
         SPACE
CONT2    DS    0H
         L     R2,4(0,R1)         R2 -> TO IOFLAGS                  RH
         USING IOFLAGS,R2         SET BASE                          RH
         CLI   IOFLAG1,IOFOPEN    OPENING SYSIN?
*        BE    RETRC0             YES, SAY OPEN WAS OK
         BE    OPENIN             YES, SAY OPEN WAS OK
         CLI   IOFLAG1,IOFCLOS    CLOSE SYSIN?
         BE    RETRC0             YES, SAY CLOSE WAS OKAY
*        BE    CLOSIN             YES, GO CLOSE IT
         TM    IOFLAG1,IOFGET     DOES IDCAMS WANT A RECORD?
         BO    GIVEREC            YES, PASS IT A PRINT CMD
         B     RETRC12            IGNORE EVERYTHING ELSE
         SPACE 1
GIVEREC  DS    0H
         L     R3,8(0,R1)         R3 -> TO RECORD AREA
         USING IOINFO,R3          SET BASE                          RH
         L     R15,INREC          R15 -> TO PRINT CTL RECORD
         LH    R14,0(0,R15)       R14 = LTH OF RECORD
         ST    R14,IOIRECL        PASS IT TO IDCAMS
         LA    R1,2(0,R15)        R1 -> TO RECORD
         ST    R1,IOIREC          PASS IT TO IDCAMS
         AR    R15,R14            ADD REC LTH TO R15
         LA    R15,2(0,R15)       R15 -> TO NEXT REC
         ST    R15,INREC          SAVE ITS ADDRESS
         CLC   0(2,R1),ENDATA     END OF INPUT TO IDCAMS?
         BE    RETRC4             YES
         SPACE 1
RETRC0   DS    0H
         LA    R15,0              SAY  GET WAS OK                   RH
         B     RET2               GO BACK TO IDCAMS                 RH
RETRC4   DS    0H
         LA    R15,4              SAY  NO MORE SYSIN                RH
         B     RET2               GO BACK TO IDCAMS                 RH
         SPACE 1
CLOSIN   DS    0H
*        CLOSE INFILE             CLOSE SYSIN
*        B     RETRC0             RETURN
         SPACE 1
OPENIN   DS    0H
         LA    R15,INLTH          R15 -> TO 1ST INPUT AREA
         ST    R15,INREC          RESET INPUT REC ADDRESS
         B     RETRC0             GO SET RC AND RETURN
*        OPEN  (INFILE,(INPUT))
*        TM    INFILE+48,X'10'    DID REPORT FILE OPEN ?            RH
*        BO    RETRC0             YES                               RH
         SPACE 1
RETRC12  DS    0H
         LA    R15,12             SAY CALL WAS BAD                  RH
         B     RET2               GO BACK TO IDCAMS                 RH
         SPACE 1
RET      LA    15,0          GET RETURN CODE
         ORG   *-2
RETRC    DS    H             HALF WORD RETURN CODE, INITIALY ZERO
RET2     DS    0H
         L     R13,4(R13)         R13 -> TO CALLERS SAVE AREA
         L     R14,12(R13)        SET R14 TO CALLER'S R14
         LM    R0,R12,20(R13)     SET R0-R12 TO CALLERS REGS
*              GET INTO PROPER MODE AND GO BACK TO CALLER
         BSM   0,R14              RETURN TO CALLING PROGRAM
*
         SPACE 1
*NREC    DC    A(INLTH)
*NLTH    DC    AL2(INCTLL)
*NCTL    DC    C' LISTCAT CATALOG ( '                   19
*NCATLG  DC    CL38' '                                  38
*        DC    C' ) LEVEL ( SYS1.VVDS  )'               23
*
INREC    DC    A(INLTH)
INLTH    DC    AL2(INCTLL)
INCTL    DC    C' LISTCAT ENT( '                        14
INCATLG  DC    CL44' '                                  44
         DC    C' ) VOL '                                7
         DC    CL(80-(*-INCTL))'  '                     80 LONG...
INCTLL   EQU   *-INCTL
*
INLTH2   DC    AL2(2)
ENDATA   DC    C'/*'
         SPACE 1
INFILE   DCB   DSORG=PS,DDNAME=CATIN,LRECL=80,RECFM=FB,             XXXX
               MACRF=(GM),EODAD=SVC3
STEPCAT  DCB   DSORG=PS,DDNAME=STEPCAT,LRECL=80,RECFM=FB,           XXXX
               MACRF=(GM),BLKSIZE=80,EXLST=JFCBADD
         DS    0F
         DC    C'JFCB'            KEEP JFCB AT REPORT+352           RH1
JFCBDSNM DS    0C
JFCB     DC    CL176' '
*        ORG   JFCB               BACK TO START OF JFCB
*        IEFJFCBN                 GEN JFCB LABELS
JFCBADD  DC    X'87'              JFCB ADDRESS                      RH1
         DC    AL3(JFCB)          *                                 RH1
         EJECT
*
*        ENTRY POINT
*
*UTRTN   CSECT
*UTRTN   AMODE 24
*UTRTN   RMODE 24
OUTRTN   DS    0H
         USING *,R15      GET TEMP ADDRESSABILITY
         B     AROUND3            BRANCH AROUND DUMP TITLE
         DC    AL1(EYELTH3)       LTH OF EYE CATCHER
EYECAT3  DS    0C
         DC    C'OUTRTN '         PROGRAM NAME
         DC    C' VERSION 2.0 '   VERSION
         DC    CL8'&SYSDATE'      DATE WRITTEN
         DC    CL6'&SYSTIME'      TIME WRITTEN
         DC    C'..MAKE 31-BIT COMPLIANT'    COMMENT
*        DC    C'..HANDLE AMODE 31 MODULES'    COMMENT
EYELTH3  EQU   *-EYECAT3          LTH OF EYE CATCHER
         SPACE 1
AROUND3  DS    0H
         LA    R1,0(0,R1)         CLEAR HI-ORDER BYTE FOR 31 BIT
         LA    R13,0(0,R13)       CLEAR HI-ORDER BYTE FOR 31 BIT
         BSM   R14,0              SAVE CURRENT AMODE
         STM   R14,R12,12(R13)    SAVE CALLERS REGS
         LR    R12,R15            SET OUR 1ST BASE REG
         DROP  R15                DROP TEMP BASE
         USING OUTRTN,R12,R11     SET OUR ADDRESSABILITY
         LA    R11,4095(0,R12)   LOAD SECOND BASE REGISTER
         LA    R11,1(0,R11)      LOAD SECOND BASE REGISTER
         LA    15,OUTSAVE
         ST    13,4(15)
         ST    15,8(13)
         LR    13,15
         B     CONT3
         SPACE
OUTSAVE  DC    18A(0)
         SPACE
CONT3    DS    0H
         L     R2,4(0,R1)         R2 -> TO IOFLAGS                  RH
         USING IOFLAGS,R2         SET BASE                          RH
         CLI   IOFLAG1,IOFOPEN    OPENING SYSPRINT ?
         BE    OPENSYS            YES, SAY OPEN WAS OK
         CLI   IOFLAG1,IOFCLOS    CLOSE SYSPRINT ?
         BE    CLOSOUT            YES, GO CLOSE IT
         TM    IOFLAG1,IOFPUT     DOES IDCAMS HAVE A RECORD FOR US?
         BO    GETREC             YES, GO GET IT
         B     OUTRC12            IGNORE EVERYTHING ELSE
         SPACE 1
CLOSOUT  DS    0H
         CLOSE REPORT             CLOSE SYSPRINT
         OI    SW,X'40'           SAY END OF CALLS
*        B     OUTRC12            RETURN
         B     OUTRC0             RETURN
         SPACE 1
GETREC   DS    0H
         L     R3,8(0,R1)         R3 -> TO RECORD AREA
         USING IOINFO,R3          SET BASE                          RH
         L     R5,IOIREC          R5 -> TO RECORD FROM IDCAMS
         L     R4,IOIRECL         R4 = LTH OF RECORD
         SPACE 1
CHKLTH   CH    R4,=H'133'         LTH OVER 133?
         BL    LTHOK              NO
         MVC   PRINT,0(R5)        MOVE 133 BYTES
         LA    R5,133(0,R5)       R5 -> TO NEXT 133 BYTES
         SH    R4,=H'133'         R4 = LTH LEFT
         B     PUTIT              PRINT IT
         SPACE 1
LTHOK    DS    0H
         BCTR  R4,0               -1 FOR HEX LTH
         STC   R4,PUTLTH+1        SET LTH
PUTLTH   MVC   PRINT(0),0(R5)     MOVE DATA
         SR    R4,R4              R4=0
         SPACE 1
PUTIT    DS    0H
         PUT   REPORT,PRINT       PRINT IT
         LA    R14,PRINT+1        R14 -> TO DATA AFTER CC
         LA    R15,20             R15 = NBR CHARS TO CHECK
*
PUTIT2   DS    0H
         CLI   0(R14),C' '        FOUND NON BLANK?
         BNE   PUTIT4             YES
         LA    R14,1(0,R14)       NO, R14 -> AT NEXT BYTE
         BCT   R15,PUTIT2         CHECK MAX CHARS
         B     ENDPUT             MUST BE A BLANK LINE....
*
PUTIT4   DS    0H
         CLC   =C'VOLSER---',0(R14)  DO WE WANT THIS RECORD?
         BNE   ENDPUT             NO
*
*    ONCE WE FIND THE VOL INFO IN THE IDCAMS OUTPUT,
*    IT SHOULD LOOK LIKE THIS.....
*
*    VOLSER------------B16038     DEVTYPE------X'78048081'
*
*    THE DEVTYPE HAS TO BE CONVERTED TO HEX
*
*VOLREC  DSECT
*        DS    CL18               JUNK BEFORE VOLSER...
*IDCVOL  DS    CL6                THE VOLSER
*        DS    CL20               JUNK BEFORE THE DEVTYPE...
*IDCDEV  DS    CL8                THE VOLSER DEVTYPE IN DECIMAL
*
         USING VOLREC,R14         SET VOLSER RECORD BASE
         PACK  PACKDEV(5),IDCDEV(9)  PACK DEVTYPE TO MAKE IT HEX...
*
*              NOW SET UP PSEUDO LOCATE WORK AREA....
*

*
GOTVVDS  DS    0H
         L     R6,VVDSREC         R6 -> TO WHERE VVDS NAME IS SAVED
         MVC   0(2,R6),=X'0001'   SET COUNT TO 1
         MVC   2(4,R6),PACKDEV    SET DEVTYPE
         MVC   6(6,R6),IDCVOL     SET VOLSER
         DROP  R14                DROP VOLSER RECORD BASE
         LA    R6,12(0,R6)        ADD 12 TO R6
         ST    R6,VVDSREC         SAVE IT
         L     R6,VVDSCTR         R6 = VVDS COUNTER
         LA    R6,1(0,R6)         ADD 1 TO R6
         ST    R6,VVDSCTR         SAVE IT
         L     R1,=V(VVDSADDR)    R1 -> A(FIRST VOLSER ENTRY)
         L     R1,0(0,R1)         R1 ->   FIRST VOLSER ENTRY
         STH   R6,0(0,R1)         SET NBR ENTRIES
         C     R6,MAXVVDS         MORE THAN MAX VVDS RECORDS?
         BNH   ENDPUT             NO
*        SAY   TOO MANY VOLSERS.. ...
         B     OUTRC12            YES, END OF IDCAMS
*        BH    ABEND2             YES
         SPACE 1
*        PUT   REPORT,PRINT       PRINT IT
         SPACE 1
ENDPUT   DS    0H
         MVI   PRINT,C' '         CLEAR PRINT LINE
         MVC   PRINT+1(132),PRINT ''
         LTR   R4,R4              ANY LEFT?
         BP    CHKLTH             YES, GO PRINT IT
         SPACE 1
         B     OUTRC0             GO GET THE NEXT RECORD
         SPACE 1
ABEND2   ABEND 82,DUMP,STEP      BAD READ OF VSAM DATA SET
         SPACE 1
OPENSYS  DS    0H
         OPEN  (REPORT,(OUTPUT))
         TM    REPORT+48,X'10'    DID REPORT FILE OPEN ?            RH
         BZ    OUTRC12            NO                                RH
         SPACE 1
OUTRC0   DS    0H
         LA    R15,0              SAY  GET WAS OK                   RH
         B     RET4               GO BACK TO IDCAMS                 RH
         SPACE 1
OUTRC12  DS    0H
         LA    R15,12             SAY CALL WAS BAD                  RH
         B     RET4               GO BACK TO IDCAMS                 RH
         SPACE 1
RET3     LA    15,0          GET RETURN CODE
         ORG   *-2
RETRC2   DS    H             HALF WORD RETURN CODE, INITIALY ZERO
RET4     DS    0H
         L     R13,4(R13)         R13 -> TO CALLERS SAVE AREA
         L     R14,12(R13)        SET R14 TO CALLER'S R14
         LM    R0,R12,20(R13)     SET R0-R12 TO CALLERS REGS
*              GET INTO PROPER MODE AND GO BACK TO CALLER
         BSM   0,R14              RETURN TO CALLING PROGRAM
*
PACKDEV  DC    PL5'0'
         SPACE 1
REPORT   DCB   DSORG=PS,DDNAME=IDCPRINT,LRECL=133,RECFM=FBA,        XXXX
               MACRF=(PM),BLKSIZE=133
         SPACE 1
SW       DC    X'00'
PRINT    DC    CL133' '
VVDSCTR  DC    F'0'
         ENTRY MAXVVDS
MAXVVDS  DC    A(1)
VVDSREC  DC    A(VVDSREC1)
VVDSREC1 DC    CL44' '
*        DC    19CL44' '
         LTORG
IOFLAGS  DSECT
IOFLAG1  DS    X
IOFOPEN  EQU   X'00'
IOFCLOS  EQU   X'04'
IOFGET   EQU   X'08'
IOFPUT   EQU   X'0C'
IOFLAG2  DS    X
IOFIN    EQU   X'80'
IOFOUT   EQU   X'40'
IOFLAG3  DS    X
IOFLAG4  DS    X
         SPACE 1
IOINFO   DSECT
IOIREC   DS    F
IOIRECL  DS    F
         SPACE 1
*
*    ONCE WE FIND THE VOL INFO IN THE IDCAMS OUTPUT,
*    IT SHOULD LOOK LIKE THIS.....
*
*    VOLSER------------B16038     DEVTYPE------X'78048081'
*
VOLREC   DSECT
         DS    CL18               JUNK BEFORE VOLSER...
IDCVOL   DS    CL6                THE VOLSER
         DS    CL20               JUNK BEFORE THE DEVTYPE...
IDCDEV   DS    CL8                THE VOLSER DEVTYPE IN DECIMAL
         SPACE 1
         END
/*
//LKED.SYSLMOD  DD  DISP=(NEW,PASS),DSN=&&GOSET,
//             SPACE=(CYL,(2,1,2)),UNIT=SYSDA
//LKED.DD1     DD DSN=HALL.LINKLIB,DISP=SHR
//LKED.SYSIN DD *
    SETCODE AC(1)
   ENTRY CALLIDC
    NAME CALLIDC(R)
/*
//*
//S EXEC HLASMCL,PARMC='ALIGN,NORLD',CLASS='*',COND.LKED=(7,LT,ASM)
//ASM.SYSIN DD *
*
*
*
*              THIS LITTLE PROGRAM IS AN EXAMPLE OF HOW TO
*              USE SVC99 TO DYNAMICALLY ALLOC DDNAMES AND DCBS,
*              THEN TO OPEN/READ/CLOSE THE FILE, THEN TO
*              DYNAMICALLY DE-ALLOCATE THE FILE.
*
*              THERE IS AN EXAMPLE OF A DCB ABEND EXIT AND AN
*              ESTAE EXIT IN HERE ALSO. THESE ARE USED TO TRAP ANY
*              OPEN OR PROGRAM ERRORS.
*
*              INPUT TO DYNALLOC  IS THROUGH //SYSIN AND ALL THAT
*              IS NEEDED IS THE DATASET NAME.
*
*
*
*
         TITLE 'TRY TO DO SVC99 TO DYNAMICALLY ALLOCATE DATASETS'
         SPACE 3
DYNALOC  CSECT
         STM   R14,R12,12(R13)
         LR    R12,R15
         USING DYNALOC,R12
         B     AROUND             BRANCH AROUND DUMP TITLE
         DC    C'DYNALOC'         PROGRAM NAME
         DC    CL8'&SYSDATE'      DATE WRITTEN
         DC    CL6'&SYSTIME'      TIME WRITTEN
         SPACE 1
AROUND   DS    0H
         LR    R2,R1              R2 -> TO PARM ADDRESS
         GETMAIN R,LV=LDYNAMIC    GET CORE FOR WORK AREA
         LR    R3,R1              R3 -> TO WORK AREA
         USING WORK,R3            SET WORK BASE
         LA    R4,SAVE            R4 -> TO SAVE AREA
         ST    R13,SAVE+4         SAVE A(WYLBURS SAVE AREA)
         ST    R4,8(0,R13)        CHAIN OUR SAVE AREA
         LR    R13,R4             R13 -> TO OUR SAVE AREA
         OPEN  (REPORT,(OUTPUT))
         SPACE 1
READCARD DS    0H
         L     R1,0(0,R2)         R1 -> TO VVDS NAME                RH
         SPACE 1
PACKIT   DS    0H
         MVI   S99VERB,X'01'      SAY WE WANT TO ALLOCATE BY DSNAME
         MVI   TUPL5,X'00'        MAKE SURE WE USE ALL OF TEXT UNITS
         LA    R5,0               ASSUME THERE IS NO PASSWORD
         ST    R5,TUPL3           *
         LA    R5,TUNIT4          MAKE SURE WE USE STATUS 1 TEXT UNIT
         ST    R5,TUPL4           *
         LA    R5,TUNIT2          ALSO USE VOL SER  TEXT UNIT
         ST    R5,TUPL2           *
         SPACE 1
LTHLOOP  DS    0H
         SR    R5,R5              R5 = 0
         LR    R6,R1              R6 -> TO DSN
LOOP1    DS    0H
         CLI   0(R6),C' '         AT END OF DSN ?
         BE    OUT1               YES, MOVE IT TO SVC 99 FIELD
         LA    R6,1(0,R6)         ADD 1 DSN POSITION REG
         LA    R5,1(0,R5)         ADD 1 TO LTH CTR
         B     LOOP1              LOOK AT NEXT CHAR
MVCDSN   MVC   TUPAR1(0),0(R1)    MVC DSN TO S99 BLOCK
OUT1     DS    0H
         STH   R5,TULNG1          SET UP LTH FIELD FOR SVC99
         BCTR  R5,0               - 1 FOR EX
         EX    R5,MVCDSN          MOVE DSN TO S99 BLOCK
         SH    R6,=H'6'           R6 -> TO VOL SER IN VVDS NAME
         MVC   TUPAR2,0(R6)       MOVE VOLSER TO SVC99 PARM
         MVC   MSG(07),=C'DSNAME=' SET UP DSNAME MSG
         MVC   MSG+7(44),TUPAR1    PUT DSNAME IN MSG
         PUT   REPORT,INFO1       OUTPUT THE MSG
         MVI   MSG,C' '           CLEAR PRINT LINE
         MVC   MSG+1(131),MSG     *
         SPACE 1
DOSVC99  DS    0H
         LA    R1,S99RBPTR        R1 -> TO SVC 99 PARMS
         SVC   99
         LTR   R15,R15            WAS SVC OKAY ?
         BZ    SVCOKAY            YES
         SPACE 1
PHEAD    DS    0H
         MVC   MSG(L'LOCMSG2),LOCMSG2  MOVE MSG TO LINE             RH
         B     PRINTIT            PRINT LOCATE ERROR MSG            RH
         SPACE 1
SVCOKAY  DS    0H                                                   RH
*        MVC   DDNMSG,TUPAR6      MOVE DDNAME TO MSG                RH
*        MVC   MSG(L'LOCMSG1),LOCMSG1  MOVE MSG TO LINE             RH
         SPACE 1
CLOSEIT2 DS    0H
         MVI   S99VERB,X'02'      CHANGE TO UNALLOCATE
         LA    R5,0               DON'T USE PASSWORD TEXT UNIT FOR FREE
         ST    R5,TUPL3           *
         ST    R5,TUPL4           CAN'T USE STATUS 1 EITHER
         ST    R5,TUPL2           CAN'T USE VOL SER  EITHER
         MVI   TUPL5,X'80'        END LIST AT STATUS 2..DISP=KEEP
         LA    R1,S99RBPTR        R1 -> TO SVC 99 PARMS
         SVC   99                 FREE DDNAME AND FILE
         LTR   R15,R15            WAS SVC OKAY ?
         BZ    SVCOKAY2           YES
         SPACE 1
         MVC   MSG(L'LOCMSG3),LOCMSG3  MOVE MSG TO LINE             RH
         B     PRINTIT            PRINT LOCATE ERROR MSG            RH
         SPACE 1
SVCOKAY2 DS    0H                                                   RH
         MVC   MSG(L'LOCMSG4),LOCMSG4  MOVE MSG TO LINE             RH
         SPACE 1
PRINTIT  DS    0H
         PUT   REPORT,INFO1       OUTPUT THE MSG
         MVI   MSG,C' '           CLEAR PRINT LINE
         MVC   MSG+1(131),MSG     *
*        B     READCARD           GO GET ANOTHER CARD
         SPACE 1
NOMORE   DS    0H
         CLOSE REPORT             CLOSE FILES
         L     R13,4(0,R13)       POINT R13 BACK TO WYLBUR SAVEAREA
         FREEMAIN R,LV=LDYNAMIC,A=(3)  FREE GOTTEN CORE
*        L     R3,VVDSADDR        R3 -> TO VVDS GOTTEN CORE
*        FREEMAIN R,LV=LDYNAMIC,A=(3)  FREE GOTTEN CORE
         LM    R14,R12,12(R13)    RELOAD WYLBURS REGS
         SLR   R15,R15            SET RETURN CODE
         BR    R14
         SPACE 1
* $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*        WORK AREAS
* $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
DUMPTITL DC    C'WORKING STORAGE SECTION'
* ------ INPUT AREA               ------------------------------------
JCLCARD  DC    CL80' '            CARD INPUT AREA
         SPACE 1
* ------ WORK  AREAS              ------------------------------------
NOCARDS  DC    PL4'0'             NUMBER OF CARDS READ
LOCMSG   DC    C'SVC 99 WAS SUCCESSFUL FOR ALLOCATE, DDNAME = '
DDNMSG   DC    CL8' '
LLOCMSG  EQU   *-LOCMSG
INPMSG   DC    C'ENTER A DSNAME(MBR)/PSWD OR ''END'''
LINPMSG  EQU   *-INPMSG
LOCMSG1  DC    C'SVC 99 WAS SUCCESSFUL FOR ALLOCATE'
LOCMSG2  DC    C'SVC 99 WAS UNSUCCESSFUL FOR ALLOCATE'
LOCMSG3  DC    C'SVC 99 WAS UNSUCCESSFUL FOR UNALLOCATE'
LOCMSG4  DC    C'SVC 99 WAS SUCCESSFUL FOR ALLOCATE/UNALLOCATE'
INFO1    DS    0CL133
         DC    C'0'
MSG      DC    CL44' '
CTLTOTAL DC    CL8' '
         DC    CL80' '
         EJECT
RPWORK   DS    D
RSAVE    DS    9D
RFELD1   DC    PL4'0'
RHEADING DC    CL1'-'
RDATE    DS    CL12
         DC    CL120'     LISTING OF BACKUP TAPES'
*        DCB'S  FOR FILES
*
* ------ DCB'S                    ------------------------------------
*ARDIN   DCB   DSORG=PS,DDNAME=SYSIN,EODAD=NOMORE,MACRF=(GM)
REPORT   DCB   DSORG=PS,DDNAME=SYSPRINT,LRECL=133,RECFM=FBA,        XXXX
               MACRF=(PM),BLKSIZE=133
*ILEDCB  DCB   DSORG=PS,DDNAME=VARIES,EODAD=CLOSEIT,MACRF=(GL),     ++++
               EXLST=DCBABEND
         SPACE 1
*              CONTROL BLOCKS FOR  SVC 99
         DS    0F                 PUT ON FULLWORD BOUNDARY
S99RBPTR DC    XL1'80'
         DC    AL3(S99RB)
S99RB    DS    0F
S99RBLN  DC    AL1(20)
S99VERB  DC    AL1(1)             ALLOCATE BY DSNAME
S99FLAG1 DC    XL2'2000'          DON'T MOUNT VOLS OR CONSIDER OFFLINES
S99ERROR DC    AL2(0)
S99INFO  DC    AL2(0)
S99TXTPP DC    A(S99TUPL)
S99RES1  DC    A(0)
S99FLAG2 DC    A(0)
         SPACE 1
S99TUPL  DS    0F
TUPL1    DC    A(TUNIT1)
TUPL2    DC    A(TUNIT2)
TUPL3    DC    A(TUNIT3)
TUPL4    DC    A(TUNIT4)
TUPL5    DC    A(TUNIT5)
TUPL6    DC    XL1'80'
         DC    AL3(TUNIT6)
         SPACE 1
TUNIT1   DS    0C
TUKEY1   DC    AL2(2)             ALLOCATE BY DSNAME
TUNUM1   DC    AL2(1)
TUENT1   DS    0C
TULNG1   DC    AL2(44)            LTH OF DSNAME
TUPAR1   DC    CL44' '            DSNAME
         SPACE 1
TUNIT2   DS    0C
TUKEY2   DC    XL2'0010'          VOL SER
TUNUM2   DC    AL2(1)
TUENT2   DS    0C
TULNG2   DC    XL2'0006'          LTH OF VOL SER
TUPAR2   DC    CL6' '             VOL SER
         SPACE 1
TUNIT3   DS    0C
TUKEY3   DC    XL2'0050'          PASSWORD OF DATA SET
TUNUM3   DC    AL2(1)
TUENT3   DS    0C
TULNG3   DC    AL2(8)             LTH OF PASSWORD
TUPAR3   DC    CL8' '             PASSWORD
         SPACE 1
TUNIT4   DS    0C
TUKEY4   DC    XL2'0004'          STATUS OF DATA SET
TUNUM4   DC    AL2(1)
TUENT4   DS    0C
TULNG4   DC    AL2(1)             LTH OF STATUS
TUPAR4   DC    X'08'              STATUS = SHR
*        DC    X'02'              STATUS = MOD
*        DC    X'04'              STATUS = NEW
*        DC    X'01'              STATUS = OLD
         SPACE 1
TUNIT5   DS    0C
TUKEY5   DC    XL2'0005'          STATUS 2..DISP=(SHR,KEEP)
TUNUM5   DC    AL2(1)
TUENT5   DS    0C
TULNG5   DC    AL2(1)             LTH OF STATUS 2
TUPAR5   DC    X'08'              STATUS = KEEP
*        DC    X'04'              STATUS = DELETE
*        DC    X'02'              STATUS = CATLG
*        DC    X'01'              STATUS = UNCATLG
         SPACE 1
TUNIT6   DS    0C
TUKEY6   DC    XL2'0001'          DDNAME
TUNUM6   DC    AL2(1)
TUENT6   DS    0C
TULNG6   DC    AL2(8)             LTH OF DDNAME
TUPAR6   DC    CL8'MASTER'        DDNAME
         SPACE 1
         LTORG
         SPACE 1
WORK     DSECT
SAVE     DC    18F'-1'
SAVECHG  DC    F'0'
         DS    A
         DS    CL6
         DS    CL60
LDYNAMIC EQU   *-WORK
         SPACE 1
*        IHASDWA
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   DYNALOC
/*
//*
//LKED.SYSLMOD DD DISP=(OLD,PASS),DSN=&&GOSET
//LKED.SYSIN DD *
    SETCODE AC(1)
   ENTRY DYNALOC
    NAME DYNALOC(R)
/*
//*
//LKED     EXEC PGM=IEWL,REGION=512K,
//         PARM='XREF,LIST,LET,NCAL'
//SYSPRINT DD SYSOUT=*
//SYSUT1 DD UNIT=SYSALLDA,SPACE=(CYL,5)
//INSOBJ  DD DISP=(OLD,DELETE),DSN=&&GOSET
//SYSLMOD DD DSN=HALL.LINKLIB,DISP=SHR     <==== CHANGE
//SYSLIN  DD *
 INCLUDE INSOBJ(CALLIDC)
 INCLUDE INSOBJ(DYNALOC)
 ORDER   CALLIDC
 ORDER   DYNALOC
 ENTRY   CALLIDC
 SETCODE AC(1)
 NAME    CALLIDC(R)
//
