         SPACE    2
*        MACRO     USED FOR...
*        BEGIN     GENERATE ENTRY CODE WITH BASE REGS R13,&B,&C
*        DEBUG     GENERATE CODE  TO PRINT A CSECT TRACE
*        IBMMAC    GENERATE DCB AND JFCB DSECTS
*        MSGRTN    GENERATE CODE TO PRINT MESSAGES
*        OLCMSG    GENERATE CODE TO PRINT A MSG
*        PERFORM   GENERATE CODE  TO BRANCH TO A CSECT
*        REQUATE   GENERATE REGISTER EQUATES, AND A SAVEAREA DSECT
*        SAVESET   GENERATE IMS STYLE SAVE AREAS
*        SECEXIT   GENERATE CSECT EXIT CODE
*        SECTION   GENERATE CSECT ENTRY CODE
*
*
         SPACE 2
         MACRO
&NAME    BEGIN &A,&B,&C,&D,&AM=24,&RM=24
         AIF   ('&NAME' NE '').GENLBL LABEL SPECIFIED?
         MNOTE 8,'CSECT LABEL NAME MUST BE SPECIFIED'
         MEXIT
.GENLBL  ANOP
*        PARMS ...
*              &A = LABEL TO BRANCH TO FOR RETURN TO SYSTEM
*                   LABEL &AX IS THE RETURN CODE HALFWORD
*                   1ST BASE REGISTER IS R13
*              &B = 2ND BASE REGISTER IF NEEDED
*              &C = 3RD BASE REGISTER IF NEEDED
*              &D = COMMENT.
*             &AM = 24...DEFAULT AMODE
*             &RM = 24...DEFAULT RMODE
*
*
*        ENTRY POINT
*
&NAME    CSECT
&NAME    AMODE &AM
&NAME    RMODE &RM
         USING *,R15      GET TEMP ADDRESSABILITY
         B     *+5+EYELTH         BRANCH AROUND DUMP TITLE
         DC    AL1(EYELTH)        LTH OF EYE CATCHER
EYECATCH DS    0C
         DC    CL08'&NAME'        PROGRAM NAME
         AIF   (K'&NAME LT 8).NOBLANK
         DC    C' '
.NOBLANK ANOP
         DC    CL8'&SYSDATE'      DATE WRITTEN
         DC    CL1' '             BLANK
         DC    CL6'&SYSTIME'      TIME WRITTEN
         DC    CL1' '             BLANK
         AIF   ('&D' EQ '').NOCOMM COMMENT SPECIFIED?
         AIF   ('&D'(1,1) EQ '''').INQ COMMENT IN QUOTES?
         DC    C'&D'          COMMENT...
         AGO   .NOCOMM
.INQ     ANOP
         DC    C&D            COMMENT...
.NOCOMM  ANOP
         DS    0H
EYELTH   EQU   *-EYECATCH         LTH OF EYE CATCHER
         SPACE 1
         LA    R1,0(0,R1)         CLEAR HI-ORDER BYTE FOR 31 BIT
         LA    R13,0(0,R13)       CLEAR HI-ORDER BYTE FOR 31 BIT
         BSM   R14,0              SAVE CURRENT AMODE
         STM   R14,R12,12(R13)    SAVE CALLERS REGISTERS
         CNOP  0,4                MAKE SURE R14 IS JUST BEFORE SAVE
         BAL   14,*+76       BRANCH ROUND OUR SAVE AREA
         DROP  R15
         AIF   (T'&B NE 'O').NO1
         USING *,13          GET ADDRESSABLITY
         AGO   .NO3
.NO1     AIF   (T'&C NE 'O').NO2
         USING *,13,&B
         AGO   .NO3
.NO2     USING *,13,&B,&C
.NO3     ANOP
         SPACE 1
         DC    18F'0'             SAVE AREA FOR REGISTERS
         SPACE 1
         LA    R14,0(0,R14)       CLEAR HI-ORDER BYTE SET BY BAL..
         ST    R13,4(R14)      SAVE REGS 13 AND
         ST    R14,8(R13)      BACK CHAIN
         LR    R13,R14         GET SAVE AREA ADDRESS
         AIF   (T'&B EQ 'O').NO4
         LA    &B,2048(13)   GET SECOND BASE REGISTER
         LA    &B,2048(&B)   GET SECOND BASE REGISTER
         AIF   (T'&C EQ 'O').NO4
         LA    &C,4095(0,&B)      SET UP THIRD BASE REGISTER        RH
         LA    &C,1(0,&C)         *                                 RH
.NO4     AIF   (T'&A NE 'O').B
         MEXIT
.B       XC    &A.X,&A.X     CLEAR RETURN CODE
         B     A23K&SYSNDX   BRANCH ROUND RETURN
         SPACE 1
*
*              CODE TO RETURN TO CALLER
*
&A       LA    15,0          GET RETURN CODE
         ORG   *-2
&A.X     DS    H             HALF WORD RETURN CODE, INITIALY ZERO
         L     R13,4(0,R13)       POINT R13 BACK TO SYSTEM SAVEAREA
         ST    R15,16(0,R13)      SET RETURN CODE
         LM    R14,R12,12(R13)    RELOAD SYSTEMS REGS
*              GET INTO PROPER MODE AND GO BACK TO CALLER
         BSM   0,R14              RETURN TO CALLING PROGRAM
         SPACE 3
A23K&SYSNDX    DS    0H      START OF MAIN LINE CODE
         MEND
         SPACE    2
         MACRO
         IBMMAC
.*
.* IBM MACROS :
.*
.*       USED - TO GENERATE IBM MACROS
.*
         PRINT NOGEN
*        DCBD  DSORG=(PS,PO),DEVD=DA
         DCBD  DSORG=(PS,PO),DEVD=DA
IHAJFCB  DSECT
*        IEFJFCBN
         IEFJFCBN
         MEND
         SPACE    2
         MACRO
         SAVESET &NBR
.*
.* SAVESET MACRO:
.*
.*       USED - TO DEFINE THE SAVE AREAS
.*
         PRINT GEN
&N1      SETA  1
&N2      SETA  2
&N3      SETA  3
         ENTRY SAVE     DEFINE ENTRY POINT USED OUTSIDE THIS CSECT
SAVE     DS    0F
SAVE&N1  DC    F'0'
         DC    A(0)        PTR TO  PREV
         DC    A(SAVE&N2)  PTR TO NEXT
         DC    15F'0'      FOR R14 TO R12
.LOOP    ANOP
SAVE&N2  DC    F'0'
         DC    A(SAVE&N1)  PTR TO  PREV
         DC    A(SAVE&N3)  PTR TO NEXT
         DC    15F'0'      FOR R14 TO R12
&N1      SETA  &N1+1
&N2      SETA  &N2+1
&N3      SETA  &N3+1
         AIF   (&N2 LT &NBR).LOOP
SAVE&N2  DC    F'0'
         DC    A(SAVE&N1)  PTR TO  PREV
         DC    A(0)        PTR TO NEXT
         DC    15F'0'      FOR R14 TO R12
         MEND
         SPACE    2
         MACRO
&LABEL   SECTION &CHAIN=NO,&GEN=NO,&BASE=1,&FIRST=NO,&CHKCHN=YES,      +
               &DEBUG=NO,&TITLE=,&AMODE=24,&RMODE=24
.*       SECTION MACRO:
.*
.*       USED - TO DEFINE THE VARIOUS SECTIONS OF CODE HEREIN
.*              BASE REGISTER IS 12, AND IF REQUESTED, 11.
.*
.*       PARMS CHAIN=NO           GETMAINS SAVE AREAS
.*             CHAIN=YES          USES PRE-DEFINED SAVE AREAS
.*             GEN=NO             DOES NOT GENERATE MACRO CODE
.*             GEN=YES            GENERATES MACRO CODE
.*             BASE=1             ONLY 1 BASE REG (12)
.*             BASE=2             USES 12 AND 11 AS BASE REGS
.*             BASE=13            USES 13 AND 12 AS BASE REGS
.*             FIRST=NO           THIS IS NOT THE FIRST CSECT
.*             FIRST=YES          THIS IS THE FIRST CSECT
.*             CHKCHN=NO          DON'T CHECK PRE-DEFINED SAVEAREAS
.*             CHKCHN=YES         CHECK FOR NEXT PRE-DEFINED SAVEAREAS
.*             DEBUG=NO           DON'T PRINT DEBUG INFO
.*             DEBUG=YES          PRINT DEBUG INFO..NEEDS DEBUG MACRO
.*             TITLE=             COMMENT ADDED AT START OF SECTION
.*
.*
         AIF   ('&LABEL' NE '').GENLBL LABEL SPECIFIED?
         MNOTE 8,'CSECT LABEL NAME MUST BE SPECIFIED'
         MEXIT
.GENLBL  ANOP
&LABEL   CSECT
&LABEL   AMODE &AMODE
&LABEL   RMODE &RMODE
         PRINT GEN
         AIF   ('&GEN' NE 'NO').NOGEN   GEN ALL CODE?
         PRINT NOGEN
.*
.NOGEN   ANOP
         USING *,R15              SET TEMP BASE
         B     CONT&SYSNDX        BRANCH AROUND EYECATCHER
         DC    AL1(EYEL&SYSNDX)   LTH OF EYE CATCHER
EYE&SYSNDX DS    0C
         DC    CL8'&LABEL'          PROGRAM NAME
         DC    CL8'&SYSDATE'      DATE ASSEMBLED
         DC    C' '               BLANK
         DC    CL8'&SYSTIME'      TIME ASSEMBLED
         AIF   ('&TITLE' EQ '').NOCOMM TITLE SPECIFIED?
         AIF   ('&TITLE'(1,1) EQ '''').INQ TITLE IN QOUTES?
         DC    C'&TITLE'          COMMENT...
         AGO   .NOCOMM
.INQ     ANOP
         DC    C&TITLE            COMMENT...
.NOCOMM  ANOP
EYEL&SYSNDX EQU   *-EYE&SYSNDX
         AIF   ('&BASE' NE '13').NOBASE R13 AS BASE?
SAVE&SYSNDX DS 18F                SECTION SAVE AREA
.NOBASE  ANOP
CONT&SYSNDX DS    0H
         SPACE 1
         LA    R1,0(0,R1)         CLEAR HI-ORDER BYTE FOR 31 BIT
         LA    R13,0(0,R13)       CLEAR HI-ORDER BYTE FOR 31 BIT
         BSM   R14,0              SAVE CURRENT AMODE
         STM   R14,R12,12(R13)    SAVE CALLER'S REGISTERS
         AIF   ('&BASE' NE '13').NOBASE2 R13 AS BASE?
         LA    R12,SAVE&SYSNDX    R12 -> TO OUR SAVE REA
         ST    R12,8(0,R13)       CHAIN OUR SAVE AREA TO HIS...
         ST    R13,4(0,R12)       CHAIN HIS SAVE AREA TO OURS..
         DROP  R15                DROP TEMP BASE
.*
         LR    R13,R12            SET 1ST BASE (R13)...
         LA    R12,4095(0,R13)    SET 2ND BASE
         LA    R12,1(0,R12)       ''
         USING SAVE&SYSNDX,R13,R12  SET OUR BASE
         AGO   .R13SET2           2 BASE REGS
.NOBASE2 ANOP
         LR    R12,R15            SET OUR BASE REG
         DROP  R15                DROP TEMP BASE
.*
         AIF   ('&BASE' EQ '1').ONEBASE NEED 2 BASE REGS?
         LA    R11,4095(0,R12)    SET 2ND BASE
         LA    R11,1(0,R11)       ''
         USING &LABEL,R12,R11     SET OUR BASE
         AGO   .BASESET           2 BASE REGS
.*
.ONEBASE ANOP
         USING &LABEL,R12         SET OUR BASE
.*
.BASESET ANOP
         USING SAVEAREA,R13       SET SAVE AREA BASE
         AIF   ('&FIRST' EQ 'NO').SAVESET  SET UP R13....
         AIF   ('&CHAIN' EQ 'YES').CHAIN1   CHAINED (IMS) SAVEAREA
         AGO   .GETSAVE
         SR    R15,R15            R15 =0, TO FORCE 1ST GETMAIN
         AGO   .CHAIN2
.CHAIN1  ANOP
         L     R15,=V(SAVE)       R15 -> TO OUR FIRST SAVE AREA
.CHAIN2  ANOP
         ST    R15,SAVENEXT       CHAIN OUR SAVE AREA TO HIS
         AIF   ('&CHAIN' EQ 'NO').GETSAVE  NO CHAINED SAVEAREA
         USING SAVEAREA,R15       SET SAVE AREA BASE TO OURS
         ST    R13,SAVELAST       CHAIN HIS SAVE AREA TO OURS
         DROP  R15                DROP OUR SAVE BASE
.SAVESET ANOP
.*       AIF   ('&CHAIN' EQ 'NO').CHK1      NOT CHAINED IMS SAVEAREA
         AIF   ('&CHAIN' EQ 'NO').GETSAVE   NOT CHAINED IMS SAVEAREA
         AIF   ('&CHKCHN' EQ 'NO').R13SET   DON'T CHECK NEXT SAVEAREA
.*
.CHK1    ANOP
         ICM   R2,15,SAVENEXT     R2 -> TO NEXT SAVE AREA IN CHAIN
         BP    A&SYSNDX           B IF THERE IS ONE
.GETSAVE ANOP
*        GETMAIN R,LV=72          GET THE NEXT SAVE AREA
         GETMAIN R,LV=72          GET THE NEXT SAVE AREA
         ST    R1,SAVENEXT        CHAIN NEW SAVE AREA TO PREV       RH
         DROP  R13                DROP SAVE AREA BASE               RH
         USING SAVEAREA,R1        SET NEW SAVE AREA BASE            RH
         ST    R13,SAVELAST       CHAIN PREV SAVE AREA TO NEXT      RH
         SR    R2,R2              R2 = 0
         ST    R2,SAVENEXT        MAKE SURE SAVENEXT IS 0           RH
         DROP  R1                 DROP NEW SAVE AREA BASE           RH
         USING SAVEAREA,R13       SET SAVE AREA BASE                RH
         L     R0,SAVER0          RELOAD R0
         L     R1,SAVER1          RELOAD R1
         L     R2,SAVER2          RELOAD R2
.*
.R13SET  ANOP
         SPACE 1
A&SYSNDX DS    0H                                                   RH
         L     R13,SAVENEXT       POINT TO NEXT SAVE AREA IN CHAIN
.*
.R13SET2 ANOP
         AIF   ('&DEBUG' EQ 'NO').NDB
         AIF   ('&LABEL' EQ 'DEBUGRTN').NDB
         LR    R2,R0              SAVE REGS OVER DEBUG
         LR    R3,R1
         LA    R1,5(0,R12)        R1 -> TO SECTION LABEL NAME
         SR    R0,R0              R0=0 MEANS SECTION ENTRY
*        PERFORM  DEBUGRTN
         PERFORM  DEBUGRTN
         LR    R0,R2
         LR    R1,R3
.*
.NDB     ANOP
         PRINT NOGEN
*        AIF   ('&GEN' NE 'NO').NOGEN   GEN ALL CODE?
*        PRINT NOGEN
         MEND
         SPACE    2
         MACRO
&LABEL   SECEXIT &GEN=NO,&DEBUG=NO,&BASE=1
.*
.*       SECEXIT END OF CSECT MACRO
.*       PARM  GEN=NO             DON'T GENERATE MACRO CODE
.*             GEN=YES            GENERATE MACRO CODE
.*             DEBUG=NO           DON'T PRINT DEBUG INFO
.*             DEBUG=YES          PRINT DEBUG INFO..NEEDS DEBUG MACRO
.*             BASE=1             ONLY 1 BASE REG (12)
.*             BASE=2             USES 12 AND 11 AS BASE REGS
.*             BASE=13            USES 13 AND 12 AS BASE REGS
.*
.*
         AIF   ('&LABEL' NE '').GENLBL LABEL SPECIFIED?
         MNOTE 8,'CSECT EXIT NAME MUST BE SPECIFIED'
         MEXIT
.GENLBL  ANOP
         PRINT GEN
*
*  PUT RET CODE IN R15 BEFORE CALLING SECEXIT
*
&LABEL   DS    0H
         AIF   ('&GEN' NE 'NO').NOGEN2  GEN ALL CODE?
         PRINT NOGEN
.*
.NOGEN2  ANOP
         AIF ('&DEBUG' EQ 'NO').NDB
         AIF ('&LABEL' EQ 'DEBUGRET').NDB
         LR       R4,R15            SAVE RETURN CODE
         LR       R2,R0             SAVE REGS OVER DEBUG
         LR       R3,R1
         LA    R1,5(0,R12)        R1 -> TO EXIT LABEL NAME
         LA       R0,1              R0^=0 MEANS SECTION EXIT
*        PERFORM  DEBUGRTN
         PERFORM  DEBUGRTN
         LR       R0,R2
         LR       R1,R3
         LR       R15,R4            RESTORE RETURN CODE
.*
.NDB     ANOP
         USING SAVEAREA,R13       SET SAVEAREA BASE TOO...
         L        R13,SAVELAST      POINT TO CALLER'S SAVEAREA
         LM       R0,R12,SAVER0     RESTORE REGISTERS 0 TO 12
         L        R14,SAVER14       RESTORE R14
         NI    SAVER14+3,X'01'      MARK THAT WE'VE EXITED UP 1 LEVEL
*              GET INTO PROPER MODE AND GO BACK TO CALLER           RH
         BSM   0,R14                                                RH
         LTORG
         AIF   ('&BASE' NE '13').NOEBASE R13 AS BASE?
         DROP  R13,R12            DROP R13 AND R12 BASE
.NOEBASE ANOP
         AIF   ('&BASE' EQ '1').ONEBAS2 NEED 2 BASE REGS?
         DROP  R12,R11            DROP OUR BASE
         AGO   .BASESE2           2 BASE REGS
.*
.ONEBAS2 ANOP
         DROP  R12                DROP OUR BASE
.*
.BASESE2 ANOP
         MEND
         EJECT
         MACRO
&LABEL   PERFORM  &ROUTINE,&ERR=
.**********************************************************************
*
&LABEL   ICM   R15,15,=V(&ROUTINE)  GET ADDRESS OF ROUTINE TO CALL
         BNZ   *+4+4+4            B IF GOT ADDRESS
         LA    R15,8              SET RC=8
         B     *+6                B IF NO ADDRESS
*              GET INTO PROPER MODE AND ...
         BASSM R14,R15            GO EXECUTE IT
         AIF ('&ERR' EQ '').PEXIT   ANY ERROR ROUTINE SPECIFIED?
         LTR      R15,R15           CHECK THE RETURN CODE
         BNZ      &ERR
.PEXIT   ANOP
***********************************************************************
         MEND
         SPACE    2
         MACRO
&LABEL   OLCMSG   &MSG                MACRO PARM MAPPED BY MSGDSECT
.* OLCMSG MACRO:
.*
.*       USED - TO WRITE MSG TO MSGPRINT DDNAME,
.*            - TO WRITE MSG TO THE JOB LOG
.*            - TO WRITE MSG TO THE CONSOLE
.*            - TO ABEND THIS PROGRAM IF NECESSARY AFTER MSG HAVE BEEN
.*              WRITTEN.
.*
.*       MSG   - 81 BYTES LONG. 1ST BYTE IS A FLAG BYTE
.*
.*
&LABEL   DS       0H
         LA       R1,&MSG             POINT AT THE ERROR MSG
         L        R15,=V(MSGRTN)      LOAD ADDRESS OF OLCMSG ROUTINE
*              GET INTO PROPER MODE AND ...
         BASSM R14,R15            GO EXECUTE IT
         MEND
*
         MACRO
&LABEL   REQUATE &SAVE=YES,&REGS=YES,&E=YES
         AIF   ('&REGS'(1,1) NE 'Y').SAVETS
***********************************************************************
*                                                                     *
*                 REGISTER EQUATES                                    *
*                                                                     *
***********************************************************************
         SPACE 1
*        GENERAL PURPOSE REGISTERS.
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
*        FLOATING POINT
FL0      EQU   0
FL2      EQU   2
FL4      EQU   4
FL6      EQU   6
         SPACE 2
         AIF   ('&E'(1,1) EQ 'N').SAVETS
         EJECT
.SAVETS  AIF   ('&SAVE'(1,1) EQ 'Y').SAVEOK
         MEXIT
.SAVEOK  ANOP
***********************************************************************
*                                                                     *
*                  SAVE AREA DESCRIPTOR SECTION                       *
*                                                                     *
***********************************************************************
         SPACE 3
SAVEAREA DSECT ,
SAVEWRD1 DS    F .            PL1 WORD
SAVELAST DS    F .            CHAIN POINTER TO LAST SAVE AREA
SAVENEXT DS    F .            CHAIN POINTER TO NEXT SAVE AREA
SAVEREGS DS    0CL60 .        WORKING REGISTER STORAGE AREA
SAVER14  DS    F .            R14 SLOT
SAVER15  DS    F .            R15 SLOT
SAVER0   DS    F .            R0 SLOT
SAVER1   DS    F .            R1 SLOT
SAVER2   DS    F .            R2 SLOT
SAVER3   DS    F .            R3 SLOT
SAVER4   DS    F .            R4 SLOT
SAVER5   DS    F .            R5 SLOT
SAVER6   DS    F .            R6 SLOT
SAVER7   DS    F .            R7 SLOT
SAVER8   DS    F .            R8 SLOT
SAVER9   DS    F .            R9 SLOT
SAVER10  DS    F .            R10 SLOT
SAVER11  DS    F .            R11 SLOT
SAVER12  DS    F .            R12  SLOT
SAVESIZE EQU   *-SAVEAREA
         CSECT
        AIF   ('&E'(1,1) EQ 'N').ENDMAC
         EJECT
.ENDMAC  ANOP
         MEND
         SPACE    2
         MACRO
         MSGRTN &GEN=YES
.*
.* MSGRTN MACRO:
.*
.*       GENERATE CODE TO PRINT MESSAGES
.*
         SPACE 2
**********************************************************************
 TITLE 'MSGRTN - MESSAGE PRINT ROUTINE'
*
* ERROR RTN, PUT OUT ALL SORTS OF ERROR MSGS. ABEND IF NECESSARY.
*    WARNING - THIS CODE IS NOT REENTRANT. IN CASE OF MULTI-TCB IMPL.
*
         DS    0H
         AIF   ('&GEN' EQ 'YES').GENLBL LABEL SPECIFIED
         PRINT NOGEN
MSGRTN   SECTION GEN=NO
         AGO   .GENLBL2
.GENLBL  ANOP
         PRINT GEN
MSGRTN   SECTION GEN=YES
.GENLBL2 ANOP
         LR    R2,R1              R2 -> MSG
         LA    R3,MSGPRINT        R3 -> TO MSGPRINT DCB
         USING IHADCB,R3
         TM    DCBOFLGS,DCBOFOPN  IS IT OPEN ?
         BO    MSC&SYSNDX         YES
*        RDJFCB MSGPRINT          IS THE MSGPRINT DD CARD THERE?
         RDJFCB MSGPRINT          IS THE MSGPRINT DD CARD THERE?
         LTR   R15,R15
         BZ    MS0&SYSNDX         YES
         MVC   MSGRTN(2),=X'0B0E' NO, NO REPORT
         B     MS7&SYSNDX         RETURN NOW
         SPACE 1
MS0&SYSNDX DS  0H
*        OPEN  (MSGPRINT,(OUTPUT)),TYPE=J
         OPEN  (MSGPRINT,(OUTPUT)),TYPE=J
         TM    DCBOFLGS,DCBOFOPN            DID IT OPEN ?
         BZ    MSA&SYSNDX                   NO, GO TO ERR RTN
         DROP  R3                 DROP DCB BASE
*        OLCMSG   OLC039
         B     MSC&SYSNDX         ON WE GO
         SPACE 1
MSA&SYSNDX DS       0H
*        OLCMSG   OLC040
         B     MS7&SYSNDX         RETURN TO CALLER
         SPACE 1
MSB&SYSNDX DS       0H
*        OLCMSG   OLC005
         SPACE 1
MSC&SYSNDX DS    0H
         USING MSGDSECT,R2        R2 POINTS TO MSG
         TM    MSGCODE,MSGWTL     REQUESTED TO WRITE TO LOG ?
         BNO   MS1&SYSNDX         NO, JUMP OVER
         MVC   WTLL+8(L'MSGBLK),MSGBLK BLANK OUT THE MSG AREA WTLL
         MVC   WTLL+8(L'MSGTEXT),MSGTEXT
*        WTO   MF=(E,WTLL)        WRITE MSG TO THE JOB LOG
         WTO   MF=(E,WTLL)        WRITE MSG TO THE JOB LOG
         SPACE 1
MS1&SYSNDX DS    0H
         TM    MSGCODE,MSGPRT     REQUESTED TO WRITE TO MSGPRINT ?
         BNO   MS2&SYSNDX         NO, JUMP OVER
         ICM   R5,15,=V(MSGPRINT)  LOAD DCB ADDRESS
         BZ    MS2&SYSNDX         NO DCB!
         MVC   MSGLINE+1(L'MSGTEXT),MSGTEXT PUT DATA IN PRINT LINE
*        PUT   (R5),MSGLINE       WRITE MSG ON MSGPRINT
         PUT   (R5),MSGLINE       WRITE MSG ON MSGPRINT
         MVI   MSGLINE,C' '       CLEAR PRINT LINE
         MVC   MSGLINE+1(132),MSGLINE ''
         SPACE 1
MS2&SYSNDX DS    0H
         TM    MSGCODE,MSGWTOLG   REQ TO WRITE CONSOLE EYECATCHER ?
         BNO   MS3&SYSNDX         NO, JUMP OVER
         MVC   WTOL+8(L'MSGBLK),MSGBLK BLANK OUT THE MSG AREA WTOL
         MVC   WTOL+8(L'WTOEYE1),WTOEYE1
*        WTO   MF=(E,WTOL)        WRITE EYECATCHER TO CONSOLE
         WTO   MF=(E,WTOL)        WRITE EYECATCHER TO CONSOLE
         MVC   WTOL+8(L'MSGBLK),MSGBLK BLANK OUT THE MSG AREA WTOL
         MVC   WTOL+8(L'WTOEYE2),WTOEYE2
*        WTO   MF=(E,WTOL)        WRITE EYECATCHER TO CONSOLE
         WTO   MF=(E,WTOL)        WRITE EYECATCHER TO CONSOLE
         MVC   WTOL+8(L'MSGBLK),MSGBLK BLANK OUT THE MSG AREA WTOL
         MVC   WTOL+8(L'WTOEYE3),WTOEYE3
*        WTO   MF=(E,WTOL)        WRITE EYECATCHER TO CONSOLE
         WTO   MF=(E,WTOL)        WRITE EYECATCHER TO CONSOLE
         MVC   WTOL+8(L'MSGBLK),MSGBLK BLANK OUT THE MSG AREA WTOL
         MVC   WTOL+8(L'WTOEYE2),WTOEYE2
*        WTO   MF=(E,WTOL)        WRITE EYECATCHER TO CONSOLE
         WTO   MF=(E,WTOL)        WRITE EYECATCHER TO CONSOLE
         SPACE 1
MS3&SYSNDX DS    0H
         TM    MSGCODE,MSGWTO     REQUESTED TO WRITE TO CONSOLE ?
         BNO   MS4&SYSNDX         NO, JUMP OVER
         MVC   WTOL+8(L'MSGBLK),MSGBLK BLANK OUT THE MSG AREA WTOL
         MVC   WTOL+8(L'MSGTEXT),MSGTEXT
*        WTO   MF=(E,WTOL)        WRITE MSG TO CONSOLE
         WTO   MF=(E,WTOL)        WRITE MSG TO CONSOLE
         SPACE 1
MS4&SYSNDX DS    0H
         TM    MSGCODE,MSGWTOLG   REQ TO WRITE CONSOLE EYECATCHER ?
         BNO   MS5&SYSNDX         NO, JUMP OVER
         MVC   WTOL+8(L'MSGBLK),MSGBLK BLANK OUT THE MSG AREA WTOL
         MVC   WTOL+8(L'WTOEYE2),WTOEYE2
*        WTO   MF=(E,WTOL)        WRITE EYECATCHER TO CONSOLE PART 2
         WTO   MF=(E,WTOL)        WRITE EYECATCHER TO CONSOLE PART 2
         MVC   WTOL+8(L'MSGBLK),MSGBLK BLANK OUT THE MSG AREA WTOL
         MVC   WTOL+8(L'WTOEYE1),WTOEYE1
*        WTO   MF=(E,WTOL)        WRITE EYECATCHER TO CONSOLE PART 2
         WTO   MF=(E,WTOL)        WRITE EYECATCHER TO CONSOLE PART 2
         SPACE 1
MS5&SYSNDX DS    0H
         SPACE 1                                                    RH
MS6&SYSNDX DS    0H
         TM    MSGCODE,MSGABND    REQUESTED TO ABEND ?
         BNO   MS7&SYSNDX         NO - THEN RETURN
*        ABEND 1211,DUMP
         ABEND 1211,DUMP
         SPACE 1                                                    RH
MS7&SYSNDX DS    0H
         SR    R15,R15            RC = 0
         SPACE 1                                                    RH
         AIF   ('&GEN' EQ 'YES').GENLBL3 LABEL SPECIFIED
         PRINT NOGEN
MSGEXITE SECEXIT GEN=NO           RETURN TO CALLER
         AGO   .GENLBL4
.GENLBL3 ANOP
         PRINT GEN
MSGEXITE SECEXIT GEN=YES          RETURN TO CALLER
.GENLBL4 ANOP
         SPACE 1
*                                                                   RH
* WTLL BELOW MUST BE 88 LONG TO HANDLE 80 BYTE MSGS.
*                                                                   RH
*        WTO      '                                                    +
               ROUTCDE=11
WTLL     WTO      '                                                    +
                                                    ',MF=L,  LEN=88    +
               ROUTCDE=11
*                                                                   RH
* WTOL BELOW MUST BE 88 LONG TO HANDLE 80 BYTE MSGS.
*        WTO      '                                                    +
                                                    ',MF=L,  LEN=88    +
               ROUTCDE=11         ROUTCDE=1 WHEN TO CONSOLE
WTOL     WTO      '                                                    +
                                                    ',MF=L,  LEN=88    +
               ROUTCDE=11         ROUTCDE=1 WHEN TO CONSOLE
*                                                                   RH
WTOEYE1  DC       CL45'**********************************************'
WTOEYE2  DC       CL45'***                                        ***'
WTOEYE3  DC       CL45'***        ATTENTION - ATTENTION           ***'
*
MSGBLK   DC       CL80' '    TO BLANK OUT THE WTOL AND WTLL AREAS
*                 CL80  ABOVE MUST BE LENGTH 80 IF WTOL AND WTLL LISTS
*                       ARE 88 LONG. ALL MSG HAVE 1ST 4 CHARS AS BLANK
*                       SO AS NOT TO CLOBBER STUPID WTL MACRO.
*-----------------------------------------------------------------
         SPACE 3
MSGLINE  DC    CL133' '           PRINT LINE
         SPACE 1
         ENTRY MSGPRINT
*MSGPRINT DCB  MACRF=(PM),DSORG=PS,RECFM=FBA,LRECL=133,BLKSIZE=13300,  +
               DDNAME=SYSPRINT,EXLST=REPORTE
MSGPRINT DCB   MACRF=(PM),DSORG=PS,RECFM=FBA,LRECL=133,BLKSIZE=13300,  +
               DDNAME=SYSPRINT,EXLST=REPORTE
REPORTE  DC    0F'0',X'87',AL3(*+3),XL176'00'
         SPACE 2
*
*
MSGDSECT DSECT
MSGCODE  DS       X
MSGPRT   EQU      X'01' PRINT THE MSG ON DDNAME=MSGPRINT
MSGWTL   EQU      X'02' WRITE THE MSG TO THE JOB LOG
MSGWTO   EQU      X'04' WRITE THE MSG TO THE OPERATOR CONSOLE/SYSLOG
MSGWTOLG EQU      X'08' WRITE A LARGE EYE CATCHER ON THE CONSOLE/SYSLOG
MSGSGNL  EQU      X'10' START THE "SIGNAL" MESSAGE REGION
MSGABND  EQU      X'80' ABEND AFTER PUTTING OUT MSGS AND SIGNAL MPR
MSGTEXT  DS       CL80  THE TEXT OF THE ERROR MSG
MSGTEXT2 DS       CL53  THE TEXT OF THE ERROR MSG FOR LRECL UP TO 133
         CSECT
         MEND
         SPACE    2
         MACRO
         DEBUG &GEN=YES
.*
.* DEBUG MACRO:
.*
.*       GENERATE CODE TO PRINT DEBUG MESSAGES
.*
         PRINT GEN
         SPACE    2
 TITLE 'DEBUGRTN - PRODUCE A TRACE IN FILE ''DEBUG'' '
*
* PRODUCE A TRACE OF SECTION ENTRIES AND EXITS
*
*   NOTE - SINCE DEBUG DCB OPEN BY OPENSYSP, WE GET NO TRACE UNTIL
*          AFTER THAT SECTION HAS RUN
*
         AIF   ('&GEN' EQ 'YES').GENLBL  LABEL SPECIFIED
DEBUGRTN SECTION GEN=NO
         PRINT NOGEN
         AGO   .GENLBL2
.GENLBL  ANOP
DEBUGRTN SECTION GEN=YES
         PRINT GEN
.GENLBL2 ANOP
         DS    0H
*
*              ON ENTRY, RC IS IN  R4
*                        R0 IS 0  FOR SECTION
*                              1  FOR SECEXIT
*                        R1 IS A(SECTION NAME)
*
         ST    R4,SAVERCDB        SAVE RETURN CODE
         LR    R5,R1              R5 -> TO CSECT NAME               RH
         LR    R6,R0              R6 = 0 OR 1                       RH
         LA    R2,DEBUG         IS DEBUG IN EFFECT
         USING IHADCB,R2
         TM    DCBOFLGS,DCBOFOPN  IS IT OPEN ?
         BO    DEBUGOPN           YES
*        RDJFCB DEBUG             IS THE DEBUG DD CARD THERE?
         RDJFCB DEBUG             IS THE DEBUG DD CARD THERE?
         LTR   R15,R15
         BZ    RETOPNP            YES
         MVC   DEBUGRTN(2),=X'0B0E' NO, NO DEBUGGING
         B     DEBUGRET           RETURN NOW
         SPACE 1
RETOPNP  DS    0H
*        OPEN  (DEBUG,(OUTPUT)),TYPE=J
         OPEN  (DEBUG,(OUTPUT)),TYPE=J
*        LA    R1,DEBUG
*        USING IHADCB,R1
         TM    DCBOFLGS,DCBOFOPN            DID IT OPEN ?
         BZ    ERROPEND                     NO, GO TO ERR RTN
*        DROP  R1
*        OLCMSG   OLC039
         OLCMSG   OLC039
         B     DEBUGOPN           ON WE GO
         SPACE 1
ERROPEND DS       0H
*        OLCMSG   OLC040
         OLCMSG   OLC040
         B     DEBUGRET           RETURN TO CALLER
         SPACE 1
ERROPENP DS       0H
*        OLCMSG   OLC005
         OLCMSG   OLC005
         SPACE 1
DEBUGOPN DS    0H
         SPACE 1
         LTR   R6,R6            WAS IT A SECTION OR SECEXIT.
         BNZ   DEBUGEX            SECEXIT
         LA    R3,OLCBLNK         R3 -> TO BLANKS
         MVC   DEBUGN1(69),1(R3)  CLEAR MODULE NAME AREA
         L     R3,OFFSET        OFFSET MODULE NAME TO SHOW NESTING
         LA    R3,4(R3)         ADD INCREMENT
         ST    R3,OFFSET
         CH    R3,=H'69'        MAX LINE LENGTH
         BNH   *+8
         LA    R3,61
         LA    R3,DEBUGN1(R3)
         MVC   0(8,R3),0(R5)    MOVE SECTION NAME TO TEXT           RH
*        PUT   (R2),DEBUGN
         PUT   (R2),DEBUGN
         B     DEBUGRET
         SPACE 1
DEBUGEX  EQU   *
         LA    R3,OLCBLNK         R3 -> TO BLANKS
         MVC   DEBUGM1(69),1(R3)  CLEAR MODULE NAME AREA
         L     R3,OFFSET        OFFSET MODULE NAME TO SHOW NESTING
         LR    R4,R3
         SH    R4,=H'4'         AND DECRMENT
         BP    *+6
         SR    R4,R4            DO NOT LET IT GO NEG.
         ST    R4,OFFSET
         CH    R3,=H'69'        MAX LINE LENGTH
         BNH   *+8
         LA    R3,61
         LA    R3,DEBUGM1(R3)
         MVC   0(8,R3),0(R5)    MOVE SECTION NAME TO TEXT           RH
         L     R1,SAVERCDB        R1 = PREV SECTIONS RETURN CODE
         LTR   R1,R1              WAS THERE A RETURN CODE?
         BZ    NORC               NO
         CVD   R1,DWORD2          CONVERT TO DECIMAL
         UNPK  DWORD2(5),DWORD2+5(3) CONVERT TO DISPLAY
         MVZ   DWORD2+4(1),DWORD2 FIX SIGN BITS
         MVC   8(5,R3),=C', RC='  SET UP RC PART OF MSG             RH
         MVC   13(3,R3),DWORD2+2  PUT RC IN MSG                     RH
         SPACE 1
NORC     DS    0H
*        PUT   (R2),DEBUGM
         PUT   (R2),DEBUGM
         SPACE 1
         AIF   ('&GEN' EQ 'YES').GENLBL3 LABEL SPECIFIED
         PRINT NOGEN
DEBUGRET SECEXIT GEN=NO           RETURN TO CALLER
         AGO   .GENLBL4
.GENLBL3 ANOP
         PRINT GEN
DEBUGRET SECEXIT GEN=YES          RETURN TO CALLER
.GENLBL4 ANOP
         DROP   R2
DWORD2   DC    D'0'
OFFSET   DC    F'0'
SAVERCDB DC    F'0'
DEBUGN   DC    CL11' ENTRY TO:'
DEBUGN1  DC    CL69' '
DEBUGM   DC    CL11'EXIT FROM:'
DEBUGM1  DC    CL69' '
         SPACE 1
OLCBLNK  DC    AL1(MSGPRT)
         DC    CL81' '
         SPACE 1
OLC039   DS    0CL81
*        DC    AL1(MSGWTL+MSGPRT)
         DC    AL1(MSGPRT)
         DC    C'DBG039 - DEBUG OPTION IN EFFECT - '
         DC    C'A TRACE WILL BE PRODUCED IN FILE ''DEBUG'' '
         DC    CL(81-(*-OLC039))' '
         SPACE 1
OLC040   DS    0CL81
*        DC    AL1(MSGWTL+MSGPRT)
         DC    AL1(MSGPRT)
         DC    C'DBG040 - DEBUG OPTION CANCELLED - '
         DC    C'OPEN ERROR ON FILE ''DEBUG'' '
         DC    CL(81-(*-OLC040))' '
         SPACE 1
OLC005   DS    0A
*        DC    AL1(MSGWTL+MSGWTOLG+MSGWTO+MSGSGNL+MSGABND)
         DC    AL1(MSGPRT+MSGSGNL+MSGABND)
         DC    C'DBG005 - ABEND, CANNOT OPEN DEBUG DD'
         DC    CL(81-(*-OLC005))'  '
         SPACE 1
         ENTRY DEBUG
*DEBUG   DCB   MACRF=(PM),DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=6160,     +
               DDNAME=DEBUG,EXLST=DEBUGE
DEBUG    DCB   MACRF=(PM),DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=6160,     +
               DDNAME=DEBUG,EXLST=DEBUGE
DEBUGE   DC    0F'0',X'87',AL3(*+3),XL176'00'
         SPACE 2
         MEND
*
*              YOUR CODE STARTS HERE
*              MAKE SURE YOU HAVE AN ENTRY STATEMENT IN THE LINKAGE
*              EDITOR CONTROL STATEMENTS OR SPECIFY THE STARTING
*              CSECT NAME ON THE  END STATEMENT
*
         ENTRY YOURCODE
         CNOP  0,4
YOURCODE DS    0H
