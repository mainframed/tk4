//ADMASP   JOB
/*ROUTE PRINT R115
//S EXEC HLASMC,PARMC='NOALIGN,NORLD',CLASS='*'
//ASM.SYSLIN DD DISP=SHR,DSN=VSAPL.OBJLIB(ADMASP)
//ASM.SYSIN DD *
*
*        NOTE. CSECT CODE STARTS  AT LINE 12100
*
         TITLE 'ADMASPT FAKEOUT MODULE FOR VSAPL'
*              RANDY HALL, DIVERSIFIED DEVELOPMENTS, 1984'
*              1151 PALMER ROAD,
*              VICTORIA, B.C. CANADA
*              604-386-1061
*
***********************************************************************
*                                                                     *
*   DIVERSIFIED DEVELOPMENTS ADMASPT, VERSION 14.0                    *
*                                                                     *
*   THIS PROGRAM IS LINKED WITH VSAPL TO LOAD THE REAL ADMASPT IF     *
* AND WHEN THE USER WANTS GDDM SERVICES. BY LOADING ADMASPT AT        *
* EXECUTION TIME RATHER THAN AT LINK TIME, WE ENSURE THAT WE          *
* ALWAYS USE AN UP-TO-DATE VERSION OF GDDM, AND IT ALSO AVOIDS        *
* THE RE-LINKING OF VSAPL EVERY TIME GDDM IS CHANGED.                 *
*                                                                     *
* WE ALSO CHECK TO SEE IF WE ARE BEING CALLED FROM 24 OR 31 BIT       *
* MODE AND CALL ADMASPT IN THE APPROPRIATE MODE.                      *
*                                                                     *
***********************************************************************
         EJECT
         MACRO
&NAME    BEGIN &A,&B,&C
         USING   *,15        GET TEMP ADDRESSABLIITY
&NAME    SAVE  (14,12),,*
         CNOP  0,4           ALIGN ON WORD BOUNDARY
         BAL   14,*+76       BRANCH ROUND SAVE AREA
         AIF   (T'&B NE 'O').NO1
         USING *,13          GET ADDRESSABLIIT
         AGO   .NO3
.NO1     AIF   (T'&C NE 'O').NO2
         USING *,13,&B
         AGO   .NO3
.NO2     USING *,13,&B,&C
.NO3     ANOP
         DC    F'0'          SET HIGH ORDER WORD TO 0 FOR PL1
         DS    17F
         DROP  15
         ST    13,4(14)      SAVE REGS 13 AND
         ST    14,8(13)      BACK CHAIN)
         LR    13,14         GET SAVE AREA ADDRESS
         AIF   (T'&B EQ 'O').NO4
         LA    &B,2048(13)   GET SECOND BASE REGISTER
         LA    &B,2048(&B)   GET SECOND BASE REGISTER
         AIF   (T'&C EQ 'O').NO4
         LA    &C,4095(0,&B)      SET UP THIRD BASE REGISTER        RH
         LA    &C,1(0,&C)         *                                 RH
.NO4     AIF   (T'&A NE 'O').B
         MEXIT
.B       XC    &A.X,&A.X     CLEAR RETURN CODE
&NAME    B     A23K&SYSNDX   BRANCH ROUND RETURN
         SPACE 1
&A       LA    15,0          GET RETURN CODE
         ORG   *-2
&A.X     DS    H             HALF WORD RETURN CODE, INITIALY ZERO
         L     13,4(13)      GET OLD SAVE AREA
         L     14,12(13)     GET REG 14
         LM    0,12,20(13)   GET REST OF REGS
         BR    14
         SPACE 1
A23K&SYSNDX    DS    0H      START OF MAIN LINE CODE
         MEND
         MACRO
         REGEQU
         SPACE 1
*        STANDARD REGISTER EQUATES. B.C. GOVERNMENT.
         SPACE 1
*        GENERAL PURPOSE REGISTERS.
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
*        FLOATING POINT
FL0      EQU   0
FL2      EQU   2
FL4      EQU   4
FL6      EQU   6
         SPACE 2
         MEND
         EJECT
***********************************************************************
*                                                                     *
*   REGISTER USAGE.                                                   *
*   R0, ........................ WORK                                 *
*   R1  ........................ WORK                                 *
*   R2  ........................ NOT USED                             *
*   R3  ........................ NOT USED                             *
*   R4  ........................ NOT USED                           RH*
*   R5  ........................ NOT USED                             *
*   R6  ........................ NOT USED                           RH*
*   R7  ........................ NOT USED                           RH*
*   R8  ........................ NOT USED                             *
*   R9  ........................ NOT USED                             *
*   R10 ........................ NOT USED                             *
*   R11 ........................ NOT USED                             *
*   R12  ....................... BASE REGISTER                        *
*   R13  ....................... SAVE                                 *
*   R14, R15 ................... WORK ,OS LINK REGISTERS              *
*                                                                     *
***********************************************************************
         SPACE 3
         REGEQU
         ENTRY ADMASP
ADMASP   CSECT
ADMASP   AMODE ANY
ADMASP   RMODE ANY
*        BEGIN                                                      RH
         USING ADMASP,R15         SET TEMP BASE REG                 RH
         B     AROUND             GO AROUND ID
         DC    X'07'
         DC    CL7'ADMASP '
         SPACE 1
AROUND   DS    0H
         LA    R1,0(0,R1)         CLEAR R1 HI-ORDER BYTE FOR 31     RH
         LR    R2,R1              SAVE PARM ADDR                    RH
         LA    R13,0(0,R13)       CLEAR R13 HI-ORDER BYTE FOR 31    RH
         BSM   14,0               SAVE CURRENT AMODE                RH
         STM   R14,R12,12(R13)    SAVE VSAPL REGS
         LA    R12,SAVE           R12 -> TO OUR SAVE AREA           RH
         ST    R13,SAVE+4         SAVE A(VSAPLS SAVE AREA)          RH
         ST    R12,8(0,R13)       SAVE A(OUR SAVE AREA)             RH
         LR    R13,R12            R13 -> TO OUR SAVE AREA           RH
*        STM   R14,R12,12(R13)    SAVE VSAPL REGS IN OUR SAVE AREA  RH
         LR    R12,R15            LOAD OUR BASE REG                 RH
         DROP  R15                DROP TEMP BASE REG                RH
         USING ADMASP,R12         SET OUR BASE REG                  RH
         SPACE
ADMASP31 DS    0H
         ICM   R15,15,CADMASPT    HAS ADMASPT BEEN LOADED ALREADY ?
         BNZ   SKIPLOAD           YES, ON WE GO
         SPACE 1
         LOAD  EP=ADMASPT,ERRET=BADLOAD LOAD ADMASPT
         SPACE 1
FOUNDIT  DS    0H
         ST    R0,CADMASPT        SAVE ENTRY ADDRESS
         LR    R15,R0             PUT ENTRY ADDRESS INTO R15        RH
         SPACE 1
SKIPLOAD DS    0H
         LR    R1,R2              RELOAD VSAPL PARM ADDRESS         RH
*        L     R1,20(R13)         RELOAD VSAPL PARM ADDRESS         RH
*              GET INTO PROPER MODE AND GO TO REAL ADMASPT          RH
         BASSM R14,R15                                              RH
         SPACE 1
         L     R13,4(0,R13)       R13 -> BACK TO VSAPL SAVE AREA    RH
         ST    R15,16(0,R13)      PUT RC INTO VSAPL SAVE AREA       RH
         LM    R14,R12,12(R13)    RELOAD VSAPL REGS
*              GET INTO PROPER MODE AND GO BACK TO VSAPL            RH
         BSM   0,R14                                                RH
         SPACE 1
BADLOAD  DS    0H
         L     R13,4(0,R13)       R13 -> BACK TO VSAPL SAVE AREA    RH
         ST    R15,16(R13)        SAVE LOAD'S RC
         TPUT  MSG,LMSG           SEND HIM A MSG
         LM    R14,R12,12(R13)    RELOAD VSAPL'S REGS
*              GET INTO PROPER MODE AND GO BACK TO VSAPL            RH
         BSM   0,R14              GO BACK TO VSAPL WITH BAD RC
         SPACE 1
MSG      DC    C'INVALID LOADLIB FOR GDDM'
LMSG     EQU   *-MSG
CADMASPT DC    F'0'
SAVE     DC    18F'0'
         LTORG
         END
         SPACE 1
*
*        THE FOLLOWING CODE COULD ALSO BE USED FOR PART
*        OF YOUR CODE TO BE EXECUTED AS 31 BIT CODE
*
*
*        BECAUSE SOME OF THE CONTROL BLOCKS MUST BE ACCESSED IN 31
*        BIT MODE (OUXB FOR ONE) PUT US INTO 31 BIT MODE ADDRESSING
*
*        LA    R7,0(0,R7)         CLEAR BYTE 0 OF BASE REG 7        RH
         L     R1,XADDR1          GET 31 BIT MODE ADDRESS           RH
         BSM   0,R1               GET INTO 31 BIT MODE              RH
         DS    0F                 ALIGN ON A FULLWORD BOUNDARY      RH
XADDR1   DC    X'80',AL3(*+3)     NEXT ADDRESS IS 31 BIT MODE       RH
*
*              OR WITHOUT LABELS. ..
*
         CNOP  0,4                ALIGN ON A FULLWORD BOUNDARY      RH
         L     R1,*+8             GET 31 BIT MODE ADDRESS           RH
         BSM   0,R1               GET INTO 31 BIT MODE              RH
         BSM   0,R1               TO FILL 4 BYTES                   RH
         DC    X'80',AL3(*+3)     NEXT ADDRESS IS 31 BIT MODE       RH
         SPACE 1
*
*        YOUR  CODE GOES HERE
*
*
*        NOW GO BACK TO 24 BIT MODE ADDRESSING
*
         LA    R1,XADDR4          GET BACK INTO 24 BIT MODE         RH
  OR     LA    R1,*+4+2           GET BACK INTO 24 BIT MODE         RH
         BSM   0,R1               ''                                RH
XADDR4   DS    0H                                                   RH
*
         SPACE 1
*
*        OR ANOTHER METHOD OF SETTING AMODE...THANKS TERRY C...
*
*
*
*      THIS ROUTINE SWITCHES THE AMODE TO 24
*      ENTRY TO THIS ROUTINE IS THROUGH A BAS  R14,@AMODE24
*
         DS    0F
         DC    X'7FFFFFFF'
@AMODE24 EQU   *
         N     R14,*-4
         BSM   0,R14
*
*      THIS ROUTINE SWITCHES THE AMODE TO 31
*      ENTRY TO THIS ROUTINE IS THROUGH A BAS  R14,@AMODE31
*
         DS    0F
         DC    X'80000000'
@AMODE31 EQU   *
         O     R14,*-4
         BSM   0,R14
*
*
*
/*
//
