//HOWDISAS  JOB (87944,348496),'HALL.S1BL',CLASS=S,
//             MSGCLASS=A,PRTY=1,
//             USER=*,PASSWORD=*
//*
//*
/*JOBPARM  K=0
/*ROUTE PRINT R0
//* /*OUTPUT F306 PDE=TEXT,FLASH=NONE,DUPLEX=YES,COPIES=3
//STEP1  EXEC PGM=IEBGENER
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
//*
//*    NOTE....THIS JCL IS SET UP TO USE THE XEROX PRINTER, AND TO
//*            PRINT ON BOTH SIDES OF THE PAPER.
//*
//*            IF YOU DO NOT WANT YOUR MANUALS ON 8 1/2 X 11
//*            3-HOLE PAPER, PRINTED ON BOTH SIDES, REVERSE
//*            THE SYSUT2 STATEMENTS SHOWN BELOW, OR MODIFY
//*            THE JCL TO DO WHAT YOU WANT.
//*
//SYSUT2 DD SYSOUT=*,
//*YSUT2 DD SYSOUT=(*,,F306),
//          DCB=(RECFM=FA,LRECL=80,BLKSIZE=80)
//SYSUT1 DD *
1
-
-
                                  DISASM REFERENCE MANUAL
0                                       RELEASE 1.0
-
-
0                                       1st Edition
                                       October, 1986

1      DISASM ACKNOWLEDGEMENTS
-
       DISASM was orginally obtained from a share tape and was written b

                  Dick Thornton
                  Blue Cross of Virginia
                  2015 Staples Mill Road
                  Richmond, Va. 23279

       DISASM has been modified by:

0      January 1999 by:
0        Randy Hall,
         1151 Palmer Road,
         Victoria, B.C.
         V8P-2H5
         Phone:250-385-1061

0      DISASM was heavily modified to produce a more useable and readabl
       assembler listing type of output. If a source deck is produced, i
       can, in most cases, be passed through the assembler compiler to
       produce a valid load module. This is a very usefull feature if th
       original source for a load module has been lost, and modification
       are to be made to the module.
       All (hopefully) changes have RH in columns 69-70.

       Version updated and modified January 1991 by:
         Alan C Field
         Wetterau Inc.,
         345 Dunn Road,
         Florissant, Mo., 63031-7995
         Phone: (314) 839-7040

       Version updated and modified March 1991 by:
         Robert Styma
         AG Communication Systems
         P.O. Box 52179
         Phoenix, Az 85702-2179
         Phone: (602) 582-7323

       Made the 3 module format into a 1 module format. Changed the
       work area sizes to be symbolics and bumped buffer area to
       handle max length records. This is in DISASM1. Fatal messages
       are written to the screen using TPUT in addition to going to
       the print file.  DISASM1 and DISASM2 have code which deals with
       BAS, BASSM and similar instructions. Minor fixes for handling
       weak externs and label problems. Changes to some of the 2 byte
       opcodes to show they are not proviledged.

       Version updated and modified May 1992 by:
         Alan C Field
         Wetterau Inc.,
         345 Dunn Road,
         Florissant, Mo., 63031-7995
         Phone: (314) 839-7040

       Extensions to opcode tables, change format of printed listing
       to look more like ASSEMBLER output (easier to read on 80 col
       screen) and bug fixes where some instructions didn't
       dis-assemble correctly, increases to some table sizes to handle
       BIG modules.


0                                         - 1 -
1      DISASM USERS GUIDE
-
       DISASM is a one-pass disassembler which produces an assembler
       language source program from a CSECT within a load module.
       Control cards permit specification of areas containing no
       instructions, allow base registers to be provided so that
       symbolic labels may be created during disassembly, and
       definition of DSECTS to be used during disassembly. Conditional
       branch instructions use the extended mnemonics, where possible,
       and explicit registers are denoted by R0, R1, ... R15. Informatio
       comments are given on SVC's, and various BAL instructions to aid
       in creating a documented source program.

       1. JCL requirements:
             A. EXEC card:        To execute PGM=DISASM. A parm field ma
                                  be specified if floating point and/or
                                  privileged instructions are to be
                                  found in the module, or if you want a
                                  hex dump listing of the csect.
             B. STEPLIB DD card:  Optional. Specify the pds containing
                                  the module DISASM.
             C. LOADLIB DD card:  Optional. Specify the pds containing t
                                  modules DISASM1 and DISASM2, if other
                                  SYS1.LINKLIN or STEPLIB.
             D. SYSLIB DD card:   Specify the pds containing the module
                                  disassembled.
                                  If there is only one csect in the
                                  module, or you want the first csect
                                  in the module, the member name can
                                  be specified with the dsname.
             E. SYSPRINT DD card: Optional. Specify the printed
                                  output dataset. Blksize must be
                                  specified as a multiple of 133.
                                  RECFM=FBA,LRECL=133 is hard coded.
             F. SYSPUNCH DD card: Optional. Specify printed output
                                  dataset. Blksize must be specified
                                  as a multiple of 80.
                                  RECFM=FB,LRECL=80 is hard coded.
             G. SYSIN DD card:    Optional. Contains control cards.
                                  The MODULE-CSECT card is required if
                                  other than the first csect is to be
                                  disassembled. Blksize must be a
                                  multiple of 80. RECFM=FB,LRECL=80 is
                                  hard-coded.















0                                         - 2 -
1      DISASM USERS GUIDE
-
         Jcl example:  Disassemble csect IECIOSCN in module IEANUC01,
                       which is in the pds SYS1.NUCLEUS. The modules
                       DISASM, DISASM1, and DISASM2 are all in the pds
                       SYS1.TECHLOAD. A printed listing is to be made,
                       and the source program output will be placed in
                       the sequential dataset USER02.IECIOSCN.ASM.

             //DISASM EXEC PGM=DISASM
             //STEPLIB DD DSN=SYS1.TECHLOAD,DISP=SHR
             //SYSPRINT DD SYSOUT=A,DCB=BLKSIZE=133
             //SYSLIB DD DSN=SYS1.NUCLEUS,DISP=SHR
             //SYSPUNCH DD DSN=USER02.IECIOSCN.ASM,DISP=(,CATLG),
             //            UNIT=DISK,
             //            DCB=BLKSIZE=3120,
             //            SPACE=(TRK,(5,2),RLSE)
             //SYSIN DD *
             IEANUC01 IECIOSCN
             /*

       2. Parm field on the EXEC card:
               Omit the parm field, unless a hex dump of the module, or
               floating point and/or privileged instructions are to
               be found in the csect being disassembled. When the parm
               field is not specified, entries for the privileged and
               floating point instructions are erased from the internal
               instruction tables used during disassembly, and no hex
               dump of the module is done. Valid parm fields are :

                 PARM=(TEXT)      Print a hex dump of the module
                 PARM=(SUPVR)     Assemble privileged instructions
                 PARM=(FLTPT)     Assemble floating point instructions
                 PARM=(SUPVR,FLTPT) Assemble both privileged and
                                  floating point instructions.
                 PARM=(TEXT,SUPVR,FLTPT) Assemble both privileged and
                                  floating point instructions, and
                                  print a hex dump of the module.

       3. SYSIN control cards.
                        Data for the control cards is
                        contained only in columns 1-72. Columns
                        73-80 may be used for any desired purpose.
                        Comment cards may be entered with an asterisk
                        (*) in column 1.
                        In addition, columns beyond the last
                        specified may be used for any purpose.
                        Leading zeros must be included in all
                        fields giving hex or decimal data.
                        Name fields must be left justified with
                        trailing blanks.
                        Hex fields may contain only the hex digits
                        0-9 and A-F.
                        Decimal fields may contain only digits 0-9.
                        The MODULE-CSECT card must be the first
                        card in the input stream.
                        DSECT definitions may not include any other
                        control cards.




0                                         - 3 -
1      DISASM USERS GUIDE
-
                        USING cards for dsects must be entered at
                        some point after the dsect definition.
                        DATA-ONLY cards and PROGRAM USING cards
                        may be entered in any order except
                        within dsect definitions.

          A. MODULE-CSECT card (required), must be the first card in
                          the SYSIN stream. It specifies the module name
                          and csect name. Module name is required, and
                          must name an entry in the directory of the
                          pds specified by the SYSLIB DD card. The CSECT
                          name is optional. If specified, the named
                          csect must exist in the module. If omitted, th
                          csect with ESDID=0001 is disassembled.

             Format:
                     Free-form, with module name preceding csect name.
                     At least one blank must separate module name and
                     csect name. The names may be surrounded by any numb
                     of blanks.
                     For an example, see the JCL example.

          B. DATA-ONLY card (optional)
                       The DATA-ONLY card is used to describe areas of t
                       CSECT being disassembled which contain no
                       instructions. Use of this card eliminates
                       creation of instructions from constant data.
                       Up to 256 DATA-ONLY cards may be entered. These
                       cards may occur anywhere in the SYSIN stream
                       after the MODULE-CSECT card, but not within
                       a DSECT definition set.

             Format:
                     Col  1-4  : Literal 'DATA'
                     Col   5   : Blank
                     Col  6-11 : Offset to beginning of area in hex
                     Col   12  : Blank
                     Col 13-18 : Offset to end of area in hex

             Example: DATA 0001C0 0002F0

          C. DSECT definitions (optional).
                     A DSECT is defined by a header card followed
                     by a variable number of field definition cards
                     (up to 9999 of them).
                     No other control card may be entered within a
                     dsect definition. Up to 256 dsect definitions
                     may be entered.

             DSECT header card format:
                  Col 1-8    : Dsect name
                  Col 9      : Blank
                  Col 10-14  : Literal 'DSECT'
                  Col 15     : Blank
                  Col 16-19  : Number of field cards to follow (decimal)


0                                         - 4 -
1      DISASM USERS GUIDE
-
             DSECT field card format:
                  Col 1-8    : Field name
                  Col 9      : Blank
                  Col 10-13  : Offset to left end of field, in hex.
                               Maximum offset is x'0FFF' (4095)
                  Col 14     : Blank
                  Col 15-17  : Length of field in bytes (decimal).
                               Maximum length is 256

             Example: HDR      DSECT 0004
                      PGMNAME  0000 007
                      DATE     0007 008
                      TIME     000F 005
                      FILL     0014 002
                      GETCORE  DSECT 0002
                      SAVE     0000 072
                      REST     0048 074

          D. ULABL cards.
                        These cards define user labels to be placed
                        on statements within the program. If program
                        base registers are set up with USING cards,
                        these will also be generated as symbolic
                        operands on instructions.

              Format:
                  Col  1-5   : Literal 'ULABL'
                  Col   6    : Blank
                  Col  7-14  : Label name
                  Col  15    : Blank
                  Col 16-21  : Offset to left end of field, in hex.
                  Col  22    : Blank
                  Col 23-25  : Length of field in dec. 256 is max.

             Example: ULABL START    000000 004

          E. USING cards.
                        These cards define base register usage.
                        Up to 256 using cards may be entered. Use
                        of these cards permits the disassembler to
                        convert explicit base-displacement addresses
                        to symbolic labels. Labels created within
                        the program will be 7 characters long. The
                        first character is 'A', followed by the
                        6-hex-digit offset to the label. A USING
                        card must be entered for each dsect to
                        be used.

            Format:

                 Col 1-5   : Literal 'USING'
                 Col 6     : Blank
                 Col 7-12  : Offset to begin loc for using range in hex
                             (this is where the using statement will occ
                 Col 13    : Blank
                 Col 14-19 : Offset to ending loc for using range in hex
                             (this is where the drop statement will occu
0                                         - 5 -
1      DISASM USERS GUIDE
-
                 Col 20    : Blank
                 Col 21    : Base register to be used (hex, 1-F)
                 Col 22    : Blank
                 Col 23    : Type, P=program base, D=dsect base
                 Col 24    : Blank
                 Col 25-30 : Initial base register value in hex if type
                 Col 25-32 : Dsect name if type D

             Example: USING 000000 000760 C P 000000
                      USING 000000 000092 3 D GETCORE

            Example2: The program has 3 base registers..12, 10, 7
                      and it is H'2966' bytes long.
                      USING 000000 001000 C P 000000
                      USING 000000 002000 A P 001000
                      USING 000000 002966 7 P 002000

       4. Suggestions for use:
                      On the first pass, do not use a SYSPUNCH
                      DD card, but print the SYSPRINT listing. Use the
                      listing to determine which registers are used as
                      program base registers, their initial values, and
                      their ranges. Make up USING cards for these. Find
                      any places where no instructions should be generat
                      (only constants), and make up DATA-ONLY cards for
                      these ranges. If you can determine any registers
                      that are bases for areas which can be used for
                      dsects (CVT reference, etc.), determine the
                      range of valid use, and make up DSECT definitions
                      and USING cards for these. Make a second run,
                      including the above cards, and creating
                      a source program output with the SYSPUNCH
                      DD card.

       5. Output description:

          A. SYSPUNCH: This output contains the disassembled source
                       program. Statement names begin in column 1,
                       mnemonics begin in column 10, operands in col
                       16, and an occasional comment begins in col-
                       umn 44. A sequence number (by tens) is in
                       columns 73-80. Comments are included to show
                       the macro name associated with SVC's, and other
                       statements are flagged to aid in identification
                       of certain operations:
                       BALR 14,15              STD LINKAGE
                       BALR X,0                ADDRESS SET
                       OTHER BALR'S            NON-STD LINKAGE
                       BAL 0,XXX AND BAL 1,XXX PARM SET BRCH
                       BAL X,XXX               PERFORM
                       STM INSTRUCTIONS        SAVE REGS
                       LM  INSTRUCTIONS        RESTORE REGS
                       BR R14                  EXIT
                       Abs. location Hex 10    CVT address
                       Abs. location Hex 4C    CVT address
                       Other abs. locations    PSA reference

0                                         - 6 -
1      DISASM USERS GUIDE
-
                       When used explicitly in instructions, registers
                       are specified as R0, R1, R2,... R15.
                       Register equate statements are generated at the
                       end of the program.

                       If any DSECTs were defined in the SYSIN dataset,
                       they will be near the end of the source program.
                       The extended mnemonics are used for conditional
                       branches wherever possible.

           B. SYSPRINT content:

              Directory information: Contains data from the directory
                                     entry of the module containing
                                     the CSECT to be disassembled.

                          ESD table: A formatted list of all external
                                     entries found in the module.

                          RLD table: A formatted listing of all relocati
                                     dictionary entries pertaining to th
                                     CSECT.

                 User entered cards: A list of the cards entered by the
                                     user, with diagnostics, if appropri

                Phase 1 label table: A list of all the labels to be used
                                     during disassembly, including those
                                     developed from ESD entries, RLD
                                     entries, and generated names
                                     resulting from USING card processin

                               Text: If requested, a storage-dump format
                                     listing of the text which comprises
                                     the CSECT being disassembled.

                     Source listing: A printout of the generated source
                                     program statements, including the h
                                     value which resulted in the instruc
                                     creation, in an assembly source
                                     listing format.
















0                                         - 7 -
1      DISASM USERS GUIDE
-
0      User Abends:

        DISASM may end with one of two user abends:

        U0777 - There is an invalid parm specified.
        U0888 - Check in the SYSPRINT listing for an error message
                describing the error causing the abend (e.g. table
                overflow).


0      Program processing description.

       DISASM functions:

       . Process the parm field, if any: set indicators used by
         DISASM1 and DISASM2 to set up their instruction tables.
       . Open all files.
       . Get storage for the symbol table, RLD table, and data-only
         tables (109,544 bytes total).
       . Process the module-CSECT card to obtain the member
         and CSECT names.
       . Issue BLDL against SYSLIB to obtain directory info for
         the member specified. If the specified member is an
         alias, re-issue a BLDL for the real member. Print
         directory information.
       . Point to the member in the SYSLIB PDS, and process the
         member. Load modules contain an external symbol dictionary
         followed by text and relocation dictionary information.
         all ESD info for the module precedes the first control
         record. A control record precedes each block of text.
         RLD info for the text follows each text block. Processing
         of load module information is as follows:
         a. Build an external symbol table, using the CESD blocks.
         b. Search for the desired CSECT as the table is being built.
            This CSECT must be found before the first control record.
         c. Read blocks until a control record for the desired CSECT is
            found (by ESD-id).
         d. When found, issue GETMAIN for an area large enough to contai
            the entire text.
         e. Place text blocks in contiguous storage locations and mainta
            during disassembly.
         f. Use RLD information for the CSECT to build the RLD table.
       . Load and perform DISASM1.
       . If any errors found by DISASM1, terminate processing.
       . Print the final label table to be used during disassembly.
       . Load and execute DISASM2.
       . Generate the DSECT entries.
       . Generate the REQU macro and end statements
       . Terminate processing



0                                         - 8 -
1      DISASM USERS GUIDE
-
0      DISASM1 functions:

       DISASM1 is the second phase of disassembly, and is performed by
       DISASM. A common data area, defined in DISASM, is passed to this
       program on entry.

       The SYSIN file is read to exhaustion. Using cards are reformatted
       and stored in a table - up to 256 using statements may be
       entered. DSECT cards may follow the using statements. When used,
       DSECT statements are reformatted, and built into tables. A
       maximum of 256 DSECTs may be entered. Data only cards may be
       included before, between, or after DSECTs to show areas in the
       program where no instructions occur. Up to 256 data only areas
       may be specified.

       At eof on SYSIN, a pseudo dis-assembly pass is made using the
       text stored by disasm. Any resolvable address within the text is
       used to create a new entry in the label table, which will be used
       by DISASM2 in the actual dis-assembly pass.

       Disassembly tables are set up similarly to those used by DISASM2
       for the simulated disassembly performed in this module when any
       program base register using statements are entered.

       Storage is obtained for the DSECT table and using table, and
       addresses of these tables are stored in the common parameter
       area. Using and DSECT cards are edited, reformatted, and placed
       in the appropriate tables. If any errors are found, they are
       printed, and the disassembly will be terminated on return to
       disasm.

       Storage is obtained for the label table, and a simulated
       dis-assembly is performed to create label table entries for
       labels which will be generated for base-displacement addresses by
       DISASM2. On return to disasm, these labels will be sorted with
       external symbol and RLD labels to form the final label table to
       be used by DISASM2.


0      DISASM2 functions:

       This sub-program is called by DISASM after completion of
       processing by DISASM1. The final label table and module text is
       in an area of storage. A common parameter area is defined in
       disasm, and passed to this program.

       Text bytes are used to create assembly language statements, and
       machine instruction statements. Output is written to the SYSPUNCH
       dataset for further processing by other modules.

       A text byte is considered to be an instruction if it occurs on a
       halfword boundary, is a valid op-code, and is followed by a valid
       op-code. Unconditional branches need not be followed by a valid
       op-code, however. The privileged and floating point instructions
       are not treated as instructions unless the user specified their
       inclusion at exec time.



0                                         - 8 -
