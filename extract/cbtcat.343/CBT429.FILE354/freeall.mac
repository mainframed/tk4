//FREEALL  JOB
/*ROUTE  PRINT R7
//*
//*   DSN=CBT.SOURCE(FREEALL)
//*
//S1        EXEC  HLASMCL,CLASS='*',
//        MAC='SYS1.MACLIB',
//        MAC1='SYS1.AMODGEN'
//ASM.SYSIN DD  *
*          DATA SET CBT320     AT LEVEL 002 AS OF 10/20/75
 TITLE 'FREEALL ALIAS(FA) FREE ALL DYNAMICALLY ALLOCATED DATASETS(TSO)'
***********************************************************************
*       FREEALL  ALIAS FA          (NO OPERANDS EXPECTED)             *
*                                                                     *
*       THIS COMMAND PROCESSOR IS USED TO FREE ALL DYNAMICALLY        *
*       ALLOCATED DATA SETS WHICH HAVE BEEN ALLOCATED BY A GIVEN      *
*       TSO USER.                                                     *
*                                                                     *
*       IT WILL FREE ALL DATA SETS WHICH:                             *
*         1. HAVE BEEN DYNAMICALLY ALLOCATED                          *
*         2. ARE NOT CURRENTLY IN USE.                                *
*         3. ARE NOT CURRENTLY OPEN.                                  *
*                                                                     *
*                                                                     *
*      BASIC LOGIC:                                                   *
*      GET CVT ADDRESS;GET TCB ADDRESS;GET CURRENT JSCB ADDRESS;      *
*      GET POINTER TO QDB; GET POINTER TO DSAB CHAIN FROM QDB;        *
*      FOLLOW DSAB CHAIN LOOKING FOR CANDIDATES TO FREE; WHEN FOUND   *
*      BUILD DAIR (IKJDAP18) PARAMETER LIST AND ISSUE LINK TO IKJDAIR *
*      WHO FREES THE DATA SET; WHEN AT END OF CHAIN TERMINATE EXECUTIO*
*                                                                     *
*                                                                     *
*  THE ASSEMBLY OF THIS MODULE REQUIRES SYS1.MACLIB AND SYS1.AMODGEN  *
*                                                                     *
***********************************************************************
FREEALL  CSECT
FREEALL  AMODE ANY
FREEALL  RMODE ANY
         LA    R1,0(0,R1)         CLEAR R1 HI-ORDER BYTE FOR 31     RH
         LA    R13,0(0,R13)       CLEAR R13 HI-ORDER BYTE FOR 31    RH
         BSM   14,0               SAVE CURRENT AMODE                RH
         STM   R14,R12,12(R13)     SAVE REGS
*        BALR  R12,0
*        USING *,R12
         LR    R12,R15            SET BASE REG
         USING FREEALL,R12        SET ADDRESSABILITY
         B     AROUND
         DC    CL8'FREEALL'   MODULE NAME
         DC    C'VERSION 2.0' VERSION NUMBER
         DC    C' '
         DC    CL8'&SYSDATE'  DATE MODULE COMPILED
         DC    C' '
         DC    CL8'&SYSTIME'  TIME MODULE COMPILED
AROUND   DS    0H
         LR    R8,R1
         USING CPPL,R8
*
*        BECAUSE SOME OF THE CONTROL BLOCKS MAY BE ACCESSED IN 31
*        BIT MODE PUT US INTO 31 BIT MODE ADDRESSING
*
*        L     R1,XADDR1          GET 31 BIT MODE ADDRESS           RH
         ICM   R1,15,XADDR1       GET 31 BIT MODE ADDRESS           RH
         BSM   0,R1               GET INTO 31 BIT MODE              RH
*        CNOP  0,4                ALIGN ON A FULLWORD BOUNDARY      RH
XADDR1   DC    AL4(*+4+X'80000000') NEXT ADDRESS IS 31 BIT MODE     RH
*
         GETMAIN R,LV=LDYNAMIC    GET AREA IN 24-BIT ADDR (R OPT)
         LR    R11,R1
         USING WORKAREA,R11
         LA    R9,SAVEAREA
         ST    R13,SAVEAREA+4
         ST    R9,8(,R13)
         LR    R13,R9
         L     R1,CPPLUPT
         L     R2,CPPLECT
         LA    R3,ECB
         L     R4,CPPLPSCB
         LA    R5,DAPB
         ST    R8,FAILCPPL        SAVE A(CPPL) FOR DAIRFAIL         RH
         STM   R1,R5,DAPL
         XC    ECB,ECB
         L     R2,CPPLCBUF        R2 -> TO INPUT PARM               RH
         DROP  R8
         LH    R4,0(0,R2)         R4 = LTH OF CMD
         CH    R4,=H'6'           LTH OVER 6? EG FA ALL?
         BNH   NOPARM             NO
         LA    R8,4(0,R2)         R8 -> TO CMD
         CLC   =C'FREEALL',0(R8)  IS CMD FREEALL?
         BNE   NOTFREEA           NO, MUST BE A PARM
         CH    R4,=H'11'          LTH OVER 11? EG FREEALL ALL?
         BNH   NOPARM             NO
         SPACE 1
NOTFREEA DS    0H
         AH    R8,2(0,R2)         R8 -> TO CMD PARM
         SH    R4,=H'4'           R4 = LTH OF CMD
         SH    R4,2(0,R2)         R4 = LTH OF PARM
         BZ    *+4+2              NO BCTR IF R4 = 0
         BCTR  R4,0               R4 = HEX LTH OF PARM
         EX    R4,MAKEUP          MAKE PARM UPPER CASE
         CLC   =C'ALL',0(R8)      IS PARM = ALL?
         BE    FREEPARM           YES
         EX    R4,SAVEDD          SAVE DDNAME
         OI    PARMFLAG,X'40'     SAY FREE SPECIFIED DD
         B     NOPARM             ON WE GO
         SPACE 1
SAVEDD   MVC   FREEDD(0),0(R8)    SAVE DD TO FREE
MAKEUP   OC    0(0,R8),UPPERC     MAKE IT UPPER CASE
FREEDD   DC    CL8' '
UPPERC   DC    CL8' '
         SPACE 1
FREEPARM DS    0H
         MVI   PARMFLAG,X'80'     SAY FREE EVERYTHING!
         SPACE 1
NOPARM   DS    0H
         MVI   FREEFLAG,C' '      CLEAR FREED DSNS FLAG             RH
         SPACE 1
FRSTDSAB DS    0H
         L     R2,CVTPTR      CVT ADDR
         USING CVTMAP,R2
         L     R2,CVTTCBP     TCB-TCB ADDR   (TCBHEAD)
         L     R2,4(,R2)      TCB ADDR       (CURRENT TCB)
         USING TCB,R2
         L     R2,TCBJSCB     JOB STEP CONTROL BLOCK ADDR
         USING IEZJSCB,R2
         L     R2,JSCDSABQ    LOAD ADDRESS OF QDB FOR DSAB CHAIN
         CLC   8(4,R2),=F'0'  ZERO DATA SETS FOR THIS USER
         BE    NODSNS         IF HE DONT HAVE ANY WE CANT FREE EM   RH
         L     R2,12(R2)      LOAD ADDRESS OF FIRST DSAB
         USING DSAB,R2
         SPACE 1
INLOOP   DS    0H
         CLC   =CL4'DSAB',0(R2)   DO WE REALLY POINT TO A DSAB ?    RH
         BNE   INCRE              NO, GO SEE IF ANY MORE            RH
         TM    PARMFLAG,X'80'     FREE EVERYTHING????               RH
         BO    INLOOP2            YES!                              RH
         TM    PARMFLAG,X'40'     FREE SPECIFIC DD ??               RH
         BZ    INLOOP1            NO                                RH
         L     R3,16(0,R2)        R3 -> TO TIOT
         CLC   FREEDD,4(R3)       IS THIS SPECIFIED DD?
         BE    INLOOP2            YES, GO FREE IT
         B     NOFREE0            NO, GO LOOK AT NEXT ONE
         SPACE 1
INLOOP1  DS    0H
         TM    DSABFLG1,DSABDALC   DATA SET DYNAMICALLY ALLOCATED
         BZ    NOFREE0        NO, GO LOOK AT NEXT ONE
*        TM    DSABFLG1,DSABPALC  WAS DSN PERMANENTLY ALLOCATED?    RH
*        BO    NOFREE0            YES, DON'T FREE IT THEN           RH
*        TM    DSABFLG1,DSABNUSE   DATA SET IN USE
*        BO    NOFREE1        YES DONT FREE IT
*                                                                   RH
*              FREE DATA SET EVEN IF IT'S PERMANENTLY ALLOCATED     RH
*              BECAUSE CALL AND TEST ALLOCATE THIS WAY.             RH
*                                                                   RH
*              FREE DATA SET EVEN IF IT'S IN USE BECAUSE IT MAY     RH
*              BE IN USE BECAUSE  IT WAS NOT CLOSED PROPERLY        RH
*                                                                   RH
         SPACE 1
INLOOP2  DS    0H
         MVI   FMMSG,C' '         CLEAR MSG AREA                    RH
         MVC   FMMSG+1(83),FMMSG  *                                 RH
         L     R3,DSABTIOT    LOAD ADDRESS OF TIOT ENTRY
         USING TIOELNGH,R3    SET ADDRESSABILITY TO TIOT ENTRY
         TM    DSABFLG1,DSABCATM  DATA SET CONCATENATED?            RH
         BZ    NOTCAT         NO, ON WE GO                          RH
         CLI   TIOEDDNM,C' '      IS THERE A DDNAME?                RH
         BNH   NOFREE0            NO, NOT 1ST CONCAT DSN            RH
         SPACE 1                                                    RH
NOTCAT   DS    0H                                                   RH
         MVC   FMDDN,TIOEDDNM MOVE IN DDNAME FROM TIOT
         L     R4,TIOEJFCB    LOAD ADDRESS OF JFCB
         SRL   R4,8           SHIFT OFF UNWANTED BYTE
         LA    R4,16(R4)      SKIP OVER PREFIX
         TM    TIOEJFCB+2,X'01' IS IT REALLY A TOKEN?
         BNO   ISADDR             NO, IT'S AN ADDRESS
         SPACE 1
         LA    R7,EPA             R7 -> TO EPA
         ST    R7,SWEPAPTR        INIT EPA POINTER
         USING ZB505,R7           SET EPA BASE
         XC    SWAEPA,SWAEPA      INIT EPA
         MVC   SWVA,TIOEJFCB      SAY WE WANT JFCB FROM TIOT
*
*              USE SWAREQ TO LOCATE THE JFCB
*
         SWAREQ FCODE=RL,EPA=SWEPAPTR,MF=(E,SWAPARMS),UNAUTH=YES
         LTR   R15,R15            WAS SWAREQ SUCCESSFUL?
         BNZ   NOFREE1            NO, BYPASS THIS JFCB
         L     R4,SWBLKPTR        R4 -> TO JFCB
         SPACE 1
ISADDR   DS    0H
         USING INFMJFCB,R4
         MVC   FMDSN,JFCBDSNM  MOVE IN DSNAME
*        CLC   FMDSN(8),=C'NULLFILE' IS THE DSN 'NULLFILE' ?        RH
*        BE    NOFREE1            YES DON'T FREE IT THEN            RH
         LA    R5,FMDSN       GET START OF DSN                      RH
         LA    R6,44          DSN LENGTH - (XXXXXXXX)               RH
MBRLOOP1 EQU   *                                                    RH
         CLI   0(R5),C' '     BLANK FOUND                           RH
         BE    MBRBLANK       GOT FIRST BLANK                       RH
         LA    R5,1(R5)       INCREMENT ADDRESS                     RH
         BCT   R6,MBRLOOP1    GO DO IT AGAIN                        RH
MBRBLANK EQU   *                                                    RH
         CLC   JFCBELNM,=CL8' '    MEMBER NAME PRESENT
         BE    NOMBR
         MVI   0(R5),C'('     MOVE IN L PAREN
         MVC   1(8,R5),JFCBELNM  MOVE IN MEMBER NAME
         LA    R5,2(R5)       SKIP OVER ( AND FIRST CHAR OF MEMBER
         LA    R6,7           MAX LENGTH OF MEMBER NAME
MBRLOOP2 EQU   *
         CLI   0(R5),C' '     BLANK FOUND
         BE    MBREND         GOT BLANK AFTER MEMBER NAME
         LA    R5,1(R5)       INCREMENT INDEX
         BCT   R6,MBRLOOP2    GO FIND END
MBREND   EQU   *
         MVI   0(R5),C')'
         LA    R5,1(R5)       R5 -> TO NEXT BLANK                   RH
NOMBR    EQU   *
         DROP  R4
*        MVC   1(6,R5),=CL6' '    BLANK VOL SER
         SR    R4,R4              CLEAR R4
         ICM   R4,7,TIOEFSRT      LOAD UCB ADDRESS
*        L     R4,TIOEFSRT-1    LOAD UCB ADDRESS
*        LA    R4,0(R4)       CLEAR HIGH ORDER BYTE
         LTR   R4,R4          ZERO ?
         BE    NOVOL
         USING UCBOB,R4
         CLI   UCBTBYT3,UCB3DACC
         BNE   NOVOL
         MVC   2(3,R5),=CL3'ON '  MOVE 'ON ' TO MSG                 RH
         MVC   5(6,R5),UCBVOLI  MOVE IN VOL SER                     RH
         CLI   5(R5),C' '         IS THERE A VOLSER?
         BNE   VOLSET             YES
         MVC   5(3,R5),=C'VIO'    NO, SAY ON VIO
         SPACE 1
VOLSET   DS    0H
         LA    R5,12(R5)       R5 -> TO NEXT BLANK                  RH
         DROP  R4
NOVOL    EQU   *
         AGO   .NOVOL
*                                                                   RH
*              IN CASE PAGE CONTAINING DSAB GETS FREED,             RH
*              GET POINTER TO NEXT DSAB BEFORE WE RELEASE           RH
*              THIS ONE                                             RH
*                                                                   RH
*        ICM   R2,7,DSABFCHN+1    R2 -> TO NEXT DSAB ENTRY          RH
*                                                                   RH
.NOVOL   ANOP
         MVC   DAPB(DAPB18L),DAPB18C INITIALIZE DAPB
         LA    R8,DAPB        MAKE DAIR 18 ADDRESSABLE
         USING DAPB18,R8
         MVC   DA18DDN,TIOEDDNM MOVE IN DDNAME FROM TIOT
         LA    R1,DAPL        ADDRESS OF DAPL
         LINK  EP=IKJDAIR     FREE DSE
         LTR   R15,R15            WAS DAIR SUCCESSFUL ?             RH
         BZ    FREEOK             YES, CONTINUE                     RH
*        BNZ   INCRE              NO, GET NEXT DSAB                 RH
*        AGO   .SKIP2
*        TM    PARMFLAG,X'40'     FREE SPECIFIC DD ??               RH
*        BZ    INCRE              NO, GET NEXT DSAB                 RH
*        BZ    FREEOK YES, CONTINUE                                 RH
         SPACE 1                                                    RH
         ST    R15,DAIRCODE       SAVE DAIR ERROR CODE              RH
         LA    R15,DAPL           R15 -> TO DAIR PARM LIST          RH
         ST    R15,FAILPL         SAVE IT FOR DAIRFAIL              RH
         LA    R1,FAILPL          R1 -> TO DAIRFAIL PARM LIST       RH
         LINK  EP=IKJEFF18        LINK TO DAIRFAIL                  RH
         LTR   R15,R15            WAS DAIRFAIL OKAY ?               RH
         BNZ   ERROR              NO, ISSUE ERROR MSG               RH
*        MVC   1(18,R5),=CL18'WAS NOT FREED'                        RH
*        LA    R1,FMMSG       LOAD ADDRESS OF MESSAGE TO TERMINAL   RH
*        TPUT  (1),84             PUT FREED MSG                     RH
         B     INCRE              GET NEXT DSN                      RH
.SKIP2   ANOP
         SPACE 1                                                    RH
FREEOK   EQU   *
         MVC   1(18,R5),=CL18'SUCCESSFULLY FREED'                   RH
         LA    R1,FMMSG       LOAD ADDRESS OF MESSAGE TO TERMINAL
         TPUT  (1),84             PUT FREED MSG                     RH
         MVI   FREEFLAG,C'F'      SAY A DSN WAS FREED               RH
*                                 DATASET WAS FREED, SO DSAB CHAIN
*                                 HAS BEEN RECHAINED AND THE
*                                 POINTER TO THE NEXT DSAB IS IN
*                                 THE PREVIOUS DSAB, IF NOT THE 1ST
         SR    R1,R1              CLEAR R1
         ICM   R1,7,DSABBCHN+1    R1 -> TO PREV DSAB ENTRY          RH
*                                 SO WE CAN GET NEXT ONE...
         LTR   R1,R1              IS R1 0?                          RH
         BZ    INCRE              YES, NO PREV DSAB'S               RH
*                                 SO GET NEXT ONE FROM FCHN...
         LR    R2,R1              R2 -> TO PREV DSAB
         B     INCRE              GO CHECK FOR ANOTHER DSAB
*        LTR   R2,R2              ANY MORE DSABS?                   RH
*        BNE   INLOOP             YES, GO DO THE REST OF EM         RH
*        B     NODSNS             NO, END OF FREEALL                RH
         SPACE 1                                                    RH
NOFREE0  EQU   *
NOFREE1  EQU   *
NOFREE2  EQU   *
         SPACE 1                                                    RH
INCRE    EQU   *
         LTR   R2,R2              IS R2 0?                          RH
         BZ    NODSNS             YES, END OF DSAB'S                RH
         CLC   =CL4'DSAB',0(R2)   DO WE REALLY POINT TO A DSAB ?    RH
         BE    INCRE2             YES, ON WE GO                     RH
         SPACE 1                                                    RH
*                                                                   RH
*              PAGE CONTAINING DSAB WAS PROBABLY FREED,             RH
*              GO START AT THE FIRST DSAB AGAIN...                  RH
*                                                                   RH
         B     FRSTDSAB           GO START AT CVT AGAIN             RH
         AGO   .SKIP1
         LA    R1,DSABMSG         NO, POINT R1 TO MSG               RH
         LA    R0,L'DSABMSG       R0 = LTH OF MSG                   RH
         TPUT  (1),(0)            SEND MSG TO TERMINAL              RH
         B     NODSNS             END OF DSAB'S                     RH
.SKIP1   ANOP
         SPACE 1                                                    RH
INCRE2   DS    0H                                                   RH
         ICM   R2,7,DSABFCHN+1    R2 -> TO NEXT DSAB ENTRY          RH
         BNZ   INLOOP             IF MORE, GO DO THEM TOO           RH
*        L     R2,DSABFCHN    LOAD POINTER TO NEXT DSAB ENTRY
*        LTR   R2,R2          END OF CHAIN
*        BNE   INLOOP         NO GO DO THE REST OF EM
         DROP  R2,R3
         SPACE 1                                                    RH
NODSNS   DS    0H                                                   RH
         CLI   FREEFLAG,C' '      WERE ANY DSNS FREED?              RH
         BNE   RETURN             YES, DON'T PRINT MSG              RH
         MVC   FMMSG,MSG2         PUT MSG IN ARE BELOW 24 BIT LINE
         TPUT  FMMSG,50,,,HOLD,BREAKIN                              RH
         SPACE 1
RETURN   LR    R1,R13         DYNAMIC AREA ADDR IN R1
         LA    R0,LDYNAMIC    SIZE OF AREA
         L     R13,4(,R13)    PREV SAVE AREA
         LA    R1,0(,R1)      CLEAR HI ORDER
         SVC   10             FREEMAIN
*        ST    R15,16(0,R13)      PUT RC INTO SAVE AREA             RH
         LM    14,12,12(13)   RESTORE REGS
         LA    15,0           RETURN CODE
         MVI   12(13),X'FF'   INDICATE RETURN
*              GET INTO PROPER MODE AND GO BACK TO CALLER           RH
         BSM   0,R14                                                RH
         SPACE 1
ERROR    DS    0H
         LR    R3,R15
         MVC   FMMSG,MSG          PUT MSG IN ARE BELOW 24 BIT LINE
         TPUT  FMMSG,50,,,HOLD,BREAKIN
         ABEND 400,DUMP
MSG      DC    CL50'ERROR FROM DAIR, PLEASE SEND DUMP TO SOFTWARE'
MSG2     DC    CL50'NO DATA SETS TO BE FREED'                       RH
DSABMSG  DC    C'INVALID DSAB CHAIN, CALL CUSTOMER SERVICE CENTER'  RH
PARMFLAG DC    X'00'
*              X'80'              FREE EVERYTHING
*              X'40'              FREE SPECIFIED DD
         SPACE 1
SWEPAPTR DS    F                  FOR SWAREQ
EPA      DS    CL28               FOR SWAREQ
SWAPARMS SWAREQ MF=L              FOR SWAREQ
         EJECT
DAPB18C  DS    0F
         DC    X'0018'        DA18CD
         DC    H'0'           DA18FLG
         DC    H'0'           DA18DARC
         DC    H'0'           DA18CTRC
         DC    A(0)           DA18PDSN
         DC    CL8' '         DA18DDN
         DC    CL8' '         DA18MNM
         DC    CL2' '         DA18SCLS
         DC    X'00'          DA18DSP2
         DC    X'10'          DA18CTL  -  RLSE PERM ALLOC
         DC    CL8' '         DA18JBNM
DAPB18L  EQU   *-DAPB18C      LENGTH
         SPACE 1                                                    RH
FAILPL   DC    A(DAIRPL)                                            RH
         DC    A(DAIRCODE)                                          RH
         DC    A(JEFF02)                                            RH
         DC    A(FAILSW)                                            RH
FAILCPPL DC    A(0)                                                 RH
         SPACE 1                                                    RH
DAIRPL   DC    F'0'                                                 RH
DAIRCODE DC    F'0'                                                 RH
JEFF02   DC    F'0'                                                 RH
FAILSW   DC    X'0001'                                              RH
         EJECT
WORKAREA DSECT
SAVEAREA DS    18F
DAPB     DS    0F
         ORG   DAPB+DAPB18L
DAPL     DS     5F
ECB      DS     F
FREEFLAG DS    C                  SET TO 'F' IF ANY DSNS FREED      RH
FMMSG    DS    0CL84           MESSAGE TO USER
FMDDN    DS    CL8             DDNAME
FMB1     DS    CL1
FMDSN    DS    CL44            DSNAME
FMB2     DS    CL1
FMVOL    DS    CL6             VOL SER (IF DASD)
FMB3     DS    CL1
FMTEXT   DS    CL23            ACTION CODE
         DS    0D
LDYNAMIC EQU   *-WORKAREA
         EJECT
         PRINT   GEN
         IKJDAP18
         EJECT
         IKJCPPL
         EJECT
         CVT   DSECT=YES                                            RH
         EJECT
         IKJTCB
         EJECT
         IEZJSCB
         EJECT
DSAB     IHADSAB
         EJECT
         DSECT
         IEFUCBOB LIST=YES
         EJECT
         DSECT
         IEFJFCBN LIST=YES
         EJECT
TIOT     DSECT
         IEFTIOT1
         IEFJESCT                 FOR SWQREQ
         IEFZB505                 FOR SWAREQ
*        EQUATE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   FREEALL
//LKED.SYSLMOD  DD DSN=HALL.LINKLIB(FREEALL),DISP=SHR
//
