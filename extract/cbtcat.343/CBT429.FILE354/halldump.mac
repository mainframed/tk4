//HALLDUMP JOB
/*ROUTE  PRINT  R7
//*
//*  DSN=CBT.SOURCE(HALLDUMP)
//*
//S1     EXEC  HLASMCL,PARMC='ESD',CLASS='*',PARML='AC=1',
//   COND.LKED=(7,LT,ASM)
//ASM.SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR
//   DD DSN=CBT.SOURCE,DISP=SHR             <====CHANGE
//   DD DSN=SYS1.AMODGEN,DISP=SHR
//ASM.SYSIN DD *
*                                                                   RH
*              MACRO TO DUMP CORE                                   RH
*                                                                   RH
         COPY  HDUMP                                                RH
*                                                                   RH
*              END OF MACRO                                  DEBUG  RH
*                                                                   RH
*                                                                   RH
*                                                                   RH
*              EXAMPLE OF JCL TO  USE HDUMP                         RH
*                                                                   RH
*        JCL MUST STEPLIB TO HALL.LINKLIB                           RH
*                                                                   RH
*                  THIS IS CODE TO DUMP CORE                 DEBUG  RH
*        SPACE 4                                             DEBUG  RH
*                                 DUMP 1024 BYTES AT R12     DEBUG  RH
*        HDUMP OUTDCB,R12,1024,NOTOPEN,OPEN                  DEBUG  RH
*        L     R3,DSSEJFCB        R3 -> TO JFCB              DEBUG  RH
*                                 DUMP 1024 BYTES AT JFCB    DEBUG  RH
*        HDUMP OUTDCB,R3,1024,OPEN,CLOSE                     DEBUG  RH
*        HDUMP OUTDCB,0,0,TITLE='DUMP REGS ONLY'             DEBUG  RH
*        SPACE 1                                             DEBUG  RH
*                  THIS IS END OF CODE TO DUMP CORE          DEBUG  RH
*                                                                   RH
*
* DUMP THE REGS AND SPECIFIED MEMORY LOCATIONS
*
* ON ENTRY:
*    R1 = ADDR PASSED PARMS
*       1) ADDR OF SAVED CALLERS REGS
*       2) ADDR OF SYSPRINT DCB
*       3) ADDR OF FIRST BYTE TO DUMP
*       4) ADDR OF LAST BYTE (PLUS ONE) TO DUMP
*       5) ADDR OF A TITLE, OR 0
*                                                                   RH
         EJECT                                                      RH
HALLDUMP CSECT
HALLDUMP AMODE 31
HALLDUMP RMODE ANY
         SPACE 2
*
* PERFORM STANDARD LINKAGE
*
         BSM   R14,0              SAVE CURRENT AMODE
         PRINT NOGEN
         STM   R14,R12,12(R13)         SAVE HIS REGS
         USING HALLDUMP,R15            TEMP BASE ADDR
         B     CONTINUE                BR AROUND MODULE NAME & DATE
         DC    AL1(EYELTH)        LTH OF EYE CATCHER
EYECATCH DC    CL8'HALLDUMP'           MODULE NAME
         DC    CL8'&SYSDATE'           DATE ASSEMBLED
         DC    CL8'&SYSTIME'           TIME ASSEMBLED
         DC    C' VERSION 4...MAKE 31-BIT MODE  '
*        DC    C' VERSION 3...ADDED TITLE OPTION'
EYELTH   EQU   *-EYECATCH
         DROP  R15                     RELEASE TEMP BASE REG
         SPACE 1
CONTINUE DS    0H
         LR    R12,R15                 BASE REG
         USING HALLDUMP,R12            EST. ADDR.
         CNOP  0,4                     ALIGNMENT
         BAL   R11,*+76                BR AROUND SAVE AREA
SAVEAREA DS    18F                     SAVE AREA
         ST    R13,4(0,R11)            HIS 4 PAST MINE
         ST    R11,8(0,R13)            MINE 8 PAST HIS
         LR    R13,R11                 ADDR MY SAVE AREA
*
* LOAD UP SOME  REGISTERS..
*
*                                 R1 -> TO PARMS                    RH
         L     R5,0(0,R1)         R5 -> TO REG SAVE AREA
         MVC   DUMPREGS(64),0(R5)  MOVE REGS TO WORK AREA
         L     R2,4(0,R1)         R2 -> TO OUTPUT PRINT DCB
         LM    R3,R5,8(R1)        R3 -> TO START ADDR TO DUMP
*                                 R4 -> TO STOP ADDR TO DUMP
*                                 R5 -> TO TITLE, IF ANY
*
* DUMP OUT THE TITLE IF THERE IS ONE...
*
         LTR   R5,R5              IS THERE A TITLE?
         BZ    NOTITLE            NO
         MVC   DUMPLINE+1(80),0(R5)  MOVE HEADING TO PRINT LINE
         PUT   (R2),DUMPLINE      PRINT THE TITLE
*
* DUMP OUT THE VALUES OF THE REGISTERS
*
NOTITLE  DS    0H
         MVC   DUMPRGLO(64),DUMPREGS COPY THE REGS
         TR    DUMPREGS(64),DUMPTBHI  CONVERT HI ORDER DIGITS
         TR    DUMPRGLO(64),DUMPTBLO   CONVERT LO ORDER DIGITS
         MVC   DUMPLINE+1(10),DUMPREG0  LINE HEADING
         MVC   DUMPLINE+11(72),DUMPSELR DIGITS TO SELECT
         TR    DUMPLINE+11(72),DUMPREGS REG CONTENTS => O/P LINE
         PUT   (R2),DUMPLINE           WRITE THE O/P LINE
         MVC   DUMPLINE+1(10),DUMPREG8  LINE HEADING
         MVC   DUMPLINE+11(72),DUMPSELR DIGITS TO SELECT
         TR    DUMPLINE+11(72),DUMPREGS+32 REG CONTENTS => O/P LINE
         PUT   (R2),DUMPLINE           WRITE THE O/P LINE
         MVI   DUMPLINE,C'0'      DOUBLE SPACE NEXT LINE
*
* DUMP THE DATA FROM THE SPECIFIED STORAGE AREA
*
         MVI   DUMPLINE+85,X'5C'       DELIMETER OF CHARS
         MVI   DUMPLINE+118,X'5C'      DELIMETER OF CHARS
         LTR   R5,R3                   STARTING ADDR
         BZ    DUMPEND            IF START = 0, END OF DUMP
         SRL   R3,5                    ROUND ADDR TO ...
         SLL   R3,5                    ... A MULTIPLE OF 32
* COMPUTE NUMBER BYTES TO BLANK OUT
         SR    R5,R3                   # BYTES TO BLANK
         LR    R7,R5              # BYTES TO BLANK ON RIGHT SIDE...
         SLL   R5,1                    DOUBLE THE NUMBER
         LR    R6,R5                   SAVE THIS VALUE
         SRL   R6,3                    # ADD'NL BLANKS
         AR    R5,R6                   SUBTOTAL # BLANK BYTES
         SRL   R6,2                    # ADD'NL DOUBLE BLANKS
         AR    R5,R6                   TOTAL # BLANKS
DUMPRINT EQU   *
         MVC   DUMPDATA(32),0(R3)      GET DATA TO TRANSLATE
         MVC   DUMPDALO(32),0(R3)      GET DATA TO TRNASLATE
         TR    DUMPDATA(32),DUMPTBHI   CONVERT HO ORDER HEX
         TR    DUMPDALO(32),DUMPTBLO   CONVERT LO ORDER HEX
         ST    R3,DUMPADHI             SAVE STARTING ADDR
         ST    R3,DUMPADLO             SAVE STARTING ADDR
         TR    DUMPADHI(4),DUMPTBHI    CONVERT HI OEDER HEX
         TR    DUMPADLO(4),DUMPTBLO    CONVERT LO ORDER HEX
         MVC   DUMPLINE+1(8),DUMPSELA  HEX DIGIT SELECT PATTERN
         TR    DUMPLINE+1(8),DUMPADHI  SELECT THE HEX DIGITS
         MVC   DUMPLINE+11(72),DUMPSELD DIGITS TO SELECT
         TR    DUMPLINE+11(72),DUMPDATA DATA => O/P LINE
         MVC   DUMPLINE+86(32),0(R3)   DATA BEING DUMPED
         LTR   R5,R5                   ANY BLANKS ?
         BZ    DUMPNXT1                NO, SKIP IT
         BCTR  R5,0                    REAL LEN FOR MOVE
         EX    R5,DUMPMVC              MOVE IN THE BLANKS
*        SRL   R5,2               NBR OF BLANKS ON RIGHT SIDE....
         BCTR  R7,0                    REAL LEN FOR MOVE
         EX    R7,DUMPMVC2             MOVE IN THE BLANKS
         SLR   R5,R5                   NO BLANKS !
DUMPNXT1 EQU   *
         PUT   (R2),DUMPLINE           WRITE THE O/P LINE
DUMPEND  DS    0H
         MVI   DUMPLINE,C' '           SINGLE SPACE
         LA    R3,32(0,R3)             PT @ NEXT DATUM
         CR    R3,R4                   DATA EXHAUSTED ?
         BL    DUMPRINT                NO, CONTINUE PROCESSING IT
*
* PRINT END OF DUMP SEPARATOR
*
         MVI   DUMPLINE,X'F0'          DOUBLE SPACE
         MVI   DUMPLINE+1,X'5C'        SET THE O/P LINE ...
         MVC   DUMPLINE+2(131),DUMPLINE+1  ... TO ASTERISKS
         PUT   (R2),DUMPLINE           WRITE THE O/P LINE
         MVI   DUMPLINE,X'40'          SINGLE SPACE
         MVC   DUMPLINE+1(132),DUMPLINE  CLR O/P LINE TO BLANKS
         PUT   (R2),DUMPLINE           WRITE THE O/P LINE
*
* GET BACK TO THE CALLING ROUTINE
*
         L     R13,4(0,R13)            ADDR HIS SAVE AREA
         LM    R14,R12,12(R13)         RESTORE HIS REGS
*              GET INTO PROPER MODE AND GO BACK TO CALLER
         BSM   0,R14              RETURN TO CALLING PROGRAM
*        BR    R14                     RETURN TO HIM
*
* DEFINE STORAGE
*
DUMPMVC  MVC   DUMPLINE+11(1),DUMPBLNK
DUMPMVC2 MVC   DUMPLINE+86(1),DUMPBLNK
DUMPREGS DS    16F
DUMPRGLO DS    16F
DUMPBLNK DC    CL80' '
DUMPREG0 DC    CL10'  R0-R7   '
DUMPREG8 DC    CL10'  R8-R15  '
DUMPDATA DS    8F
DUMPDALO DS    8F
DUMPBLK2 DC    CL8' '
DUMPADHI DS    F
DUMPADLO DS    F
DUMPTBHI DC    16X'F0'
         DC    16X'F1'
         DC    16X'F2'
         DC    16X'F3'
         DC    16X'F4'
         DC    16X'F5'
         DC    16X'F6'
         DC    16X'F7'
         DC    16X'F8'
         DC    16X'F9'
         DC    16X'C1'
         DC    16X'C2'
         DC    16X'C3'
         DC    16X'C4'
         DC    16X'C5'
         DC    16X'C6'
DUMPTBLO DC    16X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'
DUMPSELR DC    X'00400141024203438004440545064607'
         DC    X'4780084809490A4A0B4B800C4C0D4D0E'
         DC    X'4E0F4F80801050115112521353801454'
         DC    X'15551656175780185819591A5A1B5B80'
         DC    X'1C5C1D5D1E5E1F5F'
DUMPSELD DC    X'00200121022203234004240525062607'
         DC    X'2740082809290A2A0B2B400C2C0D2D0E'
         DC    X'2E0F2F40401030113112321333401434'
         DC    X'15351636173740183819391A3A1B3B40'
         DC    X'1C3C1D3D1E3E1F3F'
DUMPSELA DC    X'0004010502060307'
DUMPLINE DC    C' '
         DC    CL132' '
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
//LKED.SYSLMOD DD DSN=IMSVS.AUTHLIB5(HALLDUMP),DISP=SHR
//LKED.SYSIN DD *
    SETCODE AC(0)
    MODE AMODE(31) RMODE(ANY)
    NAME HALLDUMP(R)
/*
//
