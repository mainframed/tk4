//MEMLIST JOB
//*
//*    DSN=CBT.SOURCE(MEMLIST)
//*
/*ROUTE PRINT R7
//S EXEC HLASMCL,PARMC='NOALIGN,NORLD',CLASS='*',COND.LKED=(7,LT,ASM),
//  PARML=REUS
//ASM.SYSLIB DD DSN=SYS1.MACLIB
//   DD DSN=SYS1.AMODGEN,DISP=SHR
//ASM.SYSIN DD *
         TITLE 'PGMLIB MEMBER SCAN' T COX
*
***********************************************************************
*                                                                     *
*             MODULE NAME = MEMLIST                                   *
*                                                                     *
*             DESCRIPTIVE NAME =  PROGRAM TO CREATE LIST OF MEMBER    *
*                NAMES IN A PDS.                                      *
*                                                                     *
*             STATUS = RELEASE 01.0                                   *
*                                                                     *
*   FUNCTION =                                                        *
*        THIS PROGRAM READS THE DIRECTORY OF A PDS AND BUILDS AN      *
*        INTERNAL TABLE OF MEMBER NAMES                               *
*                                                                     *
*        MEMBERS ARE READ TO DETERMINE THE DATE THAT IT WAS           *
*        LINK EDITED.  IT WILL WRITE OUT A RECORD FOR EACH            *
*        MEMBER WITH A LINK EDIT DATE.                                *
*
*        ENTRY POINTS:
*           MEMLIST
*
*        PARAMETERS:
*                   MBR= TO SPECIFY A SINGLE MEMBER TO ACCESS.
*
*                                                                     *
*                OPERATION =                                          *
*                   READ PDS DIRECTORY AND CREATE MEMBER TABLE.       *
*                   READ EACH MEMBER LOOKING FOR TYPE 8011 RECORD.    *
*                   LIST MEMBER NAME AND LINK DATE.                   *
*                   AT END OF LIST CLOSE DATASETS AND FREE ANY        *
*                      AQUIRED AREAS.                                 *
*                                                                     *
*              NOTES =                                                *
*                                                                     *
*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE *
*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          *
*                                                                     *
*                 RESTRICTIONS = DATASETS MUST HAVE LRECL LESS THAN   *
*                    255 AND MUST BE EITHER FIXED OR VARIABLE FORMAT. *
*                                                                     *
*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *
*                    REGISTERS 0 TO 10 = WORK REGISTERS               *
*                    REGISTER  11      = SECOND BASE REGISTER         *
*                    REGISTER  12      = ADDRESSABILITY TO MEMLIST    *
*                                        CSECT                        *
*                    REGISTER  13      = SAVE AREA REGISTER AND       *
*                                        ADDRESSABILITY TO GETMAINED  *
*                                        WORK AREA                    *
*                    REGISTERS 14,15   = WORK REGISTERS               *
*                                                                     *
*                                                                     *
*             MODULE TYPE = PROCEDURE                                 *
*                                                                     *
*                PROCESSOR = ASM                                      *
*                                                                     *
*                MODULE SIZE = 5K BYTES                               *
*                                                                     *
*                ATTRIBUTES = SCHEDULER KEY 8, NON-REENTRANT,         *
*                   PROBLEM PROGRAM STATE                             *
*                                                                     *
*                LINKAGE =                                            *
*                   FROM SYSTEM                                       *
*                                                                     *
*             OUTPUT = LIST OF MEMBERS AND LINK DATES                 *
*                                                                     *
*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *
*                                                                     *
*                RETURN CODE = ZERO                                   *
*                                                                     *
*             EXIT - ERROR = NONE - PROGRAM WILL DISPLAY DECIMAL      *
*                RETURN CODE AND RETURN VIA BRANCH REGISTER 14        *
*                                                                     *
*                OUTPUT = NONE                                        *
*                                                                     *
*                RETURN CODE = ZERO                                   *
*                                                                     *
*             EXTERNAL REFERENCES =                                   *
*                                                                     *
*                ROUTINES = NONE?                                     *
*                                                                     *
*                DATA AREAS = NONE                                    *
*                                                                     *
*                CONTROL BLOCKS = DCB, RDJFCB, ETC.                   *
*                                                                     *
*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *
*                BEGINNING AT LABEL RDATD.                            *
*                                                                     *
*             MACROS = SAVE, GETMAIN, FREEMAIN,                       *
*                   OPEN, PUT, GET, CLOSE, RDJFCB,                    *
*                   DCB, DCBD                                         *
*                                                                     *
*             CHANGE ACTIVITY = NONE                                  *
*                                                                     *
*             ABEND CODES = 799                                       *
*                           999                                       *
*                                                                     *
***********************************************************************
*
*        REGISTER EQUATES
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
*        ENTRY POINT
*
MEMLIST CSECT
*
         USING *,15      GET TEMP ADDRESSABILITY
         B     CONTINUE   BRANCH AROUND ID
         DC    AL1(IDLTH)
EYECATCH DC    CL8'MEMLIST'   IDENTIFIER
         DC    CL9'VERSION 1' IDENTIFIER
         DC    CL8'&SYSDATE'  IDENTIFIER
         DC    CL8'&SYSTIME'  IDENTIFIER
IDLTH    EQU   *-EYECATCH
         SPACE 1
CONTINUE DS    0H
         STM   14,12,12(13)  SAVE REGISTERS
         DROP  15
         LR    12,15        SET BASE REG.
         USING MEMLIST,12
         LA    14,SAVEAREA
         ST    13,4(14)      SAVE REGS 13 AND
         ST    14,8(13)      BACK CHAIN
         LR    13,14         GET SAVE AREA ADDRESS
         ST    R1,SAVER1     SAVE REG 1
         MVC   MBRNAME,=CL8' '    CLEAR MBR NAME FIELD
         L     R2,0(0,R1)         R2 -> TO SYSTEM PARM
*        OPEN  (REPORT,(OUTPUT))  OPEN SYSPRINT FILE
         SPACE 1
***********************************************************************
*
*              SEE IF THERE IS A  PARM
*
*        VALID PARMS ARE:
*              MBR= ......MEMBER NAME TO GET LINK DATE FOR
*
*        ANY OTHER PARMS ARE INVALID
*        IF NO PARMS ARE SPECIFIED, THE DEFAULTS WILL BE
*              PARM='MBR=ALL'
*
***********************************************************************
         SPACE 1
*              GET PARM, IF ANY
         SPACE 1
PARM0    DS    0H
         LA    R10,2(0,R2)        R10 -> TO PARM
         LH    R2,0(0,R2)         R2 = PARM LTH
         LTR   R2,R2              IS THERE A PARM ?
         BZ    ENDPARM            NO
         LR    R4,R10             YES, R4 -> TO PARM
         SPACE 1
PARM1    DS    0H
         CLC   =C'MBR=',0(R4)     IS IT THE 'MBR=' PARM?
         BNE   PARM2              NO, CHECK FOR NEXT PARM
         SPACE 1
         LA    R4,4(0,R4)         R4 -> PAST MBR=
         SH    R2,=H'4'           R2 = LTH OF REST OF PARM
         LR    R5,R4              R5 -> TO MBR NAME
         SPACE 1
PARM1B   DS    0H
         CLI   0(R4),C','         AT END OF MBR ?
         BE    PARM1C             YES, GO GET NEXT PARM
         LA    R4,1(0,R4)         R4 -> TO NEXT KEY BYTE, IF ANY
         BCT   R2,PARM1B          CHECK ALL CHARS LEFT
         SPACE 1
PARM1C   DS    0H
         LR    R6,R4              R6 -> TO END OF MBR NAME
         SR    R6,R5              R6 = LTH OF MBR NAME
         BCTR  R6,0               R6 = HEX LTH
         MVC   MBRNAME,=CL8' '    CLEAR MBR NAME FIELD
         EX    R6,MVCMBR          SET UP MBR NAME
         LA    R9,1               SET R9 TO SAY WE HAVE 1 MBR NAME
         B     NEXTPARM           GO CHECK FOR ANOTHER PARM
         SPACE 1
MVCMBR   MVC   MBRNAME(0),0(R5)   MOVE MBR NAME
         SPACE 1
PARM2    DS    0H
         SPACE 1
         SPACE 1
PARM99   DS    0H
         B     BADPARM            PRINT BAD PARM MSG
         SPACE 1
NEXTPARM DS    0H
         LTR   R2,R2              ANY PARM LEFT?
         BNP   ENDPARM            NO
         LA    R4,1(0,R4)         YES, R4 -> TO NEXT BYTE
         BCTR  R2,0               TAKE 1 OFF PARM LTH
         CLI   0(R4),C','         COMMA?
         BNE   PARM1              NO, GO SEE WHAT IT IS
         B     NEXTPARM           LOOK AT ALL CHARS IN PARM
         SPACE 1
ENDPARM  DS    0H
*
*        OPEN OUTPUT DATASET
*
         OPEN  (OUTREC,(OUTPUT)) OPEN SCRATCH CARD DATASET
         OPEN  (PRINT,(OUTPUT))  OPEN PRINT FILE
*        CLI   MBRNAME,C' '       IS MBR NAME FIELD BLANK?
*        BNE   LOADMBR1           NO, GO PROCESS MEMBER
*
*        OPEN LIBRARY DIRECTORY TO GET ALL MEMBERS OF THE PDS
*
         OPEN  (INPDS,(INPUT))
*
*        ISSUE GETMAIN FOR MEMBER AREA
*
         SR    R5,R5           ZERO REG 5
         L     R5,=F'9000'     WANT ROOM FOR MAXIMUM MEMBERS
         SLL   R5,3        TIMES 8 PER MEMBER NAME
         GETMAIN R,LV=(R5),SP=10
         ST    R1,MBRAREA  SAVE AREA ADDRESS
         LR    R7,R1       AND LOAD INTO R7
         SRL   R5,3        RESET TO NUMBER OF MEMBERS ALLOWED
         SR    R9,R9       ZERO MEMBER COUNTER
*
*        GET DIRECTORY BLOCK
*
DIRREAD  EQU   *
         LA    R6,DIRREC
         READ  UT1DECB,SF,INPDS,(R6),,S
         CHECK UT1DECB
         CLC   0(2,R6),=H'0'  IF LENGTH IS ZERO END DIRECTORY SEARCH
         BE    LOADMBR
*
         LR    R1,R6          SAVE BEGINNING OF BLOCK
         AH    R1,0(R6)       POINT TO END OF BLOCK
         LA    R6,2(0,R6)    POINT PAST LENGTH FIELD
*
THISMBR  EQU   *
         CR    R6,R1         IF AT END OF BLOCK
         BNL   DIRREAD       GET ANOTHER ONE
         CLI   0(R6),X'FF'   IF MEMBER HAS HIGH VALUES END DIR. SEARCH
         BE    LOADMBR
         CLI   0(R6),X'00'   IF MEMBER HAS LOW VALUES BYPASS SAVE
         BE    NEXTMBR
         MVC   0(8,R7),0(R6) SAVE MEMBER NAME IN MEMBER AREA
         LA    R7,8(0,R7)      POINT TO NEXT ENTRY IN MEMBER AREA
         LA    R9,1(0,R9)      INCREMENT MEMBER COUNT
         CR    R9,R5         IS MEMBERS UP TO MAXIMUM?
         BNL   LOADMBR       IF YES, END DIRECTORY SEARCH
*
NEXTMBR  EQU   *
         NI    11(R6),31      LOOK AT ONLY THE "C" FIELD IN ENTRY
         SR    R8,R8
         IC    R8,11(R6)       MOVE "C" FIELD TO R8
         SLL   R8,1           MULTIPLY BY 2
         LA    R6,12(R8,R6)     POINT TO NEXT ENTRY IN DIRECTORY BLOCK
         B     THISMBR        BRANCH TO PROCESS NEXT ENTRY
*
*        THIS ROUTINE LOADS EACH MEMBER OF THE PDS
*
LOADMBR  EQU   *
         CLOSE INPDS            CLOSE DIRECTORY DCB
*
         LTR   R9,R9          IF NO MEMBERS THEN
         BZ    NOMBRS         LEAVE ROUTINE WITH MESSAGE
*
EOFREAD  DS    0H
NOSYSIN  DS    0H
         L     R6,MBRAREA    SET ADDRESS OF MEMBER AREA
         SR    R7,R7             ZERO REGISTER 7
         SPACE 1
*
*
FINDMBR  DS    0H
FINDMBR2 DS    0H
         MVC   MBRNAME,0(R6)     SAVE MEMBER NAME
*        B     GOTREC            IF GOT THE RIGHT RECORD
*        B     READBLK
*
*        IF HAVE THE X'8011' RECORD THEN CHECK THE DATE
*
GOTREC   EQU   *
*
         PUT   OUTREC,SCRCARD
         LA    R7,1(R7)         INCREMENT COUNTER
*        B     GETNEXT          GET NEXT MEMBER
*
*        SET UP TO READ NEXT MEMBER
*
GETNEXT  EQU   *
         LA    R6,8(0,R6)
         BCT   R9,FINDMBR     IF MORE MEMBERS
         B     CLOSPDS
*
*        ERROR ROUTINES
*
BADPARM  EQU   *
         MVC   MBRNAME,=C'BADPARM*'
         MVC   PSDATE,SCRDATE
         PUT   OUTREC,SCRCARD
         LA    R15,16
         B     BADEND           LEAVE
*
NOMBRS   EQU   *
         MVC   MBRNAME,=C'NOMBRS**'
         MVC   PSDATE,SCRDATE
         PUT   OUTREC,SCRCARD
         LA    R15,16
         B     BADEND           LEAVE
*
*        CLOSE PDS
*
CLOSPDS  EQU   *
         CLOSE (OUTREC)
*
*        FREE STORAGE AREA
*
         FREEMAIN R,SP=10
*
*        AND RETURN
*
RETURN   EQU   *
         CVD   R7,WORKD
         MVC   OUTCNT,PATTERN
         ED    OUTCNT,WORKD+4
         PUT   PRINT,OUTPRT
         LA    R15,0
*
BADEND   EQU   *
         CLOSE PRINT
         L     R13,4(R13)
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BR    R14                RETURN TO CALLING PROGRAM
*
*        ABEND
*
BADBAD   EQU   *
         ABEND 799,DUMP,STEP
*
*        DEFINE VARIABLES
*
*
***************************WORK AREAS *********************************
*
         SPACE 2
MBRTYPE  DC    C' '
STARTMBR DC    CL8' '
ENDMBR   DC    CL8' '
SYSDATA  DS    CL80
SMBRLTH  DC    H'0'
EMBRLTH  DC    H'0'
SAVEALL  DC    18F'0'
         CNOP  0,8
*
WORKD    DS   D
WORKF    DS   F
SAVEAREA DS   18F
*
SAVER1   DS    F
BLKAREA  DS    F
MBRCNT   DS    F
MBRAREA  DC    A(MBRNAME)
DIRREC   DC    XL256'00'
*
SCRCARD  DS    0CL80
MBRNAME  DS    CL8
         DC    CL2'  '
PSDATE   DC    CL5' '
         DC    CL65' '
*
***************************** CONSTANTS *******************************
*
         SPACE 2
OUTPRT   DS    0CL133
CCO      DC    CL1'0'
         DC    CL29'NUMBER OF MEMBERS SELECTED : '
OUTCNT   DS    CL8
         DC    CL95' '
*
BADFIND  DS    0CL133
CCB      DC    CL1'0'
         DC    CL29'ERROR DOING FIND FOR MEMBER: '
BADMBR   DS    CL8
         DC    CL95' '
*
SCRATCHD DS    PL3
TODAY    DS    PL3
SCRDATE  DC    CL5'*****'
PATTERN  DC    XL8'4020202020202020'
*
         LTORG
*
INPDS    DCB   DDNAME=INLIB,DSORG=PS,RECFM=F,BLKSIZE=256,MACRF=(R),    X
               EODAD=LOADMBR
INPDSA   DCB   DDNAME=INLIB,DSORG=PO,EODAD=GETNEXT,MACRF=(R),          X
               RECFM=U,LRECL=256,BLKSIZE=19069
OUTREC   DCB   DDNAME=OUTREC,DSORG=PS,RECFM=FB,BLKSIZE=3120,           X
               MACRF=(PM),LRECL=80
PRINT    DCB   DDNAME=SYSPRINT,DSORG=PS,RECFM=FBA,BLKSIZE=1330,        X
               MACRF=(PM),LRECL=133
*
*
BLANKS   DC    256CL1' '
         END   MEMLIST
//LKED.SYSLMOD DD DSN=SYS9.IMSUTIL.LOAD,DISP=SHR
//SYSIN   DD *
 ENTRY   MEMLIST
 SETCODE AC(0)
 NAME    MEMLIST(R)
//
