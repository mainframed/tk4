
                       IRXFLOC
                       -------

IRXFLOC is a Rexx Package that extend Rexx functions.

The default installation has an empty IRXFLOC module in SYS1.LINKLIB.
To install this package compile every function and then compile and
link IRXFLOC to create the package. Copy to SYS1.LINKLIB and restart
TSO sesion. Be sure that your installation has no a IRXFLOC package
yet installed. If your system has one expand it with this functions.

This package has nine usefull functions and is very easy to add your
own functions. I recommend this way because Rexx external functions
are loaded from disk on every call, but packages are only loaded
one time at begining of sesion. If you have slowly execs try it, it
speed up 100%, 300%, and more.

Please be free to modify, replace, add new functions and let me know.

                     THE FUNCTIONS
                     -------------

Every functions must be called as functions no procedures.

------------------------------------------------------------------------
L_EDITM.

Edit mask. Return any number foramted as:
           "Z.¥¥¥.¥¥¥.¥¥¥.¥¥¥.¥¥¥,¥¥¥¥¥"
Right aligned and padded with blanks. Allways return five decimal
positions. Make a substr to get your result.

×say L_EDITM(1234.45)                                                  ×

Returns:
'                 1.234,45000'
Change ',' and '.' in source code according to your needs.

------------------------------------------------------------------------
L_ENQRES.

ENQ or DEQ a SYSTEMS EXCL UNCOND resource with MAJOR=IRXF@ENQ.
L_ENQRES("E"/"D","MINOR")
E/D   - Enqueue/Dequeue
Minor - Your resource
RC = 1 - OK

×if L_ENQ("E","MYRES") then do                                         ×
×   call process                                                       ×
×   retc = L_END("D","MYRES")                                          ×
×   end                                                                ×


------------------------------------------------------------------------
L_MATCH.

Compare a string with a pattern returnig result.
Pattern must contain * for varios characters and % for one character.
String and pattern are limited to 256 chars.
RC = 1 - Match, 0 - No Match

×if L_MATCH(text,"SYS1.*") then do                                     ×

------------------------------------------------------------------------
L_DELAY.

Delay execution.
L_DELAY(HHMMSSDC)
HH = Hours
MM = Minutes
SS = Seconds
D  = Seconds/10
C  = Seconds/100

×ret_c = L_Delay(3000)     /* Wait for 30 s. */                        ×
×ret_c = L_Delay(1)        /* Wait for 1/100 s. */                     ×
×ret_c = L_Delay(24000000) /* Wait for 1 day */                        ×

------------------------------------------------------------------------
L_WTO.

Write to operator. WTO/WTOR
L_WTO("MSG"Ö,"R"!)
MSG max 122 chars.
"R" reply required.

×retc = L_WTO("BEGIN PROCESS")                                         ×
×if L_WTO("OK TO CONTINUE","R") = "OK" then do                         ×

------------------------------------------------------------------------
L_SORT.

Call sort.
L_SORT will call sort passing data in stack and retrieving ordered
data to stack.
L_SORT("CNTL"Ö,"M"!)
CNTL - Control sysin. (Max 255 chars).
M - Messages required. (User must alloc sysout dd)
Retcode = 1 OK

× ret_c = L_SORT("SORT FIELD=(10,2,CH,A)")                             ×
× ret_c = L_SORT("SORT FIELD=(4,8,CH,A) INCLUDE COND.....")            ×

Warning: Records in stack are passed like variable records (RDW), so you
         must add 4 for all records position.

------------------------------------------------------------------------
L_U34.

Return unit tape UCBs to stack.

×retc = L_U34()                                                        ×

------------------------------------------------------------------------
L_VSKS.

Rexx/VASM KSDS Interface
L_VSKS("function")

Functions:

   OPEN   - Open file
   CLOSE  - Close file
   INSERT - Insert (Add) record
   SELECT - Select (Search) key
   DELETE - Delete selected record
   UPDATE - Update selected record
   SELECN - Search next record
   SELECF - Select first record ( = KEY or > KEY)
   SELECB - Select previous record
   SELECL - Select last record

RetCodes:
         0 - O.K.
         8 - Invalid function
         9 - IRXEXCOM error
         10 - OPEN error
         11 - CLOSE error
         12 - INSERT error
         13 - SELECT error
         14 - DELETE error (Key Does not exist)
         15 - DELETE error
         16 - UPDATE error (Key Does not exist)
         17 - UPDATE error
         18 - SELECN error (End of dataset)
         19 - GENCB error
         20 - SELECF error (End of dataset)
         21 - SELECB error (Begin of dataset)
         22 - SELECL error (Dos not found)

You must allocate a VSAM/KSDS with ddname(KEINTVF).
L_VSKS uses three Rexx variables:
KEINTV_ACBA = Address of VSAM ACB. Do not modify
KEINTV_ACBR = Address of VSAM RPL. Do not modify
KEINTV_BUFF = Record Buffer

× "alloc fi(keintvf) da('my.vsam') shr" '                              ×
× if L_VSKS("OPEN") then do                                            ×
×    KEINTV_BUFF = mykey                                               ×
×    if L_VSKS("SELECT") = 0 then say "FOUND" substr(KEINTV_BUFF,1,20) ×
×    end                                                               ×
× rk = L_VSKS("CLOSE")                                                 ×
× free fi(keintvf)                                                     ×

------------------------------------------------------------------------
L_MON.

Draw a progress barr in the screen.
L_MON(I,N,"Text")
I = Count
N = Total
Text = Window title
L_MON only actualize screen when it needed, no on every call, so you
must use to monitorize process.

×do i = 1 to 100                                                       ×
×   retc = L_MON(I,100,"Be patient")                                   ×
×   call process                                                       ×
×   end'                                                               ×

