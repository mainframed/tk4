         TITLE 'ISFPSAMR'
ISFPSAMR CSECT
         ENTRY ISFPSAMR
ISFPSAMR AMODE 31
ISFPSAMR RMODE 24
***********************************************************************
*                                                                     *
*             MODULE NAME = ISFPSAMR                                  *
*                                                                     *
*             DESCRIPTIVE NAME =  JES2 SPOOL/DATA STRUC. READ MODULE  *
*                                                                     *
*             AUTHOR = SALVADOR CARRASCO GIMENA                       *
*             E-MAIL = SALVADOR@REDESTB.ES (LOWERCASE)                *
*             WEB    = WWW.REDESTB.ES/PERSONAL/SALVADOR (LOWERCASE)   *
*                                                                     *
*             FUNCTION =                                              *
*                PARM "JQE" = RETURN A BUFFER WITH ALL JQE'S IN JES.  *
*                PARM "JDS" = RETURN ALL DATASETS OF A JQE SPECIFIED  *
*                             IN R_ENT                                *
*                PARM "DSR" = RETURN ALL RECORDS OF A DATASET         *
*                             SPECIFIED IN R_ENT                      *
*                PARM "DS2" = RETURN MORE RECORD FROM A DATASET       *
*                             SPECIFIED IN R_ENT                      *
*                PARM "JOE" = RETURN ALL JOES IN A CLASS SPECIFIED    *
*                             IN R_ENT                                *
*                PARM "JOS" = RETURN ALL DATASETS OF A JOE SPECIFIED  *
*                             IN R_ENT                                *
*                PARM "INI" = RETURN PROGRAM WORKAREA TO CALLER       *
*                PARM "TER" = FREE WORKAREA                           *
*                                                                     *
*                                                                     *
*             NOTES =                                                 *
*                 CODE LINES = 814                                    *
*                 DOC. LINES = 207                                    *
*                                                                     *
*                 RESTRICTIONS = NONE                                 *
*                                                                     *
*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *
*                    REGISTERS 0 TO 8  = WORK REGISTERS               *
*                    REGISTERS 9       = PARAMETER AREA               *
*                    REGISTERS 10      = WORK AREA                    *
*                    REGISTER  11 & 12 = ADDRESSABILITY TO ISFPSAMR   *
*                                        CSECT                        *
*                    REGISTER  13      = ADDRESSIBILITY TO SAVE AREA  *
*                    REGISTERS 14,15   = WORK REGISTERS               *
*                                                                     *
*                                                                     *
*                ATTRIBUTES = KEY 0, REENTRANT,                       *
*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          *
*                                                                     *
*             ENTRY POINTS = ISFPSAMR (ONLY ENTRY POINT)              *
*                                                                     *
*                LINKAGE =                                            *
*                                                                     *
*                                                                     *
*             INPUT = REG1 POINTS TO USER SUPLIED DATA, MAPPED        *
*                     BY ISFPSAMP                                     *
*                                                                     *
*                                                                     *
*             EXIT - NORMAL = AT PROGRAM END VIA PR                   *
*                                                                     *
*                OUTPUT = DATA IN USER SUPLIED AREA                   *
*                                                                     *
*                RETURN CODE = ZERO                                   *
*                                                                     *
*             EXIT - ERROR = ABEND                                    *
*                                                                     *
*                                                                     *
*             EXTERNAL REFERENCES =                                   *
*                                                                     *
*                DATA AREAS = ISFPSAMP                                *
*                                                                     *
*                CONTROL BLOCKS = VARIOUS MVS/JES2.                   *
*                                 SEE BOOTOM OF CODE.                 *
*                                                                     *
*             ABEND CODES = 001 - NOT AUTHORIZED                      *
*                           003 - DYNALLOC ERROR (ALLOC)              *
*                           004 - DYNALLOC ERROR (UNALLOC)            *
*                           005 - INVALID PARM                        *
*                           007 - SPOOL VOLUME NOT CONTROLED          *
*                                                                     *
***********************************************************************
*----------------------------------------------------------------------
* PROLOG.
* THIS PROGRAM MUST RUN AUTHORIZED, I USE EXT-SVC(109) SUBCODE 200
* TO SWITCH TO SUPERVISOR MODE.
* SEE IGX00200 FOR MORE INFORMATION.
*----------------------------------------------------------------------
         COPY $HASPGBL
         USING ISFPSAMR,R15                  TEMP BASE REGISTER
*----------------------------------------------------------------------
* ESTABLISH ADDRESSING FOR MODULE
*----------------------------------------------------------------------
START001 DS    0H
         BAKR  R14,0                         SAVE CALLING REGISTERS
         LR    R12,R15                       LOAD NEW BASE REG.
         DROP  R15                           DROP OLD BASE REG.
         LR    R9,R1                         LOAD PARM ADD. REG.
         LA    R1,1                          4096-4095
         LA    R11,4095(R1,R12)              LOAD BASE+4096
         USING ISFPSAMR,R12,R11              R11-12, BASE REG.
         USING PARM,R9                       ESTABLISH ADD.
         CLC   R_WAREA,=F'0'                 USER PROVIDE A WORK AREA
         BE    GETWAREA                      NO, GETMAIN IT
         L     R10,R_WAREA                   YES, USE IT
         B     BEGIN                         START PROGRAM
GETWAREA GETMAIN RU,LV=LDATA,LOC=(BELOW,ANY) GETMAIN WORK AREA
         LR    R10,R1                        R10, WORK AREA ADD. REG.
         USING DYNAREA,R10                   ESTABLISH ADD.
         XC    STATUS,STATUS                 CLEAR STATUS
BEGIN    LA    R13,SAVER                     OBVIOUS
*----------------------------------------------------------------------
* MAIN PROCEDURE
*----------------------------------------------------------------------
MAIN     EQU   *
         BAL   R14,GETMEM                    GET SOME JES2 DATA
         CLC   R_PARM,=CL3'JQE'              USER REQUIRE JQE'S?
         BNE   NP                            NO, GO NEXT OPT.
         BAL   R14,READJQE                   GO READ JQE'S
         B     EXIT                          RETURN TO CALLER.
NP       CLC   R_PARM,=CL3'JDS'              USER REQUIRE JDS'S?
         BNE   NP1                           NO, GO NEXT OPT.
         MVI   OPT,C'F'                      FULL DATASET LIST
         BAL   R14,READJDS                   GO READ JDS'S.
         B     EXIT                          RETURN TO CALLER.
NP1      CLC   R_PARM,=CL3'DSR'              USER REQUIRE DSR?
         BNE   NP2                           NO, GO NEXT OPT.
         MVI   OPT,C'F'                      FULL DATASET
         BAL   R14,READDSR                   GO READ DSR.
         B     EXIT                          RETURN TO CALLER.
NP2      CLC   R_PARM,=CL3'JOE'              USER REQUIRE JOE'S?
         BNE   NP3                           NO, GO NEXT OPT.
         BAL   R14,READJOE                   GO READ JOE'S.
         B     EXIT                          RETURN TO CALLER.
NP3      CLC   R_PARM,=CL3'JOS'              USER REQUIRE JOS'S?
         BNE   NP4                           NO, GO NEXT OPT.
         MVI   OPT,C'O'                      JOES ONLY DATASETS
         BAL   R14,READJDS                   GO READ JOS'S.
         B     EXIT                          RETURN TO CALLER.
NP4      CLC   R_PARM,=CL3'DS2'              USER REQUIRE DS2?
         BNE   NP5                           NO, GO NEXT OPT
         MVI   OPT,C'M'                      MODE DATASET RECORDS
         BAL   R14,READDSR                   GO READ DSR.
         B     EXIT                          RETURN TO CALLER.
NP5      CLC   R_PARM,=CL3'JCT'              USER REQUIRE JCT?
         BNE   NP6                           NO, BAD PARM
         BAL   R14,READJCT                   READ JCT
         B     EXIT                          RETURN TO CALLER.
NP6      CLC   R_PARM,=CL3'INI'              USER REQUIRE INIT?
         BNE   NP7                           NO, GO NEXT OPT
         BAL   R14,OPSPL                     OPEN SPOOL
         ST    R10,R_WAREA                   SAVE WORK AREA
         B     EXIT                          RETURN TO CALLER.
NP7      CLC   R_PARM,=CL3'TER'              USER REQUIRE TERM?
         BNE   PARMM                         NO, BAD PARM
         BAL   R14,CLSPL                     CLOSE SPOOL
         XC    R_WAREA,R_WAREA               CLEAR USER PTR WORKAREA
         B     EXIT                          RETURN TO CALLER.
EXIT     EQU   *                             RETURN TO CALLER.
         CLC   R_WAREA,=F'0'                 USER PROVIDE A WORK AREA
         BNE   EXIT1                         YES, DO NOT CLOSE/FREE
         BAL   R14,CLSPL                     CLOSE SPOOL
         FREEMAIN RU,LV=LDATA,A=(R10)        FREE WORK AREA.
EXIT1    SLR   R15,R15                       RC = 0
         PR                                  RETURN
PARMM    ABEND 005,DUMP                      BAD PARM
*----------------------------------------------------------------------
* READJQE
* GET ALL JQE'S IN JES2.
* GETMAIN A BUFFER AND RETURN IT TO CALLER WITH JQE'S DATA.
* CALLER MUST FREE THIS AREA.
*----------------------------------------------------------------------
READJQE  EQU   *
         ST    R14,READJQES                  SAVE RETURN ADD.
         L     R2,BUFJQE                     GET BUFFER LENGTH
         ST    R2,R_BUFLEN                   SAVE BUFFER LENGTH
         GETMAIN RU,LV=(R2),LOC=BELOW        GETMAIN BUFFER.
         LR    R6,R1                         SAVE ADD.
         ST    R6,R_ADDR                     SAVE ADD. FOR CALLER.
         BAL   R14,SETXM                     GO TO X-MEM
         LR    R1,R6                         LOAD PTR.
         L     R2,PTRJQE                     LOAD JES2 PTR TO JQE'S
         L     R3,BUFJQE                     LOAD TOTAL LENGTH TO COPY
         LA    R15,256                       MAX COPY IN ONE STEP
         LA    R0,16                         JES2 PSW KEY
CMAS     MVCP  0(R3,R1),0(R2),R0             COPY DATA
         BC    8,READJQE1                    END OF COPY ?
         AR    R1,R15                        NO, ADD 256 TO OUT PTR.
         AR    R2,R15                        ADD 256 TO IN PTR
         SR    R3,R15                        TOTAL LENGTH-COPIED LEN.
         B     CMAS                          COPY MORE DATA
READJQE1 EQU   *                             END OF COPY
         BAL   R14,RSETXM                    RESET X-MEM
         LH    R4,LENJQE                     LOAD ONE JQE LENGTH
         ST    R4,R_ELEML                    SAVE IT FOR CALLER
         L     R14,READJQES                  LOAD RETURN ADD.
         BR    R14                           RETURN
*----------------------------------------------------------------------
* READJDS
* GET ALL DATASET IN A JQE/JOE.
* CALLER MUST PROVIDE A JQE/JOE IN R_ENT.
* GETMAIN A BUFFER AND RETURN IT TO CALLER WITH DATASETS LIST.
* CALLER MUST FREE THIS AREA.
*----------------------------------------------------------------------
READJDS  EQU   *
         ST    R14,READJDSS                  SAVE RETURN ADD.
         LH    R2,WBUFFS                     SYS1.HASPACE BLKSIZE
         GETMAIN RU,LV=(R2),LOC=BELOW        GET SPACE FOR BUFFER
         ST    R1,WBUFFA                     SAVE BUFFER ADD.
         LA    R1,PDBLENG                    LOAD PDBLENG
         LA    R15,1000                      GET 1000 DATASET MAX.
         MR    R0,R15                        GET TOTAL AREA LENGTH
         ST    R1,WJDSS                      SAVE LENGTH
         GETMAIN RU,LV=(R1),LOC=(ANY,ANY)    GETMAIN BUFFER
         ST    R1,WJDSA                      SAVE ADD.
         A     R1,WJDSS                      ADD LENGTH.
         ST    R1,WJDSE                      SAVE END OF AREA.
         BAL   R14,OPSPL                     GO TO OPEN SPOOL.
         L     R8,WJDSA                      RECALL ADD.
         XC    WSPIOT,WSPIOT                 CLEAR SPIN IOT SAVER
         CLI   OPT,C'F'                      JQE ?
         BE    RJQE                          YES
         LA    R2,R_ENT                      LOAD CALLER JOE
         USING JOE,R2                        ESTABLISH ADD.
         L     R3,JOEIOTTR                   LOAD IOT MTTR
         MVC   WOUTGNAM,JOENAME              SAVE JOENAME
         B     DIOT                          READ IOT
         DROP  R2                            END JOE PROC.
RJQE     LA    R2,R_ENT                      ADD. OF USER SUP. JQE
         USING JQE,R2                        ESTABLISH ADD.
         L     R3,JQETRAK                    GET JQETRAK (MTTR)
         LTR   R3,R3                         IS MTTR OK ?
         BZ    ENDJDS                        NO, NO JCT AVAILABLE
         TM    JQEFLAG3,JQE3SYSD             IS SPECIAL SYSTEM JQE?
         BO    DIOT                          YES, GO READ IOT
         DROP  R2                            END OF JQE PROCCESS.
         BAL   R14,SPREAD                    READ BLOCK.
         CLC   JCTID-JCTSTART(4,R7),=CL4'JCT ' IS A JCT BLOCK ?
         BNE   ENDJDS                        NO, NO JCT AVAILABLE
         L     R3,JCTSPIOT-JCTSTART(R7)      YES, SAVE SPIN IOT
         ST    R3,WSPIOT                     SAVE IT
         L     R3,JCTIOT-JCTSTART(R7)        LOAD IOT MTTR.
         LTR   R3,R3                         OK ?
         BZ    ENDJDS                        NO, NO JCT AVAILABLE
DIOT     BAL   R14,SPREAD                    READ IOT
         MVC   WGAT,IOTTGATR-IOTSTART(R7)    SAVE GAT IOT
LOOPIOT  CLC   IOTID-IOTSTART(4,R7),=CL4'IOT ' IOT OK ?
         BNE   ENDJDS                        NO, NO JCT/IOT AVAILABLE
         BAL   R14,COPYPDDB                  COPY VALID PDDBS
         L     R3,IOTIOTTR-IOTSTART(R7)      NEXT IOT
         LTR   R3,R3                         IF IOT OK ?
         BZ    FINIOT                        NO, END OF IOT
         BAL   R14,SPREAD                    YES, READ IT
         B     LOOPIOT                       PROCESS IT
FINIOT   EQU   *                             END OF IOT
         L     R3,WGAT                       LOAD SAVED IOTGAT
LOOPIOTS LTR   R3,R3                         IS OK ?
         BZ    NMIOTS                        NO, NO MORE IOTS
         BAL   R14,SPREAD                    YES, READ IT
         CLC   IOTID-IOTSTART(4,R7),=CL4'IOT ' IS OK ?
         BNE   ENDJDS                        NO, NO MORE IOTS
         BAL   R14,COPYPDDB                  YES, COPY DATASETS
         L     R3,IOTTGATR-IOTSTART(R7)      NEXT IOT GAT
         B     LOOPIOTS                      PROCESS
NMIOTS   L     R3,WSPIOT                     PROCESS SPIN IOT
         LTR   R3,R3                         IS OK ?
         BZ    ENDJDS                        NO, END OF PROCESS
         BAL   R14,SPREAD                    YES, READ IT
         CLC   IOTID-IOTSTART(4,R7),=CL4'IOT ' IOT OK ?
         BNE   ENDJDS                        NO, END OF PROCESS
         BAL   R14,COPYPDDB                  COPY IT
ENDJDS   LA    R1,PDBLENG                    GET PDDB LENGTH
         ST    R1,R_ELEML                    SAVE FOR CALLER
         ST    R8,R_BUFEND                   SAVE BUFFER END
         L     R8,WJDSA                      LOAD BUFFER START
         ST    R8,R_ADDR                     SAVE IT
         L     R1,WJDSS                      LOAD BUFFER LENGTH
         ST    R1,R_BUFLEN                   SAVE IT
         L     R1,WBUFFA                     LOAD BUFFER ADD.
         LH    R2,WBUFFS                     LOAD BUFFER LENGTH
         FREEMAIN RU,LV=(R2),A=(R1)          FREE BUFFER
         L     R14,READJDSS                  GET RETURN ADD.
         BR    R14                           RETURN
*----------------------------------------------------------------------
* READJCT
* GET A JCT OF A JQE
* CALLER MUST PROVIDE A JQE IN R_ENT.
* GETMAIN A BUFFER AND RETURN IT TO CALLER WITH JCT AREA.
* CALLER MUST FREE THIS AREA.
*----------------------------------------------------------------------
READJCT  EQU   *
         ST    R14,READJCTS                  SAVE RETURN ADD.
         LH    R2,WBUFFS                     SYS1.HASPACE BLKSIZE
         GETMAIN RU,LV=(R2),LOC=BELOW        GET SPACE FOR BUFFER
         ST    R1,WBUFFA                     SAVE BUFFER ADD.
         LA    R1,4095                       LOAD LENGTH OF JCT
         ST    R1,WJCTS                      SAVE LENGTH
         GETMAIN RU,LV=(R1),LOC=(ANY,ANY)    GETMAIN BUFFER
         ST    R1,WJCTA                      SAVE ADD.
         A     R1,WJCTS                      ADD LENGTH.
         ST    R1,WJCTE                      SAVE END OF AREA.
         BAL   R14,OPSPL                     GO TO OPEN SPOOL.
         L     R8,WJCTA                      RECALL ADD.
         LA    R2,R_ENT                      ADD. OF USER SUP. JQE
         SR    R1,R1                         LENGTH
         USING JQE,R2                        ESTABLISH ADD.
         L     R3,JQETRAK                    GET JQETRAK (MTTR)
         LTR   R3,R3                         IS MTTR OK ?
         BZ    ENDJCT                        NO, NO JCT AVAILABLE
         TM    JQEFLAG3,JQE3SYSD             IS SPECIAL SYSTEM JQE?
         BO    ENDJCT                        YES, GO READ IOT
         DROP  R2                            END OF JQE PROCCESS.
         BAL   R14,SPREAD                    READ BLOCK.
         SR    R1,R1
         CLC   JCTID-JCTSTART(4,R7),=CL4'JCT ' IS A JCT BLOCK ?
         BNE   ENDJCT                        NO, NO JCT AVAILABLE
         LH    R1,JCTLENG-JCTSTART(R7)       YES, GET LENGTH
         LR    R2,R1                         SAVE LENGTH
         LR    R15,R1                        COPY LENGTH
         LR    R0,R8                         GET ADD OF BUFFER
         LR    R14,R7                        GET ADD OF JCT
         MVCL  R0,R14                        COPY
         AR    R8,R2                         END OF JCT
         LR    R1,R2                         RESTORE LENGTH
ENDJCT   ST    R1,R_ELEML                    SAVE FOR CALLER
         ST    R8,R_BUFEND                   SAVE BUFFER END
         L     R8,WJCTA                      LOAD BUFFER START
         ST    R8,R_ADDR                     SAVE IT
         L     R1,WJCTS                      LOAD BUFFER LENGTH
         ST    R1,R_BUFLEN                   SAVE IT
         L     R1,WBUFFA                     LOAD BUFFER ADD.
         LH    R2,WBUFFS                     LOAD BUFFER LENGTH
         FREEMAIN RU,LV=(R2),A=(R1)          FREE BUFFER
         L     R14,READJCTS                  GET RETURN ADD.
         BR    R14                           RETURN
*----------------------------------------------------------------------
* COPYPDDB
* COPY ALL VALID PDDB IN IOT TO BUFFER.
* R7 => BLK, R8 => BUFFADD
*----------------------------------------------------------------------
COPYPDDB EQU   *
         ST    R14,COPYPDDS                  SAVE RETURN ADD.
         L     R4,IOTPDDB-IOTSTART(R7)       OFFSET FIRST PDDB IN IOT
         L     R2,IOTPDDBP-IOTSTART(R7)      OFFSET LAST PDDB IN IOT
         S     R4,=AL4(IOTSTART-IOT)         SUBS HEADER
         S     R2,=AL4(IOTSTART-IOT)         SUBS HEADER
         AR    R4,R7                         POINT TO PDDB
         AR    R2,R7                         POINT TO LAST PDDB
         USING PDB,R4                        ESTABLISH ADD.
LOOPPDB  NC    PDBMTTR,PDBMTTR               MTTR OK ?
         BZ    PDDBNEXT                      NO, GO TO NEXT
         CLI   OPT,C'F'                      FULL DATASET LIST ?
         BE    COPYIT                        COPY IT
         CLC   WOUTGNAM,PDBNAME              IS A JOE DATASET ?
         BNE   PDDBNEXT                      NO, SKIP IT
COPYIT   LA    R1,PDBLENG                    YES, GET LENGTH
         LR    R15,R1                        COPY LENGTH
         LR    R0,R8                         GET ADD OF BUFFER
         LR    R14,R4                        GET ADD OF PDDB
         MVCL  R0,R14                        COPY
         LA    R8,PDBLENG(R8)                NEXT BUFFER POS.
         C     R8,WJDSE                      AT END OF BUFFER ?
         BNL   COPYPDDR                      YES, NO MORE COPIES
PDDBNEXT LA    R4,PDBLENG(R4)                NEXT PDDB IN BLOCK
         CR    R4,R2                         MORE PDDB IN BLOCK ?
         BL    LOOPPDB                       YES, GO TO GET IT
         DROP  R4                            END
COPYPDDR L     R14,COPYPDDS                  LOAD RETURN ADD.
         BR    R14                           RETURN
*----------------------------------------------------------------------
* READJOE
* GET ALL JOE'S IN CLASS (R_ENT) PASSED BY CALLER.
* GETMAIN A BUFFER AND RETURN IT TO CALLER WITH JOE'S DATA.
* CALLER MUST FREE THIS AREA.
*----------------------------------------------------------------------
READJOE  EQU   *
         ST    R14,READJOES                  SAVE RETURN ADDRESS
         L     R1,JOEMAX                     MAX NUM. OF JOES
         LA    R15,JOESIZE                   JOE SIZE.
         MR    R0,R15                        TOTAL SIZE JOE TABLE.
         LR    R2,R1                         SAVE IT
         ST    R2,R_BUFLEN                   SAVE TOTAL SIZE JOE TABLE.
         GETMAIN RU,LV=(R2),LOC=ANY          GETMAIN BUFFER.
         LR    R6,R1                         BUFFER ADDRESS.
         ST    R6,R_ADDR                     SAVE BUFFER ADDRESS.
         BAL   R14,SETXM                     SWITCH TO X-MEM.
         L     R2,PTRJOT                     LOAD JES2 PTR TO JOT
         LA    R15,JOTCLSQ-JOT(R2)           ADD. OF JOT CLASSES PTRS.
         TR    R_ENT(1),TRANSCL              TRANSLATE USER. SUP. CLASS
         SR    R1,R1                         ZERO R1
         ICM   R1,B'0001',R_ENT              LOAD USER. SUP. CLASS.
         LA    R3,12                         LENGTH CLASS DESCRIP.
         MR    R0,R3                         OFFSET USER CLASS.
         AR    R15,R1                        ADD TO BASE ADDRESS.
         LA    R0,16                         JES2 PSW KEY.
         LA    R3,4                          LENGTH FOR MOVE TO PRIMARY
         MVCP  NJOE(R3),0(R15),R0            MOVE POINTER.
         L     R1,NJOE                       LOAD JOE POINTER.
         LTR   R1,R1                         IS ZERO?
         BZ    NMJOESP                       YES, NO MORE JOES.
NJOES    LR    R4,R2                         LOAD PTR TO JOT.
         AR    R4,R1                         ADD OFFSET OF CLASS REQ.
         LA    R0,16                         JES2 PSW KEY.
         LA    R3,JOESIZE                    GET JOE SIZE.
         MVCP  0(R3,R6),0(R4),R0             COPY JOE.
         SR    R1,R1                         ZERO R1
         ICM   R1,B'0111',1(R6)              GET NEXT JOE ADD.
         LTR   R1,R1                         IS ZERO ?
         BZ    NMJOES                        YES, GO NO MORE JOES.
         AR    R6,R3                         NEXT BUFFER RECORD.
         B     NJOES                         GET MORE JOES.
NMJOES   DS    0H                            NO MORE JOES.
         AR    R6,R3                         END OF BUFFER.
NMJOESP  ST    R6,R_BUFEND                   SAVE END OF BUFFER.
         BAL   R14,RSETXM                    NO MORE X-MEM.
         LA    R4,JOESIZE                    LOAD JOESIZE
         ST    R4,R_ELEML                    SAVE JOESIZE
         L     R14,READJOES                  RETURN ADD.
         BR    R14                           END
*----------------------------------------------------------------------
* READDSR
* READ SOOLED DATA SET
* USER MUST PORVIDE A PDDB IN R_ENT.
* GETMAIN A BUFFER AND RETURN IT TO CALLER WITH DATASET RECORDS.
* CALLER MUST FREE THIS AREA.
*----------------------------------------------------------------------
READDSR  EQU   *
         ST    R14,READDSRS                  SAVE RETURN ADD.
         LH    R2,WBUFFS                     LOAD HASPACE BLKSIZE LEN
         GETMAIN RU,LV=(R2),LOC=BELOW        GETMAIN BUFFER
         ST    R1,WBUFFA                     SAVE BUFF. ADD.
         LA    R1,R_ENT                      LOAD PDDB USER AREA
         USING PDB,R1                        ESTABLISH ADD.
         L     R2,PDBBYTCT                   LOAD DATASET BYTE COUNT
         DROP  R1                            END PDDB ADD.
         A     R2,=X'0000FFFF'               ADD 64 K
         L     R1,=X'000FFFFF'               1 MGB.
         CR    R2,R1                         COMPARE LENGTH+64, 1 MG
         BL    DSRGETM                       LOW, GO GET IT
         LR    R2,R1                         HIGH, GET 1 MG ONLY
DSRGETM  ST    R2,R_BUFLEN                   SAVE LENGTH
         GETMAIN RU,LV=(R2),LOC=(ANY,ANY)    GET BUFFER
         ST    R1,R_ADDR                     SAVE ADD.
         AR    R1,R2                         ADD LENGTH
         ST    R1,WJDSE                      SAVE BUFFER END
         BAL   R14,OPSPL                     OPEN SPOOL VOLUMES
         L     R8,R_ADDR                     LOAD START OF BUFFER
         LA    R2,R_ENT                      LOAD PDDB USER AREA
         USING PDB,R2                        ESTABLISH ADD.
         MVC   WDSKEY,PDBDSKEY               SAVE DATASET KEY
         CLI   OPT,C'F'                      FULL DATASET ?
         BE    DSRFULL                       YES, GET START
         L     R3,R_OTHER                    GET SAVED LAST BLOCK
         B     DSRRBR                        PROCESS PARTIAL
DSRFULL  L     R3,PDBMTTR                    LOAD MTTR
DSRRBR   ST    R3,WSR03                      SAVE CURRENT BLK MTTR
         ST    R8,WCHECK                     SAVE LAST CHECK ADD.
         BAL   R14,SPREAD                    READ BLOCK
         USING BUFSTART,R7                   ESTABLISH ADD.
         LA    R4,HDBSTART                   LOAD HDBSTART ADD.
         CLC   WDSKEY,HDBDSKEY               KEY MATCH ?
         BNE   DSREND                        NO, RETURN
         USING LRC,R4                        ESTABLISH ADD.
DSRNR    CLI   LRCTLENG,LRCBFEND             AT END OF BLOCK ?
         BE    DSRNB                         YES, GO FOR NEXT BLOCK
         TM    LRCFLAG1,LRC1SPAN             SPANNED RECORD ?
         BO    DSRSPAN                       YES, GO PROCESS IT
         SR    R1,R1                         ZERO R1
         ICM   R1,B'0001',LRCTLENG           LOAD RECORD LEN
         TM    LRCFLAG1,LRC1CCTL             CONTROL CHAR ?
         BZ    N1                            NO, PROCESS IT
         LA    R1,1(R1)                      YES, SKIP IT
N1       TM    LRCFLAG1,LRC1ONUL             NULL RECORD ?
         BO    NULO                          YES, SKIP IT
         LA    R6,2(R1,R8)                   NO, LOAD STORE ADD.
         C     R6,WJDSE                      AT END OF BUFFER?
         BNL   NOSPC                         YES, BUFFER FULL
         STCM  R1,B'0011',0(R8)              NO, SAVE RECORD LEN
         BCTR  R1,R0                         ADJUST LENGTH
         EX    R1,MOVTXT                     MOVE RECORD
         LR    R8,R6                         ADD. NEXT RECORD BUFFER
         AR    R4,R1                         ADD. NEXT RECORD SPOOL
         LA    R4,4(R4)                      SKIP HEADER
         B     DSRNR                         GO FOR NEXT RECORD
NULO     AR    R4,R1                         SKIP RECORD
         LA    R4,3(R4)                      SKIP HEADER
         B     DSRNR                         GO FOR NEXT RECORD
MOVTXT   MVC   2(0,R8),LRCTEXT               MVC TARGET INSTRUC.
DSRSPAN  EQU   *                             PROCESS SPANNED REC.
         LH    R1,LRCSEGL                    LOAD LENGTH
         TM    LRCFLAG1,LRC1CCTL             CONTROL CHAR ?
         BZ    N2                            NO, PROCESS.
         LA    R1,1(R1)                      YES, SKIP IT
N2       TM    LRCFLAG1,LRC1SBGN             SPAN REC BEGIN ?
         BO    DSRSPAN1                      YES, PROCESS IT
         TM    LRCFLAG1,LRC1SMID             SPAN REC MIDLE ?
         BO    DSRSPAN2                      YES, PROCESS IT
         B     DSRSPAN3                      NO, FINISH SPAN REC
DSRSPAN1 EQU   *                             PROCESS BEGIN SPAN REC
         LA    R6,2(R1,R8)                   LOAD END OF TEXT TARGET
         C     R6,WJDSE                      AT END OF BUFFER ?
         BNL   NOSPC                         YES, NO SPACE IN BUFF.
         ST    R1,WLENS                      SAVE LENGTH OF REC
         ST    R8,WLENA                      SAVE ADD.
         STCM  R1,B'0011',0(R8)              SAVE TOTAL LENGTH
         LR    R15,R1                        LOAD LENGTH
         LA    R0,2(R8)                      LOAD TARGET ADD.
         LA    R14,LRCSFTXT                  LOAD SOURCE ADD.
         MVCL  R0,R14                        COPY TEXT
         LR    R8,R6                         POINT END OF RECORD.
         A     R4,WLENS                      ADD LENGTH
         LA    R4,6(R4)                      SKIP HEADER
         B     DSRNR                         NEXT RECORD
DSRSPAN2 EQU   *                             PROCESS MIDLE SPAN RECORD
         LA    R6,0(R1,R8)                   LOAD END OF TARGET ADD.
         C     R6,WJDSE                      AT END OF BUFFER ?
         BNL   NOSPC                         YES, NO SPACE IN BUFF
         LR    R0,R1                         LOAD LENGTH
         A     R0,WLENS                      ADD TO CURRENT LENGTH
         ST    R0,WLENS                      SAVE TOTAL LENGTH
         LR    R15,R1                        LOAD LENGTH
         LR    R0,R8                         LOAD TARGET ADD.
         LR    R8,R1                         SAVE LENGTH
         LA    R14,LRCSTEXT                  LOAD SOURCE ADD.
         MVCL  R0,R14                        COPY TEXT
         AR    R4,R8                         ADD LENGTH TO SOURCE ADD.
         LR    R8,R6                         POINT TO END OF RECORD
         LA    R4,4(R4)                      SKIP HEADER
         B     DSRNR                         NEXT RECORD
DSRSPAN3 EQU   *                             PROCESS END SPAN RECORD
         LA    R6,0(R1,R8)                   LOAD END TARGET ADD.
         C     R6,WJDSE                      AT END OF BUFFER ?
         BNL   NOSPC                         YES, END OF BUFFER
         LR    R0,R1                         LOAD LENGTH
         A     R0,WLENS                      ADD TO CURRENT LENGTH
         L     R15,WLENA                     LOAD LENGTH ADD.
         STCM  R0,B'0011',0(R15)             SAVE TOTAL LENGTH
         LR    R15,R1                        LOAD LENGTH
         LR    R0,R8                         LOAD TARGET ADD.
         LR    R8,R1                         SAVE LENGTH
         LA    R14,LRCSTEXT                  LOAD SOURCE ADD.
         MVCL  R0,R14                        COPY TEXT
         AR    R4,R8                         POINT NEXT RECORD
         LR    R8,R6                         LOAD END OF TARGET
         LA    R4,4(R4)                      SKIP HEADER
         B     DSRNR                         NEXT RECORD
DSRNB    EQU   *                             END OF BLOCK
         L     R3,HDBNXTRK                   LOAD NEXT BLOCK ADD.
         LTR   R3,R3                         IS OK ?
         BZ    DSREND                        NO, END OF DATASET
         B     DSRRBR                        YES, PROCESS IT.
         DROP  R2,R4,R7                      END OF PROCESSING
NOSPC    EQU   *                             NO MORE SPACE IN BUFFER
         MVC   R_ELEML,=F'0'                 SET RETURN CODE 0=PARTIAL
         MVC   R_BUFEND,WCHECK               SAVE LAST CHECK ADD.
         MVC   R_OTHER,WSR03                 SAVE LAST BLOCK PROCESED
         B     DSRRET                        RETURN
DSREND   EQU   *                             END OF DATASET
         ST    R8,R_BUFEND                   SAVE END OF BUFFER
         MVC   R_ELEML,=F'1'                 SET RETURN CODE 1=FULL
DSRRET   L     R1,WBUFFA                     LOAD BUFFER ADD.
         LH    R2,WBUFFS                     LOAD BUFFER LENGTH
         FREEMAIN RU,LV=(R2),A=(R1)          FREE IT
         L     R14,READDSRS                  LOAD RETURN ADD.
         BR    R14                           RETURN
*----------------------------------------------------------------------
* SPREAD
* READ SPOOL BLOCK.
* R3 CONTAINS MTTRR TO BE READ.
*----------------------------------------------------------------------
SPREAD   EQU   *
         ST    R14,SPREADS                   SAVE RETURN ADD.
         ST    R8,WSR08                      SAVE R8
         LR    R2,R3                         COPY MTTR
         LR    R1,R2                         GET MTTR
         SRL   R1,24                         MTTR => 0000M
         CH    R1,WSPNUM                     OK ?
         BH    ABEND7                        NO, BAD VOLUME NUMBER.
         M     R0,=AL4(WSPL)                 GET WSP ADDR FOR THIS VOL.
         C     R1,WSPPTL                     IS OK?
         BNL   ABEND7                        NO, BAD VOLUME NUMBER.
         L     R3,WSPPTRS                    LOAD START OF WSP
         AR    R3,R1                         ADD OFFSET OF VOLUME
         USING WSP,R3                        ESTABLISH ADD.
         CLI   WSPVAL,C'S'                   IS OK ?
         BNE   ABEND7                        NO, BAD VOLUME NUMBER.
         L     R15,WSPTRK                    LOAD TRK/CYL
         LR    R1,R2                         GET MTTR
         SLL   R1,8                          MTTR = TTR0
         SRL   R1,16                         TTR0 = 000TT
         SR    R0,R0                         ZERO R0
         DR    R0,R15                        TT/(TRK/CYL)
         XC    WSPCHHR,WSPCHHR               CLEAR WORK CHHR
         STCM  R1,B'0011',WSPCHHR+3          SET CC
         STCM  R0,B'0011',WSPCHHR+5          SET HH
         STC   R2,WSPCHHR+7                  SET R
         LA    R5,WSPDECBI                   LOAD ADD. OF DECB
         LA    R6,WSPDCB                     LOAD ADD. OF DCB
         L     R7,WBUFFA                     LOAD ADD. OF BUFFER
         LA    R8,WSPCHHR                    LOAD ADD. OF CCHHR
         LA    R1,L24B02                     LOAD A 24 BIT ADDRESS
         BSM   0,R1                          SET MODE 24
L24B02   EQU   *                             24 BIT ADDRESS
         READ  (R5),DI,(R6),(R7),'S',0,(R8),MF=E MAKE READ
         CHECK (R5)                          CHECK IT
         LA    R1,L31B01                     LOAD LABEL
         O     R1,=X'80000000'               MAKE 31 BIT ADDRESS
         BSM   0,R1                          SET MODE 31
L31B01   EQU   *                             31 BIT ADDRESS
         L     R14,SPREADS                   LOAD RETURN ADD.
         DROP  R3                            END
         L     R8,WSR08                      RECALL R8
         BR    R14                           RETURN
ABEND7   ABEND 007,DUMP                      BAD SPOOL VOLUME
*----------------------------------------------------------------------
* OPSPL
* MAKE WSP AREA. WSP AREA CONTAIN ONE RECORD FOR EACH SPOOL VOLUME.
* EACH WSP RECORD CONTAINS SOMES ADDRESS, DDNAME, DCB, ETC..
* ALLOC AND OPEN ALL SPOOL VOLUMES
*----------------------------------------------------------------------
OPSPL    EQU   *
         ST    R14,OPSPLS                    SAVE RETURN ADD.
         TM    STATUS,ISSPOPEN               IS SPOOL YET OPEN ?
         BNZR  R14                           YES, DO NOT OPEN
         LH    R1,WSPNUM                     GET SPOOL VOLUMES NUMBER
         M     R0,=AL4(WSPL)                 GET WSP TOTAL LENGTH
         LR    R2,R1                         SAVE IT
         GETMAIN RU,LV=(R2),LOC=BELOW        GETMAIN BUFFER
         ST    R1,WSPPTRS                    SAVE PTR
         ST    R2,WSPPTL                     SAVE LENGTH
         BAL   R14,SETXM                     GO FOR X-MEM
         LH    R4,WSPNUM                     GET SPOOL VOLUMES NUMBER
         L     R2,PTRDAS                     LOAD PTR TO DAS
         L     R8,WSPPTRS                    LOAD START OF WSP
         USING DAS,R2                        ESTABLISH ADD.
         USING WSP,R8                        =
         A     R2,=F'24'                     SKIP DAS HEADER.
* HERE, I HAD A PROBLEM WITH DAS HEADER. JES2 DATA AREAS BOOK SAY THAT
* IF YOU WANT TO READ DAS DATA, YOU MUST SKIP A "EIGHTEEN" BYTES HEADER
* I TRIED IT WITH A LOT ASSEMBLING, DEBUGING, TESTING, ABENDS. AND
* FINALLY I DISCOVER THAT DATA AREAS BOOK WAS SPEAKING ABOUT "EIGHTEEN"
* IN HEXADECIMAL, 24 IN DECIMAL.
* I FOUND OTHERS ERRORS IN JES2 DATA AREAS BOOK (V4.2).
NDAS     LA    R0,16                         JES2 PSW KEY
         LA    R3,1                          LENGTH
         MVCP  WDASFLG(R3),DASFLAG,R0        COPY DASFLG
         TM    WDASFLG,DASALLOC              IS THIS VOLUME ALLOCATED?
         BZ    LOOPD                         NO, GO TO NEXT
         LA    R0,16                         =
         LA    R3,6                          =
         MVCP  WSPDAS(R3),DASVOLID,R0        COPY VOLSER
         LA    R0,16                         =
         LA    R3,4                          =
         MVCP  WSPTRK(R3),DASTKCYL,R0        COPY TRK/CYL
         MVI   WSPVAL,C'S'                   SET VALID IN WSP REC.
LOOPD    A     R8,=AL4(WSPL)                 NEXT WSP
         A     R2,=AL4(DASSIZ)               NEXT DAS
         BCT   R4,NDAS                       MORE ?
         DROP  R2                            END READING DAS.
         DROP  R8                            =
         BAL   R14,RSETXM                    RESET X-MEM
         L     R8,WSPPTRS                    GET WSP START
         USING WSP,R8                        ESTABLISH ADD.
         LH    R4,WSPNUM                     GET SPOOL VOLUMES
NWSP     CLI   WSPVAL,C'S'                   IS VALID ?
         BNE   LOOPWSP                       NO, GO FOR NEXT
         MVC   WVOLDAS,WSPDAS                GET VOLSER
         BAL   R14,ALLSPC                    GO TO ALLOCATE IT
         MVC   WSPDDN,DATUDDND               SAVE DDNAME RETURNED
         MVC   WSPDCB(WRKDCBL),WRKDCB        COPY DCB MODEL
         LA    R7,WSPDCB                     ESTABLISH ADD.
         USING IHADCB,R7                     =
         MVC   DCBDDNAM,WSPDDN               SAVE DDNAME
         MVC   DCBBLKSI,WBUFFS               SAVE BLKSIZE
         DROP  R7                            END
         MVI   OPENL,X'80'                   SET OPEN OPTION
         OPEN  ((R7),INPUT),MF=(E,OPENL)     MAKE OPEN
LOOPWSP  A     R8,=AL4(WSPL)                 NEXT WSP
         BCT   R4,NWSP                       MORE ?
         DROP  R8                            END
         OI    STATUS,ISSPOPEN               SET SPOOL OPEN STATUS
         L     R14,OPSPLS                    GET RETURN ADD.
         BR    R14                           RETURN
*----------------------------------------------------------------------
* CLSPL
* CLOSE AND UNALLOC ALL SPOOL VOLUMES.
* FREE WSP AREA.
*----------------------------------------------------------------------
CLSPL    EQU   *
         ST    R14,CLSPLS                    SAVE RETURN ADD.
         TM    STATUS,ISSPOPEN               IS SPOOL OPEN ?
         BZR   R14                           NO, DO NOT CLOSE
         L     R8,WSPPTRS                    LOAD WSP ADD.
         USING WSP,R8                        ESTABLISH ADD.
         LH    R4,WSPNUM                     GET NUMBER OF SPOOL VOLS.
NWSPC    CLI   WSPVAL,C'S'                   IF VALID ?
         BNE   LOOPWSPC                      NO, NEXT SPOOL VOLUME.
         MVC   WDDN,WSPDDN                   GET DDNAME
         LA    R7,WSPDCB                     GET DCB ADD.
         MVI   CLOSL,X'80'                   MOVE CLOSE OPTION.
         CLOSE ((R7)),MF=(E,CLOSL)           CLOSE FILE
         BAL   R14,UNLSPC                    UNALLOC SPOOL VOLUME
LOOPWSPC A     R8,=AL4(WSPL)                 NEXT SPOOL VOLUME
         BCT   R4,NWSPC                      ANY MORE?
         DROP  R8                            NO, END
         L     R2,WSPPTL                     LOAD WSP ADD.
         L     R1,WSPPTRS                    LOAD WSP LENGTH.
         FREEMAIN RU,LV=(R2),A=(R1)          FREEMAIN
         L     R14,CLSPLS                    LOAD RETURN ADD.
         NI    STATUS,HEXFF-ISSPOPEN         SET SPOOL OPEN STATUS
         BR    R14                           RETURN
*----------------------------------------------------------------------
* ALLSPC
* ALLOC SYS1.HASPACE
* CALLED FOR EACH VOLUME IN JES2 SPOOL.
*----------------------------------------------------------------------
ALLSPC   EQU   *
         ST    R14,ALLSPCS                   SAVE RETURN ADD.
         LA    R2,DAS99RB                    LOAD REQUEST BLK. ADD.
         USING S99RB,R2                      ESTABLISH ADD.
         ST    R2,DAS99PTR                   SAVE ADD.
         OI    DAS99PTR,S99TUPLN             LAST REQUEST.
         XC    S99RB(RBLEN),S99RB            CLEAR RB
         MVI   S99RBLN,RBLEN                 SAVE RB LENGTH
         MVI   S99VERB,S99VRBAL              SET TO ALLOCATE
         MVI   S99FLG11,S99NOMNT             SET NOMOUNT
         LA    R1,DATP1                      LOAD PTR TO TEXT UNIT
         ST    R1,S99TXTPP                   SAVE ADD.
         MVI   S99FLG21,S99NORES             DO NOT RESERVE
         LA    R1,DATUDSN                    LOAD DSN= PARM ADD.
         ST    R1,DATP1                      SAVE
         LA    R1,DATUDIS                    LOAD DISP= PARM ADD.
         ST    R1,DATP2                      SAVE
         LA    R1,DATUVOL                    LOAD VOL=SER= PARM ADD.
         ST    R1,DATP3                      SAVE
         LA    R1,DATUDDN                    LOAD DDNAME PARM ADD.
         ST    R1,DATP4                      SAVE
         LA    R1,DATUUNI                    LOAD UNIT= PARM ADD.
         ST    R1,DATP5                      SAVE
         OI    DATP5,S99TUPLN                LAST TEXT UNIT
         LA    R3,DATUDSN                    ESTABLISH ADD.
         USING S99TUNIT,R3                   ESTABLISH ADD.
         MVC   S99TUKEY,=AL2(DALDSNAM)       DSNAME=
         MVC   S99TUNUM,=AL2(1)              NUMBER
         MVC   S99TULNG,=AL2(44)             LENGTH
         MVC   DATUDSND,WDSNSP               MOVE SYS1.HASPACE NAME
         LA    R3,DATUDIS                    LOAD ADD.
         MVC   S99TUKEY,=AL2(DALSTATS)       DISP=
         MVC   S99TUNUM,=AL2(1)              NUMBER
         MVC   S99TULNG,=AL2(1)              LENGTH
         MVI   DATUDISD,X'08'                SET SHR DISPOSITION
         LA    R3,DATUVOL                    LOAD ADD.
         MVC   S99TUKEY,=AL2(DALVLSER)       VOLSER=
         MVC   S99TUNUM,=AL2(1)              NUMBER
         MVC   S99TULNG,=AL2(6)              LENGTH
         MVC   DATUVOLD,WVOLDAS              MOVE VOLSER ID
         LA    R3,DATUDDN                    LOAD ADD.
         MVC   S99TUKEY,=AL2(DALRTDDN)       RETURN DDNAME
         MVC   S99TUNUM,=AL2(1)              NUMBER
         MVC   S99TULNG,=AL2(8)              LENGTH
         XC    DATUDDND,DATUDDND             CLEAR IT
         LA    R3,DATUUNI                    LOAD ADD.
         MVC   S99TUKEY,=AL2(DALUNIT)        UNIT=
         MVC   S99TUNUM,=AL2(1)              NUMBER
         MVC   S99TULNG,=AL2(8)              LENGTH
         MVC   DATUUNID,=CL8'SYSALLDA'       MOVE SYSALLDA
         DROP  R3                            END OF TEXT UNIT
         BAL   R14,SETSUP                    SET SUPERVISOR STATE
         LA    R1,DAS99PTR                   LOAD RB POINTER
         DYNALLOC                            MAKE DYNALLOC
         LTR   R15,R15                       OK?
         BZ    FINALL                        YES, RETURN.
         L     R5,S99ERROR                   NO, LOAD ERROR CODE IN R5
         ABEND 003,DUMP                      ABEND
         DROP  R2                            END OF PROCESS
FINALL   BAL   R14,SETPROB                   GO BACK TO PROB. STATE
         L     R14,ALLSPCS                   GET RETURN ADD.
         BR    R14                           RETURN
*----------------------------------------------------------------------
* UNLSPC
* UNALLOC SYS1.HASPACE
* CALLED FOR EACH VOLUME IN JES2 SPOOL.
*----------------------------------------------------------------------
UNLSPC   EQU   *
         ST    R14,UNLSPCS                   SAVE RETURN ADD.
         LA    R2,DAS99RB                    LOAD REQUEST BLK. ADD.
         USING S99RB,R2                      ESTABLISH ADD.
         ST    R2,DAS99PTR                   SAVE PTR.
         OI    DAS99PTR,S99TUPLN             LAST REQUEST.
         XC    S99RB(RBLEN),S99RB            CLEAR RB
         MVI   S99RBLN,RBLEN                 SAVE RB LENGTH
         MVI   S99VERB,S99VRBUN              SET UNALLOC REQUEST
         LA    R1,DATP1                      LOAD ADD. OF PTR TO TEXT
         ST    R1,S99TXTPP                   SAVE TEXT UNIT PTR
         LA    R1,DATUDSN                    LOAD TEST UNIT ADD.
         ST    R1,DATP1                      SAVE IT
         OI    DATP1,S99TUPLN                LAST TEXT UNIT
         LA    R3,DATUDSN                    ESTABLISH ADD. TO TEXT U.
         USING S99TUNIT,R3                   ESTABLISH ADD.
         MVC   S99TUKEY,=AL2(DUNDDNAM)       DDNAME PARM
         MVC   S99TUNUM,=AL2(1)              NUMBER
         MVC   S99TULNG,=AL2(8)              LENGTH
         MVC   DATUDSND,WDDN                 DDNAME
         DROP  R3                            END OF PROCESS
         LA    R1,DAS99PTR                   LOAD DYNALLOC RB
         DYNALLOC                            MAKE IT
         LTR   R15,R15                       OK?
         BZ    ENDUNL                        YES, RETURN.
         L     R5,S99ERROR                   NO, LOAD ERROR CODE IN R5
         ABEND 004,DUMP                      ABEND
         DROP  R2                            END OF PROCESS
ENDUNL   L     R14,UNLSPCS                   LOAD RETURN ADD.
         BR    R14                           RETURN
*----------------------------------------------------------------------
* GETMEM
* GET SOME NEEDED DATA & POINTERS
*----------------------------------------------------------------------
GETMEM   EQU   *
         ST    R14,GETMEMS                   SAVE RETURN ADD.
         L     R1,FLCCVT-PSA(0)              LOAD CVT ADD.
         L     R2,CVTTCBP-CVT(R1)            LOAD TCB PTR.
         L     R2,12(R2)                     LOAD ASCB PTR.
         LH    R0,ASCBASID-ASCB(R2)          LOAD USER ASID
         STH   R0,USERASID                   SAVE IT
         L     R1,CVTJESCT-CVT(R1)           LOAD JES CVT PTR.
         L     R1,JESSSCT-JESCT(R1)          LOAD JES2 SSCT PTR.
         L     R1,SSCTSUS2-SSCT(R1)          LOAD JES2 HCCT PTR.
         L     R0,CCTHCT-HCCT(R1)            LOAD HCT PTR.
         ST    R0,PTRHCT                     SAVE IT
         L     R1,CCTPOSTE+4-HCCT(R1)        LOAD JES2 ASCB PTR.
         LH    R0,ASCBASID-ASCB(R1)          LOAD JES2 ASID
         STH   R0,JESASID                    SAVE IT
         BAL   R14,SETXM                     GO TO X-MEM
         L     R2,PTRHCT                     LOAD HCT PTR
         USING HCT,R2                        ESTABLISH ADDRESSING
         LA    R0,16                         JES2 PSW KEY
         LA    R3,4                          LENGTH
         MVCP  PTRJQE(R3),$JOBQPTR,R0        GET JQE PTR.
         LA    R0,16                         =
         LA    R3,4                          =
         MVCP  PTRJOT(R3),$JOTABLE,R0        GET JOT PTR.
         LA    R0,16                         =
         LA    R3,2                          =
         MVCP  LENJQE(R3),$JQELEN,R0         GET JQE LENGTH
         LA    R0,16                         =
         LA    R3,2                          =
         MVCP  JOBMAX(R3),$MAXJOBS,R0        GET MAX JOBS ON SPOOL.
         LA    R0,16                         =
         LA    R3,4                          =
         MVCP  JOEMAX(R3),$NUMJOES,R0        GET MAX JOES IN SPOOL.
         LA    R0,16                         =
         LA    R3,4                          =
         MVCP  PTRDAS(R3),$DASAREA,R0        GET PTR TO VOLUMES DATA
         LA    R0,16                         =
         LA    R3,44                         =
         MVCP  WDSNSP(R3),$DSNSPOL,R0        GET SYS1.HASPACE NAME
         LA    R0,16                         =
         LA    R3,2                          =
         MVCP  WSPNUM(R3),$SPOLNUM,R0        GET SPOOL VOLUMES NUMBER
         LA    R0,16                         =
         LA    R3,2                          =
         MVCP  WBUFFS(R3),$BUFSIZE,R0        GET BLKSIZE SYS1.HASPACE
         LH    R1,LENJQE                     GET JQE LENGTH
         LH    R15,JOBMAX                    GET JOBMAX
         LA    R15,1(R15)                    ADD ONE
         MR    R0,R15                        CALC. BUFFER SIZE
         ST    R1,BUFJQE                     SAVE IT
         DROP  R2                            END OF JES2 DATA ACCESS.
         BAL   R14,RSETXM                    RESET X-MEM
         L     R14,GETMEMS                   LOAD RETURN ADD.
         BR    R14                           RETURN
*----------------------------------------------------------------------
* SETXM
* SET CROSS MEMORY ENV.
*----------------------------------------------------------------------
SETXM    EQU   *
         ST    R14,SETXMS                    SAVE RETURN ADD.
         BAL   R14,SETSUP                    SET SUP. STATE
         STAX  DEFER=YES                     PRESERVE ATTENTION KEY
         SYSEVENT DONTSWAP                   MAKE UNSWAPPABLE
         STATUS SET,MC,STEP                  EXCLUSIVE TASK
         LA    R1,1                          LOAD NEW AUTH. INDEX
         AXSET AX=(1)                        SET NEW AUTH. INDEX
         ST    R0,OLDAX                      SAVE OLD AUTH. INDEX
         LH    R1,JESASID                    LOAD JES2 ASID.
         SSAR  R1                            SET SPACE SECONDARY JES2.
         L     R14,SETXMS                    LOAD RETURN ADD.
         BR    R14                           RETURN.
*----------------------------------------------------------------------
* RSETXM
* RESET X-MEM.
*----------------------------------------------------------------------
RSETXM   EQU   *
         ST    R14,RSETXMS                   SAVE RETURN ADD.
         LH    R1,USERASID                   GET SAVED USER ASID.
         SSAR  R1                            RESET TO PASN=SASN
         L     R1,OLDAX                      LOAD OLD AUTH INDEX
         AXSET AX=(1)                        SET OLD AUTH INDEX.
         STATUS RESET,MC,STEP                RESET TCB DISPATCHING
         SYSEVENT OKSWAP                     MAKE SWAPPABLE
         STAX  DEFER=NO                      RESET ATTENTION PROCESS
         BAL   R14,SETPROB                   RETURN TO PROB. STATE
         L     R14,RSETXMS                   LOAD RETURN ADD.
         BR    R14                           RETURN
*----------------------------------------------------------------------
* SETSUP
* SET SUPERVISOR/KEY 0 STATUS.
* I USE EXT-SVC 109 SUBCODE 200, REFER TO IGX00200.
*----------------------------------------------------------------------
SETSUP   EQU   *
         ST    R14,SETSUPS                   SAVE RETURN ADDRESS.
         LA    R0,1
         LA    R15,200
         SVC   109
TESTSUP  LTR   R15,R15                       OK ?
         BNZ   ABEND1                        NO, GO TO ABEND
         SPKA  X'00'                         SET PSW KEY 0
         L     R14,SETSUPS                   LOAD RETURN ADD.
         BR    R14                           RETURN
ABEND1   ABEND 001                           NOT AUTHORIZED
*----------------------------------------------------------------------
* SETPROB
* RETURN TO PROBLEM STATE KEY NZERO.
*----------------------------------------------------------------------
SETPROB  EQU   *
         ST    R14,SETPROBS                  SAVE RETURN ADD.
         MODESET MODE=PROB,KEY=NZERO         SET PROB/NZERO
         L     R14,SETPROBS                  LOAD RETURN ADD.
         BR    R14                           RETURN
*----------------------------------------------------------------------
* SOME CONSTANTS DATA
*----------------------------------------------------------------------
WRKDCB   DCB   DDNAME=XXX,BLKSIZE=4008,DSORG=DA,MACRF=(RIC),OPTCD=A,   X
               RECFM=F                       DCB MODEL
WRKDCBL  EQU   *-WRKDCB                      DCB LENGTH
TRANSCL  DC    256X'00'                      TRANS. TABLE FOR CLASES.
         ORG   TRANSCL+C'A'
         DC    AL1(0,1,2,3,4,5,6,7,8)
         ORG   TRANSCL+C'J'
         DC    AL1(9,10,11,12,13,14,15,16,17)
         ORG   TRANSCL+C'S'
         DC    AL1(18,19,20,21,22,23,24,25)
         ORG   TRANSCL+C'0'
         DC    AL1(26,27,28,29,30,31,32,33,34,35)
         ORG
*----------------------------------------------------------------------
* WORK AREA
*----------------------------------------------------------------------
DYNAREA  DSECT
SAVER    DS    18F
* PROCEDURES SAVES R14
GETMEMS  DS    F
SETSUPS  DS    F
SETPROBS DS    F
SETXMS   DS    F
RSETXMS  DS    F
READJQES DS    F
ALLSPCS  DS    F
UNLSPCS  DS    F
READJDSS DS    F
READJCTS DS    F
READDSRS DS    F
READJOES DS    F
OPSPLS   DS    F
CLSPLS   DS    F
SPREADS  DS    F
COPYPDDS DS    F
* WORK
WMTTR    DS    F
WSR03    DS    F
WCHECK   DS    F
WLENS    DS    F
WLENA    DS    F
WJDSS    DS    F
WJCTA    DS    F
WJCTS    DS    F
WJCTE    DS    E
WSR08    DS    F
WJDSA    DS    F
WJDSE    DS    F
WSPIOT   DS    F
WGAT     DS    F
WDSKEY   DS    F
WBUFFA   DS    F
PTRHCT   DS    F
PTRJQE   DS    F
PTRJOT   DS    F
ENDJQE   DS    F
BUFJQE   DS    F
PTRDAS   DS    F
OLDAX    DS    F
SAVEKEY  DS    F
WSPPTRS  DS    F
WSPPTL   DS    F
NJOE     DS    F
JESASID  DS    H
USERASID DS    H
LENJQE   DS    H
JOBMAX   DS    H
JOEMAX   DS    F
WSPNUM   DS    H
WBUFFS   DS    H
WOUTGNAM DS    CL8
WDDN     DS    CL8
WVOLDAS  DS    CL6
WDSNSP   DS    CL44
WDASFLG  DS    X
OPT      DS    C
STATUS   DS    X
HEXFF    EQU   X'FF'
ISSPOPEN EQU   X'80'
* OPEN
OPENL    OPEN  (,),MF=L
CLOSL    CLOSE (,),MF=L
* DYNALLOC
DAS99PTR DS    F
DAS99RB  DS    XL(RBLEN)
RBLEN    EQU   S99RBEND-S99RB
DATP1    DS    F
DATP2    DS    F
DATP3    DS    F
DATP4    DS    F
DATP5    DS    F
DATUDSN  DS    H,H,H
DATUDSND DS    CL44
DATUDIS  DS    H,H,H
DATUDISD DS    X
DATUVOL  DS    H,H,H
DATUVOLD DS    CL6
DATUDDN  DS    H,H,H
DATUDDND DS    CL8
DATUUNI  DS    H,H,H
DATUUNID DS    CL8
*
LDATA    EQU   *-DYNAREA
*----------------------------------------------------------------------
* PARM MAPPING
*----------------------------------------------------------------------
PARM     DSECT
         ISFPSAMP
*----------------------------------------------------------------------
* WSP  AREA
* THIS DSECT MAP A WORK AREA THAT CONTAINS ONE RECORD FOR EACH SPOOL
* VOLUME
*----------------------------------------------------------------------
WSP      DSECT
WSPCHHR  DS    D                             CCHHR TO BE READ
WSPDDN   DS    CL8                           DDNAME
WSPTRK   DS    F                             TRK/CYL
WSPDAS   DS    CL6                           VOLSER
WSPVAL   DS    C                             VALID?
WSPDCB   DCB   DDNAME=XXX,BLKSIZE=4008,DSORG=DA,MACRF=(RIC),OPTCD=A,   X
               RECFM=F                       DCB
WSPDECB  READ  WSPDECBI,DI,MF=L              DECB
WSPALGN  DS    0F                            ALIGN.
WSPL     EQU   *-WSP                         LENGTH
*----------------------------------------------------------------------
* VERSI MACRO
* THIS MACRO IS INCLUDED BECAUSE IT'S REFERENCED BY OTHERS.
* BUT IT IS NOT USED.
*----------------------------------------------------------------------
* VERSI MACRO
         MACRO
&NAME    VERSI
         GBLC  &VERSION,&UVERS,&MACSPLV
&VERSION SETC    'XXX'
&UVERS   SETC    'XXX'
&MACSPLV SETC    'XXX'
         MEND
*----------------------------------------------------------------------
* MVS & JES2 USED MAPS.
*----------------------------------------------------------------------
         VERSI
         IHAPSA   DSECT=YES                  PSA
         CVT      DSECT=YES                  CVT
         IEFJESCT                            JESCT
         IEFJSCVT                            SCVT
         $HCCT                               HCCT
         $HCT                                HCT
         $JQE                                JQE
         $DAS                                DAS
         $JCT                                JCT
         $IOT                                IOT
         $PDDB                               PDDB
         $LRC                                LRC
         $BUFFER                             BUFFER
         $JOT                                JOT
         $JOE                                JOE
         IHAASCB  DSECT=YES                  ASCB
         IEFZB4D0                            DYNALLOC PARM LIST
         IEFZB4D2                            DYNALLOC KEY TABLE
         DCBD     DSORG=PS                   DCB MAP.
         IHADECB  DSECT=YES                  DECB MAP.
*----------------------------------------------------------------------
* OTHER MAPS.
* THESE MAPS ARE INCLUDED BECAUSE THEY ARE REFERENCED BY USED MAPS.
* BUT THEY ARE NOT USED.
*----------------------------------------------------------------------
         PRINT NOGEN
         $HASPEQU
         $SCAT
         $HFAME
         $XECB
         $PCE
         $MIT
         $LMT
         $TAB
         $QSE
         $PSV
         IFGRPL
         IHAPDS   DSECT=YES
PDS2BLEN EQU   PDSS03ND-PDS2
         END   ISFPSAMR
