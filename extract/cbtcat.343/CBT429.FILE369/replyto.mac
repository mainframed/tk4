PRC      TITLE 'REPLYTO - RESPOND TO AN OUTSTANDING WTOR.'
********************************************************************
*                                                                  *
* NAME - REPLYTO.   LINK WITH AMODE=31, RMODE=24, AND AC=1         *
*                                                                  *
* DESCRIPTION -                                                    *
*                                                                  *
*   THIS PROGRAM WILL ISSUE A CANNED REPLY TO A SELECTED WTOR      *
*   MESSAGE, THEREBY HELPING TO AUTOMATE OPERATIONS A BIT MORE.    *
*   IT ACCEPTS AS INPUT THE WTOR MESSAGE TEXT, THE CANNED REPLY    *
*   MESSAGE TEXT, AND OPTIONALLY THE JOBNAME OF THE WTOR ISSUER,   *
*   ALONG WITH OTHER MISC. OPTIONS, AS DESCRIBED BELOW.            *
*                                                                  *
*   FOR EXAMPLE, THE FOLLOWING JOB STEP                            *
*     //S1 EXEC PGM=REPLYTO,                                       *
*     // PARM='J=ADA8×M=ADA040A×R=OK'                              *
*     //STEPLIB DD  DSN=YOUR.APF.STEPLIB,DISP=SHR                  *
*   WILL REPLY "OK" TO A WTOR MESSAGE BEGINNING "ADA040A" THAT     *
*   IS ISSUED BY JOB ADA8.                                         *
*                                                                  *
* TO USE -                                                         *
*                                                                  *
*   EXEC PGM=REPLYTO,PARM='MSG=MMMMMMMM...×                        *
*                          REPLY=RRRRRRRR...×                      *
*                          ABEND=YES/NO×                           *
*                          COLUMN=99×                              *
*                          ERRMSG=YES/NO×                          *L02
*                          JOB=JJJJJJJJ×                           *
*                          TIME=999×                               *
*                          WAIT=YES/NO'                            *
*                                                                  *
*           M(SG)    = THE WTOR MESSAGE TEXT TO BE REPLIED TO:     *
*                      MMMMMMMM... = TEXT (1-72 CHARS).            *
*           R(EPLY)  = THE REPLY MESSAGE TEXT:                     *
*                      RRRRRRRR... = TEXT (1-72 CHARS).            *
*           A(BEND)  = DO WE ABEND IMMEDIATELY IF WTOR TEXT ISN'T  *
*                      LOCATED?                                    *
*                      Y(ES): ABEND WITH U123.                     *
*                      N(O):  DON'T ABEND, RETURN CC=4 (DEFAULT).  *L02
*           C(OLUMN) = BEGINNING COLUMN OF WTOR MESSAGE TEXT TO    *
*                      BEGIN COMPARE (LIKE A SUBSTRING):           *
*                      NN = 1-72 (DEFAULT=1).                      *
*           E(RRMSG) = DO WE PUT OUT AN ERROR MESSAGE WHEN WTOR    *L02
*                      MESSAGE TEXT ISN'T FOUND?                   *L02
*                      Y(ES): PUT OUT ERROR MESSAGE (DEFAULT).     *L02
*                      N(O):  DON'T PUT OUT ERROR MESSAGE.         *L02
*           J(OB)    = TEST FOR THIS JOBNAME ISSUING THE WTOR:     *
*                      JJJJJJJJ = JOBNAME (1-8 CHARS).             *
*                      NOTE: A MASK IS ALLOWED - JOB=ABC*.         *
*           T(IME)   = FOR ACTION=WAIT, ELAPSED SECONDS TO WAIT    *
*                      BEFORE GIVING UP SEARCH:                    *
*                      NNNN = 1-9999 (DEFAULT=30).                 *
*                      NOTE: ROUNDED UP TO NEXT 5 SECOND INTERVAL. *
*           W(AIT)   = DO WE RETRY (STIMER WAIT AND LOOP) IF WE    *
*                      DON'T FIND WTOR TEXT?                       *
*                      Y(ES): WE WAIT (A TOTAL OF TIME= SECONDS).  *
*                      N(O):  WE DON'T WAIT (DEFAULT). WE WILL     *
*                             EITHER ABEND OR RETURN, CC=12.(DEF). *
*                                                                  *
*     NOTE: MSG= AND REPLY= ARE REQUIRED. PLEASE NOTE THAT "×"     *
*           IS OUR PARAMETER DELIMITER RATHER THAN ",".            *
*     NOTE: THIS MODULE MUST RUN APF AUTHORIZED.                   *
*                                                                  *
* LOG -                                                            *
*   04/01/87 L01 PTW IMPLEMENTED                                   *L01
*   11/10/87 L02 PTW ADD ERRMSG= PARM, RC=4 WHEN ABEND=NO.         *L02
*   08/13/98 L03 EKB REPLYIDS > 99 (TESTED AT OS/390 1.3)        . *L03
*                    (FROM ALAN FIELD AT SUPER VALUE)            . *L03
*                                                                  *
********************************************************************
         LCLC  &CSECT
&CSECT   SETC  'REPLYTO'
&CSECT   CSECT ,
&CSECT   AMODE 31                                                   L03
&CSECT   RMODE 24                                                   L03
********************************************************************
*                                                                  *
*        I N I T I A L I Z E                                       *
*                                                                  *
********************************************************************
         PRINT NOGEN
         SAVE  (14,12),,&CSECT-&SYSDATE-&SYSTIME
         LR    R12,R15            ESTABLISH BASE.
         USING &CSECT,R12         TELL ASSEMBLER.
         GETMAIN RU,LV=DYNLEN     GET DYNAMIC AREA.
         LR    R2,R13             SAVE AREA
         LR    R13,R1             SAVE AREA
         USING DYNAMIC,R13        TELL ASSEMBLER.
         LA    R0,DYNAMIC         ZERO
         L     R1,=A(DYNLEN)        DYNAMIC
         LR    R14,R0                 STORAGE.
         SLR   R15,R15
         MVCL  R0,R14              DO IT.
         ST    R2,4(,R13)         BACK CHAIN.
         ST    R13,8(,R2)         FORWARD CHAIN.
         XC    RC,RC              ASSUME GOOD RC.
         MVI   WTOFLG,0           RESET WTOFLG.
         MVC   OURJOB,=CL8' '
         L     R2,PSAAOLD-PSA     FIND OUR JOBNAME FROM ASCB.
         USING ASCB,R2
         L     R3,ASCBJBNI        NAME IS HERE IF WE'RE A JOB.
         LTR   R3,R3
         BNZ   *+8
         L     R3,ASCBJBNS        NAME IS HERE IF AN STC OR TSU.
         MVC   OURJOB,0(R3)
         MVI   TSO,NO             ASSUME WE'RE NOT TSO.
         L     R3,ASCBTSB         FIND OUT IF WE'RE TSO.
         LTR   R3,R3
         BZ    *+8
         MVI   TSO,YES            WE ARE TSO - WE'LL DO TPUTS.
         DROP  R2
********************************************************************
*                                                                  *
*        P A R M   P R O C E S S I N G                             *
*                                                                  *
********************************************************************
         MVI   PARM,0             INIT FLAGS.
         MVI   MASK,0
         MVI   ABEND,NO           ABEND=NO IS DEFAULT.
         MVC   COLUMN,=H'1'       COLUMN=1 IS DEFAULT.
         MVI   ERRMSG,YES         ERRMSG=YES IS DEFAULT.            L02
         MVC   JOB,=CL8' '
         MVC   MSG,C' '
         MVC   MSG+1(L'MSG-1),MSG
         MVC   REPLY,C' '
         MVC   REPLY+1(L'REPLY-1),REPLY
         MVC   TIME,=F'30'        TIME=30 IS DEFAULT.
         MVI   WAIT,NO            WAIT=NO IS DEFAULT.
DOPARM   DS    0H
         L     R2,4(,R13)         DIG BACK THRU SAVEAREAS
         L     R2,24(,R2)           FOR THE A(PARM).
         L     R2,0(,R2)          R2 = A(PARM).
         LH    R3,0(,R2)          R3 = L'PARM.
         LTR   R3,R3              IF ZEROS +
         BZ    BADPARM              THEN EXIT.
         LA    R2,2(,R2)          R2 = A(START OF TEXT).
         LA    R3,0(R3,R2)        R3 = A(END OF TEXT).
         ST    R3,SAVE
         LR    R3,R2
TRYSTOPR DS    0H                 SCAN FOR THE '×'.
         CLI   0(R3),C'×'         IF A '×',
         BE    GOTSTOPR             THEN EXIT.
         LA    R3,1(,R3)          ELSE, LOOP.
         CL    R3,SAVE            IF STILL MORE TO GO,
         BL    TRYSTOPR             KEEP SCANNING.
GOTSTOPR DS    0H
         LR    R4,R3
         SR    R4,R2              R4 = L'KEYWORD +L'VALUE.
         L     R11,=A(KWORDTAB)    DO A TABLE LOOKUP ON THE
         USING KTABLE,R11
TRYKWORD DS    0H
         CLI   KTABKEY,X'FF'
         BE    BADPARM
         SLR   R5,R5
         IC    R5,KTABKEYL        CHECK THAT THE LENGTH IS FEASIBLE.
         CLR   R4,R5
         BNH   NXTKWORD
         BCTR  R5,0
         EX    R5,CLCKWORD        DO THE COMPARE.
         BE    GOTKWORD
NXTKWORD DS    0H
         LA    R11,KTABLEN(,R11)    IF NOT EQUAL, BUMP TO NEXT ENTRY.
         B     TRYKWORD
CLCKWORD CLC   KTABKEY(*-*),0(R2)
NXTPARM  DS    0H
         CL    R3,SAVE            CHECK FOR ANY MORE PARM FIELD.
         BNL   DOCHECK
         LA    R2,1(,R3)          IF YES, POSITION CURSOR.
         LR    R3,R2
         B     TRYSTOPR
GOTKWORD DS    0H
         XC    VALUELEN,VALUELEN  INITIALIZE WORKAREAS.
         MVI   VALUE,C' '
         MVC   VALUE+1(L'VALUE-1),VALUE
         MVI   VALUEFLG,0
         SLR   R4,R4
         IC    R4,KTABKEYL
         LA    R2,0(R4,R2)        BUMP CURSOR PAST KEYWORD.
         LR    R4,R3              CALCULATE LENGTH OF VALUE.
         SR    R4,R2
         BNP   BADPARM
         STH   R4,VALUELEN        SAVE L'VALUE.
         BCTR  R4,0
         EX    R4,MVCVALUE        AND VALUE.
         CLI   KTABTYPE,KEY       IF TYPE IS KEY, PROCESS.
         BE    DOKEY
         CLI   KTABTYPE,NUM       IF TYPE IS NUM, PROCESS.
         BE    DONUM
         CLI   KTABTYPE,FLG       IF TYPE IS FLG, PROCESS.
         BE    DOFLG
DOCHR    DS    0H                 ASSUME TYPE IS CHR.
         CLC   KTABMINW,VALUELEN+1  CHECK FOR MINIMUM WIDTH.
         BH    BADPARM
         CLC   KTABMAXW,VALUELEN+1  CHECK FOR MINIMUM WIDTH.
         BL    BADPARM
DOROUT   DS    0H
         L     R14,KTABROUT        GO TO THE PROPER ROUTINE.
         BR    R14
         DROP  R11
MVCVALUE MVC   VALUE(*-*),0(R2)
DOKEY    DS    0H                 TYPE IS KEY.
         USING KTABLE,R11
         L     R11,KTABVTAB       R11 = A(VALUE TABLE).
         DROP  R11
         L     R14,0(,11)         R14 = A(ROUTINE).
         LA    R11,4(,R11)        R11 = A(VALUES).
         USING VTABLE,R11
VALLOOP  DS    0H                 DO TABLE LOOKUP.
         CLI   VTABKEY,X'FF'      IF AT END, UNKNOWN VALUE.
         BE    BADPARM
         CLC   VTABKEYL,VALUELEN+1 LENGTHS MUST MATCH.
         BNE   NXTVALUE
         LH    R4,VALUELEN
         BCTR  R4,0
         EX    R4,CLCVALUE        DO COMPARE.
         BE    GOTVALUE
NXTVALUE DS    0H
         LA    R11,VTABLEN(,R11)  BUMP TO NEXT ENTRY.
         B     VALLOOP
GOTVALUE DS    0H
         MVC   VALUEFLG,VTABVAL   GOT HIT: MOVE VALUE FLAG.
         BR    R14
CLCVALUE CLC   VTABKEY(*-*),0(R2)
         DROP  R11
DONUM    DS    0H                 TYPE IS NUM.
         LA    R4,VALUE
         LH    R5,VALUELEN
NUMLOOP  DS    0H                 VERIFY NUMERIC.
         CLI   0(R4),C'0'            SCAN
         BL    BADPARM              FORWARD
         CLI   0(R4),C'9'            SCAN
         BH    BADPARM              FORWARD
         LA    R4,1(,R4)              TO FIRST
         BCT   R5,NUMLOOP
         B     DOROUT             GO TO ROUTINE.
DOFLG    DS    0H                 TYPE IS KEY.
         USING KTABLE,R11
         L     R14,KTABROUT       R14 = A(ROUTINE).
         DROP  R11
         L     R11,=A(FLGTAB)     R11 = A(VALUE TABLE).
         USING VTABLE,R11
FLGLOOP  DS    0H
         CLI   VTABKEY,X'FF'      IF AT END, BAD PARM.
         BE    BADPARM
         CLC   VTABKEYL,VALUELEN+1 CHECK LENGTHS.
         BNE   NXTFLVAL
         LH    R4,VALUELEN
         BCTR  R4,0
         EX    R4,CLCVALUE        COMPARE VALUES.
         BE    GOTFLG
NXTFLVAL DS    0H
         LA    R11,VTABLEN(,R11)  BUMP TO NEXT ENTRY.
         B     FLGLOOP
GOTFLG   DS    0H
         MVC   VALUEFLG,VTABVAL   GOT HIT: MOVE IN FLAG VALUE.
         BR    R14
DOABEND  DS    0H                 THE ABEND= ROUTINE.
         TM    PARM,GOTABEND      ALLOW ONLY ONE SPECIFICATION.
         BO    BADPARM
         MVC   ABEND,VALUEFLG
         OI    PARM,GOTABEND      INDICATE WE HAVE A VALUE.
         B     NXTPARM
DOCOL    DS    0H                 THE COLUMN= ROUTINE.
         TM    PARM,GOTCOL        ALLOW ONLY ONE SPECIFICATION.
         BO    BADPARM
         LH    R4,VALUELEN
         BCTR  R4,0               MACHINE LENGTH.
         EX    R4,PACKNUM         PACK SECONDS.
         CVB   R5,DOUBLE          CONVERT TO BINARY.
         CH    R5,=H'1'           TEST SECONDS
         BL    BADPARM             FOR LIMITS.
         CH    R5,=H'72'
         BH    BADPARM
         OI    PARM,GOTCOL        INDICATE WE HAVE A VALUE.
         STH   R5,COLUMN           AND STORE.
         B     NXTPARM
PACKNUM  PACK  DOUBLE,VALUE(*-*)
DOERRMSG DS    0H                 THE ERRMSG= ROUTINE.              L02
         TM    PARM,GOTERRMS      ALLOW ONLY ONE SPECIFICATION.     L02
         BO    BADPARM                                              L02
         MVC   ERRMSG,VALUEFLG                                      L02
         OI    PARM,GOTERRMS      INDICATE WE HAVE A VALUE.         L02
         B     NXTPARM                                              L02
DOJOB    DS    0H                 THE JOB= ROUTINE.
         TM    PARM,GOTJOB        ALLOW ONLY ONE SPECIFICATION.
         BO    BADPARM
         MVC   JOBLEN,VALUELEN    MOVE VALUE.
         MVC   JOB,VALUE
         OI    PARM,GOTJOB        INDICATE WE HAVE A VALUE.
         LH    R4,JOBLEN          CHECK FOR A MASK.
         LA    R5,JOB-1(R4)
         CLI   0(R5),C'*'
         BNE   NOJOBMSK
         BCTR  R4,0
         STH   R4,JOBLEN          GOT MASK: INDICATE THUSLY.
         OI    MASK,GOTJOB
NOJOBMSK DS    0H
         B     NXTPARM
DOMSG    DS    0H                 THE MSG= ROUTINE.
         TM    PARM,GOTMSG        ALLOW ONLY ONE SPECIFICATION.
         BO    BADPARM
         MVC   MSGLEN,VALUELEN    MOVE VALUE.
         MVC   MSG,VALUE          MOVE VALUE.
         OI    PARM,GOTMSG        INDICATE WE HAVE A VALUE.
         B     NXTPARM
DOREPLY  DS    0H                 THE REPLY= ROUTINE.
         TM    PARM,GOTREPLY        ALLOW ONLY ONE SPECIFICATION.
         BO    BADPARM
         MVC   REPLYLEN,VALUELEN    MOVE VALUE.
         MVC   REPLY,VALUE          MOVE VALUE.
         OI    PARM,GOTREPLY      INDICATE WE HAVE A VALUE.
         B     NXTPARM
DOTIME   DS    0H                 THE TIME= ROUTINE.
         TM    PARM,GOTTIME       ALLOW ONLY ONE SPECIFICATION.
         BO    BADPARM
         LH    R4,VALUELEN
         BCTR  R4,0               MACHINE LENGTH.
         EX    R4,PACKNUM         PACK SECONDS.
         CVB   R5,DOUBLE          CONVERT TO BINARY.
         CH    R5,=H'1'           TEST SECONDS
         BL    BADPARM             FOR LIMITS.
         CH    R5,=H'999'
         BH    BADPARM
         OI    PARM,GOTTIME       INDICATE WE HAVE A VALUE.
         ST    R5,TIME             AND STORE.
         B     NXTPARM
DOWAIT   DS    0H                 THE WAIT= ROUTINE.
         TM    PARM,GOTWAIT       ALLOW ONLY ONE SPECIFICATION.
         BO    BADPARM
         MVC   WAIT,VALUEFLG
         OI    PARM,GOTWAIT       INDICATE WE HAVE A VALUE.
         B     NXTPARM
DOCHECK  DS    0H                 CONSISTENCY CHECKING.
         TM    PARM,GOTMSG+GOTREPLY MSG AND REPLY ARE REQUIRED.
         BNO   BADPARM
ENDPARM  DS    0H
         MVC   TIMELIM,TIME       INIT ELAPSED TIME COUNTER.
         DROP  R11
********************************************************************
*                                                                  *
*        M A I N L I N E                                           *
*                                                                  *
********************************************************************
* HERE WE SEARCH FOR THE WTOR MESSAGE TEXT. THE WQE'S ARE IN THE
* CONSOLE ADDRESS SPACE PRIVATE MEMORY, SO WE MUST USE XMEM SERVICES.
DOSCAN   DS    0H
         L     R2,CVTPTR
         L     R2,CVTCUCB-CVT(,R2) R2 = A(UCM).
         USING UCM,R2
         LH    R3,UCMCTID         CONSOLE ADDRESS SPACE
         STH   R3,CONSASID        PUT AWAY
         LR    R3,R2
         SH    R3,=H'4'
         L     R3,0(,R3)          R3 = A(UCM PREFIX).
         USING UCMPRFX,R3
         L     R4,UCMMCENT        R4 = A(MCON UCMENTRY).
         USING UCMLIST,R4
         SLR   R5,R5
         IC    R5,UCMID           R5 = MCON ID.
         STH   R5,MCONSID         SAVE.
         DROP  R3,R4
         MODESET MODE=SUP,KEY=ZERO
         ESAR  R3 ,
         STH   R3,SASID           SAVE CURRENT SECONDARY ASID.
         AXSET AX==H'1'
         LA    R7,30              LOOP VALUE.
         L     R3,UCMRPYQ         R3 = A(1ST ORE).
         USING OREF,R3
ORELOOP  DS    0H
         LA    R3,0(,R3)
         LTR   R3,R3              IF R3 = 0, EXHAUSTED CHAIN.
         BZ    NOREPLY
         L     R4,ORERWQE         R4 = A(ASSOCIATED WQE).
         LH    R5,CONSASID        GET 'CONSOLE' ASID
         SSAR  R5 ,               SET CONSOLE AS SECONDARY
         LA    R5,L'MYWQE
         SR    R15,R15            'FROM' KEY
         MVCP  MYWQE(R5),0(R4),R15
         LH    R5,SASID           RESTORE PREVIOUS SECONDARY -
         SSAR  R5 ,               SHOULD BE SAME AS PRIMARY
         LA    R4,MYWQE           R4 = A(COPY OF WQE).
         USING WQE,R4
         LH    R6,COLUMN          SET COLUMN= POINTER FOR COMPARE.
         BCTR  R6,0
         LA    R5,WQETXT+4(R6)
         AH    R6,MSGLEN
         C     R6,WQENBR
         BH    NEXTORE            MAKE SURE LENGTHS ARE FEASABLE.
         LH    R6,MSGLEN
         BCTR  R6,0
         EX    R6,CLCMSG          DO COMPARE.
         BNE   NEXTORE
         TM    PARM,GOTJOB        CHECK FOR MATCHING JOB= .
         BZ    DOREP
         MVC   WTORJOB,=CL8' '
         LOCASCB ASID=OREASID     GET ASCB OF WTOR ISSUER.
         LTR   R1,R1
         USING ASCB,R1
         BNP   BADASID
         L     R5,ASCBJBNI        GET JOBNAME OF WTOR ISSUER.
         LTR   R5,R5
         BNZ   *+8
         L     R5,ASCBJBNS
         MVC   WTORJOB,0(R5)
         DROP  R1
BADASID  DS    0H
         LA    R5,L'WTORJOB-1     DEFAULT LENGTH.
         TM    MASK,GOTJOB        IF MASK, DO COMPARE AS IS.
         BZ    *+10
         LH    R5,JOBLEN          ELSE USE JOB= LENGTH.
         BCTR  R5,0
         EX    R5,CLCJOB          DO COMPARE.
         BE    DOREP              OKEYDOKE, EXIT.
NEXTORE  DS    0H
         L     R3,ORELKP          NEXT ORE.
         BCT   R7,ORELOOP         LOOP.
NOREPLY  DS    0H
         AXSET AX==H'0'           RESET AUTHORIZATION.
         MODESET KEY=NZERO,MODE=PROB
         CLI   WAIT,YES           NO HIT, DO WE WAIT.
         BNE   BADREPLY           NOPE, EXIT.
         STIMER WAIT,BINTVL==F'1000' WAIT FOR 5 SECONDS.
         L     R2,TIMELIM         SUBTRACT 5 SECONDS.
         SH    R2,=H'10'
         BNP   BADREPLY           CHECK WAIT LIMIT.
         ST    R2,TIMELIM
         B     DOSCAN
CLCMSG   CLC   MSG(*-*),0(R5)
CLCJOB   CLC   JOB(*-*),WTORJOB
********************************************************************
*                                                                  *
*        I S S U E   R E P L Y   C O M M A N D                     *
*                                                                  *
********************************************************************
DOREP    DS    0H
         AXSET AX==H'0'             RESET AUTHORIZATION.
         MVC   REPLYID(4),=C'    '                                  L03
         MVC   REPLYID+2(2),OREID   FORMAT "99" OF R 99,            L03
         CLC   OREID(2),=X'0000'    IS REPLY > 99?                  L03
         BNE   DOREP1               NO - WE'RE SET TO REPLY         L03
         L     R2,ORERPIDB          GET BINARY REPLY ID             L03
         CVD   R2,DOUBLE            MAKE IT DECIMAL                 L03
         MVC   REPLYID(4),=X'40202021'                              L03
         ED    REPLYID(4),DOUBLE+6                                  L03
DOREP1   EQU   *                                                    L03
         MODESET KEY=NZERO,MODE=PROB
         MVI   MGCRLGTH,L'REPLY     MOVE IN REPLY TEXT.
         MVC   COMMAND(2),=CL2'R '                                  L03
         MVI   REPLYID+4,C',' L03
         MODESET KEY=ZERO,MODE=SUP
         LH    R0,MCONSID           R0 = MCONS ID.
         MGCR  MGCRPL               SVC 34.
         LR    R5,R15               SAVE RC.
         MODESET KEY=NZERO,MODE=PROB
         LTR   R5,R5                CHECK SVC 34 RC.
         BNZ   BADSVC34
         B     GOODREP
         DROP  R2,R3,R4
********************************************************************
*                                                                  *
*        R E T U R N                                               *
*                                                                  *
********************************************************************
RETURN   DS    0H
         L     R2,RC                  R2 = RC.
         LR    R1,R13              PREPARE
         L     R13,4(,R13)         FOR FREEMAIN.
         FREEMAIN RU,LV=DYNLEN,A=(1)
         LR    R15,R2              AND RETURN
         RETURN (14,12),RC=(15)      WITH R15 = RC.
DIE      DS    0H
         ABEND 123
********************************************************************
*                                                                  *
*        M E S S A G E S                                           *
*                                                                  *
********************************************************************
BADPARM  DS    0H                 FORMAT THE BAD PARM MESSAGE.
         MVC   RC,=F'12'
         LA    R2,MSGPARM
         LA    R3,L'MSGPARM
         LA    R4,BADEND
         B     DOMESSAG
BADREPLY DS    0H                 FORMAT THE BAD REPLY MESSAGE.
         MVC   RC,=F'4'
         CLI   ERRMSG,YES                                           L02
         BNE   BADEND                                               L02
         MVI   MSGAREA,C' '
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA
         MVC   MSGAREA(L'MSGREPLY),MSGREPLY
         MVC   MSGJOB,OURJOB      DEFAULT TO TARGET JOBNAME.
         LA    R2,MSGAREA
         LA    R3,L'MSGREPLY
         LA    R4,BADEND
*        OI    WTOFLG,NONROLL    INDICATE NONROLL.
         B     DOMESSAG
BADSVC34 DS    0H                 FORMAT THE BAD SVC34 MESSAGE.
         MVC   RC,=F'12'
         LA    R2,MSGSVC34
         LA    R3,L'MSGSVC34
         LA    R4,BADEND
         B     DOMESSAG
GOODREP  DS    0H                 ISSUE THE GOOD REPLY MESSAGE.
         MVI   MSGAREA,C' '
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA
         MVC   MSGAREA(L'MSGROK),MSGROK
         MVC   MSGJOB,OURJOB
         MVC   MSGCOMM,COMMAND
         LA    R2,MSGAREA
         LA    R3,L'MSGAREA
         LA    R4,RETURN
         OI    WTOFLG,NOTPUT
         B     DOMESSAG
DOMESSAG DS    0H
         CH    R3,=H'80'          MAX LENGTH IS 80 BYTES.
         BL    *+8
         LA    R3,80
         TM    WTOFLG,NOTPUT
         BO    DOWTO
         CLI   TSO,YES            ISSUE TPUT FOR TSO.
         BE    DOTPUT
DOWTO    DS    0H
         MVC   WTO(WTOLEN),XWTO     ELSE DO WTO.
         BCTR  R3,0
         EX    R3,MVCWTO
         TM    WTOFLG,NONROLL
         BZ    *+8
         MVI   WTODESC,X'40'
         WTO   MF=(E,WTO)
         B     ENDMSG
DOTPUT   DS    0H
         MVC   TPUT(TPUTLEN),XTPUT
         TPUT  (R2),(R3),MF=(E,TPUT)
         NI    WTOFLG,255-(NONROLL+NOTPUT)
         B     ENDMSG
ENDMSG   DS    0H
         BR    R4
MVCWTO   MVC   WTOMSG(*-*),0(R2)
BADEND   DS    0H                 BADEND - DO WE ABEND OR CC=4?     L02
         CLI   ABEND,NO
         BE    RETURN
         CLI   ERRMSG,YES                                           L02
         BNE   DIE                                                  L02
         LA    R2,MSGABEND
         LA    R3,L'MSGABEND
         LA    R4,DIE
         B     DOMESSAG
********************************************************************
*                                                                  *
*        S T A T I C   A R E A S.                                  *
*                                                                  *
********************************************************************
XTPUT    TPUT  0,0,EDIT,WAIT,,BREAKIN,MF=L
TPUTLEN  EQU   *-XTPUT
XWTO     WTO   '                                                       X
                                            ',ROUTCDE=11,MF=L
WTOLEN   EQU   *-XWTO
MSGPARM  DC    C'REP010E  THE PARM FIELD IS BAD. PGM IS TERMINATING.'
MSGREPLY DC    C'REP020E          : WTOR NOT FOUND. NO REPLY ISSUED.'
MSGSVC34 DC    C'REP030E  BAD RC FROM SVC34. PGM IS TERMINATING.'
MSGABEND DC    C'REP040I  A U123 ABEND FOLLOWS.'
MSGROK   DC    C'REP050I         :'
         LTORG *
SRCLEVEL DC    C'                                        '
KWORDTAB CSECT ,                  PARAMETER KEYWORD TABLE.
         DC    CL8'A=      ',AL1(2,FLG,0,0),A(DOABEND)
         DC    CL8'ABEND=  ',AL1(6,FLG,0,0),A(DOABEND)
         DC    CL8'C=      ',AL1(2,NUM,1,2),A(DOCOL)
         DC    CL8'COL=    ',AL1(4,NUM,1,2),A(DOCOL)
         DC    CL8'COLUMN= ',AL1(7,NUM,1,2),A(DOCOL)
         DC    CL8'E=      ',AL1(2,FLG,0,0),A(DOERRMSG)             L02
         DC    CL8'ERR=    ',AL1(4,FLG,0,0),A(DOERRMSG)             L02
         DC    CL8'ERRMSG= ',AL1(7,FLG,0,0),A(DOERRMSG)             L02
         DC    CL8'J=      ',AL1(2,CHR,1,8),A(DOJOB)
         DC    CL8'JOB=    ',AL1(4,CHR,1,8),A(DOJOB)
         DC    CL8'M=      ',AL1(2,CHR,1,72),A(DOMSG)
         DC    CL8'MSG=    ',AL1(4,CHR,1,72),A(DOMSG)
         DC    CL8'R=      ',AL1(2,CHR,1,72),A(DOREPLY)
         DC    CL8'REP=    ',AL1(4,CHR,1,72),A(DOREPLY)
         DC    CL8'REPLY=  ',AL1(6,CHR,1,72),A(DOREPLY)
         DC    CL8'T=      ',AL1(2,NUM,1,3),A(DOTIME)
         DC    CL8'TIME=   ',AL1(5,NUM,1,3),A(DOTIME)
         DC    CL8'W=      ',AL1(2,FLG,0,0),A(DOWAIT)
         DC    CL8'WAIT=   ',AL1(5,FLG,0,0),A(DOWAIT)
         DC    X'FF'
KTABLE   DSECT
KTABKEY  DS    CL8
KTABKEYL DS    AL1
KTABTYPE DS    AL1
KEY      EQU   X'01'
CHR      EQU   X'02'
NUM      EQU   X'04'
FLG      EQU   X'08'
KTABMINW DS    AL1
KTABMAXW DS    AL1
KTABROUT DS    A
         ORG   KTABROUT
KTABVTAB DS    A
KTABLEN  EQU   *-KTABLE
FLGTAB   CSECT ,                  FLAG TABLE.
         DC    CL8'YES     ',AL1(3,YES)
         DC    CL8'Y       ',AL1(1,YES)
         DC    CL8'NO      ',AL1(2,NO)
         DC    CL8'N       ',AL1(1,NO)
         DC    X'FF'
VTABLE   DSECT
VTABKEY  DS    CL8
VTABKEYL DS    AL1
VTABVAL  DS    AL1
VTABLEN  EQU   *-VTABLE
********************************************************************
*                                                                  *
*        D Y N A M I C   A R E A S.                                *
*                                                                  *
********************************************************************
DYNAMIC  DSECT
SAVE     DS    18F                     SAVE AREA.
DOUBLE   DS    D                       SAVE AREA.
RC       DS    F                       RETURN CODE.
WTO      DS    0F,CL(WTOLEN)
WTODESC  EQU   *-4,2
WTOMSG   EQU   WTO+4,80
MSGAREA  DS    CL80
MSGJOB   EQU   MSGAREA+9,8
MSGCOMM  EQU   MSGAREA+19,61
TPUT     DS    0F,CL(TPUTLEN)
MCONSID  DS    H
CONSASID DS    H
SASID    DS    H
WTOFLG   DS    X
NONROLL  EQU   X'80'
NOTPUT   EQU   X'40'
TSO      DS    X
NO       EQU   1
YES      EQU   2
OURJOB   DS    CL8
MYWQE    DS    CL(WQESIZE)
WTORJOB  DS    CL8
VALUELEN DS    H
VALUE    DS    CL100
COLUMN   DS    H
TIME     DS    F
TIMELIM  DS    F
MSGLEN   DS    H
MSG      DS    CL72
REPLYLEN DS    H
         IEZMGCR DSECT=NO
         ORG   MGCRTEXT
COMMAND  DS    CL2
REPLYID  DS    CL4,CL1             'NNNN,'                          L03
REPLY    DS    CL72
         ORG
JOBLEN   DS    H
JOB      DS    CL8
VALUEFLG DS    X
PARM     DS    X
GOTABEND EQU   X'01'
GOTCOL   EQU   X'02'
GOTJOB   EQU   X'04'
GOTMSG   EQU   X'08'
GOTREPLY EQU   X'10'
GOTTIME  EQU   X'20'
GOTWAIT  EQU   X'40'
GOTERRMS EQU   X'80'                                                L02
MASK     DS    X
WAIT     DS    X
ABEND    DS    X
ERRMSG   DS    X                                                    L02
DYNLEN   EQU   *-DYNAMIC               LENGTH.
         PRINT OFF
R0       EQU   00
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12                 PROGRAM BASE.
R13      EQU   13                 A(SAVE AREA).
R14      EQU   14
R15      EQU   15
         PRINT ON
         IHAPSA ,                 PSA
         CVT   DSECT=YES
         IHAASCB ,                ASCB
UCM      DSECT ,
         IEECUCM ,
         IHAORE ,
         IHAWQE ,
         END   &CSECT
