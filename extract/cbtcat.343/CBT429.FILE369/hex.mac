*          DATA SET HEX        AT LEVEL 001 AS OF 08/29/77
      TITLE ' BASE 16 ARITHMETIC '
*
*       THE IMPETUS FOR WRITING THIS PROGRAM COMES FROM THOSE
*    FRUSTRATING HOURS SPENT FUMBLING WITH A DUMP ONLY TO DISCOVER
*    THAT MY INABILITY TO FIND A SOLUTION STEMS FROM AN ARITHMETIC
*    ERROR IN THE INITIAL STEPS.
*
*       SYNTAX FOLLOWS THIS FORM:
*       (OPERATOR)  (OPERAND A), (OPERAND B)
*
*       BOTH THE OPERATOR (IMPERATIVE), AND THE OPERANDS ARE
*   OPTIONAL, WITH THE EXCEPTION THAT OPERAND B CANNOT BE SPECIFIED
*   WITHOUT OPERAND A.
*
*       BLANKS OR COMMAS SEPARATE FIELDS. THE ONLY SPECIAL CHARACTER
*   ALLOWED IS THE MINUS(-) IN THE CONVERT TO HEX SUBCOMMAND.
*              HEX  -1
*   THE INPUT IS SCANNED FROM LEFT TO RIGHT. IF THE FIRST FIELD
*   ENCOUNTERED IS A RECOGNISABLE OPERATOR, IT IS TAKEN AS SUCH.
*   OTHERWISE, IT IS ASSUMED TO BE OPERAND A. OPERAND B, IF
*   PRESENT, MUST FOLLOW OPERAND A. EVERYTHING PAST OPERAND B IS
*   IGNORED.
*
*       HEX WILL "REMEMBER" ITS PREVIOUS OPERATION. THUS, IF ANY
*   PARAMETER IS LEFT OUT  OF  AN INPUT, IT WILL BE FILLED IN
*   BY THE PARAMETER FROM THE PREVIOUS OPERATION. THE SAME OPERATION
*   AND THE SAME OPERAND A WILL BE USED. OPERAND B IS THE RESULT
*   JUST DISPLAYED ON YOUR SCREEN. OBVIOUSLY, THE PURPOSE OF THIS
*   IS TO ALLOW "CHAINING" IN THE SENSE IT CAN BE DONE ON A
*   POCKET CALCULATOR WITH THE K= KEY.
*
*       THE ORDER OF OPERATIONS IS AS FOLLOWS:
*
*    (ADD,A)          (OPERAND A)  TO    (OPERAND B)
*    (SUBTR.,SUB,S)   (OPERAND A)  FROM  (OPERAND B)
*    (MULTIPLY,MUL,M) (OPERAND A)  TIMES (OPERAND B)
*    (DIVIDE,DIV,D)   (OPERAND A)  INTO  (OPERAND B)
*    (HEX,X)          (OPERAND A)  OR -(OPERAND A)  CONVERT TO HEX
*    (DEC,P)           OPERAND A                    CONVERT TO DECIMAL
*    (BR)                                           BRANCH TO BRKPT
*    (END,E)                                        END
*
*       ADDITION AND SUBTRACTION ARE STRAIGHTFOREWARD. REMEMBER THAT
*   NEGATIVE NUMBERS APPEAR IN TWO'S COMPLIMENT NOTATION.
*   MULTIPLICATION OUTPUTS A TWO FULLWORD MULTIPLICAND TO THE
*   TERMINAL, BUT ONLY THE SECOND FULLWORD IS "REMEMBERED" AS THE
*   PREVIOUS RESULT. IN DIVISION, THE REMAINDER IS "FORGOTTEN."
*
*       CONVERT TO HEX WILL ACCEPT A MINUS SIGN IN FRONT OF OPERAND A.
*   OPERAND A IS REQUIRED FOR THIS COMMAND. CONVERT TO DECIMAL IS
*   STRAIGHTFOREWARD EXCEPT FOR THE ABBREVIATION, WHICH IS, "P."
*
*       BREAK (BR) IS USED WITH THE TSO TEST COMMAND. PICK UP HEX
*   WITH TEST, AND SET A BREAKPOINT AT "BRKPT". THEN ENTER "GO"
*   TO USE THE HEX PROGAM, AND "BR" TO USE TEST. THIS FACILITATES
*   BROWSING THROUGH THE SYSTEMS' CONTROL BLOCKS.
*
*       EXAMPLES.    (PROGRAM RESPONSES ARE INDENTED FROM COMMANDS).
*
*   HEX                            INVOKE PROGRAM
*     HEX                             PROGAM IS ACTIVE
*   A 1 1                          ADD 1 TO 1
*     00000002                        RESPONSE
*   8                              CHAIN ADD X'8'
*     0000000A                        RESPONSE
*   (HITS ENTER)                   NO OPERANDS AT ALL
*     00000012                        REPEAT OF LAST OPERATION
*
*   S     4                        SUBTRACT 4
*     0000000E                        RESULT IS STILL CHAINED
*   M  12345678 FEDCBA98           BY PROVIDING AN OPERAND B, WE
*     FFEB4992 35068740               REPLACE THE PREVIOUS RESULT OF
*                                     0000000E.
*   ADD 1
*     35068741                     THE DOUBLEWORD RESULT OF THE
*                                     MULTIPLICATION HAS BEEN TRUNCATED
*   DIV 400                        DIVIDING BY X'400' GIVES A RESULT
*     000D41A1  REMAINDER 00000341    THAT IS THE HEX EQUIVALENT OF K.
*
*   DEC                            CONVERT 000D41A1 TO DECIMAL
*              868,769
*
*   END
*    READY
*
*   TEST 'LIBRARY.NAME(HEX)'       PICK UP HEX UNDER TEST
*     TEST                            RESPONSE FROM TEST
*   AT BRKPT                       SET BREAKPOINT
*     TEST                            RESPONSE FROM TEST
*   GO                             ENTER HEX PROGAM
*     HEX                             RESPONSE FROM HEX
*   A 1 1                          USE HEX
*     00000002
*   BR                             GO TO BREAKPOINT, TO INVOKE TEST
*     AT BRKPT
*     TEST                            RESPONSES FROM TEST
*   L 10. X                        USE TEST
*     000010. 0000B680                RESPONSE FROM TEST
*   GO                             GET BACK INTO HEX
*
         EJECT
HEX      PRIME ID=DICK_SZIEDE_CSC_1972
*
         REGS
         EJECT
         GETMAIN R,LV=1024,SP=0
         LR    R11,R1
         USING WORKAREA,R11                SET UP WORK DSECT
*
         XC    WORKAREA(256),WORKAREA        SET TO ZEROA
         MVC   OPCODE,=C'A  '
         BAL   R2,PUTOUT               CLEAR OUTAREA
         MVC   OUTAREA(3),=C'HEX'
         BAL   R2,PUTTER               INITIAL RESPONSE
         EJECT
READCARD LA    R1,INAREA
         O     R1,=X'80000000'                SET TGET BITS
         LA    R0,80                           BUFFER LENGTH
         TGET  (R1),(R0),R
*
         OC    INAREA,OUTAREA              CONVERT TO UPPER CASE
         BAL   R14,SCANIT                  FORMAT INPUT
         BAL   R14,CHOOSIT                    DECIDE ON ROUTINE
         BALR  R14,R15                     DO IT
         BAL   R2,PUTTER                   RETURN OUTPUT
*
         CLI   OPCODE,C'E'             DID WE GIVE UP?
         BNE   READCARD
         B     QUIT
*
PUTTER   LA    R10,3
PUTPUT   LA    R8,OUTAREA
         LR    R1,R8
         LA    R0,80                           BUFFER LENGTH
         TPUT  (R1),(R0),R
*
         LTR   R15,R15
         BZ    PUTOUT
         ST    R15,RESULT
         BAL   R15,RESTOHEX
         BCT   R10,PUTPUT
PUTOUT   MVI   INAREA,C' '
         MVC   INAREA+1(159),INAREA
         BR    R2
*
QUIT     FREEMAIN R,LV=1024,A=(R11)
         TERME RC=0
         EJECT
*
SCANIT   EQU   *
         XC    TABLE1(256),TABLE1
         MVI   TABLE1+193,X'01'
         MVC   TABLE1+194(56),TABLE1+193
*
         XC    TABLE2(256),TABLE2
         MVI   TABLE2+64,C' '
         MVI   TABLE2+107,X'6B'
*
         SR    R3,R3
         LA    R6,INAREA
         LR    R1,R6
         LA    R9,3                    LIMIT LOOP
*
SC1      LA    R7,INAREA+72
         SR    R7,R6                   GET LENGTH FOR TRANSLATE
SC1TR    EX    R7,SC1TRNB              FIND NON-BLANK
         BZ    SC1END                  NOT FOUND
         ST    R1,ARG1+4(R3)        STORE POINTER
         LR    R6,R1                   SAVE POINTER TO FRONT OF FIELD
         LA    R7,INAREA+72
         SR    R7,R6                   GET LENGTH FOR SECOND TRANSLATE
         EX    R7,SC1TRBL              FIND NEXT BL OR COMMA
         BZ    SC1END
         LR    R7,R1
         SR    R7,R6
         ST    R7,ARG1(R3)          STORE LENGTH
         LR    R6,R1
         LA    R3,8(R3)                INCREMENT INDEX
         BCT   R9,SC1
*
SC1END   ST    R3,ARGCT
         B     SC2
*
SC1TRNB  TRT   0(0,R1),TABLE1
SC1TRBL  TRT   0(0,R1),TABLE2
SC2      LTR   R3,R3                   IS ARGCT = 0 ?
         BNZ   SC2A
         ST    R3,FIELDCT              SAVE COUNT OF OPERANDS
         B     SCANEND
SC2A     L     R2,ARG1                 LENGTH OF 1ST OPERAND
         BCTR  R2,0                    DECREMENT LGTH FOR MOVE
         LA    R7,OPTABLEN             LIMIT FOR SEARCH
         LA    R4,OPTABLE
         L     R5,ARG1+4               ADDR OF NOMINAL OPCODE
         LA    R6,4                    INCREMENT
*
SC2B     EX    R2,SC2COMP
         BE    SC2FOUND
         BXLE  R4,R6,SC2B
         MVC   ARG3(8),ARG2               IF THERE IS NO OPCODE ENTERED
         MVC   ARG2(8),ARG1                     AS THE FIRST OPERAND,
*                                                 MAKE
*                                          IT LOOK AS THOUGH THERE IS
*
         B     SCANEND
SC2FOUND MVC   OPCODE(1),0(R4)         INPLANT NEW OPCODE
         SH    R3,=H'8'                REMOVE 1 FROM OPERAND COUNT
         B     SCANEND                 WITH ARGUMENT COUNT DECREMENTED
*
SC2COMP  CLC   0(0,R5),1(R4)
*
SC4      EQU   *
SCANEND  ST     R3,FIELDCT              SAVE OPERAND COUNT
         BR     R14
*
*
         EJECT
CHOOSIT  LA    R2,RTNTABLE
         LA    R7,RTNEND
         LA    R6,4
*
CH1      CLC   0(1,R2),OPCODE
         EJECT
         BE    CH2
         BXLE  R2,R6,CH1
         LA    R15,ENDIT               DEFAULT OPCODE IS END
         BR    R14
CH2      L     R15,0(R2)               CHOSEN ROUTINE
         BR    R14
*
RESTOHEX EQU   *
         LA    R4,2
         LA    R5,OUTAREA+6
         LA    R3,OUTAREA
*
         MVO   CONVERT,RESULT          MOVE FOR LEFT HALF-BYTE
         BAL   R9,RESTCONV
         LA    R3,OUTAREA+1            SET POINTER TO RESULT
         LA    R5,OUTAREA+7
         MVC   CONVERT,RESULT          MOVE FOR RIGHT HALF-BYTE
         BAL   R9,RESTCONV
         BR    R15                     RETURN TO CALLER
*
RESTCONV NC    CONVERT,ZEROLEFT
         TR    CONVERT(4),ONETOF
         LA    R6,CONVERT
RESTMOVE MVC   0(1,R3),0(R6)           INTERLEAVE RESULTS
         LA    R6,1(R6)
         BXLE  R3,R4,RESTMOVE
         BR    R9
*
*******************CONVERT DISPLAY HEX TO INTERNAL BINARY******
*
XTOBIN   MVI   TABLE2,X'01'            FIRST, WE
         MVC   TABLE2+1(256),TABLE2        CHECK FOR VALIDITY
         MVI   TABLE2+193,X'00'
         MVC   TABLE2+194(5),TABLE2+193
         MVI   TABLE2+240,X'00'
         MVC   TABLE2+241(9),TABLE2+240
         LM    R3,R4,0(R3)          GET VICTUMS
         BCTR  R3,0                DECREMENT LGTH FOR EX
         EX    R3,XTOTRT            CHECK FOR INVALID CHAR
         BZ    XTOTRAN
         MVC   OUTAREA(L'VALCK),VALCK
         MVC   OUTAREA+18(1),0(R1)
         LA    R15,4                   INVALID CHARACTER RC
*         BAL   R8,SNAPPER              *****TEMPORARY*****
         BR    R9
*
XTOTRAN  EQU  *
         MVC   TABLE2+193(L'XABCDEF),XABCDEF     SET UP TABLE FOR
         MVC   TABLE2+240(L'X012345),X012345     TABLE
         EX    R3,XTOTR                GET VALUES INTO RIGHT 4 BITS
         EX    R3,XTOPK                SQUEEZE OUT LEFT 4 BITS
         SR    R4,R4
         L     R5,XTOPACK+1            GET IT INTO
         IC    R4,XTOPACK                  REGISTERS
         SRDL  R4,4                    SHIFT OUT UNWABTED HALF-BYTE
         LR    R4,R5
         SR    R15,R15                 GOOD RC
         BR    R9
*
*
XTOTRT   TRT   0(0,R4),TABLE2         VALIDATE INPUT
XTOTR    TR    0(0,R4),TABLE2         MAKE EACH DISPLAY BYTE INTO
*                                        THE HEX IT REPRESENTS
XTOPK    PACK  XTOPACK,0(0,R4)        GET RID OF LEFT HALF-BYTES
*
         EJECT
OPERATIO EQU   *
         CLI   FIELDCT+3,X'00'
         BE    OPEUP
         LA    R3,ARG2
         BAL   R9,XTOBIN               CONVERT 1ST ARGUMENT TO BINARY
         LTR   R15,R15
         BZ    OPERES                  IF BAD RETURN CODE FROM CONVERT
         BR    R14                         PUT OUT ERROR MESSAGE
OPERES   ST    R4,ARGUMENT            REPLACE RESULT
*
OPE1     EQU    *
         CLI   FIELDCT+3,X'10'         IS THERE A FIELD TO REPLACE
         BNE   OPEUP                       RESULT
         LA    R3,ARG3                YUP
         BAL   R9,XTOBIN
         LTR   R15,R15
         BZ    OPE3
         BR    R14
OPE3    ST     R4,RESULT
*
OPEUP    SR   R4,R4                    ZERO HO REG
         LM    R5,R6,RESULT            GET OPERANDS- RESULT NEXT TO
*                                          ZERO REG
         BR    R8                      RETURN TO OPERATION
*
*
ADD      BAL   R8,OPERATIO
         AR    R5,R6
         B     ADDSUB
*
SUBTRACT BAL   R8,OPERATIO
         SR    R5,R6
*
ADDSUB   ST    R5,RESULT
         BAL   R15,RESTOHEX
         BR    R14
*
         EJECT
*
MULTIPLY BAL   R8,OPERATIO
         MR    R4,R6
         ST    R4,RESULT
         LR    R10,R5
         BAL   R15,RESTOHEX
         MVC   OUTAREA+9(8),OUTAREA
         ST    R10,RESULT
         BAL   R15,RESTOHEX
MULXC    XC    OUTAREA(8),OUTAREA+9
         XC    OUTAREA+9(8),OUTAREA
         EX    0,MULXC
*         BAL   R8,SNAPPER
         BR    R14
*
*
DIVIDE   BAL   R8,OPERATIO
         LTR   R6,R6            TEST FOR DIVIDE BY ZERO
         BZ    DIVBY0
         LR    R4,R5
         SRDA  R4,32               SET UP FOR FULLWORD DIVIDE
         DR    R4,R6
         LR    R10,R5                  SAVE R5
         ST    R4,RESULT
         BAL   R15,RESTOHEX
         MVC   OUTAREA+20(8),OUTAREA
         MVC   OUTAREA+10(9),=C'REMAINDER'
         ST    R10,RESULT
         BAL   R15,RESTOHEX
*         BAL   R8,SNAPPER
         BR    R14
*
DIVBY0  MVC   OUTAREA(L'DIVMSG),DIVMSG      SAY "NAUGHTY NAUGHTY"
        BR    R14
         EJECT
*
HEXIDECI EQU   *
         LM    R3,R7,ARGCT             INPUT ARGUMENTS
         LTR   R3,R3                   MUST HAVE SOMETHING
         BZ    HEXERR
         CH    R3,=H'8'                ONE FIELD ?
         BH    HEXMOVE                     NO - TAKE SECOND FIELD
         CLI   0(R5),C'Z'              IS IT A NUMBER OR LETTER ?
         BH    HEX0                        IF A NUMBER, USE IT
         B     HEXERR                      ELSE ASK FOR NUMBER
HEXMOVE  LR    R4,R6
         LR    R5,R7
         B     HEX0
*
HEXERR   EQU   *
         MVC   OUTAREA(29),=C'ENTER DECIMAL NUMBER, PLEASE   '
         BR    R14
*
HEX0     EQU   *
*                                      VALIDATE INPUT
         LR    R7,R5                   SAVE POINTER FROM TRT
         BCTR  R4,0                    DECREMENT LENGTH FOR EXECUTE
         CH    R4,=H'16'               CHECK FOR INVALID LENGTH
         BL    HEX0TAB
         LA    R4,15                   ERROR MEANS DEFAULT TO 16
HEX0TAB  EQU   *
         MVI   TABLE2,X'01'            SET UP
         MVC   TABLE2+1(256),TABLE2        TABLE FOR TRT
         MVI   TABLE2+240,X'00'
         MVC   TABLE2+241(9),TABLE2+240
         EX    R4,HEXTRT               CHECK FOR NON-NUMERIC
         BZ    HEX1                    OK
         MVC   OUTAREA(L'VALCK),VALCK
         MVC   OUTAREA+18(1),0(R1)     REPORT  BAD CHARACTER
         BR    R14
*                                      CONVERT TO BINARY
HEX1     EQU   *                 CONVERT TO BINARY
         EX    R4,HEXPACK              PACKIT
         CP    OPER1,HEXTOP
         BH    HEXLIMIT
         CP    OPER1,HEXBOT
         BL    HEXLIMIT                PREVENT OC9
         CVB   R3,OPER1                CONVERT TO BINARY
*
         BCTR  R5,0                   POINT TO CHAR AHEAD OF ARGUMENT
         CLI   0(R5),C'-'             IS IT A MINUS?
         BNE   HEXST                       NOPE - CONTINUE
         LNR   R3,R3                       YEP  - COMPLIMENTS TO THE
*                                                 OPERAND
HEXST    ST    R3,RESULT
         BAL   R15,RESTOHEX
*         BAL   R8,SNAPPER              *****TEMPORARY****
         BR    R14
*
HEXLIMIT MVC   OUTAREA(L'HEXLIM),HEXLIM ENTER ERROR MSG
         BR    R14
*
*
HEXTRT   TRT   0(0,R7),TABLE2
HEXPACK  PACK  OPER1(8),0(0,R5)
*
*
         EJECT
DECIMAL  EQU   *                       CONVERT HEX TO DECIMAL
         BAL   R8,OPERATIO             SCAN INPUT
         CLI   FIELDCT+3,X'00'         CHECK FOR INPUT
         BE    DEC1                    NO INPUT, WE CONVER
         MVC   RESULT,ARGUMENT
*
DEC1     L     R3,RESULT
         CVD   R3,OPER1
         MVC   OUTAREA(L'DECMASK),DECMASK
         ED    OUTAREA(L'DECMASK),OPER1
         BR    R14
*
ENDIT    B     QUIT
*
*
BRKPT    MVC   OUTAREA(13),=C'PRAY CONTINUE'    THIS IS WHERE
         BR    R14               THE TEST BREAKPOINT IS SET BY XTEST
         EJECT
*
*              CONSTANTS
ENDED    DC    C'ENDED'
OPTABLE  DC    C'AADD'
         DC    C'AA  '
         DC    C'SSUB'
         DC    C'SS  '
         DC    C'MMUL'
         DC    C'MM  '
         DC    C'DDIV'
         DC    C'DD  '
         DC    C'HHEX'
         DC    C'HH  '
         DC    C'HX  '
         DC    C'EE  '
         DC    C'EEND'
         DC    C'PDEC'
         DC    C'PP  '
         DC    C'BB  '
         DC    C'BBR '
         DC    C'BBRK'
OPTABLEN EQU   *-4
*
RTNTABLE DS    0F
         DC    C'A'
         DC    AL3(ADD)
         DC    C'S'
         DC    AL3(SUBTRACT)
         DC    C'M'
         DC    AL3(MULTIPLY)
         DC    C'D'
         DC    AL3(DIVIDE)
         DC    C'H'
         DC    AL3(HEXIDECI)
         DC    C'P'
         DC    AL3(DECIMAL)
         DC    C'E'
         DC    AL3(ENDIT)
         DC    C'B'
         DC    AL3(BRKPT)
RTNEND   EQU   *-4
*
ONETOF   DC    C'0123456789ABCDEF'
ZEROLEFT DC    5X'0F'
XABCDEF  DC    X'0A0B0C0D0E0F'
X012345  DC    X'00010203040506070809'
VALCK    DC    C'INVALID CHARACTER '
DECMASK  DC    X'402020206B2020206B2020206B2020206B20202060'
HEXTOP   DC    P'2147483647'
HEXBOT   DC    P'-2147483648'
HEXLIM   DC    C'FULLWORD LIMITS 2,147,483,647, -2,147,483,648'
DIVMSG   DC    C'YOU CAN''T DIVIDE BY ZERO, SILLY.'
         LTORG
         EJECT
WORKAREA DSECT
         DS    0D
INAREA      DS CL80
OUTAREA  DS    CL80
SAVEBL   DS    F
SAVER14  DS    F
SAVER15  DS    F
FIELDCT  DS    F
OPER1    DS    CL8
OPER2    DS    CL8
OPER3    DS    CL8
OPCODE   DS    CL3
RESULT   DS    F
ARGUMENT DS    F
DADA     DS    D
ARGCT    DS    F
ARG1     DS    2F
ARG2     DS    2F
ARG3     DS    2F
TABLE1   DS    256C
TABLE2   DS    256C
         ORG   TABLE1
CONVERT  DS    CL5
         DS    0F
         DS    3C
XTOPACK  DS    CL5
         END
