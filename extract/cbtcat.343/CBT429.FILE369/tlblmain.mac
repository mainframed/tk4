         TITLE 'TLBLMAIN -- MAIN MODULE FOR TAPE LABEL WRITER'
***********************************************************************
*                                                                     *
* NAME         TLBLMAIN                                               *
*                                                                     *
* COMPONENT    TAPE LABEL WRITER                                      *
*                                                                     *
* FUNCTION     PROCESS REQUESTS TO PRINT EXTERNAL TAPE LABELS         *
*                                                                     *
* ENTRY        JCL EXEC STATEMENT                                     *
*                                                                     *
* PARAMETERS   THE FOLLOWING PARAMETERS MAY BE PASSED THROUGH THE     *
*              EXEC STATEMENT OR INTERNAL EQUIVALENT. THE PARAMETERS  *
*              ARE POSITIONAL. SIGNIFY AN OMITTED PARAMETER WITH      *
*              ','. UNNEEDED PARAMETERS AT THE END OF THE LIST        *
*              NEED NOT BE CODED.                                     *
*                                                                     *
*              PRINTER VTAM LU       - <NAME>                         *
*              START TYPE            - HOT  × WARM  × COLD            *
*              INITIAL PRINTER STATE - STOP × START × VERIFY          *
*              LOGON MODE SET NAME   - <NAME>                         *
*                                                                     *
*              THE DEFAULT STRING IS: ',HOT,VERIFY,DSILGMOD'          *
*                                                                     *
*              THE LU NAME MUST ALWAYS BE SPECIFIED.                  *
*                                                                     *
*              A HOT START WILL PRESERVE THE CONTENTS OF THE          *
*              WORK QUEUE. A WARM START WILL DEQUEUE AND FREEMAIN     *
*              ALL QUEUED WORK. A COLD START ZEROS OUT THE            *
*              WORK QUEUE ANCHORS. COLD START SHOULD ONLY BE USED     *
*              IN THE EVENT OF A PROBLEM WITH THE CHAINING OF QUEUE   *
*              BLOCKS.                                                *
*                                                                     *
* INPUT        QUEUED REQUEST FOR A LABEL                             *
*                                                                     *
*              OPERATOR COMMANDS  - F <NAME>,DQ                       *
*                                 - F <NAME>,PURGE                    *
*                                 - F <NAME>,START                    *
*                                 - F <NAME>,STATE  (S FOR SHORT)     *
*                                 - F <NAME>,STOP                     *
*                                 - F <NAME>,VERIFY (V FOR SHORT)     *
*                                 - P <NAME>                          *
*                                                                     *
* OUTPUT       LABEL PRINTED ON 328X-TYPE PRINTER VIA VTAM            *
*                                                                     *
* RETURN CODES 0                                                      *
*                                                                     *
* FILES        NONE                                                   *
*                                                                     *
* EXT REF      NONE                                                   *
*                                                                     *
* MESSAGES     TAPE LABEL WRITER INITIALIZATION COMPLETE              *
*              PARM LUNAME NOT SPECIFIED                              *
*              PARM START TYPE INVALID - MUST BE HOT, WARM OR COLD    *
*              PARM INITIAL STATE INVALID - MUST BE START,STOP OR VFY *
*              LU NAME=<LU>  START TYPE=<TYPE>  INITIAL STATE=<STATE> *
*              UNABLE TO GET ACTIVE LOCK                              *
*              LU=<LU>  STATE=<STATE>                                 *
*              ERROR OPENING VTAM ACB  R15=<R15>  ACBERFLG=<>         *
*              VTAM RPL REQUEST ERROR  R15=<R15>  RPLREQ=<>           *
*                         RPLRTNCD=<>  RPLFDB2=<> SENSE=<SENSE>       *
*              INVALID OPERATOR COMMAND: <COMMAND>                    *
*              OPERATOR COMMAND COMPLETED: <COMMAND>                  *
*              STOP COMMAND ACCEPTED                                  *
*              <CNT> TAPE LABELS CURRENTLY QUEUED                     *
*              TLBL VTAM <EXIT> EXIT ENTERED -- REASON=<>             *
*                                                                     *
* ABENDS       U1001  -- UNABLE TO LOCATE SSCVT                       *
*                                                                     *
* MACROS       ABEND                                                  *
*              CLOSE                                                  *
*              CLSDEST                                                *
*              DEQ                                                    *
*              ENQ                                                    *
*              EXTRACT                                                *
*              EXLST                                                  *
*              FREEMAIN                                               *
*              GETMAIN                                                *
*              MODESET                                                *
*              OPEN                                                   *
*              OPNDST                                                 *
*              QEDIT                                                  *
*              REGS                                                   *
*              RETURN                                                 *
*              SAVE                                                   *
*              SIMLOGON                                               *
*              SEND                                                   *
*              SPOST                                                  *
*              TIME                                                   *
*              WAIT                                                   *
*              WTO                                                    *
*                                                                     *
* TABLES       ACB        -- IFGACB                                   *
*              ASCB       -- IHAASCB                                  *
*              CIB        -- IEZCIB                                   *
*              COMMD      -- IEZCOM                                   *
*              CVT                                                    *
*              ECB        -- IHAECB                                   *
*              JESCT      -- IEFJESCT                                 *
*              NIB        -- ISTDNIB                                  *
*              RPL        -- IFGRPL                                   *
*              SSCVT      -- IEFJSCVT                                 *
*              TLBLABEL                                               *
*              TLBLCVT                                                *
*              PSA        -- IHAPSA                                   *
*                                                                     *
* OPERATION    ×                                                      *
*                                                                     *
* ATTRIBUTES   NOT REENTRANT                                          *
*              NOT REUSABLE                                           *
*              AMODE 31                                               *
*              RMODE 24                                               *
*              AUTHORIZED                                             *
*              PROBLEM PROGRAM KEY                                    *
*              SUPERVISOR STATE                                       *
*                                                                     *
* RESTRICTIONS THE VTAM RELEASE 2 AVAILABLE AT THIS TIME DOES NOT     *
*              SUPPORT 31 BIT AMODE. THE SUBROUTINES WHICH ISSUE      *
*              VTAM MACROS (OPENPR, CLOSEPR, WRITEPR, RPLERR)         *
*              GO INTO 24 BIT MODE AND RETURN BY USING A BSM.         *
*              BE VERY CAREFUL TO CHECK THE PATHS THROUGH THESE       *
*              ROUTINES IF ANY CHANGES ARE MADE.                      *
*                                                                     *
* NOTES        EXTERNAL LABEL FORMAT                                  *
*                                                                     *
*                      123456789012345678901234567890123              *
*                    1               XXXXXX                           *
*                    2                                                *
*                    3 UNIT XXXX  REEL XXX  DEN XXXX                  *
*                    4 ACF2 USER XXXXXXXX  LABEL XXXX                 *
*                    5 TIME XX.XXX XX:XX:XX  SITE XXXX                *
*                    6 JOB XXXXXXXX(XXXXX) STEP XXXXXXXX              *
*                    7 DSNAME XXXXXXXXXXXXXXXXXXXXXXXXXX              *
*                    8                XXXXXXXXXXXXXXXXXX              *
*                                                                     *
*              ALTHOUGH THERE IS LOGIC IN HERE WHICH REFERENCES       *
*              SUBSYSTEM TABLES, THE TAPE LABEL WRITER IS NOT A       *
*              FORMAL SUBSYSTEM; IT NEVER ACTIVATES A SSVT SO IT      *
*              MAKES NO USE OF SUBSYSTEM REQUEST ROUTING. THE SSCT    *
*              USER FIELD IS USED AS A CONVENIENT ANCHOR FOR CSA      *
*              CONTROL BLOCKS.                                        *
*                                                                     *
*              IT IS BEST IF THE JOB NAME USED FOR THIS PROGRAM       *
*              IS NOT THE SAME AS THE SUBSYSTEM NAME IN THE SSCT      *
*              IF THEY ARE THE SAME, THE MASTER SCHEDULER WILL        *
*              START IT AS A SUBSYSTEM, WHICH MEANS ALL DATASETS      *
*              IN THE JCL MUST EITHER HAVE EXPLICIT UNIT AND VOLUME   *
*              OR BE IN MASTER CATALOG, AND THERE CAN BE NO SYSOUT    *
*              PRODUCED (SYSUDUMP, SYSMSG AND JOBLOG, FOR INSTANCE).  *
*                                                                     *
*              THE LOGIC IS ARRANGED TO GO THROUGH THE MAIN LOOP      *
*              CONTROL AFTER EACH LABEL IS PRINTED TO ALLOW FOR       *
*              PROCESSING OF OPERATOR COMMANDS BETWEEN LABELS.        *
*                                                                     *
*              THE VTAM APPLICATION NAME IS HARD-CODED AS             *
*              'TAPELABL'. CHANGE IT IF NECESSARY AT LABEL            *
*              APPLNAME.                                              *
*                                                                     *
*              SIMILARLY, THE SUBSYSTEM NAME CAN BE FOUND AT          *
*              LABEL 'SSNAME'. THIS NAME IS ALSO USED FOR THE         *
*              ENQ MAJOR NAME.                                        *
*                                                                     *
* PROGRAMMER   C. J. PITTS                                            *
*                                                                     *
* MAINTENANCE  WHO   DATE      DESCRIPTION                            *
*              CJP   12/30/86  ADDED SUPPORT FOR JES JOBLOG ID        *
*                              AND ADDED VTAM EXITS FOR ABNORMAL      *
*                              TERMINATION CONDITIONS.                *
*              CJP    3/10/87  ADDED SUPPORT FOR VOLUME SEQUENCE      *
*                              NUMBER.                                *
*                                                                     *
**********************************************************************/
*                                                                     *
* REGISTERS AT ENTRY                                                  *
*              R1    STANDARD PARM STRING POINTER                     *
*              R13   SAVE AREA                                        *
*              R14   RETURN ADDRESS                                   *
*              R15   ENTRY POINT                                      *
*                                                                     *
* REGISTER USE IN PROGRAM                                             *
*              R8    TLBLABEL                                         *
*              R9    SUBROUTINE LINKAGE                               *
*              R10   SUBROUTINE LINKAGE                               *
*              R11   TLBLCVT                                          *
*              R12   BASE REGISTER                                    *
*              R13   SAVEAREA/EXTRA BASE                              *
*                                                                     *
**********************************************************************/
         EJECT
***********************************************************************
* TLBLMAIN:                                      /*  ENTRY POINT  */  *
*        BRANCH AROUND DOCUMENTATION HEADER;                          *
***********************************************************************
         SPACE
TLBLMAIN CSECT
         SPACE
TLBLMAIN AMODE 31
TLBLMAIN RMODE 24
         SPACE
         USING TLBLMAIN,R15        TEMPORARY BASE
         B     BEGIN               SKIP OVER DOCUMENTATION
         SPACE
         DC    AL1(BEGIN-*)        LENGTH OF TEXT
SRCLEVEL DC    C'TLBLMAIN VNN.MNN YY/MM/DD HH:MM UUUUUUUU'
*                MODULE   VER/MOD   DATE   TIME  USER NAME
COPYRIGT DC    C' COPYRIGHT (C) 1987 PLANNING RESEARCH CORPORATION '
ASMSTAMP DC    C'ASM &SYSDATE &SYSTIME'
         DROP  R15                 DONE WITH TEMPORARY BASE
         SPACE
BEGIN    DS    0H
         EJECT
***********************************************************************
* MAIN0000:                                   /*  INITIALIZATION  */  *
*        SAVE REGISTERS;                                              *
*        SET PROGRAM BASE;                                            *
*        CHAIN SAVE AREAS;                                            *
*        GET SUPERVISOR STATE;                                        *
*        CALL PARM STRING SUBROUTINE;               /*     PARMS  */  *
*        IF (ERROR IN PARM STRING)                                    *
*          THEN EXIT;                               /*  MAIN9000  */  *
*        CALL OP COMM INITIALIZATION SUBROUTINE;    /*    INITOC  */  *
***********************************************************************
         SPACE
MAIN0000 DS    0H
         USING PSA,R0              ALWAYS
         SPACE
         SAVE  (14,12)             SAVE REGISTERS
         SPACE
         LR    R12,R15             SET BASE REGISTER
         USING TLBLMAIN,R12
         SPACE
         LR    R15,R13             ---
         LA    R13,SAVEAREA        - CHAIN SAVE
         ST    R13,8(,R15)         - AREAS
         ST    R15,4(,R13)         ---
         SPACE
         USING SAVEAREA,R13        SECOND BASE REGISTER
         SPACE
         ST    R1,SAVEPARM         SAVE PARM STRING POINTER
         SPACE
         MODESET MF=(E,GETSUP)
         SPACE
         BAL   R10,PARMS           PROCESS PARM STRING
         TM    PARMOPTS,PARMBADP   ALL OKAY?
         BO    MAIN9000            NOPE...TERMINATE
         SPACE
         BAL   R10,INITOC          INITIALIZE OPERATOR COMMUNICATIONS
         EJECT
***********************************************************************
* MAIN1000:                              /*  MORE INITIALIZATION  */  *
*        IF (ACTIVE LOCK NOT IS CURRENTLY HELD)                       *
*          THEN CALL INITIALIZE TLBLCVT SUBROUTINE; /*    INITVT  */  *
*        GET 'ACTIVE' ENQ LOCK;                                       *
*        IF (ENQ FAILED)                                              *
*          THEN DO;                                                   *
*                 ISSUE 'LOCK UNAVAILABLE' MESSAGE;                   *
*                 GO EXIT;                          /*  MAIN9000  */  *
*               END;                                                  *
*        ISSUE INITIALIZATION COMPLETE MESSAGE;                       *
***********************************************************************
         SPACE
MAIN1000 DS    0H
         ENQ   MF=(E,LOCKTEST)
         SPACE
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   MAIN1500            GO IF NOT OKAY
         SPACE
         BAL   R10,INITVT          INITIALIZE TLBLCVT
         USING TLBLCVT,R11
         SPACE
         ENQ   MF=(E,LOCKUSE)
         SPACE
         LTR   R15,R15             CHECK RETURN CODE
         BZ    MAIN1900            GO IF OKAY
         SPACE
MAIN1500 DS    0H
         WTO   MF=(E,BADLOCK)
         SPACE
         B     MAIN9000            GO EXIT
         SPACE
MAIN1900 DS    0H
         WTO   MF=(E,INITCPLT)
         EJECT
***********************************************************************
* MAIN2000:                             /*  MAIN PROCESSING LOOP  */  *
*        DO UNTIL (TERMINATION IS REQUESTED);                         *
*          CALL PROCESSING STATE SUBROUTINE;        /*  SETSTATE  */  *
*          CALL LABEL REGISTRATION SUBROUTINE;      /*    VERIFY  */  *
*          CALL LABEL PROCESSING SUBROUTINE;        /*   PROCESS  */  *
*          LONG WAIT ON ECB LIST: STOP/MODIFY, WORK-TO-DO;            *
*          IF (OP COMM ECB IS POSTED)                                 *
*            THEN CALL COMMAND PROCESSING SUBROUTINE;/*  COMMAND  */  *
*        END;                                                         *
***********************************************************************
         SPACE
MAIN2000 DS    0H
         BAL   R10,SETSTATE        SET PROCESSING STATE
         BAL   R10,VERIFY          LABEL REGISTRATION CHECK
         BAL   R10,PROCESS         CHECK QUEUES AND PROCESS
         SPACE
         L     R1,SMECBA           STOP/MODIFY ECB ADDRESS
         USING ECB,R1
         TM    ECBCC,ECBPOST       POSTED?
         BO    MAIN2200            YEP...ONWARD
         L     R1,WTDECBA          WORK-TO-DO ECB ADDRESS
         TM    ECBCC,ECBPOST       POSTED?
         BO    MAIN2500            YEP...CHECK FOR STOP
         DROP  R1
         SPACE
         MODESET EXTKEY=ZERO,SAVEKEY=(2)
         SPACE
         WAIT  ECBLIST=ECBLIST,LONG=YES
         SPACE
         MODESET KEYREG=2
         SPACE
         L     R1,SMECBA           STOP/MODIFY ECB ADDRESS
         USING ECB,R1
         TM    ECBCC,ECBPOST       MESSAGE WAITING?
         BNO   MAIN2500            NOPE...ONWARD
MAIN2200 DS    0H
         BAL   R10,COMMAND         PROCESS COMMAND
MAIN2500 DS    0H
         SPACE
         TM    STATUS,STATTERM     TERMINATION REQUSETED?
         BNO   MAIN2000            NOPE...LOOP AGAIN
         EJECT
***********************************************************************
* MAIN4000:                                      /*  TERMINATION  */  *
*        RELEASE ACTIVE LOCK;                                         *
*        CALL VTAM SESSION TERMINATION SUBROUTINE;   /*  CLOSEPR  */  *
***********************************************************************
         SPACE
MAIN4000 DS    0H
         DEQ   MF=(E,LOCKFREE)
         SPACE
         BAS   R9,CLOSEPR          TERMINATE VTAM SESSION
         SPACE 3
***********************************************************************
* MAIN9000:                                /*  RETURN TO INVOKER  */  *
*        ISSUE SPOST FOR PENDING XMEMORY POSTS;                       *
*        RESUME PROBLEM PROGRAM STATE;                                *
*        RESTORE REGISTERS;                                           *
*        RETURN TO CALLER VIA R14;                                    *
***********************************************************************
         SPACE
MAIN9000 DS    0H
         SPOST
         SPACE
         MODESET MF=(E,GETPROB)
         SPACE
         L     R13,4(,R13)         HIGHER SAVE AREA
         RETURN (14,12),RC=0
         EJECT
*SUB*******************************************************************
* PARMS:                                  /*  DESTRING PARM TEXT  */  *
*        DO UNTIL( (ALL PARM FIELDS ARE PROCESSED)  -- OR --          *
*                  (PARM TEXT IS EXHAUSTED) )                         *
*          FIND LENGTH OF NEXT FIELD IN MESSAGE;                      *
*          IF (LENGTH > 0)                                            *
*            THEN MOVE TEXT TO OUTPUT AREA;                           *
*        END;                                                         *
***********************************************************************
         SPACE
PARMS    DS    0H
         L     R1,SAVEPARM         RECOVER PARM LIST POINTER
         L     R1,0(,R1)           LENGTH AND PARM TEXT
         LA    R6,2(,R1)           FIRST INTERESTING BYTE
         LH    R7,0(,R1)           PARM LENGTH
         BCTR  R7,0                DECREMENT FOR EXECUTES
         LA    R14,PARMTBL         MOVE TABLE
         LA    R15,PARMTBLC        LOOP COUNTER
         SPACE
PARMS200 DS    0H
         LTR   R7,R7               ANY CHARACTERS LEFT?
         BM    PARMS290            NOPE...DONE
         SPACE
         EX    R7,TRTDELIM         LOCATE NEXT DELIMITER
         BNZ   PARMS220            GO IF DELIMITER FOUND
         SPACE
         LR    R4,R7               LENGTH FOR EXECUTED MOVE
         LA    R1,1(R6,R7)         FAKE OUT R1 FOR LATER LOOP CALCS
         B     PARMS240            GO FOR MOVE
         SPACE
PARMS220 DS    0H
         LA    R4,0(,R1)           ADDRESS OF DELIMITER (CLEAR HI BYTE)
         SR    R4,R6               COMPUTE LENGTH
         BCTR  R4,0                DECREMENT FOR EXECUTE
         SPACE
PARMS240 DS    0H
         LM    R2,R3,0(R14)        GET ADDRESS AND MAX LENGTH FOR MOVE
         LR    R1,R4               COPY LENGTH OF DATA
         CR    R3,R1               CHECK LENGTH
         BNL   PARMS260            GO IF MAX LENGTH NOT EXCEEDED
         LR    R1,R3               SET LENGTH TO MAXIMUM
PARMS260 DS    0H
         LTR   R1,R1               CHECK LENGTH FOR EXECUTE
         BM    PARMS280            NULL FIELD...SKIP MOVE
         EX    R3,CLRFIELD         BLANK IT OUT
         EX    R1,MVCFIELD         MOVE SUITABLE LENGTH
         SPACE
PARMS280 DS    0H
         LA    R4,2(,R4)           ACCOUNT FOR DELIMITER, EXECUTE
         SR    R7,R4               DECREMENT REMAINING COUNT
         AR    R6,R4               BUMP ADDRESS TO NEXT FIELD
         LA    R14,L'PARMTBL(,R14) BUMP TABLE POINTER
         BCT   R15,PARMS200        LOOP
         SPACE
PARMS290 DS    0H
         EJECT
***********************************************************************
* PARMS400:                                                           *
*        IF (START TYPE IS NOT HOT, WARM OR COLD)                     *
*          THEN ISSUE MESSAGE - BAD START TYPE;                       *
*          ELSE IF (START TYPE IS COLD)                               *
*                 THEN CLEAR TLBLABEL QUEUE ANCHORS;                  *
*                 ELSE SET START TYPE FLAGS;                          *
***********************************************************************
         SPACE
PARMS400 DS    0H
         CLC   STYPE,=CL8'HOT'     WARM START REQUESTED?
         BE    PARMS490            YEP...ONWARD
         CLC   STYPE,=CL8'WARM'    WARM START REQUESTED?
         BE    PARMS420            YEP...GO SET PURGE FLAG
         CLC   STYPE,=CL8'COLD'    COLD START REQUESTED?
         BE    PARMS440            YEP...GO SET CLEAR FLAG
         SPACE
         WTO   MF=(E,BADSTYPE)
         OI    PARMOPTS,PARMBADP   SET FLAG - BAD PARM
         OI    STATUS,STATTERM     SET FLAG - REQUEST TERMINATION
         B     PARMS490            ONWARD...CHECK OTHER FIELDS
         SPACE
PARMS420 DS    0H
         OI    STATUS,STATPURG     SET FLAG
         B     PARMS490
         SPACE
PARMS440 DS    0H
         OI    PARMOPTS,PARMCLRQ   SET FLAG
         SPACE
PARMS490 DS    0H
         EJECT
***********************************************************************
* PARMS500:                                                           *
*        IF (INITIAL STATE IS NOT START, STOP OR VERIFY)              *
*          THEN ISSUE MESSAGE - BAD INITIAL STATE AND SET BAD PARM;   *
*          ELSE SET INITIAL STATE FLAGS;                              *
*        IF (LU NAME WAS NOT SPECIFIED)                               *
*          THEN ISSUE MESSAGE - NO LU NAME AND SET BAD PARM FLAG;     *
***********************************************************************
         SPACE
PARMS500 DS    0H
         CLC   ISTATE,=CL8'START'  INITIAL START REQUESTED?
         BE    PARMS510            YEP...GO SET FLAG
         CLC   ISTATE,=CL8'STOP'   INITIAL STOP REQUESTED?
         BE    PARMS520            YEP...GO SET FLAGS
         CLC   ISTATE,=CL8'VERIFY' INITIAL VERIFY REQUESTED?
         BE    PARMS530            YEP...GO SET FLAGS
         SPACE
         WTO   MF=(E,BADISTAT)
         SPACE
         OI    PARMOPTS,PARMBADP   SET FLAG - BAD PARM
         OI    STATUS,STATTERM     SET FLAG - REQUEST TERMINATION
         B     PARMS560            ONWARD
         SPACE
PARMS510 DS    0H
         OI    STATUS,STATSTOP+STATSTRT  INITIAL STOP, REQUEST START
         B     PARMS560            ONWARD
         SPACE
PARMS520 DS    0H
         OI    STATUS,STATSTOP     INITIAL STOP
         B     PARMS560            ONWARD
         SPACE
PARMS530 DS    0H
         OI    STATUS,STATSTOP+STATSTRT+STATVFY  STOP, REQ START, VFY
         SPACE
PARMS560 DS    0H
         CLI   LUNAME,C' '         LUNAME SPECIFIED?
         BNE   PARMS590            YEP...ONWARD
         SPACE
         WTO   MF=(E,NOLUNAME)
         SPACE
         OI    PARMOPTS,PARMBADP   SET FLAG - BAD PARM
         OI    STATUS,STATTERM     SET FLAG - REQUEST TERMINATION
         SPACE
PARMS590 DS    0H
         EJECT
***********************************************************************
* PARMS600:                                                           *
*        FORMAT AND ISSUE STARTING PARAMETER MESSAGE;                 *
*        RETURN TO CALLER VIA R10;                                    *
***********************************************************************
         SPACE
PARMS600 DS    0H
         MVC   PMSGLU,LUNAME       ---
         MVC   PMSGSTRT,STYPE      -  COMPLETE
         MVC   PMSGSTAT,ISTATE     -  MESSAGE
         MVC   PMSGLMOD,LOGMODE    ---
         SPACE
         WTO   MF=(E,PARMMSG)
         SPACE
PARMS990 DS    0H
         BR    R10                 RETURN TO CALLER
         SPACE
TRTDELIM TRT   0(*-*,R6),DELIMTBL  EXECUTED - FIND DELIMITER
CLRFIELD MVC   0(*-*,R2),=CL8' '   EXECUTED - CLEAR FIELD
MVCFIELD MVC   0(*-*,R2),0(R6)     EXECUTED - MOVE FIELD
         EJECT
*SUB*******************************************************************
* INITOC:                  /* INITIALIZE OPERATOR COMMUNICATIONS  */  *
*        EXTRACT COMM AREA;                                           *
*        IF (START CIB EXISTS)                                        *
*          THEN FREE IT;                                              *
*        SET CIB COUNTER MAX TO 1;                                    *
*        PUT STOP/MODIFY ECB ADDRESS INTO WAIT ECB LIST;              *
*        RETURN TO CALLER VIA R10;                                    *
***********************************************************************
         SPACE
INITOC   DS    0H
         EXTRACT COMM,FIELDS=COMM
         SPACE
         L     R2,COMM             NOW I'VE GOT IT
         USING COMLIST,R2
         SPACE
         ICM   R7,B'1111',COMCIBPT ADDRESS OF CIB
         USING CIB,R7
         BZ    INITOC20            NO CIB...ONWARD
         CLI   CIBVERB,CIBSTART    START CIB EXIST?
         BNE   INITOC20            NOPE...ONWARD
         QEDIT ORIGIN=COMCIBPT,BLOCK=(R7)
INITOC20 DS    0H
         SPACE
         QEDIT ORIGIN=COMCIBPT,CIBCTR=1
         SPACE
         MVC   SMECBA,COMECBPT     STOP/MODIFY ECB ADDRESS
         OI    SMECBA,X'80'        SET END-OF-LIST FLAG
         SPACE
         BR    R10                 RETURN TO CALLER
         SPACE
         DROP  R2,R7
         EJECT
*SUB*******************************************************************
* INITVT:                                 /*  INITIALIZE TLBLCVT  */  *
*        LOCATE SELECTED SSCVT;                                       *
*        SAVE SSCVT ADDRESS;                                          *
*        IF (UNABLE TO FIND SSCVT)                                    *
*          THEN ABEND U1001;                                          *
***********************************************************************
         SPACE
INITVT   DS    0H
         L     R1,FLCCVT           CVT ADDRESS
         USING CVT,R1
         L     R1,CVTJESCT         JESCT ADDRESS
         USING JESCT,R1
         L     R7,JESSSCT          FIRST SSCVT ADDRESS
         USING SSCT,R7
         DROP  R1
         SPACE
INITVT20 DS    0H
         CLC   SSCTSNAM,SSNAME     IS THIS THE RIGHT SSCVT?
         BE    INITVT30            YEP...ONWARD
         ICM   R7,B'1111',SSCTSCTA NEXT SSCT
         BNZ   INITVT20            LOOP IF IT EXISTS
         SPACE
         ABEND 1001,DUMP           NO GOT...ERROR
         SPACE
INITVT30 DS    0H
         ST    R7,SSCVTA           SAVE SSVCT ADDRESS
         EJECT
***********************************************************************
*        IF (SSCTSUSE=0)                /*  FIRST START THIS IPL  */  *
*          THEN GETMAIN CSA AND INITIALIZE TLBLCVT;                   *
***********************************************************************
         SPACE
         ICM   R11,B'1111',SSCTSUSE TLBLCVT POINTER
         BNZ   INITVT40            ALREADY ALLOCATED...ONWARD
         SPACE
         MODESET EXTKEY=ZERO,SAVEKEY=(2)
         SPACE
         L     R0,GETMCVT          SUBPOOL AND LENGTH
         GETMAIN R,LV=(0)
         SPACE
         LR    R11,R1              ADDRESS OF GOTTEN AREA
         USING TLBLCVT,R11
         SPACE
         MVC   TLBLEYE,=C'TLBL'    EYECATCHER
         XC    TLBLPTRS,TLBLPTRS   TLBLABEL ANCHORS
         MVC   TLBLQNAM,QNAME      ENQ QNAME
         MVC   TLBLRNAM,RNAME      ENQ RNAME
         XC    TLBLEXEP,TLBLEXEP   CLEAR EXIT ENTRY POINT ADDRESS
         SPACE
         ST    R11,SSCTSUSE        SAVE ADDRESS OF TLBLCVT
         SPACE
         MODESET KEYREG=2
         SPACE
INITVT40 DS    0H
         EJECT
***********************************************************************
*        PLACE WORK-TO-DO ECB ADDRESS IN ECB LIST;                    *
*        PLACE ASCB ADDRESS IN TLBLCVT;                               *
*        INITIALIZE WORK-TO-DO ECB TO POSTED (FORCE INITIAL PASS);    *
*        IF (QUEUE CLEAR IS PENDING)                                  *
*          THEN ZERO HEAD AND TAIL POINTERS TO TLBLABEL QUEUE;        *
*        RETURN TO CALLER VIA R10;                                    *
***********************************************************************
         SPACE
         ST    R11,TLBLCVTA        SAVE TLBLCVT ADDRESS
         LA    R15,TLBLECB         WORK-TO-DO ECB ADDRESS
         ST    R15,WTDECBA         INTO ECB LIST
         SPACE
         MODESET EXTKEY=ZERO,SAVEKEY=(2)
         SPACE
         MVC   TLBLASCB,PSAAOLD    ASCB ADDRESS
         MVC   TLBLECB,=AL1(ECBPOST,0,0,0) INITIALIZE WORK-TO-DO ECB
         SPACE
         TM    PARMOPTS,PARMCLRQ   QUEUE CLEAR REQUESTED?
         BNO   INITVT50            NOPE...ONWARD
         SPACE
         XC    TLBLPTRS,TLBLPTRS   CLEAR POINTERS
INITVT50 DS    0H
         SPACE
         MODESET KEYREG=2
         SPACE
         BR    R10                 RETURN TO CALLER
         SPACE
         DROP  R7
         EJECT
*SUB*******************************************************************
* SETSTATE:                 /*  SET PROCESSING AND OUTPUT STATES  */  *
*        IF (QUEUE PURGE IS PENDING)                                  *
*          THEN DO;                                                   *
*                 CLEAR PURGE REQUEST FLAG;                           *
*                 CALL PURGE QUEUE SUBROUTINE;        /*  PURGEQ  */  *
*               END;                                                  *
*        IF (STOPPED)                                                 *
*          THEN (IF START IS REQUESTED)                               *
*                 THEN DO;                                            *
*                        CLEAR START REQUEST FLAG;                    *
*                        CALL OPEN PRINTER SUBR;      /*  OPENPR  */  *
*                      END;                                           *
*          ELSE (IF STOP IS REQUESTED)                                *
*                 THEN DO;                                            *
*                        CLEAR STOP REQUEST FLAG;                     *
*                        CALL CLOSE PRINTER SUBR;    /*  CLOSEPR  */  *
*                      END;                                           *
*        RETURN TO CALLER VIA R10;                                    *
***********************************************************************
         SPACE
SETSTATE DS    0H
         TM    STATUS,STATPURG     QUEUE PURGE REQUESTED?
         BNO   STATE190            NOPE...ONWARD
         BAL   R9,PURGEQ           REMOVE WORK FROM QUEUE
         NI    STATUS,X'FF'-STATPURG CLEAR REQUEST FLAG
STATE190 DS    0H
         SPACE
         TM    STATUS,STATSTOP     CURRENTLY STOPPED?
         BNO   STATE350            NOPE...ONWARD
         SPACE
         TM    STATUS,STATSTRT     START REQUESTED?
         BNO   STATE390            NOPE...GO RETURN TO CALLER
         SPACE
         NI    STATUS,X'FF'-STATSTRT CLEAR START REQUEST
         BAS   R9,OPENPR           START SESSION W/PRINTER
         SPACE
STATE350 DS    0H
         TM    STATUS,STATSTPR     STOP REQUESTED?
         BNO   STATE390            NOPE...GO RETURN TO CALLER
         SPACE
         NI    STATUS,X'FF'-STATSTPR CLEAR STOP REQUEST
         BAS   R9,CLOSEPR          CLOSE SESSION W/PRINTER
         SPACE
STATE390 DS    0H
         BR    R10                 RETURN TO CALLER
         EJECT
*SUB*******************************************************************
* VERIFY:            /*  LABEL PRINTER REGISTRATION VERIFICATION  */  *
*        IF (VERIFY IS NOT REQUESTED)   --  OR  --                    *
*           (VERIFY IS IN PROGRESS)     --  OR  --                    *
*           (OUTPUT IS STOPPED)                                       *
*          THEN RETURN TO CALLER VIA R10;                             *
*        CLEAR VERIFY REQUEST;                                        *
*        SET VERIFY IN PROGRESS;                                      *
*        SET TIME AND DATE INTO VERIFICATION PATTERN;                 *
*        WRITE VERIFICATION PATTERN;                 /*  WRITEPR  */  *
*        RETURN TO CALLER VIA R10;                                    *
***********************************************************************
         SPACE
VERIFY   DS    0H
         TM    STATUS,STATVFY      VERIFY REQUESTED?
         BNOR  R10                 NOPE...RETURN TO CALLER
         SPACE
         TM    STATUS,STATVFYP+STATSTOP VERIFY IN PROGRESS OR STOPPED?
         BNZR  R10                 YEP...RETURN TO CALLER
         SPACE
         NI    STATUS,X'FF'-STATVFY CLEAR VERIFY REQUEST
         OI    STATUS,STATVFYP     SET VERIFY IN PROGRESS
         SPACE
         LA    R8,VFYPATRN         DUMMY TLBLABEL
         USING TLBLABEL,R8
         SPACE
         TIME  DEC
         SPACE
         ST    R0,LABELTIM         SAVE TIME
         ST    R1,LABELDAT         DITTO DATE
         SPACE
         BAS   R9,WRITEPR          GO FORMAT AND WRITE IT OUT
         SPACE
         BR    R10                 RETURN TO CALLER
         EJECT
*SUB*******************************************************************
* PROCESS:                        /*  DEQUEUE REQUEST AND OUTPUT  */  *
*        IF (STOPPED)                -- OR --                         *
*           (VERIFY IS IN PROGRESS)                                   *
*          THEN DO;                                                   *
*                 CLEAR WORK-TO-DO ECB;                               *
*                 RETURN TO CALLER VIA R10;                           *
*               END;                                                  *
***********************************************************************
         SPACE
PROCESS  DS    0H
         TM    STATUS,STATSTOP+STATVFYP PROPER STATE?
         BZ    PROCESS1            YEP...ONWARD
         SPACE
         MODESET EXTKEY=ZERO,SAVEKEY=(2)
         SPACE
         XC    TLBLECB,TLBLECB     CLEAR WORK-TO-DO ECB
         SPACE
         MODESET KEYREG=2
         SPACE
         BR    R10                 RETURN TO CALLER
         SPACE
PROCESS1 DS    0H
         EJECT
***********************************************************************
*        GET NEXT REQUEST FROM HEAD OF QUEUE;                         *
*        IF (REQUEST IS PRESENT AT HEAD OF QUEUE)                     *
*          THEN DO;                                                   *
*                 FORMAT AND OUTPUT LABEL;           /*  WRITEPR  */  *
*                 IF (LABEL WRITE WAS SUCCESSFUL)                     *
*                   THEN GET RID OF TLBLABEL BLOCK;  /*  DEQUEUE  */  *
*               END;                                                  *
*        IF (QUEUE IS STILL NOT EMPTY)                                *
*          THEN SET POSTED BIT IN WORK-TO-DO ECB;                     *
*          ELSE RESET WORK-TO-DO ECB;                                 *
*        RETURN TO CALLER VIA R10;                                    *
***********************************************************************
         SPACE
         ICM   R8,B'1111',TLBLHEAD CHECK FOR REQUEST ON QUEUE
         BZ    PROCESS5            NOT THERE...RETURN TO CALLER
         USING TLBLABEL,R8
         SPACE
         BAS   R9,WRITEPR          GO FORMAT AND WRITE IT OUT
         LTR   R15,R15             WAS IT SUCCESSFUL?
         BNZ   PROCESS5            NOPE...LEAVE IT ON QUEUE
         SPACE
         BAL   R9,DEQUEUE          REMOVE REQUEST
         SPACE
PROCESS5 DS    0H
         MODESET EXTKEY=ZERO,SAVEKEY=(2)
         SPACE
         XC    TLBLECB,TLBLECB     CLEAR WORK-TO-DO ECB
         SPACE
         CLC   TLBLHEAD,=A(0)      MORE THERE?
         BE    PROCESS7            NOPE...WRAP UP
         SPACE
         OI    TLBLECB,ECBPOST     INDICATE MORE WORK-TO-DO
         SPACE
PROCESS7 DS    0H
         MODESET KEYREG=2
         SPACE
         BR    R10                 RETURN TO CALLER
         EJECT
*SUB*******************************************************************
* DEQUEUE:                                    /* DEQUEUE REQUEST  */  *
*        IF (QUEUE IS NOT EMPTY)                                      *
*          THEN DO;                                                   *
*                 DECHAIN NEXT REQUEST FROM QUEUE;                    *
*                 FREEMAIN TAPLABEL REQUEST BLOCK;                    *
*               END;                                                  *
*        RETURN TO CALLER VIA R9;                                     *
***********************************************************************
         SPACE
DEQUEUE  DS    0H
         MODESET EXTKEY=ZERO,SAVEKEY=(2)
         SPACE
DEQUE10  DS    0H
         LM    R4,R5,TLBLPTRS      HEAD AND TAIL OF CHAIN - NOW
         LTR   R8,R4               ANYTHING THERE?
         BZ    DEQUE90             NOPE...RETURN TO CALLER
         USING TLBLABEL,R8
         SPACE
         CR    R4,R5               ONLY ONE BLOCK ON CHAIN?
         BE    DEQUE20             YEP...ONWARD
         SPACE
         L     R6,LABELNXT         NEW HEAD OF CHAIN
         LR    R7,R5               NEW TAIL OF CHAIN
         B     DEQUE40             ONWARD
         SPACE
DEQUE20  DS    0H
         XR    R6,R6               HEAD IS NOW NULL
         XR    R7,R7               DITTO TAIL
         SPACE
DEQUE40  DS    0H
         LA    R0,1                ---
         AH    R0,LABELDEL         - INCREMENT COUNT
         STH   R0,LABELDEL         ---
         SPACE
         CDS   R4,R6,TLBLPTRS      TRY DECHAIN
         BNE   DEQUE10             LOOP UNTIL SUCCESSFUL
         SPACE
         L     R0,FREEBLOK         SUBPOOL AND LENGTH
         FREEMAIN R,LV=(0),A=(R8)
         SPACE
DEQUE90  DS    0H
         MODESET KEYREG=2
         SPACE
         BR    R9                  RETURN TO CALLER
         EJECT
*SUB*******************************************************************
* PURGEQ:                     /*  PURGE TLBLABEL WORK FROM QUEUE  */  *
*        DO UNTIL (QUEUE IS EMPTY);                                   *
*          DEQUE LABEL REQUEST;                      /*  DEQUEUE  */  *
*        END;                                                         *
*        RETURN TO CALLER VIA R9;                                     *
***********************************************************************
         SPACE
PURGEQ   DS    0H
         ST    R9,SAVE9            SAVE RETURN ADDRESS
         SPACE
PURGEQ10 DS    0H
         CLC   TLBLHEAD,=A(0)      ANYTHING ON QUEUE?
         BE    PURGEQ90            NOPE...ONWARD
         SPACE
         BAL   R9,DEQUEUE          REMOVE LABEL REQUEST AT QUEUE HEAD
         B     PURGEQ10
         SPACE
PURGEQ90 DS    0H
         L     R9,SAVE9            RESTORE REGISTER
         BR    R9                  RETURN TO CALLER
         EJECT
*SUB*******************************************************************
* OPENPR:                    /*  START VTAM SESSION WITH PRINTER  */  *
*        IF (NOT STOPPED)                                             *
*          THEN RETURN TO CALLER VIA R9;                              *
*        GET INTO 24-BIT MODE;                                        *
*        MOVE LU NAME TO VTAM NIB;                                    *
*        MOVE LOGMODE TO VTAM NIB;                                    *
*        OPEN VTAM ACB;                                               *
*        IF (OPEN FAILED)                                             *
*          THEN DO;                                                   *
*                 FORMAT AND ISSUE ERROR MESSAGE;                     *
*                 GO TO CLOSEPR WITHOUT CHANGING R9; /*  CLOSEPR  */  *
*               END;                                                  *
***********************************************************************
         SPACE
OPENPR   DS    0H
         TM    STATUS,STATSTOP     STOPPED?
         BNOR  R9                  NOPE...RETURN TO CALLER
         SPACE
         LA    R1,*+6              GET 24 BIT MODE ADDRESS
         BSM   0,R1                SET 24 BIT MODE
         SPACE
         LA    R1,PRNIB            ADDRESSABILITY
         USING ISTDNIB,R1
         MVC   NIBSYM,LUNAME       MOVE LU NAME TO NIB
         MVC   NIBLMODE,LOGMODE    MOVE LOGMODE TO NIB
         DROP  R1
         SPACE
         OPEN  MF=(E,OCACBL)
         SPACE
         LTR   R15,R15             CHECK RETURN CODE
         BZ    OPENPR19            OKAY...ONWARD
         SPACE
         STCM  R15,B'0011',ERRACB15    ---
         UNPK  HEXWORK(5),ERRACB15(3)  - CONVERT R15
         TR    HEXWORK(4),HEXTABLE     - TO HEX
         MVC   ERRACB15,HEXWORK        ---
         SPACE
         LA    R15,PRACB           ACB ADDRESS
         USING IFGACB,R15
         UNPK  HEXWORK(3),ACBERFLG(2)  ---
         TR    HEXWORK(2),HEXTABLE     - ACBERFLG TO HEX
         MVC   ERRACBFL,HEXWORK        ---
         DROP  R15
         SPACE
         WTO   MF=(E,ERRACB)
         SPACE
*              THIS IS A LITTLE TRICKY. SEE COMMENTS IN RPLERR ROUTINE.
         B     CLOSEPR             GO SHUT DOWN
         SPACE
OPENPR19 DS    0H
         EJECT
***********************************************************************
*        ISSUE VTAM OPNDST ACQUIRE;                                   *
*        IF (OPNDST FAILED)                                           *
*          THEN GO PROCESS ERROR;                     /*  RPLERR  */  *
*        COPY CID FROM NIB TO SEND RPL;                               *
*        CLEAR STOPPED, STOP REQ, START REQ FLAGS;                    *
*        RETURN TO CALLER VIA BSM 0,R9;                               *
***********************************************************************
         SPACE
         LA    R2,PRNIB            NIB ADDRESSABILITY
         USING ISTDNIB,R2
         SPACE
         OPNDST RPL=PRRPL1,OPTCD=(SYN,ACQUIRE),NIB=(R2)
         SPACE
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   RPLERR              PROCESS ERROR
         SPACE
         LA    R3,PRRPL2           SEND RPL
         USING IFGRPL,R3
         MVC   RPLARG,NIBCID       COPY CID TO SEND RPL
         DROP  R2,R3
         SPACE
         NI    STATUS,X'FF'-(STATSTOP+STATSTPR+STATSTRT) CLEAR FLAGS
         SPACE
         BSM   0,R9                RETURN TO CALLER
         EJECT
*SUB*******************************************************************
* CLOSEPR:                     /*  END VTAM SESSION WITH PRINTER  */  *
*        SET STOPPED FLAG;                                            *
*        CLEAR STOP REQ, START REQ, VERIFY FLAGS;                     *
*        GET INTO 24-BIT MODE;                                        *
*        ISSUE VTAM CLSDST;                                           *
*        CLOSE VTAM ACB;                                              *
*        SET R15 TO NON-ZERO;                                         *
*        RETURN TO CALLER VIA BSM 0,R9;                               *
***********************************************************************
         SPACE
CLOSEPR  DS    0H
         OI    STATUS,STATSTOP     SET STOPPED FLAG
         NI    STATUS,X'FF'-(STATSTPR+STATSTRT+STATVFY+STATVFYP)
         SPACE
         LA    R1,*+6              GET 24 BIT MODE ADDRESS
         BSM   0,R1                SET 24 BIT MODE
         SPACE
         CLSDST RPL=PRRPL1,OPTCD=(SYN,RELEASE)
         SPACE
         CLOSE MF=(E,OCACBL)
         SPACE
         LA    R15,8               SET NON-ZERO IN CASE RPLERROR
         SPACE
         BSM   0,R9                RETURN TO CALLER
         EJECT
*SUB*******************************************************************
* WRITEPR:                     /*  FORMAT AND WRITE A TAPE LABEL  */  *
*        TRANSLATE NON-PRINTABLES TO DEFAULT CHARACTER (IE, X'79');   *
*        COPY FIELDS REQUIRING LITTLE EDITING TO PRINTER DATA STREAM; *
***********************************************************************
         SPACE
WRITEPR  DS    0H
         USING TLBLABEL,R8
         SPACE
         MODESET EXTKEY=ZERO,SAVEKEY=(2)
         SPACE
         TR    LABELCHR(LABELCHL),PRNTABLE REMOVE NON-PRINTABLES
         SPACE
         MODESET KEYREG=2
         SPACE
         MVC   BUFVOL1,LABELSER    VOLUME SERIAL
         MVC   BUFVOL2,LABELSER    VOLUME SERIAL
         SPACE
         MVC   BUFDEV1,LABELDEV    DEVICE NUMBER
         MVC   BUFDEV2,LABELDEV    DEVICE NUMBER
         SPACE
         MVC   BUFVNO1,LABELVNO    VOLUME SEQUENCE REEL COUNT
         MVC   BUFVNO2,LABELVNO    VOLUME SEQUENCE REEL COUNT
         SPACE
         MVC   BUFDEN1,LABELDEN    DENSITY
         MVC   BUFDEN2,LABELDEN    DENSITY
         SPACE
         MVC   BUFLID1,LABELLID    ACF2 USER LOGON ID
         MVC   BUFLID2,LABELLID    ACF2 USER LOGON ID
         SPACE
         MVC   BUFLAB1,LABELTYP    LABEL TYPE
         MVC   BUFLAB2,LABELTYP    LABEL TYPE
         SPACE
         MVC   BUFSIT1,LABELSIT    SITE SMF ID
         MVC   BUFSIT2,LABELSIT    SITE SMF ID
         SPACE
         MVC   BUFJOB1,LABELJOB    JOB NAME
         MVC   BUFJOB2,LABELJOB    JOB NAME
         SPACE
         MVC   BUFJID1+0(1),LABELJID+0 JES JOBLOG TYPE
         MVC   BUFJID1+1(4),LABELJID+4 JES JOBLOG NUMBER
         MVC   BUFJID2,BUFJID1         JES JOBLOG ID
         SPACE
         MVC   BUFSTP1,LABELSTP    STEP NAME
         MVC   BUFSTP2,LABELSTP    STEP NAME
         EJECT
***********************************************************************
*        LOCATE POINT AT WHICH TO DIVIDE DSNAME ('.' IS BEST);        *
*        FORMAT DSNAME TO TWO LINES, AS REQUIRED;                     *
*        EDIT DATE AND TIME;                                          *
***********************************************************************
         SPACE
         MVI   BUFDSN1A,C' '                     ---
         MVC   BUFDSN1A+1(L'BUFDSN1A-1),BUFDSN1A - BLANK OUT
         MVI   BUFDSN1B,C' '                     - DSNAME
         MVC   BUFDSN1B+1(L'BUFDSN1B-1),BUFDSN1B ---
         SPACE
         LA    R1,LABELDSN+L'BUFDSN1A-1 LAST POSSIBLE BYTE, FIRST PART
         LA    R14,BREAKRNG        LOOP COUNTER
         CLI   1(R1),C' '          BLANK?
         BE    WPR130              YEP...NO NEED TO LOOK FURTHER
WPR120   DS    0H
         CLI   0(R1),C'.'          BREAK POINT?
         BE    WPR130              YEP...ONWARD
         BCTR  R1,0                BACK UP A BYTE
         BCT   R14,WPR120          LOOP FOR BREAK CHARACTER
         LA    R14,BREAKRNG        NO BREAK CHARACTER FOUND
         SPACE
WPR130   DS    0H
         LA    R14,L'BUFDSN1A-BREAKRNG(,R14) LENGTH
         BCTR  R14,0               DECREMENT FOR EXECUTE
         EX    R14,MVCDSN1A        MOVE FIRST PART OF DSNAME
         SPACE
         LA    R1,LABELDSN+1(R14)  NEXT CHARACTER OF REST OF DSNAME
         LA    R15,L'LABELDSN-1    MAX LENGTH, WHOLE DSN - 1
         SR    R15,R14             MAX REMAINING LENGTH
         LA    R14,LABELDSN+L'LABELDSN-1  LAST BYTE OF DSNAME
         SPACE
WPR140   DS    0H
         CLI   0(R14),C' '         TRAILING BLANK?
         BNE   WPR160              NOPE...GO MOVE
         BCTR  R14,0               BACK UP POINTER
         BCT   R15,WPR140          LOOP FOR TRAILING BLANKS
         B     WPR180              GO IF REMAINDER WAS ALL BLANKS
WPR160   DS    0H
         SPACE
         LA    R2,BUFDSN1B+L'BUFDSN1B  LAST DESTINATION BYTE
         SR    R2,R15              BACK UP BY CHARACTER COUNT
         BCTR  R15,0               DECREMENT FOR EXECUTE
         EX    R15,MVCDSN1B        RIGHT JUSTIFY REMAINDER OF DSNAME
         SPACE
WPR180   DS    0H
         MVC   BUFDSN2A,BUFDSN1A   FIRST PART
         MVC   BUFDSN2B,BUFDSN1B   REMAINDER
         SPACE
         MVC   BUFDAT1,EDITDATE    ---
         ED    BUFDAT1,LABELDAT+1  - EDIT DATE
         MVC   BUFDAT2,BUFDAT1     ---
         MVC   BUFTIM1,EDITTIME    ---
         ED    BUFTIM1,LABELTIM    - EDIT TIME
         MVC   BUFTIM2,BUFTIM1     ---
         EJECT
***********************************************************************
*        GET INTO 24-BIT MODE;                                        *
*        ISSUE VTAM SEND TO PRINT LABEL;                              *
*        IF (RETURN CODE IS NOT ZERO)                                 *
*          THEN GO PROCESS ERROR;                     /*  RPLERR  */  *
*        RETURN TO CALLER VIA BSM 0,R9;                               *
***********************************************************************
         SPACE
         LA    R1,*+6              GET 24 BIT MODE ADDRESS
         BSM   0,R1                SET 24 BIT MODE
         SPACE
         SEND  RPL=PRRPL2,OPTCD=(SYN,CA)
         SPACE
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   RPLERR              PROCESS ERROR
         SPACE
         BSM   0,R9                RETURN TO CALLER
         SPACE
MVCDSN1A MVC   BUFDSN1A(*-*),LABELDSN  EXECUTED
MVCDSN1B MVC   0(*-*,R2),0(R1)         EXECUTED
         EJECT
*SUB*******************************************************************
* RPLERR:              /*  PROCESS ERROR RETURN FROM RPL REQUEST  */  *
*                                                                     *
*  /***************************************************************/  *
*  /*  THIS IS A LITTLE TRICKY. THIS ROUTINE IS NOT USUALLY       */  *
*  /*  ENTERED LIKE A REGULAR SUBROUTINE (EG, BAL(R)). RATHER,    */  *
*  /*  IT IS USED TO PROCESS A NON-ZERO RETURN CODE FROM A VTAM   */  *
*  /*  RPL-BASED REQUEST ISSUED FROM A SUBROUTINE THAT WAS        */  *
*  /*  ENTERED WITH A BAS R9,<> INSTRUCTION.  IT IS ENTERED       */  *
*  /*  WITH A SIMPLE BRANCH WITH R9 POINTING TO AN EVENTUAL       */  *
*  /*  RETURN ADDRESS. THIS ROUTINE DOES NOT RETURN VIA R9.       */  *
*  /*  INSTEAD, IT BRANCHES DIRECTLY TO CLOSEPR FOR SESSION       */  *
*  /*  SHUTDOWN AND STATUS FLAG SETTING. CLOSEPR WILL RETURN TO   */  *
*  /*  THE CALLER OF THE ROUTINE THAT CALLED THIS ROUTINE VIA     */  *
*  /*  BSM 0,R9. WELL, I SAID IT WAS A LITTLE TRICKY.             */  *
*  /*  ON ENTRY: R15=RETURN CODE, R1=RPL ADDRESS.                 */  *
*  /***************************************************************/  *
*                                                                     *
*        FORMAT AND ISSUE RPL ERROR MESSAGE;                          *
*        GO TO CLOSEPR FOR SHUTDOWN SERVICES;        /*  CLOSEPR  */  *
***********************************************************************
         SPACE
RPLERR   DS    0H
         STCM  R15,B'0011',ERRRPL15    ---
         UNPK  HEXWORK(5),ERRRPL15(3)  - CONVERT R15
         TR    HEXWORK(4),HEXTABLE     - TO HEX
         MVC   ERRRPL15,HEXWORK        ---
         SPACE
         USING IFGRPL,R1
         UNPK  HEXWORK(3),RPLREQ(2)    ---
         TR    HEXWORK(2),HEXTABLE     - RPLREQ   TO HEX
         MVC   ERRRPLRQ,HEXWORK        ---
         UNPK  HEXWORK(3),RPLRTNCD(2)  ---
         TR    HEXWORK(2),HEXTABLE     - RPLRTNCD TO HEX
         MVC   ERRRPLRC,HEXWORK        ---
         UNPK  HEXWORK(3),RPLFDB2(2)   ---
         TR    HEXWORK(2),HEXTABLE     - RPLFDB2  TO HEX
         MVC   ERRRPLRS,HEXWORK        ---
         UNPK  HEXWORK(9),RPLFDBK2(5)  ---
         TR    HEXWORK(8),HEXTABLE     - RPLFDBK2 TO HEX
         MVC   ERRRPLFB,HEXWORK        ---
         DROP  R1
         SPACE
         WTO   MF=(E,ERRRPL)
         SPACE
         B     CLOSEPR             GO SET FLAGS AND SHUT DOWN SESSION
         EJECT
*EXIT******************************************************************
*                                   /*  VTAM ERROR EXIT ROUTINES  */  *
* VXLOSTRM:                                /*  VTAM LOSTERM EXIT  */  *
*        ESTABLISH BASE REGISTERS AND ADDRESSABILITY;                 *
*        POINT TO PROPER PARAMETERS FOR MESSAGE TEXT;                 *
*        GO PROCESS;                                   /*  VXCOM  */  *
*                                                                     *
* VXTPEND:                                 /*  VTAM TPEND   EXIT  */  *
*        ESTABLISH BASE REGISTERS AND ADDRESSABILITY;                 *
*        POINT TO PROPER PARAMETERS FOR MESSAGE TEXT;                 *
*        GO PROCESS;                                   /*  VXCOM  */  *
***********************************************************************
         SPACE
         PUSH  USING
         DROP  R8,R11,R13
         SPACE
VXLOSTRM DS    0H
         USING VXLOSTRM,R15
         L     R12,=A(TLBLMAIN)    REAL BASE
         DROP  R15
         LA    R2,=CL7'LOSTERM'    EXIT ID FOR MESSAGE
         L     R3,X'04'(,R1)       REASON CODE PARAMETER FOR MESSAGE
         B     VXCOM
         SPACE
VXTPEND  DS    0H
         USING VXTPEND,R15
         L     R12,=A(TLBLMAIN)    REAL BASE
         DROP  R15
         LA    R2,=CL7'TPEND'      EXIT ID FOR MESSAGE
         L     R3,X'0C'(,R1)       REASON CODE PARAMETER FOR MESSAGE
*        B     VXCOM
         EJECT
***********************************************************************
* VXCOM:                    /*  COMMON PROCESSING FOR VTAM EXITS  */  *
*        PRESERVE R14 FOR RETURN;                                     *
*        ESTABLISH NEW SAVE AREA;                                     *
*        FORMAT OPERATOR MESSAGE AND ISSUE WTO;                       *
*        SET STOP REQUEST FLAG;                                       *
*        GET KEY ZERO;                                                *
*        POST WORK-TO-DO ECB;                                         *
*        RESUME PROBLEM PROGRAM KEY;                                  *
*        RETURN TO VTAM;                                              *
***********************************************************************
         SPACE
VXCOM    DS    0H
         LR    R9,R14              PRESERVE RETURN ADDRESS
         LR    R4,R1               PRESERVE PARM LIST POINTER (IN CASE)
         LA    R13,VXSAVE          PROVIDE SAVE AREA
         USING VXSAVE,R13          POSSIBLE SECOND BASE REGISTER
         SPACE
         MVC   INTOEXNM,0(R2)      EXIT ID TO MESSAGE
         STC   R3,HEXWORK+7            ---
         UNPK  HEXWORK(3),HEXWORK+7(2) - REASON CODE
         TR    HEXWORK(2),HEXTABLE     - TO MESSAGE
         MVC   INTOEXRC,HEXWORK        ---
         SPACE
         WTO   MF=(E,INTOEXIT)
         SPACE
         OI    STATUS,STATSTPR     STOP REQUESTED
         SPACE
         L     R11,TLBLCVTA        TLBL CVT BASE
         USING TLBLCVT,R11
         SPACE
         MODESET MF=(E,GETZERO)
         SPACE
         POST  TLBLECB             WORK-TO-DO
         SPACE
         MODESET MF=(E,GETNZERO)
         SPACE
         LR    R14,R9              RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO VTAM
         SPACE
         POP USING
         EJECT
*SUB*******************************************************************
* COMMAND:                         /*  PROCESS OPERATOR COMMANDS  */  *
*        COPY CONSOLE ID FROM CIB;                                    *
*        IF (COMMAND VERB IS 'STOP')                                  *
*          THEN DO;                                                   *
*                 CALL PROCESSING SUBROUTINE;        /*  COMTERM  */  *
*                 GO FREE CIB AND RETURN;            /*  COMM900  */  *
*               END;                                                  *
*        IF (COMMAND VERB IS NOT 'MODIFY')                            *
*           THEN GO ISSUE ERROR MSG AND RETURN;     /*  COMM700  */  *
***********************************************************************
         SPACE
COMMAND  DS    0H
         L     R7,COMM             GET COMM AREA ADDRESS
         USING COMLIST,R7
         L     R6,COMCIBPT         POINT TO CIB
         USING CIB,R6
         SPACE
         MVC   CONID,CIBCONID      SAVE ID OF CONSOLE
         SPACE
         CLI   CIBVERB,CIBSTOP     STOP VERB?
         BNE   COMM120             NOPE...ONWARD
         BAL   R9,COMTERM          PROCESS TERMINATION REQUEST
         B     COMM900             GO RETURN
COMM120  DS    0H
         SPACE
         CLI   CIBVERB,CIBMODFY    MODIFY VERB?
         BNE   COMM700             NOPE...TILT
         EJECT
***********************************************************************
* COMM300:                             /*  ROUTE MODIFY COMMAND   */  *
*        LOOK UP COMMAND IN MODIFY TABLE;                             *
*        IF (FOUND IN TABLE)                                          *
*          THEN DO;                                                   *
*                 CALL PROCESSING ROUTINE AS SPECIFIED IN TABLE;      *
*                 GO ISSUE COMMAND ACCEPTED MESSAGE  /*  COMM800  */  *
*                END;                                                 *
***********************************************************************
         SPACE
COMM300  DS    0H
         LA    R15,MODFYTBC        LOOP COUNTER
         LA    R14,MODFYTBL        COMMAND TABLE
         USING CMDTABLE,R14
         LH    R3,CIBDATLN         LENGTH OF ENTERED COMMAND
         SPACE
COMM320  DS    0H
         XR    R1,R1               CLEAR WORK REGISTER FOR LENGTH
         IC    R1,CMDTLEN          MATCH LENGTH
         IC    R2,CMDCOMPR         MASK FOR EXECUTED BRANCH
         CR    R1,R3               COMPARE TO ACTUAL
         EX    R2,BCTEXT           GO LOOP TO COMM380 IF WRONG LENGTH
         SPACE
         L     R2,CMDTEXT          ADDRESS OF COMPARE STRING
         BCTR  R1,0                DECREMENT FOR EXECUTE
         EX    R1,CLCTEXT          COMPARE TEXTS
         BNE   COMM380             LOOP IF NOT EQUAL
         SPACE
         L     R1,CMDENTRY         PROCESSING ROUTINE ENTRY POINT
         BALR  R9,R1               GO DO IT
         B     COMM800             GO ISSUE ACCEPTED MESSAGE
         SPACE
COMM380  DS    0H
         LA    R14,CMDTBLL(,R14)   NEXT TABLE ENTRY
         BCT   R15,COMM320         LOOP
         SPACE
         DROP  R14
         EJECT
***********************************************************************
* COMM700:                /*  ISSUE GENERIC OPCOMM ERROR MESSAGE  */  *
*        ISSUE INVALID OPERATOR COMMAND MESSAGE;                      *
*        GO FREE CIB AND RETURN;                     /*  COMM900  */  *
***********************************************************************
         SPACE
COMM700  DS    0H
         MVI   BADCMDTX,C' '       CLEAR MESSAGE BUFFER
         MVC   BADCMDTX+1(L'BADCMDTX-1),BADCMDTX
         LA    R1,L'BADCMDTX       MAXIMUM LENGTH
         CR    R1,R3               COMPARE TO ACTUAL LENGTH
         BNL   COMM710             GO IF OKAY
         LR    R3,R1               SET TO MAXIMUM LENGTH
COMM710  DS    0H
         BCTR  R3,0                DECREMENT FOR EXECUTE
         EX    R3,MVCBADTX         MOVE IT
         SPACE
         L     R0,CONSOLE          GET CONSOLE ID
         WTO   MF=(E,BADCMD)
         SPACE
         B     COMM900             ONWARD TO EXIT
         SPACE 3
***********************************************************************
* COMM800:            /*  ISSUE GENERIC OPCOMM COMPLETED MESSAGE  */  *
*        ISSUE COMMAND COMPLETED MESSAGE;                             *
***********************************************************************
         SPACE
COMM800  DS    0H
         L     R7,COMM             REFRESH COMM AREA ADDRESS
         L     R6,COMCIBPT         REFRESH POINTER TO CIB
         LH    R3,CIBDATLN         REFRESH COMMAND LENGTH
         SPACE
         MVI   OKCMDTX,C' '        CLEAR MESSAGE BUFFER
         MVC   OKCMDTX+1(L'OKCMDTX-1),OKCMDTX
         LA    R1,L'OKCMDTX        MAXIMUM LENGTH
         CR    R1,R3               COMPARE TO ACTUAL LENGTH
         BNL   COMM810             GO IF OKAY
         LR    R3,R1               SET TO MAXIMUM LENGTH
COMM810  DS    0H
         BCTR  R3,0                DECREMENT FOR EXECUTE
         EX    R3,MVCOKTX          MOVE IT
         SPACE
         L     R0,CONSOLE          GET CONSOLE ID
         WTO   MF=(E,OKCMD)
         EJECT
***********************************************************************
* COMM900:                          /*  COMMAND FINAL PROCESSING  */  *
*        FREE THE CIB;                                                *
*        RETURN TO CALLER VIA R10;                                    *
***********************************************************************
         SPACE
COMM900  DS    0H
         QEDIT ORIGIN=COMCIBPT,BLOCK=(R6)
         SPACE
         BR    R10                 RETURN TO CALLER
         SPACE
BCTEXT   BC    *-*,COMM380           EXECUTED - AFTER CMD LEN COMPARE
CLCTEXT  CLC   CIBDATA(*-*),0(R2)    EXECUTED - COMPARE COMMAND TEXT
MVCOKTX  MVC   OKCMDTX(*-*),CIBDATA  EXECUTED - COMPLETE MESSAGE
MVCBADTX MVC   BADCMDTX(*-*),CIBDATA EXECUTED - COMPLETE MESSAGE
         SPACE
         DROP  R6,R7
         EJECT
***********************************************************************
* COMDQ:                  /*  PROCESS MODIFY DQ OPERATOR COMMAND  */  *
*        DO UNTIL (END OF TLBLABEL QUEUE);                            *
*          COUNT QUEUED ENTRY;                                        *
*        END;                                                         *
*        FORMAT AND ISSUE QUEUE CONTENTS COMMAND;                     *
*        RETURN TO CALLER VIA R9;                                     *
***********************************************************************
         SPACE
COMDQ    DS    0H
         XR    R15,R15             COUNTER
         LM    R6,R7,TLBLPTRS      GET HEAD AND TAIL
         LTR   R8,R6               ANYTHING THERE?
         BZ    COMDQ80             NOPE...DONE
         USING TLBLABEL,R8
         SPACE
COMDQ20  DS    0H
         LA    R15,1(,R15)         BUMP COUNTER
         CR    R8,R7               ARE WE AT THE INITIAL TAIL?
         BE    COMDQ80             YEP...DONE
         L     R8,LABELNXT         NEXT ENTRY ON CHAIN
         B     COMDQ20
         SPACE
COMDQ80  DS    0H
         CVD   R15,DWORK           CONVERT R15 TO PACKED
         MVC   DQCNT,EDITCNT       EDIT PATTERN
         ED    DQCNT,DWORK+6       UNPACK IT
         SPACE
         L     R0,CONSOLE          GET CONSOLE ID
         WTO   MF=(E,DQMSG)
         SPACE
         BR    R9                  RETURN TO CALLER
         EJECT
***********************************************************************
* COMSTART:            /*  PROCESS MODIFY START OPERATOR COMMAND  */  *
*        SET START REQUEST FLAG;                                      *
*        RESET VERIFY REQUEST, STOP REQUEST AND VERIFY IN PROGRESS;   *
*        RETURN TO CALLER VIA R9;                                     *
***********************************************************************
         SPACE
COMSTART DS    0H
         OI    STATUS,STATSTRT     START REQUEST
         NI    STATUS,X'FF'-(STATSTPR+STATVFY+STATVFYP) CLEAR THESE
         BR    R9                  RETURN TO CALLER
         SPACE 3
***********************************************************************
* COMSTOP:              /*  PROCESS MODIFY STOP OPERATOR COMMAND  */  *
*        SET STOP REQUEST FLAG;                                       *
*        RESET VERIFY REQUEST, START REQUEST AND VERIFY IN PROGRESS;  *
*        RETURN TO CALLER VIA R9;                                     *
***********************************************************************
         SPACE
COMSTOP  DS    0H
         OI    STATUS,STATSTPR     STOP REQUEST
         NI    STATUS,X'FF'-(STATSTRT+STATVFY+STATVFYP) CLEAR THESE
         BR    R9                  RETURN TO CALLER
         SPACE 3
***********************************************************************
* COMVERFY:           /*  PROCESS MODIFY VERIFY OPERATOR COMMAND  */  *
*        SET START AND VERIFY REQUEST FLAGS;                          *
*        RESET STOP REQUEST AND VERIFY IN PROGRESS;                   *
*        RETURN TO CALLER VIA R9;                                     *
***********************************************************************
         SPACE
COMVERFY DS    0H
         OI    STATUS,STATSTRT+STATVFY          START, VERIFY REQUEST
         NI    STATUS,X'FF'-(STATSTPR+STATVFYP) CLEAR THESE
         BR    R9                  RETURN TO CALLER
         SPACE 3
***********************************************************************
* COMPURGE:            /*  PROCESS MODIFY PURGE OPERATOR COMMAND  */  *
*        SET PURGE REQUEST FLAG;                                      *
*        RETURN TO CALLER VIA R9;                                     *
***********************************************************************
         SPACE
COMPURGE DS    0H
         OI    STATUS,STATPURG     PURGE REQUEST
         BR    R9                  RETURN TO CALLER
         EJECT
***********************************************************************
* COMSTATE:                   /*  PROCESS STATE OPERATOR COMMAND  */  *
*        COMPLETE AND ISSUE STATE MESSAGE;                            *
*        RETURN TO CALLER VIA R9;                                     *
***********************************************************************
         SPACE
COMSTATE DS    0H
         MVC   STATEMLU,LUNAME     LU NAME TO MESSAGE
         SPACE
         TM    STATUS,STATVFY+STATVFYP  VERIFY IN PROGRESS?
         BNZ   COMST100            YEP...SET TEXT
         TM    STATUS,STATSTOP     STOPPED?
         BO    COMST200            YEP...SET TEXT
         SPACE
         MVC   STATEMST,=CL20'STARTED'
         B     COMST800            GO PRINT IT
         SPACE
COMST100 DS    0H
         MVC   STATEMST,=CL20'VERIFY IN PROGRESS'
         B     COMST800            GO PRINT IT
         SPACE
COMST200 DS    0H
         MVC   STATEMST,=CL20'STOPPED'
         SPACE
COMST800 DS    0H
         L     R0,CONSOLE          GET CONSOLE ID
         WTO   MF=(E,STATEMSG)
         SPACE
         BR    R9                  RETURN TO CALLER
         SPACE 3
***********************************************************************
* COMTERM:                     /*  PROCESS STOP OPERATOR COMMAND  */  *
*        SET TERMINATION REQUEST FLAG;                                *
*        ISSUE 'STOP COMMAND ACCEPTED' MESSAGE;                       *
*        RETURN TO CALLER VIA R9;                                     *
***********************************************************************
         SPACE
COMTERM  DS    0H
         OI    STATUS,STATTERM     STOP (TERMINATE) REQUEST
         SPACE
         WTO   MF=(E,OKSTOP)
         SPACE
         BR    R9                  RETURN TO CALLER
         EJECT
***********************************************************************
*        WORKAREAS                                                    *
***********************************************************************
         SPACE
SAVEAREA DS    18F
VXSAVE   DS    18F                 VTAM EXIT SAVE AREA
SAVE9    DS    F                   INTERNAL SUBROUTINE LINKAGE
SAVEPARM DS    A                   PARM LIST POINTER
COMM     DS    A                   COMMUNICATIONS AREA
SSCVTA   DS    A                   SSCVT ADDRESS
TLBLCVTA DS    A                   TLBLCVT ADDRESS
         SPACE
CONSOLE  DS    A(*-*)
CONID    EQU   CONSOLE+3,1,C'X'
         SPACE
FLAGS    DS    0F
STATUS   DC    X'00'               GENERAL STATUS
STATTERM EQU   X'80'               TERMINATION REQUESTED
STATSTOP EQU   X'40'               OUTPUT STOPPED
STATSTPR EQU   X'20'               STOP REQUESTED
STATSTRT EQU   X'10'               START REQUESTED
STATVFY  EQU   X'08'               VERIFY REQUESTED
STATVFYP EQU   X'04'               VERIFY IN PROGRESS
STATPURG EQU   X'02'               PURGE QUEUE REQUESTED
PARMOPTS DC    X'00'               RESERVED
PARMCLRQ EQU   X'80'               COLD START - CLEAR QUEUE
PARMBADP EQU   X'01'               BAD PARM FIELD
FLAG3    DC    X'00'               RESERVED
FLAG4    DC    X'00'               RESERVED
         SPACE
ECBLIST  DS    (0*2)A
WTDECBA  DS    A                   WORK-TO-DO ECB ADDRESS
SMECBA   DS    A                   STOP/MODIFY ECB ADDRESS
         SPACE
LUNAME   DC    CL8' '              VTAM PRINTER LU NAME
STYPE    DC    CL8'WARM'           START TYPE
ISTATE   DC    CL8'VERIFY'         INITIAL STATE
LOGMODE  DC    CL8'DSILGMOD'       LOGON MODE SET NAME
         SPACE
DWORK    DS    0D                  DECIMAL CONVERSION WORKAREA
HEXWORK  DS    CL9                 HEX CONVERSION WORKAREA
         EJECT
***********************************************************************
*        CONSTANTS AND LITERALS                                       *
***********************************************************************
         SPACE
SSNAME   DS    0CL4                    SUBSYSTEM NAME FOR SSCVT LOOKUP
QNAME    DC    CL8'TLBL'               QNAME FOR ACTIVE LOCK
RNAME    DC    CL(L'TLBLRNAM)'ACTIVE'  RNAME FOR ACTIVE LOCK
APPLNAME DC    AL1(8),CL8'TAPELABL'    VTAM APPLICATION NAME
         SPACE
FREEBLOK DC    0A(*-*),AL1(LABELSBP),AL3(LABELLEN)
GETMCVT  DC    0A(*-*),AL1(TLBLSUBP),AL3(TLBLLEN)
         SPACE
GETSUP   MODESET MODE=SUP,MF=L
GETPROB  MODESET MODE=PROB,MF=L
GETZERO  MODESET KEY=ZERO,MF=L
GETNZERO MODESET KEY=NZERO,MF=L
         SPACE
LOCKTEST ENQ   (QNAME,RNAME,E,L'TLBLRNAM,SYSTEM),RET=TEST,MF=L
LOCKUSE  ENQ   (QNAME,RNAME,E,L'TLBLRNAM,SYSTEM),RET=USE,MF=L
LOCKFREE ENQ   (QNAME,RNAME,E,L'TLBLRNAM,SYSTEM),RET=NONE,MF=L
         SPACE
OCACBL   OPEN  PRACB,MF=L
         SPACE
EDITCNT  DC    X'40202120'           EDIT PATTERN - 3 DIGITS
EDITDATE DC    X'21204B202020'       EDIT PATTERN - YY.DDD
EDITTIME DC    X'4020217A20207A2020' EDIT PATTERN - HH:MM:SS
         SPACE
HEXTABLE EQU   *-C'0',256,C'X'
         DC    C'0123456789ABCDEF'
         SPACE
PARMTBL  DS    0D                  LIKE A PARSE TABLE FOR THE PARM
*                                  FIELD. THIS TABLE IS DEPENDENT ON
*                                  THE ORDER IN THE PARM STRING.
         DC    A(LUNAME,L'LUNAME-1)
         DC    A(STYPE,L'STYPE-1)
         DC    A(ISTATE,L'ISTATE-1)
         DC    A(LOGMODE,L'LOGMODE-1)
PARMTBLC EQU   (*-PARMTBL)/L'PARMTBL
         SPACE
         DS    0D
DELIMTBL DS    XL256'00'           TRT TABLE TO LOCATE DELIMITERS
         ORG   DELIMTBL+C','
         DC    C','
         ORG
         SPACE
PRNTABLE DS    0D
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'79797979797979797979797979797979'  0
         DC    X'79797979797979797979797979797979'  1
         DC    X'79797979797979797979797979797979'  2
         DC    X'79797979797979797979797979797979'  3
         DC    X'407979797979797979794A4B4C4D4E4F'  4
         DC    X'507979797979797979795A5B5C5D5E5F'  5
         DC    X'606179797979797979796A6B6C6D6E6F'  6
         DC    X'797979797979797979797A7B7C7D7E7F'  7
         DC    X'79818283848586878879797979797979'  8
         DC    X'79919293949596979879797979797979'  9
         DC    X'79A1A2A3A4A5A6A7A8A9797979797979'  A
         DC    X'79797979797979797979797979797979'  B
         DC    X'C0C1C2C3C4C5C6C7C8C9797979797979'  C
         DC    X'D0D1D2D3D4D5D6D7D8D9797979797979'  D
         DC    X'E0E1E2E3E4E5E6E7E8E9797979797979'  E
         DC    X'F0F1F2F3F4F5F6F7F8F9797979797979'  F
         SPACE
         DS    0F
VFYPATRN DC    XL(LABELLEN)'00'    DUMMY TLBLABEL FOR VERIFY
         ORG   VFYPATRN-TLBLABEL+LABELCHR
         DC    (LABELCHL)C'X'
         ORG
         SPACE
         LTORG
         EJECT
***********************************************************************
*        MESSAGES AND COMMAND ROUTING TABLES                          *
***********************************************************************
         SPACE
         PRINT NOGEN
NOLUNAME WTO   'PARAMETER LUNAME NOT SPECIFIED',                       +
               ROUTCDE=(2,11),DESC=(4,7),MF=L
         SPACE
BADSTYPE WTO   'PARAMETER START TYPE INVALID - MUST BE HOT, WARM OR COL+
               D',ROUTCDE=(2,11),DESC=(4,7),MF=L
         SPACE
BADISTAT WTO   'PARAMETER INITIAL STATE INVALID - MUST BE START, STOP O+
               R VERIFY',ROUTCDE=(2,11),DESC=(4,7),MF=L
         SPACE
BADLOCK  WTO   'UNABLE TO GET ACTIVE LOCK',                            +
               ROUTCDE=(2,11),DESC=(4,7),MF=L
         SPACE
INITCPLT WTO   'TAPE LABEL WRITER INITIALIZATION COMPLETE',            +
               ROUTCDE=(2,11),DESC=(4,7),MF=L
         SPACE
BADCMD   WTO   'INVALID OPERATOR COMMAND: 12345678901234567890123456789+
               012345678901234567890',                                 +
               MCSFLAG=REG0,MF=L
BADCMDTX EQU   BADCMD+2+2+26,50,C'C' VARIABLE PART OF MESSAGE
         SPACE
PARMMSG  WTO   'LU NAME=12345678 START TYPE=1234 INITIAL STATE=123456 L+
               OGMODE=12345678',                                       +
               ROUTCDE=(2,11),DESC=(4,7),MF=L
PMSGLU   EQU   PARMMSG+2+2+08,8,C'C'
PMSGSTRT EQU   PARMMSG+2+2+28,4,C'C'
PMSGSTAT EQU   PARMMSG+2+2+47,6,C'C'
PMSGLMOD EQU   PARMMSG+2+2+62,8,C'C'
         SPACE
OKCMD    WTO   'OPERATOR COMMAND COMPLETED: 123456789012345678901234567+
               89012345678901234567890',                               +
               MCSFLAG=REG0,MF=L
OKCMDTX  EQU   OKCMD+2+2+28,50,C'C'  VARIABLE PART OF MESSAGE
         SPACE
OKSTOP   WTO   'STOP COMMAND ACCEPTED',                                +
               MCSFLAG=REG0,MF=L
         SPACE
STATEMSG WTO   'LU=12345678  STATE=12345678901234567890',              +
               MCSFLAG=REG0,MF=L
STATEMLU EQU   STATEMSG+2+2+03,8,C'C'
STATEMST EQU   STATEMSG+2+2+19,20,C'C'
         SPACE
ERRACB   WTO   'ERROR OPENING VTAM ACB  R15=1234  ACBERFLG=12',        +
               ROUTCDE=(2,11),DESC=(4,7),MF=L
ERRACB15 EQU   ERRACB+2+2+28,4,C'C'
ERRACBFL EQU   ERRACB+2+2+43,2,C'C'
         SPACE
ERRRPL   WTO   'VTAM RPL REQUEST ERROR  R15=1234  RPLREQ=12  RPLRTNCD=1+
               2  RPLFDB2=12  SENSE=12345678',                         +
               ROUTCDE=(2,11),DESC=(4,7),MF=L
ERRRPL15 EQU   ERRRPL+2+2+28,4,C'C'
ERRRPLRQ EQU   ERRRPL+2+2+41,2,C'C'
ERRRPLRC EQU   ERRRPL+2+2+54,2,C'C'
ERRRPLRS EQU   ERRRPL+2+2+66,2,C'C'
ERRRPLFB EQU   ERRRPL+2+2+76,8,C'C'
         SPACE
DQMSG    WTO   '1234 TAPE LABELS CURRENTLY QUEUED',                    +
               MCSFLAG=REG0,MF=L
DQCNT    EQU   DQMSG+2+2+00,4,C'C'
         SPACE
INTOEXIT WTO   'TLBL VTAM 1234567 EXIT ENTERED -- REASON=12',          +
               ROUTCDE=(2,11),DESC=(4,7),MF=L
INTOEXNM EQU   INTOEXIT+2+2+10,7,C'C'
INTOEXRC EQU   INTOEXIT+2+2+41,2,C'C'
         SPACE 3
MODFYTBL DS    0F                  MODIFY COMMAND ROUTING TABLE.
         DC    A(CDQ,COMDQ),AL1(CMDEXACT,L'CDQ,*-*,*-*)
         DC    A(CPURGE,COMPURGE),AL1(CMDEXACT,L'CPURGE,*-*,*-*)
         DC    A(CSTART,COMSTART),AL1(CMDEXACT,L'CSTART,*-*,*-*)
         DC    A(CSTATE,COMSTATE),AL1(CMDEXACT,L'CS,*-*,*-*)
         DC    A(CSTATE,COMSTATE),AL1(CMDEXACT,L'CSTATE,*-*,*-*)
         DC    A(CSTOP,COMSTOP),AL1(CMDEXACT,L'CSTOP,*-*,*-*)
         DC    A(CVERIFY,COMVERFY),AL1(CMDEXACT,L'CVERIFY,*-*,*-*)
         DC    A(CVERIFY,COMVERFY),AL1(CMDEXACT,L'CV,*-*,*-*)
MODFYTBC EQU   (*-MODFYTBL)/CMDTBLL NUMBER OF ENTRIES IN TABLE
         SPACE
CDQ      DC    C'DQ'
CPURGE   DC    C'PURGE'
CS       DC    C'S'
CSTART   DC    C'START'
CSTATE   DC    C'STATE'
CSTOP    DC    C'STOP'
CV       DC    C'V'
CVERIFY  DC    C'VERIFY'
         EJECT
***********************************************************************
*        VTAM CONTROL BLOCKS                                          *
***********************************************************************
         SPACE
PRACB    ACB   AM=VTAM,APPLID=APPLNAME,EXLST=PREXLST
         SPACE
PREXLST  EXLST AM=VTAM,LOSTERM=VXLOSTRM,TPEND=VXTPEND
         SPACE
PRNIB    NIB   LISTEND=YES,MODE=RECORD
         SPACE
PRRPL1   RPL   AM=VTAM,ACB=PRACB
         SPACE
PRRPL2   RPL   AM=VTAM,ACB=PRACB,                                      +
               AREA=BUFFER,AREALEN=BUFLEN,RECLEN=BUFLEN,               +
               CONTROL=DATA,POST=RESP,STYPE=REQ,                       +
               BRACKET=(BB,EB),RESPOND=(NEX,FME,NRRN),CHAIN=ONLY
         SPACE 3
***********************************************************************
*        328X DATASTREAM CONTROL CHARACTERS                           *
***********************************************************************
         SPACE
EW       EQU   X'F5'               ERASE WRITE COMMAND
WCC      EQU   X'C8'               WCC - RESET, NOFMT, START PRINT
FF       EQU   X'0C'               FORM FEED
CR       EQU   X'0D'               CARRIAGE RETURN
NL       EQU   X'15'               NEW LINE
EM       EQU   X'19'               END MESSAGE
SF       EQU   X'1D'               START FIELD
FA       EQU   X'40'               FIELD ATTRIBUTE CHARACTER
         EJECT
***********************************************************************
*        PRINTER OUTPUT AND FORMATTING BUFFER                         *
***********************************************************************
         SPACE
BUFFER   DS    0D
         SPACE
*              LINE 1
         SPACE
         DC    AL1(EW,WCC,FF),CL13' ' NOTE ONE BYTE LESS SPACE ON LINE1
BUFVOL1  DS    CL(L'LABELSER)
         DC    AL1(CR),CL14' '
BUFVOL2  DS    CL(L'LABELSER)
         SPACE
*              LINE 2
         SPACE
         DC    AL1(NL)
         SPACE
*              LINE 3
         SPACE
         DC    AL1(NL),CL5' '
BUFDEV1  DS    CL(L'LABELDEV)
         DC    CL7' '
BUFVNO1  DS    CL(L'LABELVNO)
         DC    CL6' '
BUFDEN1  DS    CL(L'LABELDEN)
         DC    AL1(CR),CL5'UNIT'
BUFDEV2  DS    CL(L'LABELDEV)
         DC    CL7'  REEL'
BUFVNO2  DS    CL(L'LABELVNO)
         DC    CL6'  DEN'
BUFDEN2  DS    CL(L'LABELDEN)
         SPACE
*              LINE 4
         SPACE
         DC    AL1(NL),CL10' '
BUFLID1  DS    CL(L'LABELLID)
         DC    CL8' '
BUFLAB1  DS    CL(L'LABELTYP)
         DC    AL1(CR),CL10'ACF2 USER'
BUFLID2  DS    CL(L'LABELLID)
         DC    CL8'  LABEL'
BUFLAB2  DS    CL(L'LABELTYP)
         SPACE
*              LINE 5
         SPACE
         DC    AL1(NL),CL5' '
BUFDAT1  DS    CL(L'EDITDATE)
BUFTIM1  DS    CL(L'EDITTIME)
         DC    CL7' '
BUFSIT1  DS    CL(L'LABELSIT)
         DC    AL1(CR),CL5'TIME'
BUFDAT2  DS    CL(L'EDITDATE)
BUFTIM2  DS    CL(L'EDITTIME)
         DC    CL7'  SITE '
BUFSIT2  DS    CL(L'LABELSIT)
         SPACE
*              LINE 6
         SPACE
         DC    AL1(NL),CL4' '
BUFJOB1  DS    CL(L'LABELJOB)
         DC    CL1'('
BUFJID1  DS    CL5
         DC    CL7')'
BUFSTP1  DS    CL(L'LABELSTP)
         DC    AL1(CR),CL4'JOB'
BUFJOB2  DS    CL(L'LABELJOB)
         DC    CL1'('
BUFJID2  DS    CL5
         DC    CL7') STEP'
BUFSTP2  DS    CL(L'LABELSTP)
         SPACE
*              LINE 7
         SPACE
         DC    AL1(NL),CL7' '
BUFDSN1A DS    CL26
         DC    AL1(CR),CL7'DSNAME'
BUFDSN2A DS    CL(L'BUFDSN1A)
         SPACE
*              LINE 8
         SPACE
BREAKRNG EQU   8                   MAX LENGTH TO SEARCH FOR BREAK CHAR
         DC    AL1(NL),CL((7+L'BUFDSN1A)-L'BUFDSN1B)' '
BUFDSN1B DS    CL(L'LABELDSN-L'BUFDSN1A+BREAKRNG)
         DC    AL1(CR),CL((7+L'BUFDSN1A)-L'BUFDSN1B)' '
BUFDSN2B DS    CL(L'LABELDSN-L'BUFDSN1A+BREAKRNG)
         SPACE
         DC    AL1(NL,NL,C'.',EM)
         SPACE
BUFLEN   EQU   *-BUFFER
         EJECT
***********************************************************************
*        DSECTS                                                       *
***********************************************************************
         SPACE
         PRINT NOGEN
         CVT   DSECT=YES
         IEFJESCT
         IEFJSCVT
CIB      DSECT
         IEZCIB
COMMD    DSECT
         IEZCOM
         IFGACB DSECT=YES,AM=VTAM
         IFGRPL DSECT=YES,AM=VTAM
         IHAASCB
         IHAECB
         IHAPSA
         ISTDNIB
         SPACE
         PRINT GEN
         REGS
         SPACE 2
CMDTABLE DSECT ,                   MODIFY COMMAND ROUTING
CMDTEXT  DS    A                   ADDRESS OF MODIFY TEXT
CMDENTRY DS    A                   PROCESSING ROUTINE ENTRY POINT
CMDCOMPR DS    X                   MASK FOR BRANCH AFTER COMPARE
CMDEXACT EQU   X'70'               LENGTHS MUST MATCH EXACTLY
CMDOPERS EQU   X'20'               COMMAND CAN BE LONGER (OPERANDS)
CMDTLEN  DS    X                   LENGTH THAT MUST MATCH
CMDRESV  DS    XL2                 RESERVED
CMDTBLL  EQU   *-CMDTABLE          LENGTH IN BYTES
         SPACE 2
         TLBLCVT
         SPACE 2
         TLBLABEL
         SPACE 3
         END
