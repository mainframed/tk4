PRC      TITLE 'ADAEX2 - ADABAS USER EXIT 2.'
********************************************************************
*                                                                  *
* NAME - ADAEX2.                                                   *
*                                                                  *
* DESCRIPTION -                                                    *
*  THIS IS THE ADABAS SWITCH LOG EXIT. WE GET CONTROL FROM ADABAS  *
*  WHEN A PROTECTION LOG OR COMMAND LOG SWITCH TAKES PLACE. R1     *
*  TELLS US WHETHER 1 OR BOTH PROTECTION OR COMMAND LOGS NEED      *
*  DUMPING. HERE IS WHAT WE DO IN THIS MODULE (NOTE: "AAAAAAAA"    *
*  IS THE ADABAS JOBNAME, "JJJJJJJJ" IS THE SUBMITTED JOBNAME):    *
*                                                                  *
*  R1 > 0 (1 PROTECTION LOG NEEDS DUMPING) :                       *
*    1). WTO MSG 'ADA010I AAAAAAAA: ONE PROTECTION LOG FULL.'      *
*    2). SUBMIT JCL TO INTRDR FILE FROM PROJCL FILE.               *L04
*    3). WTO MSG 'ADA020I AAAAAAAA: JOB JJJJJJJJ WILL COPY 1 LOG.' *
*    4). RETURN, CC=0.                                             *
*                                                                  *
*  R1 = 0 (2 PROTECTION LOGS NEEDS DUMPING) :                      *
*    1). WTO MSG 'ADA010I AAAAAAAA: BOTH PROTECTION LOGS FULL.'    *
*    2). SUBMIT JCL TO INTRDR FILE FROM PROJCL FILE.               *L04
*    3). WTO MSG 'ADA020I AAAAAAAA: JOB JJJJJJJJ WILL COPY 1 LOG.' *
*    4). WTO MSG '*ADA030A AAAAAAAA: IS WAITING FOR JOB JJJJJJJJ   *
*                 TO RUN.'                                         *
*          NOTE: THIS MESSAGE WILL STAY ON THE OPERATORS SCREEN    *
*                UNTIL "OK" IS RESPONDED TO THE NEXT MSG, ADA040A. *
*    5). WTOR MSG '*XX,ADA040A AAAAAAAA: REPLY "OK" WHEN JJJJJJJJ  *
*                 IS DONE.'                                        *
*    6). WAIT UNTIL "OK" HAS BEEN REPLIED. REMEMBER, BOTH LOGS     *
*          ARE FULL. WE HAVE TO WAIT HERE BECAUSE WE DON'T WANT    *
*          ADABAS OVERWRITING A LOG FILE BEFORE IT HAS BEEN COPIED.*
*          AT PRC, THE LAST STEP OF THE COPY LOG JOB AUTOMATICALLY *
*          REPLIES "OK" TO MSG ADA040A.  MESSAGE ADA040A IS NEVER  *
*          EVEN SEEN BY THE OPERATOR ON THE CONSOLE BECAUSE IS IT  *
*          SUPPRESSED BY THE MVS MPF FACILITY.                     *
*    7). RETURN, CC=0.                                             *
*    8). WE HAVE NOTICED THAT WHEN 2 PROTECTION LOGS NEED DUMPING, *
*        ADABAS DRIVES THIS EXIT TWICE IN A ROW, ONCE FOR THE BOTH-*
*        LOGS-FULL CONDITION, AND AGAIN FOR 1-LOG-FULL CONDITION.  *
*        THE ADABAS DUMP LOG UTILITY WILL ONLY DUMP 1 LOG PER      *
*        INVOCATION, SO ADABAS CALLS THIS EXIT TWICE HOPING THAT   *
*        AT EACH CALL WE WILL DUMP ONE LOG.                        *
*                                                                  *
*  R1 = -1 (1 COMMAND LOG NEEDS DUMPING) :                         *
*    1). WTO MSG 'ADA010I AAAAAAAA: ONE COMMAND LOG FULL.'         *L03
*    2). SUBMIT JCL TO INTRDR FILE FROM CMDJCL FILE.               *L04
*    3). WTO MSG 'ADA020I AAAAAAAA: JOB JJJJJJJJ WILL COPY 1 LOG.' *L03
*    4). RETURN, CC=0.                                             *
*                                                                  *
*                                                                  *
*  R1 = -2 (BOTH COMMAND LOGS NEED DUMPING) :                      *
*    1). WTO MSG 'ADA010I AAAAAAAA: BOTH COMMAND LOGS FULL.'       *L03
*    2). SUBMIT JCL TO INTRDR FILE FROM CMDJCL FILE.               *L04
*    3). WTO MSG 'ADA020I AAAAAAAA: JOB JJJJJJJJ WILL COPY 1 LOG.' *L03
*    4). WTO MSG '*ADA030A AAAAAAAA: IS WAITING FOR JOB JJJJJJJJ   *L03
*                 TO RUN.'                                         *L03
*          NOTE: THIS MESSAGE WILL STAY ON THE OPERATORS SCREEN    *L03
*                UNTIL "OK" IS RESPONDED TO THE NEXT MSG, ADA040A. *L03
*    5). WTOR MSG '*XX,ADA050A AAAAAAAA: REPLY "OK" WHEN JJJJJJJJ  *L03
*                 IS DONE.'                                        *L03
*    6). WAIT UNTIL "OK" HAS BEEN REPLIED. REMEMBER, BOTH LOGS     *L03
*          ARE FULL. WE HAVE TO WAIT HERE BECAUSE WE DON'T WANT    *L03
*          ADABAS OVERWRITING A LOG FILE BEFORE IT HAS BEEN COPIED.*L03
*          AT PRC, THE LAST STEP OF THE COPY LOG JOB AUTOMATICALLY *L03
*          REPLIES "OK" TO MSG ADA050A.  MESSAGE ADA050A IS NEVER  *L04
*          EVEN SEEN BY THE OPERATOR ON THE CONSOLE BECAUSE IS IT  *L03
*          SUPPRESSED BY THE MVS MPF FACILITY.                     *L03
*    7). RETURN, CC=0.                                             *L03
*    8). WE HAVE NOTICED THAT WHEN 2 COMMAND LOGS NEED DUMPING,    *L03
*        ADABAS DRIVES THIS EXIT TWICE IN A ROW, ONCE FOR THE BOTH-*L03
*        LOGS-FULL CONDITION, AND AGAIN FOR 1-LOG-FULL CONDITION.  *L03
*        THE ADABAS DUMP LOG UTILITY WILL ONLY DUMP 1 LOG PER      *L03
*        INVOCATION, SO ADABAS CALLS THIS EXIT TWICE HOPING THAT   *L03
*        AT EACH CALL WE WILL DUMP ONE LOG.                        *L03
*                                                                  *
*  IF WE ARE ENTERED WITH AN UNKNOWN ENTRY CODE, WE WTO MESSAGE    *
*    'ADA050E BAD ADAEX2 ENTRY CODE, IGNORED.' AND RETURN, CC=12.  *
*                                                                  *
*  IF EITHER INPUT OR OUTPUT FILE DOESN'T OPEN, WE WTO MESSAGE     *
*    'ADA060E BAD RC FROM OPEN, NO JOB SUBMITTED.' AND RETURN,     *
*    CC=12.                                                        *
*                                                                  *
* TO USE -                                                         *
*   INCLUDE THE FOLLOWING JCL IN YOUR ADABAS PROC:                 *
*     //INTRDR  DD SYSOUT=(*,INTRDR)                               *
*   INCLUDE THE FOLLOWING JCL FOR PROTECTION LOGGING:              *L03
*     //PROJCL  DD DSN=YOUR.PROLOG.JCL,DISP=SHR                    *L04
*   INCLUDE THE FOLLOWING JCL FOR COMMAND LOGGING:                 *L03
*     //CMDJCL  DD DSN=YOUR.CMDLOG.JCL,DISP=SHR                    *L04
*   ALSO, LINK THIS MODULE INTO THE ADABAS STEPLIB OR A LINKLIST   *
*   LIBRARY. IT IS REENTRANT.                                      *
*                                                                  *
* LOG -                                                            *
*   04/01/87 L01 PTW IMPLEMENTED                                   *L01
*   05/20/87 L02 PTW FREEPOOL ADDED                                *L02
*   08/10/87 L03 PTW COMMAND LOGGING ADDED                         *L03
*   11/10/87 L04 PTW USE ONLY PROJCL AND CMDJCL FILES, MSG ADA050A *L04
*                    FOR 2 CLOGS FULL, MERGE LOGIC.                *L04
*                                                                  *
********************************************************************
         LCLC  &CSECT
&CSECT   SETC  'ADAEX2'
&CSECT   CSECT ,
********************************************************************
*                                                                  *
*        I N I T I A L I Z E                                       *
*                                                                  *
********************************************************************
         PRINT NOGEN
         SAVE  (14,12),,&CSECT-&SYSDATE-&SYSTIME
         LR    R12,R15            ESTABLISH BASE.
         USING &CSECT,R12         TELL ASSEMBLER.
         GETMAIN RU,LV=DYNLEN     GET DYNAMIC AREA.
         LR    R2,R13             SAVE AREA
         LR    R13,R1             SAVE AREA
         USING DYNAMIC,R13        TELL ASSEMBLER.
         LA    R0,DYNAMIC         ZERO
         L     R1,=A(DYNLEN)        DYNAMIC
         LR    R14,R0                 STORAGE.
         SLR   R15,R15            R15 = 0.
         MVCL  R0,R14             DO IT.
         ST    R2,4(,R13)         BACK CHAIN.
         ST    R13,8(,R2)         FORWARD CHAIN.
         XC    RC,RC              ASSUME GOOD RC.
         MVC   INJCL(INJCLL),XINJCL INITIALIZE MACRO LISTS. INPUT DCB.
         MVC   INTRDR(INTRDRL),XINTRDR OUTPUT DCB.
         MVC   OPEN(OPENLEN),XOPEN  OPEN LIST.
         MVC   WTO(WTOLEN),XWTO   WTO LIST.
         MVI   CALL,0             ZERO CALL FLAG.                   L04
         MVI   WTOFLG,0           ZERO WTO FLAG.
         L     R2,PSAAOLD-PSA     GET OUR ADABAS JOBNAME. R2=A(ASCB).
         L     R3,ASCBJBNI-ASCB(,R2) IF WE'RE A JOB, ASCBJBNI-> NAME.
         LTR   R3,R3              ELSE,
         BNZ   *+8                  IF WE'RE AN STC OR TSU,
         L     R3,ASCBJBNS-ASCB(,R2) ASCBJBNS-> NAME.
         MVC   OURJOB,0(R3)       SAVE NAME.
********************************************************************
*                                                                  *
*        P A R M   P R O C E S S I N G                             *
*                                                                  *
********************************************************************
         L     R2,4(,R13)         DIG BACK THRU SAVEAREAS
         L     R2,24(,R2)           FOR THE A(PARM).
         LTR   R2,R2              R2 = R1 UPON ENTRY TO THIS MODULE.
         BP    DOLOG1             IF POSITIVE, ASSUME 1 PROLOG FULL.L04
         BZ    DOLOG2             IF ZERO, IT'S BOTH PROLOGS FULL.  L04
         CH    R2,=H'-1'          IF -1, IT'S 1 CMDLOG FULL.
         BE    DOCMD1                                               L04
         CH    R2,=H'-2'          IF -2, IT'S 2 CMDLOGS FULL.
         BE    DOCMD2                                               L04
         B     BADCODE            ELSE, PUT OUT A BAD CODE MSG.
********************************************************************
*                                                                  *
*        M A I N L I N E                                           *
*                                                                  *
********************************************************************
DOLOG1   DS    0H                 1 PROTECTION LOG FULL.            L04
         MVI   CALL,PLOG1                                           L04
         B     DOLOG                                                L04
DOLOG2   DS    0H                 2 PROTECTION LOGS FULL.           L04
         MVI   CALL,PLOG2                                           L04
DOLOG    DS    0H                                                   L04
         BAL   R10,FMTMSG         INIT MSG AREA.
         MVC   MSGID,=CL8'ADA010I' MOVE IN MSGID.
         MVC   MSGTEXT(L'MSGLOG1),MSGLOG1 MOVE IN MSGLOG1 TEXT.
         CLI   CALL,PLOG1                                           L04
         BE    *+10                                                 L04
         MVC   MSGTEXT(L'MSGLOG2),MSGLOG2 MOVE IN MSGLOG2 TEXT.
         BAL   R10,DOWTO          WTO MSGLOG1.
         MVC   (DCBDDNAM-IHADCB)+INJCL,=CL8'PROJCL' USE PROJCL DDN. L04
         BAL   R10,DOJOB          SUBMIT PROJCL JOB.                L04
         BAL   R10,FMTMSG         REINIT MSG ARE.
         MVC   MSGID,=CL8'ADA020I' MOVE IN MSGID.
         MVC   MSGTEXT(L'MSGSUB),MSGSUB MOVE IN MSGSUB TEXT.
         MVC   MSGSJOB+MSGTEXT,JCLJOB PUT SUBMITTED JOBNAME IN MSG.
         BAL   R10,DOWTO          WTO MSGSUB.
         CLI   CALL,PLOG1         IF  1 LOG FULL,                   L04
         BE    RETURN               ALL DONE.                       L04
         BAL   R10,FMTMSG         REIINIT MSG AREA.
         MVC   MSGID,=CL8'ADA030A' MOVE IN MSGID.
         MVC   MSGTEXT(L'MSGRUN2),MSGRUN2 MOVE IN MSGRUN2 TEXT.
         MVC   MSGRJOB2+MSGTEXT,JCLJOB PUT SUBMITTED JOBNAME IN MSG.
         OI    WTOFLG,NONROLL+DODOM MAKE MSG NONROLL AND DELETE AT END.
         BAL   R10,DOWTO          WTO MSGRUN2.
         MVC   DOMMSGID,SAVMSGID  SAVE RETURNED ID FOR DOM.
         BAL   R10,FMTMSG         REINIT MSG AREA.
         MVC   MSGID,=CL8'ADA040A' MOVE IN MSGID.
         MVC   MSGTEXT(L'MSGREPLY),MSGREPLY MOVE IN MSGREPLY TEXT.
         MVC   MSGPJOB1+MSGTEXT,JCLJOB PUB SUBMITTED JOBNAME IN MSG.
         BAL   R10,DOWTOR         WTOR MSGREPLY.
         B     RETURN             ALL DONE.
DOCMD1   DS    0H                 1 COMMAND LOG FULL.               L04
         MVI   CALL,CLOG1                                           L04
         B     DOCMD                                                L04
DOCMD2   DS    0H                 2 COMMAND LOGS FULL.              L04
         MVI   CALL,CLOG2                                           L04
DOCMD    DS    0H
         BAL   R10,FMTMSG         INIT MSG AREA.                    L03
         MVC   MSGID,=CL8'ADA010I' MOVE IN MSGID.                   L03
         MVC   MSGTEXT(L'MSGCMD1),MSGCMD1 MOVE IN MSGCMD1 TEXT.     L03
         CLI   CALL,CLOG1                                           L04
         BE    *+10                                                 L04
         MVC   MSGTEXT(L'MSGCMD2),MSGCMD2 MOVE IN MSGCMD2 TEXT.     L04
         BAL   R10,DOWTO          WTO MSGCMD1.                      L03
         MVC   (DCBDDNAM-IHADCB)+INJCL,=CL8'CMDJCL' USE CMDJCL DDN  L04
         BAL   R10,DOJOB          SUBMIT CMDJCL JOB.                L04
         BAL   R10,FMTMSG         REINIT MSG ARE.                   L03
         MVC   MSGID,=CL8'ADA020I' MOVE IN MSGID.                   L03
         MVC   MSGTEXT(L'MSGSUB),MSGSUB MOVE IN MSGSUB TEXT.        L03
         MVC   MSGSJOB+MSGTEXT,JCLJOB PUT SUBMITTED JOBNAME IN MSG. L03
         BAL   R10,DOWTO          WTO MSGSUB.                       L03
         CLI   CALL,CLOG1         IF 1 LOG FULL,                    L04
         BE    RETURN               ALL DONE.                       L04
         BAL   R10,FMTMSG         REIINIT MSG AREA.                 L03
         MVC   MSGID,=CL8'ADA030A' MOVE IN MSGID.                   L04
         MVC   MSGTEXT(L'MSGRUN2),MSGRUN2 MOVE IN MSGRUN2 TEXT.     L03
         MVC   MSGRJOB2+MSGTEXT,JCLJOB PUT SUBMITTED JOBNAME IN MSG.L03
         OI    WTOFLG,NONROLL+DODOM MAKE MSG NONROLL AND DELETE AT EL03
         BAL   R10,DOWTO          WTO MSGRUN2.                      L03
         MVC   DOMMSGID,SAVMSGID  SAVE RETURNED ID FOR DOM.         L03
         BAL   R10,FMTMSG         REINIT MSG AREA.                  L03
         MVC   MSGID,=CL8'ADA050A' MOVE IN MSGID.                   L03
         MVC   MSGTEXT(L'MSGREPLY),MSGREPLY MOVE IN MSGREPLY TEXT.  L03
         MVC   MSGPJOB1+MSGTEXT,JCLJOB PUT SUBMITTED JOBNAME IN MSG.L03
         BAL   R10,DOWTOR         WTOR MSGREPLY.                    L03
         B     RETURN             ALL DONE.
********************************************************************
*                                                                  *
*        S U B M I T   T H E   J O B                               *
*                                                                  *
********************************************************************
DOJOB    DS    0H                 SUBMIT THE JOB.
         OPEN  (INJCL,,INTRDR,(OUTPUT)),MF=(E,OPEN) OPEN BOTH FILES.
         TM    (DCBOFLGS-IHADCB)+INJCL,DCBOFOPN
         BZ    BADOPEN            CHECK RESULT OF OPEN.
         TM    (DCBOFLGS-IHADCB)+INTRDR,DCBOFOPN
         BZ    BADOPEN            CHECK RESULT OF OPEN.
         GET   INJCL              GET AN INPUT RECORD.
         MVC   JCLJOB,2(R1)       FOR 1ST RECORD, SAVE JOBNAME.
         B     DOPUT              BRANCH INTO GET-PUT LOOP.
DOGET    DS    0H
         GET   INJCL              GET NEXT INPUT RECORD.
DOPUT    DS    0H
         LR    R0,R1
         PUT   INTRDR,(0)         PUT NEXT OUTPUT RECORD.
         B     DOGET              LOOP.
EODAD    DS    0H
         CLOSE (INJCL,,INTRDR),MF=(E,OPEN) CLOSE BOTH FILES.
         FREEPOOL INJCL           RELEASE BUFFER POOL               L02
         FREEPOOL INTRDR          RELEASE BUFFER POOL               L02
         BR    R10                RETURN.
********************************************************************
*                                                                  *
*        F O R M A T   M E S S A G E   H E A D E R                 *
*                                                                  *
********************************************************************
FMTMSG   DS    0H
         MVI   MSGAREA,C' '       BLANK MSGAREA.
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA
         MVC   MSGJOB,OURJOB      MOVE IN OUR ADABAS JOBNAME.
         MVI   MSGCOLON,C':'      THEN A COLON.
         BR    R10                RETURN.
********************************************************************
*                                                                  *
*        D O   W T O                                               *
*                                                                  *
********************************************************************
DOWTO    DS    0H
         MVC   WTO(WTOLEN),XWTO   INIT WTO PARM LIST.
         MVC   WTOMSG(L'MSGAREA),MSGAREA MOVE MSGAREA TO WTO AREA.
         TM    WTOFLG,NONROLL     IF REQUEST IS FOR NON-ROLLABLE MSG,
         BZ    *+8
         OI    WTODESC,X'40'        THEN MAKE MSG NON-ROLLABLE.
         WTO   MF=(E,WTO)         WTO MSG.
         ST    R1,SAVMSGID        SAVE MSGID FOR DOM.
         NI    WTOFLG,255-NONROLL RESET WTOFLG.
         BR    R10                RETURN.
********************************************************************
*                                                                  *
*        D O   W T O R                                             *
*                                                                  *
********************************************************************
DOWTOR   DS    0H
         MVC   WTOR(WTORLEN),XWTOR INIT WTOR PARM LIST.
         MVC   WTORMSG(L'MSGAREA),MSGAREA MOVE MSGAREA TO WTOR AREA.
WTORLOOP DS    0H
         XC    ECB,ECB            ZERO WTOR ECB.
         WTOR  ,REPLY,L'REPLY,ECB,MF=(E,WTOR) WTOR MSG.
         WAIT  ECB=ECB            WAIT FOR RESPONSE.
         CLC   =C'OK',REPLY       WE WANT UPPER OR LOWERCASE "OK".
         BE    OKWTOR             IF NEITHER, LOOP.
         CLC   =XL2'9692',REPLY
         BNE   WTORLOOP
OKWTOR   DS    0H
         BR    R10                RETURN.
********************************************************************
*                                                                  *
*        R E T U R N                                               *
*                                                                  *
********************************************************************
RETURN   DS    0H
         CLOSE (INJCL,,INTRDR),MF=(E,OPEN) CLOSE FILES.
         TM    WTOFLG,DODOM       IF A NON-ROLLABLE MESSAGE NEEDS
         BZ    NODOM                DELETING,
         L     R1,DOMMSGID        GET MSGID,
         DOM   MSG=(1)              AND DELETE MESSAGE.
NODOM    DS    0H
         L     R2,RC                  R2 = RC.
         LR    R1,R13              PREPARE
         L     R13,4(,R13)         FOR FREEMAIN.
         FREEMAIN RU,LV=DYNLEN,A=(1)
         LR    R15,R2              AND RETURN
         RETURN (14,12),RC=(15)      WITH R15 = RC.
********************************************************************
*                                                                  *
*        E R R O R S                                               *
*                                                                  *
********************************************************************
BADCODE  DS    0H                 EXIT ENTERED WITH BAD CODE.
         MVC   RC,=F'12'          RC = 12.
         BAL   R10,FMTMSG         INIT MSG AREA.
         MVC   MSGID,=CL8'ADA060E' MOVE IN MSGID.                   L04
         MVC   MSGTEXT(L'MSGCODE),MSGCODE MOVE IN MSGCODE TEXT.
         BAL   R10,DOWTO          WTO MSGCODE.
         B     RETURN             RETURN.
BADOPEN  DS    0H                 BAD OPEN OF A FILE.
         MVC   RC,=F'12'          RC = 12.
         BAL   R10,FMTMSG         INIT MSG AREA.
         MVC   MSGID,=CL8'ADA070E' MOVE IN MSGID.                   L04
         MVC   MSGTEXT(L'MSGOPEN),MSGOPEN MOVE IN MSGOPEN TEXT.
         OI    WTOFLG,NONROLL     MAKE MSG NON-ROLLABLE.
         BAL   R10,DOWTO          WTO MSGOPEN.
         B     RETURN             RETURN.
********************************************************************
*                                                                  *
*        S T A T I C   A R E A S.                                  *
*                                                                  *
********************************************************************
XINJCL   DCB   DDNAME=INJCL,MACRF=GL,DSORG=PS,EODAD=EODAD INPUT DCB.
INJCLL   EQU   *-XINJCL
XINTRDR  DCB   DDNAME=INTRDR,MACRF=PM,DSORG=PS,            OUTPUT DCB. X
               RECFM=F,LRECL=80,BLKSIZE=80
INTRDRL  EQU   *-XINTRDR
XOPEN    OPEN  (0,,0),MF=L        OPEN LIST.
OPENLEN  EQU   *-XOPEN
XWTO     WTO   '                                                       X
                                            ',ROUTCDE=11,MF=L
WTOLEN   EQU   *-XWTO
XWTOR    WTOR  '                                                       X
                                            ',MF=L
WTORLEN  EQU   *-XWTOR
MSGOPEN  DC    C'BAD RC FROM OPEN, NO JOB SUBMITTED.'
MSGLOG1  DC    C'ONE PROTECTION LOG FULL.'
MSGLOG2  DC    C'BOTH PROTECTION LOGS FULL.'
MSGCMD1  DC    C'ONE COMMAND LOG FULL.'                             L03
MSGCMD2  DC    C'BOTH COMMAND LOGS FULL.'                           L03
MSGCODE  DC    C'BAD ADAEX2 ENTRY CODE, IGNORED.'
MSGSUB   DC    C'JOB          WILL COPY 1 LOG.'
MSGSJOB  EQU   4,8
MSGRUN2  DC    C'IS WAITING FOR JOB          TO RUN.'
MSGRJOB2 EQU   19,8
MSGREPLY DC    C'REPLY "OK" WHEN          IS DONE.'
MSGPJOB1 EQU   16,8
         LTORG *
SRCLEVEL DC    C'                                        '
********************************************************************
*                                                                  *
*        D Y N A M I C   A R E A S.                                *
*                                                                  *
********************************************************************
DYNAMIC  DSECT
SAVE     DS    18F                SAVE AREA.
DOUBLE   DS    D                  WORK AREA.
RC       DS    F                  RETURN CODE.
ECB      DS    F                  WTOR ECB.
SAVMSGID DS    F                  DOM MSGID.
DOMMSGID DS    F                  DOM MSGID.
INJCL    DS    0F,CL(INJCLL)      INPUT DCB.
INTRDR   DS    0F,CL(INTRDRL)     OUTPUT DCB.
OPEN     DS    0F,CL(OPENLEN)     OPEN AREA.
WTO      DS    0F,CL(WTOLEN)      WTO AREA.
WTODESC  EQU   *-4,2              DESCRIPTOR CODES.
WTOMSG   EQU   WTO+4,80           MSGTEXT.
WTOR     DS    0F,CL(WTORLEN)     WTOR AREA.
WTORMSG  EQU   WTOR+12,80         MSGTEXT.
CALL     DS    X                  CALL TYPE.                        L04
PLOG1    EQU   1                  1 PROLOG.                         L04
PLOG2    EQU   2                  2 PROLOGS.                        L04
CLOG1    EQU   3                  1 CMDLOG.                         L04
CLOG2    EQU   4                  2 CMDLOGS.                        L04
WTOFLG   DS    X                  WTOFLG.
NONROLL  EQU   X'80'              NON-ROLLABLE MESSAGE.
DODOM    EQU   X'40'              NEED TO DELETE NON-ROLLABLE MESSAGE.
OURJOB   DS    CL8                OUR ADABAS JOBNAME.
JCLJOB   DS    CL8                SUBMITTED JOBNAME.
MSGAREA  DS    CL80               MSG WORK AREA.
MSGID    EQU   MSGAREA+0,8        MSGID.
MSGJOB   EQU   MSGAREA+8,8        JOBNAME.
MSGCOLON EQU   MSGAREA+16,1
MSGTEXT  EQU   MSGAREA+18,62      TEXT.
REPLY    DS    CL2                2 CHARACTER REPLY.
DYNLEN   EQU   *-DYNAMIC          LENGTH.
         PRINT OFF
R0       EQU   00
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12                 PROGRAM BASE.
R13      EQU   13                 A(SAVE AREA).
R14      EQU   14
R15      EQU   15
         PRINT ON,NOGEN
         DCBD  DSORG=PS,DEVD=DA   DCB
         IHAPSA ,                 PSA
         IHAASCB ,                ASCB
         END   &CSECT
