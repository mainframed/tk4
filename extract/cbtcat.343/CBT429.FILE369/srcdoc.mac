*PROCESS OPTIMIZE(TIME);
 /*  ISPF/PDF LMF PROMOTION EXIT - DOCUMENT SOURCE                   */
 /********************************************************************/
 /*                                                                  */
 /* NAME         SRCDOC                                              */
 /*                                                                  */
 /* COMPONENT    ISPF/PDF LMF                                        */
 /*                                                                  */
 /* FUNCTION     ADD DOCUMENTATION TO LMF-MANAGED MEMBERS            */
 /*                                                                  */
 /* ENTRY        VIA CALL FROM LMFAPSEX EXIT CLIST                   */
 /*                                                                  */
 /* INPUT        SOURCE PROGRAM PDS MEMBER                           */
 /*              SHARED VARIABLE POOL                                */
 /*                                                                  */
 /* OUTPUT       UPDATED SOURCE                                      */
 /*              RETURN CODE                                         */
 /*              MESSAGE ID IN SHARED POOL VARIABLE MSG              */
 /*              ASSEMBLY INDICATOR IN SHARED VARIABLE POOL          */
 /*                                                                  */
 /* FILES        DDNAME SOURCE   -- LIBRARY PDS MEMBER               */
 /*              DDNAME SYSPRINT -- DEBUGGING/TRACE                  */
 /*                                                                  */
 /* EXT REF      ISPLINK                                             */
 /*                                                                  */
 /* ISPF SERVICE CONTROL                                             */
 /*              LMCLOSE                                             */
 /*              LMFREE                                              */
 /*              LMINIT                                              */
 /*              LMMFIND                                             */
 /*              LMOPEN                                              */
 /*              VDEFINE                                             */
 /*              VDELETE                                             */
 /*              VGET                                                */
 /*              VPUT                                                */
 /*                                                                  */
 /* MESSAGES     LMFX101E                                            */
 /*              LMFX102W                                            */
 /*              LMFX103E                                            */
 /*              LMFX104E                                            */
 /*                                                                  */
 /* OPERATION    THE SHARED POOL IS ACCESSED TO GET THE MEMBER NAME  */
 /*              AND LOW LEVEL QUALIFIER (LANGUAGE TYPE).            */
 /*              THE LM DIALOG SERVICES ARE THEN USED TO ACCESS      */
 /*              VERSION, MODIFICATION LEVEL, DATE, TIME,            */
 /*              AND TSO LOGON FROM THE PDS DIRECTORY.               */
 /*              THE INPUT MEMBER IS OPENED FOR UPDATE AND READ.     */
 /*              WHEN THE EXISTING TRGIGGER RECORD OR SEQUENCE       */
 /*              IS FOUND, THE RECORD IS UPDATED AND REWRITTEN.      */
 /*                                                                  */
 /*              SHARED VARIABLE MSG IS SET TO A MESSAGE ID FOR      */
 /*              NON-ZERO RETURN CODES.                              */
 /*                                                                  */
 /*              SHARED POOL VARIABLE NEEDASM IS SET TO 'YES' IF     */
 /*              THE MODULE HAS THE TYPE OF TRIGGER THAT IMPLIES     */
 /*              AN ASSEMBLY OR COMPILATION IS NEEDED.               */
 /*              OTHERWISE, IT IS SET TO  'NO'                       */
 /*                                                                  */
 /* RETURN CODE  0  MEMBER UPDATED OR ZERO LENGTH MEMBER             */
 /*              4  ERROR - PROMOTION MAY BE PERMITTED               */
 /*              8  ERROR - PROMOTION DENIED                         */
 /*                                                                  */
 /* ATTRIBUTES   UNAUTHORIZED                                        */
 /*              PROBLEM STATE                                       */
 /*              USER KEY                                            */
 /*                                                                  */
 /* RESTRICTIONS CURRENT SUPPORT FOR PL/I, CLIST, CNTL               */
 /*              AND SCRIPT TYPES ONLY.                              */
 /*                                                                  */
 /* NOTES        THIS UPDATE METHOD IS USED TO AVOID HAVING THE      */
 /*              ISPF/PDF STATISTICS IN THE PDS DIRECTORY            */
 /*              CHANGE AS THE RESULT OF THIS EXIT.                  */
 /*              THE SCRIPT SUPPORT TRIGGERS ARE IN LOWER CASE.      */
 /*              TAKE CARE WHEN EDITING CHANGES.                     */
 /*                                                                  */
 /* PROGRAMMER   C. J. PITTS                                         */
 /*                                                                  */
 /* MAINTENANCE  WHO  DATE    DESCRIPTION                            */
 /*              CJP  22JUL85 ADDED SUPPORT FOR NEEDASM.             */
 /*              CJP  23JUL85 ADDED SUPPORT FOR CLIST AND CNTL.      */
 /*              CJP  25JUL85 RELAXED CONSTRAINTS FOR CLIST AND      */
 /*                           CNTL TRIGGERS. ADDED SUPPORT FOR       */
 /*                           PLI INCLUDED MEMBERS (NON-COMPILE).    */
 /*              CJP  28JUL85 ADDED COBOL AND ASM SUPPORT.           */
 /*              CJP  29JUL85 ADDED SCRIPT SUPPORT.                  */
 /*              CJP  19DEC85 PERMIT RETURN CODE 0 FOR ZERO          */
 /*                           LENGTH MODULE.                         */
 /*              CJP  27MAR86 ADDED SUPPORT FOR NATURAL. USE         */
 /*                           SAME TRIGGERS AND LOGIC AS CLIST.      */
 /*              CJP  30JUN86 ADDED SUPPORT FOR SAS. USE SAME        */
 /*                           TRIGGERS AND LOGIC AS CLIST. ALSO      */
 /*                           CLEANED UP LRECL/RECFM CHECK LOGIC.    */
 /*                                                                  */
 /********************************************************************/
 %PAGE;
 SRCDOC: PROCEDURE OPTIONS(MAIN) REORDER;

   DECLARE COPYRIGHT    CHARACTER(48) STATIC
           INITIAL('COPYRIGHT (C) 1985 PLANNING RESEARCH CORPORATION');

   DECLARE SOURCE       FILE RECORD UPDATE;
   DECLARE SYSPRINT     FILE PRINT;

   DECLARE INCARD       CHARACTER(80) BASED(IP);
   DECLARE IP           POINTER;

   DECLARE ISPLINK      ENTRY EXTERNAL OPTIONS(ASM INTER RETCODE);

   DECLARE RC           PICTURE'99';
   DECLARE MSG          CHARACTER(8);
   DECLARE NEEDASM      CHARACTER(3) INITIAL('NO');

   DECLARE DATAID       CHARACTER(8);    /*  DATA ID FROM LMINIT     */
   DECLARE ZLVERS       CHARACTER(2),    /*  VERSION                 */
           ZLMOD        CHARACTER(2),    /*  MODIFICATION LEVEL      */
           ZLMDATE      CHARACTER(8),    /*  MODIFICATION DATE       */
           ZLMTIME      CHARACTER(5),    /*  MODIFICATION TIME       */
           ZLUSER       CHARACTER(8),    /*  MODIFICATION USER ID    */
           ZLFPRJ       CHARACTER(8),    /*  'FROM' PROJECT          */
           ZLFGRP       CHARACTER(8),    /*  'FROM' GROUP            */
           ZLFTYP       CHARACTER(8),    /*  'FROM' TYPE             */
           ZLFMEM       CHARACTER(8),    /*  'FROM' MEMBER           */
           ZLTTYP       CHARACTER(8),    /*  'TO' TYPE               */
           ZLTMEM       CHARACTER(8),    /*  'TO' MEMBER             */
           LRECL        CHARACTER(8),    /*  LOGICAL RECORD LENGTH   */
           RECFM        CHARACTER(8);    /*  RECORD FORMAT           */

   DECLARE ID_STRING    CHARACTER(40);

   DECLARE L            FIXED BINARY(31);

   DECLARE EMPTY_MEMBER BIT(1) INITIAL('1'B);

   DECLARE (INDEX,LENGTH,SUBSTR)
                        BUILTIN;
 %PAGE;
   ON ERROR SNAP
     BEGIN;
       ON ERROR SNAP SYSTEM;
       PUT FILE(SYSPRINT) PAGE DATA;
       CALL SET_RETURN_CODE(8,'LMFX101E');
     END;

   CALL ISPLINK('CONTROL','ERRORS','CANCEL');

   CALL INITIALIZE_POOL_VARIABLES;

   CALL SET_RETURN_CODE(0,'');
   CALL ISPLINK('VPUT','NEEDASM ','SHARED');

   IF LRECL^='00000080' × SUBSTR(RECFM,1,1)^='F'
    THEN
      DO;
        CALL SET_RETURN_CODE(8,'LMFX103E');
        RETURN;
      END;

   ID_STRING =  ZLTMEM  ×× ' V' ×× ZLVERS  ×× '.M' ××
                ZLMOD   ×× ' '  ×× ZLMDATE ×× ' '  ××
                ZLMTIME ×× ' '  ×× ZLUSER;

   OPEN FILE(SOURCE);

   SELECT(ZLTTYP);
     WHEN('ASM')
       CALL PROCESS_ASM;
     WHEN('CLIST')
       CALL PROCESS_CLIST;
     WHEN('CNTL')
       CALL PROCESS_CNTL;
     WHEN('COBOL')
       CALL PROCESS_COBOL;
     WHEN('NATURAL')
       CALL PROCESS_NATURAL;
     WHEN('PLI')
       CALL PROCESS_PLI;
     WHEN('SAS')
       CALL PROCESS_SAS;
     WHEN('SCRIPT')
       CALL PROCESS_SCRIPT;
     OTHERWISE
       CALL SET_RETURN_CODE(4,'LMFX102W');
   END;

   CALL ISPLINK('VPUT','NEEDASM ','SHARED');

   CALL ISPLINK('VDELETE','*');

   CLOSE FILE(SOURCE);
 %SKIP(2);
 /********************************************************************/
 /*     END OF MAIN PROCEDURE                                        */
 /********************************************************************/
 %PAGE;
 /********************************************************************/
 /*   PROCESS ASM MODULE                                             */
 /********************************************************************/

 PROCESS_ASM: PROCEDURE;

 /********************************************************************/
 /* SRCLEVEL DC   C'MMMMMMMM VNN.MNN YY/MM/DD HH:MM UUUUUUUU'        */
 /**   SOURCE LEVEL MMMMMMMM VNN.MNN YY/MM/DD HH:MM UUUUUUUU         */
 /*                 MODULE   VER/MOD   DATE   TIME  USER NAME        */
 /********************************************************************/

   DECLARE TRIGGER_1    CHARACTER( 9) INITIAL('SRCLEVEL ');
   DECLARE TRIGGER_2A   CHARACTER( 1) INITIAL('*'),
           TRIGGER_2B   CHARACTER(13) INITIAL('SOURCE LEVEL ');
   DECLARE (I,J)        FIXED BINARY(15);

   ON ENDFILE(SOURCE)
     GO TO SOURCE_ALL_IN;

   DO WHILE('1'B);
     READ FILE(SOURCE) SET(IP);
     EMPTY_MEMBER = '0'B;
     IF SUBSTR(INCARD,1,LENGTH(TRIGGER_1))=TRIGGER_1
       THEN
         DO;
           SUBSTR(INCARD,1,72) = TRIGGER_1 ×× 'DC    C''' ××
                                 ID_STRING ×× '''';
           REWRITE FILE(SOURCE);
           NEEDASM = 'YES';
           RETURN;
         END;
     I = INDEX(INCARD,TRIGGER_2A);
     J = INDEX(INCARD,TRIGGER_2B);
     IF I>0 & J>LENGTH(TRIGGER_2A)
       THEN
         DO;
           SUBSTR(INCARD,J+LENGTH(TRIGGER_2B),LENGTH(ID_STRING)) =
                  ID_STRING;
           REWRITE FILE(SOURCE);
           RETURN;
         END;
   END;

 SOURCE_ALL_IN:
   IF ^EMPTY_MEMBER
     THEN
       CALL SET_RETURN_CODE(8,'LMFX104E');

 END PROCESS_ASM;
 %PAGE;
 /********************************************************************/
 /*   PROCESS CLIST, NATURAL OR SAS MODULE                           */
 /********************************************************************/

 PROCESS_CLIST:
 PROCESS_NATURAL:
 PROCESS_SAS: PROCEDURE;

 /********************************************************************/
 /* /* SOURCE LEVEL MMMMMMMM VNN.MNN YY/MM/DD HH:MM UUUUUUUU         */
 /*                 MODULE   VER/MOD   DATE   TIME  USER NAME        */
 /********************************************************************/

   DECLARE TRIGGER_1A   CHARACTER( 2) INITIAL('/*'),
           TRIGGER_1B   CHARACTER(13) INITIAL('SOURCE LEVEL ');
   DECLARE (I,J)        FIXED BINARY(15);

   ON ENDFILE(SOURCE)
     GO TO SOURCE_ALL_IN;

   DO WHILE('1'B);
     READ FILE(SOURCE) SET(IP);
     EMPTY_MEMBER = '0'B;
     I = INDEX(INCARD,TRIGGER_1A);
     J = INDEX(INCARD,TRIGGER_1B);
     IF I>0 & J>I
       THEN
         DO;
           SUBSTR(INCARD,J+LENGTH(TRIGGER_1B),LENGTH(ID_STRING)) =
               ID_STRING;
           REWRITE FILE(SOURCE);
           RETURN;
         END;
   END;

 SOURCE_ALL_IN:
   IF ^EMPTY_MEMBER
     THEN
       CALL SET_RETURN_CODE(8,'LMFX104E');

 END PROCESS_CLIST;
 %PAGE;
 /********************************************************************/
 /*   PROCESS COBOL SOURCE MODULE                                    */
 /********************************************************************/

 PROCESS_COBOL: PROCEDURE;

 /********************************************************************/
 /*    77  SOURCE-LEVEL                  PIC X(40)                   */
 /*                 VALUE 'MMMMMMMM VNN.MNN YY/MM/DD HH:MM UUUUUUUU' */
 /*   *    SOURCE LEVEL    MMMMMMMM VNN.MNN YY/MM/DD HH:MM UUUUUUUU  */
 /*                        MODULE   VER/MOD   DATE   TIME  USER NAME */
 /********************************************************************/

   DECLARE TRIGGER_1A   CHARACTER(4)  INITIAL('77  '),
           TRIGGER_1B   CHARACTER(12) INITIAL('SOURCE-LEVEL'),
           TRIGGER_1C   CHARACTER( 7) INITIAL(' VALUE ');
   DECLARE TRIGGER_2A   CHARACTER( 1) INITIAL('*'),
           TRIGGER_2B   CHARACTER(13) INITIAL('SOURCE LEVEL ');

   DECLARE TRIGGERED_1A BIT(1) INITIAL('0'B);
   DECLARE J            FIXED BINARY(15);

   ON ENDFILE(SOURCE)
     GO TO SOURCE_ALL_IN;

 COBOL_READ_LOOP:
   DO WHILE('1'B);
     READ FILE(SOURCE) SET(IP);
     EMPTY_MEMBER = '0'B;
     IF TRIGGERED_1A
       THEN
         DO;
           J = INDEX(INCARD,TRIGGER_1C);
           IF J^=0
             THEN
               DO;
                 SUBSTR(INCARD,J+LENGTH(TRIGGER_1C),
                        LENGTH(ID_STRING)+2) = '''' ××ID_STRING×× '''';
                 REWRITE FILE(SOURCE);
                 NEEDASM = 'YES';
                 RETURN;
               END;
             ELSE
               LEAVE COBOL_READ_LOOP;
         END;
     IF SUBSTR(INCARD,8,LENGTH(TRIGGER_1A))=TRIGGER_1A &
        INDEX(INCARD,TRIGGER_1B)>=12
       THEN
         TRIGGERED_1A = '1'B;
       ELSE
         DO;
           J = INDEX(INCARD,TRIGGER_2B);
           IF SUBSTR(INCARD,7,LENGTH(TRIGGER_2A))=TRIGGER_2A & J>=8
             THEN
               DO;
                 SUBSTR(INCARD,J+LENGTH(TRIGGER_2B),
                        LENGTH(ID_STRING)) = ID_STRING;
                 REWRITE FILE(SOURCE);
                 RETURN;
               END;
         END;
   END;

 SOURCE_ALL_IN:
   IF ^EMPTY_MEMBER
     THEN
       CALL SET_RETURN_CODE(8,'LMFX104E');

 END PROCESS_COBOL;
 %PAGE;
 /********************************************************************/
 /*   PROCESS CNTL MODULE                                            */
 /********************************************************************/

 PROCESS_CNTL: PROCEDURE;

 /********************************************************************/
 /* //* SOURCE LEVEL MMMMMMMM VNN.MNN YY/MM/DD HH:MM UUUUUUUU        */
 /*                  MODULE   VER/MOD   DATE   TIME  USER NAME       */
 /********************************************************************/

   DECLARE TRIGGER_1A   CHARACTER( 3) INITIAL('//*'),
           TRIGGER_1B   CHARACTER(13) INITIAL('SOURCE LEVEL ');
   DECLARE J            FIXED BINARY(15);

   ON ENDFILE(SOURCE)
     GO TO SOURCE_ALL_IN;

   DO WHILE('1'B);
     READ FILE(SOURCE) SET(IP);
     EMPTY_MEMBER = '0'B;
     J = INDEX(INCARD,TRIGGER_1B);
     IF SUBSTR(INCARD,1,LENGTH(TRIGGER_1A))=TRIGGER_1A &
        J>LENGTH(TRIGGER_1A)+1
       THEN
         DO;
           SUBSTR(INCARD,J+LENGTH(TRIGGER_1B),LENGTH(ID_STRING)) =
               ID_STRING;
           REWRITE FILE(SOURCE);
           RETURN;
         END;
   END;

 SOURCE_ALL_IN:
   IF ^EMPTY_MEMBER
     THEN
       CALL SET_RETURN_CODE(8,'LMFX104E');

 END PROCESS_CNTL;
 %PAGE;
 /********************************************************************/
 /*   PROCESS PLI SOURCE MODULE                                      */
 /********************************************************************/

 PROCESS_PLI: PROCEDURE;

 /********************************************************************/
 /*DECLARE SOURCE_LEVEL CHARACTER(40) STATIC                         */
 /*        INITIAL('MMMMMMMM VNN.MNN YY/MM/DD HH:MM UUUUUUUU');      */
 /* /* SOURCE LEVEL MMMMMMMM VNN.MNN YY/MM/DD HH:MM UUUUUUUU         */
 /*                 MODULE   VER/MOD   DATE   TIME  USER NAME        */
 /********************************************************************/

   DECLARE TRIGGER_1A   CHARACTER(21)
                        INITIAL('DECLARE SOURCE_LEVEL '),
           TRIGGER_1B   CHARACTER( 9) INITIAL('INITIAL(''');
   DECLARE TRIGGER_2A   CHARACTER( 2) INITIAL('/*'),
           TRIGGER_2B   CHARACTER(13) INITIAL('SOURCE LEVEL ');

   DECLARE NEW_TRIGGER_1 CHARACTER(44)
           INITIAL('   DECLARE SOURCE_LEVEL CHARACTER(40) STATIC');

   DECLARE TRIGGERED_1A BIT(1) INITIAL('0'B);
   DECLARE (I,J)        FIXED BINARY(15);

   ON ENDFILE(SOURCE)
     GO TO SOURCE_ALL_IN;

 PLI_READ_LOOP:
   DO WHILE('1'B);
     READ FILE(SOURCE) SET(IP);
     EMPTY_MEMBER = '0'B;
     IF TRIGGERED_1A
       THEN
         IF INDEX(INCARD,TRIGGER_1B)^=0
           THEN
             DO;
               SUBSTR(INCARD,1,72) =
                    '           INITIAL('''  ×× ID_STRING ×× ''');' ;
               REWRITE FILE(SOURCE);
               NEEDASM = 'YES';
               RETURN;
             END;
           ELSE
             LEAVE PLI_READ_LOOP;
     IF INDEX(INCARD,TRIGGER_1A)^=0
       THEN
         DO;
           TRIGGERED_1A = '1'B;
           SUBSTR(INCARD,1,72) = NEW_TRIGGER_1;
           REWRITE FILE(SOURCE);
         END;
       ELSE
         DO;
           I = INDEX(INCARD,TRIGGER_2A);
           J = INDEX(INCARD,TRIGGER_2B);
           IF I>0 & J>I
             THEN
               DO;
                 SUBSTR(INCARD,J+LENGTH(TRIGGER_2B),LENGTH(ID_STRING)) =
                     ID_STRING;
                 REWRITE FILE(SOURCE);
                 RETURN;
               END;
         END;
   END;

 SOURCE_ALL_IN:
   IF ^EMPTY_MEMBER
     THEN
       CALL SET_RETURN_CODE(8,'LMFX104E');

 END PROCESS_PLI;
 %PAGE;
 /********************************************************************/
 /*   PROCESS SCRIPT MODULE                                          */
 /********************************************************************/

 PROCESS_SCRIPT: PROCEDURE;

 /********************************************************************/
 /* .cm source level MMMMMMMM VNN.MNN YY/MM/DD HH:MM UUUUUUUU        */
 /*                  MODULE   VER/MOD   DATE   TIME  USER NAME       */
 /********************************************************************/

   DECLARE TRIGGER_1A   CHARACTER( 3) INITIAL('.cm'),
           TRIGGER_1B   CHARACTER(13) INITIAL('source level ');
   DECLARE j            FIXED BINARY(15);

   ON ENDFILE(SOURCE)
     GO TO SOURCE_ALL_IN;

   DO WHILE('1'B);
     READ FILE(SOURCE) SET(IP);
     EMPTY_MEMBER = '0'B;
     J = INDEX(INCARD,TRIGGER_1B);
     IF SUBSTR(INCARD,1,LENGTH(TRIGGER_1A))=TRIGGER_1A &
        J>LENGTH(TRIGGER_1A)
       THEN
         DO;
           SUBSTR(INCARD,J+LENGTH(TRIGGER_1B),LENGTH(ID_STRING)) =
               ID_STRING;
           REWRITE FILE(SOURCE);
           RETURN;
         END;
   END;

 SOURCE_ALL_IN:
   IF ^EMPTY_MEMBER
     THEN
       CALL SET_RETURN_CODE(8,'LMFX104E');

 END PROCESS_SCRIPT;
 %PAGE;
 /********************************************************************/
 /*   DEFINE AND INITIALIZE ISPF POOL VARIABLES                      */
 /********************************************************************/

 INITIALIZE_POOL_VARIABLES: PROCEDURE;

   L = LENGTH(ZLFPRJ );
   CALL ISPLINK('VDEFINE','ZLFPRJ  ',ZLFPRJ ,'CHAR',L,
                '(COPY NOBSCAN)');
   L = LENGTH(ZLFGRP );
   CALL ISPLINK('VDEFINE','ZLFGRP  ',ZLFGRP ,'CHAR',L,
                '(COPY NOBSCAN)');
   L = LENGTH(ZLFTYP );
   CALL ISPLINK('VDEFINE','ZLFTYP  ',ZLFTYP ,'CHAR',L,
                '(COPY NOBSCAN)');
   L = LENGTH(ZLFMEM );
   CALL ISPLINK('VDEFINE','ZLFMEM  ',ZLFMEM ,'CHAR',L,
                '(COPY NOBSCAN)');
   L = LENGTH(ZLTTYP );
   CALL ISPLINK('VDEFINE','ZLTTYP  ',ZLTTYP ,'CHAR',L,
                '(COPY NOBSCAN)');
   L = LENGTH(ZLTMEM );
   CALL ISPLINK('VDEFINE','ZLTMEM  ',ZLTMEM ,'CHAR',L,
                '(COPY NOBSCAN)');

   L = LENGTH(DATAID );
   CALL ISPLINK('VDEFINE','DATAID ',DATAID,'CHAR',L);
   L = LENGTH(LRECL  );
   CALL ISPLINK('VDEFINE','LRECL  ',LRECL ,'CHAR',L);
   L = LENGTH(RECFM  );
   CALL ISPLINK('VDEFINE','RECFM  ',RECFM ,'CHAR',L);
   CALL ISPLINK('LMINIT','DATAID ',ZLFPRJ,ZLFGRP,' ',' ',' ',ZLFTYP);
   CALL ISPLINK('LMOPEN',DATAID);
   CALL ISPLINK('LMMFIND',DATAID,ZLFMEM,' ','LRECL ','RECFM ',
                 ' ','YES');

   L = LENGTH(ZLVERS );
   CALL ISPLINK('VDEFINE','ZLVERS  ',ZLVERS ,'CHAR',L,
                '(COPY NOBSCAN)');
   L = LENGTH(ZLMOD  );
   CALL ISPLINK('VDEFINE','ZLMOD   ',ZLMOD  ,'CHAR',L,
                '(COPY NOBSCAN)');
   L = LENGTH(ZLMDATE);
   CALL ISPLINK('VDEFINE','ZLMDATE ',ZLMDATE,'CHAR',L,
                '(COPY NOBSCAN)');
   L = LENGTH(ZLMTIME);
   CALL ISPLINK('VDEFINE','ZLMTIME ',ZLMTIME,'CHAR',L,
                '(COPY NOBSCAN)');
   L = LENGTH(ZLUSER );
   CALL ISPLINK('VDEFINE','ZLUSER  ',ZLUSER ,'CHAR',L,
                '(COPY NOBSCAN)');

   CALL ISPLINK('LMCLOSE',DATAID);
   CALL ISPLINK('LMFREE', DATAID);

   L = LENGTH(RC);
   CALL ISPLINK('VDEFINE','RC '     ,RC     ,'CHAR',L);
   L = LENGTH(MSG);
   CALL ISPLINK('VDEFINE','MSG '    ,MSG    ,'CHAR',L);
   L = LENGTH(NEEDASM);
   CALL ISPLINK('VDEFINE','NEEDASM ',NEEDASM,'CHAR',L);

 END INITIALIZE_POOL_VARIABLES;
 %PAGE;
 /********************************************************************/
 /*   SET RETURN CODE AND REASON TEXT STRING POOL VARIABLE           */
 /********************************************************************/

 SET_RETURN_CODE: PROCEDURE(RETURN_CODE,MESSAGE_ID);

   DECLARE RETURN_CODE  FIXED BINARY(31),
           MESSAGE_ID   CHARACTER(8);

   RC  = RETURN_CODE;
   MSG = MESSAGE_ID;

   CALL ISPLINK('VPUT','MSG ','SHARED');
   CALL ISPLINK('VPUT','RC ' ,'SHARED');

 END SET_RETURN_CODE;
 %SKIP(3);
 END SRCDOC;
