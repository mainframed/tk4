         MACRO
&NME     #SORT &SEQ,&PFIX=,&SVID=,&CMPRID=
.*
.*
.*
.* LAST CHANGE DATE - OCTOBER 18, 1983
.*                  - MAILING ADDRESS CHANGE
.*
.* LAST CHANGE DATE - APRIL 21, 1981
.*                  - MACRO NAME CHANGED FROM $SORT TO #SORT.
.*
.* LAST CHANGE DATE - APRIL 20, 1981
.*                  - "#REGS GEN=NO" SUPPORT ADDED.
.*
.* LAST CHANGE DATE - SEPTEMBER 12, 1978
.*                  - THE SORT ROUTINE IS NOW REENTRANT.
.*                  - THE LINKAGE FROM A COMPARE ROUTINE IS DIFFERENT
.*                    IF THE COMPARE ROUTINE ALSO PERFORMS THE
.*                    EXCHANGE.
.*
.* LAST CHANGE DATE - FEBRUARY 2, 1977
.*                  - MAILING ADDRESS CHANGE.
.*
.* LAST CHANGE DATE - OCTOBER 28, 1975
.*
.* THIS MACRO WAS WRITTEN BY DAVID B. COLE.  ANY QUESTIONS CONCERNING
.* IT MAY BE ADDRESSED TO:
.*       RR#2 BOX 712
.*       AFTON, VA. 22920
.*
.*
.*
.*   THIS MACRO GENERATES A SUBROUTINE THAT SORTS A LIST OF ITEMS USING
.* THE INTERNAL SORTING TECHNIQUE KNOWN AS THE "SHELL SORT".
.*
.*   THE SORT SUBROUTINE REQUIRES THE FOLLOWING INPUTS:
.*       - REGISTER 14 POINTS TO THE RETURN ADDRESS;
.*       - REGISTER 15 CONTAINS THE LENGTH (IN BYTES) OF THE LIST TO BE
.*         SORTED;
.*       - REGISTER 0 CONTAINS THE LENGTH (IN BYTES) OF EACH ENTRY IN
.*         THE LIST;
.*       - REGISTER 1 POINTS TO THE START OF THE LIST.
.*
.*   ON OUTPUT THE LIST DESCRIBED BY THE INPUT PARAMETERS IS SORTED IN
.* EITHER ASCENDING OR DESCENDING COALATING SEQUENCE (DEPENDING UPON
.* THE MACRO CALL). ALL REGISTERS ARE RESTORED.
.*
.*   THE SORT SUBROUTINE IS REENTRANT.
.*
.*   THE NAME FIELD
.* THIS FIELD IS OPTIONAL. IT CAN BE USED TO DEFINE BOTH THE NAME OF
.* THE SUBROUTINE AND THE PREFIX USED IN ALL GENERATED STATEMENT
.* LABELS. IF OMITTED, THE THE CHARACTERS "SORT" WILL BE USED. IF
.* GIVEN, THEN NO MORE THAN FOUR CHARACTERS SHOULD BE SPECIFIED.
.*
.*   THE FIRST POSITIONAL OPERAND
.* THIS FIELD IS OPTIONAL. IT CAN BE USED TO SPECIFY WHETHER THE LIST
.* IS TO BE SORTED IN ASCENDING OT DESCENDING ORDER. IF OMITTED, THEN
.* ASCENDING ORDER IS ASSUMED. IF GIVEN, THEN IT SHOULD BE EITHER "A"
.* OR "D".
.*
.*   THE PFIX= OPERAND
.* THE #SORT MACRO ATTEMPTS TO USE REGISTER EQUATES IN ITS EXPANSION
.* WHEN REFERING TO REGISTERS. THIS IS SO THAT THE USE OF THE REGISTERS
.* WILL BE INDICATED IN THE CROSS REFERENCE LISTING. THE PFIX= OPERAND
.* CAN BE USED TO CONTROL THE SET OF EQUATES USED. FOR EXAMPLE, IF
.* "PFIX=GPR" IS SPECIFIED, THEN "GPR1" WILL BE USED WHENEVER THE
.* EXPANSION REFERS TO REGISTER 1.
.*   IF THE PFIX= OPERAND IS OMITTED, THEN THE SET OF EQUATES DEFINED
.* BY THE FIRST PRIOR #REGS MACRO WILL BE USED. IF THERE IS NO PRIOR
.* #REGS MACRO, THEN NO EQUATES WILL BE USED.
.*
.*   THE CMPRID= OPERAND
.* WHEN THE CMPRID= OPERAND IS OMITTED, THEN FOR SORTING PURPOSES A CLC
.* INSTRUCTION IS USED TO COMPARE THE ENTIRETY OF EACH LIST ENTRY. IF
.* THIS IS NOT ACCEPTABLE, THEN THE CMPRID= OPERAND CAN BE USED TO
.* INDICATE THAT ENTRY COMPARISON IS TO BE DONE VIA SUBROUTINE CALL. IF
.* "CMPRID=0" IS GIVEN, THEN THE PROGRAMMER MUST PRELOAD THE ADDRESS OF
.* THE COMPARE SUBROUTINE INTO THE ADDRESS LABELLED "SORTCMPR". ON THE
.* OTHER HAND, IF CMPRID= IS SET EQUAL TO SOMETHING OTHER THAN 0, THEN
.* THE GIVEN VALUE IS USED EITHER AS THE NAME OF THE SUBROUTINE, OR AS
.* A REGISTER CONTAINING A POINTER TO THE SUBROUTINE.
.*   ON ENTRY TO THE COMPARE ROUTINE, R6 AND R7 POINT TO THE TWO LIST
.* ENTRIES TO BE COMPARED. THE ENTRY POINTED TO BY R6 SEQUENTIALLY
.* PRECEEDS THE ONE POINTED TO BY R7. R14 POINTS TO THE RETURN ADDRESS.
.*   UPON RETURN, THE COMPARE ROUTINE MUST SET THE CONDITION CODE AS
.* FOLLOWS:
.*       - CC=0 (EQUAL) MEANS THAT THE TWO LIST ENTRIES ARE EQUAL IN
.*         VALUE AND SHOULD NOT BE EXCHANGED.
.*       - CC=1 (LOW) MEANS THAT THE FIRST LIST ENTRY HAS A LOWER VALUE
.*         THAN THE SECOND. WHETHER OR NOT THEY ARE EXCHANGED DEPENDS
.*         UPON WHETHER OR NOT THIS IS AN ASCENDING OR DESCENDING ORDER
.*         SORT.
.*       - CC=2 (HIGH) MEANS THAT THE FIRST LIST ENTRY HAS A HIGHER
.*         VALUE THAN THE SECOND. WHETHER OR NOT THEY ARE EXCHANGED
.*         DEPENDS UPON WHETHER OR NOT THIS IS AN ASCENDING OR
.*         DESCENDING ORDER SORT.
.*       - CC=3 (OVERFLOW) MEANDS THAT THE TWO ENTRIES WERE OUT OF
.*         ORDER AND HAVE ALREADY BEEN EXCHANGED BY THE COMPARE
.*         ROUTINE. THIS RETURN SHOULD BE USED IF THE NATURE OF THE
.*         LIST ENTRIES IS SUCH THAT THE EXCHANGE CODE GENERATED BY
.*         THIS MACRO WOULD FAIL.
.*   THE COMPARE ROUTINE MUST NOT ALTER REGISTERS 14 THROUGH 7. ANY OF
.* THE REGISTERS 8 THROUGH 13 (EXCEPTING THOSE THAT ARE USED AS PROGRAM
.* BASES) MAY BE USED FREELY SINCE THE SORT ROUTINE RESTORES ALL
.* REGISTERS WHEN IT IS FINISHED.
.*
.*   THE SVID= OPERAND
.* USE THIS OPERAND TO SPECIFY THE NAME OF A REGISTER SAVE AREA. IF
.* OMITTED, THEN THE MACRO WILL GENERATE A LOCAL SAVE AREA.
.*   IF THE CMPRID= OPERAND IS GIVEN, THEN THE SAVE AREA MUST BE 16
.* WORDS LONG; OTHERWISE, IT NEED BE ONLY 10 WORDS LONG (FOR REGISTERS
.* 14 THROUGH 7).
.*
.*
.*
.* INNER MACROS USED - #REGS #TEST
.*
.*
.*
         GBLA  &#TESERR
         GBLC  &#TESRET(20)
         LCLA  &SAVESZ,&SL
         LCLC  &N,&R,&SAVEA
&N       SETC  'SORT'
         AIF   (K'&NME EQ 0).GOTNME
&N       SETC  '&NME'
.GOTNME  ANOP
.*
&R       SETC  '&PFIX'
         AIF   (K'&PFIX NE 0).GOTPFIX
         #TEST PFIX=
&R       SETC  '&#TESRET(1)'
         AGO   .DONPFIX
.GOTPFIX #REGS &PFIX,GEN=NO
.DONPFIX ANOP
.*
         AIF   ('&SEQ' EQ 'D').DCNDCMT
* ASCENDING ORDER SORT ROUTINE
         AGO   .CMT2
.DCNDCMT ANOP
* DESCENDING ORDER SORT ROUTINE
.CMT2    ANOP
&SAVESZ  SETA  10
&SL      SETA  7
         AIF   (K'&CMPRID EQ 0).NOCMPR1
&SAVESZ  SETA  16
&SL      SETA  13
* WITH A CALLER PROVIDED SUBROUTINE FOR ENTRY COMPARISON
.NOCMPR1 SPACE 1
* SORT ROUTINE INPUTS:
*        - R14 POINTS TO THE RETURN ADDRESS
*        - R15 CONTAINS THE LENGTH OF THE LIST (IN BYTES)
*        - R0 CONTAINS THE LENGTH OF EACH LIST ENTRY (IN BYTES)
*        - R1 POINTS TO THE START OF THE LIST
         AIF   (K'&CMPRID EQ 0).NOCMPR2
         SPACE 1
* COMPARE ROUTINE INPUTS:
*        - R6 AND R7 POINT TO THE TWO LIST ENTRIES TO BE COMPARED. THE
*          ENTRY POINTED TO BY R6 SEQUENTIALLY PRECEEDS THE ONE POINTED
*          TO BY R7.
*        - R14 POINTS TO A RETURN ADDRESS.
*        - R14 THROUGH R7 CONTAIN DATA CRITICAL TO THE SORT ROUTINE.
*          THEY MUST NOT BE ALTERED BY THE COMPARE ROUTINE.
         SPACE 1
* COMPARE ROUTINE OUTPUTS:
*        - CC=0 (EQUAL) MEANS THAT THE TWO LIST ENTRIES HAVE EQUAL
*          VALUES. THEY SHOULD NOT BE EXCHANGED.
*        - CC=1 (LOW) MEANS THAT THE FIRST ENTRY HAS A VALUE LOWER THAN
*          THE SECOND. IF THIS IS AN ASCENDING SORT, THEN THEY WILL NOT
*          BE EXCHANGED.
*        - CC=2 (HIGH) MEANS THAT THE FIRST ENTRY HAS A VALUE HIGHER
*          THAN THE SECOND. IF THIS IS AN ASCENDING SORT, THEN THEY
*          WILL BE EXCHANGED.
*        - CC=3 (OVERFLOW) MEANS THAT THE TWO ENTRIES WERE OUT OF ORDER
*          AND THAT THEY HAVE NOW BEEN EXCHANGED BY THE COMPARE
*          ROUTINE.
.NOCMPR2 SPACE 1
&SAVEA   SETC  '&N.SAVE'
         AIF   (K'&SVID EQ 0).GOTSAVE
&SAVEA   SETC  '&SVID'
.GOTSAVE ANOP
&N       STM   &R.14,&R.&SL,&SAVEA SAVE ALL WORK REGSITERS
         AIF   ('&CMPRID' EQ '').GOTCMPR
         AIF   ('&CMPRID' NE '0').CMPRN0
         L     &R.15,&N.CMPR       --> CALLER PROVIDED COMPARE ROUTINE
         AGO   .GOTCMPR
.CMPRN0  AIF   ('&CMPRID' NE '&CMPRID(1)').CMPRREG
         LA    &R.15,&CMPRID       --> CALLER PROVIDED COMPARE ROUTINE
         AGO   .GOTCMPR
.CMPRREG #TEST REGS=&CMPRID(1)
         AIF   (&#TESERR NE 0).CMPRROK
         AIF   (&#TESRET(1) GT 1 AND &#TESRET(1) LT 14).CMPRROK
         MNOTE 8,'ERROR - CMPRID= MAY NOT IDENTIFY REGISTER &$TESRET(1)*
               '
.CMPRROK LR    &R.15,&CMPRID(1)    --> CALLER PROVIDED COMPARE ROUTINE
.GOTCMPR LR    &R.4,&R.0           GET THE ENTRY LENGTH
         LR    &R.1,&R.0           GET ENTRY LENGTH FOR 'EX'
         BCTR  &R.1,0              GET THE ENTRY'S MACHINE LENGTH
         LR    &R.2,&R.4           GET ENTRY LENGTH
&N.DUBL  AR    &R.2,&R.2           DOUBLE IT
         C     &R.2,&SAVEA+4       GREATER THAN LIST LENGTH YET?
         BNH   &N.DUBL             NO, GO RE-DOUBLE
         SR    &R.2,&R.4           YES, GOT INITIAL INCREMENT
&N.LP1   SR    &R.2,&R.4           SUBTRACT ONE AND -
         BZ    &N.RET               (ALL DONE; GO RESTORE AND RETURN)
         SRL   &R.2,1               TRUNCATE DEVIDE BY TWO
         L     &R.5,&SAVEA+4       GET THE LENGTH OF THE LIST
         SR    &R.5,&R.2           SUBTRACT OFF THE INCREMENT
         LR    &R.3,&R.4           GET THE ENTRY LENGTH
&N.LP2   LR    &R.0,&R.4           GET THE ENTRY LENGTH AGAIN
&N.LP3   LR    &R.6,&R.3           DEVELOPE -
         A     &R.6,&SAVEA+12       THE FIRST -
         SR    &R.6,&R.0             COMPARE ADDRESS
         LA    &R.7,0(&R.2,&R.6)   DEVELOPE THE SECOND ADDRESS
         AIF   ('&CMPRID' EQ '').NOCMPR6
         BALR  &R.14,&R.15         LINK TO CALLER'S COMPARE ROUTINE
         BO    &N.NLP3             OUT OF ORDER BUT NOW EXCHANGED
         AGO   .NOCMPR7
.NOCMPR6 EX    &R.1,&N.CLC         COMPARE THE TWO ENTRIES
.NOCMPR7 AIF   ('&SEQ' EQ 'D').DESCEND
         BNH   &N.NLP2             RIGHT ORDER (ASCENDING); DON'T XCHNG
         AGO   .ASCEND
.DESCEND BNL   &N.NLP2             RIGHT ORDER (DESCENDING); DON'T XCHG
.ASCEND  EX    &R.1,&N.XC1         WRONG -
         EX    &R.1,&N.XC2          ORDER; -
         EX    &R.1,&N.XC1           EXCHANGE
&N.NLP3  BXLE  &R.0,&R.2,&N.LP3    LOOP TO SHIFT THE BUBBLE
&N.NLP2  BXLE  &R.3,&R.4,&N.LP2    ADVANCE ONE INCREMENT
         B     &N.LP1              LOOP TO DECREASE THE INCREMENT
&N.RET   LM    &R.14,&R.&SL,&SAVEA SORT DONE; RESTORE REGS
         BR    &R.14               RETURN TO CALLER
         SPACE 1
         AIF   ('&CMPRID' NE '').DATA1
&N.CLC   CLC   0(*-*,&R.6),0(&R.7) (EXECUTED)
.DATA1   ANOP
&N.XC1   XC    0(*-*,&R.6),0(&R.7) (EXECUTED)
&N.XC2   XC    0(*-*,&R.7),0(&R.6) (EXECUTED)
         AIF   ('&CMPRID' NE '0' AND '&SVID' NE '').DATA2
         SPACE 1
.DATA2   AIF   ('&CMPRID' NE '0').DATA3
&N.CMPR  DC    A(*-*)              THE POINTER TO THE COMPARE ROUTINE
*                                  MUST BE FILLED IN PRIOR TO THE FIRST
*                                  CALL TO THE SORT ROUTINE.
.DATA3   AIF   ('&SVID' NE '').DATA4
&N.SAVE  DC    &SAVESZ.A(0)        LOCAL SAVE AREA
.DATA4   MEND
