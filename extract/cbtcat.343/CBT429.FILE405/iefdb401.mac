//NTS0991A JOB (0991,TSG),'* IEFDB401 *',MSGCLASS=X,CLASS=6,
//  NOTIFY=NTS0991,MSGLEVEL=(1,1)
//IEFUTL1 EXEC PGM=IEV90,
// PARM='XREF,LIST,LINECOUNT(55)),DECK,SYSPARM(DLASIP00)'
//SYSPRINT DD SYSOUT=*
//SYSPUNCH DD DISP=SHR,DSN=LOCL.USEROBJ(IEFDB401)
//SYSLIB   DD DISP=SHR,DSN=SYS1.SMPMTS
//         DD DISP=SHR,DSN=LOCL.USERSRC
//         DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=SYS1.AMODGEN,UNIT=3350,VOL=SER=DLB85A
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1
//SYSUT2   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1
//SYSUT3   DD UNIT=VIO,SPACE=(CYL,(1,1)),DCB=BUFNO=1
//SYSIN    DD *
         TITLE 'IEFDB401 - DYNAMIC ALLOCATION EXIT'
**********************************************************************
* /*                                                                 *
* /* FUNCTION: TO PROVIDE ENHANCED INTEGRITY TO SPECIFIED SYSTEM     *
* /*           RESOURCES. THIS IS NOT INTENDED TO BE A REPLACEMENT   *
* /*           FOR RACF TYPE FACILITIES.                             *
* /*                                                                 *
* /* WRITTEN:  DEC, 1985 BY MARV CRUZAN                              *
* /*                        DEFENSE LOGISTICS AGENCY                 *
* /*                        DLA SYSTEMS AUTOMATION CENTER            *
* /*                        DSAC-TSG                                 *
* /*                        P O BOX P1605                            *
* /*                        COLUMBUS, OH  43216-5002                 *
* /*                        (614) 238-9409                           *
* /*                                                                 *
* /* DESCRIPTION: THIS IS USER CODE FOR THE DYNAMIC ALLOCATION       *
* /*           EXIT IN IEFW21SD. REFER TO THE LABEL TBLOOKUP FOR     *
* /*           A DESCRIPTION OF THE MECHANICS OF THE ACCESS          *
* /*           AUTHORIZATION LOGIC.                                  *
* /*                                                                 *
* /* COMPONENT PARTS:                                                *
* /*      IEFDB401 - THIS MODULE                                     *
* /*                                                                 *
* /*      DLASIP00 - A TABLE OF RESOURCES TO BE PROTECTED AND        *
* /*                 REQUESTERS WITH AUTHORITY TO ACCESS THEM.       *
* /*                                                                 *
* /*      RESOURCE - MACRO USED IN THE DEFINITION OF DLASIP00.       *
* /*                                                                 *
* /*      REQUESTR - MACRO USED IN THE DEFINITION OF DLASIP00.       *
* /*                                                                 *
* /*      IEFZBMAP - MAPPING MACRO FOR ALLOCATION SAVE AREA.         *
* /*                                                                 *
* /* CHANGE LOG:                                                     *
* /*           11 DEC 85 - ADDED DOCUMENTATION. M. C. CRUZAN         *
* /*                                                                 *
**********************************************************************
IEFDB401 CSECT
R0       EQU   0                   OS LINKAGE REGISTER
R1       EQU   1                   OS LINKAGE REGISTER
R2       EQU   2                   PARAMETER LIST REGISTER
R3       EQU   3                   ADDRESS OF ASCB
R4       EQU   4                   ADDRESS OF SVC99 REQUEST BLOCK
R5       EQU   5                   ADDRESS OF SVC99 TEXT UNIT POINTER
R6       EQU   6                   ADDRESS OF OUCB
R7       EQU   7                   ADDRESS OF SVC99 TEXT UNIT
M7       EQU   7                   ICM MASK
R8       EQU   8                   ADDRESS OF TSB/TCB/JSCB/JCT/ACT/SCT
R9       EQU   9                   ADDRESS OF RB/CDE/JSCB/JCT/ACT/SCT
R10      EQU   10                  WORK
R11      EQU   11                  WORK
R12      EQU   12                  BASE ADDRESS REGISTER
R13      EQU   13                  SAVE AREA ADDRESS
R14      EQU   14                  OS LINKAGE REGISTER
R15      EQU   15                  OS LINKAGE REGISTER
M15      EQU   15                  ICM MASK
SUPKEY   EQU   0                   SUPERVISOR KEY
SCHEDKEY EQU   16                  SCHEDULER KEY
         SAVE (14,12),,IEFDB401&SYSDATE.&SYSTIME
         LR    R12,R15             SET BASE
         USING IEFDB401,R12        ESTABLISH ADDRESSABILITY
         LR    R2,R1               SAVE PARM REGISTER
         L     R1,4(,R2)           GET ADDR OF WORKAREA ADDR
         L     R1,0(,R1)           GET ADDR OF WORKAREA
         ST    R13,4(,R1)          CHAIN
         ST    R1,8(,R13)            SAVE
         LR    R13,R1                  AREAS
         SPACE
         USING ASCB,R3             GET ADDRESSABILITY TO ACSB
         USING S99RB,R4            GET ADDRESSABILITY TO SVC99 RB
         USING S99TUPL,R5          GET ADDRESSABILITY TO TU POINTERS
         USING OUCB,R6             GET ADDRESSABILITY TO OUCB
         USING S99TUNIT,R7         GET ADDRESSABILITY TO TEXT UNITS
         USING IEFZBMAP,R13        GET ADDRESSABILITY TO WORKAREA
         SPACE
         XC    B4WKAREA(B4FIXEND),B4WKAREA CLEAR FIXED WORKAREA
         SPKA  SUPKEY(R0)          NEED KEY ZERO FOR FETCH PROTECT
         TITLE 'IEFDB401 - INITIAL SCAN'
**********************************************************************
*                                                                    *
* SEPARATE BATCH JOBS FROM STARTED TASKS.                            *
*                                                                    *
**********************************************************************
         L     R3,548              GET ASCB ADDRESS FROM PSA
         ICM   R11,M15,ASCBJBNI    IS IT AN INITIATED STEP?
         BZ    STARTASK            NO - A STARTED TASK
         MVC   B4JOBNAM,0(R11)     INSTALL BATCH JOB NAME
         L     R8,ASCBTNEW         GET CURRENT TCB
         USING TCB,R8              AND ADDRESS IT
         L     R8,TCBJSCB          GET JSCB
         DROP  R8
         USING IEZJSCB,R8          AND ADDRESS IT
         L     R8,JSCBJCT          GET JCT
         DROP  R8
         USING JCT,R8              AND ADDRESS IT
         ICM   R9,M7,JCTACTAD      GET ACT POINTER
*                                  MOVE ALL OF ACCOUNTING FIELD
*                                  TO THE USER WORK AREA
         MVC   B4ENTCNT(L'ACTACCNT+L'ACTJNFLD),ACTJNFLD-IEFAACTB+16(R9)
         ICM   R8,M7,JCTSDKAD      GET SCT
         DROP  R8
         USING SCT,R8              AND ADDRESS IT
         MVC   B4STPNAM,SCTSNAME   INSTALL BATCH STEPNAME
         MVC   B4PGMNAM,SCTPGMNM   INSTALL BATCH PGM=NAME
         DROP  R8
         B     ALLOC02
         SPACE
**********************************************************************
*                                                                    *
* SCREEN OUT THE REMOTE TCAM USERS.                                  *
*                                                                    *
* (IN OUR SHOP, ALL TCAM USERS ARE REMOTE, VTAM USERS ARE LOCAL.)    *
*                                                                    *
**********************************************************************
STARTASK DS    0H
         ICM   R8,M15,ASCBTSB      ELSE GET TSB
         BZ    EXITZERO            IF NOT BATCH AND NO TSB, MUST BE
         USING TSB,R8                 NON-TSO STARTED TASK
*                                  THE LOGICAL TERMINAL NAME IS
*                                  SAVED HERE BUT NOT USED.
         MVC   B4TERMID,TSBTRMID   INSTALL LOGICAL TERMINAL NAME
         OI    B4FLAG01,B4TSUSER   MARK AS TSO USER
         CLC   =X'0000',TSBLINE    IS USER REMOTE TCAM?
         BE    NOTRTCAM            NO
         OI    B4FLAG01,B4TCAM     MARK AS REMOTE TCAM
         DROP  R8
         SPACE
**********************************************************************
*                                                                    *
* SCREEN OUT THE C-LIST USERS.                                       *
*                                                                    *
**********************************************************************
NOTRTCAM DS    0H
         L     R8,ASCBTNEW         GET CURRENT TCB
         USING TCB,R8              ADDRESS TCB
         ICM   R9,M7,TCBTIO+1      GET TIOT ADDRESS
*                                  THE TIOT ADDRESS IS SAVED HERE
*                                  BUT NOT USED.
         ST    R9,B4TIOTAD         AND SAVE IT
         L     R9,TCBJSCB          GET JSCB
         USING IEZJSCB,R9          AND ADDRESS IT
         L     R9,JSCBJCT          GET JCT
         DROP  R9
         USING JCT,R9              AND ADDRESS IT
         ICM   R10,M7,JCTACTAD     GET ACT POINTER
*                                  MOVE ALL OF ACCOUNTING FIELD
*                                  TO THE USER WORK AREA
         MVC  B4ENTCNT(L'ACTACCNT+L'ACTJNFLD),ACTJNFLD-IEFAACTB+16(R10)
         ICM   R9,M7,TCBRBP+1      GET RB CHAIN
         DROP  R9
         USING RBBASIC,R9          ADDRESS RB
RBLOOK   DS    0H
         ICM   R10,M7,RBLINK+1     GET BACK POINTER
         BZ    EXITZERO            SHOULD NOT HAPPEN
         CR    R8,R10              IS IT THE TCB?
         BE    RBFOUND             YES - CHECK CALLER
         LR    R9,R10              NO - KEEP LOOKING
         B     RBLOOK
RBFOUND  DS    0H
         ICM   R9,M7,RBCDE+1       GET CALLERS CDE
         BZ    RBNCALL             THERE MUST BE ONE
         DROP  R9                  DROP RB ADDRESSABILITY
         USING CDENTRY,R9          ADDRESS CDE
         MVC   B4PGMNAM,CDNAME     INSTALL CALL/LINK NAME
         CLC   =C'IKJEFT02',CDNAME NATIVE TSO CALL?
         BE    EXITZERO            YES - OK TO ACCESS
         CLC   =C'ISPCALL ',CDNAME ISPF CALL?
         BE    EXITZERO            YES - OK TO ACCESS
         SPACE
**********************************************************************
*                                                                    *
* MARK THE ISPF USERS, TOO.                                          *
*                                                                    *
**********************************************************************
         CLC   =C'ISP',CDNAME      ISPF USER?
         BNE   RBNCALL             NO - CHECK ON IT
         OI    B4FLAG01,B4ISPF     MARK AS ISPF USER
RBNCALL  DS    0H
         OI    B4FLAG01,B4CALL     MARK FOR LIMITED ACCESS
         DROP  R9
         TITLE 'IEFDB401 - IDENTIFY EXEMPTIONS'
**********************************************************************
*                                                                    *
* EXEMPT STARTED TASKS THAT ARE NOT LOGON.                           *
*                                                                    *
**********************************************************************
         ICM   R6,M15,ASCBOUCB     NOW GET OUCB
         BZ    EXITZERO            THIS SHOULDNT HAPPEN
         TM    OUCBYFL,OUCBLOG     IS IT A TSUSER?
         BZ    EXITZERO            NO - EXIT
         SPACE
**********************************************************************
*                                                                    *
* SCREEN USERS BY GENERIC GROUP.                                     *
*                                                                    *
**********************************************************************
         ICM   R11,M15,ASCBJBNS    POINTER TO TASK NAME
         BZ    EXITZERO            THIS SHOULDNT HAPPEN
         MVC   B4JOBNAM,0(R11)     INSTALL LOGON JOB NAME
         MVC   B4LOGPRC,8(R11)     INSTALL LOGON PROC NAME
         TITLE 'IEFDB401 - EXAMINE ALLOCATION PARAMETERS'
**********************************************************************
*                                                                    *
* GET SVC99 REQUEST BLOCK AND SCREEN THE ALLOCATION REQUESTS.        *
*                                                                    *
**********************************************************************
ALLOC02  DS    0H
         L     R4,0(,R2)           POINT TO SVC99 REQUEST BLOCK
         TM    S99VERB,S99VRBAL+S99VRBCC+S99VRBDN+S99VRBIN
         BZ    EXITZERO            NOT ALLOCATION REQUEST
         SPACE
**********************************************************************
*                                                                    *
* LOOP THROUGH TEXT UNITS FOR DSNAME, VOLSER OR LAST TEXT ENTRY.     *
*                                                                    *
**********************************************************************
         L     R5,S99TXTPP         NO - GET ADDR OF TEXT UNIT POINTERS
TULOOP   DS    0H
         ICM   R7,M7,S99TUPL+1     GET A TEXT UNIT ADDRESS
         BZ    NEXTTU              SKIP NULL ENTRIES
         CLI   S99TUKEY+1,DALSSREQ IS THIS SUBSYSTEM REQ
         BE    EXITZERO            YES - EXIT
TRYDSNAM DS    0H
         CLI   S99TUKEY+1,DALDSNAM IS THIS A DSN KEY
         BNE   TRYVOLSR            NO - GO CHECK NEXT KEY
         LA    R7,6(,R7)           BUMP TO DATASET NAME
         ST    R7,B4DSNAM          AND SAVE THE POINTER
         B     NEXTTU              GO CHECK NEXT KEY
TRYVOLSR DS    0H
         CLI   S99TUKEY+1,DALVLSER IS THIS A VOLSER KEY?
         BNE   NEXTTU              NO - GO CHECK NEXT KEY
         LA    R7,6(,R7)           BUMP TO VOLUME SERIAL NUMBER
         ST    R7,B4VOLSER         AND SAVE THE POINTER
NEXTTU   DS    0H
         TM    S99TUPL,S99TUPLN    LAST TEXT UNIT
         BO    CHECK00             YES - GET OUT OF LOOP
         LA    R5,4(,R5)           NO - GET NEXT TEXT POINTER
         B     TULOOP              AND LOOP
         TITLE 'IEFDB401 - CHECK THE RESOURCE REQUESTED'
**********************************************************************
*                                                                    *
* THE AUTHORIZATION TABLE LOOKUP IS DONE HERE.                       *
* THE CDE OF THE AUTHORIZATION TABLE IS ANCHORED IN CVTVERID THE     *
* FIRST TIME THROUGH. EACH SUCCESSIVE TIME, THE LOADED-BY-NIP FLAG   *
* IS CHECKED TO MAKE SURE SOMEONE DIDNT SWITCH ON US.                *
*                                                                    *
**********************************************************************
CHECK00  DS    0H
         L     R2,16               GET CVT
         LA    R4,CVTMAP-CVTFIX    CALCULATE PREFIX LENGTH
         SR    R2,R4               AND BACKUP TO PREFIX
         USING CVTFIX,R2
         ICM   R4,M15,CVTVERID     FIRST TIME THROUGH?
         BNZ   CHEKDONE            NO - PROCESS USER
         ICM   R4,M7,CVTLPDIR      ELSE GET LPA CHAIN
         USING CDENTRY,R4
MODSRCH  DS    0H
         CLC   CDNAME,SIPNAME      AND LOOK FOR TABLE MODULE
         BE    MODFOUND
         LA    R4,40(,R4)          CONTINUE IF NOT FOUND
         CLI   CDNAME,X'FF'        LAST ONE?
         SPACE
* IF THE AUTHORIZATION TABLE IS NOT AVAILABLE YOU HAVE TO DECIDE
* HERE WHAT TO DO ABOUT IT. SINCE WE ARE NOT A PRODUCTION SHOP
* WE OPT TO ALLOW ALLOCATION AND CONTINUE.
         SPACE
         BE    EXITZERO            SHOULD NOT HAPPEN
         B     MODSRCH             KEEP TRYING
MODFOUND DS    0H
         TM    CDATTR,CDNIP        IS HE PLPA?
         BZ    MODSRCH             NOT MINE IF NOT
         ST    R4,CVTVERID         ELSE SAVE CDE POINTER
CHEKDONE DS    0H
         TM    CDATTR,CDNIP        IS HE PLPA?
         BZ    EXITFOUR            SOMEBODY CHANGED HIM
         L     R2,CDENTPT          ELSE GET ENTRY POINT
         DROP  R2
         DROP  R4
         MVI   B4RESDSN,X'FF'      SET INITIAL MASK
         MVC   B4RESDSN+1(15),B4RESDSN TO ASSUME OK
         EJECT
**********************************************************************
*                                                                    *
* DATA SET NAME RESOURCES ARE CHECKED FIRST.                         *
*                                                                    *
**********************************************************************
CHEKDSN  DS    0H
         CLC   =C'DSN ',0(R2)      DSN TABLE ENTRIES?
         BNE   CHEKVOL             NO - LOOK FOR VOLSERS
RESDSN   DS    0H
         ICM   R9,M15,B4DSNAM      GET ARGUMENT POINTER
         BZ    CHEKVOLB            SHOULD NOT HAPPEN
         L     R3,4(,R2)           DSN RESOURCE LIST POINTER
         L     R4,0(,R3)           TOP OF LIST
         L     R7,4(,R3)           AND BOTTOM OF LIST
         BAL   R11,TBLOOKUP
         LTR   R1,R1               ANY HITS?
         BZ    CHEKVOLB            DSN NOT PROTECTED
         XC    B4REQDSN,B4REQDSN   ELSE SET UP REQUESTER
         ST    R1,B4RESDSN         AND SAVE DSN MASK
SPECDSN  DS    0H
         LA    R9,B4ENTCNT+2       GET ARGUMENT POINTER (EAN)
         L     R4,8(,R3)           TOP OF SPECIFIC LIST
         L     R7,12(,R3)          BOTTOM OF LIST
         BAL   R11,TBLOOKUP
         LTR   R1,R1               ANY HITS?
         BZ    GENDSN              CHECK FOR GENERIC THEN
         ST    R1,B4REQDSN         ELSE SAVE REQUESTER MASK
         B     CHEKVOLB            AND CHECK VOLSER
GENDSN   DS    0H
         LA    R9,B4JOBNAM         GET GENERIC ARGUMENT
         L     R4,16(,R3)          TOP OF GENERIC LIST
         L     R7,20(,R3)          AND BOTTOM
         BAL   R11,TBLOOKUP
         LTR   R1,R1               ANY HITS?
         BZ    CHEKVOLB            NO - CHECK VOLSERS
         ST    R1,B4REQDSN         ELSE SAVE MASK
CHEKVOLB DS    0H
         LA    R2,8(,R2)           BUMP TO VOL LIST POINTER
         EJECT
**********************************************************************
*                                                                    *
* VOLUME SERIAL RESOURCES ARE CHECKED NEXT.                          *
*                                                                    *
**********************************************************************
CHEKVOL  DS    0H
         CLC   =C'VOL ',0(R2)      VOL TABLE ENTRIES?
         BNE   CHEKEND             NO - NO VOLSERS TO CHECK
RESVOL   DS    0H
         ICM   R9,M15,B4VOLSER     GET ARGUMENT POINTER
         BZ    CHEKEND             SHOULD NOT HAPPEN
         L     R3,4(,R2)           VOL RESOURCE LIST POINTER
         L     R4,0(,R3)           TOP OF LIST
         L     R7,4(,R3)           AND BOTTOM OF LIST
         BAL   R11,TBLOOKUP
         LTR   R1,R1               ANY HITS?
         BZ    CHEKEND             VOL NOT PROTECTED
         XC    B4REQVOL,B4REQVOL   ELSE SET UP REQUESTER
         ST    R1,B4RESVOL         AND SAVE VOL MASK
SPECVOL  DS    0H
         LA    R9,B4ENTCNT+2       GET ARGUMENT POINTER (EAN)
         L     R4,8(,R3)           TOP OF SPECIFIC LIST
         L     R7,12(,R3)          BOTTOM OF LIST
         BAL   R11,TBLOOKUP
         LTR   R1,R1               ANY HITS?
         BZ    GENVOL              CHECK FOR GENERIC THEN
         ST    R1,B4REQVOL         ELSE SAVE REQUESTER MASK
         B     CHEKEND
GENVOL   DS    0H
         LA    R9,B4JOBNAM         GET GENERIC ARGUMENT
         L     R4,16(,R3)          TOP OF GENERIC LIST
         L     R7,20(,R3)          AND BOTTOM
         BAL   R11,TBLOOKUP
         LTR   R1,R1               ANY HITS?
         BZ    CHEKEND             NO - CHECK VOLSERS
         ST    R1,B4REQVOL         ELSE SAVE MASK
CHEKEND  DS    0H
         TITLE 'IEFDB401 - FILTER THE REQUEST AND EXIT TO SCHEDULER'
**********************************************************************
*                                                                    *
* EXIT FILTERING IS DONE HERE.                                       *
*                                                                    *
**********************************************************************
EXITFLTR DS    0H
         LM    R8,R9,B4RESDSN      GET THE RESOURCE FLAGS
         NR    R8,R9               AND WITH REQUESTR FLAGS
         BZ    EXITFOUR            NOT AUTHORIZED IF ZERO
         LM    R8,R9,B4RESVOL      GET THE RESOURCE FLAGS
         NR    R8,R9               AND WITH REQUESTR FLAGS
         BZ    EXITFOUR            NOT AUTHORIZED IF ZERO
EXITZERO DS    0H
         LA    R15,0             SET RETURN CODE = 0 - AUTHORIZED
         B     EXIT
EXITFOUR DS    0H
         LA    R15,4             SET RETURN CODE = 4 - NOT AUTHORIZED
EXIT     DS    0H
         SPKA  SCHEDKEY(R0)        SET SCHEDULER KEY
         L     R13,4(,R13)         UNCHAIN
         RETURN (14,12),RC=(15)    RETURN TO SCHEDULER
         TITLE 'IEFDB401 - SUBROUTINE FOR TABLE LOOK UP'
**********************************************************************
*                                                                    *
* ROUTINE TO DO TABLE LOOKUP FOR FUNCTION ARGUMENTS.                 *
*                                                                    *
* /*                                                                 *
* /* RESOURCE AND REQUESTER MASKS ARE INITIALIZED TO ONES. IF THE    *
* /* RESOURCE IS FOUND TO BE PROTECTED, THE RESOURCE MASK WILL       *
* /* REPLACE THE THE ONES OF THE RESOURCE MASK AND THE REQUESTERS    *
* /* MASK IS ZEROED AND HIS ENTRY IS SEARCHED FOR. IF FOUND, HIS     *
* /* MASK IS RETURNED ELSE IT IS LEFT AT ZERO.  IF RESOURCE IS NOT   *
* /* FOUND ON THE LIST, BOTH MASKS ARE LEFT AT ONES.  TO HAVE        *
* /* ACCESS TO THE RESOURCE REQUESTED, THE RESULTS OF A LOGICAL      *
* /* AND OF THE RESOURCE AND REQUESTER MASKS MUST BE NON-ZERO. A     *
* /* RESULT OF ZERO WILL CAUSE THE ALLOCATION REQUEST TO BE DENIED.  *
* /*                                                                 *
**********************************************************************
* REGISTER USAGE: R1  RETURNS FUNCTION MASK
*                 R4  POINTS TO START OF TABLE
*                 R5  POINTS TO FUNCTION ENTRY
*                 R6  HOLDS TABLE INCREMENT FOR BXLE
*                 R7  POINT TO END OF TABLE
*                 R8  HOLD FUNCTION LENGTH FOR EX INSTRUCTION
*                 R9  POINTS TO ARGUMENT
*                 R11 RETURN REGISTER
TBLOOKUP DS    0H
         SR    R8,R8               CLEAR REG 8
         LA    R6,8                TABLE INCREMENT
SRCLOOP  DS    0H
         L     R5,0(,R4)           GET FUNCTION POINTER
         IC    R8,0(,R5)           PICK UP LENGTH FOR EX INSTR
         EX    R8,CLC
         BE    FNDFUNCT
         BXLE  R4,R6,SRCLOOP       AND LOOK SOME MORE
         SR    R1,R1               NO MASK IF NOT FOUND
         BR    R11                 AND RETURN TO CALLER
CLC      CLC   1(0,R5),0(R9)          ARGUMENT:COMPARE
FNDFUNCT DS    0H
         L     R1,4(,R4)           GET FUNCTION MASK
         BR    R11                 AND RETURN TO CALLER
         TITLE 'IEFDB401 - CONSTANTS'
SIPNAME  DC    C'&SYSPARM'         FUNCTION TABLE NAME
         LTORG ,
         TITLE 'IEFDB401 - DSECT FOR THE PASSED WORKAREA'
         IEFZBMAP
         TITLE 'IEFDB401 - CVT WITH PREFIX'
         CVT   PREFIX=YES,DSECT=YES,LIST=YES
         TITLE 'IEFDB401 - SVC99 PARAMETER LIST DSECT'
         IEFZB4D0
         TITLE 'IEFDB401 - SVC99 TEXT UNIT DSECT'
         IEFZB4D2
         TITLE 'IEFDB401 - ASCB DSECT'
         IHAASCB
         TITLE 'IEFDB401 - TCB DSECT'
         IKJTCB LIST=YES
         TITLE 'IEFDB401 - RB DSECT'
         IHARB
         TITLE 'IEFDB401 - CDE DSECT'
         IHACDE
         TITLE 'IEFDB401 - TSB DSECT'
         IKJTSB LIST=YES
         TITLE 'IEFDB401 - OUCB DSECT'
         IRAOUCB
         TITLE 'IEFDB401 - JSCB DSECT'
         IEZJSCB
         TITLE 'IEFDB401 - JCT/ACT DSECT'
JCT      DSECT
JCTPRFX  DS    4F          JCT PREFIX
         IEFAJCTB
         TITLE 'IEFDB401 - SCT DSECT'
SCT      DSECT
SCTPRFX  DS    4F          SCT PREFIX
         IEFASCTB
         TITLE 'IEFDB401 - END'
         END
/*
//*
//IEWL EXEC PGM=IEWL,
// PARM='LIST,NCAL,XREF,LET,RENT,REUS'
//SYSPRINT DD SYSOUT=*
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,1),DCB=BUFNO=1
//USEROBJ  DD DISP=SHR,DSN=LOCL.USEROBJ
//SYSLMOD  DD DISP=SHR,DSN=SYS1.LPALIB,UNIT=3330-1,VOL=SER=RES1N4
//SYSLIN   DD *
        ORDER  IEFDB400
        ORDER  IEFDB401
        ORDER  IEFAB4F7
        ORDER  IEFAB4F6
        ORDER  IEFDB4F0
        ORDER  IEFDB4FF
        ORDER  IEFDB4FC
        ORDER  IEFDB4FA
        ORDER  IEFDB410
        ORDER  IEFDB412
        ORDER  IEFDB411
        ORDER  IEFAB4DC
        ORDER  IEFDB417
        ORDER  IEFAB4E9
        ORDER  IEFAB445
        ORDER  IEFDB413
        ORDER  IEFDB414
        ORDER  IEFDB418
        ORDER  IEFDB4FE
        ORDER  IEFDB4F9
        ORDER  IEFDB4F8
        ORDER  IEEMB848
        ORDER  IEFDB4FD
        ORDER  IEFDB480
        ORDER  IEFDB481
        ORDER  IEFDB4A0
        ORDER  IEFDB4A1
        ORDER  IEFDB470
        ORDER  IEFDB450
        ORDER  IEFDB460
        ORDER  IEFDB490
        ORDER  IEFBB401
        ORDER  IEFAB4FE
        ORDER  IEFBB402
        ORDER  IEFBB404
        ORDER  IEFBB4M3
        ORDER  IEFAB451
        ORDER  IEFAB452
        ORDER  IEFAB453
        ORDER  IEFAB470
        ORDER  IEFAB454
        ORDER  IEFAB457
        ORDER  IEFAB464
        ORDER  IEFAB459
        ORDER  IEFAB421
        ORDER  IEFAB427
        ORDER  IEFAB431
        ORDER  IEFAB423
        ORDER  IEFAB424
        ORDER  IEFAB425
        ORDER  IEFAB426
        ORDER  IEFAB430
        ORDER  IEFAB433
        ORDER  IEFAB436
        ORDER  IEFAB440
        ORDER  IEFAB4F0
        ORDER  IEFAB434
        ORDER  IEFAB428
        ORDER  IEFAB4FC
        ORDER  IEFAB435
        ORDER  IEFAB441
        ORDER  IEFAB442
        ORDER  IEFAB432
        ORDER  IEFAB490
        ORDER  IEFAB4F3
        ORDER  IEFAB4FD
        ORDER  IEFAB471
        ORDER  IEFAB4FA
        ORDER  IEFAB473
        ORDER  IEFAB4M5
        ORDER  IEFAB4F9
        ORDER  IEFAB4F8
        ORDER  IEFAB475
        ORDER  IEFAB476
        ORDER  IEFAB480
        ORDER  IEFAB4F2
        ORDER  IEFAB492
        ORDER  IEFAB493
        ORDER  IEFAB494
        ORDER  IEFAB495
        ORDER  IEFBB410
        ORDER  IEFBB412
        ORDER  IEFBB414
        ORDER  IEFBB416
        ORDER  IEFAB4EC
        ORDER  IEFAB4A0
        ORDER  IEFAB4A2
        ORDER  IEFAB4SF
        ORDER  IEFAB4A4
        ORDER  IEFAB4A6
        ORDER  IEFAB4A8
        ORDER  IEFSGOPT
        ORDER  IEFYRCDS
        ORDER  IDACAT11
        ORDER  IDACAT12
        ORDER  IEEAB400
        ORDER  IEEAB401
        ORDER  IEFAB4A3
        ORDER  IEFAB4B0
        ORDER  IEFAB4B2
        ORDER  IEFAB4DD
        ORDER  IEFAB4DE
        ORDER  IEFAB4EA
        ORDER  IEFAB4EB
        ORDER  IEFAB4ED
        ORDER  IEFAB4EE
        ORDER  IEFAB4EF
        ORDER  IEFAB4EI
        ORDER  IEFAB4E0
        ORDER  IEFAB4E1
        ORDER  IEFAB4E2
        ORDER  IEFAB4E3
        ORDER  IEFAB4E4
        ORDER  IEFAB4E6
        ORDER  IEFAB4E7
        ORDER  IEFAB4E8
        ORDER  IEFAB4F1
        ORDER  IEFAB4F4
        ORDER  IEFAB4F5
        ORDER  IEFAB4M4
        ORDER  IEFAB4M6
        ORDER  IEFAB4M7
        ORDER  IEFAB4M9
        ORDER  IEFAB4UV
        ORDER  IEFAB422
        ORDER  IEFAB429
        ORDER  IEFAB455
        ORDER  IEFAB456
        ORDER  IEFAB458
        ORDER  IEFAB461
        ORDER  IEFAB463
        ORDER  IEFAB466
        ORDER  IEFAB469
        ORDER  IEFAB472
        ORDER  IEFAB474
        ORDER  IEFAB477
        ORDER  IEFAB478
        ORDER  IEFAB479
        ORDER  IEFAB48A
        ORDER  IEFAB481
        ORDER  IEFAB485
        ORDER  IEFAB486
        ORDER  IEFAB487
        ORDER  IEFAB488
        ORDER  IEFAB489
        ORDER  IEFAB49A
        ORDER  IEFAB49B
        ORDER  IEFAB49C
        ORDER  IEFAB491
        ORDER  IEFAB496
        ORDER  IEFAB498
        ORDER  IEFAB499
        ORDER  IEFBB4M1
        ORDER  IEFBB4M2
        ORDER  IEFBB4M4
        ORDER  IEFBB4M5
        ORDER  IEFDB4FB
        ORDER  IEFDB402
        ORDER  IEFDB403
        ORDER  IEFRPREP
        ORDER  IEFSMF30
        ORDER  IEFTB720
        ORDER  IEFTB721
        ORDER  IEFTB722
        ORDER  IEFTB723
        ORDER  IEFTB726
        ORDER  IEFTB727
        ORDER  IEFTB728
        ORDER  IEFXVNSL
        ALIAS  IEFAB4DC
        ALIAS  IEFAB4EC
        ALIAS  IEFAB4F4
        ALIAS  IEFAB4F5
        ALIAS  IEFAB4SF
        ALIAS  IEFAB4UV
        ALIAS  IEFAB445
        ALIAS  IEFAB49C
        ALIAS  IEFBB410
        ALIAS  IEFTB723
        ALIAS  IGC0009I
        ENTRY  IEFBB401
      INCLUDE  USEROBJ(IEFDB401)
      INCLUDE  SYSLMOD(IEFW21SD)
      SETCODE  AC(1)
         NAME  IEFW21SD(R)
/*
//
