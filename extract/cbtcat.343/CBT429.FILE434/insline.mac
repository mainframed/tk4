/* REXX */
/*                           */
/* AUTHOR: MARK ZELDEN       */
/*                           */
/* TRACE ?R */
Address ISREDIT
"MACRO (parm type label1 label2)"
 /* Address ISPEXEC "CONTROL ERRORS RETURN"  */
/***************************************************************/
/*                                                             */
/* THIS EDIT MACRO WILL INSERT A CHARACTER STRING EITHER       */
/* AFTER OR BEFORE ALL OR SPECIFIED LINES. EXCLUDED LINES      */
/* ARE ALWAYS OMITTED.                                         */
/*                                                             */
/***************************************************************/
/* COMMAND SYNTAX:                                             */
/*                                                             */
/*   INSLINE 'data to insert' < A × B > (.label1) (.label2)    */
/*                                                             */
/***************************************************************/
/*  INSERT "AFTER"  EXAMPLES                                   */
/*      INSLINE 'insert this after every line' A               */
/*      INSLINE 'insert this after every line' A .FROM .TO     */
/*                                                             */
/*  INSERT "BEFORE"  EXAMPLES                                  */
/*      INSLINE 'insert this before every line' B              */
/*      INSLINE 'insert this before every line' B .FROM .TO    */
/*                                                             */
/***************************************************************/
/***********************************************/
/*   VERIFY INPUT PARAMETERS                   */
/***********************************************/
type = Translate(type) /* ensure upper case */

If parm = '' then do
  zedsmsg = 'NO INSERT DATA'
  zedlmsg = 'YOU MUST SPECIFY THE DATA TO INSERT',
            'AS THE FIRST PARAMETER.'
  Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
  Exit 12
End
If type = '' then do
  zedsmsg = 'NO INSERT TYPE'
  zedlmsg = 'YOU MUST SPECIFY AN INSERT TYPE OF "A"',
            'OR "B" AS THE SECOND PARAMETER.'
  Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
  Exit 12
End
If type ^= 'A' & type^= 'B' then do
  zedsmsg = 'INVALID INSERT TYPE'
  zedlmsg = 'YOU MUST SPECIFY AN INSERT TYPE OF "A"',
            'OR "B" AS THE SECOND PARAMETER.'
  Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
  Exit 12
End
/***********************************************/
/*   FIND OUT IF LABELS ARE BEING USED         */
/***********************************************/
Call FIND_LABELS  /* find out if labels are being used  */
/***********************************************/
/* IF THE DATA IS IS DELIMTED BY SINGLE OR     */
/* DOUBLE QUOTES - THEN REMOVE THE DELIMITERS  */
/***********************************************/
If Substr(parm,1,1) = '''' × Substr(parm,1,1) = '"' then
parm = Substr(parm,2,Length(parm)-2)
/***********************************************/
/* MAKE SURE DATA WILL "FIT"                   */
/***********************************************/
"(width) = DATA_WIDTH " /* length of line  */
If Length(parm) > width then do
  width = width + 0 /* remove leading zeros */
  zedsmsg = 'DATA TOO LONG'
  zedlmsg = 'THE INSERT DATA IS TOO LONG TO FIT ON A LINE',
            '(MAXLEN =' width ×× ').'
  Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
  Exit 12
End
/***********************************************/
/*   BEGIN INSERT PROCESSING                   */
/***********************************************/
If type = 'A' then line_type = 'LINE_AFTER'
   else line_type = 'LINE_BEFORE'
count = lastln - firstln + 1
Do count
  "ISREDIT (chkexcl) = XSTATUS" firstln
  If chkexcl = "X" then do   /* is line excluded?       */
    firstln = firstln + 1    /* yes, skip it            */
    count = count-1          /* correct total count     */
    iterate                  /* get next record         */
  End
  line_type firstln "= DATALINE '" ×× parm ×× "'"
  firstln = firstln + 2
End
/***********************************************/
/*   END INSERT PROCESSING                     */
/***********************************************/
zedsmsg = count 'LINES INSERTED'
zedlmsg = parm 'WAS INSERTED ON' count 'LINES.'
Address ISPEXEC "SETMSG MSG(ISRZ000)"  /* msg - no alarm */
Exit 0
/*********************************/
/*  SUB-ROUTINE TO FIND LABELS   */
/*********************************/
FIND_LABELS:
If label1 = '' then do
  firstln  = 1
  "(lastln) = LINENUM .ZLAST"
End
Else do
  If label2 = '' then label2 = label1
  firstsv = 'NOTFOUND'
  lastsv  = 'NOTFOUND'
  label1 = Translate(label1)
  label2 = Translate(label2)
  "(saveln) = DISPLAY_LINES"
  "UP MAX"
  Do forever
    "LOCATE LAB NEXT"
    if rc ^= 0 then leave
    "(labline,junk) = DISPLAY_LINES"
    "(lab,junk) = LABEL" labline
    if lab = label1 then firstsv = labline
    if lab = label2 then lastsv  = labline
  End
  /*                                             */
  /* return display lines to originial position  */
  /*                                             */
  "UP MAX"
  If saveln ^= 1 then "DOWN " saveln  /* don't scroll if at top */
  /*                                             */
  If firstsv = 'NOTFOUND'  then do
    zedsmsg = 'RANGE LABEL ERROR'
    zedlmsg = 'THE SPECIFIED RANGE LABEL "' ×× label1 '" WAS',
              'NOT FOUND'
    Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
    Exit 12
  End
  If lastsv  = 'NOTFOUND'  then do
    zedsmsg = 'RANGE LABEL ERROR'
    zedlmsg = 'THE SPECIFIED RANGE LABEL "' ×× label2 '" WAS',
              'NOT FOUND'
    Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
    Exit 12
  End
  If firstsv > lastsv then do
    firstln = lastsv
    lastln  = firstsv
  End
  Else do
    firstln = firstsv
    lastln  = lastsv
  End
End
Return
