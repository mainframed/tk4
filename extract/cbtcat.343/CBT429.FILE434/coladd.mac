/* REXX */
/*                                       */
/* AUTHOR: Mark Zelden                   */
/*                                       */
/***************************************************************/
/*                                                             */
/* This EDIT macro totals numbers in a specified column range. */
/* An optional parameter of "HEX" is needed to add hexadecimal */
/* numbers.                                                    */
/*                                                             */
/* Hexadecimal numbers to be added my be represented with      */
/* or without an "X". In other words, x'1E' and 1E can both    */
/* be processed and are treated the same.                      */
/*                                                             */
/* The result is displayed as an ISPF short message in the     */
/* top right hand corner in the same format as the addition    */
/* type (decimal or hexadecimal). If extended help is chosen   */
/* after the result is displayed (normally PF1), then the      */
/* result is displayed in both decimal and hexadecimal.        */
/*                                                             */
/* Line range labels can be used, and excluded lines are       */
/* always omitted.                                             */
/*                                                             */
/***************************************************************/
/* COMMAND SYNTAX:                                             */
/*                                                             */
/*   COLADD begcol endcol <DEC × HEX> (.label1) (.label2)      */
/*                                                             */
/*  ** NOTE 1: If using line range labels then HEX or          */
/*             DEC must be specified as the 3rd positional     */
/*             parameter.                                      */
/*                                                             */
/*  ** NOTE 2: Excluded lines are ALWAYS omitted.              */
/*                                                             */
/*  ** NOTE 3: DEC and HEX can be abbreviated by using one     */
/*             or more of their characters.                    */
/*                                                             */
/***************************************************************/
/*  EXAMPLES:                                                  */
/*         COLADD 10 25                                        */
/*         COLADD 33 40 HEX                                    */
/*         COLADD 25 30 DEC .A .B                              */
/*         COLADD 44 57 H                                      */
/***************************************************************/
/* TRACE ?R */
Address ISREDIT
"MACRO (begcol endcol type label1 label2)"
 /* Address ISPEXEC "CONTROL ERRORS RETURN"  */
/***********************************************/
/*   VERIFY INPUT PARAMETERS                   */
/***********************************************/
begcol = Translate(begcol) /* chage to upper case if alpha */
"(width) = DATA_WIDTH "   /* length of line       */
width = Format(width)     /* remove leading zeros */
If begcol = '' then do
  zedsmsg = 'MISSING PARAMETER'
  zedlmsg = 'A BEGINNING COLUMN NUMBER',
            'MUST BE SPECIFIED.'
  Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
  Exit 12
End
Select
  When Datatype(begcol,Number) = 1 & endcol = '' then do
    zedsmsg = 'NO ENDING COLUMN'
    zedlmsg = 'AN ENDING COLUMN NUMBER',
              'MUST BE SPECIFIED.'
    Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
    Exit 12
  End /* when */
  When Datatype(begcol,Number) <> 1 × ,
       Datatype(endcol,Number) <> 1 then do
    zedsmsg = 'COLUMN NUMBER NOT NUMERIC'
    zedlmsg = 'THE BEGINNING AND ENDING COLUMN NUMBERS',
              'MUST BE NUMERIC.'
    Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
    Exit 12
  End /* when */
  When Datatype(begcol,Number) =1 & Datatype(endcol,Number) =1 then do
    If endcol < begcol then do
      zedsmsg = 'END COL < START COL'
      zedlmsg = 'THE ENDING COLUMN MUST BE GREATER THAN OR',
                'EQUAL TO THE STARTING COLUMN.'
      Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
      Exit 12
    End
    If type = '' then type = 'DEC'
    else do
      type = Translate(type)  /* change to upper case */
      If Abbrev('DECIMAL',type,1) = 0 & ,
         Abbrev('HEXADECIMAL',type,1) = 0  then do
        zedsmsg = 'INVALID ADDITION TYPE'
        zedlmsg = 'ADDITION TYPE MUST BE "HEX" OR "DEC".'
        Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
        Exit 12
      End
    End /* else do */
    If begcol < 1 × endcol < 1 then do
      zedsmsg = 'INVALID COLUMN NUMBER'
      zedlmsg = 'ALL COLUMN SPECIFICATIONS MUST BE' ,
                'BETWEEN 1 AND' width
      Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
      Exit 12
    End
    If begcol > width × endcol > width then do
      zedsmsg = 'INVALID COLUMN NUMBER'
      zedlmsg = 'ALL COLUMN SPECIFICATIONS MUST BE' ,
                'BETWEEN 1 AND' width
      Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
      Exit 12
    End
  End /* when */
End /* select */
/***********************************************/
/*   FIND OUT IF LABELS ARE BEING USED         */
/***********************************************/
Call FIND_LABELS
/***************************************************/
/* INITIALIZE VARIABLES NEEDED IN PROCESSING LOOP  */
/***************************************************/
Numeric digits 15            /* dflt of 9 not enough    */
count    = 0                 /* count of added lines    */
total    = 0                 /* total of numbers added  */
tgtlen   =  endcol-begcol+1  /* length of mumbers to add*/
/***********************************************/
/*   BEGIN COLUMN ADDITION LOOP                */
/***********************************************/
Do until lastln = firstln-1
  /* copy the data in the current line to variable 'data1' */
  "(data1) = LINE "firstln
  "ISREDIT (chkexcl) = XSTATUS" firstln
  If chkexcl = "NX" then do  /* only process non-excluded lines */
    count = count + 1        /* add one to line count           */
    add_data = Substr(data1,begcol,tgtlen) /* find data         */
    add_data = Strip(add_data)             /* remove blanks     */
    If add_data = '' then do  /* no data within cols specified  */
      add_data = 0            /* nothing to add                 */
      warnmsg = "'*** WARNING - NEXT LINE WAS NOT COUNTED ***'"
      "ISREDIT LINE_BEFORE" firstln "= NOTELINE " warnmsg
    End /* if add_data = '' */
    If Abbrev('HEXADECIMAL',type,1) <> 0 then do /* add hex numbers  */
      add_data = Translate(add_data,"","xX'") /* remove hex notation */
      add_data = Strip(add_data)              /* remove blanks       */
      If Datatype(add_data,X) <> 1 then do    /* valid hex number?   */
        warnmsg = "'*** ERROR - NEXT LINE HAS BAD DATA ***'"
        "ISREDIT LINE_BEFORE" firstln "= NOTELINE " warnmsg
        zedsmsg = 'CAN''T ADD LINE' firstln
        zedlmsg = 'ERROR - THE DATA TO ADD ON LINE' firstln 'IS NOT',
                  'VALID.'
        Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
        Exit 12
      End  /* invalid data to add */
      add_data = X2d(add_data)                /* translate to dec.   */
    End
    If Datatype(add_data,Number) <> 1 then do  /* valid number?    */
      warnmsg = "'*** ERROR - NEXT LINE HAS BAD DATA ***'"
      "ISREDIT LINE_BEFORE" firstln "= NOTELINE " warnmsg
      zedsmsg = 'CAN''T ADD LINE' firstln
      zedlmsg = 'ERROR - THE DATA TO ADD ON LINE' firstln 'IS NOT',
                'VALID.'
      Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
      Exit 12
    End  /* invalid data to add */
    total = total + add_data                  /* add to prev. total  */
  End /* of chkexcl */
  firstln = firstln + 1                       /* bump up line counter*/
End /* do until   */
/***********************************************/
/*   END ADDITION LOOP                         */
/***********************************************/
If Abbrev('HEXADECIMAL',type,1) <> 0 then do
  zedsmsg = "Total = x'"D2x(total)"'"
  zedlmsg = "Total = x'"D2x(total)"' ("total" decimal)." ,
             count "lines were counted."
  Address ISPEXEC "SETMSG MSG(ISRZ000)"  /* msg - no alarm */
  Exit 0
End
Else do
  zedsmsg = "Total =" total
  zedlmsg = "Total =" total "(x'"D2x(total)"' hex)." ,
             count 'lines were counted.'
  Address ISPEXEC "SETMSG MSG(ISRZ000)"  /* msg - no alarm */
  Exit 0
End
/*********************************/
/*  SUB-ROUTINE TO FIND LABELS   */
/*********************************/
FIND_LABELS:
If label1 = '' then do
  firstln  = 1
  "(lastln) = LINENUM .ZLAST"
End
Else do
  If label2 = '' then label2 = label1
  firstsv = 'NOTFOUND'
  lastsv  = 'NOTFOUND'
  label1 = Translate(label1)
  label2 = Translate(label2)
  "(saveln) = DISPLAY_LINES"
  "UP MAX"
  Do forever
    "LOCATE LAB NEXT"
    if rc <> 0 then leave
    "(labline,junk) = DISPLAY_LINES"
    "(lab,junk) = LABEL" labline
    if lab = label1 then firstsv = labline
    if lab = label2 then lastsv  = labline
  End
  /*                                             */
  /* return display lines to originial position  */
  /*                                             */
  "UP MAX"
  If saveln <> 1 then "DOWN " saveln  /* don't scroll if at top */
  /*                                             */
  If firstsv = 'NOTFOUND'  then do
    zedsmsg = 'RANGE LABEL ERROR'
    zedlmsg = 'THE SPECIFIED RANGE LABEL "' ×× label1 '" WAS',
              'NOT FOUND'
    Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
    Exit 12
  End
  If lastsv  = 'NOTFOUND'  then do
    zedsmsg = 'RANGE LABEL ERROR'
    zedlmsg = 'THE SPECIFIED RANGE LABEL "' ×× label2 '" WAS',
              'NOT FOUND'
    Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm */
    Exit 12
  End
  If firstsv > lastsv then do
    firstln = lastsv
    lastln  = firstsv
  End
  Else do
    firstln = firstsv
    lastln  = lastsv
  End
End
Return
