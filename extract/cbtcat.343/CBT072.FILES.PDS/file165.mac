*              /* LEVEL=0002 */
XXNAMEVS TITLE 'MODULE TO GIVE OUR NAME TO A VSAM DATASET'
XXNAMEVS CSECT
*
**
***      EQUATE REGISTERS AND SET UP DYNAMIC SAVEAREA
**
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
RA       EQU   10
R11      EQU   11
RB       EQU   11
R12      EQU   12
RC       EQU   12
R13      EQU   13
RD       EQU   13
R14      EQU   14
RE       EQU   14
R15      EQU   15
RF       EQU   15
         B     26(RF)                   BRANCH AROUND ID
         DC    AL1(21),CL8'XXNAMEVS'    PROGRAM NAME
         DC    CL8'&SYSDATE'            DATE
         DC    CL5'&SYSTIME'            TIME
         STM   RE,RC,12(RD)             SAVE REGS IN HI SAVE AREA
         LR    RC,RF                    SET UP BASE
         USING XXNAMEVS,RC              OF R12
         USING SAVEAREA,RD              DYNAMIC SAVEAREA BASE + WORK
         LR    R2,R1                    SAVE PARAMS
         LR    RB,RD                    SAVE CALLERS SAVE AREA ADDR
         GETMAIN R,LV=GETSIZE1          GET SOME CORE
         LR    RD,R1                    SET DSECT BASE
         ST    RB,SAVE1+4               SAVE CALLERS SAVE AREA ADDR
         ST    RD,8(RB)                 SAVE OURS IN CALLERS
         EJECT
*
**
***      GET PARM FIELD AND CHECK SIZE
**
*
         L     R2,0(R2)                 GET PTR
         LH    R14,0(R2)                GET SIZE
         CH    R14,SIZE                 RIGHT SIZE ?
         BNE   PARMBAD                  NO - TELL USER
         MVC   P3+3(5),5(R2)            MOVE DATE
         MVC   P1(7),12(R2)             MOVE PART 1 TIME
         MVC   P1+7(7),21(R2)           MOVE PART 2 TIME
         MVC   P2+6(5),ZERO5            CLEAR FIELDS
         EJECT
*
**
***      CHANGE 24 BYTES PRINTABLE TO 12 HEX BYTES
**
*
         XC    DWORD,DWORD              CLEAR DWORD
         LA    R2,P1                    INPUT AREA OF 24 BYTES
         LA    R3,6                     24/4
         LA    R4,PHEX                  OUTPUT AREA OF 12 BYTES
PLOOP    DS    0H
         TR    0(4,R2),TABLE-193        MAKE X'C1' X'0A' ETC
         PACK  DWORD,0(5,R2)            PACK IT
         MVC   0(2,R4),DWORD+5          MOVE 2 BYTES
         LA    R2,4(R2)                 UP TO NEXT INPUT
         LA    R4,2(R4)                 UP TO NEXT OUTPUT
         BCT   R3,PLOOP                 TILL ALL 24 BYTES DONE
         ICM   R2,15,PHEX+8             GET DATE AS 00077001
         SLL   R2,4                     MAKE DATE 00770010
         STCM  R2,15,PHEX+8             SAVE BACK
         OI    PHEX+11,X'0C'            MAKE DATE 0077001C
         EJECT
*
**
***      FIND IGG0CLA1 MODULE IN CORE. FIXLIST MEMBER!!!!
**
*
         LM    R5,R6,IGG0CLA1           PICK UP NAME
         L     R2,16                    CVT PTR
         L     R2,188(R2)               CDE CHAIN
LOOP     DS    0H
         ICM   R2,15,0(R2)              PTR TO NEXT CDE
         BZ    NOTFCLA1                 NO DID FIND
         LM    R3,R4,8(R2)              PICK NAME FROM CDE
         CR    R4,R6                    LAST HALF CORRECT
         BNE   LOOP                     NO - TRY NEXT CDE
         CR    R3,R5                    FIRST HALF CORRECT
         BNE   LOOP                     NO - TRY ANOTHER ONE
         EJECT
*
**
***      FIND START AND END ADDRESS OF IGG0CLA1
**
*
         L     R2,20(R2)                GET EXTENT LIST (XTLST)
         L     R1,12(R2)                GET START OF MODULE
         L     R3,8(R2)                 GET SIZE OF MODULE. TOP BIT ON
         LA    R3,0(R3,R1)              CALC END OF MODULE
         EJECT
*
**
***      SCAN THRU MODULE IGG0CLA1 FOR IGG0CLAL CODE
**
*
         LA    R2,1                     INCREMENT VALUE FOR SCAN
         LM    R5,R6,IGG0CLAL           GET MODULE NAME
LOOP1    DS    0H
         L     R4,4(R1)                 GET SECOND HALF OF NAME
         CR    R4,R6                    IS IT WHAT WE WANT
         BE    MAYBE                    YES - TRY FIRST HALF
BACK     DS    0H
         BXLE  R1,R2,LOOP1              BACK AGAIN
         B     NOTFCLAL                 NOT FOUND IGG0CLAL - HOME
         SPACE 2
MAYBE    DS    0H
         L     R4,0(R1)                 PICK UP FIRST HALF OF NAME
         CR    R4,R5                    IS IT OK
         BNE   BACK                     NO - TRY AGAIN
         EJECT
*
**
***      NAME IGG0CLAL FOUND CHECK OUT CODE TO REPLACE
**
*
         CLC   10(6,R1),$DATE           CHECK CORRECT LEVEL
         BNE   BACK                     MAYBE IT JUST WAS THE NAME
         CLC   $OFFSET1(26,R1),$VER     CHECK CODE IN MODULE
         BNE   NOTFCODE                 BAD - GO HOME
BEENBE4  DS    0H
         LR    R7,R1                    MODESET DESTROYS
         MODESET KEY=ZERO               GO GOOD KEY FOR TRAMPING
         MVC   $OFFSET1(14,R7),$REP     MOVE IN CODE
         MVC   $OFFSET2(12,R7),PHEX     MOVE IN CONSTANTS
         MODESET KEY=NZERO              GO BE A GOOD GUY NOW
         WTO   'XXNAMEVS - MODULE IGG0CLAL NOW CHANGED IN CORE'
         EJECT
*
**
***      FREE DYNAMIC SAVEAREA AND RETURN
**
*
RET      DS    0H
         LR    R1,RD                    ADDR OF AREA TO FREE
         L     RD,4(RD)                 HI SAVE AREA ADDR
         FREEMAIN R,LV=GETSIZE1,A=(1)   FREE UP CORE
         LM    RE,RC,12(RD)             RESORE CALLERS REGS
         BR    RE                       RETURN
         EJECT
*
**
***      MODULE IGG0CLA1 NOT FOUND - WTO THEN RETURN
**
*
NOTFCLA1 DS    0H
         WTO   'XXNAMEVS - MODULE IGG0CLA1 NOT FOUND'
         B     RET                      HOME
         EJECT
*
**
***      MODULE IGG0CLAL NOT FOUND - WTO AND RETURN
**
*
NOTFCLAL DS    0H
         WTO   'XXNAMEVS - MODULE IGG0CLAL NOT FOUND'
         B     RET                      HOME
         EJECT
*
**
***      CODE IN IGG0CLAL NOT WHAT WE THINK IT IS
**
*
NOTFCODE DS    0H
         CLC   $OFFSET1(14,R1),$REP     BEEN HERE BEFORE ?
         BE    BEENBE4                  YES - CARRY ON OK
         WTO   'XXNAMEVS - INCORRECT LEVEL OF MODULE IGG0CLAL'
         B     RET                      GO HOME
         EJECT
*
**
***      INCORRECT LENGTH OF PARM FIELD
**
*
PARMBAD  DS    0H
         WTO   'XXNAMEVS - PARM FIELD INCORRECT LENGTH'
         B     RET                      HOME
         EJECT
*
**
***      CONSTANTS
**
*
IGG0CLA1 DC    0F'0',C'IGG0CLA1'
IGG0CLAL DC    0F'0',C'IGG0CLAL'
ZERO5    DC    C'00000'
SIZE     DC    H'26'
TABLE    DC    X'0A0B0C0D0E0F',XL(X'F0'-X'C7')'00',X'000102030405060708C
               09'
         SPACE 5
*        ANY VALUES THAT NEED CHANGING IF IGG0CLAL IS MODIFIED
*        BY IBM ARE PREFIXED WITH THE NATIONAL CHARACTER     $
         SPACE 5
$VER     DC    XL26'B20520004780CC0ED203B004CEBA9500B0074770CC641B110A0C
               B'
$REP     DC    XL14'D2072000CC0E9801CC1247F0CC1A'
$DATE    DC    C'75.352'
$OFFSET1 EQU   X'C2E'-5
$OFFSET2 EQU   X'C3C'-5
         EJECT
*
**
***      DSECT FOR GETMAINED WORK AREA
**
*
SAVEAREA DSECT
SAVE1    DS    18F
DWORD    DS    D
P1       DS    CL8
P2       DS    CL8
P3       DS    CL8
PHEX     DS    CL12
GETEND1  DS    0D
GETSIZE1 EQU   GETEND1-SAVE1
         END
