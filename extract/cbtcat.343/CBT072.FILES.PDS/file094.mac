*          DATA SET ANBMONITOR AT LEVEL 001 AS OF 17/08/76
         TITLE 'MONITOR - MAIN MONITOR ROUTINE'
MONITOR  CSECT
         B     ENTRY-MONITOR(15)
         DC    X'07',CL7'MONITOR'
         ENTRY MONEND
ENTRY    EQU   *
*
**  MAIN MONITOR ROUTINE
*
**  INTVAL CONTAINS THE DEFAULT SAMPLING INTERVAL
**  ITYPE CONTAINS THE DEFAULT TYPE OF INTERVAL (SECS)
**  MAXTIM CONTAINS THE DEFAULT SAMPLING INTERVAL IN MINS (60)
**  THE MONITORS MUST BE OF THE FORM MON. WHERE . IS
**  ALPHABETIC (A-Z)
**  THE UNITS OF THE SAMPLING INTERVAL MAY BE CHANGED
**  WITH THE KEYWORDS MILLI,SECS,MINS
**  THERE ARE TWO INPUT STREAMS - THE PARM FIELD AND
**  THE STREAM MONITORS
*
RW0      EQU   0
RW1      EQU   1
RB2      EQU   2
RW3      EQU   3
RW4      EQU   4
RW5      EQU   5
RW6      EQU   6
RW7      EQU   7
RW8      EQU   8
RW15     EQU   15
*
         STM   14,12,12(13)            SAVE REGISTERS
         BALR  RB2,0
         USING *,RB2
ENTER    EQU   *
         LR    RW3,13
         ST    13,SAVE+4
         LA    13,SAVE
         ST    13,8(RW3)               CHAIN SAVE AREAS
*
**  GET PARM FIELD
*
         LA    RW1,ARGL1               POINT AT PARAM LIST
         L     RW15,=V(GETPRM)         GETPRM
         BALR  14,15                   LINK TO ROUTINE
*
**  ALTER PARAMETERS
*
         LA    RW1,ARGL2               POINT AT PARAM LIST
         L     RW15,=V(PARAMS)         PARAMS
         BALR  14,15                   LINK TO ROUTINE
*
**  READ DATA FROM INPUT STREAM MONITORS
*
READMON  EQU   *
         LA    RW1,ARGL3               POINT AT PARAM LIST
         L     RW15,=V(INPUT)          INPUT
         BALR  14,15                   LINK TO ROUTINE
         L     RW3,FLAG                LOAD RETURN FLAG
         LTR   RW3,RW3                 TEST FOR END OF FILE
         BNZ   ENDATA                  YES,BRANCH
         LA    RW3,80                  LOAD DATA LENGTH
         ST    RW3,LENBUF
         LA    RW1,ARGL2               POINT AT PARAM LIST
         L     RW15,=V(PARAMS)         PARAMS
         BALR  14,15                   LINK TO ROUTINE
         B     READMON
*
**  PRINT SELECTED MONITORS
*
ENDATA   EQU   *
         LA    RW3,32                  MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         LA    RW3,MSG1                POINT AT FIRST MESSAGE
         ST    RW3,MSGAD               STORE IN PARAM LIST
         LA    RW1,ARGLIST1            POINT AT PARAM LIST
         L     RW15,=V(OUTPUT)         POINT AT OUTPUT
         BALR  14,15                   LINK TO ROUTINE
*
         SR    RW3,RW3                 ZERO MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         BALR  14,15                   LINK TO OUTPUT
*
         LA    RW3,32                  MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         LA    RW3,MSG2                POINT AT SECOND MESSAGE
         ST    RW3,MSGAD               STORE IN PARAM LIST
         BALR  14,15                   LINK TO ROUTINE
*
         LA    RW3,MSG3                POINT AT THIRD MESSAGE
         ST    RW3,MSGAD               STORE IN PARAM LIST
         BALR  14,15                   LINK TO OUTPUT
*
         SR    RW3,RW3                 ZERO MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         BALR  14,15                   LINK TO OUTPUT
*
         L     RW3,ITYPE               LOAD TYPE OF INTERVAL
         SLL   RW3,3                   SHIFT FOR INDEX
         LA    RW4,UNITS(RW3)          POINT AT SELECTED UNITS
         MVC   MSG4+21(8),0(RW4)       MOVE UNITS INTO MESSGAE
         LA    RW3,32                  MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         LA    RW3,MSG4                POINT AT FOURTH MESSAGE
         ST    RW3,MSGAD               STORE IN PARAM LIST
         BALR  14,15                   LINK TO OUTPUT
*
         LA    RW3,MSG5                POINT AT FIFTH MESSAGE
         ST    RW3,MSGAD               STORE IN PARAM LIST
         BALR  14,15                   LINK TO OUTPUT
         SR    RW3,RW3                 ZERO MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         BALR  14,15                   LINK TO OUTPUT
*
**  CYCLE THRU MONITORS
*
         LA    RW3,32                  MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         LA    RW3,MSG6                POINT AT MESSAGE SIX
         ST    RW3,MSGAD               STORE IN PARAM LIST
         LA    RW3,26                  COUNTER
         LA    RW4,ALPH                POINT AT LETTERS
         LA    RW5,MINT                POINT AT FREQUENCIES
         L     RW8,=V(MONAD)           POINT AT ADDRESS TABLE
WRITMON  EQU   *
         L     RW7,0(RW5)              PICK UP FREQUENCIES
         LTR   RW7,RW7                 ZERO?
         BNP   INCMON                  YES,BRANCH
         MVI   ANY,X'FF'               SET ANY FLAG
         MVC   MON+3(1),0(RW4)         CREATE MONITOR NAME
         MVC   MSG6+2(4),MON           MOVE INTO BUFFER
         SR    RW6,RW6
         M     RW6,INTVAL              GET MONITOR CALLING INTERVAL
         CVD   RW7,DBWD                CONVERT TO DECIMAL
         L     RW7,DBWD+4              REMOVE SIGN
         SRL   RW7,4
         ST    RW7,DBWD+4
         MVC   MSG6+8(9),PATTERN       MOVE EDIT PATTERN INTO MSG
         ED    MSG6+8(9),DBWD+4        EDIT INTERVAL
         LA    RW1,ARGLIST1            POINT AT PARAM LIST
         L     RW15,=V(OUTPUT)         POINT AT OUTPUT
         BALR  14,15                   LINK TO ROUTINE
         LOAD  EPLOC=MON               LOAD MONITOR
         ST    RW0,0(RW8)              STORE ADDRESS IN TABLE
*
**  INCREMENT COUNTERS
*
INCMON   EQU   *
         LA    RW8,4(RW8)              INCREMENT TABLE ADDRESS
         LA    RW4,1(RW4)              POINT AT NEXT LETTER
         LA    RW5,4(RW5)              POINT AT NEXT FREQUENCY
         BCT   RW3,WRITMON             LOOP BACK
*
**  ANY ACTIVE MONITORS
*
         TM    ANY,X'FF'               TEST FLAG
         BZ    ENDMON                  NO,BRANCH
*
**  CONVERT PARAMETERS TO CORRECT UNITS
*
         SR    RW6,RW6
         L     RW7,=F'6000'            CONVERT MAXTIM TO
         M     RW6,MAXTIM              HUNDREDTHS OF A SCEOND
         ST    RW7,MAXTIM
         L     RW3,ITYPE               LOAD UNIT TYPE
         SLL   RW3,2                   SHIFT FOR INDEX
         B     TABLE(RW3)
TABLE    EQU   *
         B     TYPE0
         B     TYPE1
TYPE2    EQU   *
*
**  UNITS = MINS
**  CONVERT TO MICROSECONDS
*
         L     RW7,MINS                LOAD MULT FACTOR
         B     MULT
TYPE1    EQU   *
*
**  UNITS V SECS
**  CONVERT TO MICROSECONDC
*
         L     RW7,SECS                LOAD MULT FACTOR
         B     MULT
TYPE0    EQU   *
*
**  UNITS= MILLI
**  CONVERT TO MICROSECONDS
*
         L     RW7,MILLI               LOAD MULT FACTOR
*
**  PERFORM MULTIPLICATION
*
MULT     EQU   *
         SR    RW6,RW6
         M     RW6,INTVAL
         ST    RW7,INTVAL              STORE INTERVAL
*
**  WRITE ACTIVE MONITORS TO LOG
*
         SR    RW3,RW3
         ST    RW3,FLAG                ZERO FLAG
         LA    RW1,ARGL5               POINT AT PARAM LIST
         L     RW15,=V(MONRT)          MONRT
         BALR  14,15                   LINK TO ROUTINE
*
**  WRITE DATE TO LOG
*
         LA    RW1,ARGL6               POINT AT PARAM LIST
         L     RW15,=V(GETDAT)         GETDAT
         BALR  14,15                   LINK TO ROUTINE
         LA    RW1,NAME                POINT AT 'DATE'
         ST    RW1,ARGL5               STORE IN PARAM LIST
         LA    RW1,2                   LOAD NEW DATA LENGTH
         ST    RW1,LENGTH
         LA    RW1,DATE                POINT AT DATA
         ST    RW1,DATAD               STORE IN PARAM LIST
         LA    RW1,ARGL5               POINT AT PARAM LIST
         L     RW15,=V(MONRT)          MONRT
         BALR  14,15                   LINK TO ROUTINE
*
         ST    RW3,MSGLEN              SET ZERO LENGTH
         LA    RW1,ARGLIST1            POINT AT PARAM LIST
         L     RW15,=V(OUTPUT)         OUTPUT
         BALR  14,15                   LINK TO ROUTINE
*
**  START MONITORING
*
         TIME  DEC                     GET TOD
         SR    RW1,RW1                 ZERO BOTTOM
         SRDL  RW0,28                  SHIFT TO PENULTIMATE NIBBLE
         O     RW1,=F'12'              OR IN SIGN
         STM   RW0,RW1,TIME            STORE
         UNPK  DBWD(8),TIME+3(5)       UNPACK
         OI    DBWD+7,X'F0'            REMOVE SIGN
         MVC   MSG7+1(2),DBWD
         MVC   MSG7+4(2),DBWD+2
         MVC   MSG7+7(2),DBWD+4
         MVC   MSG7+10(2),DBWD+6
         LA    RW3,32                  MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE LENGTH
         LA    RW3,MSG7                POINT AT MESSGAE
         ST    RW3,MSGAD               STORE IN PARAM LIST
         LA    RW1,ARGLIST1            POINT AT PARAM LIST
         L     RW15,=V(OUTPUT)         OUTPUT
         BALR  14,15                   LINK TO ROUTINE
         LA    RW1,ARGL7               POINT AT PARAM LIST
         L     RW15,=V(MONRUN)         MONRUN
         BALR  14,15                   LINK TO ROUTINE
*
**  RETURN
*
RETURN   EQU   *
         L     13,4(13)
         LM    14,12,12(13)            RESTORE REGISTERS
         BR    14
*
**  ERROR EXIT
*
ENDMON   EQU   *
         SR    RW3,RW3                 ZERO MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE MESSGAE LENGTH
         LA    RW1,ARGLIST1            POINT AT PARAM LIST
         L     RW15,=V(OUTPUT)         OUTPUT
         BALR  14,15                   LINK TO ROUTINE
         LA    RW3,32                  MESSAGE LENGTH
         ST    RW3,MSGLEN              STORE MESSGAE LENGTH
         LA    RW3,MSG8                POINT AT MESSAGE
         ST    RW3,MSGAD               STORE IN PARAM LIST
         LA    RW1,ARGLIST1            POINT AT PARAM LIST
         L     RW15,=V(OUTPUT)         OUTPUT
         BALR  14,15                   LINK TO ROUTINE
         B     RETURN
*
**  NORMAL END - BRANCH ENTRY
*
MONEND   EQU   *
         BALR  RW3,0
         USING *,RW3                   TEMP ADDRESSABILITY
         L     RB2,ADENTER
         B     EOD1
ADENTER  DC    A(ENTER)
EOD1     EQU   *
         DROP  RW3
         LA    13,SAVE                 RECHAIN SAVE AREAS
*
**  OBTAIN TOD
*
         TIME  DEC
         SR    RW1,RW1                 ZERO BOTTOM
         SRDL  RW0,28                  SHIFT TO LAST NIBBLE
         O     RW1,=F'12'              INSERT SIGN
         STM   RW0,RW1,TIME            STORE
*
**  UNPACK TIME
*
         UNPK  DBWD(8),TIME+3(5)
         OI    DBWD+7,X'F0'            REMOVE SIGN
         MVC   MSG9+1(2),DBWD
         MVC   MSG9+4(2),DBWD+2
         MVC   MSG9+7(2),DBWD+4
         MVC   MSG9+10(2),DBWD+6
*
**  WRITE OUT MESSAGE
*
         LA    RW3,MSG9
         ST    RW3,MSGAD               STORE IN PARAM LIST
         LA    RW1,ARGLIST1
         L     RW15,=V(OUTPUT)
         BALR  14,15                   LINK TO ROUTINE
*
**  BLANK BUFFER
*
         SR    RW3,RW3
         ST    RW3,MSGLEN               ZERO MESSAGE LENGTH
         BALR  14,15
*
**  CLOSE DCB'S
*
         L     RW3,=V(INDCB)
         TM    48(RW3),X'10'           OPEN?
         BNO   OPEN1                   NO,BRANCH
         CLOSE ((RW3))                 CLOSE INDCB
OPEN1    EQU   *
         L     RW3,=V(OUTDCB)
         TM    48(RW3),X'10'           OPEN?
         BNO   OPEN2                   NO,BRANCH
         CLOSE ((RW3))                 CLOSE OUTDCB
OPEN2    EQU   *
         L     RW3,=V(MONDCB)
         TM    48(RW3),X'10'           OPEN?
         BNO   RETURN
         CLOSE ((RW3))
         B     RETURN
*
**  LITERAL CONSTANTS
*
         LTORG
*
**  DEFAULT APEMAN PARAMETERS -
**  MAXTIM - MONITORING PERIOD (30 MINS)
**  INTVAL - MONITOR SAMPLE INTERVAL (10 UNITS)
**  ITYPE  - SAMPLE INTERVAL UNITS (1=SECS)   (0=MILLI;2=MINS)
*
MAXTIM   DC    F'30'
INTVAL   DC    F'10'
ITYPE    DC    F'1'
*
**  SAVE AREAS AND STORAGE
*
SAVE     DS    18F
LENBUF   DC    F'100'
BUFFER   DS    25F
INSTR    DC    CL8'APEMAN'
FLAG     DC    F'0'
MINT     DC    26F'0'
OUTSTR   DC    C'MONPRINT'
TIME     DS    2F
MSGLEN   DC    F'32'
DBWD     DS    D
DATE     DS    D
MINS     DC    F'60000000'
SECS     DC    F'1000000'
MILLI    DC    F'1000'
LENGTH   DC    F'26'
ARGL2    DC    A(ITYPE)
ARGL7    DC    A(MINT)
         DC    A(INTVAL)
         DC    A(MAXTIM)
ARGL1    DC    A(LENBUF)
         DC    A(BUFFER)
ARGL3    DC    A(INSTR)
         DC    A(BUFFER)
         DC    A(FLAG)
ARGL5    DC    A(MAIN)
         DC    A(LENGTH)
DATAD    DC    A(MINT)
         DC    A(FLAG)
ARGL6    DC    A(DATE)
ARGLIST1 DC    A(OUTSTR)
         DC    A(MSGLEN)
MSGAD    DS    F
NAME     DC    C'DATE'
MAIN     DC    C'MAIN'
MSG1     DC    CL32' APEMAN - RELEASE 2'
MSG2     DC    CL32' MONITORS SELECTED -'
MSG3     DC    CL32' -----------------'
MSG4     DC    CL32' MONITOR    INTERVAL'
MSG5     DC    CL32' -------    --------'
MSG6     DC    CL32' '
MSG7     DC    CL32'   .  .  .    MONITORING STARTED'
MSG8     DC    CL32' NO MONITORS SELECTED'
MSG9     DC    CL32'   .  .  .    MONITORING ENDED'
ALPH     DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
UNITS    DC    CL8'(MILLI)'
         DC    CL8'(SECS)'
         DC    CL8'(MINS)'
ANY      DC    X'00'
MON      DC    CL8'MON'
PATTERN  DC    X'402020202020202120'
**  ROUTINE RUNS REQUIRED MONITORS
**  LINKAGE IS MONRUN(MINT,INTVAL,MAXTIM)
**  MINT - ARRAY CONTAINING CALLING FREQUENCIES
**  INTVAL - MONITORING INTERVAL IN MICROSECONDS
**  MAXTIM - MAXIMUM MONITORING TIME IN HUNDREDTHS OF A SECOND
*
RW0      EQU   0
RW1      EQU   1
RB2      EQU   2
RW3      EQU   3
RW4      EQU   4
RW5      EQU   5
RW6      EQU   6
RW7      EQU   7
RW8      EQU   8
RW9      EQU   9
RW10     EQU   10
RW15     EQU   15
*
         STM   14,12,12(13)            SAVE REGISTERS
         BALR  RB2,0
         USING *,RB2                   ESTABLISH ADDRESSABILITY
BASE     EQU   *
         LR    RW3,13
         ST    13,SAVE+4
         LA    13,SAVE
         ST    13,8(RW3)               CHAIN SAVE AREAS
*
         LM    RW3,RW5,0(1)            LOAD PARAM ADDRESSES
         ST    RW3,ADMINT              STORE ADDRESS OF FREQUENCIES
         MVC   INTVAL(4),0(RW4)        MOVE INTERVAL
         MVC   MAXTIM(4),0(RW5)        MONITORING PERIOD
*
**  SET UP SPIE FOR ABENDS
*
         SPIE  OC4,((1,15))            CATCH PROGRAM INTERRUPTS
         MVI   FLG3,X'FF'               ***** SET FLAG 3 *****
*
**  OBTAIN START TIME IN HUNDREDTHS OF A SECOND
*
         TIME  BIN                     OBTAIN TIME
         ST    RW0,BEGTIM              STORE START TIME
*
**  CALL ACTIVE MONITORS
*
*
**  REGISTER USAGE -
**  RW3 - COUNTER OF NO OF CALLS
**  RWJ - COUNTER OF NO OF MONITORS
**  RW5 - ADDRESS OF FREQUENCIES
**  RW6 - POINTER FOR MONITOR ADDRESS
**  RW7 - POINTER FOR ABEND COUNTER
*
         SR    RW3,RW3                 SET TO ZERO FOR START
MONITOR  EQU   *
         TIME  MIC,START
         LA    RW4,26                  NO OF MONIORS
         L     RW5,ADMINT              POINTER TO FREQUENCIES
         SR    RW6,RW6                 SET INDEX TO ZERO
         LA    RW7,ABCNT               POINTER TO COUNTERS
AGAIN    EQU   *
         L     RW10,0(RW5)             LOAD FREQUENCY
         LTR   RW10,RW10               LOADED?
         BZ    NXTMON                  NO,IGNORE
         TM    FIRST,X'FF'             FIRST?
         BZ    THIS                    YES THEN WANTED
         SR    RW8,RW8
         LR    RW9,RW3                 TRANSFER COUNTS
         DR    RW8,RW10
         LTR   RW8,RW8                 REMAINDER?
         BNZ   NXTMON                  YES,NOT WANTED
THIS     EQU   *
*
**  CALL MONITOR
*
         TIME  DEC
         ST    RW0,TIME
         LA    RW1,ADARGS              POINT AT ARGUMENTS
         L     RW15,MONAD(RW6)         PICK UP MONITOR ADDRESS
         BALR  14,15                   LINK TO MONITOR
*
**  CALL ENDPDS AFTER FIRST TIME TO RESET MEMBERNAME
*
         TM    FIRST,X'FF'             FIRST TIME?
         BNZ   NXTMON                  NO,BRANCH
         L     RW15,=V(ENDPDS)
         BALR  14,15                   LINK TO ROUTINE
*
**  INCREMENT FOR NEXT MONITOR
*
NXTMON   EQU   *
         LA    RW5,4(RW5)              NEXT FREQUENCY
         LA    RW6,4(RW6)              NEXT ADDRESS
         LA    RW7,2(RW7)              NEXT ABEND COUNTER
         BCT   RW4,AGAIN
*
**  MONITOR CYCLE ENDED
*
         LA    RW3,1(RW3)              INCREMENT COUNTER
         MVI   FIRST,X'FF'             SET FLAG
         TIME  MIC,END
         LM    RW0,RW1,END             LOAD END TIME
         SRDL  RW0,12                  SHIFT DOWN
         LR    RW4,RW1                 LOAD BOTTOM HALF
         LM    RW0,RW1,START           LOAD START TIME
         SRDL  RW0,12                  SHIFT DOWN
         SR    RW1,RW4                 SUBTRACT END FROM START
         A     RW1,INTVAL              ADD CALLING INTERVAL
         LTR   RW1,RW1                 TEST WAIT TIME > 0
         BM    NOWAIT                  NO,BRANCH
         SR    RW0,RW0                 ZERO TOP HALF
         SLDL  RW0,12                  SHIFT UP
         STM   RW0,RW1,WAIT            STORE WAIT INTERVAL
         STIMER WAIT,MICVL=WAIT
NOWAIT   EQU   *
*
**  FIND IF MONITORING PERIOD IS OVER
*
         TIME  BIN                     OBTAIN TIME
         S     RW0,BEGTIM              SUBTRACT START TIME
         C     RW0,MAXTIM              COMPARE WITH MONITOR PERIOD
         BL    MONITOR                 GO BACK FOR MORE
         LA    RW1,ADARGS2             POINT AT PARAM LIST FOR MONRT
         L     RW15,ADMONRT            MONRT
         BALR  14,15                   LINK TO MONRT
         L     14,=V(MONEND)
         BR    14                      BRANCH TO END
*
**  SPIE EXIT
*
OC4      EQU   *
         BALR  RW3,0                   TEMP ADDRESSABILITY
         USING *,RW3
TEMP     EQU   *
         MVC   8(4,RW1),ADRETRY        SET UP RETRY ADDRESS
         B     EOD2
ADRETRY  DC    A(RETRY)
EOD2     EQU   *
         DROP  RW3
         MVI   FLG1-TEMP(RW3),X'FF'    ***** SET FLAG 1 *****
         BR    14
*
**  EXIT FROM SPIE EXIT
*
RETRY    EQU   *
         BALR  RW3,0               ESTABLISH TEMPORARY ADDRESSABILI
         USING *,RW3
         L     RB2,ADBASE
         B     EOD1
ADBASE   DC    A(BASE)
EOD1     EQU   *
         DROP  RW3
         MVI   FLG2,X'FF'              ***** SET FLAG 2 *****
         LA    13,SAVE                  RECHAIN SAVE AREAS
         SPIE  OC4,((1,15))            RESET SPIE
         LM    3,6,32(13)              RELOAD REGISTERS
         LH    RW8,0(RW7)              LOAD ABEND COUNTER
         BCT   RW8,ABOK                REDUCE
         SR    RW8,RW8
         ST    RW8,0(RW5)              ZERO FREQUENCY
ABOK     EQU   *
         STH   RW8,0(RW7)              RESTORE ABEND COUNTER
         B     NXTMON                  RETRY
*
**  LITERAL CONSTANTS
*
         LTORG
*
**  SAVE AREAS AND STORAGE
*
SAVE     DS    18F
FIRST    DC    X'00'
FLG1     DC    X'00'
FLG2     DC    X'00'
FLG3     DC    X'00'
ADARGS   DC    A(ADINPUT)
         DC    A(ADMONRT)
         DC    A(TIME)
         DC    A(ADFNDVAL)
         DC    A(ADFNDPRS)
         DC    A(ADFNDTXT)
ADINPUT  DC    V(INPUT)
ADMONRT  DC    V(MONRT)
ADFNDVAL DC    V(FNDVAL)
ADFNDPRS DC    V(FNDPRS)
ADFNDTXT DC    V(FNDTXT)
ABCNT    DC    26H'10'
TIME     DS    F
ADMINT   DS    F
INTVAL   DS    F
MAXTIM   DS    F
BEGTIM   DS    F
START    DS    D
END      DS    D
WAIT     DS    D
ADARGS2  DC    A(FLAG)
         DC    A(FLAG)
         DC    A(FLAG)
         DC    A(FLAG)
FLAG     DC    F'1'
MONAD    DC    26F'0'
         END
         TITLE 'MONRT - WRITE MONITOR DATA TO THE LOG'
MONRT    CSECT
         B     ENTRY-MONRT(15)
         DC    X'06',CL7'MONRT'
ENTRY    EQU   *
         ENTRY MONDCB
*
**  ROUTINE WRITES DATA TO THE LOG
**  LINKAGE IS MONRT(NAME,LENGTH,IDATA,IFLAG)
**  IFLAG=0 NORMAL LOGGING
**  IFLAG>0 END OF LOGGING
*
RW0      EQU   0
RW1      EQU   1
RB2      EQU   2
RW3      EQU   3
RW4      EQU   4
RW5      EQU   5
RW6      EQU   6
RW7      EQU   7
RW8      EQU   8
RW9      EQU   9
RW15     EQU   15
*
         STM   14,12,12(13)            SAVE REGISTERS
         BALR  RB2,0
         USING *,RB2                   ESTABLISH ADDRESSABILITY
ENTER    EQU   *
         ST    13,SAVE+4
         LR    RW3,13
         LA    13,SAVE
         ST    13,8(RW3)               CHAIN SAVE AREAS
*
**  PICK UP ARGUMENTS
*
         LM    RW3,RW6,0(1)            PICK UP PARAM ADDRESSES
         MVC   NAME(4),0(RW3)          MOVE NAME
         MVC   LENGTH(4),0(RW4)        MOVE LENGTH OF DATA
         ST    RW5,ADATA               STORE DATA ADDRESS
         L     RW6,0(RW6)              LOAD FLAG
         LTR   RW6,RW6                 > 0 ?
         BH    ENDATA                  YES,BRANCH
*
**  CHECK TO SEE IF FIRST TIME THRU
**  IF SO THEN OPEN DCB AND GET FIRST BUFFER
*
         TM    MONDCB+48,X'10'         DCB OPEN?
         BO    OPENED                  YES,BRANCH
         TM    ABFLAG,X'FF'             HAS DCB ALREADY BEEN OPENED?
         BZ    OPENOK                   NO - OK TO OPEN
         ABEND 1,DUMP                   ***** ERROR ABEND *****
OPENOK   EQU   *
         MVI   ABFLAG,X'FF'             SET FLAG
         OPEN  (MONDCB,OUTPUT)         OPEN DCB
         TM    MONDCB+48,X'10'         OPENED OK?
         BNO   ERR2
         PUT   MONDCB                  OBTAIN FIRT BUFFER
         ST    RW1,BUFAD               STORE BUFFER ADDRESS
         LA    RW3,1000                BUFFER LENGTH IN WORDS
         ST    RW3,BUFLEN              STORE BUFFER LENGTH
OPENED   EQU   *
         L     RW1,BUFAD               LOAD BUFFER ADDRESS
         L     RW3,BUFLEN              LOAD BUFFER LENGTH
         MVC   0(4,RW1),NAME           MOVE IN NAME FIELD
         LA    RW1,4(RW1)              INCREMENT POINTER
         BCT   RW3,MOVLEN              DECREMENT COUNT
         LA    RW7,0                   SET FLAG
         B     ENDBUF
MOVLEN   EQU   *
         MVC   0(4,RW1),LENGTH         MOVE LENGTH FIELD
         LA    RW1,4(RW1)              INCREEMNT POINTER
         BCT   RW3,MOVE                DECREMENT COUNT
         LA    RW7,4                   SET FLAG
         B     ENDBUF
MOVE     EQU   *
*
**  MOVE DATA INTO BUFFER AREA
*
         C     RW3,LENGTH              ROOM IN BUFFER?
         BL    NOTROOM                 NO,BRANCH
         L     RW7,LENGTH              LOAD DATA LENGTH
         SLL   RW7,2                   CONVERT FROM WORDS TO BYTES
         LR    RW9,RW7
         LR    RW6,RW1                 LOAD ADDRESS OF BUFFER
         L     RW8,ADATA               LOAD ADDRESS OF DATA
         MVCL  RW6,RW8                 MOVE LONG
         LR    RW1,RW6                 UPDATE BUFFER ADDRESS
         S     RW3,LENGTH              DECREASE COUNT
         LA    RW3,1(RW3)              INCREASE FOR BCT
         BCT   RW3,RETURN              BRANCH IF NOT END OF BUFFER
         LA    RW7,8                   SET FLAG
         B     ENDBUF
*
**  NOT ROOM FOR ALL DATA
*
NOTROOM  EQU   *
         LR    RW7,RW3                 LOAD BUFFER LENGTH
         SLL   RW7,2                   CONVERT FROM WORDS TO BYTES
         LR    RW9,RW7
         LR    RW6,RW1                 LOAD ADDRESS OF BUFFER
         L     RW8,ADATA               LOAD ADDRESS OF DATA
         MVCL  RW6,RW8                 MOVE LONG
         ST    RW8,ADATA               UPDATE DATA ADDRESS
         L     RW8,LENGTH
         SR    RW8,RW3                 REDUCE LENGTH
         ST    RW8,LENGTH
         LA    RW7,4                   SET FLAG
*
**  END OF BUFFER - WRITE OUT DATA
*
ENDBUF   EQU   *
         PUT   MONDCB                  WRITE OUT BUFFER
         ST    RW1,BUFAD               STORE BUFFER ADDRESS
         LA    RW3,1000                BUFFER LENGTH IN WORDS
         ST    RW3,BUFLEN              STORE BUFFER LENGTH
         B     TABLE(RW7)              RETURN TO REQUIRED PLACE
TABLE    EQU   *
         B     MOVLEN
         B     MOVE
*
**  RETURN
*
RETURN   EQU   *
         ST    RW1,BUFAD               STORE BUFFER ADDRESS
         ST    RW3,BUFLEN              STORE BUFFER LENGTH
         L     13,4(13)
         LM    14,12,12(13)            RESTORE REGISTERS
         BR    14
*
**  END OF DATA WRITE BUFFER
*
ENDATA   EQU   *
         L     RW1,BUFAD               LOAD BUFFER ADDRESS
         MVC   0(4,RW1),END            MOVE IN END MARK
         CLOSE MONDCB                  CLOSE DCB
ERR2     EQU   *
         L     14,=V(MONEND)           POINT AT AXIT ROUTINE
         BR    14
*
**  ERROR EXIT
*
SYNEX    EQU   *
         BALR  RW3,0
         USING *,RW3                   ESTABLISH ADDRESSABILITY
         L     RB2,ADENTER
         B     EOD1
ADENTER  DC    A(ENTER)
EOD1     EQU   *
         DROP  RW3
         LA    13,SAVE                 RECHAIN SAVE AREAS
         LR    RW3,14                  SAVE RETURN ADDRESS
         TIME  DEC
         SR    RW1,RW1
         SRDL  RW0,28                  SHIFT TO BOTTOM OF WORD
         O     RW1,=F'12'              INSERT SIGN
         STM   RW0,RW1,TIME            STORE
         UNPK  DWD(8),TIME+3(5)        UNPACK
         MVC   MSG+1(2),DWD
         MVC   MSG+4(2),DWD+2
         MVC   MSG+7(2),DWD+4
         MVC   MSG+10(2),DWD+6
         LA    RW1,ARGS                POINT AT PARAM LIST
         L     RW15,=V(OUTPUT)
         BALR  14,15                   LINK TO ROUTINE
         BR    RW3                     RETURN TO DCB ABEND
*
**  LITERAL CONSTANTS
*
         LTORG
*
**  SAVE AREAS AND STORAGE
*
SAVE     DS    18F
NAME     DS    F
LENGTH   DS    F
ADATA    DS    F
BUFAD    DS    F
BUFLEN   DS    F
END      DC    C'END '
MONPRINT DC    CL8'MONPRINT'
LEN      DC    F'50'
ARGS     DC    A(MONPRINT)
         DC    A(LEN)
         DC    A(MSG)
DWD      DS    D
TIME     DS    2F
ADEXIT   DC    X'92',AL3(SYNEX)
MSG      DC    CL50'   .  .  .   MONITORING ENDED - OUTPUT D.S. FULL'
ABFLAG   DC    X'00'
MONDCB   DCB   DSORG=PS,MACRF=PL,LRECL=4000,BLKSIZE=4000,              X
               DDNAME=MONLOG,RECFM=FB,SYNAD=SYNEX,EXLST=ADEXIT
         END
         TITLE 'INPUT - READ DATA FROM MEMBER OF A PDS'
INPUT    CSECT
         B     ENTRY-INPUT(15)
         DC    X'07',CL7'INPUT'
         ENTRY INDCB
         ENTRY ENDPDS
**  MEMBER IS THE MEMBERNAME REQUIRED
**  BUFFER IS AN 80 BYTE AREA
**  FLAG=0 FOR NORMAL RETURN
**  FLAG=1 FOR EOF RETURN
*
RW0      EQU   0
RW1      EQU   1
RB2      EQU   2
RW3      EQU   3
RW4      EQU   4
RW5      EQU   5
RW6      EQU   6
RW15     EQU   15
*
ENTRY    EQU   *
         SAVE  (14,12)
         BALR  RB2,0
         USING *,RB2
ENTER    EQU   *
         ST    13,SAVE+4               CHAIN SAVE AEREA
         LR    RW3,13
         LA    13,SAVE
         ST    13,8(RW3)
*
*
**  PICK UP PARAMETERS
*
         LM    RW3,RW5,0(1)
         ST    RW5,ADFLAG              STORE FLAG ADDRESS
         TM    INDCB+48,X'10'          OPEN?
         BO    OPENED
         OPEN  (INDCB,INPUT)
         TM    INDCB+48,X'10'          OK?
         BNO   ERR
         B     NEWMEM
OPENED   EQU   *
         CLC   MEMBER(8),0(RW3)        CORRECT MEMBER?
         BE    THISMEM
NEWMEM   EQU   *
         MVC   MEMBER(8),0(RW3)
         FIND  INDCB,MEMBER,D
         LTR   RW15,RW15               OK?
         BNZ   ERR
         MVC   MSG+1(8),0(RW3)         MOVE IN NEW MAMBER NAME
         SR    RW6,RW6
         ST    RW6,LENGTH              ZERO MESSGAE LENGTH
         LA    RW1,ADARGS
         L     RW15,=V(OUTPUT)
         BALR  14,15                   OUTPUT BLANK LINE
         LA    RW6,20                  MESSAGE LENGTH
         ST    RW6,LENGTH
         LA    RW6,MSG
         ST    RW6,ADMSG
         BALR  14,15                   OUTPUT MEMBER NAME
THISMEM  EQU   *
         SR    RW3,RW3
         ST    RW3,ECB                 RESET ECB
         READ  ECB,SF,INDCB,(RW4)      READ
         CHECK ECB                     WAIT FOR COMPLETION
         MVC   72(8,RW4),NULL          BLANK OUT LINE NUMBERS
         ST    RW4,ADMSG               STORE MESSAGE ADDRESS
         LA    RW6,72                  MESSAGE LENGTH
         ST    RW6,LENGTH
         LA    RW1,ADARGS
         L     RW15,=V(OUTPUT)
         BALR  14,15                   OUTPUT LINE READ IN
         SR    RW4,RW4                 SET RETURN CODE
RETURN   EQU   *
         L     RW5,ADFLAG
         ST    RW4,0(RW5)              STORE RETURN CODE
         L     13,4(13)
         RETURN (14,12)
*
**  ERROR OR EOF EXIT
*
EOF      EQU   *
         BALR  RW3,0
         USING *,RW3
         L     RB2,ADENTER
         B     EOD1
ADENTER  DC    A(ENTER)
EOD1     EQU   *
         DROP  RW3
         LA    13,SAVE                 RECHAIN SAVE AREAS
ERR      EQU   *
         SR    RW6,RW6                 ZERO MESSAGE LENGTH
         ST    RW6,LENGTH
         LA    RW1,ADARGS
         L     RW15,=V(OUTPUT)
         BALR  14,15                   OUTPUT BLANK LINE
         MVC   MEMBER(8),NULL          ZERO MEMBER
         LA    RW4,1                   SET RETURN CODE
         B     RETURN
*
**  LITERAL CONSTANTS
*
         LTORG
*
SAVE     DS    18F
ADFLAG   DS    F
NULL     DC    CL8' '
MEMBER   DC    CL8' '
ADARGS   DC    A(MONPRINT)
         DC    A(LENGTH)
ADMSG    DS    F
LENGTH   DS    F
MONPRINT DC    CL8'MONPRINT'
MSG      DC    CL20'          INPUT -'
INDCB    DCB   DDNAME=MONPARM,DSORG=PO,EODAD=EOF,SYNAD=EOF,            X
               MACRF=R,LRECL=80
         END
         TITLE 'OUTPUT - OUTPUT TO A SELECTED DDNAME'
OUTPUT   CSECT
         B     ENTRY-OUTPUT(15)
         DC    X'06',CL7'OUTPUT'
ENTRY    EQU   *
         ENTRY OUTDCB
*
**  ROUTINE WRITES RECORDS TO AN OUTPUT STREAM
**  LINKAGE IS OUTPUT(DDNAME,LENGTH,BUFFER)
**  LENGTH=LENGTH OF THE DATA PASSED
**  THE RECORD IS PADDED/TRUNCATED TO 80 BYTES
*
RW0      EQU   0
RW1      EQU   1
RB2      EQU   2
RW3      EQU   3
RW4      EQU   4
RW5      EQU   5
*
         STM   14,12,12(13)            STORE REGISTERS
         BALR  RB2,0
         USING *,RB2
         LR    RW3,13
         ST    13,SAVE+4
         LA    13,SAVE
         ST    13,8(RW3)               CHAIN SAVE AREAS
*
**  PICK UP PARAMETERS
*
         LM    RW3,RW5,0(1)            PICK UP PARAM ADDRESSES
         CLC   DDNAME(8),0(RW3)        CURRENT DDNAME?
         BE    OLDCB                   YES,BRANCH
*
**  CLOSE AND OPEN DCB
*
         TM    OUTDCB+48,X'10'         OPEN?
         BNO   CLOSED                  NO,BRANCH
         CLOSE OUTDCB                  CLOSE DCB
CLOSED   EQU   *
         MVC   DDNAME(8),0(RW3)        MOVE IN NEW DDNAME
         MVC   OUTDCB+40(8),DDNAME
OLDCB    EQU   *
         TM    OUTDCB+48,X'10'         OPEN?
         BO    OPENED                  YES,BRANCH
         OPEN  (OUTDCB,OUTPUT)         OPEN DCB
         TM    OUTDCB+48,X'10'         OPEN OK?
         BNO   RETURN
         PUT   OUTDCB                  GET FIRST BUFFER
         ST    RW1,BUFAD               STORE BUFFER ADDRESS
OPENED   EQU   *
         L     RW1,BUFAD               LOAD BUFFER ADDRESS
         MVC   0(1,RW1),NULL           MOVE IN BLANK
         MVC   1(79,RW1),0(RW1)        PROPAGATE ALONG
         L     RW4,0(RW4)              LOAD DATA LENGTH
         LTR   RW4,RW4                 <=0?
         BNP   MOVED                   YES,BRANCH
         C     RW4,=F'80'              >80?
         BL    OK                      NO,BRANCH
         LA    RW4,80                  LOAD MAX LENGTH
OK       EQU   *
         BCTR  RW4,0                   REDUCE LENGTH
         EX    RW4,MOVDATA             MOVE INTO BUFFER
MOVED    EQU   *
*
**  WRITE RECORD
*
         PUT   OUTDCB
         ST    RW1,BUFAD               STORE NEW BUFFER ADDRESS
RETURN   EQU   *
*
**  RETURN
*
         L     13,4(13)
         LM    14,12,12(13)            RESTORE REGISTERS
         BR    14
*
**  LITERAL CONSTANTS
*
         LTORG
*
**  SAVE AREAS AND STORAGE
*
SAVE     DS    18F
DDNAME   DC    C'DDDDDDDD'
BUFAD    DS    F
NULL     DC    C' '
MOVDATA  MVC   0(0,RW1),0(RW5)
OUTDCB   DCB   DSORG=PS,MACRF=PL,LRECL=80,BLKSIZE=80,                  X
               DDNAME=DDDDDDDD,RECFM=FB
         END
         TITLE 'FNDVAL,FNDTXT,FNDPRS - OBTAIN KEYWORDS FROM A BUFFER'
FNDVAL   CSECT
         BC    15,12(15)     BRANCH AROUND IDENTIFIER
         DC    X'06'
         DC    CL7'FNDVAL'
         MVI   FLAG-FNDVAL(15),X'00'   NUMERIC FIELD
         B     MENTRY-FNDVAL(15)
*
*         THIS WILL RETURN THE INTEGER VALUE OF ENTRIES IN THE
*      PARMLIST OF THE FORM ....,KEYWORD=VALUE,.... N AND KEY ARE
*      SET BY THE USER. KEY WILL CONTAIN THE KEYWORD ( INCLUDING
*      THE '=' SIGN ) AND N WILL GIVE THE NUMBER OF CHARACTERS
*      IN KEY.
*         THE ROUTINE WILL RETURN IN M THE NUMBER OF DIGITS IN
*      THE VALUE ( NOT INCLUDING THE SIGN ) AND IF M > 0 THE
*      BINARY VALUE IN VALUE.
*
         ENTRY FNDTXT
FNDTXT   EQU   *
         BC    15,12(15)
         DC    X'06',CL7'FNDTXT'
         MVI   FLAG-FNDTXT(15),X'01'   TEXT
         B     MENTRY-FNDTXT(15)
*
*         THIS WILL RETURN THE TEXT VALUE OF ENTRIES
*      OF THE FORM ....,KEYWORD=TEXT,....
         ENTRY FNDPRS
FNDPRS   BC    15,12(15)
         DC    X'06'
         DC    CL7'FNDPRS'
         MVI   FLAG-FNDPRS(15),X'02'   KEYWORD
*
*         THIS WILL INDICATE THE PRESENCE OF AN ENTRY OF THE FORM
*      ....,KEYWORD,.... N AND KEY ARE AS ZA06AS EXCEPT THAT
*      IN GENERAL KEY WILL CONTAIN NO '=' CHARACTER. IF THE
*      KEYWORD IN KEY IS FOUND IN THE PARMLIST THE 3RD ARGUMENT
*      L IS SET TO 1 (.TRUE.) AND IF IT IS NOT FOUND IT IS SET TO
*      ZERO (.FALSE.).
*
MENTRY   STM   14,7,12(13)   SAVE REGISTERS
         LM    3,6,8(1)                PICK UP ARGUMENTS
         BALR  7,0           ESTABILISH .....
         USING *,7           ..... BASE REGISTER
         SR    0,0           PICK UP LENGTH ......
         IC    0,3(3)        .... OF KEYWORD
         LTR   3,0           TEST FOR ......
         BNZ    BR8          .... ZERO LENGTH
         LR    2,3           EXIT .....
         B     BR5           .... IF ZERO
*
*      INITIALIZE AND SET UP FOR SEARCH.
*
BR8      EQU   *
         LM    1,2,0(1)                LOAD PARAM ADDRESSES
         L     0,0(1)                  LOAD BUFFER LENGTH
         LA    1,0(2)                  LOAD BUFFER ADDRESS
*
**  LOOK FOR LAST NON-BLANK CHARACTER IN BUFFER
*
         LR    2,1                     LOAD ADDRESS OF BUFFER
         AR    2,0                     ADD BUFFER LENGTH
         BCTR  2,0                     REDUCE BY ONE
NEXT     EQU   *
         CLI   0(2),C' '               BLANK?
         BNE   LSTBLNK                 NO,STOP
         BCTR  2,0                     REDUCE ADDRESS BY ONE
         BCT   0,NEXT                  REDUCE BUFFER LENGTH
LSTBLNK  EQU   *
         SR    2,2
         MVI   FLAG2,X'00'   PUT FOUND FLAG OFF
         BCTR  3,0           MODIFY .......
         STC   3,KEYTEST+1   .... COMPARE INSTRUCTION .....
         STC   3,INCR+3      ... AND INCREMENT INSTRUCTION
         LA    3,1(3)        RESTORE TO PROPER VALUE
         AR    0,1           POINT AT END OF PARMLIST
         BCTR  1,0           REDUCE TO ENTER LOOP
         B     KEYTEST       GO AND TEST FOR KEYWORD
*
*      KEYWORD SEARCH
*
COMMA    CLI   FLAG2,X'00'   HAS KEYWORD BEEN FOUND ?
         BNE   ENDSRCH       YES: GO AND FINISH OFF
KEYTEST  CLC   0(0,4),1(1)   IS IT THE KEYWORD ?
         BNE   NXTCOMA       NO: GO AND LOOK FOR NEXT COMMA
         LA    1,1(1)        YES: POINT AT KEYWORD
         ST    1,KEYWORD     SAVE POINTER TO KEYWORD
         MVI   FLAG2,X'FF'   MARK AS FOUND
INCR     LA    1,0(1)        MOVE POINTER TO END OF KEYWORD
         B     NXTCOMA       GO AND LOOK FOR NEXT COMMA
COMATEST CLI   0(1),C','     IS IT A COMMA ?
         BE    COMMA         YES: BRANCH THEN
NXTCOMA  LA    1,1(1)        UPDATE PARMLIST POINTER
         CR    1,0           LOOP TILL .....
         BL    COMATEST      ..... END OF PARMLIST
         CLI   FLAG2,X'00'   HAS KEYWORD BEEN FOUND ?
         BE    BR5           NO: FINISH THEN
*
*      END OF SEARCH
*
ENDSRCH  S     1,KEYWORD     LENGTH OF KEYWORD FIELD
         SR    1,3           LENGTH OF KEYWORD VALUE
         CLI   FLAG,X'02'    DID WE COME .....
         BNE   BR1           .... IN AT ZA06CS ?
         LTR   1,1           YES: ARE THE LENGTHS .....
         BZ    BR7           .... THE SAME ?
         MVI   FLAG2,X'00'   NO: SET NOT FOUND
         L     1,KEYWORD     PICK UP POSITION IN PARMLIST ....
         B     INCR          ... AND GO AND HAVE ANOTHER TRY
BR7      LA    2,1           SET THIRD ARGUMENT TRUE
BR5      ST    2,0(5)        SET THIRD ARGUMENT
         B     FINISH
BR1      LTR   2,1
         BZ    BR5
         L     14,KEYWORD    POINT AT ....
         LA    14,0(14,3)    .... VALUE FIELD
         CLI   FLAG,X'00'    DID WE COME IN .....
         BNE   BR6           .... AT ZA06AS ?
         BCTR  1,0           YES: ONE OFF FOR PACK
         CLI   0(14),C'-'    IS THE NUMBER .....
        BNE    BR2           .... NEGATIVE
         LA    14,1(14)      YES: MOVE POINTER UP ONE
         BCTR  1,0           REDUCE LENGTH AGAIN
         EX    1,PACK        PACK AND CONVERT ......
         CVB   4,BUF         .... VALUE TO BINARY
         LNR   4,4           MAKE VALUE NEGATIVE
         B     BR3
BR2      EX    1,PACK        PACK AND CONVERT .....
         CVB   4,BUF         .... VALUE TO BINARY
BR3      ST    4,0(6)        SET FOURTH ARGUMENT
         LA    2,1(1)        NO. OF DIGITS
         B     BR5           GO AND FINISH OFF
BR6      LR    2,1           LENGTH OF TEXT
         BCTR  1,0           ONE OFF FOR MOVE
         EX    1,MOVE
         ST    2,0(5)        SET THIRD ARGUMENT
*
*      RETURN TO CALLER
*
FINISH   LM    14,7,12(13)   RESTORE REGISTERS
         MVI   12(13),X'FF'  SET TRACE RETURN
         BR    14
*
*      WORK AREA.
*
BUF      DC    D'0'          CVB WORKSPACE
KEYWORD  DC    A(0)          ADDRESS OF KEY WORD IN PARMLIST
PACK     PACK  BUF(8),0(0,14)
MOVE     MVC   0(0,6),0(14)
FLAG     DC    X'00'         ENTRY INDICATOR
FLAG2    DC    X'00'         KEYWORD FOUND INDICATOR
HZERO    DC    H'0'
         END
         TITLE 'PARAMS - OBTAIN OPTIONS FROM BUFFER'
PARAMS   CSECT
         B     ENTRY-PARAMS(15)
         DC    X'06',CL7'PARAMS'
ENTRY    EQU   *
*
**  ROUTINE OBTAINS KEYWORDS FROM BUFFER
**  LINKAGE IS PARAMS(ITYPE,MINT,INTVAL,MAXTIM,LBUF,BUFFER)
*
RW0      EQU   0
RW1      EQU   1
RB2      EQU   2
RW3      EQU   3
RW4      EQU   4
RW5      EQU   5
RW6      EQU   6
RW15     EQU   15
*
         STM   14,12,12(13)            SAVE REGISTERS
         BALR  RB2,0
         USING *,RB2
         LR    RW3,13
         ST    13,SAVE+4
         LA    13,SAVE
         ST    13,8(RW3)               CHAIN SAVE AREAS
*
**  PICK UP PARAMETERS
*
         LM    RW3,RW4,0(1)            PICK UP PARAM ADDRESSES
         ST    RW3,TYPAD               ADDRESS OF ITYPE
         ST    RW4,MINTAD              ADDRESS OF MINT
         LM    RW3,RW6,8(1)            LOAD OTHER PARAM ADDRESSES
         ST    RW3,INTAD               ADDRESS OF INTVAL
         ST    RW4,MAXAD               ADDRESS OF MAXTIM
         ST    RW5,LENAD               ADDRESS OF LBUF
         ST    RW6,BUFAD               ADDRESS OF BUFFER
*
**  LOOK FOR MAXTIM
*
         LA    RW3,7                   KEY LENGTH
         ST    RW3,LENGTH              STORE IN PARAMETER
         LA    RW3,KEY1                POINT AT KEY
         ST    RW3,KEYAD               STORE ADDRESS IN PARAM LIST
         MVC   VALUE(4),MAXAD          INSERT MAXTIM ADDRESS IN PARAM
         LA    RW1,LENAD               POINT AT PARAM LIST
         L     RW15,=V(FNDVAL)         POINT AT FNDVAL
         BALR  14,15                   LINK TO ROUTINE
*
**  LOOK FOR UNITS=MILLI
*
         L     RW4,TYPAD               POINT AT ITYPE
         LA    RW3,5                   KEY LENGTH
         ST    RW3,LENGTH              STORE KEY LENGTH
         LA    RW3,KEY3                POINT AT KEY
         ST    RW3,KEYAD               INSERT ADDRESS IN PARAM LIST
         LA    RW1,LENAD               POINT AT PARAM LIST
         L     RW15,=V(FNDPRS)         POINT AT FNDPRS
         BALR  14,15                   LINK TO ROUTINE
         L     RW3,THERE               LOAD FLAG
         LTR   RW3,RW3                 PRESENT?
         BZ    NOMILLI                 NO,BRANCH
         LA    RW3,0                   LOAD ITYPE=0
         ST    RW3,0(RW4)              STORE ITYPE
NOMILLI  EQU   *
*
**  LOOK FOR UNITS=SECS
*
         LA    RW3,4                   KEY LENGTH
         ST    RW3,LENGTH              STORE LENGTH
         LA    RW3,KEY4                POINT AT KEY
         ST    RW3,KEYAD               STORE IN PARAM LIST
         LA    RW1,LENAD               POINT AT PARAM LIST
         L     RW15,=V(FNDPRS)         POINT AT FNDPRS
         BALR  14,15                   LINK TO ROUTINE
         L     RW3,THERE               LOAD FLAG
         LTR   RW3,RW3                 PRESENT?
         BZ    NOSECS                  NO,BRANCH
         LA    RW3,1                   LOAD ITYPE=1
         ST    RW3,0(RW4)              STORE ITYPE
NOSECS   EQU   *
*
**  LOOK FOR UNITS=MINS
*
         LA    RW3,KEY5                POINT AT KEY
         ST    RW3,KEYAD               STORE IN PARAM LIST
         LA    RW1,LENAD               POINT AT PARAM LIST
         L     RW15,=V(FNDPRS)         POINT AT FNDPRS
         BALR  14,15                   LINK TO ROUTINE
         L     RW3,THERE               LOAD FLAG
         LTR   RW3,RW3                 PRESENT?
         BZ    NOMINS                  NO,BRANCH
         LA    RW3,2                   LOAD ITYPE=2
         ST    RW3,0(RW4)              STORE ITYPE
NOMINS   EQU   *
         L     RW4,MINTAD              POINT AT MINT
         LA    RW6,ALPH                POINT AT LETTERS
         LA    RW5,26                  COUNTER
LOOP     EQU   *
*
**  CHECK FOR MON.
*
         LA    RW3,4                   KEY LENGTH
         ST    RW3,LENGTH              STORE LEBGTH
         LA    RW3,KEY6                POINT AT KEY
         ST    RW3,KEYAD               STORE IN PARAM LIST
         MVC   KEY6+3(1),0(RW6)        MOVE IN LETTER
         LA    RW1,LENAD               POINT AT PARAM LIST
         L     RW15,=V(FNDPRS)         POINT AT FNDPRS
         BALR  14,15                   LINK TO ROUTINE
         L     RW3,THERE               LOAD FLAG
         LTR   RW3,RW3                 PRESENT?
         BZ    NOT                     NO,BRANCH
         LA    RW3,1                   LOAD MINT=1
         ST    RW3,0(RW4)              STORE MINT
NOT      EQU   *
*
**  CHECK FOR MON.=
*
         LA    RW3,5                   LOAD KEY LENGTH
         ST    RW3,LENGTH              STORE LENGTH
         LA    RW3,KEY7                POINT AT KEY
         ST    RW3,KEYAD               STORE IN PARAM LIST
         MVC   KEY7+3(1),0(RW6)        MOVE IN LETTER
         ST    RW4,VALUE               STORE MINT ADDRESS
         LA    RW1,LENAD               POINT AT PARAM LIST
         L     RW15,=V(FNDVAL)         POINT AT FNSVAL
         BALR  14,15                   LINK TO ROUTINE
*
**  INCREMENT COUNTERS
*
         LA    RW4,4(RW4)              POINT AT NEXT MINT
         LA    RW6,1(RW6)              POINT AT NEXT LETTER
         BCT   RW5,LOOP                GO BACK FOR NEXT
*
**  RETURN
*
         L     13,4(13)
         LM    14,12,12(13)            RESTORE REGISTERS
         BR    14
*
**  LITERAL CONSTANTS
*
         LTORG
*
**  STORAGE AND SAVE AREAS
*
SAVE     DS    18F
MINTAD   DS    F
TYPAD    DS    F
LENAD    DS    F
BUFAD    DS    F
         DC    A(LENGTH)
KEYAD    DS    F
         DC    A(THERE)
VALUE    DS    F
LENGTH   DS    F
INTAD    DS    F
MAXAD    DS    F
THERE    DS    F
KEY1     DC    C'MAXTIM= '
KEY2     DC    C'INTVAL= '
KEY3     DC    C'MILLI   '
KEY4     DC    C'SECS    '
KEY5     DC    C'MINS    '
KEY6     DC    C'MON     '
KEY7     DC    C'MON =   '
ALPH     DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
         END
         TITLE 'GETPRM - OBTAIN THE PARM FIELD'
GETPRM   CSECT
         B     ENTRY-GETPRM(15)
         DC    X'06',CL7'GETPRM'
ENTRY    EQU   *
*
**  ROUTINE OBTAINS THE PARM FIELD AND ITS LENGTH
**  LINKAGE IS GETPRM(LENGTH,PARM)
*
         BALR  15,0               LOAD BASE REGISTER
         SPACE
         USING *,15
         STM   14,6,12(13)        SAVE REGISTERS
         LM    5,6,0(1)                GET PARAMETERS
*
         L     2,16(0,0)          CVT
         LR    3,2                 SAVE CVT
         L     2,0(0,2)           CVTTCBP
         L     2,4(0,2)           TCB
*
****     GET PARM FIELD
*
         L     3,112(0,2)         ADDRESS OF 1ST SAVE AREA
         L     2,16(3)            POINT AT ENTRY POINT
         CLC   5(8,2),LOADER      IS IT THE FAST LOADER ?
         BNE   NOTLOADR           NO: USE FIRST SAVE AREA THEN
         L     3,8(3)             YES: USE NEXT SAVE AREA DOWN
NOTLOADR L     3,24(0,3)          POINTER TO PARM FIELD (ORIG. REG 1)
         L     3,0(0,3)           A(PARM FIELD)
         LH    2,0(0,3)           L'PARM FIELD
         ST    2,0(0,5)           GIVE BACK AS 2ND FTN ARGUMENT
         LR    4,2                SAVE L'PARM FIELD
         SH    2,HW1              DECREMENT FOR EX & EXISTENCE TEST
         BC    4,EXIT             BRANCH IF NON-EXISTENT
         LA    4,3(0,4)           COMPUTE SMALLEST MULTIPLE  --
         SRL   4,2(0)             --  OF 4 THAT  --
         SLL   4,2(0)             --  IS 'GE' L'PARM FIELD
         SH    4,HW2              DECREMENT FOR EXECUTE
         MVI   0(6),C' '          BLANK OUT FIRST BYTE  --
         EX    4,BLANPARM         --  THEN THE REST
         EX    2,MVPARM           MOVE PARM FIELD TO 3RD FTN ARG.
EXIT     EQU   *
         LM    14,6,12(13)        RESTORE REGISTERS
         MVI   12(13),255         FLAG SAVE AREA
         SR    15,15              SET RETURN CODE
         BCR   15,14              RETURN
BLANPARM MVC   1(1,6),0(6)        USED TO BLANK ARRAY USED FOR P. FIELD
MVPARM   MVC   0(1,6),2(3)        USED TO MOVE PARM FIELD
HW1      DC    H'1'
HW2      DC    H'2'
LOADER   DC    C'IEWLCTRL'
         END
         TITLE 'GETDAT - OBTAIN THE DATE'
GETDAT   CSECT
         BC    15,12(15)
         DC    X'06'
         DC    CL7'GETDAT'
*
**  ROUTINE OBTAINS THE DATE IN THE FORM DD/MM/YY
**  LINKAGE IS GETDAT(DATE)
*
         STM   14,6,12(13)
         L     6,0(0,1)
         TIME  DEC
         BALR  15,0
         USING *,15
         ST    1,DATE                  DATE IN PACKED DECIMAL
         N     1,MSK1                  REMOVE YEAR NUMBER
         ST    1,WS+4
         CVB   1,WS                    CONVERT DAY NO TO BINARY IN GR1
         SR    3,3
         IC    3,DATE+1                LOAD PACKED YEAR NO.
         LR    4,3
         SRA   3,4
         LA    2,10
         MR    2,2
         N     4,MSK2
         AR    3,4                     YEAR NO IN BINARY IN GR3
         LR    2,3
         SR    4,4
         N     2,MSK3                  LEAP YEAR TEST
         BC    4,NLEAP
         LA    4,1
NLEAP    A     4,DAYS28                ADJUST DAYS IN FEBRUARY
         ST    4,DAYSF
         SR    2,2
         LA    4,4
         LA    5,44
GETMON   S     1,DAYS(2)
         BC    12,NMON
         BXLE  2,4,GETMON
         SR    2,4
NMON     A     1,DAYS(2)               DAY IN BINARY
         CVD   1,WS                    CONVERT TO DECIMAL
         L     1,WS+4                  FIX SIGN TO 1111
         O     1,MSK2
         ST    1,WS+4
         UNPK  CC(2),WS+6(2)           UNPACK DAY NO
         LH    1,CC
         STH   1,0(0,6)                STORE DAY CHARACTERS
         AR    2,4                     4XMONTH NO
         SRL   2,2
         CVD   2,WS
         L     2,WS+4
         O     2,MSK2
         ST    2,WS+4
         UNPK  CC(2),WS+6(2)           UNPACK MONTH NO
         LH    2,CC
         STC   2,4(0,6)                STORE MONTH NUMBER CHARACTER
         SRL   2,8                     BY CHARACTER TO AVOID BOUNDARY
         STC   2,3(0,6)                ALIGNMENT DIFFICULTY
         CVD   3,WS
         L     3,WS+4
         O     3,MSK2
         ST    3,WS+4
         UNPK  CC(2),WS+6(2)
         LH    3,CC
         STH   3,6(0,6)
         IC    2,SLASH
         STC   2,2(0,6)
         STC   2,5(0,6)
         LM    14,6,12(13)
         MVI   12(13),X'FF'
         BR    14
         DS    0D
WS       DC    2F'0'
DATE     DC    F'0'
MSK1     DC    X'0000FFFF'
MSK2     DC    X'0000000F'
MSK3     DC    X'00000003'
DAYS28   DC    F'28'
DAYS     DC    F'31'
DAYSF    DC    F'28,31,30,31,30,31,31,30,31,30,31'
CC       DC    CL2'  '
SLASH    DC    CL1'/'
         END
