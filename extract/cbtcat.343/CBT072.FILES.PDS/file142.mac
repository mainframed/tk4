*          DATA SET CBT557     AT LEVEL 001 AS OF 09/07/77
RMFR     TITLE 'RMFR002  - -  CARRIER CORP. RMF POST PROCESSER'
         SPACE 2
*        THIS PROGRAM WILL READ SMF RECORDS THAT CONTAIN RMF RECORDED
*        RECORDS AND SELECT THE RMF RECORDS FOR ANALYSIS.  THIS INPUT
*        SHOULD BE IN THE SEQUENCE AS RECORDED BY RMF EITHER IN THE
*        SYS1.MANX/Y DATA SETS OR ON TAPE.  THIS PROGRAM WILL PRINT
*        6 LINES OF OUTPUT FOR EACH RMF RECORDING PERIOD AND BREAK FOR
*        A NEW PAGE FOR EACH DAY AND SHIFT.  THIS PROGRAM IS SET TO
*        PRINT AT 8 LPI.  CHANGE CONSTANT "NUMSETS" TO ADJUST THE
*        NUMBER OF SETS TO PRINT ON A PAGE.  THIS PROGRAM WILL REPORT
*        FOR AN MP/AP/UP ENVIRONMENT.  THIS PROGRAM WILL NOT REPORT
*        SERVICE FOR DOMAIN 0 OR FOR DOMAINS HIGHER THAN 12 AND ON
*        CHANNEL UTILIZATION FOR CHANNEL 0 OR FOR CHANNELS HIGHER THAN
*        6.
*
*
*
*        REPORT CONTENTS.
*
*        COLUMN     LINE #     MEANING
*        HEADING    IN PERIOD
*
*        TIME       1          START TIME OF RMF PERIOD
*
*        CPU %      1          CPU UTILIZATION IN PERCENT FOR CPU 0
*                   2          CPU UTILIZATION IN PERCENT FOR CPU 1
*
*                   4          CPU PERFORMANCE INDEX - THE
*                              RELATIONSHIP OF CPU UTILIZATION TO
*                              TOTAL CPU SERVICE PROVIDED
*
*        TP/DP/PF   1          TOTAL PAGING RATE - # OF PAGES PER
*        F/SP/PP               SECOND INCLUDES PAGING, SWAPING, AND VIO
*                   2          DEMAND PAGING RATE -
*                              (NON-SWAP PAGE RATE)
*                   3          PAGE FAULT RATE -
*                              PAGE INS + PAGE RECLAIMS
*                   4          TOTAL NUMBER OF FIXED PAGES
*                   5          NUMBER OF PAGEABLE SYSTEM PAGES
*                   6          NUMBER OF PAGEABLE PRIVATE PAGES
*
*        SERVICE    1          TOTAL SERVICE UNITS  (SERVICE IS SHOWN
*        BY         2          CPU SERVICE           IN THOUSANDS OF
*        DOMAIN     3          IOC SERVICE           SERVICE UNITS)
*        AND        4          MSO SERVICE
*        TOTAL      5          NUMBER OF ENDED TRANSACTIONS IN PERIOD
*                   6          AVERAGE TRANSACTION TIME
*                               - SHOWN IN SECONDS UP TO 99.9  - OR -
*                               - IN MINUTES SHOWN AS N.N"M"   - OR -
*                               -                     NNN"M"
*
*        CHANNELS   1          CHANNEL ACTIVITY IN PERCENT FOR CPU 0
*         1 - 6     2          CHANNEL ACTIVITY IN PERCENT FOR CPU 1
*
*        DEVICE     1 - 6      WORSE 6 DASD DEVICES FOR QUEUE LENGTH
*        VOLSER Q              SHOWN WITH VOLSER AND QUEUE LENGTH IN
*                              DECENDING ORDER
*
*
*
*        JCL REQUIRED:
*
*        //S1     EXEC PGM=RMFR002    ( NEEDS LESS THAN 192K REGION )
*        //INPUT  DD  DSN=SYS1.MANX,DISP=SHR
*        //OUTPUT DD  SYSOUT=1        ( 8 LPI )
*
         EJECT
RMFR002  START 0
         SPACE 2
R0       EQU   0    *
R1       EQU   1    *
R2       EQU   2    * LINK FOR PRINT ROUTINE
R3       EQU   3    * BASE REGISTER
R4       EQU   4    *
R5       EQU   5    *
R6       EQU   6    *
R7       EQU   7    *
R8       EQU   8    *
R9       EQU   9    *
R10      EQU   10   *
R11      EQU   11   * ADDITIONAL BASE TO RECORD SECTIONS
R12      EQU   12   * PRIMARY BASE TO RECORD
R13      EQU   13   * SAVE AREA POINTER
R14      EQU   14   * LINK * WORK
R15      EQU   15   * RETURN * WORK
         SPACE 3
         STM   R14,R12,12(R13)
         LR    R3,R15
         USING RMFR002,R3
         LA    R12,SAVEA
         ST    R12,8(R13)
         ST    R13,4(R12)
         LR    R13,R12
         SPACE 3
         L     R1,0(R1)      LOAD ADDRESS OF PARM
         CLC   0(2,R1),=H'0' CHECK FOR A PARM
         BZ    NOPARM
         LA    R1,2(R1)      SKIP OVER LENGTH OF PARM
         PACK  STRTTIME(3),0(4,R1)   PACK STARTING TIME
         PACK  STOPTIME(3),5(4,R1)   PACK ENDING TIME
         NI    STRTTIME+2,X'F0'      FIX TIME
         NI    STOPTIME+2,X'F0'      FIX TIME
NOPARM   EQU   *
         OPEN  INPUT
         MVC   RECTIME,=CL4' '
         EJECT
*        READ SMF RECORDS AND SELECT THE RMF RECORDS FOR ANALYSIS
         SPACE
GETREC   GET   INPUT
         LA    R12,4(R1)        SKIP OVER RDW
         ST    R12,RECADDR      SAVE ADDRESS OF RECORD START
         USING SMF70A,R12       ESTABLISH ADDRESSABILITY TO RECORD
         CLI   SMF70RTY,X'46'   CHECK FOR LOWER THAN TYPE 70
         BL    GETREC
         CLI   SMF70RTY,X'4A'   CHECK FOR HIGHER THAN TYPE 74
         BH    GETREC
         LA    R11,14(R12)      POINT TO COMMON CONTROL SECTION
         USING SMF70B,R11       ESTABLISH ADDRESSABILITY TO COMM CTRL
         CP    STRTTIME,=P'0'   CHECK FOR TIME PARM
         BE    GETSEL1          BRANCH IF NONE SPECIFIED
         SPACE
         CP    SMF70IST,STRTTIME  SEE IF BEFORE SPECIFIED START
         BL    GETREC
         CP    SMF70IST,STOPTIME  SEE IF AFTER SPECIFIED STOP
         BH    GETREC
         SPACE
GETSEL1  CLC   SMF70IST,RECIST  CHECK FOR NEW RECORD GROUP
         BE    SELECT
         DROP  R11
         L     R15,=A(PRINTREC)
         BALR  R14,R15
SELECT   SRL   R1,32
         IC    R1,SMF70RTY      INSERT CHARACTER - RECORD TYPE
         LA    R12,14(R12)      POINT TO COMMON CONTROL SECTION
         DROP  R12
         USING SMF70B,R12
         SH    R1,=H'70'        BASE RECORD TYPE RELATIVE TO 70
         SLL   R1,2             AND MAKE IT INCREMENTS OF FOUR
         L     R1,BRTAB(R1)     LOAD ADDRESS OF RECORD TYPE PROCESSER
         BR    R1
         SPACE 2
BRTAB    DC    A(TYP70),A(TYP71),A(TYP72),A(TYP73),A(TYP74)
         EJECT
*        DECODE CPU ACTIVITY RECORD
         SPACE
TYP70    EQU   *
         UNPK  DW,SMF70IST
         MVC   RECTIME,DW+2
         MVC   DATE,=X'4021204B202020'
         ED    DATE,SMF70DAT+1
         LA    R1,SMF70INT      POINT TO INTERVAL TIME
         BAL   R14,CNVMSBIN
         ST    R1,REC70INT      STORE BINARY INTERVAL
         AH    R12,SMF70SIZ     POINT TO CPU CONTROL SECTION
         DROP  R12
         SPACE
         USING SMF70C,R12
         LR    R11,R12
         AH    R11,SMF70SCC     POINT TO WAIT SECTION
         SPACE
         USING SMF70D,R11
         TM    SMF70CNF,X'02'   CHECK VALIDITY OF SECTION
         BO    TYP70A
         BAL   R14,CPUCALC
TYP70A   CLI   SMF70CPU+1,X'02' SEE IF ANOTHER SECTION (MP/AP CONFIG)
         BNE   GETREC
         AH    R11,SMF70SCD     POINT TO NEXT WAIT SECTION
         TM    SMF70CNF,X'02'   CHECK FOR VALIDITY OF SECTION
         BO    GETREC
         BAL   R14,CPUCALC
         B     GETREC
         SPACE
CPUCALC  ST    R14,RETURN
         LM    R14,R15,SMF70WAT LOAD WAIT TIME
         SRDL  R14,12
         D     R14,=F'1000'
         L     R14,REC70INT
         SR    R14,R15
         LR    R15,R14
         SRL   R14,32
         M     R14,=F'10000'
         D     R14,REC70INT
         LH    R1,SMF70CID
         SLL   R1,2
         A     R1,=A(CPUMTRX)
         ST    R15,0(R1)        STORE CPU UTILIZATION
         L     R14,RETURN
         BR    R14
         DROP  R11
         DROP  R12
         EJECT
*        DECODE PAGEING STATISTICS RECORD
         SPACE
TYP71    EQU   *
         USING SMF71B,R12
         LA    R1,SMF71INT       POINT TO INTERVAL
         BAL   R14,CNVMSBIN      GO CONVERT IT TO BINARY
         ST    R1,REC70INT       STORE INTERVAL
         AH    R12,SMF71SIZ      POINT TO NEXT SECTION OF RECORD
         DROP  R12
         SPACE
         USING SMF71C,R12
         AH    R12,SMF71SPC      POINT TO NEXT SECTION OF RECORD
         DROP  R12
         SPACE
         USING SMF71D,R12
         L     R15,SMF71PIN      ADD UP DEMAND PAGING
         A     R15,SMF71POT
         A     R15,SMF71VIN
         A     R15,SMF71VOT
         ST    R15,PAGEFW        STORE DEMAND PAGING TOTAL
         SRL   R14,32
         M     R14,=F'100000'
         D     R14,REC70INT
         L     R1,=A(PAGERATE)
         ST    R15,16(R1)        STORE DEMAND PAGING RATE
         L     R15,PAGEFW        RESTORE DEMAND PAGING TOTAL
         A     R15,SMF71SIN      ADD IN SWAP RATE FOR TOTAL PAGING
         A     R15,SMF71SOT
         SRL   R14,32
         M     R14,=F'100000'
         D     R14,REC70INT
         ST    R15,0(R1)         STORE TOTAL PAGING RATE
         L     R15,SMF71PIN      ADD UP PAGE FAULT RATE
         A     R15,SMF71PRC
         A     R15,SMF71VIN
         A     R15,SMF71VRC
         SRL   R14,32
         M     R14,=F'100000'
         D     R14,REC70INT
         ST    R15,20(R1)
         MVC   4(4,R1),SMF71AVX  SAVE NUMBER OF FIXED PAGES
         MVC   8(4,R1),SMF71AVP  SAVE NUMBER OF LPA/CSA
*                                PAGEABLE FRAMES
         L     R15,SMF71AVF      LOAD NUMBER OF UNUSED FRAMES
         A     R15,SMF71AVS      ADD NUMBER OF PRIVATE AREA
*                                PAGEABLE FRAMES
         ST    R15,12(R1)        STORE PRIVATE/UNUSED FRAMES
         B     GETREC
         DROP  R12
         SPACE
PAGEFW   DS    F
         EJECT
*        DECODE WORKLOAD ACTIVITY RECORD
         SPACE
TYP72    EQU   *
         USING SMF72B,R12
         AH    R12,SMF72SIZ     POINT TO NEXT SECTION OF TYPE 72 REC
         DROP  R12
         USING SMF72C,R12
         LH    R1,SMF72PGP      LOAD NUMBER OF PERIODS IN RECORD
         LR    R11,R12
         AH    R11,SMF72SWC     POINT TO FIRST PERIOD
         USING SMF72D,R11
         L     R4,=A(TOTMTRX)   GET ADDRESS OF TOT SERVICE MATRIX
         LM    R5,R8,0(R4)      LOAD TOTAL SERVICE MATRIX
*                               R5 - TOTTOT
*                               R6 - TOTCPU
*                               R7 - TOTIOC
*                               R8 - TOTMSO
         SPACE
TYP72A   LH    R2,SMF72CDN      LOAD DOMAIN NUMBER
         LTR   R2,R2
         BZ    TYP72B           DONT DO DOMAIN 0
         CH    R2,=H'12'        DONT DO ANY DOMAIN OVER 12
         BH    TYP72B
         BCTR  R2,0
         MH    R2,=H'24'        POINT TO RELATIVE DOMAIN
         A     R2,=A(DMNMTRX)
         USING DMNDSECT,R2
         L     R15,DMNMSO       LOAD ESISTING DOMAIN MSO
         L     R14,DMNTOT       LOAD EXISTING DOMAIN TOTAL
         L     R9,SMF72MTS      LOAD NEW MSO
         LA    R9,0(R9)
         AR    R14,R9           ADD IN MSO TO DOMAIN TOTAL
         AR    R15,R9           ADD IN MSO TO DOMAIN MSO
         AR    R5,R9            ADD IN MSO TO TOTTOT
         AR    R8,R9            ADD IN MSO TO TOTMSO
         ST    R15,DMNMSO       STORE DOMAIN MSO
         L     R15,DMNIOC       LOAD EXISTING DOMIAN IOC
         L     R9,SMF72ITS      LOAD NEW IOC COUNT
         LA    R9,0(R9)
         AR    R14,R9           ADD IN IOC TO DOMAIN TOTAL
         AR    R15,R9           ADD IN IOC TO DOMAIN MSO
         AR    R5,R9            ADD IN IOC TO TOTTOT
         AR    R7,R9            ADD IN IOC TO TOTIOC
         ST    R15,DMNIOC       STORE DOMAIN IOC
         L     R15,DMNCPU       LOAD EXISTING DOMAIN CPU
         L     R9,SMF72CTS      LOAD NEW CPU SERVICE
         LA    R9,0(R9)
         AR    R14,R9           ADD IN CPU TO DOMAIN TOTAL
         AR    R15,R9           ADD IN CPU TO DOMAIN CPU
         AR    R5,R9            ADD IN CPU TO TOTTOT
         AR    R6,R9            ADD IN CPU TO TOTCPU
         ST    R15,DMNCPU       STORE DOMAIN CPU
         ST    R14,DMNTOT       STORE DOMAIN TOTAL
         L     R9,DMNENT        LOAD DOMAIN ENDED TRANSACTIONS
         A     R9,SMF72TTX      ADD NUMBER OF ENDED TRANSACTIONS FROM
*                               THIS PERIOD
         ST    R9,DMNENT        STORE DOMAIN ENDED TRANSACTIONS
         L     R15,SMF72TTM     LOAD PERIOD ELAPSED TIME
         SRL   R14,32
         M     R14,=F'1024'     MAKE MICROSECONDS
         D     R14,=F'10000'    MAKE HUNDREDTHS
         A     R15,DMNELP       ADD IN DOMAIN ELAPSED TIME
         ST    R15,DMNELP       SAVE DOMAIN ELAPSED TIME
TYP72B   AH    R11,SMF72SPD     POINT TO NEXT PERIOD
         BCT   R1,TYP72A
         STM   R5,R8,0(R4)      STORE TOTAL MATRIX
         B     GETREC
         DROP  R2
         DROP  R11
         DROP  R12
         EJECT
*        DECODE CHANNEL ACTIVITY RECORD
         SPACE
TYP73    EQU   *
         USING SMF73B,R12
         MVC   RECRDSAM,SMF73SAM  SAVE NUMBER OF SAMPLES
         AH    R12,SMF73SIZ     POINT TO NEXT SECTION OF RECORD
         DROP  R12
         USING SMF73C,R12
         LR    R11,R12
         AH    R11,SMF73SHC     POINT TO FIRST CHANNEL SECTION
         USING SMF73D,R11
         LH    R1,SMF73CHA      LOAD NUMBER OF CHANNEL SECTIONS
         SPACE
TYP73A   TM    SMF73FG2,X'16'   CHECK FOR SECTION VALIDITY
         BNZ   TYP73B           DONT DO BYTE CHANNEL EITHER
         L     R15,SMF73BSY     LOAD CHANNEL BUSY COUNT
         SRL   R14,32
         M     R14,=F'10000'
         D     R14,RECRDSAM     DIVIDE BY NUMBER OF SAMPLES
         SRL   R14,32
         IC    R14,SMF73HID     LOAD CHANNEL NUMBER
         CH    R14,=H'6'        DONT DO ANY CHANNEL OVER 6
         BH    TYP73B
         BCTR  R14,0            MAKE CHANNEL RELATIVE TO 1
         SLL   R14,3
         LH    R2,SMF73CID      LOAD CPU NUMBER
         SLL   R2,2
         AR    R14,R2
         A     R14,=A(CHANMTRX) ADD IN ADDRESS OF CHANNEL MATRIX
         ST    R15,0(R14)       STORE PERCENT BUSY
TYP73B   AH    R11,SMF73SHD     POINT TO NEXT CHANNEL SECTION
         BCT   R1,TYP73A
         B     GETREC
         DROP  R11
         DROP  R12
         EJECT
*        DECODE DEVICE ACTIVITY RECORD
         SPACE
TYP74    EQU   *
         USING SMF74B,R12
         CLC   SMF74SUB,=X'0020'  CHECK FOR DASD DEVICES
         BNE   GETREC             DO ONLY DASD
         MVC   RECRDSAM,SMF74SAM  SAVE NUMBER OF SAMPLES
         AH    R12,SMF74SIZ      POINT TO NEXT SECTION OF RECORD
         DROP  R12
         USING SMF74C,R12
         LR    R11,R12
         AH    R11,SMF74SDC      POINT TO FIRST DEVICE SECTION
         USING SMF74D,R11
         LH    R10,SMF74DEV      LOAD NUMBER OF DEVICES
         SPACE
*        CALCULATE QUEUE LENGTH
         SPACE
TYP74A   L     R15,SMF74QUE      LOAD NUMBER OF REQUESTS QUEUED
         SRL   R14,32
         M     R14,=F'1000'
         D     R14,RECRDSAM      DIVIDE BY NUMBER OF SAMPLES
         SRL   R14,32
         LA    R15,5(R15)        ROUND UPWARD
         D     R14,=F'10'
         L     R4,=A(QMTRX)      LOAD ADDRESS OF QUE LENGTH MATRIX
         LA    R1,6              LOAD NUMBER OF ENTRIES IN MATRIX
         SPACE
*        SEE IF QUEUE LENGTH IS GREATER THAN ANY ALREADY IN MATRIX
         SPACE
TYP74B   C     R15,8(R4)         FIND SLOT IN MATRIX
         BNL   TYP74D            GO FIT ENTRY INTO SLOT
         LA    R4,12(R4)         POINT TO NEXT SLOT IN MATRIX
         BCT   R1,TYP74B
         SPACE
TYP74C   AH    R11,SMF74SDD      POINT TO NEXT DEVICE SECTION
         BCT   R10,TYP74A        GO AND DO NEXT DEVICE
         B     GETREC
         SPACE
TYP74D   BCTR  R1,0
         LTR   R1,R1             SEE IF LAST SLOT
         BNZ   TYP74F            GO MAKE ROOM BY MOVING SLOTS DOWN
         SPACE
TYP74E   MVC   0(6,R4),SMF74SER  INSERT VOLSER
         ST    R15,8(R4)         STORE QUE LENGTH
         B     TYP74C
         SPACE
TYP74F   LA    R7,12             LOAD SIZE OF MATRIX SLOT
         LR    R2,R1
         MH    R2,=H'12'
         DROP  R11
         DROP  R12
         EJECT
CNVMSBIN EQU   *                CONVERT INTERVAL TIME TO BINARY
         XC    DW,DW
         MVC   DW+5(3),1(R1)
         CVB   R15,DW
         MVO   DW,0(1,R1)
         OI    DW+7,X'0F'
         CVB   R1,DW
         MH    R1,=H'600'
         MH    R1,=H'100'
         AR    R1,R15
         BR    R14
         SPACE 2
ENDIN    L     R15,=A(PRINTREC)
         L     R12,RECADDR      POINT TO ADDRESS OF START OF LAST REC
         LA    R11,14(R12)      POINT TO COMMON CONTROL SECTION
         BALR  R14,R15
         L     R12,=A(PRINTREC)
         USING PRINTREC,R12
         CLOSE (INPUT,,OUTPUT,)
         DROP  R12
         L     R13,4(R13)
         RETURN (14,12),RC=0
         EJECT
WORKAREA EQU   *
RECIST   DS    CL4
DW       DS    D
SAVEA    DS    18F
DATE     DS    CL7
RETURN   DS    F
REC70INT DS    F
RECTIME  DS    CL4
FW       DS    F
RECRDSAM DS    F
RECADDR  DS    F
STRTTIME DC    PL4'0'
STOPTIME DC    PL4'0'
         SPACE 2
         LTORG
         SPACE 2
         PRINT ON,NOGEN
INPUT    DCB   DDNAME=INPUT,MACRF=(GL),EODAD=ENDIN,DSORG=PS
         SPACE 2
         PRINT ON,GEN
         EJECT
PRINTREC CSECT
         STM   R14,R12,12(R13)
         LR    R3,R15
         USING PRINTREC,R3
         LA    R12,SAVEAA
         ST    R12,8(R13)
         ST    R13,4(R12)
         LR    R13,R12
         L     R9,=A(WORKAREA)  GET ADDRESSABILITY TO CONSTANTS ETC.
         USING WORKAREA,R9
         USING SMF70B,R11
         MVC   RECIST,SMF70IST
         CLC   RECTIME,=CL4' '
         BNE   PRT001
         BAL   R10,HEADING
         MVC   SHIFT,RECTIME    SAVE HOUR OF DAY
         B     RETURNP
         SPACE
PRT001   CLC   ODATE,DATE+1     SEE IF DATE HAS CHANGED
         BNE   PRT001H          GO PRINT HEADINGS
         DROP  R11
         CLC   SHIFT,RECTIME    SEE IF HOUR IS STILL SAME
         BE    PRT001A          DONT SEE IF SHIFT HAS CHANGED
         CLC   RECTIME(2),=C'08' SEE IF FIRST SHIFT
         BE    PRT001H          GO PRINT HEADINGS
         CLC   RECTIME(2),=C'16' SEE IF SECOND SHIFT
         BE    PRT001H          GO PRINT HEADINGS
PRT001A  L     R1,SETS
         C     R1,NUMSETS       SEE IF PAGE IS FULL
         BNE   PRT002
PRT001H  MVC   SHIFT,RECTIME    SAVE HOUR OF DAY
         BAL   R10,HEADING
PRT002   LA    R1,1(R1)
         ST    R1,SETS
         MVC   LINE1+1(4),RECTIME
         L     R1,=A(CPUMTRX)
         L     R2,0(R1)
         CVD   R2,DW            GET FIRST CPU TIME
         MVC   LINE1+5(7),MSK7
         ED    LINE1+5(7),DW+5
         LR    R11,R2           SAVE FIRST CPU TIME
         L     R2,4(R1)         GET SECOND CPU TIME
         CVD   R2,DW
         MVC   LINE2+5(7),MSK7
         ED    LINE2+5(7),DW+5
         LTR   R2,R2            SEE IF SECOND CPU IS THERE
         BZ    PRT003           BRANCH IF NOT
         AR    R11,R2           AVERAGE IN SECOND CPU
         SRL   R11,1
PRT003   L     R15,=A(TOTMTRX)
         L     R15,4(R15)       LOAD TOTAL CPU SERVICE
         SRL   R14,32
         M     R14,=F'10'
         DR    R14,R11          CALCULATE CPU PERFORMANCE INDEX
         CVD   R15,DW
         MVC   LINE4+5(7),=X'40214B20202020'
         ED    LINE4+5(7),DW+5
         L     R1,=A(PAGERATE)
         L     R2,0(R1)         LOAD PAGERATE PER SECOND
         CVD   R2,DW
         MVC   LINE1+12(7),MSK7
         ED    LINE1+12(7),DW+5
         L     R2,16(R1)        LOAD DEMAND PAGING
         CVD   R2,DW
         MVC   LINE2+12(7),MSK7
         ED    LINE2+12(7),DW+5
         L     R2,20(R1)        LOAD PAGEFAULT RATE
         CVD   R2,DW
         MVC   LINE3+12(7),MSK7
         ED    LINE3+12(7),DW+5
         L     R2,4(R1)         LOAD NUMBER OF FIXED PAGES
         CVD   R2,DW
         MVC   LINE4+13(6),MSK6
         ED    LINE4+13(6),DW+5
         L     R2,8(R1)         LOAD NUMBER OF SYSTEM PAGEABLE PAGES
         CVD   R2,DW
         MVC   LINE5+13(6),MSK6
         ED    LINE5+13(6),DW+5
         L     R2,12(R1)        LOAD NUMBER OF PRIVATE PAGEABLE PAGES
         CVD   R2,DW
         MVC   LINE6+13(6),MSK6
         ED    LINE6+13(6),DW+5
         L     R1,=A(DMNMTRX)   LOAD ADDRESS OF DOMAIN MATRIX
         USING DMNDSECT,R1
         LA    R4,LINE1+20      POINT TO STARTING POSITION ON LINE
         LA    R6,13            LOAD NUMBER OF SETS TO PRINT
         SPACE
PRTDMN   L     R2,DMNTOT        LOAD TOT SERVICE
         BAL   R5,EDDMN
         MVC   0(4,R4),EDW+2
         L     R2,DMNCPU        LOAD CPU SERVICE
         BAL   R5,EDDMN
         MVC   133(4,R4),EDW+2
         L     R2,DMNIOC        LOAD IOC SERVICE
         BAL   R5,EDDMN
         MVC   266(4,R4),EDW+2
         L     R2,DMNMSO        LOAD MSO SERVICE
         BAL   R5,EDDMN
         MVC   399(4,R4),EDW+2
         C     R6,=F'1'         SEE IF PROCESSING TOTAL MATRIX
         BE    PRTDMN4          DONT AVERAGE TOTAL MATRIX
         L     R2,DMNENT        LOAD NUMBER OF ENDED TRANSACTIONS
         CVD   R2,DW
         MVC   EDW,MSK6
         ED    EDW,DW+5
         MVC   532(4,R4),EDW+2  MOVE ENDED TRANSACTIONS TO LINE 5
         SRL   R15,32
         LTR   R2,R2            SEE IF 0 TRANSACTIONS
         BZ    PRTDMN0          DONT AVERAGE 0 TRANSACTIONS
         L     R15,DMNELP       LOAD DOMAIN ELAPSED TIME
         SRL   R14,32
         DR    R14,R2           AVERAGE TRANSACTION TIME - HUNDREDTHS
         LA    R15,5(R15)       ROUND UP
         SRL   R14,32
         D     R14,=F'10'       MAKE AVERAGE IN TENTHS OF SECONDS
         C     R15,=F'999'      SEE IF AVERAGE CAN BE PRINTED IN
         BH    PRTDMN1          TENTHS - OR TOO BIG
PRTDMN0  CVD   R15,DW
         MVC   EDW7,MSK7A
         ED    EDW7,DW+5
         MVC   665(4,R4),EDW7+3 MOVE AVERAGE IN TENTHS TO LINE6
         B     PRTDMN4
PRTDMN1  SRL   R14,32
         D     R14,=F'6'        MAKE TENTHS OF SECONDS TO MINS
         LA    R15,5(R15)       ROUND UP
         SRL   R14,32
         D     R14,=F'10'       MAKE INTO MINS AND TENTHS
         C     R15,=F'99'       SEE IF CAN BE X.X MINS
         BH    PRTDMN2
         CVD   R15,DW
         MVC   EDW7,MSK7A
         ED    EDW7,DW+5
         MVC   665(3,R4),EDW7+4 MOVE MINS AND TENTHS TO LINE6
         MVI   668(R4),C'M'     FLAG MINUTES
         B     PRTDMN4
PRTDMN2  LA    R15,5(R15)       ROUND UP TENTHS
         C     R15,=F'9999'     SEE IF OVER 999 MINUTES
         BH    PRTDMN3
         CVD   R15,DW
         MVC   EDW,MSK6
         ED    EDW,DW+5
         MVC   665(3,R4),EDW+2  JUST MOVE THE MINUTES
         MVI   668(R4),C'M'     FLAG MINUTES
         B     PRTDMN4
PRTDMN3  MVI   668(R4),C'*'     FLAG OVER 999 MINUTES
PRTDMN4  EQU   *
         LA    R4,5(R4)         POINT TO NEXT LINE POSITION
         LA    R1,24(R1)        POINT TO NEXT MATRIX GROUP
         BCT   R6,PRTDMN
         SPACE
         DROP R1
         LA    R4,LINE1+86      POINT TO CHANNEL STARTING POSITION
         L     R1,=A(CHANMTRX)  POINT TO START OF CHANNEL MATRIX
         LA    R6,6             LOAD NUMBER OF CHANNELS TO PRINT
         SPACE
PRTCHAN  L     R2,0(R1)         LOAD CPU0 CHANNEL
         BAL   R5,EDCHAN
         MVC   0(5,R4),EDW7+2
         L     R2,4(R1)         LOAD CPU1 CHANNEL
         BAL   R5,EDCHAN
         MVC   133(5,R4),EDW7+2
         LA    R1,8(R1)         POINT TO NEXT CHANNEL GROUP
         LA    R4,6(R4)         POINT TO NEXT LINE POSITION
         BCT   R6,PRTCHAN
         SPACE
         LA    R4,LINE1+122    GET STARTING PRINT POSITION FOR VOL
         L     R5,=A(QMTRX)    GET FIRST SLOT OF Q MATRIX
         LA    R6,6            LOAD NUMBER OF SLOTS IN Q MATRIX
         SPACE
PRTQLEN  MVC   0(6,R4),0(R5)   MOVE VOLSER
         L     R15,8(R5)       LOAD QLEN
         CVD   R15,DW
         MVC   6(5,R4),=X'40214B2020'
         ED    6(5,R4),DW+6
         LA    R4,133(R4)      POINT TO NEXT LINE
         LA    R5,12(R5)       POINT TO NEXT MATRIX SLOT
         BCT   R6,PRTQLEN
         SPACE
         MVI   LINE1,X'09'
         MVI   LINE2,X'09'
         MVI   LINE3,X'09'
         MVI   LINE4,X'09'
         MVI   LINE5,X'09'
         MVI   LINE6,X'11'
         LA    R5,LINE1         POINT TO FIRST LINE TO PRINT
         LA    R6,6             LOAD NUMBER OF LINES TO PRINT
         SPACE
PRTLINE  PUT   OUTPUT,(R5)
         MVI   0(R5),C' '
         MVC   1(132,R5),0(R5)
         LA    R5,133(R5)      POINT TO NEXT LINE TO PRINT
         BCT   R6,PRTLINE
         SPACE 3
RETURNP  L     R4,=A(DMNMTRX)  LOAD STARTING ADDRESS OF AREA TO
         LA    R6,1(R4)        CLEAR AND NEXT BYTE
         MVI   0(R4),X'00'     FILL CHARACTER
         L     R7,=F'455'      LOAD NUMBER OF BYTES TO CLEAR -1
         SRL   R5,32
         MVCL  R6,R4           MOVE LONG TO CLEAR MATRICES
         L     R13,4(R13)
         RETURN (14,12),RC=0
         EJECT
EDDMN    AH    R2,=H'500'      EDIT DOMAIN NUMBERS
         CVD   R2,DW
         MVO   FW,DW+3(3)
         MVC   EDW,MSK6
         ED    EDW,FW+1
         BR    R5
         SPACE 3
EDCHAN   CVD   R2,DW           EDIT CHANNEL NUMBERS
         MVC   EDW7,MSK7
         ED    EDW7,DW+5
         BR    R5
         SPACE 3
HEADING  MVI   L1,X'8B'
HEAD001  BC    0,HEAD002
         SPACE 2
         OPEN  (OUTPUT,(OUTPUT))
         USING SMF70B,R11
         MVC   DATE,=X'4021204B202020'
         ED    DATE,SMF70DAT+1
         OI    HEAD001+1,X'F0'
         SPACE 2
HEAD002  EQU   *
         PUT   OUTPUT,L1
         MVI   L1,X'09'
         MVC   L1+6(6),DATE+1
         MVC   ODATE,DATE+1
         DROP  R11
         MVC   L1+1(5),=C'DATE:'
         PUT   OUTPUT,L1
         MVI   L1,C' '
         MVC   L1+1(132),L1
         PUT   OUTPUT,L2
         PUT   OUTPUT,L3
         XC    SETS,SETS
         SRL   R1,32
         BR    R10
         EJECT
SAVEAA   DS    18F
SETS     DC    F'0'
NUMSETS  DC    F'11'    * *  NUMBER OF 6 LINE SETS TO PRINT PER PAGE
ODATE    DC    CL6' '
SHIFT    DC    CL2' '
         SPACE 2
L1       DC    CL133' '
L2       DC    X'09',CL6' ',C'CPU % TP/DP/PF',CL4' '
         DC    C'SERVICE (* 1000)  TOT/CPU/IOC/MSO/ENDTX/AVTXTIME'
         DC    CL18' ',C'CHANNELS  CPU0/CPU1'
         DC    CL14' ',C' DEVICE  '
L3       DC    X'11',C'TIME 0/1 PI F/SP/PP '
         DC    C'D-1  D-2  D-3  D-4  D-5  '
         DC    C'D-6  D-7  D-8  D-9 D-10 '
         DC    C'D-11 D-12  TOT',CL6' '
         DC    C'1',CL5' ',C'2',CL5' '
         DC    C'3',CL5' ',C'4',CL5' '
         DC    C'5',CL5' ',C'6',CL1' '
         DC    C'VOLSER   QL '
         SPACE
LINE1    DC    CL133' '
LINE2    DC    CL133' '
LINE3    DC    CL133' '
LINE4    DC    CL133' '
LINE5    DC    CL133' '
LINE6    DC    CL133' '
         SPACE
EDW      DS    CL6
EDW7     DS    CL7
MSK6     DC    X'402020202120'
MSK7     DC    X'402020214B2020'
MSK7A    DC    X'40202020214B20'
         SPACE 2
         LTORG
         SPACE 2
         PRINT ON,NOGEN
OUTPUT   DCB   DDNAME=OUTPUT,DSORG=PS,MACRF=PM,RECFM=FM,BLKSIZE=133
         EJECT
MATRIX   CSECT         MATRICIES TO ACCUMULATE DATA FOR EACH RMF PERIOD
         SPACE 3
DMNMTRX  DC    72F'0'  TOT/CPU/IOC/MSO/ETX/ELAPSED TIME  ( 12 DOMAINS )
         SPACE
TOTMTRX  DC    4F'0'   TOT/CPU/IOC/MSO  TOTAL SERVICE
         SPACE
CPUMTRX  DC    2F'0'   CPU UTILIZATION
         SPACE
PAGERATE DC    6F'0'   PAGERATE PER SEC / NUMBER OF FIXED FRAMES /
*                      NUMBER OF PAGEABLE SYSTEM PAGES /
*                      NUMBER OF PAGEABLE PRIVATE AREA PAGES
*                      DEMAND PAGERATE / PAGEFAULT RATE
         SPACE
CHANMTRX DC    12F'0'  CHANNEL % UTILIZATION CPU0/CPU1 CH 1-6
         SPACE
QMTRX    DC    18F'0'  6 SLOTS X 12 BYTES
*                         6 BYTES - VOLSER
*                         2 BYTES - UNUSED
*                         4 BYTES - QUEUE LENGTH
         EJECT
*        REFER TO RMF MANUAL FOR CONTENTS OF THE FOLLOWING DSECTS
         SPACE 2
SMF70A   DSECT        CPU ACTIVITY RECORD
         SPACE
SMF70FLG DS    XL1
SMF70RTY DS    XL1
SMF70TME DS    XL4
SMF70DTE DS    PL4
SMF70SID DS    CL4
         SPACE 2
SMF70B   DSECT
         SPACE
SMF70SIZ DS    XL2
SMF70IST DS    PL4
SMF70DAT DS    PL4
SMF70INT DS    PL4
SMF70RV0 DS    PL2
SMF70SUB DS    XL2
SMF70SAM DS    XL4
SMF70MFV DS    CL2
SMF70RV1 DS    XL2
SMF70RLS DS    CL4
SMF70CYC DS    PL4
         SPACE 2
SMF70C   DSECT
         SPACE
SMF70SCC DS    XL2
SMF70CPU DS    XL2
SMF70SCD DS    XL2
SMF70RV2 DS    XL2
         SPACE 2
SMF70D   DSECT
         SPACE
SMF70WAT DS    XL8
SMF70CID DS    XL2
SMF70RV3 DS    XL1
SMF70CNF DS    XL1
SMF70RV4 DS    XL1
SMF70SER DS    XL3
         EJECT
SMF71A   DSECT        PAGEING STATISTICS RECORD
         SPACE
SMF71FLG DS    XL1
SMF71RTY DS    XL1
SMF71TME DS    XL4
SMF71DTE DS    PL4
SMF71SID DS    CL4
         SPACE 2
SMF71B   DSECT
         SPACE
SMF71SIZ DS    XL2
SMF71IST DS    PL4
SMF71DAT DS    PL4
SMF71INT DS    PL4
SMF71RV0 DS    XL2
SMF71SUB DS    XL2
SMF71SPD DS    XL2
         SPACE 2
SMF71D   DSECT
         SPACE
SMF71PIN DS    XL4
SMF71POT DS    XL4
SMF71PRC DS    XL4
SMF71SSQ DS    XL4
SMF71SIN DS    XL4
SMF71SOT DS    XL4
SMF71VIN DS    XL4
SMF71VOT DS    XL4
SMF71VRC DS    XL4
SMF71SNI DS    XL4
SMF71SNO DS    XL4
SMF71SNR DS    XL4
SMF71RV2 DS    XL4
SMF71RV3 DS    XL4
SMF71RV4 DS    XL4
SMF71AFC DS    XL4
SMF71TFC DS    XL4
SMF71TSC DS    XL4
SMF71DSC DS    XL4
SMF71VSC DS    XL4
SMF71NSC DS    XL4
SMF71FIN DS    XL4
SMF71MNF DS    XL4
SMF71MXF DS    XL4
SMF71AVF DS    XL4
SMF71MNP DS    XL4
SMF71MXP DS    XL4
SMF71AVP DS    XL4
SMF71MNS DS    XL4
SMF71MXS DS    XL4
SMF71AVS DS    XL4
SMF71MNT DS    XL4
SMF71MXT DS    XL4
SMF71AVT DS    XL4
SMF71MNQ DS    XL4
SMF71MXQ DS    XL4
SMF71AVQ DS    XL4
SMF71MNC DS    XL4
SMF71MXC DS    XL4
SMF71AVC DS    XL4
SMF71MNR DS    XL4
SMF71MXR DS    XL4
SMF71AVR DS    XL4
SMF71MNX DS    XL4
SMF71MXX DS    XL4
SMF71AVX DS    XL4
SMF71MNU DS    XL4
SMF71MXU DS    XL4
SMF71AVU DS    XL4
SMF71MNV DS    XL4
SMF71MXV DS    XL4
SMF71AVV DS    XL4
SMF71MNM DS    XL4
SMF71MXM DS    XL4
SMF71AVM DS    XL4
SMF71MNB DS    XL4
SMF71MXB DS    XL4
SMF71AVB DS    XL4
SMF71MNA DS    XL4
SMF71MXA DS    XL4
SMF71AVA DS    XL4
SMF71TIS DS    XL4
SMF71LWS DS    XL4
SMF71DWS DS    XL4
SMF71ULS DS    XL4
SMF71NRS DS    XL4
SMF71ASS DS    XL4
SMF71RSS DS    XL4
SMF71EXS DS    XL4
SMF71EES DS    XL4
SMF71TOS DS    XL4
SMF71RV8 DS    XL4
         EJECT
SMF72A   DSECT        WORKLOAD ACTIVITY RECORD
         SPACE
SMF72FLG DS    XL1
SMF72RTY DS    XL1
SMF72TME DS    XL4
SMF72DTE DS    PL4
SMF72SID DS    CL4
         SPACE 2
SMF72B   DSECT
         SPACE
SMF72SIZ DS    XL2
SMF72IST DS    PL4
SMF72DAT DS    PL4
SMF72INT DS    PL4
SMF72RV0 DS    XL2
SMF72SUB DS    XL2
SMF72SAM DS    XL4
SMF72MFV DS    CL2
SMF72RV1 DS    XL2
SMF72RLS DS    CL4
SMF72CYC DS    PL4
         SPACE 2
SMF72C   DSECT
         SPACE
SMF72SWC DS    XL2
SMF72PGP DS    XL2
SMF72SPD DS    XL2
SMF72HPG DS    XL2
SMF72IPS DS    CL8
SMF72IRF DS    CL3
SMF72CRF DS    CL3
SMF72ERF DS    CL6
SMF72ISD DS    CL4
SMF72CSD DS    CL4
SMF72MSD DS    CL4
         SPACE 2
SMF72D   DSECT
         SPACE
SMF72TTX DS    XL4
SMF72ACT DS    XL4
SMF72SER DS    XL4
SMF72TTM DS    XL4
SMF72LEV DS    XL4
SMF72MTS DS    XL4
SMF72ITS DS    XL4
SMF72CTS DS    XL4
SMF72TAT DS    XL4
SMF72SPP DS    XL4
SMF72CDN DS    XL2
SMF72PON DS    XL1
SMF72RV2 DS    XL1
         EJECT
SMF73A   DSECT        CHANNEL ACTIVITY RECORD
         SPACE
SMF73FLG DS    XL1
SMF73RTY DS    XL1
SMF73TME DS    XL4
SMF73DTE DS    PL4
SMF73SID DS    CL4
         SPACE 2
SMF73B   DSECT
         SPACE
SMF73SIZ DS    XL2
SMF73IST DS    PL4
SMF73DAT DS    PL4
SMF73INT DS    PL4
SMF73RV0 DS    XL2
SMF73SUB DS    XL2
SMF73SAM DS    XL4
SMF73MFV DS    CL2
SMF73RV1 DS    XL2
SMF73RLS DS    CL4
SMF73CYC DS    PL4
         SPACE 2
SMF73C   DSECT
         SPACE
SMF73SHC DS    XL2
SMF73CHA DS    XL2
SMF73SHD DS    XL2
SMF73RV2 DS    XL2
         SPACE 2
SMF73D   DSECT
         SPACE
SMF73CID DS    XL2
SMF73HID DS    XL1
SMF73FG2 DS    XL1
SMF73CNT DS    XL4
SMF73BSY DS    XL4
SMF73OLP DS    XL4
         EJECT
SMF74A   DSECT        DEVICE ACTIVITY RECORD
         SPACE
SMF74FLG DS    XL1
SMF74RTY DS    XL1
SMF74TME DS    XL4
SMF74DTE DS    PL4
SMF74SID DS    CL4
         SPACE 2
SMF74B   DSECT
         SPACE
SMF74SIZ DS    XL2
SMF74IST DS    PL4
SMF74DAT DS    PL4
SMF74INT DS    PL4
SMF74RV0 DS    XL2
SMF74SUB DS    XL2
SMF74SAM DS    XL4
SMF74MFV DS    CL2
SMF74RV1 DS    XL2
SMF74RLS DS    CL4
SMF74CYC DS    PL4
         SPACE 2
SMF74C   DSECT
         SPACE
SMF74SDC DS    XL2
SMF74DEV DS    XL2
SMF74SDD DS    XL2
SMF74RV2 DS    XL2
         SPACE 2
SMF74D   DSECT
         SPACE
SMF74ADD DS    PL2
SMF74RV3 DS    XL1
SMF74CNF DS    XL1
SMF74TYP DS    XL4
SMF74SER DS    CL6
SMF74RV4 DS    XL2
SMF74CNT DS    XL4
SMF74ACT DS    XL4
SMF74QUE DS    XL4
         EJECT
DMNDSECT DSECT
         SPACE 2
DMNTOT   DS    F
DMNCPU   DS    F
DMNIOC   DS    F
DMNMSO   DS    F
DMNENT   DS    F
DMNELP   DS    F
         SPACE 2
         END
