./       ADD   NAME=ASMTOZAP
 ASZAP: PROC OPTIONS(MAIN) REORDER;
  /* THIS IS A UTILITY WHICH CONVERTS AN ASSEMBLER LISTING
     DATASET INTO A FORMATTED IMASPZAP INPUT DECK OR SMP PTF. IT
     IS USEFUL IN PREPARING, MAINTAINING, AND DOCUMENTING THOSE
     INSTALLATION MODIFICATIONS WHICH CANNOT BE INSTALLED EXECPT
     BY MODIFING IBM CODE. ONE CAN MAKE FREE USE OF MACROS,
     LITERALS, AND OTHER CONVENIENCE FEATURES IN PREPARING THE
     DECK. CONTROL CARDS IN SPECIAL ASSEMBLER COMMENT FORM
     PROVIDE FLEXABILITY IN MODIFICATION DESIGN AND CONTROL
     OVER OUTPUT.
        ALL CONTROL CARDS ARE INCLUDED IN THE ASSEMBLER DECK
     BEGINNING WITH THE CHARACTERS '*ZAP'. THE PURPOSE OF THE
     CONTROL CARDS IS TO INTERRUPT AND RESUME GENERATION OF
     ZAP OUTPUT. STATEMENTS WHICH DO NOT GENERATE OBJECT CODE
     (COMMENTS,ORG,DS,EQU,ETC.) ARE TRANSFERRED TO THE OUTPUT AS
     ZAP COMMENT CARDS, UNLESS OUTPUT GENERATION IS CURRENTLY
     PAUSED. OTHER STATEMENTS (INSTRUCTIONS,DC,CCW,ETC.) ARE
     TRANSFERRED TO THE OUTPUT AS 'VER' OR 'REP' CARDS IF
     OUTPUT GENERATION HAS BEEN (RE)STARTED IN ONE OF THESE
     TWO MODES. THE CARDS GOVERNING THIS ARE
          *ZAP START REP
          *ZAP START VER
          *ZAP PAUSE
     ZAP GENERATION IS INITIALLY PAUSED. A '*ZAP START' CARD IS
     VALID AND (RE)STARTS GENERATION IN REP OR VER MODE, WHICHEVER
     WAS LAST ACTIVE, BUT IF IT IS THE FIRST START CARD IN THE
     DECK, IT CANNOT BE FOLLOWED BY OBJECT GENERATING STATEMENTS
     UNTIL MODE IS SPECIFIED ON A SUBSEQUENT '*ZAP START (VER/REP)'
     CARD.
        WHEN THE ZAP IS DONE, A '*ZAP END' CARD WILL TERMINATE
     A SCAN OF THE LISTING AND CLOSE THE OUTPUT FILE. THIS NOT
     ONLY SAVES A FEW EXTRA MICROSECONDS OF CPU WHICH WOULD BE
     SPENT SCANNING THE MAPPING MACROS AND CROSS REFRENCE, BUT
     HELPS THE HUMAN READING THE ASSEMBLER TO KNOW WHERE THE
     ESSENTIAL CODE HAS STOPPED AND THE SUPPORT DEFINITIONS
     HAVE BEGUN. IT TAKES A LOT OF ZAP COMMENT CARDS TO DEFINE
     THE CVT DSECT.
        THE '*ZAP CARD' CONTROL CARD ALLOWS ARBITRARY TEXT TO
     BE REPRODUCED INT THE OUTPUT. THE CHARACTERS UP TO THE
     SPACE AFTER 'CARD' ARE STRIPPED OFF AND THE REMAINDER OF
     THE CARD TO COLUMN 72 IS REPRODUCED IN THE OUTPUT DECK.
     THIS IS PRIMARILY FOR NAME,DUMP, AND SMP CONTROL CARDS.
          *ZAP CARD ++PTF(YU00001) /* TYPICAL PTF DECK * /.
          *ZAP CARD ++ZAP(IEXAMPLE).
          *ZAP CARD   EXPAND IEXAMPLE(50)
          *ZAP CARD   NAME IEXAMPLE
          *ZAP START VER
     RESTRICTIONS:
          YOU MUST SPECIFY 'PRINT DATA' IN THE ASSEMBLY IF YOU
             GENERATE CONSTANTS OR LITERAL IN EXCESS OF 8 BYTES
             LENGTH.
          REMEMBER TO PUT THE 'LTORG' STATEMENT BEFORE THE
            '*ZAP END' CARD IF LITERALS ARE GENERATED.
          NO RELOCATABLE ADDRESS CONSTANTS CAN BE CODED IN THE
            ZAP CARD.
     IT IS NOT POSSIBLE AT THIS TIME TO DETECT VIOLATIONS OF THE
      RESTRICTIONS LISTED ABOVE. BE CAREFUL.
     GOOD TECHNIQUE:
        PUT ALL SENSITIVE ADDRESSES AT THE BEGINNING OF THE DECK AS
           EQU INSTRUCTIONS. THEY CAN BE EASILY MODIFIED WHEN HIT BY
           PTFS OR WHEN THE NEXT RELEASE IS DISTRIBUTED. CANDIDATES
           INCLUDE THE ZAPPED OVER INSTRUCTION, THE PATCH AREA, AND
           TARGETS OF CONDITIONAL BRANCH INSTRUCTIONS OTHER THAN THE
           NATURAL RETURN.
        IT IS SOMETIMES POSSIBLE TO IMBED THE ZAP INSTRUCTIONS IN
           ENOUGH SUPPORT CODE TO MAKE THE OBJECT DECK OUTPUT OF
           THE ASSEMBLY AN INDEPENDENTLY EXECUTABLE PROGRAM WHICH
           YOU CAN TSO TEST BEFORE INCORPORATING INTO THE SYSTEM.
           THIS SAVES A LITTLE SYSTEM TEST TIME TRACKING DOWN DATA
           EXCEPTIONS AND THE LIKE.

     COMMENTS AND SUGGESTIONS SHOULD BE ADDRESSED TO
          HOWARD GILBERT
          YALE COMPUTER CENTER
          175 WHITNEY AVE
          NEW HAVEN, CONN. 06520

     DDNAMES USED: IN,OUT,SYSPRINT
  /*
  DCL IN INPUT FILE RECORD /* DS CONTAINING SYSPRINT FROM ASSEMBLY */;
  DCL OUT OUTPUT FILE STREAM ENV(FB RECSIZE(80) BLKSIZE(800));
     /* RECEIVES ZAP CARDS */
  DCL LINE CHAR(133) VAR; /* ONE LINE OF ASSEMBLER */
  DCL LINE2 CHAR(133);
  DCL ADDR CHAR(4) DEF LINE2 POS(4); /* OFFSET OR ADDRESS PART */
  DCL DATA CHAR(16) DEF LINE2 POS(9); /* HEX INSTRUCTION CODE OR DATA */
          /* NOTE THAT SUBSTR(DATA,1,1) OVERLAPS LAST DIGIT OF
             HEX REPRESENTATION OF ADDRESS GENERATED BY EQU
             STATEMENT, SO TEST IS ON SUBSTR(DATA,2,1) FOR
             PRESENCE OF ANY REAL DATA */
  DCL CARD CHAR(72) DEF LINE2 POS(42); /* ASM SOURCE PART */
  DCL (DATE,TIME,INDEX,VERIFY,SUBSTR) BUILTIN;
  DCL WHAT CHAR(3) INIT(' '); /* BECOMES 'VER' OR 'REP' */
  DCL SKP BIT INIT('1'B); /* CONTROLS SKIPPING UNDER *ZAP PAUSE, ETC */
  ON ERROR BEGIN;
     ON ERROR SYSTEM;
     PUT EDIT(' ERROR PROCESSING:',LINE)(SKIP,A);
     END;
  %PAGE;
  /* LOGIC:
     EACH LINE IS HANDLED SEPARATELY. THE ONLY INFORMATION WHICH
       EXTENDS ACROSS LINES IS THE MODE OF GENERATION IN 'WHAT'
       AND THE GENERATION (0) OR PAUSE (1) STATUS IN 'SKP'.
       FIRST ONE DETECTS AND PROCESSES CONTROL CARDS.
       THEN ONE CHECKS FOR PAGE HEADER LINES AND BLANK LINES.
       ASSEMBLER COMMENT CARDS ARE REPRODUCED.
       A COMMENT CARD IS PRODUCED FOR LABELS OR NON-OBJECT
         GENERATING STATEMENTS.
       A VER OR REP CARD IS CREATED FOR OBJECT GENERATING STATEMENTS.
    */
  GETLINE:
     READ FILE(IN) INTO(LINE);
     LINE2=LINE;



     IF SUBSTR(CARD,1,4)='*ZAP' THEN
          DO /* ASMTOZAP CONTROL CARD PROCESSING */;
          I=VERIFY(SUBSTR(CARD,5),' ') +4;
          IF SUBSTR(CARD,I,5)='START' THEN
               DO;
               SKP='0'B;
               IF INDEX(CARD,'VER')>0 THEN WHAT='VER';
               IF INDEX(CARD,'REP')>0 THEN WHAT='REP';
               GO TO GETLINE;
               END;
          IF SUBSTR(CARD,I,5)='PAUSE' THEN
               DO;
               SKP='1'B;
               GO TO GETLINE;
               END;
          IF SUBSTR(CARD,I,4)='STOP'×SUBSTR(CARD,I,4)='END'
             THEN GO TO FINN;
          IF SUBSTR(CARD,I,4)='CARD' THEN
               DO;
               PUT FILE(OUT) EDIT(SUBSTR(CARD,I+5))(COL(1),A(72));
               GO TO GETLINE;
               END;
          PUT EDIT ('***** UNRECOGNIZED CONTROL CARD ****',CARD)
               (SKIP(2),2 A);
          CALL PLIRETC(16);
          GO TO GETLINE;
          END /* OF CONTROL CARD PROCESSING */;
     IF SKP THEN GO TO GETLINE;
  /* NO PROCESSING IS DONE IF GENERATION IS PAUSED */
     IF VERIFY(SUBSTR(LINE2,2,23),' 0123456789ABCDEF')>0
        THEN GO TO GETLINE;
   /* IF THERE ARE NON HEX CHARACTERS IN THE ADDRESS AND DATA FIELDS
      THEN WE ARE PROBABLY LOOKING AT A PAGE TITLE LINE */
     IF CARD=' ' & DATA=' ' THEN GO TO GETLINE;
          /* IF THESE FIELDS ARE BLANK, THEN WE ARE LOOKING AT BLANK
             LINES PRODUCED BY SPACE OR UNDER PAGE HEADER. */
     IF SUBSTR(CARD,1,1)='*' THEN
          DO /* REPRODUCE ASSEMBLER COMMENT CARD */;
          PUT FILE(OUT) EDIT(CARD)(COL(1),A(72));
          GO TO GETLINE;
          END;
     IF SUBSTR(CARD,1,1)^=' ' & SUBSTR(DATA,2,1)^=' ' THEN
          DO /* WE HAVE A LABELLED OBJECT GENERATING STATEMENT.
            BREAK IT UP INTO TWO LINE, A COMMENTED 'LABEL EQU *' AND
            A VER OR REP LINE THIS ALLOWS LESS TRUNCATION OF THE
            COMMENT FIELD OF THE ASSEMBLER SOURCE, SINCE COLS 1-9 ARE
            NEVER REPRODUCED AS BLANKS. */;
          PUT FILE(OUT) EDIT('*',SUBSTR(CARD,1,8),'EQU   *')
               (COL(1),A(1),COL(21),A(8),COL(30), A);
          END;
     IF SUBSTR(DATA,2,1)=' ' THEN
          DO /* NON-OBJECT-GENERATING STATEMENT */;
          PUT FILE(OUT) EDIT('*',CARD)
               (COL(1),A(1),COL(21),A(60));
          GO TO GETLINE;
          END /* IT IS PASSED AS A COMMENT */;
     IF WHAT=' ' THEN
          DO /* OBJECT GENERATOR HIT AFTER ONLY '*ZAP START' CARD */;
          PUT EDIT('**** NEITHER VER NOR REP HAS BEEN SPECIFIED ****',
               CARD)(SKIP, A);
          CALL PLIRETC(16);
          END;
     /* ZAP IS WRITTEN IN TWO PIECES. FIRST VER OR REP AND OFFSET,
        NEXT DATA AND COLUMNS 10- ON ASSEMBLER SOURCE. */
     PUT FILE(OUT) EDIT(WHAT,ADDR,' ')(COL(1),A(3),X(1),A(4),A(1));
     I=1;
               /* DATA GENERATING STATEMENTS ARE OF TWO KINDS:
                  MACHINE OPS GENERATE '0000 0000 0000' WITH
                  THE SECOND AND THIRD GROUP OPTIONAL.
                  DC GENERATES A VARIABLE LENGTH
                  '0000000000000000' WITH AN EVEN # DIGITS<17 */
          DO J=1 TO 4 WHILE(I<14);
          PUT FILE(OUT) EDIT(SUBSTR(DATA,I,4))(A(4));
          IF SUBSTR(DATA,I+4,1)=' ' THEN I=I+1;
          IF SUBSTR(DATA,I+4,1)^=' ' & I<10 THEN
               PUT FILE(OUT) EDIT(',')(A(1));
          I=I+4;
          END;
     PUT FILE(OUT) EDIT(SUBSTR(CARD,10))(COL(30),A(51));
     GO TO GETLINE;
  FINN:
     PUT FILE(OUT) EDIT('* DECK PRODUCED BY THE ASMTOZAP UTILITY'
          ,DATE,TIME)(COL(1),A,X(1),P'99/99/99',X(1),A(6));
     END;
./       ADD   NAME=CNTLOMF
* PROCESS OPT(TIME),INCLUDE;
 CNTLOMF:PROC(OPTIONS) OPTIONS(REENTRANT) REORDER;
 /* PROCEDURE: CNTLCRD                                               */
 /* FUNCTION: GENERAL CONTROL CARD PARSER                            */
 /* ATTRIBUTES: REENTRANT                                            */
 /* EXTERNAL: READS FROM DDNAME 'SYSIN'.                             */
 /* VERSION: JUNE 1, 1977                                            */
 /* AUTHOR:    HOWARD GILBERT                                        */
 /*            YALE COMPUTER CENTER                                  */
 /*            175 WHITNEY AVE                                       */
 /*            NEW HAVEN, CT 06520                                   */
 /*            203 432-4080                                          */
 /* DISTRIBUTION:                                                    */
 /*      THIS PROGRAM MAY BE FREELY REPRODUCED AND USED FOR ANY      */
 /* PURPOSE. IT IS SUGGESTED THAT USERS OF OURMF WHO NEED SOME       */
 /* KIND OF CONTROL INFORMATION IN A POST PROCESSOR CONSIDER         */
 /* USING SOME MODIFIED VERSION OF THIS PROGRAM FOR THEIR            */
 /* CONTROL CARD SCAN.                                               */
 % SKIP(5);
    %PAGE;
    DCL 1 OPTIONS ,
         2 INTERVAL FIXED BIN ,
         2 SMF BIT ALIGNED ,
         2 CPUSUM BIT ALIGNED ,
         2 DISKSPACE FIXED BIN ,
         2 TAPEDSN CHAR(44) VAR ,
         2 TAPEUNIT CHAR(6) VAR ;
 DCL VALWD CHAR(8);
     %PAGE;
  ON ENDFILE(SYSIN) GO TO FINN;
 CCNXT: CALL KEYWORD;
  IF NVALS>1 THEN CALL ERR('MORE THAN ONE ITEM IN PARENTHESES');
  VALWD=VAL(1);
 I=INDOX('INTERVAL RECORD CPU TDSN TUNIT DISKSIZE',KEY);
 SELECT(I);
    WHEN (1)
         DO;
         IF SUBSTR(VAL(1),LENGTH(VAL(1)),1)='M' THEN
            VAL(1)=SUBSTR(VAL(1),1,LENGTH(VAL(1))-1);
         ON CONVERSION CALL ERR('INVALID INTERVAL VALUE');
         INTERVAL=VAL(1);
         ON CONVERSION SYSTEM;
         END;
    WHEN (2)
         DO;
         J=INDOX('DATASET SMF',VALWD);
         IF J=2 THEN SMF='1'B;
         END;
    WHEN (3)
         DO;
         J=INDOX('FULL SUMMARY',VALWD);
         IF J=2 THEN CPUSUM='1'B;
         END;
    WHEN (4)
         TAPEDSN=VAL(1);
    WHEN (5)
         DO;
         IF LENGTH(VAL(1))>6 THEN
         CALL ERR('INVALID LENGTH IN TAPEUNIT');
         TAPEUNIT=VAL(1);
         END;
    WHEN (6)
         DO;
         ON CONVERSION CALL ERR('INVALID NUMBER IN DISKSIZE');
         DISKSPACE=VAL(1);
         ON CONVERSION SYSTEM;
         END;
  END;
 GO TO CCNXT;
  FINN:
  CLOSE FILE(SYSIN), FILE(SYSPRINT);
 RETURN;
 % INCLUDE CNTLCRD;
 END;
./       ADD   NAME=CPU
*PROCESS FLAG(E),MACRO,MAR(2,72);
 /*   CPU: DISPLAY OF STATDIE INCORE INFORMATION                     */
 /* PROCEDURE: CPU                                                   */
 /* FUNCTION:  DISPLAY MARGINAL STATE PROBABILITIES FOR THE CPU      */
 /*            BASED ON THE CURRENT INCORE SAMPLE FROM STATDIE       */
 /* LANGUAGE:  PLIX                                                  */
 /* SYSTEM:    MVS R3.7 + SU7                                        */
 /* EXTERNAL:  STATDIE MUST ALREADY HAVE BEEN STARTED TO             */
 /*            INITIALIZE TIMER DRIVEN SAMPLING.                     */
 /*            CALLS LOADPTR ENTRY IN PLIMISC                        */
 /* VERSION:   MAY 5,1977                                            */
 /* AUTHOR:    HOWARD GILBERT                                        */
 /*            YALE COMPUTER CENTER                                  */
 /*            175 WHITNEY AVE                                       */
 /*            NEW HAVEN, CONN. 06520                                */
 /*            203 432-4080                                          */
 /* DISTRIBUTION:                                                    */
 /*    THIS PROGRAM IS NOT RESTRICTED IN ANY MANNER. IT MAY BE       */
 /* FREELY REPRODUCED AND USED FOR ANY PURPOSE. HOWEVER,             */
 /* USERS ARE MORALLY BOUND TO MARK CLEARLY ANY MODIFICATIONS        */
 /* THEY ADD PRIOR TO DISTRIBUTING A MODIFIED VERSION TO OTHERS.     */
 %PAGE;
 /* INSTALLATION NOTES:                                              */
 /* RECOMMENDED TARGET LIBRARY: LINKLIB                              */
 /* LINKEDIT SYSLIB: PLIBASE                                         */
 /*       (MUST BE LINKEDITED WITH PLIMISC SUBROUTINES)              */
 /* LINKEDIT PARAMETERS: RENT                                        */
 /* LINKEDIT CONTROL CARDS:                                          */
 /*        ENTRY PLICALLA                                            */
 %SKIP(2);
 /*    THIS PROGRAM CAN RUN IN BATCH OR BE USED AS A TSO COMMAND.    */
 /* THE ONLY FILE USED IN 'SYSPRINT'. IN TSO THIS DDNAME MUST        */
 /* ALREADY BE ALLOCATED TO THE TERMINAL FOR THE OUTPUT TO DISPLAY   */
 /* PROPERLY. THE USE OF THE 'PLICALLA' ENTRY POINT SURPRESSES THE   */
 /* IBM00003I ERRONEOUS PARM FIELD IGNORED MESSAGE IN TSO.           */
 %PAGE;
 /* ONE PICTURE IS WORTH A LOT OF DOCUMENTATION:                     */
 %SKIP(2);
 /* CPU UTILIZATION    95.0           SAMPLE SIZE        4800        */
 /* SUPERVISOR STATE   57.9           TIME              17:25        */
 /* USERSTATE          40.4           AVG READY TCBS      2.6        */
 /* SUPERVISOR STATE IS  SVC: 34.9   SRB: 17.7   OTHER:  5.1         */
 /* KEY  PCT  ×  SVC  PCT  ×   PG  PCT  ×  PGM        PCT            */
 /*  0  52.1  ×    0  9.3  ×   0  10.8  ×  IFEAAB    10.2            */
 /*  1   3.6  ×   10  4.2  ×   1  43.4  ×  GATE       5.6            */
 /*  2   0.0  ×   16  2.7  ×   2  33.0  ×  TAPECHRG   4.0            */
 /*  3   0.0  ×   26  1.6  ×   3   0.0  ×  QEDMAIN    3.8            */
 /*  4   0.0  ×    1  1.2  ×   4   0.0  ×  DATATEXT   3.8            */
 /*  5   1.2  ×   99  1.2  ×   5   0.0  ×  IEL0AC     3.7            */
 /*  6   1.9  ×   56  1.0  ×   6   3.9  ×  IEDTCAM1   3.4            */
 /*  7   0.0  ×   19  0.9  ×   7   0.0  ×  **GO       2.9            */
 /*  8  41.0  ×   20  0.8  ×   8   4.5  ×  IEFIIC     2.8            */
 /*  9   0.0  ×   60  0.8  ×   9   4.1  ×  IGIFORT    2.5            */
 %SKIP(2);
 /* THIS IS A TYPICAL OUTPUT FROM CPU. THE VALUES ARE DEFINED        */
 /* AS FOLLOWS:                                                      */
 /* WHEN STATDIE INITIALIZES, IT ZEROS OUT THE PAGABLE BUFFERS. FOR  */
 /* THE FIRST 20 MINUTES, SOME OF THE BUFFERS ARE STILL UNFILLED.    */
 /* THERE IS NO VALID PSW WHICH CONTAINS ALL ZERO BITS, SO THE       */
 /* SAMPLE IS DEFINED AS THE SET OF PSWS WITH AT LEAST ONE BIT       */
 /* ON.                                                              */
 /* CPU UTILIZATION - % OF THE SAMPLE WITH THE WAIT BIT OFF.         */
 /*    (NOTE: THIS IS THE ONLY % WHICH IS BASED ON THE WHOLE         */
 /*     SAMPLE. ALL OTHER PERCENTS ARE NOW BASED ON COUNT OF         */
 /*     NON-WAIT STATE PSW'S).                                       */
 /* SUPERVISOR STATE - % OF ACTIVE PSWS WITH THE PROBLEM BIT         */
 /*     OFF.                                                         */
 /* USER STATE - % OF ACTIVE PSWS WITH THE PROBLEM BIT ON AND        */
 /*     NON-SYSTEM KEY (>7).                                         */
 /* SUPERVISOR STATE IS FURTHER SUBDIVIDED INTO THE PERCENTAGES      */
 /* WHEN AN SVC WAS IN CONTROL IN TASK MODE, WHEN AN SRB IS          */
 /* IN CONTROL, AND OTHER (WHICH INCLUDES FOR EXAMPLE, MODESET       */
 /* TIME, INITIATOR TIME, JES AND TCAM TASK TIME IN SUPERVISOR       */
 /* STATE, ETC).                                                     */
 /* THE FOUR COLUMNS OF PERCENTAGES ARE SEPARATE AND TOTAL           */
 /*     VERTICALLY. YOU DO NOT READ THEM ACROSS THE ROWS,            */
 /*     BECAUSE THERE IS NO HORIZONTAL ASSOCAITION. ONLY             */
 /*     TEN ITEMS APPEAR IN EACH COLUMN, THOUGH IT IS EASY           */
 /*     TO MODIFY THE PROGRAM TO PRINT MORE. THE COLUMNS             */
 /*     WILL NOT TOTAL TO 100% OF COURSE IF THERE IS                 */
 /*     ANY OMITTED NON-ZERO VALUE.                                  */
 /* KEY - BREAKS DOWN ACTIVE TIME BY PROTECT KEY.                    */
 /* SVC - BREAKS DOWN ACTIVE TIME BY THE SVC NUMBER OF THE TEN       */
 /*       MOST ACTIVE SVCS.                                          */
 /* PG  - BREAKS DOWN ACTIVE TIME BY THE PERFORMANCE GROUP OF        */
 /*       THE ASID IN CONTROL.                                       */
 /* PGM - BREAKS DOWN ACTIVE TIME BY THE CDENAME POINTED TO BY       */
 /*       THE HIGHEST PRB ON THE RB QUEUE.                           */
 %PAGE;
 /* PREPROCESSOR PARAMETERS GOVERNING VARIABLE DIMENSIONS */
 %DCL (SIZE,MODULUS) FIXED;
 /* SIZE AND MODULUS EFFECT THE ALLOCATION OF THE HASH TABLE         */
 /* FOR PROGRAM NAMES. THEY SHOULD BE CHOSEN BASED ON A GENEROUS     */
 /* ESTIMATE OF THE NUMBER OF UNIQUE PROGRAM NAMES. MODULUS MUST     */
 /* BE A PRIME NUMBER. IF MORE THAN 'SIZE' UNIQUE MODULE NAMES ARE   */
 /* ENCOUNTERED, THE ERROR CONDITION IS RAISED.                      */
 %SIZE=1000;
 %MODULUS=283;
 % INCLUDE STATGLBL;
 %PAGE;
 CPU: PROC OPTIONS(MAIN REENTRANT);
 DCL STDEPTR PTR;
 % INCLUDE STDE;
 %PAGE;
 DCL 1 PGBUF(PGBFCT) BASED(STDEBUFP),
 % INCLUDE PGBUF;
 %PAGE;
 /* THE FOLLOWING BUCKETS COLLECT THE VARIOUS STATE COUNTS FOR       */
 /* USE IN CALCULATING VARIOUS PERCENTAGES.                          */
 DCL KEYS(0:15) FIXED BIN INIT((16) 0);   /* BY PROTECT KEY          */
 DCL (PBLMCOUNT,                          /* PROBLEM STATE           */
         SAMPLE,                          /* SAMPLE SIZE             */
         ACTIVES,                         /* NON-WAIT                */
         USERCOUNT,                       /* PBLM & KEY>7            */
         TCBRDYS)                         /* COUNT READY TCBS        */
         FIXED BIN(31) INIT(0);           /*                         */
 DCL PG(0:10) FIXED BIN INIT((11) 0);     /* BY PERFORM              */
 DCL SVCS(0:256) FIXED BIN INIT((257) 0); /* BY SVC NUMBER           */
 DCL (TENSVC,TENPGM) (0:9) FIXED BIN;     /* TOP 10                  */
 DCL 1 SUP,                               /* SUP BREAKDOWN           */
        2 SVCST FIXED BIN INIT(0),        /* SVC IN TCB              */
        2 SRBST FIXED BIN INIT(0),        /* SRB                     */
        2 OTHER FIXED BIN INIT(0);        /* ALL ELSE                */
  /* HASH VARIABLES                                                  */
 /* TO EFFICIENTLY TABULATE THE PROGRAM NAMES, A HASHING             */
 /* TECHNIQUE IS USED FOR TABLE LOOKUP. THE EIGHT BYTE NAME          */
 /* IS DIVIDED UP INTO 16 BIT PIECES WHICH ARE EXCLUSIVE             */
 /* OR'D TOGETHER, THEN DIVIDED BY A PRIME NUMBER AND THE            */
 /* REMAINDER IS USED TO INDEX INTO 'HASHTAB'. THE ENTRY             */
 /* IN 'HASHTAB' POINTS TO THE FIRST ENTRY IN THE 'HASHBUCKET'       */
 /* STRUCTURE WHICH HASHED TO THAT INDEX, AND SUBSEQUENT             */
 /* NAMES WHICH HASH TO THE SAME NAME ARE CHAINED OFF                */
 /* HASHBUCKET.HASHCHAIN.                                            */
 DCL 1 HASHTAB(0:MODULUS) FIXED BIN INIT((MODULUS) -1);
 DCL NEXTBUCKET FIXED BIN INIT(-1);
 DCL 1 HASHBUCKET(0:SIZE),
   2 HASHNAME CHAR(8),
   2 HASHCHAIN FIXED BIN,
   2 HASHCOUNT FIXED BIN;
 DCL KEY CHAR(8);
 DCL KEYBITS(4) BIT(16) ALIGNED;
 DCL INDX FIXED BIN;
 %PAGE;
 CALL LOADPTR('STATSTDE',STDEPTR);
 IF PLIRETV>0 THEN DO;
   PUT EDIT('UNABLE TO LOCATE STATDIE MODULE')(COL(1),A);
   STOP;
   END;
 IF STDEFLGS='0'B THEN
    DO;
    PUT EDIT('STATDIE IS NOT INITIALIZED')(COL(1),A);
    RETURN;
    END;
 IF STDETQE(14)&'1'B THEN
    DO;
    PUT EDIT('STATDIE HAS BEEN PURGED BY AN ERROR')(COL(1),A);
    RETURN;
    END;
 TOD=SUBSTR(TIME,1,5);
 TOD=SUBSTR(TOD,1,2)××':'××SUBSTR(TOD,3,2);
 HASHNAME='********';
 HASHCOUNT=0;
 %PAGE;
  /* NOW PASS ONCE THROUGH THE BUFFER ACCUMULATING COUNTS            */
 DO I=1 TO PGBFCT; DO II=1 TO SRBINTVL;
 INITIAL:DO;
 IF FLAGS(I,II)='0'B & ADDRESS(I,II)=0 THEN LEAVE INITIAL;
       SAMPLE=SAMPLE+1;
       IF FLAGS(I,II)&WAIT THEN; ELSE
 ACTIVE:  DO;
          ACTIVES=ACTIVES+1;
          J=FLAGS(I,II)/16;
          KEY=CDENAME(I,II);
          KEYS(J)=KEYS(J)+1;
          TCBRDYS=TCBRDYS+TCBRDY(I,II);
          IF ABS(PERFORM(I,II))>10 THEN PG(10)=PG(10)+1;
          ELSE PG(PERFORM(I,II))=PG(PERFORM(I,II))+1;
          IF FLAGS(I,II)&SVCMD THEN SVCS(SVC(I,II))=SVCS(SVC(I,II))+1;
          IF FLAGS(I,II)&PBLM THEN
             DO;
             PBLMCOUNT=PBLMCOUNT+1;
             IF FLAGS(I,II)&'1'B THEN USERCOUNT=USERCOUNT+1;
             END;
          ELSE
             IF FLAGS(I,II)& SRB THEN SRBST=SRBST+1;
             ELSE IF FLAGS(I,II)& SVCMD THEN SVCST=SVCST+1;
             ELSE OTHER=OTHER+1;
          IF CDENAME(I,II)^=' ' THEN
 HASH:       DO;
             STRING(KEYBITS)=UNSPEC(KEY);
             KEYBITS(1)=BOOL(BOOL(KEYBITS(1),KEYBITS(2),'0110'B),
                BOOL(KEYBITS(1),KEYBITS(2),'0110'B),'0110'B);
             INDX=MOD(KEYBITS(1),MODULUS);
 OLDENTRY:      DO;
                IF HASHTAB(INDX)<0 THEN
                   DO;
                   NEXTBUCKET=NEXTBUCKET+1;
                   IF NEXTBUCKET>SIZE THEN SIGNAL ERROR;
                   HASHTAB(INDX)=NEXTBUCKET;
                   INDX=NEXTBUCKET;
                   LEAVE OLDENTRY;
                   END;
                ELSE
                   DO   INDX=HASHTAB(  INDX)
                      REPEAT HASHCHAIN(INDX)
                      UNTIL(HASHCHAIN(INDX)=0);
                   IF KEY=HASHNAME(INDX) THEN
                      DO;
                      HASHCOUNT(INDX)=HASHCOUNT(INDX)+1;
                      LEAVE HASH;
                      END;
                   END;
                NEXTBUCKET=NEXTBUCKET+1;
                IF NEXTBUCKET>SIZE THEN SIGNAL ERROR;
                HASHCHAIN(INDX)=NEXTBUCKET;
                INDX=NEXTBUCKET;
                END OLDENTRY;
             HASHNAME(INDX)=KEY;
             HASHCHAIN(INDX)=0;
             HASHCOUNT(INDX)=1;
             END HASH;
          END ACTIVE;
       END INITIAL;
    END;END;
 %PAGE;
 PUT EDIT('CPU UTILIZATION',ACTIVES*1000/SAMPLE,'SAMPLE SIZE',SAMPLE,
 'SUPERVISOR STATE',(ACTIVES-PBLMCOUNT)*1000/ACTIVES,'TIME',TOD,
 'USERSTATE',USERCOUNT*1000/ACTIVES,'AVG READY TCBS',TCBRDYS*10/ACTIVES)
 (COL(1),A(18),P'ZZ9.9',COL(35),A(18),P'ZZZZ9',
  COL(1),A(18),P'ZZ9.9',COL(35),A(18),A(5),
  COL(1),A(18),P'ZZ9.9',COL(35),A(18),P'ZZ9.9');
 PUT EDIT('SUPERVISOR STATE IS  SVC:',SVCST*1000/ACTIVES,
 '   SRB:',SRBST*1000/ACTIVES, '   OTHER:',OTHER*1000/ACTIVES)
 (COL(1), (3) (A,P'ZZ9.9'));
 CALL FIND10(TENSVC,SVCS);
 CALL FIND10(TENPGM,HASHCOUNT);
 PUT EDIT('KEY  PCT  ×  SVC  PCT  ×   PG  PCT  ×  PGM      PCT  ',
 (I,KEYS(I)*1000/ACTIVES,'×',TENSVC(I),SVCS(TENSVC(I))*1000/ACTIVES,'×',
 I,PG(I)*1000/ACTIVES,'×',HASHNAME(TENPGM(I)),HASHCOUNT(TENPGM(I))
 *1000/ACTIVES DO I=0 TO 9))(COL(1),A, (10)
 (COL(1),F(2),X(2),P'Z9.9',X(2),A(1),X(2),F(3),X(1),P'Z9.9',X(2),A(1),
 X(2),F(2),X(2),P'Z9.9',X(2),A(1),X(2),A(8),X(2),P'Z9.9'));
 %PAGE;
 FIND10: PROC(TEN,SELECT);
 /* INTERNAL PROCEDURE FOR CPU. LOCATES THE INDICES OF THE           */
 /* TEN LARGEST VALUES IN A FIXED BIN(15) ARRAY. USED TO             */
 /* SELECT WHICH SVC AND PGM NAMES TO DISPLAY.                       */
 DCL (TEN(0:9),SELECT(*)) FIXED BIN;
 DCL (I,J,K,N) FIXED BIN INIT(-1);
    DO I=0 TO HBOUND(SELECT,1);
 SCAN:
      DO;
         DO J=0 TO N;
         IF SELECT(TEN(J))<SELECT(I) THEN
            DO;
            N=MIN(9,N+1);
               DO K=N TO J+1 BY -1;
               TEN(K)=TEN(K-1);
               END;
            TEN(J)=I;
            LEAVE SCAN;
            END;
         END;
      IF N<9 THEN
         DO;
         N=N+1;
         TEN(N)=I;
         END;
      END;
    END;
 END;
 END;
./       ADD   NAME=DMN
* PROCESS OPT(TIME);
 /* DMN: TSO VERSION OF OPERATOR 'D DMN' COMMAND */
 DMN: PROC OPTIONS(MAIN REENTRANT);
  /*     VERSION DATE 10/4/76
         MVT R3.7 + SU 7
         YALE UNIVERSITY COMPUTER CENTER
         175 WHITNEY AVE
         NEW HAVEN, CT.
         203 432-4080
         HOWARD GILBERT

         RECOMMENDED AS A TSO COMMAND,
         LINKEDIT WITH PLMAIN AS THE ENTRY POINT
         USE PLI OPTIMIZING COMPILER            */
  DCL SIXTEEN PTR;
  UNSPEC(SIXTEEN)=(24)'0'B××'00010000'B;
  DCL ISASIZE FIXED BIN(31) EXT INIT(4096);
  DCL CVTPTR PTR BASED(SIXTEEN);
  DCL 1 CVT BASED(CVTPTR),
          2 F1 CHAR(604),
          2 CVTOPCTP PTR;
  DCL 1 RMCT BASED(CVTOPCTP),
          2 F1 CHAR(180),
          2 RMCTDMDT PTR,
          2 F2 CHAR(4),
          2 RMCTDMNC FIXED BIN;
  DCL 1 DMDT(20) BASED(RMCTDMDT),
          2 STATS,
                3 (NO,MIN,MAX,WT) BIT(8) ALIGNED,
                3 (MPLT,RUA,GOOUT,CMPL,OUTQ,INCU) FIXED BIN,
           2 F1 CHAR(4);
  PUT EDIT('    #  MIN  MAX   WT MPLT   RUA GOOU CMPL OUTQ INCU')
          (COL(1),A);
  PUT EDIT((STATS(I) DO I=1 TO RMCTDMNC))(COL(1),10 F(5));
  END;
./       ADD   NAME=OMFPST2
* PROCESS MACRO,MAR(2,72),OPT(TIME);
 /*OMFPST2: SUMMARIZE THE 30 SECOND OMF1 RECORD                      */
 OMFPST2: PROC OPTIONS(MAIN REENTRANT);
 /********************************************************************/
 /* PROCEDURE: OMFPST2                                               */
 /* FUNCTION:                                                        */
 /*            POST PROCESSOR FOR OMF1 RECORD (30 SECOND SUMMARY)    */
 /*            WRITES A ONE LINE PRINTABLE SUMMARY FOR EACH RECORD   */
 /* ATTRIBUTES: NONE                                                 */
 /* EXTERNAL: NONE                                                   */
 /* INPUT:                                                           */
 /*     FILE SYSIN CONTAINS PARAMETERS IN OURMF FORMAT               */
 /*           START( YYDDD HHMMSS )  /* STARTING DATE AND TIME       */
 /*           END  ( YYCCC HHMMSS )  /* ENDING DATE AND TIME         */
 /*           HOURS( HHMMSS HHMMSS)  /* APPLICABLE HOURS DURING      */
 /*                                  /* THIS TIME PERIOD             */
 /*           OUTPUT( DDNAME)        /* OUTPUT FILE NAME             */
 /* DEFAULTS: SUMMARIZE ALL RECORDS, OUTPUT(SYSPRINT)                */
 /*    IF OUTPUT GOES TO SYSPRINT EACH PAGE WILL BE HEADED. IF IT    */
 /* IT GOES TO ANOTHER FILE IT IS ASSUMED THE FILE WILL BE USED      */
 /* AS INPUT TO A PACAKAGED STATISTICAL ANALYSIS ROUTINE OR TO       */
 /* APL, AND ONLY THE DATA WILL BE WRITTEN.                          */
 /* THE OUTPUT DATASET HAS LRECL=132, BLKSIZE=6336                   */
 /*                                                                  */
 /* THE OURMF OUTPUT DATA IS READ FROM DDNAME 'IN'                   */
 /*                                                                  */
 /* AUTHOR:  HOWARD GILBERT                                          */
 /*          175 WHITNEY AVE                                         */
 /*          NEW HAVEN, CT 06520                                     */
 /*          203 432-4080                                            */
 /* DISTIRBUTION                                                     */
 /*     THIS PROGRAM IS NOT RESTRICTED IN ANY WAY AND MAY BE         */
 /* MODIFIED OR DISTRIBUTED IN ANY MANNER AND FOR ANY PURPOSE.       */
 /* IT IS SUGGESTED THAT OTHER OURMF POST PROCESSORS CONSIDER        */
 /* COMPATIBLE SYNTAX AND PARAMETER SCANNING.                        */
 /*                                                                  */
 /* VERSION: JUNE 7, 1977                                            */
 /********************************************************************/
 % PAGE;
 /* THE FOLLOWING STRUCTURE WILL CONTAIN INFORMATION DERIVED FROM    */
 /* PARSING THE SYSIN PARAMETER CARDS. THE INITIAL VALUES ARE        */
 /* THE DEFAULTS FOR EACH PARAMETER                                  */
 DCL 1 OPTIONS,
         5 STARTDATE FIXED DEC(7) INIT(0),
         5 STARTHOUR FIXED DEC(7) INIT(0),
         5 ENDDATE FIXED DEC(7) INIT(99365),
         5 ENDHOUR FIXED DEC(7) INIT(240000),
         5 EARLIEST FIXED DEC(7) INIT(0),
         5 LATEST FIXED DEC(7) INIT(240000),
         5 OUTNAME CHAR(8) INIT('SYSPRINT');
 % SKIP(2);
 DCL 1 COUNTS,     /* COUNTERS FOR PSW STATES */
         5 CWAIT FIXED BIN,
         5 CSVC FIXED BIN,
         5 CSRB FIXED BIN,
         5 CUSER FIXED BIN,
         5 COTHER FIXED BIN;
 %PAGE;
 /* NOW THE THREE FORMAL INCLUDE STATEMENTS FOR THE COMMON           */
 /* POST-PROCESSOR DEFINITIONS.                                      */
 /*   % INCLUDE STATGLBL;                                            */
 /*          TO DEFINE THE DIMENSIONS OF VARIOUS ARRAYS IN THE       */
 /*          OURMF RECORDS.                                          */
 /*   % INCLUDE YCCSTART;                                            */
 /*          TO SET THE DEFAULT RANGE AND PREPROCESSOR VARIABLE      */
 /*          DEFINITIONS REQUIRED BY SOME CONVERTED PLS MACROS.      */
 /*          OMFPST2 DOES NOT USE CONVERTED PLS, BUT IT IS A         */
 /*          GOOD HABIT TO INCLUDE YCCSTART ANYWAY.                  */
 /*   % INCLUDE OURMFDEF;                                            */
 /*          TO DEFINE THE THREE OURMF RECORD TYPES.                 */
 % INCLUDE STATGLBL;
 % INCLUDE YCCSTART;
 % INCLUDE OURMFDEF;
 %PAGE;
 /* NOW FOR SOME LOCALLY DEFINED VARIABLES. 'MAXVALS' AND            */
 /* 'WORDS' ARE USED TO VALIDITY CHECK THE INPUT PARAMETERS          */
 /* AND GENERATE ERROR MESSAGES.                                     */
 DCL MAXVALS(4) FIXED BIN INIT(2,2,2,1);
 DCL WORDS(4) CHAR(8) INIT('START','END','HOURS','OURPUT');
 DCL IN INPUT FILE RECORD ENV(VB TOTAL);
 DCL OUT OUTPUT FILE STREAM ENV(FB RECSIZE(132) BLKSIZE(6336));
 DCL OUTPUT FILE VARIABLE;
 %PAGE;
 CLOSE FILE(SYSPRINT);
 OPEN FILE(SYSPRINT) LINESIZE(132);
 %SKIP(2);
 /* THIS IS THE PARAMETER INPUT PARSE BLOCK. IT USES SUBROUTINES     */
 /* INCLUDED FROM THE 'CNTLCRD' MEMBER. MOST POST PROCESSORS WILL    */
 /* PROBABLY REQUIRE THE START, END, AND HOURS KEYWORDS. ADDITIONAL  */
 /* KEYWORDS CAN BE EASILY ADDED TO THE END OF THE BLOCK REPLACING   */
 /* THE 'OUTPUT' KEYWORD.                                            */
 ON UNDEFINEDFILE(SYSIN)GO TO PROCESS;
 ON ENDFILE(SYSIN) GO TO PROCESS;
 ON CONVERSION CALL ERR('INVALID NUMBER IN '××WORDS(I));
 KEYWDLOOP: CALL KEYWORD;
 I=INDOX('START END HOURS OUTPUT',KEY);
 IF NVALS>MAXVALS(I) THEN CALL ERR('TOO MANY VALUES FOR '××WORDS(I));
 SELECT (I);
    WHEN (1)
         DO;
         STARTDATE=VAL(1);
         IF NVALS=2 THEN STARTHOUR=VAL(2);
         END;
    WHEN (2)
         DO;
         ENDDATE=VAL(1);
         IF NVALS=2 THEN ENDHOUR=VAL(2);
         END;
    WHEN (3)
         DO;
         EARLIEST=VAL(1);
         IF NVALS=2 THEN LATEST=VAL(2);
         END;
    WHEN (4)
         DO;
         IF LENGTH(VAL(1))>8 THEN
              CALL ERR('INVALID OUTPUT DDNAME');
         OUTNAME=VAL(1);
         END;
    END;
 GO TO KEYWDLOOP;
 %PAGE;
 PROCESS:
 CLOSE FILE(SYSIN);
 ON UNDEFINEDFILE(OUT)
    BEGIN;
    PUT EDIT('DDCARD NOT PROVIDED OR INVALID FOR ',
      OUTNAME)(COL(1),A,A);
    STOP;
    END;
 IF OUTNAME='SYSPRINT' THEN
    DO;
    ON ENDPAGE(SYSPRINT) PUT EDIT(
 ' DATE   TIME   UIC CPU ASM PTR  AFC POOL COMM FIXD SQA  CMFX WT  SVC S
 RB USR OTH MP RU MP RU MP RU MP RU MP RU')
    (PAGE,A);
    SIGNAL ENDPAGE(SYSPRINT);
    OUTPUT=SYSPRINT;
    END;
 ELSE
    DO;
    OUTPUT=OUT;
    OPEN FILE(OUT) TITLE(OUTNAME);
    END;
 % SKIP(2);
 /* THE NEXT 4 STATEMENTS TO AND INCLUDING THE COMPLEX IF TEST       */
 /* ARE PROBABLY FAIRLY STANDARD FOR A POST PROCESSOR. ONE READS     */
 /* IN THE NEXT RECORD AND DETERMINES IF IT IS THE CORRECT TYPE,     */
 /* AND IS IN THE TIME RANGE SELECTED BY THE USER                    */
 ON ENDFILE(IN) GO TO FINN;
 PRLOOP:
 READ FILE(IN) SET(OMFRECPTR);
 IF OMF1ID^='OMF1' THEN GO TO PRLOOP;
 IF OMF1DATE>ENDDATE ×
    (OMF1DATE=ENDDATE & OMF1TIME>ENDHOUR)
    THEN GO TO FINN;
 IF OMF1DATE<STARTDATE ×
    (OMF1DATE=STARTDATE & OMF1TIME < STARTHOUR) ×
    OMF1TIME<EARLIEST ×
    OMF1TIME>LATEST
         THEN GO TO PRLOOP;
 /* FROM HERE ON YOU ARE ON YOUR OWN. GOOD LUCK.                     */
 COUNTS=0;
    DO I=1 TO SRBINTVL;
         SELECT;
              WHEN (FLAGS(I)&WAIT) CWAIT=CWAIT+1;
              WHEN (FLAGS(I)&SRB)  CSRB=CSRB+1;
              WHEN (FLAGS(I)&SVCMD) CSVC=CSVC+1;
              WHEN ((FLAGS(I)&'10000001'B)='10000001'B)
                 CUSER=CUSER+1;
              OTHERWISE COTHER=COTHER+1;
         END;
    END;
 PUT FILE(OUTPUT) EDIT( OMF1DATE,OMF1TIME,
    UICA,CPUA/00016,ASMQ,PTR,
    AFC,POOL,CFMCT,CNTFX,SQAFX,COMFX,
    CWAIT,CSRB,CSVC,CUSER,COTHER,
    (MIN(99,MPLT(I)),RUA(I) DO I=1 TO 5))
    (COL(1), P'99999',X(1),P'99.99.99', 4 F(4), 6 F(5),
     5 F(4), 10 F(3));
 GO TO PRLOOP;
 FINN: RETURN;
 %INCLUDE CNTLCRD;
 END;
./       ADD   NAME=OMFPST7
* PROCESS MACRO,MAR(2,72);
 /*OMFPST7: PRODUCE EQUIVALENT OF CPU COMMAND OUTPUT FROM OMF1 RECORD*/
 OMFPST7: PROC OPTIONS(MAIN REENTRANT) REORDER;
 /********************************************************************/
 /* PROCEDURE: OMFPST7                                               */
 /* FUNCTION:                                                        */
 /*            POST PROCESSOR ON  OMF1 RECORD (30 SECOND SUMMARY)    */
 /*              DISPLAY MARGINAL STATE PROBABILITIES BASED          */
 /*             FOR SPECIFIED TIME PERIODS.                          */
 /*                  OUTPUT JUST LIKE THAT OF THE CPU COMMAND        */
 /* ATTRIBUTES: NONE                                                 */
 /* EXTERNAL: NONE                                                   */
 /* INPUT:                                                           */
 /*     FILE SYSIN CONTAINS PARAMETERS IN OURMF FORMAT               */
 /*           START( YYDDD HHMMSS )  /* STARTING DATE AND TIME       */
 /*           END  ( YYCCC HHMMSS )  /* ENDING DATE AND TIME         */
 /*           HOURS( HHMMSS HHMMSS)  /* APPLICABLE HOURS DURING      */
 /*                                  /* THIS TIME PERIOD             */
 /*           BREAK(HHMMSS HHMMSS......) /* BREAK TIMES UP TO 15     */
 /* DEFAULTS: SUMMARIZE ALL RECORDS                                  */
 /* IF NO BREAKS ARE SPECIFIED, ONE CPU-TYPE OUTPUT WILL BE PRODUCED */
 /* FOR THE WHOLE RANGE SPECIFIED. OTHERWISE THERE WILL BE A CPU-TYP */
 /* OUTPUT EACH TIME A BREAK HOUR HAS BEEN PASSED.  HOURS MUST BE    */
 /* SPECIFIED IN ASCENDING ORDER. EXAMPLES ARE:                      */
 /* BREAK(000000)- CAUSES A NEW OUTPUT FOR EACH DAY IN THE REPORT.   */
 /* BREAK(010000 090000 170000)--                                    */
 /*       SEPARATE CPU REPORTS WILL BE PRODUCED FOR EACH             */
 /*       1AM-9AM,9AM-5PM,5PM-1AM PERIOD ENCOUNTERED IN THE DATA.    */
 /*                                                                  */
 /*  0  52.1  ×    0  9.3  ×   0  10.8  ×  IFEAAB    10.2            */
 /*  1   3.6  ×   10  4.2  ×   1  43.4  ×  GATE       5.6            */
 /*  2   0.0  ×   16  2.7  ×   2  33.0  ×  TAPECHRG   4.0            */
 /*  3   0.0  ×   26  1.6  ×   3   0.0  ×  QEDMAIN    3.8            */
 /*  4   0.0  ×    1  1.2  ×   4   0.0  ×  DATATEXT   3.8            */
 /*  5   1.2  ×   99  1.2  ×   5   0.0  ×  IEL0AC     3.7            */
 /*  6   1.9  ×   56  1.0  ×   6   3.9  ×  IEDTCAM1   3.4            */
 /*  7   0.0  ×   19  0.9  ×   7   0.0  ×  **GO       2.9            */
 /*  8  41.0  ×   20  0.8  ×   8   4.5  ×  IEFIIC     2.8            */
 /*  9   0.0  ×   60  0.8  ×   9   4.1  ×  IGIFORT    2.5            */
 %SKIP(2);
 /* THIS IS A TYPICAL OUTPUT FROM CPU. THE VALUES ARE DEFINED        */
 /* AS FOLLOWS:                                                      */
 /* CPU UTILIZATION - % OF THE SAMPLE WITH THE WAIT BIT OFF.         */
 /*    (NOTE: THIS IS THE ONLY % WHICH IS BASED ON THE WHOLE         */
 /*     SAMPLE. ALL OTHER PERCENTS ARE NOW BASED ON COUNT OF         */
 /*     NON-WAIT STATE PSW'S).                                       */
 /* SUPERVISOR STATE - % OF ACTIVE PSWS WITH THE PROBLEM BIT         */
 /*     OFF.                                                         */
 /* USER STATE - % OF ACTIVE PSWS WITH THE PROBLEM BIT ON AND        */
 /*     NON-SYSTEM KEY (>7).                                         */
 /* SUPERVISOR STATE IS FURTHER SUBDIVIDED INTO THE PERCENTAGES      */
 /* WHEN AN SVC WAS IN CONTROL IN TASK MODE, WHEN AN SRB IS          */
 /* IN CONTROL, AND OTHER (WHICH INCLUDES FOR EXAMPLE, MODESET       */
 /* TIME, INITIATOR TIME, JES AND TCAM TASK TIME IN SUPERVISOR       */
 /* STATE, ETC).                                                     */
 /* THE FOUR COLUMNS OF PERCENTAGES ARE SEPARATE AND TOTAL           */
 /*     VERTICALLY. YOU DO NOT READ THEM ACROSS THE ROWS,            */
 /*     BECAUSE THERE IS NO HORIZONTAL ASSOCAITION. ONLY             */
 /*     TEN ITEMS APPEAR IN EACH COLUMN, THOUGH IT IS EASY           */
 /*     TO MODIFY THE PROGRAM TO PRINT MORE. THE COLUMNS             */
 /*     WILL NOT TOTAL TO 100% OF COURSE IF THERE IS                 */
 /*     ANY OMITTED NON-ZERO VALUE.                                  */
 /* KEY - BREAKS DOWN ACTIVE TIME BY PROTECT KEY.                    */
 /* SVC - BREAKS DOWN ACTIVE TIME BY THE SVC NUMBER OF THE TEN       */
 /*       MOST ACTIVE SVCS.                                          */
 /* PG  - BREAKS DOWN ACTIVE TIME BY THE PERFORMANCE GROUP OF        */
 /*       THE ASID IN CONTROL.                                       */
 /* PGM - BREAKS DOWN ACTIVE TIME BY THE CDENAME POINTED TO BY       */
 /*       THE HIGHEST PRB ON THE RB QUEUE.                           */
 /* AUTHOR:  HOWARD GILBERT AND GARY BERGER                          */
 /*          175 WHITNEY AVE                                         */
 /*          NEW HAVEN, CT 06520                                     */
 /*          203 432-4080                                            */
 /* DISTRIBUTION                                                     */
 /*     THIS PROGRAM IS NOT RESTRICTED IN ANY WAY AND MAY BE         */
 /* MODIFIED OR DISTRIBUTED IN ANY MANNER AND FOR ANY PURPOSE.       */
 /* IT IS SUGGESTED THAT OTHER OURMF POST PROCESSORS CONSIDER        */
 /* COMPATIBLE SYNTAX AND PARAMETER SCANNING.                        */
 /*                                                                  */
 /* VERSION: AUGUST 31,1977                                          */
 /* PREPROCESSOR PARAMETERS GOVERNING VARIABLE DIMENSIONS */
 %DCL (SIZE,MODULUS) FIXED;
 /* SIZE AND MODULUS EFFECT THE ALLOCATION OF THE HASH TABLE         */
 /* FOR PROGRAM NAMES. THEY SHOULD BE CHOSEN BASED ON A GENEROUS     */
 /* ESTIMATE OF THE NUMBER OF UNIQUE PROGRAM NAMES. MODULUS MUST     */
 /* BE A PRIME NUMBER. IF MORE THAN 'SIZE' UNIQUE MODULE NAMES ARE   */
 /* ENCOUNTERED, THE ERROR CONDITION IS RAISED.                      */
 %SIZE=2000;
 %MODULUS=503;
 %PAGE;
 /* THE FOLLOWING STRUCTURE WILL CONTAIN INFORMATION DERIVED FROM    */
 /* PARSING THE SYSIN PARAMETER CARDS. THE INITIAL VALUES ARE        */
 /* THE DEFAULTS FOR EACH PARAMETER                                  */
 DCL 1 OPTIONS,
         5 STARTDATE FIXED DEC(7) INIT(0),
         5 STARTHOUR FIXED DEC(7) INIT(0),
         5 ENDDATE FIXED DEC(7) INIT(99365),
         5 ENDHOUR FIXED DEC(7) INIT(240000),
         5 EARLIEST FIXED DEC(7) INIT(0),
         5 LATEST FIXED DEC(7) INIT(240000),
         5 #BREAKS FIXED BIN INIT(0),
         5 BKARRAY(20) FIXED DEC(7);
 %SKIP(2);
 %PAGE;
 /* NOW THE THREE FORMAL INCLUDE STATEMENTS FOR THE COMMON           */
 /* POST-PROCESSOR DEFINITIONS.                                      */
 /*   % INCLUDE STATGLBL;                                            */
 /*          TO DEFINE THE DIMENSIONS OF VARIOUS ARRAYS IN THE       */
 /*          OURMF RECORDS.                                          */
 /*   % INCLUDE YCCSTART;                                            */
 /*          TO SET THE DEFAULT RANGE AND PREPROCESSOR VARIABLE      */
 /*          DEFINITIONS REQUIRED BY SOME CONVERTED PLS MACROS.      */
 /*          OMFPST7 DOES NOT USE CONVERTED PLS, BUT IT IS A         */
 /*          GOOD HABIT TO INCLUDE YCCSTART ANYWAY.                  */
 /*   % INCLUDE OURMFDEF;                                            */
 /*          TO DEFINE THE THREE OURMF RECORD TYPES.                 */
 % INCLUDE STATGLBL;
 % INCLUDE YCCSTART;
 % INCLUDE OURMFDEF;
 %PAGE;
 /* NOW FOR SOME LOCALLY DEFINED VARIABLES. 'MAXVALS' AND            */
 /* 'WORDS' ARE USED TO VALIDITY CHECK THE INPUT PARAMETERS          */
 /* AND GENERATE ERROR MESSAGES.                                     */
 DCL MAXVALS(4) FIXED BIN INIT(2,2,2,15);
 DCL WORDS(4) CHAR(8) INIT('START','END','HOURS','BREAK');
 DCL IN INPUT FILE RECORD ENV(VB TOTAL);
 %SKIP(2);
 /* THE FOLLOWING BUCKETS COLLECT THE VARIOUS STATE COUNTS FOR       */
 /* USE IN CALCULATING VARIOUS PERCENTAGES.                          */
  DCL 1 ACCUM,  /* STRUCTURE CONTAINS ACCUMED INFO. ZEROED AT BREAK  */
   2 KEYS(0:15) FIXED BIN INIT((16) 0),   /* BY PROTECT KEY          */
   2 (PBLMCOUNT,                          /* PROBLEM STATE           */
         SAMPLE,                          /* SAMPLE SIZE             */
         ACTIVES,                         /* NON-WAIT                */
         USERCOUNT,                       /* PBLM & KEY>7            */
         TCBRDYS)                         /* COUNT READY TCBS        */
         FIXED BIN(31) INIT(0),           /*                         */
   2 PG(0:10) FIXED BIN INIT((11) 0),     /* BY PERFORM              */
   2 SVCS(0:256) FIXED BIN INIT((257) 0), /* BY SVC NUMBER           */
   2 (TENSVC,TENPGM) (0:9) FIXED BIN,     /* TOP 10                  */
   2 SUP,                                 /* SUP BREAKDOWN           */
        3 SVCST FIXED BIN INIT(0),        /* SVC IN TCB              */
        3 SRBST FIXED BIN INIT(0),        /* SRB                     */
        3 OTHER FIXED BIN INIT(0);        /* ALL ELSE                */
 %SKIP(5);
 /* MISCELANEOUS DECLARATIONS                                        */
 DCL (ABS,ADDR,BOOL,MOD,NULL,STRING,TIME,UNSPEC,
       SUBSTR,CHAR,MAX,VERIFY,
     MIN,HBOUND,PLIRETV) BUILTIN;
 DCL SYSPRINT FILE OUTPUT STREAM;
 DCL (I,J,II) FIXED BIN;
 DCL (LASTDATE ,  /* DATE OF LAST RECORD PROCESSED */
      LASTTIME ,  /* TIME OF LAST RECORD PROCESSED */
      FIRSTTIME ,  /* TIME OF FIRST SAMPLE */
      FIRSTDATE ,  /* DATE OF FIRST SAMPLE */
      NEXTDATE ,  /* DATE OF NEXT BREAK */
      NEXTTIME )  /* TIME OF NEXT BREAK */
      FIXED DEC(7) INIT(0);
 DCL FTEMP FIXED DEC(7);     /* JUST A TEMPORARY */
 DCL TITLELINE CHAR(100)  VAR; /* TO APPEAR AT TOP OF PAGE */
 %SKIP(5);
  /* HASH VARIABLES                                                  */
 /* TO EFFICIENTLY TABULATE THE PROGRAM NAMES, A HASHING             */
 /* TECHNIQUE IS USED FOR TABLE LOOKUP. THE EIGHT BYTE NAME          */
 /* IS DIVIDED UP INTO 16 BIT PIECES WHICH ARE EXCLUSIVE             */
 /* OR'D TOGETHER, THEN DIVIDED BY A PRIME NUMBER AND THE            */
 /* REMAINDER IS USED TO INDEX INTO 'HASHTAB'. THE ENTRY             */
 /* IN 'HASHTAB' POINTS TO THE FIRST ENTRY IN THE 'HASHBUCKET'       */
 /* STRUCTURE WHICH HASHED TO THAT INDEX, AND SUBSEQUENT             */
 /* NAMES WHICH HASH TO THE SAME NAME ARE CHAINED OFF                */
 /* HASHBUCKET.HASHCHAIN.                                            */
 DCL 1 HASHTAB(0:MODULUS) FIXED BIN INIT((MODULUS) -1);
 DCL NEXTBUCKET FIXED BIN INIT(-1);
 DCL 1 HASHBUCKET(0:SIZE),
   2 HASHNAME CHAR(8),
   2 HASHCHAIN FIXED BIN,
   2 HASHCOUNT FIXED BIN;
 DCL HKEY CHAR(8);
 DCL KEYBITS(4) BIT(16) ALIGNED;
 DCL INDX FIXED BIN;
 %PAGE;
 OPEN FILE(SYSPRINT) LINESIZE(132);
 %SKIP(2);
 /* THIS IS THE PARAMETER INPUT PARSE BLOCK. IT USES SUBROUTINES     */
 /* INCLUDED FROM THE 'CNTLCRD' MEMBER. MOST POST PROCESSORS WILL    */
 /* PROBABLY REQUIRE THE START, END, AND HOURS KEYWORDS. ADDITIONAL  */
 /* KEYWORDS CAN BE EASILY ADDED TO THE END OF THE BLOCK REPLACING   */
 /* THE 'BREAK ' KEYWORD.                                            */
 % SKIP;
 ON UNDEFINEDFILE(SYSIN)GO TO PROCESS;
 ON ENDFILE(SYSIN) GO TO PROCESS;
 ON CONVERSION CALL ERR('INVALID NUMBER IN '××WORDS(I));
 KEYWDLOOP: CALL KEYWORD;
 I=INDOX('START END HOURS BREAK',KEY);
 IF NVALS>MAXVALS(I) THEN CALL ERR('TOO MANY VALUES FOR '××WORDS(I));
 SELECT (I);
    WHEN (1)
         DO;
         STARTDATE=VAL(1);
         IF NVALS=2 THEN STARTHOUR=VAL(2);
         END;
    WHEN (2)
         DO;
         ENDDATE=VAL(1);
         IF NVALS=2 THEN ENDHOUR=VAL(2);
         END;
    WHEN (3)
         DO;
         EARLIEST=VAL(1);
         IF NVALS=2 THEN LATEST=VAL(2);
         END;
    WHEN (4)
         DO;
         FTEMP=0;  /* REMEMBER LAST TIME */
         #BREAKS=NVALS;
         DO J=1 TO #BREAKS;
            BKARRAY(J)=VAL(J);
            IF BKARRAY(J)<FTEMP THEN CALL ERR(
                 'BREAKS NOT GIVEN IN ASCENDING ORDER');
            FTEMP=BKARRAY(J);
            END;
         END;
    END;
 GO TO KEYWDLOOP;
 %PAGE;
 PROCESS:
 CLOSE FILE(SYSIN);
 REVERT CONVERSION;
 % SKIP(2);
 /* COMPOSE TITLE LINE */
 TITLELINE='CPU REPORT FROM OMF TYPE1 DATA-';
 IF EARLIEST=0 & LATEST=240000 /* I.E. ALL DAY */
    THEN TITLELINE=TITLELINE××'ALL SAMPLES INCLUDED';
    ELSE TITLELINE=TITLELINE××'ONLY SAMPLES BETWEEN '××
         TMECHAR(EARLIEST)××' AND '××TMECHAR(LATEST)×× ' INCLUDED';
 %SKIP;
 /* THE NEXT 4 STATEMENTS TO AND INCLUDING THE COMPLEX IF TEST       */
 /* ARE PROBABLY FAIRLY STANDARD FOR A POST PROCESSOR. ONE READS     */
 /* IN THE NEXT RECORD AND DETERMINES IF IT IS THE CORRECT TYPE,     */
 /* AND IS IN THE TIME RANGE SELECTED BY THE USER                    */
 ON ENDFILE(IN) GO TO FINN;
 HASHNAME='********';
 HASHCOUNT=0;
 PRLOOP:
 READ FILE(IN) SET(OMFRECPTR);
 IF OMF1ID^='OMF1' THEN GO TO PRLOOP;
 IF OMF1DATE>ENDDATE ×
    (OMF1DATE=ENDDATE & OMF1TIME>ENDHOUR)
    THEN GO TO FINN;
 IF OMF1DATE<STARTDATE ×
    (OMF1DATE=STARTDATE & OMF1TIME < STARTHOUR) ×
    OMF1TIME<EARLIEST ×
    OMF1TIME>LATEST
         THEN GO TO PRLOOP;
 %SKIP(2);
 /* IF BREAKS WERE REQUESTED AND WE HAVE GONE OVER A BREAK
    TIME, PRINT OUT ACCUMULATED DATA IF ANY AND REINITIALIZE */
 %SKIP;
 IF #BREAKS>0
    THEN IF (OMF1DATE>NEXTDATE) ×
            (OMF1DATE=NEXTDATE & OMF1TIME>NEXTTIME)
    THEN DO;  /* HAVE HIT A BREAK */
       IF SAMPLE>0   /* IF HAVE ANY ACCUMULATED DATA */
          THEN DO;
               CALL PRINTOUT;
               CALL REINIT;
               END;
 %SKIP;
       /* DETERMINE NEXTDATE,NEXTTIME */
        NEXT:
         DO J=1 TO #BREAKS;
            IF OMF1TIME<BKARRAY(J)
               THEN DO;
                    NEXTTIME=BKARRAY(J);
                    NEXTDATE=OMF1DATE;
                    LEAVE NEXT;
                    END;
         END NEXT;
        IF J>#BREAKS THEN DO;
           NEXTTIME=BKARRAY(1);
           NEXTDATE=OMF1DATE+1;
           END;
     END;
 % SKIP(2);
 DO II=1 TO SRBINTVL;
 INITIAL:DO;
 IF FLAGS(II)='0'B & ADDRESS(II)=0 THEN LEAVE INITIAL;
       SAMPLE=SAMPLE+1;
      IF SAMPLE=1 THEN DO;
         FIRSTTIME=OMF1TIME;
         FIRSTDATE=OMF1DATE;
         END;
       IF FLAGS(II)&WAIT THEN; ELSE
 ACTIVE:  DO;
          ACTIVES=ACTIVES+1;
          J=FLAGS(II)/16;
          HKEY=CDENAME(II);
          KEYS(J)=KEYS(J)+1;
          TCBRDYS=TCBRDYS+TCBRDY(II);
          IF ABS(PERFORM(II))>10 THEN PG(10)=PG(10)+1;
          ELSE PG(PERFORM(II))=PG(PERFORM(II))+1;
          IF FLAGS(II)&SVCMD THEN SVCS(SVC(II))=SVCS(SVC(II))+1;
          IF FLAGS(II)&PBLM THEN
             DO;
             PBLMCOUNT=PBLMCOUNT+1;
             IF FLAGS(II)&'1'B THEN USERCOUNT=USERCOUNT+1;
             END;
          ELSE
             IF FLAGS(II)& SRB THEN SRBST=SRBST+1;
             ELSE IF FLAGS(II)& SVCMD THEN SVCST=SVCST+1;
             ELSE OTHER=OTHER+1;
          IF CDENAME(II)^=' ' THEN
 HASH:       DO;
             STRING(KEYBITS)=UNSPEC(HKEY);
             KEYBITS(1)=BOOL(BOOL(KEYBITS(1),KEYBITS(2),'0110'B),
                BOOL(KEYBITS(1),KEYBITS(2),'0110'B),'0110'B);
             INDX=MOD(KEYBITS(1),MODULUS);
 OLDENTRY:      DO;
                IF HASHTAB(INDX)<0 THEN
                   DO;
                   NEXTBUCKET=NEXTBUCKET+1;
                   IF NEXTBUCKET>SIZE THEN SIGNAL ERROR;
                   HASHTAB(INDX)=NEXTBUCKET;
                   INDX=NEXTBUCKET;
                   LEAVE OLDENTRY;
                   END;
                ELSE
                   DO   INDX=HASHTAB(  INDX)
                      REPEAT HASHCHAIN(INDX)
                      UNTIL(HASHCHAIN(INDX)=0);
                   IF HKEY=HASHNAME(INDX) THEN
                      DO;
                      HASHCOUNT(INDX)=HASHCOUNT(INDX)+1;
                      LEAVE HASH;
                      END;
                   END;
                NEXTBUCKET=NEXTBUCKET+1;
                IF NEXTBUCKET>SIZE THEN SIGNAL ERROR;
                HASHCHAIN(INDX)=NEXTBUCKET;
                INDX=NEXTBUCKET;
                END OLDENTRY;
             HASHNAME(INDX)=HKEY;
             HASHCHAIN(INDX)=0;
             HASHCOUNT(INDX)=1;
             END HASH;
          END ACTIVE;
       END INITIAL;
    END;
 LASTTIME=OMF1TIME;
 LASTDATE=OMF1DATE;
 GO TO PRLOOP;
 FINN: IF SAMPLE>0 THEN CALL PRINTOUT;
 RETURN;
 % PAGE;
 PRINTOUT: PROC;
 PUT PAGE EDIT(TITLELINE)(A);
 PUT SKIP(2) EDIT(
    'FIRST DATE',DTECHAR(FIRSTDATE),'FIRST TIME',TMECHAR(FIRSTTIME),
    'LAST DATE',DTECHAR(LASTDATE),'LAST TIME',TMECHAR(LASTTIME),
   'CPU UTILIZATION',ACTIVES*1000/SAMPLE,'SAMPLE SIZE',SAMPLE,
 'SUPERVISOR STATE',(ACTIVES-PBLMCOUNT)*1000/ACTIVES,
 '# PGM NAMES',NEXTBUCKET,
 'USERSTATE',USERCOUNT*1000/ACTIVES,'AVG READY TCBS',TCBRDYS*10/ACTIVES)
 (COL(1),A(18),A,COL(35),A(18),A,
  COL(1),A(18),A,COL(35),A(18),A,
 COL(1),A(18),P'ZZ9.9',
   COL(35),A(18),E(10,3,4),
  COL(1),A(18),P'ZZ9.9',
 COL(35),A(18),P'9999',
  COL(1),A(18),P'ZZ9.9',COL(35),A(18),P'ZZ9.9');
 PUT EDIT('SUPERVISOR STATE IS  SVC:',SVCST*1000/ACTIVES,
 '   SRB:',SRBST*1000/ACTIVES, '   OTHER:',OTHER*1000/ACTIVES)
 (COL(1), (3) (A,P'ZZ9.9'));
 CALL FIND10(TENSVC,SVCS);
 CALL FIND10(TENPGM,HASHCOUNT);
 PUT EDIT('KEY  PCT  ×  SVC  PCT  ×   PG  PCT  ×  PGM      PCT  ',
 (I,KEYS(I)*1000/ACTIVES,'×',TENSVC(I),SVCS(TENSVC(I))*1000/ACTIVES,'×',
 I,PG(I)*1000/ACTIVES,'×',HASHNAME(TENPGM(I)),HASHCOUNT(TENPGM(I))
 *1000/ACTIVES DO I=0 TO 9))(COL(1),A, (10)
 (COL(1),F(2),X(2),P'Z9.9',X(2),A(1),X(2),F(3),X(1),P'Z9.9',X(2),A(1),
 X(2),F(2),X(2),P'Z9.9',X(2),A(1),X(2),A(8),X(2),P'Z9.9'));
 END PRINTOUT;
 %SKIP(2);
 REINIT: PROC;
 /* ROUTINE CALLED TO REINITIALIZE BUCKETS ETC
   WHEN HAVE HIT A BREAK */
 ACCUM=0;
 HASHNAME='********';
 HASHCOUNT=0;
 HASHTAB=-1;
 NEXTBUCKET=-1;
 END REINIT;
 %PAGE;
 FIND10: PROC(TEN,SELECT);
 /* INTERNAL PROCEDURE . LOCATES THE INDICES OF THE                  */
 /* TEN LARGEST VALUES IN A FIXED BIN(15) ARRAY. USED TO             */
 /* SELECT WHICH SVC AND PGM NAMES TO DISPLAY.                       */
 DCL (TEN(0:9) CONNECTED,SELECT(*)) FIXED BIN;
 DCL (I,J,K,N) FIXED BIN INIT(-1);
    DO I=0 TO HBOUND(SELECT,1);
 SCAN:
      DO;
         DO J=0 TO N;
         IF SELECT(TEN(J))<SELECT(I) THEN
            DO;
            N=MIN(9,N+1);
               DO K=N TO J+1 BY -1;
               TEN(K)=TEN(K-1);
               END;
            TEN(J)=I;
            LEAVE SCAN;
            END;
         END;
      IF N<9 THEN
         DO;
         N=N+1;
         TEN(N)=I;
         END;
      END;
    END;
 END FIND10;
 %SKIP;
 DTECHAR: PROC(DTE) RETURNS(CHAR(6));
 DCL DTE FIXED DEC(7);
 DCL PIC PIC'99/999';
 PIC=DTE;
 RETURN(CHAR(PIC));
 END DTECHAR;
 %SKIP;
*PROCESS F(I),M,NIS,X(S),STMT,GS,OFFSET,OPT(2),MAR(2,72);
   /* OUR-MF, THE ROLL-YOUR-OWN MEASUREMENT FACILITY*/
 OURMF: PROC(PARM) OPTIONS(MAIN );
 /********************************************************************/
 /* PROCEDURE:    OURMF                                              */
 /* FUNCTION:     WRITE A TRACE DATASET FROM THE DATA IN STATDIE'S   */
 /*               PAGABLE BUFFERS, COLLECT PAGING AND SWAP COUNTS,   */
 /*               AND OPTIONALLY COLLECT WORKLOAD ACTIVITY           */
 /* LANGUAGE:     PLIX  RELEASE 3.0                                  */
 /* SYSTEM:       MVS RELEASE 3.7 WITH SUPERVISOR 2 SU               */
 /* ATTRIBUTES:   AUTHORIZED                                         */
 /* EXTERNAL:     CALLS ENTRY POINTS OF PLIMISC.                     */
 /*               STATDIE MUST BE INITIALIZED AND RUNNING.           */
 /* MACROS:       DYNALLOC,IHAPSA,CVT,IHALCCA,IRARMCT,IRARMCA,IHAPVT */
 /* VERSION:      MAY 1977                                           */
 /* AUTHOR:       HOWARD GILBERT                                     */
 /*               YALE COMPUTER CENTER                               */
 /*               175 WHITNEY AVE                                    */
 /*               NEW HAVEN, CT. 06520                               */
 /*               203 432-4080                                       */
 /****************************************************************   */
 /* SYSTEM INTEGRITY CONSIDERATIONS:                                 */
 /*    THIS MODULE IS APF AUTHORIZED ONLY TO PERMIT IT TO USE        */
 /* THE AUTHORIZED BITS IN DYNAMIC ALLOCATION TO WAIT FOR A DEVICE   */
 /* IF ALL YOUR TAPE DRIVES ARE FULL WHEN IT IS TIME TO DUMP         */
 /* TO TAPE, AND TO PERMIT USE OF THE SMF WRITING SVC.               */
 /* THERE IS NO KEY ZERO CODE IN THIS MODULE OR IN ANY OF ITS        */
 /* SUBROUTINES.                                                     */
 /*****************************************************************  */
 /* INSTALLATION NOTES:                                              */
 /* COMPLIER: PLIX R3.0 OR ABOVE                                     */
 /* COMPILER PARMS: SEE *PROCESS CARD                                */
 /* COMPILER SYSLIB: SYS1.OURMFSRC                                   */
 /* LINKEDIT PARMS: NOT REENTRANT                                    */
 /* LINKEDIT SYSLIB: PLIBASE                                         */
 /*     (ALSO REQUIRES PLIMISC, CNTLOMF, AND S99FAIL SUBROUTINES)    */
 /* TARGET LIBRARY: LINKLIB (SUGGESTED)                              */
 /* ADDITIONAL NOTES:                                                */
 /* PRIOR TO ACTIVATION YOU MUST ALLOCATE THE DISK TRACE DATASET     */
 /* AND INSTALL A CATALOGED PROCEDURE POINTING TO THAT DATASET       */
 /* IN YOUR STARTED TASK PROCLIB. A PARAMETER DATASET SHOULD         */
 /* BE PROVIDED, WE SUGGEST YOU USE 'SYS1.PARMLIB(OMFPRM00)'         */
 /* IF THE TAPE SPILL FILE IS NOT CATALOGED WHEN OURMF FIRST         */
 /* DUMPS THE DISK FILE TO TAPE, IT WILL MAKE A NON-VOLUME-SPECIFIC  */
 /* PRIVATE TAPE REQUEST AND CATALOG THE DATASET UNDER THE NAME      */
 /* SPECIFIED IN THE PARAMETERS                                      */
 /****************************************************************** */
 /* OPERATIONS:                                                      */
 /*   // EXEC PGM=OURMF,TIME=1440                                    */
 /*   //OUT DD DSN=LOCAL.DISK.DATASET.NAME,DISP=MOD                  */
 /*   //OLD DD DSN=LOCAL.DISK.DATASET.NAME,DISP=OLD                  */
 /*   //SYSIN DD DSN=SYS1.PARMLIB(OMFPRM00),DISP=SHR,FREE=CLOSE      */
 /* OURMF IS GENERALLY RUN AS A STARTED TASK. IT SHOULD BE STARTED   */
 /* AFTER STATDIE AND IF WORKLOAD REPORTING IS REQUIRED, AFTER MF1.  */
 /* ALTHOUGH IT IS POSSIBLE TO CHOOSE OTHER REPORTING PERIODS,       */
 /* IT IS HIGHLY RECOMMENDED THAT 'INTERVAL' BE '15' IN BOTH         */
 /* OURMF AND MF1, SO THAT REPORTING IS DONE EVERY 15 MINUTES.       */
 /****************************************************************   */
 %PAGE;
  /*              P A R A M E T E R S                                */
 % INCLUDE STATGLBL;
  %PAGE;
  /*  NOW TO DECLARE MAJOR SYSTEM CONTROL BLOCKS                     */
 % INCLUDE YCCSTART;
 % DCL (RMCTPTR,RMCAPTR,PVTPTR,LCCAPTR) CHAR;
 % RMCTPTR='CVTOPCTP';
 % RMCAPTR='RMCTRMCA';
 % PVTPTR='CVTPVTP';
 % LCCAPTR='PSALCCAV';
   /* % INCLUDE IHAPSA            */
   /* % INCLUDE CVT               */
   /* % INCLUDE IHALCCA           */
   /* % INCLUDE IRARMCT           */
   /* % INCLUDE IRARMCA           */
   /* % INCLUDE IHAPVT            */
 % NOPRINT;
 % INCLUDE IHAPSA;
 % INCLUDE CVT;
 % INCLUDE IHALCCA;
 % INCLUDE IRARMCT;
 % INCLUDE IRARMCA;
 % INCLUDE IHAPVT;
 % PRINT;
 % INCLUDE STDE;
 DCL 1 STDE2 BASED(STDEPTR),
     2 FILL CHAR(176),
     2 STDENBUF BIT(8) ALIGNED;
 DCL PGBUF CHAR(4096) BASED(PGBUFPTR);
 DCL STATADDR PTR;
 DCL WAMTPTR PTR  BASED(STATADDR);
 DCL WAMTBUF CHAR(4096) BASED(WAMTPTR);
 DCL 1 WAMT BASED(WAMTPTR),
 % INCLUDE IRAWAMT;
  %SKIP(5);
  /*  DECLARE LOCAL VARIABLES                                  */
 DCL PARM CHAR(100) VAR;
 DCL OUT RECORD OUTPUT ENV(VB TOTAL BLKSIZE(6008) RECSIZE(6000));
 DCL DLY FIXED BIN(31) ;
 DCL IOBUF CHAR(4096) VAR;
  DCL (LASTBUF,NEXTBUF,IBUF) FIXED BIN(8);
 DCL WRITTEN FIXED BIN INIT(0);
 DCL LASTTOC CHAR(8) INIT(' ');
 DCL 1 LASTIME,  2 (LAST1,LAST2) FIXED BIN(31);
 DCL 1 THISTIME, 2 (THIS1,THIS2) FIXED BIN(31);
 DCL MODIFY CHAR(256) VAR;
 DCL PTRIN ENTRY(PTR) RETURNS(FIXED BIN(31));
 DCL LOADPTR ENTRY(CHAR(8),PTR) OPTIONS(ASM INTER RETCODE);
 DCL PTROUT ENTRY(FIXED BIN(31)) RETURNS(PTR) REDUCIBLE;
 DCL SDL ENTRY(CHAR(8),CHAR(8));
 DCL STCK ENTRY(* );
 DCL TODCNVT ENTRY(*) RETURNS(CHAR(24));
 DCL COMWAIT ENTRY(FIXED BIN(31), CHAR(256) VAR)
    RETURNS(FIXED BIN);
 DCL CNTLOMF ENTRY;
    DCL 1 OPTIONS ,               /* SYSIN PARAMETERS */
         2 INTERVAL FIXED BIN INIT(15),
         2 SMF BIT ALIGNED INIT('0'B),
         2 CPUSUM BIT ALIGNED INIT('0'B),
         2 DISKSPACE FIXED BIN INIT(300),
         2 TAPEDSN CHAR(44) VAR INIT('SYS1.OURMF.TAPE'),
         2 TAPEUNIT CHAR(6) VAR INIT('TAPE');
 %PAGE;
 DCL 1 OMF3,
    2 OMF3ID   CHAR(4) INIT('OMF3'),    /* RECORD ID FIELD         */
    2 TIMESTAMP CHAR(8),           /* TIME MOVED TO BUFFER    */
    2 RDW,                               /* SORTA RECORD DESCRIPTOR */
        3 TYPE BIT(8) INIT('00000101'),  /* SUBFIELD TYPE           */
        3 ITEM BIT(8) INIT('00000000'),  /* ITEM LENGTH (UNUSED)    */
        3 LEN FIXED BIN INIT(100),         /* TOTAL SUBFIELD LENGTH   */
    2 LCCAWTIM CHAR(8),                  /* ACCUMULATED WAIT TIME   */
    2 PAGINGINFO,
     3 PVTNPIN  FIXED(31),          /* NUMBER OF PAGES PAGED IN,
                                       EXCLUDING SWAP-INS AND VIO
                                       PAGE-INS.                     */
     3 PVTNPOUT FIXED(31),          /* NUMBER OF PAGES PAGED OUT,
                                       EXCLUDING SWAP-OUTS AND VIO
                                       PAGE-OUTS                     */
     3 PVTVAMI  FIXED(31),          /* NUMBER OF VIO PAGE-INS
                                       EXCLUDING SWAP                */
     3 PVTVAMO  FIXED(31),          /* NUMBER OF VIO PAGE-OUTS
                                       EXCLUDING SWAP                */
     3 PVTVAMR  FIXED(31),          /* NUMBER OF VIO RECLAIMS        */
     3 PVTSPIN  FIXED(31),          /* NUMBER OF PAGES SWAPPED-IN    */
     3 PVTSPOUT FIXED(31),          /* NUMBER OF PAGES SWAPPED-OUT   */
     3 PVTNPREC FIXED(31),          /* NUMBER OF PAGES RECLAIMED,
                                       EXCLUDING SWAP AND VIO RECLAIMS
                                                                    */
     3 PVTNSWPS FIXED(31),          /* NUMBER OF SUCCESSFUL SWAP-INS */
     3 PVTCAIN  FIXED(31),          /* NUMBER OF COMMON AREA PAGE-INS
                                                                    */
     3 PVTCAOUT FIXED(31),          /* NUMBER OF COMMON AREA
                                       PAGE OUTS                    */
     3 PVTCAREC FIXED(31),          /* NUMBER OF RECLAIMS OF COMMON
                                       AREA PAGES                   */
     3 PVTSPREC FIXED(31),          /* NUMBER OF PRIVATE AREA PAGEABLE
                                       PAGES RECLAIMED ACROSS A SWAP
                                                                    */
    2 SWAPINFO ,
        3 RMCATOSC FIXED(31),     /* TERMINAL OUTPUT SWAP COUNT     */
        3 RMCATISC FIXED(31),     /* TERMINAL  INPUT SWAP COUNT     */
        3 RMCALWSC FIXED(31),     /* LONG WAIT SWAP COUNT           */
        3 RMCAXSSC FIXED(31),     /* AUT STOR SHORTAGE SWAP COUNT   */
        3 RMCARSSC FIXED(31),     /* REAL STOR SHORTAGE SWAP COUNT  */
        3 RMCADWSC FIXED(31),     /* DETECTED WAIT SWAP COUNT       */
        3 RMCARQSC FIXED(31),     /* REQSWAP SWAP COUNT             */
        3 RMCANQSC FIXED(31),     /* CAP ENQ EXCHANGE SWAP COUNT    */
        3 RMCAEXSC FIXED(31),     /* CAP EXCHANGE BASED ON RECOMM.
                                       VALUE SWAP COUNT             */
        3 RMCAUSSC FIXED(31);     /* CAP UNILATERAL SWAP OUT COUNT  */
 DCL 1 HOLDMF3,
    2 LCCAWTIM CHAR(8),
    2 PAGINGINFO,
        3 PVTNPIN  FIXED(31),
        3 PVTNPOUT FIXED(31),
        3 PVTVAMI  FIXED(31),
        3 PVTVAMO  FIXED(31),
        3 PVTVAMR  FIXED(31),
        3 PVTSPIN  FIXED(31),
        3 PVTSPOUT FIXED(31),
        3 PVTNPREC FIXED(31),
        3 PVTNSWPS FIXED(31),
        3 PVTCAIN  FIXED(31),
        3 PVTCAOUT FIXED(31),
        3 PVTCAREC FIXED(31),
        3 PVTSPREC FIXED(31),
    2 SWAPINFO ,
        3 RMCATOSC FIXED(31),
        3 RMCATISC FIXED(31),
        3 RMCALWSC FIXED(31),
        3 RMCAXSSC FIXED(31),
        3 RMCARSSC FIXED(31),
        3 RMCADWSC FIXED(31),
        3 RMCARQSC FIXED(31),
        3 RMCANQSC FIXED(31),
        3 RMCAEXSC FIXED(31),
        3 RMCAUSSC FIXED(31);
  %SKIP(5);
  /*  INCLUDE PREPROCESSOR PROCEDURES (A COMPILER RESTRICTION    */
  /* REQUIRES THEY BE INCLUDED BEFORE BEING USED.                    */
 %INCLUDE DYNALLOC;
 %PAGE;
 /* INITIALIZATION:                                                  */
 /* CALL LOADPTR TO LOCATE THE VARIOUS STATDIE ENTRY POINTS          */
 /*   AND  VERIFY THAT STATDIE HAS BEEN ACTIVATED. SINCE             */
 /*   IT IS FREQUENTLY DESIRABLE TO START STATDIE, MF1, AND          */
 /*   OURMF ALL DURING THE IPL PROCEDURE, THIS TEST IS               */
 /*   PRECEEDED BY A ONE-MINUTE DELAY TO ALLOW THE OTHER             */
 /*   STARTED TASKS A HEAD START AND INSURE THE PREREQUISTE          */
 /*   CONTROL BLOCKS ARE INITIALIZED.                                */
 /* CALL THE EMPTY INTERNAL ENTRY POINT SO DATA LEFT IN THE          */
 /*   DISK DATASET AFTER A CANCEL OR CRASH IS SPILLED TO             */
 /*   TAPE.                                                          */
 /* SAVE THE CURRENT VALUES OF VARIOUS CONTROL BLOCK FIELDS          */
 /*   TO ALLOW DIFFERENCE CALCULATIONS WHEN THE FIRST                */
 /*   RECORDS ARE WRITTEN.                                           */
 DELAY(60000) /*WAIT A MINUTE*/;
 CALL LOADPTR('STATSTDE',STDEPTR);
 IF PLIRETC>0 THEN DO;
     DISPLAY('OUR-MF CANNOT LOCATE STATDIE LOAD MODULE');
     STOP;
     END;
 IF STDEFLGS='0'B THEN
     DO;
     DISPLAY('OUR-MF TERMINATED -- STATDIE NOT RUNNING');
     STOP;
     END;
 CALL LOADPTR('STATWAMT',STATADDR);
 CALL CNTLOMF(OPTIONS);
 LASTBUF=STDENBUF;
 CALL EMPTY;
 HOLDMF3.LCCAWTIM=LCCA.LCCAWTIM;
 HOLDMF3.PAGINGINFO=PVT, BY NAME;
 HOLDMF3.SWAPINFO=RMCASRC;
 CALL STCK(LASTIME);
 %SKIP(5);
 /* THIS IS THE MAIN PROCESSING SECTION. THIS LOOP IS REPEATED       */
 /* EVERY 'INTERVAL' MINUTES. IT PERFORMS THE FOLLOWING FUNCTIONS:   */
 /* 1) THE DELAY INTERVAL IS CALCULATED BASED ON A CURRENT TIME      */
 /*    STAMP AND ONE FROM THE IMMEDIATELY PRECEEDING WAKE UP         */
 /*    TIME. IF EMPTY HAS BEEN CALLED IN THE PREVIOUS PERIOD,        */
 /*    AND IT WAS NECESSARY TO WAIT FOR A TAPE, THEN A FIXED         */
 /*    WAIT TIME WOULD PRODUCE A LONG GAP BETWEEN THE LAST AND       */
 /*    NEXT RECORDING PERIOD.                                        */
 /* 2) COMWAIT IS CALLED TO SWAP US OUT UNTIL THE INTERVAL ENDS      */
 /*    OR THE OPERATOR ISSUES A 'P OURMF'.                           */
 /* 3) THE PAGEABLE BUFFERS WHICH WERE FILLED SINCE THE LAST         */
 /*    RECORDING INTERVAL ARE WRITTEN OUT TO DISK AS 'OMF1'          */
 /*    RECORDS. IT IS NECESSARY TO CONVERT THE STCK FORMAT           */
 /*    TIMESTAMP TO DATE AND HOUR FORMAT.                            */
 /* 4) IF THERE IS A WAMT IN THE WAMTBUFFER, AND IF IT IS NOT        */
 /*    THE SAME ONE WRITTEN LAST TIME, THEN IT IS CONVERTED          */
 /*    TO AN 'OMF2' RECORD AND WRITTEN TO DISK.                      */
 /* 5) A FEW 'BY NAME' STRUCTURE OPERATIONS CALCULATE THE            */
 /*    PAGING EVENT COUNTS, SWAP REASON COUNTS, AND WAIT TIME        */
 /*   FROM THE SYSTEM CONTROL BLOCKS AND THE SAVED VALUES            */
 /*   FROM THE PREVIOUS WAKE UP PERIOD.                              */
 /* 6) THE CURRENT VALUES OF THESE COUNTERS ARE SAVED FOR THE        */
 /*    NEXT PERIOD. IF THE DISK DATASET IS NOW FULL, CALL            */
 /*    EMPTY TO SPILL IT TO TAPE.                                    */
 DOITAGAIN:
 CALL STCK(THISTIME);
 DLY=(INTERVAL*60-(THIS1-LAST1))*100;
 I=COMWAIT(DLY,MODIFY);
 IF I>0 THEN
    DO;            /* OPERATOR ISSUED STOP                           */
    CALL EMPTY;
    RETURN;
    END;
 CALL STCK(LASTIME);
 IF STDETQE(14)&'1'B THEN
    DO;
    PUT EDIT('STATDIE HAS AN ERROR, OURMF IS TERMINATING')(COL(1),A);
    STOP;
    END;
 NEXTBUF=SUBSTR(UNSPEC(STDEBUFP),1,8);
      DO IBUF=LASTBUF REPEAT MOD(IBUF+1,PGBFCT) WHILE(IBUF^=NEXTBUF);
      PGBUFPTR=PTROUT(PTRIN(STDEBUFP)+STDEPLEN*IBUF);
      IOBUF='OMF1'××SUBSTR(PGBUF,1,STDEPLEN);
      SUBSTR(IOBUF,5,8)=FIXTIME(SUBSTR(IOBUF,5,8));
      WRITE FILE(OUT) FROM(IOBUF);
      WRITTEN=WRITTEN+1;
      END;
 IF WAMT.SIZ>0 THEN
     DO;
     IOBUF='OMF2        '××SUBSTR(WAMTBUF,1,WAMT.SIZ);
     IF LASTTOC^=SUBSTR(IOBUF,29,8) THEN
         DO;
         LASTTOC=SUBSTR(IOBUF,29,8);
         SUBSTR(IOBUF,5,8)=FIXTIME(LASTTOC);
         WRITE FILE(OUT) FROM(IOBUF);
         END;
     END;
 OMF3.LCCAWTIM=LCCA.LCCAWTIM;
 CALL SDL(OMF3.LCCAWTIM,HOLDMF3.LCCAWTIM);
 OMF3.PAGINGINFO=PVT-HOLDMF3.PAGINGINFO, BY NAME;
 OMF3.SWAPINFO=RMCASRC-HOLDMF3.SWAPINFO;
 HOLDMF3.LCCAWTIM=LCCA.LCCAWTIM;
 HOLDMF3.PAGINGINFO=PVT, BY NAME;
 HOLDMF3.SWAPINFO=RMCASRC;
 CALL STCK(OMF3.TIMESTAMP);
 OMF3.TIMESTAMP=FIXTIME(OMF3.TIMESTAMP);
 WRITE FILE(OUT) FROM(OMF3);
 WRITTEN=WRITTEN+2;
 CLOSE FILE(OUT);
 LASTBUF=NEXTBUF;
 IF WRITTEN>DISKSPACE THEN CALL EMPTY;
 GO TO DOITAGAIN;
 %PAGE;
 EMPTY: PROC;
  /* THE EMPTY PROCEDURE EMPTIES THE DISK DATASET BY COPYING IT      */
  /* TO A DYNAMICALLY ALLOCATED TAPE DATASET, THEN REOPENING THE     */
  /* DISK DATASET FOR OUTPUT UNDER A DDNAME WHERE IT HAS DISP=OLD.   */
 DCL (OLD INPUT, OLD2 OUTPUT, TAPE OUTPUT)
        FILE RECORD ENV(VB TOTAL BLKSIZE(6008) RECSIZE(6000));
 ON ENDFILE(OLD) GO TO REOPEN;
 OPEN FILE(OLD) INPUT RECORD;
 READ FILE(OLD) INTO(IOBUF);
 /* DATASET IS NOT ALREADY EMPTY, SO GO EMPTY IT */
 ON ENDFILE(OLD) GO TO REOPEN;
  /* DYNALLOC FILE(TAPE) DSN(@TAPEDSN) DISP1(MOD) UNIT(@TAPEUNIT)    */
  /*     DISP2(CATLG) FREE(CLOSE) AUTH(1001)                         */
 %NOPRINT;
 DYNALLOC FILE(TAPE) DSN(@TAPEDSN) DISP1(MOD) UNIT(@TAPEUNIT)
     DISP2(CATLG) FREE(CLOSE) AUTH(1001);
 %PRINT;
     /* AUTHORIZED FLAG BITS ARE SET TO WAIT FOR UNIT */
 LOOP: WRITE FILE(TAPE) FROM(IOBUF);
 READ FILE(OLD) INTO(IOBUF);
 GO TO LOOP;
 REOPEN: CLOSE FILE(OLD);
 CLOSE FILE(TAPE);
 OPEN FILE(OLD2) OUTPUT RECORD TITLE('OLD');
 RET: CLOSE FILE(OLD2);
 WRITTEN=0;
 RETURN;
 END EMPTY;
 %SKIP(5);
 FIXTIME: PROC(ARG) RETURNS(CHAR(8));
 DCL ARG CHAR(8);
 DCL  TODCNVT ENTRY(*) RETURNS(CHAR(24));
 DCL 1 TIMECHR,
    2 DATE CHAR(5),
    2 HOUR CHAR(2),
    2 P1 CHAR(1),
    2 MIN CHAR(2),
    2 P2 CHAR(1),
    2 SEC CHAR(2);
 DCL FRED CHAR(6);
 DCL SAM PIC'999999' DEFINED(FRED) POS(1);
 DCL 1 DECIMA,
    2 DECDATE FIXED DEC(7),
    2 DECHOUR FIXED DEC(7);
 DCL RETN CHAR(8);
 STRING(TIMECHR)=SUBSTR(TODCNVT(ARG),3,13);
 FRED='0'××DATE;
 DECDATE=SAM;
 FRED=HOUR××MIN××SEC;
 DECHOUR=SAM;
 UNSPEC(RETN)=UNSPEC(DECDATE)××UNSPEC(DECHOUR);
 RETURN(RETN);
 END FIXTIME;
 %SKIP(5);
 END OURMF;
./       ADD   NAME=PAGES
* PROCESS NOOPTIMIZE;
 /* PAGES: DISPLAY STATUS OF PAGE AND SWAP DATASETS */
 PAGES: PROC OPTIONS(MAIN REENTRANT);
  /*     VERSION DATE 10/4/76
         MVT R3.7 + SU 7
         YALE UNIVERSITY COMPUTER CENTER
         175 WHITNEY AVE
         NEW HAVEN, CT.
         203 432-4080
         HOWARD GILBERT

         RECOMMENDED AS A TSO COMMAND,
         LINKEDIT WITH PLMAIN AS THE ENTRY POINT
         USE PLI OPTIMIZING COMPILER            */
  DCL SIXTEEN PTR;
  UNSPEC(SIXTEEN)=(24)'0'B××'00010000'B;
  DCL CVTPTR PTR BASED(SIXTEEN);
  DCL ISASIZE FIXED BIN(31) EXT INIT(5000);
  DCL 1 CVT BASED(CVTPTR),
          2 F1 CHAR(704),
          2 CVTASMVT PTR;
  DCL 1 ASMVT BASED(CVTASMVT),
          2 F1 CHAR(4),
          2 ASMSART PTR,
          2 ASMPART PTR,
          2 F2 CHAR(96),
          2 (UNRESERVED,POOL,VIO,ADSPC) FIXED BIN(31);
  DCL 1 PART BASED(ASMPART),
          2 ID CHAR(4),
          2 PARTSIZE FIXED BIN(31),
          2 F2 CHAR(16),
          2 PARTDSNL PTR,
          2 F3 CHAR(52),
          2 PARTE (N REFER(PARTSIZE)),
                3 F4 CHAR(8),
                3 TYPE BIT(4) ALIGNED,
          2 F2 CHAR(16),
          2 SARTDSNL PTR,
          2 F3 CHAR(52),
          2 SARTE (N REFER(SARTSIZE)),
                3 F4 CHAR(9),
                3 NOTINUSE BIT ALIGNED,
                3 F5 CHAR(6),
                3 (SETS,AVAILABLE,ERRORS) FIXED BIN(31),
          3 (IORB,SAT,SDCT,EDB) PTR,
                3 UCBPTR PTR;
  DCL DSN(20) CHAR(44) BASED(P);
  DCL N FIXED BIN;
  DCL P PTR;
  DCL TYPES(4) CHAR(10) INIT('PLPA','COMMON','DUPLEX','LOCAL');
  DCL 1 UCB BASED(P),
          2 F1 CHAR(28),
          2 SER CHAR(6);
  PUT EDIT('PAGE DATASETS:',
          'TYPE','SER','SLOTS',' % USED ','ERRORS','NAME')
          (COL(1),A,COL(1),6 A(10));
  DO I=1 TO PARTSIZE;
          IF ^PARTE.NOTINUSE(I) & SLOTS(I)^=0 THEN
          PUT EDIT(TYPES(INDEX(TYPE(I),'1'B)),
                UCBP(I)->SER,
                SLOTS(I),(SLOTS(I)-AVAIL(I))*100/SLOTS(I),ERRS(I),
           SUBSTR(PARTDSNL->DSN(I),1,INDEX(PARTDSNL->DSN(I),' ')-1))
                (COL(1), 2 A(10), 3 (F(5),X(5)),A);
          END;
          PUT EDIT('PAGE SLOTS ARE ',(POOL-UNRESERVED)*100/POOL,
               ' % RESERVED')
          (SKIP(2),A,F(3),A);
          PUT EDIT('SWAP DATASETS:',
                'SER','SETS',' % USED','ERRORS','NAME')
                (SKIP(2),A,COL(1),X(10),5 A(10));

          DO I=1 TO SARTSIZE;
          IF ^SARTE.NOTINUSE(I) &SETS(I)^=0 THEN
          PUT EDIT(UCBPTR(I)->SER,
                SETS(I),(SETS(I)-AVAILABLE(I))*100/SETS(I),ERRORS(I),
           SUBSTR(SARTDSNL->DSN(I),1,INDEX(SARTDSNL->DSN(I),' ')-1))
                (COL(11),A(10),3 (F(5),X(5)),A);
          END;
  END;
./       ADD   NAME=RCT
* PROCESS OPT(TIME);
 /* RCT: DISPLAY SRM VALUES USED IN MPL ADJUSTMENT */
  RCT: PROC OPTIONS(MAIN REENTRANT);
  /*     VERSION DATE 10/4/76
         MVT R3.7 + SU 7
         YALE UNIVERSITY COMPUTER CENTER
         175 WHITNEY AVE
         NEW HAVEN, CT.
         203 432-4080
         HOWARD GILBERT

         RECOMMENDED AS A TSO COMMAND,
         LINKEDIT WITH PLMAIN AS THE ENTRY POINT
         USE PLI OPTIMIZING COMPILER            */
  DCL SIXTEEN PTR;
  UNSPEC(SIXTEEN)=(24)'0'B××'00010000'B;
  DCL ISASIZE FIXED BIN(31) EXT INIT(4096);
  DCL CVTPTR PTR BASED(SIXTEEN);
  DCL 1 CVT BASED(CVTPTR),
         2 F0 CHAR(604),
          2 CVTOPCTP PTR;
  DCL 1 RMCT BASED(CVTOPCTP),
          2 F0 CHAR(310),
         2 LGFMC FIXED BIN,
         2 F1 CHAR(192),
         2 RCTID CHAR(4),
         2 F2 CHAR(34),
         2 (UICA,CPUA,AVQC,ASMQA,PTR) FIXED BIN;
 IF RCTID^='RCT ' THEN PUT EDIT(' PROGRAM STRUCTURES ARE INCORRECT')
         (COL(1),A);
 PUT EDIT('SRM VARIABLES:')(COL(1),A);
 PUT EDIT('CPU UTILIZATION',CPUA/16,
 'AVG ASM QUEUE',ASMQA,
 'PAGE RATE',PTR,
 'AVG UIC',UICA)(COL(1),A(20),F(5));
 END;
./       ADD   NAME=S99FAIL
 S99FAIL: PROC(S99PARM,RETC,MSG) OPTIONS(REENTRANT) REORDER;
  /* PROCEDURE: S99FAIL                                               */
  /* FUNTION:   INTERFACE BETWEEN PLI AND DAIRFAIL (IKJEFT18)         */
  /* LANGUAGE:  PLIX 3.0                                              */
  /* SYSTEM:    MVS R3.7+ SU 7                                        */
  /* VERSION:   FEB 5, 1977                                           */
  /* INPUT:     S99PARM - A SVC 99 INPUT PARAMETER STRUCTURE          */
  /*            CONTAINING ERROR CODES                                */
  /*            RETC    - THE VALUE IN R15 ON RETURN FROM SVC99       */
  /* OUTPUT:    MSG - A FIRST AND SECOND LEVEL MESSAGE FOR THE        */
  /*             ERROR SUITABLE FOR PRINTING, DISPLAYING, OR          */
  /*             WHATEVER (WE DO NOT DISPLAY THE MESSAGE).            */
 DCL 1 S99PARM,
     2 S99STUFF CHAR(1);
 DCL RETC FIXED BIN(31);
 DCL MSG(2) CHAR(251) VAR;
 DCL DFID BIT(16) INIT('0100000000110010');
 DCL 1 DFBUFS,
         2 DFBUFL1 FIXED BIN,
         2 DFBUFO1 FIXED BIN,
         2 DFBUFT1 CHAR(251),
         2 FILL1 CHAR(1),
         2 DFBUFL2 FIXED BIN,
         2 DFBUFO2 FIXED BIN,
         2 DFBUFT2 CHAR(251);
 DCL LINKER ENTRY(CHAR(8),*,*,*,*,*,*) OPTIONS(ASM INTER RETCODE);
 DCL ZERO FIXED BIN(31) INIT(0);
 CALL LINKER('IKJEFF18',S99PARM,RETC,ZERO,DFID,ZERO,DFBUFS);
 IF PLIRETV()>0 THEN PUT EDIT('ERROR FROM IKJEFF18:',PLIRETV())
         (COL(1),A,F(2));
 MSG(1)=SUBSTR(DFBUFT1,1,DFBUFL1-4);
 MSG(2)=SUBSTR(DFBUFT2,1,DFBUFL2-4);
 END;
./       ADD   NAME=WKLOAD
* PROCESS MAR(2,72),INCLUDE,OPT(TIME);
  /* WKLOAD: TSO COMMAND TO DISPLAY MF1 WORKLOAD DATA */
 WKLOAD: PROC OPTIONS(MAIN );
 /* PROCEDURE:    WKLOAD                                             */
 /* FUNCTION:     DISPLAY WORKLOAD ACTIVITY MEASUREMENT TABLE FROM   */
 /*               THE LAST MF1 REPORTING INTERVAL                    */
 /* SYSTEM:       MVS R3.7 + SUPERVISOR 2 SU                         */
 /* VERSION:      MAY, 1977                                          */
 /* AUTHOR:       HOWARD GILBERT                                     */
 /*               YALE COMPUTER CENTER                               */
 /*               NEW HAVEN, CT. 06520                               */
 /*               203 432-4080                                       */
 /* EXTERNAL:     REQUIRES MF1 BE RUNNING FOR AT LEAST ONE REPORTING */
 /*               PERIOD.                                            */
 /*               REQUIRES STATDIE BE INITIALIZED.                   */
 /*               REQUIRES ZAP TO IRBMFDWP TO SAVE WAMT (PTF HG00101) */
 /********************************************************************/
 /*                                                                  */
 /* INSTALLATION INFORMATION                                         */
 /* TARGET LIBRARY: LINKLIB OR LPALIB                                */
 /* LINKEDIT PARMS: RENT,REUS                                        */
 /* LINKEDIT CONTROL CARDS:                                          */
 /*      ENTRY PLICALLA                                              */
 /* SUBROUTINES: PLIBASE, TODCNVT, PLIMISC ENTRY POINTS              */
 /*                                                                  */
 /* DISTRIBUTION :                                                   */
 /*     THIS MATERIAL IS NOT RESTRICTED IN ANY MANNER AND MAY        */
 /* BE FREELY REPRODUCED AND DISTRIBUTED FOR ANY PURPOSE.            */
 /* THERE ARE TWO LITTLE RULES:                                      */
 /*     1) YOU MUST MARK ANY MODIFICATIONS PRIOR TO GIVING           */
 /*        ANYONE COPIES OF ALTERED CODE.                            */
 /*     2)SEND THE AUTHOR A NOTE IF YOU HAVE INSTALLED               */
 /*        AND ARE USING THIS PROGRAM SO HE CAN KEEP                 */
 /*        TABS ON THE USER COMMUNITY.                               */
 %PAGE;
 /*    WHATSA WAMT??                                                 */
 /* THE WORKLOAD ACTIVITY MEASUREMENT TABLE IS CREATED AND           */
 /* INITIALIZED BY RMF OR MF1. THERE IS ONLY ONE WAMT, ONLY ONE      */
 /* WAMT FORMAT, AND IT IS MAINTAINED BY THE SRM IDENTICALLY         */
 /* FOR BOTH MF1 AND RMF. IT CONTAINS ALL THE WORKLOAD INFORMATION   */
 /* REPORTED BY RMF FOR PERFORMANCE GROUPS AND PERIODS. MF1 IS       */
 /* SMART ENOUGH TO IGNORE MUCH OF THE WAMT INFORMATION, THEREBY     */
 /* INSURING A MARKET FOR RMF.                                       */
 /* THIS PROGRAM IS A USABLE TSO COMMAND TO SUMMARIZE THE            */
 /* INFORMATION IN THE LAST WAMT COLLECTED BY MF1. THIS              */
 /* SATISFIES THE OCCASIONAL DESIRE TO LOOK AT THE SYSTEM            */
 /* WITHOUT THE GENERATION OF BOXES OF OLD MF1/RMF REPORTS.          */
 /* ALL THE USUAL NUMBERS ARE THERE, BUT A FEW EDITORIAL             */
 /* DECISIONS HAVE BEEN MADE FOR THE TSO ENVIRONMENT:                */
 /*  1) ONLY THE BREAKDOWN BY PGP IS PROVIDED. IT IS                 */
 /*     EASY TO SUM THE COLUMNS IF YOU WANT, BUT THE                 */
 /*     VARIOUS OTHER REPORTS DO NOT SEEM AS IMPORTANT               */
 /*     AS THE BREAKDOWN BY PGP.                                     */
 /*  2) ALL THE SERVICE UNITS ARE REPORTED 'PER SECOND',             */
 /*     BECAUSE THE LENGTH OF THE REPORTING INTERVAL IS              */
 /*     NOT AT THE USERS CONTROL AND ABSOLUTE NUMBERS                */
 /*     SEEM LESS USEFUL.                                            */
 /*  FIELDS REPORTED:                                                */
 /*      PG    PERFORMANCE GROUP                                     */
 /*      PGP   PERFORMANCE GROUP PERIOD                              */
 /*      OBJ   SERVICE OBJECTIVE                                     */
 /*      DMN   DOMAIN                                                */
 /*      SRV   SERVICE UNITS PER SECOND CONSUMED BY PGP              */
 /*      CPU   CPU COMPONENT OF SRV                                  */
 /*      IO    IO COMPONENT OF SRV                                   */
 /*      MSO   STORAGE COMPONENT OF SRV                              */
 /*      ABS   ABSORPTION RATE (SERVICE/TRANS-RESIDENT TIME)         */
 /*            THIS IS THE RATE AT WHICH A USER IN THIS PGP          */
 /*            CONSUMES SERVICE WHILE IN CORE. IT IS TOTAL           */
 /*            SERVICE PER SECOND OF SWAPPED-IN TIME.                */
 /*      TSR   TRANS SERVICE RATE (SERVICE/TRANS-ACTIVE TIME)        */
 /*            THIS IS THE RATE AT WHICH A USER IN THIS PGP          */
 /*            CONSUMES SERVICE INCLUDING BOTH SWAPPED IN            */
 /*            AND SWAPPED OUT TIME. 'TSR'<='ABS' WITH               */
 /*            EQUALITY ONLY IF THE USER IS NOT SWAPPED OUT          */
 /*            DURING THIS PGP.                                      */
 /*      WLL   WORKLOAD LEVEL                                        */
 /*      SWP   SWAPS PER SECOND                                      */
 /*      ACT   ACTIVITY (TRANS-RESIDENT/ELAPSED TIME)                */
 /*            ESSENTIALLY THIS IS THE AVERAGE NUMBER                */
 /*            OF INCORE TRANSACTIONS IN THIS PGP OVER               */
 /*            THIS REPORTING PERIOD. IT IS A MEASURE                */
 /*            OF MULTIPROGRAMMING LEVEL FOR THE PGP.                */
 /*      TRLEN AVERAGE TRANSACTION ELAPSED TIME                      */
 /*            THIS IS THE AVERAGE ELAPSED TIME FOR                  */
 /*            ENDED TRANSATIONS. IT IS A MEASURE OF                 */
 /*            RESPONSE TIME FOR TSO OR TURNAROUND FOR               */
 /*            BATCH, BUT EXCEPT FOR TSO TRIVIAL PERIODS             */
 /*            THIS VALUE IS DANGEROUSLY UNSTABLE AS A               */
 /*            TUNING CRITERION                                      */
 %PAGE;
 DCL 1 WAMT BASED(WAMTPTR),
 % INCLUDE IRAWAMT;
 DCL TIMES FIXED BIN;
 DCL STATADDR PTR;
 DCL STATWAMT PTR BASED(STATADDR);
 DCL WAMTPTR PTR;
 DCL PTRIN ENTRY(PTR) RETURNS(FIXED BIN(31));
 DCL PTROUT ENTRY(FIXED BIN(31)) RETURNS(PTR);
 DCL LOADPTR ENTRY(CHAR(8),PTR) OPTIONS(ASM INTER RETCODE);
 DCL TODCNVT ENTRY(*) RETURNS(CHAR(24));
 DCL PLIRETV BUILTIN;
 CALL LOADPTR('STATWAMT',STATADDR);
 IF PLIRETV >0 THEN
     DO;
     PUT EDIT('STATDIE NOT INSTALLED')(COL(1),A);
     STOP;
     END;
 IF UNSPEC(STATWAMT)=(32)'0'B THEN
     DO;
     PUT EDIT('STATDIE NOT INITIALIZED')(COL(1),A);
     STOP;
     END;
 WAMTPTR=STATWAMT;
 IF SIZ=0 THEN
     DO;
     PUT EDIT('NO MF1 DATA AVAILABLE YET')(COL(1),A);
     STOP;
     END;
 TIMES=TOC-TMA;
 PUT EDIT('WORKLOAD DURING ',TIMES,' SECONDS ENDING AT ',
     SUBSTR(TODCNVT(ADDR(TOC)),8,5),'IPS=',IPS,
         ' CPU=',IPC,' IOC=',IPI,' MSO=',IPM)
         (COL(1),A,F(4),2 A,COL(1), 8 A);
 PUT EDIT('PG PGP OBJ DMN SRV CPU IO  MSO ABS TSR WLL SWP  ACT   TRLEN'
          )(COL(1),A);
    DO I=0 TO HPG;
    K=1;
      DO J=NDX(I) TO NDX(I+1)-SPD BY SPD;
      WAMPNEXT=PTROUT(PTRIN(WAMTPTR)+J);
      IF TRR<=0 THEN
           PUT EDIT(I,K,OBJ,DMN,' ZEROS')(COL(1),F(2),3 F(4),A);
          ELSE DO;
           PUT EDIT(I,K,OBJ,DMN,SRV/TIMES,CPU/TIMES,IOC/TIMES,MSO/TIMES,
            (SRV*1000)/TRR,(SRV*1000)/TAT,NWL/000256,FLOAT(SWC)/TIMES,
            FLOAT(TAT)/(TIMES*1000))
            (COL(1),F(2),10 F(4),2 F(5,2));
           IF TRN=0 THEN PUT EDIT('  0.00')(A);
                    ELSE PUT EDIT(TET/(TRN*10))(P'ZZZ9.99');
            END;
      K=K+1;
      END;
    END;
 END;
./       ADD   NAME=PLIMISC
* MODULE: PLIMISC
* FUNCTION: VARIOUS PRIMITIVE UTILITY SUBROUTINES FOR PLIX
* ATTRIBUTES: LINKEDIT WITH REENTRANT ATTRIBUTE
*            THE AMDPRSEG SUBROUTINE IS NOT REENTRANT, SO
*            PROGRAMS WHICH CALL ENTRY POINT TODCNVTR SHOULD
*            NOT BE DECLARED REENTRANT, BUT ALL OTHER ENTRY
*            POINTS ARE REENTRANT.
* EXTERNAL: CALLS TODCNVRT ENTRY POINT OF AMDPRSEG MODULE.
* DISTRIBUTION:
*      THIS MODULE IS NOT RESTRICTED IN ANY WAY AND CAN BE
* FREELY REPRODUCED AND USED FOR ANY PURPOSE.
*****************************************************************
* THE INDIVIDUAL CALLING ASSUMPTIONS ARE DOCUMENTED FOR EACH
*     ROUTINE. THIS IS NOT AN EXHAUSTIVE LIST AND IT MAY BE
*     ADDED TO PERIODICALLY. REDUNDANCY IN FUNCTION IS PERMITTED
*     WHERE THERE IS A SIGNIFICANT IMPROVEMENT IN USABILITY.
* CONVENTIONS: EACH ROUTINE IS PRECEEDED BY ITS OWN DOCUMENTATION.
*     ROUTINES REQUIRING PLI PROLOGUE AND EPILOGUE CODE USE
*     PLIENTRY AND PLIEND MACROS. ADDITIONAL PRIVATE MACROS MUST BE
*     PHYSICALLY INSERTED INTO THE MODULE BELOW.
* DOCUMENTATION MUST INCLUDE AUTHOR, DATE, A PLI DECLARATION OF THE
*     ENTRY, AND INFORMATION ON THE ARGUMENTS.
         EJECT
         MACRO
&NAME    PLIENTRY &DSA=88,&BR=11
.* THIS MACRO PROVIDES ENTRY CODE FOR AN ASSEMBLER SUBROUTINE
.* OF A PLIX PROGRAM. THIS LINKAGE ALLOWS RECURSIVE OR
.* REENTRANT USE OF THE ROUTINE, IF THE REST OF THE CODE IS
.* WRITTEN CORRECTLY. IF REGISTER 12 IS UNCHANGED THROUGHOUT
.* THE SUBROUTINE, THEN NORMAL PLIX ERROR CORRECTION AND
.* OTHER LINKAGES ARE PRESERVED AND PLIX SUBROUTINES CAN BE
.* CALLED NORMALLY.
.*
.* ARGUMENTS-
.* &DSA IS THE LENGTH OF THE DYNAMIC STORAGE AREA NEEDED BY
.* THE PROGRAM FOR SAVE AREA, HOUSKEEPING, AND AUTOMATIC
.* VARIABLE STORAGE. THE FIRST 88 BYTES ARE RESERVED, BUT THE
.* REST OF REQUESTED MEMORY CAN BE ADDRESSED BY A DSECT BASED
.* ON REGISTER 13.
.* &BR IS THE REGISTER USED AS THE BASE FOR THE REMAINDER OF
.* THE SUBROUTINES EXECUTABLE CODE.
         DC    CL7'&NAME'
         DC    AL1(7)
         ENTRY &NAME
&NAME    STM   14,12,12(13)
         LR    4,1            SAVE ARGLIST TEMPORARILY
         LA    0,&DSA
         USING &NAME,15       TEMPORARY ADDRESSABILITY
         CH    0,=H'88'
         BNL   *+8
         LA    0,88
.* FOLLOWING CODE COPIED ESSENTIALLY FROM FIG 12.2 OF PLIX
.* PROGRAMMERS GUIDE. REFER TO IT FOR DETAILED DESCRIPTION.
         L     1,76(13)
         ALR   0,1
         CL    0,12(12)
         BNH   *+10
         DROP  15
         L     15,116(12)
         BALR  14,15
         ST    0,76(1)
         ST    13,4(1)
         MVC   72(4,1),72(13)
         LR    13,1
         MVI   0(13),X'80'
         MVI   86(13),X'91'
         MVI   87(13),X'C0'
         LR    1,4
         BALR  &BR,0
         USING *,&BR
         MEND
         EJECT
         MACRO
&NAME    PLIEND
.* RETURN SEQUENCE FROM ASSEMBLER SUBROUTINE OF PLIX
.* PRESERVES R15 AS RETURN CODE.
.* THIS CODE WAS COPIED FROM A REAL COMPILER LISTING
&NAME    LR     0,13
         L     13,4(13)
         L     14,12(13)
         LM    2,12,28(13)
         BALR  1,14
         MEND
         EJECT
         PUNCH ' ALIAS SVC'
         PUNCH ' ALIAS LINKER'
         PUNCH ' ALIAS LOADPTR'
         PUNCH ' ALIAS STCK'
         PUNCH ' ALIAS TCAPTR'
         PUNCH ' ALIAS PTRIN'
         PUNCH ' ALIAS PTROUT'
         PUNCH ' ALIAS SDL'
         PUNCH ' ALIAS ADL'
         PUNCH ' ALIAS TODCNVT'
         PUNCH ' ALIAS COMWAIT'
         PRINT NOGEN
PLIMISC  CSECT
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
         SPACE 5
* ENTRY: SVC
* FUNCTION: ISSUE AN SVC. SUPPORTS VARIOUS MACROS PROVIDING
*     SUPERVISOR SERVICES TO A PLI PROGRAM
* AUTHOR: HOWARD GILBERT
* DATE: JAN 20, 1977
         SPACE 1
*        DCL SVC ENTRY(FIXED BIN, 1, 2 /*R0*/ PTR, 2 /*R1*/ PTR,
*              2 /*R15*/ PTR) OPTIONS(ASM INTER RETCODE);
*        THE FIRST ARGUMENT IS THE SVC NUMBER
*        THE SECOND ARGUMENT IS AN ARRAY OR STRUCTURE CONTAINING
*           THE INITIAL VALUES FOR REGISTERS 0,1, AND 15.
*        THE SECOND ARGUMENT IS CHANGED BY EXECUTION OF THIS ROUTINE
*           AND RECEIVES THE CONTENTS OF THE REGISTERS AFTER
*           EXECUTION OF THE SVC. THE CONTENTS OF R15 ARE ALSO
*           PASSED BACK AS THE RETURN CODE AND CAN BE DETERMINED BY
*           THE RETCODE CONVENTIONS.
SVC      PLIENTRY
         LM    R2,R3,0(R1)
         LH    R2,0(R2)           GET SVC #
         LM    R0,R1,0(R3)
         L     R15,8(R3)
         EX    R2,SVCINST
         ST    R15,8(R3)
         STM   R0,R1,0(R3)
         SPACE 2
*        DCL LINKER ENTRY(CHAR(8),.....) OPTIONS(ASM INTER RETCODE);
*        THE FIRST ARGUMENT IS THE NAME OF THE MODULE TO BE CALLED
*        THE SECOND AND SUBSEQUENT ARGUMENTS ARE PASSED TO THE
*          MODULE. IF LINKER IS PASSED 'N' ARGUMENTS, 'N-1' ARE
*          PASSED TO THE CALLED ROUTINE. THIS IS ACCOMPLISHED
*          BY INCREMENTING R1 BY 4 BEFORE THE CALL.
*        THE RETURN CODE IS PASSED BACK IN R15.
         SPACE 2
* LOGIC:
*        FIRST WE CALL IEAVVMSR TO SEARCH THE MVS LINK PACK FOR
*        THE MODULE NAME. IF IT IS FOUND IT IS BRANCHED TO
*        DIRECTLY.
*        OTHERWISE, WE USE THE LINK MACRO TO EFFECT THE CALL
*        IF AN ERROR IS DETECTED IN THE LINK, WE PASS BACK
*        F'806' AS A RETURN CODE.
         SPACE 2
* NOW A WORD ABOUT IEAVVMSR IS IN ORDER HERE, SINCE DOCUMENTATION
* ON IT IS HARD TO FIND. IT IS AN ENTRY OF IEAVLK00 IN THE NUCLEUS
* AND IT HAS STRANGE REGISTER CONVENTIONS:
*  R0  ON INPUT, FIRST HALF OF MODULE NAME. ON OUTPUT, LPDE ADDR
*  R1  ON INPUT, SECOND HALF OF MODULE NAME.
*  R3  ON INPUT, CVT ADDRESS
*  R6, R8, AND R9 CHANGED BY IEAVVMSR WITHOUT RESTORING
* AND OF COURSE YOU FIND IEAVVMSR FROM THE CVT
         SPACE 2
LINKER   PLIENTRY DSA=LINKSIZE
         USING LINKDSA,R13
         L     R2,0(R1)           GET ADDRESS OF NAME
         LA    R4,4(R1)           SKIP FIRST ARGUMENT FOR
*                                 SUBSEQUENT CALL
         MVC   LINKWKA(LINKSFLL),LINKSFL
         LM    R0,R1,0(R2)
         L     R3,CVTPTR          NEED THIS FOR IEAVVMSR
         CLI   CVTDCB-CVT(R3),X'13' TEST FOR MVS
         BNE   LNK
         L     R15,CVTLPDSR-CVT(R3) ADDR OF IEAVVMSR
         BALR  R14,R15
         B     BALRCODE           MODULE FOUND IN LPA
LNK      LR    R1,R4              PICK UP SAVED ARGUMENT ADDR
         LINK  EPLOC=(2),ERRET=ERR806,SF=(E,LINKWKA)
RET      PLIEND
ERR806   LA    R15,806
         B     RET
BALRCODE LR    R1,R4
         LR    R15,R0
         L     R15,LPDENTP-LPDE(R15)
         BALR  R14,R15
         B     RET
LINKSFL  LINK  SF=L
LINKSFLL EQU   *-LINKSFL
LINKDSA  DSECT
         DS    CL88
LINKWKA  LINK  SF=L
LINKSIZE EQU   *-LINKDSA
PLIMISC  CSECT
         EJECT
* ENTRY: LOADPTR
* FUNCTION: TO ALLOW PLI TO LOAD DATA MODULES IN LPALIB AND
*        LINKLIB WITHOUT UNDUE OVERHEAD.
* SYSTEM:      MVS ONLY
* AUTHOR:      HOWARD GILBERT
* DATE:  JAN 20, 1977
         SPACE 2
*        DCL LOADPTR ENTRY(CHAR(8),PTR) OPTIONS(ASM INTER RETCODE);
*        THE FIRST ARGUMENT IS THE NAME OF THE MODULE TO BE LOADED
*        THE SECOND ARGUMENT IS A POINTER SET TO THE ADDRESS OF THE
*        DATA MODULE. NO PROVISION IS MADE TO DELETE THE MODULE.
*        THE RETURN CODE IS PASSED BACK IN R15.
         SPACE 2
* LOGIC:
*        FIRST WE CALL IEAVVMSR TO SEARCH THE MVS LOAD PACK FOR
*        THE MODULE NAME. IF IT IS FOUND, ITS ADDRESS IS RETURNED
*        OTHERWISE, WE USE THE LOAD MACRO TO FIND IT
*        IF AN ERROR IS DETECTED IN THE LOAD, WE PASS BACK
*        F'806' AS A RETURN CODE.
         SPACE 2
LOADPTR   PLIENTRY
         L     R2,0(R1)           GET ADDRESS OF NAME
         L     R4,4(R1)           GET PTR ADDRESS
         LM    R0,R1,0(R2)
         L     R3,CVTPTR          NEED THIS FOR IEAVVMSR
         CLI   CVTDCB-CVT(R3),X'13' TEST FOR MVS
         BNE   LOD
         L     R15,CVTLPDSR-CVT(R3) ADDR OF IEAVVMSR
         BALR  R14,R15
         B     LPACODE           MODULE FOUND IN LPA
LOD      LOAD  EPLOC=(2),ERRET=ERR806X
         ST    R0,0(R4)
RET2     PLIEND
ERR806X  LA    R15,806
         MVC   0(4,R4),=X'FF000000'
         B     RET2
LPACODE  LR    R15,R0
         L     R15,LPDENTP-LPDE(R15)
         ST    R15,0(R4)
         SR    R15,R15
         B     RET2
         EJECT
* ENTRY: STCK
* FUNCTION: PRODUCE 64 BIT  TIME STAMP
*        CONTAINING MILLISECONDS SINCE 1/1/1900.
* AUTHOR: HOWARD GILBERT
* DATE: JAN 27,1977
* SYSTEM: ANY VS1 OR MVS
* NOTE: NO CORRECTION FOR GMT IS MADE
         SPACE 1
*        DCL STCK ENTRY(CHAR(8));
         SPACE 1
         ENTRY STCK
STCK     L     R1,0(R1)           ADDRESS DESCRIPTOR
         L     R1,0(R1)
         STCK  0(R1)             USE PART OF SAVE AREA
         BR    R14
         EJECT
* ENTRY: TCAPTR
* FUNCTION: RETURNS R12 AS A PTR SO A PLI PROGRAM CAN ACCESS
*           THE PLI SYSTEM CONTROL BLOCKS
* AUTHOR:   HOWARD GILBERT
* DATE:     JULY 16, 1977
*   DCL TCAPTR ENTRY RETURNS(PTR);
*   USE TCAPTR AS BASE FOR A STRUCTURE
         ENTRY TCAPTR
TCAPTR   L     R1,0(R1)
         ST    R12,0(R1)
         BR    R14
         EJECT
* ENTRY: PTRIN AND PTROUT
* FUNCTION: PERMITS POINTER ARITHMETIC
* AUTHOR:   HOWARD GILBERT
* DATE:     APRIL 10, 1977
*
* KLUGE:    PLI IS A 'PURE' LANGUAGE FROM IBM'S POINT OF VIEW.
*           IN ADDITION TO THE OTHER MACHINE DEPENDENT THINGS IT
*           EXCLUDES, ONE IS NOT PERMITTED TO CALCULATE POINTERS.
*           SUCH OPERATIONS ARE VALID IN PLS, AND A LOT OF PLS
*           STRUCTURES DEPEND ON IT. SO, TO GET AROUND THIS
*           PTRIN ACCEPTS A POINTER, CLEARS THE HIGH ORDER BYTE,
*           AND RETURNS IT AS A FIXED BIN(31) NUMBER. LIKEWISE
*           PTROUT ACCEPTS A FIXED BIN(31) NUMBER AND RETURNS
*           IT TO YOU AS A POINTER. YOU CAN DO THIS SORT OF THING
*           DIRECTLY IN PLI WITH UNSPEC TOO, BUT ITS A MATTER OF
*           ASTHETICS WHICH IS BEST.
         ENTRY PTRIN
PTRIN    SAVE  (2,3),,*
* DCL PTRIN ENTRY(PTR) RETURNS(FIXED BIN(31));
         LM    R2,R3,0(R1)
         L     R1,0(R2)
         LA    R1,0(R1)
         ST    R1,0(R3)
         RETURN (2,3)
         SPACE 5
         ENTRY PTROUT
PTROUT   SAVE  (2,3),,*
* DCL PTROUT ENTRY(FIXED BIN(31)) RETURNS(PTR);
         LM    R2,R3,0(R1)
         MVC   0(4,R3),0(R2)
         RETURN (2,3)
         EJECT
* ENTRY:    SDL,ADL
* FUNCTION: SUBTRACT AND ADD DOUBLE LOGICAL PSEUDO INSTRUCTIONS
*           GOOD FOR WORKING WITH TIMESTAMPS
* AUTHOR:   HOWARD GILBERT
* DATE:     MAY 10,1977
*  DCL SDL ENTRY(*,*);
*  DCL ADL ENTRY(*,*);
* THE TWO ARGUMENTS SHOULD BE 64 BIT ITEMS WITH DESCRIPTORS. CHAR(8),
* BIT(64), (2) FIXED BIN(31), OR 1, 2 FIXED BIN(31), 2 FIXED BIN(31)
* WILL ALL DO FINE.
* THE SECOND ARGUMENT IS ADDED TO (SUBTRACTED FROM) THE FIRST AND THE
* RESULT IS STORED BACK INTO THE FIRST ARGUMENT.
         ENTRY SDL,ADL
SDL      SAVE  (14,5)
         USING SDL,R15
         LM    R2,R3,0(R1)
         L     R2,0(R2)
         L     R3,0(R3)
         LM    R4,R5,0(R2)
         SL    R5,4(R3)
         BC    3,NOCARRY1
         BCTR  R4,0
NOCARRY1 SL    R4,0(R3)
         STM   R4,R5,0(R2)
         RETURN (14,5)
ADL      SAVE  (14,5)
         USING ADL,R15
         LM    R2,R3,0(R1)
         L     R2,0(R2)
         L     R3,0(R3)
         LM    R4,R5,0(R2)
         AL    R5,4(R3)
         BC    12,NOCARRY2
         AL    R4,ONE
NOCARRY2 AL    R4,0(R3)
         STM   R4,R5,0(R2)
         RETURN (14,5)
ONE      DC    F'1'
         EJECT
* ENTRY: TODCNVT
*
* FUNCTION: INTERFACE TO AMDPRSEG MODULE TO CONVERT A 64 BIT TIMESTAMP
*           OBTAINED BY STCK INTO A CHARACTER STRING GIVING YEAR,
*           JULIAN DATE AND TIME OF DAY
*
* ENTRY CONDITIONS:
*           DCL TODCNVT ENTRY(*) RETURNS(CHAR(24));
*
*   ARGUMENT CAN BE DECLARED CHAR(8) OR BIT(64) ALIGNED
*   VALUE RETURNED IS YYYYDDDHH.MM.SS.MMMMMM
         EJECT
TODCNVT PLIENTRY DSA=TCDSALEN
         USING TCDSA,R13
         LM    R2,R3,0(R1)
         MVC   TCARGL+4(4),0(R2)
         MVC   TCARGL+8(4),0(R3)
         L     R2,CVTPTR
         LA    R2,CVTTZ-CVT(R2)
         ST    R2,TCARGL
         LA    R1,TCARGL
         LA    R2,1
         BALR  R3,0
         SR    R0,R0
         SPM   R0
* THE ENTRY CONDITIONS TO TODCNVRT ARE:
*   R1 POINTS TO AN ARGUMENT LIST WITH 3 ADCONS
*       THE FIRST ARGUMENT IS A CVTTZ VALUE FOR GMT ADJUSTMENT
*       THE SECOND ARGUMENT IS AN 8 BYTE TOD CLOCK VALUE FROM STCK
*       THE THIRD ARGUMENT IS A 24 CHARACTER RETURN AREA
*   R2 CONTAINS A F'1' MEANING 'RETURN FULL DATE'
*   R13 POINTS TO A SAVE AREA
*   THE PROGRAM MASK IS DISABLED FOR FIXED POINT OVERFLOW
         WXTRN TODCNVRT
         CALL  TODCNVRT
         SPM   R3
         PLIEND
TCDSA    DSECT
         DS    CL88
TCARGL   DS    3A
TCDSALEN EQU   *-TCDSA
PLIMISC  CSECT
         EJECT
* PROCEDURE: COMWAIT
* FUNCTION: WAIT FOR TIME INTERVAL TO ELAPSE OR FOR
*     THE OPERATOR TO ISSUE A MODIFY OR STOP COMMAND
* ATTRIBUTES: REENTRANT
* VERSION: JUNE 4,1977
* AUTHOR: HOWARD GILBERT
* ENTRY CONDITIONS:
*
*      DCL COMWAIT ENTRY(FIXED BIN(31), CHAR(256) VAR)
*           RETURNS(FIXED BIN);
* THE FIRST ARGUMENT IS A TIME INTERVAL TO WAIT IN
*     UNITS OF 0.01 SECONDS.
* EXIT CONDITIONS:
* THE FUNCTION RETURNS A RETURN CODE:
*    0 - THE TIME INTERVAL ELAPSED AND NO OPERATOR ACTION
*        OCCURRED
*    4 - THE OPERATOR ISSUED A MODIFY COMMAND. THE DATA
*        ENTERED IN IN THE SECOND ARGUMENT.
*    8 - THE OPERATOR ISSUED A STOP COMMAND.
*   12 - AN ERROR HAS OCCURRED.
*****
* REGISTER USAGE:
*    R2 -> CSCB
*    R3 -> CIB
*    R4 -> FIRST ARG
*    R5 -> SECOND ARG
*    R6 -> THIRD ARG
*    R7 =  RETURN CODE
*
* SUPERVISOR SERVICES USED: WAIT,POST,STIMER,TTIMER,QEDIT
*
* NOTE:
*   THERE IS NO PROVISION FOR A PARAMETER TO BE PASSED TO
* THE STIMER EXIT. SO IT MUST BE COPIED TO THE GETMAIN
* AREA SO IT CAN USE ITS BASE ADDRESS TO FIND THE ECB.
*   THERE IS NO FEEDBACK ON THE AMOUNT OF TIME CONSUMED
* IF RETURN IS EFFECTED BY AN OPERATOR MODIFY COMMAND.
* APPLICATIONS WHICH REQUIRE A FIXED LENGHT INTERVAL
* AND PERMIT A MODIFY MUST RECALCULATE THE FIRST ARGUMENT
* BEFORE CALLING THIS ROUTINE AGAIN.  USE STCK TO
* TIMESTAMP THE START AND END OF THE WAIT.
*****
         EJECT
COMWAIT  PLIENTRY DSA=COMDSAL
         USING COMDSA,R13
         SPACE 2
* LOAD ARGUMENTS
         LM    R4,R6,0(R1)
         L     R5,0(R5)
         SR    R7,R7              PROVISIONAL RETURN CODE
         SPACE 2
* FIND CSCB
         L     R2,PSATOLD-PSA
         L     R2,TCBJSCB-TCB(R2)
         L     R2,JSCBCSCB-IEZJSCB(R2)
         USING CHAIN,R2
         SPACE 2
* CHECK STATUS OF CIB CHAIN
CIBCHK   L     R3,CHCIBP
         LTR   R3,R3
         BNZ   GETCIB
         SPACE 2
* NOW DOES THIS GUY WANT TO WAIT?
         L     R0,0(R4)
         LTR   R0,R0
         BNP   CWR
         SPACE 2
* COPY EXIT AND ECB TO DSA
         MVC   GETEXIT(EXITLEN),TIMEEXIT
         SPACE 2
* SET STIMER INTERVAL
         STIMER REAL,GETEXIT,BINTVL=(R4)
         SPACE 2
* BUILD ECB LIST AND WAIT
         LA    R0,TIMEECB-TIMEEXIT+GETEXIT DSA ECB
         ST    R0,ECBL1
         LA    R0,CHECB
         ST    R0,ECBL2
         OI    ECBL2,X'80'
         WAIT  ECBLIST=ECBL1,LONG=YES
         SPACE 2
* NOW WHAT HAPPENNED??
         L     R3,CHCIBP
         LTR   R3,R3
         BNZ   GETCIB
         TM    TIMEECB-TIMEEXIT+GETEXIT,X'40'
         BO    CWR
         LA    R7,12
         B     CWR
         SPACE 2
* WE HAVE A CIB, NOW IT CAN BE THE START CIB IF THIS IS THE
* FIRST CALL TO THIS SUBROUTINE IN THE CURRENT JOB. IF SO,
* WE THROW IT AWAY AND GO BACK TO CIBCHK
         USING CIB,R3
GETCIB   CLI   CIBVERB,CIBSTART
         BNE   ISITMOD
         QEDIT ORIGIN=CHCIBP,BLOCK=(R3)
         QEDIT ORIGIN=CHCIBP,CIBCTR=2
         B     CIBCHK
         SPACE 2
* NOW TEST FOR MODIFY
ISITMOD  CLI   CIBVERB,CIBMODFY
         BNE   STOP
         LH    R1,CIBDATLN
         STH   R1,0(R5)
         LTR   R1,R1
         LA    R7,4
         BZ    TCWR
         BCTR  R1,0
         EX    R1,MOVEDATA
         B     TCWR
         SPACE 2
STOP     LA    R7,8
TCWR     TTIMER CANCEL
         QEDIT ORIGIN=CHCIBP,BLOCK=(R3)
CWR      STH   R7,0(R6)
         PLIEND
         SPACE 2
MOVEDATA MVC   2(0,R5),CIBDATA
         DROP  R2,R3
         SPACE 2
* THIS IS THE PROTOTYPE STIMER EXIT. IT IS COPIED TO THE
* DSA ALONG WITH THE PROTOTYPE ECB. IT MUST BE ALIGNED ON
* A FULLWORD BOUNDARY SO THE ECB WILL BE MOVED TO A FULLWORD
* BOUNDARY.
TIMEEXIT DS    0F
         USING *,R15
         POST  TIMEECB
         BR    R14
         DROP  R15
TIMEECB  DC    A(0)
EXITLEN  EQU   *-TIMEEXIT
         SPACE 2
COMDSA   DSECT
         DS    CL88
ECBL1    DS    A
ECBL2    DS    A
GETEXIT  DS    (EXITLEN)X
COMDSAL  EQU   *-COMDSA
PLIMISC  CSECT
         EJECT
         LTORG
         PRINT NOGEN
         CVT   DSECT=YES
         IHAPSA
         IHAASCB
         IKJTCB
         IEZJSCB
CSCB     DSECT
         IEECHAIN
CIB      DSECT
         IEZCIB
         IHALPDE
         END
./       ADD   NAME=STATDIE
* MODULE:                                                           YCC
*        STATDIE                                                    YCC
* FUNCTION:                                                         YCC
*        A SOFTWARE MONITOR TO MEASURE CPU USE, RUNNING AS A        YCC
*        COMMON AREA PAGABLE BUFFERS.                               YCC
*                                                                   YCC
*        CURRENTLY THE SAMPLED INFORMATION INCLUDES THE             YCC
*        PSW AT THE TIME OF INTERRUPT, ACTIVE PERFORMANCE           YCC
*        GROUP, COUNT OF READY TCBS ON THE DISPATCHER               YCC
*        QUEUE, SVC NUMBER IF AN SVC IS IN CONTROL, AND             YCC
*        MODULE NAME FROM THE CDE OFF THE TOP PRB IN                YCC
*        THE RB QUEUE. WHEN THE SRB IS SCHEDULED IT                 YCC
*        ALSO TRACES THE CURRENT SRM RCT VALUES, THE                YCC
*        RUA AND CMPLT IN THE DOMAIN TABLES, AND                    YCC
*        THE FRAME STATUS COUNTS IN THE PVT.                        YCC
*                                                                   YCC
* SYSTEM LEVEL:                                                     YCC
*        MVS R3.7 + SU7                                             YCC
*                                                                   YCC
*        VERSION OF 5/5/77                                          YCC
* AUTHOR:                                                           YCC
*        HOWARD GILBERT                                             YCC
*        YALE COMPUTER CENTER                                       YCC
*        175 WHITNEY AVE                                            YCC
*        NEW HAVEN, CONN 06520                                      YCC
*        203 432-4080                                               YCC
*                                                                   YCC
* COMPONENTS:                                                       YCC
*        STATDIE - INITIALIZATION ENTRY POINT                       YCC
*        DIEPURG - TERMINATION ENTRY POINT                          YCC
*        STATSTDE- FIXED DATA TABLE                                 YCC
*        DIEEXIT - STATDIE TIMER DISABLED EXIT                      YCC
*        STATFRR - RECOVERY ROUTINE FOR DIEEXIT                     YCC
*        STATSRB - STATDIE 30 SECOND SRB                            YCC
*                                                                   YCC
* EXTERNAL REFERENCES: NONE                                         YCC
*                                                                   YCC
* MACROS:      ASSORTED MACROS FROM MACLIB, AMODGEN, AND PVTMACS    YCC
         EJECT                                                      YCC
*                   INSTALLATION                                    YCC
* TARGET LIBRARY: LPALIB                                            YCC
*                                                                   YCC
* LINKEDIT PARMS: RENT,REUS,AC=1                                    YCC
*                                                                   YCC
* LINKEDIT CONTROL CARDS:                                           YCC
*            ALIAS DIEPURG                                          YCC
*            ALIAS STATSTDE                                         YCC
*            ALIAS STATWAMT                                         YCC
*            NAME STATDIE(R)                                        YCC
*                                                                   YCC
* PREREQUISITES:  MVS 37 AND SUPERVISOR 2 SU (UZ80700)              YCC
*                                                                   YCC
* SYSTEM MODIFICATIONS: NONE                                        YCC
*                                                                   YCC
* STORAGE REQUIREMENTS:                                             YCC
*            4K FIXED COMMON                                        YCC
*           80K PAGABLE COMMON (ONE PAGE FAULTED IN EVERY 30 SECONDS,
*                               THEN ALLOWED TO PAGE BACK OUT AGAIN)YCC
         SPACE 5                                                    YCC
* DISTRIBUTION:                                                     YCC
*        THIS MATERIAL IS NOT RESTRICTED IN ANY MANNER AND MAY      YCC
*        BE FREELY REPRODUCED AND DISTRIBUTED FOR ANY PURPOSE.      YCC
*        THERE ARE TWO LITTLE RULES:                                YCC
*          1) DO NOT COUNTERFIT THE 'YCC' IN COLS 69-71 OF          YCC
*             THE STANDARD DISTRIBUTED VERSION IF YOU MAKE          YCC
*             CHANGES OR ADDITIONS.                                 YCC
*          2) SEND THE AUTHOR A NOTE IF YOU HAVE INSTALLED          YCC
*             AND USED THE PROGRAM SO HE CAN KEEP TABS ON           YCC
*             ITS POPULARITY AND CAN WARN ABOUT ANY LATE            YCC
*             CORRECTIONS.                                          YCC
         EJECT                                                      YCC
*                     PROGRAMMING NOTES                             YCC
*                                                                   YCC
*     'DIE' STANDS FOR DISABLED INTERRUPT EXIT. IN MVS THERE ARE TWOYCC
* KINDS OF DIE'S, ONE FOR IO AND ONE FOR TIMER INTERRUPTS. THE DIE  YCC
* IS A USER ROUTINE IN FIXED STORAGE POINTED TO BY A USER SUPPLIED  YCC
* CONTROL BLOCK AND RELATED TO AN OUTSTANDING SERVICE REQUEST WHICH YCC
* WILL EVENTUALLY GENERATE AN INTERRUPT. THE DIE IS AN AUTHORIZED   YCC
* SYSTEM INTERFACE. THE FOLLOWING DISCUSSION RELATES ONLY TO TIMER  YCC
* DIE'S.                                                            YCC
*     THE USER SUPPLIED CONTROL BLOCK FOR TIMER SERVICES IS THE     YCC
* TIMER QUEUE ELEMENT (TQE). 'USER' HERE MUST BE UNDERSTOOD TO      YCC
* BE A BROAD TERM, BECAUSE FOR MOST USERS THE TQE IS CONSTRUCTED    YCC
* AND QUEUED BY THE STIMER SVC AND NOT BY THE APPLICATION PROGRAM.  YCC
* WITH SUPERVISOR 2 (SU 7), A NEW SYSTEM SERVICE ROUTINE WAS        YCC
* INTRODUCED TO ALLOW KEY 0 USERS TO MORE EASILY BUILD THEIR OWN    YCC
* TQE'S. THIS SERVICE IS CALLED 'SETDIE' AND IS DOCUMENTED IN       YCC
* SPL:SUPERVISOR. THERE IS NO ASSOCATED MACRO.                      YCC
*      EACH TQE CONTAINS AN INTERRUPT TIME AND A POINTER TO THE     YCC
* DIE ROUTINE. ALL TIMER MANAGEMENT IN A MULTIPROCESSOR SYSTEM      YCC
* IS CONDUCTED BY CPU 0 IF IT HAS AN OPERABLE CLOCK.                YCC
* IF THIS TQE REPRESENTS THE EARLIEST INTERRUPT IN THE QUEUE, THE   YCC
* CLOCK COMPARATOR IS CHANGED. EITHER CPU CAN ACCESS THE TQE        YCC
* CHAIN WHILE HOLDING THE DISPATCHER LOCK. IF THE CLOCK             YCC
* COMPARATOR MUST BE CHANGED, HOWEVER, CPU 1 MUST SIGP CPU 0        YCC
* TO DO THE PROCESSING.                                             YCC
*      WHEN A TIMER INTERRUPT IS HONORED ON CPU 0, THE TIMER        YCC
* SECOND LEVEL INTERRUPT HANDLER DEQUES THE TQE AND EXITS TO        YCC
* THE DIE INDICATED IN IT. CONTROL IS RECEIVED IN THE ADDRESS       YCC
* SPACE DISPATCHED WHEN THE INTERRUPT WAS RECOGNIZED, PHYSICALLY    YCC
* DISABLED, WITH THE TIME OF INTERRUPT AND REGISTERS STORED IN      YCC
* THE LCCA. THE DIE EXIT CAN ONLY REFERENCE STORAGE LOCATIONS       YCC
* IN SQA, FIXED CSA, THE NUCLEUS, OR IN THE LSQA OF THE INTERRUPTED YCC
* ADDRESS SPACE. IT RETURNS CONTROL TO THE TIMER SLIH WHICH NORMALLYYCC
* EXITS TO THE DISPATCHER.                                          YCC
*     PRIOR TO RETURNING, THE DIE CAN REINITIALIZE THE TQE AND      YCC
* REQUE IT FOR THE NEXT INTERRUPT. THE TIMER DIE IS THUS A SELF     YCC
* SUSTAINING PROCESS, TIMER DRIVEN, BUT LOGICALLY UNRELATED TO      YCC
* ANY TASK OR ADDRESS SPACE OR JOB. ONCE INITIALIZED IT CONTINUES   YCC
* TO FUNCTION UNTIL PURGED BY SOME OTHER AUTHORIZED USER OR BY      YCC
* ITS OWN INTERNAL ERROR. FURTHERMORE, IT IS A USER EXIT AND DOES   YCC
* NOT REPLACE OR EFFECT ANY STANDARD SYSTEM ROUTINES. THIS TECHNIQUEYCC
* IS IDENTICAL TO THAT USED BY MF1 AND RMF FOR THEIR DEVICE AND     YCC
* CHANNEL SAMPLING EXITS, AND BY THE SRM FOR ITS ONCE-A-SECOND      YCC
* SYSTEM STATUS EVALUATION AND PAGE STEALING EXIT, BUT IT IS        YCC
* A LOGICALLY SEPARATE FUNCTION.                                    YCC
         EJECT                                                      YCC
*      STATDIE HAS GONE THROUGH SEVERAL DEVELOPMENTAL PHASES. THIS  YCC
* VERSION IS A MAJOR MODIFICATION TO PREVIOUS RELEASES. THE PRIMARY YCC
* EMPHASIS OF THIS RELEASE HAS BEEN:                                YCC
*                                                                   YCC
* 1) THIS VERSION PROVIDES NECESSARY SUPPORT FOR OUR-MF. PREVIOUS   YCC
*    VERSIONS CONCENTRATED ONLY ON THE PSW SAMPLING FUNCTION OF     YCC
*    STATDIE, BUT OTHER SYSTEM VALUES MUST BE SAMPLED PERIODICALLY  YCC
*    IF A FULL SYSTEM MEASUREMENT FACILITY IS TO BE SUPPORTED.      YCC
*    THIS MEANS A NON-HOMOGENEOUS OUTPUT DATASET AND REQUIRES       YCC
*    MODIFICATION TO POST-PROCESSING REPORT GENERATORS.             YCC
*                                                                   YCC
* 2) THIS VERSION INSTALLS DIRECTLY ON THE RECEIVING SYSTEM WITHOUT YCC
*    ANY LOCAL MODIFICATIONS. THE PREVIOUS VERSIONS DEPENDED ON A   YCC
*    GLOBAL POINTER CHAINED OFF THE CVTUSER FIELD TO LOCATE THE     YCC
*    FIXED DATA AREA (THE STDE) WHICH WAS GETMAINED OUT OF SQA.     YCC
*    THIS IS THE ORTHODOX WAY TO RUN THIS KIND OF SYSTEM FUNCTION.  YCC
*    THIS VERSION ELIMIATES THE NEED FOR THAT POINTER BY ASSEMBLING YCC
*    THE STDE INTO THIS MODULE AND LONG-TERM FIXING THE PAGE        YCC
*    CONTAINING THIS MODULE IN CORE. THE STDE CAN THEN BE LOCATED   YCC
*    BY OTHER PROGRAMS WITH A SIMPLE 'LOAD' MACRO. THIS IS NOT AN   YCC
*    ORTHODOX WAY OF DOING BUSINESS, BUT IT WORKS WELL AND SEEMS TO YCC
*    BE THE BETTER CHOICE.                                          YCC
*                                                                   YCC
* 3) THE FEW 'GENERATION PARAMETERS' WHICH ARE THE NUMERICAL VALUES YCC
*    MOST LIKELY TO BE CHANGED BY LOCAL CONVENTION HAVE BEEN        YCC
*    SIMPLIFIED AND REORGANIZED.                                    YCC
*                                                                   YCC
* 4) LOCAL EXPERIMENTATION IS BOTH ENCOURAGED AND DISCOURAGED BY    YCC
*    THE VARIOUS CHANGES MADE IN THIS RELEASE. ON THE MINUS SIDE,   YCC
*    THE REQUIREMENT THAT THIS MODULE BE IN LPALIB MEANS THAT ITS   YCC
*    REPLACEMENT BY ORTHODOX METHODS WOULD REQUIRE A CLPA. ON THE   YCC
*    PLUS SIDE:                                                     YCC
*      THE DIEPURG ENTRY POINT WILL NOW PURGE AN ACTIVE STATDIE     YCC
*      OPERATION AND FREE THE GETMAINED STORAGE.                    YCC
*      THE MODULE REMAINS FIXED IN CORE, AND THE CODE IS RELOCATABLE,
*      SO IT IS POSSIBLE TO USE A SMALL UTILITY PROGRAM TO LOAD THE YCC
*      STATDIE MODULE FROM A STEPLIB, MODESET TO KEY ZERO, AND      YCC
*      OVERWRITE THE PURGED LPA RESIDENT VERSION.                   YCC
*      AN FRR ROUTINE HAS BEEN ADDED SO THAT ERRORS GENERATED BY    YCC
*      REFERENCING UNFIXED OR ILLEGAL STORAGE LOCATIONS DURING      YCC
*      THE DATA GATHERING PHASE OF STATDIE REMAIN LOCALLIZED        YCC
*      WITHIN STATDIE.                                              YCC
*      BY ASSIGING STATDIE A LOCATION IN LPALIB, IT IS NOW POSSIBLE YCC
*      TO USE DSS TO DEBUG STATDIE MODIFICATIONS. DSS BREAKPOINTS   YCC
*      CAN NOW BE ESTABLISHED PRIOR TO STATDIE ACTIVATION.          YCC
*                                                                   YCC
         EJECT                                                      YCC
         MACRO                                                      YCC
&LAB     BNV   &REG,&GOTO                                           YCC
.*  HYPOTHETICAL BRANCH ON NOT VALID INSTRUCTION                    YCC
.*  TESTS THE ADDRESS IN THE REGISTER FOR A NON ZERO                YCC
.*  VALID VIRTUAL ADDRESS, AND BRANCHS TO THE SECOND ARGUMENT       YCC
.*  IF THE ADDRESS FAILS THE TEST. THIS DESTROYS REGISTER 0.        YCC
.*  USES PRIVILGED LRA INSTRUCTION, SO REQUIRES SUPERVISOR STATE    YCC
&LAB     LA    &REG,0(&REG)                                       × YCC
         LTR   &REG,&REG                                          × YCC
         BZ    &GOTO                                              × YCC
         LRA   R0,0(&REG)                                         × YCC
         BC    7,&GOTO                                            × YCC
         MEND                                                       YCC
         SPACE 5                                                    YCC
         GBLA  &MILLISC                                             YCC
         EJECT                                                      YCC
STATDIE  CSECT                                                      YCC
         STATGLBL
         EJECT                                                      YCC
**                                                                  YCC
* DSECTS                                                            YCC
**                                                                  YCC
         SPACE 1                                                    YCC
         STATPSW
         EJECT
         STDE
         EJECT
         PGBUF
         SPACE 5
R0       EQU   0                                                    YCC
R1       EQU   1                                                    YCC
R2       EQU   2                                                    YCC
R3       EQU   3                                                    YCC
R4       EQU   4                                                    YCC
R5       EQU   5                                                    YCC
R6       EQU   6                                                    YCC
R7       EQU   7                                                    YCC
R8       EQU   8                                                    YCC
R9       EQU   9                                                    YCC
R10      EQU   10                                                   YCC
R11      EQU   11                                                   YCC
R12      EQU   12                                                   YCC
R13      EQU   13                                                   YCC
R14      EQU   14                                                   YCC
R15      EQU   15                                                   YCC
         EJECT                                                      YCC
*****************************************************************   YCC
* PROCEDURE:                                                    *   YCC
*        STATDIE                                                *   YCC
* FUNCTION:                                                     *   YCC
*        INITIALIZATION OF DIE PROCESSING                       *   YCC
* ATTRIBUTES:                                                   *   YCC
*        AUTHORIZED, REUSABLE                                   *   YCC
* ENTRY CONDITIONS:                                             *   YCC
*        NORMAL OS LINKAGE FOR ENTRY AND EXIT.                  *   YCC
* RETURN CODES:                                                 *   YCC
*        0  DIE ESTABLISHED NORMALLY                            *   YCC
*        4  DIE WAS ALREADY ACTIVE OR NO CLOCK AVAILABLE        *   YCC
*       12  THIS MODULE IS NOT IN THE LPA                       *   YCC
*        100-112  100 MORE THAN THE RETURN CODE FROM PAGEFIX    *   YCC
*****************************************************************   YCC
* INTERNAL PROGRAMMING CONVENTIONS:                             *   YCC
*                                                               *   YCC
* ACTIVE EXIT LABELS:                                           *   YCC
*        RESET - BRANCHED TO FROM KEY ZERO CODE. MODESETS       *   YCC
*             BACK TO PROBLEM STATE. R15 CONTAINS RETURN        *   YCC
*             CODE.                                             *   YCC
*        RET - BRANCHED TO FROM PROBLEM KEY CODE. R15           *   YCC
*             CONTAINS RETURN CODE.                             *   YCC
* REGISTER USAGE:                                               *   YCC
*        R2-R5  WORK REGISTERS                                  *   YCC
*        R6     STDE AREA POINTER                               *   YCC
*        R7     SAVEAREA ADDRESS (R13 SAVED)                    *   YCC
*        R10    BASE REGISTER                                   *   YCC
*****************************************************************   YCC
         EJECT                                                      YCC
**                                                                  YCC
* NORMAL OS ENTRY                                                   YCC
**                                                                  YCC
STATDIE  CSECT                                                      YCC
         SAVE  (14,12),,*                                           YCC
         BALR  R10,0                                                YCC
         USING *,R10                                                YCC
         USING PSA,R0                                               YCC
         SPACE 5                                                    YCC
**                                                                  YCC
* IT IS ESSENTIAL THAT THIS PROGRAM RUN IN FIXED OR PAGABLE LPA     YCC
* THE TQE WILL GO ON THE TIMER QUEUE, AND A LOT OF CODE WILL BE     YCC
* EFFECTED IF THE TQE ADDRESS IS NOT IN COMMON STORAGE.             YCC
* SO WE CHECK ITS ADDRESS TO INSURE IT IS NOT IN THE PRIVATE AREA   YCC
**                                                                  YCC
         LA    R5,4               PROVISIONALLY INDICATE FIXED LPA  YCC
         LA    R10,0(R10)                                           YCC
         LR    R7,R13                                               YCC
         LA    R15,12             PROVISIONAL RETURN CODE           YCC
         L     R2,CVTPTR                                            YCC
         L     R2,CVTPVTP-CVT(R2)                                   YCC
         USING PVT,R2                                               YCC
         LH    R0,PVTLPRIV        RBN OF LOWEST PRIVATE ADDR        YCC
         SLL   R0,8               CONVERT TO ADDRESS                YCC
         CR    R0,R10             COMPARE TO PROGRAM BASE           YCC
         BH    INLPA              TEST FOR FIXED LPA                YCC
         SR    R5,R5              CLEAR FIXED LPA INDICATION        YCC
         SR    R0,R0                                                YCC
         ICM   R0,3,PVTLCSA       PICK UP RBN OF CSA                YCC
         SLL   R0,8               CONVERT TO ADDRESS                YCC
         CR    R0,R10             TEST FOR CSA                      YCC
         BH    RET                NOGOOD IF PRIVATE                 YCC
INLPA    EQU   *                  COME HERE IF OK                   YCC
         DROP  R2                                                   YCC
         SPACE 5                                                    YCC
         LA    R6,STATSTDE                                          YCC
         USING STDE,R6                                              YCC
         LA    R15,4                                                YCC
         TM    STDELAST,STDEATIV+STDEPURG                           YCC
         BNZ   RET                                                  YCC
         SPACE 5                                                    YCC
**                                                                  YCC
* THIS BEGINS A MODESET BLOCK. CODE IN THIS BLOCK EXECUTES IN KEY 0 YCC
* AND SUPERVISOR STATE. EXIT MAY NOT BE MADE FROM THIS BLOCK EXCEPT YCC
* BY A BRANCH TO 'RESET' WHICH IS THE MODESET BACK TO PROBLEM STATE YCC
* AT THE END OF THE BLOCK                                           YCC
**                                                                  YCC
         MODESET KEY=ZERO,MODE=SUP ------------------------------>× YCC
         SPACE 5                                                  × YCC
**                                                                × YCC
* TEST FIXED LPA INDICATION IN R5 AND BYPASS FOLLOWING CODE IF    × YCC
* THIS MODULE IS ALREADY FIXED                                    × YCC
***                                                               × YCC
         LTR   R5,R5                                              × YCC
         BNZ   FIXED                                              × YCC
         SPACE 5                                                  × YCC
**                                                                × YCC
* THE STDE MUST NOW BE LONG TERM FIXED                            × YCC
* THE RSM WILL INSURE THAT THE STDE IS MOVED TO A REAL STORAGE    × YCC
* LOCATION WHICH DOES NOT INTERFERE WITH THE THE V=R REGIONS      × YCC
* OR RECONFIGURABLE STORAGE LOCATIONS.                            × YCC
**                                                                × YCC
         LA    R2,DIEEND-STATSTDE(R6)                             × YCC
         XC    0(4,R7),0(R7)  USE SAVE AREA FOR ECB               × YCC
         PGFIX R,A=(6),EA=(2),ECB=(7),LONG=Y                      × YCC
         LA    R15,100(R15)                                       × YCC
         CH    R15,=H'100'                                        × YCC
         BNE   RESET                                              × YCC
         SPACE 5                                                  × YCC
**                                                                × YCC
* AN ORTHODOX FIX DOES NOT HOLD ONCE THE TASK GOES AWAY           × YCC
* THE PREVIOUS CALL TO RSM WAS REQUIRED TO GET A 'GOOD' STORAGE   × YCC
* ADDRESS FOR THE STDE. NOW THAT IT IS POSITIONED, WE 'NAIL' THE  × YCC
* DAMN PAGE IN CORE BY MANUALLY INCREMENTING THE  FIX COUNT IN    × YCC
* THE PFTE TO 100. WHILE THIS IS NOT AN ORTHODOX OPERATION, IT    × YCC
* IS PERFECTLY WELL DEFINED IN TERMS OF THE CURRENT RSM.          × YCC
**                                                                × YCC
         LRA   R1,0(R6)           WHERE IS IT FIXED?              × YCC
         SRL   R1,12              RELATIVE PAGE                   × YCC
         SLL   R1,4               CONVERT TO RBN                  × YCC
         L     R2,CVTPTR                                          × YCC
         L     R2,CVTPVTP-CVT(R2)                                 × YCC
         USING PVT,R2                                             × YCC
         L     R2,PVTPFTP                                         × YCC
         DROP  R2                                                 × YCC
         LA    R1,0(R1,R2)                                        × YCC
         L     R0,PFTFXCT-PFTE(R1) GET FIX COUNT                  × YCC
FIXCS    LR    R2,R0                                              × YCC
         ICM   R2,12,=H'100'                                      × YCC
         CS    R0,R2,PFTFXCT-PFTE(R1)                             × YCC
         BNE   FIXCS                                              × YCC
         SPACE 3                                                  × YCC
FIXED    EQU   *                                                  × YCC
         SPACE 5                                                  × YCC
**                                                                × YCC
* NOW ZERO THE TQE AND STDE                                       × YCC
**                                                                × YCC
         LA    R2,STDE                                            × YCC
         L     R3,=A(STDELEN)                                     × YCC
         SR    R4,R4                                              × YCC
         SR    R5,R5                                              × YCC
         MVCL  R2,R4                                              × YCC
         SPACE 2                                                  × YCC
**                                                                × YCC
* OBTAIN PAGABLE BUFFERS AND SAVE THEIR ADDRESS                   × YCC
**                                                                × YCC
         LA    R2,STDEBUFP                                        × YCC
         XC    STDEWORK(10),STDEWORK                              × YCC
         GETMAIN EU,LV=PGBFCT*PGBLEN,SP=241,A=(2),BNDRY=PAGE,     × YCC*
               MF=(E,STDEWORK)                                    × YCC
         LA    R2,STDEWAMT                                        × YCC
         XC    STDEWORK(10),STDEWORK                              × YCC
         GETMAIN EU,LV=4096,SP=241,A=(2),BNDRY=PAGE,              × YCC*
               MF=(E,STDEWORK)                                    × YCC
         OI    STDELAST,STDEATIV                                  × YCC
         L     R1,STDEWAMT                                        × YCC
         XC    4(4,R1),4(R1)      ZERO WAMT LEN FIELD             × YCC
         MVC   STDEGET,GETINFO                                    × YCC
         MVC   STDELSTO,=AL2(STDEFILL-STDEENTY)
         MVC   STDEPLEN(8),=AL2(PGBLEN,PGBFCT,SRBINTVL,MAXDMN)    × YCC
         L     R2,STDEBUFP                                        × YCC
         L     R3,GETINFO                                         × YCC
         LA    R3,0(R3)                                           × YCC
         SR    R4,R4                                              × YCC
         SR    R5,R5                                              × YCC
         MVCL  R2,R4              ZERO BUFFER                     × YCC
         SPACE 5                                                  × YCC
**                                                                × YCC
* NOW FINISH OFF TQE INITIALIZATION AND BRANCH TO SETDIE          × YCC
**                                                                × YCC
         LR    R1,R6              COPY TQE ADDRESS                × YCC
         USING TQE,R1                                             × YCC
         MVC   TQEVAL(8),INCREMT-STATSTDE(R6)                     × YCC
         LA    R15,STDEEXIT                                       × YCC
         ST    R15,TQEEXIT                                        × YCC
         SPACE 2                                                  × YCC
         L     R15,CVTPTR                                         × YCC
         USING CVT,R15                                            × YCC
         L     R2,CVTPVTP
         USING PVT,R2                                             × YCC
         MVC   STDELADR+1(2),PVTLPRIV                             × YCC
         MVC   STDEHADR+1(2),PVTLCSA                              × YCC
         DROP  R2                                                 × YCC
         L     R15,CVTTPC                                         × YCC
         USING TPC,R15                                            × YCC
         L     R15,TPCSDIE                                        × YCC
         DROP  R15                                                × YCC
**                                                                × YCC
* 1) R1 CONTAINS ADDRESS OF 128 BYTE FIXED TQE, ZERO EXCEPT FOR   × YCC
*    A) TQEAID - STILL ZERO SINCE NO PERMINENT ASID IS ASSOCIATED × YCC
*          WITH THIS TQE.                                         × YCC
*    B) TQEVAL - CONTAINS TIME INTERVAL TO FIRST INTERRUPT.       × YCC
*    C) TQEEXIT - CONTAINS ADDRESS OF STDEEXIT, THE SQA RESIDENT  × YCC
*          COPY OF THE DIEEXIT CODE.                              × YCC
* 2) R2-R12 ARE UNIMPORTANT                                       × YCC
* 3) WE ARE TCB, KEY ZERO, ENABLED SUPERVISOR STATE.              × YCC
**                                                                × YCC
         BALR  R14,R15                                            × YCC
**                                                                × YCC
* LOSS OF R13-R3 HAS OCCURRED                                     × YCC
**                                                                × YCC
         DROP  R1                                                 × YCC
         DROP  R6                                                 × YCC
         SPACE 5                                                  × YCC
**                                                                  YCC
* STATDIE CONSTANTS                                                 YCC
**                                                                  YCC
         DS    0F                                                   YCC
GETINFO  DC    AL1(241),AL3(PGBFCT*PGBLEN)                          YCC
         EJECT                                                      YCC
*****************************************************************   YCC
* PROCEDURE:                                                    *   YCC
*        DIEPURG                                                *   YCC
* FUNCTION:                                                     *   YCC
*        PURGES ACTIVE STATDIE FUNCTION                         *   YCC
* PROGRAMMING NOTE:                                             *   YCC
*        THIS SOULD BE AN ALTERNATE ENTRY POINT OF STADIE       *   YCC
*        IT CAN BE INVOKED BY PGM=DIEPURG                       *   YCC
*        OR CAN BE LINKED TO BY ANY AUTHORIZED PROGRAM          *   YCC
* ATTRIBUTES:                                                   *   YCC
*        AUTHORIZED, NOT REENTRANT                              *   YCC
* ENTRY CONDITIONS:                                             *   YCC
*        NORMAL OS LINKAGE                                      *   YCC
* RETURN CODES                                                  *   YCC
*        0  DIE HAS BEEN PURGED                                 *   YCC
*        4  DIE WAS NOT ACTIVE                                  *   YCC
*        8  ERROR PURGING DIE                                   *   YCC
*****************************************************************   YCC
* PROGRAMMING NOTES:                                            *   YCC
* THERE IS NO SYNCHRONOUS WAY TO PURGE STATDIE WITHOUT          *   YCC
* A LOT OF UNNECESSARY LOCKING. IN A MP ENVIRONMENT,            *   YCC
* EITHER THE DIE OR THE SRB CAN BE ON THE OTHER CPU WHEN        *   YCC
* DIEPURG IS INVOKED. HOWEVER, EVERYTHING IS TIMER DRIVEN       *   YCC
* SO THIS ENTRY POINT SIMPLY SETS THE                           *   YCC
* STDEPURG BIT AND THEN SUSPENDS EXECUTION WITH A STIMER FOR    *   YCC
* LONG ENOUGH TO INSURE THAT THE DIE HAS TERMINATED             *   YCC
* ITSELF.                                                       *   YCC
*                                                               *   YCC
* REGISTER USAGE:                                               *   YCC
*        R5 HOLDS RETURN CODE FOR OS RETURN                     *   YCC
*        R6 POINTS TO STDE                                      *   YCC
*        R7 HOLDS R13 FROM OS ENTRY TILL THE RETURN             *   YCC
*        R10 BASE REGISTER                                      *   YCC
*****************************************************************   YCC
         EJECT                                                      YCC
         ENTRY DIEPURG                                              YCC
DIEPURG  SAVE  (14,12),,*                                           YCC
         BALR  R10,0                                                YCC
         USING *,R10                                                YCC
         LR    R7,R13                                               YCC
         LA    R6,STATSTDE                                          YCC
         USING STDE,R6                                              YCC
         LA    R5,4                                                 YCC
         TM    STDELAST,STDEATIV                                    YCC
         BZ    RETPRG                                               YCC
         SPACE 2                                                    YCC
**                                                                  YCC
* THIS BEGINS A MODESET BLOCK. CODE IN THIS BLOCK EXECUTES IN KEY 0 YCC
* AND SUPERVISOR STATE. EXIT MAY NOT BE MADE FROM THIS BLOCK        YCC
* EXCEPT BY A BRANCH TO 'RUNNING' WHICH IS THE MODESET BACK TO      YCC
* PROBLEM STATE AT THE END OF THE BLOCK                             YCC
**                                                                  YCC
         MODESET KEY=ZERO,MODE=SUP ------------------------------>× YCC
         SPACE 2                                                  × YCC
         OI    STDELAST,STDEPURG  SCHEDULE THE DIE TO PURGE SELF  × YCC
         SPACE 2                                                  × YCC
         STIMER WAIT,BINTVL=SECS WAIT A FEW SECONDS               × YCC
         SPACE 2                                                  × YCC
         LA    R5,8               PROVISIONAL RETURN CODE         × YCC
         TM    TQEFLGS-TQE(R6),TQEOFF IS TQE OFF TIMER QUEUE?     × YCC
         BZ    RUNNING            THIS IS AN ERROR, DIE STILL GOIN× YCC
         SPACE 2                                                  × YCC
         L     R1,STDEBUFP                                        × YCC
         L     R0,STDEGET                                         × YCC
         FREEMAIN R,LV=(0),A=(1) FREE PAGABLE BUFFERS             × YCC
         L     R1,STDEWAMT
         XC    STDEWAMT,STDEWAMT
         L     R0,WAMTINFO
         FREEMAIN R,LV=(0),A=(1) FREE WAMT   BUFFER               × YCC
         SPACE 2                                                  × YCC
         NI    STDELAST,X'FF'-STDEATIV-STDEPURG                   × YCC
         SR    R5,R5                                              × YCC
         DROP  R6                                                 × YCC
         SPACE 2                                                  × YCC
RUNNING  MODESET KEY=NZERO,MODE=PROB <----------------------------× YCC
         SPACE 2                                                    YCC
RETPRG   LR    R15,R5                                               YCC
         LR    R13,R7                                               YCC
         RETURN (14,12),RC=(15)                                     YCC
SECS     DC    FS4E-1'&MILLISC'   4 TIMES STATDIE INTERVAL          YCC
WAMTINFO DC    AL1(241),AL3(4096)
         LTORG                                                      YCC
         EJECT                                                      YCC
         ENTRY STATSTDE,STATWAMT                                    YCC
STATSTDE DS    0D                                                   YCC
**                                                                  YCC
* THIS IS THE STDE ONCE IT IS FIXED IN CORE                         YCC
*                                                                   YCC
* SEE THE STDE DSECT FOR A DESCRIPTION OF THE CONTENTS OF THIS      YCC
* CONTROL BLOCK                                                     YCC
**                                                                  YCC
         DC    (STDELEN)X'00'                                       YCC
         SPACE 5                                                    YCC
         ORG   STATSTDE+STDEWAMT-STDE                               YCC
STATWAMT DC    A(0)                                                 YCC
         ORG
         EJECT                                                      YCC
*****************************************************************   YCC
* PROCEDURE :                                                   *   YCC
*        DIEEXIT                                                *   YCC
*        THE SYSTEM STATISTICS TIME DISABLED EXIT               *   YCC
* ATTRIBUTES:                                                   *   YCC
*        KEY ZERO, SUPERVISOR STATE, PHYSICALLY DISABLED        *   YCC
*        RUNS IN AN ARBITRARY ADDRESS SPACE UNDER THE TIMER SLIH*   YCC
* ENTRY CONDITIONS:                                             *   YCC
*        R1  POINTS TO TQE                                      *   YCC
*        R14 CONTAINS RETURN ADDRESS                            *   YCC
*        R15 CONTAINS ENTRY POINT ADDRESS                       *   YCC
* EXIT CONDITONS:                                               *   YCC
*        NORMAL - RETURN WITH TQE REQUED FOR NEXT INTERRUPT.    *   YCC
*        PAUSED - RETURN WITH TQE REQUED BUT STDE UNCHANGED.    *   YCC
*        PURGED - RETURN WITHOUT REQUING TQE.                   *   YCC
* RECOVERY  ENVIRONMENT:                                        *   YCC
*        THE DATA GATHERING PHASE IS COVERED BY A FRR           *   YCC
*        ROUTINE WHICH PROTECTS THE INTERRUPTED TASK            *   YCC
*        FROM THE NORMAL RECOVERY OF TIMER SLIH WHEN A          *   YCC
*        TRANSLATION EXCEPTION IS RECOGNIZED IN A DIE.          *   YCC
* LOCKING CONVENTIONS:                                          *   YCC
*        THE DISP LOCK IS OBTAINED PRIOR TO CALLING THE TQE ENQUE   YCC
*        ROUTINE, AND IT IS RELEASED AFTER IT RETURNS TO US.    *   YCC
*****************************************************************   YCC
* INTERNAL PROGRAMMING CONVENTIONS:                             *   YCC
*                                                               *   YCC
* REGISTER USAGE:                                               *   YCC
*        R0-R1 WORK REGISTERS                                   *   YCC
*        R2: ADDRESS OF PSW                                     *   YCC
*        R3: ADDRESS OF ASCB OR XTLST                           *   YCC
*        R4: ADDRESS OF TCB , RB, OR CDE                        *   YCC
*        R5: WORK REGISTER                                      *   YCC
*        R6: ADDRESS OF TQE IN STDE                             *   YCC
*        R7-R8 WORK REGISTERS                                   *   YCC
*        R9 : HOLDS THE RETURN ADDRESS                          *   YCC
*        R10: BASE REGISTER                                     *   YCC
*        NO REGISTERS ARE SAVED OR RESTORED BY THIS EXIT        *   YCC
*        SETLOCK DESTROYS R11-14                                *   YCC
*                                                               *   YCC
* ACTIVE EXIT LABELS:                                           *   YCC
*        REQUE - BRANCH TO FROM WITHIN SETFRR BLOCK             *   YCC
*        REQUE2- BRANCH TO FROM OUTSIDE SETFRR BLOCK            *   YCC
*****************************************************************   YCC
         EJECT                                                      YCC
DIEEXIT  DS    0H                                                   YCC
         LR    R10,R15            R10 IS THE BASE                   YCC
         USING DIEEXIT,R10                                          YCC
         LR    R6,R1                                                YCC
         USING STDE,R6                                              YCC
         STCK  STDEITOD
         LR    R9,R14                                               YCC
         TM    STDELAST,STDEPURG                                    YCC
         BZ    CONT                                                 YCC
         NI    STDELAST,X'FF'-STDEPURG                              YCC
         BR    R14                                                  YCC
CONT     EQU   *                                                    YCC
         TM    STDELAST,STDEPAUS                                    YCC
         BO    REQUE2             WAIT TILL NEXT INTERVAL           YCC
         SPACE 5                                                    YCC
         LA    R2,STATFRR                                           YCC
         ST    R2,STDEWORK                                          YCC
**                                                                  YCC
* THIS BEGINS A FRR BLOCK. EXIT CANNOT BE MADE FROM THIS BLOCK      YCC
* EXCEPT FOR A BRANCH TO 'REQUE' WHICH IS THE LABEL OF THE          YCC
* SETFRR MACRO INSTRUCTION WHICH DELETES THE TOP FRR FROM THE       YCC
* STACK. THE FRR ITSELF IS DOCUMENTED BELOW.                        YCC
**                                                                  YCC
         SETFRR A,FRRAD=STDEWORK,WRKREGS=(7,8) ------------------>× YCC
         SPACE 5                                                  × YCC
**                                                                × YCC
* FIND THE NEXT ENTRY IN THE STDE AND STORE IT IN R2              × YCC
**                                                                × YCC
         SR    R2,R2                                                YCC
         ICM   R2,7,STDELAST+1    GET LAST USED ENTRY OFFSET      × YCC
         LA    R2,PSWLEN(R2)           BUMP BY PSW LENGTH         × YCC
         CH    R2,=AL2(STDELNTY-STDEENTY)                         × YCC
         BL    NOTFULL                                            × YCC
         TM    STDELAST,STDESRBA
         BNZ   REQUE
         MVC   STDEENTY(5*PSWLEN),STDESPIL
         LA    R2,5*PSWLEN
NOTFULL  EQU   *                                                  × YCC
         STCM  R2,7,STDELAST+1    SAVE FOR NEXT ENTRY             × YCC
         LA    R2,STDEENTY(R2)    GET ADDRESS OF ENTRY            × YCC
         SPACE 5                                                  × YCC
**                                                                × YCC
* PUT PSW INTO THE TRACE ENTRY AND CLEAR SPECIAL BITS             × YCC
**                                                                × YCC
         USING PSW,R2                                             × YCC
         MVC   PSW(8),FLCEOPSW                                    × YCC
         NI    PSWMASK,PSWKEY+PSWWAIT+PSWPROB CLEAR SPECIAL BITS  × YCC
         MVI   PSWSVC,0                                           × YCC
         MVC   PSWNAME,=CL8' '                                    × YCC
         SPACE 5                                                  × YCC
**                                                                × YCC
* PUT THE PG # INTO THE PSW, SAVE ASCB ADDR IN R3                 × YCC
**                                                                × YCC
         L     R3,PSAAOLD                                         × YCC
         USING ASCB,R3                                            × YCC
         MVI   PSWPG,0                                            × YCC
         LTR   R3,R3                                              × YCC
         BZ    REQUE                                              × YCC
         L     R5,ASCBOUCB                                        × YCC
         MVC   PSWPG,OUCBNPG-OUCB(R5)                             × YCC
         SPACE 5                                                  × YCC
*****                                                             × YCC
* NOW, A LOT OF INTERRUPTS OCCUR IN THE THREE ENABLING            × YCC
* INSTRUCTIONS ASSOCIATED WITH THE RELEASE OF A GLOBAL SPIN       × YCC
* LOCK. IT IS NOT INFORMATIVE TO LEAVE THE PSW POINTING           × YCC
* TO IEAVELK. THE REAL USER HAS LEFT HIS ADDRESS IN R14           × YCC
* WHICH THE EXTERNAL FLIH STORED IN THE LCCA. WE MOVE THAT        × YCC
* ADDRESS TO THE INSTRUCTION PART OF THE PSEUDO-PSW. WE           × YCC
* DONT HAVE DIRECT INFORMATION ON THE LOCATION OF IEAVELK,        × YCC
* BUT WE CAN FAKE IT WITH POINTERS IN THE LIT (LOCK INTERFACE     × YCC
* TABLE). I WANT TO KNOW WHEN THIS ADJUSTMENT HAS BEEN            × YCC
* MADE, SO I MAKE THE PSW ADDRESS ODD.                            × YCC
*****                                                             × YCC
         L     R5,PSALITA                                         × YCC
         L     R5,X'44'(R5)       ->GSLUMOBT AT IEAVELK+X'16'     × YCC
         C     R5,PSWINST                                         × YCC
         BH    NOTELK                                             × YCC
         LA    R5,X'DEA'(R5)      ->END OF IEAVELK, APPROXIMATELY × YCC
         C     R5,PSWINST                                         × YCC
         BL    NOTELK                                             × YCC
         L     R5,PSALCCAV                                        × YCC
         L     R5,LCCAXGR1-LCCA+14*4(R5) FIND R4                  × YCC
         LA    R5,1(R5)           CLEAR HIGH BYTE AND ODDIFY      × YCC
         ST    R5,PSWINST                                         × YCC
NOTELK   EQU   *                                                  × YCC
         EJECT                                                    × YCC
**                                                                × YCC
* SPECIAL PROGRAMMING NOTE FOR THIS SECTION                       × YCC
*                                                                 × YCC
* THE TCB AND RB CHAIN SEEMS TO BE MAINTAINED UNDER               × YCC
* THE LOCAL LOCK. WE CANNOT OBTAIN THAT LOCK, AND SO CANNOT       × YCC
* GUARANTEE THE INTEGRITY OF THE CHAIN. THE FOLLOWING CODE        × YCC
* ATTEMPTS TO VALIDATE THE ADDRESSES IT USES PRIOR TO             × YCC
* REFERENCING  STORAGE LOCATIONS. OCCASIONAL SPURIOUS             × YCC
* RESULTS COULD OCCUR IF WE HAVE INTERRUPTED LINK, XCTL,          × YCC
* ATTACH OR SVC 3. WITHOUR THIS CHECK, STATDIE WOULD              × YCC
* GO DOWN ABOUT ONCE EVERY TWO HOURS.                             × YCC
**                                                                × YCC
         SPACE 2                                                  × YCC
**                                                                × YCC
* SET THE PSWSVC CODE AS FOLLOWS:                                 × YCC
*   =0 IF NOT IN TCB MODE CURRENTLY                               × YCC
*   OR SET TO INTERRUPT CODE AT OFFSET (-1) IN RB PREFIX          × YCC
*        IF TYPE 1 SVC                                            × YCC
*   OR SET TO INTERRUPT CODE AT OFFSET (-1) OF RB PREFIX OF       × YCC
*        PREVIOUS RB IF CURRENT RB IS AN SVRB                     × YCC
*   OR =0  FOR NON-SVC TCBMODE                                    × YCC
**                                                                × YCC
         L     R4,PSATOLD         GET TCB PTR                     × YCC
         BNV   R4,NONAME          QUIT IF INVALID                 × YCC
         USING TCB,R4                                             × YCC
         L     R4,TCBRBP          GET CURRENT RB ADDR             × YCC
         BNV   R4,NONAME          QUIT IF INVALID                 × YCC
         USING RBBASIC,R4                                         × YCC
         TM    ASCBFLG1,ASCBTYP1  IF TYPE 1 SVC IN CONTROL        × YCC
         DROP  R3                                                 × YCC
         BZ    ISITSVRB                                           × YCC
         OI    PSWMASK,PSWSVCMD   IN SVC MODE                     × YCC
         LA    R5,0(R4)           THEN GET SVC NUMBER FROM        × YCC
         BCTR  R5,0                  OFFSET -1 IN CURRENT RB      × YCC
         MVC   PSWSVC(1),0(R5)          PREFIX.                   × YCC
         B     SVCSET                                             × YCC
ISITSVRB TM    RBSTAB1,RBFTSVRB     ELSE IF THIS IS AN SVRB       × YCC
         BNO   NOTSVC             THEN                            × YCC
         OI    PSWMASK,PSWSVCMD   IN SVC MODE                     × YCC
         L     R4,RBLINK          GET SVC NUMBER FROM             × YCC
         LA    R5,0(R4)              OFFSET -1 IN THE PREVIOUS    × YCC
         BCTR  R5,0                      RB PREFIX                × YCC
         MVC   PSWSVC(1),0(R5)                *                   × YCC
SVCSET   EQU   *                                                  × YCC
NOTSVC   EQU   *                                                  × YCC
         SPACE 1                                                  × YCC
**                                                                × YCC
* NOW TO LOCATE THE HIGHEST PRB IN THE RB CHAIN                   × YCC
* AND FIND THE NAME OF THE PROGRAM RUNNING IN THE ADDRESS SPACE   × YCC
**                                                                × YCC
         LA    R5,10              PREVENT LOOP                    × YCC
ISITPRB  TM    RBSTAB1,RBFTP                                      × YCC
         BZ    GOTPRB                                             × YCC
         L     R4,RBLINK                                          × YCC
         BNV   R4,NONAME          QUIT IF INVALID                 × YCC
         BCT   R5,ISITPRB                                         × YCC
GOTPRB   L     R4,RBCDE                                           × YCC
         USING CDENTRY,R4                                         × YCC
         BNV   R4,NONAME          QUIT IF INVALID                 × YCC
         MVC   PSWNAME,CDNAME                                     × YCC
         L     R1,PSWINST                                         × YCC
         C     R1,STDELADR                                        × YCC
         BL    NONAME                                             × YCC
         C     R1,STDEHADR                                        × YCC
         BH    NONAME                                             × YCC
         SPACE 2                                                  × YCC
**                                                                × YCC
* FIRST LEVEL PSW INSTRUCTION ADDRESS ADJUSTMENT                  × YCC
* IF THE INSTRUCTION IS IN THE EXTENT OF THE MODULE REPRESENTED   × YCC
* BY THE TOP PRB, THEN SUBTRACT THE ORIGIN OF THE MODULE          × YCC
* FROM THE PSW ADDRESS AND SET THE HIGH ORDER BIT OF THE          × YCC
* PSW SECOND WORD ON TO INDICATE RELATIVE ADDRESSING              × YCC
**                                                                × YCC
         TM    CDATTR2,CDXLE      IS THERE AN XLST                × YCC
         BZ    JOBPAK             NO, QUIT                        × YCC
         L     R3,CDXLMJP         GET ITS ADDRESS                 × YCC
         BNV   R3,NONAME                                          × YCC
         USING XTLST,R3                                           × YCC
         LM    R7,R8,XTLMSBLA     PICK UP LEN AND ADDR            × YCC
         CR    R8,R1                                              × YCC
         BH    JOBPAK             YES, QUIT                       × YCC
         LA    R7,0(R7,R8)        GET END OF MODULE               × YCC
         CR    R7,R1                                              × YCC
         BL    JOBPAK             YES, QUIT                       × YCC
         SR    R1,R8              BY SUBTRACTING ORIGIN           × YCC
         O     R1,HIGHBIT         AND FLAG BIT 0                  × YCC
         ST    R1,PSWINST         SAVE BACK                       × YCC
         B     KNOWNAME                                           × YCC
         SPACE 5                                                  × YCC
**                                                                × YCC
* THE FOLLOWING CODE IS NORMALLY BYPASSED                         × YCC
* TO AVOID NUNECESSARY PROCESSING. IT WILL SEARCH                 × YCC
* THE JOBPACK FOR A CDE ASSOCIATED WITH A MODULE WHICH INCLUDES   × YCC
* THE INSTRUCTION ADDRESS. IF ONE IS FOUND, THE INSTRUCTION       × YCC
* IS RELATIVIZED AND THE CDENAME IS REPLACED. THIS CODE           × YCC
* CAN BE TURNED ON IF YOU WANT TO TRACK CPU ACTIVITY IN           × YCC
* MULTIMODULE PROGRAMS, BUT IS NOT THE KIND OF THING YOU          × YCC
* DO ALL THE TIME.                                                × YCC
**                                                                × YCC
JOBPAK   B     KNOWNAME           ** ZAP TO NOP FOR ACTIVATION ** × YCC
         LA    R5,20              LIMIT SEARCH                    × YCC
         L     R4,PSATOLD                                         × YCC
         L     R4,TCBJPQ-TCB(R4)                                  × YCC
NXTCDE   BNV   R4,NONAME                                          × YCC
         TM    CDATTR2,CDXLE      IS THERE AN XLST                × YCC
         BZ    CHAINCDE             NO, NEXT                      × YCC
         L     R3,CDXLMJP         GET ITS ADDRESS                 × YCC
         BNV   R3,NONAME                                          × YCC
         LM    R7,R8,XTLMSBLA     PICK UP LEN AND ADDR            × YCC
         CR    R8,R1                                              × YCC
         BH    CHAINCDE             YES, NEXT                     × YCC
         LA    R7,0(R7,R8)        GET END OF MODULE               × YCC
         CR    R7,R1                                              × YCC
         BL    CHAINCDE             YES, NEXT                     × YCC
         SR    R1,R8              BY SUBTRACTING ORIGIN           × YCC
         O     R1,HIGHBIT         AND FLAG BIT 0                  × YCC
         ST    R1,PSWINST         SAVE BACK                       × YCC
         MVC   PSWNAME,CDNAME                                     × YCC
         B     KNOWNAME                                           × YCC
CHAINCDE L     R4,CDCHAIN                                         × YCC
         BCT   R5,NXTCDE                                          × YCC
KNOWNAME EQU   *                                                  × YCC
NONAME   EQU   *                                                  × YCC
         DROP  R3                                                 × YCC
         DROP  R4                                                 × YCC
         EJECT                                                    × YCC
**                                                                × YCC
* NOW SET THE SPECIAL STATUS BIT FOR SRB MODE                     × YCC
**                                                                × YCC
         L     R4,PSALCCAV                                        × YCC
         USING LCCA,R4                                            × YCC
         TM    LCCADSF2,LCCASRBM                                  × YCC
         BZ    NOTSRB                                             × YCC
         OI    PSWMASK,PSWSRB                                     × YCC
NOTSRB   EQU   *                                                  × YCC
         DROP  R4                                                 × YCC
         SPACE 5                                                  × YCC
*****                                                             × YCC
* NOW IF THE BUFFER WAS JUST FILLED, WE SCHEDULE AN SRB IN        × YCC
* THE MASTER SCHEDULER ADDRESS SPACE TO PAGEFAULT IN THE          × YCC
* NEXT PAGABLE BUFFER AND COPY THE FIXED BUFFER INTO IT.          × YCC
* UNTIL IT COMPLETES, THE STDESRBA FLAG IS SET                    × YCC
*****                                                             × YCC
         SR    R0,R0                                                YCC
         ICM   R0,7,STDELAST+1                                    × YCC
         CH    R0,=AL2(STDEFILL-STDEENTY)
         BNE   REQUE
         SPACE 1                                                  × YCC
SCHED    DS    0H                                                 × YCC
* ZERO THE SRB BECAUSE IT IS NOT CLEAR IF IT CAN BE REUSED        × YCC
* UNLESS FIRST CLEARED. GETTING THE SRB ROUNTINE ENTRY POINT      × YCC
* ADDRESS REQUIRES A LITTLE WORK, BECAUSE WE NEED THE ADDRESS     × YCC
* OF THE COPY OF STATSRB WHICH WAS COPIED TO THE END OF THE       × YCC
* STDE, AND BECAUSE THAT LOCATION CAN BE >4096 FROM THE AVAILABLE × YCC
* BASE REGISTER. SET THE STDESRBA BIT SO WE DO NOT ADD ANOTHER    × YCC
* PSW TO THE FIXED BUFFER UNTIL IT HAS BEEN COPIED BY THE SRB.    × YCC
         XC    STDESRB,STDESRB                                    × YCC
         LA    R7,STDESRB                                         × YCC
         USING SRB,R7                                             × YCC
         MVC   SRBID,=CL4'SRB'                                    × YCC
         LA    R1,(STATSRB-DIEEXIT)+STDEEXIT-1024                 × YCC
         LA    R1,1024(R1)                                        × YCC
         ST    R1,SRBEP                                           × YCC
         L     R1,CVTPTR                                          × YCC
         L     R1,CVTASVT-CVT(R1)                                 × YCC
         L     R1,ASVTENTY-ASVT(R1)                               × YCC
         ST    R1,SRBASCB                                         × YCC
REQUE2   DS    0H                                                   YCC
         USING TQE,R6             SAME VALUE , DIFFERENT DSECT      YCC
         LM    R0,R1,TQEVAL                                         YCC
         AL    R1,INCREMT+4                                         YCC
         BC    12,*+8                                               YCC
         AL    R0,=F'1'                                             YCC
         AL    R0,INCREMT                                           YCC
         STM   R0,R1,TQEVAL                                         YCC
         USING STDE,R6
         SPACE 5
LOCK     SETLOCK OBTAIN,TYPE=DISP,MODE=UNCOND,DISABLED,  -------->× YCC*
               RELATED=UNLOCK                                     × YCC
         SPACE 5                                                  × YCC
*****                                                             × YCC
* COUNT READY TCBS                                                × YCC
*****                                                             × YCC
         TM    STDELAST,STDEPAUS                                  × YCC
         BO    NOCOUNT                                            × YCC
         SR    R1,R1                                              × YCC
         L     R3,CVTPTR                                          × YCC
         L     R3,CVTASCBH-CVT(R3)                                × YCC
         USING ASCB,R3                                            × YCC
ASLP     LTR   R3,R3                                              × YCC
         BZ    LASTASCB                                           × YCC
         A     R1,ASCBTCBS                                        × YCC
         S     R1,ASCBCPUS                                        × YCC
         L     R3,ASCBFWDP                                        × YCC
         B     ASLP                                               × YCC
         DROP  R3                                                 × YCC
LASTASCB STC   R1,PSWRDY                                          × YCC
         DROP R2                                                  × YCC
NOCOUNT  EQU   *                                                  × YCC
         SPACE 5                                                    YCC
         L     R15,CVTPTR                                         × YCC
         USING CVT,R15                                            × YCC
         L     R15,CVTQTE00                                       × YCC
         DROP  R15                                                × YCC
         LR    R1,R6                                              × YCC
**                                                                × YCC
* NOW TO CALL THE TQE ENQUE ROUTINE                               × YCC
* 1) IN SUPERVISOR STATE, KEY 0, UNDER DISP LOCK                  × YCC
* 2) TQEVAL CONTAINS THE TOD FOR THE NEXT INTERRUPT               × YCC
* 3) THE REST OF THE TQE IS UNCHANGED FROM ENTRY TO DIE.          × YCC
* 4) R1 CONTAINS THE ADDRESS OF THE TQE                           × YCC
* 5) R2 CONTAINS THE RETURN ADDRESS                               × YCC
**                                                                × YCC
         BALR  R2,R15                                             × YCC
UNLOCK   SETLOCK RELEASE,TYPE=DISP,DISABLED,RELATED=LOCK   <------× YCC
         SPACE 5                                                    YCC
**                                                                  YCC
* RETURN                                                            YCC
**                                                                  YCC
         STCK  STDEWORK
         LM    R0,R1,STDEWORK
         SL    R1,STDEITOD+4
         BC    3,*+6
         BCTR  R0,0
         SL    R0,STDEITOD
         AL    R1,STDECPUT+4
         BC    12,*+8
         AL    R0,=F'1'
         AL    R0,STDECPUT
         STM   R0,R1,STDECPUT
         LR    R14,R9                                               YCC
         BR    R14                                                  YCC
         DROP  R6                                                   YCC
         DROP  R10                                                  YCC
         SPACE 5                                                    YCC
**                                                                  YCC
* CONSTANTS                                                         YCC
**                                                                  YCC
         DS    0F                                                   YCC
INCREMT  DC    FL8S32E-3'&MILLISC'                                  YCC
HIGHBIT  DC    XL4'80000000'                                        YCC
         LTORG                                                      YCC
         EJECT                                                      YCC
*****************************************************************   YCC
* PROCEDURE                                                     *   YCC
*        STATFRR                                                *   YCC
* FUNCTION:                                                     *   YCC
*        FUNCTIONAL RECOVERY ROUTINE FOR DIEEXIT                *   YCC
* PROGRAMMING NOTE:                                             *   YCC
*        DIEEXIT DOES NOT OBTAIN ANY IMPORTANT RESOURCES WHILE  *   YCC
*        THIS ROUTINE IS ON THE FRR STACK, AND THIS             *   YCC
*        ROUTINE DOES NOT ATTEMPT ANY SIGNIFICANT RECOVERY.     *   YCC
*        INSTEAD, IT RETURNS TO THE TIMER SLIH WITHOUT          *   YCC
*        REQUEING THE TQE, THUS PURGING STATDIE PROCESSING.     *   YCC
*        THE REAL REASON FOR THIS CODE IS THAT IF THE           *   YCC
*        FRR ROUTINE OF THE TIMER SLIH GETS CONTROL FOR         *   YCC
*        ANY ERROR, IT WILL MEMTERM THE INTERRUPTED ADDRESS     *   YCC
*        SPACE. AS DISTRIBUTED, STATDIE HAS RUN AT YALE         *   YCC
*        FOR MANY DAYS WITHOUT ERROR, BUT YOU ARE               *   YCC
*        ENCOURAGED TO MAKE YOUR OWN MODS AND EXPERIMENT        *   YCC
*        WITH NEW IDEAS. IF A STATDIE SEGMENT EXCEPTION         *   YCC
*        WERE ALLOWED TO BLOW UP A RANDOM ADDRESS SPACE,        *   YCC
*        IT WOULD MAKE THIS CODE VERY UNPOPULAR IN              *   YCC
*        SYSTEMS WITH BIG IMS TP APPLICATIONS. SO WE            *   YCC
*        CATCH THE ERROR OURSELVES AND GO AWAY QUIETLY.         *   YCC
*****************************************************************   YCC
         SPACE 5                                                    YCC
STATFRR  DS    0H                                                   YCC
         USING *,R15                                                YCC
         USING SDWA,R1                                              YCC
         L     R9,SDWAGR09                                          YCC
         SETRP RC=4,RETADDR=(9),RECORD=YES,RECPARM=FRRID            YCC
         BR    R14                                                  YCC
FRRID    DC    C'STATDIE DIEEXIT STATFRR '                          YCC
         DROP  R15                                                  YCC
         DROP  R1                                                   YCC
         EJECT                                                      YCC
*****************************************************************   YCC
* PROCEDURE                                                     *   YCC
*        STATSRB                                                *   YCC
*        THE SYSTEM STATISTICS SRB ROUTINE                      *   YCC
*        COPIES PSW'S TO PAGABLE CSA                            *   YCC
* ATTRIBUTES                                                    *   YCC
*        KEY ZERO, SUPERVISOR, ENABLED, MASTER ADDRESS SPACE    *   YCC
*        SRB MODE                                               *   YCC
* LOCKING CONVENTIONS:                                          *   YCC
*        THE LOCAL AND CMS LOCKS ARE OBTAINED AND RELEASED.     *   YCC
*****************************************************************   YCC
* REGISTER USAGE                                                *   YCC
*        R0-R6 WORK REGISTERS AND MVCL                          *   YCC
*        R7 POINTS TO PAGABLE BUFFER                            *   YCC
*        R8 POINTS TO STDE                                      *   YCC
*        R9 HOLDS RETURN ADDRESS                                *   YCC
*        R10 BASE REGISTER                                      *   YCC
*        R11-R14 USED BY SETLOCK                                *   YCC
*        NO REGISERS ARE SAVED OR RESTORED                      *   YCC
*****************************************************************   YCC
         EJECT                                                      YCC
STATSRB  DS    0H                                                   YCC
         LR    R8,R0                                                YCC
         USING STDESRB,R8                                           YCC
         BALR  R10,0                                                YCC
         USING *,R10                                                YCC
         LR    R9,R14                                               YCC
         SPACE 1                                                    YCC
**                                                                  YCC
* ADDRESS THE SPECIFIC PAGABLE BUFFER FROM THE PGB POOL             YCC
**                                                                  YCC
         SR    R2,R2                                                YCC
         L     R1,STDEBUFP        GET FIRST PAGABLE BUFFER          YCC
         IC    R2,STDENXBF        AND NEXT BUFFER OFFSET            YCC
         MH    R2,=AL2(PGBLEN)                                      YCC
         LA    R7,0(R1,R2)        ADDRESS TARGET BUFFER             YCC
         USING PGBUF,R7                                             YCC
         SPACE 1                                                    YCC
         STCK  PGBTOD                                               YCC
         SPACE 1                                                    YCC
**                                                                  YCC
* MOVE THE PSWS FROM THE FIXED BUFFER TO THE PAGABLE BUFFER.        YCC
**                                                                  YCC
         MVC   PGBPSWD,PSWDSCR                                      YCC
         LA    R0,PGBPSWS                                           YCC
         LH    R1,=AL2(FXBUFL)    BYTE LENGTH OF BUFFER             YCC
         LR    R3,R1              IN SOURCE AND TARGET              YCC
         LA    R2,STDEENTY        SOURCE IS FIXED BUFFER            YCC
         MVCL  R0,R2              MOVE IT OR LOSE IT                YCC
         SPACE 1                                                    YCC
**                                                                  YCC
* LOCATE THE RCT AND MOVE THE 5 SRM VALUES TO THE PAGABLE BUFFER    YCC
**                                                                  YCC
         L     R1,CVTPTR                                            YCC
         L     R1,CVTOPCTP-CVT(R1)                                  YCC
         USING IRARMCNS,R1                                          YCC
         MVC   PGBRCTD,RCTDSCR                                      YCC
         MVC   PGBRCT(10),RCVUICA                                   YCC
         SPACE 1                                                    YCC
**                                                                  YCC
*  MOVE THE MPLT AND RUA FROM UP TO 'MAXDMN' DOMAINS TO THE         YCC
* PAGABLE BUFFER                                                    YCC
**                                                                  YCC
         LA    R2,DMDTEND-DMDT    LENGTH OF DMDT ENTRY              YCC
         L     R3,RMCTDMDE        LAST DMDT ENTRY                   YCC
         L     R1,RMCTDMDT        FIRST DMDT ENTRY                  YCC
         USING DMDT,R1                                              YCC
         MVC   PGBDMND,DMNDSCR    BUILD RECORD DESCRIPTOR           YCC
         LA    R4,4               INCREMENT                         YCC
         LA    R5,PGBDMN+MAXDMN*4                                   YCC
         LA    R6,PGBDMN          ADDRESS TARGET                    YCC
DMNLOOP  MVC   0(4,R6),DMDTMPLT   MOVE MPLT AND RUA                 YCC
         BXH   R1,R2,ENDDMN       CHECK FOR LAST DOMAIN             YCC
         BXLE  R6,R4,DMNLOOP      CHECK FOR MAXDMN                  YCC
ENDDMN   EQU   *                                                    YCC
         SPACE 2                                                    YCC
         L     R1,CVTPTR                                            YCC
         L     R1,CVTPVTP-CVT(R1)                                   YCC
         USING PVT,R1                                               YCC
         MVC   PGBPVTD,PVTDSCR                                      YCC
         MVC   PGBAFC,PVTAFC                                        YCC
         MVC   PGBPOOL,PVTPOOL                                      YCC
         MVC   PGBCFMCT,PVTCFMCT                                    YCC
         MVC   PGBCNTFX,PVTCNTFX                                    YCC
         MVC   PGBSQAFX,PVTSQAFX                                    YCC
         MVC   PGBCOMFX,PVTCOMFX                                    YCC
         SPACE 2                                                    YCC
         SR    R1,R1              NOW INCREMENT OFFSET              YCC
         IC    R1,STDENXBF                                          YCC
         LA    R1,1(R1)           BY ONE                            YCC
         CH    R1,=AL2(PGBFCT)    BUT IF IT IS BIGGER THAN          YCC
         BL    *+6                PAGABLE BUFFER COUNT              YCC
         SR    R1,R1              GO TO ZERO OFFSET                 YCC
         STC   R1,STDENXBF                                          YCC
         NI    STDELAST,X'FF'-STDESRBA  DIE WILL START UP AGAIN     YCC
         BR    R9                                                   YCC
         SPACE 2                                                    YCC
* PROTOTYPE RDW'S FOR PAGABLE BUFFER                                YCC
PSWDSCR  DC    AL1(PGRPSWS,PSWLEN)                                  YCC
         DC    AL2(FXBUFL)                                          YCC
RCTDSCR  DC    AL1(PGRRCT,10)                                       YCC
         DC    AL2(12)                                              YCC
DMNDSCR  DC    AL1(PGRDMN,4)                                        YCC
         DC    AL2(MAXDMN*4)                                        YCC
PVTDSCR  DC    AL1(PGRPVT,12)                                       YCC
         DC    AL2(12)                                              YCC
         LTORG                                                      YCC
         SPACE 2                                                    YCC
STATPCH  DC    (4096-*+STATDIE)X'00'                                YCC
DIEEND   EQU   *                                                    YCC
DIELEN   EQU   *-DIEEXIT                                            YCC
         EJECT                                                      YCC
         PRINT NOGEN                                                YCC
**                                                                  YCC
* WE WOULD LIKE TO HAVE A USABLE SET OF MAPPING MACROS FOR THE      YCC
* SRM CONTROL BLOCKS IN IRARMCNS, BUT NONE OF THE DISTRIBUTED       YCC
* MACROS REALLY WORK AS ASSEMBLER DSECTS. SO IT IS NECESSARY        YCC
* TO ROLL OUR OWN UNTIL IBM GETS ON THE STICK                       YCC
***                                                                 YCC
IRARMCNS DSECT                                                      YCC
         ORG   IRARMCNS+180                                         YCC
RMCTDMDT DS    A                                                    YCC
RMCTDMDE DS    A                                                    YCC
         ORG   IRARMCNS+X'1F8'                                      YCC
         IRARCT DSECT=NO                                            YCC
**                                                                  YCC
* MAPPING MACROS                                                    YCC
**                                                                  YCC
         IHAPVT                                                     YCC
         IHAPFTE                                                    YCC
         SPACE 3                                                    YCC
         IHAPSA                                                     YCC
         IHAASVT                                                    YCC
         IHASRB                                                     YCC
         IHAASCB                                                    YCC
         IHATQE                                                     YCC
         IHALCCA                                                    YCC
         IRAOUCB                                                    YCC
         IRADMDT                                                    YCC
         IEAVVTPC                                                   YCC
         IHARB                                                      YCC
         IHACDE                                                     YCC
         IHAXTLST                                                   YCC
         IHAFRRS                                                    YCC
         IHASDWA                                                    YCC
         IKJTCB                                                     YCC
         CVT   DSECT=YES                                            YCC
         END   ,                                                    YCC
./       ADD   NAME=CNTLCRD
  %PAGE;
 /* THIS IS A PACKAGE OF SUBROUTINES WHICH CAN BE USED TO            */
 /* PARSE CONTROL CARDS OF THE FORM:                                 */
 /*                                                                  */
 /*     KEYWORD(VAL1 VAL2 ... VALN) /* COMMENT */
 /*                                                                  */
 /* THIS PACKAGE IS EXTRACTED FOR OURMF FROM A PLI PROGRAM WHICH     */
 /* READS SMP PTFIN CARDS.                                           */
 /* THE PROPER USE OF THIS PACKAGE IS DEMONSTRATED IN THE            */
 /* OURMF PROGRAM. ONE CALLS SUBROUTINE 'KEYWORD' TO GET THE         */
 /* NEXT KEYWORD AND VALUE LIST. THE KEWORD IS RETURNED IN           */
 /* VARIABLE 'KEY'. THE VALUES ARE RETURNED IN ARRAY 'VAL'.          */
 /* WHY IS THIS NOT AN EXTERNAL PROCEDURE? MY EXPERIENCE IS THAT     */
 /* THE TYPE, LENGTH, AND COUNT OF KEYWORDS AND VALUES IN ONE        */
 /* PROGRAM DIFFER SUBSTANTIALLY FROM THOSE IN OTHER PROGRAMS,       */
 /* AND I DO NOT HAVE SUFFICIENT INSIGHT INTO THE REQUIREMENTS       */
 /* OF ALL POST-PROCESSORS TO CAST THIS THING IN CONCRETE YET.       */
 /* YOU CAN INCLUDE THIS SECTION WITH THE PREPROCESSOR OR CAN        */
 /* COPY IT INTO YOUR PROGRAM AND MODIFY IT WITH THE EDITOR,         */
 /* DEPENDING ON YOUR NEEDS.                                         */
  DCL (CARD,LASTCARD) CHAR(80) INIT(' ');
  DCL KEY CHAR(8);
  DCL VAL(15) CHAR(44) VAR;
  DCL NVALS FIXED BIN;
  DCL LENWORD FIXED BIN INIT(0);
   DCL CMT BIT(1) ALIGNED INIT('0'B);
 % PAGE;
  GETWORD:PROC REORDER;
 /* PROCEDURE: GETWORD                                               */
 /* FUNCTION: LOCATE THE NEXT WORD ON THE CONTROL CARD               */
 /* ENTRY CONDITIONS:                                                */
 /*     THE UNSCANNED SECTION OF THE CURRENT CONTROL CARD            */
 /*     IS LEFT JUSTIFIED IN VARIABLE 'CARD'.                        */
 /* EXIT:                                                            */
 /*     RETURNS TO CALLER WITH VARIABLE 'LENWORD' SET TO             */
 /*     THEN LENGTH OF THE NEXT WORD ON THE CONTROL CARD.            */
 /* EXTERNAL:                                                        */
 /*     CALLS GETCARD TO OBTAIN A NEW CARD IF THE CURRENT ONE        */
 /*     IS BLANK                                                     */
     DCL I FIXED BIN;
     CARD=SUBSTR(CARD,LENWORD+1);
 GW1:     I=VERIFY(CARD,', ');
     IF I=0 THEN
          DO;
          CALL GETCARD;
          GO TO GW1;
          END;
     CARD=SUBSTR(CARD,I);
     LENWORD=MAX(1,VERIFY(CARD,
         'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$.')-1);
     END;
  %PAGE;
 KEYWORD:PROC REORDER;
 /* PROCEDURE: KEYWORD                                               */
 /* FUNCTION: PARSES AN OBJECT OF THE FORM                           */
 /*       KEYWORD(VAL1 VAL2 ... VALN)                                */
 /* ENTRY CONDITIONS:                                                */
 /*    THE UNPARSED SECTION OF THE CURRENT CONTROL CARD IS           */
 /*    LEFT JUSTIFIED IN VARIABLE 'CARD'                             */
 /* EXIT:                                                            */
 /*    RETURN TO CALLER WITH THE KEYWORD IN VARIABLE 'KEY'           */
 /*    THE NUMBER OF VALUE ITEMS IN VARIABLE 'NVALS',                */
 /*    AND EACH VALUE ITEM IN THE FIRST 'NVALS' ELEMENTS             */
 /*    OF ARRAY 'VAL'.                                               */
 /* EXTERNAL:                                                        */
 /*    CALLS GETWORD,ERR                                             */
     DCL I FIXED BIN;
 KW1:     CALL GETWORD;
     IF LENWORD>8 THEN CALL ERR(' WORD TOO LONG');
     IF LENWORD=1 THEN
           CALL ERR('BAD PUNCTUATION');
     KEY=SUBSTR(CARD,1,LENWORD);
     CALL GETWORD;
     IF SUBSTR(CARD,1,1)^='(' THEN CALL ERR('MISSING ''(''');
    BEGIN;
    ON ENDFILE(SYSIN) GO TO MISSP;
     DO I=1 TO 15;
          CALL GETWORD;
          IF SUBSTR(CARD,1,1)=')' THEN GO TO KW2;
     VAL(I)=SUBSTR(CARD,1,LENWORD);
     END;
    END;
     CALL ERR('TOO MANY ITEMS IN PARENS');
 MISSP:  CALL ERR(' MISSING '')''');
 KW2:     NVALS=I-1;
     END;
  %PAGE;
 GETCARD:PROC REORDER;
 /* PROCEDURE: GETCARD                                               */
 /* FUNCTION: OBTAIN NEXT CARD FROM SYSIN, COPY IT TO SYSPRINT,      */
 /*    AND DELETE COMMENTS.                                          */
 /* ENTRY CONDITIONS:                                                */
 /*    BIT VARIABLE 'CMT' IS SET TO TRUE IF THE LAST CONTROL CARD    */
 /*    ENDED WITH AN OPEN COMMENT FIELD (IE, NO CLOSING '* /').      */
 /* EXIT CONDITIONS:                                                 */
 /*    THE NEXT CONTROL CARD IS STORED IN VARIABLE 'CARD'. ANY       */
 /*    CHARACTERS IN A COMMENT FIELD HAVE BEEN SET TO BLANK. THE     */
 /*    'CMT' SWITCH IS TRUE IF THIS CARD ENDED WITH AN OPEN          */
 /*    COMMENT FIELD.                                                */
 /* ABNORMAL EXIT:                                                   */
 /*    THE 'ENDFILE' CONDITION CAN BE RAISED FOR SYSIN. EXIT WILL    */
 /*    THEN BE DETERMINED BY THE CURRENT ACTIVE 'ON ENDFILE'         */
 /*    ENVIRNONMENT                                                  */
     DCL (I,J) FIXED BIN;
 GC1:
    GET EDIT(CARD)(COL(1),A(80)) COPY(SYSPRINT);
     SUBSTR(CARD,73)=' ';
     LASTCARD=CARD;
     IF CMT THEN
          DO;
          I=INDEX(CARD,'*/');
          IF I=0 THEN GO TO GC1;
          CARD=SUBSTR(CARD,I+2);
          CMT='0'B;
          END;
 GC2:     I=INDEX(CARD,'/*');
     IF  I>0 THEN
          DO;
          J=INDEX(SUBSTR(CARD,I),'*/');
          IF J=0 THEN
               DO;
               SUBSTR(CARD,I)=' ';
               CMT='1'B;
               END;
          ELSE DO;
               SUBSTR(CARD,I,J+1)=' ';
               GO TO GC2;
               END;
          END;
     END;
  %PAGE;
 ERR:PROC(MSG);
 /* PROCEDURE: ERR                                                   */
 /* FUNCTION: ISSUE ERROR DIAGNOSTIC MESSAGE AND TERMINATE CURRENT   */
 /* PROGRAM                                                          */
 /* ENTRY:                                                           */
 /*    ERROR MESSAGE PASSED AS THE ARGUMENT. THE LAST CONTROL CARD   */
 /*    READ IS IN VARIABLE 'LASTCARD'. 'CARD' CONTAINS ITS UNSCANNED */
 /*    PART.                                                         */
 /* EXIT:                                                            */
 /*    ISSUES PLIX 'STOP' STATEMENT.                                 */
    END;
  %PAGE;
  %PAGE;
 INDOX:PROC(CANDIDATES,WORD) RETURNS(FIXED BIN);
  DCL CANDIDATES CHAR(*);
  DCL WORD CHAR(8);
 /* PROCEDURE: INDOX                                                 */
 /* FUNCTION: IDENTIFIES KEYWORDS FROM LIST OF CANDIDATES            */
 /* ENTRY:                                                           */
 /*   'CANDIDATES' CONTAINS A LIST OF VALID KEYWORDS, EACH           */
 /*   SEPARATED BY A SINGLE BLANK. 'WORD' CONTAINS THE INPUT         */
 /*   KEYWORD TO BE MATCHED AGAINST THE LIST.                        */
 /* EXIT:                                                            */
 /*   NORMAL: A NUMBER IS RETURNED GIVING THE INDEX OF THE MATCHED   */
 /*      CANDIDATE IN THE LIST.                                      */
 /*   ABNORMAL: ERR IS CALLED IF KEYWORD IS NOT FOUND IN THE LIST.   */
 /* NOTE: ONLY THE FIRST THREE CHARACTERS ARE CURRENTLY CHECKED IN   */
 /*   EACH KEYWORD. THEY MUST BE UNIQUE FOR EACH MEMBER OF THE LIST. */
  DCL (I,J,K) FIXED BIN INIT(1);
    DO WHILE(K>0);
    IF SUBSTR(CANDIDATES,I,3)=SUBSTR(WORD,1,3) THEN RETURN(J);
    J=J+1;
    K=INDEX(SUBSTR(CANDIDATES,I),' ');
    I=I+K;
    END;
    CALL ERR(' KEYWORD IS UNIDENTIFIED OR OUT OF CONTEXT: '××KEY);
 END;
./       ADD   NAME=CVT
 /********************************************************************/
 /* DISCLAIMER:                                                      */
 /*     THIS IBM MAPPING MACRO HAS BEEN CONVERTED FOR USE            */
 /* IN PLIX BY                                                       */
 /*     HOWARD GILBERT                                               */
 /*     YALE COMPUTER CENTER                                         */
 /*     175 WHITNEY AVE                                              */
 /*     NEW HAVEN, CONN. 06520                                       */
 /*     203 432-4080                                                 */
 /* THE AUTHOR HAS ONLY VERIFIED THE ACCURACY OF THE CONVERSION      */
 /* FOR THOSE FIELDS REQUIRED BY LOCALLY WRITTEN CODE. THE MACRO     */
 /* IS MADE AVAILABLE TO SUPPORT SUCH CODE AND 'AS IS' FOR OTHER     */
 /* APPLICATIONS REQUIRED BY POTENTIAL USERS.                        */
 /*                                                                  */
 /* VERSION DATE: MAY 1,1977                                         */
 /********************************************************************/
  DCL CVTPTR PTR BASED(PTROUT(16));

         %GOTO CVTL1;       /* BILINGUAL MAPPING
         MACRO
&CVTNAME CVT   &SYS=AOS2,&OPTIONS=(NOSLICE,INTERVAL,0),&TSO=NO,        *
               &PREFIX=NO,&FLAG=00,&FLAGB=00,&PATCH=NO,&REAL=0,        *
               &DSECT=NO,&RPS=NO,&CVTTZ=0,&CTLFLGS=00,&LIST=NO,        *
               &LOADBAL=NO,&CBMRTN=NO,&WARN=0,&STORAGE=0             */
 %CVTL1 : ;
 /*                                                                  */
 /*      COMMUNICATION VECTOR TABLE                                  */
 /*                                                                  */
 /*      OS/VS2 SU17, 05/24/76, LEVEL=1                              */
 /*                                                                  */
 /*  METHOD OF ACCESS                                                */
 /*      PL/S - DCL CVTPTR PTR                                       */
 /*      BAL  - DSECT=YES SHOULD BE SPECIFIED ON MACRO CALL EXCEPT   */
 /*             WHEN CALLED DURING SYSGEN TO CREATE CSECT.  CVT FOR  */
 /*             OS/VS2 IS MAPPED UNLESS SYS=AOS1 IS SPECIFIED.  THE  */
 /*             PREFIX IS NOT MAPPED UNLESS PREFIX=YES IS SPECIFIED. */
 /*             A USING ON CVTMAP OR DSECT NAME WILL ESTABLISH       */
 /*             ADDRESSABILITY FOR ALL SYMBOLS EXCEPT IN THE 2       */
 /*             EXTENSIONS.  TO ESTABLISH ADDRESSABILITY FOR THE     */
 /*             OS - OS/VS COMMON EXTENSION, YOU SHOULD CODE         */
 /*                                                                  */
 /*             L     REG,CVTEXT1                                    */
 /*             USING CVTXTNT1,REG                                   */
 /*                                                                  */
 /*             TO ESTABLISH ADDRESSABILITY FOR THE OS/VS1 - OS/VS2  */
 /*             COMMON EXTENSION, YOU SHOULD CODE                    */
 /*                                                                  */
 /*             L     REG,CVTEXT2                                    */
 /*             USING CVTXTNT2,REG                                   */
 /*                                                                  */
 /*             WHERE REG IN EITHER CASE IS ANY REGISTER OTHER       */
 /*             THAN ZERO.                                           */
 /*                                                                  */
 /*             WHEN LISTING IS SUPPRESSED, YOU CAN DETERMINE WHICH  */
 /*             DSECT A SYMBOL IS IN BY USING THE STATEMENT NUMBER   */
 /*             IN THE DEFN COLUMN IN THE CROSS REFERENCE LISTING.   */
 /*             FOR EXAMPLE, ANY SYMBOL DEFINED BETWEEN THE          */
 /*             STATEMENT NUMBERS FOR CVTXTNT1 AND CVTXTNT2 IS IN    */
 /*             THE OS - OS/VS COMMON EXTENSION.                     */
 /*                                                                  */
 /*  F.E.'S                                                          */
 /*      MICROFICHE LISTING - CVT                                    */
 /*                                                                  */
 /*  DEVELOPERS                                                      */
 /*      BAL LISTING  - SPECIFY LIST=YES ON MACRO CALL               */
 /*      PL/S LISTING - SPECIFY %IHALIST='YES' BEFORE INCLUDE        */
 /*                                                                  */
 /*      FOR INTEGRATION, A LISTING MUST NOT BE REQUESTED UNLESS     */
 /*      YOUR MODULE CREATES THE CSECT.                              */

 %GOTO CVTL2;   /*
.*
.*       CALLED DURING OS/VS1 SYSGEN BY SGIEA2CV
.*       CALLED DURING OS/VS2 SYSGEN BY IEAVBK
.*
.*             OPERATING SYSTEM OPTIONS
         LCLB  &CVTAOS1,&CVTAOS2
.*
.*             MULTIPROGRAMMING WITH A FIXED NUMBER OF PARTITION TASKS
&CVTAOS1 SETB  ('&SYS' EQ 'AOS1' OR '&SYS' EQ 'MFT' OR '&SYS' EQ 'INT')
.*
.*             MULTIPROGRAMMING WITH A VARIABLE NUMBER OF REGION TASKS
&CVTAOS2 SETB  ('&SYS' EQ 'AOS2' OR '&SYS' EQ 'MVT' OR '&SYS' EQ 'VMS')
.*
         PUSH  PRINT
         AIF   ('&LIST' EQ 'YES').CVT1A
         PRINT OFF
.CVT1A   ANOP
CVTPTR   EQU   16 -          ABSOLUTE ADDRESS OF POINTER TO CVT
         AIF   ('&PREFIX' EQ 'NO').CVT15

               BEGINNING OF CVT PREFIX

         AIF   ('&DSECT' EQ 'NO').CVT10
CVTFIX   DSECT -             CVTMAP-256 - PREFIX
         DS    0F
         DS    CL248 -       RESERVED
         AGO   .CVT12
.CVT10   ANOP
         DS    0F
CVTFIX   EQU   *-248 -       CVTMAP-256
.CVT12   ANOP
         DS    H -           RESERVED
CVTMDL   DS    CL2 -         CPU MODEL NUMBER IN SIGNLESS PACKED
                             DECIMAL, I.E., A MODEL 145 WOULD BE
                             REPRESENTED AS 0145 HEX
         AIF   ('&DSECT' EQ 'NO').CVT13                          YM2188
CVTRELNO DS    0CL4 -        RELEASE NUMBER (EBCDIC)
CVTNUMB  DS    CL2 -         RELEASE NUMBER                      YM2188
CVTLEVL  DS    CL2 -         LEVEL NUMBER OF THIS RELEASE        YM2188
         AGO   .CVT14                                            YM2188
.CVT13   ANOP
         IHBRELNO , -                                            YM2188
.CVT14   ANOP

               END OF CVT PREFIX

         AGO   .CVT16
.CVT15   ANOP

               BEGINNING OF CVT PROPER

         AIF   ('&DSECT' EQ 'NO').CVT16
CVT      DSECT , -
         AGO   .CVT18
.CVT16   ANOP
         DS    0F
.CVT18   ANOP
         AIF   ('&CVTNAME' EQ '').CVT01
&CVTNAME EQU   * -           CVTPTR CONTENT POINTS HERE
         AGO   .CVT02
.CVT01   ANOP
CVTMAP   EQU   * -           CVTPTR CONTENT POINTS HERE
.CVT02   ANOP

CVTTCBP  DC    V(IEATCBP) -  ADDRESS OF A DOUBLE WORD, THE FIRST
                             CONTAINING THE NEXT-TO-BE-DISPATCHED TCB
                             ADDRESS, THE SECOND CONTAINING THE LAST
                             (CURRENT) TCB ADDRESS.  BOTH WORDS ARE
                             IDENTICAL UNLESS THE TASK GOES INTO A
                             WAIT STATE.  WHEN IN A WAIT STATE, THE
                             FIRST WORD IS SET TO ZERO UNTIL THE
                             WAITING IS OVER AND THEN BOTH WORDS ARE
                             ONCE AGAIN IDENTICAL.  (OS/VS1)
                             ADDRESS OF 4-WORD LIST OF ADDRESSES -
                             THE NEXT TCB, THE CURRENT TCB, THE NEXT
                             ASCB AND THE CURRENT ASCB, IN THAT
                             ORDER (OS/VS2)                      MDC026
CVT0EF00 DC    V(IEA0EF00) - ADDRESS OF ROUTINE TO SCHEDULE
                             ASYNCHRONOUS EXITS
CVTLINK  DC    V(IEFLINK) -  ADDRESS OF DCB FOR SYS1.LINKLIB DATA SET
         AIF   (&CVTAOS2).CVTM9
CVTJOB   DC    V(IEFJOB) -   ADDRESS OF QUEUE MANAGER RESIDENT DATA
                             AREA (QMRES) (OS/VS1)               XM4042
         AGO   .CVTM10
.CVTM9   ANOP
         DC    A(0) -        ** CVTJOB FIELD UNUSED IN MVS **
                             (MDC083)                          @Z40AQ9A
.CVTM10  ANOP
CVTBUF   DC    A(0) -        ADDRESS OF THE BUFFER OF THE RESIDENT
                             CONSOLE INTERRUPT ROUTINE
CVTXAPG  DC    V(IECXAPG) -  ADDRESS OF I/O SUPERVISOR APPENDAGE VECTOR
                             TABLE
CVT0VL00 DC    V(IEA0VL00) - ADDRESS OF ENTRY POINT OF THE TASK
                             SUPERVISOR'S ADDRESS VALIDITY CHECKING
                             ROUTINE
CVTPCNVT DC    V(IECPCNVT) - ADDRESS OF ENTRY POINT OF THE ROUTINE
                             WHICH CONVERTS A RELATIVE TRACK ADDRESS
                             (TTR) TO AN ABSOLUTE TRACK ADDRESS
                             (MBBCCHHR)
CVTPRLTV DC    V(IECPRLTV) - ADDRESS OF ENTRY POINT OF THE ROUTINE
                             WHICH CONVERTS AN ABSOLUTE TRACK ADDRESS
                             (MBBCCHHR) TO A RELATIVE TRACK ADDRESS
                             (TTR)
CVTILK1  DC    V(IECILK1) -  ADDRESS OF THE CHANNEL AND CONTROL UNIT
                             PORTION OF THE UCB LOOKUP TABLE
CVTILK2  DC    V(IECILK2) -  ADDRESS OF THE UCB HALFWORD ADDRESS LIST
                             PORTION OF THE UCB LOOKUP TABLE
CVTXTLER DC    V(IECXTLER) - ADDRESS OF ERROR RECOVERY PROCEDURE (ERP)
                             LOADER (IECVERPL) ENTRY POINT IECXTLER
                             (MDC349)                          @Z40AQ9A
CVTSYSAD DC    A(0) -        ADDRESS OF THE SYSTEM RESIDENCE VOLUME
                             ENTRY IN THE UCB LOOKUP TABLE
         AIF   (&CVTAOS2).CVTM11
CVTBTERM DC    V(IEA0AB00) - ADDRESS OF ENTRY POINT OF THE ABTERM
                             ROUTINE
         AGO   .CVTM12
.CVTM11  ANOP
CVTBTERM DC    V(IEAVTRT1) - ADDRESS OF ENTRY POINT OF THE ABTERM
                             ROUTINE                             MDC084
.CVTM12  ANOP
CVTDATE  DC    F'0' -        CURRENT DATE IN PACKED DECIMAL
CVTMSLT  DC    V(IEEMSER) -  ADDRESS OF THE MASTER COMMON AREA IN
                             MASTER SCHEDULER RESIDENT DATA AREA.
                               NOTE - USE CVTMSER INSTEAD TO ADDRESS
                               MASTER SCHEDULER RESIDENT DATA AREA
CVTZDTAB DC    V(IECZDTAB) - ADDRESS OF I/O DEVICE CHARACTERISTIC TABLE
CVTXITP  DC    V(IECXITP) -  ADDRESS OF ERROR INTERPRETER ROUTINE
         AIF   (&CVTAOS2).CVTM5
CVTDAR   DS    0A -          SAME AS CVTDARA BELOW (OS/VS1)      ICB370
CVTFLGS1 DC    B'0' -        FLAG BYTE (OS/VS1)                  ICB370
CVTDMPLK EQU   X'80' -       SVC DUMP IS IN PROGRESS             ICB370
CVTRSV01 EQU   X'40',,C'X' - RESERVED
CVTRSV02 EQU   X'20',,C'X' - RESERVED
CVTRSV03 EQU   X'10',,C'X' - RESERVED
CVTRSV04 EQU   X'08',,C'X' - RESERVED
CVTRSV05 EQU   X'04',,C'X' - RESERVED
CVTRSV06 EQU   X'02',,C'X' - RESERVED
CVTRSV07 EQU   X'01',,C'X' - RESERVED
CVTDARA  DC    AL3(0) -      ADDRESS OF THE SYS1.DUMP I/O CONTROL
                             BLOCKS NEEDED BY ABEND'S DAMAGE ASSESSMENT
                             ROUTINE (DAR) (OS/VS1)              ICB370
         AGO   .CVTM6
.CVTM5   ANOP
         DC    A(0) -        ** CVTDAR FIELD UNUSED IN MVS **
                             (MDC029)                          @Z40AQ9A
.CVTM6   ANOP
.*
.*             CVT0FN00: OS/VS1, OS/VS2
.*
         AIF   (&CVTAOS2).CVT21
CVT0FN00 DC    V(IEA0FN00) - ADDRESS OF ENTRY POINT OF THE FINCH
                             ROUTINE (OS/VS1)
         AGO   .CVT22
.CVT21   ANOP
CVT0FN00 DC    A(0) -        RESERVED (OS/VS2)
.CVT22   ANOP
.*
CVTEXIT  SVC   3 -           EXIT TO DISPATCHER
CVTBRET  BR    14 -          RETURN TO CALLER (USED BY DATA MANAGEMENT
                             ROUTINES)
CVTSVDCB DC    V(IEASVDCB) - ADDRESS OF THE DCB FOR THE SYS1.SVCLIB
                             DATA SET
CVTTPC   DC    V(IEATPC) -   ADDRESS OF THE TIMER SUPERVISOR WORK AREA
         AIF   (&CVTAOS2).CVT41
CVTPBLDL DC    V(IECPBLDL) - ADDRESS OF BRANCH AND LINK (BALR) ENTRY
                             POINT OF THE BLDL ROUTINE (OS/VS1)  MDC103
CVTSJQ   DC    V(IEESJQ) -   ADDRESS OF THE SELECTED JOB QUEUE (OS/VS1)
         AGO   .CVT42
.CVT41   ANOP
         DC    A(0) -        ** CVTPBLDL FIELD UNUSED IN MVS **
                             (MDC103)                          @Z40AQ9A
CVTSJQ   DC    A(0) -        RESERVED (OS/VS2)
.CVT42   ANOP
.*
CVTCUCB  DC    V(IEECUCB) -  ADDRESS OF THE TABLE THAT CONTAINS THE
                             CURRENT CONSOLE UCB ADDRESSES
.*
.*             CVTQTE00, CVTQTD00: INTERVAL TIMING, NONE
.*
         AIF   ('&OPTIONS(2)' EQ 'INTERVAL').CVT51
CVTQTE00 DC    A(0) -        RESERVED (NO INTERVAL TIMER)
CVTQTD00 DC    A(0) -        RESERVED (NO INTERVAL TIMER)
         AGO   .CVT52
.CVT51   ANOP
CVTQTE00 DC    V(IEAQTE00) - ADDRESS OF THE TIMER ENQUEUE ROUTINE FOR
                             INTERVAL TIMER
CVTQTD00 DC    V(IEAQTD00) - ADDRESS OF THE TIMER DEQUEUE ROUTINE FOR
                             INTERVAL TIMER
.CVT52   ANOP
.*
CVTSTB   DC    V(IECSTB) -   ADDRESS OF THE I/O DEVICE STATISTICS TABLE
.*
.*             CVTDCB, CVTDCBA: OS/VS1, OS/VS2
.*
         AIF   (NOT &CVTAOS1).CVT62
CVTDCB   DC    XL1'22' -     OPERATING SYSTEM
CVTRSV08 EQU   X'80',,C'X' - RESERVED
CVT1SSS  EQU   X'40' -       OPTION 1 (PCP) SSS
CVT2SPS  EQU   X'20' -       OPTION 2 (MFT) SPS, OS/VS1
CVT4MS1  EQU   X'10' -       OPTION 4 (MVT) MS1, OS/VS2
CVTRSV09 EQU   X'08',,C'X' - RESERVED
CVT4MPS  EQU   X'04' -       MODEL 65 MULTIPROCESSING
CVT6DAT  EQU   X'02' -       DYNAMIC ADDRESS TRANSLATION BY CPU
                             (OS/VS1, OS/VS2)
CVTMVS2  EQU   X'01' -       MULTIPLE MEMORY OPTION OF OS/VS2 IS
                             PRESENT                             MDC131
CVTDCBA  DC    VL3(IFBDCB) - ADDRESS OF THE DCB FOR THE SYS1.LOGREC
                             (OUTBOARD RECORDER) DATA SET FOR SYSTEM
                             ENVIRONMENT RECORDING (SER)
CVTIOQET DC    V(IECIOQET) - ADDRESS OF IOS REQUEST ELEMENT TABLE
                             (OS/VS1)                            MDC020
         AGO   .CVT64
.CVT62   ANOP
CVTDCB   DC    XL1'13' -     OPERATING SYSTEM                    MDC132
CVTRSV08 EQU   X'80',,C'X' - RESERVED
CVT1SSS  EQU   X'40' -       OPTION 1 (PCP) SSS
CVT2SPS  EQU   X'20' -       OPTION 2 (MFT) SPS, OS/VS1
CVT4MS1  EQU   X'10' -       OPTION 4 (MVT) MS1, OS/VS2
CVTRSV09 EQU   X'08',,C'X' - RESERVED
CVT4MPS  EQU   X'04' -       MODEL 65 MULTIPROCESSING
CVT6DAT  EQU   X'02' -       DYNAMIC ADDRESS TRANSLATION BY CPU
                             (OS/VS1, OS/VS2)
CVTMVS2  EQU   X'01' -       MULTIPLE MEMORY OPTION OF OS/VS2 IS
                             PRESENT                             MDC131
CVT8AOS2 EQU   CVT4MS1+CVT6DAT - OS/VS2 SYSTEM
CVTDCBA  DC    VL3(IFBDCB) - ADDRESS OF THE DCB FOR THE SYS1.LOGREC
                             (OUTBOARD RECORDER) DATA SET FOR SYSTEM
                             ENVIRONMENT RECORDING (SER)
         DC    A(0) -        ** CVTIOQET FIELD UNUSED IN MVS **
                             (MDC020)                          @Z40AQ9A
.CVT64   ANOP
CVTIXAVL DC    V(IECIXAVL) - ADDRESS OF THE I/O SUPERVISOR'S FREELIST
                             POINTER WHICH CONTAINS THE ADDRESS OF THE
                             NEXT REQUEST ELEMENT  (OS/VS1)
                             ADDRESS OF THE I/O SUPERVISOR'S
                             COMMUNICATION AREA (IOCOM)  (OS/VS2)
CVTNUCB  DC    A(0) -        LOWEST ADDRESS NOT IN THE NUCLEUS (ON PAGE
                             BOUNDARY FOR OS/VS1)  (ON SEGMENT BOUNDARY
                             FOR OS/VS2)  (MDC318)             @Z30AQ9A
         AIF   (&CVTAOS2).CVTJF1                                 YM4043
CVTFBOSV DC    V(IEWFBOSV) - ADDRESS OF PROGRAM FETCH ROUTINE
         AGO   .CVTJF2                                           YM4043
.CVTJF1  ANOP                                                    YM4043
CVTFBOSV DC    A(0) -        ADDRESS OF PROGRAM FETCH ROUTINE
                             (MDC222)                            YM4043
.CVTJF2  ANOP                                                    YM4043
CVT0DS   DC    V(IEA0DS) -   ADDRESS OF ENTRY POINT OF THE DISPATCHER
CVTILCH  DC    V(IECILCH) -  ADDRESS OF THE LOGICAL CHANNEL WORD TABLE
         AIF   (&CVTAOS2).CVTJF3                                 YM4043
CVTIERLC DC    V(IECIERLC) - ADDRESS OF THE ASYNCHRONOUS EXIT QUEUE
                             (OS/VS1)  (MDC218)                  YM4043
         AGO   .CVTJF4                                           YM4043
.CVTJF3  ANOP                                                    YM4043
CVTRV516 DC    A(0) -        ** CVTIERLC FIELD UNUSED IN MVS **
                             (MDC218)                            YM4043
.CVTJF4  ANOP                                                    YM4043
CVTMSER  DC    V(IEEMSER) -  ADDRESS OF DATA AREA OF MASTER SCHEDULER
                             RESIDENT DATA AREA
CVT0PT01 DC    V(IEA0PT01) - ADDRESS OF BRANCH ENTRY POINT OF POST
                             ROUTINE
CVTRSV11 DS    A -           ** CVTTRMTB FIELD UNUSED IN OS/VS **
         AIF   (&CVTAOS2).CVT72
CVTHEAD  DC    V(IEAHEAD) -  ADDRESS OF THE HIGHEST PRIORITY TCB IN THE
                             READY QUEUE (OS/VS1)                MDC025
CVTMZ00  DC    A(0) -        HIGHEST ADDRESS IN VIRTUAL STORAGE FOR
                             THIS MACHINE
         AGO   .CVT73
.CVT72   ANOP
         DC    A(0) -        ** CVTHEAD FIELD UNUSED IN MVS **
                             (MDC025)                          @Z40AQ9A
CVTMZ00  DC    X'00FFFFFF' - HIGHEST ADDRESS IN VIRTUAL STORAGE FOR
                             THIS MACHINE
.CVT73   ANOP
CVT1EF00 DC    A(0) -        ADDRESS OF ROUTINE WHICH CREATES IRB'S
                             FOR EXITS
         AIF   (NOT &CVTAOS1).CVT83
CVTQOCR  DC    V(IEAQOCR) -  GRAPHICS INTERFACE TASK (GFX) FIELD.
                             ADDRESS OF SEVENTH WORD OF GFX PARAMETER
                             LIST, IF GFX IS ACTIVE.  ZERO IF GFX IS
                             NOT ACTIVE
         AGO   .CVT84
.CVT83   ANOP
CVTQOCR  DC    A(0) -        GRAPHICS INTERFACE TASK (GFX) FIELD.
                             ADDRESS OF SEVENTH WORD OF GFX PARAMETER
                             LIST, IF GFX IS ACTIVE.  ZERO IF GFX IS
                             NOT ACTIVE
.CVT84   ANOP
CVTQMWR  DC    V(IEFQMWR) -  ADDRESS OF QUEUE MANAGER'S SYSTEM OUTPUT
                             COMMUNICATIONS-DATA-AREA (CDA), WHICH IS
                             STORED ON AN EXTERNAL DEVICE
CVTSNCTR DC    H'0' -        SERIAL NUMBER COUNTER FOR ASSIGNING SERIAL
                             NUMBERS TO NON-SPECIFIC, UNLABELED
                             MAGNETIC TAPE VOLUMES
CVTOPTA  DC    AL1(&FLAG) -  OPTION INDICATORS
CVTCCH   EQU   X'80' -       CHANNEL CHECK HANDLER (CCH) OPTION PRESENT
                             - RECOVERY MANAGEMENT SUPPORT (RMS) XM4686
CVTAPR   EQU   X'40' -       ALTERNATE PATH RETRY (APR) OPTION PRESENT
                             - RECOVERY MANAGEMENT SUPPORT (RMS)
CVTDDR   EQU   X'20' -       DYNAMIC DEVICE RECONFIGURATION (DDR)
                             OPTION PRESENT - RECOVERY MANAGEMENT
                             SUPPORT (RMS)  (OS/VS1)
CVTOPTB  DC    AL1(&FLAGB) - MISCELLANEOUS FLAGS
CVTPROT  EQU   X'80' -       CPU HAS STORE PROTECTION FEATURE (OS/VS1)
CVTCTIMS EQU   X'40' -       IF ON, HARDWARE HAS THE CLOCK COMPARATOR
                             AND CPU TIMER FEATURE INSTALLED, AND
                             OS/VS1 SYSGEN HAS SPECIFIED THIS FEATURE
                             (OS/VS1)                            MDC127
CVTTOD   EQU   X'20' -       CPU HAS TIME-OF-DAY CLOCK FEATURE
CVTNLOG  EQU   X'10' -       SYS1.LOGREC IS UNAVAILABLE FOR ERROR
                             RECORDING.  ALWAYS SET TO ZERO FOR
                             OS/VS1.                             MDC127
CVTAPTHR EQU   X'08' -       NIP SETS THIS BIT TO 1 WHEN DEVICE TESTING
                             IS COMPLETE.  IF 1, I/O SUPERVISOR USES
                             AN ALTERNATE PATH TO A DEVICE WHEN A
                             CONDITION CODE OF 3 EXISTS.  THIS BIT IS
                             RESET TO 0 BY NIP AFTER THE LINK PACK
                             AREA IS INITIALIZED.                YM2670
CVTFP    EQU   X'04' -       CPU HAS FETCH PROTECTION FEATURE (OS/VS1)
                                                                 ICB427
CVTVS1A  EQU   X'02' -       VS1 ASSIST IS AVAILABLE FOR USE (OS/VS1)
                             (MDC353)                          @X60CA9A
CVTRSV17 EQU   X'01',,C'X' - RESERVED
.*
.*             CVTQCDSR, CVTQLPAQ: OS/VS1, OS/VS2
.*
         AIF   (&CVTAOS1).CVT91
CVTQCDSR DC    V(IEAQCDSR) - CDE SEARCH ROUTINE ADDRESS  (OS/VS2)
CVTQLPAQ DC    V(IEAQLPAQ) - ADDRESS OF POINTER TO MOST RECENT ENTRY
                             ON LINK PACK AREA CDE QUEUE  (OS/VS2)
         AGO   .CVT92
.CVT91   ANOP
CVTQCDSR DC    A(0) -        ADDRESS OF THE ROUTINE THAT SEARCHES THE
                             REENTERABLE LOAD MODULE QUEUE  (OS/VS1)
CVTQLPAQ DC    A(0) -        ADDRESS OF THE REENTERABLE LOAD MODULE
                             QUEUE  (OS/VS1)
.CVT92   ANOP
CVTRSV18 DC    A(0) -        ** CVTMPCVT FIELD UNUSED IN OS/VS **
CVTSMCA  DC    A(0) -        ADDRESS OF THE SYSTEM MANAGEMENT CONTROL
                             AREA (SMCA) IF THE SYSTEM MANAGEMENT
                             FACILITIES (SMF) OPTION IS PRESENT IN THE
                             SYSTEM.  OTHERWISE, ZERO.
.*
.*             CVTABEND: OS/VS1, OS/VS2
.*
         AIF   (NOT &CVTAOS2).CVTB1
CVTABEND DC    V(IEABEND) -  ADDRESS OF SECONDARY CVT FOR ABEND IN EOT
                             (OS/VS2)
         AGO   .CVTB2
.CVTB1   ANOP
CVTABEND DC    A(0) -        USED BY AN INTERNAL ABEND TRACE ROUTINE
                             FOR DEBUG PURPOSES (OS/VS1)         XM0615
.CVTB2   ANOP
.*
CVTUSER  DC    A(0) -        A WORD AVAILABLE TO THE USER
CVTMDLDS DC    A(0) -        RESERVED FOR MODEL-DEPENDENT SUPPORT
CVTQABST SVC   13 -          AN ABEND INVOCATION (OS/VS2)
CVTLNKSC SVC   6 -           A LINK INVOCATION                   ICB369
.*
.*             CVTTSCE: TIME SLICING, NONE
.*
         AIF   (&CVTAOS2).CVTC1
         AIF   ('&OPTIONS(1)' NE 'TSLICE').CVTC1
CVTTSCE  DC    V(IEATSCE) -  ADDRESS OF THE FIRST TIME SLICE CONTROL
                             ELEMENT (TSCE)
         AGO   .CVTC2
.CVTC1   ANOP
CVTTSCE  DC    A(0) -        ADDRESS OF THE FIRST TIME SLICE CONTROL
                             ELEMENT (TSCE)
.CVTC2   ANOP
.*
.*             CVTPATCH: PATCH AREA, NONE
.*
         AIF   (&CVTAOS2).CVTC5
         AIF   ('&PATCH' NE 'YES').CVTC3
.CVTC5   ANOP
CVTPATCH DC    V(IEAPATCH) - ADDRESS OF A 200-BYTE FE PATCH AREA
         AGO   .CVTC4
.CVTC3   ANOP
CVTPATCH DC    A(0) -        ADDRESS OF A 200-BYTE FE PATCH AREA
.CVTC4   ANOP
.*
CVTRMS   DC    V(IGFRVT) -   RECOVERY MANAGEMENT SUPPORT (RMS)
                             COMMUNICATIONS VECTOR.  ADDRESS OF A
                             MACHINE STATUS BLOCK.
CVTRV515 DC    A(0) -        ** CVTTSCVT FIELD UNUSED IN MVS **
                             (MDC037)                          @Z40AQ9A
         AIF   ('&RPS' EQ 'NO').CVTC6
CVT0SCR1 DC    V(IEC0SCR1) - ADDRESS OF THE SECTOR CALCULATION ROUTINE
                             FOR ROTATIONAL POSITION SENSING (RPS)
         AGO   .CVTC7
.CVTC6   ANOP
CVT0SCR1 DC    A(0) -        ADDRESS OF THE SECTOR CALCULATION ROUTINE
                             FOR ROTATIONAL POSITION SENSING (RPS)
.CVTC7   ANOP
CVTGTF   DS    0A -          GENERALIZED TRACE FACILITY (GTF) CONTROL
                             WORD                                ICB312
CVTGTFST DC    AL1(0) -      GTF FLAG BYTES                      ICB312
         AIF   (&CVTAOS2).CVTM13
CVTGTFS  EQU   X'C0' -       GTF STATUS (OS/VS1)                 MDC088
CVTGTFIN EQU   X'00' -       GTF NOT ACTIVE (OS/VS1)             MDC089
CVTGTFSP EQU   X'80' -       GTF STOPPING (OS/VS1)               MDC090
CVTGTFSR EQU   X'40' -       GTF STARTING (OS/VS1)               MDC091
CVTGTFAC EQU   X'C0' -       GTF ACTIVE (OS/VS1)                 MDC092
CVTSTATE EQU   X'20' -       GTF IS IN CONTROL PROCESSING A HOOK
                             (OS/VS1)                            MDC093
CVTTMODE EQU   X'10' -       IF 0, MODE=INT SPECIFIED.  IF 1, MODE=EXT
                             SPECIFIED WHICH MEANS TRACE DATA IS TO BE
                             WRITTEN TO AN EXTERNAL DEVICE.
CVTFORM  EQU   X'08' -       TRACE DATA IS TO BE FORMATTED ON ABNORMAL
                             TERMINATION                         MDC095
         AGO   .CVTM14
.CVTM13  ANOP
CVTGTFAV EQU   X'80' -       IF ZERO, GTF NOT ACTIVE.  IF ONE, GTF
                             ACTIVE.  (OS/VS2)                   MDC098
CVTRV315 EQU   X'40',,C'X' - RESERVED (OS/VS2)
CVTRV316 EQU   X'20',,C'X' - RESERVED (OS/VS2)
CVTRV317 EQU   X'10',,C'X' - RESERVED (OS/VS2)
CVTRV318 EQU   X'08',,C'X' - RESERVED (OS/VS2)
.CVTM14  ANOP
CVTUSR   EQU   X'04' -       TRACE=USR SPECIFIED.  USER-REQUESTED TRACE
                             DATA IS TO BE INCLUDED IN THE TRACE DATA
                             SET.  (MDC317)                    @Z30AP9A
CVTRNIO  EQU   X'02' -       GTF IS ACTIVE AND TRACING RNIO EVENTS
                                                                 MDC187
CVTRSV27 EQU   X'01',,C'X' - RESERVED
         AIF   (&CVTAOS2).CVTG1
CVTGTFA  DC    VL3(HHLHCTQ) -ADDRESS OF THE MONITOR CALL VECTOR
                             TABLE (OS/VS1)                      MDC156
         AGO   .CVTG2
.CVTG1   ANOP
CVTGTFA  DC    VL3(AHLHEAD) -ADDRESS OF MAIN MONITOR CALL ROUTING
                             TABLE, MCHEAD  (OS/VS2)             MDC156
.CVTG2   ANOP
CVTAQAVT DS    0A -          ADDRESS OF THE FIRST WORD OF THE TCAM
                             DISPATCHER WHICH CONTAINS THE ADDRESS OF
                             THE ADDRESS VECTOR TABLE (AVT).  IF ZERO,
                             TCAM IS NOT STARTED.
CVTTCMFG DC    X'00' -       TCAM FLAGS
CVTTCRDY EQU   X'80' -       TCAM IS READY TO ACCEPT USERS
CVTLDEV  EQU   X'40' -       LOCAL DEVICE ATTACHED TO TCAM
                             (MDC357)                          @Z40XA9A
CVTRSV29 EQU   X'20',,C'X' - RESERVED
CVTRSV30 EQU   X'10',,C'X' - RESERVED
CVTRSV31 EQU   X'08',,C'X' - RESERVED
CVTRSV32 EQU   X'04',,C'X' - RESERVED
CVTRSV33 EQU   X'02',,C'X' - RESERVED
CVTRSV34 EQU   X'01',,C'X' - RESERVED
CVTAQAVB DC    AL3(0) -      SAME AS CVTAQAVT ABOVE
         AIF   (&CVTAOS2).CVTP2
CVTTATA  DS    0A -          ADDRESS OF THE FIRST ENTRY IN THE TCB
                             ADDRESS TABLE.  THE FIRST ENTRY IS FOR
                             PARTITION 0.  (OS/VS1)
CVTTSKS  DC    FL1'0' -      MAXIMUM ALLOWABLE NUMBER OF ENTRIES IN THE
                             TCB ADDRESS TABLE  (OS/VS1)
CVTTAT   DC    AL3(0) -      SAME AS CVTTATA ABOVE
CVTATER  DS    0A -          SAME AS CVTATERA BELOW              ICB346
.*
.*             CVTSYST: OPTIONS(3)
.*
         AIF   ('&OPTIONS(3)' EQ '').CVT85
CVTSYST  DC    AL1(&OPTIONS(3)) NUMBER OF ENTRIES IN THE TCB ADDRESS
                             TABLE FOR TCB'S CREATED DURING SYSTEM
                             GENERATION  (OS/VS1)
         AGO   .CVT86
.CVT85   ANOP
CVTSYST  DC    FL1'0' -      NUMBER OF ENTRIES IN THE TCB ADDRESS
                             TABLE FOR TCB'S CREATED DURING SYSTEM
                             GENERATION  (OS/VS1)
.CVT86   ANOP
CVTATERA DC    VL3(IEASETCB) ADDRESS OF THE SYSTEM ERROR TCB.  THE
                             PURGE ROUTINE USES THIS FIELD TO ACCESS
                             THE SIRB.  (OS/VS1)                 ICB346
         AGO   .CVTP3
.CVTP2   ANOP
CVTVOLM2 DS    0A -          ADDRESS OF TABLE FOR POWER WARNING FEATURE
                             (PWF)  (OS/VS2)  (MDC308)         @Z30AQ9A
CVTVOLF2 DC    X'80' -       PWF FLAG BYTE.  THIS BYTE IS OVERLAID BY
                             CVTVOLM2 AFTER PWF INITIALIZATION.
                             (OS/VS2)  (MDC309)                @Z30AQ9A
CVTVOLI2 EQU   X'80' -       PWF INITIALIZATION HAS NOT OCCURRED
                             (OS/VS2)  (MDC310)                @Z30AQ9A
CVTVOLT2 DC    AL3(&WARN) -  PWF RECHECK TIME DELAY.  THIS VALUE IS
                             OVERLAID BY CVTVOLM2 AFTER PWF
                             INITIALIZATION. (OS/VS2) (MDC311) @Z30AQ9A
         DC    A(0) -        RESERVED  (OS/VS2)
.CVTP3   ANOP
CVTEXT1  DC    A(CVTXTNT1) - ADDRESS OF OS - OS/VS COMMON EXTENSION
                                                                 ICB421
         AIF   (&CVTAOS2).CVTP7
         AIF   ('&CBMRTN' EQ 'NO').CVTP7
CVTCBSP  DC    V(IDA019C2) - ADDRESS OF ACCESS METHOD CONTROL BLOCK
                             STRUCTURE                           MDC195
         AGO   .CVTP8
.CVTP7   ANOP
CVTCBSP  DC    A(0) -        ADDRESS OF ACCESS METHOD CONTROL BLOCK
                             STRUCTURE                           MDC195
.CVTP8   ANOP
CVTPURG  DS    0A -          ADDRESS OF SUBSYSTEM PURGE ROUTINE  ICB330
CVTRSV35 DS    XL1 -         RESERVED                            ICB330
CVTPURGA DC    AL3(0) -      ADDRESS OF SUBSYSTEM PURGE ROUTINE  ICB330
CVTAMFF  DC    XL4'00' -     RESERVED FOR ACCESS METHOD FLAGS    ICB436
CVTQMSG  DS    0A -          ADDRESS OF INFORMATION TO BE PRINTED
                             BY ABEND                            ICB307
CVTRSV36 DS    XL1 -         RESERVED                            ICB307
CVTQMSGA DC    VL3(IEAQMSGS) ADDRESS OF INFORMATION TO BE PRINTED
                             BY ABEND                            ICB449
CVTDMSR  DS    0A -          SAME AS CVTDMSRA BELOW              ICB346
         AIF   (&CVTAOS2).CVTP4
CVTRSV37 DS    X -           RESERVED  (OS/VS1)                  ICB346
CVTDMSRA DC    VL3(IFG019RA) ADDRESS OF THE OPEN/CLOSE/EOV SUPERVISORY
                             ROUTINE IN THE NUCLEUS.  THIS ROUTINE
                             HANDLES THE ROUTING OF CONTROL AMONG THE
                             I/O SUPPORT ROUTINES.               ICB346
         AGO   .CVTP5
.CVTP4   ANOP
CVTDMSRF DC    XL1'00' -     OPEN/CLOSE/EOV FLAG BYTE.  SETTING BOTH
                             BIT 0 AND BIT 1 ON WILL CAUSE BOTH KINDS
                             OF DUMPS TO BE TAKEN.  THESE BITS ARE USED
                             DURING TESTING AND DEBUGGING WHEN OTHER
                             DEBUG METHODS ARE INEFFECTIVE.  (OS/VS2)
                             (MDC350)                          @Z40AQ9A
CVTSDUMP EQU   X'80' -       SET BY COREZAP.  WILL CAUSE AN SDUMP TO BE
                             TAKEN AND IEC999I MESSAGE ISSUED FOR EVERY
                             ABEND ISSUED WITHIN AN OPEN/CLOSE/EOV OR
                             DADSM FUNCTION. (OS/VS2) (MDC351) @Z40AQ9A
CVTUDUMP EQU   X'40' -       SET BY COREZAP.  WILL CAUSE AN ABEND DUMP
                             TO BE TAKEN FOR EVERY ABEND ISSUED WITHIN
                             AN OPEN/CLOSE/EOV OR DADSM FUNCTION.
                             (OS/VS2)  (MDC352)                @Z40AQ9A
CVTRV629 EQU   X'20',,C'X' - RESERVED (OS/VS2)                 @Z40AQ9A
CVTRV630 EQU   X'10',,C'X' - RESERVED (OS/VS2)                 @Z40AQ9A
CVTRV631 EQU   X'08',,C'X' - RESERVED (OS/VS2)                 @Z40AQ9A
CVTRV632 EQU   X'04',,C'X' - RESERVED (OS/VS2)                 @Z40AQ9A
CVTRV633 EQU   X'02',,C'X' - RESERVED (OS/VS2)                 @Z40AQ9A
CVTRV634 EQU   X'01',,C'X' - RESERVED (OS/VS2)                 @Z40AQ9A
CVTDMSRA DC    AL3(0) -      ADDRESS OF THE OPEN/CLOSE/EOV SUPERVISORY
                             ROUTINE IN THE NUCLEUS.  THIS ROUTINE
                             HANDLES THE ROUTING OF CONTROL AMONG THE
                             I/O SUPPORT ROUTINES.               ICB346
.CVTP5   ANOP
CVTRSV38 DS    F -           RESERVED
CVTRSV39 DS    F -           RESERVED

               OS/VS1 - OS/VS2 COMMON SECTION

CVTREAL  DC    A(&REAL) -    ADDRESS OF THE VIRTUAL STORAGE BYTE
                             FOLLOWING THE HIGHEST VIRTUAL=REAL
                             STORAGE ADDRESS                     ICB368
CVTPTRV  DC    V(IEAPTRV) -  ADDRESS OF PAGING SUPERVISOR GENERAL
                             ROUTINE TO TRANSLATE REAL ADDRESSES TO
                             VIRTUAL ADDRESSES
         AIF   (&CVTAOS2).CVTJ1
CVTMODE  DC    V(IEAMODBR) - ADDRESS OF ROUTINE TO CHANGE SYSTEM MASK
                             (OS/VS1)  (MDC217)                  YM4244
CVTJESCT DS    A -           ADDRESS OF JOB ENTRY SUBSYSTEM (JES)
                             CONTROL TABLE
CVTJEPS  DC    V(IEAJPTCB) - ADDRESS OF JOB ENTRY PERIPHERAL SERVICES
                             (JEPS) MONITOR TCB  (OS/VS1)        YM2702
         AGO   .CVTJ2
.CVTJ1   ANOP
         DC    A(0) -        RESERVED (WAS CVTMODE) (OS/VS2)
                             (MDC217)                            YM4244
CVTJESCT DC    V(IEFJESCT) - ADDRESS OF JOB ENTRY SUBSYSTEM (JES)
                             CONTROL TABLE                       ICB342
         DS    A -           RESERVED (WAS CVTJEPS) (OS/VS2)     YM2702
.CVTJ2   ANOP
CVTTZ    DC    F'&CVTTZ' -   DIFFERENCE BETWEEN LOCAL TIME AND
                             GREENWICH MEAN TIME IN BINARY UNITS OF
                             1.048576 SECONDS
CVTMCHPR DS    A -           ADDRESS OF MACHINE CHECK PARAMETER LIST
         AIF   (&CVTAOS2).CVTJ5                                  YM3590
CVTEORM  DC    A(0) -        HIGHEST REAL ADDRESS IN MAIN STORAGE
                             (OS/VS1)                            MDC087
CVTERPV  DC    V(IEAERPV) -  POINTER TO I/O SUPERVISOR SUBROUTINE TO
                             CONVERT CCW DATA ADDRESSES TO VIRTUAL
                             ADDRESSES (OS/VS1)  (MDC219)        YM4043
         AIF   ('&LOADBAL' EQ 'YES').CVTJ3
CVTINTLA DC    A(0) -        ADDRESS OF A TIME INTERVAL.  I/O LOAD
                             BALANCING COUNTS THE NUMBER OF EXCP'S
                             ISSUED DURING THIS TIME INTERVAL AND USES
                             THE VALUE IN DETERMINING THE AMOUNT OF I/O
                             ACTIVITY IN THE SYSTEM.  (OS/VS1)
                             (MDC220)                            YM4043
         AGO   .CVTJ6                                            YM4043
.CVTJ3   ANOP
CVTINTLA DC    V(IEAEXINT) - ADDRESS OF A TIME INTERVAL.  I/O LOAD
                             BALANCING COUNTS THE NUMBER OF EXCP'S
                             ISSUED DURING THIS TIME INTERVAL AND USES
                             THE VALUE IN DETERMINING THE AMOUNT OF I/O
                             ACTIVITY IN THE SYSTEM.  (OS/VS1)
                             (MDC220)                            YM4043
         AGO   .CVTJ6                                            YM3590
.CVTJ5   ANOP                                                    YM3590
CVTEORM  DC    A(&STORAGE) - POTENTIAL REAL HIGH STORAGE         YM3613
                             ADDRESS (OS/VS2)                    YM3613
CVTRV517 DC    A(0) -        ** CVTERPV FIELD UNUSED IN MVS **
                             (MDC219)                            YM4043
CVTRV518 DC    A(0) -        ** CVTINTLA FIELD UNUSED IN MVS **
                             (MDC220)                            YM4043
.CVTJ6   ANOP                                                    YM3590
CVTAPF   DS    0A -          SAME AS CVTAPFA BELOW               ICB360
CVTRSV40 DS    X -           RESERVED                            ICB360
CVTAPFA  DC    VL3(IEAVTEST) ADDRESS OF BRANCH ENTRY POINT IN
                             AUTHORIZED PROGRAM FACILITY (APF) ROUTINE
CVTEXT2  DS    0A -          ADDRESS OF OS/VS1 - OS/VS2 COMMON
                             EXTENSION                           ICB330
CVTRSV41 DS    XL1 -         RESERVED                            ICB330
CVTEXT2A DC    AL3(CVTXTNT2) SAME AS CVTEXT2 ABOVE               ICB330
CVTHJES  DS    0A -          SAME AS CVTHJESA BELOW              ICB454
CVTRSV42 DS    X -           RESERVED                            ICB454
CVTHJESA DC    AL3(0) -      ADDRESS OF OPTIONAL JOB ENTRY SUBSYSTEM
                             (JES) COMMUNICATION VECTOR TABLE    ICB454
CVTRSV43 DS    H -           RESERVED
CVTRSV44 DS    H -           RESERVED
CVTRSV45 DS    F -           RESERVED
CVTRSV46 DS    F -           RESERVED
         AIF   (&CVTAOS2).CVTV2

               OS/VS1 OVERLAY

CVTPGSIA DC    V(IHAPGSIA) - ADDRESS OF PAGING SUPERVISOR INFORMATION
                             AREA
CVTPCVT  DC    V(IEAPCVT) -  ADDRESS OF PAGED CVT EXTENSION
CVTA1F1  DS    B -           PAGE FAULT FLAGS
CVTPFSW  EQU   X'80' -       ONLY THE PAGING TASK MAY BE DISPATCHED
CVTSRSW  EQU   X'40' -       NO TASK EXCEPT THE PAGING TASK MAY EXECUTE
                             DISABLED CODE
CVTRSV47 EQU   X'20',,C'X' - RESERVED
CVTRSV48 EQU   X'10',,C'X' - RESERVED
CVTRSV49 EQU   X'08',,C'X' - RESERVED
CVTRSV50 EQU   X'04',,C'X' - RESERVED
CVTRSV51 EQU   X'02',,C'X' - RESERVED
CVTRSV52 EQU   X'01',,C'X' - RESERVED
CVTSYSK  DS    B -           SYSTEM LOCK.  IF NOT ZERO, ONLY THE PAGING
                             TASK MAY BE DISPATCHED
CVTRSV53 EQU   X'80',,C'X' - RESERVED
CVTRSV54 EQU   X'40',,C'X' - RESERVED
CVTRSV55 EQU   X'20',,C'X' - RESERVED
CVTRSV56 EQU   X'10',,C'X' - RESERVED
CVTSLKR  EQU   X'08' -       MACHINE CHECK HANDLING IS IN
                             PROGRESS                            ICB320
CVTSLKQ  EQU   X'04' -       SYSTEM QUEUE AREA (SQA) HAS BEEN EXHAUSTED
CVTSLKP  EQU   X'02' -       LAST PAGING CONTROL BLOCK (PCB) HAS BEEN
                             USED
CVTSLKO  EQU   X'01' -       A ROUTINE RUNNING DISABLED HAS PRODUCED A
                             PAGE FAULT
CVTSULK  DS    H -           SUPERVISOR LOCK.  NUMBER OF TASKS
                             ATTEMPTING TO EXECUTE DISABLED ROUTINES.
                             IF NOT ZERO, ONLY ENABLED TASKS MAY RUN.
CVTSMF   DC    V(SMFTCBIT) - ADDRESS OF SYSTEM MANAGEMENT FACILITIES
                             (SMF) TCB                           ICB395
CVTPNWFR DC    V(IEAFNPAN) - ADDRESS OF ROUTINE WHICH FREES THE
                             'EMERGENCY' WORK AREA (ICB413)      XM2452
CVTDDCE  DC    V(IEADDCE) -  ADDRESS OF DYNAMIC DISPATCHING CONTROL
                             ELEMENT                             ICB466
CVTRSV57 DS    H -           RESERVED
CVTRSV58 DS    H -           RESERVED
CVTSTOA  DS    F -           SAVE AREA FOR THE REAL STORAGE ADDRESS OF
                             THE SEGMENT TABLE ORIGIN            ICB496
CVTVOLM1 DS    0A -          ADDRESS OF TABLE FOR POWER WARNING FEATURE
                             (PWF)  (MDC312)                   @X04AQ9A
CVTVOLF1 DC    X'80' -       PWF FLAG BYTE.  THIS BYTE IS OVERLAID BY
                             CVTVOLM1 AFTER PWF INITIALIZATION.
                             (MDC313)                          @X04AQ9A
CVTVOLI1 EQU   X'80' -       PWF INITIALIZATION HAS NOT OCCURRED
                             (MDC314)                          @X04AQ9A
CVTVOLT1 DC    AL3(&WARN) -  PWF RECHECK TIME DELAY.  THIS VALUE IS
                             OVERLAID BY CVTVOLM1 AFTER PWF
                             INITIALIZATION.  (MDC315)         @X04AQ9A
CVTRSV61 DS    F -           RESERVED
CVTRV490 DC    A(0) -        RESERVED  (MDC359)                @X60CV9A
CVTAUTH  DC    A(0) -        POINTER TO AUTHORIZED LIBRARY TABLE MDC188
CVTACTAP DC    V(ISTAPC42) - ADDRESS OF BRANCH ENTRY TO VTAM'S SVC
                             ROUTINE  (MDC216)                 @X31BH9A
CVTRV485 DS    A -           RESERVED                            MDC106
CVTRV486 DS    A -           RESERVED                            MDC106
CVTRV487 DS    A -           RESERVED                            MDC106
CVTRV488 DS    A -           RESERVED                            MDC106
         AGO   .CVTV4
.CVTV2   ANOP

               OS/VS2 OVERLAY

CVTGETL  DC    A(0) -        ADDRESS OF IKJGETL, TSO GET LINE ROUTINE
                             (MDC206)                            YM2225
CVTLPDSR DC    V(IEAVVMSR) - ADDRESS OF LINK PACK AREA (LPA) DIRECTORY
                             SEARCH ROUTINE
CVTPVTP  DC    V(CSECPVT) -  ADDRESS OF PAGE VECTOR TABLE
CVTLPDIA DS    0A -          ADDRESS OF LINK PACK AREA (LPA) DIRECTORY
                             (ON PAGE BOUNDARY)
CVTDIRST DS    B -           FLAG BYTE
CVTDICOM EQU   X'80' -       LPA DIRECTORY HAS BEEN INITIALIZED BY NIP
CVTRSV63 EQU   X'40',,C'X' - RESERVED
CVTRSV64 EQU   X'20',,C'X' - RESERVED
CVTRSV65 EQU   X'10',,C'X' - RESERVED
CVTRSV66 EQU   X'08',,C'X' - RESERVED
CVTRSV67 EQU   X'04',,C'X' - RESERVED
CVTRSV68 EQU   X'02',,C'X' - RESERVED
CVTRSV69 EQU   X'01',,C'X' - RESERVED
CVTLPDIR DS    AL3 -         ADDRESS OF LINK PACK AREA (LPA) DIRECTORY
                             (ON PAGE BOUNDARY)
                             BE DISPATCHED
CVTSYLKS EQU   X'FF' -       SET LOCK BYTE
CVTSYLKR EQU   X'00' -       RESET LOCK BYTE
CVTSLID  DS    CL3 -         SAME AS CVTSLIDA ABOVE
CVTRV322 DC    A(0) -        RESERVED FOR FUTURE USE  (MDC343) @Z40AQ9A
CVTRV328 DC    A(0) -        ** CVTSEG AND CVTSEGA FIELDS UNUSED IN
                             MVS **  (MDC139)                  @Z40AQ9A
CVTRV329 DC    A(0) -        ** CVTSEGB FIELD UNUSED IN MVS **
                             (MDC141)                          @Z40AQ9A
CVTRV330 DC    A(0) -        ** CVTSEGC AND SUBFIELDS UNUSED IN
                             MVS **  (MDC142)                  @Z40AQ9A
CVTRV331 DC    A(0) -        ** CVTSEGD AND SUBFIELDS UNUSED IN
                             MVS **  (MDC145)                  @Z40AQ9A
CVTRSV77 DS    X -           RESERVED
CVTSPVLK DS    FL1 -         NUMBER OF TASKS WHICH HAVE TERMINATED
                             WHILE OWNING SUPERVISOR LOCK WITHOUT
                             OPERATOR HAVING YET BEEN NOTIFIED
CVTCTLFG DC    AL1(&CTLFLGS) SYSTEM CONTROL FLAGS
CVTRV323 EQU   X'80',,C'X' - ** CVTPSIC BIT UNUSED IN MVS **
                             (MDC118)                          @Z40AQ9A
CVTRV333 EQU   X'40',,C'X' - ** CVTAPGB BIT UNUSED IN MVS **
                             (MDC151)                          @Z40AQ9A
CVTRSV78 EQU   X'20',,C'X' - RESERVED
CVTDSTAT EQU   X'10' -       DEVSTAT OPTION IN EFFECT.  DEVICE ADDRESS
                             FOR 2319, 3330, 2314, 3330-1, 3340 CAN
                             VARY ACROSS SYSTEMS                 MDC189
CVTRSV79 EQU   X'08',,C'X' - RESERVED
CVTNOMP  EQU   X'04' -       MULTIPROCESSING CODE IS NOT IN THE SYSTEM
                                                                 MDC176
CVTGTRCE EQU   X'02' -       GENERALIZED TRACE FACILITY (GTF) HAS
                             SUPPRESSED SUPERVISOR TRACE         ICB446
CVTSDTRC EQU   X'01' -       SVC DUMP HAS SUPPRESSED SUPERVISOR TRACE
                                                                 ICB446
CVTAPG   DC    FL1'7' -      DISPATCHING PRIORITY OF AUTOMATIC PRIORITY
                             GROUP (APG)                         MDC152
CVTTRACE BR    11 -          BRANCH ON REGISTER INSTRUCTION.  SET BY
                             NIP.  REGISTER TEN FOR TRACE.  REGISTER
                             ELEVEN FOR NO TRACE.
CVTTRAC2 BR    11 -          THIS ALLOWS FOR SUPPRESSING TRACE
                             DYNAMICALLY BY SETTING CONDITION CODE
                             MASK TO ZERO IN FIRST INSTRUCTION
                             (CVTTRACE)
CVTRSCN  DC    V(IEATRSCN) - ADDRESS OF ROUTINE TO SCAN TCB TREE
CVTTAS   DC    A(0) -        ADDRESS OF ROUTINE TO TRANSFER ADDRESS
                             SPACE                               YM2706
CVTRV332 DC    A(0) -        ** CVTPVALD FIELD UNUSED IN MVS **
                             (MDC148)                          @Z40AQ9A
CVTSHRVM DS    A -           LOWEST ADDRESS OF SHARED VIRTUAL STORAGE
                             AREA.  THIS ADDRESS WILL BE THE BEGINNING
                             OF THE COMMON SERVICE AREA (CSA)
                             (MDC324)                          @Z30AQ9A
CVT0VL01 DC    V(IEA0VL01) - ENTRY POINT ADDRESS OF VALIDITY CHECK
                             ROUTINE (IEA0VL01) USED TO COMPARE
                             PROTECT KEY OF AN ADDRESS WITH TCB
                             PROTECT KEY
CVTRV324 DC    A(0) -        ** CVTPFIXQ FIELD UNUSED IN MVS **
                             (MDC119)                          @Z40AQ9A
CVTRV325 DC    A(0) -        ** CVTPFIXR FIELD UNUSED IN MVS **
                             (MDC120)                          @Z40AQ9A
CVTRV326 DC    A(0) -        ** CVTPFIXP FIELD UNUSED IN MVS **
                             (MDC121)                          @Z40AQ9A
CVTASCRF DC    A(0) -        CREATED ASCB QUEUE HEADER
                             (MDC337)                          @ZA04120
CVTASCRL DC    A(0) -        CREATED ASCB QUEUE TRAILER
                             (MDC338)                          @ZA04120
CVTPUTL  DC    A(0) -        ADDRESS OF IKJPUTL, TSO PUT LINE ROUTINE
                             (MDC207)                            YM2225
CVTSRBRT DC    V(IEAPDSRT) - DISPATCHER RETURN ADDRESS FOR SRB ROUTINES
                                                                 MDC130
CVTOLT0A DC    V(IFDOLT0A) - BRANCH ENTRY TO OLTEP MEMORY TERMINATION
                             RESOURCE MANAGER                    MDC129
CVTSMFEX DC    V(IEASMFEX) - BRANCH ENTRY TO SYSTEM MANAGEMENT
                             FACILITIES (SMF) EXCP COUNTING ROUTINE
                             FOR VAM WINDOW INTERCEPT            MDC133
CVTCSPIE DC    A(0) -        FOR CHECKPOINT/RESTART, BRANCH ENTRY TO
                             SPIE                                MDC149
CVTPTGT  DC    A(0) -        ADDRESS OF IKJPTGT, TSO PUTGET ROUTINE
                             (MDC208)                            YM2225
CVTIOSPL DS    FL1 -         PRIORITY LEVEL OF I/O SUPERVISOR CHANNEL
                             SCHEDULER                           MDC019
CVTRV513 DS    XL1 -         RESERVED                            MDC165
CVTDSSAC DC    XL1'00' -     DYNAMIC SUPPORT SYSTEM (DSS) ACTIVATED
                             FLAG - USED BY RESTART FLIH.  IF X'00',
                             DSS NOT INITIALIZED.  IF X'FF', DSS HAS
                             BEEN INITIALIZED.                   MDC163
CVTRV139 DS    XL1 -         RESERVED
CVTSTCK  DC    A(0) -        ADDRESS OF IKJSTCK, TSO STACK ROUTINE
                             (MDC209)                            YM2225
CVTMAXMP DC    H'1' -        FOR MEASUREMENT FACILITY (MF/1), MAXIMUM
                             PHYSICAL CPU ADDRESS SUPPORTED BY THIS
                             RELEASE                             MDC165
CVTRV144 DS    H -           RESERVED
CVTSCAN  DC    A(0) -        ADDRESS OF IKJSCAN, TSO SCAN ROUTINE
                             (MDC210)                            YM2225
CVTAUTHL DS    A -           POINTER TO AUTHORIZED LIBRARY TABLE MDC001
CVTBLDCP DC    V(IEAVBLDP) - BRANCH ENTRY TO BUILD POOL          MDC003
CVTGETCL DC    V(IEAVGTCL) - BRANCH ENTRY TO GET CELL            MDC004
CVTFRECL DC    V(IEAVFRCL) - BRANCH ENTRY TO FREE CELL           MDC005
CVTDELCP DC    V(IEAVDELP) - BRANCH ENTRY TO DELETE POOL         MDC006
CVTCRMN  DC    V(CRBRANCH) - BRANCH ENTRY TO SVC 120 (GETMAIN/FREEMAIN
                             CRBRANCH)                           MDC007
CVTCRAS  DC    V(IEAVGCAS) - BRANCH ENTRY TO 'CREATE ADDRESS SPACE'
                                                                 MDC008
CVTQSAS  DC    V(IEAQSPET) - BRANCH ENTRY TO TASK TERMINATION    MDC009
CVTFRAS  DC    V(IEAVGFAS) - BRANCH ENTRY TO 'FREE ADDRESS SPACE'
                                                                 MDC010
CVTS1EE  DC    V(IGC043BR) - BRANCH ENTRY TO STAGE 1 EXIT EFFECTOR
                                                                 MDC011
CVTPARS  DC    A(0) -        ADDRESS OF IKJPARS, TSO PARSE ROUTINE
                             (MDC211)                            YM2225
CVTQUIS  DC    V(IEAVAR02) - BRANCH ENTRY TO QUIESCE             MDC013
CVTSTXU  DC    A(0) -        BRANCH ENTRY TO ATTENTION EXIT EPILOGUE
                             (MDC321)                          @Z30HP9A
CVTOPTE  DC    V(IRARMI00) - BRANCH ENTRY ADDRESS TO SYSEVENT    MDC015
CVTSDRM  DS    A -           BRANCH ENTRY ADDRESS OF THE RESOURCE
                             MANAGER ROUTINE FOR SVC DUMP.  THIS
                             ROUTINE CAN BE INVOKED BY MEMORY
                             TERMINATION                         MDC077
CVTIOSCS DS    A -           ENTRY POINT OF I/O SUPERVISOR CHANNEL
                             SCHEDULER                           MDC018
CVTAQTOP DC    V(IEFAQTOP) - POINTER TO AREA CONTAINING QUIESCE
                             DESCRIPTOR BLOCK (QDB'S) FOR DEVICE
                             ALLOCATION                          MDC021
CVTVVMDI DS    A -           CONSTANT USED BY PAGED LINK PACK AREA
                             (LPA) DIRECTORY SEARCH ALGORITHM    MDC022
CVTASVT  DS    A -           POINTER TO ADDRESS SPACE VECTOR TABLE
                             (ASVT)                              MDC070
CVTGDA   DS    A -           POINTER TO GLOBAL DATA AREA (GDA) IN SQA
                                                                 MDC024
CVTASCBH DC    V(IEAMASCB) - POINTER TO HIGHEST PRIORITY ADDRESS SPACE
                             CONTROL BLOCK (ASCB) ON THE ASCB
                             DISPATCHING QUEUE (HEAD OF ASCB QUEUE)
                                                                 MDC027
CVTASCBL DC    V(IEAMASCB) - POINTER TO LOWEST PRIORITY ASCB ON THE
                             ASCB DISPATCHING QUEUE (MDC339)   @Z40WP9A
CVTRTMCT DS    A -           POINTER TO RECOVERY/TERMINATION CONTROL
                             TABLE                               MDC031
CVTSV60  DS    A -           ADDRESS OF SVC 60 BRANCH ENTRY POINT
                             (MDC354)                          @Z40FP9A
CVTSDMP  DC    V(IEAVTSDX) - ADDRESS OF SVC DUMP BRANCH ENTRY POINT
                                                                 MDC033
CVTSCBP  DC    V(IEAVTSBP) - ADDRESS OF SCB PURGE RESOURCE MANAGER
                                                                 MDC034
CVTSDBF  DC    X'80000000' - ADDRESS OF 4K SQA BUFFER USED BY SVC
                             DUMP.  HIGH-ORDER BIT OF THIS CVT WORD
                             IS USED AS LOCK TO INDICATE BUFFER IS
                             IN USE                              MDC035
CVTRTMS  DC    A(0) -        ADDRESS OF SERVICABILITY LEVEL INDICATOR
                             PROCESSING (SLIP) HEADER (MDC358) @G17SP9A
CVTTPIOS DS    A -           ADDRESS OF THE TELEPROCESSING I/O
                             SUPERVISOR ROUTINE (TPIOS)          MDC078
CVTSIC   DS    A -           BRANCH ADDRESS OF THE ROUTINE TO SCHEDULE
                             SYSTEM INITIALIZED CANCEL           MDC042
CVTOPCTP DC    V(IRARMCNS) - ADDRESS OF SYSTEM RESOURCES MANAGER (SRM)
                             CONTROL TABLE                       MDC043
CVTEXPRO DC    V(IEAVEXPR) - ADDRESS OF EXIT PROLOGUE/TYPE 1 EXIT
                                                                 MDC044
CVTGSMQ  DC    V(IEAGSMQ) -  ADDRESS OF GLOBAL SERVICE MANAGER QUEUE
                                                                 MDC045
CVTLSMQ  DC    V(IEALSMQ) -  ADDRESS OF LOCAL SERVICE MANAGER QUEUE
                                                                 MDC046
CVTGSPL  DC    V(IEAGSPL) -  ADDRESS OF GLOBAL SYSTEM PRIORITY LIST
                             QUEUE                               MDC047
CVTVWAIT DC    V(IEAVWAIT) - ADDRESS OF WAIT ROUTINE             MDC048
CVTPARRL DC    V(IEAPPGMA) - ADDRESS OF PARTIALLY LOADED DELETE QUEUE
                                                                 MDC049
CVTAPFT  DS    A -           ADDRESS OF AUTHORIZED PROGRAM FACILITY
                             (APF) TABLE.  INITIALIZED BY NIP.   MDC050
CVTQCS01 DC    V(IEAQCS01) - BRANCH ENTRY ADDRESS TO PROGRAM MANAGER
                             USED BY ATTACH                      MDC051
CVTFQCB  DS    A -           POINTER TO FIRST MAJOR QCB FOR ENQ  MDC052
CVTLQCB  DS    A -           POINTER TO LAST MAJOR QCB FOR ENQ   MDC053
CVTRENQ  DC    V(IEAVENQ2) - RESOURCE MANAGER ADDRESS FOR ENQ    MDC054
CVTRSPIE DC    A(0) -        RESOURCE MANAGER FOR SPIE           MDC055
CVTLKRMA DC    V(IEAVELRM) - RESOURCE MANAGER ADDRESS FOR LOCK MANAGER
                                                                 MDC056
CVTCSD   DS    A -           VIRTUAL ADDRESS OF COMMON SYSTEM DATA AREA
                             (CSD).  INITIALIZED BY NIP.         MDC057
CVTDQIQE DC    V(IEADQIQE) - RESOURCE MANAGER FOR EXIT EFFECTORS MDC058
CVTRPOST DC    V(IEARPOST) - RESOURCE MANAGER FOR POST           MDC059
CVT062R1 DC    V(IGC062R1) - BRANCH ENTRY TO DETACH              MDC060
CVTVEAC0 DC    V(IEAVEAC0) - ASCBCHAP BRANCH ENTRY               MDC061
CVTGLMN  DC    V(GLBRANCH) - GLOBAL BRANCH ENTRY ADDRESS FOR
                             GETMAIN/FREEMAIN                    MDC062
CVTSPSA  DC    V(IEAVGWSA) - POINTER TO GLOBAL WORK/SAVE AREA VECTOR
                             TABLE (WSAG)                        MDC071
CVTWSAL  DC    V(IEAVWSAL) - ADDRESS OF TABLE OF LENGTHS OF LOCAL
                             WORK/SAVE AREAS                     MDC072
CVTRV149 DC    A(0) -        RESERVED  (MDC073)                  YM4043
CVTWSAC  DC    V(IEAVWSAC) - ADDRESS OF TABLE OF LENGTHS OF CPU
                             WORK/SAVE AREAS                     MDC074
CVTRECRQ DC    V(IEAVTRER) - ADDRESS OF THE RECORDING REQUEST FACILITY
                             (PART OF RTM1 - CALLED BY RTM2 AND RMS)
                                                                 MDC075
CVTASMVT DC    V(ASMVT) -    POINTER TO AUXILIARY STORAGE MANAGEMENT
                             VECTOR TABLE (AMVT)  (MDC340)     @Z40WP9A
CVTIOBP  DC    V(IDA121CV) - ADDRESS OF THE BLOCK PROCESSOR CVT
                             (MDC079)                            YM0029
CVTSPOST DC    V(IEASPOST) - POST RESOURCE MANAGER TERMINATION ROUTINE
                             (RMTR) ENTRY POINT                  MDC085
CVTRSTWD DC    F'0' -        RESTART RESOURCE MANAGEMENT WORD -
                             CONTAINS IDENTIFIER OF USER IF RESTART IS
                             IN USE.  OTHERWISE, ZERO.           MDC161
CVTFETCH DC    V(IEWMSEPT) - ADDRESS OF ENTRY POINT FOR BASIC FETCH
                                                                 MDC196
CVT044R2 DC    V(IGC044R2) - ADDRESS OF IGC044R2 IN CHAP SERVICE
                             ROUTINE                             MDC197
CVTPERFM DC    A(0) -        ADDRESS OF THE PERFORMANCE WORK AREA.
                             SET BY IGX00018.                    MDC205
CVTDAIR  DC    A(0) -        ADDRESS OF IKJDAIR, TSO DYNAMIC
                             ALLOCATION INTERFACE ROUTINE  (MDC212)
                                                                 YM2225
CVTEHDEF DC    A(0) -        ADDRESS OF IKJEHDEF, TSO DEFAULT SERVICE
                             ROUTINE  (MDC213)                   YM2225
CVTEHCIR DC    A(0) -        ADDRESS OF IKJEHCIR, TSO CATALOG
                             INFORMATION ROUTINE  (MDC214)       YM2225
CVTSSAP  DS    A -           ADDRESS OF SYSTEM SAVE AREA         MDC063
CVTAIDVT DS    A -           POINTER TO APPENDAGE ID VECTOR TABLE
                                                                 MDC064
CVTIPCDS DC    V(IEAVEDR) -  BRANCH ENTRY FOR DIRECT SIGNAL
                             SERVICE ROUTINE                     MDC065
CVTIPCRI DC    V(IEAVERI) -  BRANCH ENTRY FOR REMOTE IMMEDIATE
                             SIGNAL SERVICE ROUTINE              MDC066
CVTIPCRP DC    V(IEAVERP) -  BRANCH ENTRY FOR REMOTE PENDABLE
                             SIGNAL SERVICE ROUTINE              MDC067
CVTPCCAT DS    A -           POINTER TO PHYSICAL CCA VECTOR TABLE
                                                                 MDC068
CVTLCCAT DS    A -           POINTER TO LOGICAL CCA VECTOR TABLE MDC069
CVTRV210 DS    B -           RESERVED
CVTRV211 EQU   X'80',,C'X' - RESERVED
CVTRV212 EQU   X'40',,C'X' - RESERVED
CVTRV213 EQU   X'20',,C'X' - RESERVED
CVTRV214 EQU   X'10',,C'X' - RESERVED
CVTRV215 EQU   X'08',,C'X' - RESERVED
CVTRV216 EQU   X'04',,C'X' - RESERVED
CVTRV217 EQU   X'02',,C'X' - RESERVED
CVTRV218 EQU   X'01',,C'X' - RESERVED
CVTRV219 DS    B -           RESERVED
CVTRV220 EQU   X'80',,C'X' - RESERVED
CVTRV221 EQU   X'40',,C'X' - RESERVED
CVTRV222 EQU   X'20',,C'X' - RESERVED
CVTRV223 EQU   X'10',,C'X' - RESERVED
CVTRV224 EQU   X'08',,C'X' - RESERVED
CVTRV225 EQU   X'04',,C'X' - RESERVED
CVTRV226 EQU   X'02',,C'X' - RESERVED
CVTRV227 EQU   X'01',,C'X' - RESERVED
CVTRV228 DS    B -           RESERVED
CVTRV229 EQU   X'80',,C'X' - RESERVED
CVTRV230 EQU   X'40',,C'X' - RESERVED
CVTRV231 EQU   X'20',,C'X' - RESERVED
CVTRV232 EQU   X'10',,C'X' - RESERVED
CVTRV233 EQU   X'08',,C'X' - RESERVED
CVTRV234 EQU   X'04',,C'X' - RESERVED
CVTRV235 EQU   X'02',,C'X' - RESERVED
CVTRV236 EQU   X'01',,C'X' - RESERVED
CVTRV237 DS    B -           RESERVED
CVTRV238 EQU   X'80',,C'X' - RESERVED
CVTRV239 EQU   X'40',,C'X' - RESERVED
CVTRV240 EQU   X'20',,C'X' - RESERVED
CVTRV241 EQU   X'10',,C'X' - RESERVED
CVTRV242 EQU   X'08',,C'X' - RESERVED
CVTRV243 EQU   X'04',,C'X' - RESERVED
CVTRV244 EQU   X'02',,C'X' - RESERVED
CVTRV245 EQU   X'01',,C'X' - RESERVED
CVTRV246 DS    XL1 -         RESERVED
CVTRV247 DS    XL1 -         RESERVED
CVTRV248 DS    XL1 -         RESERVED
CVTRV249 DS    XL1 -         RESERVED
CVTRV250 DS    XL1 -         RESERVED
CVTRV251 DS    XL1 -         RESERVED
CVTRV252 DS    AL2 -         RESERVED
CVTRV253 DS    H -           RESERVED
CVTRV254 DS    H -           RESERVED
CVTPWI   DC    A(0) -        ADDRESS OF THE WINDOW INTERCEPT ROUTINE
                             (MDC104)                            YM4043
CVTPVBP  DC    A(0) -        ADDRESS OF THE VIRTUAL BLOCK PROCESSOR
                             (MDC105)                            YM4043
CVTMFCTL DC    A(0) -        POINTER TO MEASUREMENT FACILITY CONTROL
                             BLOCK                               MDC100
CVTMFRTR DC    A(CVTBRET) -  IF MEASUREMENT FACILITY IS ACTIVE,
                             CONTAINS ADDRESS OF MEASUREMENT FACILITY
                             ROUTINE.  OTHERWISE, ADDRESS OF CVTBRET.
                                                                 MDC101
CVTMFACT EQU   X'80' -       IF ONE, I/O SUPERVISOR AND TIMER SECOND
                             LEVEL INTERRUPT HANDLER HOOKS BRANCH
                             TO MEASUREMENT FACILITY ROUTER.  USED TO
                             SET HIGH-ORDER BIT OF CVTMFRTR.     MDC102
CVTVPSIB DC    V(IEAVPSIB) - BRANCH ENTRY TO PAGE SERVICES       MDC108
CVTVSI   DC    V(IEAVAMSI) - BRANCH ENTRY TO VAM SERVICES        MDC109
CVTVFP   DC    V(IEAVFP1) -  BRANCH ENTRY TO FINDPAGE            MDC110
CVTRV262 DS    B -           RESERVED
CVTRV263 EQU   X'80',,C'X' - RESERVED
CVTRV264 EQU   X'40',,C'X' - RESERVED
CVTRV265 EQU   X'20',,C'X' - RESERVED
CVTRV266 EQU   X'10',,C'X' - RESERVED
CVTRV267 EQU   X'08',,C'X' - RESERVED
CVTRV268 EQU   X'04',,C'X' - RESERVED
CVTRV269 EQU   X'02',,C'X' - RESERVED
CVTRV270 EQU   X'01',,C'X' - RESERVED
CVTRV271 DS    B -           RESERVED
CVTRV272 EQU   X'80',,C'X' - RESERVED
CVTRV273 EQU   X'40',,C'X' - RESERVED
CVTRV274 EQU   X'20',,C'X' - RESERVED
CVTRV275 EQU   X'10',,C'X' - RESERVED
CVTRV276 EQU   X'08',,C'X' - RESERVED
CVTRV277 EQU   X'04',,C'X' - RESERVED
CVTRV278 EQU   X'02',,C'X' - RESERVED
CVTRV279 EQU   X'01',,C'X' - RESERVED
CVTRV280 DS    B -           RESERVED
CVTRV281 EQU   X'80',,C'X' - RESERVED
CVTRV282 EQU   X'40',,C'X' - RESERVED
CVTRV283 EQU   X'20',,C'X' - RESERVED
CVTRV284 EQU   X'10',,C'X' - RESERVED
CVTRV285 EQU   X'08',,C'X' - RESERVED
CVTRV286 EQU   X'04',,C'X' - RESERVED
CVTRV287 EQU   X'02',,C'X' - RESERVED
CVTRV288 EQU   X'01',,C'X' - RESERVED
CVTRV289 DS    B -           RESERVED
CVTRV290 EQU   X'80',,C'X' - RESERVED
CVTRV291 EQU   X'40',,C'X' - RESERVED
CVTRV292 EQU   X'20',,C'X' - RESERVED
CVTRV293 EQU   X'10',,C'X' - RESERVED
CVTRV294 EQU   X'08',,C'X' - RESERVED
CVTRV295 EQU   X'04',,C'X' - RESERVED
CVTRV296 EQU   X'02',,C'X' - RESERVED
CVTRV297 EQU   X'01',,C'X' - RESERVED
CVTTRCA  DC    A(0) -        ADDRESS OF TRACE TABLE HEADER
                             (MDC327)                          @ZA02352
CVTRV302 DS    AL2 -         RESERVED
CVTRV303 DS    AL2 -         RESERVED
CVTRV304 DS    H -           RESERVED
CVTRV305 DS    H -           RESERVED
CVTRV306 DS    H -           RESERVED
CVTRV307 DS    H -           RESERVED
CVTVIOP  DC    V(IEAVPIOP) - ENTRY POINT OF PAGE I/O POST        MDC111
CVTRMBR  DC    V(RMBRANCH) - ADDRESS OF REGMAIN BRANCH ENTRY     MDC123
CVTLFRM  DC    V(FMBRANCH) - LIST FORMAT FREEMAIN BRANCH ENTRY POINT
                                                                 MDC124
CVTGMBR  DC    V(GMBRANCH) - LIST FORMAT GETMAIN BRANCH ENTRY POINT
                                                                 MDC125
CVT0TC0A DC    A(0) -        ADDRESS OF TASK CLOSE MODULE IFG0TC0A
                                                                 MDC128
CVTRLSTG DC    F'0' -        SIZE OF ACTUAL REAL STORAGE ONLINE AT
                             IPL TIME IN 'K'.  VALUE PLACED HERE BY
                             IEAVNIP0.                           MDC153
CVTSPFRR DC    V(IEAVESPR) - 'SUPER FRR' ADDRESS (ADDRESS OF FUNCTIONAL
                             RECOVERY ROUTINE ESTABLISHED AT NIP0 TIME
                             TO PROTECT SUPERVISOR CONTROL PROGRAM)
                                                                 MDC154
CVTVEMS0 DC    V(IEAVEMS0) - ADDRESS OF MEMORY SWITCH ROUTINE    MDC155
CVTJRECM DC    A(0) -        ADDRESS OF SUBSYSTEM INTERFACE RESOURCE
                             MANAGER                             MDC157
CVTIRECM DC    A(0) -        ADDRESS OF INITIATOR RESOURCE MANAGER
                                                                 MDC158
CVTDARCM DC    A(0) -        ADDRESS OF DEVICE ALLOCATION RESOURCE
                             MANAGER                             MDC159
CVT0PT02 DC    V(IEA0PT02) - ADDRESS OF POST ENTRY POINT IEA0PT02
                                                                 MDC160
CVTSTPRS DC    V(IEESTPRS) - ENTRY POINT OF STOP AND RESTART
                             SUBROUTINE                          MDC162
CVTWTCB  DC    V(IEAWTCB) -  ADDRESS OF WAIT STATE TCB           MDC164
CVTVACR  DC    A(0) -        ACR/VARY CPU CHANNEL RECOVERY ROUTINE
                             ADDRESS.  ADDRESS FILLED IN BY VARY CPU
                             PROCESSOR.                          MDC178
CVTQUIT  DC    A(0) -        VARY CPU SHUTDOWN ROUTINE ADDRESS.
                             ADDRESS FILLED IN BY VARY CPU PROCESSOR.
                                                                 MDC179
CVTGTFR8 DC    V(AHLVCCR8) - GENERALIZED TRACE FACILITY (GTF) CONTROL
                             REGISTER 8 INITIALIZATION ROUTINE ADDRESS
                                                                 MDC180
CVTVSTOP DC    V(IEEVSTOP) - ADDRESS OF VARY CPU STOP CPU ROUTINE
                                                                 MDC169
CVTVPSA  DC    A(0) -        ADDRESS OF COPY OF SYSGEN'ED PSA - PLACED
                             HERE BY NIP                         MDC170
CVTRMPTT DC    A(0) -        ADDRESS OF ISTRAMA1, THE VTAM RESOURCE
                             MANAGER FOR NORMAL AND ABNORMAL TASK
                             TERMINATION  (MDC322)             @Z30AP9A
CVTRMPMT DC    A(0) -        ADDRESS OF ISTRAMA2, THE VTAM RESOURCE
                             MANAGER FOR NORMAL AND ABNORMAL MEMORY
                             TERMINATION  (MDC323)             @Z30AP9A
CVTEXP1  DC    V(IEAVEXP1) - ADDRESS OF EXIT PROLOGUE WHICH RETURNS TO
                             THE DISPATCHER                      MDC173
CVTCSDRL DC    A(0) -        REAL ADDRESS OF COMMON SYSTEM DATA AREA
                             (CSD).  INITIALIZED BY NIP.         MDC174
CVTSSRB  DC    V(IGC07903) - STATUS STOP SRB ENTRY               MDC175
CVTRPT   DC    A(0) -        ADDRESS OF IGARPT01 MODULE OF RADIX
                             PARTITION TREE SERVICES.  INITIALIZED
                             BY NIP.                             MDC177
CVTQV1   DC    V(IEAVEQV1) - ADDRESS OF QUEUE VERIFICATION FOR SINGLE
                             THREADED QUEUES WITH HEADERS ONLY   MDC181
CVTQV2   DC    V(IEAVEQV2) - ADDRESS OF QUEUE VERIFICATION FOR SINGLE
                             THREADED QUEUES WITH HEADER AND TRAILER
                                                                 MDC182
CVTQV3   DC    V(IEAVEQV3) - ADDRESS OF QUEUE VERIFICATION FOR DOUBLE
                             THREADED QUEUES                     MDC183
CVTGSDA  DC    F'0' -        ADDRESS OF GLOBAL SYSTEM DUPLEX AREA.
                             ADDRESS FILLED IN BY NIP0.          MDC184
CVTGSDAB EQU   X'80' -       IF HIGH-ORDER BIT IS ONE, THERE IS A VALID
                             VALUE IN FOLLOWING 31 BITS          MDC185
CVTADV   DC    V(IEAVEADV) - ADDRESS OF ADDRESS VERIFICATION ROUTINE
CVTSSCR  DC    A(0) -        ADDRESS OF STORAGE SYSTEM CONTROLLER
                             RECOVERY MANAGER CLEANUP ROUTINE
                             (SSC RMCR)  (MDC319)              @Z30LP9A
CVTCBBR  DC    V(CBBRANCH) - BRANCH ENTRY ADDRESS TO GETMAIN/FREEMAIN
                             (MDC325)                          @Z30EN9A
CVTEFF02 DC    A(0) -        ADDRESS OF IKJEFF02, TSO MESSAGE ISSUER
                             SERVICE ROUTINE  (MDC326)         @ZM30972
CVTRV604 DC    A(0) -        RESERVED  (MDC307)                @Z30AQ9A
CVTRV605 DC    A(0) -        RESERVED  (MDC307)                @Z30AQ9A
CVTRV606 DC    A(0) -        RESERVED  (MDC307)                @Z30AQ9A
CVTRAC   DC    A(0) -        ADDRESS OF ACCESS CONTROL CVT
                             (MDC320)                          @Z40RP9A
CVTCGK   DC    V(IEAVCKEY) - ADDRESS OF ROUTINE USED TO CHANGE THE KEY
                             OF VIRTUAL PAGES  (MDC331)        @Z40EP9A
CVTRV609 DC    A(0) -        RESERVED  (MDC332)                @Z40AQ9A
CVT0PT0E DC    V(IEA0PT0E) - ENTRY POINT TO IDENTIFY POST EXIT ROUTINES
                             (MDC334)                          @Z40EP9A
CVT0PT03 DC    V(IEA0PT03) - POST REINVOCATION ENTRY POINT FROM POST
                             EXIT ROUTINES  (MDC335)           @Z40EP9A
CVTTCASP DC    A(0) -        RESERVED FOR FUTURE USE  (MDC336) @Z40DQ9A
CVTASMRM DC    V(ILRTERMR) - ADDRESS OF AUXILIARY STORAGE MANAGEMENT
                             RESOURCE MANAGER FOR ADDRESS SPACE
                             TERMINATION  (MDC341)             @Z40WP9A
CVTJTERM DC    V(ILRJTERM) - ADDRESS OF AUXILIARY STORAGE MANAGEMENT
                             JOB TERMINATION RESOURCE MANAGER
                             (MDC342)                          @Z40WP9A
CVTRSUME DC    V(IEAVRSME) - ADDRESS OF RESUME FUNCTION
                             (MDC344)                          @Z40FP9A
CVTTCTL  DC    V(IEAVTCTL) - ADDRESS OF TRANSFER CONTROL (TCTL)
                             FUNCTION  (MDC345)                @Z40FP9A
CVTCDAL  DC    A(0) -        ADDRESS OF COMMON DISPATCHER ACTIVE LIST
                             (MDC346)                          @Z40FP9A
CVTT6SVC DC    V(IEAVET6E) - ENTRY POINT ADDRESS FOR TYPE 6 SVC EXIT
                             FUNCTION  (MDC347)                @Z40FP9A
CVTSUSP  DC    V(IEAVSPND) - ADDRESS OF SUSPEND ROUTINE
                             (MDC348)                          @Z40FP9A
CVTIHASU DC    V(IEAIHASU) - ADDRESS OF BIT STRING  (MDC355)   @Z404P9A
CVTRV621 DC    A(0) -        RESERVED  (MDC307)                @Z30AQ9A
CVTRV622 DC    A(0) -        RESERVED  (MDC307)                @Z30AQ9A
CVTRV623 DC    A(0) -        RESERVED  (MDC307)                @Z30AQ9A
CVTRV624 DC    A(0) -        RESERVED  (MDC307)                @Z30AQ9A
CVTRV625 DC    A(0) -        RESERVED  (MDC307)                @Z30AQ9A
CVTRV626 DC    A(0) -        RESERVED  (MDC307)                @Z30AQ9A
CVTRV627 DC    A(0) -        RESERVED  (MDC307)                @Z30AQ9A
CVTRV628 DC    A(0) -        RESERVED  (MDC307)                @Z30AQ9A
.CVTV4   ANOP

               OS - OS/VS COMMON EXTENSION
               ADDRESS OF EXTENSION IS IN CVTEXT1

         AIF   ('&DSECT' EQ 'NO').CVTW1
CVTXTNT1 DSECT
         AGO   .CVTW2
.CVTW1   ANOP
CVTXTNT1 EQU   * -           START OF OS - OS/VS EXTENSION       ICB421
.CVTW2   ANOP
CVTFACHN DC    A(0) -        ADDRESS OF CHAIN OF DCB FIELD AREAS
                             (ISAM)                              ICB421
CVTRSV87 DS    F -           RESERVED
CVTRSV88 DS    F -           RESERVED

               OS/VS1 - OS/VS2 COMMON EXTENSION
               ADDRESS OF EXTENSION IS IN CVTEXT2

         AIF   ('&DSECT' EQ 'NO').CVTW3
CVTXTNT2 DSECT
         AGO   .CVTW4
.CVTW3   ANOP
CVTXTNT2 EQU   * -           START OF OS/VS1 - OS/VS2 EXTENSION  ICB330
.CVTW4   ANOP
CVTDSSV  DS    0A -          ADDRESS OF THE DYNAMIC SUPPORT SYSTEM
                             (DSS) VECTOR TABLE                  ICB313
CVTRSV89 DS    XL1 -         RESERVED                            ICB313
CVTDSSVA DC    VL3(IQADSV00) ADDRESS OF THE DYNAMIC SUPPORT SYSTEM
                             (DSS) VECTOR TABLE                  ICB393
CVTNUCLS DS    C -           IDENTIFICATION OF THE NUCLEUS MEMBER
                             NAME                                ICB322
CVTFLGBT DC    XL1'00' -     FLAG BYTE  (OS/VS1)  (MDC301)     @X04EP9A
CVTNPE   EQU   X'80' -       INDICATES NON-PAGING ENVIRONMENT (VM
                             HANDSHAKING)  (OS/VS1)  (MDC302)  @X04EP9A
CVTVME   EQU   X'40' -       INDICATES MACHINE IS OPERATING IN VM
                             ENVIRONMENT  (OS/VS1)  (MDC303)   @X04EP9A
CVTBAH   EQU   X'20' -       INDICATES THAT THE VM/370 - OS/VS1 BTAM
                             AUTOPOLL HANDSHAKE IS OPERATIONAL
                             (OS/VS1)  (MDC356)                @X60KL9A
CVTRSV9D EQU   X'10',,C'X' - RESERVED
CVTRSV9E EQU   X'08',,C'X' - RESERVED
CVTRSV9F EQU   X'04',,C'X' - RESERVED
CVTRSV9G EQU   X'02',,C'X' - RESERVED
CVTRSV9H EQU   X'01',,C'X' - RESERVED
CVTRSV91 DS    H -           RESERVED
CVTDEBVR DC    V(IFGDEBVR) - ADDRESS OF BRANCH ENTRY POINT OF DEB
                             VALIDITY CHECK ROUTINE (ICB380)     XM9028
CVTRSV92 DC    A(0) -        RESERVED  (MDC190)                  YM2278
CVTRSV93 DS    F -           RESERVED
CVTRSV94 DS    F -           RESERVED
CVTQID   DS    0A -          SAME AS CVTQIDA BELOW               ICB381
CVTRSV95 DC    XL1'00' -     RESERVED                            ICB381
CVTQIDA  DC    AL3(0) -      ADDRESS OF QUEUE IDENTIFICATION (QID)
                             TABLE PREFIX                        ICB381
CVTOLTEP DS    A -           POINTER TO CONTROL BLOCK CREATED BY SVC 59
                             TO POINT TO PSEUDO-DEB'S            ICB423
CVTRSV96 DS    H -           RESERVED
CVTRSV97 DS    H -           RESERVED
CVTRSV98 DS    F -           RESERVED
CVTRSV99 DC    A(0) -        RESERVED  (MDC329)                @Z40AQ9A
CVTSKTA  DC    A(0) -        ADDRESS OF STORAGE KEY TABLE (VM
                             HANDSHAKING)  (OS/VS1)  (MDC304)  @X04EP9A
         AIF   (&CVTAOS2).CVTW5                                @Z30LP9A
CVTICB   DC    V(ICBSS1CB) - ADDRESS OF MASS STORAGE SYSTEM (MSS)
                             CONTROL BLOCK  (MDC305)           @X04AC9A
         AGO   .CVTW6                                          @Z30LP9A
.CVTW5   ANOP                                                  @Z30LP9A
CVTICB   DC    A(0) -        ADDRESS OF MASS STORAGE SYSTEM (MSS)
                             CONTROL BLOCK  (MDC305)           @Z30LP9A
.CVTW6   ANOP                                                  @Z30LP9A
CVTRV400 DS    B -           RESERVED
CVTRV401 EQU   X'80',,C'X' - RESERVED
CVTRV402 EQU   X'40',,C'X' - RESERVED
CVTRV403 EQU   X'20',,C'X' - RESERVED
CVTRV404 EQU   X'10',,C'X' - RESERVED
CVTRV405 EQU   X'08',,C'X' - RESERVED
CVTRV406 EQU   X'04',,C'X' - RESERVED
CVTRV407 EQU   X'02',,C'X' - RESERVED
CVTRV408 EQU   X'01',,C'X' - RESERVED
CVTRV409 DS    B -           RESERVED
CVTRV410 EQU   X'80',,C'X' - RESERVED
CVTRV411 EQU   X'40',,C'X' - RESERVED
CVTRV412 EQU   X'20',,C'X' - RESERVED
CVTRV413 EQU   X'10',,C'X' - RESERVED
CVTRV414 EQU   X'08',,C'X' - RESERVED
CVTRV415 EQU   X'04',,C'X' - RESERVED
CVTRV416 EQU   X'02',,C'X' - RESERVED
CVTRV417 EQU   X'01',,C'X' - RESERVED
CVTRV418 DS    XL1 -         RESERVED
CVTRV419 DS    XL1 -         RESERVED
CVTRV420 DS    AL2 -         RESERVED
CVTRV421 DS    H -           RESERVED
CVTRV422 DS    H -           RESERVED
CVTRV423 DS    H -           RESERVED
CVTATCVT DS    A -           POINTER TO VTAM'S CVT               MDC080
CVTATACT EQU   X'80'         IF ON, VTAM IS ACTIVE               MDC081
CVTRV425 DS    A -           RESERVED
CVTRV426 DS    A -           RESERVED
CVTRV427 DS    A -           RESERVED
CVTRV428 DS    F -           RESERVED
CVTRV429 DS    B -           RESERVED
CVTRV430 EQU   X'80',,C'X' - RESERVED
CVTRV431 EQU   X'40',,C'X' - RESERVED
CVTRV432 EQU   X'20',,C'X' - RESERVED
CVTRV433 EQU   X'10',,C'X' - RESERVED
CVTRV434 EQU   X'08',,C'X' - RESERVED
CVTRV435 EQU   X'04',,C'X' - RESERVED
CVTRV436 EQU   X'02',,C'X' - RESERVED
CVTRV437 EQU   X'01',,C'X' - RESERVED
CVTRV438 DS    B -           RESERVED
CVTRV439 EQU   X'80',,C'X' - RESERVED
CVTRV440 EQU   X'40',,C'X' - RESERVED
CVTRV441 EQU   X'20',,C'X' - RESERVED
CVTRV442 EQU   X'10',,C'X' - RESERVED
CVTRV443 EQU   X'08',,C'X' - RESERVED
CVTRV444 EQU   X'04',,C'X' - RESERVED
CVTRV445 EQU   X'02',,C'X' - RESERVED
CVTRV446 EQU   X'01',,C'X' - RESERVED
CVTRV447 DS    XL1 -         RESERVED
CVTRV448 DS    XL1 -         RESERVED
CVTRV449 DS    AL2 -         RESERVED
CVTRV450 DS    H -           RESERVED
CVTRV451 DS    H -           RESERVED
CVTRV452 DS    H -           RESERVED
CVTRV453 DS    A -           RESERVED
CVTRV454 DS    A -           RESERVED
CVTRV455 DS    A -           RESERVED
CVTRV456 DS    A -           RESERVED
CVTRV457 DS    B -           RESERVED
CVTRV458 EQU   X'80',,C'X' - RESERVED
CVTRV459 EQU   X'40',,C'X' - RESERVED
CVTRV460 EQU   X'20',,C'X' - RESERVED
CVTRV461 EQU   X'10',,C'X' - RESERVED
CVTRV462 EQU   X'08',,C'X' - RESERVED
CVTRV463 EQU   X'04',,C'X' - RESERVED
CVTRV464 EQU   X'02',,C'X' - RESERVED
CVTRV465 EQU   X'01',,C'X' - RESERVED
CVTRV466 DS    B -           RESERVED
CVTRV467 EQU   X'80',,C'X' - RESERVED
CVTRV468 EQU   X'40',,C'X' - RESERVED
CVTRV469 EQU   X'20',,C'X' - RESERVED
CVTRV470 EQU   X'10',,C'X' - RESERVED
CVTRV471 EQU   X'08',,C'X' - RESERVED
CVTRV472 EQU   X'04',,C'X' - RESERVED
CVTRV473 EQU   X'02',,C'X' - RESERVED
CVTRV474 EQU   X'01',,C'X' - RESERVED
CVTRV475 DS    XL1 -         RESERVED
CVTRV476 DS    XL1 -         RESERVED
CVTRV477 DS    XL1 -         RESERVED
CVTRV478 DS    XL1 -         RESERVED
CVTRV479 DS    H -           RESERVED
CVTRV480 DS    A -           RESERVED
CVTRV481 DS    A -           RESERVED
CVTRV482 DS    A -           RESERVED

               END OF CVT
         POP   PRINT
         MEND  , */
  %CVTL2  :  ;
 %IF IKEPLS=''  %THEN
     %GOTO CVTL3;
 %IHALPUSH='@LISTPUSH';
 %IHALPOP='@LISTPOP';
 %IHALOFF='@LISTOFF';
 IHALPUSH;
 %IF IHALIST='YES'  %THEN
     %GOTO CVTL3;
 IHALOFF;
 %CVTL3:;
  /*                   CVT PROPER                                    */

  DECLARE
    1 CVTMAP   BASED(CVTPTR) ,
     2 CVTTCBP  PTR,             /* ADDRESS OF A DOUBLE WORD, THE
                                        FIRST CONTAINING THE NEXT-TO-
                                        BE-DISPATCHED TCB ADDRESS.
                                        THE SECOND CONTAINING THE
                                        LAST (CURRENT) TCB ADDRESS.
                                        BOTH WORDS ARE IDENTICAL
                                        UNLESS THE TASK GOES INTO A
                                        WAIT STATE.  WHEN IN A WAIT
                                        STATE, THE FIRST WORD IS SET
                                        TO ZERO UNTIL THE WAITING IS
                                        OVER AND THEN BOTH WORDS ARE
                                        ONCE AGAIN IDENTICAL.
                                        (OS/VS1)
                                        ADDRESS OF 4-WORD LIST OF
                                        ADDRESSES - THE NEXT TCB, THE
                                        CURRENT TCB, THE NEXT ASCB
                                        AND THE CURRENT ASCB, IN THAT
                                        ORDER (OS/VS2)         MDC026*/
     2 CVT0EF00 PTR,             /* ADDRESS OF ROUTINE TO SCHEDULE
                                        ASYNCHRONOUS EXITS           */
     2 CVTLINK  PTR,             /* ADDRESS OF DCB FOR
                                        SYS1.LINKLIB DATA SET        */
     2 CVTJOB   PTR,             /* ADDRESS OF QUEUE MANAGER
                                        RESIDENT DATA AREA (QMRES)
                                        (OS/VS1) (MDC083)      XM4042*/
     2 CVTBUF   PTR,             /* ADDRESS OF THE BUFFER OF THE
                                        RESIDENT CONSOLE INTERRUPT
                                        ROUTINE                      */
     2 CVTXAPG  PTR,             /* ADDRESS OF I/O SUPERVISOR
                                        APPENDAGE VECTOR TABLE       */
     2 CVT0VL00 PTR,             /* ADDRESS OF ENTRY POINT OF THE
                                        TASK SUPERVISOR'S ADDRESS
                                        VALIDITY CHECKING ROUTINE    */
     2 CVTPCNVT PTR,             /* ADDRESS OF ENTRY POINT OF THE
                                        ROUTINE WHICH CONVERTS A
                                        RELATIVE TRACK ADDRESS (TTR)
                                        TO AN ABSOLUTE TRACK ADDRESS
                                        (MBBCCHHR)                   */
     2 CVTPRLTV PTR,             /* ADDRESS OF ENTRY POINT OF THE
                                        ROUTINE WHICH CONVERTS AN
                                        ABSOLUTE TRACK ADDRESS
                                        (MBBCCHHR) TO A RELATIVE
                                        TRACK ADDRESS (TTR)          */
     2 CVTILK1  PTR,             /* ADDRESS OF THE CHANNEL AND
                                        CONTROL UNIT PORTION OF THE
                                        UCB LOOKUP TABLE             */
     2 CVTILK2  PTR,             /* ADDRESS OF THE UCB HALFWORD
                                        ADDRESS LIST PORTION OF THE
                                        UCB LOOKUP TABLE             */
     2 CVTXTLER PTR,             /* ADDRESS OF ERROR RECOVERY
                                        PROCEDURE (ERP) LOADER
                                        (IECVERPL) ENTRY POINT
                                        IECXTLER  (MDC349)   @Z40AQ9A*/
     2 CVTSYSAD PTR,             /* ADDRESS OF THE SYSTEM
                                        RESIDENCE VOLUME ENTRY IN THE
                                        UCB LOOKUP TABLE             */
     2 CVTBTERM PTR,             /* ADDRESS OF ENTRY POINT OF THE
                                        ABTERM ROUTINE               */
     2 CVTDATE  CHAR(4) ,   /* CURRENT DATE IN PACKED
                                        DECIMAL                      */
     2 CVTMSLT  PTR,             /* ADDRESS OF THE MASTER COMMON
                                        AREA IN MASTER SCHEDULER
                                        RESIDENT DATA AREA.
                                          NOTE - USE CVTMSER INSTEAD
                                          TO ADDRESS MASTER SCHEDULER
                                          RESIDENT DATA AREA.        */
     2 CVTZDTAB PTR,             /* ADDRESS OF I/O DEVICE
                                        CHARACTERISTIC TABLE         */
     2 CVTXITP  PTR,             /* ADDRESS OF ERROR INTERPRETER
                                        ROUTINE                      */
     2 CVTDAR   ,             /* SAME AS CVTDARA BELOW
                                        (OS/VS1)               MDC029*/
      3 CVTFLGS1 ,             /* FLAG BYTE (OS/VS1)     MDC030*/
       4 CVTDMPLK BIT(1),            /* SVC DUMP IS IN PROGRESS
                                        (OS/VS1)               MDC030*/
       4 CVTRSV01 BIT(1),            /* RESERVED                     */
       4 CVTRSV02 BIT(1),            /* RESERVED                     */
       4 CVTRSV03 BIT(1),            /* RESERVED                     */
       4 CVTRSV04 BIT(1),            /* RESERVED                     */
       4 CVTRSV05 BIT(1),            /* RESERVED                     */
       4 CVTRSV06 BIT(1),            /* RESERVED                     */
       4 CVTRSV07 BIT(1),            /* RESERVED                     */
      3 CVTDARA  BIT(24),            /* ADDRESS OF THE SYS1.DUMP I/O
                                        CONTROL BLOCKS NEEDED BY
                                        ABEND'S DAMAGE ASSESSMENT
                                        ROUTINE (DAR) (OS/VS1) MDC029*/
     2 CVT0FN00 PTR,             /* ADDRESS OF ENTRY POINT OF THE
                                        FINCH ROUTINE (OS/VS1)       */
     2 CVTEXIT  CHAR(2) ,   /* AN SVC 3 INSTRUCTION.  EXIT
                                        TO DISPATCHER.               */
     2 CVTBRET  CHAR(2) , /* A BCR 15,14 INSTRUCTION.
                                        RETURN TO CALLER (USED BY
                                        DATA MANAGEMENT ROUTINES)    */
     2 CVTSVDCB PTR,             /* ADDRESS OF THE DCB FOR THE
                                        SYS1.SVCLIB DATA SET         */
     2 CVTTPC   PTR,             /* ADDRESS OF THE TIMER
                                        SUPERVISOR WORK AREA         */
     2 CVTPBLDL PTR,             /* ADDRESS OF BRANCH AND LINK
                                        (BALR) ENTRY POINT OF THE
                                        BLDL ROUTINE (OS/VS1)  MDC103*/
     2 CVTSJQ   PTR,             /* ADDRESS OF THE SELECTED JOB
                                        QUEUE (OS/VS1)               */
     2 CVTCUCB  PTR,             /* ADDRESS OF THE TABLE THAT
                                        CONTAINS THE CURRENT CONSOLE
                                        UCB ADDRESSES                */
     2 CVTQTE00 PTR,             /* ADDRESS OF THE TIMER ENQUEUE
                                        ROUTINE FOR INTERVAL TIMER   */
     2 CVTQTD00 PTR,             /* ADDRESS OF THE TIMER DEQUEUE
                                        ROUTINE FOR INTERVAL TIMER   */
     2 CVTSTB   PTR,             /* ADDRESS OF THE I/O DEVICE
                                        STATISTICS TABLE             */
     2 CVTDCB    ,   /* OPERATING SYSTEM
                                        CONFIGURATION                */
       4 CVTRSV08 BIT(1),            /* RESERVED                     */
       4 CVT1SSS  BIT(1),            /* PCP                          */
       4 CVT2SPS  BIT(1),            /* MFT, OS/VS1                  */
       4 CVT4MS1  BIT(1),            /* MVT, OS/VS2                  */
       4 CVTRSV09 BIT(1),            /* RESERVED                     */
       4 CVT4MPS  BIT(1),            /* MODEL 65 MULTIPROCESSING     */
       4 CVT6DAT  BIT(1),            /* DYNAMIC ADDRESS TRANSLATION
                                        BY CPU (OS/VS1, OS/VS2)      */
       4 CVTMVS2  BIT(1),            /* MULTIPLE MEMORY OPTION OF
                                        OS/VS2 IS PRESENT      MDC131*/
 %DCL CVT8AOS2 CHAR;
 /*CVT8AOS2='''12''X'*/             /* OS/VS2 SYSTEM                */
     2 CVTDCBA  BIT(24),             /* ADDRESS OF THE DCB FOR THE
                                        SYS1.LOGREC (OUTBOARD
                                        RECORDER) DATA SET FOR SYSTEM
                                        ENVIRONMENT RECORDING (SER)  */
     2 CVTIOQET PTR,             /* ADDRESS OF IOS REQUEST ELEMENT
                                        TABLE (OS/VS1)         MDC020*/
     2 CVTIXAVL PTR,             /* ADDRESS OF THE I/O
                                        SUPERVISOR'S FREELIST POINTER
                                        WHICH CONTAINS THE ADDRESS OF
                                        THE NEXT REQUEST ELEMENT
                                        (OS/VS1)
                                        ADDRESS OF THE I/O
                                        SUPERVISOR'S COMMUNICATION
                                        AREA (IOCOM)  (OS/VS2)       */
     2 CVTNUCB  PTR,             /* LOWEST ADDRESS NOT IN THE
                                        NUCLEUS (ON PAGE BOUNDARY FOR
                                        OS/VS1)  (ON SEGMENT BOUNDARY
                                        FOR OS/VS2) (MDC318) @Z30AQ9A*/
     2 CVTFBOSV PTR,             /* ADDRESS OF PROGRAM FETCH
                                        ROUTINE                      */
     2 CVT0DS   PTR,             /* ADDRESS OF ENTRY POINT OF THE
                                        DISPATCHER                   */
     2 CVTILCH  PTR,             /* ADDRESS OF THE LOGICAL
                                        CHANNEL WORD TABLE           */
     2 CVTIERLC ,             /* ADDRESS OF THE ASYNCHRONOUS
                                        EXIT QUEUE (OS/VS1)
                                        (MDC218)               YM4043*/
      3 CVTRV516 PTR,            /* ** CVTIERLC FIELD UNUSED IN
                                        MVS **  (MDC218)       YM4043*/
     2 CVTMSER  PTR,             /* ADDRESS OF DATA AREA OF
                                        MASTER SCHEDULER RESIDENT
                                        DATA AREA                    */
     2 CVT0PT01 PTR,             /* ADDRESS OF BRANCH ENTRY POINT
                                        OF POST ROUTINE              */
     2 CVTRSV11 PTR,             /* ** CVTTRMTB FIELD UNUSED
                                        IN OS/VS **                  */
     2 CVTHEAD  PTR,             /* ADDRESS OF THE HIGHEST
                                        PRIORITY TCB IN THE READY
                                        QUEUE (OS/VS1)         MDC025*/
     2 CVTMZ00  PTR,             /* HIGHEST ADDRESS IN VIRTUAL
                                        STORAGE FOR THE MACHINE      */
     2 CVT1EF00 PTR,             /* ADDRESS OF ROUTINE WHICH
                                        CREATES IRB'S FOR EXITS      */
     2 CVTQOCR  PTR,             /* GRAPHICS INTERFACE TASK (GFX)
                                        FIELD.  ADDRESS OF SEVENTH
                                        WORD OF GFX PARAMETER LIST,
                                        IF GFX IS ACTIVE.  ZERO IF
                                        GFX IS NOT ACTIVE.           */
     2 CVTQMWR  PTR,             /* ADDRESS OF QUEUE MANAGER'S
                                        SYSTEM OUTPUT COMMUNICATIONS-
                                        DATA-AREA (CDA), WHICH IS
                                        STORED ON AN EXTERNAL DEVICE */
     2 CVTSNCTR FIXED(15),           /* SERIAL NUMBER COUNTER FOR
                                        ASSIGNING SERIAL NUMBERS TO
                                        NON-SPECIFIC, UNLABELED
                                        MAGNETIC TAPE VOLUMES        */
                                        RECONFIGURATION (DDR) OPTION
                                        PRESENT - RECOVERY MANAGEMENT
                                        SUPPORT (RMS) (OS/VS1)
                                        DDR SYSTEM-INITIATED SWAP
                                        ACTIVE (OS/VS2)        MDC126*/
      3 CVTNIP   BIT(1),             /* NIP IS EXECUTING             */
      3 CVTRSV12 BIT(1),             /* RESERVED                     */
      3 CVTRSV13 BIT(1),             /* RESERVED                     */
      3 CVTASCII BIT(1),             /* ASCII TAPE PROCESSING IS
                                        GENERATED IN THIS SYSTEM     */
      3 CVTXPFP  BIT(1),             /* CPU HAS EXTENDED PRECISION
                                        FLOATING POINT FEATURE       */
     2 CVTOPTB  ,             /* MISCELLANEOUS FLAGS          */
      3 CVTPROT  BIT(1),             /* CPU HAS STORE PROTECTION
                                        FEATURE (OS/VS1)             */
      3 CVTCTIMS BIT(1),             /* IF ON, HARDWARE HAS THE CLOCK
                                        COMPARATOR AND CPU TIMER
                                        FEATURE INSTALLED, AND OS/VS1
                                        SYSGEN HAS SPECIFIED THIS
                                        FEATURE (OS/VS1)       MDC127*/
      3 CVTTOD   BIT(1),             /* CPU HAS TIME-OF-DAY CLOCK
                                        FEATURE                      */
      3 CVTNLOG  BIT(1),             /* SYS1.LOGREC IS UNAVAILABLE
                                        FOR ERROR RECORDING.  ALWAYS
                                        SET TO ZERO FOR OS/VS1 ICB382*/
      3 CVTAPTHR BIT(1),             /* NIP SETS THIS BIT TO 1 WHEN
                                        DEVICE TESTING IS COMPLETE.
                                        IF 1, I/O SUPERVISOR USES AN
                                        ALTERNATE PATH TO A DEVICE
                                        WHEN A CONDITION CODE OF 3
                                        EXISTS.  THIS BIT IS RESET BY
                                        NIP TO 0 AFTER THE LINK PACK
                                        AREA IS INITIALIZED.   YM2670*/
      3 CVTFP    BIT(1),             /* CPU HAS FETCH PROTECTION
                                        FEATURE (OS/VS1)       ICB427*/
      3 CVTVS1A  BIT(1),             /* VS1 ASSIST IS AVAILABLE FOR
                                        USE (OS/VS1)
                                        (MDC353)             @X60CA9A*/
      3 CVTRSV17 BIT(1),             /* RESERVED                     */
     2 CVTQCDSR PTR,             /* CDE SEARCH ROUTINE ADDRESS
                                        (OS/VS2)
                                        ADDRESS OF THE ROUTINE THAT
                                        SEARCHES THE REENTERABLE LOAD
                                        MODULE QUEUE (OS/VS1)        */
     2 CVTQLPAQ PTR,             /* ADDRESS OF POINTER TO MOST
                                        RECENT ENTRY ON LINK PACK
                                        AREA CDE QUEUE (OS/VS2)
                                        ADDRESS OF THE REENTERABLE
                                        LOAD MODULE QUEUE (OS/VS1)   */
     2 CVTRSV18 PTR,             /* ** CVTMPCVT FIELD UNUSED IN
                                        OS/VS **                     */
     2 CVTSMCA  PTR,             /* ADDRESS OF THE SYSTEM
                                        MANAGEMENT CONTROL AREA
                                        (SMCA) IF THE SYSTEM
                                        MANAGEMENT FACILITIES (SMF)
                                        OPTION IS PRESENT IN THE
                                        SYSTEM.  OTHERWISE, ZERO.    */
     2 CVTABEND PTR,             /* ADDRESS OF SECONDARY CVT FOR
                                        ABEND IN EOT (OS/VS2)
                                        USED BY AN INTERNAL ABEND
                                        TRACE ROUTINE FOR DEBUG
                                        PURPOSES (OS/VS1)      XM0615*/
     2 CVTUSER  PTR,             /* A WORD AVAILABLE TO THE USER */
     2 CVTMDLDS PTR,             /* RESERVED FOR MODEL-DEPENDENT
                                        SUPPORT                      */
     2 CVTQABST CHAR(2) ,   /* AN SVC 13 (ABEND) INSTRUCTION
                                        (OS/VS2)  RESERVED (OS/VS1)  */
     2 CVTLNKSC CHAR(2) , /* AN SVC 6 (LINK) INSTRUCTION
                                                               ICB369*/
     2 CVTTSCE  PTR,             /* ADDRESS OF THE FIRST TIME
                                        SLICE CONTROL ELEMENT (TSCE) */
     2 CVTPATCH PTR,             /* ADDRESS OF A 200-BYTE FE
                                        PATCH AREA                   */
     2 CVTRMS   PTR,             /* RECOVERY MANAGEMENT SUPPORT
                                        (RMS) COMMUNICATIONS VECTOR.
                                        ADDRESS OF A MACHINE STATUS
                                        BLOCK.                       */
     2 CVTRV515 PTR,             /* ** CVTTSCVT FIELD UNUSED IN
                                        MVS **  (MDC037)     @Z40AQ9A*/
     2 CVT0SCR1 PTR,             /* ADDRESS OF THE SECTOR
                                        CALCULATION ROUTINE FOR
                                        ROTATIONAL POSITION SENSING
                                        (RPS)                        */
     2 CVTGTF   ,             /* GENERALIZED TRACE FACILITY
                                        (GTF) CONTROL WORD     ICB312*/
      3 CVTGTFST ,             /* GTF FLAG BYTE          ICB312*/
       4 CVTGTFS  ,            /* GTF STATUS (OS/VS1)    MDC088*/
 /*CVTGTFIN = '''00''B'*/           /* GTF NOT ACTIVE (OS/VS1)MDC089*/
 /*CVTGTFSR = '''01''B'*/           /* GTF STARTING (OS/VS1)  MDC091*/
 /*CVTGTFSP = '''10''B'*/           /* GTF STOPPING (OS/VS1)  MDC090*/
 /*CVTGTFAC = '''11''B'*/           /* GTF ACTIVE (OS/VS1)    MDC092*/
        5 CVTGTFAV BIT(1),           /* IF ZERO, GTF NOT ACTIVE.
                                        IF ONE, GTF ACTIVE.
                                        (OS/VS2)               MDC098*/
        5 CVTRV315 BIT(1),           /* RESERVED (OS/VS2)            */
       4 CVTSTATE ,            /* GTF IS IN CONTROL PROCESSING
                                        A HOOK (OS/VS1)        MDC093*/
        5 CVTRV316 BIT(1),           /* RESERVED (OS/VS2)            */
       4 CVTTMODE ,            /* IF 0, MODE=INT SPECIFIED.
                                        IF 1, MODE=EXT SPECIFIED
                                        WHICH MEANS TRACE DATA IS TO
                                        BE WRITTEN TO AN EXTERNAL
                                        DEVICE.  (OS/VS1)      MDC094*/
        5 CVTRV317 BIT(1),           /* RESERVED (OS/VS2)            */
       4 CVTFORM  ,            /* TRACE DATA IS TO BE FORMATTED
                                        ON ABNORMAL TERMINATION
                                        (OS/VS1)               MDC095*/
        5 CVTRV318 BIT(1),           /* RESERVED (OS/VS2)            */
       4 CVTUSR   BIT(1),            /* TRACE=USR SPECIFIED.
                                        USER-REQUESTED TRACE DATA IS
                                        TO BE INCLUDED IN THE TRACE
                                        DATA SET.  (MDC317)  @Z30AP9A*/
       4 CVTRNIO  BIT(1),            /* GTF IS ACTIVE AND TRACING
                                        RNIO EVENTS            MDC187*/
       4 CVTRSV27 BIT(1),            /* RESERVED                     */
      3 CVTGTFA  BIT(24),            /* ADDRESS OF THE MONITOR CALL
                                        VECTOR TABLE (OS/VS1)
                                        ADDRESS OF MAIN MONITOR CALL
                                        ROUTING TABLE, MCHEAD
                                        (OS/VS2)               MDC156*/
     2 CVTAQAVT ,             /* ADDRESS OF THE FIRST WORD OF
                                        THE TCAM DISPATCHER WHICH
                                        CONTAINS THE ADDRESS OF THE
                                        ADDRESS VECTOR TABLE (AVT).
                                        IF ZERO, TCAM IS NOT STARTED */
      3 CVTTCMFG ,            /* TCAM FLAGS                   */
       4 CVTTCRDY BIT(1),            /* TCAM IS READY TO ACCEPT USERS*/
       4 CVTLDEV  BIT(1),            /* LOCAL DEVICE ATTACHED TO TCAM
                                        (MDC357)             @Z40XA9A*/
       4 CVTRSV29 BIT(1),            /* RESERVED                     */
       4 CVTRSV30 BIT(1),            /* RESERVED                     */
       4 CVTRSV31 BIT(1),            /* RESERVED                     */
       4 CVTRSV32 BIT(1),            /* RESERVED                     */
       4 CVTRSV33 BIT(1),            /* RESERVED                     */
       4 CVTRSV34 BIT(1),            /* RESERVED                     */
      3 CVTAQAVB BIT(24),            /* SAME AS CVTAQAVT ABOVE       */
     2 CVTVOLM2 ,             /* ADDRESS OF TABLE FOR POWER
                                        WARNING FEATURE (PWF)
                                        (OS/VS2)  (MDC308)   @Z30AQ9A*/
      3 CVTTATA  ,            /* ADDRESS OF THE FIRST ENTRY IN
                                        THE TCB ADDRESS TABLE.  THE
                                        FIRST ENTRY IS FOR PARTITION
                                        0.  (OS/VS1)                 */
       4 CVTTSKS  ,            /* MAXIMUM ALLOWABLE NUMBER OF
                                        ENTRIES IN THE TCB ADDRESS
                                        TABLE  (OS/VS1)              */
        5 CVTVOLF2 ,           /* PWF FLAG BYTE.  THIS BYTE IS
                                        OVERLAID BY CVTVOLM2 AFTER
                                        PWF INITIALIZATION.
                                        (OS/VS2)  (MDC309)   @Z30AQ9A*/
         6 CVTVOLI2 BIT(1),          /* PWF INITIALIZATION HAS NOT
                                        OCCURRED (OS/VS2)
                                        (MDC310)             @Z30AQ9A*/
       4 CVTTAT   ,           /* SAME AS CVTTATA ABOVE        */
        5 CVTVOLT2 BIT(24),          /* PWF RECHECK TIME DELAY.
                                        THIS VALUE IS OVERLAID BY
                                        CVTVOLM2 AFTER PWF
                                        INITIALIZATION.  (OS/VS2)
                                        (MDC311)             @Z30AQ9A*/
     2 CVTATER  ,             /* ADDRESS OF THE SYSTEM ERROR
                                        TCB.  THE PURGE ROUTINE USES
                                        THIS FIELD TO ACCESS THE
                                        SIRB.  (OS/VS1)        ICB346*/
      3 CVTSYST  BIT(8),             /* NUMBER OF ENTRIES IN THE TCB
                                        ADDRESS TABLE FOR TCB'S
                                        CREATED DURING SYSTEM
                                        GENERATION  (OS/VS1)         */
      3 CVTATERA BIT(24),            /* SAME AS CVTATER ABOVE        */
     2 CVTEXT1  PTR,             /* ADDRESS OF OS - OS/VS COMMON
                                        EXTENSION              ICB421*/
     2 CVTCBSP  PTR,             /* ADDRESS OF ACCESS METHOD
                                        CONTROL BLOCK STRUCTURE
                                                               MDC195*/
     2 CVTPURG  ,             /* ADDRESS OF SUBSYSTEM PURGE
                                        ROUTINE                ICB330*/
      3 CVTRSV35 BIT(8),             /* RESERVED               ICB330*/
      3 CVTPURGA BIT(24),            /* ADDRESS OF SUBSYSTEM PURGE
                                        ROUTINE                ICB330*/
     2 CVTAMFF  CHAR(4),             /* RESERVED FOR ACCESS METHOD
                                        FLAGS                  ICB436*/
     2 CVTQMSG  ,             /* ADDRESS OF INFORMATION TO BE
                                        PRINTED BY ABEND       ICB307*/
      3 CVTRSV36 BIT(8),             /* RESERVED               ICB307*/
      3 CVTQMSGA BIT(24),            /* ADDRESS OF INFORMATION TO BE
                                        PRINTED BY ABEND       ICB307*/
     2 CVTDMSR  ,             /* SAME AS CVTDMSRA BELOW ICB346*/
      3 CVTRSV37 ,             /* RESERVED (OS/VS1)      ICB346*/
       4 CVTDMSRF ,            /* OPEN/CLOSE/EOV FLAG BYTE.
                                        SETTING BOTH BIT 0 AND BIT 1
                                        ON WILL CAUSE BOTH KINDS OF
                                        DUMPS TO BE TAKEN.  THESE
                                        BITS ARE USED DURING TESTING
                                        AND DEBUGGING WHEN OTHER
                                        DEBUG METHODS ARE INEFFECTIVE.
                                        (OS/VS2)  (MDC350)   @Z40AQ9A*/
        5 CVTSDUMP BIT(1),           /* SET BY COREZAP.  WILL CAUSE
                                        AN SDUMP TO BE TAKEN AND
                                        IEC999I MESSAGE ISSUED FOR
                                        EVERY ABEND ISSUED WITHIN AN
                                        OPEN/CLOSE/EOV OR DADSM
                                        FUNCTION.  (OS/VS2)
                                        (MDC351)             @Z40AQ9A*/
        5 CVTUDUMP BIT(1),           /* SET BY COREZAP.  WILL CAUSE
                                        AN ABEND DUMP TO BE TAKEN FOR
                                        EVERY ABEND ISSUED WITHIN AN
                                        OPEN/CLOSE/EOV OR DADSM
                                        FUNCTION.  (OS/VS2)
                                        (MDC352)             @Z40AQ9A*/
        5 CVTRV629 BIT(1),           /* RESERVED  (OS/VS2)   @Z40AQ9A*/
        5 CVTRV630 BIT(1),           /* RESERVED  (OS/VS2)   @Z40AQ9A*/
        5 CVTRV631 BIT(1),           /* RESERVED  (OS/VS2)   @Z40AQ9A*/
        5 CVTRV632 BIT(1),           /* RESERVED  (OS/VS2)   @Z40AQ9A*/
        5 CVTRV633 BIT(1),           /* RESERVED  (OS/VS2)   @Z40AQ9A*/
        5 CVTRV634 BIT(1),           /* RESERVED  (OS/VS2)   @Z40AQ9A*/
      3 CVTDMSRA BIT(24),            /* ADDRESS OF THE OPEN/CLOSE/EOV
                                        SUPERVISORY ROUTINE IN THE
                                        NUCLEUS.  THIS ROUTINE
                                        HANDLES THE ROUTING OF
                                        CONTROL AMONG THE I/O SUPPORT
                                        ROUTINES.              ICB346*/
     2 CVTRSV38 PTR,             /* RESERVED                     */
     2 CVTRSV39 PTR,             /* RESERVED                     */

  /*           OS/VS1 - OS/VS2 COMMON SECTION                        */

     2 CVTREAL  PTR,             /* ADDRESS OF THE VIRTUAL
                                        STORAGE BYTE FOLLOWING THE
                                        HIGHEST VIRTUAL=REAL STORAGE
                                        ADDRESS                ICB368*/
     2 CVTPTRV  PTR,             /* ADDRESS OF PAGING SUPERVISOR
                                        GENERAL ROUTINE TO TRANSLATE
                                        REAL ADDRESSES TO VIRTUAL
                                        ADDRESSES                    */
     2 CVTMODE  PTR,             /* ADDRESS OF ROUTINE TO CHANGE
                                        SYSTEM MASK (OS/VS1)
                                        (MDC217)               YM4244*/
     2 CVTJESCT PTR,             /* ADDRESS OF JOB ENTRY
                                        SUBSYSTEM (JES) CONTROL TABLE*/
     2 CVTJEPS  PTR,             /* ADDRESS OF JOB ENTRY
                                        PERIPHERAL SERVICES (JEPS)
                                        MONITOR TCB (OS/VS1)   YM2702*/
     2 CVTTZ    FIXED(31),           /* DIFFERENCE BETWEEN LOCAL TIME
                                        AND GREENWICH MEAN TIME IN
                                        BINARY UNITS OF 1.048576
                                        SECONDS                      */
     2 CVTMCHPR PTR,             /* ADDRESS OF MACHINE CHECK
                                        PARAMETER LIST               */
     2 CVTEORM  PTR,             /* HIGHEST REAL ADDRESS IN MAIN
                                        STORAGE (OS/VS1)  POTENTIAL
                                        REAL HIGH STORAGE ADDRESS
                                        (OS/VS2)               MDC087*/
     2 CVTERPV  ,             /* ADDRESS OF I/O SUPERVISOR
                                        SUBROUTINE TO CONVERT CCW
                                        DATA ADDRESSES TO VIRTUAL
                                        ADDRESSES (OS/VS1)
                                        (MDC219)               YM4043*/
      3 CVTRV517 PTR,            /* ** CVTERPV FIELD UNUSED IN
                                        MVS **  (MDC219)       YM4043*/
     2 CVTINTLA ,             /* ADDRESS OF A TIME INTERVAL.
                                        I/O LOAD BALANCING COUNTS THE
                                        NUMBER OF EXCP'S ISSUED
                                        DURING THIS TIME INTERVAL AND
                                        USES THE VALUE IN DETERMINING
                                        THE AMOUNT OF I/O ACTIVITY IN
                                        THE SYSTEM.  (OS/VS1)
                                        (MDC220)               YM4043*/
      3 CVTRV518 PTR,            /* ** CVTINTLA FIELD UNUSED IN
                                        MVS **  (MDC220)       YM4043*/
     2 CVTAPF   ,             /* SAME AS CVTAPFA BELOW  ICB360*/
      3 CVTRSV40 BIT(8),             /* RESERVED               ICB360*/
      3 CVTAPFA  BIT(24),            /* ADDRESS OF BRANCH ENTRY POINT
                                        IN AUTHORIZED PROGRAM FACILITY
                                        (APF) ROUTINE                */
     2 CVTEXT2  PTR,          /* ADDRESS OF OS/VS1 - OS/VS2
                                        COMMON EXTENSION       ICB330*/
     2 CVTHJES  PTR,          /* SAME AS CVTHJESA BELOW ICB454*/
 /*   3 CVTRSV42 BIT(8),             /* RESERVED               ICB454*/
 /*   3 CVTHJESA BIT(24),            /* ADDRESS OF OPTIONAL JOB ENTRY
                                        SUBSYSTEM (JES) COMMUNICATION
                                        VECTOR TABLE           ICB454*/
     2 CVTRSV43 FIXED(15),           /* RESERVED                     */
     2 CVTRSV44 FIXED(15),           /* RESERVED                     */
     2 CVTRSV45 PTR,             /* RESERVED                     */
     2 CVTRSV46 PTR,             /* RESERVED                     */

  %GOTO CVTP2;
  /*           OS/VS1 OVERLAY                                        */

     2 CVTPGSIA PTR,             /* ADDRESS OF PAGING SUPERVISOR
                                        INFORMATION AREA             */
     2 CVTPCVT  PTR,             /* ADDRESS OF PAGED CVT
                                        EXTENSION                    */
     2 CVTA1F1  ,             /* PAGE FAULT FLAGS             */
      3 CVTPFSW  BIT(1),             /* ONLY THE PAGING TASK MAY BE
                                        DISPATCHED                   */
      3 CVTSRSW  BIT(1),             /* NO TASK EXCEPT THE PAGING TASK
                                        MAY EXECUTE DISABLED CODE    */
      3 CVTRSV47 BIT(1),             /* RESERVED                     */
      3 CVTRSV48 BIT(1),             /* RESERVED                     */
      3 CVTRSV49 BIT(1),             /* RESERVED                     */
      3 CVTRSV50 BIT(1),             /* RESERVED                     */
      3 CVTRSV51 BIT(1),             /* RESERVED                     */
      3 CVTRSV52 BIT(1),             /* RESERVED                     */
     2 CVTSYSK  ,             /* SYSTEM LOCK.  IF NOT ZERO,
                                        ONLY THE PAGING TASK MAY BE
                                        DISPATCHED                   */
      3 CVTRSV53 BIT(1),             /* RESERVED                     */
      3 CVTRSV54 BIT(1),             /* RESERVED                     */
      3 CVTRSV55 BIT(1),             /* RESERVED                     */
      3 CVTRSV56 BIT(1),             /* RESERVED                     */
      3 CVTSLKR  BIT(1),             /* MACHINE CHECK HANDLING IS IN
                                        PROGRESS               ICB320*/
      3 CVTSLKQ  BIT(1),             /* SYSTEM QUEUE AREA (SQA) HAS
                                        BEEN EXHAUSTED               */
      3 CVTSLKP  BIT(1),             /* LAST PAGING CONTROL BLOCK
                                        (PCB) HAS BEEN USED          */
      3 CVTSLKO  BIT(1),             /* A ROUTINE RUNNING DISABLED
                                        HAS PRODUCED A PAGE FAULT    */
     2 CVTSULK  FIXED(15),           /* SUPERVISOR LOCK.  NUMBER OF
                                        TASKS ATTEMPTING TO EXECUTE
                                        DISABLED ROUTINES.  IF NOT
                                        ZERO, ONLY ENABLED TASKS MAY
                                        RUN.                         */
     2 CVTSMF   PTR,             /* ADDRESS OF SYSTEM MANAGEMENT
                                        FACILITIES (SMF) TCB   ICB395*/
     2 CVTPNWFR PTR,             /* ADDRESS OF ROUTINE WHICH
                                        FREES THE 'EMERGENCY' WORK
                                        AREA (ICB413)          XM2452*/
     2 CVTDDCE  PTR,             /* ADDRESS OF DYNAMIC DISPATCHING
                                        CONTROL ELEMENT        ICB466*/
     2 CVTRSV57 FIXED(15),           /* RESERVED                     */
     2 CVTRSV58 FIXED(15),           /* RESERVED                     */
     2 CVTSTOA  FIXED(31),           /* SAVE AREA FOR THE REAL
                                        STORAGE ADDRESS OF THE
                                        SEGMENT TABLE ORIGIN   ICB496*/
     2 CVTVOLM1 ,             /* ADDRESS OF TABLE FOR POWER
                                        WARNING FEATURE (PWF)
                                        (MDC312)             @X04AQ9A*/
      3 CVTVOLF1 ,             /* PWF FLAG BYTE.  THIS BYTE IS
                                        OVERLAID BY CVTVOLM1 AFTER
                                        PWF INITIALIZATION.
                                        (MDC313)             @X04AQ9A*/
       4 CVTVOLI1 BIT(1),            /* PWF INITIALIZATION HAS NOT
                                        OCCURRED  (MDC314)   @X04AQ9A*/
      3 CVTVOLT1 BIT(24),            /* PWF RECHECK TIME DELAY.
                                        THIS VALUE IS OVERLAID BY
                                        CVTVOLM1 AFTER PWF
                                        INITIALIZATION.
                                        (MDC315)             @X04AQ9A*/
     2 CVTRSV61 PTR,             /* RESERVED                     */
     2 CVTRV490 PTR,             /* RESERVED  (MDC359)   @X60CV9A*/
     2 CVTAUTH  PTR,             /* POINTER TO AUTHORIZED LIBRARY
                                        TABLE                  MDC188*/
     2 CVTACTAP PTR,             /* ADDRESS OF BRANCH ENTRY TO
                                        VTAM'S SVC ROUTINE ISTAPC42
                                        (MDC216)             @X31BH9A*/
     2 CVTRV485 PTR,             /* RESERVED               MDC106*/
     2 CVTRV486 PTR,             /* RESERVED               MDC106*/
     2 CVTRV487 PTR,             /* RESERVED               MDC106*/
     2 CVTRV488 PTR;             /* RESERVED               MDC106*/

  /*           OS/VS2 OVERLAY                                        */

  DECLARE
 %IF IKEPLS='2'  %THEN
     %GOTO CVTP1;
    1 CVTS01   BASED(ADDR(CVTPGSIA)) ,
 %GOTO CVTP2;
 %CVTP1 : ;
    1 CVTS01   DEF(CVTPGSIA) ,
 %CVTP2:;
     2 CVTGETL  PTR,             /* ADDRESS OF IKJGETL, TSO GET
                                        LINE ROUTINE (MDC206)  YM2225*/
     2 CVTLPDSR PTR,             /* ADDRESS OF LINK PACK AREA
                                        (LPA) DIRECTORY SEARCH
                                        ROUTINE                      */
     2 CVTPVTP  PTR,             /* ADDRESS OF PAGE VECTOR TABLE */
  /* 2 CVTLPDIA ,             /* ADDRESS OF LINK PACK AREA
  /*                                    (LPA) DIRECTORY (ON PAGE
  /*                                    BOUNDARY)                    */
  /*  3 CVTDIRST ,            /* FLAG BYTE                    */
  /*   4 CVTDICOM BIT(1),            /* LPA DIRECTORY HAS BEEN
  /*                                    INITIALIZED BY NIP           */
  /*   4 CVTRSV63 BIT(1),            /* RESERVED                     */
  /*   4 CVTRSV64 BIT(1),            /* RESERVED                     */
  /*   4 CVTRSV65 BIT(1),            /* RESERVED                     */
  /*   4 CVTRSV66 BIT(1),            /* RESERVED                     */
  /*   4 CVTRSV67 BIT(1),            /* RESERVED                     */
  /*   4 CVTRSV68 BIT(1),            /* RESERVED                     */
  /*   4 CVTRSV69 BIT(1),            /* RESERVED                     */
  /*  3 CVTLPDIR BIT(24),            /* ADDRESS OF LPA DIRECTORY.
                                        ON PAGE BOUNDARY             */
    2 CVTLPDIR PTR,
     2 CVTRV320 PTR,             /* ** CVTPAGE1 FIELD UNUSED IN
                                        MVS **  (MDC112)     @Z40AQ9A*/
     2 CVTRV321 PTR,             /* ** CVTPGSUP FIELD UNUSED IN
                                        MVS **  (MDC113)     @Z40AQ9A*/
     2 CVTSLIDA  ,   /* IDENTITY OF TCB CAUSING
                                        SUPERVISOR LOCK BYTE (CVTSYLK)
                                        TO BE SET OR IDENTITY OF TCB
      3 CVTSLID  CHAR(3),            /* SAME AS CVTSLIDA ABOVE       */
     2 CVTRV322 PTR,             /* RESERVED FOR FUTURE USE
                                        (MDC343)             @Z40AQ9A*/
     2 CVTRV328 PTR,             /* ** CVTSEG AND CVTSEGA FIELDS
                                        UNUSED IN MVS **
                                        (MDC139)             @Z40AQ9A*/
     2 CVTRV329 PTR,             /* ** CVTSEGB FIELD UNUSED IN
                                        MVS **  (MDC141)     @Z40AQ9A*/
     2 CVTRV330 PTR,             /* ** CVTSEGC AND SUBFIELDS
                                        UNUSED IN MVS **
                                        (MDC142)             @Z40AQ9A*/
     2 CVTRV331 PTR,             /* ** CVTSEGD AND SUBFIELDS
                                        UNUSED IN MVS **
                                        (MDC145)             @Z40AQ9A*/
     2 CVTRSV77 BIT(8),              /* RESERVED                     */
     2 CVTSPVLK BIT(8),              /* NUMBER OF TASKS WHICH HAVE
                                        TERMINATED WHILE OWNING
                                        SUPERVISOR LOCK WITHOUT
                                        OPERATOR HAVING YET BEEN
                                        NOTIFIED                     */
     2 CVTCTLFG ,             /* SYSTEM CONTROL FLAGS         */
      3 CVTRV323 BIT(1),             /* ** CVTPSIC BIT UNUSED IN
                                        MVS **  (MDC118)     @Z40AQ9A*/
      3 CVTRV333 BIT(1),             /* ** CVTAPGB BIT UNUSED IN
                                        MVS **  (MDC151)     @Z40AQ9A*/
      3 CVTRSV78 BIT(1),             /* RESERVED               ICB382*/
      3 CVTDSTAT BIT(1),             /* DEVSTAT OPTION IN EFFECT.
                                        DEVICE ADDRESS FOR 2319,
                                        3330, 2314, 3330-1, 3340 CAN
                                        VARY ACROSS SYSTEMS    MDC189*/
      3 CVTRSV79 BIT(1),             /* RESERVED                     */
      3 CVTNOMP  BIT(1),             /* MULTIPROCESSING CODE IS NOT
                                        IN THE SYSTEM          MDC176*/
      3 CVTGTRCE BIT(1),             /* GENERALIZED TRACE FACILITY
                                        (GTF) HAS SUPPRESSED
                                        SUPERVISOR TRACE       ICB446*/
      3 CVTSDTRC BIT(1),             /* SVC DUMP HAS SUPPRESSED
                                        SUPERVISOR TRACE       ICB446*/
     2 CVTAPG   CHAR(1),             /* DISPATCHING PRIORITY OF
                                        AUTOMATIC PRIORITY GROUP
                                        (APG)                  ICB339*/
     2 CVTTRACE CHAR(2) ,   /* BRANCH ON REGISTER
                                        INSTRUCTION.  SET BY NIP.
                                        REGISTER TEN FOR TRACE.
                                        REGISTER ELEVEN FOR NO TRACE.*/
     2 CVTTRAC2 CHAR(2) , /* BRANCH ON REGISTER 11
                                        INSTRUCTION.  THIS ALLOWS FOR
                                        SUPPRESSING TRACE DYNAMICALLY
                                        BY SETTING CONDITION CODE
                                        MASK TO ZERO IN FIRST
                                        INSTRUCTION  (CVTTRACE)      */
     2 CVTRSCN  PTR,             /* ADDRESS OF ROUTINE TO SCAN
                                        TCB TREE                     */
     2 CVTTAS   PTR,             /* ADDRESS OF ROUTINE TO
                                        TRANSFER ADDRESS SPACE       */
     2 CVTRV332 PTR,             /* ** CVTPVALD FIELD UNUSED IN
                                        MVS **  (MDC148)     @Z40AQ9A*/
     2 CVTSHRVM PTR,             /* LOWEST ADDRESS OF SHARED
                                        VIRTUAL STORAGE AREA.  THIS
                                        ADDRESS WILL BE THE
                                        BEGINNING OF THE COMMON
                                        SERVICE AREA (CSA)
                                        (MDC324)             @Z30AQ9A*/
     2 CVT0VL01 PTR,             /* ENTRY POINT ADDRESS OF
                                        VALIDITY CHECK ROUTINE
                                        (IEA0VL01) USED TO COMPARE
                                        PROTECT KEY OF AN ADDRESS
                                        WITH TCB PROTECT KEY.        */
     2 CVTRV324 PTR,             /* ** CVTPFIXQ FIELD UNUSED IN
                                        MVS **  (MDC119)     @Z40AQ9A*/
     2 CVTRV325 PTR,             /* ** CVTPFIXR FIELD UNUSED IN
                                        MVS **  (MDC120)     @Z40AQ9A*/
     2 CVTRV326 PTR,             /* ** CVTPFIXP FIELD UNUSED IN
                                        MVS **  (MDC121)     @Z40AQ9A*/
     2 CVTASCRF PTR,             /* CREATED ASCB QUEUE HEADER
                                        (MDC337)             @ZA04120*/
     2 CVTASCRL PTR,             /* CREATED ASCB QUEUE TRAILER
                                        (MDC338)             @ZA04120*/
     2 CVTPUTL  PTR,             /* ADDRESS OF IKJPUTL, TSO PUT
                                        LINE ROUTINE (MDC207)  YM2225*/
     2 CVTSRBRT PTR,             /* DISPATCHER RETURN ADDRESS FOR
                                        SRB ROUTINES           MDC130*/
     2 CVTOLT0A PTR,             /* BRANCH ENTRY TO OLTEP MEMORY
                                        TERMINATION RESOURCE MANAGER
                                                               MDC129*/
     2 CVTSMFEX PTR,             /* BRANCH ENTRY TO SYSTEM
                                        MANAGEMENT FACILITIES (SMF)
                                        EXCP COUNTING ROUTINE FOR
                                        VAM WINDOW INTERCEPT   MDC133*/
     2 CVTCSPIE PTR,             /* FOR CHECKPOINT/RESTART, BRANCH
                                        ENTRY TO SPIE          MDC149*/
     2 CVTPTGT  PTR,             /* ADDRESS OF IKJPTGT, TSO
                                        PUTGET ROUTINE  (MDC208)
                                                               YM2225*/
     2 CVTIOSPL BIT(8),              /* PRIORITY LEVEL OF I/O
                                        SUPERVISOR CHANNEL SCHEDULER
                                                               MDC019*/
     2 CVTRV513 CHAR(1),             /* RESERVED               MDC165*/
     2 CVTDSSAC CHAR(1),             /* DYNAMIC SUPPORT SYSTEM (DSS)
                                        ACTIVATED FLAG - USED BY
                                        RESTART FLIH.  IF X'00', DSS
                                        NOT INITIALIZED.  IF X'FF',
                                        DSS HAS BEEN INITIALIZED.
                                                               MDC163*/
     2 CVTRV139 BIT(8),              /* RESERVED                     */
     2 CVTSTCK  PTR,             /* ADDRESS OF IKJSTCK, TSO STACK
                                        ROUTINE  (MDC209)      YM2225*/
     2 CVTMAXMP FIXED(15),             /* FOR MEASUREMENT FACILITY
                                        (MF/1), MAXIMUM PHYSICAL
                                        CPU ADDRESS SUPPORTED BY
                                        THIS RELEASE           MDC165*/
     2 CVTRV144 FIXED(15),           /* RESERVED                     */
     2 CVTSCAN  PTR,             /* ADDRESS OF IKJSCAN, TSO SCAN
                                        ROUTINE  (MDC210)      YM2225*/
     2 CVTAUTHL PTR,             /* POINTER TO AUTHORIZED
                                        LIBRARY TABLE          MDC001*/
     2 CVTBLDCP PTR,             /* BRANCH ENTRY TO BUILD POOL
                                                               MDC003*/
     2 CVTGETCL PTR,             /* BRANCH ENTRY TO GET CELL
                                                               MDC004*/
     2 CVTFRECL PTR,             /* BRANCH ENTRY TO FREE CELL
                                                               MDC005*/
     2 CVTDELCP PTR,             /* BRANCH ENTRY TO DELETE POOL
                                                               MDC006*/
     2 CVTCRMN  PTR,             /* BRANCH ENTRY TO SVC 120
                                        (GETMAIN/FREEMAIN:CRBRANCH)
                                                               MDC007*/
     2 CVTCRAS  PTR,             /* BRANCH ENTRY TO 'CREATE
                                        ADDRESS SPACE'         MDC008*/
     2 CVTQSAS  PTR,             /* BRANCH ENTRY TO TASK
                                        TERMINATION            MDC009*/
     2 CVTFRAS  PTR,             /* BRANCH ENTRY TO FREE
                                        ADDRESS SPACE          MDC010*/
     2 CVTS1EE  PTR,             /* BRANCH ENTRY TO STAGE 1 EXIT
                                        EFFECTOR               MDC011*/
     2 CVTPARS  PTR,             /* ADDRESS OF IKJPARS, TSO PARSE
                                        ROUTINE  (MDC211)      YM2225*/
     2 CVTQUIS  PTR,             /* BRANCH ENTRY TO QUIESCE
                                                               MDC013*/
     2 CVTSTXU  PTR,             /* BRANCH ENTRY TO ATTENTION
                                        EXIT EPILOGUE          MDC014*/
     2 CVTOPTE  PTR,             /* BRANCH ENTRY ADDRESS TO
                                        SYSEVENT               MDC015*/
     2 CVTSDRM  PTR,             /* BRNACH ENTRY ADDRESS OF THE
                                        RESOURCE MANAGER ROUTINE FOR
                                        SVC DUMP.  THIS ROUTINE CAN
                                        BE INVOKED BY MEMORY
                                        TERMINATION            MDC077*/
     2 CVTIOSCS PTR,             /* ENTRY POINT OF I/O SUPERVISOR
                                        CHANNEL SCHEDULER      MDC018*/
     2 CVTAQTOP PTR,             /* POINTER TO AREA CONTAINING
                                        QUIESCE DESCRIPTOR BLOCK
                                        (QDB'S) FOR DEVICE ALLOCATION
                                                               MDC021*/
     2 CVTVVMDI PTR,             /* CONSTANT USED BY PAGED LINK
                                        PACK AREA (LPA) DIRECTORY
                                        SEARCH ALGORITHM       MDC022*/
     2 CVTASVT  PTR,             /* POINTER TO ADDRESS SPACE
                                        VECTOR TABLE (ASVT)    MDC070*/
     2 CVTGDA   PTR,             /* POINTER TO GLOBAL DATA AREA
                                        (GDA) IN SQA           MDC024*/
     2 CVTASCBH PTR,             /* POINTER TO HIGHEST PRIORITY
                                        ADDRESS SPACE CONTROL BLOCK
                                        (ASCB) ON THE ASCB
                                        DISPATCHING QUEUE (HEAD OF
                                        ASCB QUEUE)           MDC027*/
     2 CVTASCBL PTR,             /* POINTER TO LOWEST PRIORITY
                                        ASCB ON ASCB DISPATCHING QUEUE
                                                               MDC028*/
     2 CVTRTMCT PTR,             /* POINTER TO RECOVERY/TERMINATION
                                        CONTROL TABLE          MDC031*/
     2 CVTSV60  PTR,             /* ADDRESS OF SVC 60 BRANCH ENTRY
                                        POINT  (MDC354)      @Z40FP9A*/
     2 CVTSDMP  PTR,             /* ADDRESS OF SVC DUMP BRANCH
                                        ENTRY POINT            MDC033*/
     2 CVTSCBP  PTR,             /* ADDRESS OF SCB PURGE RESOURCE
                                        MANAGER                MDC034*/
     2 CVTSDBF  PTR,             /* ADDRESS OF 4K SQA BUFFER USED
                                        BY SVC DUMP.  HIGH ORDER BIT
                                        OF THIS CVT WORD IS USED AS
                                        LOCK TO INDICATE BUFFER IS IN
                                        USE                    MDC035*/
     2 CVTRTMS  PTR,             /* ADDRESS OF SERVICABILITY
                                        LEVEL INDICATOR PROCESSING
                                        (SLIP) HEADER
                                        (MDC358)             @G17SP9A*/
     2 CVTTPIOS PTR,             /* ADDRESS OF THE TELEPROCESSING
                                        I/O SUPERV1SOR ROUTINE
                                        (TPIOS)                MDC078*/
     2 CVTSIC   PTR,             /* BRANCH ENTRY ADDRESS OF THE
                                        ROUTINE TO SCHEDULE SYSTEM
                                        INITIALIZED CANCEL     MDC042*/
     2 CVTOPCTP PTR,             /* ADDRESS OF SYSTEM RESOURCES
                                        MANAGER (SRM) CONTROL TABLE
                                                               MDC043*/
     2 CVTEXPRO PTR,             /* ADDRESS OF EXIT PROLOGUE/TYPE
                                        1 EXIT                 MDC044*/
     2 CVTGSMQ  PTR,             /* ADDRESS OF GLOBAL SERVICE
                                        MANAGER QUEUE          MDC045*/
     2 CVTLSMQ  PTR,             /* ADDRESS OF LOCAL SERVICE
                                        MANAGER QUEUE          MDC046*/
     2 CVTGSPL  PTR,             /* ADDRESS OF GLOBAL SYSTEM
                                        PRIORITY LIST QUEUE    MDC047*/
     2 CVTVWAIT PTR,             /* ADDRESS OF WAIT ROUTINE
                                                               MDC048*/
     2 CVTPARRL PTR,             /* ADDRESS OF PARTIALLY LOADED
                                        DELETE QUEUE           MDC049*/
     2 CVTAPFT  PTR,             /* ADDRESS OF AUTHORIZED PROGRAM
                                        FACILITY (APF) TABLE.
                                        INITIALIZED BY NIP.    MDC050*/
     2 CVTQCS01 PTR,             /* BRANCH ENTRY ADDRESS TO
                                        PROGRAM MANAGER USED BY
                                        ATTACH                 MDC051*/
     2 CVTFQCB  PTR,             /* POINTER TO FIRST MAJOR QCB
                                        FOR ENQ                MDC052*/
     2 CVTLQCB  PTR,             /* POINTER TO LAST MAJOR QCB
                                        FOR ENQ                MDC053*/
     2 CVTRENQ  PTR,             /* RESOURCE MANAGER ADDRESS
                                        FOR ENQ                MDC054*/
     2 CVTRSPIE PTR,             /* RESOURCE MANAGER FOR SPIE
                                                               MDC055*/
     2 CVTLKRMA PTR,             /* RESOURCE MANAGER ADDRESS FOR
                                        LOCK MANAGER           MDC056*/
     2 CVTCSD   PTR,             /* VIRTUAL ADDRESS OF COMMON
                                        SYSTEM DATA AREA (CSD).
                                        INITIALIZED BY NIP.    MDC057*/
     2 CVTDQIQE PTR,             /* RESOURCE MANAGER FOR EXIT
                                        EFFECTORS              MDC058*/
     2 CVTRPOST PTR,             /* RESOURCE MANAGER FOR POST
                                                               MDC059*/
     2 CVT062R1 PTR,             /* BRANCH ENTRY TO DETACH MDC060*/
     2 CVTVEAC0 PTR,             /* ASCBCHAP BRANCH ENTRY  MDC061*/
     2 CVTGLMN  PTR,             /* GLOBAL BRANCH ENTRY ADDRESS
                                        FOR GETMAIN/FREEMAIN   MDC062*/
     2 CVTSPSA  PTR,             /* POINTER TO GLOBAL WORK/SAVE
                                        AREA VECTOR TABLE (WSAG)
                                                               MDC071*/
     2 CVTWSAL  PTR,             /* ADDRESS OF TABLE OF LENGTHS
                                        OF LOCAL WORK/SAVE AREAS
                                                               MDC072*/
     2 CVTRV149 PTR,             /* RESERVED  (MDC073)     YM4043*/
     2 CVTWSAC  PTR,             /* ADDRESS OF TABLE OF LENGTHS
                                        OF CPU WORK/SAVE AREAS MDC074*/
     2 CVTRECRQ PTR,             /* ADDRESS OF THE RECORDING
                                        REQUEST FACILITY  (PART OF
                                        RTM1 - CALLED BY RTM2 AND
                                        RMS)                   MDC075*/
     2 CVTASMVT PTR,             /* POINTER TO AUXILIARY STORAGE
                                        MANAGEMENT VECTOR TABLE
                                        (AMVT)                 MDC076*/
     2 CVTIOBP  PTR,             /* ADDRESS OF THE BLOCK PROCESSOR
                                        CVT                    MDC079*/
     2 CVTSPOST PTR,             /* POST RESOURCE MANAGER
                                        TERMINATION ROUTINE (RMTR)
                                        ENTRY POINT            MDC085*/
     2 CVTRSTWD FIXED(31),           /* RESTART RESOURCE MANAGEMENT
                                        WORD - CONTAINS IDENTIFIER OF
                                        USER IF RESTART IS IN USE.
                                        OTHERWISE, ZERO.       MDC161*/
     2 CVTFETCH PTR,             /* ADDRESS OF ENTRY POINT FOR
                                        BASIC FETCH            MDC196*/
     2 CVT044R2 PTR,             /* ADDRESS OF IGC044R2 IN CHAP
                                        SERVICE ROUTINE        MDC197*/
     2 CVTPERFM PTR,             /* ADDRESS OF THE PERFORMANCE
                                        WORK AREA.  SET BY IGX00018.
                                                               MDC205*/
     2 CVTDAIR  PTR,             /* ADDRESS OF IKJDAIR, TSO
                                        DYNAMIC ALLOCATION INTERFACE
                                        ROUTINE  (MDC212)      YM2225*/
     2 CVTEHDEF PTR,             /* ADDRESS OF IKJEHDEF, TSO
                                        DEFAULT SERVICE ROUTINE
                                        (MDC213)               YM2225*/
     2 CVTEHCIR PTR,             /* ADDRESS OF IKJEHCIR, TSO
                                        CATALOG INFORMATION ROUTINE
                                        (MDC214)               YM2225*/
     2 CVTSSAP  PTR,             /* ADDRESS OF SYSTEM SAVE AREA
                                                               MDC063*/
     2 CVTAIDVT PTR,             /* POINTER TO APPENDAGE ID
                                        VECTOR TABLE           MDC064*/
     2 CVTIPCDS PTR,             /* BRANCH ENTRY FOR DIRECT
                                        SIGNAL SERVICE ROUTINE MDC065*/
     2 CVTIPCRI PTR,             /* BRANCH ENTRY FOR REMOTE
                                        IMMEDIATE SIGNAL SERVICE
                                        ROUTINE                MDC066*/
     2 CVTIPCRP PTR,             /* BRANCH ENTRY FOR REMOTE
                                        PENDABLE SIGNAL SERVICE
                                        ROUTINE                MDC067*/
     2 CVTPCCAT PTR,             /* POINTER TO PHYSICAL CCA VECTOR
                                        TABLE                  MDC068*/
     2 CVTLCCAT PTR,             /* POINTER TO LOGICAL CCA VECTOR
                                        TABLE                  MDC069*/
     2 CVTRV210 ,              /* RESERVED                     */
      3 CVTRV211 BIT(1),             /* RESERVED                     */
      3 CVTRV212 BIT(1),             /* RESERVED                     */
      3 CVTRV213 BIT(1),             /* RESERVED                     */
      3 CVTRV214 BIT(1),             /* RESERVED                     */
      3 CVTRV215 BIT(1),             /* RESERVED                     */
      3 CVTRV216 BIT(1),             /* RESERVED                     */
      3 CVTRV217 BIT(1),             /* RESERVED                     */
      3 CVTRV218 BIT(1),             /* RESERVED                     */
     2 CVTRV219 ,              /* RESERVED                     */
      3 CVTRV220 BIT(1),             /* RESERVED                     */
      3 CVTRV221 BIT(1),             /* RESERVED                     */
      3 CVTRV222 BIT(1),             /* RESERVED                     */
      3 CVTRV223 BIT(1),             /* RESERVED                     */
      3 CVTRV224 BIT(1),             /* RESERVED                     */
      3 CVTRV225 BIT(1),             /* RESERVED                     */
      3 CVTRV226 BIT(1),             /* RESERVED                     */
      3 CVTRV227 BIT(1),             /* RESERVED                     */
     2 CVTRV228 ,              /* RESERVED                     */
      3 CVTRV229 BIT(1),             /* RESERVED                     */
      3 CVTRV230 BIT(1),             /* RESERVED                     */
      3 CVTRV231 BIT(1),             /* RESERVED                     */
      3 CVTRV232 BIT(1),             /* RESERVED                     */
      3 CVTRV233 BIT(1),             /* RESERVED                     */
      3 CVTRV234 BIT(1),             /* RESERVED                     */
      3 CVTRV235 BIT(1),             /* RESERVED                     */
      3 CVTRV236 BIT(1),             /* RESERVED                     */
     2 CVTRV237 ,              /* RESERVED                     */
      3 CVTRV238 BIT(1),             /* RESERVED                     */
      3 CVTRV239 BIT(1),             /* RESERVED                     */
      3 CVTRV240 BIT(1),             /* RESERVED                     */
      3 CVTRV241 BIT(1),             /* RESERVED                     */
      3 CVTRV242 BIT(1),             /* RESERVED                     */
      3 CVTRV243 BIT(1),             /* RESERVED                     */
      3 CVTRV244 BIT(1),             /* RESERVED                     */
      3 CVTRV245 BIT(1),             /* RESERVED                     */
     2 CVTRV246 BIT(8),              /* RESERVED                     */
     2 CVTRV247 BIT(8),              /* RESERVED                     */
     2 CVTRV248 BIT(8),              /* RESERVED                     */
     2 CVTRV249 BIT(8),              /* RESERVED                     */
     2 CVTRV250 BIT(8),              /* RESERVED                     */
     2 CVTRV251 BIT(8),              /* RESERVED                     */
     2 CVTRV252 FIXED(15),             /* RESERVED                    */
     2 CVTRV253 FIXED(15),           /* RESERVED                     */
     2 CVTRV254 FIXED(15),           /* RESERVED                     */
     2 CVTPWI   PTR,             /* ADDRESS OF THE WINDOW
                                        INTERCEPT ROUTINE      MDC104*/
     2 CVTPVBP  PTR,             /* ADDRESS OF THE VIRTUAL BLOCK
                                        PROCESSOR              MDC105*/
     2 CVTMFCTL PTR,             /* POINTER TO MEASUREMENT
                                        FACILITY CONTROL BLOCK MDC100*/
     2 CVTMFRTR ,             /* IF MEASUREMENT FACILITY IS
                                        ACTIVE, CONTAINS ADDRESS OF
                                        MEASUREMENT FACILITY ROUTER.
                                        OTHERWISE, ADDRESS OF
                                        CVTBRET.               MDC101*/
      3 CVTMFACT BIT(1),             /* IF ONE, I/O SUPERVISOR AND
                                        TIMER SECOND LEVEL INTERRUPT
                                        HANDLER HOOKS BRANCH TO
                                        MEASUREMENT FACILITY ROUTER
                                                               MDC102*/
     2 CVTVPSIB PTR,             /* BRANCH ENTRY TO PAGE SERVICES
                                                               MDC108*/
     2 CVTVSI   PTR,             /* BRANCH ENTRY TO VAM SERVICES
                                                               MDC109*/
     2 CVTVFP   PTR,             /* BRANCH ENTRY TO FINDPAGE
                                                               MDC110*/
     2 CVTRV262 ,              /* RESERVED                     */
      3 CVTRV263 BIT(1),             /* RESERVED                     */
      3 CVTRV264 BIT(1),             /* RESERVED                     */
      3 CVTRV265 BIT(1),             /* RESERVED                     */
      3 CVTRV266 BIT(1),             /* RESERVED                     */
      3 CVTRV267 BIT(1),             /* RESERVED                     */
      3 CVTRV268 BIT(1),             /* RESERVED                     */
      3 CVTRV269 BIT(1),             /* RESERVED                     */
      3 CVTRV270 BIT(1),             /* RESERVED                     */
     2 CVTRV271 ,              /* RESERVED                     */
      3 CVTRV272 BIT(1),             /* RESERVED                     */
      3 CVTRV273 BIT(1),             /* RESERVED                     */
      3 CVTRV274 BIT(1),             /* RESERVED                     */
      3 CVTRV275 BIT(1),             /* RESERVED                     */
      3 CVTRV276 BIT(1),             /* RESERVED                     */
      3 CVTRV277 BIT(1),             /* RESERVED                     */
      3 CVTRV278 BIT(1),             /* RESERVED                     */
      3 CVTRV279 BIT(1),             /* RESERVED                     */
     2 CVTRV280 ,              /* RESERVED                     */
      3 CVTRV281 BIT(1),             /* RESERVED                     */
      3 CVTRV282 BIT(1),             /* RESERVED                     */
      3 CVTRV283 BIT(1),             /* RESERVED                     */
      3 CVTRV284 BIT(1),             /* RESERVED                     */
      3 CVTRV285 BIT(1),             /* RESERVED                     */
      3 CVTRV286 BIT(1),             /* RESERVED                     */
      3 CVTRV287 BIT(1),             /* RESERVED                     */
      3 CVTRV288 BIT(1),             /* RESERVED                     */
     2 CVTRV289 ,              /* RESERVED                     */
      3 CVTRV290 BIT(1),             /* RESERVED                     */
      3 CVTRV291 BIT(1),             /* RESERVED                     */
      3 CVTRV292 BIT(1),             /* RESERVED                     */
      3 CVTRV293 BIT(1),             /* RESERVED                     */
      3 CVTRV294 BIT(1),             /* RESERVED                     */
      3 CVTRV295 BIT(1),             /* RESERVED                     */
      3 CVTRV296 BIT(1),             /* RESERVED                     */
      3 CVTRV297 BIT(1),             /* RESERVED                     */
     2 CVTTRCA  PTR,             /* ADDRESS OF TRACE TABLE
                                        HEADER  (MDC327)     @ZA02352*/
     2 CVTRV302 FIXED(15),             /* RESERVED                    */
     2 CVTRV303 FIXED(15),             /* RESERVED                    */
     2 CVTRV304 FIXED(15),           /* RESERVED                     */
     2 CVTRV305 FIXED(15),           /* RESERVED                     */
                                        ENTRY POINT            MDC125*/
     2 CVT0TC0A PTR,             /* ADDRESS OF TASK CLOSE MODULE
                                        IFG0TC0A               MDC128*/
     2 CVTRLSTG FIXED(31),           /* SIZE OF ACTUAL REAL STORAGE
                                        ONLINE AT IPL TIME IN 'K'.
                                        VALUE PLACED HERE BY IEAVNIP0.
                                                               MDC153*/
     2 CVTSPFRR PTR,             /* 'SUPER FRR' ADDRESS (ADDRESS
                                        OF FUNCTIONAL RECOVERY
                                        ROUTINE ESTABLISHED AT NIP0
                                        TIME TO PROTECT SUPERVISOR
                                        CONTROL PROGRAM)       MDC154*/
     2 CVTVEMS0 PTR,             /* ADDRESS OF MEMORY SWITCH
                                        ROUTINE                MDC155*/
     2 CVTJRECM PTR,             /* ADDRESS OF SUBSYSTEM
                                        INTERFACE RESOURCE MANAGER
                                                               MDC157*/
     2 CVTIRECM PTR,             /* ADDRESS OF INITIATOR
                                        RESOURCE MANAGER       MDC158*/
     2 CVTDARCM PTR,             /* ADDRESS OF DEVICE ALLOCATION
                                        RESOURCE MANAGER       MDC159*/
     2 CVT0PT02 PTR,             /* ADDRESS OF POST ENTRY POINT
                                        IEA0PT02               MDC160*/
     2 CVTSTPRS PTR,             /* ENTRY POINT OF STOP AND
                                        RESTART SUBROUTINE     MDC162*/
     2 CVTWTCB  PTR,             /* ADDRESS OF WAIT STATE TCB
                                                               MDC164*/
     2 CVTVACR  PTR,             /* ACR/VARY CPU CHANNEL RECOVERY
                                        ROUTINE ADDRESS.  ADDRESS
                                        FILLED IN BY VARY CPU
                                        PROCESSOR.             MDC178*/
     2 CVTQUIT  PTR,             /* VARY CPU SHUTDOWN ROUTINE
                                        ADDRESS.  ADDRESS FILLED IN
                                        BY VARY CPU PROCESSOR. MDC179*/
     2 CVTGTFR8 PTR,             /* GENERALIZED TRACE FACILITY
                                        (GTF) CONTROL REGISTER 8
                                        INITIALIZATION ROUTINE
                                        ADDRESS                MDC180*/
     2 CVTVSTOP PTR,             /* ADDRESS OF VARY CPU STOP CPU
                                        ROUTINE                MDC169*/
     2 CVTVPSA  PTR,             /* ADDRESS OF COPY OF SYSGEN'ED
                                        PSA - PLACED HERE BY NIP
                                                               MDC170*/
     2 CVTRMPTT PTR,             /* ADDRESS OF ISTRAMA1, THE VTAM
                                        RESOURCE MANAGER FOR NORMAL
                                        AND ABNORMAL TASK TERMINATION
                                        (MDC322)             @Z30AP9A*/
     2 CVTRMPMT PTR,             /* ADDRESS OF ISTRAMA2, THE VTAM
                                        RESOURCE MANAGER FOR NORMAL
                                        AND ABNORMAL MEMORY
                                        TERMINATION (MDC323) @Z30AP9A*/
     2 CVTEXP1  PTR,             /* ADDRESS OF EXIT PROLOGUE
                                        WHICH RETURNS TO THE
                                        DISPATCHER             MDC173*/
     2 CVTCSDRL PTR,             /* REAL ADDRESS OF COMMON SYSTEM
                                        DATA AREA (CSD).  INITIALIZED
                                        BY NIP.                MDC174*/
     2 CVTSSRB  PTR,             /* STATUS STOP SRB ENTRY  MDC175*/
     2 CVTRPT   PTR,             /* ADDRESS OF IGARPT01 MODULE OF
                                        RADIX PARTITION TREE SERVICES.
                                        INITIALIZED BY NIP.    MDC177*/
     2 CVTQV1   PTR,             /* ADDRESS OF QUEUE VERIFICATION
                                        FOR SINGLE THREADED QUEUES
                                        WITH HEADERS ONLY      MDC181*/
     2 CVTQV2   PTR,             /* ADDRESS OF QUEUE VERIFICATION
                                        FOR SINGLE THREADED QUEUES
                                        WITH HEADER AND TRAILER
                                                               MDC182*/
     2 CVTQV3   PTR,             /* ADDRESS OF QUEUE VERIFICATION
                                        FOR DOUBLE THREADED QUEUES
                                                               MDC183*/
     2 CVTGSDA  ,             /* ADDRESS OF GLOBAL SYSTEM
                                        DUPLEX AREA.  ADDRESS FILLED
                                        IN BY NIP0.            MDC184*/
      3 CVTGSDAB BIT(1),             /* IF HIGH-ORDER BIT IS ONE,
                                        THERE IS A VALID VALUE IN
                                        FOLLOWING 31 BITS      MDC185*/
     2 CVTADV   PTR,             /* ADDRESS OF ADDRESS
                                        VERIFICATION ROUTINE   MDC186*/
     2 CVTTPIO  PTR,             /* ADDRESS OF VTAM TPIO (SVC
                                        124) ROUTINE           MDC193*/
     2 CVTCRCA  PTR,             /* WHEN CHANNEL RECONFIGURATION
                                        HARDWARE (CRH) IS ACTIVE,
                                        ADDRESS OF CRH COMMUNICATION
                                        AREA IECVCRCA.  OTHERWISE,
                                        ZERO.  (MDC306)      @Z30CQ9A*/
     2 CVTEVENT PTR,             /* BRANCH ENTRY ADDRESS TO
                                        EVENTS (FAST MULTIPLE WAIT
                                        ROUTINE)  (MDC316)   @Z30HP9A*/
     2 CVTSSCR  PTR,             /* ADDRESS OF STORAGE SYSTEM
                                        CONTROLLER RECOVERY MANAGER
                                        CLEANUP ROUTINE (SSC RMCR)
                                        (MDC319)             @Z30LP9A*/
     2 CVTCBBR  PTR,             /* BRANCH ENTRY ADDRESS TO
                                        GETMAIN/FREEMAIN
                                        (MDC325)             @Z30EN9A*/
     2 CVTEFF02 PTR,             /* ADDRESS OF IKJEFF02, TSO
                                        MESSAGE ISSUER SERVICE
                                        ROUTINE  (MDC326)    @ZM30972*/
     2 CVTRV604 PTR,             /* RESERVED  (MDC307)   @Z30AQ9A*/
     2 CVTRV605 PTR,             /* RESERVED  (MDC307)   @Z30AQ9A*/
     2 CVTRV606 PTR,             /* RESERVED  (MDC307)   @Z30AQ9A*/
     2 CVTRAC   PTR,             /* ADDRESS OF ACCESS CONTROL CVT
                                        (MDC320)             @Z40RP9A*/
     2 CVTCGK   PTR,             /* ADDRESS OF ROUTINE USED TO
                                        CHANGE THE KEY OF VIRTUAL
                                        PAGES  (MDC331)      @Z40EP9A*/
     2 CVTRV609 PTR,             /* RESERVED  (MDC332)   @Z40AQ9A*/
     2 CVT0PT0E PTR,             /* ENTRY POINT TO IDENTIFY POST
                                        EXIT ROUTINES
                                        (MDC334)             @Z40EP9A*/
     2 CVT0PT03 PTR,             /* POST REINVOCATION ENTRY POINT
                                        FROM POST EXIT ROUTINES
                                        (MDC335)             @Z40EP9A*/
     2 CVTTCASP PTR,             /* RESERVED FOR FUTURE USE
                                        (MDC336)             @Z40DQ9A*/
     2 CVTASMRM PTR,             /* ADDRESS OF AUXILIARY STORAGE
                                        MANAGEMENT RESOURCE MANAGER
                                        FOR ADDRESS SPACE TERMINATION
                                        (MDC341)             @Z40WP9A*/
     2 CVTJTERM PTR,             /* ADDRESS OF AUXILIARY STORAGE
                                        MANAGEMENT JOB TERMINATION
                                        RESOURCE MANAGER
                                        (MDC342)             @Z40WP9A*/
     2 CVTRSUME PTR,             /* ADDRESS OF RESUME FUNCTION
                                        (MDC344)             @Z40FP9A*/
     2 CVTTCTL  PTR,             /* ADDRESS OF TRANSFER CONTROL
                                        (TCTL) FUNCTION
                                        (MDC345)             @Z40FP9A*/
     2 CVTCDAL  PTR,             /* ADDRESS OF COMMON DISPATCHER
                                        ACTIVE LIST (MDC346) @Z40FP9A*/
     2 CVTT6SVC ,             /* ENTRY POINT ADDRESS FOR TYPE
                                        6 SVC EXIT FUNCTION
                                        (MDC347)             @Z40FP9A*/
     2 CVTSUSP  PTR,             /* ADDRESS OF SUSPEND ROUTINE
                                        (MDC348)             @Z40FP9A*/
     2 CVTIHASU PTR,             /* ADDRESS OF BIT STRING
                                        (MDC355)             @Z404P9A*/
     2 CVTRV621 PTR,             /* RESERVED  (MDC307)   @Z30AQ9A*/
     2 CVTRV622 PTR,             /* RESERVED  (MDC307)   @Z30AQ9A*/
     2 CVTRV623 PTR,             /* RESERVED  (MDC307)   @Z30AQ9A*/
     2 CVTRV624 PTR,             /* RESERVED  (MDC307)   @Z30AQ9A*/
     2 CVTRV625 PTR,             /* RESERVED  (MDC307)   @Z30AQ9A*/
     2 CVTRV626 PTR,             /* RESERVED  (MDC307)   @Z30AQ9A*/
     2 CVTRV627 PTR,             /* RESERVED  (MDC307)   @Z30AQ9A*/
     2 CVTRV628 PTR;             /* RESERVED  (MDC307)   @Z30AQ9A*/

  /*                                                                 */
  /*           OS - OS/VS COMMON EXTENSION                           */
  /*                                                                 */

  DECLARE
    1 CVTXTNT1 BASED(CVTEXT1),       /* START OF OS - OS/VS COMMON
                                        EXTENSION              ICB421*/
     2 CVTFACHN PTR,             /* ADDRESS OF CHAIN OF DCB FIELD
                                        AREAS (ISAM)           ICB421*/
     2 CVTRSV87 PTR,             /* RESERVED                     */
     2 CVTRSV88 PTR;             /* RESERVED                     */

  /*                                                                 */
  /*           OS/VS1 - OS/VS2 COMMON EXTENSION                      */
  /*                                                                 */

  DECLARE
    1 CVTXTNT2 BASED(CVTEXT2),       /* START OF OS/VS1 - OS/VS2
                                        EXTENSION                    */
     2 CVTDSSV  ,             /* ADDRESS OF THE DYNAMIC
                                        SUPPORT SYSTEM (DSS) VECTOR
                                        TABLE                  ICB313*/
      3 CVTRSV89 BIT(8),             /* RESERVED               ICB313*/
      3 CVTDSSVA BIT(24),            /* ADDRESS OF THE DSS VECTOR
                                        TABLE                  ICB313*/
     2 CVTNUCLS CHAR(1),             /* IDENTIFICATION OF THE NUCLEUS
                                        MEMBER NAME            ICB322*/
     2 CVTFLGBT ,              /* FLAG BYTE  (OS/VS1)
                                        (MDC301)             @X04EP9A*/
      3 CVTNPE   BIT(1),             /* INDICATES NON-PAGING
                                        ENVIRONMENT (VM HANDSHAKING)
                                        (OS/VS1)  (MDC302)   @X04EP9A*/
      3 CVTVME   BIT(1),             /* INDICATES MACHINE IS
                                        OPERATING IN VM ENVIRONMENT
                                        (OS/VS1)  (MDC303)   @X04EP9A*/
      3 CVTBAH   BIT(1),             /* INDICATES THAT THE VM/370 -
                                        OS/VS1 BTAM AUTOPOLL
                                        HANDSHAKE IS OPERATIONAL
                                        (OS/VS1)  (MDC356)   @X60KL9A*/
      3 CVTRSV9D BIT(1),             /* RESERVED                     */
      3 CVTRSV9E BIT(1),             /* RESERVED                     */
      3 CVTRSV9F BIT(1),             /* RESERVED                     */
      3 CVTRSV9G BIT(1),             /* RESERVED                     */
      3 CVTRSV9H BIT(1),             /* RESERVED                     */
     2 CVTRSV91 FIXED(15),           /* RESERVED                     */
     2 CVTDEBVR PTR,             /* ADDRESS OF BRANCH ENTRY POINT
                                        OF DEB VALIDITY CHECK ROUTINE
                                        (ICB380)               XM9028*/
     2 CVTRSV92 PTR,             /* RESERVED  (MDC190)     YM2278*/
     2 CVTRSV93 PTR,             /* RESERVED                     */
     2 CVTRSV94 PTR,             /* RESERVED                     */
     2 CVTQID   ,             /* SAVE AS CVTQIDA BELOW  ICB381*/
      3 CVTRSV95 BIT(8),             /* RESERVED               ICB381*/
      3 CVTQIDA  BIT(24),            /* ADDRESS OF QUEUE
                                        IDENTIFICATION (QID) TABLE
                                        PREFIX                 ICB381*/
     2 CVTOLTEP PTR,             /* POINTER TO CONTROL BLOCK
                                        CREATED BY SVC 59 TO POINT TO
                                        PSEUDO-DEB'S           ICB423*/
     2 CVTRSV96 FIXED(15),           /* RESERVED                     */
     2 CVTRSV97 FIXED(15),           /* RESERVED                     */
     2 CVTRSV98 PTR,             /* RESERVED                     */
     2 CVTRSV99 PTR,             /* RESERVED  (MDC329)   @Z40AQ9A*/
     2 CVTSKTA  PTR,             /* ADDRESS OF STORAGE KEY TABLE
                                        (VM HANDSHAKING)  (OS/VS1)
                                        (MDC304)             @X04EP9A*/
     2 CVTICB   PTR,             /* ADDRESS OF MASS STORAGE
                                        SYSTEM (MSS) CONTROL BLOCK
                                        (MDC305)             @Z30LP9A*/
     2 CVTRV400 ,              /* RESERVED                     */
      3 CVTRV401 BIT(1),             /* RESERVED                     */
      3 CVTRV402 BIT(1),             /* RESERVED                     */
      3 CVTRV403 BIT(1),             /* RESERVED                     */
      3 CVTRV404 BIT(1),             /* RESERVED                     */
      3 CVTRV405 BIT(1),             /* RESERVED                     */
      3 CVTRV406 BIT(1),             /* RESERVED                     */
      3 CVTRV407 BIT(1),             /* RESERVED                     */
      3 CVTRV408 BIT(1),             /* RESERVED                     */
     2 CVTRV409 ,              /* RESERVED                     */
      3 CVTRV410 BIT(1),             /* RESERVED                     */
      3 CVTRV411 BIT(1),             /* RESERVED                     */
      3 CVTRV412 BIT(1),             /* RESERVED                     */
      3 CVTRV413 BIT(1),             /* RESERVED                     */
      3 CVTRV414 BIT(1),             /* RESERVED                     */
      3 CVTRV415 BIT(1),             /* RESERVED                     */
      3 CVTRV416 BIT(1),             /* RESERVED                     */
      3 CVTRV417 BIT(1),             /* RESERVED                     */
     2 CVTRV418 BIT(8),              /* RESERVED                     */
     2 CVTRV419 BIT(8),              /* RESERVED                     */
     2 CVTRV420 FIXED(15),             /* RESERVED                    */
     2 CVTRV421 FIXED(15),           /* RESERVED                     */
     2 CVTRV422 FIXED(15),           /* RESERVED                     */
     2 CVTRV423 FIXED(15),           /* RESERVED                     */
     2 CVTATCVT ,             /* POINTER TO VTAM'S CVT  MDC080*/
      3 CVTATACT BIT(1),             /* IF ON, VTAM IS ACTIVE  MDC081*/
     2 CVTRV425 PTR,             /* RESERVED                     */
     2 CVTRV426 PTR,             /* RESERVED                     */
     2 CVTRV427 PTR,             /* RESERVED                     */
     2 CVTRV428 FIXED(31),           /* RESERVED                     */
     2 CVTRV429 ,              /* RESERVED                     */
      3 CVTRV430 BIT(1),             /* RESERVED                     */
      3 CVTRV431 BIT(1),             /* RESERVED                     */
      3 CVTRV432 BIT(1),             /* RESERVED                     */
      3 CVTRV433 BIT(1),             /* RESERVED                     */
      3 CVTRV434 BIT(1),             /* RESERVED                     */
      3 CVTRV435 BIT(1),             /* RESERVED                     */
      3 CVTRV436 BIT(1),             /* RESERVED                     */
      3 CVTRV437 BIT(1),             /* RESERVED                     */
     2 CVTRV438 ,              /* RESERVED                     */
      3 CVTRV439 BIT(1),             /* RESERVED                     */
      3 CVTRV440 BIT(1),             /* RESERVED                     */
      3 CVTRV441 BIT(1),             /* RESERVED                     */
      3 CVTRV442 BIT(1),             /* RESERVED                     */
      3 CVTRV443 BIT(1),             /* RESERVED                     */
      3 CVTRV444 BIT(1),             /* RESERVED                     */
      3 CVTRV445 BIT(1),             /* RESERVED                     */
      3 CVTRV446 BIT(1),             /* RESERVED                     */
     2 CVTRV447 BIT(8),              /* RESERVED                     */
     2 CVTRV448 BIT(8),              /* RESERVED                     */
     2 CVTRV449 FIXED(15),             /* RESERVED                    */
     2 CVTRV450 FIXED(15),           /* RESERVED                     */
     2 CVTRV451 FIXED(15),           /* RESERVED                     */
     2 CVTRV452 FIXED(15),           /* RESERVED                     */
     2 CVTRV453 PTR,             /* RESERVED                     */
     2 CVTRV454 PTR,             /* RESERVED                     */
     2 CVTRV455 PTR,             /* RESERVED                     */
     2 CVTRV456 PTR,             /* RESERVED                     */
     2 CVTRV457 ,              /* RESERVED                     */
      3 CVTRV458 BIT(1),             /* RESERVED                     */
      3 CVTRV459 BIT(1),             /* RESERVED                     */
      3 CVTRV460 BIT(1),             /* RESERVED                     */
      3 CVTRV461 BIT(1),             /* RESERVED                     */
      3 CVTRV462 BIT(1),             /* RESERVED                     */
      3 CVTRV463 BIT(1),             /* RESERVED                     */
      3 CVTRV464 BIT(1),             /* RESERVED                     */
      3 CVTRV465 BIT(1),             /* RESERVED                     */
     2 CVTRV466 ,              /* RESERVED                     */
      3 CVTRV467 BIT(1),             /* RESERVED                     */
      3 CVTRV468 BIT(1),             /* RESERVED                     */
      3 CVTRV469 BIT(1),             /* RESERVED                     */
      3 CVTRV470 BIT(1),             /* RESERVED                     */
      3 CVTRV471 BIT(1),             /* RESERVED                     */
      3 CVTRV472 BIT(1),             /* RESERVED                     */
      3 CVTRV473 BIT(1),             /* RESERVED                     */
      3 CVTRV474 BIT(1),             /* RESERVED                     */
     2 CVTRV475 BIT(8),              /* RESERVED                     */
     2 CVTRV476 BIT(8),              /* RESERVED                     */
     2 CVTRV477 BIT(8),              /* RESERVED                     */
     2 CVTRV478 BIT(8),              /* RESERVED                     */
     2 CVTRV479 FIXED(15),           /* RESERVED                     */
     2 CVTRV480 PTR,             /* RESERVED                     */
     2 CVTRV481 PTR,             /* RESERVED                     */
     2 CVTRV482 PTR;             /* RESERVED                     */

  /*                      CVT PREFIX                                 */
  %GOTO CVTL4;

     DCL 1 CVTFIX BASED(CVTPTR-256) ,
     2  YCC00002677       CHAR(248) , /* RESERVED                     */
     2  YCC00002677       CHAR(2) ,   /* RESERVED                     */
     2 CVTMDL   CHAR(2) , /* CPU MODEL NUMBER IN SIGNLESS
                                        PACKED DECIMAL, I.E., A MODEL
                                        145 WOULD BE REPRESENTED AS
                                        0145 HEX                     */
     2 CVTRELNO  ,   /* RELEASE NUMBER (EBCDIC)      */
      3 CVTNUMB  CHAR(2) ,  /* RELEASE NUMBER               */
      3 CVTLEVL  CHAR(2) ;/* LEVEL NUMBER OF THIS RELEASE */

  /*                   END OF CVT MACRO                              */

 %IF IKEPLS=''  %THEN
     %GOTO CVTL4;
 IHALPOP;
 %CVTL4 : ;
./       ADD   NAME=DYNALLOC
 % DYNALLOC: PROC(FILE,DSN,CYL,TRK,DIR,MEMBER,TERMINAL,
    SYSOUT,DUMMY,UNIT,RLSE,CONTIG,SER,POSITION,FREE,PERM,AUTH,
    DISP1,DISP2,DISP3,SPACE1,SPACE2,ONERROR,TRTCH,FCB,UCS,DEST,
    INTRDR,FORMS,COPIES,LABEL,PROTECT,VERB,ID,MF,DDNRTN)
    STATEMENT RETURNS(CHAR);
  /*****************************************************************/
  /*  MACRO : DYNALLOC                                             */
  /*  VERSION:  JAN 21, 1977                                       */
  /*  LANGUAGE: PLIX RELEASE 3.0                                   */
  /*  SYSTEM:   MVS                                                */
  /*                                                               */
  /* PURPOSE:                                                      */
  /* PERFORMS A DYNAMIC ALLOCATION OR BUILDS A DYNAMIC ALLOCATION  */
  /* PARAMETER BLOCK FROM THE KEYWORD ARGUMENTS PROVIDED BY THE    */
  /* CALLER. REFERENCE INFORMATION ON DYNAMIC ALLOCATION THROUGH   */
  /*  SVC 99 IS PROVIDED IN SPL: JOB MANANGEMENT (GC28-0627) WHICH */
  /* SHOULD BE REVIEWED IF THE FOLLOWING DOCUMENTATION IS          */
  /* INADEQUATE TO YOUR NEEDS.                                     */
  /*                                                               */
  /*   KEYWORDS HAVE BEEN CHOSEN FROM JCL AND THE TSO ALLOC        */
  /* COMMAND. A KEYWORD CAN BE DEFINED FOR EVERY KEYWORD OR        */
  /* POSITIONAL PARAMETER THAT CAN BE SPECIFIED IN JCL, BUT        */
  /* SOME CENSORSHIP HAS BEEN IMPOSED TO MAKE THE PROGRAMMING      */
  /* EFFORT BEARABLE AT THIS POINT. BTAM AND TCAM KEYWORDS,        */
  /* UNIT RECORD DEVICE OPTIONS, AND MOST DCB SUBFIELDS HAVE       */
  /* BEEN OMITTED FROM THIS VERSION BECAUSE THEY ARE UNLIKELY      */
  /* TO BE NEEDED OR BECAUSE THEY OVERLAP FEATURES OF 'ENV'.       */
  /*                                                               */
  /*   WHEN USING THIS FACILITY YOU INHERIT THE DEFAULTS           */
  /* AND RESTRICTIONS OF THE SVC 99 INTERFACE. OMITTED             */
  /* PARAMETERS DEFAULT ACCORDING TO JCL CONVENTIONS (EXAMPLE:     */
  /* IF DISP1 IS OMMITTED 'NEW' IS ASSUMED). CERTAIN               */
  /* KEYWORDS ARE MUTUALLY EXCLUSIVE, BUT NO CHECK IS              */
  /* MADE FOR THIS IN THE MACRO. SVC 99 WILL FAIL IF THE           */
  /* OPTION GROUP SPECIFIED IS ILLEGAL. YOUR USERID                */
  /* IS NOT INSERTED INTO THE 'DSN' KEYWORD, SO YOU                */
  /* MUST PROVIDE THIS SERVICE YOURSELF IF YOU NEED IT.            */
  /*                                                               */
  /*   THERE ARE THREE FORMS OF THE MACRO BASED ON THE             */
  /* VALUE OF THE 'MF' KEYWORD. IF 'MF' IS OMMITTED,               */
  /* THE STANDARD FORM OF THE MACRO IS GENERATED                   */
  /* INCLUDING A BEGIN STATEMENT, PARAMETER AND ENTRY              */
  /* DECLARATION, SVC CALL, AND ERROR ANALYSIS. IF 'MF(L)'         */
  /* IS SPECIFIED, ONLY THE PARAMETER BLOCK STRUCTURE IS           */
  /* DECLARED, AND NO EXECUTABLE STATEMENTS ARE PRODUCED.          */
  /* IF 'MF(E)' IS SPECIFIED, THE EXECUTE FORM OF THE MACRO        */
  /* EXPANDS TO A BEGIN STATEMENT, ENTRY DECLARATIONS, A           */
  /* SEQUENCE OF ASSIGNMENTS MODIFYING THE PARAMETER BLOCK         */
  /* GENERATED BY A PREVIOUS 'MF(L)' MACRO CALL, AN SVC            */
  /* CALL, AND ERROR ANALYSIS. THE NAME GENERATED BY               */
  /* MF(L) MUST BE KNOWN TO THE MF(E) BLOCK. THE SHAPE OF          */
  /* THE PARAMETER BLOCK CANNOT BE CHANGED BY MF(E), SO            */
  /* A COMPILER ERROR IS GENERATED IF A KEYWORD IS                 */
  /* SPECIFIED IN MF(E) WHICH IS NOT ALSO SPECIFIED IN             */
  /* THE MF(L).                                                    */
  /*       DYNALLOC FILE(XXX) TERMINAL ID(TERM) MF(L);             */
  /*               ...                                             */
  /*       DYNALLOC FILE(SYSTERM) ID(TERM) MF(E);                  */
  /* THE MF(L) GENRATES A PARMETER BLOCK FOR ALLOCATING THE        */
  /* TERMINAL AS A DATASET. THE MF(E) THEN CHANGES THE DDNAME      */
  /* TO 'SYSTERM' AND ISSUES THE ACTUAL ALLOCATION REQUEST.        */
  /*                                                               */
  /* FIVE KINDS OF KEYWORDS EXIST: CHARACTER, NUMERIC, LOGICAL,    */
  /* RESTRICTED OPTION, AND SPECIAL.                               */
  /* THE FOLLOWING KEYWORDS ARE CHARACTER. THEY ARE SPECIFIED      */
  /* WITH A CHARACTER STRING (WITHOUT QUOTES) OR AS '@' FOLLOWED   */
  /* BY THE NAME OF A CHARACTER VARIABLE (EXAMPLE: FILE(IN) MEANS  */
  /* THE DDNAME 'IN' WHILE FILE(@IN) MEANS THE DDNAME CONTAINED    */
  /* IN THE PLI VARIABLE WHOSE NAME IS 'IN'). NOTE THAT MF(L)      */
  /* PARAMETER DECLARATIONS USE 'INIT' TO ASSIGN VALUES, SO        */
  /* IF @VARNAME IS USED, THE VALUE USED WILL BE THE VALUE IN      */
  /* THE VARIABLE WHEN THE CONTAINING BLOCK IS ENTERED, WHILE      */
  /* MF(E) EXPANDS TO ASSIGNMENT STATEMENTS AND UPDATES THE        */
  /* MF(L) PARAMETER BLOCK WITH THE CURRENT VALUE OF THE           */
  /* VARIABLE.                                                     */
  /*  KEYWORD   MEANING                                            */
  /*  FILE      DDNAME ASSIGNED TO ALLOCATED FILE                  */
  /*  DSN       FULLY QUALIFIED DATASET NAME                       */
  /*  KEYWORD   MEANING                                            */
  /*  DIR       NUMBER OF DIRECTORY BLOCKS FOR NEW PDS             */
  /*  POSITION  FILE SEQUENCE NUMBER FOR TAPE                      */
  /*  SPACE1    PRIMARY SPACE ALLOCATION QUANTITY                  */
  /*  SPACE2    SECONDARY ALLOCATION QUANTITY                      */
  /*  COPIES    NUMBER OF COPIES OF SYSOUT OUTPUT                  */
  /*                                                               */
  /* THE FOLLOWING LOGICAL KEYWORDS TAKE NO VALUE. THEY SHOULD BE  */
  /* SPECIFIED WITHOUT FOLLOWING PARENTHESES.THEY ARE ILLEGAL      */
  /* IF MF(E) IS SPECIFIED SINCE ONLY THE VALUES AND NOT THE SHAPE */
  /* OF A PARAMETER BLOCK CAN BE CHANGED IN THE EXECUTE FORM OF    */
  /* THE MACRO.                                                    */
  /*  KEYWORD   MEANING                                            */
  /*  CYL       ALLOCATION UNIT IS CYLINDERS                       */
  /*  TRK       ALLOCATION UNIT IS TRACKS                          */
  /*  TERMINAL  ALLOCATION TO TSO TERMINAL                         */
  /*  DUMMY     ALLOCATION TO A DUMMY DATASET                      */
  /*  RLSE      RELASE UNUSED SPACE                                */
  /*  CONTIG    CONTIGUOUS ALLOCATION                              */
  /*  INTRDR    ALLOCATION TO AN INTERNAL READER                   */
  /*  PROTECT   SHORTHAND FOR EXPDT=99350                          */
  /*  FREE      FREE=CLOSE                                         */
  /*  PERM      ALLOCATION ENDURES BEYOND CURRENT TSO COMMAND      */
  /* THE FOLLOWING KEYWORDS TAKE ONE OPTION FROM A RESTRICED LIST  */
  /*  KEYWORD   OPTIONS                                            */
  /*  DISP1     NEW,OLD,MOD,SHR                                    */
  /*  DISP2     KEEP,CATLG,UNCATLG,DELETE (PASS IS NOT ACCEPTABLE) */
  /*  DISP3     KEEP,CATLG,UNCATLG,DELETE                          */
  /*  LABEL     SL,NL,BLP,LTM,NSL,AL,AUL,SUL                       */
  /*  TRTCH     E,C,T,ET                                           */
  /*  VERB      ALLOC,FREE (IF OMMITTED, ALLOC ASSUMED)            */
  /* THE FOLLOWING KEYWORDS ARE SPECIAL:                           */
  /*  MF        DESCRIBED ABOVE                                    */
  /*  ID        SPECIFIES THE LEVEL 1 NAME FOR THE SVC 99          */
  /*            PARAMETER STRUCTURE. IF OMMITTED 'S99PARMS'        */
  /*            IS GENERATED. ID ALLOWS UNABMIGUOUS REFERENCE      */
  /*            TO ONE OF SEVERAL SUCH STRUCTURES.                 */
  /*  DDNRTN    IF 'FILE' IS OMITTED, DYNAMIC ALLOCATION WILL      */
  /*            GENERATE A DDNAME. THIS IS THE ONLY KEYWORD        */
  /*            WHICH RETURNS A VALUE RATHER THAN SPECIFIES ONE.   */
  /*            WHEN USED IN MF(L), DDNRTN WILL CREATE A           */
  /*            VARIABLE IN THE STRUCTURE WITH THE NAME            */
  /*            ID××'.S99DDRTRN.S99DATA' WHICH IS A CHAR(8)        */
  /*            VARIABLE FILLED IN BY DYNAMIC ALLOCATION.          */
  /*            WHEN USED IN STANDARD OR MF(E) FORMS,              */
  /*             IT MUST REFER TO A CHARACTER VARIABLE WHICH       */
  /*             WILL BE ASSIGNED THE DDNAME AFTER ALLOCATION.     */
  /*  ONERROR    ONE OR MORE PLI STATEMENTS TO BE EXECUTED         */
  /*             IN THE EVENT SVC 99 RETURNS A NON-ZERO CODE.      */
  /*             UPON ENTRY TO THESE STATEMENTS, THE FOLLOWING     */
  /*             VARIABLES ARE DEFINED:                            */
  /*             R15 (FIXED BIN(31)) SVC 99 RETURN CODE            */
  /*             &ID..S99ERROR (FIXED BIN) SVC 99 ERROR CODE       */
  /*             &ID..S99INFO  (FIXED BIN) SVC 99 INFORMATION CODE */
  /*             MSG ( (2) CHAR(251) VAR) A FIRST AND SECOND LEVEL */
  /*               MESSAGE ABOUT THE ERROR.                        */
  /*             ERROR CODES ARE DOCUMENTED IN SPL:JOB MANAGEMENT. */
  /*             IF THE SEQUENCE OF STATEMENTS IN 'ONERROR' DOES   */
  /*               NOT END IN A GOTO, THEN CONTROL WILL FALL       */
  /*               THROUGH TO THE PLI STATEMENTS:                  */
  /*                   PUT EDIT(MSG)(COL(1),A);                    */
  /*                   SIGNAL ERROR;                               */
  /*             NOTE THAT GOTO MAY TERMINATE THE BLOCK IN WHICH   */
  /*             VARIABLES R15,S99ERROR,S99INFO, AND MSG ARE KNOWN */
  /*             SO PRESERVE THEIR VALUES IN OTHER VARS            */
  /*             IF THEY ARE NEEDED ELSEWHERE.                     */
  /*                                                               */
  /* AUTHOR: HOWARD GILBERT                                        */
  /*         YALE COMPUTER CENTER                                  */
  /*         175 WHITNEY AVE                                       */
  /*         NEW HAVEN, CONN  06520                                */
  /*         203 432 4080                                          */
  /*                                                               */
 DCL(FILE,DSN,CYL,TRK,DIR,MEMBER,TERMINAL,
    SYSOUT,DUMMY,UNIT,RLSE,CONTIG,SER,POSITION,FREE,PERM,AUTH,
    DISP1,DISP2,DISP3,SPACE1,SPACE2,ONERROR,TRTCH,FCB,UCS,DEST,
    INTRDR,FORMS,COPIES,LABEL,PROTECT,VERB,ID,MF,DDNRTN)
    CHAR;
 DCL (RTNR,RTNR2,WORK,WORK2) CHAR;
  /****************************************************************/
  /* THE RETURNED CHARACTER STRING FROM THIS FUNCTION  IS BUILT   */
  /* UP IN TWO PARTS IN THE LOCAL VARIABLES RTNR AND RTRN2 WHICH  */
  /* ARE CONCATENATED TOGETHER AT THE END. THIS ALLOWS THE MF(L)  */
  /* AND STANDARD FORMS OF THE MACRO TO BUILD SIMULTANEOUSLY THE  */
  /* STRUCTURE OF CONTIGUOUS TEXT UNITS AND ALSO THE PSEUDO-ARRAY */
  /* OF TEST POINTERS WHICH POINT TO THEM. EACH OF THE TEXT-UNIT  */
  /* DO GROUPS BELOW ADDS ONE TEXT UNIT STRUCTURE TO RTNR, AND    */
  /* ONE POINTER TO IT TO RTNR2. 'WORK' IS USED TO HOLD A         */
  /* TEMPORARY CHARACTER STRING FOR LATER INSERTION INTO THE      */
  /* GENERATED OUTPUT. 'WORK2' HOLDS THE LEVEL 1 STRUCTURE NAME   */
  /* PASSED BY 'ID' OR GENERATED BY DEFAULT.                      */
  /****************************************************************/
 RTNR='';
 RTNR2='';
 IF ID='' THEN
    DO;
    WORK2='S99PARMS';
    IF MF^='' THEN
          NOTE(' LEVEL 1 ID S99PARMS GENERATED, DONT DO IT TWICE',4);
    END;
 ELSE WORK2=ID;
  /****************************************************/
  /* IF MF=E OR MF OMITTED, THEN WE GENERATE A BEGIN  */
  /* BLOCK TO LOCALIZE NAMES, AND SINCE WE WILL BE    */
  /* CALLING SVC99 WE DECLARE THE SUBROUTINE INTERFACE*/
  /* VARIABLES AND ENTRY POINTS.                      */
  /****************************************************/
  IF MF^='L' THEN
    RTNR=RTNR××' BEGIN;
         DCL SVC ENTRY(FIXED BIN,*) OPTIONS(ASM INTER RETCODE);
         DCL 1 REGS,
              2 R0 PTR,
              2 R1 PTR,
              2 R15 FIXED BIN(31);
         DCL ARGPTR PTR;
         ARGPTR=ADDR('××WORK2××');
         UNSPEC(ARGPTR)=UNSPEC(ARGPTR)×''1''B;
         R1=ADDR(ARGPTR);
         DCL S99FAIL ENTRY ;
         DCL MSG(2) CHAR(251) VAR;';
  /*************************************************/
  /* IF MF=L OR IS OMITTED WE ARE GOING TO GENERATE*/
  /* A PARAMETER BLOC. IF MF=E THE BLOCK ALREADY   */
  /* EXISTS, SO SKIP TO THE BLOCK MODIFY SECTION   */
  /*************************************************/
  IF MF='E' THEN GO TO MFECODE;
 IF VERB=''×VERB='ALLOC' THEN
    WORK='00000001';
 ELSE IF VERB='FREE' THEN
    WORK='00000010';
 ELSE NOTE('UNSUPPORTED VERB',8);
 RTNR=RTNR××' DCL 1 '××WORK2××' UNALIGNED,
    2 S99PRMBLK,
         3 S99PLEN BIT(8) INIT(''00010100''B),
         3 S99VERB BIT(8) INIT('''××WORK××'''B),
         3 S99FLG1 BIT(16) INIT(''0''B),
         3 S99ERROR BIT(16) INIT(''0''B),
         3 S99INFO BIT(16) INIT(''0''B),
         3 S99PRTP PTR INIT((ADDR('××
              WORK2××'.S99PTRS))),
         3 S99RSVD BIT(32) INIT(''0''B),
         3 S99FLG2 BIT(32) INIT('''××AUTH××'0''B),
    2 S99TEXTFLDS,';
 IF PARMSET(FILE) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99FILE',FILE,1,1,8,'C');
    RTNR2=RTNR2××'4 S99FILEP PTR INIT((ADDR('××
              WORK2××'.S99FILE))),';
    END;
 IF PARMSET(DSN) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99DSN',DSN,2,1,44,'C');
    RTNR2=RTNR2××'4 S99DSNP PTR INIT((ADDR('××
              WORK2××'.S99DSN))),';
    END;
 IF PARMSET(MEMBER) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99MEMBER',MEMBER,3,1,8,'C');
    RTNR2=RTNR2××'4 S99MEMBERP PTR INIT((ADDR('××
              WORK2××'.S99MEMBER))),';
    END;
 IF PARMSET(TRK) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99TRK',TRK,7,0);
    RTNR2=RTNR2××'4 S99TRKP PTR INIT((ADDR('××
              WORK2××'.S99TRK))),';
    END;
 IF PARMSET(CYL) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99CYL',CYL,8,0);
    RTNR2=RTNR2××'4 S99CYLP PTR INIT((ADDR('××
              WORK2××'.S99CYL))),';
    END;
 IF PARMSET(DIR) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99DIR',DIR,12,1,3,'F');
    RTNR2=RTNR2××'4 S99DIRP PTR INIT((ADDR('××
              WORK2××'.S99DIR))),';
    END;
 IF PARMSET(RLSE) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99RLSE',RLSE,13,0);
    RTNR2=RTNR2××'4 S99RLSEP PTR INIT((ADDR('××
              WORK2××'.S99RLSE))),';
    END;
 IF PARMSET(CONTIG) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99CONTIG','00001000',14,1,1,'B');
    RTNR2=RTNR2××'4 S99CONTIGP PTR INIT((ADDR('××
              WORK2××'.S99CONTIG))),';
    END;
 IF PARMSET(SER) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99SER',SER,16,1,6,'C');
    RTNR2=RTNR2××'4 S99SERP PTR INIT((ADDR('××
              WORK2××'.S99SER))),';
    END;
 IF PARMSET(UNIT) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99UNIT',UNIT,21,1,8,'C');
    RTNR2=RTNR2××'4 S99UNITP PTR INIT((ADDR('××
              WORK2××'.S99UNIT))),';
    END;
 IF PARMSET(SYSOUT) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99SYSOUT',SYSOUT,24,1,1,'C');
    RTNR2=RTNR2××'4 S99SYSOUTP PTR INIT((ADDR('××
              WORK2××'.S99SYSOUT))),';
    END;
 IF PARMSET(FORMS) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99FORMS',FORMS,26,1,4,'C');
    RTNR2=RTNR2××'4 S99FORMSP PTR INIT((ADDR('××
              WORK2××'.S99FORMS))),';
    END;
 IF PARMSET(COPIES) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99COPIES',COPIES,29,1,1,'F');
    RTNR2=RTNR2××'4 S99COPIESP PTR INIT((ADDR('××
              WORK2××'.S99COPIES))),';
    END;
 IF PARMSET(POSITION) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99POSITION',POSITION,31,1,2,'F');
    RTNR2=RTNR2××'4 S99POSITIONP PTR INIT((ADDR('××
              WORK2××'.S99POSITION))),';
    END;
 IF PARMSET(PROTECT) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99PROTECT','99350',34,1,5,'C');
    RTNR2=RTNR2××'4 S99PROTECTP PTR INIT((ADDR('××
              WORK2××'.S99PROTECT))),';
    END;
 IF PARMSET(DUMMY) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99DUMMY',DUMMY,36,0);
    RTNR2=RTNR2××'4 S99DUMMYP PTR INIT((ADDR('××
              WORK2××'.S99DUMMY))),';
    END;
 IF PARMSET(TERMINAL) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99TERMINAL',TERMINAL,40,0);
    RTNR2=RTNR2××'4 S99TERMINALP PTR INIT((ADDR('××
              WORK2××'.S99TERMINAL))),';
    END;
 IF PARMSET(FREE) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99FREE',FREE,28,0);
    RTNR2=RTNR2××'4 S99FREEP PTR INIT((ADDR('××
              WORK2××'.S99FREE))),';
    END;
 IF PARMSET(DDNRTN) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99DDNRTN','        ',85,1,8,'C');
    RTNR2=RTNR2××'4 S99DDNRTNP PTR INIT((ADDR('××
              WORK2××'.S99DDNRTN))),';
    END;
 IF PARMSET(FCB) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99FCB',FCB,37,1,4,'C');
    RTNR2=RTNR2××'4 S99FCBP PTR INIT((ADDR('××
              WORK2××'.S99FCB))),';
    END;
 IF PARMSET(UCS) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99UCS',UCS,41,1,4,'C');
    RTNR2=RTNR2××'4 S99UCSP PTR INIT((ADDR('××
              WORK2××'.S99UCS))),';
    END;
 IF PARMSET(DEST) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99DEST',DEST,88,1,8,'C');
    RTNR2=RTNR2××'4 S99DESTP PTR INIT((ADDR('××
              WORK2××'.S99DEST))),';
    END;
 IF PARMSET(SPACE1) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99SPACE1',SPACE1,10,1,3,'F');
    RTNR2=RTNR2××'4 S99SPACE1P PTR INIT((ADDR('××
              WORK2××'.S99SPACE1))),';
    END;
 IF PARMSET(SPACE2) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99SPACE2',SPACE2,11,1,3,'F');
    RTNR2=RTNR2××'4 S99SPACE2P PTR INIT((ADDR('××
              WORK2××'.S99SPACE2))),';
    END;
 IF PARMSET(DISP1) THEN
    DO;
    WORK='00000000';
    IF DISP1='SHR' THEN WORK='00001000';
    ELSE IF DISP1='NEW' THEN WORK='00000100';
    ELSE IF DISP1='MOD' THEN WORK='00000010';
    ELSE IF DISP1='OLD' THEN WORK='00000001';
    ELSE NOTE('INVALID DISP1 VALUE',8);
    RTNR=RTNR××DYNALLOC2('S99DISP1',WORK,4,1,1,'B');
    RTNR2=RTNR2××'4 S99DISP1P PTR INIT((ADDR('××
              WORK2××'.S99DISP1))),';
    END;
 IF PARMSET(DISP2) THEN
    DO;
    WORK='00000000';
    IF DISP2='KEEP' THEN WORK='00001000';
    ELSE IF DISP2='DELETE' THEN WORK='00000100';
    ELSE IF DISP2='CATLG' THEN WORK='00000010';
    ELSE IF DISP2='UNCATLG' THEN WORK='00000001';
    ELSE NOTE('INVALID DISP2 VALUE',8);
    RTNR=RTNR××DYNALLOC2('S99DISP2',WORK,5,1,1,'B');
    RTNR2=RTNR2××'4 S99DISP2P PTR INIT((ADDR('××
              WORK2××'.S99DISP2))),';
    END;
 IF PARMSET(DISP3) THEN
    DO;
    WORK='00000000';
    IF DISP3='KEEP' THEN WORK='00001000';
    ELSE IF DISP3='DELETE' THEN WORK='00000100';
    ELSE IF DISP3='CATLG' THEN WORK='00000010';
    ELSE IF DISP3='UNCATLG' THEN WORK='00000001';
    ELSE NOTE('INVALID DISP3 VALUE',8);
    RTNR=RTNR××DYNALLOC2('S99DISP3',WORK,6,1,1,'B');
    RTNR2=RTNR2××'4 S99DISP3P PTR INIT((ADDR('××
              WORK2××'.S99DISP3))),';
    END;
 IF PARMSET(LABEL) THEN
    DO;
    WORK='00000000';
    IF LABEL='SL' THEN WORK='00000010';
    ELSE IF LABEL='NSL' THEN WORK='00000100';
    ELSE IF LABEL='NL' THEN WORK='00000001';
    ELSE IF LABEL='BLP' THEN WORK='00010000';
    ELSE IF LABEL='LTM' THEN WORK='00100001';
    ELSE IF LABEL='SUL' THEN WORK='00001000';
    ELSE IF LABEL='AL' THEN WORK='01000000';
    ELSE IF LABEL='AUL' THEN WORK='01001000';
    ELSE NOTE('INVALID LABEL VALUE',8);
    RTNR=RTNR××DYNALLOC2('S99LABEL',WORK,30,1,1,'B');
    RTNR2=RTNR2××'4 S99LABELP PTR INIT((ADDR('××
              WORK2××'.S99LABEL))),';
    END;
 IF PARMSET(TRTCH) THEN
    DO;
    WORK='00000000';
    IF TRTCH='E' THEN WORK='00100011';
    ELSE IF TRTCH='T' THEN WORK='00111011';
    ELSE IF TRTCH='C' THEN WORK='00010011';
    ELSE IF TRTCH='ET' THEN WORK='00101011';
    ELSE NOTE('INVALID TRTCH VALUE',8);
    RTNR=RTNR××DYNALLOC2('S99TRTCH',WORK,78,1,1,'B');
    RTNR2=RTNR2××'4 S99TRTCHP PTR INIT((ADDR('××
              WORK2××'.S99TRTCH))),';
    END;
 IF PARMSET(INTRDR) THEN
    DO;
    RTNR=RTNR××DYNALLOC2('S99SYSOUT','A',24,1,1,'C');
    RTNR2=RTNR2××'4 S99SYSOUTP PTR INIT((ADDR('××
         WORK2××'.S99SYSOUT))),';
    RTNR=RTNR××DYNALLOC2('S99INTRDR','INTRDR',25,1,6,'C');
    RTNR2=RTNR2××'4 S99INTRDRP PTR INIT((ADDR('××
         WORK2××'.S99INTRDR))),';
    END;
 /* NOW TO ADD A DUMMY ELEMENT TO THE END TO SET HIGH BIT
    IN TEXT PTR INDICATING END OF LIST */
 IF PARMSET(PERM) THEN
    DO;
    RTNR=RTNR××
         '3 S99CONVERT,
              4 S99KEY FIXED BIN INIT(82),
              4 S99COUNT FIXED BIN INIT(0),';
    RTNR2=RTNR2××
         '4 S99ENDP BIT(32) INIT((''1''B×UNSPEC(ADDR('××
              WORK2××'.S99CONVERT))));';
    END;
 ELSE
    DO;
    RTNR=RTNR××
         '3 S99CONVERT,
              4 S99KEY FIXED BIN INIT(83),
              4 S99COUNT FIXED BIN INIT(0),';
    RTNR2=RTNR2××
         '4 S99ENDP BIT(32) INIT((''1''B×UNSPEC(ADDR('××
              WORK2××'.S99CONVERT))));';
    END;
  IF MF='L' THEN GO TO RETURN;
  ELSE GO TO SVCCALL;
 MFECODE:
  /***************************************************/
  /*  MF(E) CODE TO SET PARAMETER VALUES INTO        */
  /*  STRUCTURE BUILT BY MF(L). CALLS DYNALLOC3      */
  /*  PREPROCESSOR PROCEDURE FOR COMMON ASSISTANCE   */
  /***************************************************/
 IF PARMSET(FILE) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99FILE',FILE,1,1,8,'C');
 IF PARMSET(DSN) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99DSN',DSN,2,1,44,'C');
 IF PARMSET(MEMBER) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99MEMBER',MEMBER,3,1,8,'C');
 IF PARMSET(TRK) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99TRK',TRK,7,0);
 IF PARMSET(CYL) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99CYL',CYL,8,0);
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99UNIT',UNIT,21,1,8,'C');
 IF PARMSET(SYSOUT) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99SYSOUT',SYSOUT,24,1,1,'C');
 IF PARMSET(FORMS) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99FORMS',FORMS,26,1,4,'C');
 IF PARMSET(COPIES) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99COPIES',COPIES,29,1,1,'F');
 IF PARMSET(POSITION) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99POSITION',POSITION,31,1,2,'F');
 IF PARMSET(PROTECT) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99PROTECT','99350',34,1,5,'C');
 IF PARMSET(DUMMY) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99DUMMY',DUMMY,36,0);
 IF PARMSET(TERMINAL) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99TERMINAL',TERMINAL,40,0);
 IF PARMSET(FCB) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'S99FCB',FCB,37,1,4,'C');
 IF PARMSET(UCS) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'S99UCS',UCS,41,1,4,'C');
 IF PARMSET(DEST) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'S99DEST',DEST,88,1,8,'C');
 IF PARMSET(SPACE1) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99SPACE1',SPACE1,10,1,3,'F');
 IF PARMSET(SPACE2) THEN
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99SPACE2',SPACE2,11,1,3,'F');
 IF PARMSET(DISP1) THEN
    DO;
    WORK='00000000';
    IF DISP1='SHR' THEN WORK='00001000';
    ELSE IF DISP1='NEW' THEN WORK='00000100';
    ELSE IF DISP1='MOD' THEN WORK='00000010';
    ELSE IF DISP1='OLD' THEN WORK='00000001';
    ELSE NOTE('INVALID DISP1 VALUE',8);
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99DISP1',WORK,4,1,1,'B');
    END;
 IF PARMSET(DISP2) THEN
    DO;
    WORK='00000000';
    IF DISP2='KEEP' THEN WORK='00001000';
    ELSE IF DISP2='DELETE' THEN WORK='00000100';
    ELSE IF DISP2='CATLG' THEN WORK='00000010';
    ELSE IF DISP2='UNCATLG' THEN WORK='00000001';
    ELSE NOTE('INVALID DISP2 VALUE',8);
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99DISP2',WORK,5,1,1,'B');
    END;
 IF PARMSET(DISP3) THEN
    DO;
    WORK='00000000';
    IF DISP3='KEEP' THEN WORK='00001000';
    ELSE IF DISP3='DELETE' THEN WORK='00000100';
    ELSE IF DISP3='CATLG' THEN WORK='00000010';
    ELSE IF DISP3='UNCATLG' THEN WORK='00000001';
    ELSE NOTE('INVALID DISP3 VALUE',8);
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99DISP3',WORK,6,1,1,'B');
    END;
 IF PARMSET(LABEL) THEN
    DO;
    WORK='00000000';
    IF LABEL='SL' THEN WORK='00000010';
    ELSE IF LABEL='NSL' THEN WORK='00000100';
    ELSE IF LABEL='NL' THEN WORK='00000001';
    ELSE IF LABEL='BLP' THEN WORK='00010000';
    ELSE IF LABEL='LTM' THEN WORK='00100001';
    ELSE IF LABEL='SUL' THEN WORK='00001000';
    ELSE IF LABEL='AL' THEN WORK='01000000';
    ELSE IF LABEL='AUL' THEN WORK='01001000';
    ELSE NOTE('INVALID LABEL VALUE',8);
    RTNR=RTNR××DYNALLOC3(WORK2××'.S99LABEL',WORK,30,1,1,'B');
    END;
    DO;
    WORK='00000000';
    IF TRTCH='E' THEN WORK='00100011';
    ELSE IF TRTCH='T' THEN WORK='00111011';
    ELSE IF TRTCH='C' THEN WORK='00010011';
    ELSE IF TRTCH='ET' THEN WORK='00101011';
    ELSE NOTE('INVALID TRTCH VALUE',8);
    RTNR=RTNR××DYNALLOC3('S99TRTCH',WORK,78,1,1,'B');
    END;
 SVCCALL:
  /***********************************************************/
  /* NOW TO ISSUE SVC 99 AND ANALYZE THE RETURN. THIS CODE   */
  /* IS BYPASSED FOR MF=L.                                   */
  /***********************************************************/
  RTNR2=RTNR2×× '  CALL SVC(99,REGS);';
  IF PARMSET(DDNRTN) THEN
        DO;
        IF SUBSTR(DDNRTN,1,1)^='@' THEN
             NOTE('DDNRTN DOES NOT REFER TO CHAR VARIABLE',8);
        RTNR2=RTNR2××SUBSTR(DDNRTN,2)××'='××
               WORK2××'.S99DDNRTN.S99DATA;';
        END;
    RTNR2=RTNR2××' IF R15>0 THEN DO;';
  RTNR2=RTNR2××' CALL S99FAIL('××WORK2××',R15,MSG);'××ONERROR××';
    PUT EDIT(MSG)(COL(1),A); SIGNAL ERROR;';
    RTNR2=RTNR2××' END;
  END;';
  RETURN:
  IF MF^='E' THEN RTNR=RTNR××' 3 S99PTRS, '××RTNR2;
  ELSE RTNR=RTNR××RTNR2;
  RETURN(RTNR);
 % END;
 %SKIP(5);
 % DYNALLOC2:PROC(NAME,VAL,KEY,COUNT,LEN,TYPE) RETURNS(CHAR);
  /* SUBSIDIARY PREPROCESSOR PROCEDURE FOR DYNALLOC.               */
  /* GENERATES A DYNAMIC ALLOCATION TEXT UNIT AS A LEVEL           */
  /* 3 SUBSTRUCTURE ELEMENT AND RETURNS IT TO THE CALLER.          */
  /* THE STRUCTURE CONTAINS:                                       */
  /*    3 'NAME',                                                  */
  /*        4 S99KEY FIXED BIN,   /* NUMBER CHARACTERISTIC OF THE  */
  /*                              /* KEYWORD BEING SPECIFIED.      */
  /*        4 S99COUNT FIXED BIN, /* 0 FOR A LOGICAL TEXT UNIT     */
  /*                              /* 1 FOR ALL OTHER TEXT UNITS    */
  /*        4 S99LEN FIXED BIN,   /* OMITTED IF S99COUNT=0,        */
  /*                              /* OTHERWISE THE LENGTH IN BYTES */
  /*                              /* THE FOLLOWING DATA.           */
  /*        4 S99DATA ??????      /* THE CHARACTER, NUMERIC, OR BIN*/
  /*                              /* DATA REQUIRED FOR THE GIVEN   */
  /*                              /* KEYWORD.                      */
  /* SEE SPL:JOB MANAGMENT FOR AN EXHAUSTIVE DISCUSSION OF TEXT    */
  /* UNITS.                                                        */
 DCL (NAME,VAL,TYPE,RTNR) CHAR;
 DCL (KEY,COUNT,LEN) FIXED;
 RTNR=' 3 '××NAME××',
    4 S99KEY FIXED BIN INIT('××KEY××'),
     4 S99COUNT FIXED BIN INIT('××COUNT××'),';
 IF COUNT=0 THEN RETURN(RTNR);
 IF TYPE='C' THEN
    IF SUBSTR(VAL,1,1)^='@'
    THEN RTNR=RTNR××
              '4 S99LEN FIXED BIN INIT('××LENGTH(VAL)××'),
               4 S99DATA CHAR('××LEN××') INIT('''××VAL××'''),';
         ELSE RTNR=RTNR××
              '4 S99LEN FIXED BIN INIT((LENGTH('××SUBSTR(VAL,2)××'))),
               4 S99DATA CHAR('××LEN××') INIT(('××SUBSTR(VAL,2)××')),';
 ELSE IF TYPE='F' THEN
    RTNR=RTNR××
         '4 S99LEN FIXED BIN INIT('××LEN××'),
         4 S99DATA FIXED BIN(31) INIT(('××VAL××'*256**(4-'××LEN××'))),';
 ELSE IF TYPE='B' THEN
    RTNR=RTNR××
         '4 S99LEN FIXED BIN INIT(1),
     4 S99DATA BIT(8) INIT('''××VAL××'''B),';
 RETURN(RTNR);
 % END;
 %SKIP(5);
 % DYNALLOC3:PROC(NAME,VAL,KEY,COUNT,LEN,TYPE) RETURNS(CHAR);
  /* SUBSIDIARY PREPROCESSOR PROCEDURE FOR DYNALLOC. MODIFIES      */
  /* ONE TEXT UNIT FOR MF(E) VERSION OF THE MACRO. GENERATES       */
  /* AN ASSIGNMENT STATEMENT WHERE THE TARGET IS THE VARIABLE      */
  /* NAME FROM 'ID' AND THE KEYWORD NAME (EXAMPLE: FOR             */
  /* ID(XXXX) AND YYY(DATA), THE ASSIGNMENT IS                     */
  /*  XXXX.S99YYY.S99LEN= ????;                                    */
  /*  XXXX.S99YYY.S99DATA= ????;                                   */
  /* THE FORM OF THE SOURCE DEPENDS ON THE TYPE OF KEYWORD AND     */
  /* THE PRESENCE OF AN "@" IN CHARACTER KEYWORDS.                 */
 DCL (NAME,VAL,TYPE,RTNR) CHAR;
 DCL (KEY,COUNT,LEN) FIXED;
 IF COUNT=0 THEN NOTE(SUBSTR(NAME,INDEX(NAME,'.S99')+4)
               ××' ILLEGAL FOR MF(E)',8);
 RTNR='';
 IF TYPE='C' THEN
    IF SUBSTR(VAL,1,1)^='@'
    THEN RTNR=RTNR××
              NAME××'.S99LEN ='××LENGTH(VAL)××';'××
               NAME××'.S99DATA ='''××VAL××''';';
         ELSE RTNR=RTNR××
              NAME××'.S99LEN =LENGTH('××SUBSTR(VAL,2)××');'××
               NAME××'.S99DATA ='××SUBSTR(VAL,2)××';';
 ELSE IF TYPE='F' THEN
    RTNR=RTNR××
          NAME××'.S99DATA ='××VAL××'*256**(4-'××LEN××');';
 ELSE IF TYPE='B' THEN
    RTNR=RTNR××
     NAME××'.S99DATA ='''××VAL××'''B;';
 RETURN(RTNR);
 % END;
 %ACTIVATE DYNALLOC;
./       ADD   NAME=IHALCCA
*/********************************************************************/
*/* DISCLAIMER:                                                      */
*/*     THIS IBM MAPPING MACRO HAS BEEN CONVERTED FOR USE            */
*/* IN PLIX BY                                                       */
*/*     HOWARD GILBERT                                               */
*/*     YALE COMPUTER CENTER                                         */
*/*     175 WHITNEY AVE                                              */
*/*     NEW HAVEN, CONN. 06520                                       */
*/*     203 432-4080                                                 */
*/* THE AUTHOR HAS ONLY VERIFIED THE ACCURACY OF THE CONVERSION      */
*/* FOR THOSE FIELDS REQUIRED BY LOCALLY WRITTEN CODE. THE MACRO     */
*/* IS MADE AVAILABLE TO SUPPORT SUCH CODE AND 'AS IS' FOR OTHER     */
*/* APPLICATIONS REQUIRED BY POTENTIAL USERS.                        */
*/*                                                                  */
*/* VERSION DATE: MAY 1,1977                                         */
*/********************************************************************/
*
*        %GOTO LCCAL1;  /*
         MACRO
         IHALCCA &DSECT=YES   */
*%LCCAL1 : ;
*
*/* **************************************************************** */
*/*                                                                  */
*/*            LOGICAL CONFIGURATION COMMUNICATION AREA              */
*/*                                                                  */
*/*  OS/VS2 RELEASE 3, 01/28/75, LEVEL=2                             */
*/*                                                                  */
*/*  METHOD OF ACCESS                                                */
*/*      BAL  - DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.      */
*/*             USING ON LCCA GIVES ADDRESSABILITY FOR ALL SYMBOLS.  */
*/*      PL/S - DCL LCCAPTR PTR                                      */
*/*                                                                  */
*/* **************************************************************** */
*%GOTO LCCAL2;  /*
         SPACE 1
         AIF   ('&DSECT' EQ 'NO').LCCA010
LCCA     DSECT
         AGO   .LCCA020
.LCCA010 ANOP
         DS    0D
LCCA     EQU   *
.LCCA020 ANOP
LCCALCCA DC    CL4'LCCA' -    CONTROL BLOCK ACRONYM IN EBCDIC
LCCACPUA DC    H'0' -         LOGICAL CPU ADDRESS
LCCARV77 DC    H'0' -         RESERVED
LCCAPGR1 DC    16F'0' -       PROGRAM CHECK FLIH REGISTER SAVE AREA 1
LCCAPGR2 DC    16F'0' -       PROGRAM CHECK FLIH REGISTER SAVE AREA 2
LCCAPPSW DC    XL8'00' -      PROGRAM CHECK FLIH PSW SAVE AREA
LCCAPINT DC    F'0' -         PROGRAM CHECK FLIH ILC AND INTERRUPT
*                             CODE SAVE AREA
LCCAPVAD DC    F'0' -         TRANSLATION EXCEPTION ADDRESS SAVE AREA
LCCAMCR1 DC    F'0' -         MASTER MEMORY'S STOR REGISTER VALUE
LCCACR0  DC    F'0' -         WORK AREA FOR TESTING BITS IN CONTROL
*                             REGISTER 0
LCCAXGR1 DC    16F'0' -       EXTERNAL FLIH REGISTER SAVE AREA 1
LCCAXGR2 DC    16F'0' -       EXTERNAL FLIH REGISTER SAVE AREA 2
LCCAXGR3 DC    16F'0' -       EXTERNAL FLIH REGISTER SAVE AREA 3
LCCARSGR DC    16F'0' -       RESTART FLIH REGISTER SAVE AREA
LCCAR126 DC    F'0' -         RESERVED  (MDC300)               @Z30AQ9A
LCCAR127 DC    F'0' -         RESERVED  (MDC300)               @Z30AQ9A
LCCAR128 DC    F'0' -         RESERVED  (MDC300)               @Z30AQ9A
LCCAR129 DC    F'0' -         RESERVED  (MDC300)               @Z30AQ9A
LCCAR130 DC    F'0' -         RESERVED  (MDC300)               @Z30AQ9A
LCCAR131 DC    F'0' -         RESERVED  (MDC300)               @Z30AQ9A
LCCAR132 DC    F'0' -         RESERVED  (MDC300)               @Z30AQ9A
LCCAR133 DC    F'0' -         RESERVED  (MDC300)               @Z30AQ9A
LCCAGPGR DC    16F'0' -       I/O AND SVC FLIH REGISTER SAVE AREA
LCCAIOPS DC    XL8'00' -      I/O FLIH PSW SAVE AREA
LCCAIHRC DS    0BL4 -         GENERAL FLIH RECURSION FLAGS
LCCAIHR1 DC    XL1'00' -      FIRST BYTE OF LCCAIHRC
LCCAXRC1 EQU   X'80' -        EXTERNAL FLIH RECURSION BIT 1
LCCAXRC2 EQU   X'40' -        EXTERNAL FLIH RECURSION BIT 2
LCCAPDAT EQU   X'20' -        PROGRAM CHECK FLIH DAT RECURSION BIT
LCCAPSG1 EQU   X'10' -        PROGRAM CHECK FLIH SEGMENT RECURSION BIT
LCCAPPIE EQU   X'08' -        PROGRAM CHECK FLIH SPIE PROCESS
*                             RECURSION BIT
LCCARV01 EQU   X'04',,C'X' -  RESERVED
LCCARV02 EQU   X'02',,C'X' -  RESERVED
LCCARV03 EQU   X'01',,C'X' -  RESERVED
LCCAIHR2 DC    XL1'00' -      SECOND BYTE OF LCCAIHRC
LCCARV04 EQU   X'80',,C'X' -  RESERVED
LCCARV05 EQU   X'40',,C'X' -  RESERVED
LCCARV06 EQU   X'20',,C'X' -  RESERVED
LCCARV07 EQU   X'10',,C'X' -  RESERVED
LCCARV08 EQU   X'08',,C'X' -  RESERVED
LCCARV09 EQU   X'04',,C'X' -  RESERVED
LCCARV10 EQU   X'02',,C'X' -  RESERVED
LCCARV11 EQU   X'01',,C'X' -  RESERVED
LCCAIHR3 DC    XL1'00' -      THIRD BYTE OF LCCAIHRC
LCCARV12 EQU   X'80',,C'X' -  RESERVED
LCCARV13 EQU   X'40',,C'X' -  RESERVED
LCCARV14 EQU   X'20',,C'X' -  RESERVED
LCCARV15 EQU   X'10',,C'X' -  RESERVED
LCCARV16 EQU   X'08',,C'X' -  RESERVED
LCCARV17 EQU   X'04',,C'X' -  RESERVED
LCCARV18 EQU   X'02',,C'X' -  RESERVED
LCCARV19 EQU   X'01',,C'X' -  RESERVED
LCCAIHR4 DC    XL1'00' -      FOURTH BYTE OF LCCAIHRC
LCCARV20 EQU   X'80',,C'X' -  RESERVED
LCCARV21 EQU   X'40',,C'X' -  RESERVED
LCCARV22 EQU   X'20',,C'X' -  RESERVED
LCCARV23 EQU   X'10',,C'X' -  RESERVED
LCCARV24 EQU   X'08',,C'X' -  RESERVED
LCCARV25 EQU   X'04',,C'X' -  RESERVED
LCCARV26 EQU   X'02',,C'X' -  RESERVED
LCCARV27 EQU   X'01',,C'X' -  RESERVED
LCCASPIN DS    0BL4 -         PROCESSOR IS SPINNING INDICATORS
LCCASPN1 DC    XL1'00' -      FIRST BYTE OF LCCASPIN
LCCAPTLB EQU   X'80' -        PTLB PROCESSOR SPIN BIT
LCCASIGP EQU   X'40' -        SIGP PROCESSOR SPIN BIT
LCCALOCK EQU   X'20' -        LOCK MANAGER SPIN BIT
LCCATSPN EQU   X'10' -        SIMULATES SPIN FOR TIMER SUPERVISOR AT
*                             VARY TIME
LCCARSTR EQU   X'08' -        USED BY A PROGRAM SPINNING FOR THE
*                             RESTART RESOURCE                   MDC035
LCCAMFIO EQU   X'04' -        MF/1 IOS INITIALIZATION SPIN BIT -
*                             USED BY MF/1 EMERGENCY SIGNAL (EMS) AND
*                             MALFUNCTION ALERT (MFA)            MDC036
LCCARV30 EQU   X'02',,C'X' -  RESERVED
LCCARV31 EQU   X'01',,C'X' -  RESERVED
LCCASPN2 DC    XL1'00' -      SECOND BYTE OF LCCASPIN
LCCARV32 EQU   X'80',,C'X' -  RESERVED
LCCARV33 EQU   X'40',,C'X' -  RESERVED
LCCARV34 EQU   X'20',,C'X' -  RESERVED
LCCARV35 EQU   X'10',,C'X' -  RESERVED
LCCARV36 EQU   X'08',,C'X' -  RESERVED
LCCARV37 EQU   X'04',,C'X' -  RESERVED
LCCARV38 EQU   X'02',,C'X' -  RESERVED
LCCARV39 EQU   X'01',,C'X' -  RESERVED
LCCASPN3 DC    XL1'00' -      THIRD BYTE OF LCCASPIN
LCCARV40 EQU   X'80',,C'X' -  RESERVED
LCCARV41 EQU   X'40',,C'X' -  RESERVED
LCCARV42 EQU   X'20',,C'X' -  RESERVED
LCCARV43 EQU   X'10',,C'X' -  RESERVED
LCCARV44 EQU   X'08',,C'X' -  RESERVED
LCCARV45 EQU   X'04',,C'X' -  RESERVED
LCCARV46 EQU   X'02',,C'X' -  RESERVED
LCCARV47 EQU   X'01',,C'X' -  RESERVED
LCCASPN4 DC    XL1'00' -      FOURTH BYTE OF LCCASPIN
LCCARV48 EQU   X'80',,C'X' -  RESERVED
LCCARV49 EQU   X'40',,C'X' -  RESERVED
LCCARV50 EQU   X'20',,C'X' -  RESERVED
LCCARV51 EQU   X'10',,C'X' -  RESERVED
LCCARV52 EQU   X'08',,C'X' -  RESERVED
LCCARV53 EQU   X'04',,C'X' -  RESERVED
LCCARV54 EQU   X'02',,C'X' -  RESERVED
LCCARV55 EQU   X'01',,C'X' -  RESERVED
LCCAESSA DC    F'0' -         EMERGENCY SIGNAL SLIH SAVE AREA FOR
*                             EXTERNAL FLIH RETURN ADDRESS       MDC012
LCCAASCP DC    F'0' -         SAVE AREA FOR ISSUING PROCESSOR'S PCCA
*                             ADDRESS                            MDC013
LCCACPUS DC    A(0) -         POINTER TO CPU WORK/SAVE AREA VECTOR
*                             TABLE
LCCADSF1 DC    XL1'00' -      DISPATCHER STATUS INDICATOR BYTE 1
LCCAACR  EQU   X'80' -        ACR IN PROGRESS
LCCAVCPU EQU   X'40' -        VARY CPU IN PROGRESS
LCCADSS  EQU   X'20' -        IF ON, INDICATES TO THE DISPATCHER THAT
*                             DSS IS WAITING TO BE ACTIVATED AND A
*                             MEMORY SWITCH MUST BE PERFORMED    MDC002
LCCATIMR EQU   X'10' -        CPU'S TOD CLOCK IS TO BE OR IS BEING
*                             SYNCHRONIZED                       MDC011
LCCARV58 EQU   X'08',,C'X' -  RESERVED
LCCARV59 EQU   X'04',,C'X' -  RESERVED
LCCARV60 EQU   X'02',,C'X' -  RESERVED
LCCARV61 EQU   X'01',,C'X' -  RESERVED
LCCADSF2 DC    XL1'00' -      DISPATCHER STATUS INDICATOR BYTE 2
LCCASRBM EQU   X'80' -        SRB MODE INDICATOR
LCCAGSRB EQU   X'40' -        GLOBAL SRB-MODE INDICATOR
LCCADSPL EQU   X'20' -        LOCAL LOCK GOTTEN BY DISPATCHER    MDC040
LCCADSRW EQU   X'10' -        DISPATCHER HAS DISPATCHED READY WORK
*                                                                MDC046
LCCARV64 EQU   X'08',,C'X' -  RESERVED
LCCARV65 EQU   X'04',,C'X' -  RESERVED
LCCARV66 EQU   X'02',,C'X' -  RESERVED
LCCARV67 EQU   X'01',,C'X' -  RESERVED
LCCAPSMK DC    XL1'00' -      STORE AREA FOR FLIH'S STOSM INSTRUCTION
LCCARV68 DC    XL1'00' -      RESERVED
         DS    0F -           ALIGN LCCASPSA TO FULL WORD
LCCASPSA DS    0CL48 -        REGISTER SAVE AREA FOR INTER-CPU
*                             COMMUNICATION
LCCADSR2 DC    F'0' -         IEAVEDR'S CALLER'S REGISTER 2      MDC014
LCCADSR3 DC    F'0' -         IEAVEDR'S CALLER'S REGISTER 3      MDC015
LCCADSR4 DC    F'0' -         IEAVEDR'S CALLER'S REGISTER 4      MDC016
LCCADSR5 DC    F'0' -         IEAVEDR'S CALLER'S REGISTER 5      MDC017
LCCARPR2 DC    F'0' -         IEAVERP'S CALLER'S REGISTER 2      MDC018
LCCARPR3 DC    F'0' -         IEAVERP'S CALLER'S REGISTER 3      MDC019
LCCARPR4 DC    F'0' -         IEAVERP'S CALLER'S REGISTER 4      MDC020
LCCARPR5 DC    F'0' -         IEAVERP'S CALLER'S REGISTER 5      MDC021
LCCARIR2 DC    F'0' -         IEAVERI'S CALLER'S REGISTER 2      MDC022
LCCARIR3 DC    F'0' -         IEAVERI'S CALLER'S REGISTER 3      MDC023
LCCARIR4 DC    F'0' -         IEAVERI'S CALLER'S REGISTER 4      MDC024
LCCARIR5 DC    F'0' -         IEAVERI'S CALLER'S REGISTER 5      MDC025
         DS    0D -           ALIGN LCCASTOD TO DOUBLE WORD
LCCASTOD DC    XL8'00' -      TOD AT LAST TASK TIME INTERVAL
         DS    0D -           ALIGN LCCADTOD TO DOUBLE WORD
LCCADTOD DC    XL8'00' -      TOD VALUE WHEN TCB IS DISPATCHED
         DS    0D -           ALIGN LCCAITOD TO DOUBLE WORD
LCCAITOD DC    XL8'00' -      TOD VALUE WHEN I/O OR EXTERNAL INTERRUPT
         DS    0D -           ALIGN LCCAWTIM TO DOUBLE WORD
LCCAWTIM DC    XL8'00' -      ACCUMULATED CPU WAIT TIME
LCCADSS1 DC    3F'0' -        GENERAL REGISTERS 15-1 AS SAVED BY DSS
*                             PROGRAM OR SVC INTERRUPT HANDLER   MDC026
LCCADSS2 DC    3F'0' -        GENERAL REGISTERS 15-1 AS SAVED BY DSS
*                             I/O OR EXTERNAL INTERRUPT HANDLER  MDC027
LCCADSS3 DC    3F'0' -        GENERAL REGISTERS 15-1 AS SAVED BY DSS
*                             MACHINE CHECK INTERRUPT HANDLER    MDC028
LCCADSSC DC    2F'0' -        DSS CONTROL REGISTERS 0 AND 1 SAVE
*                             AREA                               MDC029
LCCADSSR DC    F'0' -         DSS CONTROL REGISTER 14 SAVE AREA  MDC030
LCCASRBJ DC    F'0' -         SUSPENDED SERVICE REQUEST BLOCK (SRB)
*                             JOURNAL WORD USED BY SETLOCK       MDC043
LCCADCPU DC    A(0) -         VIRTUAL ADDRESS OF LCCA OF FAILING CPU
LCCARCPU DC    A(0) -         VIRTUAL ADDRESS OF LCCA OF RECOVERING CPU
LCCACRLC DC    F'0' -         ACR SAVE AREA FOR HIGHEST LOCK HELD
*                             INDICATOR
LCCALCR0 DC    F'0' -         SAVE AREA FOR CONTROL REGISTER 0 FOR
*                             SETLOCK
LCCACRFL DC    XL1'00' -      ACR FLAGS
LCCACRTM EQU   X'80' -        RTM ENTRY BIT
LCCACLMS EQU   X'40' -        PROCESS SUSPENDED
LCCARV69 EQU   X'20',,C'X' -  RESERVED
LCCACRRT EQU   X'10' -        FRR EXIT
LCCACRIN EQU   X'08' -        ENTRY TYPE = ACR
LCCACRLM EQU   X'04' -        ENTRY TYPE = ACRLM
LCCACRDP EQU   X'02' -        ENTRY TYPE = ACRDISP
LCCACRST EQU   X'01' -        SYSTERM TERMINATION EXIT FLAG      MDC037
LCCALKFG DC    XL1'00' -      LOCK FLAG BYTE                     MDC005
LCCALKDP EQU   X'80' -        DISPATCHER LOCK OBTAINED BY SETLOCK
*                                                                MDC039
LCCALKSA EQU   X'40' -        STORAGE ALLOCATION LOCK OBTAINED BY
*                             SETLOCK                            MDC041
LCCALKAQ EQU   X'20' -        ASCB BEING QUEUED TO THE SUSPEND QUEUE
*                             BY SETLOCK                         MDC042
LCCALKRD EQU   X'10' -        THIS IS A LOCK MANAGER RELEASE DISABLED
*                             REQUEST                            MDC047
LCCARV84 EQU   X'08',,C'X' -  RESERVED
LCCARV85 EQU   X'04',,C'X' -  RESERVED
LCCARV86 EQU   X'02',,C'X' -  RESERVED
LCCARV87 EQU   X'01',,C'X' -  RESERVED
LCCARV88 DC    XL1'00' -      RESERVED
LCCAPINV DC    F'0' -         SAVE AREA FOR CONTROL REGISTER WHEN OPEN
*                             WINDOW INTERFACE TO EXTERNAL FLIH IS
*                             INVOKED BY PTLB PROCESSOR
LCCARV78 DC    F'0' -         RESERVED
         DS    0D -           ALIGN LCCALWTM TO DOUBLE WORD      MDC001
LCCALWTM DC    XL8'00' -      VALUE OF LCCAWTIM AT THE END OF A
*                             MEASUREMENT INTERVAL               MDC001
LCCAICR0 DC    F'0' -         SAVE AREA FOR CONTROL REGISTER 0 FOR
*                             IPC                                MDC007
LCCAECSA DC    F'0' -         EXTERNAL CALL'S SLIH SAVE AREA FOR
*                             EXTERNAL FLIH RETURN REGISTER      MDC008
         DS    0D -           ALIGN LCCASRBF TO DOUBLE WORD      MDC009
LCCASRBF DS    0CL8 -         SRB FIELDS                         MDC009
LCCASAFN DC    H'0' -         CPU AFFINITY IF IN SRB MODE        MDC003
LCCAPGTA DC    XL6'00' -      ASID/TCB IF IN SRB MODE            MDC004
         DS    0D -           ALIGN LCCAIRTP TO DOUBLE WORD    @ZA02390
LCCAIRTP DC    XL8'00' -      PREFIX TO IOS RECOVERY TABLE
*                             (MDC302)                         @ZA02390
LCCAIRT  DC    XL128'00' -    IOS RECOVERY TABLE DESCRIBING ACTIVE
*                             REQUESTS, LOCKS, ETC.              MDC010
LCCASMQJ DC    F'0' -         GLOBAL SERVICE MANAGER QUEUE (GSMQ) AND
*                             LOCAL SERVICE MANAGER QUEUE (LSMQ)
*                             JOURNAL WORD USED BY DISPATCHER AND
*                             SCHEDULE                           MDC044
LCCASPLJ DC    F'0' -         GLOBAL SYSTEM PRIORITY LIST (GSPL) AND
*                             LOCAL SYSTEM PRIORITY LIST (LSPL) JOURNAL
*                             WORD USED BY DISPATCHER            MDC045
LCCAESS2 DC    F'0' -         EMERGENCY SIGNAL SLIH SAVE AREA FOR
*                             EXTERNAL FLIH'S RETURN ADDRESS ON
*                             RECURSIVE ENTRIES  (MDC048)        YM2608
LCCAR103 DC    F'0' -         RESERVED
         DS    0D -           ALIGN LCCADRT1 TO DOUBLE WORD      YM3563
LCCADRT1 DC    XL8'00' -      TIME OF DAY (TOD) ON FIRST SIGP BUSY
*                             CONDITION  (MDC049)                YM3563
         DS    0D -           ALIGN LCCADRT2 TO DOUBLE WORD      YM3563
LCCADRT2 DC    XL8'00' -      TIME OF DAY (TOD) ON SUBSEQUENT SIGP BUSY
*                             CONDITION  (MDC050)                YM3563
LCCASGPR DC    16F'0' -       SVC FLIH GENERAL REGISTER SAVE AREA
*                             (MDC301)                         @ZA02598
LCCAR124 DC    F'0' -         RESERVED
LCCAR125 DC    F'0' -         RESERVED
         MEND  , -   */
*%LCCAL2 : ;
*
*DECLARE
*  1 LCCA     BASED(LCCAPTR)  ,
*   2 LCCALCCA    CHAR(4) ,     /* CONTROL BLOCK ACRONYM IN
*                                           EBCDIC                   */
*   2 LCCACPUA    FIXED(15),               /* LOGICAL CPU ADDRESS    */
*   2 LCCARV77    FIXED(15),             /* RESERVED                 */
*   2 LCCAPGR1  (16) FIXED(31),          /* PROGRAM CHECK FLIH
*                                           REGISTER SAVE AREA 1     */
*   2 LCCAPGR2  (16) FIXED(31),          /* PROGRAM CHECK FLIH
*                                           REGISTER SAVE AREA 2     */
*   2 LCCAPPSW    CHAR(8) ,    /* PROGRAM CHECK FLIH PSW
*                                           SAVE AREA                */
*   2 LCCAPINT    FIXED(31),             /* PROGRAM CHECK FLIH ILC
*                                           AND INTERRUPT CODE
*                                           SAVE AREA                */
*   2 LCCAPVAD    FIXED(31),             /* TRANSLATION EXCEPTION
*                                           ADDRESS SAVE AREA        */
*   2 LCCAMCR1    FIXED(31),             /* MASTER MEMORY'S STOR
*                                           REGISTER VALUE           */
*   2 LCCACR0     FIXED(31),             /* WORK AREA FOR TESTING BITS
*                                           IN CONTROL REGISTER 0    */
*   2 LCCAXGR1  (16) FIXED(31),          /* EXTERNAL FLIH REGISTER
*                                           SAVE AREA 1              */
*   2 LCCAXGR2  (16) FIXED(31),          /* EXTERNAL FLIH REGISTER
*                                           SAVE AREA 2              */
*   2 LCCAXGR3  (16) FIXED(31),          /* EXTERNAL FLIH REGISTER
*                                           SAVE AREA 3              */
*   2 LCCARSGR  (16) FIXED(31),          /* RESTART FLIH REGISTER
*                                           SAVE AREA                */
*   2 LCCAR126    FIXED(31),             /* RESERVED
*                                           (MDC300)         @Z30AQ9A*/
*   2 LCCAR127    FIXED(31),             /* RESERVED
*                                           (MDC300)         @Z30AQ9A*/
*   2 LCCAR128    FIXED(31),             /* RESERVED
*                                           (MDC300)         @Z30AQ9A*/
*   2 LCCAR129    FIXED(31),             /* RESERVED
*                                           (MDC300)         @Z30AQ9A*/
*   2 LCCAR130    FIXED(31),             /* RESERVED
*                                           (MDC300)         @Z30AQ9A*/
*   2 LCCAR131    FIXED(31),             /* RESERVED
*                                           (MDC300)         @Z30AQ9A*/
*   2 LCCAR132    FIXED(31),             /* RESERVED
*                                           (MDC300)         @Z30AQ9A*/
*   2 LCCAR133    FIXED(31),             /* RESERVED
*                                           (MDC300)         @Z30AQ9A*/
*   2 LCCAGPGR  (16) FIXED(31),          /* I/O AND SVC FLIH REGISTER
*                                           SAVE AREA                */
*   2 LCCAIOPS    CHAR(8) ,    /* I/O FLIH PSW SAVE AREA   */
*   2 LCCAIHRC     ,     /* GENERAL FLIH RECURSION
*                                           FLAGS                    */
*    3 LCCAIHR1    ,               /* FIRST BYTE OF LCCAIHRC   */
*     4 LCCAXRC1 BIT(1),                 /* EXTERNAL FLIH RECURSION
*                                           BIT 1                    */
*     4 LCCAXRC2 BIT(1),                 /* EXTERNAL FLIH RECURSION
*                                           BIT 2                    */
*     4 LCCAPDAT BIT(1),                 /* PROGRAM CHECK FLIH DAT
*                                           RECURSION BIT            */
*     4 LCCAPSG1 BIT(1),                 /* PROGRAM CHECK FLIH
*                                           SEGMENT RECURSION BIT    */
*     4 LCCAPPIE BIT(1),                 /* PROGRAM CHECK FLIH SPIE
*                                           PROCESS RECURSION BIT    */
*     4 LCCARV01 BIT(1),                 /* RESERVED                 */
*     4 LCCARV02 BIT(1),                 /* RESERVED                 */
*     4 LCCARV03 BIT(1),                 /* RESERVED                 */
*    3 LCCAIHR2    ,               /* SECOND BYTE OF LCCAIHRC  */
*     4 LCCARV04 BIT(1),                 /* RESERVED                 */
*     4 LCCARV05 BIT(1),                 /* RESERVED                 */
*     4 LCCARV06 BIT(1),                 /* RESERVED                 */
*     4 LCCARV07 BIT(1),                 /* RESERVED                 */
*     4 LCCARV08 BIT(1),                 /* RESERVED                 */
*     4 LCCARV09 BIT(1),                 /* RESERVED                 */
*     4 LCCARV10 BIT(1),                 /* RESERVED                 */
*     4 LCCARV11 BIT(1),                 /* RESERVED                 */
*    3 LCCAIHR3    ,               /* THIRD BYTE OF LCCAIHRC   */
*     4 LCCARV12 BIT(1),                 /* RESERVED                 */
*     4 LCCARV13 BIT(1),                 /* RESERVED                 */
*     4 LCCARV14 BIT(1),                 /* RESERVED                 */
*     4 LCCARV15 BIT(1),                 /* RESERVED                 */
*     4 LCCARV16 BIT(1),                 /* RESERVED                 */
*     4 LCCARV17 BIT(1),                 /* RESERVED                 */
*     4 LCCARV18 BIT(1),                 /* RESERVED                 */
*     4 LCCARV19 BIT(1),                 /* RESERVED                 */
*    3 LCCAIHR4    ,               /* FOURTH BYTE OF LCCAIHRC  */
*     4 LCCARV20 BIT(1),                 /* RESERVED                 */
*     4 LCCARV21 BIT(1),                 /* RESERVED                 */
*     4 LCCARV22 BIT(1),                 /* RESERVED                 */
*     4 LCCARV23 BIT(1),                 /* RESERVED                 */
*     4 LCCARV24 BIT(1),                 /* RESERVED                 */
*     4 LCCARV25 BIT(1),                 /* RESERVED                 */
*     4 LCCARV26 BIT(1),                 /* RESERVED                 */
*     4 LCCARV27 BIT(1),                 /* RESERVED                 */
*   2 LCCASPIN     ,     /* PROCESSOR IS SPINNING
*                                           INDICATORS               */
*    3 LCCASPN1    ,               /* FIRST BYTE OF LCCASPIN   */
*     4 LCCAPTLB BIT(1),                 /* PTLB PROCESSOR SPIN BIT  */
*     4 LCCASIGP BIT(1),                 /* SIGP PROCESSOR SPIN BIT  */
*     4 LCCALOCK BIT(1),                 /* LOCK MANAGER SPIN BIT    */
*     4 LCCATSPN BIT(1),                 /* SIMULATES SPIN FOR TIMER
*                                           SUPERVISOR AT VARY TIME  */
*     4 LCCARSTR BIT(1),                 /* USED BY A PROGRAM
*                                           SPINNING FOR THE RESTART
*                                           RESOURCE           MDC035*/
*     4 LCCAMFIO BIT(1),                 /* MF/1 IOS INITIALIZATION
*                                           SPIN BIT - USED BY MF/1
*                                           EMERGENCY SIGNAL (EMS)
*                                           AND MALFUNCTION ALERT
*                                           (MFA)              MDC036*/
*     4 LCCARV30 BIT(1),                 /* RESERVED                 */
*     4 LCCARV31 BIT(1),                 /* RESERVED                 */
*    3 LCCASPN2    ,               /* SECOND BYTE OF LCCASPIN  */
*     4 LCCARV32 BIT(1),                 /* RESERVED                 */
*     4 LCCARV33 BIT(1),                 /* RESERVED                 */
*     4 LCCARV34 BIT(1),                 /* RESERVED                 */
*     4 LCCARV35 BIT(1),                 /* RESERVED                 */
*     4 LCCARV36 BIT(1),                 /* RESERVED                 */
*     4 LCCARV37 BIT(1),                 /* RESERVED                 */
*     4 LCCARV38 BIT(1),                 /* RESERVED                 */
*     4 LCCARV39 BIT(1),                 /* RESERVED                 */
*    3 LCCASPN3    ,               /* THIRD BYTE OF LCCASPIN   */
*     4 LCCARV40 BIT(1),                 /* RESERVED                 */
*     4 LCCARV41 BIT(1),                 /* RESERVED                 */
*     4 LCCARV42 BIT(1),                 /* RESERVED                 */
*     4 LCCARV43 BIT(1),                 /* RESERVED                 */
*     4 LCCARV44 BIT(1),                 /* RESERVED                 */
*     4 LCCARV45 BIT(1),                 /* RESERVED                 */
*     4 LCCARV46 BIT(1),                 /* RESERVED                 */
*     4 LCCARV47 BIT(1),                 /* RESERVED                 */
*    3 LCCASPN4    ,               /* FOURTH BYTE OF LCCASPIN  */
*     4 LCCARV48 BIT(1),                 /* RESERVED                 */
*     4 LCCARV49 BIT(1),                 /* RESERVED                 */
*     4 LCCARV50 BIT(1),                 /* RESERVED                 */
*     4 LCCARV51 BIT(1),                 /* RESERVED                 */
*     4 LCCARV52 BIT(1),                 /* RESERVED                 */
*     4 LCCARV53 BIT(1),                 /* RESERVED                 */
*     4 LCCARV54 BIT(1),                 /* RESERVED                 */
*     4 LCCARV55 BIT(1),                 /* RESERVED                 */
*   2 LCCAESSA    FIXED(31),             /* EMERGENCY SIGNAL SLIH
*                                           SAVE AREA FOR EXTERNAL
*                                           FLIH RETURN ADDRESS
*                                                              MDC012*/
*   2 LCCAASCP    FIXED(31),             /* SAVE AREA FOR ISSUING
*                                           PROCESSOR'S PCCA ADDRESS
*                                                              MDC013*/
*   2 LCCACPUS    PTR,               /* POINTER TO CPU WORK/SAVE
*                                           AREA VECTOR TABLE        */
*   2 LCCADSF1     ,      /* DISPATCHER STATUS
*                                           INDICATOR BYTE 1         */
*    3 LCCAACR  BIT(1),                  /* ACR IN PROGRESS          */
*    3 LCCAVCPU BIT(1),                  /* VARY CPU IN PROGRESS     */
*    3 LCCADSS  BIT(1),                  /* IF ON, INDICATES TO THE
*                                           DISPATCHER THAT DSS IS
*                                           WAITING TO BE ACTIVATED
*                                           AND A MEMORY SWITCH MUST
*                                           BE PERFORMED       MDC002*/
*    3 LCCATIMR BIT(1),                  /* CPU'S TOD CLOCK IS TO BE
*                                           OR IS BEING SYNCHRONIZED
*                                                              MDC011*/
*    3 LCCARV58 BIT(1),                  /* RESERVED                 */
*    3 LCCARV59 BIT(1),                  /* RESERVED                 */
*    3 LCCARV60 BIT(1),                  /* RESERVED                 */
*    3 LCCARV61 BIT(1),                  /* RESERVED                 */
*   2 LCCADSF2     ,    /* DISPATCHER STATUS
*                                           INDICATOR BYTE 2         */
*    3 LCCASRBM BIT(1),                  /* SRB MODE INDICATOR       */
*    3 LCCAGSRB BIT(1),                  /* GLOBAL SRB-MODE INDICATOR*/
*    3 LCCADSPL BIT(1),                  /* LOCAL LOCK GOTTEN BY
*                                           DISPATCHER         MDC040*/
*    3 LCCADSRW BIT(1),                  /* DISPATCHER HAS DISPATCHED
*                                           READY WORK         MDC046*/
*    3 LCCARV64 BIT(1),                  /* RESERVED                 */
*    3 LCCARV65 BIT(1),                  /* RESERVED                 */
*    3 LCCARV66 BIT(1),                  /* RESERVED                 */
*    3 LCCARV67 BIT(1),                  /* RESERVED                 */
*   2 LCCAPSMK    CHAR(1) ,   /* STORE AREA FOR FLIH'S
*                                           STOSM INSTRUCTION        */
*   2 LCCARV68    CHAR(1),               /* RESERVED                 */
*   2 LCCASPSA     ,    /* REGISTER SAVE AREA FOR
*                                           INTER-CPU COMMUNICATION  */
*    3 LCCADSR2    FIXED(31),            /* IEAVEDR'S CALLER'S
*                                           REGISTER 2         MDC014*/
*    3 LCCADSR3    FIXED(31),            /* IEAVEDR'S CALLER'S
*                                           REGISTER 3         MDC015*/
*    3 LCCADSR4    FIXED(31),            /* IEAVEDR'S CALLER'S
*                                           REGISTER 4         MDC016*/
*    3 LCCADSR5    FIXED(31),            /* IEAVEDR'S CALLER'S
*                                           REGISTER 5         MDC017*/
*    3 LCCARPR2    FIXED(31),            /* IEAVERP'S CALLER'S
*                                           REGISTER 2         MDC018*/
*    3 LCCARPR3    FIXED(31),            /* IEAVERP'S CALLER'S
*                                           REGISTER 3         MDC019*/
*    3 LCCARPR4    FIXED(31),            /* IEAVERP'S CALLER'S
*                                           REGISTER 4         MDC020*/
*    3 LCCARPR5    FIXED(31),            /* IEAVERP'S CALLER'S
*                                           REGISTER 5         MDC021*/
*    3 LCCARIR2    FIXED(31),            /* IEAVERI'S CALLER'S
*                                           REGISTER 2         MDC022*/
*    3 LCCARIR3    FIXED(31),            /* IEAVERI'S CALLER'S
*                                           REGISTER 3         MDC023*/
*    3 LCCARIR4    FIXED(31),            /* IEAVERI'S CALLER'S
*                                           REGISTER 4         MDC024*/
*    3 LCCARIR5    FIXED(31),            /* IEAVERI'S CALLER'S
*                                           REGISTER 5         MDC025*/
*   2 LCCASTOD    CHAR(8) ,    /* TOD AT LAST TASK TIME
*                                           INTERVAL                 */
*   2 LCCADTOD    CHAR(8) ,    /* TOD VALUE WHEN TCB IS
*                                           DISPATCHED               */
*   2 LCCAITOD    CHAR(8) ,    /* TOD VALUE WHEN I/O OR
*                                           EXTERNAL INTERRUPT       */
*   2 LCCAWTIM    CHAR(8) ,    /* ACCUMULATED CPU WAIT TIME*/
*   2 LCCADSS1  (3) FIXED(31),           /* GENERAL REGISTERS 15-1 AS
*                                           SAVED BY DSS PROGRAM OR
*                                           SVC INTERRUPT HANDLER
*                                                              MDC026*/
*   2 LCCADSS2  (3) FIXED(31),           /* GENERAL REGISTERS 15-1 AS
*                                           SAVED BY DSS I/O OR
*                                           EXTERNAL INTERRUPT
*                                           HANDLER            MDC027*/
*   2 LCCADSS3  (3) FIXED(31),           /* GENERAL REGISTERS 15-1 AS
*                                           SAVED BY DSS MACHINE
*                                           CHECK INTERRUPT HANDLER
*                                                              MDC028*/
*   2 LCCADSSC  (2) FIXED(31),           /* DSS CONTROL REGISTERS 0
*                                           AND 1 SAVE AREA    MDC029*/
*   2 LCCADSSR    FIXED(31),             /* DSS CONTROL REGISTER 14
*                                           SAVE AREA          MDC030*/
*   2 LCCASRBJ    FIXED(31),             /* SUSPENDED SERVICE REQUEST
*                                           BLOCK (SRB) JOURNAL WORD
*                                           USED BY SETLOCK    MDC043*/
*   2 LCCADCPU    PTR,               /* VIRTUAL ADDRESS OF LCCA
*                                           OF FAILING CPU           */
*   2 LCCARCPU    PTR,               /* VIRTUAL ADDRESS OF LCCA
*                                           OF RECOVERING CPU        */
*   2 LCCACRLC    FIXED(31),             /* ACR SAVE AREA FOR HIGHEST
*                                           LOCK HELD INDICATOR      */
*   2 LCCALCR0    FIXED(31),             /* SAVE AREA FOR CONTROL
*                                           REGISTER 0 FOR SETLOCK   */
*   2 LCCACRFL    ,                /* ACR FLAGS                */
*    3 LCCACRTM BIT(1),                  /* RTM ENTRY BIT            */
*    3 LCCACLMS BIT(1),                  /* PROCESS SUSPENDED        */
*    3 LCCARV69 BIT(1),                  /* RESERVED                 */
*    3 LCCARV70 BIT(1),                  /* RESERVED                 */
*    3 LCCARV71 BIT(1),                  /* RESERVED                 */
*    3 LCCARV72 BIT(1),                  /* RESERVED                 */
*    3 LCCARV73 BIT(1),                  /* RESERVED                 */
*    3 LCCAVARY BIT(1),                  /* TELLS ACR THAT VARY IS IN
*                                           PROGRESS           MDC038*/
*   2 LCCACREX    ,                /* ACR ENTRY AND EXIT FLAGS */
*    3 LCCACREF BIT(1),                  /* EXTERNAL ROUTINE         */
*    3 LCCACRRM BIT(1),                  /* FINAL EXIT               */
*    3 LCCACRLE BIT(1),                  /* LOCK MANAGER EXIT        */
*    3 LCCACRRT BIT(1),                  /* FRR EXIT                 */
*    3 LCCACRIN BIT(1),                  /* ENTRY TYPE = ACR         */
*    3 LCCACRLM BIT(1),                  /* ENTRY TYPE = ACRLM       */
*    3 LCCACRDP BIT(1),                  /* ENTRY TYPE = ACRDISP     */
*    3 LCCACRST BIT(1),                  /* SYSTERM TERMINATION EXIT
*                                           FLAG               MDC037*/
*   2 LCCALKFG    ,                /* LOCK FLAG BYTE     MDC005*/
*    3 LCCALKDP BIT(1),                  /* DISPATCHER LOCK OBTAINED
*                                           BY SETLOCK         MDC039*/
*    3 LCCALKSA BIT(1),                  /* STORAGE ALLOCATION LOCK
*                                           OBTAINED BY SETLOCK
*                                                              MDC041*/
*    3 LCCALKAQ BIT(1),                  /* ASCB BEING QUEUED TO THE
*                                           SUSPEND QUEUE BY SETLOCK
*                                                              MDC042*/
*    3 LCCALKRD BIT(1),                  /* THIS IS A LOCK MANAGER
*                                           RELEASE DISABLED REQUEST
*                                                              MDC047*/
*    3 LCCARV84 BIT(1),                  /* RESERVED                 */
*    3 LCCARV85 BIT(1),                  /* RESERVED                 */
*    3 LCCARV86 BIT(1),                  /* RESERVED                 */
*    3 LCCARV87 BIT(1),                  /* RESERVED                 */
*   2 LCCARV88    CHAR(1),               /* RESERVED                 */
*   2 LCCAPINV    FIXED(31),             /* SAVE AREA FOR CONTROL
*                                           REGISTER WHEN OPEN WINDOW
*                                           INTERFACE TO EXTERNAL
*                                           FLIH IS INVOKED          */
*   2 LCCARV78    FIXED(31),             /* RESERVED                 */
*   2 LCCALWTM    CHAR(8) ,    /* VALUE OF LCCAWTIM AT THE
*                                           END OF A MEASUREMENT
*                                           INTERVAL           MDC001*/
*   2 LCCAICR0    FIXED(31),             /* SAVE AREA FOR CONTROL
*                                           REGISTER 0 FOR IPC MDC007*/
*   2 LCCAECSA    FIXED(31),             /* EXTERNAL CALL'S SLIH SAVE
*                                           AREA FOR EXTERNAL FLIH
*                                           RETURN REGISTER    MDC008*/
*   2 LCCASRBF     ,    /* SRB FIELDS         MDC009*/
*    3 LCCASAFN    FIXED(15),            /* CPU AFFINITY IF IN SRB
*                                           MODE               MDC003*/
*    3 LCCAPGTA    CHAR(6) , /* ASID/TCB IF IN SRB MODE
*                                                              MDC004*/
*   2 LCCAIRTP    CHAR(8) ,    /* PREFIX TO IOS RECOVERY
*                                           TABLE  (MDC302)  @ZA02390*/
*   2 LCCAIRT     CHAR(128) ,  /* IOS RECOVERY TABLE
*                                           DESCRIBING ACTIVE
*                                           REQUESTS, LOCKS, ETC.
*                                                              MDC010*/
*   2 LCCASMQJ    FIXED(31),             /* GLOBAL SERVICE MANAGER
*                                           QUEUE (GSMQ) AND LOCAL
*                                           SERVICE MANAGER QUEUE
*                                           (LSMQ) JOURNAL WORD USED
*                                           BY DISPATCHER AND
*                                           SCHEDULE           MDC044*/
*   2 LCCASPLJ    FIXED(31),             /* GLOBAL SYSTEM PRIORITY
*                                           LIST (GSPL) AND LOCAL
*                                           SYSTEM PRIORITY LIST
*                                           (LSPL) JOURNAL WORD USED
*                                           BY DISPATCHER      MDC045*/
*   2 LCCAESS2    PTR,               /* EMERGENCY SIGNAL SLIH
*                                           SAVE AREA FOR EXTERNAL
*                                           FLIH'S RETURN ADDRESS ON
*                                           RECURSIVE ENTRIES
*                                           (MDC048)           YM2608*/
*   2 LCCAR103    PTR,               /* RESERVED                 */
*   2 LCCADRT1    CHAR(8) ,    /* TIME OF DAY (TOD) ON
*                                           FIRST SIGP BUSY CONDITION
*                                           (MDC049)           YM3563*/
*   2 LCCADRT2    CHAR(8) ,    /* TIME OF DAY (TOD) ON
*                                           SUBSEQUENT SIGP BUSY
*                                           CONDITION (MDC050) YM3563*/
*   2 LCCASGPR  (16) FIXED(31),          /* SVC FLIH GENERAL
*                                           REGISTER SAVE AREA
*                                           (MDC301)         @ZA02598*/
*   2 LCCAR124    PTR,               /* RESERVED                 */
*   2 LCCAR125    PTR;               /* RESERVED                 */
./       ADD   NAME=IHAPFTE
*/********************************************************************/
*/* DISCLAIMER:                                                      */
*/*     THIS IBM MAPPING MACRO HAS BEEN CONVERTED FOR USE            */
*/* IN PLIX BY                                                       */
*/*     HOWARD GILBERT                                               */
*/*     YALE COMPUTER CENTER                                         */
*/*     175 WHITNEY AVE                                              */
*/*     NEW HAVEN, CONN. 06520                                       */
*/*     203 432-4080                                                 */
*/* THE AUTHOR HAS ONLY VERIFIED THE ACCURACY OF THE CONVERSION      */
*/* FOR THOSE FIELDS REQUIRED BY LOCALLY WRITTEN CODE. THE MACRO     */
***********************************************************************
*                                                                     *
* STATUS -                                                            *
*    CHANGE LEVEL 1                                                   *
* FUNCTION -                                                          *
*    MAPPING MACRO FOR PFTE                                           *
* ENTRY POINTS -                                                      *
*     IHAPFTE MACRO CALL                                              *
* INPUT -                                                             *
*    SEE IHAPFTE MACRO DEFINITION                                     *
* OUTPUT -                                                            *
*    PFTE MAPPING MACRO                                               *
* EXTERNAL REFERENCES -                                               *
*    N/A                                                              *
* EXITS, NORMAL -                                                     *
*    N/A                                                              *
* EXITS, ERROR -                                                      *
*    N/A                                                              *
* TABLES/WORK AREAS -                                                 *
*    N/A                                                              *
* ATTRIBUTES -                                                        *
*    BILINGUAL MACRO                                                  *
* CHARACTER CODE DEPENDENCY -                                         *
*    NONE                                                             *
* NOTES -                                                             *
*    NONE                                                             *
*                                                                     *
***********************************************************************
.PFTBIT  ANOP
         IEZBITS , -           DEFINE BITS
***********************************************************************
**                PAGE FRAME TABLE ENTRY      5/23/74                 *
**                                                                    *
**                                                                    *
**   ALL PFTES ARE CONTIGUOUS AND ARE LOCATED VIA DIRECT INDEX        *
**   ON THE HIGH ORDER 12 BITS OF ANY REAL ADDRESS. (THESE 12         *
**   BITS = PAGE FRAME NUMBER.) THE PAGE FRAME TABLE ENTRY            *
**   INDEX = PAGE FRAME NUMBER TIMES 16 (4 LOW ORDER BINARY ZEROS).   *
***********************************************************************
         AIF   ('&DSECT' EQ 'YES').PFT001 IS DSECT WANTED
PFTE     DS    0F
         AGO   .PFT002         BRANCH AROUND DSECT
.PFT001  ANOP                  GEN THE DESECT
PFTE     DSECT , PFTEPTR
.PFT002  ANOP
PFTPGID  DS    0F              AN IDENTIFIER OF THE VIRTUAL PAGE
*                              CURRENTLY OCCUPYING THIS FRAME.
*                              IF PFTIRRG IS 0, THIS FIELD IS
*                              SUBDIVIDED INTO PFTASID AND PFTVBN.
PFTASID  DS    XL2 -           THE ASID OF THE PAGE CURRENTLY
*                              OWNING THE FRAME
PFTVBN   DS    XL2 -           VIRTUAL BLOCK NUMBER  (HIGH
*                              ORDER 12 BITS OF 24 BIT VIRTUAL
*                              ADDRESS, LEFT ADJUSTED AND PADDED WITH
*                              4 LOW ORDER BINARY ZEROS) CURRENTLY
*                              OWNING THE REAL FRAME.
PFTQPTRS DS    0F              WORD CONTAINING PFTFQPTR AND PFTBQPTR
PFTFQPTR DS    H -             FORWARD PAGE FRAME QUEUE POINTER
*                              - THE PFTE INDEX OF THE NEXT ENTRY
*                              ON THIS PFQ
PFTBQPTR DS    H -             BACKWARD PAGE FRAME QUEUE POINTER
*                              - THE PFTE INDEX OF THE PREVIOUS
*                              ENTRY ON THIS PFQ
PFTFXCT  DS    H -             FIX COUNT OF THIS FRAME
PFTRSV1  DS    XL2 -           RESERVED
PFTFLAG1 DS    BL1 -           FIRST FLAG FIELD
PFTONAVQ EQU   BIT0 -          AVAILABLE FRAME QUEUE FLAG. WHEN 1,
*                              THIS PFTE IS ON AVAILABLE PFQ
PFTVRINT EQU   BIT1 -          WHEN 1, PFTE INTERCEPTED FOR V=R
PFTLSQA  EQU   BIT2 -          SQA/LSQA FLAG, WHEN 1, PAGE FRAME
*                              CONTAINS AN LSQA OR SQA PAGE. IF
*                              PFTASID=X'FFFF' THE FRAME CONTAINS A
*                              SQA PAGE.
PFTLNGFX EQU   BIT3 -          LONG FIX FLAG, WHEN 1, PAGE FRAME IS
*                              IN LONG FIX STATUS.
PFTPCBSI EQU   BIT4 -          PCB DEFINED FOR THIS PAGE FLAG, WHEN
*                              1, A PCB EXISTS FOR THIS PAGE.
PFTBADPG EQU   BIT5 -          BAD PAGE FRAME FLAG, WHEN 1, THIS PAGE
*                              FRAME MAY NOT BE ALLOCATED.
PFTVRALC EQU   BIT6 -          V = R ALLOCATED FLAG, WHEN 1, PFTE
*                              HAS BEEN ALLOCATED FOR A V=R REGION
PFTOFINT EQU   BIT7 -          WHEN 1, FRAME IS INTERCEPTED TO
*                              GO OFFLINE
PFTFLAG2 DS    BL1 -           SECOND FLAG FIELD
PFTDFRLS EQU   BIT0 -          DEFERRED RELEASE FLAG, WHEN 1, RELEASE
*                              HAS BEEN DEFERRED UNTIL THIS PAGE HAS
*                              BEEN FREED (PFTFXCT=0).
PFTOFFLN EQU   BIT1 -          FRAME ONLINE/OFFLINE FLAG, WHEN 1,
*                              FRAME IS OFFLINE
PFTVR    EQU   BIT2 -          V=R CANDIDATE, WHEN 1, FRAME MAY BE
*                              ALLOCATED TO A V=R REGION
PFTIRRG  EQU   BIT3 -          WHEN 1, INDICATES A VIO FRAME
PFTSTEAL EQU   BIT4 -          WHEN 1, INDICATES THIS PFTE SELECTED
*                              FOR STEALING, BUT HAS NOT BEEN STOLEN
*                              YET.
PFTPREF  EQU   BIT5 -          WHEN 1, INDICATES PFTE IN THE PREFERRED
*                              AREA                            @YD03005
PFTQNDX  DS    CL1 -           PFT QUEUE INDEX
PFTAFQN  EQU   X'00' -         PFTE ON AVAILABLE QUEUE
PFTSRQN  EQU   X'04' -         PFTE ON SQA RESERVED QUEUE
PFTCFQN  EQU   X'08' -         PFTE ON COMMON FRAME QUEUE
PFTSQAN  EQU   X'0C' -         PFTE ON SQA FRAME QUEUE
PFTLFQN  EQU   X'80' -         PFTE ON LOCAL FRAME QUEUE
PFTLSQAN EQU   X'84' -         PFTE ON LSQA FRAME QUEUE
PFTNQN   EQU   X'FF' -         PFTE NOT QUEUED
PFTUIC   DS    FL1 -           NUMBER OF STEAL INTERVALS DURING WHICH
*                              THIS FRAME WAS NOT REFERENCED
PFTEND   DS    0C -            END OF PAGE FRAME TABLE ENTRY
PFTLEN   EQU   PFTEND-PFTE -   LENGTH OF PAGE TABLE ENTRY
         MEND  , */
*%PFTEPLS :  ;
*%DCL (PFT9999,PFTDUM,PFTLEVEL) CHAR;
*%PFT9999=''; %PFTDUM='';%PFTLEVEL='';
* /*******************************************************************/
* /*                  PAGE FRAME TABLE ENTRY      5/23/74            */
* /*                                                                 */
* /*                                                                 */
* /* ALL PFTES ARE CONTIGUOUS AND ARE LOCATED VIA DIRECT INDEX       */
* /* ON THE HIGH ORDER 12 BITS OF ANY REAL ADDRESS. (THESE 12        */
* /* BITS = PAGE FRAME NUMBER.) THE PAGE FRAME TABLE ENTRY           */
* /* INDEX = PAGE FRAME NUMBER TIMES 16 (4 LOW ORDER BINARY ZEROS).  */
* /*******************************************************************/
*DCL
*  PFTAFQN  BIT(8) INIT('00000000'B), /* PFTE ON AVAILABLE QUEUE     */
*  PFTSRQN  BIT(8) INIT('00000100'B), /* PFTE ON SQA RESERVE QUEUE   */
*  PFTCFQN  BIT(8) INIT('00001000'B), /* PFTE ON COMMON FRAME QUEUE  */
*  PFTSQAN  BIT(8) INIT('00001100'B), /* PFTE ON SQA FRAME QUEUE     */
*  PFTLFQN  BIT(8) INIT('10000000'B), /* PFTE ON LOCAL FRAME QUEUE   */
*  PFTLSQAN BIT(8) INIT('10000100'B), /* PFTE ON LSQA FRAME QUEUE    */
*  PFTNQN   BIT(8) INIT('11111111'B); /* PFTE NOT QUEUED.            */
*      %IF PFT9999^=','             /* IS BLOCK PART OF STRUCTURE    */
*          %THEN %PFT9999=';';      /* NO, END BLOCK NORMALLY        */
*      %IF PFTLEVEL^=''             /* INITIAL LEVEL NUMBER GIVEN    */
*          %THEN %GOTO PFTPLS1;     /* YES THEN DO NOT GEN 1 LEVEL   */
*%PFTPLS0: ;
* /*******************************************************************/
* /*                     PFTE MAPPING                                */
* /*******************************************************************/
*DECLARE
*  1 PFTE BASED(PFTEPTR)
*      %GOTO PFTPLS2;               /*SKIP USER-GIVEN LEVEL          */
*%PFTPLS1: PFTDUM=PFTLEVEL××' PFTE';
*  PFTDUM
*%PFTPLS2:;
*   ,
*    4 PFTPGID  FIXED(31),          /* AN IDENTIFIER OF THE VIRTUAL
*                                      PAGE CURRENTLY OCCUPYING THIS
*                                      FRAME. IF PFTIRRG IS 0, THIS
*                                      FIELD IS SUBDIVIDED INTO
*                                      PFTASID AND PFTVBN.           */
*      8 PFTASID FIXED(15),         /* THE ASID OF THE PAGE CURRENTLY
*                                      OWNING THIS FRAME             */
*      8 PFTVBN BIT(16),            /* VIRTUAL BLOCK NUMBER (HIGH
*                                      ORDER 12 BITS OF 24 BIT VIRTUAL
*                                      ADDRESS, LEFT ADJUSTED AND
*                                      PADDED WITH 4 LOW-ORDER BINARY
*                                      ZEROES) CURRENTLY OWNING THE
*                                      FRAME.                        */
*    4 PFTQPTRS BIT(32),            /* WORD CONTAINING PFTFQPTR AND
*                                      PFTBQPTR                      */
*      8 PFTFQPTR BIT(16),          /* FORWARD PAGE FRAME QUEUE
*                                      POINTER  - THE PFTE INDEX OF
*                                      THE NEXT ENTRY ON THIS PFQ    */
*      8 PFTBQPTR BIT(16),          /* BACKWARD PAGE FRAME QUEUE
*                                      POINTER  - THE PFTE INDEX OF
*                                      THE PREVIOUS FRAME            */
*    4 PFTFXCT FIXED(15),           /* FIX COUNT OF THIS FRAME       */
*    4 PFTRSV1 CHAR(2),             /* RESERVED                      */
*    4 PFTFLAG1 BIT(8),             /* FIRST FLAG FIELD              */
*      8 PFTONAVQ BIT(1),           /* AVAILABLE FRAME QUEUE FLAG.
*                                      WHEN 1, THIS PFTE IS ON
*                                      AVAILABLE PFQ                 */
*      8 PFTVRINT BIT(1),           /* WHEN 1, PFTE INTERCEPTED FOR
*                                      USE IN A V=R REGION           */
*      8 PFTLSQA BIT(1),            /* SQA/LSQA FLAG, WHEN 1, PAGE
*                                      FRAME  CONTAINS AN LSQA OR SQA
*                                      PAGE. IF PFTASID=X'FFFF' THE
*                                      FRAME CONTAINS A SQA PAGE.    */
*      8 PFTLNGFX BIT(1),           /* LONG FIX FLAG, WHEN 1, PAGE
*                                      FRAME IS IN LONG FIX STATUS   */
*      8 PFTPCBSI BIT(1),           /* PCB DEFINED FOR THIS PAGE
*                                      FLAG, WHEN  1, A PCB EXISTS
*                                      FOR THIS PAGE                 */
*      8 PFTBADPG BIT(1),           /* BAD PAGE FRAME FLAG. WHEN 1,
*                                      THIS PAGE FRAME MAY NOT BE
*                                      ALLOCATED.                    */
*      8 PFTVRALC BIT(1),           /* V = R ALLOCATED FLAG, WHEN 1,
*                                      FRAME IS ALLOCATED TO A
*                                      V=R REGION                    */
*      8 PFTOFINT BIT(1),           /* OFFLINE INTERCEPT FLAG. WHEN
*                                      1, THE FRAME IS INTERCEPTED
*                                      TO GO OFFLINE                 */
*    4 PFTFLAG2 BIT(8),             /* SECOND FLAG FIELD             */
*      8 PFTDFRLS BIT(1),           /* DEFERRED RELEASE FLAG, WHEN 1,
*                                      RELEASE HAS BEEN DEFERRED
*                                      UNTIL THIS PAGE HAS BEEN FREED
*                                      (PFTFXCT=0).                  */
*      8 PFTOFFLN BIT(1),           /* FRAME ONLINE/OFFLINE FLAG, WHEN
*                                      1, FRAME IS OFFLINE           */
*      8 PFTVR BIT(1),              /* V=R CANDIDATE, WHEN 1, FRAME
*                                      MAY BE ALLOCATED TO A V=R
*                                      REGION                        */
*      8 PFTIRRG BIT(1),            /* WHEN 1, INDICATES A VIO FRAME */
*      8 PFTSTEAL BIT(1),           /* WHEN 1, THIS PFTE SELECTED FOR
*                                      STEALING, BUT HAS NOT BEEN
*                                      STOLEN YET.                   */
*      8 PFTPREF BIT(1),            /* WHEN 1, PFTE IS IN THE PREFERRED
*                                      AREA                  @YD03005*/
      8  YCC00000148 BIT(1),                  /* RESERVED            */
      8  YCC00000210 BIT(1),                  /* RESERVED            */
*    4 PFTQNDX CHAR(1),             /* PFT QUEUE INDEX               */
*    4 PFTUIC BIT(8) PFT9999      /* NUMBER OF STEAL INTERVALS
*                                      DURING WHICH THIS FRAME WAS
*                                      NOT REFERENCED                */
*      %PFTLEN='LENGTH(PFTE)';      /* LENGTH OF PFTE                */
./       ADD   NAME=IHAPSA
 /********************************************************************/
 /* DISCLAIMER:                                                      */
 /*     THIS IBM MAPPING MACRO HAS BEEN CONVERTED FOR USE            */
 /* IN PLIX BY                                                       */
 /*     HOWARD GILBERT                                               */
 /*     YALE COMPUTER CENTER                                         */
 /*     175 WHITNEY AVE                                              */
 /*     NEW HAVEN, CONN. 06520                                       */
 /*     203 432-4080                                                 */
 /* THE AUTHOR HAS ONLY VERIFIED THE ACCURACY OF THE CONVERSION      */
 /* FOR THOSE FIELDS REQUIRED BY LOCALLY WRITTEN CODE. THE MACRO     */
 /* IS MADE AVAILABLE TO SUPPORT SUCH CODE AND 'AS IS' FOR OTHER     */
 /* APPLICATIONS REQUIRED BY POTENTIAL USERS.                        */
 /*                                                                  */
 /* VERSION DATE: MAY 1,1977                                         */
 /********************************************************************/
   %DCL (PSABASE,PSADSSPS,PASDSSS) CHAR;

         %GOTO PSAL1;    /*
         MACRO
         IHAPSA &DSECT=YES     */
 %PSAL1 : ;

 /* **************************************************************** */
 /*                                                                  */
 /*            PREFIXED SAVE AREA                                    */
 /*                                                                  */
 /*  OS/VS2 RELEASE 4, 10/17/75, LEVEL=5                             */
 /*                                                                  */
 /*  METHOD OF ACCESS                                                */
 /*      BAL  - DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.      */
 /*             USING ON PSA GIVES ADDRESSABILITY FOR ALL SYMBOLS.   */
 /*      PL/S - PSA WILL BE BASED(0) FOR PL/S I OR LOCATION(0) FOR   */
 /*             PL/S II UNLESS %PSABASE IS SET TO SOME OTHER VALUE   */
 /*             BEFORE INCLUDE FOR MACRO.                            */
 /*                                                                  */
 /*  NOTE                                                            */
 /*      THE LABELS BEGINNING WITH PSA OR FLC ARE THE PROPER LABELS  */
 /*      TO USE.  THE OTHER LABELS ARE GIVEN AS ALIAS NAMES FOR      */
 /*      COMPATIBILITY WITH LABELS USED FOR SYSTEM 360 LOW CORE.     */
 /*                                                                  */
 /* **************************************************************** */

 %GOTO PSAL2;   /*
         SPACE 1
         AIF   ('&DSECT' EQ 'NO').PSA0010
PSA      DSECT
         AGO   .PSA0020
.PSA0010 ANOP
IEAVFX00 CSECT
         ENTRY SVCOPSW,PIOPSW,PINPSW,IEATCBP
         DS    0D
PSA      EQU   *
         USING PSA,0
.PSA0020 ANOP
FLC      EQU   *
FLCIPPSW DS    0CL8 -         IPL PSW
FLCRNPSW DC    XL4'040E0000' -RESTART NEW PSW (AFTER IPL)        MDC001
         DC    V(IEAVRSTR) -  SECOND HALF OF RESTART NEW PSW     MDC128
IPLPSW   EQU   FLCIPPSW --- ALIAS
FLCICCW1 DS    0CL8 -         IPL CCW1
FLCROPSW DC    XL8'00' -      RESTART OLD PSW (AFTER IPL)
FLCICCW2 DS    0CL8 -         IPL CCW2
FLCCVT   DC    V(IEACVT) -    ADDRESS OF CVT (AFTER IPL)
         DC    XL4'00' -      RESERVED (AFTER IPL)
FLCEOPSW DC    XL8'00' -      EXTERNAL OLD PSW
EXOPSW   EQU   FLCEOPSW --- ALIAS
FLCSOPSW DC    XL8'00' -      SVC OLD PSW
SVCOPSW  EQU   FLCSOPSW --- ALIAS
FLCPOPSW DC    XL8'00' -      PROGRAM CHECK OLD PSW
PIOPSW   EQU   FLCPOPSW --- ALIAS
FLCMOPSW DC    XL8'00' -      MACHINE CHECK OLD PSW
MCOPSW   EQU   FLCMOPSW --- ALIAS
FLCIOPSW DC    XL8'00' -      INPUT/OUTPUT OLD PSW
IOOPSW   EQU   FLCIOPSW --- ALIAS
FLCCSW   DC    XL8'00' -      CHANNEL STATUS WORD
FLCCAW   DC    XL4'00' -      CHANNEL ADDRESS WORD
FLCCVT2  DC    V(IEACVT) -    ADDRESS OF CVT - USED BY DUMP
                              ROUTINES                           ICB319
FLCTIMER DC    XL4'FFFFFFFF' -TIMER
TIMER    EQU   FLCTIMER
FLCTRACE DC    A(0) -         ADDRESS OF TRACE TABLE HEADER      YM2703
FLCENPSW DC    XL4'040C0000' -EXTERNAL NEW PSW
         DC    V(IEAQEX00) -  SECOND HALF OF EXTERNAL NEW PSW
EXNPSW   EQU   FLCENPSW --- ALIAS
FLCSNPSW DC    XL4'040C0000' -SVC NEW PSW
         DC    V(IEAQSC00) -  SECOND HALF OF SVC NEW PSW
SVCNPSW  EQU   FLCSNPSW --- ALIAS
FLCPNPSW DC    XL4'000E0000' -PROGRAM CHECK NEW PSW              MDC002
         DC    V(IEAQPK00) -  SECOND HALF OF PROGRAM CHECK NEW PSW
PINPSW   EQU   FLCPNPSW --- ALIAS
FLCMNPSW DC    XL4'00080000' -MACHINE CHECK NEW PSW              MDC003
         DC    V(IGFPMCIH) -  SECOND HALF OF MACHINE CHECK NEW PSW
                                                                 MDC003
MCNPSW   EQU   FLCMNPSW --- ALIAS
FLCINPSW DC    XL4'040C0000' -INPUT/OUTPUT NEW PSW
         DC    V(IEAQIO00) -  SECOND HALF OF I/O NEW PSW
IONPSW   EQU   FLCINPSW --- ALIAS
         DC    XL4'00' -      RESERVED
PSAEEPSW DS    0F -           EXTENDED PSW DATA STORED ON EXTERNAL
                              INTERRUPT                          MDC084
PSASPAD  DC    H'0' -         ISSUING PROCESSOR'S PHYSICAL ADDRESS ON
                              EMS OR EXTERNAL CALL INTERRUPT     MDC046
FLCEICOD DC    H'0' -         EXTERNAL INTERRUPTION CODE
EXCODE   EQU   FLCEICOD --- ALIAS
PSAESPSW DS    0F -           EXTENDED PSW DATA STORED ON SVC
                              INTERRUPT                          MDC085
         DC    XL1'00' -      RESERVED - SET TO ZERO
FLCSVILC DC    FL1'0' -       SVC INSTRUCTION LENGTH COUNTER -
                              NUMBER OF BYTES                    MDC079
FLCSILCB EQU   X'07' -        SIGNIFICANT BITS IN ILC FIELD - LAST
                              BIT IS ALWAYS ZERO                 MDC080
SVCILC   EQU   FLCSVILC --- ALIAS
FLCSVCN  DC    H'0' -         SVC INTERRUPTION CODE - SVC NUMBER MDC081
SVCNUM   EQU   FLCSVCN --- ALIAS
PSAEPPSW DS    0CL8 -         EXTENDED PSW FOR PROGRAM INTERRUPT MDC086
         DC    XL1'00' -      RESERVED - SET TO ZERO
FLCPIILC DC    FL1'0' -       PROGRAM INTERRUPT LENGTH COUNTER -
                              NUMBER OF BYTES IN INSTRUCTION CAUSING
                              PROGRAM INTERRUPTION               MDC082
FLCPILCB EQU   X'07' -        SIGNIFICANT BITS IN ILC FIELD - LAST
                              BIT IS ALWAYS ZERO                 MDC083
PIILC    EQU   FLCPIILC --- ALIAS
FLCPICOD DS    0H -           PROGRAM INTERRUPTION CODE
PICODE   EQU   FLCPICOD --- ALIAS
PSARV049 DC    XL1'00' -      RESERVED FOR IMPRECISE INTERRUPTS  MDC087
PSAPICOD DC    FL1'0' -       8-BIT INTERRUPT CODE               MDC088
PSAPIPER EQU   X'80' -        PER INTERRUPT OCCURRED             MDC089
PSAPIMC  EQU   X'40' -        MONITOR CALL INTERRUPT OCCURRED    MDC090
PSAPIPC  EQU   X'3F' -        AN UNSOLICITED PROGRAM CHECK HAS
                              OCCURRED IF ANY OF THESE 6 BITS ARE
                              ON                                 MDC091
FLCTEA   DS    0A -           TRANSLATION EXCEPTION ADDRESS
         DC    XL1'00' -      RESERVED - SET TO ZERO
FLCTEAA  DC    AL3(0) -       TRANSLATION EXCEPTION ADDRESS
         DC    XL1'00' -      RESERVED - SET TO ZERO
FLCMCNUM DC    XL1'00' -      MONITOR CLASS NUMBER
FLCPERCD DC    XL1'00' -      PROGRAM EVENT RECORDING CODE
         DC    XL1'00' -      RESERVED - SET TO ZERO
FLCPER   DS    0A -           PER ADDRESS
         DC    XL1'00' -      RESERVED - SET TO ZERO
FLCPERA  DC    AL3(0) -       PER ADDRESS
         DC    XL1'00' -      RESERVED - SET TO ZERO
FLCMTRCD DC    XL3'00' -      MONITOR CODE
         DC    XL8'00' -      RESERVED
FLCMCLA  DS    0XL344 -       MACHINE CHECK LOGOUT AREA
FLCCHNID DC    XL4'00' -      CHANNEL ID
FLCIOEL  DS    0A -           SAME AS FLCIOELA BELOW
         DC    XL1'00' -      RESERVED
FLCIOELA DC    AL3(0) -       I/O EXTENDED LOGOUT (IOEL) POINTER
FLCLCL   DC    XL4'00' -      LIMITED CHANNEL LOGOUT (ECSW)
         DC    XL2'00' -      RESERVED
         DC    XL1'00' -      RESERVED                           MDC051
         DC    XL1'00' -      RESERVED                           MDC052
FLCIOA   DS    0A -           I/O ADDRESS
         DC    XL1'00' -      RESERVED
FLCIOAA  DC    AL3(0) -       I/O ADDRESS
         DC    XL44'00' -     RESERVED
FLCMCIC  DC    XL8'00' -      MACHINE-CHECK INTERRUPTION CODE
         DC    XL8'00' -      RESERVED
FLCFSA   DS    0A -           FAILING STORAGE ADDRESS
         DC    XL1'00' -      ZEROES
FLCFSAA  DC    AL3(0) -       FAILING STORAGE ADDRESS
FLCRGNCD DC    XL4'00' -      REGION CODE
FLCFLA   DC    XL96'00' -     FIXED LOGOUT AREA
FLCFPSAV DC    XL32'00' -     FLOATING POINT REGISTER SAVE AREA
FLCGRSAV DC    16F'0' -       GENERAL REGISTER SAVE AREA
FLCCRSAV DC    16F'0' -       CONTROL REGISTER SAVE AREA
FLCHDEND DS    0D -           END OF HARDWARE ASSIGNMENTS
         AIF   ('&DSECT' EQ 'YES').PSA0100                       ICB414
         SPACE 2 -
         ORG   PSA+X'16C' -   LOCATION X'16C' IS BRANCHED TO BY THE
                              IPL PROGRAM
         LPSW  *+4 -          CAUSES MODULE IEAANIP0 TO BE ENTERED TO
                              INITIALIZE THE SYSTEM
         DC    XL4'00' -      FIRST WORD OF PSW
         DC    V(IEAVNIP0) -  SECOND WORD OF PSW
         ORG   FLCHDEND -
.PSA0100 ANOP
         SPACE 1
PSAPSA   DC    CL4'PSA ' -    CONTROL BLOCK ACRONYM IN EBCDIC
PSACPUPA DC    H'0' -         PHYSICAL CPU ADDRESS (CHANGED DURING ACR)
                              (MDC130)                           YM3489
PSACPULA DC    H'0' -         LOGICAL CPU ADDRESS
PSASUPER DS    0BL4 -         SUPERVISOR CONTROL WORD
PSASUP1  DC    XL1'00' -      FIRST BYTE OF PSASUPER
PSAIO    EQU   X'80' -        I/O FLIH
PSASVC   EQU   X'40' -        SVC FLIH
PSAEXT   EQU   X'20' -        EXTERNAL FLIH
PSAPI    EQU   X'10' -        PROGRAM CHECK FLIH
PSALOCK  EQU   X'08' -        LOCK ROUTINE
PSADISP  EQU   X'04' -        DISPATCHER
PSATCTL  EQU   X'02' -        TCTL RECOVERY FLAG  (MDC310)     @Z40FP9A
PSATYPE6 EQU   X'01' -        TYPE 6 SVC IN CONTROL  (MDC311)  @Z40FP9A
PSASUP2  DC    XL1'00' -      SECOND BYTE OF PSASUPER
PSAIPCRI EQU   X'80' -        SIGP - REMOTE IMMEDIATE
PSAGTF   EQU   X'40' -        GTF GIVEN CONTROL FROM FLIH
PSAIPCEC EQU   X'20' -        EXTERNAL CALL SLIH IS ACTIVE       MDC047
PSAIPCES EQU   X'10' -        EMERGENCY SIGNAL SLIH IS ACTIVE    MDC048
PSAIPCE2 EQU   X'08' -        EMERGENCY SIGNAL (EMS) SLIH RECURSIVE
                              ENTRY FLAG                         MDC110
PSAACR   EQU   X'04' -        AUTOMATIC CPU RECONFIGURATION (ACR) IN
                              CONTROL                            MDC119
PSARTM   EQU   X'02' -        RECOVERY TERMINATION MONITOR (RTM) IN
                              CONTROL                            MDC120
PSALCR   EQU   X'01' -        LOW CORE REFRESH ROUTINE IS ACTIVE MDC126
PSASUP3  DC    XL1'00' -      THIRD BYTE OF PSASUPER
PSAIOSUP EQU   X'80' -        IF ON, A MAINLINE IOS COMPONENT SUCH AS
                              CHANNEL SCHEDULER HAS ENTERED A
                              PHYSICALLY DISABLED STATE WITHOUT REGARD
                              TO LOCKING REQUIREMENTS            MDC027
PSAPI2   EQU   X'40' -        PROGRAM CHECK FLIH RECURSION
                              (MDC301)                         @ZM08516
PSAPSREG EQU   X'20' -        PSA RECOVERY RECURSION (MDC302)  @ZM08516
PSASPR   EQU   X'10' -        SUPER FRR IS ACTIVE  (MDC305)    @ZA02995
PSAESTA  EQU   X'08' -        ESTAE RECOVERY ROUTINE ACTIVE
                              (MDC312)                         @Z40FP9A
PSARV012 EQU   X'04',,C'X' -  RESERVED
PSARV013 EQU   X'02',,C'X' -  RESERVED
PSARV014 EQU   X'01',,C'X' -  RESERVED
PSASUP4  DC    XL1'00' -      FOURTH BYTE OF PSASUPER
PSARV015 EQU   X'80',,C'X' -  RESERVED
PSARV016 EQU   X'40',,C'X' -  RESERVED
PSARV017 EQU   X'20',,C'X' -  RESERVED
PSARV018 EQU   X'10',,C'X' -  RESERVED
PSARV019 EQU   X'08',,C'X' -  RESERVED
PSARV020 EQU   X'04',,C'X' -  RESERVED
PSARV021 EQU   X'02',,C'X' -  RESERVED
PSARV022 EQU   X'01',,C'X' -  RESERVED
PSAGPREG DC    3F'0' -        REGISTER SAVE AREA FOR I/O FLIH, SVC
                              FLIH, EXTERNAL FLIH AND SYSTEM TRACE
PSARSREG DC    F'0' -         RESTART FLIH REGISTER SAVE
PSAPIREG DC    F'0' -         PROGRAM CHECK FLIH REGISTER SAVE
         DS    0D -           ALIGN PSAEXPS1 TO DOUBLE WORD
PSAEXPS1 DC    XL8'00' -      EXTERNAL FLIH PSW SAVE AREA 1
         DS    0D -           ALIGN PSAEXPS2 TO DOUBLE WORD
PSAEXPS2 DC    XL8'00' -      EXTERNAL FLIH PSW SAVE AREA 2
         DS    0D -           ALIGN PSAMPSW TO DOUBLE WORD
PSAMPSW  DC    XL8'000C000000000000' - SETLOCK MODEL PSW
         DS    0D -           ALIGN PSAMCHEX TO DOUBLE WORD
PSAMCHEX DC    XL8'00' -      MCH EXIT PSW
PSAIPCR  DC    X'AD00' -      FIRST HALF OF IPC INSTRUCTION TO BE
                              EXECUTED
         DC    Y(PSAIPCRM-PSA) - SECOND HALF OF IPC INSTRUCTION
PSAIPCRM DC    XL1'00' -      BYTE USED BY ABOVE IPC INSTRUCTION
         DC    XL3'00' -      RESERVED
PSAIPCD  DC    X'AD00' -      FIRST HALF OF IPC INSTRUCTION TO BE
                              EXECUTED
         DC    Y(PSAIPCDM-PSA) - SECOND HALF OF IPC INSTRUCTION
PSAIPCDM DC    XL1'00' -      BYTE USED BY ABOVE IPC INSTRUCTION
         DC    XL3'00' -      RESERVED
PSAIPCSA DC    F'0' -         IPC REGISTER SAVE AREA             MDC049
PSAHLHIS DC    F'0' -         SAVE AREA FOR PSAHLHI              MDC050
PSARECUR DC    XL1'00' -      RESTART FLIH RECURSION INDICATOR.  IF
                              X'00', FLIH NOT IN CONTROL.  IF X'FF',
                              FLIH IN CONTROL, ENTRY IS RECURSIVE.
                                                                 MDC093
PSADSSGO DC    XL1'00' -      INITIALIZE DSS FLAG, SET BY OPERATOR.
                              IF X'00', DSS NOT TO BE ACTIVATED.  IF
                              NOT X'00', NEXT RESTART INTERRUPT FROM
                              CONSOLE SHOULD INITIALIZE DSS.     MDC094
PSARV050 DC    H'0' -         RESERVED
PSASRSA  DC    A(0) -         REAL ADDRESS OF SAVE AREA USED DURING
                              STOP AND RESTART SUBROUTINE        MDC095
PSACLHT  DS    0CL56 -        CPU LOCKS HELD TABLE.  INITIALIZED TO
                              ZERO.  IF LOCK IS HELD, WORD REPRESENTING
                              LOCK HAS ITS ADDRESS.
PSADISPL DC    A(0) -         GLOBAL DISPATCHER LOCK
PSAASML  DC    A(0) -         AUXILIARY STORAGE MANAGEMENT (ASM) LOCK
                                                                 MDC002
PSASALCL DC    A(0) -         SPACE ALLOCATION LOCK              MDC003
PSAIOSSL DC    A(0) -         IOS SYNCHRONIZATION LOCK           MDC010
PSAIOSCL DC    A(0) -         IOS CHANNEL AVAILABLE TABLE LOCK   MDC004
PSAIOSUL DC    A(0) -         IOS UNIT CONTROL BLOCK LOCK        MDC005
PSAIOSLL DC    A(0) -         IOS LOGICAL CHANNEL QUEUE LOCK     MDC006
PSATPNCL DC    A(0) -         TCAM'S TPNCP LOCK                  MDC007
PSATPDNL DC    A(0) -         TCAM'S TPDNCB LOCK                 MDC008
PSATPACL DC    A(0) -         TCAM'S TPACBDEB LOCK               MDC009
PSAOPTL  DC    A(0) -         OPTIMIZER LOCK
PSACMSL  DC    A(0) -         CROSS MEMORY SERVICES LOCK
PSALOCAL DC    A(0) -         LOCAL LOCK
PSARV023 DC    A(0) -         RESERVED LOCK
PSALKSA  DS    0CL64 -        SETLOCK REGISTER SAVE AREA
PSALKR0  DC    F'0' -         SETLOCK'S CALLER'S REGISTER 0
PSALKR1  DC    F'0' -         SETLOCK'S CALLER'S REGISTER 1
PSALKR2  DC    F'0' -         SETLOCK'S CALLER'S REGISTER 2
PSALKR3  DC    F'0' -         SETLOCK'S CALLER'S REGISTER 3
PSALKR4  DC    F'0' -         SETLOCK'S CALLER'S REGISTER 4
PSALKR5  DC    F'0' -         SETLOCK'S CALLER'S REGISTER 5
PSALKR6  DC    F'0' -         SETLOCK'S CALLER'S REGISTER 6
PSALKR7  DC    F'0' -         SETLOCK'S CALLER'S REGISTER 7
PSALKR8  DC    F'0' -         SETLOCK'S CALLER'S REGISTER 8
PSALKR9  DC    F'0' -         SETLOCK'S CALLER'S REGISTER 9
PSALKR10 DC    F'0' -         SETLOCK'S CALLER'S REGISTER 10
PSALKR11 DC    F'0' -         SETLOCK'S CALLER'S REGISTER 11
PSALKR12 DC    F'0' -         SETLOCK'S CALLER'S REGISTER 12
PSALKR13 DC    F'0' -         SETLOCK'S CALLER'S REGISTER 13
PSALKR14 DC    F'0' -         SETLOCK'S CALLER'S REGISTER 14
PSALKR15 DC    F'0' -         SETLOCK'S CALLER'S REGISTER 15
PSACLHS  DS    0F -           CPU LOCKS HELD STRING              MDC122
PSAHLHI  DC    F'0' -         HIGHEST LOCK HELD INDICATOR        MDC121
PSALITA  DC    V(IEAVELIT) -  ADDRESS OF LOCK INTERFACE TABLE
         DS    0D -           ALIGN PSAPSWSV TO DOUBLE WORD
PSAPSWSV DC    XL8'00' -      PSW SAVE AREA FOR DISPATCHER AND ACR
PSACR0   DC    F'0' -         SAVE AREA FOR CONTROL REGISTER 0
PSAMCHFL DC    XL1'00' -      MCH RECURSION FLAGS
PSASYMSK DC    XL1'00' -      THIS FIELD WILL BE USED IN CONJUNCTION
                              WITH THE STNSM INSTRUCTION TO PLACE IOS
                              CHANNEL SCHEDULER INTO A DISABLED STATE
                              AND SIMULTANEOUSLY SAVE THE SYSTEM MASK
                              OF THE CALLER                      MDC022
PSARV061 DC    XL1'00' -      RESERVED  (MDC060)                 YM4244
PSAMCHIC DC    XL1'00' -      MCH INITIALIZATION COMPLETE FLAGS  MDC098
PSAWKRAP DC    A(0) -         REAL ADDRESS OF VARY CPU PARAMETER LIST
                                                                 MDC106
PSAWKVAP DC    A(0) -         VIRTUAL ADDRESS OF VARY CPU PARAMETER
                              LIST                               MDC107
PSAVSTAP DC    H'0' -         WORK AREA FOR VARY CPU             MDC108
PSACPUSA DC    H'0' -         PHYSICAL CPU ADDRESS (STATIC)  (MDC131)
                                                                 YM3489
PSASTOR  DC    F'0' -         MASTER MEMORY'S SEGMENT TABLE ORIGIN
                              REGISTER (STOR) VALUE
PSADSSRS DC    F'0' -         REGISTER SAVE FOR DSS PROGRAM AND SVC
                              INTERRUPT HANDLERS                 MDC053
PSADSSR2 DC    F'0' -         REGISTER SAVE AREA FOR DSS I/O AND
                              EXTERNAL INTERRUPT HANDLERS        MDC054
PSADSSR3 DC    F'0' -         REGISTER SAVE AREA FOR DSS ERROR RECOVERY
                              ROUTINE                            MDC055
PSADSSWK DC    F'0' -         WORK AREA FOR DSS INTERRUPT HANDLERS
                                                                 MDC056
PSADSSTS DC    5F'0' -        REGISTER SAVE FOR DSS MODULES MAKING
                              CALLS TO IQATSS                    MDC023
PSADSSFL DS    0BL4 -         DSS FLAG BYTES                     MDC024
PSADSSF1 DC    XL1'00' -      DSS STATUS BYTE                    MDC029
PSADSSMV EQU   X'80' -        DSS MONITORING, VS2 RUNNING        MDC030
PSADSSDM EQU   X'40' -        DSS IN VS2-2 VM                    MDC031
PSADSSDD EQU   X'20' -        DSS IN DSS VM                      MDC032
PSADSSDW EQU   X'10' -        DSS IN DSS WAIT                    MDC033
PSADSSTP EQU   X'08' -        DSS PROCESSING SIGP                MDC034
PSADSSSP EQU   X'04' -        DSS SIGP PENDING                   MDC035
PSADSSOI EQU   X'02' -        DSS EXECUTING OVERLAID INSTRUCTION MDC036
PSADSSPI EQU   X'01' -        DSS EXECUTING PRIVILEGED INSTRUCTION
                                                                 MDC037
PSADSSF2 DC    XL1'FF' -      SYSTEM STATUS BYTE  (MDC038)       YM6287
PSADSSPS EQU   X'FF' -        SYSTEM RUNNING IN PROBLEM STATE    MDC039
PSADSSSS EQU   X'FE' -        SYSTEM RUNNING IN PRIVILEGED STATE MDC040
PSADSSF3 DC    XL1'00' -      DSS FLAG BYTE                      MDC099
PSADSSGP EQU   X'80' -        DSS SIGP INDICATOR                 MDC100
PSADSSES EQU   X'40' -        ERROR SHORT SAVE INDICATOR         MDC113
PSADSSNM EQU   X'20' -        NON-MONITORABLE CODE INDICATOR     MDC114
PSADSSRW EQU   X'10' -        DSS OWNS CVTRSTWD                  MDC117
PSADSSMC EQU   X'08' -        MACHINE CHECK RUNNING  (MDC132)    YM6287
PSARV055 EQU   X'04',,C'X' -  RESERVED FOR DSS                   MDC100
PSARV056 EQU   X'02',,C'X' -  RESERVED FOR DSS                   MDC100
PSARV057 EQU   X'01',,C'X' -  RESERVED FOR DSS                   MDC100
PSADSSF4 DC    XL1'00' -      DSS RECURSION FLAGS                MDC101
PSADSSRC EQU   X'80' -        PROGRAM-SVC RECURSION FLAG         MDC057
PSADSS12 EQU   X'40' -        PROGRAM INTERRUPT 12 RECURSION FLAG
                                                                 MDC058
PSADSSIE EQU   X'20' -        I/O-EXTERNAL RECURSION FLAG        MDC059
PSADSSC0 EQU   X'10' -        CONTROL REGISTER 0 INVALID FLAG    MDC092
PSADSSDE EQU   X'08' -        DAT ERROR WHILE DSS RUNNING IN VS2 VM
                                                                 MDC102
PSADSSVE EQU   X'04' -        DAT ERROR WHILE DSS RUNNING IN DSS VM
                                                                 MDC103
PSADSS10 EQU   X'02' -        SEGMENT EXCEPTION RECURSION FLAG   MDC104
PSADSS05 EQU   X'01' -        ADDRESSING EXCEPTION RECURSION FLAG
                                                                 MDC105
         DS    0D -           ALIGN PSADSSRP TO DOUBLEWORD       MDC025
PSADSSRP DC    XL8'00' -      DSS TO VS2-2 RESUME PSW            MDC025
         DS    0D -           ALIGN PSADSSPP TO DOUBLEWORD       MDC026
PSADSSPP DC    XL8'00' -      DSS PSW FOR RETURNING CONTROL FROM
                              PRIVILEGED INSTRUCTION STREAM TO VS2
                                                                 MDC026
PSADSS14 DC    F'0' -         DSS RESTART SECOND LEVEL INTERRUPT
                              HANDLER CONTROL REGISTER 14 SAVE AREA
                                                                 MDC115
PSADSSFW DC    F'0' -         FULL-WORD DSS WORK AREA            MDC116
PSADSSPR DC    F'0' -         DSS REGISTER SAVE FOR PRIVILEGED
                              INSTRUCTION STREAM                 MDC028
PSADSSED EQU   * -            END OF DSS FIELDS                  MDC045
PSARV025 DC    F'0' -         RESERVED FOR DSS
PSARV040 DC    F'0' -         RESERVED FOR DSS
PSARV041 DC    F'0' -         RESERVED FOR DSS
PSARV042 DC    F'0' -         RESERVED FOR DSS
PSARV043 DC    F'0' -         RESERVED FOR DSS
PSARV044 DC    F'0' -         RESERVED FOR DSS
PSARV045 DC    F'0' -         RESERVED FOR DSS
PSARSVT  DS    0CL64 -        RECOVERY STACK VECTOR TABLE        MDC064
PSARSVTE DS    0CL64 -        RECOVERY STACK VECTOR TABLE        MDC065
PSACSTK  DC    A(0) -         ADDRESS OF CURRENTLY USED FUNCTIONAL
                              RECOVERY ROUTINE (FRR) STACK       MDC061
PSANSTK  DC    A(0) -         ADDRESS OF NORMAL FRR STACK        MDC062
PSASSTK  DC    A(0) -         ADDRESS OF SVC-I/O-DISPATCHER FRR STACK
                                                                 MDC063
PSASSAV  DC    A(0) -         ADDRESS OF INTERRUPTED STACK SAVED BY
                              SVC-I/O-DISPATCHER                 MDC066
PSAMSTK  DC    A(0) -         ADDRESS OF MCH FRR STACK           MDC067
PSAMSAV  DC    A(0) -         ADDRESS OF INTERRUPTED STACK SAVED BY
                              MCH                                MDC068
PSAPSTK  DC    A(0) -         ADDRESS OF PROGRAM CHECK FLIH FRR STACK
                                                                 MDC069
PSAPSAV  DC    A(0) -         ADDRESS OF INTERRUPTED STACK SAVED BY
                              PROGRAM CHECK FLIH                 MDC070
PSAESTK1 DC    A(0) -         ADDRESS OF EXTERNAL FLIH FRR STACK FOR
                              NON-RECURSIVE ENTRIES              MDC071
PSAESAV1 DC    A(0) -         ADDRESS OF INTERRUPTED STACK SAVED BY
                              NON-RECURSIVE ENTRIES              MDC072
PSAESTK2 DC    A(0) -         ADDRESS OF EXTERNAL FLIH FRR STACK FOR
                              FIRST LEVEL RECURSIONS             MDC073
PSAESAV2 DC    A(0) -         ADDRESS OF INTERRUPTED STACK SAVE BY
                              EXTERNAL FLIH FOR FIRST LEVEL RECURSIONS
                                                                 MDC074
PSAESTK3 DC    A(0) -         ADDRESS OF EXTERNAL FLIH FRR STACK FOR
                              SECOND LEVEL RECURSIONS AND ACR    MDC075
PSAESAV3 DC    A(0) -         ADDRESS OF INTERRUPTED STACK SAVED BY
                              EXTERNAL FLIH (ACR) FOR SECOND LEVEL
                              RECURSIONS                         MDC076
PSARSTK  DC    A(0) -         ADDRESS OF RESTART FLIH FRR STACK  MDC077
PSARSAV  DC    A(0) -         ADDRESS OF INTERRUPTED STACK SAVED BY
                              RESTART FLIH                       MDC078
         DS    0D -           ALIGN PSARPSW TO DOUBLE WORD       MDC096
PSASRPSW DC    XL8'00' -      RESUME PSW FOR STOP AND RESTART
                              SUBROUTINE                         MDC096
         DS    0D -           ALIGN PSARSPSW TO DOUBLE WORD      MDC097
PSARSPSW DC    XL8'00' -      RESUME PSW FIELD FOR RESTART INTERRUPT
                              HANDLER                            MDC097
         DS    0D -           ALIGN PSASTART TO DOUBLE WORD      MDC111
PSASTART BR    14 -           START FATHOM RECORDING             MDC111
         DC    XL14'00' -     REST OF PSASTART                   MDC111
         DS    0D -           ALIGN PSASTOP TO DOUBLE WORD       MDC112
PSASTOP  BR    14 -           STOP FATHOM RECORDING              MDC112
         DC    XL14'00' -     REST OF PSASTOP                    MDC112
         DS    0F -           ALIGN PSASFACC TO FULL WORD        MDC123
PSASFACC DC    XL4'8007D000' - SETFRR ABEND COMPLETION CODE USED WHEN
                              A SETFRR ADD IS ISSUED AGAINST A FULL
                              FRR STACK                          MDC123
PSALSFCC DC    XL4'581003F0' - A LOAD INSTRUCTION TO PRIME REGISTER 1
                              WITH THE SETFRR ABEND COMPLETION CODE IN
                              PSASFACC                           MDC124
PSASVC13 SVC   13 -           AN SVC 13 INSTRUCTION              MDC125
PSARV059 DC    H'0' -         RESERVED
PSAPIR2  DC    F'0' -         PROGRAM CHECK FLIH REGISTER SAVE
                              (MDC303)                         @ZM08516
         DS    0D -           ALIGN PSAPCPSW TO DOUBLE WORD      YM0943
PSAPCPSW DC    XL8'00' -      TEMPORARY OLD PSW STORAGE FOR PROGRAM
                              FLIH  (MDC129)                     YM0943
PSAATCVT DC    A(0) -         ADDRESS OF VTAM ATCVT.  INITIALIZED BY
                              VTAM.  (MDC300)                  @Z30AP9A
PSAWTCOD DC    A(0) -         CALLER-SUPPLIED WAIT STATE INFORMATION
                              FOR STOP/RESTART  (MDC306)       @ZA00904
PSACDAL  DC    A(0) -         ADDRESS OF COMMON DISPATCHER ELEMENT FOR
                              THIS CPU  (MDC307)               @Z40FP9A
PSARV062 DC    F'0' -         RESERVED                         @Z40AQ9A
PSAUSEND DS    0D -           END OF ASSIGNED FIELDS             MDC109
         DC    2024XL1'00' -  RESERVED                         @Z40AQ9A
         DS    0D -           ALIGN PSASTAK TO DOUBLE WORD       MDC118
PSASTAK  DC    596XL1'00' -   NORMAL FRR STACK  (MDC304)       @ZM32352
         DC    428XL1'00' -   RESERVED FOR EXPANSION OF PSASTAK
                              (MDC304)                         @ZM32352
         MEND  , -         */
 %PSAL2 : ;

 DECLARE
    PSAPTR PTR INIT((PTROUT(0))),
   1 PSA      BASED(PSAPTR) ,
 %GOTO PSA0030;
 %PSA0010 : ;
 %IF IKEPLS='2'  %THEN
     %GOTO PSA0020;
   1 PSA      BASED(0) ,
 %GOTO PSA0030;
 %PSA0020 : ;
   1 PSA      LOCATION(0) ,
 %PSA0030 : ;
    2 FLCRNPSW     ,    /* RESTART NEW PSW (AFTER
                                            IPL)                     */
     3 FLCIPPSW    CHAR(8) ,   /* IPL PSW                  */
    2 FLCROPSW     ,    /* RESTART OLD PSW (AFTER
                                            IPL)                     */
     3 FLCICCW1    CHAR(8) ,   /* IPL CCW1                 */
    2 FLCICCW2     ,    /* IPL CCW2                 */
     3 FLCCVT      PTR,              /* ADDRESS OF CVT (AFTER
                                            IPL)                     */
     3  YCC00001006          CHAR(4),              /* RESERVED (AFTER */
    2 FLCEOPSW    CHAR(8) ,    /* EXTERNAL OLD PSW         */
    2 FLCSOPSW    CHAR(8) ,    /* SVC OLD PSW              */
    2 FLCPOPSW    CHAR(8) ,    /* PROGRAM CHECK OLD PSW    */
    2 FLCMOPSW    CHAR(8) ,    /* MACHINE CHECK OLD PSW    */
    2 FLCIOPSW    CHAR(8) ,    /* INPUT/OUTPUT OLD PSW     */
    2 FLCCSW      CHAR(8) ,    /* CHANNEL STATUS WORD      */
    2 FLCCAW      CHAR(4) ,     /* CHANNEL ADDRESS WORD     */
    2 FLCCVT2     PTR,               /* ADDRESS OF CVT - USED BY
                                            DUMP ROUTINES      ICB319*/
    2 FLCTIMER    CHAR(4),               /* TIMER                    */
    2 FLCTRACE    PTR,               /* ADDRESS OF TRACE TABLE
                                            HEADER                   */
    2 FLCENPSW    CHAR(8) ,    /* EXTERNAL NEW PSW         */
    2 FLCSNPSW    CHAR(8) ,    /* SVC NEW PSW              */
    2 FLCPNPSW    CHAR(8) ,    /* PROGRAM CHECK NEW PSW    */
    2 FLCMNPSW    CHAR(8) ,    /* MACHINE CHECK NEW PSW    */
    2 FLCINPSW    CHAR(8) ,    /* INPUT/OUTPUT NEW PSW     */
    2  YCC00000477          CHAR(4),               /* RESERVED        */
    2 PSAEEPSW     ,     /* EXTENDED PSW DATA STORED
                                            ON EXTERNAL INTERRUPT
                                                               MDC084*/
     3 PSASPAD     FIXED(15),            /* ISSUING PROCESSOR'S
                                            PHYSICAL ADDRESS ON EMS
                                            OR EXTERNAL CALL
                                            INTERRUPT          MDC046*/
     3 FLCEICOD    FIXED(15),            /* EXTERNAL INTERRUPTION
                                            CODE                     */
    2 PSAESPSW     ,     /* EXTENDED PSW DATA STORED
                                            ON SVC INTERRUPT   MDC085*/
     3  YCC00000495          CHAR(1),              /* RESERVED - SET T*/
     3 FLCSVILC    ,               /* SVC INSTRUCTION LENGTH
                                            COUNTER - NUMBER OF BYTES
                                                               MDC079*/
      4  YCC00000507       BIT(5),                 /* ALWAYS ZERO     */
      4 FLCSILCB BIT(3),                 /* SIGNIFICANT BITS IN ILC
                                            FIELD - LAST BIT IS
                                            ALWAYS ZERO        MDC080*/
     3 FLCSVCN     FIXED(15),            /* SVC INTERRUPTION CODE -
                                            SVC NUMBER         MDC081*/
    2 PSAEPPSW     ,     /* EXTENDED PSW FOR PROGRAM
                                            INTERRUPT          MDC086*/
     3  YCC00000511          CHAR(1),              /* RESERVED - SET T*/
     3 FLCPIILC    ,               /* PROGRAM INSTRUCTION
                                            LENGTH COUNTER - NUMBER
                                            OF BYTES IN INSTRUCTION
                                            CAUSING PROGRAM
                                            INTERRUPTION       MDC082*/
      4  YCC00000519       BIT(5),                 /* ALWAYS ZERO     */
      4 FLCPILCB BIT(3),                 /* SIGNIFICANT BITS IN ILC
                                            FIELD - LAST BIT IS
                                            ALWAYS ZERO        MDC083*/
     3 FLCPICOD    ,            /* PROGRAM INTERRUPTION
                                            CODE                     */
      4 PSARV049    CHAR(1),             /* RESERVED FOR IMPRECISE
                                            INTERRUPTS         MDC087*/
      4 PSAPICOD    ,              /* 8- INTERRUPT CODE
                                                               MDC088*/
       5 PSAPIPER BIT(1),                /* PER INTERRUPT OCCURRED
                                                               MDC089*/
       5 PSAPIMC  BIT(1),                /* MONITOR CALL INTERRUPT
                                            OCCURRED           MDC090*/
       5 PSAPIPC  BIT(6),                /* AN UNSOLICITED PROGRAM
                                            CHECK HAS OCCURRED IF ANY
                                            OF THESE 6 BITS ARE ON
                                                               MDC091*/
     3 FLCTEA      ,              /* TRANSLATION EXCEPTION
                                            ADDRESS                  */
      4  YCC00000525          CHAR(1),             /* RESERVED - SET T*/
      4 FLCTEAA     BIT(24),             /* TRANSLATION EXCEPTION
                                            ADDRESS                  */
    2  YCC00000545          CHAR(1),               /* RESERVED - SET T*/
    2 FLCMCNUM    BIT(8),                /* MONITOR CLASS NUMBER     */
    2 FLCPERCD    CHAR(1),               /* PROGRAM EVENT RECORDING
                                            CODE                     */
    2  YCC00000548          CHAR(1),               /* RESERVED - SET T*/
    2 FLCPER      ,               /* PER ADDRESS              */
     3  YCC00000552          CHAR(1),              /* RESERVED - SET T*/
     3 FLCPERA     BIT(24),              /* PER ADDRESS              */
    2  YCC00000554          CHAR(1),               /* RESERVED - SET T*/
    2 FLCMTRCD    CHAR(3),               /* MONITOR CODE             */
    2  YCC00000556          CHAR(8),               /* RESERVED        */
    2 FLCMCLA      ,  /* MACHINE CHECK LOGOUT
                                            AREA                     */
     3 FLCCHNID    CHAR(4),              /* CHANNEL ID               */
     3 FLCIOEL     ,              /* SAME AS FLCIOELA BELOW   */
      4  YCC00000558          CHAR(1),             /* RESERVED        */
      4 FLCIOELA    BIT(24),             /* I/O EXTENDED LOGOUT
                                            (IOEL) POINTER           */
     3 FLCLCL      CHAR(4),              /* LIMITED CHANNEL LOGOUT
                                            (ECSW)                   */
     3  YCC00000563          CHAR(2),              /* RESERVED        */
     3  YCC00000568          CHAR(1),              /* RESERVED        */
     3  YCC00000569          CHAR(1),              /* RESERVED        */
     3 FLCIOA      ,              /* I/O ADDRESS              */
      4  YCC00000570          CHAR(1),             /* RESERVED        */
      4 FLCIOAA     BIT(24),             /* I/O ADDRESS              */
     3  YCC00000572          CHAR(44),             /* RESERVED        */
     3 FLCMCIC     CHAR(8),              /* MACHINE-CHECK
                                            INTERRUPTION CODE        */
                                            AREA                     */
     3 FLCCRSAV (16) FIXED(31),          /* CONTROL REGISTER SAVE
                                            AREA                     */
    2 FLCHDEND    CHAR(0) ,    /* END OF HARDWARE
                                            ASSIGNMENTS              */
    2 PSAPSA      CHAR(4) ,     /* CONTROL BLOCK ACRONYM IN
                                            EBCDIC                   */
    2 PSACPUPA    FIXED(15),               /* PHYSICAL CPU ADDRESS
                                            (CHANGED DURING ACR)
                                            (MDC130)           YM3489*/
    2 PSACPULA    FIXED(15),               /* LOGICAL CPU ADDRESS     */
    2 PSAPCCAV    PTR,               /* VIRTUAL ADDRESS OF PCCA  */
    2 PSAPCCAR    PTR,               /* REAL ADDRESS OF PCCA     */
    2 PSALCCAV    PTR,               /* VIRTUAL ADDRESS OF LCCA  */
    2 PSALCCAR    PTR,               /* REAL ADDRESS OF LCCA     */
    2 PSATNEW     PTR,               /* TCB NEW POINTER          */
    2 PSATOLD     PTR,               /* TCB OLD POINTER          */
    2 PSAANEW     PTR,               /* ASCB NEW POINTER         */
    2 PSAAOLD     PTR,               /* ASCB OLD POINTER         */
    2 PSASUPER     ,     /* SUPERVISOR CONTROL WORD  */
     3 PSASUP1     ,               /* FIRST BYTE OF PSASUPER   */
      4 PSAIO    BIT(1),                 /* I/O FLIH                 */
      4 PSASVC   BIT(1),                 /* SVC FLIH                 */
      4 PSAEXT   BIT(1),                 /* EXTERNAL FLIH            */
      4 PSAPI    BIT(1),                 /* PROGRAM CHECK FLIH       */
      4 PSALOCK  BIT(1),                 /* LOCK ROUTINE             */
      4 PSADISP  BIT(1),                 /* DISPATCHER               */
      4 PSATCTL  BIT(1),                 /* TCTL RECOVERY FLAG
                                            (MDC310)         @Z40FP9A*/
      4 PSATYPE6 BIT(1),                 /* TYPE 6 SVC IN CONTROL
                                            (MDC311)         @Z40FP9A*/
     3 PSASUP2     ,               /* SECOND BYTE OF PSASUPER  */
      4 PSAIPCRI BIT(1),                 /* SIGP - REMOTE IMMEDIATE  */
      4 PSAGTF   BIT(1),                 /* GTF GIVEN CONTROL FROM
                                            FLIH                     */
      4 PSAIPCEC BIT(1),                 /* EXTERNAL CALL SLIH IS
                                            ACTIVE             MDC047*/
      4 PSAIPCES BIT(1),                 /* EMERGENCY SIGNAL SLIH IS
                                            ACTIVE             MDC048*/
      4 PSAIPCE2 BIT(1),                 /* EMERGENCY SIGNAL (EMS)
                                            SLIH RECURSIVE ENTRY
                                            FLAG               MDC110*/
      4 PSAACR   BIT(1),                 /* AUTOMATIC CPU
                                            RECONFIGURATION (ACR) IN
                                            CONTROL            MDC119*/
      4 PSARTM   BIT(1),                 /* RECOVERY TERMINATION
                                            MONITOR (RTM) IN CONTROL
                                                               MDC120*/
      4 PSALCR   BIT(1),                 /* LOW CORE REFRESH ROUTINE
                                            IS ACTIVE          MDC126*/
     3 PSASUP3     ,               /* THIRD BYTE OF PSASUPER   */
      4 PSAIOSUP BIT(1),                 /* IF ON, A MAINLINE IOS
                                            COMPONENT SUCH AS CHANNEL
                                            SCHEDULER HAS ENTERED A
                                            PHYSICALLY DISABLED STATE
                                            WITHOUT REGARD TO LOCKING
                                            REQUIREMENTS       MDC127*/
      4 PSAPI2   BIT(1),                 /* PROGRAM CHECK FLIH
                                            RECURSION
                                            (MDC301)         @ZM08516*/
      4 PSAPSREG BIT(1),                 /* PSA RECOVERY RECURSION
                                            (MDC302)         @ZM08516*/
      4 PSASPR   BIT(1),                 /* SUPER FRR IS ACTIVE
                                            (MDC305)         @ZA02995*/
      4 PSAESTA  BIT(1),                 /* ESTAE RECOVERY ROUTINE
                                            ACTIVE  (MDC312) @Z40FP9A*/
      4 PSARV012 BIT(1),                 /* RESERVED                 */
      4 PSARV013 BIT(1),                 /* RESERVED                 */
      4 PSARV014 BIT(1),                 /* RESERVED                 */
     3 PSASUP4     ,               /* FOURTH BYTE OF PSASUPER  */
      4 PSARV015 BIT(1),                 /* RESERVED                 */
      4 PSARV016 BIT(1),                 /* RESERVED                 */
      4 PSARV017 BIT(1),                 /* RESERVED                 */
      4 PSARV018 BIT(1),                 /* RESERVED                 */
      4 PSARV019 BIT(1),                 /* RESERVED                 */
      4 PSARV020 BIT(1),                 /* RESERVED                 */
      4 PSARV021 BIT(1),                 /* RESERVED                 */
      4 PSARV022 BIT(1),                 /* RESERVED                 */
    2 PSAGPREG  (3) FIXED(31),           /* REGISTER SAVE AREA FOR
                                            I/O FLIH, SVC FLIH,
                                            EXTERNAL FLIH AND SYSTEM
                                            TRACE                    */
    2 PSARSREG    FIXED(31),             /* RESTART FLIH REGISTER
                                            SAVE                     */
    2 PSAPIREG    FIXED(31),             /* PROGRAM CHECK FLIH
                                            REGISTER SAVE            */
    2 PSAEXPS1    CHAR(8) ,    /* EXTERNAL FLIH PSW SAVE
                                            AREA 1                   */
    2 PSAEXPS2    CHAR(8) ,    /* EXTERNAL FLIH PSW SAVE
                                            AREA 2                   */
    2 PSAMPSW     CHAR(8) ,    /* SETLOCK MODEL PSW        */
    2 PSAMCHEX    CHAR(8) ,    /* MCH EXIT PSW             */
    2 PSAIPCR     CHAR(4) ,     /* IPC INSTRUCTION TO BE
                                            EXECUTED                 */
    2 PSAIPCRM    CHAR(1),               /* BYTE USED BY ABOVE IPC
                                            INSTRUCTION              */
    2  YCC00000579          CHAR(3),               /* RESERVED        */
    2 PSAIPCD     CHAR(4) ,     /* IPC INSTRUCTION TO BE
                                            EXECUTED                 */
    2 PSAIPCDM    CHAR(1),               /* BYTE USED BY ABOVE IPC
                                            INSTRUCTION              */
    2  YCC00000682          CHAR(3),               /* RESERVED        */
    2 PSAIPCSA    FIXED(31),             /* IPC REGISTER SAVE AREA
                                                               MDC049*/
    2 PSAHLHIS    FIXED(31),             /* SAVE AREA FOR PSAHLHI
                                                               MDC050*/
    2 PSARECUR    CHAR(1),               /* RESTART FLIH RECURSION
                                            INDICATOR.  IF X'00',
                                            FLIH NOT IN CONTROL.  IF
                                            X'FF', FLIH IN CONTROL,
                                            ENTRY IS RECURSIVE MDC093*/
    2 PSADSSGO    BIT(8),                /* INITIALIZE DSS FLAG, SET
                                            BY OPERATOR.  IF X'00',
                                            DSS NOT TO BE ACTIVATED.
                                            IF NOT X'00', NEXT
                                            RESTART INTERRUPT FROM
                                            CONSOLE SHOULD INITIALIZE
                                            DSS.               MDC094*/
    2 PSARV050    FIXED(15),             /* RESERVED                 */
    2 PSASRSA     PTR,               /* REAL ADDRESS OF SAVE AREA
                                            USED DURING STOP AND
                                            RESTART SUBROUTINE MDC095*/
    2 PSACLHT      ,    /* CPU LOCKS HELD TABLE.
                                            INITIALIZED TO ZERO.
                                            IF LOCK IS HELD, WORD
                                            REPRESENTING LOCK HAS
                                            ITS ADDRESS.             */
     3 PSADISPL    PTR,              /* GLOBAL DISPATCHER LOCK   */
     3 PSAASML     PTR,              /* AUXILIARY STORAGE
                                            MANAGEMENT (ASM) LOCK
                                                               MDC002*/
     3 PSASALCL    PTR,              /* SPACE ALLOCATION LOCK
                                                               MDC003*/
     3 PSAIOSSL    PTR,              /* IOS SYNCHRONIZATION LOCK
                                                               MDC010*/
     3 PSAIOSCL    PTR,              /* IOS CHANNEL AVAILABLE
                                            TABLE LOCK         MDC004*/
     3 PSAIOSUL    PTR,              /* IOS UNIT CONTROL BLOCK
                                            LOCK               MDC005*/
     3 PSAIOSLL    PTR,              /* IOS LOGICAL CHANNEL QUEUE
                                            LOCK               MDC006*/
     3 PSATPNCL    PTR,              /* TCAM'S TPNCP LOCK  MDC007*/
     3 PSATPDNL    PTR,              /* TCAM'S TPDNCB LOCK MDC008*/
     3 PSATPACL    PTR,              /* TCAM'S TPACBDEB LOCK
                                                               MDC009*/
     3 PSAOPTL     PTR,              /* OPTIMIZER LOCK           */
     3 PSACMSL     PTR,              /* CROSS MEMORY SERVICES
                                            LOCK                     */
     3 PSALOCAL    PTR,              /* LOCAL LOCK               */
     3 PSARV023    PTR,              /* RESERVED LOCK            */
    2 PSALKSA      ,    /* SETLOCK REGISTER SAVE
                                            AREA                     */
     3 PSALKR0     FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 0               */
     3 PSALKR1     FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 1               */
     3 PSALKR2     FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 2               */
     3 PSALKR3     FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 3               */
     3 PSALKR4     FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 4               */
     3 PSALKR5     FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 5               */
     3 PSALKR6     FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 6               */
     3 PSALKR7     FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 7               */
     3 PSALKR8     FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 8               */
     3 PSALKR9     FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 9               */
     3 PSALKR10    FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 10              */
     3 PSALKR11    FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 11              */
     3 PSALKR12    FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 12              */
     3 PSALKR13    FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 13              */
     3 PSALKR14    FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 14              */
     3 PSALKR15    FIXED(31),            /* SETLOCK'S CALLER'S
                                            REGISTER 15              */
    2 PSAHLHI      ,     /* HIGHEST LOCK HELD
                                            INDICATOR                */
     3 PSACLHS     BIT(32) ,    /* CPU LOCKS HELD STRING
                                                               MDC122*/
    2 PSALITA     PTR,               /* ADDRESS OF LOCK INTERFACE
                                            TABLE                    */
    2 PSAPSWSV    CHAR(8) ,    /* PSW SAVE AREA FOR
                                            DISPATCHER AND ACR       */
    2 PSACR0      FIXED(31),             /* SAVE AREA FOR CONTROL
                                            REGISTER 0               */
    2 PSAMCHFL    BIT(8),                /* MCH RECURSION FLAGS      */
    2 PSASYMSK    CHAR(1),               /* THIS FIELD WILL BE USED
                                            IN CONJUNCTION WITH THE
                                            STNSM INSTRUCTION TO
                                            PLACE IOS CHANNEL
                                            SCHEDULER INTO A DISABLED
                                            STATE AND SIMULTANEOUSLY
                                            SAVE THE SYSTEM MASK OF
                                            THE CALLER         MDC022*/
    2 PSARV061    CHAR(1),               /* RESERVED  (MDC060) YM4244*/
    2 PSAMCHIC    CHAR(1),               /* MCH INITIALIZATION
                                            COMPLETE FLAGS     MDC098*/
    2 PSAWKRAP    PTR,               /* REAL ADDRESS OF VARY CPU
                                            PARAMETER LIST     MDC106*/
    2 PSAWKVAP    PTR,               /* VIRTUAL ADDRESS OF VARY
                                            CPU PARAMETER LIST MDC107*/
    2 PSAVSTAP    FIXED(15),             /* WORK AREA FOR VARY CPU
                                                               MDC108*/
    2 PSACPUSA    FIXED(15),               /* PHYSICAL CPU ADDRESS
                                            (STATIC)  (MDC131) YM3489*/
    2 PSASTOR     FIXED(31),             /* MASTER MEMORY'S SEGMENT
                                            TABLE ORIGIN REGISTER
                                            (STOR) VALUE             */
    2 PSADSSRS    FIXED(31),             /* REGISTER SAVE FOR DSS
                                            PROGRAM AND SVC INTERRUPT
                                            HANDLERS           MDC053*/
    2 PSADSSR2    FIXED(31),             /* REGISTER SAVE AREA FOR
                                            DSS I/O AND EXTERNAL
                                            INTERRUPT HANDLERS MDC054*/
    2 PSADSSR3    FIXED(31),             /* REGISTER SAVE AREA FOR
                                            DSS ERROR RECOVERY
                                            ROUTINE            MDC055*/
    2 PSADSSWK    FIXED(31),             /* WORK AREA FOR DSS
                                            INTERRUPT HANDLERS MDC056*/
    2 PSADSSTS  (5) FIXED(31),           /* REGISTER SAVE FOR DSS
                                            MODULES MAKING CALLS TO
                                            IQATSS             MDC023*/
    2 PSADSSFL     ,     /* DSS FLAG BYTES     MDC024*/
     3 PSADSSF1    ,               /* DSS STATUS BYTE    MDC029*/
      4 PSADSSMV BIT(1),                 /* DSS MONITORING, VS2
                                            RUNNING            MDC030*/
      4 PSADSSDM BIT(1),                 /* DSS IN VS2-2 VM    MDC031*/
      4 PSADSSDD BIT(1),                 /* DSS IN DSS VM      MDC032*/
      4 PSADSSDW BIT(1),                 /* DSS IN DSS WAIT    MDC033*/
      4 PSADSSTP BIT(1),                 /* DSS PROCESSING SIGP
                                                               MDC034*/
      4 PSADSSSP BIT(1),                 /* DSS SIGP PENDING   MDC035*/
      4 PSADSSOI BIT(1),                 /* DSS EXECUTING OVERLAID
                                            INSTRUCTION        MDC036*/
      4 PSADSSPI BIT(1),                 /* DSS EXECUTING PRIVILEGED
                                            INSTRUCTION        MDC037*/
     3 PSADSSF2    CHAR(1),              /* SYSTEM STATUS BYTE MDC038*/
 /*PSADSSPS='''FF''X'*/                 /* SYSTEM RUNNING IN PROBLEM
                                            STATE              MDC039*/
 /*PSADSSSS='''FE''X'*/                 /* SYSTEM RUNNING IN
                                            PRIVILEGED STATE   MDC040*/
     3 PSADSSF3    ,               /* DSS FLAG BYTE      MDC099*/
      4 PSADSSGP BIT(1),                 /* DSS SIGP INDICATOR MDC100*/
      4 PSADSSES BIT(1),                 /* ERROR SHORT SAVE
                                            INDICATOR          MDC113*/
      4 PSADSSNM BIT(1),                 /* NON-MONITORABLE CODE
                                            INDICATOR          MDC114*/
      4 PSADSSRW BIT(1),                 /* DSS OWNS CVTRSTWD  MDC117*/
      4 PSADSSMC BIT(1),                 /* MACHINE CHECK RUNNING
                                            (MDC132)           YM6287*/
      4 PSARV055 BIT(1),                 /* RESERVED FOR DSS   MDC100*/
      4 PSARV056 BIT(1),                 /* RESERVED FOR DSS   MDC100*/
      4 PSARV057 BIT(1),                 /* RESERVED FOR DSS   MDC100*/
     3 PSADSSF4    ,               /* DSS RECURSION FLAGS
                                                               MDC101*/
      4 PSADSSRC BIT(1),                 /* PROGRAM-SVC RECURSION
                                            FLAG               MDC057*/
      4 PSADSS12 BIT(1),                 /* PROGRAM INTERRUPT 12
                                            RECURSION FLAG     MDC058*/
      4 PSADSSIE BIT(1),                 /* I/O-EXTERNAL RECURSION
                                            FLAG               MDC059*/
      4 PSADSSC0 BIT(1),                 /* CONTROL REGISTER 0
                                            INVALID FLAG       MDC092*/
      4 PSADSSDE BIT(1),                 /* DAT ERROR WHILE DSS
                                            RUNNING IN VS2 VM  MDC102*/
      4 PSADSSVE BIT(1),                 /* DAT ERROR WHILE DSS
                                            RUNNING IN DSS VM  MDC103*/
      4 PSADSS10 BIT(1),                 /* SEGMENT EXCEPTION
                                            RECURSION FLAG     MDC104*/
      4 PSADSS05 BIT(1),                 /* ADDRESSING EXCEPTION
                                            RECURSION FLAG     MDC105*/
    2 PSADSSRP    CHAR(8) ,    /* DSS TO VS2-2 RESUME PSW
                                                               MDC025*/
    2 PSADSSPP    CHAR(8) ,    /* DSS PSW FOR RETURNING
                                            CONTROL FROM PRIVILEGED
                                            INSTRUCTION STREAM TO
                                            VS2                MDC026*/
    2 PSADSS14    FIXED(31),             /* RESTART SECOND LEVEL
                                            INTERRUPT HANDLER CONTROL
                                            REGISTER 14 SAVE AREA
                                                               MDC115*/
    2 PSADSSFW    FIXED(31),             /* FULL-WORD DSS WORK AREA
                                                               MDC116*/
    2 PSADSSPR    FIXED(31),             /* DSS REGISTER SAVE FOR
                                            PRIVILEGED INSTRUCTION
                                            STREAM             MDC028*/
    2 PSADSSED    CHAR(0) ,     /* END OF DSS FIELDS  MDC045*/
    2 PSARV025    FIXED(31),             /* RESERVED FOR DSS         */
    2 PSARV040    PTR,               /* RESERVED FOR DSS         */
    2 PSARV041    PTR,               /* RESERVED FOR DSS         */
    2 PSARV042    PTR,               /* RESERVED FOR DSS         */
    2 PSARV043    PTR,               /* RESERVED FOR DSS         */
    2 PSARV044    PTR,               /* RESERVED FOR DSS         */
    2 PSARV045    PTR,               /* RESERVED FOR DSS         */
    2 PSARSVT  (16) PTR,             /* RECOVERY STACK VECTOR
                                            TABLE (EACH ELEMENT
                                            MAPPED BELOW)      MDC064*/
    2 PSASRPSW    CHAR(8) ,    /* RESUME PSW FOR STOP AND
                                            RESTART SUBROUTINE MDC096*/
    2 PSARSPSW    CHAR(8) ,    /* RESUME PSW FIELD FOR
                                            RESTART INTERRUPT HANDLER
                                                               MDC097*/
    2 PSASTART    CHAR(16) ,   /* START FATHOM RECORDING
                                                               MDC111*/
    2 PSASTOP     CHAR(16) ,   /* STOP FATHOM RECORDING
                                                               MDC112*/
    2 PSASFACC    CHAR(4) ,     /* SETFRR ABEND COMPLETION
                                            CODE USED WHEN A SETFRR
                                            ADD IS ISSUED AGAINST A
                                            FULL FRR STACK     MDC123*/
    2 PSALSFCC    CHAR(4) ,     /* A LOAD INSTRUCTION TO
                                            PRIME REGISTER 1 WITH THE
                                            SETFRR ABEND COMPLETION
                                            CODE IN PSASFACC   MDC124*/
    2 PSASVC13    CHAR(2),               /* AN SVC 13 INSTRUCTION
                                                               MDC125*/
    2 PSARV059    FIXED(15),             /* RESERVED                 */
    2 PSAPIR2     FIXED(31),             /* PROGRAM CHECK FLIH
                                            REGISTER SAVE
                                            (MDC303)         @ZM08516*/
    2 PSAPCPSW    CHAR(8) ,    /* TEMPORARY OLD PSW STORAGE
                                            FOR PROGRAM FLIH
                                            (MDC129)           YM0943*/
    2 PSAATCVT    PTR,               /* ADDRESS OF VTAM ATCVT.
                                            INITIALIZED BY VTAM.
                                            (MDC300)         @Z30AP9A*/
    2 PSAWTCOD    PTR,               /* CALLER-SUPPLIED WAIT
                                            STATE INFORMATION FOR
                                            STOP/RESTART
                                            (MDC306)         @ZA00904*/
    2 PSACDAL     PTR,               /* ADDRESS OF COMMON
                                            DISPATCHER ELEMENT FOR
                                            THIS CPU
                                            (MDC307)         @Z40FP9A*/
    2 PSARV062    FIXED(31),             /* RESERVED         @Z40AQ9A*/
    2 PSAUSEND    CHAR(0) ,    /* END OF ASSIGNED FIELDS
                                                               MDC109*/
    2  YCC00000687          CHAR(2024) , /* RESERVED         @Z40AQ9A*/
    2 PSASTAK     CHAR(596) ,  /* NORMAL FRR STACK
                                            (MDC304)         @ZM32352*/
    2  YCC00000932          CHAR(428);             /* RESERVED FOR EXPAN
                                            PSASTAK (MDC304) @ZM32352*/


 %IF IKEPLS='2'  %THEN
     %GOTO PSA0100;
 %GOTO PSA0200;
 %PSA0100 : ;
 DECLARE FLC DEF(PSA) CHAR(LENGTH(PSA)) ;
 %PSA0200 : ;


 DECLARE
 %IF IKEPLS='2'  %THEN
     %GOTO PSA0300;
   1 PSARSVTE  BASED(ADDR(PSARSVT)) ,
 %GOTO PSA0400;
 %PSA0300 : ;
   1 PSARSVTE CHAR(64) DEF(PSARSVT) ,
 %PSA0400 : ;
                                         /* RECOVERY STACK VECTOR
                                            TABLE              MDC065*/
    2 PSACSTK     PTR,               /* ADDRESS OF CURRENTLY USED
                                            FUNCTIONAL RECOVERY
                                            ROUTINE (FRR) STACK
                                                               MDC061*/
    2 PSANSTK     PTR,               /* ADDRESS OF NORMAL FRR
                                            STACK              MDC062*/
    2 PSASSTK     PTR,               /* ADDRESS OF SVC-I/O-
                                            DISPATCHER FRR STACK
                                                               MDC063*/
    2 PSASSAV     PTR,               /* ADDRESS OF INTERRUPTED
                                            STACK SAVED BY SVC-I/O-
                                            DISPATCHER         MDC066*/
    2 PSAMSTK     PTR,               /* ADDRESS OF MCH FRR STACK
                                                               MDC067*/
    2 PSAMSAV     PTR,               /* ADDRESS OF INTERRUPTED
                                            STACK SAVED BY MCH MDC068*/
    2 PSAPSTK     PTR,               /* ADDRESS OF PROGRAM CHECK
                                            FLIH FRR STACK     MDC069*/
    2 PSAPSAV     PTR,               /* ADDRESS OF INTERRUPTED
                                            STACK SAVED BY PROGRAM
                                            CHECK FLIH         MDC070*/
    2 PSAESTK1    PTR,               /* ADDRESS OF EXTERNAL FLIH
                                            FRR STACK FOR NON-
                                            RECURSIVE ENTRIES  MDC071*/
    2 PSAESAV1    PTR,               /* ADDRESS OF INTERRUPTED
                                            STACK SAVED BY NON-
                                            RECURSIVE ENTRIES  MDC072*/
    2 PSAESTK2    PTR,               /* ADDRESS OF EXTERNAL FLIH
                                            FRR STACK FOR FIRST LEVEL
    2 PSAESAV3    PTR,               /* ADDRESS OF INTERRUPTED
                                            STACK SAVED BY EXTERNAL
                                            FLIH (ACR) FOR SECOND
                                            LEVEL RECURSIONS   MDC076*/
    2 PSARSTK     PTR,               /* ADDRESS OF RESTART FLIH
                                            FRR STACK          MDC077*/
    2 PSARSAV     PTR;               /* ADDRESS OF INTERRUPTED
                                            STACK SAVED BY RESTART
                                            FLIH               MDC078*/
./       ADD   NAME=IHAPVT
 /********************************************************************/
 /* DISCLAIMER:                                                      */
 /*     THIS IBM MAPPING MACRO HAS BEEN CONVERTED FOR USE            */
 /* IN PLIX BY                                                       */
 /*     HOWARD GILBERT                                               */
 /*     YALE COMPUTER CENTER                                         */
 /*     175 WHITNEY AVE                                              */
 /*     NEW HAVEN, CONN. 06520                                       */
 /*     203 432-4080                                                 */
 /* THE AUTHOR HAS ONLY VERIFIED THE ACCURACY OF THE CONVERSION      */
 /* FOR THOSE FIELDS REQUIRED BY LOCALLY WRITTEN CODE. THE MACRO     */
 /* IS MADE AVAILABLE TO SUPPORT SUCH CODE AND 'AS IS' FOR OTHER     */
 /* APPLICATIONS REQUIRED BY POTENTIAL USERS.                        */
 /*                                                                  */
 /* VERSION DATE: MAY 1,1977                                         */
 /********************************************************************/
         %GOTO PVTPLS;                                              /*
         MACRO
         IHAPVT &DSECT=YES
         AGO   .PVTARND
 **********************************************************************
                                                                      *
  STATUS -                                                            *
     CHANGE LEVEL 2                                                   *
  FUNCTION -                                                          *
     MAPPING MACRO FOR PAGE VECTOR TABLE                              *
  ENTRY POINTS -                                                      *
      IHAPVT MACRO CALL                                               *
  INPUT -                                                             *
     SEE IHAPVT MACRO DEFINITION                                      *
  OUTPUT -                                                            *
     PVT MAPPING MACRO                                                *
  EXTERNAL REFERENCES -                                               *
     N/A                                                              *
  EXITS, NORMAL -                                                     *
     N/A                                                              *
  EXITS, ERROR -                                                      *
     N/A                                                              *
  TABLES/WORK AREAS -                                                 *
     N/A                                                              *
  ATTRIBUTES -                                                        *
     BILINGUAL MACRO                                                  *
  CHARACTER CODE DEPENDENCY -                                         *
     NONE                                                             *
  NOTES -                                                             *
     NONE                                                             *
                                                                      *
 **********************************************************************
.PVTARND ANOP
         IEZBITS
 **********************************************************************
 *                       PAGE VECTOR TABLE    08/15/75                *
 *                                                                    *
 *       THE PAGING VECTOR TABLE (PVT) IS A COLLECTION OF ADDRESS     *
 *       VECTORS (VCONS), CONSTANTS, QUEUE ANCHORS AND COUNTERS THAT  *
 *       ARE COMMON IN ALL RSM MODULES.  THE PVT CAN BE LOCATED VIA   *
 *       THE CVTPVTP POINTER IN THE CVT.                              *
 *                                                                    *
 **********************************************************************
         AIF   ('&DSECT'  EQ 'NO').PVT001
PVT      DSECT , PVTPTR
         AGO   .PVT002
.PVT001  ANOP
PVT      DS    0F
.PVT002  ANOP
PVTFLAG1 DC    BL1'00000000' - FLAG BYTE
PVTPMSG  EQU   BIT0 -          WHEN 1, PREFERRED AREA EXPANSION MESSAGE
                               HAS ALREADY BEEN ISSUED         @YD03005
PVTBGMS  EQU   BIT1 -          WHEN =1, GETMAIN CANNOT BE CALLED
PVTSRBIU EQU   BIT2 -          WHEN 1, PVTRSRB IS IN USE.      @Z30GNYD
PVTPCBLT EQU   BIT3 -          WHEN ON, THE INITIAL PCB POOL HAS BEEN
                               BUILT AS PART OF SYSTEM INITIALIZATION.
PVTRESV1 EQU   BIT4 -          RESERVED                        @Z40WPYD
PVTLSI   EQU   BIT5 -          AFC LOW SYSEVENT ISSUED FLAG. WHEN 1,
                               THE AFC LOW SYSEVENT HAS BEEN ISSUED.
PVTSIT   EQU   BIT6 -          SUSPEND IN TROUBLE, WHEN ON NEED ANOTHER
                               SSRB. WHEN OFF PVTSSRB HAS ADDR OF EXTRA
PVTDUMP  EQU   BIT7 -          WHEN 1, THE RSM RECOVERY ROUTINE WILL
                               DUMP THE PVT, PFT, SQA, AND CURRENT LSQA
                               ON C0D ABENDS. SET/RESET MANUALLY.
PVTFLAG2 DC    BL1'00000000' - RESERVED
 *
 *       THE RFA ROUTINES AND PFTE ENQ/DEQ WORK TOGETHER IN MAINTAINING
 *       THE NEXT THREE COUNTS, THEIR RELATED SRM SYSEVENTS, AND
 *       CONTROLLING FLAGS LISTED ABOVE.
 *
PVTAFC   DC    H'0' -          AVAILABLE FRAME COUNT
PVTAFCLO DC    H'0' -          AVAILABLE FRAME COUNT LOW THRESHOLD.
                               SRM IS NOTIFIED WHEN PVTAFC IS TOO LOW.
PVTAFCOK DC    H'0' -          THRESHOLD AT WHICH THE SRM IS NOTIFIED
                               THAT PVTAFC IS AT A SATISFACTORY LEVEL
PVTPOOL  DC    H'0' -          THE TOTAL NUMBER OF REAL STORAGE
                               FRAMES CURRENTLY AVAILABLE FOR REAL
                               STORAGE MANAGEMENT USE.  THIS COUNT
                               EXCLUDES FRAMES OCCUPIED BY THE
                               NUCLEUS AND FRAMES MARKED AS BAD OR
                               OFFLINE
PVTPCBS  DC    AL1(0) -        NUMBER OF PCBS TO BE CREATED
                               AT SYSTEM INITIALIZATION.
PVTSSPIN DC    XL1'00' -       SLAVE SPIN BYTE USED BY PAGE
                               INVALIDATION ROUTINE
PVTPFTP  DS    A -             APPARENT ORIGIN OF PAGE FRAME TABLE
                               (VM ADDR)
PVTFPFN  DS    AL2 -           PFTE INDEX (RBN) TO FIRST PFTE IN PFT.
                               RBN IS HIGH ORDER 12 BITS OF A 24 BIT
                               REAL ADDRESS, RBN IS LEFT JUSTIFIED IN
                               HALF WORD, 4 LOW ORDER BITS ARE ZERO
PVTLPFN  DS    AL2 -           PFTE INDEX (RBN) TO LAST PFTE IN PFT.
                               HIGHEST ADDRESS FRAME KNOWN TO RSM
PVTFVR   DS    AL2 -           PFTE INDEX (RBN) OF FIRST PFTE FOR V=R
                               AREA, RBN OF LOWEST ADDRESS FRAME OF
                               V=R AREA
PVTLVR   DS    AL2 -           PFTE INDEX (RBN) OF LAST PFTE FOR V=R
                               AREA, RBN OF HIGHEST ADDRESS FRAME OF
                               V=R AREA
PVTLPRIV DS    AL2 -           VIRTUAL STORAGE INDEX (VBN) TO THE FIRST
                               PAGE OF THE USER PRIVATE AREA.
                               VBN IS THE HIGH ORDER 12 BITS OF A 24
                               BIT VIRTUAL ADDRESS
PVTLCSA  DS    AL2 -           VBN TO THE FIRST PAGE OF CSA, SAME AS
                               LOWEST ADDRESS PAGE ABOVE THE USER
                               PRIVATE AREA
PVTSQDC  DC    FL1'0' -        SQA QUEUE DEFICIT COUNT.
                               THE NUMBER OF FRAMES NEEDED TO
                               RESTORE THE SQA RESERVE QUEUE TO THE
                               NUMBER OF FRAMES SPECIFIED IN THE PVT
PVTSRBNO DC    FL1'0' -        NUMBER OF SRBS TO BE OBTAINED IF
                               REPLENISHMENT IS NECESSARY.     @Z30GNYD
PVTPCBNO DC    FL1'0' -        NUMBER OF PCB'S TO BE OBTAINED IF
                               REPLENISHMENT IS NECESSARY
PVTPTLB  DC    XL1'0' -        COMMUNICATION BYTE USED BY PAGE
                               INVALIDATION ON MULTIPLE PROCESSORS
PVTRSQA  DC    H'0' -          THE NUMBER OF TIMES AN SQA RESERVED
                               FRAME WAS USED FOR SQA ALLOCATION.
PVTDFRS  DC    H'0' -          THE COUNT OF THE NUMBER OF TIMES
                               A FRAME ALLOCATION REQUEST
                               WAS DEFERRED.
PVTPCBCT DC    H'0' -          COUNT OF THE NUMBER OF PCB'S
                               CURRENTLY ON THE FREE QUEUE
PVTPCBLO DC    H'0' -          LOW THRESHOLD OF PCB FREE QUEUE.
                               WHEN THE PCB COUNT GOES BELOW THIS
                               THRESHOLD, THE PCB POOL MUST BE
                               EXTENDED.
PVTVROOT DC    A(0) -          VSA OF FIRST ROOT PCB ON V=R REGION
                               WAIT QUEUE
PVTRSUS  DC    AL2(0) -        RECONFIGURABLE STORAGE UNIT SIZE IN
                               FRAMES                          @YD03005
PVTVRDFC DC    FL1'0'          V=R SQA RESERVE QUEUE DEFICIT COUNT.
                               THE NUMBER OF SQA RESERVE FRAMES WHICH
                               HAVE BEEN INTERCEPTED FOR V=R @ZA10767
PVTRESV4 DC    AL1(0) -        RESERVED                        @ZA10767
PVTREUS  DC    A(0) -          ADDRESS OF REUSABLE RECLAIM OR FIRST
                               REFERENCE PCB                   @Z40WPYD
PVTPRCA  DC    A(0) -          ADDRESS OF CURRENT RECOVERY COMM AREA
PVTOROOT DC    A(0) -          VSA OF THE FIRST VARY OFFLINE ROOT PCB
PVTLQSA  DC    AL2(0) -        VBN OF LOWEST ADDRESSED PAGE OF THE
                               VIRTUAL AREA TO BE PRESERVED FOR
                               QUICKSTARTS.
PVTHQSA  DC    AL2(0) -        VBN OF NEXT HIGHEST PAGE ABOVE THE
                               VIRTUAL AREA TO BE PRESERVED FOR
                               QUICKSTARTS.
PVTPCIWA DC    A(0) -          ADDRESS OF FETCH PROTECTED WORKAREA FOR
                               PAGE SERVICES ROUTINES
PVTSRBID DS    0F -            ID OF CELL POOL FOR RSM SRBS
         DC    CL3'RSM'
         DC    X'01'
 *
 *             V-CONS FOR MAJOR RSM ENTRY POINTS
 *
PVTPSIB  DC    V(IEAVPSIB) -   EXTERNAL PSI BRANCH ENTRY
PVTPSINT DC    V(IEAVPSII) -   INTERNAL PSI BRANCH ENTRY
PVTPSQA  DC    V(IEAVSQA2) -   SQA, LSQA ALLOCATION            @Z40WPYD
PVTPGFA  DC    V(IEAVGFA2) -   GENERAL FRAME ALLOCATION        @Z40WPYD
PVTPGFAD DC    V(IEAVGFD2) -   GFA DEFER PROCESSOR             @Z40WPYD
PVTPIOP  DC    V(IEAVPIO2) -   PAGE I/O POST                   @Z40WPYD
PVTPIOCP DC    V(IEAVIOC2) -   I/O COMPLETION PROCESSOR - SRB ENTRY
                                                               @Z40WPYD
PVTREP2  DC    V(IEAVREP2) -   SRB REPLENICH ROUTINE           @Z40WPYD
PVTPCB   DC    V(IEAVPCB2) -   PCB MANAGER                     @Z40WPYD
PVTPFTE  DC    V(IEAVPFT2) -   PFTE ENQ/DEQ                    @Z40WPYD
PVTPFP   DC    V(IEAVFP1) -    FIND PAGE - LOCAL LOCK HOLDER E.P.
PVTPFP2  DC    V(IEAVFP2) -    FIND PAGE - RSM ENTRY POINT
PVTPRFR  DC    V(IEAVRFR2) -   REAL FRAME REPLACEMENT SELECT RTN
                                                               @Z40WPYD
PVTPVRPO DC    V(IEAVEQRP) -   V=R FORCE PAGE OUT
PVTPPIOI DC    V(IEAVPIOI) -   PAGE I/O INITIATOR              @Z40WPYD
PVTPVEQR DC    V(IEAVEQR2) -   V=R ALLOCATION                  @Z40WPYD
PVTPVRLS DC    V(IEAVEQRF) -   V=R RELEASE
PVTPVRIN DC    V(IEAVEQRI) -   V=R INTERCEPT
PVTPVRC  DC    V(IEAVEQRC) -   V=R COMPLETION
PVTPRCF  DC    V(IEAVRCF2) -   STORAGE RECONFIGURATION INTERFACE
                                                               @Z40WPYD
PVTPRCFI DC    V(IEAVRCFI) -   RECONFIGURATION INTERCEPT ROUTINE
PVTPRCV  DC    V(IEAVRCV2) -   FUNCTIONAL RECOVERY ROUTINE     @Z40WPYD
PVTPSWIN DC    V(IEAVSWI2) -   SWAP IN                         @Z40WPYD
PVTPSOUT DC    V(IEAVSOU2) -   SWAP OUT                        @Z40WPYD
PVTPSWPC DC    V(IEAVSWPC) -   SWAP OUT COMPLETION             @Z40WPYD
PVTPINV  DC    V(IEAVINV2) -   PAGE INVALIDATION               @Z40WPYD
PVTPCSEG DC    V(IEAVCSE2) -   CREATE SEGMENT EXTERNAL BRANCH ENTRY
                                                               @Z40WPYD
PVTPCSGB DC    V(IEAVCSGB) -   CREATE SEGMENT INTERNAL BRANCH ENTRY
PVTPDSEG DC    V(IEAVDSE2) -   DESTROY SEGMENT                 @Z40WPYD
PVTPSRBP DC    V(IEAVSRBP) -   SRB PURGE ROUTINE
PVTPITAS DC    V(IEAVITA2) -   INITIALIZE ADDRESS SPACE        @Z40WPYD
PVTPFXLD DC    V(IEAVFXL2) -   PGFIX AND PGLOAD PROCESSOR      @Z40WPYD
PVTPOUT  DC    V(IEAVOUT2) -   PGOUT PROCESSOR                 @Z40WPYD
PVTPRELS DC    V(IEAVREL2) -   PGRLSE PROCESSOR                @Z40WPYD
PVTPFREE DC    V(IEAVFRE2) -   PGFREE PROCESSOR                @Z40WPYD
PVTPRELV DC    V(IEAVRELV) -   FREEMAIN-RELEASE ENTRY POINT
PVTPRELF DC    V(IEAVRELF) -   DEFERRED RELEASE ENTRY POINT
PVTPOPBR DC    V(IEAVOPBR) -   SCHEDULE SUBROUTINE OF PIOP
PVTPPREF DC    V(IEAVPRE2) -   PREFERRED AREA STEAL ROUTINE   @Z40WPYD
PVTPSWPP DC    V(IEAVSWPP) -   SWAP-IN POST ROUTINE IN MODULE IEAVSWIN
                                                              @Z40WPYD
PVTSWPIO DC    V(ILRSWAP) -    ASM'S SWAP INTERFACE           @Z40WPYD
PVTPAGIO DC    V(ILRPAGIO) -   ASM'S PAGING I/O INTERFACE     @Z40WPYD
PVTFRSLT DC    V(ILRFRSLT) -   ASM'S FREE SLOT ROUTINE        @Z40WPYD
PVTPRSET DC    V(IEAVRSET) -   PCFLIH'S RESET ROUTINE         @Z40WPYD
 *
 *             EVENT COUNTERS FOR SMF AND TUNING PURPOSES
 *
 *          ALL FIELDS EXCEPT PVTCFMCT ARE WRAP-AROUND COUNTS.
 *
PVTNPIN  DC    F'0' -          NUMBER OF PAGES PAGED IN, EXCLUDING
                               SWAP-INS AND VIO PAGE-INS
PVTNPOUT DC    F'0' -          NUMBER OF PAGES PAGED OUT, EXCLUDING
                               SWAP-OUTS AND VIO PAGE-INS
PVTVAMI  DC    F'0' -          NUMBER OF VIO PAGE-INS, EXCLUDING SWAP
PVTVAMO  DC    F'0' -          NUMBER OF VIO PAGE-OUTS, EXCLUDING SWAP
PVTVAMR  DC    F'0' -          NUMBER OF VIO RECLAIMS
PVTSPIN  DC    F'0' -          NUMBER OF PAGES SWAPPED IN
PVTSPOUT DC    F'0' -          NUMBER OF PAGES SWAPPED OUT
PVTNPREC DC    F'0' -          NUMBER OF PAGES RECLAIMED,
                               EXCLUDING SWAP RECLAIMS         @Z40WPYD
PVTNSWPS DC    F'0' -          NUMBER OF SUCCESSFUL SWAP-INS
PVTCAIN  DC    F'0' -          NUMBER OF COMMON AREA PAGE-INS  @Z40WPYD
PVTCAOUT DC    F'0' -          NUMBER OF COMMON AREA PAGE-OUTS @Z40WPYD
PVTCAREC DC    F'0' -          NUMBER OF RECLAIMS OF COMMON AREA
                               PAGES                           @Z40WPYD
PVTSPREC DC    F'0' -          NUMBER OF PRIVATE AREA PAGEABLE PAGES
                               RECLAIMED ACROSS A SWAP         @Z40WPYD
PVTCFMCT DC    H'0' -          NUMBER OF FRAMES CURRENTLY ASSIGNED TO
                               PAGEABLE COMMON AREAS (CSA AND LPA)
PVTSPFR  DC    H'0' -          NUMBER OF FRAMES FREED BY SWAP-OUT
                               WITHOUT OUTPUT I/O.
 *
 *       THIS SECTION OF THE PVT CONTAINS ANCHORS FOR PFTE AND PCB
 *       QUEUES.  THE FIELDS MUST REMAIN IN THIS ORDER BECAUSE THEY
 *       ARE INDEXED BY QUEUE NUMBERS.  ALSO, THE PFTE AND PCB MANAGERS
 *       DEPEND ON THE COMPILE-TIME DISPLACEMENT OF THIS SECTION FROM
 *       THE PVT ORIGIN.  ALL QUEUES ARE FORWARD AND BACKWARD CHAINED.
 *
 *   NOTE:  IF FIELDS ARE ADDED OR DELETED FROM THIS SECTION,
 *          THE PCB AND PFTE QUEUE INDEX VALUES MUST BE ADJUSTED.
 *
PVTQS    DS    0F -            BEGINNING OF ORDERED BLOCK OF QUEUE
                               ANCHORS
PVTAFQF  DC    AL2(0) -        RBN OF FIRST PFTE ON AVAILABLE FRAME Q
PVTAFQL  DC    AL2(0) -        RBN OF LAST PFTE ON AVAILABLE FRAME Q
PVTRSRVF DC    AL2(0) -        RBN OF FIRST PFTE ON SQA RESERVED Q
PVTRSRVL DC    AL2(0) -        RBN OF LAST PFTE ON SQA RESERVED Q
PVTCFQF  DC    AL2(0) -        RBN OF FIRST PFTE ON COMMON FRAME Q
                               (CSA AND LPA FRAMES)
PVTCFQL  DC    AL2(0) -        RBN OF LAST PFTE ON COMMON FRAME Q
PVTSQAQF DC    AL2(0) -        RBN OF FIRST PFTE ON SQA FRAME Q
PVTSQAQL DC    AL2(0) -        RBN OF LAST PFTE ON SQA FRAME Q
PVTFPCBF DC    A(0) -          VSA OF FIRST PCB ON THE FREE QUEUE
                               (AVAILABLE PCB'S)
PVTFPCBL DC    A(0) -          VSA OF LAST PCB ON THE FREE Q
PVTGFADF DC    A(0) -          VSA OF FIRST PCB ON GFA DEFERRED
                               ALLOCATION Q
PVTGFADL DC    A(0) -          VSA OF LAST PCB ON GFA DEFERRED
                               ALLOCATION Q
PVTCIOQF DC    A(0) -          VSA OF FIRST PCB ON COMMON I/O Q
PVTCIOQL DC    A(0) -          VSA OF LAST PCB ON COMMON I/O Q
 *
 *      FOLLOWING ARE THE RSM WORK/SAVE AREA DEFINITIONS
 *      USE OF THIS AREA IS GUARDED BY THE SALLOC LOCK.
 *
PVTWSAX  DS    0F -            BEGINING OF THE WORK SAVE AREA
PVTWSA1  DS    18F -           WORK/SAVE AREA FOR IEAVCSEG/IEAVDSEG
PVTWSA2  DS    18F -           WORK/SAVE AREA FOR IEAVDLAS/P.S.SUBRTNS
PVTWSA3  DS    18F -           WORK/SAVE AREA FOR IEAVEQRI/IEAVRCFI
PVTWSA4  DS    18F -           WORK/SAVE AREA FOR IEAVPSII
PVTWSA5  DS    18F -           WORK/SAVE AREA FOR IEAVRELV
PVTWSA6  DS    18F -           WORK/SAVE AREA FOR IEAVRELF
PVTWSA7  DS    18F -           WORK/SAVE AREA FOR ALL ROOT EXITS,
                               (IEAVFXLD AND IEAVSWIN)
PVTWSA8  DS    22F -           WORK/SAVE AREA FOR IEAVGFA/IEAVSQA
                                                               @Z40WPYD
PVTWSA9  DS    20F -           WORK/SAVE AREA FOR IEAVOPBR
PVTWSA10 DS    20F -           WORK/SAVE AREA FOR IEAVPIOP AND IEAVIOCP
                                                               @Z40WPYD
PVTWSA11 DS    18F -           WORK/SAVE AREA FOR IEAVPSI
PVTWSA12 DS    18F -           WORK/SAVE AREA FOR IEAVPFTE
PVTWSA13 DS    18F -           WORK/SAVE AREA FOR IEAVPCB
PVTWSA14 DS    18F -           WORK/SAVE AREA FOR IEAVFP2/IEAVINV
PVTWSA15 DS    18F -           WORK/SAVE AREA FOR IEAVAMSI,IEAVSOUT AND
                               IEAVRFR
PVTWSA16 DS    18F -           WORK/SAVE AREA FOR IEAVPREF     @Z40WPYD
PVTWSA17 DS    18F -           WORK/SAVE AREA FOR IEAVREP2     @Z40WPYD
PVTWSA18 DS    18F -           WORK/SAVE AREA FOR IEAVSWPC     @Z40WPYD
PVTSAVE  DS    18F -           SAVE AREA FOR CALLING OTHER PROGRAMS
PVTACA   DS    6F -            ASM CONTROL AREA (ACA) USED BY RSM
                               ROUTINES WHEN REQUESTING ASM SERVICES
                               OTHER THAN REQUEST I/O.
PVTSSRB  DS    F               ADDR OF EXTRA SSRB FOR PCFLIH
PVTSRBS  DC    FL1'0' -        NUMBER OF SRB'S TO BE BUILT INITIALLY.
                                                               @Z30GNYD
PVTRESV5 DS    CL3 -           RESERVED                        @Z30GNYD
PVTRSRB  DS    0F              SRB TO SCHEDULE REPLENISH       @Z30GNYD
         DS    CL44 -          RESERVED SRB USED TO SCHED IEAVREP1
PVTPERFX DC    H'0' -          PERCENTAGE OF AVAILABLE FRAMES THAT MAY
                               BE FIXED. USED IN COMPUTING PVTMAXFX.
                                                               @YA01572
PVTMAXFX DC    H'0' -          FIXED FRAME THRESHOLD. SRM IS NOTIFIED
                               WHEN THE NUMBER OF FIXED FRAMES EQUALS
                               THIS VALUE.                     @YA01572
PVTPEROK DC    H'0' -          A LESSER PERCENTAGE THAN PVTPERFX. USED
                               IN COMPUTING PVTFIXOK           @YA01572
PVTFIXOK DC    H'0' -          NUMBER OF FIXED FRAMES ACCEPTABLE FOR
                               NORMAL SYSTEM PROCESSING.       @YA01572
PVTDEFFX DC    H'0' -          PAGE FIS REQUESTS ARE DEFERRED WHEN THE
                               AFQ IS EQUAL TO THIS VALUE.     @YA01572
PVTCNTFX DC    H'0' -          TOTAL SYSTEM COUNT OF FIXED FRAMES. THIS
                               INCLUDES V=R, LSQA, SQA, PAGE FIX, AND
                               SQA RESERVE QUEUE FRAMES.       @YA01572
PVTSQAFX DC    H'0' -          NUMBER FRAMES ALLOCATED TO SQA  @YA01572
PVTCOMFX DC    H'0' -          NUMBER FRAMES ALLOCATED TO COMMON AREA
                               FIXES.                          @YA01572
PVTCHUIC DC    H'0' -          HIGHEST UNREFERENCED INTERVAL COUNT FOR
                               THE CURRENTLY ALLOCATED COMMON AREA
                               FRAMES.                         @Z40FPYD
PVTSPARE DC    H'0' -          RESERVED.                       @Z40FPYD
PVTEND   EQU   *               END OF PVT                      @Z40WPYD
PVTLEN   EQU   *-PVT           LENGTH OF PVT
         MEND  , */
 %PVTPLS: ;
  /*******************************************************************/
  /*                      PAGE VECTOR TABLE   08/15/75               */
  /*                                                                 */
  /* THE PAGING VECTOR TABLE (PVT) IS A COLLECTION OF ADDRESS        */
  /* VECTORS (VCONS), CONSTANTS, QUEUE ANCHORS AND COUNTERS THAT ARE */
  /* COMMON IN ALL RSM MODULES.  THE PVT CAN BE LOCATED VIA THE      */
  /* CVTPVTP POINTER IN THE CVT.                                     */
  /*******************************************************************/
 DECLARE                            /* DECLARE PVT LEVEL 1           */
   1 PVT BASED (PVTPTR)             /* DECLARE BASE POINTER          */
         ,
     4 PVTFLAG1 ,             /* FLAG BYTE                     */
       8 PVTPMSG  BIT(1),           /* WHEN 1,PREFERRED AREA EXPANSION
                                     MESSAGE HAS BEEN ISSUED @YD03005*/
       8 PVTBGMS  BIT(1),           /* WHEN =1, GETMAIN CANNOT
                                       BE CALLED                     */
       8 PVTSRBIU BIT(1),           /* WHEN 1,PVTRSRB IN USE @Z30GNYD*/
       8 PVTPCBLT BIT(1),           /* INITIAL PCB AND SRB POOLS HAVE
                                       BEEN BUILT.                   */
       8 PVTRESV1 BIT(1),           /* RESERVED              @Z40WPYD*/
       8 PVTLSI   BIT(1),           /* AFC LOW SYSEVENT ISSUED FLAG
                                       WHEN 1 AN AFC LOW SYSEVENT HAS
                                       BEEN ISSUED.  NO MORE SHOULD
                                       BE ISSUED AT THIS TIME.       */
       8 PVTSIT   BIT(1) ,          /*SUSPEND IN TROUBLE, WHEN ON NEED
                                      SSRB. WHEN OFF PVTSSRB HAS ADDR*/
       8 PVTDUMP  BIT(1),           /* WHEN 1, THE RSM RECOVERY ROUTINE
                                       WILL DUMP THE PVT, PFT, SQA, AND
                                       CURRENT LSQA WHENEVER ENTERED.*/
     4 PVTFLAG2 BIT(8),             /* RESERVED FOR FLAGS            */

     /* THE RFA ROUTINES AND PFTE ENQ/DEQ WORK TOGETHER IN           */
     /* MAINTAINING THE NEXT THREE COUNTS, THEIR RELATED SRM         */
     /* SYSEVENTS, AND CONTROLLING FLAGS LISTED ABOVE.               */

     4 PVTAFC   FIXED(15),          /* AVAILABLE FRAME COUNT         */
     4 PVTAFCLO FIXED(15),          /* PVTAFC LOW THRESHOLD          */
     4 PVTAFCOK FIXED(15),          /* THRESHOLD AT WHICH SRM
                                       IS NOTIFIED THAT PVTAFC IS AT
                                       A SATISFACTORY LEVEL.         */
     4 PVTPOOL  FIXED(15),          /* THE TOTAL NUMBER OF REAL
                                       STORAGE FRAMES CURRENTLY
                                       AVAILABLE FOR STORAGE MANAGEMENT
                                       USE.  THIS COUNT EXCLUDES FRAMES
                                       OCCUPIED BY THE NUCLEUS AND
                                       FRAMES MARKED AS BAD OR
                                       OFFLINE.                      */
     4 PVTPCBS  BIT(8),           /* NUMBER OF PCBS AND SRBS TO BE
                                       BUILT AT SYSTEM INITIALIZATION*/
     4 PVTSSPIN CHAR(1),            /* SLAVE SPIN BYTE USED BY
                                       PAGE INVALIDATION ROUTINE     */
     4 PVTPFTP  PTR,            /* APPARENT ORIGIN OF PAGE
     4 PVTFVR   BIT(16),            /* INDEX TO FIRST PFTE FOR
                                       V=R AREA.                     */
     4 PVTLVR   BIT(16),            /* INDEX FOR LAST PFTE FOR V=R
                                       AREA                          */
     4 PVTLPRIV BIT(16),            /* VBN OF FIRST PAGE OF USER
                                       PRIVATE AREA. VBN IS HIGH ORDER
                                       12 BITS OF A 24 BIT VIRTUAL
                                       ADDRESS, LEFT-JUSTIFIED.      */
     4 PVTLCSA  BIT(16),            /* VBN OF FIRST PAGE OF CSA, SAME
                                       AS LOWEST ADDRESS PAGE ABOVE
                                       THE USER PRIVATE AREA         */
     4 PVTSQDC  BIT(8),           /* SQA DEFICIT COUNT. THE NUMBER
                                       OF FRAMES NEEDED TO RESTORE
                                       THE SQA RESERVE QUEUE.        */
     4 PVTSRBNO BIT(8),           /* NUMBER OF SRB'S TO BE OBTAINED
                                       IF REPLENISHMENT IS NECESSARY.
                                                            @Z30GNYD */
     4 PVTPCBNO BIT(8),           /* NUMBER OF PCB'S/SRBS TO BE
                                       OBTAINED IF REPLENISHMENT IS
                                       NECESSARY.                    */
     4 PVTPTLB  CHAR(1),            /* COMMUNICATION BYTE USED BY
                                       PGINV ON MULTIPLE CPU'S       */
     4 PVTRSQA  FIXED(15),          /* THE NUMBER OF TIMES AN SQA
                                       RESERVED FRAME WAS USED FOR
                                       SQA ALLOCATION                */
     4 PVTDFRS  FIXED(15),          /* THE COUNT OF THE NUMBER OF
                                       TIMES A FRAME ALLOCATION WAS
                                       DEFERRED.                     */
     4 PVTPCBCT FIXED(15),          /* THE COUNT OF THE NUMBER OF PCB'S
                                       CURRENTLY ON THE FREE QUEUE.  */
     4 PVTPCBLO FIXED(15),          /* LOW THRESHOLD OF PCB FREE
                                       QUEUE.  WHEN THE PCB COUNT
                                       GOES BELOW THIS THRESHOLD
                                       THE PCB POOL WILL BE EXTENDED */
     4 PVTVROOT PTR,            /* VSA OF FIRST ROOT PCB ON THE
                                       V=R REGION WAIT QUEUE         */
     4 PVTRSUS BIT(16),             /* RECONFIGURABLE STORAGE UNIT
                                       SIZE IN FRAMES        @YD03005*/
      4 PVTVRDFC BIT(8),         /* V=R SQA RESERVE QUEUE DEFICIT
                                       COUNT. THE NUMBER OF SQA
           RESERVE QUEUE FRAMES WHICH HAVE BEEN INTERCEPTED
           FOR V=R @ZA10767*/
     4 PVTRESV4 BIT(8),            /* RESERVED              @ZA10767*/
     4 PVTREUS  PTR,            /* ADDRESS OF REUSABLE RECLAIM OR
                                       FIRST REFERENCE PCB   @Z40WPYD*/
     4 PVTPRCA  PTR,            /* ADDRESS OF CURRENT RECOVERY
                                       COMMUNICATIONS AREA           */
     4 PVTOROOT PTR,            /* VSA OF THE FIRST VARY OFFLINE
                                       ROOT PCB                      */
     4 PVTLQSA  BIT(16),            /* VBN OF LOWEST ADDRESSED PAGE
                                       OF THE VIRTUAL AREA TO BE
                                       PRESERVED FOR QUICKSTARTS.    */
     4 PVTHQSA  BIT(16),            /* VBN OF THE NEXT HIGHEST PAGE
                                       ABOVE THE VIRTUAL AREA TO BE
                                       PRESERVED FOR QUICKSTARTS.    */
     4 PVTPCIWA PTR,            /* ADDRESS OF FETCH PROTECTED
                                       WORKAREA FOR PAGE SERVICES    */
     4 PVTSRBID CHAR(4),            /* ID OF CELL POOL FOR RSM SRBS. */
     /*                                                              */
     /*          V-CONS FOR MAJOR RSM ENTRY POINTS                   */
     /*                                                              */
     4 PVTPSIB  PTR,            /* PSI BRANCH ENTRY              */
     4 PVTPSINT PTR,            /* INTERNAL PSI BRANCH ENTRY     */
     4 PVTPSQA  PTR,            /* SQA, LSQA ALLOCATION          */
     4 PVTPGFA  PTR,            /* GENERAL FRAME ALLOCATION      */
     4 PVTPGFAD PTR,            /* GFA DEFER PROCESSOR           */
     4 PVTPIOP  PTR,            /* PAGE I/O POST                 */
     4 PVTPIOCP PTR,            /* PIOCP  SRB ENTRY              */
     4 PVTREP2  PTR,            /* PCB MANAGER SRB REPLENISH ENTRY
                                       POINT                 @Z40WPYD*/
     4 PVTPCB   PTR,            /* PCB MANAGER                   */
     4 PVTPFTE  PTR,            /* PFTE ENQ/DEQ                  */
     4 PVTPFP   PTR,            /* FIND PAGE EXTERNAL ENTRY      */
     4 PVTPFP2  PTR,            /* RSM ENTRY POINT TO FINDPAGE   */
     4 PVTPRFR  PTR,            /* REAL FRAME REPLACEMENT SELECT */
     4 PVTPVRPO PTR,            /* V=R FORCE PAGE OUT            */
     4 PVTPPIOI PTR,            /* PAGE I/O INITIATOR   @Z40WPYD */
     4 PVTPVEQR PTR,            /* V=R ALLOCATION                */
     4 PVTPVRLS PTR,            /* V=R RELEASE                   */
     4 PVTPVRIN PTR,            /* V=R INTERCEPT                 */
     4 PVTPVRC  PTR,            /* V=R COMPLETION                */
     4 PVTPRCF  PTR,            /* RECONFIGURATION ROUTINE       */
     4 PVTPRCFI PTR,            /* RECONFIGURATION INTERCEPT     */
     4 PVTPRCV  PTR,            /* FUNCTIONAL RECOVERY RTN       */
     4 PVTPSWIN PTR,            /* SWAP IN                       */
     4 PVTPSOUT PTR,            /* SWAP OUT                      */
     4 PVTPSWPC PTR,            /* SWAP OUT COMPLETE ROUTINE
                                                             @Z40WPYD*/
     4 PVTPINV  PTR,            /* PAGE INVALIDATION             */
     4 PVTPCSEG PTR,            /* CREATE SEGMENT                */
     4 PVTPCSGB PTR,            /* CREATE SEG INTERNAL ENTRY     */
     4 PVTPDSEG PTR,            /* DESTROY SEGMENT               */
     4 PVTPSRBP PTR,            /* SRB PURGE ROUTINE             */
     4 PVTPITAS PTR,            /* INITIALIZE ADDRESS SPACE      */
     4 PVTPFXLD PTR,            /* PGFIX AND PGLOAD PROCESSOR    */
     4 PVTPOUT  PTR,            /* PGOUT PROCESSOR               */
     4 PVTPRELS PTR,            /* PGRLSE PROCESSOR              */
     4 PVTPFREE PTR,            /* PGFREE PROCESSOR              */
     4 PVTPRELV PTR,            /* FREEMAIN-RELEASE ENTRY POINT  */
     4 PVTPRELF PTR,            /* DEFERRED RELEASE ENTRY POINT  */
     4 PVTPOPBR PTR,            /* SCHEDULE SUBROUTINE OF PIOP   */
     4 PVTPPREF PTR,            /* PREFERRED AREA STEAL ROUTINE
                                                             @Z40WPYD*/
     4 PVTPSWPP PTR,            /* SWAP IN POST ROUTINE IN MODULE
                                       IEAVSWIN              @Z40WPYD*/
     4 PVTSWPIO PTR,            /* ASM'S SWAP INTERFACE ROUTINE,
                                       ILRSWAP               @Z40WPYD*/
     4 PVTPAGIO PTR,            /* ASM'S PAGING I/O INTERFACE
                                       ROUTINE, ILRPAGIO     @Z40WPYD*/
     4 PVTFRSLT PTR,            /* ASM'S FREE SLOT ROUTINE,
                                       ILRFRSLT              @Z40WPYD*/
     4 PVTPRSET PTR,            /* PCFLIH'S RESET ROUTINE, IEAVRSET
                                                             @Z40WPYD*/
     /*                                                              */
     /*        EVENT COUNTERS FOR SMF AND TUNING PURPOSES.           */
     /*        ALL 32 BIT COUNTERS ARE THE WRAP-AROUND TYPE.         */
     /*                                                              */
     4 PVTNPIN  FIXED(31),          /* NUMBER OF PAGES PAGED IN,
                                       EXCLUDING SWAP-INS AND VIO
                                       PAGE-INS.                     */
     4 PVTNPOUT FIXED(31),          /* NUMBER OF PAGES PAGED OUT,
                                       EXCLUDING SWAP-OUTS AND VIO
                                       PAGE-OUTS                     */
     4 PVTVAMI  FIXED(31),          /* NUMBER OF VIO PAGE-INS
                                       EXCLUDING SWAP                */
     4 PVTVAMO  FIXED(31),          /* NUMBER OF VIO PAGE-OUTS
                                       EXCLUDING SWAP                */
     4 PVTVAMR  FIXED(31),          /* NUMBER OF VIO RECLAIMS        */
     4 PVTSPIN  FIXED(31),          /* NUMBER OF PAGES SWAPPED-IN    */
     4 PVTSPOUT FIXED(31),          /* NUMBER OF PAGES SWAPPED-OUT   */
     4 PVTNPREC FIXED(31),          /* NUMBER OF PAGES RECLAIMED,
                                       EXCLUDING SWAP AND VIO RECLAIMS
                                                             @Z40WPYD*/
     4 PVTNSWPS FIXED(31),          /* NUMBER OF SUCCESSFUL SWAP-INS */
     4 PVTCAIN  FIXED(31),          /* NUMBER OF COMMON AREA PAGE-INS
                                                             @Z40WPYD*/
     4 PVTCAOUT FIXED(31),          /* NUMBER OF COMMON AREA
                                       PAGE OUTS             @Z40WPYD*/
     4 PVTCAREC FIXED(31),          /* NUMBER OF RECLAIMS OF COMMON
                                       AREA PAGES            @Z40WPYD*/
     4 PVTSPREC FIXED(31),          /* NUMBER OF PRIVATE AREA PAGEABLE
                                       PAGES RECLAIMED ACROSS A SWAP
                                                             @Z40WPYD*/
     4 PVTCFMCT FIXED(15),          /* NUMBER OF FRAMES CURRENTLY
                                       ASSIGNED TO PAGEABLE COMMON AREA
                                       (CSA AND LPA).                */
     4 PVTSPFR  FIXED(15),          /* NUMBER OF FRAMES FREED BY SWAP-
                                       OUT WITHOUT OUTPUT I/O.       */
     /*                                                              */
     /* THIS SECTION OF THE PVT CONTAINS ANCHORS FOR PFTE AND PCB    */
     /* QUEUES.  THE FIELDS MUST REMAIN IN THIS ORDER BECAUSE THEY   */
     /* ARE INDEXED BY QUEUE NUMBERS.  ALSO, THE PFTE AND PCB        */
     /* MANAGERS DEPEND ON THE COMPILE-TIME DISPLACEMENT OF THIS     */
     /* SECTION FROM THE PVT ORIGIN.  ALL QUEUES ARE FORWARD AND     */
     /* BACKWARD CHAINED. IF FIELDS ARE ADDED OR DELETED FROM        */
     /* THIS SECTION, THE PCB AND PFTE QUEUE INDEX VALUES MUST BE    */
     /* ADJUSTED.                                                    */
     /*                                                              */
     4 PVTQS          ,    /* BEGINNING OF ORDERED BLOCK
                                       OF QUEUE ANCHORS              */
       8 PVTAFQF  BIT(16),          /* RBN OF FIRST PFTE ON AVAILABLE
                                       FRAME QUEUE                   */
       8 PVTAFQL  BIT(16),          /* RBN OF LAST PFTE ON AVAILABLE
                                       FRAME QUEUE                   */
       8 PVTRSRVF BIT(16),          /* RBN OF FIRST PFTE ON SQA
                                       RESERVED FRAME QUEUE          */
       8 PVTRSRVL BIT(16),          /* RBN OF LAST PFTE ON SQA
                                       RESERVED FRAME QUEUE          */
       8 PVTCFQF  BIT(16),          /* RBN OF FIRST PFTE ON COMMON
                                       FRAME Q (CSA AND LPA)         */
       8 PVTCFQL  BIT(16),          /* RBN OF LAST PFTE ON COMMON
                                       FRAME Q                       */
       8 PVTSQAQF BIT(16),          /* RBN OF FIRST PFTE ON SQA
                                       ALLOCATED FRAME Q             */
       8 PVTSQAQL BIT(16),          /* RBN OF LAST PFTE ON SQA
                                       ALLOCATED FRAME Q             */
       8 PVTFPCBF PTR,          /* VSA OF FIRST PCB ON FREE Q    */
       8 PVTFPCBL PTR,          /* VSA OF LAST PCB ON FREE Q     */
       8 PVTGFADF PTR,          /* VSA OF FIRST PCB ON GFA
                                       DEFERRED ALLOCATION Q         */
       8 PVTGFADL PTR,          /* VSA OF LAST PCB ON GFA
                                       DEFERRED ALLOCATION Q         */
       8 PVTCIOQF PTR,          /* VSA OF FIRST PCB ON COMMON
                                       I/O Q                         */
       8 PVTCIOQL PTR,          /* VSA OF LAST PCB ON COMMON
                                       I/O Q                         */
     4 PVTWSAX,                     /* WORK SAVE AREA EXTENSION      */
       8 PVTWSA1  CHAR(72),/* WORK/SAVE AREA FOR IEAVC/DSEG */
       8 PVTWSA2  CHAR(72),/* WORK/SAVE AREA FOR IEAVDLAS AND
                                       PAGE SERVICES SUBROUTINES     */
       8 PVTWSA3  CHAR(72),/* WORK/SAVE AREA FOR IEAVEQRI AND
                                       IEAVRCFI INTERCEPT ROUTINES   */
       8 PVTWSA4  CHAR(72),/* WORK/SAVE AREA FOR IEAVPSII   */
       8 PVTWSA5  CHAR(72),/* WORK/SAVE AREA FOR IEAVRELV   */
       8 PVTWSA6  CHAR(72),/* WORK/SAVE AREA FOR IEAVRELF   */
       8 PVTWSA7  CHAR(72),/* WORK/SAVE AREA FOR ALL ROOT
                                       EXITS                         */
       8 PVTWSA8  CHAR(88),/* WORK/SAVE AREA FOR
                                       IEAVGFA/IEAVSQA       @Z40WPYD*/
       8 PVTWSA9  CHAR(80),/* WORK/SAVE AREA FOR IEAVOPBR   */
       8 PVTWSA10 CHAR(80),/* WORK/SAVE AREA FOR IEAVPIOP AND
                                       IEAVIOCP                      */
       8 PVTWSA11 CHAR(72),/* WORK/SAVE AREA FOR IEAVPSI    */
       8 PVTWSA12 CHAR(72),/* WORK/SAVE AREA FOR IEAVPFTE   */
       8 PVTWSA13 CHAR(72),/* WORK/SAVE AREA FOR IEAVPCB    */
       8 PVTWSA14 CHAR(72),/* WORK/SAVE AREA FOR IEAVFP2/INV*/
       8 PVTWSA15 CHAR(72),/* WORK/SAVE AREA FOR IEAVAMSI
                                       IEAVSOUT AND IEAVRFR          */
       8 PVTWSA16 CHAR(72) ,/* WORK/SAVE AREA FOR IEAVPREF
                                                             @Z40WPYD*/
       8 PVTWSA17 CHAR(72) ,/* WORK/SAVE AREA FOR IEAVREP2
                                                             @Z40WPYD*/
       8 PVTWSA18 CHAR(72) ,/* WORK/SAVE AREA FOR IEAVSWPC
                                                             @Z40WPYD*/
       8 PVTSAVE  CHAR(72),/* WORK/SAVE AREA FOR RSM        */
       8 PVTACA   CHAR(24),/* ASM CONTROL AREA (ACA)
                                       USED BY RSM WHEN REQUESTING ASM
                                       SERVICES OTHER THAN REQUST I/O*/
     4 PVTSSRB PTR ,            /* ADDR OF EXTRA SSRB            */
     4 PVTSRBS  BIT(8),           /* NUMBER OF SRB'S TO BE BUILT
                                       INITIALLY.           @Z30GNYD */
     4 PVTRESV5 CHAR(3),            /* RESERVED             @Z30GNYD */
     4 PVTRSRB  CHAR(44) , /* SRB TO SCHEDULE REPLENISH
                                                            @Z30GNYD */
     4 PVTPERFX FIXED(15),          /* PERCENTAGE OF AVAILABLE
                                       FRAMES THAT MAY BE FIXED. USED
                                       IN COMPUTING PVTMAXFX.
                                                            @YA01572 */
     4 PVTMAXFX FIXED(15),          /* FIXED FRAME THRESHOLD. SRM IS
                                       NOTIFIED WHEN NUMBER OF FIXED
                                       FRAMES EQUALS THIS VALUE.
                                                            @YA01572 */
     4 PVTPEROK FIXED(15),          /* A LESSER PERCENTAGE THAN
                                       PVTPERFX. USED IN COMPUTING
                                       PVTFIXOK.            @YA01572 */
     4 PVTFIXOK FIXED(15),          /* NUMBER OF FIXED FRAMES THAT IS
                                       ACCEPTABLE FOR NORMAL PROCESSING
                                                            @YA01572 */
     4 PVTDEFFX FIXED(15),          /* PAGE FIX REQUEST ARE DEFFERED
                                       WHEN THE AFQ IS EQUAL TO THIS
                                       VALUE.               @YA01572 */
     4 PVTCNTFX FIXED(15),          /* TOTAL SYSTEM COUNT OF FIXED
                                       FRAMES. (INCLUDES V=R, LSQA,SQA,
                                       PAGE FIX, AND SQA RESERVE QUEUE
                                       FRAMES.)             @YA01572 */
     4 PVTSQAFX FIXED(15),          /* NUMBER OF FRAMES ALLOCATED TO
                                       SQA.                 @YA01572 */
     4 PVTCOMFX FIXED(15),          /* NUMBER OF FRAMES ALLOCATED TO
                                       COMMON AREA FIXES.   @YA01572 */
     4 PVTCHUIC FIXED(15),          /* HIGHEST UNREFERENCED INTERVAL
                                       COUNT FOR THE CURRENTLY
                                       ALLOCATED COMMON AREA FRAMES.
                                                            @Z40FPYD */
     4 PVTSPARE CHAR(2),           /* RESREVED.             @Z40FPYD */
     4 PVTEND      CHAR(1); /* END OF PVT    @Z40WPYD */
./       ADD   NAME=IRARMCA
 /********************************************************************/
 /* DISCLAIMER:                                                      */
 /*     THIS IBM MAPPING MACRO HAS BEEN CONVERTED FOR USE            */
 /* IN PLIX BY                                                       */
 /*     HOWARD GILBERT                                               */
 /*     YALE COMPUTER CENTER                                         */
 /*     175 WHITNEY AVE                                              */
 /*     NEW HAVEN, CONN. 06520                                       */
 /*     203 432-4080                                                 */
 /* THE AUTHOR HAS ONLY VERIFIED THE ACCURACY OF THE CONVERSION      */
 /* FOR THOSE FIELDS REQUIRED BY LOCALLY WRITTEN CODE. THE MACRO     */
 /* IS MADE AVAILABLE TO SUPPORT SUCH CODE AND 'AS IS' FOR OTHER     */
 /* APPLICATIONS REQUIRED BY POTENTIAL USERS.                        */
 /*                                                                  */
 /* VERSION DATE: MAY 1,1977                                         */
 /********************************************************************/
   /* SOME ADDED PREPROCESSOR DECLARATIONS FOR PLI */
  % DCL (RMCALEVL,RMCA9999,RMCALEN) CHAR;
  % RMCALEVL='';
  % RMCA9999='';
         %GOTO RMCAPLS1; /*
         MACRO
         IRARMCA   &DSECT=YES                                        */
 %RMCAPLS1:  ;
  /*                                                                 */
  /* MACCOMP Z-4 SC1CX/PKD16                                         */
  /* MACSTAT Z-4 75007/Z40BPSS                                       */
  /* *************************************************************** */
  /*                                                                 */
  /*   MACRO NAME - IRARMCA                                          */
  /*                                                                 */
  /*   DESCRIPTIVE NAME - SYSTEM RESOURCES MANAGER CONTROL AREA      */
  /*                                                                 */
  /*   COPYRIGHT - NONE                                              */
  /*                                                                 */
  /*   STATUS - OS/VS2 RELEASE 4, 09/19/75, LEVEL=1                  */
  /*                                                                 */
  /*   FUNCTION - THE RMCA PROVIDES THE STORAGE AREA CONTAINING      */
  /*         SWAP ANALYSIS VARIABLES USED WITHIN THE SYSTEM RE-      */
  /*         SOURCES MANAGER.  AS A RESULT OF USING THE RMCA AS      */
  /*         A WORK AREA, THE IRARMCTL AND IRARMWLM MODULES CAN      */
  /*         BE MADE READ-ONLY.                                      */
  /*                                                                 */
  /*   METHOD OF ACCESS - THE ADDRESS OF THE RMCA IS CONTAINED       */
  /*         IN THE -RMCTRMCA- FIELD OF THE SYSTEM RESOURCES         */
  /*         MANAGER CONTROL TABLE.                                  */
  /*                                                                 */
  /* *************************************************************** */
         %GOTO RMCAPLS2; /*
         AGO   .RMCAAL1                                              */
  /* *************************************************************** */
  /*                                                                 */
  /*   INVOCATION PARAMETERS AND/OR KEYWORDS =                       */
  /*                                                                 */
  /*     BAL - DSECT=NO IF DSECT IS NOT TO BE PRODUCED.              */
  /*                                                                 */
  /*           NOTE - THE BAL FORM OF THE MACRO IS CODED WITH        */
  /*           'DC' INSTRUCTIONS, SO THAT THE MACRO MAY BE USED      */
  /*           TO ASSEMBLE THE INITIAL FIELD VALUES FOR THE          */
  /*           IRARMCNS MODULE, WHICH CONTAINS THE RMCA.             */
  /*                                                                 */
  /*         USING ON RMCA GIVES ADDRESSABILITY TO ALL SYMBOLS.      */
  /*                                                                 */
  /*     PLS - %RMCALEVL='USERLEVL' IF THE RMCA MAPPING IS TO BE     */
  /*           CONCATENATED WITH A PREVIOUS DECLARATION, WITH THE    */
  /*           RMCA BEING ASSIGNED THE INDICATED STRUCTURE LEVEL.    */
  /*         - %RMCA9999=',' IF THE STRUCTURE SHOULD NOT BE CLOSED.  */
  /*                                                                 */
  /*         TO ACCESS AS A STANDALONE STRUCTURE, DCL RMCAPTR PTR.   */
  /*                                                                 */
  /*   CHANGE ACTIVITY = @ZM43085                                    */
  /*                                                                 */
  /*   A000000-999999                                          Y02133*/
  /*                                                                 */
  /* *************************************************************** */
  /*
.RMCAAL1 ANOP
         SPACE 1
         AIF   ('&DSECT' EQ 'NO').RMCAAL2
RMCA     DSECT
         AGO   .RMCAAL3
.RMCAAL2 ANOP
         DS    0D
RMCA     EQU   *
.RMCAAL3 ANOP
         SPACE 1
RMCANAME DC    C'RMCA' -           BLOCK IDENTIFICATION
RMCAR04  DC    H'0' -              RESERVED
RMCAINUS DC    H'0' -              COUNT OF IN-CORE USERS
RMCARSV1 DC    H'0' -              RESERVED                  @ZM43085
RMCARSV2 DC    H'0' -              RESERVED                  @ZM43085
RMCATQS  DC    F'0' -              SYSTEM QUIESCE TIME
RMCATRS  DC    F'0' -              SYSTEM RESTART TIME
RMCATOI  DC    F'0' -              TIME OF EXPECTED TIMER INTERRUPT
RMCARSV3 DC    F'0' -              RESERVED                  @ZM43085
RMCARSV4 DC    F'0' -              RESERVED                  @ZM43085
RMCARSV5 DC    F'0' -              RESERVED                  @ZM43085
RMCARSV6 DC    F'0' -              RESERVED                  @ZM43085
RMCARSV7 DC    F'0' -               RESERVED                  @ZM43085
RMCARSV8 DC    F'0' -               RESERVED                  @ZM43085
RMCACHP  DC    X'800000FF' -       CHAP LIST FOR SWAPOUT PRTY  @YM05632
RMCACHU  DC    A(0) -              USER TO BE CHAPPED ON SWAP  @YM05632
RMCARSV9 DC    F'0' -               RESERVED                  @ZM43085
RMCAR10   DC    F'0' -              RESERVED                  @ZM43085
RMCAINV  DC    F'0' -              ROUTINE INVOCATION WORK AREA
RMCAR11  DC    H'0' -               RESERVED                  @ZM43085
RMCAISV  DC    H'1' -              ISV RECOMM. VALUE BOOST     @Z40BPCH
RMCALGPG DC    HL1'2' -            DEF LOGON PERF GROUP NUMBER @Z40BPCH
RMCABCPG DC    HL1'1' -            DEF BATCH PERF GROUP NUMBER @Z40BPCH
RMCAR20  DC    H'0' -              RESERVED                    @Z40BPCH
RMCAMAS  DC    V(IEAMASCB) -       ASCB ADDR FOR MASTER SCHEDULER
RMCAWKA  DC    8F'0' -              NONRESIDENT ROUTINE WORKAREA
RMCAR13 DC    F'0' -               RESERVED                    @ZM43085
RMCAR14  DC    H'0' -              RESERVED                    @ZM43085
RMCACIUS DC    H'0' -              COUNT OF USERS COMING IN    @Z30WIMG
RMCACPW1 DC    F'0' -              CAP WORK AREA               @Z40BPCH
RMCASRC  EQU   *    -              SWAP REASON COUNTS          @Z40BPCH
RMCATOSC DC    F'0' -              TERMINAL OUTPUT SWAP COUNT  @Z40BPCH
RMCATISC DC    F'0' -              TERMINAL INPUT SWAP COUNT   @Z40BPCH
RMCALWSC DC    F'0' -              LONG WAIT SWAP COUNT        @Z40BPCH
RMCAXSSC DC    F'0' -              AUX STOR SHORT SWAP COUNT   @Z40BPCH
RMCARSSC DC    F'0' -              REAL STOR SHORT SWAP COUNT  @Z40BPCH
RMCADWSC DC    F'0' -              DETECTED WAIT SWAP COUNT    @Z40BPCH
RMCARQSC DC    F'0' -              REQSWAP SWAP COUNT          @Z40BPCH
RMCANQSC DC    F'0' -              CAP ENQ EXCHANGE SWAP CNT   @Z40BPCH
RMCAEXSC DC    F'0' -              CAP EXCHANGE BASED ON RECOMMENDATION
                                   VALUES SWAP COUNT           @Z40BPCH
RMCAUSSC DC    F'0' -              CAP UNILATERAL SWAP OUT CNT @Z40BPCH

RMCAR90  DC    F'0' -              RESERVED                    @Z40BPCH

RMCAEND  DS    0D -                END OF RMCA
RMCALEN  EQU   RMCAEND-RMCA -      LENGTH OF RMCA
         MEND
                                                                     */
 %RMCAPLS2:  ;
         %IF RMCA9999 ^= ','        /* DOES STRUCTURE CONTINUE       */
             %THEN %RMCA9999 = ';'; /* NO, END DECLARE STATEMENT     */
         %IF RMCALEVL ^= ''         /* IS STRUCTURE CONCATENATED     */
             %THEN %GOTO RMCAPLS3;  /* YES, OMIT DECLARE STATEMENT   */
    DCL
      1 RMCA BASED(RMCAPTR) ,
             %GOTO RMCAPLS4;        /* SKIP USER-GIVEN LEVEL         */
 %RMCAPLS3:  RMCADUM = RMCALEVL××' RMCA';  /* PICK UP GIVEN LEVEL    */
        10 RMCATOI  FIXED(31) , /* TIME OF EXPECTD INTERRUPT */
        10 RMCARSV3 FIXED(31) , /* RESERVED          @ZM43085*/
        10 RMCARSV4 FIXED(31) , /* RESERVED          @ZM43085*/
        10 RMCARSV5 FIXED,          /* RESERVED              @ZM43085*/
        10 RMCARSV6 FIXED,          /* RESERVED              @ZM43085*/
        10 RMCARSV7 FIXED(31) , /* RESERVED          @ZM43085*/
        10 RMCARSV8 FIXED(31) , /* RESERVED          @ZM43085*/
        10 RMCACHP  CHAR(4) , /* CHAP LIST FOR SWAP @YM05632*/
        10 RMCACHU  PTR,        /* USER CHAPPED FOR SWAP @YM05632*/
        10 RMCARSV9 FIXED(31) , /* RESERVED          @ZM43085*/
        10 RMCAR10 FIXED(31) , /* RESERVED           @ZM43085*/
        10 RMCAINV  BIT(32) , /* RTNE INVOCATION WORK AREA  */
        10 RMCAR11 FIXED(15),       /* RESERVED             @ZM43085*/
        10 RMCAISV  FIXED(15),      /* ISV REC. VALUE BOOST  @Z40BPCH*/
        10 RMCALGPG BIT(8),         /* DEF LOGON PERF GRP #  @Z40BPCH*/
        10 RMCABCPG BIT(8),         /* DEF BATCH PERF GRP #  @Z40BPCH*/
        10 RMCAR20  FIXED(15),      /* RESERVED              @Z40BPCH*/
        10 RMCAMAS  PTR,        /* ASCB ADDR FOR MASTER SCHEDULR */
        10 RMCAWKA  CHAR(32) , /* NONRESIDENT RTN WORKAREA*/
        10 RMCAR13 FIXED,           /* RESERVED              @ZM43085*/
        10 RMCAR14 FIXED(15),       /* RESERVED              @ZM43085*/
        10 RMCACIUS FIXED(15),      /* CT OF USERS COMING IN @Z30WIMG*/
        10 RMCACPW1 PTR,        /* CAP WORK AREA         @Z40BPCH*/
        10 RMCASRC,                 /* SWAP OUT REASON CNTS. @Z40BPCH*/
           12 RMCATOSC FIXED(31),     /* TERMINAL OUTPUT SWAP COUNT
                                                             @Z40BPCH*/
           12 RMCATISC FIXED(31),     /* TERMINAL OUTPUT SWAP COUNT
                                                             @Z40BPCH*/
           12 RMCALWSC FIXED(31),     /* LONG WAIT SWAP COUNT
                                                             @Z40BPCH*/
           12 RMCAXSSC FIXED(31),     /* AUT STOR SHORTAGE SWAP COUNT
                                                             @Z40BPCH*/
           12 RMCARSSC FIXED(31),     /* REAL STOR SHORTAGE SWAP COUNT
                                                             @Z40BPCH*/
           12 RMCADWSC FIXED(31),     /* DETECTED WAIT SWAP COUNT
                                                             @Z40BPCH*/
           12 RMCARQSC FIXED(31),     /* REQSWAP SWAP COUNT  @Z40BPCH*/
           12 RMCANQSC FIXED(31),     /* CAP ENQ EXCHANGE SWAP COUNT
                                                            @Z40BPCH*/
           12 RMCAEXSC FIXED(31),     /* CAP EXCHANGE BASED ON RECOMM.
                                       VALUE SWAP COUNT     @Z40BPCH*/
           12 RMCAUSSC FIXED(31),     /* CAP UNILATERAL SWAP OUT COUNT
                                                            @Z40BPCH*/
        10 RMCAR90 FIXED,             /* RESERVED           @Z40BPCH*/

        10 RMCAEND  CHAR(0)   /* END OF RMCA               */
    RMCA9999
    %RMCALEN = 'LENGTH(RMCA)';      /* SYMBOLIC FOR LENGTH OF RMCA   */
./       ADD   NAME=IRARMCT
 /********************************************************************/
 /* DISCLAIMER:                                                      */
 /*     THIS IBM MAPPING MACRO HAS BEEN CONVERTED FOR USE            */
 /* IN PLIX BY                                                       */
 /*     HOWARD GILBERT                                               */
 /*     YALE COMPUTER CENTER                                         */
 /*     175 WHITNEY AVE                                              */
 /*     NEW HAVEN, CONN. 06520                                       */
 /*     203 432-4080                                                 */
 /* THE AUTHOR HAS ONLY VERIFIED THE ACCURACY OF THE CONVERSION      */
 /* FOR THOSE FIELDS REQUIRED BY LOCALLY WRITTEN CODE. THE MACRO     */
 /* IS MADE AVAILABLE TO SUPPORT SUCH CODE AND 'AS IS' FOR OTHER     */
 /* APPLICATIONS REQUIRED BY POTENTIAL USERS.                        */
 /*                                                                  */
 /* VERSION DATE: MAY 1,1977                                         */
 /********************************************************************/
  /* DECLARE PREPROCESSOR VARIABLES AND INITIALIZE FOR PLIX */
  % DCL (RMCTLEVL,RMCT9999,RMCTLEN) CHAR;
  % RMCTLEVL='';
  %RMCT9999='';
         %GOTO RMCTPLS1; /*
         MACRO
         IRARMCT &DSECT=YES
         IEZBITS                                                     */
 %RMCTPLS1:  ;
  /*                                                                 */
  /* MACCOMP Z-4 SC1CX/PKD16                                         */
  /* MACSTAT Z-4 75007/Z40BPSS                                       */
  /* *************************************************************** */
  /*                                                                 */
  /*   MACRO NAME - IRARMCT                                          */
  /*                                                                 */
  /*   DESCRIPTIVE NAME - SYSTEM RESOURCES MANAGER CONTROL TABLE     */
  /*                                                                 */
  /*   COPYRIGHT - NONE                                              */
  /*                                                                 */
  /*   STATUS - OS/VS2 RELEASE 4, 10/28/75, LEVEL=1                  */
  /*                                                                 */
  /*   FUNCTION - THE RMCT SERVES AS THE ORIGIN TO LOCATE SYSTEM     */
  /*         RESOURCES MANAGER TABLES AND ENTRY POINTS.  THE RMCT    */
  /*         LOCATES THE SCHEDULING / ROUTING INFORMATION USED TO    */
  /*         INVOKE THE REQUIRED PROCESSING FOR THE VARIOUS SYSTEM   */
  /*         RESOURCES MANAGER FUNCTIONS.                            */
  /*                                                                 */
  /*   METHOD OF ACCESS - THE ADDRESS OF THE RMCT IS CONTAINED IN    */
  /*         THE -CVTOPCTP- FIELD OF THE CVT.                        */
  /*                                                                 */
  /*         BY CONVENTION WITHIN THE SYSTEM RESOURCES MANAGER       */
  /*         ROUTINES, REGISTER 2 IS ALWAYS RESERVED TO CONTAIN      */
  /*         THE ADDRESS OF THE RMCT.                                */
  /*                                                                 */
  /* *************************************************************** */
         %GOTO RMCTPLS2; /*
         AGO   .RMCTAL1                                              */
  /* *************************************************************** */
  /*                                                                 */
  /*   INVOCATION PARAMETERS AND/OR KEYWORDS =                       */
  /*                                                                 */
  /*     BAL - DSECT=NO IF DSECT IS NOT TO BE PRODUCED.              */
  /*                                                                 */
  /*           NOTE - THE BAL FORM OF THE MACRO IS CODED WITH        */
  /*           'DC' INSTRUCTIONS, SO THAT THE MACRO MAY BE USED      */
  /*           TO ASSEMBLE THE INITIAL FIELD VALUES FOR THE          */
  /*           IRARMCNS MODULE, WHICH CONTAINS THE RMCT.             */
  /*                                                                 */
  /*         USING ON RMCT GIVES ADDRESSABILITY TO ALL SYMBOLS.      */
  /*                                                                 */
  /*     PLS - %RMCTLEVL='USERLEVL' IF THE RMCT MAPPING IS TO BE     */
  /*           CONCATENATED WITH A PREVIOUS DECLARATION, WITH THE    */
  /*           RMCT BEING ASSIGNED THE INDICATED STRUCTURE LEVEL.    */
  /*         - %RMCT9999=',' IF THE STRUCTURE SHOULD NOT BE CLOSED.  */
  /*                                                                 */
  /*           NOTE - INASMUCH AS THE RMCT TABLE APPEARS AT THE      */
  /*           VERY BEGINNING OF THE -IRARMCNS- MODULE, ONLY A       */
  /*           STRUCTURE LEVEL OF '1' (ONE) SHOULD BE USED FOR       */
  /*           THE RMCT.                                             */
  /*                                                                 */
  /*         TO ACCESS THE RMCT AS A DECLARED STRUCTURE,             */
  /*         DCL RMCTPTR PTR.                                        */
  /*                                                                 */
  /*   CHANGE ACTIVITY = @ZM43085                                    */
  /*                                                                 */
  /*   A000000-999999                                          Y02133*/
  /*                                                                 */
  /* *************************************************************** */
  /*
.RMCTAL1 ANOP
         SPACE 1
         AIF   ('&DSECT' EQ 'NO').RMCTAL2
RMCT     DSECT
         AGO   .RMCTAL3
.RMCTAL2 ANOP
         DS    0D
RMCT     EQU   *
.RMCTAL3 ANOP
         SPACE 1
RMCTNAME DC    C'RMCT' -           BLOCK IDENTIFICATION
RMCTCCT  DC    A(CCT) -            CPU MANAGEMENT CONTROL TABLE
RMCTICT  DC    A(ICT) -            I/O MANAGEMENT CONTROL TABLE
RMCTMCT  DC    A(MCT) -            STORAGE MANAGEMENT CONTROL TABLE
RMCTRMPT DC    A(RMPT) -           CTL ALGORITHM PARAMETER TABLE
RMCTRMCA DC    A(RMCA) -           CTL ALGORITHM CONTROL AREA
RMCTWMST DC    A(0) -              ADDR OF WLM SPECIFICATION TABLE
RMCTRLCT DC    A(0) -              ADDR OF LOGICAL CHANNEL MGMT TABLE
RMCTRMSA DC    A(0) -              ADDR OF RESOURCES MANAGER SAVE AREA
RMCTRMPD DC    A(0) -              ADDR OF RESOURCES MANAGER PERF DATA
RMCTRMEX DC    A(RMEX) -           ROUTINE EXITING VECTOR TABLE
RMCTRMSB DC    A(RMSB) -           SUBROUTINE CALLING VECTOR TABLE
RMCTEPPA DC    A(IRAEPPA) -        PRTL ANALYSIS ENTRY TABLE
RMCTEPDT DC    A(EPDTSCN) -        USER ACTION ENTRY TABLE
RMCTEPAT DC    A(EPATSCN) -        ALGORITHM ENTRY TABLE
RMCTR05  DC    F'0' -              RESERVED                    @Z40BPCH
RMCTADJC DC    F'0' -              ADJUSTMENT FACTOR FOR CPU RATE
RMCTITT  DC    V(IRASECHT) -       INTFC EVENT CHARACTERISTICS TABLE
RMCTEPET DC    V(IRAPRCSR) -       EVENT ROUTING VECTOR TABLE
RMCTFLTM DC    A(IRAFLTM) -        TIME OF DAY ADJUST VECTOR TABLE
RMCTEPPR DC    A(IRAEPPR) -        PROCESS RATE DEPENDENT ENTRY TABLE
RMCTWAST DC    A(0) -              ADDR OF WAR SPECIFICATION TABLE
RMCTWAMT DC    A(0) -              ADDR OF WAR MEASUREMENT TABLE
RMCTTMQE DC    A(IRACTMQE) -       SCHEDULED RTNE QUEUE HEADER ADDR
RMCTAQCT DC    F'0' -              ACTION QUEUE MEMBER COUNT
RMCTAQHD DC    A(IRAOUCB) -        ACTION QUEUE FORWARD POINTER
RMCTWTQE DC    A(IRAWTQE) -        WAIT - QUEUE HEADER BLOCK ADDRESS
RMCTOTQE DC    A(IRAOTQE) -        OUT - QUEUE HEADER BLOCK ADDRESS
RMCTINQE DC    A(IRAINQE) -        IN - QUEUE HEADER BLOCK ADDRESS
RMCTR10  DC    F'0' -              RESERVED                    @Z40BPCH
RMCTTBS  DC    F'0' -              STARTING TIME BASE FOR TIME OF DAY
RMCTTOD  DC    F'0' -              TIME OF DAY - SYST RSRC MGR INVOKE
RMCTTOC  DC    D'0' -              TIME OF CENTURY - 64BIT BINARY NMB
RMCTALA  DC    4B'00000000' -      ALGORITHM REQUEST ACCUMULATOR FIELD
RMCTALR  DC    4B'00000000' -      IMMEDIATE ALGORITHM REQUEST FIELD
RMCTRQSV DC    A(RQSV) -           ADDR OF REQ SRV DATA AREA   @Z40BPCH
RMCTFLGS DC    1B'00000000' -      PROCESSING CONTROL FLAGS
RMCTMFA  EQU   BIT0 -              MEASUREMENT FACILITY ACTIVE
RMCTCPS1 EQU   BIT1                CAP SWITCH                  @Z40BPSS
RMCTINIT EQU   BIT3 -              SRM INITIALIZATION WAS PERFORMED
RMCTRSV1 EQU   BIT4 -              RESERVED                   @ZM43085
RMCTSTW  EQU   BIT5 -              SET HAS STOPPED WAR COLLECTION
RMCTRSV2 EQU   BIT6 -              RESERVED                   @ZM43085
         DC    1B'00000000' -      OVERRIDE CONDITION FLAGS
RMCTMFS  EQU   BIT1 -              MF1 ACTIVE,SET IPS RCVD    @Z40BPCH
         DC    2B'00000000' -      RESERVED
RMCTTELM DC    V(IEATSELM) -       RESOURCES MANAGER TIMING ELEMENT
RMCTCPID DC    C'RM1',X'03' -      RESOURCES MANAGER CELL POOL ID
RMCTTOCI DC    D'0' -              CLOCK READ AREA - 64BIT BINARY NMB
RMCTOUCB DC    A(IRAOUCB) -        PREASSEMBLED MODEL OUCB
RMCTOUXB DC    A(IRAOUXB) -        INTERPOSED DUMMY OUXB
RMCTSRBT DC    A(IRASRBT) -        RESOURCES MANAGER SRB TABLE
RMCTDMDT DC    A(0) -              ADDR OF DOMAIN TABLE        @Z40BPCH
RMCTDMDE DC    A(0) -              ADDR OF LAST DMN TAB ENTRY  @Z40BPCH
RMCTDMNC DC    H'0' -              NUMBER OF DOMAINS           @Z40BPCH
RMCTR50  DC    H'0' -              RESERVED                    @Z40BPCH
RMCTEND  DS    0D -                END OF RMCT
RMCTLEN  EQU   RMCTEND-RMCT -      LENGTH OF RMCT
         MEND
                                                                     */
 %RMCTPLS2:  ;
         %IF RMCT9999 ^= ','        /* DOES STRUCTURE CONTINUE       */
             %THEN %RMCT9999 = ';'; /* NO, END DECLARE STATEMENT     */
         %IF RMCTLEVL ^= ''         /* IS STRUCTURE CONCATENATED     */
             %THEN %GOTO RMCTPLS3;  /* YES, OMIT DECLARE STATEMENT   */
    DCL
      1 RMCT BASED(RMCTPTR) ,
             %GOTO RMCTPLS4;        /* SKIP USER-GIVEN LEVEL         */
 %RMCTPLS3:  RMCTDUM = RMCTLEVL××' RMCT';  /* PICK UP GIVEN LEVEL    */
      RMCTDUM ,
 %RMCTPLS4:  ;
        10 RMCTNAME CHAR(4),        /* BLOCK IDENTIFICATION - 'RMCT' */
        10 RMCTCCT  PTR,        /* CPU MGMT CONTROL TABLE        */
        10 RMCTICT  PTR,        /* I/O MGMT CONTROL TABLE        */
        10 RMCTMCT  PTR,        /* STORAGE MGMT CONTROL TABLE    */
        10 RMCTRMPT PTR,        /* CTL ALGORITHM PARAMETER TBL   */
        10 RMCTRMCA PTR,        /* CTL ALGORITHM CONTROL AREA    */
        10 RMCTWMST PTR,        /* WLM SPECIFICATION TABLE       */
        10 RMCTRLCT PTR,        /* LOGICAL CHANNEL MGMT TABLE    */
        10 RMCTRMSA PTR,        /* RESOURCES MANAGER SAVE AREA   */
        10 RMCTRMPD PTR,        /* RESOURCES MANAGER PERF DATA   */
        10 RMCTRMEX PTR,        /* ROUTINE EXITING VECTOR TABLE  */
        10 RMCTRMSB PTR,        /* SUBRTNE CALLING VECTOR TABLE  */
        10 RMCTEPPA PTR,        /* PRTL ANALYSIS ENTRY TABLE     */
        10 RMCTEPDT PTR,        /* USER ACTION ENTRY TABLE       */
        10 RMCTEPAT PTR,        /* ALGORITHM ENTRY TABLE         */
        10 RMCTR05  FIXED,          /* RESERVED              @Z40BPCH*/
        10 RMCTADJC FIXED,          /* CPU RATE ADJUSTMENT           */
        10 RMCTITT  PTR,        /* EVENT CHARACTERISTICS TABLE   */
        10 RMCTEPET PTR,        /* EVENT ROUTING VECTOR TABLE    */
        10 RMCTFLTM PTR,        /* TIME OF DAY DEPENDENT TABLE   */
        10 RMCTEPPR PTR,        /* PROCESS RATE DEPENDENT TABLE  */
        10 RMCTWAST PTR,        /* WAR SPECIFICATION TABLE       */
        10 RMCTWAMT PTR,        /* WAR MEASUREMENT TABLE         */
        10 RMCTTMQE PTR,        /* SCHED RTNE QUEUE HEAD ADDR    */
        10 RMCTAQCT FIXED , /* ACTION QUEUE MEMBER COUNT   */
        10 RMCTAQHD PTR,        /* ACTION QUEUE FORWARD POINTER  */
        10 RMCTWTQE PTR,        /* WAIT - QUEUE HEADER ADDRESS   */
        10 RMCTOTQE PTR,        /* OUT - QUEUE HEADER ADDRESS    */
        10 RMCTINQE PTR,        /* IN - QUEUE HEADER ADDRESS     */
        10 RMCTR10 FIXED,           /* RESERVED              @Z40BPCH*/
        10 RMCTTBS  FIXED(31) , /* SRM TIME OF DAY BASE      */
        10 RMCTTOD  FIXED(31) , /* CURRENT TIME OF DAY       */
        10 RMCTTOC  BIT(64) , /* CURR TIME OF CENTURY      */
        10 RMCTALA  BIT(32) , /* ALG REQUEST ACCUMULATOR    */
        10 RMCTALR  BIT(32) , /* IMMED ALG REQUEST ACCUMUL  */
        10 RMCTRQSV PTR,        /* REQ SERVICE WORK AREA @Z40BPCH*/
        10 RMCTFLGS         , /* PROCESSING CONTROL FLAGS   */
          12 RMCTMFA  BIT(1),       /* MEASUREMENT FACILITY ACTIVE   */
          12 RMCTCPS1 BIT(1),       /* CAP SWITCH            @Z40BPSS*/
          12 RMCTF03  BIT(1),       /* RESERVED              @Z40BPSS*/
          12 RMCTINIT BIT(1),       /* SRM INITIALIZATION DONE       */
          12 RMCTRSV1 BIT(1),       /* RESERVED              @ZM43085*/
          12 RMCTSTW  BIT(1),       /* SET STOPPED WAR COLLECTION    */
          12 RMCTRSV2 BIT(1),       /* RESERVED              @ZM43085*/
          12 RMCTF06  BIT(1),       /* RESERVED              @Z40BPCH*/
          12 RMCTF07  BIT(1),       /* RESERVED              @Z40BPCH*/
          12 RMCTMFS  BIT(1),       /* MF1 ACT.,SET IPS RCVD @Z40BPCH*/
          12 RMCTF09  BIT(22),      /* RESERVED              @Z40BPCH*/
        10 RMCTTELM PTR,        /* RSRC MANAGER TIMING ELEMENT   */
        10 RMCTCPID CHAR(4) , /* RSRC MANAGER CELL POOL ID  */
        10 RMCTTOCI BIT(64) , /* TOD CLOCK READ AREA       */
        10 RMCTOUCB PTR,        /* PREASSEMBLED MODEL OUCB       */
        10 RMCTOUXB PTR,        /* INTERPOSED DUMMY OUXB         */
        10 RMCTSRBT PTR,        /* PREBUILT SRB TABLE            */
        10 RMCTDMDT PTR,        /* ADDR OF DOMAIN TABLE  @Z40BPCH*/
        10 RMCTDMDE PTR,        /* ADDR OF LAST DMDT ENT @Z40BPCH*/
        10 RMCTDMNC FIXED(15),      /* NUMBER OF DOMAINS     @Z40BPCH*/
        10 RMCTR50 FIXED(15),       /* RESERVED              @Z40BPCH*/
        10 RMCTEND  CHAR(0)    /* END OF RMCT              */
    RMCT9999
    %RMCTLEN = 'LENGTH(RMCT)';      /* SYMBOLIC FOR LENGTH OF RMCT   */
./       ADD   NAME=IRAWAMT
*/********************************************************************/
 /* IRAWAMT - PLI MAPPING MACRO FOR THE                              */
 /*     WORKLOAD ACTIVITY MEASUREMENT TABLE (WAMT)                   */
 /*                                                                  */
 /* METHOD OF ACCESS:                                                */
 /* THE WAMT MAY BE IN CORE OR IN THE 'OMF2' RECORD. TO ALLOW        */
 /* USE OF THIS STRUCTURE IN BOTH CASES, NO LEVEL 1 STRUCTURE        */
 /* NAME IS INCLUDED IN THIS MEMBER. DECLARE THE STRUCTURE AND       */
 /* IF YOU ARE MAPPING THE OMF2 RECORD INCLUDE ALSO THE ID AND       */
 /* TIMESTAMP FIELDS. THEN INCLUDE THIS MEMBER TO COMPLETE THE       */
 /* DECLARATION.                                                     */
 /*       DCL 1 WAMT BASED(WAMTPTR),                                 */
 /* %INCLUDE IRAWAMT                                                 */
 /* DCL WAMTPTR PTR BASED(STATPTR);                                  */
 /* CALL LOADPTR('STDEWAMT',STATPTR);                                */
 /*                                                                  */
 /* OR                                                               */
 /*                                                                  */
 /*  DCL 1 OMF1REC BASED(OMFRECPTR),                                 */
 /*          2 OMF2ID CHAR(4),                                       */
 /*          2 OMF2DATE FIXED DEC(7),                                */
 /*          2 OMF2HOUR FIXED DEC(7),                                */
 /*          2 WAMT,                                                 */
 /* %INCLUDE IRAWAMT;                                                */
*/********************************************************************/
         5 WAR PTR,               /* ADDR OF ROUTINE                 */
         5 SIZ FIXED BIN(31),     /* SIZE OF WAMT IN BYTES           */
         5 STARTIME,              /* INTERVAL START TIME             */
               9 (TMA,TMA2)       /*    IN 64 BIT TOD                */
              FIXED BIN(31),      /*    CLOCK FORMAT                 */
         5 STOPTIME,              /* INTERVAL END TIME               */
               9 (TOC,TOC2)       /*    IN 64 BIT TOD                */
              FIXED BIN(31),      /*    CLOCK FORMAT                 */
         5 ASD FIXED BIN(31),     /* MF1 ASID                        */
         5 TCB PTR,               /* MF1 TCB                         */
         5 IPS CHAR(2),           /* IPS SUFFIX                      */
         5 (CPD,                  /* COUNT OF PGP'S                  */
            SPD,                  /* LENGTH OF ONE WAMP              */
            HPG) FIXED BIN,       /* HIGHEST PG NUMBER               */
         5 (IPC,                  /* CPU COEFFICIENT                 */
            IPI,                  /* IO  COEFFICIENT                 */
            IPM) CHAR(4),         /* MSO COEFFICIENT                 */
         5 NDX(0:N REFER(HPG))    /* OFFSET TO EACH WAMP             */
              FIXED BIN(31);      /*   1 PER PGP                     */
 DCL 1 WAMP BASED(WAMPNEXT),      /* DATA FOR PGP                    */
         5 (TRN,                  /* TRANSACTIONS ENDED              */
            TAT,                  /* TRANS ACTIVE TIME               */
            SRV,                  /* TOTAL SERVICE                   */
            TET,                  /* TRANS ELAPSED TIME              */
            NWL,                  /* NORMALIZED WKLOAD               */
            CPU,                  /* CPU SERVICE                     */
            IOC,                  /* IO SERVICE                      */
            MSO,                  /* MSO SERVICE                     */
            TRR,                  /* TOTAL RESIDENT TIME             */
            SWC) FIXED BIN(31),   /* SWAP COUNT                      */
         5 (OBJ,                  /* OBJECTIVE NUMBER                */
            DMN) BIT(8) ALIGNED,  /* DOMAIN NUMBER                   */
         5 FILL CHAR(2);          /* RESERVED                        */
./       ADD   NAME=OURMFDEF
 %PAGE;
 DCL 1 OMF1 BASED(OMFRECPTR),
    5 OMF1ID CHAR(4),
 % INCLUDE PGBUF;
 %PAGE;
  DCL 1 OMF2 BASED(OMFRECPTR),
    3 OMF2ID CHAR(4),
    3 OMF2DATE FIXED DEC(7),
    3 OMF2TIME FIXED DEC(7),
    3 WAMT,
 % INCLUDE IRAWAMT;
 %PAGE;
 DCL 1 OMF3 BASED(OMFRECPTR),
    5 OMF3ID   CHAR(4) INIT('OMF3'),    /* RECORD ID FIELD         */
    5 OMF3DATE FIXED DEC(7),
    5 OMF3TIME FIXED DEC(7),
    5 RDW CHAR(4),
    5 LCCAWTIM CHAR(8),                  /* ACCUMULATED WAIT TIME   */
    5 PAGINGINFO,
     9 PVTNPIN  FIXED(31),          /* NUMBER OF PAGES PAGED IN,
                                       EXCLUDING SWAP-INS AND VIO
                                       PAGE-INS.                     */
     9 PVTNPOUT FIXED(31),          /* NUMBER OF PAGES PAGED OUT,
                                       EXCLUDING SWAP-OUTS AND VIO
                                       PAGE-OUTS                     */
     9 PVTVAMI  FIXED(31),          /* NUMBER OF VIO PAGE-INS
                                       EXCLUDING SWAP                */
     9 PVTVAMO  FIXED(31),          /* NUMBER OF VIO PAGE-OUTS
                                       EXCLUDING SWAP                */
     9 PVTVAMR  FIXED(31),          /* NUMBER OF VIO RECLAIMS        */
     9 PVTSPIN  FIXED(31),          /* NUMBER OF PAGES SWAPPED-IN    */
     9 PVTSPOUT FIXED(31),          /* NUMBER OF PAGES SWAPPED-OUT   */
     9 PVTNPREC FIXED(31),          /* NUMBER OF PAGES RECLAIMED,
                                       EXCLUDING SWAP AND VIO RECLAIMS
                                                                    */
     9 PVTNSWPS FIXED(31),          /* NUMBER OF SUCCESSFUL SWAP-INS */
     9 PVTCAIN  FIXED(31),          /* NUMBER OF COMMON AREA PAGE-INS
                                                                    */
     9 PVTCAOUT FIXED(31),          /* NUMBER OF COMMON AREA
                                       PAGE OUTS                    */
     9 PVTCAREC FIXED(31),          /* NUMBER OF RECLAIMS OF COMMON
                                       AREA PAGES                   */
     9 PVTSPREC FIXED(31),          /* NUMBER OF PRIVATE AREA PAGEABLE
                                       PAGES RECLAIMED ACROSS A SWAP
                                                                    */
    5 SWAPINFO ,
        9 RMCATOSC FIXED(31),     /* TERMINAL OUTPUT SWAP COUNT     */
        9 RMCATISC FIXED(31),     /* TERMINAL  INPUT SWAP COUNT     */
        9 RMCALWSC FIXED(31),     /* LONG WAIT SWAP COUNT           */
        9 RMCAXSSC FIXED(31),     /* AUT STOR SHORTAGE SWAP COUNT   */
        9 RMCARSSC FIXED(31),     /* REAL STOR SHORTAGE SWAP COUNT  */
        9 RMCADWSC FIXED(31),     /* DETECTED WAIT SWAP COUNT       */
        9 RMCARQSC FIXED(31),     /* REQSWAP SWAP COUNT             */
        9 RMCANQSC FIXED(31),     /* CAP ENQ EXCHANGE SWAP COUNT    */
        9 RMCAEXSC FIXED(31),     /* CAP EXCHANGE BASED ON RECOMM.
                                       VALUE SWAP COUNT             */
        9 RMCAUSSC FIXED(31);     /* CAP UNILATERAL SWAP OUT COUNT  */
./       ADD   NAME=PGBUF
* %GOTO PGBUFL1;
         MACRO
         PGBUF
PGBUF    DSECT                                                      YCC
* %PGBUFL1:;
*/* ASSEMBLER - SUPPLY THE DSECT AND POSSIBLE THE OMF1ID FIELD, THEN */
*/*    USE THE MACRO TO FILL IN THE REST:                            */
*/*  PGBUF     DSECT                                                 */
*/*            PGBUF                                                 */
*/* OR                                                               */
*/*  OMF1REC   DSECT                                                 */
*/*  OMF1ID    DS   CL4                                              */
*/*            PGBUF                                                 */
*/* PLIX- SUPPLY THE DCL 1 STRUCTURENAME    AND POSSIBLY THE OMF1ID. */
*/*  DCL 1 PGBUF(PGBFCT) BASED(STDEBUFP),                            */
*/*       % INCLUDE PGBUF;                                           */
*/* OR                                                               */
*/*  DCL 1 OMF1REC BASED(OMFRECPTR),                                 */
*/*         5 OMF1ID CHAR(4),                                        */
*/* % INCLUDE PGBUF;                                                 */
*/*                                                                  */
*/* DEPENDENCIES: USES VALUES IN 'STATGLBL' AND 'STATPSW'            */
*/*      MACROS.                                                     */
*/*                                                                  */
*/* VERSION DATE: MAY 26,1977                                        */
*/********************************************************************/
*  %GOTO PGBUFL2;
PGBTOD   DS    D                  SRB TIME STAMP                    YCC
PGBRCTD  DS    XL4                RDW FOR RCT VALUES                YCC
PGBRCT   DS    5H                 SRM RCT VALUES                    YCC
         DS    H                  ALIGNMENT                         YCC
PGBPVTD  DS    XL4                                                  YCC
PGBAFC   DS    H                  COPY OF PVTAFC                    YCC
PGBPOOL  DS    H                  COPY OF PVTPOOL                   YCC
PGBCFMCT DS    H                  COPY OF PVTCFMCT                  YCC
PGBCNTFX DS    H                  COPY OF PVTCNTFX                  YCC
PGBSQAFX DS    H                  COPY OF PVTSQAFX                  YCC
PGBCOMFX DS    H                  COPY OF PVTCOMFX                  YCC
PGBDMND  DS    XL4                RDW FPR DOMAIN INFO               YCC
PGBDMN   DS    (MAXDMN*2)H        MPLT AND RUA FROM DOMAINS         YCC
PGBPSWD  DS    XL4                RDW FOR PSWS                      YCC
PGBPSWS  DS    (FXBUFL)X          PSW INFO                          YCC
PGBLEN   EQU   *-PGBUF                                              YCC
         SPACE 2                                                    YCC
PGBRDW   DSECT                                                      YCC
* KINDA 'RECORD DESCRIPTOR WORD' IN PAGABLE BUFFER                  YCC
* INSERTED SO THE DATA AREA IS SELF DESCRIBING                      YCC
PGBRTYPE DS    X                  TYPE OF FOLLOWING DATA            YCC
PGBRITEM DS    X                  LENGTH OF ONE ITEM                YCC
PGBRLEN  DS    H                  LENGTH OF TOTAL DATA              YCC
         SPACE 1                                                    YCC
* PAGABLE BUFFER RECORD TYPES                                       YCC
PGRPSWS  EQU   1                                                    YCC
PGRRCT   EQU   2                                                    YCC
PGRDMN   EQU   3                                                    YCC
PGRPVT   EQU   4                                                    YCC
         MEND
 %PGBUFL2:;
    5 OMF1DATE FIXED DEC(7),
    5 OMF1TIME FIXED DEC(7),
     5 RCTINFO,                   /* SRM RCT TABLE VALUES            */
          9 RCTRDW CHAR(4),       /* RDW FOR THIS FIELD              */
          9 UICA FIXED BIN,       /* PAGE STEAL HIGHEST UIC          */
          9 CPUA FIXED BIN,       /* CPU UTILIZATION *16             */
          9 AVQC FIXED BIN,       /* COUNT OF AVQ LOW                */
          9 ASMQ FIXED BIN,       /* AVERAGE ASM QUEUE               */
          9 PTR  FIXED BIN,       /* PAGE FAULT RATE                 */
          9 RSV  FIXED BIN,
     5 PVTINFO,                   /* PAGE FRAME INFO                 */
          9 PVTRDW CHAR(4),       /* RDW FOR THIS FIELD              */
          9 AFC FIXED BIN,        /* AVAILABLE FRAMES                */
          9 POOL FIXED BIN,       /* TOTAL FRAMES                    */
          9 CFMCT FIXED BIN,      /* COMMON FRAMES                   */
          9 CNTFX FIXED BIN,      /* FIXED FRAMES                    */
          9 SQAFX FIXED BIN,      /* SQA FRAMES                      */
          9 COMFX FIXED BIN,      /* COMMON FIXED FRAMES             */
     5 DMN,                       /* DOMAIN INFO                     */
          9 DMNRDW CHAR(4),       /* RDW FOR THIS FIELD              */
          9 DMDTENTRY(MAXDMN),    /* ARRAY OF ENTRIES                */
              13 MPLT FIXED BIN,  /* MULTI-PROGRAMMING TARGET        */
              13 RUA FIXED BIN,   /* READY USER AVERAGE              */
     5 SAMPLES,                   /* PSW SAMPLES                     */
          9 PSWRDW CHAR(4),       /* RDW FOR THIS FIELD              */
          9 PSWS(SRBINTVL) ,
 % INCLUDE STATPSW;
./       ADD   NAME=STATGLBL
*  % GOTO STATPARM1;
         MACRO
         STATGLBL
* %STATPARM1:;
*/*
* STATDIE PARAMETERS:                                               YCC
*                                                                   YCC
* THE FOLLOWING SECTION COLLECTS NUMERIC VALUES WHICH THE           YCC
* AUTHOR REGARDS AS MOST LIKELY SUBJECT TO LOCAL MODIFICATION.      YCC
* THIS IS NOT INTENDED TO BE A TRUE SYSTEM GENERATION OPTION,       YCC
* BECAUSE THE VALUES CHOSEN BELOW ARE FAIRLY GENEROUS AND           YCC
* SHOULD SERVICE MOST USERS AS IS. AS FEEDBACK DEVELOPS             YCC
* ON THIS RELEASE, NEW OPTIONS MAY BE ADDED HERE LATER.             YCC
*                                                                   YCC
* PGBFCT    THIS IS THE NUBER OF PAGABLE BUFFERS TO BE ALLOCATED    YCC
*           IN CSA. THIS IS THE RETENTION PERIOD OF THE INCORE      YCC
*           AREA. IF THE SRB IS BEING DISPATCHED EVERY 30           YCC
*           SECONDS THEN THE DEFAULT VALUE OF 40 MEANS THAT         YCC
*           THE LAST 20 MINUTES OF DATA WILL BE IN VIRTUAL          YCC
*           MEMORY AT ANY TIME. THE DELAY TIME OF OURMF MUST        YCC
*           BE SHORT ENOUGH SO THAT THE BUFFERS ARE NOT             YCC
*           REUSED BETWEEN SWAPS. THE DEFAULT SWAP TIME OF          YCC
*           OURMF IS 15 MINUTES, WHICH LEAVES LOTS OF ROOM          YCC
*           ALSO, THE CPU COMMAND DISPLAYS THE WHOLE INCORE         YCC
*           AREA, SO SELECTION OF THIS PARAMETER EFFECTS THE        YCC
*           PERIOD OVER WHICH CPU WILL AVERAGE FOR ITS REPORT.      YCC
* SRBINTVL  THIS IS THE NUMBER OF SAMPLES WHICH ARE TAKEN           YCC
*           BEFORE THE INCORE BUFFER IS COPIED TO ONE OF THE        YCC
*           PAGABLE BUFFERS. EVERY SRBINTVL*MILLISC                 YCC
*           MILLISECONDS THE SRB IS SCHEDULED. THIS ALSO            YCC
*           EFFECTS THE SAMPLE PERIOD FOR RCT AND DOMAIN            YCC
*           INFORMATION. THE DEFAULT VALUE OF 120 SETS THIS         YCC
*           PERIOD TO EVERY 30 SECONDS.                             YCC
* MILLISC  THIS IS THE NUMBER OF MILLISECONDS BETWEEN               YCC
*           TIMER POPS AND SETS THE PSW SAMPLING FREQUENCY.         YCC
* MAXDMN    THIS IS THE MAXIMUM NUMBER OF DOMAINS TO BE             YCC
*           TABULATED WHEN GATHERING DOMAIN MPLT AND RUA.           YCC
         GBLA  &MILLISC                                             YCC
PGBFCT   EQU   40                 NUMBER OF PAGABLE BUFFERS         YCC
SRBINTVL EQU   120                NUMBER OF SAMPLES TILL SRB        YCC
&MILLISC SETA  250                4 TIMES A SECOND                  YCC
MAXDMN   EQU   10                                                   YCC
         MEND
  */
 %DCL (SRBINTVL,PGBFCT,MAXDMN,MILLISC) FIXED;
  % PGBFCT=40;
  % SRBINTVL=120;
  % MAXDMN=10;
  % MILLISC=250;
./       ADD   NAME=STATPSW
* %GOTO PSWL1;
         MACRO
         STATPSW
* %PSWL1:;
*/********************************************************************/
*/* THE STATPSW CONTROL BLOCK HAS EVOLVED OVER SEVERAL VERSIONS      */
*/* OF STATDIE. ORIGINALLY IT WAS JUST A COPY OF THE EXTERNAL        */
*/* OLD PSW, AND THUS IT RECEIVED ITS NAME. BUT MANY OF THE          */
*/* FIELDS OF THE PSW ARE IRRELEVANT OR NEVER CHANGE, AND SO         */
*/* NEW SOFTWARE DEFINED BYTES AND BITS WERE OVERLAYED ON PARTS      */
*/* OF THE HARDWARE PSW.                                             */
*/* THE STATPSW'S ARE STORED FIRST IN THE STDE FIXED BUFFER, THEN    */
*/* MOVED TO THE PAGABLE BUFFER EVERY 'SRBINTVL*MILLISC'             */
*/* MILLISECONDS. THEY ARE EVENTUALLY WRITTEN OUT IN THE 'OMF1'      */
*/* RECORD.                                                          */
*/*                                                                  */
*/* METHOD OF ACCESS:                                                */
*/* ASSEMBLER: GENERATES A DSECT NAMED 'PSW'                         */
*/* PLIX: SINCE THE PSWS ARE ALWAYS AN ARRAY SUBSTRUCTURE,           */
*/*    THIS MACRO DOES NOT INCLUDE A HIGH LEVEL STRUCTURE LABEL.     */
*/*    SO BUILD THE REST OF THE STRUCTURE AND INCLUDE THIS           */
*/*    AT THE END.                                                   */
*/*                                                                  */
*/* VERSION DATE: MAY 25, 1977                                       */
*/********************************************************************/
* %GOTO PSWL2;
PSW      DSECT                                                      YCC
PSWSVC   DS    X                  IF SVC IN CONTROL, THIS IS SVC #  YCC
PSWMASK  DS    X                                                    YCC
PSWKEY   EQU   X'F0'                                                YCC
PSWSVCMD EQU   X'08'              INTERRUPTED USER IN SVC           YCC
PSWSRB   EQU   X'04'              INTERRUPTED USER IN SRB MODE      YCC
PSWWAIT  EQU   X'02'                                                YCC
PSWPROB  EQU   X'01'                                                YCC
PSWRDY   DS    X                  # READY TCBS                      YCC
PSWPG    DS    X                  PG   OF INTERRUPTED USER          YCC
PSWINST  DS    A                  ADDRESS OF NEXT INSTRUCTION       YCC
PSWNAME  DS    CL8                PGM NAME FROM PRB                 YCC
PSWLEN   EQU   *-PSW                                                YCC
         SPACE 1                                                    YCC
FXBUFL   EQU   PSWLEN*SRBINTVL                                      YCC
         MEND
 %PSWL2:;
              13 SVC BIT(8) ALIGNED,         /* SVC # IF SVCMD       */
              13 FLAGS BIT(8) ALIGNED,       /* DEFINED BELOW        */
              13 TCBRDY BIT(8) ALIGNED,      /* READY TCB COUNT      */
              13 PERFORM   BIT(8) ALIGNED,   /* PERFORMANCE GRP      */
              13 ADDRESS FIXED BIN(31) ,
              13 CDENAME CHAR(8);            /* MODULE NAME          */
   /* FLAGS BIT MASKS                                                */
 DCL SVCMD BIT(8) ALIGNED INIT('00001000'B);
 DCL SRB   BIT(8) ALIGNED INIT('00000100'B);
 DCL WAIT  BIT(8) ALIGNED INIT('00000010'B);
 DCL PBLM  BIT(8) ALIGNED INIT('00000001'B);
./       ADD   NAME=STDE
* % GOTO STDEL1;
         MACRO
         STDE
STDE     DSECT                                                      YCC
* %STDEL1:;
*/********************************************************************/
*/* STDE: THE STATDIE FIXED DATA AREA                                */
*/* STORAGE FOR THIS CONTROL BLOCK IS ASSEMBLED INTO THE             */
*/*    STATDIE MODULE AT ENTRY POINT 'STATSTDE'.                     */
*/* METHOD OF ACCESS:                                                */
*/*    ASSEMBLER: THIS MACRO EXPANDS TO A DSECT 'STDE'. YOU          */
*/*    CAN LOCATE THE DATA AREA BY A                                 */
*/*            LOAD EP=STATSTDE                                      */
*/*            LR    RX,R0                                           */
*/*            USING STDE,RX                                         */
*/*     PLIX :   DCL STDEPTR PTR;                                    */
*/*              CALL LOADPTR('STATSTDE',STDEPTR);                   */
*/* DEPENDENCIES: USES VALUES SPECIFIED IN 'STATGLBL' AND 'STATPSW'  */
*/*     DSECTS.                                                      */
*/* VERSION DATE: MAY 26,1977                                        */
*/********************************************************************/
*   %GOTO STDEL2;
STDETQE  DS    CL128              TQE FOR DIE                       YCC
STDESRB  DS    CL44               SRB TO MOVE DATA TO BUFFER        YCC
STDELAST DS    0A                                                   YCC
         DS    X
STDEPURG EQU   X'80'              HIGH BIT SET TO PURGE DIE         YCC
STDEPAUS EQU   X'40'              SET TO FREEZE FIXED BUFFER        YCC
STDEATIV EQU   X'20'              STATDIE IS ACTIVE                 YCC
STDESRBA EQU   X'10'              SRB IS SCHEDULED                  YCC
         DS    X                                                    YCC
STDELSTO DS    H                                                    YCC
STDEBUFP DS    0A                 ADDRESS OF PAGABLE BUFFER         YCC
STDENXBF DS    X                  FIRST BYT IS INDEX OF NEXT BUFFER YCC
*                                 0 TO (PGBFCT-1)                   YCC
         DS    XL3                ADDRESS OF START OF BUFFERS       YCC
STDEGET  DS    A                  FREEMAIN INFO FOR PAGABLE BUFFER  YCC
STDEPLEN DS    H                  LENGTH OF A PAGABLE BUFFER        YCC
STDEPCNT DS    H                  COUNT OF PAGABLE BUFFERS          YCC
STDESRBI DS    H                  COPY OF SRBINTVL VALUE            YCC
STDEMDMN DS    H                  COPY OF MAXDMN BALUE              YCC
STDEWAMT DS    A                  ADDR OF WAMT BUFFER FOR MF1 ZAP
STDEWORK DS    4A                                                   YCC
STDELADR DS    A                  LOWEST PRIVATE ADDRESS FROM PVT   YCC
STDEHADR DS    A                  HIGEST PRIVATE ADDRESS            YCC
STDEENTY DS    (FXBUFL)X               FIXEX BUFFER                 YCC
STDEFILL EQU   *-PSWLEN
STDESPIL DS    (5*PSWLEN)X
STDELNTY EQU   *
STDEITOD DS    D
STDECPUT DS    D
STDEEXIT DS    0H                                                   YCC
STDELEN  EQU   *-STDE                                               YCC
         MEND
 %STDEL2:;
 DCL 1 STDE BASED(STDEPTR),
    5 STDETQE(0:127) BIT(8) ALIGNED,   /* TQE FOR DIEEXIT            */
    5 STDESRB(0:43) BIT(8) ALIGNED,    /* SRB FOR STATSRB            */
    5 STDELAST,                        /*                            */
         9 STDEFLGS BIT(8) ALIGNED,    /* DEFINED BELOW              */
         9 STDEFILL1 BIT(8) ALIGNED,   /* RESERVED                   */
         9 STDELSTO FIXED BIN,         /* OFFSET OF NEXT PSW         */
    5 STDEBUFP PTR,                    /* ADDR OF PGBUF'S            */
    5 STDEGET FIXED BIN(31),           /* FREEMAIN INFO              */
    5 STDEPLEN FIXED BIN,              /* LEN OF PGBUF               */
    5 STDEPCNT FIXED BIN,              /* # OF PGBUF'S               */
    5 STDESRBI FIXED BIN,              /* SRBINVTL VALUE             */
    5 STDEMDMN FIXED BIN,              /* MAXDMN VALUE               */
    5 STDEWAMT PTR,                    /* PGBL WAMT COPY             */
    5 STDEWORK CHAR(16),               /* STATDIE WORK AREA          */
    5 STDELADR FIXED BIN(31),          /* LOWEST PRIVATE ADDR        */
    5 STDEHADR FIXED BIN(31),          /* LOWEST CSA ADDR            */
    5 STDEENTY CHAR(0);                /* START OF PSWS              */
  /* STDEFLGS FLAGS                                                  */
 DCL STDEPURG BIT(8) ALIGNED INIT('10000000'B);
 DCL STDEPAUS BIT(8) ALIGNED INIT('01000000'B);
 DCL STDEATIV BIT(8) ALIGNED INIT('00100000'B);
 DCL STDESRBA BIT(8) ALIGNED INIT('00010000'B);
./       ADD   NAME=YCCSTART
 %DCL IKEPLS CHAR;
 %IKEPLS='';
 DEFAULT RANGE(*) BIN;
./       ADD   NAME=IHATQE
*        %GOTO TQEPLS1;                                              /*
         MACRO
         IHATQE
*                                                                   */
*%TQEPLS1 : ;
* /*******************************************************************/
* /*                                                                 */
* /* MACCOMP        OS/VS2,RELEASE 4   SC1CV/PZD81                   */
* /*                                                                 */
* /* MACSTAT        OS/VS2,RELEASE 4   73090/Y02759                  */
* /*                                                                 */
* /* MACMEAN        TQE MEANS TIMER QUEUE ELEMENT                    */
* /*                                                                 */
* /*******************************************************************/
*         %GOTO TQEPLS2;                                             /*
TQE      DSECT ,TQEPTR                 TIMER QUEUE ELEMENT
         DS    0D
TQETQE   DS    CL4                     TQE IDENTIFICATION
TQEFLNK  DS    AL4(0)                  ADDRESS OF NEXT TQE
TQEBLNK  DS    AL4(0)                  ADDRESS OF PREVIOUS TQE
TQEAID   DS    H                       REQUESTORS ASID
TQEFLGS  DS    BL1                     TQE FLAG BYTE 1
TQEOFF   EQU   X'80'                   TQE IS OFF TIMER QUEUE
TQETOD   EQU   X'40'                   TOD OPTION SPECIFIED
TQEWLIM  EQU   X'10'                   WAIT LIMIT EXCEEDED
TQEINCOM EQU   X'08'                   INTERVAL IS COMPLETE
TQEXITSP EQU   X'04'                   AN EXIT WAS SPECIFIED
TQETYPE  EQU   X'03'                   TQE TYPE     00=TASK TYPE
*                                                   01=WAIT TYPE
*                                                   11=REAL TYPE
TQEFLGS2 DS    BL1                     TQE FLAG BYTE 2
TQECOMP  EQU   X'80'                   REAL TQE IS BEING TIMED
TQEUSER  EQU   X'40'                   NON SYSTEM TQE
TQECRH   EQU   X'20'                   CHNL RECONFIG HDWE TQE  @ZM30496
TQEDUM   EQU   X'10'                   DUMMY SYSTEM TQE
TQELM    EQU   X'08'                   TIME LIMIT CHECKING SYSTEM TQE
TQEOPT   EQU   X'04'                   SYSTEM RESOURCES MANAGER TQE
TQEMF1   EQU   X'02'                   MF/1 SYSTEM TQE
TQEMIDN  EQU   X'01'                   MIDNIGHT SYSTEM TQE
TQEVAL   DS    2F                      EXPIRATION TIME OR TIME LEFT
TQESADDR DS    AL4(0)                  ADDRESS OF PP SAVE AREA
TQEEXIT  DS    AL4(0)                  ADDRESS OF USER EXIT RTN
TQEECB   EQU   TQEEXIT                 ECB IF WAIT TYPE TQE
TQETCB   DS    AL4(0)                  ADDRESS OF USER TCB
TQEASCB  DS    AL4(0)                  ADDRESS OF USER ASCB
TQELHPSW DS    F                       FIRST WORD OF CURRENT PSW
TQESRB   DS    CL44                    SRB
         ORG   TQESRB                  REGISTERS 2-12 FOR      @Z40FPYB
TQEDREGS DS    11F                     DIE ENTRY.              @Z40FPYB
TQEFLGS3 DS    BL1                     TQE FLAG BYTE 3         @Z40FPYB
TQEDIE   EQU   X'80'                   DIE TQE                 @Z40FPYB
         DS    CL27                    RESERVED
TQERSAVE DS    F                       REG SAVE AREA -SETDIE   @Z40FPYB
TQESTCK  DS    2F                      STCK AREA FOR SETDIE    @Z40FPYB
TQESTCKL EQU   TQESTCK                 STCK AREA-LEFT HALF     @Z40FPYB
TQESTCKR EQU   TQESTCK+4               STCK AREA-RIGHT HALF    @Z40FPYB
TQEEND   DS    0C                      END OF TQE
TQELEN   EQU   TQEEND-TQE              LENGTH OF TQE
         MEND  , */
*%TQEPLS2 :     ;
*DECLARE
*  1 TQE   BASED(TQEPTR) BDY(DWORD),   /* TIMER QUEUE ELEMENT        */
*    3 TQETQE  CHAR(4) BDY(WORD),      /* TQE IDENTIFICATION         */
*    3 TQEFLNK POINTER(31),       /* ADDRESS OF NEXT TQE             */
*    3 TQEBLNK POINTER(31),       /* ADDRESS OF PREVIOUS TQE         */
*    3 TQEAID  FIXED(16) UNSIGNED,     /* REQUESTORS ASID            */
*    3 TQEFLGS BIT(8),            /* TQE FLAG BYTE 1                 */
*      5 TQEOFF   BIT(1),         /* TQE IS OFF TIMER QUEUE          */
*      5 TQETOD   BIT(1),         /* TOD OPTION SPECIFIED            */
*      5 *        BIT(1),         /* RESERVED                        */
*      5 TQEWLIM  BIT(1),         /* WAIT LIMIT EXCEEDED             */
*      5 TQEINCOM BIT(1),         /* INTERVAL IS COMPLETE            */
*      5 TQEXITSP BIT(1),         /* AN EXIT WAS SPECIFIED           */
*      5 TQETYPE  BIT(2),         /* TQE TYPE  00=TASK REQUEST
*                                              01=WAIT REQUEST
*                                              11=REAL REQUEST       */
*    3 TQEFLGS2 BIT(8),           /* TQE FLAG BYTE 2                 */
*      5 TQECOMP  BIT(1),         /* REAL TQE IS BEING TIMED         */
*      5 TQEUSER  BIT(1),         /* NON SYSTEM TQE                  */
*      5 TQECRH   BIT(1),         /* CHNL RECONFIG HDWE TQE  @ZM30496*/
*      5 TQEDUM   BIT(1),         /* DUMMY SYSTEM TQE                */
*      5 TQELM    BIT(1),         /* TIME LIMIT CHECKING SYSTEM TQE  */
*      5 TQEOPT   BIT(1),         /* SYSTEM RESOURCES MANAGER TQE    */
*      5 TQEMF1   BIT(1),         /* MF/1 SYSTEM TQE                 */
*      5 TQEMIDN  BIT(1),         /* MIDNIGHT SYSTEM TQE             */
*    3 TQEVAL   BIT(64) BDY(DWORD),    /* EXPIRATION TIME/TIME LEFT  */
*      5 TQEVALLH  FIXED(32) UNSIGNED,
*      5 TQEVALRH  FIXED(32) UNSIGNED,
*    3 TQESADDR POINTER(31),           /* ADDRESS OF PP SAVE AREA    */
*    3 TQEEXIT  POINTER(31),           /* ADDRESS OF USER EXIT RTN   */
*    3 TQETCB   POINTER(31),           /* ADDRESS OF USER TCB        */
*    3 TQEASCB  POINTER(31),           /* ADDRESS OF USER ASCB       */
*    3 TQELHPSW FIXED(32) UNSIGNED,    /* FIRST WORD OF CURRENT PSW  */
*    3 TQESRB   CHAR(44) BDY(WORD),    /* SRB                        */
*      5 TQEDREGS(11) FIXED(32),      /* DIE REGS 2-12       @Z40FPYB*/
*    3 TQEFLGS3 BIT(8),               /* TQE FLAG BYTE 3     @Z40FPYB*/
*      5 TQEDIE    BIT(1),            /* DIE TQE             @Z40FPYB*/
*      5 *         BIT(7),            /* RESERVED            @Z40FPYB*/
*    3 *        CHAR(27),              /* RESERVED                   */
*    3 TQERSAVE FIXED(32),             /* REG SAVE -SETDIE   @Z40FPYB*/
*    3 TQESTCK  BIT(64) BDY(DWORD),     /* STCK AREA-SETDIE  @Z40FPYB*/
*      5 TQESTCKL  BIT(32),             /* STCK AREA-LEFT    @Z40FPYB*/
*      5 TQESTCKR  BIT(32);             /* STCK AREA-RIGHT   @Z40FPYB*/
*DECLARE TQEECB DEFINED(TQEEXIT)
*        FIXED(32) UNSIGNED;        /* ECB IF WAIT TYPE TQE       */
./       ADD   NAME=IRADMDT
*        %GOTO DMDTPLS1; /*
         MACRO
         IRADMDT  &DSECT=YES                                        */
*%DMDTPLS1:  ;
*/* MACCOMP Z-4 SC1CX/PKD16                                          */
*/* MACSTAT Z-4 75007/Z40BPSS                                        */
*/********************************************************************/
*/* MACRO NAME - IRADMDT                                             */
*/*                                                                  */
*/* DESCRIPTIVE NAME - DOMAIN TABLE DESCRIPTION                      */
*/*                                                                  */
*/* COPYRIGHT - NONE                                                 */
*/*                                                                  */
*/* STATUS - OS/VS2 RELEASE 4, 07/30/75                              */
*/*                                                                  */
*/* FUNCTION - THE DMDT SPECIFIES THE DOMAINS INTO WHICH             */
*/*            USER TRANSACTIONS ARE DIVIDED, AND FOR EACH           */
*/*            DOMAIN, THE CONSTRAINTS ON ITS PARTICIPATION          */
*/*            IN THE CHANGING OF THE MULTI-PROGRAMMING              */
*/*            LEVEL AND CURRENT DOMAIN CONTROL STATUS.              */
*/*                                                                  */
*/*            THE DOMAIN TO BE USED FOR A TRANSACTION IS            */
*/*            INDICATED BY THE -WPGPDMN- FIELD OF THE               */
*/*            CURRENT PERIOD WITHIN THE APPLICABLE PERFORMANCE      */
*/*            GROUP DESCRIPTION.                                    */
         AGO   .DMDTAL1                                              */
*/********************************************************************/
*/*                                                                  */
*/* INVOCATION PARAMETERS AND/OR KEYWORDS =                          */
*/*                                                                  */
*/*   BAL - DSECT=NO IF DSECT IS NOT TO BE PRODUCED.                 */
*/*                                                                  */
*/*     USING ON DMDT GIVES ADDRESSABILITY TO ALL SYMBOLS            */
*/*                                                                  */
*/*   PLS - %DMDTLEVL='USERLEVL' IF THE DMDT MAPPING IS TO BE        */
*/*         CONCATENATED WITH A PREVIOUS DECLARATION,WITH THE        */
*/*         DMDT BEING ASSIGNED THE INDICATED STRUCTURE LEVEL.       */
*/*       - %DMDT9999=',' IF THE STRUCTURE SHOULD NOT BE CLOSED      */
*/*                                                                  */
*/*         TO ACCESS AS A STANDALONE STRUCTURE DCL DMDTPTR PTR.     */
*/*                                                                  */
*/*  CHANGE ACTIVITY =@Z40BFEM                                       */
*/*                                                                  */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
.DMDTAL1 ANOP
         SPACE 1
         AIF  ('&DSECT' EQ 'NO').DMDTAL2
DMDT     DSECT
         AGO  .DMDTAL3
.DMDTAL2 ANOP
         DS   0F
DMDT     EQU  *
.DMDTAL3 ANOP
         SPACE 1
DMDTNO   DS   AL1                  DOMAIN NUMBER
DMDTLO   DS   AL1                  MIN MPL LEVEL
DMDTHI   DS   AL1                  MAX MPL LEVEL
DMDTWT   DS   AL1                  WEIGHTING FACTOR
DMDTMPLT DS   H                    CURRENT MPL TARGET
DMDTRUA  DS   H                    AVE # OF READY USERS
DMDTGOOU DS   H                    CURRENT # OF USERS GOING OUT
DMDTCMPL DS   H                    CURRENT MPL
DMDTOUTU DS   H                    CURRENT # USERS ON OUT Q
DMDTINCU DS   H                    CURRENT # SWAPPABLE INCORE USERS
DMDTRUC  DS   F                    ACCUMULATOR FOR READY USER COUNT
DMDTEND  DS   0F                   END OF DMDT
DMDTLEN  EQU  DMDTEND-DMDT         LENGTH OF DMDT
         MEND
*                                                                    */
*%DMDTPLS2:  ;
*        %IF DMDT9999 ^= ','       /* DOES STRUCTURE CONTINUE        */
*            %THEN %DMDT9999 = ';';/* NO, END DECLARE STATEMENT      */
*        %IF DMDTLEVL ^= ''        /* IS STRUCTURE CONCATENATED      */
*            %THEN %GOTO DMDTPLS3; /* YES, OMIT DECLARE STATEMENT    */
*   DCL
*     1 DMDT BASED(DMDTPTR) BDY(WORD),
*        %GOTO DMDTPLS4;           /* SKIP USER GIVEN LEVEL          */
*%DMDTPLS3:  DMDTDUM = DMDTLEVL××' DMDT';  /* PICK UP GIVEN LEVEL    */
*     DMDTDUM BDY(WORD),
*%DMDTPLS4:   ;
*        10 DMDTNO FIXED(8),       /* DOMAIN NUMBER                  */
*        10 DMDTLO FIXED(8),       /* MIN MPL LEVEL                  */
*        10 DMDTHI FIXED(8),       /* MAX MPL LEVEL                  */
*        10 DMDTWT FIXED(8),       /* WEIGHTING FACTOR               */
*        10 DMDTMPLT FIXED(15),    /* CURRENT MPL TARGET             */
*        10 DMDTRUA FIXED(15),     /* AVE # OF READY USERS           */
*        10 DMDTGOOU FIXED(15),    /* CURRENT # OF USERS GOING OUT   */
*        10 DMDTCMPL FIXED(15),    /* CURRENT MPL                    */
*        10 DMDTOUTU FIXED(15),    /* CURRENT # USERS ON OUT Q       */
*        10 DMDTINCU FIXED(15),    /* CURRENT # SWAPPABLE INCORE     */
*/*                                   USERS                          */
*        10 DMDTRUC FIXED(31),     /* ACCUMULATOR FOR READY USER     */
*/*                                   AVERAGE                        */
*        10 DMDTEND CHAR(0) BDY(WORD)  /* END OF DMDT                */
*     DMDT9999
*     %DMDTLEN = 'LENGTH(DMDT)';   /* SYMBOLIC FOR DMDT LENGTH       */
./       ADD   NAME=IRARCT
*        %GOTO  RCTPLS1;           /*
         MACRO
         IRARCT &DSECT=YES
*                                                                    */
*%RCTPLS1 : ;
*/*                                                                  */
*/*  MACCOMP Z-4 SC1CX/PKD16                                         */
*/*  MACSTAT Z-4 75007/Z40BPSS                                       */
*/********************************************************************/
*/*                                                                  */
*/*      MACRO NAME - IRARCT                                         */
*/*                                                                  */
*/*      DESCRIPTIVE NAME - SYSTEM RESOURCES MANAGER RESOURCE        */
*/*                         MANAGEMENT CONTROL TABLE                 */
*/*                                                                  */
*/*      STATUS - OS/VS2 RELEASE 4, 10/29/75, LEVEL=1                */
*/*                                                                  */
*/*      METHOD OF ACCESS                                            */
*/*        BAL - DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.     */
*/*              USING ON RCT GIVES ADDRESSIBILITY FOR ALL SYMBOLS.  */
*/*        PLS - TO ACCESS AS STAND ALONE STRUCTURE DCL RCTPTR PTR.  */
*/*              TO CONCATENATE WITH PREVIOUSLY DEFINED STRUCTURE    */
*/*                SET %RCTLEVEL TO DESIRED STRUCTURE LEVEL.         */
*/*              TO PREVENT STRUCTURE FROM BEING CLOSED,             */
*/*                SET %RCT9999=','.                                 */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*        %GOTO  RCTPLS2;          /*
         AIF   ('&DSECT' EQ 'YES').RCT001
RCT      DS    0D -                RESOURCE CONTROL TABLE
         AGO   .RCT002
.RCT001  ANOP
RCT      DSECT , -                 RESOURCE CONTROL TABLE
.RCT002  ANOP
RCTRCT   DC    CL4'RCT' -         ACRONYM IN EDCDIC -RCT-
*
*        RESOURCE CONTROL CONSTANTS
*
RCCUICTL DC    H'2'               UIC LOW THRESHOLD            @ZM43098
RCCUICTH DC    H'4'               UIC HIGH THRESHOLD           @ZM43098
RCCCPUTL DC    H'1536'            CPU LOW THRESHOLD SHIFTED    @ZM43098
RCCCPUTH DC    H'1615'            CPU HIGH THRESHOLD SHIFTED   @ZM43098
RCCPTRTL DC    H'100'             PAGING RATE LOW THRESHOLD    @ZM43098
RCCPTRTH DC    H'100'             PAGING RATE HIGH THRESHOLD   @ZM43098
RCCASMTL DC    H'7'               ASM QUEUED REQ LOW THRESHOLD @ZM43098
RCCASMTH DC    H'10'              ASM QUEUED REQ HIGH THRSHOLD @ZM43098
RCCTOTUT DC    H'100' -           AVERAGE DEFERRED IO UTILIZATION
*                                 THRESHOLD                    @ZM43083
RCCLCHUT DC    H'100' -           LCH DEFERRED UTILIZATION
*                                 THRESHOLD                    @ZM43083
RCCLCHRR DC    H'50' -            LCH REQUEST RATE THRESHOLD   @ZM43083
RCCRSVF1 DC    H'0' -             RESERVED
RCCRSVF2 DC    F'0' -             RESERVED
RCCRSVF3 DC    F'0' -             RESERVED
*
*        RESOURCE CONTROL VARIABLES
*
RCVCTMC  DC    H'0' -              SAMPLE INTERVAL COUNT
RCVUICA  DC    H'0' -              UIC AVERAGE
RCVCPUA  DC    H'0' -              CPU AVERAGE
RCVAVQC  DC    H'0' -              NUMBER OF AVQ LOWS
RCVASMQA DC    H'0' -              ASM QUEUE LENGTH AVERAGE
RCVPTR   DC    H'0' -              PAGING RATE
RCVUICC  DC    F'0' -              UIC ACCUMULATOR
RCVCPUC  DC    F'0' -              CPU ACCUMULATOR
RCVAVQP  DC    F'0' -              AVQ LOW COUNT SAVE
RCVASMQ  DC    F'0' -              ASM QUEUE LENGTH ACCUMULATOR
RCVBPTCT DC    F'0' -              BASE PAGE FAULT COUNT
RCVBPTTM DC    F'0' -              BASE PAGE FAULT TIME
RCVTOTDF DC    H'0' -              AVERAGE DEFERRED IO UTIL    @ZM43083
RCVRSVF1 DC    H'0' -              RESERVED
RCVTAPAD DC    F'0' -              LAST ALLOCATED TAPE ADDRESS @ZM43099
RCVRSVF2 DC    F'0' -              RESERVED
RCVRSVF3 DC    F'0' -              RESERVED
RCTEND   DS    0D -                END OF RCT
RCTLEN   EQU   RCTEND-RCT -        LENGTH OF RCT
         MEND
*        */
*%RCTPLS2 : ;
*    %IF RCT9999^=','              /* IF THIS IS LAST BLOCK          */
*      %THEN %RCT9999=';';         /* THEN CLOSE DECLARE STATEMENT   */
*    %IF RCTLEVEL^=''              /* IF MINOR LEVEL IS SPECIFIED,   */
*      %THEN %GOTO RCTPLS3;        /* SKIP MAJOR DECLARE             */
*DECLARE                           /*                                */
*  1 RCT BASED(RCTPTR)             /* RESOURCE CONTROL TABLE         */
*    %GOTO RCTPLS4;                /* MAJOR STRUCTURE                */
*%RCTPLS3: RCTDUM=RCTLEVEL××' RCT'; /* CONCATENATE AS MINOR STRUCTURE*/
*  RCTDUM                          /* RESOURCE CONTROL TABLE         */
*%RCTPLS4:;
*        BDY(DWORD),
*      5 RCTRCT CHAR(4),           /* ACRONYM IN EBCDIC -RCT-        */
*/*                                                                  */
*/*      RESOURCE CONTROL CONSTANTS                                  */
*/*                                                                  */
*      5 RCCUICTL FIXED(15),       /* UIC THRESHOLD LOW              */
*      5 RCCUICTH FIXED(15),       /* UIC HIGH THRESHOLD             */
*      5 RCCCPUTL FIXED(15),       /* CPU LOW THRESHOLD              */
*      5 RCCCPUTH FIXED(15),       /* CPU HIGH THRESHOLD             */
*      5 RCCPTRTL FIXED(15),       /* PAGING RATE LOW THRESHOLD      */
*      5 RCCPTRTH FIXED(15),       /* PAGING RATE HIGH THRESHOLD     */
*      5 RCCASMTL FIXED(15),       /* ASM QUEUED REQUEST LOW
                                      THRESHOLD                      */
*      5 RCCASMTH FIXED(15),       /* ASM QUEUED REQUEST HIGH
                                      THRESHOLD                      */
*      5 RCCTOTUT FIXED(15),      /* AVERAGE DEFERRED IO UTIL THRESHOLD
*                                                            @ZM43083*/
*      5 RCCLCHUT FIXED(15),      /* LCH DEFERRED UTIL THRESHOLD
*                                                            @ZM43083*/
*      5 RCCLCHRR FIXED(15),       /* LCH REQ RATE THRESHOLD @ZM43083*/
*        5 RCCRSVF1 FIXED(15),      /* RESERVED                      */
*        5 RCCRSVF2 FIXED(31),      /* RESERVED                      */
*        5 RCCRSVF3 FIXED(31),      /* RESERVED                      */
*/*                                                                  */
*/*   RESOURCE CONTROL VARIABLES                                     */
*/*                                                                  */
*      5 RCVCTMC FIXED(15),        /* SAMPLE INTERVALS COUNT         */
*      5 RCVUICA FIXED(15),        /* UIC AVERAGE                    */
*      5 RCVCPUA FIXED(15),        /* CPU USAGE AVERAGE              */
*      5 RCVAVQC FIXED(15),        /* AVQ LOW COUNT                  */
*      5 RCVASMQA FIXED(15),       /* ASM QUEUE LENGTH AVERAGE       */
*      5 RCVPTR FIXED(15),         /* PAGING RATE                    */
*      5 RCVUICC FIXED(31),        /* UIC ACCUMULATOR                */
*      5 RCVCPUC FIXED(31),        /* CPU USAGE ACCUMULATOR          */
*      5 RCVAVQP FIXED(31),        /* AVQ LOW COUNT SAVE AREA        */
*      5 RCVASMQ FIXED(31),        /* ASM QUEUE LENGTH ACCUMULATOR   */
*      5 RCVBPTCT FIXED(31),       /* BASE PAGE FAULT COUNT          */
*      5 RCVBPTTM FIXED(31),       /* BASE PAGE FAULT TIME           */
*      5 RCVTOTDF FIXED(15),       /* AVERAGE DEFERRED IO UTILIZATION
*                                                            @ZM43083*/
*        5 RCVRSVF1 FIXED(15),      /* RESERVED                      */
*        5 RCVTAPAD FIXED(31),      /* LAST ALLOCATED TAPE   @ZM43099*/
*        5 RCVRSVF2 FIXED(31),      /* RESERVED                      */
*        5 RCVRSVF3 FIXED(31),      /* RESERVED                      */
*      5 RCTEND CHAR(0)            /* END OF RCT                     */
*          BDY(DWORD) RCT9999
*%RCTLEN='LENGTH(RCT)';            /* OBTAIN LENGTH OF RCT           */
*@EJECT;
./       ADD   NAME=HG00101
++PTF(HG00101)
  /* MODIFICATION TO MF1 WORKLOAD INTERVAL REPORTING
     TO COPY WAMT TO STATDIE PAGABLE WAMT BUFFER IF
     STATDIE IS ACTIVE.
     THIS CODE ZAPS THE ASSEMBLER LANGUAGE PROLOGUE
     TO THE THIRD ENTRY POINT IN IRBMFDWP. IT USES
     THE LINK PACK AREA SEARCH ROUTINE TO LOCATE
     'STATWAMT' WHICH IS A POINTER TO THE ONE PAGE
     BUFFER OBTAINED BY STATDIE TO HOLD THE LAST
     WAMT FOR DISPLAY BY THE 'WORKLOAD' TSO COMMAND
     OR TRACING BY OURMF. */ .
++VER(Z037) PRE(UZ80700).
++ZAP(IRBMFDWP).
 NAME IRBMFDWP
 EXPAND IRBMFDWP(90)
*                            ORG   ZAPPED
VER 0210 982C,101C           LM    2,12,28(1)
*                   ZAPPED2  EQU   *
VER 0214 50D0,1004           ST    13,4(,1)
*                            ORG   PATCH
VER 08A8 0000,0000,0000,0000 DC    XL32'00'
VER 08B0 0000,0000,0000,0000
VER 08B8 0000,0000,0000,0000
VER 08C0 0000,0000,0000,0000
*                            ORG   ZAPPED2
REP 0214 47F0,C88C           B     PATCH
*                   RET      EQU   *
*                            ORG   PATCH
* THERE HAS TO BE SOMETHING EXCEPTIONAL ABOUT A GOOD ZAP
* THE NICE THINGS ABOUNT THIS ONE ARE:
*  1) WE HAVE TWO SAVE AREAS, ONE POINTED TO BY R13 THAT
*     HAS BEEN JUST STORED INTO, AND ONE POINTED TO BY
*     R1 WHICH R2-12 ARE BEING RESTORED FROM.  SO THERE
*     ARE LOTS OF REGISTERS TO USE.
*  2) IT IS JUST AFTER AN INTERNAL ENTRY POINT IN THE
*     MODULE AND WILL BE EASY TO RELOCATE AFTER MAINTENANCE
*  3) THIS ZAP HITS ONLY GENNED ASSEMBLER STATEMENTS, AN
*     ISLAND OF SANITY IN A SEA OF PLS.
REP 08A8 18A1                LR    10,1               SAVE FOR LATER
REP 08AA 9801,C8D0           LM    0,1,NAME           PARM TO LPA SRCH
REP 08AE 5830,0010           L     3,CVTPTR
REP 08B2 58F3,0160           L     15,CVTLPDSR-CVT(3) ADDR OF LPASRCH
REP 08B6 05EF                BALR  14,15              CALL IEAVVMSR
REP 08B8 47F0,C8A4           B     FOUND              NAME FOUND
REP 08BC 47F0,C8C2           B     RTNR               NAME NOT FOUND
*                   FOUND    EQU   *
REP 08C0 1810                LR    1,0                GET LPDE ADDR
REP 08C2 5811,0010           L     1,LPDENTP-LPDE(1) GET ENTRY POINT
REP 08C6 5801,0000           L     0,0(1)             GET STATWAMT VALUE
REP 08CA 1200                LTR   0,0                IS STATDIE UP?
REP 08CC 4780,C8C2           BZ    RTNR               NO, QUIT
REP 08D0 4110,0FFF           LA    1,4095             STATDIE GETS 4K BU
REP 08D4 582B,00B8           L     2,WAMTPTR(11)      GET LOCAL WAMT ADD
*                                 FROM GETMAIN DATA AREA
REP 08D8 5832,0004           L     3,4(2)             GET ITS SIZE
REP 08DC 0E02                MVCL  0,2                COPY WAMT
*                   RTNR     EQU   *
REP 08DE 181A                LR    1,10               RESTORE
REP 08E0 982C,101C           LM    2,12,28(1)         RELOAD REGS
REP 08E4 50D0,1004           ST    13,4(,1)
REP 08E8 47F0,C1FC           B     RET                GO BACK
*                   NAME     EQU   *
REP 08EC E2E3,C1E3,E6C1,D4E3 DC    CL8'STATWAMT'
* DECK PRODUCED BY THE ASMTOZAP UTILITY 77/05/21 093431
./       ADD   NAME=IRBMFDWP
         PRINT DATA
IRBMFDWP CSECT
         USING IRBMFDWP+X'1C',12
ZAPPED   EQU   IRBMFDWP+X'210'
PATCH    EQU   IRBMFDWP+X'8A8'
WAMTPTR  EQU   X'B8'
*ZAP CARD ++PTF(HG00101)
*ZAP CARD   /* MODIFICATION TO MF1 WORKLOAD INTERVAL REPORTING
*ZAP CARD      TO COPY WAMT TO STATDIE PAGABLE WAMT BUFFER IF
*ZAP CARD      STATDIE IS ACTIVE.
*ZAP CARD      THIS CODE ZAPS THE ASSEMBLER LANGUAGE PROLOGUE
*ZAP CARD      TO THE THIRD ENTRY POINT IN IRBMFDWP. IT USES
*ZAP CARD      THE LINK PACK AREA SEARCH ROUTINE TO LOCATE
*ZAP CARD      'STATWAMT' WHICH IS A POINTER TO THE ONE PAGE
*ZAP CARD      BUFFER OBTAINED BY STATDIE TO HOLD THE LAST
*ZAP CARD      WAMT FOR DISPLAY BY THE 'WORKLOAD' TSO COMMAND
*ZAP CARD      OR TRACING BY OURMF. */ .
*ZAP CARD ++VER(Z037) PRE(UZ80700).
*ZAP CARD ++ZAP(IRBMFDWP).
*ZAP CARD  NAME IRBMFDWP
*ZAP CARD  EXPAND IRBMFDWP(90)
*ZAP START VER
         ORG   ZAPPED
         LM    2,12,28(1)
ZAPPED2  EQU   *
         ST    13,4(,1)
         ORG   PATCH
         DC    XL32'00'
*ZAP START REP
         ORG   ZAPPED2
         B     PATCH
RET      EQU   *
         ORG   PATCH
* THERE HAS TO BE SOMETHING EXCEPTIONAL ABOUT A GOOD ZAP
* THE NICE THINGS ABOUNT THIS ONE ARE:
*  1) WE HAVE TWO SAVE AREAS, ONE POINTED TO BY R13 THAT
*     HAS BEEN JUST STORED INTO, AND ONE POINTED TO BY
*     R1 WHICH R2-12 ARE BEING RESTORED FROM.  SO THERE
*     ARE LOTS OF REGISTERS TO USE.
*  2) IT IS JUST AFTER AN INTERNAL ENTRY POINT IN THE
*     MODULE AND WILL BE EASY TO RELOCATE AFTER MAINTENANCE
*  3) THIS ZAP HITS ONLY GENNED ASSEMBLER STATEMENTS, AN
*     ISLAND OF SANITY IN A SEA OF PLS.
         LR    10,1               SAVE FOR LATER
         LM    0,1,NAME           PARM TO LPA SRCH
         L     3,CVTPTR
         L     15,CVTLPDSR-CVT(3) ADDR OF LPASRCH
         BALR  14,15              CALL IEAVVMSR
         B     FOUND              NAME FOUND
         B     RTNR               NAME NOT FOUND
FOUND    LR    1,0                GET LPDE ADDR
         L     1,LPDENTP-LPDE(1) GET ENTRY POINT
         L     0,0(1)             GET STATWAMT VALUE
         LTR   0,0                IS STATDIE UP?
         BZ    RTNR               NO, QUIT
         LA    1,4095             STATDIE GETS 4K BUF
         L     2,WAMTPTR(11)      GET LOCAL WAMT ADDR
*                                 FROM GETMAIN DATA AREA
         L     3,4(2)             GET ITS SIZE
         MVCL  0,2                COPY WAMT
RTNR     LR    1,10               RESTORE
         LM    2,12,28(1)         RELOAD REGS
         ST    13,4(,1)
         B     RET                GO BACK
NAME     DC    CL8'STATWAMT'
*ZAP STOP
         CVT   DSECT=YES
         IHALPDE
         END
./       ADD   NAME=ASZAPJCL
//ASZAPJCL JOB (YCC055,1M,5000L),GILBERT
//ASM     EXEC PGM=IFOX00,REGION=200K,PARM='NODECK,NOLOAD,NOALIGN'
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//           DD DSN=YCC1.AMODGEN,DISP=SHR
//SYSUT1   DD  DSNAME=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1)),
//             DCB=BLKSIZE=1700
//SYSUT2   DD  DSNAME=&SYSUT2,UNIT=SYSDA,SPACE=(CYL,(1,1)),
//             DCB=BLKSIZE=1700
//SYSUT3   DD  DSNAME=&SYSUT3,SPACE=(CYL,(1,1)),
//             UNIT=SYSDA,
//             DCB=BLKSIZE=1700
//SYSPRINT DD  DSN=&LIST,DISP=(,PASS),UNIT=DISK,SPACE=(TRK,(20,20))
//SYSIN    DD  DSN=SYS1.OURMFSRC(IRBMFDWP),DISP=SHR
//LIST    EXEC PGM=IEBGENER
//SYSPRINT DD SYSOUT=*
//SYSIN DD DUMMY
//SYSUT1 DD  DSN=&LIST,DISP=(OLD,PASS)
//SYSUT2 DD  SYSOUT=*
// EXEC PLIXCG
//PLI.SYSIN DD DSN=SYS1.OURMFSRC(ASMTOZAP),DISP=SHR
//GO.IN       DD  DSN=&LIST,DISP=(OLD,DELETE)
//OUT      DD  SYSOUT=*
./       ADD   NAME=OMFCMPL
//OMFCMPL JOB (YCC055,10M,20000L),GILBERT
//* THIS JOB COMPILES AND ASSEMBLES ALL THE MODULES IN OURMF
//* SPECIAL NOTE SHOULD BE MADE OF THE FOLLOWING ITEMS:
//* 1) THE DATASET NAME 'SYS1.OURMFSRC' IS USED FOR THE
//*    PDS CREATED FROM THE INSTALLATION TAPE, AND ALSO
//*    FOR THE OBJECT DATASET AND SYSLIB.
//* 2) UNIT NAME 'SYSDA' IS USED FOR SCRATCH.
//* 3) SYS1.AMODGEN MUST BE AVAILABLE FOR THE ASSEMBLIES.
//* 4) THE 'IFOX00' ASSEMBLER IS USED. IF YOU PREFER ASSEMBLER
//*    H YOU MUST MAKE APPROPRIATE ADJUSTMENTS
//* 5) THIS JOB WILL RUN A WHILE AND SHOULD BE GIVE A BIG
//*    TIME ESTIMATE (10 MINUTES AND 20000 LINES IS ABOUT
//*    TWICE WHAT IS REALLY NEEDED).
//PLIX PROC M=,OBJ=O
//PLI     EXEC PGM=IEL0AA,REGION=200K
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  DSN=&SYSUT1,UNIT=SYSDA,
//             SPACE=(CYL,(1,1))
//SYSLIB DD DSN=SYS1.OURMFSRC,DISP=SHR
//SYSIN DD DSN=SYS1.OURMFSRC(&M),DISP=SHR
//SYSLIN DD DSN=SYS1.OURMFSRC(&M.&OBJ),DISP=SHR
// PEND
//ASM PROC M=,OBJ=O
//ASM     EXEC PGM=IFOX00,REGION=200K,PARM=(NODECK,LOAD)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
// DD DSN=SYS1.AMODGEN,DISP=SHR
// DD DSN=SYS1.OURMFSRC,DISP=SHR
//SYSUT1   DD  DSNAME=&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(1,1)),
// EXEC PLIX,M=OURMF
// EXEC PLIX,M=CNTLOMF
// EXEC PLIX,M=CPU
// EXEC PLIX,M=WKLOAD
// EXEC PLIX,M=DMN
// EXEC PLIX,M=RCT
// EXEC PLIX,M=PAGES
// EXEC PLIX,M=OMFPST2
// EXEC PLIX,M=S99FAIL
// EXEC ASM,M=PLIMISC
// EXEC ASM,M=STATDIE
./       ADD   NAME=OURMFJOB
//OURMFJOB JOB 1,SYS
//*
//* THIS JOB LINKEDITS ALL THE MODULES OF THE OURMF SYSTEM.
//* IT ALSO INDIRECTLY DOCUMENTS THE APPROPRIATE LINKAGE EDITOR
//* OPTIONS AND CONTROL CARDS FOR SUBSEQUENT LINKEDITS
//* OF LOCALLY MODIFIED VERSIONS OF THE PROGRAMS. THE
//* FOLLOWING ITEMS SHOULD BE CHECKED:
//*     1) THE FIRST JOB STEP LINKEDITS THE SUROUTINES
//*        IN S99FAIL AND PLIMISC INTO A TEMPORARY PDS.
//*        IF YOU FIND THESE SUBROUINES USEFUL YOU MAY
//*        EVENTUALLY WANT TO LINKEDIT THEM INTO A LOCAL
//*        PERMINENT SUBROUNTINE LIBRARY.
//*     2) AN OBJECT DECK FOR AMDPRSEG FROM PTF 4822 IS
//*        PROVIDED TO RESOLVE A CALL FROM PLIMISC.
//*     3) THE DATASET 'SYS1.PLIBASE' WILL BE USED LATER
//*        TO RESOLVE SUBROUTINE CALLS TO THE PLIX RESIDENT
//*        LIBRARY.
//*     5) THE UNIT   NAME 'SYSDA' IS USED FOR SCRATCH SPACE.
//*     6) STATDIE IS LINKEDITED INTO SYS1.LPALIB. IT MUST
//*        GO INTO THAT DATASET. VERIFY THAT THIS MODULE
//*          NAME IS NOT IT USE, AND ALSO ITS    ALIASES
//*        DIEPURG,STATSTDE, AND STATWAMT
//*     7) THE OTHER MODULES ARE LINKEDITED INTO SYS1.LINKLIB.
//*        IF YOU WISH, YOU MAY TEMPORARILY LINKEDIT THEM
//*        INTO A PRIVATE LIBRARY FOR TESTING. REMEMBER,
//*        OURMF MUST BE APF AUTHORIZED TO DYNAMICALLY
//*        ALLOCATE ITS TAPE SPILL FILE.
//LKED     EXEC PGM=IEWL,PARM='RENT,REUS,LET,LIST,NCAL',REGION=200K
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))
//OBJ DD DSN=SYS1.OURMFSRC,DISP=SHR
//SYSLMOD DD DSN=&TEMP,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,(10,10,3))
//SYSLIN DD *
   INCLUDE OBJ(PLIMISCO)
   INCLUDE OBJ(AMDPRSEG)
   ALIAS SVC
   ALIAS LINKER
   ALIAS LOADPTR
   ALIAS TODCNVT
   ALIAS STCK
   ALIAS PTRIN
   ALIAS PTROUT
   ALIAS SPM
   ALIAS SDL
   ALIAS ADL
   NAME PLIMISC(R)
   INCLUDE OBJ(S99FAILO)
   NAME S99FAIL(R)
//LKED    EXEC PGM=IEWL,PARM='RENT,REUS,REFR,LIST,MAP,AC=1',REGION=200K
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))
//OBJ DD DSN=SYS1.OURMFSRC,DISP=SHR
//SYSLMOD DD DSN=SYS1.LPALIB,DISP=SHR
//SYSLIN DD *
   INCLUDE OBJ(STATDIEO)
   ALIAS DIEPURG
   ALIAS STATSTDE
   ALIAS STATWAMT
   NAME STATDIE(R)
//LKED     EXEC PGM=IEWL,PARM='LIST,MAP,AC=1',REGION=200K
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))
//OBJ DD DSN=SYS1.OURMFSRC,DISP=SHR
//SYSLMOD DD DSN=SYS1.LINKLIB,DISP=SHR
//SYSLIB DD DSN=SYS1.PLIBASE,DISP=SHR
//SYSLIN DD *
   INCLUDE OBJ(OURMFO)
   INCLUDE OBJ(CNTLOMFO)
   INCLUDE OBJ(PLIMISCO)
   INCLUDE OBJ(AMDPRSEG)
   INCLUDE OBJ(S99FAILO)
   NAME OURMF(R)
//LKED     EXEC PGM=IEWL,PARM='LIST,MAP',REGION=200K
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))
//OBJ DD DSN=SYS1.OURMFSRC,DISP=SHR
//SYSLMOD DD DSN=SYS1.LINKLIB,DISP=SHR
//SYSLIB DD DSN=SYS1.PLIBASE,DISP=SHR
//SYSLIN DD *
   INCLUDE OBJ(WKLOADO)
   INCLUDE OBJ(PLIMISCO)
   INCLUDE OBJ(AMDPRSEG)
   ENTRY PLICALLA
   NAME WKLOAD(R)
//LKED     EXEC PGM=IEWL,PARM='RENT,REUS,MAP,LIST',REGION=200K
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))
//OBJ DD DSN=SYS1.OURMFSRC,DISP=SHR
//SYSLMOD DD DSN=SYS1.LINKLIB,DISP=SHR
//SYSLIB DD DSN=SYS1.PLIBASE,DISP=SHR
//SYSLIN DD *
   INCLUDE OBJ(CPUO)
   INCLUDE OBJ(PLIMISCO)
   ENTRY PLICALLA
   NAME CPU(R)
   INCLUDE OBJ(RCTO)
   INCLUDE OBJ(PLIMISCO)
   ENTRY PLICALLA
   NAME RCT(R)
   INCLUDE OBJ(DMNO)
   INCLUDE OBJ(PLIMISCO)
   ENTRY PLICALLA
   NAME DMN(R)
   INCLUDE OBJ(PAGESO)
   INCLUDE OBJ(PLIMISCO)
   ENTRY PLICALLA
   NAME PAGES(R)
   INCLUDE OBJ(OMFPST2O)
   NAME OMFPST2
//MF1PTF EXEC PUTSMP
//SMPPTFIN DD *
++PTF(HG00101)
  /* MODIFICATION TO MF1 WORKLOAD INTERVAL REPORTING
     TO COPY WAMT TO STATDIE PAGABLE WAMT BUFFER IF
     STATDIE IS ACTIVE.
     THIS CODE ZAPS THE ASSEMBLER LANGUAGE PROLOGUE
     TO THE THIRD ENTRY POINT IN IRBMFDWP. IT USES
     THE LINK PACK AREA SEARCH ROUTINE TO LOCATE
     'STATWAMT' WHICH IS A POINTER TO THE ONE PAGE
     BUFFER OBTAINED BY STATDIE TO HOLD THE LAST
     WAMT FOR DISPLAY BY THE 'WORKLOAD' TSO COMMAND
     OR TRACING BY OURMF. */ .
++VER(Z037) PRE(UZ80700).
++ZAP(IRBMFDWP).
 NAME IRBMFDWP
 EXPAND IRBMFDWP(90)
*                            ORG   ZAPPED
VER 0210 982C,101C           LM    2,12,28(1)
*                   ZAPPED2  EQU   *
VER 0214 50D0,1004           ST    13,4(,1)
*                            ORG   PATCH
VER 08A8 0000,0000,0000,0000 DC    XL32'00'
VER 08B0 0000,0000,0000,0000
VER 08B8 0000,0000,0000,0000
VER 08C0 0000,0000,0000,0000
*                            ORG   ZAPPED2
REP 0214 47F0,C88C           B     PATCH
*                   RET      EQU   *
*                            ORG   PATCH
* THERE HAS TO BE SOMETHING EXCEPTIONAL ABOUT A GOOD ZAP
* THE NICE THINGS ABOUNT THIS ONE ARE:
*  1) WE HAVE TWO SAVE AREAS, ONE POINTED TO BY R13 THAT
*     HAS BEEN JUST STORED INTO, AND ONE POINTED TO BY
*     R1 WHICH R2-12 ARE BEING RESTORED FROM.  SO THERE
*     ARE LOTS OF REGISTERS TO USE.
*  2) IT IS JUST AFTER AN INTERNAL ENTRY POINT IN THE
*     MODULE AND WILL BE EASY TO RELOCATE AFTER MAINTENANCE
*  3) THIS ZAP HITS ONLY GENNED ASSEMBLER STATEMENTS, AN
*     ISLAND OF SANITY IN A SEA OF PLS.
REP 08A8 18A1                LR    10,1               SAVE FOR LATER
REP 08AA 9801,C8D0           LM    0,1,NAME           PARM TO LPA SRCH
REP 08AE 5830,0010           L     3,CVTPTR
REP 08B2 58F3,0160           L     15,CVTLPDSR-CVT(3) ADDR OF LPASRCH
REP 08B6 05EF                BALR  14,15              CALL IEAVVMSR
REP 08B8 47F0,C8A4           B     FOUND              NAME FOUND
REP 08BC 47F0,C8C2           B     RTNR               NAME NOT FOUND
*                   FOUND    EQU   *
REP 08C0 1810                LR    1,0                GET LPDE ADDR
REP 08C2 5811,0010           L     1,LPDENTP-LPDE(1) GET ENTRY POINT
REP 08C6 5801,0000           L     0,0(1)             GET STATWAMT VALUE
REP 08CA 1200                LTR   0,0                IS STATDIE UP?
REP 08CC 4780,C8C2           BZ    RTNR               NO, QUIT
REP 08D0 4110,0FFF           LA    1,4095             STATDIE GETS 4K BU
REP 08D4 582B,00B8           L     2,WAMTPTR(11)      GET LOCAL WAMT ADD
*                                 FROM GETMAIN DATA AREA
REP 08D8 5832,0004           L     3,4(2)             GET ITS SIZE
REP 08DC 0E02                MVCL  0,2                COPY WAMT
*                   RTNR     EQU   *
REP 08DE 181A                LR    1,10               RESTORE
REP 08E0 982C,101C           LM    2,12,28(1)         RELOAD REGS
REP 08E4 50D0,1004           ST    13,4(,1)
REP 08E8 47F0,C1FC           B     RET                GO BACK
*                   NAME     EQU   *
REP 08EC E2E3,C1E3,E6C1,D4E3 DC    CL8'STATWAMT'
* DECK PRODUCED BY THE ASMTOZAP UTILITY 77/05/21 093431
//SMPCNTL DD *
RECEIVE.
APPLY S(HG00101).
./       ADD   NAME=AMDPRSEG
ESD      
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
RLD      
END 
./       ADD   NAME=CNTLOMFO
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
END 
./       ADD   NAME=CPUO
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
END 
./       ADD   NAME=DMNO
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
END 
./       ADD   NAME=OMFPST2O
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
END 
./       ADD   NAME=OURMFO
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
END 
./       ADD   NAME=PAGESO
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
END 
./       ADD   NAME=PLIMISCO
 ALIAS SVC
 ALIAS LINKER
 ALIAS LOADPTR
 ALIAS STCK
 ALIAS TCAPTR
 ALIAS PTRIN
 ALIAS PTROUT
 ALIAS SDL
 ALIAS ADL
 ALIAS TODCNVT
 ALIAS COMWAIT
ESD      
ESD      
ESD      
ESD      
ESD      
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
RLD      
END                            15741SC103 020177227
./       ADD   NAME=RCTO
ESD      
ESD      
ESD      
ESD      
ESD      
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
END 
./       ADD   NAME=STATDIEO
ESD      
ESD      
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
END                            15741SC103 020177227
./       ADD   NAME=S99FAILO
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
END 
./       ADD   NAME=WKLOADO
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
ESD      
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
TXT 
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
RLD      
END 
