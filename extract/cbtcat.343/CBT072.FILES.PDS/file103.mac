*PROCESS A,AG,ESD,MAP,NEST,XREF,MARGINS(2,80,1),GS;
 /* MONPLOT - PLOT REQUESTED GRAPHS FROM APEMAN DATA */
 MONPLOT:
   PROCEDURE (PARAM) OPTIONS(MAIN) REORDER;
   DCL
      (NULL,
      UNSPEC,
      SUBSTR,
      STRING,
      MIN,
      MAX,
      INDEX,
      FLOAT,
      ADDR) BUILTIN;
   DCL
      (SQRT,
      MOD,
      FLOOR,
      EMPTY,
      ONCODE,
      ONSOURCE) BUILTIN;
   DCL
      (DENSTY,
      PSPACE,
      FILM,
      GREND,
      MAP,
      AXTS,
      POSITN,
      JOIN,
      CTRORI,
      TYPECS,
      CTRMAG,
      HLINFD,
      SPACE,
      LINEFD,
      CTRSET,
      PLOTNC,
      CRLNFD,
      TYPENC,
      AXES,
      BROKEN,
      TYPENF,
      PLACE,
      MAPXL,
      MAPYL,
      MAPXYL,
      ERASE,
      SCALES,
      INPUT,
      ENDPDS,
      AXTXL,
      AXTYL,
      AXTXYL,
      SCAXL,
      SCAYL,
      SCAXYL,
      HISTGM,
      FULL,
      FRAME,
      GARGS,
      CSPACE,
      TYPHEX) ENTRY EXTERNAL OPTIONS(FORTRAN);
   DCL
      PARAM CHAR(126) VARYING;
1MONREAD: /* PROCEDURE TO READ DATA RECORDS FROM INPUT STREAM */
   PROCEDURE(MONITOR,DATA_LENGTH,DATA,EOF,REWIND) REORDER;
   DCL
      MONDATA FILE STREAM INPUT ENV(CONSECUTIVE,FB,REREAD);
   DCL
      MONITOR CHAR(4),
      DATA_LENGTH BIN FIXED (15),
      DATA CHAR(4000) VARYING,
      (EOF,
      REWIND) BIT(1);
   DCL
      NAME CHAR(4),
      CH_LENGTH CHAR(4),
      LENGTH BIN FIXED(31);
      ON ENDFILE(MONDATA)
         BEGIN;
            EOF='1';
            CLOSE FILE(MONDATA);
            GOTO ENDFILE;
         END;
      IF REWIND THEN
         DO;
            REWIND='0'B;
            CLOSE FILE(MONDATA);
         END;
      ELSE
         DO;
            EOF='0'B;
            GET FILE(MONDATA) EDIT(NAME,CH_LENGTH) (2 A(4));
            UNSPEC(LENGTH)=UNSPEC(CH_LENGTH);
            DO WHILE(NAME^=MONITOR);
               IF NAME='END ' THEN
                  SIGNAL ENDFILE(MONDATA);
               GET FILE(MONDATA) EDIT(NAME,CH_LENGTH) ((LENGTH) X(4),2 A
               UNSPEC(LENGTH)=UNSPEC(CH_LENGTH);
            END;
 /* MONITOR DATA FOUND - READ INTO ARRAY */
            IF LENGTH > DATA_LENGTH THEN
               DO;
                  PUT FILE(SYSPRINT) EDIT('ERROR IN DATA LENGTHS IN MONR
                        (COL(1),A);
                  STOP;
               END;
            ELSE
               GET FILE(MONDATA) EDIT(DATA) (A(LENGTH*4));
         END;
 ENDFILE:
   END MONREAD;
1/* DECVB - CONVERT TOD TO BINARY */
 DECVB:
   PROCEDURE(CH_TIME,BIN_TIME) REORDER;
   DCL
      CH_TIME CHAR (4),
      BIN_TIME FIXED BIN (31);
   DCL
      PICUP FIXED DEC (3),
      CHARS CHAR(1) BASED(P2),
      T(4) FIXED BIN (15);
   DCL
      P2 POINTER;
      PICUP=0;
      P2=ADDR(PICUP);
      DO I=1 TO 4;
         CHARS=SUBSTR(CH_TIME,I,1);
         T(I)=PICUP;
      END;
      BIN_TIME=(((T(1)*60+T(2))*60+T(3))*100+T(4))/10;
      RETURN;
   END DECVB;
1/* GETIME - OBTAIN TIME OF DAY */
 GETIME:
   PROC(XFL,STRING);
   DCL
      XFL FLOAT DEC (6),
      STRING CHAR(11),
      NO CHAR(10);
      NO=MOD(XFL,100);
      SUBSTR(STRING,9,3)='.'××SUBSTR(NO,8,2);
      XFL=FLOOR(XFL/100);
      NO=MOD(XFL,60);
      SUBSTR(STRING,6,3)='.'××SUBSTR(NO,8,2);
      XFL=FLOOR(XFL/60);
      NO=MOD(XFL,60);
      SUBSTR(STRING,3,3)='.'××SUBSTR(NO,8,2);
      NO=FLOOR(XFL/60);
      SUBSTR(STRING,1,2)=SUBSTR(NO,8,2);
      RETURN;
   END;
1/* TYPROT - TYPE ROTATE FOR TEK */
 TYPROT:
   PROC(STRING,ILEN);
   DCL
      STRING CHAR(*),
      ILEN FIXED BIN (31),
      (LEN,
      TLEN) FIXED BIN (31);
      DO LL=ILEN TO 1 BY -1;
         LEN=-LL;
         IF SUBSTR(STRING,LL,1)^=' ' THEN
            GOTO NOTBLANK;
      END;
      RETURN;
 NOTBLANK:
      CALL HLINFD(LEN);
      DO LL=1 TO -LEN;
         TLEN=1;
         CALL TYPECS(SUBSTR(STRING,LL,1),TLEN);
         CALL HLINFD(TLEN);
         TLEN=-1;
         CALL SPACE(TLEN);
      END;
      RETURN;
   END TYPROT;
1/* HEXPRT - PRINT HEX CONTENTS OF VARIABLE */
 HEXPRT:
   PROCEDURE(P,LEN);
   DCL
      P POINTER;
   DCL
      BITS(512) BIT(4) BASED(P),
      STRING(LEN) CHAR(1);
      DO KK=1 TO LEN;
         STRING(KK)=SUBSTR('0123456789ABCDEF',BITS(KK)+1,1);
      END;
      PUT FILE(SYSPRINT) EDIT(STRING) (COL(1),(LEN) A(1),X(4));
      RETURN;
   END;
1/* LSTRING - RETURN LENGTH OF STRING */
 LSTRING:
   PROC(STRING);
   DCL
      LENGTH BUILTIN,
      STRING CHAR(126) VARYING;
      RETURN (LENGTH(STRING));
   END LSTRING;
1/* MNULL - RETURN FALSE IF A POINTER IS NULL */
 MNULL:
   PROC(PTRS,NO) RETURNS(BIT(1));
   DCL
      PTRS(*) POINTER,
      NO FIXED BIN (31);
      DO I=1 TO NO;
         IF PTRS(I) = NULL THEN
            RETURN('1'B);
      END;
      RETURN('0'B);
   END MNULL;
1EVALUATE: /* EVALUATE PRODUCES VALUE OF VARIABLE EXPRESSION */
   PROC(NO_OF_VARIABLES,PTRS,EXPRESSION,LEN,RESULT,ERRNO) RECURSIVE;
   DCL
      NO_OF_VARIABLES FIXED BIN (31),
      PTRS(*) POINTER,
      EXPRESSION CHAR(30) VARYING,
      LEN FIXED BIN (15),
      ERRNO FIXED BIN (15),
      RESULT FLOAT DEC (6);
   DCL
      INDICATOR(8) BIT(1);
      INDICATOR='';            /* SET INDICATOR BITS TO ZERO */
      RESULT=0.0;
      ERRNO=0;                 /* SET ERROR OFF */
      IF SUBSTR(EXPRESSION,1,1)='-' THEN
         DO;
            INDICATOR(3)='1'B;
            LEN=LEN-1;
            EXPRESSION=SUBSTR(EXPRESSION,2,LEN);
         END;
      ELSE
         DO;
            INDICATOR(2)='1'B;
            IF SUBSTR(EXPRESSION,1,1)='+' THEN
               DO;
                  LEN=LEN-1;
                  EXPRESSION=SUBSTR(EXPRESSION,2,LEN);
               END;
         END;
 AGAIN:
      CALL GET_VALUE(NO_OF_VARIABLES,PTRS,EXPRESSION,LEN,RESULT,INDICATO
      IF INDICATOR(7) THEN
         GOTO ERR;
      CALL GET_OP(INDICATOR,EXPRESSION,LEN);
      IF INDICATOR(7) THEN
         GOTO ERR;
      IF ^INDICATOR(1) THEN
         GOTO AGAIN;
      RETURN;
 ERR:
      PUT FILE(SYSPRINT) EDIT('**** ERROR ****') (COL(1),A);
      ERRNO=1;                 /* SET ERROR ON */
   END EVALUATE;
1GET_OP: /* OBTAIN NEXT OPERATOR */
   PROC(INDICATOR,EXPRESSION,LEN);
   DCL
      INDICATOR(8) BIT(1),
      EXPRESSION CHAR(30) VARYING,
      LEN FIXED BIN (15);
      INDICATOR='';
      IF LEN <= 0 THEN
         DO;
            INDICATOR(1)='1'B;
            RETURN;
         END;
      IF SUBSTR(EXPRESSION,1,1)=' ' THEN
         INDICATOR(1)='1'B;
      IF SUBSTR(EXPRESSION,1,1)='+' THEN
         INDICATOR(2)='1'B;
      IF SUBSTR(EXPRESSION,1,1)='-' THEN
         INDICATOR(3)='1'B;
      IF SUBSTR(EXPRESSION,1,1)='/' THEN
         INDICATOR(4)='1'B;
      IF SUBSTR(EXPRESSION,1,2)='**' THEN
         DO;
            INDICATOR(6)='1'B;
            LEN=LEN-1;
            EXPRESSION=SUBSTR(EXPRESSION,2,LEN);
         END;
      ELSE
         IF SUBSTR(EXPRESSION,1,1)='*' THEN
            INDICATOR(5)='1'B;
      LEN=LEN-1;
      EXPRESSION=SUBSTR(EXPRESSION,2,LEN);
      IF LEN <= 0 THEN
         INDICATOR(7)='1'B;
      ELSE
         IF SUBSTR(EXPRESSION,1,1)='+' THEN
            DO;
               LEN=LEN-1;
               EXPRESSION=SUBSTR(EXPRESSION,2,LEN);
            END;
         ELSE
            IF SUBSTR(EXPRESSION,1,1)='-' THEN
               DO;
                  INDICATOR(3)='1'B;
                  LEN=LEN-1;
                  EXPRESSION=SUBSTR(EXPRESSION,2,LEN);
               END;
      IF LEN <= 0 THEN
         INDICATOR(7)='1'B;
      RETURN;
   END GET_OP;
1GET_VALUE: /* OBTAIN NEXT VALUE */
   PROC(NO_OF_VARIABLES,PTRS,EXPRESSION,LEN,RESULT,INDICATOR) RECURSIVE;
   DCL
      NO_OF_VARIABLES FIXED BIN (31),
      PTRS(*) POINTER,
      EXPRESSION CHAR(30) VARYING,
      LEN FIXED BIN (15),
      RESULT FLOAT DEC (6),
      INDICATOR(8) BIT(1);
   DCL
      NO_BRACKETS FIXED BIN (31),
      TEMP FLOAT DEC (6),
      ERRNO FIXED BIN (15),
      D_LEN FIXED BIN (15),
      D_EXPR CHAR(30) VARYING,
      D_NO CHAR(10) VARYING,
      P POINTER,
      1 BLOCK BASED(P),
         3 NEXT_BLOCK POINTER,
         3 VDATA FLOAT DEC (6),
         3 VTIME FLOAT DEC (6);
      IF LEN <= 0 THEN
         DO;
            INDICATOR(7)='1'B;
            RETURN;
         END;
1     IF SUBSTR(EXPRESSION,1,1)='(' THEN
         DO;                   /* LOOK FOR MATCHING ) */
            NO_BRACKETS=1;
            D_LEN=2;
            DO WHILE(NO_BRACKETS ^= 0);
               IF SUBSTR(EXPRESSION,D_LEN,1)='(' THEN
                  NO_BRACKETS=NO_BRACKETS+1;
               IF SUBSTR(EXPRESSION,D_LEN,1)=')' THEN
                  NO_BRACKETS=NO_BRACKETS-1;
               D_LEN=D_LEN+1;
               IF D_LEN > LEN THEN
                  DO;
                     INDICATOR(7)='1'B;
                     RETURN;
                  END;
            END;
            D_EXPR=SUBSTR(EXPRESSION,2,D_LEN-3);
            CALL EVALUATE(NO_OF_VARIABLES,PTRS,D_EXPR,D_LEN-3,TEMP,ERRNO
            IF ERRNO > 0 THEN
               DO;
                  INDICATOR(7)='1'B;
                  RETURN;
               END;
            IF INDICATOR(3) THEN
               TEMP=-TEMP;
            IF INDICATOR(4) THEN
               RESULT=RESULT/TEMP;
            ELSE
               IF INDICATOR(5) THEN
                  RESULT=RESULT*TEMP;
               ELSE
                  IF INDICATOR(6) THEN
                     RESULT=RESULT**TEMP;
                  ELSE
                     RESULT=RESULT+TEMP;
            LEN=LEN-D_LEN+1;
            EXPRESSION=SUBSTR(EXPRESSION,D_LEN,LEN);
            RETURN;
         END;
1     IF SUBSTR(EXPRESSION,1,1)='"' THEN
         DO;                   /* VARIABLE IN QUOTES */
            D_NO='0';
            D_LEN=2;
            DO WHILE(SUBSTR(EXPRESSION,D_LEN,1)^= '"');
               D_NO=D_NO××SUBSTR(EXPRESSION,D_LEN,1);
               D_LEN=D_LEN+1;
            END;
            IF VERIFY(D_NO,'0123456789') ^= 0 THEN
               DO;
                  INDICATOR(7)='1'B;
                  RETURN;
               END;
            NO_BRACKETS=D_NO;
            IF NO_BRACKETS <= 0 × NO_BRACKETS > NO_OF_VARIABLES THEN
               DO;
                  INDICATOR(7)='1'B;
                  RETURN;
               END;
            TEMP=PTRS(NO_BRACKETS) -> BLOCK.VDATA;
            IF INDICATOR(3) THEN
               TEMP=-TEMP;
            IF INDICATOR(4) THEN
               RESULT=RESULT/TEMP;
            ELSE
               IF INDICATOR(5) THEN
                  RESULT=RESULT*TEMP;
               ELSE
                  IF INDICATOR(6) THEN
                     RESULT=RESULT**TEMP;
      DO WHILE(VERIFY(SUBSTR(EXPRESSION,D_LEN,1),'.0123456789')=0 & D_LE
         D_NO=D_NO××SUBSTR(EXPRESSION,D_LEN,1);
         D_LEN=D_LEN+1;
      END;
      TEMP=D_NO;
      IF INDICATOR(3) THEN
         TEMP=-TEMP;
      IF INDICATOR(4) THEN
         RESULT=RESULT/TEMP;
      ELSE
         IF INDICATOR(5) THEN
            RESULT=RESULT*TEMP;
         ELSE
            IF INDICATOR(6) THEN
               RESULT=RESULT**TEMP;
            ELSE
               RESULT=RESULT+TEMP;
      LEN=LEN-D_LEN+1;
      EXPRESSION=SUBSTR(EXPRESSION,D_LEN,LEN);
      RETURN;
   END GET_VALUE;
1/* SYNTAX - ROUTINE PARSES AND INSERTS () */
 SYNTAX:
   PROC(EXPR,ERRNO);
   DCL
      EXPR CHAR(*) VARYING;
   DCL
      (LENGTH,
      ADDR,
      INDEX,
      VERIFY,
      SUBSTR) BUILTIN;
   DCL
      P(2) POINTER,
      IP(2) FIXED BIN (31) BASED(Q),
      ERRNO FIXED BIN (15),
      Q POINTER,
      C2 CHAR(1) BASED(P(2)),
      OPS(3) CHAR(2) VARYING INIT('**','*','/'),
      SUBS(3) CHAR(2) VARYING INIT('AA','B','C');
      ERRNO=0;                 /* SET ERROR OFF */
      Q=ADDR(P(1));            /* PUT FIXED BIN (31) OVER POINTERS */
      DO WHILE(INDEX(EXPR,' ') ^= 0);/* REMOVE BLANKS */
         EXPR=SUBSTR(EXPR,1,INDEX(EXPR,' ')-1)××
         SUBSTR(EXPR,INDEX(EXPR,' ')+1,LENGTH(EXPR) -INDEX(EXPR,' '));
      END;
      IONOFF,ILEN=0;
      IERR=1;
      DO JJ=1 TO LENGTH(EXPR); /* CHECK THAT ()" MATCH */
         ICNT=JJ;
         IF SUBSTR(EXPR,JJ,1) ='(' THEN
            ILEN=ILEN+1;
         IF SUBSTR(EXPR,JJ,1)=')' THEN
            ILEN=ILEN-1;
         IF SUBSTR(EXPR,JJ,1)='"' & IONOFF=0 THEN
            IONOFF=1;
         IF SUBSTR(EXPR,JJ,1)='"' & IONOFF=1 THEN
            IONOFF=0;
         IF IONOFF=1 & VERIFY(SUBSTR(EXPR,JJ,1),'0123456789') ^=0 THEN
            GOTO INVALID;
         IF ILEN < 0 THEN
            DO;
               IERR=2;
               GOTO INVALID;
            END;
      END;
      IF IONOFF ^= 0 THEN
         GOTO INVALID;
      IERR=2;
      IF ILEN ^= 0 THEN
         GOTO INVALID;
      ICNT=VERIFY(EXPR,'0123456789.*/+-()"');
      IERR=3;
      IF ICNT ^= 0 THEN
         GOTO INVALID;
      DO I=1 TO 3;             /* INSERT () TO CORRECT SYNTAX */
 AGAIN:
         IF INDEX(EXPR,OPS(I)) = 0 THEN
            GOTO NO_OP;
         P(1)=ADDR(EXPR);
         IP(1)=IP(1)+2;        /* ALLOW FOR LENGTH */
         IP(2)=IP(1)+INDEX(EXPR,OPS(I))-2;/* POINT AT PREVIOUS CHAR */
         IF C2 ='"' THEN
            DO;
               IP(2)=IP(2)-1;
               DO WHILE(C2 ^= '"');
                  IP(2)=IP(2)-1;
               END;
            END;
         ELSE
            IF C2=')' THEN
               DO;
                  ICNT=1;
                  DO WHILE(ICNT > 0);
                     IP(2)=IP(2)-1;
                     IF C2=')' THEN
                        ICNT=ICNT+1;
                     IF C2='(' THEN
                        ICNT=ICNT-1;
                  END;
               END;
            ELSE
               DO;
                  DO WHILE(INDEX('0123456789.',C2) ^= 0 & IP(2) >= IP(1)
                     IP(2)=IP(2)-1;
                  END;
                  IP(2)=IP(2)+1;
               END;
         IF IP(2) = IP(1) THEN
            GOTO REPLACE;
         IF IP(2) > IP(1) THEN
            DO;
               IP(2)=IP(2)-1;
               IF C2 ='(' THEN
                  GOTO REPLACE;
               IF C2='+'×C2='-' THEN
                  DO;
                     IP(2)=IP(2)-1;
                     IF VERIFY(C2,'*/ABC')=0 THEN
                        IP(2)=IP(2)-1;
                     IP(2)=IP(2)+1;
                  END;
               IP(2)=IP(2)+1;
            END;
         ICNT=IP(2)-IP(1);
         EXPR=SUBSTR(EXPR,1,ICNT)××'('××SUBSTR(EXPR,ICNT+1, LENGTH(EXPR)
         IP(2)=IP(1)+INDEX(EXPR,OPS(I))+LENGTH(OPS(I));
         IF C2='+'×C2='-' THEN
            IP(2)=IP(2)+1;
         IF C2='"' THEN
            DO;
               IP(2)=IP(2)+1;
               DO WHILE(C2 ^='"');
                  IP(2)=IP(2)+1;
               END;
            END;
         ELSE
            IF C2='(' THEN
               DO;
                  ICNT=1;
                  DO WHILE(ICNT > 0);
                     IP(2)=IP(2)+1;
                     IF C2 ='(' THEN
                        ICNT=ICNT+1;
                     IF C2=')' THEN
                        ICNT=ICNT-1;
                  END;
               END;
            ELSE
               DO;
                  DO WHILE(INDEX('0123456789.',C2) ^= 0 &
                        (IP(2)-IP(1) > LENGTH(EXPR)-1));
                     IP(2)=IP(2)+1;
                  END;
                  IP(2)=IP(2)-1;
               END;
         ICNT=IP(2)-IP(1)+3;
         EXPR=SUBSTR(EXPR,1,ICNT)××')'××SUBSTR(EXPR,ICNT+1, LENGTH(EXPR)
 REPLACE:
         SUBSTR(EXPR,INDEX(EXPR,OPS(I)),LENGTH(OPS(I)))=SUBS(I);
         GOTO AGAIN;
 NO_OP:
      END;
 /* REPLACE DUMMY OPERATORS */
      DO I=1 TO 3;
         DO WHILE(INDEX(EXPR,SUBS(I)) ^= 0);
            SUBSTR(EXPR,INDEX(EXPR,SUBS(I)),LENGTH(SUBS(I)))=OPS(I);
         END;
      END;
      RETURN;
 INVALID:
      PUT FILE(SYSPRINT) EDIT('**** ERROR ****',EXPR,'*') (
      COL(1),A,COL(1),A(LENGTH(EXPR)),COL(ICNT),A(1));
      IF IERR=1 THEN
         PUT FILE(SYSPRINT) EDIT('INCORRECT VARIABLE') (COL(1),A);
      IF IERR=2 THEN
         PUT FILE(SYSPRINT) EDIT('UNMATCHED BRACKET') (COL(1),A);
      IF IERR=3 THEN
         PUT FILE(SYSPRINT) EDIT('ILLEGAL CHARACTER') (COL(1),A);
      ERRNO=1;                 /* SET ERROR FLAG */
   END SYNTAX;
1/* DECLARE DATA STRUCTURES */
   DCL
      (PTR_1,
      PTR_2) POINTER;
   DCL
      NO_OF_VARIABLES BIN FIXED (31),
      TYPE_OF_PLOT CHAR (30) VARYING,
      (XMIN,
      XMAX,
      YMIN,
      YMAX) DEC FLOAT (6);
   DCL
      1 VARIABLE(NO_OF_VARIABLES) CTL,
         3 FIRST_BLOCK POINTER,
         3 (VMIN,
         VMAX) FLOAT DEC (6),
         3 NO_OF_POINTS BIN FIXED (31),
         3 (MEAN,
         MEAN_SQUARE) DEC FLOAT (6),
         3 (TMIN,
         TMAX) DEC FLOAT(6);
   DCL
      TYPE_OF_VARIABLE CHAR (3),
      MONITOR CHAR(4),
      DATA_LENGTH BIN FIXED (15) INIT(1000),
      (EOF,
      REWIND) BIT (1),
      DATA CHAR (4000) VARYING,
      TITLE CHAR(60),
      MEMBER CHAR(8),
      PDS BIT(1),
      INBUF CHAR(80),
      MODE CHAR(10) VARYING,
      POSITION BIN FIXED (15),
      MULT_FACTOR DEC FLOAT(6),
      NO_OF_MASKS BIN FIXED (15);
   DCL
      C_TEMP CHAR(8),
      (XANT,
      ORIEN) FLOAT DEC (6),
      (IBIN,
      NO_OF_BINS,
      ILEN,
      IMAG) FIXED BIN (31),
      TRUE FIXED BIN (31) INIT(1),
      FALSE FIXED BIN (31) INIT(0),
      (LAST_X,
      LAST_Y,
      RTEMP) FLOAT DEC (6),
      (XC1,
      XC2,
      XC3,
      XC4) FLOAT DEC (6),
      BINS(NO_OF_BINS) FLOAT DEC (6) CTL,
      B_TEMP(16) BIT(4) BASED(R),
      WANTED BIT(1),
      ITEMP FIXED BIN (31),
      ANSWER CHAR(1),
      C1 CHAR(1),
      N FIXED BIN (15),
      B_N(4) BIT(4) BASED(Q),
      TEMP CHAR(4) BASED(P),
      R4 FLOAT DEC(6) BASED(P),
      I4 FIXED BIN (31),
      (FIRST,
      FIRST_VALUE) BIT (1),
      CTIME FLOAT DEC (6),
      LAST_VALUE FLOAT DEC (6),
      L_TIME FIXED BIN (31);
   DCL
      IONOFF BIN FIXED (31) INIT(1);
   DCL
      SUBPOOL AREA(32748);
   DCL
      1 BLOCK BASED(LAST_PTR),
         3 NEXT_BLOCK POINTER,
         3 VDATA DEC FLOAT (6),
         3 VTIME DEC FLOAT (6);
   DCL
      1 MASK(NO_OF_MASKS) CTL,
         3 POSITION BIN FIXED (15),
         3 LENGTH BIN FIXED (15),
         3 COVER CHAR(16),
         3 TARGET CHAR(16),
         3 B_COVER(16) BIT(4),
         3 B_TARGET(16) BIT(4);
   DCL
      TSO BIT(1) INIT('0'B);
   DCL
      TEK BIT(1) INIT('0'B);
   DCL
      CORR_COEFF FLOAT DEC (6),
      NO_PTS FIXED BIN (31);
   DCL
      NO FIXED BIN (31) DEF NO_OF_VARIABLES,
      TYPE CHAR(3) DEF TYPE_OF_VARIABLE,
      MULT FLOAT DEC (6) DEF MULT_FACTOR,
      PLOT CHAR(30) VARYING DEF TYPE_OF_PLOT,
      MASKS FIXED BIN (15) DEF NO_OF_MASKS;
   DCL
      SUBPOOL2 AREA(32748),
      PTRS(NO_OF_VARIABLES) POINTER CTL,
      EXPRESSION CHAR(30) VARYING,
      NO_OF_EXPRESSIONS FIXED BIN (31),
      EXPRS FIXED BIN (31) DEF NO_OF_EXPRESSIONS,
      RESULT FLOAT DEC (6),
      ERRNO FIXED BIN (15),
      1 PHRASE(NO_OF_EXPRESSIONS) CTL,
         3 FIRST_BLOCK POINTER,
         3 (VMIN,
         VMAX) FLOAT DEC (6),
         3 NO_OF_POINTS FIXED BIN (31),
         3 (TMIN,
         TMAX) FLOAT DEC (6),
         3 (MEAN,
         MEAN_SQUARE) FLOAT DEC (6),
         3 V_TITLE CHAR(60);
   DCL
      YES(4) CHAR(1) BASED(S),
      S POINTER,
      Y_INT FIXED BIN (31) INIT(59560);
   DCL
      D1,
      D2 FLOAT DEC (6);
   DCL
      TIME CHAR(11);
   DCL
      (LOGX,
      LOGY) BIT(1);
   DCL
      SUM BIT(1);
1     ON ERROR
         BEGIN;                /* TRAP ERRORS */
            CALL PLIDUMP('TFCHB');
            IF ONCODE=10 THEN
               DO;
                  PUT FILE(SYSPRINT) EDIT('ONCODE=',ONCODE,' ONSOURCE=',
                  ONSOURCE) (COL(1),A,F(4),A,A(30));
                  ONSOURCE='';
                  GOTO END_ERROR;
               END;
            CALL GREND;        /* SHUTDOWN GHOST */
            STOP;
 END_ERROR: /* RETURN TO ROUTINE WHERE ERROR OCURRED */
         END;
      ON ENDFILE(SYSIN)
         GOTO FINISH;
1/* LOOK FOR 'TSO' IN PARM FIELD */
      IF LSTRING(PARAM) >0 THEN
         DO;
            IF INDEX(PARAM,'TSO') ^= 0 THEN
               TSO='1'B;
            IF INDEX(PARAM,'GARGS') ^=0 THEN
               CALL GARGS(IONOFF);
            IF INDEX(PARAM,'TEK') ^= 0 THEN
               TEK='1'B;
         END;
      CALL FILM(IONOFF);       /* INITIALIZE GHOST */
      XMIN=0.0;
      XMAX=1.0;
      CALL MAP(XMIN,XMAX,XMIN,XMAX);
      P=ADDR(I4);        /* PUT CHAR(4),FLOAT DEC (6) OVER FIXED BIN (31
      Q=ADDR(N);               /* PUT BIT(4) OVER BIN(15) */
      R=ADDR(C_TEMP);          /* PUT BIT(4) OVER CHAR(8) */
      S=ADDR(Y_INT);
 NEXTPLOT: /* INITIALIZE VARIABLES */
      NO_OF_VARIABLES=0;
 RETRY_1:
      IF TSO THEN
         PUT FILE(SYSPRINT) EDIT(' ENTER NO_OF_VARIABLES :') (COL(1),A);
      GET FILE(SYSIN) DATA(NO_OF_VARIABLES,NO);
      IF NO_OF_VARIABLES <= 0 THEN
         GOTO FINISH;
      PUT FILE(SYSPRINT) EDIT(' OPTION SELECTED IS -','') (COL(1),A,COL(
      PUT FILE(SYSPRINT) DATA(NO_OF_VARIABLES);
      IF TSO THEN
         DO;
 /* PROMPT TSO USER FOR RETRY */
            PUT FILE(SYSPRINT) EDIT('OK ?:') (COL(1),A);
            GET FILE(SYSIN) EDIT(ANSWER) (COL(1),A(1));
            IF ANSWER^=YES(3)&ANSWER^=YES(4) THEN
               GOTO RETRY_1;
            IF TEK THEN
               DO;
                  ORIEN=0.0;
                  XANT=1.0;
                  IONOFF=10;
                  CALL MAP(ORIEN,XANT,ORIEN,XANT);
                  CALL PLOTNC(ORIEN,ORIEN,IONOFF);
                  CALL ERASE;
               END;
         END;
 /* ALLOCATE VARIABLE STRUCTURE */
      ALLOCATE VARIABLE;
 /* INITIALIZE STRUCTURE */
      VARIABLE.FIRST_BLOCK(*)=NULL;
      VARIABLE.VMIN(*)=0;
      VARIABLE.VMAX(*)=0;
      VARIABLE.TMIN(*)=0;
      VARIABLE.TMAX(*)=0;
      VARIABLE.NO_OF_POINTS(*)=0;
      VARIABLE.MEAN(*)=0;
      VARIABLE.MEAN_SQUARE(*)=0;
 NEXT_VAR:
      DO KK=1 TO NO_OF_VARIABLES;
         SUM='0'B;
         MONITOR='';
         POSITION=0;
         TYPE_OF_VARIABLE='';
         MODE='';
         MULT_FACTOR=1;
         NO_OF_MASKS=0;
 /* READ IN VARIABLES */
 RETRY_2:
         IF TSO THEN
            PUT FILE(SYSPRINT)
            EDIT(' ENTER MONITOR,MEMBER,SUM,',
            'POSITION,TYPE_OF_VARIABLE,MODE,MULT_FACTOR,NO_OF_MASKS :')
                  (COL(1),2 A);
               CALL INPUT(MEMBER,INBUF,IONOFF);
               IF IONOFF ^= 0 THEN
                  GOTO NO_MORE;
               IF SUBSTR(INBUF,72,1)=' '×SUBSTR(INBUF,72,1)=';' THEN
                  DO;
                     SUBSTR(INBUF,72,1)=';';
                     GET STRING(INBUF)
                     DATA(MONITOR,POSITION,TYPE_OF_VARIABLE, MODE,MULT_F
                     NO_OF_MASKS,TYPE,MULT,MASKS,SUM);
                     GOTO NO_END;
                  END;
               ELSE
                  DO;
                     SUBSTR(INBUF,72,1)=';';
                     GET STRING(INBUF)
                     DATA(MONITOR,POSITION,TYPE_OF_VARIABLE, MODE,MULT_F
                     NO_OF_MASKS,TYPE,MULT,MASKS,SUM);
                     GOTO MORE;
                  END;
 NO_MORE: /* EOF REACHED */
               PDS='0'B;
               CALL ENDPDS;
               MEMBER='';
 NO_END:
            END;
         IF MONITOR='' & TSO THEN
            DO;
 /* PUT OUT HELP FOR TSO USER */
               PUT FILE(SYSPRINT)
               EDIT(' OPTIONS AVAILABLE ARE -', 'MONITOR=MONITOR NAME',
               'MEMBER=PDS MEMBER NAME',
               'POSITION=# OF BYTES FROM START OF DATA RECORD',
               'TYPE_OF_VARIABLE=I*1,I*2,I*3,I*4,R*4,R*8',
               'MODE=ABSOLUTE/RELATIVE/PERCENT/NORMAL',
               'MULT_FACTOR=SCALING FACTOR',
               'NO_OF_MASKS=# OF FIELDS TO BE CHECKED FOR VALID CONTENTS
               ((8) (COL(1),A));
               GOTO RETRY_2;
            END;
         PUT FILE(SYSPRINT) EDIT('OPTIONS SELECTED ARE -','') (COL(1),A,
         PUT FILE(SYSPRINT)
         DATA(MONITOR,MEMBER,SUM,POSITION,TYPE_OF_VARIABLE, MODE,MULT_FA
            NO_OF_MASKS);
         IF TSO THEN
            DO;
 /* PROMPT FOR RETRY FROM TSO USER */
               PUT FILE(SYSPRINT) EDIT('OK ?:') (COL(1),A);
               GET FILE(SYSIN) EDIT(ANSWER) (COL(1),A(1));
               IF ANSWER^=YES(3)&ANSWER^=YES(4) THEN
                  GOTO RETRY_2;
               IF TEK THEN
                  DO;
                     ORIEN=0.0;
                     XANT=1.0;
                     IONOFF=10;
                     CALL MAP(ORIEN,XANT,ORIEN,XANT);
                     CALL PLOTNC(ORIEN,ORIEN,IONOFF);
                     CALL ERASE;
                  END;
            END;
         IF MASKS <= 0 & PDS THEN
            DO;
               PDS='0'B;
               MEMBER='';
               CALL ENDPDS;
            END;
 /* ALLOCATE MASK STRUCTURE */
         IF NO_OF_MASKS > 0 THEN
            DO;
               ALLOCATE MASK;
               MASK.POSITION(*)=0;
               MASK.LENGTH(*)=0;
               MASK.B_COVER(*,*)='0000'B;
               MASK.B_TARGET(*,*)='0000'B;
 RETRY_3:
               IF TSO & ^PDS THEN
                  PUT FILE(SYSPRINT)
                  EDIT(' ENTER MASK.POSITION(I),',
                  'MASK.LENGTH(I),MASK.COVER(I),MASK.TARGET(I) FOR I=1 T
                  NO_OF_MASKS,':') (COL(1),2 A,F(3),A);
               IF ^PDS THEN
                  GET FILE(SYSIN) DATA(MASK);
               ELSE
                  DO;
                     PDS='0'B;
 MORE_2:
                     IONOFF=0;
                     CALL INPUT(MEMBER,INBUF,IONOFF);
                     IF IONOFF ^= 0 THEN
                        GOTO NO_MORE2;
                     IF SUBSTR(INBUF,72,1)=' '×SUBSTR(INBUF,72,1)=';' TH
                        DO;
                           SUBSTR(INBUF,72,1)=';';
                           GET STRING(INBUF) DATA(MASK);
                        END;
                     ELSE
                        DO;
                           SUBSTR(INBUF,72,1)=';';
                           GET STRING(INBUF) DATA(MASK);
                           GOTO MORE_2;
                        END;
 NO_MORE2:
                     MEMBER='';
                     CALL ENDPDS;
                  END;
               PUT FILE(SYSPRINT) EDIT(' OPTIONS SELECTED ARE -','')
                  (COL(1),A,COL(1));
               PUT FILE(SYSPRINT) DATA(MASK.POSITION,MASK.LENGTH,MASK.CO
                   MASK.TARGET);
               IF TSO THEN
                  DO;
 /* PROMPT FOR RETRY FROM TSO USER */
                     PUT FILE(SYSPRINT) EDIT('OK ?:') (COL(1),A);
                     GET FILE(SYSIN) EDIT(ANSWER) (COL(1),A(1));
                     IF ANSWER^=YES(3)&ANSWER^=YES(4) THEN
                        GOTO RETRY_3;
                     IF TEK THEN
                        DO;
                           ORIEN=0.0;
                           XANT=1.0;
                           IONOFF=10;
                           CALL MAP(ORIEN,XANT,ORIEN,XANT);
                           CALL PLOTNC(ORIEN,ORIEN,IONOFF);
                           CALL ERASE;
                        END;
                  END;
               DO MNO=1 TO NO_OF_MASKS;
                  DO LCHR=1 TO 2*MASK.LENGTH(MNO);
                     C1=SUBSTR(MASK.COVER(MNO),LCHR,1);
                     IF C1=' ' THEN
                        C1='0';
                     N=INDEX('0123456789ABCDEF',C1)-1;
                     MASK.B_COVER(MNO,LCHR)=B_N(4);
                     C1=SUBSTR(MASK.TARGET(MNO),LCHR,1);
                     IF C1=' ' THEN
                        C1='0';
                     N=INDEX('0123456789ABCDEF',C1)-1;
                     MASK.B_TARGET(MNO,LCHR)=B_N(4);
                  END;
               END;
            END;
 /* REWIND MONITOR DATA SET */
         EOF='0'B;
         REWIND='1'B;
         CALL MONREAD(MONITOR,DATA_LENGTH,DATA,EOF,REWIND);
         REWIND='0'B;
         FIRST,FIRST_VALUE='1'B;
         LAST_PTR=ADDR(VARIABLE(KK).FIRST_BLOCK);
         LAST_PTR -> NEXT_BLOCK=NULL;
 READATA:
         DO WHILE (^EOF);
 NEXTCARD:
            CALL MONREAD(MONITOR,DATA_LENGTH,DATA,EOF,REWIND);
            IF EOF THEN
               GOTO ENDATA;
            WANTED='1'B;
            DO MNO=1 TO NO_OF_MASKS;
               C_TEMP=SUBSTR(DATA,MASK.POSITION(MNO),MASK.LENGTH(MNO));
               DO LCHR=1 TO 2*MASK(MNO).LENGTH;
                  IF ( MASK.B_COVER(MNO,LCHR) & B_TEMP(LCHR) ) ^=
                      MASK.B_TARGET(MNO,LCHR)
                  THEN
                     WANTED='0'B;
               END;
            END;
            IF WANTED THEN
               DO;
                  I4=0;
                  IF TYPE_OF_VARIABLE='I*1' THEN
                     SUBSTR(TEMP,4,1)=SUBSTR(DATA,POSITION,1);
                  ELSE
                     IF TYPE_OF_VARIABLE='I*2' THEN
                        SUBSTR(TEMP,3,2)=SUBSTR(DATA,POSITION,2);
                     ELSE
                        IF TYPE_OF_VARIABLE='I*3' THEN
                           SUBSTR(TEMP,2,3)=SUBSTR(DATA,POSITION,3);
                        ELSE
                           SUBSTR(TEMP,1,4)=SUBSTR(DATA,POSITION,4);
                  IF SUBSTR(TYPE_OF_VARIABLE,1,1) ='I' THEN
                     RTEMP=I4;
                  ELSE
                     RTEMP=R4;
                  R4=RTEMP*MULT_FACTOR;
                  IF MODE='ABSOLUTE' THEN
                     FIRST='0'B;
                  ELSE
                     IF MODE='RELATIVE' THEN
                        IF FIRST THEN
                           DO;
                              FIRST='0'B;
                              LAST_VALUE=R4;
                              GOTO NO_DATA;
                           END;
                        ELSE
                           DO;
                              RTEMP=R4;
                              R4=R4-LAST_VALUE;
                              LAST_VALUE=RTEMP;
                           END;
                     ELSE
                        IF MODE='PERCENT'×MODE='NORMAL' THEN
                           IF FIRST THEN
                              DO;
                               FIRST='0'B;
                               LAST_VALUE=R4;
                               CALL DECVB(SUBSTR(DATA,1,4),ITEMP);
                               L_TIME=ITEMP;
                               GOTO NO_DATA;
                              END;
                           ELSE
                              DO;
                               CALL DECVB(SUBSTR(DATA,1,4),ITEMP);
                               RTEMP=R4;
                               IF ITEMP=L_TIME THEN
                               R4=0;
                               ELSE
                               R4=(R4-LAST_VALUE)/(ITEMP-L_TIME)*100.;
                               IF MODE='PERCENT' THEN
                               R4=R4*100.;
                               L_TIME=ITEMP;
                               LAST_VALUE=RTEMP;
                              END;
                  CALL DECVB(SUBSTR(DATA,1,4),ITEMP);
                  IF ^FIRST_VALUE & SUM THEN
                     IF ITEMP = BLOCK.VTIME THEN
                        DO;
                           BLOCK.VDATA=BLOCK.VDATA+R4;
                           GOTO NEXTCARD;
                        END;
                  ALLOCATE BLOCK IN(SUBPOOL) SET(LAST_PTR -> NEXT_BLOCK)
                  LAST_PTR=LAST_PTR -> NEXT_BLOCK;
                  LAST_PTR -> NEXT_BLOCK=NULL;
                  BLOCK.VDATA=R4;
                  BLOCK.VTIME=ITEMP;
                  IF FIRST_VALUE THEN
                     DO;
                        FIRST_VALUE='0'B;
                        VARIABLE(KK).MEAN=BLOCK.VDATA;
                        VARIABLE(KK).MEAN_SQUARE=BLOCK.VDATA*BLOCK.VDATA
                        VARIABLE(KK).VMIN=BLOCK.VDATA;
                        VARIABLE(KK).VMAX=BLOCK.VDATA;
                        VARIABLE(KK).NO_OF_POINTS=1;
                        VARIABLE(KK).TMIN=BLOCK.VTIME;
                        VARIABLE(KK).TMAX=BLOCK.VTIME;
                     END;
                  ELSE
                     DO;
                        VARIABLE(KK).MEAN=VARIABLE(KK).MEAN+BLOCK.VDATA;
                        VARIABLE(KK).MEAN_SQUARE=VARIABLE(KK).MEAN_SQUAR
                        BLOCK.VDATA*BLOCK.VDATA;
                        VARIABLE(KK).VMIN=MIN(VARIABLE(KK).VMIN,BLOCK.VD
                        VARIABLE(KK).VMAX=MAX(VARIABLE(KK).VMAX,BLOCK.VD
                        VARIABLE(KK).NO_OF_POINTS=VARIABLE(KK).NO_OF_POI
                        VARIABLE(KK).TMIN=MIN(VARIABLE(KK).TMIN,BLOCK.VT
                        VARIABLE(KK).TMAX=MAX(VARIABLE(KK).TMAX,BLOCK.VT
                     END;
 NO_DATA:
               END;
 ENDATA:
         END READATA;
         IF FIRST×VARIABLE(KK).NO_OF_POINTS <= 0 THEN
            DO;
               PUT FILE(SYSPRINT) EDIT('*** ERROR *** NO DATA POINTS',''
               (COL(1),A,COL(1));
               IF TSO THEN
                  GOTO RETRY_2;
               ELSE
                  GOTO FINISH;
            END;
         IF NO_OF_MASKS > 0 THEN
            FREE MASK;
         VARIABLE(KK).MEAN=VARIABLE(KK).MEAN/VARIABLE(KK).NO_OF_POINTS;
         VARIABLE(KK).MEAN_SQUARE=VARIABLE(KK).MEAN_SQUARE/
           VARIABLE(KK).NO_OF_POINTS;
         VARIABLE(KK).MEAN_SQUARE=
         SQRT(VARIABLE(KK).MEAN_SQUARE- VARIABLE(KK).MEAN*VARIABLE(KK).M
         PUT FILE(SYSPRINT)
         DATA(VARIABLE(KK).NO_OF_POINTS, VARIABLE(KK).VMIN,VARIABLE(KK).
         VARIABLE(KK).MEAN,VARIABLE(KK).MEAN_SQUARE);
         PUT FILE(SYSPRINT) EDIT('    VALUE        TIME') (COL(1),A);
         LAST_PTR=VARIABLE(KK).FIRST_BLOCK;
         DO WHILE(LAST_PTR ^= NULL);
            PUT FILE(SYSPRINT) EDIT(LAST_PTR -> BLOCK.VDATA, LAST_PTR ->
            BLOCK.VTIME) (COL(1),E(10,2),X(3),E(10,2));
            LAST_PTR=LAST_PTR -> BLOCK.NEXT_BLOCK;
         END;
      END NEXT_VAR;
1NEXTEXPR: /* SET UP EXPRESSIONS */
      NO_OF_EXPRESSIONS=0;
 RETRY_5:
      IF TSO THEN
         PUT FILE(SYSPRINT) EDIT(' ENTER NO_OF_EXPRESSIONS :') (COL(1),A
      GET FILE(SYSIN) DATA(NO_OF_EXPRESSIONS,EXPRS);
      PUT FILE(SYSPRINT) EDIT(' OPTION SELECTED IS -','') (COL(1),A,COL(
      PUT FILE(SYSPRINT) DATA(NO_OF_EXPRESSIONS);
      IF TSO THEN
         DO;
 /* PROMPT FOR RETRY */
            PUT FILE(SYSPRINT) EDIT('OK ?:') (COL(1),A);
            GET FILE(SYSIN) EDIT(ANSWER) (COL(1),A(1));
            IF ANSWER^=YES(3)&ANSWER^=YES(4) THEN
               GOTO RETRY_5;
            IF TEK THEN
               DO;
                  ORIEN=0.0;
                  XANT=1.0;
                  IONOFF=10;
                  CALL MAP(ORIEN,XANT,ORIEN,XANT);
                  CALL PLOTNC(ORIEN,ORIEN,IONOFF);
                  CALL ERASE;
               END;
         END;
      IF NO_OF_EXPRESSIONS <= 0 THEN
         DO;
            FREE VARIABLE;
            SUBPOOL=EMPTY();
            GOTO NEXTPLOT;
         END;
      ALLOCATE PTRS;
      ALLOCATE PHRASE;
      DO KK=1 TO NO_OF_EXPRESSIONS;
         EXPRESSION='';
         TITLE='';
         PHRASE(KK).NO_OF_POINTS=0;
         PHRASE(KK).FIRST_BLOCK=NULL;
 RETRY_6:
         IF TSO THEN
            PUT FILE(SYSPRINT) EDIT(' ENTER TITLE,EXPRESSION :') (COL(1)
         GET FILE(SYSIN) DATA(TITLE,EXPRESSION);
         PUT FILE(SYSPRINT) EDIT(' OPTIONS SELECTED ARE -','')
           (COL(1),A,COL(1));
         CALL SYNTAX(EXPRESSION,ERRNO);
         IF ERRNO^= 0 THEN
            IF TSO THEN
               GOTO RETRY_6;
            ELSE
               GOTO FINISH;
         PUT FILE(SYSPRINT) DATA(TITLE,EXPRESSION);
         IF TSO THEN
            DO;
 /* PROMPT FOR RETRY */
               PUT FILE(SYSPRINT) EDIT('OK ?:') (COL(1),A);
               GET FILE(SYSIN) EDIT(ANSWER) (COL(1),A(1));
               IF ANSWER^=YES(3)&ANSWER^=YES(4) THEN
                  GOTO RETRY_6;
               IF TEK THEN
                  DO;
                     ORIEN=0.0;
                     XANT=1.0;
                     IONOFF=10;
                     CALL MAP(ORIEN,XANT,ORIEN,XANT);
                     CALL PLOTNC(ORIEN,ORIEN,IONOFF);
                     CALL ERASE;
                  END;
            END;
         PHRASE(KK).V_TITLE=TITLE;
         LAST_PTR=ADDR(PHRASE(KK).FIRST_BLOCK);
         PTRS(*)=VARIABLE(*).FIRST_BLOCK;
         FIRST='1'B;
         DO WHILE(^MNULL(PTRS,NO));
            ALLOCATE BLOCK IN(SUBPOOL2) SET(LAST_PTR -> BLOCK.NEXT_BLOCK
            LAST_PTR=LAST_PTR -> BLOCK.NEXT_BLOCK;
            LAST_PTR -> BLOCK.NEXT_BLOCK=NULL;
            CALL
            EVALUATE(NO_OF_VARIABLES,PTRS,(EXPRESSION),LSTRING(EXPRESSIO
              RESULT,ERRNO);
            IF ERRNO ^=0 THEN
               IF TSO THEN
                  GOTO RETRY_6;
               ELSE
                  GOTO FINISH;
            LAST_PTR -> BLOCK.VDATA=RESULT;
            LAST_PTR -> BLOCK.VTIME=PTRS(1) -> BLOCK.VTIME;
            DO JJ=1 TO NO_OF_VARIABLES;
               PTRS(JJ)=PTRS(JJ) -> BLOCK.NEXT_BLOCK;
            END;
            IF FIRST THEN
               DO;
                  FIRST='0'B;
                  PHRASE(KK).VMIN,PHRASE(KK).VMAX=RESULT;
                  PHRASE(KK).NO_OF_POINTS=1;
                  PHRASE(KK).TMIN,PHRASE(KK).TMAX=LAST_PTR -> BLOCK.VTIM
                  PHRASE(KK).MEAN=RESULT;
                  PHRASE(KK).MEAN_SQUARE=RESULT*RESULT;
               END;
            ELSE
               DO;
                  PHRASE(KK).VMIN=MIN(PHRASE(KK).VMIN,RESULT);
                  PHRASE(KK).VMAX=MAX(PHRASE(KK).VMAX,RESULT);
                  PHRASE(KK).NO_OF_POINTS=PHRASE(KK).NO_OF_POINTS+1;
                  PHRASE(KK).TMIN=MIN(PHRASE(KK).TMIN,
                    (LAST_PTR -> BLOCK.VTIME));
                  PHRASE(KK).TMAX=MAX(PHRASE(KK).TMAX,
                    (LAST_PTR -> BLOCK.VTIME));
                  PHRASE(KK).MEAN=PHRASE(KK).MEAN+RESULT;
                  PHRASE(KK).MEAN_SQUARE=PHRASE(KK).MEAN_SQUARE +RESULT*
               END;
         END;
         IF PHRASE(KK).NO_OF_POINTS=0 THEN
            DO;
         PHRASE(KK).MEAN_SQUARE=
         SQRT(PHRASE(KK).MEAN_SQUARE -PHRASE(KK).MEAN*PHRASE(KK).MEAN);
         PUT FILE(SYSPRINT)
         DATA(PHRASE(KK).NO_OF_POINTS, PHRASE(KK).VMIN,PHRASE(KK).VMAX,
         PHRASE(KK).MEAN,PHRASE(KK).MEAN_SQUARE);
         LAST_PTR=PHRASE(KK).FIRST_BLOCK;
         PUT FILE(SYSPRINT) EDIT('    VALUE    TIME') (COL(1),A);
         DO WHILE(LAST_PTR ^= NULL);
            PUT FILE(SYSPRINT) EDIT(LAST_PTR -> BLOCK.VDATA, LAST_PTR ->
            BLOCK.VTIME) (COL(1),2 E(10,2));
            LAST_PTR=LAST_PTR -> BLOCK.NEXT_BLOCK;
         END;
      END;
1REPLOT: /* READ IN TYPE OF PLOT , LIMITS AND TITLES */
      TYPE_OF_PLOT='';
      XMIN,XMAX,YMIN,YMAX=0.0;
      LOGX,LOGY='0'B;
 RETRY_4:
      IF TSO THEN
         PUT FILE(SYSPRINT)
         EDIT(' ENTER TYPE_OF_PLOT,', 'XMIN,XMAX,YMIN,YMAX,LOGX,LOGY :')
           (COL(1),2 A);
      GET FILE(SYSIN) DATA(TYPE_OF_PLOT,XMIN,XMAX,YMIN,YMAX,LOGX,LOGY,PL
      IF TYPE_OF_PLOT='END' THEN
         GOTO FINISH;
      IF TYPE_OF_PLOT='VARIABLE' THEN
         GOTO NO_TRY;
      IF PLOT='EXPRESSION' THEN
         GOTO NEXT_EX;
      IF TYPE_OF_PLOT='' & TSO THEN
         DO;
 /* PUT OUT HELP FOR TSO USER */
            PUT FILE(SYSPRINT)
            EDIT(' OPTIONS AVAILABLE ARE -',
            'TYPE_OF_PLOT=TIME/HISTOGRAM/AUTO-CORRELATION/',
            'CROSS-CORRELATION/VARIABLE/EXPRESSION/END',
            'XMIN,XMAX,YMIN,YMAX=LIMITS FOR THE PLOTTING(',
            'IF NOT SPECIFIED AUTOMATIC MAPPING WILL OCCUR)') (
            COL(1),A,COL(1),2 A,COL(1),2 A);
            GOTO RETRY_4;
         END;
      PUT FILE(SYSPRINT) EDIT(' OPTIONS SELECTED ARE -','') (COL(1),A,CO
      PUT FILE(SYSPRINT) DATA(TYPE_OF_PLOT,XMIN,XMAX,YMIN,YMAX,LOGX,LOGY
      IF TSO THEN
         DO;
 /* PROMPT TSO USER FOR RETRY */
            PUT FILE(SYSPRINT) EDIT('OK ?:') (COL(1),A);
            GET FILE(SYSIN) EDIT(ANSWER) (COL(1),A(1));
            IF ANSWER^=YES(3)&ANSWER^=YES(4) THEN
               GOTO RETRY_4;
         END;
1/* PLOT TIME - PHRASE AGAINST TIME */
      IF TYPE_OF_PLOT='TIME' THEN
         DO;
            IF XMIN=XMAX THEN
               DO;
 /* AUTOMATIC MAPPING IN X DIRN */
                  XMIN=PHRASE(1).TMIN;
                  XMAX=PHRASE(1).TMAX;
                  DO KK=2 TO NO_OF_EXPRESSIONS;
                     XMIN=MIN(XMIN,PHRASE(KK).TMIN);
                     XMAX=MAX(XMAX,PHRASE(KK).TMAX);
                  END;
                  IF XMIN=XMAX THEN
                     DO;
                        IF XMAX=0. THEN
                           XMAX=0.001;
                        XMIN=XMIN*0.9;
                        XMAX=XMAX*1.1;
                     END;
               END;
            IF YMIN=YMAX THEN
               DO;
 /* AUTOMATIC MAPPING IN Y DIRN */
                  YMIN=PHRASE(1).VMIN;
                  YMAX=PHRASE(1).VMAX;
                  DO KK=2 TO NO_OF_EXPRESSIONS;
                     YMIN=MIN(PHRASE(KK).VMIN,YMIN);
                     YMAX=MAX(PHRASE(KK).VMAX,YMAX);
                  END;
                  IF YMIN=YMAX THEN
                     DO;
                        IF YMAX=0. THEN
                           YMAX=0.001;
                        YMIN=YMIN*0.9;
                        YMAX=YMAX*1.1;
                     END;
               END;
            XC1=-0.5;
            XC2=1.0;
            XC3=-0.5;
            XC4=1.0;
            CALL CSPACE(XC1,XC2,XC3,XC4);
            DO KK=1 TO NO_OF_EXPRESSIONS;
               XC1=0.15;
               XC2=0.975;
               XC4=0.95;
               XC3=-0.25;
               IF TEK THEN
                  XC3=0.1;
               IF MOD(KK-1,3) = 0 THEN
                  DO;
                     CALL PSPACE(XC1,XC2,XC3,XC4);
                     CALL MAP(XMIN,XMAX,YMIN,YMAX);
                     CALL POSITN(XMIN,YMIN);
                     CALL JOIN(XMAX,YMIN);
                     XANT=XMIN;
                     DO JJ=1 TO 10;
 /* ANNOTATE X AXIS */
                        IBIN=5;
                        IF JJ=1 THEN
                           GOTO NO_BROKE;
                        CALL BROKEN(IBIN,IBIN,IBIN,IBIN);
                        CALL POSITN(XANT,YMAX);
                        CALL JOIN(XANT,YMIN);
                        CALL FULL;
 NO_BROKE:
                        CALL GETIME((XANT),TIME);
                        ORIEN=1.0;
                        CALL CTRORI(ORIEN);
                        ILEN=1;
                        CALL TYPECS('-',ILEN);
                        IMAG=12;
                        CALL CTRMAG(IMAG);
                        IF TEK THEN
                           DO;
                              ILEN=13;
                              CALL HLINFD(ILEN);
                              ILEN=11;
                              CALL TYPROT(TIME,ILEN);
                           END;
                        ELSE
                           DO;
                              ILEN=-13;
                              CALL SPACE(ILEN);
                              ILEN=11;
                              CALL TYPECS(TIME,ILEN);
                           END;
                        ORIEN=0.0;
                        CALL CTRORI(ORIEN);
                        IMAG=20;
                        CALL CTRMAG(IMAG);
                        XANT=XANT+(XMAX-XMIN)/9;
                     END;
                     CALL POSITN(XMIN,YMIN);
                     ILEN=5;
                     CALL LINEFD(ILEN);
                     ILEN=15;
                     CALL SPACE(ILEN);
                     ILEN=11;
                     CALL TYPECS('TIME OF DAY',ILEN);
                  END;
               IF MOD(KK-1,3)=0 THEN
                  DO;
                     XC3=-0.25;
                     XC4=0.15;
                     IF TEK THEN
                        DO;
                           XC3=0.1;
                           XC4=0.38;
                        END;
                  END;
               ELSE
                  IF MOD(KK-1,3)=1 THEN
                     DO;
                        XC3=0.15;
                        XC4=0.55;
                        IF TEK THEN
                           DO;
                              XC3=0.38;
                              XC4=0.66;
                           END;
                     END;
                  ELSE
                     DO;
                        XC3=0.55;
                        XC4=0.95;
                        IF TEK THEN
                           DO;
                              XC3=0.66;
                              XC4=0.95;
                           END;
                     END;
               CALL PSPACE(XC1,XC2,XC3,XC4);
               IF ^LOGX & ^LOGY THEN
                  DO;
                     CALL MAP(XMIN,XMAX,YMIN,YMAX);
                     CALL AXTS(FALSE,TRUE);
                  END;
               IF ^LOGX & LOGY THEN
                  DO;
                     CALL MAPYL(XMIN,XMAX,YMIN,YMAX);
                     CALL AXTYL(FALSE,TRUE);
                  END;
               IF LOGX & ^LOGY THEN
                  DO;
                     CALL MAPXL(XMIN,XMAX,YMIN,YMAX);
                     CALL AXTXL(FALSE,TRUE);
                  END;
               IF LOGX & LOGY THEN
                  DO;
                     CALL MAPXYL(XMIN,XMAX,YMIN,YMAX);
                     CALL AXTXYL(FALSE,TRUE);
                  END;
               CALL POSITN(XMIN,YMIN);
               CALL JOIN(XMAX,YMIN);
               CALL POSITN(XMIN,YMIN);
               ORIEN=1.0;
               CALL CTRORI(ORIEN);
               ILEN=-6;
               IF TEK THEN
                  ILEN=-7;
               IF TEK THEN
                  CALL SPACE(ILEN);
               ELSE
                  CALL HLINFD(ILEN);
               ILEN=12;
               CALL CTRMAG(ILEN);
               ILEN=60;
               IF TEK THEN
                  CALL TYPROT(PHRASE(KK).V_TITLE,ILEN);
               ELSE
                  DO;
                     ILEN=15;
                     CALL SPACE(ILEN);
                     ILEN=60;
                     CALL TYPECS(PHRASE(KK).V_TITLE,ILEN);
                  END;
               ORIEN=0.0;
               CALL CTRORI(ORIEN);
               ILEN=20;
               CALL CTRMAG(ILEN);
               ILEN=4;
               CALL CTRSET(ILEN);
               ILEN=1;
               CALL DENSTY(ILEN);
               LAST_PTR=PHRASE(KK).FIRST_BLOCK;
               LAST_X=LAST_PTR -> BLOCK.VTIME;
               LAST_Y=LAST_PTR -> BLOCK.VDATA;
               LAST_PTR=LAST_PTR -> BLOCK.NEXT_BLOCK;
               ILEN=45;
               CALL PLOTNC(LAST_X,LAST_Y,ILEN);
               DO WHILE(LAST_PTR ^= NULL);
                  LAST_X=LAST_PTR -> BLOCK.VTIME;
                  LAST_Y=LAST_PTR -> BLOCK.VDATA;
                  CALL JOIN(LAST_X,LAST_Y);
                  CALL PLOTNC(LAST_X,LAST_Y,ILEN);
                  LAST_PTR= LAST_PTR -> BLOCK.NEXT_BLOCK;
               END;
               ILEN=1;
               CALL CTRSET(ILEN);
               ILEN=2;
               CALL DENSTY(ILEN);
               IF MOD(KK-1,3) = 2 THEN
                  CALL FRAME;
            END;
            IF MOD(NO_OF_EXPRESSIONS-1,3) ^= 2 THEN
               CALL FRAME;
         END;
1/* PLOT HISTOGRAM - FREQUENCY OF OCCURENCE */
      IF TYPE_OF_PLOT='HISTOGRAM' THEN
         DO;
            NO_OF_BINS=PHRASE(1).NO_OF_POINTS+1;
            DO KK=2 TO NO_OF_EXPRESSIONS;
               NO_OF_BINS=MAX(NO_OF_BINS,PHRASE(KK).NO_OF_POINTS);
            END;
            IF XMIN=XMAX THEN
               DO;
                  XMIN=PHRASE(1).VMIN;
                  XMAX=PHRASE(1).VMAX;
                  DO KK=2 TO NO_OF_EXPRESSIONS;
                     XMAX=MAX(PHRASE(KK).VMAX,XMAX);
                     XMIN=MIN(PHRASE(KK).VMIN,XMIN);
                  END;
                  IF XMIN=XMAX THEN
                     DO;
                        IF XMAX=0. THEN
                           XMAX=0.001;
                        XMIN=XMIN*0.9;
                        XMAX=XMAX*1.1;
                     END;
               END;
            IF YMIN=YMAX THEN
               DO;
                  YMIN=0.0;
                  YMAX=1.0;
               END;
            NO_OF_BINS=SQRT(NO_OF_BINS)+1;
            NO_OF_BINS=MAX(NO_OF_BINS,10);
            NO_OF_BINS=MIN(NO_OF_BINS,99)+1;
            ALLOCATE BINS;
            XC1=-0.5;
            XC2=1.0;
            XC3=-0.5;
            XC4=1.0;
            CALL CSPACE(XC1,XC2,XC3,XC4);
            DO KK=1 TO NO_OF_EXPRESSIONS;
               XC1=0.15;
               XC2=0.975;
               IF MOD(KK-1,3)=0 THEN
                  DO;
                     XC3=-0.25;
                     XC4=0.1;
                     IF TEK THEN
                        DO;
                           XC3=0.1;
                           XC4=0.33;
                        END;
                  END;
               ELSE
                  IF MOD(KK-1,3)=1 THEN
                     DO;
                        XC3=0.15;
                        XC4=0.5;
                        IF TEK THEN
                           DO;
                              XC3=0.38;
                              XC4=0.61;
                           END;
                     END;
                  ELSE
                     DO;
                        XC3=0.55;
                        XC4=0.95;
                        IF TEK THEN
                           DO;
                              XC3=0.66;
                              XC4=0.95;
                           END;
                     END;
               CALL PSPACE(XC1,XC2,XC3,XC4);
               IF ^LOGX & ^LOGY THEN
                  DO;
                     CALL MAP(XMIN,XMAX,YMIN,YMAX);
                     CALL SCALES;
                  END;
               IF ^LOGX & LOGY THEN
                  DO;
                     CALL MAPYL(XMIN,XMAX,YMIN,YMAX);
                     CALL SCAYL;
                  END;
               IF LOGX & ^LOGY THEN
                  DO;
                     CALL MAPXL(XMIN,XMAX,YMIN,YMAX);
                     CALL SCAXL;
                  END;
               IF LOGX & LOGY THEN
                  DO;
                     CALL MAPXYL(XMIN,XMAX,YMIN,YMAX);
                     CALL SCAXYL;
                  END;
               CALL POSITN(XMIN,YMIN);
               ILEN=3;
               CALL LINEFD(ILEN);
               ILEN=15;
               CALL SPACE(ILEN);
               ILEN=60;
               CALL TYPECS(PHRASE(KK).V_TITLE,ILEN);
               CALL POSITN(XMIN,YMIN);
               ORIEN=1.0;
               CALL CTRORI(ORIEN);
               ILEN=-5;
               IF TEK THEN
                  ILEN=-6;
               IF TEK THEN
                  CALL SPACE(ILEN);
               ELSE
                  CALL HLINFD(ILEN);
               ILEN=9;
               IF TEK THEN
                  CALL TYPROT('FREQUENCY',ILEN);
               ELSE
                  DO;
                     ILEN=6;
                     CALL SPACE(ILEN);
                     ILEN=9;
                     CALL TYPECS('FREQUENCY',ILEN);
                  END;
               ORIEN=0.0;
               CALL CTRORI(ORIEN);
               BINS(*)=0;
               LAST_PTR=PHRASE(KK).FIRST_BLOCK;
               DO WHILE(LAST_PTR ^= NULL);
                  IBIN=0;
                  XANT=XMIN;
                  DO MNO=1 TO NO_OF_BINS-1;
                     XANT=XANT+(XMAX-XMIN)/NO_OF_BINS;
                     IBIN=IBIN+1;
                     IF LAST_PTR -> BLOCK.VDATA <= XANT THEN
                        GOTO FOUND_BIN;
                  END;
                  IBIN=NO_OF_BINS;
 FOUND_BIN:
                  BINS(IBIN)=BINS(IBIN)+1;
                  LAST_PTR=LAST_PTR -> BLOCK.NEXT_BLOCK;
               END;
               XANT=(XMAX-XMIN)/NO_OF_BINS;
               ILEN=NO_OF_BINS;
               BINS=BINS/PHRASE(KK).NO_OF_POINTS;/* NORMALIZE BIN COUNTS
               CALL HISTGM(XMIN,YMIN,XANT,BINS,IONOFF,ILEN);
         IF NO_OF_EXPRESSIONS <= 1 THEN
            GOTO REPLOT;
         ELSE
            DO KK=1 TO NO_OF_EXPRESSIONS-1;
               DO JJ=KK+1 TO NO_OF_EXPRESSIONS;
                  IF PHRASE(KK).VMIN=PHRASE(KK).VMAX THEN
                     DO;
                        IF PHRASE(KK).VMAX=0. THEN
                           PHRASE(KK).VMAX=0.001;
                        PHRASE(KK).VMAX=PHRASE(KK).VMAX*1.1;
                        PHRASE(KK).VMIN=PHRASE(KK).VMIN*0.9;
                     END;
                  IF PHRASE(JJ).VMIN=PHRASE(JJ).VMAX THEN
                     DO;
                        IF PHRASE(JJ).VMAX=0. THEN
                           PHRASE(JJ).VMAX=0.001;
                        PHRASE(JJ).VMIN=PHRASE(JJ).VMIN*0.9;
                        PHRASE(JJ).VMAX=PHRASE(JJ).VMAX*1.1;
                     END;
                  XC1=-0.5;
                  XC2=1.0;
                  XC3=-0.5;
                  XC4=1.0;
                  CALL CSPACE(XC1,XC2,XC3,XC4);
                  XC1=0.15;
                  XC2=0.975;
                  XC4=0.95;
                  XC3=-0.1;
                  IF TEK THEN
                     XC3=0.2;
                  CALL PSPACE(XC1,XC2,XC3,XC4);
                  XMIN=PHRASE(KK).VMIN;
                  XMAX=PHRASE(KK).VMAX;
                  YMIN=PHRASE(JJ).VMIN;
                  YMAX=PHRASE(JJ).VMAX;
                  IF ^LOGX & ^LOGY THEN
                     DO;
                        CALL MAP(XMIN,XMAX,YMIN,YMAX);
                        CALL SCALES;
                     END;
                  IF ^LOGX & LOGY THEN
                     DO;
                        CALL MAPYL(XMIN,XMAX,YMIN,YMAX);
                        CALL SCAYL;
                     END;
                  IF LOGX & ^LOGY THEN
                     DO;
                        CALL MAPXL(XMIN,XMAX,YMIN,YMAX);
                        CALL SCAXL;
                     END;
                  IF LOGX & LOGY THEN
                     DO;
                        CALL MAPXYL(XMIN,XMAX,YMIN,YMAX);
                        CALL SCAXYL;
                     END;
                  CALL POSITN(XMIN,YMIN);
                  ILEN=3;
                  CALL LINEFD(ILEN);
                  ILEN=10;
                  CALL SPACE(ILEN);
                  ILEN=60;
                  CALL TYPECS(PHRASE(KK).V_TITLE,ILEN);
                  CALL POSITN(XMIN,YMIN);
                  ORIEN=1.0;
                  CALL CTRORI(ORIEN);
                  ILEN=-5;
                  IF TEK THEN
                     CALL SPACE(ILEN);
                  ELSE
                     CALL HLINFD(ILEN);
                  ILEN=60;
                  IF TEK THEN
                     CALL TYPROT(PHRASE(JJ).V_TITLE,ILEN);
                  ELSE
                     DO;
                        ILEN=10;
                        CALL SPACE(ILEN);
                        ILEN=60;
                        CALL TYPECS(PHRASE(JJ).V_TITLE,ILEN);
                     END;
                  ORIEN=0.0;
                  CALL CTRORI(ORIEN);
                  ILEN=4;
                  CALL CTRSET(ILEN);
                  ILEN=1;
                  CALL DENSTY(ILEN);
                  PTR_1=PHRASE(KK).FIRST_BLOCK;
                  PTR_2=PHRASE(JJ).FIRST_BLOCK;
                  CORR_COEFF=0.;
                  ILEN=45;
                  DO WHILE(PTR_1 ^= NULL & PTR_2 ^= NULL);
                     D1=PTR_1 -> BLOCK.VDATA-PHRASE(KK).MEAN;
                     D2=PTR_2 -> BLOCK.VDATA-PHRASE(JJ).MEAN;
                     IF D1^=0.×D2^=0. THEN
                        CORR_COEFF=CORR_COEFF+2.0*D1*D2/ (D1*D1+D2*D2);
                     CALL PLOTNC(PTR_1 -> BLOCK.VDATA,PTR_2 -> BLOCK.VDA
                       ILEN);
                     PTR_1=PTR_1 -> BLOCK.NEXT_BLOCK;
                     PTR_2=PTR_2 -> BLOCK.NEXT_BLOCK;
                  END;
                  ILEN=2;
                  CALL DENSTY(ILEN);
                  ILEN=1;
                  CALL CTRSET(ILEN);
                  CALL POSITN(XMIN,YMIN);
                  ILEN=5;
                  CALL LINEFD(ILEN);
                  ILEN=10;
                  CALL SPACE(ILEN);
                  ILEN=26;
                  CALL TYPECS('CORRELATION COEFFICIENT = ',ILEN);
                  ILEN=2;
                  CALL TYPENF(CORR_COEFF,ILEN);
                  CALL FRAME;
               END;
            END;
1     IF TYPE_OF_PLOT='AUTO-CORRELATION' THEN
         DO;
            DO KK=1 TO NO_OF_EXPRESSIONS;
               NO_OF_BINS=(PHRASE(KK).NO_OF_POINTS/4)*2+1;
               ALLOCATE BINS;
               BINS(*)=0;
               ILEN=(NO_OF_BINS+1)/2;
               DO JJ=0 TO ILEN-1;
                  PTR_1=PHRASE(KK).FIRST_BLOCK;
                  PTR_2=PTR_1;
                  DO MNO=1 TO JJ;
                     PTR_2=PTR_2 -> BLOCK.NEXT_BLOCK;
                     IF PTR_2 = NULL THEN
                        GOTO END_CORR;
                  END;
                  NO_PTS=0;
                  DO WHILE(PTR_2 ^= NULL);
                     BINS(JJ+ILEN)=BINS(JJ+ILEN)+(PTR_1 -> BLOCK.VDATA)*
                     (PTR_2 -> BLOCK.VDATA);
                     NO_PTS=NO_PTS+1;
                     PTR_1=PTR_1 -> BLOCK.NEXT_BLOCK;
                     PTR_2=PTR_2 -> BLOCK.NEXT_BLOCK;
                  END;
                  BINS(JJ+ILEN)=BINS(JJ+ILEN)/NO_PTS;
                  BINS(ILEN-JJ)=BINS(JJ+ILEN);
               END;
 END_CORR:
               XC1=-0.5;
               XC2=1.0;
               CALL CSPACE(XC1,XC2,XC1,XC2);
               XC1=0.15;
               XC2=0.975;
               IF MOD(KK-1,3)=0 THEN
                  DO;
                     XC3=-0.25;
                     XC4=0.1;
                     IF TEK THEN
                        DO;
                           XC3=0.1;
                           XC4=0.33;
                        END;
                  END;
               ELSE
                  IF MOD(KK-1,3)=1 THEN
                     DO;
                        XC3=0.15;
                        XC4=0.5;
                        IF TEK THEN
                           DO;
                              XC3=0.38;
                              XC4=0.61;
                           END;
                     END;
                  ELSE
                     DO;
                        XC3=0.55;
                        XC4=0.95;
                        IF TEK THEN
                           DO;
                              XC3=0.66;
                              XC4=0.95;
                           END;
                     END;
               CALL PSPACE(XC1,XC2,XC3,XC4);
               YMAX,YMIN=BINS(1);
               DO JJ=2 TO NO_OF_BINS;
                  YMAX=MAX(YMAX,BINS(JJ));
                  YMIN=MIN(YMIN,BINS(JJ));
               END;
               XMAX=(NO_OF_BINS-1)*(PHRASE(KK).TMAX-PHRASE(KK).TMIN)/
               (200.*PHRASE(KK).NO_OF_POINTS);
               XMIN=-XMAX;
               IF ^LOGX & ^LOGY THEN
                  DO;
                     CALL MAP(XMIN,XMAX,YMIN,YMAX);
                     CALL SCALES;
                  END;
               IF ^LOGX & LOGY THEN
                  DO;
                     CALL MAPYL(XMIN,XMAX,YMIN,YMAX);
                     CALL SCAYL;
                  END;
               IF LOGX & ^LOGY THEN
                  DO;
                     CALL MAPYL(XMIN,XMAX,YMIN,YMAX);
                     CALL SCAYL;
                  END;
               IF LOGX & LOGY THEN
                  DO;
                     CALL MAPXYL(XMIN,XMAX,YMIN,YMAX);
                     CALL SCAXYL;
                  END;
               ORIEN=0.0;
               CALL POSITN(ORIEN,YMIN);
               CALL JOIN(ORIEN,YMAX);
               ILEN=45;
               CALL PLOTNC(XMIN,BINS(1),ILEN);
               ORIEN=(NO_OF_BINS-1)/2;
               DO JJ=2 TO NO_OF_BINS;
                  XANT=XMIN+XMAX*(JJ-1)/ORIEN;
                  CALL JOIN(XANT,BINS(JJ));
                  CALL PLOTNC(XANT,BINS(JJ),ILEN);
               END;
               CALL POSITN(XMIN,YMIN);
               ILEN=3;
               CALL LINEFD(ILEN);
               ILEN=15;
               CALL SPACE(ILEN);
               ILEN=11;
               CALL TYPECS('TIME CHANGE',ILEN);
               CALL POSITN(XMIN,YMIN);
               ORIEN=1.0;
               CALL CTRORI(ORIEN);
               ILEN=-7;
               IF TEK THEN
                  CALL SPACE(ILEN);
               ELSE
                  CALL HLINFD(ILEN);
               ILEN=60;
               IF TEK THEN
                  CALL TYPROT(PHRASE(KK).V_TITLE,ILEN);
               ELSE
                  DO;
                     ILEN=6;
                     CALL SPACE(ILEN);
                     ILEN=60;
                     CALL TYPECS(PHRASE(KK).V_TITLE,ILEN);
                  END;
               ORIEN=0.0;
               CALL CTRORI(ORIEN);
               IF MOD(KK-1,3)=2 THEN
                  CALL FRAME;
               FREE BINS;
            END;
            IF MOD(NO_OF_EXPRESSIONS-1,3) ^= 2 THEN
               CALL FRAME;
         END;
      GOTO REPLOT;
 NEXT_EX:
      FREE PHRASE;
      FREE PTRS;
      SUBPOOL2=EMPTY();
      GOTO NEXTEXPR;
 NO_TRY:
      FREE PHRASE;
      FREE PTRS;
      SUBPOOL2=EMPTY();
      FREE VARIABLE;
      SUBPOOL=EMPTY();         /* FREE DATA AREAS */
      GOTO NEXTPLOT;           /* GO BACK FOR NEXT GRAPH */
 FINISH:
      CALL GREND;              /* SHUTDOWN GHOST */
   END MONPLOT;
