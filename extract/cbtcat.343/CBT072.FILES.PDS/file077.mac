1
0

0
0
0
0
0
0
0
0
0
                      I N C O R Z A P
0
                      IN-CORE SUPERZAP PROGRAM
0
0
1                                                              PAGE 01

           INCORZAP   --    IN-CORE SUPERZAP PROGRAM

 INCORZAP IS A SERVICE AID PROGRAM AVAILABLE TO RUN UNDER OS/VS2
 MVS. INCORZAP INSPECTS OR MODIFIES PROGRAMS IN MAIN STORAGE
 WITHOUT MODIFYING THE ORIGINAL COPY OF THE PROGRAM THAT RESIDES ON
 DIRECT ACCESS STORAGE IN A PROGRAM LIBRARY.

 INCORZAP PERMITS ZAPS TO BE APPLIED DIRECTLY TO NUCLEUS OR LINK
 PACK AREA (LPA) MODULES WITHOUT THE REQUIREMENT TO RE-IPL AFTER
 THE ZAP HAS BEEN APPLIED. SINCE INCORZAP MODIFIES ON THE MAIN
 STORAGE COPY OF A MODULE, THE ZAP WILL BE GONE WHEN THE SYSTEM IS
 EVENTUALLY RE-IPLED UNLESS THE ZAP IS APPLIED PERMANENTLY USING
 AMASPZAP.

 AS A MEANS TO MAKE MAIN STORAGE PROGRAM MODIFICATIONS, INCORZAP
 IS USEFUL FOR THE FOLLOWING REASONS:

     INCORZAP PERMITS REFERENCES AT THE CSECT LEVEL RATHER
     THAN ONLY AT THE LOAD MODULE LEVEL.

     THE SYNTAX AND OPERATION OF SUPERZAP ARE EASY TO
     UNDERSTAND AND USE.

     SINCE TEMPORARY MODIFICATIONS TO MODULES ON PROGRAM
     LIBRARIES ARE USUALLY MADE WITH SUPERZAP, IT MAKES SENSE
     TO USE A COMPATIBLE MECHANISM TO MAKE TEMPORARY
     MODIFICATIONS TO MODULES IN MAIN STORAGE.

 INCORZAP IS COMPATIBLE IN CONTROL STATEMENT FORMAT AND JCL
 REQUIREMENTS TO AMASPZAP, THE ORIGINAL SUPERZAP PROGRAM. INCORZAP
 ALSO HAS THESE ADDITIONAL FUNCTIONS.

     THE OPTION TO SUPPLY CONTROL STATEMENTS VIA A PARAMETER
     LIST RATHER THAN THROUGH A SYSIN STREAM.

     THE ABILITY TO USE PROGRAM SYMBOLS AS WELL AS ABSOLUTE
     NUMBERS TO DETERMINE OFFSETS WITHIN CSECTS.

     AN OPTIONAL, ENHANCED CONSOLE MODE OF OPERATION.

     THE OPTION TO LOCALIZE PROGRAM MODIFICATIONS BY LOADING A
     PRIVATE VERSION OF A MODULE INTO THE JOB PACK AREA.

     MULTIPLE CONTROL STATEMENTS PER LINE VIA THE LOGICAL LINE
     SEPARATOR CHARACTER ('/').

1                                                              PAGE 02
         INCORZAP --- REFERENCE SUMMARY


 A. JCL REQUIREMENTS (1)


                             PGM=INCORZAP
     //(STEPNAME)     EXEC
                             PGM=LINKZAP,PARM='CONTROL STMTS'

     //SYSLIB         DD     DSN       PROGRAM LIBRARY FROM WHICH
                                       IN-CORE MODULE WAS LOADED.
                                       (REQUIRED)
     //SYSPRINT       DD     SYSOUT=.  PRINTED OUTPUT. (OPTIONAL).
     //SYSIN          DD     *         CONTROL STATEMENTS. (REQUIRED
                                       FOR INCORZAP, IGNORED
                                       FOR LINKZAP.)

 B. CONTROL STATEMENTS

     NAME      LOADMOD    (CSECT)
     VER(IFY)  OFFSET(2)  HEXSTRING
     REP(LACE) OFFSET(2)  HEXSTRING    CAUSES PGFIX IF PAGEABLE
     RES(TORE) OFFSET(2)  HEXSTRING    LIKE REP, BUT CAUSES PGFREE
     DUMP(T)   LOADMOD    (CSECT)      DUMP IN-CORE PROGRAM DATA
     CON(SOLE)                         READ CONTROL STATEMENTS FROM
                                       THE CONSOLE
     BAS(E)    HEXVALUE                HEXVALUE WILL BE SUBTRACED FROM
                                       NUMBERIC OFFSETS
     RESET                             CLEARS NO-GO SWITCH
     /                                 LOGICAL LINE SEPARATOR
     ZAP       OFFSET(2)  HEXSTRING    ZEROES BYTES IF EQUAL TO
                                       HEXSTRING
     *                                 COMMENT
     LOC(AL)                           FOLLOWING NAME STATEMENTS WILL
                                       LOAD MODULES INTO JOB PACK AREA
     GLO(BAL)                          DROP LOCAL MODE

 C. NOTES


     (1). ALTERNATE DD NAMES - THE FOLLOWING DDNAMES ARE REALLY THE
          FIRST CHOICE OF INCORZAP- PROGLIB, PROGLIST, PROGIN.
          THESE NAMES ARE THUS RESERVED NAMES AND ARE UNAVAILABLE
          FOR USE ON ANY OTHER DD'S IN THE STEP. IF ONE OF THESE
          NAMES IS NOT PRESENT, THE MORE TRADITIONAL NAME (SYSLIB,
          SYSPRINT, OR SYSIN) IS USED.

     (2). OFFSET - MAY BE A HEXSTRING (EVEN NUMBER OF HEX DIGITS)
          OR A PROGRAM SYMBOL IN SINGLE QUOTATION MARKS. ENTRY
          POINT NAMES IN A CSECT MAY ALWAYS BE USED AS SYMBOLIC
          OFFSETS. ANY SYMBOL IN A CSECT MAY BE USED IF THE CSECT
          WAS COMPILED AND LINKED WITH THE TEST ATTRIBUTE.

1                                                              PAGE 03

 COMPARISON OF INCORZAP AND AMASPZAP


 AMASPZAP, THE ORIGINAL SUPERZAP PROGRAM, MODIFIES OR INSPECTS DATA
 AND PROGRAMS ON DIRECT ACCESS STORAGE. INCORZAP MODIFIES OR
 INSPECTS PROGRAMS IN MAIN STORAGE WITHOUT ALTERING THE COPIES OF
 THE PROGRAMS ON DIRECT ACCESS STORAGE.

 INCORZAP AND AMASPZAP ARE GENERALLY COMPATIBLE IN FUNCTION, JCL
 REQUIREMENTS, AND CONTROL STATEMENT SYNTAX. SOME DIFFERENCES DO
 EXIST AND THESE ARE LISTED HERE:

 1. CCHHR AND ABSDUMP - CONTROL STATEMENTS NOT APPLICABLE TO
    INCORZAP.

 2. SETSSI AND IDRDATA - CONTROL STATEMENTS NOT APPLICABLE TO
    INCORZAP.

 3. ALTERNATE DDNAMES - ARE SPECIFIED DIFFERENTLY.

 4. DUMP FORMATS ARE DIFFERENT

 5. INPUT VIA PARAMETER LIST - NOT SUPPORTED BY AMASPZAP

 6. '/' LOGICAL LINE SEPARATOR - NOT SUPPORTED BY AMASPZAP

 7. SYMBOLIC OFFSETS - NOT SUPPORTED BY AMASPZAP.

 8. LOCAL AND GLOBAL CONTROL STATEMENTS - NOT APPLICABLE TO
    AMASPZAP.

 9. RESTORE CONTROL STATEMENT - NOT APPLICABLE TO AMASPZAP.

 10 RC CONTROL STATEMENT - NOT SUPPORTED BY AMASPZAP.



 CONTROLLING THE USE OF INCORZAP

 SINCE INCORZAP CAN BE USED TO CHANGE PROGRAMS IN MAIN STORAGE,
 MISUSE OF THE FACILITY COULD THREATEN INSTALLATION SECURITY AND
 INTEGRITY.

 THE USE OF INCORZAP SHOULD BE CONTROLLED IN THE SAME MANNER AS
 AMASPZAP. A DISCUSSION OF CONTROLLING THE USE OF AMASPZAP MAY BE
 FOUND IN 'OS/VS2 SYSTEM PROGRAMMING LIBRARY: SERVICE AIDS',
 GC28-0674.

1                                                              PAGE 04
 OPERATIONAL CONSIDERATIONS WITH INCORZAP

0

 INCORZAP IS NOT SUPPORTED ON VS1 OR PRE-MVS VS2 SYSTEMS.

 INCORZAP MAY APPEAR TO OPERATE INCORRECTLY IF THE LOAD MODULE
 COPY ON DASD HAS BEEN RE-LINKED-EDITED SINCE THE LOAD MODULE WAS
 LAST LOADED INTO MAIN STORAGE. THIS IS BECAUSE INCORZAP READS
 THE DASD COPY TO DETERMINE THE NUMERIC OFFSETS OR CSECTS AND OTHER
 SYMBOLS WITHIN THE LOAD MODULE.

 FOR EXAMPLE, IF THE NUCLEUS HAS BEEN RE-LINKED SINCE THE LAST IPL,
 THEN THE OFFSETS MAY HAVE CHANGED. IN THIS CASE THE DASD AND MAIN
 STORAGE VERSIONS OF THE LOAD MODULE MAY BE DIFFERENT, POSSIBLY
 CAUSING INCORZAP TO IMPROPERLY COMPUTE ADDRESSES WITHIN THE LOAD
 MODULE. THE SAME SITUATION WOULD OCCUR IF A SYS1.LPALIB MODULE
 WERE RE-LINKED SINCE IT WAS LAST LOADED INTO THE LINK PACK AREA
 VIA A CLPA OR MLPA IPL.

 INCORZAP MUST BE LINK-EDITED AS AN APF AUTHORIZED MODULE IN AN
 APF AUTHORIZED PROGRAM LIBRARY.

1                                                              PAGE 05

 EXAMPLES - -  IN-CORE ZAP PROGRAM

 1. ZAPPING AN LPA MODULE

 2. BACKING OUT A ZAP AND UNFIXING THE MAIN STORAGE
    FIXED PREVIOUSLY.

 3. USING ENTRY POINTS AS SYMBOLIC OFFSETS

 4. DUMPING AN IN-CORE CSECT.

 5. EXECUTING LINKZAP VIA JCL

 6. JCL TO PERMIT OPERATOR TO ZAP FROM THE CONSOLE

 7. FINDING THE ADDRESS OF A LOAD MODULE (CONSOLE MODE)

 8. FINDING THE ADDRESS OF A CSECT IN THE LPA (CONSOLE MODE)

 9. FINDING THE ADDRESS OF AN ENTRY POINT (CONSOLE MODE)

1                                                              PAGE 06

 EXAMPLE 1 - ZAPPING AN LPA MODULE

 //ZAP1 JOB MSGLEVEL=1
 //E1 EXEC PGM=INCORZAP
 //SYSLIB DD DSN=SYS1.LPALIB,DISP=SHR
 //SYSPRINT DD SYSOUT=A
 //SYSIN DD *
  NAME IGC0010A IEDAY00
  VER 03 C1E8
  REP 03 81A8
 /*

0
0
0
 EXAMPLE 2

 BACKING OUT A ZAP AND UNFIXING THE MAIN STORAGE FIXED PREVIOUSLY

 //ZAP2 JOB MSGLEVEL=1
 //E2 EXEC PGM=INCORZAP
 //SYSLIB DD DSN=SYS1.LPALIB,DISP=SHR
 //SYSPRINT DD SYSOUT=A
 //SYSIN DD *
   NAME IGC0010A IEDAY00
   VER 03 81A8
   RES 03 C1E8
 /*


1                                                              PAGE 07

 EXAMPLE 3 - USING ENTRY POINTS AS SYMBOLIC OFFSETS

 //ZAP3 JOB MSGLEVEL=1
 //E3 EXEC PGM=INCORZAP
 //SYSLIB DD DSN=SYS1.LPALIB,DISP=SHR
 //SYSPRINT DD SYSOUT=A
 //SYSIN DD *
   NAME IGC0010A IEDAY00
   VER 'QTIP0130' C5C0
   REP 'QTIP0130' 00
   NAME IGG0CLA1 IGG0CLA9
   VER 'IGGPCMRR' 05C0
   REP 'IGGPCMRR' 07FE
 /*

0
0
0
 EXAMPLE 4 - DUMPING AN IN-CORE CSECT

 //ZAP4 JOB MSGLEVEL=1
 //E4 EXEC PGM=INCORZAP
 //SYSLIB DD DSN=SYS1.NUCLEUS,DISP=SHR
 //SYSPRINT DD SYSOUT=A
 //SYSIN DD *
   DUMP IEANUC01 IGC018
 /*

1                                                              PAGE 08

 EXAMPLE 5 - EXECUTING LINKZAP VIA JCL

 //ZAP5 JOB MSGLEVEL=1
 //E5 EXEC PGM=LINKZAP,
// PARM='NAME IEANUC01 IEAVFX00/VER 1023 F8/REP 1023 FF'
 //SYSLIB DD DSN=SYS1.NUCLEUS,DISP=SHR
 //SYSPRINT DD SYSOUT=A


 (NOTE USE OF '/' AS A LOGICAL LINE SEPARATOR. THIS CAN
  BE USED IN PUNCHED CARD INPUT AND CONSOLE REPLIES AS WELL.)

0
0
0
 EXAMPLE 6 - INCORZAP PROCEDURE FOR CONSOLE ZAPPING

 //CORZAP PROC LIB=LPALIB
 //INCORZAP EXEC PGM=LINKZAP,PARM=CONSOLE
 //SYSPRINT DD SYSOUT=A
 //SYSLIB DD DSN=SYS1.&LIB,DISP=SHR
 //SYSUDUMP DD SYSOUT=A


1                                                              PAGE 09

 (THE EXAMPLES ON THIS PAGE USE THE CONSOLE MODE OF OPERATION)




 EXAMPLE 7 - FINDING THE ADDRESS OF A LOAD MODULE


   *03 ENTER ZAP STATEMENTS, RC OR END
    R 3, 'NAME IGC0010A'
    IEE600I REPLY TO 03 IS: SUPPRESSED
    +00E44000 = IN-CORE ADDRESS OF PRECEDING SYMBOL


0
0
0
 EXAMPLE 8 - FINDING THE ADDRESS OF A CSECT IN THE LINK PACK AREA.


    *04 ENTER ZAP STATEMENTS, RC OR END
     R 4,NAME IGC0010A IEDAY00
     IEE600I REPLY TO 04 IS: SUPPRESSED
     +00E452B8 = IN-CORE ADDRESS OF PRECEDING SYMBOL

0
0
 EXAMPLE 9 - FINDING THE ADDRESS OF AN ENTRY POINT


   *05 ENTER ZAP STATEMENTS, RC OR END
    R 5,VER 'GTIP013' 00
     IEE600I REPLY TO 05 IS: SUPPRESSED
     +00E455EE = IN-CORE ADDRESS OF PRECEDING SYMBOL
     +VERIFY REJECT - SET NO GO SWITCH
