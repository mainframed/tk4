1   19/07/91
                                                      $FS       1/8.

             -------------------------------------------
               3 2 7 0    D I S P L A Y    M A C R O S
             -------------------------------------------

 $FS      : Generate full screen 3270 display orders and fields.
 ----------

  Skeleton : LABEL  $FS   CC=...,WCC=...,SBA=...,SA=...,SFE=...,
                          MFE=...,SF=...,TEXT=...,RA=...,SET=...,
                          M=...,DOC=...,MF=...

  Where : CC not coded ----> no Command Code
          CC=... ----------> Command Code, where ... is a keyword
                             option selected in the following list :
                             W    ---> write
                             EW   ---> erase/write
                             EWA  ---> erase/write alternate
                             EAU  ---> erase all unprotected
                             WSF  ---> write structured field

          WCC not coded ---> no Write Control Character byte
          WCC=(...) -------> Write Control Character byte, where ...
                             is one or more keywords option selected
                             in the following list :
                             NE   ---> NL and EM determine print line
                             P40  ---> 40c./print line
                             P64  ---> 64c./print line
                             P80  ---> 80c./print line
                             SP   ---> start printer
                             AL   ---> sound audible alarm
                             KBR  ---> keyboard restore
                             RMDT ---> reset MDT bits (it also resets
                                       the AID)
          WCC=CLEAR -------> generate a full screen clear sequence
          WCC=(CLEAR,...) -> generate a full screen clear sequence,
                             where ... may be one or more keywords
                             option selected in the following list :
                             AL   ---> sound audible alarm
                             KBR  ---> keyboard restore
                             RMDT ---> reset MDT bits (it also resets
                                       the AID)
          WCC=OFF ---------> generate a full screen exit sequence
          WCC=(OFF,AL) ----> generate a full screen exit sequence with
                             the sound audible alarm

          SBA not coded ---> no Set Buffer Address
          SBA=(R,C) -------> row and column of SBA address :
                             R ---> row number (screen line)
                             C ---> column number (line position)
1   19/07/91
                                                      $FS       2/8.

          SA not coded ----> no Set Attribute order
          SA=RESET   ------> Character Attribute reset
          SA=(...) --------> ... is a pair of "type,value" as below :
                             ---> (HILITE,BLINK)
                                  (  "   ,REVERSE)
                                  (  "   ,USCORE)
                                  (  "   ,DEFAULT)
                             ---> (COLOUR,BLUE)
                                  (  "   ,RED)
                                  (  "   ,PINK)
                                  (  "   ,GREEN)
                                  (  "   ,TURQ)
                                  (  "   ,YELLOW)
                                  (  "   ,WHITE)
                                  (  "   ,DEFAULT)
                             ---> (PGSYM,HH) / HH = hexadecimal
                                  (  "   ,DEFAULT)

          SFE not coded ---> no Start Field Extended order
          MFE not coded ---> no Modified Field Extended order
          SFE=(...) -------> ... is one or more pair(s) of "type,value"
          MFE=(...)          as follows :
                             ---> (ATTR,NORMAL)
                                  (  " ,...) where ... is one or
                                  (  " ,(...)) where (...) are more
                                       keywords option selected in
                                       the following list :
                             PROT ---> protected field
                             NUM  ---> numeric field (cause automatic
                                       upshift of data entry keyboard)
                             SKIP ---> automatic skip field (this is
                                       obviously a protected field)
                             INT  ---> intensified display field
                             HIGH ---> high intensity display field
                                       (this is an alias of "INT")
                             PEN  ---> selector pen detectable field
                             MED  ---> medium intensity display field
                                       (this is an alias of "PEN")
                             DARK ---> non-display field
                             MDT  ---> to identify modified fields
                             ---> (HILITE,BLINK)
                                  (  "   ,REVERSE)
                                  (  "   ,USCORE)
                                  (  "   ,DEFAULT)
                             ---> (COLOUR,BLUE)
                                  (  "   ,RED)
                                  (  "   ,PINK)
                                  (  "   ,GREEN)
                                  (  "   ,TURQ)
                                  (  "   ,YELLOW)
                                  (  "   ,WHITE)
                                  (  "   ,DEFAULT)
                             ---> (PGSYM,HH) / HH = hexadecimal
                                  (  "  ,DEFAULT)
1   19/07/91
                                                      $FS       3/8.

          SF not coded ----> no start field. Default field (SF=NORMAL)
                             is assumed if CC, WCC, SBA, SA, SFE, MFE,
                             TEXT, RA and SET operands are not coded
          SF=NORMAL -------> normal alphameric display
          SF=IC -----------> Insert Cursor only
          SF=PT -----------> Program Tabulate only
          SF=(PT,IC) ------> Program Tabulate and Insert Cursor
          SF=(...) --------> SF with specified attribute
          SF=(...,IC) -----> SF, attribute and IC, PT or PT and IC
          SF=(...,PT)        where ... is one or more keywords option
          SF=(...,PT,IC)     selected in the following list :
                             PROT ---> protected field
                             NUM  ---> numeric field (cause automatic
                                       upshift of data entry keyboard)
                             SKIP ---> automatic skip field (this is
                                       obviously a protected field)
                             INT  ---> intensified display field
                             HIGH ---> high intensity display field
                                       (this is an alias of "INT")
                             PEN  ---> selector pen detectable field
                             MED  ---> medium intensity display field
                                       (this is an alias of "PEN")
                             DARK ---> non-display field
                             MDT  ---> to identify modified fields

          TEXT not coded --> no text field
          TEXT='...' ------> the desired text : a characters string
                             enclosed within quotes (if any quote or
                             ampersand needed in text, double it)
          TEXT=('...',N) --> the text followed by the desired length.
                             N must be an absolute numeric text length
                             value (range : 1 to 256)

          RA not coded ----> no Repeat order
          RA=(R,C,EUA) ----> row and column of EUA address :
                             R  ---> row number (screen line)
                             C  ---> column number (line position)
          RA=(R,C,E) ------> row and column of RA address :
          RA=(R,C,'E')       R  ---> row number (screen line)
          RA=(R,C,HH)        C  ---> column number (line position)
          RA=(R,C,GE,HH)     E  ---> is the Repeat character expressed
          RA=(R,C,GE,FILL)           in EBCDIC (if quote or ampersand
                                     requested, double it or use the
                                     hexadecimal form)
                             GE ---> means Graphic Escape character, it
                                     follows expressed in hexadecimal
                             HH ---> is the Repeat character expressed
                                     in hexadecimal (X'40' to X'FE')
                             FILL -> 00, character stored dynamically
1   01/08/91
                                                      $FS       4/8.

          SET not coded ---> no Set (special action) to do
          SET=...       ---> set an hexadecimal string
          SET=(GE,HH)   ---> set a Graphic Escape
          SET=(GE,FILL)      GE ---> means Graphic Escape character, it
                                     follows expressed in hexadecimal
                             HH ---> is the character expressed in
                                     hexadecimal (X'40' to X'FE')
                             FILL -> 00, character stored dynamically

          M not coded -----> default M= of previous $FS macro or M=2
                             if first $FS macro
          M=1 -------------> 12 x 40 screen size
          M=2 -------------> 24 x 80 screen size (default)
          M=3 -------------> 32 x 80 screen size
          M=4 -------------> 43 x 80 screen size
          M=5 -------------> 27 x 132 screen size

          DOC not coded ---> no inline documentation
          DOC=YES ---------> obtain inline documentation
          DOC=EJECT -------> obtain inline documentation on pages
          DOC=(YES,ALL) ---> obtain inline all documentation
          DOC=(EJECT,ALL) -> obtain inline all documentation on pages

          MF=L ------------> generate list form
          MF=(I,...) ------> generate execute form, ... is the label
                             of the starting address for generated
                             orders and fields move, see note 3
          MF=(I,(...)) ----> generate execute form, ... is a register
                             which contain the starting address for
                             generated orders and fields move, see
                             note 3
          MF=I ------------> generate execute form using the label or
          MF=(I,)            the register specified in the MF= operand
                             of a previous $FS macro use, see note 3
          MF=(E,...) ------> generate execute form, ... is the label
                             Rx-type starting address for generated
                             orders and fields move (register 1 used),
                             see note 2
          MF=(E,(...)) ----> generate execute form, ... is a register
                             which contain the starting address for
                             generated orders and fields move, see
                             note 2
          MF not coded ----> generate execute form using the register
          MF=E               specified in the MF= operand of a previous
          MF=(E,)            $FS macro use, or assume MF=(E,(1)) if the
                             first $FS macro occurance, see note 2
1   19/07/91
                                                      $FS       5/8.

  Notes : 1. Combinations of orders and fields are generated in the
             following sequence :
             CC, WCC, SBA, SA, SFE, MFE, SF, TEXT, RA and SET.
          2. When using the execute form, at end of macro generation
             the register 1 or that specified in the MF= operand
             points to the last byte+1 address of the generated
             orders and fields.
          3. When using the immediate form, at end of macro generation
             the position pointer of the generated orders and fields
             is retained.

  Warning :  1. User must know how a screen is builded before he uses
                this macro.
             2. Beware that the length attribute of an eventual label
                is not necessarily the length of all the data (orders
                and fields) generated by the macro.
1   19/07/91
                                                      $FS       6/8.

 $FSDOT   : Generate the DOT pattern encoded of binary bits
 ---------- corresponding to vertical and horizontal slicing of a
            character cell (Data Type 1).

  Vertical/Horizontal slicing of a character cell :
  -------------------------------------------------

         An uncompressed symbol definition is created by dividing the
  character cell within which a symbol is formed into bytes (slices) as
  shown below. The symbol is defined by encoding the bits (dots) in
  each byte (slices) as a B'1' if the dot is to be on, and a B'0' if
  off. Once the character cell has been sliced, the slices are now
  forming a data string, the DOT pattern representing the symbol is
  thus formed.

                       0 1 2 3 4 5 6 7 <- Bits
                 I---I-----------------I <---*-------*
       Bits -> 0 I   I    Slice   3    I     I       I
                 I   I-----------------I     I       I
               1 I   I    Slice   4    I     I       I
                 I   I-----------------I     I       I
               2 I S I    Slice   5    I     I       I
                 I l I-----------------I     I       I
               3 I i I    Slice   6    I     I       I
                 I c I-----------------I     I       I
               4 I e I    Slice   7    I     I       I
                 I   I-----------------I     I       I
               5 I 1 I    Slice   8    I     I       I
                 I   I-----------------I    H=12     I
               6 I   I    Slice   9    I     I       I     Slot
                 I   I-----------------I     I       I    height
               7 I   I    Slice  10    I     I       I
                 I---I-----------------I     I      H=16
               0 I   I    Slice  11    I     I       I
                 I   I-----------------I     I       I
               1 I   I    Slice  12    I     I       I
                 I   I-----------------I     I       I
               2 I S I    Slice  13    I     I       I
                 I l I-----------------I     I       I
               3 I i I    Slice  14    I     I       I
                 I c I-----------------I <---*       I
               4 I e I    Slice  15    I             I
                 I   I-----------------I             I
               5 I 2 I    Slice  16    I             I
                 I   I-----------------I             I
               6 I   I    Slice  17    I             I
                 I   I-----------------I             I
               7 I   I    Slice  18    I             I
                 I---I-----------------I <-----------*

                 <-------- W=9 -------->
                        Slot width
1   19/07/91
                                                      $FS       7/8.

  Triple-plane symbol sets :
  --------------------------

         Triple-plane symbol sets contain a separate plane for each
  primary colour : BLUE, RED and GREEN. Corresponding locations in each
  plane may be loaded with a different pattern of active bits, so the
  active primary colours combine to produce secondary colours, as
  indicated below

              ----------------------------------------
              I Primary colours       I              I
              I-----------------------I    Video     I
              I BLUE  I  RED  I GREEN I              I
              I-------I-------I-------I--------------I
              I  no   I  no   I  no   I  no display  I
              I  no   I  no   I  yes  I  Green       I
              I  no   I  yes  I  no   I  Red         I
              I  no   I  yes  I  yes  I  Yellow      I
              I  yes  I  no   I  no   I  Blue        I
              I  yes  I  no   I  yes  I  Turquoise   I
              I  yes  I  yes  I  no   I  Pink        I
              I  yes  I  yes  I  yes  I  White       I
              ----------------------------------------

  Skeleton : LABEL  $FSDOT   -P-,-P-,-P-,...,-P-,-P-,-P-,W=...,H=...,
                             PL=...,DOC=...

  Where : -P- -------------> strings of bits 0 and/or 1 defining the
                             active dots of the character matrix
                             (length of string = slot width, number
                             of strings = slot height)
                             See also note 2 for triple-plane facility

          W=... -----------> character slot width = horizontal size
                             of the character matrix (default is 9,
                             and only W=9 is accepted)

          H=... -----------> character slot height = vertical size
                             of the character matrix (default is 16,
                             and only H=12 or 16 are accepted)

          PL not coded ----> default PL= of previous $FSDOT macro or
                             PL=SINGLE if first $FSDOT macro
          PL=SINGLE -------> single-plane
                             May be also coded PL=S
          PL=BLUE ---------> specific plane of a triple-plane
          PL=RED             May be also coded PL=B, PL=R and PL=G
          PL=GREEN

          DOC not coded ---> no inline documentation
          DOC=YES ---------> obtain inline documentation
          DOC=EJECT -------> obtain inline documentation on pages
1   19/07/91
                                                      $FS       8/8.

  Notes : 1. The length attribute of an eventual label is the length
             of all the data (complete DOT pattern) generated by the
             $FSDOT macro.
          2. When defining a triple-plane (PL=B, PL=R or PL=G), the
             string (-P-) of active dots can indicate the desired
             colour (used in place of bit 1) as follows
                   G = Green
                   R = Red
                   Y = Yellow
                   B = Blue
                   T = Turquoise
                   P = Pink
                   W = White
             Then, the macro will automatically set the bit 1 in the
             current requested plane if needed to generate that colour.
