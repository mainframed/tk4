1   23/09/85
                                                      INSORT    1/2.

  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * *       INCORE SORT SUBROUTINE        * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

  Purpose :    Sort in ascending or descending order (one control
  ---------    field only) an array of fixed elements (uses a
               partition-exchange sort).
               Note : the records outside of the area to sort are
                      not referenced at all.

  Calling sequence : CALL INSORT,(A,B,C),VL
  ------------------             (A,B)

         Where : A - is the array starting address (first element).

                 B - is the address of the parameters field (must
                     be halfword boundary).

                 C - is the indicator response (format FULLWORD - F
                     boundary) if supplied (optional). Value is always
                     placed in register 15 and can be :

                      0 - sort correctly executed.
                      1 - calling sequence or argument alignment error.
                      2 - key displacement negative or > 4095.
                      3 - order option error (not A or D).
                      4 - compare option error (not B or P).
                      5 - key length zero, negative , > 256 if B
                          option, or > 16 if P option.
                      6 - element length zero or negative.
                      7 - number of elements negative.
                      8 - key displ. + key length > element length.
                      9 - internal stack work area too small.
                     10 - logic error.

  Assembler macro : $INSORT A,B,C
  -----------------

         Where C is optional and may be omitted.
         Register use may be coded within parentheses.
1   23/09/85
                                                      INSORT    2/2.

  Parameters field description : (five contiguous halfwords)
  ------------------------------

  Offset + 0 - number of elements to be sorted (halfword).
         + 2 - key displacement (halfword). This is the starting
               position of the control field in the array's
               elements, assuming the first position of an element
               known as 0 (zero).
         + 4 - key length (halfword).
         + 6 - length of an element (halfword).
         + 8 - options (characters) which may be :
               + 8 - A or D (ascending or descending sort order)
               + 9 - B or P (binary or packed sort compare)

  Assembler macro : $INSORT PARM=(P1,P2,P3,P4,P5,P6)
  -----------------

         Only when building parameters field, register (0-15) use
         may be coded within parentheses.

  Examples of valid macro syntax :
  --------------------------------

         1. To generate only the call :
               ...   $INSORT A,B
               (register use may be coded within parentheses)

         2. To generate an empty parameters field :
               ...   $INSORT

         3. To generate a parameters field :
               ...   $INSORT PARM=(P1,P2,P3,P4,P5,P6)

         4. To build a parameters field :
               ...   $INSORT ,B,PARM=(P1,P2,P3,P4,P5,P6)
               (register use may be coded within parentheses)

         5. To generate a parameters field and the call :
               ...   $INSORT A,PARM=(P1,P2,P3,P4,P5,P6)
               (register use may be coded within parentheses)

         6. To build a parameters field and generate the call :
               ...   $INSORT A,B,PARM=(P1,P2,P3,P4,P5,P6)
               (register use may be coded within parentheses)
