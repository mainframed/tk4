ISRT     TITLE 'INCORE SORT SUBROUTINE.'
INSORT   START 0
         SPACE 1
* PURPOSE :    SORT IN ASCENDING OR DESCENDING ORDER (ONE CONTROL
* ---------    FIELD ONLY) AN ARRAY OF FIXED ELEMENTS (USES A
*              PARTITON-EXCHANGE SORT).
*
* CALLING SEQUENCE : CALL INSORT,(A,B,C),VL
* ------------------             (A,B)
*
*        WHERE : A - IS THE ARRAY STARTING ADDRESS (FIRST ELEMENT).
*
*                B - IS THE ADDRESS OF THE PARAMETERS FIELD (MUST
*                    BE HALFWORD BOUNDARY).
*
*                C - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F
*                    BOUNDARY) IF SUPPLIED (OPTIONAL). VALUE IS ALWAYS
*                    PLACED IN REGISTER 15 AND CAN BE :
*
*                     0 - SORT CORRECTLY EXECUTED.
*                     1 - CALLING SEQUENCE OR ARGUMENT ALIGNMENT ERROR.
*                     2 - KEY DISPLACEMENT NEGATIVE OR > 4095.
*                     3 - ORDER OPTION ERROR (NOT A OR D).
*                     4 - COMPARE OPTION ERROR (NOT B OR P).
*                     5 - KEY LENGTH ZERO, NEGATIVE , > 256 IF 'B'
*                         OPTION, OR > 16 IF 'P' OPTION.
*                     6 - ELEMENT LENGTH ZERO OR NEGATIVE.
*                     7 - NUMBER OF ELEMENTS NEGATIVE.
*                     8 - KEY DISPL. + KEY LENGTH > ELEMENT LENGTH.
*                     9 - INTERNAL STACK WORK AREA TOO SMALL.
*                    10 - LOGIC ERROR.
*
* PARAMETERS FIELD DESCRIPTION : (FIVE CONTIGUOUS HALFWORDS)
* ------------------------------
*
* OFFSET + 0 - NUMBER OF ELEMENTS TO BE SORTED (HALFWORD).
*        + 2 - KEY DISPLACEMENT (HALFWORD). THIS IS THE STARTING
*              POSITION OF THE CONTROL FIELD IN THE ARRAY'S
*              ELEMENTS, ASSUMING THE FIRST POSITION OF AN ELEMENT
*              KNOWN AS 0 (ZERO).
*        + 4 - KEY LENGTH (HALFWORD).
*        + 6 - LENGTH OF AN ELEMENT (HALFWORD).
*        + 8 - OPTIONS (CHARACTERS) WHICH MAY BE :
*              + 8 - A OR D (ASCENDING OR DESCENDING SORT ORDER)
*              + 9 - B OR P (BINARY OR PACKED SORT COMPARE)
*
* GENERAL NOTICE : NOTE THAT THE RECORDS OUTSIDE OF THE AREA TO
* ---------------- SORT ARE NOT REFERENCED AT ALL.
         EJECT
* AUTHOR :     RECEIVED FROM A. COLOMBO (AMDAHL CONSULTANT)
* --------     REVISED BY MOINIL P.A. (J.R.C. ISPRA (VA), ITALY)
         SPACE 2
INSORT  AMODE  ANY
INSORT  RMODE  ANY
         SPACE 2
        $DEFREG
NS       EQU   128                 STACK NUMBER
CLCOP    EQU   X'D5'               CLC OP. CODE
CPOP     EQU   X'F9'               CP OP. CODE
         EJECT
        $XENT  BASE=R12
         SPACE 1
*        INITIALIZATION
         SPACE 1
         XR    R3,R3
         LA    R10,MAXERR
         TM    0(R1),X'80'         CONTROL ARGUMENTS
         BO    ERR1
         TM    7(R1),X'01'
         BNZ   ERR1
         TM    4(R1),X'80'
         BO    INIT
         TM    8(R1),X'80'
         BZ    ERR1
         TM    11(R1),X'03'
         BNZ   ERR1
         L     R3,8(R1)
         LA    R3,0(R3)
INIT     L     R11,4(R1)           POINTER TO PARAMETERS FIELD
         LA    R11,0(R11)
         LTR   R11,R11
         BZ    ERR1
         USING P#,R11
         LH    R8,P#KEYDI          KEY DISPLACEMENT
         LTR   R8,R8
         BM    ERR2
         CH    R8,=H'4095'         MAX DISPLACEMENT
         BH    ERR2
         SPACE 1
*        SET ASCENDIND/DESCENDING
*        SET BINARY/PACKED (IF PACKED MAX 16 BYTES KEY)
         SPACE 1
         STH   R8,CLC+2            FIRST RECORD
         STH   R8,CLC+4            SECOND RECORD
         CLI   P#AD,C'A'           IF ASCENDING, OK
         BNE   IFD                 OTHERWISE REVERSE ORDER OF REGS
         OI    CLC+2,R1*16         REGISTER 1
         OI    CLC+4,R2*16         REGISTER 2
         B     LOOKKEY
IFD      CLI   P#AD,C'D'           IF DESCENDING, OK
         BNE   ERR3
         OI    CLC+2,R2*16         REGISTER 2
         OI    CLC+4,R1*16         REGISTER 1
LOOKKEY  LH    R8,P#KEYLE          KEY LENGTH
         LTR   R8,R8               NO ZERO OR LESS
         BNP   ERR5
         CLI   P#TYPE,C'P'         PACKED
         BNE   BINARY
         CH    R8,=H'16'           MAX CP LENGTH
         BH    ERR5
         BCTR  R8,0                -1
         STC   R8,CLC+1            SECOND OPERAND LENGTH
         MVO   CLC+1(1),CLC+1(1)   FIRST OPERAND LENGTH
         MVI   CLC,CPOP            CP INSTEAD OF CLC
         B     LOOKRCL
BINARY   CLI   P#TYPE,C'B'         BINARY
         BNE   ERR4
         CH    R8,=H'256'          MAX KEY LENGTH
         BH    ERR5
         BCTR  R8,0                -1
         STC   R8,CLC+1            TO BUILD UP CLC
         MVI   CLC,CLCOP           SET CLC
LOOKRCL  LH    R8,P#RECLN          RECORD LENGTH
         LTR   R8,R8
         BNP   ERR6                NO ZERO OR NEGATIVE
         LH    R5,P#RECNM          NUMBER OF RECORDS
         LTR   R5,R5
         BM    ERR7
         BZ    RET                 NOTHING, DONE
         LH    R2,P#KEYDI          KEY DISPLACEMENT
         AH    R2,P#KEYLE          ADD KEY LENGTH
         CH    R2,P#RECLN          > THAN RECORD LENGTH?
         BH    ERR8                YES, ERROR
         MR    R4,R8               RECORDS * LENGTH RECORD
         L     R2,0(R1)            @ 1ST RECORD            (A)
         LA    R2,0(R2)
         LTR   R2,R2
         BZ    ERR1
         ST    R2,W#RECPT          @ 1ST RECORD
         LA    R5,0(R2,R5)         @ PAST LAST RECORD
         SLR   R5,R8               @ LAST RECORD           (B)
         ST    R5,W#RECLS          SAVE @ LAST RECORD
         L     R9,=A(STARTSTE)     @ OF START OF STACK
         ST    R9,W#STKPT          SAVE @ OF STACK
         SPACE 1
*        MAIN : CHECK FOR ONLY ONE RECORD TO SORT
         SPACE 1
* REGISTERS USAGE :
*        R0  - WORK
*        R1  - @ RECORD (FOR COMPARE ROUTINE) / WORK
*        R2  - A (@ LEFTMOST RECORD IN CURRENT GROUP)
*        R3  - @ INDICATOR IF SUPPLIED (OR ZERO)
*        R4  - WORK
*        R5  - B (@ RIGHTMOST RECORD IN CURRENT GROUP)
*        R6  - I (LEFT TO RIGHT SCAN PTR)
*        R7  - J (RIGHT TO LEFT SCAN PTR)
*        R8  - RECORD LENGTH
*        R9  - STACK POINTER
*        R10 - INDICATOR VALUE (CC)
*        R11 - @ P#
*        R12 - PGM BASE
*        R13 - @ W#
*        R14 - WORK
*        R15 - WORK
         SPACE 1
SORT     CLR   R2,R5               COMPARE A AND B
         BNL   SORTUS              BIF A >= B (ONLY ONE RECORD)
         SPACE 1
*        I = A
*        J = B + RECLN (@ PAST LAST RECORD IN GROUP)
         SPACE 1
         LR    R6,R2               I = A
         LR    R7,R5               B
         ALR   R7,R8               + RECLN
         SPACE 1
*        PICK MEDIAN RECORD HERE AND SWAP WITH K(A)
*        SO THAT ORDERED INPUT IS NOT WORST CASE...
*        (((B - A)/RECLN)/2)*RECLN
         SPACE 1
         LR    R1,R5               B
         SLR   R1,R2               B - A
         SLR   R0,R0
         DR    R0,R8               B-A/RECLN
         SRL   R1,1                HALF THE RECORDS
         CH    R1,=H'4'            < 4 RECORDS
         BL    SORTL1              BIF < 4 RECORDS, SKIP MID SWAP
         MR    R0,R8               OFFSET OF THE RECORD
         ALR   R1,R2               @ OF K(MID)
         LR    R4,R1               SAVE @ K(MID)
         SPACE 1
*        SWAP K(A) & K(MID)
         SPACE 1
         LR    R0,R4               @ K(MID)                (SOURCE)
         LR    R1,R8               RECLN
         L     R14,=A(WAREC)       @ TEMP RECORD AREA      (TARGET)
         LR    R15,R8              RECLN
         MVCL  R14,R0              K(MID) TO TEMP AREA
         LR    R0,R2               @ K(A)                  (SOURCE)
         LR    R1,R8               RECLN
         LR    R14,R4              @ K(MID)                (TARGET)
         LR    R15,R8              RECLN
         MVCL  R14,R0              K(A) TO K(MID)
         L     R0,=A(WAREC)        @ TEMP RECORD AREA      (SOURCE)
         LR    R1,R8               RECLN
         LR    R14,R2              @ K(A)                  (TARGET)
         LR    R15,R8              RECLN
         MVCL  R14,R0              K(MID) TO K(A) FROM TEMP AREA
         SPACE 1
*        FIND K(I) > K(A)
         SPACE 1
SORTL1   ALR   R6,R8               I = I + RECLN
         CLR   R6,R7               I :: J
         BNL   SORTF               BIF I >= J
         LR    R1,R6               K(I)
         EX    0,CLC               COMPARE K(I) AND K(A)      <R2>
         BNH   SORTL1              BIF K(I) <= K(A)
         SPACE 1
*        FIND K(J) <= K(A)
         SPACE 1
SORTL2   SLR   R7,R8               J = J - RECLN
         CLR   R7,R6               J :: I
         BNH   SORTF               BIF J <= I
         LR    R1,R7               K(J)
         EX    0,CLC               COMPARE K(J) AND K(A)      <R2>
         BH    SORTL2              BIF K(J) > K(A)
         SPACE 1
*        HAVE K(I) > K(A) & K(J) <= K(A)
*        ALSO I < J SO ARE DIFFERENT RECORDS
*        SWAP K(I) AND K(J)
         SPACE 1
         LR    R0,R6               @ K(I)                  (SOURCE)
         LR    R1,R8               RECLN
         L     R14,=A(WAREC)       @ TEMP RECORD AREA      (TARGET)
         LR    R15,R8              RECLN
         MVCL  R14,R0              K(I) TO TEMP AREA
         LR    R0,R7               @ K(J)                  (SOURCE)
         LR    R1,R8               RECLN
         LR    R14,R6              @ K(I)                  (TARGET)
         LR    R15,R8              RECLN
         MVCL  R14,R0              K(J) TO K(I)
         L     R0,=A(WAREC)        @ TEMP RECORD AREA      (SOURCE)
         LR    R1,R8               RECLN
         LR    R14,R7              @ K(J)                  (TARGET)
         LR    R15,R8              RECLN
         MVCL  R14,R0              K(I) TO K(J) FROM TEMP AREA
         B     SORTL1              AND CONTINUE
         SPACE 1
*        UNABLE TO FIND K(I) > K(A) AND K(J) <= K(A) FOR I < J
*        (I = J HERE AND I = J MAY BE > B)
*        SO SWAP K(A) WITH K(J-1)
         SPACE 1
SORTF    LR    R4,R7               @ K(J)
         SLR   R4,R8               @ K(J-1)
         LR    R0,R4               @ K(J-1)                (SOURCE)
         LR    R1,R8               RECLN
         L     R14,=A(WAREC)       @ TEMP RECORD AREA      (TARGET)
         LR    R15,R8              RECLN
         MVCL  R14,R0              K(J-1) TO TEMP AREA
         LR    R0,R2               @ K(A)                  (SOURCE)
         LR    R1,R8               RECLN
         LR    R14,R4              @ K(J-1)                (TARGET)
         LR    R15,R8              RECLN
         MVCL  R14,R0              K(A) TO K(J-1)
         L     R0,=A(WAREC)        @ TEMP RECORD AREA      (SOURCE)
         LR    R1,R8               RECLN
         LR    R14,R2              @ K(A)                  (TARGET)
         LR    R15,R8              RECLN
         MVCL  R14,R0              K(J-1) TO K(A) FROM TEMP AREA
         SPACE 1
*        NOW SORT (A, J-2) AND (J, B)
*        (R2, R4-R8) AND (R7, R5)
*        (SOME MIGHT BE NULL - SORT SHORTEST FIRST, STACK OTHER)
         SPACE 1
         SLR   R4,R8               END ADDR OF GRP 1
         LR    R0,R4
         SLR   R0,R2               LENGTH OF GRP 1
         LR    R1,R5
         SLR   R1,R7               LENGTH OF GRP 2
         CLR   R0,R1               COMPARE GRP LENGTHS
         BH    SORTGRP             BIF GRP 1 > GRP 2 (DO GRP 2 FIRST)
         XR    R2,R7               SWAP GRP'S 1 AND 2
         XR    R7,R2
         XR    R2,R7
         XR    R4,R5
         XR    R5,R4
         XR    R4,R5
         SPACE 1
*        STACK GROUP 1 TO BE SORTED LATER
         SPACE 1
SORTGRP  CL    R9,=A(ENDSTE)       ROOM FOR ANOTHER STACK ENTRY
         BH    ERR9                BIF WORKAREA TOO SMALL
         ST    R2,0(,R9)           @ 1ST RECORD IN GROUP
         ST    R4,4(,R9)           @ LAST RECORD IN GROUP
         LA    R9,8(,R9)           PUSH STACK
         SPACE 1
*        SET UP TO SORT GROUP 2 NOW
         SPACE 1
         LR    R2,R7               @ 1ST REC IN GRP 2 (R5 ALREADY SET)
         B     SORT
         SPACE 1
*        REMOVE STACK ENTRY
         SPACE 1
SORTUS   SH    R9,=H'8'
         CL    R9,W#STKPT
         BL    SRTCK               BIF STACK EMPTY, DONE
         L     R2,0(,R9)           @ 1ST RECORD OF GROUP
         L     R5,4(,R9)           @ LAST RECORD IN GROUP
         B     SORT
         SPACE 1
*        SRTCK : CHECK THAT RESULTS IS ACTUALLY SORTED
         SPACE 1
SRTCK    L     R2,W#RECPT          @ 1ST RECORD
         L     R5,W#RECLS          @ LAST RECORD
         SLR   R2,R8               @ RECORD - 1
SRTCKL   ALR   R2,R8               @ NEXT RECORD
         LR    R1,R2
         ALR   R1,R8               @ NEXT RECORD (IF ANY)
         CLR   R1,R5               ANY NEXT RECORD?
         BH    RET                 BIF NO NEXT, ALL DONE
         EX    0,CLC               COMPARE TWO RECORDS, CHECK SEQ
         BNL   SRTCKL              BIF NOT SEQ ERROR
         B     ERR10               LOGIC ERROR
         SPACE 1
ERR1     BCTR  R10,0     CALL SEQUENCE OR ARGUMENT ALIGNMENT ERROR.
ERR2     BCTR  R10,0     KEY DISPLACEMENT NEGATIVE OR > 4095.
ERR3     BCTR  R10,0     ORDER OPTION ERROR (NOT A OR D).
ERR4     BCTR  R10,0     COMPARE OPTION ERROR (NOT B OR P).
ERR5     BCTR  R10,0     KEY LENGTH <=0, > 256 IF B, OR > 16 IF P.
ERR6     BCTR  R10,0     ELEMENT LENGTH ZERO OR NEGATIVE.
ERR7     BCTR  R10,0     NUMBER OF ELEMENTS NEGATIVE.
ERR8     BCTR  R10,0     KEY DISPL. + KEY LENGTH > ELEMENT LENGTH.
ERR9     BCTR  R10,0     INTERNAL STACK WORK AREA TOO SMALL.
ERR10    BCTR  R10,0     LOGIC ERROR.
         SPACE 1
MAXERR   EQU   ((*-ERR1)/2)+1
         SPACE 1
         B     SETCC
RET      XR    R10,R10             RETURN CODE ZERO
SETCC    LTR   R3,R3
         BZ    EXIT
         ST    R10,0(R3)           STORE CC IN INDICATOR
EXIT    $XRET  CC=(R10)
         SPACE 1
CLC      CLC   0(*-*,R1),0(R2)     COMPARE TWO ELEMENTS <<EXECUTED>>
         EJECT
*        CONSTANTS AND WORK POINTERS
         SPACE 1
W#STKPT  DC    A(0)                @ STACK
W#RECPT  DC    A(0)                @ FIRST RECORD IN RECORD AREA
W#RECLS  DC    A(0)                @ LAST RECORD IN RECORD AREA
         SPACE 2
*        LITERAL POOL
         SPACE 1
         LTORG
         SPACE 2
*        WORK AREAS.
         SPACE 1
STARTSTE DC    (NS)D'0'            STACK
ENDSTE   EQU   *-8
WAREC    DC    (NS)D'0'            WORK AREA FOR RECORD
         SPACE 2
*        DATA DESCRIPTIONS (DSECTS)
         SPACE 1
P#       DSECT ,                   SORT PARAMETER LIST
         SPACE 1
P#RECNM  DC    H'0'                NUMBER OF RECORDS      (>= 0)
P#KEYDI  DC    H'0'                KEY DISPLACEMENT
P#KEYLE  DC    H'0'                KEY LENGTH
P#RECLN  DC    H'0'                LENGTH OF EACH RECORD  (> 0)
P#AD     DC    C' '                A/D
P#TYPE   DC    C' '                B/P
         SPACE 2
         END
