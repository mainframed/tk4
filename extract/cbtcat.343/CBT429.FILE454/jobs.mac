A20      TITLE 'PGM TO SHOW EXEC JOBS AND STC'                     -EU-
TSO020A  START 0                                                   -EU-
         SPACE 1                                                   -EU-
*        DATA SET TSO020SU   AT LEVEL 001 AS OF 07/06/77
*        DATA SET TSO020SU   AT LEVEL 001 AS OF 03/09/77
*        DATA SET TSO020SU   AT LEVEL 001 AS OF 02/12/77
*
* THIS LITTLE GEM WILL SCURRY AROUNT THE ASCBS AND CSCBS TO DISPLAY
*        THE JOBS RUNNING IN THE SYSTEM (MODIFIED FOR SUPV I AND II
*        S.U.) THROUGH STEALTH, THIS CODE IS NON PRIVLEDGED (ASSUMING
*        THAT SQA IS NOT FETCH PROTECTED.
* THIS WORKS FOR OS/VS2 REL 3.7 AND REQUIRES MACROS FROM SYS1.MODGEN
*
* KEN TRUE, FAIRCHILD CAMERA AND INSTRUMENT                22OCT76
*
* MODIFIED TO WORK AS TSO COMMAND OR OPER STC     K TRUE   27MAY77
* ADD SWAP STATUS AND REASON CODE FROM OUCB         "        "
*
* MODIFIED TO OPERATE FOR MVS/XA 2.1 BY MOINIL P.A.        06AUG86 -EU-
* MODIFIED TO OPERATE WITH "PUTLINE" BY MOINIL P.A.        13APR94 -EU-
         SPACE 1                                                   -EU-
* CBT ORIGIN : EXTRACTED FROM FILE 352.                            -EU-
         SPACE 1                                                   -EU-
TSO020A  AMODE 24                                                  -EU-
TSO020A  RMODE 24                                                  -EU-
         EJECT ,                                                   -EU-
        $DEFREG ,                                                  -EU-
        $XENT  BASE=R12,LV=AREAL,TYPE=RENT                         -EU-
         LR    R11,R13                                             -EU-
         USING AREA,R11                                            -EU-
         LR    R2,R1               GET ENTRY REGISTER              -EU-
        $TSWXA 31,EXPAND=ONLY                                      -EU-
         MVI   BUFFER,C' '         CLEAR OUT BUFFER
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
         MVC   MSGTSU(31),=CL31'..XXXXXX JOBS XXXXXX INITIATORS'   -EU-
        $TEW$EC REG=R2,MSG=PUTMSG,ERR=SETRC,PUT=PUTLNE             -EU-
         XR    R2,R2               COUNTER FOR # INITIATORS
         XR    R3,R3               COUNTER FOR # JOBS/STC
         L     R7,CVTPTR           (R7)=ADDR CVT
         USING CVTMAP,R7                                           -EU-
         L     R9,CVTOPCTP         (R9) =ADDR (SRM'S RMCT)
         ST    R9,RMCTPTR            WHICH IS SAVED FOR LATER
         L     R9,CVTASVT          (R9)= ADDR ASVT
         DROP  R7
         USING ASVT,R9
         L     R5,ASVTMAXU         (R5)=MAX NUMB OF ASCB ENTRIES
         LA    R5,2(R5)              +2 SO WE CAN SCAN ENTIRE ASVT..
         LA    R9,ASVTFRST-4       (R9)= ADDR-4 OF FIRST ASCB ENTRY
         DROP  R9
         LA    R0,L'HEADING
         LA    R1,HEADING
         BAS   R14,PUTLNE          WRITE OUT HEADING
         B     *+L'*(R15)          HOW COMPLETE?                   -EU-
         B     NEXTONE             +0 - GO GET ASCB                -EU-
         B     SETRC               +4 - INVALID OR ERROR           -EU-
         USING ASCB,R8
         SPACE 1
*------- LOOP THROUGH ALL ASCBS
         SPACE 1
LOOP1    L     R10,ASCBCSCB        LOAD CSCB ADDR
         USING CSCB,R10
         TM    CHTRKID,CHINITID    IS IT AN INIT?
         BNO   TESTJOB             NO-> ..GO CHECK FOR JOB
         A     R2,=F'1'            YES-> INCR COUNT OF INITS
         B     NEXTONE             GO GET ANOTHER
TESTJOB  TM    CHTRKID,CHJOBID     IS IT A STC?
         BNO   NEXTONE             NOPE-> MUST BE TSO..GO GET ANOTHER
         OI    SWITCH,OUTEX        SAY WE FOUND ONE
         MVC   JOBNAME,CHCLS       MOVE IN JOBNAME FROM CSCB
         MVC   PROCNAME,CHKEY      MOVE IN PROCNAME FROM CSCB
         MVC   STEPNAME,CHPROCSN   MOVE IN STEPNAME FROM CSCB
         DROP  R10
         A     R3,=F'1'            BUMP COUNT OF JOBS/STC
         BAS   R6,COMPTIME         GO GET STEP/CPU TIME
*                                    AND MEMORY STATUS
         LA    R0,L'BUFFER
         LA    R1,BUFFER
         BAS   R14,PUTLNE          SHOVEL IT OUT
         B     *+L'*(R15)          HOW COMPLETE?                   -EU-
         B     *+L'*+4             +0 - CONTINUE                   -EU-
         B     SETRC               +4 - INVALID OR ERROR           -EU-
         MVI   BUFFER,C' '         CLEAR IT OUT
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
NEXTONE  BCT   R5,DOIT             CHECK COUNT
         B     DOJOBS              NO MORE..SPLIT
DOIT     LA    R9,4(0,R9)          INCR INTO ASVT
         L     R8,0(0,R9)          LOAD ASCB ADDR
         LTR   R8,R8               END OF ASCBS?
         BZ    DOJOBS              YES->EXIT
         TM    0(R9),X'80'         ASID ASSIGNED?
         BO    NEXTONE             NO-> TRY AGAIN.
         B     LOOP1               YES->SEE IF WE LIKE IT
         SPACE 1
*------- NOW WE HAVE DISPOSED OF THE STC IN THE SYSTEM,
*        WE MUST GO BACK THRU THE ASCBS AND LOOK FOR 'REAL' JOBS...
         SPACE 1
DOJOBS   L     R7,CVTPTR           (R7)=ADDR CVT
         USING CVTMAP,R7                                           -EU-
         L     R9,CVTASVT          (R9)= ADDR ASVT
         DROP  R7
         USING ASVT,R9
         L     R5,ASVTMAXU         (R5)=MAX NUMB OF ASCB ENTRIES
         LA    R5,2(R5)              +2 SO WE CAN SCAN ENTIRE ASVT..
         LA    R9,ASVTFRST-4       (R9)= ADDR-4 OF FIRST ASCB ENTRY
         DROP  R9
         B     NEXTPLS             GO GET ASCB
         SPACE 1
*------- LOOP THROUGH ALL ASCBS
         SPACE 1
LOOP2    L     R10,ASCBCSCB        LOAD CSCB ADDR
         USING CSCB,R10
         TM    CHTRKID,CHINITID    IS IT AN INIT?
         BNO   NEXTPLS             ->NO GO GET ANOTHER ASCB
         DROP  R10
         L     R4,ASCBJBNI         GET PTR TO JOBNAME
         LTR   R4,R4               IS IT A JOB?
         BZ    NEXTPLS             NOPE->DRY INIT..GO GET ANOTHER
         SPACE 1
*------- HERE WE GET  SNEAKY..A HONEST TO GOD JOB'S CSCB IS NOT POINTED
*        TO BY ASCBCSCB, BUT INSTEAD, ASCBJBNI (JOBNAME) REALLY POINTS
*        TO THE  CHKEY IN THE CSCB FOR THE JOB. WE'LL GET OUR GOODIES
*        IN THE INDIRECT ROUTE ...
         SPACE 1
         USING CSCB,R4
         S     R4,=F'8'            ADJUST FOR SNEAKINESS..
         MVC   JOBNAME,CHKEY       MOVE IN JOBNAME
         MVC   PROCNAME,CHSTEP     MOVE IN STEPNAME INVOK PROC
         MVC   STEPNAME,CHPROCSN   MOVE IN STEPNAME OF PROC
         DROP  R4
         USING CSCB,R10            PUT BACK ADDRESSABILITY TO
         A     R3,=F'1'            BUMP COUNT OF JOBS/STC
         BAS   R6,COMPTIME         GO GET STEP/CPU TIME
*                                    AND MEMORY STATUS
         LA    R0,L'BUFFER
         LA    R1,BUFFER
         BAS   R14,PUTLNE          SHOVEL IT OUT
         B     *+L'*(R15)          HOW COMPLETE?                   -EU-
         B     *+L'*+4             +0 - CONTINUE                   -EU-
         B     SETRC               +4 - INVALID OR ERROR           -EU-
         MVI   BUFFER,C' '         CLEAR IT OUT
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
NEXTPLS  BCT   R5,DOIT1            CHECK COUNT
         B     CHKFIN              NO MORE..SPLIT
DOIT1    LA    R9,4(0,R9)          INCR INTO ASVT
         L     R8,0(0,R9)          LOAD ASCB ADDR
         LTR   R8,R8               END OF ASCBS?
         BZ    CHKFIN              YES->EXIT
         TM    0(R9),X'80'         ASID ASSIGNED?
         BO    NEXTPLS             NO-> TRY AGAIN.
         B     LOOP2               YES->SEE IF WE LIKE IT
CHKFIN   CLC   BUFFER(8),=CL8' '   ANYTHING TO WRITE?
         BE    CLEANUP             NO-> SPLIT
         LA    R0,L'BUFFER
         LA    R1,BUFFER
         BAS   R14,PUTLNE          SHOVEL IT OUT
         B     *+L'*(R15)          HOW COMPLETE?                   -EU-
         B     CLEANUP             +0 - CONTINUE                   -EU-
         B     SETRC               +4 - INVALID OR ERROR           -EU-
CLEANUP  TM    SWITCH,OUTEX        DID WE POKE ANYTHING
         BZ    NOOUTPUT            NO..GRIPE AND SPLIT
         CVD   R2,WRKD             CONVERT TO BIN
         MVC   NINIT,=X'402020202120' MOVE IN THE PATTERN
         ED    NINIT,WRKD+5        EDIT THE PATTERN
         CVD   R3,WRKD             CONVERT TO BIN
         MVC   NJOBS,=X'402020202120' MOVE IN THE PATTERN
         ED    NJOBS,WRKD+5        EDIT THE PATTERN
         LA    R0,L'MSGTSU
         LA    R1,MSGTSU
         B     SHOWIT                                              -EU-
NOOUTPUT LA    R0,L'GRIPE
         LA    R1,GRIPE
SHOWIT   BAS   R14,PUTLNE          SHOVEL IT OUT
         B     *+L'*(R15)          HOW COMPLETE?                   -EU-
         B     *+L'*+4             +0 - RETURN                     -EU-
*        ...                       +4 - INVALID OR ERROR           -EU-
         SPACE 1                                                   -EU-
*------- EXIT TSO                                                  -EU-
         SPACE 1                                                   -EU-
SETRC    LA    R15,8               SET RC=8 <===================== -EU-
        $TSWXA 24,EXPAND=ONLY                                      -EU-
         CH    R15,=H'16'          IS RETURN CODE HIGHER THAN 16?  -EU-
         BNH   *+L'*+2             NO, LET'S GO                    -EU-
         XR    R15,R15             YES, ZERO OUT REGISTER 15       -EU-
        $XRET  CC=(R15),LV=AREAL,TYPE=RENT                         -EU-
         EJECT
*------- LOCAL SUBROUTINE TO CALCULATE JOB TIME AND CPU TIME,
*        AND GEN SWAP REASON CODES/MEMORY STATUS.
*        ENTER WITH BAS R6,COMPTIME (ALL REGISTERS PRESERVED)
         SPACE 1
*------- COMPUTE ELAPSED TRANSACTION TIME (JOB TIME FOR BATCH)
         SPACE 1
COMPTIME STM   R4,R7,SAVEREGS      SAVE WORK REGISTERS
         L     R4,RMCTPTR          POINTER TO THE RMCT.
         L     R4,X'7C'(,R4)       PICK UP TIME OF DAY FROM RMCT. (SU)
         L     R5,ASCBOUCB         GET ADDR OF OUCB FOR USER
         L     R5,ASCBOUCB         GET ADDR OF OUCB FOR USER
         USING OUCB,R5                                             -EU-
         S     R4,OUCBTMO          SUBTRACT TRANSACTION START. (SU)-EU-
         DROP  R5                                                  -EU-
         SRDL  R4,32               MOVE INTO R5 FOR DIVIDE.
         D     R4,=F'1024'         CONVERT TO SECONDS.
         XR    R4,R4               IGNORE REMAINDER.
         D     R4,=F'3600'         DIVIDE TO GET HOURS.
         CVD   R5,WRKD             CONVERT HOURS -
         UNPK  JOBHH,WRKD+6(2)       - TO PRINTABLE FORMAT.
         OI    JOBHH+1,X'F0'       FIXUP SIGN BYTE.
         MVI   JOBHH+2,C':'        SEPARATOR.
         SRDL  R4,32               MOVE REMAINDER OVER FOR DIVIDE.
         D     R4,=F'60'           GET MINUTES.
         CVD   R5,WRKD             CONVERT MINUTES -
         UNPK  JOBMM(2),WRKD+6(2)    - TO PRINTABLE FORMAT.
         OI    JOBMM+1,X'F0'       FIXUP SIGN BYTE.
         MVI   JOBMM+2,C':'        SEPARATOR.
         CVD   R4,WRKD             REMAINDER IS SECONDS.
         UNPK  JOBSS(2),WRKD+6(2)  CONVERT SEC TO PRINTABLE FORMAT.
         OI    JOBSS+1,X'F0'       FIXUP SIGN.
         SPACE 1
*------- COMPUTE TOTAL CPU TIME USED IN THE CURRENT STEP.
         SPACE 1
         LM    R4,R5,ASCBEJST      LOAD ASCBEJST (CPU TASK TIME).
         SRDL  R4,12               CONVERT TO MICRO-SECONDS.
         LM    R6,R7,ASCBSRBT      LOAD ASCBSRBT (CPU SRB TIME).
         SRDL  R6,12               CONVERT TO MICROSECONDS.
         AR    R5,R7               TOTAL CPU TIME (LOW ORDER).
         BNO   CPULBL1             BRANCH IF NO OVERFLOW ON ADD.
         A     R4,=F'1'            OTHERWISE, ADD 1 TO HIGH ORDER.
CPULBL1  AR    R4,R6               TOTAL CPU TIME (HIGH ORDER).
         D     R4,=F'100'          DIVIDE TO GET SECONDS.
         LTR   R5,R5               CHK TO SEE IF ANYTHING IS THERE
         BNM   CPULBL2             BRANCH IF RESULT MAKES SENSE.
         LA    R5,0                OTHERWISE, SET THE VALUE TO ZERO.
CPULBL2  CVD   R5,WRKD             *
         MVC   CPUTIME,=X'20202021204B2020' *
         ED    CPUTIME-1(9),WRKD+3 *
         SPACE 1
*------- SWAP  REASON CODE (R8=ASCB,R7=OUCB,R4-6=WORK)
         SPACE 1
         L     R7,ASCBOUCB         GET ADDR OF OUCB
         USING OUCB,R7
         XR    R4,R4               PREPARE FOR IC INSTRUCTION.    V2M0
         IC    R4,OUCBSRC          LOAD SU7 SWAP REASON CODE.     V2M0
         SLL   R4,2                MULTIPLY BY FOUR FOR OFFSET    V2M0
         LA    R4,SRCTABLE(R4)     POINT TO CORRECT ENTRY.        V2M0
         MVC   MEMSTAT2,0(R4)      MOVE IN SWAP REASON CODE.      V2M0
         SPACE 1
*------- FIND  MEMORY POSITION (R8=ASCB,R7=OUCB,R4-6=WORK)
         SPACE 1
         MVC   MEMSTAT1,=CL2'IN'   DEFAULT POSITION IS SWAPPED-IN.V2M0
         TM    OUCBSFL,OUCBNSW     SEE IF NON-SWAPPABLE MEMORY.   V2M0
         BZ    QLCLBL1C            BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'NS'   MOVE IN NON-SWAPPABLE INDIC.   V2M0
         B     QLCEND              FINISHED FOR THIS MEMORY.
QLCLBL1C TM    OUCBSFL,OUCBPVL     SEE IF PRIVILEDGED STATUS.     V2M0
         BZ    QLCLBL1             BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'PR'   MOVE IN PRIVILEDGED INDICATION.V2M0
*                                  BUT CONTINUE IN CASE SWAPPED-OUT.
QLCLBL1  TM    OUCBQFL,OUCBOFF     TEST FOR WAIT QUEUE.           V2M0
         BZ    QLCLBL2             BRANCH IF NOT.
         MVC   MEMSTAT1,=C'WT'     INDICATE WAIT STATUS.          V2M0
         B     QLCEND              FINISHED FOR THIS MEMORY.      V2M0
QLCLBL2  TM    OUCBQFL,OUCBOUT     TEST FOR OUT QUEUE.            V2M0
         BZ    QLCLBL3             BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'S '   INDICATE OUT STATUS.           V2M0
         B     QLCEND              FINISHED FOR THIS MEMORY.
QLCLBL3  TM    OUCBQFL,X'E0'       CHECK MISCELLANEOUS BITS.      V2M0
         BZ    QLCEND              ASSUME MEMORY IS SWAPPED-IN.
         MVC   MEMSTAT1,=CL2'<>'   INDICATE TRANSITIONING STATUS.
QLCEND   LM    R4,R7,SAVEREGS      RESTORE REGISTERS
         BR    R6                  AND RETURN..
         DROP  R7,R8,R10,R11                                       -EU-
         EJECT
*=====================================================================*
*        CONSTANTS                                                    *
*=====================================================================*
         SPACE 1
*------- SWAP REASON CODES - FOUR BYTES PER ENTRY :
*                  CODE  DESCRIPTION
*                  ----  ----------------------------------------------
SRCTABLE DC    CL4'    '
         DC    CL4'TPUT' TERMINAL OUTPUT WAIT SWAP-OUT.
         DC    CL4'TGET' TERMINAL INPUT WAIT SWAP-OUT.
         DC    CL4'LONG' LONG WAIT CAUSED SWAP-OUT.
         DC    CL4'PGS<' AUXILIARY STORAGE (PAGING SPACE) SHORTAGE
*                        SWAP-OUT.
         DC    CL4'RSS<' REAL STORAGE PAGEABLE POOL SHORTAGE SWAP-OUT.
         DC    CL4'WAIT' MSO DETECTED WAIT SWAP-OUT.
         DC    CL4'RQSW' REQSWAP SYSEVENT CAUSED SWAP-OUT.
         DC    CL4'DENQ' CAP ENQ EXCHANGE SWAP-OUT.
         DC    CL4'EXCH' CAP EXCHANGE SWAP BASED UPON RECOMMENDATION
*                        VALUES.
         DC    CL4'SWAP' CAP UNILATERAL SWAP-OUT.
         SPACE 1
*.....................................................................*
*        MESSAGES                                                     *
*.....................................................................*
         SPACE 1
GRIPE    DC    C'**NO INITIATORS OR JOBS RUNNING**'
*                XXXXXXXX XXXXXXXX XXXXXXXX XX XXXX XX:XX:XX NNNNN.NN
HEADING  DC    C'JOBNAME  STEPNAME PROCSTEP STATUS  JOB-TIME STEP-CPU SX
               EC '
         EJECT
*.....................................................................*
*        LITERAL POOL                                                 *
*.....................................................................*
         SPACE 1
         LTORG
         EJECT
*=====================================================================*
*        WORK-AREAS                                                   *
*=====================================================================*
         SPACE 1                                                   -EU-
AREA     DSECT                     WORK-AREAS DESCRIPTION          -EU-
         DS    18F                 LOCAL SAVE AREA                 -EU-
         SPACE 1
*.....................................................................*
*        VARIABLES AREA                                               *
*.....................................................................*
         SPACE 1
WRKD     DS    D
RMCTPTR  DS    F
SAVEREGS DS    4F
SWITCH   DS    XL1
OUTEX    EQU   X'80'               OUTPUT EXISTS..                 -EU-
        $TEW$WA ,                                                  -EU-
         SPACE 1
*.....................................................................*
*        MESSAGE AREA                                                 *
*.....................................................................*
         SPACE 1
         DS    0F
BUFFER   DS    0CL72                                               -EU-
JOBNAME  DS    CL8                 JOBNAME
         DS    CL1                 FILLER
PROCNAME DS    CL8                 STEPNAME  OR STEPNAME INVOKING PROC
         DS    CL1
STEPNAME DS    CL8                 STEPNAME FOR PROCS
         DS    CL1
MEMSTAT1 DS    CL2
         DS    CL1
MEMSTAT2 DS    CL4                 MEMORY STATUS = SWAPPED NS
         DS    CL1
JOBHH    DS    CL2                 FOR JOB  TIME HH:MM:SS
         DS    CL1
JOBMM    DS    CL2
         DS    CL1
JOBSS    DS    CL2
         DS    CL1
CPUTIME  DS    CL8                 FOR CPUTIME NNNNN.NN SECONDS
         DS    CL28                                                -EU-
MSGTSU   DS    0CL31                                               -EU-
         DS    CL2                                                 -EU-
NJOBS    DS    CL6
         DS    CL6                                                 -EU-
NINIT    DS    CL6
         DS    CL11                                                -EU-
         SPACE 1
AREAL    EQU   (((*-AREA)+7)/8)*8  WORK-AREAS LENGTH               -EU-
         EJECT
*=====================================================================*
*        SYSTEM DSECT'S                                               *
*=====================================================================*
         SPACE 1
         PRINT NOGEN                                               -EU-
        $TEW$DS CVT=YES                                            -EU-
CSCB     DSECT
         IEECHAIN
         IHAASCB
         IHAASVT
         IRAOUCB                                                   -EU-
         SPACE 1                                                   -EU-
         END
