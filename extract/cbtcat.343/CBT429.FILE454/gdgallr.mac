GDGA     TITLE 'GDGALLR -- GDG DYNAMIC ALLOCATION ROUTINE.'
GDGALLR  START 0
         SPACE 1
* PURPOSE :    THIS IS A ROUTINE WHICH DYNAMICALLY ALLOCATES A
* ---------    GENERATION DATA GROUP MEMBER EXPRESSED WITH THE
*              RELATIVE GENERATION NUMBER TO THE PROVIDED DDNAME
*              AND DSNAME (THE DATA-SET IS ALLOCATED WITH DISP=SHR).
*              CALLING SEQUENCE : CALL GDGALLR,(A,B,C),VL
*                                              (A,B)
*              WHERE : A - IS THE ADDRESS OF THE DDNAME (FORMAT CL8).
*                      B - IS THE ADDRESS OF THE GDG-DSNAME (FORMAT
*                          CL54). I.E. : ZULU.TEST.DATA(+0)
*                      C - RECEIVES THE RETURN CODE (FORMAT FULLWORD -
*                          F BOUNDARY) IF SUPPLIED (OPTIONAL).
*              AFTER THE CALL, THE RETURN CODE (REGISTER R15) WILL
*              CONTAIN ONE OF THE FOLLOWING VALUES :
*                     0 - DATA-SET SUCCESSFULLY ALLOCATED
*                     4 - DDNAME MISSING OR INVALID
*                     8 - DSNAME MISSING OR INVALID
*                    12 - DSNAME IS NOT GDG FORMAT
*                    16 - DATA-SET IS NOT CATALOGUED
*                    20 - FREE FILE(DDNAME) HAS FAILED
*                    24 - DATA-SET ALLOCATION FAILED
* ORIGIN :     EXTRACTED FROM TAPE CBT 90 MAY, FILE 270.
* --------     ADAPTED BY MOINIL P.A.
*              ATTRIBUTES : RE-ENTERABLE
         SPACE 1
* ASSIGNMENT OF REGISTERS :
* =========================
*        REGISTER  USAGE
*        --------  -----------------------------------------------
*               0  AT EXIT, VALUE IS ZERO, UNLESS WHEN
*                  R15 = 16 - CATALOG RETURN CODE
*                  R15 = 20 - FREE ERROR/INFO CODES
*                  R15 = 24 - ALLOCATE ERROR/INFO CODES
*               1  AT ENTRY, ADDRESS OF PARAMETER LIST / WORK /
*                  AT EXIT, ADDRESS OF MESSAGE TEXT PRECEEDED BY
*                  A ONE BYTE MESSAGE TEXT LENGTH
*          2 -  5  WORK REGISTERS
*          6 -  8  NOT USED
*               9  ADDRESS (IF ANY) TO STORE RETURN CODE
*              10  RETURN CODE VALUE
*              11  ADDRESS OF WORK AREA
*              12  BASE REGISTER
*              13  ADDRESS OF SAVE AREA
*              14  RETURN ADDRESS
*              15  ENTRY POINT ADDRESS / RETURN CODE
         EJECT
        $DEFREG
        $XENT  BASE=R12,LV=WKLEN,TYPE=RENT
         LR    R11,R13
         USING WKAREA,R11
         EJECT
*------- GET PARAMETERS FIELDS ADDRESSES
         SPACE 1
         XR    R9,R9
         LA    R10,MAXERR
         L     R2,0(R1)            GET DDNAME ADDRESS
         LTR   R2,R2
         BZ    EXIT04
         BM    EXIT08
         L     R3,4(R1)            GET DSNAME ADDRESS
         LTR   R3,R3
         BZ    EXIT08
         BM    *+L'*+4
         L     R9,8(R1)            GET RC ADDRESS
         SPACE 1
*------- SET THE FOLLOWING DATA FIELDS :
*        INDDNME  ===> DDNAME PASSED TO THIS ROUTINE
*        INDSN    ===> DSNAME PASSED TO THIS ROUTINE
*        FREEUT1A ===> BINARY LENGTH OF DDNAME
*        FREEUT1B ===> DDNAME PASSED TO THIS ROUTINE
*        DDAUNT1A ===> BINARY LENGTH OF DDNAME
*        DDAUNT1B ===> DDNAME PASSED TO THIS ROUTINE
         SPACE 1
         CLI   0(R2),C' '
         BE    EXIT04
         CLI   0(R3),C' '
         BE    EXIT08
         MVC   INDDNME(L'INDDNME),0(R2)
         MVC   INDSN(L'INDSN),0(R3)
         LA    R2,INDDNME+L'INDDNME-1
         LA    R1,L'INDDNME
         CLI   0(R2),C' '
         BNE   *+L'*+10
         BCTR  R2,0
         BCT   R1,*-10
         B     EXIT04
         STCM  R1,B'0011',FREEUT1A
         MVC   DDAUNT1A,FREEUT1A
         MVC   FREEUT1B,INDDNME
         MVC   DDAUNT1B,FREEUT1B
         LA    R2,INDSN+L'INDSN-1
         LA    R1,L'INDSN
         CLI   0(R2),C' '
         BNE   *+L'*+10
         BCTR  R2,0
         BCT   R1,*-10
         B     EXIT08
         CLI   0(R2),C')'          CHECK GDG DSNAME
         BNE   EXIT12
         BCTR  R2,0
         BCT   R1,*+L'*+4
         B     EXIT12
         CLI   0(R2),C'0'
         BL    EXIT12
         BE    CHKNX
         CLI   0(R2),C'9'
         BH    EXIT12
CHKNX    BCTR  R2,0
         BCT   R1,*+L'*+4
         B     EXIT12
         CLI   0(R2),C'0'
         BL    *+L'*+12
         CLI   0(R2),C'9'
         BNH   CHKNX
         B     EXIT12
         CLI   0(R2),C'+'
         BE    *+L'*+8
         CLI   0(R2),C'-'
         BNE   *+L'*+10
         BCTR  R2,0
         BCT   R1,*+L'*+4
         B     EXIT12
         CLI   0(R2),C'('
         BNE   EXIT12
         SPACE 1
*------- RETRIEVE TRUE GDG NAME
         SPACE 1
         MVC   CAMLIST(CAMLNGH),CAMSKEL
         LA    R1,INDSN
         ST    R1,CAMLIST+4
         LA    R1,LOCAREA
         ST    R1,CAMLIST+12
         XC    LOCAREA(256),LOCAREA
         XC    LOCAREA+256(L'LOCAREA-256),LOCAREA+256
        LOCATE CAMLIST
         LTR   R0,R15              TEST RC=0 ?
         BNZ   EXIT16              IF NOT ZERO, ERROR
         SPACE 1
*------- GENERATE THE FOLLOWING DATA FIELDS :
*        DSNLEN   ===> LENGTH OF DSN WITH ABSOLUTE GEN NUMBER
*        DSNME    ===> DSN WITH ABSOLUTE GENERATION NUMBER
         SPACE 1
         MVC   DSNME,INDSN
         LA    R2,DSNME+L'DSNME-1
         LA    R1,L'DSNME
         CLI   0(R2),C' '
         BNE   *+L'*+10
         BCTR  R2,0
         BCT   R1,*-10
         B     EXIT08
         STCM  R1,B'0011',DSNLEN
         EJECT
*------- DYNAMIC ALLOCATION FIRST ATTEMPTS TO FREE THE GIVEN DDNAME.
*        IF THE DDNAME IS SUCCESSFULLY FREED, THEN IT EXECUTES THE
*        DYNAMIC ALLOCATION (MACRO DYNALLOC).
*        HOWEVER, IF THE DDNAME IS NOT SUCCESSFULLY FREED, IT CHECKS
*        FOR ERROR REASON CODE 0438 (DDNAME NOT FOUND). IF THE ERROR
*        REASON CODE IS 0438, THEN IT EXECUTES THE DYNAMIC ALLOCATION
*        (MACRO DYNALLOC), ELSE IT EXITS WITH ERROR.
         SPACE 1
         LA    R2,FREEPARM
         USING S99RBP,R2
         LA    R3,FREERB
         ST    R3,S99RBPTR
         OI    S99RBPTR,S99RBPND
         USING S99RB,R3
         XC    S99RB(S99RBEND-S99RB),S99RB
         MVI   S99RBLN,S99RBEND-S99RB
         MVI   S99VERB,S99VRBUN    UNALLOCATION
         MVI   S99FLG11,S99NOMNT
         LA    R4,FREETUPL
         ST    R4,S99TXTPP
         USING S99TUPL,R4
         LA    R5,FREEUNT1
         ST    R5,S99TUPTR
         USING S99TUNIT,R5
         MVC   S99TUKEY,=AL2(DUNDDNAM)
         MVC   S99TUNUM,=AL2(1)
         LA    R4,L'S99TUPTR(R4)
         LA    R5,FREEUNT2
         ST    R5,S99TUPTR
         OI    S99TUPTR,S99TUPLN
         MVC   S99TUKEY,=AL2(DUNUNALC)
         MVC   S99TUNUM,=AL2(0)
         DROP  R2,R4,R5
         LR    R1,R2
        DYNALLOC ,                 FREE DDNAME
         LTR   R15,R15             TEST RC=0 ?
         BZ    *+L'*+18            IF ZERO, OK
         CLC   S99ERROR,=XL2'0438' COMPARE ERROR REASON CODE = 0438 ?
         BE    *+L'*+8             IF YES, OK
         ICM   R0,B'1111',S99ERROR IF NOT EQUAL, GET ERROR/INFO CODES
         B     EXIT20
         DROP  R3
         LA    R2,DDAPARM
         USING S99RBP,R2
         LA    R3,DDARB
         ST    R3,S99RBPTR
         OI    S99RBPTR,S99RBPND
         USING S99RB,R3
         XC    S99RB(S99RBEND-S99RB),S99RB
         MVI   S99RBLN,S99RBEND-S99RB
         MVI   S99VERB,S99VRBAL    ALLOCATION
         MVI   S99FLG11,S99NOMNT
         LA    R4,DDATUPL
         ST    R4,S99TXTPP
         USING S99TUPL,R4
         LA    R5,DDAUNIT1
         ST    R5,S99TUPTR
         USING S99TUNIT,R5
         MVC   S99TUKEY,=AL2(DALDDNAM)
         MVC   S99TUNUM,=AL2(1)
         LA    R4,L'S99TUPTR(R4)
         LA    R5,DDAUNIT2
         ST    R5,S99TUPTR
         MVC   S99TUKEY,=AL2(DALDSNAM)
         MVC   S99TUNUM,=AL2(1)
         LA    R4,L'S99TUPTR(R4)
         LA    R5,DDAUNIT3
         ST    R5,S99TUPTR
         MVC   S99TUKEY,=AL2(DALSTATS)
         MVC   S99TUNUM,=AL2(1)
         MVC   S99TULNG,=AL2(1)
         MVI   S99TUPAR,X'08'      STATUS SHR
         LA    R4,L'S99TUPTR(R4)
         LA    R5,DDAUNIT4
         ST    R5,S99TUPTR
         OI    S99TUPTR,S99TUPLN
         MVC   S99TUKEY,=AL2(DALPERMA)
         MVC   S99TUNUM,=AL2(0)
         DROP  R2,R4,R5
         LR    R1,R2
        DYNALLOC ,                 ALLOC F(DDNAME) DA(DSN) SHR
         LTR   R15,R15             TEST RC=0 ?
         BZ    *+L'*+8             IF ZERO, OK
         ICM   R0,B'1111',S99ERROR IF NOT ZERO, GET ERROR/INFO CODES
         B     EXIT24
         DROP  R3
         EJECT
*------- NORMAL END OF PROCESSING
         SPACE 1
         XR    R10,R10             SET RC 0, OK
LEAVE    XR    R0,R0
         LTR   R9,R9
         BZ    *+L'*+4
         ST    R10,0(R9)           STORE RC VALUE
         L     R2,4(R13)
         L     R1,MSGTXT(R10)
         STM   R0,R1,20(R2)        SET R0 AND R1
        $XRET  CC=(R10),LV=WKLEN,TYPE=RENT
         SPACE 1
*------- ERROR END OF PROCESSING
         SPACE 1
ERRNO    EQU   *
EXIT04   BCTR  R10,0
EXIT08   BCTR  R10,0
EXIT12   BCTR  R10,0
EXIT16   BCTR  R10,0
EXIT20   BCTR  R10,0
EXIT24   BCTR  R10,0
MAXERR   EQU   ((*-ERRNO)/2)+1
         SLL   R10,2
         CH    R10,=H'12'
         BNH   LEAVE
         B     LEAVE+L'LEAVE
         EJECT
*------- DATA CONSTANTS
         SPACE 1
CAMSKEL CAMLST NAME,*-*,,*-*
CAMLNGH  EQU   *-CAMSKEL
MSGTXT   DC    A(MSG0,MSG4,MSG8,MSG12,MSG16,MSG20,MSG24)
         DC    AL1(L'MSG0)
MSG0     DC    C'DATA-SET SUCCESSFULLY ALLOCATED'
         DC    AL1(L'MSG4)
MSG4     DC    C'DDNAME MISSING OR INVALID'
         DC    AL1(L'MSG8)
MSG8     DC    C'DSNAME MISSING OR INVALID'
         DC    AL1(L'MSG12)
MSG12    DC    C'DSNAME IS NOT GDG FORMAT'
         DC    AL1(L'MSG16)
MSG16    DC    C'DATA-SET IS NOT CATALOGUED'
         DC    AL1(L'MSG20)
MSG20    DC    C'FREE FILE(DDNAME) HAS FAILED'
         DC    AL1(L'MSG24)
MSG24    DC    C'DATA-SET ALLOCATION FAILED'
         SPACE 1
        LTORG
         EJECT
*------- W O R K     A R E A S
         SPACE 1
WKAREA   DSECT
         SPACE 1
         DS    18F                 SAVE AREA
         SPACE 1
CAMLIST  DS    (CAMLNGH)X
         DS    0D
LOCAREA  DS    XL268
INDDNME  DS    CL8
INDSN    DS    CL54
         SPACE 1
*------- DATA STRUCTURE FOR FREE OF DDNAME
         SPACE 1
FREEPARM DS    F                   REQUEST BLOCKS FOR SVC 99
FREERB   DS    0F,((((S99RBEND-S99RB)+3)/4)*4)X
FREETUPL DS    2F                  TEXT UNITS POINTERS LIST
FREEUNT1 DS    2H                  TEXT UNITS
FREEUT1A DS    H
FREEUT1B DS    CL8
FREEUNT2 DS    2H
         SPACE 1
*------- DATA STRUCTURE FOR DYNAMIC ALLOCATION
         SPACE 1
DDAPARM  DS    F                   REQUEST BLOCKS FOR SVC 99
DDARB    DS    0F,((((S99RBEND-S99RB)+3)/4)*4)X
DDATUPL  DS    4F                  TEXT UNITS POINTERS LIST
DDAUNIT1 DS    2H                  TEXT UNITS
DDAUNT1A DS    XL2
DDAUNT1B DS    CL8
DDAUNIT2 DS    2H
DSNLEN   DS    XL2
DSNME    DS    CL44
DDAUNIT3 DS    3H,XL1
DDAUNIT4 DS    2H
         SPACE 1
WKLEN    EQU   (((*-WKAREA)+7)/8)*8
         SPACE 2
        PRINT  NOGEN
        IEFZB4D0 ,                 MAPS SVC-99 BLOCKS
        IEFZB4D2
         SPACE 2
         END
