CTSR     TITLE 'O.S. CATALOG SEQUENTIAL READ SUBROUTINE.'
CATSR    START 0
         SPACE 2
* PURPOSE :    ROUTINE TO READ SEQUENTIALLY AN ENTIRE O.S. CATALOG.
* ---------    A DD-CARD, WRITTEN AS BELOW, IS NEEDED TO DEFINE
*              THE DESIRED VOLUME ON WHICH THE O.S. CATALOG RESIDES :
*
*              //...     DD  UNIT=...,VOLUME=SER=...,DISP=OLD
*
*              OR THE DESIRED O.S. CATALOG :
*
*              //...     DD  UNIT=...,VOLUME=SER=...,
*              //            DSNAME=SYSCTLG,DISP=SHR
*
* CALLING SEQUENCE : CALL CATSO,(A,B,C),VL
* ------------------            (A,B)
*                               (A)
*
*        WHERE : A - IS THE ADDRESS OF THE DD-NAME (FORMAT CL8).
*
*                B - IS THE ADDRESS OF THE DEVICE CHARACTERISTICS
*                    (FORMAT FULLWORD - F BOUNDARY) RETURNED BY THE
*                    ROUTINE IF SUPPLIED (OPTIONAL). IT WILL RECEIVE
*                    FIVE FULLWORDS INFORMATION AS DESCRIBED IN DEVTYPE
*                    MACRO (SEE OS/VS2 SYSTEM PROGRAMMING LIBRARY :
*                    DATA MANAGEMENT), FOLLOWED BY ONE HALFWORD
*                    CONTAINING THE NUMBER OF ALTERNATE TRACKS FOR
*                    THE DEVICE, FOLLOWED BY A SIX CHARACTERS FIELD
*                    CONTAINING THE VOLUME SERIAL NUMBER OF THE
*                    DEVICE. THIS ARGUMENT IS OPTIONAL AND MAY BE
*                    OMITTED OR HIS ADDRESS MAY BE SET TO ZERO IN THE
*                    PARAMETERS LIST.
*
*                C - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F
*                    BOUNDARY) IF SUPPLIED (OPTIONAL). VALUE IS ALWAYS
*                    PLACED IN REGISTER 15 AND CAN BE :
*
*                     0 - OPEN CORRECTLY EXECUTED.
*                     1 - FILE ALREADY OPENED.
*                     2 - OPEN ERROR.
*                     3 - CALLING SEQUENCE OR ARGUMENT ALIGNMENT ERROR.
*                     4 - NOT OS/VS2 SYSTEM.
*                     5 - DD-CARD MISSING.
*                     6 - NOT DIRECT-ACCESS STORAGE DEVICE.
*                     7 - READ JFCB ERROR.
*                     8 - DD-CARD INCORRECTLY CODED.
         EJECT
* CALLING SEQUENCE : CALL CATSR,(A,B,C,D),VL
* ------------------            (A,B,C)
*                               (A,B)
*                               (A)
*
*        WHERE : A - IS THE ADDRESS OF A FIELD (FORMAT XL1,CL44) WHICH
*                    RECEIVES, AFTER EACH READ OPERATION, UNLESS WHEN
*                    THE END-OF-FILE IS DETECTED, ONE OF THE FOLLOWING
*                    INFORMATION :
*                     - A CVOL POINTER NAME(FORMAT AL1(1),CL8).
*                     - A DATA-SET NAME (FORMAT AL1(2),CL44).
*                     - AN ALIAS NAME, FOLLOWED BY THE TRUE NAME INDEX
*                       (FORMAT AL1(3),CL8,CL8).
*                     - A NULL INDEX NAME (FORMAT AL1(128),CL8).
*                     - AN INFORMATION CONTINUATION OF A PREVIOUS NAME
*                       (FORMAT AL1(255),CL44).
*
*                B - IS THE ADDRESS OF A FIELD (FORMAT CL6) WHICH
*                    RECEIVES THE VOLUME SERIAL NUMBER RELATIVE
*                    TO THE FIRST ARGUMENT IF PERTINENT, OTHERWISE
*                    IT IS CLEARED TO BLANKS. THIS ARGUMENT IS
*                    OPTIONAL AND MAY BE OMITTED OR HIS ADDRESS MAY
*                    BE SET TO ZERO IN THE PARAMETERS LIST.
*
*                C - IS THE ADDRESS OF A FIELD (FORMAT XL4) WHICH
*                    RECEIVES THE DEVICE TYPE RELATIVE TO THE SECOND
*                    ARGUMENT IF PERTINENT, OTHERWISE IT IS CLEARED
*                    TO BLANKS. THIS ARGUMENT IS OPTIONAL AND MAY BE
*                    OMITTED OR HIS ADDRESS MAY BE SET TO ZERO IN THE
*                    PARAMETERS LIST.
*
*                D - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F
*                    BOUNDARY) IF SUPPLIED (OPTIONAL). VALUE IS ALWAYS
*                    PLACED IN REGISTER 15 AND CAN BE :
*
*                    -1 - END-OF-FILE DETECTED.
*                     0 - READ OPERATION CORRECTLY EXECUTED.
*                     1 - READ ERROR.
*                     2 - FILE NOT OPENED.
*                     3 - CALLING SEQUENCE OR ARGUMENT ALIGNMENT ERROR.
*                     4 - INSUFFICIENT CORE STORAGE AT DISPOSAL.
*                     5 - NO VOLUME INDEX CONTROL ENTRY IN CATALOG.
*                     6 - UNEXPECTED CATALOG ENTRY ENCOUNTERED.
*                     7 - INVALID TERMINATION OF A CATALOG BLOCK.
*                     8 - INDEX WITH WRONG OR NO INDEX CONTROL ENTRY.
*
*        NOTE : REGISTER 1 IS ALWAYS 0 (ZERO) AT RETURN, UNLESS WHEN
*               A GENERATION DATA GROUP NAME HAS BEEN BUILDED, IT IS
*               SET TO 1 (ONE). BE CAREFULL THAT THE CONDITION IS NOT
*               MAINTAINED ON EVENTUAL CONTINUATIONS.
         EJECT
* CALLING SEQUENCE : CALL CATSC,(A,B),VL
* ------------------            (A)
*
*        WHERE : A - IS THE ADDRESS OF THE CATALOG CONTROL INFORMATION
*                    (FORMAT FULLWORD - F BOUNDARY) RETURNED BY THE
*                    ROUTINE IF SUPPLIED (OPTIONAL : ARGUMENT MAY BE
*                    OMITTED PASSING A ZERO PARAMETERS LIST POINTER,
*                    REGISTER 1, WHEN THE NEXT IS ALSO OMITTED, OR HIS
*                    ADDRESS MAY BE ZERO IN THE PARAMETERS LIST).
*                    IT WILL RECEIVE FOUR FULLWORDS INFORMATION AS
*                    DESCRIBED BELOW :
*                     - THE RELATIVE TRACK ADDRESS OF THE LAST BLOCK
*                       OF THE VOLUME INDEX (FORMAT F'0TTR').
*                     - THE RELATIVE TRACK ADDRESS OF THE LAST BLOCK
*                       IN SYSCTLG (FORMAT F'0TTR').
*                     - THE RELATIVE TRACK ADDRESS OF THE FIRST UNUSED
*                       BLOCK IN SYSCTLG (FORMAT F'0TTR').
*                     - THE RELATIVE TRACK ADDRESS OF THE UPPER USED
*                       BLOCK IN SYSCTLG (FORMAT F'0TTR').
*
*                B - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F
*                    BOUNDARY) IF SUPPLIED (OPTIONAL). VALUE IS ALWAYS
*                    PLACED IN REGISTER 15 AND CAN BE :
*
*                     0 - CLOSE CORRECTLY EXECUTED.
*                     1 - CALLING SEQUENCE OR ARGUMENT ALIGNMENT ERROR.
*
* GENERAL NOTICE : MVS/XA : MUST BE AMODE AND RMODE 24.
* ================
*
* AUTHOR :     P.A. MOINIL
* --------     COMPUTING CENTRE
*              J.R.C. - ISPRA ESTABLISHMENT
*              21020 ISPRA (VA), ITALY
         EJECT
        $DEFREG
         SPACE 2
*        MISCELLANEOUS DEFINITIONS.
         SPACE 1
OFF      EQU   X'0F'               SET SWITCH NOP OPERATION.
ON       EQU   X'F0'               SET SWITCH BRANCH OPERATION.
         EJECT
*        EXECUTE DIRECT ACCESS PROGRAM CONTROL BLOCKS (XDAP).
*        ----------------------------------------------------
         SPACE 1
XDSECT   DSECT
         SPACE 1
ECB      DS    XL1                 EVENT CONTROL BLOCK.
ECBCC    DS    XL3
         SPACE 1
IOB      DS    0F                  INPUT/OUTPUT BLOCK.
IOBFLAG1 DS    XL1                 I/O FLAGS.
IOBFLAG2 DS    XL1                 I/O FLAGS.
IOBSENS0 DS    XL1                 FIRST SENSE BYTE.
IOBSENS1 DS    XL1                 SECOND SENSE BYTE.
IOBECBCC DS    XL1                 COMPLETION CODE.
IOBECBPT DS    AL3                 ADDRESS OF ECB.
IOBFLAG3 DS    XL1                 I/O ERROR FLAGS.
IOBCSW   DS    XL7                 SEVEN LOW-ORDER BYTES OF LAST CSW.
IOBSIOCC DS    XL1                 SIO CONDITION CODE.
IOBSTART DS    AL3                 ADDRESS OF CHANNEL PROGRAM.
         DS    XL1
IOBDCBPT DS    AL3                 ADDRESS OF DCB.
IOBRESTR DS    2F                  IOBINCAM, IOBERRCT.
IOBSEEK  DS    2F                  NO. OF DEB EXT. AND SEEK ADDRESS.
         SPACE 2
CATSR    CSECT                     RESTORE ORIGINAL CSECT.
         EJECT
        PRINT  NOGEN
         SPACE 2
TIODSECT DSECT
         SPACE 1
        IEFTIOT1
         SPACE 1
CATSR    CSECT                     RESTORE ORIGINAL CSECT.
         SPACE 2
        CVT    DSECT=YES,LIST=YES
         SPACE 1
CATSR    CSECT                     RESTORE ORIGINAL CSECT.
         SPACE 2
JFCDSECT DSECT
         SPACE 1
        IEFJFCBN LIST=YES
         SPACE 1
CATSR    CSECT                     RESTORE ORIGINAL CSECT.
         SPACE 2
        DCBD   DSORG=PS,DEVD=DA
         SPACE 1
CATSR    CSECT                     RESTORE ORIGINAL CSECT.
         SPACE 2
        PRINT  GEN
         EJECT
        $CTLGD
         EJECT
*        ----------------------------
*        CATALOG'S BLOCK AREAS CHAIN.
*        ----------------------------
         SPACE 1
*        /BLOCKMA/    +0  = ADDRESS OF /1/ (START OF CHAIN).
*
*        /1/          +0  = FLAG BYTE.
*                     +1  = CURRENT TTR.
*                     +4  = ADDRESS OF /2/.
*                     +8  = 0 (ZERO).
*                     +12 = DATA START/CURRENT ADDRESS.
*                     +16 = DATA END ADDRESS.
*                     +20 = KEY, COUNT AND DATA (CATALOG RECORD).
*
*        /2/          +0  = FLAG BYTE.
*                     +1  = CURRENT TTR.
*                     +4  = ADDRESS OF /3/.
*                     +8  = ADDRESS OF /1/.
*                     +12 = DATA START/CURRENT ADDRESS.
*                     +16 = DATA END ADDRESS.
*                     +20 = KEY, COUNT AND DATA (CATALOG RECORD).
*        ...
*        ...   ETC...
*        ...
*
*        /N-1/        +0  = FLAG BYTE.
*                     +1  = CURRENT TTR.
*                     +4  = ADDRESS OF /N/.
*                     +8  = ADDRESS OF /N-2/.
*                     +12 = DATA START/CURRENT ADDRESS.
*                     +16 = DATA END ADDRESS.
*                     +20 = KEY, COUNT AND DATA (CATALOG RECORD).
*
*        /N/          +0  = FLAG BYTE.
*                     +1  = CURRENT TTR.
*                     +4  = 0 (ZERO).
*                     +8  = ADDRESS OF /N-1/.
*                     +12 = DATA START/CURRENT ADDRESS.
*                     +16 = DATA END ADDRESS.
*                     +20 = KEY, COUNT AND DATA (CATALOG RECORD).
         EJECT
*        CATALOG'S BLOCK AREAS DEFINITIONS.
*        ----------------------------------
         SPACE 1
FLAG     EQU   0                   FLAG BYTE DISPLACEMENT.
FREE     EQU   X'10'               FREE CATALOG'S BLOCK AREA FLAG.
RTTR     EQU   1                   CURRENT TTR DISPLACEMENT.
NXA      EQU   4                   NEXT BLOCK AREA IN CHAIN DISPL.
NXP      EQU   8                   PREVIOUS BLOCK AREA IN CHAIN DISPL.
DSCA     EQU   12                  DATA START/CURRENT ADDRESS DISPL.
DEA      EQU   16                  DATA END ADDRESS DISPLACEMENT.
         SPACE 1
PRFX     EQU   20                  CATALOG'S BLOCK PREFIX LENGTH.
KLG      EQU   8                   CATALOG'S RECORD KEY LENGTH.
RLG      EQU   KLG+256             CATALOG'S RECORD LENGTH.
BLG      EQU   ((PRFX+RLG+7)/8)*8  GETMAIN - FREEMAIN BLOCKS LENGTH.
         EJECT
         ENTRY CATSO
         ENTRY CATSC
         SPACE 1
         USING *,R15
         MVI   WTGO+3,CATS-*       SET ENTRY DISPLACEMENT (READ).
         B     WTGO
         DROP  R15
         SPACE 1
         USING *,R15
CATSO    MVI   WTGO+3,CATS-*       SET ENTRY DISPLACEMENT (OPEN).
         B     WTGO
         DROP  R15
         SPACE 1
         USING *,R15
CATSC    MVI   WTGO+3,CATS-*       SET ENTRY DISPLACEMENT (CLOSE).
         DROP  R15
         SPACE 1
WTGO     LA    R15,*-*(R15)        SET COMMON ENTRY ADDRESS.
         SPACE 1
CATS    $XENT BASE=(R11,R12)
         OI    GDGSW+1,ON
         LR    R15,R11             COMPUTE WHERE TO GO?
         BCTR  R15,0
         SR    R14,R14
         IC    R14,0(R15)
         SRL   R14,1
         B     *+L'*-(CATS-WTGO)+0(R14) ENTER SELECTED ROUTINE.
         SPACE 1
         B     CTCLOSE             BRANCH ENTRIES VECTOR.
         B     CTOPEN
         EJECT
         SR    R9,R9
         SR    R8,R8
         SR    R7,R7
         LA    R10,MAXERR
         TM    0(R1),X'80'         CONTROL ARGUMENTS.
         BO    RD3
         TM    4(R1),X'80'
         BO    RD2
         TM    8(R1),X'80'
         BO    RD1
         TM    12(R1),X'80'
         BZ    ERR3
         TM    15(R1),X'03'
         BNZ   ERR3
         L     R9,12(R1)
         LA    R9,0(R9)
RD1      L     R8,8(R1)
         LA    R8,0(R8)
         LTR   R8,R8
         BZ    RD2
         XC    0(4,R8),0(R8)
RD2      L     R7,4(R1)
         LA    R7,0(R7)
         LTR   R7,R7
         BZ    RD3
         MVI   0(R7),C' '
         MVC   1(5,R7),0(R7)
RD3      L     R6,0(R1)
         LA    R6,0(R6)
         LTR   R6,R6
         BZ    ERR3
         MVI   0(R6),0
         MVI   1(R6),C' '
         MVC   2(L'DSNAME-1,R6),1(R6)
         LA    R1,DCBSR
         USING IHADCB,R1
         TM    DCBOFLGS,DCBOFOPN   TEST IF OPENED?
         BZ    ERR2                BRANCH IF NOT.
         DROP  R1
         STM   R6,R8,SVPARM
SWFIRST  B     GETFCBA
         LM    R6,R8,SVBACK        RESTORE ALL REGISTERS.
         L     R14,SVLINK
         BR    R14                 CONTINUE PROCESSING.
         SPACE 2
GETFCBA  NI    SWFIRST+1,OFF
         BAL   R14,GETAR           GET FIRST CATALOG'S BLOCK AREA.
         ST    R1,BLOCKMA
         OI    FLAG(R1),FREE
         LA    R0,1
         ST    R0,HIGHTTR
         BAL   R14,XREAD           READ STARTING CATALOG'S BLOCK.
         ST    R1,CATMA
         LM    R7,R8,DSCA(R1)      GET BLOCK POINTERS.
         USING CTLDSECT,R7
         CLI   VTYPE,X'05'         TEST VICE ENTRY.
         BNE   ERR5
         SPACE 2
*        VOLUME INDEX CONTROL ENTRY (VICE).
         SPACE 1
         CLC   VNAME,ONE
         BNE   ERR5
         MVC   TTRLVI+L'TTRLVI-L'VLSTBLK(L'VLSTBLK),VLSTBLK
         MVC   TTRL+L'TTRL-L'VCLSTBLK(L'VCLSTBLK),VCLSTBLK
         MVC   TTRFU+L'TTRFU-L'VFHOLE(L'VFHOLE),VFHOLE
         LA    R7,ELENGTH+5*2(R7)  VICE LENGTH.
         CLR   R7,R8
         BNL   ENDSR               ONLY VICE IN CATALOG.
         SPACE 2
NEXT     CLI   ETYPE,X'05'         TEST CVPE ENTRY.
         BE    CVPE
         CLI   ETYPE,X'03'
         BE    CVPE
         CLI   ETYPE,X'00'         TEST ILE OR IPE ENTRY.
         BE    ILEIPE
         CLI   ETYPE,X'02'         TEST GIPE ENTRY.
         BE    GIPE
         CLI   ETYPE,X'07'         TEST DSPE ENTRY.
         BE    DSPE
         CLI   ETYPE,X'0D'
         BE    DSPE
         CLI   ETYPE,X'13'
         BE    DSPE
         CLI   ETYPE,X'19'
         BE    DSPE
         CLI   ETYPE,X'1F'
         BE    DSPE
         CLI   ETYPE,X'01'         TEST VCBPE ENTRY.
         BE    VCBPE
         CLI   ETYPE,X'04'         TEST AE ENTRY.
         BE    AE
         B     ERR6
         SPACE 2
*        CONTROL VOLUME POINTER ENTRY (CVPE).
         SPACE 1
CVPE     L     R1,SVPARM
         MVI   0(R1),1
         MVC   1(L'ENAME,R1),ENAME
         L     R1,SVPARM+4
         CLI   ETYPE,X'03'
         BNE   CVPEN               BRANCH IF CVPE NEW FORMAT.
         LTR   R1,R1
         BZ    CVPEP
         MVC   0(L'EVOLIDO,R1),EVOLIDO
         B     CVPEP
CVPEN    LTR   R1,R1
         BZ    *+L'*+6
         MVC   0(L'EVOLID,R1),EVOLID
         L     R1,SVPARM+8
         LTR   R1,R1
         BZ    CVPEP
         MVC   0(L'EDEVTYP,R1),EDEVTYP
CVPEP    BAL   R14,EXRET
         CLI   ETYPE,X'03'
         LA    R7,ELENGTH+3*2(R7)  OLD CVPE LENGTH.
         BE    *+L'*+4
         LA    R7,2*2(R7)          NEW CVPE LENGTH.
         CLR   R7,R8
         BL    NEXT
         B     ERR7
         SPACE 2
*        DATA SET POINTER ENTRY (DSPE).
         SPACE 1
DSPE     BAL   R14,GDGN
         L     R1,SVPARM
         MVI   0(R1),2
         MVC   1(L'ENAME,R1),ENAME
         LH    R6,EVOLCNT
         B     DSPE2
DSPE1    L     R1,SVPARM
         MVI   0(R1),255
DSPE2    L     R1,SVPARM+4
         LTR   R1,R1
         BZ    *+L'*+6
         MVC   0(6,R1),EDATA+4
         L     R1,SVPARM+8
         LTR   R1,R1
         BZ    *+L'*+6
         MVC   0(4,R1),EDATA
         BAL   R14,EXRET
         LA    R7,L'EDATA(R7)
         BCT   R6,DSPE1
         LA    R7,ELENGTH+1*2(R7)  DSPE LENGTH.
         CLR   R7,R8
         BNL   ERR7                INVALID BLOCK TERMINATION.
         B     NEXT
         SPACE 2
*        VOLUME CONTROL BLOCK POINTER ENTRY (VCBPE).
         SPACE 1
VCBPE    BAL   R14,GDGN
         L     R1,SVPARM
         MVI   0(R1),2
         MVC   1(L'ENAME,R1),ENAME
         MVC   WORK+1(L'ETTR),ETTR SET TTR FOR READ.
         STM   R7,R8,VCBPTR
         OI    SWVCB+1,ON          SET BRANCH OPERATION.
         B     VCBPE2
VCBPE1   L     R1,SVPARM
         MVI   0(R1),255
VCBPE2   NI    SWNXV+1,OFF         SET NOP OPERATION.
         L     R0,WORK
         BAL   R14,XREAD           READ A VCB.
         ST    R1,VCBBA
         L     R7,DSCA(R1)         GET BLOCK POINTER.
         SPACE 2
*        VOLUME CONTROL BLOCK (VCB).
         SPACE 1
         LH    R2,VCBVOLCT
         LA    R6,20
         CLR   R2,R6
         BH    VCBPE4
         LR    R6,R2
         OI    SWNXV+1,ON          SET BRANCH OPERATION.
         B     VCBPE4
VCBPE3   L     R1,SVPARM
         MVI   0(R1),255
VCBPE4   L     R1,SVPARM+4
         LTR   R1,R1
         BZ    *+L'*+6
         MVC   0(6,R1),VCBVOLS+4
         L     R1,SVPARM+8
         LTR   R1,R1
         BZ    *+L'*+6
         MVC   0(4,R1),VCBVOLS
         BAL   R14,EXRET
         LA    R7,L'VCBVOLS(R7)
         BCT   R6,VCBPE3
         L     R1,VCBBA
         OI    FLAG(R1),FREE       RELEASE BLOCK AREA.
SWNXV    NOP   VCBPE5
         L     R7,DSCA(R1)
         MVC   WORK+1(L'ETTR),VCBVOLS+(20*L'VCBVOLS)+10
         B     VCBPE1
VCBPE5   NI    SWVCB+1,OFF         SET NOP OPERATION.
         LM    R7,R8,VCBPTR
         LA    R7,ELENGTH+1*2(R7)  VCBPE LENGTH.
         CLR   R7,R8
         BNL   ERR7                INVALID BLOCK TERMINATION.
         B     NEXT
         SPACE 2
*        ALIAS ENTRY (AE).
         SPACE 1
AE       L     R1,SVPARM
         MVI   0(R1),3
         MVC   1(L'ENAME,R1),ENAME
         MVC   1+L'ENAME(L'ETRUEN,R1),ETRUEN
         BAL   R14,EXRET
         LA    R7,ELENGTH+4*2(R7)  AE LENGTH.
         CLR   R7,R8
         BNL   ERR7                INVALID BLOCK TERMINATION.
         B     NEXT
         SPACE 2
ILEIPE   CLC   ENAME,MONE          TEST ILE ENTRY.
         BNE   IPE
         SPACE 2
*        INDEX LINK ENTRY (ILE).
         SPACE 1
         CLC   ETTR(L'ETTR),ZEROS  ANY OTHER BLOCK?
         BE    ENDSR               BRANCH IF END.
         MVC   WORK+1(L'ETTR),ETTR SET TTR FOR READ.
         L     R1,CATMA
         OI    FLAG(R1),FREE       RELEASE BLOCK AREA.
         L     R0,WORK
         BAL   R14,XREAD           READ NEXT BLOCK.
         ST    R1,CATMA
         LM    R7,R8,DSCA(R1)      GET BLOCK POINTERS.
         B     NEXT
         SPACE 2
*        GENERATION INDEX POINTER ENTRY (GIPE).
         SPACE 1
GIPE     LA    R14,ELENGTH+2*2(R7) GIPE LENGTH.
         NI    GDGSW+1,OFF
         B     IPE+L'IPE
         SPACE 2
*        INDEX POINTER ENTRY (IPE).
         SPACE 1
IPE      LA    R14,ELENGTH(R7)     IPE LENGTH.
         L     R1,CATMA
         ST    R14,DSCA(R1)        SAVE CURRENT POINTER.
         SR    R2,R2               START LEVEL(S).
IPELP    ST    R2,INDEX
         SLL   R2,3
         LA    R1,NAMEDS(R2)
         MVC   0(L'ENAME,R1),ENAME STORE INDEX NAME.
         MVC   WORK+1(L'ETTR),ETTR SET TTR FOR READ.
         L     R0,WORK
         BAL   R14,XREAD           READ BLOCK CONTINUATION.
         SRL   R2,1
         ST    R1,CATNX(R2)
         LM    R7,R8,DSCA(R1)      GET BLOCK POINTERS.
         CLI   ETYPE,X'03'         TEST ICE ENTRY.
         BNE   ERR8
         SPACE 2
*        INDEX CONTROL ENTRY (ICE).
         SPACE 1
         CLC   INAME,ONE
         BNE   ERR8
         LA    R7,ELENGTH+3*2(R7)  ICE LENGTH.
         CLR   R7,R8
         BNL   ERR7                INVALID BLOCK TERMINATION.
         NI    SWETY+1,OFF         SET NOP OPERATION.
         SPACE 2
NXT      CLI   ETYPE,X'00'         TEST ILE OR IPE ENTRY.
         BE    ILPE
         CLI   ETYPE,X'02'         TEST GIPE ENTRY.
         BE    GIPEN
         CLI   ETYPE,X'07'         TEST DSPE ENTRY.
         BE    DSPEN
         CLI   ETYPE,X'0D'
         BE    DSPEN
         CLI   ETYPE,X'13'
         BE    DSPEN
         CLI   ETYPE,X'19'
         BE    DSPEN
         CLI   ETYPE,X'1F'
         BE    DSPEN
         CLI   ETYPE,X'01'         TEST VCBPE ENTRY.
         BE    VCBPEN
         B     ERR6
         SPACE 2
*        DATA SET POINTER ENTRY (DSPE).
         SPACE 1
DSPEN    OI    SWETY+1,ON          SET BRANCH OPERATION.
         BAL   R14,GDGN
         BAL   R14,BDSN
         L     R1,SVPARM
         MVI   0(R1),2
         MVC   1(L'DSNAME,R1),DSNAME
         LH    R6,EVOLCNT
         B     DSPEN2
DSPEN1   L     R1,SVPARM
         MVI   0(R1),255
DSPEN2   L     R1,SVPARM+4
         LTR   R1,R1
         BZ    *+L'*+6
         MVC   0(6,R1),EDATA+4
         L     R1,SVPARM+8
         LTR   R1,R1
         BZ    *+L'*+6
         MVC   0(4,R1),EDATA
         BAL   R14,EXRET
         LA    R7,L'EDATA(R7)
         BCT   R6,DSPEN1
         LA    R7,ELENGTH+2(R7)    DSPE LENGTH.
         CLR   R7,R8
         BNL   ERR7                INVALID BLOCK TERMINATION.
         B     NXT
         SPACE 2
*        VOLUME CONTROL BLOCK POINTER ENTRY (VCBPE).
         SPACE 1
VCBPEN   OI    SWETY+1,ON          SET BRANCH OPERATION.
         BAL   R14,GDGN
         BAL   R14,BDSN
         L     R1,SVPARM
         MVI   0(R1),2
         MVC   1(L'DSNAME,R1),DSNAME
         MVC   WORK+1(L'ETTR),ETTR SET TTR FOR READ.
         STM   R7,R8,VCBPTR
         OI    SWVCB+1,ON          SET BRANCH OPERATION.
         B     VCBPEN2
VCBPEN1  L     R1,SVPARM
         MVI   0(R1),255
VCBPEN2  NI    SWNXN+1,OFF         SET NOP OPERATION.
         L     R0,WORK
         BAL   R14,XREAD           READ A VCB.
         ST    R1,VCBBA
         L     R7,DSCA(R1)         GET BLOCK POINTER.
         SPACE 2
*        VOLUME CONTROL BLOCK (VCB).
         SPACE 1
         LH    R2,VCBVOLCT
         LA    R6,20
         CLR   R2,R6
         BH    VCBPEN4
         LR    R6,R2
         OI    SWNXN+1,ON          SET BRANCH OPERATION.
         B     VCBPEN4
VCBPEN3  L     R1,SVPARM
         MVI   0(R1),255
VCBPEN4  L     R1,SVPARM+4
         LTR   R1,R1
         BZ    *+L'*+6
         MVC   0(6,R1),VCBVOLS+4
         L     R1,SVPARM+8
         LTR   R1,R1
         BZ    *+L'*+6
         MVC   0(4,R1),VCBVOLS
         BAL   R14,EXRET
         LA    R7,L'VCBVOLS(R7)
         BCT   R6,VCBPEN3
         L     R1,VCBBA
         OI    FLAG(R1),FREE       RELEASE BLOCK AREA.
SWNXN    NOP   VCBPEN5
         L     R7,DSCA(R1)
         MVC   WORK+1(L'ETTR),VCBVOLS+(20*L'VCBVOLS)+10
         B     VCBPEN1
VCBPEN5  NI    SWVCB+1,OFF         SET NOP OPERATION.
         LM    R7,R8,VCBPTR
         LA    R7,ELENGTH+1*2(R7)  VCBPE LENGTH.
         CLR   R7,R8
         BNL   ERR7                INVALID BLOCK TERMINATION.
         B     NXT
         SPACE 2
ILPE     CLC   ENAME,MONE          TEST ILE ENTRY.
         BNE   IPENX
         SPACE 2
*        INDEX LINK ENTRY (ILE).
         SPACE 1
         CLC   ETTR(L'ETTR),ZEROS  TEST IF ANY OTHER BLOCK.
         BNE   ILENX
SWETY    B     NOTETY
         OI    SWBDS+1,ON          SET BRANCH OPERATION.
         BAL   R14,BDSN
         NI    SWBDS+1,OFF         SET NOP OPERATION.
         L     R1,SVPARM           EMPTY INDEX LEVEL(S).
         MVI   0(R1),128
         MVC   1(L'DSNAME,R1),DSNAME
         BAL   R14,EXRET
NOTETY   L     R2,INDEX            GET LEVEL.
         SLL   R2,3
         LA    R1,NAMEDS(R2)
         MVI   0(R1),C' '          CLEAR CURRENT INDEX NAME.
         MVC   1(L'ENAME-1,R1),0(R1)
         SRL   R2,1
         L     R1,CATNX(R2)        FREE CURRENT BLOCK AREA.
         SR    R0,R0
         ST    R0,CATNX(R2)
         OI    FLAG(R1),FREE
         SRL   R2,2
         LTR   R2,R2               TEST LAST LEVEL.
         BNZ   PLEV
         L     R1,CATMA
         LM    R7,R8,DSCA(R1)
         CLR   R7,R8
         BNL   ERR7                INVALID BLOCK TERMINATION.
         B     NEXT
PLEV     BCTR  R2,0                PREVIOUS LEVEL.
         ST    R2,INDEX
         SLL   R2,2
         L     R1,CATNX(R2)
         LM    R7,R8,DSCA(R1)
         CLR   R7,R8
         BNL   ERR7                INVALID BLOCK TERMINATION.
         B     NXT
ILENX    MVC   WORK+1(L'ETTR),ETTR SET TTR FOR READ.
         L     R2,INDEX
         SLL   R2,2
         L     R1,CATNX(R2)
         OI    FLAG(R1),FREE       RELEASE BLOCK AREA.
         L     R0,WORK
         BAL   R14,XREAD           READ NEXT BLOCK.
         ST    R1,CATNX(R2)
         LM    R7,R8,DSCA(R1)      GET BLOCK POINTERS.
         B     NXT
         SPACE 2
*        GENERATION INDEX POINTER ENTRY (GIPE).
         SPACE 1
GIPEN    LA    R14,ELENGTH+2*2(R7) GIPE LENGTH.
         NI    GDGSW+1,OFF
         B     IPENX+L'IPENX
         SPACE 2
*        INDEX POINTER ENTRY (IPE).
         SPACE 1
IPENX    LA    R14,ELENGTH(R7)     IPE LENGTH.
         L     R2,INDEX
         SLL   R2,2
         L     R1,CATNX(R2)
         ST    R14,DSCA(R1)        SAVE CURRENT POINTER.
         SRL   R2,2
         LA    R2,1(R2)            BUMP LEVEL.
         B     IPELP
         SPACE 2
         DROP  R7
         SPACE 2
EXRET    STM   R6,R8,SVBACK        SAVE REGISTERS.
         ST    R14,SVLINK
         SR    R10,R10
         B     EXIT
         SPACE 1
ENDSR    SR    R10,R10
         BCT   R10,LEAVE
         SPACE 2
ERR1     BCTR  R10,0
ERR2     BCTR  R10,0
ERR3     BCTR  R10,0
ERR4     BCTR  R10,0
ERR5     BCTR  R10,0
ERR6     BCTR  R10,0
ERR7     BCTR  R10,0
ERR8     BCTR  R10,0
MAXERR   EQU   ((*-ERR1)/2)+1
LEAVE    BAL   R14,XCLOSE
         B     EXIT
         EJECT
CTOPEN   SR    R9,R9
         SR    R8,R8
         LA    R10,MAXERO
         TM    0(R1),X'80'         CONTROL ARGUMENTS.
         BO    OP2
         TM    4(R1),X'80'
         BO    OP1
         TM    8(R1),X'80'
         BZ    ERO3
         TM    11(R1),X'03'
         BNZ   ERO3
         L     R9,8(R1)
         LA    R9,0(R9)
OP1      TM    7(R1),X'03'
         BNZ   ERO3
         L     R8,4(R1)
         LA    R8,0(R8)
OP2      L     R7,0(R1)
         LA    R7,0(R7)
         SPACE 1
         OC    ATIOT(L'ATIOT),ATIOT FISRT TIME?
         BNZ   GOT                 BRANCH IF NOT.
         L     R2,CVTPTR           GET CVT ADDRESS.
         USING CVT,R2
         TM    CVTDCB,CVT4MS1      TEST IF OS/VS2?
         BZ    ERO4                BRANCH IF NOT.
         MVC   ACRTAA(L'CVTPCNVT),CVTPCNVT   GET USEFULL ADDRESSES.
         MVC   ARPSSC(L'CVT0SCR1),CVT0SCR1
         DROP  R2
        EXTRACT    ATIOT,'S',FIELDS=(TIOT)
         L     R2,ATIOT
         USING TIODSECT,R2
         MVC   GN4+1(L'TIOCNJOB),TIOCNJOB
         DROP  R2
         LA    R2,GN4+L'GN4-3
         LA    R3,L'GN4-1
DSOL     CLI   0(R2),C' '
         BNE   DSOLF
         BCTR  R2,0
         BCT   R3,DSOL
DSOLF    MVC   1(2,R2),GN3
         SPACE 1
GOT      L     R2,ATIOT            GET TIOT ADDRESS.
         USING TIODSECT,R2
         LA    R5,DCBSR            SEARCH DD-CARD.
         USING IHADCB,R5
         TM    DCBOFLGS,DCBOFOPN   TEST OPENED?
         BO    ERO1                BRANCH IF YES.
         MVC   DCBDDNAM(L'DCBDDNAM),0(R7)
SRCH     CLC   TIOELNGH(L'ZEROS),ZEROS END OF TIOT?
         BE    ERO5                YES.
         CLC   TIOEDDNM(L'DCBDDNAM),DCBDDNAM DD-NAME FOR US?
         BE    DDFND               YES.
         SR    R1,R1
         IC    R1,TIOELNGH
         AR    R2,R1               NEXT DD ENTRY.
         B     SRCH
         DROP  R2
DDFND   DEVTYPE  DCBDDNAM,DVTYP,DEVTAB
         CLI   DVTYP+2,X'20'       TEST IF DIRECT-ACCESS STORAGE.
         BNE   ERO6                BRANCH IF NOT.
         LTR   R8,R8
         BZ    RDJ
         MVC   0(5*4,R8),DVTYP
         L     R4,CVTPTR           GET CVT POINTER.
         USING CVT,R4
         L     R15,CVTZDTAB        ADDRESS OF IECZDTAB.
         DROP  R4
         LA    R15,0(0,R15)        IECZDTAB IS THE RESIDENT DIRECT
         SR    R4,R4                    ACCESSS DEVICE CONSTANT TABLE
         LR    R14,R4                   (SEE ASSEMBLY OF IECZDTAB).
         IC    R14,DVTYP+3         GET DIRECT-ACCESS TYPE.
         IC    R4,0(R14,R15)       PICK UP TABLE DISPLACEMENT.
         ALR   R4,R15              DEVICE CONSTANT TABLE ADDRESS.
         MVC   20(2,R8),12(R4)     MOVE NR. OF ALT. TRACKS.
RDJ      TM    DVTYP+1,X'10'       TEST IF RPS DEVICE,
         BZ    *+L'*+6             BRANCH IF NOT.
         MVC   RPSR2(1),DVTYP+3
        RDJFCB  (DCBSR)
         LTR   R15,R15             TEST COMPLETION CODE.
         BNZ   ERO7                JFCB ERROR.
         LA    R4,JF
         USING JFCDSECT,R4
         CLC   JFCBDSNM(L'DSCTLG),DSCTLG     TEST CATALOG DSNAME.
         BNE   *+L'*+12
         CLI   JFCBIND2,JFCOLD+JFCSHARE TEST DISP=SHR CODED,
         BNE   ERO8                BRANCH IF NOT.
         B     DSJF
         CLC   JFCBDSNM(L'GN1),GN1 TEST O.S. GENERATED DSNAME.
         BNE   ERO8
         CLC   JFCBDSNM+8(L'GN2),GN2
         BNE   ERO8
         CLC   JFCBDSNM+16(L'GN3),GN3
         BNE   ERO8
         LA    R2,GN4+L'GN4-1
         LA    R3,L'GN4-1
DSCL     CLI   0(R2),C' '
         BNE   DSCLF
         BCTR  R2,0
         BCT   R3,DSCL
DSCLF    EX    R3,DSCC
         BE    *+L'*+10
         B     ERO8
DSCC     CLC   JFCBDSNM+22(*-*),GN4
         CLI   JFCBIND2,JFCOLD     TEST DISP=OLD CODED,
         BNE   ERO8                BRANCH IF NOT.
JL1      EQU   JFCBLTYP-JFCBTSDM
DSJF     OC    JFCBTSDM(JL1),JFCBTSDM   CONTROL DD-CARD CODE.
         BNZ   ERO8
JL2      EQU   JFCBCRDT-JFCBOTTR
         OC    JFCBOTTR(JL2),JFCBOTTR
         BNZ   ERO8
JL3      EQU   JFCBIND2-JFCBXPDT
         OC    JFCBXPDT(JL3),JFCBXPDT
         BNZ   ERO8
JL4      EQU   JFCBNVOL-JFCBUFNO
         OC    JFCBUFNO(JL4),JFCBUFNO
         BNZ   ERO8
JL5      EQU   JFCBVLCT-JFCBPQTY
         OC    JFCBPQTY(JL5),JFCBPQTY
         BNZ   ERO8
         CLI   JFCBVLCT,X'01'
         BNE   ERO8
         CLI   JFCBLTYP,JFCSL
         BNE   ERO8
         CLI   JFCBNVOL,X'01'
         BNE   ERO8
         CLI   JFCBSPTN,X'00'
         BNE   ERO8
         LTR   R8,R8
         BZ    *+L'*+6
         MVC   22(6,R8),JFCBVOLS
         SPACE 1
         OI    JFCBTSDM,JFCNWRIT   INHIBIT WRITE BACK.
         CLC   JFCBDSNM(L'DSCTLG),DSCTLG
         BE    *+L'*+12
         MVC   JFCBDSNM(L'DSCTLG),DSCTLG     SET CATALOG NAME.
         MVC   JFCBDSNM+L'DSCTLG(L'JFCBDSNM-L'DSCTLG),JFCBDSNM+L'DSCTLG1
               -1
         DROP  R4
        OPEN   (DCBSR,(INPUT)),TYPE=J
         TM    DCBOFLGS,DCBOFOPN   OPEN SUCCESSFULLY?
         BZ    ERO2                BRANCH IF NOT.
         DROP  R5
         OI    SWFIRST+1,ON
         SR    R10,R10
         B     EXIT
         SPACE 1
ERO1     BCTR  R10,0
ERO2     BCTR  R10,0
ERO3     BCTR  R10,0
ERO4     BCTR  R10,0
ERO5     BCTR  R10,0
ERO6     BCTR  R10,0
ERO7     BCTR  R10,0
ERO8     BCTR  R10,0
MAXERO   EQU   ((*-ERO1)/2)+1
         B     EXIT
         EJECT
CTCLOSE  SR    R9,R9
         SR    R8,R8
         LTR   R1,R1
         BZ    CL2
         LA    R10,MAXERC
         TM    0(R1),X'80'         CONTROL ARGUMENTS.
         BO    CL1
         TM    4(R1),X'80'
         BZ    ERC1
         TM    7(R1),X'03'
         BNZ   ERC1
         L     R9,4(R1)
         LA    R9,0(R9)
CL1      TM    3(R1),X'03'
         BNZ   ERC1
         L     R8,0(R1)
         LA    R8,0(R8)
         SPACE 1
CL2      BAL   R14,XCLOSE
         LTR   R8,R8
         BZ    CL3
         MVC   0(LDATA,R8),TTRLVI
CL3      XC    TTRLVI(LDATA),TTRLVI
         SR    R10,R10
         B     EXIT
         SPACE 1
ERC1     BCTR  R10,0
MAXERC   EQU   ((*-ERC1)/2)+1
         SPACE 1
EXIT     L     R1,4(R13)
         XC    24(4,R1),24(R1)
GDGSW    B     NOTGDG
         OI    GDGSW+1,ON
         MVI   27(R1),1
NOTGDG   LTR   R9,R9
         BZ    XLEAVE
         ST    R10,0(R9)
XLEAVE  $XRET  CC=(R10)
         EJECT
*        EXECUTE DIRECT ACCESS PROGRAM READ ROUTINE.
*
*              R0  = RELATIVE TRACK ADDRESS (TTR).
*              R1  = AT EXIT, IT WILL CONTAIN THE ADDRESS OF THE
*                    CATALOG'S BLOCK AREA.
*              R14 = LINK REGISTER.
*              R15 = WORK REGISTER.
*
*              R2 TO R13 REMAIN UNCHANGED.
*
*        NOTE. TTR IS THE RELATIVE TRACK ADDRESS OF THE RECORD
*              TO BE READ, AND IT MUST BE RIGHT JUSTIFIED IN
*              REGISTER 0.
         SPACE 1
XREAD    STM   R0,R15,XSAVE        SAVE AROUND SYSTEM ROUTINES.
         CL    R0,HIGHTTR          RETAIN HIGHEST TTR USED.
         BNH   *+L'*+4
         ST    R0,HIGHTTR
         SLL   R0,8                ADJUST TTR TO TTRN.
         ST    R0,TTR
         L     R1,DCBSR+(DCBDEBAD-IHADCB)    GET DEB ADDRESS.
         LA    R2,ADDREC           SET ADDRESS OF MBBCCHHR RESULT.
         L     R15,ACRTAA          GET ENTRY POINT ADDRESS (IECPCNVT).
         BALR  R14,R15             CONVERT TTRN TO MBBCCHHR.
         USING *,R14
         LM    R0,R15,XSAVE        RESTORE ORIGINAL REGISTERS.
         DROP  R14
         LA    R3,ECBSRR
         TM    DVTYP+1,X'10'       TEST IF RPS DEVICE,
         BZ    NORPS               BRANCH IF NOT.
         STC   R0,RPSR0+3          SET RECORD NUMBER.
         L     R0,RPSR0            GET RPS SECTOR ARGUMENTS.
         L     R2,RPSR2
         L     R15,ARPSSC          GET ENTRY POINT ADDRESS (IEC0SCR1).
         BALR  R14,R15             COMPUTE SECTOR NUMBER OF THE BLOCK.
         USING *,R14
         LM    R0,R15,XSAVE        RESTORE ORIGINAL REGISTERS.
         DROP  R14
         LA    R3,ECBSRP
         B     NORPS
         SPACE 1
        CNOP   0,4
XSAVE    DC    16F'0'              LOCAL SAVE AREA.
         SPACE 1
NORPS    LA    R2,BLOCKMA-NXA      FIND A FREE CATALOG'S BLOCK AREA.
         L     R2,NXA(R2)
         TM    FLAG(R2),FREE
         BO    FOUND
         OC    NXA(4,R2),NXA(R2)
         BNZ   NORPS+L'NORPS
         BAL   R14,GETAR           GET A CATALOG'S BLOCK AREA.
         ST    R1,NXA(R2)          BUILD CHAIN.
         ST    R2,NXP(R1)
         LR    R2,R1
         B     FOUND+L'FOUND
FOUND    NI    FLAG(R2),255-FREE   SET BUSY.
         ST    R2,XSAVE+(R1*4)     SET REGISTER READY TO RETURN.
         LA    R2,PRFX(R2)         POINTS TO READ DATA.
         XC    0(KLG,R2),0(R2)     CLEAR AREA.
         XC    KLG(RLG-KLG,R2),KLG(R2)
         USING XDSECT,R3
         XC    ECB(L'ECB+L'ECBCC),ECB   CLEAR ECB.
         XC    IOBCSW(L'IOBCSW),IOBCSW  CLEAR CSW.
         TM    DVTYP+1,X'10'       TEST IF RPS DEVICE,
         BO    RPS                 BRANCH IF YES.
        XDAP   ECBSRR,RI,DCBSR,(2),RLG,,ADDREC
         B     WT
RPS     XDAP   ECBSRP,RI,DCBSR,(2),RLG,,ADDREC,SECTOR
WT      WAIT   ECB=ECB
         LR    R7,R3               ECB ADDRESS.
         USING XDSECT,R7
         LR    R8,R2               READ AREA ADDRESS.
         CLI   ECB,X'7F'           READ SUCCESSFULL?
         BNE   ERR1                BRANCH IF NOT.
         DROP  R3
         SPACE 1
         L     R2,XSAVE+(R1*4)     GET BLOCK AREA ADDRESS.
         LR    R1,R2
SWVCB    NOP   ALTRET
         LH    R3,PRFX+KLG(R2)     GET DATA COUNT.
         LA    R3,PRFX+KLG(R2,R3)  DATA END ADDRESS.
         LA    R2,PRFX+KLG+2(R2)   DATA START ADDRESS.
         STM   R2,R3,DSCA(R1)
COMRET   MVC   RTTR(3,R1),TTR      SET TTR.
         LM    R0,R14,XSAVE        RESTORE ORIGINAL REGISTERS.
         BR    R14                 RETURN.
ALTRET   LA    R2,PRFX+KLG(R2)     DATA START ADDRESS IN VCB.
         ST    R2,DSCA(R1)
         B     COMRET
         DROP  R7
         EJECT
*        GET AN AREA TO READ A CATALOG'S BLOCK.
*
*              R0  = WORK REGISTER.
*              R1  = AT EXIT, IT WILL CONTAIN THE ADDRESS OF THE MAIN
*                    STORAGE AREA ALLOCATED (ALSO IN THE FULLWORD
*                    NAMED 'WORK').
*              R14 = LINK REGISTER.
*              R15 = WORK REGISTER.
         SPACE 1
GETAR    ST    R14,SVLINK          SAVE LINK REGISTER.
        GETMAIN  EC,LV=BLG,A=WORK
         LTR   R15,R15
         BNZ   ERR4                BRANCH IF NO STORAGE AVAILABLE.
         L     R1,WORK
         XC    FLAG(PRFX,R1),FLAG(R1)   RESET CHAIN FIELDS.
         L     R14,SVLINK          RESTORE LINK REGISTER.
         BR    R14                 RETURN.
         EJECT
*        GENERATION DATA GROUP NAME BUILD ROUTINE.
*
*              R7  = ADDRESS OF DSPE OR VCBPE.
*              R14 = LINK REGISTER.
*
*        NOTE. AT EXIT, THE EVENTUAL GDG NAME IS COMPLEMENTED IN THE
*              'ENAME' FIELD OF DSPE OR VCBPE.
         SPACE 1
         USING CTLDSECT,R7
GDGN     CLI   ENAME,C'G'          CONTROL IF GDG NAME.
         BNER  R14
         CLI   ENAME+5,C'V'
         BNER  R14
         MVZ   ZONE1(L'ZONE1),ENAME+6
         CLC   ZONE1(L'ZONE1),ZONE1+L'ZONE1
         BNER  R14
         MVZ   ZONE2(L'ZONE2),ENAME+1
         CLC   ZONE2(L'ZONE2),ZEROS
         BNER  R14
         XC    ENAME+1(L'ZONE2),MONE    COMPLEMENT GDG NUMBER.
         NI    GDGSW+1,OFF
         BR    R14                 RETURN.
         EJECT
*        DSNAME BUILD ROUTINE.
*
*              R0  = WORK REGISTER.
*              R1  = WORK REGISTER.
*              R2  = WORK REGISTER.
*              R7  = ADDRESS OF DSPE OR VCBPE.
*              R14 = LINK REGISTER.
*              R15 = WORK REGISTER.
*
*        NOTE. AT EXIT, THE COMPLETE DATA-SET NAME IS IN THE FIELD
*              NAMED 'DSNAME'.
         SPACE 1
BDSN     MVI   DSNAME,C' '         PREPARE DSNAME FIELD.
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         LA    R15,DSNAME
         SR    R2,R2
         LA    R1,NAMEDS
BDSN0    LA    R0,L'NAMEDS
BDSN1    CLI   0(R1),C' '          BUILD THE DATA SET NAME.
         BE    BDSN2
         MVC   0(1,R15),0(R1)
         LA    R15,1(R15)
         LA    R1,1(R1)
         BCT   R0,BDSN1
BDSN2    AR    R1,R0
         MVI   0(R15),C'.'
         LA    R15,1(R15)
         CL    R2,INDEX
         BNL   SWBDS
         LA    R2,1(R2)
         B     BDSN0
SWBDS    NOPR  R14                 OPTIONAL RETURN.
         LA    R0,L'ENAME
         LA    R1,ENAME-CTLDSECT(R7)
BDSN3    CLI   0(R1),C' '
         BER   R14                 RETURN.
         MVC   0(1,R15),0(R1)
         LA    R15,1(R15)
         LA    R1,1(R1)
         BCT   R0,BDSN3
         BR    R14                 RETURN.
         EJECT
*        FREE ALL DYNAMIC BLOCKS AREAS AND CLOSE.
*
*              R0  = WORK REGISTER.
*              R1  = WORK REGISTER.
*              R2  = WORK REGISTER.
*              R3  = WORK REGISTER.
*              R4  = WORK REGISTER.
*              R14 = LINK REGISTER.
         SPACE 1
XCLOSE   ST    R14,SVLINK          SAVE LINK REGISTER.
         L     R2,BLOCKMA          FREE ALL CATALOG'S BLOCK AREAS.
         LTR   R2,R2
         BZ    DELN                NOTHING TO FREE.
DELS     LR    R3,R2               FIND THE LAST IN CHAIN.
         L     R2,NXA(R3)
         LTR   R2,R2
         BNZ   DELS
DELP     L     R2,NXP(R3)          GET PREVIOUS IN CHAIN.
         LTR   R2,R2
         BZ    DELL
         LA    R4,NXA(R2)
        FREEMAIN A=(4),MF=(E,FREAR)
         LR    R3,R2
         B     DELP
DELL     LA    R4,BLOCKMA          FREE FIRST CATALOG'S BLOCK AREA.
        FREEMAIN A=(4),MF=(E,FREAR)
         XC    BLOCKMA,BLOCKMA
DELN     LA    R2,DCBSR
         USING IHADCB,R2
         TM    DCBOFLGS,DCBOFOPN   TEST IF OPENED?
         BZ    XCLRET              BRANCH IF NOT.
         DROP  R2
        CLOSE  (DCBSR)
XCLRET   L     R14,SVLINK          RESTORE LINK REGISTER.
         BR    R14                 RETURN.
         EJECT
*        CONSTANTS AND WORK AREAS.
         SPACE 1
ATIOT    DC    A(*-*)
ACRTAA   DC    A(*-*)
ARPSSC   DC    A(*-*)
BLOCKMA  DC    A(*-*)
VCBPTR   DC    A(*-*,*-*)
VCBBA    DC    A(*-*)
SVBACK   DC    A(*-*,*-*,*-*)
SVLINK   DC    A(*-*)
SVPARM   DC    A(*-*,*-*,*-*)
DVTYP    DC    5F'0'
ZEROS    DC    F'0'
TTR      DC    F'0'
WORK     DC    F'0'
RPSR0    DC    0F'0',AL2(RLG),AL1(KLG,*-*)
RPSR2    DC    0F'0',AL1(*-*),AL3(SECTOR)
ADDREC   DC    0F'0',XL8'0'
         SPACE 1
TTRLVI   DC    F'0'
TTRL     DC    F'0'
TTRFU    DC    F'0'
HIGHTTR  DC    F'0'
LDATA    EQU   *-TTRLVI
         SPACE 1
CATMA    DC    A(*-*)
INDEX    DC    F'0'
CATNX    DC    22A(*-*)
NAMEDS   DC    22CL8' '
         SPACE 1
ONE      DC    XL8'0000000000000001'
MONE     DC    XL8'FFFFFFFFFFFFFFFF'
SECTOR   DC    XL1'0'
ZONE1    DC    2C'00'
ZONE2    DC    XL4'00'
DSCTLG   DC    CL8'SYSCTLG '
GN1      DC    C'SYS'
GN2      DC    C'.T'
GN3      DC    C'.RA'
GN4      DC    CL11'.'
DSNAME   DC    CL44' '
         SPACE 1
JOBFILE  DC    0F'0',XL1'87',AL3(JF)
JF       DC    0F'0',XL176'00'
         EJECT
FREAR   FREEMAIN E,LV=BLG,MF=L
         SPACE 2
DCBSR    DCB   DSORG=DA,MACRF=E,DEVD=DA,RECFM=F,                       1
               EXLST=JOBFILE,DDNAME=XXXXXXXX
         SPACE 2
         END
