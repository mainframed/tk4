FNDM     TITLE 'FINDMEM -- SEARCH PDS FOR A PARTICULAR MEMBER.'
FINDMEM  START 0
         SPACE 1
* ORIGIN :     EXTRACTED FROM TAPE CBT 89 FEB, FILE 270.
* --------     ADAPTED BY MOINIL P.A.
*              ATTRIBUTES : RE-ENTERABLE
*
* PURPOSE :    THIS IS A SUBROUTINE WHICH DYNAMICALLY ALLOCATES THE
* ---------    FILE WITH DSN PASSED TO THIS ROUTINE AND THEN SEARCHES
*              THE DIRECTORY TO DETERMINE WHETHER THE MEMBER NAME
*              PASSED TO THIS ROUTINE EXISTS.
*
* TO CALL THIS ROUTINE FROM A COBOL PROGRAM, DO THE FOLLOWING :
*              1. IF YOUR PDS IS CATALOGUED,
*                   MOVE YOUR DSN TO DSNAME OF FINDMEM-I-O-AREA.
*                   MOVE YOUR MEMBER NAME
*                       TO MEMBER-NAME OF FINDMEM-I-O-AREA.
*                   CALL 'FINDMEM' USING FINDMEM-I-O-AREA.
*                 WHERE :  01  FINDMEM-I-O-AREA.
*                              05  OP-SYS VALUE 'VS'  PIC X(2).
*                              05  MEMBER-NAME        PIC X(8).
*                              05  DSNAME             PIC X(44).
*                              05  SUCCESS-INDICATOR  PIC 99.
*              2. IF YOUR PDS IS NOT CATALOGUED,
*                   MOVE YOUR DSN TO DSNAME OF FINDMEM-I-O-AREA.
*                   MOVE YOUR MEMBER NAME
*                       TO MEMBER-NAME OF FINDMEM-I-O-AREA.
*                   MOVE THE VOLUME SERIAL NUMBER TO VOL-SER-NO.
*                   CALL 'FINDMEM' USING FINDMEM-I-O-AREA, VOL-SER-NO.
*                 WHERE :  01  FINDMEM-I-O-AREA (SEE ABOVE)
*                          01  VOL-SER-NO             PIC X(6).
*
* SUCCESS-INDICATOR   MEANING
* -----------------   ------------------------------------------------
*        00           SUCCESSFUL ALLOCATION AND FIND
*        04           SUCCESSFULLY ALLOCATED FILE BUT COULDN'T FIND
*                       MEMBER IN DIRECTORY
*        08           UNSUCCESSFUL ALLOCATION
*        12           DSN PASSED TO THIS ROUTINE IS SPACES
*        16           MEMBER NAME PASSED IS SPACES
*        20           I/O ERROR READING DIRECTORY
*        24           UNSUCCESSFUL FREE OF DDNAME FINDMEDD
*        28           INVALID VOL SER PASSED TO THIS ROUTINE
         EJECT
* ASSIGNMENT OF REGISTERS :
* -------------------------
*
*        REGISTER      USAGE
*        --------      -------------------------------------------
*            1         ADDRESS OF PARAMETER LIST
*            2         SAVE REGISTER 1
*            3         WORK REGISTER
*            4         WORK REGISTER
*            5         WORK REGISTER
*            6         NOT USED
*            7         NOT USED
*            8         NOT USED
*            9         NOT USED
*           10         SAVE RETURN CODE VALUE
*           11         NOT USED
*           12         BASE REGISTER
*           13         ADDRESS OF SAVE AREA
*           14         RETURN ADDRESS, LINK REGISTER
*           15         ENTRY POINT ADDRESS
         SPACE 1
        $DEFREG
         EJECT
*------- INITIALIZATION.
         SPACE 1
        $XENT  BASE=R12,LV=WKLEN,TYPE=RENT
         LR    R2,R1
         LR    R9,R13
         USING WKAREA,R9
         MVI   SWITCH,0
         MVC   FREEPARM(FREELL),FREELST
         MVC   DD1PARM(DD1LL),DD1LST
         L     R5,0(R2)
         MVC   IOAREA(L'IOAREA),0(R5)
         TM    0(R2),X'80'         IS FINDMEM BEING CALLED WITH ONLY
*                                    ONE PARMERATOR ?
         BO    NOINVOL             BRANCH IF SO
         L     R5,4(R2)            R5 ==> ADDRESS OF VOL SER NO
         MVC   INVOL(L'INVOL),0(R5) PUT VOL SER NO INTO INVOL
         B     LOADSN
NOINVOL  MVC   INVOL,=CL6'ABSENT'
         SPACE 1
*------- LOAD THE 2 DATA AREAS DSNLEN AND DSNAME.
*        THE DSN THAT IS PASSED TO THIS ROUTINE IS MOVED TO DSNAME,
*        THEN CALCULATES THE SIGNIFICANT LENGTH OF DSNAME AND MOVE
*        THAT VALUE TO DSNLEN (EXPRESSED IN BINARY).
         SPACE 1
LOADSN   MVC   DSNAME,DSN          MOVE DSN THAT IS PASSED TO THIS
*                                    ROUTINE TO DSNAME
         LA    R4,44               LOAD REG 4 WITH 44
         LA    R3,DSNAME+43
COMPR1   CL    R4,=F'1'            COMPARE REG 4 TO 1
         BNL   COMPR2              BRANCH IF NOT LOW
         MVC   INDICATR,=CL2'12'   MOVE 12 TO SUCCESS-INDICATOR
         LA    R10,12              MOVE 12 TO REGISTER 10
         B     QUIT
COMPR2   CLI   0(R3),C' '          IS DSNAME AS INDEXED BY REG 3
*                                    EQUAL TO A SPACE?
         BNE   LOADLEN             BRANCH IF NOT
         SL    R3,=F'1'            SUBTRACT 1 FROM REGISTER 3
         SL    R4,=F'1'            SUBTRACT 1 FROM REGISTER 4
         B     COMPR1
LOADLEN  STCM  R4,B'0011',DSNLEN   STORE R4 LOW ORDER 2 BYTES TO DSNLEN
LOADX    CLC   INVOL,=CL6'ABSENT'  WAS VOL SER PROVIDED ?
         BE    ALLOCT              BRANCH IF NOT
         SPACE 1
*------- EDIT INVOL.
*        IF INVOL MEETS THE CRITERIA FOR BEING A VALID
*        VOLUME SERIAL NUMBER (6 BYTES LONG, ALL NUMERICS
*        AND ALPHABETICS).
         SPACE 1
         LA    R3,INVOL
         LA    R4,6
EDIT1BYT MVC   EDITBYTE(1),0(R3)
         CLI   EDITBYTE,C'0'
         BL    NEXTEST
         CLI   EDITBYTE,C'9'
         BNH   NEXTBYT
BADINVOL MVC   INDICATR,=CL2'28'    MOVE 28 TO SUCCESS-INDICATOR
         LA    R10,28               MOVE 28 TO REGISTER 10
         B     QUIT
NEXTEST  CLI   EDITBYTE,C'A'
         BL    BADINVOL
         CLI   EDITBYTE,C'Z'
         BH    BADINVOL
NEXTBYT  LA    R3,1(R3)
         BCT   R4,EDIT1BYT
         SPACE 1
*------- DYNAMIC ALLOCATION FIRST ATTEMPTS TO FREE DDNAME FINDMEDD.
*        IF DDNAME FINDMEDD WAS SUCCESSFULLY FREED, THEN IT
*        BRANCHES TO THE DYNAMIC ALLOCATION MACRO DYNALLOC.
*        IF DDNAME FINDMEDD WAS NOT SUCCESSFULLY FREED, THEN IT
*        CHECKS FOR ERROR REASON CODE 0438 (DDNAME NOT FOUND).
*        IF THE ERROR REASON CODE IS 0438, THEN IT BRANCHES TO THE
*        DYNAMIC ALLOCATION MACRO DYNALLOC, ELSE IT PRODUCES AN
*        ERROR CONDITION (SUCCESS-INDICATOR = '24')
         SPACE 1
ALLOCT   LA    R1,FREEPARM
         LA    R3,FREERB
         STCM  R3,B'0111',FREEARB
         LA    R3,FREETUPL
         STCM  R3,B'1111',FREATUPL
         LA    R3,FREEUNT1
         STCM  R3,B'1111',FREETUPL
         LA    R3,FREEUNT2
         STCM  R3,B'0111',FREEUNT0
        DYNALLOC ,                 FREE F(FINDMEDD)
         LTR   R15,R15             TEST REGISTER 15 FOR ZERO
         BZ    DODYNAM             BRANCH IF ZERO
         CLC   ERCODE,=XL2'0438'   COMPARE ERROR REASON CODE
*                                    AGAINST HEXADECIMAL 0438
         BE    DODYNAM             BRANCH IF EQUAL
         MVC   INDICATR,=CL2'24'   MOVE '24' TO SUCCESS-INDICATOR
         LA    R10,24              MOVE 24 TO REGISTER 10
         B     QUIT
DODYNAM  LA    R1,DD1PARM
         LA    R3,DD1RB
         STCM  R3,B'0111',DD1ARB
         LA    R3,DD1TUPL
         STCM  R3,B'1111',DD1ATUPL
         LA    R3,DD1UNIT1
         STCM  R3,B'1111',DD1TUPL
         LA    R3,DD1UNIT2
         STCM  R3,B'1111',DD1TUPL+4
         LA    R3,DD1UNIT3
         STCM  R3,B'0111',DD1HIGH3+1
         LA    R3,DD1UNIT4
         STCM  R3,B'0111',DD1HIGH4+1
         LA    R3,DD1UNIT5
         STCM  R3,B'0111',DD1HIGH5+1
         CLC   INVOL,=CL6'ABSENT'  WAS VOL SER PROVIDED ?
         BE    DODYNAM1            BRANCH IF NOT
         MVI   DD1HIGH3,X'00'
         MVI   DD1HIGH4,X'00'
         MVI   DD1HIGH5,X'80'
         MVC   DD1VOLSR,INVOL
         B     DODYNAM2
DODYNAM1 MVI   DD1HIGH3,X'80'
         MVI   DD1HIGH4,X'00'
         MVI   DD1HIGH5,X'00'
DODYNAM2 DYNALLOC ,                ALLOC F(FINDMEDD) DA(DSN) SHR
         LTR   R15,R15             TEST REGISTER 15 FOR ZERO
         BZ    DODYNX              BRANCH IF ZERO
         MVC   INDICATR,=CL2'08'   MOVE '08' TO SUCCESS-INDICATOR
         LA    R10,8               MOVE 8 TO REGISTER 10
         B     QUIT
DODYNX   LA    R3,PDSFILE
         MVC   0(PDSFILL,R3),PDSFIL
         LA    R1,OPNFILE
         MVC   0(OPNFILL,R1),OPNFIL
        OPEN   ((R3),(INPUT)),MF=(E,(1)) OPEN PDSFILE
         USING IHADCB,R3
         TM    DCBOFLGS,DCBOFOPN
         BZ    OPNERR
         DROP  R3
         OI    SWITCH,FILOPEN      SAY FILE OPENED
         SPACE 1
*------- SEARCH THE DYNAMICALLY ALLOCATED PDS FOR THE GIVEN MEMBER.
         SPACE 1
         CLC   MEMBER,=CL8' '      IS MEMBER EQUAL TO 8 SPACES?
         BNE   SRCHIT              BRANCH IF NOT
         MVC   INDICATR,=CL2'16'   MOVE 16 TO SUCCESS-INDICATOR
         LA    R10,16              MOVE 16 TO REGISTER 10
         B     QUIT
SRCHIT  FIND   PDSFILE,MEMBER,D    SEARCH DIRECTORY FOR MEMBER
         ST    R15,SAVER15         PUT REG 15 CONTENTS INTO SAVER15
         CLI   SAVER15+3,X'00'     CONDITION CODE 00?
         BE    RC00                BRANCH IF YES
         CLI   SAVER15+3,X'04'     CONDITION CODE 04?
         BE    RC04                BRANCH IF YES
OPNERR   MVC   INDICATR,=CL2'20'   MOVE 20 TO SUCCESS-INDICATOR
         LA    R10,20              MOVE 20 TO REGISTER 10
         B     QUIT
RC04     MVC   INDICATR,=CL2'04'   MOVE 04 TO SUCCESS-INDICATOR
         LA    R10,4               MOVE 4 TO REGISTER 10
         B     QUIT
RC00     MVC   INDICATR,=CL2'00'   MOVE 00 TO SUCCESS-INDICATOR
         XR    R10,R10             MOVE 0 TO REGISTER 10
         SPACE 1
*------- END OF PROCESSING.
         SPACE 1
QUIT     L     R5,0(R2)
         MVC   0(L'IOAREA,R5),IOAREA
         TM    SWITCH,FILOPEN      WAS FILE OPENED?
         BZ    LEAVE               BRANCH IF NOT
         LA    R3,PDSFILE
         LA    R1,CLSFILE
         MVC   0(CLSFILL,R1),CLSFIL
        CLOSE  ((R3)),MF=(E,(1))   CLOSE FILE
         LA    R1,FREEPARM
        DYNALLOC ,                 FREE F(FINDMEDD)
         LTR   R15,R15             TEST REGISTER 15 FOR ZERO
         BZ    LEAVE               BRANCH IF ZERO
         MVC   INDICATR,=CL2'24'   MOVE '24' TO SUCCESS-INDICATOR
         LA    R10,24              MOVE 24 TO REGISTER 10
LEAVE   $XRET  CC=(R10),LV=WKLEN,TYPE=RENT
         EJECT
*------- DATA CONSTANTS.
         SPACE 1
        PRINT  NOGEN
OPNFIL  OPEN   (*-*,(INPUT)),MF=L
OPNFILL  EQU   *-OPNFIL
CLSFIL  CLOSE  (*-*),MF=L
CLSFILL  EQU   *-CLSFIL
PDSFIL  DCB    DDNAME=FINDMEDD,DSORG=PO,MACRF=(R)
PDSFILL  EQU   *-PDSFIL
        PRINT  GEN
FREELST  DS    0F
         DC    XL1'80'       TURN ON HIGH ORDER BIT
         DC    AL3(*-*)      ADDRESS OF REQUEST BLOCK
         DC    AL1(S99RBEND-S99RB) S99RBLN (LENGTH OF REQUEST BLOCK)
         DC    AL1(S99VRBUN) S99VERB (REQUEST FOR UNALLOCATION)
         DC    AL1(S99NOMNT,0) S99FLG11 (DO NOT MOUNT VOLUMES)
         DC    XL2'0'        S99ERROR (ERROR REASON CODE)
         DC    XL2'0'        S99INFO (INFORMATION REASON CODE)
         DC    A(*-*)        S99TXTPP (ADDR OF POINTER TO TEXT UNIT)
         DC    XL4'0'        RESERVED
         DC    XL4'0'        S99FLAG2
         DC    A(*-*)        ADDRESS OF TEXT UNIT #1
         DC    XL1'80'       TURN ON HIGH ORDER BIT
         DC    AL3(*-*)      ADDRESS OF TEXT UNIT #2
         DC    AL2(DUNDDNAM),XL2'0001',XL2'0008',CL8'FINDMEDD'
         DC    AL2(DUNUNALC),XL2'0'
FREELL   EQU   *-FREELST
DD1LST   DS    0F
         DC    XL1'80'       TURN ON HIGH ORDER BIT
         DC    AL3(*-*)      ADDRESS OF REQUEST BLOCK
         DC    AL1(S99RBEND-S99RB) S99RBLN (LENGTH OF REQUEST BLOCK)
         DC    AL1(S99VRBAL) S99VERB (REQUEST FOR DSNAME ALLOC)
         DC    AL1(S99NOMNT,0) S99FLG11 (DO NOT MOUNT VOLUMES)
         DC    XL2'0'        S99ERROR (ERROR REASON CODE)
         DC    XL2'0'        S99INFO (INFORMATION REASON CODE)
         DC    A(*-*)        S99TXTPP (ADDR OF POINTERS TO TEXT UNITS
         DC    XL4'0'        RESERVED
         DC    XL4'0'        S99FLAG2
         DC    A(*-*)        ADDRESS OF TEXT UNIT #1
         DC    A(*-*)        ADDRESS OF TEXT UNIT #2
         DC    XL1'0'
         DC    AL3(*-*)      ADDRESS OF TEXT UNIT #3
         DC    XL1'0'
         DC    AL3(*-*)      ADDRESS OF TEXT UNIT #4
         DC    XL1'0'
         DC    AL3(*-*)      ADDRESS OF TEXT UNIT #5
         DC    AL2(DALDDNAM),XL2'0001',XL2'0008',CL8'FINDMEDD'
         DC    AL2(DALDSNAM),XL2'0001',BL2'0',CL44' '
         DC    AL2(DALSTATS),XL2'0001',XL2'0001',XL1'08'
         DC    AL2(DALUNIT),XL2'0001',XL2'0008',CL8'SYSALLDA'
         DC    AL2(DALVLSER),XL2'0001',XL2'0006',CL6' '
DD1LL    EQU   *-DD1LST
         SPACE 1
        LTORG
         EJECT
WKAREA   DSECT
         DS    18F                 SAVE AREA
SAVER15  DS    F
         SPACE 1
        PRINT  NOGEN
OPNFILE OPEN   (*-*,(INPUT)),MF=L
CLSFILE CLOSE  (*-*),MF=L
        PRINT  GEN
PDSFILE  DS    (PDSFILL)X          DCB FOR DYNAMICALLY ALLOCATED PDS
         SPACE 1
*------- DATA STRUCTURE FOR FREEING OF DDNAME FINDMEDD.
         SPACE 1
         DS    0F
FREEPARM DS    XL1
FREEARB  DS    AL3           ADDRESS OF REQUEST BLOCK
FREERB   DS    XL1           S99RBLN (LENGTH OF REQUEST BLOCK)
         DS    XL1           S99VERB (REQUEST FOR UNALLOCATION)
         DS    XL2           S99FLAG1 (DO NOT MOUNT VOLUMES)
ERCODE   DS    XL2           S99ERROR (ERROR REASON CODE)
         DS    XL2           S99INFO (INFORMATION REASON CODE)
FREATUPL DS    A             S99TXTPP (ADDR OF POINTER TO TEXT UNIT)
         DS    XL4           RESERVED
         DS    XL4           S99FLAG2
FREETUPL DS    A             ADDRESS OF TEXT UNIT #1
         DS    XL1
FREEUNT0 DS    AL3           ADDRESS OF TEXT UNIT #2
FREEUNT1 DS    XL2,XL2,XL2,CL8
FREEUNT2 DS    XL2,XL2
         SPACE 1
*------- DATA STRUCTURE FOR DYNAMIC ALLOCATION.
         SPACE 1
         DS    0F
DD1PARM  DS    XL1
DD1ARB   DS    AL3           ADDRESS OF REQUEST BLOCK
DD1RB    DS    XL1           S99RBLN (LENGTH OF REQUEST BLOCK)
         DS    XL1           S99VERB (REQUEST FOR DSNAME ALLOC)
         DS    XL2           S99FLAG1 (DO NOT MOUNT VOLUMES)
         DS    XL2           S99ERROR (ERROR REASON CODE)
         DS    XL2           S99INFO (INFORMATION REASON CODE)
DD1ATUPL DS    A             S99TXTPP (ADDR OF POINTERS TO TEXT UNITS
         DS    XL4           RESERVED
         DS    XL4           S99FLAG2
DD1TUPL  DS    A             ADDRESS OF TEXT UNIT #1
         DS    A             ADDRESS OF TEXT UNIT #2
DD1HIGH3 DS    XL1
         DS    AL3           ADDRESS OF TEXT UNIT #3
DD1HIGH4 DS    XL1
         DS    AL3           ADDRESS OF TEXT UNIT #4
DD1HIGH5 DS    XL1
         DS    AL3           ADDRESS OF TEXT UNIT #5
DD1UNIT1 DS    XL2,XL2,XL2,CL8
DD1UNIT2 DS    XL2,XL2
DSNLEN   DS    BL2
DSNAME   DS    CL44
DD1UNIT3 DS    XL2,XL2,XL2,XL1
DD1UNIT4 DS    XL2,XL2,XL2,CL8
DD1UNIT5 DS    XL2,XL2,XL2
DD1VOLSR DS    CL6
         SPACE 1
         DS    0F
IOAREA   DS    0CL56 - - - - - - - +
         DS    XL2                 +
MEMBER   DS    CL8                 +
DSN      DS    CL44                +
INDICATR DS    CL2                 + - BREAKDOWN OF IOAREA
         SPACE 1
INVOL    DS    CL6
EDITBYTE DS    CL1
SWITCH   DS    XL1
FILOPEN  EQU   X'80'
         SPACE 1
WKLEN    EQU   (((*-WKAREA)+7)/8)*8
         SPACE 1
        PRINT  NOGEN
        DCBD   DEVD=DA,DSORG=PO
        IEFZB4D0
        IEFZB4D2
         SPACE 2
         END
