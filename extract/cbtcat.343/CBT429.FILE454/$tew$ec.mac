         MACRO      TSO EASY-WAY OF CODING - ENTRY CHECKS
&NAME   $TEW$EC     &REG=R1,&TIOT=NO,&COMM=NO,&NOTTSO=,&NOTCMD=,       X
               &MSG=,&ERR=,&PUT=,&GET=,&REL=,&SCAN=NO,&DOC=NO
.* AUTHOR :    MOINIL P.A.
.* --------    COMPUTING CENTRE (TP 361)
.*             J.R.C. - ISPRA ESTABLISHMENT
.*             21020 ISPRA (VA), ITALY
         GBLB  &TEWECSC,&TEWECST
         GBLB  &TEWMRSW
         GBLB  &TEWPGSW,&TEWPGSG,&TEWPGSP
         GBLB  &TEWSCSW
         GBLC  &TEWMRNM,&TEWMRNE
         LCLB  &SW,&NT
         LCLC  &NTV,&R,&W,&X,&Y,&Z
&SW      SETB  0
&NT      SETB  0
&NTV     SETC  ''
         AIF   ('&NAME' EQ '').A
&NAME    EQU   *
.A       AIF   ('&NOTTSO' EQ '').A3
         AIF   ('&NOTTSO'(1,1) EQ '(').A1
&NTV     SETC  '&NOTTSO'
         AGO   .A3
.A1      AIF   (T'&NOTTSO(1) EQ 'O').A2
         AIF   ('&NOTTSO(1)' EQ '').A2
&NTV     SETC  '&NOTTSO(1)'
.A2      AIF   (T'&NOTTSO(2) EQ 'O').A3
         AIF   ('&NOTTSO(2)' EQ '').A3
         AIF   ('&NOTTSO(2)' NE 'ONLY').ERR1
&NT      SETB  1
.A3      AIF   ('&NTV' EQ '').A4
         AIF   ('&NOTCMD' NE '').A5
.A4      AIF   ('&MSG' EQ '').ERR2
         AIF   ('&ERR' EQ '').ERR3
         AGO   .A9
.A5      AIF   ('&PUT' EQ '').A7
         AIF   ('&MSG' EQ '').ERR4
         AIF   ('&GET' EQ '').A6
         AIF   ('&REL' EQ '').ERR5
         AGO   .A9
.A6      AIF   ('&REL' NE '').ERR6
         AGO   .A9
.A7      AIF   ('&GET' EQ '').A8
         AIF   ('&MSG' EQ '').ERR7
         AIF   ('&REL' EQ '').ERR5
         AGO   .A9
.A8      AIF   ('&REL' NE '').ERR6
         AIF   ('&MSG' NE '').A9
&SW      SETB  1
.A9      ANOP
&X       SETC  'GIB'.'&SYSNDX'
&Y       SETC  'GIC'.'&SYSNDX'
&Z       SETC  'GIW'.'&SYSNDX'
&TEWMRNM SETC  '&MSG'
&TEWMRNE SETC  '&ERR'
&W       SETC  'TSO,PSB'
         AIF   ('&COMM' NE 'YES').B
&TEWECSC SETB  1
&W       SETC  'COMM,'.'&W'
.B       AIF   ('&TIOT' NE 'YES').B1
&TEWECST SETB  1
&W       SETC  'TIOT,'.'&W'
.B1      SPACE 1
*------- TSO entry checks
         SPACE 1
         AIF   ('&REG' EQ '0').C
         AIF   ('&REG' EQ 'R0').C
         AIF   ('&REG' EQ '1').C
         AIF   ('&REG' EQ 'R1').C
         AIF   ('&REG' EQ '13').C
         AIF   ('&REG' EQ 'R13').C
         AIF   ('&REG' EQ '14').C
         AIF   ('&REG' EQ 'R14').C
         AIF   ('&REG' EQ '15').C
         AIF   ('&REG' EQ 'R15').C
&R       SETC  '&REG'
         AGO   .C1
.C       ANOP
&R       SETC  'R2'
         LR    &R,&REG           . GET ENTRY REGISTER
.C1      XC    #TSXLS(#TSXLSL),#TSXLS
        EXTRACT #TSXLSA,'S',FIELDS=(&W.),MF=(E,#TSXLS)
         AIF   ('&DOC' NE 'YES').D
         SPACE 1
* After EXTRACT execution, results are :
*             + Batch-Exec     + TSO-Background + TSO-Foreground +
*        -----+----------------+----------------+----------------+
*         TSO +     A.flag     +     A.flag     +     A.flag     +
*        flag +     X'00'      +     X'00'      +     X'80'      +
*         PSB +     0          +     A.PSCB     +     A.PSCB     +
*        -----+----------------+----------------+----------------+
         SPACE 1
.D       L     R1,#TSTSOF        . TSO-FLAG ADDRESS
         MVC   #TSFLAG,0(R1)     . MOVE IN THE ANSWER TO OUR FLAG
         AIF   (NOT &NT).D2
         TM    #TSFLAG,#TSFRUN   . TSO FOREGROUND RUNNING ?
         AIF   ('&NTV' EQ '').D1
         BZ    &NTV              . NO
         L     R1,#TSPSCB        . PSCB ADDRESS
         AGO   .D3
.D1      BO    &X.A              . YES
         LA    R1,&Z.A           . NO, REJECT
         BAS   R14,&MSG
         B     &ERR
&Z.A    WTO    ' => Only TSO foreground run allowed',                  X
               ROUTCDE=11,DESC=7,MF=L
&X.A     L     R1,#TSPSCB        . PSCB ADDRESS
         AGO   .D3
.D2      L     R1,#TSPSCB        . PSCB ADDRESS
         LTR   R1,R1             . TSO RUNNING ?
         AIF   ('&NTV' EQ '').D4
         BZ    &NTV              . NO
.D3      USING CPPL,&R           . SET CPPL ADDRESSABILITY
         BAS   R14,&X.B          . CHECK TSO COMMAND
         AGO   .D5
.D4      BNZ   &X.A              . YES
         LA    R1,&Z.A           . NO, REJECT
         BAS   R14,&MSG
         B     &ERR
&Z.A    WTO    ' => not TSO environment running',                      X
               ROUTCDE=11,DESC=7,MF=L
         USING CPPL,&R           . SET CPPL ADDRESSABILITY
&X.A     BAS   R14,&X.B          . CHECK TSO COMMAND
.D5      LR    R1,&R
         USING IKJEBECA,R1
         L     &R,CAPTTMP        . CPPL ADDRESS (EDIT)
         DROP  R1
         BAS   R14,&X.B          . CHECK TSO SUB-COMMAND
         AIF   ('&NOTCMD' EQ '').D6
         B     &NOTCMD           . NO, REJECT
         USING PSCB,R1
&X.B     CLC   PSCBUPT,CPPLUPT   . CPPL+4 = UPT ADDRESS ?
         BNER  R14               . NO
         CL    R1,CPPLPSCB       . CPPL+8 = PSCB ADDRESS ?
         BNER  R14               . NO
         DROP  R1,&R
         AIF   (NOT &SW).D7
         AIF   ('&SCAN' NE 'YES').H
         B     &X.I
         AGO   .H
.D6      LA    R1,&Z.B           . NO, REJECT
         BAS   R14,&MSG
         B     &ERR
&Z.B    WTO    ' => not TSO command (or subcommand)',                  X
               ROUTCDE=11,DESC=7,MF=L
         USING PSCB,R1
&X.B     CLC   PSCBUPT,CPPLUPT   . CPPL+4 = UPT ADDRESS ?
         BNER  R14               . NO
         CL    R1,CPPLPSCB       . CPPL+8 = PSCB ADDRESS ?
         BNER  R14               . NO
         DROP  R1,&R
.D7      B     &X.I
         AIF   ('&MSG' EQ '').F
&TEWMRSW SETB  1
         EJECT
         AIF   ('&DOC' NE 'YES').E
*------- TSO MESSAGE - Routine
* On entry --- R1  = address of message WTO list form
*              R14 = link register
*        Work-registers : R0, R1, R14 and R15
         SPACE 1
.E       ANOP
&MSG     ST    R14,#TSSREGM      . SAVE CALLER'S RETURN
         TM    #TSFLAG,#TSFRUN   . IS IT TSO?
         BO    &X.C              . YES, GO DO "TPUT"
        WTO    MF=(E,(1))        . NO, USE "WTO"
         B     &X.D
&X.C     LH    R0,0(,R1)         . GET LENGTH OF "WTO" MESSAGE
         SH    R0,&Y.A           . SUBTRACT OFF "WTO" HEADER
         AH    R1,&Y.A           . BUMP MESSAGE ADDRESS PAST HEADER
        TPUT   (1),(0),R         . DO THE "TPUT"
&X.D     L     R14,#TSSREGM      . RESTORE CALLER'S RETURN
         BR    R14               . RETURN TO CALLER
.F       AIF   ('&PUT' EQ '').G
&TEWMRSW SETB  1
&TEWPGSP SETB  1
&TEWPGSW SETB  1
         EJECT
         AIF   ('&DOC' NE 'YES').F1
*------- TSO PUTLINE - Routine
*        (R2 and R14 saved/restored, R3-R13 not used by routine)
*              R14 : link register
* On entry --- R0 : message text length
*              R1 : points to the message text
*        Work-registers : R0, R1, R2, R14 and R15
* On exit ---- R15 : return code, value may be
*                    0 = PUTLINE complete normally
*                    4 = PUTLINE error (error message sent)
         SPACE 1
.F1      ANOP
&PUT     ST    R2,#TSSREGS       . SAVE CALLER'S REGISTER
         ST    R14,#TSSREGR      . SAVE CALLER'S RETURN
         XC    #TSMCTL,#TSMCTL
         MVI   #TSMOUT,C' '      . CLEAR BUFFER TO SPACES
         MVC   #TSMOUT+1(L'#TSMOUT-1),#TSMOUT
         LTR   R0,R0
         BNP   &X.E              . MESSAGE LENGTH ERROR
         LA    R2,L'#TSMOUT
         CLR   R0,R2
         BNL   *+L'*+2
         LR    R2,R0
         BCT   R2,*+L'*+6
         MVC   #TSMOUT(*-*),0(R1)
         EX    R2,*-6
         LA    R2,L'#TSMCTL+1(R2)
         STH   R2,#TSMCTL        . SET IN PUTLINE LINE LENGTH
         LA    R0,#TSMWRK        . ADDRESS OF MSG BUFFER
         L     R2,#TSCPPL        . ADDRESS OF CPPL
         USING CPPL,R2
         L     R14,CPPLUPT       . UPT ADDRESS
         L     R15,CPPLECT       . ECT ADDRESS
         DROP  R2
         XC    #TSECB,#TSECB     . CLEAR ECB TO ZEROS
         XC    #TSPTPB(PTPBLEN),#TSPTPB CLEAR PUT PARMLIST TO ZEROS
         XC    #TSIOPL(IOPLLEN),#TSIOPL CLEAR PARM LIST TO ZEROS
         LA    R1,#TSIOPL        . ADDRESS OF LIST
        PUTLINE PARM=#TSPTPB,UPT=(R14),ECT=(R15),ECB=#TSECB,           X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X
               OUTPUT=((R0),TERM,SINGLE,DATA),                         X
               MF=(E,(1))
         LTR   R15,R15           . HOW COMPLETE?
         BZ    &X.F              . NORMALLY (RETURN CODE = 0)
         MVC   #TSMCTL(L'&Y.B),&Y.B
         MVC   #TSMCTL+2(L'&Z.D),&Z.D
         MVC   #TSMOUT(L'&Y.D),&Y.D
         MVC   #TSMOUT+L'&Y.D(L'&Z.E),&Z.E
         MVC   #TSMOUT+L'&Y.D-L'&Y.C(L'&Y.C),&Y.C
         LA    R1,#TSMOUT+L'#TSMOUT-15
         SRL   R1,3
         SLL   R1,3
         CVD   R15,0(R1)
         ED    #TSMOUT+L'&Y.D-L'&Y.C(L'&Y.C),5(R1)
         LA    R1,#TSMCTL
         B     &X.E+L'&X.E
&Z.C    WTO    ' => PUTLINE error - Invalid message length',           X
               ROUTCDE=11,DESC=7,MF=L
&Z.D     EQU   &Z.C+2,2
&Z.E     EQU   *-4,4
&X.E     LA    R1,&Z.C
         BAS   R14,&MSG
         LA    R15,4             . SET RETURN CODE = 4 (ERROR)
&X.F     L     R2,#TSSREGS       . RESTORE CALLER'S REGISTER
         L     R14,#TSSREGR      . RESTORE CALLER'S RETURN
         BR    R14               . RETURN TO CALLER
         AIF   ('&GET' EQ '').H
         AGO   .G1
.G       AIF   ('&GET' EQ '').H
&TEWMRSW SETB  1
&TEWPGSW SETB  1
.G1      EJECT
&TEWPGSG SETB  1
         AIF   ('&DOC' NE 'YES').G2
*------- TSO GETLINE - Routine
*        (R2 and R14 saved/restored, R3-R13 not used by routine)
*              R14 : link register
*        Work-registers : R0, R1, R2, R14 and R15
* On exit ---- R15 : return code, value may be
*                    0 = GETLINE complete normally, #TSIBSP contain
*                        Input Buffer Scan Pointers for BXLE ... as
*                        follows (three full-words) :
*                            +0 = 1
*                            +4 = END address of text
*                            +8 = START address of text
*                    4 = none (no input text), all the three #TSIBSP
*                        full-words are zero's
*                    8 = GETLINE error (error message sent)
         SPACE 1
.G2      ANOP
&GET     ST    R2,#TSSREGS       . SAVE CALLER'S REGISTER
         ST    R14,#TSSREGR      . SAVE CALLER'S RETURN
         L     R2,#TSCPPL        . ADDRESS OF CPPL
         USING CPPL,R2
         L     R14,CPPLUPT       . UPT ADDRESS
         L     R15,CPPLECT       . ECT ADDRESS
         DROP  R2
         XC    #TSECB,#TSECB     . CLEAR ECB TO ZEROS
         XC    #TSGTPB(GTPBLEN),#TSGTPB CLEAR GET PARMLIST TO ZEROS
         XC    #TSIOPL(IOPLLEN),#TSIOPL CLEAR PARM LIST TO ZEROS
         XC    #TSIBSP(3*L'#TSIBSP),#TSIBSP ZERO'S INPUT SCAN POINTERS
         LA    R1,#TSIOPL        . ADDRESS OF LIST
        GETLINE PARM=#TSGTPB,UPT=(R14),ECT=(R15),ECB=#TSECB,           X
               TERMGET=(EDIT,WAIT),                                    X
               INPUT=(TERM,LOGICAL),                                   X
               MF=(E,(1))
         CH    R15,&Y.A          . HOW COMPLETE ?
         BNH   &X.G              . SUCCESSFULLY ...
         MVC   #TSMCTL(L'&Y.B),&Y.B
         MVC   #TSMCTL+2(L'&Z.D),&Z.D
         MVC   #TSMOUT(L'&Y.D),&Y.D
         MVC   #TSMOUT+4(L'&Y.F),&Y.F
         MVC   #TSMOUT+L'&Y.D(L'&Z.E),&Z.E
         MVC   #TSMOUT+L'&Y.D-L'&Y.C(L'&Y.C),&Y.C
         LA    R1,#TSMOUT+L'#TSMOUT-15
         SRL   R1,3
         SLL   R1,3
         CVD   R15,0(R1)
         ED    #TSMOUT+L'&Y.D-L'&Y.C(L'&Y.C),5(R1)
         LA    R1,#TSMCTL
         BAS   R14,&MSG
         LA    R15,8             . SET RETURN CODE = 8 (ERROR)
         B     &X.H
&X.G     XR    R15,R15           . SET RETURN CODE = 0
         LA    R2,#TSGTPB        . ADDRESSABILITY FOR THE GTPB
         USING GTPB,R2
         L     R14,GTPBIBUF      . GET ADDRESS OF INPUT BUFFER
         DROP  R2
         LH    R0,0(R14)         . BUFFER LENGTH
         SH    R0,&Y.A           . PREFIX LENGTH
         LH    R2,2(R14)         . OFFSET TO FIRST OPERAND
         SR    R0,R2             . OPERANDS LENGTH
         BP    *+L'*+8
         LA    R15,4             . SET RETURN CODE = 4 (NONE)
         B     &X.H
         LA    R1,4(R14,R2)      . START ADDRESS OF OPERANDS
         ALR   R0,R1
         BCTR  R0,0              . END ADDRESS OF OPERANDS
         MVI   #TSIBSP+L'#TSIBSP-1,1 SET INPUT SCAN STEP
         STM   R0,R1,#TSIBSP+L'#TSIBSP SET SCAN END-START POINTERS
&X.H     L     R2,#TSSREGS       . RESTORE CALLER'S REGISTER
         L     R14,#TSSREGR      . RESTORE CALLER'S RETURN
         BR    R14               . RETURN TO CALLER
         AIF   ('&DOC' NE 'YES').G3
         EJECT
*------- TSO GETLINE Release Input Buffer after process - Routine
*        (R14 saved/restored, R2-R13 not used by routine)
*              R14 : link register
*        Work-registers : R0, R1, R14 and R15
* On exit ---- R15 : FREEMAIN return code
.G3      SPACE 1
&REL     ST    R14,#TSSREGR      . SAVE CALLER'S RETURN
         LA    R15,#TSGTPB       . ADDRESSABILITY FOR THE GTPB
         USING GTPB,R15
         L     R1,GTPBIBUF       . GET ADDRESS OF INPUT BUFFER
         DROP  R15
         LH    R0,0(R1)          . INPUT BUFFER LENGTH
         AH    R0,&Y.E           . ROUND UP TO 8
         SRL   R0,3
         SLL   R0,3
        FREEMAIN RC,LV=(0),A=(1),SP=1
         L     R14,#TSSREGR      . RESTORE CALLER'S RETURN
         BR    R14               . RETURN TO CALLER
.H       EJECT
         AIF   ('&MSG' NE '').H1
         AIF   ('&GET' NE '').H1
         AIF   ('&SCAN' NE 'YES').H2
.H1      ANOP
&Y.A     DC    H'4'
.H2      AIF   ('&PUT' EQ '').H3
&Y.B     DC    AL2(L'&Y.D+4)
&Y.C     DC    XL6'402020202120'
&Y.D     DC    C' => PUTLINE error - Return Code = .....'
.H3      AIF   ('&GET' EQ '').H4
&Y.E     DC    H'7'
&Y.F     DC    CL2'GE'
.H4      SPACE 1
&X.I     ST    &R,#TSCPPL        . RETAIN CPPL ADDRESS
         AIF   ('&SCAN' NE 'YES').END
&TEWSCSW SETB  1
         XC    #TSIBSP(3*L'#TSIBSP),#TSIBSP ZERO'S INPUT SCAN POINTERS
         USING CPPL,&R           . SET CPPL ADDRESSABILITY
         L     R1,CPPLCBUF       . COMMAND BUFFER ADDRESS
         DROP  &R
         LH    R15,0(R1)         . BUFFER LENGTH
         SH    R15,&Y.A          . PREFIX LENGTH
         LH    R14,2(R1)         . OFFSET TO FIRST OPERAND
         SR    R15,R14           . OPERANDS LENGTH
         BNP   *+L'*+16
         LA    R0,4(R1,R14)      . START ADDRESS OF OPERANDS
         ALR   R15,R0
         BCTR  R15,0             . END ADDRESS OF OPERANDS
         MVI   #TSIBSP+L'#TSIBSP-1,1 SET INPUT SCAN STEP
         STM   R15,R0,#TSIBSP+L'#TSIBSP SET SCAN END-START POINTERS
         AIF   ('&DOC' NE 'YES').END
         SPACE 1
*------- At this point, #TSIBSP contains Input Buffer Scan Pointers
*        for BXLE ... as below :
*              +0 = 1
*              +4 = END address of text
*              +8 = START address of text
*        or, if none, #TSIBSP are all zero's
         SPACE 1
         MEXIT
.ERR1    MNOTE 8,' NOTTSO=(...,...) OPERAND(2) INVALID ************** '
         MEXIT
.ERR2    MNOTE 8,' MSG=... OPERAND MISSING ************************** '
         AIF   ('&ERR' EQ '').ERR3
         MEXIT
.ERR3    MNOTE 8,' ERR=... OPERAND MISSING ************************** '
         MEXIT
.ERR4    MNOTE 8,' MSG=... OPERAND MISSING (PUT=... NEED IT) ******** '
         MEXIT
.ERR5    MNOTE 8,' REL=... OPERAND MISSING ************************** '
         MEXIT
.ERR6    MNOTE 8,' REL=... OPERAND ? (GET=... MISSING ?) ************ '
         MEXIT
.ERR7    MNOTE 8,' MSG=... OPERAND MISSING (GET=... NEED IT) ******** '
.END     MEND
