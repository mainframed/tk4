PALL     TITLE 'PAJPALL - DISPLAY USER DATA-SETS.'
PAJPALL  START 0
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                                                                     *
* MODULE NAME = ALLOCMOD (RENAMED PAJPALL)                        -EU-*
*                                                                     *
* DESCRIPTIVE NAME = DISPLAYS INFORMATION FOR DATA SETS ALLOCATED TO  *
*                    A TSO USER.                                      *
*                                                                     *
* FUNCTION =    THIS PROGRAM WILL DISPLAY INFORMATION FOR DATA SETS   *
*               ALLOCATED TO A TSO USER. INFORMATION IS EXTRACTED     *
*               FROM THE TIOT, JFCB AND FORMAT1 DSCB.                 *
*               OPERATION =                                           *
*                  GETMAIN WORK AREAS                                 *
*                  DEFINE DIALOG VARIABLES                            *
*                  CREATE TEMPORARY TABLE AND SET CRP TO TOP          *
*                  ESTABLISH ADDRESSABILITY TO THE TIOT               *
*                  LOOP THRU DDNAME ENTRIES FOUND IN THE TIOT         *
*                    OBTAIN DSCB FOR NEEDED ENTRIES                   *
*                    CONSTRUCT TABLE ENTRIES USING INFORMATION        *
*                      FROM THE TIOT, JFCB AND FORMAT1 DSCB           *
*                  DISPLAY THE TEMPORARY TABLE                        *
*                    IF ENTER HIT, CONTINUE DISPLAY                   *
*                    IF END HIT, FINISH                               *
*                  CLOSE (DELETE) TEMPORARY TABLE                     *
*                  FREE GETMAIN'ED AREAS                              *
*                  EXIT                                               *
*                                                                     *
*               NOTES =                                               *
*                  REGISTER CONVENTIONS = STANDARD CONVENTIONS.       *
*                    REGISTERS 0 TO 1  = WORK REGISTERS               *
*                    REGISTER  2       = ADDRESSABILITY TO TIOT       *
*                    REGISTER  3       = ADDRESSABILITY TO JFCB/DSCB  *
*                    REGISTER  4       = LENGTH OF TIOT DD ENTRY      *
*                    REGISTERS 5, 6    = WORK REGISTERS               *
*                    REGISTERS 7, 8    = UNUSED REGISTERS             *
*                    REGISTER  9       = MAX TIOT DD ENTRIES PROCESSED*
*                    REGISTER  10      = ADDRESSABILITY TO GETMAINED  *
*                                        WORK AREA                    *
*                    REGISTER  11      = UNUSED REGISTER              *
*                    REGISTER  12      = BASE ADDRESSABILITY          *
*                    REGISTER  13      = SAVE AREA REGISTER           *
*                    REGISTERS 14, 15  = WORK REGISTERS               *
*               CHANGE ACTIVITY = 05/16/85 WRITTEN. JWC.              *
*                                                                     *
* ATTRIBUTES =  RE-ENTRANT, RE-USABLE & RE-FRESHABLE                  *
*                                                                     *
* ORIGIN =      EXTRACTED FROM TAPE CBT 90 MAY, FILE 53-54-55.        *
*               ADAPTED BY MOINIL P.A.                            -EU-*
*                                                                     *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         EJECT
        $DEFREG
         SPACE 1
*------- INITIALIZATION SECTION
*              (GETMAIN WORKAREA AND SAVE AREA CHAINING)
         AIF   ('&SYSPARM' EQ 'FULL').N1
        PRINT NOGEN
.N1      SPACE 1
        $XENT  BASE=R12,LV=WORKLEN,TYPE=RENT
         LR    R10,R13                 ESTABLISH ADDRESSABILITY TO
         USING WORKAREA,R10            DYNAMIC WORKAREA
         EJECT
*------- INITIALIZATION SECTION
*              (SET DIALOG CONTROL, DEFINE VARIABLES)
         SPACE 1
*                                      SET DIALOG CONTROL
         CALL  ISPLINK,(CNTRL,CNTRL1,CNTRL2),                          X
               VL,MF=(E,PARMS)
         B     VCTL10(R15)             CHECK RETURN CODE
VCTL10   B     VDEF00                  RC = 00 (CONTINUE)
         B     CTLERR04                RC = 04 (NOT VALID FOR CONTROL)
         B     CTLERR08                RC = 08 (DISPLAY PANEL / MSG)
         B     CTLERR12                RC = 12 (NOT VALID FOR CONTROL)
         B     CTLERR16                RC = 16 (NOT VALID FOR CONTROL)
         B     CTLERR20                RC = 20 (DISPLAY PANEL / MSG)
*                                      DEFINE VARIABLES
VDEF00   CALL  ISPLINK,(VDFN,DEFLIST1,ALRECFM,TYPEC,LEN4),             X
               VL,MF=(E,PARMS)
         LTR   R15,R15                 DEFINE SUCCESSFUL?
         BZ    *+L'*+4                 YES, CONTINUE DEFINE
         B     VDEF10(R15)             CHECK RETURN CODE
         CALL  ISPLINK,(VDFN,DEFLIST2,ALDISP,TYPEC,LEN5),              X
               VL,MF=(E,PARMS)
         LTR   R15,R15                 DEFINE SUCCESSFUL?
         BZ    *+L'*+4                 YES, CONTINUE DEFINE
         B     VDEF10(R15)             CHECK RETURN CODE
         CALL  ISPLINK,(VDFN,DEFLIST3,ALDSN,TYPEC,LEN30),              X
               VL,MF=(E,PARMS)
         LTR   R15,R15                 DEFINE SUCCESSFUL?
         BZ    *+L'*+4                 YES, CONTINUE DEFINE
         B     VDEF10(R15)             CHECK RETURN CODE
         CALL  ISPLINK,(VDFN,DEFLIST4,ALDDNAM,TYPEC,LEN8),             X
               VL,MF=(E,PARMS)
         B     VDEF10(R15)             CHECK RETURN CODE
VDEF10   B     TBCREAT                 RC = 00 (CONTINUE)
         B     DEFERR04                RC = 04 (NOT VALID FOR VDEF)
         B     DEFERR08                RC = 08 (DISPLAY PANEL / MSG)
         B     DEFERR12                RC = 12 (NOT VALID FOR VDEF)
         B     DEFERR16                RC = 16 (DISPLAY PANEL / MSG)
         B     DEFERR20                RC = 20 (DISPLAY PANEL / MSG)
         EJECT
*------- INITIALIZATION SECTION
*              (CREATE TEMPORARY TABLE AND POINT TO TOP)
         SPACE 1
*                                      CREATE TABLE
TBCREAT  CALL  ISPLINK,(TBCRT,TBNME,NONE,NAMELST,NOWRT,REPLC),         X
               VL,MF=(E,PARMS)
         B     TBCREA10(R15)           CHECK RETURN CODE
TBCREA10 B     TBTOP                   RC = 00 (CONTINUE)
         B     TBTOP                   RC = 04 (CONTINUE)
         B     CREERR08                RC = 08 (DISPLAY PANEL / MSG)
         B     CREERR12                RC = 12 (DISPLAY PANEL / MSG)
         B     CREERR16                RC = 16 (DISPLAY PANEL / MSG)
         B     CREERR20                RC = 20 (DISPLAY PANEL / MSG)
*                                      POSITION CRP AT TOP OF TABLE
TBTOP    CALL  ISPLINK,(TBLTP,TBNME),                                  X
               VL,MF=(E,PARMS)
         B     TBTOP10(R15)            CHECK RETURN CODE
TBTOP10  B     SETOBTAN                RC = 00 (CONTINUE)
         B     TOPERR04                RC = 04 (NOT VALID FOR TBTOP)
         B     TOPERR08                RC = 08 (NOT VALID FOR TBTOP)
         B     TOPERR12                RC = 12 (DISPLAY PANEL / MSG)
         B     TOPERR16                RC = 16 (NOT VALID FOR TBTOP)
         B     TOPERR20                RC = 20 (DISPLAY PANEL / MSG)
         SPACE 1
*------- INITIALIZATION SECTION
*              (CREATE PARAMETER LIST FOR 'OBTAIN')
         SPACE 1
*                                      PARAMETER LIST FOR OBTAIN
SETOBTAN MVC   OBTANLST(CAMLL),CAML    SET LIST FOR DSN SEARCH
         LA    R1,ALDSN1               ADDRESS OF FULL DSNAME
         ST    R1,OBTANLST+4
         LA    R1,ALVOL                ADDRESS OF VOLUME SERIAL
         ST    R1,OBTANLST+8
         LA    R1,WORK                 ADDRESS OF 160 BYTE WORK AREA
         ST    R1,OBTANLST+12
         OI    OBTANLST+12,X'80'       INDICATE LAST PARAMETER IN LIST
         SPACE 1
*------- INITIALIZATION SECTION
*              (ESTABLISH ADDRESSABILITY TO TIOT DD ENTRY)
         SPACE 1
         L     R2,CVTPTR               R2 - ADDRESS OF CVT
         USING CVT,R2
         L     R2,CVTTCBP              R2 - ADDR OF TCB/ASCB ADDR LIST
         DROP  R2
         L     R2,4(R2)                R2 - ADDRESS OF CURRENT TCB
         USING TCB,R2
         L     R2,TCBTIO               R2 - ADDRESS OF TIOT (BEGINNING)
         DROP  R2
         USING TIOT,R2
         LA    R2,TIOENTRY             R2 - ADDR OF TIOT (DD ENTRY)
         DROP  R2
         USING TIOENTRY,R2
         LA    R9,400                  R9 - SET MAX NUMBER TO LOOP
         EJECT
*------- PROCESSING SECTION
*              (EXTRACT DDNAME, VOLSER AND DSN)
         SPACE 1
LOADTBL  XR    R4,R4                   R4 - LENGTH OF TIOT DD ENTRY
         ICM   R4,B'0001',TIOELNGH     LOAD LENGTH OF ENTRY
         BZ    DISPL1                  IF ZERO, DISPLAY TABLE
         NI    SWITCH,255-DSNFLG       INITIALIZE DSN FLAG
         MVC   ALDDNAM(L'ALDDNAM),=CL30' ' INITIALIZE ALLOCATED DDNAME
         MVC   ALDSN(L'ALDSN),=CL30' ' INITIALIZE ALLOCATED DSN(1ST 30)
         MVC   ALDSN1(L'ALDSN1),=CL30' ' INIT. ALLOCATED DSN(1ST 30)
         MVC   ALDSN2(L'ALDSN2),=CL30' ' INIT. ALLOCATED DSN(END)
         MVC   ALDISP(L'ALDISP),=CL30' ' INITIALIZE ALLOCATED DISP
         MVC   ALDSORG(L'ALDSORG),=CL30' ' INITIALIZE ALLOCATED DSORG
         MVC   ALRECFM(L'ALRECFM),=CL30' ' INITIALIZE ALLOCATED RECFM
         MVC   ALBLKSZ(L'ALBLKSZ),=CL30' ' INIT. ALLOCATED BLKSIZE
         MVC   ALRECL(L'ALRECL),=CL30' ' INITIALIZE ALLOCATED LRECL
         MVC   ALVOL(L'ALVOL),=CL30' ' INITIALIZE ALLOCATED VOLSER
         TM    TIOESTTA,TIOSLTYP       HAS THIS TIOT ENTRY BEEN FREED?
         BO    NEXTIOT                 YES, PROCEED TO NEXT TIOT ENTRY
         MVC   ALDDNAM,TIOEDDNM        GET DDNAME FROM TIOT
         XR    R3,R3                   FIRST BYTE TO '00', ADJUST
         ICM   R3,B'0111',TIOEJFCB     R3 - ADDRESS OF JFCB
         USING ZB502,R3                ESTABLISH JFCB ADDRESSABILITY
         MVC   ALVOL(L'ALVOL),JFCBVOLS GET VOLSER FROM JFCB
         MVC   ALDSN(L'ALDSN),JFCBDSNM GET 1ST 30 CHARACTERS OF DSN
         MVC   ALDSN1(L'ALDSN1),JFCBDSNM GET 1ST 30 CHARACTERS OF DSN
         MVC   ALDSN2(L'ALDSN2),JFCBDSNM+L'ALDSN GET LAST 14 CHAR.DSN
         CLC   ALDSN2(L'ALDSN2),=CL30' ' DSN LONGER THAN 30 CHARACTERS?
         BE    CHKDISP                 NO, GET DISPOSITION
         OI    SWITCH,DSNFLG           YES, SET DSN FLAG
         SPACE 1
*------- PROCESSING SECTION
*              (WRITE FIRST 30 CHAR OF DSN TO TABLE)
         SPACE 1
         MVC   VOLSAVE,ALVOL           SAVE VOLSER FOR NEXT LINE
         MVC   ALVOL(L'ALVOL),=CL30' ' CLEAR VOLSER FOR THIS LINE
         LA    R6,ALDSN1+L'ALDSN1-1    R6 - POINT TO END OF ALDSN1
         LA    R5,8                    R5 - MAX NUM OF CHAR TO VIEW
FINDEND  CLC   0(1,R6),=CL1'.'         IS THIS THE END OF LAST SEGMENT?
         BE    FOUNDIT                 YES, SAVE IT TO BE ADDED TO NEXT
         BCTR  R6,0                    POINT AT PREVIOUS POSITION
         BCT   R5,FINDEND              GO CHECK FOR SEGMENT END
FOUNDIT  MVC   ALDSN(L'ALDSN),=CL30' ' CLEAR ALDSN TO PREPARE FOR MOVE
         LA    R1,ALDSN1               FIND NUMBER OF CHARACTERS
         SLR   R6,R1                       TO BE MOVED FROM
         EX    R6,*+L'*+4                      ALDSN1 TO ALDSN
         B     REPLACE
         MVC   ALDSN(*-*),ALDSN1       MOVE FIRST PART OF DSN
         EJECT
*------- PROCESSING SECTION
*              (DISP, DSORG, RECFM, LRECL & BLKSIZE FROM JFCB)
         SPACE 1
CHKDISP  TM    JFCBIND2,JFCSHARE       DISPOSITION SHR?
         BZ    *+L'*+10                NO, CHECK TEMP
         MVC   ALDISP(4),=CL4'SHR'     YES, SET DISP TO SHR
         B     CHKDSOR1                GO CHECK DSORG
         TM    JFCBIND2,JFCTEMP        DISPOSITION TEMP?
         BZ    *+L'*+10                NO, CHECK NEW
         MVC   ALDISP(4),=CL4'TEMP'    YES, SET DISP TO TEMP
         B     CHKDSOR1                GO CHECK DSORG
         TM    JFCBIND2,JFCNEW         DISPOSITION NEW?
         BNO   *+L'*+10                NO, CHECK MOD
         MVC   ALDISP(4),=CL4'NEW'     YES, SET DISP TO NEW
         B     CHKDSOR1                GO CHECK DSORG
         TM    JFCBIND2,JFCMOD         DISPOSITION MOD?
         BZ    *+L'*+10                NO, CHECK OLD
         MVC   ALDISP(4),=CL4'MOD'     YES, SET DISP TO MOD
         B     CHKDSOR1                GO CHECK DSORG
         TM    JFCBIND2,JFCOLD         DISPOSITION OLD?
         BZ    *+L'*+10                NO, SET DISP
         MVC   ALDISP(4),=CL4'OLD'     YES, SET DISP TO OLD
         B     CHKDSOR1                GO CHECK DSORG
         MVC   ALDISP(4),=CL4'????'    SET DISP TO ????
CHKDSOR1 TM    JFCDSRG2,JFCORGAM       DSORG VSAM?
         BZ    *+L'*+10                NO, CHECK INDEXED SEQUENTIAL
         MVC   ALDSORG(2),=CL2'VS'     YES, SET DSORG TO VS
         B     CHKRCF1                 GO CHECK RECFM
         TM    JFCDSRG1,JFCORGIS       DSORG INDEXED SEQUENTIAL?
         BZ    *+L'*+10                NO, CHECK PHYSICAL SEQUENTIAL
         MVC   ALDSORG(2),=CL2'IS'     YES, SET DSORG TO IS
         B     CHKFMT1                 GO CHECK UNMOVABLE
         TM    JFCDSRG1,JFCORGPS       DSORG PHYSICAL SEQUENTIAL?
         BZ    *+L'*+10                NO, CHECK DIRECT ACCESS
         MVC   ALDSORG(2),=CL2'PS'     YES, SET DSORG TO PS
         B     CHKFMT1                 GO CHECK UNMOVABLE
         TM    JFCDSRG1,JFCORGDA       DSORG DIRECT ACCESS?
         BZ    *+L'*+10                NO, CHECK PARTITIONED
         MVC   ALDSORG(2),=CL2'DA'     YES, SET DSORG TO DA
         B     CHKFMT1                 GO CHECK UNMOVABLE
         TM    JFCDSRG1,JFCORGPO       DSORG PARTITIONED?
         BZ    OBTAINIT                NO, OBTAIN FORMAT 1 DSCB
         MVC   ALDSORG(2),=CL2'PO'     YES, SET DSORG TO PO
CHKFMT1  TM    JFCDSRG1,JFCORGU        DSORG UNMOVABLE?
         BZ    CHKRCF1                 NO, CHECK RECFM
         MVI   ALDSORG+2,C'U'          YES, ADD DSORG U
CHKRCF1  TM    JFCRECFM,JFCUND         RECFM UNDEFINED?
         BNO   *+L'*+8                 NO, CHECK FIXED
         MVI   ALRECFM,C'U'            YES, SET RECFM TO U
         B     CHKS1                   GO CHECK SPANNED
         TM    JFCRECFM,JFCFIX         RECFM FIXED?
         BZ    *+L'*+8                 NO, CHECK VARIABLE
         MVI   ALRECFM,C'F'            YES, SET RECFM TO F
         B     CHKB1                   GO CHECK BLOCKED
         TM    JFCRECFM,JFCVAR         RECFM VARIABLE?
         BZ    OBTAINIT                NO, OBTAIN FORMAT 1 DSCB
         MVI   ALRECFM,C'V'            YES, SET RECFM TO V
CHKB1    TM    JFCRECFM,JFCRFB         RECFM BLOCKED?
         BZ    CHKS1                   NO, CHECK SPANNED
         MVI   ALRECFM+1,C'B'          YES, SET RECFM TO B
CHKS1    TM    JFCRECFM,JFCRFS         RECFM SPANNED?
         BZ    *+L'*+8                 NO, CHECK ASA CONTROL
         MVI   ALRECFM+2,C'S'          YES, SET RECFM TO S
         B     GETBLK1                 GET MAX BLOCK SIZE
         TM    JFCRECFM,JFCASA         RECFM ASA CONTROL?
         BZ    *+L'*+8                 NO, CHECK MACHINE CODE CONTROL
         MVI   ALRECFM+2,C'A'          YES, SET RECFM TO A
         B     GETBLK1                 GET MAX BLOCK SIZE
         TM    JFCRECFM,JFCMAC         RECFM MACHINE CODE CONTROL?
         BZ    GETBLK1                 NO, GET MAX BLOCK SIZE
         MVI   ALRECFM+2,C'M'          YES, SET RECFM TO M
GETBLK1  XR    R1,R1
         ICM   R1,B'0011',JFCBLKSI     LOAD BLOCK SIZE FROM JFCB
         CVD   R1,DEC                  CONVERT TO DECIMAL
         MVC   CONV,=XL6'402020202020' MOVE EDIT PATTERN TO WORK AREA
         ED    CONV,DEC+5              CONVERT TO ZONED
         MVC   ALBLKSZ(L'ALBLKSZ),CONV+1 MOVE TO OUTPUT AREA
         XR    R1,R1
         ICM   R1,B'0011',JFCLRECL     LOAD LOGICAL REC LEN FROM JFCB
         CVD   R1,DEC                  CONVERT TO DECIMAL
         MVC   CONV,=XL6'402020202020' MOVE EDIT PATTERN TO WORK AREA
         ED    CONV,DEC+5              CONVERT TO ZONED
         MVC   ALRECL(L'ALRECL),CONV+1 MOVE TO OUTPUT AREA
         DROP  R3                      DROP JFCB ADDRESSABILITY
         B     REPLACE
         EJECT
*------- PROCESSING SECTION
*              (DISP, DSORG, RECFM, LRECL & BLKSIZE FROM DSCB)
         SPACE 1
OBTAINIT OBTAIN OBTANLST               GET DSCB1 INFORMATION
         LTR   R15,R15                 INFORMATION RETURNED?
         BNZ   REPLACE                 NO, WRITE OUT INFO AND CONTINUE
         LA    R3,WORK
         USING DS1FMTID,R3
         TM    DS1DSORG+1,DS1ORGAM     DSORG VSAM?
         BZ    *+L'*+10                NO, CHECK INDEXED SEQUENTIAL
         MVC   ALDSORG(2),=CL2'VS'     YES, SET DSORG TO VS
         B     CHKRCF2                 GO CHECK RECFM
         TM    DS1DSORG,DS1DSGIS       DSORG INDEXED SEQUENTIAL?
         BZ    *+L'*+10                NO, CHECK PHYSICAL SEQUENTIAL
         MVC   ALDSORG(2),=CL2'IS'     YES, SET DSORG TO IS
         B     CHKFMT2                 GO CHECK UNMOVABLE
         TM    DS1DSORG,DS1DSGPS       DSORG PHYSICAL SEQUENTIAL?
         BZ    *+L'*+10                NO, CHECK DIRECT ACCESS
         MVC   ALDSORG(2),=CL2'PS'     YES, SET DSORG TO PS
         B     CHKFMT2                 GO CHECK UNMOVABLE
         TM    DS1DSORG,DS1DSGDA       DSORG DIRECT ACCESS?
         BNO   *+L'*+10                NO, CHECK PARTITIONED
         MVC   ALDSORG(2),=CL2'DA'     YES, SET DSORG TO DA
         B     CHKFMT2                 GO CHECK UNMOVABLE
         TM    DS1DSORG,DS1DSGPO       DSORG PARTITIONED?
         BZ    CHKFMT2                 NO, CHECK UNMOVABLE
         MVC   ALDSORG(2),=CL2'PO'     YES, SET DSORG TO PO
CHKFMT2  TM    DS1DSORG,DS1DSGU        DSORG UNMOVABLE?
         BZ    CHKRCF2                 NO, CHECK RECFM
         MVI   ALDSORG+2,C'U'          YES, ADD DSORG U
CHKRCF2  TM    DS1RECFM,DS1RECFU       RECFM UNDEFINED?
         BNO   *+L'*+8                 NO, CHECK FIXED
         MVI   ALRECFM,C'U'            YES, SET RECFM TO U
         B     CHKS2                   GO CHECK SPANNED
         TM    DS1RECFM,DS1RECFF       RECFM FIXED?
         BZ    *+L'*+8                 NO, CHECK VARIABLE
         MVI   ALRECFM,C'F'            YES, SET RECFM TO F
         B     CHKB2                   GO CHECK BLOCKED
         TM    DS1RECFM,DS1RECFV       RECFM VARIABLE?
         BZ    CHKB2                   NO, CHECK FOR BLOCKED
         MVI   ALRECFM,C'V'            YES, SET RECFM TO V
CHKB2    TM    DS1RECFM,DS1RECFB       RECFM BLOCKED?
         BZ    CHKS2                   NO, CHECK SPANNED
         MVI   ALRECFM+1,C'B'          YES, SET RECFM TO B
CHKS2    TM    DS1RECFM,DS1RECFS       RECFM SPANNED?
         BZ    *+L'*+8                 NO, CHECK ASA CONTROL
         MVI   ALRECFM+2,C'S'          YES, SET RECFM TO S
         B     GETBLK2                 GET MAX BLOCK SIZE
         TM    DS1RECFM,DS1RECFA       RECFM ASA CONTROL?
         BZ    *+L'*+8                 NO, CHECK MACHINE CODE CONTROL
         MVI   ALRECFM+2,C'A'          YES, SET RECFM TO A
         B     GETBLK2                 GET MAX BLOCK SIZE
         TM    DS1RECFM,DS1RECMC       RECFM MACHINE CODE CONTROL?
         BZ    GETBLK2                 NO, GET MAX BLOCK SIZE
         MVI   ALRECFM+2,C'M'          YES, SET RECFM TO M
GETBLK2  XR    R1,R1
         ICM   R1,B'0011',DS1BLKL      LOAD BLOCK SIZE FROM DSCB1
         CVD   R1,DEC                  CONVERT TO DECIMAL
         MVC   CONV,=XL6'402020202020' MOVE EDIT PATTERN TO WORK AREA
         ED    CONV,DEC+5              CONVERT TO ZONED
         MVC   ALBLKSZ(L'ALBLKSZ),CONV+1 MOVE TO OUTPUT AREA
         XR    R1,R1
         ICM   R1,B'0011',DS1LRECL     LOAD LOGICAL REC LEN FROM DSCB1
         CVD   R1,DEC                  CONVERT TO DECIMAL
         MVC   CONV,=XL6'402020202020' MOVE EDIT PATTERN TO WORK AREA
         ED    CONV,DEC+5              CONVERT TO ZONED
         MVC   ALRECL(L'ALRECL),CONV+1 MOVE TO OUTPUT AREA
         DROP  R3
         EJECT
*------- PROCESSING SECTION
*              (REPLACE VARIABLES AND ADD TO TABLE)
         SPACE 1
*                                      REPLACE VARIABLE VALUES
REPLACE  CALL  ISPLINK,(VRPLC,NAMELST,LENLST1,ALRECFM),                X
               VL,MF=(E,PARMS)
         B     VREP10(R15)             CHECK RETURN CODE
VREP10   B     TBADD                   RC = 00 (CONTINUE)
         B     REPERR04                RC = 04 (NOT VALID FOR VREPLACE)
         B     REPERR08                RC = 08 (NOT VALID FOR VREPLACE)
         B     REPERR12                RC = 12 (NOT VALID FOR VREPLACE)
         B     REPERR16                RC = 16 (DISPLAY PANEL / MSG)
         B     REPERR20                RC = 20 (DISPLAY PANEL / MSG)
*                                      ADD VARIABLES TO TABLE
TBADD    CALL  ISPLINK,(TBLAD,TBNME),                                  X
               VL,MF=(E,PARMS)
         B     TBADD10(R15)            CHECK RETURN CODE
TBADD10  B     TESTDSN                 RC = 00 (CONTINUE)
         B     ADDERR04                RC = 04 (NOT VALID FOR TBADD)
         B     ADDERR08                RC = 08 (DISPLAY PANEL / MSG)
         B     ADDERR12                RC = 12 (DISPLAY PANEL / MSG)
         B     ADDERR16                RC = 16 (DISPLAY PANEL / MSG)
         B     ADDERR20                RC = 20 (DISPLAY PANEL / MSG)
         SPACE 1
*------- PROCESSING SECTION
*              (WRITE REMAINDER OF DSN TO TABLE)
         SPACE 1
TESTDSN  TM    SWITCH,DSNFLG           DSN LONGER THAN 30 CHARACTERS?
         BZ    NEXTIOT                 NO, POINT TO NEXT TIOT ENTRY
         MVC   ALDSN(L'ALDSN),=CL30' ' CLEAR ALDSN
         LA    R6,ALDSN1(R6)           RESET R6
         LA    R1,8                    DETERMINE NUMBER OF CHARACTERS
         SR    R1,R5                       TO BE ADDED TO ALDSN2
         BNP   SKIPMOVE                NO CHARACTERS TO BE MOVED
         LA    R6,1(R6)                POINT TO SEGMENT TO BE MOVED
         BCT   R1,*+L'*+6              DECREMENT R1 FOR MOVE
         MVC   ALDSN+4(*-*),0(R6)      MOVE SECOND PART OF DSN
         EX    R1,*-6                  MOVE SEGMENT ALDSN1 TO ALDSN
SKIPMOVE LA    R6,ALDSN+4(R1)          SKIP PAST SEGMENT FROM ALDSN1
         MVC   1(L'ALDSN2,R6),ALDSN2   MOVE ALDSN2 TO ALDSN
         MVC   ALDDNAM(L'ALDDNAM),=CL30' ' CLEAR DDNAME FOR NEXT LINE
         MVC   ALVOL,VOLSAVE           RESTORE ALVOL
         NI    SWITCH,255-DSNFLG       RESTORE DSNFLG
         B     CHKDISP                 GET MORE INFORMATION
NEXTIOT  AR    R2,R4                   POINT TO NEXT DD ENTRY OF TIOT
         BCT   R9,LOADTBL              CONTINUE TO LOAD TABLE
         DROP  R2
         EJECT
*------- DISPLAY SECTION
*              (TOP OF TABLE AND DISPLAY USING 'PAJALL' PANEL)
         SPACE 1
*                                      POSITION CRP AT TOP OF TABLE
DISPL1   CALL  ISPLINK,(TBLTP,TBNME),                                  X
               VL,MF=(E,PARMS)
         B     TBTOP20(R15)            CHECK RETURN CODE
TBTOP20  B     DISPL2                  RC = 00 (CONTINUE)
         B     TOPERR04                RC = 04 (NOT VALID FOR TBTOP)
         B     TOPERR08                RC = 08 (NOT VALID FOR TBTOP)
         B     TOPERR12                RC = 12 (DISPLAY PANEL / MSG)
         B     TOPERR16                RC = 16 (NOT VALID FOR TBTOP)
         B     TOPERR20                RC = 20 (DISPLAY PANEL / MSG)
*                                      DISPLAY TABLE USING 'PAJALL'
DISPL2   CALL  ISPLINK,(TBLDS,TBNME,TBPAN),                            X
               VL,MF=(E,PARMS)
         B     TBDIS10(R15)            CHECK RETURN CODE
TBDIS10  B     DISPL2                  RC = 00 (CONTINUE)
         B     DISPL2                  RC = 04 (CONTINUE)
         B     FINISH                  RC = 08 (CONTINUE)
         B     DISERR12                RC = 12 (DISPLAY PANEL / MSG)
         B     DISERR16                RC = 16 (NOT VALID FOR TBDISPL)
         B     DISERR20                RC = 20 (DISPLAY PANEL / MSG)
         EJECT
*------- ERROR PROCESSING SECTION
         SPACE 1
CTLERR04 MVI   ALMSGID2,C'A'           SET MESSAGE-ID
         B     CTLERROP
CTLERR08 MVI   ALMSGID2,C'B'           SET MESSAGE-ID
         B     CTLERROP
CTLERR12 MVI   ALMSGID2,C'C'           SET MESSAGE-ID
         B     CTLERROP
CTLERR16 MVI   ALMSGID2,C'D'           SET MESSAGE-ID
         B     CTLERROP
CTLERR20 MVI   ALMSGID2,C'E'           SET MESSAGE-ID
CTLERROP MVI   ALMSGID1,C'0'           SET OPERATION MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
ADDERR04 MVI   ALMSGID2,C'A'           SET MESSAGE-ID
         B     ADDERROP
ADDERR08 MVI   ALMSGID2,C'B'           SET MESSAGE-ID
         B     ADDERROP
ADDERR12 MVI   ALMSGID2,C'C'           SET MESSAGE-ID
         B     ADDERROP
ADDERR16 MVI   ALMSGID2,C'D'           SET MESSAGE-ID
         B     ADDERROP
ADDERR20 MVI   ALMSGID2,C'E'           SET MESSAGE-ID
ADDERROP MVI   ALMSGID1,C'1'           SET OPERATION MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
CREERR08 MVI   ALMSGID2,C'A'           SET MESSAGE-ID
         B     CREERROP
CREERR12 MVI   ALMSGID2,C'B'           SET MESSAGE-ID
         B     CREERROP
CREERR16 MVI   ALMSGID2,C'C'           SET MESSAGE-ID
         B     CREERROP
CREERR20 MVI   ALMSGID2,C'D'           SET MESSAGE-ID
CREERROP MVI   ALMSGID1,C'2'           SET OPERATION MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
DEFERR04 MVI   ALMSGID2,C'A'           SET MESSAGE-ID
         B     DEFERROP
DEFERR08 MVI   ALMSGID2,C'B'           SET MESSAGE-ID
         B     DEFERROP
DEFERR12 MVI   ALMSGID2,C'C'           SET MESSAGE-ID
         B     DEFERROP
DEFERR16 MVI   ALMSGID2,C'D'           SET MESSAGE-ID
         B     DEFERROP
DEFERR20 MVI   ALMSGID2,C'E'           SET MESSAGE-ID
DEFERROP MVI   ALMSGID1,C'3'           SET OPERATION MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
DISERR12 MVI   ALMSGID2,C'A'           SET MESSAGE-ID
         B     DISERROP
DISERR16 MVI   ALMSGID2,C'B'           SET MESSAGE-ID
         B     DISERROP
DISERR20 MVI   ALMSGID2,C'C'           SET MESSAGE-ID
DISERROP MVI   ALMSGID1,C'4'           SET OPERATION MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
REPERR04 MVI   ALMSGID2,C'A'           SET MESSAGE-ID
         B     REPERROP
REPERR08 MVI   ALMSGID2,C'B'           SET MESSAGE-ID
         B     REPERROP
REPERR12 MVI   ALMSGID2,C'C'           SET MESSAGE-ID
         B     REPERROP
REPERR16 MVI   ALMSGID2,C'D'           SET MESSAGE-ID
         B     REPERROP
REPERR20 MVI   ALMSGID2,C'E'           SET MESSAGE-ID
REPERROP MVI   ALMSGID1,C'5'           SET OPERATION MESSAGE-ID
         B     DISPL3                  DISPLAY PANEL WITH MESSAGE
TOPERR04 MVI   ALMSGID2,C'A'           SET MESSAGE-ID
         B     TOPERROP
TOPERR08 MVI   ALMSGID2,C'B'           SET MESSAGE-ID
         B     TOPERROP
TOPERR12 MVI   ALMSGID2,C'C'           SET MESSAGE-ID
         B     TOPERROP
TOPERR16 MVI   ALMSGID2,C'D'           SET MESSAGE-ID
         B     TOPERROP
TOPERR20 MVI   ALMSGID2,C'E'           SET MESSAGE-ID
TOPERROP MVI   ALMSGID1,C'6'           SET OPERATION MESSAGE-ID
DISPL3   MVC   ALMSGID0,=CL6'PAJA00'   COMPLETE MESSAGE-ID
*                                      DISPLAY TABLE USING 'PAJALL'
         CALL  ISPLINK,(TBLDS,TBNME,TBPAN,ALMSGID),                    X
               VL,MF=(E,PARMS)
         SPACE 1
*------- CLOSING SECTION
*              (FREE GETMAINED AREA, SET RETURN CODE RESTORE REGS)
         SPACE 1
*                                      RELEASE AREA HELP BY TEMP TABLE
FINISH   CALL  ISPLINK,(TBLEND,TBNME),                                 X
               VL,MF=(E,PARMS)
         DROP  R10
        $XRET  CC=(R15),LV=WORKLEN,TYPE=RENT
         EJECT
*------- DATA CONSTANTS
         SPACE 1
CAML     CAMLST SEARCH,*-*,*-*,*-*
CAMLL    EQU   *-CAML
         SPACE 1
CNTRL    DC    CL8'CONTROL'
CNTRL1   DC    CL8'ERRORS'
CNTRL2   DC    CL8'RETURN'
VDFN     DC    CL8'VDEFINE'
VRPLC    DC    CL8'VREPLACE'
TBCRT    DC    CL8'TBCREATE'
TBLTP    DC    CL8'TBTOP'
TBLAD    DC    CL8'TBADD'
TBLDS    DC    CL8'TBDISPL'
TBLEND   DC    CL8'TBEND'
TBNME    DC    CL8'WALLTBL'
TBPAN    DC    CL8'PAJALL'
NOWRT    DC    CL8'NOWRITE'
REPLC    DC    CL8'REPLACE'
NONE     DC    CL8' '
TYPEC    DC    CL8'CHAR'
LEN4     DC    F'4'
LEN5     DC    F'5'
LEN8     DC    F'8'
LEN30    DC    F'30'
         SPACE 1
* NOTE - ALL FIELDS IN THE LISTS BELOW MUST BE IN THE SAME ORDER AS   *
*        THEY ARE DEFINED IN 'NAMELST' VECTOR.                        *
         SPACE 1
DEFLIST1 DC    A(NDF1,0)               NAMES OF VARIABLES (LENGTH 4)
         DC    CL8'WALFMT'
NDF1     EQU   ((*-DEFLIST1)-(2*4))/8
         SPACE 1
DEFLIST2 DC    A(NDF2,0)               NAMES OF VARIABLES (LENGTH 5)
         DC    CL8'WALDISP'
         DC    CL8'WALDORG'
         DC    CL8'WALBLK'
         DC    CL8'WALRECL'
NDF2     EQU   ((*-DEFLIST2)-(2*4))/8
         SPACE 1
DEFLIST3 DC    A(NDF3,0)               NAMES OF VARIABLES (LENGTH 30)
         DC    CL8'WALDSN'
NDF3     EQU   ((*-DEFLIST3)-(2*4))/8
         SPACE 1
DEFLIST4 DC    A(NDF4,0)               NAMES OF VARIABLES (LENGTH 8)
         DC    CL8'WALDD'
         DC    CL8'WALVOL'
NDF4     EQU   ((*-DEFLIST4)-(2*4))/8
         SPACE 1
NAMELST  DC    A(NNME,0)               NAMES OF VARIABLES IN TABLE
         DC    CL8'WALFMT'
         DC    CL8'WALDISP'
         DC    CL8'WALDORG'
         DC    CL8'WALBLK'
         DC    CL8'WALRECL'
         DC    CL8'WALDSN'
         DC    CL8'WALDD'
         DC    CL8'WALVOL'
NNME     EQU   ((*-NAMELST)-(2*4))/8
         SPACE 1
LENLST1  DS    0F                      LIST OF VARIABLE LENGTHS
         DC    F'4'                    LENGTH OF RECFM
         DC    F'5'                    LENGTH OF DISPOSITION
         DC    F'5'                    LENGTH OF DSORG
         DC    F'5'                    LENGTH OF BLKSIZE
         DC    F'5'                    LENGTH OF LRECL
         DC    F'30'                   LENGTH OF DSNAME-ONE
         DC    F'8'                    LENGTH OF DD-NAME
         DC    F'8'                    LENGTH OF VOLUME SERIAL
         AIF   ('&SYSPARM' EQ 'FULL').N2
        PRINT GEN
.N2      EJECT
*------- LITERAL POOL
         SPACE 1
         LTORG
         SPACE 1
*------- MACROS
         SPACE 1
        PRINT NOGEN
        CVT    DSECT=YES,LIST=YES
        IKJTCB LIST=YES
TIOT     DSECT
        IEFTIOT1
        IEFZB502 , - - - - - - - -+
        IEFJFCBN LIST=YES         +- SWA CONTROL BLOCK
DSCDSECT DSECT
        IECSDSL1 (1)
         EJECT
        PRINT GEN
*------- DYNAMIC WORK AREA
         SPACE 1
WORKAREA DSECT
SAVEAREA DS    18F                     PROGRAM SAVE AREA
DEC      DS    D                       BINARY TO DECIMAL CONVERSION
PARMS    CALL  ,(0,0,0,0,0,0),MF=L     PARM LIST FOR CALL ISPLINK
OBTANLST CAMLST SEARCH,*-*,*-*,*-*     ADDR LIST FOR OBTAIN MACRO
WORK     DS    0D,XL160                160 BYTE WORK AREA FOR OBTAIN
CONV     DS    CL6                     DECIMAL TO ZONED CONVERSION
SWITCH   DS    XL1                     FLAGS
DSNFLG   EQU   X'80'                   FLAG SET IF DSN LONGER THAN 30
         SPACE 1
*- - - - - - - - NOTE - THE FIELDS BELOW MUST BE IN THE SAME ORDER AS *
*                       THEY ARE DEFINED IN 'NAMELST' VECTOR.         *
ALRECFM  DS    CL4                     RECORD FORMAT OF ALLOCATED DSN *
ALDISP   DS    CL5                     DISPOSITION OF ALLOCATED DSN   *
ALDSORG  DS    CL5                     DATA SET ORGINIZATION OF DSN   *
ALBLKSZ  DS    CL5                     MAX BLCKSIZE OF ALLOCATED DSN  *
ALRECL   DS    CL5                     LOGICAL RECORD LENGTH OF DSN   *
ALDSN    DS    CL30                    1ST 30 CHAR OF ALLOCATED DSN   *
ALDDNAM  DS    CL8                     ALLOCATED DDNAME               *
ALVOL    DS    CL8                     VOLSER ON WHICH DSN RESIDES    *
         SPACE 1
ALDSN1   DS    CL30                    1ST 30 CHAR OF ALLOCATED DSN
ALDSN2   DS    CL14                    NEXT 14 CHAR OF ALLOCATED DSN
ALMSGID  DS    0CL8                    ----+
ALMSGID0 DS    CL6                         +
ALMSGID1 DS    CL1                         +
ALMSGID2 DS    CL1                         +--- ERROR MESSAGE-ID
VOLSAVE  DS    CL8                     ALLOCATED VOLSER SAVE AREA
         SPACE 1
WORKLEN  EQU   (((*-WORKAREA)+7)/8)*8
         SPACE 2
         END
