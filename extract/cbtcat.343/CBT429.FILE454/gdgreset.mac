GDGR     TITLE '--- GDG RESET PROGRAM ---'
        PRINT  OFF
         MACRO
&NAME   @TEST  &WNO
&NAME    TM    SWITCH,SWTST
         BZ    *+L'*+6
         BAS   R8,TRTEST
         DC    H'&WNO'
         MEND
        PRINT  ON
GDGRESET START 0
         SPACE 1
* PURPOSE :    THIS PROGRAM IS USED WITH THE GDGUTIL CLIST AND THE
*              GDGUTILP ISPF PANEL TO MODIFY THE NUMBER OF ENTRIES
*              BEING KEPT FOR A GDG INDEX.
* AUTHOR(S) :  THIS CODE WAS DOWNLOADED FROM THE NASPA BULLETIN BOARD
*              AND MODIFIED SLIGHTLY (DDNAMES AND WTO MSG) FOR USE
*              AT THE WILSON STREET REGIONAL COMPUTING CENTER
*                  P.O. BOX 7850 - ROOM B174
*                  ONE WEST WILSON STREET
*                  MADISON, WI 53707-7850
*              - J.MARTIN 4/26/89(608) 266-9525
*
* FUNCTION :   RESET NUMBER OF ENTRIES IN A GDG (MVS VERSION OPERATES
*                  ON BOTH CVOLS AND VSAM/ICF CATALOGS).
*              INPUT EXISTING GDG NAME AT SYSIN (DD-NAME=GDGIN) :
*                  GDG NAME (MAXIMUM 44 CHARACTERS LONG) FOLLOWED BY
*                    THE NEW NUMBER OF ENTRIES (MAXIMUM 3 DIGITS LONG),
*                    EVENTUALLY FOLLOWED BY THE EM/NE (EMPTY/NOEMPTY)
*                    AND/OR SC/NS (SCRATCH/NOSCRATCH) OPTION(S).
*                  THESE MUST BE SEPARATED BY ONE SPACE AT LEAST, AND
*                    IN THE RANGE OF COLUMNS 1 - 72 INCLUDED.
*              ENTRIES MUST BE > 2 AND < 255.
*              MULTIPLE RECORDS MAY BE INPUT.
*              DEFAULT OPTIONS ARE "NOEMPTY" AND "SCRATCH".
*              ANY ERROR WILL CAUSE FURTHER RECORDS NOT BE PROCESSED.
*              ENTERING DLX IN ENTRIES FIELD WILL CAUSE INDEX DELETION.
*              ** WARNING ** AS OF YET, THIS PROGRAM WILL NOT HANDLE
*                  DATA-SETS RESIDING ON MORE THAN 20 VOLUMES.
*                  ONLY THE FIRST 20 VOLUMES WILL BE RECATALOGED.
*                  SO, FOR SECURITY REASONS, YOU SHOULD FIRST LIST
*                  THE GDG YOU ARE PLANNING TO RESET.
*              THIS PROGRAM ALWAYS SCRATCHES DISK DATA-SETS AS IT
*                  UNCATALOGES THEM, UNLESS SPECIFICALLY REQUESTED BY
*                  THE USE OF OPTION NS (NOSCRATCH).
*
* EXECUTION JCL :  //...      JOB ...
*                  //RESET   EXEC PGM=GDGRESET
*                  //GDGIN     DD *
*                    ABC.TEST.GDG  255 SC NE
*                  /*
*                  //GDGOUT    DD SYSOUT=*
*                  //SYSSNAP   DD SYSOUT=* (OPTIONAL, IF SNAP DESIRED)
*                  //SYSTEST   DD SYSOUT=* (OPTIONAL, IF TEST DESIRED)
*                  //SYSUDUMP  DD SYSOUT=* (OPTIONAL, IF DUMP DESIRED)
*
* ORIGIN :     EXTRACTED FROM TAPE CBT 91 MAR, FILE 124.
*              (GDGUTIL, GDGUTILP AND RESETGDG)
*              MODIFIED BY : MOINIL P.A. (8 OCT 1991)
*              (MEMBERS WERE RENAMED : PAJCGDG, PAJGDG AND GDGRESET)
         EJECT
        $DEFREG
        $XENT  BASE=(R11,R12)
         EJECT
*------- INITIALIZATION
         SPACE 1
         USING PSA,R0
         L     R2,PSAAOLD
         DROP  R0
         USING ASCB,R2
         L     R3,ASCBASXB
         DROP  R2
         USING ASXB,R3
         L     R2,ASXBSENV
         DROP  R3
         USING ACEE,R2
         MVC   DEFCOW,ACEEUSRI     SET USER ID
         DROP  R2
         L     R0,TABLEN           GET WORK AREA
        GETMAIN R,LV=(0)
         ST    R1,TABADDR          SET THE WORKAREA ADDRESS
        EXTRACT    ATIOT,'S',FIELDS=(TIOT)
         L     R1,ATIOT            SEARCH SNAP DD
         USING TIODSECT,R1
LOOPSSN  CLC   TIOELNGH(4),=XL4'0'
         BE    RDREC
         CLC   TIOEDDNM(L'DCBDDNAM),SNAPPER+(DCBDDNAM-IHADCB)
         BNE   *+L'*+8
         OI    SWITCH,SWSNP
         B     NEXTSSN
         CLC   TIOEDDNM(L'DCBDDNAM),DDTEST
         BNE   NEXTSSN
         OI    SWITCH,SWTST
NEXTSSN  XR    R0,R0
         IC    R0,TIOELNGH
         ALR   R1,R0
         B     LOOPSSN
         DROP  R1
         SPACE 1
*------- GET AND SCAN AN INPUT REQUEST
         SPACE 1
RDREC   $READ  INAREA,DDIN         READ INPUT REC
         LTR   R15,R15
         BM    BYE
         BP    RDERR
         LM    R1,R3,=A(INREQ,1,INREQ+L'INREQ-1)
         CLI   0(R1),C' '
         BNE   *+L'*+8
         BXLE  R1,R2,*-8
         B     RDREC               NONE, SKIP
         MVI   GDGNAME,C' '
         MVC   GDGNAME+1(L'GDGNAME-1),GDGNAME
         MVC   ENTRIES(L'ENTRIES),GDGNAME
         MVI   ONEMP,C'N'          SET DEFAULT OPTIONS
         MVI   ONSCR,C' '
         NI    SWITCH,255-SWDLX-SWNOS
         LA    R0,L'GDGNAME
         LA    R15,GDGNAME
LOOPGDG  MVC   0(1,R15),0(R1)
         BXLE  R1,R2,*+L'*+4
         B     NOMORE
         CLI   0(R1),C' '
         BE    *+L'*+20
         LA    R15,1(R15)
         BCT   R0,LOOPGDG
         B     GDGTLG
         CLI   0(R1),C' '
         BNE   *+L'*+8
         BXLE  R1,R2,*-8
         B     NOMORE
         LA    R0,L'ENTRIES
         XR    R15,R15
         ICM   R15,B'0011',=CL2'00'
LOOPENT  SLL   R15,8
         IC    R15,0(R1)
         BXLE  R1,R2,*+L'*+4
         B     NOMORE
         CLI   0(R1),C' '
         BE    *+L'*+8
         BCT   R0,LOOPENT
         B     ENTTLG
         STCM  R15,B'0111',ENTRIES
LOOPCNT  BXLE  R1,R2,*+L'*+4
         B     NOMORE
         CLI   0(R1),C' '
         BE    *-12
         CLC   0(2,R1),=CL2'EM'
         BE    OPTEMP
         CLC   0(2,R1),=CL2'NE'
         BE    OPTNEMP
         CLC   0(2,R1),=CL2'SC'
         BE    OPTSCR
         CLC   0(2,R1),=CL2'NS'
         BNE   OPTINV
         CLI   ONSCR,C' '
         BNE   OPTINV
         MVI   ONSCR,C'N'
         B     SKPFLD
OPTSCR   CLI   ONSCR,C' '
         BE    SKPFLD
         B     OPTINV
OPTNEMP  CLI   ONEMP,C'N'
         BE    SKPFLD
         B     OPTINV
OPTEMP   CLI   ONEMP,C'N'
         BNE   OPTINV
         MVI   ONEMP,C' '
SKPFLD   LA    R1,1(R1)
         B     LOOPCNT
NOMORE   CLI   ONSCR,C'N'
         BNE   *+L'*+4
         OI    SWITCH,SWNOS
         MVC   MSGNAME(L'INREQ),INREQ MOVE THE RECORD TO OUTAREA
         MVI   MSGCC,C'0'
         BAS   R8,WRITPRT          WRITE THE RECORD TO REPORT
         CLC   ENTRIES,=C'DLX'     IS THIS A DELETE REQUEST ?
         BNE   *+L'*+8             NO
         OI    SWITCH,SWDLX        YES, SAY IT
         B     *+L'*+20
         CLC   ENTRIES,=C'001'     IS ENTRIES LESS THAN 1 ?
         BL    BADENT              YES, TERMINATE
         CLC   ENTRIES,=C'255'     IS ENTRIES GREATER THAN 255 ?
         BH    BADENT              YES, TERMINATE
         SPACE 1
*------- DELETE ALL THE GDG'S WITH RETAIN IF MODIFY REQUEST
         SPACE 1
         TM    SWITCH,SWDLX        IS THIS A DELETE REQUEST ?
         BO    DELREQ              YES, SKIP
         PACK  PWORK,ENTRIES       CONVERT ENTRIES TO BINARY
         CVB   R9,PWORK
         STC   R9,BGDG+3           STORE # ENTRIES IN BLDG LIST
DELREQ   MVC   GSVNAME,GDGNAME     SAVE NAME FOR LATER BLDG
         MVC   GRLNAME,GDGNAME     COPY NAME
         TRT   GRLNAME,BLANKTBL    FIND ADDRESS OF BLANK
         MVC   0(3,R1),=C'(0)'     INSERT RELATIVE GENERATION REF
        LOCATE LOCNAME             FIND OUT WHAT KIND OF CATALOG
        @TEST  0
         STCM  R1,B'1000',CATYPE   STORE THE HIGH ORDER BYTE
         L     R2,CVTPTR           GET ADDRESS OF CVT
         USING CVT,R2
         TM    CVTDCB,CVT2SPS      IS THIS VS1 ?
         BZ    *+L'*+4             NO, SKIP
         MVI   CATYPE,CVOLTYPE     IF VS1 THIS MUST BE CVOL
         DROP  R2
         TM    SWITCH,SWDLX        IS THIS A DELETE REQUEST ?
         BO    UNCREST             YES, GO DELETE
         L     R10,TABADDR         GET THE WORKAREA ADDRESS
         USING TBENTRY,R10
LOCLOOP  MVC   GDGNAME,GRLNAME     SET RELATIVE GENERATION REF
        LOCATE LOCNAME             LOCATE GENERATION(0)
        @TEST  1
         LTR   R15,R15             WAS LOCATE SUCCESSFULL ?
         BZ    *+L'*+10            YES, UNCATALOG IT
SETLRL   MVC   TNAME(4),=XL4'FFFFFFFF' WRITE FF'S TO INDICATE END TABLE
         B     LASTRL              MUST HAVE BEEN THE LAST ONE
        CATALOG UNCAT              UNCAT THE DATA-SET
        @TEST  2
         LA    R8,UNCAT-8          SET ADDRESS OF TAG FOR ERROR MSG
         LTR   R15,R15             WAS UNCAT SUCCESSFULL ?
         BNZ   ERRSNP              NO, ERROR
         MVC   MSGNAME,GDGNAME     SET UP MSG LINE
         MVC   MSGAREA(L'UNCATMSG),UNCATMSG
         BAS   R8,WRITPRT          GO WRITE MSG TO REPORT
         LA    R4,TCATBLK          GET READY FOR MVCL
         LA    R5,265              LENGTH IS 265
         LA    R6,CATBLK
         LA    R7,265
         MVCL  R4,R6               MOVE BLK INTO TABLE
         MVC   TNAME,GDGNAME       MOVE NAME INTO TABLE
         LA    R10,TBLENTRY(,R10)  INCREMENT TABLE ADDRESS
         BCT   R9,LOCLOOP          LOOP
         MVC   TNAME(4),=XL4'FFFFFFFF' WRITE FF'S TO INDICATE END TABLE
         DROP  R10
UNCREST  MVC   GDGNAME,GRLNAME     SET RELATIVE GENERATION REF
        LOCATE LOCNAME             GET THE ABSOLUTE GEN NUMBER
        @TEST  3
         LTR   R15,R15             WAS LOCATE SUCCESSFULL ?
         BNZ   LASTRL              NO, MUST HAVE BEEN THE LAST ONE
        CATALOG UNCAT              GO UNCAT THIS GEN
        @TEST  4
         LA    R8,UNCAT-8          SET ADDRESS OF TAG FOR ERROR MSG
         LTR   R15,R15             WAS UNCAT SUCCESSFULL ?
         BNZ   ERROR               NO, ERROR
         MVC   MSGNAME,GDGNAME     SET UP MSG LINE
         MVC   MSGAREA(L'UNCATMSG),UNCATMSG
         BAS   R8,WRITPRT          GO WRITE MSG TO REPORT
         TM    SWITCH,SWNOS        NO SCRATCH REQUESTED ?
         BO    UNCREST             YES, NEXT GEN
         LH    R3,CATBLK
         LA    R4,CATBLK+2
LOOPSCR  CLI   2(R4),UCB3DACC      DIRECT ACCESS DEVICE CLASS ?
         BNE   DONTSCR             NO, DON'T SCRATCH THIS
         MVC   SCRDC(L'SCRDC+L'SCRVSN),0(R4)
         XC    SCRSC,SCRSC
         XR    R0,R0
        SCRATCH SCRNAME            GO SCRATCH THIS GEN
        @TEST  5
         LA    R8,SCRNAME-8        SET ADDRESS OF TAG FOR ERROR MSG
         LTR   R15,R15             WAS SCRATCH SUCCESSFULL ?
         BNZ   ERROR               NO, ERROR
         MVC   MSGNAME,GDGNAME     SET UP MSG LINE
         MVC   MSGAREA(L'SCRMSG),SCRMSG
         MVC   MSGAREA+L'SCRMSG+1(L'SCRVSN),SCRVSN
         BAS   R8,WRITPRT          GO WRITE MSG TO REPORT
DONTSCR  LA    R4,L'SCRDC+L'SCRVSN(R4)
         BCT   R3,LOOPSCR          LOOP
         B     UNCREST             NEXT GEN
LASTRL   TM    CATYPE,CVOLTYPE     IS THIS A CVOL ?
         BZ    ICFDEL              NO, USE IDCAMS
        INDEX  DELIDX              DELETE THE INDEX
        @TEST  6
         LA    R8,DELIDX-8         SET ADDRESS OF TAG FOR ERROR MSG
         LTR   R15,R15             WAS DELETE SUCCESSFULL ?
         BNZ   ERROR               NO, ERROR
         B     DELOK
ICFDEL   MVC   DELCNM(L'DELCNM),GSVNAME MOVE THE GDG NAME INTO STMT
         LA    R1,IDCDEL           POINT R1 TO THE PARM LIST
         L     R15,=V(IDCAMSX)     GET THE ADDR OF THE IDCAMS INTERFACE
         BASR  R14,R15             GO UNCAT
         LTR   R15,R15             SUCCESSFULL ?
         BNZ   IDCERROR            NO, BRANCH TO HANDLE IDCAMS ERROR
DELOK    MVC   MSGNAME,GSVNAME     SET UP MSG LINE
         MVC   MSGAREA(L'DELXMSG),DELXMSG
         BAS   R8,WRITPRT          GO WRITE MSG TO REPORT
         TM    SWITCH,SWDLX        IS THIS A DELETE REQUEST ?
         BO    RDREC               YES, END
         SPACE 1
*------- RECATALOG THE NEEDED GDG'S
         SPACE 1
         TM    CATYPE,CVOLTYPE     IS THIS A CVOL ?
         BZ    ICFDEF              NO, USE IDCAMS
         LA    R1,64               SCRATCH (DELETE) OPTION
         TM    SWITCH,SWNOS        NO SCRATCH REQUESTED ?
         BZ    *+L'*+2             NO
         XR    R1,R1               YES, SET THE NOSCRATCH OPTION
         STC   R1,BGDG+2
        INDEX  BGDG                GO BUILD NEW INDEX USING NEW ENTRIES
        @TEST  7
         LA    R8,BGDG-8           SET ADDRESS OF TAG FOR ERROR MSG
         LTR   R15,R15             SUCCESSFULL ?
         BNZ   ERROR               NO, ERROR
         B     INDEXOK
ICFDEF   MVC   DEFCNM(L'DEFCNM),GSVNAME MOVE IN THE GDG NAME
         MVC   DEFCLM,ENTRIES      MOVE IN THE LIMIT
         MVC   DEFCEM,ONEMP        MOVE IN THE EMPTY OPTION
         MVC   DEFCSC,ONSCR        MOVE IN THE SCRATCH OPTION
         LA    R1,IDCDEF           POINT R1 TO THE PARM LIST
         L     R15,=V(IDCAMSX)     GET THE ADDR OF THE IDCAMS INTERFACE
         BASR  R14,R15             GO UNCAT
         LTR   R15,R15             SUCCESSFULL ?
         BNZ   IDCERROR            NO, BRANCH TO HANDLE IDCAMS ERROR
INDEXOK  MVC   MSGNAME,GSVNAME     SET UP MSG LINE
         MVC   MSGAREA(L'BLDGMSG),BLDGMSG
         MVC   MSGAREA+L'BLDGMSG(L'ENTRIES),ENTRIES
         BAS   R8,WRITPRT          GO WRITE MSG TO REPORT
         L     R10,TABADDR         LOAD START ADDRESS OF SAVE TABLE
         USING TBENTRY,R10
         CLC   TNAME(4),=XL4'FFFFFFFF' IS THERE ANYTHING TO RECATALOG ?
         BE    RDREC               NO, END
CATLOOP  MVC   GDGNAME,TNAME       MOVE IN NAME
         MVC   CATBLK(242),TVOLLIST MOVE IN VOLUME LIST
        CATALOG CATNAME            GO CATALOG THE DATA-SET
        @TEST  8
         LA    R8,CATNAME-8        SET ADDRESS OF TAG FOR ERROR MSG
         LTR   R15,R15             SUCCESSFULL ?
         BNZ   ERRSNP              NO, ERROR
         MVC   MSGNAME,GDGNAME     SET UP MSG LINE
         MVC   MSGAREA(L'CATMSG),CATMSG
         BAS   R8,WRITPRT          GO WRITE MSG TO REPORT
         LA    R10,TBLENTRY(,R10)  INCREMENT TABLE ADDRESS
         CLC   TNAME(4),=XL4'FFFFFFFF' IS THIS THE LAST ENTRY ?
         BNE   CATLOOP             NO, LOOP
         B     RDREC               YES, END
         DROP  R10
         SPACE 1
        PRINT  NOGEN
RDERR    MVC   MSGNAME(L'RDRMSG),RDRMSG READ INPUT RECORDS MSG
         B     WERRMSG
GDGTLG   MVC   MSGNAME(L'GDGMSG),GDGMSG GDG NAME TOO LONG MSG
         B     WERRMSG
ENTTLG   MVC   MSGNAME(L'ENTMSG),ENTMSG ENTRIES TOO LONG MSG
         B     WERRMSG
OPTINV   MVC   MSGNAME(L'OPTMSG),OPTMSG INVALID OPTION MSG
         B     WERRMSG
BADENT   MVC   MSGNAME(L'INVMSG),INVMSG WRITE INVALID ENTRIES MSG
WERRMSG  BAS   R8,WRITPRT
         MVC   CCODE,=F'99'
         B     TERM
ERRSNP   OI    SWITCH,SWSNR        SET SNAP REQUEST
ERROR    ST    R15,CCODE           STORE RETURN CODE FROM CAMLST
         MVC   MSGNAME(L'CAMLMSG),CAMLMSG
         MVC   MSGNAME+L'CAMLMSG+1(8),0(R8) MOVE IN THE TAG
         MVC   MSGNAME+L'CAMLMSG+10(6),=CL6'- RC ='
         CVD   R15,PWORK
         MVC   MSGNAME+L'CAMLMSG+16(4),=XL4'40202120'
         ED    MSGNAME+L'CAMLMSG+16(4),PWORK+L'PWORK-2
         BAS   R8,WRITPRT
         B     SNAPIT
IDCERROR ST    R15,CCODE           SAVE RETURN CODE FROM IDCAMS
         MVC   MSGNAME(L'IDCSMSG),IDCSMSG
         CVD   R15,PWORK
         MVC   MSGNAME+L'IDCSMSG(4),=XL4'40202120'
         ED    MSGNAME+L'IDCSMSG(4),PWORK+L'PWORK-2
         BAS   R8,WRITPRT
SNAPIT   TM    SWITCH,SWSNP+SWSNR
         BNO   TERM
         LA    R9,TBBL(,R10)
        OPEN   (SNAPPER,OUTPUT)
         TM    SNAPPER+(DCBOFLGS-IHADCB),DCBOFOPN
         BO    EXSNP
         MVC   MSGNAME(L'SNPOMSG),SNPOMSG
         B     PSNP
EXSNP   SNAP   DCB=SNAPPER,PDATA=(PSW,REGS),STORAGE=(CATBLK,BLANKTBL)
         LTR   R15,R15
         BNZ   ESNP
        SNAP   DCB=SNAPPER,STORAGE=((R10),(R9))
         LTR   R15,R15
         BZ    CLSNP
ESNP     OI    SWITCH,SWSNE
         MVC   MSGNAME(L'SNPEMSG),SNPEMSG
         CVD   R15,PWORK
         MVC   MSGNAME+L'SNPEMSG(4),=XL4'40202120'
         ED    MSGNAME+L'SNPEMSG(4),PWORK+L'PWORK-2
         BAS   R8,WRITPRT
CLSNP   CLOSE  (SNAPPER)
         LTR   R15,R15
         BZ    TSNP
         MVC   MSGNAME(L'SNPCMSG),SNPCMSG
         B     PSNP
TSNP     TM    SWITCH,SWSNE
         BO    TERM
         MVC   MSGNAME(L'SNPTMSG),SNPTMSG
PSNP     BAS   R8,WRITPRT
TERM     MVC   MSGNAME(L'TERMMSG),TERMMSG WRITE TERMINATION MESSAGE
         MVI   MSGCC,C'0'
         BAS   R8,WRITPRT
        PRINT  GEN
         SPACE 1
BYE     $RCLOSE
         OC    CCODE,CCODE
         BNZ   *+L'*+4
         ST    R15,CCODE
        $PCLOSE
         OC    CCODE,CCODE
         BNZ   *+L'*+4
         ST    R15,CCODE
         ICM   R1,B'1111',TABADDR  FREE THE WORK AREA
         BZ    LEAVE
         L     R0,TABLEN
        FREEMAIN R,LV=(0),A=(1)
LEAVE    L     R15,CCODE
        $XRET  CC=(R15)
         SPACE 1
*------- OUTPUT PRINT ROUTINE
*              "OUTAREA" = ADDRESS OF LINE TO BE PRINTED
*              R8 = LINK REGISTER
         SPACE 1
WRITPRT  CP    NLN,=PL2'+56'
         BL    WRTPN
         AP    NPG,=PL1'+1'
         MVC   TIT1A,=XL6'402020202120'
         ED    TIT1A,NPG
        $PRINT TIT1,,DDOUT
         LTR   R15,R15
         BNZ   WRTPX
         ZAP   NLN,=PL1'+1'
         MVI   MSGCC,C'0'
WRTPN   $PRINT OUTAREA,,DDOUT
         LTR   R15,R15
         BNZ   WRTPX
         AP    NLN,=PL1'+1'
         CLI   MSGCC,C'0'
         BNE   *+L'*+6
         AP    NLN,=PL1'+1'
         MVI   OUTAREA,C' '        CLEAR OUTAREA
         MVC   OUTAREA+1(OUTAL-1),OUTAREA
         BR    R8                  RETURN
WRTPX    TM    SWITCH,SWIDC        IDCAMS I/O ROUTINE CALL
         BO    *+L'*+8             YES, RETURN TO IT
         ST    R15,CCODE           NO, WRITE OUTPUT ERROR
         B     BYE
         NI    SWITCH,255-SWIDC    SAY ERROR OCCURED
         BR    R8
         SPACE 1
*------- OUTPUT TRACE TEST ROUTINE
*              R8 = LINK REGISTER
         SPACE 1
TRTEST   STM   R14,R1,SVREGS
         LH    R1,0(R8)
         LTR   R1,R1
         BM    TRNONE
         CH    R1,=H'8'
         BH    TRNONE
         CVD   R1,PWORK
         MVC   LTR1A,=XL4'40202120'
         ED    LTR1A,PWORK+L'PWORK-2
         UNPK  LTR1B(L'LTR1B+1),SVREGS(5)
         TR    LTR1B(L'LTR1B),TRTAB-C'0'
         MVI   LTR1B+L'LTR1B,C' '
         UNPK  LTR1C(L'LTR1C+1),SVREGS+4(5)
         TR    LTR1C(L'LTR1C),TRTAB-C'0'
         MVI   LTR1C+L'LTR1C,C' '
         UNPK  LTR1D(L'LTR1D+1),SVREGS+8(5)
         TR    LTR1D(L'LTR1D),TRTAB-C'0'
         MVI   LTR1D+L'LTR1D,C' '
         UNPK  LTR1E(L'LTR1E+1),SVREGS+12(5)
         TR    LTR1E(L'LTR1E),TRTAB-C'0'
         MVI   LTR1E+L'LTR1E,C' '
         MVI   LTR1F,C' '
         MVC   LTR1F+1(L'LTR1F-1),LTR1F
         SLL   R1,2
         B     *+L'*(R1)
         B     TRMG                0
         B     TRMG                1
         B     TRMG                2
         B     TRMG                3
         B     TRMG                4
         B     TRMG                5
         B     TRMS                6
         B     TRMS                7
         B     TRMG                8
TRMG     MVC   LTR1F,GDGNAME
         B     TRNULL
TRMS     MVC   LTR1F,GSVNAME
TRNULL  $PRINT LTR1,,DDTEST
         LTR   R15,R15
         BNZ   TRERR
         LH    R1,0(R8)
         SLL   R1,2
         B     *+L'*(R1)
         B     TRCB                0
         B     TRCB                1
         B     TRNONE              2
         B     TRCB                3
         B     TRNONE              4
         B     TRVB                5
         B     TRNONE              6
         B     TRNONE              7
         B     TRCB                8
TRCB     MVC   LTR2A,=CL7'CB ===>'
         LA    R14,CATBLK
         LA    R15,8
TRNEXT   LA    R0,8
         LA    R1,LTR2B
TRLOOP   UNPK  0(9,R1),0(5,R14)
         TR    0(8,R1),TRTAB-C'0'
         MVI   8(R1),C' '
         LA    R1,L'LTR2B(R1)
         LA    R14,4(R14)
         BCT   R0,TRLOOP
         STM   R14,R15,CURRPT
        $PRINT LTR2,,DDTEST
         LTR   R15,R15
         BNZ   TRERR
         MVC   LTR2A(L'LTR2A),=CL9' '
         LM    R14,R15,CURRPT
         BCT   R15,TRNEXT
         LA    R0,8
         LA    R1,LTR2B
         MVC   0(L'LTR2B,R1),=CL9' '
         LA    R1,L'LTR2B(R1)
         BCT   R0,*-10
         LA    R1,LTR2B
         UNPK  0(9,R1),0(5,R14)
         TR    0(8,R1),TRTAB-C'0'
         MVI   8(R1),C' '
         UNPK  9(9,R1),4(5,R14)
         TR    9(8,R1),TRTAB-C'0'
         MVI   17(R1),C' '
         UNPK  18(3,R1),8(2,R14)
         TR    18(2,R1),TRTAB-C'0'
         MVI   20(R1),C' '
        $PRINT LTR2,,DDTEST
         LTR   R15,R15
         BZ    TRNONE
         B     TRERR
TRVB     MVC   LTR2A,=CL7'VB ===>'
         LA    R14,CATBLK
         LA    R0,8
         LA    R1,LTR2B
         MVC   0(L'LTR2B,R1),=CL9' '
         LA    R1,L'LTR2B(R1)
         BCT   R0,*-10
         LA    R1,LTR2B
         UNPK  0(9,R1),0(5,R14)
         TR    0(8,R1),TRTAB-C'0'
         MVI   8(R1),C' '
         UNPK  9(9,R1),4(5,R14)
         TR    9(8,R1),TRTAB-C'0'
         MVI   17(R1),C' '
         UNPK  18(9,R1),8(5,R14)
         TR    18(8,R1),TRTAB-C'0'
         MVI   26(R1),C' '
         UNPK  27(5,R1),12(3,R14)
         TR    27(4,R1),TRTAB-C'0'
         MVI   31(R1),C' '
        $PRINT LTR2,,DDTEST
         LTR   R15,R15
         BNZ   TRERR
TRNONE   LM    R14,R1,SVREGS
         B     2(R8)               RETURN
TRERR    ST    R15,CCODE           WRITE OUTPUT ERROR
         B     BYE
         EJECT
*- - - - - - - - - - - - DATA AND WORK AREAS - - - - - - - - - - - - -*
         SPACE 1
         DS    0D
CATBLK   DS    0CL265         KEEP ON DOUBLE-WORD
         DC    XL242'0'            VOLUME LIST INCLUDING # OF VOLUMES
         DC    XL10'0'             ZEROS
         DC    XL3'0'              CHAIN TTR
         DC    XL4'0'              ZERO
         DC    XL6'0'              FOUND ON THIS CVOL
VOLBLK   DS    0H             KEEP ON HALF-WORD
         DC    H'1'                NUMBER OF VOLUMES
SCRDC    DC    XL4'0'              DEVICE CODE
SCRVSN   DC    CL6' '              VOLUME SERIAL NUMBER
SCRSC    DC    H'0'                SCRATCH STATUS CODE
PWORK    DC    D'0'
SVREGS   DC    4F'0'
CURRPT   DC    2F'0'
TABADDR  DC    A(*-*)
TABLEN   DC    A(TBMAX)
ATIOT    DC    A(*-*)
CCODE    DC    F'0'
DDIN     DC    CL8'GDGIN'
DDOUT    DC    CL8'GDGOUT'
DDTEST   DC    CL8'SYSTEST'
GDGNAME  DC    CL44' '
GSVNAME  DC    CL44' '
GRLNAME  DC    CL44' '
ENTRIES  DC    CL3' '
ONEMP    DC    CL1' '
ONSCR    DC    CL1' '
NPG      DC    PL3'+0'
NLN      DC    PL2'+99'
CATYPE   DC    XL1'0'              CATALOG TYPE
CVOLTYPE EQU   X'08'
SWITCH   DC    XL1'0'              PROCESSING FLAGS
SWSNP    EQU   X'80'
SWSNR    EQU   X'40'
SWTST    EQU   X'20'
SWIDC    EQU   X'10'
SWDLX    EQU   X'08'
SWNOS    EQU   X'04'
SWSNE    EQU   X'01'
         SPACE 1
INAREA   DS    0CL80
INREQ    DC    CL72' ',CL8' '
         SPACE 1
         DC    AL1(OUTAL)
OUTAREA  DS    0C
MSGCC    DC    CL1' '
MSGNAME  DC    CL44' ',CL2' '
MSGAREA  DC    CL80' '
OUTAL    EQU   *-OUTAREA
         SPACE 1
         DC    AL1(TIT1L)
TIT1     DC    CL71'1-- GENERATION DATA GROUP UTILITY --'
         DC    CL4'PAGE'
TIT1A    DC    CL6' '
TIT1L    EQU   *-TIT1
         SPACE 1
         DC    AL1(LTR1L)
LTR1     DC    C'   T ='
LTR1A    DC    CL4' ',C' R14-R1 : '
LTR1B    DC    CL8' ',C' - '
LTR1C    DC    CL8' ',C' - '
LTR1D    DC    CL8' ',C' - '
LTR1E    DC    CL8' ',C' => '
LTR1F    DC    CL44' ',C' '
LTR1L    EQU   *-LTR1
         SPACE 1
         DC    AL1(LTR2L)
LTR2     DC    CL3' '
LTR2A    DC    CL7' ',C' '
LTR2B    DC    8CL9' '
LTR2L    EQU   *-LTR2
         SPACE 1
         DC    0F'0',CL8'LOCATE  ' TAG FOR ERROR MSG
LOCNAME CAMLST NAME,GDGNAME,,CATBLK
         DC    0F'0',CL8'UNCATAL ' TAG FOR ERROR MSG
UNCAT   CAMLST UNCAT,GDGNAME       UNCAT AND RETAIN INDEX LEVLELS
         DC    0F'0',CL8'DLTX    ' TAG FOR ERROR MSG
DELIDX  CAMLST DLTX,GSVNAME        DELETE GDG INDEX
         DC    0F'0',CL8'BLDG    ' TAG FOR ERROR MSG
BGDG    CAMLST BLDG,GSVNAME,,,DELETE,,000
         DC    0F'0',CL8'CATAL   ' TAG FOR ERROR MSG
CATNAME CAMLST CAT,GDGNAME,,CATBLK
         DC    0F'0',CL8'SCRATCH ' TAG FOR ERROR MSG
SCRNAME CAMLST SCRATCH,GDGNAME,,VOLBLK,,OVRD
         SPACE 1
IDCDEL   DC    F'1'                ONE CARD WILL BE PASSED TO IDCAMS
         DC    A(DELC)             ADDRESS OF THE DELETE STMT
DELC     DC    CL10' DELETE ( '
DELCNM   DC    CL35' ',CL6' ) GDG'
DELCL    EQU   *-DELC
         DC    (72-DELCL)C' ',CL8' ' FILL IT OUT WITH BLANKS
         SPACE 1
IDCDEF   DC    F'2'                TWO CARDS WILL BE PASSED TO IDCAMS
         DC    A(DEFC)             ADDRESS OF THE DEFINE STMT
DEFC     DC    CL19' DEFINE GDG (NAME( '
DEFCNM   DC    CL35' ',CL7' ) LIM('
DEFCLM   DC    CL3' ',CL3') -'
DEFCL    EQU   *-DEFC
         DC    (72-DEFCL)C' ',CL8' ' FILL IT OUT WITH BLANKS
DEFC1    DC    CL8' ',CL7'OWNER( '
DEFCOW   DC    CL8' ',CL2') '
DEFCEM   DC    CL1' ',CL4'EMP '
DEFCSC   DC    CL1' ',CL4'SCR)'
DEFCL1   EQU   *-DEFC1
         DC    (72-DEFCL1)C' ',CL8' ' FILL IT OUT WITH BLANKS
         SPACE 1
BLANKTBL DC    64X'00',X'FF',191X'00'
TRTAB    DC    CL16'0123456789ABCDEF'
TERMMSG  DC    CL91'** UNACCEPTABLE ERROR ** - PROGRAM TERMINATING - NOX
                FURTHER INPUT RECORDS WILL BE PROCESSED'
RDRMSG   DC    CL20'*** INPUT READ ERROR'
GDGMSG   DC    CL21'*** GDG NAME TOO LONG'
ENTMSG   DC    CL20'*** ENTRIES TOO LONG'
OPTMSG   DC    CL24'*** INVALID OPTION INPUT'
INVMSG   DC    CL25'*** INVALID ENTRIES INPUT'
UNCATMSG DC    CL11'UNCATALOGED'
SCRMSG   DC    CL14'SCRATCHED FROM'
CATMSG   DC    CL9'CATALOGED'
DELXMSG  DC    CL13'INDEX DELETED'
BLDGMSG  DC    CL22'INDEX CREATED ENTRIES='
CAMLMSG  DC    CL15'ERROR IN CAMLST'
IDCSMSG  DC    CL50'IDCAMS RETURNED ERROR - SEE IDCAMS MESSAGES - RC ='
SNPOMSG  DC    CL21'SYSSNAP - OPEN FAILED'
SNPEMSG  DC    CL27'SYSSNAP - SNAP ERROR - RC ='
SNPCMSG  DC    CL22'SYSSNAP - CLOSE FAILED'
SNPTMSG  DC    CL15'SNAP-DUMP TAKEN'
         SPACE 1
        PRINT  NOGEN
SNAPPER DCB    DDNAME=SYSSNAP,MACRF=W,LRECL=125,BLKSIZE=882,DSORG=PS,  X
               RECFM=VBA
        PRINT  GEN
         SPACE 1
         LTORG
         SPACE 1
         DROP  R11,R12
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                  I D C A M S    I N T E R F A C E                   *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        THIS MODULE WILL ALLOW YOU TO INVOKE IDCAMS. ON ENTRY,       *
*        R1 SHOULD POINT TO A LIST THAT LOOKS LIKE THIS :             *
*              - FULLWORD CONTAINING THE BINARY COUNT OF 80 BYTE      *
*                ENTRIES FOLLOWING,                                   *
*              - ADDRESS OF 80 BYTE IDCAMS SYSIN RECORDS.             *
*        THIS MODULE IGNORES OPEN/CLOSE REQUESTS FROM IDCAMS.         *
*        REGISTER USAGE :                                             *
*              R1  = PARM'S ADDRESS                                   *
*              R9  = BASE REGISTER                                    *
*              R11 = FIRST MAIN BASE REGISTER                         *
*              R12 = SECOND MAIN BASE REGISTER                        *
*              R13 = SAVE-AREA POINTER                                *
*              R14 = RETURN REGISTER                                  *
*              R15 = ENTRY ADDRESS / RETURN CODE                      *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
IDCAMSX CSECT  ,
        $XENT  BASE=R9
         EJECT
         MVC   USIDATA(8),0(R1)    SET THE PARM'S
         STM   R11,R12,USODATA
        LINK   EP=IDCAMS,PARAM=(OPTLIST,DNAMELST,PGNOLIST,IOLIST),     X
               VL=1
        $XRET  CC=(R15)
         SPACE 1
OPTLIST  DC    H'0'                EMPTY OPTION LIST
DNAMELST DC    H'0'                EMPTY DDNAME LIST
PGNOLIST DC    H'0'                EMPTY PAGE NO LIST
IOLIST   DC    F'2'                ONE GROUP OF I/O LISTS FOLLOW
         DC    A(SYSINID)          POINTER TO ID FOR SYSIN
         DC    A(INROUT)           POINTER TO INPUT I/O ROUTINE
         DC    A(USIDATA)          ADDRESS OF INPUT USER-DATA AREA
         DC    A(SYSOUTID)         POINTER TO ID FOR SYSPRINT
         DC    A(OUTROUT)          POINTER TO OUTPUT I/O ROUTINE
         DC    A(USODATA)          ADDRESS OF OUTPUT USER-DATA AREA
SYSINID  DC    CL10'DDSYSIN   '    INDICATE WE WISH TO MANAGE SYSIN
SYSOUTID DC    CL10'DDSYSPRINT'    INDICATE WE WISH TO MANAGE SYSPRINT
USIDATA  DC    2F'0'               INPUT USER-DATA AREA
USODATA  DC    2A(*-*)             OUTPUT USER-DATA AREA
         SPACE 1
         DROP  R9
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* I D C A M S    I N T E R F A C E * * * USER INPUT I/O ROUTINE * * * *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        REGISTER USAGE :                                             *
*              R1  = PARM'S ADDRESS                                   *
*              R4  = NUMBER OF IDCAMS SYSIN RECORD IMAGES FROM CALLER *
*              R5  = POINTER TO CURRENT SYSIN RECORD FROM CALLER      *
*              R6  = POINTER TO INPUT USER-DATA AREA                  *
*              R7  = POINTER TO IOFLAGS FROM IDCAMS                   *
*              R8  = POINTER TO IOINFO FROM IDCAMS                    *
*              R9  = BASE REGISTER                                    *
*              R10 = LOCAL LINK REGISTER                              *
*              R13 = SAVE-AREA POINTER                                *
*              R14 = RETURN REGISTER                                  *
*              R15 = ENTRY ADDRESS / RETURN CODE                      *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
INROUT  CSECT  ,
        $XENT  BASE=R9
         LM    R6,R8,0(R1)         USER-DATA/IOFLGS/IOINFO POINTERS
         LM    R4,R5,0(R6)         GET THE USER-DATA
         XR    R15,R15
         IC    R15,0(,R7)          GET THE REQUEST CODE
         L     R15,INFTB(R15)      LOAD ROUTINE ADDRESS
         BASR  R10,R15             AND GO DO IT
        $XRET  CC=(R15)
         SPACE 1
OPENIN   XR    R15,R15             WE WILL INGNORE OPEN REQUESTS
         BR    R10                 RETURN
         SPACE 1
CLOSEIN  XR    R15,R15             WE WILL IGNORE CLOSE REQUESTS
         BR    R10                 RETURN
         SPACE 1
ABORTIN  LA    R15,12              DO NOT ALLOW ANY FURTHER CALLS
         BR    R10                 RETURN
         SPACE 1
GETIN    LTR   R4,R4               ANY MORE SYSIN RECS ?
         BP    *+L'*+6             YES, GO GET ONE
         LA    R15,4               ELSE INDICATE END OF FILE
         BR    R10                 RETURN
         ST    R5,0(,R8)           POINT TO THE RECORD IN IDCAM'S LIST
         MVC   4(4,R8),=F'80'      INDICATE IT'S LENGTH IS 80
         LA    R5,80(,R5)          POINT TO THE NEXT RECORD
         BCTR  R4,0                DECREMENT THE SYSIN RECORD COUNT
         STM   R4,R5,0(R6)         STORE COUNT AND ADDRESS
         XR    R15,R15             ZERO THE RETURN CODE
         BR    R10                 RETURN
         SPACE 1
*- - - - - - - - - - - - DATA AND WORK AREAS - - - - - - - - - - - - -*
         SPACE 1
INFTB    DC    A(OPENIN,CLOSEIN,GETIN,ABORTIN)
         SPACE 1
         LTORG
         SPACE 1
         DROP  R9
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* I D C A M S    I N T E R F A C E * * * USER OUTPUT I/O ROUTINE  * * *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        REGISTER USAGE :                                             *
*              R1  = PARM'S ADDRESS / WORK REGISTER                   *
*              R4  = POINTER TO SYSPRINT RECORD FROM CALLER           *
*              R5  = POINTER TO SYSPRINT RECORD LENGTH FROM CALLER    *
*              R6  = POINTER TO OUTPUT USER-DATA AREA                 *
*              R7  = POINTER TO IOFLAGS FROM IDCAMS                   *
*              R8  = POINTER TO IOINFO FROM IDCAMS                    *
*              R9  = BASE REGISTER                                    *
*              R10 = LOCAL LINK REGISTER                              *
*              R11 = FIRST MAIN BASE REGISTER                         *
*              R12 = SECOND MAIN BASE REGISTER                        *
*              R13 = SAVE-AREA POINTER                                *
*              R14 = RETURN REGISTER                                  *
*              R15 = ENTRY ADDRESS / RETURN CODE                      *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
OUTROUT CSECT  ,
        $XENT  BASE=R9
         LM    R6,R8,0(R1)         USER-DATA/IOFLGS/IOINFO POINTERS
         LM    R4,R5,0(R6)         GET THE USER-DATA
         XR    R15,R15
         IC    R15,0(,R7)          GET THE REQUEST CODE
         L     R15,OUTFTB(R15)     LOAD ROUTINE ADDRESS
         BASR  R10,R15             AND GO DO IT
        $XRET  CC=(R15)
         SPACE 1
OPENOUT  XR    R15,R15             WE WILL INGNORE OPEN REQUESTS
         BR    R10                 RETURN
         SPACE 1
CLOSEOUT XR    R15,R15             WE WILL IGNORE CLOSE REQUESTS
         BR    R10                 RETURN
         SPACE 1
ABORTOUT LA    R15,12              DO NOT ALLOW ANY FURTHER CALLS
         BR    R10                 RETURN
         SPACE 1
PUTOUT   LM    R4,R5,0(R8)         GET ADDRESS AND LENGTH OF RECORD
         CLC   0(24,R4),=CL24'1IDCAMS  SYSTEM SERVICES'
         BE    PTTX                DO NOT COPY TITLE LINE
         LR    R2,R4
         LR    R3,R5
         LA    R2,1(R2)
         BCT   R3,*+L'*+4
         B     PTTX                DO NOT COPY BLANK LINE
         CLI   0(R2),C' '
         BE    *-16
         LM    R11,R12,0(R6)       SET MAIN BASE REGISTERS
         USING GDGRESET,R11,R12
         CL    R5,=A(OUTAL)
         BNH   *+L'*+4
         L     R5,=A(OUTAL)
         BCT   R5,*+L'*+6
         MVC   OUTAREA(*-*),0(R4)  GET RECORD
         EX    R5,*-6
         MVI   MSGCC,C' '
         OI    SWITCH,SWIDC
         BAS   R8,WRITPRT          GO TO PRINT IT
         TM    SWITCH,SWIDC        ALL OK ?
         BZ    ABORTOUT            NO
         NI    SWITCH,255-SWIDC    YES
         DROP  R11,R12
PTTX     XR    R15,R15             ZERO THE RETURN CODE
         BR    R10                 RETURN
         SPACE 1
*- - - - - - - - - - - - DATA AND WORK AREAS - - - - - - - - - - - - -*
         SPACE 1
OUTFTB   DC    A(OPENOUT,CLOSEOUT,ABORTOUT,PUTOUT)
         SPACE 1
         LTORG
         SPACE 1
         DROP  R9
         EJECT
TBENTRY DSECT
TNAME    DS    CL44           ABSOLUTE NAME
TCATBLK  DS    0CL265         KEEP ON DOUBLE-WORD
TVOLLIST DS    CL242               VOLUME LIST INCLUDING # OF VOLUMES
         DS    CL10                ZEROS
CHAINTTR DS    CL3                 CHAIN TTR
         DS    CL4                 ZERO
CVOLSER  DS    CL6                 FOUND ON THIS CVOL
         DS    C              FILLER
TBLENTRY EQU   *-TBENTRY      TABLE ENTRY LENGTH
TBBL     EQU   ((TBLENTRY+15)/16)*16
TBMAX    EQU   ((256+1)*TBBL)      ENOUGH STORAGE FOR 256 ENTRIES
         SPACE 1
        PRINT  NOGEN
        CVT    DSECT=YES
        IHAPSA
        IHAASCB
        IHAASXB
        IHAACEE
TIODSECT DSECT
        IEFTIOT1
UCBDSECT DSECT
        IEFUCBOB
        DCBD   DSORG=PS,DEVD=DA
        PRINT  GEN
         SPACE 2
         END
