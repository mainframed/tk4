1   20/04/94
                                                      $TEW$     1/5.

  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * *       TSO EASY-WAY OF CODING        * * * * * * * *
  * * * * * * * *          (macros facility)          * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

  Purpose : Some macros to help programmers when coding TSO commands
  ========= (Assembler H).

  Macros description :
  ====================
    1. $TEW$EC - TSO Easy-Way of Coding - Entry Checks.
         Generate Assembler code to :
              a) verify at entry if module has been invoked as TSO
                 command or subcommand. The addresses of CPPL, TSO
                 flag and PSCB are retrieved and thus available to
                 the following processing (optionally you may ask also
                 the TIOT and/or COMM addresses).
              b) eventually generate the following routines :
                 - a TSO message routine
                 - a TSO PUTLINE routine
                 - a TSO GETLINE and GETLINE RELEASE routines
         Syntax :  $TEW$EC  REG=...,TIOT=...,COMM=...,
                            NOTTSO=...,NOTCMD=...,MSG=...,ERR=...,
                            PUT=...,GET=...,REL=...,SCAN=...,DOC=...
              At the end of $TEW$EC macro development, the CPPL address
              is in the register indicated by REG=..., unless you code
              one of the registers 0, 1, 13, 14 or 15, or none, then
              the CPPL address is placed in the register 2.
         Operands :
              REG=... indicate the register of the entry PARM address
                      (default is R1).
              TIOT=... say YES to retrieve also the address of the
                      TIOT (default is NO).
              COMM=... say YES to retrieve also the address of the
                      Communication Area (default is NO).
              NOTTSO=... is the label where you want branch if the
                      module is not running in a TSO environment (no
                      default, this is an "error detection" case).
                      Specify NOTTSO=(...,ONLY) or NOTTSO=(,ONLY) if
                      you want test to be in TSO foreground run only.
              NOTCMD=... is the label where you want branch if the
                      module is not a TSO command or subcommand (no
                      default, this is an "error detection" case).
              MSG=... is the label for a TSO message (use TPUT or
                      WTO to send the message) routine to be
                      generated (routine is mandatory in case of
                      "error detection" when NOTTSO=... and/or
                      NOTCMD=... are not specified or when PUT=...
                      and/or GET=... are specified).
1   20/04/94
                                                      $TEW$     2/5.

              ERR=... is the label where you want branch, after
                      message sent, in case of an "error detection"
                      (mandatory when NOTTSO=... and/or NOTCMD=...
                      are not specified).
              PUT=... is the label of a TSO PUTLINE routine you want
                      to be generated.
              GET=... is the label of a TSO GETLINE routine you want
                      to be generated.
              REL=... is the label of a TSO GETLINE RELEASE Input
                      Buffer after process routine to be generated
                      (mandatory when you specify GET=...).
              SCAN=... say YES if you intend to analyze the command
                      operands yourself, in other words, you will not
                      use IKJPARS or $TEW$PP macros (default is NO).
              DOC=... say YES to have a short information included
                      in your Assembly list (default is NO).
         Notes about macro coding :
              1. You may set NOTTSO=... and/or NOTCMD=... to process
                 "errors detection" yourself. If any one of these two
                 operands is not specified, you must supply MSG=... and
                 ERR=... to allows the "errors detection" be signaled
                 and then go to correctly terminate execution.
              2. If NOTTSO=... and NOTCMD=... are specified and if
                 MSG=..., PUT=... and GET=... are not specified, it
                 means you want only retrieve the System addresses.
              3. When SCAN=YES is specified, then just after the
                 $TEW$EC macro development, you can get at label
                 #TSIBSP the command operands buffer scan pointers for
                 a BXLE ... instruction use as below :
                     +0 = 1
                     +4 = END address of text
                     +8 = START address of text
                 or if none, at label #TSIBSP all pointers are zero's.
              4. The $TEW$EC macro is normally coded at the beginning
                 of the source program, just after the $XENT macro.
                 Mandatory : the $TEW$EC macro must be the first one
                 of coded $TEW$.. macros in the source program, unless
                 you may have Assembly errors.

    2. $TEW$PP - TSO Easy-Way of coding - PARSE Process.
         Generate Assembler code to execute the IKJPARS which sets the
              command operands parameters list ready for use.
         Syntax :  $TEW$PP  PARM=...,REG=...,ATT=...,MSG=...,ERR=...
         Operands :
              PARM=... is the label of the Parameter Control List
                      (PCL), macros IKJPARM, ..., IKJENDP.
              REG=... indicate the register you want use as pointer to
                      the Parameter Descriptor List (PDL), DSECT name
                      is IKJPARMD (default is R2).
              MSG=... is the label of the TSO message routine you want
                      use in case of "error detection", but, if it is
                      the same as that defined with MSG=... in the
                      $TEW$EC macro, you may omit it here.
1   20/04/94
                                                      $TEW$     3/5.

              ERR=... is the label where you want branch in case of an
                      "error detection" (after message sent), but as
                      for MSG=..., if it is the same as that defined
                      with ERR=... in the $TEW$EC macro, you may omit
                      it also.
              ATT=... is the label where you want branch if PARSE did
                      not complete because an interruption occurred
                      during the processing (you may omit it when it
                      will be the same as that defined for ERR=...).
              UWA=... is the label of the User Work Area (address is
                      stored in PPLUWA) you eventually needs be provided
                      to validity checking routines (VALIDCK= operand
                      in IKJPOSIT, IKJTERM, IKJOPER or IKJIDENT macros).
                      Note : if the address is in a register, you may
                      use the register notation, as i.e., UWA=(R9).

    3. $TEW$WA - TSO Easy-Way of coding - Work-Areas.
         Generate Assembler code defining the work-areas needed by the
              above $TEW$EC and $TEW$PP macros.
         Syntax :  $TEW$WA
         Operands : none.
         Note about macro coding :
              The $TEW$WA macro must be coded as constants definitions
              (NORENT Assembly) or somewhere in the dynamic array
              work-areas definitions (RENT Assembly).


    4. $TEW$DS - TSO Easy-Way of coding - DSECT's.
         Generate Assembler code defining the DSECTs needed by or
              requested through the other macros named $TEW$...
         Syntax :  $TEW$DS  CVT=...,TIOT=...,VCPL=...
         Operands :
              CVT=... say YES to force the insertion of the statement
                               CVT    DSECT=YES,LIST=YES
                      in your Assembly program if you want to have it
                      (default is NO). You may omit CVT=YES if you use
                      the $TEW$PP macro in your source program (it is
                      included automatically).
              TIOT=... say YES to force the insertion of the statements
                       TIODSECT DSECT
                               IEFTIOT1
                      in your Assembly program if you want to have it
                      (default is NO). You may omit TIOT=YES if you use
                      the $TEW$EC macro with TIOT=YES in your source
                      program (it is included automatically).
              VCPL=... say YES to force the insertion of the VCPL dsect
                      (Validity Check Parameter List) in your Assembly
                      program if you want to have it (default is NO).
                      You may omit VCPL=YES if you use the $TEW$PP
                      macro with UWA=... coded in your source program
                      (it is included automatically).
         Note about macro coding :
              The $TEW$DS macro must be coded at the end of your source
              program, just before the END statement.
1   20/04/94
                                                      $TEW$     4/5.

  How to use (CALL) :
  ===================

    1. The TSO message routine :
                ... LA    R1,...(address of message "WTO" list form)
                    BAS   R14,...(label specified in MSG=...)
       Message example :
                ... WTO   '...message text...',ROUTCDE=11,DESC=7,MF=L
       Work-registers : R0, R1, R14 and R15

    2. The PUTLINE routine (registers R2 and R14 saved/restored,
       registers R3-R13 not used by routine) :
                ... LA    R0,...(line text length)
                    LA    R1,...(address of line text)
                    BAS   R14,...(label specified in PUT=...)
       Line text example :
                ... DC    C'...line text...'
       Work-registers : R0, R1, R2, R14 and R15
       At exit, R15 = return code, value may be :
            0 = PUTLINE complete normally
            4 = PUTLINE error (error message sent)

    3. The GETLINE routine (registers R2 and R14 saved/restored,
       registers R3-R13 not used by routine) :
                ... BAS   R14,...(label specified in GET=...)
       Work-registers : R0, R1, R2, R14 and R15
       At exit, R15 = return code, value may be :
            0 = GETLINE complete normally, at label #TSIBSP, there is
                the Input Buffer Scan Pointers which may be used by a
                BXLE ... instruction as follows (three full-words) :
                    +0 = 1
                    +4 = END address of text
                    +8 = START address of text
            4 = none (no input text), all the three #TSIBSP full-words
                are zero's
            8 = GETLINE error (error message sent)

    4. The GETLINE RELEASE routine :
                ... BAS   R14,...(label specified in REL=...)
       Work-registers : R0, R1, R14 and R15
       At exit, R15 = FREEMAIN return code
1   20/04/94
                                                      $TEW$     5/5.

  Information at your disposal in the work-areas :
  ================================================
    Label     Type  Contents
    --------  ----  ---------------------------------------------------
    #TSCPPL   F     CPPL address
    #TSFLAG   X     TSO flag - X'00' = NOT TSO
    #TSFRUN   EQU              X'80' = TSO
    #TSTIOT   F     TIOT address (if TIOT=YES coded in $TEW$EC macro or
                    in $TEW$DS macro)
    #TSCOMM   F     COMMUNICATION address (if COMM=YES coded in
                    $TEW$EC macro)
    #TSPSCB   F     PSCB address
    #TSIBSP   3F    Command Operands Scan Pointers (if SCAN=YES coded
                    in $TEW$EC macro) and/or GETLINE Input Buffer Scan
                    Pointers (if GET=... coded in $TEW$EC macro)
    #TSANSW   F     Parameter Descriptor List (PDL) address (if $TEW$PP
                    macro coded)

  DSECTs at your disposal :
  =========================
    Label     Description
    --------  ---------------------------------------------------------
    CPPL      Command Processor Parameter List
    PSCB      Protected Step Control Block
    TIODSECT  Task Input/Output Table (if TIOT=YES coded in $TEW$EC
              macro or in $TEW$DS macro)
    CIBDSECT  Command Input Buffer (if COMM=YES coded in $TEW$EC
              macro)
    CVT       Communication Vector Table (if $TEW$PP macro coded or
              CVT=YES coded in $TEW$DS macro)
    PPL       PARSE Parameters List (if $TEW$PP macro coded)
    VCPL      Validity Check Parameter List (if UWA=... coded in
              $TEW$PP macro or VCPL=YES coded in $TEW$DS macro)
