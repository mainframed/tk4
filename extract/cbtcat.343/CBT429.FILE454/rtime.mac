RTM      TITLE 'GET REMAINING CPU - SRB TIME SUBROUTINE.'
RTIME    START 0
         SPACE 1
RTIME   AMODE  ANY
RTIME   RMODE  ANY
         SPACE 1
         EJECT
* CALLING SEQUENCE : CALL RTIME,(A,B),VL
* ------------------            (A)
*
*        WHERE : A AND OPTIONALLY B ARE THE ADDRESSES OF FULLWORDS
*                (F BOUNDARY) RECEIVING CPU - SRB REMAINING TIMES.
*
* REMARK :     ALL TIMES ARE IN SECONDS.
* --------     ONE SECOND OF SRB TIME ALLOWS ABOUT 1000 I/O, IT
*              MAY BE MORE THAN 1000 (TILL 3000), RARELY LESS FOR
*              AN AMDAHL V8 IN MVS SP1.3 UNDER VM/SP.
*
* HOW TO USE :
* ------------
*
*        IF A AND B ARGUMENTS ARE SUPPLIED, YOU GET REMAINING CPU TIME
*              IN A AND REMAINING SRB TIME IN B (1 DAY = 86400 SECS).
*              IF NO TCB (CPU) TIMING, TCB TIME LEFT = 1000000 SECS.
*              IF NO SRB TIMING, SRB TIME LEFT = 2000000 SECS.
*
*        IF A ARGUMENT ONLY, YOU GET REMAINING CPU+SRB TIME.
*        IN THIS SITUATION, FROM THE SUM YOU CAN DETERMINE IF
*        THERE IS TCB OR SRB TIMING AS BELOW :
*              3,0 MILLION = NO SRB, NO TCB TIMING.
*              2,X MILLION = NO SRB, YES TCB TIMING.
*              1,X MILLION = NO TCB, YES SRB TIMING.
*              0,X MILLION = YES TCB, YES SRB TIMING, YOU HAVE THE SUM.
*
* SRB-TIME CONTROL AND INSTALLATION DEPENDENCY :
* ----------------------------------------------
*
*        WE HAVE APPLY A ZAP IN THE NUCLEUS IN ORDER TO CHECK IF THE
*        SRB-TIME LIMIT EXPIRES, AND IF SO SCHEDULES THE IEFUTL SMF
*        TIME LIMIT EXIT. TO DO THIS CONTROL WE USE A WORD IN THE ASCB
*        FOR SRB-TIME LIMIT VALUE, WHICH IS GIVEN BY THE USERS JCL
*        USING THE TIME PARAMETER OF THE /*JOBPARM CARD OF JES2.
*        THIS SRB-TIME LIMIT REQUEST IS VALIDATED BY THE IEFUJV
*        SMF JOB VALIDATION EXIT AND PASSED TO THE IEFUJI SMF JOB
*        INITIATION EXIT (THROUGH THE USER-COMMUNICATION FIELD OF THE
*        COMMON EXIT PARAMETER AREA) IN ORDER TO INITIALIZE WITH IT
*        THE WORD IN THE ASCB AT JOB STARTING EXECUTION TIME.
*        THE IEFUTL SMF TIME LIMIT EXIT, WHEN RECEIVING CONTROL, WILL
*        ISSUE AN APPROPRIATE MESSAGE TO SIGNAL THE USER ABOUT WHICH
*        ONE OF CPU OR SRB TIME HAS EXPIRED.
*
* AUTHOR :     COLOMBO A. (AMDAHL CONSULTANT)
* --------     MOINIL P.A.
*              COMPUTING CENTRE
*              J.R.C. - ISPRA ESTABLISHMENT
*              21020 ISPRA (VA), ITALY
         EJECT
        $DEFREG
        $XENT  BASE=R12
         EJECT
*        GET VALUES FROM ASCB.
         SPACE 1
         LR    R6,R1               SAVE REGISTER 1 ON ENTRY
        $TREQ  R=CL                GET STEP TIME LIMIT.
         LTR   R4,R0               IF ZERO, NO TCB TIMING.
         BNZ   PUTTCB              NO TCB TIMING.
         MVC   CPULIMIT,ONEMIL     ONE MILLION.
         MVC   CPUUSED,AZERO       TO GET AGAIN A MILLION.
         B     SEESRB              TO SEE WHAT ABOUT SRB TIME.
PUTTCB   XR    R5,R5               TO ZERO.
         SRDL  R4,12               TO GET MICROSEC IN BIT 63.
         STM   R4,R5,CPULIMIT      CPU TIME LIMIT FOR THIS STEP.
         MVI   CPULIMIT,X'4E'      BETTER WITH AN EXPONENT.
        $TREQ  R=CU                CPU TIME USED IN THIS STEP.
         SRDL  R0,12               TO GET MICROSEC IN BIT 63.
         STM   R0,R1,CPUUSED       CPU TIME USED IN THIS STEP.
         MVI   CPUUSED,X'4E'       BETTER WITH AN EXPONENT.
SEESRB  $TREQ  R=SL                GET SRB TIME LIMIT.
         LTR   R4,R0               IF ZERO, NO SRB TIMING.
         BNZ   PUTSRB              NO SRB TIMING.
         MVC   SRBLIMIT,TWOMIL     TWO MILLION.
         MVC   SRBUSED,AZERO       TO GET AGAIN TWO MILLION.
         B     COMPARE             TO SEE WHAT TIME LEFT.
PUTSRB   XR    R5,R5               TO ZERO.
         SRDL  R4,12               TO GET MICROSEC IN BIT 63.
         STM   R4,R5,SRBLIMIT      SRB TIME LIMIT FOR THIS STEP.
         MVI   SRBLIMIT,X'4E'      BETTER WITH AN EXPONENT.
        $TREQ  R=SU                SRB TIME USED IN THIS STEP.
         SRDL  R0,12               TO GET MICROSEC IN BIT 63.
         STM   R0,R1,SRBUSED       SRB TIME USED IN THIS STEP.
         MVI   SRBUSED,X'4E'       BETTER WITH AN EXPONENT.
         EJECT
*        COMPUTE REMAINING TCB - SRB TIME.
         SPACE 1
COMPARE  STD   R0,FPR0SAVE         SAVE FLOATING POINT R0.
         LD    R0,CPULIMIT         GET CPU TIME LIMIT.
         SD    R0,CPUUSED          GET TIME USED TILL NOW.
         STD   R0,CPULEFT          STORE RESULT IN A WORK AREA.
         LD    R0,SRBLIMIT         GET SRB TIME LIMIT.
         SD    R0,SRBUSED          GET THIS STEP TIME USED.
         STD   R0,SRBLEFT          STORE RESULT IN A WORK AREA.
         TM    0(R6),X'80'         IF ON, ONLY ONE PARAMETER.
         BNO   TWO                 IF OFF, TWO PARAMETERS.
         AD    R0,CPULEFT          SRB+CPU.
         STD   R0,CPULEFT          SRB+CPU.
         B     CPUSTORE            GO TO STORE SRB+CPU TIME.
TWO      LD    R0,SRBLEFT          IN WORK REGISTER.
         AW    R0,AZERO            NORMALIZE.
         DD    R0,ONEMIL           TO GET SECONDS.
         L     R2,4(R6)            GET ANSWER ADDRESS.
         STE   R0,0(R2)            GIVE SRB RESULT.
CPUSTORE LD    R0,CPULEFT          IN WORK REGISTER.
         AW    R0,AZERO            NORMALIZE.
         DD    R0,ONEMIL           TO GET SECONDS.
         L     R2,0(R6)            GET ANSWER ADDRESS.
         STE   R0,0(R2)            GIVE CPU RESULT.
GOBACK   LD    R0,FPR0SAVE         RESTORE FPR0.
        $XRET  CC=0                GO BACK.
         EJECT
*        CONSTANTS AND WORK AREAS.
         SPACE 1
FPR0SAVE DC    D'0'                SAVE AREA FOR FPR0.
CPULIMIT DC    D'0'                TCB LIMIT FOR THIS STEP.
SRBLIMIT DC    D'0'                SRB LIMIT FOR THIS STEP.
CPULEFT  DC    D'0'                LEFT TCB TIME.
SRBLEFT  DC    D'0'                LEFT SRB TIME.
CPUUSED  DC    0D'0',X'4E',XL7'0'  CPU TIME USED.
SRBUSED  DC    0D'0',X'4E',XL7'0'  SRB TIME USED.
AZERO    DC    0D'0',X'4E',XL7'0'  A ZERO FOR NORMALIZATION.
ONEMIL   DC    D'1000000'          1 MILLION.
TWOMIL   DC    D'2000000'          2 MILLION.
         SPACE 2
         END
