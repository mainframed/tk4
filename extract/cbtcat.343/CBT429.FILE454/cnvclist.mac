CNVC     TITLE 'CONVERT CLISTS FROM 255 LRECL VB TO 80 LRECL FB.'
CNVCLIST START 0
         SPACE 1
*   FUNCTION : CONVERT CLISTS FROM 255 LRECL VB TO 80 LRECL FB OR VICE
*              VERSA.
*
*        I/O : SYSUT1 = INPUT CLISTS
*              SYSUT2 = OUTPUT CLISTS
*              SYSPRINT = LISTING
*
*    NOTES : - VB CLISTS HAVE SEQUENCE NUMBERS IN POS 1-8, FB IN 73-80.
*            - ALL INPUT MEMBERS (CLISTS) ARE ADDED TO OUTPUT DATA-SET
*              UNLESS DUPLICATE NAMES.
*
* RETURN CODE :  0 = JOB TERMINATED SUCCESSFULLY.
*                8 = JOB TERMINATED BEFORE START OF COPY.
*               12 = JOB TERMINATED AFTER START OF COPY.
*
* REGISTERS USE :  R3 = OUTPUT START OF BLOCK.
*                  R4 = INPUT START OF BLOCK.
*                  R5 = LENGTH CODE.
*                  R6 = INPUT POINTER.
*                  R7 = OUTPUT POINTER.
*                 R10 = DCB TEMPLATE.
*                 R11 = LINK REGISTER.
*
*     ORIGIN : EXTRACTED FROM CBT TAPE 88 FEB, FILE 187.
         SPACE 1
        $DEFREG
         EJECT
        $XENT  BASE=R12
        OPEN   (CLISTIN,(INPUT))
         SPACE 1
        OPEN   (CLISTOUT,(OUTPUT))
         SPACE 1
         USING IHADCB,R10
         LA    R10,CLISTIN         USE DCB NAME FOR INPUT DCB
         MVI   MSG0+5,C'1'
         BAS   R11,TESTVORF
         BAS   R11,GETMAIN         GET CORE FOR INPUT BLOCK
         LR    R4,R1               SAVE INPUT BLOCK ADDRESS
         LA    R10,CLISTOUT        USE DCB NAME FOR OUTPUT DCB
         MVI   MSG0+5,C'2'
         BAS   R11,TESTVORF
         BAS   R11,GETMAIN         GETMAIN FOR OUTPUT BLOCK
         LR    R3,R1               SAVE OUTPUT BLOCK ADDRESS
         TM    SWITCH,T80          IF ONE FILE IS F AND ONE V
         BO    SAVEOUT             CONTINUE
         LA    R1,MSG3
         B     ERR8
         EJECT
TESTVORF TM    DCBOFLGS,DCBOFOPN   CHECK OPEN SUCCESSFULL
         BO    TESTVF
         LA    R1,MSG0
         B     ERR8
TESTVF   TM    DCBRECFM,DCBRECU    CHECK FOR V OR F
         BM    CONTVF              IF NOT V OR F ERROR
         MVC   MSG1+5(1),MSG0+5
         LA    R1,MSG1
         B     ERR8
CONTVF   TM    DCBRECFM,DCBRECF    IF V
         BZR   R11                 RETURN
         XI    SWITCH,T80          FIRST F TURNS ON-SECOND OFF
         CLC   DCBLRECL,=H'80'     IF F AND LRECL NOT = 80
         BER   R11                 THEN ERROR, RETURN
         MVC   MSG2+5(1),MSG0+5
         LA    R1,MSG2
         B     ERR8
         SPACE 1
GETMAIN  LH    R0,DCBBLKSI         GET CORE FOR PROCESSING AN
        GETMAIN R,LV=(0)           INPUT BLOCK
         BR    R11
         EJECT
SAVEOUT  MVC   OUTBLKSI,DCBBLKSI   SAVE DATA FOR MAINLINE
         LR    R7,R3               INITIALIZE OUTPUT POINTER
         TM    DCBRECFM,DCBRECF    IF OUTPUT IS V
         BZ    SAVEIN              SAVE INPUT END OF BLOCK
         OI    SWITCH,T20          ELSE SET INPUT SWITCH TO V
         LH    R2,DCBBLKSI
         LA    R2,0(R2,R3)         SAVE OUTPUT END OF FIXED BLOCK
         ST    R2,ENDF
         LA    R10,CLISTIN
         B     INITRD
         SPACE 1
SAVEIN   LA    R10,CLISTIN
         LH    R2,DCBBLKSI         SAVE INPUT END OF FIXED BLOCK
         LA    R2,0(R2,R4)
         ST    R2,ENDF
         LH    R2,OUTBLKSI         SAVE MAXIMUM END OF OUTPUT
         LA    R2,0(R2,R3)         VARIABLE BLOCK
         ST    R2,ENDV
         LA    R7,4(R7)            POINT PAST BLK COUNT FOR V
         SPACE 1
INITRD  CLOSE  (CLISTIN)
         MVI   DCBRECFM,DCBRECU    SET INPUT RECFM TO U
         MVI   CLISTOUT+(DCBRECFM-IHADCB),DCBRECU SET OUTPUT RECFM TO U
        OPEN   (CLISTIN,(INPUT))
         SPACE 1
READDIR  OI    SWITCH,T40          SET DIRECTORY READ ON
        READ   DECB1,SF,CLISTIN,DIRIN,256
        CHECK  DECB1
        NOTE   CLISTIN
         XI    DIRSW,ALLON         SINCE SAVETTR POINTS TO
         CLI   DIRSW,ALLOFF        BEGINNING OF DIRECTORY, READ
         BE    READDIR             TWICE AFTER FIRST READ.
         ST    R1,SAVETTR          SAVE POINTER TO DIRECTORY
         LH    R9,DIRIN
         STH   R9,DIRLEFT          SAVE DIRECTORY LENGTH
         LA    R9,DIRIN+2
         ST    R9,NEXTMEM
         SPACE 1
GETMEM   ZAP   SEQCOUNT,=P'0'      ZERO OUT SEQUENCE COUNT FOR MEM
         L     R8,NEXTMEM          LOAD ADDRESS OF MEMBER NAME
         CLC   0(8,R8),=XL8'FFFFFFFFFFFFFFFF'     IF MEMBER NAME EQUAL
         BE    EOJ                 HI-VALUES, GO TO END OF JOB
         MVC   NAME,0(R8)          PUT NAME IN OUTPUT DIRECTORY LIST
         XC    TTR,TTR
         MVC   C(L'C+L'USERDATA),11(R8) MOVE C/USERDATA TO DIR LIST
         NI    C,X'1F'             NUMBER OF HALFWORDS OF USER DATA
         XR    R2,R2               CLEAR REGISTER
         IC    R2,C                LOAD # OF HALFWORDS OF USER DATA
         LA    R2,12(R2,R2)        DOUBLE AND ADD 12
         LA    R9,0(R2,R8)         COMPUTE NEXT MEMBER DIR ADDRESS
         ST    R9,NEXTMEM          SAVE ADDRESS OF NEXT MEMBER
         LH    R9,DIRLEFT          COMPUTE BYTES LEFT IN
         SR    R9,R2               DIRECTORY
         STH   R9,DIRLEFT
         MVI   11(R8),0            CLEAR C OF TTRC
         LA    R8,8(R8)            SET ADDRESS OF TTR
         NI    SWITCH,255-T40      TURN DIRECTORY READ SW OFF
         MVC   BLDLNM,NAME
         XC    BLDLNM+L'BLDLNM(50),BLDLNM+L'BLDLNM
        BLDL   CLISTOUT,BLDLLIST
         B     *+L'*(R15)
         B     MDUP                0 - SUCCESFULLY COMPLETE
         B     CPYM                4 - NOT FOUND
         LR    R15,R0              8 - BLDL ERROR
         B     *+L'*(R15)
         B     ERR0                0 - I/O ERROR
         B     ERR4                4 - NO REGION SPACE
         LA    R1,MSGL             8 - INVALID DEB
         B     ERRMBN
ERR0     LA    R1,MSGJ
         B     ERRMBN
ERR4     LA    R1,MSGK
         B     ERRMBN
MDUP     MVC   DUPNAME,NAME        DUPLICATE NAME
         MVC   PRTLINE,DUPLINE
         BAS   R11,PUTPRNT
         MVI   DUPCC,C' '          SET SINGLE SPACE AFTER FIRST
         B     CHECKDIR            SKIP THIS MEMBER (CLIST)
CPYM    POINT  CLISTIN,(R8)
         LH    R8,DCBBLKSI         LOAD INPUT BLKSIZE
READBLK READ   DECB2,SF,CLISTIN,(R4),(R8)
        CHECK  DECB2
         TM    SWITCH,T20          IF INPUT IS F
         BZ    FTOV                CONVERT FIXED TO VARIABLE
VTOF     LH    R2,0(R4)            ADD BLKSIZE AND STARTING
         AR    R2,R4               ADDRESS
         ST    R2,ENDV             GIVING ENDING ADDRESS
         LR    R6,R4               LOAD POINTER TO V INPUT
         LA    R6,4(R6)            POINT TO FIRST LRECL
         SPACE 1
GETREC   MVC   HALFWORD,0(R6)
         LH    R5,HALFWORD
         CH    R5,=H'255'          IF LRECL IS GREATER THAN 255
         BNH   *+L'*+8
         LA    R1,MSG4             ERROR MESSAGE
         B     ERR12
         SH    R5,=H'12'           POINT PAST 4 BYTE LRECL AND
         LA    R6,12(R6)           8 BYTE LINE SEQUENCE FIELD
LOOPREC  STH   R5,LRECL            SAVE LRECL
         CH    R5,=H'71'           IF LRECL GREATER THAN 71
         BH    SPLITREC            SPLIT RECORD
         BCTR  R5,0                MAKE LENGTH CODE
         LA    R2,0(R5,R6)         POINT TO LAST BYTE OF REC
         MVC   REC80,REC80-1       CLEAR RECORD AREA
         CLI   0(R2),C'-'          IF LAST BYTE = '-'
         BNE   SKIPLOOP            MOVE '-' TO COLUMN 72
         MVI   REC80+71,C'-'
         MVI   0(R2),C' '          BLANK OUT OLD '-'
         LA    R9,REC80+71         LOAD ADDRESS COLUMN 72
BACKLOOP BCTR  R9,0
         BCTR  R2,0
         CLI   0(R2),C' '          IF LAST BYTE IS SPACE
         BE    SKIPLOOP            EXIT
         CR    R6,R2               IF AT START OF RECORD
         BH    SKIPLOOP            DONT MOVE ANYMORE
         MVC   0(1,R9),0(R2)       MOVE CONT WORD TO END OF OUTREC
         MVI   0(R2),C' '          BLANK OUT CONT INPUT WORD
         B     BACKLOOP
SKIPLOOP EX    R5,MOVE80           MOVE RECORD
         BAS   R11,WRITEF
         LA    R5,1(R5)
         LA    R6,0(R5,R6)         INCREMENT CURRET POINTER BY LENG
         C     R6,ENDV             IF ADDRESS POINTER IS LESS THAN
         BL    GETREC              END ADDRESS GO TO GETREC
         B     READBLK             ELSE READ A BLOCK
SPLITREC LH    R5,=H'70'
SPLTLOOP LA    R2,0(R5,R6)         ADDRESS OF END OF REC TO BE MOVE
         CLI   0(R2),C' '          FIND A BLANK SO WORD IS NOT
         BE    CONTSPLT            SPLIT
         BCTR  R5,0
         B     SPLTLOOP
CONTSPLT MVC   REC80,REC80-1       CLEAR OUTPUT RECORD
         MVI   REC80+71,C'-'       MOVE IN CONTUATION CHARACTER
         EX    R5,MOVE80           MOVE TO WRITE AREA
         BAS   R11,WRITEF
         LA    R2,1(R5)            ADD 1 REC LENGTH OF RECORD
         LH    R5,LRECL            WRITTEN
         SR    R5,R2               SUBTRACT FROM LRECL
         LA    R6,0(R2,R6)         INCREMENT IPOINTER BY LENGTH
         B     LOOPREC             FINISH RECORD
FTOV     LA    R2,0(R8,R4)         FIND END OF BLOCK ADRESS
         L     R9,DECB2+16         LOAD IOB ADDRESS
         LH    R9,14(R9)           LOAD LENGTH BLOCK IS SHORT
         SR    R2,R9               SUBTRACT FROM END OF FULL BLK
         ST    R2,ENDF             GIVING REAL END OF BLOCK
         LR    R6,R4               POINT TO START OF INPUT BLOCK
NEXTFREC LA    R5,70(R6)           POINT TO LAST CHAR BEFORE CONT
LOOPFV   CLI   0(R5),C' '          FIND LAST NON BLANK CHARACTER
         BNE   FOUNDATA
         BCTR  R5,0
         B     LOOPFV
FOUNDATA SR    R5,R6               SUBTRACT START FROM END GIV LENG
         CH    R5,=H'10'
         BH    *+L'*+4             IF LENGTH CODE IS LESS THAN 10
         LA    R5,10               USE 10
         CLI   71(R6),C'-'         IF THERE IS  NO CONTINUATION
         BNE   WRITEV              GO TO WRITEV
         CLI   70(R6),C' '         IF POS 71 IS BLANK
         BNE   *+L'*+4             PUT 1 BLANK BEFORE CONTINUATON
         LA    R5,1(R5)            ELSE NONE
         LA    R5,1(R5)
         LA    R2,0(R5,R6)         PUT - IN LAST BYTE OF
         MVI   0(R2),C'-'          INPUT RECORD TO BE MOVED
WRITEV   LA    R2,13(R5,R7)        LOAD ADDRESS END OF OUTPUT REC
         C     R2,ENDV             IF ENDOFREC IS LESS THAN ENDOFBL
         BNH   EXMOVEV             MOVE DATA
         SR    R7,R3               ELSE FIND BLK LENGTH
         STH   R7,0(R3)            STORE IN OUTPUT BLOCK
         BAS   R11,WRITOUT         WRITE BLOCK
         LA    R7,4(R7)            POINT PAST OUTPUT BLK COUNT
EXMOVEV  EX    R5,MOVEV            MOVE DATA TO OUTPUT BLOCK
         AP    SEQCOUNT,=P'10'     PUT SEQUENCE NUMBER
         UNPK  4(8,R7),SEQCOUNT    IN OUTPUT DATA SET
         MVI   11(R7),C'0'         MAKE LAST DIGIT CHARACTER 0
         LA    R5,13(R5)           ADD 13 TO LEN CNT GIVING LRECL
         STH   R5,HALFWORD
         MVC   0(4,R7),HALFWORD    STORE LRECL IN OUTPUT BLOCK
         LA    R7,0(R5,R7)         INCREMENT OUTPUT POINTER
         LA    R6,80(R6)           INCREMENT  INPUT POINTER
         C     R6,ENDF             IF LESS THAN END OF BLOCK
         BL    NEXTFREC            GET NEXT RECORD
         B     READBLK             ELSE GET NEXT BLOCK
         SPACE 1
WRITEF   AP    SEQCOUNT,=P'10'     PLACE SEQUENCE NUMBER IN
         UNPK  REC80+72(8),SEQCOUNT     POSITIONS 73-80
         MVI   REC80+79,C'0'       MAKE LAST POS CHAR ZERO
         MVC   0(80,R7),REC80      MOVE RECORD TO OUTPUT
         LA    R7,80(R7)           INCREMENT POINTER
         C     R7,ENDF             IF POINTER IS LESS THAN ENDOFBLK
         BCR   4,R11               RETURN
         SR    R7,R3               LOAD BLKSIZE
WRITOUT WRITE  DECBA,SF,CLISTOUT,(R3),(R7)   WRITE OUT BLOCK
        CHECK  DECBA
         LR    R7,R3               SET POINTER TO START OF BLOCK
         BR    R11
         SPACE 1
STOWOUT  TM    SWITCH,T20          IF V TO F
         BO    STOWVTOF            CHECK FOR SHORT BLOCK
         SR    R7,R3               FIND BLOCK LENGTH
         STH   R7,0(R3)            STORE IN BDW
         MVC   2(2,R3),=H'0'       ZERO OUT REST OF BDW
         B     SHORTBLK            WRITE OUT BLOCK
STOWVTOF CR    R3,R7               IF OUTPUT BLOCK IS EMPTY
         BE    SHORTBLK+L'SHORTBLK SKIP WRITING SHORT BLOCK
         SR    R7,R3               LOAD BLOCK LENGTH
SHORTBLK BAS   R11,WRITOUT         WRITE SHORT BLOCK
         TM    SWITCH,T40          IF DIRECTORY READ
         BO    EOJ                 GO TO END OF JOB
        STOW   CLISTOUT,DIRLIST,A
         B     *+L'*(R15)
         B     CHECKEND            0 - SUCCESFULLY COMPLETE
         B     ERRA                4 - DUPLICATE NAME
         NOP   0                   8 - ... NOT APPLICABLE
         B     ERRB                12 - NO DIR SPACE
         B     ERRC                16 - I/O ERROR
         NOP   0                   20 - ... NOT OR INPUT OPENED
         LA    R1,MSGD             24 - NO REGION SPACE
         B     ERRMBN
ERRC     LA    R1,MSGC
         B     ERRMBN
ERRB     LA    R1,MSGB
         B     ERRMBN
ERRA     LA    R1,MSGA
ERRMBN   MVC   ERRMEM(8),=C'MEMBER :'
         MVC   ERRMEM+9(L'NAME),NAME
ERR12    LH    R0,=H'12'
         B     ERRMSG
ERR8     LH    R0,=H'8'
ERRMSG   STH   R0,RC
         XR    R15,R15
         IC    R15,0(R1)
         EX    R15,MOVEMSG
         B     WRITERR
         SPACE 1
CHECKEND AP    OUTCOUNT,=P'1'      COUNT MEMBERS MOVED
         TM    SWITCH,T20          IF V TO F
         BO    *+L'*+4             CHECK DIRECTORY
         LA    R7,4(R7)            ELSE ADD 4 BYTES FOR OUTPUT BDW
CHECKDIR LA    R2,2
         CH    R2,DIRLEFT          IF DIRECTORY BLOCK IS NOT EMPTY
         BL    GETMEM              GET NEXT MEMBER
        POINT  CLISTIN,SAVETTR     ELSE READ NEW DIRECTORY
         B     READDIR
         SPACE 1
WRITERR  BAS   R11,PRTRC
         CLC   RC,=H'12'           IF COPY STARTED
         BE    PRTCNT              PRINT TOTALS
         B     EXIT
         SPACE 1
EOJ      MVC   ERRORMSG(13),=C'COPY COMPLETE'
         BAS   R11,PRTRC
PRTCNT   BAS   R11,COUNTP
         SPACE 1
EXIT    CLOSE  (CLISTIN,,CLISTOUT,,PRINT)
         LH    R15,RC              LOAD RETURN CODE
        $XRET  CC=(R15)
PRTRC    LH    R1,RC
         CVD   R1,WORK
         UNPK  RCP,WORK
         OI    RCP+1,C'0'
         MVC   PRTLINE,ERRLINE
         B     PUTPRNT
COUNTP   ED    OUTP,OUTCOUNT       MOVE NO OF MEMBERS MOVED
         MVC   PRTLINE,COUNTLN
PUTPRNT  TM    PRINT+(DCBOFLGS-IHADCB),DCBOFOPN
         BO    PRTOPN
        OPEN   (PRINT,(OUTPUT))
        PUT    PRINT,TITLE
PRTOPN  PUT    PRINT,PRTLINE
         BR    R11
         SPACE 1
MOVEV    MVC   12(1,R7),0(R6)      <<EXECUTED>>
MOVE80   MVC   REC80(1),0(R6)      <<EXECUTED>>
MOVEMSG  MVC   ERRORMSG(*-*),1(R1)
         EJECT
*        DCB'S DEFINITIONS
*        -----------------
         SPACE 1
        PRINT  NOGEN
CLISTIN  DCB   DSORG=PO,MACRF=R,DDNAME=SYSUT1,EODAD=STOWOUT
CLISTOUT DCB   DSORG=PO,MACRF=W,DDNAME=SYSUT2
PRINT    DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,            X
               LRECL=121,BLKSIZE=605
        PRINT  GEN
         SPACE 1
*        WORK FIELDS
*        -----------
         SPACE 1
WORK     DC    D'0'
HALFWORD DC    H'0',H'0'
SAVETTR  DC    F'0'
READADD  DC    F'0'
ENDV     DC    F'0'
ENDF     DC    F'0'
SAVERTN  DC    F'0'
NEXTMEM  DC    F'0'
OUTBLKSI DC    H'0'
DIRLEFT  DC    H'0'
BLKIN    DC    H'0'
RECIN    DC    H'0'
RC       DC    H'0'
LRECL    DC    H'0'
SEQCOUNT DC    PL4'0'
OUTCOUNT DC    PL3'0'
DIRSW    DC    XL1'0'
ALLON    EQU   X'FF'
ALLOFF   EQU   X'00'
SWITCH   DC    XL1'0'
T80      EQU   X'80'
T40      EQU   X'40'
T20      EQU   X'20'
         SPACE 1
         DC    CL1' '
REC80    DC    CL80' '
         SPACE 1
BLDLLIST DC    0F'0',AL2(1,L'BLDLNM+50) BLDL LIST
BLDLNM   DC    CL8' ',XL50'0'
         SPACE 1
DIRIN    DC    0F'0',XL256'0'      DIRECTORY BLOCK
         SPACE 1
         DS    0F
DIRLIST  DS    0XL74               DIRECTORY RECORD
NAME     DC    CL8' '
TTR      DC    XL3'0'
C        DC    XL1'0'
USERDATA DC    XL62'0'
         EJECT
*        PRINT DATA
*        ----------
         SPACE 1
TITLE    DC    CL121'1   CLIST CONVERSION DIAGNOSE'
         SPACE 1
DUPLINE  DS    0CL121
DUPCC    DC    CL8'0'
DUPNAME  DC    CL8' ',CL39' = DUPLICATE NAME (SYSUT2) - NOT COPIED'
         DC    CL66' '
         SPACE 1
ERRLINE  DS    0CL121
         DC    CL8'0',CL3'RC='
RCP      DC    CL2' ',CL3' - '
ERRORMSG DC    CL60' ',CL2' '
ERRMEM   DC    CL40' ',CL3' '
         SPACE 1
COUNTLN  DS    0CL121
         DC    CL7'0'
OUTP     DC    XL6'402020202120'
         DC    CL108' MEMBERS COPIED'
         SPACE 1
PRTLINE  DC    CL121' '
         EJECT
MSG0     DC    AL1(L'MSG0T-1)
MSG0T    DC    C'SYSUT  - FILE OPEN ERROR'
MSG1     DC    AL1(L'MSG1T-1)
MSG1T    DC    C'SYSUT  - FILE NOT V OR F'
MSG2     DC    AL1(L'MSG2T-1)
MSG2T    DC    C'SYSUT  - F FORMAT MUST BE LRECL=80'
MSG3     DC    AL1(L'MSG3T-1)
MSG3T    DC    C'SYSUT1 AND SYSUT2 CANNOT BE SAME RECFM'
MSG4     DC    AL1(L'MSG4T-1)
MSG4T    DC    C'V RECORD WITH LRECL OVER 255'
MSGA     DC    AL1(L'MSGAT-1)
MSGAT    DC    C'SYSUT2 - DUPLICATE NAME ON DIRECTORY'
MSGB     DC    AL1(L'MSGBT-1)
MSGBT    DC    C'SYSUT2 - DIRECTORY OUT OF SPACE'
MSGC     DC    AL1(L'MSGCT-1)
MSGCT    DC    C'SYSUT2 - I/O ERROR ON DIRECTORY'
MSGD     DC    AL1(L'MSGDT-1)
MSGDT    DC    C'SYSUT2 - STOW : REGION TOO SMALL'
MSGJ     DC    AL1(L'MSGJT-1)
MSGJT    DC    C'SYSUT2 - BLDL : I/O ERROR'
MSGK     DC    AL1(L'MSGKT-1)
MSGKT    DC    C'SYSUT2 - BLDL : REGION TOO SMALL'
MSGL     DC    AL1(L'MSGLT-1)
MSGLT    DC    C'SYSUT2 - BLDL : INVALID DEB'
         SPACE 1
         LTORG
         SPACE 1
        PRINT  NOGEN
        DCBD   DSORG=PO,DEVD=DA
         SPACE 2
         END
