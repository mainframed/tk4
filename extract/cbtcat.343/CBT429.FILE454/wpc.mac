WPC      TITLE '--- WPC - DISPLAY WHAT PROFILE COVERS A DATA-SET ---'
WPC      START 0
         SPACE 1
*---------------------------------------------------------------------*
*  PROGRAM :   WPC                                                    *
*  ABSTRACT :  THE WPC COMMAND WILL DISPLAY THE NAME OF THE PROFILE   *
*              THAT 'COVERS' THE DATA-SET GIVEN ON THE COMMAND. THIS  *
*              IS DONE USING AN UNDOCUMENTED FUNCTION OF RACHECK.     *
*  INPUTS :    PARAMETERS - R1                                        *
*                           -> STANDARD CPPL REPRESENTING COMMAND :   *
*                              "WPC  FILE.NAME"                       *
*              FILES - NONE                                           *
*              OTHER - NONE                                           *
*  OUTPUTS :   MESSAGE - "ENTITY(....) IS PROTECTED BY PROFILE(....)" *
*                        VARIOUS ERROR MESSAGES IF THINGS GO WRONG    *
*              FILES - NONE                                           *
*              OTHER - NONE                                           *
*  MODULE :    REENTRANT, PROBLEM KEY AND STATE EXCEPT AS REQUIRED.   *
*  ATTRIBUTES : STD. LINKAGE, APF-AUTHORIZED, AMODE(24), RMODE(24).   *
*  SPECIAL NOTES : WPC MUST BE AUTHORIZED. INCLUDE ITS NAME IN TMP    *
*              TABLE IKJEFTE2 IF IT IS TO BE USED AS A STANDARD TSO   *
*              COMMAND (OR IKJTSO00 IN SYS1.PARMLIB, MVS/XA).         *
*              BECAUSE WPC USES TAGS > 8 CHARACTERS, ASSEMBLER H IS   *
*              REQUIRED TO ASSEMBLE IT AS PROVIDED. CHANGE THE TAG    *
*              NAMES TO <= 8 CHARACTERS IF YOU MUST USE ASSEMBLER F.  *
*              ASSEMBLY OF WPC REQUIRES SYS1.MODGEN.                  *
*  CHANGE HISTORY :                                                   *
*              10/23/86 JCB - NEW                                     *
*              01/19/89 JCB - CONVERTED AWAY FROM CLEMSON STRUCTURED  *
*                             MACROS TO ALLOW DIST. ON RACF MODS TAPE *
*              05/12/93 EU  - REMOVED ASSEMBLER F RESTRICTIONS AND    *
*                             USE OF LOCAL MACROS ($DEFREG, $XENT AND *
*                             $XRET). MOINIL P.A.                     *
*                                     COMPUTING CENTER (TP 361)       *
*                                     J.R.C. - ISPRA ESTABLISHMENT    *
*                                     21020 ISPRA (VA), ITALY         *
*  METHOD OF OPERATION :                                              *
*              - PARSE COMMAND FOR DATA-SET NAME                      *
*              - GET DATA-SET'S VOLSER FROM CATALOG                   *
*              - ISSUE RACHECK FOR ALTER WITH MAGIC OPTION            *
*              - TELL USER WHAT WE FOUND                              *
*  ORIGIN :    EXTRACTED FROM CBT 92 MAR TAPE, FILE 7.                *
*---------------------------------------------------------------------*
         EJECT
        $DEFREG
        $XENT  BASE=R12,LV=PWALEN,TYPE=RENT
         LR    R10,R13
         USING PWA,R10
        $TEW$EC MSG=PUTMSG,ERR=SETRC,PUT=PUTLNE
        $TEW$PP PARM=PARSBS,REG=R9
         SPACE 1
*------- LOOK AT RESULTS FROM IKJPARS,
*              CONSTRUCT DS-NAME TO DO RACHECK FOR
         SPACE 1
         MVI   PWADSN,C' '
         MVC   PWADSN+1(L'PWADSN-1),PWADSN
         L     R1,PDEDSN           POINT TO PARSED DS-NAME
         BCTR  R1,0                BACK UP ONE CHAR
         CLI   0(R1),C''''         IF DS-NAME DOESN'T START W/QUOTE
         BE    ELSE1
         L     R15,#TSCPPL
         USING CPPL,R15
         L     R2,CPPLUPT          BUILD DS-NAME IN PWA BY
         DROP  R15
         USING UPT,R2              PREFIXING W/UPT PREFIX.
         MVC   PWADSN+1(L'UPTPREFX),UPTPREFX A LENGTH BYTE GOES IN
         XR    R3,R3               FRONT OF DS-NAME, TOO
         ICM   R3,B'0001',UPTPREFL
         LA    R15,PWADSN+1(R3)
         MVI   0(R15),C'.'
         LH    R14,PDEDSN+4
         LA    R3,1(R3,R14)
         STC   R3,PWADSN
         BCT   R14,*+L'*+6
         MVC   1(*-*,R15),1(R1)
         EX    R14,*-6
         DROP  R2
         B     ENDIF1
ELSE1    LH    R15,PDEDSN+4        MOVE STRAIGHT DS-NAME, PUT
         STC   R15,PWADSN          LENGTH BYTE ON FRONT, TOO
         BCT   R15,*+L'*+6
         MVC   PWADSN+1(*-*),1(R1)
         EX    R15,*-6
         SPACE 1
*------- SEE IF DATA-SET IS CATALOGUED, AND WHAT VOLUME IT'S ON.
*              NOTE THAT WPC DOES NOT SUPPORT UNCATALOGUED DATA-SETS.
         SPACE 1
ENDIF1   MVC   PWACML(LENCML),STCCML COPY LOCATE PARMS
         LA    R1,PWADSN+1
         ST    R1,CMLDSNAM         SET A(DS-NAME) FOR LOCATE
         LA    R1,PWACAMWA
         ST    R1,CMLWORK          SET A(WORKAREA) FOR LOCATE
         XC    CMLCVOL,CMLCVOL     NO CVOL.
        LOCATE PWACML              SEE IF CATLG'D TO GET VOLUME
         LTR   R15,R15             LOCATE ERROR?
         BZ    ENDIF2
         LA    R0,L'STCNCATM       ASSUME IT'S UNCATALOGUED
         LA    R1,STCNCATM
         BAS   R14,PUTLNE
         B     LEAVE               EXIT WPC COMMAND
         SPACE 1
*------- RACHECK THE DATA-SET NAME PROVIDED WITH THE MAGIC OPTION.
         SPACE 1
ENDIF2   MVC   PWARCHK(LENRCHK),STCRCHK RACHECK PARMS -> PWA
         LA    R1,PWARCHK          BASE ON RACHECK PARMS
         USING ACHKLIST,R1
         OI    ACHKFLG3,ACHKPRI
         DROP  R1
        MODESET KEY=ZERO           MAGIC PARM REQUIRES KEY ZERO
         LA    R3,PWACAMWA+6       GET POINTER TO VOLSER
        RACHECK ENTITY=(PWADSN+1), ISSUE RACHECK                       X
               VOLSER=(R3),                                            X
               MF=(E,PWARCHK)
         LTR   R15,R15
         BNZ   RACKERR
         SPACE 1
*------- BUILD AND ISSUE RESULTS MESSAGE
         SPACE 1
         MVC   PWAGEN+1(L'PWAGEN-1),4(R1) R1 POINTS TO RETURN AREA :
*                                  PROFILE NAME IS AT +4
        MODESET KEY=NZERO          GET NORMAL AGAIN
         LA    R1,PWAGEN+1         SEE HOW LONG PROFILE NAME IS
LOOP1    CLI   0(R1),C' '          BY SCANNONG FOR A BLANK
         BE    ENDLOOP1
         LA    R1,1(R1)
         B     LOOP1
ENDLOOP1 LA    R15,PWAGEN+1        GET START OF NAME
         SR    R1,R15              GET DIFFERENCE AND
         STC   R1,PWAGEN           SET LENGTH
         MVI   PWAMSG,C' '         BUILD MESSAGE
         MVC   PWAMSG+1(L'PWAMSG-1),PWAMSG
         MVC   PWAMSG(L'STCRM1),STCRM1 MESSAGE SEGMENT 1
         XR    R1,R1               INCLUDE DATA-SET NAME
         ICM   R1,B'0001',PWADSN
         BCT   R1,*+L'*+6
         MVC   PWAMSG+L'STCRM1(*-*),PWADSN+1
         EX    R1,*-6
         LA    R1,PWAMSG+L'STCRM1+1(R1) POINT PAST DS-NAME
         MVC   0(L'STCRM2,R1),STCRM2 MESSAGE SEGMENT 2
         LA    R1,L'STCRM2(R1)     POINT PAST MSGSEG 2
         XR    R15,R15
         ICM   R15,B'0001',PWAGEN
         BCT   R15,*+L'*+6         INCLUDE PROFILE NAME
         MVC   0(*-*,R1),PWAGEN+1
         EX    R15,*-6
         LA    R1,1(R1,R15)
         MVI   0(R1),C')'          APPEND CLOSING PAREN
         LA    R0,1(R1)            POINT TO END OF MESSAGE
         LA    R1,PWAMSG           POINT TO START
         SR    R0,R1               GET DIFFERENCE = LENGTH
         BAS   R14,PUTLNE          SAY WHAT WE FOUND
         SPACE 1
*------- TERMINATE
         SPACE 1
LEAVE    XR    R15,R15             RC=0 -------------------------------
ENDWPC  $XRET  CC=(R15),LV=PWALEN,TYPE=RENT
SETRC    LA    R15,12              RC=12 ------------------------------
         B     ENDWPC
         SPACE 1
*------- BLOCK NAME=RACKERR,TYPE=ERREXIT
RACKERR  LR    R3,R15              SAVE RACHECK RETURN CODE
        MODESET KEY=NZERO          WE GOT CALLED IN KEY ZERO
         CH    R3,=H'4'
         BE    RENOPF
         LA    R0,L'STCRCKIA       RC=8 : INSUFFICIENT ACCESS
         LA    R1,STCRCKIA
         B     RACKEND
RENOPF   LA    R0,L'STCRCKNP       RC=4 : NO PROFILE
         LA    R0,STCRCKNP
RACKEND  BAS   R14,PUTLNE
         LA    R15,8               RC=8 -------------------------------
         B     ENDWPC
         EJECT
*------- SKELETONS AND CONSTANTS
         SPACE 1
STCCML  CAMLST NAME,*,,*           CAMLST NAME FOR GETTING VOLSERS
LENCML   EQU   *-STCCML
         SPACE 1
STCRCKIA DC    C'INSUFFICIENT ACCESS TO DATA-SET.'
STCRCKNP DC    C'DATA-SET IS NOT COVERED BY A RACF PROFILE.'
STCNCATM DC    C'DATA-SET IS NOT CATALOGUED.'
STCRM1   DC    C'ENTITY('
STCRM2   DC    C') IS PROTECTED BY PROFILE('
         SPACE 1
STCRCHK RACHECK CLASS='DATASET',ATTR=ALTER,MF=L
LENRCHK  EQU   *-STCRCHK
         SPACE 1
        LTORG  ,                   LITERAL POOL
         SPACE 1
*------- IKJPARS MACROS
         SPACE 1
        PRINT  NOGEN
PARSBS  IKJPARM ,
PDEDSN  IKJPOSIT DSNAME,                                               X
               PROMPT='DATA-SET NAME TO LOCATE PROFILE FOR'
        IKJENDP ,
        PRINT  GEN
         EJECT
*------- WORK-AREAS DESCRIPTION
         SPACE 1
PWA      DSECT ,
         DS    18F                 STANDARD SAVE AREA
        $TEW$WA
PWARCHK  DS    0F,CL(LENRCHK)      RACHECK PARMS
PWACML   DS    0F,CL(LENCML)       LOCATE DS-NAMES IN CATALOG
         ORG   PWACML
         DS    F                   FLAGS FOR LOCATE
CMLDSNAM DS    F                   A(DATA-SET NAME)
CMLCVOL  DS    F                   CVOL POINTER OR ZERO
CMLWORK  DS    F                   A(LOCATE'S PWA)
         ORG   ,
PWAMSG   DS    CL100
PWADSN   DS    CL45
PWAGEN   DS    CL45
PWACAMWA DS    0D,XL265
         SPACE 1
PWALEN   EQU   (((*-PWA)+7)/8)*8
         SPACE 1
        PRINT  NOGEN
        $TEW$DS
        IKJUPT ,
        ICHACHKL ,                 <- MAPPING MACRO FOR RACHECK PL
        PRINT  GEN
         SPACE 1
         END
