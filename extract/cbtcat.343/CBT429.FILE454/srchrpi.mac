SRPI     TITLE 'SEARCH A REPLY PENDING IDENTIFICATION ROUTINE.'
SRCHRPI  START 0
         SPACE 1
* CALLING SEQUENCE : CALL SRCHRPI,(A,B,C),VL
* ------------------              (A,B)
*
*        WHERE : A - IS THE ADDRESS OF A 1-BYTE FIELD CONTAINING THE
*                    LENGTH-1 OF THE IMMEDIATELY FOLLOWING CHARACTERS
*                    FIELD GIVING THE REPLY MESSAGE IDENTIFICATION
*                    TEXT (MUST BE AT LEAST 8-CHARACTERS LONG) USED
*                    TO FIND THE PENDING REPLY.
*                    I.E. : R1 --> DC A(A) -->    A DC AL1(L'TEXT-1)
*                                              TEXT DC C'...'
*
*                B - IS THE ADDRESS OF A 2-CHARACTERS FIELD INTO WHICH
*                    THE REQUESTED PENDING REPLY-ID NUMBER IS EDITED.
*
*                C - RECEIVES THE RETURN CODE (FORMAT FULLWORD -
*                    F BOUNDARY) IF SUPPLIED (OPTIONAL).
*
*        RETURN CODES (REGISTER 15) :
*
*                        0 = REPLY-ID NUMBER EDITED.
*                        4 = PENDING REPLY NOT FOUND.
*                        8 = CALLING SEQUENCE, PARAMETER ALIGNMENT OR
*                            INVALID ERROR.
*
* MODULE ATTRIBUTE : THIS ROUTINE IS RE-ENTERABLE.
* ------------------
*
* AUTHOR :     MOINIL P.A.
* --------     COMPUTING CENTRE
*              J.R.C. - ISPRA ESTABLISHMENT
*              21020 ISPRA (VA), ITALY
         EJECT
        $DEFREG
        $XENT  BASE=R12,LV=WRKL,TYPE=RENT
         EJECT
         LR    R2,R1
         LR    R11,R13
         USING WRKDSECT,R11
         LA    R14,SVA+(18*4)      CLEAR WORK AREA
         L     R15,=A(WRKL-(18*4))
         XR    R0,R0
         LR    R1,R0
         MVCL  R14,R0
         SPACE 1
         XR    R7,R7               GET ARGUMENTS ADDRESSES
         LR    R8,R7
         LR    R9,R7
         LR    R10,R7
         TM    0(R2),X'80'
         BO    ERSA
         TM    4(R2),X'80'
         BO    GADD
         TM    8(R2),X'80'
         BZ    ERSA
         TM    11(R2),X'03'
         BNZ   ERSA
         L     R9,8(R2)
         LA    R9,0(R9)
GADD     L     R8,4(R2)
         LA    R8,0(R8)
         L     R7,0(R2)
         LA    R7,0(R7)
         CLI   0(R7),7
         BL    ERSA
         L     R1,CVTPTR           CVT POINTER
         L     R1,CVTCUCB-CVT(R1)  UCM BASE POINTER
         USING UCM,R1
         MVC   CONASID+2(2),UCMCTID     GET COMMTASK ASID
         DROP  R1
        ZEROKEY ,
        ESAR   R6                  GET SECONDARY ASID
         ST    R6,SASID            KEEP IT
         MVC   AXPL(4),=AL2(1,0)
        AXRES  AXLIST=AXPL         RESERVE AX
         L     R6,CONASID          GET COMMTASK ASID
        AXEXT  ASID=(6)            EXTRACT AX OF CONSOLE IN R0
        AXSET  AX=(0)              SET AX TO ALLOW CONSOLE AS 2ND
        RESETKEY ,
         L     R1,CVTPTR           BEGINNING  OF ORE CHAIN
         L     R1,CVTCUCB-CVT(R1)
         USING UCM,R1
         L     R2,UCMRPYQ          ADDRESS OF FIRST ORE (REPLY-Q)
         DROP  R1
STOR0    LTR   R2,R2
         BZ    NOTFND              NO ORE CHAIN OR END OF ORE CHAIN
         LA    R3,OREWA            THE 'TO' ADDRESS
         LA    R4,ORESIZE          LENGTH OF THE 'TO'
        ZEROKEY ,
         L     R6,CONASID          GET COMMTASK ASID
        SSAR   R6                  SET CONSOLE AS SECONDARY
         SR    R15,R15             ZERO R15 FOR 'FROM' KEY
STOR1   MVCP   0(R4,R3),0(R2),R15  MOVE IT
         BZ    STOR2
         AL    R2,=F'256'          BUMP 'FROM' ADDRESS BY 256
         AL    R3,=F'256'          BUMP 'TO' ADDRESS BY 256
         SL    R4,=F'256'          DECREMENT LENGTH OF MOVE LEFT
         B     STOR1               GO BACK AGAIN
STOR2    L     R6,SASID            RESTORE PREVIOUS SECONDARY
        SSAR   R6                  SHOULD BE AS PRIMARY
        RESETKEY ,
         LA    R3,OREWA            ORE AREA ADDRESS
         USING OREF,R3
         CLC   ORECBID,=CL4'ORE '  CHECK BLOCK-ID
         BNE   NOTFND              NO... STOP HERE?
         L     R2,ORERWQE          WQE ADDRESS
         LTR   R2,R2               ANY ONE?
         BZ    NOTFND              NO... STOP HERE
         LA    R5,WQEWA            THE 'TO' ADDRESS
         LA    R4,WQETXTL-WQE      LENGTH OF THE 'TO'
        ZEROKEY ,
         L     R6,CONASID          GET COMMTASK ASID
        SSAR   R6                  SET CONSOLE AS SECONDARY
         SR    R15,R15             ZERO R15 FOR 'FROM' KEY
STOR3   MVCP   0(R4,R5),0(R2),R15  MOVE IT
         BZ    STOR4
         AL    R2,=F'256'          BUMP 'FROM' ADDRESS BY 256
         AL    R5,=F'256'          BUMP 'TO' ADDRESS BY 256
         SL    R4,=F'256'          DECREMENT LENGTH OF MOVE LEFT
         B     STOR3               GO BACK AGAIN
STOR4    L     R6,SASID            RESTORE PREVIOUS SECONDARY
        SSAR   R6                  SHOULD BE AS PRIMARY
        RESETKEY ,
         LA    R5,WQEWA            WQE AREA ADDRESS
         USING WQE,R5
         CLC   OREID(L'OREID),WQETXT+1  REPLY-ID MATCH?
         BNE   STOR5               NO... BYPASS IT
         L     R0,WQENBR           MESSAGE TEXT LENGTH
         SH    R0,=H'5'
         XR    R1,R1
         IC    R1,0(R7)            COMPARE LENGTH
         CLR   R1,R0               CAN COMPARE TEXT?
         BH    STOR5               NO... BYPASS IT
         EX    R1,CHKRQ            IS IT THE REQUESTED TEXT?
         BE    STOR6               YES
STOR5    L     R2,ORELKP           LINKAGE POINTER
         B     STOR0
CHKRQ    CLC   1(*-*,R7),WQETXT+4  <<EXECUTED>>
STOR6    MVC   0(L'OREID,R8),OREID SET REPLY-ID NUMBER
         DROP  R3,R5
         B     STORX
NOTFND   LA    R10,4
STORX   ZEROKEY ,
        AXFRE  AXLIST=AXPL         FREE AX
        RESETKEY ,
         B     LEAVE
ERSA     LA    R10,8
LEAVE    LTR   R9,R9
         BZ    EXIT
         ST    R10,0(R9)           STORE INDICATOR
EXIT    $XRET  CC=(R10),LV=WRKL,TYPE=RENT
         SPACE 2
        LTORG
         EJECT
WRKDSECT DSECT                     WORK AREAS DESCRIPTION
         SPACE 1
SVA      DS    18F                 SAVE AREA
AXPL     DS    2H                  AX PARM LIST
SASID    DS    F                   PREVIOUS SECONDARY ASID
CONASID  DS    F                   'CONSOLE' ASID (COMMTASK)
OREWA    DS    (((ORESIZE+7)/8)*8)X     ORE AREA
WQEWA    DS    ((((WQEXA-WQE)+7)/8)*8)X WQE AREA
         SPACE 1
WRKL     EQU   (((*-SVA)+7)/8)*8   WORK AREAS LENGTH
         SPACE 2
        PRINT  NOGEN
        CVT    DSECT=YES,LIST=YES
        IEECUCM
        IHAORE
        IHAWQE
         SPACE 2
         END
