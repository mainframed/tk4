ICFS     TITLE 'ICF CATALOG SEQUENTIAL READ SUBROUTINE.'
ICFSR    START 0
         SPACE 2
* PURPOSE :    ROUTINE TO READ SEQUENTIALLY AN ENTIRE ICF CATALOG.
* ---------    A DD-CARD, WRITTEN AS BELOW, IS NEEDED TO DEFINE
*              THE DESIRED CATALOG :
*
*              //...     DD  DSN=...CATALOG DS-NAME...,DISP=SHR
*
* CALLING SEQUENCE : CALL ICFSO,(A,B,C,D),VL
* ------------------            (A,B,C)
*                               (A,B)
*                               (A)
*
*        WHERE : A - IS THE ADDRESS OF THE DD-NAME (FORMAT CL8).
*
*                B - IS THE ADDRESS OF THE DEVICE CHARACTERISTICS
*                    (FORMAT FULLWORD - F BOUNDARY) RETURNED BY THE
*                    ROUTINE IF SUPPLIED (OPTIONAL). IT WILL RECEIVE
*                    FIVE FULLWORDS INFORMATION AS DESCRIBED IN DEVTYPE
*                    MACRO (SEE MVS/EXTENDED ARCHITECTURE : SYSTEM-DATA
*                    ADMINISTRATION), FOLLOWED BY ONE HALFWORD
*                    CONTAINING THE NUMBER OF ALTERNATE TRACKS FOR
*                    THE DEVICE, FOLLOWED BY A 6 CHARACTERS FIELD
*                    CONTAINING THE VOLUME SERIAL NUMBER OF THE
*                    DEVICE, FOLLOWED BY A 44 CHARACTERS FIELD
*                    CONTAINING THE CATALOG DATA-SET NAME. THIS
*                    ARGUMENT IS OPTIONAL AND MAY BE OMITTED OR HIS
*                    ADDRESS MAY BE SET TO ZERO IN THE PARAMETERS LIST.
*
*                C - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F
*                    BOUNDARY) IF SUPPLIED (OPTIONAL). VALUE IS ALWAYS
*                    PLACED IN REGISTER 15 AND CAN BE :
*
*                     0 - OPEN CORRECTLY EXECUTED.
*                     1 - FILE ALREADY OPENED.
*                     2 - OPEN ERROR : R0 = VSAM OPEN ERROR CODE,
*                                      R1 = OPEN RETURN CODE (R15).
*                     3 - CALLING SEQUENCE OR ARGUMENT ALIGNMENT ERROR.
*                     4 - NOT OS/VS2 SYSTEM.
*                     5 - DD-CARD MISSING.
*                     6 - NOT DIRECT-ACCESS STORAGE DEVICE.
*                     7 - READ JFCB ERROR.
*                     8 - DD-CARD INCORRECTLY CODED.
*                     9 - NOT ICF CATALOG.
*                         CLOSE CATALOG IS OK (R0 AND R1 = 0) OR IF
*                         CLOSE ERROR : R0 = VSAM CLOSE ERROR CODE,
*                                       R1 = CLOSE RETURN CODE (R15).
*                    10 - CATALOG DSCB FORMAT-1 CONTROL ERROR.
*
*                D - IS THE ADDRESS OF A ONE BYTE FLAGS TO INDICATE
*                    CALLER STATUS AND SPECIAL REQUEST (SEE MACRO
*                    $ICFSW FOR MORE DETAIL).
         EJECT
* CALLING SEQUENCE : CALL ICFSR,(A,B,C,D),VL
* ------------------            (A,B,C)
*                               (A,B)
*                               (A)
*
*        WHERE : A - IS THE ADDRESS OF A FIELD (FORMAT XL1,CL44) WHICH
*                    RECEIVES, AFTER EACH READ OPERATION, UNLESS WHEN
*                    THE END-OF-FILE IS DETECTED, ONE OF THE FOLLOWING
*                    INFORMATION :
*                     - A NON-VSAM DATA-SET NAME (FORMAT AL1(1),CL44).
*                     - A GDG DATA-SET NAME (FORMAT AL1(2),CL44).
*                     - A CLUSTER NAME (FORMAT AL1(3),CL44).
*                     - AN ALTERNATE INDEX NAME (FORMAT AL1(4),CL44).
*                     - A DATA (CLUSTER) NAME (FORMAT AL1(5),CL44).
*                     - AN INDEX (CLUSTER) NAME (FORMAT AL1(6),CL44).
*                     - A PATH NAME (FORMAT AL1(7),CL44).
*                     - AN ALIAS NAME (FORMAT AL1(8),CL44).
*                     - AN AIX TRUE-NAME NAME (FORMAT AL1(9),CL44).
*                     - A DATA TRUE-NAME NAME (FORMAT AL1(10),CL44).
*                     - AN INDEX TRUE-NAME NAME (FORMAT AL1(11),CL44).
*                     - AN ICF CONNECTOR NAME (FORMAT AL1(12),CL44).
*                     - A VSAM CONNECTOR NAME (FORMAT AL1(13),CL44).
*                     - AN INFORMATION CONTINUATION OF A PREVIOUS NAME
*                       (FORMAT AL1(255),CL44).
*
*                B - IS THE ADDRESS OF A FIELD (FORMAT CL6,XL2) WHICH
*                    RECEIVES THE VOLUME SERIAL NUMBER RELATIVE
*                    TO THE FIRST ARGUMENT IF PERTINENT (OTHERWISE
*                    IT IS CLEARED TO BLANKS), FOLLOWED BY THE FILE
*                    SEQUENCE NUMBER (ONLY USED FOR NON-VSAM TAPE, IT
*                    IS CLEARED TO BINARY ZEROS). THIS ARGUMENT IS
*                    OPTIONAL AND MAY BE OMITTED OR HIS ADDRESS MAY
*                    BE SET TO ZERO IN THE PARAMETERS LIST.
*
*                C - IS THE ADDRESS OF A FIELD (FORMAT XL4) WHICH
*                    RECEIVES THE DEVICE TYPE RELATIVE TO THE SECOND
*                    ARGUMENT IF PERTINENT, OTHERWISE IT IS CLEARED
*                    TO BLANKS. THIS ARGUMENT IS OPTIONAL AND MAY BE
*                    OMITTED OR HIS ADDRESS MAY BE SET TO ZERO IN THE
*                    PARAMETERS LIST.
         EJECT
*                D - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F
*                    BOUNDARY) IF SUPPLIED (OPTIONAL). VALUE IS ALWAYS
*                    PLACED IN REGISTER 15 AND CAN BE :
*
*                    -1 - END-OF-FILE DETECTED.
*                         CLOSE CATALOG IS OK (R0 AND R1 = 0) OR IF
*                         CLOSE ERROR : R0 = VSAM CLOSE ERROR CODE,
*                                       R1 = CLOSE RETURN CODE (R15).
*                     0 - READ OPERATION CORRECTLY EXECUTED.
*                     1 - READ ERROR : R0 = VSAM FDBK ERROR CODE,
*                                      R1 = GET RETURN CODE (R15).
*                     2 - FILE NOT OPENED.
*                     3 - CALLING SEQUENCE OR ARGUMENT ALIGNMENT ERROR.
*                     4 - UNEXPECTED CATALOG RECORD STRUCTURE.
*
*        NOTE : ON ALL ERROR RETURN, THE CATALOG FILE STATUS REMAINS
*               UNCHANGED (OPENED OR CLOSED).
         EJECT
* CALLING SEQUENCE : CALL ICFSC,(A,B),VL
* ------------------            (A)
*
*        WHERE : A - IS THE ADDRESS OF THE CATALOG CONTROL INFORMATION
*                    (FORMAT FULLWORDS - F BOUNDARIES) RETURNED BY THE
*                    ROUTINE IF SUPPLIED (OPTIONAL : ARGUMENT MAY BE
*                    OMITTED PASSING A ZERO PARAMETERS LIST POINTER,
*                    REGISTER 1, WHEN THE NEXT IS ALSO OMITTED, OR HIS
*                    ADDRESS MAY BE ZERO IN THE PARAMETERS LIST).
*                    IT WILL RECEIVE TWELVE FULLWORDS INFORMATION AS
*                    DESCRIBED BELOW :
*                     - THE TOTAL NUMBER OF GETS ISSUED AGAINST THE
*                       BASIC CATALOG STRUCTURE.
*                     - THE NUMBER OF NONVSAM ENTRIES FOUND.
*                     - THE NUMBER OF CLUSTER ENTRIES FOUND.
*                     - THE NUMBER OF ALTERNATE INDEX ENTRIES FOUND.
*                     - THE NUMBER OF DATA (CLUSTER) ENTRIES FOUND.
*                     - THE NUMBER OF INDEX (CLUSTER) ENTRIES FOUND.
*                     - THE NUMBER OF GDG BASE ENTRIES FOUND.
*                     - THE NUMBER OF GDG ENTRIES FOUND.
*                     - THE NUMBER OF PATH ENTRIES FOUND.
*                     - THE NUMBER OF ALIAS ENTRIES FOUND.
*                     - THE NUMBER OF TRUE-NAME ENTRIES FOUND.
*                     - THE NUMBER OF ICF CONNECTOR ENTRIES FOUND.
*
*                B - IS THE INDICATOR RESPONSE (FORMAT FULLWORD - F
*                    BOUNDARY) IF SUPPLIED (OPTIONAL). VALUE IS ALWAYS
*                    PLACED IN REGISTER 15 AND CAN BE :
*
*                     0 - CLOSE CORRECTLY EXECUTED.
*                     1 - CALLING SEQUENCE OR ARGUMENT ALIGNMENT ERROR.
*                     2 - CLOSE ERROR : R0 = VSAM CLOSE ERROR CODE,
*                                       R1 = CLOSE RETURN CODE (R15).
*
* AUTHOR :     P.A. MOINIL
* --------     COMPUTING CENTRE
*              J.R.C. - ISPRA ESTABLISHMENT
*              21020 ISPRA (VA), ITALY
         EJECT
        $DEFREG
         SPACE 1
*        MISCELLANEOUS DEFINITIONS.
         SPACE 1
OFF      EQU   X'0F'               SET SWITCH NOP OPERATION
ON       EQU   X'F0'               SET SWITCH BRANCH OPERATION
BSL      EQU   12                  BUFFER SPACE LENGTH (IN K-BYTES)
         SPACE 2
        PRINT  NOGEN
         SPACE 1
        CVT    DSECT=YES,LIST=YES
        IHAPSA
        IKJTCB
        IEZJSCB
TIODSECT DSECT
        IEFTIOT1
JFCDSECT DSECT
        IEFJFCBN LIST=YES
        DCBD   DSORG=PS,DEVD=DA
DSCDSECT DSECT
        IECSDSL1 (1)
        IFGACB
         SPACE 1
        PRINT  GEN
         SPACE 2
ICFSR    CSECT                     RESTORE ORIGINAL CSECT
         EJECT
        $ICFCD
         EJECT
         ENTRY ICFSO
         ENTRY ICFSC
         SPACE 1
         USING *,R15
         MVI   WTGO+3,ICFS-*       SET ENTRY DISPLACEMENT (READ)
         B     WTGO
         DROP  R15
         SPACE 1
         USING *,R15
ICFSO    MVI   WTGO+3,ICFS-*       SET ENTRY DISPLACEMENT (OPEN)
         B     WTGO
         DROP  R15
         SPACE 1
         USING *,R15
ICFSC    MVI   WTGO+3,ICFS-*       SET ENTRY DISPLACEMENT (CLOSE)
         DROP  R15
         SPACE 1
WTGO     LA    R15,*-*(R15)        SET COMMON ENTRY ADDRESS
         SPACE 1
ICFS    $XENT BASE=(R11,R12)
         LR    R15,R11             COMPUTE WHERE TO GO?
         BCTR  R15,0
         XR    R14,R14
         IC    R14,0(R15)
         SRL   R14,1
         B     *+L'*-(ICFS-WTGO)+0(R14) ENTER SELECTED ROUTINE
         SPACE 1
         B     CTCLOSE             BRANCH ENTRIES VECTOR
         B     CTOPEN
         EJECT
         XR    R9,R9
         XR    R6,R6
         XR    R7,R7
         LA    R10,MAXERR
         TM    0(R1),X'80'         CONTROL ARGUMENTS
         BO    RD3
         TM    4(R1),X'80'
         BO    RD2
         TM    8(R1),X'80'
         BO    RD1
         TM    12(R1),X'80'
         BZ    ERR3
         TM    15(R1),X'03'
         BNZ   ERR3
         L     R9,12(R1)
         LA    R9,0(R9)
RD1      L     R6,8(R1)
         LA    R6,0(R6)
         LTR   R6,R6
         BZ    RD2
         XC    0(4,R6),0(R6)
RD2      L     R7,4(R1)
         LA    R7,0(R7)
         LTR   R7,R7
         BZ    RD3
         MVC   0(6,R7),=CL8' '
         XC    6(2,R7),6(R7)
RD3      L     R8,0(R1)
         LA    R8,0(R8)
         LTR   R8,R8
         BZ    ERR3
         MVI   0(R8),0
         MVI   1(R8),C' '
         MVC   2(L'DSNAME-1,R8),1(R8)
         LA    R1,DCBSR
         USING IHADCB,R1
         TM    DCBOFLGS,DCBOFOPN   TEST IF OPENED?
         BZ    ERR2                BRANCH IF NOT
         DROP  R1
         L     R2,CURREC           GET CURRENT RECORD POINTER
         CL    R2,ENDREC           NEW RECORD MUST READ?
         BL    XCONT               NO, CONTINUE PROCESS OF CURRENT
GETNEXT  L     R2,RPLSR            PICK UP RPL ADDRESS
        GET    RPL=(R2)            READ A CATALOG (BCS) RECORD
         L     R0,NGETS            UPDATE GETS COUNT
         AH    R0,=H'1'
         ST    R0,NGETS
         LTR   R15,R15
         BZ    GETOK
         L     R3,4(R13)
         ST    R15,24(R3)          SET GET RC IN R1
        SHOWCB RPL=(R2),AREA=WORK,LENGTH=4,FIELDS=(FDBK)
         MVC   20(4,R3),WORK       SET ERROR CODE IN R0
         B     ERR1
GETOK    L     R2,BUFPTR           GET RECORD ADDRESS
         LR    R1,R2               COMPUTE END OF RECORD + 1 ADDRESS
         AH    R1,0(R2)
         ST    R1,ENDREC
         LA    R2,2(R2)            SKIP OVER RECORD LENGTH (LL)
         USING ICFDSECT,R2
         LA    R1,TBTYPES
NXTTY    CLC   0(1,R1),ICFRTY      CURRENT RECORD TYPE?
         BE    SELTY               YES
         LA    R1,L'TBTYPES(R1)    NO, POINT TO NEXT
         CLI   0(R1),0             END OF TABLE?
         BNE   NXTTY               NO
         B     ERR4                YES, SIGNAL IT, GO BACK FOR ANOTHER
SELTY    ICM   R15,B'1111',1(R1)   GET PROCESSING ADDRESS
         BR    R15                 GO PROCESS IT
XPASS    ST    R14,SVBACK          SAVE BACK FOR FURTHER PROCESS
         STM   R3,R5,SVREGS
         ST    R2,CURREC           SAVE CURRENT RECORD POINTER
         XR    R10,R10
         B     EXIT
XCONT    L     R14,SVBACK          GET CONTINUE PROCESS ADDRESS
         LM    R3,R5,SVREGS
         BR    R14
XRET     XR    R10,R10
         ST    R10,ENDREC
         B     EXIT
         SPACE 2
*        NON-VSAM RECORD
         SPACE 1
NONVSAM  L     R0,NNVSM            UPDATE NONVSAM ENTRIES COUNT
         AH    R0,=H'1'
         ST    R0,NNVSM
         MVI   0(R8),1             SAY NON-VSAM
         MVC   1(L'NVNAME,R8),NVNAME    SET DATA-SET NAME
         LTR   R7,R7
         BZ    XRET
         XR    R3,R3
         ICM   R3,B'0011',NVOLCNT  GET # OF VOLUME CELLS
         BZ    ERR4                NONE
         LA    R1,X'04'            ASK FOR VOLUME CELL
         BAS   R14,NXCELLS         GO TO SEARCH CELL
         BNZ   ERR4                NOT FOUND
NVS1     MVC   0(L'VOLSERN,R7),VOLSERN  PROCESS VOLUME CELL
         MVC   6(L'VOLFLSEQ,R7),VOLFLSEQ
         LTR   R6,R6
         BZ    *+L'*+6
         MVC   0(L'VOLDEVTP,R6),VOLDEVTP
         BCT   R3,*+L'*+4          LOOP TILL ALL VOLUMES DONE
         B     XRET
         BAS   R14,XPASS
         BAS   R14,NXCELL          GO TO NEXT CELL
         BNZ   ERR4                NOT FOUND
         CLI   VOLTYPE,X'04'       VOLUME CELL?
         BNE   ERR4                NO
         MVI   0(R8),255           YES, SAY CONTINUATION
         B     NVS1
         SPACE 2
*        GDG RECORD
         SPACE 1
GDGDS    L     R0,NGDGB            UPDATE GDG BASE ENTRIES COUNT
         AH    R0,=H'1'
         ST    R0,NGDGB
         MVC   DSNAME,GDGNAME      GET DATA-SET NAME
         LA    R4,DSNAME           POINT TO BEGINNING OF DSNAME
GDG1     CLI   0(R4),C' '          LOOK FOR FIRST BLANK
         BE    *+L'*+8             WHEN FOUND, STOP
         LA    R4,1(R4)            GO TO NEXT CHARACTER
         B     GDG1
         LA    R1,X'05'            ASK FOR GAT CELL (GEN. AGING TABLE)
         BAS   R14,NXCELLS         GO TO SEARCH CELL
         BNZ   ERR4                NOT FOUND
         XR    R5,R5
         ICM   R5,B'0001',GATCNT
         BNZ   GDG2                GO PROCESS
         MVI   0(R8),2             SAY GDG
         MVC   1(L'DSNAME,R8),DSNAME    SET BASE DATA-SET NAME
         B     XRET
GDG2     MVC   0(2,R4),=C'.G'      GET READY TO ADD GEN# & VER#
GDG3     LA    R1,C'H'             ASK FOR GEN. D.S. NAME CELL
         BAS   R14,NXCELLS         GO TO SEARCH CELL
         BNZ   ERR4                NOT FOUND
         L     R0,NGDGE            UPDATE GDG ENTRIES COUNT
         AH    R0,=H'1'
         ST    R0,NGDGE
         XR    R0,R0
         ICM   R0,B'0011',GDSGENO  GET GENERATION NUMBER
         CVD   R0,WORKD            CONVERT
         UNPK  WORKC,WORKD         UNPACK
         MVZ   WORKC+7(1),WORKC+6  MOVE ZONE BYTE
         MVC   2(4,R4),WORKC+4     MOVE INTO DATA-SET NAME
         MVI   6(R4),C'V'          GET READY TO ADD VER#
         XR    R0,R0
         ICM   R0,B'0001',GDSVERNO GET VERSION NUMBER
         CVD   R0,WORKD            CONVERT
         UNPK  WORKC,WORKD         UNPACK
         MVZ   WORKC+7(1),WORKC+6  MOVE ZONE BYTE
         MVC   7(2,R4),WORKC+6     MOVE INTO DATA-SET NAME
         XR    R3,R3
         ICM   R3,B'0011',GDSVOLCT SAVE # OF VOLUME CELLS
         MVI   0(R8),2             SAY GDG
         MVC   1(L'DSNAME,R8),DSNAME    SET DATA-SET NAME
         LTR   R7,R7
         BZ    XRET
         LA    R1,X'04'            ASK FOR VOLUME CELL
         BAS   R14,NXCELLS         GO TO SEARCH CELL
         BNZ   ERR4                NOT FOUND
GDG4     MVC   0(L'VOLSERN,R7),VOLSERN  PROCESS VOLUME CELL
         MVC   6(L'VOLFLSEQ,R7),VOLFLSEQ
         LTR   R6,R6
         BZ    *+L'*+6
         MVC   0(L'VOLDEVTP,R6),VOLDEVTP
         BCT   R3,GDG5             LOOP TILL ALL VOLUMES DONE
         BCT   R5,*+L'*+4          LOOP TILL ALL GDG'S DONE
         B     XRET
         BAS   R14,XPASS
         B     GDG3
GDG5     BAS   R14,XPASS
         BAS   R14,NXCELL          GO TO NEXT CELL
         BNZ   ERR4                NOT FOUND
         CLI   VOLTYPE,X'04'       VOLUME CELL?
         BNE   ERR4                NO
         MVI   0(R8),255           YES, SAY CONTINUATION
         B     GDG4
         SPACE 2
*        CLUSTER RECORD
         SPACE 1
CLUSTER  L     R0,NCLTR            UPDATE CLUSTER ENTRIES COUNT
         AH    R0,=H'1'
         ST    R0,NCLTR
         MVI   0(R8),3             SAY VSAM CLUSTER
         NI    SWCLS+1,OFF
         CLI   CLNAME,0            IS IT THE CATALOG ITSELF?
         BE    CLS2                YES
         XR    R1,R1
         IC    R1,CLNMLEN
         BCTR  R1,0
         BCTR  R1,0
         EX    R1,CLSMN            SET CLUSTER NAME
CLS2     BAS   R14,NXCELL          GET NEXT CELL
         BNZ   ERR4                NOT FOUND
         CLI   SECTYPE,X'02'       SECURITY CELL?
         BNE   CLS3                NO
         TM    SWPRI,ICFMSPW       MASTER PASSWORD REQUESTED?
         BZ    CLS2                NO
         ICM   R1,B'1111',AMSPW    YES, SET MASTER PASSWORD
         MVC   1(L'SECMSTR,R1),SECMSTR
         B     CLS2
CLS3     CLI   RELTYPE,X'06'       AIX ASSOCIATED CELL?
         BNE   CLS4                NO
         XR    R3,R3
         IC    R3,RELCNT           GET COUNT
         B     CLS2
CLS4     CLI   DIDTYPE,C'D'        DATA NAME CELL?
         BNE   CLS2                NO
         BAS   R14,XPASS
         B     CLS11
CLS10    BAS   R14,XPASS
         LA    R1,C'D'             ASK FOR DATA NAME CELL
         BAS   R14,NXCELLS         GO TO SEARCH CELL
         BNZ   ERR4                NOT FOUND
CLS11    L     R0,NDTCL            UPDATE DATA ENTRIES COUNT
         AH    R0,=H'1'
         ST    R0,NDTCL
         MVI   0(R8),5             SAY DATA OF CLUSTER
         XR    R1,R1
         IC    R1,DIDKEYLN         LENGTH OF NAME
         BCTR  R1,0
         BCTR  R1,0
         EX    R1,CLSMK            SET DATA NAME
         LTR   R7,R7
         BNZ   CLS13
         BAS   R14,XPASS
CLS12    BAS   R14,NXCELL          GO TO NEXT CELL
         BNZ   GETNEXT             BRANCH IF END
         CLI   DIDTYPE,C'I'        INDEX NAME CELL?
         BE    CLS15               BRANCH IF YES
         TM    SWCLS+1,ON
         BO    CLS12
         CLI   AIXTYPE,C'G'        ALT. INDEX NAME CELL?
         BE    CLS18               BRANCH IF YES
         B     CLS12
CLS13    LA    R1,X'04'            ASK FOR VOLUME CELL
         BAS   R14,NXCELLS         GO TO SEARCH CELL
         BNZ   ERR4                NOT FOUND
CLS14    MVC   0(L'VOLSERN,R7),VOLSERN  PROCESS VOLUME CELL
         MVC   6(L'VOLFLSEQ,R7),VOLFLSEQ
         LTR   R6,R6
         BZ    *+L'*+6
         MVC   0(L'VOLDEVTP,R6),VOLDEVTP
         BAS   R14,XPASS
         BAS   R14,NXCELL          GO TO NEXT CELL
         BNZ   GETNEXT             BRANCH IF END
         CLI   VOLTYPE,X'04'       VOLUME CELL?
         BNE   *+L'*+8             BRANCH IF NOT
         MVI   0(R8),255           YES, SAY CONTINUATION
         B     CLS14
         CLI   DIDTYPE,C'I'        INDEX NAME CELL?
         BNE   SWCLS               BRANCH IF NOT
CLS15    L     R0,NIXCL            UPDATE INDEX ENTRIES COUNT
         AH    R0,=H'1'
         ST    R0,NIXCL
         MVI   0(R8),6             SAY INDEX OF CLUSTER
         XR    R1,R1
         IC    R1,DIDKEYLN         LENGTH OF NAME
         BCTR  R1,0
         BCTR  R1,0
         EX    R1,CLSMK            SET INDEX NAME
         LTR   R7,R7
         BNZ   CLS16
         BAS   R14,XPASS
         TM    SWCLS+1,ON
         BO    GETNEXT
         BAS   R14,NXCELL          GO TO NEXT CELL
         BNZ   GETNEXT             BRANCH IF END
         CLI   AIXTYPE,C'G'        ALT. INDEX NAME CELL?
         BNE   *-12                BRANCH IF NOT
         B     CLS18
CLS16    LA    R1,X'04'            ASK FOR VOLUME CELL
         BAS   R14,NXCELLS         GO TO SEARCH CELL
         BNZ   ERR4                NOT FOUND
CLS17    MVC   0(L'VOLSERN,R7),VOLSERN  PROCESS VOLUME CELL
         MVC   6(L'VOLFLSEQ,R7),VOLFLSEQ
         LTR   R6,R6
         BZ    *+L'*+6
         MVC   0(L'VOLDEVTP,R6),VOLDEVTP
         BAS   R14,XPASS
         BAS   R14,NXCELL          GO TO NEXT CELL
         BNZ   GETNEXT             BRANCH IF END
         CLI   VOLTYPE,X'04'       VOLUME CELL?
         BNE   SWCLS               BRANCH IF NOT
         MVI   0(R8),255           YES, SAY CONTINUATION
         B     CLS17
SWCLS    NOP   ERR4
         CLI   AIXTYPE,C'G'        ALT. INDEX NAME CELL?
         BNE   ERR4                BRANCH IF NOT
CLS18    L     R0,NAIXE            UPDATE ALT. INDEX ENTRIES COUNT
         AH    R0,=H'1'
         ST    R0,NAIXE
         MVI   0(R8),4             SAY ALTERNATE INDEX
         BCT   R3,*+L'*+4
         OI    SWCLS+1,ON
         XR    R1,R1
         IC    R1,AIXKYLEN         LENGTH OF AIX NAME
         EX    R1,CLSAX            SET AIX NAME
         B     CLS10
CLSMN    MVC   1(*-*,R8),CLNAME
CLSMK    MVC   1(*-*,R8),DIDKEY
CLSAX    MVC   1(*-*,R8),AIXKEY
         SPACE 2
*        PATH RECORD
         SPACE 1
PATH     L     R0,NPATH            UPDATE PATH ENTRIES COUNT
         AH    R0,=H'1'
         ST    R0,NPATH
         MVI   0(R8),7             SAY PATH
         XR    R1,R1
         IC    R1,PATHKYLN         LENGTH OF PATH NAME
         EX    R1,PTHMV            SET PATH NAME
         LA    R1,X'03'            ASK FOR ASSOCIATION CELL
         BAS   R14,NXCELLS         GO TO SEARCH CELL
         BNZ   XRET                NOT FOUND
         XR    R3,R3
         ICM   R3,B'0011',ASCOUNT  COUNT OF ASSOCIATIONS
         BZ    XRET                NONE
         LA    R2,L'ASSOCC(R2)     POSITION TO REPEAT FIELDS
         B     PTH1+L'PTH1
PTH1     LA    R2,ASCKEY(R5)       POINT TO NEXT FIELD
         BAS   R14,XPASS
         MVI   0(R8),255           SAY CONTINUATION
         XR    R1,R1
         IC    R1,ASCKYLEN         LENGTH OF ASS. NAME
         LR    R5,R1
         BCTR  R1,0
         BCTR  R1,0
         EX    R1,PTHMK            SET ASS. NAME
         BCT   R3,PTH1             LOOP TILL ALL ASS. DONE
         B     XRET
PTHMV    MVC   1(*-*,R8),PATHNAME
PTHMK    MVC   1(*-*,R8),ASCKEY
         SPACE 2
*        ALIAS RECORD
         SPACE 1
ALIAS    L     R0,NALSE            UPDATE ALIAS ENTRIES COUNT
         AH    R0,=H'1'
         ST    R0,NALSE
         MVI   0(R8),8             SAY ALIAS
         XR    R1,R1
         IC    R1,ALIKYLEN         LENGTH OF ALIAS NAME
         BCTR  R1,0
         BCTR  R1,0
         EX    R1,ALSMV            SET ALIAS NAME
         LA    R1,X'03'            ASK FOR ASSOCIATION CELL
         BAS   R14,NXCELLS         GO TO SEARCH CELL
         BNZ   XRET                NOT FOUND
         XR    R3,R3
         ICM   R3,B'0011',ASCOUNT  COUNT OF ASSOCIATIONS
         BZ    XRET                NONE
         LA    R2,L'ASSOCC(R2)     POSITION TO REPEAT FIELDS
         B     ALS1+L'ALS1
ALS1     LA    R2,ASCKEY(R5)       POINT TO NEXT FIELD
         BAS   R14,XPASS
         MVI   0(R8),255           SAY CONTINUATION
         XR    R1,R1
         IC    R1,ASCKYLEN         LENGTH OF ASS. NAME
         LR    R5,R1
         BCTR  R1,0
         BCTR  R1,0
         EX    R1,ALSMK            SET ASS. NAME
         BCT   R3,ALS1             LOOP TILL ALL ASS. DONE
         B     XRET
ALSMV    MVC   1(*-*,R8),ALINAME
ALSMK    MVC   1(*-*,R8),ASCKEY
         SPACE 2
*        TRUE-NAME RECORD
         SPACE 1
TRUE     L     R0,NTRUE            UPDATE TRUE-NAME ENTRIES COUNT
         AH    R0,=H'1'
         ST    R0,NTRUE
         CLI   TRUNTYPE,C'G'
         BNE   *+L'*+8
         MVI   0(R8),9             SAY AIX TRUE-NAME
         B     TRN1
         CLI   TRUNTYPE,C'D'
         BNE   *+L'*+8
         MVI   0(R8),10            SAY DATA TRUE-NAME
         B     TRN1
         CLI   TRUNTYPE,C'I'
         BNE   ERR4
         MVI   0(R8),11            SAY INDEX TRUE-NAME
TRN1     XR    R1,R1
         IC    R1,TRUEKEYL         LENGTH OF TRUE-NAME
         BCTR  R1,0
         BCTR  R1,0
         EX    R1,TRUMV            SET TRUE-NAME
         LA    R1,X'03'            ASK FOR ASSOCIATION CELL
         BAS   R14,NXCELLS         GO TO SEARCH CELL
         BNZ   XRET                NOT FOUND
         XR    R3,R3
         ICM   R3,B'0011',ASCOUNT  COUNT OF ASSOCIATIONS
         BZ    XRET                NONE
         LA    R2,L'ASSOCC(R2)     POSITION TO REPEAT FIELDS
         B     TRN2+L'TRN2
TRN2     LA    R2,ASCKEY(R5)       POINT TO NEXT FIELD
         BAS   R14,XPASS
         MVI   0(R8),255           SAY CONTINUATION
         XR    R1,R1
         IC    R1,ASCKYLEN         LENGTH OF ASS. NAME
         LR    R5,R1
         BCTR  R1,0
         BCTR  R1,0
         EX    R1,TRUMK            SET ASS. NAME
         BCT   R3,TRN2             LOOP TILL ALL ASS. DONE
         B     XRET
TRUMV    MVC   1(*-*,R8),TRUENAME
TRUMK    MVC   1(*-*,R8),ASCKEY
         SPACE 2
*        ICF CONNECTOR RECORD
         SPACE 1
CONNECT  L     R0,NICFC            UPDATE ICF CONNETOR ENTRIES COUNT
         AH    R0,=H'1'
         ST    R0,NICFC
         TM    COFLAG,COCATYPE     WHICH KIND OF CONNECTOR?
         BO    *+L'*+8
         MVI   0(R8),13            SAY VSAM CONNECTOR
         B     *+L'*+4
         MVI   0(R8),12            SAY ICF CONNECTOR
         XR    R1,R1
         IC    R1,COKEYLN          LENGTH OF CATALOG NAME
         BCTR  R1,0
         BCTR  R1,0
         EX    R1,CONMV            SET CATALOG NAME
         LTR   R7,R7
         BZ    XRET
         LA    R1,X'04'            ASK FOR VOLUME CELL
         BAS   R14,NXCELLS         GO TO SEARCH CELL
         BNZ   ERR4                NOT FOUND
ICN1     MVC   0(L'VOLSERN,R7),VOLSERN  PROCESS VOLUME CELL
         MVC   6(L'VOLFLSEQ,R7),VOLFLSEQ
         LTR   R6,R6
         BZ    *+L'*+6
         MVC   0(L'VOLDEVTP,R6),VOLDEVTP
         BAS   R14,XPASS
         BAS   R14,NXCELL          GO TO NEXT CELL
         BNZ   GETNEXT             BRANCH IF END
         CLI   VOLTYPE,X'04'       VOLUME CELL?
         BNE   ERR4                BRANCH IF NOT
         MVI   0(R8),255           YES, SAY CONTINUATION
         B     ICN1
CONMV    MVC   1(*-*,R8),CONAME
         DROP  R2
         SPACE 1
ENDSR    LA    R1,DCBSR
         USING IHADCB,R1
         NI    DCBOFLGS,255-DCBOFOPN    SET CLOSED
         DROP  R1
         BAS   R14,XCLOSE
         L     R2,4(R13)
         XC    20(4,R2),20(R2)     SET R0 = 0
         ST    R15,24(R2)          SET CLOSE RC IN R1
         LTR   R15,R15             CLOSE OK?
         BZ    *+L'*+10            YES
         BAS   R14,XSHOW           GET VSAM ACB ERROR CODE
         MVC   20(4,R2),WORK       SET ERROR CODE IN R0
         XR    R10,R10
         ST    R10,ENDREC
         BCT   R10,EXIT
         SPACE 2
ERR1     BCTR  R10,0
ERR2     BCTR  R10,0
ERR3     BCTR  R10,0
ERR4     BCTR  R10,0
MAXERR   EQU   ((*-ERR1)/2)+1
         XR    R0,R0
         ST    R0,ENDREC
         B     EXIT
         EJECT
CTOPEN   XR    R9,R9
         XR    R8,R8
         LA    R10,MAXERO
         MVI   SWPRI,0
         TM    0(R1),X'80'         CONTROL ARGUMENTS
         BO    OP3
         TM    4(R1),X'80'
         BO    OP2
         TM    8(R1),X'80'
         BO    OP1
         TM    12(R1),X'80'
         BZ    ERO3
         L     R2,12(R1)
         MVC   SWPRI(L'SWPRI),0(R2)
         TM    SWPRI,ICFMSPW
         BZ    OP1
         STCM  R2,B'1111',AMSPW
         XC    1(L'SECMSTR,R2),1(R2)
OP1      TM    11(R1),X'03'
         BNZ   ERO3
         L     R9,8(R1)
         LA    R9,0(R9)
OP2      TM    7(R1),X'03'
         BNZ   ERO3
         L     R8,4(R1)
         LA    R8,0(R8)
OP3      L     R7,0(R1)
         LA    R7,0(R7)
         SPACE 1
         OC    ATIOT(L'ATIOT),ATIOT FISRT TIME?
         BNZ   GOT                 BRANCH IF NOT
         L     R2,CVTPTR           GET CVT ADDRESS
         USING CVT,R2
         TM    CVTDCB,CVT4MS1      TEST IF OS/VS2?
         BZ    ERO4                BRANCH IF NOT
         DROP  R2
        EXTRACT    ATIOT,'S',FIELDS=(TIOT)
         SPACE 1
GOT      LA    R5,DCBSR            SEARCH DD-CARD
         USING IHADCB,R5
         TM    DCBOFLGS,DCBOFOPN   TEST OPENED?
         BO    ERO1                BRANCH IF YES
         MVC   DCBDDNAM(L'DCBDDNAM),0(R7)
         XR    R1,R1
         L     R2,ATIOT            GET TIOT ADDRESS
         USING TIODSECT,R2
SRCH     CLC   TIOELNGH(L'ZEROS),ZEROS END OF TIOT?
         BE    ERO5                YES
         CLC   TIOEDDNM(L'DCBDDNAM),DCBDDNAM DD-NAME FOR US?
         BE    DDFND               YES
         IC    R1,TIOELNGH
         AR    R2,R1               NEXT DD ENTRY
         B     SRCH
         DROP  R2
DDFND   DEVTYPE  DCBDDNAM,DVTYP,DEVTAB
         CLI   DVTYP+2,X'20'       TEST IF DIRECT-ACCESS STORAGE
         BNE   ERO6                BRANCH IF NOT
         LTR   R8,R8
         BZ    RDJ
         MVC   0(5*4,R8),DVTYP
         L     R4,CVTPTR           GET CVT POINTER
         USING CVT,R4
         L     R15,CVTZDTAB        ADDRESS OF IECZDTAB
         DROP  R4
         LA    R15,0(0,R15)        IECZDTAB IS THE RESIDENT DIRECT
         XR    R4,R4                    ACCESSS DEVICE CONSTANT TABLE
         LR    R14,R4                   (SEE ASSEMBLY OF IECZDTAB)
         IC    R14,DVTYP+3         GET DIRECT-ACCESS TYPE
         IC    R4,0(R14,R15)       PICK UP TABLE DISPLACEMENT
         ALR   R4,R15              DEVICE CONSTANT TABLE ADDRESS
         MVC   20(2,R8),12(R4)     MOVE NR. OF ALT. TRACKS
RDJ     RDJFCB  (DCBSR)
         LTR   R15,R15             TEST COMPLETION CODE
         BNZ   ERO7                JFCB ERROR
         LA    R4,JF
         USING JFCDSECT,R4
         CLI   JFCBIND2,JFCOLD+JFCSHARE TEST DISP=SHR CODED?
         BNE   ERO8                BRANCH IF NOT
         CLC   JFCDSORG,=AL2(JFCORGAM)  TEST VSAM?
         BNE   ERO8                BRANCH IF NOT
         CLC   JFCBELNM,=CL8' '    CONTROL DD-CARD CODE
         BNZ   ERO8
JL0      EQU   JFCBLTYP-JFCBDSCB
         OC    JFCBDSCB(JL0),JFCBDSCB
         BNZ   ERO8
JL1      EQU   JFCBCRDT-JFCBOTTR
         OC    JFCBOTTR(JL1),JFCBOTTR
         BNZ   ERO8
JL2      EQU   JFCBIND2-JFCBXPDT
         OC    JFCBXPDT(JL2),JFCBXPDT
         BNZ   ERO8
JL3      EQU   JFCDSORG-JFCBUFNO
         OC    JFCBUFNO(JL3),JFCBUFNO
         BNZ   ERO8
JL4      EQU   JFCBNVOL-JFCRECFM
         OC    JFCRECFM(JL4),JFCRECFM
         BNZ   ERO8
JL5      EQU   JFCBVLCT-JFCBPQTY
         OC    JFCBPQTY(JL5),JFCBPQTY
         BNZ   ERO8
         CLI   JFCBVLCT,X'01'
         BNE   ERO8
         CLI   JFCBLTYP,JFCSL
         BNE   ERO8
         CLI   JFCBNVOL,X'01'
         BNE   ERO8
         CLI   JFCBSPTN,X'00'
         BNE   ERO8
         LTR   R8,R8
         BZ    *+L'*+12
         MVC   22(6,R8),JFCBVOLS   CATALOG VOLUME
         MVC   28(L'JFCBDSNM,R8),JFCBDSNM    CATALOG NAME
         MVC   WORKC(6),JFCBVOLS
         MVC   DSNAME,JFCBDSNM
         DROP  R4
        OBTAIN GETDSCB
         LTR   R15,R15
         BNZ   ERO10               NO DSCB FMT-1 BACK, NOT ICF
         USING DS1FMTID,R4
         CLC   DS1DSSN(L'DS1DSSN),WORKC
         BNE   ERO10
         CLC   DS1DSORG,=AL1(0,DS1ACBM)
         BNE   ERO10
         CLI   DS1OPTCD,DS1OPTIC+DS1OPTBC
         BNE   ERO10
         CLI   DS1DSIND,DS1IND10
         BNE   ERO10               NO PASSWORD REQUIRED
         DROP  R4
         SPACE 1
         MVC   ACBSR+(ACBDDNM-IFGACB)(L'ACBDDNM),DCBDDNAM
         TM    SWPRI,ICFAUTH       ALREADY AUTHORIZED?
         BO    TT01                YES
        SETAUTH ,                  NO, SET AUTHORIZATION ON
TT01     TM    SWPRI,ICFKEY0       ALREADY SUP MODE, KEY 0?
         BO    TT02                YES
        MODESET KEY=ZERO,MODE=SUP  NO, ENTER SUPERVISOR MODE
         USING PSA,R0
TT02     L     R2,PSATOLD          PSA -> TCB
         DROP  R0
         LA    R2,0(,R2)
         USING TCB,R2
         L     R3,TCBJSCB          TCB -> JSCB
         DROP  R2
         USING IEZJSCB,R3
         L     R3,JSCBACT          ACTIVE JSCB
         OI    JSCBSWT1,JSCBPASS   SAY NO PASSWORDS, JUST IN CASE
         TM    SWPRI,ICFKEY0       ALREADY SUP MODE, KEY 0?
         BO    TT03                YES
        MODESET KEY=NZERO,MODE=PROB     NO, RE-ENTER PROBLEM MODE
TT03    OPEN   ACBSR               OPEN THE CATALOG
         LR    R2,R15              SAVE OPEN RC
         TM    SWPRI,ICFKEY0       ALREADY SUP MODE, KEY 0?
         BO    TT04                YES
        MODESET KEY=ZERO,MODE=SUP  NO, ENTER SUPERVISOR MODE
TT04     NI    JSCBSWT1,255-JSCBPASS    PASSWORDS OFF
         DROP  R3
         TM    SWPRI,ICFKEY0       ALREADY SUP MODE, KEY 0?
         BO    TT05                YES
        MODESET KEY=NZERO,MODE=PROB     NO, RE-ENTER PROBLEM MODE
TT05     TM    SWPRI,ICFAUTH       ALREADY AUTHORIZED?
         BO    TT06                YES
        RESAUTH ,                  NO, SET AUTHORIZATION OFF
TT06     LTR   R15,R2              TEST OPEN RC
         BZ    ACBOK
         L     R2,4(R13)
         ST    R15,24(R2)          SET OPEN RC IN R1
         BAS   R14,XSHOW           GET VSAM ACB ERROR CODE
         MVC   20(4,R2),WORK       SET ERROR CODE IN R0
         B     ERO2
ACBOK    LA    R2,ACBSR            GET ADDRESS TO ACB
         USING IFGACB,R2
         TM    ACBINFL2,ACBCATX    CATX OPEN?
         BO    ICFOK               YES
         DROP  R2
         BAS   R14,XCLOSE          NO, CLOSE IMMEDIATELY
         L     R2,4(R13)
         ST    R15,24(R2)          SET CLOSE RC IN R1
         XC    WORK,WORK
         LTR   R15,R15             CLOSE OK?
         BZ    *+L'*+4             YES
         BAS   R14,XSHOW           GET VSAM ACB ERROR CODE
         MVC   20(4,R2),WORK       SET ERROR CODE IN R0
         B     ERO9
ICFOK    OI    DCBOFLGS,DCBOFOPN   SET OPEN SUCCESSFULLY
         DROP  R5
         L     R0,BUFLEN           GET BUFFER SPACE
        GETMAIN R,LV=(0)           INPUT BUFFER FOR BCS RECORDS
         ST    R1,BUFPTR           SET ADDRESS OF RECORD BUFFER
        GENCB  BLK=RPL,ACB=ACBSR,AM=VSAM,AREA=(*,BUFPTR),              1
               AREALEN=(*,BUFLEN),OPTCD=(KEY,SEQ,MVE)
         ST    R1,RPLSR            ADDRESS OF GENERATED RPL
         XR    R10,R10
         ST    R10,ENDREC
         B     EXIT
         SPACE 1
ERO1     BCTR  R10,0
ERO2     BCTR  R10,0
ERO3     BCTR  R10,0
ERO4     BCTR  R10,0
ERO5     BCTR  R10,0
ERO6     BCTR  R10,0
ERO7     BCTR  R10,0
ERO8     BCTR  R10,0
ERO9     BCTR  R10,0
ERO10    BCTR  R10,0
MAXERO   EQU   ((*-ERO1)/2)+1
         MVI   SWPRI,0             RESET PROCESSING INDICATORS
         B     EXIT
         EJECT
CTCLOSE  XR    R9,R9
         XR    R8,R8
         LTR   R1,R1
         BZ    CL2
         LA    R10,MAXERC
         TM    0(R1),X'80'         CONTROL ARGUMENTS
         BO    CL1
         TM    4(R1),X'80'
         BZ    ERC1
         TM    7(R1),X'03'
         BNZ   ERC1
         L     R9,4(R1)
         LA    R9,0(R9)
CL1      TM    3(R1),X'03'
         BNZ   ERC1
         L     R8,0(R1)
         LA    R8,0(R8)
         SPACE 1
CL2      LA    R2,DCBSR
         USING IHADCB,R2
         TM    DCBOFLGS,DCBOFOPN   TEST IF OPENED?
         BZ    CL3                 BRANCH IF NOT
         NI    DCBOFLGS,255-DCBOFOPN    SET CLOSED
         DROP  R2
         BAS   R14,XCLOSE
         L     R2,4(R13)
         XC    20(4,R2),20(R2)     SET R0 = 0
         ST    R15,24(R2)          SET CLOSE RC IN R1
         LTR   R15,R15             CLOSE OK?
         BZ    CL3                 YES
         BAS   R14,XSHOW           GET VSAM ACB ERROR CODE
         MVC   20(4,R2),WORK       SET ERROR CODE IN R0
         B     ERC2
CL3      LTR   R8,R8
         BZ    CL4
         MVC   0(LDATA,R8),NGETS
CL4      XC    NGETS(LDATA),NGETS
         XR    R10,R10
         ST    R10,ENDREC
         B     EXIT
         SPACE 1
ERC1     BCTR  R10,0
ERC2     BCTR  R10,0
MAXERC   EQU   ((*-ERC1)/2)+1
         EJECT
EXIT     LTR   R9,R9
         BZ    *+L'*+4
         ST    R10,0(R9)
        $XRET  CC=(R10)
         SPACE 2
*        FIND NEXT CELL ROUTINE
*
*              R0  = WORK REGISTER
*              R1  = CELL TYPE SEARCH REQUEST OR ZERO FOR NEXT ONLY
*              R2  = BUFFER POINTER (CURRENT CELL)
*              R14 = LINK REGISTER
*
*        AT EXIT, CC = ZERO - CELL TYPE FOUND
*                      NON-ZERO - CELL TYPE NOT FOUND OR END OF
*                                 RECORD REACHED
         SPACE 1
         USING ICFDSECT,R2
NXCELL   XR    R1,R1
NXCELLS  XR    R0,R0
         ICM   R0,B'0011',ICFRLN   GET CELL LENGTH
         AR    R2,R0               POINT TO NEXT CELL
         CL    R2,ENDREC           END OF RECORD?
         BL    *+L'*+4             BRANCH IF NOT
         LTR   R2,R2               YES, SET CC
         BR    R14
         LTR   R1,R1               CELL TYPE REQUESTED?
         BZR   R14                 NO
         EX    R1,NXCELLT          IS IT THIS ONE?
         BNE   NXCELL+L'NXCELL     NO, CONTINUE SEARCH
         BR    R14                 YES (CC EQUAL = CC ZERO)
NXCELLT  CLI   ICFRTY,*-*
         DROP  R2
         EJECT
*        CLOSE CATALOG ACB AND FREE BUFFER SPACE ROUTINE.
*
*              R0  = WORK REGISTER
*              R1  = WORK REGISTER
*              R14 = LINK REGISTER
*              R15 = CLOSE RETURN CODE
         SPACE 1
XCLOSE   ST    R14,SVLINK          SAVE LINK REGISTER
         ICM   R1,B'1111',BUFPTR   ADDRESS OF RECORD BUFFER
         BZ    XCLACB              BRANCH IF NONE
         L     R0,BUFLEN           LENGTH TO GETMAIN
        FREEMAIN R,LV=(0),A=(1)    RELEASE SPACE
         XC    BUFPTR,BUFPTR       INDICATE IT
XCLACB  CLOSE  ACBSR
         L     R14,SVLINK          RESTORE LINK REGISTER
         BR    R14                 BACK TO CALLER
         SPACE 2
*        GET VSAM ACB ERROR CODE ROUTINE.
*
*              R14 = LINK REGISTER
*
*        NOTE. AT EXIT, THE FIELD NAMED 'WORK' CONTAIN THE ERROR CODE.
         SPACE 1
XSHOW    ST    R14,SVLINK          SAVE LINK REGISTER
        SHOWCB ACB=ACBSR,AREA=WORK,LENGTH=4,FIELDS=(ERROR)
         L     R14,SVLINK          RESTORE LINK REGISTER
         BR    R14                 BACK TO CALLER
         EJECT
*        CONSTANTS AND WORK AREAS.
         SPACE 1
WORKD    DC    D'0'
WORKC    DC    CL8' '
WORK     DC    F'0'
ATIOT    DC    A(*-*)
RPLSR    DC    A(*-*)              MOVE MODE RPL FOR BCS ACCESS
BUFLEN   DC    A(BSL*1024)         BUFFER SPACE LENGTH
BUFPTR   DC    F'0'                ADDRESS OF RECORD WITHIN BUFFER
DVTYP    DC    5F'0'
CURREC   DC    F'0'                CURRENT POINTER IN RECORD
ENDREC   DC    F'0'                END OF RECORD POINTER
SVBACK   DC    F'0'
SVREGS   DC    3F'0'
SVLINK   DC    F'0'
ZEROS    DC    F'0'
         SPACE 1
NGETS    DC    F'0'                GETS ISSUED AGAINST THE BCS
NNVSM    DC    F'0'                NONVSAM ENTRIES
NCLTR    DC    F'0'                CLUSTER ENTRIES
NAIXE    DC    F'0'                ALTERNATE INDEX ENTRIES
NDTCL    DC    F'0'                DATA (CLUSTER) ENTRIES
NIXCL    DC    F'0'                INDEX (CLUSTER) ENTRIES
NGDGB    DC    F'0'                GDG BASE ENTRIES
NGDGE    DC    F'0'                GDG ENTRIES
NPATH    DC    F'0'                PATH ENTRIES
NALSE    DC    F'0'                ALIAS ENTRIES
NTRUE    DC    F'0'                TRUENAME ENTRIES
NICFC    DC    F'0'                ICF CONNECTOR ENTRIES
LDATA    EQU   *-NGETS
         SPACE 1
DSNAME   DC    CL44' '
         SPACE 1
JOBFILE  DC    0F'0',XL1'87',AL3(JF)
JF       DC    0F'0',XL176'00'
         SPACE 1
GETDSCB CAMLST SEARCH,DSNAME,WORKC,JF
         EJECT
TBTYPES  DS    0XL5                RECORD TYPES TABLE
         DC    CL1'A',AL4(NONVSAM)
         DC    CL1'B',AL4(GDGDS)
         DC    CL1'C',AL4(CLUSTER)
         DC    CL1'R',AL4(PATH)
         DC    CL1'T',AL4(TRUE)
         DC    CL1'U',AL4(CONNECT)
         DC    CL1'X',AL4(ALIAS)
         DC    XL1'0'              END OF TABLE MARKER
         SPACE 2
SWPRI   $ICFSW ,
AMSPW    DC    AL4(*-*)
         SPACE 2
        LTORG
         SPACE 2
        PRINT  NOGEN
         SPACE 1
DCBSR   DCB    DEVD=DA,DSORG=PS,MACRF=R,EXLST=JOBFILE,DDNAME=XXXXXXXX
ACBSR   ACB    AM=VSAM,BUFNI=16,BUFND=16,EXLST=ERRSR,DDNAME=XXXXXXXX
ERRSR   EXLST  AM=VSAM,EODAD=ENDSR
         SPACE 2
         END
