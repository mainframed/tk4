1   23/09/85
                                                      RGROUP    1/1.

  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * *  CHANGE CURRENT RACF CONNECT GROUP  * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

  Purpose :    To change the RACF GROUP to which a RACF TSO-user or
  ---------    JOB is currently connected. For shops that run RACF,
               allows the user to switch to a different CONNECT GROUP
               without having to LOGOFF and LOGON back specifying the
               different group on the LOGON command. Basically, it
               performs a RACINIT "CHANGE" function. This program may
               be run under TSO or as a background JOB.

  Input :      (1) A GROUP name, which will become the new current
  -------          GROUP name if the user is RACF authorized to it.
            or (2) no parameter, in which case the name of the current
                   GROUP will be listed.

  How to use :
  ------------

  1. Foreground CP :  RGROUP  ...new GROUP name...
  2. Background :  //...  EXEC   PGM=RGROUP,PARM=...new GROUP name...
  3. Called routine :
     A. The messages are sent to the SYSTEM LOG :
                       ...
                       CALL  RGROUP,(PARM),VL
                       ...
         with : PARM   DC    H'0'
           or : PARM   DC    0H'0',AL2(L'GROUP)
                GROUP  DC    C'...new GROUP name...'
     B. The messages are just returned to supplied caller's buffers :
                       ...
                       CALL  RGROUP,(PARM,MSGS),VL
                       ...
         with : MSGS   DC    AL1(L'BF1),AL3(BF1),AL1(L'BF2),AL3(BF2)
                BF1    DC    CL120' '  First level message
                BF2    DC    CL120' '  Second level message
         The messages are returned in the form 'LL00...text...' where
         LL00 is fout bytes long, and into which LL is the length
         of text +4. If the caller's buffer is too small, then as much
         of 'LL00...text...' is moved as possible. The caller must
         compare the message size with the buffer size to know if the
         message has been truncated. LL is set to zero if no message
         is moved back.

  Attributes : module is reentrant.
  ------------
