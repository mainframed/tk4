         MACRO
.*--------------------------------------------------------------------
.* Name       : MXIRULE
.*
.* Function   : Constructs the MXI exception rules table
.*
.*
.* Syntax     : MXIRULE START,SUFFIX=sufiix
.*
.*            : MXIRULE END,SUFFIX=suffix
.*
.*            : MXIRULE SET,
.*                    TYPE=rule_type,
.*                    ITEM=item_name,
.*                    operater, (EQ/LT/GT)
.*                    VALUE=comparison_value,
.*                    STC=(YES/NO),
.*                    JOB=(YES/NO),
.*                    TSU=(YES/NO),
.*                    SEV=(INFO/WARN/ERROR)
.*
.* Keywords   : START
.*                 Denotes the beginning of the exception rules table.
.*                 This must be the first entry.
.*
.*            : END
.*                 Denotes the end of the exception rules table.
.*                 This must be the last entry and the SUFFIX keyword
.*                 must match the one specified on the START invocation
.*                 of the macro.
.*
.*            : SET
.*                 Creates an exception rule in the current table. The
.*                 specification of TYPE and IETM determine which type
.*                 of exception is set.
.*
.*            : SUFFIX=suffix
.*                 Specifies the two character suffix to be appended
.*                 to 'MXIXPT' to make up the name of the exception
.*                 rules table. This is only valid for MXIRULE START
.*                 and MXIRULE END invocations of the macro.
.*
.*            : TYPE=rule_type
.*                 Specifies the type of exception that is to be set.
.*                 Valid values are :
.*                 (o) DASD   - Define which DASD volumes should be
.*                              online or offline.
.*                 (o) TASK   - Define which address spaces should
.*                              be active or inactive.
.*                 (o) SYS    - Define a system level exception
.*                 (o) ASID   - Define a address space level exception
.*
.*            : ITEM=item_type
.*                 Identifies the specific item to be examined for
.*                 an exception.
.*                 (o) For TYPE=DASD, 'item_value' is the 1-6 character
.*                     volume serial number mask. A placeholder of '%'
.*                     and wildcard of '*' can be used.
.*                 (o) For TYPE=TASK, 'item_value' is the one to eight
.*                     character address space name mask. A placeholder
.*                     of '%' and wildcard of '*' can be used.
.*                 (o) For TYPE=SYS, 'item_value' can be one of the
.*                     following :
.*                     (a) CPU%     - System CPU percent busy
.*                     (b) UIC      - High UIC count
.*                     (c) ASVTFREE - Number of free ASVT slots
.*                     (d) CSA%     - Percentage of CSA used
.*                     (e) SQA%     - Percentage of SQA used
.*                     (f) ECSA%    - Percentage of E-CSA used
.*                     (g) ESQA%    - Percentage of E-SQA used
.*                     (h) CSACONV  - Amount (in K) of CSA converted
.*                                    to SQA.
.*                     (i) ECSACONV - Amount (in K) of E-CSA converted
.*                                    to E-SQA.
.*                     (j) CPUS     - Number of CPUs online
.*                 (o) For TYPE=ASID, 'item_value' can be one of the
.*                     following :
.*                     (a) REAL     - Amount (in frames) of real
.*                                    storage in use by any address
.*                                    space.
.*                     (b) EXPAND   - Amount (in frames) of expanded
.*                                    storage in use by any address
.*                                    space.
.*                     (c) NONVIO   - Amount (in slots) of non-VIO
.*                                    auxiliary storage in use by any
.*                                    address space.
.*                     (d) EXPAND   - Amount (in frames) of fixed
.*                                    storage in use by any address
.*                                    space.
.*                     (e) WORKSET  - Size (in K) of the working set
.*                                    for any address space.
.*                     (f) CSA      - Size (in K) of CSA storage used
.*                                    by any address space.
.*                     (g) SQA      - Size (in K) of SQA storage used
.*                                    by any address space.
.*                     (h) ECSA     - Size (in K) of E-CSA storage used
.*                                    by any address space.
.*                     (i) ESQA     - Size (in K) of E-SQA storage used
.*                                    by any address space.
.*                     (j) WAIT     - Time (in minutes) that an address
.*                                    space has been waiting.
.*                     (k) CPU%     - Address space CPU percentage
.*                                    busy
.*
.*            : operator
.*                 Specifies the logical comparison operation to be
.*                 made between the ITEM and the VALUE. This can be
.*                 one of the following :
.*                 (o) EQ     - Equal
.*                 (o) LT     - Less Than
.*                 (o) GT     - Greater Than
.*
.*            : VALUE=comparison_value
.*                 Specifies the value to be compared to the specified
.*                 ITEM.
.*                 (o) For TYPE=DASD, this will be either 'ONLINE' or
.*                     'OFFLINE'
.*                 (o) For TYPE=TASK, this will be either 'ACTIVE' or
.*                     'INACTIVE'
.*                 (o) For TYPE=SYS and TYPE=ASID, this will typically
.*                     be a number.
.*
.*            : STC=(YES/NO)
.*                 Specifies that for TYPE=ASID exceptions, started
.*                 tasks are to be examined (YES) or not (NO)
.*                 The default setting is STC=YES
.*
.*            : JOB=(YES/NO)
.*                 Specifies that for TYPE=ASID exceptions, batch
.*                 jobs are to be examined (YES) or not (NO)
.*                 The default setting is JOB=YES
.*
.*            : TSU=(YES/NO)
.*                 Specifies that for TYPE=ASID exceptions, TSO
.*                 users are to be examined (YES) or not (NO)
.*                 The default setting is TSU=YES
.*
.*            : SEV=severity
.*                 Specifies the severity of the exception if matched.
.*                 Valid values are :
.*                 (o) INFO   - Informational (default)
.*                 (o) WARN   - Warning
.*                 (o) ERROR  - Serious error
.*                 The default setting is SEV=INFO
.*
.*
.*
.*------------------------------------------------------------------*
.* Changes
.* 07/07/1999   Rob Scott     Code Written                     V2.1.C
.* 10/09/1999   Rob Scott     Added ability to include or      V2.1.C
.*                            exclude STC, JOB or TSU address
.*                            spaces for TYPE=ASID exceptions.
.* 10/09/1999   Rob Scott     Set default severity to INFO.    V2.1.C
.* 18/11/1999   Rob Scott     Added the CPUS exception         V2.1.D
.* 10/05/2000   Rob Scott     Added support for patterns in    V2.2.A
.*                            jobname and DASD volsers for
.*                            TYPE=TASK and TYPE=DASD
.*------------------------------------------------------------------*
.*--------------------------------------------------------------------
&LABEL    MXIRULE &INVOKE,                                             X
               &TYPE=,                                                 X
               &ITEM=,                                                 X
               &OPER,                                                  X
               &VALUE=,                                                X
               &SUFFIX=,                                               X
               &STC=YES,                                               X
               &JOB=YES,                                               X
               &TSU=YES,                                               X
               &SEV=INFO
.*--------------------------------------------------------------------
.* Ensure that we have all required parms
.*--------------------------------------------------------------------
           AIF ('&INVOKE' EQ 'START').RULESTRT
           AIF ('&INVOKE' EQ 'END').RULEEND
           AIF ('&INVOKE' EQ 'SET').RULESET
           AGO .MSG0001
.RULESTRT  ANOP
           AIF (K'&SUFFIX NE 2).MSG0002
           AIF ('&TYPE' NE '').MSG0003
           AIF ('&ITEM' NE '').MSG0003
           AIF ('&VALUE' NE '').MSG0003
MXIXPT&SUFFIX CSECT
           DC   CL8'MXIXPT&SUFFIX'
           DC   CL8'&SYSDATE'
           DC   CL8'&SYSTIME'
           DC   AL4(NUMXPT&SUFFIX)
           DC   F'0'
BEGXPT&SUFFIX DS 0D
           AGO  .END
.RULESET   ANOP
.*--------------------------------------------------------------------
.* Process the defined exceptions
.*--------------------------------------------------------------------
           AIF ('&TYPE' EQ 'DASD').RULEDASD
           AIF ('&TYPE' EQ 'TASK').RULETASK
           AIF ('&TYPE' EQ 'ASID').RULEASID
           AIF ('&TYPE' EQ 'SYS').RULESYS
           AGO  .MSG0005
.RULEDASD  ANOP
.*--------------------------------------------------------------------
.* DASD Rules
.* Keys : 01  = EXCEPTION IF DASD ONLINE
.*        02  = EXCEPTION IF DASD OFFLINE
.*--------------------------------------------------------------------
           AIF ('&VALUE' EQ 'ONLINE').DASDON
           AIF ('&VALUE' EQ 'OFFLINE').DASDOFF
           AGO  .MSG0007
.DASDON    ANOP
           DC   X'01'         Set Rule Key (DASD Online)
           DC   XL7'00'
           DC   CL8'&ITEM'    Set ITEM Value
           DC   D'0'
           AGO  .RULESEV
.DASDOFF   ANOP
           DC   X'02'         Set Rule Key (DASD Offline)
           DC   XL7'00'
           DC   CL8'&ITEM'    Set ITEM Value
           DC   D'0'
           AGO  .RULESEV
.RULETASK  ANOP
.*--------------------------------------------------------------------
.* TASK Rules
.* Keys : 03  = EXCEPTION IF TASK ACTIVE
.*        04  = EXCEPTION IF TASK INACTIVE
.*--------------------------------------------------------------------
           AIF ('&VALUE' EQ 'ACTIVE').TASKON
           AIF ('&VALUE' EQ 'INACTIVE').TASKOFF
           AGO  .MSG0009
.TASKON    ANOP
           DC   X'03'         Set Rule Key (TASK Active)
           DC   XL7'00'
           DC   CL8'&ITEM'    Set ITEM Value
           DC   D'0'
           AGO  .RULESEV
.TASKOFF   ANOP
           DC   X'04'         Set Rule Key (TASK Inactive)
           DC   XL7'00'
           DC   CL8'&ITEM'    Set ITEM Value
           DC   D'0'
           AGO  .RULESEV
.RULEASID  ANOP
.*--------------------------------------------------------------------
.* ASID Rules
.* Keys : 05  = NONVIO slots
.*        06  = REAL frames
.*        07  = EXPAND frames
.*        08  = FIXED frames
.*        09  = WORKSET size
.*        0A  = CSA usage (K)
.*        0B  = SQA usage (K)
.*        0C  = ECSA usage (K)
.*        0D  = ESQA usage (K)
.*        0E  = WAIT time (mins)
.*        18  = CPU%
.*--------------------------------------------------------------------
           AIF ('&VALUE' EQ '').MSG0011
           AIF ('&ITEM' EQ 'NONVIO').ASIDNVIO
           AIF ('&ITEM' EQ 'REAL').ASIDREAL
           AIF ('&ITEM' EQ 'EXPAND').ASIDEXPD
           AIF ('&ITEM' EQ 'FIXED').ASIDFIX
           AIF ('&ITEM' EQ 'WORKSET').ASIDWRKS
           AIF ('&ITEM' EQ 'CSA').ASIDCSA
           AIF ('&ITEM' EQ 'SQA').ASIDSQA
           AIF ('&ITEM' EQ 'ECSA').ASIDECSA
           AIF ('&ITEM' EQ 'ESQA').ASIDESQA
           AIF ('&ITEM' EQ 'WAIT').ASIDWAIT
           AIF ('&ITEM' EQ 'CPU%').ASIDCPU
           AGO  .MSG0010
.ASIDNVIO  ANOP
           DC   X'05'         Set Rule Key (NONVIO slots)
           AGO  .ASIDCOM
.ASIDREAL  ANOP
           DC   X'06'         Set Rule Key (REAL frames)
           AGO  .ASIDCOM
.ASIDEXPD  ANOP
           DC   X'07'         Set Rule Key (EXPAND frames)
           AGO  .ASIDCOM
.ASIDFIX   ANOP
           DC   X'08'         Set Rule Key (FIXED frames)
           AGO  .ASIDCOM
.ASIDWRKS  ANOP
           DC   X'09'         Set Rule Key (WORKSET size)
           AGO  .ASIDCOM
.ASIDCSA   ANOP
           DC   X'0A'         Set Rule Key (CSA Usage)
           AGO  .ASIDCOM
.ASIDSQA   ANOP
           DC   X'0B'         Set Rule Key (SQA Usage)
           AGO  .ASIDCOM
.ASIDECSA  ANOP
           DC   X'0C'         Set Rule Key (ECSA Usage)
           AGO  .ASIDCOM
.ASIDESQA  ANOP
           DC   X'0D'         Set Rule Key (ESQA Usage)
           AGO  .ASIDCOM
.ASIDWAIT  ANOP
           DC   X'0E'         Set Rule Key (WAIT Time)
           AGO  .ASIDCOM
.ASIDCPU   ANOP
           DC   X'18'         Set Rule Key (CPU%)
           AGO  .ASIDCOM
.ASIDCOM   ANOP
           DC   XL7'00'
           DC   CL8'&ITEM'    Set item value
           DC   F'0'          Filler
           DC   F'&VALUE'     Set amount
           AGO  .RULESEV
.RULESYS   ANOP
.*--------------------------------------------------------------------
.* System Wide Exceptions
.* Keys : 0F  = ASVTFREE
.*        10  = CSA% Used
.*        11  = SQA% Used
.*        12  = ECSA% Used
.*        13  = ESQA% Used
.*        14  = CSACONV in K
.*        15  = ECSACONV in K
.*        16  = CPU%
.*        17  = UIC
.*        19  = CPUS
.*--------------------------------------------------------------------
           AIF ('&VALUE' EQ '').MSG0013
           AIF ('&ITEM' EQ 'ASVTFREE').SYSASVT
           AIF ('&ITEM' EQ 'CSA%').SYSCSA
           AIF ('&ITEM' EQ 'SQA%').SYSSQA
           AIF ('&ITEM' EQ 'ECSA%').SYSECSA
           AIF ('&ITEM' EQ 'ESQA%').SYSESQA
           AIF ('&ITEM' EQ 'CSACONV').SYSCSAV
           AIF ('&ITEM' EQ 'ECSACONV').SYSECSAV
           AIF ('&ITEM' EQ 'CPU%').SYSCPU
           AIF ('&ITEM' EQ 'UIC').SYSUIC
           AIF ('&ITEM' EQ 'CPUS').SYSCPUS
           AGO  .MSG0012
.SYSASVT   ANOP
           DC   X'0F'         Set Rule Key (ASVTFREE)
           AGO  .ASIDCOM
.SYSCSA    ANOP
           DC   X'10'         Set Rule Key (CSA%)
           AGO  .ASIDCOM
.SYSSQA    ANOP
           DC   X'11'         Set Rule Key (SQA%)
           AGO  .ASIDCOM
.SYSECSA   ANOP
           DC   X'12'         Set Rule Key (ECSA%)
           AGO  .ASIDCOM
.SYSESQA   ANOP
           DC   X'13'         Set Rule Key (ESQA%)
           AGO  .ASIDCOM
.SYSCSAV   ANOP
           DC   X'14'         Set Rule Key (CSACONV)
           AGO  .ASIDCOM
.SYSECSAV  ANOP
           DC   X'15'         Set Rule Key (ECSACONV)
           AGO  .ASIDCOM
.SYSCPU    ANOP
           DC   X'16'         Set Rule Key (CPU%)
           AGO  .ASIDCOM
.SYSUIC    ANOP
           DC   X'17'         Set Rule Key (UIC)
           AGO  .ASIDCOM
.SYSCPUS   ANOP
           DC   X'19'         Set Rule Key (CPUS)
           AGO  .ASIDCOM
.RULESEV   ANOP
.*--------------------------------------------------------------------
.* Process the severity
.*--------------------------------------------------------------------
           AIF  ('&SEV' NE 'INFO').SEVWARN
           DC   XL3'00'
           DC   X'06'         Indicate Severity (INFO)
           AGO  .SETASIDT
.SEVWARN   ANOP
           AIF  ('&SEV' NE 'WARN').SEVERR
.SEVDFLT   ANOP
           DC   XL3'00'
           DC   X'04'         Indicate Severity (WARN)
           AGO  .SETASIDT
.SEVERR    ANOP
           AIF  ('&SEV' NE 'ERROR').SEVDFLT
           DC   XL3'00'
           DC   X'03'         Indicate Severity (ERROR)
.SETASIDT  ANOP
           AIF  ('&TYPE' NE 'ASID').NOTASID
           AIF  ('&STC' EQ 'YES').INCLSTC
           AIF  ('&STC' NE 'NO').MSG0014
           DC   X'00'         Exclude STCs
           AGO  .TESTJOB
.INCLSTC   ANOP
           DC   X'01'         Include STCs
.TESTJOB   ANOP
           AIF  ('&JOB' EQ 'YES').INCLJOB
           AIF  ('&JOB' NE 'NO').MSG0015
           DC   X'00'         Exclude JOBs
           AGO  .TESTTSU
.INCLJOB   ANOP
           DC   X'01'         Include JOBs
.TESTTSU   ANOP
           AIF  ('&TSU' EQ 'YES').INCLTSU
           AIF  ('&TSU' NE 'NO').MSG0016
           DC   X'00'         Exclude TSUs
           AGO  .SETOPER
.INCLTSU   ANOP
           DC   X'01'         Include TSUs
           AGO  .SETOPER
.NOTASID   DC   XL3'010101'
.SETOPER   ANOP
           AIF  ('&OPER' NE 'EQ').OPERLT
           DC   X'01'         Logical operator
           AGO  .END
.OPERLT    ANOP
           AIF  ('&OPER' NE 'LT').OPERGT
           DC   X'02'         Logical operator
           AGO  .END
.OPERGT    ANOP
           AIF  ('&OPER' NE 'GT').MSG0008
           DC   X'03'         Logical operator
           AGO  .END
.RULEEND   ANOP
           AIF (K'&SUFFIX NE 2).MSG0002
           AIF ('&TYPE' NE '').MSG0004
           AIF ('&ITEM' NE '').MSG0004
           AIF ('&VALUE' NE '').MSG0004
ENDXPT&SUFFIX DS 0H
NUMXPT&SUFFIX EQU (ENDXPT&SUFFIX-BEGXPT&SUFFIX)/32
           END
           AGO  .END
.MSG0001   MNOTE 12,'Invalid Invocation - Use START/SET/END'
           AGO .END
.MSG0002   MNOTE 12,'SUFFIX must be two characters long'
           AGO .END
.MSG0003   MNOTE 12,'The only valid keyword for START is SUFFIX'
           AGO .END
.MSG0004   MNOTE 12,'The only valid keyword for END is SUFFIX'
           AGO .END
.MSG0005   MNOTE 12,'Unknown SET TYPE'
           AGO .END
.MSG0007   MNOTE 12,'TYPE=DASD must use either VALUE=(OFFLINE/ONLINE)'
           AGO .END
.MSG0008   MNOTE 12,'Invalid operator between ITEM and VALUE'
           AGO .END
.MSG0009   MNOTE 12,'TYPE=TASK must use either VALUE=(ACTIVE/INACTIVE)'
           AGO .END
.MSG0010   MNOTE 12,'Invalid ITEM for TYPE=ASID'
           AGO .END
.MSG0011   MNOTE 12,'Invalid VALUE for TYPE=ASID'
           AGO .END
.MSG0012   MNOTE 12,'Invalid ITEM for TYPE=SYS'
           AGO .END
.MSG0013   MNOTE 12,'Invalid VALUE for TYPE=SYS'
           AGO .END
.MSG0014   MNOTE 12,'TYPE=ASID must use either STC=YES or STC=NO'
           AGO .END
.MSG0015   MNOTE 12,'TYPE=ASID must use either JOB=YES or JOB=NO'
           AGO .END
.MSG0016   MNOTE 12,'TYPE=ASID must use either TSU=YES or TSU=NO'
           AGO .END
.END     MEND
