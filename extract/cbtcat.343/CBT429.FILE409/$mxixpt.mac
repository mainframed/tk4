CREATING AND USING THE MXI EXCEPTION RULES TABLE
================================================

Associated members in this dataset :

o $MXIXPT   - This member
o $XPTASM   - Sample JCL to assemble and link the sample MXI exception
              rules table.
o MXIRULE   - MXI Macro that defines the exception rules
o MXIXPT00  - Sample MXI exception rules table. This is the source to
              the default MXIXPT00 shipped with MXI.


Creating The Exception Rules Table
==================================

The exceptions that can be defined to MXI take the format of a sequence
of assembler statements that use the MXIRULE macro. These statements
must be assembled and linked into a load library that is available to
MXI. The resultant load module is of the form : MXIXPTxx where 'xx' is
a user defined two-character suffix.

The statements are very easy to code and does not require any extensive
knowledge of the assembler language.


Defining the start of the exception rules
-----------------------------------------

The first non-comment statement in the exception rules member must be
in the following format :

   MXIRULE START,SUFFIX=xx

This statement is used to assign the suffix to the MXIXPTxx member and
provide an anchor reference for later statements.

For example, if you are defining the exception rules MXIXPT99, then this
statement should be :

   MXIRULE START,SUFFIX=99


Defining the exception rules
----------------------------

The syntax of the statement to define an exception rule is as follows :

   MXIRULE SET,
         TYPE=rule_type,
         ITEM=item_name,
         operater, (EQ/LT/GT)
         VALUE=comparison_value,
         STC=(YES/NO),
         JOB=(YES/NO),
         TSU=(YES/NO),
         SEV=(INFO/WARN/ERROR)

Keywords
--------

   TYPE=rule_type
      Specifies the type of exception that is to be set.
      Valid values are :

      (o) DASD   - Define DASD volumes taht should be ONLINE/OFFLINE
      (o) TASK   - Define address spaces that should be ACTIVE/INACTIVE
      (o) SYS    - Define a system level exception
      (o) ASID   - Define a address space level exception

   ITEM=item_type
      Identifies the specific item to be examined for an exception.

      (o) For TYPE=DASD, 'item_value' is the 1-6 character volser
          pattern mask.
          A placeholder of '%' and wildcard of '*' can be used.

      (o) For TYPE=TASK, 'item_value' is the one to eight character
          address space name pattern mask.
          A placeholder of '%' and wildcard of '*' can be used.

      (o) For TYPE=SYS, 'item_value' can be one of the following :
          (a) CPU%     - System CPU percent busy
          (b) UIC      - High UIC count
          (c) ASVTFREE - Number of free ASVT slots
          (d) CSA%     - Percentage of CSA used
          (e) SQA%     - Percentage of SQA used
          (f) ECSA%    - Percentage of E-CSA used
          (g) ESQA%    - Percentage of E-SQA used
          (h) CSACONV  - Amount (in K) of CSA converted to SQA
          (i) ECSACONV - Amount (in K) of E-CSA converted to E-SQA
          (j) CPUS     - Number of online CPUs

      (o) For TYPE=ASID, 'item_value' can be one of the following :
          (a) REAL     - Amount (in frames) of real storage in use
                         by any address space
          (b) EXPAND   - Amount (in frames) of expanded storage in use
                         by any address space
          (c) NONVIO   - Amount (in slots) of non-VIO auxilairy storage
                         in use by any address space
          (d) EXPAND   - Amount (in frames) of fixed storage in use
                         by any address space
          (e) WORKSET  - Size (in K) of the working set for any address
                         space.
          (f) CSA      - Size (in K) of CSA storage used by any address
                         space
          (g) SQA      - Size (in K) of SQA storage used by any address
                         space
          (h) ECSA     - Size (in K) of E-CSA storage used by any
                         address space.
          (i) ESQA     - Size (in K) of E-SQA storage used by any
                         address space.
          (j) WAIT     - Time (in minutes) that an address space has
                         been waiting.
          (k) CPU%     - Address space CPU percentage busy

   operator
      Specifies the logical comparison operation to be made between
      the ITEM and the VALUE. This can be one of the following :

      (o) EQ     - Equal
      (o) LT     - Less Than
      (o) GT     - Greater Than

   VALUE=comparison_value
      Specifies the value to be compared to the specified ITEM.

      (o) For TYPE=DASD, this will be either 'ONLINE' or 'OFFLINE'
      (o) For TYPE=TASK, this will be either 'ACTIVE' or 'INACTIVE'
      (o) For TYPE=SYS and TYPE=ASID, this will typically be a number.

   STC=(YES/NO)
      Specifies that for TYPE=ASID exceptions, started tasks are to
      be examined (YES) or not (NO). The default is STC=YES.

   JOB=(YES/NO)
      Specifies that for TYPE=ASID exceptions, batch jobs are to
      be examined (YES) or not (NO). The default is JOB=YES.

   TSU=(YES/NO)
      Specifies that for TYPE=ASID exceptions, TSO users are to
      be examined (YES) or not (NO). The default is TSU=YES.

   SEV=severity
      Specifies the severity of the exception if matched.
      Valid values are :
      (o) INFO   - Informational
      (o) WARN   - Warning
      (o) ERROR  - Serious error
      The default is SEV=INFO

Examples
--------

(1) Error exception if DASD volser DB05TR is not online :

    MXIRULE SET,TYPE=DASD,ITEM=DB05TR,EQ,VALUE=OFFLINE,SEV=ERROR

(2) Warning exception if address space JES2 is not active :

    MXIRULE SET,TYPE=TASK,ITEM=JES2,EQ,VALUE=INACTIVE,SEV=WARN

(3) Error exception if any address space uses more than 25% CPU :

    MXIRULE SET,TYPE=ASID,ITEM=CPU%,GT,VALUE=25,SEV=ERROR

(4) Warning exception if the free ASVT slots are below 100 :

    MXIRULE SET,TYPE=SYS,ITEM=ASVTFREE,LT,VALUE=100,SEV=WARN

(5) Warning exception if any batch JOB has been waiting for more than
    10 minutes and informational exception if any TSO user has been
    waiting for more than 20 minutes :

    MXIRULE SET,TYPE=ASID,ITEM=WAIT,GT,VALUE=10,STC=NO,TSU=NO,SEV=WARN
    MXIRULE SET,TYPE=ASID,ITEM=WAIT,GT,VALUE=20,STC=NO,JOB=NO

(6) Error exception if any DASD volumes starting OS3 are online :

    MXIRULE SET,TYPE=DASD,ITEM=OS3*,EQ,VALUE=ONLINE,SEV=ERROR

Considerations
--------------

(1) If you continue an MXIRULE statement over more than one line, you
    must place a continuation character in column 72 and start the next
    line in column 16.

(2) Each MXIRULE statement is processed solely on its own merits. For
    example, if you code the following :

       MXIRULE SET,TYPE=SYS,ITEM=CPU%,GT,VALUE=80,SEV=WARN
       MXIRULE SET,TYPE=SYS,ITEM=CPU%,GT,VALUE=95,SEV=ERROR

    and the system CPU% is at 98%, you will receive BOTH exceptions
    on the screen.


Defining the end of the exception rules
---------------------------------------

The last non-comment statement in the exception rules member must be
in the following format :

   MXIRULE END,SUFFIX=xx

This statement is used to denote the end of the MXIXPTxx member and
calculate the number of rules defined. The suffix value MUST match the
one used on the MXIRULE START statement.


Making The Exception Rules Table Available To MXI
=================================================

Before MXI can use the exception rules table, it must be assembled and
linked and then placed into a dataset that MXI can use a LOAD macro
to access.

Assembling and linking
----------------------
Use the sample JCL in member $XPTASM to assemble and link the exception
rules source. Note that you must include the dataset that contains the
MXIRULE macro in the SYSLIB for the assemble.

Using the MXIXPTxx member
-------------------------
Once linked, the MXIXPTxx member can be made available to MXI in one
of two ways :

(1) STEPLIB/JOBLIB/LINKLIST
    The MXIXPTxx member is loaded into private area storage by the
    execution of the LOAD macro. Note that placing MXIXPTxx into a
    LIBDEFed ISPLLIB will NOT work.

(2) MXIXPT DDName
    If the MXIXPT DDName is found allocated to the current address
    space, it is used INSTEAD of the normal STEPLIB/JOBLIB/LINKLIST
    search sequence to find the MXIXPTxx member. This enables users
    that are invoking MXI using LIBDEFs to test and use MXIXPTxx
    members.

    An example REXX EXEC to invoke MXI could be as follows :

    /* REXX */
    address ISPEXEC "LIBDEF ISPLLIB DATASET ID('MXI.LOAD') STACK"
    address ISPEXEC "LIBDEF ISPPLIB DATASET ID('MXI.PANELS') STACK"
    address ISPEXEC "LIBDEF ISPTLIB DATASET ID('MXI.TABLES') STACK"
    address TSO "ALLOC F(MXIXPT) DA('MXI.LOAD') SHR REUSE"
    address ISPEXEC "SELECT PGM(MXI) NEWAPPL(MXI) PASSLIB"
    address TSO "FREE F(MXIXPT)"
    address ISPEXEC "LIBDEF ISPTLIB"
    address ISPEXEC "LIBDEF ISPPLIB"
    address ISPEXEC "LIBDEF ISPLLIB"
    exit

