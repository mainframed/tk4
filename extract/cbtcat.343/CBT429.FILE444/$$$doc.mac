From: "Ronald Tatum" <rhtatum@door.net>
To: <sbgolob@ibm.net>
Cc: <sbgolob@aol.com>
Subject: Tapes/Editors
Date: Fri, 21 Jan 2000 20:02:38 -0600

Dear Mr. Golob:

    I read with some interest your article in the January Technical
Support about the CBT tapes. I have an old and hoary (ca. 1970) set
of programs that might be of interest to you as well as other NaSPA
members. One subset is a symmetric pair of programs that allows one
to write, or read, with impunity, physical records of up to 589815
bytes on 2420/3420 series tape drives. The only dissymmetry is that
the write routines can do a physical erase from BOT to EOT if one is
of a mind to really give the heads on a drive a good abrasive
cleaning and scare the daylights out of unsuspecting operators. The
method is simple: CCW's get chained, up to a maximum of nine channel
command words. One can change the maximum number of CCWs by
re-assembling the code. The problem with these two read/write
programs is that they were written for 360/370 pre XA or ESA and so
use format 0 CCWs instead of format 1, and are therefore limited to
a 24-bit address space. Changing the CCWs to format 1 is trivial,
but since I no longer work on, or have convenient access to, ESA
machines I do not know the changes in the sequence : Build a CCW,
build an ECB, build an IOB, point to the IOB, issue the EXCP, wait
on the ECB, figure out what happened. I'm reasonably certain that
the essentials are the same, but as you know THESE details are the
very devils that one must know to make physical I/O at the EXCP
level work.

    These routines could help you get a better "duty cycle" on your
tapes --- at 6250bpi, a 6400 byte physical record
(RECFM=FB,LRECL=80,BLKSIZE=6400) takes up about 1.6 inches of tape
(a little over an inch of data, an ISO-specified minimum of 0.6 inches
IRG), so you only get about 50% duty cycle. Chunk out about 65K, same
IRG used, you have better that 90% utilization of the physical medium.
(The reason for the obscene limits mentioned above was because they were
designed for well logs and seismic geophysical data which requires such
absurdities.)

    The third member of the set of programs is a batch oriented text
editor. That program works sort of like a compiler --- it parses control
and editing commands and does everything by a simplified pattern
matching process for the editing. Everything is edited in memory on
compressed text (all it does is squeeze out blanks and replace n-tuples
of blanks with a single byte containing a value which represents the
machine length of the former string of blanks --- not much good for
general text, but very good for programming languages where the source
is usually mostly blank space in well formatted/structured source form).
Yes, it's a little more complicated than that, but don't sweat the
details. The other salient features are: The editor knows languages
(Fortran, ALC, COBOL, SNOBOL, PL/l, Algol, XPL, PL360,etc.) and the
syntax for comments in various languages; All modules (the name for an
editor entity) are actually stored as images of the compressed card
images in members of a partitioned data set called the library; modules
can be edited and passed to a succeeding job step under OS as
reconstituted card images with a set of comments on each selected module
indicating the module name, author, original language, change level,
date of original creation and last modification date in those generated
comment cards. The only limit imposed is the maximum change level must
be equal to or less that 255 (because the change level is stored as a
single-byte integer); If you don't want a bunch of IEHMOVE garbage or
(compressed) members from IEBCOPY or IEBUPDTE or some other such, the
editor can place selected modules on tape as blocked card images (each
module is a separate physical file) with a user-specified blocking
factor (default is 100, giving an 8K physical record. The tape created
is unlabeled (Label=(x,NL)) because every installation I've ever been
exposed to likes to futz with the label exits and data set (user) label
nonsense. Oh, and by the way, all "lines" in a module that have been
changed from the time they were originally placed under the editor's
maintenance are flagged so that you can look at a listing and see just
what was changed when and by whom (except, obviously, for deleted lines
from the original source!), not just that the module is of a certain age
and change level at the moment. There is quite a bit more that's pretty
strong stuff, but I think you get the idea.

    I've gone over what I have access to, and what gets done on
2420/3420 tapes works the same on 3480 cartridges; I can't verify what
the CSWs and extended CSW/error logout stuff looks like, but I'm sure
it's not too bad.

    If you want a copy, either for your own use or as an addition to the
CBT collection, let me know. I'll make a copy of the user's doc and
snail mail it to you along with a 1.44MB floppy with the source for the
editor and the tape read/write/wipe programs. The editor is around 3000
card images and the tape routines are a few hundred each. The
documentation is the program listing for maintenance purposes, but even
if I did write it I shall claim that it's quite usable.

Regards,

Ronald H. Tatum (user-id: TATUMRDWAR3)
3408 56th. St., Lubbock, TX 79413-4747
(806)799-4485.

P.S.  I follow your writing in TS; you do a pretty good job for
someone who didn't start programming 360s in ALC in 1966!

ü
