
          General notes on dissassembling programs

Much of this comes from studying DISAS. Although it was not a
dissassembly it had so few comments it might as well have been one.

1: Don't unless you have to. Making sense of a dissassembly of a non-
trivial program is a big job. Time spent looking for the source code is
rarely wasted.

2: Find out as much about the program as you can before you start.
Input and output layout is very useful. A current CSECT map and cross-
reference is invaluable if it has more than one CSECT. Source for an
old version is a big help.

3: Dissassemble an object deck produced by the assembler or compiler if
you can. The object deck only includes text with a value specified in
the source deck, most (?) DSes aren't included. When the module is
linked the DSes are filled in with whatever was in the linkage editors
buffers at the time, often binary zeroes but it can be anything. When
the LMOD is delinked whatever went into the DSes appears as text, and
in the dissassembly as data or instructions. With the original object
deck DSes appear in the dissassembly as DS.

4: Use DELINKI off CBT file 90 to delink LMODs instead of DELINK0 if
you can. DELINK0 does not support weak external references, AMODE or
RMODE other than 24 or read only sections (RSECTs). Thus all WXTRNs
become EXTRNs, and all sections appear as CSECTS with AMODE 24, RMODE
24. You can get an executable version of DELINKI on CBT file 135 if you
don't have a PL/I compiler.

5: Remember Edison's statement that genius is 1% inspiration and 99%
perspiration. Study the generated source carefully. Move the equates
at the end back to where they should be. Look at the data area for
readable messages. For every label in the code check where it is used.
Put a comment on constants to say they are constants. For every
variable try to work out what it does. Look for loops in the code, put
a comment at the start and end. Put a comment on subroutines even
before you know what they do. Try to identify external control blocks
that are being accessed.

6: When you start changing labels, using symbolic addressing etc you
should do test assemblies at suitable intervals and compare the result
with the original. At least do one just before making any change
intended to alter the resultant load module.
