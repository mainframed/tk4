ADDR     TITLE 'ADDR '
***********************************************************************
*                                                                     *
*        generate address for an instruction                          *
*        as nnnn(rr)    (format 1)                                    *
*        or nnnn(rr,xx) (format 2)                                    *
*        or Annnnn      (format 3) - if USING active for base reg     *
*                                                                     *
*  called by RX, RS, SI, SS                                           *
*                                                                     *
*  input: addressed by R14                                            *
*    +0  2 bytes x'00' (always ?)                                     *
*    +2  2 byte address part of instruction                           *
*    +4  1 byte flag (x'00' or x'01' if format 1 adr.)                *
*    +5  start of 3 byte length for SS instrs or x'00'                *
*    +6  2 byte index reg no. (char 00-15) or x'0000'                 *
*    +8  4 byte address of output buffer holding current line         *
*    +15 1 byte instruction format from AXN                           *
*    +16 callers R13                                                  *
*    +20 return to here                                               *
*                                                                     *
*  output: addressed by R14                                           *
*    +0  1-11 byte address                                            *
*    +12 length of address (fullword)                                 *
***********************************************************************
ADDR     CSECT
         BALR  13,0               setup base reg
         USING *,13               tell assembler
         EXTRN SAVA               csect
         EXTRN USING              csect
         EXTRN CXN                csect
         ST    14,A14             save @ parms
         MVC   PAS(4),8(14)       copy @ output buffer
         L     6,PAS              load @ output buffer
         MVC   BAS(4),0(14)       copy address part of instr
         MVC   RGG(4),4(14)       copy index reg no. (char)
         MVC   DISP+2(2),2(14)    copy address part of instr
         MVC   FLR+2(2),DISP+2    copy it to parms for USING
         NI    DISP+2,X'0F'       mask out displacement
         MVI   FLR,X'03'          flag check for using for this reg
         ST    13,FLR+8           save base reg
         L     14,AUSIX           FIND ABSOLUTE ADDRESS
         CNOP  2,4
         BALR  14,14              call USING csect
FLR      DC    F'0'
         DC    F'0'
         DC    F'0'               base reg for USING to restore
         L     3,FLR              get IC of using or zero
         SLL   3,8                mask off
         SRL   3,8                 high byte
         A     3,DISP             add displacement
         ST    3,ADX1             pass address of operand to CXN
         ST    3,DIS2             save address of operand
         ST    13,ADX1+8          save base reg
         L     14,ADCXN           CONVERT TO BCD
         CNOP  6,8
         BALR  14,14              call CXN csect
ADX1     DC    D'0'
         DC    F'0'               base reg for cxn to reload
         L     14,A14             reload @ parms
         L     6,PAS              reload @ output buffer
         CLI   30(6),C'0'         first address already there ?
         BE    SECA               yes, this must be second address
         MVC   XFG(1),15(14)      copy instruction format code
         NI    XFG,C'0'           get only high 4 bits
         CLI   XFG,X'20'          RX instruction ?
         BE    SECA               BR if yes
         CLI   XFG,X'30'          RS instruction ?
         BE    SECA               BR if yes
         MVC   30(6,6),ADX1+2     FIRST ADDRESS field in listing
         B     SECB               and skip copy of 2nd address
SECA     MVC   40(6,6),ADX1+2     SECOND ADDRESS field in listing
SECB     CLI   FLR,X'00'          was a using active for this reg ?
         BE    RAD                branch if not
LDIS     L     3,DIS2
         SLL   3,8                NO
         ST    3,SAV
         MVC   SAV+3(1),15(14)
         ST    13,SAV+8           save base reg
         L     14,ASAVA           SAVE ADDRESS
         CNOP  6,8
         BALR  14,14              call sava csect
SAV      DC    D'0'
         DC    F'0'               base reg for sava to reload
         L     6,PAS              reload @ output buffer
         LA    5,SAV+7            )
         LA    4,8                ) find
CLL      CLI   0(5),C' '          )  end
         BNE   LAA                )   of
         BCT   4,CLM              )    label
CLM      BCT   5,CLL              )
LAA      L     14,A14             reload @ parms
         MVC   0(8,14),SAV        pass label back to caller
         CLC   CZ(3),RGG+1        IS INDEX ZERO
         BE    RADD               return IF YES
         CLI   RGG,X'01'          IS THERE A LENGTH OR INDEX
         BE    RADD               return if not
         MVI   1(5),C'('          YES
         CLI   RGG+1,X'00'
         BNE   RAD2
RADA3    LA    4,4(4)             ONE SIGNIF. CHAR.
         CLI   RGG+2,C'0'
         BNE   RADO
         MVC   2(1,5),RGG+3
         S     5,ONEM             subtract 1
         S     4,ONEM             subtract 1
         MVI   4(5),C')'
         MVC   0(12,14),SAV
         B     RADD               and return
RADO     MVC   2(2,5),RGG+2       TWO SIGNIF. CHAR.
         MVI   4(5),C')'
         MVC   0(12,14),SAV
         B     RADD               and return
RAD2     CLI   RGG+1,C'0'         THREE SIGNIF. CHAR.
         BE    RADA3
         MVC   2(3,5),RGG+1
         MVI   5(5),C')'
         LA    4,5(4)
         MVC   0(12,14),SAV
         B     RADD               and return
RAD      LA    4,8                ADDRESS IS ABSOLUTE
         L     3,DISP             get displacement
         CVD   3,DWA1             make it decimal
         UNPK  DWA(8),DWA1(8)     make it ebcdic
         OI    DWA+7,C'0'         make last byte ebcdic
         L     6,PAS              reload @ output buffer
         L     14,A14             reload @ parms
         LR    8,14
         LA    7,3
         LA    5,DWA+4
CLAD     CLI   0(5),C'0'          REMOVE LEADING ZEROES
         BNE   RADP
         LA    5,1(5)
         S     14,ONEM            subtract 1
         S     4,ONEM             subtract 1
         BCT   7,CLAD
RADP     STC   7,MVAR+1
MVAR     MVC   0(1,8),0(5)
         MVI   4(14),C'('
         L     3,BAS
         SRL   3,12
         CVD   3,DWA1
         UNPK  DWA(8),DWA1(8)
         OI    DWA+7,C'0'
         CLI   RGG,X'01'          IS THERE A LENGTH
         BE    NXX
         CLI   RGG+1,X'00'        YES
         BE    NX2
         LA    4,4(4)
         CLI   RGG+1,C'0'
         BNE   SSR1
         S     4,ONEM             subtract 1
         CLI   RGG+2,C'0'
         BNE   SSR2
SRRR     S     4,ONEM             subtract 1
         MVC   5(1,14),RGG+3      LENGTH IS ONE SIGN. CHAR.
         MVI   6(14),C','
         S     14,TWOC            subtract 2
         B     SSR3
SSR2     MVC   5(2,14),RGG+2      LENGTH IS TWO SIGN. CHAR.
         MVI   7(14),C','
         S     14,ONEM            subtract 1
         B     SSR3
SSR1     MVC   5(3,14),RGG+1      LENGTH IS THREE SIGN. CHAR.
         MVI   8(14),C','
SSR3     CLC   DWA+6(2),DZA       IS BASE ZERO
         BE    NX3
         CLI   DWA+6,C'0'         NO
         BNE   SSR4
         MVC   9(1,14),DWA+7      BASE IS ONE SIGN. CHAR.
         MVI   10(14),C')'
         S     4,ONEM             subtract 1
         B     RADD               and return
SSR4     MVC   9(2,14),DWA+6      BASE IS TWO SIGN. CHAR.
         MVI   11(14),C')'
         B     RADD               and return
NX3      MVI   8(14),C')'
         S     4,TWOC3            subtract 3
         B     RADD               and return
NX2      LA    4,3(4)
         CLI   RGG+2,C'0'
         BNE   SSR5
         CLI   RGG+3,C'0'
         BNE   LAP
         CLC   DWA+6(2),DZA
         BNE   LAP
         MVI   4(14),C' '
         S     4,SIXC             subtract 6
         B     RADD               and return
LAP      MVC   5(1,14),RGG+3
         S     4,ONEM             subtract 1
         S     14,ONEM            subtract 1
         B     SSR6
SSR5     MVC   5(2,14),RGG+2      INDEX IS TWO SIGN. CHAR.
SSR6     MVI   7(14),C','
         CLC   DWA+6(2),DZA       IS THERE A BASE
         BNE   SSR7
         MVI   7(14),C')'         NO
         S     4,TWOC3            subtract 3
         B     RADD               and return
SSR7     CLI   DWA+6,C'0'
         BNE   SSR8
         MVC   8(1,14),DWA+7      BASE IS ONE SIGN. CHAR.
         MVI   9(14),C')'
         S     4,ONEM             subtract 1
         B     RADD               and return
SSR8     MVC   8(2,14),DWA+6      BASE IS TWO SIGN. CHAR.
         MVI   10(14),C')'
         B     RADD               and return
NXX      CLC   DWA+6(2),DZA       IS THERE A BASE
         BNE   NXX3
         MVI   4(14),C' '         NO
         S     4,FORM             subtract 4
         B     RADD               and return
NXX3     CLI   DWA+6,C'0'
         BNE   NXX2
         MVC   5(1,14),DWA+7      BASE IS ONE CHAR.
         S     4,ONEM             subtract 1
         MVI   6(14),C')'
         B     RADD               and return
NXX2     MVC   5(2,14),DWA+6      BASE IS TWO CHAR.
         MVI   7(14),C')'
RADD     L     14,A14             RETURN
         ST    4,12(14)           pass back address length
         L     13,16(14)          reload callers base reg
         BAL   14,20(14)          and return
         DC    C'IMM='
ADCXN    DC    A(CXN)             @ CXN csect
AUSIX    DC    A(USING)           @ USING csect
ASAVA    DC    A(SAVA)            @ SAVA csect
XFG      DC    F'0'
PAS      DC    F'0'               @ output buffer
TWOC3    DC    F'3'               constant
FORM     DC    F'4'               constant
SIXC     DC    F'6'               constant
DZA      DC    C'0000'            constant
DWA1     DC    D'0'
DWA      DC    D'0'
RGG      DC    F'0'
BAS      DC    F'0'
ONEM     DC    F'1'               constant
TWOC     DC    F'2'               constant
ADD      DC    F'0'
CZ       DC    X'00F0F000'        constant
DISP     DC    F'0'
DIS2     DC    F'0'
A14      DC    F'0'               Save @ parms here
         END
