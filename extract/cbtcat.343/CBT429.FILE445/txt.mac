TXT      TITLE '* * * T X T * * *       (TEXT SUBROUTINE)  '
***********************************************************************
*                                                                     *
*  process TXT card from input                                        *
*                                                                     *
*  called by PASS1                                                    *
*                                                                     *
*  parms @ r14:                                                       *
*    +0 - @ input card                                                *
*    +4 - @ print area                                                *
*    +8 - return to here                                              *
*                                                                     *
* history:                                                            *
*   put out message with info from the END card           CFK jun 1999*
*   allow 5000 TXT cards instead of 500                   CFK jun 1999*
*   only print length and epa if present                  CFK jly 1999*
*                                                                     *
***********************************************************************
ENDCARD  DSECT
ENDC1    DS    X                  constant x'02'
ENDCTXT  DS    CL4                constant c'END '
ENDCEPA  DS    XL3                Entry Point Address or spaces
         DS    CL6                spaces
ENDCID   DS    XL2                ESD ID of csect that contains the EPA
ENDCNAME DS    CL8                entry point name or spaces
         DS    CL4                spaces
ENDCLFLG DS    X                  binary zero if next field is valid
ENDCLEN  DS    XL3                csect length
ENDCTRFL DS    C                  flag to indicate if ID present
ENDCNOTR EQU   C' '                 no IDR information in record
ENDC1TR  EQU   C'1'                 1 IDR item follows
ENDC2TR  EQU   C'2'                 2 IDR items follow
ENDCT1NM DS    CL10               1st translator ID
ENDCT1V  DS    CL2                translator version (01 to 99)
ENDCT1M  DS    CL2                translator mod level (01 to 99)
ENDCT1YR DS    CL2                last 2 digits of year assembled
ENDCT1DT DS    CL3                day of year assembled
ENDCT2NM DS    CL10               2nd translator ID
ENDCT2V  DS    CL2                translator version (01 to 99)
ENDCT2M  DS    CL2                translator mod level (01 to 99)
ENDCT2YR DS    CL2                last 2 digits of year assembled
ENDCT2DT DS    CL3                day of year assembled
*
TXT      CSECT
         BALR  13,0               setup base reg
         USING *,13               tell assembler
         ENTRY END                called by TXT
         ENTRY ENDA               ref'ed by PASS4
         ENTRY NTXT               ref'ed by FTXTA
         ENTRY TXTS               ref'ed by PASS4, FTXTA
         ENTRY TXTB               ref'ed by PASS4
         EXTRN LCF                in PASS1 csect
         EXTRN PRINT              csect
         EXTRN PASS5              csect
         ST    14,TX14            save @ parms
         L     1,0(14)            get @ input card
         CLI   11(1),X'00'        0 bytes text on this card ?
         BE    8(14)              yes, exit
         L     3,NTXT             )
         LA    3,1(3)             ) inc number of cards
         ST    3,NTXT             )
         CLC   NTXT(4),TX500      card buffer full ?
         BL    LT8                no - OK
         MVC   NTXT(4),TX500      reset count (?)
         BH    8(14)              exit if error msg already output
         MVC   PTMX(4),4(14)      pass @ print area to PRINT csect
         L     1,4(14)            get @ print area in PASS1
         MVC   0(27,1),EMXT       copy 'more than 4999 TXT cards' msg
         L     14,XPRT            get @ PRINT csect
         CNOP  2,4
         BALR  14,14              call PRINT
PTMX     DC    F'0'
         L     14,TX14            reload r14
         B     8(14)              and exit
LT8      LA    2,8
         MR    2,2
         A     3,ATXTB            add @ txtb
         MVC   0(3,3),5(1)        copy address of 1st byte of text data
         MVC   3(1,3),11(1)       copy number of bytes of text data
         MVC   4(1,3),15(1)       copy ESD identifier (2nd byte only)
         MVC   5(3,3),NTXT+1      (PREV. OMITTED)
         MVC   MOVE+1(1),11(1)    ** modify length to move **
         L     4,TXTNS            get @ next TXTB slot
MOVE     MVC   0(1,4),16(1)       copy text data
         MVC   NBY+3(1),11(1)     ???
         MVI   NBY+3,X'38'        (PREV. OMITTED)
         A     4,NBY              add bytes of text data to ptr
         ST    4,TXTNS            save updated pointer
         B     8(14)              exit TXT
***********************************************************************
*                                                                     *
*  Entry point to process END card(s)                                 *
*                                                                     *
*  parms @ r14:                                                       *
*    +0 - @ input card                                                *
*    +4 - @ print area                                                *
*    +8 - return to here                                              *
*                                                                     *
***********************************************************************
END      BALR  13,0               setup base reg
         USING *,13               tell assembler
         ST    14,TX14            save @ parms
         L     1,0(14)            get @ input card
         USING ENDCARD,1          tell assembler
         L     3,4(14)            get @ print area
         ST    3,PA1              put where PRINT expects it
         MVC   ENDA(3),ENDCEPA    copy entry point address
         MVC   ENDS(2),ENDCID     copy ESD ID
         CLI   ENDCLFLG,X'00'     is a length present ?
         BNE   NOLEN              br. if no length
         UNPK  ENDMLEN(7),ENDCLEN(4)   unpack csect length
         MVI   ENDMLEN+L'ENDMLEN,C' '  clear gash byte
         TR    ENDMLEN,TRTAB-240  make printable
NOLEN    DS    0H
         MVC   ENDMENTR,ENDCNAME  copy entry name
         CLC   ENDCNAME,SPACES    symbolic entry name present ?
         BNE   NOEPA              br if so
         CLC   ENDCEPA,SPACES     entry len present ?
         BE    NOEPA              br. if no entry length
         UNPK  ENDMENTR(7),ENDCEPA(4)  unpack entry point address
         MVI   ENDMENTR+6,C' '         clear gash byte
         TR    ENDMENTR(6),TRTAB-240   make printable
NOEPA    DS    0H
         MVC   0(ENDMSGL1,3),ENDMSG    copy message to print area
         CLI   ENDCTRFL,ENDCNOTR  translator IDR present ?
         BE    PRMSG              branch if not
         MVC   ENDMT1NM,ENDCT1NM  )
         MVC   ENDMT1V,ENDCT1V    ) copy 1st
         MVC   ENDMT1M,ENDCT1M    ) translator
         MVC   ENDMT1YR,ENDCT1YR  ) details
         MVC   ENDMT1DT,ENDCT1DT  )
         MVC   ENDMSGL1(ENDMT1L,3),ENDMT1  copy message to print area
         CLI   ENDCTRFL,ENDC1TR   2nd translator IDR present ?
         BE    PRMSG              branch if not
         MVC   ENDMT2NM,ENDCT2NM  )
         MVC   ENDMT2V,ENDCT2V    ) copy 2nd
         MVC   ENDMT2M,ENDCT2M    ) translator
         MVC   ENDMT2YR,ENDCT2YR  ) details
         MVC   ENDMT2DT,ENDCT2DT  )
         MVC   ENDMSGL1+ENDMT1L(ENDMT2L,3),ENDMT2  copy to print area
PRMSG    DS    0H
         L     14,XPRT            get @ PRINT csect
         CNOP  2,4
         BALR  14,14              call PRINT
PA1      DC    F'0'               @ print area
         L     14,TX14            reload r14
         L     3,ALCF             get @ LCF in PASS1 csect
         MVI   0(3),X'FF'         flag END card found
         L     1,TPAS5            get @ PASS5 csect
         SR    2,2                zero r2
         C     2,NTXT             any text cards read ?
         BER   1                  no - exit prog
*  sort the cards by text address
RCYC     LA    3,TXTB+8           get @ TXT card header array + 8
         L     4,NTXT             get number of TXT cards
         SLL   4,3                multiply by array entry length
         AR    3,4                calc @ next free entry
         S     3,SIXTX            subtract 16 to calc @ last entry
         L     4,NTXT             get number of TXT cards read
         S     4,ONEXY            subtract 1
         BZ    ECR                if only 1 don't check for overlap
         MVI   EXCK,X'00'         clear cards swapped flag
CLXX     CLC   0(3,3),8(3)        this cards TXT before next card ?
         BC    12,NEXX            br if low or equal
         SR    5,5
         SR    6,6
         LH    5,6(3)             get card number
         LH    6,14(3)            get card number
         MH    5,FFF6             mul by 56
         MH    6,FFF6             mul by 56
         A     5,TXTNS2           add @ TXTS
         A     6,TXTNS2           add @ TXTS
         L     7,TXTNS2           get @ TXTS
         MVC   0(56,7),0(6)       )
         MVC   0(56,6),0(5)       ) swap via free 1st slot
         MVC   0(56,5),0(7)       )
         MVC   TMXT(8),8(3)       ×
         MVC   8(5,3),0(3)        × swap header data
         MVC   0(5,3),TMXT        ×
         MVI   EXCK,X'01'         flag card swapped
NEXX     S     3,EIGHTX           subtract 8
         BCT   4,CLXX             br if any more cards
         CLI   EXCK,X'01'         any swaps done ?
         BE    RCYC               if so try again
* sort finished
         L     9,NTXT             get number of TXT cards read
         L     5,TXTNS2           get @ next free slot
         ST    5,TXTSC
         LA    3,TXTB             get @ 1st card header
         LR    4,3                ) calc @
         LA    4,8(4)             )  2nd card header
         L     1,NTXT             get number of TXT cards read
PTXT     MVC   TEMPT(5),0(4)      copy 2nd card header
         C     9,ONEXY            only 1 card left to check ?
         BE    PTXTO              yes - exit loop
         MVC   TCC1+1(3),0(4)
         MVC   TCC2+1(3),8(4)
         SR    5,5                clear r5
         IC    5,3(4)             get length of TXT data on 2ND CARD !
         A     5,TCC1             add 1st cards start adr.
         C     5,TCC2             comp to 2nd cards start adr.
         BNH   PTXTO              br if no overlap
         STM   4,5,TMXT           save r4,r5
         L     4,4(14)            get @ print area
         ST    4,OLE              put where PRINT expects it
         MVC   0(28,4),OVLER      copy '**  SOME TEXT CARDS OVERLAY '
         L     14,XPRT            get @ PRINT csect
         CNOP  2,4
         BALR  14,14              call PRINT
OLE      DC    F'0'               @ print area
         L     14,TX14            reload r14
         LM    4,5,TMXT           reload r4,r5
         SR    8,8
         IC    8,11(4)
         BCTR  8,0
         LTR   8,8
         BM    EROL
         L     5,TCC2
         S     5,TCC1
         LH    6,6(4)
         MH    6,FFF6             mul by 56
         AR    6,5
         A     6,TXTNS2           add @ TXTS
         LH    7,14(4)
         MH    7,FFF6             mul by 56
         A     7,TXTNS2           add @ TXTS
         SR    4,4
         IC    4,TEMPT+3          get TXT length
         A     4,TCC1
         SR    4,5
         BCTR  4,0
         CR    4,8
         BC    5,EROL
         EX    8,MOOL             MVC   0(1,6),0(7)
         LM    4,5,TMXT
         MVC   8(5,4),0(4)
         LH    6,6(4)
         LA    4,8(4)
         MH    6,FFF6             mul by 56
         A     6,TXTNS2           add @ TXTS
         MVC   56(56,6),0(6)
         S     1,ONEXY            subtract 1
         BCT   9,PTXT             loop if more cards to process
EROL     LM    4,5,TMXT
         SR    7,7
         IC    7,11(4)
         A     7,TCC2
         CR    5,7
         BNL   DLSC
         L     5,TCC2
         S     5,TCC1
         STC   5,TEMPT+3          modify TXT length
         B     PTXTO
DLSC     SR    5,5
         STC   5,11(4)
PTXTO    CLI   TEMPT+3,X'00'      temp header 0 bytes of TXT ?
         BE    DELTX              br if yes
         MVC   0(5,3),TEMPT       copy back to array
         LA    3,5(3)             get @ card number of 1st card
         LH    6,6(4)             get card number of 2nd card
         SR    8,8
         IC    8,TEMPT+3          get number of bytes of text data
         LA    4,8(4)             get @ card after next
         MH    6,FFF6             mul by 56
         L     5,TXTNS2           get @ TXTS
         AR    5,6                calc @ text for 2nd card
         L     7,TXTSC            get @ ?
         MVC   0(56,7),0(5)       copy text
         AR    7,8                add length of text data
         ST    7,TXTSC            save @ ?
         BCT   9,PTXT             br if any more cards to process
         ST    1,NTXT             save effective number of cards
         B     8(14)              exit
DELTX    S     1,ONEXY            subtract 1 from number of cards
         LA    4,8(4)             get @ next card
         BCT   9,PTXT             br if any more cards to process
         ST    1,NTXT             save effective number of cards
         B     8(14)              exit
* only 1 text card input
ECR      L     7,TXTNS2           ) duplicate
         MVC   0(56,7),56(7)      )  the
         MVC   TXTB(5),TXTB+8     )   card
         B     8(14)              exit
MOOL     MVC   0(1,6),0(7)        EXecuted instruction
         DC    C'IMM='
TCC1     DC    F'0'
TCC2     DC    F'0'
TXTSC    DC    F'0'
FFF6     DC    X'0038'            constant 56
EIGHTX   DC    F'8'               constant
SIXTX    DC    F'16'              constant
ONEXY    DC    F'1'               constant
EXCK     DC    F'0'
TMXT     DC    2F'0'
XPRT     DC    A(PRINT)           @ PRINT csect
TXTNS2   DC    A(TXTS)
TX14     DC    F'14'              r14 saved here
TX500    DC    F'5000'            max number of TXT cards
OVLER    DC    C'**  SOME TEXT CARDS OVERLAY '
EMXT     DC    C'**  MORE THAN 4999 TXT CARDS'
TRTAB    DC    C'0123456789ABCDEF' hexadecimal characters
SPACES   DC    CL8' '             spaces
ENDMSG   DS    0C                 message for END card
         DC    C' END '           constant text
         DC    C' LENGTH='        constant
ENDMLEN  DC    CL6' '             possible csect length
         DC    C' ENTRY='
ENDMENTR DC    CL8' '             possible entry point name or address
ENDMSGL1 EQU   *-ENDMSG           length of fixed details
ENDMT1   DC    C' TR1='
ENDMT1NM DC    CL10' '            1st translator
         DC    C' v'
ENDMT1V  DC    C'??'              1st version
         DC    C'm'
ENDMT1M  DC    C'??'              1st mod level
         DC    C' '
ENDMT1YR DC    C'  '              1st year
         DC    C'.'
ENDMT1DT DC    C'   '             1st date (day of year)
ENDMT1L  EQU   *-ENDMT1           length of 1st translator details
ENDMT2   DC    C' TR2='
ENDMT2NM DC    CL10' '            2nd translator
         DC    C' v'
ENDMT2V  DC    C'??'              2nd version
         DC    C'm'
ENDMT2M  DC    C'??'              2nd mod level
         DC    C' '
ENDMT2YR DC    C'  '              2nd year
         DC    C'.'
ENDMT2DT DC    C'   '             1 date (day of year)
ENDMT2L  EQU   *-ENDMT2           length of 2nd translator details
TEMPT    DC    C'     '
TPAS5    DC    A(PASS5)           @ PASS5 csect
ALCF     DC    A(LCF)             @ LCF in PASS1 csect
ENDA     DS    3CL1               entry, entry adr. on END card
ENDS     DS    2CL1               ESD ID on END card
TXTNS    DC    A(TXTS+56)         @ next TXTS slot
NBY      DC    F'0'
ATXTB    DC    A(TXTB)
NTXT     DC    F'0'               entry, number of TXT cards read
TXTB     DS    3CL1               entry, array of card headers, TXT adr
TXTN     DS    1CL1                 no. bytes of TXT data
TXTSN    DS    1CL1                 ESD identifier
         DS    3CL1                 rel. card number
         DS    5000CL8            (PREV CL5)
TXTS     DS    5001CL56           entry, TXT data
         DS    0F
         END
