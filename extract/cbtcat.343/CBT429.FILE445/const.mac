CON      TITLE '*** C O N S T ***  (MODIFIED FOR FTXTA)  AUG. 24,1967'
***********************************************************************
*                                                                     *
*        format constants in listing                                  *
*                                                                     *
*  called by PASS4 and FTXTA                                          *
*                                                                     *
* parms addressed by r14:                                             *
*   +0  - @ output buffer                                             *
*   +4  - instruction/constant type (zero)                            *
*   +5  - not used (zero)                                             *
*   +6  - constant length                                             *
*   +8  - input up to 8 byte constant                                 *
*   +16 - instruction counter                                         *
*   +19 - copy of AXNFLG1, prob zero                                  *
*   +20 - return to here                                              *
*                                                                     *
* history:                                                            *
*   constant length is 2 bytes (+ map parms)             CFK jun 1999 *
*                                                                     *
***********************************************************************
         FMTPARMS                 copy parameter map
CONST    CSECT
         USING FMTPARMS,14        tell assembler about parms
         EXTRN CXN                csect
         EXTRN ADA                in PASS4 csect
         EXTRN FLPT               csect
         EXTRN FXPT               csect
         BALR  13,0               setup base reg
         USING *,13               tell assembler
         ST    14,CT14            save @ parms
         MVC   CXNC(4),8(14)      pass input constant to CXN
         ST    13,CXNC+8          put base reg where CXN expects it
         L     14,CCXN            CONVERT TO BCD
         CNOP  6,8
         BALR  14,14              call CXN csect
CXNC     DC    D'0'               hex output from CXN
         DC    F'0'               CXN reloads r13 from here
         L     14,CT14            reload @ parms
         L     4,0(14)            get @ output buffer
NADAR    MVC   SICC1+1(3),16(14)  copy instruction counter
         L     3,SICC1
         CLC   SICC(4),ZERC       = zero  ?
         BE    NADB               br if yes
         C     3,SICC
         BNE   NADB
         MVI   64(4),C' '
         MVC   65(35,4),64(4)
         B     20(14)             return
NADB     L     3,AADA             get @ ADA in PASS4 (parms for ART)
         LTR   3,3
         BM    NADA
         CLC   ZERC(3),0(3)       zero ?
         BE    NADA
         CLC   FORC+2(2),FMTLEN2  constant length = 4 ?
         BNE   NADA               branch if not
         CLC   0(3,3),SICC1+1
         BNE   NADA
         MVC   FHX+4(8),8(14)     copy input constant
         CLI   3(3),X'22'
         BE    CFXPT
         CLC   9(3,14),ZERC       input zero ?     ???
         BE    NADA
         TM    8(14),X'7F'
         BZ    NADA
         CLI   3(3),X'24'
         BE    CFLPT
         MVI   FHX+12,X'80'
         CLI   3(3),X'25'
         BNE   NADA
         MVC   CXNC2(4),12(14)    pass rest of input to CXN
BFLT     ST    13,CXNC2+8         put r13 where cxn expects it
         L     14,CCXN            get @ cxn
         CNOP  6,8
         BALR  14,14              call cxn csect
CXNC2    DC    D'0'               input & output to/from cxn
         DC    F'0'               cxn reloads r13 from here
         L     14,CT14            reload @ parms
         L     4,0(14)            get @ output buffer
         MVC   17(8,4),CXNC2      copy object code to output area
         MVI   6(14),X'FF'
         L     3,16(14)           get instruction counter
         SRL   3,8
         A     3,FORC
         ST    3,SICC
         B     CFLT               go to call FLPT
CFXPT    MVC   FHF(4),0(14)       pass @ print area to FXPT
         MVC   FHF+4(4),8(14)     pass input constant to FXPT
         ST    13,FHF+8           put r13 where FXPT expects it
         L     14,AFXPT           get @ FXPT csect
         CNOP  2,4
         BALR  14,14              call FXPT
FHF      DC    F'0'               @ print area
         DC    F'0'               input constant
         DC    F'0'               r13 stored here
         L     14,CT14            reload r14
         L     4,0(14)            reload @ print area
         MVC   9(8,4),CXNC        copy object code to print area
         BAL   14,20(14)          return
CFLPT    MVI   FHX+12,X'00'
         MVC   FHX+8(4),ZERC      zero FLPT parms
CFLT     MVC   FHX(4),0(14)       pass @ print area to FLPT
         ST    13,FHX+16          pass r13 to FLPT
         L     14,AFLPT           get @ FLPT csect
         CNOP  2,4
         BALR  14,14              call FLPT
FHX      DC    F'0'               @ print area
         DC    F'0'               ) input
         DC    F'0'               ) TEXT
         DC    F'0'               flag, x'00' or x'80'
         DC    F'0'               r13 stored here
         L     14,CT14            reload r14
         L     4,0(14)            reload @ print area
         MVC   9(8,4),CXNC        copy object code to print area
         BAL   14,20(14)          return to caller (?)
NADA     MVC   70(2,4),XQ         copy X' to o/p buffer
         MVC   64(2,4),DC         copy DC to o/p buffer
         LH    3,6(14)            get length
         SLL   3,1                times 2
         S     3,CONE             sub 1 for executed MVCs
         BM    20(14)             if length zero exit
         C     3,EIGHT            length more than 8 ?
         BL    MM                 no - OK
         LA    3,7                else load max len to move
MM       EX    3,CMV              move constant to object code field
         LH    2,FMTLEN2          get length
         S     2,CONE             sub 1 for executed MVCs
         C     2,TWT              length more than 20 ?
         BH    20(14)             if so return
         EX    2,TRTI             check if ebcdic
         BNZ   EXC3               non ebcdic chars found, o/p hex const
         MVI   70(4),C'C'         else ind char string
         EX    2,CMV3             copy chars to output buffer
         AR    4,2                calc @ end of string
         B     MVIC3              go to add final '
EXC3     EX    3,CMV2             copy hex string
         AR    4,3                calc @ end of string
MVIC3    MVI   73(4),X'7D'        add ' to end of constant
         BAL   14,20(14)          RETURN
CMV2     MVC   72(1,4),CXNC       EXecuted to move hex constant
CMV      MVC   9(1,4),CXNC        EXecuted to move const to object code
CMV3     MVC   72(1,4),8(14)      EXecuted to move char constant
TRTI     TRT   8(1,14),ABC        EXecuted to check if ebcdic
         DC    C'IMM='
CT14     DC    F'0'               R14 (@ parms) saved here
CONE     DC    F'1'               constant
EIGHT    DC    F'8'               constant
TWT      DC    F'20'              constant
CCXN     DC    A(CXN)             @ cxn csect
DC       DC    C'DC'              DC to declare constant
XQ       DC    X'E77D'            X' for start of hex literals
ABC      DC    16X'FFFFFFFF'      Table of valid ebcdic chars
         DC    X'00'              space (x'40')
         DC    2X'FFFFFFFF'
         DC    X'FFFF'
         DC    X'00FF0000'        . (+
         DC    3X'FFFFFFFF'
         DC    X'000000FF'         *)
         DC    X'FF0000FF'         -/
         DC    2X'FFFFFFFF'
         DC    X'00FFFFFF'        '
         DC    3X'FFFFFFFF'
         DC    X'FFFFFF00'           =
         DC    16X'FFFFFFFF'
         DC    X'FFFF'
         DC    2X'00000000'       ABCDEFGH
         DC    X'00FFFFFF'        I
         DC    X'FFFFFFFF'
         DC    2X'00000000'       JKLMNOPQ
         DC    X'00FFFFFF'        R
         DC    X'FFFFFFFF'
         DC    X'FF'
         DC    2X'00000000'       STUVWXYZ
         DC    2X'FFFFFF'
         DC    2X'00000000'       01234567
         DC    X'0000'            89
         DC    2X'FFFFFF'
SICC     DC    F'0'
ZERC     DC    F'0'               constant
FORC     DC    F'4'               constant
AFLPT    DC    A(FLPT)            @ FLPT csect
AFXPT    DC    A(FXPT)            @ FXPT csect
AADA     DC    A(ADA)             @ ADA in PASS4 csect
SICC1    DC    F'0'
         DS    0F
         END
