AXN      TITLE 'FIND OP CODE MNEMONIC'
***********************************************************************
*                                                                     *
*    Called by FTXTA                                                  *
*                                                                     *
*  input addressed by R14:                                            *
*    +0  input 1 or 2 byte opcode (4 bytes passed)                    *
*    +2  output 5 byte instruction mnemonic                           *
*    +7  output opcode or X'0000' if invalid opcode                   *
*    +9  output 1 byte flag from table                                *
*    +10 output 1 byte instruction format                             *
*    +11 output 1 byte operand format                                 *
*    +12 output 4 byte @ instruction use count entry for this opcode  *
*    +16 callers R13                                                  *
*    +20 return to here                                               *
*                                                                     *
*  history:                                                           *
*    move instruction use counters from COUNT into        CFK may 1999*
*    opcode table, so COUNT does not need to know how                 *
*    many opcodes exist.                                              *
*                                                                     *
*    support for 2 byte opcodes.                          CFK jun 1999*
*    support for 5 byte mnemonics.                                    *
*    return separate codes for instruction format and                 *
*    operand format.                                                  *
*    remove 360 only instructions.                                    *
*    add 370, XA and ESA instructions.                                *
*    extra vetting for some instructions.                             *
*    support for CUSE, MVPG, SQDR and SQER.               CFK jun 1999*
*    add BSG, CLST, MVST, SRST, SACF, CKSM, CLCLE, MVCLE, CFK jul 1999*
*    MSR, MS and CMPSC instructions.                                  *
*    support for CKSM and BSA.                            CFK aug 1999*
*    support for PLO.                                     CFK dec 1999*
*    flag semi-priv, interruptible and CC setting instr.  CFK dec 1999*
*                                                                     *
***********************************************************************
         AXNTAB                   Map instruction table.
         SPACE 1
PARMS    DSECT
PRMIOPC  DS    XL2                input opcode
PRMOUT   DS    0CL10              output copied from opcode table
PRMNAME  DS    CL5                output mnemonic
PRMOOPC  DS    XL2                output opcode
PRMOUTFL DS    X                  output flag byte fron table
PRMOUTFM DS    X                  output instruction format
PRMOOPF  DS    X                  output operand format
PRMOCNT  DS    A                  output @ instruction use counter
PRMR13   DS    A                  input callers R13
PRMRETA  DS    A                  return to here
         SPACE 1
AXN      CSECT
         ENTRY MEN                reffed by COUNT csect
         USING PARMS,14           tell assembler about parms
         BALR  13,0               setup base reg
         USING *,13               tell assembler
         MVC   BOP,PRMIOPC        copy input instruction
RMEN     DS    0H                 BINARY SEARCH
         L     7,H55              load number of opcodes in table
         LR    5,7                load number of opcodes in table
         SR    4,4
         LA    3,MENLAST-4000     @ last valid opcode
         LA    3,4000(3)          @ last valid opcode
         USING AXNTAB,3           tell assembler
         CLC   BOP1,AXNOPC        check it
*  this code assumes the last opcode is not a two byte opcode
         BH    PSP                if instr higher no such opcode
         BE    FND                found it
SR       AR    7,4
SR2      SRA   7,1
         M     6,SIX
         L     3,AMEN
         AR    3,7
         CLC   BOP1,AXNOPC        match ?
         BH    LOW
         BL    HIGH
         TM    AXNFLG2,AXNF2BYT   2 byte opcode ?
         BZ    FND                No - found it
         CLC   BOP2,AXNOPC+1      2nd byte matches ?
         BE    FND                found it
         BL    HIGH
LOW      D     6,SIX
         CR    4,7
         BE    PSP                no such opcode
         LR    4,7
         AR    7,5
         B     SR2
HIGH     D     6,SIX
         CR    5,7
         BE    PSP                no such opcode
         LR    5,7
         B     SR
FND      DS    0H       table entry match
         XR    7,7                clear work reg
         IC    7,AXNVAL           get validation rtn number
         B     *+4(7)
         B     FND2               no extra validation routine
         B     REGMASK            check register mask
         B     MPDP               MP or DP length fields
         B     DXR                DXR register masks
         B     SRP                SRP rounding digit
         B     CUSE               CUSE register masks
         B     SQR                SQDR and SQER register masks
         B     CKSM               CKSM register masks
REGMASK  DS    0H       check register mask
         IC    7,AXNOPC2          get mask
         EX    7,TM1              is it OK ?
         BNZ   PSP                br. if invalid register mask
         B     FND2               else OK
TM1      TM    PRMIOPC+1,0        check 2nd opcode byte
MPDP     DS    0H       MP or DP instruction
         IC    7,PRMIOPC+1        get length fields
         N     7,=X'0000000F'     mask out second length
         CH    7,=H'7'            valid second length ?
         BH    PSP                br if invalid length
         XR    6,6                clear second work reg
         IC    6,PRMIOPC+1        get length fields
         SRL   6,4                extract first length
         CR    6,7                is 1st length > 2nd length ?
         BNH   PSP                if not instruction not valid
         B     FND2               else OK
DXR      DS    0H      vet DXR operands
         TM    PRMIOPC+3,X'FF'-X'44'  registers 4 or 0 only ?
         BNZ   PSP                br if invalid extended register.
         B     FND2               else OK
SRP      DS    0H      vet SRP rounding digit
         IC    7,PRMIOPC+1        get length fields
         N     7,=X'0000000F'     mask out rounding digit
         CH    7,=H'9'            valid packed digit ?
         BH    PSP                br if invalid
         B     FND2               else OK
CUSE     DS    0H      vet CUSE operands
         TM    PRMIOPC+3,X'11'    registers must be even.
         BNZ   PSP                br if odd register.
         B     FND2               else OK
SQR      DS    0H      vet SQDR and SQER registers
         TM    PRMIOPC+3,X'99'    registers must be 0, 2, 4 or 6.
         BNZ   PSP                br if bad register.
         B     FND2               else OK
CKSM     DS    0H      vet CKSM operands
         TM    PRMIOPC+3,X'01'    2nd register must be even.
         BNZ   PSP                br if odd register.
FND2     DS    0H       valid opcode found
         MVC   PRMOUT,AXNAME      Pass back opcode and flags
         LA    3,AXNUSECT         get @ instr. use counter
         ST    3,PRMOCNT          pass address back to FTXTA
RETA     L     13,PRMR13          reload callers R13
         BAL   14,PRMRETA         and return
PSP      MVC   PRMOUT,DC          NO OP CODE
         B     RETA
         DC    C'IMM='
         LTORG
AMEN     DC    A(MEN)             entry point
H55      DC    A(MEMTABLN/MEMENTLN)  number of table entries
MNEM     DC    C'      '
SIX      DC    A(MEMENTLN)        length of a table entry
FIVE     DC    H'5'
ST6      DC    C'      '
BOP      DS    0XL2               input instruction
BOP1     DC    X'00'                input instruction 1st byte
BOP2     DC    X'00'                input instruction 2nd byte
DC       DC    C'DC   '           dummy table entry for non-opcodes
         DC    XL7'00',2F'0'
MEN      DC    C'PR   '       Program Return - ESA
         DC    X'01011F120F0C00'  e, 2 byte, term
         DC    2F'0'              instruction use counters
MEMENTLN EQU   *-MEN              length of one entry
         DC    C'UPT  '       Update Tree - XA assist
         DC    X'01021412003800'  e, 2 byte, interruptible, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SPM  '       Set Program Mask
         DC    X'04001311001000'  r, 1 operand, sets cc
         DC    2F'0'              instruction use counters
         DC    C'BALR '       Branch And Link
         DC    X'05001F10000400'  rr, term
         DC    2F'0'              instruction use counters
         DC    C'BCTR '       Branch on Count
         DC    X'06001F10000400'  rr, term
         DC    2F'0'              instruction use counters
         DC    C'BCR  '       Branch on Condition
         DC    X'07001F10000400'  rr, term
         DC    2F'0'              instruction use counters
*        DC    C'SSK  '       Set Storage Key (p) non-XA
*        DC    X'08001010000300'  rr
*        DC    2F'0'              instruction use counters
*        DC    C'ISK  '       Insert Storage Key (p) non-XA
*        DC    X'09001010000300'  rr
*        DC    2F'0'              instruction use counters
         DC    C'SVC  '       SuperVisor Call
         DC    X'0A001F10000400'  rr, term
         DC    2F'0'              instruction use counters
         DC    C'BSM  '       Branch and Set Mode
         DC    X'0B001F10000400'  rr, term,  XA opcode
         DC    2F'0'              instruction use counters
         DC    C'BASSM'       Branch And Save and Set Mode
         DC    X'0C001F10000400'  rr, term,  XA opcode
         DC    2F'0'              instruction use counters
         DC    C'BASR '       Branch And Save
         DC    X'0D001F10000400'  rr, term,  370 BS or XA opcode
         DC    2F'0'              instruction use counters
         DC    C'MVCL '       Move Long, new with 370
         DC    X'0E111010003004'  rr, interruptible, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CLCL '       Compare Logical Long, new with 370
         DC    X'0F111010003004'  rr, interruptible, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LPR  '       Load Positive
         DC    X'10001010001000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LNR  '       Load Negative
         DC    X'11001010001000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LTR  '       Load and Test
         DC    X'12001010001000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LCR  '       Load Compliment
         DC    X'13001010001000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'NR   '       AND
         DC    X'14001010001000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CLR  '       Compare Logical
         DC    X'15001010001000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'OR   '       Or
         DC    X'16001010001000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'XR   '       eXclusive or
         DC    X'17001010001000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LR   '       Load
         DC    X'18001010000000'  rr
         DC    2F'0'              instruction use counters
         DC    C'CR   '       Compare
         DC    X'19001010001000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'AR   '       Add
         DC    X'1A001010001000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SR   '       Subtract
         DC    X'1B001010001000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MR   '       Multiply
         DC    X'1C101010000004'  rr
         DC    2F'0'              instruction use counters
         DC    C'DR   '       Divide
         DC    X'1D101010000004'  rr
         DC    2F'0'              instruction use counters
         DC    C'ALR  '       Add Logical
         DC    X'1E001010001000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SLR  '       Subtract Logical
         DC    X'1F001010001000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LPDR '       Load Positive Lomg
         DC    X'20991210021004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LNDR '       Load Negative Long
         DC    X'21991210021004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LTDR '       Load and Test Long
         DC    X'22991210021004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LCDR '       Load Compliment Long
         DC    X'23991210021004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'HDR  '       Halve Long
         DC    X'24991210020004'  rr
         DC    2F'0'              instruction use counters
         DC    C'LRDR '       Load Rounded Extended to Long
         DC    X'259B1210020004'  rr, new with 370
         DC    2F'0'              instruction use counters
         DC    C'MXR  '       Multiply Extended
         DC    X'26BB1210000004'  rr, new with 370
         DC    2F'0'              instruction use counters
         DC    C'MXDR '       Multiply Long to Extended
         DC    X'27B91210000004'  rr, new with 370
         DC    2F'0'              instruction use counters
         DC    C'LDR  '       Load Long
         DC    X'28991210020004'  rr
         DC    2F'0'              instruction use counters
         DC    C'CDR  '       Compare Long (c)
         DC    X'29991210021004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'ADR  '       Add Normalised Long (c)
         DC    X'2A991210021004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SDR  '       Subtract Normalised Long (c)
         DC    X'2B991210021004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MDR  '       Multiply Long
         DC    X'2C991210020004' rr
         DC    2F'0'              instruction use counters
         DC    C'DDR  '       Divide Long
         DC    X'2D991210020004'  rr
         DC    2F'0'              instruction use counters
         DC    C'AWR  '       Add Unnormalised Long (c)
         DC    X'2E991210021004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SWR  '       Subtract Unnormalised Long (c)
         DC    X'2F991210021004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LPER '       Load Positive Short (c)
         DC    X'30991110011004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LNER '       Load Negative Short (c)
         DC    X'31991110011004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LTER '       Load and Test Short (c)
         DC    X'32991110011004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LCER '       Load Compliment Short (c)
         DC    X'33991110011004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'HER  '       Halve Short
         DC    X'34991110010004'  rr
         DC    2F'0'              instruction use counters
         DC    C'LRER '       Load Rounded Long to Short
         DC    X'35991110010004'  rr, new with 370
         DC    2F'0'              instruction use counters
         DC    C'AXR  '       Add Normalized Extended (c)
         DC    X'36BB1210021004'  rr, new with 370, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SXR  '       Subtract Normalized, Extended (c)
         DC    X'37BB1210021004'  rr, new with 370, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LER  '       Load Short
         DC    X'38991110010004'  rr
         DC    2F'0'              instruction use counters
         DC    C'CER  '       Compare Short (c)
         DC    X'39991110011004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'AER  '       Add Normalised Short (c)
         DC    X'3A991110011004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SER  '       Subtract Normalised Short (c)
         DC    X'3B991110011004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MER  '       Multiply Short to Long
         DC    X'3C991110010004'  rr
         DC    2F'0'              instruction use counters
         DC    C'DER  '       Divide Short
         DC    X'3D991110010004'  rr
         DC    2F'0'              instruction use counters
         DC    C'AUR  '       Add Unnormalised Short (c)
         DC    X'3E991110011004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SUR  '       Subtract Unnormalised Short (c)
         DC    X'3F991110011004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STH  '       Store Halfword
         DC    X'40002120010000'  rx
         DC    2F'0'              instruction use counters
         DC    C'LA   '       Load Address
         DC    X'41002020000000'  rx
         DC    2F'0'              instruction use counters
         DC    C'STC  '       Store Character
         DC    X'42002020000000'  rx
         DC    2F'0'              instruction use counters
         DC    C'IC   '       Insert Character
         DC    X'43002020000000'  rx
         DC    2F'0'              instruction use counters
         DC    C'EX   '       Execute
         DC    X'44002F20FE0400'  rx, term
         DC    2F'0'              instruction use counters
         DC    C'BAL  '       Bramch And Link
         DC    X'45002F20FF0400'  rx, term
         DC    2F'0'              instruction use counters
         DC    C'BCT  '       Branch on Count
         DC    X'46002F20FF0400'  rx, term
         DC    2F'0'              instruction use counters
         DC    C'BC   '       Branch on Condition
         DC    X'47002F20FF0400'  rx, term
         DC    2F'0'              instruction use counters
         DC    C'LH   '       Load Halfword
         DC    X'48002120010000'  rx
         DC    2F'0'              instruction use counters
         DC    C'CH   '       Compare Halfword
         DC    X'49002120011000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'AH   '       Add Halfword
         DC    X'4A002120011000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SH   '       Subtract Halfword
         DC    X'4B002120011000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MH   '       Multiply Halfword
         DC    X'4C002120010000'  rx
         DC    2F'0'              instruction use counters
         DC    C'BAS  '       Branch and Save
         DC    X'4D002F20FF0400'  rx, term, 370 BS or XA instruction
         DC    2F'0'              instruction use counters
         DC    C'CVD  '       Convert to Decimal
         DC    X'4E002320030000'  rx
         DC    2F'0'              instruction use counters
         DC    C'CVB  '       Convert to Binary
         DC    X'4F002320030000'  rx
         DC    2F'0'              instruction use counters
         DC    C'ST   '       Store
         DC    X'50002620060000'  rx
         DC    2F'0'              instruction use counters
         DC    C'LAE  '                ESA instruction
         DC    X'51002020000000'  rx
         DC    2F'0'              instruction use counters
         DC    C'N    '       And
         DC    X'54002620061000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CL   '       Compare Logical
         DC    X'55002620061000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'O    '       OR
         DC    X'56002620061000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'X    '       Exclusive Or
         DC    X'57002620061000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'L    '       Load
         DC    X'58002220020000'  rx
         DC    2F'0'              instruction use counters
         DC    C'C    '       Compare
         DC    X'59002220021000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'A    '       Add
         DC    X'5A002220021000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'S    '       Subtract
         DC    X'5B002220021000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'M    '       Multiply
         DC    X'5C102220020004'  rx
         DC    2F'0'              instruction use counters
         DC    C'D    '       Divide
         DC    X'5D102220020004'  rx
         DC    2F'0'              instruction use counters
         DC    C'AL   '       Add
         DC    X'5E002720071000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SL   '       Subtract Logical
         DC    X'5F002720071000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STD  '       Store Long
         DC    X'60902820080004'  rx
         DC    2F'0'              instruction use counters
         DC    C'MXD  '       Multiply Long to Extended
         DC    X'67B02820080004'  rx, new with 370
         DC    2F'0'              instruction use counters
         DC    C'LD   '       Load Long
         DC    X'68902520050004'  rx
         DC    2F'0'              instruction use counters
         DC    C'CD   '       Compare Long (c)
         DC    X'69902520051004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'AD   '       Add Normalised Long (c)
         DC    X'6A902520051004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SD   '       Subtract Normalised Long (c)
         DC    X'6B902520051004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MD   '       Multiply Long
         DC    X'6C902520050004'  rx
         DC    2F'0'              instruction use counters
         DC    C'DD   '       Divide Long
         DC    X'6D902520050004'  rx
         DC    2F'0'              instruction use counters
         DC    C'AW   '       Add Unnormalised Long (c)
         DC    X'6E902820081004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SW   '       Subtract Unnormalised Long (c)
         DC    X'6F902820081004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STE  '       Store Short
         DC    X'70902420040004'  rx
         DC    2F'0'              instruction use counters
         DC    C'MS   '       Multiply Single - 390
         DC    X'71002220020000'  rx
         DC    2F'0'              instruction use counters
         DC    C'LE   '       Load Short
         DC    X'78902420040004'  rx
         DC    2F'0'              instruction use counters
         DC    C'CE   '       Compare Short (c)
         DC    X'79902420041004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'AE   '       Add Normalized Short (c)
         DC    X'7A902420041004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SE   '       Subtract Normalized Short (c)
         DC    X'7B902420041004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'ME   '       Multiply Short to Long
         DC    X'7C902420040004'  rx
         DC    2F'0'              instruction use counters
         DC    C'DE   '       Divide Short
         DC    X'7D902420040004'  rx
         DC    2F'0'              instruction use counters
         DC    C'AU   '       Add Unnormalized Short (c)
         DC    X'7E902420041004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SU   '       Subtract Unnormalized, Short (c)
         DC    X'7F902420041004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SSM  '       Set System Mask (p)
         DC    X'80004141010200'  s, privileged
         DC    2F'0'              instruction use counters
         DC    C'LPSW '       Load PSW (n,p)
         DC    X'82004F41031600'  s, term, sets cc, privileged
         DC    2F'0'              instruction use counters
*        DC    C'diag '      diagnose - no official opcode
*        DC    X'83000000000200'
*        DC    C'WRD  '       Write Direct (p)
*        DC    X'84004040000300'  si, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'BRXH '       Branch Relative on indeX High
*        DC    X'8400????FF04??'  rsi, term
*        DC    2F'0'              instruction use counters
*        DC    C'RDD  '       Read Direct (p)
*        DC    X'85004040000300'  si, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'BRXLE'       Branch Relative on indeX Low or Equal
*        DC    X'8500????FF04??'  rsi, term
*        DC    2F'0'              instruction use counters
         DC    C'BXH  '       Branch Index High
         DC    X'86003F30FF0400'  rs, term
         DC    2F'0'              instruction use counters
         DC    C'BXLE '       Br. Index Low/Equal
         DC    X'87003F30FF0400'  rs, term
         DC    2F'0'              instruction use counters
         DC    C'SRL  '       Shift Right Single Logical
         DC    X'88003131000000'  rs
         DC    2F'0'              instruction use counters
         DC    C'SLL  '       Shift Left Single Logical
         DC    X'89003131000000'  rs
         DC    2F'0'              instruction use counters
         DC    C'SRA  '       Shift Right Single (c)
         DC    X'8A003131001000'  rs, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SLA  '       Shift Left Single (c)
         DC    X'8B003131001000'  rs, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SRDL '       Shift Right Double Logical
         DC    X'8C103131000004'  rs
         DC    2F'0'              instruction use counters
         DC    C'SLDL '       Shift Left Double Logical
         DC    X'8D103131000004'  rs
         DC    2F'0'              instruction use counters
         DC    C'SRDA '       Shift Right Double (c)
         DC    X'8E103131001004'  rs, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SLDA '       Shift Left Double (c)
         DC    X'8F103131001004'  rs, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STM  '       Store Multiple
         DC    X'90003030060000'  rs
         DC    2F'0'              instruction use counters
         DC    C'TM   '       Test under Mask (c)
         DC    X'91004040001000'  si, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MVI  '       Move Immediate
         DC    X'92004040000000'  si
         DC    2F'0'              instruction use counters
         DC    C'TS   '       Test and Set (c)   new with 370
         DC    X'93004041001000'  s, sets cc
         DC    2F'0'              instruction use counters
         DC    C'NI   '       AND Immediate (c)
         DC    X'94004040001000'  si, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CLI  '       Compare Logical Immediate
         DC    X'95004040001000'  si, sets cc
         DC    2F'0'              instruction use counters
         DC    C'OI   '       OR Immediate (c)
         DC    X'96004040001000'  si, sets cc
         DC    2F'0'              instruction use counters
         DC    C'XI   '       Exclusive OR Immediate (c)
         DC    X'97004040001000'  si, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LM   '       Load Multiple
         DC    X'98003030060000'  rs
         DC    2F'0'              instruction use counters
         DC    C'TRACE'
         DC    X'99003030000200' rs, new with XA, privileged
         DC    2F'0'              instruction use counters
         DC    C'LAM  '          rs,  ESA instruction
         DC    X'9A003030000000'
         DC    2F'0'              instruction use counters
         DC    C'STAM '          rs,  ESA instruction
         DC    X'9B003030000000'
         DC    2F'0'              instruction use counters
*        DC    C'SIO  '       Start I/O (c,p)
*        DC    X'9C004141000B00'  s, 2 byte non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'SIOF '       Start I/O fast (c,p) 370 FR
*        DC    X'9C014141000B00'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'RIO  '       Resume I/O (c,p) 370 SR
*        DC    X'9C024141000B00'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'TIO  '       Test I/O (c,p)
*        DC    X'9D004141000B00'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'CLRIO'       Resume I/O (c,p) 370
*        DC    X'9D014141000B00'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'HIO  '       Halt I/O (c,p)
*        DC    X'9E004141000300'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'HDV  '       Halt Device (c,p) 370 HD
*        DC    X'9E014141000B00'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'TCH  '       Test Channel (c,p)
*        DC    X'9F004141000300'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'CLRCH'       Clear Channel (c,p) 370 RE
*        DC    X'9F014141000B00'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'Vxxx '     vector opcodes
*        DC    X'A400??'
*        DC    C'Vxxx '     vector opcodes
*        DC    X'A500??'
*        DC    C'Vxxx '     vector opcodes
*        DC    X'A600??'
*        DC    2F'0'              instruction use counters
*        DC    C'?????'     Immediate and Relative instructions
*        DC    X'A700????00????'
*        DC    2F'0'              instruction use counters
         DC    C'MVCLE'      MoVe Characters Long Extended
         DC    X'A8113030001004' rs, new with 390, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CLCLE'      Compare Logical Characters Long Ext.
         DC    X'A9113030001004' rs, new with 390, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STNSM'      Store Then AND Sys. Mask (p)
         DC    X'AC004040000200' si, new with 370 TR, privileged
         DC    2F'0'              instruction use counters
         DC    C'STOSM'      Store Then OR Sys. Mask (p)
         DC    X'ADB84040000204' si, new with 370 TR, privileged
         DC    2F'0'              instruction use counters
         DC    C'SIGP '       Signal Processor (c,p)
         DC    X'AE003030001200'  rs, new with 370 MP, priv, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MC   '       Monitor Call - new with 370
         DC    X'AFF04F40000404'  si, term
         DC    2F'0'              instruction use counters
         DC    C'LRA  '       Load Real Address (c,p)
         DC    X'B1002020001200'  rx, new with 370 TR, priv, sets cc
         DC    2F'0'              instruction use counters
*        DC    C'STIDC'       Store Channel ID (p) - 370
*        DC    X'B2034141030B00'   s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
         DC    C'STIDP'       Store CPU ID (p) - 370
         DC    X'B2024141030A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'SCK  '       Set Clock (c,p) - 370
         DC    X'B2044141031A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STCK '       Store Clock (c) - 370
         DC    X'B2054141031800'   rx, 2 byte, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SCKC '       Set Clock Comparator (p) - 370 CK
         DC    X'B2064141030A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'STCKC'       Store Clock Comparator (p) - 370 CK
         DC    X'B2074141030A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'SPT  '       Set CPU Timer (p) - 370 CK
         DC    X'B2084141030A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'STPT '       Store CPU Timer (p) - 370 CK
         DC    X'B2094141030A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'SPKA '       Set PSW Key from Address (q) - 370 PK
         DC    X'B20A4141000900'   s, 2 byte, semi-privileged
         DC    2F'0'              instruction use counters
         DC    C'IPK  '       Insert PSW Key (q) - 370 PK
         DC    X'B20B4242000900'   s, 2 byte, semi-privileged
         DC    2F'0'              instruction use counters
         DC    C'PTLB '       Purge TLB (p) - 370 TR
         DC    X'B20D4242000A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'SPX  '      Set Prefix (p) - 370 MP
         DC    X'B2104141060A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'STPX '      Store Prefix (p) - 370 MP
         DC    X'B2114141060A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'STAP '      Store CPU Address (p) - 370 MP
         DC    X'B2124141010A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
*        DC    C'SIE  '      Start Interpretive Execution (p) - 370
*        DC    X'B214???8000A00'   s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
         DC    C'PC   '      Program Call (q) - 370 DU
         DC    X'B2184F41FF0D00'   s, 2 byte, term, semi-priv
         DC    2F'0'              instruction use counters
         DC    C'SAC  '      Set Address Space Control (q) - 370 DU
         DC    X'B2194141000900'   s, 2 byte, semi-privileged
         DC    2F'0'              instruction use counters
         DC    C'CFC  '      Compare and Form Codeword - XA
         DC    X'B21A4141003800'   s, 2 byte, interruptible, sets cc
         DC    2F'0'              instruction use counters
         DC    C'IPTE '      Invalidate Page Table Entry (p) - 370 EF
         DC    X'B2211010000A00'   rre, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'IPM  '      Insert Program Mask - XA
         DC    X'B2221311000800'   rre, 2 byte, 1 reg
         DC    2F'0'              instruction use counters
         DC    C'IVSK '      Insert Virtual Storage Key (q) - 370 DU
         DC    X'B2231010000900'   rre, 2 byte, semi-privileged
         DC    2F'0'              instruction use counters
         DC    C'IAC  '      Insert Address Space Control (q,c), 370 DU
         DC    X'B2241311001900' rre, 2 byte, 1 reg, semi-priv, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SSAR '      Set Secondary ASN (q) - 370 DU
         DC    X'B2251311000900'   rre, 2 byte, 1 reg, semi-priv
         DC    2F'0'              instruction use counters
         DC    C'EPAR '      Extract Primary ASN (q) - 370 DU
         DC    X'B2261311000900'   rre, 2 byte, 1 reg, semi-priv
         DC    2F'0'              instruction use counters
         DC    C'ESAR '      Extract Secondary ASN (q) - 370 DU
         DC    X'B2271311000900'   rre, 2 byte, 1 reg, semi-priv
         DC    2F'0'              instruction use counters
         DC    C'PT   '      Program Transfer (q) - 370 DU
         DC    X'B2281010000D00'   rre, 2 byte, term, semi-priv
         DC    2F'0'              instruction use counters
         DC    C'ISKE '      Insert Storage Key Extended (p) - 370 EK
         DC    X'B2291010000A00'   rre, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'RRBE '      Reset Reference Bit Extended (p,c), 370 EK
         DC    X'B22A1010001A00'   rre, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SSKE '      Set Storage Key Extended (p) - 370 EK
         DC    X'B22B1010000A00'   rre, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'TB   '      Test Block (p,c) - 370 TB
         DC    X'B22C1013003A00'   rre, 2 byte, int, priv, sets cc
         DC    2F'0'              instruction use counters
         DC    C'DXR  '      Divide (Extended) - XA
         DC    X'B22D101300080C'   rre, 2 byte
         DC    2F'0'              instruction use counters
*        DC    C'?????'      Move to expanded storage - XA
*        DC    X'B22E0000000A00'  no official mnemonic
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Move from expanded storage - XA
*        DC    X'B22F0000000A00'  no official mnemonic
*        DC    2F'0'              instruction use counters
         DC    C'CSCH '      Clear Subchannel (p,c) - XA
         DC    X'B2304242000A00'   s, 2 byte
         DC    2F'0'              instruction use counters
         DC    C'HSCH '      Halt Subchannel (p,c) - XA
         DC    X'B2314242001A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MSCH '      Modify Subchannel (p,c) - XA
         DC    X'B2324141061A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SSCH '      Start Subchannel (p,c) - XA
         DC    X'B2334141061A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STSCH'      Store Subchannel (p,c) - XA
         DC    X'B2344141061A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'TSCH '      Test Subchannel (p,c) - XA
         DC    X'B2354141061A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'TPI  '      Test Pending Interruption (p,c) - XA
         DC    X'B2364141061A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SAL  '      Set Address Limit (p) - XA
         DC    X'B2374242000A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'RSCH '      Resume Subchannel (p,c) - XA
         DC    X'B2384242001A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STCRW'      Store Channel Report Word (p,c) - XA
         DC    X'B2394141061A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STCPS'      Store Channel Path Status (p) - XA
         DC    X'B23A4141030A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'RCHP '      Reset Channel Path (p,c) - XA
         DC    X'B23B4242001A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SCHM '      Set Channel Monitor (p) - XA
         DC    X'B23C4242000A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'BAKR '      Branch And Stack - ESA
         DC    X'B2401010000C00'   rre, 2 byte, term
         DC    2F'0'              instruction use counters
         DC    C'CKSM '      Checksum - 390
         DC    X'B241101000181C'   rre, 2 byte, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SQDR '      Square Root Double - 390
         DC    X'B2441010000818'   rre, 2 byte
         DC    2F'0'              instruction use counters
         DC    C'SQER '      Square Root Short - 390
         DC    X'B2451010000818'   rre, 2 byte
         DC    2F'0'              instruction use counters
         DC    C'STURA'      Store Using Real Address - ESA
         DC    X'B2461010000A00'   rre, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'MSTA '      Modify Stacked State - ESA
         DC    X'B2471111000800'   rre, 2 byte
         DC    2F'0'              instruction use counters
         DC    C'PALB '      Purge ALB (p) - ESA
         DC    X'B2481010000A00'   rre, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'EREG '      Extract Stacked registers - ESA
         DC    X'B2491010000800'   rre, 2 byte
         DC    2F'0'              instruction use counters
         DC    C'ESTA '      Extract Stacked State - ESA
         DC    X'B24A1010001800'   rre, 2 byte, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LURA '      Load Using Real Address - ESA
         DC    X'B24B1010000A00'   rre, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'TAR  '      Test Access - ESA
         DC    X'B24C1010001800'   rre, 2 byte, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CPYA '      Copy Access - ESA
         DC    X'B24D1010000800'   rre, 2 byte
         DC    2F'0'              instruction use counters
         DC    C'SAR  '      Set Access - ESA
         DC    X'B24E1010000800'   rre, 2 byte
         DC    2F'0'              instruction use counters
         DC    C'EAR  '      Extract Access - ESA
         DC    X'B24F1010000800'   rre, 2 byte
         DC    2F'0'              instruction use counters
         DC    C'MSR  '      Multiply Single - 390
         DC    X'B2521010000800'   rre, 2 byte
         DC    2F'0'              instruction use counters
         DC    C'MVPG '      Move Page - ESA
         DC    X'B2541010000800'   rre, 2 byte
         DC    2F'0'              instruction use counters
         DC    C'MVST '      MoVe String - 390
         DC    X'B2551010001800'   rre, 2 byte, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CUSE '      Compare Until String Equal - ESA CU
         DC    X'B2571010001814'   rre, 2 byte, sets cc
         DC    2F'0'              instruction use counters
         DC    C'BSG  '      Branch in Subspace Group - 390
         DC    X'B2581F10000C00'   rre, 2 byte, term
         DC    2F'0'              instruction use counters
         DC    C'BSA  '      Branch and Stack Authority - 390
         DC    X'B25A1F10000D00'   rre, 2 byte, term, semi-priv
         DC    2F'0'              instruction use counters
         DC    C'CLST '      Compare Logical String - 390
         DC    X'B25D1010001800'   rre, 2 byte, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SRST '      Search String - 390
         DC    X'B25E1010001800'   rre, 2 byte, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CMPSC'      Compression Services
         DC    X'B2631010001814'   rre, 2 byte, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SACF '      Set Address space Control Fast - 390
         DC    X'B2794141000900'   s, 2 byte, semi-privileged
         DC    2F'0'              instruction use counters
*        DC    C'?????'       Amdahl RMI I/F - no mnemonic
*        DC    X'B2BE0000000200'
*        DC    2F'0'              instruction use counters
         DC    C'STCTL'       Store Control (p)   new 5 byte opcode !
         DC    X'B6003030600200'  rs, new with 370 ?, privileged
         DC    2F'0'              instruction use counters
         DC    C'LCTL '       Load Control (p)    new with 370 ?
         DC    X'B7003030600200'  rs, privileged
         DC    2F'0'              instruction use counters
         DC    C'CS   '       Compare & Swap (c)  new with 370 SW
         DC    X'BA003030601000'  rs, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CDS  '       Compare Double & Swap (c) new with 370 SW
         DC    X'BB113030301004'  rs, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CLM  '       Compare Logical/Mask (c)   new with 370
         DC    X'BD003030001000'  rs 2, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STCM '       Store Characters under Mask  new with 370
         DC    X'BE003030000000'  rs 2
         DC    2F'0'              instruction use counters
         DC    C'ICM  '       Insert Chars. Under Mask (c) new with 370
         DC    X'BF003030001000'  rs 2, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MVN  '      Move Numerics
         DC    X'D1005050000000' ss 1
         DC    2F'0'              instruction use counters
         DC    C'MVC  '      Move Characters
         DC    X'D2005050000000' ss 1
         DC    2F'0'              instruction use counters
         DC    C'MVZ  '      Move Zones
         DC    X'D3005050000000' ss 1
         DC    2F'0'              instruction use counters
         DC    C'NC   '      AND (c)
         DC    X'D4005050001000' ss 1, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CLC  '      Compare Logical (c)
         DC    X'D5005050001000' ss 1, sets cc
         DC    2F'0'              instruction use counters
         DC    C'OC   '      OR Character (c)
         DC    X'D6005050001000' ss 1, sets cc
         DC    2F'0'              instruction use counters
         DC    C'XC   '      Exclusive OR Character (c)
         DC    X'D7005050001000' ss 1, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MVCK '      Move with Key (c,q)      new with 370 DU
         DC    X'D9005252001100' ss 3, semi-privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MVCP '      Move to Primary (c,q)    new with 370 DU
         DC    X'DA005252001100' ss 3, semi-privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MVCS '      Move to Secondary (c,q)  new with 370 DU
         DC    X'DB005252001100' ss 3, semi-privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'TR   '      Translate (c)
         DC    X'DC005050000000' ss 1
         DC    2F'0'              instruction use counters
         DC    C'TRT  '      Translate and Test (c)
         DC    X'DD005050001000' ss 1, sets cc
         DC    2F'0'              instruction use counters
         DC    C'ED   '      Edit (c)
         DC    X'DE005050001000' ss 1, sets cc
         DC    2F'0'              instruction use counters
         DC    C'EDMK '      Edit and Mark (c)
         DC    X'DF005050001000' ss 1, sets cc
         DC    2F'0'              instruction use counters
*        DC    C'Vxxx '      vector opcodes
*        DC    X'E400??'
*        DC    2F'0'              instruction use counters
         DC    C'LASP '      Load Addr. Space Parm. 370 DU
         DC    X'E5005353031A00' sse, 2 byte (c,p), privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'TPROT'      Test Protection (c,p) 370 EF
         DC    X'E5015353001A00' sse, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MVCSK'         sse, 2 byte, ESA, semi-privileged
         DC    X'E50E5353000900'
         DC    2F'0'              instruction use counters
         DC    C'MVCDK'         sse, 2 byte, ESA, semi-privileged
         DC    X'E50F5353000900'
         DC    2F'0'              instruction use counters
         DC    C'MVCIN'      Move Inverse   optional with 370 or later
         DC    X'E8005050000000' ss 1
         DC    2F'0'              instruction use counters
         DC    C'PLO  '      Perform Locked Operation - 390
         DC    X'EE003232001000' rs 3, R1,D2(B2),R3,D4(B4), sets cc
         DC    2F'0'              instruction use counters
         DC    C'SRP  '      Shift and Round Decimal (c)
         DC    X'F0005454001010' ss 4, new with 370, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MVO  '      Move with Offset
         DC    X'F1005151000000' ss 2
         DC    2F'0'              instruction use counters
         DC    C'PACK '      Pack
         DC    X'F2005151000000' ss 2
         DC    2F'0'              instruction use counters
         DC    C'UNPK '      Unpack
         DC    X'F3005151000000' ss 2
         DC    2F'0'              instruction use counters
         DC    C'ZAP  '      Zero and Add Decimal (c)
         DC    X'F8005151001000' ss 2, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CP   '      Compare Decimal (c)
         DC    X'F9005151001000' ss 2, sets cc
         DC    2F'0'              instruction use counters
         DC    C'AP   '      Add Decimal (c)
         DC    X'FA005151001000' ss 2, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SP   '      Subtract Decimal (c)
         DC    X'FB005151001000' ss 2, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MP   '      Multiply Decimal
         DC    X'FC005151000008' ss 2
         DC    2F'0'              instruction use counters
* last entry in table
MENLAST  DC    C'DP   '      Divide Decimal    D1(L1,B1),D2(L2,B2)
         DC    X'FD005151000008'   ss 2
         DC    2F'0'              instruction use counters
MEMTABLN EQU   *-MEN             length of opcode table
         DC    C' '              flag to indicate end of table
         END
