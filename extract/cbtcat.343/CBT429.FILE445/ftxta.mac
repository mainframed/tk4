FTXA     TITLE '*** F T X T A ***  (REVISED && STANDARDIZED FTXT)  '
***********************************************************************
*                                                                     *
* called by PASS4 via FTXT                                            *
*                                                                     *
* parms @ r1:                                                         *
*   +0 - @ print area in PASS1                                        *
*   +4 - KEY4, flag?                                                  *
*   +8 - output instruction format (copy of AXNFMT)                   *
*   +9 - output operand format (copy of AXNOPER)                      *
*   +10 - output length of instruction/constant                       *
*   +12 - ROUT4, output @ decoding routine                            *
*   +16 - INST4, output 8 bytes TEXT of instruction/constant          *
*   +24 - output copy of AXNFLG1                                      *
*   +25 - output 3 byte instruction counter                           *
*   +28 - ?                                                           *
*   +32 - return to here                                              *
*                                                                     *
***********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
*  DSECT to map the opcode table at FTBL                              *
*                                                                     *
***********************************************************************
TBLD     DSECT
TBLFLG   DS    X               Flag byte, copy of AXNFLG
*  the high 4 bits are the instruction format as follows
*  the low 4 bits depend on the instruction format as follows
*BLFCON  EQU   0                 Constant
*BLFRR   EQU   1                 RR - R1,R1
*              11                   - F1,F2 (short)
*              12                   - F1,F2 (long)
*              13                   - R1
*              1F                 terminating instruction.
*BLFRX   EQU   2                 RX - R1,D2(X2,B2)
*              20      references byte or no memory access
*              21          "      Halfword
*              22          "      signed Fullword
*              23          "      Doubleword
*              24          "      short Float
*              26          "      Fullword
*              27          "      unsigned Fullword
*              28          "      long Float (unnormalised)
*              2F                 terminating instruction
*BLFRS   EQU   3                 RS - R1,R3,D2(B2)
*              31                   - R1,D2(B2)
*              3F                 terminating instruction
*BLFSI   EQU   4                 SI - D1(B1),I2
*              41                   - D1(B1)
*              4F                 terminating instruction
*BLFSS   EQU   5                 SS - 1 length, D1(L,B1),D2(B2)
*              51                SS - 2 lengths, D1(L1,B1),D2(L2,B2)
*BLADCON EQU   X'6E'             Address Constant
*BLDS    EQU   X'7E'             DS
*BLZOB   EQU   X'8E'             Zeroes Or Blanks
TBLADR   DS    XL3             address of this instruction
TBLID    DS    X               entry ID, 0 - 15
TBLDISP  DS    X               displacement into current TXT card
TBLOPLEN DS    H               Length of this instruction
TBLENTLN EQU   *-TBLD          Length of one entry.
*
FTXTA    CSECT
         ENTRY COFST              ref'ed by ARL
         ENTRY RFTXT              ref'ed by SPPR
         EXTRN ARL                csect
         EXTRN AXN                csect
         EXTRN CONST              csect
         EXTRN CRLD               csect
         EXTRN CXN                csect
         EXTRN NTXT               in TXT csect
         EXTRN PAB                in PASS1 csect
         EXTRN PR                 csect
         EXTRN RR                 csect
         EXTRN RS                 csect
         EXTRN RX                 csect
         EXTRN SI                 csect
         EXTRN SS                 csect
         EXTRN TXTS               in TXT csect
         EXTRN DS                 csect
         EXTRN ARLDS              in CRLD csect
         EXTRN CF                 in CRLD csect
         EXTRN TIME               csect
         STM   14,12,12(13)       **************
         BALR  12,0               *            *
         USING *,12               *  STANDARD  *
         ST    13,SAVE+4          *   S/360    *
         LR    11,13              *  LINKAGE   *
         LA    13,SAVE            *            *
         ST    13,8(11)           **************
         CLI   FPFLG,X'FF'        IS THIS FIRST PASS?
         BE    INTL               BRANCH IF YES
         CLI   PCFLG,X'FF'        IS PROCESS FLAG ON?
         BNE   LKAHD              BRANCH IF NO
         B     PROCS              else go to process routine
         TITLE '*** I N I T I A L I Z A T I O N ***  (LKAHD && PROCS)'
INTL     MVI   FPFLG,X'00'        TURN-OFF FIRST PASS FLAG
         XC    TOTA(4),TOTA
         L     GRC,HITBL          *********************
         LA    GRC,1(GRC)
         LA    GRB,FTBL+4         *                   *
         SR    GRA,GRA            * PLACE TABLE ENTRY *
         ST    GRA,0(GRB)         * I.D. NUMBERS IN   *
AGNA     LA    GRB,8(GRB)         * BYTE 4 OF EACH    *
         LA    GRA,256(GRA)       * TABLE ENTRY       *
         STH   GRA,0(GRB)         *                   *
         BCT   GRC,AGNA           *********************
         LA    TBL,FTBL           SET TABLE TO ENTRY ZERO
         MVI   0(TBL),X'0F'       TERMINAL CODE INTO BO
         L     GRA,ATBNT          get @ NTXT in TXT csect
         MVC   TNTC(4),0(GRA)     TOTAL NUMBER OF TXT CARDS
         L     TXB,TNTC           get number of TXT cards
         BCTR  TXB,0              subtract 1
         ST    TXB,TNT1           save it
         LA    TXB,4(GRA)         get @ first TXTB entry
         ST    TXB,CATXB          SET TXTB POINTER TO TXTB ADR
         L     GRA,ATXTS          SET TEXT POINTER TO
         ST    GRA,SATXS          FIRST BYTE OF TEXT
         MVC   1(3,TBL),0(TXB)    FIRST LOGICAL ADR TO B13
         BAL   14,ADCON           GET FIRST ADCON LOGICAL ADR
         MVC   NBLC+3(1),3(TXB)   NO. OF BYTES LEFT ON CARD
*        MVC   APRA(4),0(1)       PRINT AREA ADR FOR AXN
         TITLE '*** L O O K A H E A D *** '
LKAHD    LA    TBL,FTBL           SET TABLE POINTER TO ENTRY ZERO
         L     TXB,CATXB          get @ current TXTB entry
         MVI   PCFLG,X'FF'         RESET PROCESS FLAG
         MVC   9(3,TBL),1(TBL)    PLACE I.C. IN B13 OF ENTRY ONE
         MVI   13(TBL),X'00'      ZERO TEXT POINTER DISPLACEMENT
GOAGN    CLC   4(1,TBL),HITBL+3   HAS HIGHEST TABLE ENTRY BEEN REACHED?
         BNL   TERME              BRANCH IF YES
         CLI   TFL,X'FF'          LAST CARD ?
         BE    TERME              br. if yes
         CLI   4(TBL),X'0E'       entry 14 ?
         BNE   NCP                br. if not
         CLI   0(TBL),X'00'       constant ?
         BNE   NCP                br. if not
         TM    3(TBL),X'02'
         BO    NCP
         CLC   6(2,TBL),FOUR+2    = h'4' ?
         BE    TERME
NCP      LA    TBL,8(TBL)         SET POINTER TO NEXT ENTRY
         TM    3(TBL),X'01'       IS I.C. ON HW BOUNDARY?
         BZ    EVEN               BRANCH IF YES
         MVI   0(TBL),X'00'       CLASSIFY AS CONSTANT
         MVC   6(2,TBL),ONE1+2    OF LENGTH ONE
         B     CNST               GO TO CONSTANT ROUTINE
EVEN     SR    GRA,GRA            MOVE THE
         IC    GRA,5(TBL)         NEXT OP
         A     GRA,SATXS          CODE TO
         MVC   AOP1(4),0(GRA)     AXN AREA
         MVC   CC(1),1(GRA)
         TM    AOP1,X'BF'         IS OP CODE A ZERO OR A BLANK?
         BNZ   NZOB               BRANCH IF NO
         TM    3(TBL),X'02'       on a fullword boundary ?
         BO    NZOB               branch if not
         ST    GRA,AZBTS          SAVE TXTS POINTER
         CLI   AOP1,X'00'         IS OP CODE ZERO?
         BNE   NZERO              BRANCH IF NO
         CLC   0(8,GRA),ZEROS     IS TEXT EIGHT BYTES OF ZEROES?
         BNE   NZOB               BRANCH IF NO
         LA    GRB,ZEROS          ADR OF ZEROS
CZOBS    ST    GRB,ADRZB          SAVE TYPE ADR
         B     ZOBS               GO TO 'ZOBS'
NZERO    CLC   0(8,GRA),BLANK     IS TEXT EIGHT BYTES OF BLANKS?
         BNE   NZOB               BRANCH IF NO
         LA    GRB,BLANK          ADR OF BLANKS
         B     CZOBS              GO TO CALL 'ZOBS'
NZOB     BAL   14,CLAXN           CALL AXN VIA CAXN INTERFACE
         MVI   0(TBL),X'00'       assume constant
         CLC   0(4,GRA),BLANK
         BE    REDO
         MVC   0(1,TBL),AOP4      AXN CODE TO BO
REDO     MVC   6(2,TBL),TWO2+2    MAKE LENGTH CODE TWO
         TM    0(TBL),X'70'       TEST CLASSIFICATION
         BZ    CNST               BRANCH IF CONSTANT
         BM    INSTR              BRANCH IF INSTRUCTION
         ABEND 20,DUMP            DUMP, ILLEGAL AXN CODE
         TITLE '*** C O N S T A N T *** '
CNST     SR    GRA,GRA
         IC    GRA,5(TBL)         PUT NEW TEXT ADR DIS-
         AH    GRA,6(TBL)         PLACEMENT INTO B5 OF
         STC   GRA,13(TBL)        NEXT TABLE ENTRY
         C     GRA,NBLC           HAS TXT CARD BOUNDARY BEEN CROSSED?
         BH    BDS                yes -  check for 'DS'
         BL    NODSA              no - can't be a 'DS'
         CLC   NTCF(4),TNT1       all cards fetched ?
         BL    NODSA              br. if more cards to fetch
         MVI   TFL,X'FF'          set last card flag
         B     NODSA
BDS      BAL   14,DSCK            CALL 'DS' CHECK ROUTINE
         B     CNST
NODSA    L     GRA,0(TBL)         FORM
         AH    GRA,6(TBL)         NEXT
         ST    GRA,8(TBL)         I.C.
         CLC   9(3,TBL),ARLD+1    HAS RLD ENTRY BEEN REACHED?
         BH    FRLD               BRANCH IF YES
         CLI   4(TBL),X'01'        IS THIS THE FIRST TABLE POSITION
         BE    GOAGN              BRANCH IF YES
         LR    GRA,TBL            IS THE PRECEEDING
         S     GRA,EIGHT          CLASSIFICATION A
         CLI   0(GRA),X'00'       NON-TERM CONSTANT?
         BNE   IFBC               BRANCH IF NO
         TM    3(TBL),X'03'       IS I.C. ON FW BOUNDARY?
         BZ    GOAGN              BRANCH IF YES
         MVC   AOP1(4),0(GRA)      FETCH POTENTIAL OP CODE
         BAL   14,CLAXN            DETERMINE IF OP CODE
         LA    TBL,8(TBL)          UPDATE TABLE POINTER
         CLI   AOP4,X'00'         IS IT AN INSTRUCTION ?
         BNE   GOAGN               BRANCH IF IT IS
         LR    TBL,GRA            MOVE TABLE POINTER BACK ONE ENTRY
         LH    GRA,6(TBL)         UPDATE LENGTH
         LA    GRA,2(GRA)         BY TWO FOR
         STH   GRA,6(TBL)         CONSTANT
         SR    GRA,GRA             ZERO REGISTER
         IC    GRA,5(TBL)          INSERT DISPLACEMENT
         AH    GRA,6(TBL)          ADD INSTRUCTION LENGTH
         STC   GRA,13(TBL)         STORE DISPL IN NEXT TABLE ENTRY
         L     GRA,8(TBL)          LOAD IC
         LA    GRA,2(GRA)          UPDATE IC
         ST    GRA,8(TBL)          SAVE CALC IC
         B     GOAGN
         TITLE '*** I N S T R U C T I O N *** '
INSTR    CLI   4(TBL),X'08'       eighth entry ?
         BL    INSTRS             branch if less
         LR    GRA,TBL            get @ previous
         S     GRA,EIGHT           table entry
         CLI   4(TBL),X'01'       on the 2nd entry ?
         BE    INSTRS             branch if yes
         CLI   0(GRA),X'00'       was prev entry a constant ?
         BNE   INSTRS             branch if not
         TM    3(TBL),X'02'       are we on a fullword boundary ?
         BZ    LRG                branch if yes
         S     GRA,EIGHT          subtract 8
LRG      LR    TBL,GRA            go back to prev entry or before
         B     TERME
INSTRS   LH    GRA,6(TBL)         *********************
         TM    AOP1,X'C0'         *                   *
         BZ    ILEN2              * FIND INSTR LENGTH *
         BM    ILEN4              * AND PLACE IN B67  *
         LA    GRA,2(GRA)         * OF CURRENT ENTRY  *
ILEN4    LA    GRA,2(GRA)         *                   *
         STH   GRA,6(TBL)         *********************
ILEN2    L     GRB,0(TBL)         FORM
         AR    GRB,GRA            NEXT
         ST    GRB,8(TBL)         I.C.
         CLC   9(3,TBL),ARLD+1    HAS RLD ENTRY BEEN REACHED?
         BH    FRLD               BRANCH IF YES
         AH    GRA,4(TBL)         PLACE NEW TEXT ADR DISPLACEMENT
         STC   GRA,13(TBL)        INTO B5 OF NEXT TABLE ENTRY
INSTL    CLC   13(1,TBL),NBLC+3   HAS TXT CARD BOUNDARY BEEN CROSSED
         BH    BDSK               yes, call 'DS' check routine
         BL    NODSB
         CLC   NTCF(4),TNT1       all cards fetched ?
         BL    NODSB              br. if more cards to fetch
         MVI   TFL,X'FF'          set last card flag
         B     NODSB
BDSK     BAL   14,DSCK            CALL 'DS' CHECK ROUTINE
         B     INSTL
NODSB    TM    0(TBL),X'0F'       IS THIS A TERMINAL INSTRUCTION
         BC    12,GOAGN           BRANCH IF NO
         LR    GRA,TBL            IS THE PRECEEDING
         CLI   AOP1,X'45'           BAL instruction ?
         BNE   TS5                    Br if not
         CLI   CC,X'E0'             BAL 14, ?
         BE    TERM                   if so br
TS5      CLI   AOP1,X'05'           BALR instruction ?
         BNE   SGE                    Br if not
         S     GRA,EIGHT          get @ prev table entry
         TM    0(GRA),X'70'       prev entry an instruction ?
         BM    SGD                branch if yes
         MVI   0(TBL),X'10'       else flag non-term instruction
         B     GOAGN
SGE      S     GRA,EIGHT          CLASSIFICATION A
SGD      CLI   0(GRA),X'00'       NON-TERM CONSTANT
         BE    CREDO              BRANCH IF YES
         CLI   0(GRA),X'0E'       WAS PRECEEDING A TERMINAL CONSTANT?
         BNE   TERMT
CREDO    MVI   0(TBL),X'00'       CLASSIFY AS CONSTANT
         B     REDO               GO TO 'REDO'
TERMT    TM    AOP1,X'B0'
         BNZ   TERM
         MVC   TAOP(1),AOP1       copy instruction
         NI    TAOP,X'0F'         clear high 4 bits
         CLI   TAOP,X'06'
         BNE   BC
         TM    AOP1,X'40'
         BO    TERM
         NI    0(TBL),X'F0'
         B     GOAGN
BC       CLI   TAOP,X'07'
         BNE   TERM
         TM    CC,X'F0'
         BNZ   TERM
         NI    0(TBL),X'F0'
         B     GOAGN
         TITLE '** I N S T R     F O L L O W E D   B Y    C O N S T **'
IFBC     CLI   4(TBL),X'01'       *************************************
         BE    LAE
         S     TBL,EIGHT          subtract 8
AGNB     CLI   4(TBL),X'01'
         BE    LAE
         S     TBL,EIGHT          subtract 8
         TM    0(TBL),X'70'       * GO BACK IN TABLE UNTIL A CONSTANT *
         BNZ   AGNB               * CLASSIFICATION IS FOUND. CLASSIFY *
         LA    TBL,8(TBL)         * ENTRY AFTER IT AS A CONSTANT TOO. *
LAE      MVI   0(TBL),X'00'       *                                   *
         B     REDO               *************************************
         TITLE '*** R L D    F O U N D *** '
FRLD     CLI   4(TBL),X'01'       first entry ?
         BE    BADR               branch if yes
         S     TBL,EIGHT          get @ prev table entry
         CLI   0(TBL),X'00'       constant ?
         BNE   AGNB               branch if not
         LA    TBL,8(TBL)         back to this entry
BADR     L     GRA,ARLD           ADJUST LENGTH OF CURRENT
         SLL   GRA,8
         SRL   GRA,8
         MVC   CC(1),0(TBL)       save entry format
         MVI   0(TBL),X'00'       make this a constant
         S     GRA,0(TBL)         ENTRY TO MAKE NEXT ENTRY
         ST    GRA,FRA
         SR    GRA,GRA
         IC    GRA,5(TBL)
         S     GRA,NBLC           subtract number of bytes left on card
         LA    14,BRF
         A     GRA,FRA
         BP    DSCK               go to 'DS' check routine if so
BRF      L     GRA,FRA
         LTR   GRA,GRA
         BZ    EOA                 BRANCH IF ADCON
         STH   GRA,6(TBL)         START AT RLD ADR
         AH    GRA,4(TBL)         UPDATE TEXT ADR
         STC   GRA,13(TBL)        DISPLACEMENT
         CLI   CC,X'8E'
         BNE   NZR
         MVI   0(TBL),X'8E'
NZR      CLI   4(TBL),X'0F'       last entry ?
         BE    TERM               br if yes
         LA    TBL,8(TBL)         TABLE POINTER TO NEXT ENTRY
EOA      MVI   0(TBL),X'6E'        CLASSIFY AS ADCON
         MVC   TARLD(8),ARLD-4    copy CRLD output
         MVC   1(3,TBL),ARLD+1    ADCON LOGICAL ADR TO B13
         MVC   6(2,TBL),LRLD+2    ADCON LENGTH TO B67
         SR    GRA,GRA
         IC    GRA,5(TBL)         get TXT card displacement
         AH    GRA,6(TBL)         add entry length
         STC   GRA,13(TBL)        save next entries displacement
         BAL   14,ADCON           GET NEXT ADCON LOGICAL ADR
         CLC   13(1,TBL),NBLC+3   end of card reached ?
         BL    TERM               br if card not finished
         BH    ADDS               go to call DS check
         CLC   NTCF(4),TNT1       all cards fetched ?
         BL    ADDS               br. if more cards to fetch
         MVI   TFL,X'FF'          set last card flag
         B     TERM               go to constant termination
ADDS     BAL   14,DSCK            call 'DS' check routine
         B     TERM               GO TO CONSTANT TERMINATION
         TITLE '*** ''D S''    C H E C K ***  '
DSCK     L     GRA,NTCF           INCREMENT
         LA    GRA,1(GRA)         FETCHED CARDS
         ST    GRA,NTCF           COUNT BY ONE
         C     GRA,TNTC           IS THIS THE LAST CARD?
         BE    EFT                 BRANCH IF LAST CARD
         L     TXB,CATXB          get @ current TXTB entry
         MVC   GPDW+1(3),0(TXB)   ************************************
         L     GRA,GPDW           *                                  *
         SR    GRB,GRB            * COMPARE CURRENT TXTB ADR ENTRY + *
         IC    GRB,3(TXB)         * BYTE COUNT WITH NEXT TXTB ENTRY  *
         AR    GRA,GRB            *                                  *
         ST    GRA,GPDW           ************************************
         CLC   GPDW+1(3),5(TXB)   IS THERE A 'DS'?
         BL    DSFND              BRANCH IF YES
         BE    NODSF
         ABEND 30,DUMP            DUMP (ILLEGAL TXT OVERLAY)
NODSF    LA    TXB,5(TXB)         UPDATE TXTB POINTER
         ST    TXB,CATXB          save TXTB pointer
         SR    GRB,GRB
         IC    GRB,3(TXB)         UPDATE NO. OF BYTES LEFT
         A     GRB,NBLC           ON CARD BY AMOUNT OF NEW
         ST    GRB,NBLC           TXTB BYTE COUNT ENTRY
         C     GRB,HEXFF          more than 255 ?
         BHR   14                 return if higher
CLB      CLC   13(1,TBL),NBLC+3   off end of card ?
         BNL   DSCK               loop if not lower
         BR    14                 *** RETURN ***
EFT      MVI   TFL,X'FF'           SET LAST CARD FLAG
         B     DSFND
         TITLE '*** ''D S''    F O U N D ***  '
DSFND    LR    GRA,TBL            WAS PRECEEDING
         S     GRA,EIGHT          CLASSIFICATION
         TM    0(GRA),X'70'       A CONSTANT?
         BZ    CSD                br. if yes
         MVI   TFL,X'00'          clear last card flag
         L     GRB,NTCF           ) subtract 1
         BCTR  GRB,0              ) from number
         ST    GRB,NTCF           ) of TXT cards fetched
         B     AGNB
CSD      L     GRA,NBLC           get number of bytes left on card
         SR    GRB,GRB            * ADJUST LENGTH OF CURRENT CONSTANT *
         IC    GRB,5(TBL)         * SO THAT NEXT ENTRY I.C. IS THE    *
         SR    GRA,GRB            * START OF THE 'DS' AREA.           *
         BZ    NZ
         STH   GRA,6(TBL)         *************************************
         MVI   CC,X'00'
         CLI   0(TBL),X'6E'       adcon ?
         BE    NMZA               branch if yes
         CLI   0(TBL),X'8E'
         BNE   NMZ
NMZA     MVC   CC(1),0(TBL)
NMZ      MVI   0(TBL),X'00'       CLASSIFY CURRENT ENTRY AS CONSTANT
         A     GRA,0(TBL)         FORM NEXT
         ST    GRA,8(TBL)         I.C. ENTRY
         MVC   0(1,TBL),CC
         CLC   6(2,TBL),ZEROS     zero ?
         BNE   IUD                br if not
         ABEND 555,DUMP           else error
IUD      LA    TBL,8(TBL)
NZ       MVI   0(TBL),X'7E'       CLASSIFY AS 'DS'
         CLI   TFL,X'FF'          last card ?
         BNE   NZE                br. if not
         S     TBL,EIGHT          get @ previous table entry
         CLI   4(TBL),X'00'       constant ?
         BE    LASTC              branch if yes
         B     TERMS
NZE      L     TXB,CATXB
         LA    TXB,5(TXB)         UPDATE TXTB TABLE POINTER
         ST    TXB,CATXB
         L     GRA,GPDW           *****************************
         MVC   GPDW+1(3),0(TXB)   * GET 'DS' LENGTH AND PLACE *
         S     GRA,GPDW           * IN B67 OF CURRENT ENTRY   *
         LPR   GRA,GRA
         STH   GRA,6(TBL)         *****************************
         MVC   NBLC+3(1),3(TXB)   NEW BYTES LEFT COUNT
CADC     CLC   GPDW+1(3),ARLD+1
         BNH   TERMS
         BAL   14,ADCON           get next ADCON logical address
         B     CADC
         TITLE '*** Z E R O E S    O R    B L A N K S ***  '
***********************************************************************
*                                                                     *
*        AT ENTRY 'GRA' CONTAINS CURRENT TXTB POINTER & 'GRB' HAS     *
*        ADR OF 'ZEROS' OR 'BLANK' (WHICH EVER OP CODE CONTAINED)     *
*                                                                     *
***********************************************************************
ZOBS     LR    GRC,TBL            WAS PRECEEDING
         S     GRC,EIGHT          CLASSIFICATION
         CLI   4(TBL),X'01'       1st entry ?
         BE    ZADE               br if so
         TM    0(GRC),X'70'        A CONSTANT ?
         BNZ   IFBC               BRANCH IF NO
ZADE     MVC   ZAD+1(3),1(TBL)    copy TXT address
         MVI   0(TBL),X'00'       flag constant
         L     GRC,ZAD            ) calc
         LA    GRC,8(GRC)         ) current loc
         ST    GRC,ZAD            ) + 8
         CLC   ZAD+1(3),ARLD+1    RLD entry in next 8 bytes ?
         BH    FRLD               branch if yes
         MVI   0(TBL),X'8E'       CLASSIFY CURRENT ENTRY AS 'ZOB'
         SR    GRC,GRC            UPDATE
         IC    GRC,5(TBL)         BYTE COUNT
         A     GRC,EIGHT          BY EIGHT
         ST    GRA,TGRA           STORE r5 (uselessly)
         ST    GRB,TGRB           store r6
* loop to find the end of the zeroes or blanks.
AGNC     ST    GRA,TGRA           STORE r5 TEMPORARILY
         LR    GRB,GRC            ) calc
         A     GRB,EIGHT          ) current loc
         STC   GRB,13(TBL)        ) + 8
         CLC   ZAD+1(3),ARLD+1    RLD entry in next 8 bytes ?
         BH    FRLD               branch if yes
         L     GRA,ZAD
         LA    GRA,8(GRA)
         ST    GRA,ZAD
         ST    GRC,TGRC           save r7
         LA    14,BR               LOAD RETURN ADDRESS FROM DSFND
         C     GRB,NBLC           HAS CARD BOUNDARY BEEN CROSSED?
         BH    DSCK               BRANCH IF YES
BR       L     GRA,TGRA            RESTORE REGISTER 5
         LA    GRA,8(GRA)         UPDATE TXTS POINTER
         L     GRC,TGRC           reload r7
         LA    GRC,8(GRC)         UPDATE BYTE COUNTER
         C     GRC,HEXFF          HAS TXTS DISPLACEMENT EXCEEDED F'255'
         BH    ZBOUT              BRANCH IF YES
         L     GRB,TGRB           reload r6
         CLC   0(8,GRA),0(GRB)    IS NEXT EIGHT BYTES OF TEXT THE SAME?
         BE    AGNC               BRANCH BACK IF YES
ZBOUT    S     GRC,EIGHT          subtract 8
         S     GRA,EIGHT          subtract 8
         SR    GRB,GRB            CALC
         IC    GRB,5(TBL)         ZOB
         SR    GRC,GRB            LENGTH
         STH   GRC,6(TBL)         PLACE LENGTH INTO B67
         B     TERM
         TITLE '*** T E R M I N A T I O N ***  '
TERME    TM    0(TBL),X'70'       GO BACK IN TABLE UNTIL A
         B     TERM                CONSTANT CLASSIFICATION IS
         S     TBL,EIGHT          FOUND OR WHOLE TABLE HAS
         CLI   4(TBL),X'01'       BEEN SEARCHED.  ACCEPT UP
         BH    TERME              TO RESULTANT TABLE ENTRY.
         ABEND 70,DUMP            DUMP IF NO CONSTANT FOUND
TERM     SR    GRA,GRA            *********************************
         IC    GRA,5(TBL)         *                               *
         AH    GRA,6(TBL)         * DECREASE NO. OF BYTES LEFT ON *
         L     GRB,NBLC           * CARD BY NO. OF TXT BYTES USED *
         SR    GRB,GRA            *                               *
         ST    GRB,NBLC           *********************************
         BP    TERMS               BRANCH IF END OF CARD NOT FOUND
         BZ    TT                  end of card
         ABEND 11,DUMP             error - we overran the card
TT       L     GRA,NTCF            LOAD NO OF CARDS FOUND
         LA    GRA,1(GRA)          INCREMENT CARD COUNT
         S     GRA,TNTC            SUBTR TOTAL NUMBER OF CARDS
         BL    TERMS               HAS LAST CARD BEEN FOUND
         MVI   TFL,X'FF'           SET FLAG IF YES
TERMS    L     GRA,0(TBL)         PLACE
         AH    GRA,6(TBL)         NEXT I.C.
         ST    GRA,FTBL           INTO B13 OF ENTRY ZERO
         MVI   FTBL,X'0F'         RETAIN END
         NC    FTBL(1),0(TBL)     CLASSIFICATION INFO.
         CLI   0(TBL),X'00'       constant ?
         BE    ISE                branch if yes
         CLI   0(TBL),X'5F'       instruction ?
         BH    ISE                branch if not
         OI    FTBL,X'01'
ISE      MVC   TBLTE+3(1),4(TBL)
         ST    TXB,CATXB          SAVE CURRENT TXTB POINTER
         LA    TBL,FTBL+8         SET TABLE POINTER TO ENTRY
         ST    TBL,CATBL          ONE FOR PROCESS ROUTINE
         BAL   14,PROCS           go to process routine
         TITLE 'CALL TO AXN ROUTINE  (WITH PARAMETERS LISTED HERE) '
CLAXN    STM   14,7,12(13)        SAVE FTXTA REGS
         ST    13,AXNR13          SAVE POINTER TO SAVE AREA JUST USED
         L     14,AAXN            LIKE IRV
         CNOP  2,4
         BALR  14,14              CALL AXN
         DC    0F'0'              OP CODE BCD MNEMONIC & DESCRIPTION
AOP1     DC    XL2'0'             Input opcode
AOP2     DC    CL5' '             Mnemonic returned by AXN
AOP3     DC    XL2'0'             Output Opcode
AOP4     DC    X'0'               Output old format code
AOP5     DC    X'0'               Output Opcode format (as AXNFMT)
AOP6     DC    X'0'               Output operand format (as AXNOPER)
AXNOPC   DC    F'0'               OP CODE COUNTER ADR RETURNED HERE
AXNR13   DC    F'0'               SAVE AREA POINTER SAVED HERE
*
* REG 13 IS RESTORED TO ENTRY VALUE AT EXIT FROM AXN ROUTINE
*
         LM    14,7,12(13)        RESTORE FTXTA REGS
         BR    14                 *** RETURN ***
         TITLE '*** A D C O N ***  (GET LOGICAL ADR OF NEXT ADCON) '
ADCON    STM   14,12,12(13)       SAVE FTXTA REGS
         ST    13,LRLD+4          SAVE POINTER TO FTXTA SAVE AREA
         L     14,ACRLD           get @ CRLD csect
         CNOP  2,4
         BALR  14,14              CALL CRLD
         DC    F'0'
ARLD     DC    F'0'               LOGICAL ADR OF NEXT ADCON
LRLD     DC    F'0'               LENGTH OF ADCON
         DC    F'0'               SAVE AREA POINTER SAVED HERE
         CLI   LRLD,X'0F'         HAS LAST ADCON ALREADY BEEN FETCHED?
         BNE   NLAST              BRANCH IF NO
         MVC   ARLD+1(3),LRLD+1   SET LOGICAL ADR TO X'FFFFFF'
NLAST    LM    14,12,12(13)       RESTORE FTXTA REGS
         BR    14                 *** RETURN ***
         TITLE '*** P R O C E S S ***  '
PROCS    L     TXS,SATXS          LOAD STARTING TEXT POINTER
         L     TBL,CATBL          LOAD CURRENT TABLE ENTRY POINTER
         L     PAA,0(1)           LOAD PRINT AREA POINTER
         SR    GRA,GRA            ***********
         IC    GRA,0(TBL)         * BRANCH  *
         SRL   GRA,4              * TO SOME *
         SLL   GRA,2              * PROCESS *
         L     GRA,ALIST(GRA)     * ROUTINE *
         BR    GRA                ***********
* Process routine to handle an ADCON
PRLD     MVC   12(4,1),AARL       EXTERNAL DECODE, @ ARL csect
         MVC   16(4,1),0(TXS)     pass back TEXT of ADCON
         MVC   20(8,1),TARLD
         MVC   10(2,1),6(TBL)     copy ADCON length to parms
         L     PAA,0(1)           get @ print area
         MVC   64(2,PAA),DCDS     copy c'DC' to print area
         B     PASSA
* Process routine to handle a constant
PCON     MVC   12(4,1),ACON       pass @ CONST TO PASS 4
MVDC     L     PAA,0(1)           'DC' TO PRINT
         MVC   64(2,PAA),DCDS     AREA POS 65-66
         B     PASS
         TITLE '*** P R O C E S S    I N S T R U C T I O N S *** '
PCRR     MVC   12(4,1),AXFRS      ************
         B     PINST              *          *
PCRX     MVC   12(4,1),AXFRS+4    * EXTERNAL *
         B     PINST              * DECODE   *
PCRS     MVC   12(4,1),AXFRS+8    * ROUTINE  *
         B     PINST              * ADR TO   *
PCSI     MVC   12(4,1),AXFRS+12   * PASS 4   *
         B     PINST              *          *
PCSS     MVC   12(4,1),AXFRS+16   ************
PINST    L     PAA,0(1)           PRINT AREA ADR
         MVC   AOPT(4),0(TXS)     copy opcode to TIME parms
         MVC   PAT(4),0(1)        pass @ print area to TIME csect
         STM   14,7,12(13)        save our registers
         LA    14,RETT            get return address
         L     15,ATIME           get @ TIME csect
         CNOP  2,4
         BALR  1,15               call TIME
PAT      DC    F'0'               @ print area
AOPT     DC    F'0'               instruction to process
TOTA     DC    F'0'               total time for this csect
RETT     LM    14,7,12(13)        reload our registers
         MVC   AOP1(4),0(TXS)     OP CODE TO AXN DATA SECTION
         BAL   14,CLAXN           GET BCD MNEMONIC FOR OP CODE
         L     GRA,AXNOPC         ************************
         L     GRB,0(GRA)         * INCREMENT CURRENT OP *
         LA    GRB,1(GRB)         * CODE COUNTER BY ONE  *
         ST    GRB,0(GRA)         ************************
         MVC   64(5,PAA),AOP2     BCD MNEM. TO PRINT AREA
         ST    PAA,PRPAA          PRINT AREA ADR FOR PR ROUTINE
         MVC   PRTXT(8),0(TXS)    TEXT FOR PR
         MVC   PRLEN+2(2),6(TBL)  LENGTH OF TEXT FOR PR
         BAL   14,CLPR            FORMAT TEXT FOR PRINT OUT
         TITLE '*** P R O C E S S    T E R M I N A T I O N ***  '
PASS     MVC   10(2,1),6(TBL)      TEXT LENGTH TO PASS 4
         MVC   8(2,1),AOP5        Instr. and operand formats to PASS4
         MVC   16(8,1),0(TXS)     8 BYTES OF TEXT TO PASS 4
PASSA    AH    TXS,6(TBL)         get @ next instruction
PTRM     STM   14,5,12(13)        SAVE FTXTA REGS
         MVC   24(4,1),0(TBL)     I.C. & AXN CODE TO PASS 4
         ST    13,CXNIC+8         SAVE POINTER TO FTXTA SAVE AREA
         MVC   CXNIC+1(3),1(TBL)  I.C. IS DATA
         MVI   CXNIC,X'00'        FOR 'CXN'
         L     14,ACXN            get @ CXN csect
         CNOP  6,8                CALL CXN
         BALR  14,14
CXNIC    DC    D'0'               CXN DATA
         DC    F'0'               SAVE AREA POINTER SAVED HERE
         MVC   2(6,PAA),CXNIC+2   BCD I.C. TO PRINT POS 3-9
         LM    14,5,12(13)        RESTORE FTXTA REGS
         ST    TXS,SATXS          SAVE TEXT POINTER
         SR    GRA,GRA             ZERO GRA
         IC    GRA,4(TBL)   INSERT TABLE ENTRY NUMBER
         C     GRA,TBLTE          ENTRY BEEN REACHED?
         BL    RTN                BRANCH IF NO
         MVI   PCFLG,X'00'        RE-SET FLAG FOR LOOKAHEAD
         CLI   TFL,X'FF'          last card ?
         BE    LASTC              br. if yes
RTN      LA    TBL,8(TBL)         TABLE POINTER TO
         ST    TBL,CATBL          THE NEXT ENTRY
RET      L     13,SAVE+4           ********************
         LM    14,12,12(13)       * RETURN TO PASS 4 *
         BR    14                 ********************
         TITLE '*** I N S U B ***  (FORMAT BCD LENGTH FOR DS OR DC) '
INSUB    STM   1,2,24(13)         SAVE R1 & R2 (USED IN TRANSLATE)
         LH    GRA,6(TBL)         GET LENGTH
         TM    3(TBL),X'03'
         BNZ   NFWD
         TM    7(TBL),X'03'       IS LENGTH A MULTIPLE OF FOUR?
         BNZ   NFWD               BRANCH IF NO
         SRL   GRA,2              DIVIDE LENGTH BY FOUR
NFWD     CVD   GRA,GPDW           GET DECIMAL
         UNPK  GPDW(5),GPDW+5(3)  LENGTH READY
         OI    GPDW+4,C'0'        FOR PRINT
         TRT   GPDW(5),TRTBL-240  FIND ADR OF FIRST NON-ZERO DIGIT
         BNO   CONTC              IN DECIMAL DS OR DC LENGTH
         ABEND 40,DUMP            DUMP IF LENGTH IS ALL ZEROES
CONTC    LA    GRA,GPDW+4         FIND NO. OF BYTES
         SR    GRA,1              TAKEN BY BCD LENGTH
         EX    GRA,MOVE           MOVE BCD LENGTH TO PRINT AREA
         LA    GRA,70(GRA,PAA)    FIND ADR OF BYTE RIGHT AFTER LENGTH
         LM    1,2,24(13)         RESTORE R1 & R2
*
* AT EXIT 'GRA' CONTAINS POINTER TO BYTE RIGHT AFTER BCD DS/DC LENGTH
*
         BR    14                 *** RETURN ***
MOVE     MVC   70(1,PAA),0(1)     EXecuted instruction
TRTBL    DC    X'00'
         DC    9X'FF'
         TITLE '*** P C D S ***  (PROCESS DS) '
PCDS     L     PAA,0(1)           get @ print area
         MVC   64(2,PAA),DCDS+2   'DS' TO PRINT POS 65-66
         MVC   12(4,1),ADS        copy @ DS csect to decoding rtn adr
         BAL   14,INSUB        call format BCD length for DS or DC rtn
*
*AFTER INSUB 'GRA' CONTAINS ADR OF PRINT POSITION FOLLOWING BCD LENGTH
*
         MVI   1(GRA),C'F'        assume fullword
         TM    3(TBL),X'03'       are we on a fullword boundary ?
         BNZ   GMC                if not length is in bytes
         TM    7(TBL),X'03'       * PLACE 'C' OR 'F' AFTER *
         BZ    PTRM               * BCD LENGTH AND GO TO   *
GMC      MVI   1(GRA),C'C'        * TERMINATION OF PROCESS *
         B     PTRM               **************************
* AFTER INSUB 'GRA' CONTAINS ADR OF PRINT POSITION FOLLOWING BCD LENGTH
         TITLE '*** P C Z B ***  (PROCESS ZEROES OR BLANKS)  '
PCZB     BAL   14,INSUB        call format BCD length for DS or DC rtn
*
*
         MVC   12(4,1),ADS         copy @ DS csect to decoding rtn adr
         TM    3(TBL),X'03'        ON FULL WORD BOUNDARY
         BNZ   BZ4                 BRANCH IF NO
         TM    7(TBL),X'03'
         BNZ   BZ4
         CLI   0(TXS),X'00'       IS TEXT A GROUP OF ZEROES?
         BNE   BLNK               BRANCH IF NO
         MVC   1(4,GRA),FBCD       INSERT F'0' AFTER BCD LENGTH
         B     MVDC
BLNK     MVC   1(7,GRA),CBCD       INSERT C'    ' AFTER BSD LENGTH
         B     MVDC
FBCD     DC    X'C67DF07D'        F'0' IN BCD
CBCD     DC    X'C37D404040407D'  C'    ' IN BCD
FBCD3    DC    X'E77DF0F07D'      X'00' in bcd
CBCD3    DC    X'C37D407D'         C' ' in bcd
FBCD0    DC    X'C37DF0F0F0F07D'  C'0000' in bcd
BZ4      CLI   0(TXS),X'00'        IS TEXT A GROUB OF ZEROES
         BNE   BLN3                BRANCH IF BLANKS
         MVC   1(5,GRA),FBCD3
         B     MVDC
BLN3     MVC   1(4,GRA),CBCD3
         B     MVDC
         TITLE '*** C L P R ***  (CALL PR TO FORMAT TEXT FOR PRINT) '
CLPR     STM   14,12,12(13)       SAVE FTXTA REGS
         ST    13,PRLEN+4         SAVE POINTER TO FTXTA SAVE AREA
         L     14,ADRPR           get @ PR csect
         CNOP  2,4                CALL PR
         BALR  14,14
PRPAA    DC    F'0'               PRINT AREA ADR
PRTXT    DC    2F'0'              TEXT TO BE FORMATTED
PRLEN    DC    F'0'               TEXT LENGTH
         DC    F'0'               SAVE AREA POINTER SAVED HERE
         LM    14,12,12(13)       RESTORE FTXTA REGS
         BR    14                 *** RETURN ***
* end of last card reached
LASTC    L     2,SAVE+4           get @ our reg's in save area
         L     1,24(2)            get @ parms
         MVC   4(4,1),ONE1        copy f'1' into KEY4
         MVI   TFL,X'00'          clear last card flag
         MVI   PCFLG,X'00'
         SR    GRA,GRA            ZERO REGISTER
         ST    GRA,LRLD           ZERO RLD LENGTH
         ST    GRA,NTCF           ZERO TEXT CARD COUNT
         MVI   FPFLG,X'FF'        SET FIRST PASS FLAG
         L     GRB,ACF            get @ CF in CRLD csect
         ST    GRA,0(GRB)         zero
         ST    GRA,8(GRB)         zero
         ST    GRA,12(GRB)        zero
         L     GRB,ARLDF          get @ ARLDS in CRLD csect
         MVC   0(4,GRB),4(GRB)    reset to start of RLD table
         B     RET                and return to caller
         TITLE '*** F T X T A    C O N S T A N T    A R E A *** '
AAXN     DC    A(AXN)             ADR OF AXN
ACRLD    DC    A(CRLD)            ADR OF CRLD
ADRZB    DC    F'0'               ADR OF ZEROS OR BLANK ENTERING 'ZOBS'
ATBNT    DC    A(NTXT)            POINTER TO # OF TXT CARDS & TXTB TBL
ATXTS    DC    A(TXTS)            ADR OF TEXT TABLE
AZBTS    DC    F'0'               TXTS POINTER AT ENTRY TO 'ZOBS'
BLANK    DC    CL8' '             EIGHT BYTES OF BLANKS
CATXB    DC    F'0'               CURRENT TXTB TABLE POINTER
EIGHT    DC    F'8'               constant
FOUR     DC    F'4'               constant
FPFLG    DC    X'FF'              FIRST PASS FLAG ('FF'=FIRST PASS)
PCFLG    DC    X'00'              PROCESS FLAG ('FF'=PROCESS)
TFL      DC    X'00'               LAST CARD FLAG
CC       DC    X'00'              2nd byte of opcode
TAOP     DC    X'00'
FTBL     DS    16D                FETCHED TEXT TABLE
         DC    D'0'
GPDW     DC    D'0'               GENERAL PURPOSE DOUBLE WORD
TARLD    DC    2F'0'              copy of CRLD output
HEXFF    DC    F'255'             UPPER LIMIT OF ONE BYTE COUNTER
HITBL    DC    F'15'              HIGHEST TABLE ENTRY NO.
NBLC     DC    F'0'               NUMBER OF BYTES LEFT ON CARD
NTCF     DC    F'0'               NUMBER OF TXT CARDS FETCHED
ZAD      DC    F'0'
ONE1     DC    F'1'               constant
TNTC     DC    F'0'               TOTAL NUMBER OF TXT CARDS
TWO2     DC    F'2'               constant
SATXS    DC    F'0'               TEXT POINTER (SATXS+B5=CURRENT TEXT)
SAVE     DS    18F                SAVE AREA FOR FTXTA ROUTINE
FRA      DC    F'0'
TBLTE    DC    F'0'               TABLE TERMINATION ENRTY NUMBER
ZEROS    DC    D'0'               EIGHT BYTES OF ZEROES
*
ALIST    DC    A(PCON)            ************  0 - constant
         DC    A(PCRR)            * ADDRESS  *  1 - RR
         DC    A(PCRX)            * LIST     *  2 - RX
         DC    A(PCRS)            * USED     *  3 - RS
         DC    A(PCSI)            * TO GET   *  4 - SI
         DC    A(PCSS)            * SPECIFIC *  5 - SS
         DC    A(PRLD)            * PROCESS  *  6 - ADCON
         DC    A(PCDS)            * ROUTINE  *  7 - DS
         DC    A(PCZB)            ************  8 - Zeroes Or Blanks
DCDS     DC    C'DCDS'            'DC' & 'DS' MNEMONICS
CATBL    DS    1F                 CURRENT TABLE ENTRY POINTER
ACXN     DC    A(CXN)             ADR OF HEX-BCD CONVERSION ROUTINE
ADRPR    DC    A(PR)              ADR OF TEXT FORMAT ROUTINE
APAB     DC    A(PAB)             SECOND PRINT AREA ADR (not used ?)
ACON     DC    A(CONST)           ************
AXFRS    DC    A(RR)              *          *
         DC    A(RX)              * EXTERNAL *
         DC    A(RS)              * FORMAT   *
         DC    A(SI)              * ROUTINES *
         DC    A(SS)              *          *
AARL     DC    A(ARL)             ************
ADS      DC    A(DS)              @ DS csect
ACF      DC    A(CF)              @ CF in CRLD csect
ARLDF    DC    A(ARLDS)           @ ARLDS in CRLD csect
TGRA     DC    F'0'               temp store for GRA, ie r5
TGRB     DC    F'0'               temp store for GRB, ie r6
TGRC     DC    F'0'               temp store for GRC, ie r7
TM1      DC    F'0'               not used ?
TNT1     DC    F'0'               number of TXT cards (NTXT - 1)
ATIME    DC    A(TIME)            @ TIME csect
*
* * * * * * * * * * * REGISTER ASSIGNMENT * * * * * * * * * * * * * * *
*
TXB      EQU   3                  CURRENT TXTB TABLE POINTER
TBL      EQU   4                  CURRENT TABLE POINTER
GRA      EQU   5                  GENERAL WORK REGISTER 'A'
GRB      EQU   6                  GENERAL WORK REGISTER 'B'
GRC      EQU   7                  GENERAL WORK REGISTER 'C'
PAA      EQU   8                  PRINT AREA POINTER
TXS      EQU   9                  CURRENT TEXT POINTER
*
COFST    DC    F'0'               *****DUMMY*****, entry point
RFTXT    ABEND 60,DUMP            *****DUMMY*****, entry point
         END
