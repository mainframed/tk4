SS       TITLE 'SS '
***********************************************************************
*                                                                     *
*      format the parameters of a SS or SSE format instruction        *
*                                                                     *
*    eg  MVC   123(1,2),3(4)    (if format =x'50')  type 0            *
*        AP    123(4,2),3(4,5)  (if format =x'51')  type 1            *
*        MVCK  123(1,2),3(4),5  (if format =x'52')  type 2            *
*        LASP  123(2),3(4)      (if format =x'53')  SSE (type 3)      *
*        SRP   123(1,2),3(4),5  (if format =x'54')  type 4, L1, not R1*
*                                                                     *
*  input addressed by R14:                                            *
*    +0  @ output buffer                                              *
*    +4  instruction format (copy of AXNFMT)                          *
*    +8  instruction TEXT                                             *
*    +10 2 bytes passed to ADDR csect (1st adr call)                  *
*    +12 2 bytes passed to ADDR csect (2nd adr call)                  *
*    +19 flag, passed to ADDR csect, x'50' if 1 length field, else 51 *
*    +20 module returns to here                                       *
*                                                                     *
*  history:                                                           *
*    support SS type 2 instruction format                CFK jun 1999 *
*    support SSE instruction format                      CFK jun 1999 *
*                                                                     *
***********************************************************************
         FMTPARMS                 copy parameter map
SS       CSECT
         USING FMTPARMS,14        tell assembler about parms  CFK*JUN99
         BALR  13,0               set up base reg
         USING *,13               tell assembler
         EXTRN ADDR
         ST    14,SS14            save @ parms
         MVC   SSD+15(1),19(14)   pass AXNFLG1 to ADDR, 1st call
         MVC   SSD2+15(1),19(14)  pass AXNFLG1 to ADDR, 2nd call
         SR    3,3
         IC    3,9(14)            get length
         CLI   FMTFMT,FMTFSS      1 length field ?
         BE    DSS                br if yes
         SRL   3,4                else extract 1st length field only
DSS      DS    0H                                             CFK*JUN99
         CLI   FMTFMT,FMTFSS2     type 2 instruction format ? CFK*JUN99
         BE    DSS2               branch if so                CFK*JUN99
         LA    3,1(3)             else calc number of bytes to move
DSS2     DS    0H                                             CFK*JUN99
         CVD   3,SWA              ) make
         UNPK  SWB(4),SWA+4(4)    )  length/register
         OI    SWB+3,C'0'         )   decimal
         SR    2,2
         ST    2,SSD              clear ADDR
         ST    2,SSD+4             parms
         MVC   SSD+2(2),10(14)    copy TEXT for first address
         MVC   SSD+5(3),SWB+1     pass length (decimal)
         MVC   SSD+8(4),0(14)     pass @ Print Area
         CLI   FMTFMT,FMTFSSE     SSE instruction ?           CFK*JUN99
         BNE   CALL1              branch if not               CFK*JUN99
         MVI   SSD+4,X'01'        else signal no length       CFK*JUN99
CALL1    DS    0H                                             CFK*JUN99
         ST    13,SSD+16          put r13 where ADDR expects it
         L     14,ADDSS           FIND FIRST ADDRESS
         CNOP  6,8
         BALR  14,14              call ADDR csect
SSD      DC    D'0'
         DC    D'0'
         DC    F'0'               r13 reloaded from here
         L     14,SS14            reload @ parms
         L     4,0(14)            get @ output buffer
         L     3,SSD+12           get address length
         S     3,SSONE            -1 for mvc
         EX    3,MVSS             copy address to o/p buffer
         SR    2,2
         ST    2,SSD2             clear ADDR
         ST    2,SSD2+4            parms
         MVC   SSD2+2(2),12(14)   copy TEXT for 2nd address
         MVC   SSD2+8(4),0(14)    pass @ Print Area
         AR    4,3                adj o/p buffer adr for 1st adr len
         ST    4,SAP              save it
         MVI   71(4),C','         add ,
         ST    13,SSD2+16         put r13 where ADDR expects it
         MVI   SSD2+4,X'01'       signal no length in the address
         CLI   FMTFMT,FMTFSS1     2 lengths ?
         BNE   DSS3               no, don't format 2nd length
         IC    3,9(14)            else get length
         SLL   3,28               ) mask out
         SRL   3,28               ) low 4 bits
         LA    3,1(3)             make
         CVD   3,SWA               length
         UNPK  SWB(4),SWA+4(4)      printable
         OI    SWB+3,C'0'
         MVC   SSD2+6(2),SWB+2    copy length to ADDR parms
         MVI   SSD2+4,X'00'       signal length wanted
DSS3     L     14,ADDSS           FIND SECOND ADDRESS
         CNOP  6,8
         BALR  14,14              call addr csect
SSD2     DC    D'0'
         DC    D'0'
         DC    F'0'               r13 reloaded from here
         L     14,SS14            reload @ parms
         L     3,SSD2+12          get address length
         S     3,SSONE            -1 for execute
         L     4,SAP              reload @ o/p buffer (adjusted)
         LA    4,72(4)            calc where to put 2nd address
         EX    3,MVS2             copy 2nd address
         CLI   FMTFMT,FMTFSS2     SS type 2 instruction       CFK*JUN99
         BE    TRAIL              need trailing reg if so     CFK*JUN99
         CLI   FMTFMT,FMTFSS4     SS type 4 instruction       CFK*JUN99
         BNE   DONE               finished if not             CFK*JUN99
TRAIL    DS    0H                                             CFK*JUN99
         A     4,SSD2+12          else calc @ end of data so far *JUN99
         MVI   0(4),C','          add ,                       CFK*JUN99
         IC    3,9(14)            get register number         CFK*JUN99
         SLL   3,28               ) mask out                  CFK*JUN99
         SRL   3,28               ) low 4 bits                CFK*JUN99
         CVD   3,SWA              make                        CFK*JUN99
         UNPK  SWB(3),SWA+6(2)     register                   CFK*JUN99
         OI    SWB+2,C'0'           printable                 CFK*JUN99
         CLI   SWB+1,C'0'         2 byte reg. number ?        CFK*JUN99
         BNE   TWOBYTE            br if two bytes to move     CFK*JAN00
         MVC   1(1,4),SWB+2       else copy 1 byte to output  CFK*JAN00
         B     DONE                                           CFK*JUN99
TWOBYTE  MVC   1(2,4),SWB+1       copy 2 bytes to output      CFK*JUN99
DONE     DS    0H                                             CFK*JUN99
         L     14,SS14            reload @ parms etc
         BAL   14,20(14)          RETURN
MVSS     MVC   70(1,4),SSD        EXecuted instruction
MVS2     MVC   0(1,4),SSD2        EXecuted instruction
         DC    C'IMM='
ADDSS    DC    A(ADDR)            @ ADDR csect
SAP      DC    F'0'               save @ o/p buf adj for 1st adr len
SS14     DC    F'0'               area to save r14
SSONE    DC    F'1'               constant 1
SWA      DC    D'0'               CVB work area
SWB      DC    F'0'               work area
         END
