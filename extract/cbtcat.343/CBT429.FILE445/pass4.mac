PAS4     TITLE 'PASS4 '
***********************************************************************
*                                                                     *
*  called by PASS1 and PASS3                                          *
*                                                                     *
*  This makes two passes over the data, the 2nd and 4th. It is        *
*  branched to by PASS1, makes one pass, branches to PASS3, and       *
*  PASS3 branches back to it.                                         *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
* history:                                                            *
*   fix bug printing the equate table at end of output    CFK apr 1999*
*   handle weak external references (WXTRNs)              CFK may 1999*
*   map ESD section list in ESD0                          CFK jan 2000*
*   handle RSECTs                                         CFK jan 2000*
*   generate AMODE and RMODE statements if needed         CFK jan 2000*
*                                                                     *
***********************************************************************
         ESDSDMAP                 entry in list of sections in ESD0
EXTRNMAP DSECT
         EXTRNMAP                 entry in list of EXTRNs in ESD2
PASS4    CSECT
         BALR  15,0               establish base reg
         USING *,15               tell assembler
         ENTRY ADA                ref'ed by CONST
         EXTRN SPPR               csect
         EXTRN PLCB               in SPPR csect
         EXTRN ADDR               not used
         EXTRN PRINT              csect
         EXTRN CXN                csect
         EXTRN PASS3              csect
         EXTRN FTXT               csect
         EXTRN ART                csect
         EXTRN CDN                csect
         EXTRN LCOM               in ESD5 csect
         EXTRN PASS5              csect
         EXTRN NPROG              in ESD0 csect               CFK*JAN00
         EXTRN LCT                in PRINTA csect
         EXTRN ENDA               in TXT csect
         EXTRN USING              csect
         EXTRN BSC                csect
         EXTRN PA                 in PASS1 csect
         EXTRN PAB                in PASS1 csect
         EXTRN TXTS               in TXT csect
         EXTRN TXTB               in TXT csect
         EXTRN NEXT               in ESD2 csect
         EXTRN NENT               in ESD1 csect
         EXTRN CONST              csect
         EXTRN SAVA               csect
         EXTRN BCV                csect
         EXTRN COTR               csect
         EXTRN SBCZ               in ARL csect
         EXTRN DECOMP             csect
         EXTRN ARL                csect
         ST    15,PAR+20          put our base reg in parms to DECOMP
         MVI   KEY4+3,X'00'       )
         MVI   SIN,X'00'          ) clear work
         MVI   SKY,X'00'          )  areas
         MVI   LEN4+2,X'00'       )
         L     3,COTR4            get @ COTR csect
         CLI   1(3),C'D'          'D' in control card ?
         BNE   BCR                br if not
         MVI   PAS45,X'00'        else flag 2nd use of PASS4
BCR      BCR   0,0
         L     3,APAP4            get @ PA in PASS1 csect
         MVI   0(3),C' '          clear
         MVC   1(134,3),0(3)       print area
         L     3,PABF4            get @ PAB in PASS1 csect
         MVI   0(3),C' '          clear
         MVC   1(134,3),0(3)       PAB
         CLI   PAS45,X'FF'        SECOND USE OF PASS4 ?
         BE    NEXN               br. if not
* 4th pass only code
         L     2,APAP4            YES          get @ PA in PASS1
         L     4,ALCT4            START A      get @ LCT in PRINTA
         MVC   0(4,4),FF94        NEW PAGE
         L     4,NPROGA           get @ NPROG in ESD0 csect
         MVC   0(4,4),ZZ4         copy zeroes into NPROG in ESD0 *JAN00
         LA    4,4(4)             get @ first ESD entry       CFK*JAN00
         USING ESDSDMAP,4         tell assembler              CFK*JAN00
         MVC   64(5,2),CSECT      PRINT CSECTS
         MVC   55(8,2),ESDNAME    copy csect name             CFK*JAN00
         TM    ESDINFO,ESDIRO     is this a RSECT ?           CFK*JAN00
         BZ    NOTRSECT           br. if not                  CFK*JAN00
         MVI   64(2),C'R'         else change CSECT to RSECT  CFK*JAN00
NOTRSECT DS    0H                                             CFK*JAN00
         L     14,PRINT4          get @ PRINT csect
         CNOP  2,4
         BALR  14,14              call PRINT
         DC    A(PA)              @ PA in PASS1 csect
* generate AMODE statement if necessary.                      CFK*JAN00
         TM    ESDINFO,ESDIA31    is it AMODE 31 or ANY ?     CFK*JAN00
         BNO   NOAMODE            branch if not               CFK*JAN00
         MVC   64(9,2),AMODEANY   copy c'AMODE ANY'           CFK*JAN00
         MVC   55(8,2),ESDNAME    copy csect name             CFK*JAN00
         TM    ESDINFO,ESDIAANY   is it AMODE ANY ?           CFK*JAN00
         BO    AMODEOK            branch if so                CFK*JAN00
         MVC   70(3,2),=C'31 '    else make it AMODE 31       CFK*JAN00
AMODEOK  DS    0H                                             CFK*JAN00
         L     14,PRINT4          get @ PRINT csect           CFK*JAN00
         CNOP  2,4                                            CFK*JAN00
         BALR  14,14              call PRINT                  CFK*JAN00
         DC    A(PA)              @ PA in PASS1 csect         CFK*JAN00
NOAMODE  DS    0H                                             CFK*JAN00
* generate RMODE statement if necessary.                      CFK*JAN00
         TM    ESDINFO,ESDIRANY   is it RMODE ANY ?           CFK*JAN00
         BZ    NOTRMANY           branch if not               CFK*JAN00
         MVC   64(9,2),RMODEANY   copy c'RMODE ANY'           CFK*JAN00
         MVC   55(8,2),ESDNAME    copy csect name             CFK*JAN00
         L     14,PRINT4          get @ PRINT csect           CFK*JAN00
         CNOP  2,4                                            CFK*JAN00
         BALR  14,14              call PRINT                  CFK*JAN00
         DC    A(PA)              @ PA in PASS1 csect         CFK*JAN00
NOTRMANY DS    0H                                             CFK*JAN00
* print the ENTRY statements at the start of the listing
         L     3,NENT4            get @ NENT in ESD1 csect
         LR    4,3                save @ NENT
         L     3,0(3)             get NENT, number of entries
         MVC   0(4,4),ZZ4         copy zero onto NENT
         LA    4,4(4)             get @ first entry
         SR    5,5
         CR    5,3                any entries to print
         BE    NEN                br if not
ESDL1    MVC   70(8,2),0(4)       PRINT ENTRIES
         MVC   64(5,2),ENTRY      copy c'ENTRY'
         LA    4,13(4)            get @ next ENTRY slot
         L     14,PRINT4          get @ PRINT csect
         CNOP  2,4
         BALR  14,14              call PRINT
         DC    A(PA)              @ PA in PASS1 csect
         BCT   3,ESDL1            br if more entries to print
* print the EXTRN statements at the start of the listing
NEN      L     3,NEXT4            get @ NEXT in ESD2 csect
         LA    4,4(3)             get @ 1st EXTRN
         USING EXTRNMAP,4         tell assembler
         L     3,0(3)             get NEXT, number of EXTRNS/WXTRNS
         SR    5,5
         CR    5,3                any EXTRNS to print ?
         BE    NEXN               br if not
ESDL2    CLI   12(4),C' '         common length spaces ?
         BE    REX                br. if yes (not present)
         CLC   12(3,4),FZ4        = x'000004' ?
         BE    REX                yes - print it
         CLC   12(3,4),ZZ4        common length zero ?
         BNE   NEXB               br if not
REX      MVC   70(8,2),0(4)       copy name referenced
         MVC   64(5,2),EXTRN      PRINT EXTRNS
         CLI   EXTTYPE,EXTTWX     weak external reference ?   CFK*MAY99
         BNE   NOTWEAK            branch if not               CFK*MAY99
         MVI   64(2),C'W'         else change EXTRN to WXTRN  CFK*MAY99
NOTWEAK  DS    0H                                             CFK*MAY99
         L     14,PRINT4          get @ PRINT csect
         CNOP  2,4
         BALR  14,14              call PRINT
         DC    A(PA)              @ PA in PASS1 csect
NEXB     LA    4,15(4)            get @ next EXTRN slot
         BCT   3,ESDL2            br if more EXTRNs to print
* 2nd and 4th pass code
NEXN     LA    2,15               DROP USING TABLR
         SR    3,3                clear
         ST    3,LNCT              line count
USLP     LA    3,16(3)
         STM   2,3,DRT            save work registers
         L     14,US4             get @ USING csect
         STC   3,UREG+2           tell using to drop this reg
         CNOP  2,4
         BALR  14,14              call USING
UREG     DC    F'0'
         DC    F'0'
         DC    F'0'
         LM    2,3,DRT            reload work registers
         BCT   2,USLP             br if more registers to drop
         MVC   PLC(4),ZZ4         ) zero
         MVC   FORHF(4),ZZ4       )  all
         MVC   FFC(4),ZZ4         )   these
         MVC   ACT(4),ZZ4         )    fields
         MVI   COBRG+3,X'30'
         MVC   FFAD(4),ZZ4        ) zero some
         MVC   COBF(4),ZZ4        )  more fields
         MVC   XSX(4),NXSX        copy f'60'
         MVC   BR15+4(3),ZZ4      ) zero USING parms
         MVI   FFC,X'FF'
         L     3,TXTB4            get @ TXTB in TXT csect
         MVC   BR15+4(3),0(3)     copy 1st TXT address to USING parms
         L     3,AENDA            get @ ENDA in TXT csect
         L     4,COTR4            get @ COTR csect
         CLI   7(4),C'A'          'A' in control card ?
         BNE   NAS                br. if not
         MVI   FFC+1,X'FF'
         CLI   0(3),C' '          end address blank ?
         BE    PFT                br if yes
         MVI   BR15,X'01'         else flag insert call to USING
         MVC   BR15+4(3),0(3)     copy to USING parms
         B     PFT
NAS      CLC   0(3,3),ZZ4         end address zero ? (but why check ?)
         CLC   0(3,3),FT08        end address x'000008' ?
         BE    TFTR               br. if yes
         CLI   0(3),C' '          end address blank ?
         BE    TFTR               br. if yes
NBSKP    MVC   FFAD+1(3),0(3)     copy end address
         L     3,TXTS4            get @ TXTS in TXT csect (input TXT)
         CLI   0(3),X'90'         input starts with STM ?
         BE    NFT                br. if yes
         CLI   0(3),X'05'         input starts with BALR ?
         BE    NFT                br. if yes
         MVI   PLC+1,X'FF'
         MVI   KEY4+3,X'02'
         L     3,TXTS4            get @ TXTS in TXT csect
         CLC   16(2,3),FEH        = x'9847' (LM 4,7, ...) ?
         BE    TFTR               br. if equal
         CLI   0(3),X'47'         input starts with BC ?
         BE    LFTXTB             br. if yes
         MVI   COBF,X'01'         else set flag
         B     LFTXTB
TFTR     L     3,TXTS4            get @ TXTS in TXT csect
         MVI   BR15+6,X'08'       ) update USING
         MVC   B15(4),ZZ4         )  parms
         CLC   8(4,3),FFBR        = STM  14,12,12(13) ?
         BE    PFT                br if so
         LA    3,4(3)             get @ next instr.
         L     9,XSX              )
         LA    9,8(9)             ) bump up XSX
         ST    9,XSX              )
         MVI   BR15+6,X'00'       update USING parms
         CLC   8(4,3),FFBR        = STM  14,12,12(13) ?
         BE    PFT                br if so
NFT      MVI   FFC+1,X'FF'
         MVI   BR15,X'01'         flag insert call to USING
         MVI   FORHF,X'FF'
         B     LFTXTB
PFT      MVI   BR15+7,X'01'       tell USING to insert this reg
         MVI   BR15+2,X'F0'       set reg to insert to 15
         MVI   UREGF+2,X'F0'      ) copy parms to
         MVC   UREGF+4(3),BR15+4  )  other USING call
         ST    3,BRT              save @ next instruction
         BAL   9,USST             Call USST to generate USING card
         L     14,US4             get @ USING csect
         CNOP  2,4
         BALR  14,14              call USING
BR15     DC    3F'0'
         L     3,BRT              reload @ next instruction
         CLI   FFC+1,X'FF'
         BE    LFTXTB
         MVI   FFC,X'00'
         MVI   FORHF,X'FF'
         MVI   PLC+1,X'FF'        YES
         CLI   16(3),X'58'
         BNE   NLS7
         MVC   FFAD+2(2),18(3)    FIRST EXEC ADDRESS
         NI    FFAD+2,X'0F'
         L     5,B15
         A     5,FFAD
         LA    3,4(3)
         S     5,XSX
         SRL   5,2
         ST    5,B15
         LTR   5,5
         BC    12,NLS7
         B     NLS8
NLS7     MVC   B15(4),ZZ4         set B15 to zero
NLS8     MVC   FFAD+2(2),18(3)
         NI    FFAD+2,X'0F'
         MVI   KEY4+3,X'02'       SET CONSTANT MODE
         MVC   COBRG+3(1),18(3)
         NI    COBRG+3,X'F0'
         MVC   COBA(4),ZZ4
         L     5,ALCOM4           get @ LCOM in ESD5 csect
         L     5,0(5)             get common length
         LA    5,4095(5)
         SR    4,4                clear high reg. of pair
         D     4,F100             divide by 4096
         L     6,B15
         SR    6,5                subtract number of common pages
         ST    6,B15
         LA    5,3(5)
         SLL   5,4                multiply by 4
         ST    5,COBR
* start of a loop
LNNP     L     5,COBR
         LA    5,16(5)
         ST    5,COBR
         STC   5,UREGF+2         put reg. no. into USING parms
         CLC   COBR+3(1),COBRG+3
         BNE   OREG
         L     7,B15
         C     7,ZZ4
         BNH   OREG
         M     6,F100            mul by 4096
         ST    7,COBA
OREG     MVC   UREGF+4(3),COBA+1
         L     4,COBA
         A     4,F100            add 4096
         ST    4,COBA
         BAL   9,USST            call USST to generate USING card
         B     LUS4              and br. round subroutine
* subroutine to generate USING card
USST     ST    9,AFTA            save return address
         XC    REGT(3),REGT      clear BCV parms
         MVC   REGT+3(1),UREGF+2 pass register number to BCV
         MVC   SAVC(3),UREGF+4   pass address to SAVA csect
         MVI   SAVC+3,X'60'      ind. type of address
         L     14,ASAVC          get @ SAVA csect
         CNOP  2,4
         BALR  14,14             call SAVA
SAVC     DC    3F'0'
         L     14,BCV4           get @ BCV csect
         CNOP  2,4
         BALR  14,14             call BCV
REGT     DC    F'0'
         DC    F'0'
         L     4,APAP4           get @ PA in PASS1 csect
         MVC   70(8,4),SAVC      copy name of this address
         MVC   64(6,4),USI4      copy c'USING '
         LA    5,7               max label length - min label length
         LA    3,77(4)           get @ end of label
CEC      CLI   0(3),C' '         space ?
         BNE   INSC              no, found end of label
         BCTR  3,0               else take 1 off ptr
         BCT   5,CEC             and loop if more to check
INSC     MVI   1(3),C','         put , after label
         MVC   2(2,3),REGT       copy register number
         CLI   PAS45,X'FF'       2nd use of PASS4 ?
         BE    NPCB              br. if not
* 4th pass only code
         L     14,PRINT4         get @ PRINT csect
         CNOP  2,4
         BALR  14,14             call PRINT
         DC    A(PA)             @ PA in PASS1 csect
* 2nd and 4th pass code
NPCB     L     9,AFTA            reload return address
         BR    9                 and return
* end of USST subroutine
LUS4     L     14,US4            get @ USING csect
         MVI   UREGF,X'01'       ind. insert call
         MVI   UREGF+7,X'01'
         CNOP  2,4
         BALR  14,14             call USING
UREGF    DC    F'0'
         DC    F'0'
         DC    F'0'
         CLC   COBR+3(1),COBRG+3
         BL    LNNP               loop back
* end of first big loop
         L     4,COBA
         S     4,F100             subtract 4096
         A     4,FFAD
         ST    4,FFAD
LFTXTB   L     14,APLCB           get @ PLCB in SPPR csect
         MVC   4(36,14),PLC       copy our PLC into SPPRs PLC
* start of main loop
LFTXT4   L     14,AFTXT4          FETCH TEXT, get @ FTXT csect
         CLI   SKY,X'01'          end of TXT ?
         BE    CKEN               br. if yes
         MVC   SKY(1),KEY4+3
         CLI   LEN4+2,X'FF'
         BNE   BALRF
         MVI   KEY4+3,X'02'
         CNOP  6,8
BALRF    BALR  14,14              call FTXT
         DC    A(PA)              @ PA in PASS1 csect
KEY4     DC    F'0'
         DC    F'0'               fullword length of instruction found
ROUT4    DC    F'0'               output @ decoding routine
INST4    DC    D'0'               output TEXT of instruction/constant
LOC4     DC    F'0'               output AXNFLG1 + current address
LOC3     EQU   LOC4+1,3           output, current address     CFK*JAN00
         DC    F'0'
         CLI   KEY4+3,X'01'       end of last card ?
         BNE   NSKY               br. if not
         MVI   SKY,X'01'          else flag end of TXT
NSKY     MVC   KEY4+3(1),SKY
         BAL   9,AFT              call AFT subroutine
         B     CKK2               branch round subroutine
* subroutine to put the address on the output if necessary
AFT      ST    9,AFTA             save return address
         CLI   PAS45,X'FF'        SECOND USE OF PASS4
         BE    CKK                return if not
* 4th pass only code
         CLC   ADA(4),ZZ4         is ADA zero ?
         BE    FXN                br. if so
CFF      CLI   ADA,X'FF'          any known addresses left ?
         BE    CKK                go to return if not
         CLC   LOC3,ADA           current address = this address ?
         BE    XNA                yes - go print it
         BL    CKK                we're not there yet, return to caller
         CLI   ADF,X'00'          has current address been printed ?
         BNE   FXN                br. if printed
         CLC   NEQT(4),HUD        equate table full ?
         BL    LADA               no - add this address
         BH    FXN                yes - ignore this address
         L     3,APAP4            get @ PA in PASS1 csect
         MVC   0(24,3),EQTE       copy C'**  MORE THAN 99 EQUATES '
         L     14,PRINT4          get @ PRINT csect
         CNOP  2,4
         BALR  14,14              call PRINT
         DC    A(PA)              @ PA in PASS1 csect
LADA     L     3,ADA
         SRL   3,8
         S     3,ADB
         L     4,AEQT             get @ next slot
         MVC   1(3,4),ADB+1
         ST    3,4(4)             STORE ADDRESS
         LA    4,8(4)             IN EQUATE TABLE
         ST    4,AEQT             bump pointer to next slot
         L     4,NEQT             )
         LA    4,1(4)             ) incr. number of equates
         ST    4,NEQT             )
FXN      L     14,BART            FETCH NEXT ADDRESSP
         MVC   ADB+1(3),ADA
         MVC   ADBC(4),ADA
         CNOP  2,4
         BALR  14,14              call ART csect
ADA      DC    F'0'               entry point, ref'ed by CONST
         DC    F'0'               8 byte label at this address or
         DC    F'0'                 spaces if no label
         DC    F'0'
         MVI   ADF,X'00'          indicate current address not printed
         B     CFF                loop back to process next address
* put address onto output
XNA      MVC   CX4(3),ADA         copy current address
         MVI   ADF,X'FF'          indicate current address printed
         L     14,CXN4            CONVERT TO BCD
         CNOP  2,4
         BALR  14,14              call CXN
CX4      DC    F'0'
         DC    F'0'
         DC    F'0'
         L     3,APAP4            get @ PA in PASS1 csect
         CLI   ADA+4,C' '         any label at this address ?
         BE    MVAO               br. if not
         MVC   55(8,3),ADA+4      else copy label
         B     CKK                and return
MVAO     MVC   55(6,3),CX4        copy address in hex
         MVI   55(3),C'A'         add A
* 2nd and 4th pass code
CKK      L     9,AFTA             reload return address
         BR    9                  and return
* end of AFT subroutine
CKK2     B     LFTXT5
* end of input TXT reached
CKEN     XC    PAR(16),PAR        clear DECOMP parms
         MVC   PAR+16(4),ONE      copy f'1'
         BAL   13,BDCM            call DECOMP (which does nothing now)
         XC    PAR+16(4),PAR+16   clear DECOMP parms
         L     3,APAP4            get @ PA in PASS1 csect
         MVI   2(3),C' '          ) clear
         MVC   3(97,3),2(3)       )  print area
         CLI   PAS45,X'FF'        SECOND USE OF PASS4 ?
         BE    EPS2               br. if not
* 4th pass only code
         MVC   LOC3,COAD          set current address to x'FFFFFF'
COLL     CLI   ADA,X'FF'          any addresses not processed ?
         BE    NCOL               br. if not
         BAL   9,AFT              call AFT subroutine
         B     COLL               and see if ADA set now
NCOL     L     2,APAP4            get @ PA in PASS1 csect
* print the common areas
         L     3,NEXT4            get @ NEXT in ESD2 csect
         LR    4,3
         LA    4,4(4)             get @ first entry
         L     3,0(3)             get number of EXTRNs
         SR    5,5
         CR    5,3                any EXTRNs ?
         BE    NEXE               br if none
ESDC     CLC   12(3,4),FZ4        common length = x'000004' ?
         BE    NEXBE              not a common area if so
         CLC   12(3,4),ZZ4        common length zero ?
         BE    NEXBE              not a common area if so
         CLI   12(4),C' '         common length spaces ?
         BE    NEXBE              not a common area if so
         MVC   DSA+1(3),12(4)     copy common area length
         MVC   64(3,2),COM4       copy c'COM'
         MVC   55(8,2),0(4)       copy common area name
         MVC   BC(1),0(4)
         LA    4,15(4)
         L     14,PRINT4          get @ PRINT csect
         CNOP  2,4
         BALR  14,14              call PRINT
         DC    A(PA)              @ PA in PASS1 csect
         MVC   64(2,2),DS4        copy c'DS'
         L     5,DSA              get common area length
         CVD   5,DWC              make it PD
         UNPK  DW4(4),DWC+4(4)    ) make it
         OI    DW4+3,X'F0'        )  printable
         MVC   70(4,2),DW4        copy to output area
         MVI   74(2),C'C'
         CLI   BC,C' '
         BNE   PCM
         MVI   55(2),C'B'
         MVC   56(5,2),BZ5        copy c'00000'
PCM      L     14,PRINT4          get @ PRINT csect
         CNOP  2,4
         BALR  14,14              call PRINT
         DC    A(PA)              @ PA in PASS1 csect
NEXBE    BCT   3,ESDC             loop if more EXTRNs to check
NEXE     BCR   0,0
* print the equate table at the end of the listing
         SR    3,3                YES
         C     3,NEQT             no equates ?
         BE    ENAD               br if no equates to print
         MVC   AEQT(4),AEQTI      GENERATE EQATE TABLE
         L     3,NEQT             get number of equates
NQB      ST    3,NEQT             save number of equates
         L     6,AEQT             get @ first equate
         MVC   CX44(4),0(6)
         MVC   BCDA5(4),0(6)
         L     7,CX44
         A     7,4(6)
         ST    7,CX45
         ST    7,BCDA6
         L     5,4(6)             Bug fix !!!                 CFK*APR99
         LA    6,8(6)             calc @ next equate
         ST    6,AEQT             save @ next equate to process
         CVD   5,DLC4             Bug !!!, this never got loaded
         UNPK  RGL4(4),DLC4+4(4)
         OI    RGL4+3,C'0'
         L     14,CXN4            get @ CXN csect
         CNOP  2,4
         BALR  14,14              call CXN
CX44     DC    F'0'               CONVERT TO BCD
         DC    F'0'
         DC    F'0'
         L     14,CXN4            get @ CXN csect
         CNOP  2,4
         BALR  14,14              call CXN
CX45     DC    F'0'
         DC    F'0'               CONVERT TO BCD
         DC    F'0'
         L     14,ABSC5           get @ BSC csect
         CNOP  2,4
         BALR  14,14              call BSC
BCDA5    DC    F'0'               FETCH SYMBOL
         DC    F'0'
         DC    F'0'
         L     14,ABSC5           get @ BSC csect
         CNOP  2,4
         BALR  14,14              call BSC
BCDA6    DC    F'0'               FETCH SYMBOL
         DC    F'0'               P
         DC    F'0'
         L     3,APAP4            get @ PA in PASS1 csect
         CLI   BCDA6,C' '
         BE    MVX45
         MVC   55(8,3),BCDA6
         B     MVEQ
MVX45    MVC   55(6,3),CX45+2
         CLI   CX45+2,C'1'
         BE    MVCB
         MVI   55(3),C'A'
         B     MVEQ
MVCB     MVI   55(3),C'B'
MVEQ     MVC   64(3,3),EQU        copy c'EQU'
         CLI   BCDA5,C' '
         BE    MVX44
         LA    3,2(3)
         MVC   68(8,3),BCDA5
         LA    4,BCDA5+7
CLEQ     CLI   0(4),C' '          end of symbol ?
         BNE   MVQP               br. if end found
         BCT   4,SQ1              subtract 1 from r4
SQ1      BCT   3,CLEQ             loop if more to process
MVX44    MVC   70(6,3),CX44+2
         CLI   CX44+2,C'1'
         BE    MVCB2
         MVI   70(3),C'A'
         B     MVQP
MVCB2    MVI   70(3),C'B'
MVQP     MVI   76(3),C'+'         add + sign
         LA    5,3
         LA    4,RGL4
MQQ2     CLI   0(4),C'0'          find 1st sig char of offset
         BNE   MQQ
         LA    4,1(4)
         BCT   5,MQQ2             loop back
MQQ      EX    5,MVQQ             MVC   77(1,3),0(4)
         L     14,PRINT4          PRINT EQU
         CNOP  2,4
         BALR  14,14              call PRINT
         DC    A(PA)              @ PA in PASS1 csect
         L     3,NEQT             get number of equates
         BCT   3,NQB              br if more to print
         ST    3,NEQT             store none left
ENAD     L     3,APAP4            PRINT END
         MVC   64(3,3),ENDF4      copy c'END '
         L     4,NPROGA           get @ NPROG in ESD0 csect
         MVC   70(8,3),6(4)       copy csect name onto END card
         L     14,PRINT4          get @ PRINT csect
         CNOP  2,4
         BALR  14,14              call PRINT
APAP4    DC    A(PA)              @ PA in PASS1 csect
         MVI   PAS45,X'FF'        flag not 2nd use of PASS4
         L     3,COTR4            get @ COTR csect
         MVI   2(3),X'00'         clear control flag
         L     3,APASS5           STOP
         BALR  14,3               to PASS5
* PASS5 will not return
* this code only executed on the 2nd pass, ie 1st use of PASS4
EPS2     MVI   PAS45,X'00'        flag 2nd use of PASS4
         SR    3,3                ) clear KEY4
         ST    3,KEY4             )  (FTXT parm)
         L     3,APASS3           get @ PASS3 csect
         BALR  14,3               call PASS3
* PASS3 does not return here, it returns to the start of PASS4
LFTXT5   MVC   RT4+8(3),LOC3      copy current address
         MVC   RT4+11(1),INST4+8  copy AXNFLG1
         MVC   LEN4(4),KEY4+4     copy instruction length
         MVC   RT4(8),INST4       copy instruction TEXT
         L     14,ROUT4           BRANCH TO DECODING
         CNOP  6,8                ROUTINE
RF5      BALR  14,14
         DC    A(PA)              @ PA in PASS1 csect
LEN4     DC    F'0'               instruction length
RT4      DC    D'0'               instruction TEXT
         DC    F'0'               3 byte IC, followed by AXNFLG1
         CLI   SIN,X'01'
         BE    GONE
         MVC   FPTL(8),KEY4       copy FTXT output to SPPR parms
         MVC   FPTL+8(12),INST4   copy FTXT output to SPPR parms
         MVC   FPTL+20(8),LEN4    copy instruction length to SPPR
         MVC   FPTL+28(4),ROUT4   pass @ decoding routine to SPPR
         CLC   RT4(4),IMM         is instruction TXT C'IMM=' ?
         BNE   SPRT
         MVI   SIN,X'01'
         MVI   KEY4+3,X'02'
         MVI   FPTL+3,X'02'
SPRT     L     14,ASPPR           get @ SPPR csect
         CNOP  2,4
         BALR  14,14              call SPPR
FPTL     DC    8F'0'
         DC    F'0'
         MVC   KEY4(8),FPTL
         MVC   LEN4(4),FPTL+20
         CLI   FPTL+28,X'01'
         BE    LFTXT4             loop back
         CLI   FPTL+28,X'02'
         BNE   GONE
         L     14,ROUTC           get @ CONST csect
         ST    14,ROUT4
         B     RF5                go back to call CONST
GONE     LA    13,RETD            set return address for DECOMP
         MVC   PAR+1(3),LOC3      setup DECOMP
         MVC   PAR+4(8),INST4      parms
         MVC   PAR+12(4),ONE      copy f'1'
         CLC   ROUT4(4),ACONST    is it @ CONST csect ?
         BNE   CARL
         XC    PAR+12(4),PAR+12   clear DECOMP parms
         B     BDCM
CARL     CLC   ROUT4(4),AARL      rout4 = @ ARL csect ?
         BNE   BDCM
         MVC   PAR+12(4),X84      copy x'84000000'
         L     1,ASBCZ            get @ SBCZ in ARL csect
         CLI   0(1),X'FF'
         BE    BDCM
         MVC   PAR+13(3),ASBCZ+1  copy @ SBCZ in ARL csect
BDCM     L     15,ADECO           get @ DECOMP csect
         CNOP  2,4
         BALR  1,15               call DECOMP
PAR      DC    6F'0'
RETD     CLI   PAS45,X'FF'        2nd use of PASS4 ?
         BE    LFTXT4             br. if not
*** DECOMP has the following code
*DECO     TITLE 'DECOMP DUMMY'
*DECOMP   CSECT
*         USING *,15
*         L     15,20(1)
*         BR    13
*         END
*** end of DECOMP code
* 4th pass only code
         L     3,APAP4            get @ PA in PASS1 csect
         CLI   64(3),C' '         anything to print ?
         BE    LSPK               br if not
         L     4,LNCT             get LINE COUNT
         LA    4,1(4)             add 1
         ST    4,LNCT             save new line count
         MVC   47(6,3),NED        copy EDit mask
         CVD   4,DLC              make line count decimal
         ED    47(6,3),DLC+5      add line count to listing
         L     14,PRINT4          get @ PRINT csect
         CNOP  2,4                PRINT A LINE
         BALR  14,14              call PRINT
         DC    A(PA)              @ PA in PASS1 csect
LSPK     L     3,PABF4            get @ PAB in PASS1 csect
         CLI   0(3),X'FF'         IS SECOND LINE
         BNE   LFTXT4             TO BE PRINTED
         CLI   3(3),C' '          YES
         BE    LPA4
         MVI   0(3),C' '
         MVC   CD5+3(5),3(3)
         L     14,ACDN            CONVERT TO HEX
         CNOP  2,4
         BALR  14,14              call CDN csect
CD5      DC    C'0000'
         DC    F'0'
         DC    F'0'
         L     3,PABF4            get @ PAB in PASS1 csect
         MVC   LOC3,CD5+5         set current address
         BAL   9,AFT              call AFT subroutine
LPA4     L     4,APAP4            get @ PA in PASS1 csect
         L     3,PABF4            get @ PAB in PASS1 csect
         MVC   55(8,3),55(4)
         MVC   1(90,4),0(4)
         MVI   0(3),C' '
         L     4,LNCT             get line count
         LA    4,1(4)             add 1
         ST    4,LNCT             save new line count
         MVC   47(6,3),NED        copy EDit mask
         CVD   4,DLC              make line count decimal
         ED    47(6,3),DLC+5      add line count to listing
         L     14,PRINT4          PRINT A LINE
         CNOP  2,4
         BALR  14,14              call PRINT
PABF4    DC    A(PAB)             @ PAB in PASS1 csect
         B     LFTXT4             loop back
MVQQ     MVC   77(1,3),0(4)       EXecuted instruction
IMM      DC    C'IMM='
HUD      DC    F'99'                size of equate table
FF94     DC    F'59'                constant
COTR4    DC    A(COTR)              @ COTR csect
ALCT4    DC    A(LCT)               @ LCT in PRINTA csect
DRT      DC    D'0'
DLC      DC    D'0'
LNCT     DC    F'0'                 line count
AFTXT4   DC    A(FTXT)              @ FTXT csect
STW4     DC    F'1'                 not used ?
SEV4     DC    F'7'                 constant
FZ4      DC    X'000004'            constant
PRINT4   DC    A(PRINT)             @ PRINT csect
NPROGA   DC    A(NPROG)             @ NPROG in ESD0 csect     CFK*JAN00
US4      DC    A(USING)             @ USING csect
ASPPR    DC    A(SPPR)              @ SPPR csect
APLCB    DC    A(PLCB)              @ PLCB in SPPR csect
NED      DC    X'402020202121'      EDit mask for line count
APASS5   DC    A(PASS5)             @ PASS5 csect
ENDF4    DC    C'END '              constant
APASS3   DC    A(PASS3)             @ PASS3 csect
CXN4     DC    A(CXN)               @ CXN csect
ABSC5    DC    A(BSC)               @ BSC csect
BART     DC    A(ART)               @ ART csect
XSX      DC    F'96'
B15      DC    F'0'
ZZ4      DC    F'0'                 constant
AEQTI    DC    A(EQT)               constant
AEQT     DC    A(EQT)               @ next free slot in equate table
NEQT     DC    F'0'                 number of equates in table
DLC4     DC    D'0'
RGL4     DC    F'0'
EQU      DC    C'EQU '              constant
AFTA     DC    F'0'                 USST and AFT save return adr. here
ALCOM4   DC    A(LCOM)              @ LCOM in ESD5 csect
EQTE     DC    C'**  MORE THAN 99 EQUATES '
ADB      DC    F'0'
FT08     DC    X'000008'            constant
ADBC     DC    F'0'
ADF      DC    F'0'                 flag
EXTRN    DC    C'EXTRN'             constant
ENTRY    DC    C'ENTRY'             constant
CSECT    DC    C'CSECT'             constant
RMODEANY DC    C'RMODE ANY'         constant                  CFK*JAN00
AMODEANY DC    C'AMODE ANY'         constant                  CFK*JAN00
NENT4    DC    A(NENT)              @ NENT in ESD1 csect
NEXT4    DC    A(NEXT)              @ NEXT in ESD2 csect
TXTB4    DC    A(TXTB)              @ TXTB in TXT csect
TXTS4    DC    A(TXTS)              @ TXTS in TXT csect
AENDA    DC    A(ENDA)              @ ENDA in TXT csect
FFBR     DC    X'90ECD00C'          constant, STM  14,12,12(13)
SKY      DC    F'0'                 flag
BRT      DC    F'0'                 save r3 during USST/USING call
ACDN     DC    A(CDN)               @ CDN csect
ROUTC    DC    A(CONST)             @ CONST csect
ASAVC    DC    A(SAVA)              @ SAVA csect
BCV4     DC    A(BCV)               @ BCV csect
USI4     DC    C'USING '            constant
COM4     DC    C'COM '              constant
DS4      DC    C'DS  '              constant
NXSX     DC    F'60'                constant
SIN      DC    F'0'
FEH      DC    X'9847'              constant
COAD     DC    X'FFFFFF00'          constant
DSA      DC    F'0'
DWC      DC    D'0'
DW4      DC    F'0'
BC       DC    F'0'
BZ5      DC    C'00000'             constant
F100     DC    F'4096'              constant
COBR     DC    F'0'
PLC      DC    F'0'                 ) these
COBRG    DC    F'48'                )  fields
COBA     DC    F'0'                 )   copied
ACT      DC    F'0'                 )    into
COBF     DC    F'0'                 )     PLCB
FFAD     DC    F'0'                 )      in
FFC      DC    F'0'                 )       SPPR
FORHF    DC    F'0'                 )        csect
PAS45    DC    X'FF000000'          ) flag, 1st byte made x'00' to
*                                     indicate the 2nd use of PASS4
ACONST   DC    A(CONST)             @ CONST csect
AARL     DC    A(ARL)               @ ARL csect
ADECO    DC    A(DECOMP)            @ DECOMP csect
ONE      DC    F'1'                 constant
X84      DC    X'84000000'          constant
ASBCZ    DC    A(SBCZ)              @ SBCZ in ARL csect
EQT      DS    100D                 table of equates to be output
         END
