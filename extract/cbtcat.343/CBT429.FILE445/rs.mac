RS       TITLE 'RS '
***********************************************************************
*                                                                     *
*           format the parameters of a RS format instruction          *
*                                                                     *
*    eg  STM   1,2,456(7)          if format = x'30', FMTFRS          *
*    or  SRA   1,456(7)            if format = x'31', FMTFRS1         *
*    or  PLO   1,456(7),2,789(10)  if format = x'32', FMTFRS2         *
*                                                                     *
*  input addressed by R14:                                            *
*    +0  - @ output buffer                                            *
*    +4  - instruction format                                         *
*    +5  - operand format                                             *
*    +6  - instruction length                                         *
*    +8  - instruction TEXT (4 or 6 bytes)                            *
*    +19 - instruction format from AXN table                          *
*    +20 - module returns to here                                     *
*                                                                     *
*  history:                                                           *
*    check instr. format to see if 2nd reg needed        CFK jun 1999 *
*    support FMTFRS2 (PLO)                               CFK dec 1999 *
*                                                                     *
***********************************************************************
         FMTPARMS                 copy parameter map
RS       CSECT
         USING FMTPARMS,14        tell assembler about parameters
         BALR  13,0               setup base reg
         USING *,13               tell assembler
         EXTRN BCV                csect
         EXTRN ADDR               csect
         ST    14,RS14            save @ parms
         MVC   RSG+15(1),19(14)   pass instr. format to ADDR
         SR    2,2                )
         ST    2,RSG              ) clear ADDR parms
         ST    2,RSG+4            )
         MVC   RSG+8(4),0(14)     pass @ output buffer to ADDR
         MVC   RSG+2(2),10(14)    pass instr. address to ADDR
         MVI   RSG+4,X'01'        flag type 1 address
         ST    13,RSA+4           put our r13 where BSC expects it
         SR    2,2                clear
         ST    2,RSA               BCV parms
         MVC   RSA+3(1),9(14)     pass registers to BCV
         L     14,BCVS            FIND REGISTERS
         CNOP  2,4
         BALR  14,14              call BCV csect
RSA      DC    F'0'
         DC    F'0'               r13 reloaded from here
         L     14,ADDS            FIND ADDRESS
         ST    13,RSG+16          put our r13 where ADDR expect it
         CNOP  6,8
         BALR  14,14              call ADDR csect
RSG      DC    D'0'
         DC    D'0'
         DC    F'0'               r13 reloaded from here
         L     14,RS14            reload @ parms
         L     4,0(14)            get @ output buffer
         CLI   RSA,C'0'           reg 0-9 ?
         BNE   RS1                no
         MVC   70(1,4),RSA+1      yes - copy 1 byte reg no.
         BCTR  4,0                dec o/p buffer ptr
         B     RS2                and continue
RS1      MVC   70(2,4),RSA        copy 2 byte reg no.
RS2      MVI   72(4),C','         add ,
         CLI   FMTFMT,FMTFRS      2nd register needed ?
         BNE   RSOV               branch if 2nd reg not needed
         CLI   RSA+2,C'0'         reg 0-9 ?
         BNE   RS3                no
         MVC   73(1,4),RSA+3      yes - copy 1 byte reg no.
         BCTR  4,0                dec o/p bufer ptr
         B     RS4                and continue
RS3      MVC   73(2,4),RSA+2      copy 2 byte reg no.
RS4      MVI   75(4),C','         add 2nd ,
         LA    4,3(4)             allow for 2nd digit
RSOV     L     3,RSG+12           get length of address
         BCTR  3,0                - 1 for mvc
         EX    3,MVS              copy address to o/p buffer
         CLI   FMTFMT,FMTFRS2     any more to do ?            CFK*DEC99
         BNE   EXIT               branch if we are done       CFK*DEC99
         AR    4,3                calc @ end of 1st address   CFK*DEC99
         MVI   74(4),C','         add 3rd ,                   CFK*DEC99
         CLI   RSA+2,C'0'         reg 0-9 ?                   CFK*DEC99
         BNE   RS5                no                          CFK*DEC99
         MVC   75(1,4),RSA+3      yes - copy 1 byte reg no.   CFK*DEC99
         BCTR  4,0                dec o/p bufer ptr           CFK*DEC99
         B     RS6                and continue                CFK*DEC99
RS5      MVC   75(2,4),RSA+2      copy 2 byte reg no.         CFK*DEC99
RS6      MVI   77(4),C','         add 4th ,                   CFK*DEC99
         XC    RSG2,RSG2          clear ADDR parms            CFK*JAN00
         MVC   RSG2+8(4),0(14)    pass @ output buf to ADDR   CFK*JAN00
         MVC   RSG2+2(2),12(14)   pass instr. address to ADDR CFK*DEC99
         MVI   RSG2+4,X'01'       flag type 1 address         CFK*DEC99
         L     14,ADDS            FIND ADDRESS                CFK*DEC99
         ST    4,R4SAVE           save r4                     CFK*JAN00
         ST    13,RSG2+16         pass our r13 to ADDR        CFK*DEC99
         CNOP  6,8                                            CFK*DEC99
         BALR  14,14              call ADDR csect             CFK*DEC99
RSG2     DC    D'0'                                           CFK*DEC99
         DC    D'0'                                           CFK*DEC99
         DC    F'0'               r13 reloaded from here      CFK*DEC99
         L     4,R4SAVE           reload r4                   CFK*JAN00
         L     14,RS14            reload @ parms              CFK*DEC99
         L     3,RSG2+12          get length of address       CFK*DEC99
         BCTR  3,0                - 1 for mvc                 CFK*DEC99
         EX    3,MVS2             copy address to o/p buffer  CFK*DEC99
EXIT     DS    0H                 exit point                  CFK*DEC99
         BAL   14,20(14)          return
MVS      MVC   73(1,4),RSG        EXecuted instruction
MVS2     MVC   78(1,4),RSG2       EXecuted instruction        CFK*DEC99
         DC    C'IMM='
BCVS     DC    A(BCV)             @ bcv csect
ADDS     DC    A(ADDR)            @ addr csect
R4SAVE   DC    F'0'               space to save reg 4         CFK*JAN00
RS14     DC    F'0'               space to save reg 14
         END
