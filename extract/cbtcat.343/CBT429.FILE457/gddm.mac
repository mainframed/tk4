./     ADD     NAME=$$GDOC
./     NUMBER  NEW1=100,INCR=100

                     G R A P H I C S   P R O G R A M S

          RELEASE 2.0     1  JULY  1991

          COURTESY     JIM MARSHALL, CAPT, USAF-RET
                       1-301-436-6580
          -------------------------------------------------------------

               This is a collection of FORTRAN programs that were coded
          to demonstrate GDDM functions on the IBM 3279 terminals we
          had. Captain Frank FINNERN was the coder for these programs
          and did a great job. He was assigned down in SAN ANTONIO, TX
          at the 2ISG. I took the code with me to FORT MEADE.

               Please do not dismay if you see these things coded in
          FORTRAN. For those with MVS and MVS/XA who can not afford to
          buy FORTRAN (likely story), I have put a free unsupported
          version of the OS/360 FORTRAN G (IEYFORT) compiler onto the
          SHARE and CBT tape. It works fine and will drive these
          programs.

          D I S C L A I M E R S  ×××××
          *********************************************
          Use all of these at your own risk, naturally×
          *********************************************

               The file is constructed as follows : the source is put
          in as a name. Then if there is any instructions, guidance,
          etc..., that member is suffixed with a #. If the JCL is
          involved, then most always the JCL is suffixed with a $.

          For example :  XXXX    - source member
                         XXXX#   - additional information
                         XXXX$   - JCL to install


          CHANGE ACTIVITY LOG : none
          -------------------------------------------------------------

          Summary of modules contained :
          ------------------------------
               (O) Origin : tape CBT 93 AUG
                            (1) : file 300, member GDDM
                            (2) : file 300
                            (3) : file 134

          Utility   Rel  Description                                (O)
          --------  ---  -----------------------------------------  ---

          ANIM           Some animations (Assembler programming     (3)
                         examples using local full-screen macros)

          CODEBUST  2X   A true "BUG BUSTER" flag                   (1)

          ILRBIRD        Full-screen writes demonstration           (2)

          LOGO      2X   Our LOGO for the unit                      (1)

          NITEFLT   2X   See the SPACE SHUTTLE streak across the    (1)
                         night sky

          SABREBAT  2X   AIR FORCE X-29 airplane                    (1)

          SHUTTLE   2X   SPACE SHUTTLE launch                       (1)

          ZOOM      2X   Zoom in and look inside the cockpit        (1)
                         (module ZOOMS added)

          Notes : 1. These members have been arranged by MOINIL P.A.
          =======    Modules ZOOMS, ILRBIRD and ANIM are Assembler H,
                     others are adapted to be compiled in FORTRAN VS.
                  2. ANIM needs as pre-requisite the installation of
                     routine FSRTN.

          Remark : ANIM program verify the display size and QUERY
          ======== reply data to be sure it is able to run on that
                   terminal without giving the message SCREEN ERASURE
                   which causes i.e. the breakdown of the TSO session
                   on IBM-PS2 with EXTRA versions (as we have).
                   I suggest you code a little TSO-command, based on
                   this check, in order to select the invocation of any
                   other GDDM demonstration, just to prevent ... crash
                   (as example, I have included my command TGTERM too).
                   To print/debug the QUERY reply data of a terminal
                   use my T3270FS command (see also ISPF panel PAJVRS).

          Data-sets names :
          =================

          Here follows the list of the data-sets names defined to
          generate and use GDDM demonstrations at our installation
          (see members named ...$ (JCL) to make your changes) :

          <User-id>....
          ->.USER.DEMO.ORIGIN (this library, created in member GDDM$)
          ->.USER.DEMO.DATA (compiled load modules library, also
                             created in member GDDM$)
          ->.SOURCE.FILE0 (the library of basic material)
          ->.TARGET.CMDLIB (the load library of TSO commands)
          ->.TARGET.RTNLIB (the load library of routine FSRTN)

          <System-id>....               <System-id>....
          SYS1.MACLIB                   SYS1.VSF2COMP
          SYS1.MODGEN                   SYS1.VSF2FORT
                                        SYS1.GDDMLOAD

                              G O O D     L U C K

                                        MOINIL P.A. (03/23/94)
                                        Computing Centre (TP 361)
                                        J.R.C. - Ispra Establishment
                                        21020 ISPRA (VA), ITALY
./     ADD     NAME=ANIM
./     NUMBER  NEW1=100,INCR=100
ANIM     TITLE 'TEST SOME ANIMATIONS ...'
         PRINT OFF
* Here follows the Assembly SYSPARM(...) Options process which allows
*        you to select :
*        1. NONE or omitted = no list of macros development
*           FULL = list all macros development (unless system DSECTs)
*        2. US or omitted = use USA display characters
*           EU = use EUROPEAN display characters
*        How to define Options : i.e - SYSPARM(FULL)
*                                      SYSPARM(,EU)
*        If you want add another selection, you can easily do it
*        adjusting below the statements marked "<===", define the new
*        OPT(N) default, and supply the new option coding just before
*        the comment card marked "---> ADD OPTION(S)".
         GBLC  &EULST,&EUDCH                                  <===
         LCLA  &CN,&CT,&LN,&MX,&SB,&ST
         LCLC  &OPT(2)                                        <===
&MX      SETA  2                                              <===
&OPT(1)  SETC  'NONE'
&OPT(2)  SETC  'US'
&CN      SETA  K'&SYSPARM
         AIF   (K'&SYSPARM EQ 0).SP99
&CT      SETA  1
&SB      SETA  1
&ST      SETA  &CT
.SP1     AIF   ('&SYSPARM'(&CT,1) EQ ',').SP2
&CT      SETA  &CT+1
         AIF   (&CT LE &CN).SP1
.SP2     ANOP
&LN      SETA  &CT-&ST
         AIF   (&LN EQ 0).SP3
&OPT(&SB) SETC '&SYSPARM'(&ST,&LN)
.SP3     ANOP
&SB      SETA  &SB+1
         AIF   (&SB GT &MX).SP99
&CT      SETA  &CT+1
         AIF   (&CT GT &CN).SP99
&ST      SETA  &CT
         AGO   .SP1
.SP99    ANOP
&EULST   SETC  'GEN'
         AIF   ('&OPT(1)' EQ 'FULL').SL1
&EULST   SETC  'NOGEN'
.SL1     ANOP
&EUDCH   SETC  'EUROPE'
         AIF   ('&OPT(2)' EQ 'EU').SL99
&EUDCH   SETC  'USA'
.SL99    ANOP
* ---> ADD OPTION(S)
         MACRO
&LABEL   #GO   &NAME,&AR=I
         AIF   ('&NAME' NE '').A
         MNOTE 8,'--- NAME OF ROUTINE MISSING (IT IS MANDATORY) ---'
         AGO   .MEND
.A       AIF   ('&AR' EQ 'D').B
&LABEL   L     R15,=A(&NAME)
         AGO   .C
.B       ANOP
&LABEL   L     R15,&NAME
.C       BASR  R14,R15
.MEND    MEND
         PRINT ON
ANIM     START 0
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*    Purpose : test some animations on 3270 display terminal with     *
*              graphics support (GDDM).                               *
*                                                                     *
*    Origin :  CBT 93 AUG tape, file 134.                             *
*              Updates : all tests grouped in one module and use of   *
*                        FSRTN routine (FULL-SCREEN).                 *
*                   by : MOINIL P.A.                                  *
*                        Computing Centre (TP 361)                    *
*                        J.R.C. - Ispra Establishment                 *
*                        21020 Ispra (VA), Italy                      *
*                                                                     *
*    IBM manuals used : GA23-0059 3270 Information Display System     *
*                                 Data Stream Programmer's Reference  *
*                       SC33-0101 Graphical Data Display Manager Base *
*                                 Programming Reference               *
*                       SC33-0148 Graphical Data Display Manager      *
*                                 Application Programming Guide       *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
         PRINT &EULST
        $DEFREG
         EJECT
        $XENT  BASE=R12
         ST    R1,RPARM            SAVE ENTRY R1
*------- CHECK IF WE ARE ENTERED AS TSO COMMAND
        #GO    CHECK
         B     *+L'*(R15)          HOW COMPLETE?
         B     *+L'*+8             0 = OK
         LA    R2,8                4 = ERROR, SET CC=8
         B     QUIT
*------- VERIFY TERMINAL FEATURES
        #GO    VERFY
         B     *+L'*(R15)          HOW COMPLETE?
         B     *+L'*+4             0 = OK
         B     LEAVE               4 = ERROR
*------- DISPLAY SOME TERMINAL CHARACTERISTICS
        #GO    DTINF
         B     *+L'*(R15)          HOW COMPLETE?
         B     *+L'*+4             0 = OK, CONTINUE
         B     LEAVE               4 = ERROR OR END
*------- INITIALIZATION OF TITLES DISPLAY
        #GO    INITT
*------- SELECTION DISPLAY
RXSEL   #GO    SELDS
         B     *+L'*(R15)          HOW COMPLETE?
         B     *+L'*+8             0 = OK, CONTINUE
         B     LEAVE               4 = ERROR
         B     SHUT                8 = END
         LTR   R3,R1               SOME SELECTION?
         BZ    VXALL               NO, DO ALL
*------- EXECUTE A SINGLE ANIMATION
         BCTR  R3,0
         SLL   R3,2
         AL    R3,=A(VANIM,L'VANIM,VLAST)
        #GO    0(R3),AR=D
         B     *+L'*(R15)          HOW COMPLETE?
         B     RXSEL               0 = OK, CONTINUE
         B     LEAVE               4 = ERROR OR END
*------- EXECUTE ALL ANIMATIONS SEQUENTIALLY
VXALL    LM    R3,R5,=A(VANIM,L'VANIM,VLAST)
VEXEC   #GO    0(R3),AR=D
         B     *+L'*(R15)          HOW COMPLETE?
         B     *+L'*+4             0 = OK, CONTINUE
         B     LEAVE               4 = ERROR OR END
         BXLE  R3,R4,VEXEC
         B     RXSEL
*------- ANIMATIONS TERMINATED
SHUT     XR    R2,R2               SET CC=0
         B     *+L'*+4
LEAVE    LA    R2,8                SET CC=8
         MVI   OPTFS,FSEXIT        EXIT FULL-SCREEN MODE
        @FS    OPTFS,MF=(E,FSPARM)
QUIT     XR    R0,R0
         ICM   R0,B'0011',ERRMSL
         BZ    NOMSG
         L     R1,ERRMSA
        TPUT   (1),(0)             PUT OUT ERROR MESSAGE
NOMSG    LR    R15,R2              GET CC
        $XRET  CC=(R15)
         SPACE 1
*------- CONSTANTS AND WORK-AREAS
DBLW     DC    D'0'
WRKFL1   DC    CL8' '
WRKFL2   DC    CL8' '
RPARM    DC    A(*-*)
ATIOT    DC    A(*-*)
ATSO     DC    A(*-*)
APSCB    DC    A(*-*)
ASCRIPTR DC    A(*-*)              PTR TO ACTIVE SCREEN IMAGE
ASCRLGTH DC    A(*-*)              PTR TO LENGTH OF ACTIVE SCREEN IMAGE
ASPS     EQU   *-ASCRIPTR
ASCRRTN  DC    A(*-*)              PTR TO PROCESS READ SCREEN ROUTINE
ASPL     EQU   *-ASCRIPTR
FSPARM  @FS    ,,,MF=L
FSBFSZ   DC    F'0'
ERRMSA   DC    F'0'
ERRMSL   DC    F'0'
RQSZ     DC    0H'0',AL1(24,80)    REQUESTED SCREEN SIZE
MAXISX   DC    H'0'
MAXISY   DC    H'0'
TXT1XY   DC    2H'0'               TITLES TEXT CO-ORD'S
TXT2XY   DC    2H'0'
TXQXY    DC    2H'0'
TXTW     DC    H'0'
TXTH     DC    H'0'
TXQW     DC    H'0'
TXQH     DC    H'0'
         SPACE 1
VANIM    DC    A(ANIM1,ANIM2,ANIM3,ANIM4,ANIM5)
         DC    A(ANIM6,ANIM7,ANIM8,ANIM9,ANIM10)
         DC    A(ANIM11)
VLAST    EQU   *-L'VANIM           END OF ANIMATIONS TEST VECTOR
         SPACE 1
TERMAT  @FST   ,
         PRINT GEN
OPTFS   @FSO   ,
         PRINT &EULST
SWXEQ    DC    XL1'0'
FL81     EQU   X'80'               USABLE AREA FOUND
FL85     EQU   X'40'               CHARACTER SETS FOUND
FLA6     EQU   X'20'               IMPLICIT PARTITION FOUND
FL81S    EQU   X'08'               USABLE AREA SHORT
FL85S    EQU   X'04'               CHARACTER SETS SHORT
FLA6S    EQU   X'02'               IMPLICIT PARTITION SHORT
SWA6     DC    XL1'0'
FLA61    EQU   X'80'
FLA62    EQU   X'40'
INCMD    DC    CL1' '              INPUT COMMAND
SELIN    DC    CL2' '              SELECTION INPUT
         SPACE 1
Q81R     EQU   *                   8181 = USABLE AREA
Q81FLAGS DC    XL2'0'              VARIOUS FLAGS
Q81WUA   DC    XL2'0'              WIDTH OF USABLE AREA
Q81HUA   DC    XL2'0'              HEIGHT OF USABLE AREA
Q81UMDXY DC    XL1'0'              UNIT OF MEASURE DOTS X AND Y
Q81DSX   DC    XL4'0'              DOT SPACING X
Q81DSY   DC    XL4'0'              DOT SPACING Y
Q81NXDC  DC    XL1'0'              NUMBER X-UNITS DEFAULT CELL
Q81NYDC  DC    XL1'0'              NUMBER Y-UNITS DEFAULT CELL
Q81L     EQU   *-Q81R
         SPACE 1
*------- LITERAL POOL
        LTORG
         EJECT
*======= CHECK ENVIRONMENT
*              RETURN CODE : 0 = OK, CONTINUE
*                            4 = ERROR
         SPACE 1
CHECK   $XENT  BASE=R9
         L     R2,RPARM            GET ENTRY R1
        EXTRACT ATIOT,'S',FIELDS=(TIOT,TSO,PSB)
         L     R1,APSCB            YES, GET PSCB ADDRESS
         LTR   R1,R1               TSO RUNNING?
         BZ    REJECT              NO, I DON'T LIKE BATCH ...
         L     R15,ATSO            TSO-FLAG ADDRESS
         TM    0(R15),X'80'        TSO FOREGROUND?
         BO    OKTSO               YES
REJECT  WTO    ' -> Only TSO FOREGROUND command allowed',              X
               ROUTCDE=11,DESC=7
         B     CHECKZ
         USING CPPL,R2
         USING PSCB,R1
OKTSO    CLC   PSCBUPT,CPPLUPT     CPPL+4 = UPT ADDRESS?
         BNE   *+L'*+10            NO
         DROP  R1
         CLC   APSCB(L'APSCB),CPPLPSCB CPPL+8 = PSCB ADDRESS?
         BE    OKCMD               YES, TSO COMMAND
         LR    R1,R2
         USING IKJEBECA,R1
         L     R2,CAPTTMP          CPPL ADDRESS
         DROP  R1
         CLC   APSCB(L'APSCB),CPPLPSCB CPPL+8 = PSCB ADDRESS?
         BE    OKCMD               YES, TSO SUB-COMMAND
         DROP  R2
         LA    R0,ERRCMD
         LA    R1,L'ERRCMD
         B     CHECKY
OKCMD   @FSI   FSBFSZ,TERMAT,RQSZ,MF=(E,FSPARM) INITIALIZE FULL-SCREEN
         LTR   R15,R15
         BZ    CHECKX              OK, RC=0
         LA    R0,ERRFIN
         LA    R1,L'ERRFIN
CHECKY   ST    R0,ERRMSA
         STH   R1,ERRMSL
CHECKZ   LA    R15,4               SET RC=4
CHECKX  $XRET  CC=(R15)
         SPACE 1
ERRCMD   DC    C' -> Only TSO command or sub-command allowed'
ERRFIN   DC    C' -> Full-screen initialization failed'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         EJECT
*======= VERIFY TERMINAL
*              RETURN CODE : 0 = OK, CONTINUE
*                            4 = ERROR
         SPACE 1
VERFY   $XENT  BASE=R9
         MVC   ASCRIPTR(ASPS),=A(SCRNI,SCRNIL) SET PTR'S
        #GO    FSCOUT              SEND TO SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     VERFY1              0 - OK
         LA    R0,ERRCLR           4 - ERROR
         LA    R1,L'ERRCLR
         B     VERFYZ
VERFY1   TM    FSATTRB3,FSTQUERY   CAN DO QUERY ON THIS TUBE?
         BO    VERFY2              YES
         LA    R0,ERRRQY           NO, SKIP (NO COLORS, ...)
         LA    R1,L'ERRRQY
         B     VERFYZ
VERFY2  @FSQ   ,                   DO IT
         LTR   R15,R15
         BZ    VERFY3
         LA    R0,ERRQRF
         LA    R1,L'ERRQRF
         B     VERFYZ
VERFY3   LR    R2,R1               QUERY REPLY DATA
         LR    R3,R1
         ALR   R3,R0
         LA    R1,1
         SLR   R3,R1
VLOOP    ALR   R2,R1
         CLR   R2,R3
         BH    VTEST
         CLC   2(2,R2),=XL2'8181'  USABLE AREA?
         BNE   VC85                NO
         OI    SWXEQ,FL81
         CLC   0(2,R2),=AL2(21)
         BNL   *+L'*+8
         OI    SWXEQ,FL81S
         B     VNEXT
         MVC   Q81R(Q81L),4(R2)
         B     VNEXT
VC85     CLC   2(2,R2),=XL2'8185'  CHARACTERS SETS?
         BNE   VCA6                NO
         OI    SWXEQ,FL85
         CLC   0(2,R2),=AL2(8)
         BNL   *+L'*+8
         OI    SWXEQ,FL85S
         B     VNEXT
         MVC   Q85R(Q85L),4(R2)
         B     VNEXT
VCA6     CLC   2(2,R2),=XL2'81A6'  IMPLICIT PARTITION?
         BNE   VNEXT               NO
         OI    SWXEQ,FLA6
         CLC   0(2,R2),=AL2(24)
         BNL   *+L'*+8
         OI    SWXEQ,FLA6S
         B     VNEXT
         CLC   6(2,R2),=XL2'0B01'
         BE    *+L'*+8
         OI    SWA6,FLA61
         B     VNEXT
         CLC   17(2,R2),=XL2'0B02'
         BE    *+L'*+8
         OI    SWA6,FLA62
         B     VNEXT
         MVC   QA6WD(L'QA6WD+L'QA6HD),9(R2)
         MVC   QA6WCD(L'QA6WCD+L'QA6HCD),20(R2)
VNEXT    XR    R1,R1
         ICM   R1,B'0011',0(R2)
         B     VLOOP
VTEST    TM    SWXEQ,FL81+FL85+FLA6
         BO    VTEST1              ALL FOUND
         LA    R1,ERRQMS+14
         TM    SWXEQ,FL81
         BO    VT85
         MVC   0(2,R1),=CL2'81'
         LA    R1,2(R1)
VT85     TM    SWXEQ,FL85
         BO    VTA6
         CLI   ERRQMS+14,C' '
         BE    VT85M
         MVI   0(R1),C'/'
         LA    R1,1(R1)
VT85M    MVC   0(2,R1),=CL2'85'
         LA    R1,2(R1)
VTA6     TM    SWXEQ,FLA6
         BO    VTNFM
         CLI   ERRQMS+14,C' '
         BE    VTA6M
         MVI   0(R1),C'/'
         LA    R1,1(R1)
VTA6M    MVC   0(2,R1),=CL2'A6'
         LA    R1,2(R1)
VTNFM    MVC   1(9,R1),=CL9'not found'
         LA    R0,ERRQMS
         LA    R1,L'ERRQMS
         B     VERFYZ
VTEST1   TM    SWXEQ,FL81S+FL85S+FLA6S
         BZ    VTEST2              NONE SHORT
         LA    R1,ERRQMS+14
         TM    SWXEQ,FL81S
         BZ    VT85S
         MVC   0(2,R1),=CL2'81'
         LA    R1,2(R1)
VT85S    TM    SWXEQ,FL85S
         BZ    VTA6S
         CLI   ERRQMS+14,C' '
         BE    VT85SM
         MVI   0(R1),C'/'
         LA    R1,1(R1)
VT85SM   MVC   0(2,R1),=CL2'85'
         LA    R1,2(R1)
VTA6S    TM    SWXEQ,FLA6S
         BZ    VTSHM
         CLI   ERRQMS+14,C' '
         BE    VTA6SM
         MVI   0(R1),C'/'
         LA    R1,1(R1)
VTA6SM   MVC   0(2,R1),=CL2'A6'
         LA    R1,2(R1)
VTSHM    MVC   1(9,R1),=CL9'too short'
         LA    R0,ERRQMS
         LA    R1,L'ERRQMS
         B     VERFYZ
VTEST2   TM    SWA6,FLA61+FLA62
         BZ    VCHCK               Q-CODE A6 PROCESSED
         TM    SWA6,FLA61
         BZ    *+L'*+12
         LA    R0,ERRA61
         LA    R1,L'ERRA61
         B     VERFYZ
         LA    R0,ERRA62
         LA    R1,L'ERRA62
         B     VERFYZ
VCHCK    TM    Q81FLAGS,X'20'      OUTBOUND 3270DS S.F.?
         BZ    *+L'*+12            YES
         LA    R0,ERRMC1
         LA    R1,L'ERRMC1
         B     VERFYZ
         TM    Q81FLAGS,X'03'      12/14/16-BIT ADDRESSING ALLOWED?
         BO    *+L'*+12            YES
         LA    R0,ERRMC2
         LA    R1,L'ERRMC2
         B     VERFYZ
         TM    Q81FLAGS+1,X'60'    MATRIX AND CELLS?
         BZ    *+L'*+12            YES
         LA    R0,ERRMC3
         LA    R1,L'ERRMC3
         B     VERFYZ
         CLI   Q81UMDXY,X'01'      MILLIMETERS?
         BE    *+L'*+12            YES
         LA    R0,ERRMC4
         LA    R1,L'ERRMC4
         B     VERFYZ
         CLC   Q81NXDC(L'Q81NXDC+L'Q81NYDC),Q85DDMBW
         BE    *+L'*+12            YES
         LA    R0,ERRMC5
         LA    R1,L'ERRMC5
         B     VERFYZ
         XR    R0,R0
         ICM   R0,B'0101',Q81NXDC
         CLM   R0,B'1111',QA6WCD
         BE    *+L'*+12            YES
         LA    R0,ERRMC6
         LA    R1,L'ERRMC6
         B     VERFYZ
         CLC   Q81WUA(L'Q81WUA+L'Q81HUA),QA6WD
         BE    *+L'*+12            YES
         LA    R0,ERRMC7
         LA    R1,L'ERRMC7
         B     VERFYZ
         TM    Q85FLAGS,X'02'      CGCSID PRESENT?
         BO    VSRCH               YES
         LA    R0,ERRMC8
         LA    R1,L'ERRMC8
VERFYZ   ST    R0,ERRMSA
         STH   R1,ERRMSL
         LA    R15,4               SET RC=4
         B     VERFYX
VSRCH    L     R2,ATIOT            SEARCH DD IF SNAP AVAILABLE
         USING TIODSECT,R2
VSNAP    CLC   TIOELNGH(4),=F'0'
         BE    VINIT
         CLC   TIOEDDNM(L'TIOEDDNM),=CL8'SYSSNAP '
         BNE   *+L'*+4
         OI    OPTFS,FSSNAP        SET USER WANT SNAP SCREEN INPUT
         XR    R1,R1
         IC    R1,TIOELNGH
         ALR   R2,R1
         B     VSNAP
         DROP  R2
VINIT    XR    R15,R15             SET RC=0
VERFYX  $XRET  CC=(R15)
         SPACE 1
Q85R     EQU   *                   8185 = CHARACTER SETS
Q85FLAGS DC    XL2'0'              VARIOUS FLAGS
Q85DDMBW DC    XL1'0'              DEFAULT DOT MATRIX BLOCK WIDTH
Q85DDMBH DC    XL1'0'              DEFAULT DOT MATRIX BLOCK HEIGHT
Q85L     EQU   *-Q85R
*                                  81A6 = IMPLICIT PARTITION
QA6WD    DC    XL2'0'              WIDTH DEFAULT IPZ CELLS
QA6HD    DC    XL2'0'              HEIGHT DEFAULT IPZ CELLS
QA6WCD   DC    XL2'0'              WIDTH CHAR. CELL DEFAULT
QA6HCD   DC    XL2'0'              HEIGHT CHAR. CELL DEFAULT
         SPACE 1
ERRCLR   DC    C' -> Full-screen clear failed'
ERRRQY   DC    C' -> Can''t do QUERY on this tube'
ERRQRF   DC    C' -> Obtain QUERY reply data failed'
ERRQMS   DC    CL40' -> Q-code(s) '
ERRA61   DC    CL40' -> Q-code A6 : unexpected 1st parameter'
ERRA62   DC    CL40' -> Q-code A6 : unexpected 2nd parameter'
ERRMC1   DC    C' -> OUTBOUND 3270DS not supported in Q-code 81'
ERRMC2   DC    C' -> 12/14/16-bit addressing not allowed in Q-code 81'
ERRMC3   DC    C' -> Non-matrix type or PELs values in Q-code 81'
ERRMC4   DC    C' -> Unit of measure not millimeters in Q-code 81'
ERRMC5   DC    C' -> Q-codes 81-85 : cell units/matrix block default'
ERRMC6   DC    C' -> Q-codes 81-A6 : cell units/WCD-HCD default'
ERRMC7   DC    C' -> Q-codes 81-A6 : WUA-HUA/WD-HD cells default'
ERRMC8   DC    C' -> "CGCSID" absent in Q-code 85'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         SPACE 1
SCRNI    $FS   CC=EW,WCC=(RMDT),SBA=(24,79),MF=L
         $FS   SBA=(1,1),RA=(1,1,00),MF=L
         $FS   SBA=(1,1),SF=(IC),MF=L
SCRNIL   EQU   *-SCRNI
         EJECT
*======= DISPLAY SOME TERMINAL CHARACTERISTICS
*              RETURN CODE : 0 = OK, CONTINUE
*                            4 = ERROR OR END
         SPACE 1
DTINF   $XENT  BASE=R9
         L     R8,=A(INF,INFL,RSCRN)
         USING INF,R8              SCREEN IMAGE ADDRESSABILITY
         XR    R3,R3               DO X-AXIS COMPUTATION
         LR    R2,R3
         ICM   R3,B'0011',Q81WUA
         CVD   R3,DBLW
         MVC   WRKFL1,=XL8'4020202020202120'
         ED    WRKFL1,DBLW+4
         MVC   INFWUA(L'INFWUA),WRKFL1+L'WRKFL1-L'INFWUA
         XR    R0,R0
         IC    R0,Q81NXDC
         CVD   R0,DBLW
         MVC   WRKFL1,=XL8'4020202020202120'
         ED    WRKFL1,DBLW+4
         MVC   INFNUX(L'INFNUX),WRKFL1+L'WRKFL1-L'INFNUX
         MR    R2,R0
         CVD   R3,DBLW
         MVC   WRKFL1,=XL8'4020202020202120'
         ED    WRKFL1,DBLW+4
         MVC   INFTXU(L'INFTXU),WRKFL1+L'WRKFL1-L'INFTXU
         ICM   R0,B'1111',Q81DSX
         SRDL  R0,16
         CVD   R0,DBLW
         MVC   WRKFL1,=XL8'4020202020202120'
         ED    WRKFL1,DBLW+4
         SRL   R1,16
         CVD   R1,DBLW
         MVC   WRKFL2,=XL8'4020202020202120'
         ED    WRKFL2,DBLW+4
         LA    R14,WRKFL2+L'WRKFL2-2
         CLI   0(R14),C' '
         BE    *+L'*+4
         BCT   R14,*-8
         MVI   0(R14),C'/'
         BCTR  R14,0
         LA    R15,WRKFL1+L'WRKFL1-1
         CLI   0(R15),C' '
         BE    *+L'*+12
         MVC   0(1,R14),0(R15)
         BCTR  R14,0
         BCT   R15,*-16
         MVC   INFDSX(L'INFDSX),WRKFL2+L'WRKFL2-L'INFDSX
         LR    R14,R3
         SRL   R14,1
         STH   R14,MAXISX
         CVD   R14,DBLW
         MVC   WRKFL1,=XL8'4020202020202120'
         ED    WRKFL1,DBLW+4
         MVC   INFXCV(L'INFXCV),WRKFL1+L'WRKFL1-L'INFXCV
         MR    R2,R0
         DR    R2,R1
         CVD   R3,DBLW
         MVC   WRKFL1,=XL8'4020202020202120'
         ED    WRKFL1,DBLW+4
         MVC   INFGHS(L'INFGHS),WRKFL1+L'WRKFL1-L'INFGHS
         XR    R3,R3               DO Y-AXIS COMPUTATION
         LR    R2,R3
         ICM   R3,B'0011',Q81HUA
         CVD   R3,DBLW
         MVC   WRKFL1,=XL8'4020202020202120'
         ED    WRKFL1,DBLW+4
         MVC   INFHUA(L'INFHUA),WRKFL1+L'WRKFL1-L'INFHUA
         XR    R0,R0
         IC    R0,Q81NYDC
         CVD   R0,DBLW
         MVC   WRKFL1,=XL8'4020202020202120'
         ED    WRKFL1,DBLW+4
         MVC   INFNUY(L'INFNUY),WRKFL1+L'WRKFL1-L'INFNUY
         MR    R2,R0
         CVD   R3,DBLW
         MVC   WRKFL1,=XL8'4020202020202120'
         ED    WRKFL1,DBLW+4
         MVC   INFTYU(L'INFTYU),WRKFL1+L'WRKFL1-L'INFTYU
         ICM   R0,B'1111',Q81DSY
         SRDL  R0,16
         CVD   R0,DBLW
         MVC   WRKFL1,=XL8'4020202020202120'
         ED    WRKFL1,DBLW+4
         SRL   R1,16
         CVD   R1,DBLW
         MVC   WRKFL2,=XL8'4020202020202120'
         ED    WRKFL2,DBLW+4
         LA    R14,WRKFL2+L'WRKFL2-2
         CLI   0(R14),C' '
         BE    *+L'*+4
         BCT   R14,*-8
         MVI   0(R14),C'/'
         BCTR  R14,0
         LA    R15,WRKFL1+L'WRKFL1-1
         CLI   0(R15),C' '
         BE    *+L'*+12
         MVC   0(1,R14),0(R15)
         BCTR  R14,0
         BCT   R15,*-16
         MVC   INFDSY(L'INFDSY),WRKFL2+L'WRKFL2-L'INFDSY
         LR    R14,R3
         SRL   R14,1
         STH   R14,MAXISY
         CVD   R14,DBLW
         MVC   WRKFL1,=XL8'4020202020202120'
         ED    WRKFL1,DBLW+4
         MVC   INFYCV(L'INFYCV),WRKFL1+L'WRKFL1-L'INFYCV
         MR    R2,R0
         DR    R2,R1
         CVD   R3,DBLW
         MVC   WRKFL1,=XL8'4020202020202120'
         ED    WRKFL1,DBLW+4
         MVC   INFGVS(L'INFGVS),WRKFL1+L'WRKFL1-L'INFGVS
         MVC   ASCRIPTR(ASPL),=A(INF,INFL,RSCRN) SET PTR'S
         MVI   INCMD,C' '          RESET INPUT FIELD
        #GO    FSCALL              DISPLAY SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     DTINFX              0 - CONTINUE (NO PF-KEY SUPPORTED)
         B     DTINFY              4 - ERROR
         LTR   R1,R1               8 - DID USER TYPE IN?
         BM    DTINFZ              IMMEDIATE TERMINATION
         XR    R15,R15             ELSE CONTINUE, SET RC=0
         B     DTINFX
         DROP  R8
DTINFY   LA    R0,ERRINF
         LA    R1,L'ERRINF
         ST    R0,ERRMSA
         STH   R1,ERRMSL
DTINFZ   LA    R15,4               SET RC=4
DTINFX  $XRET  CC=(R15)
         SPACE 1
ERRINF   DC    C' -> Display terminal characteristics failed'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         SPACE 1
INF      $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L
         $FS   SBA=(1,1),MF=L
         $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT=(' ',1),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='<=',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(1,14),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,YELLOW),MF=L
         $FS   TEXT='Here follows some terminal',MF=L
         $FS   TEXT=' GRAPHIC characteristics :',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(2,80),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(4,3),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,WHITE),MF=L
         $FS   TEXT='Note :',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,RED),MF=L
         $FS   TEXT='values belongs to "IMPLICIT',MF=L
         $FS   TEXT=' PARTITION DEFAULT" screen size.',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(4,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(5,3),SF=(SKIP),MF=L
         $FS   SBA=(5,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(6,3),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='         Width of Usable Area in cells :',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L
INFWUA   $FS   TEXT=(' ',8),MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(6,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(7,3),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='        Height of Usable Area in cells :',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L
INFHUA   $FS   TEXT=(' ',8),MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(7,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(8,3),SF=(SKIP),MF=L
         $FS   SBA=(8,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(9,3),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='     Number of X-units in default cell :',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L
INFNUX   $FS   TEXT=(' ',8),MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(9,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(10,3),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='     Number of Y-units in default cell :',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L
INFNUY   $FS   TEXT=(' ',8),MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(10,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(11,3),SF=(SKIP),MF=L
         $FS   SBA=(11,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(12,3),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='         Total of X-units (horizontal) :',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L
INFTXU   $FS   TEXT=(' ',8),MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(12,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(13,3),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='           Total of Y-units (vertical) :',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L
INFTYU   $FS   TEXT=(' ',8),MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(13,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(14,3),SF=(SKIP),MF=L
         $FS   SBA=(14,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(15,3),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='     Dot spacing in the X (horizontal) :',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L
INFDSX   $FS   TEXT=(' ',8),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='of MMs (millimeters)',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(15,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(16,3),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='       Dot spacing in the Y (vertical) :',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L
INFDSY   $FS   TEXT=(' ',8),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='of MMs',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(16,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(17,3),SF=(SKIP),MF=L
         $FS   SBA=(17,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(18,3),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='        Graphic screen horizontal size :',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L
INFGHS   $FS   TEXT=(' ',8),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='MMs',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(18,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(19,3),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='          Graphic screen vertical size :',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L
INFGVS   $FS   TEXT=(' ',8),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='MMs',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(19,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(20,3),SF=(SKIP),MF=L
         $FS   SBA=(20,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(21,3),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='       X-axis coordinates values range :',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L
INFXCV   $FS   TEXT=(' ',8),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='(from -X to +X)',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(21,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(22,3),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='       Y-axis coordinates values range :',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,PINK),MF=L
INFYCV   $FS   TEXT=(' ',8),MF=L
         $FS   SFE=(ATTR,(SKIP,INT),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='(from -Y to +Y)',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(22,78),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,REVERSE,COLOR,BLUE),MF=L
         $FS   SBA=(24,1),SF=(SKIP),MF=L
         $FS   SBA=(1,2),MF=L
         $FS   SF=(IC),MF=L
INFL     EQU   *-INF
         EJECT
*======= INITIALIZATION OF TITLES DISPLAY
*              RETURN CODE : ALWAYS 0
         SPACE 1
INITT   $XENT  BASE=R9
         XC    DBLW,DBLW           WIDTH-HEIGHT
         MVC   DBLW+2(L'Q81DSX),Q81DSX
         LH    R1,INITWH
         MH    R1,DBLW+4
         XR    R0,R0
         D     R0,DBLW
         STH   R1,TXTW
         LH    R1,INIQWH
         MH    R1,DBLW+4
         XR    R0,R0
         D     R0,DBLW
         STH   R1,TXQW
         MVC   DBLW+2(L'Q81DSY),Q81DSY
         LH    R1,INITWH+L'INITWH
         MH    R1,DBLW+4
         XR    R0,R0
         D     R0,DBLW
         STH   R1,TXTH
         LH    R1,INIQWH+L'INIQWH
         MH    R1,DBLW+4
         XR    R0,R0
         D     R0,DBLW
         STH   R1,TXQH
         XR    R1,R1               X-Y CO-ORD'S
         LH    R0,INITXY
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISX
         SRDA  R0,32
         D     R0,=F'100'
         STH   R1,TXT1XY
         XR    R1,R1
         LH    R0,INITXY+L'INITXY
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISY
         SRDA  R0,32
         D     R0,=F'100'
         STH   R1,TXT1XY+L'TXT1XY
         XR    R1,R1
         LH    R0,INIQXY
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISX
         SRDA  R0,32
         D     R0,=F'100'
         STH   R1,TXQXY
         XR    R1,R1
         LH    R0,INIQXY+L'INIQXY
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISY
         SRDA  R0,32
         D     R0,=F'100'
         STH   R1,TXQXY+L'TXQXY
         LH    R0,TXTW
         XR    R1,R1
         LH    R1,TXT1XY
         MH    R0,=Y(L'TTESTT)
         AR    R1,R0
         STH   R1,TXT2XY
         MVC   TXT2XY+L'TXT2XY,TXT1XY+L'TXT1XY
         XR    R15,R15             SET RC=0
        $XRET  CC=(R15)
         SPACE 1
INITWH   DC    H'3'                WIDTH (IN MMS)
         DC    H'8'                HEIGHT (IN MMS)
INIQWH   DC    H'5'                WIDTH (IN MMS)
         DC    H'12'               HEIGHT (IN MMS)
*                                  FACTORS (% OF X,Y) TABLE
INITXY   DC    H'-95'              X CO-ORD OF STRING
         DC    H'-95'              Y " "
INIQXY   DC    H'+95'              X CO-ORD OF STRING
         DC    H'+95'              Y " "
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         EJECT
*======= SELECTION DISPLAY
*              RETURN CODE : 0 = OK, R1 = 0 OR SELECTION NUMBER
*                            4 = ERROR
*                            8 = END
         SPACE 1
SELDS   $XENT  BASE=R9
         L     R8,=A(SEL,SELL,RSSEL)
         USING SEL,R8              SCREEN IMAGE ADDRESSABILITY
         MVC   ASCRIPTR(ASPL),=A(SEL,SELL,RSSEL) SET PTR'S
        $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X
               MF=(I,SELLN23I)     SET NORMAL INPUT
         MVC   SELIN,=CL2' '       RESET INPUT FIELD
SELDSE   MVC   SELLN23R,SELIN
        #GO    FSCALL              DISPLAY SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     SELDSR              0 - INVALID (NO PF-KEY SUPPORTED)
         B     SELDSY              4 - ERROR
         XR    R2,R2               8 - RESET NUMBER
         LTR   R1,R1               DID USER TYPE IN?
         BM    SELDST              IMMEDIATE TERMINATION
         BZ    SELDSS              NONE, ALL SEQUENTIALLY
         CLC   SELIN,=CL2' '
         BE    SELDSS              NONE, ALL SEQUENTIALLY
         CLI   SELIN,C' '
         BE    SELDSN
         CLI   SELIN,C'0'
         BL    SELDSR
         CLI   SELIN,C'9'
         BH    SELDSR
         MVC   DBLW(1),SELIN
         NI    DBLW,X'0F'
         IC    R2,DBLW
SELDSN   XR    R1,R1
         CLI   SELIN+1,C' '
         BE    SELDSW
         CLI   SELIN+1,C'0'
         BL    SELDSR
         CLI   SELIN+1,C'9'
         BH    SELDSR
         MVC   DBLW(1),SELIN+1
         NI    DBLW,X'0F'
         IC    R1,DBLW
         LTR   R2,R2
         BZ    *+L'*+4
         MH    R2,=H'10'
SELDSW   AR    R2,R1
         BNP   SELDSR              ERROR, NULL
SELDSS   CH    R2,=Y(((VLAST-VANIM)+L'VANIM)/L'VANIM) VERIFY VALUE
         BH    SELDSR              ERROR, TOO LARGE
         L     R14,4(R13)          PREVIOUS SAVE AREA
         ST    R2,24(R14)          SET BACK R1
         XR    R15,R15             SET RC=0
         B     SELDSX
SELDSR  $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X
               MF=(I,SELLN23I)     SET ERROR INPUT
         B     SELDSE
         DROP  R8
SELDST   LA    R15,8               SET RC=8
         B     SELDSX
SELDSY   LA    R0,ERRSEL
         LA    R1,L'ERRSEL
         ST    R0,ERRMSA
         STH   R1,ERRMSL
SELDSZ   LA    R15,4               SET RC=4
SELDSX  $XRET  CC=(R15)
         SPACE 1
ERRSEL   DC    C' -> Selection Display failed'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         SPACE 1
SEL      $FS   CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L
         $FS   SBA=(1,1),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,USCORE,COLOR,YELLOW),MF=L
         $FS   TEXT='List of available tests :',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(3,20),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L
         $FS   TEXT=' 1 -',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='Graphic Cursor',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(4,20),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L
         $FS   TEXT=' 2 -',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='LINE (X,Y) vector',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(5,20),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L
         $FS   TEXT=' 3 -',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='FILLET (X,Y) vector',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(6,20),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L
         $FS   TEXT=' 4 -',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='Display Image',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(7,20),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L
         $FS   TEXT=' 5 -',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='Display Full Arc',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(8,20),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L
         $FS   TEXT=' 6 -',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='Move LINE (X,Y)',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(9,20),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L
         $FS   TEXT=' 7 -',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='Copy LINE (X,Y)',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(10,20),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L
         $FS   TEXT=' 8 -',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='Draw LINE (X,Y)',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(11,20),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L
         $FS   TEXT=' 9 -',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='Move Full Arc',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(12,20),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L
         $FS   TEXT='10 -',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='Draw Full Arc',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(13,20),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L
         $FS   TEXT='11 -',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='Draw a Cube',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(23,1),MF=L
SELLN23I $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L
SELLN23R $FS   TEXT=(' ',2),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,YELLOW),MF=L
         $FS   TEXT='<= ENTER',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='a specific test',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,YELLOW),MF=L
         $FS   TEXT='number',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='or just',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,YELLOW),MF=L
         $FS   TEXT='ENTER',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,GREEN),MF=L
         $FS   TEXT='to execute all sequentially.',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(24,7),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,BLUE),MF=L
         $FS   TEXT='Use',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L
         $FS   TEXT='PA-1/2/3',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,BLUE),MF=L
         $FS   TEXT='to terminate.',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,WHITE),MF=L
         $FS   TEXT='Note :',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,RED),MF=L
         $FS   TEXT='all PF''s are inactive ',MF=L
         AIF   ('&EUDCH' EQ 'EUROPE').DCH1
         $FS   TEXT='!!!',MF=L
         AGO   .DCH2
.DCH1    $FS   TEXT='×××',MF=L
.DCH2    $FS   SF=(SKIP),MF=L
         $FS   SBA=(23,2),MF=L
         $FS   SF=(IC),MF=L
SELL     EQU   *-SEL
         EJECT
*======= ANIMATION 1 (ORIGINAL : PS4)
*              RETURN CODE : 0 = OK, CONTINUE
*                            4 = ERROR OR END
         SPACE 1
ANIM1   $XENT  BASE=R9
         L     R8,=A(AN1,AN1L,RSCRN)
         USING AN1,R8              SCREEN IMAGE ADDRESSABILITY
         MVC   AN1T1(L'TXTW+L'TXTH),TXTW
         MVC   AN1T2(2*L'AN1T2),TXT1XY
         MVC   AN1T3(2*L'AN1T3),TXT2XY
         MVC   AN1Q1(L'TXQW+L'TXQH),TXQW
         MVC   AN1Q2(2*L'AN1Q2),TXQXY
         MVC   ASCRIPTR(ASPL),=A(AN1,AN1L,RSCRN) SET PTR'S
ANIM1R  $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X
               MF=(I,AN1LN1I)      SET NORMAL INPUT
         MVI   INCMD,C' '          RESET INPUT FIELD
ANIM1E   MVC   AN1LN1R,INCMD
        #GO    FSCALL              DISPLAY SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     ANIM1X              0 - CONTINUE (NO PF-KEY SUPPORTED)
         B     ANIM1Y              4 - ERROR
         LTR   R1,R1               8 - DID USER TYPE IN?
         BZ    ANIM1E              NONE, RESHOW
         BM    ANIM1Z              IMMEDIATE TERMINATION
         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?
         BE    ANIM1R              "Y", GO DO IT
         CLI   INCMD,C'N'
         BE    *+L'*+8             "N", CONTINUE
         CLI   INCMD,C' '          JUST A SPACE (BLANK)?
         BNE   *+L'*+6             NO
         XR    R15,R15             YES, CONTINUE, SET RC=0
         B     ANIM1X
        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X
               MF=(I,AN1LN1I)      SET ERROR INPUT
         B     ANIM1E
         DROP  R8
ANIM1Y   LA    R0,ERRAN1
         LA    R1,L'ERRAN1
         ST    R0,ERRMSA
         STH   R1,ERRMSL
ANIM1Z   LA    R15,4               SET RC=4
ANIM1X  $XRET  CC=(R15)
         SPACE 1
ERRAN1   DC    C' -> "ANIM1" : test failed'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         SPACE 1
AN1      $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN1SF1   DC    AL2(AN1SF1L)        L = LENGTH OF S.F.
         DC    XL1'03'             SFID = ERASE/RESET
         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE
AN1SF1L  EQU   *-AN1SF1
AN1SF2   DC    AL2(AN1SF2L)        L = LENGTH OF S.F.
         DC    XL2'0F11'           SFID = OBJECT CONTROL
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'30'               BEGIN PROCEDURE
         DC    AL1(AN1P1L)           LENGTH OF FOLLOWING PARAMETERS
AN1P1    DC    CL4'CSAC'             NAME OF PROCEDURE TO BE CREATED
         DC    XL2'00'               RESERVED
         DC    AL2(AN1PR1L)          LENGTH OF SEGMENT TO BE CREATED
         DC    XL2'00'               RESERVED
AN1P1L   EQU   *-AN1P1
AN1PR1   EQU   *                   PROCEDURE DATA
         DC    XL1'08'             GATTCUR (ATTACH GRAPHIC CURSOR)
         DC    XL1'00'
AN1PR1L  EQU   *-AN1PR1
AN1SF2L  EQU   *-AN1SF2
AN1SF3   DC    AL2(AN1SF3L)        L = LENGTH OF S.F.
         DC    XL2'0F0F'           SFID = OBJECT DATA
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'40'               BEGIN DATA UNIT
         DC    AL1(AN1P2L)           LENGTH OF FOLLOWING PARAMETERS
AN1P2    DC    XL4'00'               NAME OF PROCEDURE TO BE CREATED
         DC    XL1'00'               RESERVED
         DC    XL1'00'               NEW DATA UNIT
         DC    AL2(AN1DU1L)          LENGTH OF DATA UNIT TO BE CREATED
AN1P2L   EQU   *-AN1P2
AN1DU1   EQU   *                   DATA UNIT DATA
         DC    AL2(AN1DU2L)          LENGTH OF DATA
         DC    CL2'RB'
AN1DU2   DC    HL2'2',HL2'22'
         DC    HL2'0',HL2'0'
         DC    HL2'0',HL2'14'
         DC    HL2'96',HL2'0'
         DC    HL2'1',HL2'0'
         DC    HL2'256',HL2'0'
         DC    HL2'-32768'
         DC    HL2'4',HL2'0'
         DC    HL2'5',HL2'0'
         DC    HL2'0',HL2'0'
         DC    HL2'0',HL2'0'
         DC    HL2'0',HL2'0'
         DC    HL2'0',HL2'0'
         DC    HL2'1024'
         DC    HL2'7',HL2'256'
         DC    HL2'0',HL2'0'
         DC    HL2'0',HL2'0'
         DC    HL2'0',HL2'0'
         DC    HL2'0',HL2'0'
         DC    HL2'24708',HL2'67'
         DC    HL2'67'
AN1DU2L  EQU   *-AN1DU2
AN1DU1L  EQU   *-AN1DU1
AN1SF3L  EQU   *-AN1SF3
AN1SF4   DC    AL2(AN1SF4L)        L = LENGTH OF S.F.
         DC    XL2'0F10'           SFID = OBJECT PICTURE
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'70'               GBSEG (SEGMENT START)
         DC    AL1(AN1P3L)           LENGTH OF FOLLOWING PARAMETERS
AN1P3    DC    CL4'CH01'             SEGMENT-ID
*                                    FLAGS - 1ST BYTE :
         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE
*                                    BIT 1 = 1 - RESERVED
*                                    BIT 2 = 1 - DETECTABLE
*                                    BIT 3 = 1 - RESERVED
*                                    BIT 4 = 0 - NO HIGHLIGHTING
*                                    BITS 5-7 = 100 - RESERVED
*                                    FLAGS - 2ND BYTE :
         DC    BL1'00001000'         BIT 0 = 0 - CHAINED
*                                    BITS 1-2 = 00 - RESERVED
*                                    BIT 3 = 0 - NO PROLOG
*                                    BIT 4 = 1 - TRANSFORMABLE
*                                    BITS 5-7 = 000 - RESERVED
         DC    AL2(AN1SG1L)          LENGTH OF SEGMENT TO BE CREATED
         DC    XL4'00'               RESERVED
AN1P3L   EQU   *-AN1P3
AN1SG1   EQU   *                   SEGMENT DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'07'               COLOR = NEUTRAL (WHITE)
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'01'               DIRECTION = LEFT TO RIGHT
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN1T1L)           LENGTH OF FOLLOWING DATA
AN1T1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN1T1L   EQU   *-AN1T1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN1T2L)           LENGTH OF FOLLOWING DATA
AN1T2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
TTESTT   DC    CL6'Test :'             STRING
AN1T2L   EQU   *-AN1T2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN1T3L)           LENGTH OF FOLLOWING DATA
AN1T3    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL16' Graphic Cursor'   STRING
AN1T3L   EQU   *-AN1T3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'02'               DIRECTION = TOP TO BOTTOM
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN1Q1L)           LENGTH OF FOLLOWING DATA
AN1Q1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN1Q1L   EQU   *-AN1Q1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN1Q2L)           LENGTH OF FOLLOWING DATA
AN1Q2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL8'ANIM1'              STRING
AN1Q2L   EQU   *-AN1Q2
AN1SG1L  EQU   *-AN1SG1
AN1SF4L  EQU   *-AN1SF4
AN1SF5   DC    AL2(AN1SF5L)        L = LENGTH OF S.F.
         DC    XL1'40'             SFID = OUTBOUND 3270DS
         DC    XL1'00'               PID
         $FS   CC=(W),WCC=(KBR),MF=L
         $FS   SBA=(1,1),MF=L
AN1LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L
AN1LN1R  $FS   TEXT=(' ',1),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='<= Reshow ?',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L
         $FS   TEXT='(Y/N)',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(1,2),MF=L
         $FS   SF=(IC),MF=L
AN1SF5L  EQU   *-AN1SF5
AN1L     EQU   *-AN1
         EJECT
*======= ANIMATION 2 (ORIGINAL : PS3)
*              RETURN CODE : 0 = OK, CONTINUE
*                            4 = ERROR OR END
         SPACE 1
ANIM2   $XENT  BASE=R9
         L     R8,=A(AN2,AN2L,RSCRN)
         USING AN2,R8              SCREEN IMAGE ADDRESSABILITY
         MVC   AN2T1(L'TXTW+L'TXTH),TXTW
         MVC   AN2T2(2*L'AN2T2),TXT1XY
         MVC   AN2T3(2*L'AN2T3),TXT2XY
         MVC   AN2Q1(L'TXQW+L'TXQH),TXQW
         MVC   AN2Q2(2*L'AN2Q2),TXQXY
         LH    R0,TXTW
         XR    R1,R1
         LH    R1,TXT2XY
         MH    R0,=Y(L'AN2T3T)
         AR    R1,R0
         STCM  R1,B'0011',AN2T4
         MVC   AN2T4+L'AN2T4,TXT2XY+L'TXT2XY
         LA    R2,AN2MFN
         LA    R3,AN2MF
         LA    R4,AN2D1
         LA    R5,AN2D2
ANIM2L   XR    R1,R1
         LH    R0,0(R3)
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISX
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',0(R4)
         STCM  R1,B'0011',0(R5)
         XR    R1,R1
         LH    R0,L'AN2MF(R3)
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISY
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',L'AN2D1(R4)
         STCM  R1,B'0011',L'AN2D2(R5)
         LA    R3,2*L'AN2MF(R3)
         LA    R4,2*L'AN2D1(R4)
         LA    R5,2*L'AN2D2(R5)
         BCT   R2,ANIM2L
         MVC   ASCRIPTR(ASPL),=A(AN2,AN2L,RSCRN) SET PTR'S
ANIM2R  $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X
               MF=(I,AN2LN1I)      SET NORMAL INPUT
         MVI   INCMD,C' '          RESET INPUT FIELD
ANIM2E   MVC   AN2LN1R,INCMD
        #GO    FSCALL              DISPLAY SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     ANIM2X              0 - CONTINUE (NO PF-KEY SUPPORTED)
         B     ANIM2Y              4 - ERROR
         LTR   R1,R1               8 - DID USER TYPE IN?
         BZ    ANIM2E              NONE, RESHOW
         BM    ANIM2Z              IMMEDIATE TERMINATION
         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?
         BE    ANIM2R              "Y", GO DO IT
         CLI   INCMD,C'N'
         BE    *+L'*+8             "N", CONTINUE
         CLI   INCMD,C' '          JUST A SPACE (BLANK)?
         BNE   *+L'*+6             NO
         XR    R15,R15             YES, CONTINUE, SET RC=0
         B     ANIM2X
        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X
               MF=(I,AN2LN1I)      SET ERROR INPUT
         B     ANIM2E
         DROP  R8
ANIM2Y   LA    R0,ERRAN2
         LA    R1,L'ERRAN2
         ST    R0,ERRMSA
         STH   R1,ERRMSL
ANIM2Z   LA    R15,4               SET RC=4
ANIM2X  $XRET  CC=(R15)
         SPACE 1
*                                  FACTORS (% OF X,Y) TABLE
AN2MF    DC    H'+45',H'+55'            LINE START
         DC    H'+25',H'+85'            1ST LINE END
         DC    H'-30',H'-35'            2ND LINE END
AN2MFN   EQU   (*-AN2MF)/(2*L'AN2MF)
ERRAN2   DC    C' -> "ANIM2" : test failed'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         SPACE 1
AN2      $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN2SF1   DC    AL2(AN2SF1L)        L = LENGTH OF S.F.
         DC    XL1'03'             SFID = ERASE/RESET
         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE
AN2SF1L  EQU   *-AN2SF1
AN2SF2   DC    AL2(AN2SF2L)        L = LENGTH OF S.F.
         DC    XL2'0F10'           SFID = OBJECT PICTURE
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'70'               GBSEG (SEGMENT START)
         DC    AL1(AN2P1L)           LENGTH OF FOLLOWING PARAMETERS
AN2P1    DC    FL4'1'                SEGMENT-ID
*                                    FLAGS - 1ST BYTE :
         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE
*                                    BIT 1 = 1 - RESERVED
*                                    BIT 2 = 1 - DETECTABLE
*                                    BIT 3 = 1 - RESERVED
*                                    BIT 4 = 0 - NO HIGHLIGHTING
*                                    BITS 5-7 = 100 - RESERVED
*                                    FLAGS - 2ND BYTE :
         DC    BL1'00001000'         BIT 0 = 0 - CHAINED
*                                    BITS 1-2 = 00 - RESERVED
*                                    BIT 3 = 0 - NO PROLOG
*                                    BIT 4 = 1 - TRANSFORMABLE
*                                    BITS 5-7 = 000 - RESERVED
         DC    AL2(AN2SG1L)          LENGTH OF SEGMENT TO BE CREATED
         DC    XL4'00'               RESERVED
AN2P1L   EQU   *-AN2P1
AN2SG1   EQU   *                   SEGMENT DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'06'               COLOR = YELLOW
         DC    XL1'0C'             GSMX (SET MIX)
         DC    XL1'00'               MODE = DRAWING DEFAULT
         DC    XL1'18'             GSLT (SET LINE TYPE)
         DC    XL1'07'               LINETYPE = SOLID LINE
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)
         DC    AL1(AN2D1L)           LENGTH OF FOLLOWING DATA
AN2D1    DC    HL2'0'                  X CO-ORD OF LINE START
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  X CO-ORD OF 1ST LINE END
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  X CO-ORD OF 2ND LINE END
         DC    HL2'0'                  Y " "
AN2D1L   EQU   *-AN2D1
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'04'               COLOR = GREEN
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'08'               SYMBOL = FILLED SQUARE
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN2D2L)           LENGTH OF FOLLOWING DATA
AN2D2    DC    HL2'0'                  X CO-ORD OF LINE START
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  X CO-ORD OF 1ST LINE END
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  X CO-ORD OF 2ND LINE END
         DC    HL2'0'                  Y " "
AN2D2L   EQU   *-AN2D2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'08'               SYMBOL = FILLED SQUARE
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN2D3L)           LENGTH OF FOLLOWING DATA
AN2D3    DC    HL2'0'                  X = 0
         DC    HL2'0'                  Y = 0
AN2D3L   EQU   *-AN2D3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'07'               COLOR = NEUTRAL (WHITE)
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'01'               DIRECTION = LEFT TO RIGHT
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN2T1L)           LENGTH OF FOLLOWING DATA
AN2T1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN2T1L   EQU   *-AN2T1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN2T2L)           LENGTH OF FOLLOWING DATA
AN2T2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
AN2T2T   DC    CL6'Test :'             STRING
AN2T2L   EQU   *-AN2T2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN2T3L)           LENGTH OF FOLLOWING DATA
AN2T3    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
AN2T3T   DC    CL18' LINE (X,Y) vector' STRING
AN2T3L   EQU   *-AN2T3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'01'               COLOR = BLUE
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN2T4L)           LENGTH OF FOLLOWING DATA
AN2T4    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL26' (three points connection)' STRING
AN2T4L   EQU   *-AN2T4
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'02'               DIRECTION = TOP TO BOTTOM
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN2Q1L)           LENGTH OF FOLLOWING DATA
AN2Q1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN2Q1L   EQU   *-AN2Q1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN2Q2L)           LENGTH OF FOLLOWING DATA
AN2Q2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL8'ANIM2'              STRING
AN2Q2L   EQU   *-AN2Q2
AN2SG1L  EQU   *-AN2SG1
AN2SF2L  EQU   *-AN2SF2
AN2SF3   DC    AL2(AN2SF3L)        L = LENGTH OF S.F.
         DC    XL1'40'             SFID = OUTBOUND 3270DS
         DC    XL1'00'               PID
         $FS   CC=(W),WCC=(KBR),MF=L
         $FS   SBA=(1,1),MF=L
AN2LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L
AN2LN1R  $FS   TEXT=(' ',1),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='<= Reshow ?',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L
         $FS   TEXT='(Y/N)',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(1,2),MF=L
         $FS   SF=(IC),MF=L
AN2SF3L  EQU   *-AN2SF3
AN2L     EQU   *-AN2
         EJECT
*======= ANIMATION 3 (ORIGINAL : PS5)
*              RETURN CODE : 0 = OK, CONTINUE
*                            4 = ERROR OR END
         SPACE 1
ANIM3   $XENT  BASE=R9
         L     R8,=A(AN3,AN3L,RSCRN)
         USING AN3,R8              SCREEN IMAGE ADDRESSABILITY
         MVC   AN3T1(L'TXTW+L'TXTH),TXTW
         MVC   AN3T2(2*L'AN3T2),TXT1XY
         MVC   AN3T3(2*L'AN3T3),TXT2XY
         LH    R0,TXTW
         XR    R1,R1
         LH    R1,TXT2XY
         MH    R0,=Y(L'AN3T3T)
         AR    R1,R0
         STCM  R1,B'0011',AN3T4
         MVC   AN3T4+L'AN3T4,TXT2XY+L'TXT2XY
         MVC   AN3Q1(L'TXQW+L'TXQH),TXQW
         MVC   AN3Q2(2*L'AN3Q2),TXQXY
         LA    R2,AN3MFN
         LA    R3,AN3MF
         LA    R4,AN3D1
         LA    R5,AN3D2
ANIM3L   XR    R1,R1
         LH    R0,0(R3)
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISX
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',0(R4)
         STCM  R1,B'0011',0(R5)
         XR    R1,R1
         LH    R0,L'AN3MF(R3)
         MH    R0,MAXISY
         LTR   R0,R0
         BZ    *+L'*+12
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',L'AN3D1(R4)
         STCM  R1,B'0011',L'AN3D2(R5)
         LA    R3,2*L'AN3MF(R3)
         LA    R4,2*L'AN3D1(R4)
         LA    R5,2*L'AN3D2(R5)
         BCT   R2,ANIM3L
         MVC   ASCRIPTR(ASPL),=A(AN3,AN3L,RSCRN) SET PTR'S
ANIM3R  $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X
               MF=(I,AN3LN1I)      SET NORMAL INPUT
         MVI   INCMD,C' '          RESET INPUT FIELD
ANIM3E   MVC   AN3LN1R,INCMD
        #GO    FSCALL              DISPLAY SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     ANIM3X              0 - CONTINUE (NO PF-KEY SUPPORTED)
         B     ANIM3Y              4 - ERROR
         LTR   R1,R1               8 - DID USER TYPE IN?
         BZ    ANIM3E              NONE, RESHOW
         BM    ANIM3Z              IMMEDIATE TERMINATION
         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?
         BE    ANIM3R              "Y", GO DO IT
         CLI   INCMD,C'N'
         BE    *+L'*+8             "N", CONTINUE
         CLI   INCMD,C' '          JUST A SPACE (BLANK)?
         BNE   *+L'*+6             NO
         XR    R15,R15             YES, CONTINUE, SET RC=0
         B     ANIM3X
        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X
               MF=(I,AN3LN1I)      SET ERROR INPUT
         B     ANIM3E
         DROP  R8
ANIM3Y   LA    R0,ERRAN3
         LA    R1,L'ERRAN3
         ST    R0,ERRMSA
         STH   R1,ERRMSL
ANIM3Z   LA    R15,4               SET RC=4
ANIM3X  $XRET  CC=(R15)
         SPACE 1
*                                  FACTORS (% OF X,Y) TABLE
AN3MF    DC    H'+45',H'+55'            LINE START
         DC    H'+25',H'+85'            1ST LINE END
         DC    H'-30',H'-35'            2ND LINE END
AN3MFN   EQU   (*-AN3MF)/(2*L'AN3MF)
ERRAN3   DC    C' -> "ANIM3" : test failed'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         SPACE 1
AN3      $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN3SF1   DC    AL2(AN3SF1L)        L = LENGTH OF S.F.
         DC    XL1'03'             SFID = ERASE/RESET
         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE
AN3SF1L  EQU   *-AN3SF1
AN3SF2   DC    AL2(AN3SF2L)        L = LENGTH OF S.F.
         DC    XL2'0F10'           SFID = OBJECT PICTURE
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'70'               GBSEG (SEGMENT START)
         DC    AL1(AN3P1L)           LENGTH OF FOLLOWING PARAMETERS
AN3P1    DC    FL4'1'                SEGMENT-ID
*                                    FLAGS - 1ST BYTE :
         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE
*                                    BIT 1 = 1 - RESERVED
*                                    BIT 2 = 1 - DETECTABLE
*                                    BIT 3 = 1 - RESERVED
*                                    BIT 4 = 0 - NO HIGHLIGHTING
*                                    BITS 5-7 = 100 - RESERVED
*                                    FLAGS - 2ND BYTE :
         DC    BL1'00001000'         BIT 0 = 0 - CHAINED
*                                    BITS 1-2 = 00 - RESERVED
*                                    BIT 3 = 0 - NO PROLOG
*                                    BIT 4 = 1 - TRANSFORMABLE
*                                    BITS 5-7 = 000 - RESERVED
         DC    AL2(AN3SG1L)          LENGTH OF SEGMENT TO BE CREATED
         DC    XL4'00'               RESERVED
AN3P1L   EQU   *-AN3P1
AN3SG1   EQU   *                   SEGMENT DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'06'               COLOR = YELLOW
         DC    XL1'0C'             GSMX (SET MIX)
         DC    XL1'00'               MODE = DRAWING DEFAULT
         DC    XL1'18'             GSLT (SET LINE TYPE)
         DC    XL1'07'               LINETYPE = SOLID LINE
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'C5'             GFLT (FILLET AT GIVEN POSITION)
         DC    AL1(AN3D1L)           LENGTH OF FOLLOWING DATA
AN3D1    DC    HL2'0'                  X CO-ORD OF LINE START
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  X CO-ORD OF 1ST LINE END
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  X CO-ORD OF 2ND LINE END
         DC    HL2'0'                  Y " "
AN3D1L   EQU   *-AN3D1
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'04'               COLOR = GREEN
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'08'               SYMBOL = FILLED SQUARE
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN3D2L)           LENGTH OF FOLLOWING DATA
AN3D2    DC    HL2'0'                  X CO-ORD OF LINE START
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  X CO-ORD OF 1ST LINE END
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  X CO-ORD OF 2ND LINE END
         DC    HL2'0'                  Y " "
AN3D2L   EQU   *-AN3D2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'08'               SYMBOL = FILLED SQUARE
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN3D3L)           LENGTH OF FOLLOWING DATA
AN3D3    DC    HL2'0'                  X = 0
         DC    HL2'0'                  Y = 0
AN3D3L   EQU   *-AN3D3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'07'               COLOR = NEUTRAL (WHITE)
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'01'               DIRECTION = LEFT TO RIGHT
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN3T1L)           LENGTH OF FOLLOWING DATA
AN3T1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN3T1L   EQU   *-AN3T1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN3T2L)           LENGTH OF FOLLOWING DATA
AN3T2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
AN3T2T   DC    CL6'Test :'             STRING
AN3T2L   EQU   *-AN3T2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN3T3L)           LENGTH OF FOLLOWING DATA
AN3T3    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
AN3T3T   DC    CL20' FILLET (X,Y) vector' STRING
AN3T3L   EQU   *-AN3T3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'01'               COLOR = BLUE
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN3T4L)           LENGTH OF FOLLOWING DATA
AN3T4    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL26' (three points connection)' STRING
AN3T4L   EQU   *-AN3T4
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'02'               DIRECTION = TOP TO BOTTOM
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN3Q1L)           LENGTH OF FOLLOWING DATA
AN3Q1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN3Q1L   EQU   *-AN3Q1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN3Q2L)           LENGTH OF FOLLOWING DATA
AN3Q2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL8'ANIM3'              STRING
AN3Q2L   EQU   *-AN3Q2
AN3SG1L  EQU   *-AN3SG1
AN3SF2L  EQU   *-AN3SF2
AN3SF3   DC    AL2(AN3SF3L)        L = LENGTH OF S.F.
         DC    XL1'40'             SFID = OUTBOUND 3270DS
         DC    XL1'00'               PID
         $FS   CC=(W),WCC=(KBR),MF=L
         $FS   SBA=(1,1),MF=L
AN3LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L
AN3LN1R  $FS   TEXT=(' ',1),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='<= Reshow ?',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L
         $FS   TEXT='(Y/N)',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(1,2),MF=L
         $FS   SF=(IC),MF=L
AN3SF3L  EQU   *-AN3SF3
AN3L     EQU   *-AN3
         EJECT
*======= ANIMATION 4 (ORIGINAL : PS7)
*              RETURN CODE : 0 = OK, CONTINUE
*                            4 = ERROR OR END
         SPACE 1
ANIM4   $XENT  BASE=R9
         L     R8,=A(AN4,AN4L,RSCRN)
         USING AN4,R8              SCREEN IMAGE ADDRESSABILITY
         MVC   AN4T1(L'TXTW+L'TXTH),TXTW
         MVC   AN4T2(2*L'AN4T2),TXT1XY
         MVC   AN4T3(2*L'AN4T3),TXT2XY
         LH    R0,TXTW
         XR    R1,R1
         LH    R1,TXT2XY
         MH    R0,=Y(L'AN4T3T)
         AR    R1,R0
         STCM  R1,B'0011',AN4T4
         MVC   AN4T4+L'AN4T4,TXT2XY+L'TXT2XY
         MVC   AN4Q1(L'TXQW+L'TXQH),TXQW
         MVC   AN4Q2(2*L'AN4Q2),TXQXY
         MVC   ASCRIPTR(ASPL),=A(AN4,AN4L,RSCRN) SET PTR'S
ANIM4R  $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X
               MF=(I,AN4LN1I)      SET NORMAL INPUT
         MVI   INCMD,C' '          RESET INPUT FIELD
ANIM4E   MVC   AN4LN1R,INCMD
        #GO    FSCALL              DISPLAY SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     ANIM4X              0 - CONTINUE (NO PF-KEY SUPPORTED)
         B     ANIM4Y              4 - ERROR
         LTR   R1,R1               8 - DID USER TYPE IN?
         BZ    ANIM4E              NONE, RESHOW
         BM    ANIM4Z              IMMEDIATE TERMINATION
         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?
         BE    ANIM4R              "Y", GO DO IT
         CLI   INCMD,C'N'
         BE    *+L'*+8             "N", CONTINUE
         CLI   INCMD,C' '          JUST A SPACE (BLANK)?
         BNE   *+L'*+6             NO
         XR    R15,R15             YES, CONTINUE, SET RC=0
         B     ANIM4X
        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X
               MF=(I,AN4LN1I)      SET ERROR INPUT
         B     ANIM4E
         DROP  R8
ANIM4Y   LA    R0,ERRAN4
         LA    R1,L'ERRAN4
         ST    R0,ERRMSA
         STH   R1,ERRMSL
ANIM4Z   LA    R15,4               SET RC=4
ANIM4X  $XRET  CC=(R15)
         SPACE 1
ERRAN4   DC    C' -> "ANIM4" : test failed'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         SPACE 1
AN4      $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN4SF1   DC    AL2(AN4SF1L)        L = LENGTH OF S.F.
         DC    XL1'03'             SFID = ERASE/RESET
         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE
AN4SF1L  EQU   *-AN4SF1
AN4SF2   DC    AL2(AN4SF2L)        L = LENGTH OF S.F.
         DC    XL2'0F10'           SFID = OBJECT PICTURE
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'70'               GBSEG (SEGMENT START)
         DC    AL1(AN4P1L)           LENGTH OF FOLLOWING PARAMETERS
AN4P1    DC    FL4'1'                SEGMENT-ID
*                                    FLAGS - 1ST BYTE :
         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE
*                                    BIT 1 = 1 - RESERVED
*                                    BIT 2 = 1 - DETECTABLE
*                                    BIT 3 = 1 - RESERVED
*                                    BIT 4 = 0 - NO HIGHLIGHTING
*                                    BITS 5-7 = 100 - RESERVED
*                                    FLAGS - 2ND BYTE :
         DC    BL1'00001000'         BIT 0 = 0 - CHAINED
*                                    BITS 1-2 = 00 - RESERVED
*                                    BIT 3 = 0 - NO PROLOG
*                                    BIT 4 = 1 - TRANSFORMABLE
*                                    BITS 5-7 = 000 - RESERVED
         DC    AL2(AN4SG1L)          LENGTH OF SEGMENT TO BE CREATED
         DC    XL4'00'               RESERVED
AN4P1L   EQU   *-AN4P1
*        THE IMAGE CONSISTS OF SURROUNDING SQUARES OF "ON" DISPLAY
*              POINTS (GREEN/YELLOW) SURROUNDING A SMALL "OFF" CENTER
*              AT POSITION X,Y = 0,0.
AN4SG1   EQU   *                   SEGMENT DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'04'               COLOR = GREEN
         DC    XL1'0C'             GSMX (SET MIX)
         DC    XL1'00'               MODE = DRAWING DEFAULT
         DC    XL1'18'             GSLT (SET LINE TYPE)
         DC    XL1'07'               LINETYPE = SOLID LINE
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)
         DC    XL1'0B'               PATTERN = DIAG 1 (BL TO TR)
         DC    XL1'D1'             GBIMG (IMAGE BEGIN, AT GIVEN POS.)
         DC    AL1(AN4D1L)           LENGTH OF FOLLOWING DATA
AN4D1    DC    HL2'0'                  X CO-ORD OF IMAGE
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  FORMAT OF IMAGE
         DC    HL2'32'                 WIDTH OF IMAGE IN PELS
         DC    HL2'16'                 HEIGHT OF IMAGE IN PELS
AN4D1L   EQU   *-AN4D1
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I1)          LENGTH OF FOLLOWING DATA
AN4I1    DC    BL4'11111111111111111111111111111111'
*        WIDTH ==>>----+----1----+----2----+----3--<<== 32 BITS = PELS
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I2)          LENGTH OF FOLLOWING DATA
AN4I2    DC    BL4'11111111111111111111111111111111'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I3)          LENGTH OF FOLLOWING DATA
AN4I3    DC    BL4'11111111111111111111111111111111'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I4)          LENGTH OF FOLLOWING DATA
AN4I4    DC    BL4'11111110000000000000000001111111'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I5)          LENGTH OF FOLLOWING DATA
AN4I5    DC    BL4'11111110000000000000000001111111'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I6)          LENGTH OF FOLLOWING DATA
AN4I6    DC    BL4'11111110000000000000000001111111'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I7)          LENGTH OF FOLLOWING DATA
AN4I7    DC    BL4'11111110000000000000000001111111'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I8)          LENGTH OF FOLLOWING DATA
AN4I8    DC    BL4'11111110000000000000000001111111'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I9)          LENGTH OF FOLLOWING DATA
AN4I9    DC    BL4'11111110000000000000000001111111'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I10)         LENGTH OF FOLLOWING DATA
AN4I10   DC    BL4'11111110000000000000000001111111'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I11)         LENGTH OF FOLLOWING DATA
AN4I11   DC    BL4'11111110000000000000000001111111'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I12)         LENGTH OF FOLLOWING DATA
AN4I12   DC    BL4'11111110000000000000000001111111'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I13)         LENGTH OF FOLLOWING DATA
AN4I13   DC    BL4'11111110000000000000000001111111'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I14)         LENGTH OF FOLLOWING DATA
AN4I14   DC    BL4'11111111111111111111111111111111'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I15)         LENGTH OF FOLLOWING DATA
AN4I15   DC    BL4'11111111111111111111111111111111'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4I16)         LENGTH OF FOLLOWING DATA
AN4I16   DC    BL4'11111111111111111111111111111111'
         DC    XL1'93'             GEIMG (IMAGE END)
         DC    AL1(0)              NO FOLLOWING DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'06'               COLOR = YELLOW
         DC    XL1'D1'             GBIMG (IMAGE BEGIN, AT GIVEN POS.)
         DC    AL1(AN4D2L)           LENGTH OF FOLLOWING DATA
AN4D2    DC    HL2'0'                  X CO-ORD OF IMAGE
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  FORMAT OF IMAGE
         DC    HL2'32'                 WIDTH OF IMAGE IN PELS
         DC    HL2'16'                 HEIGHT OF IMAGE IN PELS
AN4D2L   EQU   *-AN4D2
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J1)          LENGTH OF FOLLOWING DATA
AN4J1    DC    BL4'00000000000000000000000000000000'
*        WIDTH ==>>----+----1----+----2----+----3--<<== 32 BITS = PELS
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J2)          LENGTH OF FOLLOWING DATA
AN4J2    DC    BL4'00000000000000000000000000000000'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J3)          LENGTH OF FOLLOWING DATA
AN4J3    DC    BL4'00000000000000000000000000000000'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J4)          LENGTH OF FOLLOWING DATA
AN4J4    DC    BL4'00000001111111111111111110000000'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J5)          LENGTH OF FOLLOWING DATA
AN4J5    DC    BL4'00000001111111111111111110000000'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J6)          LENGTH OF FOLLOWING DATA
AN4J6    DC    BL4'00000001111111111111111110000000'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J7)          LENGTH OF FOLLOWING DATA
AN4J7    DC    BL4'00000001111111000011111110000000'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J8)          LENGTH OF FOLLOWING DATA
AN4J8    DC    BL4'00000001111111000011111110000000'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J9)          LENGTH OF FOLLOWING DATA
AN4J9    DC    BL4'00000001111111000011111110000000'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J10)         LENGTH OF FOLLOWING DATA
AN4J10   DC    BL4'00000001111111000011111110000000'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J11)         LENGTH OF FOLLOWING DATA
AN4J11   DC    BL4'00000001111111111111111110000000'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J12)         LENGTH OF FOLLOWING DATA
AN4J12   DC    BL4'00000001111111111111111110000000'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J13)         LENGTH OF FOLLOWING DATA
AN4J13   DC    BL4'00000001111111111111111110000000'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J14)         LENGTH OF FOLLOWING DATA
AN4J14   DC    BL4'00000000000000000000000000000000'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J15)         LENGTH OF FOLLOWING DATA
AN4J15   DC    BL4'00000000000000000000000000000000'
         DC    XL1'92'             GIMD (IMAGE DATA)
         DC    AL1(L'AN4J16)         LENGTH OF FOLLOWING DATA
AN4J16   DC    BL4'00000000000000000000000000000000'
         DC    XL1'93'             GEIMG (IMAGE END)
         DC    AL1(0)              NO FOLLOWING DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'07'               COLOR = NEUTRAL (WHITE)
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'01'               DIRECTION = LEFT TO RIGHT
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN4T1L)           LENGTH OF FOLLOWING DATA
AN4T1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN4T1L   EQU   *-AN4T1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN4T2L)           LENGTH OF FOLLOWING DATA
AN4T2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
AN4T2T   DC    CL6'Test :'             STRING
AN4T2L   EQU   *-AN4T2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN4T3L)           LENGTH OF FOLLOWING DATA
AN4T3    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
AN4T3T   DC    CL14' Display Image'    STRING
AN4T3L   EQU   *-AN4T3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'01'               COLOR = BLUE
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN4T4L)           LENGTH OF FOLLOWING DATA
AN4T4    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL40' (squares left-top corner on X,Y = 0,0)' STRING
AN4T4L   EQU   *-AN4T4
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'02'               DIRECTION = TOP TO BOTTOM
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN4Q1L)           LENGTH OF FOLLOWING DATA
AN4Q1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN4Q1L   EQU   *-AN4Q1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN4Q2L)           LENGTH OF FOLLOWING DATA
AN4Q2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL8'ANIM4'              STRING
AN4Q2L   EQU   *-AN4Q2
AN4SG1L  EQU   *-AN4SG1
AN4SF2L  EQU   *-AN4SF2
AN4SF3   DC    AL2(AN4SF3L)        L = LENGTH OF S.F.
         DC    XL1'40'             SFID = OUTBOUND 3270DS
         DC    XL1'00'               PID
         $FS   CC=(W),WCC=(KBR),MF=L
         $FS   SBA=(1,1),MF=L
AN4LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L
AN4LN1R  $FS   TEXT=(' ',1),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='<= Reshow ?',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L
         $FS   TEXT='(Y/N)',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(1,2),MF=L
         $FS   SF=(IC),MF=L
AN4SF3L  EQU   *-AN4SF3
AN4L     EQU   *-AN4
         EJECT
*======= ANIMATION 5 (ORIGINAL : PS6)
*              RETURN CODE : 0 = OK, CONTINUE
*                            4 = ERROR OR END
         SPACE 1
ANIM5   $XENT  BASE=R9
         L     R8,=A(AN5,AN5L,RSCRN)
         USING AN5,R8              SCREEN IMAGE ADDRESSABILITY
         MVC   AN5T1(L'TXTW+L'TXTH),TXTW
         MVC   AN5T2(2*L'AN5T2),TXT1XY
         MVC   AN5T3(2*L'AN5T3),TXT2XY
         MVC   AN5Q1(L'TXQW+L'TXQH),TXQW
         MVC   AN5Q2(2*L'AN5Q2),TXQXY
         LA    R2,AN5MFN
         LA    R3,AN5MF
         LA    R4,AN5D1
ANIM5L   XR    R1,R1
         LH    R0,0(R3)
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISX
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',0(R4)
         XR    R1,R1
         LH    R0,L'AN5MF(R3)
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISY
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',L'AN5D1(R4)
         LA    R3,2*L'AN5MF(R3)
         LA    R4,2*L'AN5D1(R4)
         BCT   R2,ANIM5L
         MVC   AN5D5,AN5D1
         MVC   AN5D5+L'AN5D5,AN5D1+3*L'AN5D1
         MVC   AN5D5+2*L'AN5D5,AN5D1+2*L'AN5D1
         MVC   AN5D5+3*L'AN5D5,AN5D1+L'AN5D1
         MVC   ASCRIPTR(ASPL),=A(AN5,AN5L,RSCRN) SET PTR'S
         MVI   AN5X1,X'01'         FORCE START TO EXTERNAL
ANIM5R  $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X
               MF=(I,AN5LN1I)      SET NORMAL INPUT
         MVI   INCMD,C' '          RESET INPUT FIELD
         CLI   AN5X1,X'03'         IS IT EXTERNAL?
         BNE   ANIM5C              NO, WAS INTERNAL
         MVI   AN5X1,X'01'         YES, SET BLUE
         MVC   AN5X2,=AL1(0,240)   INTERNAL
        $FS    TEXT='Reshow ?',MF=(I,AN5LN1X)
        $FS    TEXT='(Y/N)',MF=(I,AN5LN1Z)
         B     ANIM5E
ANIM5C   MVI   AN5X1,X'03'         SET PINK
         MVC   AN5X2,=AL1(1,16)    EXTERNAL
        $FS    TEXT='... just',MF=(I,AN5LN1X)
        $FS    TEXT='ENTER',MF=(I,AN5LN1Z)
ANIM5E   MVC   AN5LN1R,INCMD
        #GO    FSCALL              DISPLAY SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     ANIM5X              0 - CONTINUE (NO PF-KEY SUPPORTED)
         B     ANIM5Y              4 - ERROR
         LTR   R1,R1               8 - DID USER TYPE IN?
         BM    ANIM5Z              IMMEDIATE TERMINATION
         BZ    ANIM5E              NONE, RESHOW
         CLI   AN5X1,X'03'         WAS IT EXTERNAL?
         BE    ANIM5R              YES
         CLI   INCMD,C'Y'          NO, RESHOW (RE-DISPLAY) COMMAND?
         BE    ANIM5R              "Y", GO DO IT
         CLI   INCMD,C'N'
         BE    *+L'*+8             "N", CONTINUE
         CLI   INCMD,C' '          JUST A SPACE (BLANK)?
         BNE   *+L'*+6             NO
         XR    R15,R15             YES, CONTINUE, SET RC=0
         B     ANIM5X
        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X
               MF=(I,AN5LN1I)      SET ERROR INPUT
         B     ANIM5E
         DROP  R8
ANIM5Y   LA    R0,ERRAN5
         LA    R1,L'ERRAN5
         ST    R0,ERRMSA
         STH   R1,ERRMSL
ANIM5Z   LA    R15,4               SET RC=4
ANIM5X  $XRET  CC=(R15)
         SPACE 1
*                                  FACTORS (% OF X,Y) TABLE
AN5MF    DC    H'+20'                   X CO-ORD OF MAJOR AXIS END
         DC    H'+25'                   Y CO-ORD OF MINOR AXIS END
         DC    H'-30'                   X CO-ORD OF MINOR AXIS END
         DC    H'+20'                   Y CO-ORD OF MAJOR AXIS END
AN5MFN   EQU   (*-AN5MF)/(2*L'AN5MF)
ERRAN5   DC    C' -> "ANIM5" : test failed'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         SPACE 1
AN5      $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN5SF1   DC    AL2(AN5SF1L)        L = LENGTH OF S.F.
         DC    XL1'03'             SFID = ERASE/RESET
         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE
AN5SF1L  EQU   *-AN5SF1
AN5SF2   DC    AL2(AN5SF2L)        L = LENGTH OF S.F.
         DC    XL2'0F10'           SFID = OBJECT PICTURE
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'70'               GBSEG (SEGMENT START)
         DC    AL1(AN5P1L)           LENGTH OF FOLLOWING PARAMETERS
AN5P1    DC    FL4'1'                SEGMENT-ID
*                                    FLAGS - 1ST BYTE :
         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE
*                                    BIT 1 = 1 - RESERVED
*                                    BIT 2 = 1 - DETECTABLE
*                                    BIT 3 = 1 - RESERVED
*                                    BIT 4 = 0 - NO HIGHLIGHTING
*                                    BITS 5-7 = 100 - RESERVED
*                                    FLAGS - 2ND BYTE :
         DC    BL1'00001000'         BIT 0 = 0 - CHAINED
*                                    BITS 1-2 = 00 - RESERVED
*                                    BIT 3 = 0 - NO PROLOG
*                                    BIT 4 = 1 - TRANSFORMABLE
*                                    BITS 5-7 = 000 - RESERVED
         DC    AL2(AN5SG1L)          LENGTH OF SEGMENT TO BE CREATED
         DC    XL4'00'               RESERVED
AN5P1L   EQU   *-AN5P1
AN5SG1   EQU   *                   SEGMENT DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'06'               COLOR = YELLOW
         DC    XL1'0C'             GSMX (SET MIX)
         DC    XL1'00'               MODE = DRAWING DEFAULT
         DC    XL1'18'             GSLT (SET LINE TYPE)
         DC    XL1'07'               LINETYPE = SOLID LINE
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)
         DC    XL1'10'               PATTERN = SOLID SHADING
         DC    XL1'22'             GSAP (SET ARC PARAMETERS)
         DC    AL1(AN5D1L)           LENGTH OF FOLLOWING DATA
AN5D1    DC    HL2'0'                  X CO-ORD OF MAJOR AXIS END
         DC    HL2'0'                  Y CO-ORD OF MINOR AXIS END
         DC    HL2'0'                  X CO-ORD OF MINOR AXIS END
         DC    HL2'0'                  Y CO-ORD OF MAJOR AXIS END
AN5D1L   EQU   *-AN5D1
         DC    XL1'68'             GBAR (BEGIN AREA)
         DC    XL1'00'               FLAGS = DO NOT DRAW BOUNDARY LINE
         DC    XL1'C7'             GFARC (FULL ARC AT GIVEN POSITION)
         DC    AL1(AN5D2L)           LENGTH OF FOLLOWING DATA
AN5D2    DC    HL2'0'                  X CO-ORD OF CENTER
         DC    HL2'0'                  Y " "
         DC    AL1(1,0)                MULTIPLIER
AN5D2L   EQU   *-AN5D2
         DC    XL1'60'             GEAR (END AREA)
         DC    AL1(0)                NO FOLLOWING DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
AN5X1    DC    XL1'00'               COLOR = PINK
         DC    XL1'C7'             GFARC (FULL ARC AT GIVEN POSITION)
         DC    AL1(AN5D3L)           LENGTH OF FOLLOWING DATA
AN5D3    DC    HL2'0'                  X CO-ORD OF CENTER
         DC    HL2'0'                  Y " "
AN5X2    DC    AL2(0)                  MULTIPLIER
AN5D3L   EQU   *-AN5D3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'08'               SYMBOL = FILLED SQUARE
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN5D4L)           LENGTH OF FOLLOWING DATA
AN5D4    DC    HL2'0'                  X = 0
         DC    HL2'0'                  Y = 0
AN5D4L   EQU   *-AN5D4
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'04'               COLOR = GREEN
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'08'               SYMBOL = FILLED SQUARE
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN5D5L)           LENGTH OF FOLLOWING DATA
AN5D5    DC    HL2'0'                  X CO-ORD OF MAJOR AXIS END
         DC    HL2'0'                  Y CO-ORD OF MAJOR AXIS END
         DC    HL2'0'                  X CO-ORD OF MINOR AXIS END
         DC    HL2'0'                  Y CO-ORD OF MINOR AXIS END
AN5D5L   EQU   *-AN5D5
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'07'               COLOR = NEUTRAL (WHITE)
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'01'               DIRECTION = LEFT TO RIGHT
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN5T1L)           LENGTH OF FOLLOWING DATA
AN5T1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN5T1L   EQU   *-AN5T1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN5T2L)           LENGTH OF FOLLOWING DATA
AN5T2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
AN5T2T   DC    CL6'Test :'             STRING
AN5T2L   EQU   *-AN5T2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN5T3L)           LENGTH OF FOLLOWING DATA
AN5T3    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL18' Display Full Arc' STRING
AN5T3L   EQU   *-AN5T3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'02'               DIRECTION = TOP TO BOTTOM
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN5Q1L)           LENGTH OF FOLLOWING DATA
AN5Q1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN5Q1L   EQU   *-AN5Q1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN5Q2L)           LENGTH OF FOLLOWING DATA
AN5Q2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL8'ANIM5'              STRING
AN5Q2L   EQU   *-AN5Q2
AN5SG1L  EQU   *-AN5SG1
AN5SF2L  EQU   *-AN5SF2
AN5SF3   DC    AL2(AN5SF3L)        L = LENGTH OF S.F.
         DC    XL1'40'             SFID = OUTBOUND 3270DS
         DC    XL1'00'               PID
         $FS   CC=(W),WCC=(KBR),MF=L
         $FS   SBA=(1,1),MF=L
AN5LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L
AN5LN1R  $FS   TEXT=(' ',1),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='<= ',MF=L
AN5LN1X  $FS   TEXT=(' ',8),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L
AN5LN1Z  $FS   TEXT=(' ',5),MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(1,2),MF=L
         $FS   SF=(IC),MF=L
AN5SF3L  EQU   *-AN5SF3
AN5L     EQU   *-AN5
         EJECT
*======= ANIMATION 6 (ORIGINAL : ANIM3)
*              RETURN CODE : 0 = OK, CONTINUE
*                            4 = ERROR OR END
         SPACE 1
ANIM6   $XENT  BASE=R9
         LA    R2,AN6MFN
         LA    R3,AN6MF
         LA    R4,AN6SXY
ANIM6V   XR    R1,R1
         LH    R0,0(R3)
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISX
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',0(R4)
         XR    R1,R1
         LH    R0,L'AN6MF(R3)
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISY
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',L'AN6SXY(R4)
         LA    R3,2*L'AN6MF(R3)
         LA    R4,2*L'AN6SXY(R4)
         BCT   R2,ANIM6V
         L     R8,=A(AN6S1,AN6S1L)
         USING AN6S1,R8            SCREEN IMAGE ADDRESSABILITY
         MVC   AN6T1(L'TXTW+L'TXTH),TXTW
         MVC   AN6T2(2*L'AN6T2),TXT1XY
         MVC   AN6T3(2*L'AN6T3),TXT2XY
         MVC   AN6Q1(L'TXQW+L'TXQH),TXQW
         MVC   AN6Q2(2*L'AN6Q2),TXQXY
         MVC   AN6D3(AN6D3L),AN6SXY
         B     ANIM6R+L'ANIM6R
ANIM6R   L     R8,=A(AN6S1,AN6S1L)
         LH    R7,AN6NST           NUMBER OF STEPS
         LA    R5,AN6WXY
         LA    R6,AN6IXY
         LA    R14,AN6SXY
         LA    R15,AN6D1N
ANIM6Q   LH    R3,AN6STOF(R14)     FINAL CO-ORD
         LH    R1,0(R14)
         LTR   R1,R1
         BZ    *+L'*+6
         SR    R3,R1               SUBTRACT INITIAL CO-ORD
         M     R0,=F'1000'
         ST    R1,0(R5)            INITIAL CO-ORD
         LTR   R3,R3
         BZ    *+L'*+6
         M     R2,=F'1000'
         DR    R2,R7               DIVIDE MOVEMENT BY STEPS
         ST    R3,0(R6)            INCREMENT CO-ORD
         LA    R5,L'AN6WXY(R5)
         LA    R6,L'AN6IXY(R6)
         LA    R14,L'AN6SXY(R14)
         BCT   R15,ANIM6Q
         LA    R7,1(R7)
ANIM6L   LA    R2,AN6WXY           SET VALUES
         LA    R3,AN6D1
         LA    R4,AN6D1N
ANIM6S   XR    R1,R1
         L     R0,0(R2)
         LTR   R0,R0
         BZ    *+L'*+8
         SRDA  R0,32               SHIFT INTO EVEN-ODD PAIR
         D     R0,=F'1000'
         STCM  R1,B'0011',0(R3)
         LA    R2,L'AN6WXY(R2)
         LA    R3,L'AN6D1(R3)
         BCT   R4,ANIM6S
         MVC   ASCRIPTR(ASPS),=A(AN6S1,AN6S1L) SET PTR'S
        #GO    FSCOUT              SEND TO SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     *+L'*+4             0 - OK
         B     ANIM6Y              4 - ERROR
         BCT   R7,*+L'*+4          LOOP FOR NUMBER OF STEPS
         B     ANIM6T
         LA    R1,AN6D1N           INCREMENT VALUES
         LA    R2,AN6WXY
         LA    R3,AN6IXY
ANIM6I   L     R0,0(R2)
         A     R0,0(R3)
         ST    R0,0(R2)
         LA    R2,L'AN6WXY(R2)
         LA    R3,L'AN6IXY(R3)
         BCT   R1,ANIM6I
         B     ANIM6L
         DROP  R8
ANIM6T   L     R8,=A(AN6S2,AN6S2L,RSCRN)
         USING AN6S2,R8            SCREEN IMAGE ADDRESSABILITY
         MVC   ASCRIPTR(ASPL),=A(AN6S2,AN6S2L,RSCRN) SET PTR'S
        $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X
               MF=(I,AN6LN1I)      SET NORMAL INPUT
         MVI   INCMD,C' '          RESET INPUT FIELD
ANIM6E   MVC   AN6LN1R,INCMD
        #GO    FSCALL              DISPLAY SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     ANIM6X              0 - CONTINUE (NO PF-KEY SUPPORTED)
         B     ANIM6Y              4 - ERROR
         LTR   R1,R1               8 - DID USER TYPE IN?
         BZ    ANIM6E              NONE, RESHOW
         BM    ANIM6Z              IMMEDIATE TERMINATION
         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?
         BE    ANIM6R              "Y", GO DO IT
         CLI   INCMD,C'N'
         BE    *+L'*+8             "N", CONTINUE
         CLI   INCMD,C' '          JUST A SPACE (BLANK)?
         BNE   *+L'*+6             NO
         XR    R15,R15             YES, CONTINUE, SET RC=0
         B     ANIM6X
        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X
               MF=(I,AN6LN1I)      SET ERROR INPUT
         B     ANIM6E
         DROP  R8
ANIM6Y   LA    R0,ERRAN6
         LA    R1,L'ERRAN6
         ST    R0,ERRMSA
         STH   R1,ERRMSL
ANIM6Z   LA    R15,4               SET RC=4
ANIM6X  $XRET  CC=(R15)
         SPACE 1
AN6WXY   DC    2F'0'               X1-Y1 WORK VALUES
AN6IXY   DC    2F'0'               X1-Y1 INCREMENT VALUES
AN6NST   DC    H'32'               NUMBER OF STEPS
AN6SXY   DC    H'0'                X1 CO-ORD OF ANIM START
         DC    H'0'                Y1 " "
AN6STOF  EQU   *-AN6SXY
         DC    H'0'                X1 CO-ORD OF ANIM END
         DC    H'0'                Y1 " "
*                                  FACTORS (% OF X,Y) TABLE
AN6MF    DC    H'-70'              X1 CO-ORD OF ANIM START
         DC    H'+50'              Y1 " "
         DC    H'+70'              X1 CO-ORD OF ANIM END
         DC    H'+50'              Y1 " "
AN6MFN   EQU   (*-AN6MF)/(2*L'AN6MF)
ERRAN6   DC    C' -> "ANIM6" : test failed'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         SPACE 1
AN6S1    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN6SF1   DC    AL2(AN6SF1L)        L = LENGTH OF S.F.
         DC    XL1'03'             SFID = ERASE/RESET
         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE
AN6SF1L  EQU   *-AN6SF1
AN6SF2   DC    AL2(AN6SF2L)        L = LENGTH OF S.F.
         DC    XL2'0F10'           SFID = OBJECT PICTURE
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'70'               GBSEG (SEGMENT START)
         DC    AL1(AN6P1L)           LENGTH OF FOLLOWING PARAMETERS
AN6P1    DC    CL4'CH01'             SEGMENT-ID
*                                    FLAGS - 1ST BYTE :
         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE
*                                    BIT 1 = 1 - RESERVED
*                                    BIT 2 = 1 - DETECTABLE
*                                    BIT 3 = 1 - RESERVED
*                                    BIT 4 = 0 - NO HIGHLIGHTING
*                                    BITS 5-7 = 100 - RESERVED
*                                    FLAGS - 2ND BYTE :
         DC    BL1'00001000'         BIT 0 = 0 - CHAINED
*                                    BITS 1-2 = 00 - RESERVED
*                                    BIT 3 = 0 - NO PROLOG
*                                    BIT 4 = 1 - TRANSFORMABLE
*                                    BITS 5-7 = 000 - RESERVED
         DC    AL2(AN6SG1L)          LENGTH OF SEGMENT TO BE CREATED
         DC    XL4'00'               RESERVED
AN6P1L   EQU   *-AN6P1
AN6SG1   EQU   *                   SEGMENT DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'05'               COLOR = TURQ
         DC    XL1'0C'             GSMX (SET MIX)
         DC    XL1'00'               MODE = DRAWING DEFAULT
         DC    XL1'18'             GSLT (SET LINE TYPE)
         DC    XL1'07'               LINETYPE = SOLID LINE
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)
         DC    AL1(AN6D1L)           LENGTH OF FOLLOWING DATA
AN6D1    DC    HL2'0'                  X CO-ORD OF LINE START
         DC    HL2'0'                  Y " "
AN6D1N   EQU   (*-AN6D1)/L'AN6D1
         DC    HL2'0'                  X CO-ORD OF LINE END
         DC    HL2'0'                  Y " "
AN6D1L   EQU   *-AN6D1
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'08'               SYMBOL = FILLED SQUARE
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN6D2L)           LENGTH OF FOLLOWING DATA
AN6D2    DC    HL2'0'                  X = 0
         DC    HL2'0'                  Y = 0
AN6D2L   EQU   *-AN6D2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'04'               COLOR = GREEN
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'08'               SYMBOL = FILLED SQUARE
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN6D3L)           LENGTH OF FOLLOWING DATA
AN6D3    DC    HL2'0'                  X CO-ORD OF INITIAL START
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  Y CO-ORD OF FINAL END
         DC    HL2'0'                  X " "
AN6D3L   EQU   *-AN6D3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'07'               COLOR = NEUTRAL (WHITE)
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'01'               DIRECTION = LEFT TO RIGHT
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN6T1L)           LENGTH OF FOLLOWING DATA
AN6T1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN6T1L   EQU   *-AN6T1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN6T2L)           LENGTH OF FOLLOWING DATA
AN6T2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
AN6T2T   DC    CL6'Test :'             STRING
AN6T2L   EQU   *-AN6T2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN6T3L)           LENGTH OF FOLLOWING DATA
AN6T3    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL16' Move LINE (X,Y)'  STRING
AN6T3L   EQU   *-AN6T3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'02'               DIRECTION = TOP TO BOTTOM
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN6Q1L)           LENGTH OF FOLLOWING DATA
AN6Q1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN6Q1L   EQU   *-AN6Q1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN6Q2L)           LENGTH OF FOLLOWING DATA
AN6Q2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL8'ANIM6'              STRING
AN6Q2L   EQU   *-AN6Q2
AN6SG1L  EQU   *-AN6SG1
AN6SF2L  EQU   *-AN6SF2
AN6S1L   EQU   *-AN6S1
         SPACE 1
AN6S2    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN6SF3   DC    AL2(AN6SF3L)        L = LENGTH OF S.F.
         DC    XL1'40'             SFID = OUTBOUND 3270DS
         DC    XL1'00'               PID
         $FS   CC=(W),WCC=(KBR),MF=L
         $FS   SBA=(1,1),MF=L
AN6LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L
AN6LN1R  $FS   TEXT=(' ',1),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='<= Reshow ?',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L
         $FS   TEXT='(Y/N)',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(1,2),MF=L
         $FS   SF=(IC),MF=L
AN6SF3L  EQU   *-AN6SF3
AN6S2L   EQU   *-AN6S2
         EJECT
*======= ANIMATION 7 (ORIGINAL : ANIM2)
*              RETURN CODE : 0 = OK, CONTINUE
*                            4 = ERROR OR END
         SPACE 1
ANIM7   $XENT  BASE=R9
         LA    R2,AN7MFN
         LA    R3,AN7MF
         LA    R4,AN7SXY
ANIM7V   XR    R1,R1
         LH    R0,0(R3)
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISX
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',0(R4)
         XR    R1,R1
         LH    R0,L'AN7MF(R3)
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISY
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',L'AN7SXY(R4)
         LA    R3,2*L'AN7MF(R3)
         LA    R4,2*L'AN7SXY(R4)
         BCT   R2,ANIM7V
         L     R8,=A(AN7S1,AN7S1L)
         USING AN7S1,R8            SCREEN IMAGE ADDRESSABILITY
         MVC   AN7T1(L'TXTW+L'TXTH),TXTW
         MVC   AN7T2(2*L'AN7T2),TXT1XY
         MVC   AN7T3(2*L'AN7T3),TXT2XY
         MVC   AN7Q1(L'TXQW+L'TXQH),TXQW
         MVC   AN7Q2(2*L'AN7Q2),TXQXY
         DROP  R8
         L     R8,=A(AN7S2,AN7S2L)
         USING AN7S2,R8            SCREEN IMAGE ADDRESSABILITY
         MVC   AN7D3(AN7D3L/2),AN7SXY
         MVC   AN7D3+2*L'AN7D3(AN7D3L/2),AN7SXY+AN7STOF
         MVC   AN7D4(AN7D4L/2),AN7SXY+2*L'AN7SXY
         MVC   AN7D4+2*L'AN7D4(AN7D4L/2),AN7SXY+AN7STOF+2*L'AN7SXY
         B     ANIM7R+L'ANIM7R
ANIM7R   L     R8,=A(AN7S2,AN7S2L)
         LH    R7,AN7NST           NUMBER OF STEPS
         LA    R5,AN7WXY
         LA    R6,AN7IXY
         LA    R14,AN7SXY
         LA    R15,AN7D1N
ANIM7Q   LH    R3,AN7STOF(R14)     FINAL CO-ORD
         LH    R1,0(R14)
         LTR   R1,R1
         BZ    *+L'*+6
         SR    R3,R1               SUBTRACT INITIAL CO-ORD
         M     R0,=F'1000'
         ST    R1,0(R5)            INITIAL CO-ORD
         LTR   R3,R3
         BZ    *+L'*+6
         M     R2,=F'1000'
         DR    R2,R7               DIVIDE MOVEMENT BY STEPS
         ST    R3,0(R6)            INCREMENT CO-ORD
         LA    R5,L'AN7WXY(R5)
         LA    R6,L'AN7IXY(R6)
         LA    R14,L'AN7SXY(R14)
         BCT   R15,ANIM7Q
         MVC   ASCRIPTR(ASPS),=A(AN7S1,AN7S1L) SET PTR'S
        #GO    FSCOUT              SEND TO SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     *+L'*+4             0 - OK
         B     ANIM7Y              4 - ERROR
         LA    R7,1(R7)
ANIM7L   LA    R2,AN7WXY           SET VALUES
         LA    R3,AN7D1
         LA    R4,AN7D1N
ANIM7S   XR    R1,R1
         L     R0,0(R2)
         LTR   R0,R0
         BZ    *+L'*+8
         SRDA  R0,32               SHIFT INTO EVEN-ODD PAIR
         D     R0,=F'1000'
         STCM  R1,B'0011',0(R3)
         LA    R2,L'AN7WXY(R2)
         LA    R3,L'AN7D1(R3)
         BCT   R4,ANIM7S
         MVC   ASCRIPTR(ASPS),=A(AN7S2,AN7S2L) SET PTR'S
        #GO    FSCOUT              SEND TO SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     *+L'*+4             0 - OK
         B     ANIM7Y              4 - ERROR
         BCT   R7,*+L'*+4          LOOP FOR NUMBER OF STEPS
         B     ANIM7T
         LA    R1,AN7D1N           INCREMENT VALUES
         LA    R2,AN7WXY
         LA    R3,AN7IXY
ANIM7I   L     R0,0(R2)
         A     R0,0(R3)
         ST    R0,0(R2)
         LA    R2,L'AN7WXY(R2)
         LA    R3,L'AN7IXY(R3)
         BCT   R1,ANIM7I
         B     ANIM7L
         DROP  R8
ANIM7T   L     R8,=A(AN7S3,AN7S3L,RSCRN)
         USING AN7S3,R8            SCREEN IMAGE ADDRESSABILITY
         MVC   ASCRIPTR(ASPL),=A(AN7S3,AN7S3L,RSCRN) SET PTR'S
        $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X
               MF=(I,AN7LN1I)      SET NORMAL INPUT
         MVI   INCMD,C' '          RESET INPUT FIELD
ANIM7E   MVC   AN7LN1R,INCMD
        #GO    FSCALL              DISPLAY SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     ANIM7X              0 - CONTINUE (NO PF-KEY SUPPORTED)
         B     ANIM7Y              4 - ERROR
         LTR   R1,R1               8 - DID USER TYPE IN?
         BZ    ANIM7E              NONE, RESHOW
         BM    ANIM7Z              IMMEDIATE TERMINATION
         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?
         BE    ANIM7R              "Y", GO DO IT
         CLI   INCMD,C'N'
         BE    *+L'*+8             "N", CONTINUE
         CLI   INCMD,C' '          JUST A SPACE (BLANK)?
         BNE   *+L'*+6             NO
         XR    R15,R15             YES, CONTINUE, SET RC=0
         B     ANIM7X
        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X
               MF=(I,AN7LN1I)      SET ERROR INPUT
         B     ANIM7E
         DROP  R8
ANIM7Y   LA    R0,ERRAN7
         LA    R1,L'ERRAN7
         ST    R0,ERRMSA
         STH   R1,ERRMSL
ANIM7Z   LA    R15,4               SET RC=4
ANIM7X  $XRET  CC=(R15)
         SPACE 1
AN7WXY   DC    4F'0'               X1-Y1-X2-Y2 WORK VALUES
AN7IXY   DC    4F'0'               X1-Y1-X2-Y2 INCREMENT VALUES
AN7NST   DC    H'112'              NUMBER OF STEPS
AN7SXY   DC    H'0'                X1 CO-ORD OF ANIM START
         DC    H'0'                Y1 " "
         DC    H'0'                X2 " "
         DC    H'0'                Y2 " "
AN7STOF  EQU   *-AN7SXY
         DC    H'0'                X1 CO-ORD OF ANIM END
         DC    H'0'                Y1 " "
         DC    H'0'                X2 " "
         DC    H'0'                Y2 " "
*                                  FACTORS (% OF X,Y) TABLE
AN7MF    DC    H'-70'              X1 CO-ORD OF ANIM START
         DC    H'+10'              Y1 " "
         DC    H'-70'              X2 " "
         DC    H'+65'              Y2 " "
         DC    H'+30'              X1 CO-ORD OF ANIM END
         DC    H'-25'              Y1 " "
         DC    H'+70'              X2 " "
         DC    H'-95'              Y2 " "
AN7MFN   EQU   (*-AN7MF)/(2*L'AN7MF)
ERRAN7   DC    C' -> "ANIM7" : test failed'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         SPACE 1
AN7S1    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN7SF1   DC    AL2(AN7SF1L)        L = LENGTH OF S.F.
         DC    XL1'03'             SFID = ERASE/RESET
         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE
AN7SF1L  EQU   *-AN7SF1
AN7SF2   DC    AL2(AN7SF2L)        L = LENGTH OF S.F.
         DC    XL2'0F10'           SFID = OBJECT PICTURE
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'70'               GBSEG (SEGMENT START)
         DC    AL1(AN7P1L)           LENGTH OF FOLLOWING PARAMETERS
AN7P1    DC    CL4'CH01'             SEGMENT-ID
*                                    FLAGS - 1ST BYTE :
         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE
*                                    BIT 1 = 1 - RESERVED
*                                    BIT 2 = 1 - DETECTABLE
*                                    BIT 3 = 1 - RESERVED
*                                    BIT 4 = 0 - NO HIGHLIGHTING
*                                    BITS 5-7 = 100 - RESERVED
*                                    FLAGS - 2ND BYTE :
         DC    BL1'00001000'         BIT 0 = 0 - CHAINED
*                                    BITS 1-2 = 00 - RESERVED
*                                    BIT 3 = 0 - NO PROLOG
*                                    BIT 4 = 1 - TRANSFORMABLE
*                                    BITS 5-7 = 000 - RESERVED
         DC    AL2(AN7SG1L)          LENGTH OF SEGMENT TO BE CREATED
         DC    XL4'00'               RESERVED
AN7P1L   EQU   *-AN7P1
AN7SG1   EQU   *                   SEGMENT DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'07'               COLOR = NEUTRAL (WHITE)
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'01'               DIRECTION = LEFT TO RIGHT
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN7T1L)           LENGTH OF FOLLOWING DATA
AN7T1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN7T1L   EQU   *-AN7T1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN7T2L)           LENGTH OF FOLLOWING DATA
AN7T2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
AN7T2T   DC    CL6'Test :'             STRING
AN7T2L   EQU   *-AN7T2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN7T3L)           LENGTH OF FOLLOWING DATA
AN7T3    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL16' Copy LINE (X,Y)'  STRING
AN7T3L   EQU   *-AN7T3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'02'               DIRECTION = TOP TO BOTTOM
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN7Q1L)           LENGTH OF FOLLOWING DATA
AN7Q1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN7Q1L   EQU   *-AN7Q1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN7Q2L)           LENGTH OF FOLLOWING DATA
AN7Q2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL8'ANIM7'              STRING
AN7Q2L   EQU   *-AN7Q2
AN7SG1L  EQU   *-AN7SG1
AN7SF2L  EQU   *-AN7SF2
AN7S1L   EQU   *-AN7S1
         SPACE 1
AN7S2    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN7SF3   DC    AL2(AN7SF3L)        L = LENGTH OF S.F.
         DC    XL2'0F10'           SFID = OBJECT PICTURE
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'70'               GBSEG (SEGMENT START)
         DC    AL1(AN7P2L)           LENGTH OF FOLLOWING PARAMETERS
AN7P2    DC    CL4'CH01'             SEGMENT-ID
*                                    FLAGS - 1ST BYTE :
         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE
*                                    BIT 1 = 1 - RESERVED
*                                    BIT 2 = 1 - DETECTABLE
*                                    BIT 3 = 1 - RESERVED
*                                    BIT 4 = 0 - NO HIGHLIGHTING
*                                    BITS 5-7 = 100 - RESERVED
*                                    FLAGS - 2ND BYTE :
         DC    BL1'00001000'         BIT 0 = 0 - CHAINED
*                                    BITS 1-2 = 00 - RESERVED
*                                    BIT 3 = 0 - NO PROLOG
*                                    BIT 4 = 1 - TRANSFORMABLE
*                                    BITS 5-7 = 000 - RESERVED
         DC    AL2(AN7SG2L)          LENGTH OF SEGMENT TO BE CREATED
         DC    XL4'00'               RESERVED
AN7P2L   EQU   *-AN7P2
AN7SG2   EQU   *                   SEGMENT DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'05'               COLOR = TURQ
         DC    XL1'0C'             GSMX (SET MIX)
         DC    XL1'00'               MODE = DRAWING DEFAULT
         DC    XL1'18'             GSLT (SET LINE TYPE)
         DC    XL1'07'               LINETYPE = SOLID LINE
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)
         DC    AL1(AN7D1L)           LENGTH OF FOLLOWING DATA
AN7D1    DC    HL2'0'                  X CO-ORD OF LINE START
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  X CO-ORD OF LINE END
         DC    HL2'0'                  Y " "
AN7D1L   EQU   *-AN7D1
AN7D1N   EQU   (*-AN7D1)/L'AN7D1
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'08'               SYMBOL = FILLED SQUARE
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN7D2L)           LENGTH OF FOLLOWING DATA
AN7D2    DC    HL2'0'                  X = 0
         DC    HL2'0'                  Y = 0
AN7D2L   EQU   *-AN7D2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'04'               COLOR = GREEN
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'08'               SYMBOL = FILLED SQUARE
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN7D3L)           LENGTH OF FOLLOWING DATA
AN7D3    DC    HL2'0'                  X CO-ORD OF INITIAL START
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  Y CO-ORD OF FINAL START
         DC    HL2'0'                  X " "
AN7D3L   EQU   *-AN7D3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'06'               COLOR = YELLOW
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'08'               SYMBOL = FILLED SQUARE
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN7D4L)           LENGTH OF FOLLOWING DATA
AN7D4    DC    HL2'0'                  X CO-ORD OF INITIAL END
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  Y CO-ORD OF FINAL END
         DC    HL2'0'                  X " "
AN7D4L   EQU   *-AN7D4
AN7SG2L  EQU   *-AN7SG2
AN7SF3L  EQU   *-AN7SF3
AN7S2L   EQU   *-AN7S2
         SPACE 1
AN7S3    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN7SF4   DC    AL2(AN7SF4L)        L = LENGTH OF S.F.
         DC    XL1'40'             SFID = OUTBOUND 3270DS
         DC    XL1'00'               PID
         $FS   CC=(W),WCC=(KBR),MF=L
         $FS   SBA=(1,1),MF=L
AN7LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L
AN7LN1R  $FS   TEXT=(' ',1),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='<= Reshow ?',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L
         $FS   TEXT='(Y/N)',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(1,2),MF=L
         $FS   SF=(IC),MF=L
AN7SF4L  EQU   *-AN7SF4
AN7S3L   EQU   *-AN7S3
         EJECT
*======= ANIMATION 8 (ORIGINAL : ANIM4)
*              RETURN CODE : 0 = OK, CONTINUE
*                            4 = ERROR OR END
         SPACE 1
ANIM8   $XENT  BASE=R9
         LA    R2,AN8MFN
         LA    R3,AN8MF
         LA    R4,AN8SXY
ANIM8V   XR    R1,R1
         LH    R0,0(R3)
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISX
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',0(R4)
         XR    R1,R1
         LH    R0,L'AN8MF(R3)
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISY
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',L'AN8SXY(R4)
         LA    R3,2*L'AN8MF(R3)
         LA    R4,2*L'AN8SXY(R4)
         BCT   R2,ANIM8V
         L     R8,=A(AN8S1,AN8S1L)
         USING AN8S1,R8            SCREEN IMAGE ADDRESSABILITY
         MVC   AN8T1(L'TXTW+L'TXTH),TXTW
         MVC   AN8T2(2*L'AN8T2),TXT1XY
         MVC   AN8T3(2*L'AN8T3),TXT2XY
         MVC   AN8Q1(L'TXQW+L'TXQH),TXQW
         MVC   AN8Q2(2*L'AN8Q2),TXQXY
         DROP  R8
         L     R8,=A(AN8S2,AN8S2L)
         USING AN8S2,R8            SCREEN IMAGE ADDRESSABILITY
         MVC   AN8D3(AN8D3L/2),AN8SXY
         MVC   AN8D3+2*L'AN8D3(AN8D3L/2),AN8SXY+AN8STOF
         B     ANIM8R+L'ANIM8R
ANIM8R   L     R8,=A(AN8S2,AN8S2L)
         LH    R7,AN8NST           NUMBER OF STEPS
         LA    R5,AN8WXY
         LA    R6,AN8IXY
         LA    R14,AN8SXY
         LA    R15,AN8D1N
ANIM8Q   LH    R3,AN8STOF(R14)     FINAL CO-ORD
         LH    R1,0(R14)
         LTR   R1,R1
         BZ    *+L'*+6
         SR    R3,R1               SUBTRACT INITIAL CO-ORD
         M     R0,=F'1000'
         ST    R1,0(R5)            INITIAL CO-ORD
         LTR   R3,R3
         BZ    *+L'*+6
         M     R2,=F'1000'
         DR    R2,R7               DIVIDE MOVEMENT BY STEPS
         ST    R3,0(R6)            INCREMENT CO-ORD
         LA    R5,L'AN8WXY(R5)
         LA    R6,L'AN8IXY(R6)
         LA    R14,L'AN8SXY(R14)
         BCT   R15,ANIM8Q
         MVC   ASCRIPTR(ASPS),=A(AN8S1,AN8S1L) SET PTR'S
        #GO    FSCOUT              SEND TO SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     *+L'*+4             0 - OK
         B     ANIM8Y              4 - ERROR
         LA    R7,1(R7)
ANIM8L   LA    R2,AN8WXY           SET VALUES
         LA    R3,AN8D1
         LA    R4,AN8D1N
ANIM8S   XR    R1,R1
         L     R0,0(R2)
         LTR   R0,R0
         BZ    *+L'*+8
         SRDA  R0,32               SHIFT INTO EVEN-ODD PAIR
         D     R0,=F'1000'
         STCM  R1,B'0011',0(R3)
         LA    R2,L'AN8WXY(R2)
         LA    R3,L'AN8D1(R3)
         BCT   R4,ANIM8S
         MVC   ASCRIPTR(ASPS),=A(AN8S2,AN8S2L) SET PTR'S
        #GO    FSCOUT              SEND TO SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     *+L'*+4             0 - OK
         B     ANIM8Y              4 - ERROR
         BCT   R7,*+L'*+4          LOOP FOR NUMBER OF STEPS
         B     ANIM8T
         LA    R1,AN8D1N           INCREMENT VALUES
         LA    R2,AN8WXY
         LA    R3,AN8IXY
ANIM8I   L     R0,0(R2)
         A     R0,0(R3)
         ST    R0,0(R2)
         LA    R2,L'AN8WXY(R2)
         LA    R3,L'AN8IXY(R3)
         BCT   R1,ANIM8I
         B     ANIM8L
         DROP  R8
ANIM8T   L     R8,=A(AN8S3,AN8S3L,RSCRN)
         USING AN8S3,R8            SCREEN IMAGE ADDRESSABILITY
         MVC   ASCRIPTR(ASPL),=A(AN8S3,AN8S3L,RSCRN) SET PTR'S
        $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X
               MF=(I,AN8LN1I)      SET NORMAL INPUT
         MVI   INCMD,C' '          RESET INPUT FIELD
ANIM8E   MVC   AN8LN1R,INCMD
        #GO    FSCALL              DISPLAY SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     ANIM8X              0 - CONTINUE (NO PF-KEY SUPPORTED)
         B     ANIM8Y              4 - ERROR
         LTR   R1,R1               8 - DID USER TYPE IN?
         BZ    ANIM8E              NONE, RESHOW
         BM    ANIM8Z              IMMEDIATE TERMINATION
         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?
         BE    ANIM8R              "Y", GO DO IT
         CLI   INCMD,C'N'
         BE    *+L'*+8             "N", CONTINUE
         CLI   INCMD,C' '          JUST A SPACE (BLANK)?
         BNE   *+L'*+6             NO
         XR    R15,R15             YES, CONTINUE, SET RC=0
         B     ANIM8X
        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X
               MF=(I,AN8LN1I)      SET ERROR INPUT
         B     ANIM8E
         DROP  R8
ANIM8Y   LA    R0,ERRAN8
         LA    R1,L'ERRAN8
         ST    R0,ERRMSA
         STH   R1,ERRMSL
ANIM8Z   LA    R15,4               SET RC=4
ANIM8X  $XRET  CC=(R15)
         SPACE 1
AN8WXY   DC    4F'0'               X1-Y1-X2-Y2 WORK VALUES
AN8IXY   DC    4F'0'               X1-Y1-X2-Y2 INCREMENT VALUES
AN8NST   DC    H'256'              NUMBER OF STEPS
AN8SXY   DC    H'0'                X1 CO-ORD OF ANIM START
         DC    H'0'                Y1 " "
         DC    H'0'                X2 " "
         DC    H'0'                Y2 " "
AN8STOF  EQU   *-AN8SXY
         DC    H'0'                X1 CO-ORD OF ANIM END
         DC    H'0'                Y1 " "
         DC    H'0'                X2 " "
         DC    H'0'                Y2 " "
*                                  FACTORS (% OF X,Y) TABLE
AN8MF    DC    H'-35'              X1 CO-ORD OF ANIM START
         DC    H'+35'              Y1 " "
         DC    H'+0'               X2 " "
         DC    H'+0'               Y2 " "
         DC    H'+35'              X1 CO-ORD OF ANIM END
         DC    H'+35'              Y1 " "
         DC    H'+0'               X2 " "
         DC    H'+0'               Y2 " "
AN8MFN   EQU   (*-AN8MF)/(2*L'AN8MF)
ERRAN8   DC    C' -> "ANIM8" : test failed'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         SPACE 1
AN8S1    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN8SF1   DC    AL2(AN8SF1L)        L = LENGTH OF S.F.
         DC    XL1'03'             SFID = ERASE/RESET
         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE
AN8SF1L  EQU   *-AN8SF1
AN8SF2   DC    AL2(AN8SF2L)        L = LENGTH OF S.F.
         DC    XL2'0F10'           SFID = OBJECT PICTURE
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'70'               GBSEG (SEGMENT START)
         DC    AL1(AN8P1L)           LENGTH OF FOLLOWING PARAMETERS
AN8P1    DC    CL4'CH01'             SEGMENT-ID
*                                    FLAGS - 1ST BYTE :
         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE
*                                    BIT 1 = 1 - RESERVED
*                                    BIT 2 = 1 - DETECTABLE
*                                    BIT 3 = 1 - RESERVED
*                                    BIT 4 = 0 - NO HIGHLIGHTING
*                                    BITS 5-7 = 100 - RESERVED
*                                    FLAGS - 2ND BYTE :
         DC    BL1'00001000'         BIT 0 = 0 - CHAINED
*                                    BITS 1-2 = 00 - RESERVED
*                                    BIT 3 = 0 - NO PROLOG
*                                    BIT 4 = 1 - TRANSFORMABLE
*                                    BITS 5-7 = 000 - RESERVED
         DC    AL2(AN8SG1L)          LENGTH OF SEGMENT TO BE CREATED
         DC    XL4'00'               RESERVED
AN8P1L   EQU   *-AN8P1
AN8SG1   EQU   *                   SEGMENT DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'07'               COLOR = NEUTRAL (WHITE)
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'01'               DIRECTION = LEFT TO RIGHT
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN8T1L)           LENGTH OF FOLLOWING DATA
AN8T1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN8T1L   EQU   *-AN8T1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN8T2L)           LENGTH OF FOLLOWING DATA
AN8T2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
AN8T2T   DC    CL6'Test :'             STRING
AN8T2L   EQU   *-AN8T2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN8T3L)           LENGTH OF FOLLOWING DATA
AN8T3    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL16' Draw LINE (X,Y)'  STRING
AN8T3L   EQU   *-AN8T3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'02'               DIRECTION = TOP TO BOTTOM
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN8Q1L)           LENGTH OF FOLLOWING DATA
AN8Q1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN8Q1L   EQU   *-AN8Q1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN8Q2L)           LENGTH OF FOLLOWING DATA
AN8Q2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL8'ANIM8'              STRING
AN8Q2L   EQU   *-AN8Q2
AN8SG1L  EQU   *-AN8SG1
AN8SF2L  EQU   *-AN8SF2
AN8S1L   EQU   *-AN8S1
         SPACE 1
AN8S2    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN8SF3   DC    AL2(AN8SF3L)        L = LENGTH OF S.F.
         DC    XL2'0F10'           SFID = OBJECT PICTURE
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'70'               GBSEG (SEGMENT START)
         DC    AL1(AN8P2L)           LENGTH OF FOLLOWING PARAMETERS
AN8P2    DC    CL4'CH01'             SEGMENT-ID
*                                    FLAGS - 1ST BYTE :
         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE
*                                    BIT 1 = 1 - RESERVED
*                                    BIT 2 = 1 - DETECTABLE
*                                    BIT 3 = 1 - RESERVED
*                                    BIT 4 = 0 - NO HIGHLIGHTING
*                                    BITS 5-7 = 100 - RESERVED
*                                    FLAGS - 2ND BYTE :
         DC    BL1'00001000'         BIT 0 = 0 - CHAINED
*                                    BITS 1-2 = 00 - RESERVED
*                                    BIT 3 = 0 - NO PROLOG
*                                    BIT 4 = 1 - TRANSFORMABLE
*                                    BITS 5-7 = 000 - RESERVED
         DC    AL2(AN8SG2L)          LENGTH OF SEGMENT TO BE CREATED
         DC    XL4'00'               RESERVED
AN8P2L   EQU   *-AN8P2
AN8SG2   EQU   *                   SEGMENT DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'05'               COLOR = TURQ
         DC    XL1'0C'             GSMX (SET MIX)
         DC    XL1'00'               MODE = DRAWING DEFAULT
         DC    XL1'18'             GSLT (SET LINE TYPE)
         DC    XL1'07'               LINETYPE = SOLID LINE
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)
         DC    AL1(AN8D1L)           LENGTH OF FOLLOWING DATA
AN8D1    DC    HL2'0'                  X CO-ORD OF LINE START
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  X CO-ORD OF LINE END
         DC    HL2'0'                  Y " "
AN8D1L   EQU   *-AN8D1
AN8D1N   EQU   (*-AN8D1)/L'AN8D1
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'08'               SYMBOL = FILLED SQUARE
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN8D2L)           LENGTH OF FOLLOWING DATA
AN8D2    DC    HL2'0'                  X = 0
         DC    HL2'0'                  Y = 0
AN8D2L   EQU   *-AN8D2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'04'               COLOR = GREEN
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'08'               SYMBOL = FILLED SQUARE
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN8D3L)           LENGTH OF FOLLOWING DATA
AN8D3    DC    HL2'0'                  X CO-ORD OF INITIAL START
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  Y CO-ORD OF FINAL END
         DC    HL2'0'                  X " "
AN8D3L   EQU   *-AN8D3
AN8SG2L  EQU   *-AN8SG2
AN8SF3L  EQU   *-AN8SF3
AN8S2L   EQU   *-AN8S2
         SPACE 1
AN8S3    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN8SF4   DC    AL2(AN8SF4L)        L = LENGTH OF S.F.
         DC    XL1'40'             SFID = OUTBOUND 3270DS
         DC    XL1'00'               PID
         $FS   CC=(W),WCC=(KBR),MF=L
         $FS   SBA=(1,1),MF=L
AN8LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L
AN8LN1R  $FS   TEXT=(' ',1),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='<= Reshow ?',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L
         $FS   TEXT='(Y/N)',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(1,2),MF=L
         $FS   SF=(IC),MF=L
AN8SF4L  EQU   *-AN8SF4
AN8S3L   EQU   *-AN8S3
         EJECT
*======= ANIMATION 9 (ORIGINAL : ANIM4)
*              RETURN CODE : 0 = OK, CONTINUE
*                            4 = ERROR OR END
         SPACE 1
ANIM9   $XENT  BASE=R9
         LA    R2,AN9MFN
         LA    R3,AN9MF
         LA    R4,AN9SXY
ANIM9V   XR    R1,R1
         LH    R0,0(R3)
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISX
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',0(R4)
         XR    R1,R1
         LH    R0,L'AN9MF(R3)
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISY
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',L'AN9SXY(R4)
         LA    R3,2*L'AN9MF(R3)
         LA    R4,2*L'AN9SXY(R4)
         BCT   R2,ANIM9V
         L     R8,=A(AN9S1,AN9S1L)
         USING AN9S1,R8            SCREEN IMAGE ADDRESSABILITY
         MVC   AN9T1(L'TXTW+L'TXTH),TXTW
         MVC   AN9T2(2*L'AN9T2),TXT1XY
         MVC   AN9T3(2*L'AN9T3),TXT2XY
         MVC   AN9Q1(L'TXQW+L'TXQH),TXQW
         MVC   AN9Q2(2*L'AN9Q2),TXQXY
         B     ANIM9R+L'ANIM9R
ANIM9R   L     R8,=A(AN9S1,AN9S1L)
         LH    R7,AN9NST           NUMBER OF STEPS
         LA    R5,AN9WXY
         LA    R6,AN9IXY
         LA    R14,AN9SXY
         LA    R15,AN9D1N
ANIM9Q   LH    R3,AN9STOF(R14)     FINAL CO-ORD
         LH    R1,0(R14)
         LTR   R1,R1
         BZ    *+L'*+6
         SR    R3,R1               SUBTRACT INITIAL CO-ORD
         M     R0,=F'1000'
         ST    R1,0(R5)            INITIAL CO-ORD
         LTR   R3,R3
         BZ    *+L'*+6
         M     R2,=F'1000'
         DR    R2,R7               DIVIDE MOVEMENT BY STEPS
         ST    R3,0(R6)            INCREMENT CO-ORD
         LA    R5,L'AN9WXY(R5)
         LA    R6,L'AN9IXY(R6)
         LA    R14,L'AN9SXY(R14)
         BCT   R15,ANIM9Q
         LA    R7,1(R7)
ANIM9L   LA    R2,AN9WXY           SET VALUES
         LA    R3,AN9D1
         LA    R4,AN9D1N
ANIM9S   XR    R1,R1
         L     R0,0(R2)
         LTR   R0,R0
         BZ    *+L'*+8
         SRDA  R0,32               SHIFT INTO EVEN-ODD PAIR
         D     R0,=F'1000'
         STCM  R1,B'0011',0(R3)
         LA    R2,L'AN9WXY(R2)
         LA    R3,L'AN9D1(R3)
         BCT   R4,ANIM9S
         MVC   AN9D4,AN9D1
         MVC   AN9D4+L'AN9D4,AN9D1+3*L'AN9D1
         MVC   AN9D4+2*L'AN9D4,AN9D1+2*L'AN9D1
         MVC   AN9D4+3*L'AN9D4,AN9D1+L'AN9D1
         MVC   ASCRIPTR(ASPS),=A(AN9S1,AN9S1L) SET PTR'S
        #GO    FSCOUT              SEND TO SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     *+L'*+4             0 - OK
         B     ANIM9Y              4 - ERROR
         BCT   R7,*+L'*+4          LOOP FOR NUMBER OF STEPS
         B     ANIM9T
         LA    R1,AN9D1N           INCREMENT VALUES
         LA    R2,AN9WXY
         LA    R3,AN9IXY
ANIM9I   L     R0,0(R2)
         A     R0,0(R3)
         ST    R0,0(R2)
         LA    R2,L'AN9WXY(R2)
         LA    R3,L'AN9IXY(R3)
         BCT   R1,ANIM9I
         B     ANIM9L
         DROP  R8
ANIM9T   L     R8,=A(AN9S2,AN9S2L,RSCRN)
         USING AN9S2,R8            SCREEN IMAGE ADDRESSABILITY
         MVC   ASCRIPTR(ASPL),=A(AN9S2,AN9S2L,RSCRN) SET PTR'S
        $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X
               MF=(I,AN9LN1I)      SET NORMAL INPUT
         MVI   INCMD,C' '          RESET INPUT FIELD
ANIM9E   MVC   AN9LN1R,INCMD
        #GO    FSCALL              DISPLAY SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     ANIM9X              0 - CONTINUE (NO PF-KEY SUPPORTED)
         B     ANIM9Y              4 - ERROR
         LTR   R1,R1               8 - DID USER TYPE IN?
         BZ    ANIM9E              NONE, RESHOW
         BM    ANIM9Z              IMMEDIATE TERMINATION
         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?
         BE    ANIM9R              "Y", GO DO IT
         CLI   INCMD,C'N'
         BE    *+L'*+8             "N", CONTINUE
         CLI   INCMD,C' '          JUST A SPACE (BLANK)?
         BNE   *+L'*+6             NO
         XR    R15,R15             YES, CONTINUE, SET RC=0
         B     ANIM9X
        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X
               MF=(I,AN9LN1I)      SET ERROR INPUT
         B     ANIM9E
         DROP  R8
ANIM9Y   LA    R0,ERRAN9
         LA    R1,L'ERRAN9
         ST    R0,ERRMSA
         STH   R1,ERRMSL
ANIM9Z   LA    R15,4               SET RC=4
ANIM9X  $XRET  CC=(R15)
         SPACE 1
AN9WXY   DC    4F'0'               X1-Y1-X1-Y1 WORK VALUES
AN9IXY   DC    4F'0'               X1-Y1-X1-Y1 INCREMENT VALUES
AN9NST   DC    H'64'               NUMBER OF STEPS
AN9SXY   DC    H'0'                X1 CO-ORD OF INITIAL MAJOR AXIS END
         DC    H'0'                Y1 CO-ORD OF INITIAL MINOR AXIS END
         DC    H'0'                X1 CO-ORD OF INITIAL MINOR AXIS END
         DC    H'0'                Y1 CO-ORD OF INITIAL MAJOR AXIS END
AN9STOF  EQU   *-AN9SXY
         DC    H'0'                X2 CO-ORD OF FINAL MAJOR AXIS END
         DC    H'0'                Y2 CO-ORD OF FINAL MINOR AXIS END
         DC    H'0'                X2 CO-ORD OF FINAL MINOR AXIS END
         DC    H'0'                Y2 CO-ORD OF FINAL MAJOR AXIS END
*                                  FACTORS (% OF X,Y) TABLE
AN9MF    DC    H'+40'              X1 CO-ORD OF INITIAL MAJOR AXIS END
         DC    H'+75'              Y1 CO-ORD OF INITIAL MINOR AXIS END
         DC    H'+8'               X1 CO-ORD OF INITIAL MINOR AXIS END
         DC    H'+15'              Y1 CO-ORD OF INITIAL MAJOR AXIS END
         DC    H'-8'               X2 CO-ORD OF FINAL MAJOR AXIS END
         DC    H'+15'              Y2 CO-ORD OF FINAL MINOR AXIS END
         DC    H'-40'              X2 CO-ORD OF FINAL MINOR AXIS END
         DC    H'+75'              Y2 CO-ORD OF FINAL MAJOR AXIS END
AN9MFN   EQU   (*-AN9MF)/(2*L'AN9MF)
ERRAN9   DC    C' -> "ANIM9" : test failed'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         SPACE 1
AN9S1    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN9SF1   DC    AL2(AN9SF1L)        L = LENGTH OF S.F.
         DC    XL1'03'             SFID = ERASE/RESET
         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE
AN9SF1L  EQU   *-AN9SF1
AN9SF2   DC    AL2(AN9SF2L)        L = LENGTH OF S.F.
         DC    XL2'0F10'           SFID = OBJECT PICTURE
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'70'               GBSEG (SEGMENT START)
         DC    AL1(AN9P1L)           LENGTH OF FOLLOWING PARAMETERS
AN9P1    DC    CL4'CH01'             SEGMENT-ID
*                                    FLAGS - 1ST BYTE :
         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE
*                                    BIT 1 = 1 - RESERVED
*                                    BIT 2 = 1 - DETECTABLE
*                                    BIT 3 = 1 - RESERVED
*                                    BIT 4 = 0 - NO HIGHLIGHTING
*                                    BITS 5-7 = 100 - RESERVED
*                                    FLAGS - 2ND BYTE :
         DC    BL1'00001000'         BIT 0 = 0 - CHAINED
*                                    BITS 1-2 = 00 - RESERVED
*                                    BIT 3 = 0 - NO PROLOG
*                                    BIT 4 = 1 - TRANSFORMABLE
*                                    BITS 5-7 = 000 - RESERVED
         DC    AL2(AN9SG1L)          LENGTH OF SEGMENT TO BE CREATED
         DC    XL4'00'               RESERVED
AN9P1L   EQU   *-AN9P1
AN9SG1   EQU   *                   SEGMENT DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'06'               COLOR = YELLOW
         DC    XL1'0C'             GSMX (SET MIX)
         DC    XL1'00'               MODE = DRAWING DEFAULT
         DC    XL1'18'             GSLT (SET LINE TYPE)
         DC    XL1'07'               LINETYPE = SOLID LINE
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'22'             GSAP (SET ARC PARAMETERS)
         DC    AL1(AN9D1L)           LENGTH OF FOLLOWING DATA
AN9D1    DC    HL2'0'                  X CO-ORD OF MAJOR AXIS END
         DC    HL2'0'                  Y CO-ORD OF MINOR AXIS END
         DC    HL2'0'                  X CO-ORD OF MINOR AXIS END
         DC    HL2'0'                  Y CO-ORD OF MAJOR AXIS END
AN9D1L   EQU   *-AN9D1
AN9D1N   EQU   (*-AN9D1)/L'AN9D1
         DC    XL1'C7'             GFARC (FULL ARC AT GIVEN POSITION)
         DC    AL1(AN9D2L)           LENGTH OF FOLLOWING DATA
AN9D2    DC    HL2'0'                  X CO-ORD OF CENTER
         DC    HL2'0'                  Y " "
         DC    AL1(0,128)              MULTIPLIER
AN9D2L   EQU   *-AN9D2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'08'               SYMBOL = FILLED SQUARE
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN9D3L)           LENGTH OF FOLLOWING DATA
AN9D3    DC    HL2'0'                  X = 0
         DC    HL2'0'                  Y = 0
AN9D3L   EQU   *-AN9D3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'04'               COLOR = GREEN
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'08'               SYMBOL = FILLED SQUARE
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN9D4L)           LENGTH OF FOLLOWING DATA
AN9D4    DC    HL2'0'                  X CO-ORD OF MAJOR AXIS END
         DC    HL2'0'                  Y " "
         DC    HL2'0'                  X CO-ORD OF MINOR AXIS END
         DC    HL2'0'                  Y " "
AN9D4L   EQU   *-AN9D4
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'07'               COLOR = NEUTRAL (WHITE)
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'01'               DIRECTION = LEFT TO RIGHT
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN9T1L)           LENGTH OF FOLLOWING DATA
AN9T1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN9T1L   EQU   *-AN9T1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN9T2L)           LENGTH OF FOLLOWING DATA
AN9T2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
AN9T2T   DC    CL6'Test :'             STRING
AN9T2L   EQU   *-AN9T2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN9T3L)           LENGTH OF FOLLOWING DATA
AN9T3    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL14' Move Full Arc'    STRING
AN9T3L   EQU   *-AN9T3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'02'               DIRECTION = TOP TO BOTTOM
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN9Q1L)           LENGTH OF FOLLOWING DATA
AN9Q1    DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN9Q1L   EQU   *-AN9Q1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN9Q2L)           LENGTH OF FOLLOWING DATA
AN9Q2    DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL8'ANIM9'              STRING
AN9Q2L   EQU   *-AN9Q2
AN9SG1L  EQU   *-AN9SG1
AN9SF2L  EQU   *-AN9SF2
AN9S1L   EQU   *-AN9S1
         SPACE 1
AN9S2    $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN9SF3   DC    AL2(AN9SF3L)        L = LENGTH OF S.F.
         DC    XL1'40'             SFID = OUTBOUND 3270DS
         DC    XL1'00'               PID
         $FS   CC=(W),WCC=(KBR),MF=L
         $FS   SBA=(1,1),MF=L
AN9LN1I  $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L
AN9LN1R  $FS   TEXT=(' ',1),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='<= Reshow ?',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L
         $FS   TEXT='(Y/N)',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(1,2),MF=L
         $FS   SF=(IC),MF=L
AN9SF3L  EQU   *-AN9SF3
AN9S2L   EQU   *-AN9S2
         EJECT
*======= ANIMATION 10 (ORIGINAL : ANIM5)
*              RETURN CODE : 0 = OK, CONTINUE
*                            4 = ERROR OR END
         SPACE 1
ANIM10  $XENT  BASE=R9
         LA    R2,AN10MFN
         LA    R3,AN10MF
         LA    R4,AN10SXY
ANIM10V  XR    R1,R1
         LH    R0,0(R3)
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISX
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',0(R4)
         XR    R1,R1
         LH    R0,L'AN10MF(R3)
         LTR   R0,R0
         BZ    *+L'*+12
         MH    R0,MAXISY
         SRDA  R0,32
         D     R0,=F'100'
         STCM  R1,B'0011',L'AN10SXY(R4)
         LA    R3,2*L'AN10MF(R3)
         LA    R4,2*L'AN10SXY(R4)
         BCT   R2,ANIM10V
         L     R8,=A(AN10S1,AN10S1L)
         USING AN10S1,R8           SCREEN IMAGE ADDRESSABILITY
         MVC   AN10T1(L'TXTW+L'TXTH),TXTW
         MVC   AN10T2(2*L'AN10T2),TXT1XY
         MVC   AN10T3(2*L'AN10T3),TXT2XY
         MVC   AN10Q1(L'TXQW+L'TXQH),TXQW
         MVC   AN10Q2(2*L'AN10Q2),TXQXY
         DROP  R8
ANIM10R  L     R8,=A(AN10S2,AN10S2L)
         USING AN10S2,R8           SCREEN IMAGE ADDRESSABILITY
         LH    R7,AN10NST          NUMBER OF STEPS
         LA    R5,AN10WXY
         LA    R6,AN10IXY
         LA    R14,AN10SXY
         LA    R15,AN10D1N
ANIM10Q  LH    R3,AN10STOF(R14)    FINAL CO-ORD
         LH    R1,0(R14)
         LTR   R1,R1
         BZ    *+L'*+6
         SR    R3,R1               SUBTRACT INITIAL CO-ORD
         M     R0,=F'1000'
         ST    R1,0(R5)            INITIAL CO-ORD
         LTR   R3,R3
         BZ    *+L'*+6
         M     R2,=F'1000'
         DR    R2,R7               DIVIDE MOVEMENT BY STEPS
         ST    R3,0(R6)            INCREMENT CO-ORD
         LA    R5,L'AN10WXY(R5)
         LA    R6,L'AN10IXY(R6)
         LA    R14,L'AN10SXY(R14)
         BCT   R15,ANIM10Q
         MVC   ASCRIPTR(ASPS),=A(AN10S1,AN10S1L) SET PTR'S
        #GO    FSCOUT              SEND TO SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     *+L'*+4             0 - OK
         B     ANIM10Y             4 - ERROR
         LA    R7,1(R7)
ANIM10L  LA    R2,AN10WXY          SET VALUES
         LA    R3,AN10D1
         LA    R4,AN10D1N
ANIM10S  XR    R1,R1
         L     R0,0(R2)
         LTR   R0,R0
         BZ    *+L'*+8
         SRDA  R0,32               SHIFT INTO EVEN-ODD PAIR
         D     R0,=F'1000'
         STCM  R1,B'0011',0(R3)
         LA    R2,L'AN10WXY(R2)
         LA    R3,L'AN10D1(R3)
         BCT   R4,ANIM10S
         MVC   ASCRIPTR(ASPS),=A(AN10S2,AN10S2L) SET PTR'S
        #GO    FSCOUT              SEND TO SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     *+L'*+4             0 - OK
         B     ANIM10Y             4 - ERROR
         BCT   R7,*+L'*+4          LOOP FOR NUMBER OF STEPS
         B     ANIM10T
         LA    R1,AN10D1N          INCREMENT VALUES
         LA    R2,AN10WXY
         LA    R3,AN10IXY
ANIM10I  L     R0,0(R2)
         A     R0,0(R3)
         ST    R0,0(R2)
         LA    R2,L'AN10WXY(R2)
         LA    R3,L'AN10IXY(R3)
         BCT   R1,ANIM10I
         B     ANIM10L
         DROP  R8
ANIM10T  L     R8,=A(AN10S3,AN10S3L,RSCRN)
         USING AN10S3,R8           SCREEN IMAGE ADDRESSABILITY
         MVC   ASCRIPTR(ASPL),=A(AN10S3,AN10S3L,RSCRN) SET PTR'S
        $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X
               MF=(I,AN10LN1I)     SET NORMAL INPUT
         MVI   INCMD,C' '          RESET INPUT FIELD
ANIM10E  MVC   AN10LN1R,INCMD
        #GO    FSCALL              DISPLAY SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     ANIM10X             0 - CONTINUE (NO PF-KEY SUPPORTED)
         B     ANIM10Y             4 - ERROR
         LTR   R1,R1               8 - DID USER TYPE IN?
         BZ    ANIM10E             NONE, RESHOW
         BM    ANIM10Z             IMMEDIATE TERMINATION
         CLI   INCMD,C'Y'          RESHOW (RE-DISPLAY) COMMAND?
         BE    ANIM10R             "Y", GO DO IT
         CLI   INCMD,C'N'
         BE    *+L'*+8             "N", CONTINUE
         CLI   INCMD,C' '          JUST A SPACE (BLANK)?
         BNE   *+L'*+6             NO
         XR    R15,R15             YES, CONTINUE, SET RC=0
         B     ANIM10X
        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X
               MF=(I,AN10LN1I)     SET ERROR INPUT
         B     ANIM10E
         DROP  R8
ANIM10Y  LA    R0,ERRAN10
         LA    R1,L'ERRAN10
         ST    R0,ERRMSA
         STH   R1,ERRMSL
ANIM10Z  LA    R15,4               SET RC=4
ANIM10X $XRET  CC=(R15)
         SPACE 1
AN10WXY  DC    4F'0'               X1-Y1-X1-Y1 WORK VALUES
AN10IXY  DC    4F'0'               X1-Y1-X1-Y1 INCREMENT VALUES
AN10NST  DC    H'48'               NUMBER OF STEPS
AN10SXY  DC    H'0'                X1 CO-ORD OF INITIAL MAJOR AXIS END
         DC    H'0'                Y1 CO-ORD OF INITIAL MINOR AXIS END
         DC    H'0'                X1 CO-ORD OF INITIAL MINOR AXIS END
         DC    H'0'                Y1 CO-ORD OF INITIAL MAJOR AXIS END
AN10STOF EQU   *-AN10SXY
         DC    H'0'                X2 CO-ORD OF FINAL MAJOR AXIS END
         DC    H'0'                Y2 CO-ORD OF FINAL MINOR AXIS END
         DC    H'0'                X2 CO-ORD OF FINAL MINOR AXIS END
         DC    H'0'                Y2 CO-ORD OF FINAL MAJOR AXIS END
*                                  FACTORS (% OF X,Y) TABLE
AN10MF   DC    H'+40'              X1 CO-ORD OF INITIAL MAJOR AXIS END
         DC    H'+75'              Y1 CO-ORD OF INITIAL MINOR AXIS END
         DC    H'+8'               X1 CO-ORD OF INITIAL MINOR AXIS END
         DC    H'+15'              Y1 CO-ORD OF INITIAL MAJOR AXIS END
         DC    H'-8'               X2 CO-ORD OF FINAL MAJOR AXIS END
         DC    H'+15'              Y2 CO-ORD OF FINAL MINOR AXIS END
         DC    H'-40'              X2 CO-ORD OF FINAL MINOR AXIS END
         DC    H'+75'              Y2 CO-ORD OF FINAL MAJOR AXIS END
AN10MFN  EQU   (*-AN10MF)/(2*L'AN10MF)
ERRAN10  DC    C' -> "ANIM10" : test failed'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         SPACE 1
AN10S1   $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN10SF1  DC    AL2(AN10SF1L)       L = LENGTH OF S.F.
         DC    XL1'03'             SFID = ERASE/RESET
         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE
AN10SF1L EQU   *-AN10SF1
AN10SF2  DC    AL2(AN10SF2L)       L = LENGTH OF S.F.
         DC    XL2'0F10'           SFID = OBJECT PICTURE
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'70'               GBSEG (SEGMENT START)
         DC    AL1(AN10P1L)          LENGTH OF FOLLOWING PARAMETERS
AN10P1   DC    CL4'CH01'             SEGMENT-ID
*                                    FLAGS - 1ST BYTE :
         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE
*                                    BIT 1 = 1 - RESERVED
*                                    BIT 2 = 1 - DETECTABLE
*                                    BIT 3 = 1 - RESERVED
*                                    BIT 4 = 0 - NO HIGHLIGHTING
*                                    BITS 5-7 = 100 - RESERVED
*                                    FLAGS - 2ND BYTE :
         DC    BL1'00001000'         BIT 0 = 0 - CHAINED
*                                    BITS 1-2 = 00 - RESERVED
*                                    BIT 3 = 0 - NO PROLOG
*                                    BIT 4 = 1 - TRANSFORMABLE
*                                    BITS 5-7 = 000 - RESERVED
         DC    AL2(AN10SG1L)         LENGTH OF SEGMENT TO BE CREATED
         DC    XL4'00'               RESERVED
AN10P1L  EQU   *-AN10P1
AN10SG1  EQU   *                   SEGMENT DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'07'               SYMBOL = FILLED DIAMOND
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN10C1L)          LENGTH OF FOLLOWING DATA
AN10C1   DC    HL2'0'                  X = 0
         DC    HL2'0'                  Y = 0
AN10C1L  EQU   *-AN10C1
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'07'               COLOR = NEUTRAL (WHITE)
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'01'               DIRECTION = LEFT TO RIGHT
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN10T1L)          LENGTH OF FOLLOWING DATA
AN10T1   DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN10T1L  EQU   *-AN10T1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN10T2L)          LENGTH OF FOLLOWING DATA
AN10T2   DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
AN10T2T  DC    CL6'Test :'             STRING
AN10T2L  EQU   *-AN10T2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN10T3L)          LENGTH OF FOLLOWING DATA
AN10T3   DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL14' Draw Full Arc'    STRING
AN10T3L  EQU   *-AN10T3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'02'               DIRECTION = TOP TO BOTTOM
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN10Q1L)          LENGTH OF FOLLOWING DATA
AN10Q1   DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN10Q1L  EQU   *-AN10Q1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN10Q2L)          LENGTH OF FOLLOWING DATA
AN10Q2   DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL8'ANIM10'             STRING
AN10Q2L  EQU   *-AN10Q2
AN10SG1L EQU   *-AN10SG1
AN10SF2L EQU   *-AN10SF2
AN10S1L  EQU   *-AN10S1
         SPACE 1
AN10S2   $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN10SF3  DC    AL2(AN10SF3L)       L = LENGTH OF S.F.
         DC    XL2'0F10'           SFID = OBJECT PICTURE
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'70'               GBSEG (SEGMENT START)
         DC    AL1(AN10P2L)          LENGTH OF FOLLOWING PARAMETERS
AN10P2   DC    CL4'CH01'             SEGMENT-ID
*                                    FLAGS - 1ST BYTE :
         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE
*                                    BIT 1 = 1 - RESERVED
*                                    BIT 2 = 1 - DETECTABLE
*                                    BIT 3 = 1 - RESERVED
*                                    BIT 4 = 0 - NO HIGHLIGHTING
*                                    BITS 5-7 = 100 - RESERVED
*                                    FLAGS - 2ND BYTE :
         DC    BL1'00001000'         BIT 0 = 0 - CHAINED
*                                    BITS 1-2 = 00 - RESERVED
*                                    BIT 3 = 0 - NO PROLOG
*                                    BIT 4 = 1 - TRANSFORMABLE
*                                    BITS 5-7 = 000 - RESERVED
         DC    AL2(AN10SG2L)         LENGTH OF SEGMENT TO BE CREATED
         DC    XL4'00'               RESERVED
AN10P2L  EQU   *-AN10P2
AN10SG2  EQU   *                   SEGMENT DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'06'               COLOR = YELLOW
         DC    XL1'0C'             GSMX (SET MIX)
         DC    XL1'00'               MODE = DRAWING DEFAULT
         DC    XL1'18'             GSLT (SET LINE TYPE)
         DC    XL1'07'               LINETYPE = SOLID LINE
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'22'             GSAP (SET ARC PARAMETERS)
         DC    AL1(AN10D1L)          LENGTH OF FOLLOWING DATA
AN10D1   DC    HL2'0'                  X CO-ORD OF MAJOR AXIS END
         DC    HL2'0'                  Y CO-ORD OF MINOR AXIS END
         DC    HL2'0'                  X CO-ORD OF MINOR AXIS END
         DC    HL2'0'                  Y CO-ORD OF MAJOR AXIS END
AN10D1L  EQU   *-AN10D1
AN10D1N  EQU   (*-AN10D1)/L'AN10D1
         DC    XL1'C7'             GFARC (FULL ARC AT GIVEN POSITION)
         DC    AL1(AN10D2L)          LENGTH OF FOLLOWING DATA
AN10D2   DC    HL2'0'                  X CO-ORD OF CENTER
         DC    HL2'0'                  Y " "
         DC    AL1(0,176)              MULTIPLIER
AN10D2L  EQU   *-AN10D2
AN10SG2L EQU   *-AN10SG2
AN10SF3L EQU   *-AN10SF3
AN10S2L  EQU   *-AN10S2
         SPACE 1
AN10S3   $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN10SF4  DC    AL2(AN10SF4L)       L = LENGTH OF S.F.
         DC    XL1'40'             SFID = OUTBOUND 3270DS
         DC    XL1'00'               PID
         $FS   CC=(W),WCC=(KBR),MF=L
         $FS   SBA=(1,1),MF=L
AN10LN1I $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L
AN10LN1R $FS   TEXT=(' ',1),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='<= Reshow ?',MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L
         $FS   TEXT='(Y/N)',MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(1,2),MF=L
         $FS   SF=(IC),MF=L
AN10SF4L EQU   *-AN10SF4
AN10S3L  EQU   *-AN10S3
         EJECT
*======= ANIMATION 11 (ORIGINAL : CUBE)
*              RETURN CODE : 0 = OK, CONTINUE
*                            4 = ERROR OR END
         SPACE 1
ANIM11  $XENT  BASE=R9
         XC    DBLW,DBLW           WIDTH-HEIGHT
         MVC   DBLW+2(L'Q81DSX),Q81DSX
         LH    R3,AN11WMM
         MH    R3,DBLW+4
         XR    R2,R2
         D     R2,DBLW
         STH   R3,AN11WX
         LR    R1,R3
         SRL   R1,1
         STH   R1,AN11X4
         STH   R1,AN11X5
         LNR   R2,R1
         STH   R2,AN11X3
         AR    R1,R3
         STH   R1,AN11X6
         STH   R1,AN11X7
         SR    R2,R3
         STH   R2,AN11X1
         STH   R2,AN11X2
         MVC   DBLW+2(L'Q81DSY),Q81DSY
         LH    R3,AN11HMM
         MH    R3,DBLW+4
         XR    R2,R2
         D     R2,DBLW
         LR    R1,R3
         SRL   R1,1
         STH   R1,AN11Y2
         STH   R1,AN11Y5
         LNR   R2,R1
         STH   R2,AN11Y6
         AR    R1,R3
         STH   R1,AN11Y3
         STH   R1,AN11Y7
         SR    R2,R3
         STH   R2,AN11Y1
         STH   R2,AN11Y4
         LA    R2,AN11X1
         LA    R3,AN11X1P
         LA    R4,AN11X1M
         LA    R5,AN11XAN
         LH    R6,AN11WX
         AR    R6,R6
ANIM11F  LH    R0,0(R2)
         LR    R1,R0
         AR    R0,R6
         SR    R1,R6
         STH   R0,0(R3)
         STH   R1,0(R4)
         LA    R2,L'AN11X1+L'AN11Y1(R2)
         LA    R3,L'AN11X1P(R3)
         LA    R4,L'AN11X1M(R4)
         BCT   R5,ANIM11F
         L     R8,=A(AN11,AN11L,RSCRN)
         USING AN11,R8             SCREEN IMAGE ADDRESSABILITY
         MVC   AN11D1+L'AN11D1,AN11Y1
         MVC   AN11D1+3*L'AN11D1,AN11Y4
         MVC   AN11D1+5*L'AN11D1,AN11Y5
         MVC   AN11D1+7*L'AN11D1,AN11Y2
         MVC   AN11D1+9*L'AN11D1,AN11Y1
         MVC   AN11D2+L'AN11D2,AN11Y2
         MVC   AN11D2+3*L'AN11D2,AN11Y3
         MVC   AN11D2+5*L'AN11D2,AN11Y7
         MVC   AN11D2+7*L'AN11D2,AN11Y5
         MVC   AN11D2+9*L'AN11D2,AN11Y2
         MVC   AN11D3+L'AN11D3,AN11Y4
         MVC   AN11D3+3*L'AN11D3,AN11Y6
         MVC   AN11D3+5*L'AN11D3,AN11Y7
         MVC   AN11D3+7*L'AN11D3,AN11Y5
         MVC   AN11D3+9*L'AN11D3,AN11Y4
         MVC   AN11D4+L'AN11D4,AN11Y1
         MVC   AN11D4+3*L'AN11D4,AN11Y4
         MVC   AN11D4+5*L'AN11D4,AN11Y5
         MVC   AN11D4+7*L'AN11D4,AN11Y2
         MVC   AN11D4+9*L'AN11D4,AN11Y1
         MVC   AN11D5+L'AN11D5,AN11Y2
         MVC   AN11D5+3*L'AN11D5,AN11Y3
         MVC   AN11D5+5*L'AN11D5,AN11Y7
         MVC   AN11D5+7*L'AN11D5,AN11Y5
         MVC   AN11D5+9*L'AN11D5,AN11Y2
         MVC   AN11D6+L'AN11D6,AN11Y4
         MVC   AN11D6+3*L'AN11D6,AN11Y6
         MVC   AN11D6+5*L'AN11D6,AN11Y7
         MVC   AN11D6+7*L'AN11D6,AN11Y5
         MVC   AN11D6+9*L'AN11D6,AN11Y4
         MVC   AN11T1(L'TXTW+L'TXTH),TXTW
         MVC   AN11T2(2*L'AN11T2),TXT1XY
         MVC   AN11T3(2*L'AN11T3),TXT2XY
         LH    R0,TXTW
         XR    R1,R1
         LH    R1,TXT2XY
         MH    R0,=Y(L'AN11T3T)
         AR    R1,R0
         STCM  R1,B'0011',AN11T4
         MVC   AN11T4+L'AN11T4,TXT2XY+L'TXT2XY
         MVC   AN11Q1(L'TXQW+L'TXQH),TXQW
         MVC   AN11Q2(2*L'AN11Q2),TXQXY
         MVC   ASCRIPTR(ASPL),=A(AN11,AN11L,RSCRN) SET PTR'S
         MVC   AN11D1,AN11X1       SET INITIAL STATUS
         MVI   AN11M1,X'02'
ANIM11R $FS    SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),           X
               MF=(I,AN11LN1I)     SET NORMAL INPUT
         MVI   INCMD,C' '          RESET INPUT FIELD
         CLC   AN11D1,AN11X1       IS IT MIXED?
         BE    ANIM11C             YES
         MVC   AN11D1,AN11X1       NO
         MVC   AN11D1+2*L'AN11D1,AN11X4
         MVC   AN11D1+4*L'AN11D1,AN11X5
         MVC   AN11D1+6*L'AN11D1,AN11X2
         MVC   AN11D1+8*L'AN11D1,AN11X1
         MVC   AN11D2,AN11X2
         MVC   AN11D2+2*L'AN11D2,AN11X3
         MVC   AN11D2+4*L'AN11D2,AN11X7
         MVC   AN11D2+6*L'AN11D2,AN11X5
         MVC   AN11D2+8*L'AN11D2,AN11X2
         MVC   AN11D3,AN11X4
         MVC   AN11D3+2*L'AN11D3,AN11X6
         MVC   AN11D3+4*L'AN11D3,AN11X7
         MVC   AN11D3+6*L'AN11D3,AN11X5
         MVC   AN11D3+8*L'AN11D3,AN11X4
         MVC   AN11D4,AN11X1
         MVC   AN11D4+2*L'AN11D4,AN11X4
         MVC   AN11D4+4*L'AN11D4,AN11X5
         MVC   AN11D4+6*L'AN11D4,AN11X2
         MVC   AN11D4+8*L'AN11D4,AN11X1
         MVC   AN11D5,AN11X2
         MVC   AN11D5+2*L'AN11D5,AN11X3
         MVC   AN11D5+4*L'AN11D5,AN11X7
         MVC   AN11D5+6*L'AN11D5,AN11X5
         MVC   AN11D5+8*L'AN11D5,AN11X2
         MVC   AN11D6,AN11X4
         MVC   AN11D6+2*L'AN11D6,AN11X6
         MVC   AN11D6+4*L'AN11D6,AN11X7
         MVC   AN11D6+6*L'AN11D6,AN11X5
         MVC   AN11D6+8*L'AN11D6,AN11X4
         MVC   AN11T4T,=CL14' (after mix)'
         CLI   AN11M1,X'01'        FIRST PASS PATTERN?
         BE    ANIM11B             YES
        $FS    TEXT='Reshow ?',MF=(I,AN11LN1X)
        $FS    TEXT='(Y/N)',MF=(I,AN11LN1Z)
         B     ANIM11E
ANIM11C  CLI   AN11M1,X'01'        FIRST PASS PATTERN?
         BE    ANIM11P             YES
         MVI   AN11M1,X'01'        NO, SET FIRST PATTERNS
         MVI   AN11M2,X'02'
         MVI   AN11M3,X'03'
         MVI   AN11M4,X'04'
         MVI   AN11M5,X'04'
         MVI   AN11M6,X'04'
         MVI   AN11R1,X'05'        COLOR = TURQ
         MVI   AN11R2,X'04'        COLOR = GREEN
         B     ANIM11O
ANIM11P  MVI   AN11M1,X'02'        SET SECOND PATTERNS
         MVI   AN11M2,X'03'
         MVI   AN11M3,X'04'
         MVI   AN11M4,X'05'
         MVI   AN11M5,X'05'
         MVI   AN11M6,X'05'
         MVI   AN11R1,X'06'        COLOR = YELLOW
         MVI   AN11R2,X'01'        COLOR = BLUE
ANIM11O  MVC   AN11D1,AN11X1M
         MVC   AN11D1+2*L'AN11D1,AN11X4M
         MVC   AN11D1+4*L'AN11D1,AN11X5M
         MVC   AN11D1+6*L'AN11D1,AN11X2M
         MVC   AN11D1+8*L'AN11D1,AN11X1M
         MVC   AN11D2,AN11X2M
         MVC   AN11D2+2*L'AN11D2,AN11X3M
         MVC   AN11D2+4*L'AN11D2,AN11X7M
         MVC   AN11D2+6*L'AN11D2,AN11X5M
         MVC   AN11D2+8*L'AN11D2,AN11X2M
         MVC   AN11D3,AN11X4M
         MVC   AN11D3+2*L'AN11D3,AN11X6M
         MVC   AN11D3+4*L'AN11D3,AN11X7M
         MVC   AN11D3+6*L'AN11D3,AN11X5M
         MVC   AN11D3+8*L'AN11D3,AN11X4M
         MVC   AN11D4,AN11X1P
         MVC   AN11D4+2*L'AN11D4,AN11X4P
         MVC   AN11D4+4*L'AN11D4,AN11X5P
         MVC   AN11D4+6*L'AN11D4,AN11X2P
         MVC   AN11D4+8*L'AN11D4,AN11X1P
         MVC   AN11D5,AN11X2P
         MVC   AN11D5+2*L'AN11D5,AN11X3P
         MVC   AN11D5+4*L'AN11D5,AN11X7P
         MVC   AN11D5+6*L'AN11D5,AN11X5P
         MVC   AN11D5+8*L'AN11D5,AN11X2P
         MVC   AN11D6,AN11X4P
         MVC   AN11D6+2*L'AN11D6,AN11X6P
         MVC   AN11D6+4*L'AN11D6,AN11X7P
         MVC   AN11D6+6*L'AN11D6,AN11X5P
         MVC   AN11D6+8*L'AN11D6,AN11X4P
         MVC   AN11T4T,=CL14' (before mix)'
ANIM11B $FS    TEXT='... just',MF=(I,AN11LN1X)
        $FS    TEXT='ENTER',MF=(I,AN11LN1Z)
ANIM11E  MVC   AN11LN1R,INCMD
        #GO    FSCALL              DISPLAY SCREEN
         B     *+L'*(R15)          HOW COMPLETE?
         B     ANIM11X             0 - CONTINUE (NO PF-KEY SUPPORTED)
         B     ANIM11Y             4 - ERROR
         LTR   R1,R1               8 - DID USER TYPE IN?
         BM    ANIM11Z             IMMEDIATE TERMINATION
         BZ    ANIM11E             NONE, RESHOW
         CLC   AN11D1,AN11X1       IS IT MIXED?
         BNE   ANIM11R             NO
         CLI   AN11M1,X'01'        YES, FIRST PASS PATTERN?
         BE    ANIM11R             YES
         CLI   INCMD,C'Y'          NO, RESHOW (RE-DISPLAY) COMMAND?
         BE    ANIM11R             "Y", GO DO IT
         CLI   INCMD,C'N'
         BE    *+L'*+8             "N", CONTINUE
         CLI   INCMD,C' '          JUST A SPACE (BLANK)?
         BNE   *+L'*+6             NO
         XR    R15,R15             YES, CONTINUE, SET RC=0
         B     ANIM11X
        $FS    SFE=(ATTR,(INT),HILITE,BLINK,COLOR,RED),                X
               MF=(I,AN11LN1I)     SET ERROR INPUT
         B     ANIM11E
         DROP  R8
ANIM11Y  LA    R0,ERRAN11
         LA    R1,L'ERRAN11
         ST    R0,ERRMSA
         STH   R1,ERRMSL
ANIM11Z  LA    R15,4               SET RC=4
ANIM11X $XRET  CC=(R15)
         SPACE 1
AN11WMM  DC    H'20'               WIDTH (IN MMS)
AN11HMM  DC    H'20'               HEIGHT (IN MMS)
AN11WX   DC    H'0'
*                                  CORNERS CO-ORD'S
AN11X1   DC    H'0'                    X CO-ORD OF 1ST CORNER
AN11Y1   DC    H'0'                    Y " "
AN11X2   DC    H'0'                    X CO-ORD OF 2ND CORNER
AN11Y2   DC    H'0'                    Y " "
AN11X3   DC    H'0'                    X CO-ORD OF 3RD CORNER
AN11Y3   DC    H'0'                    Y " "
AN11X4   DC    H'0'                    X CO-ORD OF 4TH CORNER
AN11Y4   DC    H'0'                    Y " "
AN11X5   DC    H'0'                    X CO-ORD OF 5TH CORNER
AN11Y5   DC    H'0'                    Y " "
AN11X6   DC    H'0'                    X CO-ORD OF 6TH CORNER
AN11Y6   DC    H'0'                    Y " "
AN11X7   DC    H'0'                    X CO-ORD OF 7TH CORNER
AN11Y7   DC    H'0'                    Y " "
AN11X1M  DC    H'0'                ALTERNATE X-MINUS CO-ORD'S
AN11X2M  DC    H'0'
AN11X3M  DC    H'0'
AN11X4M  DC    H'0'
AN11X5M  DC    H'0'
AN11X6M  DC    H'0'
AN11X7M  DC    H'0'
AN11XAN  EQU   (*-AN11X1M)/L'AN11X1M
AN11X1P  DC    H'0'                ALTERNATE X-PLUS CO-ORD'S
AN11X2P  DC    H'0'
AN11X3P  DC    H'0'
AN11X4P  DC    H'0'
AN11X5P  DC    H'0'
AN11X6P  DC    H'0'
AN11X7P  DC    H'0'
ERRAN11  DC    C' -> "ANIM11" : test failed'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         SPACE 1
AN11     $FS   CC=WSF,MF=L         WRITE STRUCTURED FIELD (S.F.)
AN11SF1  DC    AL2(AN11SF1L)       L = LENGTH OF S.F.
         DC    XL1'03'             SFID = ERASE/RESET
         DC    BL1'00000000'         FLAGS - IPZ : DEFAULT SIZE
AN11SF1L EQU   *-AN11SF1
AN11SF2  DC    AL2(AN11SF2L)       L = LENGTH OF S.F.
         DC    XL2'0F10'           SFID = OBJECT PICTURE
         DC    XL1'00'               PID
         DC    BL1'11000000'         FLAGS - SPANF : FIRST AND LAST
*                                          - MODE : INTERMEDIATE MODE
         DC    XL1'00'               OBJTYP : GRAPHICS
*                                  DATA
         DC    X'70'               GBSEG (SEGMENT START)
         DC    AL1(AN11P1L)          LENGTH OF FOLLOWING PARAMETERS
AN11P1   DC    CL4'CH01'             SEGMENT-ID
*                                    FLAGS - 1ST BYTE :
         DC    BL1'01110100'         BIT 0 = 0 - VISIBLE
*                                    BIT 1 = 1 - RESERVED
*                                    BIT 2 = 1 - DETECTABLE
*                                    BIT 3 = 1 - RESERVED
*                                    BIT 4 = 0 - NO HIGHLIGHTING
*                                    BITS 5-7 = 100 - RESERVED
*                                    FLAGS - 2ND BYTE :
         DC    BL1'00001000'         BIT 0 = 0 - CHAINED
*                                    BITS 1-2 = 00 - RESERVED
*                                    BIT 3 = 0 - NO PROLOG
*                                    BIT 4 = 1 - TRANSFORMABLE
*                                    BITS 5-7 = 000 - RESERVED
         DC    AL2(AN11SG1L)         LENGTH OF SEGMENT TO BE CREATED
         DC    XL4'00'               RESERVED
AN11P1L  EQU   *-AN11P1
AN11SG1  EQU   *                   SEGMENT DATA
         DC    XL1'0A'             GSCOL (SET COLOR)
AN11R1   DC    XL1'00'               COLOR
         DC    XL1'0C'             GSMX (SET MIX)
         DC    XL1'01'               MODE = MIX
         DC    XL1'18'             GSLT (SET LINE TYPE)
         DC    XL1'07'               LINETYPE = SOLID LINE
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)
AN11M1   DC    XL1'00'               PATTERN = DECREASE DENSITY
         DC    XL1'68'             GBAR (BEGIN AREA)
         DC    XL1'40'               FLAGS = DRAW BOUNDARY LINES
         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)
         DC    AL1(AN11D1L)          LENGTH OF FOLLOWING DATA
AN11D1   DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE START
         DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 2ND LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 3RD LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 4TH LINE END
AN11D1L  EQU   *-AN11D1
         DC    XL1'60'             GEAR (END AREA)
         DC    AL1(1)                LENGTH OF FOLLOWING DATA
         DC    XL1'00'                 RESERVED
         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)
AN11M2   DC    XL1'00'               PATTERN = DECREASE DENSITY
         DC    XL1'68'             GBAR (BEGIN AREA)
         DC    XL1'40'               FLAGS = DRAW BOUNDARY LINES
         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)
         DC    AL1(AN11D2L)          LENGTH OF FOLLOWING DATA
AN11D2   DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE START
         DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 2ND LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 3RD LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 4TH LINE END
AN11D2L  EQU   *-AN11D2
         DC    XL1'60'             GEAR (END AREA)
         DC    AL1(1)                LENGTH OF FOLLOWING DATA
         DC    XL1'00'                 RESERVED
         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)
AN11M3   DC    XL1'00'               PATTERN = DECREASE DENSITY
         DC    XL1'68'             GBAR (BEGIN AREA)
         DC    XL1'40'               FLAGS = DRAW BOUNDARY LINES
         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)
         DC    AL1(AN11D3L)          LENGTH OF FOLLOWING DATA
AN11D3   DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE START
         DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 2ND LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 3RD LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 4TH LINE END
AN11D3L  EQU   *-AN11D3
         DC    XL1'60'             GEAR (END AREA)
         DC    AL1(1)                LENGTH OF FOLLOWING DATA
         DC    XL1'00'                 RESERVED
         DC    XL1'0A'             GSCOL (SET COLOR)
AN11R2   DC    XL1'00'               COLOR
         DC    XL1'0C'             GSMX (SET MIX)
         DC    XL1'01'               MODE = MIX
         DC    XL1'18'             GSLT (SET LINE TYPE)
         DC    XL1'07'               LINETYPE = SOLID LINE
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)
AN11M4   DC    XL1'00'               PATTERN = DECREASE DENSITY
         DC    XL1'68'             GBAR (BEGIN AREA)
         DC    XL1'40'               FLAGS = DRAW BOUNDARY LINES
         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)
         DC    AL1(AN11D4L)          LENGTH OF FOLLOWING DATA
AN11D4   DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE START
         DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 2ND LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 3RD LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 4TH LINE END
AN11D4L  EQU   *-AN11D4
         DC    XL1'60'             GEAR (END AREA)
         DC    AL1(1)                LENGTH OF FOLLOWING DATA
         DC    XL1'00'                 RESERVED
         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)
AN11M5   DC    XL1'00'               PATTERN = DECREASE DENSITY
         DC    XL1'68'             GBAR (BEGIN AREA)
         DC    XL1'40'               FLAGS = DRAW BOUNDARY LINES
         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)
         DC    AL1(AN11D5L)          LENGTH OF FOLLOWING DATA
AN11D5   DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE START
         DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 2ND LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 3RD LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 4TH LINE END
AN11D5L  EQU   *-AN11D5
         DC    XL1'60'             GEAR (END AREA)
         DC    AL1(1)                LENGTH OF FOLLOWING DATA
         DC    XL1'00'                 RESERVED
         DC    XL1'28'             GSPT (SET PATTERN SYMBOL)
AN11M6   DC    XL1'00'               PATTERN = DECREASE DENSITY
         DC    XL1'68'             GBAR (BEGIN AREA)
         DC    XL1'40'               FLAGS = DRAW BOUNDARY LINES
         DC    XL1'C1'             GLINE (LINE AT GIVEN POSITION)
         DC    AL1(AN11D6L)          LENGTH OF FOLLOWING DATA
AN11D6   DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE START
         DC    2HL2'0'                 X-Y CO-ORD OF 1ST LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 2ND LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 3RD LINE END
         DC    2HL2'0'                 X-Y CO-ORD OF 4TH LINE END
AN11D6L  EQU   *-AN11D6
         DC    XL1'60'             GEAR (END AREA)
         DC    AL1(1)                LENGTH OF FOLLOWING DATA
         DC    XL1'00'                 RESERVED
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'29'             GSMS (MARKER TYPE)
         DC    XL1'07'               SYMBOL = FILLED DIAMOND
         DC    XL1'C2'             GSMRKS (MARKER)
         DC    AL1(AN11C1L)          LENGTH OF FOLLOWING DATA
AN11C1   DC    HL2'0'                  X = 0
         DC    HL2'0'                  Y = 0
AN11C1L  EQU   *-AN11C1
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'07'               COLOR = NEUTRAL (WHITE)
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'01'               DIRECTION = LEFT TO RIGHT
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN11T1L)          LENGTH OF FOLLOWING DATA
AN11T1   DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN11T1L  EQU   *-AN11T1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN11T2L)          LENGTH OF FOLLOWING DATA
AN11T2   DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
AN11T2T  DC    CL6'Test :'             STRING
AN11T2L  EQU   *-AN11T2
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN11T3L)          LENGTH OF FOLLOWING DATA
AN11T3   DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
AN11T3T  DC    CL12' Draw a Cube'      STRING
AN11T3L  EQU   *-AN11T3
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'01'               COLOR = BLUE
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN11T4L)          LENGTH OF FOLLOWING DATA
AN11T4   DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
AN11T4T  DC    CL14' '               STRING
AN11T4L  EQU   *-AN11T4
         DC    XL1'0A'             GSCOL (SET COLOR)
         DC    XL1'02'               COLOR = RED
         DC    XL1'19'             GSLW (SET LINE WIDTH)
         DC    XL1'01'               LINEWIDTH = NORMAL LINE
         DC    XL1'39'             GSCM (SET CHAR. MODE)
         DC    XL1'03'               MODE = STROKE PRECISION
         DC    XL1'3A'             GSCD (SET CHAR. DIRECTION)
         DC    XL1'02'               DIRECTION = TOP TO BOTTOM
         DC    XL1'33'             GSCB (SET CHAR. BOX SIZE)
         DC    AL1(AN11Q1L)          LENGTH OF FOLLOWING DATA
AN11Q1   DC    HL2'0'                  WIDTH
         DC    HL2'0'                  HEIGHT
AN11Q1L  EQU   *-AN11Q1
         DC    XL1'C3'             GSCHAR (DRAW CHAR. STRING AT POS.)
         DC    AL1(AN11Q2L)          LENGTH OF FOLLOWING DATA
AN11Q2   DC    HL2'0'                  X CO-ORD OF STRING
         DC    HL2'0'                  Y " "
         DC    CL8'ANIM11'             STRING
AN11Q2L  EQU   *-AN11Q2
AN11SG1L EQU   *-AN11SG1
AN11SF2L EQU   *-AN11SF2
AN11SF3  DC    AL2(AN11SF3L)       L = LENGTH OF S.F.
         DC    XL1'40'             SFID = OUTBOUND 3270DS
         DC    XL1'00'               PID
         $FS   CC=(W),WCC=(KBR),MF=L
         $FS   SBA=(1,1),MF=L
AN11LN1I $FS   SFE=(ATTR,NORMAL,HILITE,DEFAULT,COLOR,GREEN),MF=L
AN11LN1R $FS   TEXT=(' ',1),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,TURQ),MF=L
         $FS   TEXT='<= ',MF=L
AN11LN1X $FS   TEXT=(' ',8),MF=L
         $FS   SFE=(ATTR,(SKIP),HILITE,DEFAULT,COLOR,PINK),MF=L
AN11LN1Z $FS   TEXT=(' ',5),MF=L
         $FS   SF=(SKIP),MF=L
         $FS   SBA=(1,2),MF=L
         $FS   SF=(IC),MF=L
AN11SF3L EQU   *-AN11SF3
AN11L    EQU   *-AN11
         EJECT
*------> FULL-SCREEN OUTPUT ONLY SERVICE ROUTINE.
*        AT ENTRY, THE ROUTINE HAS TWO INPUTS :
*              "ASCRIPTR" POINTS TO THE SCREEN IMAGE,
*              "ASCRLGTH" POINTS TO THE SCREEN IMAGE LENGTH.
*        AT EXIT : R15 = 0 - OK
*                        4 - ERROR
         SPACE 1
FSCOUT  $XENT  BASE=R9
*        --> DO FULL-SCREEN TPUT (OUTPUT) ONLY.
         NI    OPTFS,FSFULL+FSSNAP
         OI    OPTFS,FSSKIP
         L     R2,ASCRIPTR
        @FS    OPTFS,(R2),ASCRLGTH,MF=(E,FSPARM)
         LTR   R15,R15             HOW COMPLETE?
         BZ    FSCOX               OK, RC=0
         LA    R15,4               ERROR, SET RC=4
FSCOX   $XRET  CC=(R15)
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         EJECT
*------> FULL-SCREEN OUTPUT-INPUT SERVICE ROUTINE.
*        AT ENTRY, THE ROUTINE HAS THREE INPUTS :
*              "ASCRIPTR" POINTS TO THE SCREEN IMAGE,
*              "ASCRLGTH" POINTS TO THE SCREEN IMAGE LENGTH,
*              "ASCRRTN" POINTS TO THE INPUT SCREEN PROCESS ROUTINE.
*        AT EXIT : R15 = 0 - PF-KEY PROCESS (FUNCTION IN "INCMD")
*                        4 - ERROR
*                        8 - R1 = ZERO -> RESHOW
*                                 MINUS -> CLEAR AND END
*                                 PLUS -> ANALYZE INPUT ("INCMD")
         SPACE 1
FSCALL  $XENT  BASE=R9
*        --> DO FULL-SCREEN TPUT (OUTPUT) AND TGET (INPUT).
         NI    OPTFS,FSFULL+FSSNAP
         L     R2,ASCRIPTR
        @FS    OPTFS,(R2),ASCRLGTH,MF=(E,FSPARM)
         LTR   R15,R15
         BZ    FSCAID
         CH    R15,=H'8'           END REQUESTED?
         BE    *+L'*+8             YES
         LA    R15,4               NO, ERROR, SET RC=4
         B     FSCX                EXIT
         L     R1,=F'-1'           YES (PA-KEY)
         B     FSCRC
FSCAID   LTR   R1,R1               AID?
         BZ    FSNONE              NO, NONE
         CLI   0(R1),X'7D'         YES, ENTER KEY?
         BE    FSCENT              YES
         CLI   0(R1),X'F1'         NO, PF-KEY 1-9?
         BL    *+L'*+8             NO
         CLI   0(R1),X'F9'
         BNH   FSCPFK              YES
         CLI   0(R1),X'7A'         NO, PF-KEY 10-12?
         BL    *+L'*+8             NO
         CLI   0(R1),X'7C'
         BNH   FSCPFK              YES
         CLI   0(R1),X'C1'         NO, PF-KEY 13-21?
         BL    *+L'*+8             NO
         CLI   0(R1),X'C9'
         BNH   FSCPFK              YES
         CLI   0(R1),X'4A'         NO, PF-KEY 22-24?
         BL    *+L'*+8             NO
         CLI   0(R1),X'4C'
         BNH   FSCPFK              YES
FSNONE   XR    R1,R1               NO, RE-DISPLAY
         B     FSCRC
FSCPFK   MVC   INCMD,0(R1)         MOVE THE REQUESTED PF-KEY
         B     FSCX                EXIT
FSCENT  #GO    ASCRRTN,AR=D        GO TO REPLY ROUTINE
FSCRC    LA    R15,8               NOT FOUND, SET RC=8
         L     R14,4(R13)          PREVIOUS SAVE AREA
         ST    R1,24(R14)          SET BACK R1
FSCX    $XRET  CC=(R15)
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         EJECT
*------> READ "SCREEN" PROCESS ROUTINE.
*        AT EXIT : R1 = 0 OR 1
         SPACE 1
RSCRN   $XENT  BASE=R9
         XR    R3,R3               INITIAL SWITCH
         LA    R2,1                INITIAL COUNT (ONE IF JUST ENTER)
RSLOOP  @FSR   ,                   GET REPLY TEXT
         LTR   R15,R15             NO MORE FIELDS MODIFIED?
         BNZ   RSPRCD              NO
         L     R1,4(R13)           YES, END, GET PREVIOUS SAVE AREA
         ST    R2,24(R1)           PASS BACK COUNT IN R1
        $XRET  CC=(R15)
RSPRCD   LTR   R3,R3               FIRST TIME DONE?
         BNZ   *+L'*+4             YES
         LR    R3,R2               NO, SAY IT DONE
         XR    R2,R2               RESET COUNT (ZERO TO RESHOW)
         CLC   RSSBA1,0(R15)
         BNE   RSLOOP              UNEXPECTED (CHECK SCREEN IMAGE)
         LTR   R1,R1
         BZ    RSFC1               FIELD CLEARED (CANC FC)
         CH    R1,=H'1'
         BNE   RSLOOP              UNEXPECTED (CHECK SCREEN IMAGE)
         MVI   INCMD,C' '          FOR UPPERCASE
         OC    INCMD,3(R15)        COPY COMMAND
         B     RSBF1
RSFC1    MVI   INCMD,C' '          COMMAND CLEARED
RSBF1    LA    R2,1(R2)            BUMP COUNT
         B     RSLOOP
         SPACE 1
RSSBA1   $FS   SBA=(1,2),MF=L
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         EJECT
*------> READ "SELECTION" PROCESS ROUTINE.
*        AT EXIT : R1 = 0 OR 2
         SPACE 1
RSSEL   $XENT  BASE=R9
         XR    R2,R2               INITIAL COUNT
SLLOOP  @FSR   ,                   GET REPLY TEXT
         LTR   R15,R15             NO MORE FIELDS MODIFIED?
         BNZ   SLPRCD              NO
         L     R1,4(R13)           YES, END, GET PREVIOUS SAVE AREA
         ST    R2,24(R1)           PASS BACK COUNT IN R1
        $XRET  CC=(R15)
SLPRCD   CLC   SLSBA1,0(R15)
         BNE   SLLOOP              UNEXPECTED (CHECK SCREEN IMAGE)
         LTR   R1,R1
         BZ    SLFC1               FIELD CLEARED (CANC FC)
         CH    R1,=H'2'
         BH    SLLOOP              UNEXPECTED (CHECK SCREEN IMAGE)
         MVC   SELIN,=CL2' '       FOR UPPERCASE
         SH    R1,=H'1'
         EX    R1,SLOF1            COPY SELECTION
         B     SLBF1
SLFC1    MVC   SELIN,=CL2' '       SELECTION CLEARED
SLBF1    LA    R2,2(R2)            BUMP COUNT
         B     SLLOOP
SLOF1    OC    SELIN(*-*),3(R15)   <<EXECUTED>>
         SPACE 1
SLSBA1   $FS   SBA=(23,2),MF=L
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9
         SPACE 2
*------- DSECT'S
         PRINT NOGEN
        IKJCPPL
        IKJPSCB
        IKJEBECA
TIODSECT DSECT
        IEFTIOT1
         SPACE 1
         END
./     ADD     NAME=ANIM$
./     NUMBER  NEW1=100,INCR=100
//ANIM     JOB (........),'INSTALL -A N I M-',
//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=(,20)
/*JOBPARM L=10
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
//* PRE-REQUISITE MODULE INSTALLATION :                               *
//* -----------------------------------                               *
//*                FSRTN                                              *
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
//*
//ASS     EXEC PGM=IEV90,
//             PARM='SYSPARM(FULL,EU),XREF(SHORT),NODECK,OBJECT'
//SYSLIB    DD DSN=->.SOURCE.FILE0,DISP=SHR
//          DD DSN=SYS1.MACLIB,DISP=SHR
//          DD DSN=SYS1.MODGEN,DISP=SHR
//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))
//SYSLIN    DD UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&LOADSET,
//             DCB=(BLKSIZE=800),DISP=(,PASS,DELETE)
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(ANIM),DISP=SHR
//LNK     EXEC PGM=HEWL,PARM='XREF,LIST,MAP',COND=(4,LT)
//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=OLD
//SYSADD    DD DSN=->.TARGET.RTNLIB,DISP=SHR
//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))
//SYSPRINT  DD SYSOUT=*
//SYSLIN    DD DSN=&LOADSET,DISP=(OLD,DELETE,DELETE)
//          DD *
  INCLUDE SYSADD(FSRTN)
  ENTRY   ANIM
  NAME    ANIM(R)
/*
./     ADD     NAME=CODEBUST
./     NUMBER  NEW1=100,INCR=100
C---------------------------------------------------------------------C
C     GDDM DEMONSTRATION PROGRAM CALLED "CODEBUST" OR "BUGBUSTERS"    C
C---------------------------------------------------------------------C
C     WOULD LIKE TO THANK CAPTAIN FRANK FINNERN FOR HIS INTEREST      C
C     IN GDDM AND HIS CODING OF THESE DEMONSTRATION PROGRAMS IN       C
C     FORTRAN. FRANK HAS LONG SINCE DEPARTED TO FOR A MANAGEMENT      C
C     POSITION IN THE AIR FORCE. THIS TOOK ALOT OF WORK AND WILL      C
C     BE APPRECIATED BY US TRUE 'TECHIES'.                            C
C                                                                     C
C     JIM MARSHALL, CAPT, USAF-RET                                    C
C                                                                     C
C     CHANGE LOG :                                                    C
C           11FEB87 - BILL SMITH (SYNTEX) REPORTED A PROBLEM WITH     C
C                     PGM AND TSO "SESSION MANAGER". DUE TO LACK OF   C
C                     A CALL TO FSTERM TO CLEANUP.   JDM              C
C                                                                     C
C     ORIGIN : EXTRACTED FROM TAPE CBT 93 AUG, FILE 300, MEMBER GDDM. C
C---------------------------------------------------------------------C
      DIMENSION X1(6),Y1(6),X2(6),Y2(6)
      INTEGER*4 COPYP(9)
      DATA X1/55.0,65.0,75.0,80.0,80.0,80.0/
      DATA Y1/90.0,93.0,85.0,70.0,60.0,40.0/
      DATA X2/45.0,35.0,25.0,20.0,20.0,20.0/
      DATA Y2/90.0,93.0,85.0,70.0,60.0,40.0/
      DATA COPYP/0,0,1,0,0,0,0,80,0/
      CALL FSINN
      CALL GSFLD(1,1,32,80)
      CALL GSPS(1.0,1.0)
      CALL GSWIN(0.0,100.0,0.0,100.0)
      CALL GSSEG(1)
      CALL GSPAT(16)
C----- OUTSIDE CIRCLE
      CALL GSCOL(2)
      CALL GSLW(100)
      CALL GSMOVE(10.0,50.0)
      CALL GSAREA(1)
      CALL GSARC(50.0,50.0,360.0)
      CALL GSENDA
C----- INSIDE CIRCLE
      CALL GSCOL(8)
      CALL GSLW(100)
      CALL GSMOVE(15.0,50.0)
      CALL GSAREA(1)
      CALL GSARC(50.0,50.0,360.0)
      CALL GSENDA
C----- BUG
      CALL GSCOL(7)
      CALL GSLW(100)
      CALL GSMOVE(48.0,74.0)
      CALL GSAREA(1)
      CALL GSLINE(45.0,70.0)
      CALL GSLINE(41.0,60.0)
      CALL GSLINE(42.0,40.0)
      CALL GSLINE(50.0,20.0)
      CALL GSLINE(58.0,40.0)
      CALL GSLINE(59.0,60.0)
      CALL GSLINE(55.0,70.0)
      CALL GSLINE(52.0,74.0)
      CALL GSLINE(48.0,74.0)
      CALL GSENDA
      CALL GSMOVE(45.0,60.0)
      CALL GSLINE(38.0,70.0)
      CALL GSLINE(38.0,77.0)
      CALL GSMOVE(45.0,50.0)
      CALL GSLINE(38.0,60.0)
      CALL GSLINE(38.0,67.0)
      CALL GSMOVE(45.0,50.0)
      CALL GSLINE(38.0,40.0)
      CALL GSLINE(38.0,33.0)
      CALL GSMOVE(45.0,40.0)
      CALL GSLINE(38.0,30.0)
      CALL GSLINE(38.0,23.0)
      CALL GSMOVE(55.0,40.0)
      CALL GSLINE(62.0,30.0)
      CALL GSLINE(62.0,23.0)
      CALL GSMOVE(55.0,50.0)
      CALL GSLINE(62.0,40.0)
      CALL GSLINE(62.0,33.0)
      CALL GSMOVE(55.0,50.0)
      CALL GSLINE(62.0,60.0)
      CALL GSLINE(62.0,67.0)
      CALL GSMOVE(55.0,60.0)
      CALL GSLINE(62.0,70.0)
      CALL GSLINE(62.0,77.0)
      CALL GSCOL(8)
      CALL GSMOVE(45.0,68.0)
      CALL GSLINE(55.0,68.0)
      CALL GSMOVE(50.0,68.0)
      CALL GSLINE(50.0,20.0)
      CALL GSMS(7)
      CALL GSMARK(48.0,71.0)
      CALL GSMARK(52.0,71.0)
C----- BAR
      CALL GSCOL(2)
      CALL GSLW(100)
      CALL GSMOVE(14.0,63.0)
      CALL GSAREA(1)
      CALL GSLINE(16.0,69.0)
      CALL GSLINE(88.0,43.0)
      CALL GSLINE(86.0,37.0)
      CALL GSLINE(14.0,63.0)
      CALL GSENDA
C----- ANTENNAE
      CALL GSCOL(7)
      CALL GSLW(100)
      CALL GSMOVE(52.0,74.0)
      CALL GSPFLT(6,X1,Y1)
      CALL GSMOVE(48.0,74.0)
      CALL GSPFLT(6,X2,Y2)
C----- INTRODUCTION
      CALL GSLW(10)
      CALL GSCOL(2)
      CALL GSCM(3)
      CALL GSCD(1)
      CALL GSCB(1.5,5.0)
      CALL GSCHAR(12.0,5.0,11,'CODEBUSTERS')
      CALL GSCHAR(75.0,5.0,9,' Y 4 2 1 ')
      CALL GSSCLS
      CALL ASREAD(ATYPE,ATMOD,COUNT)
C     CALL FSOPEN('CODEBSTR',3,COPYP)
C     CALL GSCOPY(66,130)
C     CALL FSCLS(1)
C     CALL FSSAVE('CODEBSTR')
      CALL FSTERM
      STOP
      END
./     ADD     NAME=CODEBUS$
./     NUMBER  NEW1=100,INCR=100
//CODEBUST JOB (........),'INSTALL -CODEBUST-',
//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=2M,TIME=(,20)
/*JOBPARM L=5
//FORT    EXEC PGM=FORTVS2,
//             PARM='NODECK,NOLIST,NOTERM,NOTF,OPT(2)'
//STEPLIB   DD DSN=SYS1.VSF2COMP,DISP=SHR
//SYSLIN    DD DSN=&&LOADSET,DISP=(MOD,PASS),UNIT=V3380,
//             SPACE=(3200,(25,6)),DCB=BLKSIZE=3200
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(CODEBUST),DISP=SHR
//LKED    EXEC PGM=HEWL,PARM='LIST,XREF',COND=(4,LT)
//SYSLIB    DD DSN=SYS1.VSF2FORT,DISP=SHR
//          DD DSN=SYS1.GDDMLOAD,DISP=SHR
//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=OLD
//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))
//SYSPRINT  DD SYSOUT=*
//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE)
//          DD *
  NAME   CODEBUST(R)
/*
./     ADD     NAME=ILRBIRD
./     NUMBER  NEW1=100,INCR=100
BIRD     TITLE '-- I L R B I R D --'
ILRBIRD  START 0
         SPACE 1
*--------------------------------------------------------------------*
*                                                                    *
*        THIS IS A DEMONSTRATION FROM AN UNKNOWN AUTHOR WHICH        *
*        SHOWS ONE HOW TO ACCOMPLISH FULL-SCREEN WRITES TO A         *
*        TERMINAL.  THERE ARE PROBABLY MANY VERSIONS OF THIS         *
*        AROUND, SO THIS MAY NOT BE THE ORIGINAL.                    *
*                                                                    *
*        CLEANED UP THE CODE AND TRIED TO DOCUMENT WHAT IS           *
*        HAPPENING.                                                  *
*                                                                    *
*--------------------------------------------------------------------*
         SPACE 1
* ORIGIN : EXTRACTED FROM CBT 93 FEB TAPE, FILE 300.
* CHANGE : LOCAL MACROS USE, SOME MINOR CHANGES AND RE-ENTERABLE
*          DONE BY MOINIL P.A. - COMPUTING CENTRE (TP361)
*                                J.R.C. - ISPRA ESTABLISHMENT
*                                21020 ISPRA (VA), ITALY
         SPACE 1
ILRBIRD  AMODE 24
ILRBIRD  RMODE 24
         PRINT NOGEN
         EJECT
        $DEFREG
        $XENT  BASE=R12,LV=WKLEN,TYPE=RENT
         LR    R9,R13
         USING WKAREA,R9
         MVC   PUTBF(LISQ),PUTISQ
         MVC   PUTBL(L'PUTLST),PUTLST
         XR    R3,R3
         SPACE 1
MOVEIT   LA    R4,DTAREA           GET DATA AREA ADDRESS
         LA    R5,LGTHDT           AND LENGTH
         XR    R6,R6               SET FROM ADDRESS TO ZERO
         XR    R7,R7               WITH ZERO LENGTH
         ICM   R7,B'1000',=X'40'   FILL CHARACTER IS BLANK
         MVCL  R4,R6               CLEAR THE BUFFER
         LA    R3,1(,R3)           BUMP THE COUNTER
         LA    R4,DTAREA-OVERLAP+25 POINT TO DATA AREA TARGET
         LA    R5,L'MLNES          SET INCREMENT IN REG 5
         LR    R6,R3               COUNTER IN REG 6
         LA    R7,MLNES            POINT TO LINES
         LA    R0,NOLNES           MAX LINES ON SCREEN
         SR    R0,R3               SUBTRACT COUNT
         MH    R0,=Y(LGLNES)
         AR    R4,R0
MVBIRD   MVC   0(L'MLNES,R4),0(R7) MOVE TO A LINE
         AR    R7,R5               BUMP MOVE ADDRESSES
         AH    R4,=Y(LGLNES)
         BCT   R6,MVBIRD           LOOP IF MORE
         CH    R3,=H'22'           ARE WE DONE
         BH    FINI                BR IF YES
         LA    R5,PUTBF            POINT TO STUFF TO BE WRITTEN
         LA    R6,LGTHBF           LOAD LENGTH OF BUFFER
         NI    0(R5),X'BF'         TURN OFF FULLSCR BIT IN WCC
*                                  (ALA JIM LUCAS--TELLS TCAM4 FULLSCR)
         ICM   R5,B'1000',TPUTFLG  TPUT FLAG-WAIT,HOLD,NOBREAK,FULLSCR
        TPUT   (R5),(R6),R
        STIMER WAIT,BINTVL=WAITIN1
         B     MOVEIT
FINI     MVC   PUTBF+STXT(7),=CL7'BYE-BYE'
         LA    R5,PUTBF            POINT TO STUFF TO BE WRITTEN
         LA    R6,LGTHBF           LOAD LENGTH OF BUFFER
         NI    0(R5),X'BF'         TURN OFF FULLSCR BIT IN WCC
*                                  (ALA JIM LUCAS--TELLS TCAM4 FULLSCR)
         ICM   R5,B'1000',TPUTFLG  TPUT FLAG-WAIT,HOLD,NOBREAK,FULLSCR
        TPUT   (R5),(R6),R
        STIMER WAIT,BINTVL=WAITIN2
         LA    R5,BUFBLK           POINT TO STUFF TO BE WRITTEN
         LA    R6,BLKLN            LOAD LENGTH OF BUFFER
         NI    0(R5),X'BF'         TURN OFF FULLSCR BIT IN WCC
*                                  (ALA JIM LUCAS--TELLS TCAM4 FULLSCR)
         ICM   R5,B'1000',TPUTFLG  TPUT FLAG-WAIT,HOLD,NOBREAK,FULLSCR
        TPUT   (R5),(R6),R
        $XRET  CC=0,LV=WKLEN,TYPE=RENT
         EJECT
WAITIN1  DC    F'100'              TIME * 0.01
WAITIN2  DC    F'1000'
TPUTFLG  DC    X'0B'               WAIT HOLD,NOBREAK,ASIS
PUTISQ  $FS    WCC=(KBR,RMDT),MF=L
        $FS    SBA=(1,1),RA=(1,1,00),MF=L
        $FS    SBA=(1,1),SF=NORMAL,MF=L
        $FS    SBA=(1,3),SF=(PROT,INT),MF=L
STXT     EQU   *-PUTISQ
        $FS    TEXT=' HELLO ',MF=L
        $FS    SF=(PROT),MF=L
OVERLAP  EQU   11                  OVERLAP'D DATA LENGTH
LISQ     EQU   *-PUTISQ
PUTLST  $FS    SF=(PT,IC),MF=L
BUFBLK  $FS    WCC=(AL,KBR,RMDT),MF=L
        $FS    SBA=(1,1),RA=(1,1,00),MF=L
        $FS    SBA=(1,1),SF=(IC),MF=L
BLKLN    EQU   *-BUFBLK
         SPACE 1
        LTORG
         SPACE 1
MLNES    DC    CL30'                 ##           '    LINE 1
         DC    CL30'                ####          '         2
         DC    CL30'                ####          '         3
         DC    CL30'                ####          '         4
         DC    CL30'                ####          '         5
         DC    CL30'                ####          '         6
         DC    CL30'                ####          '         7
         DC    CL30'           #### #### ###      '         8
         DC    CL30'       ### #### #### ####     '         9
         DC    CL30'      #### #### #### ####     '         10
         DC    CL30'      #### #### #### ####  ###'         11
         DC    CL30'      ################### ####'         12
         DC    CL30'      ################### ####'         13
         DC    CL30'       ###################### '         14
         DC    CL30'        ####################  '         15
         DC    CL30'         ##################   '         16
         DC    CL30'          ################    '         17
         DC    CL30'           ##############     '         18
         DC    CL30'            ############      '         19
         DC    CL30'            ############      '         20
         DC    CL30'            ############      '         21
         DC    CL30'                              '         22
         DC    CL30'                              '         23
         EJECT
WKAREA   DSECT
         DS    18F                 SAVE AREA
         SPACE 1
PUTBF    DS    (LISQ)X
DTAREA   DS    CL(80-OVERLAP)
LGLNES   EQU   OVERLAP+L'DTAREA
         DS    23CL(LGLNES)
LGTHDT   EQU   *-DTAREA
NOLNES   EQU   (LGTHDT+OVERLAP)/LGLNES
PUTBL    DS    (L'PUTLST)X
LGTHBF   EQU   *-PUTBF
         SPACE 1
WKLEN    EQU   (((*-WKAREA)+7)/8)*8
         SPACE 1
         END
./     ADD     NAME=ILRBIRD$
./     NUMBER  NEW1=100,INCR=100
//ILRBIRD  JOB (........),'INSTALL -ILRBIRD-',
//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=(,20)
/*JOBPARM L=5
//*------------------------------------------------------------------*
//*      INSTALL "ILRBIRD" DEMONSTRATION                             *
//*------------------------------------------------------------------*
//ASS     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'
//SYSLIB    DD DSN=->.SOURCE.FILE0,DISP=SHR
//          DD DSN=SYS1.MACLIB,DISP=SHR
//          DD DSN=SYS1.MODGEN,DISP=SHR
//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))
//SYSLIN    DD UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&LOADSET,
//             DCB=(BLKSIZE=800),DISP=(,PASS,DELETE)
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(ILRBIRD),DISP=SHR
//LNK     EXEC PGM=HEWL,PARM='XREF,LIST,LET,MAP,NORENT',COND=(4,LT)
//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=SHR
//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))
//SYSPRINT  DD SYSOUT=*
//SYSLIN    DD DSN=&LOADSET,DISP=(OLD,DELETE,DELETE)
//          DD *
  ENTRY   ILRBIRD
  NAME    ILRBIRD(R)
/*
./     ADD     NAME=LOGO
./     NUMBER  NEW1=100,INCR=100
C---------------------------------------------------------------------C
C     GDDM DEMONSTRATION PROGRAM CALLED "LOGO".                       C
C---------------------------------------------------------------------C
C     WOULD LIKE TO THANK CAPTAIN FRANK FINNERN FOR HIS INTEREST      C
C     IN GDDM AND HIS CODING OF THESE DEMONSTRATION PROGRAMS IN       C
C     FORTRAN. FRANK HAS LONG SINCE DEPARTED TO FOR A MANAGEMENT      C
C     POSITION IN THE AIR FORCE. THIS TOOK ALOT OF WORK AND WILL      C
C     BE APPRECIATED BY US TRUE 'TECHIES'.                            C
C                                                                     C
C     JIM MARSHALL, CAPT, USAF-RET                                    C
C                                                                     C
C     CHANGE LOG :                                                    C
C           11FEB87 - BILL SMITH (SYNTEX) REPORTED A PROBLEM WITH     C
C                     PGM AND TSO "SESSION MANAGER". DUE TO LACK OF   C
C                     A CALL TO FSTERM TO CLEANUP.   JDM              C
C                                                                     C
C     ORIGIN : EXTRACTED FROM TAPE CBT 93 AUG, FILE 300, MEMBER GDDM. C
C---------------------------------------------------------------------C
      DIMENSION X(29),Y(29),X1(29),Y1(29),X2(8),Y2(8),X3(8),Y8(12)
      DIMENSION X4(9),Y4(9),X5(9),X6(7),Y6(7),X7(25),Y7(25),X8(12)
      DIMENSION XF1(3),YF1(3),XF2(3),XF3(3),YF3(3),XF4(3),YF4(3)
      DIMENSION YF5(3),XF8(3),YF8(3),XF9(3),YF9(3),Y12(7),X13(12)
      DIMENSION X9(35),Y9(35),X10(5),Y10(5),X11(7),Y11(7),X12(7)
      DIMENSION Y13(12)
      DATA X /12.0,15.0,18.0,19.0,18.5,18.0,16.0,15.5,16.0,18.0,
     *21.0,28.0,40.0,50.0,60.0,72.0,79.0,82.0,84.0,84.5,84.0,82.0,
     *81.5,81.0,82.0,85.0,88.0,78.0,22.0/
      DATA Y /80.0,76.0,70.0,64.0,58.0,52.0,44.0,39.0,34.0,30.0,
     *26.0,21.0,15.0,10.0,15.0,21.0,26.0,30.0,34.0,39.0,44.0,52.0,
     *58.0,64.0,70.0,76.0,80.0,90.0,90.0/
      DATA X1/14.0,17.0,20.0,21.0,20.5,20.0,18.0,17.5,18.0,20.0,
     *23.0,30.0,42.0,50.0,58.0,70.0,77.0,80.0,82.0,82.5,82.0,80.0,
     *79.5,79.0,80.0,83.0,86.0,78.0,22.0/
      DATA Y1/80.0,76.0,70.0,64.0,58.0,52.0,44.0,39.0,34.0,30.0,
     *27.0,22.0,16.0,12.0,16.0,22.0,27.0,30.0,34.0,39.0,44.0,52.0,
     *58.0,64.0,70.0,76.0,80.0,88.0,88.0/
      DATA X9/62.0,61.0,60.0,59.0,58.0,57.0,55.5,54.0,57.5,58.5,60.0,
     *59.75,60.0,61.0,62.0,63.0,64.0,65.0,65.75,65.0,66.5,68.0,68.5,
     *69.0,68.75,69.0,70.0,70.0,69.0,68.0,67.0,65.0,64.0,63.5,62.5/
      DATA Y9/74.0,73.25,73.0,72.5,72.75,73.0,74.0,74.0,71.0,69.5,
     *68.0,67.0,66.5,66.25,66.0,66.0,66.25,66.5,67.0,68.0,68.5,70.0,
     *69.1,69.5,70.5,71.5,73.0,74.0,74.5,74.25,73.0,73.5,74.0,75.0,
     *75.0/
      DATA X10/61.25,62.0,63.0,64.0,65.0/
      DATA Y10/73.0,72.75,72.6,72.75,73.5/
      DATA X11/60.8,61.1,62.0,63.0,64.0,65.0,64.0/
      DATA Y11/67.25,67.0,66.8,66.75,66.8,67.5,68.0/
      DATA X12/69.0,69.25,69.0,68.5,67.75,68.0,68.0/
      DATA Y12/72.25,73.0,73.5,73.5,72.25,72.0,71.0/
      DATA X2/26.0,28.0,29.0,29.0,28.0,50.0,50.0,24.0/
      DATA X3/74.0,72.0,71.0,71.0,72.0,50.0,50.0,76.0/
      DATA Y2/76.0,70.0,66.0,62.0,56.0,56.0,80.0,80.0/
      DATA X4/27.0,26.0,26.0,30.0,34.0,40.0,50.0,50.0,28.0/
      DATA X5/73.0,74.0,74.0,70.0,66.0,60.0,50.0,50.0,72.0/
      DATA Y4/50.0,46.0,40.0,34.0,30.0,27.0,21.0,56.0,56.0/
      DATA X6/29.0,37.0,43.5,43.5,40.0,38.0,31.0/
      DATA Y6/36.0,31.0,35.0,36.0,39.0,44.0,44.0/
      DATA X7/58.75,59.0,58.5,58.5,57.5,58.5,58.5,59.25,58.5,58.5,
     *58.0,58.0,60.0,61.0,62.0,66.0,65.0,66.0,67.0,
     *67.25,67.0,66.0,64.0,62.0,60.0/
      DATA Y7/42.0,41.5,40.0,39.5,37.0,37.0,36.25,36.0,36.0,35.25,
     *34.75,34.0,33.75,34.0,32.0,35.0,36.5,36.5,38.0,40.0,42.0,
     *44.0,44.5,44.5,44.0/
      DATA X8/61.0,63.0,62.25,62.5,63.5,64.0,65.0,65.5,65.5,65.0,
     *64.5,63.5/
      DATA Y8/41.25,42.0,40.0,38.5,38.5,39.5,39.5,39.0,38.0,37.0,
     *36.5,36.75/
      DATA X13/54.75,55.0,55.1,55.0,54.75,54.5,54.4,54.0,53.5,53.25,
     *53.5,54.0/
      DATA Y13/75.25,76.0,76.5,77.0,77.5,77.75,78.5,77.25,76.5,76.0,
     *75.25,75.0/
      DATA XF1/34.0,36.0,38.0/
      DATA YF1/68.0,67.0,68.0/
      DATA XF2/38.0,40.0,42.0/
      DATA XF3/42.0,40.0,38.0/
      DATA YF3/73.0,74.0,73.0/
      DATA XF4/38.0,36.0,34.0/
      DATA YF4/76.0,77.0,76.0/
      DATA XF8/46.0,40.0,47.0/
      DATA YF8/65.0,56.0,46.0/
      DATA XF9/53.0,60.0,53.0/
      CALL FSINN
      CALL GSFLD(1,1,32,80)
      CALL GSPS(1.0,1.0)
      CALL GSWIN(0.0,100.0,0.0,100.0)
      CALL GSSEG(1)
C----- CREATE AND FILL IN OUTSIDE SHIELD IN YELLOW
      CALL GSLW(2)
      CALL GSCOL(6)
      CALL GSPAT(16)
      CALL GSMOVE(22.0,90.0)
      CALL GSAREA(0)
      CALL GSPLNE(29,X,Y)
      CALL GSENDA
C----- CREATE AND FILL IN INSIDE SHIELD IN BLUE
      CALL GSCOL(1)
      CALL GSPAT(16)
      CALL GSMOVE(22.0,88.0)
      CALL GSAREA(0)
      CALL GSPLNE(29,X1,Y1)
      CALL GSENDA
C----- UPPER LEFT QUARTER
      CALL GSCOL(6)
      CALL GSPAT(16)
      CALL GSMOVE(24.0,80.0)
      CALL GSAREA(0)
      CALL GSPLNE(8,X2,Y2)
      CALL GSENDA
C----- UPPER RIGHT QUARTER
      CALL GSCOL(5)
      CALL GSPAT(16)
      CALL GSMOVE(76.0,80.0)
      CALL GSAREA(0)
      CALL GSPLNE(8,X3,Y2)
      CALL GSENDA
C----- LOWER LEFT QUARTER
      CALL GSCOL(5)
      CALL GSPAT(16)
      CALL GSMOVE(28.0,56.0)
      CALL GSAREA(0)
      CALL GSPLNE(9,X4,Y4)
      CALL GSENDA
C----- LOWER RIGHT QUARTER
      CALL GSCOL(6)
      CALL GSPAT(16)
      CALL GSMOVE(72.0,56.0)
      CALL GSAREA(0)
      CALL GSPLNE(9,X5,Y4)
      CALL GSENDA
C----- GLOBE
      CALL GSCOL(5)
      CALL GSPAT(16)
      CALL GSMOVE(62.0,56.0)
      CALL GSAREA(0)
      CALL GSARC(50.0,56.0,360.0)
      CALL GSENDA
      CALL GSLW(2)
      CALL GSCOL(1)
      CALL GSMOVE(62.0,56.0)
      CALL GSARC(50.0,56.0,360.0)
      CALL GSMOVE(44.0,66.0)
      CALL GSLINE(46.0,65.0)
      CALL GSLINE(50.0,64.5)
      CALL GSLINE(53.0,65.0)
      CALL GSLINE(56.0,66.0)
      CALL GSMOVE(40.0,62.0)
      CALL GSLINE(44.0,60.0)
      CALL GSLINE(50.0,59.0)
      CALL GSLINE(56.0,60.0)
      CALL GSLINE(60.0,62.0)
      CALL GSMOVE(38.0,56.0)
      CALL GSLINE(62.0,56.0)
      CALL GSMOVE(40.0,50.0)
      CALL GSLINE(44.0,52.0)
      CALL GSLINE(50.0,53.0)
      CALL GSLINE(56.0,52.0)
      CALL GSLINE(60.0,50.0)
      CALL GSMOVE(46.0,45.0)
      CALL GSLINE(50.0,46.0)
      CALL GSLINE(54.0,45.0)
      CALL GSMOVE(46.0,65.0)
      CALL GSPFLT(3,XF8,YF8)
      CALL GSMOVE(53.0,65.0)
      CALL GSPFLT(3,XF9,YF8)
C----- LIGHTNING
      CALL GSCOL(6)
      CALL GSMOVE(58.0,66.0)
      CALL GSPAT(16)
      CALL GSAREA(0)
      CALL GSLINE(61.0,66.0)
      CALL GSLINE(52.0,54.0)
      CALL GSLINE(54.0,50.0)
      CALL GSLINE(42.0,40.0)
      CALL GSLINE(49.0,48.0)
      CALL GSLINE(46.0,48.0)
      CALL GSLINE(50.0,56.0)
      CALL GSLINE(58.0,66.0)
      CALL GSENDA
      CALL GSCOL(1)
      CALL GSMOVE(58.0,66.0)
      CALL GSLINE(61.0,66.0)
      CALL GSLINE(52.0,54.0)
      CALL GSLINE(54.0,50.0)
      CALL GSLINE(42.0,40.0)
      CALL GSLINE(49.0,48.0)
      CALL GSLINE(46.0,48.0)
      CALL GSLINE(50.0,56.0)
      CALL GSLINE(58.0,66.0)
C----- STAR
      CALL GSCOL(7)
      CALL GSMOVE(50.0,63.0)
      CALL GSPAT(16)
      CALL GSAREA(0)
      CALL GSLINE(48.0,58.0)
      CALL GSLINE(42.0,58.0)
      CALL GSLINE(46.0,54.0)
      CALL GSLINE(44.0,48.0)
      CALL GSLINE(50.0,51.0)
      CALL GSLINE(56.0,48.0)
      CALL GSLINE(54.0,54.0)
      CALL GSLINE(58.0,58.0)
      CALL GSLINE(52.0,58.0)
      CALL GSLINE(50.0,63.0)
      CALL GSENDA
      CALL GSCOL(2)
      CALL GSMOVE(48.0,58.0)
      CALL GSPAT(16)
      CALL GSAREA(0)
      CALL GSARC(50.0,55.0,360.0)
      CALL GSENDA
C----- COINS
      CALL GSCOL(7)
      CALL GSMOVE(34.0,76.0)
      CALL GSPAT(16)
      CALL GSAREA(0)
      CALL GSLINE(34.0,68.0)
      CALL GSPFLT(3,XF1,YF1)
      CALL GSPFLT(3,XF2,YF1)
      CALL GSLINE(42.0,73.0)
      CALL GSPFLT(3,XF3,YF3)
      CALL GSLINE(38.0,76.0)
      CALL GSPFLT(3,XF4,YF4)
      CALL GSENDA
      CALL GSCOL(1)
      CALL GSMOVE(34.0,76.0)
      CALL GSLINE(34.0,68.0)
      CALL GSPFLT(3,XF1,YF1)
      CALL GSPFLT(3,XF2,YF1)
      CALL GSLINE(42.0,73.0)
      CALL GSPFLT(3,XF3,YF3)
      CALL GSLINE(38.0,76.0)
      CALL GSPFLT(3,XF4,YF4)
      DO 10 I=69,76
      YF5(1)=I+0.0
      YF5(2)=I-1.0
      YF5(3)=YF5(1)
      CALL GSMOVE(34.0,YF5(1))
      CALL GSPFLT(3,XF1,YF5)
   10 CONTINUE
      DO 20 I=69,73
      YF5(1)=I+0.0
      YF5(2)=I-1.0
      YF5(3)=YF5(1)
      CALL GSMOVE(38.0,YF5(1))
      CALL GSPFLT(3,XF2,YF5)
   20 CONTINUE
      CALL GSMOVE(38.0,73.0)
      CALL GSLINE(38.0,68.0)
C----- TERMINAL
      CALL GSCOL(7)
      CALL GSPAT(16)
      CALL GSMOVE(31.0,44.0)
      CALL GSAREA(0)
      CALL GSPLNE(7,X6,Y6)
      CALL GSENDA
      CALL GSCOL(1)
      CALL GSMOVE(31.0,44.0)
      CALL GSPLNE(7,X6,Y6)
      CALL GSMOVE(31.5,44.0)
      CALL GSLINE(33.0,36.0)
      CALL GSLINE(37.0,31.0)
      CALL GSMOVE(32.0,44.0)
      CALL GSLINE(34.0,36.0)
      CALL GSLINE(37.0,32.0)
      CALL GSLINE(43.5,36.0)
      CALL GSMOVE(32.5,43.0)
      CALL GSLINE(37.5,43.0)
      CALL GSLINE(37.5,39.0)
      CALL GSLINE(34.0,38.0)
      CALL GSMOVE(37.5,44.0)
      CALL GSLINE(39.5,39.0)
      CALL GSMOVE(34.0,36.0)
      CALL GSLINE(40.0,39.0)
      CALL GSMOVE(35.0,35.0)
      CALL GSLINE(41.0,38.0)
      CALL GSMOVE(36.0,34.0)
      CALL GSLINE(42.0,37.0)
      CALL GSMOVE(36.5,33.0)
      CALL GSLINE(42.5,36.5)
      CALL GSMOVE(35.0,37.0)
      CALL GSLINE(38.0,33.0)
      CALL GSMOVE(36.0,37.0)
      CALL GSLINE(39.0,33.5)
      CALL GSMOVE(37.0,37.5)
      CALL GSLINE(40.0,34.0)
      CALL GSMOVE(38.0,38.0)
      CALL GSLINE(41.0,34.5)
      CALL GSMOVE(39.0,38.5)
      CALL GSLINE(42.0,35.0)
C----- HEAD
      CALL GSCOL(7)
      CALL GSPAT(16)
      CALL GSMOVE(60.0,44.0)
      CALL GSAREA(0)
      CALL GSPLNE(25,X7,Y7)
      CALL GSENDA
      CALL GSCOL(1)
      CALL GSMOVE(60.0,44.0)
      CALL GSPLNE(25,X7,Y7)
      CALL GSMOVE(59.0,41.5)
      CALL GSPLNE(12,X8,Y8)
      CALL GSMOVE(61.0,34.0)
      CALL GSLINE(63.0,35.0)
      CALL GSLINE(64.0,36.0)
      CALL GSMOVE(59.5,40.0)
      CALL GSLINE(61.0,40.0)
      CALL GSMOVE(59.75,39.75)
      CALL GSLINE(60.5,39.0)
      CALL GSLINE(59.75,39.0)
C----- LAMP
      CALL GSCOL(7)
      CALL GSPAT(16)
      CALL GSMOVE(62.5,75.0)
      CALL GSAREA(0)
      CALL GSPLNE(35,X9,Y9)
      CALL GSENDA
      CALL GSCOL(1)
      CALL GSMOVE(62.5,75.0)
      CALL GSPLNE(35,X9,Y9)
      CALL GSMOVE(61.0,73.25)
      CALL GSPLNE(5,X10,Y10)
      CALL GSMOVE(62.0,74.0)
      CALL GSLINE(63.0,74.0)
      CALL GSMOVE(61.0,68.0)
      CALL GSPLNE(7,X11,Y11)
      CALL GSCOL(5)
      CALL GSMOVE(68.0,71.0)
      CALL GSPAT(16)
      CALL GSAREA(0)
      CALL GSPLNE(7,X12,Y12)
      CALL GSENDA
      CALL GSCOL(1)
      CALL GSMOVE(68.0,71.0)
      CALL GSPLNE(7,X12,Y12)
      CALL GSCOL(7)
      CALL GSMOVE(54.0,75.0)
      CALL GSPAT(16)
      CALL GSAREA(0)
      CALL GSPLNE(12,X13,Y13)
      CALL GSENDA
      CALL GSCOL(1)
      CALL GSMOVE(54.0,75.0)
      CALL GSPLNE(12,X13,Y13)
      CALL GSMOVE(60.0,68.0)
      CALL GSLINE(65.0,68.0)
C----- INTRODUCTION
      CALL GSLW(2)
      CALL GSCOL(7)
      CALL GSCM(3)
      CALL GSCD(1)
      CALL GSCH(0.2,1.0)
      CALL GSCB(2.0,8.0)
      CALL GSCHAR(12.0,90.0,36,'2ND   INFORMATION   SYSTEMS   GROUP ')
      CALL GSCHAR(12.0,0.0,36,'    SAN ANTONIO            TEXAS    ')
      CALL GSSCLS
      CALL ASREAD(ATYPE,ATMOD,COUNT)
      CALL FSTERM
      STOP
      END
./     ADD     NAME=LOGO$
./     NUMBER  NEW1=100,INCR=100
//LOGO     JOB (........),'INSTALL -L O G O-',
//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=2M,TIME=(,20)
/*JOBPARM L=5
//FORT    EXEC PGM=FORTVS2,
//             PARM='NODECK,NOLIST,NOTERM,NOTF,OPT(2)'
//STEPLIB   DD DSN=SYS1.VSF2COMP,DISP=SHR
//SYSLIN    DD DSN=&&LOADSET,DISP=(MOD,PASS),UNIT=V3380,
//             SPACE=(3200,(25,6)),DCB=BLKSIZE=3200
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(LOGO),DISP=SHR
//LKED    EXEC PGM=HEWL,PARM='LIST,XREF',COND=(4,LT)
//SYSLIB    DD DSN=SYS1.VSF2FORT,DISP=SHR
//          DD DSN=SYS1.GDDMLOAD,DISP=SHR
//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=OLD
//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))
//SYSPRINT  DD SYSOUT=*
//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE)
//          DD *
  NAME   LOGO(R)
/*
./     ADD     NAME=NITEFLT
./     NUMBER  NEW1=100,INCR=100
C---------------------------------------------------------------------C
C     GDDM DEMONSTRATION PROGRAM CALLED "NITEFLT". THIS IS A          C
C     MODEL OF THE SPACE SHUTTLE FLYING AT NIGHT.                     C
C---------------------------------------------------------------------C
C     WOULD LIKE TO THANK CAPTAIN FRANK FINNERN FOR HIS INTEREST      C
C     IN GDDM AND HIS CODING OF THESE DEMONSTRATION PROGRAMS IN       C
C     FORTRAN. FRANK HAS LONG SINCE DEPARTED TO FOR A MANAGEMENT      C
C     POSITION IN THE AIR FORCE. THIS TOOK ALOT OF WORK AND WILL      C
C     BE APPRECIATED BY US TRUE 'TECHIES'.                            C
C                                                                     C
C     JIM MARSHALL, CAPT, USAF-RET                                    C
C                                                                     C
C     CHANGE LOG :                                                    C
C           11FEB87 - BILL SMITH (SYNTEX) REPORTED A PROBLEM WITH     C
C                     PGM AND TSO "SESSION MANAGER". DUE TO LACK OF   C
C                     A CALL TO FSTERM TO CLEANUP.   JDM              C
C                                                                     C
C     ORIGIN : EXTRACTED FROM TAPE CBT 93 AUG, FILE 300, MEMBER GDDM. C
C---------------------------------------------------------------------C
      DIMENSION X1(3),Y1(3),X2(3),Y2(3),X3(3),Y3(3),X4(5),Y4(5)
      DIMENSION X5(3),Y5(3),X6(11),Y6(11),X7(11),Y7(11),Y11(12)
      DIMENSION X8(2),Y8(2),X9(2),Y9(2),X10(6),Y10(6),X11(12)
      DIMENSION XM1(5),YM1(5),XHAUSL(4),YHAUSL(4),XHAUSR(4),YHAUSR(4)
      DIMENSION XBLSTL(10),YBLSTL(10),XBLSTR(10),YBLSTR(10)
      DATA X1 /27.0,24.0,23.0/
      DATA Y1 /85.0,85.0,76.0/
      DATA X2 /46.0,43.0,42.0/
      DATA Y2 /85.0,85.0,76.0/
      DATA X3 /38.0,32.0,30.0/
      DATA Y3 /95.0,95.0,80.0/
      DATA X4 /31.0,34.0,36.0,39.0,40.0/
      DATA Y4 /28.0,26.0,26.0,28.0,30.0/
      DATA X5 /37.0,33.0,32.0/
      DATA Y5 /75.0,75.0,59.0/
      DATA X6 /40.0,42.0,44.0,46.0,47.0,48.0,49.0,49.5,50.0,50.0,40.0/
      DATA Y6 /46.0,41.0,39.0,38.0,37.0,36.0,35.0,33.5,31.0,28.0,25.0/
      DATA X7 /30.0,28.0,26.0,24.0,23.0,22.0,21.0,20.5,20.0,20.0,30.0/
      DATA Y7 /46.0,41.0,39.0,38.0,37.0,36.0,35.0,33.5,31.0,28.0,25.0/
      DATA X8 /30.0,30.0/
      DATA Y8 /25.0,20.0/
      DATA X9 /40.0,39.0/
      DATA Y9 /25.0,31.0/
      DATA X10 /34.5,34.5,35.0,35.5,35.5,35.0/
      DATA Y10 /29.0,16.0,15.0,16.0,29.0,31.0/
      DATA X11 /37.0,36.0,35.0,34.0,33.0,32.0,33.0,34.0,
     *35.0,36.0,37.0,38.0/
      DATA Y11 /64.0,65.0,66.0,65.0,64.0,62.0,62.0,
     *63.0,64.0,63.0,62.0,62.0/
      DATA XM1 /34.0,35.0,36.0,33.0,34.0/
      DATA YM1 /69.0,69.0,69.0,67.0,67.0/
      DATA XHAUSL /22.0,29.0,33.0,18.0/
      DATA YHAUSL /19.5,19.5,0.0,0.0/
      DATA XHAUSR /41.0,48.0,52.0,37.0/
      DATA YHAUSR /19.5,19.5,0.0,0.0/
      DATA XBLSTL /18.0,20.0,22.0,25.0,26.0,29.0,31.0,33.0,
     *33.0,18.0/
      DATA YBLSTL /90.0,80.0,70.0,60.0,60.0,70.0,80.0,90.0,
     *100.0,100.0/
      DATA XBLSTR /37.0,39.0,41.0,44.0,45.0,48.0,50.0,52.0,
     *52.0,37.0/
      DATA YBLSTR /90.0,80.0,70.0,60.0,60.0,70.0,80.0,90.0,
     *100.0,100.0/
      CALL FSINN
      CALL GSFLD(1,1,32,80)
      CALL GSPS(1.0,1.0)
C===== FIRST WINDOW TOP LEFT CORNER OF SCREEN
      CALL GSVIEW(0.0,0.5,0.5,1.0)
      CALL GSWIN(0.0,100.0,0.0,100.0)
      CALL GSSEG(1)
C----- FILL IN STARS
      CALL GSCOL(7)
      CALL GSMS(6)
      CALL GSMARK(39.0,16.0)
      CALL GSMARK(48.0,96.0)
      CALL GSMARK(57.0,55.0)
      CALL GSMARK(16.0,82.0)
      CALL GSMARK(85.0,47.0)
      CALL GSMARK(64.0,59.0)
      CALL GSMARK(13.0,34.0)
      CALL GSMARK(52.0,78.0)
      CALL GSMARK(71.0,43.0)
      CALL GSMARK(22.0,66.0)
      CALL GSMARK(13.0,11.0)
C----- CREATE AND FILL IN EXHAUST
      CALL GSCOL(7)
      CALL GSPAT(16)
      CALL GSMOVE(18.0,0.0)
      CALL GSAREA(0)
      CALL GSPLNE(4,XHAUSL,YHAUSL)
      CALL GSENDA
      CALL GSCOL(8)
      CALL GSPAT(3)
      CALL GSMOVE(18.0,0.0)
      CALL GSAREA(0)
      CALL GSPLNE(4,XHAUSL,YHAUSL)
      CALL GSENDA
      CALL GSCOL(7)
      CALL GSPAT(16)
      CALL GSMOVE(37.0,0.0)
      CALL GSAREA(0)
      CALL GSPLNE(4,XHAUSR,YHAUSR)
      CALL GSENDA
      CALL GSCOL(8)
      CALL GSPAT(3)
      CALL GSMOVE(37.0,0.0)
      CALL GSAREA(0)
      CALL GSPLNE(4,XHAUSR,YHAUSR)
      CALL GSENDA
C----- CREATE AND FILL IN LEFT BOOSTER
      CALL GSCOL(7)
      CALL GSPAT(16)
      CALL GSMOVE(28.0,76.0)
      CALL GSAREA(1)
      CALL GSPFLT(3,X1,Y1)
      CALL GSLINE(23.0,25.0)
      CALL GSLINE(21.0,22.0)
      CALL GSLINE(30.0,22.0)
      CALL GSLINE(28.0,25.0)
      CALL GSLINE(28.0,76.0)
      CALL GSMOVE(23.0,22.0)
      CALL GSLINE(22.0,20.0)
      CALL GSLINE(29.0,20.0)
      CALL GSLINE(28.0,22.0)
      CALL GSLINE(23.0,22.0)
      CALL GSENDA
C----- CREATE AND FILL IN RIGHT BOOSTER
      CALL GSCOL(7)
      CALL GSPAT(16)
      CALL GSMOVE(47.0,76.0)
      CALL GSAREA(1)
      CALL GSPFLT(3,X2,Y2)
      CALL GSLINE(42.0,25.0)
      CALL GSLINE(40.0,22.0)
      CALL GSLINE(49.0,22.0)
      CALL GSLINE(47.0,25.0)
      CALL GSLINE(47.0,76.0)
      CALL GSMOVE(42.0,22.0)
      CALL GSLINE(41.0,20.0)
      CALL GSLINE(48.0,20.0)
      CALL GSLINE(47.0,22.0)
      CALL GSLINE(42.0,22.0)
      CALL GSENDA
C----- CREATE AND FILL IN MAIN AUX TANK
      CALL GSCOL(8)
      CALL GSPAT(16)
      CALL GSMOVE(40.0,80.0)
      CALL GSAREA(1)
      CALL GSPFLT(3,X3,Y3)
      CALL GSLINE(30.0,30.0)
      CALL GSPLNE(5,X4,Y4)
      CALL GSLINE(40.0,80.0)
      CALL GSMOVE(30.0,72.0)
      CALL GSLINE(28.0,72.0)
      CALL GSLINE(28.0,70.0)
      CALL GSLINE(30.0,70.0)
      CALL GSMOVE(30.0,42.0)
      CALL GSLINE(28.0,42.0)
      CALL GSLINE(28.0,40.0)
      CALL GSLINE(30.0,40.0)
      CALL GSMOVE(40.0,72.0)
      CALL GSLINE(42.0,72.0)
      CALL GSLINE(42.0,70.0)
      CALL GSLINE(40.0,70.0)
      CALL GSMOVE(40.0,42.0)
      CALL GSLINE(42.0,42.0)
      CALL GSLINE(42.0,40.0)
      CALL GSLINE(40.0,40.0)
      CALL GSENDA
      CALL GSCOL(2)
      CALL GSPAT(2)
      CALL GSMOVE(40.0,80.0)
      CALL GSAREA(1)
      CALL GSPFLT(3,X3,Y3)
      CALL GSLINE(30.0,30.0)
      CALL GSPLNE(5,X4,Y4)
      CALL GSLINE(40.0,80.0)
      CALL GSMOVE(30.0,72.0)
      CALL GSLINE(28.0,72.0)
      CALL GSLINE(28.0,70.0)
      CALL GSLINE(30.0,70.0)
      CALL GSMOVE(30.0,42.0)
      CALL GSLINE(28.0,42.0)
      CALL GSLINE(28.0,40.0)
      CALL GSLINE(30.0,40.0)
      CALL GSMOVE(40.0,72.0)
      CALL GSLINE(42.0,72.0)
      CALL GSLINE(42.0,70.0)
      CALL GSLINE(40.0,70.0)
      CALL GSMOVE(40.0,42.0)
      CALL GSLINE(42.0,42.0)
      CALL GSLINE(42.0,40.0)
      CALL GSLINE(40.0,40.0)
      CALL GSENDA
C===== CREATE AND FILL IN SPACE SHUTTLE
C----- NOSE ASSEMBLY
      CALL GSCOL(7)
      CALL GSPAT(16)
      CALL GSMOVE(38.0,59.0)
      CALL GSAREA(1)
      CALL GSPFLT(3,X5,Y5)
C----- WINGS
      CALL GSMOVE(38.0,59.0)
      CALL GSPLNE(11,X6,Y6)
      CALL GSMOVE(32.0,59.0)
      CALL GSPLNE(11,X7,Y7)
C----- ENGINE HOUSING
      CALL GSMOVE(31.0,31.0)
      CALL GSPLNE(2,X8,Y8)
      CALL GSLINE(31.0,20.0)
      CALL GSLINE(31.0,22.0)
      CALL GSLINE(39.0,22.0)
      CALL GSLINE(39.0,20.0)
      CALL GSLINE(40.0,20.0)
      CALL GSPLNE(2,X9,Y9)
      CALL GSMOVE(38.0,59.0)
      CALL GSLINE(32.0,59.0)
      CALL GSLINE(30.0,25.0)
      CALL GSLINE(40.0,25.0)
      CALL GSLINE(38.0,59.0)
      CALL GSMOVE(31.0,31.0)
      CALL GSLINE(30.0,25.0)
      CALL GSLINE(40.0,25.0)
      CALL GSLINE(39.0,31.0)
      CALL GSLINE(31.0,31.0)
      CALL GSENDA
      CALL GSMOVE(31.0,22.0)
      CALL GSCOL(8)
C----- LEFT ROCKET
      CALL GSAREA(1)
      CALL GSLINE(31.0,19.5)
      CALL GSLINE(33.0,19.5)
      CALL GSLINE(33.0,22.0)
      CALL GSLINE(31.0,22.0)
      CALL GSENDA
C----- MIDDLE ROCKET
      CALL GSMOVE(34.0,22.0)
      CALL GSAREA(1)
      CALL GSLINE(34.0,19.0)
      CALL GSLINE(36.0,19.0)
      CALL GSLINE(36.0,22.0)
      CALL GSLINE(34.0,22.0)
      CALL GSENDA
C----- RIGHT ROCKET
      CALL GSMOVE(37.0,22.0)
      CALL GSAREA(1)
      CALL GSLINE(37.0,19.5)
      CALL GSLINE(39.0,19.5)
      CALL GSLINE(39.0,22.0)
      CALL GSLINE(37.0,22.0)
      CALL GSENDA
C----- LEFT ROCKET CONNECTOR
      CALL GSMOVE(33.0,22.0)
      CALL GSAREA(0)
      CALL GSLINE(33.0,20.0)
      CALL GSLINE(34.0,20.0)
      CALL GSLINE(34.0,22.0)
      CALL GSLINE(33.0,22.0)
      CALL GSENDA
C----- RIGHT ROCKET CONNECTOR
      CALL GSMOVE(36.0,22.0)
      CALL GSAREA(0)
      CALL GSLINE(36.0,20.0)
      CALL GSLINE(37.0,20.0)
      CALL GSLINE(37.0,22.0)
      CALL GSLINE(36.0,22.0)
      CALL GSENDA
C----- OUTLINE SPACE SHUTTLE
      CALL GSCOL(1)
      CALL GSLW(1)
      CALL GSMOVE(38.0,59.0)
      CALL GSPFLT(3,X5,Y5)
      CALL GSMOVE(38.0,59.0)
      CALL GSPLNE(10,X6,Y6)
      CALL GSMOVE(32.0,59.0)
      CALL GSPLNE(10,X7,Y7)
      CALL GSMOVE(20.0,28.0)
      CALL GSLINE(30.0,25.0)
      CALL GSMOVE(50.0,28.0)
      CALL GSLINE(40.0,25.0)
      CALL GSMOVE(31.0,31.0)
      CALL GSPLNE(2,X8,Y8)
      CALL GSLINE(31.0,20.0)
      CALL GSLINE(31.0,22.0)
      CALL GSLINE(39.0,22.0)
      CALL GSLINE(39.0,20.0)
      CALL GSLINE(40.0,20.0)
      CALL GSPLNE(2,X9,Y9)
C----- FUSELAGE
      CALL GSMOVE(32.0,59.0)
      CALL GSLINE(32.0,31.0)
      CALL GSLINE(38.0,31.0)
      CALL GSLINE(38.0,59.0)
      CALL GSCOL(8)
C------ COCKPIT
      CALL GSMOVE(38.0,62.0)
      CALL GSAREA(1)
      CALL GSPLNE(10,X11,Y11)
      CALL GSENDA
C------ CARGO BAY
      CALL GSCOL(1)
      CALL GSMOVE(38.0,53.0)
      CALL GSLINE(32.0,53.0)
      CALL GSLT(3)
      CALL GSMOVE(35.0,53.0)
      CALL GSLINE(35.0,31.0)
C------ VERTICAL STABILIZER
      CALL GSCOL(7)
      CALL GSLT(0)
      CALL GSAREA(1)
      CALL GSPLNE(6,X10,Y10)
      CALL GSENDA
      CALL GSCOL(1)
      CALL GSPLNE(6,X10,Y10)
C----- SPLIT WINDSHIELD
      CALL GSCOL(7)
      CALL GSLW(1)
      CALL GSMOVE(35.0,66.0)
      CALL GSLINE(35.0,64.0)
C----- FLAG STRIPES
      CALL GSCOL(2)
      CALL GSLW(0)
      CALL GSMOVE(27.0,35.0)
      CALL GSLINE(29.0,35.0)
      CALL GSMOVE(27.0,34.0)
      CALL GSLINE(29.0,34.0)
      CALL GSMOVE(25.0,33.0)
      CALL GSLINE(29.0,33.0)
      CALL GSMOVE(25.0,32.0)
      CALL GSLINE(29.0,32.0)
C----- FLAG BLUE FIELD
      CALL GSCOL(1)
      CALL GSMOVE(25.0,35.0)
      CALL GSAREA(1)
      CALL GSLINE(27.0,35.0)
      CALL GSLINE(27.0,33.5)
      CALL GSLINE(25.0,33.5)
      CALL GSLINE(25.0,35.0)
      CALL GSENDA
C----- USA
      CALL GSLW(0)
      CALL GSCOL(8)
      CALL GSCM(3)
      CALL GSCD(1)
      CALL GSCB(2.0,4.0)
      CALL GSCHAR(41.0,31.0,3,'USA')
C----- FLIGHT CONTROL SURFACES
      CALL GSCOL(1)
      CALL GSMOVE(20.0,31.0)
      CALL GSLINE(31.0,31.0)
      CALL GSMOVE(39.0,31.0)
      CALL GSLINE(50.0,31.0)
      CALL GSMOVE(20.0,30.0)
      CALL GSLINE(30.5,30.0)
      CALL GSMOVE(39.5,30.0)
      CALL GSLINE(50.0,30.0)
      CALL GSMOVE(26.0,30.0)
      CALL GSLINE(26.0,26.5)
      CALL GSMOVE(44.0,30.0)
      CALL GSLINE(44.0,26.5)
C----- COCKPIT HATCHES
      CALL GSMOVE(33.0,60.0)
      CALL GSLINE(33.0,57.0)
      CALL GSLINE(34.5,57.0)
      CALL GSLINE(34.5,60.0)
      CALL GSLINE(33.0,60.0)
      CALL GSMOVE(35.5,60.0)
      CALL GSLINE(35.5,57.0)
      CALL GSLINE(37.0,57.0)
      CALL GSLINE(37.0,60.0)
      CALL GSLINE(35.5,60.0)
      CALL GSSCLS
C===== SECOND WINDOW BOTTOM LEFT CORNER OF SCREEN
      CALL GSVIEW(0.0,0.5,0.0,0.5)
      CALL GSWIN(0.0,100.0,0.0,100.0)
      CALL GSSEG(2)
C----- FILL IN STARS
      CALL GSCOL(7)
      CALL GSMS(6)
      CALL GSMARK(35.0,16.0)
      CALL GSMARK(44.0,96.0)
      CALL GSMARK(52.0,55.0)
      CALL GSMARK(19.0,82.0)
      CALL GSMARK(83.0,47.0)
      CALL GSMARK(64.0,59.0)
      CALL GSMARK(12.0,34.0)
      CALL GSMARK(56.0,78.0)
      CALL GSMARK(75.0,43.0)
      CALL GSMARK(28.0,66.0)
      CALL GSMARK(11.0,11.0)
C----- CREATE AND FILL IN BLAST
      CALL GSCOL(7)
      CALL GSPAT(16)
      CALL GSMOVE(18.0,100.0)
      CALL GSAREA(0)
      CALL GSPLNE(10,XBLSTL,YBLSTL)
      CALL GSENDA
      CALL GSCOL(8)
      CALL GSPAT(3)
      CALL GSMOVE(18.0,100.0)
      CALL GSAREA(0)
      CALL GSPLNE(10,XBLSTL,YBLSTL)
      CALL GSENDA
      CALL GSCOL(7)
      CALL GSPAT(16)
      CALL GSMOVE(37.0,100.0)
      CALL GSAREA(0)
      CALL GSPLNE(10,XBLSTR,YBLSTR)
      CALL GSENDA
      CALL GSCOL(8)
      CALL GSPAT(3)
      CALL GSMOVE(37.0,100.0)
      CALL GSAREA(0)
      CALL GSPLNE(10,XBLSTR,YBLSTR)
      CALL GSENDA
      CALL GSSCLS
C===== THIRD WINDOW BOTTOM RIGHT CORNER OF SCREEN
      CALL GSVIEW(0.5,1.0,0.0,0.5)
      CALL GSWIN(0.0,100.0,0.0,100.0)
      CALL GSSEG(3)
C----- FILL IN STARS
      CALL GSCOL(7)
      CALL GSMS(6)
      CALL GSMARK(35.0,16.0)
      CALL GSMARK(44.0,96.0)
      CALL GSMARK(52.0,55.0)
      CALL GSMARK(19.0,82.0)
      CALL GSMARK(83.0,47.0)
      CALL GSMARK(64.0,59.0)
      CALL GSMARK(12.0,34.0)
      CALL GSMARK(56.0,78.0)
      CALL GSMARK(75.0,43.0)
      CALL GSMARK(28.0,66.0)
      CALL GSMARK(11.0,11.0)
      CALL GSSCLS
C===== FOURTH WINDOW TOP RIGHT CORNER OF SCREEN
      CALL GSVIEW(0.5,1.0,0.5,1.0)
      CALL GSWIN(0.0,100.0,0.0,100.0)
      CALL GSSEG(4)
C----- FILL IN STARS
      CALL GSCOL(7)
      CALL GSMS(6)
      CALL GSMARK(39.0,19.0)
      CALL GSMARK(68.0,80.0)
      CALL GSMARK(60.0,80.0)
      CALL GSMARK(67.0,57.0)
      CALL GSMARK(16.0,86.0)
      CALL GSMARK(85.0,45.0)
      CALL GSMARK(64.0,54.0)
      CALL GSMARK(13.0,33.0)
      CALL GSMARK(22.0,72.0)
      CALL GSMARK(71.0,41.0)
      CALL GSMARK(23.0,60.0)
      CALL GSMARK(15.0,19.0)
C----- MOON
      CALL GSMOVE(40.0,70.0)
      CALL GSPAT(16)
      CALL GSAREA(1)
      CALL GSARC(55.0,70.0,360.0)
      CALL GSENDA
      CALL GSCOL(8)
      CALL GSMOVE(40.0,70.0)
      CALL GSPAT(3)
      CALL GSAREA(0)
      CALL GSARC(55.0,70.0,360.0)
      CALL GSENDA
      CALL GSCOL(6)
      CALL GSMOVE(40.0,70.0)
      CALL GSPAT(1)
      CALL GSAREA(0)
      CALL GSARC(55.0,70.0,360.0)
      CALL GSENDA
      CALL GSSCLS
      CALL ASREAD(ATYPE,ATMOD,COUNT)
      CALL FSTERM
      STOP
      END
./     ADD     NAME=NITEFLT$
./     NUMBER  NEW1=100,INCR=100
//NITEFLT  JOB (........),'INSTALL -NITEFLT-',
//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=2M,TIME=(,20)
/*JOBPARM L=5
//FORT    EXEC PGM=FORTVS2,
//             PARM='NODECK,NOLIST,NOTERM,NOTF,OPT(2)'
//STEPLIB   DD DSN=SYS1.VSF2COMP,DISP=SHR
//SYSLIN    DD DSN=&&LOADSET,DISP=(MOD,PASS),UNIT=V3380,
//             SPACE=(3200,(25,6)),DCB=BLKSIZE=3200
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(NITEFLT),DISP=SHR
//LKED    EXEC PGM=HEWL,PARM='LIST,XREF',COND=(4,LT)
//SYSLIB    DD DSN=SYS1.VSF2FORT,DISP=SHR
//          DD DSN=SYS1.GDDMLOAD,DISP=SHR
//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=OLD
//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))
//SYSPRINT  DD SYSOUT=*
//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE)
//          DD *
  NAME   NITEFLT(R)
/*
./     ADD     NAME=SABREBAT
./     NUMBER  NEW1=100,INCR=100
C---------------------------------------------------------------------C
C     GDDM DEMONSTRATION PROGRAM CALLED "SABREBAT". THIS IS A         C
C     MODEL OF THE AIR FORCE X-29A SABREBAT.                          C
C---------------------------------------------------------------------C
C     WOULD LIKE TO THANK CAPTAIN FRANK FINNERN FOR HIS INTEREST      C
C     IN GDDM AND HIS CODING OF THESE DEMONSTRATION PROGRAMS IN       C
C     FORTRAN. FRANK HAS LONG SINCE DEPARTED TO FOR A MANAGEMENT      C
C     POSITION IN THE AIR FORCE. THIS TOOK ALOT OF WORK AND WILL      C
C     BE APPRECIATED BY US TRUE 'TECHIES'.                            C
C                                                                     C
C     JIM MARSHALL, CAPT, USAF-RET                                    C
C                                                                     C
C     CHANGE LOG :                                                    C
C           11FEB87 - BILL SMITH (SYNTEX) REPORTED A PROBLEM WITH     C
C                     PGM AND TSO "SESSION MANAGER". DUE TO LACK OF   C
C                     A CALL TO FSTERM TO CLEANUP.   JDM              C
C                                                                     C
C     ORIGIN : EXTRACTED FROM TAPE CBT 93 AUG, FILE 300, MEMBER GDDM. C
C---------------------------------------------------------------------C
      DIMENSION X1(4),Y1(4)
      DATA X1 /75.0,75.0,65.0,0.0/
      DATA Y1 /51.0,49.0,47.75,0.0/
      CALL FSINN
      CALL GSFLD(1,1,32,80)
      CALL GSPS(1.0,1.0)
      CALL GSWIN(0.0,85.0,0.0,85.0)
      CALL GSSEG(1)
C----- OUTLINE ENGINE
      CALL GSCOL(5)
      CALL GSLW(0)
      CALL GSMOVE(8.0,52.8)
      CALL GSLINE(5.0,52.0)
      CALL GSLINE(5.0,48.0)
      CALL GSLINE(8.0,47.2)
      CALL GSLINE(8.0,49.5)
      CALL GSLINE(6.0,50.0)
      CALL GSLINE(8.0,50.5)
      CALL GSLINE(8.0,52.8)
      CALL GSLW(0)
      CALL GSMOVE(5.0,52.0)
      CALL GSLINE(8.0,52.0)
      CALL GSMOVE(5.0,51.5)
      CALL GSLINE(8.0,51.5)
      CALL GSMOVE(5.0,51.0)
      CALL GSLINE(8.0,51.0)
      CALL GSMOVE(5.0,50.5)
      CALL GSLINE(8.0,50.5)
      CALL GSMOVE(5.0,50.0)
      CALL GSLINE(8.0,50.0)
      CALL GSMOVE(5.0,49.5)
      CALL GSLINE(8.0,49.5)
      CALL GSMOVE(5.0,49.0)
      CALL GSLINE(8.0,49.0)
      CALL GSMOVE(5.0,48.5)
      CALL GSLINE(8.0,48.5)
      CALL GSMOVE(5.0,48.0)
      CALL GSLINE(8.0,48.0)
      CALL GSLW(0)
      CALL GSMOVE(10.0,53.0)
      CALL GSLINE(8.0,52.8)
      CALL GSMOVE(10.0,47.0)
      CALL GSLINE(8.0,47.2)
C----- OUTLINE TAIL SECTION
      CALL GSLW(0)
      CALL GSMOVE(20.0,56.0)
      CALL GSLINE(8.0,56.0)
      CALL GSLINE(8.0,53.0)
      CALL GSLINE(20.0,53.0)
      CALL GSMOVE(20.0,44.0)
      CALL GSLINE(8.0,44.0)
      CALL GSLINE(8.0,47.0)
      CALL GSLINE(20.0,47.0)
      CALL GSLINE(20.0,49.5)
      CALL GSMOVE(20.0,50.5)
      CALL GSLINE(20.0,53.0)
      CALL GSMOVE(17.0,50.3)
      CALL GSLINE(18.5,50.5)
      CALL GSLINE(22.0,50.5)
      CALL GSLINE(22.0,49.5)
      CALL GSLINE(18.5,49.5)
      CALL GSLINE(17.0,49.7)
      CALL GSMOVE(19.0,50.0)
      CALL GSLINE(16.0,50.5)
      CALL GSLINE(13.0,50.7)
      CALL GSLINE(10.0,50.6)
      CALL GSLINE(8.0,50.5)
      CALL GSLINE(9.0,50.0)
      CALL GSLINE(8.0,49.5)
      CALL GSLINE(10.0,49.4)
      CALL GSLINE(13.0,49.3)
      CALL GSLINE(16.0,49.5)
      CALL GSLINE(19.0,50.0)
      CALL GSMOVE(12.0,56.0)
      CALL GSLINE(12.0,53.0)
      CALL GSMOVE(12.5,56.0)
      CALL GSLINE(12.5,53.0)
      CALL GSMOVE(12.0,47.0)
      CALL GSLINE(12.0,44.0)
      CALL GSMOVE(12.5,47.0)
      CALL GSLINE(12.5,44.0)
C----- LEFT WING
      CALL GSLW(0)
      CALL GSMOVE(35.0,53.5)
      CALL GSLINE(33.0,58.0)
      CALL GSLINE(40.0,70.0)
      CALL GSLINE(34.0,70.0)
      CALL GSLINE(20.0,56.0)
      CALL GSLINE(23.0,56.0)
      CALL GSLINE(35.0,69.0)
      CALL GSLINE(33.0,69.0)
      CALL GSMOVE(25.0,61.0)
      CALL GSLINE(27.5,61.0)
      CALL GSMOVE(29.0,65.0)
      CALL GSLINE(31.0,65.0)
      CALL GSMOVE(25.0,58.0)
      CALL GSLINE(33.0,58.0)
C----- RIGHT WING
      CALL GSMOVE(35.0,46.5)
      CALL GSLINE(33.0,42.0)
      CALL GSLINE(40.0,30.0)
      CALL GSLINE(34.0,30.0)
      CALL GSLINE(20.0,44.0)
      CALL GSLINE(23.0,44.0)
      CALL GSLINE(35.0,31.0)
      CALL GSLINE(33.0,31.0)
      CALL GSMOVE(25.0,39.0)
      CALL GSLINE(27.5,39.0)
      CALL GSMOVE(29.0,35.0)
      CALL GSLINE(31.0,35.0)
      CALL GSMOVE(25.0,42.0)
      CALL GSLINE(33.0,42.0)
C----- FUSELAGE
      CALL GSMOVE(32.0,50.0)
      CALL GSLINE(32.5,50.0)
      CALL GSMOVE(37.0,50.0)
      CALL GSLINE(38.0,50.0)
      CALL GSMOVE(45.0,50.0)
      CALL GSLINE(45.5,50.0)
      CALL GSMOVE(50.0,54.0)
      CALL GSLINE(40.0,54.0)
      CALL GSLINE(35.0,53.5)
      CALL GSLINE(30.0,53.2)
      CALL GSLINE(20.0,53.0)
      CALL GSMOVE(50.0,46.0)
      CALL GSLINE(40.0,46.0)
      CALL GSLINE(35.0,46.5)
      CALL GSLINE(30.0,46.8)
      CALL GSLINE(20.0,47.0)
      CALL GSMOVE(30.0,53.2)
      CALL GSLINE(30.0,46.8)
      CALL GSMOVE(40.0,54.0)
      CALL GSLINE(46.0,54.0)
      CALL GSMOVE(26.0,53.0)
      CALL GSLINE(26.0,54.0)
      CALL GSLINE(25.0,53.5)
      CALL GSLINE(24.5,53.0)
C----- INTAKES
      CALL GSLW(0)
      CALL GSMOVE(49.0,54.0)
      CALL GSLINE(43.0,60.0)
      CALL GSLINE(40.0,60.0)
      CALL GSLINE(37.0,55.0)
      CALL GSLINE(40.0,55.0)
      CALL GSLINE(41.0,54.0)
      CALL GSMOVE(49.0,46.0)
      CALL GSLINE(43.0,40.0)
      CALL GSLINE(40.0,40.0)
      CALL GSLINE(37.0,45.0)
      CALL GSLINE(40.0,45.0)
      CALL GSLINE(41.0,46.0)
      CALL GSMOVE(50.0,54.0)
      CALL GSLINE(50.0,53.0)
      CALL GSLINE(52.0,52.5)
      CALL GSLINE(43.0,52.5)
      CALL GSMOVE(43.0,47.5)
      CALL GSLINE(52.0,47.5)
      CALL GSLINE(50.0,47.0)
      CALL GSLINE(50.0,46.0)
C----- NOSE
      CALL GSLW(0)
      CALL GSMOVE(45.0,52.25)
      CALL GSLINE(65.0,52.25)
      CALL GSPFLT(3,X1,Y1)
      CALL GSLINE(45.0,47.75)
      CALL GSMOVE(59.0,52.25)
      CALL GSLINE(59.0,51.0)
      CALL GSMOVE(59.0,49.0)
      CALL GSLINE(59.0,47.75)
      CALL GSMOVE(65.0,52.25)
      CALL GSLINE(65.0,47.75)
      CALL GSMOVE(71.0,51.0)
      CALL GSLINE(71.0,49.0)
      CALL GSLW(2)
      CALL GSMOVE(79.0,50.0)
      CALL GSLINE(74.0,50.0)
C----- CANOPY
      CALL GSLW(0)
      CALL GSMOVE(49.0,53.5)
      CALL GSLINE(41.0,53.5)
      CALL GSLINE(40.0,53.25)
      CALL GSLINE(38.5,53.0)
      CALL GSLINE(37.0,52.1)
      CALL GSLINE(34.0,52.0)
      CALL GSLINE(32.0,51.9)
      CALL GSLINE(30.0,51.5)
      CALL GSLINE(28.0,50.5)
      CALL GSLINE(48.0,51.5)
      CALL GSMOVE(49.0,46.5)
      CALL GSLINE(41.0,46.5)
      CALL GSLINE(40.0,46.75)
      CALL GSLINE(38.5,47.0)
      CALL GSLINE(37.0,47.9)
      CALL GSLINE(34.0,48.0)
      CALL GSLINE(32.0,48.1)
      CALL GSLINE(30.0,48.5)
      CALL GSLINE(28.0,49.5)
      CALL GSLINE(48.0,48.5)
      CALL GSLINE(47.75,49.0)
      CALL GSLINE(47.5,50.0)
      CALL GSLINE(47.75,51.0)
      CALL GSLINE(48.0,51.5)
      CALL GSLINE(57.75,51.5)
      CALL GSLINE(58.75,51.0)
      CALL GSLINE(59.1,50.5)
      CALL GSLINE(59.1,49.5)
      CALL GSLINE(58.75,49.0)
      CALL GSLINE(57.75,48.5)
      CALL GSLINE(48.0,48.5)
      CALL GSCOL(1)
      CALL GSPAT(16)
      CALL GSMOVE(50.5,51.2)
      CALL GSAREA(0)
      CALL GSLINE(54.0,51.2)
      CALL GSLINE(54.0,48.8)
      CALL GSLINE(50.5,48.8)
      CALL GSLINE(50.0,49.0)
      CALL GSLINE(49.7,50.0)
      CALL GSLINE(50.0,51.0)
      CALL GSLINE(50.5,51.2)
      CALL GSENDA
      CALL GSCOL(5)
      CALL GSMOVE(54.3,51.5)
      CALL GSLINE(54.3,48.5)
      CALL GSMOVE(54.5,51.2)
      CALL GSCOL(1)
      CALL GSAREA(0)
      CALL GSLINE(57.0,51.2)
      CALL GSLINE(58.0,51.0)
      CALL GSLINE(58.3,50.5)
      CALL GSLINE(58.5,50.0)
      CALL GSLINE(58.3,49.5)
      CALL GSLINE(58.0,49.0)
      CALL GSLINE(57.0,48.8)
      CALL GSLINE(54.5,48.8)
      CALL GSLINE(54.5,51.2)
      CALL GSENDA
C----- INTRODUCTION
      CALL GSLW(2)
      CALL GSCOL(7)
      CALL GSCM(3)
      CALL GSCD(1)
      CALL GSCB(2.0,8.0)
      CALL GSCHAR(30.0,75.0,8,'SABREBAT')
      CALL GSCHAR(30.0,73.0,8,'________')
      CALL GSLW(1)
      CALL GSCOL(7)
      CALL GSCM(3)
      CALL GSCD(1)
      CALL GSCB(1.5,5.0)
      CALL GSCHAR(5.0,20.0,49,'GRUMMAN MODEL 712 FORWARD SWEPT WING DEMO
     *NSTRATOR')
      CALL GSCHAR(15.0,10.0,34,'(U.S. AIR FORCE DESIGNATION X-29A)')
      CALL GSSCLS
      CALL ASREAD(ATYPE,ATMOD,COUNT)
      CALL FSTERM
      STOP
      END
./     ADD     NAME=SABREBA$
./     NUMBER  NEW1=100,INCR=100
//SABREBAT JOB (........),'INSTALL -SABREBAT-',
//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=2M,TIME=(,20)
/*JOBPARM L=5
//FORT    EXEC PGM=FORTVS2,
//             PARM='NODECK,NOLIST,NOTERM,NOTF,OPT(2)'
//STEPLIB   DD DSN=SYS1.VSF2COMP,DISP=SHR
//SYSLIN    DD DSN=&&LOADSET,DISP=(MOD,PASS),UNIT=V3380,
//             SPACE=(3200,(25,6)),DCB=BLKSIZE=3200
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(SABREBAT),DISP=SHR
//LKED    EXEC PGM=HEWL,PARM='LIST,XREF',COND=(4,LT)
//SYSLIB    DD DSN=SYS1.VSF2FORT,DISP=SHR
//          DD DSN=SYS1.GDDMLOAD,DISP=SHR
//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=OLD
//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))
//SYSPRINT  DD SYSOUT=*
//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE)
//          DD *
  NAME   SABREBAT(R)
/*
./     ADD     NAME=SHUTTLE
./     NUMBER  NEW1=100,INCR=100
C---------------------------------------------------------------------C
C     GDDM DEMONSTRATION PROGRAM CALLED "SHUTTLE". THIS IS A          C
C     MODEL OF THE SPACE SHUTTLE.                                     C
C---------------------------------------------------------------------C
C     WOULD LIKE TO THANK CAPTAIN FRANK FINNERN FOR HIS INTEREST      C
C     IN GDDM AND HIS CODING OF THESE DEMONSTRATION PROGRAMS IN       C
C     FORTRAN. FRANK HAS LONG SINCE DEPARTED TO FOR A MANAGEMENT      C
C     POSITION IN THE AIR FORCE. THIS TOOK ALOT OF WORK AND WILL      C
C     BE APPRECIATED BY US TRUE 'TECHIES'.                            C
C                                                                     C
C     JIM MARSHALL, CAPT, USAF-RET                                    C
C                                                                     C
C     CHANGE LOG :                                                    C
C           11FEB87 - BILL SMITH (SYNTEX) REPORTED A PROBLEM WITH     C
C                     PGM AND TSO "SESSION MANAGER". DUE TO LACK OF   C
C                     A CALL TO FSTERM TO CLEANUP.   JDM              C
C                                                                     C
C     ORIGIN : EXTRACTED FROM TAPE CBT 93 AUG, FILE 300, MEMBER GDDM. C
C---------------------------------------------------------------------C
      DIMENSION X1(3),Y1(3),X2(3),Y2(3),X3(3),Y3(3),X4(5),Y4(5)
      DIMENSION X5(3),Y5(3),X6(11),Y6(11),X7(11),Y7(11),Y11(12)
      DIMENSION X8(2),Y8(2),X9(2),Y9(2),X10(6),Y10(6),X11(12)
      DIMENSION XM1(5),YM1(5),XHAUSL(4),YHAUSL(4),XHAUSR(4),YHAUSR(4)
      DATA X1 /27.0,24.0,23.0/
      DATA Y1 /85.0,85.0,76.0/
      DATA X2 /46.0,43.0,42.0/
      DATA Y2 /85.0,85.0,76.0/
      DATA X3 /38.0,32.0,30.0/
      DATA Y3 /95.0,95.0,80.0/
      DATA X4 /31.0,34.0,36.0,39.0,40.0/
      DATA Y4 /28.0,26.0,26.0,28.0,30.0/
      DATA X5 /37.0,33.0,32.0/
      DATA Y5 /75.0,75.0,59.0/
      DATA X6 /40.0,42.0,44.0,46.0,47.0,48.0,49.0,49.5,50.0,50.0,40.0/
      DATA Y6 /46.0,41.0,39.0,38.0,37.0,36.0,35.0,33.5,31.0,28.0,25.0/
      DATA X7 /30.0,28.0,26.0,24.0,23.0,22.0,21.0,20.5,20.0,20.0,30.0/
      DATA Y7 /46.0,41.0,39.0,38.0,37.0,36.0,35.0,33.5,31.0,28.0,25.0/
      DATA X8 /30.0,30.0/
      DATA Y8 /25.0,20.0/
      DATA X9 /40.0,39.0/
      DATA Y9 /25.0,31.0/
      DATA X10 /34.5,34.5,35.0,35.5,35.5,35.0/
      DATA Y10 /29.0,16.0,15.0,16.0,29.0,31.0/
      DATA X11 /37.0,36.0,35.0,34.0,33.0,32.0,33.0,34.0,
     *35.0,36.0,37.0,38.0/
      DATA Y11 /64.0,65.0,66.0,65.0,64.0,62.0,62.0,
     *63.0,64.0,63.0,62.0,62.0/
      DATA XM1 /34.0,35.0,36.0,33.0,34.0/
      DATA YM1 /69.0,69.0,69.0,67.0,67.0/
      DATA XHAUSL /22.0,29.0,33.0,18.0/
      DATA YHAUSL /19.5,19.5,0.0,0.0/
      DATA XHAUSR /41.0,48.0,52.0,37.0/
      DATA YHAUSR /19.5,19.5,0.0,0.0/
      CALL FSINN
      CALL GSFLD(1,1,32,80)
      CALL GSWIN(0.0,100.0,0.0,100.0)
      CALL GSSEG(1)
C----- CREATE AND FILL IN BACKGROUND FOR ENTIRE SCREEN IN TURQUOISE
      CALL GSCOL(5)
      CALL GSMOVE(0.0,0.0)
      CALL GSAREA(0)
      CALL GSLINE(100.0,0.0)
      CALL GSLINE(100.0,100.0)
      CALL GSLINE(0.0,100.0)
      CALL GSLINE(0.0,0.0)
      CALL GSENDA
C----- CREATE AND FILL IN EXHAUST
      CALL GSCOL(7)
      CALL GSPAT(16)
      CALL GSMOVE(18.0,0.0)
      CALL GSAREA(0)
      CALL GSPLNE(4,XHAUSL,YHAUSL)
      CALL GSENDA
      CALL GSCOL(8)
      CALL GSPAT(3)
      CALL GSMOVE(18.0,0.0)
      CALL GSAREA(0)
      CALL GSPLNE(4,XHAUSL,YHAUSL)
      CALL GSENDA
      CALL GSCOL(7)
      CALL GSPAT(16)
      CALL GSMOVE(37.0,0.0)
      CALL GSAREA(0)
      CALL GSPLNE(4,XHAUSR,YHAUSR)
      CALL GSENDA
      CALL GSCOL(8)
      CALL GSPAT(3)
      CALL GSMOVE(37.0,0.0)
      CALL GSAREA(0)
      CALL GSPLNE(4,XHAUSR,YHAUSR)
      CALL GSENDA
C----- CREATE AND FILL IN LEFT BOOSTER
      CALL GSCOL(7)
      CALL GSPAT(16)
      CALL GSMOVE(28.0,76.0)
      CALL GSAREA(1)
      CALL GSPFLT(3,X1,Y1)
      CALL GSLINE(23.0,25.0)
      CALL GSLINE(21.0,22.0)
      CALL GSLINE(30.0,22.0)
      CALL GSLINE(28.0,25.0)
      CALL GSLINE(28.0,76.0)
      CALL GSMOVE(23.0,22.0)
      CALL GSLINE(22.0,20.0)
      CALL GSLINE(29.0,20.0)
      CALL GSLINE(28.0,22.0)
      CALL GSLINE(23.0,22.0)
      CALL GSENDA
C----- CREATE AND FILL IN RIGHT BOOSTER
      CALL GSCOL(7)
      CALL GSPAT(16)
      CALL GSMOVE(47.0,76.0)
      CALL GSAREA(1)
      CALL GSPFLT(3,X2,Y2)
      CALL GSLINE(42.0,25.0)
      CALL GSLINE(40.0,22.0)
      CALL GSLINE(49.0,22.0)
      CALL GSLINE(47.0,25.0)
      CALL GSLINE(47.0,76.0)
      CALL GSMOVE(42.0,22.0)
      CALL GSLINE(41.0,20.0)
      CALL GSLINE(48.0,20.0)
      CALL GSLINE(47.0,22.0)
      CALL GSLINE(42.0,22.0)
      CALL GSENDA
C----- CREATE AND FILL IN MAIN AUX TANK
      CALL GSCOL(2)
      CALL GSPAT(16)
      CALL GSMOVE(40.0,80.0)
      CALL GSAREA(1)
      CALL GSPFLT(3,X3,Y3)
      CALL GSLINE(30.0,30.0)
      CALL GSPLNE(5,X4,Y4)
      CALL GSLINE(40.0,80.0)
      CALL GSMOVE(30.0,72.0)
      CALL GSLINE(28.0,72.0)
      CALL GSLINE(28.0,70.0)
      CALL GSLINE(30.0,70.0)
      CALL GSMOVE(30.0,42.0)
      CALL GSLINE(28.0,42.0)
      CALL GSLINE(28.0,40.0)
      CALL GSLINE(30.0,40.0)
      CALL GSMOVE(40.0,72.0)
      CALL GSLINE(42.0,72.0)
      CALL GSLINE(42.0,70.0)
      CALL GSLINE(40.0,70.0)
      CALL GSMOVE(40.0,42.0)
      CALL GSLINE(42.0,42.0)
      CALL GSLINE(42.0,40.0)
      CALL GSLINE(40.0,40.0)
      CALL GSENDA
      CALL GSCOL(8)
      CALL GSPAT(2)
      CALL GSMOVE(40.0,80.0)
      CALL GSAREA(0)
      CALL GSPFLT(3,X3,Y3)
      CALL GSLINE(30.0,30.0)
      CALL GSPLNE(5,X4,Y4)
      CALL GSLINE(40.0,80.0)
      CALL GSMOVE(30.0,72.0)
      CALL GSLINE(28.0,72.0)
      CALL GSLINE(28.0,70.0)
      CALL GSLINE(30.0,70.0)
      CALL GSMOVE(30.0,42.0)
      CALL GSLINE(28.0,42.0)
      CALL GSLINE(28.0,40.0)
      CALL GSLINE(30.0,40.0)
      CALL GSMOVE(40.0,72.0)
      CALL GSLINE(42.0,72.0)
      CALL GSLINE(42.0,70.0)
      CALL GSLINE(40.0,70.0)
      CALL GSMOVE(40.0,42.0)
      CALL GSLINE(42.0,42.0)
      CALL GSLINE(42.0,40.0)
      CALL GSLINE(40.0,40.0)
      CALL GSENDA
C===== CREATE AND FILL IN SPACE SHUTTLE
C----- NOSE ASSEMBLY
      CALL GSCOL(7)
      CALL GSPAT(16)
      CALL GSMOVE(38.0,59.0)
      CALL GSAREA(1)
      CALL GSPFLT(3,X5,Y5)
C----- WINGS
      CALL GSMOVE(38.0,59.0)
      CALL GSPLNE(11,X6,Y6)
      CALL GSMOVE(32.0,59.0)
      CALL GSPLNE(11,X7,Y7)
C----- ENGINE HOUSING
      CALL GSMOVE(31.0,31.0)
      CALL GSPLNE(2,X8,Y8)
      CALL GSLINE(31.0,20.0)
      CALL GSLINE(31.0,22.0)
      CALL GSLINE(39.0,22.0)
      CALL GSLINE(39.0,20.0)
      CALL GSLINE(40.0,20.0)
      CALL GSPLNE(2,X9,Y9)
      CALL GSMOVE(38.0,59.0)
      CALL GSLINE(32.0,59.0)
      CALL GSLINE(30.0,25.0)
      CALL GSLINE(40.0,25.0)
      CALL GSLINE(38.0,59.0)
      CALL GSMOVE(31.0,31.0)
      CALL GSLINE(30.0,25.0)
      CALL GSLINE(40.0,25.0)
      CALL GSLINE(39.0,31.0)
      CALL GSLINE(31.0,31.0)
      CALL GSENDA
      CALL GSMOVE(31.0,22.0)
      CALL GSCOL(8)
C----- LEFT ROCKET
      CALL GSAREA(1)
      CALL GSLINE(31.0,19.5)
      CALL GSLINE(33.0,19.5)
      CALL GSLINE(33.0,22.0)
      CALL GSLINE(31.0,22.0)
      CALL GSENDA
C------ MIDDLE ROCKET
      CALL GSMOVE(34.0,22.0)
      CALL GSAREA(1)
      CALL GSLINE(34.0,19.0)
      CALL GSLINE(36.0,19.0)
      CALL GSLINE(36.0,22.0)
      CALL GSLINE(34.0,22.0)
      CALL GSENDA
C----- RIGHT ROCKET
      CALL GSMOVE(37.0,22.0)
      CALL GSAREA(1)
      CALL GSLINE(37.0,19.5)
      CALL GSLINE(39.0,19.5)
      CALL GSLINE(39.0,22.0)
      CALL GSLINE(37.0,22.0)
      CALL GSENDA
C----- LEFT ROCKET CONNECTOR
      CALL GSMOVE(33.0,22.0)
      CALL GSAREA(0)
      CALL GSLINE(33.0,20.0)
      CALL GSLINE(34.0,20.0)
      CALL GSLINE(34.0,22.0)
      CALL GSLINE(33.0,22.0)
      CALL GSENDA
C----- RIGHT ROCKET CONNECTOR
      CALL GSMOVE(36.0,22.0)
      CALL GSAREA(0)
      CALL GSLINE(36.0,20.0)
      CALL GSLINE(37.0,20.0)
      CALL GSLINE(37.0,22.0)
      CALL GSLINE(36.0,22.0)
      CALL GSENDA
C----- OUTLINE SPACE SHUTTLE
      CALL GSCOL(1)
      CALL GSLW(1)
      CALL GSMOVE(38.0,59.0)
      CALL GSPFLT(3,X5,Y5)
      CALL GSMOVE(38.0,59.0)
      CALL GSPLNE(10,X6,Y6)
      CALL GSMOVE(32.0,59.0)
      CALL GSPLNE(10,X7,Y7)
      CALL GSMOVE(20.0,28.0)
      CALL GSLINE(30.0,25.0)
      CALL GSMOVE(50.0,28.0)
      CALL GSLINE(40.0,25.0)
      CALL GSMOVE(31.0,31.0)
      CALL GSPLNE(2,X8,Y8)
      CALL GSLINE(31.0,20.0)
      CALL GSLINE(31.0,22.0)
      CALL GSLINE(39.0,22.0)
      CALL GSLINE(39.0,20.0)
      CALL GSLINE(40.0,20.0)
      CALL GSPLNE(2,X9,Y9)
C----- FUSELAGE
      CALL GSMOVE(32.0,59.0)
      CALL GSLINE(32.0,31.0)
      CALL GSLINE(38.0,31.0)
      CALL GSLINE(38.0,59.0)
      CALL GSCOL(8)
C----- COCKPIT
      CALL GSMOVE(38.0,62.0)
      CALL GSAREA(1)
      CALL GSPLNE(10,X11,Y11)
      CALL GSENDA
C----- CARGO BAY
      CALL GSCOL(1)
      CALL GSMOVE(38.0,53.0)
      CALL GSLINE(32.0,53.0)
      CALL GSLT(3)
      CALL GSMOVE(35.0,53.0)
      CALL GSLINE(35.0,31.0)
C----- VERTICAL STABILIZER
      CALL GSCOL(7)
      CALL GSLT(0)
      CALL GSAREA(1)
      CALL GSPLNE(6,X10,Y10)
      CALL GSENDA
      CALL GSCOL(1)
      CALL GSPLNE(6,X10,Y10)
C----- SPLIT WINDSHIELD
      CALL GSCOL(7)
      CALL GSLW(1)
      CALL GSMOVE(35.0,66.0)
      CALL GSLINE(35.0,64.0)
C----- FLAG STRIPES
      CALL GSCOL(2)
      CALL GSLW(0)
      CALL GSMOVE(27.0,35.0)
      CALL GSLINE(29.0,35.0)
      CALL GSMOVE(27.0,34.5)
      CALL GSLINE(29.0,34.5)
      CALL GSMOVE(27.0,34.0)
      CALL GSLINE(29.0,34.0)
      CALL GSMOVE(27.0,33.5)
      CALL GSLINE(29.0,33.5)
      CALL GSMOVE(25.0,33.0)
      CALL GSLINE(29.0,33.0)
      CALL GSMOVE(25.0,32.5)
      CALL GSLINE(29.0,32.5)
      CALL GSMOVE(25.0,32.0)
      CALL GSLINE(29.0,32.0)
C----- FLAG BLUE FIELD
      CALL GSCOL(1)
      CALL GSMOVE(25.0,35.0)
      CALL GSAREA(1)
      CALL GSLINE(27.0,35.0)
      CALL GSLINE(27.0,33.5)
      CALL GSLINE(25.0,33.5)
      CALL GSLINE(25.0,35.0)
      CALL GSENDA
C----- USA
      CALL GSLW(0)
      CALL GSCOL(8)
      CALL GSCM(3)
      CALL GSCD(1)
      CALL GSCB(1.0,3.0)
      CALL GSCHAR(42.0,31.0,3,'USA')
C----- FLIGHT CONTROL SURFACES
      CALL GSCOL(1)
      CALL GSMOVE(20.0,31.0)
      CALL GSLINE(31.0,31.0)
      CALL GSMOVE(39.0,31.0)
      CALL GSLINE(50.0,31.0)
      CALL GSMOVE(20.0,30.0)
      CALL GSLINE(30.5,30.0)
      CALL GSMOVE(39.5,30.0)
      CALL GSLINE(50.0,30.0)
      CALL GSMOVE(26.0,30.0)
      CALL GSLINE(26.0,26.5)
      CALL GSMOVE(44.0,30.0)
      CALL GSLINE(44.0,26.5)
C----- COCKPIT HATCHES
      CALL GSMOVE(33.0,60.0)
      CALL GSLINE(33.0,57.0)
      CALL GSLINE(34.5,57.0)
      CALL GSLINE(34.5,60.0)
      CALL GSLINE(33.0,60.0)
      CALL GSMOVE(35.5,60.0)
      CALL GSLINE(35.5,57.0)
      CALL GSLINE(37.0,57.0)
      CALL GSLINE(37.0,60.0)
      CALL GSLINE(35.5,60.0)
C----- GUIDANCE CONTROL
      CALL GSMS(7)
      CALL GSMRKS(5,XM1,YM1)
      CALL GSLW(1)
      CALL GSLT(2)
      CALL GSMOVE(33.0,68.0)
      CALL GSLINE(37.0,68.0)
      CALL GSSCLS
      CALL ASREAD(ATYPE,ATMOD,COUNT)
      STOP
      END
./     ADD     NAME=SHUTTLE$
./     NUMBER  NEW1=100,INCR=100
//SHUTTLE  JOB (........),'INSTALL -SHUTTLE-',
//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=2M,TIME=(,20)
/*JOBPARM L=5
//FORT    EXEC PGM=FORTVS2,
//             PARM='NODECK,NOLIST,NOTERM,NOTF,OPT(2)'
//STEPLIB   DD DSN=SYS1.VSF2COMP,DISP=SHR
//SYSLIN    DD DSN=&&LOADSET,DISP=(MOD,PASS),UNIT=V3380,
//             SPACE=(3200,(25,6)),DCB=BLKSIZE=3200
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(SHUTTLE),DISP=SHR
//LKED    EXEC PGM=HEWL,PARM='LIST,XREF',COND=(4,LT)
//SYSLIB    DD DSN=SYS1.VSF2FORT,DISP=SHR
//          DD DSN=SYS1.GDDMLOAD,DISP=SHR
//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=OLD
//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))
//SYSPRINT  DD SYSOUT=*
//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE)
//          DD *
  NAME   SHUTTLE(R)
/*
./     ADD     NAME=TGTERM
./     NUMBER  NEW1=100,INCR=100
TGTERM   TITLE '--- TSO TEST GRAPHIC TERMINAL COMMAND ---'
TGTERM   START 0
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                                                                     *
*    PURPOSE : JUST TEST A 3270 TERMINAL TO KNOW IF IT SUPPORTS       *
*              GRAPHICS PROCESSING (I.E., GDDM).                      *
*              AT EXIT : R15 = 0 - TERMINAL SUPPORTS GRAPHICS.        *
*                        R15 = 8 - AN ERROR HAS BEEN DETECTED OR THE  *
*                                  TERMINAL CANNOT PROCESS GRAPHICS.  *
*                                                                     *
*    AUTHOR :  MOINIL P.A.                                            *
*              COMPUTING CENTRE (TP 361)                              *
*              J.R.C. - ISPRA ESTABLISHMENT                           *
*              21020 ISPRA (VA), ITALY                                *
*                                                                     *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
         PRINT NOGEN
        $DEFREG
         EJECT
        $XENT  BASE=R12
*------- CHECK IF WE ARE ENTERED AS TSO COMMAND
        $TEW$EC NOTTSO=(,ONLY),MSG=PUTMSG,ERR=REJECT
        @FSI   FSBFSZ,TERMAT,RQSZ,MF=(E,FSPARM) INITIALIZE FULL-SCREEN
         LTR   R15,R15
         BNZ   REJECT              ERROR
*------- VERIFY TERMINAL FEATURES
         NI    OPTFS,FSFULL+FSSNAP
         OI    OPTFS,FSSKIP
        @FS    OPTFS,SCRNI,SCRNIL,MF=(E,FSPARM)
         LTR   R15,R15
         BNZ   LEAVE
         TM    FSATTRB3,FSTQUERY   CAN DO QUERY ON THIS TUBE?
         BZ    LEAVE               NO, SKIP (NO COLORS, ...)
        @FSQ   ,                   YES, DO IT
         LTR   R15,R15
         BNZ   LEAVE
         LR    R2,R1               QUERY REPLY DATA
         LR    R3,R1
         ALR   R3,R0
         LA    R1,1
         SLR   R3,R1
VLOOP    ALR   R2,R1
         CLR   R2,R3
         BH    XTEST
         CLC   2(2,R2),=XL2'8181'  USABLE AREA DEFINED ?
         BE    CHK81               YES
         CLC   2(2,R2),=XL2'8185'  CHARACTERS SETS DEFINED ?
         BE    CHK85               YES
VNEXT    XR    R1,R1
         ICM   R1,B'0011',0(R2)
         B     VLOOP
CHK81    TM    4(R2),X'01'         12/14-BIT ADDRESSING ALLOWED ?
         BZ    LEAVE               NO
         TM    4(R2),X'20'         OUTBOUND 3270DS ALLOWED ?
         BO    LEAVE               NO
         OI    SWXEQ,SW81
         B     VNEXT
CHK85    CLC   0(2,R2),=XL2'0014'  HOW ABOUT DEFINITION ?
         BNH   LEAVE               NO GOOD
         OI    SWXEQ,SW85
         B     VNEXT
XTEST    TM    SWXEQ,SW81+SW85
         BNO   LEAVE
         XR    R2,R2               YES, SET RC=0
         B     CLEAR
REJECT   LA    R2,8                SET RC=8
         B     QUIT
LEAVE    LA    R2,8                SET RC=8
CLEAR    MVI   OPTFS,FSEXIT        EXIT FULL-SCREEN MODE
        @FS    OPTFS,MF=(E,FSPARM)
QUIT    $XRET  CC=(R2)
         SPACE 1
*------- CONSTANTS AND WORK-AREAS
        $TEW$WA
SCRNIL   DC    A(LSCRNI)
FSPARM  @FS    ,,,MF=L
FSBFSZ   DC    F'80'
RQSZ     DC    0H'0',AL1(32,80)    REQUESTED SCREEN SIZE
TERMAT  @FST   ,
         PRINT GEN
OPTFS   @FSO   ,
         PRINT NOGEN
SWXEQ    DC    XL1'0'
SW81     EQU   X'80'               USABLE AREA
SW85     EQU   X'40'               CHARACTER SETS
SCRNI    $FS   CC=EW,WCC=(RMDT),SBA=(24,79),MF=L
         $FS   SBA=(1,1),RA=(1,1,00),MF=L
         $FS   SBA=(1,1),SF=(IC),MF=L
LSCRNI   EQU   *-SCRNI
         SPACE 1
*------- LITERAL POOL
        LTORG
         SPACE 1
*------- DSECT'S
        $TEW$DS
         SPACE 1
         END
./     ADD     NAME=TGTERM$
./     NUMBER  NEW1=100,INCR=100
//TGTERM   JOB (........),'INSTALL -TGTERM-',
//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=1M,TIME=(,20)
/*JOBPARM L=4
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
//* PRE-REQUISITE MODULE INSTALLATION :                               *
//* -----------------------------------                               *
//*                FSRTN                                              *
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
//*
//ASS     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'
//SYSLIB    DD DSN=->.SOURCE.FILE0,DISP=SHR
//          DD DSN=SYS1.MACLIB,DISP=SHR
//          DD DSN=SYS1.MODGEN,DISP=SHR
//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))
//SYSLIN    DD UNIT=SYSDA,SPACE=(CYL,(1,1)),DSN=&LOADSET,
//             DCB=(BLKSIZE=800),DISP=(,PASS,DELETE)
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(TGTERM),DISP=SHR
//LNK     EXEC PGM=HEWL,PARM='XREF,LIST,MAP',COND=(4,LT)
//SYSLMOD   DD DSN=->.TARGET.CMDLIB,DISP=OLD
//SYSADD    DD DSN=->.TARGET.RTNLIB,DISP=SHR
//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))
//SYSPRINT  DD SYSOUT=*
//SYSLIN    DD DSN=&LOADSET,DISP=(OLD,DELETE,DELETE)
//          DD *
  INCLUDE SYSADD(FSRTN)
  ENTRY   TGTERM
  NAME    TGTERM(R)
/*
./     ADD     NAME=ZOOM
./     NUMBER  NEW1=100,INCR=100
C---------------------------------------------------------------------C
C     GDDM DEMONSTRATION PROGRAM CALLED "ZOOM".                       C
C---------------------------------------------------------------------C
C     THIS IS AN EXERCISE ON LOOKING AT AN AIRPLANE AND ZOOMING       C
C     IN ON SOME PART, LIKE THE COCKPIT. FRANK WAS NEVER ABLE TO      C
C     COMPLETE PROGRAM. SO I LEAVE IT TO SOME "YOUNG GENIUS" TO       C
C     FIGURE OUT WHAT HE WAS DOING, DOCUMENT THE CODE, AND ENHANCE    C
C     IT.                                                             C
C                                                                     C
C     JIM MARSHALL, CAPT, USAF-RET                                    C
C                                                                     C
C     ORIGIN : EXTRACTED FROM TAPE CBT 93 AUG, FILE 300, MEMBER GDDM. C
C---------------------------------------------------------------------C
      LOGICAL*1 SWE
      CHARACTER*4 W1,W2,H1,H2
      CHARACTER*4 VW1,VW2,VH1,VH2
      CHARACTER*4 VOK/'    '/,VERR/'????'/
      REAL*4 WW1/0.0/,WW2/85.0/,HH1/0.0/,HH2/85.0/
      VW1=VOK
      VW2=VOK
      VH1=VOK
      VH2=VOK
      CALL FSINN
      CALL FSPCRT(93,0,0,1)
      CALL ASDFLD(1,1,3,1,31,2)
      CALL ASCPUT(1,31,'ENTER THE REQUIRED WIDTH RANGE:')
      CALL ASDFLD(2,1,35,1,4,1)
      CALL ASFCOL(2,6)
      CALL ASDFLD(3,1,40,1,2,2)
      CALL ASCPUT(3,2,'TO')
      CALL ASDFLD(4,1,43,1,4,1)
      CALL ASFCOL(4,6)
      CALL ASDFLD(5,1,48,1,17,2)
      CALL ASCPUT(5,17,'AND HEIGHT RANGE:')
      CALL ASDFLD(6,1,66,1,4,1)
      CALL ASFCOL(6,6)
      CALL ASDFLD(7,1,71,1,2,2)
      CALL ASCPUT(7,2,'TO')
      CALL ASDFLD(8,1,74,1,4,1)
      CALL ASFCOL(8,6)
      CALL ASDFLD(9,2,35,1,4,2)
      CALL ASFCOL(9,3)
      CALL ASCPUT(9,4,VW1)
      CALL ASDFLD(10,2,43,1,4,2)
      CALL ASFCOL(10,3)
      CALL ASCPUT(10,4,VW2)
      CALL ASDFLD(11,2,66,1,4,2)
      CALL ASFCOL(11,3)
      CALL ASCPUT(11,4,VH1)
      CALL ASDFLD(12,2,74,1,4,2)
      CALL ASFCOL(12,3)
      CALL ASCPUT(12,4,VH2)
      CALL ASDFLD(13,32,2,1,54,2)
      CALL ASCPUT(13,54,
     *'FULL WIDTH IS 0 - 85 UNITS; FULL DEPTH IS 0 - 85 UNITS')
      CALL ASDFLD(14,32,62,1,18,2)
      CALL ASFCOL(14,1)
      CALL ASCPUT(14,18,'(ANY PF-KEY = END)')
      CALL GSCLP(1)
111   CALL GSFLD(3,1,28,80)
      IF ((WW2-WW1).GT.(HH2-HH1)) CALL GSPS(1.0,(HH2-HH1)/(WW2-WW1))
      IF ((WW2-WW1).LE.(HH2-HH1)) CALL GSPS((WW2-WW1)/(HH2-HH1),1.0)
      CALL GSWIN(WW1,WW2,HH1,HH2)
      CALL GSSEG(0)
      CALL GSLW(2)
      CALL GSCOL(2)
      CALL GSMOVE(WW1,HH1)
      CALL GSLINE(WW1,HH2)
      CALL GSLINE(WW2,HH2)
      CALL GSLINE(WW2,HH1)
      CALL GSLINE(WW1,HH1)
      CALL DRAWIT
      CALL ASFCUR(2,1,1)
      CALL ASREAD(ATYPE,ATMOD,COUNT)
      IF (ATYPE.NE.0.0) GOTO 999
      VW1=VOK
      VW2=VOK
      VH1=VOK
      VH2=VOK
      CALL ASCGET(2,4,W1)
      CALL ASCGET(4,4,W2)
      CALL ASCGET(6,4,H1)
      CALL ASCGET(8,4,H2)
      CALL GETVAL(W1,NW1,NCCW1)
      CALL GETVAL(W2,NW2,NCCW2)
      CALL GETVAL(H1,NH1,NCCH1)
      CALL GETVAL(H2,NH2,NCCH2)
      IF (NCCH1.EQ.0) GOTO 222
      VW1=VERR
222   IF (NCCW2.EQ.0) GOTO 333
      VW2=VERR
333   IF (NCCW1.EQ.0) GOTO 444
      VH1=VERR
444   IF (NCCH2.EQ.0) GOTO 555
      VH2=VERR
555   IF ((NCCW1+NCCW2+NCCCH1+NCCH2).NE.0) GOTO 888
      SWE=.FALSE.
      IF (NW1.NE.NW2) GOTO 666
      VW1=VERR
      VW2=VERR
      SWE=.TRUE.
666   IF (NH1.NE.NH2) GOTO 777
      VH1=VERR
      VH2=VERR
      SWE=.TRUE.
777   IF (SWE) GOTO 888
      WW1=NW1
      WW2=NW2
      HH1=NH1
      HH2=NH2
888   CALL ASCPUT(9,4,VW1)
      CALL ASCPUT(10,4,VW2)
      CALL ASCPUT(11,4,VH1)
      CALL ASCPUT(12,4,VH2)
      GOTO 111
999   CALL FSTERM
      STOP
      END
      SUBROUTINE DRAWIT
      DIMENSION X1(3),Y1(3)
      DATA X1 /75.0,75.0,65.0/
      DATA Y1 /51.0,49.0,47.75/
C----- OUTLINE ENGINE
      CALL GSCOL(5)
      CALL GSLW(0)
      CALL GSMOVE(8.0,52.8)
      CALL GSLINE(5.0,52.0)
      CALL GSLINE(5.0,48.0)
      CALL GSLINE(8.0,47.2)
      CALL GSLINE(8.0,49.5)
      CALL GSLINE(6.0,50.0)
      CALL GSLINE(8.0,50.5)
      CALL GSLINE(8.0,52.8)
      CALL GSLW(0)
      CALL GSMOVE(5.0,52.0)
      CALL GSLINE(8.0,52.0)
      CALL GSMOVE(5.0,51.5)
      CALL GSLINE(8.0,51.5)
      CALL GSMOVE(5.0,51.0)
      CALL GSLINE(8.0,51.0)
      CALL GSMOVE(5.0,50.5)
      CALL GSLINE(8.0,50.5)
      CALL GSMOVE(5.0,50.0)
      CALL GSLINE(8.0,50.0)
      CALL GSMOVE(5.0,49.5)
      CALL GSLINE(8.0,49.5)
      CALL GSMOVE(5.0,49.0)
      CALL GSLINE(8.0,49.0)
      CALL GSMOVE(5.0,48.5)
      CALL GSLINE(8.0,48.5)
      CALL GSMOVE(5.0,48.0)
      CALL GSLINE(8.0,48.0)
      CALL GSLW(0)
      CALL GSMOVE(10.0,53.0)
      CALL GSLINE(8.0,52.8)
      CALL GSMOVE(10.0,47.0)
      CALL GSLINE(8.0,47.2)
C----- OUTLINE TAIL SECTION
      CALL GSLW(0)
      CALL GSMOVE(20.0,56.0)
      CALL GSLINE(8.0,56.0)
      CALL GSLINE(8.0,53.0)
      CALL GSLINE(20.0,53.0)
      CALL GSMOVE(20.0,44.0)
      CALL GSLINE(8.0,44.0)
      CALL GSLINE(8.0,47.0)
      CALL GSLINE(20.0,47.0)
      CALL GSLINE(20.0,49.5)
      CALL GSMOVE(20.0,50.5)
      CALL GSLINE(20.0,53.0)
      CALL GSMOVE(17.0,50.3)
      CALL GSLINE(18.5,50.5)
      CALL GSLINE(22.0,50.5)
      CALL GSLINE(22.0,49.5)
      CALL GSLINE(18.5,49.5)
      CALL GSLINE(17.0,49.7)
      CALL GSMOVE(19.0,50.0)
      CALL GSLINE(16.0,50.5)
      CALL GSLINE(13.0,50.7)
      CALL GSLINE(10.0,50.6)
      CALL GSLINE(8.0,50.5)
      CALL GSLINE(9.0,50.0)
      CALL GSLINE(8.0,49.5)
      CALL GSLINE(10.0,49.4)
      CALL GSLINE(13.0,49.3)
      CALL GSLINE(16.0,49.5)
      CALL GSLINE(19.0,50.0)
      CALL GSMOVE(12.0,56.0)
      CALL GSLINE(12.0,53.0)
      CALL GSMOVE(12.5,56.0)
      CALL GSLINE(12.5,53.0)
      CALL GSMOVE(12.0,47.0)
      CALL GSLINE(12.0,44.0)
      CALL GSMOVE(12.5,47.0)
      CALL GSLINE(12.5,44.0)
C----- LEFT WING
      CALL GSLW(0)
      CALL GSMOVE(35.0,53.5)
      CALL GSLINE(33.0,58.0)
      CALL GSLINE(40.0,70.0)
      CALL GSLINE(34.0,70.0)
      CALL GSLINE(20.0,56.0)
      CALL GSLINE(23.0,56.0)
      CALL GSLINE(35.0,69.0)
      CALL GSLINE(33.0,69.0)
      CALL GSMOVE(25.0,61.0)
      CALL GSLINE(27.5,61.0)
      CALL GSMOVE(29.0,65.0)
      CALL GSLINE(31.0,65.0)
      CALL GSMOVE(25.0,58.0)
      CALL GSLINE(33.0,58.0)
C----- RIGHT WING
      CALL GSMOVE(35.0,46.5)
      CALL GSLINE(33.0,42.0)
      CALL GSLINE(40.0,30.0)
      CALL GSLINE(34.0,30.0)
      CALL GSLINE(20.0,44.0)
      CALL GSLINE(23.0,44.0)
      CALL GSLINE(35.0,31.0)
      CALL GSLINE(33.0,31.0)
      CALL GSMOVE(25.0,39.0)
      CALL GSLINE(27.5,39.0)
      CALL GSMOVE(29.0,35.0)
      CALL GSLINE(31.0,35.0)
      CALL GSMOVE(25.0,42.0)
      CALL GSLINE(33.0,42.0)
C----- FUSELAGE
      CALL GSMOVE(32.0,50.0)
      CALL GSLINE(32.5,50.0)
      CALL GSMOVE(37.0,50.0)
      CALL GSLINE(38.0,50.0)
      CALL GSMOVE(45.0,50.0)
      CALL GSLINE(45.5,50.0)
      CALL GSMOVE(50.0,54.0)
      CALL GSLINE(40.0,54.0)
      CALL GSLINE(35.0,53.5)
      CALL GSLINE(30.0,53.2)
      CALL GSLINE(20.0,53.0)
      CALL GSMOVE(50.0,46.0)
      CALL GSLINE(40.0,46.0)
      CALL GSLINE(35.0,46.5)
      CALL GSLINE(30.0,46.8)
      CALL GSLINE(20.0,47.0)
      CALL GSMOVE(30.0,53.2)
      CALL GSLINE(30.0,46.8)
      CALL GSMOVE(40.0,54.0)
      CALL GSLINE(46.0,54.0)
      CALL GSMOVE(26.0,53.0)
      CALL GSLINE(26.0,54.0)
      CALL GSLINE(25.0,53.5)
      CALL GSLINE(24.5,53.0)
C----- INTAKES
      CALL GSLW(0)
      CALL GSMOVE(49.0,54.0)
      CALL GSLINE(43.0,60.0)
      CALL GSLINE(40.0,60.0)
      CALL GSLINE(37.0,55.0)
      CALL GSLINE(40.0,55.0)
      CALL GSLINE(41.0,54.0)
      CALL GSMOVE(49.0,46.0)
      CALL GSLINE(43.0,40.0)
      CALL GSLINE(40.0,40.0)
      CALL GSLINE(37.0,45.0)
      CALL GSLINE(40.0,45.0)
      CALL GSLINE(41.0,46.0)
      CALL GSMOVE(50.0,54.0)
      CALL GSLINE(50.0,53.0)
      CALL GSLINE(52.0,52.5)
      CALL GSLINE(43.0,52.5)
      CALL GSMOVE(43.0,47.5)
      CALL GSLINE(52.0,47.5)
      CALL GSLINE(50.0,47.0)
      CALL GSLINE(50.0,46.0)
C----- NOSE
      CALL GSLW(0)
      CALL GSMOVE(45.0,52.25)
      CALL GSLINE(65.0,52.25)
      CALL GSPFLT(3,X1,Y1)
      CALL GSLINE(45.0,47.75)
      CALL GSMOVE(59.0,52.25)
      CALL GSLINE(59.0,51.0)
      CALL GSMOVE(59.0,49.0)
      CALL GSLINE(59.0,47.75)
      CALL GSMOVE(65.0,52.25)
      CALL GSLINE(65.0,47.75)
      CALL GSMOVE(71.0,51.0)
      CALL GSLINE(71.0,49.0)
      CALL GSLW(2)
      CALL GSMOVE(79.0,50.0)
      CALL GSLINE(74.0,50.0)
C----- CANOPY
      CALL GSLW(0)
      CALL GSMOVE(49.0,53.5)
      CALL GSLINE(41.0,53.5)
      CALL GSLINE(40.0,53.25)
      CALL GSLINE(38.5,53.0)
      CALL GSLINE(37.0,52.1)
      CALL GSLINE(34.0,52.0)
      CALL GSLINE(32.0,51.9)
      CALL GSLINE(30.0,51.5)
      CALL GSLINE(28.0,50.5)
      CALL GSLINE(48.0,51.5)
      CALL GSMOVE(49.0,46.5)
      CALL GSLINE(41.0,46.5)
      CALL GSLINE(40.0,46.75)
      CALL GSLINE(38.5,47.0)
      CALL GSLINE(37.0,47.9)
      CALL GSLINE(34.0,48.0)
      CALL GSLINE(32.0,48.1)
      CALL GSLINE(30.0,48.5)
      CALL GSLINE(28.0,49.5)
      CALL GSLINE(48.0,48.5)
      CALL GSLINE(47.75,49.0)
      CALL GSLINE(47.5,50.0)
      CALL GSLINE(47.75,51.0)
      CALL GSLINE(48.0,51.5)
      CALL GSLINE(57.75,51.5)
      CALL GSLINE(58.75,51.0)
      CALL GSLINE(59.1,50.5)
      CALL GSLINE(59.1,49.5)
      CALL GSLINE(58.75,49.0)
      CALL GSLINE(57.75,48.5)
      CALL GSLINE(48.0,48.5)
      CALL GSCOL(1)
      CALL GSPAT(16)
      CALL GSMOVE(50.5,51.2)
      CALL GSAREA(0)
      CALL GSLINE(54.0,51.2)
      CALL GSLINE(54.0,48.8)
      CALL GSLINE(50.5,48.8)
      CALL GSLINE(50.0,49.0)
      CALL GSLINE(49.7,50.0)
      CALL GSLINE(50.0,51.0)
      CALL GSLINE(50.5,51.2)
      CALL GSENDA
      CALL GSCOL(5)
      CALL GSMOVE(54.3,51.5)
      CALL GSLINE(54.3,48.5)
      CALL GSMOVE(54.5,51.2)
      CALL GSCOL(1)
      CALL GSAREA(0)
      CALL GSLINE(57.0,51.2)
      CALL GSLINE(58.0,51.0)
      CALL GSLINE(58.3,50.5)
      CALL GSLINE(58.5,50.0)
      CALL GSLINE(58.3,49.5)
      CALL GSLINE(58.0,49.0)
      CALL GSLINE(57.0,48.8)
      CALL GSLINE(54.5,48.8)
      CALL GSLINE(54.5,51.2)
      CALL GSENDA
      CALL GSSCLS
      RETURN
      END
./     ADD     NAME=ZOOMS
./     NUMBER  NEW1=100,INCR=100
GETVAL   TITLE 'GET VALUE ROUTINE (ZOOM UTILITY)'
GETVAL   START 0
         SPACE 1
* PURPOSE :    SHORT ROUTINE TO CONVERT THE 4-CHARACTERS VALUES, WHICH
* ---------    HAVE BEEN ENTERED AS WIDTH-HEIGHT RANGES (0 - 85), IN
*              BINARY VALUES.
         SPACE 1
* FORTRAN :    CALL GETVAL(C,N)
* ---------             WHERE C IS THE 4-CHARACTERS VALUE
*                         AND N IS THE BINARY VALUE (FULLWORD)
         SPACE 1
* AUTHOR :     MOINIL P.A.
* --------     COMPUTING CENTRE (TP 361)
*              J.R.C. - ISPRA ESTABLISHMENT
*              21020 ISPRA (VA), ITALY
         SPACE 1
        PRINT  NOGEN
        YREGS
        SAVE   (14,12),,*
         LR    R12,R15
         USING GETVAL,R12
         LR    R15,R13
         LA    R13,SVAR
         ST    R13,8(R15)
         ST    R15,4(R13)
         LTR   R1,R1
         BZ    EXIT
         TM    0(R1),X'80'
         BO    EXIT
         TM    4(R1),X'80'
         BO    EXIT
         TM    8(R1),X'80'
         BZ    EXIT
         LM    R2,R4,0(R1)
         LA    R4,0(R4)
         LTR   R2,R2
         BZ    EXIT
         LTR   R3,R3
         BZ    EXIT
         LA    R0,4
         XR    R1,R1
         ST    R1,0(R3)
         ST    R1,0(R4)
         LR    R14,R1
         LA    R15,15
         MVI   SWITCH,0
LOOP     CLI   0(R2),0
         BE    TEST
         CLI   0(R2),C' '
         BNE   *+L'*+16
         TM    SWITCH,BIT0
         BZ    SKIP
         OI    SWITCH,BIT1
         B     SKIP
         TM    SWITCH,BIT1
         BO    QUIT
         CLI   0(R2),C'0'
         BL    QUIT
         CLI   0(R2),C'9'
         BH    QUIT
         OI    SWITCH,BIT0
         IC    R14,0(R2)
         NR    R14,R15
         LTR   R1,R1
         BZ    *+L'*+4
         MH    R1,TEN
         AR    R1,R14
SKIP     LA    R2,1(R2)
         BCT   R0,LOOP
TEST     CH    R1,MAX
         BH    QUIT
         ST    R1,0(R3)
         B     EXIT
QUIT     LA    R1,16
         ST    R1,0(R4)
EXIT     L     R13,4(R13)
        RETURN (14,12),T,RC=0
         SPACE 1
*------- CONSTANTS AND WORK-AREAS
         SPACE 1
SVAR     DC    18F'0'
MAX      DC    H'85'
TEN      DC    H'10'
SWITCH   DC    XL1'0'
         SPACE 1
        IEZBITS
         SPACE 1
         END
./     ADD     NAME=ZOOM$
./     NUMBER  NEW1=100,INCR=100
//ZOOM     JOB (........),'INSTALL -Z O O M-',
//             MSGLEVEL=(1,1),MSGCLASS=A,REGION=2M,TIME=(,20)
/*JOBPARM L=5
//FORT    EXEC PGM=FORTVS2,
//             PARM='NODECK,NOLIST,NOTERM,NOTF,OPT(2)'
//STEPLIB   DD DSN=SYS1.VSF2COMP,DISP=SHR
//SYSLIN    DD DSN=&&LOADSET,DISP=(MOD,PASS),UNIT=V3380,
//             SPACE=(3200,(25,6)),DCB=BLKSIZE=3200
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(ZOOM),DISP=SHR
//ASS     EXEC PGM=IEV90,PARM='XREF(SHORT),NODECK,OBJECT'
//SYSLIB    DD DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1    DD UNIT=VIO,DSN=&&SYSUT1,SPACE=(CYL,(10,5))
//SYSLIN    DD DSN=&LOADSET,DISP=(MOD,PASS)
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DSN=->.USER.DEMO.ORIGIN(ZOOMS),DISP=SHR
//LKED    EXEC PGM=HEWL,PARM='LIST,XREF',COND=(4,LT)
//SYSLIB    DD DSN=SYS1.VSF2FORT,DISP=SHR
//          DD DSN=SYS1.GDDMLOAD,DISP=SHR
//SYSLMOD   DD DSN=->.USER.DEMO.DATA,DISP=OLD
//SYSUT1    DD UNIT=VIO,SPACE=(CYL,(1,1))
//SYSPRINT  DD SYSOUT=*
//SYSLIN    DD DSN=&&LOADSET,DISP=(OLD,DELETE)
//          DD *
  ENTRY  MAIN
  NAME   ZOOM(R)
/*
./     ENDUP
