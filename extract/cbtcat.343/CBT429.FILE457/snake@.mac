1   17/01/92
                                                      SNAKE     1/2.

  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * *       S N A K E   TSO Command       * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

  SNAKE  : System-Node-Activity-Knowledge-Exit
  -------- CBT origin : Extracted from CBT tape 91 MAR, files 134-135.
           Written August 1987 by GREG PRICE of PRYCROFT SIX PTY LTD.

  Use    : for use under TSO on 3270-family VDU in fullscreen mode.
  -------- SNAKE supports all screen sizes.

  Object : to pick up as many $25 bundles as possible and make it
  ------   "home" without being eaten by the snake. Money is denoted
           by a '$', the player by a 'I', home by '#', and the snake
           by a string of 'S's in lower case, with the snake's head
           being in upper case. Each time the player moves the snake
           moves. At first the snake will move almost randomly, but
           will make an "intelligent" move more often as the game
           progresses. When the player gets "home" the game ends and
           the score is credited. If the player gets "eaten" then the
           game ends and no score is credited.

  Method : The player depresses keys to indicate which direction the
  -------- 'I' should move. Money is gained by moving the 'I' to a
           location occupied by a '$', whereupon another '$' will be
           randomly generated at a vacant location. Getting to "home"
           is achieved by moving the 'I' to the location occupied by
           the '#' which does not move during a game. Getting "eaten"
           by the snake occurs when the snake's head moves to the
           location occupied by the 'I'.

  Input  : PA keys - refresh the screen image
  -------- PFK  01 - display HELP screen
           PFK  03 - CANCEL - END without scoring
           PFK  04 - toggle SHOW-SNAKE-TRAIL switch
           PFK  05 - toggle BURST-MODE-WHEN-RUNNING switch
           PFK  07 - move up one location
           PFK  08 - move down one location
           PFK  10 - move left one location
           PFK  11 - move right one location
           PFK  12 - CANCEL - END without scoring
           PFK  13 - display HELP screen
           PFK  15 - CANCEL - END without scoring
           PFK  16 - toggle SHOW-SNAKE-TRAIL switch
           PFK  17 - toggle BURST-MODE-WHEN-RUNNING switch
           PFK  19 - run up until level with money
           PFK  20 - run down until level with money
           PFK  22 - run left until level with money
           PFK  23 - run right until level with money
           PFK  24 - CANCEL - END without scoring
1   17/01/92
                                                      SNAKE     2/2.

           Any other input, or trying to move through an obstruction,
           is equivalent to standing still while the snake gets a
           move. Note that running is stopped by an obstruction, but
           only after failing a move attempt, thus giving the snake an
           extra move. Any snake trail data present is cleared by a
           screen image RESHOW/REFRESH.

           If the file ISPTABL (can be changed to any PDS DD which
           effectively has UACC(UPDATE)) is allocated then the highest
           score is kept as user data (PFD (not SPF) stats) of member
           SNKTAB## (REVIEW will show PFD and SPF stats) where ## is
           the number of lines that the screen has.

           If the terminal's VTAM query bit is on then a query will be
           done to determine if 3270 extended data stream data can be
           sent.

           If invoked as 'HALFSNAK' or 'HS' then only the top half
           (integer arithmetic) of the screen will be used. Naturally
           a different scoreboard member will be used. Similarly with
           'QUARTERS' and 'QS'.

           Running can be speeded up by activating burst mode. When
           this is done consecutive running moves are displayed with
           one TPUT, thus optimizing terminal I/O. However, depending
           upon the terminal and its controller, each individual move
           may be invisible and the user will be presented with the
           final screen image.
