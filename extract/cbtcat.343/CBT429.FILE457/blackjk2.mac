TGTP     TITLE 'PL/1 PROGRAMS INTERFACE TO TGET/TPUT.'
TGET     START 0
         SPACE 1
        PRINT  OFF
         MACRO
&NAME   #CALL  &W,&N
&NAME    L     R15,=A(&W)
         BASR  R14,R15
         NOP   &N*4
         MEND
        PRINT  ON
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                                                                     *
* INTERFACE TO TGET/TPUT SVC FOR PL/1 PROGRAMS.                       *
* ---------------------------------------------                       *
*        A WXTRN FOR THE SYMBOL PLIBASE IS USED TO CONTROL THE METHOD *
*        OF ACCESS TO VARYING CHARACTER STRING VARIABLES.             *
*        IF THE EXTERNAL REFERENCE WAS RESOLVED BY THE LINKAGE        *
*        EDITOR, ITS VALUE WILL NON-ZERO. USING THIS TECHNIQUE        *
*        THE SUBROUTINE TO FUNCTION PROPERLY WITH CODE GENERATED BY   *
*        EITHER THE F-LEVEL OR OPTIMIZING/CHECKOUT COMPILER.          *
*                                                                     *
* THIS MODULE HAS TWO ENTRY POINTS :                                  *
* ----------------------------------                                  *
*        TGET - OBTAINS A MESSAGE FROM THE TERMINAL.                  *
*              INVOCATION : CALL TGET(VSTR,RC);                       *
*                  WHERE 'VSTR' IS A VARYING CHARACTER STRING USED TO *
*                       RECEIVE THE INPUT MESSAGE,                    *
*                  AND 'RC' IS A HALFWORD BINARY VARIABLE. IT WILL    *
*                       CONTAIN THE TGET RETURN CODE.                 *
*              ENTRY DECLARATION :                                    *
*                  DCL TGET ENTRY(CHAR(X) VAR,FIXED BIN(15));         *
*                  THE MAXIMUM LENGTH OF 'VSTR' IS USED AS THE TGET   *
*                  BUFFER LENGTH; AFTER THE EXECUTION OF TGET,        *
*                  LENGTH(VSTR)=NUMBER OF CHARACTERS READ.            *
*                                                                     *
*        TPUT - WRITES A MESSAGE TO THE TERMINAL.                     *
*              INVOCATION : CALL TPUT(VSTR,RC);                       *
*                  WHERE 'VSTR' IS A VARYING CHARACTER STRING         *
*                       CONTAINING THE MSG,                           *
*                  AND 'RC' IS A FIXED BIN(15) VARIABLE, TO RECEIVE   *
*                       THE INPUT RETURN CODE.                        *
*              ENTRY DECLARATION :                                    *
*                  DCL TPUT ENTRY(CHAR(X) VAR,FIXED BIN(15));         *
*                  THE CURRENT LENGTH OF 'VSTR' IS USED AS THE TPUT   *
*                  BUFFER LENGTH.                                     *
*                                                                     *
* FULL SCREEN ADDED BY : MOINIL P.A.                                  *
* ---------------------- COMPUTING CENTRE                             *
*                        J.R.C. - ISPRA ESTABLISHMENT                 *
*                        21020 ISPRA (VA), ITALY                      *
*                                                                     *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         EJECT
         ENTRY TPUT
         WXTRN PLISTART
         SPACE 1
        $DEFREG
         EJECT
*------- 'TGET' ENTRY POINT
         SPACE 1
         USING *,R15
DTGL     EQU   TGTP-*
         MVI   SWENT+3,DTGL
         B     SWENT
         DROP  R15
         SPACE 1
*------- 'TPUT' ENTRY POINT
         SPACE 1
         USING *,R15
DTPL     EQU   TGTP-*
TPUT     MVI   SWENT+3,DTPL
         DROP  R15
         SPACE 1
*------- COMMON ENTRY
         SPACE 1
SWENT    LA    R15,*-*(R15)
TGTP    $XENT  BASE=R10,ID=TGETTPUT
         LM    R8,R9,0(R1)
         TM    FLAGS,INVTSO
         BO    NOTTSO
         OC    ATSO,ATSO
         BNZ   KNOWN
        EXTRACT ATSO,'S',FIELDS=(TSO)
         L     R2,ATSO
         TM    0(R2),X'80'
         BZ    NOTTSO              WE ARE'NT IN TSO
        GTSIZE ,
         LTR   R15,R15
         BNZ   ERGTSZ              ERROR RETURN CODE
         LTR   R15,R0
         BZ    NDTERM              NOT DISPLAY TERMINAL
         CL    R1,=F'80'           TEST LINE LENGTH
         BE    TSTSC
         CL    R1,=F'132'
         BNE   NDTERM
         CL    R0,=F'27'           TEST NUMBER OF LINES
         BNE   NDTERM
         B     SETSCT
TSTSC    CL    R0,=F'24'
         BE    SETSCT
         CL    R0,=F'32'
         BE    SETSCT
         CL    R0,=F'43'
         BNE   NDTERM
SETSCT   OI    FLAGS,SCTERM
         B     NDTERM+L'NDTERM
NDTERM   NI    FLAGS,255-SCTERM
         USING DSDV,R8
KNOWN    L     R3,CMPSW            SET COMPILER SWITCH
         LA    R1,0(R10)
         BCTR  R1,0
         CLI   0(R1),DTGL          SWENT+3 = DTGL (TGET) ?
         BE    TGTPR               YES, SO TGET
         CLI   0(R1),DTPL          SWENT+3 = DTPL (TPUT) ?
         BE    TPTPR               YES, SO TPUT
         XR    R15,R15             NONE OF THOSE, SO SKIP
         B     FLUSH
         EJECT
*------- 'TGET' PROCESS
         SPACE 1
TGTPR    XR    R0,R0
         ICM   R0,B'0011',SDVMSL
         L     R2,SDVADDR          ADDRESS OF STRING (OR LENGTH FIELD)
         LR    R1,R2
         LTR   R3,R3               COMPILER SWITCH ?
         BZ    *+L'*+4             BRANCH IF F-LEVEL COMPILER
         LA    R1,2(R1)            POINT TO DATA, NOT LENGTH FIELD
         TM    FLAGS,SCTERM
         BZ    TGTPR1
        #CALL  DOFS,0
         B     TGTPR2
TGTPR1   ICM   R1,B'1000',=X'80'   FLAGS-TGET, WAIT, EDIT
        TGET   (1),(0),R
TGTPR2   LTR   R3,R3               COMPILER SWITCH ?
         BZ    *+L'*+8             BRANCH IF F-LEVEL COMPILER
         STCM  R1,B'0011',0(R2)    LENGTH TO STRING PREFIX
         B     RET
         STCM  R1,B'0011',SDVCSL   SET CURRENT STRING LENGTH IN SDV
         B     RET
         EJECT
*------- 'TPUT' PROCESS
         SPACE 1
TPTPR    XR    R0,R0
         L     R1,SDVADDR          STRING ADDRESS
         LTR   R3,R3               COMPILER SWITCH ?
         BZ    *+L'*+12            BRANCH IF F-LEVEL COMPILER
         ICM   R0,B'0011',0(R1)    SET CURRENT LENGTH FOR TPUT
         LA    R1,2(R1)            POINT TO DATA
         B     *+L'*+4
         ICM   R0,B'0011',SDVCSL   BUFFER SIZE=CURRENT STRING LENGTH
         TM    FLAGS,SCTERM
         BZ    TPTPR1
        #CALL  DOFS,1
         B     RET
TPTPR1   ICM   R1,B'1000',=X'00'   FLAGS-TPUT,WAIT,NOHOLD,NOBREAK,EDIT
        TPUT   (1),(0),R
         B     RET
         EJECT
*------- ERRORS RETURN
         SPACE 1
NOTTSO  TPUT   TSEMSG,L'TSEMSG
         B     QUIT
ERGTSZ   CVD   R15,DWRD
         MVC   DWRD(4),=XL4'40202120'
         ED    DWRD(4),DWRD+L'DWRD-2
         MVC   GTSMSG+20(3),DWRD+1
        TPUT   GTSMSG,L'GTSMSG
QUIT     LA    R15,16
         SPACE 1
*------- COMMON RETURN
         SPACE 1
         DROP  R8,R10
RET      STCM  R15,B'0011',0(R9)   SET RETURN CODE
FLUSH   $XRET  CC=(R15)
         EJECT
*------- CONSTANTS AND WORK-AREAS
         SPACE 1
DWRD     DC    D'0'
CMPSW    DC    A(PLISTART)         COMPILER SWITCH
ATSO     DC    A(*-*)
FLAGS    DC    XL1'0'              GENERAL FUNCTIONS
INVTSO   EQU   X'80'                    INVALID (TSO ENVIRONMENT)
SCTERM   EQU   X'40'                    SCREEN TERMINAL
         SPACE 1
TSEMSG   DC    C' => not outside TSO environment × Bye-Bye'
GTSMSG   DC    C' => "GTSIZE" - RC =     - Exit -'
         SPACE 1
*------- LITERAL POOL
         SPACE 1
        LTORG
         EJECT
*- - - - D O     F U L L     S C R E E N - - - - - - - - - - - - - - -*
         SPACE 1
DOFS    $XENT  BASE=R8,DT=NO
         XR    R10,R10
         LR    R5,R0
         LR    R6,R1
         LR    R7,R10
         ICM   R7,B'0011',2(R14)   CALL FS NUMBER
         TM    SWFSW,SW1ST
         BO    DOFSW
        @FSI   ,
         LTR   R15,R15
         BNZ   DOFIMM
         OI    OPTFS,FSSKIP
        @FS    ,,,MF=(E,FSPARMI)
         LTR   R15,R15
         BNZ   DOFERR
         OI    SWFSW,SW1ST
DOFSW    CL    R7,=A(DOFSMX)
         BNL   DOFVER
         B     DOFSV(R7)
DOFSV    B     DOFS0               TGET
         B     DOFS1               TPUT
DOFSMX   EQU   *-DOFSV
DOFS0    BAS   R7,DOFSTM
         LTR   R5,R2
         BNP   *+L'*+14
         BCT   R5,*+L'*+6
         MVC   0(*-*,R6),REPLY          << EXECUTED >>
         EX    R5,*-6
         L     R5,4(R13)
         ST    R2,24(R5)           AT RETURN R1 = REPLY LENGTH
         NI    SWFSW,255-SWNMS
         B     DOFSX
DOFS1    MVC   WLNE,BLANKS
         BCT   R5,*+L'*+6
         MVC   WLNE(*-*),0(R6)          << EXECUTED >>
         EX    R5,*-6
         CLC   WLNE(12),=CL12'You started '
         BNE   *+L'*+8
         NI    SWFSW,255-SWHMS
         B     DOFS1A
         TM    SWFSW,SWNMS
         BO    DOFS1A+L'DOFS1A
DOFS1A   BAS   R7,DOFSRZ
         CLC   WLNE(12),=CL12'Do you need '
         BE    DOFS1B
         CLC   WLNE(6),=CL6'Place '
         BE    DOFS1B
         CLC   WLNE(11),=CL11'Your play, '
         BNE   *+L'*+8
         OI    SWFSW,SWHMS
         B     DOFS1B+L'DOFS1B
         CLC   WLNE(7),=CL7'Enter Y'
         BE    DOFS1B
         CLC   WLNE(13),=CL13'S H U F F L E'
         BE    DOFS1B+L'DOFS1B
         CLC   WLNE(8),=CL8'W H A T '
         BE    DOFS1C
         CLC   WLNE(10),=CL10'You can''t '
         BE    DOFS1C
         CLC   WLNE(9),=CL9'At least '
         BE    DOFS1C
         CLC   WLNE(6),=CL6'Wrong '
         BE    DOFS1C
         CLC   WLNE(17),=CL17'Sorry, you can''t '
         BE    DOFS1C
         CLC   WLNE(10),=CL10'You don''t '
         BE    DOFS1C
         CLC   WLNE(11),=CL11'That''s all '
         BE    DOFS1E
         BAS   R7,DOFSRW
         B     DOFS1D              +0
         L     R1,=A(FSGI)         +4
         MVC   0(23,R1),=CL23'Just enter to continue.'
         BAS   R7,DOFSTM
         B     DOFS1A
DOFS1B   NI    SWFSW,255-SWHMS
         L     R1,=A(FSMS)
         B     DOFS1D
DOFS1C   L     R1,=A(FSGI)
         LA    R2,L'FSGI
         B     DOFS1D+L'DOFS1D
DOFS1D   LA    R2,L'WLNE
         BCT   R2,*+L'*+6
         MVC   0(*-*,R1),WLNE           << EXECUTED >>
         EX    R2,*-6
         OI    SWFSW,SWNMS
         B     DOFSX
DOFS1E   L     R1,=A(FSGI)
         MVC   0(L'FSGI,R1),WLNE
         BAS   R7,DOFSTM
         XR    R0,R0
         LR    R1,R0
         B     DOFXQR
         SPACE 1
DOFSRW   L     R0,=A(FSGL)                   R7 = LINK REGISTER
         L     R1,=A(FSGS)
         CLC   0(L'WLNE,R1),BLANKS
         BER   R7
         LA    R1,L'WLNE(R1)
         CLR   R1,R0
         BL    *-14
         B     4(R7)
DOFSRZ   TM    SWFSW,SWHMS                   R7 = LINK REGISTER
         BO    DOFSRZ1
         L     R0,=A(FSGL)
         L     R1,=A(FSGS)
         MVC   0(L'WLNE,R1),BLANKS
         LA    R1,L'WLNE(R1)
         CLR   R1,R0
         BL    *-12
DOFSRZ1  L     R1,=A(FSMS)
         MVC   0(L'FSMS,R1),BLANKS
         L     R1,=A(FSGI)
         MVC   0(L'FSGI,R1),BLANKS
         BR    R7
DOFSTM   MVC   REPLY,BLANKS                  R7 = LINK REGISTER
         NI    OPTFS,255-FSSKIP
        @FS    ,,,MF=(E,FSPARMA)
         LTR   R15,R15
         BNZ   DOFERR
         LTR   R1,R1
         BZ    DOFSTM1
         CLI   0(R1),X'F3'         PF-KEY 3?
         BE    *+L'*+8
         CLI   0(R1),X'C3'         PF-KEY 15 (ALT. 3)?
         BNE   DOFSTM1
         MVI   REPLY,C'Q'
         LA    R2,1
         BR    R7
DOFSTM1  XR    R2,R2
        @FSR   ,
         LTR   R15,R15
         BZR   R7
         LTR   R1,R1
         BNPR  R7
         LA    R2,REPLY
DOFSTM2  MVC   0(1,R2),3(R15)
         CLI   0(R2),C' '
         BNE   DOFSTM3
         LA    R15,1(R15)
         BCT   R1,DOFSTM2
         BR    R7
DOFSTM3  LR    R0,R2
         LA    R2,1(R2)
         LA    R15,1(R15)
         BCT   R1,*+L'*+4
         B     *+L'*+10
         MVC   0(1,R2),3(R15)
         B     DOFSTM3+L'DOFSTM3
         SR    R2,R0
         BR    R7
         SPACE 1
DOFIMM   CVD   R15,DBLW
         MVC   ERRMSI+19(4),=XL4'40202120'
         ED    ERRMSI+19(4),DBLW+L'DBLW-2
        TPUT   ERRMSI,L'ERRMSI
         B     DOFERX
DOFERR   CVD   R15,DBLW
         MVC   ERRMSE+29(4),=XL4'40202120'
         ED    ERRMSE+29(4),DBLW+L'DBLW-2
         XR    R0,R0
         IC    R0,OPTFS
         STC   R0,ERRMSE+21
         SRL   R0,4
         STC   R0,ERRMSE+20
         NC    ERRMSE+20(2),=XL2'0F0F'
         TR    ERRMSE+20(2),HEXTB
         LA    R0,L'ERRMSE
         LA    R1,ERRMSE
         B     DOFXQR
DOFVER   SRL   R7,2
         CVD   R7,DBLW
         MVC   DOFMSE+21(6),=XL6'402020202120'
         ED    DOFMSE+21(6),DBLW+L'DBLW-3
         LA    R0,L'DOFMSE
         LA    R1,DOFMSE
DOFXQR   STM   R0,R1,ERRMSLA
         MVI   OPTFS,FSEXIT
        @FS    ,MF=(E,FSPARMX)
         LR    R10,R15             RETAIN RETURN CODE
         LM    R0,R1,ERRMSLA
         LTR   R1,R1
         BZ    NOMSGE
        TPUT   (1),(0)
NOMSGE   LTR   R10,R10
         BZ    DOFERX
         CVD   R10,DBLW
         MVC   ERRMSE+29(4),=XL4'40202120'
         ED    ERRMSE+29(4),DBLW+L'DBLW-2
         XR    R0,R0
         IC    R0,OPTFS
         STC   R0,ERRMSE+21
         SRL   R0,4
         STC   R0,ERRMSE+20
         NC    ERRMSE+20(2),=XL2'0F0F'
         TR    ERRMSE+20(2),HEXTB
        TPUT   ERRMSE,L'ERRMSE
DOFERX   LA    R10,16
DOFSX   $XRET  CC=(R10)
         EJECT
*------- CONSTANTS AND WORK-AREAS
         SPACE 1
DBLW     DC    D'0'
ERRMSLA  DC    2F'0'
FSPARMI  DC    A(OPTFS)
         DC    A(INITR)
         DC    A(*+4+X'80000000')
         DC    A(INITRL)
FSPARMA  DC    A(OPTFS)
         DC    A(FSCR)
         DC    A(*+4+X'80000000')
         DC    A(FSCRL)
FSPARMX  DC    A(OPTFS+X'80000000')
WLNE     DC    CL80' '
REPLY    DC    CL80' '
BLANKS   DC    CL80' '
HEXTB    DC    CL16'0123456789ABCDEF'
SWFSW    DC    XL1'0'              SCREEN FUNCTIONS
SW1ST    EQU   X'80'
SWNMS    EQU   X'08'
SWHMS    EQU   X'04'
OPTFS   @FSO   ,
         SPACE 1
ERRMSI   DC    C' => "FSRTNI" - RC =     - Exit -'
ERRMSE   DC    C' => "FSRTN" - OPT =    , RC =     - Exit -'
DOFMSE   DC    C' => "DOFS" - Number =       - Exit -'
         SPACE 1
        LTORG  ,                   LITERALS
         SPACE 1
         DROP  R8                  END OF LOCAL ADDRESSABILITY
         EJECT
*- - - - S C R E E N     D A T A - - - - - - - - - - - - - - - - - - -*
         SPACE 1
INITR   $FS    CC=EW,WCC=(AL,RMDT),SBA=(24,79),MF=L
        $FS    SBA=(1,1),RA=(1,1,00),MF=L
        $FS    SBA=(1,1),SF=(IC),MF=L
INITRL   EQU   *-INITR
         SPACE 1
FSCR    $FS    CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=L
        $FS    SBA=(1,1),SF=(PROT,INT),MF=L
        $FS    SBA=(1,24),MF=L
        $FS    TEXT='B   L   A   C   K   J   A   C   K',MF=L
        $FS    SBA=(2,1),SF=(PROT,INT),RA=(2,80,-),MF=L
        $FS    SF=(PROT),MF=L
FSGS    $FS    TEXT=(' ',80),MF=L       1 -> (3,1)
        $FS    TEXT=(' ',80),MF=L       2
        $FS    TEXT=(' ',80),MF=L       3
        $FS    TEXT=(' ',80),MF=L       4
        $FS    TEXT=(' ',80),MF=L       5
        $FS    TEXT=(' ',80),MF=L       6
        $FS    TEXT=(' ',80),MF=L       7
        $FS    TEXT=(' ',80),MF=L       8
        $FS    TEXT=(' ',80),MF=L       9
        $FS    TEXT=(' ',80),MF=L      10
        $FS    TEXT=(' ',80),MF=L      11
        $FS    TEXT=(' ',80),MF=L      12
        $FS    TEXT=(' ',80),MF=L      13
        $FS    TEXT=(' ',80),MF=L      14
        $FS    TEXT=(' ',80),MF=L      15
        $FS    TEXT=(' ',80),MF=L      16
        $FS    TEXT=(' ',80),MF=L      17
FSGL    $FS    TEXT=(' ',80),MF=L      18 -> (20,1)
        $FS    SF=(PROT,INT),RA=(21,80,=),MF=L
        $FS    SF=(PROT),MF=L
FSMS    $FS    TEXT=(' ',80),MF=L         -> (22,1)
        $FS    SF=(PROT,INT),MF=L         -> (23,1)
        $FS    TEXT='===>',MF=L
        $FS    SF=NORMAL,MF=L
        $FS    SBA=(23,20),SF=(PROT),MF=L
FSGI    $FS    TEXT=(' ',50),MF=L
        $FS    SBA=(1,1),SF=(PT,IC),MF=L
FSCRL    EQU   *-FSCR
         EJECT
*------- DSECTS
         SPACE 1
DSDV     DSECT
SDVADDR  DS    F
SDVMSL   DS    H
SDVCSL   DS    H
         SPACE 1
         END
