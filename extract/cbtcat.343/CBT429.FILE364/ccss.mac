     TITLE 'CCSS SSVT '
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*        CCSS - CONTROL CARD SUBSYSTEM                                *
*                                                                     *
*                                                                     *
*                                                                     *
*        SUBSYTEM SSVT AND FUNCTIONAL ROUTINES                        *
*                                                                     *
*                                                                     *
*        MODULE IS LPA RESIDENT RE-ENTRANT AND REFRESHABLE            *
*                                                                     *
*        MODIFICATIONS:                                               *
*        3/5/84 - FUNCTION DEPENDENT PORTION OF SSOB ADDRESSED        *
*                 VIA SSOBINDV.  SHOULD AVOID REASSEMBLY FOR XA       *
*        5/16/88 - CORRECT INITIALIZATION OF SSDTRECL FOR CHKPT    @Q1*
*        5/17/88 - SET ADDRESSING MODE TO 31 BIT USING BSM.  PUT   @Q2*
*                 OFF ACCESSING SWA CONTROL BLOCKS (SSWA, JFCB)    @Q2*
*                 USING SWAREQ UNTIL IT BECOMES A PROBLEM          @Q2*
*        11/22/88 - VALIDATE THE JFCB RECFM, LRECL, AND BLKSIZE    @Q3*
*                 AT DATASET ALLOCATION                            @Q3*
*        10/29/89 - GETMAIN STORAGE WITH PROPER LOC PARAMETER      @Q4*
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*        SUBSYSTEM SSVT                                               *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
*
CCSSVT   CSECT
CCSSVT   AMODE 31                                                   @Q2
CCSSVT   RMODE 24                                                   @Q2
         DC    H'0'
         DC    AL2(FUNC)
         DC    AL1(F001),AL1(F002),AL1(F003),AL1(F004)
         DC    AL1(F005),AL1(F006),AL1(F007),AL1(F008)
         DC    AL1(F009),AL1(F010),AL1(F011),AL1(F012)
         DC    AL1(F013),AL1(F014),AL1(F015),AL1(F016)
         DC    AL1(F017),AL1(F018),AL1(F019),AL1(F020)
         DC    AL1(F021),AL1(F022),AL1(F023),AL1(F024)
         DC    AL1(F025),AL1(F026),AL1(F027),AL1(F028)
         DC    AL1(F029),AL1(F030),AL1(F031),AL1(F032)
         DC    AL1(F033),AL1(F034),AL1(F035),AL1(F036)
         DC    AL1(F037),AL1(F038),AL1(F039),X'00'
         DC    216X'00'
CCCI     DC    A(X'80000000'+CCCI0000)
CCAG     DC    A(X'80000000'+CCAG0000)
CCDA     DC    A(X'80000000'+CCDA0000)
         LTORG
*
*        'B' INDICATES BROADCAST FUNCTION
*
FUNC  EQU   X'0003'
F001  EQU   X'00'      1 - PROCESS SYSOUT DATASET
F002  EQU   X'00'      2 - CANCEL A JOB
F003  EQU   X'00'      3 - FIND THE STATUS OF A JOB
F004  EQU   X'00'   B  4 - NOTIFY: END OF TASK
F005  EQU   X'00'      5 - JOB SELECT
F006  EQU   X'00'      6 - ALLOC SYSIN/SYSOUT/INTRDR
F007  EQU   X'00'      7 - UNALLOCATE SYSIN/SYSOUT/INTRDR
F008  EQU   X'00'   B  8 - NOTIFY: END OF ADDR SPACE
F009  EQU   X'00'   B  9 - NOTIFY: WTO MESSAGE
F010  EQU   X'00'   B 10 - NOTIFY: OPERATOR COMMAND
F011  EQU   X'00'     11 - VALIDATE REMOTE DEST USERID
F012  EQU   X'00'     12 - NOTIFY: JOB TERM
F013  EQU   X'00'     13 - RE-ENQUEUE JOB
F014  EQU   X'00'   B 14 - NOTIFY: DELETE OPERATOR
F015  EQU   X'00'     15 - VERIFY SUBSYSTEM NAME
F016  EQU   X'03'     16 - OPEN SUBSYSTEM DATASET
F017  EQU   X'03'     17 - CLOSE SUBSYSTEM DATASET
F018  EQU   X'03'     18 - CHECKPOINT SUBSTSTEM DATASET
F019  EQU   X'03'     19 - RESTART A SUBSYSTEM DATASET
F020  EQU   X'00'     20 - REQUEST JOBID
F021  EQU   X'00'     21 - RETURN JOBID
F022  EQU   X'00'     22 - NOTIFY: STEP INITIATION
F023  EQU   X'00'     23 - DYNAMIC ALLOCATION
F024  EQU   X'00'     24 - COMMON ALLOCATION
F025  EQU   X'00'     25 - COMMON UNALLOCATION
F026  EQU   X'00'     26 - CHANGE DDNAME
F027  EQU   X'00'     27 - CHANGE ENQ USE ATTRIBUTE
F028  EQU   X'00'     28 - DDR DEVICE CANDIDATE SELECT
F029  EQU   X'00'     29 - DDR DEVICE CANDIDATE VERIFY
F030  EQU   X'00'     30 - DDR UCB SWAP
F031  EQU   X'00'     31 - DDR SWAP COMPLETION
F032  EQU   X'00'   B 32 - FAILING START
F033  EQU   X'00'     33 - NOTIFY: CONSOLE SWITCH
F034  EQU   X'00'     34 - NOTIFY: WTL MESSAGE
F035  EQU   X'00'     35 - MSS VOLUME EXIT CONTROL
F036  EQU   X'00'     36 - MSSC MESSAGE TASK-MOUNT EQUALIZATION
F037  EQU   X'00'     37 - MSS OPEN/EOV
F038  EQU   X'01'     38 - CONVERTER SUBSYS KEYWORD
F039  EQU   X'02'     39 - GROUP ALLOCATION
         TITLE 'MISCELLANEOUS DSECTS'
*---------------------------------------------------------------------*
*                                                                     *
*        DSECT FOR SUBSYSTEM DATASET I/O BLOCK                        *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*        CREATED BY OPEN                                              *
*                                                                     *
*        SUBPOOL 230 - KEY 5                                          *
*                                                                     *
*        DESCRIBES THE 'INTERNAL' DATASET  IN TERMS OF                *
*        STARTING ADDRESS, ENDING ADDRESS, HIGH RBA,                  *
*        NUMBER OF RECORDS, ETC..                                     *
*        REFERENCED BY I/O ROUTINES.                                  *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
SSDSIOB  DSECT
SSDID    DS    CL4    'SSDS'
SSDSPL   DS    F      SUBPOOL AND LENGTH
SPSSDS   EQU   230
SSDBGNA  DS    F      A(PHYSICAL START OF DATASET)
SSDPEOD  DS    F      A(PHYSICAL EOD) (PTR TO LAST BYTE+1)
SSDTRECP DS    F      TOTAL NUMBER OF PHYSICAL RECORDS
SSDTRECL DS    F      TOTAL NUMBER OF LOGICAL RECORDS
SSDLRAD  DS    F      A(LOWEST LOGICAL RECORD)
SSDHRAD  DS    F      A(HIGHEST LOGICAL RECORD)
SSDHRRBA DS    F      RBA OF HIGHEST LOGICAL RECORD
SSDRECFM DS    BL1    RECFM FROM JFCB
SSDSIOBL EQU   *-SSDSIOB
         EJECT
   PRINT NOGEN
*---------------------------------------------------------------------*
*                                                                     *
*        DSECT FOR SSCT                                               *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
         IEFJSCVT
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DSECT FOR SSOB                                               *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
         IEFJSSOB (CI,AG,DA),CONTIG=NO
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DSECT FOR SSIB                                               *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
         IEFJSSIB
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DSECT FOR SSARB                                              *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
         IEFSSARB
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DSECT FOR SSWA                                               *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
         IEFJSSWA
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DSECT FOR DEB                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
         IEZDEB LIST=YES
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DSECT FOR JFCB                                               *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
JFCB     DSECT
         IEFJFCBN LIST=YES
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DSECT FOR ACB                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
         IFGACB
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        DSECT FOR RPL                                                *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
         IFGRPL
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        RECORD MANAGEMENT RETURN CODES                               *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
         IDARMRCD
         EJECT
         PRINT GEN
*---------------------------------------------------------------------*
*                                                                     *
*        MISCELLANEOUS EQUATES                                        *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
CONTREC  EQU  X'014E'     CONTINUATION RECORD: LENGTH=1, CHAR='+'
R0       EQU       0
R1       EQU       1
R2       EQU       2
R3       EQU       3
R4       EQU       4
R5       EQU       5
R6       EQU       6
R7       EQU       7
R8       EQU       8
R9       EQU       9
R10      EQU      10
R11      EQU      11
R12      EQU      12
R13      EQU      13
R14      EQU      14
R15      EQU      15
         TITLE 'NO-OP EXIT'
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*        SUBSYSTEM FUNCTIONAL ROUTINES:                               *
*                                                                     *
*                                                                     *
*        UPON ENTRY FROM IEFSSREQ                                     *
*                                                                     *
*             R0  =  A(SSCVT)                                         *
*             R1  =  A(SSOB)                                          *
*             R15 =  ENTRY POINT                                      *
*             R2-R12, R13 = CALLER'S (OF IEFSSREQ) REGISTERS          *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
         TITLE 'CONVERTER SUBSYS EXIT - CCCI'
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*        CONVERTER SUBSYS KEYWORD EXIT - CCCI                         *
*                                                                     *
*        SCHEDULER KEY ONE                                            *
*                                                                     *
*        VALIDATE THE USE OF SUBSYSTEM CONTINUATION CHARACTER         *
*        INSURE THAT THERE ARE NO NULL PARAMETERS                     *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
CCCI0000 CSECT
CCCI0000 AMODE 31                                                   @Q2
CCCI0000 RMODE 24                                                   @Q2
         ENTRY CCCI                    ESTABLISH ENTRY POINT      @R92A
         USING *,R15                   SET TEMP BASE              @R92A
         B     CCCI0001                  BRANCH AROUND CSECT ID
         DC    C'CCCI &SYSDATE'
CCCI0001 DS    0H
         STM   R14,R12,12(R13)           SAVE REGISTERS           @R92A
         DROP  R15                                                @R92A
         LR    R12,R15                 LOAD BASE                  @R92A
         USING CCCI0000,R12            DECLARE BASE               @R92A
         LR    R9,R1                     SAVE PTR TO PARM ADDRESS
         GETMAIN RU,LV=CCCIWKL,SP=230,LOC=ANY  GET WORKING STORAGE  @Q4
         XC    0(CCCIWKL,R1),0(R1)       CLEAR WORKING STORAGE
         ST    R13,4(,R1)                CHAIN THE
         ST    R1,8(,R13)                   SAVE AREAS
         LR    R13,R1                    NEW SAVE AREA
         USING CCCIWK,R13                BASE FOR WORK AREA
         MVC   CCCIID,=C' CCCIWK '       LABEL WORKAREA
         ST    R9,CCCIPRMP               SAVE R1 ENTRY PARM
         SPACE
         USING SSOB,R9                   SSOB ADDRESSIBILITY
         XC    SSOBRETN,SSOBRETN         CLEAR RETURN CODE IN SSOB
         L     R10,SSOBINDV              GET A(SSCI)
         USING SSCIBGN,R10               SSCI ADDRESSIBILITY
         EJECT
*
*        SET UP VALIDATION LOOPS
*
         LH    R5,SSCINPRM               R5 = NUMBER OF PARM PAIRS
         SLR   R3,R3                     CLEAR INDEX REG 3
         LA    R4,1                      INCREMENT = 1
         L     R1,SSCISUBS               LOAD POINTER TO PARM PAIRS
         USING SSWAIFLD,R1               ADDRESSIBILITY
         BXH   R3,R4,CCCIEXIT            EXIT IF NO PARMS
         SLR   R2,R2                     CLEAR FOR PARM LENGTH
*
*        IF CONTINUATION CHARACTER - ERROR
*
CCCI0010 DS    0H
         CLC   CONTINU,SSWAIFLD          CONTINUE PARM?
         BE    CCIE0010                  ...YES, ERROR
*
*        LOOK FOR PARM - IF NO MORE THEN EXIT
*
CCCI0020 DS    0H
         ICM   R2,B'0001',SSWAILEN       GET PARM LENGTH
         BZ    CCIE0020                  ...ERROR IF NULL PARM
         BXH   R3,R4,CCCIEXIT            EXIT IF NO MORE PARMS
         LA    R1,SSWAIPRM(R2)           POINT TO NEXT PARM
         CLC   CONTINU,SSWAIFLD          CONTINUE PARM?
         BNE   CCCI0020                  ...NO, NEXT PARM
*
*        FOUND CONTINUE CHAR - CANNOT BE LAST OR FOLLOWED BY ANOTHER
*
         BXH   R3,R4,CCIE0010            ...YES, ERROR IF LAST PARM
         ICM   R2,B'0001',SSWAILEN       GET PARM LENGTH
         LA    R1,SSWAIPRM(R2)           POINT TO NEXT PARM
         B     CCCI0010                  CONTINUE CANNOT BE NEXT
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*        EXITS                                                        *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*        WITH ERROR                                                   *
*                                                                     *
*---------------------------------------------------------------------*
CCIE0010 DS    0H
         LA    R0,SSCISYNT               RET CODE = FATAL SYNTAX ERROR
         LA    R14,CIEM0010              GET A(ERROR MESSAGE)
         LA    R15,CIEL0010              SET MESSAGE LENGTH
         B     CCIEMSG                   PUT OUT MESSAGE
         SPACE
CCIE0020 DS    0H
         LA    R0,SSCISYNT               RET CODE = FATAL SYNTAX ERROR
         LA    R14,CIEM0020              GET A(ERROR MESSAGE)
         LA    R15,CIEL0020              SET MESSAGE LENGTH
         SPACE
CCIEMSG  DS    0H
         ST    R0,SSOBRETN               SET SSOB RETURN CODE
         LH    R1,SSCIMLEN               R1= MESSAGE AREA TEXT LENGTH
         L     R2,SSCIMPTR               GET A(MESSAGE AREA)
         CR    R15,R1                    COMPARE: L'MSG TO L'AREA
         BNH   *+6                       IF L'MSG HIGHER...
         LR    R15,R1                    ...USE AREA LENGTH
         STH   R15,0(,R2)                SET MESSAGE LENGTH
         BCTR  R15,0                     REDUCE FOR EXECUTE
         EX    R15,CCIEMVC               MOVE MESSAGE
         B     CCCIEXIT                  EXIT
         SPACE
CCIEMVC  MVC   2(0,R2),0(R14)            EXECUTED: MOVE MSG TEXT
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*        EXIT - FINAL                                                 *
*                                                                     *
*---------------------------------------------------------------------*
CCCIEXIT DS    0H
         L     R9,CCCISAVE+4             GET A(CALLER'S SAVE)
         FREEMAIN RU,LV=CCCIWKL,A=(13),SP=230
         SLR   R15,R15                   CLEAR AS RETURN CODE
         LR    R13,R9                    CALLER'S SAVE AREA PTR
         L     R14,12(0,R13)             RESTORE RETURN ADDR
         LM    R0,R12,20(R13)            AND THE CALLERS REGS
         BSM   0,R14                   RETURN IN CORRECT AMODE      @Q2
         EJECT
*---------------------------------------------------------------------*
*        CONVERTER EXIT DATA AREA                                     *
*---------------------------------------------------------------------*
         SPACE
CONTINU  DC    AL2(CONTREC)
         SPACE
CIEM0010 DC    C'CCSS3801E - INVALID USE OF SUBSYSTEM '
         DC    C'CONTINUATION CHARACTER.'
CIEL0010 EQU   *-CIEM0010
         SPACE 3
CIEM0020 DC    C'CCSS3802E - SUBSYSTEM PARAMETER IMPLIED '
         DC    C'BUT NOT FOUND.'
CIEL0020 EQU   *-CIEM0020
         LTORG
*---------------------------------------------------------------------*
*        DSECT FOR CONVERTER EXIT WORKING STORAGE                     *
*---------------------------------------------------------------------*
         SPACE
CCCIWK   DSECT
CCCISAVE DS    18F                       REGISTER SAVE AREA
CCCIID   DS    CL8                       WORKAREA LABEL
CCCIPRMP DS    F                         A(CALLER'S PARM)
CCCIWKL  EQU   *-CCCIWK
         TITLE 'GROUP ALLOCATION - CCAG'
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*        GROUP ALLOCATION EXIT - AG                                   *
*                                                                     *
*        SCHEDULER KEY ONE                                            *
*                                                                     *
*        PASS A(SSWA) TO OTHER EXITS VIA SSAGSSCM                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
CCAG0000 CSECT
CCAG0000 AMODE 31                                                   @Q2
CCAG0000 RMODE 24                                                   @Q2
         ENTRY CCAG                    ESTABLISH ENTRY POINT      @R92A
         USING *,R15                   SET TEMP BASE              @R92A
         B     CCAG0001                  BRANCH AROUND CSECT ID
         DC    C'CCAG &SYSDATE'
CCAG0001 DS    0H
         STM   R14,R12,12(R13)           SAVE REGISTERS           @R92A
         DROP  R15                                                @R92A
         LR    R12,R15                 LOAD BASE                  @R92A
         USING CCAG0000,R12            DECLARE BASE               @R92A
         LR    R9,R1                     SAVE PTR TO PARM ADDRESS
         LA    R3,CCAGWKL                R3 = LENGTH WKING STORAGE
         GETMAIN RU,LV=(3),SP=230,LOC=ANY   GET WORKING STORAGE     @Q3
         LR    R2,R1                     R2 = A(WORKING STORAGE)
         SLR   R14,R14                   NO SOURCE
         SLR   R15,R15                   NO SOURCE LENGTH
         MVCL  R2,R14                    CLEAR STORAGE TO ZEROS
         ST    R13,4(,R1)                CHAIN THE
         ST    R1,8(,R13)                   SAVE AREAS
         LR    R13,R1                    NEW SAVE AREA
         USING CCAGWK,R13                BASE FOR WORK AREA
         MVC   CCAGID,=C' CCAGWK '       LABEL WORKAREA
         ST    R9,CCAGPRMP               SAVE R1 ENTRY PARM
         SPACE
         USING SSOB,R9                   SSOB ADDRESSIBILITY
         XC    SSOBRETN,SSOBRETN         CLEAR RETURN CODE IN SSOB
         L     R10,SSOBINDV              A(SSAG)
         USING SSAGBGN,R10               SSAG ADDRESSIBILITY
         L     R8,SSAGARBP               A(SSARB)
         USING SSARB,R8                  SSARB ADDRESSIBILITY
         EJECT
*
*        CLEAR REGISTERS FOR LATER USE
*
         SLR   R2,R2                     CLEAR FOR PARM LENGTH
         SLR   R6,R6                     CLEAR RECORD LENGTH
         SLR   R7,R7                     CLEAR MAX RECORD LENGTH
*
*
*        IF DYNAMIC ALLOCATION VALIDATE SUBSYSTEM PARAMETERS,
*           I.E., USE OF CONTINUATION CHARACTER, ABSENCE OF
*           NULL PARAMETERS.
*        IF NOT DYNAMIC ALLOCATION THERE IS NO NEED. THE
*           CONVERTER EXIT HAS ALREADY VALIDATED THEM.
*
*
*
*        SET UP VALIDATION LOOPS
*
         TM    SSAGFLGS,SSAGWAIT         IF OK TO WAIT FLAG ON...
         BO    CCAG0050                  ...BRANCH, NOT DYNALLOC
         L     R1,SSAGSSWA               A(SSWA)
         USING SSWA,R1                   SSWA ADDRESSIBILTY
         SR    R5,R5                     CLEAR REG 5
         ICM   R5,B'0011',SSWAPRNO       GET NUM LEN/PARM PAIRS
         BZ    CCAG0050                  ...NONE - EMPTY DATASET
         LA    R3,1                      INDEX = 1
         LA    R4,1                      INCREMENT = 1
         LA    R1,SSWAPREN               POINT TO PARM PAIRS
         USING SSWAIFLD,R1               ADDRESSIBILITY
         SLR   R2,R2                     CLEAR FOR PARM LENGTH
         SLR   R6,R6                     CLEAR RECORD LENGTH
         SLR   R7,R7                     CLEAR MAX RECORD LENGTH
*
*        IF CONTINUATION CHARACTER - ERROR
*
CCAG0010 DS    0H
         CLC   CONTNU,SSWAIFLD           CONTINUE PARM?
         BE    CCAE0010                  ...YES, ERROR
*
*        LOOK FOR PARM - IF NO MORE THEN EXIT LOOP
*
CCAG0020 DS    0H
         ICM   R2,B'0001',SSWAILEN       GET PARM LENGTH
         BZ    CCAE0020                  ...ERROR IF NULL PARM
         ALR   R6,R2                     ACCUMULATE RECORD LENGTH
         BXH   R3,R4,CCAG0050            EXIT IF NO MORE PARMS
         LA    R1,SSWAIPRM(R2)           POINT TO NEXT PARM
         CLC   CONTNU,SSWAIFLD           CONTINUE PARM?
         BE    CCAG0030                  ...YES, CHECK VALIDITY
         CLR   R6,R7                     CURRENT LONGER THAN MAX ?
         BL    CCAG0025                  ...NO, DON'T SWITCH
         LR    R7,R6                     LOAD NEW MAX LENGTH
CCAG0025 SLR   R6,R6                     CLEAR ACCUMULATOR
         B     CCAG0020                  LOOP FOR NEXT
*
*        FOUND CONTINUE CHAR - CANNOT BE LAST OR FOLLOWED BY ANOTHER
*
CCAG0030 BXH   R3,R4,CCAE0010            ...YES, ERROR IF LAST PARM
         ICM   R2,B'0001',SSWAILEN       GET PARM LENGTH
         LA    R1,SSWAIPRM(R2)           POINT TO NEXT PARM
         B     CCAG0010                  CONTINUE CANNOT BE NEXT
         EJECT
*
*
*
*        FOR ALL ALLOCATIONS:
*
*        PASS A(SSWA) TO SUBSEQUENT EXITS VIA SUBSYSTEM COMMUNICATIONS
*        POINTER IN SSARB.
*
*        IF RECFM NOT SPECIFIED BY USER MODIFY THE JFCB TO REFLECT
*        A DEFAULT OF FIXED.
*
*        SET DEFAULT RECFM TO FIXED, BLOCKED                        @Q3
*        SET DEFAULT LRECL, BLOCKSIZE TO 80                         @Q3
*
*
         USING JFCB,R2                   JFCB ADDRESSIBILITY        @Q3
CCAG0050 DS    0H
         MVC   SSAGSSCM,SSAGSSWA         PASS A(SSWA) VIA SSCM/DSAB
         L     R2,SSAGJFCB               GET A(JFCB) FROM SSARB
         CLI   JFCRECFM,0                RECFM SPECIFIED?           @Q3
         BNE   CCAG00501                 ...YES, DON'T SET DEFAULT  @Q3
         MVI   JFCRECFM,JFCFIX+JFCRFB    ...NO, SET DEFAULT         @Q3
CCAG00501 DS 0H                                                     @Q3
         SLR   R0,R0                     ZIP FOR COMPARE            @Q3
         LA    R1,80                     DEFAULT LRECL, BLKSIZE     @Q3
         CLR   R7,R1                   4 COMPARE DEFAULTS
         BL    CCAG0050X               4 SKIP
         LR    R1,R7                   4 LOAD MAX DEFAULT
CCAG0050X DS   0H
         TM    JFCRECFM,JFCUND           RECFM = U ?                @Q3
         BO    CCAG00503                 .. YES, BR                 @Q3
         TM    JFCRECFM,JFCVAR           RECFM=V ?                  @Q3
         BO    CCAG00502                 .. YES, BR                 @Q3
         OI    JFCRECFM,JFCFIX+JFCRFB    SET DFLT TO FIXED BLOCKED  @Q3
         B     CCAG00503                                            @Q3
         SPACE
CCAG00502 DS   0H                                                   @Q3
         LA    R1,4(,R1)                 VARIABLE, LRECL <- LRECL+4 @Q3
CCAG00503 DS   0H                                                   @Q3
         CH    R0,JFCLRECL               LRECL = 0 ?                @Q3
         BNE   CCAG00504                 .. NO, USE IT              @Q3
         STH   R1,JFCLRECL               .. ELSE SET DEFAULT        @Q3
         SPACE
CCAG00504 DS   0H                                                   @Q3
         CH    R0,JFCBLKSI               BLKSIZE = 0 ?              @Q3
         BNE   CCAG0055                  .. NO, DONE                @Q3
         MVC   JFCBLKSI,JFCLRECL         .. ELSE BLKSI = LRECL      @Q3
         DROP  R2                        DROP JFCB ADDRESSIBILITY
CCAG0055 DS    0H
         ICM   R8,B'1111',SSAGNRBP       ANOTHER SSARB?
         BNZ   CCAG0050                  ...YES, PROCESS IT
         B     CCAGEXIT                  ...NO, EXIT
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*        ERROR PROCESSING                                             *
*                                                                     *
*                                                                     *
*        THE ONLY ERRORS ARE ASSOCIATED WITH DYNAMICALLY              *
*        ALLOCATED DATASETS: NULL PARAMETERS OR INVALID               *
*        USE OF CONTINUATION CHARACTER.                               *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
CCAE0010 DS    0H                        INVALID CONTINUE
         LA    R0,1                      LOAD INFO CODE
         LA    R1,AGEM0010               LOAD WTO LIST ADDRESS
         LA    R2,AGEL0010               LOAD WTO LIST LENGTH
         LA    R3,AGED0010               LOAD OFFSET TO DDNAME
         B     CCAEDMSG                  PUT OUT DYNALLOC ERR MESSAGE
         SPACE
CCAE0020 DS    0H                        NULL PARM
         LA    R0,2                      LOAD INFO CODE
         LA    R1,AGEM0020               LOAD WTO LIST ADDRESS
         LA    R2,AGEL0020               LOAD WTO LIST LENGTH
         LA    R3,AGED0020               LOAD OFFSET TO DDNAME
         SPACE
CCAEDMSG DS    0H
         STH   R0,SSAGRBIC               SET DYNALLOC INFO CODE
         LA    R0,SSAGDDER               INDICATE REQUEST BLOCK ERROR
         ST    R0,SSOBRETN               IN SSOBRETN
         LA    R0,12                     INDICATE PARAMETER ERROR
         STH   R0,SSAGRBEC               SSAG
         BCTR  R2,0                      REDUCE L'LIST FOR EXECUTE
         EX    R2,CCAEMSG1               MOVE MSG LIST TO WORKAREA
         L     R2,SSAGDDNM               GET A(DDNAME)
         LA    R1,CCAGMSG                GET A(MSG WORKAREA)
         AR    R1,R3                     ADD DDNAME OFFSET
         MVC   0(8,R1),0(R2)             MOVE DDNAME TO MSG
         WTO   MF=(E,CCAGMSG)            PUT OUT MSG
         B     CCAGEXIT                  EXIT PGM
CCAEMSG1 MVC   CCAGMSG(00),0(R1)
         SPACE 3
*---------------------------------------------------------------------*
*                                                                     *
*        EXIT - FINAL                                                 *
*                                                                     *
*---------------------------------------------------------------------*
CCAGEXIT DS    0H
         L     R9,CCAGSAVE+4             GET A(CALLER'S SAVE)
         FREEMAIN RU,LV=CCAGWKL,A=(13),SP=230
         SR    R15,R15                   CLEAR AS RETURN CODE
         LR    R13,R9                    CALLER'S SAVE AREA PTR
         L     R14,12(0,R13)             RESTORE RETURN ADDR
         LM    R0,R12,20(R13)            AND THE REST OF CALLERS REGS
         BSM   0,R14                   RETURN IN CORRECT AMODE      @Q2
         EJECT
*---------------------------------------------------------------------*
*        CCAG CSECT DATA AREA                                         *
*---------------------------------------------------------------------*
         SPACE
CONTNU   DC    AL2(CONTREC)
         SPACE
AGEM0010 WTO   'CCSS3901E - INVALID USE OF SUBSYSTEM CONTINUATION CHARA*
               CTER, XXXXXXXX ',ROUTCDE=11,MF=L
AGEL0010 EQU   *-AGEM0010
AGED0010 EQU   4+61
         SPACE 3
AGEM0020 WTO   'CCSS3901E - SUBSYSTEM PARAMETER IMPLIED BUT NOT FOUND, *
               XXXXXXXX ',ROUTCDE=11,MF=L
AGEL0020 EQU   *-AGEM0010
AGED0020 EQU   4+55
         SPACE
         LTORG
*---------------------------------------------------------------------*
*        DSECT FOR GROUP ALLOCATION WORKING STORAGE                   *
*---------------------------------------------------------------------*
         SPACE
CCAGWK   DSECT
CCAGSAVE DS    18F                       REGISTER SAVE AREA
CCAGID   DS    CL8                       WORKAREA LABEL
CCAGPRMP DS    F                         A(CALLER'S PARM)
CCAGMSG  DS    XL255                     WTO WKAREA
CCAGWKL  EQU   *-CCAGWK
     TITLE 'CCDA - OPN/CLS/CKPT/RSTRT'
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*        CCDA0000   CSECT                                             *
*                                                                     *
*        FUNCTIONS:                                                   *
*                                                                     *
*        OPEN       - DA16   KEY = 5                                  *
*        CLOSE      - DA17   KEY = 5                                  *
*        CHECKPOINT - DA18   KEY = 0                                  *
*        RESTART    - DA19   KEY = 0                                  *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
CCDA0000 CSECT
CCDA0000 AMODE 31                                                   @Q2
CCDA0000 RMODE 24                                                   @Q2
         ENTRY CCDA                    ESTABLISH ENTRY POINT      @R92A
         USING *,R15                   SET TEMP BASE              @R92A
         B     CCDA0001                  BRANCH AROUND CSECT ID
         DC    C'CCDA &SYSDATE'
CCDA0001 DS    0H
         STM   R14,R12,12(R13)           SAVE REGISTERS           @R92A
         DROP  R15                                                @R92A
         LR    R12,R15                 LOAD BASE                  @R92A
         USING CCDA0000,R12            DECLARE BASE               @R92A
         LR    R9,R1                     SAVE PTR TO PARM ADDRESS
         GETMAIN RU,LV=WKDAL,SP=230,LOC=ANY  GET WORKING STORAGE    @Q4
         XC    0(WKDAL,R1),0(R1)         CLEAR WORK/SAVE AREA
         ST    R13,4(,R1)                CHAIN THE
         ST    R1,8(,R13)                   SAVE AREAS
         LR    R13,R1                    NEW SAVE AREA
         USING WKDA,R13                  BASE FOR WORK AREA
         MVC   WKDAID,=C'WKDA'           LABEL WORKAREA
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        SET UP REGISTERS AND SELECT FUNCTION                         *
*                                                                     *
*        R7 = A(ACB) FROM DEB                                         *
*        R8 = A(DEB) FROM SSDA                                        *
*        R9 = A(SSOB) PARM                                            *
*        R10 = 0, CLEARED FOR A(SSDS)                                 *
*        R11 = A(SSDA) FROM SSOB                                      *
*                                                                     *
*---------------------------------------------------------------------*
         SLR   R10,R10                   CLEAR FOR A(SSDS)
         USING SSOB,R9                   SSOB ADDRESSIBILITY
         XC    SSOBRETN,SSOBRETN         CLEAR RETURN CODE
         L     R11,SSOBINDV              A(SSDA)
         USING  SSDABGN,R11              SSDA ADDRESSIBILITY
         L     R8,SSDADEBP               A(DEB)
         USING DEBBASIC,R8               DEB ADDRESSIBILITY
         SLR   R7,R7                     CLEAR FOR INSERT
         ICM   R7,B'0111',DEBDCBB        A(ACB)
         USING IFGACB,R7                 ACB ADDRESSIBILITY
         CLC   SSOBFUNC,=AL2(SSOBCLOS)   CLOSE FUNCTION?
         BE    DA170000                  ...YES, BRANCH.
         CLC   SSOBFUNC,=AL2(SSOBCKPT)   CHECKPOINT?
         BE    DA180000                  ...YES, BRANCH.
         CLC   SSOBFUNC,=AL2(SSOBREST)   RESTART?
         BE    DA190000                  ...YES, BRANCH
    TITLE 'CCDA - DA16 -OPEN'
*
*
*        OPEN FUNCTION: CREATE SSDS
*                     : BRANCH ENTERED FROM RESTART
*
*
DA160000 DS    0H
         CLI   ACBID,ACBIDVAL            VALID ACB?
         BNE   DA6E0010                  ...NO, ERROR.
         TM    ACBAMETH,ACBSUBS          SUBSYSTEM ACCESS METHOD?
         BNO   DA6E0010                  ...NO, ERROR.
         TM    ACBMACR1,ACBIN            INPUT?
         BNO   DA6E0010                  ...NO, ERROR
         TM    ACBMACR1,ACBOUT           OUTPUT?
         BO    DA6E0010                  ...YES, ERROR
         TM    ACBMACR1,ACBADR           ADDRESSED...
         BNO   DA6E0010                  ...NO,ERROR
         TM    ACBMACR1,ACBSEQ           SEQUENTIAL ACCESS?
         BNO   DA6E0010                  ...NO,ERROR.
         MODESET EXTKEY=DATAMGT          INSURE KEY 5
         GETMAIN RU,LV=SSDSIOBL,SP=SPSSDS,LOC=BELOW SSDS STORAGE    @Q4
         XC    0(SSDSIOBL,R1),0(R1)      CLEAR IT
         ST    R1,DEBIRBAD               ANCHOR IN DEB
         LR    R10,R1                    A(SSDS) TO R10
         USING SSDSIOB,R10               SSDS ADDRESSIBILITY
         MVC   SSDID,=C'SSDS'            LABEL SSDS
         MVI   SSDSPL,SPSSDS                 SAVE AREA SUBPOOL #    @Q4
         MVC   SSDSPL+1(3),=AL3(SSDSIOBL)    SAVE AREA LENGTH       @Q4
         L     R1,SSDASSCM               GET A(SSWA)
         USING SSWA,R1                   SSWA ADDRESSIBILTY
         SR    R5,R5                     CLEAR REG 5
         ICM   R5,B'0011',SSWAPRNO       GET NUM LEN/PARM PAIRS
         BZ    DA160050                  ...NONE - EMPTY DATASET
         ST    R5,SSDTRECP               ...EQUALS TOTAL PHYC'L REC'DS
         LA    R1,SSWAPREN               GET A(FIRST PAIR)
         ST    R1,SSDBGNA                ...EQUALS START OF DATASET
         USING SSWAIFLD,R1               LEN/PARM PAIR ADDRESSIBILITY
         SR    R0,R0                     CLEAR REG 0 A(LOGC'L RECORD)
         SR    R2,R2                     CLEAR REG 2 FOR DATA LENGTH
         LA    R3,1                      INDEX = 1
         LA    R4,1                      INCREMENT = 1
*
*        LOCATE THE FIRST LOGICAL RECORD
*
DA160010 DS    0H
         ICM   R2,B'0001',SSWAILEN       GET DATA LENGTH
         CLC   CONTINUE,SSWAIFLD         CONTINUATION 'RECORD'?
         BNE   DA160015                  ...NO, FOUND 1ST RECORD
         LA    R1,SSWAIPRM(R2)           POINT TO NEXT PHYSICAL REC'D
         BXH   R3,R4,DA160040            BRANCH IF PHYSICAL EOD
         B     DA160010                  EXAMINE NEXT PHYSICAL RECORD
DA160015 DS    0H
         ST    R1,SSDLRAD                SAVE: A(1ST LOGICAL RECORD)
         SLR   R6,R6                     CLEAR LOGIC'L REC'D COUNT
*
*        FOUND A LOGICAL RECORD:  LOOK FOR NEXT ONE
*
DA160020 DS    0H
         AH    R6,=H'1'                  ADD ONE TO LOGICAL REC'D COUNT
         LR    R0,R1                     R0 = START OF LOGICAL RECORD
DA160025 DS    0H
         LA    R1,SSWAIPRM(R2)           POINT TO NEXT PHYSICAL REC'D
         BXH   R3,R4,DA160040            EXIT IF PHYSICAL EOD
         ICM   R2,B'0001',SSWAILEN       GET DATA LENGTH
         CLC   CONTINUE,SSWAIFLD         CONTINUATION 'RECORD'?
         BNE   DA160020                  ...NO, FOUND LOGICAL REC'D
*
*        FOUND CONTINUATION RECORD: LOOK FOR RECORD SEGMENT
*
DA160030 DS    0H
         LA    R1,SSWAIPRM(R2)           POINT TO NEXT PHYSICAL REC'D
         BXH   R3,R4,DA160040            EXIT IF PHYSICAL EOD
         ICM   R2,B'0001',SSWAILEN       GET DATA LENGTH
         CLC   CONTINUE,SSWAIFLD         CONTINUATION 'RECORD'?
         BNE   DA160025                  ...FOUND A SEGMENT
         B     DA160030                  ...YES, SKIP IT.
*
*        PHYSICAL END OF DATA
*
DA160040 DS    0H
         ST    R1,SSDPEOD                SAVE: PHYSICAL END OF DATA
         ST    R6,SSDTRECL             SAVE: TOTAL LOGICAL RECORDS  @Q1
         ST    R0,SSDHRAD                SAVE: HIGH RECORD ADDRESS
         S     R0,SSDBGNA                SUBTRACT START OF DATASET
         BNP   DA160050                  (NOTHING BUT CONTINUE REC'DS)
         ST    R0,SSDHRRBA               SAVE: HIGH RECORD RBA
         SPACE
DA160050 DS    0H
         L     R1,SSDAJFCB               GET A(JFCB)
         USING JFCB,R1                   JFCB ADDRESIBILTY
         MVC   SSDRECFM,JFCRECFM         RECFM TO SSDS
         DROP  R1
         CLC   SSOBFUNC,=AL2(SSOBREST)   RESTART?
         BE    DA190001                  ...YES, RETURN.
         L     R0,INRTNADR               GET A(I/O ROUTINES)
         ST    R0,ACBINRTN               ANCHOR
         XC    ACBJWA,ACBJWA             CLEAR ACB CURNT RECORD POINTER
         B     DA16RTN0                  EXIT
         TITLE 'CCDA - DA17 - CLOSE'
*
*
*        CLOSE FUNCTION: FREE SSDS
*
*
DA170000 DS    0H
         ICM   R10,B'0111',DEBIRBB       GET SSDS ADDRESS FROM DEB
         CLC   SSDID,=C'SSDS'            VALID SSDS?
         BNE   DA6E0010                  ...NO, ERROR.
FREESSDS FREEMAIN RU,A=(10),LV=SSDSIOBL,SP=SPSSDS   FREE SSDS       @Q4
         XC    DEBIRBB,DEBIRBB           CLEAR A(SSDS) IN DEB
         MODESET EXTKEY=ZERO             FETCH PROTECTED ACB
         CLI   ACBID,ACBIDVAL            VALID ACB?
         BNE   DA7E0010                  ...NO, ERROR.
         XC    ACBINRTN,ACBINRTN         CLEAR A(I/O ROUTINE) IN ACB
         XC    ACBJWA,ACBJWA             CLEAR RECORD POINTER
         MODESET EXTKEY=DATAMGT          RETURN TO KEY 5
         B     DA17RTN0                  EXIT
         TITLE 'CCDA - DA18 - CHECKPOINT'
*
*
*        CHECKPOINT: RECORD THE NUMBER OF LAST LOGICAL RECORD
*                    RETRIEVED
*
*
DA180000 DS    0H
         ICM   R10,B'0111',DEBIRBB       GET A(SSDS)
         CLC   SSDID,=C'SSDS'            VALID SSDS?
         BNE   DA6E0010                  ...NO, ERROR.
         L     R4,SSDABUFR               A(SSCR DATA AREA) FROM SSOB
         XC    0(16,R4),0(R4)            CLEAR 16 BYTES
         OC    ACBJWA,ACBJWA             A(CURRENT RECORD)
         BZ    DA18RTN0                  IF ZERO...EXIT
         SLR   R0,R0                     INITIALIZE COUNT
         SLR   R1,R1                     CLEAR FOR LENGTH
         ICM   R2,B'1111',SSDLRAD        POINT TO FIRST LOGICAL RECORD
         BZ    DA6E0010                  ...NONE, ERROR
         USING SSWAIFLD,R2               SSWA ADDRESSIBILTY
DA180010 DS    0H
         AH    R0,=H'1'                  COUNT RECORD
         CL    R0,SSDTRECL               COMPARE: TOTAL LOGC'L REC'DS
         BH    DA6E0010                  ...COUNT HIGH, ERROR
         CL    R2,ACBJWA                 EQUAL CURRENT REC ADDRESS?
         BE    DA180030                  ...YES, FOUND IT
         BH    DA6E0010                  ...HIGH, ERROR
DA180015 DS    0H
         ICM   R1,B'0001',SSWAILEN       GET RECORD LENGTH
         LA    R2,SSWAIPRM(R1)           POINT TO NEXT PHYSICAL RECORD
         CL    R2,SSDHRAD                COMPARE: HIGH RECORD ADDRESS
         BH    DA6E0010                  ...HIGHER: ERROR
         CLC   CONTINUE,SSWAIFLD         CONCATENATION 'RECORD'?
         BNE   DA180010                  ...NO, FOUND NEXT LOGC'L REC'D
         SPACE
DA180020 DS    0H                        ...YES, LOOK FOR SEGMENT
         ICM   R1,B'0001',SSWAILEN       GET RECORD LENGTH
         LA    R2,SSWAIPRM(R1)           POINT TO NEXT PHYSICAL RECORD
         CL    R2,SSDHRAD                COMPARE: HIGH RECORD ADDRESS
         BH    DA6E0010                  ...HIGHER: ERROR
         CLC   CONTINUE,SSWAIFLD         CONCATENATION 'RECORD'?
         BNE   DA180015                  ...NO, FOUND SEGMENT.
         B     DA180020                  ...YES, TRY AGAIN
DA180030 DS    0H
         ST    R0,0(0,R4)                CHECKPOINT RECORD NUMBER
         B     DA18RTN0                  RETURN
         TITLE 'CCDA - DA19 - RESTART'
*
*
*        RESTART: RE-BUILD SSDS
*               : RE-ESTABLISH PTR TO LAST RECORD READ
*
*
DA190000 DS    0H
         B     DA160000                  EXECUTE OPEN ROUTINE
DA190001 DS    0H                        OPEN RETURNS HERE ON RESTART
         MODESET EXTKEY=ZERO             BACK TO RESTART KEY
         L     R0,INRTNADR               GET A(I/O ROUTINES)
         ST    R0,ACBINRTN               ANCHOR
         XC    ACBJWA,ACBJWA             CLEAR ACB CURNT RECORD POINTER
         SLR   R1,R1                     CLEAR REG 1 FOR DATA LENGTH
         L     R4,SSDABUFR               A(SSCR DATA AREA) FROM SSOB
         ICM   R2,B'1111',SSDLRAD        A(FIRST LOGICAL RECORD)
         BNP   DA19RTN0                  IF ZERO...RETURN (NXT=EOD)
         OC    0(4,R4),0(R4)             TST CHECKPOINTED RECORD NUMBER
         BZ    DA19RTN0                  IF ZERO...RETURN (NXT=FIRST)
         SLR   R0,R0                     CLEAR REG. 0
         USING SSWAIFLD,R2               RECORD ADDRESSIBILITY
DA190010 DS    0H                        GOT A LOGICAL RECORD
         AH    R0,=H'1'                  COUNT IT
         C     R0,0(,R4)                 COMPARE COUNT TO CHECKPOINT
         BE    DA190030                  ...EQUAL, FOUND RECORD
         CL    R2,SSDHRAD                COMPARE: HIGH RECORD ADDRESS
         BE    DA190030                  ...EQUAL, EXIT LOOP (NXT=EOD)
DA190015 DS    0H
         ICM   R1,B'0001',SSWAILEN       GET RECORD LENGTH
         LA    R2,SSWAIPRM(R1)           POINT TO NEXT RECORD
         CLC   CONTINUE,SSWAIFLD         CONTINUATION RECORD?
         BNE   DA190010                  ...NO, FOUND LOGICAL RECORD
DA190020 DS    0H
         ICM   R1,B'0001',SSWAILEN       GET RECORD LENGTH
         LA    R2,SSWAIPRM(R1)           POINT TO NEXT RECORD
         CLC   CONTINUE,SSWAIFLD         CONTINUATION RECORD?
         BNE   DA190015                  ...NO, FOUND SEGMENT
         B     DA190020                  ...YES TRY AGAIN
DA190030 DS    0H
         ST    R2,ACBJWA                 SAVE A(LAST RECORD READ)
         B     DA19RTN0                  RETURN
         DROP R2
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*        CCDA EXITS                                                   *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
*        ERRORS                                                       *
*                                                                     *
*---------------------------------------------------------------------*
DA7E0010 DS    0H
         MODESET EXTKEY=DATAMGT          RETURN TO DATA MANAGEMENT KEY
DA6E0010 DS    0H
         LA    R0,SSDMFAIL
         ST    R0,SSOBRETN               SET ERROR FLAG IN SSOB
         SPACE 3
*---------------------------------------------------------------------*
*                                                                     *
*        NORMAL                                                       *
*                                                                     *
*---------------------------------------------------------------------*
DA16RTN0 DS    0H
DA17RTN0 DS    0H
DA18RTN0 DS    0H
DA19RTN0 DS    0H
CCDARTN0 DS    0H
         L     R9,WKDASAVE+4             GET A(CALLER'S SAVE)
         FREEMAIN RU,LV=WKDAL,A=(13),SP=230
         SR    R15,R15                   CLEAR AS RETURN CODE
         LR    R13,R9                    CALLER'S SAVE AREA PTR
         L     R14,12(0,R13)             RESTORE RETURN ADDR
         LM    R0,R12,20(R13)            AND THE REST OF CALLERS REGS
         BSM   0,R14                   RETURN IN CORRECT AMODE      @Q2
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*        CCDA CSECT CONSTANTS                                         *
*                                                                     *
*---------------------------------------------------------------------*
INRTNADR DC    A(X'80000000'+SSIO0000)
CONTINUE DC    AL2(CONTREC)
         LTORG
         SPACE 5
*---------------------------------------------------------------------*
*                                                                     *
*        DSECT FOR CCDA WORKAREA                                      *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
WKDA     DSECT
WKDASAVE DS    18F                       REGISTER SAVE AREA
WKDAID   DS    CL4                       WORKAREA LABEL
         DS    F
WKDAL    EQU   *-WKDA
         TITLE 'SSIO - SUBSYSTEM I/O'
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*        I/O ROUTINES                                                 *
*                                                                     *
*                                                                     *
*        OPEN POINTS ACB TO THESE ROUTINES                            *
*                                                                     *
*                                                                     *
*        SUPPORTED FUNCTIONS: GET                                     *
*                                                                     *
*                                                                     *
*        NOTE: THE 'CORRECT' SYNTAX OF THE CONTINUATION CHARACTER     *
*        IS ENFORCED BY EITHER THE CONVERTER OR ALLOCATION ROUTINE.   *
*        AS FAR AS THIS CSECT IS CONCERNED  THERE ARE NO RULES:       *
*        A PLUS SIGN MAY OCCUR AS THE FIRST OR LAST PARAMETER,        *
*        A PLUS SIGN MAY BE FOLLOWED BY ANOTHER.                      *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
SSIO0000 CSECT
SSIO0000 AMODE 31                                                   @Q2
SSIO0000 RMODE 24                                                   @Q2
         ENTRY INRTNADR               ESTABLISH ENTRY POINT       @R92A
         USING *,R15                  SET TEMP BASE               @R92A
         B     SSIO0001                 BRANCH AROUND CSECT ID
         DC    C'SSIO &SYSDATE'
SSIO0001 DS    0H
         STM   R14,R12,12(R13)          SAVE REGISTERS            @R92A
         DROP  R15                                                @R92A
         LR    R12,R15                LOAD BASE                   @R92A
         USING SSIO0000,R12           DECLARE BASE                @R92A
         CLM   R0,B'0001',=AL1(RPLGET)  TEST FUCTION CODE
         BH    SSIE0100                 UNSUPPORTED FUNCTION
         LTR   R6,R1                    RPL ADDRESS?
         BNP   SSIE0010                 NO RPL ADDRESS
         USING IFGRPL,R6                RPL ADDRESSIBILITY
         CLI   RPLID,RPLIDD             VALID RPL?
         BNE   SSIE0010                 INVALID RPL
         STC   R0,RPLREQ                SAVE FUNCTION IN RPL
         ICM   R7,B'1111',RPLDACB       GET A (ACB)
         BZ    SSIE0011                 NO ACB IN RPL
         USING IFGACB,R7                ACB ADDRESSIBILITY
         CLI   ACBID,ACBIDVAL           VALID ACB?
         BNE   SSIE0022                 INVALID ACB
         SLR   R8,R8                    CLEAR FOR INSERT
         ICM   R8,B'0111',ACBDEB        GET A(DEB)
         USING DEBBASIC,R8              DEB ADDRESSIBILITY
         SLR   R10,R10
         ICM   R10,B'0111',DEBIRBB      GET A(SSDS)
         BZ    SSIE0021                 NO SSDSIOB
         USING SSDSIOB,R10              SSDS ADDRESSIBILTY
         CLC   SSDID,=C'SSDS'           VALID SSDS?
         BNE   SSIE0030                 INVALID SSDSIOB
*
*        R6 = A(RPL)     R8 = A(DEB)       R12 = BASE
*        R7 = A(ACB)     R10 = A(SSDSIOB)  R13 = USER'S SAVE AREA
*
         LR    R15,R0                   FUNCTION TO REG 15
         SLL   R15,2                    MULTIPLY BY 4
         B     SSIO0100(R15)            SELECT CORRECT ROUTINE
SSIO0100 DS    0H
         B     SSIOGET                  GET
         B     SSIOPUT                  PUT
         B     SSIOCHK                  CHECK
         B     SSIOPNT                  POINT
         B     SSIOENDR                 ENDREQ
         B     SSIOERAS                 ERASE
SSIOPUT  DS    0H
SSIOCHK  DS    0H
SSIOPNT  DS    0H
SSIOENDR DS    0H
SSIOERAS DS    0H
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*        GET NEXT RECORD FROM SUBSYSTEM DATASET USING                 *
*        POINTER TO 'CURRENT' OR LAST RECORD READ STORED              *
*        IN THE ACB                                                   *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
SSIOGET  DS    0H
         SR    R1,R1                    CLEAR FOR LENGTH
         L     R5,ACBJWA                GET ACB A(CURRENT RECORD)
         CL    R5,SSDHRAD               COMPARE: HIGH RECORD ADDRESS
         BE    SSIE0400                 ...EQUAL: END OF DATA
         BH    SSIE0020                 ...HIGHER: ERROR
*
*        POINT TO NEXT RECORD
*
         LTR   R5,R5                    TEST A(CURRENT RECORD)
         BNZ   SSGT0010                 IF ZERO...
         L     R5,SSDLRAD               ...POINT TO 1ST LOGICAL RECORD,
         B     SSGT0020                    IT IS THE NEXT RECORD
         SPACE
SSGT0010 DS    0H                       LOCATE START OF NEXT RECORD
         CL    R5,SSDLRAD               COMPARE: START OF DATASET
         BL    SSIE0020                 ...LOWER: ERROR.
         USING SSWAIFLD,R5              SSWA ADDRESSIBILTY
SSGT0011 DS    0H
         ICM   R1,B'0001',SSWAILEN      GET RECORD LENGTH
         LA    R5,SSWAIPRM(R1)          POINT TO NEXT RECORD
         CL    R5,SSDHRAD               COMPARE: HIGH RECORD ADDRESS
         BH    SSIE0020                 ...HIGHER: ERROR
         CLC   CONCAT,SSWAIFLD          CONCATENATION 'RECORD'?
         BNE   SSGT0020                 ...NO, FOUND NEXT RECORD
         SPACE
SSGT0012 DS    0H                       ...YES, LOOK FOR SEGMENT
         ICM   R1,B'0001',SSWAILEN      GET RECORD LENGTH
         LA    R5,SSWAIPRM(R1)          POINT TO NEXT PHYSICAL RECORD
         CL    R5,SSDHRAD               COMPARE: HIGH RECORD ADDRESS
         BH    SSIE0020                 ...HIGHER: ERROR
         CLC   CONCAT,SSWAIFLD          CONCATENATION 'RECORD'?
         BNE   SSGT0011                 ...NO, FOUND SEGMENT.
         B     SSGT0012                 ...YES, TRY AGAIN
*
*        MOVE NEXT RECORD TO BUFFER SEGMENT BY SEGMENT
*
SSGT0020 DS    0H
         LR    R2,R5                    R2 = A(NEXT RECORD)
         SL    R2,SSDBGNA               CALCULATE: R2 = RBA
         ST    R2,RPLDDDD               UPDATE RPL RBA
         ST    R5,ACBJWA                UPDATE ACB RECORD POINTER
         SLR   R2,R2                    R2 = ZERO = TOTAL REC'D LEN
SSGT0021 DS    0H
         L     R3,RPLAREA               R3 = A(BUFFER)
         L     R4,RPLBUFL               R4 = BUF LENGTH
         AR    R3,R2                    POINT BEYOND DATA IN BUFFER
         SR    R4,R2                    CALC BYTES REMAINING IN BUFFER
         LA    R0,SSWAIPRM              R0 = DATA START
         ICM   R1,B'0001',SSWAILEN      R1 = DATA LENGTH
         LR    R14,R3                   R14 = BUFFER START
         LR    R15,R4                   R15 = BUFFER LENGTH
         AR    R2,R1                    CALCULATE TOTAL LRECL
         LTR   R15,R15                  IF BUFL LT LRECL...
         BNP   SSGT0023                 ...SKIP DATA MOVEMENT
         ICM   R1,B'1000',=X'40'        MOVE DATA TO BUFFER, LEFT-
         MVCL  R14,R0                   JUSTIFIED, PADDED WITH BLANKS.
SSGT0023 DS    0H
         SR    R0,R0                    CLEAR FOR RETURN CODE
         SLR   R1,R1                  CLEAR FOR INSERT              @Q2
         ICM   R1,B'0001',SSWAILEN      GET RECORD LENGTH
         LA    R5,SSWAIPRM(R1)          POINT TO NEXT RECORD
         CL    R5,SSDPEOD               COMPARE: PHYSICAL EOD
         BE    SSGT0030                 EQUAL...FINISHED
         BH    SSIE0020                 HIGHER...ERROR
         CLC   CONCAT,SSWAIFLD          CONCATENATION RECORD?
         BNE   SSGT0030                 ...NO, FINISHED MOVE
SSGT0025 DS    0H
         ICM   R1,B'0001',SSWAILEN      GET RECORD LENGTH
         LA    R5,SSWAIPRM(R1)          POINT TO NEXT RECORD
         CL    R5,SSDPEOD               COMPARE: PHYSICAL EOD
         BE    SSGT0030                 EQUAL...FINISHED
         BH    SSIE0020                 HIGHER...ERROR
         CLC   CONCAT,SSWAIFLD          CONCATENATION RECORD?
         BNE   SSGT0021                 ...NO, MOVE NEXT SEGMENT
         B     SSGT0025                 ...YES, LOOK FOR SEGMENT
*
*        ALL SEGMENTS IN BUFFER
*
SSGT0030 DS    0H
         ST    R2,RPLRLEN               UPDATE RPL RECORD LENGTH
         C     R2,RPLBUFL               COMPARE: LRECL AND BUFL...
         BH    SSIE0300                 ...LRECL HIGHER, ERROR
         TM    SSDRECFM,JFCFIX
         BNO   SSIOEXIT                 IF FIXED RECFM...
         TM    SSDRECFM,JFCVAR          ...MAKE RECORD SIZE
         BNZ   SSIOEXIT                    EQUAL BUFFER LENGTH
         MVC   RPLRLEN,RPLBUFL          THEN
         B     SSIOEXIT                 ...RETURN
         DROP  R5
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*        CONTROL BLOCK ERRORS - ABEND SYSTEM X'1FA'                   *
*                                                                     *
*                                                                     *
*        LEAVE TRACE ADDRESS IN REG 2 TO TESTING/DEBUGGING            *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
SSIE0010 DS    0H                       INVALID RPL
         LA    R2,SSIE0010
         B     SSIE@1FA
SSIE0011 DS    0H                       INVALID RPL POINTER TO ACB
         LA    R2,SSIE0011
         B     SSIE@1FA
SSIE0020 DS    0H
         LA    R2,SSIE0020              INVALID ACB PTR TO LAST RECORD
         B     SSIE@1FA
SSIE0021 DS    0H
         LA    R2,SSIE0021              INVALID ACB POINTER TO SSDSIOB
         B     SSIE@1FA
SSIE0022 DS    0H
         LA    R2,SSIE0030              ACB VALIDITY CHECK FAILURE
         B     SSIE@1FA
SSIE0030 DS    0H
         LA    R2,SSIE0030              SSDSIOB VALIDITY CHECK FAILURE
         B     SSIE@1FA
SSIE@1FA DS    0H
         ABEND X'1FA',DUMP,,SYSTEM  CONTROL BLOCK ERROR
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*        LOGICAL ERRORS - SET RPL FDBK AND LOGICAL ERR RETURN CODE    *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
SSIE0100 DS    0H                       UNSUPPORTED FUNCTION
         LA    R0,RPLINACC
         B     SSIE0LGC
SSIE0300 DS    0H                       BUFFER TOO SMALL
         LA    R0,RPLINBUF
         B     SSIE0LGC
SSIE0400 DS    0H                       END OF DATA
         LA    R0,RPLEODER
         B     SSIE0LGC
SSIE0LGC DS    0H
         AL    R0,=A(RPLLOGER*65536)
         B     SSIOEXIT
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*        EXIT - FINAL                                                 *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
SSIOEXIT DS    0H
         STCM  R0,7,RPLFDBK             SET FEEDBACK IN RPL
         MVI   RPLCMPON,C'S'            SET COMPONENT ID
         SRL   R0,16                    SET RETURN CODE
         ST    R0,16(,13)               SAVE IN USER'S REG 15
         LA    R1,RPLECB                A(ECB)- INTERNAL
         TM    RPLOPT1,RPLECBSW         INTERNAL OR EXTERNAL ECB?
         BZ    *+8                      SKIP IF INTERNAL
         L     R1,RPLECB                A(ECB) - EXTERNAL
         MVI   0(R1),X'40'              QUICK POST
         LM    R14,R12,12(R13)          RESTORE CALLER'S REGISTERS
         BSM   0,R14                  RETURN IN CORRECT AMODE       @Q2
         SPACE 5
*---------------------------------------------------------------------*
*                                                                     *
*        SSIO CSECT CONSTANTS                                         *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
CONCAT   DC    AL2(CONTREC)
         LTORG
         END
