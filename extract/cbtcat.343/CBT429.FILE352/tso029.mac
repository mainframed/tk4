*          DATA SET TSO029     AT LEVEL 001 AS OF 03/31/86
*          DATA SET TSO029     AT LEVEL 003 AS OF 04/10/83
TSO029  TITLE 'D A S D M A P   ---   D A S D   V T O C   M A P P I N G'
          PRINT  OFF      MACROS BE HERE
         MACRO , JVDENTER - V1M00 - 01/28/74
&LABEL   JVDENTER                                                      +
               &BASE=(11),                                             +
               &REGS=(14,12),                                          +
               &ID=,                                                   +
               &VERSION=,                                              +
               &DSA=72,                                                +
               &ORIGIN=*,                                              +
               &CFL=YES
.*
         LCLC  &EPID,&BASR,&START
.*
.BEGIN   AIF   ('&LABEL' EQ '').IDT
.*
         SPACE
&LABEL   DS    0H
         ENTRY &LABEL
         SPACE
.*
.IDT     AIF   (T'&ID EQ 'O').IDD
&EPID    SETC  '&ID'
         AGO   .VER
.IDD     AIF   ('&LABEL' EQ '').IDC
&EPID    SETC  '&LABEL'
         AGO   .VER
.IDC     ANOP
&EPID    SETC  '&SYSECT'
.VER     AIF   (T'&VERSION EQ 'O').GEN
&EPID    SETC  '&EPID-&VERSION-&SYSDATE-&SYSTIME'
         MNOTE *,'       &EPID'
.*
.GEN     ANOP
&BASR    SETC  '&BASE(1)'
.*
&START   SETC  '&ORIGIN'
         AIF   ('&ORIGIN' NE '@').START
&START   SETC  '&SYSECT'
.START   AIF   ('&ORIGIN' EQ '*').HERE
.*
         USING &START,&BASR
         SAVE  &REGS,,&EPID
         BALR  &BASR,0
         LA    14,*-&ORIGIN
         SLR   &BASR,14
         LR    2,13
         SPACE
.*
         AGO   .GETDSA
.HERE    ANOP
.*
         USING &START,&BASR
         SAVE  &REGS,,&EPID
         LR    &BASR,15
         LR    2,13
         SPACE
.*
.GETDSA  AIF   ('&DSA' EQ '0').NOCFL
.*
         LA    3,&DSA
         GETMAIN R,LV=(3)
         ST    3,0(1)
         ST    13,4(1)
         LR    13,1
.*
         AIF   ('&CFL' EQ 'NO').NOCFL
.*
         ST    1,8(2)
.*
.NOCFL   ANOP
.*
         LM    14,04,12(2)
         SPACE
.*
         MEND
         MACRO , JVDLEAVE - V1M00 - 01/28/74
&LABEL   JVDLEAVE                                                      +
               &REGS=(14,12),                                          +
               &RC=,                                                   +
               &DSA=
.*
         LCLC  &L
.*
         AIF   ('&DSA' EQ '0').NODSA
.*
&LABEL   LH    0,2(13)
         LR    1,13
         L     13,4(13)
.*
         AIF   ('&RC' NE '(15)').FREE
.*
         LR    2,15
.*
.FREE    ANOP
.*
         FREEMAIN R,LV=(0),A=(1)
.*
.RCCHK   AIF   ('&RC' EQ '').NORC
         AIF   ('&RC' NE '(15)').RTRN
.*
         LR    15,2
.*
         AGO   .RTRNN
.RTRN    AIF   ('&RC'(1,1) NE '(').RTRNC
.*
         LR    15,&RC(1)
.*
.RTRNN   ANOP
.*
&L       RETURN &REGS,RC=(15)
         SPACE
.*
         MEXIT
.RTRNC   ANOP
.*
&L       RETURN &REGS,RC=&RC
         SPACE
.*
         MEXIT
.NORC    ANOP
.*
&L       RETURN &REGS
         SPACE
.*
         MEXIT
.NODSA   ANOP
&L       SETC  '&LABEL'
         AGO   .RCCHK
.*
         MEND
         MACRO
&L       MSG   &MSG,&O
.*
         LCLA  &N,&F
.*
&N       SETA  K'&MSG-2
         AIF   (T'&O EQ 'O').GEN
&F       SETA  &O
.GEN     ANOP
.*
&L       DS    0A
         DC    Y(&N+4,&F)
         DC    C&MSG
         SPACE
.*
         MEND
         MACRO
&L       JVDEQU &O
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
.*
         MEND
          PRINT  ON
*---------------------------------------------------------------------*
*                                                                     *
*   DASDMAP IS A TSO COMMAND PROCESSOR WHICH MAPS THE VTOC OF DES-    *
*      IGNATED DASD VOLUMES, WITH EXTENTS SORTED, FOR DISPLAY PUR-    *
*      POSES IN EXTENT SEQUENCE, DSNAME SEQUENCE, OR AN ARBITRARY     *
*      SEQUENCE DETERMINED BY A SPECIFIED USER EXIT.                  *
*                                                                     *
*   DASDMAP IS INVOKED AS FOLLOWS :                                   *
*                                                                     *
*      DASDMAP  /  DMAP                                               *
*               'VOLID'                                               *
*               EXTENT  /  DSNAME  /  NONE  /  USER('DSN'('EPN'))     *
*                                                                     *
* MOD 2 - AVON DAVIES INTEL CORP - 31MAR86                        INTEL
*    REFITTED FOR MVS/XA, ADDED CALL TO 'IOSVSUCB' FOR UCB LOOKUP INTEL
* MOD 1 - KEN TRUE - INTEL CORP - 9 APR 83                        INTEL
*    ADDED INDEXED VTOC HANDLING ROUTINES BASED ON CODE FROM      INTEL
*    CBT TAPE VER199 FILE 149 (LISTSPC) AND (IXTOFMT5)            INTEL
*                                                                 INTEL
*---------------------------------------------------------------------*
         SPACE 2
DASDMAP  CSECT
         SPACE
         USING DASDMAP,R12
         USING DSAWRK,R11
         USING DXLE,R10
         USING UPT,R3
         USING PSCB,R4
         USING ECT,R5
         USING PDL,R2
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*   PERFORM STANDARD REENTRANT PROLOGUE - GET WORK AREA AND SET UP    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
         JVDENTER BASE=(R12),DSA=(DSAEND-DSAWRK),VERSION=&SYSPARM
         SPACE 1
         LR    R11,R13
         LM    R2,R5,0(R1)
         L     R6,PCLA
         XC    ECB,ECB
         XC    IOSSAVE,IOSSAVE            CLEAR IOSVSUCB SAVE AREA
         LA    R0,IOSWORK                 INITIALIZE IOSVSUCB WORK AREA
         ST    R0,WADR                        AND POINT TO IT
         STM   R0,R15,UWA
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*   PARSE PARAMETERS, GET PDL ADDRESS, AND INITIALIZE FOR VOL LOOP    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
         SPLEVEL SET=2
         LINK  EP=IKJPARS,DCB=0,SF=(E,LINK),                           +
               VL=1,MF=(E,PPL),                                        +
               PARAM=(UPT,ECT,ECB,(6),ANS,(2),UWA)
         SPLEVEL SET=1
         SPACE
         ST    R15,PARC                       SAVE PARSE RETURN CODE.
         LTR   R15,R15                        IF NOT ZERO,
         BNZ   PARSFAIL                          GO TO PARSE FAILURE.
         L     R2,ANS                         GET ADDRESS OF PDL AND
         CL    R2,NULL                           IF NULL,
         BE    PARSFAIL                          PROCESS PARSE FAILURE.
         LH    R15,ORDER                      DETERMINE DISPLAY ORDER
         SLA   R15,2                             * 4 AND
         L     R14,CMPRRTNS-4(R15)               GET COMPARER ADDR.
         L     R15,CMPRMSGS-4(R15)               GET CMPR MSG ADDR.
         ST    R15,CMPRMSG                       SAVE.
         LTR   R14,R14                        IF USER-SUPPLIED, PROCEED
         BZ    OBTAINF4                       ELSE,
         ST    R14,CMPRTN                        PLACE IN POINTER.
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*    LOOK UP UCB ADDRESSES, GET UCB INFORMATION, AND OBTAIN DSCB'S    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
OBTAINF4 EQU   *                              TO BEGIN PROCESSING :
         SPACE
         XC    DXLPTR,DXLPTR                  CLEAR DXL ANCHOR.
         MVC   CAMLST,CAMSRCH                 INITIALIZE CAMLST.
         LA    R15,F4DSN                      CAMLST DSN FROM
         ST    R15,CAMDSN                        F4 DSN 44X'04'
         LA    R15,VOLSER                     CAMLST SER FROM
         ST    R15,CAMSER                        SELECTED VOLUME.
         LA    R15,OBTWKA                     CAMLST WKA FROM
         ST    R15,CAMWKA                        DSCB WORK AREA.
         XR    R0,R0                          CLEAR UCB ADDRESS.
         SPACE
         OBTAIN CAMLST                        OBTAIN F4 DSCB.
         SPACE
F4DSCB   BAL   R6,GETDXLE                     GET A DXLE.
         MVC   DXLEDSN,F4DSN                  INSERT F4 DSN.
******************************************************************INTEL
         MVC   F4VTOCI,DS4VTOCI               SAVE VTOC TYPE IND. INTEL
         BAL   R6,IXINIT                      SET UP IXPARM       INTEL
******************************************************************INTEL
         OI    DXLEFLG,DXLEFVT                SET VTOC FLAG.
         LA    R1,DS4VTOCE                    POINT TO VTOC EXTENT.
         BAL   R6,FILLDXLE                    FILL IN DXLE.
         BAL   R6,LOCDXLE                     LOCATE ON DXL.
         MVC   VTOCADDR,EXTLOCC-EXTENT+DS4VTOCE    START VTOC
         MVC   VTOCEND,DS4HPCHR                    SEEK LIMITS.
         MVC   DSCBPTRK,DS4DEVDT              SAVE DSCBS PER TRACK.
         MVI   VTOCADR,2                      START VTOC AT FIRST F5.
         BAL   R6,GETDXLE                     GET A DXLE.
         OI    DXLEFLG,DXLEFALT               SET ALT FLAG.
         MVC   DXLEDSN,FOXES                  SET HIGH DSNAME.
         MVC   DXLEXLO,DS4HCCHH               SET EXTENT FROM F4.
         MVC   DXLELNTT,DS4NOATK              AND NUMBER OF ALTERNATES.
         BAL   R6,LOCDXLE                     LOCATE ON DXL.
         SPACE
         MVC   NEXTF5,VTOCADDR                POINT TO FIRST F5.
         B     OBTAINF5                       OBTAIN F5 DSCB.
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*   SCAN THE VTOC (OBTAINING BY SEEK), AND, FOR EACH FORMAT 1 DSCB:   *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
OBTAINFX EQU   *                              USING CURRENT SEEK ADDR :
         SPACE 1
         MVC   CAMLST,CAMSEEK                 INITIALIZE CAMLST WITH
         LA    R15,VTOCADDR                      SEEK
         ST    R15,CAMDSN                           ADDRESS,
         LA    R15,VOLSER                        VOLUME
         ST    R15,CAMSER                          ID<
         LA    R15,OBTWKA                        WORK
         ST    R15,CAMWKA                          AREA,
         XR    R0,R0                          CLEAR UCB POINTER.
         SPACE
         OBTAIN CAMLST                        OBTAIN DSCB.
         SPACE
         CLI   DS1FMTID,C'1'                  FORMAT 1 ?
         BNE   VTOCBUMP                       NO.  SKIP.  ELSE
         SPACE
F1DSCB   CLI   DS1NOEPV,3                     MORE THAN THREE EXTENTS ?
         BNH   FMTDXLE                        NO.  FORMAT DXLE(S).
         LA    R15,DS1PTRDS                   POINT TO F2/F3 ADDR.
         SPACE
OBTAINF3 ST    R15,CAMDSN                     PLACE IN CAMLST.
         LA    R15,F3WKA                      POINT TO F2/F3 WORK AREA.
         ST    R15,CAMWKA                     PLACE IN CAMLST.
         MVC   CAMLST,CAMSEEK                 SET UP CAMLST OPTIONS.
         SPACE
         OBTAIN CAMLST                        OBTAIN F2/F3 DSCB.
         SPACE
         CLI   DS3FMTID,C'3'                  FORMAT 3?
         LA    R15,DS2PTRDS                   POINT TO F3 ADDRESS.
         BNE   OBTAINF3                       NO (F2).  GET F3.
         MVC   DS3FMTID(L'DS3ADEXT),DS3ADEXT  YES.  COMPRESS EXTENTS.
         MVC   DS1PTRDS(L'DS3EXTNT+L'DS3ADEXT),DS3EXTNT
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*   FOR EACH EXTENT, ACQUIRE A DXLE, INITIALIZE, AND LOCATE ON DXL    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
FMTDXLE  EQU   *                              FOR EACH DS EXTENT :
         SPACE
         XR    R2,R2                          POINT TO EXTENT
         LA    R7,DS1EXT1                        TO START LOOP
         ICM   R2,B'0001',DS1NOEPV            GET NUMBER OF EXTENTS AND
         BNZ   FMTDLOOP                          IF NO ZERO, FILL.
         SPACE
         BAL   R6,GETDXLE                     GET A DXLE.
         MVC   DXLEDSN,DS1DSNAM               INSERT DSNAME.
         BAL   R6,LOCDXLE                     LOCATE ON DXL
         B     VTOCBUMP                       GO TO NEXT DSCB.
         SPACE
FMTDLOOP BAL   R6,GETDXLE                     GET A DXLE.
         LR    R1,R7                          POINT TO EXTENT.
         MVC   DXLEDSN,DS1DSNAM               INSERT DSNAME.
         BAL   R6,FILLDXLE                    FILL IN EXTENT DATA.
         BAL   R6,LOCDXLE                     LOCATE ON DXL.
         SPACE
         LA    R7,EXTNEXT-EXTENT(R7)          INCREMENT TO NEXT EXTENT.
         BCT   R2,FMTDLOOP                    PROCESS UNTIL NO MORE.
         EJECT
VTOCBUMP EQU   *                              WHEN FINISHED WITH A DSCB
         SPACE 1
         XR    R2,R2                          GET RECORD
         IC    R2,VTOCADR                        ADDRESS AND
         LA    R2,1(R2)                          INCREMENT.
         STC   R2,VTOCADR                     PLACE IN SEEK ADDRESS.
         SPACE
         CLM   R2,B'0001',DSCBPTRK            IF NOT END-OF-TRACK,
         BNH   VTOCBCHK                          CHECK FOR VTOC END.
         SPACE
         MVI   VTOCADR,1                      RESET RECORD ADDRESS.
         LH    R2,VTOCADHH                    GET TRACK ADDRESS.
         LA    R2,1(R2)                       INCREMENT TRACK.
         STH   R2,VTOCADHH                    PLACE IN SEEK ADDRESS.
         CH    R2,TRKPCYL                     IF NOT END-OF-CYLINDER,
         BL    VTOCBCHK                          CHECK FOR VTOC END.
         SPACE
         XC    VTOCADHH,VTOCADHH              RESET TRACK ADDRESS.
         LH    R2,VTOCADCC                    GET CYLINDER ADDRESS AND
         LA    R2,1(R2)                          INCREMENT.
         STH   R2,VTOCADCC                    PLACE IN SEEK ADDRESS.
         EJECT
VTOCBCHK EQU   *                              CHECK FOR VTOC END.
         SPACE
         CLC   VTOCEND,VTOCADDR               IF NOT END-OF-VTOC,
         BNL   OBTAINFX                          OBTAIN NEXT DSCB.  ELS
         B     DISPLAY                        START DISPLAY.
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*   FOR EACH FORMAT 5 DSCB, FORMAT EXTENTS WITH PRECALCULATED DATA    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
F5DSCB   EQU   *                              FOR EACH F5 DSCB :
         SPACE
         MVC   DS5FMTID(L'DS5MAVET),DS5MAVET  COMPRESS EXTENTS
         MVC   NEXTF5,DS5PTRDS
         XC    DS5FMTID+L'DS5MAVET(5),DS5FMTID+L'DS5MAVET
         LA    R7,DS5AVEXT                    POINT TO FIRST.
         SPACE 2
F5AVLOOP EQU   *                              FOR EACH EXTENT :
         SPACE 1
         XR    R14,R14                        GET DOUBLEWORD
         LH    R15,0(R7)                         TRACK ADDRESS.
         LTR   R15,R15                        IF ZERO,
         BZ    OBTAINF5                          GET NEXT DSCB.
         SPACE
         LH    R1,TRKPCYL                     GET TRACKS / CYLINDER.
         DR    R14,R1                         FORM HH/CCCC.
         STH   R14,AVLOHH                     SAVE HH.
         STH   R15,AVLOCC                     SAVE CCCC.
         MVC   AVLNCC,2(R7)                   SAVE WHOLE CYLS.
         MVI   AVLNTT+0,0                     SAVE
         MVC   AVLNTT+1(1),4(R7)                 ODD TRACKS.
         SPACE
         BAL   R6,GETDXLE                     GET A DXLE.
         MVC   DXLEDSN,F5DSN                  INSERT F5 DSN.
         OI    DXLEFLG,DXLEFAV                SET AVAILABLE FLAG.
         MVC   DXLEXLO,AVLOCC                 FILL IN ADDRESS.
         MVC   DXLELEN,AVLNCC                 FILL IN SIZE.
         BAL   R6,LOCDXLE                     LOCATE DXLE ON DXL.
         SPACE 1
         LA    R7,L'DS5AVEXT(R7)              POINT TO NEXT EXTENT.
         B     F5AVLOOP                       PROCESS.
         EJECT
OBTAINF5 EQU   *                              FOLLOW F5 CHAIN
         SPACE 1
         OC    NEXTF5(4),NEXTF5               END-OF-CHAIN OR VM/370 ?
         BZ    IXTERM                         YES.  BUMP.  ELSE   INTEL
         SPACE 1
******************************************************************INTEL
         TM    F4VTOCI,DS4IVTOC               IS THIS INDEXED?    INTEL
         BZ    OBT5A                          NO..CARRY ON        INTEL
         SPACE 1                                                  INTEL
         LA    R1,IXPARM        SET FOR INDEXED VTOC CVAF         INTEL
         L     R15,=V(IXTOFMT5) VIA MAGIC ROUTINE                 INTEL
         BALR  R14,R15                                            INTEL
         LTR   R15,R15                                            INTEL
         BZ    F5DSCB                                             INTEL
         ABEND 1                                                  INTEL
******************************************************************INTEL
         SPACE 1
OBT5A    MVC   CAMLST,CAMSEEK                 INITIALIZE CAMLST WITH
         LA    R15,NEXTF5                        F5 SEEK
         ST    R15,CAMDSN                          ADDRESS,
         LA    R15,VOLSER                        VOLUME
         ST    R15,CAMSER                          ID,
         LA    R15,OBTWKA                        WORK
         ST    R15,CAMWKA                          AREA.
         XR    R0,R0                          CLEAR UCB POINTER.
         SPACE 1
         OBTAIN CAMLST                        OBTAIN F5 DSCB.
         SPACE 1
         B     F5DSCB                         PROCESS.
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*   FOR EACH DXLE, FORMAT AND DISPLAY TO USER AND THEN FREE DXLE      *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
DISPLAY  EQU   *
         SPACE
         L     R10,DXLPTR
         SPACE
         LA    R15,1+1+1+1   HEAD+VSN+CUU+ORDER
         ST    R15,OLD
         LA    R15,MSGHEAD
         ST    R15,OLD+1*4
         MVC   MSGVSN,MSGLVSN
         MVC   MSGVSN+4(L'VOLSER),VOLSER
         LA    R15,MSGVSN
         ST    R15,OLD+2*4
         MVC   MSGCUU,MSGLCUU
         MVC   MSGCUU+4(L'CUU),CUU
         LA    R15,MSGCUU
         ST    R15,OLD+3*4
         L     R15,CMPRMSG
         ST    R15,OLD+4*4
         EJECT
PUTHEAD  PUTLINE                                                       +
               PARM=PUTLINE,MF=(E,IOPL),ECB=ECB,ECT=ECT,UPT=UPT,       +
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     +
               OUTPUT=(OLD,TERM,SINGLE,INFOR)
         SPACE 1
         PUTLINE                                                       +
               OUTPUT=(MSGLABEL,TERM,MULTLIN,DATA),                    +
               PARM=PUTLINE,MF=(E,IOPL)
         EJECT
         LA    R15,MSGLEXT
         ST    R15,OLD+1*4
         MVC   MSGLINE,MSGLEXT
         LA    R14,MSGXCCD
         LA    R15,MSGXCCH
         LA    R0,MSGXHHD
         LA    R1,MSGLCCD
         STM   R14,R1,OLD+2*4
         LA    R14,MSGLTTD
         LA    R15,MSGTYPE
         LA    R0,MSGDSN
         STM   R14,R0,OLD+6*4
         EJECT
DISPLOOP EQU   *
         SPACE
         LTR   R10,R10
         BZ    DONE
         SPACE
         MVC    DECIMAL,MASK
         LH     R15,DXLEXLCC
         CVD    R15,DWD
         ED     DECIMAL,DWD+5
         MVC    MSGXCCD+4(6),DECIMAL+1
         MVC    DECIMAL,MASK
         LH     R15,DXLELNCC
         CVD    R15,DWD
         ED     DECIMAL,DWD+5
         MVC    MSGLCCD+4(6),DECIMAL+1
         MVC    DECIMAL,MASK
         LH     R15,DXLEXLHH
         CVD    R15,DWD
         ED     DECIMAL,DWD+5
         MVC    MSGXHHD+4(3),DECIMAL+4
         MVC    DECIMAL,MASK
         LH     R15,DXLELNTT
         CVD    R15,DWD
         ED     DECIMAL,DWD+5
         MVC    MSGLTTD+4(3),DECIMAL+4
         SPACE
         UNPK   DECIMAL(5),DXLEXLCC(3)
         TR     DECIMAL(4),TRHEX
         MVC    MSGXCCH+4(4),DECIMAL
         MVC    MSGTYPE+4(1),DXLEFLG
         TR     MSGTYPE+4(1),TRTYPE
         MVC    MSGDSN+4(L'DXLEDSN),DXLEDSN
         MVI    OLD+3,1+1+1+1+1+1+1+1
         TM     DXLEFLG,DXLEFAV+DXLEFVT+DXLEFALT
         BZ     PUTEXT
         MVI    OLD+3,1+1+1+1+1+1+1
         EJECT
PUTEXT   PUTLINE                                                       +
               OUTPUT=(OLD,TERM,SINGLE,INFOR),                         +
               PARM=PUTLINE,MF=(E,IOPL)
         SPACE
         LR    R1,R10
         ICM   R10,B'0111',DXLELINK
         BAL   R6,FREEDXLE
         SPACE
         B     DISPLOOP
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*     VALIDITY CHECK ROUTINE FOR VOLUME ID PROVIDED AS OPERAND        *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
VERVOL   SAVE  (14,12),,*
         SPACE
         LM    R14,R15,0(R1)
         LM    R0,R12,0(R15)
         L     R1,0(R14)
         LA    R15,4
         BAL   R6,UCBLKUP
         B     *+L'*(R15)
         B     VERVGEN
         B     VERVRTN
         SPACE
VERVGEN  ST    R1,ADDRUCB
         MVC   VOLSER,UCBVOLI-UCBOB(R1)
         MVC   DEVTYP,UCBTYP-UCBOB(R1)
         MVC   CUU,UCBNAME-UCBOB(R1)
         L     R15,CVTPTR
         L     R15,CVTZDTAB-CVTMAP(R15)
         XR    R14,R14
         IC    R14,DEVTYP+3
         IC    R14,0(R14,R15)
         LA    R15,0(R14,R15)
         MVC   TRKPCYL,2(R15)
         XR     R15,R15
         SPACE 2
VERVRTN  RETURN (14,12),RC=(15)
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*      VALIDITY CHECK ROUTINE FOR EXIT ROUTINE DSNAME(MEMBER)         *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
VERDSN   SAVE  (14,12),,*
         SPACE
VERDRTN  RETURN (14,12),RC=(15)
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*     THE FOLLOWING SERVICE SUBROUTINES WERE DEVELOPED OUT-OF-LINE    *
*      BECAUSE I KNEW HOW TO MAKE THEM BEFORE I KNEW EXACTLY WHAT     *
*      THE MAINLINE LOGIC WAS GOING TO LOOK LIKE.  BOTTOM UP CODE!    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
LOCDXLE  EQU   *                    LOCATE A FILLED-IN DXLE ON DXL
         SPACE 1
         LA    R9,DXLPTR                 GET DXL ANCHOR FROM DSA.
         SPACE 2
LOCLOOP  EQU   *                      FOR EACH DXLE ON DXL :
         SPACE 1
         ICM   R8,B'0111',DXLELINK-DXLE(R9)   LINK TO NEXT DXLE.
         BZ    LOCSET                         IF LAST, APPEND NEW.
         L     R15,CMPRTN                     ELSE, GET ADDR OF COMPARE
         SPACE 1
         CALL  (15),((8),(10)),MF=(E,CRPL)    CALL COMPARE ROUTINE.
         SPACE 1
         B     *+L'*(R15)                     DETERMIINE RESULT :
         B     LOCSET                           RC=0 - NEW =< OLD
         LR    R9,R8                            RC=4 - NEW  > OLD
         B     LOCLOOP                        IF RC=4, CHAIN TO NEXT.
         SPACE 2
LOCSET   EQU   *                      WHEN A HIGHER DXLE IS FOUND :
         SPACE 1
         STCM  R10,B'0111',DXLELINK-DXLE(R9)  INSERT NEW IN ITS PLACE
         STCM  R8,B'0111',DXLELINK-DXLE(R10)  CHAIN OLD DXLE TO NEW.
         SPACE 1
         BR    R6                             RETURN TO INVOKER.
         EJECT
GETDXLE  EQU   *                    ACQUIRE A DXLE WHEN NEEDED
         SPACE 1
         LA    R0,DXLEEND-DXLE                GET LENGTH OF A DXLE
         ICM   R0,B'1000',SPDXL                   AND SUBPOOL OF DXL
         SPACE 1
         GETMAIN R,LV=(0)                     ACQUIRE SPACE
         SPACE 1
         LR    R10,R1                         BASE DXLE
         XC    DXLE(DXLEEND-DXLE),DXLE        CLEAR DXLE
         BR    R6                             RETURN TO INVOKER.
         SPACE 5
FREEDXLE EQU   *                    FREE A DXLE AFTER DISPLAY
         SPACE 1
         LA    R0,DXLEEND-DXLE                GET LENGTH OF A DXLE
         ICM   R0,B'1000',SPDXL                   AND SUBPOOL OF DXL
         SPACE 1
         FREEMAIN R,LV=(0),A=(1)              RELEASE SPACE
         SPACE 1
         BR    R6                             RETURN TO INVOKER.
         SPACE 2
*********************************************************************
*         -------  UCBLKUP ROUTINE  -------
*
*
*  ...SAVE R13 OF CALLER, AND SET UP A NEW SAVE AREA
*
UCBLKUP  ST    R13,IOSSAVE+4       IOSSAVE+4 = A(CALLERS SAVEAREA)
         LA    R9,IOSSAVE          USE REG 9 TEMPORARILY
         ST    R9,8(R13)           TELL CALLER MY SAVEAREA ADDRESS
         LR    R13,R9              R13 NOW CONTAINS MY SAVE AREA
*
*  ...LOCATE ADDRESS OF 'IOSVSUCB' ROUTINE
*
         USING PSA,R0
         LR    R9,R1                    SAVE PARAMETER REGISTER
         L     R1,FLCCVT
         USING CVT,R1
         L     R1,CVTUCBSC              LOAD ADDRESS OF 'IOSVSUCB' RTN
         ST    R1,UCBRTN                    ...AND SAVE IT
         DROP  R1
         XC    IOSWORK,IOSWORK               CLEAR THE IOS WORK AREA
*
*  NOW, SCAN THE UCBS, LOOKING FOR A VOLUME MATCH
*
UCBLOOP  LA    R1,IOSPARM               R1 = ADDRESS OF PARAMETER LIST
         L     R15,UCBRTN               R15 = ADDRESS OF UCB SCAN RTN
         BALR  R14,R15                  BRANCH TO UCB SCAN ROUTINE
*
         LTR   R15,R15                  DID WE GET A UCB ADDRESS
         BNZ   SCANEND                  NOPE, EITHER ALL UCBS SCANNED,
*                                           OR AN ERROR HAS OCCURED.
         L     R8,IOSUCB                R8 = ADDR OF UCB COMMON SEGMENT
         CLC   UCBVOLI-UCBOB(6,R8),0(R9)      DESIRED VOLID ?
         BNE   UCBLOOP                        NO.  LOOK AT NEXT.
*
         LR    R1,R8                          RETURN POINTER.
         XR    R15,R15                        INDICATE SUCCESS.
         B     XUCBLKUP                       QUIT THE LOOP
*
SCANEND  LA    R15,4(,R0)                     INDICATE NO UCB FOUND
         LR    R1,R9                          RESTORE PARAMETER REG
*
XUCBLKUP L     R13,IOSSAVE+4       RESTORE CALLERS SAVE AREA
         BR    R6                             EXIT THIS ROUTINE
*
         EJECT
FILLDXLE EQU   *                    PLACE AN EXTENT IN A DXLE
         SPACE
         USING EXTENT,R1
         MVC   DXLEXLO,EXTLOCC
         LH    R15,EXTHICC
         LH    R14,EXTHIHH
         SH    R14,EXTLOHH
         BNM   FILLDCHK
         BCTR  R15,0
         AH    R14,TRKPCYL
         SPACE
FILLDCHK LA    R14,1(R14)
         CH    R14,TRKPCYL
         BL    FILLDCYL
         SH    R14,TRKPCYL
         LA    R15,1(R15)
         SPACE
FILLDCYL SH    R15,EXTLOCC
         STH   R15,DXLELNCC
         STH   R14,DXLELNTT
         SPACE
         CLI   EXTSEQ,1
         BLR   R6
         OI    DXLEFLG,DXLEFSE
         DROP  R1
         BR    R6
         EJECT ,                                                  INTEL
******************************************************************INTEL
*   INDEXED VTOC INITALIZE                                        INTEL
******************************************************************INTEL
IXINIT   TM    F4VTOCI,DS4IVTOC  IS THIS VTOC INDEXED?            INTEL
         BZR   R6                NOPE...                          INTEL
         SPACE 1                                                  INTEL
         LA    R1,IXWORD    INITIALIZE THE PARMLIST FOR           INTEL
         ST    R1,IXPARM       IXTOFMT5 ROUTINE                   INTEL
         XC    IXWORD,IXWORD                                      INTEL
         LA    R1,IXDCB     GET DCB ADDRESS                       INTEL
         ST    R1,IXPARM+4  AND SAVE IT AWAY                      INTEL
         LA    R1,IXCT1                                           INTEL
         ST    R1,IXPARM+8                                        INTEL
         LA    R1,IXCT2                                           INTEL
         ST    R1,IXPARM+12                                       INTEL
         LA    R1,OBTWKA       BUFFER TO USE                      INTEL
         ST    R1,IXPARM+16                                       INTEL
         SPACE 1                                                  INTEL
         MVC   IX99RBA(LX99RBAL),AIX99RBA   MOVE IN ALLOC LIST    INTEL
         MVC   IX99RBF(LX99RBFL),AIX99RBF   MOVE IN FREE LIST     INTEL
         SPACE 1                                                  INTEL
         LA    R1,IX99RBAL         RELOCATE ADDRESSES IN          INTEL
         STCM  R1,B'0111',IX99RBA+1  DYNAMIC ALLOC PARM LIST      INTEL
         LA    R1,IX99TXT1                                        INTEL
         ST    R1,IX99RBAL+8                                      INTEL
         LA    R1,IXKDDN                                          INTEL
         ST    R1,IX99TXT1                                        INTEL
         LA    R1,IXKVOL                                          INTEL
         ST    R1,IX99TXT1+4                                      INTEL
         LA    R1,IXKUNT                                          INTEL
         ST    R1,IX99TXT1+8                                      INTEL
         LA    R1,IXKOLD                                          INTEL
         ST    R1,IX99TXT1+12                                     INTEL
         LA    R1,IXKKEP                                          INTEL
         STCM  R1,B'0111',IX99TXT1+17                             INTEL
         SPACE 1                                                  INTEL
         LA    R1,IX99RBFR            RELOCATE ADDRESSES AND      INTEL
         STCM  R1,B'0111',IX99RBF+1   SET UP FREE PARM LIST       INTEL
         LA    R1,IX99TXT2                                        INTEL
         ST    R1,IX99RBFR+8                                      INTEL
         LA    R1,IXKDDN2                                         INTEL
         ST    R1,IX99TXT2                                        INTEL
         LA    R1,IXKKEP                                          INTEL
         STCM  R1,B'0111',IX99TXT2+5                              INTEL
         SPACE 1                                                  INTEL
         LA    R1,IXJFCB              RELOCATE ADDRESSES AND      INTEL
         ST    R1,IXLST                                           INTEL
         MVI   IXLST,X'87'   SET UP TO READJFCB EXIT LIST         INTEL
         SPACE 1                                                  INTEL
         MVC   IXDCB(AIXDCBL),AIXDCB    SET UP DCB INFORMATION    INTEL
         LA    R1,IXLST                                           INTEL
         STCM  R1,B'0111',IXDCB+DCBEXLSA         SAVE EXIT ADDRESSINTEL
         EJECT ,                                                  INTEL
*                                                                 INTEL
*  DYNALOC VTOC                                                   INTEL
*                                                                 INTEL
         L     R1,ADDRUCB              GET UCB ADDRESS            INTEL
IXGOTUCB MVC   IXKUNT+6(3),UCBNAME-UCBWRK(R1) SET UP DYNAM UNIT   INTEL
         MVC   IXKVOL+6(6),UCBVOLI-UCBWRK(R1) SET UP VOLUME       INTEL
         LA    R1,IX99RBA              POINT TO PARM LIST         INTEL
         DYNALLOC                      CALL SVC99                 INTEL
         LTR   R15,R15                 DID IT WORK?               INTEL
         BZ    *+8                     BIF YES                    INTEL
         EX    0,*                     ELSE DIE                   INTEL
*                                                                 INTEL
* OPEN VTOC                                                       INTEL
*                                                                 INTEL
         MVC     IXDCB+DCBDDNAM(8),IXKDDN+6 MOVE DDNAME TO DCB    INTEL
         MVI     IXOPNWK,X'80'         LAST ENTRY IN PARM LIST    INTEL
         RDJFCB  IXDCB,MF=(E,IXOPNWK)  READ IN JFCB               INTEL
         MVC   IXJFCB(44),=44XL1'04'   DSNAME FOR VTOC            INTEL
         MVI   IXOPNWK,X'80'           LAST ENTRY IN PARM LIST    INTEL
         OPEN  (IXDCB,(INPUT)),TYPE=J,MF=(E,IXOPNWK) OPEN VTOC    INTEL
         TM    IXDCB+48,X'10'          DID IT WORK?               INTEL
         BOR   R6                      YES. ALL READY.            INTEL
         ABEND 4                       NO. FAIL.                  INTEL
         SPACE 2                                                  INTEL
         BR    R6             AND RETURN                          INTEL
         EJECT  ,                                                 INTEL
*                                                                 INTEL
* CLOSE AND FREE VTOC                                             INTEL
*                                                                 INTEL
IXTERM   TM    F4VTOCI,DS4IVTOC                                   INTEL
         BZ    VTOCBUMP       NOT INDEXED...SPLIT                 INTEL
         MVI   IXOPNWK,X'80'           LAST ENTRY IN PARM LIST    INTEL
         CLOSE IXDCB,MF=(E,IXOPNWK)                               INTEL
         MVC   IXKDDN2+6(8),IXKDDN+6  MOVE IN THE DDNAME          INTEL
         LA    R1,IX99RBF     GO FREE THE FILE                    INTEL
         DYNALLOC  ,                                              INTEL
         LTR   R15,R15                                            INTEL
         BZ    VTOCBUMP                                           INTEL
         ABEND 3                                                  INTEL
DCBEXLSA EQU   37             DCB EXIT LIST                       INTEL
DCBDDNAM EQU   40             DCB DDNAME                          INTEL
******************************************************************INTEL
         EJECT
CMPRDSN  SAVE  (14,12),,*           COMPARE DXLE BY DATASET NAME
         SPACE 1
         LM    R2,R3,0(R1)                    GET OLD / NEW DXLE ADDRS
         LA    R15,4                          INITIALIZE RETURN CODE
         CLC   DXLEDSN-DXLE(L'DXLEDSN,R3),DXLEDSN-DXLE(R2)  OLD > NEW ?
         BH    CMPRDRTN                       YES.  RETURN 4.
         XR    R15,R15                        NO.   RETURN 0.
         SPACE 1
CMPRDRTN RETURN (14,12),RC=(15)               RETURN WITH CODE.
         SPACE 5
CMPREXT  SAVE  (14,12),,*           COMPARE DXLE BY EXTENT
         SPACE 1
         LM    R2,R3,0(R1)                    GET OLD / NEW DXLE ADDRS
         LA    R15,4                          INITIALIZE RETURN CODE
         CLC   DXLEXLO-DXLE(L'DXLEXLO,R3),DXLEXLO-DXLE(R2)  OLD > NEW ?
         BH    CMPRERTN                       YES.  RETURN 4.
         XR    R15,R15                        NO.   RETURN 0.
         SPACE 1
CMPRERTN RETURN (14,12),RC=(15)               RETURN WITH CODE.
         SPACE 5
CMPRNIL  EQU   *                    NULL COMPARE
         SPACE 1
         XR    R15,R15                        ALWAYS
         BR    R14                            RETURN
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*   ABNORMAL SERVICE ROUTINE (DAIR AND PARS) TERMINATION PROCESSING   *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
OBTNFAIL EQU   *
         SPACE
         PUTLINE                                                       +
               PARM=PUTLINE,MF=(E,IOPL),ECB=ECB,ECT=ECT,UPT=UPT,       +
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     +
               OUTPUT=(MSGOBT,TERM,MULTLVL,INFOR)
         SPACE
         B     VTOCBUMP
         EJECT
DAIRFAIL EQU   *
         SPACE
         LINK  EP=IKJEFF18,DCB=0,SF=(E,LINK),                          +
               MF=(E,FAIL),                                            +
               PARAM=(DAPL,DARC,ZERO,H01)
         B     DONE
         SPACE
PARSFAIL EQU   *
         SPACE
         LINK  EP=IKJEFF19,DCB=0,SF=(E,LINK),                          +
               MF=(E,FAIL),PARAM=(0,PARC,ZERO,H21)
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*   WHEN ALL DATASETS HAVE BEEN PROCESSED, FREE PDL AND WORK AREAS    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
DONE     EQU   *
         SPACE
         IKJRLSA ANS
         SPACE 2
         JVDLEAVE  RC=0
         SPACE 2
         PRINT NOGEN
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*   PARSE CONTROL CSECT AND PARSE DESCRIPTOR LIST DSECT DEFINITIONS   *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
MAPPCL   IKJPARM DSECT=PDL
         SPACE
VOLID    IKJIDENT                                                      +
               'VOLID',                                                +
               MAXLNTH=6,FIRST=ALPHANUM,OTHER=ALPHANUM,                +
               VALIDCK=VERVOL,                                         +
               PROMPT='VOLUME ID+',                                    +
               HELP='SERIAL ID OF DASD VOLUME TO BE MAPPED'
         SPACE
ORDER    IKJKEYWD DEFAULT='EXTENT'
         SPACE
         IKJNAME 'NONE'
         IKJNAME 'EXTENT'
         IKJNAME 'DSNAME'
         IKJNAME 'USER',SUBFLD=$EXIT
         SPACE
$EXIT    IKJSUBF
         SPACE
EXITDSN  IKJPOSIT                                                      +
               DSNAME,LIST,                                            +
               VALIDCK=VERDSN,                                         +
               PROMPT='EXIT DSN+',                                     +
               HELP='DSN(MEMBER) OF USER ORDERING EXIT ROUTINE'
         SPACE
         IKJENDP
         SPACE 2
         PRINT GEN
         EJECT
DXLE     DSECT   ,  DASD EXTENT LIST ELEMENT
         SPACE 1
DXLEFLG  DS    B             EXTENT TYPE FLAGS
DXLEFVT  EQU   B'10000000'     VTOC EXTENT
DXLEFSE  EQU   B'01000000'     SECONDARY EXTENT
DXLEFAV  EQU   B'00100000'     AVAILABLE EXTENT
DXLEFALT EQU   B'00010000'     ALTERNATE TRACKS
DXLELINK DS    AL3           LINK TO NEXT DXLE OR ZERO
DXLEXLO  DS    0XL4          LOW EXTENT
DXLEXLCC DS    XL2               CC
DXLEXLHH DS    XL2               HH
DXLELEN  DS    0XL4          EXTENT LENGTH
DXLELNCC DS    XL2               CYLINDERS
DXLELNTT DS    XL2               ADDITIONAL TRACKS
DXLEUSER DS    CL8           USER-EXIT-DEFINED
DXLEDSN  DS    CL44          DATASET NAME
         SPACE 1
DXLEEND  DS    0D            END OF DXLE
DASDMAP  CSECT               RESTORE TO MAIN CSECT...  FCI
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*   DECLARE ALL CONSTANTS, LITERALS, WORK AREAS, AND CONTROL BLOCKS   *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 2
PCLA     DC    A(MAPPCL)
CMPRRTNS DC    A(CMPRNIL,CMPREXT,CMPRDSN,0)
CMPRMSGS DC    A(MSGONIL,MSGOEXT,MSGODSN,MSGOUSR)
NULL     DC    0A(0),X'FF',AL3(0)
ZERO     DC    A(0)
H01      DC    H'1'
H21      DC    H'21'
******************************************************************INTEL
*                                                                 INTEL
*  PARMLIST FOR VTOC ALLOCATE                                     INTEL
*                                                                 INTEL
         PRINT GEN,DATA                                           INTEL
AIX99RBA DC    0F'0',X'80',AL3(AX99RBAL)                          INTEL
AX99RBAL DC    AL1(20,1)               LENGTH, VERB               INTEL
         DC    X'4000'                 FLAG1 (DON'T USE EXISTING) INTEL
         DC    AL2(0,0)                ERROR CODE, INFO CODE      INTEL
         DC    A(AX99TXT1)             @ TEXT UNITS               INTEL
         DC    2F'0'                   RSVD, FLAG2                INTEL
AX99TXT1 DC    A(AIXKDDN,AIXKVOL,AIXKUNT,AIXKOLD)                 INTEL
         DC    X'80',AL3(AIXKKEP)                                 INTEL
AIXKDDN  DC    AL2(85,1,8),C'SYS99999' DDNAME ASSIGNED            INTEL
AIXKVOL  DC    AL2(16,1,6),C'XXXXXX'   VOL=SER=                   INTEL
AIXKUNT  DC    AL2(21,1,3),C'000'      UNIT=                      INTEL
AIXKOLD  DC    AL2(4,1,1),X'01'        DISP=OLD                   INTEL
AIXKKEP  DC    AL2(5,1,1),X'08'        DISP=KEEP                  INTEL
LX99RBAL EQU   *-AIX99RBA   LENGTH OF THIS MESS                   INTEL
         EJECT ,                                                  INTEL
*                                                                 INTEL
*  PARMLIST FOR VTOC DEALLOCATE                                   INTEL
*                                                                 INTEL
AIX99RBF DC    0F'0',X'80',AL3(AX99RBFR)                          INTEL
AX99RBFR DC    AL1(20,2)               LENGTH, VERB               INTEL
         DC    X'0000'                 FLAG1                      INTEL
         DC    AL2(0,0)                ERROR CODE, INFO CODE      INTEL
         DC    A(AX99TXT2)             @ TEXT UNITS               INTEL
         DC    2F'0'                   RSVD, FLAG2                INTEL
         SPACE 2                                                  INTEL
AX99TXT2 DC    A(AIXKDDN2),X'80',AL3(AIXKKEP)                     INTEL
AIXKDDN2 DC    AL2(1,1,8),C'SYS99999'  DDNAME ASSIGNED            INTEL
LX99RBFL EQU   *-AIX99RBF   LENGTH OF THIS MESS                   INTEL
         PRINT NOGEN                                              INTEL
AIXDCB   DCB   DSORG=PS,MACRF=(E),EXLST=*-*,DDNAME=NONE           INTEL
AIXDCBL  EQU   *-AIXDCB                                           INTEL
         PRINT GEN,NODATA                                         INTEL
******************************************************************INTEL
DAP8LST  DC    X'0008',BL2'0',XL2'0',XL2'0',AL4(0)
         DC    3CL8' ',4F'0',2CL8' '
         DC    AL1(DA08SHR),AL1(DA08KEEP),AL1(DA08KEEP)
         DC    BL1'0',XL3'0',BL1'0',CL8' '
DA18LST  DC    X'0018',BL2'0',2XL2'0',AL4(0)
         DC    2CL8' ',CL2' ',AL1(DA18KEEP),BL1'0',CL8' '
DSBLANK  DC    CL44' '
FOXES    DC    X'FFFF'
F5DSN    DC    08X'05'
F4DSN    DC    44X'04'
SPDXL    DC    AL1(3)
TRHEX    DC    240AL1(*-TRHEX),C'0123456789ABCDEF'
TRTYPE   DC    XL256'00'
         ORG   TRTYPE+DXLEFAV
         DC    C'A'
         ORG   TRTYPE+DXLEFSE
         DC    C'S'
         ORG   TRTYPE+DXLEFVT
         DC    C'V'
         ORG   TRTYPE+DXLEFALT
         DC    C'L'
         ORG   TRTYPE+256
MASK     DC    X'4020206B212020'
         EJECT
MSGHEAD  MSG   ' VTOC MAP OF VOLUME  (UNIT )  ORDER',0
MSGONIL  MSG   'NO',29
MSGOEXT  MSG   'EXTENT',29
MSGODSN  MSG   'DSNAME',29
MSGOUSR  MSG   'USER EXIT DEFINED',29
MSGLVSN  MSG   'VVVVVV',20
MSGLCUU  MSG   'CUU',27
         EJECT
MSGLEXT  MSG   '  () /  /         ',0
MSGLXCCD MSG   'CC,CCC',1
MSGLXCCH MSG   'CCCC',3
MSGLXHHD MSG   'HHH',6
MSGLLCCD MSG   'CC,CCC',7
MSGLLTTD MSG   'HHH',9
MSGLTYPE MSG   'D',13
MSGLDSN  MSG   'DSN/DSN/DSN/DSN/DSN/DSN/DSN/DSN/DSN/DSN/DSN/',17
MSGLEND  DS    0F
         EJECT
MSGLABEL DC    A(MSGLBL2)
MSGLAB1  MSG   ' '
MSGLBL2  DC    A(MSGLBL3)
MSGLAB2  MSG   '  STARTING ADDRESS     XTNT SZ    X    DATASET'
MSGLBL3  DC    A(MSGLBL4)
MSGLAB3  MSG   '  CYL-DEC(HEX)/TRK     CYL/TRK    T    NAME'
MSGLBL4  DC    A(0)
MSGLAB4  MSG   ' '
MSGOBT   DC    A(MSGOBT2,1,MSGOBT1)
MSGOBT1  MSG   'MMSCDASD01 - OBTAIN ERROR CODE'
MSGOBT2  DC    A(0,1,MSGOBT3)
MSGOBT3  MSG   ' INCONSISTENCY OR I/O ERROR ON DESIGNATED VTOC'
*
UCBRTN   DC    F'0'      ADDRESS OF 'IOSVSUCB' (FROM FIELD CVTUCBSC)
*
IOSPARM  DS    0D                       *  THESE FOUR FIELDS         *
WADR     DC    A(0)  = A(IOSWORK)       *     MAKE UP THE PARAMETER  *
CLSADDR  DC    A(IOSDVCLS)              *          LIST PASSED TO    *
UCBADDR  DC    A(IOSUCB+X'80000000')    *              IOSVSUCB      *
*
IOSDVCLS DC    X'00'                    *     THE ACTUAL PARAMETERS  *
IOSUCB   DC    F'0'                     *         USED BY IOSVSUCB   *
*
         EJECT
CAMSRCH  CAMLST      SEARCH,*-*,*-*,*-*
         SPACE
CAMSEEK  CAMLST      SEEK,*-*,*-*,*-*
         PRINT       DATA
         SPACE
         LTORG
         EJECT
         IKJDAP08
DA08END  EQU   *
         EJECT
         IKJDAP18
         EJECT
DSAWRK   DSECT
         SPACE
SSA      DS    18F
ANS      DS    A
ECB      DS    A
CMPRTN   DS    A
CMPRMSG  DS    A
DXLPTR   DS    A
ADDRUCB  DS    A
VTOCEND  DS    0XL5
VTOCENCC DS    H
VTOCENHH DS    H
VTOCENR  DS    X
NEXTF5   DS    XL5
VTOCSEEK DS    0H
VTOCADDR DS    0XL5
VTOCADCC DS    H
VTOCADHH DS    H
VTOCADR  DS    HL1
DSCBPTRK DS    HL1
AVLOCC   DS    H
AVLOHH   DS    H
AVLNCC   DS    H
AVLNTT   DS    H
TRKPCYL  DS    F
DEVTYP   DS    XL4
UWA      DS    18F
IOSSAVE  DS    CL72' '   REGISTER SAVE AREA USED BY 'IOSVSUCB' RTN
IOSWORK  DS    CL100                    *  THESE THREE FIELDS ARE    *
DWD      DS    D
DECIMAL  DS    C'BZZ,Z99'
OBTWKA   DS    0D,XL148
F3WKA    DS    0D,XL148
DARC     DS    F
PARC     DS    F
FAIL     DS    4F
BTRALC   DS    F
CAMLST   DS    F
CAMDSN   DS    A
CAMSER   DS    A
CAMWKA   DS    A
         EJECT ,                                                  INTEL
******************************************************************INTEL
IXPARM   DS    A(IXWORD) @ WORK WORD                              INTEL
         DS    A(*-*)    UCB ADDRESS (COMPLEMENTED)               INTEL
         DS    A(IXCT1)  @ COUNT - FREE FMT 0 DSCBS               INTEL
         DS    A(IXCT2)  @ COUNT - FREE VIRS                      INTEL
         DS    A(OBTWKA) @ BUFFER FOR FMT 5                       INTEL
IXWORD   DS    F'0'      WORK WORD                                INTEL
IXCT1    DS    F'0'      COUNT FOR FREE FMT0                      INTEL
IXCT2    DS    F'0'      COUNT FOR FREE VIRS                      INTEL
F4VTOCI  DS    X'00'     TYPE OF VTOC...SAVED FROM DS4VTOCI       INTEL
*                                                                 INTEL
*  PARMLIST FOR VTOC ALLOCATE                                     INTEL
*                                                                 INTEL
         PRINT GEN,DATA                                           INTEL
IX99RBA  DC    0F'0',X'80',AL3(IX99RBAL)                          INTEL
IX99RBAL DC    AL1(20,1)               LENGTH, VERB               INTEL
         DC    X'4000'                 FLAG1 (DON'T USE EXISTING) INTEL
         DC    AL2(0,0)                ERROR CODE, INFO CODE      INTEL
         DC    A(IX99TXT1)             @ TEXT UNITS               INTEL
         DC    2F'0'                   RSVD, FLAG2                INTEL
IX99TXT1 DC    A(IXKDDN,IXKVOL,IXKUNT,IXKOLD)                     INTEL
         DC    X'80',AL3(IXKKEP)                                  INTEL
IXKDDN   DC    AL2(85,1,8),C'SYS99999' DDNAME ASSIGNED            INTEL
IXKVOL   DC    AL2(16,1,6),C'XXXXXX'   VOL=SER=                   INTEL
IXKUNT   DC    AL2(21,1,3),C'000'      UNIT=                      INTEL
IXKOLD   DC    AL2(4,1,1),X'01'        DISP=OLD                   INTEL
IXKKEP   DC    AL2(5,1,1),X'08'        DISP=KEEP                  INTEL
         EJECT ,                                                  INTEL
*                                                                 INTEL
*  PARMLIST FOR VTOC DEALLOCATE                                   INTEL
*                                                                 INTEL
IX99RBF DC     0F'0',X'80',AL3(IX99RBFR)                          INTEL
IX99RBFR DC    AL1(20,2)               LENGTH, VERB               INTEL
         DC    X'0000'                 FLAG1                      INTEL
         DC    AL2(0,0)                ERROR CODE, INFO CODE      INTEL
         DC    A(IX99TXT2)             @ TEXT UNITS               INTEL
         DC    2F'0'                   RSVD, FLAG2                INTEL
         SPACE 2                                                  INTEL
IX99TXT2 DC    A(IXKDDN2),X'80',AL3(IXKKEP)                       INTEL
IXKDDN2 DC     AL2(1,1,8),C'SYS99999'  DDNAME ASSIGNED            INTEL
*                                                                 INTEL
*  DCB AND JFCB FOR VTOC                                          INTEL
*                                                                 INTEL
IXOPNWK  DS   2F'0'     OPEN LIST FOR OPEN/CLOSE                  INTEL
IXLST    DC    0F'0',X'87',AL3(IXJFCB)                            INTEL
IXJFCB   DC    XL176'00'                                          INTEL
         PRINT NOGEN                                              INTEL
IXDCB    DCB   DSORG=PS,MACRF=(E),EXLST=IXLST,DDNAME=NONE         INTEL
         PRINT GEN                                                INTEL
******************************************************************INTEL
         EJECT ,                                                  INTEL
DAPB     DS    XL(DA08END-DAPB08)
DSNVLEN  DS    H
DSNVALUE DS    CL44
VOLSER   DS    CL6
CUU      DS    CL3
         EJECT
OLD      DS    F,9A     OUTPUT LINE DESCRIPTOR FOR PUTLINE
         SPACE
MSGLINE  DS    0XL(MSGLEND-MSGLEXT)
MSGEXT   MSG   ' ()/    /         ',0
MSGXCCD  MSG   'CC,CCC',1
MSGXCCH  MSG   'CCCC',2
MSGXHHD  MSG   'HHH',4
MSGLCCD  MSG   'CC,CCC',8
MSGLTTD  MSG   'HHH',9
MSGTYPE  MSG   'D',14
MSGDSN   MSG   'DSN/DSN/DSN/DSN/DSN/DSN/DSN/DSN/DSN/DSN/DSN/',17
MSGEND   DS    0F
         SPACE
MSGVSN   DS    CL(4+6),0F
MSGCUU   DS    CL(4+3),0F
         EJECT
PPL      CALL  ,(UPT,ECT,ECB,PCLA,ANS,CPPL,UWA),MF=L
DAPL     CALL  ,(UPT,ECT,ECB,PSCB,DAPB),MF=L
IOPL     CALL  ,(UPT,ECT,ECB,PUTLINE),MF=L
CRPL     CALL  ,(DXLE,DXLE),MF=L
PUTLINE  PUTLINE  MF=L
LINK     LINK     SF=L
         EJECT
         ORG   OBTWKA
         IECSDSL1 (1)
         SPACE
         EJECT
         ORG   F3WKA
         SPACE
         IECSDSL1 (2)
         SPACE
         ORG   F3WKA
         SPACE
         IECSDSL1 (3)
         EJECT
         ORG   OBTWKA
         SPACE
         IECSDSL1 (4)
         EJECT
         ORG   OBTWKA
         SPACE
         IECSDSL1 (5)
         SPACE
         ORG
         SPACE
DSAEND   DS    0D
         EJECT
DSNPDE   DSECT
         SPACE
DSNADDR  DS    A
DSNLEN   DS    H
DSNFLG1  DS    B
DSNMADDR DS    A
DSNMLEN  DS    H
DSNFLG2  DS    B
DSNPADDR DS    A
DSNPLEN  DS    H
DSNFLG3  DS    B
DSNLINK  DS    A
DSNPRES  EQU   B'10000000'
DSNQUOTE EQU   B'01000000'
         SPACE 2
EXTENT   DSECT
         SPACE
EXTTYPE  DS    BL1
EXTSEQ   DS    XL1
EXTLOCC  DS    HL2
EXTLOHH  DS    HL2
EXTHICC  DS    HL2
EXTHIHH  DS    HL2
         SPACE
EXTNEXT  EQU   *
         EJECT
         IKJUPT
         EJECT
         IKJPSCB
         EJECT
         IKJECT
         EJECT
         IKJCPPL
         EJECT
         IKJPTPB
         EJECT
         SPACE 3
         CVT    DSECT=YES
         IHAPSA
         EJECT
UCBWRK   DSECT
         IEFUCBOB
         EJECT
         JVDEQU
         SPACE 2
         PRINT GEN
         END   DASDMAP
