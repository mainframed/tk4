*          DATA SET ACFVAL     AT LEVEL 004 AS OF 02/15/83
*          DATA SET ACFVAL     AT LEVEL 003 AS OF 08/16/81
*          DATA SET ACFVAL     AT LEVEL 002 AS OF 08/16/81
*          DATA SET ACFVAL     AT LEVEL 001 AS OF 05/11/79
ACFVAL   TITLE 'ACF2 VALIDATION EXIT VERSION 1.2 '
***********************************************************************
*                                                                     *
* INTEL ACF2 DATASET VALIDATION EXIT                                  *
*                                                                     *
*  PURPOSE: PROVIDE CAPABILITY TO MODIFY NAME OF DATASET BEING        *
*           ACCESSED PRIOR TO ACF2 VALIDATION PROCESSING, ADDITION-   *
*           ALLY PROVIDE A FAST PATH ACCESS FOR SYSTEM DATASETS       *
*           THAT ARE COMMONLY USED.                                   *
*                                                                     *
*  VERSION 2.0   K TRUE   11APR78   (FCI RACF ICHRCX01 EXIT)          *
*          2.1   K TRUE    2MAY78 - FIX GDG BASE ONLY PROTECTION      *
*          1.0   A DAVIES 27APR79 - PROVIDE SECURITY VALIDATION SUP-  *
*                                   PORT UNDER ACF ENVIRONMENT EQUIV- *
*                                   ALENT TO THAT PROVIDED UNDER RACF.*
*          1.1   K TRUE   14AUG81   ADDED APPEND OPERATION FOR QUALNTLC
*                INTEL CORP         PREFIX PROCESSING-MISC VARIABLENTLC
*                                   NAME CHANGES                   NTLC
*          1.2   K TRUE   03FEB83   ADDED OPS-ANALYST SUPPORT       NTL
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         ACFREGS
         EJECT
ACFVAL   CSECT
         STM   R14,R12,12(R13)      SAVE CALLERS REGISTERS
         LR    R12,R15              R12 = PROGRAM BASE REGISTER
         USING ACFVAL,R12
         B     *+28
         DC    CL8'ACFVAL'
         DC    CL8'&SYSDATE'
         DC    CL8' &SYSTIME'
         LR    R10,R0               R10 = ADDR OF LOGONID RECORD
         USING LIDREC,R10
         LR    R11,R1               R11 = ADDR OF ACF PARMAMETER LIST
         USING ACSXP,R11
GETCORE  GETMAIN R,LV=WORKSIZE,SP=0
         ST    R1,8(R13)            FORWARD POINTER
         ST    R13,4(R1)            BACKWARD POINTER
         LR    R13,R1               R13 = OUR SAVE AREA
         USING SAVEAREA,R13         ESTABLISH ADDRESSABILITY
         EJECT
INIT     SR    R15,R15              INITIALIZE PROCESSING SWITCHES
         ST    R15,FLAGS            CLEAR FLAGS
         ST    R15,EXITRC           CLEAR EXITRC
         CLI   ACUUFLG1,ACUU1ABE    ABNORMAL ACF CONDITION EXISTS ?
         BE    EXIT                 YES, LET ACF AHNDLE THIS CONDITION
         CLI   ACUUFLG3,ACUU3PGM    IS VALIDATION FOR A PROGRAM NAME?
         BE    EXIT                 YES, LET ACF HANDLE THIS CONDITION
         SPACE 1
         MVI   DSN,C' '             INITIALIZE DSN FIELD IN WORKAREA
         MVC   DSN+1(53),DSN            TO ALL BLANKS
         L     R9,ACUUDSN            LOAD ADDR OF REQUESTED DSN
         MVC   DSN(44),0(R9)         MOVE REQUESTED DSN INTO WORKAREA
         MVC   LOGONID,LIDLID        MOVE REQUESTORS LOGONID TO WORK
         LA    R1,LOGONID            R1 = A(LOGONID)
         LA    R2,8                  R2 = MAX # CHARS IN LOGONID
TRYAGAIN CLI   0(R1),X'40'           THIS POSITION EQUAL TO BLANKS?
         BE    GOTLIDSZ              END OF LOGONID FOUND
         LA    R1,1(R1)              POINT TO NEXT LOGONID POSITION
         BCT   R2,TRYAGAIN           IF NOT END OF FIELD TRY AGAIN
GOTLIDSZ LA    R1,8                  R1 = MAX # CHARS IN LOGONID FLD
         SLR   R1,R2                 R1 = ACTUAL # CHARS IN LOGONID
         BCTR  R1,R0                 REDUCE FOR EXECUTE
         STC   R1,LOGONIDL           SAVE LENGTH FOR LATER TOO     NTLC
         EX    R1,LIDCOMP            COMPARE LOGONID TO DSN INDEX
         BNE   CKDSNTBL              IF NOT EQUAL CHECK DSN TABLE
         LA    R1,1(R1)              R1 = # CHARS IN LOGONID
         LA    R1,DSN(R1)            R1= A(DSN OFFSET BY LOGONID SIZE)
         CLI   0(R1),C'.'            NEXT CHARACTER A PERIOD ?
         BNE   CKDSNTBL              NOPE NO MATCH, TRY DSN TABLE
         MVC   EXITRC,PASSRC         ALLOW HIM TO ACCESS THE D/S
         B     EXIT                  RETURN TO ACF
LIDCOMP  CLC   LOGONID(0),DSN        COMPARE LOGONID TO DSN INDEX
         EJECT
***********************************************************************
*  SEARCH DSNTABLE TO ALLOW FASTPATH ACCESS TO SELECTED DATASETS..    *
*    IF ACCESS IS SUFFICIENT, THEN RC=4..ALLOW ACCESS                 *
***********************************************************************
*  TABLE FORMAT IS:                                                   *
*    ×L×A×F×GRP×GRPL×DSN×L×A×F×GRP×GRPL×DSN×...×L×A×F×GRP×GRPL×DSN×0  *
*  WHERE -                                             FIELD TYPE     *
*    L      - LENGTH OF DATASET NAME IN 'DSN' FIELD   1 BYTE HEX      *
*    A      - DEFAULT ACCESS ALLOWED TO DATASET       1 BYTE HEX      *
*    F      - FLAG BYTE INDICATING AN EXACT MATCH IS  1 BYTE BINARY   *
*                 REQUIRED, OR THAT A GROUP NAME IS     X'80' - EXACT *
*                 PRESENT.                              X'40' - GROUP *
*    GRP    - NAME OF GROUP ALLOWED TO USE DSN        8 BYTES CHAR    *
*    GRPL   - LENGTH OF GROUP NAME IN 'GRP' FIELD     1 BYTE HEX      *
*    DSN    - CONTAINS ACTUAL DATASET NAME            1-44 BYTES CHAR *
*    0      - AS LENGTH BYTE INDICATES END OF TABLE   8 BYTES HEX     *
***********************************************************************
CKDSNTBL L     R3,OPTCSECT         PICK UP ADDRESS OF TABLE(S)
         L     R3,0(R3)            LOAD ADDRESS OF DSNTABLE
         USING NAMES,R3
         SR    R4,R4               INITIALIZE
NEXTENTY IC    R4,STRINGL          PICK UP DSN LENGTH BYTE
         LTR   R4,R4               SEE IF END OF TABLE
         BZ    NOMATCH             YEP..QUIT
         BCTR  R4,0                ADJUST FOR MACHINE LENGTH
         EX    R4,CHECKSTR         SEE IF DSN MATCHES
         BNE   INCR                NO..TRY AGAIN WITH NEXT ENTRY
***********************************************************************
* NOTE:  DSN MAY EQUAL ENTITY EXACTLY OR JUST MATCH THE FIRST PART    *
*    OF THE DATASET NAME..THE FLAG BYTE INCLUDED IN THE TABLE         *
*    DETERMINES WHICH TO USE.                                         *
***********************************************************************
         TM    SFLAGS,EXACTMAT     IS EXACT MATCH REQUIRED?
         BZ    MATCH               NO..CONSIDER IT DONE
*
         LA    R5,DSN             GET START OF SEARCH BUFFER
         AR    R5,R4              POINT TO LAST CHAR TO COMPARE
         CLI   1(R5),C' '         MAKE SURE TOTAL DSN COMPARED
         BE    MATCH                YES..GOOD MATCH
*
INCR     LA    R3,STRING-NAMES+1(R3,R4)  BUMP TABLE PTR BY LEN OF COMP
*                                   EXEC INSTR +13 (ONE FOR EXECUTE,
*                                   ONE FOR LENGTH BYTE, ONE FOR ACCESS
*                                   BYTE, ONE FOR FLAG BYTE, 8 FOR
*                                   GROUP NAME, AND 1 FOR GROUP SIZE).
         B     NEXTENTY             GO FIND THE NEXT ONE.
         SPACE
CHECKSTR CLC   STRING(0),DSN       EXECUTED INSTRUCTION
         EJECT
***********************************************************************
* MATCH MADE...SEE IF AUTHORITY BYTE IN TABLE IS SUFFICIENT TO ALLOW  *
*   REQUESTED ACCESS MODE (FROM ACUUFLG4).                            *
*   R3 POINTS TO THE LENGTH BYTE IN THE DSNTABLE                      *
***********************************************************************
         USING NAMES,R3
MATCH    TM    SFLAGS,USEGROUP   WAS A GROUP SUPPLIED IN DSNTAB
         BZ    CHKACCS           NO..JUST GO CHK ACCESS
         SPACE 1
         MVC   DSN(8),TABGROUP   MOVE GROUP NAME TO DSN
         XR    R2,R2             CLEAR R2
         IC    R2,GRPSIZ         R2 = # OF CHARS IN GROUP NAME
         LA    R1,DSN(R2)        POINT TO BYTE FOLLOWING GROUP IN DSN
         MVI   0(R1),C'.'        INSERT PERIOD AFTER GROUP IN DSN
         LA    R2,1(R2)          INCREASE TO ALLOW FOR INSERTED PERIOD
         LA    R1,44             R1 = MAX # CHARS IN DSN
         SR    R1,R2             R1 = # UNUSED CHARS LEFT IN DSN
         LA    R2,DSN(R2)        R2 = A(DSN)+ # CHARS IN GROUP + PERIOD
         BCTR  R1,R0             REDUCE FOR EXECUTE
         EX    R1,MVNEWDSN       APPEND ORIG DSN TO GROUP NAME IN DSN
         OI    FLAGS,X'80'       INDICATE NEW DSN TO PASS BACK TO ACF
         SPACE 1
CHKACCS  CLI   SACCESS,NONE      NO ACCESS ALLOWED ?
         BE    INSUFFIC          SORRY, CANT AUTHORIZE YOUR ACCESS.
         SPACE 1
         MVC   REQTYPE,ACUUFLG4  COPY REQUEST TYPE FLAG
         NI    REQTYPE,255-128   TURN OFF LIST DELIMITER (IF PRESENT)
         SPACE 1
         CLI   REQTYPE,X'03'     REQUESTOR WANT TO READ THE D/S ?
         BL    GRANTED           IF SO, OK THE REQUEST
         SPACE 1
         CLI   REQTYPE,X'0F'     REQUESTOR WANT TO WRITE THE D/S ?
         BH    CHKALLOC          NO, HE MUST WANT TO ALLOCATE IT.
         TM    SACCESS,WRITE+ALLOC    IS HE ALLOWED TO WRITE IT ?
         BNZ   GRANTED           IF SO LET HIM HAVE THE ACCESS
         B     INSUFFIC          OTHERWISE GIVE HIM THE OLD HEAVE-HO
         SPACE 1
CHKALLOC TM    SACCESS,ALLOC     ALLOCATE AUTHORITY ALLOWED ?
         BO    GRANTED           IF SO, OK THE REQUEST
         B     INSUFFIC          OTHERWISE LET HIM FEND FOR HIMSELF
         SPACE 1
GRANTED  MVC   EXITRC,PASSRC     INDICATE RC=4  ALLOW ACCESS
         SPACE 1
INSUFFIC DS    0H
         L     R1,ACUUCOMM       GET EXIT WORK AREA                 NTL
         TM    SFLAGS,OPSANOK    OPS ANALYST SUPPORT OK?            NTL
         BNO   USERTEST          /NO                                NTL
         MVI   0(R1),C'P'        /YES  INDICATE PROD DATASET        NTL
         B     USERTEST          GO PROCESS
         SPACE
MVNEWDSN MVC   0(0,R2),0(R9)     APPEND ACF DSN BEHIND GROUP NAME
         EJECT
NOMATCH  DS    0H
***********************************************************************
* SEARCH FOR PROPER QUALIFER TO USE                                   *
*    PHASE 1 - LOOK UP DSN PREFIX IN QUALTAB..USE MODEL TO DECIDE     *
*              HOW TO LOOK FOR QUALIFIER.                             *
*    PHASE 2 - EXTRACT QUALIFIER FROM DSNAME AND PERFORM NUMERIC TESTS*
*              (IF SPECIFIED).                                        *
*    PHASE 3 - IF CHECKS PASS, THEN PREFACE THE REQUESTED DSN WITH    *
*              THE EXTRACTED QUALIFIER.                               *
*                                                                     *
***********************************************************************
         SPACE
SRCHQUAL L     R9,OPTCSECT        GET ADDRESS OF ACFDSTBL CSECT
         L     R9,4(R9)           GET ADDRESS OF QUALTAB
         USING QUALS,R9              AND ESTAB ADDRESSIBILITY
         SR    R4,R4              CLEAR WORK REGISTER
         SPACE
NEXTPRFX IC    R4,QPREFIXL       GET LENGTH OF PREFIX TO LOOK FOR
         LTR   R4,R4              END OF TABLE?
         BZ    USERTEST           ..YES..QUIT THIS MESS
         BCTR  R4,0               DECREMENT LENGTH FOR MACHINE
         EX    R4,CLCPREFX        COMPARE DSN:PREFIX
         BE    PROCQUAL            GOTIT..TRY TO PROCESS IT
         SPACE
***********************************************************************
* NOTE:  THIS METHOD OF CYCLING IS USED SINCE A RECYCLE CAN BE CAUSED *
*        BY FAILING A TEST IN PHASE 2 OR 3.  SINCE REGISTER 4 IS USED *
*        AS A WORK REGISTER IN THESE SECTIONS, IT IS SAFER TO RELOAD  *
*        THE REGISTER WITH THE PREFIX LENGTH (BETTER THAN S0C4...)    *
***********************************************************************
INCPREFX SR    R4,R4               GET SET TO TRY NEXT PREFIX TEST
         IC    R4,QPREFIXL         GET LENGTH OF CURRENT PREFIX
         LA    R9,QPREFIX-QUALS(R9,R4)  BUMP POINTER TO NEXT PREFIX
         B     NEXTPRFX            AND GO GET NEXT QUALIFIER
        EJECT
***********************************************************************
* PHASE 2 - WE GOT A PREFIX THAT LOOKS LIKELY..EXTRACT QUALIFIER      *
*           DESIRED.  IF FAILURE..THEN RETURN TO GET NEXT QUALTAB     *
*           ENTRY.                                                    *
***********************************************************************
PROCQUAL CLI   QUALOFF,X'02'      SEE IF ANY CHANGE REQUIRED
         BL    INCPREFX            QUALIF OFFSET = 0 OR 1..NO CHANGE
         CLI   QUALOFF,X'08'      SEE IF TOO BIG
         BH    INCPREFX            >8 SO SPLIT
         SPACE 1
         L     R3,ACUUDSN         POINT TO ACF2'S VERSION OF DSNAMENLTC
         LA    R5,43(,R3)         END OF SEARCH ADDR - 1
         XC    QUALCNT,QUALCNT    INIT NUMBER OF QUALIF
         SPACE 1
NXTQUAL  LA    R4,1               SET INCREMENT
         ST    R3,QUALSTRT        SAVE START ADDR FOR QUAL IN ACUUDSN
NXTCHAR  CLI   0(R3),C'.'         SEE IF PERIOD
         BE    FOUND               YES..
         CLI   0(R3),C' '         SEE IF BLANK..(END OF DATASET NAME)
         BE    FOUND
         BXLE  R3,R4,NXTCHAR      INCREMENT TEST AND BRANCH
         SPACE 1
FOUND    A     R4,QUALCNT         INCREMENT NUMBER OF QUALIFIERS
         ST    R4,QUALCNT         AND SAVE IT
         CLC   QUALCNT+3(1),QUALOFF  IS THIS THE ONE
         BE    FNDQUAL            YES..GO DOIT
         CLI   0(R3),C' '         IS THIS THE END?
         BE    INCPREFX           YES..NO CAN FIND THE RQSTED QUAL
         LA    R3,1(,R3)          NO..BUMP AND
         B     NXTQUAL                GRIND
         EJECT
***********************************************************************
* PHASE 3 - FOUND A QUALIFIER CANDIDATE..CHECK SPECED NUMERICS        *
***********************************************************************
FNDQUAL  S     R3,QUALSTRT       SUBTRACT OFF QUALIFIER START
         ST    R3,QUALLEN        SAVE QUALIFIER LENGTH
         SPACE
         SR    R1,R1             CLEAR A WORK REGISTER
         IC    R1,QNUMOFF        GET OFFSET TO USE FOR COMPARE
         L     R2,QUALSTRT       GET ADDR OF START OF QUALIF
         AR    R2,R1             BUMP OFFSET FOR MVZ EXTRACT
*
         IC    R1,QNUMCNT        GET COUNT OF CHARS TO MOVE
         LTR   R1,R1             IF 0, THEN NO NUMERIC CHECK
         BNP   NONUMCHK           SO SKIP THE MVZ AND COMPARE
*
         BCTR  R1,0              ADJUST FOR MACHINE LENGTH
CHKNUMB  XC    ZONECHK,ZONECHK   CLEAR OUT WORK AREA
         EX    R1,NUMMVZ         DO MVZ TO ZONECHK
         EX    R1,CLCZONES       COMPARE TO NUMERIC ZONES
         BNE   INCPREFX           NOT NUMERIC..GET ANOTHER PREFIX
         SPACE
NONUMCHK SR    R1,R1             CLR WORK REG
         IC    R1,QUALLENM       GET MAX LENGTH FROM QUALTAB
         L     R3,QUALLEN        GET CURRENT QUALIFIER LENGTH
         CR    R3,R1             COMPARE QUALLENGTH:MAX USE
         BNH   CHKOPSAN          OK..USE THE LENGTH FOUND           NTL
         LR    R3,R1             NO..USE LENGTH MAX FROM QUALTAB
         SPACE 1                                                    NTL
CHKOPSAN L     R1,ACUUCOMM       GET EXIT WORK AREA                 NTL
         TM    QFLAGS,QOPSANAL   OPS ANALYST SUPPORT OK?            NTL
         BNO   CHNGQUAL          /NO                                NTL
         MVI   0(R1),C'P'        /YES  INDICATE PROD DATASET        NTL
         EJECT
******************************************************************
*   MOVE QUALIFIER TO DSN...IT NOW BECOMES THE HIGH ORDER INDEX. *
*       NEXT INSERT A PERIOD AFTER THE QUALIFIER IN DSN. FINALLY *
*       APPEND THE ORIGINALLY REQUESTED DATASET NAME BEHIND THE  *
*       INSERTED PERIOD CREATING THE REMAINING DSN INDEXES FOR   *
*       THE NEW DATASET NAME THAT WILL BE PASSED BACK TO ACF.    *
******************************************************************
         SPACE 1
CHNGQUAL LA    R2,DSN           (R2) POINTS TO POSIT TO MOVE QUAL  NTLC
*                               (R3)=LENGTH OF QUALIFIER           NTLC
         L     R4,QUALSTRT      (R4)=ADDR OF QUALIFIER             NTLC
*                                    IN ACUUDSN                    NTLC
         LA    R5,QAPPEND       (R5)= ADDR OF APPEND STRING        NTLC
         SR    R6,R6                                               NTLC
         IC    R6,QAPPENDL      (R6)= LENGTH OF APPEND STRING      NTLC
         SPACE ,                                                   NTLC
         TM    QFLAGS,QDOAPND                                      NTLC
         BZ    CHGQUAL0         NO APPEND WANTED                   NTLC
         TM    QFLAGS,QDOSUFX   DO AS SUFFIX                       NTLC
         BO    CHGSUFX          YES..DO AS SUFFIX QQQAAAA          NTLC
         SPACE ,                                                   NTLC
* DO AS PREFIX TYPE       AAAAQQQQ MODE                            NTLC
         SPACE ,                                                   NTLC
CHGPRFX  MVC   DSN(8),QAPPEND   MOVE APPEND AS PREFIX TO QUALIF.   NTLC
         LA    R2,DSN(R6)       ADJUST POSITION TO PLACE QUALIFIER NTLC
         BCTR  R3,0             ADJUST LENGTH OF QUALIFIER FOR MACHNTLC
         EX    R3,MVCQUAL       MOVE IN QUALIFIER                  NTLC
         LA    R3,1(R3)         READJUST LENGTH OF QUALIFIER       NTLC
         B     CHGQUAL1         GO PUT PERIOD AFTER DSNAME         NTLC
         SPACE ,                                                   NTLC
* DO AS SUFFIX TYPE       QQQQAAAA MODE                            NTLC
         SPACE ,                                                   NTLC
CHGSUFX  BCTR  R3,0             ADJUST LENGTH OF QUALIFIER FOR MACHNTLC
         EX    R3,MVCQUAL       MOVE IN QUALIFIER                  NTLC
         LA    R3,1(R3)         READJUST LENGTH OF QUALIFIER       NTLC
         LA    R2,DSN(R3)       POINT AFTER QUALIFIER              NTLC
         MVC   0(8,R2),QAPPEND  MOVE IN APPEND STRING              NTLC
         B     CHGQUAL1         GO PUT PERIOD AFTER DSNAME..       NTLC
         SPACE ,                                                   NTLC
* DO AS NORMAL (NO APPEND TYPE) QQQQQQQQ MODE                      NTLC
         SPACE ,                                                   NTLC
CHGQUAL0 BCTR  R3,0             ADJUST FOR MACHINE LENGTH          NTLC
         EX    R3,MVCQUAL       MOVE QUALIFIER TO DSNAME           NTLC
         LA    R3,1(R3)         BUMP COUNT BACK UP                 NTLC
         B     CHGQUAL1         GO PUT PERIOD AFTER DSNAME         NTLC
         EJECT ,                                                   NTLC
* PERFORM REST OF QUALIFIER GENERATION..ADD PERIOD AND             NTLC
* REST OF DSNAME TO QUALIFIER IN <DSN>                             NTLC
*                                                                  NTLC
* NOTE: (R3) CONTAINS LENGTH OF QUALIFIER                          NTLC
*       (R6) CONTAINS LENGTH OF APPEND ENTRY (MAY BE 0)            NTLC
*                                                                  NTLC
         SPACE ,                                                   NTLC
CHGQUAL1 AR    R3,R6             ADJUST TOTAL QUALIFIER LENGTH     NTLC
         LA    R4,DSN(R3)        R4 = A(DSN) OFFSET BY QUALIFIER LGTH
         MVI   0(R4),C'.'        INSERT PERIOD AFTER QUALIFIER IN DSN
         SPACE 1
         LA    R3,1(R3)          R3 = # OF CHARS IN QUALIFIER + PERIOD
         LA    R4,44             R4 = MAX # CHARS IN DSN
         SR    R4,R3             R4 = # UNUSED CHARS LEFT IN DSN
         LA    R5,DSN(R3)        R5 = A(DSN) + QUALIFIER LNGTH + PERIOD
         L     R1,ACUUDSN        POINT TO ORIGINAL DSN
         BCTR  R4,R0             REDUCE FOR EXECUTE
         EX    R4,QDSNMOVE       APPEND ORIG DSN BEHIND QUALIFIER
         OI    FLAGS,X'80'       INDICATE NEW DSN TO PASS BACK TO ACF
         B     USERTEST          GO CHECK IF LOGONID NOW EQUAL DS INDX
         SPACE 2
* EXECUTED INSTRUCTIONS                                            NTLC
         SPACE 2                                                   NTLC
CLCPREFX CLC   DSN(0),QPREFIX         COMPARE DSN:PREFIX
NUMMVZ   MVZ   ZONECHK(0),0(R2)       MOVE ZONES FOR NUMERIC CHECK
CLCZONES CLC   ZONECHK(0),ZONEMASK    COMPARE ZONES FOR NUMERICS
MVCQUAL  MVC   0(0,R2),0(R4)          MOVE QUALIFIER TO DSN
MVCAPND  MVC   0(0,R2),QAPPEND        MOVE APPEND STRING TO QUALIFIER
QDSNMOVE MVC   0(0,R5),0(R1)     APPEND ACF DSN TO NEWLY INSERTED QUAL
         EJECT
***********************************************************************
*  SEE IF LOGONID MATCHES HIGH LEVEL INDEX, IF SO ALLOW ACCESS.       *
***********************************************************************
         SPACE 1
USERTEST TM    FLAGS,X'80'           DSN HI-ORDER INDEX CHANGED ?
         BZ    EXIT                  NO, THEN SKIP DSN/LOGONID COMPARE
*
*   DSN HIGH ORDER INDEX HAS BEEN CHANGED, SEE IF LOGONID NOW MATCHES
*
         SR    R1,R1                 CLEAR A REGISTER              NTLC
         IC    R1,LOGONIDL           GET LEN OF LOGONID SAVED BEFORETLC
         EX    R1,USERCOMP           COMPARE LOGONID TO DSN INDEX
         BNE   EXIT                  IF NOT EQUAL LET ACF PROCESS IT
         LA    R1,1(R1)              R1 = # CHARS IN LOGONID
         LA    R1,DSN(R1)            R1= A(DSN OFFSET BY LOGONID SIZE)
         CLI   0(R1),C'.'            NEXT CHARACTER A PERIOD ?
         BNE   EXIT                  NOPE NO MATCH, LET ACF PROCESS IT
         MVC   EXITRC,PASSRC         ALLOW HIM TO ACCESS THE D/S
         B     EXIT                  RETURN TO ACF
USERCOMP CLC   LOGONID(0),DSN        COMPARE LOGONID TO DSN INDEX
         EJECT
***********************************************************************
*  PREPARE TO RETURN                                                  *
***********************************************************************
OTHER    DS    0H
NONAME   DS    0H
OLDLEVEL DS    0H
         B     EXIT
         SPACE 2
***********************************************************************
*   RETURN TO CALLER                                                  *
***********************************************************************
EXIT     DS    0H
         TM    FLAGS,X'80'           DSN HIGH-ORDER INDEX BEEN CHANGED?
         BZ    EXITCONT              NOPE, JUST EXIT WITH RC
         L     R1,ACUUDSN            GET ADDR OF ORIGINAL DSN
         MVC   0(44,R1),DSN          REPLACE ORIG DSN WITH WORK DSN
EXITCONT LR    R1,R13                HOLD NEW SAVE AREA FOR FREEMAIN
         ICM   R15,B'1111',EXITRC     LOAD RETURN CODE
         L     R13,SAVEOLD           ADDRESS PRIOR SAVE AREA
         ST    R15,SAVE15            SET UP R15 FOR LM RESTORE
FREECORE FREEMAIN R,A=(1),LV=WORKSIZE,SP=0
         XC    SAVENEW,SAVENEW       BREAK SAP CHAIN
         LM    R14,R12,SAVE14        RESTORE REGISTERS
         BR    R14                   AND RETURN TO CALLER...
         EJECT
***********************************************************************
* CONSTANTS                                                           *
***********************************************************************
         SPACE 2
F16      DC    F'16'
OPTCSECT DC    V(ACFDSTBL)
ZONEMASK DC    XL8'F0F0F0F0F0F0F0F0'    MASK FOR NUMERIC ZONE COMPARE
NEGONE   DC    F'-1'
PASSRC   DC    F'4'    RETURN CODE OF ALLOW ACCESS
         SPACE
         LTORG
         SPACE 2
PATCH    DC    32S(*)    PATCH AREA..INIT TO BASE / DISPLACEMENT
         EJECT
***********************************************************************
* SAVE AREA AND WORK AREA                                             *
***********************************************************************
SAVEAREA DSECT
SAVEPLI  DS    F
SAVEOLD  DS    F
SAVENEW  DS    F
SAVE14   DS    F
SAVE15   DS    F
SAVE0    DS    F
SAVE1    DS    F
SAVE2    DS    F
SAVE3    DS    F
SAVE4    DS    F
SAVE5    DS    F
SAVE6    DS    F
SAVE7    DS    F
SAVE8    DS    F
SAVE9    DS    F
SAVE10   DS    F
SAVE11   DS    F
SAVE12   DS    F
SAVESIZE EQU   *-SAVEAREA
         SPACE
WORKAREA EQU   *
QUALCNT  DS    F
FLAGS    DS    F
EXITRC   DS    F
QUALSTRT DS    F
QUALLEN  DS    F
ZONECHK  DS    CL8
DSN      DS    CL44
         DS    CL10
LOGONID  DS    CL8
LOGONIDL DS    X
REQTYPE  DS    X
WORKSIZE EQU   *-SAVEAREA
         EJECT
***********************************************************************
*   MISCELLANEOUS EQUATES                                             *
***********************************************************************
ALLOC    EQU   X'08'
WRITE    EQU   X'04'
READ     EQU   X'02'
EXEC     EQU   X'01'
NONE     EQU   X'00'
         SPACE
***********************************************************************
* DATA SET DEFAULT TABLE MAPPING                                      *
***********************************************************************
         SPACE
NAMES    DSECT
STRINGL  DS    X           LENGTH OF DSNAME
SACCESS  DS    X           ACCESS VALUE MAPPED BY NAMCACC
SFLAGS   DS    X           FLAGS FOR USE
EXACTMAT EQU   X'80'       REQUIRE EXACT MATCH FOR DATASET NAME
USEGROUP EQU   X'40'       GROUP SUPPLIED FOR DSN
OPSANOK  EQU   X'20'       OPS-ANALYST AUTH IS OK                   NTL
GRPSIZ   DS    X           NUMBER OF CHARS IN GROUP NAME
TABGROUP DS    CL8         GROUP NAME TO USE
STRING   DS    CL44        DSNAME OR PART QUALIF DSNAME
         SPACE 2
QUALS    DSECT             MAPPING FOR QUALTAB ENTRY
QPREFIXL DS    X           LENGTH OF PREFIX
QUALOFF  DS    X           QUALIFIER TO USE >=2 AND <= 8
QUALLENM DS    X           MAX # CHARS IN QUAL TO MOVE
QNUMOFF  DS    X           CHARACTER OFFSET FOR START OF NUMERIC CLC
QNUMCNT  DS    X           # CHARACTERS TO CHK FOR NUMERICS
QFLAGS   DS    X           FLAGS FOR OPERATION
QDOAPND  EQU   X'80'         DO APPEND OPERATION                   NTLC
QDOSUFX  EQU   X'40'         DO SUFFIX APPEND                      NTLC
QOPSANAL EQU   X'20'         OPS-ANALYST AUTH IS OK                 NTL
QAPPENDL DS    X           LENGTH OF APPEND STRING                 NTLC
QAPPEND  DS    CL8         APPEND STRING FOR QUALIFIER             NTLC
QPREFIX  DS    CL10        THE PREFIX TO CHECK FOR
         EJECT
********************************************************************
*      ACF AND OS/VS2 CONTROL BLOCKS                               *
********************************************************************
         ACSXP
         EJECT
         ACUCB
         EJECT
         LIDREC
         END
