*          DATA SET HEXCONV    AT LEVEL 001 AS OF 06/29/78
HEXCONV TITLE  'PL1 OPT SUBROUTINE - CONVERT THINGS TO HEX CHARS'
      MTITL  'HEXCONV - CONVERT BIN,BIT&&CHAR INFO TO HEX',LEN=45
*
*      HEXCONV - A PROGRAM TO CONVERT BIT-STRINGS , CHAR STRINGS
*                  AND FIXED POINT NUMBERS TO HEX-CHARACTER STRING
*                  FORM .
*                TO BE CALLED BY PROGRAMS WRITTEN IN PL/I OPT.&CHK.
*    INVOKED EITHER BY CALL STATMENT OR BY FUNCTION REFERENCE.
*    TWO ARGUMENTS ACCEPTED :
*       INPUT : BIT-STRING,CHAR-STRING,FULLWORD(FIXED BIN(31)),
*               POINTER OR HALFWORD(FIXED BIN(15)).
*               STRINGS MAY BE FIXED OR VARYING.
*               DIFFERENT ARG-TYPES ARE EXPECTED AT DIFFERENT ENTRY
*               POINTS.
*               ENTRY POINT SHOULD BE SELECTED BY THE CALLING PROGRAM
*               THAT CAN BE DONE BY INCLUDING A GENERIC DCL OF HEXCONV.
*               HOWEVER THERE ARE A FEW ENTRIES THAT CANNOT BE SELECTED
*               THROUGH THE USE OF THE GENERIC DCL AND SHOULD BE
*               EXPLICITLY DECLARED AND NAMED ON INVOKATION.
*               THOSE ENTRY POINTS CAN BE FOUND AS COMMENTS IN THE
*               INCLUDED GENERIC DECLARATION .
*       OUTPUT: CHAR-STRING, AT LEAST TWICE THE LENGTH OF INPUT.
*               MAY BE FIXED OR VARYING.
         SPACE 2
*                WRITTEN BY AHARON LEVY ,
*                    COMPUTER CENTRE ,
*                    TECHNION ,HAIFA .
*
*
          STITL  'SET ENTRY AND PL/I ENV.- ARG=CHAR'
HEXCONV  START
HEXFCC   GETDSA
HEXCVC   EQU    HEXFCC
HEXVCVC  EQU    HEXFCC
HEXFVCVC EQU    HEXFCC
HEXFCVC  EQU    HEXFCC
HEXFVCC  EQU    HEXFCC
HEXVCC   EQU    HEXFCC
HEXCC    EQU    HEXFCC
         ENTRY  HEXFVCVC,HEXFCVC,HEXVCC,HEXCC,HEXCVC,HEXVCVC,HEXFVCC
*
* ->->->-> ENTER HERE IF INPUT IS A CHAR-STRING <-<-<-<-<-<-<-<-<-<
         L      AR,=A(HEXCONV)
         USING  HEXCONV,AR
*
         MVI    FLAG,INSTR+OUTSTR
         B      PARMCHK                     ======>>
*
          STITL  'SET ENTRY AND PL/I ENV.- ARG=BIT '
HEXFBC   GETDSA
HEXVBVC  EQU    HEXFBC
HEXBVC   EQU    HEXFBC
HEXFVBC  EQU    HEXFBC
HEXFVBVC EQU    HEXFBC
HEXFBVC  EQU    HEXFBC
HEXVBC   EQU    HEXFBC
HEXBC    EQU    HEXFBC
         ENTRY  HEXFVBVC,HEXFBVC,HEXVBC,HEXBC,HEXVBVC,HEXBVC,HEXFVBC
*
* ->->->-> ENTER HERE IF INPUT IS A BIT-STRING  <-<-<-<-<-<-<-<-<-<
         L      AR,=A(HEXCONV)
         USING  HEXCONV,AR
*
         MVI    FLAG,INSTR+OUTSTR+INBIT
         B      PARMCHK                     ======>>
*
          STITL  'SET ENTRY AND PL/I ENV.- ARG=FULLWORD'
HEXFFC   GETDSA
HEXFC    EQU    HEXFFC
HEXFVC   EQU    HEXFFC
HEXFFVC  EQU    HEXFFC
HEXPC    EQU    HEXFFC
HEXPVC   EQU    HEXFFC
HEXFPVC  EQU    HEXFFC
HEXFPC   EQU    HEXFFC
         ENTRY  HEXFFVC,HEXFC,HEXFVC
         ENTRY  HEXFPC,HEXFPVC,HEXPC,HEXPVC
*
* ->->->-> ENTER HERE IF INPUT IS A FULLWORD OR A PTR <-<-<-<-<-<-<
         L      AR,=A(HEXCONV)
         USING  HEXCONV,AR
*
         MVI    FLAG,OUTSTR
         LA     R7,4                    * INPUT LENGTH KNOWN TO BE 4.
         B      PARMCHK                     ======>>
          STITL  'SET ENTRY AND PL/I ENV.- ARG=HALFWORD'
*
HEXFHC   GETDSA
HEXHC    EQU    HEXFHC
HEXHVC   EQU    HEXFHC
HEXFHVC  EQU    HEXFHC
         ENTRY  HEXFHVC,HEXHC,HEXHVC
*
* ->->->-> ENTER HERE IF INPUT IS AN HALFWORD <-<-<-<-<-<-<
         L      AR,=A(HEXCONV)
         USING  HEXCONV,AR
*
         MVI    FLAG,OUTSTR
         LA     R7,2                    * INPUT LENGTH KNOWN TO BE 2.
         B      PARMCHK                     ======>>
         STITL  'GET ARGUMENTS'
*
*      TEST  PARMLIST AND  I N F O R M  CALLER ABOUT FAULTS .
*
PARMCHK  EQU    *                                  <<======
         TM     0(BR),LASTPARM
         BO     PRMSIG                  * ONLY ONE ARGUMENT ??? ==>
         TM     4(BR),LASTPARM          * BUT NO MORE THAN TWO .
         BZ     PRMSIG                  * WRONG # OF ARGS  ==>
*
*     CHECK INPUT ARGUMENT .
*
         XR     R0,R0                   * ZERO WORK REGISTER .
         LM     R4,R5,0(BR)             * GET PARMLIST .
         TM     FLAG,INSTR              * INPUT EXPECTED AS STRING ?
         BZ     NOSTRINP                * -NO ==>
*                                       * -YES :
         LH     R7,4(,R4)               * GET LENGTH (FIXED OR MAX.) .
         TM     6(R4),VARSTR            * IS IT A VARYING STRING ?
         L      R4,0(,R4)               * GET STRING ADDRESS .
         BZ     NOVARINP                * -NOT VARYING  ==>
*                                       * -YES (VARYING) :
         LH     R7,0(,R4)               * SO GET ACTUELLE LONGTITUDE .
         LA     R4,2(,R4)               * UPDATE START-ADDR. OF STRING.
NOVARINP EQU    *
         TM     FLAG,INBIT              * IS IT A BIT STRING ?
         BZ     NOSTRINP                * -NO ==>
*                                       * -YES ,
         STC    R7,WKA                  * STORE RIGHT BYTE OF IN-LENGTH
         TM     WKA,NOFOUR              * IS INP MULTIPLE OF FOUR BITS?
         BO     NOTFOUR                 * NO - UNACCEPTABLE ==>
         TM     WKA,HALFB               * IS INP AN ODD MULTIPLE OF
*                                       *      HALF-BYTES ?
         BZ     NOHALFB                 * NO  ==>
         OI     FLAG,HALFBYTE           * YES - PASS ON INFO .
         LA     R0,1                    * INCREMENT TO OUTPUT LENGTH .
NOHALFB  EQU     *
         SRL    R7,3                    *       CONVERT LENGTH TO BYTES
NOSTRINP EQU    *
         LA     R8,0(R7,R7)             * SET REGISTER WITH VALUE
*                                       *  OF DOUBLE INPUT-LENGTH .
         AR     R8,R0                   * ODD/EVEN HALF-BYTES IN OUTP
         AR     R7,R0                   * ODD/EVEN HALF-BYTES IN INPUT
*
*     CHECK OUTPUT ARGUMENT .
*
         TM     FLAG,OUTSTR             * OUTPUT EXPECTED AS A STRING ?
         BZ     NOSTROUT                * -NO (FOR FUTURE USE) ==>
*                                       * -YES :
         LH     RX,4(,R5)               * GET LENGTH (FIXED OR MAX.) .
         TM     FLAG,OUTBIT             * IS IT A BIT STRING ?
         BZ     NOBITOUT                * -NO ==>
*                                       * -YES :
         SRL    RX,3                    * CONVERT LENGTH TO BYTES .
NOBITOUT EQU    *
         SR     RX,R8                   * IS OUTPUT AT LEAST TWICE
*                                            INPUT LENGTH ?
         BM     LENSIG                  * -NO : I N F O R M ! ==>
         BZ     OKOUTLEN                * -OUTPUT LENGTH AS DESIRED .
*                                       * OUTPUT LONGER THAN NEEDED
         OI     FLAG,PADNEED            * PASS ON INFO .
         STH    RX,PADLEN               *
OKOUTLEN EQU    *
         TM     6(R5),VARSTR            * IS IT A VARYING STRING ?
         L      R5,0(,R5)               * GET STRING ADDRESS .
         BZ     NOVAROUT                * -NO  VARYING  ==>
*                                       * -YES (VARYING) :
         LR     RX,R8                   * USE A WORK REGISTER .
         TM     FLAG,OUTBIT             * IS IT A BIT STRING ?
         BZ     NOBITO2                 * -NO ==>
*                                       * -YES :
         SLL    RX,3                    * MULTIPLY LENGTH BY 8 .
NOBITO2  EQU    *
         STH    RX,0(,R5)               * CHANGE ACTUAL OUTPUT LENGTH .
         LA     R5,2(,R5)               * UPDATE OUTPUT ADDRESS .
         STITL  'CONVERT'
*
NOVAROUT EQU    *
NOSTROUT EQU    *
*
*   USE VALUES OBTAINED FROM PARMLIST TO SET REGISTERS
*         TO INITIAL VALUES FOR CONVERSION OPERATION .
*
*  REGISTERS' CONTENTS AT THIS POINT :
*     R0     - 0 IF EVEN HALFBYTES IN INPUT.
*              1 IF ODD  HALFBYTES IN INPUT.
*     AR(R3) - =A(HEXCONV) - USED AS BASE .
*     R4     - INPUT ADDRESS .
*     R5     - OUTPUT ADDRESS .
*     R7     - INPUT LENGTH .
*     R8     - OUTPUT LENGTH .
*
*  REGISTERS' USAGE IN FOLLOWING CODE IS :
*     R1     - USED TO EXECUTE UNPK INSTRUCTION (OLEN××ILEN) .
*     R2     - USED TO EXECUTE TRANSLATE AND MVC INSTRUCTIONS (OLEN) .
*     R6     - INCREMENT (=14) .
*     R9     - "END OF LOOP" BRANCHING ADDRESS, INITIALIZED TO "MORE",
*                 CHANGED TO "NOMORE" , WHEN DECIDED TO STOP LOOPING .
*     RX(R10)- NEGATED MAX UNPACK SECOND OPERAND LENGTH (=-7) .
*     RY(R11)- MAX UNPACK SECOND OPERAND LENGTH (=7) .
*
         LA     R1,231                  * MAX OUT.LEN××MAX INP.LEN .
         LA     R2,13                   * MAX OUTPUT LENGTH
*
         LA     RY,7                    * R11=7 ,INPUT ADDRESS INCR.
         LNR    RX,RY                   * R10=-7 ,USED AS DECREMENT
*                                       *     WITH "BXH" .
         LA     R6,14                   * R6=14, OUTPUT ADDRESS INCR.
         LA     R9,MORE                 * "END OF LOOP" BRANCH ADDRESS
         AR     R7,RY                   * FOR FIRST "BXH" ADD INCREMENT
*                                       *     TO LENGTH .
*
MORE     BXLE   R7,RX,LOWLEN            * START LOOP .
ONEMORE  EQU    *
         EX     R1,UNPK                 * UNPACK INTO WK AREA
         EX     R2,TR                   * TRANSLATE
         EX     R2,MVC                  * MOVE INTO OUTPUT ARGUMENT
*
         AR     R5,R6                   * UPDATE OUTPUT ADDRESS
         AR     R4,RY                   * UPDATE INPUT ADDRESS
         BR     R9                      * "END OF LOOP" -
*                                       *   "MORE" TRANSLATION , OR
*                                       *   "NOMORE" .
*
LOWLEN   EQU    *                       * RESIDUAL INPUT LENGTH LOWER
*                                       *  THAN MAX UNPACK POSSIBLE .
         LA     R9,NOMORE               * CHANGE "END OF LOOP" BRANCH
*                                       *    TO "NOMORE" .
         LR     R1,R7                   * GET RES. INPUT LENGTH ,
         SLL    R1,1                    * MULT. BY 2 TO GET RES. OUTPUT
         LR     R2,R1                   * MOVE OUT LEN TO R2
         TM     FLAG,HALFBYTE           * IS INPUT ODD ?
         BZ     NODECR                  * IF SO DON'T DECR. OUT LENGTH
         BCTR   R2,0                    * DECR. OUT FOR EVEN
NODECR   EQU    *
         LR     RY,R2                   * UPDATE ADDRESS
         LR     R6,R2                   *  INCREMENTS .
         SLL    R6,1                    *
         BCTR   R2,0                    * DECR. RES. OUT LEN BY 1 .
         SLL    R1,4                    * LOAD R1 (OLEN××ILEN, FOR EX)
         OR     R1,R7
         B      ONEMORE                 * ONE MORE MOVE TO BE EXECUTED
NOMORE   EQU    *
         TM     FLAG,PADNEED
         BZ     RETURN
         LH     R7,PADLEN
         LR     R6,R5
         LR     RX,R6
         XR     RY,RY
         ICM    RY,8,=C' '
         MVCL   R6,RX
         B      RETURN
         STITL  'RETURN'
         EJECT
*
*     I N F O R M A T I O N S   SECTION .
*
LENSIG   PLISIG PRMLEN                  * TOO SHORT OUTPUT STRING .
         B      ERRSIG                  * ON CONDITION UNIT RETURNED .
*
NOTFOUR  PLISIG GVUL                    * INVALID INPUT BIT LENGTH
         B      ERRSIG                 * THE POOR GUY DIDN'T UNDERSTAND
*
PRMSIG   PLISIG #PRMS                   * ERROR DETECTED IN NO. OF ARGS
*
ERRSIG   PLISIG PLIERR                  * ON CONDITION UNIT RETURNED...
*                                       * ON ERROR UNIT RETURNED .
RETURN   FREEDSA                        *    RETURN HOME . ****>>>>
         STITL  'CONSTANTS'
*
*                 PL/I ICB'S .
*
#PRMS    PLIICB COND,#ARGS
PRMLEN   PLIICB COND,OUTLEN
GVUL     PLIICB COND,ORECH
PLIERR   PLIICB ERR
*
*                  STATMENTS USED WITH THE EXECUTE OPERATION .
*
UNPK     UNPK   WKA(0),0(0,R4)
TR       TR     WKA(0),TABTR
MVC      MVC    0(0,R5),WKA
*
*                  TRANSLATION TABLE .
*
TABTR    EQU    *-240
         DC     X'F0F1F2F3F4F5F6F7F8F9'
         DC     X'C1C2C3C4C5C6'
*
LASTPARM EQU    X'80'
VARSTR   EQU    X'80'
HALFB    EQU    X'04'
NOFOUR   EQU    X'03'
*
         LTORG
*
         STITL  'DSECTS   '
         IBMBXLB
         IBMBXER
IBMBZDSA DSECT
         ORG    COCL
PADLEN   DS     H
FLAG     DS     CL1
*   FLAGS' MEANINGS :
INSTR    EQU    X'01'
OUTSTR   EQU    X'80'
INBIT    EQU    X'02'
OUTBIT   EQU    X'40'
HALFBYTE EQU    X'04'
PADNEED  EQU    X'20'
WKA      DS     CL16
SAVEND   EQU    *
*
         END
