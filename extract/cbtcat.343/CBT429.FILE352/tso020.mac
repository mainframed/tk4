*          DATA SET TSO020     AT LEVEL 003 AS OF 03/20/86
*
*     THIS IS THE TSO 'DJ' COMMAND
*
*
*    NOTE: MAKE SURE YOU CLEAR THE BASE REGISTERS HIGH ORDER BYTE. IF
*              YOU DO NOT USE THE DEFAULT 'START' LABEL THEN YOU MUST
*              DO THIS YOURSELF AFTER ENTERING YOUR MAINLINE CODE.
*
*
* THIS LITTLE  GEM WILL SCURRY AROUNT THE ASCBS AND CSCBS TO DISPLAY
*   THE  JOBS RUNNING IN THE SYSTEM (MODIFIED FOR SUPV I AND II S.U.)
*
* THROUGH STEALTH, THIS CODE IS NON PRIVLEDGED (ASSUMING THAT SQA IS
*  NOT FETCH PROTECTED.
*
* THIS WORKS FOR OS/VS2 REL 3.7 AND REQUIRES MACROS FROM
*   SYS1.AMODGEN
* KEN TRUE     FAIRCHILD CAMERA AND INSTRUMENT 22 OCT 76
*
*   03/19/86 - ADDED 31 BIT ADDRESSING FOR RMCT, TO WORK IN XA MODE
*
*     MODIFIED TO WORK AS TSO COMMAND OR OPER STC     K TRUE  27MAY77
*       ADD SWAP STATUS AND REASON CODE FROM OUCB       "       "
*
*
         PRINT OFF     MACROS BE HERE....                          NTL1
         MACRO
&NAME    PGM   &BASE=R12,&SAVE=$$SAVE,&START=$$START,&EOJ=$$EOJ,&RC=16
&NAME    CSECT
         B     14(0,R15)           BRANCH AROUND PROGRAM ID.
         DC    AL1(8)              CSECT NAME LENGTH.
         DC    CL8'&NAME'          CSECT IDENTIFIER.
         DC    X'FF'               FILLER.
         STM   R14,R12,12(R13)     STORE THE REGISTERS.
         BALR  &BASE,0             ESTABLISH ADDRESSABILITY.
         USING *,&BASE             TELL ASSEMBLER ABOUT BASE REGISTER.
R0       EQU   0                   REGISTER 0.
R1       EQU   1                   REGISTER 1.
R2       EQU   2                   REGISTER 2.
R3       EQU   3                   REGISTER 3.
R4       EQU   4                   REGISTER 4.
R5       EQU   5                   REGISTER 5.
R6       EQU   6                   REGISTER 6.
R7       EQU   7                   REGISTER 7.
R8       EQU   8                   REGISTER 8.
R9       EQU   9                   REGISTER 9.
R10      EQU   10                  REGISTER 10.
R11      EQU   11                  REGISTER 11.
R12      EQU   12                  REGISTER 12.
R13      EQU   13                  REGISTER 13.
R14      EQU   14                  REGISTER 14.
R15      EQU   15                  REGISTER 15.
         LA    R15,&SAVE           ADDRESS OF OUR SAVE AREA.
         ST    R13,4(R15)          BACKWARD SAVE AREA CHAIN.
         ST    R15,8(R13)          FORWARD SAVE AREA CHAIN.
         LR    R13,R15             POINT R13 TO CURRENT SAVE AREA.
         B     &START              BRANCH TO ENTRY CODE.
&EOJ     CH    R15,$$RC            IS RETURN CODE HIGHER THAN &RC?
         BNH   *+6                 YES - LETS ZERO R15.
         SR    R15,R15             ZERO OUT REGISTER 15.
         L     R13,&SAVE+4         POINT R13 TO PREVIOUS SAVE AREA.
         L     R14,12(R13)         RESTORE REGISTER 14.
         LM    R0,R12,20(R13)      RESTORE THE REGISTERS.
         BR    R14                 RETURN TO OS.
&SAVE    DS    18F                 OUR SAVE AREA.
$$RC     DC    H'&RC'              RETURN CODE.
$$START  DS    0H                  DEFAULT ENTRY POINT.
         LA    &BASE,0(,&BASE)     CLEAR HIGH ORDER BYTE FOR MVS/XA
         MEND
         PRINT ON      ..FINIS MACROS..                            NTL1
LINKREG  EQU   6                   LINK REGISTER
*
TSO020A  PGM                ,PGM TO SHOW EXEC JOBS AND STC
         MVI   BUFFER,C' '        CLEAR OUT BUFFER
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
         EXTRACT MF=(E,EXTRACT)
         L     R1,ANSWER            (R1)=ADDR OF TSO FLAG FROM EXTRACT
         MVC   TSOFLAG,0(R1)        MOVE IN THE ANSWER TO OUR FLAG
         SPACE
*
         LA    R2,0               COUNTER FOR # INITIATORS
         LA    R3,0               COUNTER FOR # JOBS/STC
         L     R11,CVTPTR         (R11)=ADDR CVT
         USING CVT,R11
         L     R9,CVTOPCTP        (R9) =ADDR (SRM'S RMCT)
         ST    R9,RMCTPTR            WHICH IS SAVED FOR LATER
         L     R9,CVTASVT         (R9)= ADDR ASVT
         USING ASVT,R9
         L     R5,ASVTMAXU        (R5)=MAX NUMB OF ASCB ENTRIES
         LA    R5,2(R5)              +2 SO WE CAN SCAN ENTIRE ASVT..
         LA    R9,ASVTFRST-4      (R9)= ADDR-4 OF FIRST ASCB ENTRY
         DROP  R9
         LA    R1,HEADING
         BAL   LINKREG,PUTMSG     WRITE OUT HEADING
         B     NEXTONE            GO GET ASCB
         USING ASCB,R8
*
* LOOP THROUGH ALL ASCBS
*
LOOP1    L     R10,ASCBCSCB       LOAD CSCB ADDR
         USING CSCB,R10
CHKCSCB  TM    CHTRKID,CHINITID   IS IT AN INIT?
         BNO   TESTJOB            NO-> ..GO CHECK FOR JOB
         LA    R2,1(R2)           YES-> INCR COUNT OF INITS
         B     NEXTONE              GO GET ANOTHER
*
*
TESTJOB  TM    CHTRKID,CHJOBID    IS IT A STC?
         BNO   NEXTONE            NOPE-> MUST BE TSO..GO GET ANOTHER
         MVI   SWITCH,X'F0'       SAY WE FOUND ONE
         MVC   JOBNAME,CHCLS      MOVE IN JOBNAME FROM CSCB
         MVC   PROCNAME,CHKEY     MOVE IN PROCNAME FROM CSCB
         MVC   STEPNAME,CHPROCSN  MOVE IN STEPNAME FROM CSCB
GETREST  LA    R3,1(R3)           BUMP COUNT OF JOBS/STC
         BAL   R6,COMPTIME        GO GET STEP/CPU TIME
*                                   AND MEMORY STATUS
         LA    R1,MSGWTO
         BAL   LINKREG,PUTMSG     SHOVEL IT OUT
         MVI   BUFFER,C' '        AND CLEAR IT OUT
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
*
NEXTONE  BCT   R5,DOIT            CHECK COUNT
         B     DOJOBS             NO MORE..SPLIT
DOIT     LA    R9,4(0,R9)         INCR INTO ASVT
         L     R8,0(0,R9)         LOAD ASCB ADDR
         LTR   R8,R8              END OF ASCBS?
         BZ    DOJOBS             YES->EXIT
         TM    0(R9),X'80'        ASID ASSIGNED?
         BO    NEXTONE            NO-> TRY AGAIN.
         B     LOOP1              YES->SEE IF WE LIKE IT
         EJECT
*
* NOW WE HAVE DISPOSED OF THE STC IN THE SYSTEM,
*
*  WE MUST GO BACK THRU THE ASCBS AND LOOK FOR 'REAL' JOBS...
*
*
DOJOBS   L     R11,CVTPTR         (R11)=ADDR CVT
         L     R9,CVTASVT         (R9)= ADDR ASVT
         USING ASVT,R9
         L     R5,ASVTMAXU        (R5)=MAX NUMB OF ASCB ENTRIES
         LA    R5,2(R5)              +2 SO WE CAN SCAN ENTIRE ASVT..
         LA    R9,ASVTFRST-4      (R9)= ADDR-4 OF FIRST ASCB ENTRY
         DROP  R9
         B     NEXTPLS            GO GET ASCB
*
* LOOP THROUGH ALL ASCBS
*
LOOP2    L     R10,ASCBCSCB       LOAD CSCB ADDR
         USING CSCB,R10
CHKCSCB1 TM    CHTRKID,CHINITID   IS IT AN INIT?
         BNO   NEXTPLS            ->NO GO GET ANOTHER ASCB
         L     R4,ASCBJBNI        GET PTR TO JOBNAME
         LTR   R4,R4              IS IT A JOB?
         BZ    NEXTPLS            NOPE->DRY INIT..GO GET ANOTHER
*
* HERE WE GET  SNEAKY..A HONEST TO GOD JOB'S CSCB IS NOT POINTED TO
*   BY ASCBCSCB, BUT INSTEAD, ASCBJBNI (JOBNAME) REALLY POINTS TO
*   THE  CHKEY IN THE CSCB FOR THE JOB. WE'LL GET OUR GOODIES
*   IN THE INDIRECT ROUTE........
*
         DROP  R10
         USING CSCB,R4
         S     R4,=F'8'           ADJUST FOR SNEAKINESS..
         MVC   JOBNAME,CHKEY      MOVE IN JOBNAME
         MVC   PROCNAME,CHSTEP    MOVE IN STEPNAME INVOK PROC
         MVC   STEPNAME,CHPROCSN  MOVE IN STEPNAME OF PROC
         DROP  R4
         USING CSCB,R10           PUT BACK ADDRESSABILITY TO
*                                  'REAL' CSCB..
         LA    R3,1(R3)           BUMP COUNT OF JOBS/STC
         BAL   R6,COMPTIME        GO GET STEP/CPU TIME
*                                   AND MEMORY STATUS
         LA    R1,MSGWTO
         BAL   LINKREG,PUTMSG     SHOVEL IT OUT
         MVI   BUFFER,C' '        AND CLEAR IT OUT
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
*
NEXTPLS  BCT   R5,DOIT1           CHECK COUNT
         B     CHKFIN             NO MORE..SPLIT
DOIT1    LA    R9,4(0,R9)         INCR INTO ASVT
         L     R8,0(0,R9)         LOAD ASCB ADDR
         LTR   R8,R8              END OF ASCBS?
         BZ    CHKFIN             YES->EXIT
         TM    0(R9),X'80'        ASID ASSIGNED?
         BO    NEXTPLS            NO-> TRY AGAIN.
         B     LOOP2              YES->SEE IF WE LIKE IT
*
CHKFIN   CLC   BUFFER(8),=CL8' '  ANYTHING TO WRITE?
         BE    CLEANUP            NO-> SPLIT
         LA    R1,MSGWTO
         BAL   LINKREG,PUTMSG     SHOVEL IT OUT
         EJECT
CLEANUP  TM    SWITCH,X'F0'       DID WE POKE ANYTHING
         BZ    NOOUTPUT           NO..GRIPE AND SPLIT
         CVD   R2,WRKD            CONVERT TO BIN
         MVC   NINIT,=X'402020202120' MOVE IN THE PATTERN
         ED    NINIT,WRKD+5       EDIT THE PATTERN
         CVD   R3,WRKD            CONVERT TO BIN
         MVC   NJOBS,=X'402020202120' MOVE IN THE PATTERN
         ED    NJOBS,WRKD+5       EDIT THE PATTERN
         LA    R1,MSG2
         BAL   LINKREG,PUTMSG     SHOVEL IT OUT
*
         B     $$EOJ              RETURN
         SPACE 2
NOOUTPUT LA    R1,GRIPE
         BAL   LINKREG,PUTMSG     SHOVEL IT OUT
         B     $$EOJ
*
         EJECT
*
*  LOCAL  SUBROUTINE TO CALC JOB TIME AND CPU TIME.
*       AND GEN SWAP REASON CODES/MEMORY STATUS
*
*  ENTER  WITH BAL R6,COMPTIME  (ALL REGS PRESERVED)
*
*
*   COMPUTE ELAPSED TRANSACTION TIME (JOB TIME FOR BATCH)
*
*
COMPTIME STM   R4,R7,SAVEREGS    SAVE WORK REGS
         L     R1,PDV1           LOAD POINTER DEFINED VALUE #1
         BSM   R0,R1             GET INTO 31 BIT ADDRESSING MODE
*                                   AND BRANCH TO SYMBOL 'ELAPSED'
         SPACE 1
ELAPSED  L     R4,RMCTPTR        POINTER TO THE RMCT.
         L     R4,X'7C'(,R4)     PICK UP TIME OF DAY FROM RMCT.  (SU)
         L     R5,ASCBOUCB       GET ADDR OF OUCB FOR USER
         S     R4,72(,R5)        SUBTRACT TRANSACTION START TIME.(SU)
         SRDL  R4,32             MOVE INTO R5 FOR DIVIDE.
         D     R4,=F'1024'       CONVERT TO SECONDS.
         SR    R4,R4             IGNORE REMAINDER.
         D     R4,=F'3600'       DIVIDE TO GET HOURS.
         CVD   R5,WRKD           CONVERT HOURS -
         UNPK  JOBHH,WRKD+6(2)     - TO PRINTABLE FORMAT.
         OI    JOBHH+1,X'F0'     FIXUP SIGN BYTE.
         MVI   JOBHH+2,C':'      SEPARATOR.
         SRDL  R4,32             MOVE REMAINDER OVER FOR DIVIDE.
         D     R4,=F'60'         GET MINUTES.
         CVD   R5,WRKD           CONVERT MINUTES -
         UNPK  JOBMM(2),WRKD+6(2)  - TO PRINTABLE FORMAT.
         OI    JOBMM+1,X'F0'     FIXUP SIGN BYTE.
         MVI   JOBMM+2,C':'      SEPARATOR.
         CVD   R4,WRKD           REMAINDER IS SECONDS.
         UNPK  JOBSS(2),WRKD+6(2)  CONVERT SEC TO PRINTABLE FORMAT.
         OI    JOBSS+1,X'F0'     FIXUP SIGN.
         SPACE 2
*
*   COMPUTE TOTAL CPU TIME USED IN THE CURRENT STEP.
*
CPUSTART LM    R4,R5,ASCBEJST    LOAD ASCBEJST (CPU TASK TIME).
         SRDL  R4,12             CONVERT TO MICRO-SECONDS.
         LM    R6,R7,ASCBSRBT    LOAD ASCBSRBT (CPU SRB TIME).
         SRDL  R6,12             CONVERT TO MICROSECONDS.
         AR    R5,R7             TOTAL CPU TIME (LOW ORDER).
         BNO   CPULBL1           BRANCH IF NO OVERFLOW ON ADD.
         A     R4,=F'1'          OTHERWISE, ADD 1 TO HIGH ORDER.
CPULBL1  AR    R4,R6             TOTAL CPU TIME (HIGH ORDER).
         D     R4,=F'100'        DIVIDE TO GET SECONDS.
         LTR   R5,R5             CHK TO SEE IF ANYTHING IS THERE
         BNM   CPULBL3           BRANCH IF RESULT MAKES SENSE.
         LA    R5,0              OTHERWISE, SET THE VALUE TO ZERO.
CPULBL3  CVD   R5,WRKD           *
         MVC   CPUTIME,=X'20202021204B2020' *
         ED    CPUTIME-1(9),WRKD+3 *
         EJECT
*
***********************************************************************
*
*        SWAP  REASON CODE (R8=ASCB,R7=OUCB,R4-6=WORK)
*
***********************************************************************
         L     R7,ASCBOUCB        GET ADDR OF OUCB
         USING OUCB,R7
SRCSTART SR    R4,R4              PREPARE FOR IC INSTRUCTION.     V2M0
         IC    R4,OUCBSRC         LOAD SU7 SWAP REASON CODE.      V2M0
         SLL   R4,2               MULTIPLY BY FOUR FOR OFFSET     V2M0
         LA    R4,SRCTABLE(R4)    POINT TO CORRECT ENTRY.         V2M0
         MVC   MEMSTAT2,0(R4)     MOVE IN SWAP REASON CODE.       V2M0
SRCEND   DS    0H                 LABEL.
         SPACE 2
***********************************************************************
*
*        FIND  MEMORY POSITION (R8=ASCB,R7=OUCB,R4-6=WORK)
*
***********************************************************************
QLCSTART MVC   MEMSTAT1,=CL2'IN'  DEFAULT POSITION IS SWAPPED-IN. V2M0
         TM    OUCBSFL,OUCBNSW    SEE IF NON-SWAPPABLE MEMORY.    V2M0
         BZ    QLCLBL1C           BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'NS'  MOVE IN NON-SWAPPABLE INDICATIONV2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.
QLCLBL1C TM    OUCBSFL,OUCBPVL    SEE IF PRIVILEDGED STATUS.      V2M0
         BZ    QLCLBL1            BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'PR'  MOVE IN PRIVILEDGED INDICATION. V2M0
*                                 BUT CONTINUE IN CASE SWAPPED-OUT.
QLCLBL1  TM    OUCBQFL,OUCBOFF    TEST FOR WAIT QUEUE.            V2M0
         BZ    QLCLBL2            BRANCH IF NOT.
         MVC   MEMSTAT1,=C'WT'    INDICATE WAIT STATUS.           V2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.       V2M0
QLCLBL2  TM    OUCBQFL,OUCBOUT    TEST FOR OUT QUEUE.             V2M0
         BZ    QLCLBL3            BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'S '  INDICATE OUT STATUS.            V2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.
QLCLBL3  TM    OUCBQFL,X'E0'      CHECK MISCELLANEOUS BITS.       V2M0
         BZ    QLCEND             ASSUME MEMORY IS SWAPPED-IN.
         MVC   MEMSTAT1,=CL2'<>'  INDICATE TRANSITIONING STATUS.
QLCEND   DS    0H                 LABEL.
         SPACE 2
         LA    R1,COMPEXIT       SET UP FOR RETURN TO 24 BIT MODE
         BSM   R0,R1             NOW BRANCH AND RETURN
COMPEXIT LM    R4,R7,SAVEREGS    RESTORE REGISTERS
         BR    R6                AND RETURN..
         EJECT
*.....................................................................*
*        LOCAL SUBROUTINE FOR IO TO OPER/USER                         *
*.....................................................................*
         SPACE
*
* ENTER WITH WTO,WTOR LIST FORM POINTED TO BY R1
*
*    BAL  LINKREG,PUTMSG    OR
*    BAL  LINKREG,PUTGET
*
*  USES R14 FOR WORK
*
*
PUTMSG   DS    0H
         TM    TSOFLAG,X'80'       IS IT TSO?
         BO    TPUTIT              YES-> GO DO TPUT
         SVC   35                  NO-> USE WTO
         BR    LINKREG
TPUTIT   DS    0H
         LH    R0,0(,R1)           GET LENGTH OF WTO MESSAGE
         S     R0,=F'4'            SUBTRACT OFF HEADER
         LA    R1,4(,R1)           BUMP MSG ADDRESS PAST HDR
         TPUT  (1),(0),R           DO THE TPUT
         BR    LINKREG
         SPACE 2
PUTGET   DS    0H
         TM    TSOFLAG,X'80'       IS IT TSO?
         BO    TSOIT               YES-> GO USE TGET
         LR    R14,R1              NO-> USE WTOR .. SAVE MSG ADDRESS
         SVC   35                  DO THE WTOR...
         L     R1,4(,R14)          GET ADDR OF ECB
         XC    0(4,R1),0(R1)       CLEAN OUT THE ECB....
         LA    R0,1
         SVC   1                   WAIT FOR WTOR TO COMPLETE
         B     PUTRET              RETURN
TSOIT    DS    0H
         LR    R14,R1              SAVE
         LH    R0,8(,R1)           PUT LENGTH
         S     R0,=F'4'
         LA    R1,12(,R1)          PAST HDR
         TPUT  (1),(0),R
         SR    R0,R0
         IC    R0,0(,R14)          GET REPLY LENGTH
         L     R1,0(,R14)          GET REPLY ADRS
         LA    R1,0(,R1)
         ICM   R1,B'1000',=X'80'   INDICATE TGET...
         TGET  (1),(0),R
PUTRET   DS    0H
         L     R1,0(,R14)          GET REPLY ADRS
         XR    R0,R0
         IC    R0,0(,R14)          GET REPLY LENGTH
UPPER    DS    0H
         OI    0(R1),C' '          UPPER CASE
         LA    R1,1(,R1)           NXT
         BCT   R0,UPPER
         BR    LINKREG
         EJECT
*.....................................................................*
*        LIST FORMS OF MACROS                                         *
*.....................................................................*
         SPACE 2
EXTRACT  EXTRACT ANSWER,'S',FIELDS=(TSO),MF=L
         EJECT
*.....................................................................*
*        VARIABLES                                                    *
*.....................................................................*
         SPACE 2
SWITCH   DC    XL1'00'
TSOFLAG  DC    X'00'               ='80' IF TSO. '00' IF NOT TSO
ANSWER   DC    F'0'                ADDRESS POINTER FOR EXTRACT
         SPACE 2
WRKD     DC    D'0'
RMCTPTR  DS    F
SAVEREGS DS    4F
         EJECT
*.....................................................................*
*        CONSTANTS                                                    *
*.....................................................................*
         SPACE 2
PDV1     DC    A(ELAPSED+X'80000000')  POINTER DEFINED VALUE (31 BIT)
SRCTABLE DC    C'    TPUTTGETLONGPGS<RSS<WAITRQSWDENQEXCHSWAP'
*                0...1...2...3...4...5...6...7...8...9...A...
         SPACE 2
**********************************************************************
* SWAP REASON CODES - TWO BYTES PER ENTRY:
*
*      CODE    DESCRIPTION
*      ----    -------------------------------------------------------
*       TPUT   TERMINAL OUTPUT WAIT SWAP-OUT.
*       TGET   TERMINAL INPUT WAIT SWAP-OUT.
*       LONG   LONG WAIT CAUSED SWAP-OUT.
*       PGS<   AUXILIARY STORAGE (PAGING SPACE) SHORTAGE SWAP-OUT.
*       RSS<   REAL STORAGE PAGEABLE POOL SHORTAGE SWAP-OUT.
*       WAIT   MSO DETECTED WAIT SWAP-OUT.
*       RQSW   REQSWAP SYSEVENT CAUSED SWAP-OUT.
*       DENQ   CAP ENQ EXCHANGE SWAP-OUT.
*       EXCH   CAP EXCHANGE SWAP BASED UPON RECOMMENDATION VALUES.
*       SWAP   CAP UNILATERAL SWAP-OUT.
**********************************************************************
         EJECT
*.....................................................................*
*        MESSAGE FORMATS                                              *
*.....................................................................*
         SPACE 2
GRIPE    WTO   '**NO INITIATORS OR JOBS RUNNING**',ROUTCDE=(11),MF=L
         SPACE 2
MSG2     WTO   '..XXXXXX JOBS XXXXXX INITIATORS',ROUTCDE=(11),MF=L
         ORG   MSG2+6
NJOBS    DS    CL6
         ORG   MSG2+18
NINIT    DS    CL6
         ORG
         EJECT
MSGWTO   WTO   '123456789.123456789.123456789.123456789.123456789.12345X
               6789.123456789.1  ',ROUTCDE=(11),MF=L
         ORG   MSGWTO+4
BUFFER   DS    CL72
         ORG   MSGWTO+4
JOBNAME  DS    CL8                JOBNAME
         DS    CL1                FILLER
PROCNAME DS    CL8                STEPNAME  OR STEPNAME INVOKING PROC
         DS    CL1
STEPNAME DS    CL8                STEPNAME FOR PROCS
         DS    CL1
MEMSTAT1 DS    CL2
         DS    CL1
MEMSTAT2 DS    CL4                MEMORY STATUS = SWAPPED NS
         DS    CL1
JOBHH    DS    CL2                FOR JOB  TIME HH:MM:SS
         DS    CL1
JOBMM    DS    CL2
         DS    CL1
JOBSS    DS    CL2
         DS    CL1
CPUTIME  DS    CL8                FOR CPUTIME NNNNN.NN SECONDS
         ORG
         SPACE 2
*               XXXXXXXX XXXXXXXX XXXXXXXX XX XXXX XX:XX:XX NNNNN.NN
HEADING  WTO   'JOBNAME  STEPNAME PROCSTEP STATUS  JOB-TIME STEP-CPU SEX
               C',ROUTCDE=(11),MF=L
*
         EJECT
*.....................................................................*
*        LITERALS                                                     *
*.....................................................................*
         SPACE 2
         LTORG
         EJECT
CVT      DSECT
         CVT  DSECT=YES
         EJECT
CSCB     DSECT
         IEECHAIN
         EJECT
         IHAASCB
         EJECT
         IHAASVT
         EJECT
         IRAOUCB ,                                                 NTL1
         END     ,                                                 NTL1
