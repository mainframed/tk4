        /* DATA SET S963P20    AT LEVEL 004 AS OF 01/05/79    */
        /* DATA SET S963P20    AT LEVEL 003 AS OF 05/24/78    */
        /* DATA SET S963P20    AT LEVEL 002 AS OF 12/13/77    */
 P963P20: /* DASD MONITOR SYSTEM - SCRLOG INQUIRY PGM V1M0           */
          PROC (PARAM) OPTIONS(MAIN) REORDER;
 /*                                                                  */
 /* THIS PROGRAM READS THE SCRLOG DATASET PRODUCED BY P963P00        */
 /* AND GENERATES A REPORT FOR USERS ON DATASETS TO BE SCRATCHED.    */
 /*                                                                  */
 /* KEN TRUE      V1M0    17 NOV 77                                  */
 /*                                                                  */
 /*                                                                  */

 DCL R941X12 EXTERNAL ENTRY            /* JULIAN TO GREGORIAN DATE*/
             OPTIONS(ASSEMBLER,INTER);

 DCL R062A10 EXTERNAL ENTRY            /* DYNAMIC ALLOCATION SUB  */
             OPTIONS(ASSEMBLER,INTER);
 DCL PARAM   CHAR(100) VAR;            /* INPUT PARAMETER LIST    */

 DCL INSCR    FILE  RECORD SEQUENTIAL INPUT  ENV(CONSECUTIVE);


 DCL 1 SCRPARMS,           /* RECORD GENERATED BY P963P00 FIRST IN DS*/
       2 FILL1       CHAR(1),
       2 HEAD1       CHAR(8),
       2 $RUN_DATE   PIC'Z9/99/99',
       2 FILL2       CHAR(1),
       2 $RUN_TIME   PIC'Z9.99.99',
       2 HEAD2       CHAR(9),
       2 $SCR_DATE   PIC'Z9/99/99',
       2 HEAD3       CHAR(8),
       2 $SCR_CODES  CHAR(8),
       2 FILL3       CHAR(21);


 DCL 1 PLIST,
       2 DDNAME      CHAR(8)    INIT('INSCR'),
       2 DSNAME      CHAR(44)   INIT('FCI1.A00963.F0963.F015'),
       2 DSMEMBER    CHAR(8)    INIT('0       '),
       2 PASSWORD    CHAR(8)    INIT(' '),
       2 DSSTATUS    CHAR(8)    INIT('SHR'),
       2 DSNDISP     CHAR(8)    INIT('KEEP'),
       2 DSADISP     CHAR(8)    INIT('KEEP'),
       2 DSUNIT      CHAR(8)    INIT(' '),
       2 $RSVD1      CHAR(8)    INIT(' '),
       2 DSVOLSER    CHAR(6)    INIT(' '),
       2 $RSVD2      CHAR(40)   INIT(' '),
       2 DSVOLREF    CHAR(44)   INIT(' '),
       2 DSFREE      CHAR(8)    INIT(' '),
       2 DSLABEL     CHAR(4)    INIT(' '),
       2 DSINOUT     CHAR(4)    INIT(' '),
       2 $RSVD3      CHAR(16)   INIT(' '),
       2 DSPWDLBL    CHAR(8)    INIT(' '),
       2 DSDATE      CHAR(12)   INIT(' '),
       2 DSALLOC     CHAR(5)    INIT(' '),
       2 DSPRI       CHAR(6)    INIT(' '),
       2 DSSEC       CHAR(6)    INIT(' '),
       2 DSDIR       CHAR(6)    INIT(' '),
       2 DSRLSE      CHAR(8)    INIT(' '),
       2 DSCONTIG    CHAR(8)    INIT(' '),
       2 DSROUND     CHAR(8)    INIT(' '),
       2 $RSVD4      CHAR(24)   INIT(' '),
       2 DSBLKSI     CHAR(5)    INIT(' '),
       2 DSORG       CHAR(8)    INIT(' '),
       2 DSKEYLEN    CHAR(3)    INIT(' '),
       2 DSLRECL     CHAR(5)    INIT(' '),
       2 DSRECFM     CHAR(8)    INIT(' '),
       2 DSDCBDS     CHAR(44)   INIT(' '),
       2 $RSVD5      CHAR(24)   INIT(' ');

 DCL 1 ERRBLK,
       2 ERRCODE     BIT(16)    INIT((16)'0'B),
       2 ERRINFO     BIT(16)    INIT((16)'0'B),
       2 ALLOC_RC    FIXED BIN(31,0) INIT(0)  ;

 DCL OUTSTR          CHAR(78) VAR INIT('');

 DCL 1 DETAIL,
       2 BILL_TO     CHAR(8)    INIT(' '),
       2 FILLER1     CHAR(1)    INIT(' '),
       2 USED_DATE   PIC'Z9/99/99' INIT(0),
       2 FILLER2     CHAR(1)    INIT(' '),
       2 MOD_USER    CHAR(8)    INIT(' '),
       2 FILLER3     CHAR(1)    INIT(' '),
       2 VOLUME      CHAR(6)    INIT(' '),
       2 FILLER4     CHAR(1)    INIT(' '),
       2 DSNAME      CHAR(44)   INIT(' ');

 DCL SDETAIL         CHAR(78)   DEFINED DETAIL;

  DCL RETURN_CODE    FIXED BIN(31,0) INIT(0);

  DCL 1 OPTIONS(8),
        2 TEXT       CHAR(10) VAR
            INIT('UNAUTHED', 'UNCATLGD', 'UNUSED',    'TOOBIG',
                 'EXPIRED',  'OVERALLOC','PASTRETPD', ''        ),
        2 BIT        BIT(8)
            INIT('10000000'B,'01000000'B,'00100000'B,'00010000'B,
                 '00001000'B,'00000100'B,'00000010'B,'00000001'B);

 DCL PACK6           PIC'999999' INIT(0);

 DCL $REASONS        CHAR(50)  VAR INIT('');

 DCL (INREC_SCR,
      RPTPAGENO,
      I,J,K)
                     FIXED BIN(15,0) INIT(0);

  DCL EOF_INSCR      BIT(1)   INIT('0'B),
      FINISHED       BIT(1)   INIT('0'B);


1/*    ALLOCATE LATEST GENERATION OF DATASET            */

  IF LENGTH(PARAM) = 4 THEN
    DO;
      SUBSTR(PLIST.DSNAME,19,4) = SUBSTR(PARAM,1,4);
    END;

  CALL R062A10(PLIST,ERRBLK);

  IF ALLOC_RC ^= 0 THEN
    DO;
       CALL CANT_ALLOC;

       STOP;
    END;

  ON UNDEFINEDFILE(INSCR) BEGIN;
     ON ERROR SYSTEM;
     PUT DATA(PLIST,ERRBLK);
     STOP;
                          END;


  OPEN FILE(INSCR)    INPUT;


  ON ENDFILE(INSCR)   EOF_INSCR   = '1'B;

  READ FILE(INSCR) INTO(SCRPARMS);    /* SET UP FOR PROCESING..HEADER */

  IF EOF_INSCR   THEN
    DO;
      PUT   SKIP EDIT
         ('*****UNABLE TO SHOWSCR -  SCRLOG DATASET IS EMPTY*****')
         (A);
      STOP;
    END;
  ELSE
    IF HEAD1 ^= 'MON RUN=' THEN
      DO;
        PUT   SKIP EDIT
          ('*****UNABLE TO SHOWSCR - DUE TO INVALID SCRPARM CARD*****')
          (A);
        STOP;
      END;


  DO I = 1 TO 8;
    IF SUBSTR(SCRPARMS.$SCR_CODES,I,1) ^= ' ' THEN
       $REASONS = $REASONS ×× ',' ×× OPTIONS.TEXT(I);
  END;

  IF SUBSTR($REASONS,1,1) = ',' THEN $REASONS = SUBSTR($REASONS,2);


1 /*  START OF MAIN PROGRAM                     */

   CALL PLISRTD(' SORT FIELDS=(53,8,CH,A,1,44,CH,A,45,6,CH,A) ',
                ' RECORD TYPE=F,LENGTH=(80) ',
                45000,RETURN_CODE,E15,E35,'','NO');



   CALL SUMMARY;                /*  PERFORM SUMMARY REPORTING       */

   CLOSE FILE(INSCR);
0 /*    END OF MAIN PROGRAM                     */

1 /* E15 EXIT..READ REST OF SCRLOG AND PASS TO SORT */
 E15: PROC RETURNS(CHAR(80));

    DCL
      INPUT_RECORD   CHAR(80),
      OUTPUT_RECORD  CHAR(80) INIT(' ');

    ON ENDFILE(INSCR) BEGIN;
      CALL PLIRETC(8);
      GO TO ENDE15;
    END;

    READ FILE(INSCR) INTO(INPUT_RECORD);
    OUTPUT_RECORD = INPUT_RECORD;
  ENDE15: RETURN(OUTPUT_RECORD);
 END E15;

1 /*  E35 EXIT..PRINT SORTED SCRATCH RECORDS                 */

 E35: PROC(RECORD);

 DCL 1 SCRLOG BASED(@SCRLOG), /* RECORD GENERATED BY P963P00         */
       2 DSNAME      CHAR(44),
       2 VOLUME      CHAR(6),
       2 FLAGS       CHAR(2),
       2 BILL_TO     CHAR(8),
       2 LAST_USED   PIC'ZZZZZ',
       2 MOD_USER    CHAR(8),
       2 FILL1       CHAR(7);

 DCL @SCRLOG    POINTER;
 DCL RECORD     CHAR(80);
   @SCRLOG = ADDR(RECORD);

   INREC_SCR = INREC_SCR + 1;
   DETAIL = '';                            /*                         */
   DETAIL = SCRLOG, BY NAME;
   CALL R941X12(LAST_USED,PACK6);   /* CONVERT LAST USE DATE TO MMDDYY*/
   DETAIL.USED_DATE = PACK6;

   IF INREC_SCR = 1 THEN
     DO;

  PUT SKIP EDIT

    ('SHOWSCR - MONITOR RUN ON ',$RUN_DATE,$RUN_TIME) (A,A,P'ZZ9.99.99')
    ('          DSN SCRATCH ON ',$SCR_DATE,'  4.00 PM') (SKIP,A,A,A)
    (' - SCR REASON(S)=',$REASONS)                      (A,A)
    ('          (SEE SPACE MGR BY 3:00 PM ON SCR DATE TO SAVE DATASET)')
                                                        (SKIP,A)
    ('  APPL.    LAST     LAST                       ') (SKIP,A)
    ('.SYSTEM. ..USED.. ..USER.. VOLUME   D S N A M E') (SKIP,A);

     END;


     OUTSTR = STRING(DETAIL);
     I = INDEX(SUBSTR(SDETAIL,35),' '); /* LOCATE BLANK AFTER DSNAME*/
     IF I > 0 THEN
       DO;
         OUTSTR = SUBSTR(OUTSTR,1,I+35-1);
       END;

   CALL SHOW_SCR_BITS(SCRLOG.FLAGS,$REASONS);

   PUT SKIP EDIT
      (OUTSTR)      (A)
      ($REASONS)    (SKIP,COL(42),A);


   CALL PLIRETC(4);


 END E35;                       /* END OF MAIN LOOP                 */


1/* PRINT SUMMARY PROGRAM STATISTICS   */
 SUMMARY: PROC;


   IF INREC_SCR = 0 THEN
     DO;
       PUT FILE(SYSPRINT) SKIP EDIT
         ('..NO DATASETS TO BE SCRATCHED ON ',$SCR_DATE)
         (A,A);

     END;
    ELSE
     DO;

       PUT FILE(SYSPRINT) SKIP(2) EDIT
             (INREC_SCR, ' DATASETS TO BE SCRATCHED ON ',$SCR_DATE)
             (P'ZZZ,ZZ9',A,A);

     END;

   RETURN;

 END SUMMARY;

1/* INTREPRET DYNAMIC ALLOCATION ERROR CODES */

 CANT_ALLOC: PROC;

     DCL ECODE     CHAR(4)      INIT(' '),
         EINFO     CHAR(4)      INIT(' '),
         ARCODE    PIC'99'      INIT(0);

     ECODE = CNVTHX(ERRCODE);
     EINFO = CNVTHX(ERRINFO);
     ARCODE= ALLOC_RC;

     PUT SKIP(2) EDIT
       ('**DYNAMIC ALLOCATION ERROR CODE =',ECODE)       (A,A)
       (' INFO CODE=',EINFO)                             (A,A)
       (' DARC=',ARCODE)                                 (A,A)
       ('UNABLE TO RUN SHOWSCR')                         (SKIP,A);
    RETURN;

 END CANT_ALLOC;

1/* GENERATE BIT OPTIONS PRINTABLE MESSAGES AS CHAR STRING       */
0 SHOW_SCR_BITS: PROC(INHEX,POPTION);

   DCL INBIT8    BIT(8)  INIT((8)'0'B),
       INHEX     CHAR(2),
       POPTION   CHAR(*) VAR ;

   INBIT8 = HEXBIT(INHEX);

   POPTION = '';

   DO I = 1 TO DIM(OPTIONS.BIT,1);

     IF (INBIT8 & OPTIONS.BIT(I)) ^= '00000000'B THEN
         POPTION = POPTION ×× ',' ×× OPTIONS.TEXT(I);
   END;

   IF SUBSTR(POPTION,1,1) = ',' THEN
       POPTION = SUBSTR(POPTION,2);

   RETURN;

  END SHOW_SCR_BITS;



1 JULIAN : PROC (DATEX) RETURNS (CHAR(5));
0 DCL DATEX CHAR (6);
  DCL DATEY CHAR (5), NDAYS PICTURE '999'  INIT (0);
0 DCL MTHS (12) FIXED BIN (15) INIT
       (31,28,31,30,31,30,31,31,30,31,30,31);
  IF MOD ( SUBSTR (DATEX,1,2) , 4 ) = 0
  THEN MTHS (2) = 29;
  SUBSTR (DATEY,1,2) = SUBSTR (DATEX,1,2);
- DO I = 1 TO SUBSTR (DATEX,3,2) - 1;
     NDAYS = NDAYS + MTHS (I);
  END;
  NDAYS = NDAYS + SUBSTR (DATEX,5,2);
0 SUBSTR (DATEY,3,3) =      NDAYS;
0 RETURN (DATEY);
  END JULIAN;

1/* CNVTHX - PROCEDURE TO CONVERT 16 BIT TO 4 CHAR HEX */

 CNVTHX: PROC(N) RETURNS(CHAR(4));

 DCL N  BIT(16),
     (HEXOUT,XOUT) CHAR(4) INIT(' '),
     CH(0:15) CHAR(1) STATIC INIT(
       '0','1','2','3','4','5','6','7',
       '8','9','A','B','C','D','E','F'  ),
     NUM BIT(16),
     (II,J,K)  FIXED BIN(15,0);

 NUM = UNSPEC(N);
 DO K = 1 TO 4;
   J = (K-1)*4+1;
   UNSPEC(II) = (12)'0'B ×× SUBSTR(NUM,J,4);
   SUBSTR(XOUT,K,1) = CH(II);
 END;
 HEXOUT = XOUT;
 RETURN (HEXOUT);
 END CNVTHX;

1/* HEXBIT - PROCEDURE TO 2 CHAR HEX TO 8 BIT          */

 HEXBIT: PROC(INHEX) RETURNS(BIT(8));

 DCL INHEX CHAR(2),
     CH(0:15) CHAR(1) STATIC INIT(
       '0','1','2','3','4','5','6','7',
       '8','9','A','B','C','D','E','F'  ),
     NUM BIT(8),
     FOUND     BIT(1)  INIT('0'B),
     (II,J,K)  FIXED BIN(15,0);

 NUM = '00000000'B;
 DO K = 1 TO 2;
    FOUND = '0'B;
    DO II = 0 TO 15 WHILE(^FOUND);
     IF SUBSTR(INHEX,K,1) = CH(II) THEN FOUND = '1'B;
    END;
   IF ^FOUND THEN II = 0;
             ELSE II = II - 1;
   J = (K-1)*4+1;
   SUBSTR(NUM,J,4) = SUBSTR(UNSPEC(II),13,4);
 END;
 RETURN (NUM);
 END HEXBIT;

 END P963P20;
