*          DATA SET PSNMERMS   AT LEVEL 002 AS OF 10/30/80
         MACRO
&TAG     PSNMERMS  &MSG,&OPTION=,&SEV=4,&REPLY=,&POINT=0
.*                   TO DEFINE A MESSAGE AND ITS ACTIONS
.*                   TO RELIEVE THE MAINLIST PROCESSING OF THE
.*                   TEDIUM OF WRITING DISGNOSTICS.
.*
         GBLA  &PSNGNO
         GBLC  &PSNGTYP           WHAT TYPE OF GENERATION DESIRED HERE
.*
         LCLC  &OP(16)            THE OPTION LIST
         LCLB  &B(16)             STRING OF OPTIONS REQUESTED
         LCLA  &I1,&I2            POINTERS FOR OPTION DECODING
         LCLC  &CB1,&CB2          CONSOLIDATE BIT STRINGS
         LCLC  &Z
.*
         LCLA  &SX                SHORT FORM OF SYSNDX
         LCLC  &BLK               USED IN GEN OF EQUATE LIST
         LCLA  &K,&I,&LN          DETERMINE LENGTH OF THE MESSAGE
.*
&PSNGNO  SETA  &PSNGNO+1         INCREMENT INTERNAL ERROR NUMBER
&BLK     SETC  ' = '              FOR INTERNAL DOCUMENTATION
         AIF   ('&PSNGTYP' EQ 'ERR').GERR
         AIF   ('&PSNGTYP' EQ 'EQU').GEQU
         MNOTE  12,'INTERNAL ERROR DISCREPENCY'
         AGO   .EXIT
.*
.GEQU    ANOP               GENERATE EQUATE LIST OF ERRORS
&TAG     EQU   &PSNGNO&BLK&MSG
         AGO   .EXIT
.*
.GERR    ANOP                     GENERATE THE MESSAGE DESCRIPTOR BLOCK
&SX      SETA  &SYSNDX            FOR THE ABBREVIATION
.*                   DEFINE THE OPTIONS REQUESTED
         AIF   (T'&OPTION NE 'O').OPTGO NO OPTIONS GIVEN - EXIT
         MNOTE 8,'REALLY MUST HAVE SOME OPTION....'
         AGO   .EXIT
.*
.OPTGO   ANOP
&OP(1)   SETC  'ABEND'
&OP(2)   SETC  'SNAP'
&OP(3)   SETC  'ERR'              AS IN AN ERROR LISTING
&OP(4)   SETC  'WTO'
&OP(5)   SETC  'NOP'              DO NOTHING AT ALL
&OP(6)   SETC  'WTOR'             WRITE AND GET REPLY
&OP(7)   SETC  'INSERT'           INSERT VALUES IN MESSAGE
&OP(8)   SETC  'CALLER'           WTO WITH CALLER AND LOCATION
.OPTN    ANOP                     LOOP THROUGH THE OPTIONS
&I2      SETA  &I2+1              ON TO NEXT INPUT OPTION
         AIF   (&I2 GT N'&OPTION).OPTX     END OF THE STRING
&I1      SETA  1                  POINT TO FIRST OF POSSIBILITIES
.OPTL    ANOP
         AIF   ('&OPTION(&I2)' EQ '&OP(&I1)').OPTM   MATCHED
&I1      SETA  &I1+1              INDEX ON TO NEXT ONE
         AIF   (&I1 LE 16).OPTL
         MNOTE  8,'INVALID OPTION - &OPTION(&I2)'
         AGO   .OPTN              ON TO THE NEXT OPTION
.OPTM    ANOP                     HAVE AMATCH - REPEATED?
         AIF   (NOT &B(&I1)).OPTS CHECK FOR DUPLICATION
         MNOTE  4,'&OPTION(&I2) ENTERED TWICE IN OPTION'
.OPTS    ANOP
&B(&I1)  SETB  1                  SHOW THIS OPTION IS RECOGNIZED
         AGO   .OPTN
.OPTX    ANOP                     END OF OPTION DECODING
&CB1     SETC  '&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'
&CB2     SETC  '&B(9)&B(10)&B(11)&B(12)&B(13)&B(14)&B(15)&B(16)'
.*
&K       SETA  K'&MSG+6
         AIF   (&PSNGNO GT 9).ZX
&Z       SETC  '0'                INSERT A LEADING ZERO
.ZX      ANOP
.*                   GENERATE THE FIELDS AS DESCRIBED
&TAG     DS    0F&BLK&OPTION
         DC    AL2(END&SX-*,&PSNGNO,&SEV,&K,&POINT)
         DC    B'&CB1&CB2',AL2(0)
         DC    AL2(&K+5),X'8000',CL6'PSN0&Z&PSNGNO.',CL3' - '
         DC    C&MSG
         DC    X'0000C020'
.*                   FOR WTOR, GENERATE THE REPLY LIST
         AIF   (NOT &B(6)).GEXIT
         AIF   (T'&REPLY NE 'O').GREP
         MNOTE 8,'MUST HAVE REPLYS FOR WTOR'
         AGO   .GEXIT
.GREP    ANOP
&I       SETA  &I+1
         AIF   (&I GT N'&REPLY).GREPX
&LN      SETA  K'&REPLY(&I)       LENGTH OF THIS ANSWER
         DC    AL1(&LN),C'&REPLY(&I)'
         AGO   .GREP
.GREPX   ANOP
.*
.GEXIT   ANOP
END&SX   DS    0F
         SPACE 2
.*
.EXIT    ANOP
         MEND
