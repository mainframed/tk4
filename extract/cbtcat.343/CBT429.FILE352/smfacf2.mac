        /* DATA SET SMFACF2    AT LEVEL 002 AS OF 10/26/79    */
        /* DATA SET SMFRACF    AT LEVEL 004 AS OF 02/01/79    */
 SMFACF2: PROC(PARAM)  OPTIONS(MAIN) REORDER;
 /*********************************************************************/
 /* READ TYPE 221   RECS TO FIND OUT ACF2 DSNAME USAGES/LOGS/VIOLATION*/
 /*********************************************************************/
 /*                                                                   */
 /* THIS PROGRAM READS SMF RECORDS TYPE 221 (ACF DATASET LOGS)        */
 /*   AND PRODUCES A REPORT AND AN OUTPUT FILE MATCHED WITH GSA FOR   */
 /*   SUBSEQUENT PROCESSING.                                          */
 /*                                                                   */
 /* K TRUE  2 OCT 79                                                  */
 /*********************************************************************/
1DCL INPUT FILE  RECORD INPUT  ENV(CONSECUTIVE);
 DCL OUTPUT FILE RECORD OUTPUT ENV(CONSECUTIVE);
 DCL PRINT FILE  STREAM OUTPUT PRINT;

 DCL VERSION CHAR(17) INIT('VER 1.0 (02OCT79)');
 DCL EOFIN         BIT(1) INIT('0'B);
 DCL DATE          BUILTIN;
 DCL INDEX         BUILTIN;
 DCL TIME          BUILTIN;
 DCL NULL          BUILTIN;
 DCL ONCHAR        BUILTIN ;
 DCL (I,J,K,L)
                   FIXED BIN(15) INIT(0);
 DCL (REC221,REC221_DONE,INREC,#FLUSHED,REC00)
                   FIXED BIN(31) INIT(0);

 DCL INDATE          CHAR(6) INIT(' '),
     C_YY     CHAR(2) DEF(INDATE) POS(1),
     C_MM     CHAR(2) DEF(INDATE) POS(3),
     C_DD     CHAR(2) DEF(INDATE) POS(5);

 DCL PACK5         PIC'99999'    INIT(0),
     PACK6         PIC'999999'   INIT(0),
     R941X11  EXTERNAL ENTRY OPTIONS(ASSEMBLER,INTER),
     R941X12  EXTERNAL ENTRY OPTIONS(ASSEMBLER,INTER);
              /* IN SYS2.FCILIB  */

 DCL TYPE00        BIT(8) INIT ('00000000'B ) ;
 DCL TYPE221       BIT(8) INIT ('11011101'B ) ;

 DCL TEMP8         BIT(8) INIT((8)'0'B);
 DCL EVENT_#       FIXED BIN(15,0) INIT(0);
 DCL TEMP31        FIXED BIN(31,0) INIT(0);
 DCL BZERO         BIT(32) INIT((32)'0'B);
 DCL PARAM         CHAR(100) VAR;
1/*------------------------------------------------------*/
 /* ESTABLISH RUN PARMS FROM PARM FIELD                  */
 /*------------------------------------------------------*/
 DCL DEBUG         BIT(1) INIT('0'B);
 DCL DOCLIST       BIT(1)   INIT('0'B);
 DCL DOACCESS      BIT(1)   INIT('0'B);
 DCL NOCMDS        BIT(1)   INIT('1'B);

 IF LENGTH(PARAM) > 0 THEN
    DO;
      IF INDEX(PARAM,'CLIST') ^= 0 THEN DOCLIST = '1'B;
      IF INDEX(PARAM,'DEBUG') ^= 0 THEN DEBUG = '1'B;
      IF INDEX(PARAM,'CMDS')  ^= 0 THEN NOCMDS='0'B;
      IF INDEX(PARAM,'ACCESS')^= 0 THEN DOACCESS='1'B;
    END;

1DCL 1 DETAIL,     /*   DETAIL OUTPUT LINE..USE HEAD1/HEAD2 FOR TITLE*/
       2 P_RCD_DATE    PIC'Z9/99/99',
       2 F3            CHAR(1),
       2 P_RCD_TIME    PIC'Z9.99.99',
       2 F4            CHAR(1),
       2 P_ACF2_EVENT  CHAR(8),
       2 P_ACF2_ACCESS CHAR(8),
       2 F5            CHAR(1),
       2 P_JOBNAME     CHAR(8),
       2 F1            CHAR(1),
       2 P_VIOLATION   CHAR(1),
       2 F6            CHAR(1),
       2 P_ACF2_LOGONID CHAR(8),
       2 F7            CHAR(1),
       2 P_TERM_ADDR   CHAR(4),
       2 F9            CHAR(1),
       2 P_RCD_REASON(5) CHAR(1),
       2 F10           CHAR(1),
       2 P_DSNPGM      CHAR(65);

 DCL   P_HEXCLR     CHAR(18) DEFINED(P_DSNPGM) POS(48),
       P_HEX1       CHAR(8)  DEFINED(P_DSNPGM) POS(49),
       P_HEX2       CHAR(8)  DEFINED(P_DSNPGM) POS(58);

 DCL PDETAIL  CHAR(131) BASED(@DETAIL);
     @DETAIL  = ADDR(P_RCD_DATE);
     DETAIL = '';

 DCL 1 DETAIL1,
       2 P_BLANKS      CHAR(46),
       2 P_DETAIL      CHAR(85);

 DCL PDETAIL1 CHAR(131) BASED(@DETAIL1);
     @DETAIL1 = ADDR(P_BLANKS);
     DETAIL1='';

 DCL DETAILV  CHAR(255) VAR INIT('');
 DCL CSTR     CHAR(1024) VAR INIT('');

1DCL 1 OUTREC,           /* OUTPUT RECORD FOR SUBSEQUENT PROCESSING*/
       2 JOBNAME     CHAR(8)   INIT(' '),
       2 RCD_DATE    FIXED  DEC(7)      INIT(0),
       2 RCD_TIME    FIXED  BIN(31,0)   INIT(0),
       2 ACF2_EVENT  CHAR(8)    INIT(' '),
       2 ACF2_ACCESS CHAR(8)    INIT(' '),
       2 VIOLATION   CHAR(1)    INIT(' '),
       2 RCD_REASON(5) CHAR(1)  INIT(' '),
       2 ACF2_LOGONID CHAR(8)   INIT(' '),
       2 TERM_ADDR   CHAR(4)    INIT(' '),
       2 ACF2_KEY    CHAR(8)    INIT(' '),
       2 ACF2_DSNAME CHAR(44)   INIT(' '),
       2 ACF2_MEMBER CHAR(8)    INIT(' '),
       2 ACF2_VOLUME CHAR(6)    INIT(' '),
       2 ACF2_DDNAME CHAR(8)    INIT(' '),
       2 ACF2_PGM    CHAR(8)    INIT(' '),
       2 ACF2_STEP   CHAR(8)    INIT(' '),
       2 ACF2_LIBNAM CHAR(44)   INIT(' '),
       2 ACF2_JOBID  CHAR(8)    INIT(' '),
       2 ACF2_UNAME  CHAR(20)   INIT(' '),
       2 GSA_BADGE   CHAR(5)   INIT(' '),
       2 GSA_NAME    CHAR(20)   INIT(' '),
       2 GSA_AREA    CHAR(8)   INIT(' ');


 DCL   OUTSTR        CHAR(1024) VAR INIT('');



 DCL 1 CL_REC,           /* OUTPUT RECORD FOR CLIST CONSTRUCTION   */
       2 BODY        CHAR(72)   INIT(' '),
       2 REC#        PIC'999999' INIT(0),
       2 SUBREC#     PIC'99'     INIT(0);


1DCL (H_MAIN1,H_BLANK,H_DETAIL1,H_DETAIL2,H_SUMMARY1,H_SUMMARY2,
      RPTHEAD,TITLE1,TITLE2)
         CHAR(131)  INIT('');
 DCL SUBTITLE  CHAR(131) VAR INIT('');


 DCL RUNDATE     PIC'Z9/99/99' DEF(H_MAIN1) POS(104),
     RUNTIME     PIC'99.99.99' DEF(H_MAIN1) POS(113),
     PAGENO      PIC'ZZ9'      DEF(H_MAIN1) POS(128);

           /*          1         2         3         4         5    */
           /* ....5....0....5....0....5....0....5....0....5....0... */
 H_MAIN1   = 'SMFACF2   FAIRCHILD CAMERA & INSTRUMENT         ACF2 ' ××

           /*                                               1    1  */
           /*  5    6         7         8         9         0    0  */
           /* .5....0....5....0....5....0....5....0....5....0....5. */
             'DSN ACTIVITY REPORT    V1M0               RUN ON: MM/' ××

           /*    1         1         1                              */
           /*    1         2         3                              */
           /* ...0....5....0....5....0.                             */
             'DD/YY HH.MM.SS  PAGE XXX ';


 H_DETAIL1 = '------EVENT------                  TSO-USER V   ACF2 ' ××
             '  TERM REC.                                          ' ××
             '                        ';

 H_DETAIL2 = '..DATE.. ..TIME.. ...ACF2 EVENT... /JOBNAME _ LOGONID' ××
             '  ADDR REASN DSNAME,PGM                              ' ××
             '                         ';

 H_SUMMARY1= '                                                     ' ××
             '                                                     ' ××
             '                        ';

 H_SUMMARY2= '                                                     ' ××
             '                                                     ' ××
             '                        ';


1DCL 1 RECIN BASED (PTR),            /* INPUT RECORD */
       2 INRZER              BIT(8),
       2 INRREC              BIT(8),
       2 INRTIME             BIT(32),
       2 INRDATE             FIXED DEC(7),
       2 INRID               CHAR(2),
       2 INRSYS              CHAR(2),
       2 INRJOB              CHAR(8),
       2 INRTME              BIT(32),
       2 INRDTE              FIXED DEC(7),
       2 INRUI1              CHAR(6),
       2 INRUI2              CHAR(2),
       2 INRRES(2048)        CHAR(1);

 DCL INCONV(4096)  CHAR(1) BASED(PTR);

 DCL HEXIN         CHAR(8),
     HEXBASED      CHAR(8) BASED(@HEXPTR),
     HEXOUT        CHAR(16),
     HEXC(2)       CHAR(8)  DEF(HEXOUT) POS(1),
     HEX           BIT(1)   INIT('0'B),
     HEXCC   ENTRY (CHAR(*),CHAR(*)),
     OFFSET        FIXED    BIN(15,0)   INIT(0);

 DCL VDSNPGM   CHAR(65) VAR INIT('');
 DCL COMMENT   CHAR(80) VAR INIT('');


 DCL (PTR,@SUMMARY,@DETAIL1,@DETAIL,@HEXPTR,@RELPTR) POINTER;


1DCL 1 SMFREC00 BASED(PTR),      /*  SMF RECORD 00   SYSTEM IPL      */
       2 SMF00FLG       BIT(8),
       2 SMF00RTY       BIT(8),
       2 SMF00TME       BIT(32),
       2 SMF00DTE       FIXED DEC(7),
       2 SMF00SID       CHAR(4);

 /*    ***   ACFS$SMF -->SMF SECURITY JOURNAL RECORD ***      ACF 20*/
 DCL 1 SMFREC221  BASED(PTR),
       2 A$SMFIND BIT(8),         /* SMF SYSTEM INDICATOR BITS      */
   /*  2 A$SMFVS2 EQU X'02'       /* MVS, VS2 SYSTEM          ACF 20*/
       2 A$SMFSMF BIT(8),         /* SMF RECORD TYPE, BINARY  ACF 20*/
       2 A$SMFTIM BIT(32),        /* SMF RECORD TIME, .01 SEC.      */
       2 A$SMFDAT FIXED DEC(7),   /* SMF RECORD DATE, 00YYDDDF      */
       2 A$SMFCPU CHAR(4),        /* SMF RECORD SYSTEM CPU ID.      */
       2 A$SMFJOB CHAR(8),        /* JOB NAME ON READER       ACF 20*/
       2 A$SMFTME BIT(32),        /* JOB TIME ON READER, .01 SEC.   */
       2 A$SMFDTE BIT(32),        /* JOB DATE ON READER, 00YYDDDF   */
       2 A$SMFUID CHAR(8),        /* SMF COMMON USER ID FIELD ACF 20*/
       2 A$SECTYP(0:7) BIT(1),    /* RECORD TYPE FLAGS        ACF 20*/
   /*  2 A$SJOURN EQU X'80'       /* THIS RECORD GENERATED BY LOGGIN*/
   /*  2 A$SVIOLG EQU X'40'       /* THIS RECORD GENERATED BY A VIOL*/
   /*  2 A$STRACE EQU X'20'       /* THIS RECORD IS A TRACE   ACF 20*/
   /*  2 A$SINSTL EQU X'10'       /* THIS RECORD REQUESTED BY INSTAL*/
   /*  2 A$SDTAPE EQU X'08'       /* TAPE DATASET OVERRIDE    ACF 20*/
   /*  2 A$SPGMNM EQU X'04'       /* IF ON, PGMNAME LOGGING/VIOLATIO*/
   /*  2 A$SABEND EQU X'02'       /* UNKNOWN/INVALID PARMLIST ERROR */
   /*  2 A$SVOLUM EQU X'01'       /* IF ON, VOLUME LOG/VIO    ACF 21*/
                                  /*                          ACF 20*/
       2 A$SSPID1 BIT(8),         /* SECURITY MODULE ISSUING SVC    */
                                  /*                          ACF 20*/
   /*  2 A$SSPIOP EQU 0           /* OPEN DASDM               ACF 20*/
   /*  2 A$SSPIEV EQU 1           /* E-O-V DASDM              ACF 20*/
   /*  2 A$SSPIVS EQU 2           /* VSAM DSNAME OPEN         ACF 20*/
   /*  2 A$SSPITO EQU 3           /* TAPE OPEN                ACF 20*/
   /*  2 A$SSPITE EQU 4           /* TAPE E-O-V               ACF 20*/
   /*  2 A$SSPICT EQU 5           /* AMS/CATALOG MANAGEMENT   ACF 20*/
   /*  2 A$SSPIAL EQU 6           /* DASDM NEW DATASET ALLOC  ACF 20*/
   /*  2 A$SSPIRN EQU 7           /* RENAME DASDM DSNAME      ACF 20*/
   /*  2 A$SSPISC EQU 8           /* SCRATCH/DELETE           ACF 20*/
   /*  2 A$SSPIUR EQU 9           /* USER DEFINED             ACF 20*/
   /*  2 A$SSPIEX EQU 10          /* EXTERNAL                 ACF 20*/
   /*  2 A$SSPIPG EQU 11          /* PROGRAM NAME             ACF 20*/
                                  /*                          ACF 20*/
       2 A$SSPAC1 BIT(8),         /* ACCESS FLAGS             ACF 20*/
                                  /*                          ACF 20*/
   /*  2 A$SSPAIN EQU X'00'       /* INPUT ACCESS             ACF 20*/
   /*  2 A$SSPARB EQU X'01'       /* READBACK ACCESS          ACF 20*/
   /*  2 A$SSPAIO EQU X'03'       /* IN/OUT ACCESS            ACF 20*/
   /*  2 A$SSPAUP EQU X'04'       /* UPDATE ACCESS            ACF 20*/
   /*  2 A$SSPAOI EQU X'07'       /* OUT/IN ACCESS            ACF 20*/
   /*  2 A$SSPAOU EQU X'0F'       /* OUTPUT ACCESS            ACF 20*/
   /*  2 A$SSPAEX EQU X'70'       /* EXEC ONLY ACCESS         ACF 20*/
   /*  2 A$SSPAOT EQU X'7F'       /* NON-INPUT: ALLOC/RENAME/SCRATCH*/
   /*  2 A$SSPAXX EQU X'80'       /* LAST ENTRY FLAG          ACF 20*/
                                  /*                          ACF 20*/
       2 A$SSMISC BIT(8),         /* MISC CONTROL BITS        ACF 20*/
       2 A$SSCNTL BIT(8),         /* TSO/BATCH CNTL BITS      ACF 20*/
                                  /*                          ACF 20*/
   /*  2 A$SSCTSU EQU X'80'       /* USER IS IN TMP, FORE/BACK      */
   /*  2 A$SSCTST EQU X'40'       /* USER IS IN TEST COMMAND  ACF 20*/
   /*  2 A$SSCALL EQU X'20'       /* USER ISSUED CALL COMMAND ACF 20*/
   /*  2 A$SSCNOT EQU X'10'       /* DISALLOW TEST W/O OPERANDS     */
   /*  2 A$SSCEXC EQU X'08'       /* CALL/EXEC BYPASS MODE    ACF 20*/
   /*  2 A$SSCMTP EQU X'04'       /* MULTIPLE TMPS, UNKNOWN LIBRARY */
                                  /*                          ACF 20*/
       2 A$SSPDSN CHAR(44),       /* DATASET ACCESSED         ACF 20*/
       2 A$SSPVOL CHAR(6),        /* VOLUME ON WHICH DATASET RESIDES*/
       2 A$SSPUCB CHAR(3),        /* UCB ON WHICH VOLUME EXISTS     */
       2 A$SSPMEM CHAR(8),        /* MEMBER NAME FOR DATASET, IF ANY*/
       2 A$SSPDDN CHAR(8),        /* DDNAME USED FOR ACCESS, OR BLAN*/
       2 A$SSLDSN CHAR(44),       /* JOB/STEPLIB, CALL LIBRARY NAME */
       2 A$SSLVOL CHAR(6),        /* VOLUME ON WHICH LIBRARY RESIDES*/
       2 A$SSCPGM CHAR(8),        /* CURRENT PROGRAM/COMMAND EXECING*/
       2 A$SSSTEP CHAR(8),        /* CURRENT STEPNAME         ACF 20*/
       2 A$SSEXEC CHAR(8),        /* CURRENT EXEC=PGM NAME    ACF 20*/
       2 A$SSJES# CHAR(8),        /* JES JOB IDENTIFICATION NUMBER  */
       2 A$SSUCB# CHAR(8),        /* TCAM LINE UCB#/LINE ID.  ACF 20*/
       2 A$SSLUID CHAR(8),        /* USER LOGON ID            ACF 20*/
       2 A$SSSKEY CHAR(8),        /* USERS HIGH LEVEL INDEX   ACF 20*/
       2 A$SSNAME CHAR(20),       /* USERS NAME               ACF 20*/
       2 A$SLFLAG BIT(16),        /* LID FLAGS ...            ACF 20*/
       2 A$SLCOND BIT(12),        /* RM RETURN CODE           ACF 20*/
       2 A$CODE   BIT(4),      /* FCI TEST..00=ACCESS, 04=RULE,0C=KEY*/
       2 A$SLPPLL BIT(32)         /* ACCESS PERMISSION FLAGS  ACF 20*/
         ;                        /* -----END OF RECORD-----  ACF 20*/

1 DCL  EVENT_NAME(0:12) CHAR(8)   INIT(
          'DA-OPEN ','EOV-OPEN','VSAM-OPN','TAPE-OPN',
          'TAPE-EOV','CATALOG ','ALLOC   ','RENAME  ',
          'DELETE  ','USER-CHK','EXTERNAL','PGM NAME',
          '        '  );

 DCL  RTY_KEYWDS(8) CHAR(8) VAR INIT(
          'LOG','*VIO*','TRACE','EXIT-LOG',
          'TAP-OVRD','PGMNAME','UNK-ERR','VOLUME');


  DCL 1 ACCESS,
        2 FLAGS(8) BIT(8) INIT('00000000'B,'00000001'B,
          /* FLAGS SET TO  */  '00000011'B,'00000100'B,
          /* MASK= .1..1111*/  '00000111'B,'00001111'B,
                               '01000000'B,'01001111'B) ,
                           /*   .×..××××    .×..××××      */

        2 NAME(8) CHAR(8)
                          INIT(' INPUT  ', ' RDBACK ',
                               ' IN/OUT ', ' UPDATE ',
                               ' OUT/IN ', ' OUTPUT ',
                               ' EXEC   ', '        ' );
    DCL BIT8   BIT(8) INIT('0'B);
1/*     SETUP ERROR HANDLING  AND PROGRAM CLEANUP              */

     ON ERROR BEGIN;
       ON ERROR SYSTEM;
       PUT DATA(INREC,SMFREC00,SMFREC221);
              END;



     ON FINISH BEGIN ;
        PUT FILE(PRINT) SKIP(2) EDIT
            (INREC,     ' RECORDS READ IN',
             REC00     ,' TYPE 00  RECORDS FOUND (SYSTEM IPL)',
             REC221    ,' TYPE 221 RECORDS FOUND (ACF2 DSN LOG)',
             #FLUSHED  ,' TYPE 221 RECORDS NOT SELECTED',
             REC221_DONE,' TYPE 221 RECORDS SELECTED')
            ((5)(P'Z,ZZZ,ZZ9',A,SKIP));
        CLOSE FILE (INPUT),
              FILE (OUTPUT),
              FILE (PRINT) ;
     END ;

     ON ENDFILE(INPUT)   EOFIN='1'B;

     ON ENDPAGE(PRINT) BEGIN;
        IF PAGENO > 0 THEN PUT FILE(PRINT) PAGE;

        PAGENO = PAGENO + 1;
        PUT FILE(PRINT)      EDIT
           (H_MAIN1)        (A)
           (RPTHEAD)        (SKIP,A)
           (H_BLANK)        (SKIP,A);

        IF TITLE1 ^= (131)' ' THEN
           PUT FILE(PRINT) EDIT
               (TITLE1)     (SKIP,A);

        IF TITLE2 ^= (131)' ' THEN
           PUT FILE(PRINT) EDIT
               (TITLE2)     (SKIP,A);
     END;

1    OPEN FILE (INPUT)  INPUT,
          FILE (OUTPUT) OUTPUT,
          FILE (PRINT) PRINT LINESIZE(131);

     INDATE = DATE;
     RUNDATE = C_MM ×× C_DD ×× C_YY;

     RUNTIME = SUBSTR(TIME,1,6);
     PAGENO = 0;

     ON ENDFILE(SYSIN) GOTO START;

     GET FILE(SYSIN) DATA(HEX,OFFSET,DOCLIST);

  START: SUBTITLE = '';
     SUBTITLE = 'SELECTION: ';

     IF DEBUG   THEN SUBTITLE = SUBTITLE ×× ' DEBUG ';
                ELSE SUBTITLE = SUBTITLE ×× ' NODEBUG ';

     IF HEX  THEN
       IF OFFSET < 0 × OFFSET > 4088 THEN HEX = '0'B;

     IF HEX THEN
       DO;
         PACK5 = OFFSET;
         SUBTITLE = SUBTITLE ×× ' HEXDISP, OFFSET=' ×× PACK5 ×× ' ';
         SUBSTR(H_DETAIL1,115,17)='HEX OFFSET=' ×× PACK5;
         SUBSTR(H_DETAIL2,115,17)='........ ........';
         OFFSET = OFFSET + 1;
       END;

     RPTHEAD = '';
     RPTHEAD = 'SEQUENCE: DATE,TIME  OF EVENT';

1/* MAIN LOOP....READ IN SMF RECORDS AND PROCESS                     */

     TITLE1 = H_DETAIL1;
     TITLE2 = H_DETAIL2;
     SIGNAL ENDPAGE(PRINT) ;

     EOFIN = '0'B;
     READ FILE(INPUT) SET(PTR);

     DO WHILE(^EOFIN);     /*  MAIN LOOP...READ AND PROCESS RECORDS */

       INREC = INREC + 1;

       IF INRZER = '00000010'B &
          INRREC = TYPE221     THEN
          DO;
            REC221 = REC221 + 1;
            IF SELECTED
             THEN
                CALL RECTY221 ;
             ELSE
                #FLUSHED = #FLUSHED + 1;
          END;
       IF INRZER = '00000010'B &
          INRREC = TYPE00      THEN
          DO;
            REC00 = REC00 + 1;
            CALL RECTY00;
          END;
       READ FILE(INPUT) SET(PTR);
     END;

     CALL SUMMARY;    /* REPORT TOTALS..MINMAX..AVGS */

     STOP;

 /*   END OF MAIN PROGRAM            */
1/*------------------------------------------------------------*/
 RECTY221: PROC ;           /* SMF REC TYPE221 ACF2 DSN ACTIVITY*/
 /*------------------------------------------------------------*/
     REC221_DONE = REC221_DONE + 1;
     P_JOBNAME,JOBNAME = A$SMFJOB;    /* COPY JOBNAME */
     P_ACF2_LOGONID,ACF2_LOGONID=A$SSLUID;  /*COPY LOGONID*/

     RCD_DATE = A$SMFDAT;
     RCD_TIME = CNVTIME(A$SMFTIM);    /* CONVERT EVENT TIME */
     P_RCD_TIME = RCD_TIME;
     PACK5 = RCD_DATE;                /* CONVERT EVENT DATE */
     CALL R941X12(PACK5,PACK6);       /* TO GREGORIAN       */
     IF PACK6 ^= 0 THEN P_RCD_DATE = PACK6;
                   ELSE P_RCD_DATE = 0;
     UNSPEC(EVENT_#) = '00000000'B ×× A$SSPID1; /* GET EVENT TYPE */
     P_ACF2_EVENT,ACF2_EVENT = EVENT_NAME(EVENT_#);  /* SET TO TEXT*/
     ACF2_ACCESS='';
     BIT8 = A$SSPAC1 & '01001111'B;    /*MASK OF JUNK FOR COMPARE */
     DO K = 1 TO 8;
       IF ACCESS.FLAGS(K) = BIT8  THEN
         ACF2_ACCESS = ACCESS.NAME(K);
     END;
     IF EVENT_# = 5 THEN
       DO;
         IF (A$SSMISC & '00010000'B) = '00000000'B
           THEN ACF2_ACCESS = ' DEFINE ';
           ELSE ACF2_ACCESS = ' DELETE ';
       END;
     P_ACF2_ACCESS = ACF2_ACCESS;
     IF A$SECTYP(1)
         THEN VIOLATION = '*';
         ELSE VIOLATION = '';

     P_VIOLATION = VIOLATION;

     TERM_ADDR = SUBSTR(A$SSUCB#,5,4);
     P_TERM_ADDR = TERM_ADDR;

     RCD_REASON= '';
     IF A$SECTYP(0) THEN RCD_REASON(1) = 'L';
     IF A$SECTYP(2) THEN RCD_REASON(2) = 'T';
     IF A$SECTYP(3) THEN RCD_REASON(3) = 'X';
     IF A$SECTYP(4) THEN RCD_REASON(4) = 'O';
     IF A$CODE = '0000'B THEN RCD_REASON(5)= 'A';
     IF A$CODE = '0100'B THEN RCD_REASON(5)= 'R';
     IF A$CODE = '1100'B THEN RCD_REASON(5)= 'K';
     P_RCD_REASON = RCD_REASON;

     ACF2_DSNAME  = A$SSPDSN ;
     ACF2_MEMBER  = A$SSPMEM ;
     ACF2_VOLUME  = A$SSPVOL ;
     ACF2_DDNAME  = A$SSPDDN ;
     ACF2_PGM     = A$SSCPGM ;
     ACF2_STEP    = A$SSSTEP ;
     ACF2_LIBNAM  = A$SSLDSN ;
     ACF2_JOBID   = A$SSJES# ;
     ACF2_UNAME   = A$SSNAME ;

     ACF2_KEY     = SUBSTR(A$SSPDSN,1,8); /* FIND OUT QUAL USED BY ACF*/

     K = INDEX(ACF2_KEY,'.');  /* FIND IF QUAL FITS */
     IF K > 0
       THEN SUBSTR(ACF2_KEY,K,9-K) = SUBSTR('        ',1,9-K);

     VDSNPGM=DEBLANK(ACF2_DSNAME) ×× ',PGM='
             ×× DEBLANK(ACF2_PGM) ;

     P_DSNPGM = VDSNPGM;

     IF HEX THEN
       DO;
         @HEXPTR = ADDR(INCONV(OFFSET));
         HEXIN = HEXBASED;
         CALL HEXCC(HEXIN,HEXOUT);
         P_HEXCLR='';
         P_HEX1 = HEXC(1);
         P_HEX2 = HEXC(2);
       END;

     PUT FILE(PRINT) SKIP EDIT     /* WRITE OUT DETAIL LINE   */
        (PDETAIL)    (A);

  /* CALL FIND_RELOCATE;           /* GO INDEX THE REL SECTS  */
  /* CALL PROC_EVENT(EVENT_#);     /* AND THEN PROCESS THE EVNT*/

  /* IF EVENT_# < 8 THEN CALL POST_MSG(','); /* SPLIT ON ','  */
  /*                ELSE CALL POST_MSG(' '); /* SPLIT ON ' '  */

  /* IF EVENT_# >= 8 & DOCLIST THEN CALL GEN_CLIST(' '); /*  CLIST */

     WRITE FILE(OUTPUT) FROM(OUTREC);

     RETURN ;
 END RECTY221;
1/*------------------------------------------------------------*/
 RECTY00: PROC ;            /* SMF REC TYPE00 SYSTEM IPL        */
 /*------------------------------------------------------------*/


     PDETAIL = '';                    /* INITIALIZE RECORD  */
     RCD_DATE = SMF00DTE;
     RCD_TIME = CNVTIME(SMF00TME);    /* CONVERT EVENT TIME */
     P_RCD_TIME = RCD_TIME;
     PACK5 = RCD_DATE;                /* CONVERT EVENT DATE */
     CALL R941X12(PACK5,PACK6);       /* TO GREGORIAN       */
     IF PACK6 ^= 0 THEN P_RCD_DATE = PACK6;
                   ELSE P_RCD_DATE = 0;
     P_ACF2_EVENT = '***************';
     P_DSNPGM = 'SYSTEM INITIAL PROGRAM LOAD  (IPL)';

     PUT FILE(PRINT) SKIP EDIT (PDETAIL)    (A);


     RETURN ;
 END RECTY00;
1/*------------------------------------------------------------*/
  POST_MSG: PROC(SEP);   /* SPLIT MULTILINE MSG FOR PRINTING   */
 /*------------------------------------------------------------*/

     DCL MSG   CHAR(80) VAR INIT('');
     DCL (CLEN,MLEN,CPTR,CEND,K,L) FIXED BIN(15,0);
     DCL SEP   CHAR(1);

     CLEN = LENGTH(CSTR);
     IF CLEN = 0 THEN RETURN;     /* SPLIT IF NOTHING TO PRINT */

     CPTR = 1;                    /* INDICATE START WITH FIRST */
                                  /* CHARACTER IN CSTR         */

     PUT FILE(PRINT) SKIP EDIT (H_BLANK) (A); /* SKIP A LINE   */

     IF CLEN <= 80 THEN
       DO;
         DETAIL1 = '';
         P_DETAIL = CSTR;
         PUT FILE(PRINT) SKIP EDIT
            (PDETAIL1)  (A);
       END;
      ELSE
       DO  WHILE(CPTR < CLEN);
         CEND = CPTR + 80 -1;    /* ESTABLISH TARGET CUTOFF POINT */
         CEND = MIN(CEND,CLEN);  /* MAKE SURE WE DONT OVERFLOW    */
         IF CEND < CLEN THEN
           DO;
             DO K = CEND TO CPTR BY -1 WHILE(SUBSTR(CSTR,K,1) ^= SEP);
             END;                /* FIND PRIOR DIVIDE POINT       */
             K = K+1;            /* BACKUP TO BLANK....           */
             MLEN = K - CPTR -1; /* GET LENGTH OF TARGET STRING   */
             MSG= SUBSTR(CSTR,CPTR,MLEN); /* MOVE STR TO ASSEMBLY AREA*/
             DETAIL1='';
             P_DETAIL = MSG ×× ' +';/* INDICATE CONTINUED         */
           END;
          ELSE
           DO;
             DETAIL1='';
             P_DETAIL=SUBSTR(CSTR,CPTR);  /* USE THE REST OF CSTR */
             MLEN=9999;                   /*INSURE LAST LOOP      */
           END;
         PUT FILE(PRINT) SKIP EDIT(PDETAIL1) (A);  /* WRITE THE LINE*/
         CPTR = CPTR + MLEN + 1; /* POINT TO NEXT CHARACTER AND   */
                                 /*   LOOP WITH THE DO            */
       END;

    IF LENGTH(COMMENT) > 0 THEN
      DO;
        DETAIL1='';
        P_DETAIL=COMMENT;
        PUT FILE(PRINT) SKIP EDIT(PDETAIL1) (A);
      END;

    IF CLEN > 0 THEN PUT FILE(PRINT) SKIP EDIT(H_BLANK) (A);

     RETURN;
  END POST_MSG;
1/*------------------------------------------------------------*/
  DEBLANK: PROC (INSTR) RETURNS(CHAR(255) VAR);
 /*------------------------------------------------------------*/

     DCL INSTR  CHAR(*),
         OUTSTR CHAR(255) VAR,
         I      FIXED BIN(15,0);

     I = INDEX(INSTR,' ');     /* FIND BLANK IF THERE IS ONE */
     IF I=0 THEN               /*   NO BLANK....             */
       DO;
         OUTSTR=INSTR;
         RETURN (OUTSTR);
       END;
     IF I<=1 THEN              /*   NO BLANK....             */
       DO;
         OUTSTR='';
         RETURN (OUTSTR);
       END;

     OUTSTR=SUBSTR(INSTR,1,I-1);

     RETURN (OUTSTR);
 END DEBLANK;
1/*------------------------------------------------------------*/
 /*    DECODE BIT STRINGS INTO TEXT OPTIONS                    */
 /*------------------------------------------------------------*/
 GET_OPTS: PROC(FLAGS,I_FLAGS,E_FLAGS,IGNORE,TEXT,SEP,COUNT)
             RETURNS(CHAR(256) VAR);

     DCL (FLAGS,I_FLAGS,E_FLAGS,IGNORE)  BIT(*),
         TEXT(*)     CHAR(*) VAR,
         SEP         CHAR(1),
         (COUNT,I,L) FIXED BIN(15,0),
         OSTRING     CHAR(256) VAR,
         (HEAD,TAIL) CHAR(10) VAR;

     OSTRING='';

     DO  I = 1 TO COUNT;                 /* DECODE OPTIONS  */
       HEAD,TAIL='';
       IF SUBSTR(FLAGS,I,1) &            /* SELECT IF BIT SET AND */
          ^SUBSTR(IGNORE,I,1)   THEN     /* WE SHOULD NOT IGNORE  */
         DO;
           IF SUBSTR(I_FLAGS,I,1) THEN   /* CMD FAIL DUE TO AUTH*/
             DO;
               HEAD = '/*';
               TAIL = '<AUTH>*/ ';
             END;
           IF SUBSTR(E_FLAGS,I,1) THEN   /* CMD FAIL DUE TO ERROR*/
             DO;
               HEAD = '/*';
               TAIL = '<ERR>*/ ';
             END;

           OSTRING=OSTRING ×× HEAD ×× TEXT(I) ×× TAIL ×× SEP;
         END;
     END;

     L = LENGTH(OSTRING);                    /* REMOVE TRAILING */
     IF L>1                                  /* SEPARATOR       */
       THEN OSTRING=SUBSTR(OSTRING,1,L-1);
     IF DEBUG THEN
     PUT SKIP DATA(COUNT,FLAGS,I_FLAGS,E_FLAGS,IGNORE,OSTRING);
     RETURN (OSTRING);
 END GET_OPTS;
1/*------------------------------------------------------------*/
 /*    DECODE AUTH FAILURE REASONS INTO TEXT FOR CMD VIOLATIONS*/
 /*------------------------------------------------------------*/
 AUTH_FAIL: PROC(FLAGS,TEXT,SEP,COUNT)
             RETURNS(CHAR(255) VAR);

     DCL FLAGS       BIT(*),
         TEXT(*)     CHAR(*) VAR,
         SEP         CHAR(1),
         (COUNT,I,L) FIXED BIN(15,0),
         OSTRING     CHAR(255) VAR;

     OSTRING='';

     DO  I = 1 TO COUNT;                 /* DECODE OPTIONS  */
       IF SUBSTR(FLAGS,I,1) THEN         /* SELECT IF BIT SET AND */
         DO;

           OSTRING=OSTRING ×× TEXT(I) ×× SEP;
         END;
     END;

     L = LENGTH(OSTRING);                    /* REMOVE TRAILING */
     IF L>1                                  /* SEPARATOR       */
       THEN OSTRING=SUBSTR(OSTRING,1,L-1);

     RETURN (OSTRING);
 END AUTH_FAIL;
1/*------------------------------------------------------------*/
 /*    DECODE KEYWORD STRING..MAKE INTO TEXT                   */
 /*------------------------------------------------------------*/
  KEYWORD_STR:
     PROC(BIT#,FLAGS,I_FLAGS,E_FLAGS,TEXT,STR,SEP)
        RETURNS(CHAR(255) VAR);

     DCL (FLAGS,I_FLAGS,E_FLAGS)  BIT(*),
         TEXT(*)     CHAR(*) VAR,
         SEP         CHAR(1),
         STR         CHAR(*) ,
         (COUNT,BIT#,L) FIXED BIN(15,0),
         OSTRING     CHAR(255) VAR,
         (HEAD,TAIL) CHAR(10) VAR;

     OSTRING='';

   HEAD,TAIL='';
   IF SUBSTR(FLAGS,BIT#,1) THEN          /* SELECT IF BIT SET     */
     DO;
       IF SUBSTR(I_FLAGS,BIT#,1) THEN /* CMD FAIL DUE TO AUTH*/
         DO;
           HEAD = '/*';
           TAIL = '<AUTH>*/ ';
         END;
       IF SUBSTR(E_FLAGS,BIT#,1) THEN /* CMD FAIL DUE TO ERROR*/
         DO;
           HEAD = '/*';
           TAIL = '<ERR>*/ ';
         END;

       OSTRING= HEAD ×× TEXT(BIT#) ×× '(' ××
                DEBLANK(STR) ××
                ')' ×× TAIL ×× SEP;

     END;
     IF DEBUG THEN
  PUT SKIP DATA(BIT#,FLAGS,I_FLAGS,E_FLAGS,OSTRING);
     RETURN (OSTRING);
 END KEYWORD_STR;
1/*------------------------------------------------------------*/
 /*    DECODE KEYWORD STRING..MAKE INTO TEXT                   */
 /*------------------------------------------------------------*/
  KEYWORD_VSTR:
     PROC(BIT#,FLAGS,I_FLAGS,E_FLAGS,TEXT,STR,SEP)
        RETURNS(CHAR(255) VAR);

     DCL (FLAGS,I_FLAGS,E_FLAGS)  BIT(*),
         TEXT(*)     CHAR(*) VAR,
         SEP         CHAR(1),
         STR         CHAR(*) VAR,
         (COUNT,BIT#,L) FIXED BIN(15,0),
         OSTRING     CHAR(255) VAR,
         (HEAD,TAIL) CHAR(10) VAR;

     OSTRING='';

   HEAD,TAIL='';
   IF SUBSTR(FLAGS,BIT#,1) THEN          /* SELECT IF BIT SET     */
     DO;
       IF SUBSTR(I_FLAGS,BIT#,1) THEN /* CMD FAIL DUE TO AUTH*/
         DO;
           HEAD = '/*';
           TAIL = '<AUTH>*/ ';
         END;
       IF SUBSTR(E_FLAGS,BIT#,1) THEN /* CMD FAIL DUE TO ERROR*/
         DO;
           HEAD = '/*';
           TAIL = '<ERR>*/ ';
         END;

       OSTRING= HEAD ×× TEXT(BIT#) ×× '(' ××
                STR ××
                ')' ×× TAIL ×× SEP;

     END;
     IF DEBUG THEN
  PUT SKIP DATA(BIT#,FLAGS,I_FLAGS,E_FLAGS,OSTRING);
     RETURN (OSTRING);
 END KEYWORD_VSTR;
1/*------------------------------------------------------------*/
 /*    DECODE KEYWORD BITS  ..MAKE INTO TEXT                   */
 /*------------------------------------------------------------*/
  KEYWORD_BIT:
     PROC(BIT#,FLAGS,I_FLAGS,E_FLAGS,TEXT,BITS,TEXT2,SEP)
        RETURNS(CHAR(256) VAR);

     DCL (FLAGS,I_FLAGS,E_FLAGS)  BIT(*),
         TEXT(*)     CHAR(*) VAR,
         TEXT2(*)    CHAR(*) VAR,
         BITS        BIT(*),
         SEP         CHAR(1),
         (COUNT,BIT#,L) FIXED BIN(15,0),
         OSTRING     CHAR(256) VAR,
         (HEAD,TAIL) CHAR(10) VAR;

     OSTRING='';

   HEAD,TAIL='';
   IF SUBSTR(FLAGS,BIT#,1) THEN          /* SELECT IF BIT SET     */
     DO;
       IF SUBSTR(I_FLAGS,BIT#,1) THEN /* CMD FAIL DUE TO AUTH*/
         DO;
           HEAD = '/*';
           TAIL = '<AUTH>*/ ';
         END;
       IF SUBSTR(E_FLAGS,BIT#,1) THEN /* CMD FAIL DUE TO ERROR*/
         DO;
           HEAD = '/*';
           TAIL = '<ERR>*/ ';
         END;

       OSTRING= HEAD ×× TEXT(BIT#) ×× '(' ××
                GET_OPTS(BITS,BZERO,BZERO,BZERO,
                            TEXT2,' ',LENGTH(BITS)) ××
                ')' ×× TAIL ×× SEP;

     END;
     IF DEBUG THEN
  PUT SKIP DATA(BIT#,FLAGS,I_FLAGS,E_FLAGS,OSTRING);

     RETURN (OSTRING);
 END KEYWORD_BIT;
1/*----------------------------------------------------------*/

 SELECTED: PROC  RETURNS(BIT(1));


   RETURN ('1'B);
 END SELECTED;

 /*----------------------------------------------------------*/
 SUMMARY: PROC ;       /* WRITE OUTPUT SUMMARY STATISTICS    */
 /*----------------------------------------------------------*/


     RETURN ;
 END SUMMARY ;
0/*------------------------------------------------------*/
 CNVTIME: PROC(INTIME)  RETURNS(FIXED BIN(31,0));

 /*  CONVERT 100THS OF A SECOND TO HHMMSS                */
 /*------------------------------------------------------*/
    DCL INTIME FIXED BIN(31,0),
        (HH,MM,SS,RESULT) FIXED BIN(31,0) INIT(0);

      HH = INTIME / 360000;
      MM = INTIME / 6000 - 60 * HH;
      SS = MOD( (INTIME/100) , 60 );

      RESULT = 10000 * HH  +  100 * MM   + SS;

    RETURN(RESULT);

 END CNVTIME;
     END SMFACF2; /* END OF MAIN PROGRAM */
