        /* DATA SET S963P02    AT LEVEL 003 AS OF 05/24/78    */
 P963P02: /* DASD MONITOR PROGRAM   VERSION V2M0  DATASET SCR/UNCAT  */
          PROC OPTIONS(MAIN) REORDER;
 /*                                                                  */
 /* THIS PROGRAM READS THE SCRLOG DATASET PRODUCED BY P963P00        */
 /*   AND SORTS IT BY VOLUME,BY DSNAME.                              */
 /* FOR EACH DATASET RECORD, R963A30 IS CALLED TO DYNAMICALLY        */
 /*    ALLOCATE THE VOLUME (IF NEED BE) AND ISSUE THE SCRATCH        */
 /*    AND UNCATALOG MACROS AGAINST THE DATASET.                     */
 /*                                                                  */
 /*                                                                  */
 /* KEN TRUE      V1M0    10 NOV 77                                  */
 /*               V1M1    16 NOV 77  ADDED RETURN CODE PROCESSING    */
 /*               V2M0    23 FEB 78  (REWRITE OF OPER TO DIRECT SCR) */
 /*                                                                  */
 /* PROGRAM RETURNS RC=1000   NORMAL (NO PROBLEMS)                   */
 /*                 RC=1004   NORMAL (SOME DATASETS CANT BE SCR)     */
 /*                 RC=1012   NO SCRATCH GENERATED                   */
 /*                 RC=1016   MISSING/INVALID INSCR DATASET          */
 /*                                                                  */
 DCL R941X11 EXTERNAL ENTRY            /* GREGORIAN TO JULIAN DATE*/
             OPTIONS(ASSEMBLER,INTER);

 DCL R941X12 EXTERNAL ENTRY            /* JULIAN TO GREGORIAN DATE*/
             OPTIONS(ASSEMBLER,INTER);

 DCL R963A30 EXTERNAL ENTRY            /* SUPERSCRATCHER          */
             OPTIONS(ASSEMBLER,INTER);

 DCL (DATE,TIME)    BUILTIN;


 DCL INSCR    FILE  RECORD SEQUENTIAL INPUT  ENV(CONSECUTIVE);
 DCL REPORT   FILE  STREAM PRINT OUTPUT;

 DCL @LOG      POINTER;
 DCL 1 SCRLOG BASED(@LOG),/* RECORD GENERATED BY P963P00           */
       2 DSNAME        CHAR(44),
       2 VOLUME        CHAR(6),
       2 FLAGS         CHAR(2),
       2 BILL_TO       CHAR(8),
       2 LAST_USED     PIC'ZZZZZ',
       2 MOD_USER      CHAR(8),
       2 DEVICE        CHAR(7);


 DCL 1 SCRPARMS,           /* RECORD GENERATED BY P963P00 FIRST IN DS*/
       2 FILL1       CHAR(1),
       2 HEAD1       CHAR(8),
       2 $RUN_DATE   PIC'Z9/99/99',
       2 FILL2       CHAR(1),
       2 $RUN_TIME   PIC'Z9.99.99',
       2 HEAD2       CHAR(9),
       2 $SCR_DATE   PIC'Z9/99/99',
       2 HEAD3       CHAR(8),
       2 $SCR_CODES  CHAR(8),
       2 FILL3       CHAR(21);

 DCL (INREC_SCR,#SCRATCHED,SCR_BYPASSED,NOT_THERE,
      RPTPAGENO,
      I,J,K)
                     FIXED BIN(15,0) INIT(0);

 DCL  RETURN_CODE  FIXED BIN(31,0) INIT(0),
      SCR_RC       FIXED BIN(15,0) INIT(0);

  DCL EOF_INSCR      BIT(1)   INIT('0'B),
      FINISHED       BIT(1)   INIT('0'B),
      BIT16          BIT(16)  INIT('0'B);

  DCL SCR_MSG     CHAR(80)    INIT(' ');


  DCL 1 OPTIONS(8),
        2 TEXT       CHAR(10) VAR
            INIT('UNAUTHED', 'UNCATLGD', 'UNUSED',    'TOOBIG',
                 'EXPIRED',  'OVERALLOC','PASTRETPD', ''        ),
        2 BIT        BIT(8)
            INIT('10000000'B,'01000000'B,'00100000'B,'00010000'B,
                 '00001000'B,'00000100'B,'00000010'B,'00000001'B);

 DCL $REASONS        CHAR(50)  VAR INIT('');
 DCL $LAST_USED      PIC'Z9/99/99' INIT(0);

 DCL PACK6           PIC'999999'   INIT(0);
 DCL MASK            BIT(8)        INIT((8)'0'B);

  DCL INDATE         CHAR(6)     INIT(' '),
      YY             CHAR(2) DEF(INDATE) POS(1),
      MM             CHAR(2) DEF(INDATE) POS(3),
      DD             CHAR(2) DEF(INDATE) POS(5);

  DCL TODAY   CHAR(5),
      TODAY_JDATE    PIC'99999'      INIT(0),
      THRESH_JDATE_C PIC'99999'      INIT(0),
      THRESH_JDATE   FIXED DEC(5)    INIT(0);

  DCL HEADING         CHAR(130),
      RPTNO           CHAR(3)       DEF(HEADING) POS(  6),
      RUN_DATE        PIC'Z9/99/99' DEF(HEADING) POS( 95),
      RUN_JDATE       PIC'99.999'   DEF(HEADING) POS(105),
      RUN_TIME        PIC'Z9.99.99' DEF(HEADING) POS(113),
      PAGENO          PIC'ZZ9'      DEF(HEADING) POS(128),
      SUBTITLE        CHAR(112)  VAR INIT(''),
      HEADING2        CHAR(130),
      HEADING3        CHAR(130),
      BLANKLINE       CHAR(130) INIT((130)' ');

 DCL  DSNHEAD         CHAR(56) INIT(' '),
      SAVEDSN         CHAR(44) INIT(' '),
      CODE            CHAR(4)  INIT(' ');

 DCL INREC    CHAR(80)    INIT(' ');

1/*  INITIALIZATION OF VARIABLES                                    */

  HEADING =   'L963-010 FAIRCHILD CAMERA AND INSTRUMENT       ' ××
              '   DASD MONITOR SYSTEM  VER(V2M0)      ' ××
              'RUN ON: 99/99/99 (99.999) 99.99.99  PAGE 999';

  HEADING2 =  '';
  HEADING3 =  '';
  INDATE   = DATE;
  RUN_DATE = MM ×× DD ×× YY;
  RUN_TIME = SUBSTR(TIME,1,6);
  TODAY = JULIAN(INDATE);
  TODAY_JDATE = TODAY;
  RUN_JDATE   = TODAY;

  OPEN FILE(INSCR)    INPUT,
       FILE(REPORT) OUTPUT LINESIZE(130);

  ON ENDPAGE(REPORT)
     CALL FIN_PAGE(REPORT,'010',DSNHEAD,HEADING3,RPTPAGENO);

  ON FINISH
    BEGIN;
      CLOSE FILE(INSCR),
            FILE(REPORT);
    END;


  HEADING3 =  'CODE    D S N A M E';
  SUBSTR(HEADING3,50,39) = 'VOLUME  ACTION TAKEN/ERROR MSGS/REMARKS';

  ON ENDFILE(INSCR)   EOF_INSCR   = '1'B;

  READ FILE(INSCR) INTO(SCRPARMS);    /* SET UP FOR PROCESING..HEADER */

  IF EOF_INSCR   THEN
    DO;
      RETURN_CODE = 16;
      CALL PLIRETC(RETURN_CODE);
      PUT FILE(REPORT) SKIP EDIT
         ('*****P963P02 RUN ABORTED - INSCR DATASET IS EMPTY*****')
         (A);
      STOP;
    END;
  ELSE
    IF HEAD1 ^= 'MON RUN=' THEN
      DO;
        RETURN_CODE = 16;
        CALL PLIRETC(RETURN_CODE);
        PUT FILE(REPORT) SKIP EDIT
          ('*****P963P02 RUN ABORTED DUE TO INVALID SCRPARM CARD*****')
          (A);
        STOP;
      END;

  HEADING2 = '    DASD DATASET SCRATCH/UNCATLG PROGRAM   ' ××
                           ' (DATASETS SELECTED BY ' ××
                   SUBSTR( STRING(SCRPARMS),2,59);

  SUBSTR(HEADING2,125,1) = ')';

  DO I = 1 TO 8;
    IF SUBSTR(SCRPARMS.$SCR_CODES,I,1) ^= ' ' THEN
       MASK = MASK × OPTIONS.BIT(I);
  END;


  SIGNAL ENDPAGE(REPORT);              /* WRITE REPORT HEADINGS       */


1 /*  MAIN PROGRAM ..INVOKE SORT TO SORT THE SCRLOG */
  /*  EXIT E35 WILL PERFORM THE SCRATCHES           */

             /* SORT BY VOLUME, BILL_TO, THEN DSNAME */

 CALL PLISRTD(' SORT FIELDS=(45,6,CH,A,66,8,CH,A,1,44,CH,A) ',
              ' RECORD TYPE=F,LENGTH=(80) ',
              45000,RETURN_CODE,E15X,E35X,
              '','NO');


   CALL SUMMARY;                /*  PERFORM SUMMARY REPORTING       */


   PUT FILE(REPORT) SKIP(2) EDIT
         ('**** END OF REPORT L963-010 ****')
         (A);

   IF #SCRATCHED = 0    THEN RETURN_CODE = 12;
     ELSE
   IF SCR_BYPASSED ^= 0 THEN RETURN_CODE = 4;
                        ELSE RETURN_CODE = 0;

   CALL PLIRETC(RETURN_CODE);


   STOP;
0 /*    END OF MAIN PROGRAM                     */

1/* SORT E15 EXIT:  READ RECORDS FROM INSCR AND PASS TO SORT    */


 E15X: PROC RETURNS(CHAR(80));
   DCL
     INREC CHAR(80),
     OUTREC CHAR(80) INIT(' ');


 ON ENDFILE(INSCR) BEGIN;

   CALL PLIRETC(8);
   GOTO ENDE15;
                  END;

   READ FILE(INSCR) INTO(INREC);

   OUTREC = INREC;
   INREC_SCR = INREC_SCR + 1;
 ENDE15: RETURN(OUTREC);
 END E15X;

1/* SORT E35 EXIT:  GET SORTED VOLUME RECORDS AND SCRATCH DATASETS*/

 E35X: PROC (RECORD);

   DCL  RECORD  CHAR(80);
   DCL  DEVICE  CHAR(8) INIT(' ');

    @LOG = ADDR(RECORD); /* ESTAB ADDRESSABILITY TO SCRLOG MAP OF REC */
            /*                                                        */
            /* INVOKE THE ASSEMBLER SUBROUTINE TO DO THE SCRATCH      */
            /*                                                        */

    DEVICE = SCRLOG.DEVICE;  /* CONVERT DEVICE TO 7 CHAR STRING       */

    CALL R963A30(SCRLOG.DSNAME,SCRLOG.VOLUME,DEVICE,SCR_RC,SCR_MSG);

    IF  SCR_RC = 0 THEN #SCRATCHED = #SCRATCHED + 1;
  ELSE
    IF  SCR_RC = 4 THEN NOT_THERE  = NOT_THERE  + 1;
  ELSE
    IF  SCR_RC = 8 THEN SCR_BYPASSED=SCR_BYPASSED+1;
  ELSE
    DO;
       SCR_BYPASSED = SCR_BYPASSED + 1;
    END;

   IF SCR_RC <= 4  THEN CODE = '    ';
                   ELSE CODE = '--> ';
   CALL POST_MSG;

      CALL PLIRETC(4);

 END E35X;
1/* PRINT MESSAGES              */
 POST_MSG: PROC;

   SAVEDSN = SCRLOG.DSNAME;
   DSNHEAD = CODE ×× SCRLOG.DSNAME ×× ' ' ×× SCRLOG.VOLUME ×× ' ';

   PUT FILE(REPORT) SKIP EDIT
       (DSNHEAD)                      (A)
       (SCR_MSG)                      (X(1),A(72));

   DSNHEAD = '';
   CALL R941X12(SCRLOG.LAST_USED,PACK6);  /* CONVERT DATE */
   $LAST_USED = PACK6;


   PUT FILE(REPORT) SKIP EDIT
       (DSNHEAD)                           (A)
       ('..SYSTEM=',SCRLOG.BILL_TO)        (X(1),A)
       (' LAST USED=',$LAST_USED)          (A,A)
       (' LAST MOD USER=',SCRLOG.MOD_USER) (A,A);

   CALL SHOW_SCR_BITS(SCRLOG.FLAGS,$REASONS);

   DSNHEAD = '';

   PUT FILE(REPORT)  SKIP EDIT
       (DSNHEAD)                           (A)
       ('..SCRATCH REASON(S)=')            (X(1),A)
       ($REASONS)                          (A);

   RETURN;

 END POST_MSG;


1/* PERFORM PAGE HEADER ROUTINE */
 FIN_PAGE: PROC(PRNT,RPT,DSN_HEADER,HEADER,PAGE);

  DCL PRNT       FILE,
      RPT        CHAR(3),
      HEADER     CHAR(*),
      DSN_HEADER CHAR(*),
      PAGE FIXED BIN(15,0);

      PAGE = PAGE + 1;
      PAGENO = PAGE;

      RPTNO = RPT;

      DSN_HEADER = '    ' ×× SAVEDSN ×× '(CONT.)';

      PUT FILE(PRNT)          EDIT
        (HEADING)    (PAGE,LINE(1),A)
        (HEADING2)   (LINE(2),A)
        (HEADER)     (LINE(4),A)
        (BLANKLINE)  (LINE(5),A);


     RETURN;
  END FIN_PAGE;

1/* PRINT SUMMARY PROGRAM STATISTICS   */
 SUMMARY: PROC;


   PUT FILE(REPORT) SKIP(3) EDIT
         (INREC_SCR,     'SCRATCH LOG RECORDS READ IN',
          SCR_BYPASSED,  'DATASETS BYPASSED DUE TO ERRORS',
          NOT_THERE,     'DATASETS ALREADY FOUND DELETED',
          #SCRATCHED,    'DATASETS PROCESSED (DELETED FROM DASD)')
         ((4)(P'ZZ,ZZZ,ZZ9',X(2),A,SKIP));



   RETURN;

 END SUMMARY;

1/* GENERATE BIT OPTIONS PRINTABLE MESSAGES AS CHAR STRING       */
0 SHOW_SCR_BITS: PROC(INHEX,POPTION);

   DCL INBIT8    BIT(8)  INIT((8)'0'B),
       INHEX     CHAR(2),
       POPTION   CHAR(*) VAR ;

   INBIT8 = HEXBIT(INHEX);
   INBIT8 = INBIT8 & MASK;   /* MASK REASONS DOWN TO FATAL ONES ONLY*/

   POPTION = '';

   DO I = 1 TO DIM(OPTIONS.BIT,1);

     IF (INBIT8 & OPTIONS.BIT(I)) ^= '00000000'B THEN
         POPTION = POPTION ×× ',' ×× OPTIONS.TEXT(I);
   END;

   IF SUBSTR(POPTION,1,1) = ',' THEN
       POPTION = SUBSTR(POPTION,2);

   RETURN;

  END SHOW_SCR_BITS;

1/* HEXBIT - PROCEDURE TO 2 CHAR HEX TO 8 BIT          */

 HEXBIT: PROC(INHEX) RETURNS(BIT(8));

 DCL INHEX CHAR(2),
     CH(0:15) CHAR(1) STATIC INIT(
       '0','1','2','3','4','5','6','7',
       '8','9','A','B','C','D','E','F'  ),
     NUM BIT(8),
     FOUND     BIT(1)  INIT('0'B),
     (II,J,K)  FIXED BIN(15,0);

 NUM = '00000000'B;
 DO K = 1 TO 2;
    FOUND = '0'B;
    DO II = 0 TO 15 WHILE(^FOUND);
     IF SUBSTR(INHEX,K,1) = CH(II) THEN FOUND = '1'B;
    END;
   IF ^FOUND THEN II = 0;
             ELSE II = II - 1;
   J = (K-1)*4+1;
   SUBSTR(NUM,J,4) = SUBSTR(UNSPEC(II),13,4);
 END;
 RETURN (NUM);
 END HEXBIT;

1 JULIAN : PROC (DATEX) RETURNS (CHAR(5));
0 DCL DATEX CHAR (6);
  DCL DATEY CHAR (5), NDAYS PICTURE '999'  INIT (0);
0 DCL MTHS (12) FIXED BIN (15) INIT
       (31,28,31,30,31,30,31,31,30,31,30,31);
  IF MOD ( SUBSTR (DATEX,1,2) , 4 ) = 0
  THEN MTHS (2) = 29;
  SUBSTR (DATEY,1,2) = SUBSTR (DATEX,1,2);
- DO I = 1 TO SUBSTR (DATEX,3,2) - 1;
     NDAYS = NDAYS + MTHS (I);
  END;
  NDAYS = NDAYS + SUBSTR (DATEX,5,2);
0 SUBSTR (DATEY,3,3) =      NDAYS;
0 RETURN (DATEY);
  END JULIAN;

 END P963P02;
