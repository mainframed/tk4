*          DATA SET TSO012     AT LEVEL 001 AS OF 04/16/86
*---------------------------------------------------------------------*
* LSPACE COMMAND PROCESSOR (X-A VERSION)     CBT : LAUREEN BEAUCHAINE *
*                                                                     *
*---------------------------------------------------------------------*
* ROUTINES TO BE ADDED: MYVOLS (DEFAULT): THOSE VOLUMES USER IS PCF   *
*                          AUTHORIZED TO ALLOCATE ON.                 *
*                       VOLKYWD: SPECIFIC VOLSER OR STRING OF VOLSER  *
*                       UCBKYWD: SPECIFIC UCB ADDRESS REQUEST         *
*                       DEVKYWD: SPECIFIC DEV NAME REQUEST (SYSDA)    *
*                       UCBFLAG: DISPLAY UCB FLAG DATA FOR VOLUMES    *
*                                REQUESTED (MUST SPECIFY FLAGS KEYWD) *
*                       SVC78:   ISSUE LSPACE SVC TO FIND SPACE ATTR  *
*                       ERRORS:  ISSUE ALL PERTINENT ERROR MSGS       *
*---------------------------------------------------------------------*
*---------------------------------------------------------------------*
* MAINTENANCE:                                                        *
* 05-06-83  -                                            ***CBT-LMB****
*           -CONVERTED UCB LOOKUP TABLE SEARCHES TO SCAN SERVICE RTN  *
*             SEARCHES IN PREPARATION FOR X-A                         *
*           -COMMENTED OUT MANY UNUSED VARIABLES TO KEEP THE PROGRAM  *
*             WITHIN ONE BASE REGISTER (SINCE THE SECOND BASE REGISTER*
*             R11 IS BEING DESTROYED WITHIN 'LOAD' ROUTINE)           *
*---------------------------------------------------------------------*
TSO012   CSECT
         SAVE  (14,12),,TSO012_V1M0_&SYSDATE_&SYSTIME  SAVE REGISTERS
         LR    R12,R15                 LOAD REG 12 WITH ENTRY ADDRESS
         USING TSO012,R12              ESTABLISH ADDRESSABILITY TO
*                                      PROGRAM CSECT
         LA    R11,4095(R12)           LOAD REG 11 WITH ENTRY ADDR 4095
         USING TSO012+4095,R11         ESTABLISH ADDRESSABILITY TO THE
*                                      REST OF THE PROGRAM
         LR    R8,R1                   PRESERVE PTR TO CPPL CNTL BLK
         GETMAIN R,LV=LDYNAMIC         GETMAIN DYNAMIC WORKAREA
         LR    R10,R1                  PRESERVE PTR TO WORKAREA
         ST    R13,4(R10)              STORE ADDRESS PREVIOUS SAVEAREA
         ST    R10,8(,R13)             STORE ADDRESS OF CURRENT
*                                      SAVEAREA IN PREVIOUS SAVEAREA
         LR    R13,R10                 LOAD REG 13 WITH ADDRESS OF
*                                      CURRENT SAVEAREA
         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY TO
*                                      DYNAMIC WORKAREA
*
         MVC   EXTRACT1(EXTRACTL),EXTRACT MOVE EXTRACT LIST FORM   NTL1
         LA    R1,ANSWER               LOAD ADDRESS OF ANSWER      NTL1
         ST    R1,EXTRACT1               AND SAVE IT IN THE MACRO  NTL1
         EXTRACT MF=(E,EXTRACT1)
         L     R1,ANSWER          (R1)=ADDR OF TSO FLAG FROM EXTRACT
         MVC   TSOFLAG,0(R1)           MOVE IN ANSWER TO OUR FLAG  NTL1
         EJECT
*                                                                     *
***********************************************************************
* BUILD PARSE PARAMETER LISTS USING COMMAND PROCESSOR PARAMETER LIST  *
* AND INITIALIZE INPUT/OUTPUT CONTROL BLOCKS IN WORKAREA.             *
***********************************************************************
*                                                                     *
         USING CPPL,R8                 ESTABLISH ADDRESSABILITY TO CPPL
         LA    R4,PPLSECT              LOAD ADDRESS OF PARSE PARM LIST
         USING PPL,R4                  ESTABLISH ADDRESSABILITY TO PPL
         LA    R5,IOPLSECT             LOAD ADDR OF PUTLINE PARM LIST
         USING IOPL,R5                 ESTABLISH ADDRESSABILITY TO IOPL
         L     R1,CPPLUPT              LOAD PTR TO USER PROFILE TABLE
*                                      FROM CPPL
         L     R2,CPPLECT              LOAD PTR TO ENVIRONMENTAL
*                                      CONTROL TABLE FROM CPPL
         SLR   R3,R3                   ZERO REGISTER 3
         ST    R3,ECB                  STORE REG AS ECB FOR PPL
         LA    R3,ECB                  LOAD ADDRESS OF ECB
         STM   R1,R3,PPLSECT           STORE ADDRESS OF UPT,ECT, AND
*                                      ECB IN PPL
         STM   R1,R3,IOPLSECT          STORE ADDRESS OT UPT, ECT, AND
*                                      ECB IN PPL
         LA    R3,IOPB                 LOAD ADDRESS OF PUTLINE
*                                      PARAMETER BLOCK
         ST    R3,IOPLIOPB             STORE IOPB ADDRESS IN IOPL
         MVC   PPLPCL,PCLADDR          MOVE PTR TO PARAMETER CONTROL
*                                      LIST INTO PPL
         LA    R2,PARSBACK             LOAD ADDRESS OF FULLWORD TO
*                                      CONTAIN ADDRESS OF PDE RETURNED
*                                      BY PARSE
         ST    R2,PPLANS               STORE PTR TO RETURN ADDRESS
         MVC   PPLCBUF,CPPLCBUF        MOVE PTR TO CMD BUFFER INTO PPL
         LA    R2,PPLUWA               LOAD ADDRESS OF USER WORKAREA
         ST    R2,PPLUWA               STORE ADDRESS IN PPL
         DROP  R4,R5,R8                DROP ADDRESSABILITY TO CPPL,
*                                      IOPL, AND PPL
         EJECT
*                                                                     *
***********************************************************************
* CALLTSSR TO PARSE (ENTRY POINT IKJPARS); ON RETURN PARSBACK -> PDL  *
* HANDLE ALL ERROR CODES RETURNED BY PARS AND IF NECESSARY CALL       *
* GENERAL FAIL SERVICE ROUTINE.                                       *
***********************************************************************
*                                                                     *
         CALLTSSR EP=IKJPARS,MF=(E,PPLSECT)
         LTR   R15,R15                 SEE IF RETURN CODE ZERO
         BZ    GOODPARS                IF YES GO TO GOOD PARS ROUTINE
         LR    R8,R15                  LOAD RETURN CODE FROM REG 15
         BAL   R14,SETCODE             BRANCH TO RTN CODE CONVERSION
         PUTLINE OUTPUT=(GNRLERR,SINGLE,DATA),MF=(E,IOPLSECT)
         PUTLINE OUTPUT=(RETNCD,SINGLE,DATA),MF=(E,IOPLSECT)
*                                                                     *
         EJECT
***********************************************************************
* SET UP ADDRESSABILITY TO PDL & LOAD REG 6 WITH ADDRESS OF DSNAME PDE*
***********************************************************************
*                                                                     *
GOODPARS DS    0H
         L     R9,PARSBACK             LOAD PTR TO PARS ANSWER
         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL
         LA    R6,VOLUMES              LOAD PTR TO DSNAME LIST
         LA    R5,KWORD                LOAD PTR TO FLAG LIST
         CLI   1(R5),X'00'             Q. ANY KEYWORDS
         DROP  R9                      DROP ADDRESSABILITY TO PDL
         BNE   SETSW                   A. YES - TURN ON SWITCH
*                                      A. NO  - FALL THRU
LDPTR    DS    0H
         L     R5,0(R6)                SET UP PTR TO VOLUME LIST
CHKL     LH    R4,4(R6)                SET UP LENGTH OF VOL LIST
         ST    R4,SAVELGTH
         LTR   R4,R4                   IS LENGTH ZERO ?
         BZ    DEFAULT                 YES - ASSUME MYVOLS
         BCTR  4,0
         EX    R4,MOVEVOL
*                                                                     *
         EJECT
***********************************************************************
*    STEP THROUGH SEQUENCE CHECKING FOR COMMAND PARAMETER ENTRY TYPE  *
***********************************************************************
*                                                                     *
         ST    R6,PARSAVE
***********************************************************************
**CONVERSION FROM UCB LOOKUP TABLES TO SCAN SERVICE ROUTINE   ***CBT***
***********************************************************************
         L     R4,CVTPTR          GET CVT ADDRESS
         USING CVTMAP,R4          ADDRESS TO CVT
         TM    CVTDCB,X'80'       IS THIS AN X-A SYSTEM
         BC    8,NOTXA            NO, CONTINUE PROCESSING
         MVI   XASWITCH,X'FF'     TURN X-A SWITCH ON
NOTXA    XC    UCBWORK,UCBWORK    CLEAR WORK AREA
         LA    R1,UCBWORK         GET ADDRESS OF WORK AREA
         ST    R1,PARMWA          STORE ADDR IN PARMLIST
         LA    R1,DEVCLASS        ADDR OF DEVICE CLASS
         ST    R1,PARMDEVT        STORE ADDR IN PARMLIST
         MVI   DEVCLASS,UCB3DACC  SEARCH FOR DASD UCBS ONLY
         LA    R1,ADDRUCB         ADDR OF RETURNED UCB
         ST    R1,PARMUCB         STORE UCB IN PARMLIST
         OI    PARMUCB,X'80'      END OF PARMLIST
         L     R1,CVTUCBSC        GET SCAN SERVICE ROUTINE
         ST    R1,SCANSAVE        HOLD FOR LATER
*********************************************************************
         CLC   PARMNM(3),=C'ALL'
         BNE   NEXTCHK
         MVI   ALLFLG,X'FF'
NEXTCHK  CLC   PARMNM(6),=C'PUBLIC'
         BE    PUBLWD
         CLC   PARMNM(7),=C'PRIVATE'
         BE    PRIVWD
         CLC   PARMNM(7),=C'STORAGE'
         BE    STORWD
*        BAL   R5,MYVOLS               IS REQUEST FOR MYVOLS ?AXC
         BAL   R5,VOLKYWD              IS REQUEST FOR VOLUME ID ?
         CLC   REQFLG,VOLFLG
         BE    CHKPDE
         BAL   R5,UCBKYWD              IS REQUEST FOR UCB ADDRESS ?
         BAL   R5,DEVKYWD              IS REQUEST FOR DEVICE TYPE ?
*                                                                     *
         EJECT
* UCB LOOKUP TABLE CODE REPLACEMENT FOR X-A                ***CBT***
PUBLWD   EQU   *
*         L     R2,16
*         L     R2,40(,R2)
*         SLR   R3,R3
EOTPUB   LA    R1,PARMLIST        PUT ADDR INTO REG 1
         L     R15,SCANSAVE       GET SCAN SERVICE RTN
         BALR  R14,R15            GO TO SCAN SERVICE INTERFACE
         LTR   R15,R15            WAS A UCB RETURNED?
         BNZ   NOPUBL
         USING UCBOB,R3           ADDR TO UCB DSECT
         L     R3,ADDRUCB         GET RETURNED UCB ADDR
*EOTPUB   CLI   0(R2),X'FF'
*         BE    NOPUBL
*         ICM   R3,B'0011',0(R2)
         LTR   R3,R3              IS THERE A UCB ADDRESS?
         BZ    NEXTPUB
         BAL   R14,RUCBCHEK
         LTR   R15,R15
         BNZ   NEXTPUB
CHKPUB   EQU   *
         CLI   18(R3),X'20'
         BNE   NEXTPUB
         TM    3(R3),X'80'
         BNO   NEXTPUB
         TM    34(R3),X'08'
         MVI   REQFLG,X'11'           TURN ON PUBLIC FLAG
         BO    SVC78
NEXTPUB  EQU   *
*        LA    R2,2(,R2)
         B     EOTPUB
         EJECT
********UCB LOOKUP TABLE REPLACEMENT FOR X-A             ***CBT***
PRIVWD   EQU   *
*         L     R2,16
*         L     R2,40(,R2)
*         SLR   R3,R3
EOTPRIV  LA    R1,PARMLIST        PUT ADDR INTO REG 1
         L     R15,SCANSAVE       GET SCAN SERVICE RTN
         BALR  R14,R15            GO TO SCAN SERVICE INTERFACE
         LTR   R15,R15            WAS A UCB RETURNED?
         BNZ   CHKFLG
         USING UCBOB,R3           ADDR TO UCB DSECT
         L     R3,ADDRUCB         GET RETURNED UCB ADDR
*EOTPRIV  CLI   0(R2),X'FF'
*         BE    CHKFLG
*         ICM   R3,B'0011',0(R2)
         LTR   R3,R3              IS THERE A UCB ADDR RETURNED?
         BZ    NEXTPRIV
         BAL   R14,RUCBCHEK
         LTR   R15,R15
         BNZ   NEXTPRIV
CHKPRIV  EQU   *
         CLI   18(R3),X'20'
         BNE   NEXTPRIV
         TM    3(R3),X'80'
         BNO   NEXTPRIV
         TM    34(R3),X'10'
         MVI   REQFLG,X'22'                      TURN ON PRIVATE FLAG
         BO    SVC78
NEXTPRIV EQU   *
*        LA    R2,2(,R2)
         B     EOTPRIV
         EJECT
********UCB LOOKUP TABLE REPLACEMENT FOR X-A             ***CBT***
STORWD   EQU   *
*         L     R2,16
*         L     R2,40(,R2)
*        SLR   R3,R3
EOTSTOR  LA    R1,PARMLIST        PUT ADDR INTO REG 1
         L     R15,SCANSAVE       GET SCAN SERVICE RTN
         BALR  R14,R15            GO TO SCAN SERVICE INTERFACE
         LTR   R15,R15            WAS A UCB RETURNED?
         BNZ   CHKFLG
         USING UCBOB,R3           ADDR TO UCB DSECT
         L     R3,ADDRUCB         GET RETURNED UCB ADDR
*EOTSTOR  CLI   0(R2),X'FF'
*         BE    CHKFLG
*         ICM   R3,B'0011',0(R2)
         LTR   R3,R3              IS THERE A UCB RETURNED?
         BZ    NEXTSTOR
         BAL   R14,RUCBCHEK
         LTR   R15,R15
         BNZ   NEXTSTOR
CHKSTOR  EQU   *
         CLI   18(R3),X'20'
         BNE   NEXTSTOR
         TM    3(R3),X'80'
         BNO   NEXTSTOR
         TM    34(R3),X'04'
         MVI   REQFLG,X'33'           TRUN ON STORAGE FLAG
         BO    SVC78
NEXTSTOR EQU   *
*        LA    R2,2(,R2)
         B     EOTSTOR
         EJECT
***********************************************************************
*         IF REQUEST IS MYVOLS, THEN PROCESS; ELSE, BYPASS            *
***********************************************************************
*                                                                     *
MYVOLS   CLC   =C'MYVOLS',PARMNM    MYVOLS REQUEST ?
         BR    R5                        NO - DONT NEED THIS CODE
*                                                                     *
         ST    R6,SAVEPDE        SAVE REG 6 - STEPPED ON BY IEAVVMSR
*                                                                     *
         MVI   REQFLG,X'FF'         TURN ON MYVOLS FLAG
*                                                                     *
         L     R3,CVTPTR                 YES - GET ADDRESS OF CVT
         L     R15,CVTLPDSR-CVT(,R3) GET ADDR OF LPDE SEARCH ROUTINE
         LM    R0,R1,PCFTBLS       GET 'PCFTBLS' IN R0 & R1
         BALR  R14,R15             CALL IEAVVMSR - DESTROYS R6, R8 & R9
         B     GOTTBLS             +0 - PCFTBLS FOUND
         B     NOTTSO              +4 - PCFTBLS NOT FOUND - NOTTSO
GOTTBLS  DS    0H                  PCFTBLS LPDE FOUND
         LR    R1,R0               GET ADDRESS OF PCFTBLS LPDE
         L     R1,LPDENTP-LPDE(,R1) GET ADDRESS OF PCFTBLS
         ICM   R1,B'1111',4(R1)    GET ADDRESS OF PCFVOLS
         BZ    NOTTSO              IF ZERO - NOTTSO
         L     R15,PSATNEW-PSA     ELSE - GET ADDRESS OF MY TCB
         L     R15,TCBJSCB-TCB(,R15) GET ADDRESS OF MY JSCB
         L     R15,JSCBPSCB-IEZJSCB(,R15) GET ADDRESS OF MY PSCB
         IC    R15,PSCBATR2+1-PSCB(,R15) GET VOL INDEX BYTE
         SLL   R15,26              CLEAR SMF BITS
         SRL   R15,26              REPOSITION
         LTR   R15,R15             IS INDEX PRESENT
         BZ    NOTTSO              NO - NOTTSO
         BCTR  R15,0               YES - REDUCE FOR RELATIVE TO ZERO
         SLL   R15,1               DOUBLE THE VALUE
         LH    R2,4(R1,R15)        GET OFFSET TO NEXT INDEX VALUE
         LH    R14,2(R1,R15)       AND ALSO THIS INDEX VALUE
         SR    R2,R14              CALCULATE SIZE OF THIS INDEX ENTRY
         BNP   NOTTSO              IF NONE - NOTTSO
         LA    R3,(64*2)+4(R1,R14) ELSE - GET BEGINNING OF THIS ENTRY
         LR    R9,R3               SAVE PCFTBL ENTRY
NEXTVOL  DS    0H
         LA    R15,0
         MVC   VOLSER,0(R9)        GET SERIAL
*
         BAL   R4,SRCHUCB          GO GET CORRECT UCB ADDRESS
         LTR   R15,R15             WAS REUTRN ZERO FROM UCB SEARCH
         BNZ   INCR                NO - POINT TO NEXT ENTRY
         BAL   R4,SVC78            CALCULATE SPACE USAGE FOR THIS VOLID
INCR     LA    R9,8(,R9)           POINT TO NEXT ENTRY
         SH    R2,=H'8'            SUBTRACT OFF THIS ENTRY
         BP    NEXTVOL             IF MORE - LOOP
         L     R6,SAVEPDE             RESTORE PTR TO VOL LIST
         SLR   R15,R15             ELSE - SET RETURN CODE
         B     CHKPDE
*
NOTTSO   DS    0H
         MVC   VOLSER,KNOTTSO      INDICATE 'NOTTSO'
         TPUT  VOLSER,6            TELL TSO USER
         LA    R15,16              SET RETURN CODE
         B     CHKPDE              AND EXIT
         EJECT
***********************************************************************
*        IF REQUEST IS FOR VOL(S), THEN PROCESS; ELSE BYPASS          *
***********************************************************************
********UCB LOOKUP TABLE REPLACEMENT FOR X-A             ***CBT***
VOLKYWD  EQU   *
*         L     R2,16               GET POINTER TO CVT  LOOKUP TABLE
*         L     R2,40(,R2)           GET FIRST UCB ADDRESS
*         SLR   R3,R3               PREPARE REGISTER FOR INSERT
         MVC   REG3SAV,CLEAR       CLEAR REG 3 SAVE AREA
RDUCB1   LA    R1,PARMLIST        PUT ADDR INTO REG 1
         L     R15,SCANSAVE       GET SCAN SERVICE RTN
         BALR  R14,R15            GO TO SCAN SERVICE INTERFACE
         LTR   R15,R15            AT END OF UCBS?
         BCR   6,R5               YES, NO MORE ADDRESSES
         USING UCBOB,R3           ADDR TO UCB DSECT
         L     R3,ADDRUCB         GET RETURNED UCB ADDR
*RDUCB1   DS    0H
*         CLI   0(R2),X'FF'         END OF TABLE ?
*         BER   R5
*         ICM   R3,B'0011',0(R2)
         LTR   R3,R3               WAS THERE A UCB THERE?
         BZ    REQNEXT
*
         BAL   R14,RUCBCHEK        GO FINGER OUT GOOD UCB
         LTR   R15,R15             RETURN CODE ZERO ?
         BNZ   REQNEXT             NO - GET NEXT UCB
*
         L     R4,SAVELGTH         RESTORE REG 4
         TM    ALLFLG,X'FF'        ARE WE LISTING OUT 'ALL' DASD   NTL1
         BO    CHKVOL2             YES, GO CHECK OUT DEVICE        NTL1
         BCTR  4,0
         EX    R4,COMPARE
         BE    CHKVOL              YES - CHECK FOR RIGHT TYPES
*                                  NO - LOOK AGAIN
REQNEXT  DS    0H
*        LA    R2,2(,R2)           GET POINTER TO NEXT UCB
         B     RDUCB1              AND LOOP
*
CHKVOL   CLI   18(R3),X'20'        IS DEVICE DIRECT ACCESS ?
         BNE   NODASD              NO - ISSUE MSG AND RETURN
         TM    3(R3),X'80'         IS DEVICE ONLINE ?
         BNO   MSG08               NO - ISSUE MSG AND RETURN
         MVI   REQFLG,X'04'        TURN ON VOLSER FLAG
         B     SVC78               IS LOW - FIND SPACE ATTRIBUTES
*
CHKVOL2  CLI   18(R3),X'20'        IS DEVICE DIRECT ACCESS ?       NTL1
         BNE   NODASD              NO - ISSUE MSG AND RETURN       NTL1
         TM    3(R3),X'80'         IS DEVICE ONLINE ?              NTL1
         BNO   REQNEXT             NO - GO GET ONE THAT IS ONLINE  NTL1
         TM    6(R3),X'40'         IS DEVICE ONLINE & NOT READY ?  NTL1
         BO    REQNEXT             NO - ISSUE MSG AND RETURN       NTL1
         MVI   REQFLG,X'04'        TURN ON VOLSER FLAG             NTL1
         B     SVC78               IS LOW - FIND SPACE ATTRIBUTES
*
         EJECT
***********************************************************************
*        IF REQUEST IS FOR UCB(S), THEN PROCESS; ELSE BYPASS          *
***********************************************************************
********UCB LOOKUP TABLE REPLACEMENT FOR X-A             ***CBT***
UCBKYWD  EQU   *
*         L     R2,16               GET POINTER TO CVT  LOOKUP TABLE
*         L     R2,40(,R2)           GET FIRST UCB ADDRESS
*         SLR   R3,R3               PREPARE REGISTER FOR INSERT
RDUCB2   LA    R1,PARMLIST        PUT ADDR INTO REG 1
         L     R15,SCANSAVE       GET SCAN SERVICE RTN
         BALR  R14,R15            GO TO SCAN SERVICE INTERFACE
         LTR   R15,R15            END OF UCB TABLE?
         BCR   7,R5               YES, END PROCESSING
         USING UCBOB,R3           ADDR TO UCB DSECT
         L     R3,ADDRUCB         GET RETURNED UCB ADDR
*RDUCB2   CLI   0(R2),X'FF'       END OF TABLE?
*         BER   R5
*         ICM   R3,B'0011',0(R2)
         LTR   R3,R3              WAS A ZERO UCB RETURNED?
         BZ    REQNEXT1
*
         MVC   VOLSER(6),28(R3)    KEEP VOLSER FOR MESSAGE TEXT
         L     R4,SAVELGTH
         BCTR  4,0
         EX    R4,COMPUCB
         BE    CHKUCB              YES - CHECK IF RIGHT TYPE ?
*
REQNEXT1 DS    0H                  NO - LOOK AGAIN
*        LA    R2,2(,R2)           GET POINTER TO NEXT UCB
         B     RDUCB2              AND LOOP
*
CHKUCB   CLI   18(R3),X'20'        IS DEVICE DIRECT ACCESS ?
         BNE   NODASD              NO - ISSUE MSG AND RETURN
         TM    3(R3),X'80'         IS DEVICE ONLINE ?
         BNO   MSG0C               NO - ISSUE MSG AND RETURN
         MVI   REQFLG,X'08'        TURN ON UCB REQUEST FLAG
*
         B     SVC78               RIGHT TYPE - GO TO LSPACE SVC
*
         EJECT
***********************************************************************
*        IF REQUEST IS DEVNAME(S), THEN PROCESS; ELSE BYPASS          *
***********************************************************************
******** CHECK TO DISALLOW UNDER X-A                     ***CBT***
DEVKYWD  DS    0H
*
         TM    XASWITCH,X'FF'           IS THIS AN XA SYSTEM?
         BC    8,DEVKYWD2               NO, SO CONTINUE PROCESSING
         TPUT  NONXA,L'NONXA            SAY NOT SUPPORTED UNDER XA
         BC    15,CHKPDE                CONTINUE PROCESSING
DEVKYWD2 L     R1,16
         L     R8,40(R1)
         LR    R1,R8
UCBSCAN  ICM   R0,3,0(R1)
         CLI   0(R1),X'FF'
         LA    R1,2(,R1)
         BNE   UCBSCAN
         SR    R1,R8                    NUMBER OF UCB SLOTS+1
         SRL   R1,1
         BCTR  R1,0
         LA    R0,31
         AR    R1,R0                    ROUND COUNT TO WORD BOUNDARY
         OR    R1,R0
         XR    R1,R0
         SRL   R1,3                     TOTAL WORD COUNT
         LR    R9,R1                    SAVE COUNT
*
LOAD     DS    0H
         LOAD  EP=DEVNAMET
         LR    R10,R0
         LOAD  EP=DEVMASKT
         LR    R11,R0
*
         L     R0,0(,R10)         SAVE # OF NAME ENTRIES IN REG 0
         LA    R15,4(,R10)        FIRST ENTRY FROM DEVNAMET
TABLSCAN DS    0H
         CLC   PARMNM(8),0(R15)   COMPARE FOR CORRECT NAME
         BE    HAVENAME
         LA    R15,12(,R15)       INCREMENT NAMET POINTER
         BCT   R0,TABLSCAN        READ AGAIN
         TPUT  NONSUPP,L'NONSUPP  ISSUE UNSUPPORTED DEV TYPE MSG
         B     CHKPDE             CHECK FOR MORE REQUESTS
*
HAVENAME LH    R0,0(,R11)         GET # OF DEVMASKT ENTRIES
         LA    R1,4(,R11)         GET MASK ENTRY
*
FINDMASK CLC   8(4,R15),4(R1)         ARE DEVICE TYPES EQUAL
         BE    HAVEMASK               YES - HAVE CORRECT DEVICE MASK
         LA    R1,8(R1,R9)            NO - INCR MASK POINTER
         BCT   R0,FINDMASK            GET NEXT MASK ENTRY
         TPUT  NONSUPP,L'NONSUPP
         B     CHKPDE
*
HAVEMASK DS    0H
         LA    R2,7(R1,R9)              END OF MASK ENTRY
         L     R3,0(,R1)                NUMBER OF BITS THIS ENTRY
         LA    R4,8(,R1)
         SR    R7,R7
NEXTBYTE LA    R5,8
         LA    R6,X'80'
NEXTBIT  TM    0(R4),0
         EX    R6,NEXTBIT
         BZ    NOTTHIS
         LA    R14,0(R7,R8)             DOUBLE INDEX
*                                       TO LOOKUP ENTRY
         SR    R15,R15
         ICM   R15,3,0(R14)
*        LH    R15,0(,R15)
         TM    18(R15),X'20'            DIRECT ACCESS?
         BNO   DEVMSG                   NO
         TM    3(R15),X'80'             ONLINE?
         BZ    NOTONL
         CLI   28(R15),X'00'            YES, VOLID KNOWN?
         BE    NOTDA                    NO
         B     NOTDA
NOTONL   EQU   *
         MVC   OFFL(3),13(R15)
         TPUT  OFFL,L'OFFL
         B     CNTR
*
NOTDA    DS    0H
         ST    R3,CNTSAVE              SAVE COUNTER OF BIT ENTRIES
         ST    R5,BITSAVE              SAVE COUNTER OF # OF BITS
         MVI   REQFLG,X'88'
         LR    R3,R15                  LOAD PTR TO UCB FOR SVC 78
         BAL   R5,SVC78
         L     R3,CNTSAVE
         L     R5,BITSAVE
CNTR     BCT   R3,NOTTHIS
         B     CHKPDE
NOTTHIS  DS    0H
         LA    R7,2(,R7)
         SPACE 2
         SRL   R6,1
         BCT   R5,NEXTBIT
         LA    R4,1(,R4)
         CR    R4,R2                    MASK BIT COUNT ERROR?
         BH    TOOMANY                  YES
         B     NEXTBYTE
TOOMANY  TPUT  MCNT,L'MCNT
         B     CHKPDE
         EJECT
***********************************************************************
*        CALL LSPACE SVC (SVC 78) AND ISSUE SPACE MESSAGE             *
***********************************************************************
SVC78    DS    0H
*
DISPCHK  TM    SW1,HEADING              HAVE WE WRITTEN THE HEADER?
         BO    DISPLAY                  YES, SKIP TPUT OF HEADER
         SPACE
WRTFMT   LA    R1,FMTMSG1               WRITE HEADERS....
         BAL   LINKREG,PUTMSG           ISSUE MESSAGE
         LA    R1,FMTMSG2
         BAL   LINKREG,PUTMSG           ISSUE MESSAGE
         OI    SW1,HEADING              SAY WE WROTE THE HEADERS
         SPACE
DISPLAY  MVC   MSG,WTOMSG               CLEAR OUT MESSAGE
         MVC   MSGUNIT,UCBNAME          COPY UNIT ADDRESS
         MVC   MSGVOL,UCBVOLI           COPY VOLUME SERIAL NUMBER
*
         TM    UCBSTAB,UCBBPRV          IS VOL PRIVATE?
         BNO   DISP11
         MVC   MSGUSE,VOLPRIV
         B     DSTAT2
DISP11   TM    UCBSTAB,UCBBPUB          IS VOL PUBLIC?
         BNO   DISP12
         MVC   MSGUSE,VOLPUB
         B     DSTAT2
DISP12   TM    UCBSTAB,UCBBSTR          IS VOL STORAGE?
         BNO   DSTAT2
         MVC   MSGUSE,VOLSTG
         SPACE
DSTAT2   TM    UCBSTAT,UCBRESV          IS VOLUME RESERVED ?
         BNO   DISP21
         MVC   MSGSTAT,VOLRSVD
         B     DUSECNT
DISP21   TM    UCBSTAT,UCBPRES          IS VOL PERM RESIDENT?
         BNO   DISP22
         MVC   MSGSTAT,VOLRESD
         B     DUSECNT
DISP22   MVC   MSGSTAT,VOLREMOV         SET AS REMOVABLE
*
DUSECNT  XR    R10,R10                  CLEAR A REG
         IC    R10,UCBUSER              GET USE COUNT
         CVD   R10,DBLW                 CONVERT TO PRINT
         UNPK  MSGCNT,DBLW+6(2)         PLACE IT ON THE LINE
         OI    MSGCNT+2,CHARZERO        FIX SIGN BITS
*
         IC    R10,UCBUNTYP             GET THE UNIT TYPE
         SLA   R10,3                    MULTIPLE BY 8 FOR
         LA    R10,UNITTYPE(R10)           ADDRESS IN TABLE
         MVC   MSGUTYPE,0(R10)          MOVE UNIT TYPE TO PRINT LINE
         SPACE
*
         ST    R3,UCBSTRT2             SAVE UCB ADDR FOR TABLE SEARCH
         LR    R0,R3                   SAVE ADDRESS OF UCB
         LA    R1,VOLSPC               LOAD REG 1 WITH ADDR OF MSG AREA
         SVC   78                      ISSUE LSPACE SVC
         LTR   R15,R15                 CHECK FOR RETURN CODE ZERO
         BZ    MOVESTUF                IF ZERO, GO TO PUTMSG
         LR    R8,R15                  LOAD RETURN CODE INTO REG 15
         BAL   R14,ERRORS              GO TO CONVERT ROUTINE
         PUTLINE OUTPUT=(SVC78ER,SINGLE,DATA),MF=(E,IOPLSECT)
         PUTLINE OUTPUT=(RETNCD,SINGLE,DATA),MF=(E,IOPLSECT)
         B     CHKPDE                  EXIT - ALL DONE
*                                                                     *
MOVESTUF DS    0H
         MVC   MSGEXTS,SVC78EXT        MOVE # EXTENTS AVAIL.       NTL1
         MVC   MSGFCYL,SVC78FCY        MOVE # FREE CYLS            NTL1
         MVC   MSGFTRK,SVC78FTR        MOVE # FREE TRACKS          NTL1
         MVC   MSGCCYL,SVC78CCY        MOVE # CONTIG CYL MAX       NTL1
         MVC   MSGCTRK,SVC78CTR        MOVE # CONTIG TRK MAX       NTL1
         B     DOPUT                   BRANCH AROUND 'GETDSCBS'    NTL1
*
*
         EJECT
*        NOW FIND THE NUMBER OF DSCBS LEFT (FMT0 COUNT)
         SPACE 1
GETDSCBS DS    0H
         MVC   CAML(4),=AL1(192,128,0,0) MOVE IN OPTIONS
         MVC   CAMV(6),UCBVOLI          VOLUME NAME
         LA    R0,CAMA                  CCHHR
         LA    R1,CAMV                  VOLUME LIST
         LA    R2,CAMW                  WORKAREA
         STM   R0,R2,CAML+4             SET UP CAMLIST
         XC    CAMW(60),CAMW            CLEAR DEB
         MVI   CAMW+16,X'01'            1 EXTENT
         MVI   CAMW+28,X'04'            16 BYTES PER
         ST    R8,CAMW+32               UCB ADDR TO EXTENT
         MVC   CAMW+42(6),=X'FFFFFFFF7FFF' WHOLE PACK
         STM   R0,R15,CAMW+60           SAVE REGS
         LA    R4,CAMW+60               POINT TO REGS
         LA    R1,CAMW                  DEB LOCATION
         MVC   CAMW(4),UCBVTOC          ALIGN
         L     R0,CAMW                  TTR0
         LR    R2,R1                    MBBCCHHR
         L     R15,CVTPTR               POINT TO CVT
         L     R15,CVTPCNVT-CVT(R15)    TTR CONVERT
         BSM   R14,R15                  GO CONVERT IT
*        BALR  R14,R15                  GO CONVERT IT
         LM    R0,R14,0(R4)             RESTORE REGS
CNVTTTR  LTR   R15,R15                  ERROR?
         BNZ   DOPUT                    IF SO DON'T SHOW HIM NOTHING
         MVC   CAMA(5),CAMW+3           CCHHR TO THING
OBTAINIT OBTAIN CAML                    GET FORMAT 4 DSCB
CHKOBT   LTR   R15,R15                  DID IT WORK?
         BNZ   DOPUT                    NO, THEN GIVE UP
         LH    R1,CAMW+50               GET NUMBER OF FMT0S
         CVD   R1,DBLW                  CONVERT IT
         UNPK  MSGDSCBS,DBLW+5(3)       AND MOVE TO THE LINE
         OI    MSGDSCBS+4,CHARZERO      FIX SIGN
         EJECT
DOPUT    LA    R10,SCANSTRT             LOAD START OF LD ZERO SCAN
         LA    R1,SCANLEN               LOAD NUMB OF CHARS TO SCAN
         NI    SW1,NOSKIP               TURN OFF SKIP SWITCH
         SPACE
ZERLOOP  CLI   D0(R10),CHARZERO         IS IT A ZERO?
         BL    RSTSW1                   CHAR < C'0' -> RESET SKIP
         BH    SETSW1                   CHAR > C'0' -> SET SKIP SW
         TM    SW1,SKIP                 IS SKIP SWITCH SET
         BO    BUMPZLOP                 YES -> THEN SKIP THE POKE
         CLI   D1(R10),CHARZERO         HOW ABOUT THE NEXT CHAR?
         BL    BUMPZLOP                  DONT REMOVE LAST ZERO....
         MVI   D0(R10),BLANK            POKE A BLANK INSTEAD...
         B     BUMPZLOP                 GO INCREMENT
RSTSW1   NI    SW1,NOSKIP               RESET THE SWITCH
         B     BUMPZLOP                 GO INCREMENT
SETSW1   OI    SW1,SKIP                 SET THE SWITCH
BUMPZLOP LA    R10,D1(R10)              BUMP POINTER
         BCT   R1,ZERLOOP               LOOP UNTIL MSG SCANNED...
         SPACE 2
         LA    R1,MSG                   MESSAGE ADDR.
         BAL   LINKREG,PUTMSG           ISSUE MESSAGE
*
***********************************************************************
*                                                                     *
         CLI   FLGSW,X'FF'
         BE    UCBFLAG
CHKFLGS  DS    0H
         CLC   REQFLG,PUBFLG
         BE    NEXTPUB
         CLC   REQFLG,PRIVFLG
         BE    NEXTPRIV
         CLC   REQFLG,STORFLG
         BE    NEXTSTOR
         CLC   REQFLG,MYFLG
         BER   R4
         CLC   REQFLG,VOLFLG           WAS REQUEST FOR VOLSER
         BE    REQNEXT                 YES - ALL DONE
         CLC   REQFLG,UCBFLG           WAS THIS A UCB REQUEST
         BE    CHKPDE                  YES - ALL DONE
         CLC   REQFLG,DEVFLG           WAS THIS A DEV REQUEST
         BER   R5                      YES - PROCESS NEXT VOLSER
*
         ABEND 123,DUMP                NONE OF THE ABOVE - ABEND
*                                                                     *
DEFAULT  MVC   PARMNM,=C'MYVOLS'
         B     MYVOLS
*                                                                     *
         EJECT
*.....................................................................*
*        LOCAL SUBROUTINE FOR IO TO OPER/USER                         *
*.....................................................................*
         SPACE
*
* ENTER WITH WTO,WTOR LIST FORM POINTED TO BY R1
*
*    BAL  LINKREG,PUTMSG    OR
*    BAL  LINKREG,PUTGET
*
*  USES R14 FOR WORK
*
LINKREG  EQU   10
*
PUTMSG   DS    0H
         TM    TSOFLAG,X'80'       IS IT TSO?
         BO    TPUTIT              YES-> GO DO TPUT
         SVC   35                  NO-> USE WTO
         BR    LINKREG
TPUTIT   DS    0H
         LH    R0,0(,R1)           GET LENGTH OF WTO MESSAGE
         S     R0,=F'4'            SUBTRACT OFF HEADER
         LA    R1,4(,R1)           BUMP MSG ADDRESS PAST HDR
         TPUT  (1),(0),R           DO THE TPUT
         BR    LINKREG
         SPACE 2
PUTGET   DS    0H
         TM    TSOFLAG,X'80'       IS IT TSO?
         BO    TSOIT               YES-> GO USE TGET
         LR    R14,R1              NO-> USE WTOR .. SAVE MSG ADDRESS
         SVC   35                  DO THE WTOR...
         L     R1,4(,R14)          GET ADDR OF ECB
         XC    0(4,R1),0(R1)       CLEAN OUT THE ECB....
         LA    R0,1
         SVC   1                   WAIT FOR WTOR TO COMPLETE
         B     PUTRET              RETURN
TSOIT    DS    0H
         LR    R14,R1              SAVE
         LH    R0,8(,R1)           PUT LENGTH
         S     R0,=F'4'
         LA    R1,12(,R1)          PAST HDR
         TPUT  (1),(0),R
         SR    R0,R0
         IC    R0,0(,R14)          GET REPLY LENGTH
         L     R1,0(,R14)          GET REPLY ADRS
         LA    R1,0(,R1)
         ICM   R1,B'1000',=X'80'   INDICATE TGET...
         TGET  (1),(0),R
PUTRET   DS    0H
         L     R1,0(,R14)          GET REPLY ADRS
         XR    R0,R0
         IC    R0,0(,R14)          GET REPLY LENGTH
UPPER    DS    0H
         OI    0(R1),C' '          UPPER CASE
         LA    R1,1(,R1)           NXT
         BCT   R0,UPPER
         BR    LINKREG
         SPACE 2
         EJECT
*                                                                     *
********UCB LOOKUP TABLE REPLACEMENT FOR X-A             ***CBT***
SRCHUCB  LA    R1,PARMLIST        FOR SCAN SERVICE RTN
         L     R15,SCANSAVE       SCAN SERVICE RTN
         BALR  R14,R15            GO TO SCAN INTERFACE
         LTR   R15,R15            AT END OF UCBS?
         BNZ   NOFIND             NO MORE UCBS
         L     R3,ADDRUCB         GET RETURNED UCB ADDR
         USING UCBOB,R3           ADDR TO UCB DSECT
*SRCHUCB  L     R8,16               SET PTR TO CVT
*         L     R8,40(,R8)          GET FIRST UCB ADDRESS
*         SLR   R3,R3               PREPARE REG 3 FOR INSERT
*UCBTBL   CLI   0(R8),X'FF'
*         BE    NOFIND
*         ICM   R3,B'0011',0(R8)
UCBTBL   LTR   R3,R3              IS THERE A UCB?
         BZ    NEXTUCB
*        CLI   18(R3),X'20'
*        BNE   NEXTUCB
         TM    3(R3),X'80'
         BNO   NEXTUCB
         CLC   VOLSER(6),28(R3)
         BER   R4
NEXTUCB  DS    0H
*        LA    R8,2(R8)
         B     UCBTBL
*
NOFIND   DS    0H
         LA    R15,16                  SET RETURN CODE
         BR    R4                        AND RETURN TO CALLER
*
SETCODE  DS    0H
         CVD   R8,DEC                  CONVERT RETURN CODE
         UNPK  CONV(8),DEC(8)                AND PREPARE
         MVZ   CONV+1(7),CONV                  FOR MESSAGE
         MVC   RETNCD(2),HALF12                   INSERT
         MVC   RETNCD+2(2),HALF0
         BR    R14                     RETURN TO CALLER
*
ERRORS   DS    0H
         C     R8,RC4
         BE    MSG04
         C     R8,RC8
         BE    MSG08
         C     R8,RC12
         BE    MSG0C
         CVD   R8,DEC                  CONVERT RETURN CODE
         UNPK  CONV(8),DEC(8)                AND PREPARE
         MVZ   CONV+1(7),CONV                  FOR MESSAGE
         MVC   RETNCD(2),HALF12                   INSERT
         MVC   RETNCD+2(2),HALF0
         BR    R14                     RETURN TO CALLER
*
MSG04    MVC   RC04(3),13(R3)
         MVC   RC04+4(6),28(R3)
         TPUT  RC04,L'RC04
         B     CHKPDE
MSG08    TPUT  RC08,L'RC08
         B     CHKPDE
MSG0C    TPUT  RC0C,L'RC0C
         B     CHKPDE
NODASD   TPUT  DMSG,L'DMSG
         B     CHKPDE
*
NOSUP    TPUT  UNKNWN,L'UNKNWN
*
         B     CHKPDE
         EJECT
***********************************************************************
* CHECK FOR ADDITIONAL PARAMETERS, IF MORE; PROCESS, ELSE CLEANUP YOUR*
*           MESS AND EXIT (ALL DONE)                                  *
***********************************************************************
*
NOPUBL   TPUT  PUBLC,L'PUBLC
*
CHKFLG   CLI   REQFLG,X'00'            REQUEST NOT FOUND
         BE    NOSUP
*
CHKPDE   L     R6,PARSAVE
         L     R5,8(,R6)              LOAD CHAIN FOR VOL LIST
         C     R5,ENDCHAIN             IS IT END OF VOL LIST?
         BE    FINISH                  IF YES CLEANUP & EXIT
         L     R6,8(,R6)               LOAD PTR TO NEXT VOLUME
         L     R5,0(R6)
         MVC   PARMNM,ZEROS
         MVC   REQFLG,ESOCODE          CLEAR REQFLG AREA
         MVC   LASTUCB(2),CLEAR
         MVC   WORKUCB,CLEAR
         MVC   WORKUCB+4,CLEAR
         B     CHKL                          AND PROCESS
***********************************************************************
*        EXECUTED INSTRUCTIONS                                        *
***********************************************************************
COMPARE  CLC   PARMNM(0),28(R3)    IS THIS THE VOL REQUESTED ?
*                                                                     *
MOVEVOL  MVC   PARMNM(0),0(R5)     GET PARAMETER FROM CMND
*                                                                     *
COMPUCB  CLC   PARMNM(0),13(R3)    COMPARE PARM TO UCB
*                                                                     *
TEST4FLG TM    0(R15),*-*          TEST FOR FLAG
*                                                                     *
         EJECT
***********************************************************************
* CLEANUP AREAS GETMAINED BY PARSE, SET RETURN CODE, RESTORE REGISTERS*
* AND EXIT
***********************************************************************
*                                                                     *
FINISH   DS    0H
         LR    R2,R15
         IKJRLSA PARSBACK
*                                                                     *
         LA    R0,LDYNAMIC
         LR    R1,R13
         L     R13,4(R13)
         FREEMAIN R,LV=(0),A=(1)
         LR    R15,R2
         RETURN (14,12),RC=(15)
*
         TITLE 'REAL UCB CHECK ROUTINE'
RUCBCHEK DS    0H
         ST    R14,RUCBSAVE        SAVE RETURN ADDRESS
         MVC   RUCBNAME,13(R3)     COPY EBCDIC UCB NAME
         LA    R1,RUCBNAME         GET START OF UCB NAME
         LA    R15,3               GET COUNT OF BYTES TO PROCESS
RUCBLOOP DS    0H                  CONVERT EBCDIC TO HEX - STEP 1
         TM    0(R1),X'F0'         IS THIS BYTE NUMERIC
         BO    RUCBNEXT            YES - GO TO NEXT BYTE
         IC    R14,0(,R1)          NO - GET BYTE IN R14
         LA    R14,9(,R14)         ADD NINE (X'C1' -> X'CA')
         STC   R14,0(,R1)          AND UPDATE UCB NAME
RUCBNEXT DS    0H                  CHECK NEXT BYTE
         LA    R1,1(,R1)           INCREMENT TO NEXT BYTE
         BCT   R15,RUCBLOOP        AND LOOP UNTIL END
         PACK  WORKUCB(3),RUCBNAME(4) PACK - STEP 2
         CLC   WORKUCB(2),LASTUCB IS THIS THE REAL UCB
         BH    RUCBGOOD            YES - SAVE UCB NUMBER AND EXIT
         LA    R15,4               NO - SET RETURN CODE
RUCBEXIT DS    0H                  EXIT
         L     R14,RUCBSAVE        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE 3
RUCBGOOD DS    0H                  THIS UCB IS GREATER THAN LAST UCB
         MVC   LASTUCB,WORKUCB     SAVE LAST UCB
         SLR   R15,R15             SET RETURN CODE
         B     RUCBEXIT            AND EXIT
         SPACE 3
DEVMSG   TPUT  DMSG,L'DMSG
         B     CHKPDE
         EJECT
*
UCBFLAG  DS    0H
         STM   R2,R3,CHAINSAV       SAVE REGISTERS SO NEXT CODE
         STM   R14,R15,CHAINSAV+8   DOESNT DESTROY THEM
         STM   R4,R5,BUFRSAV
         LA    R4,FLGMSG            POINT TO MSG AREA
         LA    R5,ENDMSG            POINT TO END OF AREA
         TPUT  HDR,L'HDR
*
         L     R2,UCBSTRT2
NXTUCB   LA    R3,TABLE
FLAGLOOP CLI   0(R3),X'FF'          END OF TABLE
         BE    DONEWFLG             YES - ALL DONE
         LR    R15,R2               GET COPY OF UCB ADDRESS
         SLR   R14,R14              ZERO R14 FOR INSERT
         IC    R14,0(R3)            GET OFFSET OF FLAG IN UCB
         AR    R15,R14              GET ADDRESS OF FLAG
         IC    R14,1(R3)            GET FLAG
         EX    R14,TEST4FLG         TEST FOR CORRECT FLAG
         BZ    NEXTFLAG             NOT ON - LOOP
         BAL   R14,MSGBUF
*                                                                     *
NEXTFLAG DS    0H
         LA    R3,10(R3)             BUMP FLAG POINTER
         B     FLAGLOOP
*                                                                     *
DONEWFLG DS    0H
         TPUT  FLGMSG,L'FLGMSG
         MVI   FLGMSG,X'40'
         MVC   FLGMSG+1(64),FLGMSG
         LM    R4,R5,BUFRSAV
         LM    R2,R3,CHAINSAV
         LM    R14,R15,CHAINSAV+8
         B     CHKFLGS
*                                                                     *
SETSW    MVI   FLGSW,X'FF'           INDICATE KEYWORD IS PRESENT
         B     LDPTR
*                                                                     *
MSGBUF   EQU   *
         MVC   5(8,R4),2(R3)         MOVE IN STATUS DESCRIPTOR
         LA    R4,10(R4)             BUMP AREA POINTER
         CR    R4,R5                 COMPARE FOR MORE ROOM
         BLR   R14                   LOW - RETURN
*        TPUT  FLGMSG,L'FLGMSG       NOT LOW - WRITE IT OUT
*        LA    R4,FLGMSG
         B     NEXTFLAG
*                                                                     *
***********************************************************************
* ERROR AND INFORMATIONAL MESSAGES                                    *
***********************************************************************
*                                                                     *
GNRLERR  DC    AL2(GNRLERRL),AL2(0)
         DC    C'AN ERROR WAS ENCOUNTERED IN THE GENERAL FAIL SERVICE RX
               OUTINE. THE RETURN CODE FROM GNRFAIL IS: '
GNRLERRL EQU   *-GNRLERR
*
SVC78ER  DC    AL2(SVC78ERL),AL2(0)
         DC    C'AN ERROR WAS ENCOUNTERED IN THE LSPACE SVC ROUTINE. THX
               E RETURN CODE IS: '
SVC78ERL EQU   *-SVC78ER
***********************************************************************
*        UCB FLAGS TABLE                                              *
***********************************************************************
TABLE    DS    0H
         DC    X'0104',CL8'NONALLOC'     JES2,ETC
         DC    X'0340',CL8'CHANGING'     CHANGING STATUS
         DC    X'0320',CL8'RESERVED'     MOUNT STATUS - RESERVED
         DC    X'0310',CL8'UNLOAD  '     UNLOAD PENDING
         DC    X'0308',CL8'ALLOCATD'     ALLOCATED
         DC    X'0304',CL8'RESIDENT'     PERM. RESIDENT
         DC    X'0302',CL8'SYSRES  '     SYSRES, MSTRCONS, CONS
         DC    X'0301',CL8'SECONS  '     LABELS VERIFD/SECONS
         DC    X'0680',CL8'BUSY    '     DEVICE BUSY
         DC    X'0640',CL8'NOT-RDY '     NOT READY
         DC    X'0620',CL8'POSTED  '     POST FLAG
         DC    X'0610',CL8'SENSE OP'     PENDING SENSE OP
         DC    X'0608',CL8'CU BUSY '     CONTROL UNIT BUSY
         DC    X'0604',CL8'S/A PROC'     STANDALONE PROCESS
         DC    X'0602',CL8'ACTIVE  '     CHANNEL PGN ACTIVE
         DC    X'0601',CL8'QUIESCED'     QUIESCED
         DC    X'0740',CL8'SNS ACTV'     SENSE ACTIVE
         DC    X'0720',CL8'SNS POST'     SENSE POST
         DC    X'0710',CL8'DEV-RESV'     DEVICE RESERVED
         DC    X'0708',CL8'CRH CONN'     CRH CONNECTION
         DC    X'0C10',CL8'REWIND  '     REWIND IN PROGRESS
         DC    X'1480',CL8'ATT PEND'     ATTENTION PENDING
         DC    X'1420',CL8'U DEV ND'     UNSOLICITED DEVICE END
         DC    X'1410',CL8'INTRCEPT'     INTERCEPT CONDITION
         DC    X'1408',CL8'INT MSG '     INTERVENTION MESSAGE ISSUED
         DC    X'1404',CL8'INT REQD'     INTERVENTION MSG REQUIRED
         DC    X'1402',CL8'- MTP - '     MOUNT PENDING/CE/DE
         DC    X'1401',CL8'DDR PEND'     DDR SWITCH PENDING
         DC    X'2210',CL8'PRIVATE '     USE STATUS - PRIVATE
         DC    X'2208',CL8'PUBLIC  '     USE STATUS - PUBLIC
         DC    X'2204',CL8'STORAGE '     USE STATUS - STORAGE
         DC    X'FFFF',CL8'        '     END OF TABLE
*
***********************************************************************
* GENERAL DECLARE AND EQUATE STATEMENTS                               *
***********************************************************************
*                                                                     *
PCLADDR  DC    A(PARMTAB)
         EJECT
*
********************** LIST MACRO INSTRUCTIONS ************************
*
IOPB     PUTLINE MF=L
         EJECT
*
***********************************************************************
*
WTODSP1  WTO   'WTODSP1 - VAR=XXXXXXXX,    VALUE=XXXX',                X
               MF=L
WTODSP1L EQU   *-WTODSP1
*
EXTRACT  EXTRACT *-*,'S',FIELDS=(TSO),MF=L
EXTRACTL EQU   *-EXTRACT
WTOMSG   WTO   '                                                       X
                                ',ROUTCDE=(11),MF=L
WTOMSGL  EQU   *-WTOMSG
PARSMSG  WTO   'DSPACE - PARSE FAILED',ROUTCDE=(11),MF=L
FMTMSG1  WTO   '            ..TOTAL AVAILABLE... .CONTIG.. USE UNIT    X
                 UNIT',ROUTCDE=(11),MF=L
FMTMSG2  WTO   'VOLUME UNIT DSCBS EXTS CYLS TRKS CYLS TRKS CNT STATUS  X
                 TYPE',ROUTCDE=(11),MF=L
         EJECT
ALLVOL   DC    CL6'ALL'                                            NTL1
VOLPRIV  DC    CL4'PVT/'                                           NTL1
VOLPUB   DC    CL4'PUB/'                                           NTL1
VOLSTG   DC    CL4'STG/'                                           NTL1
VOLRSVD  DC    CL5'RSVED'                                          NTL1
VOLRESD  DC    CL5'RSDNT'                                          NTL1
VOLREMOV DC    CL5'REMOV'                                          NTL1
UNITTYPE DC    CL8'    '      00       UNIT TYPE TABLE             NTL1
         DC    CL8'2311'      01                                   NTL1
         DC    CL8'2301'      02                                   NTL1
         DC    CL8'2303'      03                                   NTL1
         DC    CL8'2302'      04                                   NTL1
         DC    CL8'2321'      05                                   NTL1
         DC    CL8'2305'      06       NOT SUPPORTED UNDER MVS/XA  NTL1
         DC    CL8'2305'      07                                   NTL1
         DC    CL8'2314'      08                                   NTL1
         DC    CL8'3330'      09                                   NTL1
         DC    CL8'    '      10 A                                 NTL1
         DC    CL8'3350'      11 B                                 NTL1
         DC    CL8'3375'      12 C                                 NTL1
         DC    CL8'3330-11'   13 D                                 NTL1
         DC    CL8'3380'      14 E                                 NTL1
         DC    CL8'    '      15 F                                 NTL1
         EJECT
*
RUCBSAVE DC    F'0'                REAL UCB CHECK ROUTINE SAVE AREA
WORKUCB  DC    2D'0'               WORK AREA
CHAINSAV DC    2D'0'               SAVE AREA FOR FOUR REGS
BUFRSAV  DS    D                   SAVE AREA FOR TWO REGS
RUCBNAME DC    CL3' '              EBCDIC UCB NAME
LASTUCB  DC    XL2'00'             LAST UCB
PARMNM   DC    CL8' '
ZEROS    DC    CL8'        '
CLEAR    DC    X'00000000'
*LC       DC    CL1' '
UCB      DC    CL3' '
*DEVCODE  DS    CL4
UCBADDR  DS    F
UCBSTRT2 DS    F
*DEVSERL  DS    CL6
GFPARMP  DS    F
         DS    0D
DEC      DS    2F
RETNCD   DS    F
CONV     DS    2F
RC4      DC    F'4'
RC8      DC    F'8'
RC12     DC    X'0000000C'
*VOLSPC   DC    CL30' '
*VOLSPC1  DC    CL38' '
SPCMSG   DC    C'            CYL TRK  XTNT CYL-C TRK-C '
OFFL     DC    C'     OFFLINE'
MCNT     DC    C'TOO MANY BITS IN MASK COUNT'
NONSUPP  DC    C'UNSUPPORTED DEVICE NAME SPECIFIED'
NONXA    DC    C'THIS FUNCTION NOT SUPPORTED UNDER X-A'
         DS    0F
ENDCHAIN DC    X'FF000000'
SAVEPDE  DS    F
SAVELGTH DS    F
*SAVEUCB  DS    F
CNTSAVE  DS    F
BITSAVE  DS    F
PARSAVE  DS    F
REG3SAV  DS    F
*EXAMED   DS    D
FLGSW    DC    X'00'
ESOCODE  DC    X'00'
REQFLG   DC    X'00'
ALLFLG   DC    X'00'
MYFLG    DC    X'FF'
VOLFLG   DC    X'04'
UCBFLG   DC    X'08'
DEVFLG   DC    X'88'
PUBFLG   DC    X'11'
PRIVFLG  DC    X'22'
STORFLG  DC    X'33'
HALF12   DC    H'12'
HALF0    DC    H'0'
STOR     DC    CL240' '
STOR1    DC    CL6' '
*
RC04     DC    C'            PERMANENT I/O ERROR'
RC08     DC    C'VOLUME NOT MOUNTED  '
RC0C     DC    C'UCB NOT READY OR INVALID UCB SPECIFIED '
DMSG     DC    C'NOT A DIRECT ACCESS DEVICE'
PUBLC    DC    C'NO PUBLIC DEVICES MOUNTED'
UNKNWN   DC    C'ERROR..UNKNOWN OR INVALID DEVICE SPECIFIED'
FLGMSG   DC    CL65' '
ENDMSG   DC    C'END OF MSG'
HDR      DC    C'     STATUS FLAGS ARE:'
*
*DFID     DS    CL2
RETCODE  DS    F
         EJECT
         TITLE 'LTORG'
         LTORG ,
         TITLE 'SAVE AREA AND CONSTANTS'
*SAVE1    DS    9D                  SAVE AREA
         DS    D
PCFTBLS  DC    CL8'PCFTBLS ' MUST BE DOUBLE WORD ALIGNED
VOLSER   DC    CL6' '
KNOTTSO  DC    C'NOTTSO'
         TITLE 'PATCH AREA'
*PATCH    DC    50S(*)              GENERATE SCON'S FOR PATCH AREA
         TITLE 'REGISTER EQUATES'
R0       EQU   0
R1       EQU   1                   PARAMETER & WORK REGISTER
R2       EQU   2                   WORK REGISTER
R3       EQU   3                   ADDRESS OF CVT REQUIRED BY IEAVVMSR
R4       EQU   4                   ADDRESS OF CALLER'S PARM
R5       EQU   5
R6       EQU   6                   DESTROYED BY IEAVVMSR
R7       EQU   7
R8       EQU   8                   DESTROYED BY IEAVVMSR
R9       EQU   9                   DESTROYED BY IEAVVMSR
R10      EQU   10
R11      EQU   11
R12      EQU   12                  BASE - EP + 0
R13      EQU   13                  SAVE AREA ADDRESS
R14      EQU   14                  OS LINKAGE REGISTER
R15      EQU   15                  OS LINKAGE REGISTER
*
D0       EQU   0                                                   NTL1
D1       EQU   1                                                   NTL1
D2       EQU   2                                                   NTL1
D4       EQU   4                                                   NTL1
D8       EQU   8                                                   NTL1
D12      EQU   12                                                  NTL1
D16      EQU   16                                                  NTL1
*
BLANK    EQU   C' '                                                NTL1
HEADING  EQU   X'01'                                               NTL1
FOUND    EQU   X'02'                                               NTL1
NOTFOUND EQU   X'FD'                                               NTL1
SKIP     EQU   X'80'                                               NTL1
NOSKIP   EQU   X'7F'                                               NTL1
CHARZERO EQU   C'0'                                                NTL1
         SPACE 1
         EJECT
*        PRINT NOGEN
         SPACE 5
         TITLE 'CVT DSECT'
         CVT   DSECT=YES,SYS=VMS,TSO=YES
         SPACE 5
TSO012   CSECT
         TITLE 'PSA DSECT'
         IHAPSA
         SPACE 5
TSO012   CSECT
         TITLE 'ASCB DSECT'
         IHAASCB
         SPACE 5
TSO012   CSECT
         TITLE 'LPDE DSECT'
         IHALPDE
         SPACE 5
TSO012   CSECT
         TITLE 'JSCB DSECT'
         IEZJSCB
         SPACE 5
TSO012   CSECT
         TITLE 'PSCB DSECT'
         IKJPSCB
         SPACE 5
TSO012   CSECT
         TITLE 'TCB DSECT'
         IKJTCB
         SPACE 5
TSO012   CSECT
***********************************************************************
* DSECTS FOR CONTROL BLOCKS                                           *
***********************************************************************
*                                                                     *
PARMTAB  IKJPARM DSECT=IKJPARMD
VOLUMES  IKJIDENT  VOLUME,LIST,FIRST=ALPHANUM,OTHER=ALPHANUM,          X
               HELP=('VOL SERS TO SCAN FOR SPACE AVAILABLE',           X
               'VOL MAY BE COMPLETE OR GENERIC VOLUME SERIAL #'),      X
               DEFAULT='TSO',CHAR
KWORD    IKJKEYWD
         IKJNAME   'FLAGS'
         IKJENDP
*****************************CONTROL BLOCKS****************************
*
         IKJCPPL
CPPLLEN  EQU   *-CPPL
         SPACE 5
         IKJPPL
PPLLEN   EQU   *-PPL
         SPACE 5
         IKJIOPL
IOPLLEN  EQU   *-IOPL
         SPACE 5
*                                                                     *
         EJECT
         IEFUCBOB                 UCB DSECT
         EJECT
***********************************************************************
* DSECT FOR GETMAINED WORKAREA                                        *
***********************************************************************
*                                                                     *
WORKAREA DSECT
SAVEAREA DS    18F
ECB      DS    F
*                                                                     *
PPLSECT  DS    0F
         ORG   PPLSECT+PPLLEN
*
IOPLSECT DS    0F
         ORG   IOPLSECT+IOPLLEN
         EJECT
*
PARSBACK DS    F
*
         IKJEFFGF
         DS    0H
VOLMSG   DC    AL2(VOLMSGL),AL2(0)
         DC    CL72' '
VOLMSGL  EQU   *-VOLMSG
PARMLIST DS    3F                 PARMLIST MAPPING FOR UCB
         ORG   PARMLIST
PARMWA   DS    F                  ADDR OF 100-BYTE WORK AREA
PARMDEVT DS    F                  ADDR OF DEV TYPE TO SCAN FOR
PARMUCB  DS    F                  ADDR OF RETURNED UCB
         SPACE
DEVCLASS DS    CL1                DEVICE CLASS TO SEARCH FOR
ADDRUCB  DS    F                  RETURNED UCB ADDR
SCANSAVE DS    F                  ADDR OF SCAN SERVICE ROUTINE
XASWITCH DC    X'00'              INITIALIZE SWITCH
         DS    0D                 FOR ALIGNMENT
UCBWORK  DS    CL100              UCB WORK AREA
*
MSG      DS    CL84                     DCL    1 MSG CHAR(65)
MSGL     EQU   *-MSG
MSGEND   EQU   *
*
         ORG   MSG+4
MSGVOL   DS    CL6                               2 MSGVOL CHAR(6)
         DS    CL1                               2 *      CHAR(1)
MSGUNIT  DS    CL3                               2 MSGUNIT CHAR(3)
         DS    CL2
SCANSTRT EQU   *
MSGDSCBS DS    CL5
         DS    CL1
MSGEXTS  DS    CL4
         DS    CL1
MSGFCYL  DS    CL4
         DS    CL1
MSGFTRK  DS    CL4
         DS    CL1
MSGCCYL  DS    CL4
         DS    CL1
MSGCTRK  DS    CL4
         DS    CL1
MSGCNT   DS    CL3
         DS    CL1
MSGUSE   DS    CL4
SCANLEN  EQU   *-SCANSTRT
MSGSTAT  DS    CL5
         DS    CL1
MSGUTYPE DS    CL8
*MSGUTYPE DS    F
*
         ORG   MSG+4                    NEW OVERLAY FOR ERROR MESSAGE
MSGNVOL  DS    CL31
         ORG   MSG+29                     FOR NO VOLUME FOUND
MSGIVOL  DS    CL6
*
         ORG   MSG+22                   OVERLAY FOR LSPACE (SVC78)
MSGERR   DS    CL23                       GRIPE MESSAGES
         ORG
*
VOLSPC   DS    CL30               SPACE FOR LSPACE (SVC 78)        NTL1
SVC78END EQU   *                                                   NTL1
         ORG   VOLSPC+6           SOME USEFUL OVERLAYS......       NTL1
SVC78FCY DS    CL4                   FOR THE LSPACE SVC            NTL1
         DS    CL1                                                 NTL1
SVC78FTR DS    CL4                                                 NTL1
         DS    CL1                                                 NTL1
SVC78EXT DS    CL4                                                 NTL1
         DS    CL1                                                 NTL1
SVC78CCY DS    CL4                                                 NTL1
         DS    CL1                                                 NTL1
SVC78CTR DS    CL4                                                 NTL1
         ORG   VOLSPC+7                                            NTL1
SVC78ERR DS    CL23               FOR GRIPE MESSAGES.........      NTL1
         ORG   SVC78END                                            NTL1
SW1      DS    1C                                                  NTL1
TSOFLAG  DS    X                  ='80' IF TSO.  ='00' IF NOT TSO  NTL1
ANSWER   DS    F                                                   NTL1
DBLW     DS    4D                                                  NTL1
         ORG   DBLW                                                NTL1
EXTRACT1 DS    4D                                                  NTL1
CAM      DS    0D                                                  NTL1
CAML     DS    4F                         OBTAIN LIST              NTL1
CAMA     DS    2F                         CCHHR                    NTL1
CAMV     DS    2F                         VOLUME NAME              NTL1
         DS    0D                                                  NTL1
CAMW     DS    350C                       WORK AREA                NTL1
         DS    0D                                                  NTL1
DMYECT   DS    XL60                       DUMMY ECT FOR BATCH      NTL1
         DS    0D                                                  NTL1
DMYUPT   DS    CL24                       DUMMY UPT FOR BATCH      NTL1
         DS    0D                                                  NTL1
DMYCMD   DS    CL124                      DUMMY COMMAND FOR BATCH  NTL1
WTOAREA  DS    CL256
LDYNAMIC EQU   *-WORKAREA
         END
