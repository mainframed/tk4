 SHOWTRC: PROC OPTIONS(MAIN) REORDER;
   DCL IN FILE RECORD INPUT ENV(CONSECUTIVE);
   DCL PTR POINTER;
   DCL REC_COUNT FIXED BIN(31,0) INIT(0);
   DCL SYSPRINT FILE PRINT;
   DCL (EOF,FINISHED)    BIT(1) INIT('0'B);

   DCL 1 TRACEREC    BASED(PTR),
         2 PREFIX    CHAR(4),
         2 GARBAGE   CHAR(8),
         2 START_DATE FIXED DEC(7),
         2 START_TIME FIXED BIN(31,0),
         2 MSC_CLOCK  CHAR(4);

  DCL PRNT_DATE PIC'Z9/99/99' INIT(0),
      PRNT_TIME PIC'Z9.99.99' INIT(0);

  DCL DSN_SAVE(100) CHAR(44) INIT((100)(44)' ');
  DCL DSN_COUNT     FIXED BIN(15,0) INIT(0);

  DCL LOC_INDEX   CHAR(44) INIT('SYS5.RAW.MSSTRACE'),
      LOC_DSN     CHAR(44) INIT(' '),
      LOC_VOL     CHAR(6)  INIT(' '),
      LOC_RETCD   FIXED BIN(31,0) INIT(0),
      LOC_AREA(1024) FIXED BIN(31,0) INIT(0) ALIGNED;
  DCL LOC_WORK    CHAR(4096) BASED(@WORK);
  @WORK = ADDR(LOC_AREA(1));

  DCL LOCINDEX  EXTERNAL ENTRY OPTIONS(ASSEMBLER,INTER);


 DCL PACK5         PIC'99999'    INIT(0),
     PACK6         PIC'999999'   INIT(0),
     R941X11  EXTERNAL ENTRY OPTIONS(ASSEMBLER,INTER),
     R941X12  EXTERNAL ENTRY OPTIONS(ASSEMBLER,INTER);




 DCL R062A10 EXTERNAL ENTRY            /* DYNAMIC ALLOCATION SUB  */
             OPTIONS(ASSEMBLER,INTER);

 DCL 1 PLIST,
       2 DDNAME      CHAR(8)    INIT('IN   '),
       2 DSNAME      CHAR(44)   INIT(' '),
       2 DSMEMBER    CHAR(8)    INIT(' '),
       2 PASSWORD    CHAR(8)    INIT(' '),
       2 DSSTATUS    CHAR(8)    INIT('SHR'),
       2 DSNDISP     CHAR(8)    INIT('KEEP'),
       2 DSADISP     CHAR(8)    INIT('KEEP'),
       2 DSUNIT      CHAR(8)    INIT(' '),
       2 $RSVD1      CHAR(8)    INIT(' '),
       2 DSVOLSER    CHAR(6)    INIT(' '),
       2 $RSVD2      CHAR(40)   INIT(' '),
       2 DSVOLREF    CHAR(44)   INIT(' '),
       2 DSFREE      CHAR(8)    INIT(' '),
       2 DSLABEL     CHAR(4)    INIT(' '),
       2 DSINOUT     CHAR(4)    INIT(' '),
       2 $RSVD3      CHAR(16)   INIT(' '),
       2 DSPWDLBL    CHAR(8)    INIT(' '),
       2 DSDATE      CHAR(12)   INIT(' '),
       2 DSALLOC     CHAR(5)    INIT(' '),
       2 DSPRI       CHAR(6)    INIT(' '),
       2 DSSEC       CHAR(6)    INIT(' '),
       2 DSDIR       CHAR(6)    INIT(' '),
       2 DSRLSE      CHAR(8)    INIT(' '),
       2 DSCONTIG    CHAR(8)    INIT(' '),
       2 DSROUND     CHAR(8)    INIT(' '),
       2 $RSVD4      CHAR(24)   INIT(' '),
       2 DSBLKSI     CHAR(5)    INIT(' '),
       2 DSORG       CHAR(8)    INIT(' '),
       2 DSKEYLEN    CHAR(3)    INIT(' '),
       2 DSLRECL     CHAR(5)    INIT(' '),
       2 DSRECFM     CHAR(8)    INIT(' '),
       2 DSDCBDS     CHAR(44)   INIT(' '),
       2 $RSVD5      CHAR(24)   INIT(' ');

 DCL 1 ERRBLK,
       2 ERRCODE     BIT(16)    INIT((16)'0'B),
       2 ERRINFO     BIT(16)    INIT((16)'0'B),
       2 ALLOC_RC    FIXED BIN(31,0) INIT(0)  ;

 DCL GOOVOO CHAR(8) INIT('G0001V00');
 DCL DSN    CHAR(44) INIT('SYS5.RAW.MSSTRACE');
 DCL GOFFSET FIXED BIN(15,0) INIT(19);

 GET FILE(SYSIN) DATA (GOOVOO,DSN,GOFFSET);
 PUT FILE(SYSPRINT) SKIP DATA(DSN,GOOVOO,GOFFSET);


     ON UNDEFINEDFILE(IN)    BEGIN;
        ON ERROR SYSTEM;
        PUT DATA(PLIST,ERRBLK);
        STOP;
                             END;

  DO WHILE(^FINISHED);
     CALL LOCINDEX(LOC_INDEX,LOC_DSN,LOC_VOL,LOC_WORK,LOC_RETCD);
       IF LOC_RETCD = 0 & DSN_COUNT < DIM(DSN_SAVE,1) THEN
         DO;
           DSN_COUNT = DSN_COUNT + 1;
           DSN_SAVE(DSN_COUNT) = LOC_DSN;
         END;
      FINISHED = LOC_RETCD > 0 ×
                 SUBSTR(LOC_DSN,GOFFSET,8) <= GOOVOO;
   END;
   PUT FILE(SYSPRINT) SKIP EDIT
      (DSN_COUNT,'..DATASETS FOUND FOR INDEX ',LOC_INDEX)
      (P'ZZ9',A,A);

   ON ENDFILE(IN) EOF = '1'B;

   DO INDX = DSN_COUNT TO 1 BY -1; /* GET EACH ONE IN TURN */
     UNSPEC(PLIST.DSNAME) = (44)'00000000'B;/* FREE DDN FIRST */
     PLIST.DSSTATUS = '';
     PLIST.DSNDISP  = '';
     PLIST.DSADISP  = '';
     ERRBLK = '';
     CALL R062A10(PLIST,ERRBLK);
     IF ALLOC_RC ^=0 THEN
       DO;
         PLIST.DSNAME='FREE DATASET REQUEST';
         CALL CANT_ALLOC;
       END;
     PLIST.DSNAME = DSN_SAVE(INDX);
     PLIST.DSSTATUS = 'SHR';
     PLIST.DSNDISP  = 'KEEP';
     PLIST.DSADISP  = 'KEEP';
     CALL R062A10(PLIST,ERRBLK); /* ALLOCATE THE DSNAME  */

     IF ALLOC_RC ^= 0 THEN
       DO;
          CALL CANT_ALLOC;
       END;
     ELSE
       DO;   /* PROCESS THE DATASET */

         OPEN FILE(IN) INPUT;

         READ FILE(IN) SET(PTR);

         PACK5 = START_DATE;
         CALL R941X12(PACK5,PACK6);
         IF PACK6 ^= 0 THEN PRNT_DATE = PACK6;
                       ELSE PRNT_DATE = 0;
         PRNT_TIME = CNVTIME(START_TIME);

         PUT FILE(SYSPRINT) SKIP EDIT
           (PLIST.DSNAME,' TRACE START ON ',
            PRNT_DATE,' ',PRNT_TIME)
           (A,A,A,A,A);
         CLOSE FILE(IN);
      END;
  END;
 STOP;



0/*------------------------------------------------------*/
 CNVTIME: PROC(INTIME)  RETURNS(FIXED BIN(31,0));

 /*  CONVERT 100THS OF A SECOND TO HHMMSS                */
 /*------------------------------------------------------*/
    DCL INTIME FIXED BIN(31,0),
        (HH,MM,SS,RESULT) FIXED BIN(31,0) INIT(0);

      HH = INTIME / 360000;
      MM = INTIME / 6000 - 60 * HH;
      SS = MOD( (INTIME/100) , 60 );

      RESULT = 10000 * HH  +  100 * MM   + SS;

    RETURN(RESULT);

 END CNVTIME;
1/* INTREPRET DYNAMIC ALLOCATION ERROR CODES */

 CANT_ALLOC: PROC;

     DCL ECODE     CHAR(4)      INIT(' '),
         EINFO     CHAR(4)      INIT(' '),
         ARCODE    PIC'99'      INIT(0);

     ECODE = CNVTHX(ERRCODE);
     EINFO = CNVTHX(ERRINFO);
     ARCODE= ALLOC_RC;

     PUT SKIP(2) EDIT
       ('DSN=',PLIST.DSNAME)                             (A,A)
       ('**DYNAMIC ALLOCATION ERROR CODE =',ECODE)       (SKIP,A,A)
       (' INFO CODE=',EINFO)                             (A,A)
       (' DARC=',ARCODE)                                 (A,A);
    RETURN;

 END CANT_ALLOC;

1/* CNVTHX - PROCEDURE TO CONVERT 16 BIT TO 4 CHAR HEX */

 CNVTHX: PROC(N) RETURNS(CHAR(4));

 DCL N  BIT(16),
     (HEXOUT,XOUT) CHAR(4) INIT(' '),
     CH(0:15) CHAR(1) STATIC INIT(
       '0','1','2','3','4','5','6','7',
       '8','9','A','B','C','D','E','F'  ),
     NUM BIT(16),
     (II,J,K)  FIXED BIN(15,0);

 NUM = UNSPEC(N);
 DO K = 1 TO 4;
   J = (K-1)*4+1;
   UNSPEC(II) = (12)'0'B ×× SUBSTR(NUM,J,4);
   SUBSTR(XOUT,K,1) = CH(II);
 END;
 HEXOUT = XOUT;
 RETURN (HEXOUT);
 END CNVTHX;

 END SHOWTRC;
