*          DATA SET SCOMPARE   AT LEVEL 004 AS OF 03/21/80
*          DATA SET SCOMPARE   AT LEVEL 002 AS OF 02/29/80
*          DATA SET SCOMPARE   AT LEVEL 001 AS OF 05/31/79
*          DATA SET CBT881     AT LEVEL 003 AS OF 01/31/79
SCOMPARE TITLE 'SCOMPARE -VERSION 1.1 -COMPARE SOURCE UTILITY '
         PRINT OFF
         MACRO
&NAME    PRINTX &DCB,&TITLE,&BUFFER,&LINES,&NOPAGE,&SIZE=132       FCI
         LCLC  &A,&B,&C,&D,&E,&A1,&F                               FCI
         LCLA  &S,&NTITLE,&I                                       FCI
&S       SETA  &SIZE-1                                             FCI
&NTITLE  SETA  N'&TITLE                                            FCI
&I       SETA  0                                                   FCI
&A       SETC  '$$A'.'&SYSNDX'                                     FCI
&A1      SETC  '$#A'.'&SYSNDX'                                     FCI
&B       SETC  '$$B'.'&SYSNDX'                                     FCI
&C       SETC  '$$C'.'&SYSNDX'                                     FCI
&D       SETC  '$$D'.'&SYSNDX'                                     FCI
&E       SETC  '$$E'.'&SYSNDX'                                     FCI
&F       SETC  '$$F'.'&SYSNDX'                                     FCI
         SPACE
&NAME    BAL   R14,&F              GO EXAMINE LINE FOR ASA         FCI
*                                  RETURN WITH R15=LINE COUNT      FCI
         CH    R15,=AL2(&LINES)    WILL THIS HAVE OVFLWED THE PAGE?FCI
         BNH   &A                  NO - PRINT A REGULAR LINE.      FCI
         SR    R15,R15             CLEAR REGISTER 15.              FCI
         STH   R15,&B              STORE LINES COUNTER.            FCI
         AIF   ('TITLE(1)' EQ '').$$LINE                           FCI
         AIF   ('NOPAGE' EQ '').NOPAGE                             FCI
         MVC   &TITLE(1)+&S-12(12),&E PAGE CONSTANT.               FCI
         ED    &TITLE(1)+&S-7(6),&D.+5 UNPACK PAGE NUMBER          FCI
         CVB   R15,&D              CURRENT PAGE COUNTER.           FCI
         LA    R15,1(R15)          INCREMENT BY ONE.               FCI
         CVD   R15,&D              CONVERT TO PACK FORMAT.         FCI
.NOPAGE  ANOP                                                      FCI
         PUT   &DCB,&TITLE(1)      PRINT TITLE.                    FCI
         AIF   (&NTITLE LE 1).$$LINE
&I       SETA  1
.$$LOOP  ANOP
&I       SETA  &I+1
         AIF   (&I GT &NTITLE).$$LINE
         PUT   &DCB,&TITLE(&I)     PRINT SUBTITLE NUMBER &I        FCI
         AGO   .$$LOOP
.$$LINE  ANOP
         LH    R15,&B              GET CURRENT LINES PRINTED       FCI
         LA    R15,&NTITLE         BUMP BY NUMBER OF TITLE LINES   FCI
         STH   R15,&B                                              FCI
         MVI   &BUFFER,C' '        MAKE SURE STARTS WITH NO EXTRA SKIPS
*
&A       PUT   &DCB,&BUFFER        PRINT A REGULAR LINE.           FCI
         BAL   R14,&F              GO CHECK OUT LINE COUNT         FCI
         STH   R15,&B              SAVE LINE COUNT                 FCI
         B     &C                  GO EXIT                         FCI
         SPACE 1                                                   FCI
*                                                                  FCI
*  CHECK OUT ASA CONTROL CHARACTER FOR CARRIAGE COUNT              FCI
*                                                                  FCI
&F       LH    R15,&B              CURRENT LINES PRINTED.          FCI
         CLI   &BUFFER,C'+'        IS IT A OVERPRINT?              FCI
         BE    &A1                       YES..NO BUMP              FCI
         LA    R15,1(R15)          INCREMENT BY ONE. ..            FCI
         CLI   &BUFFER,C' '        IS IT A BLANK?                  FCI
         BE    &A1                                                 FCI
         LA    R15,1(R15)                                          FCI
         CLI   &BUFFER,C'0'        IS IT A DOUBLE SPACE?           FCI
         BE    &A1                                                 FCI
         LA    R15,1(R15)                                          FCI
* NOTE...TRIPLE SPACE ASSUMED C'-'                                 FCI
&A1      BR    R14                 EXIT OUT.                       FCI
         SPACE 1
         AIF   ('NOPAGE' EQ '').SKIPD
         DS    0D                  DOUBLE WORD ALIGNMENT..         FCI
&D       DC    PL8'+1'             TITLE PAGE COUNTER.             FCI
&E       DC    C' PAGE ',X'202020202140' CONST.  IN HEADING.&L     FCI
.SKIPD   ANOP
&B       DC    AL2(&LINES)         NUMBER OF LINES PRINTED ON PAGE.FCI
&C       DS    0H                  EXIT OUT.                       FCI
         MEND
         PRINT ON
CMPRSEQ  CSECT
*
*   THIS COMPARE PROGRAM ORIGINATED AT YALE UNIVERSITY AND WAS OBTAINED
*     FROM THE CONNECTICUT BANK AND TRUST COMPANY MODS TAPE (FILE 226)
*
*   THIS COMPARE PROGRAM USES ONLY COLUMNS ONE THROUGH 72; THUS, ANY
*     TWO VERSIONS OF A PROGRAM MAY BE EASILY COMPARED EVEN IF ONE
*     (OR BOTH) OF THE FILES HAS BEEN RESEQUENCED.  IF NEITHER FILE
*     HAS BEEN RESEQUENCED, A PARM OF "FULL" MAY BE CODED TO REQUEST
*     THAT ALL EIGHTY COLUMNS BE USED IN THE COMPARISON.  A FACILITY
*     IS ALSO PROVIDED TO IGNORE TRIVIAL CARD IMAGES (SUCH AS " EJECT "
*     OR " SPACE 3 " IN AN ASSEMBLER SOURCE PROGRAM).
*
*   THIS PROGRAM USES ALL AVAILABLE CORE IN ITS REGION AFTER OPENING
*     ITS INPUT/OUTPUT FILES (EXCEPT FOR 4K WHICH IS RELEASED).  THE
*     OBTAINED CORE AREA IS USED AS A COMPARE BUFFER WHICH IS ONLY
*     DUMPED (WRITTEN TO SYSPRINT) WHEN IDENTICAL RECORDS (BASED ON
*     THE FIRST 72 BYTES) ARE FOUND IN THE OLD AND NEW DATA SETS.  IF
*     THE COMPARE BUFFER OVERFLOWS, THE PROGRAM TERMINATES.  THEREFORE,
*     IF IT IS SUSPECTED THAT THE TWO DATA SETS MAY BE VERY FAR OUT OF
*     SYNC, A LARGE REGION SHOULD BE USED.  THE NUMBER OF UNMATCHED
*     RECORDS THAT CAN BE BUFFERED AT ONE TIME CAN BE CALCULATED FROM
*     THE EXPRESSION:  (REGION SIZE - 8K - BUFFERS) / 160
*     AS A GENERAL RULE, 30K IS SUFFICIENT FOR ABOUT 100 UNMATCHED
*     RECORDS AT A TIME, AND 100K IS SUFFICIENT FOR ABOUT 500 UNMATCHED
*     RECORDS AT A TIME.
*
*   CARD IMAGES OF THE TRIVAL DATA IS INPUT FROM THE IGNORE DDNAME;
*     IF THE DDCARD IS MISSING, A TABLE OF TRIVIAL DATA FOR ASSEMBLER
*     SOURCE CODE WILL BE ASSUMED (THIS INCLUDES " EJECT ", " SPACE   "
*     " SPACE 1 ", " SPACE 2 ", " SPACE 3 " AND BLANK COMMENT CARDS).
*
        EJECT
*
*
*   THE PROGRAM FORMAT ON THE CBT MODS TAPE WAS DISASSEMBLED SOURCE; IT
*     WAS RECOMMENTED, RESYMBOLIZED, REDOCUMENTED AND SLIGHTLY MODIFIED
*     BY  A. BRUCE LELAND (ABL)  OCTOBER, 1978
*
*
*   JCL:
*
*   //STEPNAME   EXEC  PGM=SCOMPARE,REGION=100K
*   //OLD        DD    DSN=OLD.SEQ.DSN ....
*   //NEW        DD    DSN=NEW.SEQ.DSN ....
*   //SYSPRINT   DD    SYSOUT=A
*   //IGNORE     DD    *      (OR DUMMY  --  OR OMITTED)
*     TRIVIAL CARD IMAGES THAT ARE TO BE IGNORED IN THE COMPARISON
*   /*
*
*  MODS V1.0 K TRUE 29 FEB 80 -
*    ADDED PAGINATION,AND HEADING INFORMATION TO REPORT (DATE,TIME
*    DSNAME,VOL ETC).
*
*  MODS V1.1 K TRUE  20 MAR 80 -
*   ADDED 'COBOL' PARM TO LIMIT COMPARE TO COLS 7-72 ONLY.
*   PUT PARM IN HEADING.
*   PUT RECORD COUNTER IN FOR BOTH DATASETS
*
         EJECT
         SAVE  (14,12),,*
         LR    R12,R15
         USING CMPRSEQ,R12
         LR    R11,R13
         LA    R13,SAVE
         ST    R13,8(,R11)
         ST    R11,4(,R13)
         B     PARM
SAVE     DC    18F'0'
PARM     L     R1,0(,R1)
         CLC   2(4,R1),FULL
         BNE   CHKCOB                                               FCI
         MVC   H2COLS,=C'1-80'        SET COMPARE LENGTH            FCI
         MVI   MLENGTH,80-1            MACHINE LENGTH OF COMPARE    FCI
         B     OPEN                                                 FCI
CHKCOB   CLC   2(5,R1),=C'COBOL'       COBOL OPTION DESIRED         FCI
         BNE   OPEN                    NO...                        FCI
         MVI   MLENGTH,72-7+1-1        MACHINE LENGTH OF COMPARE    FCI
         MVC   H2COLS,=C'7-72'        SET COMPARE LENGTH            FCI
         MVC   CLCR3#R2(LENCLC),CLCCOBOL  MOVE IN NEW EXEC INSTRS   FCI
*                                       TO START EXAM AT COL 7      FCI
OPEN     LA    R1,PARMLIST
         L     R15,=A(DATTIM)
         BALR  R14,R15
*
OPENX    LA    R2,OLD
         LA    R3,H1DSN
         BAL   R10,OPENSTAT
         LA    R2,NEW
         LA    R3,H2DSN
         BAL   R10,OPENSTAT
OPENREST OPEN  (SYSPRINT,OUTPUT,IGNORE)
         SPACE
         GETMAIN VU,LA=MIN,A=STARTADD      GET ALL AVAILABLE CORE
         LM    R0,R2,FOURK                 LOAD 4K, START, SIZE
         SR    R2,R0                       SUBTRACT OFF 4K
         ST    R2,SIZE                     UPDATE REGION SIZE
         AR    R1,R2                       LAST USEABLE BYTE
         ST    R1,HIGHCORE                 SAVE FOR LATER
         SPACE
         FREEMAIN R,LV=(0),A=(1)           FREE THE 4K DYNAMIC AREA
         L     R2,STARTADD
         ST    R2,FIRSTIG
         TM    IGNORE+48,X'10'             IGNORE OPEN?
         BO    GETIG                       YES, BRANCH              ABL
         MVC   FIRSTIG(8),IGASMS           FIRST AND LAST IGNORES   ABL
         B     NOIG                          FOR ASSEMBLER SOURCE   ABL
         SPACE
GETIG    GET   IGNORE,(2)
         LA    R2,84(,R2)
         B     GETIG
         SPACE
ENDIG    CLOSE (IGNORE)
         ST    R2,LASTIG                                            ABL
NOIG     ST    R2,LOWOLD                                            ABL
         ST    R2,HIGHOLD
         ST    R2,CURROLD
         LA    R2,84(,R2)
         ST    R2,LOWNEW
         ST    R2,HIGHNEW
         ST    R2,CURRNEW
         LA    R8,OLD
         LA    R9,NEW
*
*    THIS COMPLETES THE PROGRAM INITIALIZATION
         EJECT
SWAP     XR    R9,R8
         XR    R8,R9
         XR    R9,R8
         L     R3,CURR(,R9)
         C     R3,HIGH(,R9)
         BL    NOINPUT
         TM    48(R9),X'10'            CURRENT DCB OPEN?
         BZ    SWAP                    NO, BRANCH (AND SWAP)
         LA    R1,0(,R9)
         GET   (1)
         L     R15,RECS(,R9)           GET CURRENT COUNT           FCI
         A     R15,=F'1'               BUMP COUNT                  FCI
         ST    R15,RECS(,R9)           AND SAVE IT AGAIN           FCI
         LA    R0,84(,R3)
         C     R0,HIGHCORE             FIT IN CORE?
         BH    NOTCORE                 NO, BRANCH
         MVC   0(80,R3),0(R1)
         ST    R15,80(,R3)             SAVE RECORD NUMBER          FCI
         LA    R0,168(,R3)
         ST    R0,HIGH(,R9)
         SPACE 2
*  SEE IF THIS RECORD IS ANYWHERE IN THE OTHER BUFFER
*
NOINPUT  L     R2,LOW(,R8)
         IC    R1,MLENGTH
NEXT8    C     R2,CURR(,R8)
         BNL   NO8
         EX    R1,CLCR3#R2                                         FCI*
         BE    FOUND8
         LA    R2,168(,R2)
         B     NEXT8
NO8      LA    R3,168(,R3)          NOT IN THE BUFFER,
         ST    R3,CURR(,R9)           UPDATE THE CURRENT POINTER
         B     SWAP
         SPACE 2
*    DOES NOT FIT IN THE ALLOCATED CORE
*
NOTCORE  BAL   R10,NOTEQUAL               OUTPUT NOT EQUAL MESSAGE
         CLOSE (NEW,,OLD)
         MVI   RC+1,8                     RETURN CODE 8
         MVC   BUFFER(35),CORE-1          CORE OVERFLOW MESSAGE
         MVC   BUFFER+35(74),BUFFER+34    CLEAR THE REMAINDER
         BAL   R7,PRINTIT
         MVI   BUFFER,X'40'
         B     CORETERM
         EJECT
*   RECORD WAS FOUND -- SEE IF IT IS TO BE IGNORED
*
FOUND8   CLC   CURR(4,R9),LOW(R9)           RECORDS IN ACTIVE BUFFER?
         BNE   CHKIG                        YES, CHECK IGNORES
         ST    R2,CURR(,R8)
         B     IGEQUAL
CHKIG    L     R15,FIRSTIG                FIRST IGNORE
LOOPIG   C     R15,LASTIG                 LAST IGNORE?
         BNL   NOTIG                      YES, BRANCH
         EX    R1,CLCR3R15                AN IGNORE RECORD?        FCI*
         BE    NO8                        YES, BRANCH
         LA    R15,84(,R15)
         B     LOOPIG                     CHECK ALL IGNORES
*
NOTIG    ST    R2,CURR(,R8)               NOT AN IGNORE RECORD
         BAL   R10,NOTEQUAL               OUTPUT "NOT EQUAL"
IGEQUAL  BAL   R10,INBUFF                 ADD TO COMPARE BUFFER
         XR    R9,R8
         XR    R8,R9
         XR    R9,R8
         BAL   R10,INBUFF                 ADD TO OTHER BUFFER
         B     SWAP
         SPACE 2
*  END OF FILE (OLD OR NEW)
*
EOLDNEW  CLOSE ((9))                      CLOSE THE CURRENT FILE
         XR    R9,R8
         XR    R8,R9
         XR    R9,R8
         TM    48(R9),X'10'               OTHER FILE STILL OPEN?
         BNZ   SWAP                       YES, BRANCH
         CLC   LOWOLD(4),HIGHOLD          BUFFER EMPTY?
         BNE   *+14                       NO, BRANCH
         CLC   LOWNEW(4),HIGHNEW          OTHER BUFFER EMPTY TOO?
         BE    TRIPLE                     YES, QUIT
         BAL   R10,NOTEQUAL               FLUSH THE CURRENT BUFFERS
         B     TRIPLE
         SPACE 2
CLCR3#R2 CLC   0(1,R3),0(R2)                EXECUTED   LEAVE        FCI
CLCR3R15 CLC   0(1,R3),0(R15)               EXECUTED      TOGETHER  FCI
         SPACE 2
CLCCOBOL CLC   6(1,R3),6(R2)     COMPARE INST FOR      LEAVE        FCI
         CLC   6(1,R3),6(R15)     COBOL 7-72 COL          TOGETHER  FCI
LENCLC   EQU   *-CLCCOBOL           COMPARES                HERE    FCI
         EJECT
*  TERMINATE -- LIST NUMBER OF UNEQUAL COMPARES
*
TRIPLE   MVI   BUFFER,C'-'
CORETERM MVC   BUFFER+1(6),EDCOUNT          EDIT MASK
         MVC   BUFFER+7(35),BLOCKS          UNEQUAL BLOCKS MESSAGE
         MVC   BUFFER+42(67),BUFFER+41      BLANK REMAINDER
         LH    R1,COUNT
         CVD   R1,DOUBLE
         ED    BUFFER+1(6),DOUBLE+5
         BAL   R7,PRINTIT
         CLOSE (SYSPRINT)
FINITO   LH   R15,RC
         L    R13,4(,R13)                                           ABL
         RETURN (14,12),RC=(15)                                     ABL
         SPACE 2
*  RE-INITIALIZE THE ACTIVE BUFFER -- SLIDE UNUSED RECORDS DOWN
*
INBUFF   L     R1,LOW(,R9)
         L     R2,CURR(,R9)
         ST    R1,CURR(,R9)
NXTREC   LA    R2,168(,R2)
         C     R2,HIGH(,R9)                  FINISHED REINITIALIZING?
         BNL   REINIT                        YES, BRANCH
         MVC   0(84,R1),0(R2)                MOVE TOTAL REC+NUMBER FCI
         LA    R1,168(,R1)
         B     NXTREC
REINIT   ST    R1,HIGH(,R9)                  RESET MAXIMUM POINTER
         BR    R10
         EJECT
*     FLUSH OUT THE NON-EQUAL RECORDS
*
NOTEQUAL MVI   RC+1,4                  RETURN CODE 4
         LH    R1,COUNT
         LA    R1,1(,R1)
         STH   R1,COUNT
         MVI   BUFFER,C'-'
         MVC   BUFFER+1(7),BLANKS          REINIT RECORD COUNT POS FCI
         MVC   BUFFER+102(7),BLANKS                                FCI
         LA    R3,OLD
MOVES    MVC   BUFFER+9(3),OLDNEW(R3)
         MVC   BUFFER+98(3),OLDNEW(R3)
         MVI   BUFFER+7,C'-'
         MVI   BUFFER+102,C'-'
         ZAP   NUMBER(3),ZERO
         L     R5,LOW(,R3)
FLUSHED  C     R5,CURR(,R3)               IS THIS BUFFER FLUSHED?
         BNL   GETNEW                     YES, BRANCH
         MVC   BUFFER+15(80),0(R5)
         L     R7,80(,R5)                 GET SEQUENCE NUMBER      FCI
         CVD   R7,DOUBLE                  CONVERT TO PACKED FORM   FCI
         MVC   NUMBER(3),DOUBLE+5         MOVE PACKED INTO WORK    FCI
         MVC   DOUBLE(6),EDMKPAT
         EDMK  DOUBLE(6),NUMBER
         LA    R14,DOUBLE+5
         SR    R14,R1
         N     R14,=F'255'                         CLEAR OFF TRASH FCI
MOVE1A   EX    R14,MOVEA                                           FCI
         LA    R15,BUFFER+104(R14)
         MVI   0(R15),X'60'
         LA    R14,1(,R14)
MOVE1B   EX    R14,MOVEB                                          FCI
         LA    R1,BUFFER+6
         SR    R1,R14
MOVE1C   EX    R14,MOVEB                                          FCI
         BAL   R7,PRINTIT
         MVI   BUFFER,X'40'
         LA    R5,168(,R5)
         B     FLUSHED
*
GETNEW   LA    R1,NEW
         CR    R3,R1                      NEW DONE?
         BER   R10                        YES, RETURN
MIDLINE  LR    R3,R1                      NOW SETUP THE NEW BUFFER
         MVC   BUFFER+1(7),BLANKS
         MVI   BUFFER+9,C'-'
         MVC   BUFFER+10(91),BUFFER+9
         MVC   BUFFER+102(7),BLANKS
         BAL   R7,PRINTIT                CENTER LINE OF DASHES
         MVI   BUFFER,X'40'
         B     MOVES
         SPACE
MOVEA    MVC   BUFFER+103(1),0(R1)   **EXECUTED**                FCI
MOVEB    MVC   0(1,R1),BUFFER+102    **EXECUTED**                FCI
         EJECT
*  FCI ****ADDED PAGE HEADERS
*
PRINTIT  PRINTX SYSPRINT,(HEAD1,HEAD2,HEAD3),BUFFER,60,,SIZE=109   FCI
         BR   R7
         EJECT
*
*  FCI ****ADDED DSINFO TO HEADINGS
*
OPENSTAT RDJFCB ((2))                                               FCI
         MVC    0(44,R3),JFCBDSNM  MOVE IN DSNAME                   FCI
         LA     R1,44                                               FCI
LOOPDSN1 CLI    0(R3),C' '         FIND END OF DSNAME BY            FCI
         BE     LOOPDSNE            TRADITIONAL BUMP                FCI
         LA     R3,1(R3)              AND                           FCI
         BCT    R1,LOOPDSN1             GRIND                       FCI
LOOPDSNE TM     JFCBIND1,JFCPDS    IS THIS A PDS                    FCI
         BNO    GETVOL               NO..JUST PUT IN THE VOLUME     FCI
         MVI    0(R3),C'('         MOVE IN A LEFT PAREN             FCI
         MVC    1(8,R3),JFCBELNM   MOVE IN MEMBER NAME              FCI
         LA     R1,8                                                FCI
         LA     R3,1(R3)           POINT TO START OF MEMBER NAME    FCI
LOOPMEM1 CLI    0(R3),C' '         FIND END OF MEMBER               FCI
         BE     FINMEM              BY TRADITIONAL                  FCI
         LA     R3,1(R3)             BUMP AND                       FCI
         BCT    R1,LOOPMEM1             GRIND                       FCI
FINMEM   MVI    0(R3),C')'         MOVE IN CLOSING PAREN            FCI
         LA     R3,1(R3)           AND BUMP POINTER                 FCI
*                                                                   FCI
GETVOL   MVC    0(5,R3),=C',VOL='  MOVE IN VOLUME HEADING           FCI
         MVC    5(6,R3),JFCBVOLS   MOVE IN FIRST VOLSER             FCI
*                                                                   FCI
         OPEN   ((2))                                               FCI
         BR     R10                                                 FCI
         EJECT
*        DCB EXIT ROUTINE (USED BY SYSPRINT/IGNORE)                 FCI
*
DCBEXIT  LH    R3,62(,R1)                 BLKSIZE
         LH    R4,82(,R1)                 LRECL
         SR    R2,R2
         DR    R2,R4                      BLOCKSIZE/LRECL
         MR    R2,R4                      BLOCKING*LRECL
         CR    R3,R4                      BLOCKSIZE >  LRECL?
         BH    *+10                       YES, BRANCH
         LR    R3,R4                      MAKE BLKSIZE=LRECL
         NI    36(R1),X'EF'               TURN OFF BLOCKING
         STH   R3,62(,R1)                 NEW BLOCKSIZE
         STH   R3,24(,R1)                 BUFLEN PARAMETER
         CLI   20(R1),X'00'               BUFNO=0?
         BNER  R14                        NO, QUIT
         MVI   20(R1),X'03'               DEFAULT TO 3 BUFFERS
         BR    R14                         EXIT
         SPACE 3
SYSPRINT DCB  LRECL=109,RECFM=FBA,EXLST=EXITDCB,DDNAME=SYSPRINT,       X
               MACRF=(PM),DSORG=PS
         SPACE 3
IGNORE   DCB  LRECL=80,RECFM=FB,EXLST=EXITDCB,DDNAME=IGNORE,           X
               EODAD=ENDIG,MACRF=(GM),DSORG=PS
FIRSTIG  DC    F'0'                     POINTER TO FIRST IGNORE RECORD
LASTIG   DC    F'0'                     POINTER TO LAST IGNORE RECORD
         SPACE 3
OLD      DCB   EXLST=GETJFCB,DDNAME=OLD,                               X
               EODAD=EOLDNEW,MACRF=(GL),DSORG=PS,OPTCD=C
LOWOLD   DC    F'0'                     FIRST OLD RECORD
HIGHOLD  DC    F'0'                     HIGHEST USED OLD RECORD
CURROLD  DC    F'0'                     CURRENT OLD RECORD
OLDRECS  DC    F'0'                     COUNT OF RECS INTO OLD DS   FCI
OLDLIT   DC    C'OLD'
         SPACE 3
NEW      DCB   EXLST=GETJFCB,DDNAME=NEW,                               X
               EODAD=EOLDNEW,MACRF=(GL),DSORG=PS,OPTCD=C
LOWNEW   DC    F'0'                     FIRST NEW RECORD
HIGHNEW  DC    F'0'                     HIGHEST USED NEW RECORD
CURRNEW  DC    F'0'                     CURRENT NEW RECORD
NEWRECS  DC    F'0'                     COUNT OF RECS INTO NEW DS   FCI
NEWLIT   DC    C'NEW'
LOW      EQU   LOWNEW-NEW         DISPLACEMENT TO LOWOLD AND LOWNEW
HIGH     EQU   HIGHNEW-NEW        DISPLACEMENT TO HIGHOLD AND HIGHNEW
CURR     EQU   CURRNEW-NEW        DISPLACEMENT TO CURROLD AND CURRNEW
RECS     EQU   NEWRECS-NEW        DISPLACEMENT TO OLDRECS / NEWRECS FCI
OLDNEW   EQU   NEWLIT-NEW         DISPLACEMENT TO OLD OR NEW LITERAL
         EJECT
DOUBLE   DC    D'0'
EXITDCB  DC    X'85',AL3(DCBEXIT)
GETJFCB  DC    X'87',AL3(JFCBAREA)
RC       DC    H'0'
COUNT    DC    H'0'
NUMBER   DC    XL3'0'
MLENGTH  DC    X'47'               COMPARE LENGTH FOR EACH RECORD
MIN      DC    F'05120'             MINIMUM CORE TO GETMAIN
MAX      DC    X'00800000'          MAXIMUM CORE TO GETMAIN
FOURK    DC    F'04096'             AMOUNT OF CORE TO RELEASE
STARTADD DC    F'0'                 BUFFER START ADDRESS
SIZE     DC    F'0'                 SIZE OF THE BUFFER AREA
HIGHCORE DC    F'0'                 MAXIMUM BUFFER ADDRESS
BUFFER   DC    X'004040404040406040000000606060'
         DC    80X'00',X'606060000000',X'4060404040404040',7X'00'
FULL     DC    C'FULL'
EDCOUNT  DC    X'402020202120'
EDMKPAT  DC    X'40202020202060'
CORE     DC    C'CORE OVERFLOW - COMPARE ABANDONED '
BLOCKS   DC    C' BLOCKS OF COMPARE ERRORS DETECTED '
HEAD1    DC    CL109'1SCOMPARE  V1.1    OLD='                       FCI
         ORG   HEAD1+23                                             FCI
H1DSN    DS    CL65                                                 FCI
         ORG   ,                                                    FCI
HEAD2    DC    CL109' COLUMNS=1-72      NEW='                       FCI
         ORG   HEAD2+9                                              FCI
H2COLS   DS    CL4                                                  FCI
         ORG   HEAD2+23                                             FCI
H2DSN    DS    CL65                                                 FCI
         ORG   HEAD2+90                                             FCI
H2DATE   DS    CL8                                                  FCI
         DS    CL1                                                  FCI
H2TIME   DS    CL8                                                  FCI
         ORG   ,                                                    FCI
HEAD3    DC    CL109'  '                                            FCI
ZERO     DC    PL1'0'
ONE      DC    PL1'1'
BLANKS   DC    C'       '
PARMLIST DS    0F                                                   FCI
         DC    A(H2DATE)                                            FCI
         DC    XL1'80',AL3(H2TIME)                                  FCI
JFCBAREA DS    0D                                                   FCI
         DC    176X'00'                                             FCI
         ORG   JFCBAREA                                             FCI
JFCBDSNM DS    CL44                                                 FCI
         ORG   JFCBAREA+44                                          FCI
JFCBELNM DS    CL8                                                  FCI
         ORG   JFCBAREA+86                                          FCI
JFCBIND1 DS    XL1                                                  FCI
JFCPDS   EQU   X'01'                                                FCI
         ORG   JFCBAREA+118                                         FCI
JFCBVOLS DS    CL30                                                 FCI
         ORG   ,                                                    FCI
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
IGASMS   DC    A(DFTIG,ENDDFTIG)        DEFAULT IGNORE TABLE        ABL
DFTIG    DC    CL80'         EJECT   '                              ABL
         DC    CL80'         SPACE   '                              ABL
         DC    CL80'         SPACE 1 '                              ABL
         DC    CL80'         SPACE 2 '                              ABL
         DC    CL80'         SPACE 3 '                              ABL
         DC    CL80'*                '                              ABL
ENDDFTIG EQU   *                                                    ABL
         LTORG
         DROP
       TITLE   'DATTIM - A ROUTINE TO GET THE DATE AND TIME'
*          DATA SET S051B29    AT LEVEL 001 AS OF 03/09/77
S051B29  CSECT
         ENTRY DATTIM
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*       THIS SUBROUTINE OUTPUTS DATE AND TIME OF DAY WHEN             *
*       CALLED BY THE STATEMENT                                       *
*                                                                     *
*            DATTIM (MDY,HMS)                                         *
*                                                                     *
*            MDY - THE FIRST OUTPUT ARGUMENT CONTAINING DATE IN       *
*                   MM/DD/YY FORMAT, WHERE                            *
*                        MM - MONTH OF THE YEAR (2 DECIMAL DIGITS)    *
*                        DD - DAY OF THE MONTH                        *
*                        YY - LAST TWO DIGITS OF THE YEAR             *
*                                                                     *
*            HMS - THE SECOND OUTPUT ARGUMENT CONTAINING TIME IN      *
*                   HH:MM:SS FORMAT, WHERE                            *
*                        HH - HOUR OF THE DAY (2 DECIMAL DIGITS)      *
*                        MM - MINUTES                                 *
*                        SS - SECONDS                                 *
*                                                                     *
*       NOTE - ARGUMENTS MUST EACH BE ABLE TO CONTAIN 8 CHARACTERS    *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         SPACE  5
         USING  *,15
DATTIM   SAVE   (14,12)
       LR    4,1                       ARGLIST ADDRS NOW IN R4
         LA     12,SAVEAREA
         ST     13,4(12)
         ST     12,8(13)
         LR     13,12
         LR     12,15
         DROP   15
         USING  S051B29,12
         TIME  DEC                      MACRO-INST GIVES DATE IN REG1,
*                                       TIME IN REGO FORMATTED 00YYDDDC
*                                       AND HHMMSSTH RESPECTIVELY
         LM     2,3,0(4)                SAVE ARGS
         ST    0,TIMET
         OI    TIMET+3,X'0F'            INSERT DECIMAL SIGN
         MVC   WKAREA(9),PTTRN          SET UP FOR EDITING
         ED    WKAREA(9),TIMET
         MVC   0(8,3),WKAREA+1          SEND TIME TO CALLER
         ST    1,TIMET
         MVO   TEMP,TIMET+1(1)          PREPARE FOR CONVERSION
         OI    TEMP+7,X'0F'             INSERT SIGN
         UNPK  DATEN+6(2),TEMP+6(2)     FORMAT YY IN DATEN
         CVB    9,TEMP                  CONVERT YY TO BINARY
         STC    9,YEAR
         TM    YEAR,X'03'               LEAP YEAR
         BC      5,*+10                 NO
         MVC   TABLE+4,=H'29'           MODIFY TABLE
         MVC   TEMP,=D'0'               ZERO TEMP
         MVC   TEMP+6(2),TIMET+2        PREPARE TO CONVERT DDD
         CVB   11,TEMP                  CONVERT DDD TO BINARY
         LA    10,2                     INITIALIZE INDEX REG OF TABLE
LOOPDATE SH    11,TABLE(10)             SUBTRACT DAYS OF MONTH(INDEXED)
         BC    12,CHECK                 RESULT ZRO OR NEGATIVE
         LA    10,2(0,10)               INCREMENT INDEX BY 2
         CH    10,=H'26'                ERROR
         BC    12,LOOPDATE              NO
         B     DATERROR
CHECK    AH    11,TABLE(10)
         CVD   11,TEMP                  DD NOW IN PACKED DECIMAL
         OI    TEMP+7,X'0F'             INSERT SIGN
         UNPK  DATEN+3(2),TEMP+6(2)     DD IN BCD - PLACE IN DATEN
         SRA   10,1                     MONTH NOW IN REG 10
         CVD   10,TEMP                  CONVERT MONTH TO PACKED DECIMAL
         OI    TEMP+7,X'0F'             INSERT SIGN
         UNPK    DATEN(2),TEMP+6(2)     MM IN BCD - PLACE IN DATEN
         MVC   0(8,2),DATEN             SEND DATE TO CALLER
         B     RESTORE
DATERROR MVC   DATEN(8),=C'ER/RO/R '
RESTORE  L      13,4(13)
         MVI   12(13),X'FF'
         RETURN (14,12)
*
TEMP     DS    D
TIMET    DS    F
TABLE    DS    H
         DC    H'31'
         DC    H'28'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'31'
         DC    H'30'
         DC    H'31'
         DC    H'30'
         DC    H'31'
SAVEAREA DS     18F
WKAREA   DS    CL9
PTTRN    DC    X'4021217A21217A2121'
DATEN    DC    C'  /  /  '
         DS     C
YEAR     DS    C
         LTORG
*        END
CMPRSEQ  CSECT
         END CMPRSEQ
