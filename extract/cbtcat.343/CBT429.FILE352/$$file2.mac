./       ADD   NAME=$$DASD
 DOCUMENTATION FOR FCI DASD MANAGEMENT SYSTEM (DASDMON)  APR 2 81

 THE DASD MANAGEMENT SYSTEM AT FCI WAS DEVELOPED BEGINNING IN 1978 TO
 POLICE REAL DASD.  BASIC PREMISE WAS THE 'SWORD OF DAEMOCLES'
 APPROACH:  IF THE DATASET IS FOUND ON DISK AND NOT AUTHORIZED, IT WILL
 BE SCRATCHED.  TO PROVIDE A MODICUM OF SAFETY, THE SCRATCH IS DEFERRED
 FOR 1 WORKING DAY TO LET PEOPLE 'SAVE' THEIR FAVORITE DATASET.

 THE BASIC SYSTEM FLOW IS AS FOLLOWS:

  1) THE GRANT FILE IS SORTED BY DSNAME AND MSVGP AND VOLSER SEQ.
  2) THE VOLUMES TO BE EXAMINED ARE MAPPED BY MAPDISK PGM, AND THE
     RESULTING LOG DATASET IS ALSO SORTED BY DSNAME, MSVGP AND VOLSER.
  3) THE GRANT AND LOG FILES ARE MATCH/MERGED TO DETERMINE DATASET
     STATUS (BY P963P00 PROGRAM). FATAL OFFENCES ARE SIGNIFIED BY
     GENERATION OF SCRATCH CARDS FOR DATASETS TO BE DESTROYED ONE
     WORKING DAY LATER.
  4) NEXT DAY, THE SCRATCH PGM (P963P02) RUNS TO OFF THE TURKEY
     DATASETS AND LEAVE THE DISKS CLEAN AND SPARKLING.


 OPERATION OF THE SYSTEM IS AS FOLLOWS:

 THE SPACE MANAGER RECEIVES REQUESTS FOR SPACE IN THE FORM OF
   DATASET NAME, TRACKS REQUESTED, EXPIRE DATE (FOR TESTING DATASETS),
   AND TARGET VOLSER FOR DATASET (OR MASS STORE MSVGP).

THE SPACE MANAGER ENTERS THE INFORMATION IN THE 'GRANT' FILE (AN 80
   BYTE LRECL DATASET, WITH ONE ENTRY PER 'CARD').

  THE FORMAT OF A GRANT IS AS FOLLOWS:
                                                  _DSORG
                                                  × _UNCAT OK='Y'
                                                  × ×             GRANT
                                            DASD  × ×      BILL   EXPIRE
    DSNAME  OR GENERIC DSN WITH # DSNS      VOLUME× × TRKS TO     MMDDYY
×<---------------------------------------->×<----><>×<---><------><---->
$5A0BUD.DIR10.DATA                          PRODX3PS     2   00810
$5CONT3.FCI3.A00305.F0305.F099                    PS    90   00305
$5NCA1.L060.M4MSTR.DATA.* 3                       PS    19   SOPOR
$5P1.MASTER.COBOL                           PRODX1PO   619   00820110178

  EXPLANATION OF SAMPLES:
   1) GRANT SPECIFIC DSN ON VOLUME PRODX3 FOR 2 TRACKS   BILL TO SYSTEM
   2) GRANT SPECIFIC DSN TO ANY VOLUME IN PROD3 MSVGP FOR 90 TRACKS, BIL
   3) GRANT GENERIC DSNS TOTAL OF 3, EACH 19 TRACKS TO ANY VOLUME IN
      THE PROD1 MSVGP
   4) GRANT SPECIFIC DSN ON VOLUME PRODX1 FOR 619 TRACKS UNTIL 11/1/78.

  NOTE: A MSVGP ENTRY PRECLUDES AN ENTRY FOR A SPECIFIC VOLUME.
        A 'Y' AFTER THE DSORG AREA MEANS UNCATLGED DSN IS 'OK' OTHERWISE
          SUCH AN OFFENSE DEMANDS CAPITAL PUNISHMENT ON THE DATASET.


 THE MSVGP IS A HANDY WAY TO GRANT SPACE FOR A DATASET ON ANY VOLSER
 WITHIN THE GROUP.  FOR NON-MSS SHOPS,  THE MSVGP MAY BE A ARTIFICIAL
 GROUP OF VOLUME SERIAL NUMBERS.  (SEE SECTION ON SPECIFYING VOLUMES TO
 BE MONITORED LATER).

 VOLUMES TO BE MONITORED ARE CONTROLLED BY TWO METHODS:

  1) FOR MASS STORAGE VOLUMES, THE P963P30 PROGRAM WILL LOOKUP IN THE
     MASS STORAGE VOLUME INVENTORY AND SPIT OUT VOLUME RECORDS FOR ALL
     GENERAL USE, NON EMPTY VOLUMES FOR LATER USE BY MAPDISK.
  2) FOR REAL DASD VOLUMES, CARDS IN THE SAME FORMAT AS THOSE PRODUCED
     BY P963P30 ARE USED TO SPECIFY THE VOLUMES TO MONITOR.
  3) THE TWO TYPES ARE MERGED AND DUPLICATE VOLUME ENTRIES ARE
     ELIMINATED BY THE P963P35 PROGRAM SO THAT MAPDISK ONLY HAS TO
     MOUNT AND LOOK AT THE VTOC OF EACH VOLUME ONCE.

 THE FORMAT OF THE CARDS TO CONTROL THE MSVI LOOKUP PGM (P963P30) ARE:
   *               <=COMMENT CARD
   MSVGP=.......   <=SELECT ALL VOLUMES IN A MASS STORAGE VOLUME GROUP
   VOL=......      <=SELECT A SINGLE VOLUME (RESTRICTED OR GENERAL)

  EXAMPLES:

*
* MASS STORAGE VOLUMES FOR MONITORING ON MON, WED, AND FRI
*
MSVGP=D1500
MSVGP=D2200
MSVGP=D3500
MSVGP=PROD1
MSVGP=PROD13

  OUTPUT OF P963P30 LOOKS LIKE THIS:

MS00203330V   PROD2                  GEN USE VOLUME FOR PROD2      WILLI


   THE REAL DASD VOLUMES TO BE MONITORED HAVE CARDS LIKE:
                      _______________
                      ×  RESERVED   ×
VOLUME  UNIT   MSVGP  ×             ×   DESCRIPTION                 OWNE
<----><------><------><---><---><---><----------------------------><----
PRODX13350                           PRODUCTION REAL DASD          WILLI
PRODX23350                           PRODUCTION REAL DASD          WILLI
PRODX33350                           PRODUCTION REAL DASD          WILLI
PRODX43350                           PRODUCTION REAL DASD          WILLI
PRODX53350                           PRODUCTION REAL DASD          WILLI
PRODX63350                           PRODUCTION REAL DASD          WILLI
PRODX73350                           PRODUCTION REAL DASD          WILLI
PRODX83350                           PRODUCTION REAL DASD          WILLI
PRODXB3350                           PRODUCTION REAL DASD          WILLI
IMSP013350                           IMS PRODUCTION/TEST VOLUME    WILLI
IMSP023350                           IMS PRODUCTION/TEST VOLUME    WILLI
FCIMVS3330-1                         MVS SYSTEM RESIDENCE VOLUME   ARAFI
SPOOL23350                           JES2 SPOOL SPACE-TEST DSNS    WILLI


 THE MSS VOLS AND REAL DASD VOLS ARE READ BY P963P35 TO ELIMINATE ANY
 DUPLICATE VOLUME ENTRIES, THEN THE RESULTANT LIST IS FED TO MAPDISK
 FOR MAPPING THE VTOCS.

 THE RESULTANT VTOC LIST IS SORTED BY DSNAME, MSVGP AND VOLUME, THEN
 READ BY P963P00 TO DETERMINE VALIDITY OF DATASETS.  P963P00 PUTS OUT
 SCRATCH CARDS FOR ALL DATASETS POSSESSING A FATAL FLAW.


 CONTROL CARDS FOR P963P00 ARE AS FOLLOWS:

*
*  STANDARD DEFAULT RUN DECK FOR DAILY DASD MONITOR PROGRAM
*
 SCRATCH  OPTIONS=(UNAUTHED,UNCATLGD,PASTRETPD),;
          INDAYS=1
 TITLE ;
   'DAILY RUN OF 963 SYSTEM .. DATASETS MUST BE AUTHORIZED BY 3:00 ;
    P.M. ON THE SCRATCH DATE TO PREVENT SCRATCHING'

   NOTE: LINES ARE CONTINUED BY A TRAILING SEMICOLON.
         '*' IN COL1 IS A COMMENT LINE.

 SEE THE CODE OF P963P00 FOR OTHER OPTIONS AND HOW TO SPECIFY THEM...


 TO SEE HOW THIS ALL RUNS LOOK AT THE FOLLOWING MEMBERS IN JOBS.CNTL:

    J963A001  - JOB TO RUN DAILY DASD MGMT SYSTEM
    C963A001  - PROC FOR DAILY DASD MGMT SYSTEM
    S963....  - CNTL CARDS FOR DAILY DASD MGMT SYSTEM

 IN INSTALL.CNTL:

    P963P.... - PL/I PROGRAMS FOR DASD MGMT SYSTEM
    R963A.... - ASSEMBLER PROGRAMS FOR DASD MGMT SYSTEM
    MAPDISK   - ASSEMBLER PGM TO MAP DASD VOLUMES.

 NOTE BENE:

 MANY OF THE FEATURES OF THIS SYSTEM DEPEND HEAVILY ON THE ASM2 SYSTEM
 OPEN MOD (FROM CAMBRIDGE SYSTEMS GROUP) TO TIME/DATE/USE STAMP THE
 FORMAT 1 DSCB ON DISK.  THE 'UNUSED' AND 'PASTRETPD' FEATURES REQUIRE
 THE ASM2 'STAMPED' FMT1 DSCB TO OPERATE.  IF MODS ARE MADE TO MAPDISK7
 (GETATTR), I'M SURE THAT THE SU60 FORMAT STAMPING COULD BE MADE TO
 SERVE, HOWEVER, THE LAST MOD TIME AND USER INFO WOULD BE LOST.   WE
 CAN'T SHIP OUT OUR OPEN MOD SINCE IT HAS (C) CAMBRIDGE SYSTEMS GROUP
 STAMPED ALL OVER IT.






./       ADD   NAME=$$GENTAP
//MODSTAPE JOB (MVS19200,0169),'MILTON SOONG',CLASS=W,MSGCLASS=X,
//             NOTIFY=MVS#MKS,COND=(0,NE)
//*********************************************************************
//*
//* GENERATE INTEL MODS TAPE
//*
//*
//*  K TRUE   31 JUL 79
//*  K TRUE   04 APR 81    - USE BKUPUTIL TO UNLOAD TAPE
//*  M SOONG  09 DEC 86    - ADD BLKPRINT TITLE PAGE JCL
//*********************************************************************
//TITLE   EXEC PGM=INTELBLK,PARM='  INTEL,MODS TAPE,  AS OF,12/09/86'
//SYSPRINT DD SYSOUT=*
//*
//GENER   EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DUMMY
//SYSUT1   DD  DSN=TECH.INTEL.MODS.INSTALL.CNTL($$RELOAD),DISP=SHR
//SYSUT2   DD  DSN=TEMP.NTLMODS.INSTJCL,DISP=(,PASS),
//             UNIT=TAPE,LABEL=(1,SL,EXPDT=98000),
//             VOL=(PRIVATE,RETAIN,SER=NTLMOD),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=8000)
//*
//GENER1  EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DUMMY
//SYSUT1   DD  DSN=TECH.INTEL.MODS.INSTALL.CNTL($$INDEX),DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.INSTALL.CNTL($$RELOAD),DISP=SHR
//SYSUT2   DD  SYSOUT=*,
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)
//*
//*
//BKUPUTIL EXEC PGM=BKUPUTIL
//*
//TAPE     DD  UNIT=TAPE,DISP=(NEW,PASS),
//             DSN=TEMP.BACKUP.TAPE,
//             LABEL=(2,SL,EXPDT=98000),
//             VOL=(PRIVATE,REF=*.GENER.SYSUT2)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,2)
//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,2)
//SYSIN    DD  UNIT=SYSDA,SPACE=(TRK,5)
//MOVPRINT DD  UNIT=SYSDA,SPACE=(CYL,2)
//OUTPUT   DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*,DCB=RECFM=FB
//DUMMY    DD  DUMMY
//SYSUDUMP DD  SYSOUT=*
//INPUT    DD  *
     TECH.INTEL.MODS.INSTALL.CNTL
     TECH.INTEL.MODS.JOBS.CNTL
     TECH.INTEL.MODS.SOURCE
     TECH.INTEL.MODS.HELP
     TECH.INTEL.MODS.TECHINFO
     TECH.INTEL.MODS.SASLIB
     TECH.INTEL.MODS.NETINFO
//AFTER   EXEC PGM=IEFBR14
//
./       ADD   NAME=$$INDEX
 DOCUMENTATION FOR INTEL MODS TAPE VERSION 1.12    (09 DEC 86)

        VERSION 1.12     DEC  09 1986
                UPDATED  OSDEBE WITH AN A VERSION THAT WILL RUN UNDER
                         MVS/XA.  THIS VERSION WILL ALSO RUN UNDER
                         MVS/SP.
                UPDATED  TRIM TSO COMMAND TO RELEASE UNUSED SPACE FROM
                         A DATASET.
                UPDATED TSO029 (DASDMAP) TO SUPPORT 3380 AND INDEXED VTO
                        (REQUIRES IXTOFMT5 CONVERT ROUTINE) (XA VERSION)
                UPDATED TSO042 (DUNITS COMMAND) FOR UCBLOOKUP W/MVS/XA
                UPDATED TSO012 (LSPACE TSO COMMAND) TO RUN UNDER MVS/XA.
                UPDATED TSO013 (DTAPES TSO COMMAND) TO RUN UNDER MVS/XA.
                        THE DTAPES COMMAND WILL DISPLAY THE STATUS OF
                        TAPE UNITS.
                UPDATED TSO020 (DJ TSO COMMAND) TO RUN UNDER MVS/XA.
                        THE DJ COMMAND DISPLAYS THE STATUS OF ALL BATCH
                        JOBS RUNNING IN THE SYSTEM.
        VERSION 1.11     JUL  14 1983
                REPLACED OLD QUEUE COMMAND (Q0-Q29) WITH SP3 VERSION
                        WITH INTEL MODS (SEE 'QUEUEDOC' IN INSTALL.CNTL.
                UPDATED DELETDS UTILITY - MINOR TWEAKS + UCBLOOKUP CHGS
                UPDATED MAPDISK FOR 3380 SUPPORT + UCBLOOKUP CHGS
                        CHG MAPDISK7 TO NOT FORCE OPER MOUNT FOR UNMOUNT
                        VOLS. (SPACE MAP DOES NOT WORK ON INDEXED VTOCS)
                UPDATED PROCXREF - FIX CPU LOOP WHEN NO // PROC STMT
                UPDATED SUPERSCR - SET FOR 8HR LIFE FOR DATASETS
                ADDED   TSO029 (DASDMAP) TO SUPPORT 3380 AND INDEXED VTO
                        (REQUIRES IXTOFMT5 CONVERT ROUTINE)
                ADDED   IXTOFMT5 SUBROUTINE WRITTEN BY CHRIS THOMAS OF
                        UCLA/OAC (FROM CBT TAPE) - GENERATES LIFELIKE
                        FMT5DSCBS FROM AN INDEXED VTOC VIA CVAF MACROS
                        (USED BY TSO029/DASDMAP COMMAND)
                UPDATED TSO042 (DUNITS COMMAND) FOR UCBLOOKUP W/SP1.3
                UPDATED TSO051 (GETINFO COMMAND) FOR JES2 SP1.3 AND
                        ACF2 3.1.3
                ADDED   VTOC TSO COMMAND
        VERSION 1.10     FEB  28 1983
                UPDATED PSN... SYSTEM TO ENFORCE INTEL STANDARDS AND
                        ADDED TECHINFO/HELP DESCRIPTIONS FOR PSN
                ADDED   PROCXREF (PROCLIB CROSS REFERENCE) BASED ON
                        OLD SHARE PROCXREF FROM SHARE MODS TAPE.
                ADDED   NTLM801,NTLM802 PDS DIRECTORY/MEMBER READ
                        SUBROUTINES (USED BY PROCXREF).
                UPDATED DIDOCS TO SUPPORT SP1/SP3 VIA ASSEMBLY TIME
                        OPTION (&SP3 BIT FLAG).
                UPDATED ACFDSTBL ACFVAL ACFVIOX
                        FOR NEW ACF2 NAMING CONVENTIONS SUPPORT AND
                        SUPPORT FOR NEW 'OPSANLST' CLASS OF USER.
                        SOURCE HAS 'USERCFDE' AND 'USERLID' ENTRIES
                        FOR THIS SUPPORT FOR ACF2 REL 3.1.3
        VERSION 1.9      SEP  16 1982
                UPDATED VBUILD MACRO IN MODS.NETINFO
                ADDED   NETINFOS TO MODS.SASLIB (MISSING FROM VER 1.8)
        VERSION 1.8      SEP  08 1982
                ADDED   PANFETCH UTILITY - GET SINGLE MEMBER FROM PV LIB
                ADDED   NETINFO JOBS/SAS PGMS TO DOCUMENT ACF/VTAM,
                        CICS, ADMPRINT, DSPRINT NETWORK CONFIG INTO AN
                        INFO/SYSTEM FORMAT.
                ADDED   LIBRARIES TO THE TAPE:
                        TECH.INTEL.MODS.SASLIB - SAS PROGRAMS
                        TECH.INTEL.MODS.NETINFO - SPECIAL NCP MACROS+
                            CICS MACROS FOR THE NETINFO JOB SYSTEM.
        VERSION 1.7      AUG  15 1982
                ADDED   SHOSMFSP (MVS SP1 OR SP3 VERSION OF SHOWSMF)
                UPDATED GETINFO COMMAND (TSO051)
                UPDATED OZPDSUNL TO FIX MINOR BUGS.
                UPDATED TECINFOX JOBS FOR TECHINFO SYSTEM.
        VERSION 1.6      FEB  02 1982
                NEW 'KEEPER' FOR MODS TAPE - KEN TRUE, INTEL CORP.
                UPDATED QUEUE COMMAND TO PROVIDE SUPPORT FOR 3278/79
                        MODELS 2, 3, 4, AND 5.
                        LOTS OF NEW FEATURES INCLUDING 'HD' AND 'DN'
                        CMDS.
                ADDED   GETINFO COMMAND (TSO051)
                UPDATED DIDOCS COMMAND - NOW HAS CONSOLE SWITCHING, AND
                        HI/LOW INTENSITY OPERATION.
                UPDATED CHIMP (TSO045) FOR MVS/SP OPERATION
                ADDED   OZPDSUNL UTILITY - UNLOADS VB PDS INTO INFOSYS
                        FORMAT (SEE 'TECHINFO' IN JOBS.CNTL)
        VERSION 1.5      APR  02 1981
                CHANGED TAPE FORMAT TO SL FROM NL (USE BKUPUTIL TO
                          GEN THE TAPE.)
                ADDED   OUR DASD MANAGEMENT SYSTEM (*963****)
                          WORKS WITH REAL DASD AND MSS - SEE $$DASD
                          FOR DETAILS.
                ADDED   PSN - OUR JCL STANDARDS CHECKER AND REFORMAT
                          UTILITY BY MIKE FARMER
                ADDED   JCLFORMT - POOR MAN'S JCL REFORMAT UTILITY.
                ADDED   DELETDS - UTILITY TO UNCAT/SCRAT TAPES/DASD DSNS
                ADDED   SEVERAL SMF UTILITY PROGRAMS TO HANDLE
                        ACF2 SECURITY SYSTEM RECORDS,
                        RACF SECURITY SYSTEM RECORDS,
                        DATASET ACCESS (TYPE 14,15,17) RECORDS
                        TSO UTILIZATION (TYPE 35 RECORDS)
                ADDED   SYSTEM SECURITY MON (V2) SAS REPORTING ON ACF2
                        ACTIVITY.
                ADDED   OUR ACF2 EXITS
                ADDED   MVSMON (FROM FLORIDA POWER AND LIGHT WITH
                        SOME FCI MODS.
                ADDED   BKUPUTIL (FROM SHARE MODS TAPE FILE18 WITH ISAM
                        AND PANVALET SUPPORT..ADDED DSN STATUS REPORTING
                ADDED   COMPMEMB - COMPARE MEMBER NAMES IN PDS OR
                        PANVALET LIBRARIES
                ADDED   MISC SUBROUTINES FOR USE BY ABOVE PGMS.
                ADDED   DDSTAR COMMAND -SPOOL CLIST TO DSN
                ADDED   $ COMMAND - INVOKE PGM FROM LINKLIST
        VERSION 1.4      AUG  27 1980
                UPDATED MSSTRACE JOB     ...   (IN MSSMODS.JOBS.CNTL)
                UPDATED TRACESAV JOB        .. THESE JOBS INCLUDE SAS
                ADDED   TRCANLZD JOB        .. VER 79.3 ANALYSIS OF
                ADDED   TRCANLZM JOB     ...   MSS TRACE
                ADDED   PANVIEW  COMMAND (TSO048)
                ADDED   SHOWRAW  PROGRAM - (USED BY MSSTRACE ANALYSIS)
                ADDED   SPACEZAP STC - 'FIX' DOWN-LVL SPACE MSS VOLS
        VERSION 1.3      JUL  23 1980
                UPDATED QUEUE COMMAND TO REL3 FROM TRW;
                              INCLUDED FCI WRITTEN JOB HIST COMMAND
        VERSION 1.2      MAR  17 1980
                ADDED  QUEUE COMMAND
                ADDED  SCOMPARE UTILITY
                ADDED  DIDOCS COMMAND
                ADDED  CHIMP  COMMAND (TSO045)
        VERSION 1.1      JAN  19 1980
                UPDATED SOURCE ON UCBZAP
                ADDED TSO044 (UCBUNLD)
        VERSION 1.0      JULY 31 1979 (FAIRCHILD MSSMODS TAPE....)
 ***********************************************************************
 * THIS TAPE IS BASED ON THE OLD FAIRCHILD CAMERA AND INSTRUMENT MSSMOD*
 * TAPE.  AS THE 'KEEPER OF THE TAPE' HAS MIGRATED TO INTEL CORPORATION*
 * SUPPORT (SUCH AS IT IS) HAS MIGRATED TO INTEL.  KEN TRUE - 2 FEB 82 *
 ***********************************************************************
 * NOTE: ALL OF THESE PROGRAMS OR MODS ARE SUPPLIED ON AN "AS-IS" BASIS*
 * NO WARRANTY, EITHER EXPRESSED OR IMPLIED, IS ISSUED BY INTEL CORP   *
 * AS TO THE FUNCTION OR CORRECTNESS OF THE ITEMS CONTAINED HEREIN.    *
 *                                                                     *
 * THE USER IS CAUTIONED TO EXAMINE THE FOLLOWING MODS/PROGRAMS FOR    *
 * APPLICABILITY IN THEIR ENVIRONMENT.  MOST OF THE MODS WERE OPERATING*
 * MVS/SP JES2 REL 1.3 (PTF8209) WITH ACF/VTAM REL2/3                  *
 * (NOTE THE QUEUE COMMAND IS NOT UPDATED FOR SP3 VERSION OF JES2.)    *
 *                                                                     *
 *                                                                     *
 * THE MSS RELATED MODS WERE WORKING ON MVS REL 3.8 AT 8006.           *
 * (INTEL DOESN'T HAVE A 3851 MSS...)                                  *
 *                                                                     *
 * SOME OF THE MODS REQUIRE A "MAGIC" SVC TO GET IN/OUT OF SUPERVISOR  *
 * STATE.  THEY MAY BE REWRITTEN TO USE MODESET AND AUTHORIZED VIA     *
 * THE TSO IKJEFTE2/IKJEFTE8 TABLES.   THE SOURCE FOR THE SVC IS       *
 * INCLUDED AS IGC254 MSSMODS.SOURCE.  LINK TO NUCLEUS AS A TYPE 1     *
 * ENABLED SVC. (QUEUE AND DIDOCS HAVE A 'SPECIAL' VERSION OF MODESET  *
 * IN THEM TO GEN SVC254 CALLS.. RENAME INLINE MACRO TO ALLOW USE OF   *
 * 'REAL' SYSTEM MODESET MACROS.)                                      *
 *                                                                     *
 ***********************************************************************
 * MANY OF THE PROGRAMS ON THIS TAPE HAD THEIR BEGINNINGS ON THE SHARE *
 * CBT MODS TAPE, AND THE MICHIGAN MODS TAPE.  WE EXPRESS THANKS TO THE*
 * UNKNOWN (MOSTLY) AUTHORS FOR THEIR PIONEERING WORK.  WE HAVE ADDED  *
 * TO AND ENHANCED THEIR WORK TO FIT OUR ENVIRONMENT.                  *
 * THE QUEUE COMMAND IS FROM TRW, REDONDO BEACH CA.  THANKS TO STEVE   *
 * ANDERSON FOR HIS PERMISSION TO INCLUDE OUR MODIFIED VERSION ON THIS *
 * TAPE.                                                               *
 ***********************************************************************
 *                                                                     *
 *   MILTON SOONG                                                      *
 *   INTEL CORPORATION                   .                             *
 *   2770 SAN TOMAS EXPRESSWAY                                         *
 *   MAIL STOP ST3-17                                                  *
 *   SANTA CLARA, CA. 95051                                            *
 *                                                                     *
 *   TEL: (408) 987-7110                                               *
 *                                                                     *
 *   FOR A COPY OF THIS TAPE, PLEASE SEND A 2400 FOOT REEL OF TAPE     *
 *   TO THE ABOVE ADDRESS.                                             *
 *                                                                     *
 ***********************************************************************

 CONTENTS OF THE RELEASE TAPE:

   FILE1  SL     FB IEBGENER UNLOADED JOB STREAM TO RELOAD
                               THE 8 DATASETS BACK TO DISK.
                                      TECH.INTEL.MODS.INSTJCL

   FILE2  SL     VB IEBCOPY UNLOADED  TECH.INTEL.MODS.INSTALL.CNTL

   FILE3  SL     VB IEBCOPY UNLOADED  TECH.INTEL.MODS.JOBS.CNTL

   FILE4  SL     VB IEBCOPY UNLOADED  TECH.INTEL.MODS.SOURCE

   FILE5  SL     VB IEBCOPY UNLOADED  TECH.INTEL.MODS.HELP

   FILE6  SL     VB IEBCOPY UNLOADED  TECH.INTEL.MODS.TECHINFO

   FILE7  SL     VB IEBCOPY UNLOADED  TECH.INTEL.MODS.SASLIB

   FILE8  SL     VB IEBCOPY UNLOADED  TECH.INTEL.MODS.NETINFO


  TECH.INTEL.MODS.INSTALL.CNTL

     PDS: CONTAINS JCL NEEDED TO GENERATE MODS FROM SOURCE.

  TECH.INTEL.MODS.JOBS.CNTL

     PDS: CONTAINS JCL NEEDED TO RUN STARTED TASKS, AND SOME SAMPLE JOBS
          AND SAMPLE CLISTS AND CONTROL CARDS TO RUN SAMPLE JOBS.

  TECH.INTEL.MODS.SOURCE

     PDS: CONTAINS SOURCE (ASSEMBLER, PL/I OPT, SAS) FOR MODS/PROGRAMS.

  TECH.INTEL.MODS.HELP

     PDS: CONTAINS HELP FOR TSO MODULES SUPPLIED.

  TECH.INTEL.MODS.TECHINFO

     PDS: CONTAINS UNLOADED MEMBERS FOR USE WITH LOCAL INFO/SYSTEM
          DATABASE (USER FILE ENTRIES) (SAMPLES...)

  TECH.INTEL.MODS.SASLIB

     PDS: CONTAINS UNLOADED MEMBERS IN SAS CODE FOR THE NETINFO
          NETWORK DOCUMENTATION SYSTEM

  TECH.INTEL.MODS.NETINFO

     PDS: CONTAINS UNLOADED MEMBERS FOR USE WITH 'VTAMDOC' 'CICSDOC'
          JOBSTREAMS TO ASSEMBLE THE NCP, + CICS TCT ENTRIES FOR
          NETINFO.


  THE FOLLOWING IS AN INDEX OF JOBS IN INSTALL.CNTL, WITH A DESCRIPTION
  OF WHAT EACH PROGRAM DOES.  IF '**' APPEARS IN THE 'SV' COLUMN, THAT
  MEANS ONE OR MORE OF THE PROGRAMS USES THE MAGIC SVC 254, AND MAY HAVE
  TO BE REFITTED TO WORK IN YOUR ENVIRONMENT.

 MEMBER   SV LANG  DESCRIPTION
 ________ __ ____  ____________________________________________________
 $$GENTAP    N/A   JCL USED TO GENERATE THIS TAPE.
 $$INDEX     N/A   THIS MEMBER --INDEX OF CONTENTS OF INSTALL.CNTL
 $$RELOAD    N/A   JCL TO LOAD DOWN TAPE TO DISK -- ALSO APPEARS AS FILE
                     1 ON THE TAPE.
 ABEND       BAL   SUBROUTINE-ISSUE USER ABEND WITH CODE OF YOUR CHOICE
 ABENDPGM    BAL   PGM TO WTOR FAILURE MESSAGE (VIA PARM FIELD) WHEN
                     YOUR FAVORITE JOB FAILS..REQUIRES OPERS TO ACK-
                     NOWLEDGE MESSAGE WITH JOBNAME.
 ACFEXITS    BAL   THIS IS 2 SMP JOBS TO INSTALL OUR EXITS FOR ACF2.
                   ACFVAL AND ACFDSTBL CONSTITUTE OUR NAMING CONVENTIONS
                   SUPPORT AT INTEL. ACFVIOX IS OUR VIOLATION EXIT TO
                   SUPPORT PHASED IMPLEMENTATION OF RULES.
 ACF2MON     SAS   THIS SAS 79.3 PROGRAM READS SMF RECORDS FOR ACF2
                   EVENTS- MATCH MERGES SEVERAL 'WHODAT' FILES AND
                   PRODUCES A COMPOSITE REPORT ON ALL ACF2 ACTIVITY FOR
                   EACH GROUP SECURITY ADMINISTRATOR..(BY HENRY WACKER)
 ANLZUCB     PL/I  GEN REPORT ON WORK PACK USAGE/MSS UCB USAGE
                   REQUIRES P051B12L (UCBLOGER) TO GATHER INFO.
 BKUPUTIL    BAL   PGM FROM SHARE MODS TAPE (FILE18) TO INVOKE UTILITY
                     TO CREATE STACKED SL TAPE.  OUR MODS INCLUDE AUTO
                     SELECT FOR IEBISAM AND PANVALET SUPPORT VIA PAN#2.
                     DYNAMIC ALLOC OF VOLUMES, AND DATASET/TAPE DS STATS
                     ARE ALSO PRINTED.  MUST BE LINKED WITH AC=1 TO
                     ALLOW IEBCOPY TO FUNCTION. (SUPPORTS PS/PO/IS/DA/PV
 COMPMEMB    PL/I  COMPARE MEMBERS IN PDS OR PANVALET LIBRARIES BY MEM-
                     BER NAME AND PRODUCE CNTL CARDS BASED ON EXISTENCE
                     OF MEMBER IN EITHER OR BOTH LIBRARIES.
 DATTIM      BAL   SUBROUTINE- RETURNS 'HH:MM:SS' AND 'MM/DD/YY'
 DELETDS     BAL   UTILITY- UNCATLG TAPES AND UNCATLG/SCRATCH DATASETS
                     SUPPORTS MSS VIA DYNAMIC ALLOC OF MSS VOLUMES.
 DIDOCS   ** BAL   TSO COMMAND TO ALLOW TSO 3270 TO BECOME A OS OPER
                     CONSOLE.  FINDS MCS BUFFERS IN CSA AND REDISPLAYS
  (SP1 OR SP3)       THEM TO TSO TUBE.  ACCEPTS COMMANDS AND USES SVC 34
                     TO ISSUE THEM. FROM SHARE DCMS SYSTEM (CBT).
 DSINFO      BAL   PL/I SUBROUTINE- GET DSN INFORMATION VIA RDJFCB
                     (FROM IIH, ISREAL)
 ERAS3270    BAL   TSO COMMAND- ERASE A 3270 SCREEN (WITH SPF TRIGGERS).
 FCIMOD07    BAL   FROM FLORIDA POWER AND LIGHT- THEIR FULL SCREEN FAC.
                     WITH FCI ADDED SPF FULLSCRN TRIGGERS.
 FSF         BAL   FROM FLORIDA POWER AND LIGHT- THE LINKABLE PORTION
                     OF THEIR FULL SCREEN FACILITY-INVOKES FCIMOD07
 HEXCONV     BAL   PL/I SUBROUTINE- CONVERT CHAR/BIT/ETC TO HEX CHAR
                     (FROM IIH, ISREAL)
 IEECVXIT    BAL   OUR MODS TO MSSCVXIT IN SYS1.SAMPLIB.. CAUSE OTHER
                     MESSAGES (IFG...) TO 'HANG' ON SCREENS, SUBMIT
                     JOB TO DUMP TRACE WHEN TRACE SWITCH OCCURS.
                     (ONLY SOURCE SUPPLIED...NO JCL TO INSTALL)
 IPOUPDTE    SZAP  SIMPLE ZAP TO LET IPO AID (IPOUPDTE) WORK ON ANY
                     JCL OR SOURCE PDS.
 JCLFORMT    BAL   UTILITY TO REFORMAT A JOB OR A PROC INTO SOME KIND
                     OF ORDER. INVOKED BY 'CLEANJCL' CLIST IN JOBS.CNTL
 MAPDISK  ** BAL   GOOD OLD MAPDISK WITH ENHANCEMENTS:
                    1) DYNAMIC ALLOC FOR MSS VOLUMES (SEE P963P30)
                    2) CAPABILITY TO LOG VTOC INFO TO DATASET
                    3) ASM2 OPEN MOD AND RACF SUPPORT
 MOP      ** BAL   ALLOW OPER PRIV TSO USER TO DO MVS/JES2 COMMANDS
                   THE COMMAND IS LOGGED, ALONG WITH THE ISSUING TSO UID
 MSSAMS      BAL   THE IPO MSSAMS AID, WITH A NOTIFY= AND COND CODE CHK
 MSSDUMP     PL/I  PGM TO DUMP MSS TABLES IN A NEAT FORMAT (FROM FVT)
 MSSPDATE    BAL   PGM TO WRITE A NICE DATE TO THE MSS LOG CONSOLE
                     INVOKE VIA A JES2 $TA,I=1800,'$VS,''S MSSPDATE'''
 MSSTSO      BAL   IPO MSSTSO WITH A FEW CHANGES FOR 3330-1 SUPPORT
 MSSVOL      PL/I  INVOKED BY MSVGP CLIST IN JOBS.CNTL- LIST VOLUMES
                     IN MSVI FOR MSVGPS OF YOUR CHOICE.
 MVSMON      BAL   FROM FLORIDA POWER AND LIGHT-MVS MONITOR USES TSO
                     FULL SCREEN.  WE  ADDED DIDOCS INVOKE VIA THE
  (NOT FOR SE2/SP1)  'CO' COMMAND, DOMAIN NAME DISPLAY, DISP DISK
                     FORMAT IMPROVEMENTS AND ELIM DUP VOLUME REPORTING
                     VIA UCB ALT PATH PLUS OTHER THINGS.....
 NETINFO     JCL/SAS   THE JOB IS PART OF THE 'VTAMDOC', 'CICSDOC',
                    'NETINFO' JOBS WHICH WILL ASSEMBLE THE VTAM NCP
                    AND CICS TCT USING MACROS IN MODS.NETINFO.    THE
                    NETINFO JOB USES A SAS PROGRAM (IN MODS.SASLIB)
                    TO READ THE ASSEMBLED VTAM, CICS, ADMPRINT, DSPRINT,
                    AND WHATNOT TABLES TO PRODUCE A DOCUMENT OF THE
                    NETWORK IN INFO/SYSTEM FORMAT.

      COMPONENTS OF 'NETINFO' ARE:
  JOBS IN JOBS.CNTL: NETINFO, VTAMDOC, CICSDOC
  SAS PGMS IN MODS.SASLIB: NETINFO, NETMEMO
  SAMPLE OUTPUT FROM OUR PEP IS IN MODS.TECHINFO(U092091).

 NTLM801     BAL   PDS MEMBER LOGICAL READ SUBROUTINE.  USED BY
                     PROCXREF PROGRAM.
 NTLM802     BAL   PDS DIRECTORY READ SUBROUTINE.  USED BY PROCXREF.
 OSDEBE   ** BAL   THE INFAMOUS 'DOES EVERYTHING BUT EAT' UTILITY FOR
                     FIDDLING WITH TAPES AND CARDS.  OPERS L O V E  IT.
                     WORKS ONLY WITH OFFLINE TAPES...................
                     INVOKE VIA 'DEBE' IN JOBS.CNTL.
 OZPDSUNL    BAL   THIS PROGRAM WILL UNLOAD A RECFM=VB PDS AND CONSTRUCT
                     A SEQUENTIAL DATASET FOR USE BY THE BLGOZX (INFO/
                     SYSTEM) PROGRAMS.  USED AT INTEL TO GENERATE A
                     USER DATABASE FOR TECHNICAL INFORMATION.  SEE JOBS
                     'TEC.....' IN JOBS.CNTL FOR MORE INFO.
 PANFETCH    BAL   USES THE PANVALET ACCESS METHOD (PAM) TO WRITE A
                     MEMBER OF A PANVALET LIBRARY TO A SEQUENTIAL DSN
                     EXPANDING ALL IMBEDDED ++INCLUDE CARDS.  USED
                     IN THE 'CICSDOC' JOB.
 PANSCAN     PL/I  THIS IS A MORE USEFUL VERSION OF THE 'PAN#8' PROGRAM
                     TO SCAN A PANVALET LIBRARY FOR OCCURANCES OF
                     PARTICULAR CHARACTER STRINGS.  THIS PL/I VERSION
                     IS A BIT SLOWER THAN PAN#8, BUT OPENS THE LIBRARY
                     FOR INPUT ONLY (INSTEAD OF UPDATE), AND ALLOWS
                     MULTIPLE SCAN PASSES AND GENERIC MEMBER SELECTION.
 PROCXREF    BAL   READS A JCL PROCLIB AND PRODUCES 3 REPORTS:
                     CROSS REF BY DATASET NAME
                     CROSS REF BY PROGRAM NAME
                     CROSS REF BY SYSOUT CLASS/FORMS
                     PROCXREF ALSO UNLOADS THE LIBRARY TO A SEQUENTIAL
                     FILE FOR FURTHER PROCESSING VIA SAS PGM 'PROCANLZ'
                     (REQUIRES NTLM801,NTLM802 PDS READ ROUTINES).
 PSN         BAL   THIS IS OUR JCL STANDARDS CHECKER AND JCL REFORMATTER
                     PROGRAM.  OBVIOUSLY YOU WON'T WANT TO USE OUR STDS
                     FOR JCL, BUT THIS PGM IS HIGHLY MODULAR AND
                     INCLUDES A LOT OF NEAT CODE BY MIKE FARMER. IT WILL
                     BE EASY FOR YOU TO INSERT YOUR OWN JCL FOIBLES IN
                     THIS GEM..
                     SEE 'U000065' IN INTEL.MODS.TECHINFO FOR OPERATION
                     DESCRIPTION. ALSO 'PROCSCAN' IN INTEL.MODS.HELP.
 P051B10     BAL   THE TSO WHOGOT/DSN COMMAND --RUNS AS STC ALSO
                     FINDS USERS/JOBS ENQUEUED ON A DATASET.
 P051B12     BAL   THE TSO DSPACE COMMAND -RUNS AS STC ALSO
                     DOES LSPACE TO PACK(S) OF CHOICE AND FORMATS
                     RESULT . DEFAULT PACKS ARE 'FCITS*'.
 P051B12L    BAL   THE UCBLOGER STC - FIRE OFF AT 10 MINUTE INTERVALS
                     VIA JES2 $TA,I=600,'$VS,''S UCBLOG''' AND ONCE A
                     WEEK RUN THE SAVELOG JOB TO PRINT THE REPORT VIA
                     ANLZUCB AND REINITIALZE THE LOG DATASET.
 P051B15     BAL   THE TSO DDSTAR COMMAND- SPOOL LINES FROM A CLIST INTO
                     A DATASET FOR READING BY PGMS/UTILITIES.
                     ARRIVED VIA MISHMODS TAPE FROM UCLA-FCI INTERNALIZE
                     MACROS FROM URMACRO.
 P051B16     BAL   THE TSO LISTSPC COMMAND - REPLACES LISTC USAGE FOR
                     TSO USERS..SHOWS ALLOCATIONS, AND DS ATTRIBS, AND
                     IF YOU HAVE ASM2, ALSO SHOWS WHO LAST MODIFIED DS.
 P051B19     BAL   THE TSO DTAPES COMMAND - RUNS AS STC ALSO
                     SHOWS TAPE DRIVES, VOLSER, JOB USING AND DENSITY,
                     MODEL TYPES.
 P963P00     PL/I  DASD MANAGEMENT SYSTEM- MAINLINE (COMPARE DSN FROM
                     VTOC WITH GRANT LIST) - GENERATE SCRATCH LIST
                     AND MERGED DSNLOG.
 P963P02     PL/I  DASD MANAGEMENT SYSTEM- DATA SET SCRATCH UTILITY
 P963P10     PL/I  DASD MANAGEMENT SYSTEM- GENERATE SCRATCH LOG FROM
                     OUTLOG OF P963P00 (FOR RECOVERY ONLY).
 P963P20     PL/I  DASD MANAGEMENT SYSTEM- PRINT SCRLOG REPORT FOR
                     TSO USERS - USED BY CLIST SHOWSCR.
 P963P27     PL/I  DASD MANAGEMENT SYSTEM- AUTOSCR (EARLY SCR FOR ROLLED
                     OFF GDG DATASETS) + DATASET SIZE HISTORY FILE
 P963P30     PL/I  PGM FROM OUR DASD MGMT SYSTEM..ACCEPTS CONTROL CARDS
                     AND LOOKS UP VOLUMES/MSVGPS FROM THE MSVI DATASET.
                     USE PROC 'MAPMSVGP' TO INVOKE THIS ONE, THEN MAPDIS
                     TO MAP ALL VOLUMES IN AN MSVGP.
 P963P35     PL/I  DASD MANAGEMENT SYSTEM- DUPLICATE VOLUME ELIMINATOR
                     TO ENSURE THAT MAPDISK MAPS EACH VOLUME ONLY ONCE.
 P963P70     PL/I  DASD MANAGEMENT SYSTEM- SUPERMATCH PROGRAM-USED WITH
                     P963P71/SUPERSCR TO EXCLUDE DSNS FROM SUPERSCR
 P963P71     PL/I  DASD MANAGEMENT SYSTEM- GENERATE SUPERSCR EXCLUDE
                     CARDS TO EXEMPT DATASETS FROM SUPERSCR AFTER SYSTEM
                     CRASH - INTERFACES WITH OPERATOR VIA WTOR
 P963P75     PL/I  DASD MANAGEMENT SYSTEM- DATASET SIZE HISTORY FILE
                     MAINT PROGRAM AND AUTOSCR FOR MSVGP=XMIT
 P963P75A    PL/I  DASD MANAGEMENT SYSTEM- MAINTAIN MSVGP=XMIT
 QUEUE    ** BAL   TSO COMMAND FROM TRW W/FCI MODS.  ALLOWS TSO USERS TO
                     DISPLAY INPUT/OUTPUT JES2 QUEUES, JOB JCL,JMSG,
  JES2 4.1 OR        JOBLOG AND SYSIN/SYSOUT DATASETS BY READING HASPACE
  MVS/SP 1.3         DIRECTLY.  MAY ALSO BROWSE RUNNING SYSTEM SYSLOG.
                     COMMAND IS FOR 3270 FULL SCREEN OPERATION.
 QUEUEDOC    ***   DOCUMENTATION FOR USE/INSTALLATION OF THE
                     QUEUE COMMAND.
 R062A10     BAL   DYNAMIC ALLOCATION INTERFACE SUBROUTINE - ALLOWS
                     MOST DA SERVICES FROM A COBOL/PLI/FORT PROGRAM.
 R941X11     BAL   UTILITY JULIAN<->GREGORIAN DATE CONVERTOR--
                     USED BY SEVERAL PL/I PROGRAMS ON THIS TAPE.
 R963A30     BAL   HANDY SUBROUTINE TO SCRATCH/UNCATALOG DATASET..
                     DOES DYNAMIC ALLOCATION OF VOLUME, AND REPORTS WITH
                     TEXT MESSAGES TO CALLER
 SCOMPARE    BAL   PGM TO COMPARE 2 LRECL=80 DATASETS AND SPOT DIFFER-
                     ENCES.  BASED ON CBT881 WITH MODS TO PRINT WHICH
                     DATASETS ARE BEING COMPARED, AND PAGE CONTROL.
 SHOWHIST    PL/I  DASD MANAGEMENT SYSTEM- SHOW TSO USERS THE HISTORY
                     (SIZE, ETC) ON DATASETS OF THEIR CHOICE.. INVOKED
                     BY THE 'SHOWHIST' CLIST IN JOBS.CNTL
 SHOWSMF     BAL   TSO CMD OR STC TO DISPLAY ''FULLNESS'' OF MANX/MANY
                   FOR MVS (NOT SE OR SP SYSTEMS)
 SHOSMFSP    BAL   TSO CMD OR STD TO DISPLAY SYS1.MAN. DATASETS FOR
                   MVS SE2 OR SP1/SP3.
 SHOWRAW     PL/I  PGM TO DISPLAY START/END DATES OF TRACE DUMP DATASETS
                      (USED IN MSSTRACE/TRACESAV JOBSTREAMS).
 SHOWTRC     PL/I  PGM TO DYNAM. ALLOC MSS TRACE DATASETS AND READ HDR
                     RECORD/FORMAT TRACE ON DATE/TIME.  THIS IS AN
                     EXAMPLE OF USING R062A10 DYNAM ALLOC AND S051B16B
                     (LOCINDEX) SUBROUTINE.  ONLY SOURCE IS SUPPLIED-
                     NO JCL TO COMPILE AND LINK.
 SMFACF2     PL/I  SMF PGM- DIGEST ACF2 RECORDS, PRINT ACF2 INFORMATION
 SMFACFM     PL/I  SMF PGM- MERGE DIGESTED ACF2 RECORDS AND RESPONSI-
                     BILITY LIST.
 SMFACFPR    PL/I  SMF PGM- PRINT NICELY FORMATTED ACF2 INFORMATION
 SMFDSND     PL/I  SMF PGM- LOOK FOR TYPE 14/15/17 RECORDS FOR UP TO
                     20 GENERIC DATASETS-SHOW RAW INFO
 SMFDSNPR    PL/I  SMF PGM- PRINT SORTED SMFDSND OUTPUT TO SHOW CHRONO.
                     HISTORY OF DATASET ACCESS.
 SMFRACF     PL/I  SMF PGM- PRINT RACF EVENTS FROM TYPE 0,80 AND 81 RECS
                     PROVIDE LISTING OF EVENTS AND BUILD CLIST TO ALLOW
                     RECONSTRUCTION OF RACF DATASET AFTER CRASH.
 SMFSEL      BAL   SMF PGM- RECORD SELECTION UTILITY
 SMFTERM     PL/I  SMF PGM- ANALYZE TYPE 34 RECORDS AND PRODUCE TSO
                     USAGE SUMMARY.  REQUIRES IEFUJI TO PUT TERMINAL UCB
                     ADDR IN LAST HALFWORD OF SMFUSER FIELD IN ORDER
                     TO PROVIDE TERMINAL USAGE STATS BY TERMINAL ADDRESS
 SPACEZAP    PL/I  PGM TO DYNAM. ALLOC MSS VOLUMES WHICH ARE NOT MOUNTED
                     BUT HAVE DOWN LEVEL SPACE FLAG SET ON IN MSVI.
                     MSVGPS SCANNED CONTROLLED BY SYSIN PARM CARDS.
                     (STC JCL IN MSSMODS.JOBS.CNTL + SAMPLE CNTL DS)
 SUPERSCR ** BAL   SUPER SCRATCH FOR REAL/VIRTUAL DISKS..
 SUPERSPY ** BAL   THE THING TO RUN TO HELP DIAGNOSE PROBLEMS WITH MVS/
                     MSS..REQUIRES MSC TABLES MAINT. IUP IN SECOND STEP.
 S051B22     BAL   THE FIND SUBROUTINE..USED BY TSO044(UCBUNLD) TO
                     FIND 'VOL=(SL,' ON PARM CARD.
 TECHINFO    JCL   JOB TO UPDATE YOUR VERY OWN INFO/MVS FORMATTED
                   DATABASE.  USES UTILITY 'OZPDSUNL'. SEE JOBS.CNTL
                   FOR THE FOLLOWING MEMBERS:
                    TECINFOC - CLIST TO RUN TECHINFO UNDER TSO
                    TECHINFO - JOB TO RELOAD TECHINFO DATABASE
                    TECINFO1 - USES IDCAMS TO DEFINE VSAM CLUSTER FOR DB
                    TECINFO2 - USES BLG... UTILITIES TO CREATE UNLOADED
                               HELP, CICS, VTAM, VSAM FILES FROM THE
                               INFO/MVS MONTHLY UPDATE TAPE.
 TRAC3850    BAL   IPO TRAC3850 WITH MODS..ANLZ IGCTRINT OUTPUT
 TSO020SU    BAL   TSO DJOBS COMMAND - STC USAGE ALSO.
                     LIKE 'D J,L' WITH SWAP STATUS,CPU TIME,XACT TIME
 TSO025AS ** BAL   TSO DTSO COMMAND  - STC USAGE ALSO.
                     LIKE DJOBS ABOVE, BUT FOR TSO; SHOWS LINE ADDR TOO.
 TSO029      BAL   TSO DASDMAP COMMAND - KIND OF SLOW WAY TO MAP A
                     DISK VOLUME ONLINE, BUT DOES SUPPORT INDEXED
                     VTOCS AND 3380S
 TSO032      BAL   TSO DDMN COMMAND  - STC USAGE ALSO.
                     LIKE 'D DMN' BUT NEATER, SHOWS IPS IN EFFECT TOO.
 TSO033      BAL   TSO DUPTIME COMMAND - STC USAGE ALSO.
                     SHOWS HOW LONG SYSTEM HAS BEEN UP (FROM LAST IPL)
 TSO034   ** BAL   TSO SYSMAINT COMMAND - STC USAGE ALSO.
                     WRITTEN BEFORE THE DAYS OF 'FORCE', ALLOWS A
                     CALLRTM MEMTERM TO BE ISSUED TO AN ADDRESS SPACE
                     HANDLES 'STARTING' TSO USERS TOO.
 TSO036      BAL   TSO SHOWASM COMMAND  - STC USAGE ALSO.
                     DISPLAYS AUXSTM STATS, RSM PAGE USAGES, AND
                     PAGE/SWAP DATASET STATUS/STATS.
 TSO041      BAL   TSO LPDS COMMAND.
                     THE EVER POPULAR PDS MANIPUATOR COMMAND, DOES EVERY
                     THING BUT DRY-CLEAN A PDS OF YOUR CHOICE.
 TSO042      BAL   TSO DUNITS COMMAND  - STC USAGE ALSO.
                     LIKE 'D U,...' BUT MORE INFORMATIVE WITH USE/OPEN
                     COUNTS. SELECTION IS BY GENERIC VOLSERS.
 TSO044   ** BAL   STARTED TASK..UNLOAD ALL MSS VOLUMES NOT ON A LIST
                     OF VOLSERS IN MEMBER 'MOUNTMSS'.
                     PARSES '$VS,'M XXX,VOL=(SL,VOLSER)'' COMMANDS
                     TO FIND VOLUMES TO EXEMPT...
 TSO045      BAL   THE CHIMP MVS SYSTEM DISPLAY COMMAND FOR 3270 FULLSCR
                     OPERATION.  SHOWS JOBS/TSO USER STATS, AND WE
                     ADDED A DYNAMIC DOMAIN DISPLAY (OPTION 'D').
                     OPERS LOVE IT..SHOWS STEP NAME AND CPU TIME...
                     (ORIG FROM SHARE VIA THE CBT TAPE).
 TSO048      BAL   THE TSO #PANVIEW COMMAND - ALLOW LISTING OF PANVALET
                     LIBRARY MEMBERS AND LIBRARY DIRECTORY ON A 3270
                     TUBE IN FULL SCREEN MODE.
                     (ORIG FROM SHARE JES2 MODS TAPE (MEMOREX) WITH
                      DIRECTORY LIST MOD BY FAIRCHILD). USES THE
                     'PANVIEW' CLIST IN MSSMODS.JOBS.CNTL TO RUN.
 TSO050      BAL   TSO '$' COMMAND- INVOKE PROGRAM FROM LINKLIST. THIS
                     VERSION ARRIVED FROM SOURCES UNKNOWN, BUT WE
                     INTERNALIZED THE MACROS-(LOOKS LIKE UCLA MACROS...)
 TSO051      BAL   TSO 'GETINFO' COMMAND - ALLOWS YOU TO STUFF GOODIES
                     FROM OS/JCT (OR OTHER CONTROL BLOCKS) INTO CLIST
                     VARIABLES WITHIN A CLIST. (TAILORED FOR ACF2)
 UCBZAP   ** BAL   FIX MSS UCBS WITH STATUS 'A' AND USECNT>250.
                     CLEANS 'DIRTY' MSS UCBS LEFT BY SOMEONE IN MVS NOT
                     PLAYING FAIR WITH THE UCB USECOUNT FIELD. ISSUES
                     UNLOADS FOR DIRTY UNITS AFTER FIXING THE 'ALLOC'
                     AND USECOUNT.
 VTOC     ** BAL   TSO 'VTOC' COMMAND - MAP DISKS OF YOUR CHOICE -
                     USES EXCP FOR SPEED..POWERFUL SELECTION CAPABILITY
                     FOR DATASETS TO BE LISTED.
 **********************************************************************
 **********************************************************************
 **********************************************************************
 **********************************************************************

   SOME EXAMPLES OF OUTPUT FOLLOW:

   DJOBS COMMAND/STC


 JOBNAME  STEPNAME PROCSTEP STATUS  JOB-TIME STEP-CPU SEC
 JES2     JES2     IEFPROC  NS      00:16:41  2682.30
 ACF      ACF      ACF      WT LONG 12:52:24     1.26
 RMF      RMF      IEFPROC  WT LONG 00:09:44    12.15
 OMEGAMON MVS      MONITOR  NS      00:16:41   186.39
 TCAM     TCAM     TSO      NS      00:16:41   626.11
 APOLLO   APOLLO   JOBSCHED IN      00:16:40   260.76
 TSOHOLD  TSOHOLD  NOLOGONS WT LONG 00:08:17     0.03
 J999D0S6 FCITS6            IN      00:11:54    90.74
 $5P2JHMZ STEP080  PRT      IN      00:16:41     0.31
 VCITLDLY BACKUP            IN      00:01:17     4.03
 EREPVSA1 STEP6             IN WAIT 00:07:29     8.51
 J342A001 C342A001 STEP060  IN      00:16:41    70.15
 MSSDUMP  LKED              IN      00:00:43     0.63
 SUPERSPY SYSMON            IN      00:00:01     0.21
 ..    14 JOBS     15 INITIATORS


 **********************************************************************

   DTSO  COMMAND/STC

 USERID  STATUS  ASID LINE PGS WSS XACTTIME CPU-SECS
 $5OP4   WT WAIT 0005  677   0   7 00:00:30     1.24
 $5OP    WT TGET 000A  4B7   0   9 00:00:20     2.00
 $5P0VC  WT TGET 0011  675   0  23 00:03:02     3.68
 $5P4KZ  WT TGET 0014  676   0  25 00:00:56   104.82
 $6SCHED WT TGET 001B  4B6   0  23 00:02:59     5.10
 $6SIVAR WT WAIT 001D  042   0   6 00:03:20    18.88
 $6TSKEN WT TGET 0020  4B5   0  43 00:00:55    30.16
 STARTINGWT TGET 0022  06B   0  10 13:57:44     0.03
 $6TSBW  IN      0024  667  29  23 00:00:00     5.84
 $6TSDMH WT WAIT 0026  4B4   0   5 00:03:50     1.80
 $6TSAD  WT TGET 0027  4BF   0  34 00:04:03     8.41
 ..    11 TIME SHARING USERS


 **********************************************************************

   DDMN  COMMAND/STC

 IPS=44 MPL-LMT DMN ..MPL.. ....# USERS....
 DOMAIN MIN MAX WGT CUR TGT RDY  IN >OT OUT
    0   255 255   1   - 255   1   -   -   -
    1     2  16 200   7   9   8   7   -   -
    2   255 255   1   1 255   2   1   -   -
    3     4  16 255   -   4   1   -   -   -
    4     2   2   1   -   2   -   -   -   -
    5     1   1   1   -   1   -   -   -   -
    6     1   1   1   -   1   -   -   -   -
    7     1   1   1   -   1   -   -   -   -
    8     1   1   1   -   1   -   -   -   -
    9     2  10 100   1   2   1   1   -   -
   10     -   -   1   -   -   -   -   -   -
   11     2   6 150   -   2   1   -   -   -


 **********************************************************************

   SHOWASM COMMAND/STC

 SHOWASM - CURRENT SLOT STATUS
  TOTAL UNRSV .VIO. N-VIO .BAD.
   9620  5088    64  1622     0
 SHOWASM - STORAGE USAGE STATUS
   SQA LSQA PLPA  CSA CFIX INUS LLFX LSFX AVAL VIO BOF V=R  UICC UICP
    83  111  409   56   24  728    0  224   17   0   0  20   25   24
 SHOWASM - PAGE/SWAP DATASET STATUS
  USAGE  VOLUME UNIT DEV-TYPE TOTAL AVAIL .BAD.  DSNAME
  PLPA   SPOOL2  250 3350      2600  1295     0  SYS1.PAGE.SPOOL2.PLPA
  COMMON PRODX2  460 3350      3250  3110     0  SYS1.PAGE.PRODX2.COMMON
  LOCAL  WORKX6  569 3350      1820  1353     0  SYS1.PAGE.WORKX6.LOCAL
  LOCAL  WORKX1  143 3350      3250  2622     0  SYS1.PAGE.WORKX1.LOCAL
  LOCAL  WORKX2  251 3350      4550  3959     0  SYS1.PAGE.WORKX2.LOCAL
  SWAP   MFGTMP  462 3350       100    89     0  SYS1.SWAP.MFGTMP
  SWAP   PRODX1  142 3350       100    90     0  SYS1.SWAP.PRODX1
 SHOWASM - DISPLAY ENDED


 **********************************************************************

   DTAPES  COMMAND/STC

 UNIT VOLUME STATUS  USER          DENSITY   MODEL
  390        OFFLINE               800/1600  3400-4
  391        OFFLINE               800/1600  3400-4
  392        OFFLINE               800/1600  3400-4
  393        OFFLINE               800/1600  3400-4
  394        OFFLINE               800/1600  3400-4
  395        OFFLINE               800/1600  3400-4
  396        ONLINE  J342A001      800/1600  3400-4
  397        ONLINE                1600      3400-3
  398        OFFLINE               1600      3400-3
  399        OFFLINE               1600      3400-3
  39A        OFFLINE               1600/6250 3400-6
  39B        OFFLINE               1600/6250 3400-6
  39C        OFFLINE               1600/6250 3400-6
  39D        ONLINE                1600/6250 3400-6
  39E        ONLINE                1600/6250 3400-6
  39F 014470 ONLINE  J999D0S6      1600/6250 3400-6


 **********************************************************************

   DUNITS  COMMAND/STC  (PARM='(ALL)')

                    VOLUME    USE OPN UNIT
 VOLUME UNIT TYPE   STATE     CNT CNT STATUS
 SPOOL1 140  3350   PVT/RSDNT   8   0 A
 PRODX1 142  3350   PVT/RSDNT  56  14 A
 WORKX1 143  3350   STG/RSDNT   7   1 A
 FCIMVS 149  3330-1 PVT/RSDNT  22   6 S,BSY
 SPOOL2 150  3350   PVT/RSDNT   7   2 A
 WORKX2 151  3350   STG/RSDNT   9   1 A
 PRODX3 153  3350   PVT/RSDNT  27  24 A
 PRODX2 460  3350   PVT/RSDNT  39   4 A,BSY
 FCITS5 461  3350   PVT/RSDNT  12   1 A
 MFGTMP 462  3350   PVT/RSDNT  21  13 A
 WORKX3 463  3350   STG/RSDNT   4   1 A
 WORKX6 469  3350   STG/RSDNT   1   1 A,BSY
 FCITS6 46A  3350   PVT/RSDNT  38  12 A,BSY
 IMSP01 46B  3350   PVT/RSDNT   3   3 A
 STGE00 700  3330-1 PVT/RSVED   0   0 O
 STGE02 701  3330-1 PVT/RSVED   0   0 O
 SOFTW3 706  3330V  PVT/RSVED   0   0 O
 MS0226 707  3330V  PVT/RSVED   0   0 O
 STGE04 708  3330-1 PVT/RSVED   0   0 O
 STGE06 709  3330-1 PVT/RSVED   0   0 O
 MS0018 70E  3330V  PVT/RSVED   0   0 O
 MS0019 70F  3330V  PVT/RSVED   0   0 O
 FCITS1 710  3330V  PVT/RSVED   0   0 O
 PRODM1 711  3330V  PVT/RSVED   0   0 O
 MS0146 712  3330V  PVT/RSVED   0   0 O
 MS0369 713  3330V  PVT/RSVED   0   0 O
 MS0370 714  3330V  PVT/RSVED   0   0 O
        715  3330V      REMOV   0   0 O,NRDY
        716  3330V      REMOV   0   0 O,NRDY
        717  3330V      REMOV   0   0 O,NRDY
 SOFTW7 718  3330V  PVT/RSVED   7   4 A
        719  3330V      REMOV   0   0 O,NRDY
        71A  3330V      REMOV   0   0 O,NRDY
 SOFTW6 71B  3330V  PVT/RSVED   0   0 O
        71C  3330V      REMOV   0   0 O,NRDY
        71D  3330V      REMOV   0   0 O,NRDY
        71E  3330V      REMOV 255   0 O,NRDY
        71F  3330V      REMOV   0   0 O,NRDY
        720  3330V      REMOV   0   0 O,NRDY
        721  3330V      REMOV   0   0 O,NRDY
        722  3330V      REMOV   0   0 O,NRDY
        723  3330V      REMOV   0   0 O,NRDY
        724  3330V      REMOV   0   0 O,NRDY
 WORK06 725  3330V  PVT/REMOV   1   1 A
 MS0137 726  3330V  PVT/REMOV   1   1 A,BSY
        727  3330V      REMOV   0   0 O,NRDY
        728  3330V      REMOV   0   0 O,NRDY
        729  3330V      REMOV   0   0 O,NRDY
        72A  3330V      REMOV   0   0 O,NRDY
        72B  3330V      REMOV   0   0 O,NRDY
 MS0115 72C  3330V  PVT/REMOV   1   1 A
        72D  3330V      REMOV   0   0 O,NRDY
        72E  3330V      REMOV   0   0 O,NRDY
        72F  3330V      REMOV   0   0 O,NRDY
        730  3330V      REMOV   0   0 O,NRDY
 MS0098 731  3330V  PVT/REMOV   0   0 O
        732  3330V      REMOV   0   0 O,NRDY
        733  3330V      REMOV   0   0 O,NRDY
        734  3330V      REMOV   0   0 O,NRDY
        735  3330V      REMOV   0   0 O,NRDY
        736  3330V      REMOV   0   0 O,NRDY
 WORK04 737  3330V  PVT/REMOV   1   1 A
 MS0056 738  3330V  PVT/REMOV   2   2 A
 MS0116 739  3330V  PVT/REMOV   0   0 O
        73A  3330V      REMOV   0   0 O,NRDY
 MS0368 73B  3330V  PVT/REMOV   0   0 O
        73C  3330V      REMOV   0   0 O,NRDY
 MS0395 73D  3330V  PUB/REMOV   1   1 A,BSY
        73E  3330V      REMOV   0   0 O,NRDY
        73F  3330V      REMOV   0   0 O,NRDY


 **********************************************************************

   DUNITS  COMMAND/STC  (PARM='(MS,WORK0)' )

                    VOLUME    USE OPN UNIT
 VOLUME UNIT TYPE   STATE     CNT CNT STATUS
 MS0226 707  3330V  PVT/RSVED   0   0 O
 MS0018 70E  3330V  PVT/RSVED   0   0 O
 MS0019 70F  3330V  PVT/RSVED   0   0 O
 MS0146 712  3330V  PVT/RSVED   0   0 O
 MS0369 713  3330V  PVT/RSVED   0   0 O
 MS0370 714  3330V  PVT/RSVED   0   0 O
 MS0137 726  3330V  PVT/REMOV   1   1 A,BSY
 MS0115 72C  3330V  PVT/REMOV   1   1 A
 MS0098 731  3330V  PVT/REMOV   0   0 O
 MS0056 738  3330V  PVT/REMOV   2   2 A
 MS0116 739  3330V  PVT/REMOV   0   0 O
 MS0368 73B  3330V  PVT/REMOV   0   0 O
 MS0395 73D  3330V  PUB/REMOV   1   1 A,BSY
 WORK06 725  3330V  PVT/REMOV   1   1 A
 WORK04 737  3330V  PVT/REMOV   1   1 A







************************************************************************
 JCL TO RELOAD THE MODS TAPE IS IN MEMBER $$RELOAD AND ALSO THE FIRST
 FILE ON THIS TAPE.


JCL TO RELOAD:  (COPIED FROM $$RELOAD)

./       ADD   NAME=$$RELOAD
//RELOAD  JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE),TYPRUN=HOLD
//*********************************************************************
//*
//* RELOAD INTEL MODS TAPE
//*
//*  K TRUE    2 FEB 82
//*  M SOONG   9 DEC 86
//*********************************************************************
//*
//RELOAD  PROC TUNIT=TAPE,         <===   UNIT FOR TAPE RELOADS
//             TVOL=NTLMOD,        <===   VOLSER OF DIST TAPE
//             DVOL=TECH00,        <===   VOLSER OF TARGET DISK VOLUME
//             DUNIT='3350',       <===   UNIT TYPE FOR TARGET DISK VOL
//             PREFIX='TECH.INTEL.MODS', PREFIX TO DSNAMES
//             WUNIT=SYSDA         <===   WORK DASD UNIT
//*********************************************************************
//RELOAD  EXEC PGM=IEBCOPY
//SYSPRINT DD  SYSOUT=*
//SYSUT3   DD  UNIT=&WUNIT,SPACE=(CYL,(1,1))
//INSTALL  DD  DSN=&PREFIX..INSTALL.CNTL,DISP=(,CATLG),
//             UNIT=&DUNIT,VOL=SER=&DVOL,SPACE=(CYL,(7,1,27)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160,DSORG=PO)
//JOBS     DD  DSN=&PREFIX..JOBS.CNTL,DISP=(,CATLG),
//             UNIT=&DUNIT,VOL=SER=&DVOL,SPACE=(CYL,(6,1,27)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160,DSORG=PO)
//SOURCE   DD  DSN=&PREFIX..SOURCE,DISP=(,CATLG),
//             UNIT=&DUNIT,VOL=SER=&DVOL,SPACE=(CYL,(40,2,27)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=12960,DSORG=PO)
//HELP     DD  DSN=&PREFIX..HELP,DISP=(,CATLG),
//             UNIT=&DUNIT,VOL=SER=&DVOL,SPACE=(CYL,(1,1,27)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160,DSORG=PO)
//TECHINFO DD  DSN=&PREFIX..TECHINFO,DISP=(,CATLG),
//             UNIT=&DUNIT,VOL=SER=&DVOL,SPACE=(CYL,(1,1,27)),
//             DCB=(RECFM=VB,LRECL=84,BLKSIZE=6233,DSORG=PO)
//SASLIB   DD  DSN=&PREFIX..SASLIB,DISP=(,CATLG),
//             UNIT=&DUNIT,VOL=SER=&DVOL,SPACE=(CYL,(1,1,27)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160,DSORG=PO)
//NETINFO  DD  DSN=&PREFIX..NETINFO,DISP=(,CATLG),
//             UNIT=&DUNIT,VOL=SER=&DVOL,SPACE=(CYL,(1,1,27)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160,DSORG=PO)
//FILE2    DD  DSN=TECH.INTEL.MODS.INSTALL.CNTL,DISP=(OLD,PASS),
//             LABEL=(2,SL),
//             UNIT=&TUNIT,VOL=SER=&TVOL
//FILE3    DD  DSN=TECH.INTEL.MODS.JOBS.CNTL,DISP=(OLD,PASS),
//             LABEL=(3,SL),
//             UNIT=AFF=FILE2,VOL=REF=*.FILE2
//FILE4    DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=(OLD,PASS),
//             LABEL=(4,SL),
//             UNIT=AFF=FILE2,VOL=REF=*.FILE2
//FILE5    DD  DSN=TECH.INTEL.MODS.HELP,DISP=(OLD,PASS),
//             LABEL=(5,SL),
//             UNIT=AFF=FILE2,VOL=REF=*.FILE2
//FILE6    DD  DSN=TECH.INTEL.MODS.TECHINFO,DISP=(OLD,PASS),
//             LABEL=(6,SL),
//             UNIT=AFF=FILE2,VOL=REF=*.FILE2
//FILE7    DD  DSN=TECH.INTEL.MODS.SASLIB,DISP=(OLD,PASS),
//             LABEL=(7,SL),
//             UNIT=AFF=FILE2,VOL=REF=*.FILE2
//FILE8    DD  DSN=TECH.INTEL.MODS.NETINFO,DISP=(OLD,PASS),
//             LABEL=(8,SL),
//             UNIT=AFF=FILE2,VOL=REF=*.FILE2
//*
//GENER   EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DUMMY
//SYSUT1   DD  DSN=&PREFIX..INSTALL.CNTL($$INDEX),DISP=SHR,
//             VOL=SER=&DVOL,UNIT=&DUNIT
//SYSUT2   DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)
//        PEND
//********************************************************************
//NTLMODS  EXEC RELOAD
//********************************************************************
//SYSIN    DD  *
 C O=INSTALL,I=FILE2
 C O=JOBS,I=FILE3
 C O=SOURCE,I=FILE4
 C O=HELP,I=FILE5
 C O=TECHINFO,I=FILE6
 C O=SASLIB,I=FILE7
 C O=NETINFO,I=FILE8
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=ABEND
//ABEND JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL ABEND - SUBROUTINE TO ISSUE ABEND OF YOUR CHOICE
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS ABEND TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   27 AUG 80
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,ABEND
++WRITE WORK,S052G01       ABEND SUBROUTINE
//*
//ABEND EXEC SYSASM,MEMBER=ABEND          ABEND
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//*                                             PANVALET ACCESS METHOD
//SYSLIN   DD  *
 INCLUDE SYSLIB(ABEND)
 NAME  ABEND(R)                 LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=ABENDPGM
//ABENDPGM JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL ABENDPGM - ISSUE WTOR FOR JOB FAILURE
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS ABENDPGM TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   27 AUG 80
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,ABENDPGM
//*
//ABENDPGM EXEC SYSASM,MEMBER=ABENDPGM
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//*                                             PANVALET ACCESS METHOD
//SYSLIN   DD  *
 INCLUDE SYSLIB(ABENDPGM)
 NAME  ABENDPGM(R)              LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=ACFEXITS
//MF38065 JOB (65003,B04),'A.DAVIES',CLASS=H,MSGCLASS=Q,
//            NOTIFY=$6TSBW
//*********************************************************************
//*
//* INSTALL ACF VALIDATION EXIT AND DATASET TABLE AS LOCAL PTF MF38065
//*
//*  ACFDSTBL:  TABLE SECIFYING DEFAULT ACCESS FOR SELECTED DATASETS
//*  ACFVAL  :  VALIDATION EXIT
//*                 1. PROVIDES FOR FLEXIBLE NAMING CONVENTIONS STAN-
//*                        DARD BY ALLOWING D/S NAME TO BE EXAMINED
//*                        AND ALTERED PRIOR TO ACF VALIDATION LOGIC.
//*                 2. GRANTS ACCESS TO SPECIFIC DATASETS IF ACCESS
//*                        AUTHORITY REQUESTED DOES NOT EXCEED THE
//*                        DEFAULT (ESTABLISHED IN MODULE ACFDSTBL).
//*                 3. ALLOWS 'FAST-PATH' ACCESS FOR LOGONID EQUAL
//*                        TO D/S HI-ORDER INDEX SITUATION.
//*
//*
//*  A DAVIES 01 DEC 79
//*  BW       20 JUN 80
//*
//*********************************************************************
//ACFASM PROC R=512,          ** ASM REGION SIZE
//       ASM=ASMBLR,          ** DESIRED ASSEMBLER
//       INDEX=SYS1,          ** ACF2 HIGH ORDER INDEX
//       SOURCE=ACFMAC,       ** ACF2 SOURCE DSNAME (2ND NODE ONLY)
//       MEMBER=ACFFDR,       ** ACF2 SOURCE MEMBER
//       ACFU=SYSDA,          ** ACF2 UNIT
//       ACFV=MVS038,         ** ACF2 VOLSER
//       RUNIT=SYSDA,         ** SYSRES UNIT (MACLIB)
//       RVOL=MVS038,         ** SYSRES VOLUME (MACLIB)
//       DUNIT=SYSDA,         ** DLIB UNIT (AMODGEN,HASPSRC)
//       DVOL1=DLB038,        ** DLIB VOLUME (HASPSRC)
//       DVOL2=DLB038         ** DLIB VOLUME (AMODGEN)
//*
//* *********************************************************
//*      THIS PROC WIIL ASSEMBLE AN ACF2 SOURCE MODULE/MACRO
//*  AND PLACE THE OBJECT DECK INTO THE ACF2 OBJECT LIBRARY
//*  FOR SUBSEQUENT LINKEDITING. THE DEFAULT SOURCE INPUT IS
//*  SYS5.ACFMAC(ACFFDR).   THE DEFAULT OBJECT LIBRARY IS...
//*  SYS5.ACFOBJ.
//* **********************************************************
//*
//ACFASM EXEC PGM=&ASM,PARM='TERM,DECK,XREF(SHORT)',REGION=&R.K
//SYSTERM  DD SYSOUT=*
//SYSPRINT DD SYSOUT=*
//SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB,UNIT=&RUNIT,VOL=SER=&RVOL,
//    DCB=BLKSIZE=12960
//       DD DISP=SHR,DSN=&INDEX..ACFMAC,UNIT=&ACFU,VOL=SER=&ACFV
//       DD DISP=SHR,DSN=SYS1.HASPSRC,UNIT=&DUNIT,VOL=SER=&DVOL1
//       DD DISP=SHR,DSN=SYS1.AMODGEN,UNIT=&DUNIT,VOL=SER=&DVOL2
//       DD DISP=SHR,DSN=&INDEX..&SOURCE,UNIT=&ACFU,VOL=SER=&ACFV
//SYSPUNCH DD DISP=OLD,
//       DSN=&INDEX..ACFOBJ(&MEMBER.),UNIT=&ACFU,VOL=SER=&ACFV
//SYSUT1 DD DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(TRK,(10,10))
//SYSUT2 DD DSN=&&SYSUT2,UNIT=SYSDA,SPACE=(TRK,(10,10))
//SYSUT3 DD DSN=&&SYSUT3,UNIT=SYSDA,SPACE=(TRK,(10,10))
//SYSIN DD DISP=SHR,
//      DSN=&INDEX..&SOURCE.(&MEMBER.),UNIT=&ACFU,VOL=SER=&ACFV
//  PEND
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=&&SCELIB,DISP=(NEW,PASS),
//            UNIT=SYSDA,SPACE=(CYL,(2,1,10)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=1680,DSORG=PO)
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,ACFVAL
++WRITE WORK,ACFDSTBL
/*
//********************************************************************
//ACFVAL   EXEC  ACFASM,
//    PARM.ACFASM='DECK,XREF(SHORT),RENT'
//ACFASM.SYSPUNCH DD DSN=&&OBJLIB(ACFVAL),DISP=(MOD,PASS),
//    UNIT=SYSDA,SPACE=(CYL,(3,1,20)),DCB=BLKSIZE=800,VOL=
//ACFASM.SYSIN  DD DSN=&&SCELIB(ACFVAL),DISP=(OLD,PASS),UNIT=,VOL=
//********************************************************************
//ACFDSTBL EXEC  ACFASM,
//    PARM.ACFASM='DECK,XREF(SHORT),RENT'
//ACFASM.SYSPUNCH DD DSN=&&OBJLIB(ACFDSTBL),DISP=(MOD,PASS),
//    UNIT=,VOL=
//ACFASM.SYSIN  DD DSN=&&SCELIB(ACFDSTBL),DISP=SHR,UNIT=,VOL=
//********************************************************************
//COPY     EXEC  PGM=IEBCOPY
//SYSPRINT  DD   SYSOUT=*
//OBJLIB    DD   DSN=&&OBJLIB,DISP=(OLD,PASS)
//FCIOBJ    DD   DSN=SYS1.FCIOBJ,DISP=OLD,UNIT=SYSDA,VOL=SER=DLB038
//SYSUT1    DD   UNIT=SYSDA,SPACE=(CYL,(1,1)),DISP=(,DELETE)
//SYSIN     DD   *
  C I=((OBJLIB,R)),O=FCIOBJ     SAVE OBJECT IN OUR OBJECT LIBRARY
//********************************************************************
//****       SMP RECEIVE AND APPLY                               *****
//********************************************************************
//SMP     EXEC IPOSMP4
//SYSIN DD *
 RESTORE SELECT(MF38065).
 RECEIVE SELECT(MF38065).
 APPLY   SELECT(MF38065) DIS(WRITE).
/*
//SMP.FCIOBJ DD DSN=&&OBJLIB,DISP=(OLD,PASS)
//SMP.SMPPTFIN DD DATA,DLM=$$
++USERMOD (MF38065)
  /*

    LOCAL PTF MF38065

    PURPOSE: INSTALL ACF VALIDATION EXIT, AND ASSOCIATED TABLE OF
                 SELECTED DATASETS AND DEFAULT ACCESS ALLOWED.

    MODULES:

     ACFDSTBL - TABLE SECIFYING DEFAULT ACCESS FOR SELECTED DATASETS
     ACFVAL   - VALIDATION EXIT PROGRAM
                    1. PROVIDES FOR FLEXIBLE NAMING CONVENTIONS STAN-
                           DARD BY ALLOWING D/S NAME TO BE EXAMINED
                           AND ALTERED PRIOR TO ACF VALIDATION LOGIC.
                    2. GRANTS ACCESS TO SPECIFIC DATASETS IF ACCESS
                           AUTHORITY REQUESTED DOES NOT EXCEED THE
                           DEFAULT (ESTABLISHED IN MODULE ACFDSTBL).
                    3. ALLOWS 'FAST-PATH' ACCESS FOR LOGONID EQUAL
                           TO D/S HI-ORDER INDEX SITUATION.

     A DAVIES  01 DEC 79   MVS 3.8A   (IPO60 PLUS PUT 7907)
     BW        20 JUN 80   MVS 3.8A   (IPO60 PLUS PUT 8002-SPF22.MOD1)

  */ .
++VER (Z038)  FMID(ACF2210)   PRE(TT72212) .
++JCLIN .
//STEP1 EXEC PGM=IEWL,PARM='NCAL,LET,XREF,RENT,REUS'
//SYSLMOD DD DSN=SYS1.LPALIB,DISP=SHR
//FCIDLIB DD DSN=SYS1.FCIDLIB,DISP=SHR
//SYSLIN DD *
   ENTRY    ACFVAL
   ORDER    ACFVAL,ACFDSTBL
   INCLUDE FCIDLIB(ACFDSTBL)
   INCLUDE FCIDLIB(ACFVAL)
 NAME       ACFVAL(R)
++MOD (ACFDSTBL) TXLIB(FCIOBJ) DISTLIB(FCIDLIB) .
++MOD (ACFVAL)   TXLIB(FCIOBJ) DISTLIB(FCIDLIB) .
$$
//MF38066 JOB (65003,B04),'A.DAVIES',CLASS=H,MSGCLASS=Q,
//            NOTIFY=$6TSAD
//*********************************************************************
//*
//* INSTALL ACF VIOLATION EXIT AS LOCAL USERMOD MF38066
//*
//*  ACFVIOX :  VIOLATION EXIT
//*
//*  A DAVIES 01 DEC 79
//*
//*********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=&&SCELIB,DISP=(NEW,PASS),
//            UNIT=SYSDA,SPACE=(CYL,(2,1,10)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=1680,DSORG=PO)
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,ACFVIOX
/*
//********************************************************************
//ACFVIOX  EXEC  ACFASM,
//    PARM.ACFASM='DECK,XREF(SHORT),RENT'
//ACFASM.SYSPUNCH DD DSN=&&OBJLIB(ACFVIOX),DISP=(MOD,PASS),
//    UNIT=SYSDA,SPACE=(CYL,(3,1,20)),DCB=BLKSIZE=800,VOL=
//ACFASM.SYSIN  DD DSN=&&SCELIB(ACFVIOX),DISP=(OLD,PASS),UNIT=,VOL=
//********************************************************************
//COPY     EXEC  PGM=IEBCOPY
//SYSPRINT  DD   SYSOUT=*
//OBJLIB    DD   DSN=&&OBJLIB,DISP=(OLD,PASS)
//FCIOBJ    DD   DSN=SYS1.FCIOBJ,DISP=OLD,UNIT=SYSDA,VOL=SER=MVS038
//SYSUT1    DD   UNIT=SYSDA,SPACE=(CYL,(1,1)),DISP=(,DELETE)
//SYSIN     DD   *
  C I=((OBJLIB,R)),O=FCIOBJ     SAVE OBJECT IN OUR OBJECT LIBRARY
//********************************************************************
//****       SMP RECEIVE AND APPLY                               *****
//********************************************************************
//SMP     EXEC IPOSMP4
//SYSIN DD *
 RESTORE SELECT(MF38066).
 RECEIVE SELECT(MF38066).
 APPLY   SELECT(MF38066) DIS(WRITE).
/*
//SMP.FCIOBJ DD DSN=&&OBJLIB,DISP=(OLD,PASS)
//SMP.SMPPTFIN DD DATA,DLM=$$
++USERMOD (MF38066)
  /*
    LOCAL PTF MF38066

    PURPOSE: INSTALL ACF VIOLATION  EXIT

    MODULES:

     ACFVIOX  - ACF2 VIOLATION EXIT PROGRAM
     A DAVIES  01 DEC 79   MVS 3.8A   (IPO60 PLUS PUT 7907)
  */ .
++VER (Z038)  FMID(ACF2210)   PRE(TT72212) .
++JCLIN .
//STEP1 EXEC PGM=IEWL,PARM='NCAL,LET,XREF,RENT,REUS'
//SYSLMOD DD DSN=SYS1.LPALIB,DISP=SHR
//FCIDLIB DD DSN=SYS1.FCIDLIB,DISP=SHR
//SYSLIN DD *
   ENTRY    ACFVIOX
   INCLUDE FCIDLIB(ACFVIOX)
 NAME       ACFVIOX(R)
++MOD (ACFVIOX)   TXLIB(FCIOBJ) DISTLIB(FCIDLIB) .
$$
./       ADD   NAME=ANLZUCB
//ANLZUCB JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL ANLZUCB  - ANALYZE OUTPUT OF UCBLOGER (P051B16L) FOR MSS
//*                    AND WORK PACK USAGE
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS ANLZUCB TO SYS2.FCILIB
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,ANLZUCB
/*
//********************************************************************
//ANLZUCB  EXEC  SYSPLI,MEMBER=ANLZUCB
//********************************************************************
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//LOADLIB  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJECT   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJECT(ANLZUCB)
 INCLUDE LOADLIB(R941X11)
 NAME    ANLZUCB(R)   LINK TO SYS2.FCILIB
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=BKUPUTIL
//BKUPUTIL JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL BKUPUTIL - DRIVER UTILITY FOR BACKUP OF PS/PO/DA/ISAM/PANV
//*                    DATASETS TO TAPE
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS BKUPUTIL TO SYS2.FCILIB
//*
//*  K TRUE   21 MAR 81
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,BKUPUTIL
++WRITE WORK,GETSTATS
++WRITE WORK,VOLMOUNT
//*
//**** ASSEMBLE ALL THE MODULES
//*
//*
//BKUPTUIL EXEC SYSASM,MEMBER=BKUPUTIL
//GETSTATS EXEC SYSASM,MEMBER=GETSTATS
//VOLMOUNT EXEC SYSASM,MEMBER=VOLMOUNT
//*
//*
//**** LINK THE  MODULES TO FORM THE BKUPUTIL LOAD MODULE
//*
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//*                                             PANVALET ACCESS METHOD
//SYSLIN   DD  *
 INCLUDE SYSLIB(BKUPUTIL,GETSTATS,VOLMOUNT)
 SETCODE AC(1)        REQUIRED TO INVOKE IEBCOPY FUNCTIONS...
 NAME BKUPUTIL(R)     LINK TO SYS2.FCILIB
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=COMPMEMB
//COMPMEMB JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL COMPMEMB - PDS/PANVALET LIBRARY MEMBER NAME COMPARE UTILITY
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS COMPMEMB TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,COMPMEMB
/*
//********************************************************************
//COMPMEMB EXEC  SYSPLI,MEMBER=COMPMEMB
//********************************************************************
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=SYS2.FCILIB,DISP=SHR   <=== FOR PAM MODULE
//LOADLIB  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJECT   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJECT(COMPMEMB)
 INCLUDE SYSLIB(PAMV9)     <=== PANVALET ACCESS METHOD  (PAM)
 INCLUDE LOADLIB(R941X11)
 NAME    COMPMEMB(R)  LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=DATTIM
//DATTIM JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL DATTIM - SUBROUTINE TO RETURN 'HH:MM:SS' 'MM/DD/YY'
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS DATTIM TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   27 AUG 80
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,DATTIM
++WRITE WORK,S051B29       DATTIM SUBROUTINE
//*
//DATTIM EXEC SYSASM,MEMBER=DATTIM        DATTIM
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//*                                             PANVALET ACCESS METHOD
//SYSLIN   DD  *
 INCLUDE SYSLIB(DATTIM)
 NAME  DATTIM(R)                LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=DELETDS
//DELETDS JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL DELETDS - FCI UTILITY DATASET UNCATLG/SCRATCH
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS DELETDS TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   27 AUG 80
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,DELETDS
//*
//DELETDS EXEC SYSASM,MEMBER=DELETDS
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//*                                             PANVALET ACCESS METHOD
//SYSLIN   DD  *
 INCLUDE SYSLIB(DELETDS)
 NAME  DELETDS(R)               LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=DIDOCS
//DIDOCS JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL DIDOCS - TSO PSEUDO OPERATOR CONSOLE COMMAND
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS DIDOCS TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//         DD  DSN=SYS1.AMODGEN,DISP=SHR,
//             VOL=SER=DLB30B,UNIT=3330V
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,DIDOCS        DIDOCS COMMAND
//*
//DIDOCS EXEC SYSASM,MEMBER=DIDOCS        DIDOCS
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(DIDOCS)
 SETCODE AC(1)
 NAME  DIDOCS(R)           LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=DSINFO
//DSINFO  JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL PL1 SUBROUTINE (DSINFO)
//*
//*   DSINFO IS USED TO RETURN DSNAME, ETC ABOUT A DDCARD
//*
//*
//*  K TRUE   29 JUN 78
//*
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//*            VOL=SER=DLB30B,UNIT=3330V
//         DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,DSINFO
++WRITE WORK,MTITL
++WRITE WORK,STITL
++WRITE WORK,GETDSA
++WRITE WORK,FREEDSA
++WRITE WORK,PLISIG
++WRITE WORK,PLIICB
++WRITE WORK,IBMBXER
++WRITE WORK,IBMBXLB
/*
//********************************************************************
//DSINFO   EXEC  SYSASM,MEMBER=DSINFO
//********************************************************************
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(DSINFO)
 ENTRY DSINFO
 NAME  DSINFO(R)                LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=ERAS3270
//ERAS3270 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL ERAS3270 - FCI UTILITY TSO CMD TO CLEAR A 3270 SCREEN
//*                    (WITH SPF TRIGGERS...)
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS ERAS3270 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   27 AUG 80
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,ERAS3270
//*
//ERAS3270 EXEC SYSASM,MEMBER=ERAS3270
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//*                                             PANVALET ACCESS METHOD
//SYSLIN   DD  *
 INCLUDE SYSLIB(ERAS3270)
 ALIAS  K             SO OPERATORS WILL FEEL COMFORTABLE....
 NAME  ERAS3270(R)              LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=FCIMOD07
//FCIMOD07 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL FCIMOD07 - THE TSO FULL SCREEN HANDLER + FSF (LINKABLE)
//* (ORIG FROM FLORIDA POWER AND LIGHT MODS TAPE)
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS FCIMOD07 TO TECH.INTEL.MODS.LOAD
//* ANDFSF
//*  K TRUE   13 MAR 81
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=&&MACRO,DISP=(OLD,PASS),
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//*
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
// PEND
//*
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++WRITE WORK,STRUMAC       IEBUPDTE FORMAT///STRUCTURED ASM MACROS
++OPTION OUTPUT,SCELIB
++WRITE WORK,FSF
++WRITE WORK,FCIMOD07
++WRITE WORK,SROSDATE
//*
//* PUT STRUCTURED MACROS INTO WORK DATASET VIA IEBUPDTE
//*
//IEBUPDTE EXEC PGM=IEBUPDTE,PARM='NEW'
//SYSPRINT DD  DUMMY
//SYSIN    DD  DSN=*.PANGET.PAN1.PANDD2,DISP=(OLD,PASS)
//SYSUT2   DD  DSN=&&MACRO,DISP=(NEW,PASS),
//             UNIT=SYSDA,SPACE=(CYL,(2,1,20)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160,DSORG=PO)
//*
//**** ASSEMBLE ALL THE MODULES
//*
//*
//FSF      EXEC SYSASM,MEMBER=FSF
//FCIMOD07 EXEC SYSASM,MEMBER=FCIMOD07
//SROSDATE EXEC SYSASM,MEMBER=SROSDATE
//*
//*
//**** LINK THE  MODULES TO FORM THE FCIMOD07 LOAD MODULE
//*
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST,RENT,REUS'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(FSF)
 NAME FSF(R)          LINK TO TECH.INTEL.MODS.LOAD
 INCLUDE SYSLIB(FCIMOD07,SROSDATE)
 NAME FCIMOD07(R)     LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=HEXCONV
//HEXCONV  JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL PL1 SUBROUTINE (HEXCONV)
//*
//*   HEXCONV HAS ENTRY POINTS TO CONVERT BIT,CHAR,HW,FW,POINTER INTO
//*     FIXED OR VARIABLE CHAR STRINGS.
//*
//*  K TRUE   29 JUN 78
//*
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//*            VOL=SER=DLB30B,UNIT=3330V
//         DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,HEXCONV
++WRITE WORK,MTITL
++WRITE WORK,STITL
++WRITE WORK,GETDSA
++WRITE WORK,FREEDSA
++WRITE WORK,PLISIG
++WRITE WORK,PLIICB
++WRITE WORK,IBMBXER
++WRITE WORK,IBMBXLB
//********************************************************************
//HEXCONV  EXEC  SYSASM,MEMBER=HEXCONV
//********************************************************************
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(HEXCONV)
   ENTRY HEXFCC                 OUT =  CHAR FIXED      CHAR VAR
   ALIAS HEXCC,HEXCVC             IN=  CHAR            CHAR
   ALIAS HEXVCC,HEXVCVC                CHAR VAR        CHAR VAR
   ALIAS HEXBC,HEXBVC                  BIT             BIT
   ALIAS HEXVBC,HEXVBVC                BIT VAR         BIT VAR
   ALIAS HEXPC,HEXPVC                  POINTER         POINTER
   ALIAS HEXHC,HEXHVC                  FIX BIN(15)     FIX BIN(15)
   ALIAS HEXFC,HEXFVC                  FIX BIN(31)     FIX BIN(31)
 NAME  HEXCONV(R)               LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=IPOUPDTE
//IPOUPDTE JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL IPOUPDTE PROGRAM FROM 'IPO30.LINKLIB'
//*
//*  THIS PROGRAM IS DESCRIBED IN THE IPO SYSTEM AND INSTALLATION
//*   GUIDE VOL 1 FOR IPO 3.0 RELEASE.
//*
//*  STEP 1:   LINK EDIT PROGRAM INTO TECH.INTEL.MODS.LOAD
//*
//*  STEP 2:   SPZAP THE PROGRAM TO ALLOW OPERATION ON 'NON-IPO'
//*            JCL LIBS.........
//*
//*  S GOLOB  18 OCT 99
//*
//*********************************************************************
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,MAP'
//SYSPRINT DD  SYSOUT=*
//IPOLINK  DD  DSN=IPO30.LINKLIB,DISP=SHR,VOL=SER=FCIMVS,UNIT=3330-1
//SYSUT1   DD  UNIT=SYSDA,SPACE=(1024,(200,20))
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
  INCLUDE IPOLINK(IPOUPDTE)     FETCH MODULE FROM IPO30.LINKLIB
  NAME  IPOUPDTE(R)             STORE IT IN TECH.INTEL.MODS.LOAD
//SPZAP   EXEC PGM=AMASPZAP
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSIN    DD  *
*
* SPZAP TO REMOVE REQUIREMENT THAT A '$$$COIBM' MEMBER BE THE FIRST
*  ONE IN THE PDS TO BE SCANNED.
*    S GOLOB   18 OCT 99
*
  NAME  IPOUPDTE
*
  VER  0548 0A12        SVC  18     FIND
  VER  054A 12FF        LTR  R15,R15
  VER  054C 4780,C55C   BZ   1372(,R12)
*
  REP  054C 47F0,C55C   B    PROCESS...... SKIP THE CHECK.....
*
//
./       ADD   NAME=CPPUPDTE
//CPPUPDTE JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL CPPUPDTE PROGRAM FROM SERVERPAC
//*
//*  STEP 1:   LINK EDIT PROGRAM INTO TECH.INTEL.MODS.LOAD
//*
//*  STEP 2:   SPZAP THE PROGRAM TO ALLOW OPERATION ON 'NON-IPO'
//*            JCL LIBS.........
//*
//*  S GOLOB  18 OCT 99
//*
//*********************************************************************
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,MAP'
//SYSPRINT DD  SYSOUT=*
//IPOLINK  DD  DSN=IPO30.LINKLIB,DISP=SHR,VOL=SER=FCIMVS,UNIT=3330-1
//SYSUT1   DD  UNIT=SYSDA,SPACE=(1024,(200,20))
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
  INCLUDE IPOLINK(CPPUPDTE)     FETCH MODULE FROM IPO30.LINKLIB
  NAME  CPPUPDTE(R)             STORE IT IN TECH.INTEL.MODS.LOAD
//SPZAP   EXEC PGM=AMASPZAP
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSIN    DD  *
*
* SPZAP TO REMOVE REQUIREMENT THAT A '$$$COIBM' MEMBER BE THE FIRST
*  ONE IN THE PDS TO BE SCANNED.
*    S GOLOB   18 OCT 99
*
  NAME  CPPUPDTE
*
  VER  055A 0A12        SVC  18     FIND
  VER  055C 12FF        LTR  R15,R15
  VER  055E 4780,C56E   BZ   1390(,R12)
*
  REP  055E 47F0,C56E   B    PROCESS...... SKIP THE CHECK.....
*
//
./       ADD   NAME=JCLFORMT
//JCLFORMT JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL JCLFORMT - UTILITY TO REFORMAT JOB/PROC
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS JCLFORMT TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   27 AUG 80
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,JCLFORMT
//*
//JCLFORMT EXEC SYSASM,MEMBER=JCLFORMT
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//*                                             PANVALET ACCESS METHOD
//SYSLIN   DD  *
 INCLUDE SYSLIB(JCLFORMT)
 NAME  JCLFORMT(R)              LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=MAPDISK
//MAPDISK JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL MAPDISK - THE MAPDISK UTILITY  MSS SUPPORT
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS MAPDISK TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,MAPDISK0      MAPDISK MAINLINE
++WRITE WORK,MAPDISK1      MAPDISK SUBROUTINE - FORMAT
++WRITE WORK,MAPDISK2      MAPDISK SUBROUTINE - PDS
++WRITE WORK,MAPDISK3      MAPDISK SUBROUTINE - SORT
++WRITE WORK,MAPDISK4      MAPDISK SUBROUTINE - ZTIME
++WRITE WORK,MAPDISK5      MAPDISK SUBROUTINE - PRNT
++WRITE WORK,MAPDISK6      MAPDISK SUBROUTINE - ASM2DATA
++WRITE WORK,MAPDISK7      MAPDISK SUBROUTINE - MSSALLOC
//*
//MAPDISK0 EXEC SYSASM,MEMBER=MAPDISK0    MAPDISK
//MAPDISK1 EXEC SYSASM,MEMBER=MAPDISK1    FORMAT
//MAPDISK2 EXEC SYSASM,MEMBER=MAPDISK2    PDS
//MAPDISK3 EXEC SYSASM,MEMBER=MAPDISK3    SORT
//MAPDISK4 EXEC SYSASM,MEMBER=MAPDISK4    ZTIME
//MAPDISK5 EXEC SYSASM,MEMBER=MAPDISK5    PRNT
//MAPDISK6 EXEC SYSASM,MEMBER=MAPDISK6    ASM2DATA
//MAPDISK7 EXEC SYSASM,MEMBER=MAPDISK7    MSSALLOC
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(MAPDISK0)
 INCLUDE SYSLIB(MAPDISK1)
 INCLUDE SYSLIB(MAPDISK2)
 INCLUDE SYSLIB(MAPDISK3)
 INCLUDE SYSLIB(MAPDISK4)
 INCLUDE SYSLIB(MAPDISK5)
 INCLUDE SYSLIB(MAPDISK6)
 INCLUDE SYSLIB(MAPDISK7)
 ENTRY FASTMAP0
 NAME  MAPDISK(R)          LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=MOP
//MOP JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL MOP - TSO COMMAND TO GENERATE OPERATOR COMMANDS
//*
//*   SYNTAX:   MOP M 3330V,VOL=(SL,SOFTW3)
//*                 -----------------------  OS OPER/JES2 COMMAND
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS MOP TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,MOP           MOP COMMAND
//*
//MOP      EXEC SYSASM,MEMBER=MOP         MOP
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(MOP)
 NAME  MOP(R)              LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=MSSAMS
//MSSAMS JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL MSSAMS - STC TO GEN MSS IDCAMS JOBS   (IPO)
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS MSSAMS TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,MSSAMS        DDASD COMMAND
//*
//MSSAMS EXEC SYSASM,MEMBER=MSSAMS        DDASD
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(MSSAMS)
 NAME MSSAMS(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=MSSDUMP
//MSSDUMP JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL MSSDUMP  - DUMP MSC TABLES IN A NICE FORMAT
//*                    (FROM MSS20.FVTLIB  NO LONGER DISTRIBUTED)
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS MSSDUMP TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,MSSDUMP
/*
//********************************************************************
//MSSDUMP  EXEC  SYSPLI,MEMBER=MSSDUMP
//********************************************************************
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//LOADLIB  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJECT   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJECT(MSSDUMP)
 NAME    MSSDUMP(R)   LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=MSSPDATE
//MSSPDATE JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL MSSPDATE - PUT NICE DATE FORM TO MSS LOG (ROUTCD=13)
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS MSSPDATE TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,MSSPDATE      MSSPDATE COMMAND
//*
//MSSPDATE EXEC SYSASM,MEMBER=MSSPDATE    MSSPDATE
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(MSSPDATE)
 NAME  MSSPDATE(R)         LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=MSSTSO
//MSSTSO JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL MSSTSO - MODIFIED IPO DISPLAY OF MSS SDG USAGE
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS MSSTSO TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,MSSTSO        MSSTSO COMMAND
//*
//MSSTSO EXEC SYSASM,MEMBER=MSSTSO
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(MSSTSO)
 NAME MSSTSO(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=MSSVOL
//MSSVOL JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL MSSVOL   - MSVI LOOKUP UTILITY - USED BY MSVGP CLIST
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS MSSVOL TO SYS2.FCILIB
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,MSSVOL
/*
//********************************************************************
//MSSVOL   EXEC  SYSPLI,MEMBER=MSSVOL
//********************************************************************
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//LOADLIB  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJECT   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJECT(MSSVOL)
 NAME    MSSVOL(R)    LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=MVSMON
//MVSMON JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL MVSMON - THE TSO MVS MONITOR COMMAND (FULLSCR 3270)
//*                  REQUIRES FCIMOD07 AND DIDOCS (LOADED)
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS MVSMON TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   13 MAR 81
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=&&MACRO,DISP=(OLD,PASS),
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//*
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
// PEND
//*
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++WRITE WORK,STRUMAC       IEBUPDTE FORMAT///STRUCTURED ASM MACROS
++OPTION OUTPUT,SCELIB
++WRITE WORK,MVSMON
//*
//* PUT STRUCTURED MACROS INTO WORK DATASET VIA IEBUPDTE
//*
//IEBUPDTE EXEC PGM=IEBUPDTE,PARM='NEW'
//SYSPRINT DD  DUMMY
//SYSIN    DD  DSN=*.PANGET.PAN1.PANDD2,DISP=(OLD,PASS)
//SYSUT2   DD  DSN=&&MACRO,DISP=(NEW,PASS),
//             UNIT=SYSDA,SPACE=(CYL,(2,1,20)),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160,DSORG=PO)
//*
//**** ASSEMBLE ALL THE MODULES
//*
//*
//MVSMON EXEC SYSASM,MEMBER=MVSMON
//*
//*
//**** LINK THE  MODULES TO FORM THE MVSMON LOAD MODULE
//*
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST,RENT,REUS'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(MVSMON)
 NAME MVSMON(R)       LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=NTLM801
//NTLM801  JOB (MVS19200,0194),'KEN TRUE',CLASS=A,MSGCLASS=A,
//             NOTIFY=MVS#KMT,COND=(0,NE) RESTART=XXX.ASM
//*********************************************************************
//*
//* INSTALL NTLM801 - THE PDS MEMBER LOGICAL RECORD READ SUBROUTINE
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS NTLM801 TO SYS2.LINKLIB
//*
//* NOTE: MODULE NTLM801 IS LINKED INTO CALLERS PROGRAM (TRANSPARENT
//*       LOADER ROUTINE)
//*       MODULE NTLM801R IS INVOKED FROM 'SYS2.LINKLIB' TO DO THE
//*       ACTUAL WORK.
//*
//*  K TRUE   24 JUN 82
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEV90,PARM='OBJECT,NODECK'
//SYSIN    DD  DSN=TEMP.NTLM801.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TEMP.NTLM801.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=WORK
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=WORK
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=WORK
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TEMP.NTLM801.OBJ(&MEMBER),DISP=SHR
// PEND
//*
//********************************************************************
//DELETE  EXEC PGM=IEFBR14
//DD1      DD  DSN=TEMP.NTLM801.SOURCE,DISP=(MOD,DELETE,DELETE),
//             UNIT=WORK,SPACE=(TRK,(1))
//DD1A     DD  DSN=TEMP.NTLM801.SOURCE,DISP=(MOD,UNCATLG,DELETE),
//             UNIT=WORK,VOL=REF=*.DD1
//DD2      DD  DSN=TEMP.NTLM801.OBJ,DISP=(MOD,DELETE,DELETE),
//             UNIT=WORK,SPACE=(TRK,(1))
//DD2A     DD  DSN=TEMP.NTLM801.OBJ,DISP=(MOD,UNCATLG,DELETE),
//             UNIT=WORK,VOL=REF=*.DD2
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TEMP.NTLM801.SOURCE,DISP=(NEW,CATLG,DELETE),
//            UNIT=WORK,SPACE=(CYL,(2,1,25)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PO)
//PAN1.OBJ    DD DSN=TEMP.NTLM801.OBJ,DISP=(NEW,CATLG,DELETE),
//            UNIT=WORK,SPACE=(CYL,(1,1,25)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=880,DSORG=PO)
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,NTLM801
++WRITE WORK,NTLM801R
//*
//**** ASSEMBLE ALL THE MODULES
//*
//*
//NTLM801  EXEC SYSASM,MEMBER=NTLM801  PDSREAD (LOADER ROUTINE)
//NTLM801R EXEC SYSASM,MEMBER=NTLM801R REAL PDSREAD ROUTINE
//*
//LKED     EXEC PGM=IEWL,PARM='XREF,LIST',REGION=512K
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=VIO,SPACE=(1024,(200,20))
//SYSLMOD  DD  DSN=SYS2.LINKLIB,DISP=SHR
//SYSLIB   DD  DSN=TEMP.NTLM801.OBJ,DISP=SHR
//SYSLIN   DD  *
  INCLUDE SYSLIB(NTLM801)
  NAME  NTLM801(R) LINK TO SYS2.LINKLIB
//LKED2    EXEC PGM=IEWL,PARM='XREF,LIST,RENT,REUS',REGION=512K
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=VIO,SPACE=(1024,(200,20))
//SYSLMOD  DD  DSN=SYS2.LINKLIB,DISP=SHR
//SYSLIB   DD  DSN=TEMP.NTLM801.OBJ,DISP=SHR
//SYSLIN   DD  *
  INCLUDE SYSLIB(NTLM801R)
  NAME  NTLM801R(R) LINK TO SYS2.LINKLIB
//*
//AFTER   EXEC PGM=IEFBR14
//DD1      DD  DSN=TEMP.NTLM801.SOURCE,DISP=(OLD,DELETE)
//DD2      DD  DSN=TEMP.NTLM801.OBJ,DISP=(OLD,DELETE)
//
./       ADD   NAME=NTLM802
//NTLM802  JOB (MVS19200,0194),'KEN TRUE',CLASS=A,MSGCLASS=A,
//             NOTIFY=MVS#KMT,COND=(0,NE) RESTART=XXX.ASM
//*********************************************************************
//*
//* INSTALL NTLM802 - THE PDS DIRECTORY READ SUBROUTINE
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS NTLM802 TO SYS2.LINKLIB
//*
//* NOTE: MODULE NTLM802 IS LINKED INTO CALLERS PROGRAM (TRANSPARENT
//*       LOADER ROUTINE)
//*       MODULE NTLM802R IS INVOKED FROM 'SYS2.LINKLIB' TO DO THE
//*       ACTUAL WORK.
//*
//*  K TRUE   24 JUN 82
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEV90,PARM='OBJECT,NODECK'
//SYSIN    DD  DSN=TEMP.NTLM802.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TEMP.NTLM802.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=WORK
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=WORK
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=WORK
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TEMP.NTLM802.OBJ(&MEMBER),DISP=SHR
// PEND
//*
//********************************************************************
//DELETE  EXEC PGM=IEFBR14
//DD1      DD  DSN=TEMP.NTLM802.SOURCE,DISP=(MOD,DELETE,DELETE),
//             UNIT=WORK,SPACE=(TRK,(1))
//DD1A     DD  DSN=TEMP.NTLM802.SOURCE,DISP=(MOD,UNCATLG,DELETE),
//             UNIT=WORK,VOL=REF=*.DD1
//DD2      DD  DSN=TEMP.NTLM802.OBJ,DISP=(MOD,DELETE,DELETE),
//             UNIT=WORK,SPACE=(TRK,(1))
//DD2A     DD  DSN=TEMP.NTLM802.OBJ,DISP=(MOD,UNCATLG,DELETE),
//             UNIT=WORK,VOL=REF=*.DD2
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TEMP.NTLM802.SOURCE,DISP=(NEW,CATLG,DELETE),
//            UNIT=WORK,SPACE=(CYL,(2,1,25)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PO)
//PAN1.OBJ    DD DSN=TEMP.NTLM802.OBJ,DISP=(NEW,CATLG,DELETE),
//            UNIT=WORK,SPACE=(CYL,(1,1,25)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=880,DSORG=PO)
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,NTLM802
++WRITE WORK,NTLM802R
//*
//**** ASSEMBLE ALL THE MODULES
//*
//*
//NTLM802  EXEC SYSASM,MEMBER=NTLM802  PDSDIR  (LOADER ROUTINE)
//NTLM802R EXEC SYSASM,MEMBER=NTLM802R REAL PDSDIR ROUTINE
//*
//LKED     EXEC PGM=IEWL,PARM='XREF,LIST',REGION=512K
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=VIO,SPACE=(1024,(200,20))
//SYSLMOD  DD  DSN=SYS2.LINKLIB,DISP=SHR
//SYSLIB   DD  DSN=TEMP.NTLM802.OBJ,DISP=SHR
//SYSLIN   DD  *
  INCLUDE SYSLIB(NTLM802)
  NAME  NTLM802(R) LINK TO SYS2.LINKLIB
//LKED2    EXEC PGM=IEWL,PARM='XREF,LIST,RENT,REUS',REGION=512K
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=VIO,SPACE=(1024,(200,20))
//SYSLMOD  DD  DSN=SYS2.LINKLIB,DISP=SHR
//SYSLIB   DD  DSN=TEMP.NTLM802.OBJ,DISP=SHR
//SYSLIN   DD  *
  INCLUDE SYSLIB(NTLM802R)
  NAME  NTLM802R(R) LINK TO SYS2.LINKLIB
//*
//AFTER   EXEC PGM=IEFBR14
//DD1      DD  DSN=TEMP.NTLM802.SOURCE,DISP=(OLD,DELETE)
//DD2      DD  DSN=TEMP.NTLM802.OBJ,DISP=(OLD,DELETE)
//
./       ADD   NAME=OSDEBE
//OSDEBE JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL OSDEBE - OPER UTIL FOR TAPE/CARD/PRINT
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS OSDEBE TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   27 AUG 80
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,OSDEBE2
//*
//OSDEBE EXEC SYSASM,MEMBER=OSDEBE2
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//*                                             PANVALET ACCESS METHOD
//SYSLIN   DD  *
 INCLUDE SYSLIB(OSDEBE2)
 NAME  OSDEBE(R)                LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=OZPDSUNL
//OZPDSUNL JOB (MVS19200,0194),'KEN TRUE',CLASS=A,MSGCLASS=A,
//            NOTIFY=KMT,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL OZPDSUNL - UNLOAD VB 84/6233 PDS MEMBERS INTO INFOSYS FORMAT
//*                   FOR RELOAD INTO INFOSYS DATABASE
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS OZPDSUNL TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   27 AUG 81
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,OZPDSUNL
//*
//OZPDSUNL EXEC SYSASM,MEMBER=OZPDSUNL
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(OZPDSUNL)
 NAME  OZPDSUNL(R)              LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=PANFETCH
//PANFETCH JOB (MVS19200,0194),'KEN TRUE',CLASS=A,MSGCLASS=A,
//             NOTIFY=MVS#KMT,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL PANFETCH - FETCH SINGLE MEMBER FROM  OF PS/PO/DA/ISAM/PANV
//*                    DATASETS TO TAPE
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS PANFETCH TO SYS2.LINKLIB
//*
//*  K TRUE   21 MAR 81
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TEMP.PANFETCH.SOURCE(&MEMBER),DISP=(OLD,PASS),
//            VOL=REF=*.PANGET.PAN1.SCELIB,UNIT=WORK
//SYSLIB   DD  DSN=*.PANGET.PAN1.SCELIB,DISP=(OLD,PASS),
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=WORK
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=WORK
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=WORK
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=&&OBJLIB(&MEMBER),DISP=(MOD,PASS),
//             UNIT=WORK,SPACE=(400,(800,400,10),,,ROUND),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=880,DSORG=PO)
// PEND
//*
//********************************************************************
//DELETE  EXEC PGM=IEFBR14
//DD1      DD  DSN=TEMP.PANFETCH.SOURCE,DISP=(MOD,DELETE,DELETE),
//             UNIT=WORK,SPACE=(TRK,(1))
//DD1A     DD  DSN=TEMP.PANFETCH.SOURCE,DISP=(MOD,UNCATLG,DELETE),
//             UNIT=WORK,VOL=REF=*.DD1
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TEMP.PANFETCH.SOURCE,DISP=(NEW,CATLG,DELETE),
//            UNIT=WORK,SPACE=(CYL,(2,1,5),RLSE),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PO)
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,PANFETCH
//*
//**** ASSEMBLE ALL THE MODULES
//*
//*
//PANFETCH EXEC SYSASM,MEMBER=PANFETCH
//*
//*
//**** LINK THE  MODULES TO FORM THE PANFETCH LOAD MODULE
//*
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=SYS2.LINKLIB,DISP=SHR
//LINKLIB  DD  DSN=SYS2.LINKLIB,DISP=SHR
//SYSUT1   DD  UNIT=WORK,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=&&OBJLIB,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(PANFETCH)
 INCLUDE LINKLIB(PAM)      PANVALET ACCESS METHOD
 NAME PANFETCH(R)     LINK TO SYS2.LINKLIB
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=PANSCAN
//PANSCAN  JOB (MVS19200,0194),'KEN TRUE  ',CLASS=A,MSGCLASS=A,
//             NOTIFY=MVS#KMT,COND=(7,LE)
//*********************************************************************
//*
//* INSTALL PANSCAN  - PANVALET SOURCE LIBRARY SCANNER
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS PANSCAN TO SYS2.LINKLIB
//*
//* KEN TRUE   20 DEC 82
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TEMP.PANSCAN.SOURCE(&MEMBER),DISP=(OLD,PASS),
//            VOL=REF=*.PANGET.PAN1.SCELIB,UNIT=WORK
//SYSLIB   DD  DSN=TEMP.PANSCAN.SOURCE,DISP=(OLD,PASS),
//            VOL=REF=*.PANGET.PAN1.SCELIB,UNIT=WORK
//SYSLIN   DD  DSN=&&OBJLIB(&MEMBER),DISP=(MOD,PASS),
//             UNIT=WORK,SPACE=(400,(800,400,10),,,ROUND),
//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=880,DSORG=PO)
// PEND
//*
//********************************************************************
//DELETE  EXEC PGM=IEFBR14
//DD1      DD  DSN=TEMP.PANSCAN.SOURCE,DISP=(MOD,DELETE,DELETE),
//             UNIT=WORK,SPACE=(TRK,(1))
//DD1A     DD  DSN=TEMP.PANSCAN.SOURCE,DISP=(MOD,UNCATLG,DELETE),
//             UNIT=WORK,VOL=REF=*.DD1
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TEMP.PANSCAN.SOURCE,DISP=(NEW,CATLG,DELETE),
//            UNIT=WORK,SPACE=(CYL,(2,1,5),RLSE),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PO)
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,PANSCAN
++WRITE WORK,PANSCAN
//*
//**** ASSEMBLE PANSCAN MODULE
//*
//*
//PANSCAN  EXEC  SYSPLI,MEMBER=PANSCAN
//*
//*
//**** LINK PANSCAN LOAD MODULE ****
//*
//*
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLMOD  DD  DSN=SYS2.LINKLIB,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(1024,(180,180),,,ROUND)
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=SYS2.LINKLIB,DISP=SHR
//OBJECT   DD  DSN=&&OBJLIB,DISP=(OLD,DELETE)
//SYSLIN   DD  *
 INCLUDE OBJECT(PANSCAN)
 INCLUDE SYSLIB(PAM)
 NAME    PANSCAN(R)   LINK TO SYS2.LINKLIB
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=PROCXREF
//PROCXREF JOB (MVS19200,0194),'KEN TRUE',CLASS=A,MSGCLASS=A,
//             NOTIFY=MVS#KMT,COND=(0,NE) TYPRUN=HOLD
//*********************************************************************
//*
//* INSTALL PROCXREF - THE JCL CROSS REFERENCE UTILITY FROM SHARE
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS PROCXREF TO SYS2.LINKLIB
//*
//*  K TRUE   13 MAR 81
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEV90,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TEMP.PROCXREF.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TEMP.PROCXREF.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=WORK
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=WORK
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=WORK
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TEMP.PROCXREF.OBJ(&MEMBER),DISP=SHR
// PEND
//*
//********************************************************************
//DELETE  EXEC PGM=IEFBR14
//DD1      DD  DSN=TEMP.PROCXREF.SOURCE,DISP=(MOD,DELETE,DELETE),
//             UNIT=WORK,SPACE=(TRK,(1))
//DD1A     DD  DSN=TEMP.PROCXREF.SOURCE,DISP=(MOD,UNCATLG,DELETE),
//             UNIT=WORK,VOL=REF=*.DD1
//DD2      DD  DSN=TEMP.PROCXREF.OBJ,DISP=(MOD,DELETE,DELETE),
//             UNIT=WORK,SPACE=(TRK,(1))
//DD2A     DD  DSN=TEMP.PROCXREF.OBJ,DISP=(MOD,UNCATLG,DELETE),
//             UNIT=WORK,VOL=REF=*.DD2
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//SCELIB DD DSN=TEMP.PROCXREF.SOURCE,DISP=(NEW,CATLG,DELETE),
//            UNIT=WORK,SPACE=(CYL,(2,1,25)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PO)
//OBJ    DD DSN=TEMP.PROCXREF.OBJ,DISP=(NEW,CATLG,DELETE),
//            UNIT=WORK,SPACE=(CYL,(1,1,25)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=880,DSORG=PO)
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,PROCXREF
++WRITE WORK,PROCXRE1
++WRITE WORK,PROCXRE2
++WRITE WORK,PROCXRE3
//*
//**** ASSEMBLE ALL THE MODULES
//*
//*
//PROCXREF EXEC SYSASM,MEMBER=PROCXREF   MAINLINE
//PROCXRE1 EXEC SYSASM,MEMBER=PROCXRE1   DSN CROSS REF
//PROCXRE2 EXEC SYSASM,MEMBER=PROCXRE2   SYSOUT CROSS REF
//PROCXRE3 EXEC SYSASM,MEMBER=PROCXRE3   PGM CROSS REF
//*
//LKED     EXEC PGM=IEWL,PARM='XREF,LIST',REGION=512K
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=VIO,SPACE=(1024,(200,20))
//SYSLMOD  DD  DSN=SYS2.LINKLIB,DISP=SHR
//SYSLIB   DD  DSN=TEMP.PROCXREF.OBJ,DISP=SHR
//SYSLIN   DD  *
  INCLUDE SYSLIB(PROCXREF)
  INCLUDE SYSLIB(PROCXRE1)
  INCLUDE SYSLIB(PROCXRE2)
  INCLUDE SYSLIB(PROCXRE3)
  NAME PROCXREF(R)
//*
//AFTER   EXEC PGM=IEFBR14
//DD1      DD  DSN=TEMP.PROCXREF.SOURCE,DISP=(OLD,DELETE)
//DD2      DD  DSN=TEMP.PROCXREF.OBJ,DISP=(OLD,DELETE)
//
./       ADD   NAME=PSN
//PSN      JOB (65003,B29),'K.TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE),RESTART=WORK.A
//*********************************************************************
//*
//*  INSTALL THE PROCSCAN COMMAND - A CLIST DRIVER PROCESSOR TO EDIT
//*  PROCS TO FCI STANDARDS - PHASE ONE
//*  MIKE FARMER  3 AUGUST, 1980
//*   ADD REFORMAT - FIRM UP EDITS - 1 NOV 80
//*
//*********************************************************************
//PSNASML PROC MBR=NEEDED,RENT=NORENT
//A        EXEC PGM=IFOX00,PARM='XREF(SHORT),NODECK,&RENT,OBJECT'
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,DCB=OPTCD=H
//SYSUT1   DD  UNIT=VIO,SPACE=(1700,(600,100))
//SYSUT2   DD  UNIT=VIO,SPACE=(1700,(300,50))
//SYSUT3   DD  UNIT=VIO,SPACE=(1700,(300,50))
//SYSPRINT DD  SYSOUT=*
//SYSPUNCH DD  DUMMY,DCB=BLKSIZE=80
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MBR),DISP=SHR
//SYSIN    DD  DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(&MBR)
//*
//L        EXEC PGM=IEWL,PARM='XREF,LET,NCAL,LIST,&RENT',REGION=512K,
//             COND=(8,LE,A)
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(50,20))
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MBR),DISP=SHR
//         DD  DDNAME=SYSIN
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD(&MBR),DISP=SHR INSTALL VERSION
//SYSIN    DD  DUMMY
//*********************************************************************
//        PEND
//*
//PAN1    EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.PSNLIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,PSNLIB
++WRITE  WORK,PSNBOSS
++WRITE  WORK,PSNCOMNT
++WRITE  WORK,PSNDD
++WRITE  WORK,PSNDDTAB
++WRITE  WORK,PSNEDITD
++WRITE  WORK,PSNEDITS
++WRITE  WORK,PSNEDITX
++WRITE  WORK,PSNENDM
++WRITE  WORK,PSNERLST
++WRITE  WORK,PSNERROR
++WRITE  WORK,PSNEXEC
++WRITE  WORK,PSNINIT
++WRITE  WORK,PSNMBLOK
++WRITE  WORK,PSNMCMT
++WRITE  WORK,PSNMCTR
++WRITE  WORK,PSNMDD
++WRITE  WORK,PSNMDDE
++WRITE  WORK,PSNMDDLS
++WRITE  WORK,PSNMERLS
++WRITE  WORK,PSNMERMD
++WRITE  WORK,PSNMERMS
++WRITE  WORK,PSNMERR
++WRITE  WORK,PSNMEXEC
++WRITE  WORK,PSNMFDD
++WRITE  WORK,PSNMFKEY
++WRITE  WORK,PSNMI001
++WRITE  WORK,PSNMI002
++WRITE  WORK,PSNMKEY
++WRITE  WORK,PSNMKEYD
++WRITE  WORK,PSNMMOD
++WRITE  WORK,PSNMOPT
++WRITE  WORK,PSNMREPT
++WRITE  WORK,PSNMSCAN
++WRITE  WORK,PSNMSTRT
++WRITE  WORK,PSNMSUBS
++WRITE  WORK,PSNMSYM
++WRITE  WORK,PSNMWORK
++WRITE  WORK,PSNOPT
++WRITE  WORK,PSNPDSR
++WRITE  WORK,PSNPROC
++WRITE  WORK,PSNREAD
++WRITE  WORK,PSNREFMT
++WRITE  WORK,PSNRFDD
++WRITE  WORK,PSNRFEXC
++WRITE  WORK,PSNRFPRC
++WRITE  WORK,PSNSCAN
++WRITE  WORK,PSNSETUP
++WRITE  WORK,PSNSUBOP
++WRITE  WORK,PSNSUBST
++WRITE  WORK,PSNTERM
++WRITE  WORK,PSNTYPE
++WRITE  WORK,PSNWORK
++WRITE  WORK,PSNWRITE
//********************************************************************
//WORK   EXEC  PSNASML,MBR=PSNWORK
//ERLS   EXEC  PSNASML,MBR=PSNERLST
//OPTN   EXEC  PSNASML,MBR=PSNOPT
//BOSS   EXEC  PSNASML,RENT=RENT,MBR=PSNBOSS
//COMT   EXEC  PSNASML,RENT=RENT,MBR=PSNCOMNT
//DDCD   EXEC  PSNASML,RENT=RENT,MBR=PSNDD
//DDTB   EXEC  PSNASML,RENT=RENT,MBR=PSNDDTAB
//EDTD   EXEC  PSNASML,RENT=RENT,MBR=PSNEDITD
//EDTS   EXEC  PSNASML,RENT=RENT,MBR=PSNEDITS
//EDTX   EXEC  PSNASML,RENT=RENT,MBR=PSNEDITX
//ENDM   EXEC  PSNASML,RENT=RENT,MBR=PSNENDM
//ERRO   EXEC  PSNASML,RENT=RENT,MBR=PSNERROR
//EXEC   EXEC  PSNASML,RENT=RENT,MBR=PSNEXEC
//INIT   EXEC  PSNASML,RENT=RENT,MBR=PSNINIT
//PDSR   EXEC  PSNASML,RENT=RENT,MBR=PSNPDSR
//PROC   EXEC  PSNASML,RENT=RENT,MBR=PSNPROC
//READ   EXEC  PSNASML,RENT=RENT,MBR=PSNREAD
//RRMT   EXEC  PSNASML,RENT=RENT,MBR=PSNREFMT
//RFDD   EXEC  PSNASML,RENT=RENT,MBR=PSNRFDD
//RFEX   EXEC  PSNASML,RENT=RENT,MBR=PSNRFEXC
//RFPR   EXEC  PSNASML,RENT=RENT,MBR=PSNRFPRC
//SCAN   EXEC  PSNASML,RENT=RENT,MBR=PSNSCAN
//SETU   EXEC  PSNASML,RENT=RENT,MBR=PSNSETUP
//SUBO   EXEC  PSNASML,RENT=RENT,MBR=PSNSUBOP
//SUBS   EXEC  PSNASML,RENT=RENT,MBR=PSNSUBST
//TERM   EXEC  PSNASML,RENT=RENT,MBR=PSNTERM
//TYPE   EXEC  PSNASML,RENT=RENT,MBR=PSNTYPE
//WRIT   EXEC  PSNASML,RENT=RENT,MBR=PSNWRITE
//
./       ADD   NAME=P051B10
//P051B10 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL P051B10 - THE WHOGOT COMMAND
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P051B10 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,S051B10       WHOGOT COMMAND
//*
//S051B10  EXEC SYSASM,MEMBER=S051B10     WHOGOT
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(S051B10)
 ALIAS   DSN,WHOGOT
 NAME P051B10(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=P051B12
//P051B12 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL P051B12 - THE DSPACE COMMAND
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P051B12 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,S051B12       DSPACE COMMAND
//*
//S051B12  EXEC SYSASM,MEMBER=S051B12     DSPACE
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(S051B12)
 ALIAS   DS,DSPACE
 NAME P051B12(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=P051B12L
//P051B12L JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL P051B12L - THE UCBLOGER STARTED TASK
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P051B12L TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,S051B12L      UCBLOGER COMMAND
//*
//S051B12L EXEC SYSASM,MEMBER=S051B12L    UCBLOGER
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(S051B12L)
 ALIAS   UCBLOGER
 NAME P051B12L(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=P051B15
//P051B15 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL P051B15 - FCI/UCLA DDSTAR COMMAND - SPOOL TO DATASET FROM
//*                   A CLIST.   REWRITTEN TO NOT USE UCLA URMACROS.
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P051B15 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   27 AUG 80
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,P051B15
++WRITE WORK,S051B15
//*
//P051B15 EXEC SYSASM,MEMBER=P051B15
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(P051B15)
 ALIAS  DDSTAR
 NAME  P051B15(R)               LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=P051B16
//P051B16 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL P051B16 - THE LS/LISTSPC COMMAND
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P051B16 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,S051B16       LISTSPC COMMAND
++WRITE WORK,S051B16A      GETATTR SUBROUTINE
++WRITE WORK,S051B16B      LOCINDEX SUBROUTINE
//*
//S051B16  EXEC SYSASM,MEMBER=S051B16     LISTSPC
//S051B16A EXEC SYSASM,MEMBER=S051B16A    GETATTR
//S051B16B EXEC SYSASM,MEMBER=S051B16B    LOCINDEX
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(S051B16,S051B16A,S051B16B)
 ALIAS   LS,LISTS,LISTSPC
 ENTRY LISTSPC
 NAME P051B16(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=P051B19
//P051B19 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL P051B19 - THE DTAPES
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P051B19 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,S051B19       DTAPES COMMAND
//*
//S051B19  EXEC SYSASM,MEMBER=S051B19     LISTSPC
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(S051B19)
 ALIAS   DT,DTAPES
 NAME P051B19(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=P963P00
//P963P00 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL DASD MANAGEMENT SYSTEM - MAINLINE PROGRAM
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P963P00 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
//********************************************************************
//        PEND
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
//********************************************************************
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,P963P00
++WRITE WORK,S963P00
++OPTION OUTPUT,SCELIB,P963P00A
++WRITE WORK,S963P00A
++OPTION OUTPUT,SCELIB,FINDENQ
++WRITE WORK,FINDENQ
++OPTION OUTPUT,SCELIB,R963A11
++WRITE WORK,S963A11
/*
//********************************************************************
//P963P00  EXEC  SYSPLI,MEMBER=P963P00
//********************************************************************
//P963P00A EXEC  SYSPLI,MEMBER=P963P00A
//********************************************************************
//********************************************************************
//********************************************************************
//FINDENQ EXEC   SYSASM,MEMBER=FINDENQ
//********************************************************************
//R963A11 EXEC   SYSASM,MEMBER=R963A11
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJLIB(P963P00,P963P00A)
 INCLUDE OBJLIB(FINDENQ,R963A11)
 INCLUDE SYSLIB(R941X11)
 NAME    P963P00(R)   LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=P963P02
//P963P02 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL DASD MANAGEMENT SYSTEM - DATASET SCRATCH PROGRAM
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P963P02 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
//********************************************************************
//        PEND
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
//********************************************************************
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,P963P02
++WRITE WORK,S963P02
++OPTION OUTPUT,SCELIB,R963A30
++WRITE WORK,S963A30
/*
//********************************************************************
//P963P02  EXEC  SYSPLI,MEMBER=P963P02
//********************************************************************
//R963A30 EXEC   SYSASM,MEMBER=R963A30
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJLIB(P963P02)
 INCLUDE OBJLIB(R963A30)
 INCLUDE SYSLIB(R941X11)
 NAME    P963P02(R)   LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=P963P10
//P963P10 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL DASD MANAGEMENT SYSTEM - GEN SCRATCH LOG FROM OUTLOG OF
//*                                  P963P00 (FOR RECOVERY ONLY)
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P963P10 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
//********************************************************************
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,P963P10
++WRITE WORK,S963P10
/*
//********************************************************************
//P963P10  EXEC  SYSPLI,MEMBER=P963P10
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJLIB(P963P10)
 INCLUDE SYSLIB(R941X11)
 NAME    P963P10(R)   LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=P963P20
//P963P20 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL DASD MANAGEMENT SYSTEM - GEN SCRATCH REPORT FOR USERS ON
//*                                  DATASETS TO BE SCRATCHED
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P963P20 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
//********************************************************************
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,P963P20
++WRITE WORK,S963P20
/*
//********************************************************************
//P963P20  EXEC  SYSPLI,MEMBER=P963P20
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJLIB(P963P20)
 INCLUDE SYSLIB(R062A10)
 INCLUDE SYSLIB(R941X11)
 NAME    P963P20(R)   LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=P963P27
//P963P27 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL DASD MANAGEMENT SYSTEM - PERFORM AUTO SCRATCH FOR ROLLED
//*                                  OFF GDG DATASETS FLAGGED BY P963P00
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P963P27 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
//********************************************************************
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,P963P27
++WRITE WORK,S963P27
/*
//********************************************************************
//P963P27  EXEC  SYSPLI,MEMBER=P963P27
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJLIB(P963P27)
 INCLUDE SYSLIB(ABEND)
 NAME    P963P27(R)   LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=P963P30
//P963P30 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL P963P30  - MSVI LOOKUP UTILITY - USED BY DASDMON SYSTEM
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P963P30 TO SYS2.FCILIB
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,P963P30
++WRITE WORK,S963P30
/*
//********************************************************************
//P963P30  EXEC  SYSPLI,MEMBER=P963P30
//********************************************************************
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//LOADLIB  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJECT   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJECT(P963P30)
 INCLUDE LOADLIB(R941X11)
 NAME    P963P30(R)   LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=P963P35
//P963P35 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL P963P35  - DUPLICATE VOLUME ELIMINATOR - USED TO ENSURE THAT
//*                    EACH VOLUME SELECTED FOR MONITORING HAS ITS VTOC
//*                    MAPPED ONLY ONCE
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P963P35 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,P963P35
++WRITE WORK,S963P35
/*
//********************************************************************
//P963P35  EXEC  SYSPLI,MEMBER=P963P35
//********************************************************************
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//LOADLIB  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJECT   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJECT(P963P35)
 INCLUDE LOADLIB(R941X11)
 NAME    P963P35(R)   LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=P963P70
//P963P70 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL P963P70  - GET REPLIES FROM OPER ON SUPERSCR OPERATIONS
//*                    USED BY 'SPCSCR'
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P963P70 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,P963P70
++WRITE WORK,S963P70
/*
//********************************************************************
//P963P70  EXEC  SYSPLI,MEMBER=P963P70
//********************************************************************
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//LOADLIB  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJECT   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJECT(P963P70)
 NAME    P963P70(R)   LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=P963P71
//P963P71 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL P963P71  - PROMPT OPER FOR EXCLUDE OF DATASETS FROM SCRATCH
//*                    BASED ON DSNAME AND WTOR OPERATOR REPLIES.
//*                    USED BY 'SPCSCR'
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P963P71 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,P963P71
++WRITE WORK,S963P71
/*
//********************************************************************
//P963P71  EXEC  SYSPLI,MEMBER=P963P71
//********************************************************************
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//LOADLIB  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJECT   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJECT(P963P71)
 INCLUDE LOADLIB(ABEND)
 NAME    P963P71(R)   LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=P963P75
//P963P75 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL DASD MANAGEMENT SYSTEM - DATASET HISTORY FILE MAINT PGM
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P963P75 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
//********************************************************************
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,P963P75
++WRITE WORK,S963P75
/*
//********************************************************************
//P963P75  EXEC  SYSPLI,MEMBER=P963P75
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJLIB(P963P75)
 INCLUDE SYSLIB(ABEND)
 NAME    P963P75(R)   LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=P963P75A
//P963P75A JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL DASD MANAGEMENT SYSTEM - XMIT GROUP SPACE CHECK PROGRAM
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P963P75A TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
//********************************************************************
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,P963P75A
++WRITE WORK,S963P75A
/*
//********************************************************************
//P963P75A EXEC  SYSPLI,MEMBER=P963P75A
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJLIB(P963P75A)
 INCLUDE SYSLIB(ABEND)
 NAME    P963P75A(R)  LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=QUEUE
//QUEUE    JOB (MVS19200,0194),'KEN TRUE',CLASS=W,MSGCLASS=X,
//             NOTIFY=MVS#KMT,COND=(0,NE),RESTART=ASM
//********************************************************************
//*                                                                  *
//* INSTALL TSO  Q U E U E   COMMAND - EXAMINE JES2 SYSIN/SYSOUT     *
//*                                    WHILE JOBS ARE ON INPUT/XEQ/  *
//*    JES2    S P 1 . 3               OUTPUT JES2 QUEUES.           *
//*                                                                  *
//*  KEN TRUE   2 MAR 83                                              *
//********************************************************************
//*
//********************************************************************
//PAN1    EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*            UNIT=WORK,SPACE=(CYL,(3,1,25)),
//*            DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,Q3ACTIVE ACTIVE
++WRITE WORK,Q3ALLOC  ALLOCATE
++WRITE WORK,Q3CDN    CDN
++WRITE WORK,Q3CHCT   CHCT
++WRITE WORK,Q3CJCT   CJCT
++WRITE WORK,Q3CJHIST CJHIST
++WRITE WORK,Q3CJOE   CJOE
++WRITE WORK,Q3CJQE   CJQE
++WRITE WORK,Q3CKPT   CKPT
++WRITE WORK,Q3CPDDB  CPDDB
++WRITE WORK,Q3CPFK   CPFK
++WRITE WORK,Q3CSPIN  CSPIN
++WRITE WORK,Q3CTGPS  CTGPS
++WRITE WORK,Q3CTSO   CTSO
++WRITE WORK,Q3DDNAME DDNAME
++WRITE WORK,Q3DISPLY DISPLAY
++WRITE WORK,Q3FNDJOB FINDJOB
++WRITE WORK,Q3FDPDDB FINDPDDB
++WRITE WORK,Q3FORMAT FORMAT
++WRITE WORK,Q3HELP   HELP
++WRITE WORK,Q3HEXBLK HEXBLK
++WRITE WORK,Q3HEXDMP HEXDUMP
++WRITE WORK,Q3INIT   INIT
++WRITE WORK,Q3INITS  INITS
++WRITE WORK,Q3JCL    JCL
++WRITE WORK,Q3JLOG   JLOG
++WRITE WORK,Q3JMSG   JMSG
++WRITE WORK,Q3LIST   LIST
++WRITE WORK,Q3LISTDS LISTDS
++WRITE WORK,Q3PARSE  PARSE
++WRITE WORK,Q3PRINT  PRINT
++WRITE WORK,Q3QUEUE  QUEUE
++WRITE WORK,Q3Q0     Q0
++WRITE WORK,Q3READSP READSPC
++WRITE WORK,Q3REPOS  REPOS
++WRITE WORK,Q3SAVE   SAVE
++WRITE WORK,Q3SEARCH SEARCH
++WRITE WORK,Q3SYSLOG SYSLOG
++WRITE WORK,Q3SYSOUT SYSOUT
++WRITE WORK,Q3XDS    XDS
++OPTION OUTPUT,SCELIB,$JQT         MACRO
++WRITE WORK,Q3QJQT                 MACRO
++OPTION OUTPUT,SCELIB,MODESET      MACRO
++WRITE WORK,Q3MODEST  MODESET      MACRO
++OPTION OUTPUT,SCELIB,QCOMMON      MACRO
++WRITE WORK,Q3QCOMMN  QCOMMON      MACRO
++OPTION OUTPUT,SCELIB,QDEBUG       MACRO
++WRITE WORK,Q3QDEBUG  QDEBUG       MACRO
++OPTION OUTPUT,SCELIB,QSTART       MACRO
++WRITE WORK,Q3QSTART  QSTART       MACRO
++OPTION OUTPUT,SCELIB,QSTOP        MACRO
++WRITE WORK,Q3QSTOP   QSTOP        MACRO
++OPTION OUTPUT,SCELIB,QTILT        MACRO
++WRITE WORK,Q3QTILT   QTILT        MACRO
//*
//ASM     EXEC PGM=IEV90,
// PARM='DECK,NOLOAD,XREF(SHORT),TERM,BATCH,SYSPARM((SP,ACF2,))'
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR, QUEUE MACRO LIBRARY
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR,          SYSTEM MACRO LIBRARY
//             UNIT=3350,VOL=SER=IPORES                           INTEL
//         DD  DSN=SYS1.AMODGEN,DISP=SHR,         SYSTEM MACRO LIBRARY
//             UNIT=3350,VOL=SER=IPORES                           INTEL
//         DD  DSN=SYS1.SMPMTS,DISP=SHR,          JES MACROS
//             UNIT=3350,VOL=SER=IPORES                           INTEL
//         DD  DSN=SYS1.HASPSRC,DISP=SHR,         JES MACROS
//             UNIT=3380,VOL=SER=PAGE21                           INTEL
//         DD  DSN=NTL1.ACF313.ACFMAC,DISP=SHR    ACF MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(25,5)),UNIT=WORK
//SYSUT2   DD  SPACE=(CYL,(25,5)),UNIT=WORK
//SYSUT3   DD  SPACE=(CYL,(25,5)),UNIT=WORK
//SYSTERM  DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//SYSPUNCH DD  UNIT=WORK,SPACE=(CYL,(5,5)),DISP=(,PASS),
//             DCB=(LRECL=80,RECFM=FB,BLKSIZE=3120),DSN=&&T
//SYSIN    DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3Q0)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3FDPDDB)
//*   LEAVE FINDPDDB (Q3FDPDDB) HERE    *//
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3ACTIVE)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3ALLOC)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3CDN)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3CHCT)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3CJCT)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3CJHIST)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3CJOE)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3CJQE)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3CKPT)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3CPDDB)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3CPFK)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3CSPIN)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3CTGPS)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3CTSO)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3DDNAME)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3DISPLY)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3FNDJOB)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3FORMAT)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3HELP)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3HEXBLK)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3HEXDMP)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3INIT)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3INITS)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3JCL)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3JLOG)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3JMSG)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3LIST)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3LISTDS)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3PARSE)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3PRINT)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3QUEUE)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3READSP)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3REPOS)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3SAVE)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3SEARCH)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3SYSLOG)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3SYSOUT)
//         DD DISP=SHR,DSN=TECH.INTEL.MODS.SOURCE(Q3XDS)
//LKED   EXEC  PGM=IEWL,PARM='XREF,LIST,LET,NCAL',REGION=1024K
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//ACFMOD   DD  DSN=NTL1.ACF313.ACFMOD,DISP=SHR                    INTEL
//SYSUT1   DD  UNIT=WORK,SPACE=(CYL,(8,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIN   DD  DSN=&&T,DISP=(OLD,DELETE)
//         DD  *
 IDENTIFY QUEUE('QUEUE CMD - SP1.3 W/INTEL MODS')                 INTEL
 INCLUDE ACFMOD($ACFGCVT)
 ENTRY QUEUE
 ALIAS Q                                                          INTEL
 NAME QUEUE(R)
//AFTER   EXEC PGM=IEFBR14                                        INTEL
//
./       ADD   NAME=QUEUEDOC
 DOCUMENTATION FOR INTEL CHANGES TO QUEUE COMMAND:

 THIS VERSION IS BASED ON JACK'S OFFICIAL VERSION WITH MODS THRU
 UF044 (16 DEC 82) INCLUDING RNB MODS THRU RNB25
 (SEE UNIV. OF FLORIDA MODS, AND RANIER BANK MODS LISTED
  BELOW (COPIED FROM $UFDOC AND $RNBDOC ON JACK'S TAPE)

 SUGGESTIONS/COMPLAINTS SHOULD BE ADDRESSED TO:


      KEN TRUE
      MANAGER, IBM BUSINESS SYSTEMS SOFTWARE

      INTEL CORPORATION
      1766 JUNCTION AVENUE
      SAN JOSE, CALIFORNIA  95112
      (408) 987-5004


 SINCE WE STORE OUR SOURCE ON PANVALET, AND LIKE TO KEEP MODULES OF
 A PROGRAM TOGETHER, THE MODULES WERE RENAMED (AGAIN) TO HAVE
 A 'Q3' PREFIX.  A CLIST $QRENAME IS PROVIDED TO ALLOW YOU TO GO
 TO AND FROM THE NEW NAMES.  YOU HAVE THE OPTION TO INCLUDE THE
 MACROS IN THE RENAME PROCESS.


 ----------I N T E L    M O D S   T O   Q U E U E - S P 3 --------------

 000 MODIFIED QSTART TO RESERVE 256 BYTES OF WORK AREA PER MODULE.

 001 MODIFIED MODULES TO SUPPORT ACF2 RELEASE 3.1.3.
       (CJHIST,FINDJOB,SYSOUT) (CONTROLLED BY &QSP AND &QACF2).

 002 ADDED ACF2 CHECKING INTO SYSOUT MODULE.
       (SYSOUT)

 003 ADDED PROCSTEP TO DDNAME DISPLAY.
       (DDNAME,FINDPDDB)

 004 ADDED 'MODESET' MACRO AND '&QMAGIC' GLOBAL TO SUPPORT A LOCAL
     SVC FOR SUPV/PROB STATE INSTEAD OF AC(1).
       (SYSOUT)

 003 MODIFIED MODULES TO SUPPORT BETTER SCREEN HANDLING UNDER
     ACF/VTAM REL 2.  ADDED 'QVTAM' GLOBAL TO CONTROL THESE MODS.
       (DISPLAY,INIT,CTSO,REPOS,QUEUE)

 005 CHANGED PRINT MODULE TO DO BETTER PAGINATION ON -3, -4, -5
     TERMINALS FOR HARDCOPY PRINTOUT.
        (PRINT,QCOMMON,DISPLAY,REPOS)

 006 CHANGED SEARCH MODULE:
     (1) ADDED GENERIC SEARCH FOR JOBNAME BASED ON MASK WITH
         'WILD CARD' CHARACTERS. ('ST' COMMAND)
     (2) MODIFIED 'DF' AND 'DQ' COMMNADS, AND ADDED 'HOWFULL' ROUTINE
         TO DISPLAY CURRENT SPOOL UTILIZATION.
     (3) ADDED SEARCH LIMITS FOR (DI,AI,HI,DO,HO,AO) BASED ON LAYNE
         BRYANT CODE (CBT FILE 308 - Q7=FORMAT MODULE) TO ALLOW SELECT
         ON Q=,T=,C=,F=,R=,L= DELIMITERS)
     (4) ADDED DISPLAY OF JOBS ACTIVE ON DEVICES TO 'DA' COMMAND
     (5) ADDED BUILT-IN HELP FOR NEW FORMAT OF COMMANDS
         (DI,AI,HI,DO,AO,HO) IN CASE SOMEBODY TRIES THE OLD FORMAT
         OF THE COMMAND.

 007 CHANGED FORMAT MODULE:
     REARRANGED LINE DISPLAY HEADING AND VARIABLES TO INCLUDE
     FORM, FCB, AND UCS ON DISPLAY.  USED WITH THE NEW SEARCH
     MODULE (MOD006).

 008 ADDED NEW COMMANDS- 'DN' AND 'HD'
     HD - 'HELD DETAIL' COMMAND- LIKE THE 'HO COUNT' COMMAND, BUT
          SHOWS DATE/TIME IN ADDITION TO TOTAL LINES.

     DN - SCANS THE OUTPUT JQE QUEUES. FOR EACH JOB, DO A JCT READ
          FIND THE TOTAL LINES RESERVED (FROM JCT OR FROM PDDB COUNTS
          IF A JOB HAS BEEN RESPOOLED VIA $DUMP/$LOAD), AND THEN
          FORMATS ALL THE WORK/CHAR JOES FOR THE JOB.  GIVES A GREAT
          HANDLE ON LINES STILL ON SPOOL V.S. LINES LEFT TO PRINT.

 009 CHANGED PARSE MODULE TO ADD NEW COMMANDS AND ALIASES.
     ADDED 'IN' FOR 'XI' (INIT DISPLAY)
     ADDED 'DN', 'HD' AS PRIV. COMMANDS
     ADDED 'MO' AS ALIAS FOR 'MODEL'
     ADDED '$'  AS ALIAS FOR 'TSO'
     ADDED '%'  AS ALIAS FOR 'EXEC'

 010 CHANGED LISTDS AND REPOS TO SUPPORT A 'M' OPERAND ON THE
     PAGING COMMANDS SO THAT (LIKE SPF)
     PF, HF, +, D  WITH 'M' ALL MEAN 'BOTTOM'
     PB, HB, -, U  WITH 'M' ALL MEAN 'TOP'

 011 CHANGED THE HELP MODULE TO REFLECT CHANGES TO COMMANDS LISTED
     ABOVE, AND ADD INVOCATION OF 'CPFK' TO DISPLAY THE PFK SETTINGS
     DURING 'HELP'.

 012 CHANGED 'INITS' MODULE TO DISPLAY JOBCLASS OF JOB IN EXECUTION.

 013 ADDED QUICK INVOKE OF 'CHIMP' AND 'DIDOCS' FROM DISPLAY.
       (DISPLAY)

 015 CHANGED JLOG CHECK FOR 'HAS EXECUTED' TO LOOK AT JCT XEQON DATE.

 016 ADDED 'B' OPTION TO THE 'DA' COMMAND TO DISPLAY TIME THE JOB
     BEGAN EXECUTION. (DOES JCT READS...)

**********************************************************************
*   UF DOC FROM $UFDOC MEMBER (OFFICIAL VERSION)                     *
**********************************************************************


UF MODIFICATION DESCRIPTIONS


FOR FURTHER INFORMATION ON THESE MODIFICATIONS PLEASE CONTACT:

JACK SCHUDEL
NORTHEAST REGIONAL DATA CENTER
233 SSRB, UNIVERSITY OF FLORIDA
GAINESVILLE, FLORIDA  32611
(904) 392-4601
SHARE CODE - UF


THIS VERSION OF QUEUE WAS DERIVED FROM FILE 278 OF THE CBT MODS TAPE,
WHICH HAD BEEN OBTAINED FROM VERSION 18 OF THE SHARE JES2 PROJECT TAPE.
IT HAS BEEN RUN ON THE FOLLOWING VERSIONS OF JES2 (ASSUMING THAT THE
APPROPRIATE SYSPARM OPTIONS HAVE BEEN SET):
       JES2 4.1
       JES2 NJE 3.1
       MVS/SP-JES2 RELEASE 3

IN THE NERDC ENVIRONMENT, USE OF THE QUEUE COMMAND IS RESTRICTED TO
SYSTEMS PROGRAMMING PERSONNEL INVOLVED IN JES2 MAINTENANCE, AND THERE
HAVE BEEN SEVERAL COMMANDS ADDED FOR THIS USAGE.  AN ATTEMPT HAS BEEN
MADE TO REQUIRE THAT THE COMMANDS THAT ALLOW THE UNRESTRICTED ACCESS
TO SPOOL DATA AND CONTROL BLOCKS BE AVAILABLE TO ONLY AUTHORIZED USERS,
BUT THERE WERE ALSO CHANGES MADE TO ALLOW THOSE AUTHORIZED USERS FULL
ACCESS TO THE SYSTEM WITHOUT HAVING ANY NAMING CONVENTION RESTRICTIONS
IMPOSED UPON THEM.  IT IS THEREFORE NORMAL FOR AN AUTHORIZED USER
TO BE ABLE TO USE THE LIST COMMAND AGAINST ANY JOB IN THE SYSTEM
INSTEAD OF HAVING TO USE THE XD COMMAND.

THE COMMAND ONLY NEEDS TO RUN AUTHORIZED FOR THE FOLLOWING COMMANDS
CANCEL, REQUEUE, AND PURGE. IF YOU DO NOT MARK THE CODE AC=1, THESE
THREE COMMANDS WILL NOT FUNCTION.

INSTALLATION PROCEDURE FOR QUEUE:

     1. Q0 IS THE COMMON AREA.
        QCOMMON, QSTART, QSTOP, QTILT, AND $JQT ARE MACROS.
        OTHER MEMBERS NOT STARTING WITH $ OR # ARE RENT SOURCE MODULES
        (SEE MEMBER $NERJCL2 FOR A COMPLETE LIST).
        (USERS OF THE OLD QUEUE COMMAND WILL NOTICE THAT ALL OF THE
         Q1 - QNN MODULES HAVE BEEN RENAMED TO MAKE LIFE EASIER ON ME.)
        #HELP IS THE TSO HELP MEMBER.
        $NERJCL2 IS THE JCL TO ASSEMBLE AND LINK QUEUE.
        TABLE IS A SAMPLE SMP JOB TO AUTHORIZE THE QUEUE COMMAND.

     2. EDIT MEMBER QCOMMON CHANGING THE FOLLOWING PARAMETERS:

        UNIT=XXXX THE DEVICE TYPE FOR SYS1.HASPCKPT.
        VOLSER=YYYYYY THE VOLUME SERIAL FOR SYS1.HASPCKPT.
        SID1-SID7=ZZZZ THE SMF IDS FOR EACH CPU IN THE COMPLEX. THE
        IDS MUST BE IN THE SAME ORDER AS IN THE INITIALIZATION DECK.

        AT PRESENT THERE IS SUPPORT IN THE INITIALIZATION MODULE TO
        DYNAMICALLY ALLOCATE THE CHECKPOINT ON EITHER 3330, 3330-1,
        3350, OR 3380. IF YOU ARE FORTUNATE ENOUGH TO HAVE A DRUM OR
        SOMETHING ELSE YOU WILL HAVE TO MODIFY INIT TO ADD SUPPORT.

        EDIT THE MACRO QSTART TO INDICATE THE OPTIONS DESIRED,
        OR SPECIFY THEM AS SYSPARM INPUT TO THE ASSEMBLER.
        IT WILL BE NECESSARY TO LOOK AT THE MACRO FOR A DESCRIPTION
        OF THE OPTIONS AVAILABLE.

     3. EDIT MEMBER $NERJCL2 TO CHANGE THE JCL TO FIT YOUR STANDARDS.
        DO NOT ALTER THE ORDER OF THE ASSEMBLY SYSLIBS AS THERE IS A
        CONFLICT ON THE MACRO QSTART.  THE DBCSYMED PROGRAM THAT IS USED
        AFTER THE ASSEMBLIES IS A PART OF THE YALE DBC PROGRAM PRODUCT
        AVAILABLE FROM CSR.  IT EDITS THE GENERATED SYM CARDS IN THE
        OBJECT DECK TO REMOVE NULL ENTRIES AND MOST OF THE DUPLICATE
        ONES.  IF THE PROGRAM IS NOT AVAILABLE, SIMPLY DELETE THE STEP
        AND CHANGE THE ASSEMBLER SYSPUNCH REFERENCE.

        THE SUPPLIED JCL GENERATES A SINGLE LOAD MODULE WHICH IS NOT
        REENTRANT.  THIS IS IDEAL FOR TESTING, BUT MAY NOT BE DESIRED IN
        A PRODUCTION ENVIRONMENT.  TO GENERATE A REENTRANT VERSION OF
        THE COMMAND, LINK ALL MODULES EXCEPT Q0 AS A SINGLE PROGRAM
        NAMED QUEUE (ALIAS Q) INTO SYS1.LPALIB.  IT WILL NEED AN
        AUTHORIZATION CODE OF 1 IF YOU DESIRE TO USE THE CANCEL,
        REQUEUE, AND PURGE COMMANDS.  THE LINKEDIT OF MODULE QUEUE WILL
        GENERATE AN UNRESOLVED EXTERNAL REFERENCE FOR MODULE QUEUECMN,
        WHICH IS NORMAL AND SHOULD BE IGNORED.  MODULE Q0 SHOULD THEN BE
        ASSEMBLED AND LINKED INTO SYS1.LINKLIB OR SYS1.CMDLIB WITH A
        NAME OF QUEUECMN.  IF YOU WANT TO CHANGE THE NAME OF QUEUECMN,
        THE ONLY REFERENCE TO IT IS IN MEMBER INIT WHERE THE LINK IS
        ISSUED.

     4. IF THE CANCEL, REQUEUE, AND PURGE COMMANDS ARE DESIRED, ADD
        QUEUE (ALIAS Q) TO THE IKJEFTE2 MODULE WHICH IS THE TSO LIST
        OF AUTHORIZED COMMANDS. A SAMPLE SMP JOB IS PROVIDED IN THE
        MEMBER TABLE. QUEUE CAN BE RUN UNDER SPF BUT THE SUBCOMMANDS
        USING THE SUBSYSTEM INTERFACE (CANCEL, REQUEUE, AND DELETE)
        WILL BE INOPERABLE, ALL OTHER COMMANDS WILL FUNCTION NORMALLY.
        IF YOU DON'T MIND THE INTEGRITY PROBLEM YOU CAN ADD CODE TO
        QUEUE TO USE A SPECIAL SVC TO GET INTO SUPERVISOR STATE AND
        HAVE FULL FACILITY UNDER SPF.

USERS THAT DO NOT HAVE THE UICC JTIP PACKAGE INSTALLED WILL NEED TO
EITHER CHANGE THE QSTART MACRO OR SPECIFY NOJTIP IN THE ASSEMBLER
SYSPARM OPTIONS.

USERS THAT DO NOT HAVE THE YALE DBC PACKAGE INSTALLED SHOULD
EITHER CHANGE THE QSTART MACRO OR SPECIFY NODBC IN THE ASSEMBLER
SYSPARM OPTIONS.  IF DBC IS SPECIFIED BUT THE PACKAGE DOES NOT
EXIST, ALL THAT WILL HAPPEN IS THAT A MESSAGE WILL FLASH ON THE
USER'S TERMINAL INDICATING THAT THE LOAD FOR MODULE DBC FAILED.
THIS MESSAGE CAN BE IGNORED.

SOME OF THE CODE MAY BE DEPENDENT ON ASSEMBLER H, BUT ALL THAT SHOULD
BE NEEDED IS TO MOVE SOME OF THE DSECTS AROUND TO GET THEM IN THE
PROPER ORDER FOR THE OTHER ASSEMBLERS.

FOR FURTHER INFORMATION ON THE SUPPORT FOR MVS/SP-JES2 RELEASE 2 AND
ABOVE, SEE MEMBER $SP.

TO MAKE IT EASIER TO ENTER CERTAIN COMMANDS, COMMAND NAMES MAY NOW
BE UP TO FOUR CHARACTERS.

MEMBER $LOG IS A CHRONOLOGICAL LIST OF THE CHANGES THAT HAVE BEEN MADE
TO THIS PROGRAM, AND SHOULD BE CONSULTED BY USERS WHO HAVE A PREVIOUS
VERSION AND WANT TO KNOW WHAT HAS BEEN CHANGED.

FOLLOWING IS A LIST OF THE INDIVIDUAL MODIFICATIONS:

UF001  ALLOW QUEUE COMMAND TO ASSEMBLE USING NJE3.1 SOURCE CODE.
       A FEW EQUATES AND ADDITIONAL DSECTS WERE INCLUDED, WHICH SHOULD
       BE OK FOR NON-NJE SOURCE AS WELL.

UF002  ALLOW QCOMMON TO BE LINKED IN FOR TESTING.
       WE RUN WITH SEVERAL DIFFERENT SPOOL PACK FORMATS DURING TEST,
       AND IT IS CONVENIENT TO HAVE MULTIPLE VERSIONS OF QUEUE TO
       SUPPORT THESE DIFFERENT TEST VERSIONS.
       IT IS ALSO MUCH SIMPLER TO RUN UNDER TSO TEST.

UF003  SUPPORT FOR 3278 MODELS 2, 3, 4, AND 5.
       WE HAVE A WIDE ASSORTMENT OF TERMINALS IN-HOUSE, SO QUEUE WAS
       MODIFIED TO SUPPORT ALL TERMINAL TYPES AS BASIC MODEL 2, AND
       TO ALLOW THE USER TO SWITCH TO THE LARGER SCREEN FORMAT AT ANY
       TIME DURING HIS SESSION.
       THIS CODE IS CURRENTLY RUNNING UNDER ACF/VTAM REL 2, BUT WAS
       DEVELOPED UNDER ACF/VTAM REL 1, AND HAS ALSO RUN WITH TCAM AT
       THE 8011 LEVEL.

UF004  ADD A TITLE CARD FOR Q0 (QCOMMON).

UF005  DO NOT CHECK FOR JOBNAME MATCHING TSO LOGON ID IF QXAUTH=1.
       ALSO ALLOW READING DSID'S LESS THAN 101 IF QXAUTH=1.
       DSID'S LESS THAN 101 ARE SOMETIMES USEFUL TO LOOK AT;  THE
       INTERNAL TEXT FILE MAKES IT EASIER TO LOCATE THE PROPER DSID
       IN A SYSGEN WHERE ALL STEPNAMES ARE "ASM", AND IN A VM NETWORK
       ENVIRONMENT IT IS COMMON TO HAVE OUTPUT DSID'S OF 1.

UF006  ONLY READ THE CHECKPOINT IF THE INFORMATION IS NEEDED.
       THE READ OF THE CHECKPOINT IS REMOVED FROM THE MAIN EXECUTION
       LOOP, SINCE IT IS REALLY SILLY TO READ A LARGE CHECKPOINT DATASET
       WHEN THE USER COMMAND IS TO JUST REPOSTITION WITHIN THE CURRENT
       FILE.

UF007  CHANGE COMMANDS "DD *" AND "L * DSID" TO USE THE LAST JOBNAME
       IF A "*" IS SPECIFIED.  THIS MAKES IT EASIER TO TYPE, AND CODE
       IS ADDED TO SKIP THE CHECKPOINT READ FOR PERFORMANCE REASONS.
       IT IS STRONGLY RECOMMENDED THAT THE "*" BE USED INSTEAD OF THE
       JOB NAME/NUMBER SINCE THE RESPONCE TIME IS SO MUCH BETTER.

UF008  HAVE THE FINDPDDB ROUTINE START AT THE FIRST IOT IF PDDB IS NOT
       FOUND.  A MIXTURE OF SPIN AND REGULAR PDDB'S USED TO CAUSE
       THE ROUTINE TO SCAN TO THE END OF THE IOT'S AND STAY THERE WHILE
       TRYING TO LOCATE THE FIRST REGULAR PDDB AFTER A SPUN ONE.

UF009  ADD SYNAD ROUTINE AND ADDITIONAL CHECKING TO READSPC ROUTINE SO
       THAT THE SYSTEM WILL NOT FAIL DURING XB PROCESSING.

UF010  IF USER HAS TSO OPERATOR AUTHORITY, SET FLAG BIT IN QFLAG1,
       AND FORCE QXAUTH ON.

UF011  ADD MODULE HEXDUMP (Q28) WHICH WILL GENERATE AN ABEND FORMAT
       DUMP OF THE DATA PASSED TO IT.

UF012  CHANGE HEXBLK (Q9) TO USE HEXDUMP FOR FORMATTING THE READ
       BUFFER.

UF013  CHANGE HEXBLK (Q9) TO ALLOW ADDITIONAL INPUT PARAMETERS FOR
       DUMPING CURRENT BLOCK, AND OFFSETS INTO THE REQUESTED BLOCK.
       IF THE BLOCK ADDRESS PARAMETER IS "+", THE BUFFER CHAINED FROM
       THE CURRENT BUFFER WILL BE DUMPED.

UF014  CHANGE PARSE (Q16) TO USE 4 CHARACTER COMMAND NAMES, AND
       CHANGE LOGIC FOR DETERMINING IF A COMMAND IN PRIVILEGED.

UF015  ADD MODULE CJQE (Q29) TO DUMP JQE IN HEX.

UF016  ADD MODULE CJCT (Q30) TO DUMP JCT IN HEX WITH OPTIONAL
       OFFSET SPECIFIED.

UF017  ADD MODULE CTSO (Q31) TO ALLOW ANY TSO COMMAND TO BE ISSUED
       WHILE IN QUEUE.

UF018  CHANGE DEFAULT STARTUP COMMAND TO "HELP" SO GET STARTED FASTER.

UF019  ALLOW SYSPARM TO CHANGE &QXXX DEFAULTS.

UF020  SUPPORT FOR SP2 LEVEL OF JES2.
       NOTE: THERE ARE PROBABLY SOME BUGS IN THE DISPLAY COMMANDS AT
             THIS LEVEL.  THEY ARE BEING FIXED AS THEY ARE DISCOVERED,
             BUT SINCE THE NERDC DOES NOT NORMALLY USE THESE COMMANDS,
             IT MAY TAKE SOME TIME TO DISCOVER THE ERRORS.

UF021  SUPPORT FOR SP2 PTF UZ52546 (8110 LEVEL SET).

UF022  ADD MODULE CHCT (Q32) TO DUMP HCT CHECKPOINTED AREA.

UF023  ADD SYMDEL/SYMNODEL STATEMENTS AROUND DSECTS TO REDUCE
       NUMBER OF SYM ENTRIES IN FINAL LOAD MODULE.
       (THE DBCSYMED PROGRAM READS IN THE GENERATED OBJECT
       DECKS AND REMOVES SYM ENTRIES THAT APPEAR BETWEEN
       SYMDEL/SYMNODEL DSECT DEFINITIONS.  THIS CAN CUT THE
       SIZE OF THE FINAL LOAD MODULE BY MORE THAN HALF.)

UF024  ADD DIE COMMAND TO FORCE AN ABEND SO CAN GET BACK INTO THE
       DEBUGGING ENVIRONMENT, AND ESTABLISH ESTAE DURING INIT.

UF025  ADD PDDB COMMAND TO LIST PDDB'S FOR A JOB.  THIS IS USEFUL WHEN
       THE DD COMMAND FAILS FOR SUCH THINGS AS SYSOUT RECEIVED FROM
       OTHER NODES AS WELL AS DURING DEBUGGING OF MISC PROBLEMS.
       IF &QJTIP IS ON, THE PROC, STEP, AND DDNAMES WILL BE FORMATTED.

UF026  ADD JOE COMMAND TO DUMP JOES FOR A JOB.

UF027  FIX XI COMMAND TO PROPERLY LIST ALL INITIATOR CLASSES.

UF028  CHANGE SAVE COMMAND TO ALLOW QPARM3 TO SPECIFY THE VOLSER
       THAT THE DATASET IS TO BE ALLOCATED TO.
       (QPARM2 IS USED TO SPECIFY THE DATASET TYPE.  IT WASN'T
       DOCUMENTED, EITHER.)
       NOW THE COMMAND IS:
         SAVE DSN <DSTYPE> <VOLSER>

UF029  CHANGE Q7 FORMAT TO FIX ERROR IN TESTING FOR JOB ACTIVE ON A
       PRINTER.

UF030  ADD JOB HISTORY COMMAND (Q35).
       THE MODEL FOR THIS COMMAND WAS PROVIDED BY KEN TRUE OF INTEL.

UF031  CHANGE TRANSLATE IN THE DISPLAY (Q5) MODULE TO CHANGE X'FF'
       TO A BLANK.  THIS IS REQUIRED FOR REMOTE 3278'S.

UF032  ADD &QNERDC GLOBAL TO ALLOW FOR LOCAL DEPENDENCIES.
       SO FAR ONLY Q35 JOB HISTORY USES THIS FLAG.

UF033  CHANGE Q8 HELP TO PRINT BLANK LINES TO FORCE THE PLUS SIGN TO
       BE GENERATED AT THE BOTTOM OF EACH PAGE TO INDICATE TO THE USER
       THAT MORE DATA FOLLOWS.  THIS CODE FROM KEN TRUE AT INTEL.

UF034  CHANGE Q6 FINDJOB TO GENERATE ERROR MESSAGE IF A "*" WAS USED
       AS THE JOBID, BUT THE JQE FIELD HAS NOT YET BEEN INITIALIZED.
       THIS IS A PROBLEM FOR USERS WHO DO A STATUS COMMAND, SEE ONLY
       ONE JOB LISTED, AND THEN THINK THAT THEY CAN USE THE "*" TO
       DISPLAY THAT JOB.

UF035  CHANGE Q6 FINDJOB SO THAT IF THE COMMAND WAS SYSLOG THEN
       IF QPARM1 IS NULL OR "SYSLOG" THEN LOCATE THE SYSLOG
          FOR THE ACTIVE SYSTEM.
       IF QPARM1 IS NOT NUMERIC, AND NOT "SYSLOG" THEN IT IS ASSUMED
          TO BE THE SMFID OF THE SYSTEM WHOSE LOG IS DESIRED.
          FOR THIS TO WORK IT IS NECESSARY FOR THE SYSTEM ID'S
          TO BE PROPERLY DEFINED IN QSTART.

UF036  ADD Q36 (SPIN) COMMAND PROCESSOR.
       A NEW COMMAND 'SPIN' WILL CAUSE A COPY OF THE CURRENT DATASET
          TO BE SPUN TO SYSOUT.
       AT THIS TIME, THERE ARE NO OPTIONS FOR THE COMMAND, BUT IT
          WOULD BE NICE TO ADD OPTIONS FOR DEST, SYSOUT CLASS, FORMS,
          AND RANGE OF LINE NUMBERS.
       THIS REQUIRED CHANGES TO ALLOCATE AND QSTART, AS WELL.

UF037  CHANGE Q10 TO ADD SUPPORT FOR 3380.

UF038  ADD TGPS COMMAND TO LIST THE TOP 20 USERS OF SPOOL SPACE.
       THIS IS A VERY USEFUL COMMAND TO USE WHEN YOUR SPOOL VOLUMES
       ARE NEARLY FULL AND YOU WOULD REALLY LIKE TO KNOW WHO HAS ALL
       OF THE SPACE.  OUR EXPERIENCE HAS SHOWN THAT WHEN THE SPOOLS
       GET FULL, THE TOP 20 JOBS (OUT OF OVER 1000) WILL HAVE ABOUT
       30% OF THE TRACK GROUPS.  THIS COMMAND ACTUALLY COUNTS THE TRACK
       GROUPS ASSIGNED TO EACH JOB, BY READING ALL OF THE ALLOCATION
       IOT'S.  BY DOING IT THIS WAY YOU GET THE ACTUAL SPACE USED, AND
       DO NOT GET THROWN OFF BY JOBS THAT WRITE ONE LINE TO EACH OF
       THOUSANDS OF SPUN SYSOUTS.
       *** NOTE ***:  THIS COMMAND DOES AN INCREADIBLE AMOUNT OF I/O AND
       TAKES A LONG TIME TO COMPLETE.  IN OUR ENVIRONMENT, RUNNING ON A
       TEST CPU WHICH FREQUENTLY GETS LOCKED OUT FROM THE SHARED SPOOLS
       BY THE FASTER PRODUCTION MACHINES, IT CAN TAKE AS LONG AS FIVE
       MINUTES FOR THE RESPONCE TO COME BACK, BUT SOMETIMES IT IS THE
       ONLY WAY.
       *** NOTE ***:  THE PERCENT COLUMN INDICATES THE PERCENT OF TRACK
       GROUPS USED OUT OF THE DEFINED NUMBER OF TRACK GROUPS FOR THE
       SYSTEM.  IF YOU HAVE ALLOWED FOR EXTRA SPOOLS, THE NUMBERS WILL
       DISPLAYED WILL BE LOWER THAN ACTUAL.

UF039  CHANGE CHECKPOINT READ TO MULTIPLE DECB'S BASED ON NCP.
       THE IDEA FOR THIS CODE CAME FROM THE UCLA/UOC VERSION OF THE
       QUEUE COMMAND.

UF040  ALLOW +/-NNN TO BE SPECIFIED ON THE LIST * COMMAND.

UF041  CHANGE TSO COMMAND PROCESSOR TO PROPERLY CLEAR SCREEN FOR TCAM.

UF042  ALLOW QCOMMON PARAMETERS TO BE SPECIFIED IN QSTART.
       THIS WILL CAUSE ALL OF THE COMMONLY CHANGED OPTIONS TO BE
       SPECIFIED IN ONLY ONE PLACE.

UF043  MOVE PFK DEFINITIONS TO QCOMMON, AND SET VIA QSTART.
       BY MOVING THE DEFINITIONS TO QCOMMON, IT WILL BE POSSIBLE
       FOR THE MODEL COMMAND TO SET THE PROPER VALUES FOR PFK 7/8,
       THE SCROLL COMMANDS, FOR THE DISPLAY SIZE.

UF044  CHANGE READSPC TO DO FURTHER VALIDITY CHECKING ON THE VALUE
       OF MTTR THAT IS PASSED TO IT.  THIS SHOULD ELIMINATE OCCASIONAL
       S0C4 AND S0C1 ABENDS FROM OCCURRING.

******************INCORPORATED MODS FROM RANIER BANK*************
   $RNBDOC
THIS DATASET WAS OBTAINED FROM FILE 322 ON VER193 OF THE CBT TAPE, AND
WAS THEN MODIFIED AT RAINIER NATIONAL BANK.

RNB00 -                - MOVED DSECTS AROUND FOR IFOX ASSEMBLER
        Q4  (DDNAME)
        Q10 (INIT)
        Q12 (JLOG)
        Q15 (LISTDS)
        Q20 (SEARCH)
        Q25 (FINDPDDB)
        Q26 (SYSOUT)
        Q33 (CPPDB)
RNB01 - Q1  (QUEUE)    - FIX TO FINAL TPUT MESSAGE TO ALLOW TO WORK WITH
                           BOTH TCAM AND VTAM
RNB02 - Q10 (INIT)     - REMOVE PART OF UF010: DON'T USE OPER AUTHORITY
                           TO SET QXAUTH. ALSO UF024: DON'T USE DBC.
RNB03 - Q10 (INIT)     - FOR RACF: IF &QRACF = 1, AND IF &QNEWUSR ISN'T
                           NULL, THEN IF APF-AUTHORIZED CHANGE THE
                           USERID IN THE ACEE SO THE USER CAN ACCESS A
                           RACF-PROTECTED SPOOL/CHECKPOINT DATA SET.
      - Q16 (PARSE)    - IF &QRACF = 1 THEN USE RACF TO CHECK AUTHORITY
                           TO USE THE XP COMMAND.
      - Q17 (READSPC)  - IF &QRACF = 1 THEN WHEN A JCT IS READ FROM THE
                           SPOOL BLANK THE PASSWORD AND NEWPASSWORD.
      - Q22 (XDS)      - IF &QRACF = 1 THEN DO A SPECIAL CHECK TO SEE IF
                           THE USER IF ALLOWED TO DO THE XDS COMMAND.
RNB04 - Q12 (JLOG)     - FIX TO ALLOW JLOG TO WORK FOR JOBS THAT ARE IN
                           EXECUTION BUT THAT HAVEN'T FINISHED THE FIRST
                           STEP. THIS WILL SHOW ONLY THE 'JOB STARTED'
                           MESSAGE.
RNB05 - Q14 (LIST)     - IF &QRNB = 1 THEN DO THE FOLLOWING:
                           (1) REMOVE THE PART OF UF005 THAT ALLOWS L TO
                               PROCESS DSID'S < 101 AND THAT ALLOWS AUTH
                               USERS TO LIST ANY JOB.  THIS REQUIRES THE
                               XD COMMAND TO BE USED TO LIST STRANGE
                               THINGS.
                           (2) ALLOW TSO USERS TO ACCESS ANY JOB THAT
                               STARTS WITH THEIR USERID OR THAT HAS A
                               NOTIFY FOR THEIR USERID. THIS WILL NOT
                               BE ALLOWED FOR USERID'S STARTING WITH
                               'PJS' DUE TO LOCAL RESTRICTIONS.
                           (3) ALLOW TSO USERS WHOSE USERID'S START WITH
                               'TEC' TO PROCESS ANY 'TEC...' JOB OR ANY
                               JOB WITH A NOTIFY FOR A TEC USER. ALSO
                               ALLOW THEM TO PROCESS OUTPUT FROM STARTED
                               TASKS.
RNB06 - Q16 (PARSE)    - ADDED THE FOLLOWING COMMAND ABBREVIATIONS FOR
                           CONSISTENCY WITH PREVIOUS VERSIONS:
                                 JC  FOR JCL
                                 JL  FOR JLOG
                                 JM  FOR JMSG
                                 SL  FOR SLOG
                                 FT  FOR FTIM
                                 DE  FOR DEL
                                 RE  FOR REQ
                         ALSO, IF &QRNB = 1, DELETE COMMANDS TSO, EXEC,
                           AND MODEL.
RNB07 - Q24 (ACTIVE)   - IF &QRNB = 1, WHEN LISTING BATCH JOBS SAY THEY
                           ARE ON THE XEQ QUEUE INSTEAD OF THE INPUT
                           QUEUE TO BE MORE CONSISTENT WITH WHAT THE
                           OPERATORS USUALLY SEE.
RNB08 - Q26 (SYSOUT)   - IF &QRNB = 1, ALLOW USERS TO MANIPULATE JOBS
                           THAT START WITH THEIR USERID'S OR THAT HAVE
                           A NOTIFY FOR THEIR USERID, UNLESS THE USERID
                           STARTS WITH 'PJS'.
                         IF &QRNB = 1, ALLOW 'TEC' USERS TO MANIPULATE
                           ANY TEC JOB OR STARTED TASK OUTPUT.
RNB09 - Q26 (SYSOUT)   - IF &QRNB = 1, FOR A REQ OPERATION, IF A NEW
                           CLASS IS NOT GIVEN, USE CLASS C AS THE
                           DEFAULT NEW CLASS.
RNB10 - Q27 (PRINT)    - IF &QRNB = 1, USE C AS THE DEFAULT SYSOUT
                           CLASS.
RNB11 - Q4  (DDNAME)   - IF &QRNB = 1, ALLOW DDNAME COMMAND TO BE
                           ISSUED AS   DDNAME JOBID S
                           WHERE THE S INDICATES THAT THE SPIN DATA
                           SETS SHOULD ALSO BE LISTED. THIS WAS ADDED
                           BECAUSE WE HAVE SOME LONG RUNNING BATCH JOBS
                           (IMS) THAT SPIN THINGS AND THE STANDARD Q
                           COMMAND DOESN'T SEARCH THE SPIN Q FOR BATCH
                           JOBS.
RNB12 - Q4  (DDNAME)   - IF &QSP = 1, DON'T FORMAT THE MESSAGE 'ALREADY
                           PRINTED', AS IT APPEARS THAT THE FLAG BIT
                           IN THE PDDB IS NOT USED ANY MORE, CAUSING
                           ALL SPIN DATA SETS TO APPEAR PRINTED, EVEN
                           WHEN THEY'RE NOT.
RNB13 - Q5  (DISPLAY)  - IF &QRNB = 1, FIX SOME PROBLEMS WITH TCAM
                           AND THE PROCESSING OF THE TEST-REQUEST,
                           SYSTEM-REQUEST, AND THE PA2/PA3 KEYS.
RNB14 - Q5  (DISPLAY)  - BUG FIX FOR FULL-SCREEN PROCESSING. WITH THIS
                           FIX THE USER CAN ENTER A COMMAND IN EITHER
                           INPUT FIELD, NOT JUST THE BOTTOM ONE.
RNB15 - Q5  (DISPLAY)  - IF &QRNB = 1, RESTORE THE PFK DEFINITIONS FOR
                           PF7/8 TO '- 27' AND '+ 27' AS ORIGINALLY
                           SUPPLIED BY THE ICBC MOD. WE DON'T HAVE
                           THE OTHER 3278 MODELS, AND SCROLLING IS
                           EASIER THIS WAY. WITH NERDC'S CHANGES TO
                           MAKE THE KEYS 'PB' AND 'PF' IT IS DIFFICULT
                           TO SCROLL UP OR DOWN A FEW LINES.
RNB16 - Q20 (SEARCH)   - PROCESS BOTH THE LOCAL AND REMOTE QUEUES FOR
                           JOBS AWAITING PRINT/PUNCH.
                         ALSO FIX A BUG IN UF020 THAT WAS CLEARING THE
                           JOEFLAG  WHEN JUST THE JOEJQE POINTER SHOULD
                           BE CLEARED.
RNB17 - Q7  (FORMAT)   - WHEN FORMATTING JOES:
                           (1) IF THE JOE IS BEING PROCESSED BY PSO,
                               INDICATE EXT-WTR FOR A DEVICE TYPE.
                           (2) USE $JOEBUSY FLAG TO INDICATE WHETHER JOB
                               IS REALLY PRINTING/PUNCHING. OTHERWISE,
                               AN INTERRUPTED JOB STILL SHOWS AS ON THE
                               PRINTER/PUNCH.
                           (3) FOR SP2, FIX A BUG IN GETTING TO THE
                               CHECKPOINT JOE AND IN COMPUTING THE LINES
                               LEFT TO PRINT/PUNCH.
                           (4) FOR SP2, IF THE JOE IS NOT ACTIVE, BUT
                               THE CHECKPOINT JOE IS VALID, SHOW THE
                               LINES LEFT, NOT THE ORIGINAL LINE COUNT.
RNB18 - Q7  (FORMAT)   - DISTINGUISH BETWEEN JOES WITH REMOTE ROUTING
                           AND THOSE WITH SPECIAL LOCAL ROUTING (DESTID
                           INITIALIZATION STATEMENT IN JES PARMS).
RNB19 - Q20 (SEARCH)   - FOR STATUS OR DJ COMMANDS IN THE SP2 VERSION,
                           ALSO SEARCH THE DUMP Q, THE CONVERSION Q,
                           AND THE OUTPUT Q. THIS ALLOWS THE USER TO
                           FIND HIS JOB IF IT'S AWAITING DUMP, AWAITING
                           CONVERSION, OR AWAITING OUTPUT PROCESSING.
      - Q7  (FORMAT)   - WHEN LISTING JQE'S, DON'T ASSUME INPUT QUEUE
                           BUT USE JQETYPE INSTEAD. ALSO, SPECIAL
                           HANDLING FOR AWAITING CONVERSION, AWAITING
                           DUMP, AND AWAITING OUTPUT.
RNB20 - Q7  (FORMAT)   - DISTINGUISH BETWEEN NORMAL HOLD, HELD VIA $HA,
                           AND DUPLICATE HOLD. ALSO, FOR JOES, IF THE
                           SELECT=NO FLAG IS ON, FLAG WITH S=N TO SHOW
                           WHY THE OUTPUT WON'T PRINT.
RNB21 - Q7  (FORMAT)   - FIX THE SETDEVIC ROUTINE FOR SP2 SO THE PROPER
                           DEVICE NAMES SHOW UP FOR JOBS ON PRINTERS,
                           ETC.
RNB22 - Q6  (FINDJOB)  - IF JOBNAME = *, AFTER READING THE JCT, ENSURE
                           THAT JQEJNAME = JCTJNAME AND THAT QPJOBID =
                           JCTJBKEY IN CASE THE JOB HAS PURGED AND THE
                           JCT HAS BEEN REUSED SINCE WE LAST READ THE
                           CHECKPOINT. THIS IS UNLIKELY, BUT SEEMS TO BE
                           POSSIBLE.
RNB23 - Q8  (HELP)     - MISCELLANEOUS CHANGES TO THE NERDC HELP INFO.
                           THE ORIGINAL NERDC VERSION IS MEMBER $Q8, AND
                           THE OLD RNB MEMBER IS #Q8.
RNB24 - Q23 (INITS)    - BUG FIX, AS SUGGESTED BY JACK SHUDEL
RNB25 - Q7  (FORMAT)   - ADD 'COUNT' OPTION TO THE HO COMMAND TO HELP
                           FIND WHICH JOBS ARE TIEING UP SPOOL SPACE.
                           WHEN THE COUNT OPTION IS USED, THE JCT FOR
                           EACH JQE WITH HELD OUTPUT WILL BE READ AND
                           THE JCT TOTAL LINE COUNT WILL BE DISPLAYED.
RNB26 - Q24 (ACTIVE)   - BUG FIX (SORT OF): THE DC COMMAND WAS SHOWING
                           A LOT OF STRANGE JOBS. THIS FIX MAKES IT MORE
                           REASONABLE, BUT IT'S STILL NOT QUITE RIGHT.
                           ALL OF THE STARTED TASKS, E.G. TCAM, DON'T
                           SHOW UP.

========================================================================
KNOWN PROBLEMS:
  (1) DC S DOESN'T SHOW ALL OF THE STARTED TASKS.
  (2) JOE PRIORITIES ARE (PROBABLY) INCORRECT, AS THE CALCULATIONS
      CHANGED FOR SP2 AND Q HASN'T BEEN UPDATED TO REFLECT THAT.
  (3) IT APPEARS THAT THE LINE COUNTS FOR JOBS ON A REMOTE PRINTER ARE
      MAINTAINED DIFFERENTLY THAT FOR JOBS ON A LOCAL PRINTER. THIS HAS
      NOT BEEN FULLY RESEARCHED YET, BUT IT SEEMS THAT THE LINE COUNT
      REPORTED BY Q FOR A JOB ON A REMOTE PRINTER IS APPROXIMATELY THE
      NUMBER OF LINES PRINTED, NOT THE NUMBER THAT REMAIN TO BE PRINTED.
  (4) ONLY 2 (POSSIBLY 3) CHARACTER REMOTE NUMBERS CAN BE USED.
  (5) NJE NODE NUMBERS ARE IGNORED.
  (6) THE NJE JOB/SYSOUT TRANSMITTERS AND RECEIVERS ARE IGNORED AS
      DEVICES AND AS QUEUES.
./       ADD   NAME=RTNCODE
//RTNCODE JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL RTNCODE - FCI UTILITY - SET OS RETURN CODE DEPEND. ON PARM
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS RTNCODE TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   27 AUG 80
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,RTNCODE
//*
//RTNCODE EXEC SYSASM,MEMBER=RTNCODE
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//*                                             PANVALET ACCESS METHOD
//SYSLIN   DD  *
 INCLUDE SYSLIB(RTNCODE)
 NAME  RTNCODE(R)               LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=R062A10
//R062A10 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL R062A10 - DYNAMIC ALLOCATION SUBROUTINE
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P062A10 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,S062A10       LPDS COMMAND
//*
//R062A10 EXEC SYSASM,MEMBER=S062A10      LPDS
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST,RENT,REUS'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(S062A10)
 NAME R062A10(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=R941X11
//R941X11 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL R941X11 - THE JULIAN/GREGORIAN DATE CONVERTORS
//*
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS R941X11 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//*
//R941X11 EXEC SYSASM,MEMBER=R941X11      DRIVER
//S052A00 EXEC SYSASM,MEMBER=S052A00       DATE CONVERTOR SUB
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(R941X11,S052A00)
 ALIAS   R941X12,R941X1,R941X2
 NAME    R941X11(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=R963A30
//R963A30 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL R963A30 - DYNAMIC SCRATCH/UNCATALOG SUBROUTINE
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS P963A30 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,S963A30
//*
//R963A30 EXEC SYSASM,MEMBER=S963A30      LPDS
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST,RENT,REUS'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(S963A30)
 NAME R963A30(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=SCOMPARE
//SCOMPARE JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL SCOMPARE - SOURCE COMPARE UTILITY
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS SCOMPARE TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//         DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,SCOMPARE      SCOMPARE COMMAND
//*
//SCOMPARE EXEC SYSASM,MEMBER=SCOMPARE    SCOMPARE
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(SCOMPARE)
 NAME  SCOMPARE(R)         LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=SHOWHIST
//SHOWHIST JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL DASD MANAGEMENT SYSTEM - SHOW HISTORY OF DATASET SIZE FROM
//*                                  HISTORY FILE MAINT PGM.
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS SHOWHIST TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
//********************************************************************
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB,SHOWHIST
++WRITE WORK,SHOWHIS
/*
//********************************************************************
//SHOWHIST EXEC  SYSPLI,MEMBER=SHOWHIST
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJLIB(SHOWHIST)
 NAME    SHOWHIST(R)  LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=SHOWRAW
//SHOWRAW JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL SHOWRAW UTILITY -
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS SHOWRAW TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,SHOWRAW
/*
//********************************************************************
//SHOWRAW EXEC   SYSPLI,MEMBER=SHOWRAW
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJLIB(SHOWRAW)
 NAME    SHOWRAW(R)   LINK TO TECH.INTEL.MODS.LOAD
//
./       ADD   NAME=SHOWSMF
//SHOWSMF JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL SHOWSMF - DISP USAGE OF SYS1.MANX/MANY  TSO/OPER STC
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS SHOWSMF TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,SHOWSMF
//*
//SHOWSMF EXEC SYSASM,MEMBER=SHOWSMF
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(SHOWSMF)
 NAME SHOWSMF(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=SMFACF2
//SMFACF2 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL SMFACF2/SMFACFM/SMFACFPR
//*             SMFACF2 - SCAN SMF FOR ACF2 SECURITY SYSTEM RECORDS
//*                       AND FORMAT REPORT
//*             SMFACFM - MERGE OUTPUT OF SMFACF2 WITH USER FILE TO
//*                       INDICATE WHO OWNS THE RECORD...
//*             SMFACFPR- PRINT MERGED FORMAT RECORDS
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS SMFACF2 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   18 MAY 80
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
//********************************************************************
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,SMFACF2
++WRITE WORK,SMFACFM
++WRITE WORK,SMFACFPR
/*
//********************************************************************
//SMFACF2  EXEC  SYSPLI,MEMBER=SMFACF2
//********************************************************************
//SMFACFM  EXEC  SYSPLI,MEMBER=SMFACFM
//********************************************************************
//SMFACFPR EXEC  SYSPLI,MEMBER=SMFACFPR
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJLIB(SMFACF2)
 INCLUDE SYSLIB(HEXCONV,R941X11)
 NAME    SMFACF2(R)   LINK TO TECH.INTEL.MODS.LOAD
 INCLUDE OBJLIB(SMFACFM)
 NAME    SMFACFM(R)   LINK TO TECH.INTEL.MODS.LOAD
 INCLUDE OBJLIB(SMFDSNPR)
 INCLUDE SYSLIB(R941X11)
 NAME    SMFDSNPR(R)  LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=SMFDSND
//SMFDSND JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL SMFDSND/SMFDSNPR - SCAN SMF FOR TYPE 15,14, 17 RECS TO SHOW
//*                            WHO HAS USED/ABUSED THE DATASETS
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS SMFDSND TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*           21 NOV 78 - NEW VERSION INSTALLED
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
//********************************************************************
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,SMFDSND
++WRITE WORK,SMFDSNPR
/*
//********************************************************************
//SMFDSND  EXEC  SYSPLI,MEMBER=SMFDSND
//********************************************************************
//SMFDSNPR EXEC  SYSPLI,MEMBER=SMFDSNPR
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJLIB(SMFDSND)
 INCLUDE SYSLIB(DATTIM)
 NAME    SMFDSND(R)   LINK TO TECH.INTEL.MODS.LOAD
 INCLUDE OBJLIB(SMFDSNPR)
 INCLUDE SYSLIB(R941X11)
 NAME    SMFDSNPR(R)  LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=SMFRACF
//SMFRACF JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL SMFRACF - UTILITY TO SCAN SMF FOR TYPE 0,80,81 RECS TO SHOW
//*                            IPL AND RACF SYSTEM LOGGING EVENTS.
//*                            CAN GEN CLIST USEFULL FOR RECOVERY.
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS SMFRACF TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
//********************************************************************
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,SMFRACF
/*
//********************************************************************
//SMFRACF  EXEC  SYSPLI,MEMBER=SMFRACF
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJLIB(SMFRACF)
 INCLUDE SYSLIB(HEXCONV,R941X11)
 NAME    SMFRACF(R)   LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=SMFSEL
//SMFSEL JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL SMFSEL - SMF RECORD SELECTOR UTILITY
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS SMFSEL TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   27 AUG 80
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,SMFSEL
//*
//SMFSEL EXEC SYSASM,MEMBER=SMFSEL
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//*                                             PANVALET ACCESS METHOD
//SYSLIN   DD  *
 INCLUDE SYSLIB(SMFSEL)
 NAME  SMFSEL(R)                LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=SMFTERM
//SMFTERM JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL SMFTERM - UTILITY TO SCAN SMF FOR TYPE 35 RECS RECS TO SHOW
//*                            TSO USAGE, AND IF IEFUJI STAMPS SMFUSER
//*                            FIELD WITH TERMINAL NUMBER (UCB ADDR)
//*                            THEN PRODUCE PORT USAGE BY PORT ALSO.
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS SMFTERM TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE    1 AUG 78
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
//********************************************************************
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,SMFTERM
/*
//********************************************************************
//SMFTERM  EXEC  SYSPLI,MEMBER=SMFTERM
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJLIB(SMFTERM)
 INCLUDE SYSLIB(R941X11)
 NAME    SMFTERM(R)   LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=SPACEZAP
//SPACEZAP JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL SPACEZAP UTILITY -
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS SPACEZAP TO TECH.INTEL.MODS.LOAD
//*
//*********************************************************************
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
//       PEND
//********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,SPACZAP
++WRITE WORK,R050A30
/*
//********************************************************************
//SPACEZAP EXEC  SYSPLI,MEMBER=SPACZAP
//********************************************************************
//R050A30  EXEC  SYSASM,MEMBER=R050A30
//********************************************************************
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJLIB(SPACZAP,R050A30)
 NAME    SPACEZAP(R)  LINK TO TECH.INTEL.MODS.LOAD
//
./       ADD   NAME=SUPERSCR
//SUPERSCR JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL SUPERSCR - THE WORK DASD MAINT UTILITY
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS SUPERSCR TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,SUPERSCR
//*
//SUPERSCR EXEC SYSASM,MEMBER=SUPERSCR
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(SUPERSCR)
 SETCODE AC(1)
 NAME SUPERSCR(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=SUPERSPY
//SUPERSPY JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL SUPERSPY PROGRAM.. INVOKE MODIFIED TSO COMMANDS TO SCOPE
//*   OUT WHAT IS HAPPENING IN THE SYSTEM
//*  K TRUE   08 AUG 78
//*
//*********************************************************************
//SYSASM PROC
//ASM    EXEC PGM=IFOX00
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//       PEND
//********************************************************************
//********************************************************************
//SUPERSPY EXEC  SYSASM
//*
//ASM.SYSPUNCH DD DSN=&&OBJLIB(SUPERSPY),DISP=(,PASS),
//             UNIT=SYSDA,SPACE=(CYL,(2,1,10)),
//             DCB=BLKSIZE=800
//*
//ASM.SYSIN DD *
SUPERSPY TITLE 'MAINLINE - INVOKE DIAGNOSTIC COMMANDS'
*
* MAIN LINE TO INVOKE DIAGNOSTIC COMMANDS
*
         MACRO
&NAME    INVOKE  &PGM
&NAME    L     R15,=V(&PGM)
         BALR  R14,R15
         SPACE 2
         MEND
SUPERSPY PGM
         EJECT
*
START    INVOKE DJOBS
DOTSO    INVOKE DTSO
DODDMN   INVOKE DDMN
DOSASM   INVOKE SHOWASM
DOTAPES  INVOKE DTAPES
         LA     R1,DDPARM
DODASD   INVOKE DDASD
         LA     R1,DDPARM1
DODASD1  INVOKE DDASD
DOCLOSE  INVOKE CLSVMSG
         B      $$EOJ
         EJECT
         DS     0F
DDPARM   DC     A(PARMFLD)
PARMFLD  DC     AL2(05),CL10'(ALL)'
         DS     0F
DDPARM1  DC     A(PARMFLD1)
PARMFLD1 DC     AL2(10),CL15'(MS,WORK0)'
         END
/*
//********************************************************************
//DJOBS   EXEC   SYSASM
//ASM.SYSPUNCH DD DSN=&&OBJLIB(DJOBS),DISP=(OLD,PASS)
//ASM.SYSIN DD *
DJOBS  TITLE 'REPORT ON JOB ACTIVITY'
* THIS LITTLE  GEM WILL SCURRY AROUNT THE ASCBS AND CSCBS TO DISPLAY
*   THE  JOBS RUNNING IN THE SYSTEM (MODIFIED FOR SUPV I AND II S.U.)
*
* THROUGH STEALTH, THIS CODE IS NON PRIVLEDGED (ASSUMING THAT SQA IS
*  NOT FETCH PROTECTED.
*
* THIS WORKS FOR OS/VS2 REL 3.7 AND REQUIRES MACROS FROM
*   SYS1.AMODGEN
* KEN TRUE     FAIRCHILD CAMERA AND INSTRUMENT 22 OCT 76
*
* MODIFIED TO WORK AS TSO COMMAND OR OPER STC     K TRUE  27MAY77
*   ADD SWAP STATUS AND REASON CODE FROM OUCB       "       "
*
*
LINKREG  EQU   6                   LINK REGISTER
*
DJOBS    PGM                ,PGM TO SHOW EXEC JOBS AND STC
         MVI   BUFFER,C' '        CLEAR OUT BUFFER
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
         EXTRACT MF=(E,EXTRACT)
         L     R1,ANSWER            (R1)=ADDR OF TSO FLAG FROM EXTRACT
         MVC   TSOFLAG,0(R1)        MOVE IN THE ANSWER TO OUR FLAG
         SPACE
*
         LA    R2,0               COUNTER FOR # INITIATORS
         LA    R3,0               COUNTER FOR # JOBS/STC
         L     R11,CVTPTR         (R11)=ADDR CVT
         USING CVT,R11
         L     R9,CVTOPCTP        (R9) =ADDR (SRM'S RMCT)
         ST    R9,RMCTPTR            WHICH IS SAVED FOR LATER
         L     R9,CVTASVT         (R9)= ADDR ASVT
         USING ASVT,R9
         L     R5,ASVTMAXU        (R5)=MAX NUMB OF ASCB ENTRIES
         LA    R5,2(R5)              +2 SO WE CAN SCAN ENTIRE ASVT..
         LA    R9,ASVTFRST-4      (R9)= ADDR-4 OF FIRST ASCB ENTRY
         DROP  R9
         LA    R1,HEADING
         VMSG  MF=(E,(1))         WRITE OUT HEADING
         B     NEXTONE            GO GET ASCB
         USING ASCB,R8
*
* LOOP THROUGH ALL ASCBS
*
LOOP1    L     R10,ASCBCSCB       LOAD CSCB ADDR
         USING CSCB,R10
CHKCSCB  TM    CHTRKID,CHINITID   IS IT AN INIT?
         BNO   TESTJOB            NO-> ..GO CHECK FOR JOB
         LA    R2,1(R2)           YES-> INCR COUNT OF INITS
         B     NEXTONE              GO GET ANOTHER
*
*
TESTJOB  TM    CHTRKID,CHJOBID    IS IT A STC?
         BNO   NEXTONE            NOPE-> MUST BE TSO..GO GET ANOTHER
         MVI   SWITCH,X'F0'       SAY WE FOUND ONE
         MVC   JOBNAME,CHCLS      MOVE IN JOBNAME FROM CSCB
         MVC   PROCNAME,CHKEY     MOVE IN PROCNAME FROM CSCB
         MVC   STEPNAME,CHPROCSN  MOVE IN STEPNAME FROM CSCB
GETREST  LA    R3,1(R3)           BUMP COUNT OF JOBS/STC
         BAL   R6,COMPTIME        GO GET STEP/CPU TIME
*                                   AND MEMORY STATUS
         LA    R1,MSGWTO
         VMSG  MF=(E,(1))         SHOVEL IT OUT
         MVI   BUFFER,C' '        AND CLEAR IT OUT
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
*
NEXTONE  BCT   R5,DOIT            CHECK COUNT
         B     DOJOBS             NO MORE..SPLIT
DOIT     LA    R9,4(0,R9)         INCR INTO ASVT
         L     R8,0(0,R9)         LOAD ASCB ADDR
         LTR   R8,R8              END OF ASCBS?
         BZ    DOJOBS             YES->EXIT
         TM    0(R9),X'80'        ASID ASSIGNED?
         BO    NEXTONE            NO-> TRY AGAIN.
         B     LOOP1              YES->SEE IF WE LIKE IT
         EJECT
*
* NOW WE HAVE DISPOSED OF THE STC IN THE SYSTEM,
*
*  WE MUST GO BACK THRU THE ASCBS AND LOOK FOR 'REAL' JOBS...
*
*
DOJOBS   L     R11,CVTPTR         (R11)=ADDR CVT
         L     R9,CVTASVT         (R9)= ADDR ASVT
         USING ASVT,R9
         L     R5,ASVTMAXU        (R5)=MAX NUMB OF ASCB ENTRIES
         LA    R5,2(R5)              +2 SO WE CAN SCAN ENTIRE ASVT..
         LA    R9,ASVTFRST-4      (R9)= ADDR-4 OF FIRST ASCB ENTRY
         DROP  R9
         B     NEXTPLS            GO GET ASCB
*
* LOOP THROUGH ALL ASCBS
*
LOOP2    L     R10,ASCBCSCB       LOAD CSCB ADDR
         USING CSCB,R10
CHKCSCB1 TM    CHTRKID,CHINITID   IS IT AN INIT?
         BNO   NEXTPLS            ->NO GO GET ANOTHER ASCB
         L     R4,ASCBJBNI        GET PTR TO JOBNAME
         LTR   R4,R4              IS IT A JOB?
         BZ    NEXTPLS            NOPE->DRY INIT..GO GET ANOTHER
*
* HERE WE GET  SNEAKY..A HONEST TO GOD JOB'S CSCB IS NOT POINTED TO
*   BY ASCBCSCB, BUT INSTEAD, ASCBJBNI (JOBNAME) REALLY POINTS TO
*   THE  CHKEY IN THE CSCB FOR THE JOB. WE'LL GET OUR GOODIES
*   IN THE INDIRECT ROUTE........
*
         DROP  R10
         USING CSCB,R4
         S     R4,=F'8'           ADJUST FOR SNEAKINESS..
         MVC   JOBNAME,CHKEY      MOVE IN JOBNAME
         MVC   PROCNAME,CHSTEP    MOVE IN STEPNAME INVOK PROC
         MVC   STEPNAME,CHPROCSN  MOVE IN STEPNAME OF PROC
         DROP  R4
         USING CSCB,R10           PUT BACK ADDRESSABILITY TO
*                                  'REAL' CSCB..
         LA    R3,1(R3)           BUMP COUNT OF JOBS/STC
         BAL   R6,COMPTIME        GO GET STEP/CPU TIME
*                                   AND MEMORY STATUS
         LA    R1,MSGWTO
         VMSG  MF=(E,(1))         SHOVEL IT OUT
         MVI   BUFFER,C' '        AND CLEAR IT OUT
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
*
NEXTPLS  BCT   R5,DOIT1           CHECK COUNT
         B     CHKFIN             NO MORE..SPLIT
DOIT1    LA    R9,4(0,R9)         INCR INTO ASVT
         L     R8,0(0,R9)         LOAD ASCB ADDR
         LTR   R8,R8              END OF ASCBS?
         BZ    CHKFIN             YES->EXIT
         TM    0(R9),X'80'        ASID ASSIGNED?
         BO    NEXTPLS            NO-> TRY AGAIN.
         B     LOOP2              YES->SEE IF WE LIKE IT
*
CHKFIN   CLC   BUFFER(8),=CL8' '  ANYTHING TO WRITE?
         BE    CLEANUP            NO-> SPLIT
         LA    R1,MSGWTO
         VMSG  MF=(E,(1))         SHOVEL IT OUT
         EJECT
CLEANUP  TM    SWITCH,X'F0'       DID WE POKE ANYTHING
         BZ    NOOUTPUT           NO..GRIPE AND SPLIT
         CVD   R2,WRKD            CONVERT TO BIN
         MVC   NINIT,=X'402020202120' MOVE IN THE PATTERN
         ED    NINIT,WRKD+5       EDIT THE PATTERN
         CVD   R3,WRKD            CONVERT TO BIN
         MVC   NJOBS,=X'402020202120' MOVE IN THE PATTERN
         ED    NJOBS,WRKD+5       EDIT THE PATTERN
         LA    R1,MSG2
         VMSG  MF=(E,(1))         SHOVEL IT OUT
*
         B     $$EOJ              RETURN
         SPACE 2
NOOUTPUT LA    R1,GRIPE
         VMSG  MF=(E,(1))         SHOVEL IT OUT
         B     $$EOJ
*
         EJECT
*
*  LOCAL  SUBROUTINE TO CALC JOB TIME AND CPU TIME.
*       AND GEN SWAP REASON CODES/MEMORY STATUS
*
*  ENTER  WITH BAL R6,COMPTIME  (ALL REGS PRESERVED)
*
*
*   COMPUTE ELAPSED TRANSACTION TIME (JOB TIME FOR BATCH)
*
*
COMPTIME STM   R4,R7,SAVEREGS    SAVE WORK REGS
         SPACE 1
ELAPSED  L     R4,RMCTPTR        POINTER TO THE RMCT.
         L     R4,X'7C'(,R4)     PICK UP TIME OF DAY FROM RMCT.  (SU)
         L     R5,ASCBOUCB       GET ADDR OF OUCB FOR USER
         S     R4,72(,R5)        SUBTRACT TRANSACTION START TIME.(SU)
         SRDL  R4,32             MOVE INTO R5 FOR DIVIDE.
         D     R4,=F'1024'       CONVERT TO SECONDS.
         SR    R4,R4             IGNORE REMAINDER.
         D     R4,=F'3600'       DIVIDE TO GET HOURS.
         CVD   R5,WRKD           CONVERT HOURS -
         UNPK  JOBHH,WRKD+6(2)     - TO PRINTABLE FORMAT.
         OI    JOBHH+1,X'F0'     FIXUP SIGN BYTE.
         MVI   JOBHH+2,C':'      SEPARATOR.
         SRDL  R4,32             MOVE REMAINDER OVER FOR DIVIDE.
         D     R4,=F'60'         GET MINUTES.
         CVD   R5,WRKD           CONVERT MINUTES -
         UNPK  JOBMM(2),WRKD+6(2)  - TO PRINTABLE FORMAT.
         OI    JOBMM+1,X'F0'     FIXUP SIGN BYTE.
         MVI   JOBMM+2,C':'      SEPARATOR.
         CVD   R4,WRKD           REMAINDER IS SECONDS.
         UNPK  JOBSS(2),WRKD+6(2)  CONVERT SEC TO PRINTABLE FORMAT.
         OI    JOBSS+1,X'F0'     FIXUP SIGN.
         SPACE 2
*
*   COMPUTE TOTAL CPU TIME USED IN THE CURRENT STEP.
*
CPUSTART LM    R4,R5,ASCBEJST    LOAD ASCBEJST (CPU TASK TIME).
         SRDL  R4,12             CONVERT TO MICRO-SECONDS.
         LM    R6,R7,ASCBSRBT    LOAD ASCBSRBT (CPU SRB TIME).
         SRDL  R6,12             CONVERT TO MICROSECONDS.
         AR    R5,R7             TOTAL CPU TIME (LOW ORDER).
         BNO   CPULBL1           BRANCH IF NO OVERFLOW ON ADD.
         A     R4,=F'1'          OTHERWISE, ADD 1 TO HIGH ORDER.
CPULBL1  AR    R4,R6             TOTAL CPU TIME (HIGH ORDER).
         D     R4,=F'100'        DIVIDE TO GET SECONDS.
         LTR   R5,R5             CHK TO SEE IF ANYTHING IS THERE
         BNM   CPULBL3           BRANCH IF RESULT MAKES SENSE.
         LA    R5,0              OTHERWISE, SET THE VALUE TO ZERO.
CPULBL3  CVD   R5,WRKD           *
         MVC   CPUTIME,=X'20202021204B2020' *
         ED    CPUTIME-1(9),WRKD+3 *
         EJECT
*
***********************************************************************
*
*        SWAP  REASON CODE (R8=ASCB,R7=OUCB,R4-6=WORK)
*
***********************************************************************
         L     R7,ASCBOUCB        GET ADDR OF OUCB
         USING OUCB,R7
SRCSTART SR    R4,R4              PREPARE FOR IC INSTRUCTION.     V2M0
         IC    R4,OUCBSRC         LOAD SU7 SWAP REASON CODE.      V2M0
         SLL   R4,2               MULTIPLY BY FOUR FOR OFFSET     V2M0
         LA    R4,SRCTABLE(R4)    POINT TO CORRECT ENTRY.         V2M0
         MVC   MEMSTAT2,0(R4)     MOVE IN SWAP REASON CODE.       V2M0
SRCEND   DS    0H                 LABEL.
         SPACE 2
***********************************************************************
*
*        FIND  MEMORY POSITION (R8=ASCB,R7=OUCB,R4-6=WORK)
*
***********************************************************************
QLCSTART MVC   MEMSTAT1,=CL2'IN'  DEFAULT POSITION IS SWAPPED-IN. V2M0
         TM    OUCBSFL,OUCBNSW    SEE IF NON-SWAPPABLE MEMORY.    V2M0
         BZ    QLCLBL1C           BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'NS'  MOVE IN NON-SWAPPABLE INDICATIONV2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.
QLCLBL1C TM    OUCBSFL,OUCBPVL    SEE IF PRIVILEDGED STATUS.      V2M0
         BZ    QLCLBL1            BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'PR'  MOVE IN PRIVILEDGED INDICATION. V2M0
*                                 BUT CONTINUE IN CASE SWAPPED-OUT.
QLCLBL1  TM    OUCBQFL,OUCBOFF    TEST FOR WAIT QUEUE.            V2M0
         BZ    QLCLBL2            BRANCH IF NOT.
         MVC   MEMSTAT1,=C'WT'    INDICATE WAIT STATUS.           V2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.       V2M0
QLCLBL2  TM    OUCBQFL,OUCBOUT    TEST FOR OUT QUEUE.             V2M0
         BZ    QLCLBL3            BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'S '  INDICATE OUT STATUS.            V2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.
QLCLBL3  TM    OUCBQFL,X'E0'      CHECK MISCELLANEOUS BITS.       V2M0
         BZ    QLCEND             ASSUME MEMORY IS SWAPPED-IN.
         MVC   MEMSTAT1,=CL2'<>'  INDICATE TRANSITIONING STATUS.
QLCEND   DS    0H                 LABEL.
         SPACE 2
         LM    R4,R7,SAVEREGS    RESTORE REGISTERS
         BR    R6                AND RETURN..
         EJECT
*.....................................................................*
*        LIST FORMS OF MACROS                                         *
*.....................................................................*
         SPACE 2
EXTRACT  EXTRACT ANSWER,'S',FIELDS=(TSO),MF=L
         EJECT
*.....................................................................*
*        VARIABLES                                                    *
*.....................................................................*
         SPACE 2
SWITCH   DC    XL1'00'
TSOFLAG  DC    X'00'               ='80' IF TSO. '00' IF NOT TSO
ANSWER   DC    F'0'                ADDRESS POINTER FOR EXTRACT
         SPACE 2
WRKD     DC    D'0'
RMCTPTR  DS    F
SAVEREGS DS    4F
         EJECT
*.....................................................................*
*        CONSTANTS                                                    *
*.....................................................................*
         SPACE 2
SRCTABLE DC    C'    TPUTTGETLONGPGS<RSS<WAITRQSWDENQEXCHSWAP'
*                0...1...2...3...4...5...6...7...8...9...A...
         SPACE 2
**********************************************************************
* SWAP REASON CODES - TWO BYTES PER ENTRY:
*
*      CODE    DESCRIPTION
*      ----    -------------------------------------------------------
*       TPUT   TERMINAL OUTPUT WAIT SWAP-OUT.
*       TGET   TERMINAL INPUT WAIT SWAP-OUT.
*       LONG   LONG WAIT CAUSED SWAP-OUT.
*       PGS<   AUXILIARY STORAGE (PAGING SPACE) SHORTAGE SWAP-OUT.
*       RSS<   REAL STORAGE PAGEABLE POOL SHORTAGE SWAP-OUT.
*       WAIT   MSO DETECTED WAIT SWAP-OUT.
*       RQSW   REQSWAP SYSEVENT CAUSED SWAP-OUT.
*       DENQ   CAP ENQ EXCHANGE SWAP-OUT.
*       EXCH   CAP EXCHANGE SWAP BASED UPON RECOMMENDATION VALUES.
*       SWAP   CAP UNILATERAL SWAP-OUT.
**********************************************************************
         EJECT
*.....................................................................*
*        MESSAGE FORMATS                                              *
*.....................................................................*
         SPACE 2
GRIPE    WTO   '**NO INITIATORS OR JOBS RUNNING**',ROUTCDE=(11),MF=L
         SPACE 2
MSG2     WTO   '..XXXXXX JOBS XXXXXX INITIATORS',ROUTCDE=(11),MF=L
         ORG   MSG2+6
NJOBS    DS    CL6
         ORG   MSG2+18
NINIT    DS    CL6
         ORG
         EJECT
MSGWTO   WTO   '123456789.123456789.123456789.123456789.123456789.12345X
               6789.123456789.1  ',ROUTCDE=(11),MF=L
         ORG   MSGWTO+4
BUFFER   DS    CL72
         ORG   MSGWTO+4
JOBNAME  DS    CL8                JOBNAME
         DS    CL1                FILLER
PROCNAME DS    CL8                STEPNAME  OR STEPNAME INVOKING PROC
         DS    CL1
STEPNAME DS    CL8                STEPNAME FOR PROCS
         DS    CL1
MEMSTAT1 DS    CL2
         DS    CL1
MEMSTAT2 DS    CL4                MEMORY STATUS = SWAPPED NS
         DS    CL1
JOBHH    DS    CL2                FOR JOB  TIME HH:MM:SS
         DS    CL1
JOBMM    DS    CL2
         DS    CL1
JOBSS    DS    CL2
         DS    CL1
CPUTIME  DS    CL8                FOR CPUTIME NNNNN.NN SECONDS
         ORG
         SPACE 2
*               XXXXXXXX XXXXXXXX XXXXXXXX XX XXXX XX:XX:XX NNNNN.NN
HEADING  WTO   'JOBNAME  STEPNAME PROCSTEP STATUS  JOB-TIME STEP-CPU SEX
               C',ROUTCDE=(11),MF=L
*
         EJECT
*.....................................................................*
*        LITERALS                                                     *
*.....................................................................*
         SPACE 2
         LTORG
         EJECT
CVT      DSECT
         CVT   SYS=VMS,TSO=YES
         EJECT
CSCB     DSECT
         IEECHAIN
         EJECT
         IHAASCB
         EJECT
         IHAASVT
         EJECT
BIT0     EQU   128
BIT1     EQU   64
BIT2     EQU   32
BIT3     EQU   16
BIT4     EQU   8
BIT5     EQU   4
BIT6     EQU   2
BIT7     EQU   1
OUCB     DSECT
OUCBNAME DC    C'OUCB' -           BLOCK IDENTIFICATION
OUCBFWD  DC    A(OUCB) -           SWAP CHAIN FORWARD POINTER
OUCBBCK  DC    A(OUCB) -           SWAP CHAIN BCKWARD POINTER
OUCBTMA  DC    F'0' -              TIME OF LAST ANALYSYS      @Z40BPCH
OUCBQFL  DC    B'00100000' -       SWAPPABILITY TRANSITION FLAGS
OUCBGOO  EQU   BIT0 -              TRANSITIONING OUT OF CORE
OUCBGOI  EQU   BIT1 -              TRANSITIONING INTO CORE
OUCBGOB  EQU   BIT2 -              TRANSITIONING BETWEEN STATES
OUCBOFF  EQU   BIT4 -              REQUESTING ENTER WAIT STATE
OUCBOUT  EQU   BIT5 -              REQUESTING ENTER OUT STATE
OUCBSFL  DC    B'10010100' -       SWAPOUT CONTINUATION FLAGS
OUCBNSW  EQU   BIT0 -              NON-SWAPPABLE STATUS
OUCBCTI  EQU   BIT1 -              CTL INHIBITS QUIESCE
OUCBBIB  EQU   BIT2 -              BRING IN FOR CANCEL         @Z40BPCH
OUCBINV  EQU   BIT3 -              =1 IF OUCB IS INVALID       @Z40BPCH
OUCBPVL  EQU   BIT5 -              PRIVILEGED PROGRAM RUNNING
OUCBENQ  EQU   BIT6 -              ENQ RESIDENT STATUS
OUCBSCN  EQU   BIT7 -              SWAP CHAIN TERMINATION MARK
OUCBYFL  DC    B'00000000' -       USER TYPE FLAGS
OUCBPSTE EQU   BIT0 -              POST ERROR @ZA07127
OUCBSTT  EQU   BIT1 -              START CREATED USER
OUCBLOG  EQU   BIT2 -              LOGON CREATED USER
OUCBMNT  EQU   BIT3 -              MOUNT CREATED USER
OUCBR01  EQU   BIT4 -              RESERVED                    @ZM43085
OUCBAXS  EQU   BIT5 -              AUX SHORTAGE FORCED SWAP
OUCBDTA  EQU   BIT6 -              DATA ACCUMULATION IMPACTED
OUCBFXS  EQU   BIT7 -              FIXED STORAGE FORCED SWAP   @Z40BPCH
OUCBAFL  DC    B'00000000' -       ALGORITHM STATUS FLAGS
OUCBAPG  EQU   BIT1 -              APG ALGORITHM APPLICABLE
OUCBRMA  EQU   BIT2 -              RMA ALGORITHM APPLICABLE
OUCBCPL  EQU   BIT3 -              SIGNIFICANT CPU USER FLAG
OUCBJSR  EQU   BIT4 -              JOBSELECT RECEIVED          @Z40BPCH
OUCBR02  EQU   BIT5 -              RESERVED                   @ZM43085
OUCBNWT  EQU   BIT6 -              MSO DETECTED NONSWAPPABLE WAIT
OUCBASW  EQU   BIT7 -              AUTHORIZED FOR DONTSWAP
OUCBTFL  DC    B'00000000' -       TRANSACTION STATUS FLAGS
OUCBATR  EQU   BIT0 -              TRANSACTION IN EXISTENCE
OUCBSTR  EQU   BIT1 -              TRANSACTION START PENDING
OUCBNTR  EQU   BIT2 -              TRANSACTION STOP PENDING
OUCBRTR  EQU   BIT3 -              TRANSACTION RESUME PENDING
OUCBPCH  EQU   BIT4 -              PERF GRP PERIOD CHANGE PENDING
OUCBMAR  EQU   BIT5 -              ACTIVITY RECORDING SUBTRACT FLAG
OUCBINP  EQU   BIT6 -              INITIATOR ATTACH PENDING
OUCBINC  EQU   BIT7 -              INITIATOR ATTACH CURRENT
OUCBEFL  DC    B'00000000' -       EVENT STATUS FALGS
OUCBLWT  EQU   BIT0 -              LONG WAIT STATUS
OUCBTRM  EQU   BIT1 -              TERMINAL WAIT STATUS
OUCBOWT  EQU   BIT2 -              OUTPUT TERMINAL WAIT
OUCBCIM  EQU   BIT3 -              COMPOSITE INPUT MESSAGE
OUCBNQF  EQU   BIT4 -              ENQHOLD EVENT PROCESSED
OUCBQSS  EQU   BIT5 -              QSCEST  EVENT PROCESSED
OUCBQSC  EQU   BIT6 -              QSCECMP EVENT PROCESSED
OUCBMWT  EQU   BIT7 -              MSO DETECTED WAIT STATUS
OUCBNQC  DC    HL1'0' -            NO. OF OUTSTANDING ENQHOLDS
OUCBUFL  DC    B'00000000' -       USER TYPE FLAGS             @ZM43072
OUCBJSFS EQU   BIT0 -              JOB SELECT DELAYED          @ZM43072
OUCBJSAS EQU   BIT1 -              JOB SELECT DELAYED          @ZM43072
OUCBNPG  DC    HL1'0' -            NEW PERFORMANCE GROUP NUMBER
OUCBRPG  DC    HL1'0' -            RESET PERFORMANCE GROUP NUMBER
OUCBNDP  DC    HL1'0' -            NEW ASCB DISPATCHING PRIORITY
OUCBRDP  DC    HL1'0' -            REAL DISPATCHING PRIORITY   @Z40BPCH
OUCBSPG  DC    HL1'0' -            SPECIFIED PERFORMANCE GROUP @Z40BPCH
OUCBR30  DC    HL1'0' -            RESERVED                    @Z40BPEB
OUCBR40  DC    HL1'0' -            RESERVED                    @Z40BPEB
OUCBPGP  DC    HL1'12' -           CURRENT WPGP OFFSET IN WPGD
OUCBWMG  DC    H'0' -              WPGD OFFSET IN WPGD TABLE
OUCBDMO  DC    H'0' -              OFFSET INTO DOMAIN TABLE    @Z40BPCH
OUCBDMN  DC    HL1'0'              DOMAIN NUMBER               @Z40BPCH
OUCBSRC  DC    HL1'0'              SWAP OUT REASON CODE        @Z40BPCH
OUCBSWC  DC    H'0' -              TRANSACTION SWAP COUNT
OUCBASCB DC    A(0) -              ASCB ADDRESS
OUCBIMCB DC    A(0) -              IMCB ADDRESS
OUCBTMW  DC    F'0' -              WLM INTERVAL START TIME
OUCBWMS  DC    F'0' -              INTERVAL SERVICE ACCUMULATOR
OUCBCPU  DC    F'0' -              INTERVAL CPU SERVICE ACCUM  @Z40BPCH
OUCBIOC  DC    F'0' -              INTERVAL I/O SERVICE ACCUM  @Z40BPCH
OUCBMSO  DC    F'0' -              INTERVAL MSO SERVICE ACCUM  @Z40BPCH
OUCBTMS  DC    F'0' -              TIME OF LAST SWAP ACTION
OUCBTMO  DC    F'0' -              TRANSACTION START TIME
OUCBPSO  DC    H'0' -              PAGES SWAPPED AT LAST SWAP-OUT
OUCBWSS  DC    H'0' -              WORKING SET SIZE AT SWAP-IN
OUCBACT  DC    A(0) -              ACTION QUEUE FORWARD POINTER
OUCBCSW  DS    0F -                COMPARE AND SWAP FIELD NAME
OUCBACN  DC    2B'00000000' -      DEFERRED ACTION FLAGS
OUCBCFL  DC    B'00000000' -       MULTIPROCESS CONDITION FLAGS
OUCBRDY  EQU   BIT0 -              USERRDY EVENT RECEIVED
OUCBRSM  EQU   BIT1 -              RSM SERVICE OUTSTANDING
OUCBCMRV DC    F'0' -              COMPOSITE RECOM VALUE       @Z40BPCH
OUCBWMR  DC    F'0' -              WLM RECOMMENDATION VALUE    @Z40BPCH
OUCBIRV  DC    H'0' -              IOM RECOMMENDATION VALUE    @Z40BPCH
OUCBCRV  DC    H'0' -              CPM RECOMMENDATION VALUE    @Z40BPCH
OUCBIOR  DC    H'0' -              I/O USAGE PROFILE
OUCBR03  DC    H'0' -              RESERVED                    @ZM43085
OUCBTMP  DC    F'0' -              PERF GRP PERIOD STARTING TIME
OUCBR04  DC    H'0' -              RESERVED                    @ZM43085
OUCBR05  DC    H'0' -              RESERVED                    @ZM43085
OUCBPSS  DC    D'0' -              CPU PAGE SECONDS            @Z40BPCH
OUCBPS1  EQU   OUCBPSS -           HIGH WORD PAGE SECONDS      @Z40BPCH
OUCBPS2  EQU   OUCBPSS+4 -         LOW  WORD PAGE SECONDS      @Z40BPCH
OUCBPST  DC    F'0' -              TIME OF LAST WORKING SET CHANGE
*                                                              @Z40BPCH
OUCBTCP  DC    F'0' -              TIME OF CPU USAGE EVALUATION
*                                                              @Z40BPCH
OUCBTIO  DC    F'0' -              TIME OF I/O USAGE EVALUATION
*                                                              @Z40BPCH
OUCBNDS  DC    H'1' -              NUM OUTSTANDING DONTSWAPS   @Z40BPEB
OUCBR90  DC    H'0' -              RESERVED                    @Z40BPEB
OUCBEND  DS    0D -                END OF OUCB
OUCBLEN  EQU   OUCBEND-OUCB -      LENGTH OF OUCB
         END
/*
//********************************************************************
//DTSO     EXEC  SYSASM
//ASM.SYSPUNCH DD DSN=&&OBJLIB(DTSO),DISP=(OLD,PASS)
//ASM.SYSIN DD *
DTSO TITLE 'DISPLAY TSO USER STATUS'
* THIS IS THE SHOWTSO COMMAND FOR TSO. (MOD FOR SUPV I & II S. U.)
*
* IT PEEKS AT ASCBS TO FIND TSO USERS AND FORMATS A DISPLAY
*   OF USERIDS/SWAP STATUS/ASID AND TERMINAL UNIT.
*
* THIS PGM IS NON-PRIVLIGED; REQUIRES MACROS FROM SYS1.AMODGEN
*
* KEN TRUE   FAIRCHILD CAMERA AND INSTRUMENT   15DEC76
*
* MODIFIED TO OPERATE AS OPER STC OR TSO COMMAND  K TRUE   27MAY77
*
*
*
LINKREG  EQU   6                   LINK REGISTER
*
DTSO     PGM                ,PGM TO SHOW TSO USERS-ASID/UNIT ADDR
         MVI   BUFFER,C' '        CLEAR OUT BUFFER
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
         EXTRACT MF=(E,EXTRACT)
         L     R1,ANSWER            (R1)=ADDR OF TSO FLAG FROM EXTRACT
         MVC   TSOFLAG,0(R1)        MOVE IN THE ANSWER TO OUR FLAG
         SPACE
         LA    R3,0               COUNTER FOR # TSO USERS
         LA    R7,#ENTRYS         ENTRIES PER LINE
         LA    R2,BUFFER          BUFFER ADDRESS
         L     R11,CVTPTR         (R11)=ADDR CVT
         USING CVT,R11
         L     R9,CVTOPCTP        (R9) =ADDR (SRM'S RMCT)
         ST    R9,RMCTPTR            WHICH IS SAVED FOR LATER
         L     R9,CVTASVT         (R9)= ADDR ASVT
         USING ASVT,R9
         L     R5,ASVTMAXU        (R5)=MAX NUMB OF ASCB ENTRIES
         LA    R5,2(R5)              +2 SO WE CAN SCAN ENTIRE ASVT..
         LA    R9,ASVTFRST-4      (R9)= ASVT ENTRY ADDRESS - 4
         USING ASCB,R8
         USING CSCB,R10
         DROP  R9
         USING OVERLAY,R2         MAPPING...
         LA    R1,HEADING
         VMSG  MF=(E,(1))         SHOVEL OUT THE LINE
         B     NEXTONE            GO GET ASCB
*
* LOOP THROUGH ALL ASCBS
*
LOOP1    LM    R10,R11,ASCBCSCB   LOAD CSCB/TSB ADDR
         LTR   R11,R11            ANYBODY HOME?
         BZ    NEXTONE            NO NOT TP USER
         MVI   SWITCH,X'F0'       OUTPUT EXISTS..
         CLC   CHPARM,=CL8' '     ANYBODY REALLY HOME?
         BNE   MOVEIT             YEP-> GO MOVE EM IN
         MVC   USERID,=C'STARTING' NOPE-> USE DUMMY NAME
         B     CONT#1             GO FINISH UP WITH ASID
MOVEIT   MVC   USERID,CHKEY       MOVE IN USERID
CONT#1   DS    0H
         UNPK  ASID(5),ASCBASID(3) UNPACK ASID
         NC    ASID,HEXMASK       AND
         TR    ASID,HEXTAB         TRANSLATE
         STAX  MF=(E,DEFER)             HOLD DEM ATTENTIONS...
         PRINT OFF
         L     0,CODE
         SR    1,1
         SVC   254
*
         ST    1,OLDKEY
         PRINT OFF
         UNPK  LDASH(5),82(3,R11) UNPACK LINE ADDR
         PRINT OFF
         LM    0,1,CODE                  RETURN TO ORIGINAL KEY
         SVC   254
         XC    OLDKEY,OLDKEY
         PRINT OFF
         STAX  MF=(E,NODEFER)            LET ATTENTIONS HAVE FUN..
         MVI   LDASH,C' '
         NC    UNIT,HEXMASK       AND
         TR    UNIT,HEXTAB          TRANSLATE
         MVI   RDASH,C' '
         BAL   R6,COMPTIME        GO GET STEP TIME/CPU TIME
         LA    R2,ENTRYSIZ(0,R2)  INCR INTO BUFFER
         LA    R3,1(R3)           BUMP COUNT
         BCT   R7,NEXTONE         GO GET NEXT ASCB
*
         LA    R1,MSGWTO
         VMSG  MF=(E,(1))         SHOVEL OUT THE LINE
         LA    R7,#ENTRYS         ENTRIES PER LINE
         LA    R2,BUFFER          RESET ADDRESS
         MVI   BUFFER,C' '        AND CLEAR IT OUT
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
*
NEXTONE  BCT   R5,DOIT            CHECK COUNT
         B     LOOP2              NO MORE..SPLIT
DOIT     LA    R9,4(0,R9)         INCR INTO ASVT
         L     R8,0(0,R9)         LOAD ASCB ADDR
*        LA    R8,0(0,R8)         CLEAR HIGH ORDER
         LTR   R8,R8              END OF ASCBS?
         BZ    LOOP2              YES->EXIT
         TM    0(R9),X'80'        ASID ASSIGNED?
         BO    NEXTONE            NO-> TRY AGAIN.
         B     LOOP1              YES->SEE IF WE LIKE IT
*
LOOP2    CH    R7,#ENTH           ANYTHING TO WRITE?
         BE    CLEANUP            NO-> SPLIT
         LA    R1,MSGWTO
         VMSG  MF=(E,(1))         SHOVEL OUT THE LINE
         EJECT
CLEANUP  TM    SWITCH,X'F0'       DID WE POKE ANYTHING
         BZ    NOOUTPUT           NO..GRIPE AND SPLIT
         CVD   R3,WRKD            CONVERT TO BIN
         MVC   MSG2USER,=X'402020202120'  MOVE IN THE PATTERN
         ED    MSG2USER,WRKD+5    EDIT THE PATTERN
         LA    R1,MSG2
         VMSG  MF=(E,(1))         SHOVEL OUT THE LINE
*
         B     $$EOJ              RETURN
         SPACE 2
NOOUTPUT LA    R1,GRIPE
         VMSG  MF=(E,(1))         SHOVEL OUT THE LINE
         B     $$EOJ
         EJECT
*
*  LOCAL SUBROUTINE TO CALC STEP TIME AND CPU TIME.
*      AND SWAP STATUS, PAGES + WORKING SET SIZE
*  ENTER WITH  BAL R6,COMPTIME  (ALL REGS PRESERVED)
*
*
*   COMPUTE ELAPSED TRANSACTION TIME (STEP TIME..)
*
COMPTIME STM    R4,R7,SAVEREGS    SAVE WORK REGS
          SPACE 1
ELAPSED  L     R4,RMCTPTR        POINTER TO THE RMCT.
         L     R4,X'7C'(,R4)     PICK UP TIME OF DAY FROM RMCT. (SU)
         L     R5,ASCBOUCB       GET ADDR OF OUCB FOR USER
         S     R4,72(,R5)        SUBTRACT TRANSACTION START TIME.(SU)
         SRDL  R4,32              MOVE INTO R5 FOR DIVIDE.
         D     R4,=F'1024'       CONVERT TO SECONDS.
         SR    R4,R4             IGNORE REMAINDER.
         D     R4,=F'3600'       DIVIDE TO GET HOURS.
         CVD   R5,WRKD           CONVERT HOURS -
         UNPK  STEPHH,WRKD+6(2)     - TO PRINTABLE FORMAT.
         OI    STEPHH+1,X'F0'    FIXUP SIGN BYTE.
         MVI   STEPHH+2,C':'     SEPARATOR.
         SRDL  R4,32              MOVE REMAINDER OVER FOR DIVIDE.
         D     R4,=F'60'         GET MINUTES.
         CVD   R5,WRKD           CONVERT MINUTES -
         UNPK  STEPMM(2),WRKD+6(2)  - TO PRINTABLE FORMAT.
         OI    STEPMM+1,X'F0'    FIXUP SIGN BYTE.
         MVI   STEPMM+2,C':'     SEPARATOR.
         CVD   R4,WRKD           REMAINDER IS SECONDS.
         UNPK  STEPSS(2),WRKD+6(2)  CONVERT SEC TO PRINTABLE FORMAT.
         OI    STEPSS+1,X'F0'    FIXUP SIGN.
         SPACE 2
*
*   COMPUTE TOTAL CPU TIME USED...
*
CPUSTART LM    R4,R5,ASCBEJST    LOAD ASCBEJST (CPU TASK TIME).
         SRDL  R4,12              CONVERT TO MICRO-SECONDS.
         LM    R6,R7,ASCBSRBT    LOAD ASCBSRBT (CPU SRB TIME).
         SRDL  R6,12              CONVERT TO MICROSECONDS.
         AR    R5,R7             TOTAL CPU TIME (LOW ORDER).
         BNO   CPULBL1           BRANCH IF NO OVERFLOW ON ADD.
         A     R4,=F'1'          OTHERWISE, ADD 1 TO HIGH ORDER.
CPULBL1  AR    R4,R6             TOTAL CPU TIME (HIGH ORDER).
         D     R4,=F'100'        DIVIDE TO GET SECONDS.
         LTR   R5,R5             CHK TO SEE IF ANYTHING IS THERE
         BNM   CPULBL3           BRANCH IF RESULT MAKES SENSE.
         LA    R5,0              OTHERWISE, SET THE VALUE TO ZERO.
CPULBL3  CVD   R5,WRKD           *
         MVC   CPUTIME,=X'20202021204B2020' *
         ED    CPUTIME-1(9),WRKD+3 *
         EJECT
*
***********************************************************************
*
*        SWAP  REASON CODE (R8=ASCB,R7=OUCB,R4-6=WORK)
*
***********************************************************************
         L     R7,ASCBOUCB        GET ADDR OF OUCB
         USING OUCB,R7
SRCSTART SR    R4,R4              PREPARE FOR IC INSTRUCTION.     V2M0
         IC    R4,OUCBSRC         LOAD SU7 SWAP REASON CODE.      V2M0
         SLL   R4,2               MULTIPLY BY FOUR FOR OFFSET     V2M0
         LA    R4,SRCTABLE(R4)    POINT TO CORRECT ENTRY.         V2M0
         MVC   MEMSTAT2,0(R4)     MOVE IN SWAP REASON CODE.       V2M0
SRCEND   DS    0H                 LABEL.
         SPACE 2
***********************************************************************
*
*        FIND  MEMORY POSITION (R8=ASCB,R7=OUCB,R4-6=WORK)
*
***********************************************************************
QLCSTART MVC   MEMSTAT1,=CL2'IN'  DEFAULT POSITION IS SWAPPED-IN. V2M0
         TM    OUCBSFL,OUCBNSW    SEE IF NON-SWAPPABLE MEMORY.    V2M0
         BZ    QLCLBL1C           BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'NS'  MOVE IN NON-SWAPPABLE INDICATIONV2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.
QLCLBL1C TM    OUCBSFL,OUCBPVL    SEE IF PRIVILEDGED STATUS.      V2M0
         BZ    QLCLBL1            BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'PR'  MOVE IN PRIVILEDGED INDICATION. V2M0
*                                 BUT CONTINUE IN CASE SWAPPED-OUT.
QLCLBL1  TM    OUCBQFL,OUCBOFF    TEST FOR WAIT QUEUE.            V2M0
         BZ    QLCLBL2            BRANCH IF NOT.
         MVC   MEMSTAT1,=C'WT'    INDICATE WAIT STATUS.           V2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.       V2M0
QLCLBL2  TM    OUCBQFL,OUCBOUT    TEST FOR OUT QUEUE.             V2M0
         BZ    QLCLBL3            BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'S '  INDICATE OUT STATUS.            V2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.
QLCLBL3  TM    OUCBQFL,X'E0'      CHECK MISCELLANEOUS BITS.       V2M0
         BZ    QLCEND             ASSUME MEMORY IS SWAPPED-IN.
         MVC   MEMSTAT1,=CL2'<>'  INDICATE TRANSITIONING STATUS.
QLCEND   DS    0H                 LABEL.
         SPACE 2
***********************************************************************
*
*        ALLOCATED FRAME COUNT (R8=ASCB,R7=OUCB,R4-6=WORK)
*
***********************************************************************
AFCSTART LH    R4,152(,R8)        LOAD CURRENT ALLOCATED FRAME CNT.
         C     R4,=F'999'         CHECK FOR MAXIMU EXCEEDED.
         BNH   AFCLBL1            BRANCH IF NOT.
         MVC   SIZE(3),=C'***'    INDICATE VALUE TOO LARGE.
         B     AFCEND             EXIT THIS ROUTINE.
AFCLBL1  CVD   R4,WRKD            *
         MVC   SIZE(3),=X'202120' *
         ED    SIZE-1(4),WRKD+6   *
AFCEND   DS    0H                 *
         SPACE 2
***********************************************************************
*
*        WORKING SET SIZE (R8=ASCB,R7=OUCB,R4-6=WORK)
*
***********************************************************************
WSSSTART MVI   WSS+2,C'-'         NULL VALUE.                     V2M0
         TM    OUCBSFL,OUCBNSW    SEE IF NON-SWAPPABLE.           V2M0
         BO    WSSEND             EXIT IF YES.
         LH    R4,OUCBWSS         LOAD WORKING SET AT LAST SWAP.  V2M0
         CVD   R4,WRKD            *
         MVC   WSS(3),=X'202120' *                                V2M0
         ED    WSS-1(4),WRKD+6 *                                  V2M0
WSSEND   DS    0H                 LABEL.
         SPACE 2
         LM    R4,R7,SAVEREGS    RESTORE REGISTERS
         BR    R6                AND RETURN..
         EJECT
*.....................................................................*
*        CONSTANTS                                                    *
*.....................................................................*
         SPACE 2
HEXMASK  DC    X'0F0F0F0F'
HEXTAB   DC    C'0123456789ABCDEF'
SRCTABLE DC    C'    TPUTTGETLONGPGS<RSS<WAITRQSWDENQEXCHSWAP'
*                0...1...2...3...4...5...6...7...8...9...A...
         SPACE 2
**********************************************************************
* SWAP REASON CODES - TWO BYTES PER ENTRY:
*
*      CODE    DESCRIPTION
*      ----    -------------------------------------------------------
*       TPUT   TERMINAL OUTPUT WAIT SWAP-OUT.
*       TGET   TERMINAL INPUT WAIT SWAP-OUT.
*       LONG   LONG WAIT CAUSED SWAP-OUT.
*       PGS<   AUXILIARY STORAGE (PAGING SPACE) SHORTAGE SWAP-OUT.
*       RSS<   REAL STORAGE PAGEABLE POOL SHORTAGE SWAP-OUT.
*       WAIT   MSO DETECTED WAIT SWAP-OUT.
*       RQSW   REQSWAP SYSEVENT CAUSED SWAP-OUT.
*       DENQ   CAP ENQ EXCHANGE SWAP-OUT.
*       EXCH   CAP EXCHANGE SWAP BASED UPON RECOMMENDATION VALUES.
*       SWAP   CAP UNILATERAL SWAP-OUT.
**********************************************************************
         EJECT
*.....................................................................*
*        VARIABLES                                                    *
*.....................................................................*
         SPACE 2
WRKD     DC    D'0'
RMCTPTR  DS    F
SAVEREGS DS    4F
         PRINT OFF
CODE     DC    X'ABCFEDAD'
OLDKEY   DC    F'0'
         PRINT ON
ANSWER   DC    F'0'                ADDRESS POINTER FOR EXTRACT
SWITCH   DC    XL1'00'
TSOFLAG  DC    X'00'               ='80' IF TSO. '00' IF NOT TSO
         EJECT
*.....................................................................*
*        MESSAGES                                                     *
*.....................................................................*
         SPACE 2
GRIPE    WTO   '**NO TIMESHARING USERS ARE ACTIVE**',ROUTCDE=(11),MF=L
*               XXXXXXX XX XXXX XXXX  XXX XXX XXX XX:XX:XX NNNNN.NN
HEADING  WTO   'USERID  STATUS  ASID LINE PGS WSS XACTTIME CPU-SECS ', X
               ROUTCDE=(11),MF=L
MSGWTO   WTO   '123456789.123456789.123456789.123456789.123456789.12345X
               6789.123456789.123',ROUTCDE=(11),MF=L
         ORG   MSGWTO+4
BUFFER   DS    CL73
         ORG
MSG2     WTO   '..XXXXXX TIME SHARING USERS',                          X
               ROUTCDE=(11),MF=L
         ORG   MSG2+6
MSG2USER DS    CL6
         ORG
         EJECT
*.....................................................................*
*        LIST FORMS OF MACROS                                         *
*.....................................................................*
         SPACE 2
EXTRACT  EXTRACT ANSWER,'S',FIELDS=(TSO),MF=L
*
         SPACE 2
DEFER    STAX  DEFER=YES,MF=L
         SPACE 2
NODEFER  STAX  DEFER=NO,MF=L
         EJECT
*.....................................................................*
*        LITERAL POOL                                                 *
*.....................................................................*
         SPACE 2
         LTORG
         EJECT
*.....................................................................*
*        OVERLAY TO PRINT LINE                                        *
*.....................................................................*
         SPACE 2
OVERLAY  DSECT
USERID   DS    CL8
MEMSTAT1 DS    CL2                MEMORY STATUS
         DS    CL1
MEMSTAT2 DS    CL4                MEMORY SWAP REASON CODE
         DS    CL1
ASID     DS    CL4                ADDRESS SPACE ID
         DS    CL1
LDASH    DS    CL1
UNIT     DS    CL3                LINE #
RDASH    DS    CL1
SIZE     DS    CL3                CURRENT SIZE
         DS    CL1
WSS      DS    CL3                WORKING SET SIZE
         DS    CL1
STEPHH   DS    CL2                FOR STEP TIME HH:MM:SS
         DS    CL1
STEPMM   DS    CL2
         DS    CL1
STEPSS   DS    CL2
         DS    CL1
CPUTIME  DS    CL8                FOR CPUTIME NNNNN.NN SECONDS
         DS    CL1
OVERLEN  EQU   *-OVERLAY
ENTRYSIZ EQU   OVERLEN+1  SIZE OF EACH ENTRY (MUST BE > L'OVERLAY)
         SPACE 2
DTSO     CSECT
#ENTRYS  EQU 1           .. MUST BE SAME...
         DS  0H
#ENTH    DC  AL2(#ENTRYS)
         EJECT
CVT      DSECT
         CVT   SYS=VMS,TSO=YES
         EJECT
         IHAASVT
         EJECT
         IHAASCB
         EJECT
CSCB     DSECT
         IEECHAIN
         EJECT
BIT0     EQU   128
BIT1     EQU   64
BIT2     EQU   32
BIT3     EQU   16
BIT4     EQU   8
BIT5     EQU   4
BIT6     EQU   2
BIT7     EQU   1
OUCB     DSECT
OUCBNAME DC    C'OUCB' -           BLOCK IDENTIFICATION
OUCBFWD  DC    A(OUCB) -           SWAP CHAIN FORWARD POINTER
OUCBBCK  DC    A(OUCB) -           SWAP CHAIN BCKWARD POINTER
OUCBTMA  DC    F'0' -              TIME OF LAST ANALYSYS      @Z40BPCH
OUCBQFL  DC    B'00100000' -       SWAPPABILITY TRANSITION FLAGS
OUCBGOO  EQU   BIT0 -              TRANSITIONING OUT OF CORE
OUCBGOI  EQU   BIT1 -              TRANSITIONING INTO CORE
OUCBGOB  EQU   BIT2 -              TRANSITIONING BETWEEN STATES
OUCBOFF  EQU   BIT4 -              REQUESTING ENTER WAIT STATE
OUCBOUT  EQU   BIT5 -              REQUESTING ENTER OUT STATE
OUCBSFL  DC    B'10010100' -       SWAPOUT CONTINUATION FLAGS
OUCBNSW  EQU   BIT0 -              NON-SWAPPABLE STATUS
OUCBCTI  EQU   BIT1 -              CTL INHIBITS QUIESCE
OUCBBIB  EQU   BIT2 -              BRING IN FOR CANCEL         @Z40BPCH
OUCBINV  EQU   BIT3 -              =1 IF OUCB IS INVALID       @Z40BPCH
OUCBPVL  EQU   BIT5 -              PRIVILEGED PROGRAM RUNNING
OUCBENQ  EQU   BIT6 -              ENQ RESIDENT STATUS
OUCBSCN  EQU   BIT7 -              SWAP CHAIN TERMINATION MARK
OUCBYFL  DC    B'00000000' -       USER TYPE FLAGS
OUCBPSTE EQU   BIT0 -              POST ERROR @ZA07127
OUCBSTT  EQU   BIT1 -              START CREATED USER
OUCBLOG  EQU   BIT2 -              LOGON CREATED USER
OUCBMNT  EQU   BIT3 -              MOUNT CREATED USER
OUCBR01  EQU   BIT4 -              RESERVED                    @ZM43085
OUCBAXS  EQU   BIT5 -              AUX SHORTAGE FORCED SWAP
OUCBDTA  EQU   BIT6 -              DATA ACCUMULATION IMPACTED
OUCBFXS  EQU   BIT7 -              FIXED STORAGE FORCED SWAP   @Z40BPCH
OUCBAFL  DC    B'00000000' -       ALGORITHM STATUS FLAGS
OUCBAPG  EQU   BIT1 -              APG ALGORITHM APPLICABLE
OUCBRMA  EQU   BIT2 -              RMA ALGORITHM APPLICABLE
OUCBCPL  EQU   BIT3 -              SIGNIFICANT CPU USER FLAG
OUCBJSR  EQU   BIT4 -              JOBSELECT RECEIVED          @Z40BPCH
OUCBR02  EQU   BIT5 -              RESERVED                   @ZM43085
OUCBNWT  EQU   BIT6 -              MSO DETECTED NONSWAPPABLE WAIT
OUCBASW  EQU   BIT7 -              AUTHORIZED FOR DONTSWAP
OUCBTFL  DC    B'00000000' -       TRANSACTION STATUS FLAGS
OUCBATR  EQU   BIT0 -              TRANSACTION IN EXISTENCE
OUCBSTR  EQU   BIT1 -              TRANSACTION START PENDING
OUCBNTR  EQU   BIT2 -              TRANSACTION STOP PENDING
OUCBRTR  EQU   BIT3 -              TRANSACTION RESUME PENDING
OUCBPCH  EQU   BIT4 -              PERF GRP PERIOD CHANGE PENDING
OUCBMAR  EQU   BIT5 -              ACTIVITY RECORDING SUBTRACT FLAG
OUCBINP  EQU   BIT6 -              INITIATOR ATTACH PENDING
OUCBINC  EQU   BIT7 -              INITIATOR ATTACH CURRENT
OUCBEFL  DC    B'00000000' -       EVENT STATUS FLAGS
OUCBLWT  EQU   BIT0 -              LONG WAIT STATUS
OUCBTRM  EQU   BIT1 -              TERMINAL WAIT STATUS
OUCBOWT  EQU   BIT2 -              OUTPUT TERMINAL WAIT
OUCBCIM  EQU   BIT3 -              COMPOSITE INPUT MESSAGE
OUCBNQF  EQU   BIT4 -              ENQHOLD EVENT PROCESSED
OUCBQSS  EQU   BIT5 -              QSCEST  EVENT PROCESSED
OUCBQSC  EQU   BIT6 -              QSCECMP EVENT PROCESSED
OUCBMWT  EQU   BIT7 -              MSO DETECTED WAIT STATUS
OUCBNQC  DC    HL1'0' -            NO. OF OUTSTANDING ENQHOLDS
OUCBUFL  DC    B'00000000' -       USER TYPE FLAGS             @ZM43072
OUCBJSFS EQU   BIT0 -              JOB SELECT DELAYED          @ZM43072
OUCBJSAS EQU   BIT1 -              JOB SELECT DELAYED          @ZM43072
OUCBNPG  DC    HL1'0' -            NEW PERFORMANCE GROUP NUMBER
OUCBRPG  DC    HL1'0' -            RESET PERFORMANCE GROUP NUMBER
OUCBNDP  DC    HL1'0' -            NEW ASCB DISPATCHING PRIORITY
OUCBRDP  DC    HL1'0' -            REAL DISPATCHING PRIORITY   @Z40BPCH
OUCBSPG  DC    HL1'0' -            SPECIFIED PERFORMANCE GROUP @Z40BPCH
OUCBR20  DC    HL1'0' -            RESERVED                    @Z40BPEB
OUCBR40  DC    HL1'0' -            RESERVED                    @Z40BPEB
OUCBPGP  DC    HL1'12' -           CURRENT WPGP OFFSET IN WPGD
OUCBWMG  DC    H'0' -              WPGD OFFSET IN WPGD TABLE
OUCBDMO  DC    H'0' -              OFFSET INTO DOMAIN TABLE    @Z40BPCH
OUCBDMN  DC    HL1'0'              DOMAIN NUMBER               @Z40BPCH
OUCBSRC  DC    HL1'0'              SWAP OUT REASON CODE        @Z40BPCH
OUCBSWC  DC    H'0' -              TRANSACTION SWAP COUNT
OUCBASCB DC    A(0) -              ASCB ADDRESS
OUCBIMCB DC    A(0) -              IMCB ADDRESS
OUCBTMW  DC    F'0' -              WLM INTERVAL START TIME
OUCBWMS  DC    F'0' -              INTERVAL SERVICE ACCUMULATOR
OUCBCPU  DC    F'0' -              INTERVAL CPU SERVICE ACCUM  @Z40BPCH
OUCBIOC  DC    F'0' -              INTERVAL I/O SERVICE ACCUM  @Z40BPCH
OUCBMSO  DC    F'0' -              INTERVAL MSO SERVICE ACCUM  @Z40BPCH
OUCBTMS  DC    F'0' -              TIME OF LAST SWAP ACTION
OUCBTMO  DC    F'0' -              TRANSACTION START TIME
OUCBPSO  DC    H'0' -              PAGES SWAPPED AT LAST SWAP-OUT
OUCBWSS  DC    H'0' -              WORKING SET SIZE AT SWAP-IN
OUCBACT  DC    A(0) -              ACTION QUEUE FORWARD POINTER
OUCBCSW  DS    0F -                COMPARE AND SWAP FIELD NAME
OUCBACN  DC    2B'00000000' -      DEFERRED ACTION FLAGS
OUCBCFL  DC    B'00000000' -       MULTIPROCESS CONDITION FLAGS
OUCBRDY  EQU   BIT0 -              USERRDY EVENT RECEIVED
OUCBRSM  EQU   BIT1 -              RSM SERVICE OUTSTANDING
OUCBCMRV DC    F'0' -              COMPOSITE RECOM VALUE       @Z40BPCH
OUCBWMR  DC    F'0' -              WLM RECOMMENDATION VALUE    @Z40BPCH
OUCBIRV  DC    H'0' -              IOM RECOMMENDATION VALUE    @Z40BPCH
OUCBCRV  DC    H'0' -              CPM RECOMMENDATION VALUE    @Z40BPCH
OUCBIOR  DC    H'0' -              I/O USAGE PROFILE
OUCBR03  DC    H'0' -              RESERVED                    @ZM43085
OUCBTMP  DC    F'0' -              PERF GRP PERIOD STARTING TIME
OUCBR04  DC    H'0' -              RESERVED                    @ZM43085
OUCBR05  DC    H'0' -              RESERVED                    @ZM43085
OUCBPSS  DC    D'0' -              CPU PAGE SECONDS            @Z40BPCH
OUCBPS1  EQU   OUCBPSS -           HIGH WORD PAGE SECONDS      @Z40BPCH
OUCBPS2  EQU   OUCBPSS+4 -         LOW  WORD PAGE SECONDS      @Z40BPCH
OUCBPST  DC    F'0' -              TIME OF LAST WORKING SET CHANGE
*                                                              @Z40BPCH
OUCBTCP  DC    F'0' -              TIME OF CPU USAGE EVALUATION
*                                                              @Z40BPCH
OUCBTIO  DC    F'0' -              TIME OF I/O USAGE EVALUATION
*                                                              @Z40BPCH
OUCBNDS  DC    H'1' -              NUM OUTSTANDING DONTSWAPS   @Z40BPEB
OUCBR90  DC    H'0' -              RESERVED                    @Z40BPEB
OUCBEND  DS    0D -                END OF OUCB
OUCBLEN  EQU   OUCBEND-OUCB -      LENGTH OF OUCB
         END
/*
//********************************************************************
//DDMN     EXEC  SYSASM
//ASM.SYSPUNCH DD DSN=&&OBJLIB(DDMN),DISP=(OLD,PASS)
//ASM.SYSIN DD *
DDMN     TITLE 'DDMN - THE DISPLAY DOMAIN COMMAND'
*.....................................................................*
*                                                                     *
*  THIS IS THE DDMN (DISPLAY DOMAIN) COMMAND FOR TSO.                 *
*                                                                     *
*  IT WILL DISPLAY THE STATUS OF THE DOMAINS FOR THE CURRENT IPS      *
*    IN THE SYSTEM.                                                   *
*                                                                     *
*  CODE IS PROBLEM-STATE.      K TRUE    15 JUL 77                    *
*                                                                     *
*  FOR VS2.03.807 (MVS)                                               *
*                                                                     *
*                                                                     *
*.....................................................................*
         SPACE
DDMN     PGM
         EJECT
STARTIT  EXTRACT MF=(E,EXTRACT)
         L     R1,ANSWER            (R1)=ADDR OF TSO FLAG FROM EXTRACT
         MVC   TSOFLAG,0(R1)        MOVE IN THE ANSWER TO OUR FLAG
         SPACE
INIT     L     R2,16               (R2)=ADDR OF CVT
         L     R2,CVTOPCTP(R2)     (R2)=ADDR OF RMCT
         L     R3,RMCTDMDT(R2)     (R3)=ADDR OF DMDT (FIRST ENTRY)
         XR    R4,R4               CLEAR REG 4
         ICM   R4,B'0011',RMCTDMNC(R2)   (R4)=NUMBER OF DOMAINS
         LTR   R4,R4               ANYBODY HOME?
         BNP   $$EOJ                NOPE-> EXIT STAGE LEFT
         USING DMDT,R3             ESTABLISH ADDR TO DOMAIN DESC. TABLE
         SPACE
         L     R5,RMCTWMST(R2)     (R5)=ADDR WMST
         MVC   MIPS,4(R5)          MOVE IN IPS NUMBER TO MSGHDR1
         LA    R1,MSGHDR1
         VMSG  MF=(E,(1))
         LA    R1,MSGHDR2          POKE OUT THE HEADER MESSAGES
         VMSG  MF=(E,(1))
         EJECT
LOOP     MVI   MSG,C' '            CLEAR OUT THE MESSAGE BUFFER
         MVC   MSG+1(L'MSG-1),MSG    WITH BLANKS
         LA    R1,DMDTNO
         LA    R2,MNO
         BAL   R6,EDIT             GO EDIT DOMAIN NUMBER INTO MSG
         CLI   MNO+2,C'-'          DOMAIN=0?
         BNE   CONTINUE             NO-> SKIP FIXUP
         MVI   MNO+2,C'0'
CONTINUE DS    0H
         SPACE
         LA    R1,DMDTLO
         LA    R2,MLO
         BAL   R6,EDIT             GO EDIT MIN MPL INTO MSG
         SPACE
         LA    R1,DMDTHI
         LA    R2,MHI
         BAL   R6,EDIT             GO EDIT MAX MPL INTO MSG
         SPACE
         LA    R1,DMDTWT
         LA    R2,MWT
         BAL   R6,EDIT             GO EDIT WEIGHTING FACTOR INTO MSG
         SPACE
         LA    R1,DMDTMPLT
         LA    R2,MMPLT
         BAL   R6,EDITH            GO EDIT CURRENT MPL TARGET INTO MSG
         SPACE
         LA    R1,DMDTRUA
         LA    R2,MRUA
         BAL   R6,EDITH            GO EDIT AVE # OF READY USRS INTO MSG
         SPACE
         LA    R1,DMDTGOOU
         LA    R2,MGOOU
         BAL   R6,EDITH            GO EDIT CURRENT # USRS GOING OUT
         SPACE
         LA    R1,DMDTCMPL
         LA    R2,MCMPL
         BAL   R6,EDITH            GO EDIT CURRENT MPL INTO MSG
         SPACE
         LA    R1,DMDTOUTU
         LA    R2,MOUTU
         BAL   R6,EDITH            GO EDIT CURNT # USRS ON OUT QUEUE
         SPACE
         LA    R1,DMDTINCU
         LA    R2,MINCU
         BAL   R6,EDITH            GO EDIT CURNT # SWAPBL IN CORE USERS
         SPACE
         LA    R1,WTOMSG
         VMSG  MF=(E,(1))
         SPACE 2
         LA    R3,DMDTLEN(R3)      BUMP POINTER
         BCT   R4,LOOP             LOOP THROUGH ALL DOMAINS
*
         B     $$EOJ
         EJECT
*.....................................................................*
*     LOCAL SUBROUTINES   EDIT,EDITH  (USES REG 5)                    *
*.....................................................................*
         SPACE
EDIT     SR    R5,R5               CLEAR WORK REGISTER
         ICM   R5,B'0001',0(R1)    GET BYTE TO CONVERT
         C     R5,=F'999'          TO LARGE?
         BNH   EDIT1
         MVC   0(3,R2),=C'***'     INDICATE TOO LARGE
         BR    R6                    AND RETURN
EDIT1    CVD   R5,CVDWORK          CONVERT TO DECIMAL
         MVC   0(3,R2),=X'202020'  MOVE IN MASK
         BCTR  R2,0                DECREMENT POSITION FOR SPACE
         ED    0(4,R2),CVDWORK+6     BEFORE NUMBER AND EDIT
         CLC   1(3,R2),=C'   '     ANYTHING THERE
         BE    EDIT2
         BR    R6
EDIT2    MVI   3(R2),C'-'          INDICATE PLACE HOLDER
         BR    R6                  RETURN
         SPACE 3
EDITH    SR    R5,R5               CLEAR WORK REGISTER
         ICM   R5,B'0011',0(R1)    GET HALFWORD TO CONVERT
         C     R5,=F'999'          TO LARGE?
         BNH   EDITH1
         MVC   0(3,R2),=C'***'     INDICATE TOO LARGE
         BR    R6                    AND RETURN
EDITH1   CVD   R5,CVDWORK          CONVERT TO DECIMAL
         MVC   0(3,R2),=X'202020'  MOVE IN MASK
         BCTR  R2,0                DECREMENT POSITION FOR SPACE
         ED    0(4,R2),CVDWORK+6     BEFORE NUMBER AND EDIT
         CLC   1(3,R2),=C'   '     ANYTHING THERE
         BE    EDITH2
         BR    R6
EDITH2   MVI   3(R2),C'-'          INDICATE PLACE HOLDER
         BR    R6                  RETURN
         EJECT
*.....................................................................*
*        VARIABLES                                                    *
*.....................................................................*
         SPACE 2
CVDWORK  DC    D'0'                WORK AREA
ANSWER   DC    F'0'                ADDRESS POINTER FOR EXTRACT
TSOFLAG  DC    X'00'               ='80' IF TSO. '00' IF NOT TSO
*
         SPACE 2
*.....................................................................*
*        LIST FORMS OF MACROS                                         *
*.....................................................................*
         SPACE 2
EXTRACT  EXTRACT ANSWER,'S',FIELDS=(TSO),MF=L
         EJECT
*.....................................................................*
*        MESSAGES AND MESSAGE MAPPING OVERLAYS                        *
*.....................................................................*
         SPACE
MSGHDR1  WTO   'IPS=XX MPL-LMT DMN ..MPL.. ....# USERS....',           X
               ROUTCDE=(11),MF=L
         ORG   MSGHDR1+8
MIPS     DS    CL2
         ORG
MSGHDR2  WTO   'DOMAIN MIN MAX WGT CUR TGT RDY  IN >OT OUT',           X
               ROUTCDE=(11),MF=L
*               456789.123456789.123456789.123456789.123456789.12345
*                XXX   XXX XXX XXX XXX XXX XXX XXX XXX XXX
WTOMSG   WTO   '                                            ',         X
               ROUTCDE=(11),MF=L
         ORG   WTOMSG+4
MSG      DS    CL43
         ORG   WTOMSG+5
MNO      DS    CL3
         ORG   WTOMSG+11
MLO      DS    CL3
         ORG   WTOMSG+15
MHI      DS    CL3
         ORG   WTOMSG+19
MWT      DS    CL3
         ORG   WTOMSG+23
MCMPL    DS    CL3
         ORG   WTOMSG+27
MMPLT    DS    CL3
         ORG   WTOMSG+31
MRUA     DS    CL3
         ORG   WTOMSG+35
MINCU    DS    CL3
         ORG   WTOMSG+39
MGOOU    DS    CL3
         ORG   WTOMSG+43
MOUTU    DS    CL3
         ORG
         EJECT
*.....................................................................*
*        LITERAL POOL                                                 *
*.....................................................................*
         SPACE
         LTORG
         EJECT
*.....................................................................*
*        MAPPING DSECT FOR DMDT (DOMAIN DESCRIPTOR TABLE)             *
*.....................................................................*
         SPACE
DMDT     DSECT
DMDTNO   DS    XL1             DOMAIN NUMBER
DMDTLO   DS    XL1             MIN  MPL LEVEL
DMDTHI   DS    XL1             MAX  MPL LEVEL
DMDTWT   DS    XL1             WEIGHTING FACTOR
DMDTMPLT DS    XL2             CURRENT MPL TARGET
DMDTRUA  DS    XL2             AVE # OF READY USERS
DMDTGOOU DS    XL2             CURRENT # USERS GOING OUT
DMDTCMPL DS    XL2             CURRENT MPL
DMDTOUTU DS    XL2             CURRENT # USERS ON OUT Q
DMDTINCU DS    XL2             CURRENT # SWAPPABLE INCORE USERS
DMDTRUC  DS    XL4             ACCUM FOR READY USER AVERAGE
DMDTEND  DS    0X              END OF DMT
DMDTLEN  EQU   *-DMDT
         SPACE 2
*
* EQUATES....
*
CVTOPCTP EQU   X'25C'          POINTER TO RMCT
RMCTDMDT EQU   X'B4'           POINTER TO DOMAIN TABLE
RMCTDMNC EQU   X'BC'           COUNT OF NUMBER OF DOMAINS
RMCTWMST EQU   X'18'           ADDRESS OF WLM SPEC TABLE
         SPACE 2
         END
/*
//********************************************************************
//DTAPES   EXEC  SYSASM
//ASM.SYSPUNCH DD DSN=&&OBJLIB(DTAPES),DISP=(OLD,PASS)
//ASM.SYSIN DD *
DTAPES TITLE 'DISPLAY TAPE DRIVE STATUS'
DTAPES CSECT
*
* THIS IS THE DTAPES COMMAND FOR TSO    OS/VS2 R3.
*
* THE COMMAND WILL DISPLAY THE STATUS AND VOLSERS OF ALL TAPE UNITS.
* THE COMMAND SYNTAX IS:
*
*   DTAPES
*
*
* ADAPTED FROM MICHIGAN MODS 'USPACE' COMMAND FROM UNITED AIR LINES
*       TSO MODS 3-75  BY KEN TRUE  MAY76
*
*  ALSO BAGGED OBTAIN CODE FROM U.C.L.A  URLISTVO COMMAND FROM THE
*       SAME MISHMODS TAPE.  KT JUNE76.
*
*  BAGGED SORT UCB ADDRESS CODE FROM MISHMODS DDASD COMMAND
*                            KT 13JULY76
*
*  INSTALLED SEARCH OF DEVNAMET FOR UNIT DESCRIPTION.. KT 26APR77
*
*  MODIFIED TO RUN AS TSO COMMAND OR OPER STARTED TASK KT  27MAY77
*
*
*
LINKREG  EQU   6                   LINK REGISTER
*
         STM   R14,R12,D12(R13)         SAVE REGISTERS
         BALR  R12,R0                   PROGRAM BASE
         USING *,R12                    PROGRAM ADDRESSABILITY
         LR    R2,R1
         GETMAIN R,LV=CORENEED          OBTAIN DYNAMIC CORE
         ST    R13,D4(R1)               CHAIN
         ST    R1,D8(R13)                SAVE
         LR    R13,R1                     AREAS
         LR    R11,R13                  CORE ADDR.
         USING CORE,R11
         LOAD  EP=DEVNAMET        LOAD DEVICE NAME TABLE
         ST    R0,DEVADDR         ...AND SAVE ITS ADDRESS
         MVC   EXTRACT1(EXTRACTL),EXTRACT MOVE IN EXTRACT LIST FORM
         LA    R1,ANSWER          LOAD ADDR OF ANSWER
         ST    R1,EXTRACT1          AND SAVE IT IN THE MACRO
         EXTRACT MF=(E,EXTRACT1)
         L     R1,ANSWER            (R1)=ADDR OF TSO FLAG FROM EXTRACT
         MVC   TSOFLAG,0(R1)        MOVE IN THE ANSWER TO OUR FLAG
         SPACE
LISTALL  MVI   SW1,X'00'                INIT PRINT HDR SWITCH
*
         L     R7,CVTPTR                CVT ADDR.
         USING CVT,R7                   CVT ADDRESSABILITY
         L     R7,CVTILK2               UCB LOOKUP TABLE ADDR.
         DROP  R7                       KILL CVT ADDRESSABILITY
         USING UCBSECT,R8               SET ADDRESSAB TO UCB.
         EJECT
         XC    LCT,LCT                  CLEAR COUNT
         MVC   LMAX(2),=H'1000'         SAY ROOM FOR 500 ENTRIES
CYCLE    LH    R8,D0(R7)                UCB ADDR.
         LTR   R8,R8                    TEST UCB STATUS
         BM    RLSE                     END OF TABLE
         BZ    INDEX                    PAD ENTRY
         CLI   UCBID,UCBSTND            IS UCB STANDARD?
         BNE   INDEX                    NO, ERROR
         CLI   UCBTBYT3,UCB3TAPE        IS IT A TAPE?
         BNE   INDEX                    NO
         SR    R4,R4
COMPLIST CH    R4,LCT                   SEE IF WEVE SEEN THIS ONE ?
         BNL   ADDLIST                  NOPE-> GO ADDIT
         CH    R8,LIST(R4)
         BE    INDEX
         LA    R4,2(R4)
         B     COMPLIST
ADDLIST  LH    R4,LCT
         CH    R4,LMAX
         BNL   FULL
         STH   R8,LIST(R4)
         LA    R4,2(R4)
         STH   R4,LCT
FULL     EQU   *
DISPCHK  TM    SW1,HEADING              HAVE WE WRITTEN THE HEADER?
         BNO   WRTFMT                   ->NO..GO WRITE IT
         SPACE
DISPLAY  MVC   BUFFER(WTOMSGL),WTOMSG   REINIT WTO MESSAGE
         MVC   MSGUNIT,UCBNAME          COPY UNIT ADDRESS
         CLI   UCBVOLI,X'00'            ANY VOLSER IN UCBVOLI ?
         BE    NOVOLSER                 NO-> SKIP MOVE OF VOLSER
         MVC   MSGVOL,UCBVOLI           COPY VOLUME SERIAL NUMBER
*
NOVOLSER TM    UCBSTAT,UCBONLI          IS DRIVE ONLINE?
         BNO   NOTON                    ->NO..MARK MSG AS OFFLINE
         MVC   MSGSTAT,ONLINE           ->YES..SAY SO.
         B     CHKVARY
NOTON    MVC   MSGSTAT,OFFLINE
*
CHKVARY  TM    UCBSTAT,UCBCHGS          IS IT CHANGING ON/OFF?
         BNO   CHKDEN                   ->NO GO CHECK DENSITY..
         MVC   MSGVARY,VARY             ->YES..SAY SO.
*
CHKDEN   TM    UCBTBYT2,UCBDUDN1        IS IT 800/1600?
         BNO   CHKDEN1                  ->NO ..KEEP LOOKING
         MVC   MSGDENS,DDEN1
         B     CHKMODL
CHKDEN1  TM    UCBTBYT2,UCBDUDN2        IS IT 1600/6250?
         BNO   CHKDEN2                  -> NO
         MVC   MSGDENS,DDEN2
         B     CHKMODL
CHKDEN2  TM    UCBTBYT1,UCBD1600         HOW ABOUT JUST 1600?
         BNO   CHKDEN3                   -> NO..ONCE MORE WITH FEELING
         MVC   MSGDENS,DEN1600
         B     CHKMODL
CHKDEN3  TM    UCBTBYT1,UCBD6250         LAST CHANCE..IS IT JUST 6250?
         BNO   CHKMODL                   -> NO..DONT KNOW DENSITY..
         MVC   MSGDENS,DEN6250
         SPACE
***
***   USE SYSTEM DEVICE NAME TABLE
***
***
CHKMODL  L     R1,DEVADDR         ADDRESS OF DEVICE NAME TABLE
         L     R10,0(R1)          NUMBER OF ENTRIES
         LA    R1,4(R1)           ADDRESS OF FIRST ENTRY
DEVLP    CLC   UCBTYP(4),8(R1)    IS THIS THE DEVICE TYPE
         BE    DEVFND             YES... BR TO SAVE DEVICE TYPE
         LA    R1,12(R1)          NO... INCR TO NEXT TABLE ENTRY
         BCT   R10,DEVLP          LOOP UNTIL END OF TABLE
         MVC   MSGMODL,=C'????'   SAY WE DONT KNOW DEVICE TYPE
         B     GETWHO
*
DEVFND   MVC   MSGMODL,0(R1)           MOVE UNIT TYPE TO PRINT LINE
*
GETWHO   XR    R10,R10
         L     R10,UCBEXTPT             GET EXTENTION TO UCB
         LTR   R10,R10                  ANYTHING THERE?
         BZ    PUTIT                    NO->SPLIT
         LA    R10,14(R10)              GET UCBASID ADDRESS
         LH    R10,0(R10)               AND GET THE ASID
         N     R10,=X'0000FFFF'          PLUS MASK OFF RESIDUE..
         LTR   R10,R10                  ANY BODY THERE?
         BZ    PUTIT                    NO->SIGH,ALL THAT FOR NAUGHT..
*
GOTASID  L     R4,CVTPTR                GET ADDR OF CVT
         USING CVT,R4                    AND ADDRESS YOURSELF TO IT..
         L     R4,CVTASVT               GET ADDR OF ASVT..
         DROP  R4
         USING ASVT,R4                  AND ESTAB ADDRESSABILITY
         SLL   R10,2                    ADJUST ASID..TO USE AS INDEX
         L     R10,ASVTFRST(R10)        R10=ADDR(ASCB) FOR ASID
         DROP  R4
         USING ASCB,R10                 GOTCHA
         L     R4,ASCBJBNI              IS IT A JOB
         LTR   R4,R4
         BZ    ITSTSO
         MVC   MSGUSER,0(R4)            MOVIN JOBNAME
         B     PUTIT
ITSTSO   L     R4,ASCBJBNS              ITS START/MOUNT/LOGON
         LTR   R4,R4
         BZ    PUTIT
         MVC   MSGUSER,0(R4)            MOVEIN USERID
PUTIT    DS    0H
         LA    R1,BUFFER                MESSAGE ADDR.
         VMSG  MF=(E,(1))               ISSUE MESSAGE
         OI    SW1,FOUND                SAY WE FOUND A VOL...
         SPACE
INDEX    LA    R7,D2(R7)                NEXT ENTRY ADDR.
         B     CYCLE                    CONTINUE
         EJECT
WRTFMT   LA    R1,FMTMSG1               WRITE HEADERS....
         VMSG  MF=(E,(1))
         OI    SW1,HEADING              SAY WE WROTE THE HEADERS
         B     DISPLAY
         SPACE 2
RLSE     LR    R1,R11                   CORE ADDR.
         L     R13,D4(R13)
THEEND   FREEMAIN R,LV=CORENEED,A=(1)   FREE DYNAMIC CORE
         XC    D16(D4,R13),D16(R13)
         LM    R14,R12,D12(R13)
         XR    R15,R15                  SET RC=0
         BR    R14                      RETURN
         EJECT
*.....................................................................*
*        LIST FORMS OF MACROS                                         *
*.....................................................................*
         SPACE 2
EXTRACT  EXTRACT *-*,'S',FIELDS=(TSO),MF=L
EXTRACTL EQU   *-EXTRACT
         SPACE 2
FMTMSG1  WTO   'UNIT VOLUME STATUS  USER          DENSITY   MODEL      X
                         ',ROUTCDE=(11),MF=L
         SPACE 2
WTOMSG   WTO   '                                                       X
                         ',ROUTCDE=(11),MF=L
WTOMSGL  EQU   *-WTOMSG
         EJECT
*.....................................................................*
*        PROGRAM CONSTANTS/LITERALS                                   *
*.....................................................................*
         SPACE 2
ONLINE   DC    CL7'ONLINE'
OFFLINE  DC    CL7'OFFLINE'
VARY     DC    CL4'VARY'
DDEN1    DC    CL9'800/1600'
DDEN2    DC    CL9'1600/6250'
DEN800   DC    CL9'800'
DEN1600  DC    CL9'1600'
DEN6250  DC    CL9'6250'
*
         EJECT
*
* PROGRAM  E Q U A T E S
*
R0       EQU   0              MACROS-WORK
R1       EQU   1              MACROS-WORK
R2       EQU   2
R3       EQU   3
R4       EQU   4              WORK/ASVT
R5       EQU   5
R6       EQU   6              LINKREG FOR PUTGET
R7       EQU   7              UCB LOOKUP TABLE
R8       EQU   8              UCB ADDRESSABILITY
R9       EQU   9
R10      EQU   10             WORK/ASCB
R11      EQU   11             CORE DSECT (WORK AREA) ADDRESSABILITY
R12      EQU   12             PROGRAM BASE REGISTER
R13      EQU   13             SAVE AREA POINTER
R14      EQU   14             MACROS - WORK  RETURN ADDRESS
R15      EQU   15             MACROS - WORK/ RETURN CODE
*
D0       EQU   0
D1       EQU   1
D2       EQU   2
D4       EQU   4
D8       EQU   8
D12      EQU   12
D16      EQU   16
*
HEADING  EQU   X'01'
FOUND    EQU   X'02'
NOTFOUND EQU   X'FD'
SKIP     EQU   X'80'
NOSKIP   EQU   X'7F'
CHARZERO EQU   C'0'
         EJECT
CVT      DSECT
         CVT       SYS=VMS,TSO=YES
         EJECT
UCBSECT  DSECT
         IEFUCBOB
         EJECT
         IHAASCB
         EJECT
         IHAASVT
         EJECT
*
* DYNAMIC WORK AREA FOR PROGRAM
*
CORE     DSECT
         DS    18F
DEVADDR  DS    F
BUFFER   DS    CL80              TO RECEIVE THE WTO LIST FORM
         ORG   BUFFER+4
         DS    CL1
MSGUNIT  DS    CL3
         DS    CL1
MSGVOL   DS    CL6
         DS    CL1
MSGSTAT  DS    CL7
         DS    CL1
MSGUSER  DS    CL8
         DS    CL1
MSGVARY  DS    CL4
         DS    CL1
MSGDENS  DS    CL9
         DS    CL1
MSGMODL  DS    CL8
*
         ORG
*
SW1      DS    1C
TSOFLAG  DS    X                   ='80' IF TSO. '00' IF NOT TSO
ANSWER   DS    F                   ADDRESS POINTER FOR EXTRACT
DBLW     DS    4D
         ORG   DBLW
EXTRACT1 DS    4D
         ORG
LCT      DS    H                        TO REMEMBER COUNT
LMAX     DS    H                        TO REMEMBER UCB MAX ADDR
LIST     DS    500H                     TO REMEMBER EACH UCB ADDR
CORENEED EQU   *-CORE
         END
/*
//********************************************************************
//DDASD    EXEC  SYSASM
//ASM.SYSPUNCH DD DSN=&&OBJLIB(DDASD),DISP=(OLD,PASS)
//ASM.SYSIN DD *
DDASD    TITLE 'DDASD COMMAND - LIST UNIT STATUS         VERSION 1.0'
*
*  THIS IS THE DDASD   COMMAND
*
*   IT DISPLAYS UNIT STATUS FOR ONLINE DASD VOLUMES
*
*
*  K TRUE   13 JULY 78
*
*
         MACRO
&LABEL   CHK   &FIELD,&MASK,&LIT,&WORK=R10,&INIT=NO,&PTR=R4,&EXIT=
         LCLA  &LEN
         LCLC  &IDX,&EXADR
&IDX     SETC  '&SYSNDX'
&LEN     SETA  K'&LIT-2
&EXADR   SETC  '&EXIT'
         AIF   (K'&EXIT GT 0).GOTLBL
&EXADR   SETC  'SKP&IDX'
.GOTLBL  ANOP
         SPACE
&LABEL   TM    &FIELD,&MASK     CHECK THE FIELD FOR USE
         BNO   SKP&IDX          BIT(S) DONT MATCH..SKIP IT
         AIF   ('&INIT' NE 'YES').NOINIT
         SLR   &WORK,&WORK      CLEAR REG FOR EXEC INSTR
.NOINIT  ANOP
         AIF   (&LEN EQ 1).SHORT
         MVC   0(&LEN,&PTR),=C&LIT     MOVE TEXT INTO STRING
         LA    &PTR,0(&WORK,&PTR)  BUMP LENGTH TO AFTER STRING
         B     &EXADR           EXIT TO DESIRED LOCATION
         AGO   .MACFIN
.SHORT   ANOP
         MVI   0(&PTR),C&LIT    MOVE IN THE CHARACTER
         LA    &PTR,1(&PTR)     BUMP COUNT
         B     &EXADR              AND EXIT
.MACFIN  ANOP
SKP&IDX  DS    0H
         SPACE 2
         MEND
         EJECT
LINKREG  EQU   9
DDASD    CSECT
         STM   R14,R12,D12(R13)         SAVE REGISTERS
         LR    R12,R15                  PROGRAM BASE
         USING DDASD,R12                PROGRAM ADDRESSABILITY
         LR    R2,R1                    SAVE PARM POINTER
         GETMAIN R,LV=CORENEED          OBTAIN DYNAMIC CORE
         ST    R13,D4(R1)               CHAIN
         ST    R1,D8(R13)                SAVE
         LR    R13,R1                     AREAS
         LR    R11,R13                  CORE ADDR.
         USING CORE,R11
         LOAD  EP=DEVNAMET        LOAD DEVICE NAME TABLE
         ST    R0,DEVADDR         ...AND SAVE ITS ADDRESS
         MVC   EXTRACT1(EXTRACTL),EXTRACT MOVE IN EXTRACT LIST FORM
         LA    R1,ANSWER          LOAD ADDR OF ANSWER
         ST    R1,EXTRACT1          AND SAVE IT IN THE MACRO
         EXTRACT MF=(E,EXTRACT1)
         L     R1,ANSWER            (R1)=ADDR OF TSO FLAG FROM EXTRACT
         MVC   TSOFLAG,0(R1)        MOVE IN THE ANSWER TO OUR FLAG
         SPACE
         MVI   SW1,X'00'                INIT PRINT HDR SWITCH
         LR    R1,R2                    CPPL OR PARM PTR(BATCH)
         LA    R3,PPLAREA               PPL ADDR.
         USING PPL,R3                   PPL ADDRESSABILITY
TSTSETUP TM    TSOFLAG,X'80'        IS IT TSO?
         BO    SETUPTSO             YES-> SETUP FOR PARSE
*                                   NO -> INIT PPL WITH DMY TSO CB
         EJECT
SETUPSTC XC    DMYUPT,DMYUPT        CLEAR OUT OUR UPT
         LA    R1,DMYUPT            LOAD ADDR OF OUR UPT
         ST    R1,PPLUPT            SAVE ADDRESS
         USING UPT,R1
         MVI   UPTSWS,UPTNPRM+UPTMID+UPTWTP
         DROP  R1
         XC    DMYECT,DMYECT        CLEAR OUT OUR ECT
         LA    R1,DMYECT            LOAD ADDR OF OUR ECT
         ST    R1,PPLECT            SAVE ADDRESS
         USING ECT,R1
         MVC   ECTPCMD,=CL8'DDASDS'
         MVC   ECTSCMD,=CL8' '
         DROP  R1
         MVI   DMYCMD,C' '
         MVC   DMYCMD+1(L'DMYCMD-1),DMYCMD
         XC    DMYCMD(4),DMYCMD
         LA    R1,DMYCMD            LOAD ADDR OF OUT CMD BUFF
         ST    R1,PPLCBUF           AND SAVE ADDR IN PPL
         L     R2,0(R2)             (R2) = PTR TO PARM FIELD
         LH    R1,0(R2)             (R1) = LENGTH OF PARM FIELD
         LTR   R1,R1                ANYONE HOME?
         BZ    GENPPL                NO-> FINISH UP
         BCTR  R1,0                 COMPUTE MACHINE LENGTH
         EX    R1,MOVECMD           MOVE COMMAND IN
         AH    R1,=H'4'             SAY CMD IS LONGER BY 3
         STH   R1,DMYCMD            SAVE LENGTH OF CMD FOR PARSE
         B     GENPPL
MOVECMD  MVC   DMYCMD+4(*-*),2(R2)  EXECUTED CMD -
SETUPTSO DS    0H
         USING CPPL,R1                  CPPL ADDRESS
         MVC   PPLUPT,CPPLUPT           COPY UPT ADDR.
         MVC   PPLECT,CPPLECT           COPY ECT ADDR.
         MVC   PPLCBUF,CPPLCBUF         COPY COMMAND BUFFER ADDR.
         DROP  R1
         EJECT
GENPPL   LA    R0,ECB                   ECB ADDR.
         ST    R0,PPLECB                COPY ECB ADDR.
         MVC   PPLPCL,PCL               COPY PCL ADDR.
         LA    R0,ANS                   ANSWER AREA ADDR.
         ST    R0,PPLANS                COPY ADDR.
         XC    PPLUWA,PPLUWA            ZERO UWA POINTER
         XC    ECB(D4),ECB              CLEAR ECB
         LA    R1,PPL                   PPL ADDR.
         DROP  R3
DOPARSE  CALLTSSR  EP=IKJPARS,MF=(E,(R1))     INVOKE PARSE (FAST!)
         SPACE 2
         LTR   R15,R15                  Q/PARSE FAILURE
         BNZ   PARSFAIL                 YES
         L     R6,ANS                   DSECT ADDR.
         USING IKJPARMD,R6              DSECT ADDRESSABILITY
         LA    R14,VOLUMES              ADDR OF VOLUME LIST
         LA    R7,MSGSTAT               LOAD ADDRESS OF MESSAGE
         ST    R7,MSGADDR               SAVE IT FOR LATER COMPARE
         EJECT
VOLUME   MVI   VOL,BLANK                CLEAR VOL
         MVC   VOL+1(L'VOL-1),VOL       PROPAGATE
         L     R7,D0(R14)               VOLUME SER ADDR.
         LH    R8,D4(R14)               VOLUME SER LENGTH
         ST    R14,PDEPTR               SAVE CURRENT PDE ADDRESS
         BCTR  R8,R0                    COMPUTE MACHINE LENGTH
         LR    R5,R8
         LA    R10,VOL                  VOLUME ADDR.
         EX    R8,MOVE                  MOVE VOLUME SER
         NI    SW1,NOTFOUND             SET NOTFOUND SW FOR GRIPE MSG
         CLC   VOL,ALLVOL               SEE IF ALL OPTION DESIRED
         BNE   STARTSCN                 NO -> GO DO THE SCAN
         OI    SW1,DOALLVOL             YES-> SET SWITCH TO DO ALL
         SPACE 2
STARTSCN L     R7,CVTPTR                CVT ADDR.
         USING CVT,R7                   CVT ADDRESSABILITY
         L     R7,CVTILK2               UCB LOOKUP TABLE ADDR.
         DROP  R7                       KILL CVT ADDRESSABILITY
         USING UCBSECT,R8               SET ADDRESSAB TO UCB.
         EJECT
         XC    LCT,LCT                  CLEAR COUNT
         MVC   LMAX(2),=H'1000'         SAY ROOM FOR 500 ENTRIES
CYCLE    LH    R8,D0(R7)                UCB ADDR.
         LTR   R8,R8                    TEST UCB STATUS
         BM    NOTMNTD                  END OF TABLE
         BZ    INDEX                    PAD ENTRY
         CLI   UCBID,UCBSTND            IS UCB STANDARD?
         BNE   INDEX                    NO, ERROR
         CLI   UCBTBYT3,UCB3DACC        IS IT DIRECT ACCESS?
         BNE   INDEX                    NO
         TM    UCBSTAT,UCBONLI          IS DEVICE ON-LINE NOW?
         BNO   INDEX                    NO
         SPACE
         BAL   LINKREG,CKUNIQUE         GO SEE IF WE HAVE SEEN THIS UCB
         B     INDEX                     RETURN HERE IF WEVE SEEN IT
         SPACE
         TM    SW1,DOALLVOL             Q/ALL VOLUMES TO BE DISPLAYED
         BO    DOGENMSG                 YES
         EX    R5,COMP                    CHK FOR OUR VOLUME
         BNE   INDEX                    NO
         SPACE
DOGENMSG TM    SW1,HEADING              HAVE WE WRITTEN THE HEADER?
         BZ    WRTFMT                   ->NO-GO WRITE HEADINGS
CALLIT   BAL   LINKREG,GENMSG           GO GENERATE UNIT STATUS MESSAGE
         SPACE
JUSTMSG  LA    R1,MSG                   MESSAGE ADDR.
         VMSG  MF=(E,(1))               ISSUE MESSAGE
         OI    SW1,FOUND                SAY WE FOUND A VOL...
         SPACE
INDEX    LA    R7,D2(R7)                NEXT ENTRY ADDR.
         B     CYCLE                    CONTINUE
         SPACE
NOTMNTD  TM    SW1,DOALLVOL             Q/DISPLAY OF ALL VOLUMES WANTED
         BO    RLSE                     YES, END OF LIST..EXIT
         TM    SW1,FOUND                DID WE FIND ONE?
         BO    NEXTPDE                  YEP->NO GRIPE..GET NEXT PDE
         MVC   MSG(WTOMSGL),WTOMSG      INIT MESSAGE AREA
         MVC   MSGNVOL,VMSG             MOVE MESSAGE
         MVC   MSGIVOL,VOL              INSERT VOLUME SERIAL NUMBER
         LA    R1,MSG                   MESSAGE ADDR.
         VMSG  MF=(E,(1))               ISSUE NOT FOUND MESSAGE
         SPACE
NEXTPDE  L     R14,PDEPTR               GET PTR TO CURRENT PDE
         L     R14,D8(R14)              NEXT PDE ADDR.
         LA    R14,D0(R14)              CLEAR BYTE
         LTR   R14,R14                  Q/ANY PDE
         BNZ   VOLUME                    YES-> GO TRY AGAIN ON NEXT VOL
         EJECT
*.....................................................................*
*     FINIS..FREE UP CORE AND CLEANUP                                 *
*.....................................................................*
RLSE     IKJRLSA ANS
         LR    R1,R11                   CORE ADDR.
         L     R13,D4(R13)
         SPACE 2
THEEND   FREEMAIN R,LV=CORENEED,A=(1)   FREE DYNAMIC CORE
         XC    D16(D4,R13),D16(R13)
         LM    R14,R12,D12(R13)
         XR    R15,R15                  SET RC=0
         BR    R14                      RETURN
         SPACE 2
PARSFAIL LA    R1,PARSMSG               ISSUE ERROR MESSAGE
         VMSG  MF=(E,(1))               ISSUE NOT FOUND MESSAGE
         B     THEEND                   GO QUIT
         EJECT
*.....................................................................*
*     WRITE HEADINGS                                                  *
*.....................................................................*
WRTFMT   LA    R1,FMTMSG1               WRITE HEADERS....
         VMSG  MF=(E,(1))               ISSUE MESSAGE
         LA    R1,FMTMSG2
         VMSG  MF=(E,(1))               ISSUE MESSAGE
         OI    SW1,HEADING              SAY WE WROTE THE HEADERS
         B     CALLIT
         SPACE 3
*.....................................................................*
*    LOCAL SUBROUTINE CKUNIQUE   - TO CHECK IF WEVE SEEN THIS UCB     *
*                                  BEFORE                             *
*                                                                     *
*    ENTER WITH R8 = ADDR UCB                                         *
*    EXIT: TO (LINKREG)  IF ALREADY ON LIST                           *
*          TO 4(LINKREG) IF NOT PREVIOUSLY FOUND                      *
*.....................................................................*
CKUNIQUE SR    R10,R10
COMPLIST CH    R10,LCT                  TOP OF LIST AND STILL NOT SEEN?
         BNL   ADDLIST                  YES-> SO GO ADD IT TO LIST
         CH    R8,LIST(R10)             CHK UCB
         BE    0(LINKREG)                SEEN BEFORE--EXIT
         LA    R10,2(R10)               BUMP LIST PTR
         B     COMPLIST                 AND GO CHECK AGAIN
ADDLIST  LH    R10,LCT                  LOAD CURRENT TOP OF LIST
         CH    R10,LMAX                 COMPARE TO MAX # ENTRIES IN LST
         BNL   4(LINKREG)               NO ROOM-> SAY WE HAVENT SEEN IT
         STH   R8,LIST(R10)              GOT ROOM->SAVE UCB ADDR
         LA    R10,2(R10)                BUMP TOP OF LIST
         STH   R10,LCT                   AND SAVE IT
         B     4(LINKREG)                GOOD RETURN
         EJECT
*.....................................................................*
*        LOCAL SUBROUTINE TO DECODE UCB INFO AND STATUS               *
*                                                                     *
*  BAL  LINKREG,GENMSG                                                *
*                                                                     *
*       R8=ADDR OF UCB                                                *
*                                                                     *
*  OUTPUT ARE FIELDS IN MSG                                           *
*                                                                     *
*.....................................................................*
         SPACE
GENMSG   MVC   MSG(WTOMSGL),WTOMSG      CLEAR OUT MESSAGE
         MVC   MSGUNIT,UCBNAME          COPY UNIT ADDRESS
         MVC   MSGVOL,UCBVOLI           COPY VOLUME SERIAL NUMBER
*
         TM    UCBSTAB,UCBBPRV          IS VOL PRIVATE?
         BNO   DISP11
         MVC   MSGMTYP,VOLPRIV
         B     DSTAT2
DISP11   TM    UCBSTAB,UCBBPUB          IS VOL PUBLIC?
         BNO   DISP12
         MVC   MSGMTYP,VOLPUB
         B     DSTAT2
DISP12   TM    UCBSTAB,UCBBSTR          IS VOL STORAGE?
         BNO   DSTAT2
         MVC   MSGMTYP,VOLSTG
         SPACE
DSTAT2   TM    UCBSTAT,UCBRESV          IS VOLUME RESERVED ?
         BNO   DISP21
         MVC   MSGVSTAT,VOLRSVD
         B     DUSECNT
DISP21   TM    UCBSTAT,UCBPRES          IS VOL PERM RESIDENT?
         BNO   DISP22
         MVC   MSGVSTAT,VOLRESD
         B     DUSECNT
DISP22   MVC   MSGVSTAT,VOLREMOV        SET VOLUME AS REMOVABLE
*
DUSECNT  XR    R10,R10                  CLEAR A REG
         IC    R10,UCBUSER              GET USE COUNT
         CVD   R10,DBLW                 CONVERT TO PRINT
         MVC   MSGUCNT,EDMASK
         ED    MSGUCNT,DBLW+6           PLACE IT ON THE LINE
         SPACE
DOPNCNT  XR    R10,R10                  CLEAR A REG
         IC    R10,UCBDMCT              GET USE COUNT
         N     R10,X7F                  MASK OFF MOUNT STATUS BIT
         CVD   R10,DBLW                 CONVERT TO PRINT
         MVC   MSGOCNT,EDMASK
         ED    MSGOCNT,DBLW+6           PLACE IT ON THE LINE
         EJECT
*
* DECODE UNIT STATUS
*
         LA    R4,MSGSTAT               LOAD ADDR TO START DECODE
         MVI   MSGSTAT,C'O'             SET IT TO ONLINE
         CHK   UCBSTAT,UCBSYSR,'S',EXIT=CHKSTAT  IS IT SYSRES?
         CHK   UCBSTAT,UCBALOC,'A'               IS IT ALLOC?
         C     R4,MSGADDR               DID WE MOVE THE POINTER?
         BNE   CHKSTAT
         LA    R4,1(R4)                 NO..BUMP POINTER
CHKSTAT  CHK   UCBSTAT,UCBCHGS,',VARY'      VARY ISSUED?
         CHK   UCBSTAT,UCBUNLD,',UNLD'      UNLOAD ISSUED?
         EJECT
         CHK   UCBFLA,UCBBSY,',BSY'         DEVICE BUSY
         CHK   UCBFLA,UCBNRY,',NRDY'        DEVICE NOT READY
         CHK   UCBFLA,UCBCUB,',CUBSY'       CNTL UNIT BUSY
         CHK   UCBFL4,UCBWDAV,',MTP'        DAVV MOUNT PENDING
         EJECT
         CHK   UCBDMCT,UCBMOUNT,',MTPD'     MOUNT PENDING
***
***   USE SYSTEM DEVICE NAME TABLE
***
***
DUTYPE   L     R1,DEVADDR         ADDRESS OF DEVICE NAME TABLE
         L     R10,0(R1)          NUMBER OF ENTRIES
         LA    R1,4(R1)           ADDRESS OF FIRST ENTRY
DEVLP    CLC   UCBTYP,8(R1)       IS THIS THE DEVICE TYPE
         BE    DEVFND             YES... BR TO SAVE DEVICE TYPE
         LA    R1,12(R1)          NO... INCR TO NEXT TABLE ENTRY
         BCT   R10,DEVLP          LOOP UNTIL END OF TABLE
         MVC   MSGUTYPE,=C'????'  SAY WE DONT KNOW DEVICE TYPE
         BR    LINKREG
*
DEVFND   MVC   MSGUTYPE,0(R1)           MOVE UNIT TYPE TO PRINT LINE
*
         BR    LINKREG
         EJECT
*.....................................................................*
*        EXECUTED INSTRUCTIONS                                        *
*.....................................................................*
         SPACE 2
MOVE     MVC   D0(D0,R10),D0(R7)        EXECUTED INSTRUCTION
COMP     CLC   VOL(0),UCBVOLI           EXECUTED INSTRUCTION
         EJECT
*.....................................................................*
*        LIST FORMS OF MACROS                                         *
*.....................................................................*
         SPACE
EXTRACT  EXTRACT *-*,'S',FIELDS=(TSO),MF=L
EXTRACTL EQU   *-EXTRACT
         SPACE
WTOMSG   WTO   '                                                       X
                                ',ROUTCDE=(11),MF=L LEN=72
WTOMSGL  EQU   *-WTOMSG
PARSMSG  WTO   'DDASDS - PARSE FAILED',ROUTCDE=(11),MF=L
FMTMSG1  WTO   '                   VOLUME    USE OPN UNIT              X
                     ',ROUTCDE=(11),MF=L
FMTMSG2  WTO   'VOLUME UNIT TYPE   STATE     CNT CNT STATUS            X
                     ',ROUTCDE=(11),MF=L
         EJECT
*.....................................................................*
*        CONSTANTS                                                    *
*.....................................................................*
         SPACE
PCL      DC    A(PARSECL)
TYP3330V DC    XL4'30582009'
X7F      DC    XL4'0000007F'
EDMASK   DC    XL4'40202120'
ALLVOL   DC    CL6'ALL'
VMSG     DC    CL31'NO VOLUME FOUND TO MATCH       '
VOLPRIV  DC    CL4'PVT/'
VOLPUB   DC    CL4'PUB/'
VOLSTG   DC    CL4'STG/'
*
VOLRSVD  DC    CL5'RSVED'
VOLRESD  DC    CL5'RSDNT'
VOLREMOV DC    CL5'REMOV'
         SPACE
         LTORG
         EJECT
*
* PROGRAM  E Q U A T E S
*
R0       EQU   0             WORK-MACROS
R1       EQU   1             WORK-MACROS
R2       EQU   2             WORK
R3       EQU   3             WORK
R4       EQU   4             WORK
R5       EQU   5             LENGTH OF CURRENT VOLSER
R6       EQU   6             IKJPARMD DSECT POINTER
R7       EQU   7             UCB LIST INDEX POINTER
R8       EQU   8             ADDRESS OF CURRENT UCB
R9       EQU   9             LINKREG FOR SUBROUTINE USAGE
R10      EQU   10            WORK REGISTER
R11      EQU   11            CORE DSECT ADDRESSABILITY
R12      EQU   12            PROGRAM BASE REGISTER
R13      EQU   13            SAVE AREA POINTER
R14      EQU   14            WORK - MACROS
R15      EQU   15            WORK - MACROS
*
D0       EQU   0
D1       EQU   1
D2       EQU   2
D4       EQU   4
D8       EQU   8
D12      EQU   12
D16      EQU   16
*
BLANK    EQU   C' '
HEADING  EQU   X'01'
FOUND    EQU   X'02'
NOTFOUND EQU   255-FOUND
SKIP     EQU   X'80'
NOSKIP   EQU   255-SKIP
DOALLVOL EQU   X'04'
CHARZERO EQU   C'0'
         EJECT
         PRINT NOGEN
PARSECL  IKJPARM
VOLUMES  IKJIDENT 'VOL',LIST,                                          X
               MAXLNTH=6,FIRST=ALPHANUM,OTHER=ALPHANUM,                X
               HELP=('VOL SERS FIND UCB STATUS OR ''ALL'' ',           X
               'VOL MAY BE COMPLETE OR GENERIC VOLUME SERIAL #'),      X
               DEFAULT='ALL   '
         IKJENDP
         PRINT GEN
         EJECT
         IKJCPPL
         SPACE 2
         IKJPPL
PPLL     EQU   *-PPL
         EJECT
         IKJECT
         EJECT
         IKJUPT
         EJECT
CVT      DSECT
         CVT       SYS=VMS,TSO=YES
         EJECT
UCBSECT  DSECT
         IEFUCBOB
         EJECT
*
* DYNAMIC WORK AREA FOR PROGRAM
*
CORE     DSECT
         DS    18F
MSGADDR  DS    F
DEVADDR  DS    F
ANS      DS    F
ECB      DS    F
PDEPTR   DS    F
PPLAREA  DS    (PPLL/4)F
MSG      DS    CL84           WTO MESSAGE AREA + PADDING
MSGL     EQU   *-MSG
MSGEND   EQU   *
*
         ORG   MSG+4
MSGVOL   DS    CL6                               2 MSGVOL CHAR(6)
         DS    CL1                               2 *      CHAR(1)
MSGUNIT  DS    CL3                               2 MSGUNIT CHAR(3)
         DS    CL2
MSGUTYPE DS    CL6
         DS    CL1
MSGMTYP  DS    CL4
MSGVSTAT DS    CL5
MSGUCNT  DS    CL4
MSGOCNT  DS    CL4
         DS    CL1
MSGSTAT  DS    CL30
*
         ORG   MSG+4                    NEW OVERLAY FOR ERROR MESSAGE
MSGNVOL  DS    CL31
         ORG   MSG+29                     FOR NO VOLUME FOUND
MSGIVOL  DS    CL6
*
         ORG   MSGEND
*
VOL      DS    CL6                      TO SAVE THE TARGET FOR COMPARES
SW1      DS    1C
TSOFLAG  DS    X                   ='80' IF TSO. '00' IF NOT TSO
ANSWER   DS    F                   ADDRESS POINTER FOR EXTRACT
DBLW     DS    4D
         ORG   DBLW
EXTRACT1 DS    4D
         DS    0D
DMYECT   DS    XL60                     DUMMY ECT FOR BATCH
         DS    0D
DMYUPT   DS    CL24                     DUMMY UPT FOR BATCH
         DS    0D
DMYCMD   DS    CL124                    DUMMY COMMAND FOR BATCH
         SPACE 2
LCT      DS    H                        TO REMEMBER COUNT
LMAX     DS    H                        TO REMEMBER UCB MAX ADDR
LIST     DS    500H                     TO REMEMBER EACH UCB ADDR
CORENEED EQU   *-CORE
*
         END
/*
//********************************************************************
//SHOWASM  EXEC  SYSASM
//ASM.SYSPUNCH DD DSN=&&OBJLIB(SHOWASM),DISP=(OLD,PASS)
//ASM.SYSIN DD *
SHOWASM  TITLE 'SHOWASM - DISPLAY ASM PAGE/SWAP DSN STATUS     '
*.....................................................................*
*                                                                     *
*   THIS IS THE SHOWASM COMMAND FOR TSO/STC USAGE                     *
*                                                                     *
*   THIS COMMAND WILL DISPLAY THE CURRENT AUX STORAGE MGR SLOT STATUS *
*     AND STATUS FOR ALL CURRENT PAGE AND SWAP DATASETS ON THE SYSTEM *
*                                                                     *
*                                                                     *
*  REQUIRES MACROS FROM SYS1.AMODGEN (CVT)                            *
*  RUNS UNDER TSO (FOR OPER PRIVLEDGE USER) OR AS STC.                *
*.....................................................................*
         SPACE 3
***********************************************************************
*        ACCUMULATE HALF
***********************************************************************
         MACRO
&L       ACH   &F
&L       LA    R1,1                INSERT 1
         AH    R1,&F               ADD ACCUMULATOR
         STH   R1,&F               SAVE ACCUMULATOR
         MEND
         SPACE 3
***********************************************************************
*        EDITING A 3 BYTES FIELD (VIA CEH)
***********************************************************************
         MACRO
&L       CEH3  &TO,&FROM
&L       CEH   TRAN,&FROM          USE CONVERT.                  V1M0G
         TM    TRAN,X'0F'          OVERFLOW ?
         BZ    *+14                NO
         MVC   &TO,XAST9           YES, MOVE OFLOW ID
         B     *+10                BRANCH OVER
         MVC   &TO,TRAN+1          INSERT TO TAREGET
         MEND
         SPACE 3
***********************************************************************
*        CONVERT AND EDIT HALF
***********************************************************************
         MACRO
&L       CEH    &TO,&FROM
         LH    R0,&FROM            PICK UP VALUE
         LA    R1,&TO              PICK UP TARGET ADDRESS
         BAL   LINKREG,CVTERZZ     GO CONVERT VALUE
         MEND
         SPACE 2                                                 V1M0C
         GBLC  &HEADING
&HEADING SETC  'SHOWASM COMMAND - DISPLAY AUX STORAGE MANAGER - V1M2 '
         TITLE '&HEADING - PROGRAM INITIALIZATION'
         SPACE
SHOWASM  PGM    ,   SHOWASM
         EJECT
LINKREG  EQU   6                   LINK REGISTER
         EXTRACT MF=(E,EXTRACT)
         L     R1,ANSWER            (R1)=ADDR OF TSO FLAG FROM EXTRACT
         MVC   TSOFLAG,0(R1)        MOVE IN THE ANSWER TO OUR FLAG
         TM    TSOFLAG,X'80'        ARE WE ONLINE
         BNO   INITIAL                NO..GO GO INITIALIZE
         EXTRACT MF=(E,EXTRPSCB)      YES..CHECK FOR OPER PRIVLEDGE
         L     R1,ANSWER
         USING PSCB,R1
CHKOPER  TM    PSCBATR1,PSCBCTRL      DOES USER HAVE OPER PRIVLEDGE
         BO    INITIAL                YES..GO ALLOW OPERATION
         DROP  R1
         LA    R1,EMSG1
         VMSG  MF=(E,(1))
         B     $$EOJ
         EJECT
*.....................................................................*
*    GENERATE SLOT STATUS DISPLAY                                     *
*.....................................................................*
         SPACE 2
INITIAL  DS    0H
         LOAD  EP=DEVNAMET
         ST    R0,DEVADDR
         SPACE
         MVI   MESSAGE,C' '                    CLEAR OUT
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE     MESSAGE AREA
         L     R9,CVTPTR          (R9)=ADDR CVT
         USING CVT,R9
         L     R9,CVTASMVT        (R9)= ADDR ASMVT
         DROP  R9
         USING ASMVT,R9
DOSLOTS  L     R4,ASMSLOTS        LOAD TOTAL SLOTS AVAIL
         LA    R5,M1TOTSL         LOAD PLACE TO PUT IT
         BAL   LINKREG,EDITNUMB    GO EDIT THE NUMBER
*
         L     R4,ASMBKSLT        LOAD UNRESERVED SLOTS AVAIL
         LA    R5,M1UNRSV         LOAD PLACE TO PUT IT
         BAL   LINKREG,EDITNUMB    GO EDIT THE NUMBER
*
         L     R4,ASMVSC          LOAD SLOTS ALLOC TO VIO USE
         LA    R5,M1VIO           LOAD PLACE TO PUT IT
         BAL   LINKREG,EDITNUMB    GO EDIT THE NUMBER
*
         L     R4,ASMNVSC         LOAD SLOTS ALLOC TO NON-VIO USE
         LA    R5,M1NONVIO        LOAD PLACE TO PUT IT
         BAL   LINKREG,EDITNUMB    GO EDIT THE NUMBER
*
         L     R4,ASMERRS         LOAD CNT OF BAD SLOTS ON LOCAL DS OP
         LA    R5,M1BADSL         LOAD PLACE TO PUT IT
         BAL   LINKREG,EDITNUMB    GO EDIT THE NUMBER
*
         LA    R1,HEADER1A       LOAD FIRST HEADER ADDR
         VMSG  MF=(E,(1))          GO PRINT IT
         LA    R1,HEADER1B       LOAD SECOND HEADER ADDR
         VMSG  MF=(E,(1))          GO PRINT IT
         LA    R1,WTOMSG         LOAD MESSAGE ADDR
         VMSG  MF=(E,(1))          GO PRINT IT
         EJECT
*.....................................................................*
*    GENERATE CORE USAGE STATUS DISPLAY                               *
*.....................................................................*
         SPACE 2
         L     R11,16             CVT
         MVC   PVTADR,356(R11)    PVT
         L     R1,16              LOAD CVT ADDRESS.              V2M0
         L     R8,X'230'(,R1)     LOAD ADDRESS OF GLOBAL DATA.   V2M0
         L     R8,8(,R8)          LOAD ADDRESS OF CSA PQE.       V2M0
         L     R6,20(,R8)         LOAD SIZE OF CSA.              V2M0
         A     R6,24(,R8)         ADD START OF CSA.              V2M0
         ST    R6,PLPASTRT        SAVE ADDRESS OF PLPA START.    V2M0
         SPACE
         MVI   MESSAGE,C' '      CLEAR OUT MESAGE
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         SPACE
DOCORE   L     R1,PVTADR          RESTORE PVT PTR
         L     R5,12(,R1)         APPARENT ORIGIN OF PFT.
         SR    R7,R7              PREPARE FOR ICM.               V1M0G
         ICM   R7,B'0011',18(R1)  LAST PFTE OFFSET.              V1M0G
         ST    R7,LASTPFTE        SAVE                           V1M0G
         LH    R6,16(,R1)         OFFSET TO REAL ORIGIN OF PFT.
LOOP     LR    R2,R5              ORG OF PFT
         AR    R2,R6              + DISP TO FIRST PFTE
         SPACE 2
*
         TM    12(R2),X'04'       BAD FRAME ?
         BO    ADDBAD             YES
         TM    13(R2),X'40'       OFFLINE FRAME
         BZ    NOSTL              NO
ADDBAD   ACH   BADOFF
         B     BUMP               OUT
*
NOSTL    TM    12(R2),X'02'       ALLOCATED FOR V=R?
         BZ    NOVR               NO
         ACH   NOVRR
NOVR     DS    0H
         TM    13(R2),X'10'       IRREGULAR BIT ?
         BZ    NOVIOP             NO
         ACH   VIO                YES, SUM UP
NOVIOP   TM    14(R2),X'80'       SYSTEM OR LOCAL
         BZ    SYST               SYSTEM
         CLI   14(R2),X'80'       YES .. MEANS LOCAL
         BNE   LSQA               LOCAL SQA
         ACH   TIUS               TOTAL IN USE
*
         TM    12(R2),X'10'       IS PAGE LONG FIXED?
         BZ    SHORT              NO
         ACH   TLFX
         B     BUMP               OVER SHORT
*
SHORT    TM    9(R2),X'FF'        IS THERE A FIX COUNT?
         BZ    UICPPP             NO
         ACH   TSFX
LOWER    B     BUMP               OUT
*
UICPPP   DS    0H
         TM    12(R2),X'02'       V=R X
         BO    BUMP               YES
         XR    R11,R11            CLEAR
         IC    R11,15(,R2)        GET UIC
         CLI   15(R2),X'FF'       SPECIAL?
         BE    LUIC               YES,DO  NOT COUNT
         CH    R11,HIUICP         NEW MAX ?
         BL    LUIC               NO
         STH   R11,HIUICP         YES .. SAVE
LUIC     B     BUMP               OUT
*
LSQA     CLI   14(R2),X'84'       EQUAL MEANS LSQA
         BNE   BUMP               OUT
         ACH   TLSQ
         B     BUMP               OUT
*
SYST     CLI   14(R2),X'0C'       EQUAL SQA?
         BNE   COMM               NO
         ACH   SQA
         B     BUMP               OUT
*
COMM     CLI   14(R2),X'08'       EQUAL COMMON?
         BNE   AVAIL              NO
*
         ICM   R11,B'0011',2(R2)  LOAD VBN FROM PFTE.            V2M0
         SLL   R11,8              SHIFT TO PROPER ADDRESS.       V2M0
         CL    R11,PLPASTRT       COMPARE TO PLPA START ADDRESS. V2M0
         BL    CSAPAGE            BRANCH IF CSA PAGE.            V2M0
         ACH   PLPA
         B     COMMLBLA           BYPASS IF NOT CSA FRAME.       V2M0
CSAPAGE  ACH   CSASIZE            COUNT AS CSA FRAME.            V2M0
COMMLBLA TM    12(R2),X'10'       FIX ?
         BO    YESFIX             YES
         TM    9(R2),X'FF'        ANY FIX COUNT ?
         BZ    UICCCC             NO
YESFIX   ACH   CFIX
         B     BUMP               OUT
UICCCC   DS    0H
         XR    R11,R11            CLEAR
         IC    R11,15(,R2)        GET UIC
         CLI   15(R2),X'FF'       SPECIAL?
         BE    LUICC              YES,DO NOT COUNT
         CH    R11,HIUICC         NEW MAX ?
         BL    LUICC              NO
         STH   R11,HIUICC         YES .. SAVE
LUICC    B     BUMP
*
AVAIL    ACH   AVQ
         SPACE 3
BUMP     LA    R6,16(,R6)         NEXT PFTE
         C     R6,LASTPFTE         REACHED END ?                 V1M0G
         BNH   LOOP               NO .. LOOP
*
***********************************************************************
*        PRINT ROUTINE FOR REPORT CORE USEAGE
***********************************************************************
*
         PRINT NOGEN                                             V2M0
CEF2     CEH   PSQA,SQA
         CEH   PLSQ,TLSQ
         CEH   PPLPA,PLPA
         CEH   PUSE,TIUS
         CEH   PTLFX,TLFX
         CEH   PTSFX,TSFX
         CEH   PAVQ,AVQ
         CEH3  PVIO,VIO
         CEH3  BOFF,BADOFF
         CEH   PCFIX,CFIX
         CEH   PCSASZ,CSASIZE
         CEH3  PVR,NOVRR
         CEH3  HUICP,HIUICP
         CEH3  HUICC,HIUICC
*
         PRINT GEN                                               V2M0
*
PRNTCORE LA    R1,HEADER2A       LOAD FIRST HEADER ADDR
         VMSG  MF=(E,(1))          GO PRINT IT
         LA    R1,HEADER2B       LOAD SECOND HEADER ADDR
         VMSG  MF=(E,(1))          GO PRINT IT
         LA    R1,WTOMSG         LOAD MESSAGE ADDR
         VMSG  MF=(E,(1))          GO PRINT IT
         EJECT
*.....................................................................*
*    GENERATE PAGE DATASET STATUS DISPLAY                             *
*.....................................................................*
         SPACE 2
DOPARTS  LA    R1,HEADER3A       LOAD FIRST HEADER ADDR
         VMSG  MF=(E,(1))          GO PRINT IT
         LA    R1,HEADER3B       LOAD SECOND HEADER ADDR
         VMSG  MF=(E,(1))          GO PRINT IT
*
         L     R8,ASMPART        LOAD ADDRESS OF PAGE ACTVTY REF TABLE
         USING PART,R8            ESTABLISH ADDRESSABILITY
*
         L     R10,PARTEUSE      LOAD NUMBER OF PARTS TO PROCESS
         LTR   R10,R10
         BNP   PROCSART          NOTHING TO DO..GO PROCESS SART
         LA    R11,PARTENTS(R8)  LOAD ADDRESS OF FIRST PART ENTRY
         USING PARTENT,R11       GET ADDRESSABILITY
*
PARTLOOP MVI   MESSAGE,C' '      CLEAR OUT MESAGE
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
*
         TM    PAREFLG1,PAREDSBD  IS DATASET BAD?
         BZ    PCKINUSE           NO-> CHECK FOR NOT IN USE
         MVC   M2USAGE,=CL6'* BAD*'
         B     PDOUCB
PCKINUSE TM    PAREFLG1,PARENUSE
         BO    BUMPPART          NOBODY HOME HERE
*
PSTATUS  TM    PARETYPE,PAREPLPA    IS THIS PLPA?
         BZ    PCHK2
         MVC   M2USAGE,=CL6'PLPA'
         B     PDOUCB
PCHK2    TM    PARETYPE,PARECOMM    IS IT COMMON ?
         BZ    PCHK3
         MVC   M2USAGE,=CL6'COMMON'
         B     PDOUCB
PCHK3    TM    PARETYPE,PAREDPLX    IS THIS A DUPLEX DATASET
         BZ    PCHK4
         MVC   M2USAGE,=CL6'DUPLEX'
         B     PDOUCB
PCHK4    TM    PARETYPE,PARELOCL    IS THIS A LOCAL DATASET
         BZ    PDOUCB
         MVC   M2USAGE,=CL6'LOCAL'
         SPACE 2
PDOUCB   L     R7,PAREUCBP            GET UCB ADDRESS FOR THIS DSN
         USING UCBSECT,R7
*
         MVC   M2VOLUME,UCBVOLI     MOVE IN VOLSER
         UNPK  M2UNIT(5),UCBCHAN(3)    CONVERT CURRENT CUU
         NC    M2UNIT,HEXMASK            TO NICE PRINTABLE HEX
         TR    M2UNIT,HEXTAB             FORMAT FOR
         MVI   M2UNIT,C' '               FOR A GREAT
         MVI   M2UNIT+4,C' '             DISPLAY
*
         L     R1,DEVADDR           LOAD DEVICE NAME TABLE ADDRESS
         L     R2,0(R1)             LOAD NUMBER OF ENTRIES
         LA    R1,4(R1)               ADDRESS OF FIRST ENTRY
PDEVLOP  CLC   UCBTYP,8(R1)         COMPARE
         BE    PDEVFND               GOTIT...
         LA    R1,12(R1)             NOGOT..BUMP
         BCT   R2,PDEVLOP              AND GRIND
         MVC   M2TYPE,=CL8'????????'  NO GOT
         B     PDODSN
         DROP  R7
PDEVFND  MVC   M2TYPE,0(R1)         THIS IS IT
PDODSN   DS    0H
         LH    R5,PARENN            LOAD PARENT NUMBER
         MH    R5,=H'44'            MULTIPLY BY 44
         L     R4,PARTDSNL          LOAD START ADDRESS OF DSN LIST
         AR    R4,R5                ADD THE TWO
         MVC   M2DSNAME,0(R4)       GET THE DSNAME
*
PDOSLOTS L     R4,PARESZSL        LOAD TOTAL SLOTS IN DATASET
         LA    R5,M2TOTAL         LOAD PLACE TO PUT IT
         BAL   LINKREG,EDITNUMB    GO EDIT THE NUMBER
*
         L     R4,PARESLTA        LOAD SLOTS AVAIL FOR ALLOC
         LA    R5,M2AVAIL         LOAD PLACE TO PUT IT
         BAL   LINKREG,EDITNUMB    GO EDIT THE NUMBER
*
         L     R4,PARERRCT        LOAD NUMBER OF BAD SLOTS
         LA    R5,M2BAD           LOAD PLACE TO PUT IT
         BAL   LINKREG,EDITNUMB    GO EDIT THE NUMBER
         SPACE
         LA    R1,WTOMSG          LOAD MESSAGE ADDRESS
         VMSG  MF=(E,(1))           GO PUT MESSAGE
*
BUMPPART LA    R11,64(R11)        BUMP PARTENT POINTER
         BCT   R10,PARTLOOP       AND RETURN FOR MORE IF NEED BE
*
*
         DROP  R8
         DROP  R11
         EJECT
*.....................................................................*
*    GENERATE SWAP DATASET STATUS DISPLAY                             *
*.....................................................................*
         SPACE 2
PROCSART DS    0H
*
         L     R8,ASMSART        LOAD ADDRESS OF SWAP ACTVTY REF TABLE
         USING SART,R8            ESTABLISH ADDRESSABILITY
*
         L     R10,SARUSE        LOAD NUMBER OF SARTS TO PROCESS
         LTR   R10,R10
         BNP   DOFINMSG          NOTHING TO DO..GO FINISH
         LA    R11,SARENTS(R8)   LOAD ADDRESS OF FIRST SART ENTRY
         USING SARENT,R11        GET ADDRESSABILITY
*
SARTLOOP MVI   MESSAGE,C' '      CLEAR OUT MESAGE
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
*
         TM    SREFLG,SREDSBD    IS DATASET BAD?
         BZ    SCKINUSE           NO-> CHECK FOR NOT IN USE
         MVC   M2USAGE,=CL6'SW-BAD'
         B     SDOUCB
SCKINUSE TM    SREFLG,SRENUSE
         BO    BUMPSART          NOBODY HOME HERE
*
         MVC   M2USAGE,=CL6'SWAP'
         SPACE 2
SDOUCB   L     R7,SREUCB              GET UCB ADDRESS FOR THIS DSN
         USING UCBSECT,R7
*
         MVC   M2VOLUME,UCBVOLI     MOVE IN VOLSER
         UNPK  M2UNIT(5),UCBCHAN(3)    CONVERT CURRENT CUU
         NC    M2UNIT,HEXMASK            TO NICE PRINTABLE HEX
         TR    M2UNIT,HEXTAB             FORMAT FOR
         MVI   M2UNIT,C' '               FOR A GREAT
         MVI   M2UNIT+4,C' '             DISPLAY
*
         L     R1,DEVADDR           LOAD DEVICE NAME TABLE ADDRESS
         L     R2,0(R1)             LOAD NUMBER OF ENTRIES
         LA    R1,4(R1)               ADDRESS OF FIRST ENTRY
SDEVLOP  CLC   UCBTYP,8(R1)         COMPARE
         BE    SDEVFND               GOTIT...
         LA    R1,12(R1)             NOGOT..BUMP
         BCT   R2,SDEVLOP              AND GRIND
         MVC   M2TYPE,=CL8'????????'  NO GOT
         B     SDODSN
         DROP  R7
SDEVFND  MVC   M2TYPE,0(R1)         THIS IS IT
SDODSN   DS    0H
         LH    R5,SRENN             LOAD SARENT NUMBER
         MH    R5,=H'44'            MULTIPLY BY 44
         L     R4,SARDSNL           LOAD START ADDRESS OF DSN LIST
         AR    R4,R5                ADD THE TWO
         MVC   M2DSNAME,0(R4)       GET THE DSNAME
*
SDOSLOTS L     R4,SRETOTSL        LOAD TOTAL SLOTS IN DATASET
         LA    R5,M2TOTAL         LOAD PLACE TO PUT IT
         BAL   LINKREG,EDITNUMB    GO EDIT THE NUMBER
*
         L     R4,SREAVLSL        LOAD SLOTS AVAIL FOR ALLOC
         LA    R5,M2AVAIL         LOAD PLACE TO PUT IT
         BAL   LINKREG,EDITNUMB    GO EDIT THE NUMBER
*
         L     R4,SRERRCNT        LOAD NUMBER OF BAD SLOTS
         LA    R5,M2BAD           LOAD PLACE TO PUT IT
         BAL   LINKREG,EDITNUMB    GO EDIT THE NUMBER
         SPACE
         LA    R1,WTOMSG          LOAD MESSAGE ADDRESS
         VMSG  MF=(E,(1))           GO PUT MESSAGE
*
BUMPSART LA    R11,48(R11)        BUMP SARTENT POINTER
         BCT   R10,SARTLOOP       AND RETURN FOR MORE IF NEED BE
*
         DROP  R8
         DROP  R11
DOFINMSG LA    R1,FINMSG
         VMSG  MF=(E,(1))
         B     $$EOJ
         EJECT
*.....................................................................*
*        LOCAL SUBROUTINE TO CONVERT NUMBER TO PRINTABLE              *
*                                                                     *
*  ENTER WITH (R4) NUMBER TO CONVERT                                  *
*             (R5) = ADDR OF TARGET 6 CHAR FIELD TO RECEIVE NUMBER    *
*  BAL   LINKREG,EDITNUM                                              *
*                                                                     *
*                                                                     *
*.....................................................................*
         SPACE
EDITNUMB CVD   R4,DBLW           CONVERT NUMBER TO PACKED
         MVC   0(6,R5),EDITMASK  MOVE IN THE MASK
         ED    0(6,R5),DBLW+5    EDIT THE VALUE
         BR    LINKREG           RETURN
         SPACE
*.....................................................................*
*        CONVERT TO PRINTABLE..USED BY CEH CEH3 MACROS                *
*.....................................................................*
         SPACE
CVTERZZ  DS    0H
         C     R0,=F'9999'          IS IT TOO BIG
         BH    CVTERZZ1
         CVD   R0,DBLW
         OI    DBLW+7,X'0F'
         MVC   TRAN1,=X'402020202120'
         ED    TRAN1,DBLW+5
         MVC   0(4,R1),TRAN1+2
         BR    LINKREG
CVTERZZ1 MVC   0(4,R1),XAST9
         BR    LINKREG
         EJECT
*.....................................................................*
*        MESSAGES - OPER QUERIES AND RESPONSES FOR GOOD WORK          *
*.....................................................................*
         SPACE
HEADER1A WTO   'SHOWASM - CURRENT SLOT STATUS',                        X
               ROUTCDE=(11),MF=L
         SPACE 1
HEADER1B WTO   ' TOTAL UNRSV .VIO. N-VIO .BAD.',                       X
               ROUTCDE=(11),MF=L
         SPACE 1
HEADER2A WTO   'SHOWASM - STORAGE USAGE STATUS',                       X
               ROUTCDE=(11),MF=L
         SPACE 1
HEADER2B WTO   '  SQA LSQA PLPA  CSA CFIX INUS LLFX LSFX AVAL VIO BOF VX
               =R  UICC UICP ',ROUTCDE=(11),MF=L
         EJECT
HEADER3A WTO   'SHOWASM - PAGE/SWAP DATASET STATUS',                   X
               ROUTCDE=(11),MF=L
         SPACE 1
HEADER3B WTO   ' USAGE  VOLUME UNIT DEV-TYPE TOTAL AVAIL .BAD.  DSNAME X
                ',ROUTCDE=(11),MF=L
         SPACE 1
FINMSG   WTO   'SHOWASM - DISPLAY ENDED',                              X
               ROUTCDE=(11),MF=L
         EJECT
         SPACE 1
WTOMSG   WTO   '                                                       X
                                        ',                             X
               ROUTCDE=(11),MF=L
         SPACE 2
         ORG   WTOMSG+4
MESSAGE  DS    CL80
         ORG   WTOMSG+4
M1TOTSL  DS    CL6
M1UNRSV  DS    CL6
M1VIO    DS    CL6
M1NONVIO DS    CL6
M1BADSL  DS    CL6
         ORG   WTOMSG+5
M2USAGE  DS    CL6
         DS    CL1
M2VOLUME DS    CL6
         DS    CL1
M2UNIT   DS    CL4
         DS    CL1
M2TYPE   DS    CL8
M2TOTAL  DS    CL6
M2AVAIL  DS    CL6
M2BAD    DS    CL6
         DS    CL2
M2DSNAME DS    CL32
         ORG   WTOMSG+5
PSQA     DS    CL4
         DS    CL1
PLSQ     DS    CL4
         DS    CL1
PPLPA    DS    CL4
         DS    CL1
PCSASZ   DS    CL4
         DS    CL1
PCFIX    DS    CL4
         DS    CL1
PUSE     DS    CL4
         DS    CL1
PTLFX    DS    CL4
         DS    CL1
PTSFX    DS    CL4
         DS    CL1
PAVQ     DS    CL4
         DS    CL1
PVIO     DS    CL3
         DS    CL1
BOFF     DS    CL3
         DS    CL1
PVR      DS    CL3
         DS    CL2
HUICC    DS    CL3
         DS    CL2
HUICP    DS    CL3
*
         ORG
         EJECT
*.....................................................................*
*        MESSAGES - BOZO RESPONSES                                    *
*.....................................................................*
         SPACE
EMSG1    WTO   'SORRY...SHOWASM IS ONLY AVAILABLE TO OPER PRIV USERS', X
               ROUTCDE=(11),MF=L
         SPACE
         EJECT
*.....................................................................*
*        VARIABLES                                                    *
*.....................................................................*
         SPACE
TSOFLAG  DC    X'00'               ='80' IF TSO. '00' IF NOT TSO
ANSWER   DC    F'0'                ADDRESS POINTER FOR EXTRACT
DEVADDR  DC    AL4(0)              ADDRESS OF DEVNAMET
DBLW     DC    D'0'
TRAN     DC    F'0'
TRAN1    DC    CL6' '
*
*
LASTPFTE DS    F
PVTADR   DS    F
PLPASTRT DS    F                                                V2M0
*
*
CTS      DS    0F               ACCUMULATORS FOR PAGE COUNTS
SQA      DC    H'0'
TLSQ     DC    H'0'
PLPA     DC    H'0'
AVQ      DC    H'0'
TLFX     DC    H'0'
TSFX     DC    H'0'
TIUS     DC    H'0'
BADOFF   DC    H'0'
VIO      DC    H'0'
NOVRR    DC    H'0'
CSASIZE  DC    H'0'
HIUICP   DC    H'0'
HIUICC   DC    H'0'
CFIX     DC    H'0'
         EJECT
*.....................................................................*
*        CONSTANTS                                                    *
*.....................................................................*
         SPACE 2
EDITMASK DC    X'402020202120'
HEXMASK  DC    4X'0F'
HEXTAB   DC    C'0123456789ABCDEF'
XAST9    DC    C' *****'
         EJECT
*.....................................................................*
*        LIST FORMS OF MACROS                                         *
*.....................................................................*
         SPACE 2
EXTRACT  EXTRACT ANSWER,'S',FIELDS=(TSO),MF=L
         SPACE 2
EXTRPSCB EXTRACT ANSWER,'S',FIELDS=(PSB),MF=L
         EJECT
         IKJPSCB
         EJECT
UCBSECT  DSECT
         IEFUCBOB
         EJECT
CVT      DSECT
         CVT   SYS=VMS,TSO=YES
*
         EJECT
ASMVT    DSECT
         ORG   ASMVT+4
ASMSART  DS    A                ADDR OF SWAP ACTIVITY REF TABLE
ASMPART  DS    A                ADDR OF PAGE ACTIVITY REF TABLE
         ORG   ASMVT+X'6C'
ASMBKSLT DS    F                COUNT OF UNRESVD LOCAL SLOTS
ASMSLOTS DS    F                COUNT OF TOTAL LOCAL SLOTS IN ALL
*                                 OPEN LOCAL PAGE DATASETS
ASMVSC   DS    F                COUNT OF TOTAL SLOTS ALLOC TO VIO USE
ASMNVSC  DS    F                COUNT OF TOTAL SLOTS ALLOC TO NON-VIO
ASMERRS  DS    F                COUNT OF BAD SLOTS ON LOCAL DSNS
         SPACE
PART     DSECT              PAGE ACTIVITY REFERENCE TABLE
PARTHDR  DS    XL80
         ORG   PART+4
PARTSIZE DS    F            NUMBER OF PARTENTRIES IN THIS PART
PARTEUSE DS    F            NUMBER OF PARTE IN USE
         ORG   PART+24
PARTDSNL DS    F            ADDRESS OF DSNLIST FOR THE PARTE
         ORG   PART+80
PARTENTS EQU   *-PART       START OF PART ENTRIES
         SPACE 2
PARTENT  DSECT              PART ENTRY
         ORG   PARTENT+8
PARETYPE DS    XL1         PAGE DATASET TYPE
PAREPLPA EQU   B'10000000'  PLPA
PARECOMM EQU   B'01000000'  COMMON
PAREDPLX EQU   B'00100000'  DUPLEX
PARELOCL EQU   B'00010000'  LOCAL
*
PAREFLG1 DS    XL1          PARTE FLAGS
PARENUSE EQU   B'10000000'   PARE NOT IN USE 1=NOT IN USE
PAREDSBD EQU   B'01000000'   DATASET BAD 1=YES 0=NO
         ORG   PARTENT+10
PARENN   DS    H            PART NUMBER FOR THIS PARTE
         ORG   PARTENT+16
PARESZSL DS    F            SIZE OF PAGE DATASET IN SLOTS
PARESLTA DS    F            NUMBER OF SLOTS AVAILABLE
PARERRCT DS    F            COUNT OF NUMBER OF BAD SLOTS
         ORG   PARTENT+44
PAREUCBP DS    F            POINTER TO UCB FOR PAGE DATASET
         EJECT
SART     DSECT              SWAP ACTIVITY REFERENCE TABLE
SARTHDR  DS    XL80
         ORG   SART+8
SARUSE   DS    F            NUMBER OF SARTE IN USE
         ORG   SART+24
SARDSNL  DS    F            ADDRESS OF DSNLIST FOR THE SARTE
         ORG   SART+80
SARENTS  EQU   *-SART       START OF SART ENTRIES
         SPACE 2
SARENT   DSECT              SART ENTRY
*
         ORG   SARENT+9
SREFLG   DS    XL1          SARTE FLAGS
SRENUSE  EQU   B'10000000'   SARTE NOT IN USE 1=NOT IN USE
SREDSBD  EQU   B'01000000'   DATASET BAD 1=YES 0=NO
         ORG   SARENT+10
SRENN    DS    H            SARE NUMBER FOR THIS PARTE
         ORG   SARENT+16
SRETOTSL DS    F            TOTAL NUMBER OF SWAP SETS ON THIS DSN
SREAVLSL DS    F            COUNT OF SWAP SETS AVAILABLE
SRERRCNT DS    F            COUNT OF NUMBER OF ERROR SWAP SETS
         ORG   SARENT+44
SREUCB   DS    F            POINTER TO UCB FOR SWAP DATASET
         END   SHOWASM
/*
//********************************************************************
//VMSG     EXEC  SYSASM
//ASM.SYSPUNCH DD DSN=&&OBJLIB(VMSG),DISP=(OLD,PASS)
//ASM.SYSIN DD *
VMSG     TITLE 'VMSG SUBROUTINE FOR BATCH TRANSMISSION SERVICES'
*
* VMSG SUBROUTINE MODIFIED TO DO WTO  INSTEAD OF TPUT
*      K TRUE    22NOV76
*
P062A50  CSECT
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
         ENTRY VMSG
         ENTRY CLSVMSG
         EJECT
* VSMG IS A COMMON SUBROUTINE FOR ALL MESSAGES ISSUED BY THE BATCH
* TRANSMISSION SERVICES PROGRAMS.  THIS MODULE IS ENTERED BY A
* BALR 14,15.  AT ENTRY R13 POINTS TO A CONVENTIONAL OS SAVE AREA AND
* R1 POINTS TO THE MESSAGE TO BE DISPLAYED.  THE MESSAGE IS IN EXACTLY
* THE SAME FORMAT AS A WTO WITH MF=L SPECFIED.  THIS PROGRAM CAN ISSUE
* A WTO MF=E OR WRITE THE MESSAGE TO A FILE WITH RECFM=V.  AT THE
* PRESENT TIME THIS MODULE WRITES THE MESSAGE TO A DISK FILE AND AT THE
* SAME TIME ISSUES DOES A WTO.
*
* ENTRY CLSVMSG IS PROVIDED TO ALLOW THE CALLING PROGRAMS TO INSURE
* THAT THE MESSAGE FILE IS PROPERLY CLOSED.
         EJECT
         USING *,R12
VMSG     SAVE  (14,12),,*
         LR    R12,R15
         LR    R15,R13
         LA    R13,SAVEAREA
         ST    R15,SAVEAREA+4
         ST    R13,8(0,R15)
         LR    R3,R1               SAVE ADDRESS OF PARAMETER.
         CLI   OPENSW,X'00'        IS OPEN NEEDED?
         BNE   AA010               IF NOT...BRANCH
         OPEN  (MSGFILE,(OUTPUT))
         TM    MSGFILE+48,X'10'    CHECK TO SEE IF OPEN SUCCESSFULL
         BNO   AA005
         MVI   OPENSW,X'FF'
         B     AA010
AA005    EQU   *
         MVI   OPENSW,X'F0'
* 010    EQU   *
*        WTO   MF=(E,(R3))         ISSUE THE WTO..
*        SPACE 2
AA010    EQU   *
         XC    2(2,R3),2(R3)       CLEAR MCS INFO
         CLI   OPENSW,X'FF'        IS IT OPEN?
         BNE   ZZ010               NO-> EXIT STAGE LEFT
         PUT   MSGFILE,(R3)        WRITE IT TO DISK
         B     ZZ010
         EJECT
         DS    0D
         DROP  R12
CLSVMSG  EQU   *
         USING *,R15
         SAVE  (14,12),,CLSVMSG
         L     R12,=A(VMSG)
         DROP  R15
         USING VMSG,R12
         LR    R15,R13
         LA    R13,SAVEAREA
         ST    R15,SAVEAREA+4
         ST    R13,8(0,R15)
         CLI   OPENSW,X'FF'
         BNE   ZZ010
         CLOSE (MSGFILE)
         FREEPOOL MSGFILE
         MVI   OPENSW,X'00'
ZZ010    EQU   *
         L     R13,SAVEAREA+4
         RETURN (14,12),RC=0
         SPACE 2
SAVEAREA DC    18F'0'
OPENSW   DC    X'00'
         EJECT
MSGFILE  DCB   DDNAME=VMSG,DSORG=PS,MACRF=(PM),RECFM=VB,LRECL=128
         LTORG
         END
/*
//********************************************************************
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(1024,(200,20))
//OBJLIB   DD  DSN=&&OBJLIB,DISP=(OLD,PASS)
//SYSLIN DD *
  INCLUDE OBJLIB(SUPERSPY,DJOBS,DTSO,DDMN,SHOWASM,DDASD,DTAPES)
  INCLUDE OBJLIB(VMSG)
  ENTRY SUPERSPY
  NAME  SUPERSPY(R)
//
./       ADD   NAME=TRAC3850
//TRAC3850 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL TRAC3850 - PGM TO ANLZ/DISP IGCTRINT OUTPUT  (IPO)
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TRAC3850 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TRAC3850      DDASD COMMAND
//*
//TRAC3850 EXEC SYSASM,MEMBER=TRAC3850    DDASD
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(TRAC3850)
 NAME TRAC3850(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=TSO020SU
//TSO020SU JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL TSO020SU - THE DJOBS COMMAND
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TSO020SU TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TSO020SU      DJOBS COMMAND
//*
//TSO020SU EXEC SYSASM,MEMBER=TSO020SU    DJOBS
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(TSO020SU)
 ALIAS   DJ,DJOBS
 NAME TSO020SU(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=TSO025AS
//TSO025AS JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL TSO025AS - THE DTSO  COMMAND
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TSO025AS TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TSO025AS      DTSO COMMAND
//*
//TSO025AS EXEC SYSASM,MEMBER=TSO025AS    DTSO
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(TSO025AS)
 ALIAS   DTS,DTSO
 NAME TSO025AS(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=TSO029
//TSO029   JOB (MVS19200,0194),'KEN TRUE',CLASS=A,MSGCLASS=A,
//             NOTIFY=MVS#KMT,COND=(0,NE) RESTART=XXX.ASM
//*********************************************************************
//*
//* INSTALL TSO029 - THE DMAP COMMAND
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TSO029 TO SYS2.LINKLIB
//*
//*  K TRUE   13 MAR 81
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEV90,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TEMP.TSO029.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TEMP.TSO029.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=WORK
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=WORK
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=WORK
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TEMP.TSO029.OBJ(&MEMBER),DISP=SHR
// PEND
//*
//********************************************************************
//DELETE  EXEC PGM=IEFBR14
//DD1      DD  DSN=TEMP.TSO029.SOURCE,DISP=(MOD,DELETE,DELETE),
//             UNIT=WORK,SPACE=(TRK,(1))
//DD1A     DD  DSN=TEMP.TSO029.SOURCE,DISP=(MOD,UNCATLG,DELETE),
//             UNIT=WORK,VOL=REF=*.DD1
//DD2      DD  DSN=TEMP.TSO029.OBJ,DISP=(MOD,DELETE,DELETE),
//             UNIT=WORK,SPACE=(TRK,(1))
//DD2A     DD  DSN=TEMP.TSO029.OBJ,DISP=(MOD,UNCATLG,DELETE),
//             UNIT=WORK,VOL=REF=*.DD2
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TEMP.TSO029.SOURCE,DISP=(NEW,CATLG,DELETE),
//            UNIT=WORK,SPACE=(CYL,(2,1,25)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PO)
//PAN1.OBJ    DD DSN=TEMP.TSO029.OBJ,DISP=(NEW,CATLG,DELETE),
//            UNIT=WORK,SPACE=(CYL,(1,1,25)),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=880,DSORG=PO)
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TSO029
++WRITE WORK,IXTOFMT5
//*
//**** ASSEMBLE ALL THE MODULES
//*
//*
//TSO029   EXEC SYSASM,MEMBER=TSO029   DMAP COMMAND
//IXTOFMT5 EXEC SYSASM,MEMBER=IXTOFMT5 INDEXED VTOC TO FMT5 CNVT
//*
//LKED     EXEC PGM=IEWL,PARM='XREF,LIST,RENT,REUS',REGION=512K
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=VIO,SPACE=(1024,(200,20))
//SYSLMOD  DD  DSN=SYS2.LINKLIB,DISP=SHR
//SYSLIB   DD  DSN=TEMP.TSO029.OBJ,DISP=SHR
//SYSLIN   DD  *
  INCLUDE SYSLIB(TSO029,IXTOFMT5)
  ALIAS DMAP
  NAME  TSO029(R) LINK TO SYS2.LINKLIB
//*
//AFTER   EXEC PGM=IEFBR14
//DD1      DD  DSN=TEMP.TSO029.SOURCE,DISP=(OLD,DELETE)
//DD2      DD  DSN=TEMP.TSO029.OBJ,DISP=(OLD,DELETE)
//
./       ADD   NAME=TSO032
//TSO032 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL TSO032 - THE DDMN    COMMAND
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TSO032 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TSO032        DDMN COMMAND
//*
//TSO032 EXEC SYSASM,MEMBER=TSO032        DDMN
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(TSO032)
 ALIAS   DDMN,DDOMAIN
 NAME TSO032(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=TSO033
//TSO033 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL TSO033 - THE DUPTIME COMMAND
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TSO033 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TSO033        DUPTIME COMMAND
//*
//TSO033 EXEC SYSASM,MEMBER=TSO033        DUPTIME
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(TSO033)
 ALIAS   DUPTIME,DUP
 NAME TSO033(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=TSO034
//TSO034 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL TSO034 - THE SYSMAINT COMMAND
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TSO034 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TSO034        SYSMAINT COMMAND
//*
//TSO034 EXEC SYSASM,MEMBER=TSO034        SYSMAINT
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(TSO034)
 ALIAS   SYSMAINT
 NAME TSO034(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=TSO036
//TSO036 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL TSO036 - THE SHOWASM COMMAND
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TSO036 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TSO036        SHOWASM COMMAND
//*
//TSO036 EXEC SYSASM,MEMBER=TSO036        SHOWASM
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(TSO036)
 ALIAS   SHOWASM
 NAME TSO036(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=TSO041
//TSO041 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL TSO041 - THE LPDS COMMAND
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TSO041 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TSO041        LPDS COMMAND
//*
//TSO041 EXEC SYSASM,MEMBER=TSO041        LPDS
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(TSO041)
 ALIAS   LPDS,LP
 NAME TSO041(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=TSO042
//TSO042 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL TSO042 - THE DDASD COMMAND
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TSO042 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TSO042        DDASD COMMAND
//*
//TSO042 EXEC SYSASM,MEMBER=TSO042        DDASD
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(TSO042)
 ALIAS   DDASD,DUS
 NAME TSO042(R)
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=TSO044
//TSO044 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL TSO044 - THE UCBUNLD STARTED TASK
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TSO044 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//         DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TSO044        TSO044 COMMAND
++WRITE WORK,S051B22       FIND SUBROUTINE
//*
//TSO044   EXEC SYSASM,MEMBER=TSO044      TSO044
//S051B22  EXEC SYSASM,MEMBER=S051B22     TSO044
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(TSO044,S051B22)
 SETCODE AC(1)
 ALIAS UCBUNLD
 NAME  TSO044(R)           LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=TSO045
//TSO045 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL TSO045 - TSO CHIMP COMMAND
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TSO045 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TSO045        TSO045 COMMAND
//*
//TSO045 EXEC SYSASM,MEMBER=TSO045        TSO045
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(TSO045)
 ALIAS CHIMP
 NAME  TSO045(R)           LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=TSO048
//TSO048 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL TSO048 - TSO #PANVIEW COMMAND
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TSO048 TO TECH.INTEL.MODS.LOAD
//*
//*
//* NOTE:  THIS PROGRAM REQUIRES 'PAM' THE PANVALET ACCESS METHOD
//*        CHANGE 'PANVALET' DDNAME IN LINK STEP TO POINT TO LIBRARY
//*               CONTAINING YOUR 'PAM' MODULE, AND
//*        CHANGE '(PAMV9)'  NAME IN INCLUDE CARD TO REFERENCE YOUR
//*               MEMBER NAME FOR 'PAM' MODULE
//*
//*
//*  K TRUE   27 AUG 80
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TSO048        TSO048 COMMAND
//*
//TSO048 EXEC SYSASM,MEMBER=TSO048        TSO048
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//PANVALET DD  DSN=SYS2.FCILIB,DISP=SHR    <=== LOCATION OF PAM
//*                                             PANVALET ACCESS METHOD
//SYSLIN   DD  *
 INCLUDE SYSLIB(TSO048)
 INCLUDE  PANVALET(PAMV9)       <==== NAME OF PANVALET ACCESS METHOD
 ALIAS    #PANVIEW
 NAME  TSO048(R)                LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=TSO049
//TSO049 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(5,LT)
//*********************************************************************
//*
//* INSTALL TSO049 - NBS DATASET ENCRIPT/DECRIPT PROGRAM
//*                  USES R050A90 ENCRIPT/DECRIPT SUBROUTINE
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TSO049 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   18 MAR 81
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
//********************************************************************
//        PEND
//SYSPLI PROC  MEMBER=NEEDED
//PLI    EXEC  PGM=IEL0AA,REGION=512K,
// PARM='A,AG,INC,GS,NEST,S,STMT,X,MAR(2,72,1),FLAG(I),OPT(2)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//SYSLIN   DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=SHR
//********************************************************************
//       PEND
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TSO049
++WRITE WORK,R050A90
/*
//********************************************************************
//TSO049   EXEC  SYSPLI,MEMBER=TSO049
//********************************************************************
//R050A90 EXEC   SYSASM,MEMBER=R050A90
//********************************************************************
//*   LINKEDIT STEP
//********************************************************************
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF',REGION=256K
//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR
//         DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSVIO,SPACE=(1024,(180,180),,,ROUND)
//OBJLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSLIN   DD  *
 INCLUDE OBJLIB(TSO049)
 INCLUDE OBJLIB(R050A90)
 NAME    TSO049(R)    LINK TO TECH.INTEL.MODS.LOAD
//AFTER   EXEC PGM=IEFBR14
./       ADD   NAME=TSO050
//TSO050 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL TSO050 - FCI '$' COMMAND - INVOKE PGM FROM LINKLIST
//*                   REWRITTEN TO NOT USE UCLA URMACROS.
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TSO050 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   27 AUG 80
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TSO050
//*
//TSO050 EXEC SYSASM,MEMBER=TSO050
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(TSO050)
 ALIAS  $
 NAME  TSO050(R)                LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=TSO051
//TSO051 JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL TSO051 - TSO GETINFO COMMAND - FETCH INFO FROM OSJCT (ETC)
//*                   AND STUFF INTO CLIST VARIABLES OF YOUR CHOICE
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS TSO051 TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   27 AUG 81
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,
//             DCB=BLKSIZE=12960
//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,TSO051
//*
//TSO051 EXEC SYSASM,MEMBER=TSO051
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(TSO051)
 ALIAS  GETINFO
 NAME  TSO051(R)                LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
./       ADD   NAME=UCBZAP
//UCBZAP JOB (65003,B29),'KEN TRUE',CLASS=H,MSGCLASS=A,
//            NOTIFY=$6TSKEN,COND=(0,NE)
//*********************************************************************
//*
//* INSTALL UCBZAP - THE UCBZAP COMMAND/STARTED TASK
//*
//*           FETCH SOURCE FROM TECH.MVS.PANVALET
//*           COMPILE / ASSEMBLE SOURCE
//*           LINKEDIT AS UCBZAP TO TECH.INTEL.MODS.LOAD
//*
//*  K TRUE   12 JUN 79
//*********************************************************************
//SYSASM PROC MEMBER=
//ASM    EXEC PGM=IEUASM,PARM='LOAD,NODECK,LINECNT=54,XREF(SHORT)'
//SYSIN    DD  DSN=TECH.INTEL.MODS.SOURCE(&MEMBER),DISP=SHR
//SYSLIB   DD  DSN=TECH.INTEL.MODS.SOURCE,DISP=SHR,
//             DCB=BLKSIZE=19040
//         DD  DSN=SYS1.MACLIB,DISP=SHR           SYSTEM MACRO LIBRARY
//         DD  DSN=SYS1.AMODGEN,DISP=SHR          SYSTEM MACRO LIBRARY
//SYSUT1   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT2   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSUT3   DD  SPACE=(CYL,(5,5)),UNIT=SYSDA
//SYSPRINT DD  SYSOUT=*
//SYSGO    DD  DSN=TECH.INTEL.MODS.OBJ(&MEMBER),DISP=OLD
// PEND
//*
//********************************************************************
//********************************************************************
//PANGET  EXEC  PAN1,LIB1='TECH.MVS.PANVALET'
//PAN1.SCELIB DD DSN=TECH.INTEL.MODS.SOURCE,DISP=OLD
//*
//PAN1.SYSIN DD *
++OPTION OUTPUT,SCELIB
++WRITE WORK,UCBZAP        UCBZAP COMMAND
++WRITE WORK,SRCHVOL       SRCHVOL SUBROUTINE
//*
//UCBZAP   EXEC SYSASM,MEMBER=UCBZAP      UCBZAP
//SRCHVOL EXEC SYSASM,MEMBER=SRCHVOL      SRCHVOL
//*
//LKED   EXEC PGM=IEWL,PARM='XREF,LIST'
//SYSLMOD  DD  DSN=TECH.INTEL.MODS.LOAD,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,1))
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=TECH.INTEL.MODS.OBJ,DISP=SHR
//SYSLIN   DD  *
 INCLUDE SYSLIB(UCBZAP,SRCHVOL)
 SETCODE AC(1)
 NAME  UCBZAP(R)           LINK TO TECH.INTEL.MODS.LOAD
/*
//AFTER  EXEC PGM=IEFBR14
//
