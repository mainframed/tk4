*          DATA SET TSO025AS   AT LEVEL 001 AS OF 07/06/77
*         DATA SET TSO025SU   AT LEVEL 001 AS OF 03/09/77
*         DATA SET TSO025SU   AT LEVEL 001 AS OF 02/12/77
*
* THIS IS THE SHOWTSO COMMAND FOR TSO. (MOD FOR SUPV I & II S. U.)
*
* IT PEEKS AT ASCBS TO FIND TSO USERS AND FORMATS A DISPLAY
*   OF USERIDS/SWAP STATUS/ASID AND TERMINAL UNIT.
*
* THIS PGM IS NON-PRIVLIGED; REQUIRES MACROS FROM SYS1.AMODGEN
*
* KEN TRUE   FAIRCHILD CAMERA AND INSTRUMENT   15DEC76
*
* MODIFIED TO OPERATE AS OPER STC OR TSO COMMAND  K TRUE   27MAY77
*
*
*
LINKREG  EQU   6                   LINK REGISTER
*
TSO025AS PGM                ,PGM TO SHOW TSO USERS-ASID/UNIT ADDR
         MVI   BUFFER,C' '        CLEAR OUT BUFFER
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
         EXTRACT MF=(E,EXTRACT)
         L     R1,ANSWER            (R1)=ADDR OF TSO FLAG FROM EXTRACT
         MVC   TSOFLAG,0(R1)        MOVE IN THE ANSWER TO OUR FLAG
         SPACE
         LA    R3,0               COUNTER FOR # TSO USERS
         LA    R7,#ENTRYS         ENTRIES PER LINE
         LA    R2,BUFFER          BUFFER ADDRESS
         L     R11,CVTPTR         (R11)=ADDR CVT
         USING CVT,R11
         L     R9,CVTOPCTP        (R9) =ADDR (SRM'S RMCT)
         ST    R9,RMCTPTR            WHICH IS SAVED FOR LATER
         L     R9,CVTASVT         (R9)= ADDR ASVT
         USING ASVT,R9
         L     R5,ASVTMAXU        (R5)=MAX NUMB OF ASCB ENTRIES
         LA    R5,2(R5)              +2 SO WE CAN SCAN ENTIRE ASVT..
         LA    R9,ASVTFRST-4      (R9)= ASVT ENTRY ADDRESS - 4
         USING ASCB,R8
         USING CSCB,R10
         DROP  R9
         USING OVERLAY,R2         MAPPING...
         LA    R1,HEADING
         BAL   LINKREG,PUTMSG     SHOVEL OUT THE LINE
         B     NEXTONE            GO GET ASCB
*
* LOOP THROUGH ALL ASCBS
*
LOOP1    LM    R10,R11,ASCBCSCB   LOAD CSCB/TSB ADDR
         LTR   R11,R11            ANYBODY HOME?
         BZ    NEXTONE            NO NOT TP USER
         MVI   SWITCH,X'F0'       OUTPUT EXISTS..
         CLC   CHPARM,=CL8' '     ANYBODY REALLY HOME?
         BNE   MOVEIT             YEP-> GO MOVE EM IN
         MVC   USERID,=C'STARTING' NOPE-> USE DUMMY NAME
         B     CONT#1             GO FINISH UP WITH ASID
MOVEIT   MVC   USERID,CHKEY       MOVE IN USERID
CONT#1   DS    0H
         UNPK  ASID(5),ASCBASID(3) UNPACK ASID
         NC    ASID,HEXMASK       AND
         TR    ASID,HEXTAB         TRANSLATE
         STAX  MF=(E,DEFER)             HOLD DEM ATTENTIONS...
         PRINT OFF
         L     0,CODE
         SR    1,1
         SVC   254
*
         ST    1,OLDKEY
         PRINT OFF
         UNPK  LDASH(5),82(3,R11) UNPACK LINE ADDR
         PRINT OFF
         LM    0,1,CODE                  RETURN TO ORIGINAL KEY
         SVC   254
         XC    OLDKEY,OLDKEY
         PRINT OFF
         STAX  MF=(E,NODEFER)            LET ATTENTIONS HAVE FUN..
         MVI   LDASH,C' '
         NC    UNIT,HEXMASK       AND
         TR    UNIT,HEXTAB          TRANSLATE
         MVI   RDASH,C' '
         BAL   R6,COMPTIME        GO GET STEP TIME/CPU TIME
         LA    R2,ENTRYSIZ(0,R2)  INCR INTO BUFFER
         LA    R3,1(R3)           BUMP COUNT
         BCT   R7,NEXTONE         GO GET NEXT ASCB
*
         LA    R1,MSGWTO
         BAL   LINKREG,PUTMSG     SHOVEL OUT THE LINE
         LA    R7,#ENTRYS         ENTRIES PER LINE
         LA    R2,BUFFER          RESET ADDRESS
         MVI   BUFFER,C' '        AND CLEAR IT OUT
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
*
NEXTONE  BCT   R5,DOIT            CHECK COUNT
         B     LOOP2              NO MORE..SPLIT
DOIT     LA    R9,4(0,R9)         INCR INTO ASVT
         L     R8,0(0,R9)         LOAD ASCB ADDR
*        LA    R8,0(0,R8)         CLEAR HIGH ORDER
         LTR   R8,R8              END OF ASCBS?
         BZ    LOOP2              YES->EXIT
         TM    0(R9),X'80'        ASID ASSIGNED?
         BO    NEXTONE            NO-> TRY AGAIN.
         B     LOOP1              YES->SEE IF WE LIKE IT
*
LOOP2    CH    R7,#ENTH           ANYTHING TO WRITE?
         BE    CLEANUP            NO-> SPLIT
         LA    R1,MSGWTO
         BAL   LINKREG,PUTMSG     SHOVEL OUT THE LINE
         EJECT
CLEANUP  TM    SWITCH,X'F0'       DID WE POKE ANYTHING
         BZ    NOOUTPUT           NO..GRIPE AND SPLIT
         CVD   R3,WRKD            CONVERT TO BIN
         MVC   MSG2USER,=X'402020202120'  MOVE IN THE PATTERN
         ED    MSG2USER,WRKD+5    EDIT THE PATTERN
         LA    R1,MSG2
         BAL   LINKREG,PUTMSG     SHOVEL OUT THE LINE
*
         B     $$EOJ              RETURN
         SPACE 2
NOOUTPUT LA    R1,GRIPE
         BAL   LINKREG,PUTMSG     SHOVEL OUT THE LINE
         B     $$EOJ
         EJECT
*
*  LOCAL SUBROUTINE TO CALC STEP TIME AND CPU TIME.
*      AND SWAP STATUS, PAGES + WORKING SET SIZE
*  ENTER WITH  BAL R6,COMPTIME  (ALL REGS PRESERVED)
*
*
*   COMPUTE ELAPSED TRANSACTION TIME (STEP TIME..)
*
COMPTIME STM    R4,R7,SAVEREGS    SAVE WORK REGS
          SPACE 1
ELAPSED  L     R4,RMCTPTR        POINTER TO THE RMCT.
         L     R4,X'7C'(,R4)     PICK UP TIME OF DAY FROM RMCT. (SU)
         L     R5,ASCBOUCB       GET ADDR OF OUCB FOR USER
         S     R4,72(,R5)        SUBTRACT TRANSACTION START TIME.(SU)
         SRDL  R4,32              MOVE INTO R5 FOR DIVIDE.
         D     R4,=F'1024'       CONVERT TO SECONDS.
         SR    R4,R4             IGNORE REMAINDER.
         D     R4,=F'3600'       DIVIDE TO GET HOURS.
         CVD   R5,WRKD           CONVERT HOURS -
         UNPK  STEPHH,WRKD+6(2)     - TO PRINTABLE FORMAT.
         OI    STEPHH+1,X'F0'    FIXUP SIGN BYTE.
         MVI   STEPHH+2,C':'     SEPARATOR.
         SRDL  R4,32              MOVE REMAINDER OVER FOR DIVIDE.
         D     R4,=F'60'         GET MINUTES.
         CVD   R5,WRKD           CONVERT MINUTES -
         UNPK  STEPMM(2),WRKD+6(2)  - TO PRINTABLE FORMAT.
         OI    STEPMM+1,X'F0'    FIXUP SIGN BYTE.
         MVI   STEPMM+2,C':'     SEPARATOR.
         CVD   R4,WRKD           REMAINDER IS SECONDS.
         UNPK  STEPSS(2),WRKD+6(2)  CONVERT SEC TO PRINTABLE FORMAT.
         OI    STEPSS+1,X'F0'    FIXUP SIGN.
         SPACE 2
*
*   COMPUTE TOTAL CPU TIME USED...
*
CPUSTART LM    R4,R5,ASCBEJST    LOAD ASCBEJST (CPU TASK TIME).
         SRDL  R4,12              CONVERT TO MICRO-SECONDS.
         LM    R6,R7,ASCBSRBT    LOAD ASCBSRBT (CPU SRB TIME).
         SRDL  R6,12              CONVERT TO MICROSECONDS.
         AR    R5,R7             TOTAL CPU TIME (LOW ORDER).
         BNO   CPULBL1           BRANCH IF NO OVERFLOW ON ADD.
         A     R4,=F'1'          OTHERWISE, ADD 1 TO HIGH ORDER.
CPULBL1  AR    R4,R6             TOTAL CPU TIME (HIGH ORDER).
         D     R4,=F'100'        DIVIDE TO GET SECONDS.
         LTR   R5,R5             CHK TO SEE IF ANYTHING IS THERE
         BNM   CPULBL3           BRANCH IF RESULT MAKES SENSE.
         LA    R5,0              OTHERWISE, SET THE VALUE TO ZERO.
CPULBL3  CVD   R5,WRKD           *
         MVC   CPUTIME,=X'20202021204B2020' *
         ED    CPUTIME-1(9),WRKD+3 *
         EJECT
*
***********************************************************************
*
*        SWAP  REASON CODE (R8=ASCB,R7=OUCB,R4-6=WORK)
*
***********************************************************************
         L     R7,ASCBOUCB        GET ADDR OF OUCB
         USING OUCB,R7
SRCSTART SR    R4,R4              PREPARE FOR IC INSTRUCTION.     V2M0
         IC    R4,OUCBSRC         LOAD SU7 SWAP REASON CODE.      V2M0
         SLL   R4,2               MULTIPLY BY FOUR FOR OFFSET     V2M0
         LA    R4,SRCTABLE(R4)    POINT TO CORRECT ENTRY.         V2M0
         MVC   MEMSTAT2,0(R4)     MOVE IN SWAP REASON CODE.       V2M0
SRCEND   DS    0H                 LABEL.
         SPACE 2
***********************************************************************
*
*        FIND  MEMORY POSITION (R8=ASCB,R7=OUCB,R4-6=WORK)
*
***********************************************************************
QLCSTART MVC   MEMSTAT1,=CL2'IN'  DEFAULT POSITION IS SWAPPED-IN. V2M0
         TM    OUCBSFL,OUCBNSW    SEE IF NON-SWAPPABLE MEMORY.    V2M0
         BZ    QLCLBL1C           BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'NS'  MOVE IN NON-SWAPPABLE INDICATIONV2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.
QLCLBL1C TM    OUCBSFL,OUCBPVL    SEE IF PRIVILEDGED STATUS.      V2M0
         BZ    QLCLBL1            BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'PR'  MOVE IN PRIVILEDGED INDICATION. V2M0
*                                 BUT CONTINUE IN CASE SWAPPED-OUT.
QLCLBL1  TM    OUCBQFL,OUCBOFF    TEST FOR WAIT QUEUE.            V2M0
         BZ    QLCLBL2            BRANCH IF NOT.
         MVC   MEMSTAT1,=C'WT'    INDICATE WAIT STATUS.           V2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.       V2M0
QLCLBL2  TM    OUCBQFL,OUCBOUT    TEST FOR OUT QUEUE.             V2M0
         BZ    QLCLBL3            BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'S '  INDICATE OUT STATUS.            V2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.
QLCLBL3  TM    OUCBQFL,X'E0'      CHECK MISCELLANEOUS BITS.       V2M0
         BZ    QLCEND             ASSUME MEMORY IS SWAPPED-IN.
         MVC   MEMSTAT1,=CL2'<>'  INDICATE TRANSITIONING STATUS.
QLCEND   DS    0H                 LABEL.
         SPACE 2
***********************************************************************
*
*        ALLOCATED FRAME COUNT (R8=ASCB,R7=OUCB,R4-6=WORK)
*
***********************************************************************
AFCSTART LH    R4,152(,R8)        LOAD CURRENT ALLOCATED FRAME CNT.
         C     R4,=F'999'         CHECK FOR MAXIMU EXCEEDED.
         BNH   AFCLBL1            BRANCH IF NOT.
         MVC   SIZE(3),=C'***'    INDICATE VALUE TOO LARGE.
         B     AFCEND             EXIT THIS ROUTINE.
AFCLBL1  CVD   R4,WRKD            *
         MVC   SIZE(3),=X'202120' *
         ED    SIZE-1(4),WRKD+6   *
AFCEND   DS    0H                 *
         SPACE 2
***********************************************************************
*
*        WORKING SET SIZE (R8=ASCB,R7=OUCB,R4-6=WORK)
*
***********************************************************************
WSSSTART MVI   WSS+2,C'-'         NULL VALUE.                     V2M0
         TM    OUCBSFL,OUCBNSW    SEE IF NON-SWAPPABLE.           V2M0
         BO    WSSEND             EXIT IF YES.
         LH    R4,OUCBWSS         LOAD WORKING SET AT LAST SWAP.  V2M0
         CVD   R4,WRKD            *
         MVC   WSS(3),=X'202120' *                                V2M0
         ED    WSS-1(4),WRKD+6 *                                  V2M0
WSSEND   DS    0H                 LABEL.
         SPACE 2
         LM    R4,R7,SAVEREGS    RESTORE REGISTERS
         BR    R6                AND RETURN..
         EJECT
*.....................................................................*
*        LOCAL SUBROUTINE FOR IO TO OPER/USER                         *
*.....................................................................*
         SPACE
*
* ENTER WITH WTO,WTOR LIST FORM POINTED TO BY R1
*
*    BAL  LINKREG,PUTMSG    OR
*    BAL  LINKREG,PUTGET
*
*  USES R14 FOR WORK
*
*
PUTMSG   DS    0H
         TM    TSOFLAG,X'80'       IS IT TSO?
         BO    TPUTIT              YES-> GO DO TPUT
         SVC   35                  NO-> USE WTO
         BR    LINKREG
TPUTIT   DS    0H
         LH    R0,0(,R1)           GET LENGTH OF WTO MESSAGE
         S     R0,=F'4'            SUBTRACT OFF HEADER
         LA    R1,4(,R1)           BUMP MSG ADDRESS PAST HDR
         TPUT  (1),(0),R           DO THE TPUT
         BR    LINKREG
         SPACE 2
PUTGET   DS    0H
         TM    TSOFLAG,X'80'       IS IT TSO?
         BO    TSOIT               YES-> GO USE TGET
         LR    R14,R1              NO-> USE WTOR .. SAVE MSG ADDRESS
         SVC   35                  DO THE WTOR...
         L     R1,4(,R14)          GET ADDR OF ECB
         XC    0(4,R1),0(R1)       CLEAN OUT THE ECB....
         LA    R0,1
         SVC   1                   WAIT FOR WTOR TO COMPLETE
         B     PUTRET              RETURN
TSOIT    DS    0H
         LR    R14,R1              SAVE
         LH    R0,8(,R1)           PUT LENGTH
         S     R0,=F'4'
         LA    R1,12(,R1)          PAST HDR
         TPUT  (1),(0),R
         SR    R0,R0
         IC    R0,0(,R14)          GET REPLY LENGTH
         L     R1,0(,R14)          GET REPLY ADRS
         LA    R1,0(,R1)
         ICM   R1,B'1000',=X'80'   INDICATE TGET...
         TGET  (1),(0),R
PUTRET   DS    0H
         L     R1,0(,R14)          GET REPLY ADRS
         XR    R0,R0
         IC    R0,0(,R14)          GET REPLY LENGTH
UPPER    DS    0H
         OI    0(R1),C' '          UPPER CASE
         LA    R1,1(,R1)           NXT
         BCT   R0,UPPER
         BR    LINKREG
         EJECT
*.....................................................................*
*        CONSTANTS                                                    *
*.....................................................................*
         SPACE 2
HEXMASK  DC    X'0F0F0F0F'
HEXTAB   DC    C'0123456789ABCDEF'
SRCTABLE DC    C'    TPUTTGETLONGPGS<RSS<WAITRQSWDENQEXCHSWAP'
*                0...1...2...3...4...5...6...7...8...9...A...
         SPACE 2
**********************************************************************
* SWAP REASON CODES - TWO BYTES PER ENTRY:
*
*      CODE    DESCRIPTION
*      ----    -------------------------------------------------------
*       TPUT   TERMINAL OUTPUT WAIT SWAP-OUT.
*       TGET   TERMINAL INPUT WAIT SWAP-OUT.
*       LONG   LONG WAIT CAUSED SWAP-OUT.
*       PGS<   AUXILIARY STORAGE (PAGING SPACE) SHORTAGE SWAP-OUT.
*       RSS<   REAL STORAGE PAGEABLE POOL SHORTAGE SWAP-OUT.
*       WAIT   MSO DETECTED WAIT SWAP-OUT.
*       RQSW   REQSWAP SYSEVENT CAUSED SWAP-OUT.
*       DENQ   CAP ENQ EXCHANGE SWAP-OUT.
*       EXCH   CAP EXCHANGE SWAP BASED UPON RECOMMENDATION VALUES.
*       SWAP   CAP UNILATERAL SWAP-OUT.
**********************************************************************
         EJECT
*.....................................................................*
*        VARIABLES                                                    *
*.....................................................................*
         SPACE 2
WRKD     DC    D'0'
RMCTPTR  DS    F
SAVEREGS DS    4F
         PRINT OFF
CODE     DC    X'ABCFEDAD'
OLDKEY   DC    F'0'
         PRINT ON
ANSWER   DC    F'0'                ADDRESS POINTER FOR EXTRACT
SWITCH   DC    XL1'00'
TSOFLAG  DC    X'00'               ='80' IF TSO. '00' IF NOT TSO
         EJECT
*.....................................................................*
*        MESSAGES                                                     *
*.....................................................................*
         SPACE 2
GRIPE    WTO   '**NO TIMESHARING USERS ARE ACTIVE**',ROUTCDE=(11),MF=L
*               XXXXXXX XX XXXX XXXX  XXX XXX XXX XX:XX:XX NNNNN.NN
HEADING  WTO   'USERID  STATUS  ASID LINE PGS WSS XACTTIME CPU-SECS ', X
               ROUTCDE=(11),MF=L
MSGWTO   WTO   '123456789.123456789.123456789.123456789.123456789.12345X
               6789.123456789.123',ROUTCDE=(11),MF=L
         ORG   MSGWTO+4
BUFFER   DS    CL73
         ORG
MSG2     WTO   '..XXXXXX TIME SHARING USERS',                          X
               ROUTCDE=(11),MF=L
         ORG   MSG2+6
MSG2USER DS    CL6
         ORG
         EJECT
*.....................................................................*
*        LIST FORMS OF MACROS                                         *
*.....................................................................*
         SPACE 2
EXTRACT  EXTRACT ANSWER,'S',FIELDS=(TSO),MF=L
*
         SPACE 2
DEFER    STAX  DEFER=YES,MF=L
         SPACE 2
NODEFER  STAX  DEFER=NO,MF=L
         EJECT
*.....................................................................*
*        LITERAL POOL                                                 *
*.....................................................................*
         SPACE 2
         LTORG
         EJECT
*.....................................................................*
*        OVERLAY TO PRINT LINE                                        *
*.....................................................................*
         SPACE 2
OVERLAY  DSECT
USERID   DS    CL8
MEMSTAT1 DS    CL2                MEMORY STATUS
         DS    CL1
MEMSTAT2 DS    CL4                MEMORY SWAP REASON CODE
         DS    CL1
ASID     DS    CL4                ADDRESS SPACE ID
         DS    CL1
LDASH    DS    CL1
UNIT     DS    CL3                LINE #
RDASH    DS    CL1
SIZE     DS    CL3                CURRENT SIZE
         DS    CL1
WSS      DS    CL3                WORKING SET SIZE
         DS    CL1
STEPHH   DS    CL2                FOR STEP TIME HH:MM:SS
         DS    CL1
STEPMM   DS    CL2
         DS    CL1
STEPSS   DS    CL2
         DS    CL1
CPUTIME  DS    CL8                FOR CPUTIME NNNNN.NN SECONDS
         DS    CL1
OVERLEN  EQU   *-OVERLAY
ENTRYSIZ EQU   OVERLEN+1  SIZE OF EACH ENTRY (MUST BE > L'OVERLAY)
         SPACE 2
TSO025AS CSECT
#ENTRYS  EQU 1           .. MUST BE SAME...
         DS  0H
#ENTH    DC  AL2(#ENTRYS)
         EJECT
CVT      DSECT
         CVT   SYS=VMS,TSO=YES
         EJECT
         IHAASVT
         EJECT
         IHAASCB
         EJECT
CSCB     DSECT
         IEECHAIN
         EJECT
BIT0     EQU   128
BIT1     EQU   64
BIT2     EQU   32
BIT3     EQU   16
BIT4     EQU   8
BIT5     EQU   4
BIT6     EQU   2
BIT7     EQU   1
OUCB     DSECT
OUCBNAME DC    C'OUCB' -           BLOCK IDENTIFICATION
OUCBFWD  DC    A(OUCB) -           SWAP CHAIN FORWARD POINTER
OUCBBCK  DC    A(OUCB) -           SWAP CHAIN BCKWARD POINTER
OUCBTMA  DC    F'0' -              TIME OF LAST ANALYSYS      @Z40BPCH
OUCBQFL  DC    B'00100000' -       SWAPPABILITY TRANSITION FLAGS
OUCBGOO  EQU   BIT0 -              TRANSITIONING OUT OF CORE
OUCBGOI  EQU   BIT1 -              TRANSITIONING INTO CORE
OUCBGOB  EQU   BIT2 -              TRANSITIONING BETWEEN STATES
OUCBOFF  EQU   BIT4 -              REQUESTING ENTER WAIT STATE
OUCBOUT  EQU   BIT5 -              REQUESTING ENTER OUT STATE
OUCBSFL  DC    B'10010100' -       SWAPOUT CONTINUATION FLAGS
OUCBNSW  EQU   BIT0 -              NON-SWAPPABLE STATUS
OUCBCTI  EQU   BIT1 -              CTL INHIBITS QUIESCE
OUCBBIB  EQU   BIT2 -              BRING IN FOR CANCEL         @Z40BPCH
OUCBINV  EQU   BIT3 -              =1 IF OUCB IS INVALID       @Z40BPCH
OUCBPVL  EQU   BIT5 -              PRIVILEGED PROGRAM RUNNING
OUCBENQ  EQU   BIT6 -              ENQ RESIDENT STATUS
OUCBSCN  EQU   BIT7 -              SWAP CHAIN TERMINATION MARK
OUCBYFL  DC    B'00000000' -       USER TYPE FLAGS
OUCBPSTE EQU   BIT0 -              POST ERROR @ZA07127
OUCBSTT  EQU   BIT1 -              START CREATED USER
OUCBLOG  EQU   BIT2 -              LOGON CREATED USER
OUCBMNT  EQU   BIT3 -              MOUNT CREATED USER
OUCBR01  EQU   BIT4 -              RESERVED                    @ZM43085
OUCBAXS  EQU   BIT5 -              AUX SHORTAGE FORCED SWAP
OUCBDTA  EQU   BIT6 -              DATA ACCUMULATION IMPACTED
OUCBFXS  EQU   BIT7 -              FIXED STORAGE FORCED SWAP   @Z40BPCH
OUCBAFL  DC    B'00000000' -       ALGORITHM STATUS FLAGS
OUCBAPG  EQU   BIT1 -              APG ALGORITHM APPLICABLE
OUCBRMA  EQU   BIT2 -              RMA ALGORITHM APPLICABLE
OUCBCPL  EQU   BIT3 -              SIGNIFICANT CPU USER FLAG
OUCBJSR  EQU   BIT4 -              JOBSELECT RECEIVED          @Z40BPCH
OUCBR02  EQU   BIT5 -              RESERVED                   @ZM43085
OUCBNWT  EQU   BIT6 -              MSO DETECTED NONSWAPPABLE WAIT
OUCBASW  EQU   BIT7 -              AUTHORIZED FOR DONTSWAP
OUCBTFL  DC    B'00000000' -       TRANSACTION STATUS FLAGS
OUCBATR  EQU   BIT0 -              TRANSACTION IN EXISTENCE
OUCBSTR  EQU   BIT1 -              TRANSACTION START PENDING
OUCBNTR  EQU   BIT2 -              TRANSACTION STOP PENDING
OUCBRTR  EQU   BIT3 -              TRANSACTION RESUME PENDING
OUCBPCH  EQU   BIT4 -              PERF GRP PERIOD CHANGE PENDING
OUCBMAR  EQU   BIT5 -              ACTIVITY RECORDING SUBTRACT FLAG
OUCBINP  EQU   BIT6 -              INITIATOR ATTACH PENDING
OUCBINC  EQU   BIT7 -              INITIATOR ATTACH CURRENT
OUCBEFL  DC    B'00000000' -       EVENT STATUS FLAGS
OUCBLWT  EQU   BIT0 -              LONG WAIT STATUS
OUCBTRM  EQU   BIT1 -              TERMINAL WAIT STATUS
OUCBOWT  EQU   BIT2 -              OUTPUT TERMINAL WAIT
OUCBCIM  EQU   BIT3 -              COMPOSITE INPUT MESSAGE
OUCBNQF  EQU   BIT4 -              ENQHOLD EVENT PROCESSED
OUCBQSS  EQU   BIT5 -              QSCEST  EVENT PROCESSED
OUCBQSC  EQU   BIT6 -              QSCECMP EVENT PROCESSED
OUCBMWT  EQU   BIT7 -              MSO DETECTED WAIT STATUS
OUCBNQC  DC    HL1'0' -            NO. OF OUTSTANDING ENQHOLDS
OUCBUFL  DC    B'00000000' -       USER TYPE FLAGS             @ZM43072
OUCBJSFS EQU   BIT0 -              JOB SELECT DELAYED          @ZM43072
OUCBJSAS EQU   BIT1 -              JOB SELECT DELAYED          @ZM43072
OUCBNPG  DC    HL1'0' -            NEW PERFORMANCE GROUP NUMBER
OUCBRPG  DC    HL1'0' -            RESET PERFORMANCE GROUP NUMBER
OUCBNDP  DC    HL1'0' -            NEW ASCB DISPATCHING PRIORITY
OUCBRDP  DC    HL1'0' -            REAL DISPATCHING PRIORITY   @Z40BPCH
OUCBSPG  DC    HL1'0' -            SPECIFIED PERFORMANCE GROUP @Z40BPCH
OUCBR20  DC    HL1'0' -            RESERVED                    @Z40BPEB
OUCBR40  DC    HL1'0' -            RESERVED                    @Z40BPEB
OUCBPGP  DC    HL1'12' -           CURRENT WPGP OFFSET IN WPGD
OUCBWMG  DC    H'0' -              WPGD OFFSET IN WPGD TABLE
OUCBDMO  DC    H'0' -              OFFSET INTO DOMAIN TABLE    @Z40BPCH
OUCBDMN  DC    HL1'0'              DOMAIN NUMBER               @Z40BPCH
OUCBSRC  DC    HL1'0'              SWAP OUT REASON CODE        @Z40BPCH
OUCBSWC  DC    H'0' -              TRANSACTION SWAP COUNT
OUCBASCB DC    A(0) -              ASCB ADDRESS
OUCBIMCB DC    A(0) -              IMCB ADDRESS
OUCBTMW  DC    F'0' -              WLM INTERVAL START TIME
OUCBWMS  DC    F'0' -              INTERVAL SERVICE ACCUMULATOR
OUCBCPU  DC    F'0' -              INTERVAL CPU SERVICE ACCUM  @Z40BPCH
OUCBIOC  DC    F'0' -              INTERVAL I/O SERVICE ACCUM  @Z40BPCH
OUCBMSO  DC    F'0' -              INTERVAL MSO SERVICE ACCUM  @Z40BPCH
OUCBTMS  DC    F'0' -              TIME OF LAST SWAP ACTION
OUCBTMO  DC    F'0' -              TRANSACTION START TIME
OUCBPSO  DC    H'0' -              PAGES SWAPPED AT LAST SWAP-OUT
OUCBWSS  DC    H'0' -              WORKING SET SIZE AT SWAP-IN
OUCBACT  DC    A(0) -              ACTION QUEUE FORWARD POINTER
OUCBCSW  DS    0F -                COMPARE AND SWAP FIELD NAME
OUCBACN  DC    2B'00000000' -      DEFERRED ACTION FLAGS
OUCBCFL  DC    B'00000000' -       MULTIPROCESS CONDITION FLAGS
OUCBRDY  EQU   BIT0 -              USERRDY EVENT RECEIVED
OUCBRSM  EQU   BIT1 -              RSM SERVICE OUTSTANDING
OUCBCMRV DC    F'0' -              COMPOSITE RECOM VALUE       @Z40BPCH
OUCBWMR  DC    F'0' -              WLM RECOMMENDATION VALUE    @Z40BPCH
OUCBIRV  DC    H'0' -              IOM RECOMMENDATION VALUE    @Z40BPCH
OUCBCRV  DC    H'0' -              CPM RECOMMENDATION VALUE    @Z40BPCH
OUCBIOR  DC    H'0' -              I/O USAGE PROFILE
OUCBR03  DC    H'0' -              RESERVED                    @ZM43085
OUCBTMP  DC    F'0' -              PERF GRP PERIOD STARTING TIME
OUCBR04  DC    H'0' -              RESERVED                    @ZM43085
OUCBR05  DC    H'0' -              RESERVED                    @ZM43085
OUCBPSS  DC    D'0' -              CPU PAGE SECONDS            @Z40BPCH
OUCBPS1  EQU   OUCBPSS -           HIGH WORD PAGE SECONDS      @Z40BPCH
OUCBPS2  EQU   OUCBPSS+4 -         LOW  WORD PAGE SECONDS      @Z40BPCH
OUCBPST  DC    F'0' -              TIME OF LAST WORKING SET CHANGE
*                                                              @Z40BPCH
OUCBTCP  DC    F'0' -              TIME OF CPU USAGE EVALUATION
*                                                              @Z40BPCH
OUCBTIO  DC    F'0' -              TIME OF I/O USAGE EVALUATION
*                                                              @Z40BPCH
OUCBNDS  DC    H'1' -              NUM OUTSTANDING DONTSWAPS   @Z40BPEB
OUCBR90  DC    H'0' -              RESERVED                    @Z40BPEB
OUCBEND  DS    0D -                END OF OUCB
OUCBLEN  EQU   OUCBEND-OUCB -      LENGTH OF OUCB
         END
