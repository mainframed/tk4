++ USERMOD(L#FM114) REWORK(1999147)
/*
*
*     Elements:    SYSTEM / IPL Command
*
*     Purpose:     Provide System Information
*
*     Reference:   None
*
*     Environment: Zone:  MVS01T   Product:  RTS Inhouse Code
*
*     WARNING:     None
*
*     Writer:      Paul Gillis
*
*     Date:       11/09/97
*
*     Change       Date      Inits  Description
*     History:     ========  =====  ===========
*
*                  11/09/97  PGG    new version of the code
*                  25/08/98  PGG    Fix date conversion error
*                  27/05/99  PGG    Re Write of cmd to include symbols
*
*/ .
++VER(Z038) FMID(LBASE01) SUP(L#FM106).
++JCLIN.
//LINK1  EXEC   PGM=HEWL,PARM='LIST,XREF,MAP'
//SYSPRINT  DD SYSOUT=A
//AUSERMOD  DD DSN=SYS1.AUSERMOD,DISP=SHR
//SYSLMOD   DD DSN=MVS01T.LINKLIB,DISP=SHR
//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSLIN    DD *
 INCLUDE AUSERMOD(SYSTEM)
 ALIAS IPL
 NAME SYSTEM(R)
++PNL (SYSTEM) DISTLIB(AUSERSRC) SYSLIB(ISRPLIB).
)ATTR
  @ TYPE(OUTPUT) INTENS(LOW) JUST(ASIS) CAPS(OFF)
  $ TYPE(OUTPUT) INTENS(HIGH) JUST(ASIS) CAPS(OFF)
 01 TYPE(OUTPUT) INTENS(HIGH) JUST(ASIS) CAPS(OFF)
  _ TYPE(INPUT)
  ! TYPE(INPUT) CAPS(OFF)
)BODY EXPAND(\\)
%-\-\- System IPL Details on &ZSYSID-\-\-
%COMMAND ===>_ZCMD                                      \ \   %SCROLL ==
+
-\-\-
)MODEL
@SYSTEM
)END
++SRC (SYSTEM) DISTLIB(AUSERSRC) DISTMOD(AUSERMOD).
SYSTEM   TITLE 'SYSTEM - DISPLAY IPL DETAILS.'
*---------------------------------------------------------------------*
*                                                                     *
* Module Name:          SYSTEM                                        *
*                                                                     *
* Operating System:     OS/390 V2R4                                   *
*                                                                     *
* Function:             Display IPL Details                           *
*                                                                     *
* Module Type:          Procedure                                     *
*                                                                     *
* Language:             Assembler                                     *
*                                                                     *
* Attributes:           Key 8                                         *
*                       Problem State                                 *
*                       Not Re-entrant                                *
*                       AMODE(31)                                     *
*                       RMODE(24)                                     *
*                       BAKR/PR                                       *
*                                                                     *
* Entry point:          SYSTEM                                        *
*                                                                     *
* Input:                None                                          *
*                                                                     *
* Exit:                 Normal                                        *
*                                                                     *
* Return codes:         Zero                                          *
*                                                                     *
* Abend codes:          None                                          *
*                                                                     *
* Author:               Paul Gillis, P. C. Link Pty. Ltd.             *
*                                                                     *
* Change activity:                                                    *
*                                                                     *
*        26/05/1999     Savagely rewritten the original code          *
*                                                                     *
*---------------------------------------------------------------------*
                                       SPACE 1
SYSTEM   CSECT
SYSTEM   AMODE 31
SYSTEM   RMODE 24
         BAKR  R14,0
         LAE   R12,0(R15,0)            Set up Base Reg (GR and AR)
         USING SYSTEM,R12
         B     SKIPEYE                 ===> Skip the Eyeball
         DC    C'SYSTEM &SYSDATC &SYSTIME'
SKIPEYE  DS    0H
                                       SPACE 1
*---------------------------------------------------------------------*
*        Initialisation                                               *
*---------------------------------------------------------------------*
                                       SPACE 1
         LR    R1,R13                  SAVE SAVEAREA POINTER.
         LA    R13,SAVEAREA            POINT TO MY SAVEAREA.
         ST    R1,4(R13)               SAVE PREVIOUS SAVEAREA.
         ST    R13,8(R1)               SAVE CURRENT SAVEAREA.
                                       SPACE 1
         LINK  EPLOC=ISPQRY            AM I RUNNING UNDER ISPF
         LTR   R15,R15                 CHECK THE ISPQRY RETURN CODE
         BNZ   SKIPISPF                ---> NO, TRY SYSUT2
                                       SPACE 1
*---------------------------------------------------------------------*
*        Initialise the ISPLINK environment                           *
*---------------------------------------------------------------------*
                                       SPACE 1
         OI    GENFLAG,GENSPF          INDICATE SPF PROCESSING REQD.
         LOAD  EPLOC=ISPLINK           LOAD ISPLINK.
         ST    R0,EPLOC                SAVE ADDRESS OF THE ROUTINE.
         L     R15,EPLOC               A(ISLINK)
         CALL  (15),(VDEFINE,CSYSTEM,RECORD,CHAR,F79),VL
         L     R15,EPLOC               A(ISLINK)
         CALL  (15),(TBCREATE,SYSTABLE,0,CSYSTEM,NOWRITE),VL
         B     B011                    SKIP THE OPEN CODE
                                       SPACE 1
*---------------------------------------------------------------------*
*        Check on and optionally open the SYSUT2 DD                   *
*---------------------------------------------------------------------*
                                       SPACE 1
SKIPISPF DS    0H
         MVC   DDNAME,=CL8'SYSUT2'     LOOK FOR THIS DDNAME
         BAL   R10,FINDTIOT            SEE IF I HAVE IT ALLOCATED
         TM    GENFLAG,GENSYSUT        SYSUT2 DD PRESENT
         BZ    B011                    ---> NO
         OI    GENFLAG,GENDCB          INDICATE DCB PROCESSING REQD.
         OPEN  (SYSUT2,(OUTPUT)),MODE=31
                                       SPACE 1
*---------------------------------------------------------------------*
*        Extract and Output -- System Id                              *
*---------------------------------------------------------------------*
                                       SPACE 1
B011     DS    0H
         L     R5,CVTPTR               GET THE CVT ADDRESS
         S     R5,=F'256'              R5 --> CVTFIX.
         USING CVTFIX,R5
         MVC   RECORD(L'L00),L00       'Put in the Constants
         MVC   SYSTEMID,CVTSNAME       GET THE SYSTEM ID
         BAL   R10,OUTPUT              Output the variable/record
                                       SPACE 1
*---------------------------------------------------------------------*
*        Extract and Output -- IPL date and time                      *
*---------------------------------------------------------------------*
                                       SPACE 1
         MVC   RECORD(L'L01),L01       'Put in the Constants
         L     R6,CVTSMCA              GET ADDRESS OF COMMON EXTENSION.
         USING SMCABASE,R6             MAP IT.
         MVC   DATE,SMCAIDTE           Save the date
         MVC   TIME,SMCAITME           Save the time
         BAL   R10,DATETIME            Process the date and time
         BAL   R10,OUTPUT              Output the variable/record
         DROP  R6
                                       SPACE 1
*---------------------------------------------------------------------*
*        Extract and Output -- Current date and time                  *
*---------------------------------------------------------------------*
                                       SPACE 1
         MVC   RECORD(L'L01C),L01C     'Put in the Constants
         TIME  BIN                     Extract The current time
         STM   R0,R1,TIME              Save the date
         BAL   R10,DATETIME            Process the date and time
         BAL   R10,OUTPUT              Output the variable/record
                                       SPACE 1
*---------------------------------------------------------------------*
*        Extract and Output -- Operating System Level                 *
*---------------------------------------------------------------------*
                                       SPACE 1
         MVC   RECORD(L'L02),L02       'Put in the Constants
         MVC   SPLEVEL,CVTPRODN        GET CONTROL PROGRAM NAME.
         BAL   R10,OUTPUT              Output the variable/record
                                       SPACE 1
*---------------------------------------------------------------------*
*        Extract and Output -- IPL Load parms                         *
*---------------------------------------------------------------------*
                                       SPACE 1
         MVC   RECORD(L'L03),L03       'Put in the Constants
         L     R6,CVTECVT              GET ADDRESS OF EXTENDED CVT
         USING ECVT,R6                 MAP IT.
         MVC   IPLPARM,ECVTLOAD        GET IPL PARAMETERS
         BAL   R10,OUTPUT              Output the variable/record
         DROP  R6
                                       SPACE 1
*---------------------------------------------------------------------*
*        Extract and Output -- Private Storage below the Line         *
*---------------------------------------------------------------------*
                                       SPACE 1
         MVC   RECORD(L'L04),L04       'Put in the Constants
         L     R6,CVTGDA               GET ADDRESS OF GLOBAL DATA AREA
         USING GDA,R6                  MAP IT.
         L     R1,GDAPVTSZ             GET PRIVATE STORAGE SIZE
         SRL   R1,10                   DIVIDE BY 1024
         CVD   R1,DB                   CONVERT TO DECIMAL
         UNPK  PVTSIZE,DB+5(3)         CONVERT TO EBCDIC
         OI    PVTSIZE+4,X'F0'         AND MAKE THE SIGN PRINTABLE
         MVI   K,C'K'                  Insert the constant K
         BAL   R10,OUTPUT              Output the variable/record
         DROP  R6
                                       SPACE 1
*---------------------------------------------------------------------*
*        Extract and Output -- Nucleus Id                             *
*---------------------------------------------------------------------*
                                       SPACE 1
         MVC   RECORD(L'L05),L05       'Put in the Constants
         L     R6,CVTEXT2              GET ADDRESS OF COMMON EXTENSION.
         USING CVTXTNT2,R6
         MVC   NUCLEUS,=C'IEANUC0'     Insert the Nucleus constant
         MVC   NUCID,CVTNUCLS          Nucleus Id
         BAL   R10,OUTPUT              Output the variable/record
         DROP  R6
                                       SPACE 1
*---------------------------------------------------------------------*
*        Extract and Output -- SMF Id                                 *
*---------------------------------------------------------------------*
                                       SPACE 1
         MVC   RECORD(L'L06),L06       'Put in the Constants
         L     R6,CVTSMCA              GET ADDRESS OF COMMON EXTENSION.
         USING SMCABASE,R6             MAP IT.
         MVC   SMFID,SMCASID           GET SMF SYSTEM ID.
         BAL   R10,OUTPUT              Output the variable/record
         DROP  R6
                                       SPACE 1
*---------------------------------------------------------------------*
*        Extract and Output -- CPU Id                                 *
*---------------------------------------------------------------------*
                                       SPACE 1
         MVC   RECORD(L'L14),L14       'Put in the Constants
         L     R6,PSAPCCAV-PSA(R0)     GET ADDRESS OF PCCA.
         USING PCCA,R6                 MAP IT.
         MVC   CPUCODE,PCCACPID+0      GET CPU CODE.
         MVC   CPULPAR,PCCACPID+2      GET CPU LPAR.
         MVC   CPUID,PCCACPID+4        GET CPU ID.
         MVC   CPUTYPE,PCCACPID+8      GET CPU TYPE.
         MVI   DASH1,C'-'              insert a dash
         MVI   DASH2,C'-'              insert a dash
         MVI   DASH3,C'-'              insert a dash
         BAL   R10,OUTPUT              Output the variable/record
         DROP  R6
                                       SPACE 1
*---------------------------------------------------------------------*
*        Extract and Output -- Master Catalog Name                    *
*---------------------------------------------------------------------*
                                       SPACE 1
         MVC   RECORD(L'L08),L08       'Put in the Constants
         L     R6,CVTCBSP              GET ADDRESS OF ACB STRUCTURE.
         L     R7,20(R6)               GET ADDRESS OF CAXWA CHAIN.
B090     LTR   R7,R7                   IS IT VALID ?
         BZ    B101                    * NO, BYPASS.
         TM    8(R7),X'04'             IS IT THE MASTER CATALOG ?
         BO    B100                    * YES, BYPASS.
         L     R7,4(R7)                GET NEXT CATALOG ENTRY.
         B     B090                    GO CHECK IF VALID.
B100     MVC   CATNAME,52(R7)          GET MASTER CATALOG NAME.
         BAL   R10,OUTPUT              Output the variable/record
B101     DS    0H
                                       SPACE 1
*---------------------------------------------------------------------*
*        Extract and Output -- Master Catalog Volser and Unit address *
*---------------------------------------------------------------------*
                                       SPACE 1
         MVC   RECORD(L'L10),L10       'Put in the Constants
         MVC   DSN,52(R7)              *
         BAL   R10,DYNALLOC            ALLOCATE THE MASTER CATALOG
         USING UCBCMSEG,R14
         MVC   VOLSER,UCBVOLI
         UNPK  UNIT(5),UCBCHAN(3)      GET THE 4 DIGIT DEVICE ADDRESS
         TR    UNIT(4),TRTABLE-240     CONVERT TO EBCDIC
         MVC   ON,=C'on'               Insert a nice constant
         MVI   BLANK2,C' '             AND CLEAR THE SIGN BYTE
         BAL   R10,DYNFREE             FREE THE MASTER CATALOG
         BAL   R10,OUTPUT              Output the variable/record
         DROP  R14
                                       SPACE 1
*---------------------------------------------------------------------*
*        Extract and Output -- IPL Volser and Unit address            *
*---------------------------------------------------------------------*
                                       SPACE 1
         MVC   RECORD(L'L09),L09       'Put in the Constants
         L     R6,CVTSYSAD             GET ADDRESS OF SYSRES UCB.
         USING UCBCMSEG,R6             MAP IT.
         MVC   VOLSER,UCBVOLI          GET IPL VOLUME NAME.
         UNPK  UNIT(5),UCBCHAN(3)      GET THE 4 DIGIT DEVICE ADDRESS
         TR    UNIT(4),TRTABLE-240     CONVERT TO EBCDIC
         MVC   ON,=C'on'               Insert a nice constant
         MVI   BLANK2,C' '             AND CLEAR THE SIGN BYTE
         BAL   R10,OUTPUT              Output the variable/record
         DROP  R6
                                       SPACE 1
*---------------------------------------------------------------------*
*        Extract and Output -- NSP Volser and Unit address            *
*---------------------------------------------------------------------*
                                       SPACE 1
         MVC   RECORD(L'L11),L11       'Put in the Constants
         MVC   DSN,=CL44'SYS2.NSP.LOADLIB'
         BAL   R10,DYNALLOC            ALLOCATE THE MASTER CATALOG
         USING UCBCMSEG,R14
         MVC   VOLSER,UCBVOLI
         UNPK  UNIT(5),UCBCHAN(3)      GET THE 4 DIGIT DEVICE ADDRESS
         TR    UNIT(4),TRTABLE-240     CONVERT TO EBCDIC
         MVC   ON,=C'on'               Insert a nice constant
         MVI   BLANK2,C' '             AND CLEAR THE SIGN BYTE
         BAL   R10,DYNFREE             FREE THE MASTER CATALOG
         BAL   R10,OUTPUT              Output the variable/record
         DROP  R14
                                       SPACE 1
*---------------------------------------------------------------------*
*        Extract and Output -- PARMLIB Volser and Unit address        *
*---------------------------------------------------------------------*
                                       SPACE 1
         MVC   RECORD(L'L15),L15       'Put in the Constants
         MVC   DSN,=CL44'SYS1.PARMLIB'
         BAL   R10,DYNALLOC            Allocate parmlib
         USING UCBCMSEG,R14
         MVC   VOLSER,UCBVOLI
         UNPK  UNIT(5),UCBCHAN(3)      GET THE 4 DIGIT DEVICE ADDRESS
         TR    UNIT(4),TRTABLE-240     CONVERT TO EBCDIC
         MVC   ON,=C'on'               Insert a nice constant
         MVI   BLANK2,C' '             AND CLEAR THE SIGN BYTE
         BAL   R10,DYNFREE             Free parmlib
         BAL   R10,OUTPUT              Output the variable/record
         DROP  R14
                                       SPACE 1
*---------------------------------------------------------------------*
*        Extract and Output -- System Symbol Variables                *
*---------------------------------------------------------------------*
                                       SPACE 1
         MVC   RECORD(L'NAME00),NAME00 'Put in the Constants
         BAL   R10,OUTPUT              Output the variable/record
                                       SPACE 1
         L     R3,CVTECVT              A(ECVT)
         USING ECVT,R3
         L     R4,ECVTSYMT             A(SYMT)
                                       SPACE 1
         LH    R5,2(R4)                Number of entries in the list
         LA    R4,4(R4)                Start of the list
         LR    R3,R4                   Save it for increments
LOOP1    DS    0H
         LM    R6,R9,0(R3)             load the values
         AR    R6,R4                   Set the address
         AR    R8,R4                   Set the address
         BCTR  R7,0                    Less one for the EXd MVC
         EX    R7,MVCNAME              Move the variable name
         LTR   R9,R9                   Is there a value
         BZ    LOOP2                   ===> No, skip the value move
         BCTR  R9,0                    Less on for the EXd MVC
         EX    R9,MVCVAR               Move the variable value
LOOP2    DS    0H
         BAL   R10,OUTPUT              Output the variable/record
         LA    R3,16(R3)               Increment the base
         BCT   R5,LOOP1                ===> loop through the entries
                                       SPACE 1
*---------------------------------------------------------------------*
*        Program termination                                          *
*---------------------------------------------------------------------*
                                       SPACE 1
         TM    GENFLAG,GENSPF          SPF OPTION SPECIFIED ?
         BZ    R010                    ---> No, Finished
         L     R15,EPLOC               A(ISLINK)
         CALL  (15),(TBTOP,SYSTABLE),VL
         L     R15,EPLOC               A(ISLINK)
         CALL  (15),(TBDISPL,SYSTABLE,SYSTABLE),VL
         L     R15,EPLOC               A(ISLINK)
         CALL  (15),(TBEND,SYSTABLE),VL
                                       SPACE 1
*---------------------------------------------------------------------*
*        Close up and return to caller                                *
*---------------------------------------------------------------------*
                                       SPACE 1
R010     DS    0H
         TM    GENFLAG,GENDCB          WAS DCB PROCESSING REQD.
         BZ    R020                    ---> No, Finished
         CLOSE SYSUT2,MODE=31
R020     DS    0H
         XR    R15,R15                 Zero the RC
         PR    ,                       Return to Caller
         DROP  R5
                                       SPACE 1
*---------------------------------------------------------------------*
*        Dynamic Deallocation Subroutine                              *
*---------------------------------------------------------------------*
                                       SPACE 1
DYNFREE  DS    0H
         LA    R9,SVC99RB              ADDRESS THE SVC RB
         USING S99RB,R9
         XC    SVC99RB,SVC99RB         ZERO THE RB
         MVI   S99RBLN,RBLEN           INSERT THE RB LENGTH
         MVI   S99VERB,S99VRBUN        I WANT DE-ALLOCATION
         LA    R1,TUFREE               GET TEXT UNIT POINTER ADDRESS
         ST    R1,S99TXTPP             INSERT THAT INTO THE RB
         LA    R1,SVC99RBP             SET UP SVC 99
         DYNALLOC                      AND CALL IT
         BR    R10                     ===> RETURN TO CALLER
         DROP  R9                      ===> RETURN TO CALLER
                                       SPACE 1
*---------------------------------------------------------------------*
*        Dynamic Allocation Subroutine                                *
*---------------------------------------------------------------------*
                                       SPACE 1
DYNALLOC DS    0H
         XC    SVC99RB,SVC99RB         ZERO THE RB
         LA    R9,SVC99RB              ADDRESS THE SVC RB
         USING S99RB,R9
         MVI   S99RBLN,RBLEN           INSERT THE RB LENGTH
         MVI   S99VERB,S99VRBAL        I WANT DE-ALLOCATION
         LA    R1,TUALLOC              GET TEXT UNIT POINTER ADDRESS
         ST    R1,S99TXTPP             INSERT THAT INTO THE RB
         LA    R1,SVC99RBP             SET UP SVC 99
         DYNALLOC                      AND CALL IT
         DROP  R9
                                       SPACE 1
*---------------------------------------------------------------------*
*        TIOT scan routine - look for allocated ddname                *
*---------------------------------------------------------------------*
                                       SPACE 1
FINDTIOT DS    0H
         SR    R14,R14                 ZERO THE JFCB LENGTH REG
         L     R15,CVTPTR              GET THE CVT ADDRESS
         S     R15,=F'256'             R15 --> CVTFIX.
         USING CVTFIX,R15
         L     R15,CVTTCBP             GET THE TCB WORDS
         L     R15,4(0,R15)            GET THE CURRENT TCB
         USING TCB,R15
         L     R15,TCBTIO              GET THE ADDRESS OF THE TIOT
         USING TIOT,R15
         LA    R15,TIOENTRY            ADDRESS THE FIRST DD ENTRY
         DROP  R15
         USING TIOENTRY,R15
         SR    R1,R1                   ZERO THE TIOT LENGTH REG
LOOPTIOT DS    0H
         ICM   R1,1,TIOELNGH           INSERT THE LENGTH OF THE TIOTE
         BZ    ENDTIOT                 ===> END OF DD ENTRIES
         TM    TIOESTTA,TIOSLTYP       IS THIS ENTRY IN USE
         BO    BUMPTIOT                ===> NO, IGNORE IT
         CLC   TIOEDDNM,DDNAME         FOUND THE DDNAME
         BE    FOUNDDDN                ===> YES, TURN ON A FLAG
                                       SPACE 1
BUMPTIOT DS    0H
         AR    R15,R1                  NEXT TIOT ENTRY
         B     LOOPTIOT                ===> LETS CHECK THIS ONE OUT
                                       SPACE 1
FOUNDDDN DS    0H
         ICM   R14,7,TIOEFSRT          GET THE UCB ADDRESS
         CLC   =CL8'SYSUT2',DDNAME     IS THIS THE SYSUT2 DD
         BNE   ENDTIOT                 ---> NO, TERMINATE REQUEST
         OI    GENFLAG,GENSYSUT        INDICATE I HAVE FOUND IT
ENDTIOT  DS    0H
         BR    R10                     RETURN TO CALLER
                                       SPACE 1
*---------------------------------------------------------------------*
*        Output Routine                                               *
*---------------------------------------------------------------------*
                                       SPACE 1
OUTPUT   DS    0H
         TM    GENFLAG,GENSPF          SPF option
         BO    OUTPUTI                 ===> Yes, Call ISPLINK
         TM    GENFLAG,GENDCB          DCB option
         BO    OUTPUTP                 ===> Yes, issue PUT
         LA    R0,L'RECORD             'Length of Record
         LA    R1,RECORD               Address of Record
         TPUT  (1),(0)                 tell the user
         B     OUTPUTX                 ===> return
OUTPUTI  DS    0H
         L     R15,EPLOC               A(ISLINK)
         CALL  (15),(TBADD,SYSTABLE),VL
         B     OUTPUTX                 ===> return
OUTPUTP  DS    0H
         PUT   SYSUT2,RECORD           Output the data
OUTPUTX  DS    0H
         MVC   RECORD,BLANK            Clear the Workarea
         MVI   EQUALS,C'='             Stick in the equals sign
         BR    R10                     ===> return
                                       SPACE 1
*---------------------------------------------------------------------*
*        Subroutine to format the date and time                       *
*---------------------------------------------------------------------*
                                       SPACE 1
DATETIME DS    0H
         XR    R0,R0                   CLEAR WORK REGISTER.
         XR    R2,R2                   *
         L     R1,TIME                 GET IPL TIME.
         D     R0,=A(60*60*100)        CALCULATE HOURS.
         CVD   R1,DOUBLE               CONVERT TO DECIMAL.
         L     R2,DOUBLE+4             R2 = 00000HH+.
         SRL   R2,4                    R2 = 000000HH.
         SLL   R2,12                   R2 = 000HH000.
         SRDL  R0,32                   SET UP FOR DIVIDE.
         D     R0,=A(60*100)           CALCULATE MINUTES.
         CVD   R1,DOUBLE               CONVERT TO DECIMAL.
         A     R2,DOUBLE+4             R2 = 000HHMM+.
         ST    R2,SAVETIME             SAVE RESOLVED IPL TIME.
         L     R0,DATE                 GET IPL DATE - YYDDD+.
         SRDL  R0,16                   R0 = YY
         STH   R0,YEAR                 SAVE IT.
         SRL   R1,16                   R1 = DDD+
         LA    R3,19                   SET LEAP YEAR MASK.
         NR    R3,R0                   TEST FOR LEAP YEAR IN EVEN DEC ?
         BZ    B020                    * YES, BYPASS.
         X     R3,=F'18'               R3 = 0 IF LEAP YEAR IN ODD DEC.
B020     LR    R4,R0                   SAVE YEAR, R4 = 000000YY
         XC    DOUBLE,DOUBLE           CLEAR WORKAREA.
         ST    R1,DOUBLE+4             STORE DAYSPMON FOR CONVERSION.
         CVB   R2,DOUBLE               CONVERT DDD+ TO BINARY.
         XR    R1,R1                   CLEAR MONTH COUNTER.
B030     LA    R1,1(R1)                INCREMENT MONTH COUNTER.
         CH    R1,=H'3'                IS IT MARCH ?
         BNE   B040                    * NO BYPASS.
         LTR   R3,R3                   IS IT LEAP YEAR ?
         BNZ   B040                    * NO, BYPASS.
         BCTR  R2,0                    * ELSE, REDUCE DAYS BY 1.
B040     XR    R0,R0                   CLEAN THE REGISTER
         IC    R0,DAYSPMON-1(R1)       GET NO OF DAYS FOR THIS MONTH.
         SR    R2,R0                   MONTH RESOLVED ?
         BP    B030                    * NO, KEEP TRYING.
         AR    R2,R0                   * ELSE, REVERSE LAST SUBTRACT.
         BP    B050                    BYPASS.
         LA    R2,29                   MAKE IT 29TH FEB IF NECESSARY.
         BCTR  R1,0                    SUBTRACT 1 FROM MONTHS COUNTER.
B050     STH   R2,BDAY                 SAVE DAY.
         STH   R1,BMONTH               SAVE MONTH.
         CVD   R1,DOUBLE               CONVERT MONTH.
         L     R1,DOUBLE+4             R1 = 00000MM+.
         SRL   R1,4                    R1 = 000000MM.
         SLL   R1,8                    R1 = 0000MM00.
         AR    R4,R1                   R4 = 0000MMYY.
         CVD   R2,DOUBLE               CONVERT DAY.
         L     R2,DOUBLE+4             R2 = 00000DD+.
         SRL   R2,4                    R2 = 000000DD.
         SLL   R2,16                   R2 = 00DD0000.
         AR    R4,R2                   R4 = 00DDMMYY.
         SLL   R4,4                    R4 = 0DDMMYY0.
         LA    R2,15                   GET +VE SIGN.
         OR    R4,R2                   INSERT SIGN.
         ST    R4,SAVEDATE             STORE RESOLVED DATE.
         XC    DOUBLE,DOUBLE           CLEAR WORK AREA.
         LH    R1,YEAR                 GET IPL YEAR.
         SLL   R1,4                    R1 = 00000YY0.
         OR    R1,R2                   R1 = 00000YY+.
         ST    R1,DOUBLE+4             SAVE IT.
         CVB   R1,DOUBLE               CONVERT TO BINARY.
         STH   R1,BYEAR                SAVE IT.
         AH    R1,=H'1900'             ADJUST FOR CENTURY.
         STH   R1,BCENTURY             SAVE IT.
         LH    R1,BDAY                 SET N = DAY.
         LH    R15,BCENTURY            GET YEAR.
         LH    R14,BMONTH              GET MONTH.
         CH    R14,=H'2'               IS IT FEBRUARY ?
         BH    B080                    * NO, BYPASS.
         BE    B060                    * YES, BYPASS.
         LA    R14,13                  SET M=13.
         B     B070                    BYPASS.
B060     LA    R14,14                  SET M=14.
B070     BCTR  R15,0                   DECREMENT YEAR COUNTER.
B080     LR    R0,R14                  SAVE MONTH.
         ALR   R0,R0                   GET 2M.
         ALR   R1,R0                   SET N = N + 2M
         LR    R0,R15                  SAVE REDEFINED YEAR.
         LA    R14,1(R14)              GET M+1.
         MH    R14,=H'3'               GET 3(M+1).
         SRDL  R14,32                  SHIFT INTO R15, ZERO R14.
         D     R14,=F'5'               GET 3(M+1)/5 IN R15.
         ALR   R1,R15                  SET N = N + 3(M+1)/5.
         LR    R15,R0                  GET YEAR.
         ALR   R1,R15                  SET N = N + Y.
         SLR   R14,R14                 ZERO WORK REGISTER.
         D     R14,=F'4'               GET Y/4.
         ALR   R1,R15                  SET N = N + Y/4.
         LR    R15,R0                  GET YEAR.
         SLR   R14,R14                 ZERO WORK REGISTER.
         D     R14,=F'100'             GET Y/100.
         SLR   R1,R15                  SET N = N - Y/100.
         LR    R15,R0                  GET Y.
         SLR   R14,R14                 ZERO WORK REGISTER.
         D     R14,=F'400'             GET Y/400.
         ALR   R1,R15                  SET N = N + Y/400.
         LA    R15,2                   GET 2.
         ALR   R1,R15                  SET N = N + 2.
         SLR   R0,R0                   ZERO WORK REGISTER.
         D     R0,=F'7'                SET N = N/7.
         STH   R0,WEEKDAY              SAVE REMAINDER.
         LR    R1,R0                   GET N.
         MH    R1,=AL2(DAYLNTH)        MULTIPLE BY ENTRY LENGTH.
         XR    R2,R2                   CLEAR WORK REGISTER.
         IC    R2,DAYTABLE(R1)         GET DAY LENGTH.
         BCTR  R2,0                    DECREMENT FOR TRUE LENGTH.
         LA    R14,DAYTABLE+1(R1)      POINT TO DAY.
         LA    R15,MSG2DATA            POINT TO IPL DATE.
         EX    R2,MVCPROSE             MOVE NAME.
         LA    R15,2(R2,R15)           INCREMENT TO PROSE MONTH.
                                       SPACE 1
         LH    R1,BMONTH               GET CURRENT MONTH (BINARY).
         BCTR  R1,0                    DECREMENT FOR OFFSET.
         MH    R1,=AL2(MONLNTH)        MULTIPLE BY ENTRY LENGTH.
         XR    R2,R2                   CLEAR WORK REGISTER.
         IC    R2,MONTABLE(R1)         GET DAY LENGTH.
         BCTR  R2,0                    DECREMENT FOR TRUE LENGTH.
         LA    R14,MONTABLE+1(R1)      POINT TO MONTH.
         EX    R2,MVCPROSE             MOVE NAME.
         LA    R15,2(R2,R15)           INCREMENT TO PROSE DATE.
         MVC   EDITWORK,DATEMASK       GET DATE MASK - DD/MM/YY.
         ED    EDITWORK,SAVEDATE       MAKE DATE PRINTABLE.
         MVC   0(2,R15),EDITWORK+2     MOVE DATE.
         MVI   2(R15),C','             INSERT COMMA.
         LA    R15,4(R15)              INCREMENT TO PROSE YEAR.
         LH    R1,BCENTURY             GET CURRENT CENTURY.
         CVD   R1,DOUBLE               CONVERT CENTURY.
         MVC   EDITWORK,YEARMASK       GET YEAR MASK - YYYY.
         ED    EDITWORK(6),DOUBLE+5    MAKE YEAR PRINTABLE.
         MVC   0(4,R15),EDITWORK+2     MOVE YEAR.
         LA    R15,5(R15)              INCREMENT OUTPUT POINTER.
         MVC   0(2,R15),=C'AT'         MOVE SEPERATOR.
         LA    R15,2(R15)              INCREMENT TO PROSE TIME.
         MVC   0(7,R15),TIMEMASK       RESET EDIT MASK.
         ED    0(7,R15),SAVETIME+1     GET IPL TIME (HHMM).
         BR    R10                     ===> Return to Caller
                                       SPACE 1
*---------------------------------------------------------------------*
*        Constants, Literals and Variables                            *
*---------------------------------------------------------------------*
                                       SPACE 1
         LTORG
TBCREATE DC    CL8'TBCREATE'           ISPF CONSTANT
TBADD    DC    CL8'TBADD'              ISPF CONSTANT
TBEND    DC    CL8'TBEND'              ISPF CONSTANT
TBTOP    DC    CL8'TBTOP'              ISPF CONSTANT
TBDISPL  DC    CL8'TBDISPL'            ISPF CONSTANT
NOWRITE  DC    CL8'NOWRITE'            ISPF CONSTANT
CSYSTEM  DC    C'(SYSTEM)'             ISPF VARIABLE NAME
SYSTABLE DC    CL8'SYSTEM'             ISPF TABLE AND PANEL NAME
F79      DC    F'79'                   LENGTH VALUE OF 79
SAVEAREA DC    18F'0'                  REGISTER SAVEAREA.
                                       SPACE 1
EPLOC DC       F'0'                    ADDRESS OF ISPLINK.
DOUBLE   DC    D'0'                    WORK AREA.
                                       SPACE 1
SAVEDATE DC    F'0'                    DATE SAVEAREA.
SAVETIME DC    F'0'                    TIME SAVEAREA.
TIME     DC    F'0'                    DATE SAVEAREA.
DATE     DC    F'0'                    TIME SAVEAREA.
                                       SPACE 1
YEAR     DC    H'0'                    YEAR     (DECIMAL).
WEEKDAY  DC    H'0'                    WEEK DAY (BINARY).
BDAY     DC    H'0'                    DAY      (BINARY).
BMONTH   DC    H'0'                    MONTH    (BINARY).
BYEAR    DC    H'0'                    YEAR     (BINARY).
BCENTURY DC    H'0'                    CENTURY  (BINARY).
                                       SPACE 1
MVCPROSE MVC   0(0,R15),0(R14)         EXECUTED MOVE.
                                       SPACE 1
EDITWORK DC    XL10'00'                EDIT WORK AREA.
                                       SPACE 1
YEARMASK DC    X'402120202020'         EDIT MASK - YYYY.
DATEMASK DC    X'40212020612020612020' DATE EDIT MASK - (DD/MM/YY).
TIMEMASK DC    X'402120207A2020'       TIME EDIT MASK - (HH:MM).
                                       SPACE 1
GENFLAG  DC    X'00'                   GENERAL FLAG BYTE.
GENSPF   EQU   X'80'                   SPF PROCESSING REQD.
GENDCB   EQU   X'40'                   DCB PROCESSING REQD.
GENSYSUT EQU   X'20'                   SYSUT2 DD FOUND
                                       SPACE 1
ISPQRY   DC    CL8'ISPQRY'             ISPQRY  MODULE NAME.
ISPLINK  DC    CL8'ISPLINK'            ISPLINK MODULE NAME.
                                       SPACE 1
VDEFINE  DC    CL8'VDEFINE '           ISPF FUNCTIONS.
                                       SPACE 1
CHAR     DC    CL8'CHAR'
                                       SPACE 1
DAYSPMON DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31)
                                       SPACE 1
MONTABLE DC    AL1(7),CL9'January'     MONTH TABLE.
MONLNTH  EQU   *-MONTABLE              MONTH ENTRY LENGTH.
         DC    AL1(8),CL9'February'    *
         DC    AL1(5),CL9'March'       *
         DC    AL1(5),CL9'April'       *
         DC    AL1(3),CL9'May'         *
         DC    AL1(4),CL9'June'        *
         DC    AL1(4),CL9'July'        *
         DC    AL1(6),CL9'August'      *
         DC    AL1(9),CL9'September'   *
         DC    AL1(7),CL9'October'     *
         DC    AL1(8),CL9'November'    *
         DC    AL1(8),CL9'December'    *
                                       SPACE 1
DAYTABLE DC    AL1(8),CL9'Saturday'    DAY TABLE.
DAYLNTH  EQU   *-DAYTABLE              DAY ENTRY LENGTH.
         DC    AL1(6),CL9'Sunday'      *
         DC    AL1(6),CL9'Monday'      *
         DC    AL1(7),CL9'Tuesday'     *
         DC    AL1(9),CL9'Wednesday'   *
         DC    AL1(8),CL9'Thursday'    *
         DC    AL1(6),CL9'Friday'      *
                                       SPACE 1
*---------------------------------------------------------------------*
*        Output record constants                                      *
*---------------------------------------------------------------------*
                                       SPACE 1
L00      DC    C'System IPL Status Display for '
L01      DC    C'Last IPL Performed on '
L01C     DC    C'Current Date and Time '
L02      DC    C'Operating System Level'
L03      DC    C'IPL Load Parm used was'
L04      DC    C'Max Private below 16 Meg.'
L05      DC    C'Nucleus Id'
L06      DC    C'SMF Id'
L14      DC    C'CPU Serial Number and Type'
L08      DC    C'Master Catalog is'
L10      DC    C'Master Catalog is on'
L09      DC    C'System IPL Volser'
L11      DC    C'SYS2.NSP.LOADLIB is on'
L15      DC    C'SYS1.PARMLIB is on'
NAME00   DC    C'Symbolic Variable               Value'
                                       SPACE 1
*---------------------------------------------------------------------*
*        Output record and its redefinitions                          *
*---------------------------------------------------------------------*
                                       SPACE 1
BLANK    DC    C' '
RECORD   DC    CL80' '
         ORG   RECORD+30
EQUALS   DS    C                       = sign inserted here
         ORG   RECORD+L'L00 '
SYSTEMID DS    CL8
         ORG   RECORD+L'L01 '
MSG2DATA DS    CL40                    IPL date and time
         ORG   RECORD+32
SPLEVEL  DS    CL8                     Operating System level
         ORG   RECORD+32
IPLPARM  DS    CL8                     IPL Parameters
         ORG   RECORD+32
PVTSIZE  DS    CL5                     Private Storage below the line
K        DS    C
         ORG   RECORD+32
NUCLEUS  DS    C'IEANUC0'
NUCID    DS    C                       Nucleus Id
         ORG   RECORD+32
SMFID    DS    CL4                     SMF Id
         ORG   RECORD+32
CPUCODE  DS    CL2                     CPU Code
DASH1    DS    C
CPULPAR  DS    CL2                     CPU Lpars
DASH2    DS    C
CPUID    DS    CL4                     CPU Id
DASH3    DS    C
CPUTYPE  DS    CL4                     CPU Type
         ORG   RECORD+32
CATNAME  DS    CL44                    Master catalog dsn
         ORG   RECORD+32
VOLSER   DS    CL6                     Volume Serial
         DS    C
ON       DS    CL2
         DS    C
UNIT     DS    CL4                     Unit Address
BLANK2   DS    C
         ORG   RECORD
NAME     DS    CL12                    Variable Name
         DS    CL20
CONTENT  DS    CL50                    Variable content
         ORG   ,                       Reset Origin
                                       SPACE 1
*---------------------------------------------------------------------*
*        Other data                                                   *
*---------------------------------------------------------------------*
                                       SPACE 1
SYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,RECFM=FB,LRECL=80,               *
               BLKSIZE=0,DSORG=PS,DCBE=DCBE
DCBE     DCBE  RMODE31=BUFF
                                       SPACE 1
DB       DC    D'0'                    DOUBLE WORD WORK AREA
SVC99RBP DC    A(SVC99RB+X'80000000')  SVC 99 RB POINTER
SVC99RB  DC    5F'0'                   SVC 99 RB
RBLEN    EQU   S99RBEND-S99RB
                                       SPACE 1
TUDSN    DC    AL2(DALDSNAM,1,44)
DSN      DC    CL44' '                 PROVIDED DSN
TUDDN    DC    AL2(DALRTDDN,1,8)       RETURN A DD NAME
DDNAME   DC    CL8'        '           DDNAME
                                       SPACE 1
TUALLOC  DC    A(TUDSN)                TEXT UNIT POINTERS
         DC    A(TUDISP)               TEXT UNIT POINTERS
TUFREE   DC    X'80',AL3(TUDDN)        LAST TEXT UNIT POINTER
                                       SPACE 1
TUDISP   DC    AL2(DALSTATS,1,1)       ALLOCATION STATUS
         DC    X'08'                   DISP=SHR
                                       SPACE 1
TRTABLE  DC    C'0123456789ABCDEF'     HEX/EBCDIC TRANSLATE TABLE
                                       SPACE
MVCNAME  MVC   NAME(*-*),0(R6)         Copy the variable name
MVCVAR   MVC   CONTENT(*-*),0(R8)      Copy the variable content
                                       SPACE 1
         DC    S(*),S(*),S(*),S(*)
         CNOP  0,8                     TERMINATES ON DOUBLE WORD BDY.
                                       SPACE 1
*---------------------------------------------------------------------*
*        DSECTS                                                       *
*---------------------------------------------------------------------*
                                       SPACE 1
         ASASYMBP ,                    MAPPING OF SYMBP AREA
         IHAPSA
         IHAPCCA
         CVT   DSECT=YES,PREFIX=YES
         IHAECVT ,
         IHAGDA  ,
         IEFUCBOB                      MAP THE UCB.
         IEESMCA
         IEFZB4D0 ,                    DYNAMIC ALLOCATION - PARM LIST
         IEFZB4D2 ,                    DYNAMIC ALLOCATION - KEYS
TIOT     DSECT
         IEFTIOT1
         IKJTCB
*        AMCBS
*        IGGCAXWA
         YREGS
         END
