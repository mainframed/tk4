./ ADD MEMBER=DBUGBLOK
*---------------------------------------------------------------------*
*                                                                     *
*        DEBUG INTERFACE BLOCK                                        *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
&NAME    DBUGBLOK &TYPE=
         AIF      ('&TYPE' EQ 'DSECT').DSECT
&NAME    DS       0A
         AGO      .NODSECT
.DSECT   ANOP
         AIF      (T'&NAME EQ 'O').NONAME
&NAME    DSECT
.NODSECT ANOP
DBUGDATA DC    A(0)                DEBUG DATA ADDRESS
DBUGCMD  DC    C' '                COMMAND
$DBUG    EQU   C' '                .. NORMAL DEBUG
$DBUGHD  EQU   C'H'                .. PRINT SUB-HEADING
$DBUGPRT EQU   C'P'                .. PRINT
         MEXIT
.NONAME  ANOP
         MNOTE    12,'NAME REQUIRED WHEN TYPE=DSECT'
         MEND
./ ADD MEMBER=DISASMDA
         AIF ('&DAPRT' EQ 'ON').DA010
         PRINT OFF
.DA010   ANOP
* ------------------------------------------------------------------- *
*                                                                     *
*     DISASM's data areas                                             *
*                                                                     *
*     There were so many different blocks that making up macros or    *
*     copy members took more time than it was worth.  Most of the     *
*     data areas are small, so it doesn't cost much to assemble them  *
*     all in all the modules.                                         *
*                                                                     *
* ------------------------------------------------------------------- *
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*        BASE REGISTER DEFINITIONS                                    *
*                                                                     *
* ------------------------------------------------------------------- *
BASEDSCT DSECT
BASENEXT DS   A                   NEXT BASE BLOCK
BASEEYE  DS   CL8                 EYE CATCHER
BASEBEGN DS   XL4                 STARTING DISPLACEMENT
BASEEND  DS   XL4                 ENDING DISPLACEMENT
BASEDISP DS   XL4                 DISPLACEMENT BASE REFERS TO
BASEREG  DS   X                   BASE REGISTER
BASEL    EQU  *-BASEDSCT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*        DATA AREA DEFINITIONS                                        *
*                                                                     *
* ------------------------------------------------------------------- *
DATADSCT DSECT
DATANEXT DS   A                   NEXT DATA BLOCK
DATAEYE  DS   CL8                 EYE CATCHER
DATANAME DS   CL8                 DATA NAME (VCON AND Q TYPES)
DATALBA  DS   A                   LABEL BLOCK ADDRESS FOR ADCON
DATALBD  DS   XL4                 DISPLACEMENT FROM LABEL FOR ADCON
DATABEGN DS   XL4                 STARTING DISPLACEMENT
DATAEND  DS   XL4                 ENDING DISPLACEMENT
DATALEN  DS   XL4                 LENGTH
DATAFLAG DS   X                   SPECIAL FLAGS/INDICATORS
$DATA31  EQU  X'80'               AD-CON WITH 31-BIT MODE BIT ON
DATATYPE DS   X                   DATA TYPE
$DATAUSR EQU  X'01'               .. USER DEFINED
$DATAACN EQU  X'02'               .. A-CON
$DATAVCN EQU  X'03'               .. V-CON
$DATAINT EQU  X'04'               .. INTERNALLY DETECTED
$DATACXD EQU  X'05'               .. PSEUDO AREA SIZE
$DATAQ   EQU  X'06'               .. PSEUDO AREA DISPLACEMENT
DATAL    EQU  *-DATADSCT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*        DSECT DEFINITIONS                                            *
*                                                                     *
* ------------------------------------------------------------------- *
DSCTDSCT DSECT
DSCTNEXT DS   A                   NEXT DSECT BLOCK
DSCTEYE  DS   CL8                 EYE CATCHER
DSCTNAME DS   CL8                 DSECT'S NAME
DSCTLBA  DS   A                   FIRST LABEL BLOCK'S ADDRESS
DSCTL    EQU  *-DSCTDSCT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*        EQU DEFINITIONS                                              *
*                                                                     *
* ------------------------------------------------------------------- *
EQUDATA  DSECT
EQUNEXT  DS    A                  NEXT EQU BLOCK'S ADDRESS
EQUEYE   DS    CL8                EYECATCHER
EQULABEL DS    CL8                LABEL ON EQU STATEMENT
EQUVALUE DS    X                  ASSOCIATED EQU VALUE
EQUL     EQU   *-EQUDATA
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*        ESD REFERENCES                                               *
*                                                                     *
* ------------------------------------------------------------------- *
ESDDATA  DSECT
ESDNEXT  DS    A                  NEXT ESD BLOCK'S ADDRESS
ESDEYE   DS    CL8                EYE CATCHER
ESDID    DS    H                  ESD ID
ESDNAME  DS    CL8                ENTRY POINT NAME
ESDTYPE  DS    X                  TYPE
$ESDSD   EQU   X'00'              .. EXTERNAL SYMBOL
$ESDER   EQU   X'02'              .. UNRESOLVED EXTERNAL REFERENCE
$ESDLR   EQU   X'03'              .. LABEL REFERENCE
$ESDPC   EQU   X'04'              .. PRIVATE CODE DEFINITION
$ESDCM   EQU   X'05'              .. COMMON MODULE
$ESDPR   EQU   X'06'              .. PSEUDO REGISTER
$ESDNULL EQU   X'07'              .. NULL
$ESDWX   EQU   X'0A'              .. UNRESOLVED WEAK EXTERNAL REFERENCE
$ESDOV   EQU   X'14'              .. OVERLAY SEGMENT TABLE
ESDADDR  DS    AL3                ADDRESS OF ENTRY POINT
ESDSEG   DS    X                  SEGMENT NUMBER
ESDLEN   DS    AL3                ENTRY LENGTH
ESDL     EQU   *-ESDNAME          ESD DATA LENGTH
ESDDATAL EQU   *-ESDDATA
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*        LABEL BLOCK                                                  *
*                                                                     *
* ------------------------------------------------------------------- *
LABLDSCT DSECT
LABLNEXT DS   A                   NEXT LABEL BLOCK
LABLEYE  DS   CL8                 EYE CATCHER
LABLNAME DS   CL8                 LABEL NAME
LABLDISP DS   XL4                 DISPLACEMENT FROM BASE
LABLEQU  DS   A                   FIRST EQU BLOCK ADDRESS
LABLTYPE DS   C                   LABEL TYPE
$LABLD   EQU  C'D'                .. LABEL AT DATA
$LABLE   EQU  C'E'                .. LABEL FROM AN ESD ENTRY
$LABLI   EQU  C'I'                .. LABEL AT AN INSTRUCTION
$LABLR   EQU  C'R'                .. LABEL FROM AN RLD ENTRY
LABLL    EQU  *-LABLDSCT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*        OPCODE DEFINITIONS                                           *
*                                                                     *
* ------------------------------------------------------------------- *
OPDSECT  DSECT
OPMACH   DS    CL2           OPCODE
OPMNEM   DS    CL6           MNEMONIC
OPLENGTH DS    H             INSTRUCTION LENGTH
OPFORM   DS    X             FORMAT
$OPRR1   EQU   X'00'         .. RR FORMAT 1 (R1,R2)
$OPRR2   EQU   X'01'         .. RR FORMAT 2 (SVC'S)
$OPRR3   EQU   X'02'         .. RR FORMAT 3 (BRANCHES)
$OPRX    EQU   X'03'         .. RX FORMAT
$OPS     EQU   X'04'         .. S FORMAT
$OPSI    EQU   X'05'         .. SI (IMMEDIATE) FORMAT
$OPRS1   EQU   X'06'         .. RS FORMAT 1 (SHIFTS)
$OPRS2   EQU   X'07'         .. RS FORMAT 2 (BXLE, BXH,  )
$OPRS3   EQU   X'08'         .. RS FORMAT 3 (MASK TYPE.. CLM, ICM..)
$OPSS1   EQU   X'09'         .. SS FORMAT 1 (CHARACTER)
$OPSS2   EQU   X'0A'         .. SS FORMAT 2 (PACKED DECIMAL)
$OPSS3   EQU   X'0B'         .. SS FORMAT 3 (MVCK, MVCS, MVCP)
$OPSS4   EQU   X'0C'         .. SS FORMAT 4 (SRP)
$OPB2    EQU   X'0D'         .. B2 (NO OPERANDS)
$OPB2S   EQU   X'0E'         .. B2 S-FORMAT
$OPB2R   EQU   X'0F'         .. B2 R FORMAT
$OPB2RR  EQU   X'10'         .. B2 RR FORMAT
OPFLAGS  DS    X             FLAGS
$OPEXT   EQU   X'80'         .. EXTENDED MNEMONICS
$OPSVC   EQU   X'40'         .. SVC
$OPNCMNT EQU   X'20'         .. NO COMMENT
$OPREF   EQU   X'10'         .. GENERATES A LABEL REFERENCE
$OPCCA   EQU   X'08'         .. SETS CONDITION CODE, ARITHMETIC
$OPCCC   EQU   X'04'         .. SETS CONDITION CODE, COMPARE
$OPCCL   EQU   X'02'         .. SETS CONDITION CODE, LOGICAL
$OPFLOAT EQU   X'01'         .. FLOATING POINT OPCODE
OPREGS   DS    X             REGISTER RESTRICTIONS
$OP1EVEN EQU   X'80'         .. OPERAND 1 MUST BE EVEN
$OP10246 EQU   X'40'         .. OPERAND 1 MUST BE 0, 2, 4, OR 6
$OP104   EQU   X'20'         .. OPERAND 1 MUST BE 0 OR 4
$OP2EVEN EQU   X'08'         .. OPERAND 2 MUST BE EVEN
$OP20246 EQU   X'04'         .. OPERAND 2 MUST BE 0, 2, 4, OR 6
$OP204   EQU   X'02'         .. OPERAND 2 MUST BE 0 OR 4
OPCMNT   DS    CL25          COMMENT IF PRESENT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*        INSTRUCTION OPERAND REFERENCES                               *
*                                                                     *
* ------------------------------------------------------------------- *
REFDSCT  DSECT
REFNEXT  DS   A                   NEXT REFERENCE BLOCK
REFEYE   DS   CL8                 EYE CATCHER
REFOPER1 DS   A                   OPERAND 1 REFERENCE
REFOPER2 DS   A                   OPERAND 2 REFERENCE
REFDISP1 DS   XL4                 DISPLACEMENT FROM LABEL
REFDISP2 DS   XL4                 DISPLACEMENT FROM LABEL
REFDISPI DS   XL4                 REFERENCING INSTRUCTIONS DISPLACEMENT
REFL     EQU  *-REFDSCT
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*        RELOCATION DATA REFERENCES                                   *
*                                                                     *
* ------------------------------------------------------------------- *
RLDDATA  DSECT
RLDNEXT  DS    A                  NEXT RLD BLOCK'S ADDRESS
RLDEYE   DS    CL8                EYE CATCHER
RLDESD   DS    A                  CORRESPONDING ESD'S ADDRESS
RLDLEN   DS    H                  CONSTANT'S LENGTH
RLDDISP  DS    XL4                DISPLACEMENT TO CONSTANT
RLDTYPE  DS    X                  RLD TYPE
$RLDACON EQU   X'00'              .. ADCON
$RLDVCON EQU   X'10'              .. VCON
$RLDPSDP EQU   X'20'              .. PSEUDO AREA DISPLACEMENT (Q)
$RLDPSSZ EQU   X'30'              .. PSEUDO AREA SIZE         (CXD)
$RLDER1  EQU   X'80'              .. UNRESOLVED REFERENCE
$RLDER2  EQU   X'90'              .. UNRESOLVED REFERENCE
RLDPTR   DS    XL2                RLD POINTER
RLDPP    DS    XL2                RLD POSITION POINTER
RLDDIR   DS    C                  DIRECTION (+ OR -)
RLDDATAL EQU   *-RLDDATA          RLD DATA LENGTH
         SPACE 2
* ------------------------------------------------------------------- *
*                                                                     *
*        USING DEFINITIONS                                            *
*                                                                     *
* ------------------------------------------------------------------- *
USNGDSCT DSECT
USNGNEXT DS   A                   NEXT USING BLOCK
USNGEYE  DS   CL8                 EYE CATCHER
USNGDSNM DS   CL8                 DSECT'S NAME
USNGLBNM DS   CL8                 LABEL WITHIN THE DSECT
USNGDSA  DS   A                   RELATED DSECT BLOCK'S ADDRESS
USNGLBA  DS   A                   LABEL BLOCK'S ADDRESS
USNGDISP DS   XL4                 LABEL'S DISPLACEMENT INTO THE DSECT
USNGBASE DS   X                   BASE
USNGFLAG DS   X                   FLAGS
$USNGND  EQU  X'80'               .. NO DISPLACEMENTS
USNGBEGN DS   XL4                 STARTING DISPLACEMENT
USNGEND  DS   XL4                 ENDING DISPLACEMENT
USNGL    EQU  *-USNGDSCT
         AIF  ('&DAPRT' EQ 'ON').DA020
         PRINT ON
.DA020   ANOP
./ ADD MEMBER=DISASMGB
* ------------------------------------------------------------------- *
*                                                                     *
*     GLOBAL OPTIONS.  SEE MACRO DISOPT FOR EXPLANATION OF OPTIONS.   *
*                                                                     *
* ------------------------------------------------------------------- *
         GBLA  &TRNBRG,&MAXL,&MINL
         GBLC  &TROPT,&DAPRT,&COMPRT
         DISOPT COMLIST=OFF,        ASSEMBLER'S NAME                   +
               DALIST=ON,                 PRINT DATA AREA              +
               MAXLINE=55,          DEFAULT IS 55 LINES PER PAGE       +
               MINLINE=10,          MINIMUM LINE COUNT ALLOWABLE IS 10 +
               TRACE=ON,            GENERATE TRACE                     +
               TRNBR=1000           1000 TRACE ENTRIES
./ ADD MEMBER=DISASM00
*---------------------------------------------------------------------*
*                                                                     *
*          COMMON AREA MAPPING MACRO                                  *
*                                                                     *
*     This macro will generate either the 'common' module CSECT or    *
*     a DSECT to map the 'common' module.  'Common' is used for       *
*     constants and work areas that are required by several modules   *
*     allowing some elimination of duplicated data and to allow       *
*     inter-module communication.                                     *
*                                                                     *
*     The trace table code is also incorporated into the 'DISASM00'.  *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
&NAME    DISASM00 &TYPE=
         GBLA  &TRNBRG,&MAXL,&MINL
         GBLC  &TROPTG,&DAPRT,&COMPRT,&ASMNAME
         AIF   (T'&NAME EQ 'O').NONAME
         AIF   ('&TYPE' EQ 'CSECT').CSECT
         AIF   ('&TYPE' EQ 'DSECT').DSECT
         MNOTE 12,'INVALID TYPE'
         MEXIT
.CSECT   ANOP
&NAME    CSECT
         AGO   .NODSECT
.DSECT   ANOP
         AIF   ('&COMPRT' EQ 'ON').PRT010
         PRINT OFF
.PRT010  ANOP
&NAME    DSECT
.NODSECT ANOP
*---------------------------------------------------------------------*
*                                                                     *
*          Double word for CVB/CVD                                    *
*                                                                     *
*---------------------------------------------------------------------*
COMMDWRD DC    D'0'
*---------------------------------------------------------------------*
*                                                                     *
*          ADDRESS CONSTANTS                                          *
*                                                                     *
*---------------------------------------------------------------------*
         DC    CL8'DISASM00'
ACOMM    DC    A(DISASM00)         COMMON MODULE
         DC    CL8'DISASM01'
A01      DC    V(DISASM01)         MAINLINE MODULE
         DC    CL8'DISASM02'
A02      DC    V(DISASM02)         PARAMETER READER
         DC    CL8'DISASM03'
A03      DC    V(DISASM03)         MODULE READER
         DC    CL8'DISASM04'
A04      DC    V(DISASM04)         CESD record processor
         DC    CL8'DISASM05'
A05      DC    V(DISASM05)         RLD record processor
         DC    CL8'DISASM06'
A06      DC    V(DISASM06)         MODULE TEXT PRINTER
         DC    CL8'DISASM07'
A07      DC    V(DISASM07)         DSECT INTERPRETER
         DC    CL8'DISASM08'
A08      DC    V(DISASM08)         ASSIGN LABELS
         DC    CL8'DISASM09'
A09      DC    V(DISASM09)         SOURCE GENERATOR
         DC    CL8'DISASMB2'
AB2      DC    V(DISASMB2)         OPCODE 'B2' INTERPRETER
         DC    CL8'DISASMDB'
ADB      DC    V(DISASMDB)         DEBUG
         DC    CL8'DISASMOP'
AOP      DC    V(DISASMOP)         OPCODE TABLE
         DC    CL8'DISASMPR'
APR      DC    V(DISASMPR)         PRINT MODULE ADDRESS
         DC    CL8'DISASMRR'
ARR      DC    V(DISASMRR)         REGISTER CHECKER
*---------------------------------------------------------------------*
*                                                                     *
*          TRACE CONTROL                                              *
*                                                                     *
*---------------------------------------------------------------------*
         DS    0A
         DC    CL4'1STX'           FIRST TRACE ENTRY
TR1ST    DC    A(0)
         DC    CL4'LAST'           LAST TRACE ENTRY
TRLAST   DC    A(0)
         DC    CL4'CURR'           CURRENT TRACE ENTRY
TRCURR   DC    A(0)
TRADDR   DC    A(0)                TRACE TABLE STORAGE ADDRESS
TRR14    DC    A(0)                REGISTER 14 SAVE AREA
TRDATA1  DC    CL8' '              TRACE DATA ITEM 1
TRDATA2  DC    CL8' '              TRACE DATA ITEM 2
TRSIZE   DC    A(&TRNBRG*32)       TRACE TABLE SIZE
*---------------------------------------------------------------------*
*                                                                     *
*          GLOBAL DATA                                                *
*                                                                     *
*---------------------------------------------------------------------*
COMMIO   DC    A(0)                I/O BUFFER ADDRESS
$IOSIZE  EQU   32760               I/O BUFFER SIZE
COMMESD  DC    A(0)                EXTERNAL SYMBOL TABLE ANCHOR
COMMRLD  DC    A(0)                RLD TABLE ANCHOR
COMMUSNG DC    A(0)                USING TABLE ANCHOR
COMMDSCT DC    A(0)                DSECT TABLE ANCHOR
COMMBASE DC    A(0)                BASE TABLE ANCHOR
COMMDATA DC    A(0)                DATA TABLE ANCHOR
COMMDISP DC    A(0)                INSTRUCTION DISPLACEMENT TABLE
COMMREF  DC    A(0)                REFERENCE TABLE ANCHOR
COMMLABL DC    A(0)                LABEL TABLE ANCHOR
COMMCSAD DC    A(0)                CSECT ADDRESS
COMMCSEP DC    A(0)                LINK EDIT ASSIGNED ENTRY POINT
COMMCSEA DC    A(0)                CSECT ENDING ADDRESS
COMMCSLN DC    A(0)                CSECT LENGTH
COMMTXT  DC    A(0)                TEXT'S STORAGE ADDRESS
*---------------------------------------------------------------------*
*                                                                     *
*      Sub-heading length is actually a flag byte and a length byte   *
*                                                                     *
*        If first byte is X'00', heading is to be centered            *
*        If first byte is X'FF', heading is not to be centered        *
*                                                                     *
*      Second byte is the length for centered and non-centered        *
*                                                                     *
*---------------------------------------------------------------------*
COMMH4   DC    H'4'                CONSTANT
COMMH8   DC    H'8'                CONSTANT
COMMH32  DC    H'32'               CONSTANT
COMMSUBL DC    H'0'                SUB HEADING LENGTH
COMMPFXL DC    H'0'                LABEL PREFIX LENGTH
COMMESID DS    XL2                 CSECT's ESDID
COMMFLAG DC    X'00'               GLOBAL CONTROL FLAGS
$ABORT   EQU   X'80'               .. SERIOUS ERROR, ABORT
$ERROR   EQU   X'40'               .. ERROR HAS OCCURRED
$CSECT   EQU   X'20'               .. CSECT LOCATED
$ABEND   EQU   X'10'               .. ABEND AT EXIT
$ASMIN   EQU   X'08'               .. ASSEMBLER INPUT PRESENT
$SEQLABL EQU   X'04'               .. SEQUENTIALLY NUMBERED LABELS
$NOFLOAT EQU   X'02'               .. NO FLOATING POINT INSTRUCTIONS
COMMDD   DC    X'00'               DD STATEMENT FLAGS
$PRTDD   EQU   X'80'               .. DISPRINT DD PRESENT
$INDD    EQU   X'40'               .. DISIN DD PRESENT
$MODDD   EQU   X'20'               .. DISMOD DD PRESENT
$PUNCHDD EQU   X'10'               .. DISPUNCH DD PRESENT
$DEBUGDD EQU   X'08'               .. DISDEBUG DD PRESENT
COMMMOD  DC    CL8' '              MODULE NAME
COMMCSNM DC    CL8' '              CSECT NAME
COMMPFX  DC    CL4' '              LABEL PREFIX
COMMSUBH DC    CL133' '            SUB-HEADING
COMMDBSH DC    CL35' '             DEBUG SUB-HEADING
COMM0F0F DC    8X'0F'
COMM1F1F DC    8X'1F'
COMMBLKS DC    80C' '
COMMHXCH DC    C'0123456789ABCDEF'
COMMCHHX DC    X'000A0B0C0D0E0F000000000000000000'
         DC    X'00010203040506070809000000000000'
COMMNBR  DS    0C
         DC    C'0 '
         DC    C'1 '
         DC    C'2 '
         DC    C'3 '
         DC    C'4 '
         DC    C'5 '
         DC    C'6 '
         DC    C'7 '
         DC    C'8 '
         DC    C'9 '
         DC    C'10'
         DC    C'11'
         DC    C'12'
         DC    C'13'
         DC    C'14'
         DC    C'15'
         DC    C'16'
*---------------------------------------------------------------------*
*                                                                     *
*          Printable characters                                       *
*                                                                     *
*---------------------------------------------------------------------*
COMMPRT  DC    256X'FF'
         ORG   COMMPRT+X'40'
         DC    X'00'
         ORG   COMMPRT+X'4A'
         DC    6X'00'
         ORG   COMMPRT+X'5A'
         DC    6X'00'
         ORG   COMMPRT+X'60'
         DC    2X'00'
         ORG   COMMPRT+X'6A'
         DC    6X'00'
         ORG   COMMPRT+X'79'
         DC    4X'00'
         ORG   COMMPRT+X'7E'
         DC    2X'00'
         ORG   COMMPRT+X'81'
         DC    9X'00'
         ORG   COMMPRT+X'91'
         DC    9X'00'
         ORG   COMMPRT+X'A2'
         DC    8X'00'
         ORG   COMMPRT+X'C0'
         DC    10X'00'
         ORG   COMMPRT+X'D0'
         DC    10X'00'
         ORG   COMMPRT+X'E2'
         DC    8X'00'
         ORG   COMMPRT+X'F0'
         DC    10X'00'
         ORG   COMMPRT+256
*---------------------------------------------------------------------*
*                                                                     *
*          Non-printable characters                                   *
*                                                                     *
*---------------------------------------------------------------------*
COMMNPRT DC    256X'00'
         ORG   COMMNPRT+X'4A'
         DC    X'FF'
         ORG   COMMNPRT+X'4C'
         DC    4X'FF'
         ORG   COMMNPRT+X'5A'
         DC    6X'FF'
         ORG   COMMNPRT+X'60'
         DC    2X'FF'
         ORG   COMMNPRT+X'6A'
         DC    X'FF'
         ORG   COMMNPRT+X'6C'
         DC    4X'FF'
         ORG   COMMNPRT+X'79'
         DC    4X'FF'
         ORG   COMMNPRT+X'7E'
         DC    2X'FF'
         ORG   COMMNPRT+X'C0'
         DC    10X'FF'
         ORG   COMMNPRT+X'D0'
         DC    10X'FF'
         ORG   COMMNPRT+X'E2'
         DC    8X'FF'
         ORG   COMMNPRT+X'F0'
         DC    10X'FF'
         ORG   COMMNPRT+256
COMMMAXL DC    PL3'&MAXL'          MAXIMUM LINES PER PAGE
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*          ADD TRACE ENTRY                                            *
*                                                                     *
*  During program initialization, DISASM01 acquires storage for the   *
*  trace table and sets COMM1ST, COMMLAST, and COMMCURR.  DISASM01    *
*  also sets R11 to the address of DISASM00 and all other modules     *
*  depend on this remaining unchanged.  Any module except this        *
*  module may call the trace routine.  Macro ITRACE generates the     *
*  calling sequence.  R14 is the only register altered by the trace   *
*  macro.                                                             *
*                                                                     *
*  The trace table is a "wrap-around" table.  COMM1ST is the first    *
*  entry's address, COMMLAST is the last entry's address, and         *
*  COMMCURR is the address of the last entry added to the table.      *
*  When a trace entry is added to the table, the calling module's     *
*  name, an 8-byte ID, and up to 2 8-byte fields are captured.        *
*                                                                     *
*                                                                     *
*                                                                     *
*      This code depends on:                                          *
*           R11  'DISASM00' address                                   *
*           R12  current module's base address                        *
*                and the module's name must be at 10 bytes (0A hex)   *
*                into the module                                      *
*           R14  trace id's address and R14 + 8 will be the return    *
*                address                                              *
*                                                                     *
*---------------------------------------------------------------------*
TRACE000 DS    0H
         USING &NAME,R11           DEFINE BASE
         USING TRENTRY,R1          DEFINE BASE
         STM   R0,R15,TRCESAVE     SAVE ALL REGISTERS
         ICM   R1,15,TRCURR        CURRENT TRACE ENTRY
         BZ    TRACE020            NO TRACE TABLE
         OC    0(TRENTRYL,R1),0(R1)    EMPTY ENTRY?
         BZ    TRACE010            YES.. USE THIS ENTRY
         LA    R1,TRENTRYL(R1)     NEXT TRACE ENTRY
         C     R1,TRLAST           BEYOND END OF TABLE?
         BNH   TRACE010            NO
         L     R1,TR1ST            'WRAP' TRACE TABLE
TRACE010 DS    0H
         ST    R1,TRCURR           SAVE CURRENT TRACE ENTRY ADDRESS
         MVC   TREMOD,10(R12)      COPY MODULE NAME
         MVC   TREID,0(R14)        COPY TRACE ID
         MVC   TREDATA1,TRDATA1    COPY TRACE DATA 1
         MVC   TREDATA2,TRDATA2    COPY TRACE DATA 2
         XC    TRDATA1,TRDATA1     CLEAR TRACE DATA
         XC    TRDATA2,TRDATA2     CLEAR TRACE DATA
TRACE020 DS    0H
         LM    R0,R15,TRCESAVE     RESTORE ALL REGISTERS
         B     8(R14)              RETURN
TRCESAVE DS    16F                 REGISTER SAVE AREA
         LTORG
         SPACE 2
*---------------------------------------------------------------------*
*                                                                     *
*          TRACE TABLE ENTRY                                          *
*                                                                     *
*---------------------------------------------------------------------*
TRENTRY  DSECT
TREMOD   DS    CL8                 MODULE NAME
TREID    DS    CL8                 TRACE ID
TREDATA1 DS    CL8                 TRACE DATA 1
TREDATA2 DS    CL8                 TRACE DATA 2
TRENTRYL EQU   *-TRENTRY           ENTRY LENGTH
         SPACE 2
         AIF   ('&COMPRT' EQ 'ON').PRT020
         PRINT ON
.PRT020  ANOP
*---------------------------------------------------------------------*
*                                                                     *
*          ABEND REASON CODES                                         *
*                                                                     *
*---------------------------------------------------------------------*
ABEND001 EQU   1                   REQUESTED VIA AN ABEND STATEMENT
ABEND002 EQU   2                   UNKNOWN RETURN CODE FROM BLDL
ABEND003 EQU   3                   UNKNOWN RLD ITEM TYPE
ABEND004 EQU   4                   RLD DATA REMAINING WENT NEGATIVE
ABEND005 EQU   5                   ATTEMPT TO GEN AN INSTR ON ODD ADDR
ABEND006 EQU   6                   UNKNOWN B2 INSTRUCTION IN DISASMB2
         MEXIT
.NONAME  ANOP
         MNOTE 12,'NAME IS REQUIRE WHEN TYPE=DSECT'
.MEXIT   ANOP
         MEXIT
         MEND
./ ADD MEMBER=DISOPT
.*--------------------------------------------------------------------*
.*                                                                    *
.*         GLOBAL OPTIONS                                             *
.*                                                                    *
.*    THESE OPTIONS ALLOW CUSTOMIZED GENERATION OF DISASM.            *
.*                                                                    *
.*     OPTIONS YOU CAN SET ARE:                                       *
.*                                                                    *
.*           &TRACE   ON  - ITRACE MACROS WILL GENERATE THE CODE TO   *
.*                          CAPTURE THE "ID" AND DATA1/RDATA1 AND     *
.*                          DATA2/RDATA2, DISASM01 WILL ACQUIRE AND   *
.*                          INITIALIZE THE TRACE TABLE CONTROL DATA   *
.*                          IN DISASM00.                              *
.*                    OFF - ITRACE MACROS WILL GENERATE NO CODE AT    *
.*                          ALL.  DISASM01 WILL NOT ACQUIRE THE       *
.*                          TRACE TABLE STORAGE.  GENERATING DISASM   *
.*                          WITH &TRACE=OFF WILL REDUCE THE SIZE OF   *
.*                          THE MODULE BY ABOUT 2K.                   *
.*                                                                    *
.*           &TRNBR   SPECIFIES THE NUMBER OF TRACE TABLE ENTRIES.    *
.*                                                                    *
.*           &MAXLINE SPECIFIES THE DEFAULT LINE COUNT PER PAGE ON    *
.*                    DISPRINT AND DISDEBUG.                          *
.*                                                                    *
.*           &MINLINE SPECIFIES THE MINIMUM NUMBER OF LINES A USER    *
.*                    CAN REQUEST VIA THE LINE/LINES/MAXLINES STATE-  *
.*                    MENT.                                           *
.*                                                                    *
.*           &COMLIST ON  - THE COMMON DATA AREA LISTING WILL BE      *
.*                          PRINTED ON THE ASSEMBLER LISTING.         *
.*                    OFF - THE AREAS MAPPED BY DISASMDA WILL NOT     *
.*                          BE PRINTED ON THE ASSEMBLER LISTING.      *
.*                    ** NOTE THE COMLIST OPTION DOES NOT APPLY TO    *
.*                    ** TO CSECT DISASM00.                           *
.*                                                                    *
.*                                                                    *
.*           &DALIST  ON  - THE AREAS MAPPED BY DISASMDA WILL BE      *
.*                          PRINTED ON THE ASSEMBLER LISTING.         *
.*                    OFF - THE AREAS MAPPED BY DISASMDA WILL NOT     *
.*                          BE PRINTED ON THE ASSEMBLER LISTING.      *
.*                                                                    *
.*--------------------------------------------------------------------*
         MACRO
&NAME    DISOPT &COMLIST=OFF,                                          +
               &DALIST=OFF,                                            +
               &MAXLINE=55,                                            +
               &MINLINE=10,                                            +
               &TRACE=ON,                                              +
               &TRNBR=1000
         GBLA &TRNBRG,&MAXL,&MINL
         GBLC &TROPT,&DAPRT,&COMPRT
         LCLA &ERROR
&ERROR   SETA 0
         AIF  (T'&TRACE EQ 'O').OPT010
         AIF  ('&TRACE' EQ 'ON').OPT020
         AIF  ('&TRACE' EQ 'OFF').OPT020
         MNOTE 12,'TRACE MUST BE EITHER -ON- OR -OFF-'
&ERROR   SETA 1
         AGO  .OPT030
.OPT010  ANOP
         MNOTE 12,'TRACE OPTION MUST BE SPECIFIED'
&ERROR   SETA 1
         AGO  .OPT030
.OPT020  DS   0H
&TROPT   SETC '&TRACE'
.OPT030  ANOP
         AIF  (T'&TRNBR EQ 'O').OPT040
         AIF  (&TRNBR LT 0).OPT050
         AIF  (&TRNBR GT 9999).OPT060
&TRNBRG  SETA &TRNBR
         AGO  .OPT070
.OPT040  ANOP
         MNOTE 12,'TRNBR MUST BE SPECIFIED'
&ERROR   SETA 1
         AGO  .OPT070
.OPT050  ANOP
         MNOTE 12,'TRNBR CANNOT BE LESS THAN ZERO'
&ERROR   SETA 1
         AGO  .OPT070
.OPT060  ANOP
         MNOTE 12,'TRNBR CANNOT BE GREATER THAN 9999'
&ERROR   SETA 1
.OPT070  ANOP
         AIF  (T'&MAXLINE EQ 'O').OPT080
         AIF  (&MAXLINE LT 0).OPT090
         AIF  (&MAXLINE GT 9999).OPT100
&MAXL    SETA &MAXLINE
         AGO  .OPT110
.OPT080  ANOP
         MNOTE 12,'MAXLINE MUST BE SPECIFIED'
&ERROR   SETA 1
         AGO  .OPT110
.OPT090  ANOP
         MNOTE 12,'MAXLINE CANNOT BE LESS THAN 0'
&ERROR   SETA 1
         AGO  .OPT110
.OPT100  ANOP
         MNOTE 12,'MAXLINE CANNOT BE GREATER THAN 9999'
&ERROR   SETA 1
.OPT110  ANOP
         AIF  (T'&MINLINE EQ 'O').OPT120
         AIF  (&MINLINE LT 0).OPT130
         AIF  (&MINLINE GT &MAXLINE).OPT140
&MINL    SETA &MINLINE
         AGO  .OPT150
.OPT120  ANOP
         MNOTE 12,'MINLINE MUST BE SPECIFIED'
&ERROR   SETA 1
         AGO  .OPT150
.OPT130  ANOP
         MNOTE 12,'MINLINE CANNOT BE LESS THAN ZERO'
&ERROR   SETA 1
         AGO  .OPT150
.OPT140  ANOP
         MNOTE 12,'MINLINE CANNOT BE GREATER THAN MAXLINE'
&ERROR   SETA 1
.OPT150  ANOP
         AIF  (T'&DALIST EQ 'O').OPT160
         AIF  ('&DALIST' EQ 'ON').OPT170
         AIF  ('&DALIST' EQ 'OFF').OPT170
         MNOTE 12,'DALIST MUST BE -ON- OR -OFF-'
&ERROR   SETA 1
         AGO  .OPT180
.OPT160  ANOP
         MNOTE 12,'DALIST MUST BE SPECIFIED'
&ERROR   SETA 1
         AGO  .OPT180
.OPT170  ANOP
&DAPRT   SETC '&DALIST'
.OPT180  ANOP
         AIF  (T'&COMLIST EQ 'O').OPT190
         AIF  ('&COMLIST' EQ 'ON').OPT200
         AIF  ('&COMLIST' EQ 'OFF').OPT200
         MNOTE 12,'COMLIST MUST BE -ON- OR -OFF-'
&ERROR   SETA 1
         AGO  .OPT210
.OPT190  ANOP
         MNOTE 12,'COMLIST MUST BE SPECIFIED'
&ERROR   SETA 1
         AGO  .OPT210
.OPT200  ANOP
&COMPRT  SETC  '&COMLIST'
.OPT210  ANOP
         AIF  (&ERROR EQ 0).EXIT
         MNOTE 12,'ERRORS IN SPECIFYING OPTIONS'
.EXIT    ANOP
         MEND
         DISOPT TRACE=ON,                                              +
               TRNBR=1000,                                             +
               MAXLINE=100,                                            +
               MINLINE=10,                                             +
               DALIST=OFF
./ ADD MEMBER=ITRACE
.* ------------------------------------------------------------------*
.*                                                                   *
.*                        TRACE MACRO                                *
.*                                                                   *
.*       The trace function always captures the CSECT name (taken    *
.*       from the module prefix data) and a TRACE ID (specified on   *
.*       this macro).                                                *
.*                                                                   *
.*       One or two data elements (8 bytes each) may be captured at  *
.*       any trace point.  The data to be captured may be specified  *
.*       in either of two ways: DATA1 or RDATA1 and DATA2 or RDATA2. *
.*       DATA1 and RDATA1 are mutually exclusive as are DATA2 and    *
.*       RDATA2.  DATA1 and DATA2 specify the address of data to be  *
.*       captured, RDATA1 and RDATA2 specify a register whose        *
.*       contents are to be captured.                                *
.*                                                                   *
.*       For example:                                                *
.*                                                                   *
.*                 ITRACE ID=POINTA,DATA1=VALUE1,RDATA2=R4           *
.*                                                                   *
.*          In this case the trace entry would include the CSECT     *
.*          name, the ID data "POINTA", 8 bytes of data beginning    *
.*          at VALUE1's address and the contents of register 4.      *
.*                                                                   *
.* ------------------------------------------------------------------*
         MACRO
&NAME    ITRACE &ID=,&DATA1=,&DATA2=,&RDATA1=,&RDATA2=
         GBLC  &TROPT
         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010
         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020
         AIF   ('&TROPT' EQ 'OFF').MEXIT
         AIF   (T'&DATA1 EQ 'O').DATA020
         AIF   ('&DATA1'(1,1) EQ '(').DATA010
         LA    R14,&DATA1         DATA ADDRESS
         MVC   TRDATA1,0(R14)     MOVE DATA
         AGO   .DATA030
.DATA010 ANOP
         MVC   TRDATA1,0&DATA1    MOVE DATA
         AGO   .DATA030
.DATA020 ANOP
         AIF   (T'&RDATA1 EQ 'O').DATA030
         STCM  &RDATA1,15,TRDATA1
.DATA030 ANOP
         AIF   (T'&DATA2 EQ 'O').DATA050
         AIF   ('&DATA2'(1,1) EQ '(').DATA040
         LA    R14,&DATA2         DATA ADDRESS
         MVC   TRDATA2,0(R14)     MOVE DATA
         AGO   .DATA060
.DATA040 ANOP
         MVC   TRDATA2,0&DATA2    MOVE DATA
         AGO   .DATA060
.DATA050 ANOP
         AIF   (T'&RDATA2 EQ 'O').DATA060
         STCM  &RDATA2,15,TRDATA2
.DATA060 ANOP
         BAL   R14,TRACE000       ENTER TRACE ROUTINE
         AIF      (T'&ID EQ 'O').NOID
&NAME    DC    CL8'&ID'           TRACE ID
         AGO   .ID
.NOID    ANOP
         MNOTE 4,'NO ID GIVEN, ''**NO ID**'' GENERATED'
&NAME    DC    CL8'**NOID**'
.ID      ANOP
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'
         MEXIT
.ERR0020 ANOP
         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'
.MEXIT   ANOP
         MEXIT
         MEND
./ ADD MEMBER=OPCODE
         MACRO
         OPCODE &MACH,                                                 +
               &MNEM,                                                  +
               &FORMAT,                                                +
               &LENGTH,                                                +
               &COMMENT,                                               +
               &FLAGS=,                                                +
               &REGS=,                                                 +
               &TYPE=DEFINE
         GBLB &OPSW
         GBLC &OPTBL(256),&HEXTBL(16)
         LCLA &SUB1,&SUB2,&SUB3
         LCLC &OP1,&OP2,&OPTS
         AIF  (&OPSW).LBL020
&OPSW    SETB 1
&SUB1    SETA 1
.LBL010  ANOP
&OPTBL(&SUB1) SETC '0'
&SUB1    SETA &SUB1+1
         AIF  (&SUB1 LE 256).LBL010
&HEXTBL(01) SETC '0'
&HEXTBL(02) SETC '1'
&HEXTBL(03) SETC '2'
&HEXTBL(04) SETC '3'
&HEXTBL(05) SETC '4'
&HEXTBL(06) SETC '5'
&HEXTBL(07) SETC '6'
&HEXTBL(08) SETC '7'
&HEXTBL(09) SETC '8'
&HEXTBL(10) SETC '9'
&HEXTBL(11) SETC 'A'
&HEXTBL(12) SETC 'B'
&HEXTBL(13) SETC 'C'
&HEXTBL(14) SETC 'D'
&HEXTBL(15) SETC 'E'
&HEXTBL(16) SETC 'F'
.LBL020  ANOP
         AIF  ('&TYPE' EQ 'INDEX').LBL100
         AIF  ('&TYPE' NE 'DEFINE').ERR70
         AIF  (T'&MACH EQ 'O').ERR010
         AIF  (K'&MACH NE 2).ERR020
         AIF  (T'&LENGTH EQ 'O').ERR080
         AIF  (&LENGTH EQ 2).LBL025
         AIF  (&LENGTH EQ 4).LBL025
         AIF  (&LENGTH NE 6).ERR090
.LBL025  ANOP
&OP1     SETC '&MACH'(1,1)
&OP2     SETC '&MACH'(2,1)
&SUB1    SETA 1
.LBL030  ANOP
         AIF  ('&OP1' EQ '&HEXTBL(&SUB1)').LBL040
         AIF  (&SUB1 EQ 16).ERR030
&SUB1    SETA &SUB1+1
         AGO  .LBL030
.LBL040  ANOP
&SUB2    SETA &SUB1
&SUB1    SETA 1
.LBL050  ANOP
         AIF  ('&OP2' EQ '&HEXTBL(&SUB1)').LBL060
         AIF  (&SUB1 EQ 16).ERR030
&SUB1    SETA &SUB1+1
         AGO  .LBL050
.LBL060  ANOP
&SUB3    SETA &SUB1
&SUB1    SETA (16*(&SUB2-1))+&SUB3
         AIF  ('&OPTBL(&SUB1)' NE '0').ERR040
&OPTBL(&SUB1) SETC 'MACH&MACH'
         AIF  (T'&MNEM EQ 'O').ERR050
         AIF  (T'&FORMAT EQ 'O').ERR060
MACH&MACH DC   CL2'&MACH'           MACHINE CODE FOR THIS INSTRUCTION
          DC   CL06'&MNEM'          MNEMONIC
          DC   AL2(&LENGTH)         INSTRUCTION LENGTH
          DC   AL1(&FORMAT)         FORMAT CODE
&OPTS    SETC '0'
         AIF  (T'&FLAGS EQ 'O').LBL070
&OPTS    SETC '&FLAGS'
.LBL070  ANOP
         AIF  (T'&COMMENT EQ 'O').LBL080
          DC   AL1(&OPTS)           FLAGS
         AGO   .LBL0090
.LBL080  ANOP
          DC   AL1(&OPTS+$OPNCMNT)  FLAGS + NO COMMENT INDICATOR
.LBL0090 ANOP
         AIF   (T'&REGS EQ 'O').LBL009A
          DC    AL1(&REGS)
         AGO   .LBL009B
.LBL009A ANOP
          DC    AL1(0)              NO REGISTER REQUIREMENTS
.LBL009B ANOP
         AIF   (T'&COMMENT EQ 'O').EXIT
          DC   CL25&COMMENT         COMMENT
         MEXIT
.LBL100  ANOP
&SUB1    SETA 1
.LBL110  ANOP
         DC    A(&OPTBL(&SUB1))
         AIF   (&SUB1 EQ 256).EXIT
&SUB1    SETA  &SUB1+1
         AGO   .LBL110
.ERR010  ANOP
         MNOTE 12,'MACHINE CODE IS REQUIRED'
         MEXIT
.ERR020  ANOP
         MNOTE 12,'MACHINE CODE MUST BE 2 CHARACTERS'
         MEXIT
.ERR030  ANOP
         MNOTE 12,'MACHINE CODE CONTAINS INVALID HEX CHARACTER'
         MEXIT
.ERR040  ANOP
         MNOTE 12,'MACHINE CODE &MACH IS DUPLICATELY DEFINED'
         MEXIT
.ERR050  ANOP
         MNOTE 12,'MNEMONIC IS REQUIRED'
         MEXIT
.ERR060  ANOP
         MNOTE 12,'INSTRUCTION FORMAT IS REQUIRED'
         MEXIT
.ERR070  ANOP
         MNOTE 12,'INVALID TYPE PARAMETER'
         MEXIT
.ERR080  ANOP
         MNOTE 12,'LENGTH IS REQUIRED'
         MEXIT
.ERR090  ANOP
         MNOTE 12,'LENGTH MUST BE 2, 4, OR 6'
.EXIT    ANOP
         MEND
./ ADD MEMBER=PRTBLOK
*---------------------------------------------------------------------*
*                                                                     *
*        PRINTER REQUEST BLOCK                                        *
*                                                                     *
*---------------------------------------------------------------------*
         MACRO
&NAME    PRTBLOK  &TYPE=
         AIF      ('&TYPE' EQ 'DSECT').DSECT
&NAME    DS    0C
         AGO      .NODSECT
.DSECT   ANOP
         AIF      (T'&NAME EQ 'O').NONAME
&NAME    DSECT
.NODSECT ANOP
PRTCMD   DC    X'00'               COMMAND
$PRTHEAD EQU   C'H'                .. PRINT HEADING
$PRTSUBH EQU   C'S'                .. PRINT SUB-HEADING
$PRTPRT  EQU   C'P'                .. PRINT
$PRTMEM  EQU   C'M'                .. NEW MEMBER
$PRTCLS  EQU   C'C'                .. CLOSE PRINT
PRTCC    DC    C' '                CARRIAGE CONTROL
PRTDATA  DC    CL132' '            PRINT DATA
         MEXIT
.NONAME  ANOP
         MNOTE    12,'NAME REQUIRED WHEN TYPE=DSECT'
         MEND
./ ADD MEMBER=REGEQU
R0       EQU    0
R1       EQU    1
R2       EQU    2
R3       EQU    3
R4       EQU    4
R5       EQU    5
R6       EQU    6
R7       EQU    7
R8       EQU    8
R9       EQU    9
R10      EQU    10
R11      EQU    11
R12      EQU    12
R13      EQU    13
R14      EQU    14
R15      EQU    15
