JCLFLOW  TITLE 'ISPF V2 EDIT MACRO TO REFORMAT AND CHECK JCL.'
         PRINT OFF
         MACRO
&NAME   $GENMSG  &M,&WH                                            -EU-
&NDX     SETC  '&SYSNDX'
&NAME    CLC   M&M.LNO,=F'-4'      MSG NEEDED?
         BE    GENA&NDX            NO
         L     R2,M&M.LNO          PICK UP HIGHEST OFFSET
         LA    R2,4(0,R2)          PLUS 1
         SRL   R2,2                DIVIDE BY 4, NUMBER TO INSERT
         LA    R3,M&M.LNO+4        1ST LINE NUMBER
GENB&NDX L     R1,0(0,R3)          PICK UP LINE NUMBER
         ST    R1,ADDLINE          SAVE AS INSERT POINT
         CALL  ISPLINK,(EDIT,LEN82,MSG&M),VL                       -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   &WH                 NOT ZERO, ERROR                 -EU-
         LA    R3,4(0,R3)          SKIP TO NEXT LINE NUMBER
         BCT   R2,GENB&NDX         COUNT OF NUMBER TO INSERT
GENA&NDX DS    0H
         MEND
         MACRO
&NAME   $NOTEMSG &M
&NDX     SETC  '&SYSNDX'
&NAME    L     R1,M&M.LNO          OFFSET INTO LINE NUMBER TBL
         LA    R1,4(0,R1)          GET NEXT ENTRY
         CH    R1,=Y(4*32)         TABLE FULL?
         BH    TBF&NDX             YES
         L     R14,ADDLINE         PICK UP CURRENT INSERT POINT
         ST    R14,M&M.LNO+4(R1)   SAVE LINE# FOR MESSAGE INSERT
         ST    R1,M&M.LNO          SAVE UPDATED OFFSET
TBF&NDX  DS    0H
         MEND
         PRINT ON
         SPACE 1
***********************************************************************
*   THIS PROGRAM WAS "OBTAINED" FROM FILE352 OF THE CBT TAPE. IN      *
*   ITS ORIGINAL FORM IT WAS A BATCH UTILITY, READING JCL FROM        *
*   SYSUT1 AND WRITING THE REFORMATTED STUFF ONTO SYSUT2. I           *
*   CHANGED IT BY ALTERING THE I/O LOGIC TO USE ISPF EDIT MACRO       *
*   SERVICES. THE BASIC LOGIC IS TO START AT THE TOP OF THE DECK      *
*   ASSIGNING EACH LINE TO VARIABLE "CARD". ANYTHING OTHER THAN       *
*   PART OF A DD STATEMENT IS LEFT AS IS. WHEN A DD STATEMENT IS      *
*   FOUND EACH LINE IS DELETED AFTER BEING READ. THE LINE NUMBER      *
*   AFTER WHICH TO INSERT REFORMATTED JCL IS REMEMBERED IN            *
*   VARIABLE "ADDLINE". AN ENTIRE DD STATEMENT IS READ IN,            *
*   CONTINUATION LINES AND ALL AND STORED IN "TABLEIN", EACH INPUT    *
*   LINE BEING DELETED AFTER ASSIGNMENT. THE DD STATEMENT IS THEN     *
*   FORMATTED BY BEING COPIED ONE PARAMETER AT A TIME OVER TO         *
*   "TABLEOUT". FROM "TABLEOUT" NEW LINES ARE INSERTED INTO THE       *
*   DATASET TO CONTAIN THE REFORMATTED DD STATEMENT. SINCE THE        *
*   NUMBER OF LINES IN THE DATASET COULD HAVE INCREASED, THE LINE     *
*   NUMBER OF THE LAST LINE IS RE-CALCULATED AS NECESSARY AND         *
*   REMEMBERED IN VARIABLE "LLINE".                                   *
***********************************************************************
         SPACE 1                                                   -EU-
*----------------------------------------------------------------* -EU-
* CHANGES/UPDATES : MOINIL P.A.                                  * -EU-
*  18/07/89 - EXTRACTED FROM CBT TAPE 89 FEB, FILE 047.          * -EU-
*           - MACROS ISPF, ISREDIT AND VDEFINE (FROM SOMEWHERE   * -EU-
*             ON THE CBT 89 FEB TAPE, FILE 435 OR 464) ARE NOW   * -EU-
*             REPLACED BY THEIR CORRESPONDING CALL ISPLINK.      * -EU-
*           - HELP PANEL DISPLAY ADDED.                          * -EU-
*           - DISPLAY ERROR MESSAGES.                            * -EU-
*           - DD PARAMETERS ADDED IN TABLES.                     * -EU-
*----------------------------------------------------------------* -EU-
         EJECT ,
***********************************************************************
*                                                                     *
*    THE FOLLOWING MACROS ARE USED IN JCLFLOW :                       *
*                                                                     *
*        LOCAL MACROS :                                               *
*                                                                     *
*   $GENMSG    - INSERT MESSAGE LINES INTO THE DATASET.               *
*   $NOTEMSG   - UPDATE A TABLE OF LINE NUMBERS AFTER WHICH TO INSERT *
*                A MESSAGE LINE.                                      *
*                                                                     *
*                                                                     *
*        REGISTER USAGE :                                             *
*                                                                     *
*  R0    UNUSED.                                                      *
*  R1    WORK REGISTER                                                *
*  R2    CURRENT POSITION WITHIN INPUT TEXT (TABLEIN)                 *
*  R3    LOOP COUNTER                                                 *
*  R4    CURRENT POSITION WITHIN OUTPUT AREA (TABLEOUT)               *
*        OR CURRENT ENTRY IN JCL PARAMETER TABLE.                     *
*  R5    WORK REGISTER                                                *
*  R6    WORK REGISTER                                                *
*  R7    LOOP CONTROL (BXLE)                                          *
*  R8    LOOP CONTROL (BXLE)                                          *
*  R9    LOOP CONTROL (BXLE)                                          *
*  R10   SUBROUTINE LINKAGE                                           *
*  R11   PROGRAM BASE REGISTER 1                                      *
*  R12   PROGRAM BASE REGISTER 2                                      *
*  R13   SAVE AREA BASE ADDRESS.                                      *
*  R14                                                                *
*  R15                                                                *
*                                                                     *
***********************************************************************
         EJECT ,
JCLFLOW  START 0                                               -EU-@MLI
         SPACE 1
        $DEFREG ,                                                  -EU-
         EJECT ,
*------- SET UP BASE REGISTERS AND SAVE AREA POINTERS.
         SPACE 1
        $XENT  BASE=(R11,R12)                                      -EU-
         EJECT ,                                                   -EU-
*------- OBTAIN THE FUNCTION AND DEFINE THIS PROGRAM               -EU-
*        AS AN EDIT MACRO.                                         -EU-
         SPACE 1                                                   -EU-
         CALL  ISPLINK,(VDEF,GNL0,FCDE,TYPEC,LEN8),VL              -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR1                NOT ZERO, ERROR                 -EU-
         CALL  ISPLINK,(EDIT,LEN16,PARM1),VL                       -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR2                NOT ZERO, ERROR                 -EU-
         OC    FCDE,=CL8' '        FOLD THE CODE TO UPPER CASE     -EU-
         CLC   FCDE,=CL8'HELP    ' LOOK IF REQUEST IS HELP         -EU-
         BE    DSHELP                                              -EU-
         CLC   FCDE,=CL8'H       '                                 -EU-
         BNE   PRCSS                                               -EU-
         EJECT ,                                                   -EU-
*------- DISPLAY THE HELP PANEL.                                   -EU-
         SPACE 1                                                   -EU-
DSHELP   CALL  ISPLINK,(DSPL,PNLH),VL                              -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR3                NOT ZERO, ERROR                 -EU-
         B     LEAVE                                               -EU-
         SPACE 1                                                   -EU-
         SPACE 1                                                   -EU-
         SPACE 1                                                   -EU-
         EJECT ,                                                   -EU-
*------- SET AND OBTAIN ALL NECESSARY PARAMETERS.                  -EU-
         SPACE 1                                                   -EU-
PRCSS    CALL  ISPLINK,(EDIT,LEN8,PARM2),VL                        -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR4                NOT ZERO, ERROR                 -EU-
         CALL  ISPLINK,(VDEF,GNL1,CARD,TYPEC,LEN80),VL             -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR5                NOT ZERO, ERROR                 -EU-
         CALL  ISPLINK,(VDEF,GNL2,LINENO,TYPEF,LEN4),VL            -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR6                NOT ZERO, ERROR                 -EU-
         CALL  ISPLINK,(VDEF,GNL3,LLINE,TYPEF,LEN4),VL             -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR7                NOT ZERO, ERROR                 -EU-
         CALL  ISPLINK,(VDEF,GNL4,ADDLINE,TYPEF,LEN4),VL           -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR8                NOT ZERO, ERROR                 -EU-
         CALL  ISPLINK,(EDIT,LEN28,PARM3),VL                       -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR9                NOT ZERO, ERROR                 -EU-
         MVC   LINENO,=F'0'                                        @MLI
         MVC   ADDLINE,=F'0'       INSERT AFTER ZERO TO START      @MLI
         EJECT
*------- MAINLINE OF THE PROGRAM -- BEGIN PROCESSING DATA.
         SPACE 1
GETUT1   L     R1,ADDLINE          GET NUMBER OF LAST INSERT       @MLI
         LA    R1,1(0,R1)          PLUS 1                          @MLI
         ST    R1,LINENO           GET NEXT NEW LINE               @MLI
         CLC   LINENO,LLINE        END OF FILE ON INPUT?           @MLI
         BH    ENDOFJOB            YES, GO TO END OF JOB
         SPACE 1
         CALL  ISPLINK,(EDIT,LEN28,PARM4),VL                       -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR10               NOT ZERO, ERROR                 -EU-
         CLC   CARD(2),=CL2'//'
         BNE   GETUT1A                                             @MLI
         CLC   CARD(3),=CL3'//*'
         BNE   GETUT1B             PROCESS THIS ONE                @MLI
GETUT1A  L     R1,ADDLINE          GET NUMBER OF LAST INSERT       @MLI
         LA    R1,1(0,R1)          PLUS 1                          @MLI
         ST    R1,ADDLINE          AND SAVE IT                     @MLI
         CLC   ADDLINE,LLINE       DOES IT LOOK LIKE THE BOTTOM    @MLI
         BL    GETUT1              NO, NEXT LINE                   @MLI
         CALL  ISPLINK,(EDIT,LEN28,PARM3),VL                       -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR11               NOT ZERO, ERROR                 -EU-
         B     GETUT1              TRY NEXT LINE                   @MLI
         SPACE 1
GETUT1B  CALL  ISPLINK,(EDIT,LEN20,PARM5),VL                       -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR12               NOT ZERO, ERROR                 -EU-
         CLC   CARD+2(69),INITOUT+2
         BE    ALLDONE
         LA    R2,20
         LA    R3,CARD+3
COMPARES CLC   0(5,R3),=CL5' JOB '
         BE    JOBCARD
         CLC   0(6,R3),=CL6' EXEC '
         BE    EXECARD
         CLC   0(4,R3),=CL4' DD '
         BE    DDCARD
         LA    R3,1(R3)
         BCT   R2,COMPARES
         SPACE 1
ALLDONE  MVC   CARD+72(8),INITOUT+2
         BAL   R10,PUTUT2
         B     GETUT1
         SPACE 1
JOBCARD  B     ALLDONE
EXECARD  B     ALLDONE
         EJECT
DDCARD   MVC   0(4,R3),=CL4'    '
         LA    R2,TINN
         L     R3,=AL4(TABLEIN)
         L     R4,=AL4(TABLEOUT)
INITLOOP MVC   0(80,R3),INITIN     SET INPUT WORKAREA TO HEX FF'S
         MVC   0(80,R4),INITOUT    SET OUTPUT WORKAREA TO '// '
         LA    R3,80(R3)
         LA    R4,80(R4)
         BCT   R2,INITLOOP
         MVC   CARD(2),INITOUT+2   BLANK OUT // FROM INPUT
         MVC   CARD+72(8),INITOUT+2 BLANK OUT SEQ# FROM INPUT
         L     R3,=AL4(TABLEIN)
         MVC   0(80,R3),CARD       MOVE JCL CARD TO INPUT WORKAREA
         L     R4,=AL4(TABLEOUT)
         MVC   12(2,R4),=CL2'DD'                                   -EU-
         BAL   R10,FINELOAD        LOAD ANY CONTINUATION CARDS
         L     R2,=AL4(TABLEIN+2)
         L     R3,=AL4(TABLEOUT+2)
         LA    R4,8
DDNAMEMV CLI   0(R2),C' '
         BE    DDNAMOVR
         MVC   0(1,R3),0(R2)       MOVE 1 CHAR OF DDNAME TO OUTPUT
         MVI   0(R2),C' '
         LA    R2,1(R2)
         LA    R3,1(R3)
         BCT   R4,DDNAMEMV
         EJECT
DDNAMOVR L     R6,=AL4(TABLEIN)
         ST    R6,CURENTRY         SAVE ADDR OF CURRENT INPUT RECORD
         LA    R6,72
         ST    R6,COUNT            SAVE COUNTS OF COLUMNS TO SEARCH
GOAGAIN  OI    NOPX+1,X'F0'
         L     R2,CURENTRY         RECORD TO SEARCH IN R2
         L     R3,COUNT            COLUMNS TO SEARCH IN R3
         BAL   R10,SEARCH          FIND A JCL PARAMETER, IF POSSIBLE
         CLI   HITSW,C'0'          WAS THERE ONE?
         BE    NEWENTRY            NO, WRITE OUT A NON-JCL RECORD
CONTINUE MVC   OUTADDR(4),TBTA(R4) SAVE ADDR IN TABLEOUT TO STORE PARM
         ST    R2,START            SAVE START OF POSSIBLE NEXT PARM
         NI    NOPX+1,X'0F'
         LA    R2,1(R2)            DON'T RE-FIND THE SAME PARM
         BCTR  R3,0                WHICH MEANS 1 FEWER COLUMNS TO SCAN
         BAL   R10,SEARCH          RESUME SCAN OF INPUT RECORD
         CLI   HITSW,C'0'          ANOTHER PARAMETER OR END OF CARD?
         BE    NEWENTRY            NO, GOTO NEXT STATEMENT
         ST    R2,STOP             SAVE END OF PREVIOUS PARAMETER
         L     R9,START            START OF PARAMETER TEXT
         L     R10,STOP            END OF PARAMETER TEXT
         SR    R10,R9              END MINUS START
         BCTR  R10,0               MINUS 1 IS LENGTH TO MOVE
         CLI   0(R9),C' '          STARTS BY A BLANK?              -EU-
         BNE   *+L'*+2             NO, OK                          -EU-
         BCTR  R10,0               DON'T MOVE STARTING BLANK       -EU-
         L     R9,OUTADDR          PICK UP PLACE TO SAVE IN TABLEOUT
         STC   R10,MOVEPARM+1      SET LENGTH TO SAVE TEXT
         STC   R10,CLEARPRM+1      SET LENGTH TO CLEAR INPUT
         STC   R10,78(R9)          SAVE LENGTH IN OUTPUT AREA
         L     R10,START           PICK UP START OF TEXT IN INPUT
         CLI   0(R10),C' '         STARTS BY A BLANK?              -EU-
         BNE   *+L'*+4             NO, OK                          -EU-
         LA    R10,1(R10)          DON'T MOVE STARTING BLANK       -EU-
MOVEPARM MVC   15(*-*,R9),0(R10)   SAVE IN TABLEOUT
CLEARPRM MVC   0(*-*,R10),INITOUT+2 BLANK OUT EQUIVALENT IN TABEIN
         MVI   79(R9),C'X'         FLAG THAT ONE AS GOOD
         CLI   EODCSW,C'1'         ANYTHING MORE ON INPUT?
         BNE   CONTINUE            YES, GO DO IT
         MVI   EODCSW,C'0'
         LR    R7,R10
         BAL   R10,SAVECMNT
NEWENTRY L     R6,CURENTRY
         LA    R6,80(R6)
         CLC   0(80,R6),INITIN
         BE    WRITEIT
         ST    R6,CURENTRY
         B     GOAGAIN
         EJECT
WRITEIT  LA    R3,TOUTN
         L     R4,=AL4(TABLEOUT)
         MVC   CARDSAVE,CARD
         BAL   R10,LASTLOOK
         BAL   R10,ADCOMMAS
         BAL   R10,ADCOMNTS
         L     R1,=AL4(TABLEOUT)
         CLI   79(R1),C'X'
         BE    WRITLOOP
         MVC   SLOTSAVE(L'SLOTSAVE),2(R1)
         NI    BYSLOT+1,X'0F'
WRITLOOP MVC   CARD(80),0(R4)
         CLI   CARD+79,C'X'
         BNE   BUMPWRIT
BYSLOT   B     BLANKX
         MVC   CARD+2(L'SLOTSAVE),SLOTSAVE
         OI    BYSLOT+1,X'F0'
BLANKX   MVC   CARD+78(2),INITOUT+2
         BAL   R10,PUTUT2
BUMPWRIT LA    R4,80(R4)
         BCT   R3,WRITLOOP
         CLI   ECSW,C'1'
         BNE   WITEXIT
         MVI   ECSW,C' '
         MVC   CARD,ECARD
         BAL   R10,PUTUT2
WITEXIT  MVC   SLOTSAVE(L'SLOTSAVE),INITOUT+2
         MVC   CARD,CARDSAVE
         B     GETUT1                                              @MLI
         EJECT
ENDOFJOB XR    R15,R15
        $GENMSG 1,ERR17                                        -EU-@MLI
        $GENMSG 2,ERR18                                        -EU-@MLI
        $GENMSG 3,ERR19                                        -EU-@MLI
        $GENMSG 4,ERR20                                        -EU-@MLI
LEAVE   $XRET  CC=(R15)                                            -EU-
         EJECT ,                                                   -EU-
*------- SET LONG MESSAGE SPECIFIC TEXT FOR ERROR DIAGNOSE.        -EU-
         SPACE 1                                                   -EU-
ERR1     MVC   MLOP,=CL8'FUNCTION'                                 -EU-
ERRA     MVC   MLFU,VDEF                                           -EU-
         B     ERRET                                               -EU-
ERR2     MVC   MLOP,PARM1                                          -EU-
ERRB     MVC   MLFU,EDIT                                           -EU-
         B     ERRET                                               -EU-
ERR3     MVC   MLOP,=CL8'HELP    '                                 -EU-
         MVC   MLFU,DSPL                                           -EU-
         B     ERRET                                               -EU-
ERR4     MVC   MLOP,PARM2                                          -EU-
         B     ERRB                                                -EU-
ERR5     MVC   MLOP,=CL8'CARD    '                                 -EU-
         B     ERRA                                                -EU-
ERR6     MVC   MLOP,=CL8'LINENO  '                                 -EU-
         B     ERRA                                                -EU-
ERR7     MVC   MLOP,=CL8'LLINE   '                                 -EU-
         B     ERRA                                                -EU-
ERR8     MVC   MLOP,=CL8'ADDLINE '                                 -EU-
         B     ERRA                                                -EU-
ERR9     MVC   MLSQ,=CL3'(1)'                                      -EU-
ERRC     MVC   MLOP(L'MLOP),PARM3                                  -EU-
         B     ERRB                                                -EU-
ERR10    MVC   MLSQ,=CL3'(1)'                                      -EU-
ERRD     MVC   MLOP,=CL8'(CARD)  '                                 -EU-
         B     ERRB                                                -EU-
ERR11    MVC   MLSQ,=CL3'(2)'                                      -EU-
         B     ERRC                                                -EU-
ERR12    MVC   MLSQ,=CL3'(1)'                                      -EU-
ERRE     MVC   MLOP,=CL8'DELETE  '                                 -EU-
         B     ERRB                                                -EU-
ERR13    MVC   MLSQ,=CL3'(2)'                                      -EU-
         B     ERRD                                                -EU-
ERR14    MVC   MLSQ,=CL3'(2)'                                      -EU-
         B     ERRE                                                -EU-
ERR15    MVC   MLOP,=CL8'LINE_A  '                                 -EU-
         B     ERRB                                                -EU-
ERR16    MVC   MLSQ,=CL3'(3)'                                      -EU-
         B     ERRC                                                -EU-
ERR17    MVC   MLSQ,=CL3'(1)'                                      -EU-
ERRF     MVC   MLOP,=CL8'$GENMSG '                                 -EU-
         B     ERRB                                                -EU-
ERR18    MVC   MLSQ,=CL3'(2)'                                      -EU-
         B     ERRF                                                -EU-
ERR19    MVC   MLSQ,=CL3'(3)'                                      -EU-
         B     ERRF                                                -EU-
ERR20    MVC   MLSQ,=CL3'(4)'                                      -EU-
         B     ERRF                                                -EU-
         SPACE 1                                                   -EU-
*------- CALL ISPLINK TO SET SHORT/LONG MESSAGES.                  -EU-
         SPACE 1                                                   -EU-
ERRET    CVD   R15,WORKD           EDIT RETURN CODE RECEIVED       -EU-
         MVC   MSRC,=XL4'40202120'                                 -EU-
         ED    MSRC,WORKD+6                                        -EU-
         CALL  ISPLINK,(VREP,MS,MSL,MSV),VL                        -EU-
         LR    R9,R15                                              -EU-
         CALL  ISPLINK,(VREP,ML,MLL,MLV),VL                        -EU-
         LTR   R9,R9                                               -EU-
         BZ    *+L'*+6                                             -EU-
         SLL   R15,8                                               -EU-
         OR    R9,R15                                              -EU-
         CALL  ISPLINK,(SETM,MSGID),VL                             -EU-
         LTR   R9,R9                                               -EU-
         BZ    *+L'*+8                                             -EU-
         SLL   R15,16                                              -EU-
         OR    R9,R15                                              -EU-
         LR    R15,R9                                              -EU-
         B     LEAVE                                               -EU-
         EJECT
*------- SUBROUTINE TO FINISH LOAD OF THE INPUT TABLE.
         SPACE 1
FINELOAD ST    R10,FINESAVE
         MVI   FINEON,C'1'
         L     R7,=AL4(TABLEIN)    DD CARD BEING SCANNED           @MLI
         LA    R8,1                ONE COLUME AT A TIME            @MLI
         L     R9,=AL4(TABLEIN+70) LAST COLUMN FOR ', '            @MLI
         CLC   0(2,R7),=C', '      CONTINUATION INDICATED?         @MLI
         BE    *+L'*+8             YES, READ IN MORE               @MLI
         BXLE  R7,R8,*-10          SCAN ENTIRE CARD                @MLI
         B     FINERTRN            NO, CONTINUE                    @MLI
         LA    R8,24
         L     R9,=AL4(TABLEIN+80)
FINEGET  CLC   LINENO,LLINE        ANY MORE DATA LINES?            @MLI
         BH    FINERTRN            NO                              @MLI
         CALL  ISPLINK,(EDIT,LEN28,PARM4),VL                       -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR13               NOT ZERO, ERROR                 -EU-
         CALL  ISPLINK,(EDIT,LEN20,PARM5),VL                       -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR14               NOT ZERO, ERROR                 -EU-
         BAL   R10,CHECKER
         MVC   CARD(2),=CL2' '
         MVC   CARD+72(8),=CL8' '
         MVC   0(80,R9),CARD
         CLI   MOREDD,C'0'         END OF THIS DD STATEMENT?       @MLI
         BE    FINERTRN            YES                             @MLI
         LA    R9,80(R9)
         BCT   R8,FINEGET
FINERTRN MVI   FINEON,C'0'
         L     R10,FINESAVE
         BR    R10
         EJECT
*------- ROUTINE TO CHECK FOR CONTINUATION CARDS OF A DD CARD.
         SPACE 1
CHECKER  CLC   CARD(3),=CL3'//*'
         BE    NOMODD
         CLC   CARD(2),=CL2'//'
         BNE   NOMODD
         CLC   CARD+2(14),INITOUT+2
         BE    NOMODD
         LA    R2,CARD+2
         LA    R3,68               CONTINUATION COULD BE 3-70      @MLI
CHKLOOP  CLC   0(2,R2),=CL2', '    CONTINUATION                    @MLI
         BE    MODD                YES, MORE TO THIS DD            @MLI
         LA    R2,1(R2)
         BCT   R3,CHKLOOP
NOMODD   MVI   MOREDD,C'0'
         BR    R10
MODD     MVI   MOREDD,C'1'                                         @MLI
         BR    R10
         EJECT
*------  ROUTINE TO SEARCH FOR PARAMETERS IN A DD CARD.
*        SET R2 TO START OF DD STATEMENT PARAMETER TEXT,
*        SET R4 TO CORRESPONDING ENTRY IN "TABLE".
         SPACE 1
SEARCH   LA    R4,TABLE
         LA    R5,PTBNE
         MVI   HITSW,C'0'
SETLEN   MVC   COMPARE+1(L'TBFL),TBFL(R4)
         CLI   0(R2),C''''
         BE    QUOTE
COMPARE  CLC   0(*-*,R2),TBFN(R4)
         BE    HIT
NOPX     NOP   BUMP
         CLI   0(R2),C' '
         BE    EODCARD
BUMP     LA    R4,L'TABLE(R4)
         BCT   R5,SETLEN
BUMPC    LA    R2,1(R2)
         BCT   R3,SEARCH
         BR    R10
HIT      MVI   HITSW,C'1'
         BR    R10
EODCARD  MVI   EODCSW,C'1'
         BE    HIT
QUOTELUP CLI   0(R2),C''''
         BE    BUMPC
QUOTE    LA    R2,1(R2)
         BCT   R3,QUOTELUP
         B     EODCARD
         EJECT
*------- ROUTINE TO MARK INPUT AREA FOR SAVING COMMENTS.
         SPACE 1
SAVECMNT XR    R4,R4
         IC    R4,78(R9)
         AR    R7,R4
         LA    R7,1(R7)
         LR    R4,R3
         BCT   R4,*+L'*+6
         CLC   0(0,R7),INITOUT+2
         EX    R4,*-6
         BER   R10
         L     R5,CURENTRY
         MVI   0(R5),C'C'
         BR    R10
         EJECT
*------- ROUTINE TO SCAN OUTPUT AREA AND INSERT COMMAS WHERE NECESSARY.
         SPACE 1
ADCOMMAS CLI   79(R4),C'X'
         BNE   ADCBUMP
         CLC   15(3,R4),=CL3'DCB'
         BNE   ADCCONT
         CLI   ECSW,C'1'
         BNE   ADCCONT
         MVI   ADCMVCOM+1,C','
ADCCONT  LR    R5,R4
         LA    R5,15(R5)
         XR    R6,R6
         IC    R6,78(R4)
         LA    R6,1(R6)
         AR    R5,R6
         CLI   0(R5),C','
         BE    ADCBUMP
         BCTR  R5,0
         CLI   0(R5),C','
         BE    ADCBUMP
         LA    R5,1(R5)
         MVI   0(R5),C','
ADCBUMP  LA    R4,80(R4)
         LR    R7,R5
         BCT   R3,ADCOMMAS
ADCMVCOM MVI   0(R7),C' '
         LA    R3,TOUTN
         L     R4,=AL4(TABLEOUT)
         MVI   ADCMVCOM+1,C' '
         BR    R10
         EJECT
*------- ROUTINE TO MOVE COMMENTS FROM INPUT AREA TO OUTPUT AREA.
         SPACE 1
ADCOMNTS L     R5,=AL4(TABLEIN)
         LA    R6,TINN
CLIC     CLI   0(R5),C'C'
         BE    COMPUTE
ADCBUMP2 LA    R5,80(R5)
         BCT   R6,CLIC
         B     INCMNTS
COMPUTE  LA    R7,71
         LR    R3,R5
         LA    R3,1(R3)
CLIBLANK CLI   0(R3),C' '
         BNE   CMNTSTRT
         LA    R3,1(R3)
         BCT   R7,CLIBLANK
         MVI   0(R5),C' '
         B     ADCBUMP2
CMNTSTRT ST    R3,FULLWORD
         MVC   1(4,R5),FULLWORD
         LR    R3,R5
         LA    R3,71(R3)
CLIBLNK2 CLI   0(R3),C' '
         BNE   CMNTEND
         BCTR  R3,0
         BCT   R7,CLIBLNK2
         MVI   0(R5),C' '
         B     ADCBUMP2
CMNTEND  STC   R7,5(R5)
         B     ADCBUMP2
INCMNTS  L     R5,=AL4(TABLEIN)
         LA    R6,TINN
INCSCLIC CLI   0(R5),C'C'
         BE    INSERT
INCSBUMP LA    R5,80(R5)
         BCT   R6,INCSCLIC
         B     ADCEXIT
INSERT   MVC   FULLWORD,1(R5)
         L     R1,FULLWORD
         MVC   MVCX+1(1),5(R5)
         MVC   MVCY+1(1),5(R5)
         LR    R7,R4
         XR    R15,R15
         IC    R15,5(R5)
         SR    R7,R15
         SH    R7,=H'9'
         LA    R7,80(R7)
         CLI   0(R7),C' '
         BE    MVCX
         LA    R4,80(R4)
         B     INSERT
MVCX     MVC   0(*-*,R7),0(R1)
MVCY     MVC   0(*-*,R1),INITOUT+2
         MVC   0(6,R5),INITOUT+2
         LA    R4,80(R4)
         B     INCSBUMP
ADCEXIT  LA    R3,TOUTN
         L     R4,=AL4(TABLEOUT)
         BR    R10
         EJECT
*------- ROUTINE TO CHECK INPUT AREA FOR ANY DATA LEFT.
         SPACE 1
LASTLOOK CLI   DCBSW,C'1'
         BNE   LLEXIT
         L     R4,=AL4(TABLEIN)
LLGOON   CLC   0(72,R4),INITOUT+2
         BNE   CHKITOUT
LLBUMP   LA    R4,80(R4)
         BCT   R3,LLGOON
LLEXIT   LA    R3,TOUTN
         L     R4,=AL4(TABLEOUT)
         BR    R10
CHKITOUT MVC   CARD(80),0(R4)
         LA    R5,72
         LA    R6,CARD
CIOCLI   CLI   0(R6),C' '
         BNE   CIOCOMP
         LA    R6,1(R6)
         BCT   R5,CIOCLI
         B     LLBUMP
CIOCOMP  LA    R5,DCBTABL
         LA    R7,TDCBN            REMOVED WEIRD DCB OPTIONS       @MLI
MVCCLID  MVC   *+L'*+1(L'TDCBFL),TDCBFL(R5)
         CLC   TDCBFN(*-*,R5),0(R6)
         BE    DCBCONT
         LA    R5,L'DCBTABL(R5)
         BCT   R7,MVCCLID
         B     LLBUMP
DCBCONT  MVC   ECARD(80),INITOUT
         MVC   ECARD+15(55),0(R6)
         MVI   ECSW,C'1'
         B     LLBUMP
         EJECT
PUTUT2   CLC   CARD+15(6),=C'SPACE=' SPACE PARAMETER?              @MLI
         BNE   PUTUT2A             NO                              @MLI
         L     R1,=AL4(TABLEOUT)   ADDR OF DSN= (MAYBE)            @MLI
         CLC   15(4,R1),=C'DSN='   DSN PARAMETER?                  @MLI
         BNE   PUTUT2A             NO, MUST BE TEMP                @MLI
         CLI   19(R1),C'&&'        TEMP NAME?                      @MLI
         BE    PUTUT2A             YES, LEAVE THEM                 @MLI
         CLI   CARD+22,C'0'        QUANTITY IN BLOCKS?             @MLI
         BNL   PUTUT2A             THAT'S GOOD                     @MLI
        $NOTEMSG 1                                                 @MLI
         LA    R7,CARD+21          START OF SPACE SUBPARMS         @MLI
         LA    R8,1                1 COLUMN AT A TIME              @MLI
         LA    R9,CARD+71          LAST VALID COLUMN               @MLI
PUTUT20  CLC   0(5,R7),=C',RLSE'   RLSE PARAMETER?                 @MLI
         BE    PUTUT2A             GOOD FOR YOU                    @MLI
         BXLE  R7,R8,PUTUT20       SCAN REST OF INPUT              @MLI
        $NOTEMSG 4                                                 @MLI
PUTUT2A  CLC   CARD+15(4),=C'DCB=' DCB PARAMETER?                  @MLI
         BNE   PUTUT2B             NO                              @MLI
         L     R1,=AL4(TABLEOUT)   ADDR OF DSN= (MAYBE)            @MLI
         CLC   15(4,R1),=C'DSN='   DSN PARAMETER?                  @MLI
         BNE   PUTUT2B             IGNORE BAD DCB FOR DUMMY ETC... @MLI
         LA    R7,CARD+19          START OF DCB SUBPARAMETERS      @MLI
         LA    R8,1                1 COLUMN AT A TIME              @MLI
         LA    R9,CARD+71          LAST VALID COLUMN               @MLI
PUTUT2AA CLC   0(8,R7),=C'BLKSIZE=' BLKSIZE PARM                   @MLI
         BE    PUTUT2AB            YES                             @MLI
         BXLE  R7,R8,PUTUT2AA      SCAN OVER CARD                  @MLI
         B     PUTUT2B             BLKSIZE= NOT MANDATORY          @MLI
PUTUT2AB LA    R7,8(0,R7)          SKIP OVER BLKSIZE=              @MLI
         LR    R1,R7               SAVE START OF BLKSIZE VALUE     @MLI
PUTUT2AC CLI   0(R7),C','          END OF BLKSIZE VALUE            @MLI
         BE    PUTUT2AD            YES                             @MLI
         CLI   0(R7),C' '          BLANK IS THE END ALSO           @MLI
         BE    PUTUT2AD            YES                             @MLI
         CLI   0(R7),C')'          OR MAYBE A CLOSE BRACKET        @MLI
         BE    PUTUT2AD            YES                             @MLI
         BXLE  R7,R8,PUTUT2AC      SCAN UNTIL END OF BLKSIZE       @MLI
         B     PUTUT2B             QUIT IF IT LOOKS WEIRD          @MLI
PUTUT2AD SR    R7,R1               R7 = LENGTH OF BLKSIZE VALUE    @MLI
         BCTR  R7,0                MINUS 1 FOR EXECUTE             @MLI
         B     *+L'*+6             SKIP OVER EXECUTED INSTR        @MLI
         PACK  DOUBLE,0(0,R1)      (EXECUTED)                      @MLI
         EX    R7,*-6              PACK BLKSIZE VALUE              @MLI
         CVB   R7,DOUBLE           PICK UP BLOCK SIZE              @MLI
         CH    R7,=H'788'          COMPARE TO ARBITRARY SIZE   -EU-@MLI
         BH    PUTUT2B             BIG IS GOOD                     @MLI
        $NOTEMSG 2                                                 @MLI
PUTUT2B  CLC   CARD+15(6),=C'DISP=(' DISP PARAMETER?               @MLI
         BNE   PUTUT2C             NO                              @MLI
         LA    R7,CARD+21          START OF DCB SUBPARAMETERS      @MLI
         LA    R8,1                1 COLUMN AT A TIME              @MLI
         LA    R9,CARD+71          LAST VALID COLUMN               @MLI
PUTUT2BA CLC   0(11,R7),=C',CATLG,KEEP' BAD DISP                   @MLI
         BE    PUTUT2BB            YES                             @MLI
         BXLE  R7,R8,PUTUT2BA      SCAN REMAINDER OF RECORD        @MLI
         B     PUTUT2C             NO NEWS IS GOOD NEWS            @MLI
PUTUT2BB $NOTEMSG 3                                                @MLI
         SPACE 1
*------- INSERT A REFORMATTED LINE FROM VARIABLE CARD.
*        ADDLINE IS THE LINE# OF THE LAST REFORMATTED LINE, THAT IS
*        THE LINE AFTER WHICH TO INSERT NEW STUFF. SINCE THIS LOGIC
*        MAY HAVE CHANGED THE NUMBER OF LINES IN THE DATASET, LLINE
*        MUST BE RESET, IF WE SEEM TO BE AT THE BOTTOM.
         SPACE 1
PUTUT2C  CALL  ISPLINK,(EDIT,LEN32,PARM6),VL                       -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR15               NOT ZERO, ERROR                 -EU-
         L     R1,ADDLINE          PICK OLD INSERT POINT           @MLI
         LA    R1,1(0,R1)          PLUS 1                          @MLI
         ST    R1,ADDLINE          NEXT INSERT AFTER THE LAST      @MLI
         CLC   ADDLINE,LLINE       DOES IT LOOK LIKE THE BOTTOM    @MLI
         BLR   R10                 NO, GOBACK                      @MLI
         CALL  ISPLINK,(EDIT,LEN28,PARM3),VL                       -EU-
         LTR   R15,R15             CHECK RETURN CODE               -EU-
         BNZ   ERR16               NOT ZERO, ERROR                 -EU-
         BR    R10
         EJECT
*------- CONSTANTS AND WORK-AREAS.
         SPACE 1
FINESAVE DC    F'0'
OUTADDR  DC    F'0'
CURENTRY DC    F'0'
NXTENTRY DC    F'0'
COUNT    DC    F'0'
START    DC    F'0'
STOP     DC    F'0'
         SPACE 1
LINENO   DC    F'0'                 CURRENT LINE NUMBER            @MLI
LLINE    DC    F'0'                 LAST LINE.                     @MLI
ADDLINE  DC    F'0'                 LINE AFTER WHICH TO INSERT.    @MLI
FULLWORD DC    F'0'
DOUBLE   DC    D'0'
WORKD    DC    D'0'                                                -EU-
         SPACE 1                                                   -EU-
FCDE     DC    CL8' '               AREA FOR THE FUNCTION.         -EU-
EDIT     DC    CL8'ISREDIT '                                       -EU-
VDEF     DC    CL8'VDEFINE '                                       -EU-
DSPL     DC    CL8'DISPLAY '                                       -EU-
VREP     DC    CL8'VREPLACE'                                       -EU-
SETM     DC    CL8'SETMSG  '                                       -EU-
MSGID    DC    CL8'ISRZ001 '                                       -EU-
         SPACE 1                                                   -EU-
LEN4     DC    F'4'                                                -EU-
LEN8     DC    F'8'                                                -EU-
LEN16    DC    F'16'                                               -EU-
LEN20    DC    F'20'                                               -EU-
LEN28    DC    F'28'                                               -EU-
LEN32    DC    F'32'                                               -EU-
LEN80    DC    F'80'                                               -EU-
LEN82    DC    F'82'                                               -EU-
MSL      DC    A(MSVL)                                             -EU-
MLL      DC    A(MLVL)                                             -EU-
         SPACE 1                                                   -EU-
PARM1    DC    CL16'MACRO (FCDE) '                                 -EU-
PARM2    DC    CL8'RESET   '                                       -EU-
PARM3    DC    CL28'(LLINE) = LINENUM .ZLAST '                     -EU-
PARM4    DC    CL28'(CARD) = LINE &&LINENO '                       -EU-
PARM5    DC    CL20'DELETE &&LINENO '                              -EU-
PARM6    DC    CL32'LINE_AFTER &&ADDLINE = (CARD) '                -EU-
TYPEC    DC    CL8'CHAR    '                                       -EU-
TYPEF    DC    CL8'FIXED   '                                       -EU-
PNLH     DC    CL8'PAJTJCLF'                                       -EU-
GNL0     DC    C'(FCDE)'                                           -EU-
GNL1     DC    C'(CARD)'                                           -EU-
GNL2     DC    C'(LINENO)'                                         -EU-
GNL3     DC    C'(LLINE)'                                          -EU-
GNL4     DC    C'(ADDLINE)'                                        -EU-
MS       DC    C'(ZEDSMSG)'                                        -EU-
ML       DC    C'(ZEDLMSG)'                                        -EU-
MSV      DC    C'RC ='                                             -EU-
MSRC     DC    CL4' '                                              -EU-
MSVL     EQU   *-MSV                                               -EU-
MLV      DC    C'-- ERROR AT FUNCTION : '                          -EU-
MLFU     DC    CL8' ',C' / OPERATION : '                           -EU-
MLOP     DC    CL8' ',C' --'                                       -EU-
MLSQ     DC    CL3' '                                              -EU-
MLVL     EQU   *-MLV                                               -EU-
         SPACE 1
PRNT1SW  DC    XL1'00'
PRNT2SW  DC    XL1'00'
UT2SW    DC    XL1'00'
FINEON   DC    C'0'
MOREDD   DC    C'0'
HITSW    DC    C'0'
EODCSW   DC    C'0'
DCBSW    DC    C'1'
ECSW     DC    C' '
         SPACE 1
MSG1     DC    CL82'LINE_AFTER &&ADDLINE = MSGLINE '' SPACE SHOULD BE AX
               LLOCATED IN BLOCKS.'''                              @MLI
M1LNO    DC    F'-4',32F'0'                                        @MLI
MSG2     DC    CL82'LINE_AFTER &&ADDLINE = MSGLINE '' BLOCK SIZE IS TOOX
                SMALL.'''                                          @MLI
M2LNO    DC    F'-4',32F'0'                                        @MLI
MSG3     DC    CL82'LINE_AFTER &&ADDLINE = MSGLINE '' USE DISP=(,CATLG,X
               DELETE) NOT DISP=(,CATLG,KEEP).'''                  @MLI
M3LNO    DC    F'-4',32F'0'                                        @MLI
MSG4     DC    CL82'LINE_AFTER &&ADDLINE = MSGLINE '' THE "RLSE" PARAMEX
               TER SHOULD BE USED.'''                              @MLI
M4LNO    DC    F'-4',32F'0'                                        @MLI
         SPACE 1
INITIN   DC    0XL80'0',80X'FF'
INITOUT  DC    CL80'// '
         SPACE 1
CARD     DC    CL80' '
         DC    CL40' '
CARDSAVE DC    CL80' '
ECARD    DC    CL80' '
         DC    CL40' '             SAFETY FILLER
         SPACE 1
SLOTSAVE DC    CL13' '
         SPACE 1
         LTORG
         EJECT
DCBTABL  DS    0CL9                                                -EU-
TDCBFL   EQU   0,1                 NAME LENGTH                     -EU-
TDCBFN   EQU   1,8                 PARM. NAME                      -EU-
         DC    AL1(4),CL8'BFALN'                                   -EU-
         DC    AL1(4),CL8'BFTEK'
         DC    AL1(6),CL8'BLKSIZE'
         DC    AL1(4),CL8'BUFIN'                                   -EU-
         DC    AL1(3),CL8'BUFL'                                    -EU-
         DC    AL1(5),CL8'BUFMAX'                                  -EU-
         DC    AL1(4),CL8'BUFNO'
         DC    AL1(5),CL8'BUFOFF'                                  -EU-
         DC    AL1(5),CL8'BUFOUT'                                  -EU-
         DC    AL1(6),CL8'BUFSIZE'                                 -EU-
         DC    AL1(3),CL8'CPRI'                                    -EU-
         DC    AL1(5),CL8'CYLOFL'                                  -EU-
         DC    AL1(2),CL8'DEN'
         DC    AL1(5),CL8'DIAGNS'                                  -EU-
         DC    AL1(4),CL8'DSORG'
         DC    AL1(4),CL8'EROPT'
         DC    AL1(3),CL8'FUNC'
         DC    AL1(3),CL8'GNCP'                                    -EU-
         DC    AL1(4),CL8'INTVL'                                   -EU-
         DC    AL1(6),CL8'IPLTXID'                                 -EU-
         DC    AL1(5),CL8'KEYLEN'
         DC    AL1(4),CL8'LIMCT'
         DC    AL1(4),CL8'LRECL'
         DC    AL1(3),CL8'MODE'                                    -EU-
         DC    AL1(2),CL8'NCP'
         DC    AL1(2),CL8'NTM'                                     -EU-
         DC    AL1(4),CL8'OPTCD'
         DC    AL1(2),CL8'PCI'                                     -EU-
         DC    AL1(4),CL8'PRTSP'                                   -EU-
         DC    AL1(4),CL8'RECFM'
         DC    AL1(6),CL8'RESERVE'                                 -EU-
         DC    AL1(2),CL8'RKP'
         DC    AL1(4),CL8'STACK'                                   -EU-
         DC    AL1(5),CL8'THRESH'                                  -EU-
         DC    AL1(4),CL8'TRTCH'                                   -EU-
TDCBN    EQU   ((*-DCBTABL)/L'DCBTABL)                             -EU-
         SPACE 1
TABLE    DS    0CL25                                           -EU-@MLI
TBTA     EQU   0,4                 TARGET ADDRESS                  -EU-
TBFL     EQU   4,1                 NAME LENGTH                     -EU-
TBFN     EQU   5,20                PARM. NAME                      -EU-
         DC    AL4(TABLEOUT),AL1(3),CL20'DSN='                     @MLI
         DC    AL4(TABLEOUT),AL1(6),CL20'DSNAME='                  -EU-
         DC    AL4(TABLEOUT),AL1(6),CL20'DDNAME='                  -EU-
         DC    AL4(TABLEOUT),AL1(6),CL20'SYSOUT='                  @MLI
         DC    AL4(TABLEOUT),AL1(4),CL20' DATA'                    @MLI
         DC    AL4(TABLEOUT),AL1(1),CL20' *'                       @MLI
         DC    AL4(TABLEOUT),AL1(5),CL20' DUMMY'                   @MLI
         DC    AL4(TABLEOUT+80),AL1(4),CL20'DISP='                 @MLI
         DC    AL4(TABLEOUT+(2*80)),AL1(4),CL20'UNIT='             @MLI
         DC    AL4(TABLEOUT+(3*80)),AL1(5),CL20'SPACE='            @MLI
         DC    AL4(TABLEOUT+(4*80)),AL1(5),CL20'LABEL='            @MLI
         DC    AL4(TABLEOUT+(5*80)),AL1(3),CL20'VOL='              @MLI
         DC    AL4(TABLEOUT+(5*80)),AL1(6),CL20'VOLUME='           -EU-
         DC    AL4(TABLEOUT+(6*80)),AL1(3),CL20'AMP='              @MLI
         DC    AL4(TABLEOUT+(7*80)),AL1(6),CL20'COPIES='           @MLI
         DC    AL4(TABLEOUT+(8*80)),AL1(3),CL20'FCB='              @MLI
         DC    AL4(TABLEOUT+(9*80)),AL1(5),CL20'CHARS='            @MLI
         DC    AL4(TABLEOUT+(10*80)),AL1(5),CL20'BURST='           -EU-
         DC    AL4(TABLEOUT+(11*80)),AL1(5),CL20'CHKPT='           -EU-
         DC    AL4(TABLEOUT+(12*80)),AL1(4),CL20'CNTL='            -EU-
         DC    AL4(TABLEOUT+(13*80)),AL1(4),CL20'DEST='            -EU-
         DC    AL4(TABLEOUT+(14*80)),AL1(3),CL20'DLM='             -EU-
         DC    AL4(TABLEOUT+(15*80)),AL1(4),CL20'DSID='            -EU-
         DC    AL4(TABLEOUT+(16*80)),AL1(5),CL20'FLASH='           -EU-
         DC    AL4(TABLEOUT+(17*80)),AL1(4),CL20'FREE='            -EU-
         DC    AL4(TABLEOUT+(18*80)),AL1(4),CL20'HOLD='            -EU-
         DC    AL4(TABLEOUT+(19*80)),AL1(6),CL20'MODIFY='          -EU-
         DC    AL4(TABLEOUT+(20*80)),AL1(5),CL20'MSVGP='           -EU-
         DC    AL4(TABLEOUT+(21*80)),AL1(6),CL20'OUTLIM='          -EU-
         DC    AL4(TABLEOUT+(22*80)),AL1(6),CL20'OUTPUT='          -EU-
         DC    AL4(TABLEOUT+(23*80)),AL1(7),CL20'PROTECT='         -EU-
         DC    AL4(TABLEOUT+(24*80)),AL1(5),CL20'QNAME='           -EU-
         DC    AL4(TABLEOUT+(25*80)),AL1(6),CL20'SUBSYS='          -EU-
         DC    AL4(TABLEOUT+(26*80)),AL1(4),CL20'TERM='            -EU-
         DC    AL4(TABLEOUT+(27*80)),AL1(3),CL20'UCS='             -EU-
         DC    AL4(TABLEOUT+((TOUTN-1)*80)),AL1(3),CL20'DCB='  -EU-@MLI
PTBNE    EQU   ((*-TABLE)/L'TABLE)                                 -EU-
         SPACE 1                                                   -EU-
TABLEIN  DS    50CL80                                              -EU-
TINN     EQU   ((*-TABLEIN)/L'TABLEIN)                             -EU-
TABLEOUT DS    50CL80                                              -EU-
TOUTN    EQU   ((*-TABLEOUT)/L'TABLEOUT)                           -EU-
         SPACE 1
         END
