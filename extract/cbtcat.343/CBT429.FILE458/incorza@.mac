1   06/04/88
                                                      INCORZAP  1/7.

  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * *           I N C O R Z A P           * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * *  MAIN STORAGE SUPERZAP SERVICE AID  * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

 CBT origin : Extracted from CBT tape FEB 86, file 421.
 ------------ (file 316 superseded)

 INTRODUCTION
 ------------

 INCORZAP inspects or modifies main storage in an MVS system, it
 functions on MVS/SP Version 2 (MVS/XA).

 INCORZAP offers the following advantages :
       - Changes to the nucleus and link pack areas can be made
         dynamically without the need for re-IPLing the system.
       - Changes can be made at the CSECT level rather than just the
         load module level.
       - Changes to the Link Pack Area (LPA) are not lost when pages
         are reused by the system, as is the case with modifications
         made from the console.
       - INCORZAP uses standard Superzap control statement formats,
         and is therefore compatible with the AMASPZAP IBM Service Aid.

 In addition to compatibility with AMASPZAP, INCORZAP offers the
 following additional functions :
       - Multiple control statements per line using the logical line
         separator ('/').
       - The option to supply control statements via a parameter list
         rather than through a SYSIN data-set.
       - The option to use program symbols instead of absolute hex
         numbers to determine offsets within CSECTs.
       - The option to localize program modifications by loading a
         private version of a module into the Job Pack Area.

 FEATURES
 --------

 Main Storage Modification Without IPL.

         INCORZAP is useful for applying fixes on a test basis without
         IPLing the system. Since INCORZAP changes only main storage,
         any modifications last only for the length of the IPL or until
         backed out by a subsequent use of INCORZAP.
         Without INCORZAP, applying a superzap to the Nucleus or LPA
         involves zapping the appropriate system library with AMASPZAP,
         then re-IPLing the system.
1   13/05/86
                                                      INCORZAP  2/7.

 CSECT Level Reference.

         Once a module is loaded into main storage, CSECT information
         is generally not available (the MVS/XA nucleus is an
         exception). For this reason most other mechanisms to modify
         main storage work with absolute addresses or load modules
         only.
         INCORZAP reads the library from which the main storage version
         of the module was loaded in order to determine CSECT placement
         information. This is then used by INCORZAP to permit CSECT
         level references and changes.

 Keeping PLPA Modified.

         Since the Pageable Link Pack Area (PLPA) is normally not
         modified, the paging subsystem never performs a page-out
         operation on pages in this area. This means that any normal
         modification would be lost when the page was stolen for
         re-use by the paging subsystem. When the contents of the page
         were needed again, the paging subsystem would page-in a new,
         unmodified page.
         To overcome this problem, INCORZAP performs a page-fix
         operation on any pages it modifies in the link pack areas.
         This prevents the page being stolen by the paging subsystem,
         and thus the modification remains.
         If an installation wishes to back-out a modification made by
         INCORZAP, this can be done with the RES statement which will
         first make the reversing modification, then perform a page-free
         operation to make the real page frame once more available to
         the system.

 Overcoming Protection Schemes.

         In order to make modifications to main storage, INCORZAP
         must be installed as an authorized program in an authorized
         library. INCORZAP uses this authorization to modify the
         Nucleus and Link Pack Area as requested even though these
         areas are in key-zero protected storage.
         In MVS/SP systems, INCORZAP also temporarily bypasses segment
         or page protection to allow modification of the Link Pack
         Areas. Because of the authorized nature of this program,
         special security provisions should be taken to control use of
         this module. See the section "Security Considerations" later
         in this document.
         INCORZAP does not bypass the low storage protect feature of
         MVS/SP, it does not modify the first 512 bytes of the Nucleus
         (PSA). Modifications to critical low-storage areas should be
         controlled  from the console.

 Using Job Pack Versions of Modules.

         INCORZAP has the ability via the LOCAL control statement to
         cause a module specified on a NAME control statement to be
         loaded into the Job Pack Area. Modifications can then be made
         to this localized version of the module.
1   13/05/86
                                                      INCORZAP  3/7.

         Care must be taken, however, with this approach. The LOCAL
         control statement would normally be used when calling INCORZAP
         via a LINK rather than executing the program from JCL, where
         the module would come and go with the INCORZAP program itself.
         It should also be remembered that some system services (such
         as OPEN/CLOSE) do not search the Job Pack Area for a copy of
         a module they are loading, but go instead directly to the
         Link Pack Area.

 Superzap Compatibility.

         INCORZAP is generally compatible with the IBM Service Aid,
         AMASPZAP. The purposes of the program differ, however.
         INCORZAP inspects or modifies main storage, while AMASPZAP
         inspects or modifies modules or data on direct access storage.
         Nevertheless, JCL requirements and control statement syntax
         are for the most part compatible. This means that in general,
         fixes designed for application via AMASPZAP can be applied
         to the Nucleus or Link Pack Area version of a CSECT by simply
         changing the program name on the execute card in the JCL.

         Specific differences between the two programs are :
         - CCHHR and ABSDUMP control statements - not applicable to
           INCORZAP.
         - SETSSI and IDRDATA control statements - not applicable and
           ignored by INCORZAP.
         - CHECKSUM control statement - not supported by INCORZAP.
         - Alternate DD names - are specified differently.
         - Dump formats - are different. INCORZAP always includes
           EBCDIC data in the right hand portion of the dump.
           INCORZAP treats DUMP and DUMPT identically, providing
           EBCDIC data for both and not attempting to provide op codes.
         - Input via parameter list - not supported by AMASPZAP.
         - "/" logical line separator - not supported by AMASPZAP.
         - Symbolic offsets permitting use of program symbols in
           VER and REP statements - not supported by AMASPZAP.
         - LOCAL and GLOBAL control statements - are not applicable
           to AMASPZAP.
         - RES control statement - not applicable to AMASPZAP.
         - RC control statement - not supported by AMASPZAP.

         With the above exceptions, AMASPZAP and INCORZAP are
         compatible. If the reader is unfamiliar with Superzap JCL
         and control statements, he should consult the IBM manual
         GC28-0674 OS/VS2 MVS System Programming Library : Service
         Aids for details on the use of the programs.
1   13/05/86
                                                      INCORZAP  4/7.

 REFERENCE SUMMARY
 -----------------

         The following provides a one-page summary of the operation of
         INCORZAP. Additional information concerning Superzap control
         statements can be found in the IBM manual GC28-0674 OS/VS2 MVS
         System Programming Library : Service Aids.

 JCL Requirements.

         //stepname EXEC PGM=INCORZAP,
                         PARM='control statements' (optional).
         //SYSLIB     DD DSN=...     Program Library from which the
                                     in-core module was loaded
                                     (required).
         //SYSPRINT   DD SYSOUT=...  Printed output (optional).
         //SYSIN      DD *           Control statements (required
                                     unless PARM specified).

 Control Statements.

         NAME loadmod csect          Specify module and or CSECT to
                                     modify.
         VER  offset  hexstring      Verify storage at offset within
                                     module/CSECT matches hexstring.
         REP  offset  hexstring      Change storage at offset within
                                     module/CSECT to match hexstring
                                     (Causes PGFIX if pageable).
         RES  offset  hexstring      Like REP, but causes PGFREE.
         DUMP loadmod csect          Print module or CSECT.
         CONsole                     Read control statements from
                                     console.
         BASE hexvalue               Hexvalue will be subtracted
                                     from numeric offsets.
         RESET                       Clears NO-GO switch (set by VER
                                     failure).
         /                           Logical line separator.
         ZAP offset hexstring        Zeroes storage if equal to
                                     hexstring.
         *                           Comment.
         LOCAL                       Following NAME statements will
                                     load modules into Job Pack Area.
         GLOBAL                      Drop LOCAL mode.
1   13/05/86
                                                      INCORZAP  5/7.

 NOTES
 -----

 Alternate DD Names.

         The following DD names are really the first choice of
         INCORZAP : PROGLIB, PROGLIST, PROGIN.
         These names are therefore reserved names and are unavailable
         for use on any other DD's in the step (for example, if
         INCORZAP were invoked via a call under TSO).
         If one of these names is not present, the more traditional
         name (SYSLIB, SYSPRINT, or SYSIN, respectively) is used.

 Offset specification.

         Where "offset" is specified, this may be either a hex string
         (with an even number of hex digits) or a program symbol in
         single quotes (apostrophes). Entry point names may always be
         used as symbolic offsets. Any symbol in a non-nucleus CSECT
         may be used if the CSECT was compiled and linked with the TEST
         attribute.

 OPERATIONAL CONSIDERATIONS
 --------------------------

 Avoiding Mismatched Modules.

         INCORZAP may appear to operate incorrectly if the load module
         copy on DASD does not match the copy in main storage.
         INCORZAP reads the DASD copy to determine CSECT placement
         within the load module, so the copies must match for correct
         operation.
         A mismatch could occur if :
         - The module on DASD was re-linked since the last IPL.
         - The module was loaded from a different library than the one
           specified to INCORZAP (eg. an MLPA from SYS1.LINKLIB while
           INCORZAP's SYSLIB points at SYS1.LPALIB).

 Security Considerations.

         Because of its ability to change system modules, access to
         INCORZAP must be strictly limited.
         It should be placed in a library with both read and write
         access restricted via a password or other security mechanism.
         INCORZAP does open its SYSLIB file in update mode even though
         it only accesses it on a read-only basis. However, since it is
         main storage and not the library which is being modified,
         protecting critical libraries against write access is not
         sufficient protection with INCORZAP. A load module could be
         copied to an unprotected library, where INCORZAP would be able
         to open and process it, thereby allowing the main storage
         alteration.
         Authority : restricted to systems support personnel.
1   13/05/86
                                                      INCORZAP  6/7.

 EXAMPLES
 --------

 Example 1 - Zapping an LPA module :
              //ZAP1    EXEC PGM=INCORZAP
              //SYSLIB    DD DSN=SYS1.LPALIB,DISP=SHR
              //SYSPRINT  DD SYSOUT=A
              //SYSIN DD *
               NAME IGC0010A IEDAY00
               VER 03 C1E8
               REP 03 81A8
              /*

 Example 2 - Backing out a zap and unfixing the main storage :
              //ZAP2    EXEC PGM=INCORZAP
              //SYSLIB    DD DSN=SYS1.LPALIB,DISP=SHR
              //SYSPRINT  DD SYSOUT=A
              //SYSIN     DD *
               NAME IGC0010A IEDAY00
               VER 03 81A8
               RES 03 C1E8
              /*

 Example 3 - Using entry points as symbolic offsets :
              //ZAP3    EXEC PGM=INCORZAP
              //SYSLIB    DD DSN=SYS1.LPALIB,DISP=SHR
              //SYSPRINT  DD SYSOUT=A
              //SYSIN     DD *
               NAME IGC0010A IEDAY00
               VER 'QTIP0130' C5C0
               REP 'QTIP0130' 00
               NAME IGG0CLA1 IGG0CLA9
               VER 'IGGPCMRR' 05C0
               REP 'IGGPCMRR' 07FE
              /*

 Example 4 - Dumping an in-core CSECT :
              //ZAP4    EXEC PGM=INCORZAP
              //SYSLIB    DD DSN=SYS1.NUCLEUS,DISP=SHR
              //SYSPRINT  DD SYSOUT=A
              //SYSIN DD *
               DUMP IEANUC01 IGC018
              /*

 Example 5 - Supplying input via the PARM field :
              //ZAP5    EXEC PGM=INCORZAP,
              //  PARM='NAME IEANUC01 IEAVFX00/VER 1023 F8/REP 1023 FF'
              //SYSLIB    DD DSN=SYS1.NUCLEUS,DISP=SHR
              //SYSPRINT  DD SYSOUT=A
                   (Note use of / as a logical line separator. This can
                   be used in SYSIN input and console replies as well)
1   13/05/86
                                                      INCORZAP  7/7.

 Example 6 - INCORZAP procedure for console zapping :
              //IZAP     PROC LIB=LPALIB
              //IZAP     EXEC PGM=INCORZAP,PARM=CONSOLE
              //SYSLIB     DD DSN=SYS1.&LIB,DISP=SHR
              //SYSPRINT   DD SYSOUT=A

 (The following examples use the console mode of operation)

 Example 7 - Finding the address of a load module :
              *03 ENTER ZAP STATEMENTS, RC OR END
               r 3, 'name igc0010a'
               IEE600I REPLY TO 03 IS: SUPPRESSED
               +00E44000 = IN-CORE ADDRESS OF PRECEDING SYMBOL

 Example 8 - Finding the address of a CSECT in the LINK PACK AREA :
              *04 ENTER ZAP STATEMENTS, RC OR END
               r 4,name igc0010a ieday00
               IEE600I REPLY TO 04 IS: SUPPRESSED
               +00E452B8 = IN-CORE ADDRESS OF PRECEDING SYMBOL

 Example 9 - Finding the address of an entry point :
              *05 ENTER ZAP STATEMENTS, RC OR END
               r 5,ver 'qtip0130' 00
               IEE600I REPLY TO 05 IS: SUPPRESSED
               +00E455EE = IN-CORE ADDRESS OF PRECEDING SYMBOL
               +VERIFY REJECT - SET NO GO SWITCH
