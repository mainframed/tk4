MDLK     TITLE '---   M O D L O O K   ---'
MODLOOK  START 0
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                            M O D L O O K                            *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        THIS PROGRAM IS DESIGNED TO RUN AS A TSO COMMAND,            *
*        STARTED TASK OR A BATCH JOB TO LOOK UP THE SELECTED          *
*        MODULE(S) IN THE SYSTEM LINK LIST OR LINK PACK AREA.         *
*        IF THE MODULE IS IN THE LINK LIST, THE LINK LIST             *
*        LIBRARY NAME WILL BE DISPLAYED. IF THE MODULE IS             *
*        IN THE LINK PACK AREA, ITS ADDRESS WILL BE DISPLAYED         *
*        ALONG WITH NAME OF THE RESIDENT AREA IN WHICH IT IS          *
*        LOCATED SUCH AS PLPA, FLPA, ECSA, ETC... THE FIRST           *
*        PART OF EACH MODULE IS DISPLAYED ALSO SINCE IT MAY           *
*        CONTAIN DATE, TIME, OR COPYRIGHT INFORMATION WHICH           *
*        MAY BE OF INTEREST. IT IS OFTEN HARD TO DETERMINE            *
*        WHICH LINK LIST LIBRARY CONTAINS A SPECIFIC MODULE.          *
*                                                                     *
*        WHEN THE PROGRAM IS RUN FROM TSO, THE USER WILL BE           *
*        PROMPTED FOR A MODULE NAME AND THE RESPONSE WILL BE          *
*        DISPLAYED ON THE TSO USER TERMINAL. WHEN IT IS RUN AS        *
*        A STARTED TASK, A WTOR REQUEST WILL BE MADE FOR THE          *
*        MODULE NAME AND THE RESPONSE WILL BE SENT TO THE             *
*        CONSOLE. IF IT IS RUN AS A BATCH JOB, THE MODULE NAME        *
*        WILL BE ENTERED AS THE FIRST 8 CHARACTERS OF A RECORD        *
*        READ FROM THE SYSIN FILE AND THE RESPONSE WILL BE            *
*        WRITTEN TO THE SYSPRINT FILE.                                *
*                                                                     *
*        THE PROGRAM WILL CONTINUE TO ASK FOR OTHER MODULE            *
*        NAMES UNTIL END-OF-FILE IS REACHED ON THE SYSIN FILE         *
*        FOR A BATCH JOB OR A 'STOP', 'END', OR '/ *' IS              *
*        RECEIVED FROM A TSO USER OR THE OPERATOR CONSOLE.            *
*                                                                     *
*        THIS UTILITY PROGRAM WAS ORIGINALLY WRITTEN BY ANOTHER       *
*        PERSON IN ANOTHER INSTALLATION SO I CANNOT TAKE CREDIT       *
*        FOR IT. I HAVE CLEANED IT UP A LOT AND PROVIDED              *
*        COMMENTS, BUT BECAUSE OF LACK OF PERMISSION, I CANNOT        *
*        GIVE THE NAME OF THE ORIGINAL AUTHOR.                        *
*                                                                     *
*        WRITTEN BY : JOHN V. HOOPER                                  *
*                     FOOD LION, INC.                                 *
*                     2110 EXECUTIVE DRIVE                            *
*                     SALISBURY, N.C.  28145-1330                     *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                           DISCLAIMER                                *
*                                                                     *
*        THE AUTHORS INCLUDING FOOD LION, ITS OFFICERS,               *
*        DIRECTORS, AND EMPLOYEES MAKE NO REPRESENTATION OR           *
*        WARRANTY OF ANY KIND WHATSOEVER, INCLUDING, BUT NOT          *
*        LIMITED TO, REPRESENTATIONS OR WARRANTIES, EXPRESS OR        *
*        IMPLIED, OR MERCHANTABILITY, FITNESS FOR USE OR PURPOSE,     *
*        ACCURACY OR COMPLETENESS OF PROCESSES, PROCEDURES,           *
*        DESIGNS, DEFINITIONS, INSTRUCTIONS, INFORMATION, OR          *
*        FUNCTIONING OF ANY PROGRAMS, DOCUMENTS, OR RELATED           *
*        MATERIALS. THE AUTHORS FURTHER EXPRESSLY DISCLAIM ANY        *
*        KNOWLEDGE OF PURPOSE FOR WHICH THESE PROGRAMS,               *
*        DOCUMENTS, OR RELATED MATERIAL MAY BE UTILIZED OR THEIR      *
*        APPLICABILITY FOR SUCH USE, NOR SHALL THE FACT OF MAKING     *
*        THEM AVAILABLE CONSTITUTE ANY SUCH REPRESENTATION,           *
*        WARRANTY, OR KNOWLEDGE, NOR DO THE AUTHORS ASSUME ANY        *
*        LIABILITY, RESPONSIBILITY, OR OBLIGATION ARISING FROM        *
*        THE USE OR MALFUNCTIONING OF OF THESE COMPUTER PROGRAMS,     *
*        DOCUMENTATION, OR RELATED MATERIALS.                         *
*                                                                     *
*        USE : 1. BATCH JOB : //JOBNAME  JOB ...                      *
*                             //MODLOOK  EXEC PGM=MODLOOK             *
*                             //SYSPRINT  DD SYSOUT=*                 *
*                             //SYSIN     DD *                        *
*                             IDCAMS                                  *
*                             IEFW21SD                                *
*                             /*                                      *
*              2. STARTED TASK : //MODLOOK PROC                       *
*                                //MODLOOK EXEC PGM=MODLOOK           *
*                 THE OPERATOR WILL BE PROMPTED FOR MODULE NAME AND   *
*                 THE RESULTS WILL BE WRITTEN TO THE CONSOLE.         *
*              3. TSO : JUST ENTER 'MODLOOK' AT THE READY PROMPT OR   *
*                       UNDER OPTION 6 OF ISPF.                       *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        ORIGIN : EXTRACTED FROM CBT 94 APR TAPE, FILE 019.           *
*        ADAPTED BY : MOINIL P.A.                                     *
*                     COMPUTING CENTRE (TP 361)                       *
*                     J.R.C. - ISPRA ESTABLISHMENT                    *
*                     21020 ISPRA (VA), ITALY                         *
*        CHANGED : 1. MODULES NAMES LIST AS INPUT.                    *
*                  2. FIRST INPUT NAMES LIST MAY BE SUPPLIED AS       *
*                     COMMAND OPERANDS (TSO) OR EXEC PARAMETERS       *
*                     FIELD (STARTED TASK OR BATCH).                  *
*                  3. TPUT/TGET REPLACED BY PUTLINE/GETLINE (THIS     *
*                     ALLOWS THE BATCH-TSO RUN AND THE SYSOUTTRAP).   *
*                  4. DISPLAY JOB/STEP AND ISPF (WHEN AVAILABLE)      *
*                     LIBRARY NAME.                                   *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
MODLOOK  AMODE 24
MODLOOK  RMODE 24
         SPACE 1
        $DEFREG
         EJECT
        $XENT BASE=(R12,R11,R10)
         LR    R2,R1               RETAIN R1 ENTRY ADDRESS
        EXTRACT ANSWER,'S',FIELDS=(FRS,TIOT,COMM,TSO,PSB)
         SPACE 1
*------- SET REGISTER 7 TO POINT TO THE "TCB". IF THE LOAD IS
*        SUCCESSFUL, "TCBLLS" SHOULD POINT TO THE "LLE" FOR THE
*        MODULE. "LLECDPT" POINTS TO THE "CDE" FOR THE MODULE.
*        THE "CDE" FIELDS ARE THEN FORMATED AND PRINTED.
         SPACE 1
         L     R7,ANSWER           -> TCBFRS (PREFIX)
         LA    R7,L'TCBFRS(R7)     BEGINNING OF TCB
         USING TCB,R7              SET ADDRESSABILITY TO TCB
         SPACE 1
*------- DETERMINE IF WE ARE RUNNING AS A BATCH JOB,
*        A STARTED TASK, OR A TSO USER.
         SPACE 1
         ICM   R1,B'1111',ANSWER+16 CHECK PSCB ADDRESS
         BZ    INTLZ1              ZERO, NOT TSO
         USING CPPL,R2             VERIFY HOW INVOKED IN TSO
         BAS   R14,VERHI           CHECK TSO COMMAND
         LR    R3,R2
         USING IKJEBECA,R3
         L     R2,CAPTTMP
         DROP  R3
         BAS   R14,VERHI           CHECK TSO SUB-COMMAND
        WTO    MF=(E,WTOM)         WRITE MESSAGE
         B     LEAVE
         USING PSCB,R1
VERHI    CLC   PSCBUPT,CPPLUPT
         BNER  R14
         CL    R1,CPPLPSCB
         BNER  R14
         DROP  R1,R2
         ST    R2,CPPLADDR
         OI    SWPRCS,USTSO        TURN ON TSO INDICATOR
         L     R1,ANSWER+12        ADDRESS OF TSO-FLAG
         TM    0(R1),X'80'         HOW RUNNING?
         BZ    *+L'*+4             BACKGROUND
         OI    SWPRCS,TSOFU        SET FOREGROUND
         SPACE 1
*------- DETERMINE IF ISPF IS ACTIVE TO EXECUTE MODULES BLDL AND LOAD.
*        SEE ALSO IF WE ARE A DIRECT SUBTASK OF ISPF ("ISPTASK"  OR
*        "ISRPTC") OR TSO ("IKJEFT.."), OR OF ANY OTHER ONE BEFORE,
*        AS I.E. "DOCP".
         SPACE 1
         LR    R5,R7               SAVE MY TCB
SCTCB1   ICM   R7,B'1111',TCBOTC   MY ORIGINATING TASKS TCB'S
         BZ    SCTCB3              END OF CHAIN (NEVER OCCURS IN TSO)
         L     R2,TCBRBP           GET THE RB POINTER
         USING RBSECT,R2
         CLI   RBSTAB1,RBFTPRB     IS THIS A PRB?
         BNE   SCTCB1              NO
         XR    R3,R3               YES
         ICM   R3,B'0111',RBCDE1   GET THE CDE POINTER
         DROP  R2
         USING CDENTRY,R3
         CLC   CDNAME(6),=CL6'IKJEFT' TSO TASK?
         BE    SCTCB3              YES
         CLC   CDNAME(8),=CL8'ISPTASK' NO, ISPF TASK?
         BE    SCTCB2              YES
         CLC   CDNAME(8),=CL8'ISRPTC' NO, ISPF OPTION 6?
         BE    SCTCB2              YES
         OI    SWPRCS,SUBTSK       NO, SAY NOT DIRECT SUBTASK
         B     SCTCB1
         DROP  R3
SCTCB2   OI    SWMISC,ISPFACT      YES, SET ISPF ACTIVE
         LR    R7,R5               RESTORE MY TCB
         MVC   ISPFDD,DCBISPF+(DCBDDNAM-IHADCB)
         B     ASKDSN
SCTCB3   LR    R7,R5               RESTORE MY TCB
         SPACE 1
*------- ISPF IS NOT ACTIVE, BUT IF THE ISPF LINK DD IS ALLOCATED,
*        IT CAN BE OPENED AND USED.
         SPACE 1
         XR    R1,R1
         L     R15,ANSWER+4
         USING TIODSECT,R15
SCISPF   CLC   TIOELNGH(4),=F'0'
         BE    INTLZ3              NOT FOUND
         CLC   TIOEDDNM(L'TIOEDDNM),DCBISPF+(DCBDDNAM-IHADCB)
         BE    *+L'*+10            FOUND
         IC    R1,TIOELNGH
         ALR   R15,R1
         B     SCISPF
         DROP  R15
         MVC   ISPFDD,DCBISPF+(DCBDDNAM-IHADCB)
        OPEN   (DCBISPF,)
         TM    DCBISPF+(DCBOFLGS-IHADCB),DCBOFOPN
         BZ    INTLZ3              OPEN FAILED
         OI    SWMISC,DDISPFO      SET FOUND AND OPENED
ASKDSN   LA    R1,PLISPF           NO, ASK ISPF LINK DSNAME(S)
         L     R15,=V(DSNTAB)
         BASR  R14,R15
         LTR   R15,R15
         BZ    INTLZ3              OK, OBTAINED
         MVC   PUTAREA+17(3),=CL3'---'
         MVC   PUTAREA+21(4),=CL4'ISPF'
         MVC   PUTAREA+26(23),=CL23'DSNAME''S TABLE OVERFLOW'
         BAS   R14,OUTLINE         WRITE MESSAGE
         B     INTLZ3              GET OUT
         SPACE 1
*------- CHECK IF WE ARE A STARTED TASK.
         SPACE 1
INTLZ1   ST    R2,PADDR            SAVE R1 ENTRY ADDRESS
         ICM   R15,B'1111',ANSWER+8 CHECK CSCB ADDRESS
         BZ    INTLZ2              ZERO, NOT STC
         ICM   R15,B'1111',4(R15)  LOAD CIB ADDRESS
         BZ    INTLZ2              ZERO, NOT STC
         OI    SWPRCS,STASK        TURN ON STC INDICATOR
         B     INTLZ3              GET OUT
         SPACE 1
*------- WE ARE A BATCH JOB, SO OPEN THE SYSIN AND SYSPRINT DATA-SETS.
         SPACE 1
INTLZ2   OI    SWPRCS,JBATCH       TURN ON BATCH INDICATOR
         XR    R1,R1
         L     R2,ANSWER+4         SEARCH SYSIN-SYSPRINT DD'S
         USING TIODSECT,R2
SCLOOP   CLC   TIOELNGH(4),=F'0'
         BE    CHKDDS
         CLC   TIOEDDNM(L'TIOEDDNM),DCBIN+(DCBDDNAM-IHADCB)
         BNE   *+L'*+4
         OI    SWMISC,DDIN         SET SYSIN INPUT
         CLC   TIOEDDNM(L'TIOEDDNM),DCBOUT+(DCBDDNAM-IHADCB)
         BNE   *+L'*+4
         OI    SWMISC,DDOUT        SET SYSPRINT OUTPUT
         IC    R1,TIOELNGH
         ALR   R2,R1
         B     SCLOOP
         DROP  R2
CHKDDS   TM    SWMISC,DDIN         SYSIN INPUT?
         BO    OKIN
         MVC   WTOXDD(L'DCBDDNAM),DCBIN+(DCBDDNAM-IHADCB)
        WTO    MF=(E,WTOX)         WRITE MESSAGE
         B     LEAVE
OKIN     TM    SWMISC,DDOUT        SYSPRINT OUTPUT?
         BO    OKOUT
         MVC   WTOXDD(L'DCBDDNAM),DCBOUT+(DCBDDNAM-IHADCB)
        WTO    MF=(E,WTOX)         WRITE MESSAGE
         B     LEAVE
OKOUT    MVC   WTOZDD(L'DCBDDNAM),DCBIN+(DCBDDNAM-IHADCB)
        OPEN   (DCBIN,)
         TM    DCBIN+(DCBOFLGS-IHADCB),DCBOFOPN
         BO    OPNIN
        WTO    MF=(E,WTOZ)         WRITE MESSAGE
         B     LEAVE
OPNIN    OI    SWMISC,DDINO
         MVC   WTOZDD(L'DCBDDNAM),DCBOUT+(DCBDDNAM-IHADCB)
        OPEN   (DCBOUT,(OUTPUT))
         TM    DCBOUT+(DCBOFLGS-IHADCB),DCBOFOPN
         BO    OPNOUT
        WTO    MF=(E,WTOZ)         WRITE MESSAGE
         B     LEAVE
OPNOUT   OI    SWMISC,DDOUTO
         SPACE 1
*------- LOOK FOR A STEPLIB OR JOBLIB DD.
         SPACE 1
INTLZ3   MVC   JSDDN,=CL8'STEPLIB' TRY TO GET STEPLIB DSNAME'S
         LA    R1,PLDSN
         L     R15,=V(DSNTAB)
         BASR  R14,R15
         LTR   R15,R15
         BZ    GETNAME             OK, OBTAINED
         CH    R15,=H'4'
         BNE   INTLZ3A             TABLE OVERFLOW
         MVC   JSDDN,=CL8'JOBLIB'  NOT FOUND, TRY WITH JOBLIB
         LA    R1,PLDSN
         L     R15,=V(DSNTAB)
         BASR  R14,R15
         LTR   R15,R15
         BZ    GETNAME             OK, OBTAINED
         CH    R15,=H'4'
         BNE   INTLZ3A             TABLE OVERFLOW
         MVI   JSDDN,C'?'          NOT FOUND, SET UNKNOWN
         B     GETNAME
INTLZ3A  MVC   PUTAREA+17(3),=CL3'---'
         MVC   PUTAREA+21(8),=CL8'INTERNAL'
         MVC   PUTAREA+30(23),=CL23'DSNAME''S TABLE OVERFLOW'
         BAS   R14,OUTLINE         WRITE MESSAGE
         SPACE 1
*------- GET THE MODULE NAME FROM EITHER :
*              THE SYSIN FILE FOR A BATCH JOB,
*              A WTOR REQUEST FOR A STARTED TASK, OR
*              A PUTLINE AND GETLINE REQUEST FOR A TSO USER.
         SPACE 1
GETNAME  MVI   GETAREA,C' '        BLANK THE INPUT BUFFER
         MVC   GETAREA+1(L'GETAREA-1),GETAREA
         MVC   SCANPTR(3*4),=A(GETAREA,1,GETAREA+L'GETAREA-1)
         TM    SWPRCS,FLG1ST       1ST TIME HERE?
         BO    SKINIT              NO, BRANCH
         SPACE 1
*------- INITIALIZE THE "LSTWHERE" INDICATORS.
         SPACE 1
         OI    SWPRCS,FLG1ST       SET 1ST TIME DONE
         XR    R2,R2
         TM    SWPRCS,SUBTSK       ARE WE DIRECT SUBTASK IF ISPF?
         BO    SETWW1              YES
         MVI   WTASK,0             NO, WE ARE NOT DIRECT
         IC    R2,WJS
         BCTR  R2,0
         STC   R2,WJS
         IC    R2,WISPF
         BCTR  R2,0
         STC   R2,WISPF
SETWW1   TM    SWMISC,ISPFACT      IS ISPF ACTIVE?
         BO    SETWW2              YES
         MVI   WISPF,0             NO
         IC    R2,WJS
         BCTR  R2,0
         BCTR  R2,0
         STC   R2,WJS
SETWW2   CLI   JSDDN,C'?'          ANY STEPLIB/JOBLIB?
         BNE   *+L'*+4             YES
         MVI   WJS,0               NO
         SPACE 1
*------- AT THE BEGINNING, THE EXEC PARM.FIELD OR TSO COMMAND
*        OPERANDS MAY BE USED.
         SPACE 1
         TM    SWPRCS,USTSO        SEE IF TSO USER
         BZ    DOINIT              NO, BRANCH
         L     R2,CPPLADDR
         USING CPPL,R2
         L     R3,CPPLCBUF         COMMAND BUFFER ADDRESS
         DROP  R2
         LH    R2,0(R3)            BUFFER LENGTH
         SH    R2,=H'4'            PREFIX LENGTH
         LH    R1,2(R3)            OFFSET TO OPERAND(S)
         SR    R2,R1               OPERAND(S) LENGTH
         BNP   SKINIT              NONE, JUMP
         LA    R1,4(R1,R3)         START OF OPERAND(S)
         ST    R1,SCANPTR
         BCTR  R2,0
         LA    R1,0(R1,R2)         END OF OPERAND(S)
         ST    R1,SCANPTR+8
         B     GETNME3
DOINIT   L     R2,PADDR
         L     R3,0(R2)
         LH    R1,0(R3)            PARM FIELD LENGTH
         LTR   R1,R1
         BNP   SKINIT              NONE, JUMP
         LA    R2,2(R3)            START OF PARM FIELD TEXT
         ST    R2,SCANPTR
         BCTR  R1,0
         LA    R1,0(R1,R2)         END OF PARM FIELD TEXT
         ST    R1,SCANPTR+8
         B     GETNME3
SKINIT   TM    SWPRCS,JBATCH       SEE IF BATCH JOB
         BZ    GETNME1             NO, BRANCH
        GET    DCBIN,GETAREA       READ AN INPUT CARD
         MVC   GETAREA+L'GETAREA-8(8),=CL8' ' RESET SEQ. NUM. COLUMNS
         B     GETNME3             BRANCH
GETEODAD MVC   GETAREA(8),=CL8'END' SET FOR END
         B     GETNME3             BRANCH
GETNME1  TM    SWPRCS,USTSO        SEE IF TSO USER
         BZ    GETNME2             NO, BRANCH
         TM    SWPRCS,FREEIB       INPUT BUFFER CONTINUATION?
         BZ    GETNME1A            NO, BRANCH
         NI    SWPRCS,255-FREEIB
         L     R1,RESTCNT
         L     R15,RESTPTR
         LR    R14,R15
         AR    R14,R1
         B     GETCONT
GETNME1A TM    SWPRCS,TSOFU        HOW RUNNING?
         BZ    GETNME1B            BACKGROUND
         SPACE 1
*------- IN TSO FOREGROUND, IF TRAP ACTIVE INHIBIT NEXT INPUT.
         SPACE 1
         L     R1,CVTPTR           CVT
         USING CVTMAP,R1
         L     R14,CVTTVT          TSVT
         DROP  R1
         LA    R1,CT441PRM         PARM.LIST
         USING TSVT,R14
         L     R15,TSVTVACC        VARIABLE ACCESS ROUTINE
         DROP  R14
         BASR  R14,R15             GO TO IT
         LTR   R15,R15             ANY ERROR?
         BNZ   GETNME1B            YES, GO PROMPT
         ICM   R15,B'1111',DATAADDR NO, CHECK VALUE RESPONSE
         BZ    GETNME1B            NULL, GO PROMPT
         ICM   R14,B'1111',DATALENG
         BNP   GETNME1B            NULL, GO PROMPT
         BCT   R14,*+L'*+6
         PACK  DOUBLE,0(*-*,R15)   <<EXECUTED>>
         EX    R14,*-6
         CVB   R1,DOUBLE
         LTR   R1,R1
         BNP   GETNME1B            CAN GO PROMPT
         MVC   PUTAREA+1(3),=CL3'---'
         MVC   PUTAREA+5(30),=CL30'END FORCED (SYSOUTTRAP ACTIVE)'
         BAS   R14,OUTLINE         GO WRITE THE MESSAGE
         B     LEAVE
GETNME1B XR    R1,R1               GET LENGTH OF MESSAGE
         IC    R1,WTOQ+9
         SH    R1,=H'4'
         BCT   R1,*+L'*+6
         MVC   PUTAREA+1(*-*),WTOQ+12 <<EXECUTED>>
         EX    R1,*-6              MOVE THE MESSAGE TEXT
         BAS   R14,OUTLINE         GO WRITE THE MESSAGE
         L     R1,CPPLADDR         ADDRESS OF CPPL
         USING CPPL,R1
         L     R14,CPPLUPT         UPT ADDRESS
         L     R15,CPPLECT         ECT ADDRESS
         DROP  R1
         XC    MYECB,MYECB         CLEAR ECB TO ZEROS
         XC    GTPBZ(GTPBLEN),GTPBZ CLEAR GET PARMLIST TO ZEROS
         XC    IOPLZ(IOPLLEN),IOPLZ CLEAR PARM LIST TO ZEROS
         LA    R1,IOPLZ            ADDRESS OF LIST
        GETLINE PARM=GTPBZ,UPT=(R14),ECT=(R15),ECB=MYECB,              X
               TERMGET=(EDIT,WAIT),                                    X
               INPUT=(TERM,LOGICAL),                                   X
               MF=(E,(1))          GET MODULE(S) NAME(S) FROM USER
         CH    R15,=H'4'           HOW COMPLETE?
         BNH   *+L'*+10            SUCCESSFULLY ...
         MVC   GETAREA(8),=CL8'END' FORCE END (ERROR)
         B     SKALL
         LA    R1,GTPBZ            ADDRESSABILITY FOR THE GTPB
         USING GTPB,R1
         L     R14,GTPBIBUF        GET ADDRESS OF INPUT BUFFER
         DROP  R1
         LH    R1,0(R14)           BUFFER LENGTH
         SH    R1,=H'4'            PREFIX LENGTH
         LH    R0,2(R14)           OFFSET TO START OF TEXT
         SR    R1,R0               TEXT LENGTH
         BNP   SKALL               NONE, FORCE REQUEST AGAIN
         LA    R15,4(R14)          START ADDRESS OF BUFFER TEXT
         AR    R15,R0              START ADDRESS OF TEXT
         LR    R14,R15
         AR    R14,R1              END+1 ADDRESS OF TEXT
GETCONT  BCTR  R14,0
         CLI   0(R14),C' '
         BNE   *+L'*+8
         BCT   R1,GETCONT
         B     SKALL               BLANK LINE, FORCE REQUEST AGAIN
         CL    R1,=A(L'GETAREA)
         BNH   MVALL
         LR    R0,R1
CHKSH    BCT   R1,*+L'*+8
         L     R1,=A(L'GETAREA)    WHAT'S THAT?
         B     MVALL               A SYNTAX ERROR
         BCTR  R14,0
         CLI   0(R14),C' '
         BNE   CHKSH
         CL    R1,=A(L'GETAREA)
         BH    CHKSH
         SR    R0,R1
         ST    R0,RESTCNT
         ST    R14,RESTPTR
         OI    SWPRCS,FREEIB
         BCT   R1,*+L'*+6
         MVC   GETAREA(*-*),0(R15) <<EXECUTED>>
         EX    R1,*-6              MOVE PART OF TEXT
         B     GETNME3             GET OUT
MVALL    BCT   R1,*+L'*+6
         MVC   GETAREA(*-*),0(R15) <<EXECUTED>>
         EX    R1,*-6              MOVE TEXT
SKALL    LA    R15,GTPBZ           ADDRESSABILITY FOR THE GTPB
         USING GTPB,R15
         L     R1,GTPBIBUF         GET ADDRESS OF INPUT BUFFER
         DROP  R15
         LH    R0,0(R1)            INPUT BUFFER LENGTH
         AH    R0,=H'7'            ROUND UP TO 8
         SRL   R0,3
         SLL   R0,3
        FREEMAIN RC,LV=(0),A=(1),SP=1
         B     GETNME3             GET OUT
GETNME2  XC    MYECB,MYECB         CLEAR MY ECB
        WTOR   MF=(E,WTOQ)         WRITE ENTER MESSAGE
        WAIT   ECB=MYECB           WAIT FOR OPERATOR REPLY
         SPACE 1
*------- CHECK THE RESPONSE FOR A TERMINATION REQUEST.
         SPACE 1
GETNME3  MVC   MODULNAM,=CL8' '    RESET
         MVI   PUTAREA,C'0'        SET FOR DOUBLE SPACE
         LM    R1,R3,SCANPTR
         CLR   R1,R3
         BH    GETNAME             NO MORE ENTERED
         CLI   0(R1),C' '          SCAN FOR A MODULE NAME
         BNE   *+L'*+8
         BXLE  R1,R2,*-8
         B     GETNAME             NONE OR NO MORE ENTERED
         LR    R14,R1
         BXLE  R1,R2,*+L'*+4
         B     *+L'*+8
         CLI   0(R1),C' '
         BNE   *-12
         STM   R1,R3,SCANPTR
         SR    R1,R14
         CH    R1,=H'8'
         BNH   OKNAM
         MVC   PUTAREA+1(3),=CL3'---'
         MVC   PUTAREA+5(8),0(R14) SET MODULE NAME... IN MESSAGE
         MVC   PUTAREA+13(26),=CL26'... - MODULE NAME TOO LONG'
         BAS   R14,OUTLINE         GO WRITE THE MESSAGE
         B     GETNME3             GO TRY NEXT MODULE NAME
OKNAM    BCT   R1,*+L'*+6
         OC    MODULNAM(*-*),0(R14) <<EXECUTED>>
         EX    R1,*-6              MOVE AND MAKE UPPER CASE
         CLC   MODULNAM,=CL8'END'  SEE IF END REQUESTED
         BE    LEAVE               YES, BRANCH
         CLC   MODULNAM,=CL8'STOP' SEE IF END REQUESTED
         BE    LEAVE               YES, BRANCH
         CLC   MODULNAM,=CL8'/*'   SEE IF END REQUESTED
         BE    LEAVE               YES, BRANCH
         CLC   MODULNAM,=CL8'T=ON' SEE IF T=ON REQUESTED
         BNE   *+L'*+8             NO, BRANCH
         OI    SWPRCS,STATUS       YES, SET STATUS ON
         B     GETNME3             GO TRY NEXT MODULE NAME
         CLC   MODULNAM,=CL8'T=OFF' SEE IF T=OFF REQUESTED
         BNE   *+L'*+8             NO, BRANCH
         NI    SWPRCS,255-STATUS   YES, SET STATUS OFF
         B     GETNME3             GO TRY NEXT MODULE NAME
         CLI   MODULNAM,C'$'
         BE    OKVLD
         CLI   MODULNAM,C'#'
         BE    OKVLD
         CLI   MODULNAM,C'@'
         BE    OKVLD
         CLI   MODULNAM,C'A'
         BL    INVLD
         CLI   MODULNAM,C'I'
         BNH   OKVLD
         CLI   MODULNAM,C'J'
         BL    INVLD
         CLI   MODULNAM,C'R'
         BNH   OKVLD
         CLI   MODULNAM,C'S'
         BL    INVLD
         CLI   MODULNAM,C'Z'
         BNH   OKVLD
INVLD    MVC   PUTAREA+1(3),=CL3'---'
         MVC   PUTAREA+5(8),MODULNAM SET MODULE NAME IN MESSAGE
         MVC   PUTAREA+14(34),=CL34' - INVALID MODULE NAME (1ST CHAR.)'
         BAS   R14,OUTLINE         GO WRITE THE MESSAGE
         B     GETNME3             GO TRY NEXT MODULE NAME
         SPACE 1
*------- SEE IF THE MODULE IS IN THE LINK LIST.
         SPACE 1
OKVLD    MVC   LSTNM,MODULNAM      SET UP FOR BLDL
         XC    LSTTTR(LSTZ),LSTTTR
        BLDL   0,LSTADDR           SEARCH LINK LIST FOR MODULE NAME
         LTR   R15,R15             TEST BLDL RETURN CODE
         BZ    PRTHD1              ZERO, BRANCH FOUND
         STM   R15,R0,BLDLRC
         CLC   BLDLRC,=F'4'
         BNE   NOTTFU
         TM    SWMISC,ISPFACT      IS ISPF ACTIVE?
         BO    NOTTFU              YES
         TM    SWMISC,DDISPFO      NO, ISPF LINK DD?
         BZ    NOTTFU              NOT FOUND OR OPEN FAILED
         SPACE 1
*------- SEE IF THE MODULE IS IN THE ISPF LINK.
         SPACE 1
         XC    LSTTTR(LSTZ),LSTTTR
        BLDL   DCBISPF,LSTADDR     SEARCH ISPF LINK FOR MODULE NAME
         LTR   R15,R15             TEST BLDL RETURN CODE
         BZ    OKISPF              ZERO, FOUND
         XC    LSTTTR(LSTZ),LSTTTR
         CL    R15,=F'4'
         BE    NOTTFU              NOT FOUND
        CLOSE  (DCBISPF)           ERROR, CLOSE ISPF LINK
         NI    SWMISC,255-DDISPFO  AND CLOSE THIS WAY FOR EVER
         B     NOTTFU
OKISPF   MVC   HD2MNAM,MODULNAM    SET MODULE NAME
         XR    R15,R15             CLEAR REGISTER FOR IC
         IC    R15,LSTCONCT        LOAD CONCATENATION NUMBER
         CVD   R15,DOUBLE          CONVERT TO PACKED
         OI    DOUBLE+7,X'0F'      MAKE PRINTABLE
         UNPK  HD2CONCT,DOUBLE+6(2) UNPACK TO MESSAGE
         MVI   HD2WHERE,C' '
         MVC   HD2WHERE+1(L'HD2WHERE-1),HD2WHERE
         MVC   HD2WHERE(13),=CL13'THE ISPF LINK'
         MVC   PUTAREA+1(L'HD2MSG),HD2MSG MOVE HEADING TO IOAREA
         BAS   R14,OUTLINE         WRITE MESSAGE
         LA    R4,ISPFTB+2         POINT TO FIRST DSN IN TABLE
         XR    R2,R2               CLEAR REGISTER
         XR    R3,R3               CLEAR REGISTER
         OC    ISPFNR,ISPFNR       DSNAME(S) KNOWN?
         BZ    LOADI               SKIP IF NOT
         ICM   R3,B'0001',LSTCONCT LOAD CONCATENATION NUMBER
         BZ    *+L'*+12
         CLM   R3,B'0011',ISPFNR   CHECK IN CASE OF TABLE OVERFLOW
         BNL   LOADI               SKIP IF YES
         M     R2,=A(L'ISPFTB)     MULTIPLY TO DISPLACE FOR DSNAME
         AR    R4,R3               DISPLACE INTO THE TABLE
         MVC   HD2DSNAM(L'HD2DSNAM),0(R4) MOVE DSNAME TO MESSAGE
         MVC   PUTAREA+10(L'HD2DSN),HD2DSN MOVE HEADING TO IOAREA
         BAS   R14,OUTLINE         WRITE MESSAGE
         B     LOADI               GO TRY TO LOAD THE MODULE
NOTTFU   MVC   PUTAREA+1(L'MODULNAM),MODULNAM SET MODULE NAME
         MVC   PUTAREA+10(3),=CL3'---'
         MVC   PUTAREA+14(17),=CL17'BLDL FAILED - RC=' SET MSG TEXT
         UNPK  WORK9,BLDLRC(L'BLDLRC+1) UNPACK HEX FIELD + 1
         TR    WORK9(L'WORK9-1),TRTBL1 TRANSLATE TO PRINTABLE
         MVC   PUTAREA+31(4),WORK9+4 SET RC IN MESSAGE
         MVC   PUTAREA+36(9),=CL9'/ REASON=' SET MSG TEXT
         UNPK  WORK9,BLDLRS(L'BLDLRS+1) UNPACK HEX FIELD + 1
         TR    WORK9(L'WORK9-1),TRTBL1 TRANSLATE TO PRINTABLE
         MVC   PUTAREA+45(4),WORK9+4 SET REASON IN MESSAGE
         BAS   R14,OUTLINE         GO WRITE THE MESSAGE
         CLC   BLDLRC,=F'4'
         BNE   GETNAME
         CLI   LSTWHERE,1
         BH    GETNAME
         B     LOADM               GO TRY TO LOAD THE MODULE
PRTHD1   MVC   HD2MNAM,MODULNAM    SET MODULE NAME
         XR    R15,R15             CLEAR REGISTER FOR IC
         IC    R15,LSTCONCT        LOAD CONCATENATION NUMBER
         CVD   R15,DOUBLE          CONVERT TO PACKED
         OI    DOUBLE+7,X'0F'      MAKE PRINTABLE
         UNPK  HD2CONCT,DOUBLE+6(2) UNPACK TO MESSAGE
         MVI   HD2WHERE,C' '
         MVC   HD2WHERE+1(L'HD2WHERE-1),HD2WHERE
         CLI   LSTWHERE,0          IN PRIVATE AREA?
         BE    PRTHD2              YES, GET OUT
         CLI   LSTWHERE,1          IN LINK LIST?
         BE    PRTHD3              YES, GO GET DSNAME
         CLC   LSTWHERE,WTASK      NO, IN TASKLIB?
         BE    PRTHD4              YES, GO GET DSNAME
         CLC   LSTWHERE,WJS        NO, IN JOB/STEPLIB?
         BE    PRTHD5              YES, GO GET DSNAME
         CLC   LSTWHERE,WISPF      IN ISPF LIB?
         BE    PRTHD6              YES, GO GET DSNAME
         MVC   HD2WHERE(21),=CL21'A PARENT TASK LIBRARY'
         B     PRTHD2+L'PRTHD2
PRTHD2   MVC   HD2WHERE(17),=CL17'A PRIVATE LIBRARY'
         MVC   PUTAREA+1(L'HD2MSG),HD2MSG MOVE HEADING TO IOAREA
         BAS   R14,OUTLINE         WRITE MESSAGE
         B     LOADM               GO TRY TO LOAD THE MODULE
PRTHD3   MVC   HD2WHERE(13),=CL13'THE LINK LIST'
         MVC   PUTAREA+1(L'HD2MSG),HD2MSG MOVE HEADING TO IOAREA
         BAS   R14,OUTLINE         WRITE MESSAGE
         L     R3,CVTPTR           LOAD ADDRESS OF CVT
         USING CVT,R3              SET ADDRESSABILITY TO CVT
         L     R3,CVTLLTA          LOAD ADDRESS OF LINKLIST DSNAME'S
         DROP  R3                  DROP ADDRESSABILITY TO CVT
         LA    R4,9(,R3)           POINT TO FIRST DSN IN LIST
         XR    R2,R2               CLEAR REGISTER
         XR    R3,R3               CLEAR REGISTER
         ICM   R3,B'0001',LSTCONCT LOAD CONCATENATION NUMBER
         BZ    PRTHD6A
         M     R2,=A(L'HD2DSNAM+1) MULTIPLY TO DISPLACE FOR DSNAME
         B     PRTHD6A
PRTHD4   MVC   HD2WHERE(14),=CL14'A TASK LIBRARY'
         MVC   PUTAREA+1(L'HD2MSG),HD2MSG MOVE HEADING TO IOAREA
         BAS   R14,OUTLINE         WRITE MESSAGE
         B     LOADM               GO TRY TO LOAD MODULE
PRTHD5   CLI   JSDDN,C'S'          STEPLIB?
         BNE   *+L'*+10            NO
         MVC   HD2WHERE(16),=CL16'THE STEP LIBRARY'
         B     *+L'*+6
         MVC   HD2WHERE(15),=CL15'THE JOB LIBRARY'
         MVC   PUTAREA+1(L'HD2MSG),HD2MSG MOVE HEADING TO IOAREA
         BAS   R14,OUTLINE         WRITE MESSAGE
         LA    R4,DSNTB+2          POINT TO FIRST DSN IN TABLE
         XR    R2,R2               CLEAR REGISTER
         XR    R3,R3               CLEAR REGISTER
         ICM   R3,B'0001',LSTCONCT LOAD CONCATENATION NUMBER
         BZ    PRTHD6A
         CLM   R3,B'0011',NRDSN    CHECK IN CASE OF TABLE OVERFLOW
         BNL   LOADM               SKIP IF YES
         M     R2,=A(L'DSNTB)      MULTIPLY TO DISPLACE FOR DSNAME
         B     PRTHD6A
PRTHD6   MVC   HD2WHERE(13),=CL13'THE ISPF LINK'
         MVC   PUTAREA+1(L'HD2MSG),HD2MSG MOVE HEADING TO IOAREA
         BAS   R14,OUTLINE         WRITE MESSAGE
         LA    R4,ISPFTB+2         POINT TO FIRST DSN IN TABLE
         XR    R2,R2               CLEAR REGISTER
         XR    R3,R3               CLEAR REGISTER
         OC    ISPFNR,ISPFNR       DSNAME(S) KNOWN?
         BZ    LOADM               SKIP IF NOT
         ICM   R3,B'0001',LSTCONCT LOAD CONCATENATION NUMBER
         BZ    PRTHD6A
         CLM   R3,B'0011',ISPFNR   CHECK IN CASE OF TABLE OVERFLOW
         BNL   LOADM               SKIP IF YES
         M     R2,=A(L'ISPFTB)     MULTIPLY TO DISPLACE FOR DSNAME
PRTHD6A  AR    R4,R3               DISPLACE INTO THE TABLE
         MVC   HD2DSNAM(L'HD2DSNAM),0(R4) MOVE DSNAME TO MESSAGE
         MVC   PUTAREA+10(L'HD2DSN),HD2DSN MOVE HEADING TO IOAREA
         BAS   R14,OUTLINE         WRITE MESSAGE
         SPACE 1
*------- ATTEMPT TO LOAD THE MODULE.
         SPACE 1
        CNOP   0,4
LOADM   LOAD   EPLOC=MODULNAM,ERRET=LOADERR
         B     LOADX
        CNOP   0,4
LOADI   LOAD   EPLOC=MODULNAM,DCB=DCBISPF,ERRET=LOADERR
LOADX    STM   R0,R1,EPA           ALL ABOUT LOAD MODULE
         TM    SWPRCS,STATUS       STATUS TEST REQUESTED?
         BZ    SKIPST              NO
         MVC   PUTAREA+10(30),=CL30'-> STATUS : TASK=N ISPF=N JS=.'
         TM    SWPRCS,SUBTSK
         BZ    *+L'*+4
         MVI   PUTAREA+27,C'Y'
         TM    SWMISC,ISPFACT
         BZ    *+L'*+4
         MVI   PUTAREA+34,C'A'
         MVC   PUTAREA+39(1),JSDDN
         MVC   PUTAREA+41(11),=CL11'/ W=.. C=..'
         XR    R1,R1
         IC    R1,LSTWHERE
         STC   R1,PUTAREA+46
         SRL   R1,4
         STC   R1,PUTAREA+45
         OC    PUTAREA+45(2),=XL2'F0F0'
         TR    PUTAREA+45(2),TRTBL1
         IC    R1,LSTCONCT
         STC   R1,PUTAREA+51
         SRL   R1,4
         STC   R1,PUTAREA+50
         OC    PUTAREA+50(2),=XL2'F0F0'
         TR    PUTAREA+50(2),TRTBL1
         MVC   PUTAREA+53(17),=CL17'(T=.. I=.. JS=..)'
         IC    R1,WTASK
         STC   R1,PUTAREA+57
         SRL   R1,4
         STC   R1,PUTAREA+56
         OC    PUTAREA+56(2),=XL2'F0F0'
         TR    PUTAREA+56(2),TRTBL1
         IC    R1,WISPF
         STC   R1,PUTAREA+62
         SRL   R1,4
         STC   R1,PUTAREA+61
         OC    PUTAREA+61(2),=XL2'F0F0'
         TR    PUTAREA+61(2),TRTBL1
         IC    R1,WJS
         STC   R1,PUTAREA+68
         SRL   R1,4
         STC   R1,PUTAREA+67
         OC    PUTAREA+67(2),=XL2'F0F0'
         TR    PUTAREA+67(2),TRTBL1
         BAS   R14,OUTLINE         WRITE STATUS MESSAGE
         LM    R0,R1,EPA           RESTORE ALL ABOUT LOAD MODULE
SKIPST   NI    EPA,X'7F'           TURN OFF HIGH ORDER BIT
         L     R2,EPA              RELOAD ENTRY POINT ADDRESS
         XR    R3,R3               CLEAR REGISTER
         SPACE 1
*------- FORMAT GENERAL INFORATION ABOUT THE MODULE.
*              R1 -  BYTE 0 CONTAINS AUTHORIZATION CODE,
*                    BYTES 1-3 CONTAINS MODULE LENGTH IN DOUBLE WORDS.
*              EPA - BYTES 0-3 CONTAIN MODULE ENTRY POINT ADDRESS.
         SPACE 1
         STC   R1,WORK5            SAVE THE AUTH CODE
         SLL   R1,8                CLEAR THE AUTH CODE PORTION
         SRL   R1,8
         MH    R1,=H'8'            MULTIPLY BY 8 FOR LENGTH IN BYTES
         STCM  R1,B'0111',WORK5+1  SAVE LENGTH IN BYTES
         MVC   HEXWL(L'HEXWL),WORK5+1 KEEP LENGTH FOR EYE-CATCHER CHECK
         MVC   HD1MNAM,MODULNAM    SET MODULE NAME
         UNPK  WORK9,EPA(5)        UNPACK HEX FIELD + 1
         TR    WORK9(L'WORK9-1),TRTBL1 TRANSLATE TO PRINTABLE
         MVC   HD1EPA,WORK9        MOVE EPA TO MESSAGE
         UNPK  WORK9,WORK5(5)      UNPACK HEX FIELD + 1
         TR    WORK9(L'WORK9-1),TRTBL1 TRANSLATE TO PRINTABLE
         MVC   HD1LNGTH,WORK9+2    MOVE LENGTH TO MESSAGE
         MVC   HD1AUTH,WORK9       MOVE AUTH CODE TO MESSAGE
         SPACE 1
*------- DETERMINES WHERE IN MEMORY THE MODULE IS LOCATED.
*        THE ENTRY POINT ADDRESS IS COMPARED TO THE VIRTUAL STORAGE
*        ADDRESSES OF THE STORAGE SUBPOOLS FOR THE LOCAL AND COMMON
*        STORAGE AREAS AS DEFINED IN THE CVT AND THE GDA.
         SPACE 1
         LA    R15,*+L'*+6         SET BRANCH ADDRESS - - - -* AMODE31
         O     R15,=A(X'80000000') SET AMODE 31 BIT ON  - - -*
         BASSM R14,R15             GO TO AMODE 31 - - - - - -*
         L     R2,CVTPTR           LOAD ADDRESS OF CVT
         USING CVT,R2              SET ADDRESSABILITY TO CVT
         L     R3,CVTGDA           LOAD ADDRESS OF GDA
         USING GDA,R3              SET ADDRESSABILITY TO GDA
         L     R4,CVTSMEXT         LOAD ADDRESS OF STORAGE MAP EXTENS
         USING CVTVSTGX,R4         SET ADDRESSABILITY TO MAP EXTENS
         MVC   WORK5,=CL5'USER '   ASSUME USER 'PRIVATE'
         CLC   EPA,CVTSHRVM        COMPARE TO START OF CSA
         BL    LOCATD              IF LESS THAN IT MUST BE GOOD
         MVC   WORK5,=CL5'CSA  '   ASSUME CSA
         CLC   EPA,CVTMLPAS        COMPARE TO START OF MLPA
         BL    LOCATD              IF LESS THAN IT MUST BE GOOD
         MVC   WORK5,=CL5'MLPA '   ASSUME MLPA
         CLC   EPA,CVTFLPAS        COMPARE TO START OF FLPA
         BL    LOCATD              IF LESS THAN IT MUST BE GOOD
         MVC   WORK5,=CL5'FLPA '   ASSUME FLPA
         CLC   EPA,CVTPLPAS        COMPARE TO START OF PLPA
         BL    LOCATD              IF LESS THAN IT MUST BE GOOD
         MVC   WORK5,=CL5'PLPA '   ASSUME PLPA
         CLC   EPA,GDASQA          COMPARE TO START OF SQA
         BL    LOCATD              IF LESS THAN IT MUST BE GOOD
         MVC   WORK5,=CL5'EPLPA'   ASSUME E-PLPA
         CLC   EPA,CVTEFLPS        COMPARE TO START OF EFLPA
         BL    LOCATD              IF LESS THAN IT MUST BE GOOD
         MVC   WORK5,=CL5'EFLPA'   ASSUME E-MLPA
         CLC   EPA,CVTEMLPS        COMPARE TO START OF EFLPA
         BL    LOCATD              IF LESS THAN IT MUST BE GOOD
         MVC   WORK5,=CL5'EMLPA'   ASSUME E-MLPA
         CLC   EPA,GDAECSA         COMPARE TO START OF E-CSA
         BL    LOCATD              IF LESS THAN IT MUST BE GOOD
         MVC   WORK5,=CL5'ECSA '   ASSUME E-CSA
         CLC   EPA,GDAEPVT         COMPARE TO START OF E-PRIVATE
         BL    LOCATD              IF LESS THAN IT MUST BE GOOD
         MVC   WORK5,=CL5'EPVT '   ASSUME E-PRIVATE
LOCATD   LA    R15,*+L'*+2         SET BRANCH ADDRESS - - - -* AMODE24
         BASSM R14,R15             GO TO AMODE 24 - - - - - -*
         DROP  R2,R3,R4            DROP CVT, GDA, MAP EXTENS
         MVC   HD1AREA,WORK5       SAVE STORAGE NAME
         MVC   PUTAREA+1(L'HD1MSG),HD1MSG MOVE HEADING TO IOAREA
         BAS   R14,OUTLINE         PUT LINE
         SPACE 1
*------- FORMAT THE CDE INFORMATION.
         SPACE 1
         LA    R15,*+L'*+6         SET BRANCH ADDRESS - - - -* AMODE31
         O     R15,=A(X'80000000') SET AMODE 31 BIT ON  - - -*
         BASSM R14,R15             GO TO AMODE 31 - - - - - -*
         L     R8,TCBLLS           LOAD LLE ADDRESS FROM TCB
         USING LLE,R8              SET ADDRESSABILITY TO LLE
         L     R8,LLECDPT          LOAD CDE ADDRESS FROM LLE
         DROP  R8                  DROP ADDRESSABILITY TO LLE
         USING CDENTRY,R8          SET ADDRESSABILITY TO CDE
         LA    R15,*+L'*+2         SET BRANCH ADDRESS - - - -* AMODE24
         BASSM R14,R15             GO TO AMODE 24 - - - - - -*
CKCDNAME CLC   CDNAME,MODULNAM     SAME MODULE AS REQUESTED?
         BE    CKATTR1             YES, CHECK ATTRIBUTES.
         L     R8,CDCHAIN          NO, LOAD ADDRESS OF NEXT CDE
         LTR   R8,R8               TEST ADDRESS
         BNZ   CKCDNAME            NOT ZERO, CHECK CDNAME ENTRY.
         SPACE 1
*------- CORRECT CDE COULD NOT BE FOUND.
         SPACE 1
         MVC   PUTAREA+10(3),=CL3'---'
         MVC   PUTAREA+14(L'CDEMSG),CDEMSG
         BAS   R14,OUTLINE         GO WRITE ERROR MESSAGE
         B     FMTEYE
         SPACE 1
*------- DETERMINE THE MODULE ATTRIBUTES.
         SPACE 1
CKATTR1  MVI   PCDATTR,C' '        CLEAR CDE ATTRIBUTES LINE
         MVC   PCDATTR+1(3*(L'PCDATTR)-1),PCDATTR
         LA    R9,PCDATTR-1        LOAD ADDRESS OF PRINT WORK AREA
         TM    CDATTR,CDNIP        SEE IF NIP LOADED OR LPA?
         BZ    *+L'*+10            NO, BRANCH
         MVC   0(7,R9),=CL7',IN-LPA' SET IN LPA
         LA    R9,7(R9)            INCREMENT TO NEXT MESSAGE AREA
         TM    CDATTR,CDREN        SEE IF RE-ENTRANT MODULE?
         BZ    *+L'*+10            NO, BRANCH
         MVC   0(5,R9),=CL5',RENT'   SET RENT
         LA    R9,5(R9)            INCREMENT TO NEXT MESSAGE AREA
         TM    CDATTR,CDSER        SEE IF SERIALLY RE-USEABLE MODULE?
         BZ    *+L'*+10            NO, BRANCH
         MVC   0(5,R9),=CL5',REUS'   SET REUS
         LA    R9,5(R9)            INCREMENT TO NEXT MESSAGE AREA
         TM    CDATTR,CDNFN        SEE IF NOT FUNCTIONAL MODULE?
         BZ    *+L'*+10            NO, BRANCH
         MVC   0(10,R9),=CL10',NON-FUNCT' SET NON-FUNCT
         LA    R9,10(R9)           INCREMENT TO NEXT MESSAGE AREA
         TM    CDATTR,CDMIN        SEE IF ALIAS? (MINOR CDE)
         BZ    TCDJPA              NO, BRANCH
         MVC   0(10,R9),=CL10',ALIAS-OF ' SET ALIAS
         LA    R9,10(R9)           INCREMENT TO NEXT MESSAGE AREA
         L     R6,CDXLMJP          LOAD CDE OF MAJOR NAME
         DROP  R8                  DROP ADDRESSABILITY TO MINOR CDE
         USING CDENTRY,R6          SET ADDRESSABILITY TO MAJOR CDE
         MVI   0(R9),C'"'
         MVC   1(L'CDNAME,R9),CDNAME SAVE MAJOR CDE NAME
         MVI   1+L'CDNAME(R9),C'"'
         LA    R9,L'CDNAME+2(R9)   INCREMENT TO NEXT MESSAGE AREA
         DROP  R6                  DROP ADDRESSABILITY TO MAJOR CDE
         USING CDENTRY,R8          SET ADDRESSABILITY TO MINOR CDE
TCDJPA   TM    CDATTR,CDJPA        IS MODULE IN JOB PACK AREA?
         BZ    *+L'*+10            NO, BRANCH
         MVC   0(7,R9),=CL7',IN-JPA' SET IN JPA
         LA    R9,7(R9)            INCREMENT TO NEXT MESSAGE AREA
         TM    CDATTR,CDNLR        SEE OF NOT LOAD-ONLY?
         BZ    CKATTR2             NO, BRANCH
         MVC   0(14,R9),=CL14',NOT-LOAD-ONLY' SET NOT LOAD-ONLY
         LA    R9,14(R9)           INCREMENT TO NEXT MESSAGE AREA
CKATTR2  TM    CDATTR2,CDSPZ       SEE IF SUBPOOL 0?
         BZ    *+L'*+10            NO, BRANCH
         MVC   0(5,R9),=CL5',SP=0'   SET SUBPOOL 0
         LA    R9,5(R9)            INCREMENT TO NEXT MESSAGE AREA
         TM    CDATTR2,CDRLC       SEE IF EPA RELOCATED?
         BZ    *+L'*+10            NO, BRANCH
         MVC   0(8,R9),=CL8',MIN-RLC' SET RELOCATED
         LA    R9,8(R9)            INCREMENT TO NEXT MESSAGE AREA
         TM    CDATTR2,CDOLY       SEE IF OVERLAY FORMAT?
         BZ    *+L'*+10            NO, BRANCH
         MVC   0(5,R9),=CL5',OVLY'   SET OVLY
         LA    R9,5(R9)            INCREMENT TO NEXT MESSAGE AREA
         TM    CDATTR2,CDSYSLIB    SEE IF FROM AUTH. LIBRARY?
         BZ    *+L'*+10            NO, BRANCH
         MVC   0(10,R9),=CL10',AUTH.-LIB' SET AUTHORIZED LIBRARY
         LA    R9,10(R9)           INCREMENT TO NEXT MESSAGE AREA
         LH    R0,CDUSE            LOAD USE COUNT
         CVD   R0,PCDUSE           CONVERT TO DECIMAL
         MVC   0(11,R9),=CL11',USE-COUNT=' SET TITLE
         LA    R9,11(R9)           INCREMENT TO NEXT MESSAGE AREA
         OI    PCDUSE+7,X'0F'      MAKE COUNT PRINTABLE
         UNPK  0(3,R9),PCDUSE+6(2) UNPACK USE COUNT TO MESSAGE
         MVI   PCDATTR-1,C' '      RESET 1ST COMMA
         MVC   PUTAREA+1(L'PCDELIT),PCDE SET MESSAGE LINE
         LA    R2,PCDE+L'PCDELIT-1
CKNEXT   MVC   PUTAREA+L'PCDELIT+1(L'PCDATTR),1(R2)
         LA    R2,L'PCDATTR(R2)
         CLI   0(R2),C' '
         BE    CKENDL
         LA    R3,PUTAREA+L'PCDE
CKLOOP   CLI   0(R2),C','
         BE    *+L'*+10
         MVI   0(R3),C' '
         BCTR  R3,0
         BCT   R2,CKLOOP
         BAS   R14,OUTLINE         GO WRITE MESSAGE LINE
         B     CKNEXT
CKENDL   BAS   R14,OUTLINE         GO WRITE MESSAGE LINE
         SPACE 1
*------- FORMAT THE EYE-CATCHER IN THE BEGINNING OF THE MODULE.
         SPACE 1
FMTEYE   L     R2,CDXLMJP          LOAD POSSIBLE EXTENT LIST ADDRESS
         TM    CDATTR,CDMIN        SEE IF ALIAS? (MINOR CDE)
         BNO   FMTEYE1             NO, BRANCH
         L     R6,CDXLMJP          LOAD CDE OF MAJOR NAME
         DROP  R8                  DROP ADDRESSABILITY TO MINOR CDE
         USING CDENTRY,R6          SET ADDRESSABILITY TO MAJOR CDE
         L     R2,CDXLMJP          LOAD POSSIBLE EXTENT LIST ADDRESS
         DROP  R6                  DROP ADDRESSABILITY TO MAJOR CDE
         USING CDENTRY,R8          SET ADDRESSABILITY TO MINOR CDE
FMTEYE1  TM    CDATTRB,CDELPDE     SEE IF LPDE
         BO    DELMOD              YES, GET OUT
         DROP  R8                  DROP ADDRESSABILITY TO MINOR CDE
         LTR   R2,R2               SEE IF PRESENT
         BZ    DELMOD              NO, GET OUT
         LA    R15,*+L'*+6         SET BRANCH ADDRESS - - - -* AMODE31
         O     R15,=A(X'80000000') SET AMODE 31 BIT ON  - - -*
         BASSM R14,R15             GO TO AMODE 31 - - - - - -*
         ICM   R2,B'1111',12(R2)   GET LOAD STORAGE BLOCK ADDRESS
         LM    R4,R5,=A(HEXWK,HEXWKL)
         LR    R3,R5
         CLM   R3,B'0111',HEXWL
         BNH   *+L'*+4
         ICM   R3,B'0111',HEXWL
         LR    R6,R3
         MVCL  R4,R2               COPY EYE-CATCHER
         LA    R15,*+L'*+2         SET BRANCH ADDRESS - - - -* AMODE24
         BASSM R14,R15             GO TO AMODE 24 - - - - - -*
         L     R2,=A(HEXWK,HEXWKL)
         LR    R4,R2
         LA    R5,L'DUEYEC
         XR    R3,R3
         LA    R3,1(R3)
         SR    R6,R5
         BP    *-6
         BZ    *+L'*+2
         LPR   R6,R6
EYELOOP  MVC   DUEYEC(L'DUEYEC),0(R2)
         TR    DUEYEC(L'DUEYEC),TRTBL2 SET UNPRINTABLE TO BLANKS
         LR    R0,R2
         SR    R0,R4
         STC   R0,DUEYED+1
         SRL   R0,4
         STC   R0,DUEYED
         OC    DUEYED,=XL2'F0F0'
         TR    DUEYED(L'DUEYED),TRTBL1
         LA    R1,DUEYEF1
         BAS   R14,HEXPRT
         LA    R1,DUEYEF2
         BAS   R14,HEXPRT
         LA    R1,DUEYEF3
         BAS   R14,HEXPRT
         LA    R1,DUEYEF4
         BAS   R14,HEXPRT
         MVC   PUTAREA+5(L'DUEYE),DUEYE
         BAS   R14,OUTLINE         GO WRITE EYE-CATCHER LINE
         BCT   R3,EYELOOP
         SPACE 1
*------- DELETE THE LOAD MODULE AFTER ALL PROCESSING HAS COMPLETED.
         SPACE 1
DELMOD  DELETE EPLOC=MODULNAM      DELETE LOADED MODULE
         LTR   R15,R15             TEST RETURN CODE
         BZ    GETNME3             ZERO, CONTINUE
         MVC   PUTAREA+10(3),=CL3'---'
         MVC   PUTAREA+14(L'DELMSG),DELMSG MOVE IN ERROR MSG
         STCM  R15,B'1111',WORK5
         UNPK  WORK9,WORK5(5)      UNPACK HEX FIELD + 1
         TR    WORK9(L'WORK9-1),TRTBL1 TRANSLATE TO PRINTABLE
         MVC   PUTAREA+15+L'DELMSG(4),WORK9+4 MOVE IN RC
         BAS   R14,OUTLINE         WRITE OUT DELETE ERROR MESSAGE
         B     GETNME3
         SPACE 1
*------- IF THE PROGRAM COULD NOT LOAD THE MODULE, CONTROL
*        COMES HERE. AN ERROR MESSAGE IS WRITTEN GIVING THE
*        ABEND AND REASON CODE.
*              R1  = BYTES 2-3 CONTAIN THE ABEND CODE.
*              R15 = BYTES 2-3 CONTAIN THE REASON CODE.
         SPACE 1
LOADERR  ST    R1,EPA              SAVE REGISTER 1
         STCM  R15,B'1111',WORK5   SAVE REGISTER 15
         UNPK  WORK9,EPA(5)        UNPACK HEX FIELD + 1
         TR    WORK9(L'WORK9-1),TRTBL1 TRANSLATE TO PRINTABLE
         MVC   LOADABND,WORK9+5    MOVE ABEND CODE TO MESSAGE
         UNPK  WORK9,WORK5(5)      UNPACK HEX FIELD + 1
         TR    WORK9(L'WORK9-1),TRTBL1 TRANSLATE TO PRINTABLE
         MVC   LOADRSN,WORK9+4     MOVE REASON CODE TO MESSAGE
         MVC   PUTAREA+10(3),=CL3'---'
         MVC   PUTAREA+14(L'LOADMSG),LOADMSG MOVE MSG TO IOAREA
         BAS   R14,OUTLINE         WRITE MESSAGE
         B     GETNME3             GO GET NEXT REQUEST
         SPACE 1
*------- END OF PROCESSING.
         SPACE 1
         DROP  R7                  DROP ADDRESSABILITY TO TCB
LEAVE    TM    SWPRCS,FREEIB       INPUT BUFFER TO BE FREED?
         BZ    NOFRIB              NO, BRANCH
         NI    SWPRCS,255-FREEIB
         LA    R15,GTPBZ           ADDRESSABILITY FOR THE GTPB
         USING GTPB,R15
         L     R1,GTPBIBUF         GET ADDRESS OF INPUT BUFFER
         DROP  R15
         LH    R0,0(R1)            INPUT BUFFER LENGTH
         AH    R0,=H'7'            ROUND UP TO 8
         SRL   R0,3
         SLL   R0,3
        FREEMAIN RC,LV=(0),A=(1),SP=1
NOFRIB   TM    SWMISC,ISPFACT      IS ISPF ACTIVE?
         BO    NOISPF              YES
         TM    SWMISC,DDISPFO      NO, ISPF LINK DD?
         BZ    NOISPF              NOT FOUND OR NOT OPENED
        CLOSE  (DCBISPF)           CLOSE ISPF LINK
NOISPF   TM    SWPRCS,JBATCH       SEE IF BATCH JOB?
         BZ    QUIT                NO, BRANCH
         TM    SWMISC,DDINO        SEE IF INPUT OPENED?
         BZ    QUIT                NO, BRANCH
        CLOSE  (DCBIN)             CLOSE INPUT FILE
         TM    SWMISC,DDOUTO       SEE IF OUTPUT OPENED?
         BZ    QUIT                NO, BRANCH
        CLOSE  (DCBOUT)            CLOSE OUTPUT FILE
QUIT     XR    R15,R15
        $XRET  CC=(R15)            RETURN TO CALLER
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                  M O D L O O K     R O U T I N E S                  *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
*------- ROUTINE TO EDIT IN HEXADECIMAL THE EYE-CATCHER DATA.
*              (R14 SAVED IN "SVRET")
         SPACE 1
HEXPRT   ST    R14,SVRET           SAVE RETURN ADDRESS
         UNPK  WORK9,0(5,R2)
         TR    WORK9(L'WORK9-1),TRTBL1
         CL    R3,=F'1'
         BNE   HEXPRT1
         SH    R5,=H'4'
         CLR   R5,R6
         BNL   HEXPRT1
         LR    R15,R6
         SR    R15,R5
         SR    R6,R15
         AR    R15,R15
         LA    R14,WORK9+8
         SR    R14,R15
         BCT   R15,*+L'*+6
         MVC   0(*-*,R14),=CL8' '  <<EXECUTED>>
         EX    R15,*-6
HEXPRT1  MVC   0(4,R1),WORK9
         MVC   4(4,R1),WORK9+4
         LA    R2,4(R2)
         L     R14,SVRET           RESTORE RETURN ADDRESS
         BR    R14                 GO BACK
         SPACE 1
*------- ROUTINE TO HANDLE ALL OUTPUT FOR THE PROGRAM.
*        IF WE ARE : 1. RUNNING AS A STARTED TASK, A WTO IS ISSUED,
*                    2. A BATCH JOB, PUT IS USED,
*                    3. RUNNING UNDER TSO, PUTLINE IS ISSUED.
*              (R14 SAVED IN "SVRET")
         SPACE 1
OUTLINE  ST    R14,SVRET           SAVE RETURN CODE
         TM    SWPRCS,JBATCH       SEE IF BATCH JOB
         BZ    OUTLINE1            NO, BRANCH
        PUT    DCBOUT,PUTAREA      WRITE MESSAGE LINE
         B     OUTLINE3            GET OUT
OUTLINE1 TM    SWPRCS,USTSO        SEE IF TSO USER
         BZ    OUTLINE2            NO, BRANCH
         LA    R1,L'PUTAREA-1
         LA    R14,PUTAREA+L'PUTAREA-1
         CLI   0(R14),C' '
         BNE   *+L'*+10
         BCTR  R14,0
         BCT   R1,*-10
         LA    R1,10               NONE MEANS A BLANK LINE
         MVI   MSGOUT,C' '         CLEAR BUFFER TO SPACES
         MVC   MSGOUT+1(L'MSGOUT-1),MSGOUT
         BCT   R1,*+L'*+6
         MVC   MSGOUT(*-*),PUTAREA+1 <<EXECUTED>>
         EX    R1,*-6
         XC    MSGCNTL,MSGCNTL     SET IN PUTLINE LINE LENGTH
         LA    R1,L'MSGCNTL+1(R1)
         STH   R1,MSGCNTL
         LA    R0,MSGWORK          ADDRESS OF MSG BUFFER
         L     R1,CPPLADDR         ADDRESS OF CPPL
         USING CPPL,R1
         L     R14,CPPLUPT         UPT ADDRESS
         L     R15,CPPLECT         ECT ADDRESS
         DROP  R1
         XC    MYECB,MYECB         CLEAR ECB TO ZEROS
         XC    PTPB(PTPBLEN),PTPB  CLEAR PLIST TO ZEROS
         XC    IOPLZ(IOPLLEN),IOPLZ CLEAR PARM LIST TO ZEROS
         LA    R1,IOPLZ            ADDRESS OF LIST
        PUTLINE PARM=PTPB,UPT=(R14),ECT=(R15),ECB=MYECB,               X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X
               OUTPUT=((R0),TERM,SINGLE,DATA),                         X
               MF=(E,(1))          WRITE MESSAGE LINE
         B     OUTLINE3            GET OUT
OUTLINE2 MVC   WTOL+4(L'PUTAREA-1),PUTAREA+1 SET WTO LIST FORM
        WTO    MF=(E,WTOL)         WRITE MESSAGE
OUTLINE3 MVI   PUTAREA,C' '
         MVC   PUTAREA+1(L'PUTAREA-1),PUTAREA
         L     R14,SVRET           RESTORE RETURN ADDRESS
         BR    R14                 GO BACK
         SPACE 1
*------- THIS ROUTINE IS THE DCB OPEN EXIT FOR THE OUTPUT FILE.
*        IT WILL SET THE OUTPUT BLKSIZE TO 9044 IF IT HAS NOT
*        BEEN SPECIFIED.
         SPACE 1
OUTEXIT  LA    R2,0(R1)            LOAD DCB ADDRESS
         USING IHADCB,R2           SET ADDRESSABILITY TO DCB
         CLC   DCBBLKSI,=XL2'0000' SEE IF OUTPUT BLKSIZE SPECIFIED
         BNER  R14                 YES, RETURN TO OPEN
         MVC   DCBBLKSI,=H'9040'   NO,  SET TO 9040
         BR    R14                 RETURN TO OPEN
         DROP  R2                  DROP ADDRESSABILITY TO DCB
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        CONSTANTS AND WORK-AREAS                                     *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
        CNOP   0,8
DOUBLE   DC    D'0'                DOUBLE WORD WORK-AREA
PCDUSE   DC    D'0'
MODULNAM DC    CL8' '
ANSWER   DC    5F'0'               FRS, TIOT, COMM, TSO, PSB
SCANPTR  DC    3F'0'               GETAREA SCAN POINTERS (R1-R2-R3)
PADDR    DC    F'0'
CPPLADDR DC    F'0'
SVRET    DC    F'0'
MYECB    DC    F'0'                USED BY WTOR, PUTLINE, GETLINE
EPA      DC    2F'0'               R0-R1 FROM LOAD
RESTCNT  DC    F'0'
RESTPTR  DC    F'0'
         SPACE 1
BLDLRC   DC    F'0'                BLDL RETURN CODE (R15)
BLDLRS   DC    F'0'                BLDL REASON CODE (R0)
LSTADDR  DC    AL2(1)            # ENTRIES IN LIST - - - - - - ->*
         DC    AL2(LSTL)           LENGTH OF EACH ENTRY          *
LSTNM    DC    CL8' '              MEMBER NAME                   *
LSTTTR   DC    XL3'0'              MEMBER TTR                    *
LSTCONCT DC    XL1'0'              CONCATENATION NUMBER 00-FF    *
LSTWHERE DC    XL1'0'              WHERE ENTRY WAS FOUND         *
*                                    0 - PRIVATE LIB             *
*                                    1 - LINK LIBRARY            *
*                                    2 - JOB, TASK OR STEPLIB    *
*                                    3-FF PARENT TASK LIB        *
LSTTYPE  DC    XL1'0'              TYPE OF MEMBER                *
*                                    X'80' OFF - MEMBER NAME     *
*                                          ON  - ALIAS NAME      *
LSTZ     EQU   *-LSTTTR                                          *
LSTL     EQU   *-LSTNM <- - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
WORK9    DC    XL9'0'              TEMPORARY WORK-AREA
WORK5    DC    XL5'0'               " "       " "
WTASK    DC    AL1(2)
WISPF    DC    AL1(3)
WJS      DC    AL1(5)
         SPACE 1
SWPRCS   DC    XL1'0' - - - - - -> PROCESSING SWITCHES
STASK    EQU   X'80'               THIS IS A STARTED TASK
JBATCH   EQU   X'40'               THIS IS A BATCH JOB
USTSO    EQU   X'20'               THIS IS A TSO USER
TSOFU    EQU   X'10'               THIS IS A TSO FOREGROUND USER
SUBTSK   EQU   X'08'               TSO - NOT DIRECT SUBTASK OF ISPF
FREEIB   EQU   X'04'               TSO GETLINE BUFFER MUST BE FREED
STATUS   EQU   X'02'               TEST - STATUS DISPLAY REQUESTED
FLG1ST   EQU   X'01'               1ST TIME DONE
SWMISC   DC    XL1'0' - - - - - -> MISCELLANEOUS SWITCHES
DDIN     EQU   X'80'               BATCH - THERE IS A SYSIN DD
DDINO    EQU   X'40'               BATCH - INPUT OPENED
DDOUT    EQU   X'20'               BATCH - THERE IS A SYSPRINT DD
DDOUTO   EQU   X'10'               BATCH - OUTPUT OPENED
ISPFACT  EQU   X'08'               TSO - ISPF IS ACTIVE
DDISPFO  EQU   X'04'               TSO - ISPF LINK DD FOUND AND OPENED
         SPACE 1
TRTBL1   EQU   *-C'0'              HEX CONVERSION TRANSLATE TABLE
         DC    C'0123456789ABCDEF'
TRTBL2   DC    C'                ' 00 - 0F
         DC    C'                ' 10 - 1F
         DC    C'                ' 20 - 2F
         DC    C'                ' 30 - 3F
         DC    C'           .< + ' 40 - 4F
         DC    C'           $*)  ' 50 - 5F
         DC    C'-/         , (>?' 60 - 6F
         DC    C'          :#@''="' 70 - 7F
         DC    C'                ' 80 - 8F
         DC    C'                ' 90 - 9F
         DC    C'                ' A0 - AF
         DC    C'                ' B0 - BF
         DC    C' ABCDEFGHI      ' C0 - CF
         DC    C' JKLMNOPQR      ' D0 - DF
         DC    C'  STUVWXYZ      ' E0 - EF
         DC    C'0123456789      ' F0 - FF
         SPACE 1
WTOQ    WTOR   '=== ENTER "MODLOOK" MODULE(S) NAME(S) OR ''END'' :',   X
               GETAREA,L'GETAREA,MYECB,ROUTCDE=2,MF=L
WTOL    WTO    '----+----1----+----2----+----3----+----4----+----5----+X
               ----6----+----7----+----',ROUTCDE=2,MF=L
WTOM    WTO    ' => "MODLOOK" (NOT INVOKED AS TSO COMMAND OR SUB-COMMANX
               D)',ROUTCDE=11,DESC=7,MF=L
WTOX    WTO    ' =>          : DD-CARD MISSING - EXIT -',              X
               ROUTCDE=11,DESC=7,MF=L
WTOXDD   EQU   WTOX+8
WTOZ    WTO    ' =>          : OPEN FAILED - EXIT -',                  X
               ROUTCDE=11,DESC=7,MF=L
WTOZDD   EQU   WTOZ+8
         SPACE 1
PTPB    PUTLINE MF=L
PTPBLEN  EQU   *-PTPB
IOPLZ    DC    0F'0',(IOPLLEN)X'0' I-O PARM LIST FOR PUTLINE
GTPBZ    DC    0F'0',(GTPBLEN)X'0' GETLINE PARM BLOCK
        CNOP   0,4
MSGWORK  DS    0CL84               PUTLINE WORK USE
MSGCNTL  DC    F'0'                     CONTROL WORD FOR PUTLINE
MSGOUT   DC    CL80' '                  PUTLINE TEXT
         SPACE 1
PUTAREA  DC    CL80' '
GETAREA  DC    CL80' '
         SPACE 1
HD1MSG   DS    0CL72 - - - - - - - - - - - - - - - - - - - - - ->*
HD1MNAM  DC    CL8'????????',CL5' EPA='                          *
HD1EPA   DC    CL8' ',CL8',LENGTH='                              *
HD1LNGTH DC    CL6' ',CL6',AUTH='                                *
HD1AUTH  DC    CL2' ',CL24',AREA CONTAINING MODULE='             *
HD1AREA  DC    CL5' '  <- - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
HD2MSG   DS    0CL70 - - - - - - - - - - - - - - - - - - - - - ->*
HD2MNAM  DC    CL8'????????',CL28' WAS FOUND IN CONCATENATION '  *
HD2CONCT DC    CL2' ',CL4' OF '                                  *
HD2WHERE DC    CL28' ' <- - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
HD2DSN   DS    0CL60 - - - - - - - - - - - - - - - - - - - - - ->*
         DC    CL16'DATA-SET NAME = '                            *
HD2DSNAM DC    CL44' ' <- - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
PCDE     DS    0CL(L'PUTAREA-1)  - - - - - - - - - - - - - - - ->*
PCDELIT  DC    CL17'    ATTRIBUTES : '                           *
PCDATTR  DC    3CL(L'PCDE-L'PCDELIT)' '  <- - - - - - - - - - - -*
         SPACE 1
LOADMSG  DS    0CL43 - - - - - - - - - - - - - - - - - - - - - ->*
         DC    CL21'LOAD FAILED - ABEND S'                       *
LOADABND DC    CL3' ',CL15' / REASON CODE='                      *
LOADRSN  DC    CL4' '  <- - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
DUEYE    DS    0CL70 - - - - - - - - - - - - - - - - - - - - - ->*
         DC    CL1'+'                                            *
DUEYED   DC    CL2' ',CL3' '                                     *
DUEYEF1  DC    CL9' ',CL2' '                                     *
DUEYEF2  DC    CL9' ',CL3' '                                     *
DUEYEF3  DC    CL9' ',CL2' '                                     *
DUEYEF4  DC    CL9' ',CL4'   *'                                  *
DUEYEC   DC    CL16' ',CL1'*'  <- - - - - - - - - - - - - - - - -*
         SPACE 1
CDEMSG   DC    CL38'UNABLE TO LOCATE THE CDE OF THE MODULE'
DELMSG   DC    CL24'ERROR IN DELETING THE MODULE - RC='
         SPACE 1
HEXWL    DC    XL3'0'
HEXWK    DC    6XL(L'DUEYEC)'0'  <- - - - - - - - - EYE-CATCHER LENGTH
HEXWKL   EQU   *-HEXWK
         SPACE 1
        PRINT  NOGEN
DCBISPF DCB    DDNAME=ISPLLIB,DSORG=PO,DEVD=DA,MACRF=(R),BFALN=D
DCBIN   DCB    DDNAME=SYSIN,DSORG=PS,MACRF=(GM),LRECL=80,              X
               EODAD=GETEODAD,RECFM=FB
DCBOUT  DCB    DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),LRECL=80,           X
               RECFM=FBA,EXLST=EXLISTP
        PRINT  GEN
EXLISTP  DC    0F'0',XL1'85',AL3(OUTEXIT) EXIT LIST FOR OPEN
         SPACE 1
PLDSN    DC    A(JSDDN,DSNTB,TBSIZE,NRDSN+X'80000000')
JSDDN    DC    CL8' '
TBSIZE   DC    Y(DSNTBL)
NRDSN    DC    Y(*-*)
DSNTB    DC    20XL(2+L'HD2DSNAM)'0'  <- - - - - DSNAME'S TABLE LENGTH
DSNTBL   EQU   *-DSNTB
         SPACE 1
PLISPF   DC    A(ISPFDD,ISPFTB,ISPFSZ,ISPFNR+X'80000000')
ISPFDD   DC    CL8' '
ISPFSZ   DC    Y(ISPFTBL)
ISPFNR   DC    Y(*-*)
ISPFTB   DC    20XL(2+L'HD2DSNAM)'0'  <- - - - - DSNAME'S TABLE LENGTH
ISPFTBL  EQU   *-ISPFTB
         SPACE 1
CT441PRM DC    A(ENTRYCDE)         IKJCT441 PARM.LIST
         DC    A(NAMEADDR,NAMELENG,DATAADDR,DATALENG)
         DC    A(TOKENPRM+X'80000000') SET VL=1
ENTRYCDE DC    A(TSVNOIMP)         ENTRY CODE
NAMEADDR DC    A(VARINAME)         ADDRESS OF VARIABLE NAME
NAMELENG DC    A(L'VARINAME)       LENGTH OF VARIABLE NAME
DATAADDR DC    A(*-*)              ADDRESS OF VARIABLE DATA
DATALENG DC    A(*-*)              LENGTH OF VARIABLE DATA
TOKENPRM DC    F'0'                TOKEN TO VARIABLE ACCESS SERVICE
VARINAME DC    C'SYSOUTTRAP'       VARIABLE NAME FIELD
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        LITERAL POOL - DSECT'S.                                      *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
         LTORG
         SPACE 1
        PRINT  NOGEN
        CVT    DSECT=YES
        IKJTCB
        IKJRB  DSECT=YES,LIST=NO
TIODSECT DSECT
        IEFTIOT1
        IKJCPPL
        IKJPSCB
        IKJEBECA
        IKJIOPL
IOPLLEN  EQU   *-IOPL
        IKJGTPB
GTPBLEN  EQU   *-GTPB
        IKJTSVT
        IHALLE
        IHACDE
        IHAGDA
        DCBD   DSORG=PS,DEVD=DA
        PRINT  GEN
         SPACE 1
         END
