DOPG     TITLE '--- DOPROG TSO COMMAND PROCESSOR ---'
*************************************************************JFS03NOV77
*             LATEST UPDATE DATE   3, JUNE '83   RRS         JFS03NOV77
*************************************************************JFS03NOV77
         SPACE 1                                             JFS03NOV77
* THE DOPROG TSO COMMAND WAS
*        DESIGNED AND DEVELOPED BY J. SCHINDLER (CSC), MARCH 1975
* THE DOPROG COMMAND IS BASED ON AN EARLIER VERSION THAT WAS
*        DESIGNED AND DEVELOPED BY GENE CZARCINSKI
*                                  NASA, GODDARD SPACE FLIGHT CENTER
*                                  GREENBELT, MARYLAND
*
* UPDATED 10APR77, GENE CZARCINSKI, NASA/GSFC (GT00501)
*       . RENAME CSECT FROM 'GSFTSODO' TO 'DOPROG' WITH AN
*         ENTRY POINT OF DOPGM ... MORE CONSISTANCY AND
*         CLEANER CMDLIB
*       . CHANGE BASE REG INIT CODE .. IT IS FLAKY AND MAY CAUSE
*         ERROR*********
* UPDATED 03NOV77, J. SCHINDLER, (PAC) CSC
*       . INCLUDED CODE SO THAT THE LATEST UPDATE DATE COULD BE
*         CHANGED EASILY
*       . CHANGED THE LOGIC SO THAT THE 2 BYTES FROM THE ATTACH
*         ECB IS USED AS THE RETURN CODE THAT IS PASSED ON EXIT
*         FROM THIS COMMAND PROCESSOR
* UPDATED 18APR80, B. GODFREY, AFDSC
*       . BALR TO IKJPARS INSTEAD OF LINK, FOR MVS
*       . REPLACE REGS MACRO WITH 16 EQUATES
*       . USE UPTPREFX INSTEAD OF PSCBUSER. ADDED IKJUPT MACRO.
* UPDATED 03JUN83, DICK SZIEDE G.E.
*       . ADD "DOCP" ALIAS, AND SUPPORT CODE TO INVOKE A COMMAND
*         PROCESSOR. THIS ISN'T JOE'S "DOCP," WHICH IS A STAND-ALONE
*         CP, RATHER THAN AN ALIAS OF DOPROG. JOE USED TPUT-TGET TO
*         PROMPT FOR THE COMMAND-LINE, WHICH I DIDN'T LIKE. THIS
*         VERSION WILL TAKE A CP COMMAND-LINE IN QUOTES, OR WILL
*         PROMPT WITH PUTGET IF IT DOESN'T FIND ONE. THUS WE CAN BE
*         USED IN A CLIST.
*
* ORIGIN :       EXTRACTED FROM CBT TAPE 88 FEB, FILE 369.
* ATTRIBUTE :    RENT
* ALIAS :        DOCP
* FURTHER UPDATES BY MOINIL P.A., COMPUTING CENTRE (TP 361)
*                    J.R.C. - ISPRA ESTABLISHMENT
*                    21020 ISPRA (VA), ITALY
         EJECT
* THIS COMMAND PROCESSOR IS DESIGNED TO LOAD AND EXECUTE (ATTACH) A
*        PROGRAM OR A COMMAND IN ONE OF THE SYSTEM LINK LIBRARIES OR
*        A USER LIBRARY (TASKLIB).
* COMMAND SYNTAX :
* ----------------
* DOPROG/DOCP  LOAD-MOD-NAME  'PARMS'  TASKLIB/LIB('DSLIST')
*              RC/NORC/ALLRC  AC
*
*        LOAD-MOD-NAME - NAME OF THE LOAD MODULE (PROGRAM OR COMMAND)
*              TO BE EXECUTED.
*
*        'PARMS' - PARM-FIELD TO BE PASSED TO THE PROGRAM OR COMMAND
*              LINE TO BE PASSED TO COMMAND PROCESSOR (QUOTED STRING).
*
*        TASKLIB('DSLIST') - SPECIFIES THE DATA-SET NAME(S) THAT ARE
*              CONCATENATED AND USED FOR AS TASK LIBRARY, OR
*        LIB('DSLIST') - ALIAS OF TASKLIB.
*
*        RC - SPECIFIES THAT THE NON-ZERO RETURN CODE FROM THE EXECUTED
*              PROGRAM OR COMMAND IS TO BE VIEWED, OR
*        NORC - SPECIFIES THAT THE RETURN CODE IS NOT TO BE VIEWED
*              (DEFAULT), OR
*        ALLRC - SPECIFIES THAT THE RETURN CODE IS TO BE VIEWED.
*
*        AC - SPECIFIES AUTHORIZED MODE (ONLY SYSTEM GROUP USER-ID'S
*              ALLOWED).
*
* NOTE : THE RETURN CODE FROM THE EXECUTED PROGRAM OR COMMAND IS ALWAYS
*        PASSED. IF THIS COMMAND PROCESSOR ENCOUNTERS AN ERROR OR AN
*        ATTENTION IS ENTERED, THE RETURN CODE IS 16.
         EJECT
DOPROG   START 0
         SPACE 1
        $DEFREG
* FLAGS SETTINGS :
* ----------------
*        1... .... - RC (PRINT NON-ZERO RETURN CODES)
*        .1.. .... - ALLRC (PRINT ALL RETURN CODES)
*        ..1. .... - TASKLIB SPECIFIED
*        ...1 .... - DSNAME INPUT IN QUOTES
*        ...  1... - AC(1) ON
*        .... .111 - NOT USED
         SPACE 1
* FLAGS EQUATES :
* ---------------
RCFLG    EQU   B'10000000'    PRINT NON-ZERO RC FLAG
ALLRCFLG EQU   B'01000000'    PRINT ALL RC FLAG
TASKFLG  EQU   B'00100000'    TASKLIB WAS SPECIFIED
QFLG     EQU   B'00010000'    DSNAME WAS INPUT IN QUOTES FLAG
ACFLG    EQU   B'00001000'    AC(1) ON FLAG
PECTFLG  EQU   B'00000010'    PROCESS ECT FLAG
NOPDFLG  EQU   B'00000001'    ECTNOPD FLAG STATUS
         SPACE 1
LV0      EQU   0              AUTHORITY LEVEL DEFINITION : REJECT LEVEL
AUTHC   $MDL@IX
         EJECT
        $XENT  BASE=(R10,R11),LV=WKLEN,TYPE=RENT
         LR    R12,R13
         USING WKAREA,R12
         LR    R9,R1               SAVE ENTRY REGISTER (CPPL)
        $TEW$EC REG=R9,MSG=PUTMSG,ERR=QUIT
         USING CPPL,R9
         SPACE 1
*------- INIT PARSE PARM LIST (PPL).
         SPACE 1
         LA    R8,PARSEPL
         USING PPL,R8
         MVC   PPLUPT,CPPLUPT      USER PROFILE TABLE
         MVC   PPLECT,CPPLECT      ENVIRONMENT CONTROL TABLE
         LA    R0,ECB
         ST    R0,PPLECB           ADDR OF ECB
         LA    R0,ANSWER0
         ST    R0,PPLANS           ADDR OF PDL
         MVC   PPLCBUF,CPPLCBUF    COMMAND BUFFER
         L     R1,CPPLCBUF         FIRST, DETERMINE IF WE'RE        RRS
         AH    R1,2(R1)            A COMMAND PROCESSOR, QUIT IF NOT.RRS
         BCTR  R1,0                                                 RRS
         OC    0(5,R1),=CL8' '                                      RRS
         LA    R15,4               4 ==> WE ARE DOPROG              RRS
         CLC   0(5,R1),=CL5'DOCP ' R1 SHOULD POINT TO COMMAND THAT  RRS
         BNE   *+L'*+8             INVOKED US.                      RRS
         MVC   MYCPPL(CPPLLEN),CPPLCBUF COPY THE CPPL FOR LATER     RRS
         XR    R15,R15             0 ==> WE ARE DOCP                RRS
         ST    R15,MYCPSWIT                                         RRS
         XC    PPLUWA,PPLUWA       USER WORK AREA ADDR
         MVC   PPLPCL,=A(PPLPARM)  PARM CONTROL LIST
         DROP  R8
         SPACE 1
*------- INIT STACK IOPL (IOPLIOPB WILL BE INIT BY STACK MACRO).
         SPACE 1
         LA    R8,STAKIOPL
         USING IOPL,R8
         MVC   IOPLUPT,CPPLUPT
         MVC   IOPLECT,CPPLECT
         LA    R0,STAKECB
         ST    R0,IOPLECB
         DROP  R8
         SPACE 1
*------- INIT IOPL.
         SPACE 1
         LA    R8,IOPLA
         USING IOPL,R8
         MVC   IOPLUPT,CPPLUPT
         MVC   IOPLECT,CPPLECT
         LA    R0,ECB
         ST    R0,IOPLECB
         DROP  R8
         SPACE 1
*------- INIT DAIR PARM LIST.
         SPACE 1
         LA    R8,DAIRPL
         USING DAPL,R8
         MVC   DAPLUPT,CPPLUPT
         MVC   DAPLECT,CPPLECT
         LA    R0,ECB
         ST    R0,DAPLECB
         MVC   DAPLPSCB,CPPLPSCB   PROTECTED STEP CONTROL BLOCK
         LA    R0,DAIRPB
         ST    R0,DAPLDAPB ADDR OF DAIR PARM BLOCK
         SPACE 1
*------- SAVE PREFIX AND LENGTH WITH PERIOD (.).
         SPACE 1
         L     R15,CPPLUPT
         XR    R1,R1
         IC    R1,UPTPREFL-UPT(,R15)    LENGTH OF PREFIX
         LA    R15,UPTPREFX-UPT(,R15)   ADDRESS OF PREFIX
         LR    R2,R1
         BCTR  R1,0
         LA    R14,USERID
         EX    R1,MOVE
         LA    R1,USERID(R2)
         MVI   0(R1),C'.'          MOVE IN PERIOD
         LA    R2,1(R2)            FOR PERIOD
         STH   R2,USERIDL
         DROP  R8,R9
         SPACE 1
*------- INIT PARM BLOCK, ETC...
         SPACE 1
         MVC   PTPB(PTREFL),PTREF  INIT PUTLINE PARM BLOCK
         MVC   PGPB(PGREFL),PGREF  INIT PUTGET PARM BLOCK
         MVC   STAK(STAKREFL),STAKREF   INIT STACK PARM BLOCK
         XC    NODDNS,NODDNS INIT NO. OF DDNAMES SPECIFIED BY TASKLIB
         XC    ANSWER1,ANSWER1
         MVI   FLAGS,0
         MVC   EPENTRY(4),=Y(1,LBLDL)
         MVC   EPNAME,=CL8' '
         LA    R0,1
         ST    R0,OLD              ONLY ONE SEGMENT
         SPACE 1
*------- PARSE THE COMMAND.
         SPACE 1
         XC    ECB,ECB
        CALLTSSR EP=IKJPARS,MF=(E,PARSEPL)
         LTR   R15,R15
         BZ    PARSEOK
PARSERR  MVC   WORKBUFF(28),=CL28'PARSE ERROR / RETURN CODE = '
         ST    R15,DWORK+4
         UNPK  DWORK(5),DWORK+6(3)
         TR    DWORK(4),HEXTB-C'0'
         MVC   WORKBUFF+28(4),DWORK
         LA    R0,L'WORKHEAD+32
         STH   R0,WORKLEN
         XC    WORKOFF,WORKOFF
         LA    R0,WORKHEAD
         BAL   R14,PUTLNE
         B     ERRRTN
PARSEOK  L     R7,ANSWER0
         USING PDL,R7  - - - - - - - - - - - - - - - - - - - - - - - -
         CLI   ACKEYWD+1,1         TEST FOR AC(1) REQUESTED
         BNE   SETSTAX             NO
         XC    REQAUT(REQAUTL),REQAUT
         MVC   REQAUT+1(3),=AL3(MDL@IX)
         LA    R1,AUTH
         ST    R1,REQAUT+4
        $EACM  REQAUT
         CLI   AUTH,LV0            CAN BE ACCEPTED?
         BNE   ACDOIT              YES, DO IT
         LA    R0,MSG15            NO, REJECTED
         BAL   R14,PUTLNE
         B     SETSTAX
ACDOIT  SETAUTH ,                  ASK AUTHORIZED ON
         OI    FLAGS,ACFLG         SAY AC(1) ON
SETSTAX  STM   R14,R12,STXSAVE+12  SAVE REGS SO STAX EXIT CAN USE
         MVC   STXLIST(STXREFL),STXREF  PROGRAM BASE REGS
         LA    R0,STXSAVE
        STAX   STXEXIT,USADDR=(R0),MF=(E,STXLIST)
         CLI   RCKEYWD+1,2         TEST FOR NO RC
         BE    TESTAKW             GO TEST FOR TASK LIB
         BH    *+L'*+8
         OI    FLAGS,RCFLG
         B     TESTAKW             GO TEST FOR TASK LIB
         OI    FLAGS,ALLRCFLG
TESTAKW  CLI   TASKEYWD+1,0        TEST FOR TASKLIB
         BE    MOVEEP
         SPACE 1
*------- INIT PARSEPL WITH DIFFERENT ANSWER ADDR AND COMMAND BUFFER IN
*        CASE THE DATA-SET(S) WHOSE NAMES ARE SPECIFIED BY THE TASKLIB
*        KEYWORD ARE NOT IN THE CATALOG, CANT BE ALLOCATED, ETC...
         SPACE 1
         OI    FLAGS,TASKFLG
         LA    R1,PARSEPL
         USING PPL,R1
         LA    R0,ANSWER1
         ST    R0,PPLANS
         LA    R0,CMDLEN
         ST    R0,PPLCBUF
         MVC   PPLPCL,=A(DSNPPL)
         DROP  R1
         LA    R9,TASKDSNA - - - - USE R9 AS BASE FOR DSNAME PDE - - -
TSKLP    NI    FLAGS,255-QFLG
         ICM   R15,B'1111',0(R9)   LOAD-TEST ADDR OF DSNAME
         BNZ   TSKB
         SPACE 1
*------- DATA-SET NAME ERROR - PROBABLY MEMBER NAME ONLY.
         SPACE 1
         TM    14(R9),X'80'        TEST FOR MEMBER NAME
         BO    *+L'*+12
         LA    R0,MSG01            INVALID DSNAME
         BAL   R14,PUTLNE
         B     TSKPRMT             GO PROMPT FOR ANOTHER DSNAME
         OI    FLAGS,QFLG          SO ''( ... )'' WILL BE PRINTED
         LA    R14,CMDBUF
         MVI   0(R14),C'('
         LA    R14,1(R14)
         LH    R1,12(R9)           LOAD LENGTH OF MEMBER NAME
         BCTR  R1,0
         L     R15,8(R9)           LOAD ADDR OF MEMBER NAME
         EX    R1,MOVE
         LA    R14,1(R1,R14)
         MVI   0(R14),C')'
         LA    R0,2(R1)
         STH   R0,CMDOFF
         LA    R0,CMDOFF
         LA    R1,OUT01L
         BAL   R6,MSGOUT           GO OUTPUT 'DATA-SET --- INVALID'
         B     TSKPRMT             GO PROMPT FOR ANOTHER DATA-SET NAME
         SPACE 1
*------- DATA-SET NAME WAS SPECIFIED, IGNORE MEMBER NAME IF SPECIFIED.
         SPACE 1
TSKB     TM    6(R9),X'40'         TEST FOR QUOTES
         BZ    *+L'*+4
         OI    FLAGS,QFLG          SET QUOTES FLAG
         LH    R1,4(R9)            LOAD LENGTH OF DATA-SET NAME
         STH   R1,DSNLEN
         BCTR  R1,0
         LA    R14,DSNAME          R15= ADDR OF INPUT DSNAME
         EX    R1,MOVE
         SPACE 1
*------- ALLOCATE DATA-SET BY NAME.
         SPACE 1
         LA    R8,DAIRPB
         USING DAPB08,R8
         MVC   DA08CD,CD08
         XC    DA08FLG(6),DA08FLG
         LA    R0,DSNLEN
         ST    R0,DA08PDSN
         MVC   DA08DDN,=CL8' '
         MVC   DA08UNIT,=CL8' '
         MVC   DA08SER,=CL8' '
         XC    DA08BLK(L'DA08BLK+L'DA08PQTY+L'DA08SQTY+L'DA08DQTY),DA081
               BLK
         MVC   DA08MNM,=CL8' '
         MVC   DA08PSWD,=CL8' '
         MVI   DA08DSP1,DA08SHR
         MVI   DA08DPS2,DA08KEEP
         MVI   DA08DPS3,DA08KEP
         XC    DA08CTL(5),DA08CTL
         TM    FLAGS,QFLG          TEST FOR QUOTE
         BO    *+L'*+4
         OI    DA08CTL,DA08UID     PREFIX USER ID
         BAL   R14,DAIRRTN         LINK TO DAIR
         LTR   R15,R15
         BZ    TESTPDS
         CH    R15,=H'8'           TEST FOR CATALOG ERROR
         BNE   TSKDAER
         CLC   DA08DARC(L'DA08DARC+L'DA08CTRC),=XL4'17080008'
         BNE   TSKCTER
         TM    FLAGS,QFLG          TEST FOR QUOTES
         BO    TSKDAER
         SPACE 1
*------- SINCE THE DSNAME IS NOT IN QUOTES, AND IF IT IS NOT ALREADY
*        A COMPOSED NAME, APPEND .LOAD AND TRY ALLOC AGAIN.
         SPACE 1
         LH    R2,DSNLEN
         LR    R14,R2
         LA    R1,DSNAME(R2)
         LR    R15,R1
         B     *+L'*+8
         CLI   0(R15),C'.'
         BE    TSKCTER
         BCTR  R15,0
         BCT   R14,*-10
         MVC   0(5,R1),=CL5'.LOAD'
         LA    R0,5(R2)
         STH   R0,DSNLEN
         XC    DA08DARC(4),DA08DARC
         BAL   R14,DAIRRTN         LINK TO DAIR
         LTR   R15,R15
         BZ    TESTPDS
         LH    R0,DSNLEN
         SH    R0,=H'5'            FOR .LOAD
         STH   R0,DSNLEN
         CH    R15,=H'8'           TEST FOR CATALOG ERROR
         BNE   TSKDAER
TSKCTER  LA    R0,DSNLEN           CATALOG ERROR
         LA    R1,OUT02L           DSNAME NOT IN CATALOG
         BAL   R6,MSGOUT
         B     TSKPRMT             GO PROMPT
         SPACE 1
*------- ALLOCATION ERROR.
         SPACE 1
TSKDAER  ST    R15,SVR15
         LA    R0,DSNLEN
         LA    R1,OUT04L
         BAL   R6,MSGOUT
         L     R15,SVR15
         CH    R15,=H'12'
         BH    TESTDARC
         MVC   WORKBUFF(34),=CL34'DYNAMIC ALLOCATION / ERROR CODE = '
         LH    R0,DA08DARC
         ST    R0,DWORK+4
         UNPK  DWORK(5),DWORK+6(3)
         TR    DWORK(4),HEXTB-C'0'
         MVC   WORKBUFF+34(4),DWORK
         LA    R0,L'WORKHEAD+38
         STH   R0,WORKLEN
         XC    WORKOFF,WORKOFF
         LA    R0,WORKHEAD
         BAL   R14,PUTLNE
         B     TSKPRMT
TESTDARC CH    R15,=H'16'
         BH    *+L'*+12
         LA    R0,MSG13            ALLOCATIONS EXCEEDED
         BAL   R14,PUTLNE
         B     TSKPRMT
         MVC   WORKBUFF(35),=CL35'DYNAMIC ALLOCATION / RETURN CODE = '
         ST    R15,DWORK+4
         UNPK  DWORK(5),DWORK+6(3)
         TR    DWORK(4),HEXTB-C'0'
         MVC   WORKBUFF+35(4),DWORK
         LA    R0,L'WORKHEAD+39
         STH   R0,WORKLEN
         XC    WORKOFF,WORKOFF
         LA    R0,WORKHEAD
         BAL   R14,PUTLNE
         B     TSKPRMT
         SPACE 1
*------- DATA-SET IS ALLOCATED, TEST FOR PDS.
         SPACE 1
TESTPDS  TM    DA08DSO,DCBDSGPO TEST FOR PDS
         BO    SAVEDDN
         LA    R0,DSNLEN
         LA    R1,OUT03L
         BAL   R6,MSGOUT           DS IS NOT PDS
         LA    R1,DA08DDN
         BAL   R6,FREEDDN          GO FREE DDNAME
         B     TSKPRMT
SAVEDDN  LH    R1,NODDNS           SAVE ALLOCATED DDNAME
         SLL   R1,3                MULTIPLY BY 8
         LA    R2,DDNAMES(R1)
         MVC   0(8,R2),DA08DDN     SAVE DDNAME
         DROP  R8
         LH    R1,NODDNS
         LA    R1,1(R1)
         STH   R1,NODDNS
         CH    R1,=H'10'
         BL    TSKENLP
         CLI   24(R9),X'FF'        TEST FOR LAST PDE
         BE    CONCAT              LAST PDE -- GO CONCAT.
         LA    R0,MSG04  MORE THAN 10 DSNAMES SPECIFIED BY TASKLIB
         BAL   R14,PUTLNE
         LA    R0,MSG05
         ST    R0,OLD+4
        TCLEARQ INPUT
         XC    ECB,ECB
        PUTGET PARM=PGPB,OUTPUT=(OLD,SINGLE,PROMPT),                   1
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     2
               TERMGET=(EDIT,WAIT),MF=(E,IOPLA)
         CH    R15,=H'4'
         BH    TESTPGRC            GO TEST RETURN CODE
         L     R1,PGPB+12          LOAD ADDR OF INPUT LINE
         CLC   0(2,R1),=H'4'       TEST LENGTH OF INPUT LINE
         BNH   CONCAT              NULL LINE
         B     ERRRTN
         SPACE 1
*------- PROMPT FOR TASK LIBRARY DATA-SET NAME.
         SPACE 1
TSKPRMT  LA    R0,MSG02            ENTER TASKLIB DSNAME
         ST    R0,OLD+4
        TCLEARQ INPUT
         XC    ECB,ECB
TSKPRMA PUTGET PARM=PGPB,OUTPUT=(OLD,SINGLE,PROMPT),                   1
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     2
               TERMGET=(EDIT,WAIT),MF=(E,IOPLA)
         CH    R15,=H'4'
         BH    TESTPGRC
         L     R15,PGPB+12         LOAD ADDR OF INPUT LINE
         LH    R2,0(R15)           LOAD LENGTH
         CH    R2,=H'48'           TEST FOR MAX DSN LENGTH
         BNH   TSKPRMB
         LR    R0,R2
         O     R0,=A(X'01000000')  SP=1
         LR    R1,R15
        FREEMAIN R,LV=(0),A=(1)
         LA    R0,MSG03            DSNAME TOO LONG
         BAL   R14,PUTLNE
         B     TSKPRMA
TSKPRMB  BCTR  R2,0
         LA    R14,CMDLEN
         EX    R2,MOVE
         LH    R0,0(R15)
         O     R0,=A(X'01000000')  SP=1
         LR    R1,R15
        FREEMAIN R,LV=(0),A=(1)
         CLC   CMDLEN,=H'4'        TEST FOR NULL LINE RESPONSE
         BNH   TSKENLP             GO TO END OF LOOP
        IKJRLSA ANSWER1
         XC    ECB,ECB
        CALLTSSR EP=IKJPARS,MF=(E,PARSEPL)
         CH    R15,=H'8'           TEST FOR ATTN
         BE    ERRRTN              GO RETURN
         BH    PARSERR
         CH    R15,=H'4'
         BE    PARSERR
         L     R15,ANSWER1
         USING DSNPDL,R15
         MVC   0(24,R9),NEWDSN     OVERLAY OLD PDE WITH NEW ONE
         B     TSKLP
         DROP  R15
         SPACE 1
*------- TEST FOR RETURN CODE FROM PUTGET.
         SPACE 1
TESTPGRC CH    R15,=H'8'
         BE    ERRRTN
         CH    R15,=H'12'
         BNE   TESTRC24
         LA    R1,=CL68'CAN''T PROMPT, EITHER YOU ARE IN A CLIST OR YOU1
               R PROFILE IS NO-PROMPT'
         LA    R0,68
         B     ERRSMSG
TESTRC24 CH    R15,=H'24'
         BNE   PGRC28
         LA    R1,=CL35'INVALID PARAMETERS PASSED TO PUTGET'
         LA    R0,35
         B     ERRSMSG
PGRC28   LA    R1,=CL52'NOT ENOUGH SPACE TO OBTAIN OUTPUT BUFFERS FOR P1
               UTGET'
         LA    R0,52
ERRSMSG  TM    #TSFLAG,#TSFRUN     TEST IF BACKGROUND OR FOREGROUND
         BO    FGRUN               BRANCH IF FOREGROUND
         MVC   WTOMSG(2),WSKEL
         LR    R15,R0
         BCT   R15,*+L'*+6
         MVC   ERRMSG(*-*),0(R1)   <<EXECUTED>>
         EX    R15,*-6
         LA    R15,5(R15)
         STCM  R15,B'0011',WTOMSG+2
         LA    R1,WTOMSG
         ALR   R15,R1
         MVC   0(4,R15),WSKEL+6
        WTO    MF=(E,(1))
         B     ERRRTN
FGRUN   TPUT   (1),(0)
         B     ERRRTN
         SPACE 1
*------- TEST FOR END OF PDE'S.
         SPACE 1
TSKENLP  CLI   24(R9),X'FF'
         BE    CONCAT
         L     R9,24(R9)           ADDR OF NEXT PDE
         B     TSKLP
         SPACE 1
*------- ALL DATA-SETS FOR TASKLIB HAVE BEEN ALLOCATED.
*        NOW CONCATENATE THEM.
         SPACE 1
CONCAT   CLC   NODDNS,=H'1'        TEST FOR TASK LIBRARIES
         BE    MOVEEP
         BH    CONCAT1
         LA    R0,MSG08
         BAL   R14,PUTLNE
         LA    R0,MSG05
         ST    R0,OLD+4
        TCLEARQ INPUT
         XC    ECB,ECB
        PUTGET PARM=PGPB,OUTPUT=(OLD,SINGLE,PROMPT),                   1
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     2
               TERMGET=(EDIT,WAIT),MF=(E,IOPLA)
         CH    R15,=H'4'
         BH    TESTPGRC            GO TEST RC FROM PUTGET
         L     R1,PGPB+12          LOAD ADDR OF INPUT LINE
         CLC   0(2,R1),=H'4'       TEST FOR NULL LINE
         BH    ERRRTN
         O     R0,=A(X'01000000')  SP=1
        FREEMAIN R,LV=(0),A=(1)
         B     MOVEEP
CONCAT1  LA    R8,DAIRPB
         USING DAPB0C,R8
         MVC   DA0CCD,CD0C
         XC    DA0CFLG(6),DA0CFLG
         LH    R1,NODDNS
         STH   R1,DA0CNUMB
         XC    DA0CNUMB+2(2),DA0CNUMB+2
         SLL   R1,3                MULTIPLY BY 8
         BCTR  R1,0
         LA    R14,DA0CNUMB+4
         LA    R15,DDNAMES
         EX    R1,MOVE
         DROP  R8
         BAL   R14,DAIRRTN         LINK TO DAIR
         LTR   R15,R15
         BZ    MOVEEP              GO MOVE IN EP NAME
         LA    R0,MSG06            CONCAT ERROR
         BAL   R14,PUTLNE
         B     ERRRTN
         SPACE 1
*---     HAVE ALLOCATED AND CONCATENATED THE TASK LIBRARIES, WILL NOW
*        MOVE LOAD MOD NAME, MOVE THE PARM-FIELD (IF SPECIFIED), OPEN
*        THE TASKLIB DCB, AND ATTACH.
         SPACE 1
MOVEEP   LH    R1,LOADMOD+4
         STH   R1,EPNAMEL          SAVE LENGTH OF PROGRAM NAME
         BCTR  R1,0
         L     R15,LOADMOD
         LA    R14,EPNAME
         EX    R1,MOVE             MOVE EP NAME
         L     R15,MYCPSWIT        ARE WE ATTACHING A CP?
         B     *+L'*(R15)
         B     TESTTSK             0 ==> DOCP
         TM    PARMA+6,X'80'       4 ==> DOPROG, TEST FOR PARM-FIELD
         BO    *+L'*+10
         XC    PARMFLDL,PARMFLDL
         B     TESTTSK
         LH    R2,PARMA+4          LOAD LENGTH OF QSTRING (PARM-FIELD)
         CH    R2,=H'256'
         BNH   *+L'*+12
         LA    R0,MSG07            PARM-FIELD EXCEEDS 256 BYTES
         BAL   R14,PUTLNE
         LH    R2,=H'256'
         STH   R2,PARMFLDL
         BCTR  R2,0
         L     R15,PARMA           LOAD ADDR OF QSTRING
         LA    R14,PARMFLD
         EX    R2,MOVE             MOVE PARM-FIELD
         TM    FLAGS,TASKFLG       WAS TASKLIB SPECIFIED?
         BZ    ATTACH0             NO
TESTTSK  OC    NODDNS,NODDNS       TEST FOR TASKLIB DSNAMES
         BZ    ATTACH0
         MVC   TASKLIB(SKELDCBL),SKELDCB
         LA    R1,TASKLIB
         USING IHADCB,R1
         MVC   DCBDDNAM,DDNAMES    MOVE DDNAME TO DCB
         DROP  R1
ATTACH0  MVC   ATTACH(ATREFL),ATREF
         XC    ECB,ECB
         LA    R1,PARMFLDL
         ST    R1,PARMADDR
         OI    PARMADDR,X'80'
         TM    FLAGS,TASKFLG       TEST FOR TASK LIB
         BZ    ATTACH1
         OC    NODDNS,NODDNS
         BNZ   OPENDCB
ATTACH1 BLDL   0,EPENTRY
         LTR   R15,R15             WAS EP NAME FOUND?
         BNZ   EPERROR             NO - GO PUT OUT MSG
         LA    R1,PARMADDR
         L     R15,MYCPSWIT        ARE WE ATTACHING A CP?           RRS
         B     *+L'*(R15)                                           RRS
         BAL   R6,CPSTUFF          0 ==> DOCP                   -EU-RRS
         LA    R15,ATTACH          4 ==> DOPROG                     RRS
         LA    R2,ECB
         LA    R0,EPNAME
         XC    ECB,ECB
        ATTACH DE=(R0),ECB=(R2),SHSPL=SPLIST,                          1
               MF=(E,(1)),SF=(E,(15))
         B     TESTATRC
OPENDCB  MVC   OPEN(OPENREFL),OPENREF
         LA    R1,OPEN
         LA    R2,TASKLIB
        OPEN   ((R2),(INPUT)),MF=(E,(1))
         USING IHADCB,R2
         TM    DCBOFLGS,DCBOFOPN   TEST FOR OPEN
         BO    *+L'*+12
         LA    R0,MSG09            DCB NOT OPEN
         BAL   R14,PUTLNE
         B     ERRRTN
         TM    FLAGS,ACFLG         IS AC(1) ON?
         BZ    OPENOK              NO
         L     R1,DCBDEBAD         YES, GET TASKLIB DEB
         USING DEBBASIC,R1
         TM    DEBFLGS1,DEBAPFIN   IS IT APF AUTHORIZED?
         BO    OPENOK              YES
         DROP  R1,R2
         LA    R0,MSG16            NO, TASKLIB NOT APF, REJECT
         BAL   R14,PUTLNE
         B     ERRRTN
OPENOK   LA    R3,TASKLIB  - - - - PROTECT R3 FROM HERE TO UP "END-R3"
        BLDL   (R3),EPENTRY
         LTR   R15,R15
         BZ    GOTEPOK
EPERROR  LA    R14,WORKBUFF        NAME NOT FOUND
         MVC   0(13,R14),=CL13'PROGRAM NAME '
         L     R15,MYCPSWIT        ARE WE ATTACHING A CP?
         B     *+L'*(R15)
         B     *+L'*+4             0 ==> DOCP
         B     *+L'*+6             4 ==> DOPROG
         MVC   0(7,R14),=CL7'COMMAND'   COMMAND NAME
         LA    R14,13(R14)
         MVI   0(R14),C''''
         LA    R14,1(R14)
         LH    R1,EPNAMEL
         BCTR  R1,0
         LA    R15,EPNAME
         EX    R1,MOVE             EP NAME
         LA    R14,1(R1,R14)
         MVI   0(R14),C''''
         LA    R14,1(R14)
         MVC   0(27,R14),=CL27' NOT FOUND IN CONCATENATED '
         LA    R14,27(R14)
         OC    NODDNS,NODDNS
         BZ    *+L'*+10
         MVC   0(4,R14),=CL4'TASK'
         B     *+L'*+6
         MVC   0(4,R14),=CL4'LINK'
         LA    R14,4(R14)
         MVC   0(10,R14),=CL10' LIBRARIES'
         LA    R14,10(R14)
         LA    R0,WORKHEAD
         SR    R14,R0
         STH   R14,WORKLEN
         XC    WORKOFF,WORKOFF
         BAL   R14,PUTLNE
EPERROR1 LA    R0,MSG11
         L     R14,MYCPSWIT        ARE WE ATTACHING A CP?
         B     *+L'*(R14)
         LA    R0,MSG11A           0 ==> DOCP
         ST    R0,OLD+4            4 ==> DOPROG
        TCLEARQ INPUT
         XC    ECB,ECB
        PUTGET PARM=PGPB,OUTPUT=(OLD,SINGLE,PROMPT),                   1
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     2
               TERMGET=(EDIT,WAIT),MF=(E,IOPLA)
         CH    R15,=H'4'
         BH    TESTPGRC
         L     R1,PGPB+12          LOAD ADDR
         LH    R2,0(R1)
         SH    R2,=H'4'
         BNP   ERRRTN
         CH    R2,=H'8'
         BNH   EPERROR2
         LA    R0,MSG12            PROGRAM NAME GT 8 CHAR
         L     R14,MYCPSWIT        ARE WE ATTACHING A CP?
         B     *+L'*(R14)
         LA    R0,MSG12A           0 ==> DOCP, CMD NAME GT 8 CHAR
         BAL   R14,PUTLNE          4 ==> DOPROG
         B     EPERROR1
EPERROR2 STH   R2,EPNAMEL          STORE LENGTH OF EP NAME
         MVC   EPNAME,=CL8' '
         LA    R14,EPNAME
         LA    R15,4(R1)
         BCTR  R2,0
         EX    R2,MOVE
         OC    EPNAME,=CL8' '      UPPER CASE EP NAME
         LH    R0,0(R1)
         O     R0,=A(X'01000000')  SP=1
        FREEMAIN R,LV=(0),A=(1)
         OC    NODDNS,NODDNS
         BNZ   OPENOK
         B     ATTACH1
GOTEPOK  LA    R1,PARMADDR
         L     R15,MYCPSWIT        ARE WE ATTACHING A CP?           RRS
         B     *+L'*(R15)                                           RRS
         BAL   R6,CPSTUFF          0 ==> DOCP                   -EU-RRS
         LA    R15,ATTACH          4 ==> DOPROG                     RRS
         LA    R2,ECB
         LA    R0,EPNAME
         XC    ECB,ECB
        ATTACH DE=(R0),ECB=(R2),TASKLIB=(R3),SHSPL=SPLIST,             1
               MF=(E,(1)),SF=(E,(15))
TESTATRC ST    R1,TCB
         LTR   R15,R15             HOW ATTACH COMPLETE?
         BZ    DOWAIT              OK
         ST    R15,DWORK+4         ATTACH FAILED
         LA    R14,WORKBUFF
         MVC   0(15,R14),=CL15'ATTACH PROGRAM '
         L     R15,MYCPSWIT        ARE WE ATTACHING A CP?
         B     *+L'*(R15)
         B     *+L'*+4             0 ==> DOCP
         B     *+L'*+6             4 ==> DOPROG
         MVC   7(7,R14),=CL7'COMMAND'   COMMAND NAME
         LA    R14,15(R14)
         MVI   0(R14),C''''
         LA    R14,1(R14)
         LH    R1,EPNAMEL
         BCTR  R1,0
         LA    R15,EPNAME
         EX    R1,MOVE             EP NAME
         LA    R14,1(R1,R14)
         MVI   0(R14),C''''
         LA    R14,1(R14)
         MVC   0(23,R14),=CL23'FAILED / RETURN CODE = '
         UNPK  DWORK(5),DWORK+6(3)
         TR    DWORK(4),HEXTB-C'0'
         MVC   23(4,R14),DWORK
         LA    R14,27(R14)
         LA    R0,WORKHEAD
         SR    R14,R0
         STH   R14,WORKLEN
         XC    WORKOFF,WORKOFF
         BAL   R14,PUTLNE
         B     SETRC
DOWAIT   LA    R1,ECB
        WAIT  ECB=(1)
         OC    TCB,TCB             TCB PASSED BACK?
         BZ    MVCCDE              NO
        DETACH TCB
MVCCDE   XC    COMPCDE,COMPCDE     CLEAR CONDITION CODE      JFS04NOV77
         MVC   COMPCDE+1(3),ECB+1  SAVE CONDITION CODE       JFS03NOV77
         B     RTURN
         SPACE 1                                                    RRS
*------- DOCP, PASS A CPPL IN R1, INSTEAD OF A PARM. THE PARM       RRS
*        QSTRING IS USED AS THE COMMAND-LINE IF PRESENT, ELSE       RRS
*        THE COMMAND-LINE IS PROMPTED FOR.                          RRS
*        ON ENTRY - R6 = RETURN ADDRESS (LINK REGISTER).           -EU-
*              DON'T USE : R3 = A.TASKLIB                          -EU-
*                          R7 = A.PPL                              -EU-
*                          R9 = BASE FOR DSNAME PDE                -EU-
*              WORK-REGISTERS : R0-R1-R2-R4-R8-R14-R15             -EU-
         SPACE 1                                                    RRS
CPSTUFF  TM    PARMA+6,X'80'       IS PARM-FIELD PRESENT?           RRS
         BZ    CPPRMPT             NO ==> PROMPT FOR COMMAND        RRS
         L     R15,PARMA           THE PARM QSTRING                 RRS
         LH    R2,PARMA+4          YES ==> GET LENGTH OF QSTRING    RRS
         CH    R2,=H'256'          AND FORCE LENGTH TO 256          RRS
         BNH   CPMOVE                                               RRS
         LA    R0,MSG07A           TOO LONG MSG                     RRS
         BAL   R14,PUTLNE                                           RRS
         L     R15,PARMA           THE PARM QSTRING                 RRS
         LH    R2,=H'256'                                           RRS
         B     CPMOVE                                               RRS
CPPRMPT  LA    R0,MSG14            PROMPT FOR A COMMAND-LINE        RRS
         ST    R0,OLD+4                                             RRS
        TCLEARQ INPUT                                               RRS
         XC    ECB,ECB                                              RRS
        PUTGET PARM=PGPB,OUTPUT=(OLD,SINGLE,PROMPT),                RRS1
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                  RRS2
               TERMGET=(EDIT,WAIT),MF=(E,IOPLA)                     RRS
         CH    R15,=H'4'           TEST FOR ERROR RETURN            RRS
         BH    TESTPGRC                                             RRS
         L     R15,PGPB+12         ADDR OF INPUT LINE               RRS
         LH    R2,0(R15)           LENGTH OF INPUT LINE             RRS
         LA    R15,4(R15)          SKIP OVER HEADER                 RRS
CPMOVE   LA    R0,4(,R2)           ALLOW FOR RDW, AND               RRS
         STH   R0,PARMFLDL         SAVE LENGTH OF COMMAND.          RRS
         BCTR  R2,0                                                 RRS
         LA    R14,PARMFLD+2       OUR COMMAND BUFFER               RRS
         EX    R2,MOVE             NOW WE ONLY NEED THE OPERAND     RRS
         LA    R2,1(R2)            POINTER.                         RRS
         XR    R4,R4               SCAN FOR THE FIRST BLANK AFTER   RRS
CPSCAN   CLI   0(R14),C' '         THE FIRST NON-BLANK.             RRS
         BE    CPBLNK                                               RRS
         B     *+L'*(R4)                                            RRS
         LA    R4,4                                                 RRS
         B     CPINCR                                               RRS
CPBLNK   B     *+L'*(R4)                                            RRS
         B     CPINCR                                               RRS
         B     CPGOTCHA                                             RRS
CPINCR   LA    R14,1(R14)          INVALID COMMAND SYNTAX WILL      RRS
         BCT   R2,CPSCAN           FALL THROUGH. LET THE COMMAND    RRS
         BCTR  R14,0               PROCESSOR DEAL WITH IT           RRS
CPGOTCHA LA    R15,PARMFLD+1       GET POSITION OF 1ST BLANK        RRS
         SR    R14,R15             AFTER COMMAND.                   RRS
         STH   R14,PARMFLDL+2      NOW WE CONSTRUCT A CPPL          RRS
         LA    R1,PARMFLDL         ADDRESS OF PHONEY COMMAND        RRS
         ST    R1,MYCPPL                                            RRS
         LA    R1,MYCPPL           PASS ADDR OF FAKE CPPL           RRS
         USING CPPL,R1
         L     R8,CPPLECT          GET ECT ADDRESS
         DROP  R1
         USING ECT,R8
         MVC   SVPCMD,ECTPCMD      SAVE ORIGINALS
         MVC   SVSCMD,ECTSCMD
         TM    ECTSWS,ECTNOPD
         BZ    *+L'*+4
         OI    FLAGS,NOPDFLG
         NI    ECTSWS,255-ECTNOPD  REPLACE BY SUPPLIED COMMAND INFO
         MVC   ECTPCMD,EPNAME
         MVC   ECTSCMD,=CL8' '
         LTR   R2,R2
         BNP   CPSCEND
         XR    R4,R4               CONTINUE SCAN TO SET SUBCOMMAND
         ALR   R14,R15
         CLI   0(R14),C' '
         BNE   *+L'*+12
         LA    R14,1(R14)
         BCT   R2,*-12
         B     CPSCEND
         LR    R15,R14
         LA    R14,1(R14)
         BCT   R2,*+L'*+4
         B     *+L'*+8
         CLI   0(R14),C' '
         BNE   *-16
         BCTR  R14,0
         SR    R14,R15
         LA    R2,7
         CLR   R14,R2
         BNL   *+L'*+2
         LR    R2,R14
         LA    R14,ECTSCMD
         EX    R2,MOVE             SET SUBCOMMAND NAME
         OI    ECTSWS,ECTNOPD
         DROP  R8
CPSCEND  OI    FLAGS,PECTFLG
         BR    R6                  RETURN                           RRS
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "END-R3"
         SPACE 1
*------- ERROR RETURN. ATTN, ERROR, ETC... WILL CAUSE CONTROL TO BE
*        PASSED TO THIS SECTION.
         SPACE 1
ERRRTN  IKJRLSA ANSWER0
        IKJRLSA ANSWER1
         XC    STAKECB,STAKECB
        STACK  PARM=STAK,DELETE=ALL,MF=(E,STAKIOPL)
SETRC    XC    COMPCDE,COMPCDE                               JFS03NOV77
         MVI   COMPCDE+3,16        RC=16 ------------------- JFS03NOV77
         SPACE 1
*------- CLEAN UP AND RETURN.
         SPACE 1
RTURN    TM    FLAGS,PECTFLG
         BZ    RTURN0
         LA    R1,MYCPPL
         USING CPPL,R1
         L     R2,CPPLECT          GET ECT ADDRESS
         DROP  R1
         USING ECT,R2
         MVC   ECTPCMD,SVPCMD      RESTORE ORIGINALS
         MVC   ECTSCMD,SVSCMD
         NI    ECTSWS,255-ECTNOPD
         TM    FLAGS,NOPDFLG
         BZ    *+L'*+4
         OI    ECTSWS,ECTNOPD
         DROP  R2
         NI    FLAGS,255-PECTFLG+NOPDFLG
RTURN0   LH    R2,NODDNS           ANY DDNAME TO DECONCATENATE?
         LTR   R2,R2
         BZ    RTURN1
         MVC   CLOSE(CLOSREFL),CLOSREF
         LA    R1,CLOSE
         LA    R3,TASKLIB
        CLOSE  ((R3)),MF=(E,(1))
         CH    R2,=H'1'
         BE    FREEUP              ONLY ONE
         LA    R8,DAIRPB
         USING DAPB10,R8
         MVC   DA10CD,CD10
         XC    DA10FLG(6),DA10FLG
         MVC   DA10DDN,DDNAMES
         BAL   R14,DAIRRTN         LINK TO DAIR
         LTR   R15,R15
         BZ    FREEUP
         LA    R0,MSG10            DECONT. ERROR
         BAL   R14,PUTLNE
         DROP  R8
         SPACE 1
*------- FREE THE ALLOCATED DDNAMES.
         SPACE 1
FREEUP   LR    R3,R2
         BCTR  R3,0
         SLL   R3,3
         LA    R1,DDNAMES(R3)
         BAL   R6,FREEDDN          GO FREE DDNAME
         BCT   R2,FREEUP
RTURN1   TM    FLAGS,ACFLG         IS AC(1) ON?
         BZ    RTURN2              NO
        RESAUTH ,                  YES, ASK AUTHORIZED OFF
         NI    FLAGS,255-ACFLG     SAY AC(1) OFF
RTURN2   L     R2,COMPCDE     RETURN CODE FROM ATTACHED PROG JFS03NOV77
         TM    FLAGS,ALLRCFLG
         BO    PUTRCOUT
         LTR   R2,R2
         BZ    RTURN3
         TM    FLAGS,RCFLG
         BZ    QUIT                                                -EU-
         SPACE 1                                             JFS03NOV77
*------- CONVERT CONDITION CODE FROM BINARY TO EBCDIC OR     JFS04NOV77
*        ABEND AND USER CODES FROM BINARY TO HEXADECIMAL -EU-JFS04NOV77
*        AND OUTPUT THE MESSAGE.                             JFS04NOV77
         SPACE 1                                             JFS03NOV77
PUTRCOUT SRDL  R2,12
         SRL   R3,20
         LTR   R2,R2
         BZ    OUTCC
         MVC   WORKBUFF(14),=CL14'ABEND CODE = S'
         ST    R2,DWORK+4
         UNPK  DWORK(5),DWORK+6(3)
         TR    DWORK(4),HEXTB-C'0'
         MVC   WORKBUFF+14(3),DWORK+1
         MVC   WORKBUFF+17(16),=CL16' / USER CODE = U'
         ST    R3,DWORK+4
         UNPK  DWORK(5),DWORK+6(3)
         TR    DWORK(4),HEXTB-C'0'
         MVC   WORKBUFF+33(3),DWORK+1
         LA    R0,L'WORKHEAD+36
         STH   R0,WORKLEN
         XC    WORKOFF,WORKOFF
         LA    R0,WORKHEAD
         BAL   R14,PUTLNE
         B     QUIT
OUTCC    MVC   WORKBUFF(17),=CL17'CONDITION CODE = '         JFS03NOV77
         CVD   R3,DWORK
         UNPK  DWORK(5),DWORK+5(3)                           JFS03NOV77
         OI    DWORK+4,C'0'                                  JFS03NOV77
         LA    R15,DWORK-1                                   JFS03NOV77
         LA    R1,5                                          JFS04NOV77
         LA    R15,1(R15)                                    JFS03NOV77
         CLI   0(R15),C'0'         FIND NON ZERO             JFS03NOV77
         BNE   *+L'*+8                                       JFS03NOV77
         BCT   R1,*-12                                       JFS03NOV77
         LA    R1,1           SO AT LEAST 1 0 WILL BE OUTPUT JFS04NOV77
         LA    R14,WORKBUFF+17                               JFS03NOV77
         BCTR  R1,0                -1 FOR MVC                JFS03NOV77
         EX    R1,MOVE        MOVE IN COMP CODE RETURNED     JFS03NOV77
         LA    R0,L'WORKHEAD+17+1(R1) +1 FOR MVC             JFS03NOV77
         STH   R0,WORKLEN
         XC    WORKOFF,WORKOFF
         LA    R0,WORKHEAD
         BAL   R14,PUTLNE
         LR    R2,R3
RTURN3  $XRET  CC=(R2),LV=WKLEN,TYPE=RENT
QUIT     LA    R2,16               RC=16 ------------------------------
         B     RTURN3
         SPACE 1
MOVE     MVC   0(*-*,R14),0(R15)   <<EXECUTED>>
         EJECT
*------- PUTLNE (PUTLINE) ROUTINE.
*        ON ENTRY - R0 = ADDRESS OF MESSAGE,
*                   R14 = RETURN ADDRESS (LINK REGISTER).
*              DON'T USE : R3 = A.TASKLIB                          -EU-
*                          R7 = A.PPL                              -EU-
*                          R9 = BASE FOR DSNAME PDE                -EU-
*              WORK-REGISTERS : R0-R1-R14-R15                      -EU-
         SPACE 1
PUTLNE   ST    R14,SVR14           SAVE RETURN
         XC    ECB,ECB
        PUTLINE PARM=PTPB,OUTPUT=((R0),TERM,SINGLE,DATA),              1
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=(E,IOPLA)
         LTR   R15,R15 TEST FOR ERRORS, ATTN ETC
         BZ    PTRTN
         CH    R15,=H'4'           TEST FOR ATTN
         BE    ERRRTN              GO RETURN WITH RC=16
         LA    R1,PTERROR          PUTLINE ERROR
         LA    R0,L'PTERROR
         B     ERRSMSG
PTRTN    L     R14,SVR14           RESTORE RETURN
         BR    R14                 BACK TO CALLER
         EJECT
*------- STAX EXIT.
         SPACE 1
        CNOP   0,8
STXEXIT SAVE   (14,12)
         LR    R2,R13              SAVE ADRRESS
         L     R13,8(R1)           LOAD ADDR OF STAX SAVE AREA
         USING STXSAVE,R13
         ST    R2,STXSAVE+4
         ST    R13,8(R2)
         LM    R14,R12,STXSAVE+12  RESTORE REGS
         LA    R2,ECB
        POST   (R2),16             SET RC=16
         XC    STAKECB,STAKECB
        STACK  PARM=STAK,DELETE=ALL,MF=(E,STAKIOPL)
        TCLEARQ INPUT
        TCLEARQ OUTPUT
         TM    FLAGS,PECTFLG
         BZ    LEAVE
         LA    R1,MYCPPL
         USING CPPL,R1
         L     R2,CPPLECT          GET ECT ADDRESS
         DROP  R1
         USING ECT,R2
         MVC   ECTPCMD,SVPCMD      RESTORE ORIGINALS
         MVC   ECTSCMD,SVSCMD
         NI    ECTSWS,255-ECTNOPD
         TM    FLAGS,NOPDFLG
         BZ    *+L'*+4
         OI    ECTSWS,ECTNOPD
         DROP  R2
         NI    FLAGS,255-PECTFLG+NOPDFLG
LEAVE    L     R13,STXSAVE+4
         DROP  R13
        RETURN (14,12),RC=0
         EJECT
*------- OUTPUT -- 'DATA-SET ---- ' MESSAGE ROUTINE.
*        ON ENTRY - R0 = ADDRESS OF DSNAME,
*                   R1 = ADDRESS OF LAST PART OF MESSAGE,
*                   R6 = RETURN ADDRESS (LINK REGISTER).
*              DON'T USE : R7 = A.PPL                              -EU-
*                          R9 = BASE FOR DSNAME PDE                -EU-
*              WORK-REGISTERS : R0-R1-R2-R14-R15                   -EU-
         SPACE 1
MSGOUT   LR    R2,R1
         LA    R14,WORKBUFF
         LA    R15,=CL9'DATA-SET '
         LA    R1,8
         EX    R1,MOVE
         LA    R14,1(R1,R14)
         MVI   0(R14),C''''
         LA    R14,1(R14)
         TM    FLAGS,QFLG          TEST FOR QUOTES
         BZ    *+L'*+12
         MVI   0(R14),C''''
         LA    R14,1(R14)
         B     MSGOUT1
         LH    R1,USERIDL          LOAD LENGTH OF USER ID
         LA    R15,USERID
         BCTR  R1,0
         EX    R1,MOVE             ID
         LA    R14,1(R1,R14)
MSGOUT1  LR    R15,R0
         LH    R1,0(R15)           LOAD LENGTH OF DSNAME
         LA    R15,2(R15)
         BCTR  R1,0
         EX    R1,MOVE
         LA    R14,1(R1,R14)
         TM    FLAGS,QFLG
         BZ    *+L'*+8
         MVI   0(R14),C''''
         LA    R14,1(R14)
         MVI   0(R14),C''''
         LA    R14,1(R14)
         MVI   0(R14),C' '
         LA    R14,1(R14)
         LH    R1,0(R2)
         LA    R15,2(R2)           LOAD ADDRESS OF DSNAME
         BCTR  R1,0
         EX    R1,MOVE
         LA    R14,1(R1,R14)
         LA    R0,WORKHEAD
         SR    R14,R0
         STH   R14,WORKLEN
         XC    WORKOFF,WORKOFF
         BAL   R14,PUTLNE
         BR    R6                  RETURN
         EJECT
*------- LINK TO DAIR ROUTINE.
*        ON ENTRY - R14 = RETURN ADDRESS (LINK REGISTER).
*              DON'T USE : R7 = A.PPL                              -EU-
*                          R9 = BASE FOR DSNAME PDE                -EU-
*              WORK-REGISTERS : R0-R1-R14-R15                      -EU-
         SPACE 1
DAIRRTN  ST    R14,DSVR14          SAVE RETURN
         XC    ECB,ECB
        CALLTSSR EP=IKJDAIR,MF=(E,DAIRPL)
         LTR   R15,R15             HOW COMPLETE?
         BZ    DAIRRTNX            ALL OK
         ST    R15,SVR15
         LA    R0,DAIRPL
         LA    R1,DAIRFPL
         USING DFDSECTD,R1
         ST    R0,DFDAPLP
         LA    R0,SVR15
         ST    R0,DFRCP
         XC    DWORK(4),DWORK
         MVC   DWORK+4(2),=H'1'
         LA    R0,DWORK
         ST    R0,DFJEFF02
         LA    R0,DWORK+4
         ST    R0,DFIDP
         DROP  R1
        LINK   EP=IKJEFF18         ERROR MESSAGE ROUTINE
         LTR   R15,R15             HOW COMPLETE?
         BZ    DAIRRTNX            ALL OK
         MVC   WORKBUFF(31),=CL31'DAIRFAIL ERROR / RETURN CODE = '
         ST    R15,DWORK+4
         UNPK  DWORK(5),DWORK+6(3)
         TR    DWORK(4),HEXTB-C'0'
         MVC   WORKBUFF+31(4),DWORK
         LA    R0,L'WORKHEAD+35
         STH   R0,WORKLEN
         XC    WORKOFF,WORKOFF
         LA    R0,WORKHEAD
         BAL   R14,PUTLNE
DAIRRTNX L     R14,DSVR14          RESTORE RETURN
         BR    R14                 BACK TO CALLER
         EJECT
*------- FREE DATA-SETS BY DDNAME ROUTINE.
*        ON ENTRY - R1 = ADDRESS OF DDNAME,
*                   R6 = RETURN ADDRESS (LINK REGISTER)
*              DON'T USE : R7 = A.PPL                              -EU-
*                          R9 = BASE FOR DSNAME PDE                -EU-
*              WORK-REGISTERS : R0-R1-R14-R15                      -EU-
         SPACE 1
FREEDDN  LA    R14,DAIRPB
         USING DAPB18,R14
         MVC   DA18CD,CD18
         XC    DA18FLG(10),DA18FLG
         MVC   DA18DDN,0(R1)       MOVE IN DDNAME
         MVC   DA18MNM,=CL8' '
         MVC   DA18SCLS(L'DA18SCLS),=CL8' '
         MVI   DA18DPS2,DA18KEEP
         MVI   DA18CTL,DA18PERM    UNALLOC PERM
         MVC   DA18JBNM,=CL8' '
         DROP  R14
         BAL   R14,DAIRRTN         LINK TO DAIR
         BR    R6                  RETURN
         EJECT
*------- ADDRESSES, PARM BLOCKS, ETC...
         SPACE 1
ATREF   ATTACH SF=L
ATREFL   EQU   *-ATREF
STXREF  STAX   STXEXIT,MF=L
STXREFL  EQU   *-STXREF
PGREF   PUTGET MF=L
PGREFL   EQU   *-PGREF
PTREF   PUTLINE MF=L
PTREFL   EQU   *-PTREF
STAKREF STACK  MF=L
STAKREFL EQU   *-STAKREF
OPENREF OPEN   (,),MF=L
OPENREFL EQU   *-OPENREF
CLOSREF CLOSE  (,),MF=L
CLOSREFL EQU   *-CLOSREF
         PRINT NOGEN
WSKEL   WTO    'XX',ROUTCDE=11,DESC=7,MF=L
SKELDCB DCB    DSORG=PO,MACRF=R,DDNAME=XXXXXXXX   SKELETON DCB
         PRINT GEN
SKELDCBL EQU   *-SKELDCB
SPLIST   DC    AL1(3,0,1,78)       SHARE SUBPOOL LIST
        CNOP   0,4
CD08     DS    0XL2                CODE 0008
HV8      DC    H'8'
CD0C     DS    0XL2                CODE 000C
HV12     DC    H'12'
CD10     DS    0XL2                CODE 0010
HV16     DC    H'16'
CD18     DS    0XL2                CODE 0018
HV24     DC    H'24'
HEXTB    DC    C'0123456789ABCDEF' CONVERT TABLE
         EJECT
*------- MESSAGES.
         SPACE 1
MSG01    DC    Y(MSG01L,0)
         DC    C'INVALID DATA-SET NAME'
MSG01L   EQU   *-MSG01
MSG02    DC    Y(MSG02L,0)
         DC    C' ENTER TASKLIB DATA-SET NAME-'
MSG02L   EQU   *-MSG02
MSG03    DC    Y(MSG03L,0)
         DC    C'DATA-SET NAME LENGTH EXCEEDS 44 BYTES'
MSG03L   EQU   *-MSG03
MSG04    DC    Y(MSG04L,0)
         DC    C'NO MORE THAN 10 DATA-SET NAMES MAY BE SPECIFIED BY THE1
                TASKLIB KEYWORD'
MSG04L   EQU   *-MSG04
MSG05    DC    Y(MSG05L,0)
         DC    C' ENTER NULL LINE TO CONTINUE, NON-NULL LINE TO STOP-'
MSG05L   EQU   *-MSG05
MSG06    DC    Y(MSG06L,0)
         DC    C'ERROR IN CONCATENATING TASK LIBRARIES'
MSG06L   EQU   *-MSG06
MSG07    DC    Y(MSG07L,0)
         DC    C'PARM-FIELD SPECIFIED EXCEEDS 256 BYTES, TRUNCATED'
MSG07L   EQU   *-MSG07
MSG07A   DC    Y(MSG07AL,0)
         DC    C'COMMAND-LINE SPECIFIED EXCEEDS 256 BYTES, TRUNCATED'
MSG07AL  EQU   *-MSG07A
MSG08    DC    Y(MSG08L,0)
         DC    C'NO TASK LIBRARIES'
MSG08L   EQU   *-MSG08
MSG09    DC    Y(MSG09L,0)
         DC    C'TASKLIB DCB OPEN ERROR'
MSG09L   EQU   *-MSG09
MSG10    DC    Y(MSG10L,0)
         DC    C'ERROR IN DECONTENATING TASK LIBRARIES'
MSG10L   EQU   *-MSG10
MSG11    DC    Y(MSG11L,0)
         DC    C' ENTER PROGRAM NAME, OR NULL LINE TO STOP-'
MSG11L   EQU   *-MSG11
MSG11A   DC    Y(MSG11AL,0)
         DC    C' ENTER COMMAND NAME, OR NULL LINE TO STOP-'
MSG11AL  EQU   *-MSG11A
MSG12    DC    Y(MSG12L,0)
         DC    C'PROGRAM NAME EXCEEDS 8 CHARACTERS'
MSG12L   EQU   *-MSG12
MSG12A   DC    Y(MSG12AL,0)
         DC    C'COMMAND NAME EXCEEDS 8 CHARACTERS'
MSG12AL  EQU   *-MSG12A
MSG13    DC    Y(MSG13L,0)
         DC    C'MAXIMUM NUMBER OF ALLOCATIONS EXCEEDED'
MSG13L   EQU   *-MSG13
MSG14    DC    Y(MSG14L,0)                                          RRS
         DC    C' ENTER COMMAND-LINE FOR CP-'                       RRS
MSG14L   EQU   *-MSG14                                              RRS
MSG15    DC    Y(MSG15L,0)
         DC    C'AC REJECTED, SORRY'
MSG15L   EQU   *-MSG15
MSG16    DC    Y(MSG16L,0)
         DC    C'TASKLIB DATA-SET IS NOT AN APF LIBRARY'
MSG16L   EQU   *-MSG16
OUT01L   DC    Y(L'OUT01)
OUT01    DC    C'IS AN INVALID TASK LIBRARY NAME'
OUT02L   DC    Y(L'OUT02)
OUT02    DC    C'NOT IN CATALOG'
OUT03L   DC    Y(L'OUT03)
OUT03    DC    C'IS NOT PARTITIONED'
OUT04L   DC    Y(L'OUT04)
OUT04    DC    C'ALLOCATION ERROR'
PTERROR  DC    C'PUTLINE ERROR'
         EJECT
*------- LITERAL POOL.
         SPACE 1
        LTORG
         EJECT
*------- PARAMETER CONTROL LIST FOR PARSE.
         SPACE 1
         PRINT NOGEN
PPLPARM  IKJPARM DSECT=PDL
LOADMOD  IKJIDENT 'LOAD-MOD-NAME',                                     1
               MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM,                   2
               PROMPT='NAME OF PROGRAM OR COMMAND TO BE EXECUTED'
PARMA    IKJPOSIT QSTRING,                                             1
               HELP=('PARM-FIELD TO BE PASSED TO PROGRAM OR',          2
               'COMMAND-LINE TO BE PASSED TO COMMAND PROCESSOR')
TASKEYWD IKJKEYWD
         IKJNAME 'TASKLIB',SUBFLD=TASKSUBF
         IKJNAME 'LIB',SUBFLD=TASKSUBF
RCKEYWD  IKJKEYWD DEFAULT='RC'
         IKJNAME 'RC'
         IKJNAME 'NORC'
         IKJNAME 'ALLRC'
ACKEYWD  IKJKEYWD
         IKJNAME 'AC'
TASKSUBF IKJSUBF
TASKDSNA IKJPOSIT DSNAME,LIST,                                         1
               PROMPT='TASKLIB OR LIB DATA-SET NAME(S)'
         IKJENDP
         SPACE 1
*------- PARSE PARM CONTROL LIST FOR PROMPT OF TASKLIB DATA-SET NAME.
         SPACE 1
DSNPPL   IKJPARM DSECT=DSNPDL
NEWDSN   IKJPOSIT DSNAME,PROMPT='TASKLIB OR LIB DATA-SET NAME'
         IKJENDP
         EJECT
*------- DSECT FOR REENTRANCY.
         SPACE 1
         PRINT GEN
WKAREA   DSECT
         DS    18F                 INITIAL SAVE AREA
STXSAVE  DS    18F                 STAX SAVE AREA
DWORK    DS    D
SVR14    DS    F
DSVR14   DS    F
SVR15    DS    F
IOPLA    DS    0F,(LIOPL)X
STAKIOPL DS    0F,(LIOPL)X
PARMADDR DS    F                   ADDR OF PARM-FIELD
STAKECB  DS    F
ECB      DS    F
TCB      DS    F
PARSEPL  DS    0F,(LPPL)X          PARSE PARM LIST
DAIRPL   DS    0F,(LDAPL)X         DAIR PARM LIST
DAIRPB   DS    0F,(MAXDPBL)X       DAIR PARM BLOCK
DAIRFPL  DS    0F,(DFLEN)X         DAIR FAILURE PARM LIST
ANSWER0  DS    F
ANSWER1  DS    F
OLD      DS    2F
COMPCDE  DS    F                                             JFS04NOV77
EPENTRY  DC    Y(1,LBLDL)          BLDL LIST
EPNAME   DS    CL8,XL60
LBLDL    EQU   *-EPNAME
WORKHEAD DS    0F
WORKLEN  DS    H
WORKOFF  DS    H
WORKBUFF DS    CL120
ATTACH  ATTACH SF=L
STXLIST STAX   STXEXIT,USADDR=STXSAVE,MF=L
PGPB    PUTGET MF=L
PTPB    PUTLINE MF=L
STAK    STACK  MF=L
OPEN    OPEN   (,),MF=L
CLOSE   CLOSE  (,),MF=L
USERIDL  DS    H
USERID   DS    CL8
MYCPSWIT DS    F                   4 ==> DOPROG, 0 ==> DOCP         RRS
MYCPPL   DS    0F                  DOCP CPPL FOR TARGET CP          RRS
         DS    (CPPLLEN)X
         PRINT NOGEN
TASKLIB DCB    DSORG=PO,MACRF=R,DDNAME=XXXXXXXX
         PRINT GEN
EPNAMEL  DS    H
CMDLEN   DS    H
CMDOFF   DS    H
CMDBUF   DS    CL44
DSNLEN   DS    H
DSNAME   DS    CL44
NODDNS   DS    H
DDNAMES  DS    10CL8
PARMFLDL DS    H
PARMFLD  DS    CL256,CL2
FLAGS    DS    X
AUTH     DS    X
REQAUT   DS    0F,BL1,AL3,AL4
REQAUTL  EQU   *-AUTH
SVPCMD   DS    CL8
SVSCMD   DS    CL8
        $TEW$WA
WTOMSG   DS    F                   WTO - TEXT LENGTH, MCSFLAGS
ERRMSG   DS    CL88                ERROR MESSAGE AREA
         DS    XL4                 WTO - DESCRIPTOR AND ROUTING CODES
WKLEN    EQU   (((*-WKAREA)+7)/8)*8
         SPACE 1
*------- MAPPING DSECTS.
         SPACE 1
         PRINT NOGEN
        $TEW$DS CVT=YES
        IKJECT
        IKJIOPL
LIOPL    EQU   *-IOPL
        IKJUPT
        IKJPPL
LPPL     EQU   *-PPL
        IKJDAPL
LDAPL    EQU   *-DAPL
        IKJDAP08
MAXDPBL  EQU   (((*-DAPB08)+7)/8)*8 LARGEST DAIR PARM BLOCK
        IKJDAP0C
        IKJDAP10
        IKJDAP18
        IKJEFFDF DFDSECT=YES,DFDSEC2=YES
        DCBD   DEVD=DA,DSORG=PO
        IEZDEB LIST=YES
         SPACE 1
         END
