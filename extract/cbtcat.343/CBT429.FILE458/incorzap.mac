INZP     TITLE '-- I N C O R Z A P -- MAIN STORAGE SUPERZAP FOR MVS.'
INCORZAP START 0
         SPACE 1
***********************************************************************
*                                                                     *
*        I N C O R Z A P   PROGRAM.                                   *
*                                                                     *
*        MAIN STORAGE SUPERZAP PROGRAM FOR MVS/XA.                -EU-*
*                                                                     *
* --->>> NOTE : ASSEMBLER H IS MANDATORY.                         -EU-*
*                                                                     *
***********************************************************************
         SPACE 1
*     -- MODULE HISTORY :
*
*        1974 - ORIGINAL WRITTEN BY R. BUDGE, IBM CORP.
*        IN PL/S LANGUAGE.
*
*        1979-81 - ASSEMBLER SOURCE GENERATED AND COMMENTED BY
*        BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION), MCLEAN VA,
*        ALSO MADE PARM FIELD INPUT INDEPENDENT OF ENTRY POINT NAME.
*
*        1983 - XA AND SP1.3 CHANGES ADDED, ALONG WITH ADDITIONAL
*        COMMENTS BY R. BUDGE, NAS CORP.
*
*        1986 - LOCAL MODIFICATIONS BY MOINIL P.A.,                -EU-
*                  COMPUTING CENTRE,                               -EU-
*                  J.R.C. - ISPRA ESTABLISHMENT,                   -EU-
*                  21020 ISPRA (VA), ITALY.                        -EU-
*               - ONLY SYSTEM SUPPORT PERSONNEL ALLOWED.           -EU-
*               - CONSOLE ACCEPTED IF STARTED SYSTEM TASK ONLY.    -EU-
*         1988 - MVS/XA ONLY (NEW VERSION, CBT FILE 421).          -EU-
         EJECT
*     -- BRIEF DOCUMENTATION :
*
*        THIS PROGRAM MODIFIES LOAD MODULES IN THE NUCLEUS OR IN
*        THE LINK PACK AREA. MODIFIED PAGES IN LPA WILL BE FIXED
*        TO PREVENT PAGE-INS THAT WOULD UN-MODIFY THE MODIFIED PAGE.
*        CONTROL STATEMENT INPUT IS COMPATIBLE WITH THE 'AMASPZAP'
*        SERVICE AID PROGRAM, EXCEPT THE PRESENCE OF A SLASH ('/')
*        ANYWHERE IN A CARD IS USED AS AN INDICATION OF MULTIPLE
*        STATEMENTS PER CARD.
*        A 'RES' IS LIKE A 'REP' EXCEPT IT FREES A FIXED LPA PAGE.
*
*        DDNAMES USED :
*             SYSPRINT - MESSAGE AND DUMP OUTPUT.
*             SYSLIB   - SYS1.LPALIB FOR LPA ZAPS,
*                        SYS1.NUCLEUS FOR NUCLEUS ZAPS.
*                        OPENED FOR UPDATE, BUT NOT ACTUALLY UPDATED.
*             SYSIN    - CONTROL STATEMENT INPUT.
*
*             IF DDNAMES PROGLIST, PROGLIB, AND PROGIN ARE PRESENT,
*             THEY WILL BE USED INSTEAD OF THE OTHERS.
*
*        CONTROL STATEMENTS MAY OPTIONALLY BE SPECIFIED IN THE PARM
*        FIELD INSTEAD OF SYSIN.
*
*        'VER' 'REP' AND 'RES' COMMANDS MAY USE PROGRAM LABELS
*        INSTEAD OF HEX OFFSETS IF DESIRED. ANY ENTRY POINT MAY BE
*        USED AS A LABEL. OTHER LABELS CAN BE USED ONLY IF PROGRAM
*        IS COMPILED AND LINKED WITH THE 'TEST' ATTRIBUTE (DOES NOT
*        APPLY NUCLEUS MODULES IN MVS/XA).
*        TELL INCORZAP YOU ARE USING A LABEL INSTEAD OF A HEX OFFSET
*        BY ENCLOSING IT IN SINGLE QUOTES.
*
*        THE PROGRAM MUST BE LINK-EDITED AS AUTHORIZED IN ORDER TO
*        MODIFY STORAGE, BUT OTHER FUNCTIONS WILL WORK EVEN IF IT
*        IS NOT AUTHORIZED.
         EJECT                                                     -EU-
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *  -EU-
*        AUTHORITY LEVELS DEFINITIONS.                          *  -EU-
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *  -EU-
         SPACE 1                                                   -EU-
LV0      EQU   0         REJECT LEVEL.                             -EU-
         SPACE 1                                                   -EU-
        $MDL@IX ,        MODULE INDEX.                             -EU-
         SPACE 2                                                   -EU-
*        - REGISTERS EQUATES -
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5                   DATA BASE REG NO. 1             -EU-
R6       EQU   6                   DATA BASE REG NO. 2             -EU-
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10                  PROG BASE REG NO. 2             -EU-
R11      EQU   11
R12      EQU   12                  PROG BASE REG NO. 1
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
INCORZAP AMODE 24
INCORZAP RMODE 24
         SPACE 1
         USING *,R15                                               -EU-
         B     START                                               -EU-
         DROP  R15                                                 -EU-
         DC    AL1(L'IDNT)                                         -EU-
IDNT     DC    C'INCORZAP  &SYSDATE '                              -EU-
START    STM   R14,R12,12(R13)
         BASR  R12,0               1ST BASE REGISTER
         USING *,R12
         USING *+4095,R10                                          -EU-
         LA    R10,4095(,R12)      2ND BASE REGISTER               -EU-
         LA    R12,0(,R12)         CLEAR STUFF FOR 31-BIT
         L     R0,SIZE
         GETMAIN R,LV=(0)
         LR    R5,R1               1ST WORK-AREA BASE              -EU-
         USING @DATA,R5                                            -EU-
         LA    R6,4095(,R5)        2ND WORK-AREA BASE              -EU-
         USING @DATA+4095,R6                                       -EU-
         ST    R13,4(,R5)          PUT OLD ADDRESS IN NEW SAVE AREA-EU-
         LM    R0,R1,20(R13)       RESTORE R0 AND R1
         ST    R5,8(,R13)          PUT NEW ADDRESS IN OLD SAVE AREA-EU-
         LR    R13,R5              SWITCH TO NEW SAVEAREA          -EU-
         MVC   @PARMPTR,0(R1)      SAVE ADDRESS OF PARM FIELD
         BAS   R14,INIT            INITIALIZE
         B     DOTEST01
         EJECT
*        MAINLINE ROUTINE
*
*              DO WHILE XFEOD=0
*                 CALL GETREC
*                 IF XFEOD=0 THEN
*                    CALL PRINTREC
*                    CALL VERBSCN
*                    END
*                 END
*              CLOSE FILES
*              RETURN
         SPACE 1
DOLOOP01 BAS   R14,GETREC          GET A LOGICAL RECORD
         TM    XFLAGS,XFEOD
         BO    DOTEST01
         MVI   @LINE+2,C' '
         MVC   @LINE+3(118),@LINE+2
         L     R14,XFLDSTRT        POINT TO DATA TO BE MOVED
         L     R11,XENDREC         GET ADDRESS OF END OF DATA
         SLR   R11,R14             COMPUTE LENGTH
         EX    R11,LOGMVC          MOVE R14 TO @LINE01
         OI    @SWB,XFNOWTO        FOR PRINT BUT NOT FOR XFCON
         BAS   R14,PUTLINE         LOG THE STATEMENT
         NI    @SWB,255-XFNOWTO
         BAS   R14,VERBSCN
DOTEST01 TM    XFLAGS,XFEOD
         BZ    DOLOOP01
         MVC   XDCBCLS(12),CLOSE
         CLOSE (XDCBL,,XDCBIN,,XDCBO),MF=(E,XDCBCLS)   CLOSE       -EU-
         L     R11,XCODE           SAVE RC ACROSS FREEMAIN
         L     R13,4(,R13)         SWITCH TO OLD SAVEAREA
         L     R0,SIZE             LENGTH FOR FREEMAIN
         LR    R1,R5               ADDRESS FOR FREEMAIN            -EU-
         FREEMAIN R,LV=(0),A=(1)
         LR    R15,R11             RETURN CODE
         L     R14,12(,R13)
         LM    R0,R12,20(R13)
         BR    R14                 EXIT PROGRAM
         EJECT
*        ROUTINE TO DUMP MAIN STORAGE
*
*        INPUT : XCSADDR=ADDRESS OF CSECT TO BE DUMPED
*                XCSLEN = LENGTH TO DUMP
         SPACE 1
DUMP     STM   R14,R12,@SAVE13
         L     R14,XCSLEN          IS
         LA    R14,0(,R14)          AN
         LTR   R14,R14               ENDING ADDRESS SPECIFIED?
         BNZ   *+L'*+6             YES, BRANCH
         MVC   XCSLEN+1(3),ONE+1
         L     R14,=F'-32'         FFFFFFE0
         L     R11,XCSADDR         GET STARTING ADDRESS
         L     R7,XCSLEN           GET LENGTH
         LA    R7,0(,R7)
         ALR   R7,R11              ADD TO START ADDRESS
         BCTR  R7,0
         NR    R7,R14              ROUND DOWN TO MULTIPLE OF 32
         ST    R7,XDUMPEND         SAVE DUMP END ADDRESS
         OI    @SWB,XFNOWTO        DON'T DUMP TO CONSOLE
         MVI   @LINE02,C' '
         MVC   @LINE03(118),@LINE02
         MVI   @LINE01,C' '
         MVC   XHEXL,=F'4'
         NR    R11,R14             ROUND DOWN TO MULTIPLE OF 32
         ST    R11,XDP             DUMP START ADDRESS
         B     DUMPGO
DUMPLP   LA    R14,@LINE01
         ST    R14,XEBAD
         LA    R14,XDP
         ST    R14,XHEX
         BAS   R14,HEXCV           PUT HEX ADDRESS IN LINE
         L     R14,XDP
         ST    R14,XHEX
         LA    R14,1
         ST    R14,I               SET SUBSCRIPT TO 1
DUMPLLP  MH    R14,=H'9'           ADD SUBSCRIPT*9
         LA    R14,@LINE03(14)      TO LINE+3
         ST    R14,XEBAD           SAVE RESULT IN HEX TO ADDRESS
         BAS   R14,HEXCV           PERFORM HEX CONVERSION
         L     R14,XHEX            ADD
         AL    R14,XHEXL            HEXLEN
         ST    R14,XHEX              TO HEXFR
         LA    R14,1               ADD 1
         AL    R14,I                TO
         ST    R14,I                 SUBSCRIPT
         C     R14,=F'4'           IS SUBSCRIPT GT 4?
         BNH   DUMPLLP             NO, LOOP (LEFT HALF OF PAGE)
         LA    R14,1               YES,
         ST    R14,I                RESET SUBSCRIPT TO 1
DUMPRLP  MH    R14,=H'9'
         LA    R14,@LINE41(14)
         ST    R14,XEBAD
         BAS   R14,HEXCV
         L     R14,XHEX
         AL    R14,XHEXL
         ST    R14,XHEX
         LA    R14,1
         AL    R14,I
         ST    R14,I
         C     R14,=F'4'           IS SUBSCRIPT GT 4?
         BNH   DUMPRLP             NO, LOOP (RIGHT HALF OF PAGE)
         MVI   @LINE87,C'*'
         MVI   @LIN120,C'*'
         BAS   R14,MODESET1        GET INTO KEY 0
         BAS   R14,BIT31           GET INTO 31-BIT MODE
         L     R14,XDP
         MVC   @LINE88(32),0(R14)  MOVE IN CHAR PORTION
         BAS   R14,BIT24           GET BACK TO 24-BIT MODE
         BAS   R14,MODESET2        GET BACK TO USER KEY
         L     R14,=A(EBCDIC)
         TR    @LINE88(32),0(R14)                                  -EU-
         BAS   R14,PUTLINE
         LA    R11,32              ADD 32
         AL    R11,XDP              TO
         ST    R11,XDP               DUMP ADDRESS
DUMPGO   C     R11,XDUMPEND
         BNH   DUMPLP
         NI    @SWB,255-XFNOWTO
         LM    R14,R12,@SAVE13
         BR    R14
         EJECT
*        FIND MODULE ON PROGRAM LIBRARY
         SPACE 1
FIND     STM   R14,R12,@SAVE14
         FIND  XDCBL,XEBLM,D       FIND                            -EU-
         LTR   R15,R15             WAS MEMBER FOUND?
         BZ    FINDOK              YES, BRANCH
         LA    R14,MSG08           MEMBER NOT FOUND IN LIBRARY
         ST    R14,XMSE
         BAS   R14,GENERR
FINDOK   LM    R14,R12,@SAVE14
         BR    R14
         EJECT
*        PGFIX/FREE ROUTINE
*
*        INPUT : XZADDR = ADDR OF STORAGE TO BE CHANGED
*                XHL = LENGTH OF STORAGE
*                XEBV = VERB
         SPACE 1
FIXER    STM   R14,R12,@SAVE16
         TM    XFLAGS,XFLOCSW
         BO    PAGEX
         CLC   XEBLM(6),=CL6'IEANUC'    IS THIS A NUCLEUS ZAP?
         BE    PAGEX               YES, NO NEED TO FIX/FREE
         BAS   R14,MODESET1        SUP STATE, KEY ZERO
         AL    R13,=F'12'          CHANGE R13 FOR SETLOCK
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=SAVE,RELATED=X
         SLR   R4,R4               NO TCB - PGFIX NOT TO BE OWNED
         ST    R4,XPECB            CLEAR THE ECB
         LA    R0,XPECB            ECB ADDRESS
         L     R14,XZADDR          GET STARTING ADDRESS
         LR    R1,R14              STARTING ADDRESS
         AL    R14,XHL             COMPUTE ENDING ADDRESS
         LR    R2,R14              ENDING ADDRESS+1
         BCTR  R14,0               ENDING ADDRESS
         CLC   XEBV(3),=CL8'RESET' IS THIS A RES?                  -EU-
         BE    FREEPAGE            YES, FREE THE PAGE              -EU-
FIXPAGE  PGSER R,FIX,A=(1),EA=(R14),TCB=0,ECB=(0),LONG=Y,BRANCH=Y,     1
               RELATED=FREEPAGE                                    -EU-
         B     SVPSRC                                              -EU-
FREEPAGE PGSER R,FREE,A=(1),EA=(R14),TCB=0,BRANCH=Y,RELATED=FIXPAGE
SVPSRC   ST    R15,XPSRC           SAVE RETURN CODE
         SETLOCK RELEASE,TYPE=LOCAL,REGS=SAVE,RELATED=X
         SL    R13,=F'12'          PUT R13 BACK TO NORMAL
         BAS   R14,MODESET2        PROBLEM STATE, KEY NZERO
         CLC   XPSRC,=F'8'         DID PAGE SERVICES RETURN AN 8?
         BNE   PAGEX               NO, NO NEED TO WAIT
         WAIT  ECB=XPECB
PAGEX    LM    R14,R12,@SAVE16
         BR    R14
         EJECT
*        GENERAL ERROR ROUTINE
*
*        INPUT : XMSE = ADDR OF MESSAGE LIST
         SPACE 1
GENERR   STM   R14,R12,@SAVE15
         MVI   @LINE02,C' '
         MVC   @LINE03(118),@LINE02
         L     R14,XMSE            GET ADDRESS OF MESSAGE
         XR    R11,R11                                             -EU-
         IC    R11,0(,R14)         GET LENGTH OF MESSAGE           -EU-
         EX    R11,PUTMSGM         MOVE R14+4 TO @LINE01
         BAS   R14,PUTLINE         WRITE THE MESSAGE
         MVC   XCODE,=F'12'        SET RETURN CODE
         OI    XFLAGS,XFEOD        XFEOD
         LM    R14,R12,@SAVE15
         BR    R14
         EJECT
*        FIELD FETCHING ROUTINE
*
*        INPUT : XRCVADDR = ADDR OF RECEIVING FIELD
*                XRCVLEN = LENGTH OF RECEIVING FIELD
*        OUTPUT : XFLDALEN = ACTUAL LENGTH OF FETCHED FIELD
*                 (BLANKS ARE RETURNED IF NO FIELD IS FOUND)
         SPACE 1
GETFLD   STM   R14,R12,@SAVE19
         L     R14,XFLDSTRT
         ST    R14,XFLDCUR         SET CURRENT = STARTING
         SLR   R14,R14             SET
         ST    R14,XSCANSW         SW = 0
*                                  SCAN PAST LEADING DELIMITERS
         B     PARGO1              DO UNTIL SW NE 0
PARLP1   CLC   XFLDCUR,XENDREC     STILL WITHIN STATEMENT?
         BNH   PARIN1              YES, BRANCH
*                                  IS BEYOND END OF STMT
         LA    R14,1               SET
         ST    R14,XSCANSW         SW = 1
         B     PARGO1
PARIN1   L     R14,XFLDCUR
         CLI   0(R14),C' '         BLANK?
         BE    PARNX1
         CLI   0(R14),C''''        QUOTE?
         BNE   PARFN1
PARNX1   LA    R14,1               QUOTE OR BLANK
         AL    R14,XFLDCUR         POINT TO
         ST    R14,XFLDCUR          NEXT CHARACTER
         B     PARGO1
*                                  NEITHER QUOTE NOR BLANK
*                                  SET TO EXIT LOOP
PARFN1   LA    R14,1               SET
         ST    R14,XSCANSW          SW = 1
PARGO1   SLR   R14,R14
         C     R14,XSCANSW
         BE    PARLP1              END OF DO LOOP (SKIPPING LEADING
*                                  DELIMITERS)
*                                  SCAN FOR END OF FIELD
         L     R11,XFLDCUR         GET TRUE START OF FIELD
         ST    R11,XFLDSTRT
         ST    R14,XSCANSW         SET SW = 0
         B     PARGO2              DO UNTIL SW NE 0
PARLP2   CLC   XFLDCUR,XENDREC     STILL WITHIN STATEMENT?
         BNH   PARIN2              YES, BRANCH
         LA    R14,1               SET
         ST    R14,XSCANSW          SW = 1
         B     PARGO2
PARIN2   LA    R14,1               POINT XFLDCUR TO
         AL    R14,XFLDCUR          NEXT
         ST    R14,XFLDCUR           CHARACTER
         CLI   0(R14),C' '         BLANK?
         BE    PARFN2
         CLI   0(R14),C''''        QUOTE?
         BNE   PARGO2
PARFN2   LA    R14,1               SET
         ST    R14,XSCANSW          SW = 1
PARGO2   L     R14,XSCANSW
         LTR   R14,R14
         BZ    PARLP2              END OF DO LOOP (FOUND END)
*                                  CALCULATE LENGTH AND CHECK
*                                   FOR A TOO LONG FIELD
         L     R14,XFLDCUR         GET ADDRESS OF BLANK OR QUOTE
         SL    R14,XFLDSTRT        COMPUTE LENGTH
         ST    R14,XFLDALEN        SAVE LENGTH
         C     R14,XRCVLEN         WILL IT FIT IN RESULT?
         BNH   PAROKL              YES, BRANCH
         LA    R14,MSG01           FIELD IS TOO LONG
         ST    R14,XMSE
         BAS   R14,SYNERR          SYNTAX ERROR
         B     PARMOV              GO TRUNCATE MOVE
*                                  MOVE IN FETCHED FIELD (IF ANY)
PAROKL   L     R14,XRCVADDR        GET ADDRESS OF GETFLD RESULT
         L     R11,XRCVLEN
         BCTR  R11,0
         EX    R11,PARBLNK         MOVE BLANKS TO GETFLD RESULT
PARMOV   L     R14,XFLDALEN        IF LENGTH
         LTR   R14,R14              GREATER THAN
         BZ    PARNUL                ZERO
         L     R11,XRCVADDR        GET ADDRESS OF GETFLD RESULT
         BCTR  R14,0
         L     R7,XFLDSTRT
         EX    R14,PARMVC          MOVE R7 TO R11
PARNUL   L     R14,XFLDCUR         GET ADDR OF TRAILING DELIMITER
         ST    R14,XFLDSTRT        READY FOR NEXT CALL
         CLI   0(R14),C''''        QUOTE?
         BNE   PARX                BRANCH IF NOT QUOTED
         AL    R14,ONE             POINT BEYOND QUOTE
         ST    R14,XFLDSTRT
PARX     LM    R14,R12,@SAVE19
         BR    R14                 RETURN
         EJECT
*        HEXADECIMAL FIELD FETCHING ROUTINE
*
*        INPUT : XFLDSTRT = ADDR OF START OF FIELD
*        OUTPUT : XHS = HEX STRING
*                 XHSL = LENGTH OF HEX STRING
         SPACE 1
GETHEX   STM   R14,R12,@SAVE21
         SLR   R14,R14
         ST    R14,XHSW            SET SW = 0
         ST    R14,XHL             SET LEN = 0
         L     R14,XFLDSTRT
         ST    R14,XHP
*                                  MOVE FIELD TO 'XHW' AND
*                                   STRIP OUT COMMAS
         B     HPAGO1              DO UNTIL XHSW NE 0
HPALP1   CLC   XHP,XENDREC         STILL WITHIN STATEMENT?
         BNH   HPAIN1              YES, BRANCH
         MVC   XHSW,ONE
         B     HPAGO1
HPAIN1   L     R14,XHP
         CLI   0(R14),C' '         IS IT A BLANK?
         BNE   HPANBK              NO, BRANCH
         L     R14,XHL
         LTR   R14,R14
         BNP   *+L'*+10
         MVC   XHSW,ONE
         B     HPAGO1
         LA    R14,1
         AL    R14,XHP
         ST    R14,XHP
         B     HPAGO1
HPANBK   L     R14,XHP             NOT A BLANK
         CLI   0(R14),C','         IS IT A COMMA?
         BE    HPAINCR             YES, GO IGNORE IT
         LA    R11,1               ADD 1
         AL    R11,XHL              TO
         ST    R11,XHL               MODLEN
         LA    R7,XHW-1(R11)
         MVC   0(1,R7),0(R14)      COPY THE CHARACTER TO WORK AREA
HPAINCR  LA    R14,1               POINT
         AL    R14,XHP              TO
         ST    R14,XHP               NEXT CHARACTER
HPAGO1   SLR   R14,R14
         C     R14,XHSW
         BE    HPALP1
         L     R11,XHP             CHECK FOR MISSING FIELD
         ST    R11,XFLDSTRT
         C     R14,XHL             IS LENGTH ZERO?
         BNE   HPAOK1              NO, BRANCH
         LA    R14,MSG11           REQUIRED FIELD MISSING
         ST    R14,XMSE
         BAS   R14,SYNERR          SYNTAX
         B     HPAX
HPAOK1   SLR   R2,R2               CHECK FOR INVALID (NON-HEX) CHARS
         L     R1,XHL
         BCTR  R1,0
         L     R14,=A(HEXTRT)                                      -EU-
         EX    R1,HPRTRT           TRT WORK AREA
         LTR   R2,R2               ARE ALL CHARACTERS HEX?
         BZ    HPAOK2              YES, BRANCH
         LA    R14,MSG03           INVALID HEX CHARACTER
         ST    R14,XMSE
         BAS   R14,SYNERR          SYNTAX
         B     HPAX
HPAOK2   L     R14,=A(HEXTR)       TRANSLATE FROM EBCDIC TO HEX    -EU-
         TR    XHW,0(R14)          TRANSLATE TO 'UNPACKED' HEX     -EU-
         LA    R14,XHS
         ST    R14,XHSPTR
         LA    R14,XHW             SET
         ST    R14,XHWPTR           PTR = ADDR(WORK AREA)
         B     HPAGO2              DO WHILE PTR LE ADDR(WRK AREA)+LEN
HPALP2   L     R14,XHWPTR
         PACK  XHPW,0(16,R14)      PACK 16 BYTES AT A TIME
         L     R11,XHSPTR
         MVO   0(9,R11),XHPW       SHIFT TO GET RID OF SIGN
         AL    R11,=F'8'           ADD 8 TO
         ST    R11,XHSPTR           HEX RESULT ADDRESS
         AL    R14,=F'16'          ADD 16 TO
         ST    R14,XHWPTR           PTR
HPAGO2   L     R14,XHL
         LA    R11,XHW
         ALR   R11,R14
         C     R11,XHWPTR
         BH    HPALP2              END OF DO LOOP
*                                  CHECK FOR EVEN NUMBER OF
*                                   HEX DIGITS
         ST    R14,Y
         LR    R2,R14              PREPARE TO DIVIDE
         SRDA  R2,32               PREPARE TO DIVIDE
         D     R2,=F'2'            HALVE THE LENGTH
         ST    R3,XHL              SAVE LENGTH
         ALR   R3,R3               DOUBLE IT
         CR    R14,R3              AND COMPARE TO ORIGINAL
         BE    HPAX                IF EQUAL, THERE WERE AN EVEN NUMBER
         LA    R14,MSG12           UNEVEN NUMBER OF HEX DIGITS
         ST    R14,XMSE
         BAS   R14,SYNERR          SYNTAX
HPAX     LM    R14,R12,@SAVE21
         BR    R14
         EJECT
*        GET OFFSET ROUTINE
*
*        INPUT : XFLDSTRT
*        OUTPUT : XZADDR = IN-CORE ADDR CORRESPONDING TO OFFSET
         SPACE 1
GETOFF   STM   R14,R12,@SAVE08
         SLR   R14,R14
         ST    R14,XGOS
         MVI   XGOC,C' '
         B     BASGO1              SCAN FOR 1ST CHAR OF OFFSET
BASLP1   L     R14,XFLDSTRT
         C     R14,XENDREC
         BNH   BASOK1
         ST    R14,XGOS
         B     BASGO1
BASOK1   L     R14,XFLDSTRT
         CLI   0(R14),C' '
         BNE   BASOK2
         AL    R14,ONE
         ST    R14,XFLDSTRT
         B     BASGO1
BASOK2   L     R14,XFLDSTRT
         MVC   XGOC,0(R14)
         ST    R14,XGOS
BASGO1   L     R14,XGOS
         LTR   R14,R14
         BZ    BASLP1
*                                  CHECK FIRST CHAR TO DETERMINE
*                                   TYPE OF OFFSET (HEX OR LBL)
         CLI   XGOC,C''''          QUOTE (LABEL OFFSET)?
         BE    BASQOT              YES, BRANCH
*                                  PROCESS A HEXADECIMAL OFFSET
         BAS   R14,GETHEX          GET HEX OFFSET
         L     R14,XHL
         C     R14,=F'4'
         BNH   BASOK3
         LA    R14,MSG02           OFFSET FIELD IS TOO LONG
         ST    R14,XMSE
         BAS   R14,SYNERR          SYNTAX
         B     BASX
BASOK3   L     R14,XHL
         SLR   R11,R11
         CR    R14,R11             IS XHL ZERO?
         BE    BASX                YES, GO EXIT                    -EU-
         ST    R11,XHOP            LEADING ZEROES
         LCR   R14,R14             1, 2, 3, OR 4 BECOME -1, -2, -3, -4
         AL    R14,=F'5'           BECOME +4 +3 +2 +1
         LA    R11,XHOP-1(R14)
         LCR   R14,R14             BECOME -4 -3 -2 -1
         AL    R14,=F'4'           BECOME 0 1 2 3 LENGTH CODE
         EX    R14,MVREPDT         MOVE REPDATA TO R11
         CLC   XEBV(3),=CL3'BAS'   IS THIS A BASE STATEMENT?
         BNE   BASINN              NO, ITS A VER OR REP, BRANCH
         L     R14,XHOP
         ST    R14,XBASE           STORE BASE VALUE
         B     BASX
BASINN   L     R14,XCSADDR         GET ADDRESS OF CSECT
         AL    R14,XHOP            ADD OFFSET
         SL    R14,XBASE           SUBTRACT VALUE FROM 'BASE' VERB
         ST    R14,XZADDR          SAVE THIS AS ADDRESS TO ZAP
         B     BASX                GO EXIT
BASQOT   MVI   XEBLBL+1,C' '       PROCESS A SYMBOLIC (LABEL) OFFSET
         MVC   XEBLBL+2(6),XEBLBL+1
         MVI   XEBLBL,C' '
         LA    R14,XEBLBL
         ST    R14,XRCVADDR
         MVC   XRCVLEN,=F'8'
         BAS   R14,GETFLD          GO GET LABEL
         CLC   XEBLBL(8),BLANKS
         BE    BASMISS
         BAS   R14,SCANMOD         GO SCAN MOD FOR VALUE OF LABEL
         L     R14,XLMADDR         GET ADDRESS OF MODULE
         AL    R14,XOFFSET         ADD OFFSET TO CSECT
         ST    R14,XZADDR          STORE ADDR TO ZAP
         ST    R14,XLOC
         TM    XFLAGS,XFEOD
         BO    BASX                BRANCH IF NOT EOD
         BAS   R14,PRADDR          GO PRINT ADDRESS
         B     BASX                GO EXIT
BASMISS  LA    R14,MSG11           REQUIRED FIELD MISSING
         ST    R14,XMSE
         BAS   R14,SYNERR          SYNTAX
BASX     LM    R14,R12,@SAVE08
         BR    R14
         EJECT
*        RECORD FETCHING ROUTINE
         SPACE 1
GETREC   STM   R14,R12,@SAVE10
         TM    XFLAGS,XFCON        ARE WE IN CONSOLE MODE?
         BZ    GETSIN              NO, BRANCH
*                                  CONSOLE INPUT SECTION
         BAS   R14,GLREC           TRY TO GET A LOGICAL RECORD
         B     GETCGO1             DO WHILE LOGICAL REC NOT GOTTEN
*                                  (USE WTOR TO GET ANOTHER PHYS REC)
GETCLP1  SLR   R14,R14
         ST    R14,XWECB           CLEAR ECB
         MVI   XREPLY+1,C' '       CLEAR WTO AREA
         MVC   XREPLY+2(128),XREPLY+1
         MVI   XREPLY,C' '
         LA    R1,XWTOR
         LA    R15,XREPLY
         ST    R15,0(R1)
         MVI   0(R1),130           LENGTH OF REPLY
         LA    R14,XWECB
         ST    R14,4(R1)
         WTOR  MF=(E,(1))                                          -EU-
         WAIT  ECB=XWECB                                           -EU-
         L     R14,=A(EBCDIC)                                      -EU-
         TR    XREPLY(130),0(R14)  TRANSLATE TO UPPER CASE         -EU-
         LA    R14,XREPLY
         LR    R11,R14
         BCTR  R11,0
         ST    R11,XENDREC         SET END OF LAST LOGICAL
         SL    R14,=F'-129'        REC TO BEGINNING OF REPLY AREA-1
         ST    R14,XPENDREC        SET END OF PHYSICAL RECORD
         BAS   R14,GLREC           NOW EXTRACT A LOGICAL REC
GETCGO1  CLC   XENDREC,XPENDREC
         BH    GETCLP1             END OF DO LOOP
         B     GETCX
*                                  PROCESS PARM FIELD INPUT
GETSIN   TM    XFLAGS,XFMAIN       IS THERE PARM FIELD INPUT?
         BO    GETCSYIN            NO, BRANCH
         CLC   XENDREC,XPENDREC    MORE IN PARM
         BL    GETCPARM            YES, BRANCH
         OI    XFLAGS,XFEOD        XFEOD
         B     GETCX
GETCPARM BAS   R14,GLREC           EXTRACT LOGICAL REC FROM PARM
         B     GETCX
*                                  INPUT IS FROM SYSIN DD
GETCSYIN BAS   R14,GLREC           TRY TO GET A LOGICAL RECORD
         B     GETCGO2             DO WHILE NO LOGICAL REC GOTTEN
GETCLP2  GET   XDCBIN,XCARD        READ A PHYSICAL RECORD
         LA    R14,XCARD
         LR    R11,R14
         BCTR  R11,0
         ST    R11,XENDREC         POINT TO BYTE PRECEDING COL 1
         SL    R14,=F'-71'         POINT TO COLUMN 72
         ST    R14,XPENDREC        THIS IS END OF PHYSICAL RECORD
         BAS   R14,GLREC           NOW GO GET LOGICAL RECORD
GETCGO2  CLC   XENDREC,XPENDREC    IS THERE MORE PHYS REC LEFT
         BH    GETCLP2             BRANCH IF NOT
GETCX    LM    R14,R12,@SAVE10
         BR    R14
*                                  END-OF-DATA (EODAD) FOR SYSIN
CTLEOD   OI    XFLAGS,XFEOD        SET XFEOD
         B     GETCX
         EJECT
*        LOGICAL RECORD EXTRACTION ROUTINE (CALLED BY 'GETREC')
         SPACE 1
GLREC    STM   R14,R12,12(R13)
         L     R14,XENDREC
         C     R14,XPENDREC
         BH    SEPX
         AL    R14,ONE             ADD 1 TO
         ST    R14,XENDREC          END POINTER
         ST    R14,XFLDSTRT        INITIALIZE GETFLD BEGIN ADDRESS
         SLR   R14,R14             SET
         ST    R14,XPS              SW = 0
         B     SEPGO1              DO UNTIL SW NE 0
SEPLP1   CLC   XENDREC,XPENDREC
         BL    SEPOK1
         LA    R14,1               SET
         ST    R14,XPS              SW = 1
         B     SEPGO1
SEPOK1   L     R14,XENDREC
         CLI   0(R14),C'/'         MULTIPLE STATEMENTS PER CARD?
         BNE   SEPNXT              NO
         MVI   0(R14),C' '         YES, CHANGE SLASH TO BLANK
         LA    R14,1               SET
         ST    R14,XPS              SW = 1
         B     SEPGO1
SEPNXT   LA    R14,1               ADD 1
         AL    R14,XENDREC          TO
         ST    R14,XENDREC           END POINTER
SEPGO1   L     R14,XPS
         LTR   R14,R14
         BZ    SEPLP1
SEPX     LM    R14,R12,12(R13)
         BR    R14
         EJECT
*        HEX TO EBCDIC CONVERSION ROUTINE
*
*        INPUT : XHEX = ADDR OF HEX DATA TO BE CONVERTED
*                XHEXL = LENGTH OF HEX DATA
*                XEBAD = ADDR OF TARGET AREA TO RECEIVE EBCDIC DATA
         SPACE 1
HEXCV    STM   R14,R12,12(R13)
         BAS   R14,MODESET1        GET INTO KEY 0
         LA    R14,1               SET UP LOOP VARIABLE
         B     HEXCT
HEXLP    L     R11,XEBAD           GET ADDR OF TARGET EBCDIC AREA
         L     R7,XHEX             GET ADDR OF 'FROM' FIELD
         ALR   R7,R14
         BCTR  R7,0                POINT AT CURRENT CHARACTER
         LR    R4,R14              SAVE LOOP COUNTER
         BAS   R14,BIT31           GET 31-BIT MODE IF XA
         MVC   1(1,R11),0(R7)      MOVE CHARACTER TO TARGET AREA
         BAS   R14,BIT24           GET BACK TO 24-BIT MODE
         LR    R14,R4
         UNPK  0(1,R11),1(1,R11)   GET FIRST NIBBLE INTO NEXT BYTE
         NC    0(2,R11),=XL2'0F0F' STRIP ZONE BITS
         TR    0(2,R11),=CL16'0123456789ABCDEF'   TRANSLATE TO EBCDIC
         AL    R11,=F'2'           BUMP TARGET CHAR POINTER
         ST    R11,XEBAD
         AL    R14,ONE             INCREMENT LOOP COUNTER
HEXCT    ST    R14,XX
         C     R14,XHEXL           ARE THERE MORE CHAR'S TO CONVERT
         BNH   HEXLP
         BAS   R14,MODESET2        GET BACK TO USER KEY
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
*        HOUSEKEEPING ROUTINE (PERFORMS PROGRAM INITIALIZATION)
         SPACE 1
INIT     STM   R14,R12,@SAVE09
         MVI   XWTO+127,C' '
         MVC   XWTO+128(16),XWTO+127
         MVC   XWTO(127),BLINE
         MVC   XWTOR,WTORM
         XC    XDCBCLS(12),XDCBCLS
         XC    XHW,XHW
         SLR   R14,R14
         ST    R14,XCODE
         XC    XFLAGS(2),XFLAGS
         BAS   R14,CONTROL         LOOK WHO AND WHAT               -EU-
         TM    XFLAGS,XFEOD        ACCEPTED?                       -EU-
         BO    INITX               NO, REJECT                      -EU-
*        L     R14,CVTPTR          CVTPTR                          -EU-
*        USING CVT,R14                                             -EU-
*        L     R14,CVTTCBP         TCB WORDS                       -EU-
*        DROP  R14                                                 -EU-
*        L     R14,4(,R14)         CURRENT TCB                     -EU-
*        USING TCB,R14                                             -EU-
*        L     R14,TCBRBP          CURRENT RB                      -EU-
*        DROP  R14                                                 -EU-
*        L     R14,12(,R14)        RBCDE                          .***.
*        CLC   8(8,R14),=CL8'LINKZAP'   CDNAME LINKZAP            .***.
*        BE    INIT1               YES, NO CONTROL XFMAIN         .***.
         L     R14,@PARMPTR        PARM FIELD                     .PRC.
         LH    R14,0(,R14)         LENGTH OF PARM                 .PRC.
         LTR   R14,R14             IS THERE A PARM?               .PRC.
         BNZ   INIT1               YES, NO CONTROL XFMAIN         .PRC.
         OI    XFLAGS,XFMAIN       CONTROL XFMAIN
INIT1    LA    R14,PRTDEF
         ST    R14,XDDN
         LA    R14,XDCBO
         ST    R14,XDCBA
         BAS   R14,OPEN            OPEN PRT
         LTR   R15,R15             WAS OPEN SUCCESSFUL?
         BNZ   INIT2
         OI    XFLAGS,XFOOP        PRT IS OPEN
INIT2    LA    R14,LIBDEF
         ST    R14,XDDN
         LA    R14,XDCBL
         ST    R14,XDCBA
         BAS   R14,OPEN            OPEN LIB
         LTR   R15,R15
         BZ    INIT3
         LA    R14,MSG07           DD STATEMENT FOR LIBRARY NOT FOUND
         ST    R14,XMSE
         BAS   R14,GENERR
         B     INITX
INIT3    TM    XFLAGS,XFMAIN       IS INPUT FROM PARM FIELD?
         BZ    INITPARM            YES, GO GET PARM FIELD
         LA    R14,CTLDEF
         ST    R14,XDDN
         LA    R14,XDCBIN
         ST    R14,XDCBA
         BAS   R14,OPEN            OPEN SYSIN
         LTR   R15,R15
         BZ    INIT4
         LA    R14,MSG06           INPUT DD STATEMENT NOT FOUND
         ST    R14,XMSE
         BAS   R14,GENERR
         B     INITX
INIT4    L     R14,XPENDREC
         ST    R14,XENDREC
         B     INITX
INITPARM LA    R14,@PARMCPY
         BCTR  R14,0
         ST    R14,XENDREC
         L     R11,@PARMPTR
         LH    R7,0(,R11)          GET LENGTH OF PARM
         ALR   R14,R7              GET ADDRESS OF LAST CHAR IN PARM
         ST    R14,XPENDREC        SAVE IT
         LTR   R7,R7               IS THERE A PARM?
         BNP   INITX               NO, BRANCH
         BCTR  R7,0                LENGTH MINUS 1 FOR EX
         EX    R7,PARMMVC          MOVE PARM TO PARMCPY
INITX    LM    R14,R12,@SAVE09
         BR    R14
         EJECT ,                                                   -EU-
*        ROUTINE TO CONTROL CALLER AND HOW                         -EU-
         SPACE 1                                                   -EU-
CONTROL  STM   R14,R12,@SAVE01                                     -EU-
         XC    EXTR(EXTRL+L'ANSWER),EXTR                           -EU-
         EXTRACT ANSWER,'S',FIELDS=(COMM),MF=(E,EXTR)              -EU-
         L     R2,ANSWER           COMMUNICATION AREA ADDRESS      -EU-
         ICM   R3,B'1111',4(R2)    CIB ADDRESS?                    -EU-
         BZ    NOTCON              NO, CURRENT CIB NOT SET UP      -EU-
         USING CIBDSECT,R3                                         -EU-
         CLI   CIBVERB,CIBSTART    START COMMAND (SYSTEM TASK)?    -EU-
         BNE   NOTCON              NO                              -EU-
         DROP  R3                                                  -EU-
         OI    @SWB,CONACC         CONSOLE MAY BE ACCEPTED         -EU-
         B     EXCON                                               -EU-
NOTCON   XC    REQAUT(REQAUTL),REQAUT                              -EU-
         MVC   REQAUT+1(L'REQ@IX),REQ@IX                           -EU-
         LA    R1,AUTH                                             -EU-
         ST    R1,REQAUT+4                                         -EU-
        $EACM  REQAUT                                              -EU-
         CLI   AUTH,LV0            AUTHORIZED?                     -EU-
         BNE   EXCON               YES                             -EU-
         LA    R14,MSG13           USER NOT AUTHORIZED             -EU-
         ST    R14,XMSE                                            -EU-
         OI    XFLAGS,XFCON        FORCE MESSAGE BY WTO            -EU-
         BAS   R14,GENERR                                          -EU-
EXCON    LM    R14,R12,@SAVE01                                     -EU-
         BR    R14                                                 -EU-
         EJECT
*        ROUTINE TO OPEN FILES
         SPACE 1
OPEN     STM   R14,R12,@SAVE24
         L     R14,XDCBA
         L     R11,XDDN
         L     R7,0(,R11)
         MVC   0(100,R14),0(R7)    MOVE DCB PROTOTYPE
         LR    R1,R11
         LA    R1,8(,R1)           PRIMARY DDNAME
         DEVTYPE (1),XCARD                                         -EU-
         LTR   R15,R15             IS DDNAME PRESENT?
         BNZ   OPEN1               NO, BRANCH
         L     R14,XDCBA
         L     R11,XDDN
         MVC   40(8,R14),8(R11)    USE PRIMARY DDNAME
         B     OPEN2
OPEN1    L     R14,XDCBA
         L     R11,XDDN
         MVC   40(8,R14),16(R11)   USE SECONDARY DDNAME
OPEN2    L     R14,XDDN
         L     R14,4(,R14)         POINT TO OPEN MF=L IMAGE
         L     R11,XDCBA
         ICM   R7,B'1111',0(R14)   LOAD OPEN MF=L IMAGE
         OR    R11,R7              OR IMAGE OVER R11
         ST    R11,XDCBA           STORE COMBINED IMAGE IN OPEN MF=L
         LA    R1,XDCBA
         OPEN  MF=(E,(1))                                          -EU-
         L     R14,XDCBA
         USING IHADCB,R14                                          -EU-
         TM    DCBOFLGS,DCBOFOPN   WAS OPEN SUCCESSFUL?            -EU-
         BZ    OPENRC4             NO, BRANCH
         DROP  R14                                                 -EU-
         SLR   R14,R14
         ST    R14,XOCODE
         B     OPENRET
OPENRC4  MVC   XOCODE,=F'4'
OPENRET  L     R15,XOCODE
         L     R14,@SAVE24
         LM    R0,R12,@SAVE24+8
         BR    R14
         EJECT
*        PRINT ADDRESS OF SYMBOL (CSECT, LABEL, ETC...)
*
*        INPUT : XLOC = FOUR-BYTE ADDRESS TO BE DISPLAYED
         SPACE 1
PRADDR   STM   R14,R12,@SAVE23
         MVI   @LINE47,C' '
         MVC   @LINE48(73),@LINE47
         MVC   @LINE01(46),WHEREMSG
         LA    R14,XLOC
         ST    R14,XHEX            ADDR OF WHERE HEX IS COMING FROM
         MVC   XHEXL,=F'4'
         LA    R14,@LINE01
         ST    R14,XEBAD           ADDR WHERE WE WANT EBCDIC ADDR
         BAS   R14,HEXCV           CONVERT HEX ADDR TO EBCDIC
         BAS   R14,PUTLINE         GO PRINT IT OUT
         LM    R14,R12,@SAVE23
         BR    R14
         EJECT
*        OUTPUT RECORD PRINTING ROUTINE
         SPACE 1
PUTLINE  STM   R14,R12,@SAVE11
         TM    XFLAGS,XFOOP        PRT OPEN
         BZ    PUTL3
         TM    @SWB,XF1ST
         BO    PUTL1
         OI    @SWB,XF1ST
         PUT   XDCBO,HEADING
         MVI   @LINE,C'0'
         B     PUTL2
PUTL1    MVI   @LINE,C' '
PUTL2    PUT   XDCBO,@LINE
PUTL3    TM    XFLAGS,XFCON
         BZ    PUTL4
         TM    @SWB,XFNOWTO        FOR PRINT ONLY?
         BO    PUTL4               YES, BYPASS WTO
         MVC   XWTO+4(120),@LINE01
         WTO   MF=(E,XWTO)
PUTL4    LM    R14,R12,@SAVE11
         BR    R14
         EJECT
*        READ RECORD FROM LIBRARY
         SPACE 1
READLIB  STM   R14,R12,@SAVE25
         READ  @DECB,SF,XDCBL,XLREC,248,MF=E
         CHECK @DECB
         LM    R14,R12,@SAVE25
         BR    R14
         EJECT
*        SCAN LPA/JPA LOOKING FOR LOAD MODULE
*
*        INPUT : XEBLM = NAME OF LOAD MODULE
*        OUTPUT : XLMADDR = ADDR OF LOAD MODULE
         SPACE 1
SCANLPA  STM   R14,R12,@SAVE26
         TM    XFLAGS,XFLOCSW      IS IT LOCAL MODE?
         BO    SCLPA1              YES, GO LOOK IN JPA
         L     R8,CVTPTR           CVT ADDRESS                     -EU-
         USING CVT,R8                                              -EU-
         LA    R8,CVTQLPAQ         LINK PACK POINTER               -EU-
         DROP  R8                                                  -EU-
         B     SCLPA2
SCLPA1   L     R14,CVTPTR          CVT ADDRESS                     -EU-
         USING CVT,R14                                             -EU-
         L     R14,CVTTCBP         TCB WORDS                       -EU-
         DROP  R14                                                 -EU-
         L     R14,4(,R14)         CURRENT TCB
         USING TCB,R14                                             -EU-
         L     R8,TCBJSTCB                                         -EU-
         DROP  R14                                                 -EU-
         USING TCB,R8                                              -EU-
         LA    R14,TCBJPQ          LAST CDE                        -EU-
         DROP  R8                                                  -EU-
         LR    R8,R14
SCLPA2   LA    R9,XEBLM
         LR    R4,R9
         SL    R4,=F'48'
         L     R7,CVTPTR           CVT ADDRESS                     -EU-
         USING CVT,R7                                              -EU-
         L     R15,CVTQCDSR        CDE SEARCH RTN                  -EU-
         DROP  R7                                                  -EU-
         BASR  R14,R15             STD LINKAGE
*                                  (RETURNS AT +4 IF NAME NOT FOUND)
         LA    R0,0                INDICATE NAME WAS FOUND
         LTR   R0,R0
         BNZ   SCLPA3              BR IF NAME NOT FOUND
         TM    28(R11),X'04'       IS THIS A MINOR CDE?
         BZ    GETEXTL             NO, SKIP OBTAINING MAJOR CDE
         L     R11,20(,R11)        GET ADDR OF MAJOR CDE
GETEXTL  L     R14,20(,R11)        GET ADDR OF EXTENT LIST
         L     R7,12(,R14)         GET ADDR OF LOAD MOD
         ST    R7,XLMADDR          ADDRESS OF MODULE
         L     R7,XCSLEN
         LA    R7,0(,R7)
         LTR   R7,R7               IS CSECT LENGTH CURRENTLY 0?
         BNZ   SCLPA4              NO, SKIP
         MVC   XCSLEN+1(3),9(R14)  USE LOAD MODULE LENGTH
         B     SCLPA4
SCLPA3   SLR   R14,R14
         ST    R14,XLMADDR         INDICATE NO CDE FOUND
SCLPA4   L     R14,XLMADDR         SCAN LPA DIRECTORY (LPDE'S)
         LTR   R14,R14
         BNZ   SCLPA7              BRANCH IF MODULE ALREADY FOUND
         TM    XFLAGS,XFLOCSW
         BO    SCLPA7              BR IF LOCAL MODE (SKIP SEARCH)
         L     R14,CVTPTR          CVT ADDRESS                     -EU-
         USING CVT,R14                                             -EU-
         TM    CVTDCB,CVTMVS2      MVS BIT ON?                     -EU-
         BZ    SCLPA7
         SLR   R0,R0               SET
         BCTR  R0,0                 R0 NEGATIVE
         L     R1,CVTLPDIA         LPA DIRECTORY                   -EU-
         LA    R1,0(,R1)
         B     LOCATGO1            DO WHILE R0 NEGATIVE
         DROP  R14                                                 -EU-
LOCATLP1 CLC   8(8,R1),XEBLM
         BNE   SCLPA6
         TM    28(R1),X'04'        ALIAS?
         BZ    SCLPA5              NO
         MVC   XEBLM,32(R1)        YES, GET REAL NAME AND START OVER
         L     R14,CVTPTR          CVT ADDRESS                     -EU-
         USING CVT,R14                                             -EU-
         L     R1,CVTLPDIA         LPA DIRECTORY                   -EU-
         LA    R1,0(,R1)
         B     LOCATINC
         DROP  R14                                                 -EU-
SCLPA5   L     R0,36(,R1)          SET R0 TO MODULE ADDRESS
         L     R14,XCSLEN
         LA    R14,0(,R14)
         LTR   R14,R14             IS THERE A CSECT LENGTH YET?
         BNZ   LOCATINC            YES, BRANCH
         MVC   XCSLEN+1(3),33(R1)  USE LOAD MOD LEN AS CSECT LEN
         B     LOCATINC
SCLPA6   CLC   8(8,R1),=XL8'FFFFFFFFFFFFFFFF'  HAVE WE SEE ALL LPDE'S?
         BNE   LOCATINC            NO, BRANCH
         SLR   R0,R0               END OF DIRECTORY, SET R0 NON NEG
LOCATINC AL    R1,=F'40'           POINT AT NEXT LPDE
LOCATGO1 LTR   R0,R0
         BM    LOCATLP1
         ST    R0,XLMADDR          SAVE LOCATION OF MODULE
SCLPA7   L     R14,XLMADDR
         LTR   R14,R14             WAS END OF DIRECTORY HIT?
         BNZ   SCANLPAX            NO, BRANCH
         LA    R14,MSG04           MODULE NOT FOUND IN MAIN STORAGE
         ST    R14,XMSE
         BAS   R14,GENERR
SCANLPAX LM    R14,R12,@SAVE26
         BR    R14
         EJECT
*        ROUTINE TO CONTROL SCANNING OF A MODULE FOR A DESIRED LABEL
*
*        INPUT : XEBLM = LOAD MODULE TO SCAN
*                XEBLBL = CESD LABEL WHOSE OFFSET IS TO BE RETURNED
*                XEBCS = CSECT WHEREIN THE LABEL RESIDES
*                        (BLANK MEANS FIRST CSECT)
*        OUTPUT : XOFFSET = OFFSET IN LOAD MODULE TO LABEL
*                 XCSLEN = LENGTH OF SPECIFIED CSECT
         SPACE 1
SCANMOD  STM   R14,R12,@SAVE22
         BAS   R14,FIND            GO FIND MODULE ON LIBRARY
         TM    XFLAGS,XFEOD
         BO    SCMEXIT
         SLR   R14,R14
         BCTR  R14,0
         ST    R14,XOFFSET         SHOW LABEL REMAINS TO BE FOUND
         ST    R14,XSYMOFF         SHOW SYMBOL REMAINS TO BE FOUND
         SLR   R14,R14
         ST    R14,XCESDN
*                                  PERFORM SPECIAL PROCESSING FOR
*                                   THE NUCLEUS LOAD MODULE
         CLC   XEBLM(6),=CL6'IEANUC'
         BNE   SCNMD1
         BAS   R14,BIT31           GET INTO 31-BIT MODE
         CLC   XEBCS,=CL8'IEAVFX00'     IS THIS PSA CSECT?
         BNE   PASTCS0             NO, SKIP
         XR    R2,R2               CLEAR REGISTER
         ST    R2,XLMADDR          ADDR IS ZERO
         B     PASTLKU1            SKIP LOOKUP STUFF
PASTCS0  NUCLKUP BYNAME,NAME='IEAVBK00',ADDR=(R2) ADDR OF 1ST CSECT
         LA    R2,0(,R2)           CLEAR HI-ORDER BIT
         ST    R2,XLMADDR          SAVE AS ADDR OF LOAD MOD
PASTLKU1 NUCLKUP BYNAME,NAME=XEBLBL,ADDR=(R3)     GET ADDR OF LABEL
         LTR   R15,R15
         BNZ   LBLNTFND            BR IF LABEL NOT FOUND
         LA    R3,0(,R3)           CLEAR HI-ORDER BIT
         SLR   R3,R2               GET OFFSET INTO NUC LOAD MOD
         ST    R3,XOFFSET          SAVE THIS OFFSET
         NUCLKUP BYNAME,NAME=XEBCS,ADDR=(R3) GET LENGTH OF CSECT
         LTR   R15,R15
         BNZ   LBLNTFND            BR IF LABEL NOT FOUND
         ST    R1,XCSLEN           SAVE CSECT LENGTH
         BAS   R14,BIT24           GET BACK TO 24-BIT MODE
         B     SCMEXIT             EXIT THIS ROUTINE
SCNMD1   NI    XFLAGS,255-XFSKIP1
SCNMD2   SLR   R14,R14             CLEAR THE CSECT DESCRIPTOR ARRAY
         ST    R14,XSDCNT
         LA    R14,1
         ST    R14,@ESDSUB
SCNMD3   LR    R11,R14
         MH    R11,=Y(XSD@L)                                       -EU-
         LA    R7,XSDNO(R11)
         XC    0(XSD@L,R7),0(R7)                                   -EU-
         AL    R14,ONE
         ST    R14,@ESDSUB
         C     R14,=F'400'
         BNH   SCNMD3
         SLR   R14,R14             READ AND PROCESS CESD RECORDS
         ST    R14,XCRSW           CLEAR LOOP SWITCH
         B     SCNMD10
SCNMD4   BAS   R14,READLIB
         CLI   XLREC,C' '          SYM RECORD?
         BNE   SCNMD5              NO, BRANCH
         BAS   R14,SYMCHK          GO PROCESS SYM RECORD
SCNMD5   CLI   XLREC,X'20'         CESD RECORD?
         BE    SCNMD6              YES, BRANCH
         LA    R14,1
         ST    R14,XCRSW
         B     SCNMD10
*                                  SCAN CESD ENTRIES ON CESD RECORD
SCNMD6   LH    R2,XLREC+6          GET LENGTH OF ESD DATA
         SRDA  R2,32
         D     R2,=F'16'           GET NUMBER OF ENTRIES
         ST    R3,XNUMCESD
         LA    R14,1               START WITH ENTRY NUMBER 1
         B     ESDGO
SCNMD7   LA    R14,1
         AL    R14,XCESDN
         ST    R14,XCESDN
         TM    XFLAGS,XFSKIP1
         BZ    SCNMD8
         NI    XFLAGS,255-XFSKIP1
         B     ESDINCR
SCNMD8   L     R14,@ESDSUB
         SLA   R14,4               MULTIPLY BY 16
         LA    R11,XLREC(R14)      ACTUALLY XLREC+16-16
         TM    0(R11),X'0F'        IS IT AN SD?
         BZ    GOTSD               YES, BRANCH
         LA    R11,XLREC(R14)
         TM    0(R11),X'03'        COULD IT BE AN LR?
         BNO   ESDINCR             NO, BRANCH
         TM    0(R11),X'0C'        MAY BE, IS IT AN LR?
         BNZ   ESDINCR             NO, BRANCH
GOTSD    L     R14,@ESDSUB
         ST    R14,XCESDX          SET INDEX TO CESD ENTRY
         BAS   R14,SECTMAP         USE THIS CESD TO MAP LOAD MODULE
         L     R14,@ESDSUB
         SLA   R14,4
         LA    R11,XLREC-8(R14)    ACTUALLY BUFFER+8-16
         CLC   0(8,R11),XEBLBL     IS THIS THE RIGHT LABEL?
         BNE   SCNMD9              NO, BRANCH
         L     R14,XLREC(R14)      ACTUALLY BUFFER+16-16
         LA    R14,0(,R14)         ZERO HI ORDER BYTE OF ADDRESS
         ST    R14,XOFFSET         SAVE CSECT ADDRESS
SCNMD9   L     R14,@ESDSUB
         SLA   R14,4
         LA    R11,XLREC(R14)      ACTUALLY BUFFER+8-16
         TM    0(R11),X'0F'        IS THIS AN SD?
         BNZ   ESDINCR             NO, BRANCH
         LA    R11,XLREC-8(R14)
         CLC   0(8,R11),XEBCS      IS THIS THE REQUESTED CSECT?
         BNE   ESDINCR             NO, BRANCH
         L     R14,XLREC(R14)      ACTUALLY BUFFER+16-16
         LA    R14,0(,R14)         ZERO HI ORDER BYTE OF ADDRESS
         ST    R14,XCSDADR         SAVE CSECT ADDRESS
         L     R14,XSDX
         ST    R14,XCSECNO
ESDINCR  LA    R14,1               ADD 1 TO
         AL    R14,@ESDSUB          ESD SUBSCRIPT
ESDGO    ST    R14,@ESDSUB
         C     R14,XNUMCESD        HAS SUBSCRIPT HIT SIZE YET?
         BNH   SCNMD7              NO, BRANCH
SCNMD10  SLR   R14,R14             CHECK FOR SUCCESSFUL SCAN
         C     R14,XCRSW
         BE    SCNMD4
         CLC   XEBCS,BLANKS
         BNE   SCNMD11             IF NO CSECT SPECIFIED
         MVC   XCSECNO,ONE         USE THE FIRST CSECT
         ST    R14,XCSDADR          AND RELATIVE ADDRESS IS 0
SCNMD11  L     R14,XSYMOFF
         LTR   R14,R14             WAS LABEL FOUND IN A SYM REC?
         BM    SCNMD12             NO, BR
         AL    R14,XCSDADR         GET POSITION WITHIN LOAD MOD
         ST    R14,XOFFSET         STORE SYM OFFSET + CSECT ADDR
SCNMD12  SLR   R14,R14
         C     R14,XSDCNT          WAS AT LEAST ONE CSECT FOUND?
         BNL   LBLNTFND            BR IF NO
         L     R11,XCSECNO
         CR    R11,R14             WAS OWNING CSECT FOUND?
         BNH   LBLNTFND            BR IF NO
         C     R14,XOFFSET         WAS DESIRED LABEL FOUND?
         BH    LBLNTFND            BR IF NO
         MH    R11,=Y(XSD@L)                                       -EU-
         LA    R7,XSDLEN(R11)
         MVC   XCSLEN+1(3),0(R7)   MOVE IN CSECT LENGTH
         SPACE 1
*        SCATTER LOAD PROCESSING FOR NUCLEUS
*
*              GO THROUGH TABLE ADDING UP LENGTH OF EACH CSECT
*              (ROUNDED UP TO NEAREST DOUBLE WORD) PREVIOUS
*              TO DESIRED CSECT.
         SPACE 1
         CLC   XEBLM(6),=CL6'IEANUC'
         BNE   SCNMD15
         ST    R14,XACCUM          CLEAR ACCUMULATED LENGTH
         LA    R14,1               SET CSECT COUNTER
         B     SCNMD14             GO DO LOOP TEST
SCNMD13  L     R11,XACCUM          GET ACCUMULATED LENGTH
         ST    R11,XSMCSD          SAVE IT
         LR    R7,R14              GET CSECT NUMBER
         MH    R7,=Y(XSD@L)        GET OFFSET INTO TABLE           -EU-
         XR    R4,R4               CLEAR REG.
         LA    R7,XSDLEN(R7)       POINT AT CSECT LENGTH
         ICM   R4,B'0111',0(R7)    LOAD CSECT LENGTH
         LA    R4,7(,R4)           ADD IN ROUNDUP VALUE
         N     R4,=F'-8'           GET DBL WORD ROUNDED UP VALUE
         ST    R4,XWORK
         ALR   R11,R4              ADD TO ACCUMULATED VALUE
         ST    R11,XACCUM
         AL    R14,ONE             INCREMENT CSECT COUNTER
SCNMD14  ST    R14,@ESDSUB
         C     R14,XCSECNO         ALL PREV CSECTS PROCESSED?
         BNH   SCNMD13             NO, BRANCH
         B     SCNMD16
SCNMD15  L     R14,XCSDADR         NON-SCATTER-LOAD PROCESSING
         ST    R14,XSMCSD          DISK ADDR IS SAME AS IN-CORE
SCNMD16  L     R14,XOFFSET
         SL    R14,XCSDADR         GET OFFSET WITHIN CSECT
         ST    R14,XOFFSET
         AL    R14,XSMCSD          GET OFFSET WITHIN LOAD MOD
         ST    R14,XOFFSET
         B     SCMEXIT
LBLNTFND LA    R14,MSG09           SYMBOL NOT FOUND IN LOAD MODULE -EU-
         ST    R14,XMSE
         BAS   R14,BIT24           BE SURE WE ARE IN 24 BIT MODE   -EU-
         BAS   R14,GENERR
SCMEXIT  LM    R14,R12,@SAVE22
         BR    R14
         EJECT
*        CSECT MAPPING ROUTINE
*
*        INPUT : XCESDX = INDEX INTO ARRAY OF CESD ENTRIES IN A
*                         CESD REC
*                XCESDN = CESD NO. OF CURRENT CESD ENTRY
*                CESD = A CESD RECORD
*                XEBLM = LOAD MODULE NAME
*        OUTPUT : XSDNO = ARRAY OF CESD NO.S FRO CSECTS (SD'S) IN
*                         LD MOD
*                 XSDLEN = ARRAY OF CSECT LENGTHS
*                 XSDCNT = COUNT OF CSECTS IN LOAD MODULE (THUS FAR)
*                 XSDX = FOR A SD ENTRY, THE RELATIVE CSECT NUMBER
*                        WITHIN THE IN-CORE VERSION OF THE LOAD MODULE
         SPACE 1
SECTMAP  STM   R14,R12,12(R13)
         L     R14,XCESDX          GET ESD SUBSCRIPT
         SLA   R14,4               MULTIPLY BY 16
         LA    R11,XLREC(R14)      POINT TO ESD ENTRY + 8
         TM    0(R11),X'03'        IS IT AN LR?
         BNO   SCTMP4              NO, BRANCH
         TM    0(R11),X'0C'        IS IT AN LR?
         BNZ   SCTMP4              NO, BRANCH
         SPACE 1
*        IF CESD ENTRY IS A LABEL REFERENCE (ENTRY POINT) CHECK FOR
*        SCATTER LOADING (IE. NUCLEUS). SINCE THE SCATTER-LOADED
*        NUCLEUS IS LOADED AS CESD ENTRIES (SD'S OR LR'S) OCCUR IN THE
*        CESD RECORDS, ADD THE CESD NUMBER OF THE LABEL'S CSECT TO
*        THE SD (CSECT) ARRAY
         SPACE 1
         CLC   XEBLM(6),=CL6'IEANUC'    IS THIS A NUCLEUS ZAP?
         BNE   SCTMP4              NO, BRANCH
         MVC   XSDX,ONE
         B     SCTMP3
SCTMP1   L     R14,XSDX
         L     R11,XSDCNT
         CR    R14,R11
         BNH   SCTMP2
         AL    R11,ONE
         ST    R11,XSDCNT
         MH    R14,=Y(XSD@L)                                       -EU-
         L     R11,XCESDX
         SLA   R11,4
         LH    R11,XLREC+6(R11)
         N     R11,MASKFFFF
         LA    R7,XSDNO(R14)
         STCM  R11,B'0011',0(R7)
         B     SCTMP3
SCTMP2   LA    R14,1
         AL    R14,XSDX
         ST    R14,XSDX
SCTMP3   L     R14,XSDX
         MH    R14,=Y(XSD@L)                                       -EU-
         L     R11,XCESDX
         SLA   R11,4
         LH    R11,XLREC+6(R11)
         N     R11,MASKFFFF
         LA    R7,XSDNO(R14)
         ICM   R14,B'1100',0(R7)
         SRA   R14,16
         CR    R11,R14
         BNE   SCTMP1
         SPACE 1
*        IF CESD ENTRY IS A SECTION DEFINITION (SD OR CSECT), ADD THE
*        CESD NO. FOR THE CSECT TO THE ARRAY. IF LOAD MOD IS THE
*        NUCLEUS CHECK FIRST THAT AN ENTRY MIGHT ALREADY BE IN THE
*        ARRAY FOR THIS CESD NO. FROM AN EARLIER 'LR' ENTRY. ONCE THE
*        PROPER CESD ENTRY HAS BEEN FOUND OR ADDED TO THE ARRAY, PUT
*        IN THE LENGTH OF THIS CSECT.
         SPACE 1
SCTMP4   L     R14,XCESDX          GET ESD SUBSCRIPT
         SLA   R14,4               MULTIPLY BY 16
         LA    R11,XLREC(R14)      POINT TO ESD ENTRY + 8
         TM    0(R11),X'0F'        IS IT AN SD?
         BNZ   SCTMP10             NO, BRANCH
         CLC   XEBLM(6),=CL6'IEANUC'    IS THIS A NUCLEUS ZAP?
         BNE   SCTMP8              NO, BRANCH
         MVC   XSDX,ONE
         B     SCTMP7
SCTMP5   L     R14,XSDX
         L     R11,XSDCNT
         CR    R14,R11
         BNH   SCTMP6
         AL    R11,ONE
         ST    R11,XSDCNT
         MH    R14,=Y(XSD@L)                                       -EU-
         L     R11,XCESDN
         LA    R7,XSDNO(R14)
         STCM  R11,B'0011',0(R7)
         B     SCTMP7
SCTMP6   LA    R14,1
         AL    R14,XSDX
         ST    R14,XSDX
SCTMP7   L     R14,XSDX
         MH    R14,=Y(XSD@L)                                       -EU-
         LA    R11,XSDNO(R14)
         ICM   R14,B'1100',0(R11)
         SRA   R14,16
         C     R14,XCESDN
         BNE   SCTMP5
         B     SCTMP9
SCTMP8   LA    R14,1
         AL    R14,XSDCNT
         ST    R14,XSDCNT
         ST    R14,XSDX
         MH    R14,=Y(XSD@L)                                       -EU-
         L     R11,XCESDN
         LA    R7,XSDNO(R14)
         STCM  R11,B'0011',0(R7)
SCTMP9   L     R14,XSDX
         MH    R14,=Y(XSD@L)                                       -EU-
         L     R11,XCESDX          GET SUBSCRIPT
         SLA   R11,4               MULTIPLY BY 16
         LA    R7,XSDLEN(R14)
         LA    R14,XLREC+4+1(R11)
         MVC   0(3,R7),0(R14)
SCTMP10  LM    R14,R12,12(R13)
         BR    R14
         EJECT
*        SYM REC PROCESSING ROUTINE
*
*        INPUT : XEBCS = CSECT CONTAINING LABEL
*                XEBLBL = LABEL BEING SEARCHED FOR
*                XLREC = FIRST SYMREC
*        OUTPUT : XSYMOFF = OFFSET OF LABEL IN CSECT
*                 XLREC = NEXT LIBRARY RECORD AFTER ALL SYMREC'S
         SPACE 1
SYMCHK   STM   R14,R12,@SAVE27
         SLR   R14,R14
         ST    R14,XSYMTOTX
         LA    R14,XLREC+4
         ST    R14,XSYMCPT
         OI    @SWB,XFSYMSKP
         OI    XFLAGS,XFSYMGO
         BAS   R14,SYMNEW
         B     SYMCHK12
SYMCHK1  LA    R14,@WAY08
         B     SYMCHK3
SYMCHK2  BAS   R14,SYMFETCH
         LA    R14,1
         AL    R14,XSYMFAD
SYMCHK3  ST    R14,XSYMFAD
         LA    R11,@WAY08
         SL    R11,=F'-3'
         CR    R14,R11
         BNH   SYMCHK2
         TM    XFLAGS,XFSYMGO
         BZ    SYMCHK12
         TM    @WAY08,X'88'
         BO    SYMCHK9
         MVC   @WAY08A(8),BLANKS
         LA    R14,@WAY08A
         B     SYMCHK5
SYMCHK4  BAS   R14,SYMFETCH
         LA    R14,1
         AL    R14,XSYMFAD
SYMCHK5  ST    R14,XSYMFAD
         LA    R11,@WAY08A
         LA    R7,7
         SLR   R4,R4
         IC    R4,@WAY08
         NR    R7,R4
         ALR   R11,R7
         CR    R14,R11
         BNH   SYMCHK4
         TM    @SWB,XFSYMSKP
         BZ    SYMCHK7
         TM    @WAY08,X'80'
         BO    SYMCHK9
         TM    @WAY08,X'10'
         BZ    SYMCHK9
         TM    @WAY08,X'60'
         BNZ   SYMCHK9
         CLC   @WAY08A(8),XEBCS
         BE    SYMCHK6
         CLC   XEBCS,BLANKS
         BNE   SYMCHK9
SYMCHK6  NI    @SWB,255-XFSYMSKP
         B     SYMCHK9
SYMCHK7  TM    @WAY08,X'80'
         BO    SYMCHK8
         TM    @WAY08,X'10'
         BZ    SYMCHK8
         TM    @WAY08,X'60'
         BNZ   SYMCHK8
         CLC   XEBCS,BLANKS
         BE    SYMCHK9
         OI    @SWB,XFSYMSKP
         B     SYMCHK9
SYMCHK8  CLC   @WAY08A(8),XEBLBL
         BNE   SYMCHK9
         SLR   R14,R14
         ICM   R14,B'0111',@WAY08Z
         ST    R14,XSYMOFF
SYMCHK9  TM    @WAY08,X'80'
         BZ    SYMCHK12
         LA    R14,@WAY08B
         ST    R14,XSYMFAD
         BAS   R14,SYMFETCH
         LA    R14,@WAY08C
         ST    R14,XSYMFAD
         BAS   R14,SYMFETCH
         CLI   @WAY08B,X'10'
         BNL   SYMCHK10
         BAS   R14,SYMFETCH
SYMCHK10 TM    @WAY08,X'40'
         BZ    SYMCHK11
         BAS   R14,SYMFETCH
         BAS   R14,SYMFETCH
         BAS   R14,SYMFETCH
SYMCHK11 TM    @WAY08,X'10'
         BZ    SYMCHK12
         BAS   R14,SYMFETCH
         BAS   R14,SYMFETCH
SYMCHK12 TM    XFLAGS,XFSYMGO
         BO    SYMCHK1
         LM    R14,R12,@SAVE27
         BR    R14
         EJECT
*        CHARACTER FETCHING ROUTINE FOR SYMREC PROCESSING
*
*        INPUT : XSYMFAD = ADDR OF BYTE TO RECEIVE FETCHED CHARACTER.
*        OUTPUT : XSYMFAD -> BYTE = FETCHED CHARACTER
*                 XSYMFGO = ON IF DATA IS EXHAUSTED
         SPACE 1
SYMFETCH STM   R14,R12,@SAVE29
         L     R14,XSYMRECX
         L     R11,XSYMCPT
         ICM   R11,B'1100',10(R11)
         SRA   R11,16
         CR    R14,R11
         BL    SYMFTCH1
         BAS   R14,SYMNEW
SYMFTCH1 TM    XFLAGS,XFSYMGO
         BZ    SYMFTCH2
         L     R14,XSYMFAD
         L     R11,XSYMFPT
         MVC   0(1,R14),0(R11)
         LA    R14,1
         L     R7,XSYMRECX
         ALR   R7,R14
         ST    R7,XSYMRECX
         ALR   R11,R14
         ST    R11,XSYMFPT
SYMFTCH2 LM    R14,R12,@SAVE29
         BR    R14
         EJECT
*        ROUTINE TO GET A NEW SYMREC LOGICAL RECORD
         SPACE 1
SYMNEW   STM   R14,R12,@SAVE28
         SLR   R14,R14
         ST    R14,XSYMRECX
         ST    R14,XSYMFPT         SET PNTR = 0
         B     SYMNEW5             DO WHILE PNTR = 0 AND XFSYMGO ON
SYMNEW1  L     R14,XSYMTOTX
         CH    R14,XLREC+2
         BL    SYMNEW3
         SLR   R14,R14
         ST    R14,XSYMTOTX
         BAS   R14,READLIB
         CLI   XLREC,C' '          SYM?
         BNE   SYMNEW2             NO, BRANCH
         LA    R14,XLREC+4
         ST    R14,XSYMCPT
         B     SYMNEW3
SYMNEW2  NI    XFLAGS,255-XFSYMGO  SET XFSYMGO OFF
SYMNEW3  L     R14,XSYMTOTX
         LTR   R14,R14
         BZ    SYMNEW4
         LA    R14,80
         AL    R14,XSYMCPT
         ST    R14,XSYMCPT
SYMNEW4  LA    R14,80
         AL    R14,XSYMTOTX
         ST    R14,XSYMTOTX
         L     R14,XSYMCPT
         CLC   1(3,R14),=CL3'SYM'
         BNE   SYMNEW5
         L     R11,XSYMOFF
         LTR   R11,R11
         BNM   SYMNEW5
         LA    R14,16(,R14)
         ST    R14,XSYMFPT
SYMNEW5  L     R14,XSYMFPT
         LTR   R14,R14
         BNZ   SYMNEW6
         TM    XFLAGS,XFSYMGO
         BO    SYMNEW1
SYMNEW6  LM    R14,R12,@SAVE28
         BR    R14
         EJECT
*        SYNTAX ERROR MESSAGE ROUTINE
         SPACE 1
SYNERR   STM   R14,R12,@SAVE20
         MVI   @LINE02,C' '
         MVC   @LINE03(118),@LINE02
         MVI   @LINE01,C' '
         MVC   @LINE01(15),SYNTAX
         L     R14,XMSE
         XR    R11,R11                                             -EU-
         IC    R11,0(,R14)                                         -EU-
         EX    R11,PUTM8MV         MOVE 1(R14) TO LINE+16          -EU-
         BAS   R14,PUTLINE
         MVC   XCODE,=F'8'
         OI    XFLAGS,XFEOD        SET XFEOD
         LM    R14,R12,@SAVE20
         BR    R14
         SPACE 2
*        ROUTINE TO GAIN SUPERVISOR STATE, KEY ZERO
         SPACE 1
MODESET1 STM   R14,R12,@SAVE17
         MODESET KEY=ZERO,MODE=SUP
         LM    R14,R12,@SAVE17
         BR    R14
         SPACE 2
*        ROUTINE TO RETURN TO PROBLEM STATE AND KEY
         SPACE 1
MODESET2 STM   R14,R12,@SAVE18
         MODESET KEY=NZERO,MODE=PROB
         LM    R14,R12,@SAVE18
         BR    R14
         EJECT
*        VERB SCANNING AND ROUTING ROUTINE
         SPACE 1
VERBSCN  STM   R14,R12,@SAVE12
         LA    R14,XEBV
         ST    R14,XRCVADDR
         MVC   XRCVLEN,=F'8'
         BAS   R14,GETFLD
         SLR   R14,R14
         ST    R14,XVXSW           SET SW OFF
         LA    R14,1
         ST    R14,XVX             SET SUBSCRIPT TO 1
         L     R8,=A(OPCODES)      ADDRESS OF VERB TABLE           -EU-
         L     R9,=A(OPENTRY)      ADDRESS OF VERB ROUTINES TABLE  -EU-
PROCLOOP L     R11,XVXSW
         LTR   R11,R11             HAS SW BEEN SET ON?
         BNZ   PROCDONE            YES, JUMP OUT
         BCTR  R14,0                                               -EU-
         LR    R11,R14
         MH    R11,=Y(L'OPCODES)                                   -EU-
         LA    R7,0(R8,R11)        GET ADDRESS OF VERB TABLE ENTRY -EU-
         CLC   XEBV(3),0(R7)       IS THIS THE RIGHT VERB?
         BNE   PROCINCR            NO, GO INCREMENT TO NEXT ONE
         SLA   R14,2
         L     R15,0(R9,R14)       GET VERB ROUTINE ADDRESS        -EU-
         BASR  R14,R15             CALL THE ROUTINE FOR THIS OPERATION
         TM    XFLAGS,XFEOD        EXIT REQUESTED?                 -EU-
         BO    VERBSCNX            YES                             -EU-
         LA    R14,1
         ST    R14,XVXSW           SET SW ON
PROCINCR LA    R14,1
         AL    R14,XVX
         ST    R14,XVX
         CH    R14,=Y(OPNUM)       HAVE ALL VERBS BEEN CHECKED?    -EU-
         BNH   PROCLOOP            NO, KEEP CHECKING
PROCDONE L     R14,XVXSW           WAS SW EVER SET ON
         LTR   R14,R14             YES, BRANCH
         BNZ   VERBSCNX
         LA    R14,MSG10           OPERATION REQUESTED IS INVALID
         ST    R14,XMSE
         BAS   R14,SYNERR          SYNTAX
VERBSCNX LM    R14,R12,@SAVE12
         BR    R14
         EJECT
*        ROUTINE TO HANDLE COMMENT STATEMENTS
         SPACE 1
COMMENT  BR    R14
         SPACE 2
*        CONSOLE VERB ROUTINE
         SPACE 1
CON      STM   R14,R12,@SAVE31                                     -EU-
         TM    @SWB,CONACC         MAY BE ACCEPTED?                -EU-
         BO    CONALL              YES                             -EU-
         LA    R14,MSG14           NO, NOT ALLOWED                 -EU-
         ST    R14,XMSE                                            -EU-
         BAS   R14,GENERR                                          -EU-
         B     CONEX                                               -EU-
CONALL   OI    XFLAGS,XFCON                                        -EU-
CONEX    L     R14,XENDREC                                         -EU-
         ST    R14,XCSER
         L     R14,XPENDREC
         ST    R14,XCSPER
         ST    R14,XENDREC
         LM    R14,R12,@SAVE31                                     -EU-
         BR    R14
         SPACE 2
*        END VERB ROUTINE
         SPACE 1
END      STM   R14,R12,@SAVE32                                     -EU-
         NI    XFLAGS,255-XFCON
         L     R14,XCSER
         ST    R14,XENDREC
         L     R14,XCSPER
         ST    R14,XPENDREC
         LM    R14,R12,@SAVE32                                     -EU-
         BR    R14
         EJECT
*        DUMP VERB ROUTINE
         SPACE 1
DUM      STM   R14,R12,@SAVE05
         BAS   R14,NAM
         BAS   R14,DUMP
         LM    R14,R12,@SAVE05
         BR    R14
         SPACE 2
*        GLOBAL VERB ROUTINE
         SPACE 1
GLO      NI    XFLAGS,255-XFLOCSW
         BR    R14
         SPACE 2
*        LOCAL VERB ROUTINE
         SPACE 1
LOC      OI    XFLAGS,XFLOCSW
         BR    R14
         EJECT
*        NAME VERB ROUTINE
         SPACE 1
NAM      STM   R14,R12,@SAVE04
         NI    XFLAGS,255-XFNOGO
         SLR   R14,R14
         STCM  R14,B'0111',XCSLEN+1
         ST    R14,XBASE           GET OPERANDS
         MVC   XRCVLEN,=F'8'
         LA    R14,XEBLM           PUT ADDRESS OF MEMBER
         ST    R14,XRCVADDR        IN GETFLD RESULT POINTER
         B     NAMGO1              DO UNTIL POINTER GT MEMBER+8
NAMLP1   BAS   R14,GETFLD          CALL GETFLD TO GET NEXT OPERAND
         LA    R14,8               ADD 8
         AL    R14,XRCVADDR         TO
         ST    R14,XRCVADDR          GETFLD RESULT ADDRESS
NAMGO1   LA    R11,XEBCS           IF R14 GT MEMBER+8
         CR    R14,R11              THEN
         BNH   NAMLP1                EXIT DO LOOP
*                                  CHECK FOR A GLOBAL MODULE IN
         TM    XFLAGS,XFLOCSW       LOCAL MODE?
         BZ    NAMOK1              NO, BRANCH
         CLC   XEBLM(6),=CL6'IEANUC'    YES, DOES NAME LOOK GLOBAL
         BE    NAMWARN             YES, ISSUE WARNING
         CLC   XEBLM(5),=CL5'IGC00'     DOES NAME LOOK GLOBAL?
         BNE   NAMOK1              NO, BRANCH
NAMWARN  MVI   @LINE58,C' '        ISSUE WARNING
         MVC   @LINE59(62),@LINE58
         MVC   @LINE01(57),WARNMSG
         BAS   R14,PUTLINE
         SPACE 1
*        IF A CSECT WAS SPECIFIED, GET THE OFFSET TO THIS
*        CSECT FROM THE BEGINNING OF THE LOAD MODULE
         SPACE 1
NAMOK1   TM    XFLAGS,XFEOD
         BO    NAMOK3
         CLC   XEBCS,BLANKS
         BNE   NAMOK2
         SLR   R14,R14             CSECT OMITTED
         ST    R14,XCSOFF          OFFSET ZERO INTO MODULE
         B     NAMOK3
NAMOK2   MVC   XEBLBL(8),XEBCS     MAKE CSECT THE LABEL TO LOOKUP
         BAS   R14,SCANMOD         GO SCAN MODULE FOR THIS LABEL
         L     R14,XOFFSET
         ST    R14,XCSOFF          OFFSET INTO MODULE
NAMOK3   TM    XFLAGS,XFEOD        GET IN-CORE ADDRESS OF LOAD MODULE
         BO    NAMEX
         TM    XFLAGS,XFLOCSW
         BZ    NAMOK4              BR IF NOT LOCAL MODE
         LOAD  EPLOC=XEBLM,DCB=XDCBL    LOAD A COPY FOR LOCAL MODE -EU-
         BAS   R14,SCANLPA         GO FIND LOADED MODULE IN JPA
         B     NAMEEOD
NAMOK4   CLC   XEBLM(6),=CL6'IEANUC'
         BNE   NAMSCNL
         CLC   XEBCS,BLANKS        NUCLEUS, IS CSECT SPECIFIED ?
         BNE   PASTNCSE            YES, BRANCH
         LA    R14,MSG05           NO, CSECT REQUIRED WITH NUCLEUS
         ST    R14,XMSE
         BAS   R14,GENERR
         B     NAMEX               EXIT
PASTNCSE L     R14,CVTPTR          CVT ADDRESS                     -EU-
         USING CVT,R14                                             -EU-
         TM    CVTDCB,CVTMVSE      IS THIS MVS/XA?                 -EU-
         DROP  R14                                                 -EU-
         BO    NAMEEOD             YES, SKIP LM ADDR (SET BY SCANMOD)
         SLR   R14,R14
         ST    R14,XLMADDR         NUCLEUS LOCATION IS ZERO
         B     NAMEEOD
NAMSCNL  BAS   R14,SCANLPA
NAMEEOD  TM    XFLAGS,XFEOD
         BO    NAMEX
         L     R14,XLMADDR
         AL    R14,XCSOFF
         ST    R14,XCSADDR         ADDRESS OF CSECT
         ST    R14,XLOC
         BAS   R14,PRADDR
NAMEX    LM    R14,R12,@SAVE04
         BR    R14
         EJECT
*        RETURN CODE ROUTINE
         SPACE 1
RC       STM   R14,R12,@SAVE06
         MVI   @LINE17,C' '
         MVC   @LINE18(103),@LINE17
         MVC   @LINE01(16),EQRC    = RETURN CODE
         LA    R14,XCODE
         AL    R14,=F'3'
         ST    R14,XHEX
         LA    R14,@LINE01
         ST    R14,XEBAD
         MVC   XHEXL,ONE
         BAS   R14,HEXCV
         BAS   R14,PUTLINE
         LM    R14,R12,@SAVE06
         BR    R14
         EJECT
*        REP OR RES OR RESET
         SPACE 1
REP      STM   R14,R12,@SAVE03
         CLC   XEBV,=CL8'RESET'    IS IT RESET?
         BNE   REPIN               NO, BRANCH IF REP OR RES
         NI    XFLAGS,255-XFNOGO   RESET, JUST SET XFNOGO OFF
         B     REPX
REPIN    TM    XFLAGS,XFNOGO       IS XFNOGO SWITCH ON?
         BZ    REPGO               NO, BRANCH
         MVI   @LINE37,C' '
         MVC   @LINE38(83),@LINE37
         MVC   @LINE01(36),IGNORED
         BAS   R14,PUTLINE
         B     REPX
REPGO    BAS   R14,GETOFF
         BAS   R14,GETHEX
         TM    XFLAGS,XFEOD
         BO    REPX
         CLC   XEBV,=CL8'REP'      IS THIS A REP?
         BNE   RESTOREX            NO, GO DO RESTORE PROCESSING
         BAS   R14,FIXER           FIX PAGE IF REP
         BAS   R14,MODIFY          GO MODIFY STORAGE
         B     REPX                SKIP RESTORE PROCESSING
RESTOREX BAS   R14,MODIFY          GO MODIFY STORAGE
         BAS   R14,FIXER           GO UNFIX STORAGE
REPX     LM    R14,R12,@SAVE03
         BR    R14
         EJECT
*        VERIFY ROUTINE
         SPACE 1
VER      STM   R14,R12,@SAVE02
         BAS   R14,GETOFF          GO GET VALUE OF OFFSET
         BAS   R14,GETHEX          GO GET HEX STRING
         TM    XFLAGS,XFEOD
         BO    VERX
         BAS   R14,BIT31           GET INTO 31-BIT MODE
         L     R14,XHL
         BCTR  R14,0
         L     R11,XZADDR
         EX    R14,VERCLC          VERIFY THE DATA
         BNE   VERNO               BRANCH NOT VERIFIED             -EU-
         BAS   R14,BIT24           INSURE BACK TO 24-BIT MODE
         B     VERX                EXIT IF IT VERIFIES OK          -EU-
VERNO    OI    XFLAGS,XFNOGO       SET XFNOGO SWITCH               -EU-
         MVC   XCODE,=F'4'
         MVI   @LINE33,C' '
         MVC   @LINE34(87),@LINE33
         MVC   @LINE01(32),REJECT
         BAS   R14,BIT24           GET BACK TO 24-BIT MODE
         BAS   R14,PUTLINE         ISSUE REJECT MESSAGE
         BAS   R14,DUMP            DUMP THE MODULE
VERX     LM    R14,R12,@SAVE02                                     -EU-
         BR    R14
         EJECT
*        ZERO (AND PGFIX) STORAGE ROUTINE
         SPACE 1
ZAP      STM   R14,R12,@SAVE07
         BAS   R14,VER
         TM    XFLAGS,XFEOD+XFNOGO
         BNZ   ZAPX
         BAS   R14,FIXER           FIX PAGE IF LPA
         L     R14,XHL
         BCTR  R14,0               LENGTH MINUS 1 FOR EX
         EX    R14,ZAPXC           MAKE REP DATA ALL ZEROS
         BAS   R14,MODIFY
ZAPX     LM    R14,R12,@SAVE07
         BR    R14
         SPACE 2
*        ROUTINE TO OBTAIN 24-BIT ADDRESSING MODE
         SPACE 1
BIT24    LA    R14,0(,R14)         CLEAR HI-ORDER PORTION          -EU-
         BSM   0,R14               RETURN IN 24-BIT MODE           -EU-
         SPACE 2
*        ROUTINE TO OBTAIN 31-BIT ADDRESSING MODE
         SPACE 1
BIT31    LA    R14,0(,R14)         CLEAR OUT BAL STUFF, ETC...     -EU
         O     R14,HIORDBIT        TURN ON AMODE-31 BIT            -EU-
         BSM   0,R14               RETURN IN 31-BIT MODE
         EJECT
*        ROUTINE TO MODIFY STORAGE
*
*        INPUT : XHS = HEX STRING
*                XHL = LENGTH OF HEX STRING
*                XZADDR = ADDRESS OF CORE TO BE OVERLAYED
         SPACE 1
MODIFY   STM   R14,R12,@SAVE30
         MVI   @LINE14,C' '
         MVC   @LINE15(106),@LINE14
         MVC   @LINE01(13),OLDWAS
         L     R14,XHL             LENGTH OF DATA TO BE MODIFIED
         ST    R14,XHEXL
         L     R14,XZADDR          ADDRESS OF DATA TO BE MODIFIED
         ST    R14,XHEX
         LA    R14,@LINE01
         AL    R14,=F'13'
         ST    R14,XEBAD           PUT HEX DUMP AT LINE+1+13
         BAS   R14,HEXCV           CONVERT OLD DATA TO HEX
         BAS   R14,PUTLINE         DISPLAY OLD DATA
         BAS   R14,MODESET1        SUPV STATE KEY ZERO
         BAS   R14,BIT31           GET 31-BIT MODE
         L     R14,XZADDR          GET ADDRESS TO BE MODIFIED
         L     R11,XHL             GET LENGTH OF DATA
         B     MODLPTST            GO DO LOOP TEST
MODLOOP  LA    R8,0(R11,R14)       POINT AT BYTE TO MOVE
         USING PSA,R0                                              -EU-
         L     R2,PSAAOLD          GET ADDR OF CURRENT ASCB
         DROP  R0                                                  -EU-
         N     R8,MASKPAGE         GET LOWER PAGE BOUNDARY
         STCTL 1,1,I               GET SET TABLE ORIGIN
         L     R2,I                GET CONTENTS OF STO REG
*                                  TURN OFF PAGE PROTECTION FOR XA
         XR    R9,R9               CLEAR SECOND REG OF PAIR
         SRDL  R8,20               ISOLATE SX & PUT PX IN R9
         SLL   R8,2                GET SEG TBL OFFSET (SX*4)
         N     R2,MASKSTOX         ISOLATE ADDR OF SEG TABLE
         BAS   R15,REAL2VIR        GET VIRTUAL ADDR
         ALR   R2,R8               GET ADDR OF SEG TBL ENTRY
         SRL   R9,22               GET PAGE TABLE OFFSET (PX*2)
         L     R2,0(,R2)           GET CONTENT OF SEG TBL ENTRY
         N     R2,MASKSTE          ISOLATE ADDR OF PAGE TBL ORIGIN
         BAS   R15,REAL2VIR        GET VIRTUAL ADDR
         ALR   R9,R2               GET ADDR OF PAGE TBL ENTRY
         L     R8,0(,R9)           GET CONTENTS OF PAGE TABLE ENTRY
         N     R8,MASKPPBT         ISOLATE PAGE PROT BIT
         BZ    MODIT               BR IF NO PAGE PROT
         SRL   R8,8                SHIFT BYTE TO LO-ORDER
         LA    R9,2(,R9)           GET ADDR OF BYTE WITH PP BIT IN IT
         NI    0(R9),X'FD'         TURN OFF PAGE PROT
         PTLB  ,                   ELIM PROT BIT FROM TLB
*                                  MODIFY STORAGE A BYTE AT A TIME
MODIT    IC    R0,XHS(R11)         GET FROM BYTE
         STC   R0,0(R11,R14)       MODIFY STORAGE
         EX    R8,ORPROT           TURN PROT BIT BACK ON
MODLPTST S     R11,ONE             DECREMENT
         BNM   MODLOOP             BRANCH UNTIL DONE
         BAS   R14,BIT24           GET BACK TO 24-BIT MODE
         BAS   R14,MODESET2        PROBLEM STATE KEY NZERO
         LM    R14,R12,@SAVE30
         BR    R14
         EJECT
*        REAL TO VIRTUAL CONVERSION SUBROUTINE
*
*        INPUT : R2 - REAL ADDR
*                R15 - RETURN ADDR
*        OUTPUT : R1,R3 - ALTERED
*                 R2 - CONVERTED VIRTUAL ADDRESS
         SPACE 1
REAL2VIR LR    R1,R2               COPY INPUT ADDR
         SRL   R1,12               SHIFT OFF DISPLACEMENT
         L     R3,CVTPTR           GET ADDR OF CVT                 -EU-
         USING CVT,R3                                              -EU-
         L     R3,CVTPVTP          GET ADDR OF PVT                 -EU-
         DROP  R3                                                  -EU-
         USING PVT,R3                                              -EU-
         L     R3,PVTRIT           GET ADDR OF RIT                 -EU-
         DROP  R3                                                  -EU-
         L     R3,RITPFT(,R3)      GET ADDR OF PFT                 -EU-
         SLL   R1,5                GET PFT DISPLACEMENT
         L     R1,PFTVSA(R1,R3)    GET VIRT PAGE ADDR
R2VB     N     R2,MASKPGDP         GET PAGE DISPLACEMENT
         OR    R2,R1               COMBINE WITH VIRT PAGE NO.
         BR    R15                 RETURN
         EJECT
*        EXECUTED INSTRUCTIONS
         SPACE 1
LOGMVC   MVC   @LINE01(*-*),0(R14)
PUTMSGM  MVC   @LINE01(*-*),1(R14)                                 -EU-
PARBLNK  MVC   0(*-*,R14),BLANKS
PARMVC   MVC   0(*-*,R11),0(R7)
HPRTRT   TRT   XHW(*-*),0(R14)                                     -EU-
MVREPDT  MVC   0(*-*,R11),XHS
PARMMVC  MVC   @PARMCPY(*-*),2(R11)
PUTM8MV  MVC   @LINE16(*-*),1(R14)                                 -EU-
VERCLC   CLC   0(*-*,R11),XHS
ZAPXC    XC    XHS(*-*),XHS
ORPROT   OI    0(R9),*-*
         EJECT
***********************************************************************
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
***********************************************************************
         SPACE 1
ONE      DC    F'1'
PGFIX    DC    XL4'42000000'
PGFREE   DC    XL4'20000000'
MASKFFFF DC    XL4'0000FFFF'
MASKPAGE DC    XL4'FFFFF000'       PAGE BOUNDARY MASK
MASKPGDP DC    XL4'00000FFF'       PAGE DISPLACEMENT MASK
MASKSTO3 DC    XL4'00FFFFC0'       370-MODE STO REG MASK
MASKSTOX DC    XL4'7FFFF000'       XZ-MODE STO REG MASK
MASKSPBT DC    XL4'00000004'       SEG PROT BIT MASK
MASKSTE  DC    XL4'7FFFFFC0'       SEG TBL ENTRY MASK
MASKPPBT DC    XL4'00000200'       PAGE PROT BIT MASK
HIORDBIT DC    XL4'80000000'       HI-ORDER BIT MASK
SIZE     DC    A(@DATAL)           LENGTH OF GETMAINED AREA
         SPACE 2
*        LIBRARY DEFINITION TABLES
         SPACE 1
LIBDEF   EQU   *,24
         DC    A(LIBDCB)           POINTER TO DCB IMAGE
         DC    A(LIBOPEN)          POINTER TO OPEN MF=L
         DC    CL8'PROGLIB '       PRIMARY DDNAME
         DC    CL8'SYSLIB  '       SECONDARY DDNAME
PRTDEF   EQU   *,24
         DC    A(PRTDCB)           POINTER TO DCB IMAGE
         DC    A(PRTOPEN)          POINTER TO OPEN MF=L
         DC    CL8'PROGLIST'       PRIMARY DDNAME
         DC    CL8'SYSPRINT'       SECONDARY DDNAME
CTLDEF   EQU   *,24
         DC    A(CTLDCB)           POINTER TO DCB IMAGE
         DC    A(CTLOPEN)          POINTER TO OPEN MF=L
         DC    CL8'PROGIN  '       PRIMARY DDNAME
         DC    CL8'SYSIN   '       SECONDARY DDNAME
         SPACE 1
CLOSE    EQU   *,12
         CLOSE (*-*,,*-*,,*-*),MF=L                                -EU-
         SPACE 2
WTORM    EQU   *,44
         WTOR  'ENTER ZAP STATEMENTS, RC, OR END',*-*,,MF=L        -EU-
         SPACE 2
BLANKS   DC    CL8' '
BLINE    DC    H'127,0',CL123' '                                   -EU-
REQ@IX   DC    AL3(MDL@IX)                                         -EU-
         EJECT
*        MESSAGES
         SPACE 1
WHEREMSG DC    CL46'         = IN-CORE ADDRESS OF PRECEDING SYMBOL'
IGNORED  DC    CL36'OPERATION IGNORED - NO GO SWITCH SET'
REJECT   DC    CL32'VERIFY REJECT - SET NO GO SWITCH'
OLDWAS   DC    CL13'OLD DATA WAS '
EQRC     DC    CL16'   = RETURN CODE'
SYNTAX   DC    CL15'SYNTAX ERROR - '
WARNMSG  DC    CL57'WARNING -- LOCAL MODE IS PROBABLY INVALID FOR THIS 1
               MODULE'
HEADING  DC    CL121'1MAIN STORAGE ZAP SERVICE AID PROGRAM'
MSG01    DC    AL1(L'MSG01T-1)                                     -EU-
MSG01T   DC    C'FIELD IS TOO LONG'
MSG02    DC    AL1(L'MSG02T-1)                                     -EU-
MSG02T   DC    C'OFFSET FIELD IS TOO LONG'
MSG03    DC    AL1(L'MSG03T-1)                                     -EU-
MSG03T   DC    C'INVALID HEXADECIMAL CHARACTER'
MSG04    DC    AL1(L'MSG04T-1)                                     -EU-
MSG04T   DC    C'MODULE NOT FOUND IN MAIN STORAGE'
MSG05    DC    AL1(L'MSG05T-1)                                     -EU-
MSG05T   DC    C'CSECT MUST BE SUPPLIED FOR NUCLEUS LOAD MODULE'
MSG06    DC    AL1(L'MSG06T-1)                                     -EU-
MSG06T   DC    C'INPUT DD STATEMENT NOT FOUND'
MSG07    DC    AL1(L'MSG07T-1)                                     -EU-
MSG07T   DC    C'DD STATEMENT FOR PROGRAM LIBRARY NOT FOUND'
MSG08    DC    AL1(L'MSG08T-1)                                     -EU-
MSG08T   DC    C'MEMBER NOT FOUND ON PROGRAM LIBRARY'
MSG09    DC    AL1(L'MSG09T-1)                                     -EU-
MSG09T   DC    C'SYMBOL NOT FOUND IN LOAD MODULE'
MSG10    DC    AL1(L'MSG10T-1)                                     -EU-
MSG10T   DC    C'OPERATION REQUESTED IS INVALID'
MSG11    DC    AL1(L'MSG11T-1)                                     -EU-
MSG11T   DC    C'REQUIRED FIELD MISSING'
MSG12    DC    AL1(L'MSG12T-1)                                     -EU-
MSG12T   DC    C'UNEVEN NUMBER OF HEXADECIMAL DIGITS'
MSG13    DC    AL1(L'MSG13T-1)                                     -EU-
MSG13T   DC    C'NOT AUTHORIZED TO USE "INCORZAP" PROGRAM'         -EU-
MSG14    DC    AL1(L'MSG14T-1)                                     -EU-
MSG14T   DC    C'NOT ALLOWED TO ENTER BY OPERATOR CONSOLE'         -EU-
         EJECT ,                                                   -EU-
         LTORG ,                                                   -EU-
         EJECT
PATCH    DC    30S(*)              PATCH AREA
         SPACE 2                                                   -EU-
         DROP  R5,R6,R10,R12                                       -EU-
         SPACE 1                                                   -EU-
*- - - - UPPER LIMIT OF BASE REGISTERS USE - - - - - - - - - - - -*-EU-
         SPACE 2
*        FLAG MAPPINGS
         SPACE 1
XFMAIN   EQU   X'80'     XFLAGS  - INPUT NOT FROM PARM FIELD
XFEOD    EQU   X'40'
XFLOCSW  EQU   X'20'
XFNOGO   EQU   X'10'
XFCON    EQU   X'08'
XFSKIP1  EQU   X'04'               SKIP 1ST CESD (NUC MOD)
XFOOP    EQU   X'02'               OUTPUT DATASET OPEN
XFSYMGO  EQU   X'01'               SW FOR SYMREC PROCESSING
         SPACE 1
XFSYMSKP EQU   X'80'     @SWB    - SKIP SYMBOLS (WRONG CSECT)
XF1ST    EQU   X'40'               1ST TIME SW FOR PRINTING
XFNOWTO  EQU   X'20'
SWB10    EQU   X'10'
CONACC   EQU   X'01'               CONSOLE ACCEPT                  -EU-
         EJECT
*        VERB NAME TABLE
         SPACE 1
OPCODES  DC    CL3'VER'            01
         DC    CL3'REP'            02
         DC    CL3'NAM'            03
         DC    CL3'DUM'            04
         DC    CL3'RES'            05
         DC    CL3'   '            06
         DC    CL3'*  '            07
         DC    CL3'CON'            08
         DC    CL3'END'            09
         DC    CL3'RC '            10
         DC    CL3'ZAP'            11
         DC    CL3'GLO'            12
         DC    CL3'LOC'            13
         DC    CL3'BAS'            14
         DC    CL3'IDR'            15
         DC    CL3'SET'            16
OPNUM    EQU   (*-OPCODES)/L'OPCODES                               -EU-
         SPACE 1
*        VERB ROUTINE ADDRESS TABLE
         SPACE 1
OPENTRY  DC    A(VER)              01
         DC    A(REP)              02
         DC    A(NAM)              03
         DC    A(DUM)              04
         DC    A(REP)              05
         DC    A(COMMENT)          06
         DC    A(COMMENT)          07
         DC    A(CON)              08
         DC    A(END)              09
         DC    A(RC)               10
         DC    A(ZAP)              11
         DC    A(GLO)              12
         DC    A(LOC)              13
         DC    A(GETOFF)           14
         DC    A(COMMENT)          15
         DC    A(COMMENT)          16
         EJECT
LIBOPEN  OPEN  (*-*,UPDAT),MF=L                                    -EU-
CTLOPEN  OPEN  (*-*),MF=L                                          -EU-
PRTOPEN  OPEN  (*-*,OUTPUT),MF=L                                   -EU-
         SPACE 1                                                   -EU-
         PRINT NOGEN                                               -EU-
         SPACE 1
LIBDCB   DCB   DDNAME=L,DSORG=PO,MACRF=R
LIBDCBL  EQU   100-(*-LIBDCB)                                      -EU-
         DC    (LIBDCBL)X'0'                                       -EU-
         SPACE 1
PRTDCB   DCB   DDNAME=P,DSORG=PS,MACRF=PM,                             1
               RECFM=FA,LRECL=121,BLKSIZE=121
PRTDCBL  EQU   100-(*-PRTDCB)                                      -EU-
         DC    (PRTDCBL)X'0'                                       -EU-
         SPACE 1
CTLDCB   DCB   DDNAME=C,DSORG=PS,MACRF=GM,EODAD=CTLEOD,LRECL=80
CTLDCBL  EQU   100-(*-CTLDCB)                                      -EU-
         DC    (CTLDCBL)X'0'                                       -EU-
         SPACE 1                                                   -EU-
         PRINT GEN                                                 -EU-
         EJECT
HEXTR    DC    193X'00'            00-C0                           -EU-
         DC    X'0A0B0C0D0E0F'
         DC    41X'00'             C7-EF
         DC    X'00010203040506070809'
         DC    6X'00'              FA-FF
         SPACE 1
*        HEXADECIMAL VALIDATION TRANSLATE TABLE
         SPACE 1
HEXTRT   DC    193X'01'            00-C0
         DC    6X'00'              C1-C6 (A-F)
         DC    41X'01'             C7-EF
         DC    10X'00'             F0-F9
         DC    6X'01'              FA-FF
         SPACE 1
EBCDIC   DC    74C' '              00-49
         DC    X'4A4B4C4D4E4F50'
         DC    C'         '        51-59
         DC    X'5A5B5C5D5E5F6061'
         DC    C'        '         62-69
         DC    X'6A6B6C6D6E6F'
         DC    C'         '        70-78
         DC    X'797A7B7C7D7E7F'
         DC    C' '                80
         DC    C'ABCDEFGHI'        81-89
         DC    C' '                8A
         DC    X'8B8C8D8E8F'
         DC    C' '                90
         DC    C'JKLMNOPQR'        91-99
         DC    C' '                9A
         DC    X'9B9C9D9E9FA0A1'
         DC    C'STUVWXYZ'         A2-A9
         DC    X'AAABACADAEAF'     AA-AF
         DC    X'B0B1B2B3B4B5B6B7B8B9'
         DC    C' '                BA
         DC    X'BBBCBDBEBFC0'
         DC    C'ABCDEFGHI'        C1-C9
         DC    C'      '           CA-CF
         DC    X'D0'
         DC    C'JKLMNOPQR'        D1-D9
         DC    C'      '           DA-DF
         DC    X'E0'
         DC    C' '                E1
         DC    C'STUVWXYZ'         E2-E9
         DC    C'      '           EA-EF
         DC    C'0123456789'       F0-F9
         DC    X'FA'
         DC    C'     '            FB-FF
         EJECT
***********************************************************************
*                                                                     *
*        MAP OF GETMAINED WORK AREA.                                  *
*                                                                     *
***********************************************************************
         SPACE 1
@DATA    DSECT
         SPACE 1
         DS    18F                                                 -EU-
@PARMPTR DS    F
@SAVE01  DS    15F                 SUBROUTINE SAVE AREAS           -EU-
@SAVE02  DS    15F
@SAVE03  DS    15F
@SAVE04  DS    15F
@SAVE05  DS    15F
@SAVE06  DS    15F
@SAVE07  DS    15F
@SAVE08  DS    15F
@SAVE09  DS    15F
@SAVE10  DS    15F
@SAVE11  DS    15F
@SAVE12  DS    15F
@SAVE13  DS    15F
@SAVE14  DS    15F
@SAVE15  DS    15F
@SAVE16  DS    15F
@SAVE17  DS    15F
@SAVE18  DS    15F
@SAVE19  DS    15F
@SAVE20  DS    15F
@SAVE21  DS    15F
@SAVE22  DS    15F
@SAVE23  DS    15F
@SAVE24  DS    15F
@SAVE25  DS    15F
@SAVE26  DS    15F
@SAVE27  DS    15F
@SAVE28  DS    15F
@SAVE29  DS    15F
@SAVE30  DS    15F
@SAVE31  DS    15F                                                 -EU-
@SAVE32  DS    15F                                                 -EU-
@ESDSUB  DS    0F
I        DS    F                   WORK VARIABLE
XACCUM   DS    F                   ACCUMULATED CSECT LENGTH
XBASE    DS    F                   BASE VALUE FOR OFFSET ADJ
XCESDN   DS    F                   CESD NUMBER
XCSECNO  DS    F                   CSECT NO. FOR 'XEBLBL'
XCESDX   DS    F                   INDEX TO CESD ENTRY
XCRSW    DS    F                   CESD RECORD SCAN SW
XCSADDR  DS    F                   ADDRESS OF CSECT
XCSDADR  DS    F                   REL ADDR OF CSECT ON DISK
XCSER    DS    F                   LENGTH OF CSECT
XCSPER   DS    F                   SAVE XPENDREC - CONSOLE MODE
XCSOFF   DS    F                   OFFSET TO CSECT IN LOAD MOD
XCODE    DS    F                   RETURN CODE
XDCBA    DS    F                   ADDR OF DCB
XDDN     DS    F                   PNTR TO DD NAME TABLE
XDUMPEND DS    F                   END OF DUMP
XDP      DS    F                   DUMP POINTER
XEBAD    DS    F                   ADDR OF EBCDIC DATA
XENDREC  DS    F                   ADDR OF END OF LOGICAL DATA
XFLDCUR  DS    F                   CURRENT CHARACTER POINTER
XRCVADDR DS    F                   ADDR OF RECEIVING FIELD
XFLDALEN DS    F                   ACTUAL FIELD LENGTH
XFLDSTRT DS    F                   START OF FIELD
XGOS     DS    F                   'GET OFFSET' ROUTINE SW
XHEX     DS    F                   ADDR OF HEX DATA
XHEXL    DS    F                   LENGTH OF HEX DATA
XHL      DS    F                   LENGTH OF HEX STRING
XHP      DS    F                   POINTER TO HEX STRING
XHSPTR   DS    F                   HEX STRING POINTER
XHSW     DS    F                   SWITCH
XHWPTR   DS    F                   HEX WORK AREA POINTER
XLMADDR  DS    F                   IN-CORE ADDR OF LOAD MOD
XLOC     DS    F                   LOCATION TO BE DISPLAYED
XMSE     DS    F                   ADDR OF SYNTAX ERR MSG
XNUMCESD DS    F                   NO. OF ENTRIES IN CESD REC
XOCODE   DS    F
XOFFSET  DS    F                   OFFSET TO CESD IN LOAD MOD
XPECB    DS    F
XPENDREC DS    F                   POINTER TO END OF PHYSICAL REC
XPS      DS    F                   LOOP SWITCH
XPSRC    DS    F                   PAGE SERVICE RETURN CODE
XRCVLEN  DS    F                   RECEIVING FIELD LEN
XSCANSW  DS    F                   SW TO CONTROL SCAN
XSDCNT   DS    F                   COUNT OF CSECTS IN MODULE
XSDX     DS    F                   ARRAY INDEX FOR XSD
XSMCSD   DS    F
XSYMCPT  DS    F
XSYMFAD  DS    F
XSYMFPT  DS    F
XSYMOFF  DS    F
XSYMRECX DS    F
XSYMTOTX DS    F
XVX      DS    F                   VERB INDEX
XVXSW    DS    F
XWECB    DS    F
XWORK    DS    F
XX       DS    F
XZADDR   DS    F                   IN-CORE STORAGE ADDR
Y        DS    F
@FILL01  DS    CL12
XCSLEN   DS    F
XCARD    DS    CL80
         DS    0F
XDCBL    DS    CL100
         DS    0F
XDCBO    DS    CL100
         DS    0F
XDCBIN   DS    CL100
XDCBCLS  DS    3F
         DS    F
@DECB    DS    5F
XEBLM    DS    CL8
XEBCS    DS    CL8
         DS    CL8
XEBLBL   DS    CL8
XEBV     DS    CL8
XFLAGS   DS    C
@SWB     DS    C
XGOC     DS    C
         DS    C                   XHOP-1
XHOP     DS    F
XHPW     DS    CL9
XHS      DS    CL40
         DS    C                   XHW-1
XHW      DS    CL80
         SPACE 1
@LINE    DS    CL121
         ORG   @LINE
         DS    C
@LINE01  DS    C
@LINE02  DS    C
@LINE03  DS    CL11
@LINE14  DS    C
@LINE15  DS    C
@LINE16  DS    C
@LINE17  DS    C
@LINE18  DS    CL15
@LINE33  DS    C
@LINE34  DS    CL3
@LINE37  DS    C
@LINE38  DS    CL3
@LINE41  DS    CL6
@LINE47  DS    C
@LINE48  DS    CL10
@LINE58  DS    C
@LINE59  DS    CL28
@LINE87  DS    C
@LINE88  DS    CL26
         DS    CL6
@LIN120  DS    C
         SPACE 1
         DS    C
XLREC    DS    0F,CL248
@PARMCPY DS    CL200
XREPLY   DS    CL130
@FILL9C  DS    CL2
XWTO     DS    CL144
XWTOR    DS    CL44
@WAY08   DS    CL1
@WAY08Z  DS    CL3
@WAY08A  DS    CL5
         SPACE 1                                                   -EU-
EXTR     EXTRACT *-*,'S',MF=L                                      -EU-
EXTRL    EQU   *-EXTR                                              -EU-
ANSWER   DS    F                                                   -EU-
REQAUT   DC    0F'0',BL1'00000000',AL3(MDL@IX),AL4(*-*)            -EU-
AUTH     DC    XL1'0'                                              -EU-
REQAUTL  EQU   *-REQAUT                                            -EU-
         DS    0F                                                  -EU-
         SPACE 1
*        CSECT MAPPING ARRAY (2000 ENTRIES)                        -EU-
         SPACE 1
XSDNO    DS    C                   CSECT NUMBER (2 BYTES)
         DS    C
XSDLEN   DS    C                   CSECT LENGTH (3 BYTES)
@WAY08B  DS    C
@WAY08C  DS    C
XSD@L    EQU   *-XSDNO             ONE ENTRY LENGTH                -EU-
         DS    1000CL(XSD@L)                                       -EU-
         DS    1000CL(XSD@L)                                       -EU-
         SPACE 1
@DATAL   EQU   (((*-@DATA)+7)/8)*8                                 -EU-
         EJECT
*        CONTROL BLOCK MAPPINGS
         SPACE 1
RITPFT   EQU   X'D0'               POINTER TO APPARENT PFT (XA-IARRIT)
PFTVSA   EQU   X'14'               VIRT STORAGE ADDR (XA-IARPFTE)
         SPACE 2
         PRINT NOGEN                                               -EU-
         IHAPSA ,                                                  -EU-
         CVT   DSECT=YES,LIST=YES                                  -EU-
         IHAPVT ,                                                  -EU-
         IKJTCB ,                                                  -EU-
CIBDSECT DSECT ,                                                   -EU-
CIB      IEZCIB ,                                                  -EU-
         DCBD  DSORG=PS                                            -EU-
         SPACE 2                                                   -EU-
         END
