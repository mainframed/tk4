XREF TITLE 'MASTER CROSS-REFERENCE FOR SYSTEMS OF ASSEMBLY PROGRAMS.'
         PRINT OFF                                                 -EU-
         COPY  SCHEDMAC                                            -EU-
         PRINT ON                                                  -EU-
XREFASM  START 0
         SPACE 1
*************************************************************
*                                                           *
* MODULE NAME = XREFASM.                                    *
*                                                           *
* DESCRIPTIVE NAME = MASTER CROSS REFERENCE GENERATOR FOR   *
*                    SYSTEMS OF ASSEMBLER LANGUAGE          *
*                    PROGRAMS.                              *
*                                                           *
* COPYRIGHT = DAVID B. COLE - 1981.                         *
*                                                           *
* STATUS = RELEASE 1, MODIFICATION LEVEL 4.                 * 07/85 DBC
*                                                           *
* FUNCTION = XREFIN ACCUMULATES CROSS REFERENCE LISTINGS    *
*            FOR ASSEMBLER LANGUAGE PROGRAMS. XREFOUT SORTS *
*            AND PRINST THE ACCUMULATED LISTINGS. REDUNDANT *
*            ENTRIES RESULTING FROM RE-ASSEMBLIES OF THE    *
*            SAME ROUTINES ARE FILTERED OUT.                *
*                                                           *
* PROCESSOR = OS/VS ASSEMBLER.                              *
*                                                           *
* TYPE = PROCEDURE.                                         *
*                                                           *
* ATTRIBUTES = NONE.                                        *
*                                                           *
* DEPENDANCIES = THE NAME OF THE MODULE FOR WHICH THE       *
*                ASSEMBLY LISTING WAS CREATED MUST APPEAR   *
*                IN THE NAME FIELD OF A TITLE STATEMENT     *
*                USED IN THE ASSEMBLY.                      *
*                                                           *
* NOTES = THIS SOURCE CONTAINS TWO CSECTS WHICH MUST BE     *
*         LINK EDITED INTO SEPERATE LOAD MODULES.           *
*                                                           *
* RESTRICTIONS = NONE.                                      *
*                                                           *
* AUTHOR = DAVID B. COLE.                                   *
*                                                           *
*************************************************************
         SPACE 1                                                   -EU-
* ORIGIN : EXTRACTED FROM CBT TAPE 87 FEB, FILE 162.               -EU-
* --------                                                         -EU-
         EJECT
*=====================================================================*
*               -- CHANGE HISTORY --                          01/85 DBC
*=====================================================================*
         SPACE 1
************************************************************* 07/85 DBC
*                                                           * 07/85 DBC
* XREFASM VERSION 1.4                                       * 07/85 DBC
*                                                           * 07/85 DBC
* LAST CHANGE DATE - JULY 30, 1985.                         * 07/85 DBC
*                                                           * 07/85 DBC
*                  - IF THE REWRITE DDNAME WAS DEFINED BUT  * 07/85 DBC
*                    WAS NOT DEFINED TO BE THE SAME DATASET * 07/85 DBC
*                    AS THE XREF FILE, THEN XREFOUT WOULD   * 07/85 DBC
*                    FAIL WITH S013 ABENDS.                 * 07/85 DBC
*                                                           * 07/85 DBC
*                  - THE DEFAULT BLKSIZE FOR THE XREF FILE  * 07/85 DBC
*                    HAS BEEN CHANGED FROM <4K TO 6162      * 07/85 DBC
*                    (<6233) WHICH IS A GOOD SIZE FOR       * 07/85 DBC
*                    3330S, 3350S, AND 3380S.               * 07/85 DBC
*                                                           * 07/85 DBC
************************************************************* 07/85 DBC
         SPACE 1                                              07/85 DBC
************************************************************* 01/85 DBC
*                                                           * 01/85 DBC
* XREFASM VERSION 1.3                                       * 01/85 DBC
*                                                           * 01/85 DBC
* LAST CHANGE DATE - JANUARY 22, 1985.                      * 01/85 DBC
*                                                           * 01/85 DBC
*                  - I ADDED CODE TO PREVENT THE            * 01/85 DBC
*                    POSSIBILITY OF THE DISPLAY OF          * 01/85 DBC
*                    OBSELETE SYMBOLS. THIS IS DONE BY      * 01/85 DBC
*                    HAVING XREFIN WRITE A TIMESTAMP        * 01/85 DBC
*                    RECORD WITH A SYMBOL VALUE OF          * 01/85 DBC
*                    X'40FF000000'. THIS VALUE IS LOW       * 01/85 DBC
*                    ENOUGH THAT XREFOUT WILL SORT IT       * 01/85 DBC
*                    LOWER THAN ALL XREF RECORDS BUT        * 01/85 DBC
*                    HIGHER THAN A POSSIBLE PURGE RECORD    * 01/85 DBC
*                    (CL9' ANAME'). THIS TIMESTAMP RECORD   * 01/85 DBC
*                    WILL NEVER BE DISPLAYED BY XREFOUT,    * 01/85 DBC
*                    BUT IT WILL GUARENTEE THAT XREFOUT     * 01/85 DBC
*                    WILL KNOW THE MOST RECENT              * 01/85 DBC
*                    TIME-OF-ASSEMBLY FOR A PARTICULAR      * 01/85 DBC
*                    MODULE PRIOR TO IT RECEIVING FROM      * 01/85 DBC
*                    SORT/MERGE ANY DATA RECORDS FOR ANY    * 01/85 DBC
*                    ASSEMBLIES OF THAT MODULE.             * 01/85 DBC
         EJECT ,                                              07/85 DBC
*                  - WHEN XREFOUT REWRITES THE XREF FILE,   * 01/85 DBC
*                    IT WILL NOW RESET THE TIMESTAMP FIELD  * 01/85 DBC
*                    OF ALL RECORDS TO THE CURRENT DATE.    * 01/85 DBC
*                    THIS PREVENTS THE ACCUMULATION OF      * 01/85 DBC
*                    REDUNDANT RECORDS IN THE FOLLOWING     * 01/85 DBC
*                    SCENARIO :                             * 01/85 DBC
*                                                           * 01/85 DBC
*                    - THE INPUT FILE IS A CONCATENATION OF * 01/85 DBC
*                      TWO OR MORE FILES, AND               * 01/85 DBC
*                                                           * 01/85 DBC
*                    - THE OUTPUT FILE WRITES BACK TO ONE   * 01/85 DBC
*                      OF THE INPUT FILES, AND              * 01/85 DBC
*                                                           * 01/85 DBC
*                    - THE XREFOUT JOB, USING THE IDENTICAL * 01/85 DBC
*                      JCL, IS EXECUTED TWO OR MORE TIMES.  * 01/85 DBC
*                                                           * 01/85 DBC
*                  - THE S.L.A.C. MODIFIED ASSEMBLER-H HAS  * 01/85 DBC
*                    A TROUBLESOME BUG WHERE OCCASIONALLY   * 01/85 DBC
*                    THE SYMBOL FIELD IN THE XREF LISTING   * 01/85 DBC
*                    CONTAINS GARBAGE CHARACTERS. THIS CAN  * 01/85 DBC
*                    OCCUR BOTH ON THE FIRST XREF LINE FOR  * 01/85 DBC
*                    A GIVEN SYMBOL, AS WELL AS ON          * 01/85 DBC
*                    CONTINUATION LINES (WHEN THAT FIELD    * 01/85 DBC
*                    SHOULD BE BLANK), AND EVEN IN THE      * 01/85 DBC
*                    NAME FIELD OF TITLE LINES WITHIN THE   * 01/85 DBC
*                    XREF. I HAVE ADJUSTED XREFASM TO       * 01/85 DBC
*                    COMPENSATE FOR THIS IN TWO WAYS :      * 01/85 DBC
*                                                           * 01/85 DBC
*                    - ALL LINES HAVING A SYMBOL FIELD      * 01/85 DBC
*                      WHOSE FIRST BYTE'S VALUE IS LESS     * 01/85 DBC
*                      THAN X'40' ARE DISCARDED.            * 01/85 DBC
*                                                           * 01/85 DBC
*                    - XREFIN HAS BEEN CHANGED TO CONSIDER  * 01/85 DBC
*                      XREF LINES (FROM ASM-H ASSEMBLIES)   * 01/85 DBC
*                      HAVING BLANK LEN, VALUE, AND DEFN    * 01/85 DBC
*                      FIELDS TO BE CONTINUATION LINES      * 01/85 DBC
*                      REGUARDLESS OF WHETHER OR NOT THE    * 01/85 DBC
*                      SYMBOL FIELD IS BLANK OR NON-BLANK.  * 01/85 DBC
*                                                           * 01/85 DBC
*                  - A SUMMARY DISPLAY IS NOW PRINTED BY    * 01/85 DBC
*                    XREFOUT AT THE END OF THE MERGED XREF  * 01/85 DBC
*                    SHOWING THE NAMES OF ALL CROSS         * 01/85 DBC
*                    REFERENCED ASSEMBLY MODULES.           * 01/85 DBC
*                                                           * 01/85 DBC
*                  - ASSEMBLY MODULES THAT HAVE NO NAME     * 01/85 DBC
*                    DEFINED IN THE TITLE LINE ARE NOW      * 01/85 DBC
*                    IDENTIFIED AS *BLANK*.                 * 01/85 DBC
*                                                           * 01/85 DBC
************************************************************* 01/85 DBC
         EJECT
*        -- REGISTER AND OTHER EQUATES --
         SPACE 1
         #REGS R,                  STANDARD REGISTER NAMES             *
               (BASE1REG,R13),     1ST PGM BASE REGISTER               *
               (BASE2REG,R12),     2ND PROGRAM BASE REGISTER           *
               (TYPEREG,R11),      XREFIN: XREF TYPE TABLE BASE        *
               (INPUTCTR,R10),     XREFIN: INPUT (LISTING) RCDS CTR    *
               (XREFCTR,R9),       XREFIN: XREF FILE RCDS CTR          *
               (SYSPCTR,R8),       XREFIN: SYSPRINT FILE RCDS CTR      *
               (RCDPTR,R11)        XREFOUT/SORTOUT: RECORD PTR
         SPACE 2
PRTLEN   EQU   133                 LENGTH OF A PRINT LINE
         SPACE 2
         #PUT  SUBAD=PUTSYST,MF=INIT MACRO INITIALIZATION
         EJECT
*        -- IBM MAPPING MACROS --
         SPACE 1
         PUSH  PRINT
         PRINT NOGEN
SYMDEL   DSECT ,                   SYM-TABLE SUPPRESSION      01/85 DBC
         SPACE 1
*        DCB = DATA CONTROL BLOCK
*        IHADCB = DSECT AND BASE
         SPACE 1
         DCBD  DSORG=QS
         SPACE 2
SYMNODEL DSECT ,                   END SYM-TABLE SUPPRESSION  01/85 DBC
         POP   PRINT
         SPACE 2
*        -- XREFIN -- TABLE MAP - SOURCE XREF DESCRIPTION TABLE
         SPACE 1
TABLE    DSECT ,
TTCHK    CLC   *-*,*-*             IDENTIFIES TITLE LINES
MOGET    MVC   *-*,*-*             EXTRACTS ASSEMBLY NAMES
XRCHK    TM    *-*,B'11110000'     IDENTIFIES XREF DATA LINES
LBCHK    TM    *-*,255-C' '        IDENTIFIES LABEL FIELDS
         NOPR  0                   (FILLER)                   01/85 DBC
LBGET    MVC   *-*,*-*             EXTRACTS LABELS
REFSOFFS DS    H                   OFFSET IN A DATA LINE (NOT INCLUDING
*                                  THE CCC) TO THE FIRST REFERENCE
*                                  ENTRY
TABLELEN EQU   *-TABLE             TABLE LENGTH
         EJECT
*        -- XREFIN/XREFOUT -- XREFRCD MAP - XREF FILE RECORD
         SPACE 1
XREFRCD  DSECT ,
XRRLABEL DS    CL8                 REFERENCED LABEL
XRRMODUL DS    CL8                 CONTAINING MODULE
XRRTSTMP DS    D                   ONE'S COMPLEMENTED TIME STAMP
XRRHEAD  EQU   XREFRCD,*-XREFRCD   HEADER AREA
         SPACE 1
XRROFFS  DS    H                   OFFSET IN XRRDATA TO REFERENCE
*                                  ENTRIES
XRRDATA  DS    CL(PRTLEN-1)        XREF DATA
XRRLEN   EQU   *-XREFRCD           L'XREF RECORD
         SPACE 2
*        -- XREFOUT -- STAMP MAP - OBSELETE REFERENCES CONTROL AND
*                                  LABEL REFERENCES COUNTER
         SPACE 1
STAMP    DSECT ,
STMPHEAD DS    XL(L'XRRHEAD)       COPY OF XRRHEAD
STMPLABL EQU   XRRLABEL-XRRHEAD+STMPHEAD,L'XRRLABEL
STMPMODU EQU   XRRMODUL-XRRHEAD+STMPHEAD,L'XRRMODUL
STMPTIME EQU   XRRTSTMP-XRRHEAD+STMPHEAD,L'XRRTSTMP
STMPHITS DS    PL3                 REFERENCES COUNTER FOR THE CURRENT
*                                  LABEL/MODULE COMBINATION
STMPLEN  EQU   *-STAMP
         EJECT
*=====================================================================*
* -- XREFIN -- INITIALIZATION                                         *
*=====================================================================*
         SPACE 1
***      STANDARD NON-REENTRANT ENTRY LINKAGE WITH TWO BASE
***      REGISTERS.
         SPACE 1
XREFIN   #ENTER XREFIN
               BASES=(BASE1REG,BASE2REG)
         SPACE 1
***      OPEN THE LISTING FILE. IF IT DOES NOT EXIST, THEN
***      TERMINATE.
         SPACE 1
         OPEN  LISTING             OPEN THE LISTING FILE
         TM    DCBOFLGS-IHADCB+LISTING,DCBOFOPN DID IT OPEN OK?
         BZ    EXIT16              NO, TERMINATE
         SPACE 1
***      OPEN THE REMAINING FILES.
         SPACE 1
         OPEN  (SYSPRINT,OUTPUT,XREF,OUTPUT,SYSTERM,OUTPUT)
         SPACE 1
***      GET A COMPLEMENTED TIME STAMP. NOTE, THE ACTUAL
***      VALUE OF THE TIMESTAMP DOESN'T PARTICULARLY
***      MATTER SINCE IT IS NOT USED FOR REPORTING A TIME
***      OR DATE. INSTEAD, IT IS USED BY THE XREF-SORT
***      ROUTINE (CALLED BY XREFOUT) TO FORCE A LIFO
***      ORDERING FOR POSSIBLY REDUNDANT LABELS THAT MIGHT
***      EXIST IN THE ACCUMULATION FILE DUE TO
***      RE-ASSEMBLIES.
         SPACE 1
         STCK  XRRTSTMP-XRRHEAD+HEAD STORE A TIME STAMP
         XC    XRRTSTMP-XRRHEAD+HEAD,=(L'XRRTSTMP)X'FF' COMPLEMENT IT
         SPACE 1
***      INITIALIZE MISCELLANEOUS COUNTERS.
         SPACE 1
         XR    INPUTCTR,INPUTCTR   CLEAR LISTING FILE COUNTER
         XR    XREFCTR,XREFCTR     CLEAR XREF FILE COUNTER
         XR    SYSPCTR,SYSPCTR     CLEAR SYSPRINT FILE COUNTER
         XR    TYPEREG,TYPEREG     CLEAR XREF TYPE TABLE PTR
         EJECT
*=====================================================================*
* -- XREFIN -- MAIN PROCESSING LOOP                                   *
*=====================================================================*
         SPACE 1
***      GET THE NEXT LISTING FILE RECORD.
         SPACE 1
GETLOOP  GET   LISTING             LOCATE THE NEXT RECORD
         LA    INPUTCTR,1(,INPUTCTR) COUNT IT
         LR    R14,R1              --> IT
         LH    R15,DCBLRECL-IHADCB+LISTING GET ITS LENGTH (MAYBE)
         TM    DCBRECFM-IHADCB+LISTING,DCBRECF RECFM=F OR U?
         BNZ   GOTREC              YES, AOK
         LH    R15,0(,R1)          NO, GET L'DATA+4
         SH    R15,=H'4'           GET L'DATA; VALID?
         BNP   GETLOOP             NO, IGNORE IT
         LA    R14,4(,R1)          YES, --> DATA
GOTREC   LA    R0,XRL              --> LOCAL BUFFER
         LA    R1,L'XRL            GET ITS LENGTH
         ICM   R15,8,=C' '         GET PAD CHARACTER
         MVCL  R0,R14              COPY RCD TO LOCAL BUFFER
         SPACE 1
***      LOOK FOR AN XREF TITLE LINE FOR ONE OF THE
***      SUPPORTED XREF FORMATS.
         SPACE 1
         TM    FLAG,EOXREFF        PAST XREF YET?                   V11
         BNZ   XREFSKIP            YES, SKIP ALL THIS               V11
         CLI   XRL,C'1'            NO, IS THIS A TITLE LINE?
         BE    TITLXAMN            YES, GO EXAMINE IT               V11
         TM    FLAG,TITNEXT        MAYBE, CHK AGAIN (MACHINE CCC)   V11
         BZ    TITNXTCK            NO, SKIP                   01/85 DBC
TITLXAMN NI    FLAG,255-TITNEXT    YES, CLEAR "TITLE NEXT"    01/85 DBC
         LTR   TYPEREG,TYPEREG     AM I ALREADY PROCESSING    01/85 DBC
*                                  THE XREF?                  01/85 DBC
         BNZ   XREFSKIP            YES, NO NEED TO EXAMINE    01/85 DBC
*                                  THIS TITLE LINE            01/85 DBC
         LA    R1,TYPES-4          NO, --> TYPES VECTOR
         BASR  R14,0               LOOPER                     01/85 DBC
         LA    R1,4(,R1)           --> NEXT VECTOR ENTRY
         ICM   TYPEREG,15,0(R1)    GET NEXT VECTOR ENTRY; ANY MORE?
         BZ    TITNXTCK            NO, NOT A SUPPORTED XREF SECTION V11
         USING TABLE,TYPEREG       YES, DCL TABLE BASE
         EX    0,TTCHK             IS THIS A RECOGNIZED TITLE LINE?
         BNER  R14                 NOT YET, KEEP THINKING ON IT
         SPACE 1
***      A RECOGNIZED TITLE LINE HAS BEEN FOUND. EXTRACT
***      THE ASSEMBLY NAME FROM IT.
         SPACE 1
         EX    0,MOGET             GET THE ASSEMBLY NAME (IF ANY)
         TM    XRRMODUL-XRRHEAD+HEAD,255-C' ' IS THE ASSEMBLY NAME
*                                  NULL?                      01/85 DBC
         BNZ   MNOTBLNK            NO, PROCEED                01/85 DBC
         MVC   XRRMODUL-XRRHEAD+HEAD,=CL(L'XRRMODUL)'*BLANK*' 01/85 DBC
*                                  YES, RESET TO SOMETHING    01/85 DBC
*                                  READABLE                   01/85 DBC
MNOTBLNK MVC   XREFTITN,XRRMODUL-XRRHEAD+HEAD COPY 2 INFO MSG 01/85 DBC
TITMSG   #PUT  XREFTIT             SEND THE INFO MSG          01/85 DBC
         SPACE 1                                              01/85 DBC
***      WRITE A TIMESTAMP RECORD FOR THIS ASSEMBLY. SET A    01/85 DBC
***      SPECIAL FAKE SYMBOL FIELD IN IT SO THAT IT WILL      01/85 DBC
***      SORT LOWER THAN ALL XREF RECORDS BUT NOT LOWER       01/85 DBC
***      THAN ANY PURGE RECORDS.                              01/85 DBC
         SPACE 1                                              01/85 DBC
         TM    DCBOFLGS-IHADCB+XREF,DCBOFOPN XREF FILE EXIST? DCB 01/85
         BZ    TITNXTCK            NO, FORGET IT              01/85 DBC
         PUT   XREF                YES, GET NEXT OUTPUT BUFFR 01/85 DBC
         USING XREFRCD,R1          DCL BUFFER BASE            01/85 DBC
         MVC   XRRHEAD,HEAD        COPY ASSEMBLY NAME AND     01/85 DBC
*                                  TIMESTAMP                  01/85 DBC
         MVC   XRRLABEL,=XL8'40FF000000000000' SET            01/85 DBC
*                                  LOW-SORTING "SYMBOL"       01/85 DBC
         #TEST SIZE=(L'XRRLABEL,EQ,8)                         01/85 DBC
         DROP  R1                  RELEASEXREF RCD BASE       01/85 DBC
         SPACE 1                                              01/85 DBC
***      SEE IF THE NEXT LISTING LINE WILL BE A TITLE LINE    01/85 DBC
***      (MACHINE CCC).                                       01/85 DBC
         SPACE 1                                                    V11
TITNXTCK CLI   XRL,X'89'           NO, IS NEXT A TITLE?             V11
         BE    SETITNXT            YES, GO SET SIGNAL               V11
         CLI   XRL,X'8B'           MAYBE, CHECK AGAIN               V11
         BNE   XREFSTAT            NO, DONE HERE                    V11
SETITNXT OI    FLAG,TITNEXT        YES, SET SIGNAL                  V11
         SPACE 1
***      A NON-TITLE LINE HAS BEEN RECEIVED. EXAMINE IT TO
***      SEE WHAT I CAN DO WITH IT.
         SPACE 1
XREFSTAT LTR   TYPEREG,TYPEREG     AM I XREFING NOW?
         BZ    XREFSKIP            NO, SKIP
         TM    DCBOFLGS-IHADCB+XREF,DCBOFOPN YES, DOES THE    01/85 DBC
*                                  XREF OUTPUT FILE EXIST?    01/85 DBC
         BZ    XREFSKIP            NO, FORGET IT
         CLC   XRL+2(L'XRL-2),XRL+1 YES, DOES THIS DATA LINE CONTAIN
*                                  ANYTHING AT ALL?
         BE    XREFSKIP            NO, IGNORE IT
         CLI   XRL+1,C'='          YES, INTO LITTERALS YET?         V11
         BNE   XREFGOTL            NO, PROCEED                      V11
         OI    FLAG,EOXREFF        YES, SIGNAL EO-XREF              V11
         B     XREFSKIP            DONE HERE                        V11
         SPACE 1
***      I HAVE RECEIVED A LINE WITHIN THE CROSS-REFERENCE
***      AND I HAVE AN XREF OUTPUT FILE AVAILABLE. SEE IF
***      THIS IS AN XREF DATA LINE.
         SPACE 1
XREFGOTL EX    0,XRCHK             IS THERE A DIGIT HERE?           V11
         BNO   XREFSKIP            NO, NOT AN XREF DATA LINE; IGNORE
         B     GOTXR               YES, PROCEED
EDXXRCHK TM    XRL+6,B'11110000'   EDX EXTENDED CHECK : DIGIT HERE?
         BO    GOTXR               YES, PROCEED
         TM    XRL+24,B'11110000'  NO, HOW ABOUT HERE?
         BNO   XREFSKIP            NO, NOT AN XREF DATA LINE; IGNORE
         SPACE 1
***      AN XREF DATA LINE HAS BEEN ENCOUNTERED. IF IT
***      CONTAINS A LABEL, THEN SAVE A COPY OF IT. IN ANY
***      CASE, CONSTRUCT AN XREF OUTPUT RECORD AND WRITE IT
***      OUT TO THE XREF ACCUMULATION FILE.
         SPACE 1
GOTXR    EX    0,LBCHK             IS THE LABEL FIELD FILLED?
         BE    XREFNLBL            NO, SKIP                   01/85 DBC
         EX    0,LBGET             YES, SAVE A COPY OF THE LABEL
XREFNLBL PUT   XREF                GET NEXT OUTPUT BUFFER     01/85 DBC
         USING XREFRCD,R1          DCL XREF RECORD BASE
         LA    XREFCTR,1(,XREFCTR) COUNT XREF RECORDS
         MVC   XRRHEAD,HEAD        COPY RECORD HEADER
         MVC   XRROFFS,REFSOFFS    SAVE REFERENCES OFFSET
         MVC   XRRDATA,XRL+1       COPY DATA TO XREF RECORD
         #TEST SIZE=(L'XRRDATA,LE,L'XRL-1)
         DROP  R1                  RELEASE XREF RECORD BASE
         DROP  TYPEREG             RELEASE XREF TYPE TABLE BASE
         SPACE 1
***      IF A SYSPRINT FILE IS PRESENT, THEN COPY THE
***      LISTING LINE OUT TO IT.
         SPACE 1
XREFSKIP LA    R1,SYSPRINT         --> DCB
         USING IHADCB,R1           DCL DCB BASE
         TM    DCBOFLGS,DCBOFOPN   IS SYSPRINT OPENED?
         BZ    GETLOOP             NO, DONE HERE
         TM    DCBRECFM,DCBRECU    YES, RECFM=I?
         TM    DCBRECFM,DCBRECU    YES, RECFM=U?
         BO    SYSPPUTU            YES, GO HANDLE
         TM    DCBRECFM,DCBRECV    NO, RECFM=V?
         BO    SYSPPUTV            YES, GO HANDLE
         SPACE 1
***      THE SYSPRINT FILE IS RECFM=F.
         SPACE 1
         PUT   (1)                 GET NEXT OUTPUT BUFFER
         DROP  R1                  RELEASE SYSPRINT DCB BASE
         LA    SYSPCTR,1(,SYSPCTR) COUNT SYSPRINT RECORD
         LR    R0,R1               --> COPY SINK
         LH    R1,DCBLRECL-IHADCB+SYSPRINT GET L'COPY SINK
         LA    R14,XRL             --> INPUT LINE
         LA    R15,L'XRL           GET L'INPUT LINE
         ICM   R15,15,=C' '        GET COPY PADDING CHARACTER
         MVCL  R0,R14              COPY LISTING RECORD
         B     GETLOOP             DONE HERE
         SPACE 1
***      THE SYSPRINT FILE IS RECFM=U.
         SPACE 1
         USING IHADCB,R1           RESTORE SYSPRINT DCB BASE
SYSPPUTU LA    R3,L'XRL            GET L'INPUT LINE
         CH    R3,DCBBLKSI         IS LISTING LINE TOO LONG?
         BNH   SYSPULOK            NO, PROCEED
         LH    R3,DCBBLKSI         YES, TRUNCATE
SYSPULOK STH   R3,DCBLRECL         SET NEEDED BUFFER LENGTH
         PUT   (1)                 GET NEXT OUTPUT BUFFER
         DROP  R1                  RELEASE SYSPRINT DCB BASE
         LA    SYSPCTR,1(,SYSPCTR) COUNT THE SYSPRINT LINE
         LR    R0,R1               --> COPY SINK
         LR    R1,R3               GET L'COPY SINK
         LA    R2,XRL              --> COPY SOURCE
         MVCL  R0,R2               COPY LISTING LINE
         B     GETLOOP             DONE HERE
         SPACE 1
***      THE SYSPRINT FILE IS RECFM=V.
         SPACE 1
         USING IHADCB,R1           RESTORE SYSPRINT DCB BASE
SYSPPUTV LA    R3,L'XRL            GET L'INPUT LINE
         LA    R4,8(,R3)           GET MIN NEEDED BLKSIZE
         SH    R4,DCBBLKSI         COMPARE WITH ACTUAL MAX; OK?
         BNP   SYSPVLOK            YES, PROCEED
         TM    DCBRECFM,DCBRECSB   NO, LRECL>BLKSIZE; CAN THIS BE
*                                  SWALLOWED?
         BNZ   SYSPVLOK            YES, PROCEED
         SR    R3,R4               NO, REDUCE L'DATA APPROPRIATELY
SYSPVLOK LA    R4,4(,R3)           GET NEEDED BUFFER LENGTH
         STH   R4,DCBLRECL         STORE FOR QSAM
         PUT   (1)                 GET NEXT OUTPUT BUFFER
         DROP  R1                  RELEASE SYSPRINT DCB BASE
         LA    SYSPCTR,1(,SYSPCTR) COUNT THE OUTPUT LINE
         SLL   R4,16               CREATE AN RDW
         ST    R4,0(,R1)           STORE INTO OUTPUT BUFFER
         LA    R0,4(,R1)           --> DATA COPY SINK
         LR    R1,R3               GET L'COPY SINK
         LA    R2,XRL              --> COPY SOURCE
         MVCL  R0,R2               COPY DATA TO OUTPUT BUFFER
         B     GETLOOP             DONE HERE
         EJECT
*=====================================================================*
* -- XREFIN -- TERMINATION                                            *
*=====================================================================*
         SPACE 1
***      EOD HAS OCCURED ON THE LISTING FILE. DISPLAY ALL     01/85 DBC
***      COUNTERS.                                            01/85 DBC
         SPACE 1
EOLIST   CVD   INPUTCTR,CVDWA      CNVRT LISTING COUNT TO DEC 01/85 DBC
         LA    R1,LISTCNT#+L'LISTCNT#-1 PRIME ICO 1-DIGIT NUMBER
         EDMK  LISTCNT#,CVDWA+3    CNVRT TO EBCDIC
         MVC   LISTCNT#+1(L'LISTCNT#-1),0(R1) LEFT ADJUST
         #PUT  LISTCNT           DISPLAY THE MESSAGE
         CVD   SYSPCTR,CVDWA       CNVRT SYSPRINT COUNT TO DECIMAL
         LA    R1,SYSPCNT#+L'SYSPCNT#-1 PRIME ICO 1-DIGIT NUMBER
         EDMK  SYSPCNT#,CVDWA+3    CNVRT TO EBCDIC
         MVC   SYSPCNT#+1(L'SYSPCNT#-1),0(R1) LEFT ADJUST
         #PUT  SYSPCNT           DISPLAY THE MESSAGE
         CVD   XREFCTR,CVDWA       CNVRT XREF COUNT TO DECIMAL
         LA    R1,XREFCNT#+L'XREFCNT#-1 PRIME ICO 1-DIGIT NUMBER
         EDMK  XREFCNT#,CVDWA+3    CNVRT TO EBCDIC
         MVC   XREFCNT#+1(L'XREFCNT#-1),0(R1) LEFT ADJUST
         #PUT  XREFCNT           DISPLAY THE MESSAGE
         SPACE 1
***      CLOSE ALL FILES AND FREE THEIR BUFFER POOLS.
         SPACE 1
         LA    R1,LISTING          --> LISTING DCB
         BAS   R14,CLOSE           CLOSE IT
         LA    R1,SYSPRINT         --> SYSPRINT DCB
         BAS   R14,CLOSE           CLOSE IT
         LA    R1,XREF             --> XREF DCB
         BAS   R14,CLOSE           CLOSE IT
         LA    R1,SYSTERM          --> SYSTERM DCB
         BAS   R14,CLOSE           CLOSE IT
         SPACE 1
***      TERMINATE.
         SPACE 1
EXIT     LH    R15,RCD             GET THE COMPLETION CODE
         #EXIT ((R14,R12)),RC=(R15) RETURN TO CALLER
EXIT16   MVI   RCD+1,16            SET ERROR RETURN CODE
         B     EXIT                GO TERMINATE
         EJECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*        -- XREFIN -- CLOSE - DATASET CLOSE AND FREEPOOL ROUTINE      *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
***      CLOSE -- THIS ROUTINE CHECKS TO SEE IF A GIVEN DCB
***      IS OPEN. IF IT IS, THEN IT IS CLOSED AND ITS I/O
***      BUFFERS ARE RELEASED.
***
***      INPUTS :
***            - R1 POINTS TO THE DCB TO BE CLOSED.
***            - R14 POINTS TO A RETURN ADDRESS.
***
***      RETURN 0(,R14) :
***            - THE DCB, IF NECESSARY, IS CLOSED.
***            - ALL REGISTERS ARE RESTORED.
         SPACE 1
         USING IHADCB,R1           DCL DCB BASE
CLOSE    TM    DCBOFLGS,DCBOFOPN   IS THE DCB OPEN?
         BZR   R14                 NO, RETURN TO CALLER
         STM   R14,R2,SAVECLOS     YES, SAVE REGISTERS
         LR    R2,R1               COPY THE DCB PTR
         DROP  R1                  RELREASE OLD DCB BASE
         USING IHADCB,R2           DCL NEW DCB BASE
         CLOSE ((R2))              CLOSE THE DCB
         FREEPOOL (R2)             RELEASE ITS BUFFERS
         LM    R14,R2,SAVECLOS     RESTORE REGISTERS
         DROP  R2                  RELEASE THE DCB BASE
         BR    R14                 RETURN TO CALLER
         EJECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* -- XREFIN -- PUTSYST - SYSTERM MESSAGE PRINTING ROUTINE             *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
***      PUTSYST -- THIS ROUTINE WRITES A MESSAGE TO THE
***      SYSTERM FILE, IF ANY.
***
***      INPUT :
***            - R1 POINTS TO A MESSAGE BLOCK.
***            - R14 POINTS TO A RETURN ADDRESS.
***
***      RETURN 0(,R14) :
***            - IF A SYSTERM FILE IS OPEN, THEN THE
***              MESSAGE HAS BEEN SENT.
***            - ALL REGISTERS ARE RESTORED.
         SPACE 1
PUTSYST  TM    DCBOFLGS-IHADCB+SYSTERM,DCBOFOPN IS SYSTERM OPEN?
         BZR   R14                 NO, RETURN TO CALLER
         STM   R14,R1,SAVESYST     YES, SAVE REGISTERS
         MVC   DCBLRECL+1-IHADCB+SYSTERM(1),0(R1) YES, SET L'MSG
         LA    R0,1(,R1)           --> MSG
         PUT   SYSTERM,(0)         SEND THE MESSAGE
         LM    R14,R1,SAVESYST     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         EJECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* -- XREFIN -- DATA AREA - CROSS-REFERENCE TABLES PROCESSING CONTROLS *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
***      POINTER VECTOR FOR SUPPORTED XREFS.
         SPACE 1
TYPES    DS    0F
         DC    A(ASM)              S/370 XF ASSEMBLER
         DC    A(ASMH2)            XA H ASSEMBLER V2                V11
         DC    A(EDX)              CROSS ASSEMBLER FOR THE SERIES/1
         DC    A(0)                DELIMITER
         SPACE 1
***      S/370 XF ASSEMBLER
         SPACE 1
ASM      CLC   ASMTTID,XRL+49      TTCHK
         MVC   XRRMODUL-XRRHEAD+HEAD,XRL+1 MOGET
         TM    XRL+36,C'0'         XRCHK                            V11
         CLI   XRL+1,C' '          LBCHK                      01/85 DBC
         NOPR  0                   (FILLER)                   01/85 DBC
         MVC   XRRLABEL-XRRHEAD+HEAD,XRL+1 LBGET
         DC    H'30'               REFSOFFS
         #TEST SIZE=(*-ASM,EQ,TABLELEN)
ASMTTID  DC    C'  CROSS-REFERENCE  '
         SPACE 1                                                    V11
***      XA H ASSEMBLER VERSION 2                                   V11
         SPACE 1                                                    V11
ASMH2    CLC   ASMH2TTI,XRL+44     TTCHK                            V11
         MVC   XRRMODUL-XRRHEAD+HEAD,XRL+1 MOGET                    V11
         TM    XRL+34,C'0'         XRCHK                            V11
         CLC   XRL+10(20),XRL+9    LBCHK                      01/85 DBC
         MVC   XRRLABEL-XRRHEAD+HEAD,XRL+1 LBGET                    V11
         DC    H'30'               REFSOFFS                         V11
         #TEST SIZE=(*-ASMH2,EQ,TABLELEN)                           V11
ASMH2TTI DC    C'  CROSS REFERENCE  '                               V11
         SPACE 1
***      CROSS ASSEMBLER FOR THE SERIES/1
         SPACE 1
EDX      CLC   EDXTTID,XRL+39      TTCHK
         MVC   XRRMODUL-XRRHEAD+HEAD,XRL+1 MOGET
         B     EDXXRCHK            XRCHK : EXTENDED CHECKING NEEDED
         CLI   XRL+11,C' '         LBCHK                      01/85 DBC
         NOPR  0                   (FILLER)                   01/85 DBC
         MVC   XRRLABEL-XRRHEAD+HEAD,XRL+11 LBGET
         DC    H'17'               REFSOFFS
         #TEST SIZE=(*-EDX,EQ,TABLELEN)
EDXTTID  DC    C'  CROSS-REFERENCE LISTING  '
         SPACE 1
         DROP  ,                   RELEASE ALL BASES
         EJECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* -- XREFIN -- DATA AREA (NON-REENTRANT)                              *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
***      DATA CONTROL BLOCKS.
         SPACE 1
         PUSH  PRINT
         PRINT NOGEN
         SPACE 1
LISTING  DCB   DDNAME=LISTING,DSORG=PS,MACRF=GL,EXLST=LISTXLST,        *
               EODAD=EOLIST
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PL,EXLST=SYSPXLST
XREF     DCB   DDNAME=XREF,DSORG=PS,MACRF=PL,EXLST=XREFXLST,RECFM=FB,  *
               LRECL=XRRLEN
SYSTERM  DCB   DDNAME=SYSTERM,DSORG=PS,MACRF=PM,RECFM=UA,LRECL=255,    *
               BLKSIZE=255
         SPACE 1
         POP   PRINT
         SPACE 1
         DS    0F                  EXIT LISTS
LISTXLST DC    X'85',AL3(LISTOPEN)
SYSPXLST DC    X'85',AL3(SYSPOPEN)
XREFXLST DC    X'85',AL3(XREFOPEN)
         SPACE 1
***      MISCELLANEOUS DATA.
         SPACE 1
CVDWA    DS    D                   CVD WORK AREA
         SPACE 1
         DS    0D
HEAD     DC    CL(L'XRRHEAD)' '    XREF RECORD HEADER CONSTRUCTION AREA
         SPACE 1
SAVESYST DS    4A                  SAVE AREA FOR PUTSYST
SAVECLOS DS    5A                  SAVE AREA FOR CLOSE
         SPACE 1
RCD      DC    H'0'                PROGRAM RETURN CODE
         SPACE 1
FLAG     DC    AL1(TITNEXT)        LOCAL PROGRAM CONTROL FLAGS      V11
GOTSUTIT EQU   B'10000000'         AN XREF LISTING SUB-TITLE HAS BEEN
*                                  SAVED IN THE XREF DATA SET.
TITNEXT  EQU   B'01000000'         A TITLE LINE IS NEXT (MACHINE    V11
*                                  CCC)                             V11
EOXREFF  EQU   B'00100000'         PAST EO-XREF                     V11
         SPACE 1
         LTORG ,                   LITTERAL POOL
         SPACE 1
***      BUFFERS AND MESSAGES.
         SPACE 1
XRL      DS    CL(PRTLEN)          LOCAL INPUT DATA BUFFER
         SPACE 1
         DC    AL1(XREFTITL)       DEFAULT IS SHORT TITLE
XREFTIT  DC    C'1CROSS-REFERENCE INPUT FOR '                 01/85 DBC
XREFTITN DS    CL(L'XRRMODUL)                                 01/85 DBC
XREFTITL EQU   *-XREFTIT
         SPACE 1
         DC    AL1(LISTCNTL)
LISTCNT  DC    C'0LISTING RECORDS READ -'
LISTCNT# DC    X'40202020202020202120'
LISTCNTL EQU   *-LISTCNT
         DC    CL(L'LISTCNT#-1)' '
         SPACE 1
         DC    AL1(SYSPCNTL)
SYSPCNT  DC    C' SYSPRINT RECORDS WRITTEN -'
SYSPCNT# DC    X'40202020202020202120'
SYSPCNTL EQU   *-SYSPCNT
         DC    CL(L'SYSPCNT#-1)' '
         SPACE 1
         DC    AL1(XREFCNTL)
XREFCNT  DC    C' XREF RECORDS WRITTEN -'
XREFCNT# DC    X'40202020202020202120'
XREFCNTL EQU   *-XREFCNT
         DC    CL(L'XREFCNT#-1)' '
         EJECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* -- XREFIN -- LISTOPEN - DCB OPEN EXIT FOR THE LISTING FILE          *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
***      NOTE, THIS ROUTINE IS ALSO BRANCHED TO FROM
***      SYSPOPEN.
         SPACE 1
         USING IHADCB,R1           DCL LISTING/SYSPRINT DCB BASE
         USING LISTOPEN,R15        DCL LOCAL BASE
LISTOPEN OI    DCBRECFM,DCBRECBR   FORCE BLOCKING                   V11
         XR    R3,R3               CLEAR
         ICM   R3,3,DCBBLKSI       GET BLKSIZE
         XR    R4,R4               CLEAR
         ICM   R4,3,DCBLRECL       GET LRECL
         TM    DCBRECFM,DCBRECU    RECFM=U OR UNDEFINED?
         BNM   LORFMU              YES, GO HANDLE
         TM    DCBRECFM,DCBRECF    NO, RECRM=F?
         BNZ   LORFMF              YES, GO HANDLE
         SPACE 1
***      LISTING/SYSPRINT RECFM=V.
         SPACE 1
         LTR   R4,R4               IS AN LRECL DEFINED?
         BNZ   *+L'*+4             YES, PROCEED
         LA    R4,259              NO, GET DEFAULT
         STH   R4,DCBLRECL         STORE LRECL
         LA    R4,4(,R4)           GET NECESSARY BLKSIZE
         CR    R4,R3               IS GIVEN BLKSIZE BIG ENOUGH?
         BNH   *+L'*+10            YES, PROCEED
         TM    DCBRECFM,DCBRECSB   NO, DOES IT MATTER? (SPANNED RECS?)
         BNZ   *+L'*+2             NO, PROCEED
         LR    R3,R4               YES, RESET THE BLKSIZE
         STH   R3,DCBBLKSI         STORE BLKSIZE
         BR    R14                 RETURN TO OPEN
         SPACE 1
***      LISTING/SYSPRINT RECFM=U.
         SPACE 1
LORFMU   OI    DCBRECFM,DCBRECU    FORCE RECFM=U
         LTR   R3,R3               BLKSIZE DEFINED?
         BNZ   *+L'*+10            YES, PROCEED
         LTR   R3,R4               NO, GET LRECL; DEFINED?
         BNZ   *+L'*+4             YES, PROCEED
         LA    R3,255              NO, GET DEFAULT BLKSIZE
         STH   R3,DCBBLKSI         SET BLKSIZE
         STH   R3,DCBLRECL         FORCE LRECL=BLKSIZE
         BR    R14                 RETURN TO OPEN
         SPACE 1
***      LISTING/SYSPRINT RECFM=F.
         SPACE 1
LORFMF   LTR   R4,R4               IS A LRECL GIVEN?
         BNZ   *+L'*+4             YES, PROCEED
         LA    R4,255              NO, LOAD DEFAULT VALUE
         XR    R2,R2               CLEAR
         DR    R2,R4               GET BLOCKING FACTOR
         MR    R2,R4               ISURE INTEGRAL BLKSIZE
         CR    R3,R4               IS FILE BLOCKED?
         BH    *+L'*+6             YES, PROCEED
         LR    R3,R4               NO, SET FILE UNBLOCKED
         NI    DCBRECFM,255-DCBRECBR CLEAR BLOCKING SIGNAL
         STH   R4,DCBLRECL         STORE LRECL
         STH   R3,DCBBLKSI         STORE BLKSIZE
         BR    R14                 RETURN TO OPEN
         DROP  ,                   RELEASE ALL BASES
         SPACE 1
         LTORG ,                   LOCAL LITTERAL POOL
         EJECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* -- XREFIN -- SYSPOPEN - DCB OPEN EXIT FOR THE SYSPRINT FILE         *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
***      NOTE, AFTER SOME INITIAL PROCESSING, THIS ROUTINE
***      XFERS TO LISTOPEN TO COMPLETE ITS PROCESSING.
         SPACE 1
         USING IHADCB,R1           DCL SYSPRINT DCB BASE
         USING SYSPOPEN,R15        DCL LOCAL PROGRAM BASE
SYSPOPEN L     R2,=A(LISTING)      --> LISTING DCB
         CLI   DCBRECFM,0          IS SYSPRINT RECFM DEFINED?
         BNE   *+L'*+6             YES, PROCEED
         MVC   DCBRECFM,DCBRECFM-IHADCB(R2) NO, COPY FROM LISTING FILE
         ICM   R0,3,DCBLRECL       IS SYSPRINT LRECL DEFINED?
         BNZ   *+L'*+6             YES, PROCEED
         MVC   DCBLRECL,DCBLRECL-IHADCB(R2) NO, COPY FROM LISTING FILE
         ICM   R0,3,DCBBLKSI       IS SYSPRINT BLKSIZE DEFINED?
         BNZ   *+L'*+6             YES, PROCEED
         MVC   DCBBLKSI,DCBBLKSI-IHADCB(R2) NO, COPY FROM LISTING FILE
         SPACE 1
***      XFER CONTROL TO LISTOPEN.
         SPACE 1
         L     R15,=A(LISTOPEN)    --> LISTOPEN
         DROP  R15                 RELEASE LOCAL PROGRAM BASE
         BR    R15                 XFER TO LISTOPEN
         DROP  ,                   RELEASE ALL BASES
         SPACE 1
         LTORG ,                   LOCAL LITTERAL POOL
         EJECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* -- XREFIN -- XREFOPEN - DCB OPEN EXIT FOR THE XREF FILE             *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
         USING IHADCB,R1           DCL XREF DCB BASE
         USING XREFOPEN,R15        DCL LOCAL PROGRAM BASE
XREFOPEN LH    R3,DCBBLKSI         GET BLKSIZE
         LTR   R3,R3               DEFINED?
         BP    *+L'*+4             YES, PROCEED
         LH    R3,=Y(6233)         NO, GET DEFAULT MAX VALUE  07/85 DBC
         LH    R4,DCBLRECL         GET LRECL
         XR    R2,R2               CLEAR
         DR    R2,R4               GET BLOCKING FACTOR
         MR    R2,R4               GET INTEGRAL BLKSIZE
         CR    R3,R4               IS FILE BLOCKED?
         BH    *+L'*+6             YES, PROCEED
         LR    R3,R4               NO, RESET LRECL=BLKSIZE
         NI    DCBRECFM,255-DCBRECBR CLEAR BLOCKING SIGNAL
         STH   R3,DCBBLKSI         STORE BLKSIZE
         BR    R14                 RETURN TO OPEN
         DROP  ,                   RELEASE ALL BASES
         SPACE 1
         LTORG ,                   LOCAL LITTERAL POOL
         EJECT
*=====================================================================*
* -- XREFOUT -- INITIALIZATION/TERMINATION                            *
*=====================================================================*
         SPACE 1
***      STANDARD NON-REENTRANT ENTRY LINKAGE WITH TWO
***      BASES.
         SPACE 1
XREFOUT  #ENTER XREFOUT
               BASES=(BASE1REG,BASE2REG)
         SPACE 1
***      COMPLETE THE TITLE LINE FROM PARM FIELD
***      INFORMATION.
         SPACE 1
         ICM   R1,7,1(R1)          --> PARM FIELD; EXIST?
         BZ    NOPARM              NO, SKIP
         LH    R15,0(,R1)          YES, GET L'PARM DATA
         LTR   R15,R15             NULL?
         BNP   NOPARM              YES, SKIP
         CH    R15,=H'5'           SEE IF ONLY MULTIPLE MODULES    -EU-
         BL    SETTIT                   REFERENCES REQUESTED       -EU-
         CLC   2(5,R1),=C'ONLY/'                                   -EU-
         BNE   SETTIT                                              -EU-
         OI    FLAGO,ONLYMM                                        -EU-
         SH    R15,=H'5'                                           -EU-
         BNP   NOPARM                                              -EU-
         LA    R1,5(R1)                                            -EU-
         MVC   TITLEBUF+1(5),=C'SHORT'                             -EU-
SETTIT   MVC   TITLFOR,=C'FOR'     ADJUST TITLE TEXT               -EU-
         LA    R14,2(,R1)          --> PARM FIELD DATA
         LA    R0,TITLWHOM         --> TITLE FIELD
         LA    R1,L'TITLWHOM       GET L'COPY SINK
         ICM   R15,8,=C' '         LOAD PAD CHARACTER
         MVCL  R0,R14              COPY PARM TO TITLE
         SPACE 1
***      OPEN THE XREF FILE FOR INPUT.
         SPACE 1
NOPARM   OPEN  XREFO               OPEN THE XREF FILE FOR INPUT
         TM    DCBOFLGS-IHADCB+XREFO,DCBOFOPN DOES THE FILE EXIST?
         BZ    EXITO16             NO, TEMINATE
         SPACE 1
***      OPEN THE SYSPRINT FILE FOR OUTPUT.
         SPACE 1
         OPEN  (SYSPRINO,OUTPUT)   OPEN THE SYSPRINT FILE
         SPACE 1
***      FILL IN THE SORT/MERGE COMMANDS SKELETON.
         SPACE 1
         LA    R1,L'XRRHEAD        GET LENGTH OF SORT FIELD
         CVD   R1,CVDWAO           CNVRT TO DECIMAL
         UNPK  CMDSORLN,CVDWAO     CNVRT TO EBCDIC
         OI    CMDSORLN+L'CMDSORLN-1,B'11110000' FIX THE SIGN
         LA    R1,XRRLEN           GET LENGTH OF SORT RECORD
         CVD   R1,CVDWAO           CNVRT TO DECIMAL
         UNPK  CMDRCDLN,CVDWAO     CNVRT TO EBCDIC
         OI    CMDRCDLN+L'CMDRCDLN-1,B'11110000' FIX THE SIGN
         SPACE 1                                              01/85 DBC
***      GET A COMPLIMENTED TIMESTAMP WHICH WILL BE USED TO   01/85 DBC
***      RESET THE TIMESTAMP FIELDS IN ALL RECORDS WRITTEN    01/85 DBC
***      TO THE REWRITE FILE.                                 01/85 DBC
         SPACE 1                                              01/85 DBC
         STCK  RSETSTMP            GET THE CLOCK              01/85 DBC
         XC    RSETSTMP,=8X'FF'    COMPLIMENT IT              01/85 DBC
         SPACE 1
***      INVOKE SORT/MERGE. NOTE, THE MAJOR PROCESSING IS
***      DONE IN THE E35 (SORTOUT) EXIT.
         SPACE 1
         LA    R1,PLISTPTR         --> THE S/M PLIST
         LINK  EP=SORT             INVOKE SORT/MERGE
         SPACE 1
***      CLOSE FILES AND FREE BUFFERS.
         SPACE 1
         CLOSE REWRITE             CLOSE THE XREF/REWRITE FILE
         FREEPOOL XREFO            FREE ITS BUFFERS
         SPACE 1
         TM    DCBOFLGS-IHADCB+SYSPRINO,DCBOFOPN WAS SYSPRINT USED?
         BZ    EXITO               NO, DONE HERE
         CLOSE SYSPRINO            YES, CLOSE IT
         FREEPOOL SYSPRINO         FREE ITS BUFFERS
         SPACE 1
***      RETURN TO CALLER.
         SPACE 1
EXITO    LH    R15,RCDO            GET THE RETURN CODE
         #EXIT ((R14,R12)),RC=(R15) RETURN TO CALLER
EXITO16  MVI   RCDO+1,16           SET ERROR RETURN CODE
         B     EXITO               RETURN TO CALLER
         DROP  ,                   RELEASE ALL BASES
         EJECT
*=====================================================================*
* -- XREFOUT -- SORTIN - SORT/MERGE E15 (INPUT) EXIT                  *
*=====================================================================*
         SPACE 1
***      STANDARD NON-REENTRANT ENTRY LINKAGE.
         SPACE 1
SORTIN   #ENTER ESDTYPE=NONE,BASES=(BASE1REG)
         SPACE 1
***      READ THE NEXT RECORD AND PASS IT TO SORT/MERGE.
         SPACE 1
         GET   XREFO               LOCATE THE NEXT RECORD
         #EXIT ((R14,R0),(R2,R12)),RC=12 PASS IT (VIA R1) TO SORT/MERGE
         SPACE 1
***      EOD HAS OCCURED. TERMINATE THE INPUT PHASE.
         SPACE 1
EOXREF   #EXIT ((R14,R12)),RC=8    TELL SORT/MERGE "NO MORE INPUT"
         DROP  ,                   RELEASE ALL BASES
         EJECT
*=====================================================================*
* -- XREFOUT -- SORTOUT - SORT/MERGE E35 (OUTPUT) EXIT                *
*=====================================================================*
         SPACE 1
         #PUT  SUBAD=PUTSYSP,MF=INIT MACRO RESET
         SPACE 1
***      STANDARD NON-REENTRANT ENTRY LINKAGE.
         SPACE 1
SORTOUT  #ENTER ESDTYPE=NONE,BASES=(BASE1REG)
         L     RCDPTR,0(,R1)       --> THE OUTPUT RECORD
         USING XREFRCD,RCDPTR      DCL A BASE FOR IT
         SPACE 1
***      IF THIS IS THE FIRST OUTPUT RECORD, THEN CLOSE AND
***      THEN RE-OPEN THE XREF FILE FOR OUTPUT.
         SPACE 1
         TM    FLAGO,OUTNOW        1ST OUTPUT RECORD?
         BNZ   OUTCONT             NO, SKIP INITIALIZATION
         OI    FLAGO,OUTNOW        YES, CLOSE INIT GATE
         CLOSE XREFO               CLOSE THE XREF INPUT FILE
         OPEN  (REWRITE,OUTPUT)    RE-OPEN FOR OUTPUT
         SPACE 1
***      IF THIS IS THE LAST CALL SIGNAL (RCDPTR=0), THEN
***      SET UP A FAKE RECORD POINTER SO THAT I CAN PROCEED
***      TO FORCE THE OUTPUT OF PREVIOUSLY ACCUMULATED
***      DATA.
         SPACE 1
OUTCONT  LTR   RCDPTR,RCDPTR       ANY MORE RECORDS?
         BNZ   OUTPROCD            YES, PROCEED
         LA    RCDPTR,DUMYHEAD     NO, --> DUMMY LAST RECORD
         SPACE 1                                              07/84 DBC
***      IF THE CURRENT RECORD IS A PURGE CONTROL RECORD,     07/84 DBC
***      THEN MOVE THE NAME OF THE MODULE TO BE MERGED OVER   07/84 DBC
***      TO THE MODULE NAME FIELD SO AS NOT TO MESS UP        07/84 DBC
***      SUBSEQUENT PROCESSING.                               07/84 DBC
         SPACE 1                                              07/84 DBC
OUTPROCD CLI   XRRLABEL,C' '       P.C.R. OR TIMESTAMP RCD?   01/85 DBC
         BH    NOTPCR              NO, XREF RECORD; SKIP      01/85 DBC
         BL    OUTNEXT             NO, GARBAGE, DELETE IT     01/85 DBC
         CLI   XRRLABEL+1,X'FF'    YES, TIMESTAMP RCD?        01/85 DBC
         BE    NOTPCR              YES, SKIP                  01/85 DBC
         SPACE 1                                              01/85 DBC
         MVC   RJBUF(L'XRRMODUL),XRRLABEL+1 NO, GET THE NAME  07/84 DBC
*                                  OF THE MODULE TO PURGE     07/84 DBC
         #TEST SIZE=(L'RJBUF,GE,L'XRRMODUL)                   07/84 DBC
         MVC   XRRLABEL+1(L'XRRLABEL-1),XRRLABEL CLEAR JUNK   07/84 DBC
         MVC   XRRMODUL,RJBUF      COPY MODULE NAME TO PROPER 07/84 DBC
*                                  PLACE                      07/84 DBC
         SPACE 1
***      EXAMINE THE CURRENT RECORD TO SEE WHAT
***      RELATIONSHIP IT BEARS TO THE PREVIOUSLY RECEIVED
***      RECORD.
         SPACE 1
NOTPCR   ICM   R3,15,STMPCRNT      --> CURRENT REFERENCES     07/84 DBC
*                                  ACCUM CONTROL BLK; EXIST?  07/84 DBC
         BZ    DIFMODUL            NO, (1ST CALL FROM S/M);   07/84 DBC
*                                  GO HANDLE LABEL/MODULE     07/84 DBC
*                                  COMBO SWITCH               07/84 DBC
         USING STAMP,R3            YES, DCL CNTL ENTRY BASE   07/84 DBC
         CLC   =C'  ',STMPLABL     ARE REFERENCES FROM THE    01/85 DBC
*                                  CURRENT ASSEMBLY BEING     07/84 DBC
*                                  PURGED?                    07/84 DBC
         BNE   NOTPURGE            NO, PROCEED                01/85 DBC
         CLC   XRRMODUL,STMPMODU   YES, IS THE NEW RECORD     07/84 DBC
*                                  FROM THE CURRENT ASSEMBLY? 07/84 DBC
         BE    OUTNEXT             YES, IGNORE IT             07/84 DBC
*                                  NO, PROCEED (FOR NOW)      07/84 DBC
NOTPURGE CLC   XRRHEAD,OUTHEAD     IS THE CURRENT RECORD FOR THE SAME
*                                  LABEL IN THE SAME ASSEMBLY OF THE
*                                  SAME MODULE AS WAS THE     01/85 DBC
*                                  PRIOR RECORD?              01/85 DBC
         BE    CNTREFS             YES, GO COUNT THE NUMBER OF
*                                  REFERENCES THAT IT CONTAINS
         CLC   XRRLABEL(L'XRRLABEL+L'XRRMODUL),OUTLABEL NO, IS THE
*                                  CURRENT RECORD FOR THE SAME LABEL IN
*                                  THE SAME MODULE BUT IN A DIFFERENT
*                                  (OLDER) ASSEMBLY?
         BE    OUTNEXT             YES, IGNORE
         CLC   XRRLABEL,OUTLABEL   NO, IS THE CURRENT RECORD  07/84 DBC
*                                  FOR THE SAME LABEL IN A    07/84 DBC
*                                  DIFFERENT ASSEMBLY?        07/84 DBC
         BE    DIFMODUL            YES, GO HANDLE             07/84 DBC
         SPACE 1
***      THE CURRENT RECORD IS THE FIRST FOR A NEW LABEL.
***      BEFORE I CAN PROCESS IT, I MUST FIRST DUMP (TO THE
***      PRINTER) MY ACCUMULATORS FOR THE PREVIOUS LABEL.
         SPACE 1                                              07/84 DBC
         CLI   STMPLABL,C' '       WAS THE PRECEEDING RECORD  01/85 DBC
*                                  FOR A TIMESTAMP RECORD OR  01/85 DBC
*                                  A PURGED ASSEMBLY?         01/85 DBC
         BE    DIFMODUL            YES, THERE IS NOTHING TO   01/85 DBC
*                                  DISPLAY                    07/84 DBC
         NI    FLAGO,255-NOTFOOLD  NO, THIS LABEL MIGHT BE A  01/85 DBC
*                                  LEFTOVER FROM A PRIOR      01/85 DBC
*                                  ASSEMBLY THAT HAS ACTUALLY 01/85 DBC
*                                  BEEN DELETED IN A MORE     01/85 DBC
*                                  RECENT ASSEMBLY. OR IT     01/85 DBC
*                                  MIGHT BE FROM AN           01/85 DBC
*                                  "XREF(FULL)" ASSEMBLY AND  01/85 DBC
*                                  NOT ACTUALLY HAVE ANY      01/85 DBC
*                                  REFERENCES. I.E., ITS      01/85 DBC
*                                  TOTAL REFERENCE COUNT      01/85 DBC
*                                  MIGHT BE ZERO.             01/85 DBC
         MVC   XRPLABEL,OUTLABEL   COPY PREV LABEL TO THE PRINT LINE
         MVI   XRPERRF,C' '        CLEAR THE OVERFLOW ERROR SIGNAL
         TM    FLAGO,STMPOVFL      DID A MODULE NAMES OVERFLOW OCCUR
*                                  FOR THIS LABEL?
         BZ    REFNOFLW            NO, PROCEED
         MVI   XRPERRF,C'*'        YES, SET THE VISUAL SIGNAL
         NI    FLAGO,255-STMPOVFL  CLEAR THE CONTROL SIGNAL
REFNOFLW LM    R3,R5,STMPCTL       LOAD STAMPS SCAN CONTROL
         DROP  R3                  RELEASE OLD STAMP PTR BASE 07/84 DBC
         USING STAMP,R3            DCL NEW STAMP BASE
         SLR   R5,R4               --> LAST ENTRY             01/85 DBC
         SLR   R3,R4               --> 0TH ENTRY (1-ORIGIN)   01/85 DBC
NEXTALIN MVI   XRPENTS,C' '        CLEAR REFERENCES DISPLAY -
         MVC   XRPENTS+1(L'XRPENTS-1),XRPENTS FIELDS
         LA    R2,XRPENTS          --> SO-FIELDS
         LA    R0,XRPENTCT         GET # OF DISPLAY FIELDS
NEXTAREF BXH   R3,R4,LASTALIN      --> NEXT ACCUMULATOR
         CLC   STMPLABL,OUTLABEL   A COUNTER FOR THE PREVIOUS LABEL?
         BNE   NEXTAREF            NO, SKIP
         CP    STMPHITS,=P'0'      YES, ZERO HITS HERE?       01/85 DBC
         BE    NEXTAREF            YES, SKIP THIS ASSEMBLY    01/85 DBC
         OI    FLAGO,NOTFOOLD      NO, REMEMBER THAT THIS     01/85 DBC
*                                  LABEL REALLY DOES HAVE     01/85 DBC
*                                  REFERENCES.                01/85 DBC
         MVC   RJBUF,STMPMODU      MOVE MODULE NAME TO A BUFFER
*                                  THAT IS LEFT PADDED WITH BLANKS
         LA    R15,RJBUF+L'RJBUF-L'STMPMODU LOAD BLANKS BACK-SCANNER
         CLC   RJBUF,RJBUF-1       IS THE NAME BLANK?         07/84 DBC
         BE    BLANKNAM            YES, CAN'T JUSTIFY         07/84 DBC
         BASR  R14,0               NO, LOAD LOOP POINT        07/84 DBC
         BCTR  R15,0               BACK SCAN                  07/84 DBC
         TM    L'STMPMODU(R15),255-C' ' STILL A TRAILING BLANK?
         BZR   R14                 YES, CONTINUE BACK-SCAN    07/84 DBC
BLANKNAM MVC   XRPENTMO(L'STMPMODU,R2),1(R15) NO, GET ASM NME 07/84 DBC
*                                  RIGHT JUSTIFIED TO THE MSG BUFFER
         MVI   XRPENTHY(R2),C'-'   SET HYPHEN
         MVC   XRPENT#R(,R2),=X'2020202120' INSERT EDIT MASK
         LA    R1,XRPENT#R+L'XRPENT#R-1(,R2) PRIME ICO INSIGNIFICANCE
         EDMK  XRPENT#R-1(L'XRPENT#R+1,R2),STMPHITS CONVERT THE
*                                  NUMBER OF REFERENCES (TO
*                                  THIS LABEL FROM THIS MODULE) TO
*                                  EBCDIC.
         MVC   XRPENT#R(,R2),0(R1) LEFT ADJUST
         LA    R2,XRPENTLN(,R2)    --> NEXT DISPLAY FIELD
         BCT   R0,NEXTAREF         LOOP FOR NEXT ACCUMULATOR
         #PUT  XRPMSG              THE MSG BUFFER IS FULL; DISPLAY IT
         MVI   XRPLABEL,C' '       CLEAR LABEL FIELD
         MVC   XRPLABEL+1(L'XRPLABEL-1),XRPLABEL
         MVI   XRPERRF,C' '        CLEAR POSSIBLE OVERFLOW ERROR SIGNAL
         B     NEXTALIN            LOOP TO REFRESH THE PRT LINE BUFFER
         DROP  R3                  RELEASE THE STAMP BASE
LASTALIN TM    FLAGO,NOTFOOLD      DID THE LABEL REALLY HAVE  01/85 DBC
*                                  REFERENCES?                01/85 DBC
         BZ    DIFMODUL            NO, SKIP                   01/85 DBC
         AP    LBLCNT,=P'1'        YES, COUNT THE REFERENCED  01/85 DBC
*                                  LABEL                      01/85 DBC
         TM    FLAGO,ONLYMM        ONLY MULT. MOD. REF. REQUESTED? -EU-
         BZ    DSPLNE              NO, LIST ALL                    -EU-
         CLI   XRPLABEL,C' '       CLEARED LABEL FIELD             -EU-
         BE    DSPLNE              YES, IT IS A MULT. MOD. REF.    -EU-
         CLI   XRPENTS+XRPENTHY+XRPENTLN,C' '     AT LEAST 2 REF.? -EU-
         BNE   DSPLNE              YES, LIST IT                    -EU-
         AP    LBLOCNT,=P'1'       COUNT SINGLE REF. SKIPPED       -EU-
         B     DIFMODUL            AND DON'T DISPLAY               -EU-
DSPLNE   CLI   XRPENTS+XRPENTHY,C' ' IS THERE A PARTIALLY FILLED   -EU-
*                                  PRINT LINE LEFT OVER?
         BE    DIFMODUL            NO, DONE HERE              07/84 DBC
         #PUT  XRPMSG              YES, DISPLAY THE RESIDUE
         SPACE 1
***      THE CURRENT RECORD (PROBABLY) REFERENCES A
***      DIFFERENT MODULE THAN THE PREVIOUS. A NEW STAMP
***      MUST BE FOUND.
         SPACE 1
DIFMODUL CLI   XRRMODUL,X'FF'      IS THE CURRENT "RECORD"    07/84 DBC
*                                  THE DUMMY LAST RECORD?     07/84 DBC
         BE    OUTDONE             YES, GO TEMINATE
         MVC   OUTHEAD,XRRHEAD     NO, RESET THE RECORDS RELATIONSHIP
*                                  CONTROL INFORMATION
         LM    R15,R1,STMPCTL      LOAD STAMPS SEARCH CONTROLS
         BAS   R14,SRCH            SEARCH FOR A STAMP ENTRY FOR THE NEW
*                                  MODULE
         LR    R3,R1               (COPY POSSIBLE STAMP POINTER)
         USING STAMP,R3            (DCL POSSIBLE STAMP BASE)
         BE    ASMFOUND            A STAMP ENTRY WAS FOUND; GO PROCESS
         DROP  R3                  NO ENTRY FOUND; DROP BASE  07/84 DBC
         SPACE 1
***      THIS IS AN ENTIRELY NEW MODULE NAME. A NEW STAMP
***      ENTRY MUST BE CREATED.
         SPACE 1
         C     R15,=A(STAMPS)      IS THERE ROOM FOR A NEW    01/85 DBC
*                                  STAMP ENTRY?               07/84 DBC
         BH    ASMNFITS            YES, PROCEED
         OI    FLAGO,STMPMOVF+STMPOVFL NO, SET ERROR SIGNALS
         MVI   RCDO+1,4            SET ERROR COMPLETION CODE
         XC    OUTTSTMP,OUTTSTMP   CAUSE THE REMAINING RECORDS FOR THIS
*                                  LABEL/MODULE COMBINATION TO BE
*                                  IGNORED.
         B     REWRTRCD            IGNORE THIS RECORD         01/85 DBC
ASMNFITS CLC   =C'  ',XRRLABEL     WILL THIS NEW ENTRY BE FOR 01/85 DBC
*                                  A PURGED ASSEMBLY?         07/84 DBC
         BE    PRGNOCNT            YES, DON'T COUNT IT        01/85 DBC
         AP    ASMCNT,=P'1'        INCRIMENT MODULES COUNTER
PRGNOCNT LR    R14,R15             --> CURRENT SO-STAMPS LIST 01/85 DBC
         SR    R14,R0              --> NEW SO-STAMPS LIST (COPY SINK)
         ST    R14,STMPCTL         STORE NEW SO-LIST
         LR    R0,R15              --> CURRENT SO-STAMPS (COPY SOURCE)
         LR    R1,R3               --> INSERTION POINT
         SR    R1,R15              GET L'STAMPS TO SHIFT (L'COPY SRCE)
         LR    R15,R1              GET L'COPY SINK
         MVCL  R14,R0              SHIFT SOME STAMPS TO MAKE ROOM FOR
*                                  THE NEW STAMP
         LR    R3,R14              COPY NEW STAMP LOCATION PTR
         USING STAMP,R3            DCL A BASE FOR IT          07/84 DBC
         MVC   STMPHEAD,XRRHEAD    COPY LABEL/MODULE/TIMESTAMP
         SPACE 1
***      AN EXISTING STAMP ENTRY HAS BEEN FOUND FOR THE NEW
***      MODULE. RESET ITS LABEL AND REFERENCES COUNTER.
         SPACE 1
ASMFOUND ST    R3,STMPCRNT         STORE NEW CURRENT STAMP PTR
         CLC   =C'  ',STMPLABL     SHOULD THIS RECORD BE      01/85 DBC
*                                  PURGED?                    07/84 DBC
         BE    OUTNEXT             YES, DO SO                 01/85 DBC
         MVC   STMPLABL,XRRLABEL   RESET THE STAMP'S LABEL FIELD
         ZAP   STMPHITS,=P'0'      CLEAR THE REFERENCES COUNTER
         SPACE 1
***      COMPARE THE CURRENT RECORD'S TIME STAMP TO THE
***      TIME STAMP GIVEN IN THE STAMP. IF THEY ARE EQUAL,
***      THEN EVERYTHING IS OK. IF THE CURRENT RECORD'S
***      STAMP IS HIGH, THEN THE RECORD CONTAINS OBSELETE
***      DATA DUE TO A SUBSEQUENT REASSEMBLY OF THE SAME
***      MODULE, SO THE RECORD IS IGNORED. IF THE CURRENT
***      RECORD'S STAMP IS LOW, THEN XREFOUT HAS BEEN
***      COUNTING REFERENCES FROM THIS MODULE FOR LABELS
***      THAT NO LONGER EXIST.
         SPACE 1
         CLC   XRRTSTMP,STMPTIME   COMPARE TIME STAMPS
         BE    CNTREFS             EQUAL; GO COUNT THE NEW REFERENCES
         #DIE  L                   LOW (NEWER); LOGIC ERROR   01/85 DBC
         XC    OUTTSTMP,OUTTSTMP   HIGH (OLDER); IGNORE ALL REMAINING
*                                  RECORDS FOR THE SAME LABEL/MODULE
*                                  COMBINATION.
         B     OUTNEXT             IGNORE THIS RECORD TOO
         SPACE 1
***      AN ACCEPTABLE XREF DATA LINE HAS BEEN RECEIVED. I
***      WILL NOW SCAN IT TO COUNT THE NUMBER OF REFERENCES
***      THAT IT CONTAINS.
         SPACE 1
CNTREFS  CLI   XRRLABEL+1,X'FF'    TIMESTAMP RECORD?          01/85 DBC
         BE    REWRTRCD            YES, SKIP COUNTER          01/85 DBC
         NI    FLAGO,255-NOTFOOLD  THE CURRENT RECORD MIGHT   01/85 DBC
*                                  NOT CONTAIN REFERENCES TO  01/85 DBC
*                                  THE CURRENT LABEL. (IT     01/85 DBC
*                                  MIGHT BE FROM AN           01/85 DBC
*                                  "XREF(FULL)" ASSEMBLY).    01/85 DBC
         LA    R1,XRRDATA          --> DATA LINE
         AH    R1,XRROFFS          --> SO-REFERENCES FIELDS
         XR    R2,R2               CLEAR FOR 'TRT'
REFSLOOP LA    R15,XRRDATA+L'XRRDATA-1 --> LAST DATA CHARACTER
         SR    R15,R1              GET RECORD RESIDUE-1
         BM    CNTSDONE            EXIT IF DONE
         TRT   0(*-*,R1),TRTBLANK  (EXECUTED)
         EX    R15,*-6             SCAN FOR 1ST NON-BLANK
         BZ    CNTSDONE            EXIT IF THERE ARE NO MORE
         B     *(R2)               GOT ONE; EXAMINE IT
         B     CNTSDONE            +4 NON-BLANK IS ALSO NON-DIGIT; THIS
*                                     RECORD DOES NOT CONTAIN (ANY
*                                     MORE) REFERENCES. EXIT
         AP    STMPHITS,=P'1'      +8 NON-BLANK IS A DIGIT; COUNT THE
*                                  REFERENCE
         OI    FLAGO,NOTFOOLD      REMEMBER THAT THIS RECORD  01/85 DBC
*                                  REALLY DOES CONTAIN        01/85 DBC
*                                  REFERENCES                 01/85 DBC
         LA    R15,XRRDATA+L'XRRDATA-1 --> LAST DATA CHARACTER
         SR    R15,R1              GET RECORD RESIDUE-1; IS RCD DONE?
         BNP   CNTSDONE            YES, EXIT
         TRT   0(*-*,R1),TRTDIGTS  (EXECUTED)
         EX    R15,*-6             NO, SCAN FOR NEXT NON-DIGIT; MORE?
         BZ    CNTSDONE            NO, RECORD IS DONE; EXIT
         B     *(R2)               YES, EXAMINE THE NON-DIGIT
         B     CNTSDONE            +4 NON-DIGIT IS ALSO NON-BLANK; THIS
*                                     RECORD DOES NOT CONTAIN ANY MORE
*                                     REFERENCES.
         B     REFSLOOP            +8 NON-DIGIT IS A BLANK; LOOP TO
*                                     SCAN FOR THE NEXT REFERENCE
         DROP  R3                  RELEASE STAMP BASE
         SPACE 1
***      IF A REWRITE FILE IS OPEN, THEN COPY THIS RECORD
***      TO IT.
         SPACE 1
CNTSDONE TM    FLAGO,NOTFOOLD      DOES THE CURRENT RECORD    01/85 DBC
*                                  REALLY CONTAIN REFERENCES? 01/85 DBC
         BZ    OUTNEXT             NO, DON'T SAVE IT          01/85 DBC
REWRTRCD TM    DCBOFLGS-IHADCB+REWRITE,DCBOFOPN REWRITING TO BE DONE?
         BZ    OUTNEXT             NO, SKIP
         MVC   XRRTSTMP,RSETSTMP   YES, RESET THE TIMESTAMP   01/85 DBC
         PUT   REWRITE,(RCDPTR)    DO SO
         SPACE 1
***      RETURN TO SORT/MERGE.
         SPACE 1
OUTNEXT  #EXIT ((R14,R12)),RC=4    RETURN FOR NEXT RECORD
         EJECT ,                                              01/85 DBC
*=====================================================================*
* -- XREFOUT -- END OF SORT                                           *
*=====================================================================*
         SPACE 1
***      END OF SORT DETECTED. ISSUE FINAL MESSAGES AND
***      THEN MAKE A FINAL RETURN TO SORT/MERGE.
***      WIDOW CONTROL. INSURE THAT THERE IS SUFFICIENT       01/85 DBC
***      ROOM LEFT AT THE BOTTOM OF THE CURRENT PAGE TO       01/85 DBC
***      MOST IF NOT ALL OF THE END-OF-PROGRAM MESSAGES.      01/85 DBC
         SPACE 1                                              01/85 DBC
OUTDONE  LH    R0,=H'10'           GET MIN # PRT LINES NEEDED 4    -EU-
*                                  FINAL MESSAGES
         CH    R0,LINES2GO         IS THERE ENOUGH ROOM ON THE CURRENT
*                                  PAGE FOR FINAL MESSAGES?
         BNL   NOEJECT2            YES, PROCEED
         XC    LINES2GO,LINES2GO   NO, FORCE IMMEDIATE EJECT
         MVI   SUBTITLE,C' '       CLEAR THE SUB-TITLE
         MVC   SUBTITLE+1(L'SUBTITLE-1),SUBTITLE
         SPACE 1                                              01/85 DBC
***      ISSUE "END OF PROGRAM" MESSAGE                       01/85 DBC
         SPACE 1
NOEJECT2 #PUT  EOPMSG              ISSUE EO-PGM MESSAGE
         SPACE 1                                              01/85 DBC
***      DISPLAY THE NUMBER OF ASSEMBLY MODULES CROSS         01/85 DBC
***      REFERENCED.                                          01/85 DBC
         SPACE 1                                              01/85 DBC
         TM    FLAGO,STMPMOVF      WAS THERE NAMES OVERFLOW?  01/85 DBC
         BNZ   YESMOFLW            YES, GO SEND ERROR MSG     01/85 DBC
         MVC   MSGBUF(8),=XL8'F020202020202120' NO, GET CCC   01/85 DBC
*                                  AND EDIT MASK              01/85 DBC
         LA    R1,MSGBUF+7         PRIME ICO INSIGNIFICANCE
         EDMK  MSGBUF(8),ASMCNT    CNVRT ASSEMBLIES CNT TO EBCDIC
         MVC   MSGBUF+1(6),0(R1)   LEFT ADJUST
         LA    R15,MSGBUF+8        --> EO-# FIELD
         SR    R15,R1              GET # DIGITS IN THE NUMBER
         LA    R4,MSGBUF+1(R15)    --> PAST THE DIGITS        01/85 DBC
         MVC   0(35,R4),=C' ASSEMBLED MODULES CROSS-REFERENCED' C 01/85
         #TEST SIZE=(8+35,LE,L'MSGBUF)
         LA    R0,MSGBUF-35        --> SO-MSG
         LR    R1,R4               --> "EO"-MSG               01/85 DBC
         SR    R1,R0               GET L'MSG
         STC   R1,MSGBUF-1         STORE FOR OUTPUT
         #PUT  MSGBUF              DISPLAY THE MESSAGE
         B     #ASMSZ              SKIP ERROR MSG             01/85 DBC
YESMOFLW MVC   MSGBUF(19),=C'0ERROR - MORE THAN '             01/85 DBC
         LH    R0,=Y((STAMPSZ-STAMPS)/L'STAMPS) GET STAMPS CAPACITY
         CVD   R0,CVDWAO           CNVRT TO DECIMAL
         MVC   MSGBUF+19(7),=XL7'20202020202020' EDIT MASK    01/85 DBC
         EDMK  MSGBUF+18(8),CVDWAO+4 CNVRT TO EBCDIC
         MVC   MSGBUF+19(6),0(R1)  LEFT ADJUST
         LA    R15,MSGBUF+19+7     GET NUMBER -
         SR    R15,R1               OF DIGITS
         LA    R1,MSGBUF+19(R15)   ADVANCE THE SINK SCANNER
         MVC   0(93,R1),=C' ASSEMBLIES WERE CROSS-REFERENCED; SYMBOLS F*
               OLLOWED BY AN ASTEISK (*) HAVE MISSING REFERENCES'
         #TEST SIZE=(19+7+93,LE,L'MSGBUF)
         LA    R0,MSGBUF-93        --> SO-MSG
         SR    R1,R0               GET L'MSG
         STC   R1,MSGBUF-1         STORE
         #PUT  MSGBUF              DISPLAY THE ERROR MSG
         LA    R4,MSGBUF           --> ASM NAMES FILL AREA    01/85 DBC
         SPACE 1                                              01/85 DBC
***      DISPLAY THE NAMES OF THE CROSS REFERENCED ASSEMBLY   01/85 DBC
***      MODULES.                                             01/85 DBC
         SPACE 1                                              01/85 DBC
#ASMSZ   LA    R3,MSGBUF+L'MSGBUF  --> PAST EO-BUFFER         01/85 DBC
         SR    R3,R4               GET ROOM IN BUFFER FOR     01/85 DBC
*                                  ASSEMBLY NAMES             01/85 DBC
         XR    R2,R2               CLEAR FOR DIVIDE           01/85 DBC
         D     R2,=A(L'STMPMODU+1) GET # ASM NAMES THAT CAN   01/85 DBC
*                                  BE HELD IN THE BUFFER      01/85 DBC
         LTR   R3,R3               ANY?                       01/85 DBC
         BNP   ASMNMESZ            NO, FORGET IT              01/85 DBC
         LM    R5,R7,STMPCTL       LOAD ASM-NAMES SCANNER     01/85 DBC
         USING STAMP,R5            DCL STAMP ENTRY BASE       01/85 DBC
         SLR   R7,R6               --> LAST ENTRY             01/85 DBC
         SLR   R5,R6               --> 0TH ENTRY (1-ORIGIN)   01/85 DBC
NXTALINE MVI   MSGBUF,C' '         CLEAR THE -                01/85 DBC
         MVC   MSGBUF+1(L'MSGBUF-1),MSGBUF BUFFER             01/85 DBC
         LR    R1,R4               --> SO-NAMES AREA IN MSGBU 01/85 DBC
         LR    R0,R3               GET # NAMES/LINE           01/85 DBC
NXTANAME BXH   R5,R6,LASTANAM      --> NEXT ASM NAME          01/85 DBC
         CLC   =C'  ',STMPLABL     A PURGED MODULE?           01/85 DBC
         BE    NXTANAME            YES, SKIP                  01/85 DBC
         MVC   1(L'STMPMODU,R1),STMPMODU NO, COPY NAME TO     01/85 DBC
*                                  MESSAGE                    01/85 DBC
         LA    R1,1+L'STMPMODU(,R1) ADVANCE TEXT SCANNER      01/85 DBC
         BCT   R0,NXTANAME         LOOP                       01/85 DBC
         DROP  R5                  RELEASE STAMP BASE         01/85 DBC
LASTANAM CLI   1(R4),C' '          ANY ASM NAMES?             01/85 DBC
         BE    ASMNMESZ            NO, DONE                   01/85 DBC
         LA    R0,MSGBUF           YES, --> SO-BUFFER         01/85 DBC
         SR    R1,R0               GET L'MSG                  01/85 DBC
         STC   R1,MSGBUF-1         STORE                      01/85 DBC
         #PUT  MSGBUF              DISPLAY THE NAMES          01/85 DBC
         SLR   R5,R6               BACK OFF THE SCANNER       01/85 DBC
         BXLE  R5,R6,NXTALINE      LOOP IF MORE NAMES         01/85 DBC
         SPACE 1                                              01/85 DBC
***      DISPLAY THE NUMBER OF LABELS LISTED IN THE CROSS     01/85 DBC
***      REFERENCE.                                           01/85 DBC
         SPACE 1
ASMNMESZ MVC   MSGBUF(8),=XL8'4020202020202120' GET CCC AND   01/85 DBC
*                                  EDIT MASK                  01/85 DBC
         LA    R1,MSGBUF+7         PRIME ICO INSIGNIFICANCE
         TM    FLAGO,ONLYMM        ONLY MULT. MOD. REF. REQUESTED? -EU-
         BZ    *+L'*+6             BRANCH IF NOT                   -EU-
         SP    LBLCNT,LBLOCNT      YES, SUBSTRACT SINGLE REF. COUNT-EU-
         EDMK  MSGBUF(8),LBLCNT    CNVRT LABELS CNT TO EBCDIC
         MVC   MSGBUF+1(6),0(R1)   LEFT ADJUST
         MVI   MSGBUF,C'0'         SET CCC                    01/85 DBC
         LA    R15,MSGBUF+8        --> EO-# FIELD
         SR    R15,R1              GET # DIGITS IN THE NUMBER
         LA    R1,MSGBUF+1(R15)    --> PAST THE DIGITS
         MVC   0(14,R1),=C' LABELS LISTED'
         #TEST SIZE=(8+14,LE,L'MSGBUF)
         LA    R0,MSGBUF-14        --> SO-MSG
         SR    R1,R0               GET L'MSG
         STC   R1,MSGBUF-1         STORE FOR OUTPUT
         #PUT  MSGBUF              DISPLAY THE MESSAGE
         SPACE 1                                              01/85 DBC
***      MAKE THE FINAL RETURN TO SORT.                       01/85 DBC
         SPACE 1
         #EXIT ((R14,R12)),RC=8    FINAL RETURN TO SORT/MERGE
         EJECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* -- XREFOUT -- SORTOUT -- SEARCH - STAMPS LIST SEARCHING ROUTINE     *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
SRCH     #SEARCH CMPRID=STMPCMPR
         SPACE 1
STMPCMPR CLC   XRRMODUL,STMPMODU-STAMP(R15) RIGHT LIST ENTRY YET?
         BR    R14                 (RETURN TO SEARCH ROUTINE)
         EJECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* -- XREFOUT -- SORTOUT -- PUTSYSP - MESSAGE PRINTING ROUTINE         *
*                                    (USEABLE ONLY BY SORTOUT)        *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
***      PUTSYSP -- THIS ROUTINE SENDS A MESSAGE TO
***      SYSPRINT. WARNING, THIS ROUTINE CAN BE USED ONLY
***      BY THE SORTOUT ROUTINE DUE TO BASE REGISTER
***      CONSIDERATIONS.
***
***      INPUTS :
***            - R1 POINTS TO A MESSAGE BLOCK.
***            - R13 IS SORTOUT'S BASE REGISTER.
***            - R14 POINTS TO A RETURN ADDRESS.
***
***      RETURN 0(,R14) :
***            - THE MESSAGE IS PRINTED. IF A NEW PRINTER
***              PAGE IS STARTED, THEN TITLE LINES ARE ALSO
***              PRINTED.
***            - ALL REGISTERS ARE RESTORED.
         SPACE 1
PUTSYSP  TM    DCBOFLGS-IHADCB+SYSPRINO,DCBOFOPN IS SYSPRINT AVAILABLE?
         BZR   R14                 NO, RETURN IMMEDIATELY
         STM   R14,R1,SAVESYSP     YES, SAVE REGISTERS
         MVC   NEXTCCC,1(R1)       SET NEXT CCC
         LA    R15,CCC+L'CCC       LOAD SCANNER OF VALID CCC'S
         LA    R0,L'CCC            GET # OF VALID CCC'S
CCCLP    BCTR  R15,0               ADVANCE THE SCANNER
         CLC   NEXTCCC,0(R15)      IS THIS CCC VALID?
         BE    GOTCCC              YES, GO ADJUST PAGE RESIDUE
         BCT   R0,CCCLP            DON'T KNOW YET; KEEP CHECKING
         MVI   NEXTCCC,C' '        NO, RESET TO DEFAULT CCC
         LA    R0,2                LOAD LINES ADVANCE+1
GOTCCC   BCTR  R0,0                GET LINES ADVANCEMENT
         AH    R0,LINES2GO         DECRIMENT PAGE RESIDUE; PAGE FULL?
         BNP   NOEJECT             NO, SKIP TITLES STUFF
         SPACE 1
***      THE CURRENT PRINTER PAGE IS FULL. PRINT TITLES ON
***      THE NEXT PAGE. INCLUDE A PAGE COUNTER.
         SPACE 1
         AP    PAGECTR,=P'1'       INCRIMENT PAGE COUNT
         MVC   PAGENO,=X'402020202020' GET EDIT MASK
         EDMK  PAGENO,PAGECTR      CNVRT PAGE # TO EBCDIC
         MVC   PAGENO+1(L'PAGENO-1),0(R1) LEFT ADJUST THE PAGE NUMBER
         PUT   SYSPRINO            LOCATE NEXT OUTPUT BUFFER
         LR    R14,R1              --> COPY SINK
         LH    R15,DCBLRECL-IHADCB+SYSPRINO GET L'COPY SINK
         LA    R0,TITLEBUF         --> COPY SOURCE
         LA    R1,TITBFLEN         GET L'COPY SOURCE
         ICM   R1,15,=C' '         GET PADDING CHARACTER
         MVCL  R14,R0              COPY TITLE TO OUTPUT BUFFER
         PUT   SYSPRINO            LOCATE OUTPUT BUFFER FOR SUB-TITLE
         LR    R14,R1              --> COPY SINK
         LH    R15,DCBLRECL-IHADCB+SYSPRINO GET L'COPY SINK
         LA    R0,SUBTITLE         --> COPY SOURCE
         LA    R1,L'SUBTITLE       GET L'COPY SOURCE
         MVCL  R14,R0              COPY SUB-TITLE TO OUTPUT BUFFER
         PUT   SYSPRINO            LOC. OUTPUT BUFFER FOR UN-TITLE -EU-
         LR    R14,R1              --> COPY SINK                   -EU-
         LH    R15,DCBLRECL-IHADCB+SYSPRINO GET L'COPY SINK        -EU-
         LA    R0,UNTITLE          --> COPY SOURCE                 -EU-
         LA    R1,L'UNTITLE        GET L'COPY SOURCE               -EU-
         MVCL  R14,R0              COPY UN-TITLE TO OUTPUT BUFFER  -EU-
         MVI   NEXTCCC,C'0'        ADJUST NEXT CCC
         LH    R0,LINECT           GET MAX LINES/PAGE
         AH    R0,=H'6'            ADJUST FOR TITLES + 1ST DATA LINE
NOEJECT  STH   R0,LINES2GO         STORE NEW PAGE RESIDUE
         SPACE 1
***      WRITE THE MESSAGE.
         SPACE 1
         PUT   SYSPRINO            LOCATE NEXT OUTPUT BUFFER
         MVC   0(1,R1),NEXTCCC     COPY CCC
         LA    R0,1(,R1)           --> COPY SINK
         LH    R1,DCBLRECL-IHADCB+SYSPRINO GET LRECL
         BCTR  R1,0                GET L'COPY SINK
         L     R14,SAVESYSP+12     RESTORE MSG POINTER
         XR    R15,R15             CLEAR
         IC    R15,0(,R14)         GET L'MSG
         BCTR  R15,0               DECR FOR CCC ALREADY INSERTED
         ICM   R15,8,=C' '         GET PAD CHARACTER
         LA    R14,2(,R14)         --> COPY SOURCE
         MVCL  R0,R14              COPY MSG TO OUTPUT BUFFER
         SPACE 1
***      RETURN TO CALLER.
         SPACE 1
         LM    R14,R1,SAVESYSP     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         DROP  ,                   RELEASE ALL BASES
         EJECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* -- XREFOUT -- DATA (NON-REENTRANT)                                  *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
***      DATA CONTROL BLOCKS.
         SPACE 1
         PUSH  PRINT
         PRINT NOGEN
         SPACE 1
XREFO    DCB   DDNAME=XREF,DSORG=PS,MACRF=GL,EODAD=EOXREF,    07/85 DBC*
               RECFM=FB,LRECL=XRRLEN
REWRITE  DCB   DDNAME=REWRITE,DSORG=PS,MACRF=PM,              07/85 DBC*
               EXLST=REWRXLST,RECFM=FB,LRECL=XRRLEN           07/85 DBC
SYSPRINO DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PL,RECFM=FBA,            *
               LRECL=PRTLEN,EXLST=SYSOXLST
         SPACE 1
         POP   PRINT
         SPACE 1
         DS    0F                  EXIT LISTS
SYSOXLST DC    X'85',AL3(OPENEXIT)                                 -EU-
REWRXLST DC    X'85',AL3(OPENEXIT)                       07/85 DBC -EU-
         SPACE 1
***      PLIST FOR SORT/MERGE.
         SPACE 1
PLISTPTR DC    0F'0',XL1'80',AL3(PLIST)                            -EU-
         DS    0F
         DC    H'0'
PLIST    DC    Y(PLISTLEN)
PLISTBEG DC    A(CMDSORT,CMDSORTZ) 'SORT' COMMAND
         DC    A(CMDRCD,CMDRCDZ)   'RECORD' COMMAND
         DC    A(SORTIN,SORTOUT)   E15/E35 EXITS
         DC    X'00',C'MAX'        MEMORY REQUIREMENTS
         DC    X'01',AL3(100*1024) RESERVED MEMORY
         DC    X'03',AL3(SYSOUT)   SUBSTITUTE 'SYSOUT' DDNAME
         DC    X'FF',C'(I)'        MESSAGE DISPLAY CONTROL
         DC    C'SORT'             DDNAME PREFIX
PLISTLEN EQU   *-PLISTBEG
         SPACE 1
SYSOUT   DC    CL8'SYSTERM'        SUBSTITUTE SYSOUT DDNAME
         SPACE 1
CMDSORT  DC    C' SORT FIELDS=(1,'
CMDSORLN DC    C'##',C',CH,A),EQUALS'
CMDSORTZ DC    C' '
         SPACE 1
CMDRCD   DC    C' RECORD TYPE=F,LENGTH='
CMDRCDLN DC    C'###'
CMDRCDZ  DC    C' '
         SPACE 1
***      MISCELLANEOUS DATA.
         SPACE 1
CVDWAO   DS    D                   CVD WORK AREA
RSETSTMP DS    D                   RESET TIMESTAMP BUFFER     01/85 DBC
         SPACE 1
OUTHEAD  DC    XL(L'XRRHEAD)'00'                              07/84 DBC
OUTLABEL EQU   XRRLABEL-XRRHEAD+OUTHEAD,L'XRRLABEL
OUTMODUL EQU   XRRMODUL-XRRHEAD+OUTHEAD,L'XRRMODUL
OUTTSTMP EQU   XRRTSTMP-XRRHEAD+OUTHEAD,L'XRRTSTMP
         SPACE 1
DUMYHEAD DC    (L'XRRHEAD)X'FF'    EO-FILE DUMMY SUBSTITUTE RECORD
         SPACE 1
SAVESYSP DS    4A                  SAVE AREA FOR PUTSYSP
         SPACE 1
RCDO     DC    H'0'                PROGRAM COMPLETION CODE
LINECT   DC    H'-60'              LINES/PRINTER PAGE (NEGATIVE)
LINES2GO DC    H'0'                PRINTER PAGE RESIDUE
         SPACE 1
LBLCNT   DC    PL4'+0'             LISTED LABELS COUNTER           -EU-
LBLOCNT  DC    PL4'+0'             SINGLE REF. COUNTER             -EU-
ASMCNT   DC    PL4'0'              CROSS-REFERENCED ASSEMBLIES COUNTER
PAGECTR  DC    PL3'0'              PAGE COUNTER
CCC      DC    C'+ 0-'             RECOGNIZED CCC'S
NEXTCCC  DC    C' '                NEXT CCC
         SPACE 1
FLAGO    DC    B'00000000'         LOCAL PROGRAM CONTROL FLAGS
OUTNOW   EQU   B'10000000'         THE SORTOUT ROUTINE HAS INITIALIZED
NOTFOOLD EQU   B'01000000'         CERTAIN TRICKY CONDITIONS  01/85 DBC
*                                  HAVE BEEN RECOGNIZED       01/85 DBC
STMPMOVF EQU   B'00100000'         THE STAMPS LIST (THE NUMBER OF
*                                  ASSEMBLY MODULES BEING CROSS
*                                  REFERENCED) HAS OVERFLOWED
STMPOVFL EQU   B'00010000'         A STAMPS LIST OVERFLOW HAS OCCURED
*                                  FOR THE LABEL CURRENTLY BEING
*                                  PROCESSED
ONLYMM   EQU   B'00000001'         ONLY MULTIPLE MODULES REFERENCES-EU-
*                                  REQUESTED                       -EU-
         SPACE 1
         LTORG ,                   LOCAL LITTERAL POOL
         SPACE 1
***      MESSAGES.
         SPACE 1
         DC    AL1(XRPLEN)
XRPMSG   DC    C' '
XRPLABEL DC    CL(L'XRRLABEL)' ',C' '
XRPERRF  DC    C' '
XRPENTS  DC    CL(PRTLEN-(*-XRPMSG))' '
XRPLEN   EQU   *-XRPMSG            L'XREF DISPLAY RECORD
         SPACE 1
XRPENT   EQU   0                   XRP MSG ENTRY
XRPENTMO EQU   XRPENT+1,L'STMPMODU MODULE NAME FIELD (RIGHT JUSTIFIED)
XRPENTHY EQU   XRPENTMO+L'XRPENTMO,1 HYPHEN
XRPENT#R EQU   XRPENTHY+L'XRPENTHY,5 NO. REFS (LEFT JUSTIFIED)
XRPENTLN EQU   XRPENT#R+L'XRPENT#R L'XRPENT
XRPENTCT EQU   L'XRPENTS/XRPENTLN  NUMBER OF SUCH FIELDS
         #TEST SIZE=(XRPENTCT,GT,0) INSURE THERE IS AT LEAST ONE
         DC    CL(L'XRPENT#R)' '   BLANKS FOR LEFT JUSTIFICATION
         SPACE 1
         DC    CL(L'STMPMODU-1)' ' BUFFER FOR RIGHT -
RJBUF    DS    CL(L'STMPMODU)       JUSTIFYING MODULE NAMES
         DC    C' '                  MORE PADDING             07/84 DBC
         SPACE 1
         DS    AL1
MSGBUF   DS    CL(PRTLEN)
         SPACE 1
TITLEBUF DC    C'1FULLY MASTER CROSS-REFERENCE '                   -EU-
TITLFOR  DC    C'   ',C' '
TITLWHOM DC    CL(TITLEBUF+PRTLEN-11-*)' '
         DC    C' PAGE'
PAGENO   DC    C' #####'
TITBFLEN EQU   *-TITLEBUF
         #TEST SIZE=(TITBFLEN,EQ,XRPLEN)
         DC    CL(L'PAGENO-1)' '
         ORG   ,
         SPACE 1
SUBTITLE DC    CL(PRTLEN)'0SYMBOL'
         ORG   SUBTITLE+(XRPENTS-XRPMSG)+XRPENTHY-8
         DC    2CL(XRPENTLN)'ASSEMBLY-REFS'                   01/85 DBC
         DC    C'...'                                      1/85 DBC-EU-
         ORG   ,
UNTITLE  DC    CL(PRTLEN)' --------'                               -EU-
         ORG   UNTITLE+(XRPENTS-XRPMSG)+XRPENTHY-8                 -EU-
         DC    (XRPENTLN)C'-'                                      -EU-
         DC    (XRPENTLN)C'-'                                      -EU-
         DC    C'---'                                              -EU-
         ORG   ,                                                   -EU-
         SPACE 1
         DC    AL1(EOPMSGLN)
EOPMSG   DC    C'-END OF CROSS-REFERENCE'
EOPMSGLN EQU   *-EOPMSG
         SPACE 1
         DC    AL1(L'BLNKLIN1)
BLNKLIN1 DC    C' '
         SPACE 1
***      REFERENCES SCANNING TRT TABLES.
         SPACE 1
         DS    0D
         SPACE 1
TRTBLANK DC    256AL1(4)
         ORG   TRTBLANK+C' '
         DC    AL1(0)
         ORG   TRTBLANK+C'0'
         DC    (C'9'+1-C'0')AL1(8)
         ORG   ,
         SPACE 1
TRTDIGTS DC    256AL1(4)
         ORG   TRTDIGTS+C' '
         DC    AL1(8)
         ORG   TRTDIGTS+C'0'
         DC    (C'9'+1-C'0')AL1(0)
         ORG   ,
         SPACE 1
***      ENCOUNTERED ASSEMBLY NAMES SAVE TABLE.
         SPACE 1
STMPCRNT DC    A(0)                CURRENT STAMP PTR
STMPCTL  DC    A(STAMPSZ,STMPLEN,STAMPSZ) STAMPS SCAN CONTROLS
         SPACE 1
STAMPS   DS    1000XL(STMPLEN)     SAVE TABLE
STAMPSZ  EQU   *                   --> LAST ENTRY
         EJECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* -- XREFOUT -- OPENEXIT - DCB OPEN EXIT                              *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
*        DCB OPEN EXIT FOR THE SYSPRINT/REWRITE FILES.
         SPACE 1
         USING IHADCB,R1           DCL SYSPRINT DCB BASE
         USING OPENEXIT,R15        DCL LOCAL PROGRAM BASE
OPENEXIT LH    R3,DCBBLKSI         GET BLKSIZE
         LTR   R3,R3               ANY GIVEN?
         BP    *+L'*+4             YES, PROCEED
         LH    R3,=Y(6233)         NO, GET MAX DEFAULT VALUE  07/85 DBC
         LH    R4,DCBLRECL         GET LRECL
         XR    R2,R2               CLEAR
         DR    R2,R4               GET BLOCKING FACTOR
         MR    R2,R4               GET INTEGRAL BLKSIZE
         CR    R3,R4               IS FILE BLOCKED?
         BP    *+L'*+6             YES, PROCEED
         LR    R3,R4               NO, SET BLKSIZE=LRECL
         NI    DCBRECFM,255-DCBRECBR CLEAR BLOCKING SIGNAL
         STH   R3,DCBBLKSI         STORE BLKSIZE
         BR    R14                 RETURN TO OPEN
         DROP  ,                   RELEASE ALL BASES
         SPACE 1
         LTORG ,                   LOCAL LITTERAL POOL
         SPACE 2
*************************************************************
*        END OF ASSEMBLY.                                   *
*************************************************************
         SPACE 1
         END   ,
