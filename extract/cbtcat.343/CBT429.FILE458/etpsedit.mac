EDIT     TITLE '--- E T P S -- ETPSEDIT - DATA-SET EDITOR ---'
         PRINT OFF
         COPY  ETPS$O2B            "ETPS" SYSPARM SELECTION
         COPY  ETPSMACS            "ETPS" MACROS
         COPY  ETPSDEFS            "ETPS" DEFINITIONS
         PRINT ON
ETPSEDIT START 0
         SPACE 1
ETPSEDIT AMODE 24
ETPSEDIT RMODE 24
        MIDENT
         EJECT
*------- AT ENTRY, R1 = A(PARM.LIST) -> (DCB,
*                                        DS-NAME,
*                                        MEMBER-NAME,
*                                        DS-ORG,
*                                        NUM-RECS,
*                                        VOL-SER,
*                                        PASSWORD)
         SPACE 1
*------- FOLLOWS HOW DATA CARDS ARE STORED IN CORE :
CDTA     EQU   0,72      CARDS DATA (CARDS COL. 1-72)
CCNU     EQU   72,6      CARDS COLUMNS NUMBER USED (CARDS COL. 73-78)
LCMF     EQU   78,2      LINE COMMANDS MEMORY FIELD (CARDS COL. 79-80)
PPTR     EQU   80,4      PREVIOUS CARD POINTER (0 = BACKWARD END)
NPTR     EQU   84,4      NEXT CARD POINTER (0 = FORWARD END)
XLNG     EQU   88        HOLD DATA RECORD IN-CORE LENGTH
         PRINT OFF
$#L      EQU   &ELIMT              THRESHOLD VALUE (MAXIMUM CARDS)
$#BN     EQU   1629                BASIC NUMBER OF CARDS
$#BS     EQU   ($#BN*XLNG)+8       BASIC SPACE (52K = 13 PAGES)
$#AN     EQU   512                 ADDITIONAL NUMBER OF CARDS
$#AS     EQU   ($#AN*XLNG)         ADDITIONAL SPACE (44K = 11 PAGES)
         PRINT ON
         PRINT GEN
         USING *,R12,R11
         USING SAVE3,R13      ************************** R13 ==> SAVE3
         USING SPLTAREA,R10   AT ENTRY : R10 MUST POINT TO "SPLTAREA"
         B     32(,R15)
         DC    CL28'  ETPSEDIT &SYSDATE &SYSTIME'
         PRINT &PRF
         STM   R14,R12,12(R13)     SAVE INPUT REGISTERS
         LR    R12,R15             SET PROGRAM BASE REGISTER 1
         LA    R3,1
         LA    R11,4*KB-1(R3,R12)  SET PROGRAM BASE REGISTER 2
         LR    R3,R10              SPLIT-SCREEN DSECT
         SH    R3,=Y(SPLITWRK-SAVE3) POINT TO SAVE3
         ST    R13,4(,R3)          STORE BACKWARD POINTER
         ST    R3,8(R13)           STORE FORWARD POINTER
         LR    R13,R3              SET DSECT BASE
         LM    R2,R8,0(R1)         PICK UP THE REGISTERS
*                                  R2=DCB ADDRESS
*                                  R3=DS-NAME ADDRESS
*                                  R4=MEMBER-NAME ADDRESS
*                                  R5=DS-ORG ADDRESS
*                                  R6=RECORDS COUNT ADDRESS
*                                  R7=VOL-SER NAME ADDRESS
*                                  R8=PASSWORD ADDRESS
         ST    R2,EDTDCB           SAVE DCB ADDRESS
         MVC   EDTDSNM(L'EDTDSNM),0(R3) SAVE DS-NAME
         MVC   EDTMEM(L'EDTMEM),0(R4) SAVE MEMBER NAME
         MVC   EDTORG(L'EDTORG),0(R5) SAVE DSORG
         L     R6,0(R6)            PUT RECORDS COUNT IN R6
         ST    R6,EDTRECS          SAVE RECORDS COUNT
         ST    R6,EDTNOWL           " "
         MVC   EDTVOL(L'EDTVOL),0(R7) SAVE VOL-SER
         MVC   EDTPASS(L'EDTPASS),0(R8) SAVE PASSWORD
         L     R0,SCROWS1          LINES PER PAGE SCREEN 1
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   *+L'*+4             NO
         L     R0,SCROWS2          LINES PER PAGE SCREEN 2
         SH    R0,=Y(CREWDT)
         STH   R0,EDSCROLL
         XC    EDADDR,EDADDR       SET CURSOR POSITION DEFAULT
         MVI   EDFSSW,0
         MVI   EDPNSW,0
         MVI   EDFUSW,0
         MVI   EDFINDL,0           CLEAR FIND/CHANGE STRINGS FIELDS
         MVI   EDCHNGL,0
         MVI   EDFINDS,C' '
         MVC   EDFINDS+1(L'EDFINDS-1),EDFINDS
         MVC   EDCHNGS,EDFINDS
         XR    R0,R0
         ST    R0,EDTFCCP
         STH   R0,EDTFOFF
*- - - - OBTAIN SPACE TO HOLD DATA RECORDS
         L     R4,=A($#L)
         CLR   R6,R4               THRESHOLD, CAN I ACCEPT FILE?
         BNH   OKFILE              YES
         ST    R4,MESSPL           ELSE TOO LARGE
        XMESS  2004
         LA    R1,*+L'*+8
         ST    R1,MSGADD
         B     LEAVE
         MSG   'SORRY, FILE TOO BIG',H=Y
OKFILE   LM    R0,R1,=A($#AN,$#AS)
         LM    R2,R3,=A($#BN,$#BS)
         CLR   R2,R6
         BNL   *+L'*+8
         AR    R2,R0
         AR    R3,R1
         B     *-10
        GETMAIN RC,LV=(R3)
         LTR   R15,R15             HOW COMPLETE?
         BZ    OKGETF              OK
        XMESS  2011,R15            ERROR
         LA    R1,*+L'*+8
         ST    R1,MSGADD
         B     LEAVE
         MSG   'GETMAIN(I) FAILED',H=Y
OKGETF   LR    R5,R1
         ST    R5,EDTMAIN          1ST DATA GETMAINED AREA
         ST    R3,EDTLENG          1ST DATA GETMAINED AREA LENGTH
         LR    R0,R5
         LR    R1,R3
         LA    R14,*
         XR    R15,R15
         MVCL  R0,R14              CLEAR ALL TO BINARY ZEROS
         CLR   R2,R4               THRESHOLD REACHED?
         BNH   *+L'*+2
         LR    R2,R4
         SR    R2,R6
         ST    R2,EDTGASL          NUMBER OF GAS CARDS
         LA    R1,8(R5)
         ST    R1,EDTPOOL          FREE POOL CHAIN POINTER
         MH    R2,=Y(XLNG)         MULTIPLY BY IN-CORE LENGTH
         AR    R2,R1
         ST    R2,EDTFIRST         FIRST POINTER (START LOCATION)
         LR    R3,R1
         LA    R1,XLNG(R3)
         CLR   R1,R2               END OF FREE POOL CHAIN?
         BNL   *+L'*+8             YES
         ST    R1,NPTR(R3)
         B     *-16
*- - - - READ IN DATA-SET
         L     R2,EDTDCB           PICK UP DCB ADDRESS
         LM    R0,R1,DCBDDNAM-IHADCB(R2) SAVE DD-NAME
         L     R2,AMEMDCB
         MVC   0(PMVDCBL,R2),PMVDCB SET MACRF TO GET-MOVE
         MVC   DCBMACR-IHADCB(L'DCBMACR,R2),=AL1(DCBMRGET+DCBMRMVG,0)
         STM   R0,R1,DCBDDNAM-IHADCB(R2) STORE DD-NAME
         LA    R1,EDEOFR           SET EODAD
         STCM  R1,B'0111',DCBEODA-IHADCB(R2)
         LA    R1,EDGSYNA          SET SYNAD
         STCM  R1,B'0111',DCBSYNA-IHADCB(R2)
         NI    EDTQST,255-GTSYFLG
         MVI   OPCLPL,VLB          SET "VL" BIT
        OPEN   ((R2),(INPUT)),MF=(E,OPCLPL)
         TM    DCBOFLGS-IHADCB(R2),DCBOFOPN TEST FOR GOOD OPEN?
         BO    OKOPIN              OK
        XMESS  2001
         LA    R1,*+L'*+4
         B     EDSMSG              ALL DONE
         MSG   'OPEN INPUT FAILED',H=Y
OKOPIN   L     R3,EDTFIRST         FIRST POINTER
         ST    R3,EDTCURR          SET CURRENT POINTER
         LA    R4,10               FIRST CARD NUMBER
         XR    R6,R6
EDGETR  GET    (R2),(R3)
         TM    EDTQST,GTSYFLG      WAS SYNAD EXIT TAKEN?
         BZ    *+L'*+12            NO, BRANCH
         NI    EDTQST,255-GTSYFLG  YES, ERROR
         LA    R1,EDTMSG
         B     EDSMSG              STOP HERE, GO BACK
         CVD   R4,EDDBLW
         OI    EDDBLW+7,X'0F'
         UNPK  EDTNUM(L'EDTNUM),EDDBLW+4(4)
         MVC   CCNU(L'CCNU,R3),EDTNUM+L'EDTNUM-L'CCNU
         XC    LCMF(L'LCMF,R3),LCMF(R3)
         ST    R6,PPTR(R3)
         LA    R5,XLNG(R3)
         ST    R5,NPTR(R3)
         TM    EDFSSW,EDDTSW       LOOK IF ASIS DATA
         BO    EDGETN
         MVI   CRDWA,C' '
         MVC   CRDWA+1(L'CDTA-1),CRDWA
         OC    CRDWA(L'CDTA),CDTA(R3)
         CLC   CRDWA(L'CDTA),CDTA(R3)
         BE    EDGETN
         OI    EDFSSW,EDDTSW       SET ASIS DATA
         OI    EDFUSW,EDASSW       SET ASIS
EDGETN   LR    R6,R3
         LR    R3,R5
         LA    R4,10(R4)
         B     EDGETR
         CNOP  0,4
*- - - - AT END OF READ, BUILD FREE POOL CHAIN
EDEOFR   MVI   OPCLPL,VLB          SET "VL" BIT
        CLOSE  ((R2)),MF=(E,OPCLPL)
         XC    NPTR(L'NPTR,R6),NPTR(R6)
         ST    R6,EDTLAST          SET LAST POINTER
*- - - - DISPLAY MEMORIZED DATA
EDSHOWS  LA    R5,TERMOUT+4        POINT TO START
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   *+L'*+12            NOPE, JUST GO DO IT
         L     R3,SCROWS1          PICK UP NUMBER OF ROWS ON SCREEN 1
         SLL   R3,2                MULTIPLY BY 4
         LA    R5,TERMOUT+4(R3)    POINT TO START
         L     R1,0(R5)            PICK UP TERMOUT POINTER
         MVC   0(EDTROW1L,R1),EDTROW1 SET FIRST ROW
         MVC   DSNMNM(L'EDTDSNM,R1),EDTDSNM SET EDIT HEAD LINE TEXT
         LA    R1,L'EDTDSNM-1(R1)
         CLI   0(R1),C' '
         BNE   *+L'*+4
         BCT   R1,*-8
         CLI   EDTMEM,C' '
         BE    EDHDLTE
         MVI   1(R1),C'('
         MVC   2(L'EDTMEM,R1),EDTMEM
         LA    R1,L'EDTMEM+1(R1)
         CLI   0(R1),C' '
         BNE   *+L'*+4
         BCT   R1,*-8
         MVI   1(R1),C')'
EDHDLTL  LA    R1,1(R1)
EDHDLTE  CLI   1(R1),C' '
         BNE   *+L'*+8
         MVI   1(R1),C'-'
         B     EDHDLTL
         NI    0(R5),255-EOS       CLEAR END-OF-SCREEN
         LA    R5,4(R5)
         L     R1,0(R5)            PICK UP TERMOUT POINTER
         MVC   0(EDTROW2L,R1),EDTROW2 SET NEXT ROW (COMMAND-SCROLL)
         TM    EDFUSW,EXTCPY       COPY PENDING?
         BZ    *+L'*+6             NO
         MVC   EWSCF1(4,R1),=CL5'COPY' YES, VIEW COMMAND
         TM    EDFUSW,EDCRSW
         BZ    *+L'*+10
         MVC   EWSCF2(L'EWSCF2,R1),=CL4'CSR'
         B     *+L'*+24
         TM    EDFUSW,EDHLSW
         BZ    *+L'*+10
         MVC   EWSCF2(L'EWSCF2,R1),=CL4'HALF'
         B     *+L'*+6
         MVC   EWSCF2(L'EWSCF2,R1),=CL4'PAGE'
         NI    0(R5),255-EOS       CLEAR END-OF-SCREEN
         LA    R5,4(R5)
         L     R1,0(R5)            PICK UP TERMOUT POINTER
         MVC   0(EDTROW3L,R1),EDTROW3 SET NEXT ROW (FIND-CHANGE)
         MVC   EWSCF3(L'EWSCF3,R1),EDFINDS SET FIND STRING
         MVC   EWSCF4(L'EWSCF4,R1),EDCHNGS SET CHANGE STRING
         NI    0(R5),255-EOS       CLEAR END-OF-SCREEN
         LA    R5,4(R5)
         L     R1,0(R5)            PICK UP TERMOUT POINTER
         MVC   0(EDTROW4L,R1),EDTROW4 SET NEXT ROW (SCALE)
         NI    0(R1),255-EOS       CLEAR END-OF-SCREEN
         L     R3,EDTCURR          PICK UP CURRENT POINTER
         L     R6,SCROWS1          PICK UP NUMBER OF ROWS
         CLI   SPLIT,2             AM I IN SPLIT SCREEN?
         BNE   *+L'*+4             NOPE, JUST GO DO IT
         L     R6,SCROWS2          MUST BE SCREEN 2
         LA    R1,4                SUBTRACT FIRST 4 ROWS
         SR    R6,R1               MAX LINES ON SCREEN
EDMOVE   LTR   R3,R3               LAST CARD?
         BZ    EDBOTT              EOF BEFORE END OF SCREEN
         NI    0(R5),255-EOS       CLEAR END-OF-SCREEN
         LA    R5,4(R5)
         L     R1,0(R5)            PICK UP TERMOUT POINTER
         MVC   0(EDTLNEL,R1),EDTLNE MOVE IN MASK
         CLI   LCMF(R3),0          ANY PENDING LINE COMMAND?
         BE    *+L'*+14            NO
         MVC   EWSCF5(L'LCMF,R1),LCMF(R3) YES, MOVE IN LINE COMMAND
         MVI   EWSCF5-1(R1),X'02'  CHANGE ATTRIBUTE TO INTENSIFIED
         B     *+L'*+6
         MVC   EWSCF5(L'EWSCF5,R1),CCNU(R3) MOVE IN CARD NUMBER
         MVC   EWSCF6(L'EWSCF6,R1),CDTA(R3) MOVE IN CARD DATA
         TM    EDFUSW,EDASSW
         BO    *+L'*+8
         L     R15,=A(CAPST)
         B     *+L'*+4
         L     R15,=A(ASIST)
         TR    EWSCF6(L'EWSCF6,R1),0(R15) TRANSLATE UNVIEWABLE CHAR.
         L     R3,NPTR(R3)         BUMP
         BCT   R6,EDMOVE
         B     EDENDS
EDBOTT   NI    0(R5),255-EOS       CLEAR END-OF-SCREEN
         LA    R5,4(R5)
         L     R1,0(R5)            PICK UP TERMOUT POINTER
         MVI   0(R1),80            SET LENGTH = 80
         MVI   1(R1),X'05'
         MVI   2(R1),C'*'
         MVC   3(78,R1),2(R1)
         MVC   33(16,R1),=CL16' BOTTOM OF DATA '
         BCT   R6,*+L'*+4
         B     EDENDS
         CLI   SPLIT,1             AM I ON SCREEN 1?
         BNE   EDSETL              NO
EDBOTL   NI    0(R5),255-EOS       CLEAR END-OF-SCREEN
         LA    R5,4(R5)
         L     R1,0(R5)            PICK UP TERMOUT POINTER
         MVI   0(R1),10            SET LENGTH = 10
         MVI   1(R1),X'04'
         MVI   2(R1),C' '
         MVC   3(8,R1),2(R1)
         BCT   R6,EDBOTL
EDENDS   CLI   SPLIT,1             AM I ON SCREEN 1?
         BE    EDCOMM              YES, DON'T SET PARM FLAG
EDSETL   OI    0(R5),EOS           SET END-OF-SCREEN
EDCOMM   L     R15,=A(EDTHELP)     DEFAULT HELP SCREEN
         ST    R15,HELPADD
         MVC   EDTCMND(L'EDTCMND),=CL8' '
         TM    EDFUSW,EDASSW       ASIS?
         BZ    *+L'*+4             NO
         OI    PRCSSW,ASISFLG      YES, SET ASIS FOR INPUT
         XC    CURADDR,CURADDR
         OC    CURADDR,EDADDR      ANY CURSOR POSITION REQUESTED?
         BNZ   *+L'*+8             YES
         MVI   CURROW,CREWSC       NO, SET DEFAULT CURSOR ROW
         MVI   CURCOL,CCEWSC       AND CURSOR COLUMN
         AIF   ('&TXV' NE 'YES').SKVPC1
*- - - - VERIFY POINTERS CHAINING
*        FOLLOWING TEN INSTRUCTIONS ARE NORMALLY DELETED FROM THE
*        ASSEMBLY (WHEN YOU GENERATE A FINAL EXECUTABLE VERSION).
*        BUT IF YOU WANT, YOU MAY KEPT THEM BY SETTING THE GLOBAL
*        VARIABLE "&TXV" TO VALUE "YES" (EVERY TERMINAL I/O YOU
*        JUST LOST THE TIME TO SCAN THE POINTERS CHAIN).
         L     R15,=A(VERCHAIN)
        CALL   (15)
         LTR   R0,R0
         BZ    EDGOCO
        XSNAP  1
         LA    R1,*+L'*+8
         ST    R1,MSGADD
         B     EDGOCO
         MSG   'CHAINING ERROR'
EDGOCO   DS    0H
.SKVPC1  ANOP
*- - - - TERMINAL COMMUNICATION
         L     R15,ARCOMM          GO COMMUNICATE
*- - - - ETPSCOMM PARM.LIST : NONE
        CALL   (15)
         NI    PRCSSW,255-ASISFLG  RESET ASIS FOR INPUT
         LTR   R15,R15             BAD RC?
         BZ    EDANAL              NO, OK
         MVI   MSGBUFF,20
         MVC   MSGBUFF+1(20),=CL20'T-I/O ERROR (RC=   )'
         CVD   R15,EDDBLW
         OI    EDDBLW+7,X'F0'
         UNPK  EDDBLW(3),EDDBLW+6
         MVC   MSGBUFF+17(3),EDDBLW
         LA    R1,MSGBUFF
         B     EDSMSG
*- - - - SCREEN MAY HAVE CHANGED
EDANAL   L     R0,SCROWS1          LINES PER PAGE SCREEN 1
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   *+L'*+4             NO
         L     R0,SCROWS2          LINES PER PAGE SCREEN 2
         SH    R0,=Y(CREWDT)
         STH   R0,EDSCROLL
         MVC   EDADDR,CURADDR      COPY CURSOR POSITION
*- - - - CHECK IF ANY PF-KEY COMMAND
         L     R2,TERMINPT         PICK UP AID ADDRESS
         CLI   0(R2),X'7D'         IS IT "ENTER"?
         BE    EDLNES              YUP, CONTINUE
         CLI   EDPNSW,0            ANY PENDING LINE COMMAND?
         BNE   EDCOMM1             YES, SKIP
         CLI   0(R2),X'F3'         IS IT PF3?
         BE    *+L'*+8             YES
         CLI   0(R2),X'C3'         IS IT PF15?
         BNE   *+L'*+10            NO
         MVC   EDTCMND(7),=CL7'SAVEND'
         B     EDLNES              CONTINUE
         CLI   0(R2),X'F4'         IS IT PF4?
         BE    *+L'*+8             YES
         CLI   0(R2),X'C4'         IS IT PF16?
         BNE   *+L'*+10            NO
         MVC   EDTCMND(7),=CL7'SAVEND'
         B     EDLNES              CONTINUE
EDCOMM1  CLI   0(R2),X'F7'         IS IT PF7?
         BE    *+L'*+8             YES
         CLI   0(R2),X'C7'         IS IT PF19?
         BNE   *+L'*+10            NO
         MVC   EDTCMND(7),=CL7'UP'
         B     EDLNES              CONTINUE
         CLI   0(R2),X'F8'         IS IT PF8?
         BE    *+L'*+8             YES
         CLI   0(R2),X'C8'         IS IT PF20?
         BNE   *+L'*+10            NO
         MVC   EDTCMND(7),=CL7'DOWN'
         B     EDLNES              CONTINUE
         CLI   0(R2),X'F5'         IS IT PF5?
         BE    *+L'*+8             YES
         CLI   0(R2),X'C5'         IS IT PF17?
         BNE   *+L'*+10            NO
         MVC   EDTCMND(7),=CL7'RFIND'
         B     EDLNES              CONTINUE
         CLI   0(R2),X'F6'         IS IT PF6?
         BE    *+L'*+8             YES
         CLI   0(R2),X'C6'         IS IT PF18?
         BNE   *+L'*+10            NO
         MVC   EDTCMND(7),=CL7'CHANGE'
         B     EDLNES              CONTINUE
         CLI   0(R2),X'7C'         IS IT PF12?
         BE    *+L'*+8             YES
         CLI   0(R2),X'4C'         IS IT PF24?
         BNE   EDCOMM2             NO
         CLI   EDPNSW,0            YES, ANY PENDING LINE COMMAND?
         BNE   *+L'*+10            YES, ANALYZE WHAT
GOBACK   XC    EDADDR,EDADDR       NO, FORCE DEFAULT
         B     EDSHOWS             RESHOW THE SCREEN
*- - - - "EDPNSW" PENDING LINE COMMAND STATUS (0 = OFF, 1 = ON) WHICH
*        MAY OCCURS :
*        AFBESW  RNGESW  CPABSW  MVABSW  CPRGSW  MVRGSW  DLRGSW  RPRGSW
*          0       0       0       0       0       0       0       0
*          1       0       0       0       0       0       0       0
*          0       0       1       0       0       0       0       0
*          0       0       0       1       0       0       0       0
*          0       0       0       0       1       0       0       0
*          0       0       0       0       0       1       0       0
*          0       1       0       0       1       0       0       0
*          0       1       0       0       0       1       0       0
*          1       0       0       0       1       0       0       0
*          1       0       0       0       0       1       0       0
*          0       0       0       0       0       0       1       0
*          0       0       0       0       0       0       0       1
*                        <---------------- EXCLUSIVES ---------------->
         TM    EDPNSW,DLRGSW
         BZ    *+L'*+8
         LA    R1,XCAMSG1          DD PENDING
         B     EDSTMS
         TM    EDPNSW,RPRGSW
         BZ    *+L'*+8
         LA    R1,XCAMSG2          RR PENDING
         B     EDSTMS
         TM    EDPNSW,AFBESW
         BZ    EDSTPN1
         TM    EDPNSW,CPRGSW
         BZ    *+L'*+8
EDSMS3   LA    R1,XCAMSG3          CC PENDING
         B     EDSTMS
         TM    EDPNSW,MVRGSW
         BZ    *+L'*+8
EDSMS4   LA    R1,XCAMSG4          MM PENDING
         B     EDSTMS
         TM    EDFUSW,EXTCPY       A/B PENDING WITH COPY?
         BO    EDLNES              YES, OK
         LA    R1,XCAMSG5          C/CC/M/MM PENDING
         B     EDSTMS
EDSTPN1  TM    EDPNSW,CPRGSW
         BZ    EDSTPN2
         TM    EDPNSW,RNGESW
         BZ    EDSMS3
EDSMS6   LA    R1,XCAMSG6          A/B PENDING
         B     EDSTMS
EDSTPN2  TM    EDPNSW,MVRGSW
         BZ    EDSMS6
         TM    EDPNSW,RNGESW
         BO    EDSMS6
         B     EDSMS4
EDCOMM2  CLI   0(R2),X'6C'         IS IT PA1?
         BNE   EDCOMM3             NO
         LA    R1,*+L'*+4          YUP, ALL DONE (LIKE CANCEL)
         B     EDSMSG
         MSG   'PA1 PRESSED = CANCEL',H=Y
EDCOMM3  CLI   0(R2),X'6D'         IS IT "CLEAR"?
         BE    GOBACK              YUP, RESHOW SCREEN
         CLI   0(R2),X'6E'         IS IT PA2?
         BE    GOBACK              YUP, RESHOW SCREEN
         LA    R1,*+L'*+8
         ST    R1,MSGADD
         B     EDLNES              CONTINUE AS ENTER
         MSG   'INVALID PF-KEY',H=Y
*- - - - CHECK IF SCROLL MODIFIED
EDLNES   L     R3,TERMINPT+ZIED    COMMAND LINE
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   *+L'*+12            NOPE
         L     R3,SCROWS1          PICK UP SIZE OF SCREEN1
         SLL   R3,2                MULTIPLY BY 4
         L     R3,TERMINPT+ZIED(R3) ADJUST POINTER
         CLI   0(R3),0             WAS THIS LINE CHANGED BY OPERATOR?
         BE    EDDLM               NO
         TM    EWSCF2-1(R3),INFMOD YES, SCROLL ENRERED?
         BZ    EDDLM               NO
         L     R14,TERMINPT        PICK UP AID/ROW/COL ADDRESS
         CLI   1(R14),CREWSC       CURSOR ON THIS LINE?
         BNE   *+L'*+6             NO
         XC    EDADDR,EDADDR       YES, FORCE DEFAULT
         LA    R14,EWSCF2(,R3)
         LA    R0,L'EWSCF2
         CLI   0(R14),C' '
         BNE   *+L'*+12
         LA    R14,1(,R14)
         BCT   R0,*-12
         B     *+L'*+18            NONE, CLEARED
         MVI   EDDBLW,C' '
         OC    EDDBLW(1),0(R14)
         NI    EDFUSW,255-EDHLSW-EDCRSW RESET TO PAGE
         CLI   EDDBLW,C'H'
         BNE   *+L'*+8
         OI    EDFUSW,EDHLSW       SET HALF
         B     EDDLM
         CLI   EDDBLW,C'C'
         BNE   EDDLM
         OI    EDFUSW,EDCRSW       SET CURSOR
*- - - - CHECK IF ANY DATA LINES MODIFIED
EDDLM    ICM   R3,B'1111',EDTCURR  PICK UP CURRENT POINTER
         BZ    EDFCS               NONE
         LA    R4,TERMINPT+ZIEL    POINT TO LINE DATA INPUT ADDRESS
         L     R2,SCROWS1          PICK UP NUMBER OF ROWS
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   EDDLM1              NOPE
         L     R1,SCROWS1          PICK UP SIZE OF SCREEN1
         SLL   R1,2                MULTIPLY BY 4
         LA    R4,TERMINPT+ZIEL(R1) ADJUST POINTER
         L     R2,SCROWS2          PICK UP NUMBER OF ROWS
EDDLM1   LA    R1,4                SUBTRACT FIRST 4 ROWS
         SR    R2,R1               MAX LINES ON SCREEN
EDDLM2   L     R5,0(,R4)           POINT TO LINE TERMINAL INPUT
         CLI   0(R5),0             WAS THIS LINE CHANGED BY OPERATOR?
         BE    EDDLM3              NO, GO CHECK FOR NEXT LINE
         TM    EWSCF6-1(R5),INFMOD YES, FIELD MODIFIED?
         BZ    EDDLM3              NO
         MVC   CDTA(L'EWSCF6,R3),EWSCF6(R5) MOVE IN LINE DATA
         OI    EDFSSW,SVDTSW       SAY DATA CHANGED
EDDLM3   LA    R4,4(R4)            BUMP TO NEXT TERM INPUT ADDRESS
         ICM   R3,B'1111',NPTR(R3) BUMP, IF I'VE LOOKED AT ALL,
         BZ    *+L'*+4             GO TO NEXT CHECK
         BCT   R2,EDDLM2           LOOP
*- - - - CHECK IF FIND AND/OR CHANGE STRINGS ENTERED/MODIFIED
EDFCS    LA    R4,TERMINPT+ZIEF    POINT TO LINE FND/CHG INPUT ADDRESS
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   *+L'*+12            NOPE
         L     R1,SCROWS1          PICK UP SIZE OF SCREEN1
         SLL   R1,2                MULTIPLY BY 4
         LA    R4,TERMINPT+ZIEF(R1) ADJUST POINTER
         L     R5,0(,R4)           POINT TO LINE TERMINAL INPUT
         CLI   0(R5),0             WAS THIS LINE CHANGED BY OPERATOR?
         BE    EDLCM               NO
         TM    EWSCF3-1(R5),INFMOD FIELD MODIFIED?
         BZ    EDFCSN              NO
         LA    R0,L'EWSCF3-1       LEFT JUSTIFY FIELD IF NEEDED
         CLI   EWSCF3(R5),C' '
         BNE   STFNDS
         MVC   EWSCF3(L'EWSCF3-1,R5),EWSCF3+1(R5)
         MVI   EWSCF3+L'EWSCF3-1(R5),C' '
         BCT   R0,*-18
         NI    EDFSSW,255-FNDSSW   NONE (CLEARED)
         MVI   EDFINDL,0
         MVI   EDFINDS,C' '
         MVC   EDFINDS+1(L'EDFINDS-1),EDFINDS
         CLI   EDROW,CREWFC        IS CURSOR ON THIS LINE?
         BNE   EDFCSN              NO
         CLI   EDCOL,CCEWCH        IS CURSOR ON FIND STRING FIELD?
         BNL   EDFCSN              NO
         XC    EDADDR,EDADDR       YES, FORCE DEFAULT
         B     EDFCSN
STFNDS   XR    R0,R0
         ST    R0,EDTFCCP          RESET F/C CURRENT POINTER
         STH   R0,EDTFOFF          RESET OFFSET
         LA    R14,EWSCF3+L'EWSCF3-1(R5) SET END OF FIND STRING FIELD
         LA    R15,L'EDFINDS-1     MAXIMUM LENGTH FOR FIND STRING
         CLI   0(R14),C' '         LOOK FOR LAST CHARACTER
         BNE   *+L'*+6
         BCTR  R14,0               DECREMENT BASE ADDRESS
         BCT   R15,*-10
         OI    EDFSSW,FNDSSW
         MVI   EDFINDS,C' '
         MVC   EDFINDS+1(L'EDFINDS-1),EDFINDS
         LTR   R15,R15
         BNP   STFNDS2             ONLY ONE CHARACTER
         CLI   EWSCF3(R5),X'80'
         BNL   STFNDS2
         CLC   EWSCF3(1,R5),0(R14)
         BNE   STFNDS2
         SH    R15,=H'2'
         BNP   STFNDS1
         STC   R15,EDFINDL         SET LENGTH-1
         EX    R15,*+L'*+4         MOVE STRING
         B     EDFCSN
         MVC   EDFINDS(*-*),EWSCF3+1(R5) <<EXECUTED>>
STFNDS1  AH    R15,=H'2'
STFNDS2  STC   R15,EDFINDL         SET LENGTH-1
         EX    R15,*+L'*+4         MOVE STRING
         B     EDFCSN
         MVC   EDFINDS(*-*),EWSCF3(R5) <<EXECUTED>>
EDFCSN   TM    EWSCF4-1(R5),INFMOD FIELD MODIFIED?
         BZ    EDLCM               NO
         LA    R0,L'EWSCF4-1       LEFT JUSTIFY FIELD IF NEEDED
         CLI   EWSCF4(R5),C' '
         BNE   STCHGS
         MVC   EWSCF4(L'EWSCF4-1,R5),EWSCF4+1(R5)
         MVI   EWSCF4+L'EWSCF4-1(R5),C' '
         BCT   R0,*-18
         NI    EDFSSW,255-CHGSSW   NONE (CLEARED)
         MVI   EDCHNGL,0
         MVI   EDCHNGS,C' '
         MVC   EDCHNGS+1(L'EDCHNGS-1),EDCHNGS
         CLI   EDROW,CREWFC        IS CURSOR ON THIS LINE?
         BNE   EDLCM               NO
         CLI   EDCOL,CCEWCH        IS CURSOR ON CHANGE STRING FIELD?
         BL    EDLCM               NO
         XC    EDADDR,EDADDR       YES, FORCE DEFAULT
         B     EDLCM
STCHGS   LA    R14,EWSCF4+L'EWSCF4-1(R5) SET END OF CHANGE STRING FIELD
         LA    R15,L'EDCHNGS-1     MAXIMUM LENGTH FOR CHANGE STRING
         CLI   0(R14),C' '         LOOK FOR LAST CHARACTER
         BNE   *+L'*+6
         BCTR  R14,0               DECREMENT BASE ADDRESS
         BCT   R15,*-10
         OI    EDFSSW,CHGSSW
         MVI   EDCHNGS,C' '
         MVC   EDCHNGS+1(L'EDCHNGS-1),EDCHNGS
         LTR   R15,R15
         BNP   STCHGS2             ONLY ONE CHARACTER
         CLI   EWSCF4(R5),X'80'
         BNL   STCHGS2
         CLC   EWSCF4(1,R5),0(R14)
         BNE   STCHGS2
         SH    R15,=H'2'
         BNP   STCHGS1
         STC   R15,EDCHNGL         SET LENGTH-1
         EX    R15,*+L'*+4         MOVE STRING
         B     EDLCM
         MVC   EDFINDS(*-*),EWSCF3+1(R5) <<EXECUTED>>
STCHGS1  AH    R15,=H'2'
STCHGS2  STC   R15,EDCHNGL         SET LENGTH-1
         EX    R15,*+L'*+4         MOVE STRING
         B     EDLCM
         MVC   EDCHNGS(*-*),EWSCF4(R5) <<EXECUTED>>
*- - - - CHECK IF ANY LINE COMMANDS
EDLCM    NI    EDFSSW,255-RNUMSW
         ICM   R3,B'1111',EDTCURR  PICK UP CURRENT POINTER
         BZ    EDLNXDR             NONE
         LA    R4,TERMINPT+ZIEL    POINT TO LINE DATA INPUT ADDRESS
         L     R2,SCROWS1          PICK UP NUMBER OF ROWS
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   EDLCM1              NOPE
         L     R1,SCROWS1          PICK UP SIZE OF SCREEN1
         SLL   R1,2                MULTIPLY BY 4
         LA    R4,TERMINPT+ZIEL(R1) ADJUST POINTER
         L     R2,SCROWS2          PICK UP NUMBER OF ROWS
EDLCM1   LA    R1,4                SUBTRACT FIRST 4 ROWS
         SR    R2,R1               MAX LINES ON SCREEN
EDLCM2   L     R5,0(,R4)           POINT TO LINE TERMINAL INPUT
         CLI   0(R5),0             WAS THIS LINE CHANGED BY OPERATOR?
         BE    EDLCM6              NO, GO CHECK FOR NEXT LINE
         TM    EWSCF5-1(R5),INFMOD FIELD MODIFIED?
         BZ    EDLCM6              NO
         OC    EWSCF5(L'EWSCF5,R5),=CL8' '
         LA    R8,CCNU(R3)         POINT TO SEQ.NUMBER
         LA    R6,EWSCF5(,R5)      POINT TO LINE NUMBER COLUMNS
         LA    R7,L'EWSCF5         SET LOOP CONTROL
         LR    R0,R7
         LR    R1,R6
         CLI   0(R1),C' '          CHECK IF LINE COMMAND CLEARED?
         BNE   EDLCM3              NO
         LA    R1,1(R1)            BUMP POINTER
         BCT   R0,*-12             LOOP
         LA    R14,EDLCM6          SET RETURN TO CHECK FOR NEXT LINE
         SPACE 1
*                                  ------- "DO CHECKS" ROUTINE -------
*                                  R14 = LINK REGISTER
EDLCMR   CLI   LCMF(R3),0          WAS SOMETHING DEFINED?
         BER   R14                 NO, RETURN
         CLC   LCMF(L'LCMF,R3),=CL2'A' WAS AN AFTER?
         BE    *+L'*+10
         CLC   LCMF(L'LCMF,R3),=CL2'B' WAS A BEFORE?
         BNE   EDLCMR1
         NI    EDPNSW,255-AFBESW
         XC    EDTABLOC,EDTABLOC
         B     EDLCMRX
EDLCMR1  CLC   LCMF(L'LCMF,R3),=CL2'C' WAS A COPY?
         BNE   EDLCMR2
         NI    EDPNSW,255-CPABSW
         XC    EDTOFLOC,EDTOFLOC
         B     EDLCMRX
EDLCMR2  CLC   LCMF(L'LCMF,R3),=CL2'CC' WAS A COPY RANGE?
         BNE   EDLCMR3
         TM    EDPNSW,RNGESW
         BO    EDLCMRZ
         NI    EDPNSW,255-CPRGSW
         B     EDLCMRY
EDLCMR3  CLC   LCMF(L'LCMF,R3),=CL2'M' WAS A MOVE?
         BNE   EDLCMR4
         NI    EDPNSW,255-MVABSW
         XC    EDTOFLOC,EDTOFLOC
         B     EDLCMRX
EDLCMR4  CLC   LCMF(L'LCMF,R3),=CL2'MM' WAS A MOVE RANGE?
         BNE   EDLCMR5
         TM    EDPNSW,RNGESW
         BO    EDLCMRZ
         NI    EDPNSW,255-MVRGSW
         B     EDLCMRY
EDLCMR5  CLC   LCMF(L'LCMF,R3),=CL2'DD' WAS A DELETE RANGE?
         BNE   EDLCMR6
         TM    EDPNSW,RNGESW
         BO    EDLCMRZ
         NI    EDPNSW,255-DLRGSW
         B     EDLCMRY
EDLCMR6  CLC   LCMF(L'LCMF,R3),=CL2'RR' WAS A REPEAT RANGE?
         BNE   EDLCMRX
         TM    EDPNSW,RNGESW
         BO    EDLCMRZ
         NI    EDPNSW,255-RPRGSW
EDLCMRY  XC    EDTOFLOC,EDTOFLOC
         B     EDLCMRX
EDLCMRZ  NI    EDPNSW,255-RNGESW
         CL    R3,EDTOTLOC
         BE    *+L'*+6
         MVC   EDTOFLOC,EDTOTLOC
         XC    EDTOTLOC,EDTOTLOC
EDLCMRX  XC    LCMF(L'LCMF,R3),LCMF(R3) CLEAR IT
         BR    R14                 RETURN
         SPACE 1
EDLCM3   CLI   0(R6),C'A'          LINE AFTER LOCATION?
         BNE   *+L'*+8             NO
         ICM   R0,B'0011',=CL2'A'  SET AFTER THIS
         B     *+L'*+12
         CLI   0(R6),C'B'          LINE BEFORE LOCATION?
         BNE   EDNXT1              NO
         ICM   R0,B'0011',=CL2'B'  SET BEFORE THIS
         TM    EDPNSW,AFBESW+DLRGSW+RPRGSW ALREADY IN OR ANY EXCLUSIVE?
         BNZ   EDLCM6              YES, REJECT, CHECK FOR NEXT LINE
         BAL   R14,EDLCMR          DO CHECKS
         OI    EDPNSW,AFBESW
         STCM  R0,B'0011',LCMF(R3) RETAIN AFTER/BEFORE THIS
         ST    R3,EDTABLOC         RETAIN LOCATION
         B     EDLCM6              CHECK FOR NEXT LINE
EDNXT1   CLI   0(R6),C'C'          LINE COPY?
         BNE   EDNXT2              NO
         CH    R7,=H'1'
         BE    *+L'*+10
         CLC   0(2,R6),=CL2'CC'    LINE COPY RANGE?
         BE    EDCPR1              YES
         TM    EDPNSW,CPABSW+MVABSW+CPRGSW+MVRGSW+DLRGSW+RPRGSW
         BNZ   EDLCM6              REJECT, CHECK FOR NEXT LINE
         BAL   R14,EDLCMR          DO CHECKS
         OI    EDPNSW,CPABSW
         MVC   LCMF(L'LCMF,R3),=CL2'C' RETAIN COPY IT
         ST    R3,EDTOFLOC         RETAIN LOCATION
         B     EDLCM6              CHECK FOR NEXT LINE
EDCPR1   TM    EDPNSW,CPABSW+MVABSW+MVRGSW+DLRGSW+RPRGSW
         BNZ   EDLCM6              REJECT, CHECK FOR NEXT LINE
         TM    EDPNSW,CPRGSW       START OF RANGE SET?
         BO    EDCPR2              YES
         BAL   R14,EDLCMR          DO CHECKS
         OI    EDPNSW,CPRGSW
         MVC   LCMF(L'LCMF,R3),=CL2'CC' RETAIN COPY IT
         ST    R3,EDTOFLOC         RETAIN START (OR END) LOCATION
         B     EDLCM6              CHECK FOR NEXT LINE
EDCPR2   TM    EDPNSW,RNGESW       END OF RANGE SET?
         BO    EDLCM6              YES, REJECT, CHECK FOR NEXT LINE
         OI    EDPNSW,RNGESW
         MVC   LCMF(L'LCMF,R3),=CL2'CC' RETAIN COPY IT
SSLOC    L     R15,EDTFIRST        FIRST POINTER
SSLOCL   CL    R15,EDTOFLOC        SEARCH THE STARTING LOCATION
         BNE   *+L'*+8
         ST    R3,EDTOTLOC         RETAIN END LOCATION
         B     EDLCM6              CHECK FOR NEXT LINE
         CLR   R3,R15
         BE    *+L'*+8
         L     R15,NPTR(R15)       NEXT CARD
         B     SSLOCL
         MVC   EDTOTLOC,EDTOFLOC   EXCHANGE START-END LOCATIONS
         ST    R3,EDTOFLOC
         B     EDLCM6              CHECK FOR NEXT LINE
EDNXT2   CLI   0(R6),C'M'          LINE MOVE?
         BNE   EDNXT3              NO
         CH    R7,=H'1'
         BE    *+L'*+10
         CLC   0(2,R6),=CL2'MM'    LINE MOVE RANGE?
         BE    EDMVR1              YES
         TM    EDPNSW,CPABSW+MVABSW+CPRGSW+MVRGSW+DLRGSW+RPRGSW
         BNZ   EDLCM6              REJECT, CHECK FOR NEXT LINE
         BAL   R14,EDLCMR          DO CHECKS
         OI    EDPNSW,MVABSW
         MVC   LCMF(L'LCMF,R3),=CL2'M' RETAIN MOVE IT
         ST    R3,EDTOFLOC         RETAIN LOCATION
         B     EDLCM6              CHECK FOR NEXT LINE
EDMVR1   TM    EDPNSW,CPABSW+MVABSW+CPRGSW+DLRGSW+RPRGSW
         BNZ   EDLCM6              REJECT, CHECK FOR NEXT LINE
         TM    EDPNSW,MVRGSW       START OF RANGE SET?
         BO    EDMVR2              YES
         BAL   R14,EDLCMR          DO CHECKS
         OI    EDPNSW,MVRGSW
         MVC   LCMF(L'LCMF,R3),=CL2'MM' RETAIN MOVE IT
         ST    R3,EDTOFLOC         RETAIN START (OR END) LOCATION
         B     EDLCM6              CHECK FOR NEXT LINE
EDMVR2   TM    EDPNSW,RNGESW       END OF RANGE SET?
         BO    EDLCM6              YES, REJECT, CHECK FOR NEXT LINE
         OI    EDPNSW,RNGESW
         MVC   LCMF(L'LCMF,R3),=CL2'MM' RETAIN MOVE IT
         B     SSLOC
EDNXT3   CLI   0(R6),C'D'          LINE DELETE?
         BNE   EDNXT4              NO
         CH    R7,=H'1'
         BE    *+L'*+10
         CLC   0(2,R6),=CL2'DD'    LINE DELETE RANGE?
         BE    EDDDR1              YES
         BAL   R14,EDLCMR          DO CHECKS
         MVC   LCMF(L'LCMF,R3),=CL2'D' SET LINE TO BE DELETED
         B     EDLCM6              CHECK FOR NEXT LINE
EDDDR1   TM    EDPNSW,AFBESW+CPABSW+MVABSW+CPRGSW+MVRGSW+RPRGSW
         BNZ   EDLCM6              REJECT, CHECK FOR NEXT LINE
         TM    EDPNSW,DLRGSW       START OF RANGE SET?
         BO    EDDDR2              YES
         BAL   R14,EDLCMR          DO CHECKS
         OI    EDPNSW,DLRGSW
         MVC   LCMF(L'LCMF,R3),=CL2'DD' RETAIN DELETE IT
         ST    R3,EDTOFLOC         RETAIN START (OR END) LOCATION
         B     EDLCM6              CHECK FOR NEXT LINE
EDDDR2   TM    EDPNSW,RNGESW       END OF RANGE SET?
         BO    EDLCM6              YES, REJECT, CHECK FOR NEXT LINE
         OI    EDPNSW,RNGESW
         MVC   LCMF(L'LCMF,R3),=CL2'DD' RETAIN DELETE IT
         B     SSLOC
EDNXT4   CLI   0(R6),C'R'          LINE REPEAT?
         BNE   EDNXT5              NO
         CH    R7,=H'1'
         BE    *+L'*+10
         CLC   0(2,R6),=CL2'RR'    LINE REPEAT RANGE?
         BE    EDRPR1              YES
         BAL   R14,EDLCMR          DO CHECKS
         MVC   LCMF(L'LCMF,R3),=CL2'R' SET LINE TO BE REPEATED
         B     EDLCM6              CHECK FOR NEXT LINE
EDRPR1   TM    EDPNSW,AFBESW+CPABSW+MVABSW+CPRGSW+MVRGSW+DLRGSW
         BNZ   EDLCM6              REJECT, CHECK FOR NEXT LINE
         TM    EDPNSW,RPRGSW       START OF RANGE SET?
         BO    EDRPR2              YES
         BAL   R14,EDLCMR          DO CHECKS
         OI    EDPNSW,RPRGSW
         MVC   LCMF(L'LCMF,R3),=CL2'RR' RETAIN REPEAT IT
         ST    R3,EDTOFLOC         RETAIN START (OR END) LOCATION
         B     EDLCM6              CHECK FOR NEXT LINE
EDRPR2   TM    EDPNSW,RNGESW       END OF RANGE SET?
         BO    EDLCM6              YES, REJECT, CHECK FOR NEXT LINE
         OI    EDPNSW,RNGESW
         MVC   LCMF(L'LCMF,R3),=CL2'RR' RETAIN REPEAT IT
         B     SSLOC
EDNXT5   CLI   0(R6),C'I'          LINE INSERT?
         BNE   EDLCM4              NO
         BAL   R14,EDLCMR          DO CHECKS
         MVC   LCMF(L'LCMF,R3),=CL2'I' SET LINE TO BE INSERTED AFTER
         B     EDLCM6              CHECK FOR NEXT LINE
*- - - - PUT TESTS FOR OTHER LINE COMMANDS HERE - - - - - - - - - - -*
EDLCM4   CLI   0(R6),C' '          IS IT A BLANK?
         BE    EDLCM5              YES, GO SEE NEXT
         CLC   0(1,R6),0(R8)       IS IT THE ORIGINAL SEQ.NUMBER?
         BE    EDLCM5              YES, GO SEE NEXT
         BAL   R14,EDLCMR          ELSE LIKE CLEARED, DO CHECKS
         B     EDLCM6              CHECK FOR NEXT LINE
EDLCM5   LA    R6,1(R6)            BUMP POINTER
         LA    R8,1(R8)            BUMP POINTER
         BCT   R7,EDLCM3           LOOP
EDLCM6   LA    R4,4(R4)            BUMP TO NEXT TERM INPUT ADDRESS
         ICM   R3,B'1111',NPTR(R3) BUMP, IF I'VE LOOKED AT ALL,
         BZ    *+L'*+4             CHECK FOR COMMANDS, PFK
         BCT   R2,EDLCM2           LOOP
*- - - - EXECUTE ALL DELETE, REPEAT AND/OR INSERT
EDLNXDR  L     R9,=A(EDDRIX)
         BR    R9
*- - - - NOW SEE IF THERE IS SOMETHING PENDING
EDLNXQ   CLI   EDPNSW,0            ANY PENDING LINE COMMAND?
         BE    CHECKRN             NONE, OK
         TM    EDPNSW,AFBESW+CPABSW COPY?
         BO    EDXCAB              COMPLETE, GO DO IT
         TM    EDPNSW,AFBESW+CPRGSW+RNGESW COPY RANGE?
         BO    EDXCGAB             COMPLETE, GO DO IT
         TM    EDPNSW,AFBESW+MVABSW MOVE?
         BO    EDXMAB              COMPLETE, GO DO IT
         TM    EDPNSW,AFBESW+MVRGSW+RNGESW MOVE RANGE?
         BO    EDXMGAB             COMPLETE, GO DO IT
         TM    EDPNSW,DLRGSW+RNGESW DELETE RANGE?
         BO    EDXDL               COMPLETE, GO DO IT
         TM    EDPNSW,RPRGSW+RNGESW REPEAT RANGE?
         BO    EDXRP               COMPLETE, GO DO IT
         TM    EDPNSW,DLRGSW       ELSE INCOMPLETE
         BZ    *+L'*+8
         LA    R1,XCAMSG1          DD PENDING
         B     EDLNLVE
         TM    EDPNSW,RPRGSW
         BZ    *+L'*+8
         LA    R1,XCAMSG2          RR PENDING
         B     EDLNLVE
         TM    EDPNSW,AFBESW
         BZ    EDLTPN1
         TM    EDPNSW,CPRGSW
         BZ    *+L'*+8
EDLMS3   LA    R1,XCAMSG3          CC PENDING
         B     EDLNLVE
         TM    EDPNSW,MVRGSW
         BZ    *+L'*+8
EDLMS4   LA    R1,XCAMSG4          MM PENDING
         B     EDLNLVE
         TM    EDFUSW,EXTCPY       A/B PENDING WITH COPY?
         BO    CHECKRN             YES, OK
         LA    R1,XCAMSG5          C/CC/M/MM PENDING
         B     EDLNLVE
EDLTPN1  TM    EDPNSW,CPRGSW
         BO    EDLTPN2
         TM    EDPNSW,MVRGSW
         BZ    EDLMS6
         TM    EDPNSW,RNGESW
         BO    EDLMS6
         B     EDLMS4
EDLTPN2  TM    EDPNSW,RNGESW
         BZ    EDLMS3
EDLMS6   LA    R1,XCAMSG6          A/B PENDING
EDLNLVE  ST    R1,MSGADD
CHECKRN  TM    EDFSSW,RNUMSW
         BO    FORCERN
         B     HNDLCMD
*- - - - COPY ONE CARD AFTER/BEFORE ANOTHER
EDXCAB   L     R9,=A(EDCABX)
         BR    R9
*- - - - COPY A GROUP OF CARDS AFTER/BEFORE ANOTHER
EDXCGAB  L     R9,=A(EDCGABX)
         BR    R9
*- - - - MOVE ONE CARD AFTER/BEFORE ANOTHER
EDXMAB   L     R9,=A(EDMABX)
         BR    R9
*- - - - MOVE A GROUP OF CARDS AFTER/BEFORE ANOTHER
EDXMGAB  L     R9,=A(EDMGABX)
         BR    R9
*- - - - DELETE A GROUP OF CARDS
EDXDL    L     R9,=A(EDDLG)
         BR    R9
*- - - - REPEAT A GROUP OF CARDS
EDXRP    L     R9,=A(EDRPG)
         BR    R9
*- - - - NEXT HANDLE ANY COMMAND
FORCERN  BAL   R14,EDRNRTN         RENUMBER
HNDLCMD  L     R3,TERMINPT+ZIED    COMMAND LINE
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   *+L'*+12            NOPE
         L     R3,SCROWS1          PICK UP SIZE OF SCREEN1
         SLL   R3,2                MULTIPLY BY 4
         L     R3,TERMINPT+ZIED(R3) ADJUST POINTER
         CLI   EDTCMND,C' '        ANY PFK (COMMAND) STILL IN?
         BNE   EDLNSTC             YES
         CLI   0(R3),0             WAS THIS LINE CHANGED BY OPERATOR?
         BE    EDLNSTC             NO
         TM    EWSCF1-1(R3),INFMOD COMMAND ENTERED?
         BZ    EDLNSTC             NO
         NI    EDFUSW,255-EXTCPY   YES, RESET ANY COPY REQUEST
         LA    R0,L'EWSCF1-1       LEFT JUSTIFY FIELD IF NEEDED
         CLI   EWSCF1(R3),C' '
         BNE   *+L'*+14
         MVC   EWSCF1(L'EWSCF1-1,R3),EWSCF1+1(R3)
         MVI   EWSCF1+L'EWSCF1-1(R3),C' '
         BCT   R0,*-18
         OC    EDTCMND(7),EWSCF1(R3)
EDLNSTC  CLI   EDTCMND,C' '        ANY COMMAND IN?
         BNE   EDLNESN             YES
         TM    EDFUSW,EXTCPY       NO, BUT COPY PENDING?
         BZ    EDLNMV              NO, SKIP NEXT TEST
         CLI   EDPNSW,AFBESW       YES, A/B PENDING IS ALONE?
         BE    EDTCPYX             YES, COMPLETE, CAN DO COPY
         CLI   EDPNSW,0            NO, ANY OTHER PENDING LINE COMMAND?
         BNE   GOBACK              YES, RESHOW THE SCREEN
         B     EDSMS7              ELSE SET MESSAGE
EDLNMV   CLI   EDPNSW,0            NO, ANY PENDING LINE COMMAND?
         BNE   GOBACK              YES, RESHOW THE SCREEN
         L     R2,TERMINPT         PICK UP AID/ROW/COL ADDRESS
         CLC   EDADDR,1(R2)        IS CURSOR POSITION MODIFIED?
         BNE   EDSHOWS             YES, RESHOW THE SCREEN
         CLI   EDROW,CREWDT        NO, IS CURSOR IN DATA LINES?
         BL    GOBACK              NO, RESHOW THE SCREEN
         XR    R1,R1               YES
         IC    R1,EDROW
         CLI   EDCOL,CCEWDT        IS CURSOR IN DATA COLUMNS?
         BNL   EDLNMV1             YES
         ICM   R3,B'1111',EDTCURR  NO, LET CURSOR ON CURRENT LINE
         BZ    GOBACK              YUP, NONE
         LA    R0,CREWDT
         SR    R1,R0
         LTR   R15,R1
         BNP   EDLNMV5
         ICM   R2,B'1111',NPTR(R3)
         BZ    GOBACK              YUP, CURSOR PAST LAST DATA LINE
         LR    R3,R2
         BCT   R1,*-10
         B     EDLNMV5
EDLNMV1  LR    R14,R1              MOVE CURSOR ONE LINE AHEAD
         LA    R0,CREWDT-1
         SR    R1,R0
         LR    R15,R1
         ICM   R2,B'1111',EDTCURR
         BZ    GOBACK              YUP, NONE
EDLNMV2  ICM   R3,B'1111',NPTR(R2)
         BZ    EDLNMV3
         LR    R2,R3
         BCT   R1,EDLNMV2
         CH    R15,EDSCROLL
         BE    EDLNMV4
         LA    R14,1(R14)
         STC   R14,EDROW
         B     EDLNMV5
EDLNMV3  LR    R3,R2
         CH    R15,EDSCROLL
         BNE   GOBACK
         IC    R1,EDROW
         BCTR  R1,0
         STC   R1,EDROW
EDLNMV4  ICM   R2,B'1111',EDTCURR
         BZ    GOBACK              YUP, NONE
         ICM   R2,B'1111',NPTR(R2)
         ST    R2,EDTCURR
EDLNMV5  LA    R14,CDTA(R3)        MOVE CURSOR AT START OF TEXT
         LA    R15,L'CDTA
         LA    R1,CCEWDT
EDLNMV6  CLI   0(R14),C' '
         BNE   EDLNMV7
         LA    R14,1(R14)
         LA    R1,1(R1)
         BCT   R15,EDLNMV6
         MVI   EDCOL,CCEWDT
         B     EDSHOWS
EDLNMV7  STC   R1,EDCOL
         B     EDSHOWS
*- - - - PUT TESTS FOR COMMAND HERE BELOW - - - - - - - - - - - - - -*
EDLNESN  CLC   EDTCMND(5),=CL5'DUMP' TAKE A DUMP?
         BNE   *+L'*+2             NO
         DC    H'0'                YUP, TAKE AN S0C1 <------------ DUMP
         TM    EDFUSW,EXTCPY       COPY PENDING?
         BO    EDLNESN1            YES, SKIP
         CLI   EDPNSW,0            ANY PENDING LINE COMMAND?
         BNZ   EDLNESN1            YES, SKIP
         CLC   EDTCMND(7),=CL7'SAVEND' IS "SAVEND"?
         BE    EDSAVE              YES, GO DO IT
         CLC   EDTCMND(5),=CL5'SAVE' IS "SAVEND"?
         BE    EDSAVE              YES, GO DO IT
         CLC   EDTCMND(4),=CL4'END' IS IT "SAVEND"?
         BE    EDSAVE              YES, GO DO IT
         CLC   EDTCMND(7),=CL7'SUBMIT' IS IT "SUBMIT"?
         BE    EDSUBMT             YES, GO DO IT
         CLC   EDTCMND(4),=CL4'SUB' IS IT "SUBMIT"?
         BE    EDSUBMT             YES, GO DO IT
EDLNESN1 CLC   EDTCMND(7),=CL7'CANCEL' IS IT "CANCEL"?
         BE    *+L'*+10            YES
         CLC   EDTCMND(4),=CL4'CAN' IS IT "CANCEL"?
         BNE   EDLNESN2            NO
         LA    R1,*+L'*+4
         B     EDSMSG
         MSG   'YUP, CANCEL DONE',H=Y
EDLNESN2 CLC   EDTCMND(6),=CL7'RFIND' IS IT "RFIND"?
         BE    EDRFIND             YES, GO DO IT
         CLC   EDTCMND(5),=CL5'FIND' IS IT "RFIND"?
         BE    EDRFIND             YES, GO DO IT
         CLC   EDTCMND(3),=CL3'RF' IS IT "RFIND"?
         BE    EDRFIND             YES, GO DO IT
         CLC   EDTCMND(2),=CL2'F'  IS IT "RFIND"?
         BE    EDRFIND             YES, GO DO IT
         CLC   EDTCMND(2),=CL2'L'  IS IT "RFIND"?
         BE    EDRFIND             YES, GO DO IT
         CLC   EDTCMND(5),=CL7'DOWN' IS IT "DOWN"?
         BE    EDMORMX             YES, GO DO IT
         CLC   EDTCMND(2),=CL2'D'  IS IT "DOWN"?
         BE    EDMORMX             YES, GO DO IT
         CLC   EDTCMND(2),=CL2'+'  IS IT "DOWN"?
         BE    EDMORMX             YES, GO DO IT
         CLC   EDTCMND(3),=CL7'UP' IS IT "UP"?
         BE    EDPREMX             YES, GO DO IT
         CLC   EDTCMND(2),=CL2'U'  IS IT "UP"?
         BE    EDPREMX             YES, GO DO IT
         CLC   EDTCMND(2),=CL2'-'  IS IT "UP"?
         BE    EDPREMX             YES, GO DO IT
         CLC   EDTCMND(7),=CL7'CHANGE' IS IT "CHANGE"?
         BE    EDCHANG             YES, GO DO IT
         CLC   EDTCMND(2),=CL2'C'  IS IT "CHANGE"?
         BE    EDCHANG             YES, GO DO IT
         CLC   EDTCMND(5),=CL5'CAPS' IS IT "CAPS"?
         BE    EDCAPS              YES, GO DO IT
         CLC   EDTCMND(5),=CL5'ASIS' IS IT "ASIS"?
         BE    EDASIS              YES, GO DO IT
         CLC   EDTCMND(6),=CL6'WHERE' IS IT "WHERE"?
         BE    EDWHERE             YES, GO DO IT
         CLC   EDTCMND(2),=CL2'W'  IS IT "WHERE"?
         BE    EDWHERE             YES, GO DO IT
         CLC   EDTCMND(2),=CL2'?'  IS IT "WHERE"?
         BE    EDWHERE             YES, GO DO IT
         CLC   EDTCMND(5),=CL5'COPY' IS IT "COPY"?
         BE    EDTCPY              YES, GO DO IT
         TM    EDFUSW,EXTCPY       COPY PENDING?
         BZ    EDLNESN3            NO
EDSMS7   LA    R1,XCAMSG7          YES, A/B MISSING
         B     EDSTMS
EDLNESN3 CLI   EDPNSW,0            ANY PENDING LINE COMMAND?
         BNE   GOBACK              YES, RESHOW THE SCREEN
         ICM   R14,B'1111',EDTFIRST IS FILE EMPTY?
         BNZ   EDLNESNX            NO
         CLC   EDTCMND(6),=CL6'INPUT' IS IT "INPUT"?
         BE    EDINPT1             YES, GO DO IT
         CLC   EDTCMND(2),=CL2'I'  IS IT "INPUT"?
         BE    EDINPT2             YES, GO DO IT
EDLNESNX LA    R1,*+L'*+4          ELSE WHAT'S THAT
         B     EDSTMS
         MSG   'INVALID COMMAND',H=Y
*- - - - CAPS / ASIS COMMANDS
EDCAPS   NI    EDFUSW,255-EDASSW-EXTCPY SET CAPS AND RESET COPY REQ
         B     GOBACK              RESHOW THE SCREEN
EDASIS   NI    EDFUSW,255-EXTCPY   RESET ANY COPY REQUEST
         OI    EDFUSW,EDASSW       SET ASIS
         B     GOBACK              RESHOW THE SCREEN
*- - - - WHERE PENDING ACTION COMMAND
EDWHERE  NI    EDFUSW,255-EXTCPY   RESET ANY COPY REQUEST
         CLI   EDPNSW,0            ANY PENDING LINE COMMAND?
         BNE   EDWHERE1            YES
         LA    R1,*+L'*+4          NONE
         B     EDSTMS
         MSG   'NONE PENDING',H=Y
EDWHERE1 TM    EDPNSW,DLRGSW+RPRGSW
         BZ    *+L'*+8
         L     R3,EDTOFLOC         GET LOCATION
         B     EDWHERE2
         TM    EDPNSW,CPABSW+MVABSW+CPRGSW+MVRGSW+RNGESW
         BNZ   *+L'*+8
         L     R3,EDTABLOC         GET AFTER/BEFORE LOCATION
         B     EDWHERE2
         L     R3,EDTOFLOC         GET LOCATION
         TM    EDPNSW,CPRGSW+RNGESW
         BO    *+L'*+8
         TM    EDPNSW,MVRGSW+RNGESW
         BNO   EDWHERE2
         CLC   EDTCURR,PPTR(R3)
         BNE   EDWHERE2
         L     R3,EDTOTLOC         GET ALTERNATE LOCATION
EDWHERE2 ICM   R1,B'1111',PPTR(R3) POINT TO PREVIOUS
         BZ    *+L'*+2             NONE, FIRST
         LR    R3,R1               ELSE THIS FOR DISPLAY
         ST    R3,EDTCURR          SET CURRENT POINTER
         B     GOBACK              RESHOW (MESSAGE STILL SET)
*- - - - INPUT ONE OR MORE CARDS COMMAND
EDINPT1  LA    R3,6(R3)
         LA    R1,6
         B     EDINPT3
EDINPT2  LA    R3,2(R3)
         LA    R1,2
EDINPT3  L     R9,=A(EDINPTX)
         BR    R9
*- - - - CHANGE THE NEXT OCCURRENCE OF A STRING COMMAND
EDCHANG  NI    EDFUSW,255-EXTCPY   RESET ANY COPY REQUEST
         TM    EDFSSW,FNDSSW       HOW FIND STRING?
         BZ    EDCHANG1            NONE
         TM    EDFSSW,CHGSSW       HOW CHNG STRING?
         BO    EDRFIND1            OK, REPEAT FIND
         MVI   EDROW,CREWFC        SET CURSOR ON CHANGE STRING
         MVI   EDCOL,CCEWCH
         LA    R1,*+L'*+4
         B     EDSTMSM
         MSG   'ENTER "CHNG" STRING',H=Y
EDCHANG1 MVI   EDROW,CREWFC        SET CURSOR ON FIND STRING
         MVI   EDCOL,CCEWFN
         LA    R1,*+L'*+4
         B     EDSTMSM
         MSG   'ENTER "FIND" STRING',H=Y
*- - - - FIND THE NEXT OCCURRENCE OF A STRING COMMAND
EDRFIND  TM    EDFSSW,FNDSSW       NO FIND STRING?
         BZ    EDCHANG1
EDRFIND1 L     R9,=A(EDXRFND)
         BR    R9
*- - - - DOWN COMMAND
EDMORMX  L     R9,=A(EDMORMEM)
         BR    R9
*- - - - UP COMMAND
EDPREMX  L     R9,=A(EDPREMEM)
         BR    R9
*- - - - COPY COMMAND
EDTCPY   OI    EDFUSW,EXTCPY       SAY COPY REQUESTED
         TM    EDPNSW,AFBESW       A/B PENDING WITH COPY?
         BZ    EDSMS7              NO, GO SET MESSAGE
EDTCPYX  XC    MSGADD,MSGADD       YES, GO DO COPY
         LM    R8,R9,=A(CPWKARL,EDXCPY)
         BR    R9
*- - - - SUBMIT COMMAND
*              NOTE : ALL THE DATA-SET SUBMIT LOGIC GOES HERE.
EDSUBMT  CLI   SUBRB,S99RBEND-S99RB SUBMIT AVAILABLE?
         BNE   EDSERR              NO (NO JES2)
         ICM   R4,B'1111',EDTFIRST PICK UP FIRST POINTER
         BZ    EDSNON              NONE
         LA    R1,SUBSUBP
        DYNALLOC
         L     R0,SUBRB+S99RSC-S99RB CHECK IF ANY ERROR
         LTR   R15,R15
         BNZ   EDSALL              ERROR
         LTR   R0,R0
         BNZ   EDSALL              ERROR
        GENCB  BLK=ACB,AM=VSAM,MACRF=(ADR,SEQ,OUT),                    X
               DDNAME=SUBJOB,MF=(G,ACBWORK)
         LTR   R15,R15             HOW COMPLETE?
         BZ    EDSUB1              OK
         ST    R0,MESSPL           ERROR
        XMESS  2015,R15
         LA    R3,*+L'*+4
         B     EDSUBZ              ALL DONE
         MSG   'SUBMIT ACB FAILED',H=Y
EDSUB1   ST    R1,SUBACB
         LR    R2,R1               ACB ADDRESS
         USING IFGACB,R2
        GENCB  BLK=RPL,AM=VSAM,ACB=(R2),OPTCD=(ADR,SEQ,SYN,NUP),       X
               RECLEN=80,MF=(G,RPLWORK)
         LTR   R15,R15             HOW COMPLETE?
         BZ    EDSUB2              OK
         ST    R0,MESSPL           ERROR
        XMESS  2016,R15
         LA    R3,*+L'*+4
         B     EDSUBZ              ALL DONE
         MSG   'SUBMIT RPL FAILED',H=Y
EDSUB2   ST    R1,SUBRPL
         LR    R3,R1               RPL ADDRESS
         USING IFGRPL,R3
         MVI   OPCLPL,VLB          SET "VL" BIT
        OPEN   ((R2)),MF=(E,OPCLPL)
         LTR   R15,R15             GOOD OPEN?
         BZ    EDSUB3              OK
         XR    R0,R0               ERROR
         IC    R0,ACBERFLG
         ST    R0,MESSPL           ERROR
        XMESS  2003,R15
         LA    R3,*+L'*+4
         B     EDSUBZ              ALL DONE
         MSG   'SUBMIT OPEN FAILED',H=Y
         DROP  R2
EDSUBZ   L     R2,DYNWORKP         INITIALIZE DYNAMIC ALLOCATION WORK
         LR    R0,R2               INITIALIZE DYNAMIC ALLOCATION WORK
         LH    R1,=Y(PARMLLEN)     LENGTH TO BE CLEARED
         LA    R14,*
         XR    R15,R15
         ICM   R15,B'1000',=CL8' '
         MVCL  R0,R14              CLEAR TO ALL BLANKS
         USING PARMLIST,R2
         MVI   DSNAME,0            INDICATE FREE REQUEST
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         MVC   DDNAME(L'DDNAME),DCBDDNAM-IHADCB(R4) DD-NAME
         L     R15,ARDYNAM
*- - - - ETPSDYNA PARM.LIST : "DYNWORKP" ADDRESS
        CALL   (15),MF=(E,DYNWORKP)
         LTR   R15,R15             HOW COMPLETE?
         BZ    EDSUBY              OK
        XMESS  2022
         B     EDSUBY
         DROP  R2
         USING IFGACB,R2
EDSUB3   MVC   LCMF(L'LCMF,R4),=CL2'00'
        MODCB  RPL=(R3),AREA=(R4),ACB=(R2),MF=(G,MODWORK)
         LTR   R15,R15             HOW COMPLETE?
         BZ    EDSUB4              OK
         ST    R0,MESSPL           ERROR
        XMESS  2017,R15
         LA    R3,*+L'*+4
         B     EDSUBX              ALL DONE
         MSG   'SUBMIT MODCB FAILED',H=Y
EDSUB4  PUT    RPL=(R3)
         LTR   R15,R15             HOW COMPLETE?
         BZ    EDSUB5              OK
         MVC   MESSPL,RPLFDBWD     ERROR
        XMESS  2018,R15
         LA    R3,*+L'*+4
         B     EDSUBX              ALL DONE
         MSG   'SUBMIT PUT FAILED',H=Y
EDSUBX   MVI   OPCLPL,VLB          SET "VL" BIT
        CLOSE  ((R2)),MF=(E,OPCLPL)
EDSUBY   LR    R1,R3
         B     EDSTMS
EDSUB5   XC    LCMF(L'LCMF,R4),LCMF(R4)
         ICM   R4,B'1111',NPTR(R4)
         BNZ   EDSUB3
        ENDREQ RPL=(R3)
         LTR   R15,R15             HOW COMPLETE?
         BZ    EDSUB6              OK
         MVC   MESSPL,RPLFDBWD     ERROR
        XMESS  2019,R15
         LA    R3,*+L'*+4
         B     EDSUBX              ALL DONE
         MSG   'SUBMIT ENDREQ FAILED',H=Y
EDSUB6   MVC   MSGBUFF+1(8),RPLRBAR BUILD JOB (NUMBER) MESSAGE
         LA    R1,MSGBUFF+8
         LA    R15,8
         CLI   0(R1),C' '
         BNE   *+L'*+6
         BCTR  R1,0
         BCT   R15,*-10
         MVC   1(10,R1),=CL10' SUBMITTED'
         LA    R15,10(R15)
         STC   R15,MSGBUFF         SET MESSAGE LENGTH
         MVI   OPCLPL,VLB          SET "VL" BIT
        CLOSE  ((R2)),MF=(E,OPCLPL)
         LTR   R15,R15             GOOD CLOSE?
         BZ    EDSOKS              OK
         XR    R0,R0               ERROR
         IC    R0,ACBERFLG
         ST    R0,MESSPL           ERROR
        XMESS  2020,R15
         LA    R1,*+L'*+4
         B     EDSTMS              ALL DONE
         MSG   'SUBMIT CLOSE FAILED',H=Y
EDSOKS   LA    R1,MSGBUFF
         B     EDSTMS
EDSERR   LA    R1,*+L'*+4
         B     EDSTMS
         MSG   'SUBMIT UNAVAILABLE',H=Y
EDSNON   LA    R1,*+L'*+4
         B     EDSTMS
         MSG   'NONE TO SUBMIT',H=Y
EDSALL   ST    R0,MESSPL
        XMESS  2021,R15
         LA    R1,*+L'*+4
         B     EDSTMS
         MSG   'SUBMIT ALLOC FAILED',H=Y
         DROP  R2,R3
*- - - - SAVE PROCESSING COMMAND
*              NOTE : ALL THE DATA-SET SAVE LOGIC GOES HERE.
*              FIRST COUNT THE NUMBER OF RECORDS IN MY EDIT WORK AREA
*              TO DETERMINE WHETHER I CAN DO AN UPDATE-IN-PLACE.
EDSAVE   ICM   R3,B'1111',EDTFIRST PICK UP FIRST POINTER
         BNZ   EDSVCD              OK
         LA    R1,*+L'*+4
         B     EDSTMS
         MSG   'NONE TO SAVE',H=Y
EDSVCD   TM    EDFSSW,SVDTSW       ANY DATA CHANGED?
         BO    EDSVDT              YES
         MVC   MSGBUFF(13),*+L'*+4 NO
         B     EDMSGT
         MSG   'NONE CHANGED',H=Y
EDSVDT   L     R1,EDTNOWL          PICK UP NUMBER OF CARDS
         CL    R1,EDTRECS     COMPARE CURRENT RECS VERSUS ORIGINAL RECS
         BNE   EDSUPD              NO MATCH, CAN'T DO UPDATE-IN-PLACE
         L     R2,EDTDCB           PICK UP DCB ADDRESS
         MVC   DCBMACR-IHADCB(L'DCBMACR,R2),=AL1(DCBMRGET+DCBMRLCG,DCBMX
               RPUT+DCBMRMVP)      SET MACRF TO (GL,PM)
         LA    R1,EDLEOF           SET EODAD
         STCM  R1,B'0111',DCBEODA-IHADCB(R2)
         LA    R1,EDPSYNA          SET SYNAD
         STCM  R1,B'0111',DCBSYNA-IHADCB(R2)
         NI    EDTQST,255-PTSYFLG-EODIFLG
         MVI   OPCLPL,VLB          SET "VL" BIT
        OPEN  ((R2),(UPDAT)),MF=(E,OPCLPL)
         TM    DCBOFLGS-IHADCB(R2),DCBOFOPN TEST FOR GOOD OPEN?
         BO    EDPUT1              OK
EDGBCK  XMESS  2002
         LA    R1,*+L'*+4
         B     EDSMSG              ALL DONE
         MSG   'OPEN OUTPUT FAILED',H=Y
EDPUT1  GET    (R2)
         TM    EDTQST,PTSYFLG      WAS SYNAD EXIT TAKEN?
         BO    EDREOF              YES, ERROR
         MVC   0(L'CDTA+L'CCNU,R1),CDTA(R3)
         MVC   LCMF(L'LCMF,R1),=CL2'00'
        PUTX   (R2)
         TM    EDTQST,PTSYFLG      WAS SYNAD EXIT TAKEN?
         BO    EDREOF              YES, ERROR
         ICM   R3,B'1111',NPTR(R3)
         BNZ   EDPUT1
         B     EDREOF
EDLEOF   OI    EDTQST,EODIFLG      SET EODAD EXIT TAKEN
         B     EDREOF
EDSUPD   ST    R1,EDTRECS          SET CURRENT RECS
         L     R2,EDTDCB           PICK UP DCB ADDRESS
         LM    R0,R1,DCBDDNAM-IHADCB(R2) SAVE DD-NAME
         MVC   0(PMVDCBL,R2),PMVDCB SET MACRF TO PUT-MOVE
         STM   R0,R1,DCBDDNAM-IHADCB(R2) STORE DD-NAME
         LA    R1,EDPSYNA          SET SYNAD
         STCM  R1,B'0111',DCBSYNA-IHADCB(R2)
         NI    EDTQST,255-PTSYFLG
         MVI   OPCLPL,VLB          SET "VL" BIT
        OPEN  ((R2),(OUTPUT)),MF=(E,OPCLPL)
         TM    DCBOFLGS-IHADCB(R2),DCBOFOPN TEST FOR GOOD OPEN?
         BZ    EDGBCK              NO, ERROR
EDPUT2   MVC   LCMF(L'LCMF,R3),=CL2'00'
        PUT    (R2),(R3)
         TM    EDTQST,PTSYFLG      WAS SYNAD EXIT TAKEN?
         BO    EDREOF              YES, ERROR
         XC    LCMF(L'LCMF,R3),LCMF(R3)
         ICM   R3,B'1111',NPTR(R3)
         BNZ   EDPUT2
EDREOF   MVI   OPCLPL,VLB          SET "VL" BIT
        CLOSE ((R2)),MF=(E,OPCLPL)
         TM    EDTQST,PTSYFLG      WAS SYNAD EXIT TAKEN?
         BZ    *+L'*+12            NO, BRANCH
         NI    EDTQST,255-PTSYFLG  YES, ERROR
         LA    R1,EDTMSG
         B     EDSMSG              STOP HERE, GO BACK
         TM    EDTQST,EODIFLG      WAS EODAD EXIT TAKEN?
         BZ    *+L'*+12            NO, BRANCH
         NI    EDTQST,255-EODIFLG  YES, ERROR
         LA    R1,XEODMSG
         B     EDSMSG              STOP HERE, GO BACK
         MVI   MSGBUFF,L'EDMSAVDS+L'EDMSAVMM
         MVC   MSGBUFF+1(L'EDMSAVDS+L'EDMSAVMM),EDMSAVDS
         CLI   EDTMEM,C' '         MEMBER PROVIDED?
         BE    EDMSGT              NOPE
         CLC   EDTORG(3),=CL3'SEQ' SEQUENTIAL FILE?
         BE    EDMSGT              YES, DON'T DO STOW
         L     R2,ALIBDCB
         L     R15,=A(SPFSTOW)
*- - - - SPFSTOW PARM.LIST : DCB, REC-COUNT, USER-ID, MEMBER-NAME
        CALL   (15),((R2),EDTRECS,USERID,EDTMEM),VL,MF=(E,PARMVL)
         LTR   R15,R15             HOW COMPLETE?
         BZ    EDSTWOK             OK
        XMESS  2009,R15            ERROR
EDSTWOK  MVI   MSGBUFF,L'EDTMEM+L'EDMSAVMM
         MVC   MSGBUFF+1(L'EDTMEM),EDTMEM
         MVC   MSGBUFF+L'EDTMEM+1(L'EDMSAVMM),EDMSAVMM
EDMSGT   LA    R1,MSGBUFF
         CLC   EDTCMND(7),=CL7'SAVEND' SAVE AND END?
         BE    EDSMSG              ALL DONE
         CLC   EDTCMND(3),=CL4'END' JUST END?
         BE    EDSMSG              ALL DONE
EDSTMS   XC    EDADDR,EDADDR       FORCE DEFAULT
EDSTMSM  ST    R1,MSGADD
         B     EDSHOWS             RESHOW THE SCREEN
EDSMSG   ST    R1,MSGADD
         L     R2,EDTMAIN          1ST DATA GETMAINED AREA
         L     R3,EDTLENG          1ST DATA GETMAINED AREA LENGTH
EDFREE   LM    R4,R5,0(R2)         GET NEXT IF ANY
        FREEMAIN R,LV=(R3),A=(R2)  FREE ALL DATA GETMAINED AREAS
         LTR   R2,R4
         BZ    LEAVE
         LR    R3,R5
         B     EDFREE
LEAVE    L     R13,4(R13)          PICK UP CALLING SAVE-AREA
         LM    R14,R12,12(R13)     RESTORE CALLING REGISTERS
         XR    R15,R15             SET RC=0
         BR    R14                 RETURN
         SPACE 1
*------- ROUTINE TO COUNT CARDS
*              R0 = NUMBER OF CARDS
*              R3-R4 = WORK REGISTERS
*              R14 = LINK REGISTER
CNTCRDS  L     R3,EDTOFLOC         START LOCATION
         LA    R0,1
         LR    R4,R0
         AR    R0,R4               COUNT CARDS UNTIL END
         L     R3,NPTR(R3)         NEXT CARD
         CL    R3,EDTOTLOC
         BNE   *-10
         BR    R14                 RETURN
         SPACE 1
*------- ROUTINE TO ADD CARD(S)
*              NOTES - CARDS ARE ADDED IN CHAIN OF THE CURRENT ONE
*                    - R14-R15-R0-R1 ARE SAVED-RESTORED
*              R0 = NUMBER OF CARDS TO ADD
*              R3 = CURRENT CARD POINTER (UNCHANGED)
*              R14 = LINK REGISTER
EDADRTN  CL    R0,EDTGASL          REQUEST CAN BE EXHAUSTED?
         BNH   EDADRTN4            YES, OK
         STM   R14,R6,VUSWA        NO, SAVE REGISTERS
         L     R6,EDTGASL          DO ACTUAL TOTAL OF CARDS
         A     R6,EDTNOWL
         L     R4,=A($#L)          THRESHOLD LIMIT
         CLR   R6,R4               CAN I ACCEPT MORE?
         BL    EDADRTN1            YES
         LA    R1,*+L'*+4          NO
         B     EDSTMS              STOP HERE, GO BACK
         MSG   'YUP, FILE IS FULL',H=Y
*- - - - TRY OBTAIN MORE SPACE FOR DATA RECORDS
EDADRTN1 S     R0,EDTGASL
         LM    R14,R15,=A($#AN,$#AS)
         LM    R2,R3,=A($#BN,$#BS)
         CLR   R2,R0
         BNL   *+L'*+8
         AR    R2,R14
         AR    R3,R15
         B     *-10
        GETMAIN RC,LV=(R3)
         LTR   R15,R15             HOW COMPLETE?
         BZ    EDADRTN2            OK
        XMESS  2012,R15            ERROR
         LA    R1,*+L'*+8
         ST    R1,MSGADD
         B     EDSTMS              STOP HERE, GO BACK
         MSG   'GETMAIN(N) FAILED',H=Y
EDADRTN2 LR    R5,R1               RETAIN ADDRESS
         LR    R0,R5
         LR    R1,R3
         LA    R14,*
         XR    R15,R15
         MVCL  R0,R14              CLEAR ALL TO BINARY ZEROS
         L     R14,EDTMAIN         1ST DATA GETMAINED AREA
         ICM   R15,B'1111',0(R14)  END OF AREAS CHAINING?
         BZ    *+L'*+6             YES
         LR    R14,R15             NO
         B     *-10                LOOP TO NEXT
         ST    R5,0(R14)           GETMAIN ADDRESS CHAIN
         ST    R3,4(R14)           GETMAIN LENGTH
         AR    R6,R2               DO NEW TOTAL OF CARDS
         CLR   R6,R4               THRESHOLD, CAN I ACCEPT IT?
         BNH   *+L'*+4             YES
         SR    R6,R4               NO, REDUCE
         SR    R2,R6
         L     R1,EDTGASL
         AR    R1,R2
         ST    R1,EDTGASL          NEW NUMBER OF GAS CARDS
         LA    R5,8(R5)            BUILD FREE POOL CHAIN
         LR    R3,R5
EDADRTN3 LA    R1,XLNG(R3)
         BCT   R2,*+L'*+4
         B     *+L'*+10
         ST    R1,NPTR(R3)
         LR    R3,R1
         B     EDADRTN3
         ICM   R1,B'1111',EDTPOOL  ADD TO FREE POOL CHAIN
         BNZ   *+L'*+8             NOT HERE
         ST    R5,EDTPOOL
         B     *+L'*+14
         LR    R2,R1
         ICM   R1,B'1111',NPTR(R2) NEXT ONE
         BNZ   *-6                 NOT HERE, LOOP
         ST    R5,NPTR(R2)
         LM    R14,R6,VUSWA        RESTORE REGISTERS
EDADRTN4 STM   R14,R1,12(R13)      SAVE REGISTERS
         L     R15,EDTGASL         UPDATE FREE COUNT
         SR    R15,R0
         ST    R15,EDTGASL
         L     R15,EDTNOWL         UPDATE NUMBER OF CARDS
         AR    R15,R0
         ST    R15,EDTNOWL
         L     R15,EDTPOOL         GET FREE CARDS
         L     R1,NPTR(R3)
         ST    R15,NPTR(R3)
         LR    R14,R3
EDADRTN5 ST    R14,PPTR(R15)
         BCT   R0,*+L'*+4
         B     EDADRTN6
         LR    R14,R15
         L     R15,NPTR(R15)
         B     EDADRTN5
EDADRTN6 MVC   EDTPOOL,NPTR(R15)   OUT OF POOL
         ST    R1,NPTR(R15)
         LTR   R1,R1               LAST CARD?
         BNZ   *+L'*+8             NO
         ST    R15,EDTLAST         YES, SET LAST POINTER
         B     *+L'*+4
         ST    R15,PPTR(R1)
         OI    EDFSSW,SVDTSW       SAY DATA CHANGED
         LM    R14,R1,12(R13)      RESTORE REGISTERS
         BR    R14                 RETURN
         SPACE 1
*------- ROUTINE TO DELETE CARD(S)
*              NOTES - DELETED CARDS ARE PLACED IN THE FREE POOL
*                    - R14-R15-R0-R1 ARE SAVED-RESTORED
*              R0 = NUMBER OF CARDS TO DELETE
*              R3 = CURRENT CARD POINTER (UPDATED TO POINT ON PREVIOUS
*                                         OR ZERO WHEN WAS FIRST ONE)
*              R14 = LINK REGISTER
EDDLRTN  STM   R14,R1,12(R13)      SAVE REGISTERS
         L     R15,EDTGASL         UPDATE FREE COUNT
         AR    R15,R0
         ST    R15,EDTGASL
         L     R15,EDTNOWL         UPDATE NUMBER OF CARDS
         SR    R15,R0
         ST    R15,EDTNOWL
         L     R1,PPTR(R3)
         LR    R14,R3
EDDLRTN1 XC    CDTA(XLNG-L'NPTR,R14),CDTA(R14) CLEAR DELETED CARD
         L     R15,NPTR(R14)
         BCT   R0,*+L'*+4
         B     EDDLRTN2
         LR    R14,R15
         B     EDDLRTN1
EDDLRTN2 LTR   R1,R1               FIRST CARD?
         BZ    *+L'*+8             YES
         ST    R15,NPTR(R1)
         B     *+L'*+4
         ST    R15,EDTFIRST        SET FIRST POINTER
         LTR   R15,R15             LAST CARD?
         BZ    *+L'*+8             YES
         ST    R1,PPTR(R15)        NO
         B     *+L'*+4
         ST    R1,EDTLAST          SET LAST POINTER
         MVC   NPTR(L'NPTR,R14),EDTPOOL
         ST    R3,EDTPOOL          ADD IT TO FREE POOL
         LR    R3,R1               NEW CURRENT LOCATION
         OI    EDFSSW,SVDTSW       SAY DATA CHANGED
         OC    EDTNOWL,EDTNOWL     NUMBER OF CARDS?
         BNZ   *+L'*+8             OK
         LA    R1,*+L'*+10         NULL, SEND ADVICE
         ST    R1,MSGADD
         LM    R14,R1,12(R13)      RESTORE REGISTERS
         BR    R14                 RETURN
         MSG   'YUP, FILE IS EMPTY',H=Y
         SPACE 1
*------- ROUTINE TO RENUMBER CARDS BY 10
*              R0-R1-R15 = WORK REGISTERS
*              R14 = LINK REGISTER
EDRNRTN  NI    EDFSSW,255-RNUMSW
         ICM   R15,B'1111',EDTFIRST START LOCATION
         BZR   R14                 NONE, RETURN
         LA    R1,10
EDRNRTN1 CVD   R1,EDDBLW
         OI    EDDBLW+7,X'0F'
         UNPK  EDTNUM(L'EDTNUM),EDDBLW+4(4)
         MVC   CCNU(L'CCNU,R15),EDTNUM+L'EDTNUM-L'CCNU
         LA    R1,10(R1)
         ICM   R15,B'1111',NPTR(R15)
         BNZ   EDRNRTN1
         BR    R14                 RETURN
         SPACE 1
*------- SYNAD EXITS - ENTERED DURING THE I/O IF AN ERROR OCCURS.
         CNOP  0,4
EDGSYNA SYNADAF ACSMETH=QSAM
         MVI   EDTMSG,15
         MVC   EDTMSG+1(15),91(R1) ERROR DESCRIPTION ONLY
         OI    EDTQST,GTSYFLG
        SYNADRLS
         BR    R14
         CNOP  0,4
EDPSYNA SYNADAF ACSMETH=QSAM
         MVI   EDTMSG,15
         MVC   EDTMSG+1(15),91(R1) ERROR DESCRIPTION ONLY
         OI    EDTQST,PTSYFLG
        SYNADRLS
         BR    R14
         SPACE 1
NUMPACK  PACK  EDDBLW,EWSCF1(*-*,R3) <<EXECUTED>>
         SPACE 1
XCAMSG1  MSG   'DD PENDING'
XCAMSG2  MSG   'RR PENDING'
XCAMSG3  MSG   'CC PENDING'
XCAMSG4  MSG   'MM PENDING'
XCAMSG5  MSG   'C/CC/M/MM PENDING'
XCAMSG6  MSG   'A/B PENDING'
XCAMSG7  MSG   'A/B MISSING'
XEODMSG  MSG   'SAVE IN-PLACE EOF'
EDMSAVDS DC    CL7'DATASET'
EDMSAVMM DC    CL6' SAVED'
         SPACE 1
PMVDCB  DCB    DSORG=PS,MACRF=PM,DDNAME=DUMMY,EODAD=*-*,SYNAD=*-*
PMVDCBL  EQU   *-PMVDCB
         PRINT &PRS
        LTORG
         PRINT &PRF
*------- EDIT FILE SCREEN FORMAT ------------------------------------*
*              THIS IS THE FORMAT FOR A PDS LIBRARY MEMBER OR
*              A SEQUENTIAL FILE.
EDTROW1  DC    AL1(EDTROW1L-1)
DSNMNM   EQU   (*-EDTROW1)+1,54
         DC    XL1'05',79CL1'-'
EDTROW1L EQU   *-EDTROW1
CREWSC   EQU   01             CURSOR ROW ON LINE BELOW (DEFAULT)
ZIED     EQU   (CREWSC+1)*4        "TERMINPT" DISPLACEMENT
EDTROW2  DC    AL1(EDTROW2L-1)
         DC    XL1'05',CL12'COMMAND ===>'
CCEWSC   EQU   *-EDTROW2      CURSOR COLUMN ON FIELD BELOW (DEFAULT)
EWSCF1   EQU   (*-EDTROW2)+1,46    INPUT FIELD 1
         DC    XL1'01',CL46' '
         DC    XL1'05',CL11'< SCROLL =>'
EWSCF2   EQU   (*-EDTROW2)+1,4     INPUT FIELD 2
         DC    XL1'01',CL4' ',XL1'05',CL1'<',XL1'04'
EDTROW2L EQU   *-EDTROW2
CREWFC   EQU   02             CURSOR ROW ON LINE BELOW (FIND/CHANGE)
ZIEF     EQU   (CREWFC+1)*4        "TERMINPT" DISPLACEMENT
EDTROW3  DC    AL1(EDTROW3L-1)
         DC    XL1'05',CL11'FIND STR =>'
CCEWFN   EQU   *-EDTROW3      CURSOR COLUMN ON FIELD BELOW (FIND)
EWSCF3   EQU   (*-EDTROW3)+1,24    INPUT FIELD 3
         DC    XL1'01',CL24' '
         DC    XL1'05',CL15'< CHANGE STR =>'
CCEWCH   EQU   *-EDTROW3      CURSOR COLUMN ON FIELD BELOW (CHANGE)
EWSCF4   EQU   (*-EDTROW3)+1,24    INPUT FIELD 4
         DC    XL1'01',CL24' ',XL1'05',CL1'<'
EDTROW3L EQU   *-EDTROW3
EDTROW4  DC    AL1(EDTROW4L-1)
         DC    XL1'04',CL7'    '
         DC    CL72'----+----1----+----2----+----3----+----4----+----5-X
               ---+----6----+----7--'
EDTROW4L EQU   *-EDTROW4
CREWDT   EQU   04             CURSOR ROW ON LINE BELOW (FIRST DATA)
ZIEL     EQU   (CREWDT+1)*4        "TERMINPT" DISPLACEMENT
EDTLNE   DC    AL1(EDTLNEL-1)
EWSCF5   EQU   (*-EDTLNE)+1,6      INPUT FIELD 5
         DC    XL1'01',CL6' '
CCEWDT   EQU   *-EDTLNE       CURSOR COLUMN ON FIELD BELOW (DATA)
EWSCF6   EQU   (*-EDTLNE)+1,72     INPUT FIELD 6
         DC    XL1'01',CL72' '
EDTLNEL  EQU   *-EDTLNE
         SPACE 1
*- - - - R12-R11 BASE REGISTERS HIGH LIMIT - - - - - - - - - - - <===*
         EJECT
*------- EXECUTE ALL DELETE, REPEAT AND/OR INSERT PROCESS
         DS    0H
         USING *,R9
EDDRIX   ICM   R3,B'1111',EDTFIRST FIRST POINTER
         BZ    EDLNXQ              NONE
EDDRIX1  CLC   LCMF(L'LCMF,R3),=CL2'D' DELETE?
         BNE   EDDRIX2             NO
         XC    EDADDR,EDADDR       YES, FORCE DEFAULT
         LA    R0,1                DELETE ONE CARD
         BAL   R14,EDDLRTN
         LTR   R3,R3               HOW IS UPDATED POINTER?
         BNZ   EDDRIX5             OK
         ICM   R3,B'1111',EDTFIRST ELSE HOW WITH FIRST?
         BZ    *+L'*+12            FILE IS EMPTY
         ST    R3,EDTCURR          OK, UPDATE CURRENT POINTER
         OI    EDFSSW,RNUMSW       FORCE RENUM
         B     EDDRIX1             AND THIS IS ALSO THE NEXT
         ST    R3,EDTCURR          UPDATE CURRENT POINTER
         B     EDLNXQ              NO MORE
EDDRIX2  CLC   LCMF(L'LCMF,R3),=CL2'R' REPEAT?
         BNE   EDDRIX3             NO
         LA    R0,1                YES, REPEAT ONE CARD
         BAL   R14,EDADRTN
         L     R15,NPTR(R3)
         MVC   CDTA(L'CDTA,R15),CDTA(R3)
         XC    LCMF(L'LCMF,R3),LCMF(R3)
         B     EDDRIX4
EDDRIX3  CLC   LCMF(L'LCMF,R3),=CL2'I' INSERT?
         BNE   EDDRIX6             NO
         LA    R0,1                YES, ADD ONE CARD
         BAL   R14,EDADRTN
         XC    LCMF(L'LCMF,R3),LCMF(R3)
         L     R15,NPTR(R3)
         MVI   CDTA(R15),C' '
         MVC   CDTA+1(L'CDTA-1,R15),CDTA(R15)
EDDRIX4  MVI   EDROW,CREWDT+1      CURSOR ON ADDED LINE
         MVI   EDCOL,CCEWDT        CURSOR ON DATA FIELD
         LTR   R3,R3               HOW IS UPDATED POINTER?
         BNZ   EDDRIX5             OK
         L     R3,EDTFIRST         ELSE SET FIRST POINTER
EDDRIX5  ST    R3,EDTCURR          UPDATE CURRENT POINTER
         OI    EDFSSW,RNUMSW       FORCE RENUM
EDDRIX6  ICM   R3,B'1111',NPTR(R3) BUMP, LAST CARD?
         BNZ   EDDRIX1             NO, CONTINUE
         B     EDLNXQ
         PRINT &PRS
        LTORG
         PRINT &PRF
         DROP  R9
         SPACE 1
*------- COPY ONE CARD AFTER/BEFORE ANOTHER PROCESS
         DS    0H
         USING *,R9
EDCABX   L     R3,EDTABLOC         GET AFTER/BEFORE LOCATION
         LA    R0,1                ADD ONE CARD
         BAL   R14,EDADRTN
         L     R15,NPTR(R3)
         CLC   LCMF(L'LCMF,R3),=CL2'A' COPY WHERE?
         BE    *+L'*+12            BRANCH IF AFTER
         MVC   CDTA(L'CDTA,R15),CDTA(R3)
         LR    R4,R3
         B     *+L'*+2
         LR    R4,R15
         XC    LCMF(L'LCMF,R3),LCMF(R3)
         L     R5,EDTOFLOC         GET COPY LOCATION
         XC    LCMF(L'LCMF,R5),LCMF(R5)
         MVC   CDTA(L'CDTA,R4),CDTA(R5) MOVE IN REPEATED CARD
         ICM   R3,B'1111',PPTR(R4) HOW IS UPDATED POINTER?
         BNZ   *+L'*+4             OK
         L     R3,EDTFIRST         ELSE SET FIRST POINTER
         ST    R3,EDTCURR          UPDATE CURRENT POINTER
         XC    EDADDR,EDADDR       FORCE DEFAULT
         NI    EDPNSW,255-AFBESW-CPABSW
         XC    EDTABLOC,EDTABLOC
         XC    EDTOFLOC,EDTOFLOC
         B     FORCERN
         PRINT &PRS
        LTORG
         PRINT &PRF
         DROP  R9
         SPACE 1
*------- COPY A GROUP OF CARDS AFTER/BEFORE ANOTHER PROCESS
         DS    0H
         USING *,R9
EDCGABX  BAL   R14,CNTCRDS         GO COUNT CARDS TO COPY
         L     R3,EDTABLOC         GET AFTER/BEFORE LOCATION
         BAL   R14,EDADRTN         ADD CARDS
         CLC   LCMF(L'LCMF,R3),=CL2'B' COPY WHERE?
         BE    *+L'*+10            BRANCH IF BEFORE
         XC    LCMF(L'LCMF,R3),LCMF(R3) ELSE IT IS AFTER
         B     EDCGABX1
         LR    R14,R0              SET BEFORE TO LOOK LIKE AFTER
         LR    R15,R3
         L     R15,NPTR(R15)
         BCT   R14,*-4
         XC    LCMF(L'LCMF,R15),LCMF(R15)
         MVC   CDTA(L'CDTA,R15),CDTA(R3) MOVE IN BEFORE CARD
         XC    LCMF(L'LCMF,R3),LCMF(R3)
         LR    R5,R3
         ICM   R3,B'1111',PPTR(R3) AND POINT TO PREVIOUS CARD
         BNZ   EDCGABX1            BRANCH IF NOT FIRST CARD
         LR    R3,R5
         B     EDCGABX1+L'EDCGABX1
EDCGABX1 L     R5,NPTR(R3)
         L     R4,EDTOFLOC
         XC    LCMF(L'LCMF,R4),LCMF(R4)
EDCGABX2 XC    LCMF(L'LCMF,R5),LCMF(R5)
         MVC   CDTA(L'CDTA,R5),CDTA(R4) MOVE IN REPEATED CARD
         CLR   R4,R3
         BNE   *+L'*+8
         L     R4,NPTR(R4)
         BCT   R0,*-4
         CL    R4,EDTOTLOC
         BE    EDCGABX3
         L     R4,NPTR(R4)         BUMP TO NEXTS
         L     R5,NPTR(R5)
         B     EDCGABX2
EDCGABX3 XC    LCMF(L'LCMF,R4),LCMF(R4)
         ST    R3,EDTCURR          UPDATE CURRENT POINTER
         XC    EDADDR,EDADDR       FORCE DEFAULT
         NI    EDPNSW,255-AFBESW-CPRGSW-RNGESW
         XC    EDTABLOC,EDTABLOC
         XC    EDTOFLOC,EDTOFLOC
         XC    EDTOTLOC,EDTOTLOC
         B     FORCERN
         PRINT &PRS
        LTORG
         PRINT &PRF
         DROP  R9
         SPACE 1
*------- MOVE ONE CARD AFTER/BEFORE ANOTHER
         DS    0H
         USING *,R9
EDMABX   L     R3,EDTOFLOC         GET MOVE LOCATION
         L     R6,EDTABLOC         GET AFTER/BEFORE LOCATION
         CLC   LCMF(L'LCMF,R6),=CL2'A' MOVE WHERE?
         BNE   EDMABX1             BRANCH IF BEFORE
         LM    R4,R5,PPTR(R3)
         L     R7,NPTR(R6)
         ICM   R0,B'1111',PPTR(R6) GET PREVIOUS POINTER OF AFTER
         BNZ   *+L'*+2             OK
         LR    R0,R6               ELSE SET AFTER POINTER
         CLR   R3,R7               WHERE MUST WE MOVE?
         BE    EDMABX3             IN PLACE, NONE TO DO
         ST    R6,PPTR(R3)
         ST    R3,NPTR(R6)
         ST    R7,NPTR(R3)
         LTR   R7,R7
         BNZ   *+L'*+8
         ST    R3,EDTLAST
         B     EDMABX2
         ST    R3,PPTR(R7)
         B     EDMABX2
EDMABX1  LM    R4,R5,PPTR(R3)
         L     R7,PPTR(R6)
         LTR   R0,R7               SET PREVIOUS POINTER OF MOVE
         BNZ   *+L'*+2             OK
         LR    R0,R3               ELSE SET MOVE POINTER
         CLR   R3,R7               WHERE MUST WE MOVE?
         BE    EDMABX3             IN PLACE, NONE TO DO
         ST    R6,NPTR(R3)
         ST    R3,PPTR(R6)
         ST    R7,PPTR(R3)
         LTR   R7,R7
         BNZ   *+L'*+8
         ST    R3,EDTFIRST
         B     EDMABX2
         ST    R3,NPTR(R7)
EDMABX2  LTR   R5,R5
         BNZ   *+L'*+8
         ST    R4,EDTLAST
         B     *+L'*+4
         ST    R4,PPTR(R5)
         LTR   R4,R4
         BNZ   *+L'*+8
         ST    R5,EDTFIRST
         B     *+L'*+4
         ST    R5,NPTR(R4)
         OI    EDFSSW,SVDTSW       SAY DATA CHANGED
EDMABX3  XC    LCMF(L'LCMF,R3),LCMF(R3)
         XC    LCMF(L'LCMF,R6),LCMF(R6)
         ST    R0,EDTCURR          UPDATE CURRENT POINTER
         XC    EDADDR,EDADDR       FORCE DEFAULT
         NI    EDPNSW,255-AFBESW-MVABSW
         XC    EDTABLOC,EDTABLOC
         XC    EDTOFLOC,EDTOFLOC
         B     FORCERN
         PRINT &PRS
        LTORG
         PRINT &PRF
         DROP  R9
         SPACE 1
*------- MOVE A GROUP OF CARDS AFTER/BEFORE ANOTHER
         DS    0H
         USING *,R9
EDMGABX  L     R3,EDTOFLOC         GET MOVE START LOCATION
         L     R5,EDTOTLOC         GET MOVE END LOCATION
         L     R7,EDTABLOC         GET AFTER/BEFORE LOCATION
         CLC   LCMF(L'LCMF,R7),=CL2'A' MOVE WHERE?
         BNE   EDMGABX1            BRANCH IF BEFORE
         L     R4,PPTR(R3)
         L     R6,NPTR(R5)
         L     R8,NPTR(R7)
         CLR   R3,R8               WHERE MUST WE MOVE?
         BNE   *+L'*+6
         LR    R0,R7               IN PLACE, NONE TO DO
         B     EDMGABX2
         LR    R14,R3
         L     R14,NPTR(R14)
         CLR   R14,R5
         BE    *+L'*+12
         CLR   R14,R7              WHERE IS THE TARGET OF MOVE?
         BNE   *-12
         LR    R0,R3               INTO THE RANGE, NONE TO DO
         B     EDMGABX2
         ST    R7,PPTR(R3)
         ST    R3,NPTR(R7)
         ST    R8,NPTR(R5)
         LTR   R8,R8
         BNZ   *+L'*+8
         ST    R5,EDTLAST
         B     *+L'*+4
         ST    R5,PPTR(R8)
         LTR   R6,R6
         BNZ   *+L'*+8
         ST    R4,EDTLAST
         B     *+L'*+4
         ST    R4,PPTR(R6)
         LTR   R4,R4
         BNZ   *+L'*+8
         ST    R6,EDTFIRST
         B     *+L'*+4
         ST    R6,NPTR(R4)
         ICM   R0,B'1111',PPTR(R7) GET PREVIOUS POINTER OF AFTER
         BNZ   *+L'*+2             OK
         LR    R0,R7               ELSE SET AFTER POINTER
         OI    EDFSSW,SVDTSW       SAY DATA CHANGED
         B     EDMGABX2
EDMGABX1 L     R4,PPTR(R3)
         L     R6,NPTR(R5)
         L     R8,PPTR(R7)
         CLR   R5,R8               WHERE MUST WE MOVE?
         BNE   *+L'*+6
         LR    R0,R3               IN PLACE, NONE TO DO
         B     EDMGABX2
         LR    R14,R3
         L     R14,NPTR(R14)
         CLR   R14,R5
         BE    *+L'*+12
         CLR   R14,R7              WHERE IS THE TARGET OF MOVE?
         BNE   *-12
         LR    R0,R3               INTO THE RANGE, NONE TO DO
         B     EDMGABX2
         ST    R8,PPTR(R3)
         ST    R5,PPTR(R7)
         ST    R7,NPTR(R5)
         LTR   R8,R8
         BNZ   *+L'*+8
         ST    R3,EDTFIRST
         B     *+L'*+4
         ST    R3,NPTR(R8)
         LTR   R6,R6
         BNZ   *+L'*+8
         ST    R4,EDTLAST
         B     *+L'*+4
         ST    R4,PPTR(R6)
         LTR   R4,R4
         BNZ   *+L'*+8
         ST    R6,EDTFIRST
         B     *+L'*+4
         ST    R6,NPTR(R4)
         ICM   R0,B'1111',PPTR(R3) GET PREVIOUS POINTER OF MOVE
         BNZ   *+L'*+2             OK
         LR    R0,R3               ELSE SET MOVE POINTER
         OI    EDFSSW,SVDTSW       SAY DATA CHANGED
EDMGABX2 XC    LCMF(L'LCMF,R3),LCMF(R3)
         XC    LCMF(L'LCMF,R5),LCMF(R5)
         XC    LCMF(L'LCMF,R7),LCMF(R7)
         ST    R0,EDTCURR          UPDATE CURRENT POINTER
         XC    EDADDR,EDADDR       FORCE DEFAULT
         NI    EDPNSW,255-AFBESW-MVRGSW-RNGESW
         XC    EDTABLOC,EDTABLOC
         XC    EDTOFLOC,EDTOFLOC
         XC    EDTOTLOC,EDTOTLOC
         B     FORCERN
         PRINT &PRS
        LTORG
         PRINT &PRF
         DROP  R9
         SPACE 1
*------- DELETE A GROUP OF CARDS
         DS    0H
         USING *,R9
EDDLG    BAL   R14,CNTCRDS         GO COUNT CARDS TO DELETE
         L     R3,EDTOFLOC         GET START LOCATION
         BAL   R14,EDDLRTN         DELETE CARDS
         LTR   R3,R3               HOW IS UPDATED POINTER?
         BNZ   *+L'*+4             OK
         L     R3,EDTFIRST         ELSE SET FIRST POINTER
         ST    R3,EDTCURR          UPDATE CURRENT POINTER
         XC    EDADDR,EDADDR       FORCE DEFAULT
         NI    EDPNSW,255-DLRGSW-RNGESW
         XC    EDTOFLOC,EDTOFLOC
         XC    EDTOTLOC,EDTOTLOC
         B     FORCERN
         PRINT &PRS
        LTORG
         PRINT &PRF
         DROP  R9
         SPACE 1
*------- REPEAT A GROUP OF CARDS
         DS    0H
         USING *,R9
EDRPG    BAL   R14,CNTCRDS         GO COUNT CARDS TO REPEAT
         L     R3,EDTOTLOC         GET END LOCATION
         BAL   R14,EDADRTN         ADD CARDS
         L     R4,EDTOFLOC         GET START LOCATION
         L     R5,NPTR(R3)         GET INITIAL COPY LOCATION
EDRPG1   XC    LCMF(L'LCMF,R4),LCMF(R4)
         XC    LCMF(L'LCMF,R5),LCMF(R5)
         MVC   CDTA(L'CDTA,R5),CDTA(R4) MOVE IN REPEATED CARD
         CLR   R4,R3
         BE    *+L'*+12
         L     R4,NPTR(R4)         BUMP TO NEXTS
         L     R5,NPTR(R5)
         B     EDRPG1
         ST    R3,EDTCURR          UPDATE CURRENT POINTER
         XC    EDADDR,EDADDR       FORCE DEFAULT
         NI    EDPNSW,255-RPRGSW-RNGESW
         XC    EDTOFLOC,EDTOFLOC
         XC    EDTOTLOC,EDTOTLOC
         B     FORCERN
         PRINT &PRS
        LTORG
         PRINT &PRF
         DROP  R9
         SPACE 1
*------- INPUT ONE OR MORE CARDS COMMAND
         DS    0H
         USING *,R9
EDINPTX  BCTR  R0,0
         BCT   R1,*-2
         CLI   EWSCF1(R3),C' '
         BNE   *+L'*+8
         BCT   R0,*-8
         B     EDINPTDF            JUST SET DEFAULT
         CLI   EWSCF1(R3),C'0'     IF NOT NUMERIC?
         BL    EDINPTDF            JUST SET DEFAULT
         LR    R14,R3
         LA    R15,6               MAXIMUM LENGTH
         CLR   R15,R0
         BNH   *+L'*+2
         LR    R15,R0
         XR    R1,R1               COUNTER
         CLI   EWSCF1(R14),C'0'    IF NOT NUMERIC
         BL    *+L'*+12
         LA    R1,1(,R1)           BUMP COUNTER
         LA    R14,1(,R14)         BUMP POINTER
         BCT   R15,*-16
         LTR   R1,R1               IF LENGTH IS ZERO
         BZ    EDINPTDF            JUST SET DEFAULT
         BCTR  R1,0                SUBTRACT 1 FOR EXECUTED PACK
         EX    R1,NUMPACK          PACK IT IN EDDLBW
         CVB   R0,EDDBLW           PUT VALUE IN R0
         CH    R0,EDSCROLL         OVER MAXIMUM ALLOWED?
         BNH   EDINPTXQ            NO
EDINPTDF LH    R0,EDSCROLL         BUMP THE SCREEN
         TM    EDFUSW,EDHLSW       HALF PAGE
         BZ    EDINPTXQ            NO
         SRL   R0,1                YES
EDINPTXQ ST    R0,EDTNOWL          UPDATE BY REQUEST
         L     R3,EDTGASL          REDUCE BY REQUEST
         SR    R3,R0
         ST    R3,EDTGASL
         L     R3,EDTPOOL          GET FIRST FREE CARD
         ST    R3,EDTFIRST         SET FIRST POINTER
         ST    R3,EDTCURR          SET CURRENT POINTER
EDINPTXL MVI   CDTA(R3),C' '
         MVC   CDTA+1(L'CDTA-1,R3),CDTA(R3)
         LR    R4,R3
         L     R3,NPTR(R3)         BUMP TO NEXT
         BCT   R0,*+L'*+4
         B     *+L'*+8
         ST    R4,PPTR(R3)
         B     EDINPTXL
         ST    R0,NPTR(R4)
         ST    R4,EDTLAST          SET LAST POINTER
         ST    R3,EDTPOOL          SET NEW FIRST IN POOL
         ST    R0,EDTFCCP          RESET F/C CURRENT POINTER
         STH   R0,EDTFOFF          RESET OFFSET
         OI    EDFSSW,SVDTSW       SAY DATA CHANGED
         BAL   R14,EDRNRTN         RENUMBER
         MVI   EDROW,CREWDT        SET CURSOR ON FISRT LINE ADDED
         MVI   EDCOL,CCEWDT
         B     EDSHOWS             RE-DISPLAY
         PRINT &PRS
        LTORG
         PRINT &PRF
         DROP  R9
         SPACE 1
*------- FIND THE NEXT OCCURRENCE OF A STRING COMMAND AND CHANGE
*        THE NEXT OCCURRENCE OF A STRING COMMAND PROCESSES
         DS    0H
         USING *,R9
EDXRFND  XR    R14,R14             CLEAR THE REGISTER
         IC    R14,EDFINDL         SET LENGTH FOR EXECUTED CLC
         MVI   FNDWA,C' '          PREPARE COMPARE STRING
         MVC   FNDWA+1(L'FNDWA-1),FNDWA
         MVI   CRDWA,C' '
         TM    EDFUSW,EDASSW       ASIS?
         BO    *+L'*+16            YES
         TM    EDFSSW,EDDTSW       NO, ASIS DATA?
         BO    *+L'*+12            NO
         EX    R14,CPYFSTR         YES ,COPY
         B     *+L'*+4
         EX    R14,CUCFSTR         COPY AND UPPERCASE
         ICM   R1,B'1111',EDTCURR  PICK UP CURRENT POINTER
         BZ    EDRFCBGN            NONE
         CL    R1,EDTFCCP          CONTINUE ON SAME CARD?
         BNE   EDRFCNEW            NO
         LR    R15,R1              YES, COPY START OF CARD
         CLI   EDTCMND,C'C'        CHANGE?
         BE    EDRCHANG            YES
         LA    R0,CCNU-1           NO, START ONE COLUMN FORWARD
         SH    R0,EDTFOFF
         SR    R0,R14              SET R0 TO MAXIMUM CARD LOOP
         BNP   EDRFNEXT            BUT IF NO MORE, START WITH NEXT
         AH    R1,EDTFOFF
         LA    R1,1(,R1)           BUMP 1 BYTE
         B     EDRFCTST
EDRCHANG LA    R0,CCNU             START ON SAME COLUMN JUST BECAUSE
         SH    R0,EDTFOFF            A PREVIOUS FIND MAY HAVE DONE
         SR    R0,R14              SET R0 TO MAXIMUM CARD LOOP
         BNP   EDRFNEXT            BUT IF NO MORE, START WITH NEXT
         AH    R1,EDTFOFF
         B     EDRFCTST
EDRFCNEW CL    R1,EDTLAST          ALL DONE?
         BNE   EDXRFND1            NO
EDRFCBGN L     R1,EDTFIRST         ALL DONE (LOOP TO BEGINNING) OR NONE
EDXRFND1 LTR   R15,R1              COPY START OF CARD
         BZ    EDRFNOTF            IF PAST END OF FILE? ALL DONE
         LA    R0,CCNU
         SR    R0,R14              SET R0 TO MAXIMUM CARD LOOP
EDRFCTST TM    EDFUSW,EDASSW       ASIS?
         BO    EDRFCHKD            YES
         TM    EDFSSW,EDDTSW       NO, ASIS DATA?
         BZ    EDRFLOOP            NO
EDRFCHKD MVC   CRDWA+1(L'FNDWA),CRDWA
         EX    R14,UPPERDT         SET DATA
         EX    R14,FINDCLC         COMPARE DATA TO STRING
         BE    EDXRFND2            GOT IT
         LA    R1,1(,R1)           BUMP 1 BYTE
         BCT   R0,EDRFCHKD         KEEP LOOPING
         B     EDRFNEXT
EDRFLOOP EX    R14,FNDCLC          SEARCH FOR THE STRING
         BE    EDXRFND2            GOT IT
         LA    R1,1(,R1)           BUMP 1 BYTE
         BCT   R0,EDRFLOOP         KEEP LOOPING
EDRFNEXT L     R1,NPTR(R15)        BUMP TO NEXT CARD
         B     EDXRFND1            ALL DONE
EDXRFND2 CLI   EDTCMND,C'C'        CHANGE?
         BNE   EDXRFND3            NO, JUST FIND
         CLC   EDCHNGL(1),EDFINDL  STRINGS ARE SAME LENGTH?
         BL    EDCHSH              NO, CHANGE IS SHORT
         BH    EDCHLG              NO, CHANGE IS LONG
         EX    R14,CHGMVC          YES, JUST REPLACE THE STRING
         B     EDCHEND
EDCHSH   XR    R2,R2
         IC    R2,EDCHNGL          GET LENGTH FOR EXECUTED MVC
         EX    R2,CHGMVC           REPLACE THE STRING
         LA    R2,1(R2,R1)         NOW SHIFT LEFT IF NEEDED
         LA    R3,1(R14,R1)
         LA    R0,CCNU-1(R15)
         NI    EDTQST,255-QSTRSW-NQSTSW
EDCHSH1  TM    EDTQST,QSTRSW
         BO    *+L'*+8
         CLI   0(R3),C' '
         BE    EDCHSH2
         CLI   0(R3),C''''
         BNE   *+L'*+4
         XI    EDTQST,QSTRSW
         MVC   0(1,R2),0(R3)
         LA    R2,1(R2)
         LA    R3,1(R3)
         CLR   R3,R0
         BL    EDCHSH1
EDCHSH2  MVI   0(R2),C' '
         LA    R2,1(R2)
         CLR   R2,R3
         BL    EDCHSH2
         B     EDCHEND
EDCHLG   MVI   CRDWA,C' '
         MVC   CRDWA+1(L'CRDWA-1),CRDWA
         LA    R3,CRDWA
         LR    R2,R1
         SR    R2,R15
         BNP   *+L'*+2
         AR    R3,R2               SKIP UNCHANGED STARTING PORTION
         LR    R5,R3               RETAIN THIS ADDRESS
         XR    R2,R2
         IC    R2,EDCHNGL          GET LENGTH FOR EXECUTED MVC
         EX    R2,MVCCHG           MOVE THE CHANGE STRING
         LA    R3,1(R2,R3)         NOW TRY TO COMPLETE CARD
         LA    R2,1(R1,R14)
         LA    R0,CRDWA+CCNU
         LA    R14,CRDWA
         NI    EDTQST,255-QSTRSW-NQSTSW
EDCHLG1  TM    EDTQST,QSTRSW
         BO    *+L'*+8
         CLI   0(R2),C' '
         BE    EDCHLG3
         TM    EDTQST,NQSTSW
         BO    EDCHLG2
         CLI   0(R2),C''''
         BNE   EDCHLG2
         XI    EDTQST,QSTRSW
EDCHLG2  MVC   0(1,R3),0(R2)
         LA    R2,1(R2)
         LA    R3,1(R3)
         CLR   R3,R0
         BL    EDCHLG1
         B     EDCHERR
EDCHLG3  MVI   0(R3),C' '
         OI    EDTQST,NQSTSW
         LR    R4,R3
         SR    R4,R14
         AR    R4,R15
EDCHLG4  LA    R2,1(R2)
         CLR   R2,R4
         BH    EDCHLG5
         CLI   0(R2),C' '
         BE    EDCHLG4
         LA    R3,1(R3)
         CLR   R3,R0
         BL    EDCHLG2
EDCHERR  MVC   MSGBUFF(9),=CL9' AT COL. '
         MVI   MSGBUFF,17
         SR    R1,R15              COMPUTE COLUMN NUMBER
         LA    R0,1(R1)
         CVD   R0,EDDBLW
         OI    EDDBLW+7,X'0F'
         UNPK  MSGBUFF+9(3),EDDBLW+6(2)
         MVC   MSGBUFF+12(6),=CL6' DO IT'
         B     EDXRFND4
EDCHLG5  LR    R4,R3
         SR    R4,R5
         BCT   R4,*+L'*+6
         MVC   0(*-*,R1),0(R5)     <<EXECUTED>>
         EX    R4,*-6              MOVE NEW PART IN CARD
EDCHEND  OI    EDFSSW,SVDTSW       SAY DATA CHANGED
         MVI   MSGBUFF,19
         MVC   MSGBUFF+1(7),=CL7'CHANGED'
         MVC   MSGBUFF+8(9),=CL9' AT COL. '
         SR    R1,R15              COMPUTE COLUMN NUMBER
         LA    R0,1(R1)
         CVD   R0,EDDBLW
         OI    EDDBLW+7,X'0F'
         UNPK  MSGBUFF+17(3),EDDBLW+6(2)
         B     EDXRFND4
CPYFSTR  MVC   FNDWA(*-*),EDFINDS  <<EXECUTED>>
CUCFSTR  OC    FNDWA(*-*),EDFINDS  <<EXECUTED>>
UPPERDT  OC    CRDWA+1(*-*),0(R1)  <<EXECUTED>>
FINDCLC  CLC   CRDWA+1(*-*),FNDWA  <<EXECUTED>>
FNDCLC   CLC   EDFINDS(*-*),0(R1)  <<EXECUTED>>
CHGMVC   MVC   0(*-*,R1),EDCHNGS   <<EXECUTED>>
MVCCHG   MVC   0(*-*,R3),EDCHNGS   <<EXECUTED>>
EDXRFND3 MVI   MSGBUFF,17
         MVC   MSGBUFF+1(5),=CL5'FOUND'
         MVC   MSGBUFF+6(9),=CL9' AT COL. '
         SR    R1,R15              COMPUTE COLUMN NUMBER
         LA    R0,1(R1)
         CVD   R0,EDDBLW
         OI    EDDBLW+7,X'0F'
         UNPK  MSGBUFF+15(3),EDDBLW+6(2)
EDXRFND4 ST    R15,EDTCURR         SET CURRENT POINTER
         ST    R15,EDTFCCP         SET F/C CURRENT POINTER
         STH   R1,EDTFOFF          SET OFFSET
         MVI   EDROW,CREWDT        SET CURSOR AT START OF STRING
         LA    R1,CCEWDT(R1)
         STC   R1,EDCOL
         LA    R1,MSGBUFF          FOUND
         B     EDSTMSM
EDRFNOTF MVC   EDTCURR,EDTLAST     NOT FOUND, CURRENT POINTER TO LAST
         XR    R0,R0
         ST    R0,EDTFCCP          RESET F/C CURRENT POINTER
         STH   R0,EDTFOFF          RESET OFFSET
         LA    R1,*+L'*+4
         B     EDSTMS
         MSG   'STRING NOT FOUND'
         PRINT &PRS
        LTORG
         PRINT &PRF
         DROP  R9
         SPACE 1
*------- DOWN COMMAND
         DS    0H
         USING *,R9
EDMORMEM CLI   0(R3),0             WAS THIS LINE CHANGED BY OPERATOR?
         BE    EDMORMDF            NO, JUST BUMP DEFAULT
         TM    EWSCF1-1(R3),INFMOD COMMAND ENTERED?
         BZ    EDMORMDF            NO, JUST BUMP DEFAULT
         LA    R0,L'EWSCF1-1       LEFT JUSTIFY FIELD IF NEEDED
         CLI   EWSCF1(R3),C' '
         BNE   *+L'*+14
         MVC   EWSCF1(L'EWSCF1-1,R3),EWSCF1+1(R3)
         MVI   EWSCF1+L'EWSCF1-1(R3),C' '
         BCT   R0,*-18
         CLI   EWSCF1(R3),C' '     COMMAND ENTERED?
         BE    EDMORMDF            NO, JUST BUMP DEFAULT
         L     R2,TERMINPT         PICK UP AID/ROW/COL ADDRESS
         CLI   0(R2),X'F8'         IS IT PF8?
         BE    EDMORMSC            YES
         CLI   0(R2),X'C8'         IS IT PF20?
         BE    EDMORMSC            NO
         MVC   EDDBLW(7),=CL8' '
         OC    EDDBLW(7),EWSCF1(R3)
         CLC   EDDBLW(5),=CL7'DOWN' IS IT "DOWN"?
         BNE   *+L'*+12            NO
         LA    R3,5(R3)            YES, SEE FORWARD
         SH    R0,=H'5'
         B     *+L'*+28
         CLC   EDDBLW(2),=CL2'D'   IS IT "DOWN"?
         BE    *+L'*+10            YES
         CLC   EDDBLW(2),=CL2'+'   IS IT "DOWN"?
         BNE   EDLNESNX            NO, INVALID COMMAND
         LA    R3,2(R3)            YES, SEE FORWARD
         SH    R0,=H'2'
         BNP   EDPREMDF            NO MORE, JUST BUMP DEFAULT
         CLI   EWSCF1(R3),C' '
         BNE   EDMORMSC
         LA    R3,1(R3)
         BCT   R0,*-12
         B     EDMORMDF            NONE, JUST BUMP DEFAULT
EDMORMSC MVI   EDDBLW,C' '
         OC    EDDBLW(1),EWSCF1(R3)
         CLI   EDDBLW,C'M'         SCROLL "MAX"?
         BE    EDMORMAX            GO TO BOTTOM
         CLI   EWSCF1(R3),C'0'     IF NOT NUMERIC?
         BL    EDMORMDF            JUST BUMP DEFAULT
         LA    R14,EWSCF1(,R3)     SET START OF FIELD
         LA    R15,6               MAXIMUM LENGTH
         CLR   R15,R0
         BNL   *+L'*+2
         LR    R15,R0
         XR    R1,R1               COUNTER
         CLI   0(R14),C'0'         IF NOT NUMERIC
         BL    *+L'*+12
         LA    R1,1(,R1)           BUMP COUNTER
         LA    R14,1(,R14)         BUMP POINTER
         BCT   R15,*-16
         LTR   R1,R1               IF LENGTH IS ZERO
         BZ    EDMORMDF            JUST BUMP DEFAULT
         BCTR  R1,0                SUBTRACT 1 FOR EXECUTED PACK
         EX    R1,NUMPACK          PACK IT IN EDDLBW
         CVB   R0,EDDBLW           PUT VALUE IN R0
         B     EDMORXEQ
EDMORMDF LH    R0,EDSCROLL         BUMP THE SCREEN
         TM    EDFUSW,EDCRSW       CURSOR?
         BZ    EDMORHLF            NO
         L     R14,TERMINPT        PICK UP AID/ROW/COL ADDRESS
         XR    R15,R15
         IC    R15,1(R14)          GET ROW NUMBER
         SH    R15,=Y(CREWDT)
         BNP   EDMORXEQ
         LR    R0,R15
         B     EDMORXEQ
EDMORHLF TM    EDFUSW,EDHLSW       HALF PAGE?
         BZ    EDMORXEQ            NO
         SRL   R0,1                YES
EDMORXEQ LTR   R0,R0
         BNP   EDMOREX             GO BACK
         ICM   R1,B'1111',EDTCURR
         BZ    EDMORMAX            GO TO BOTTOM
         ICM   R1,B'1111',NPTR(R1)
         BZ    EDMORMAX            GO TO BOTTOM
         BCT   R0,*-8
         ST    R1,EDTCURR          SET CURRENT POINTER
         B     EDMOREX             GO BACK
EDMORMAX ICM   R1,B'1111',EDTLAST  BUMP SCREEN TO BOTTOM
         BZ    EDMORSET            NONE
         LH    R0,EDSCROLL         AND THEN BACK UP
         TM    EDFUSW,EDHLSW       HALF PAGE
         BZ    *+L'*+4             NO
         SRL   R0,1                YES
         BCT   R0,*+L'*+4          (-1 = BOTTOM MARKER)
         B     EDMORSET
         BCT   R0,*+L'*+4
         B     EDMORSET
         ICM   R1,B'1111',PPTR(R1)
         BNZ   *-12
         L     R1,EDTFIRST         HERE WE ARE AT TOP
EDMORSET ST    R1,EDTCURR
EDMOREX  TM    EDFUSW,EXTCPY       COPY PENDING?
         BZ    GOBACK              NO, RE-DISPLAY
         B     EDSMS7              ELSE SET MESSAGE
         PRINT &PRS
        LTORG
         PRINT &PRF
         DROP  R9
         SPACE 1
*------- UP COMMAND
         DS    0H
         USING *,R9
EDPREMEM CLI   0(R3),0             WAS THIS LINE CHANGED BY OPERATOR?
         BE    EDPREMDF            NO, JUST BUMP DEFAULT
         TM    EWSCF1-1(R3),INFMOD COMMAND ENTERED?
         BZ    EDPREMDF            NO, JUST BUMP DEFAULT
         LA    R0,L'EWSCF1-1       LEFT JUSTIFY FIELD IF NEEDED
         CLI   EWSCF1(R3),C' '
         BNE   *+L'*+14
         MVC   EWSCF1(L'EWSCF1-1,R3),EWSCF1+1(R3)
         MVI   EWSCF1+L'EWSCF1-1(R3),C' '
         BCT   R0,*-18
         CLI   EWSCF1(R3),C' '     COMMAND ENTERED?
         BE    EDPREMDF            NO, JUST BUMP DEFAULT
         L     R2,TERMINPT         PICK UP AID/ROW/COL ADDRESS
         CLI   0(R2),X'F7'         IS IT PF7?
         BE    EDPREMSC            YES
         CLI   0(R2),X'C7'         IS IT PF19?
         BE    EDPREMSC            YES
         MVC   EDDBLW(7),=CL8' '
         OC    EDDBLW(7),EWSCF1(R3)
         CLC   EDDBLW(3),=CL3'UP'  IS IT "UP"?
         BNE   *+L'*+12            NO
         LA    R3,3(R3)            YES, SEE FORWARD
         SH    R0,=H'3'
         B     *+L'*+28
         CLC   EDDBLW(2),=CL2'U'   IS IT "UP"?
         BE    *+L'*+10            YES
         CLC   EDDBLW(2),=CL2'-'   IS IT "UP"?
         BNE   EDLNESNX            NO, INVALID COMMAND
         LA    R3,2(R3)            YES, SEE FORWARD
         SH    R0,=H'2'
         BNP   EDPREMDF            NO MORE, JUST BUMP DEFAULT
         CLI   EWSCF1(R3),C' '
         BNE   EDPREMSC
         LA    R3,1(R3)
         BCT   R0,*-12
         B     EDPREMDF            NONE, JUST BUMP DEFAULT
EDPREMSC MVI   EDDBLW,C' '
         OC    EDDBLW(1),EWSCF1(R3)
         CLI   EDDBLW,C'M'         SCROLL "MAX"?
         BE    EDPREMAX            GO TO TOP
         CLI   EWSCF1(R3),C'0'     IF NOT NUMERIC?
         BL    EDPREMDF            JUST BUMP DEFAULT
         LA    R14,EWSCF1(,R3)     SET START OF FIELD
         LA    R15,6               MAXIMUM LENGTH
         CLR   R15,R0
         BNL   *+L'*+2
         LR    R15,R0
         XR    R1,R1               COUNTER
         CLI   0(R14),C'0'         IF NOT NUMERIC
         BL    *+L'*+12
         LA    R1,1(,R1)           BUMP COUNTER
         LA    R14,1(,R14)         BUMP POINTER
         BCT   R15,*-16
         LTR   R1,R1               IF LENGTH IS ZERO?
         BZ    EDPREMDF            JUST BUMP DEFAULT
         BCTR  R1,0                SUBTRACT 1 FOR EXECUTED PACK
         EX    R1,NUMPACK          PACK IT IN EDDBLW
         CVB   R0,EDDBLW           PUT VALUE IN R0
         B     EDPREXEQ
EDPREMDF LH    R0,EDSCROLL         BACK UP THE SCREEN
         TM    EDFUSW,EDCRSW       CURSOR?
         BZ    EDPREHLF            NO
         L     R14,TERMINPT        PICK UP AID/ROW/COL ADDRESS
         XR    R15,R15
         IC    R15,1(R14)          GET ROW NUMBER
         LA    R14,CREWDT-1
         SR    R15,R14
         BNP   EDPREXEQ
         SR    R0,R15
         B     EDPREXEQ
EDPREHLF TM    EDFUSW,EDHLSW       HALF PAGE
         BZ    EDPREXEQ            NO
         SRL   R0,1                YES
EDPREXEQ LTR   R0,R0
         BNP   EDPREEX             GO BACK
         ICM   R1,B'1111',EDTCURR
         BZ    EDPREMAX
         ICM   R1,B'1111',PPTR(R1)
         BZ    EDPREMAX
         BCT   R0,*-8
         ST    R1,EDTCURR          SET CURRENT POINTER
         B     EDPREEX             GO BACK
EDPREMAX MVC   EDTCURR,EDTFIRST
EDPREEX  TM    EDFUSW,EXTCPY       COPY PENDING?
         BZ    GOBACK              NO, RE-DISPLAY
         B     EDSMS7              ELSE SET MESSAGE
         PRINT &PRS
        LTORG
         PRINT &PRF
         DROP  R9
         SPACE 1
*------- EXECUTE COPY COMMAND
         CNOP  2,4
         USING *,R9
EDXCPY   LR    R2,R8
        GETMAIN RC,LV=(R8)         GET "CPWKAR" WORK-AREA
         LTR   R15,R15             HOW COMPLETE?
         BZ    EDXCOK              OK
        XMESS  2010,R15            ERROR
         LA    R1,*+L'*+10
         ST    R1,MSGADD
         L     R14,=A(CPLEAVE)
         BR    R14                 CANCEL REQUEST
         MSG   'GETMAIN "CPY" FAILED'
         PRINT &PRS
        LTORG
         PRINT &PRF
EDXCOK   LR    R0,R1
         LR    R1,R8
         LR    R8,R0               SET GETMAIN POINTER
         LA    R14,*
         XR    R15,R15
         MVCL  R0,R14              CLEAR ALL TO BINARY ZEROS
         USING CPWKAR,R8
         ST    R2,CPWKLN           SAVE LENGTH
         STM   R11,R12,CPSVRS      SAVE R11-R12
         DROP  R9,R11,R12
         LR    R11,R9
         LA    R12,2048(R11)
         LA    R12,2048(R12)
         USING EDXCPY,R11,R12
         MVC   CPWDSN,EDTDSNM      SET CURRENT DS-NAME
         MVC   CPWVOL,EDTVOL       SET CURRENT VOL-SER
         MVC   CPWPSW,EDTPASS      SET CURRENT PASSWORD
*- - - - LOOK IF DATA-SET IN CATALOG
         MVC   VCMLST(CTCMLSL),CTCMLST CLEAR CAMLST AREA
         XC    VUSWA(L'VUSWA),VUSWA
         XC    VUSWA+L'VUSWA(16),VUSWA+L'VUSWA
         LA    R15,CPWDSN          SET DS-NAME
         XR    R0,R0
         LA    R1,VUSWA            SET OUTPUT AREA
         STM   R15,R1,VCMLST+4
        LOCATE VCMLST
         LTR   R15,R15             CHECK RETURN CODE
         BNZ   EDXBLD              NOT IN CATALOG
         CLC   CPWVOL(L'CPWVOL),VUSWA+6 IS IT THIS VOL-SER?
         BNE   EDXBLD              NO, NOT IN CATALOG
         OI    CPWKSW,VLRFC        YES, SAY RETRIEVED FROM CATALOG
*- - - - BUILD COPY ENTRY SCREEN
EDXBLD   TM    CPWKSW,VLRFC        VOL-SER WAS RETRIEVED FROM CATALOG?
         BZ    *+L'*+10            NO
         NI    CPWKSW,255-VLRFC
         MVC   CPWVOL,=CL6' '
         L     R5,=A(CPYSCR)
         L     R4,SCROWS1          NUMBER OF ROWS IN SCREEN 1
         LA    R3,TERMOUT+4        POINT TO FIRST LINE OF SCREEN 1
         CLI   SPLIT,2             AM I ON SCREEN 2
         BNE   EDXBLD1             NOPE, I'M ALL SET
         SLL   R4,2                MULTIPLY OFFSET BY 4
         LA    R3,TERMOUT+4(R4)    POINT TO ROW 1 OF SCREEN 2
         L     R4,SCROWS2          NUMBER OF ROWS IN SCREEN 2
EDXBLD1  NI    0(R3),255-EOS       CLEAR END-OF-SCREEN
         L     R2,0(,R5)           ADDRESS OF FROM FIELD
         L     R6,0(,R3)           ADDRESS OF "TO" FIELD
         XR    R1,R1
         IC    R1,0(,R2)           PICK UP LENGTH
         EX    R1,EDXSMVL          MOVE IT
         CLC   CPOFF1(10,R6),=CL10'FULLY-QUAL' DS-NAME?
         BNE   EDXBLD2             NO
         OI    CPWDSN,C' '
         CLI   CPWDSN,C' '         IS THERE A DATA-SET NAME SPECIFIED?
         BE    EDXBLD4             NO
         MVC   CPSCF1(L'CPWDSN,R6),CPWDSN COPY CURRENT DATA-SET NAME
         B     EDXBLD4             DO THE REST
EDXSMVL  MVC   0(*-*,R6),0(R2)     <<EXECUTED>>
EDXBLD2  CLC   CPOFF2(13,R6),=CL13'VOLUME SERIAL' VOL-SER?
         BNE   EDXBLD3             NO
         OC    CPWVOL,=CL6' '
         CLI   CPWVOL,C' '         IS THERE A VOL-SER SPECIFIED?
         BE    EDXBLD4             NO
         MVC   CPSCF2(L'CPSCF2,R6),CPWVOL COPY CURRENT VOL-SER
         B     EDXBLD4             DO THE REST
EDXBLD3  CLC   CPOFF3(17,R6),=CL17'DATA-SET PASSWORD' PASSWORD?
         BNE   EDXBLD4             NO
         MVC   CPSCF3(L'CPSCF3,R6),CPWPSW COPY CURRENT PASSWORD
         CLI   CPWPSW,C' '         IS THERE A PASSWORD SPECIFIED?
         BE    EDXBLD4             NO
         MVC   CPOFF4(L'CPOFF4,R6),=CL3'(I)' SAY IN
         MVI   CPOFF4-1(R6),X'05'  SET INTENS
EDXBLD4  TM    0(R5),EOL           END-OF-LIST?
         BO    EDXBLD5             YUP
         BCT   R4,*+L'*+4          END OF SCREEN ROWS?
         B     EDXBLD6             YUP
         LA    R5,4(R5)            BUMP TO NEXT PARM
         LA    R3,4(R3)            BUMP TO NEXT PARM
         B     EDXBLD1             KEEP LOOPING
EDXBLD5  BCT   R4,*+L'*+4          END OF SCREEN ROWS?
         BZ    EDXBLD6             YUP
         LA    R3,4(R3)            BUMP TO NEXT PARM
         L     R6,0(,R3)           ADDRESS OF "TO" FIELD
         NI    0(R3),255-EOS       CLEAR END-OF-SCREEN
         MVC   0(XDUMMYL,R6),XDUMMY MOVE IN A DUMMY ROW
         B     EDXBLD5             KEEP LOOPING
EDXBLD6  CLI   SPLIT,1             AM I IN SPLIT-SCREEN, SCREEN 1?
         BE    *+L'*+4             YES
         OI    0(R3),EOS           SET END-OF-SCREEN
         L     R15,=A(CPYHLP)      HELP SCREEN
         ST    R15,HELPADD
         MVI   CURROW,CRCPSC       CURSOR ROW
         MVI   CURCOL,CCCPSC       CURSOR COLUMN
         L     R15,ARCOMM          GO COMMUNICATE
*- - - - ETPSCOMM PARM.LIST : NONE
        CALL   (15)
         LTR   R15,R15             BAD RC?
         BNZ   CPDEXIT             YUP
         TM    COMMSW,PFKFLAG      IS IT A PF KEY/ATTN?
         BZ    CPCKINPT            NOPE, GO CHECK THE INPUT
         L     R2,TERMINPT         PICK UP AID ADDRESS
         CLI   0(R2),X'F3'         IS IT PF3?
         BE    CPDEXIT             YUP, I'M DONE
         CLI   0(R2),X'C3'         IS IT PF15?
         BE    CPDEXIT             YUP, I'M DONE
         CLI   0(R2),X'6C'         IS IT PA1?
         BE    CPDEXIT             YUP, I'M DONE
         CLI   0(R2),X'6D'         IS IT "CLEAR"?
         BE    EDXBLD              YUP, RESHOW SCREEN
         CLI   0(R2),X'6E'         IS IT PA2?
         BE    EDXBLD              YUP, RESHOW SCREEN
         LA    R1,XINVPFK
CPSTMSG  ST    R1,MSGADD
         B     EDXBLD              RESHOW SCREEN
*- - - - CHECK ENTERED COPY SELECTIONS
CPCKINPT L     R5,TERMINPT+ZCP1    PICK UP DS-NAME FIELD
         L     R6,TERMINPT+ZCP2    PICK UP VOL-SER FIELD
         L     R7,TERMINPT+ZCP3    PICK UP PASSWORD FIELD
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   CPCKINPC            NOPE
         L     R3,SCROWS1          PICK UP SIZE OF SCREEN 1
         SLL   R3,2                MULTIPLY BY 4
         L     R5,TERMINPT+ZCP1(R3) PICK UP DS-NAME FIELD
         L     R6,TERMINPT+ZCP2(R3) PICK UP VOL-SER FIELD
         L     R7,TERMINPT+ZCP3(R3) PICK UP PASSWORD FIELD
CPCKINPC CLI   0(R5),0             DS-NAME ENTERED (OR CHANGED)?
         BNE   *+L'*+16            YES
         OI    CPWDSN,C' '
         CLI   CPWDSN,C' '         DS-NAME ALREADY IN?
         BNE   CPCVLSR             YES
         B     EDXBLD              ELSE RETRY THE SCREEN
         LA    R0,L'CPSCF1-1       LEFT JUSTIFY FIELD IF NEEDED
         CLI   CPSCF1(R5),C' '
         BNE   CPDSNMV
         MVC   CPSCF1(L'CPSCF1-1,R5),CPSCF1+1(R5)
         MVI   CPSCF1+L'CPSCF1-1(R5),C' '
         BCT   R0,*-18
         MVC   CPWDSN(L'CPWDSN),CPSCF1(R5)
         B     EDXBLD              RETRY THE SCREEN
CPDSNMV  MVI   CPWDSN,C' '         RESET DS-NAME FIELD
         MVC   CPWDSN+1(L'CPWDSN-1),CPWDSN
         LA    R0,L'CPWDSN         MAX. LENGTH FOR A DS-NAME
         LA    R14,CPSCF1(R5)      START ADDRESS FOR DSN LENGTH CALC
         XR    R15,R15             SET COUNTER
CPDSNLOP CLI   0(R14),C' '         BLANK IS END OF DSN?
         BE    CPDSNEND            GOT END
         CLI   0(R14),C'('         LEFT PAREN INDICATES MEMBER?
         BE    CPDSNEND            YES, GOT END
         LA    R14,1(R14)          BUMP ADDRESS
         LA    R15,1(R15)          BUMP COUNTER
         BCT   R0,CPDSNLOP         TEST NEXT BYTE IF ANY
         LA    R1,XBADDSN          ELSE ERROR
         B     CPSTMSG
CPDSNEND BCT   R15,*+L'*+6         SUBTRACT 1
         MVC   CPWDSN(*-*),CPSCF1(R5) <<EXECUTED>>
         EX    R15,*-6
CPCVLSR  CLI   0(R6),0             VOL-SER ENTERED?
         BE    CPCPSWD             NO
         MVC   CPWVOL,=CL6' '
         LA    R0,L'CPSCF2-1       LEFT JUSTIFY FIELD IF NEEDED
         CLI   CPSCF2(R6),C' '
         BNE   *+L'*+14
         MVC   CPSCF2(L'CPSCF2-1,R6),CPSCF2+1(R6)
         MVI   CPSCF2+L'CPSCF2-1(R6),C' '
         BCT   R0,*-18
         MVC   CPWVOL(L'CPWVOL),CPSCF2(R6) MOVE IN THE VOL-SER
CPCPSWD  CLI   0(R7),0             PASSWORD ENTERED?
         BE    CPGOCHK             NO
         LA    R0,L'CPSCF3-1       LEFT JUSTIFY FIELD IF NEEDED
         CLI   CPSCF3(R7),C' '
         BNE   *+L'*+14
         MVC   CPSCF3(L'CPSCF3-1,R7),CPSCF3+1(R7)
         MVI   CPSCF3+L'CPSCF3-1(R7),C' '
         BCT   R0,*-18
         MVC   CPWPSW(L'CPWPSW),CPSCF3(R7) MOVE IN THE PASSWORD
*- - - - VERIFY CATALOG/VTOC INFO
CPGOCHK  OI    CPWVOL,C' '
         CLI   CPWVOL,C' '         WAS VOL-SER PROVIDED?
         BNE   CPGOCHK1            YES
         MVC   VCMLST(CTCMLSL),CTCMLST CLEAR CAMLST AREA
         XC    VUSWA(L'VUSWA),VUSWA
         XC    VUSWA+L'VUSWA(16),VUSWA+L'VUSWA
         LA    R15,CPWDSN          SET DS-NAME
         XR    R0,R0
         LA    R1,VUSWA            SET OUTPUT AREA
         STM   R15,R1,VCMLST+4
        LOCATE VCMLST
         LTR   R15,R15             CHECK RETURN CODE
         BZ    *+L'*+8             OK
         LA    R1,BADCTLOC         ELSE SET MESSAGE
         B     CPSTMSG
         MVC   CPWVOL(L'CPWVOL),VUSWA+6 SET THE VOL-SER
         OI    CPWKSW,VLRFC        SAY RETRIEVED FROM CATALOG
CPGOCHK1 MVC   VCMLST(VTCMLSL),VTCMLST CLEAR CAMLST AREA
         XC    VUSWA(DSCBLGTH),VUSWA
         LA    R15,CPWDSN          SET DS-NAME
         LA    R0,CPWVOL           SET VOL-SER
         LA    R1,VUSWA            SET OUTPUT AREA ADDRESS
         STM   R15,R1,VCMLST+4
        OBTAIN VCMLST
         LTR   R15,R15             CHECK RETURN CODE
         BZ    *+L'*+8             OK
         LA    R1,BADVTOBT         ELSE SET MESSAGE
         B     CPSTMSG
         LA    R1,VUSWA            VTOC-INFO ADDRESS
         USING DS1FMTID,R1         SET ADDRESSABILITY
         CLC   DS1DSORG(L'DS1DSORG),=AL1(DS1DSGPS,0) IS IT SEQUENTIAL?
         BE    CPTSTLRC            YUP, DEFAULT DSORG IS PS
         OI    CPWKSW,PODS         SET DSORG IS PO
         CLC   DS1DSORG(L'DS1DSORG),=AL1(DS1DSGPO,0) IS IT PO?
         BE    CPTSTLRC            YUP
         LA    R1,BADEDORG         ELSE NO GOOD, SET MESSAGE
         B     CPSTMSG
CPTSTLRC CLC   DS1LRECL(L'DS1LRECL),=H'80' IS LRECL=80?
         BE    *+L'*+8             YUP, OK
         DROP  R1
         LA    R1,BADED80          ELSE NO GOOD, SET MESSAGE
         B     CPSTMSG
         MVC   CPWMEM,=CL8' '      CLEAR MEMBER NAME FIELD
         CLC   CPWKSW,PODS         IS IT A SEQUENTIAL FILE?
         BZ    CPLBSQ              YES
*- - - - ALLOCATE THE FILE TO DO MEMBER SELECTION
         L     R7,DYNWORKP         INITIALIZE DYNAMIC ALLOCATION WORK
         LR    R0,R7
         LH    R1,=Y(PARMLLEN)     LENGTH TO BE CLEARED
         LA    R14,*
         XR    R15,R15
         ICM   R15,B'1000',=CL8' '
         MVCL  R0,R14              CLEAR TO ALL BLANKS
         USING PARMLIST,R7
         MVC   DDNAME,N#UT1        DD-NAME
         MVC   DSNAME,CPWDSN       DS-NAME
         MVC   DSVOLSER,CPWVOL     VOL-SER
         MVC   PASSWORD,CPWPSW     PASSWORD
         MVC   DSSTATUS,=CL8'SHR'  SET DISP=SHR
         MVC   DSUNIT,=CL8'SYSALLDA'
         DROP  R7
         MVC   CPWDCB(SKDDCBL),SKDDCB MOVE DCB SKELETON
         MVC   CPWDCB+DCBDDNAM-IHADCB(L'DCBDDNAM),N#UT1 SET DD-NAME
         L     R15,ARDYNAM
*- - - - ETPSDYNA PARM.LIST : "DYNWORKP" ADDRESS
        CALL   (15),MF=(E,DYNWORKP)
         LTR   R15,R15             HOW COMPLETE?
         BZ    CPOKAD              OK
         CLC   DYNRCODE(2),=XL2'0210'
         BE    CPINUSE
        XMESS  2005
         LA    R1,*+L'*+4
         B     CPDSMS
         MSG   'ALLOC "DIR" FAILED',H=Y
CPINUSE  LA    R1,*+L'*+4
         B     CPDSMS
         MSG   '0210/DATA-SET IN USE',H=Y
*- - - - DIRECTORY MEMBERS SELECTION PROCESS
CPOKAD   MVI   CPWNOTE,0           INITIALIZE
         MVI   CPFUSW,0
         MVC   CPWLOC,=CL8' '      NOT DOING LOCATE
         MVI   CPWSLF,C' '
         XC    CPADDR,CPADDR
         L     R0,SCROWS1          LINES PER PAGE SCREEN 1
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   *+L'*+4             NO
         L     R0,SCROWS2          LINES PER PAGE SCREEN 2
         SH    R0,=Y(CPDLST)
         STH   R0,CPSCROLL
CPDSDCB  TM    CPWDCB+DCBOFLGS-IHADCB,DCBOFOPN IS IT OPEN ALREADY?
         BO    CPDSOPND            YUP
         LA    R1,CPDREOF
         STCM  R1,B'0111',CPWDCB+DCBEODA-IHADCB
         LA    R1,CPDSYNA
         STCM  R1,B'0111',CPWDCB+DCBSYNA-IHADCB
         NI    CPFLSW,255-CPWSYFLG
         MVI   OPCLPL,VLB          SET "VL" BIT
        OPEN   (CPWDCB,(INPUT)),MF=(E,OPCLPL) OPEN FILE
         TM    CPWDCB+DCBOFLGS-IHADCB,DCBOFOPN TEST FOR GOOD OPEN?
         BO    CPOKLOP             OK
         OI    CPFUSW,CPXREQ
         LA    R1,*+L'*+8
         ST    R1,MSGADD
         B     CPDNTO              YUP - ALL DONE
         MSG   'OPEN "DIR" FAILED',H=Y
CPOKLOP  MVC   CPWDECBW(CPWDECBL),CPWDECB
CPDSOPND NI    CPFLSW,255-CPWEOFLG INDICATE NOT AT EOF
         XC    CPWTOP,CPWTOP
         LA    R4,TERMOUT+4        POINT TO START
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   *+L'*+12            NOPE, JUST GO DO IT
         L     R1,SCROWS1          PICK UP NUMBER OF ROWS ON SCREEN 1
         SLL   R1,2                MULTIPLY BY 4
         LA    R4,TERMOUT+4(R1)    POINT TO START
         NI    0(R4),255-EOS       CLEAR END-OF-SCREEN
         L     R14,0(,R4)          PICK UP ADDRESS OF FIRST OUTPUT LINE
         LA    R15,CPWROW1         PICK UP FIRST LINE OF INPUT
         XR    R1,R1
         IC    R1,0(,R15)          PICK UP LENGTH
         EX    R1,CPMVEDR          MOVE INPUT INTO OUTADDR WORK AREA
         LA    R15,CPWDSNAM(R14)
         MVC   0(L'CPWDSN,R15),CPWDSN
         LA    R1,L'CPWDSN
         CLI   0(R15),C' '
         BNE   *+L'*+4
         MVI   0(R15),C'-'
         LA    R15,1(R15)
         BCT   R1,*-16
         L     R14,4(,R4)          BUMP
         NI    4(R4),255-EOS       CLEAR END-OF-SCREEN
         LA    R15,CPWROW2         PICK UP NEXT LINE OF INPUT
         IC    R1,0(,R15)          PICK UP LENGTH
         EX    R1,CPMVEDR          MOVE INPUT INTO OUTADDR WORK AREA
         TM    CPFUSW,CPCRSW
         BZ    *+L'*+10
         MVC   CDSCF2(L'CDSCF2,R14),=CL4'CSR'
         B     *+L'*+24
         TM    CPFUSW,CPHLSW
         BZ    *+L'*+10
         MVC   CDSCF2(L'CDSCF2,R14),=CL4'HALF'
         B     *+L'*+6
         MVC   CDSCF2(L'CDSCF2,R14),=CL4'PAGE'
         L     R14,8(,R4)          BUMP
         NI    8(R4),255-EOS       CLEAR END-OF-SCREEN
         LA    R15,CPWROW3         PICK UP NEXT LINE OF INPUT
         IC    R1,0(,R15)          PICK UP LENGTH
         EX    R1,CPMVEDR          MOVE INPUT INTO OUTADDR WORK AREA
         L     R14,12(,R4)         BUMP
         NI    12(R4),255-EOS      CLEAR END-OF-SCREEN
         LA    R15,CPWROW4         PICK UP NEXT LINE OF INPUT
         IC    R1,0(,R15)          PICK UP LENGTH
         EX    R1,CPMVEDR          MOVE INPUT INTO OUTADDR WORK AREA
         LA    R4,16(,R4)          SET R4 TO START OF BUILD AREA
         MVC   CPWFMEM,=CL8' '     RESET FIRST NAME (TOP)
         LH    R6,CPSCROLL         MAX DIRECTORY MEMBERS ON SCREEN
         TM    CPFUSW,CPRCSW       DIR. RECORD STILL IN?
         BZ    CPREAD              NO
         NI    CPFUSW,255-CPRCSW   YES
         MVC   CPWBOT,CPWPOINT     COPY CURRENT TTR (BOTTOM)
         LA    R9,CPWKEY+L'CPWKEY+2 SET FIRST MEMBER ADDRESS
         B     CPNEXT
CPREAD   BAL   R14,CPDRTN
         ST    R1,CPWBOT           KEEP CURRENT TTR (BOTTOM)
         USING PDS2,R9
CPNEXT   CLI   PDS2NAME,X'FF'      END OF DIRECTORY?
         BE    CPRENDOF            YES, LAST USED BLOCK
         TM    CPFLSW,CPWEOFLG     HAVE I HIT EOF?
         BO    CPRENDOF            YUP
         NI    0(R4),255-EOS       CLEAR END-OF-SCREEN
         L     R1,0(,R4)
         USING DIRMASK,R1
         MVC   DIRLGTH(CPWELEN),CPWLIST MOVE DIR-ENTRY IN
*- - - - AM I DOING LOCATE FUNCTION?
         CLI   CPWLOC,C' '         LOCATE?
         BE    CPDLOCF             NOPE
         CLC   CPWLOC(1),PDS2NAME  MATCH?
         BL    CPDLOCF             GONE PAST IT
         BH    CPDBUMP             IF HIGH, KEEP READING DIRECTORY
         CLI   CPWLOC+1,C' '       END OF STRING?
         BE    CPDLOCF             YES, MATCHED UP TO HERE, SO OK
         CLC   CPWLOC+1(1),PDS2NAME+1 MATCH?
         BL    CPDLOCF             GONE PAST IT
         BH    CPDBUMP             IF HIGH, KEEP READING DIRECTORY
         CLI   CPWLOC+2,C' '       END OF STRING?
         BE    CPDLOCF             YES, MATCHED UP TO HERE, SO OK
         CLC   CPWLOC+2(1),PDS2NAME+2 MATCH?
         BL    CPDLOCF             GONE PAST IT
         BH    CPDBUMP             IF HIGH, KEEP READING DIRECTORY
         CLI   CPWLOC+3,C' '       END OF STRING?
         BE    CPDLOCF             YES, MATCHED UP TO HERE, SO OK
         CLC   CPWLOC+3(1),PDS2NAME+3 MATCH?
         BL    CPDLOCF             GONE PAST IT
         BH    CPDBUMP             IF HIGH, KEEP READING DIRECTORY
         CLI   CPWLOC+4,C' '       END OF STRING?
         BE    CPDLOCF             YES, MATCHED UP TO HERE, SO OK
         CLC   CPWLOC+4(1),PDS2NAME+4 MATCH?
         BL    CPDLOCF             GONE PAST IT
         BH    CPDBUMP             IF HIGH, KEEP READING DIRECTORY
         CLI   CPWLOC+5,C' '       END OF STRING?
         BE    CPDLOCF             YES, MATCHED UP TO HERE, SO OK
         CLC   CPWLOC+5(1),PDS2NAME+5 MATCH?
         BL    CPDLOCF             GONE PAST IT
         BH    CPDBUMP             IF HIGH, KEEP READING DIRECTORY
         CLI   CPWLOC+6,C' '       END OF STRING?
         BE    CPDLOCF             YES, MATCHED UP TO HERE, SO OK
         CLC   CPWLOC+6(1),PDS2NAME+6 MATCH?
         BL    CPDLOCF             GONE PAST IT
         BH    CPDBUMP             IF HIGH, KEEP READING DIRECTORY
         CLI   CPWLOC+7,C' '       END OF STRING?
         BE    CPDLOCF             YES, MATCHED UP TO HERE, SO OK
         CLC   CPWLOC+7(1),PDS2NAME+7 MATCH?
         BL    CPDLOCF             GONE PAST IT
         BH    CPDBUMP             NOPE
CPDLOCF  OC    CPWTOP,CPWTOP       TOP OF SCREEN DISPLAY UNKNOWN?
         BNZ   *+L'*+6             NO, SKIP
         MVC   CPWTOP(L'CPWTOP),CPWBOT YES, RETAIN TTR (TOP)
*- - - - FORMAT THE PDS MEMBER
         MVC   DIRNAME(L'PDS2NAME),PDS2NAME MOVE MEMBER NAME TO DISPLAY
         CLI   CPWSLF,C' '         SELECT CODE?
         BE    CPNOSC              BRANCH IF NONE
         MVC   DIRCODE,CPWSLF      ELSE COPY IT
         MVI   DIRSUN1,X'02'+INFMOD AND SET INTENS + MDT ON
         MVI   CPWSLF,C' '         THEN RESET
CPNOSC   NI    PDS2INDC,PDS2LUSR
         CLI   PDS2INDC,X'0F'
         BNE   CPNSPF
         LA    R14,PDS2USRD        START OF USER AREA
         USING SPFMT,R14
         XR    R15,R15
         IC    R15,SPFVER
         CVD   R15,DBLWRD
         OI    DBLWRD+7,X'0F'
         UNPK  DIRLEVEL(3),DBLWRD+6(2)
         MVI   DIRLEVEL,C' '
         IC    R15,SPFMOD
         CVD   R15,DBLWRD
         OI    DBLWRD+7,X'0F'
         UNPK  DIRLEVEL+3(3),DBLWRD+6(2)
         MVI   DIRLEVEL+3,C'.'
         MVC   DIRLEVEL(5),DIRLEVEL+1
         MVI   DIRLEVEL+5,C' '
         UNPK  DIRCREAT(5),SPFCRDT(3) CREATION DATE
         UNPK  DIRMOD(5),SPFMODT(3) MODIFIED DATE
         XR    R15,R15
         ICM   R15,B'0011',SPFSIZE
         CVD   R15,DBLWRD
         OI    DBLWRD+7,X'0F'
         UNPK  DIRLINES(5),DBLWRD+5(3)
         MVC   DIRUSER(L'SPFUID),SPFUID
         DROP  R1,R14
CPNSPF   CLI   CPWFMEM,C' '
         BNE   *+L'*+6
         MVC   CPWFMEM,PDS2NAME    SET TOP OF LIST
         BCT   R6,*+L'*+10         KEEP GOING
         MVC   CPWLMEM,PDS2NAME    SET IT
         B     CPDFMT
         LA    R4,4(R4)            LOAD ADDRESS OF NEXT MEMBER
CPDBUMP  MVC   CPWLMEM,PDS2NAME    SET IT
         CLC   CPWKEY,PDS2NAME     TEST FOR LAST MEMBER IN BLOCK
         BNH   CPREAD
         XR    R14,R14
         NI    PDS2INDC,PDS2LUSR   CLEAR ALIAS AND TTR FLAGS
         IC    R14,PDS2INDC        PICK UP USER DATA LENGTH IN H-WORDS
         SLL   R14,1               MULTIPLY BY 2
         LA    R9,PDS2USRD(R14)    POINT TO NEXT MEMBER
         B     CPNEXT
         DROP  R9
CPMVEDR  MVC   0(*-*,R14),0(R15)   <<EXECUTED>>
         SPACE 1
*- - - - READ A DIRECTORY RECORD ROUTINE
*              R9 = AT EXIT, POINTER TO FIRST MEMBER NAME IN BLOCK
*              R14 = LINK REGISTER
CPDRTN   ST    R14,CPWSR14
         LA    R3,CPWKEY
        READ   CPWDECBW,SF,CPWDCB,(R3),'S',MF=E
        CHECK  CPWDECBW
         TM    CPFLSW,CPWSYFLG     WAS SYNAD EXIT TAKEN?
         BZ    *+L'*+8             NO, BRANCH
         LA    R1,CPWMSG           YES, ERROR
         B     CPDSTM
        NOTE   CPWDCB
         CLM   R1,B'0010',CPWNOTE  KEEP HIGHEST R OF TTR
         BNH   *+L'*+4
         STCM  R1,B'0010',CPWNOTE
         LA    R9,L'CPWKEY+2(R3)   FIRST MEMBER ADDRESS (+KEY+LENGTH)
         L     R14,CPWSR14
         BR    R14                 BACK TO CALLER
CPDREOF XMESS  2014
         LA    R1,*+L'*+8
CPDSTM   ST    R1,MSGADD
         B     CPDXBK
         MSG   'DIR.EOF READ',H=Y
         SPACE 1
*- - - - FILL REST OF SCREEN (END OF DIRECTORY)
CPRENDOF NI    0(R4),255-EOS       CLEAR END-OF-SCREEN
         L     R1,0(,R4)
         USING DIRMASK,R1
         MVC   DIRLGTH(CPWELEN),CPWLIST MOVE DIR-ENTRY IN
         MVI   DIRSUN1,X'04'       INHIBIT SELECT OF THESE LINES
         TM    CPFLSW,CPWEOFLG     FIRST TIME?
         BO    *+L'*+14            NO
         MVI   DIRSUN2,X'05'
         MVC   DIRNAME,=CL9'** END **'
         OI    CPFLSW,CPWEOFLG     INDICATE I HAVE HIT EOF
         BCT   R6,*+L'*+4          KEEP GOING
         B     *+L'*+8
         LA    R4,4(,4)            LOAD ADDRESS OF NEXT MEMBER
         B     CPRENDOF
         DROP  R1
         OC    CPWTOP,CPWTOP       TOP OF SCREEN DISPLAY UNKNOWN?
         BNZ   CPDFMT              NO, SKIP
         MVC   CPWTOP(L'CPWTOP),CPWBOT YES, RETAIN TTR (TOP)
CPDFMT   CLI   SPLIT,1             AM I ON TOP SCREEN?
         BE    *+L'*+4             YUP
         OI    0(R4),EOS           SET END-OF-SCREEN
         L     R15,=A(CPWHELP)     HELP SCREEN
         ST    R15,HELPADD
         XC    CURADDR,CURADDR
         OC    CURADDR,CPADDR      ANY CURSOR POSITION REQUESTED?
         BNZ   *+L'*+8             YES
         MVI   CURROW,CPDRSC       NO, SET DEFAULT CURSOR ROW
         MVI   CURCOL,CCDRSC       AND CURSOR COLUMN
         L     R15,ARCOMM          GO COMMUNICATE
*- - - - ETPSCOMM PARM.LIST : NONE
        CALL   (15)
         LTR   R15,R15             BAD RC?
         BNZ   CPDXRQ              OUT
         XC    CPADDR,CPADDR
*- - - - SCREEN MAY HAVE CHANGED
         L     R0,SCROWS1          LINES PER PAGE SCREEN 1
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   *+L'*+4             NO
         L     R0,SCROWS2          LINES PER PAGE SCREEN 2
         SH    R0,=Y(CPDLST)
         STH   R0,CPSCROLL
         L     R2,TERMINPT         PICK UP AID ADDRESS
         L     R4,TERMINPT+CPZE    PICK UP COMMAND INPUT LINE
         CLI   SPLIT,2             AM I ON SECOND SCREEN?
         BNE   CPDSCRL             NO, GO TEST PFKEY
         L     R3,SCROWS1          PICK UP NUMBER OF ROWS ON SCREEN 1
         SLL   R3,2                MULTIPLY BY 4
         L     R4,TERMINPT+CPZE(R3) PICK UP COMMAND INPUT LINE
*- - - - CHECK IF SCROLL ENTERED
CPDSCRL  CLI   0(R4),0             COMMAND OR SCROLL ENTERED?
         BE    CPDCKPF             NOPE
         TM    CDSCF2-1(R4),INFMOD YES, SCROLL ENRERED?
         BZ    CPDCKPF             NO
         LA    R14,CDSCF2(,R4)
         LA    R0,L'CDSCF2
         CLI   0(R14),C' '
         BNE   *+L'*+12
         LA    R14,1(,R14)
         BCT   R0,*-12
         B     *+L'*+18            NONE, CLEARED
         MVI   CPWDBLW,C' '
         OC    CPWDBLW(1),0(R14)
         NI    CPFUSW,255-CPHLSW-CPCRSW RESET TO PAGE
         CLI   CPWDBLW,C'H'
         BNE   *+L'*+8
         OI    CPFUSW,CPHLSW       SET HALF
         B     CPDCKPF
         CLI   CPWDBLW,C'C'
         BNE   CPDCKPF
         OI    CPFUSW,CPCRSW       SET CURSOR
CPDCKPF  TM    COMMSW,PFKFLAG      IS IT A PF KEY/ATTN?
         BZ    CPDTCMD             NONE
*- - - - TEST PF KEYS (PF KEY WAS ENTERED, SEE WHAT IT WAS)
         CLI   0(R2),X'F3'         IS IT PF3?
         BE    CPDXBK              YUP - ALL DONE
         CLI   0(R2),X'C3'         IS IT PF15?
         BE    CPDXBK              YUP - ALL DONE
         CLI   0(R2),X'F8'         IS IT PF8?
         BE    CPDMORE             YUP - SHOW NEXT SCREEN OF DIR
         CLI   0(R2),X'C8'         IS IT PF20?
         BE    CPDMORE             YUP - SHOW NEXT SCREEN OF DIR
         CLI   0(R2),X'F7'         IS IT PF7?
         BE    CPDPREV             YUP - SHOW PREV SCREEN OF DIR
         CLI   0(R2),X'C7'         IS IT PF19?
         BE    CPDPREV             YUP - SHOW PREV SCREEN OF DIR
         CLI   0(R2),X'6C'         IS IT PA1?
         BE    CPDXRQ              YUP - ALL DONE
         CLI   0(R2),X'6D'         IS IT "CLEAR"?
         BE    CPDRSHW             YUP - GO RESHOW THE SCREEN
         CLI   0(R2),X'6E'         IS IT PA2?
         BE    CPDRSHW             YUP - GO RESHOW THE SCREEN
         LA    R1,*+L'*+14
         ST    R1,MSGADD
CPDRSHW  MVC   CPWLOC,CPWFMEM      RE-LOCATE THE TOP OF DISPLAY
         B     CPDRLC2
         MSG   'INVALID PF-KEY',H=Y
*- - - - CHECK IF A COMMAND ENTERED
CPDTCMD  CLI   0(R4),0             COMMAND OR SCROLL ENTERED?
         BE    CPDSEL              NOPE
         TM    CDSCF1-1(R4),INFMOD YES, COMMAND ENRERED?
         BZ    CPDSEL              NO
         LA    R0,L'CDSCF1-1       YES, LEFT JUSTIFY FIELD IF NEEDED
         CLI   CDSCF1(R4),C' '
         BNE   *+L'*+18
         MVC   CDSCF1(L'CDSCF1-1,R4),CDSCF1+1(R4)
         MVI   CDSCF1+L'CDSCF1-1(R4),C' '
         BCT   R0,*-18
         B     CPDSEL              NONE
         CLC   CDSCF1(4,R4),=CL4'END ' END OF WORK?
         BE    CPDXBK              YES
         CLC   CDSCF1(4,R4),=CL4'DUMP' TAKE A DUMP?
         BNE   *+L'*+2             NOPE
         DC    H'0'                YUP, TAKE AN S0C1 <------------ DUMP
         CLI   CDSCF1(R4),C'L'     LOCATE?
         BE    CPDRLOC             YUP, GO LOCATE
         CLI   CDSCF1(R4),C'F'     ALLOW "F" FOR FIND AS WELL
         BE    CPDRLOC             GO LOCATE
         CLC   CDSCF1(5,R4),=CL5'DOWN' DOWN?
         BE    CPDMORE             GO DO IT
         CLC   CDSCF1(2,R4),=CL2'D' DOWN?
         BE    CPDMORE             GO DO IT
         CLC   CDSCF1(2,R4),=CL2'+' DOWN?
         BE    CPDMORE             GO DO IT
         CLC   CDSCF1(3,R4),=CL3'UP' UP?
         BE    CPDPREV             GO DO IT
         CLC   CDSCF1(2,R4),=CL2'U' UP?
         BE    CPDPREV             GO DO IT
         CLC   CDSCF1(2,R4),=CL2'-' UP?
         BE    CPDPREV             GO DO IT
*- - - - PUT OTHER TESTS FOR COMMAND LINE INPUT HERE
CPDINVC  LA    R1,*+L'*+4
         B     CPDRSTM
         MSG   'INVALID COMMAND',H=Y
CPDSEL   LA    R3,TERMINPT+CPZN    POINT TO LINE 5 (1ST SELECT LINE)
         L     R4,SCROWS1          PICK UP NUMBER OF ROWS ON SCREEN 1
         CLI   SPLIT,2             AM I ON SECOND SCREEN?
         BNE   CPDSEL1             NO, GO ROLL
         LR    R3,R4               NUMBER OF ROWS ON SCREEN 1
         SLL   R3,2                MULTIPLY BY 4
         LA    R3,TERMINPT+CPZN(R3) SET ADDRESS OF 1ST SELECT LINE
         L     R4,SCROWS2          PICK UP NUMBER OF ROWS ON SCREEN 2
CPDSEL1  SH    R4,=Y(CPDLST)       MAX DIRECTORY MEMBERS FOR ONE SCREEN
CPDSEL2  L     R5,0(,R3)           POINT TO EACH LINE IN TURN
         CLI   0(R5),0             ANY INPUT?
         BE    CPDSEL3             NO, SKIP
         CLI   CPSLF1(R5),C' '     YES, BUT IS IT JUST CLEAR FIELD?
         BNE   CPDSEL4             NO, GO PROCESS IT
CPDSEL3  LA    R3,4(,R3)           POINT TO NEXT LINE
         BCT   R4,CPDSEL2
         B     CPDRCL              GO SHOW MORE
CPDSEL4  CLC   CPSLF2(8,R5),=CL8' '
         BE    *+L'*+10
         CLC   CPSLF2(9,R5),=CL9'** END **'
         BNE   CPDSEL5
         MVI   CPSLF1(R5),C' '     ERROR, CLEAR IT
         B     CPDINVS+L'CPDINVS   INVALID SELECTION
CPDSEL5  MVC   CPWLOC(L'CPWLOC),CPSLF2(R5) SET IT
         MVC   CPWSLF(L'CPWSLF),CPSLF1(R5) SET SELECT CODE
         MVI   CPSLF1(R5),C' '     CLEAR IT
*- - - - PUT TESTS FOR OTHER SELECTION CODES HERE
         CLI   CPWSLF,C'S'         SELECT?
         BE    *+L'*+8             YES
         CLI   CPWSLF,C'C'         OR COPY?
         BNE   CPDINVS             NO
         MVC   CPWMEM(L'CPWMEM),CPSLF2(R5) THIS MEMBER SELECTED
         B     CPDFND
CPDINVS  MVC   CPADDR,=AL1(CPDLST,CCDLST)
         LA    R1,*+L'*+4          SET MESSAGE AND TRUNCATE
         B     CPDRSTM               PROCESSING AT THIS POINT
         MSG   'INVALID SELECTION',H=Y
*- - - - LOCATE MEMBER IN LIBRARY
CPDRLOC  CLI   CDSCF1+1(R4),C' '
         BNE   *+L'*+12
         LA    R0,L'CDSCF1-2
         LA    R1,CDSCF1+2(R4)
         B     CPDRLC1
         CLC   CDSCF1+1(6,R4),=CL6'OCATE '
         BNE   *+L'*+12
         LA    R0,L'CDSCF1-7
         LA    R1,CDSCF1+7(R4)
         B     CPDRLC1
         CLC   CDSCF1+1(4,R4),=CL4'IND '
         BNE   CPDINVC
         LA    R0,L'CDSCF1-5
         LA    R1,CDSCF1+5(R4)
CPDRLC1  CLI   0(R1),C' '
         BNE   *+L'*+12
         LA    R1,1(R1)
         BCT   R0,CPDRLC1
         B     CPDRLC2
         MVC   CPWLOC(L'CPWLOC),0(R1) MOVE IN "LOCATE" NAME
         B     CPDRLC2
CPDRSTM  ST    R1,MSGADD
CPDRCL   MVC   CPWMEM,=CL8' '      CLEAR MEMBER NAME FIELD
CPDRLC2  XC    CPWPOINT,CPWPOINT   POINT TO START OF DIRECTORY
         MVI   CPWPOINT+2,1
        POINT  CPWDCB,CPWPOINT
         B     CPDSDCB
*- - - - SHOW MORE DIRECTORY INFO
CPDMORE  NI    CPFUSW,255-CPUPSW   SAY DOWN CONTROL
         BAL   R14,CPCSAR          GET SCROLL AMOUNT
         B     CPDMRMX             RETURN +0
         MVI   CPWPOINT+3,0         " "   +4
         MVC   CPWPOINT(L'CPWTOP),CPWTOP SET FIRST BLOCK READ (TOP)
CPDMRD1 POINT  CPWDCB,CPWPOINT
         BAL   R14,CPDRTN
         ST    R1,CPWPOINT         KEEP CURRENT TTR
         LR    R3,R9               RETAIN START ADDRESS
         USING PDS2,R9
         CLC   CPWFMEM,PDS2NAME    IS THIS MEMBER NAME?
         BE    CPDMRD6             YES, IT IS JUST THIS ONE
         BH    CPDMRD2             NO
         BAL   R14,CPSBLK          ELSE GO BACK
         B     CPDPRMX             RETURN +0
         B     CPDMRD1              " "   +4
CPDMRD2  CLC   CPWFMEM,CPWKEY      IS MEMBER IN THIS BLOCK?
         BNH   CPDMRD3             YES
         BAL   R14,CPDRTN          NO, GO AHEAD
         ST    R1,CPWPOINT         KEEP CURRENT TTR
         LR    R3,R9               RETAIN START ADDRESS
         CLC   CPWFMEM,PDS2NAME    IS THIS MEMBER NAME?
         BE    CPDMRD6             YES, IT IS JUST THIS ONE
         BL    CPDMRD9             IT HAS BEEN DELETED, STOP HERE
         B     CPDMRD2             ELSE
CPDMRD3  CLC   PDS2NAME,CPWKEY     LAST MEMBER IN BLOCK?
         BL    CPDMRD4             NO
         CLI   CPWKEY,X'FF'        YES, END OF DIRECTORY?
         BE    CPDMRMX1            YES
         BAL   R14,CPDRTN          NO, GO AHEAD
         ST    R1,CPWPOINT         KEEP CURRENT TTR
         LR    R3,R9               RETAIN START ADDRESS
         B     CPDMRD5
CPDMRD4  XR    R14,R14
         NI    PDS2INDC,PDS2LUSR   CLEAR ALIAS AND TTR FLAGS
         IC    R14,PDS2INDC        PICK UP USER DATA LENGTH IN H-WORDS
         SLL   R14,1               MULTIPLY BY 2
         LA    R9,PDS2USRD(R14)    POINT TO NEXT MEMBER NAME
CPDMRD5  CLC   CPWFMEM,PDS2NAME    IS THIS MEMBER NAME?
         BL    CPDMRD9             IT HAS BEEN DELETED, STOP HERE
         BH    CPDMRD3             NO
CPDMRD6  CLC   PDS2NAME,CPWKEY     YES, LAST MEMBER IN BLOCK?
         BNL   CPDMRD8             YES
CPDMRD7  XR    R14,R14             NO
         NI    PDS2INDC,PDS2LUSR   CLEAR ALIAS AND TTR FLAGS
         IC    R14,PDS2INDC        PICK UP USER DATA LENGTH IN H-WORDS
         SLL   R14,1               MULTIPLY BY 2
         LA    R9,PDS2USRD(R14)    LOAD ADDRESS OF NEXT MEMBER NAME
         B     CPDMRD9
CPDMRD8  CLI   CPWKEY,X'FF'        END OF DIRECTORY?
         BE    CPDMRMX1            YES
         BAL   R14,CPDRTN
         ST    R1,CPWPOINT         KEEP CURRENT TTR
         CLI   PDS2NAME,X'FF'      END OF DIRECTORY?
         BE    CPDMRMX2            YES
         LR    R3,R9               RETAIN START ADDRESS
CPDMRD9  BCT   R6,CPDMRD10
         CLI   PDS2NAME,X'FF'      END OF DIRECTORY?
         BE    CPDMRMX1            YES
         MVC   CPWLOC,PDS2NAME     NO, LOOKING FOR PARTICULAR MEMBER
         OI    CPFUSW,CPRCSW       SET DIR. RECORD STILL IN
         B     CPDSDCB
CPDMRD10 CLC   PDS2NAME,CPWKEY     LAST MEMBER IN BLOCK?
         BL    CPDMRD7             NO, CONTINUE
         B     CPDMRD8             YES
CPDMRMX  MVC   CPWPOINT,CPWBOT     SET LAST BLOCK READ (BOTTOM)
        POINT  CPWDCB,CPWPOINT
         BAL   R14,CPDRTN
         ST    R1,CPWPOINT         KEEP CURRENT TTR
         CLI   CPWKEY,X'FF'        END OF DIRECTORY?
         BNE   *-12                NO
         B     CPDMRMX2            YES
CPDMRMX1 LR    R9,R3               RESTORE START ADDRESS
CPDMRMX2 LH    R6,CPSCROLL         NOW MOVE DOWN THE SCREEN
         TM    CPFUSW,CPHLSW       HALF PAGE
         BZ    *+L'*+4             NO
         SRL   R6,1                YES
         LTR   R6,R6
         BP    CPRMRPR
         LA    R6,1
         B     CPRMRPR
         DROP  R9
*- - - - SHOW PREVIOUS DIRECTORY INFO
CPDPREV  OI    CPFUSW,CPUPSW       SAY UP CONTROL
         BAL   R14,CPCSAR          GET SCROLL AMOUNT
         B     CPDPRMX             RETURN +0
         MVI   CPWPOINT+3,0         " "   +4
         MVC   CPWPOINT(L'CPWTOP),CPWTOP SET FIRST BLOCK READ (TOP)
CPDPRD1 POINT  CPWDCB,CPWPOINT
CPDPRD2  BAL   R14,CPDRTN
         ST    R1,CPWPOINT         KEEP CURRENT TTR
         USING PDS2,R9
         CLI   PDS2NAME,X'FF'      END OF DIRECTORY?
         BNE   CPDPRD4             NO
CPDPRD3  BAL   R14,CPSBLK          YES, BACK 1 BLOCK
         B     CPDPRMX             RETURN +0
         B     CPDPRD1              " "   +4
CPDPRD4  LR    R3,R9               RETAIN START ADDRESS
         CLC   CPWFMEM,PDS2NAME    HOW WITH TOP SCREEN MEMBER NAME?
         BL    CPDPRD3             MUST GO BACK
         BE    CPDPRD7             IT IS JUST THIS ONE
CPDPRD5  CLC   CPWFMEM,CPWKEY      IS MEMBER IN THIS BLOCK?
         BNH   CPDPRD6             YES
         BAL   R14,CPDRTN          NO, ELSE GO AHEAD
         ST    R1,CPWPOINT         KEEP CURRENT TTR
         LR    R3,R9               RETAIN START ADDRESS
         B     CPDPRD5
CPDPRD6  CLC   CPWFMEM,PDS2NAME    IS THIS MEMBER NAME?
         BNH   CPDPRD7             YES OR IT HAS BEEN DELETED
         CLC   PDS2NAME,CPWKEY     NO, LAST MEMBER IN BLOCK?
         BNL   CPDPRD7             IT HAS BEEN DELETED, STOP HERE
         XR    R14,R14
         NI    PDS2INDC,PDS2LUSR   CLEAR ALIAS AND TTR FLAGS
         IC    R14,PDS2INDC        PICK UP USER DATA LENGTH IN H-WORDS
         SLL   R14,1               MULTIPLY BY 2
         LA    R9,PDS2USRD(R14)    LOAD ADDRESS OF NEXT MEMBER NAME
         B     CPDPRD6
CPDPRD7  LR    R4,R9               NOW TRY TO BACKWARD THE SCREEN
         LR    R9,R3               RESTORE START ADDRESS
         XR    R15,R15             ZERO COUNT
CPDPRD8  CLR   R9,R4               THIS MEMBER NAME?
         BE    CPDPRD9             YES
         CLC   PDS2NAME,CPWKEY     NO, LAST MEMBER IN BLOCK?
         BNL   CPDPRD9             YES
         LA    R15,1(R15)          NO, UPDATE COUNT
         XR    R14,R14
         NI    PDS2INDC,PDS2LUSR   CLEAR ALIAS AND TTR FLAGS
         IC    R14,PDS2INDC        PICK UP USER DATA LENGTH IN H-WORDS
         SLL   R14,1               MULTIPLY BY 2
         LA    R9,PDS2USRD(R14)    LOAD ADDRESS OF NEXT MEMBER NAME
         B     CPDPRD8
CPDPRD9  SR    R6,R15              IS IT ENOUGH?
         BZ    CPDPRD12            YES, EXACTLY THE AMOUNT
         BM    CPDPRD10            A FEW TOO MUCH
         BAL   R14,CPSBLK          NO, BACK 1 BLOCK
         B     CPDPRMX             RETURN +0
        POINT  CPWDCB,CPWPOINT      " "   +4
         BAL   R14,CPDRTN
         ST    R1,CPWPOINT         KEEP CURRENT TTR
CPRMRPR  LR    R3,R9               RETAIN START ADDRESS
         XR    R4,R4
         LA    R15,1               COUNT START AT 1
         B     CPDPRD8
         DROP  R9
CPDPRD10 LPR   R6,R6               NUMBER OF NAMES FORWARD IN BLOCK
         USING PDS2,R3
         XR    R14,R14
CPDPRD11 NI    PDS2INDC,PDS2LUSR   CLEAR ALIAS AND TTR FLAGS
         IC    R14,PDS2INDC        PICK UP USER DATA LENGTH IN H-WORDS
         SLL   R14,1               MULTIPLY BY 2
         LA    R3,PDS2USRD(R14)    LOAD ADDRESS OF NEXT MEMBER NAME
         BCT   R6,CPDPRD11
CPDPRD12 MVC   CPWLOC,PDS2NAME     LOOKING FOR PARTICULAR MEMBER
         OI    CPFUSW,CPRCSW       SET DIR. RECORD STILL IN
         B     CPDSDCB
         DROP  R3
CPDPRMX  MVC   CPWLOC,=CL8' '      BACK TO TOP OF DIRECTORY
         B     CPDRLC2
         SPACE 1
*- - - - COMPUTE SCROLL AMOUNT ROUTINE
*              R14 = LINK REGSITER / RETURN +0 = MAX.
*                                           +4 = OK (R6 = AMOUNT)
CPCSAR   ST    R14,CPWSR14
         CLI   0(R4),0             COMMAND LINE ENTERED?
         BE    CPCSARDF            NOPE
         TM    CDSCF1-1(R4),INFMOD YES, COMMAND ENRERED?
         BZ    CPCSARDF            NO, JUST BUMP DEFAULT
         LA    R0,L'CDSCF1-1       LEFT JUSTIFY FIELD IF NEEDED
         CLI   CDSCF1(R4),C' '
         BNE   *+L'*+14
         MVC   CDSCF1(L'CDSCF1-1,R4),CDSCF1+1(R4)
         MVI   CDSCF1+L'CDSCF1-1(R4),C' '
         BCT   R0,*-18
         CLI   CDSCF1(R4),C' '     COMMAND ENTERED?
         BE    CPCSARDF            NO, JUST BUMP DEFAULT
         L     R2,TERMINPT         PICK UP AID ADDRESS
         TM    CPFUSW,CPUPSW       UP REQUESTED?
         BO    CPCSARUP            YES
         CLI   0(R2),X'F8'         IS IT PF8?
         BE    CPCSARSC            YES
         CLI   0(R2),X'C8'         IS IT PF20?
         BE    CPCSARSC            YES
         MVC   CPWDBLW(7),=CL8' '
         OC    CPWDBLW(7),CDSCF1(R4)
         CLC   CPWDBLW(5),=CL5'DOWN' IS IT "DOWN"?
         BNE   *+L'*+12            NO
         LA    R4,5(R4)            YES, SEE FORWARD
         SH    R0,=H'5'
         B     CPCSARTV
         CLC   CPWDBLW(2),=CL2'D'  IS IT "DOWN"?
         BE    *+L'*+10            YES
         CLC   CPWDBLW(2),=CL2'+'  IS IT "DOWN"?
         BNE   CPDINVC             NO, INVALID COMMAND
         LA    R4,2(R4)            YES, SEE FORWARD
         SH    R0,=H'2'
         B     CPCSARTV
CPCSARUP CLI   0(R2),X'F7'         IS IT PF7?
         BE    CPCSARSC            YES
         CLI   0(R2),X'C7'         IS IT PF19?
         BE    CPCSARSC            YES
         MVC   CPWDBLW(7),=CL8' '
         OC    CPWDBLW(7),CDSCF1(R4)
         CLC   CPWDBLW(3),=CL3'UP' IS IT "UP"?
         BNE   *+L'*+12            NO
         LA    R4,3(R4)            YES, SEE FORWARD
         SH    R0,=H'3'
         B     CPCSARTV
         CLC   CPWDBLW(2),=CL2'U'  IS IT "UP"?
         BE    *+L'*+10            YES
         CLC   CPWDBLW(2),=CL2'-'  IS IT "UP"?
         BNE   CPDINVC             NO, INVALID COMMAND
         LA    R4,2(R4)            YES, SEE FORWARD
         SH    R0,=H'2'
CPCSARTV BNP   CPCSARDF            NO MORE, JUST BUMP DEFAULT
         CLI   CDSCF1(R4),C' '
         BNE   CPCSARSC
         LA    R4,1(R4)
         BCT   R0,*-12
         B     CPCSARDF            NONE, JUST BUMP DEFAULT
CPCSARSC MVI   CPWDBLW,C' '
         OC    CPWDBLW(1),CDSCF1(R4)
         CLI   CPWDBLW,C'M'        SCROLL "MAX"?
         BNE   *+L'*+6             NO
         L     R14,CPWSR14         YES
         BR    R14
         CLI   CDSCF1(R4),C'0'     IF NOT NUMERIC?
         BL    CPCSARDF            JUST BUMP DEFAULT
         LA    R14,CDSCF1(,R4)     SET START OF FIELD
         LA    R15,6               MAXIMUM LENGTH
         CLR   R15,R0
         BNL   *+L'*+2
         LR    R15,R0
         XR    R1,R1               COUNTER
         CLI   0(R14),C'0'         IF NOT NUMERIC
         BL    *+L'*+12
         LA    R1,1(,R1)           BUMP COUNTER
         LA    R14,1(,R14)         BUMP POINTER
         BCT   R15,*-16
         LTR   R1,R1               IF LENGTH IS ZERO?
         BZ    CPCSARDF            JUST BUMP DEFAULT
         BCT   R1,*+L'*+6          SUBTRACT 1 FOR EXECUTED PACK
         PACK  CPWDBLW,CDSCF1(*-*,R4) <<EXECUTED>>
         EX    R1,*-6              PACK IT IN CPWDBLW
         CVB   R0,CPWDBLW          PUT VALUE IN R0
         B     CPCSARXQ
CPCSARDF LH    R0,CPSCROLL         MOVE DOWN THE SCREEN
         TM    CPFUSW,CPCRSW       CURSOR?
         BZ    CPCSARHF            NO
         L     R14,TERMINPT        PICK UP AID/ROW/COL ADDRESS
         XR    R15,R15
         IC    R15,1(R14)          GET ROW NUMBER
         SH    R15,=Y(CPDLST)
         BNP   CPCSARXQ
         TM    CPFUSW,CPUPSW       UP REQUESTED?
         BO    *+L'*+6             YES
         LR    R0,R15              NO, DOWN
         B     CPCSARXQ
         BCTR  R0,0
         SR    R0,R15
         B     CPCSARXQ
CPCSARHF TM    CPFUSW,CPHLSW       HALF PAGE
         BZ    CPCSARXQ            NO
         SRL   R0,1                YES
CPCSARXQ LTR   R6,R0
         BNP   CPDRCL              NONE, RE-DISPLAY
         L     R14,CPWSR14
         B     4(R14)
         SPACE 1
*- - - - BACK 1 BLOCK TTR OF DIRECTORY ADDRESS COMPUTATION ROUTINE
*              R14 = LINK REGISTER / RETURN +0 = TOP OF DIRECTORY
*                                           +4 = OK, DONE
CPSBLK   XR    R1,R1
         CLI   CPWPOINT+2,1        AM I ON BLOCK 1?
         BE    CPSTRK              YES, JUST SUBTRACT FROM TRACK
         IC    R1,CPWPOINT+2       NO, PICK UP TRACK NUMBER
         BCTR  R1,0                SUBTRACT 1
         STC   R1,CPWPOINT+2
         B     4(R14)
CPSTRK   ICM   R1,B'0011',CPWPOINT AM I ON TRACK 0?
         BZR   R14                 GO POINT TO TOP OF DIRECTORY
         BCTR  R1,0                SUBTRACT 1
         STCM  R1,B'0011',CPWPOINT PREVIOUS TRACK
         MVC   CPWPOINT+2(1),CPWNOTE POINT TO LAST BLOCK OF TRACK
         B     4(R14)
         SPACE 1
*- - - - MEMBER SELECTION DONE
CPDXBK   OI    CPFUSW,CPXBCK
CPDXRQ   OI    CPFUSW,CPXREQ
CPDFND   TM    CPWDCB+DCBOFLGS-IHADCB,DCBOFOPN
         BZ    CPDNTO
         MVI   OPCLPL,VLB          SET "VL" BIT
        CLOSE  (CPWDCB),MF=(E,OPCLPL)
CPDNTO   L     R7,DYNWORKP         INITIALIZE DYNAMIC ALLOCATION WORK
         LR    R0,R7
         LH    R1,=Y(PARMLLEN)     LENGTH TO BE CLEARED
         LA    R14,*
         XR    R15,R15
         ICM   R15,B'1000',=CL8' '
         MVCL  R0,R14              CLEAR TO ALL BLANKS
         USING PARMLIST,R7
         MVI   DSNAME,0            INDICATE FREE REQUEST
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         MVC   DDNAME,N#UT1        DD-NAME
         DROP  R7
         L     R15,ARDYNAM
*- - - - ETPSDYNA PARM.LIST : "DYNWORKP" ADDRESS
        CALL   (15),MF=(E,DYNWORKP)
         LTR   R15,R15
         BZ    CPDFRF
        XMESS  2006
         TM    CPFUSW,CPXREQ       EXIT REQUESTED?
         BO    CPDEXIT             YES, ALL DONE (MESSAGE STILL SET)
         LA    R1,*+L'*+8
CPDSMS   ST    R1,MSGADD
         B     CPDEXIT             YUP - ALL DONE
         MSG   'FREE "DIR" FAILED',H=Y
CPDFRF   TM    CPFUSW,CPXREQ       EXIT OR BACK REQUESTED?
         BZ    CPLBSQ              NO
         TM    CPFUSW,CPXBCK       YES, BACK REQUESTED?
         BO    EDXBLD              YES, GO BACK
         B     CPDEXIT             ELSE ALL DONE (MESSAGE STILL SET)
*- - - - ALLOCATE THE FILE TO DO THE COPY
CPLBSQ   L     R7,DYNWORKP         INITIALIZE DYNAMIC ALLOCATION WORK
         LR    R0,R7
         LH    R1,=Y(PARMLLEN)     LENGTH TO BE CLEARED
         LA    R14,*
         XR    R15,R15
         ICM   R15,B'1000',=CL8' '
         MVCL  R0,R14              CLEAR TO ALL BLANKS
         USING PARMLIST,R7
         MVC   DDNAME,N#UT1        DD-NAME
         MVC   DSNAME,CPWDSN       DS-NAME
         MVC   DSMEMBER,CPWMEM     MEMBER NAME (IF PO)
         MVC   DSVOLSER,CPWVOL     VOL-SER
         MVC   PASSWORD,CPWPSW     PASSWORD
         MVC   DSSTATUS,=CL8'SHR'  SET DISP=SHR
         MVC   DSUNIT,=CL8'SYSALLDA'
         DROP  R7
         MVC   CPWDCB(SKCDCBL),SKCDCB MOVE DCB SKELETON
         MVC   CPWDCB+DCBDDNAM-IHADCB(L'DCBDDNAM),N#UT1 SET DD-NAME
         L     R15,ARDYNAM
*- - - - ETPSDYNA PARM.LIST : "DYNWORKP" ADDRESS
        CALL   (15),MF=(E,DYNWORKP)
         LTR   R15,R15             HOW COMPLETE?
         BZ    CPOKAC              OK
        XMESS  2007
         LA    R1,*+L'*+4
         B     CPRSMS
         MSG   'ALLOC "CPY" FAILED',H=Y
CPOKAC   LA    R1,CPREOF
         STCM  R1,B'0111',CPWDCB+DCBEODA-IHADCB
         LA    R1,CPRSYNA
         STCM  R1,B'0111',CPWDCB+DCBSYNA-IHADCB
         NI    CPFLSW,255-CPWSYFLG
         MVI   OPCLPL,VLB          SET "VL" BIT
        OPEN   (CPWDCB,(INPUT)),MF=(E,OPCLPL)
         TM    CPWDCB+DCBOFLGS-IHADCB,DCBOFOPN GOOD OPEN?
         BO    CPRCRD              YES
         OI    CPFUSW,CPXREQ
         LA    R1,*+L'*+8
         ST    R1,MSGADD
         B     CPRNTO              YUP - ALL DONE
         MSG   'OPEN "CPY" FAILED',H=Y
CPRCRD   L     R2,EDTPOOL          READ DATA IN FREE POOL
         XR    R3,R3
         LA    R4,1
         LR    R5,R4
         TM    EDFSSW,EDDTSW       LOOK IF ASIS DATA
         BZ    CPRLOOP
         OI    CPFLSW,CPWASFLG
CPRLOOP  CL    R4,EDTGASL          CAN BE HANDLED?
         BNH   CPRGCRD             YES
         STM   R14,R6,VUSWA        NO, SAVE REGISTERS
         L     R6,EDTGASL          DO ACTUAL TOTAL OF CARDS
         A     R6,EDTNOWL
         L     R4,=A($#L)          THRESHOLD LIMIT
         CLR   R6,R4               CAN I ACCEPT MORE?
         BNL   CPROVFL             NO MORE SPACE
*- - - - TRY OBTAIN MORE SPACE FOR DATA RECORDS
         LM    R2,R3,=A($#BN,$#BS)
        GETMAIN RC,LV=(R3)
         LTR   R15,R15             HOW COMPLETE?
         BZ    CPGMOK              OK
        XMESS  2013,R15            ERROR
         LA    R1,*+L'*+4
         B     CPROVFL+L'CPROVFL   STOP HERE, GO BACK
         MSG   'GETMAIN(C) FAILED',H=Y
CPGMOK   LR    R5,R1               RETAIN ADDRESS
         LR    R0,R5
         LR    R1,R3
         LA    R14,*
         XR    R15,R15
         MVCL  R0,R14              CLEAR ALL TO BINARY ZEROS
         L     R14,EDTMAIN         1ST DATA GETMAINED AREA
         ICM   R15,B'1111',0(R14)  END OF AREAS CHAINING?
         BZ    *+L'*+6             YES
         LR    R14,R15             NO
         B     *-10                LOOP TO NEXT
         ST    R5,0(R14)           GETMAIN ADDRESS CHAIN
         ST    R3,4(R14)           GETMAIN LENGTH
         AR    R6,R2               DO NEW TOTAL OF CARDS
         CLR   R6,R4               THRESHOLD, CAN I ACCEPT IT?
         BNH   *+L'*+4             YES
         SR    R6,R4               NO, REDUCE
         SR    R2,R6
         L     R1,EDTGASL
         AR    R1,R2
         ST    R1,EDTGASL          NEW NUMBER OF GAS CARDS
         LA    R5,8(R5)            BUILD FREE POOL CHAIN
         LR    R3,R5
CPBFPL   LA    R1,XLNG(R3)
         BCT   R2,*+L'*+4
         B     *+L'*+10
         ST    R1,NPTR(R3)
         LR    R3,R1
         B     CPBFPL
         ST    R5,VUSWA+16         SET NEW R2
         LM    R14,R6,VUSWA        RESTORE REGISTERS
         ST    R2,NPTR(R3)         ADD TO FREE POOL CHAIN
CPRGCRD GET    CPWDCB,(R2)
         TM    CPFLSW,CPWSYFLG     WAS SYNAD EXIT TAKEN?
         BZ    *+L'*+8             NO, BRANCH
         LA    R1,CPWMSG           YES, ERROR
         B     CPROVFL+L'CPROVFL   STOP HERE, GO BACK
         ST    R3,PPTR(R2)
         XC    LCMF(L'LCMF,R2),LCMF(R2)
         LR    R3,R2
         L     R2,NPTR(R3)
         AR    R4,R5
         TM    CPFLSW,CPWASFLG     LOOK IF ASIS DATA
         BO    CPRLOOP
         MVI   CPWCARD,C' '
         MVC   CPWCARD+1(L'CDTA-1),CPWCARD
         OC    CPWCARD(L'CDTA),CDTA(R3)
         CLC   CPWCARD(L'CDTA),CDTA(R3)
         BE    CPRLOOP
         OI    CPFLSW,CPWASFLG     SET ASIS DATA
         B     CPRLOOP
CPREOF   SR    R4,R5               NOW SET DATA IN EDIT FILE
         BNP   CPRCLF              NONE ... GO CLOSE
         L     R15,EDTGASL         UPDATE FREE COUNT
         SR    R15,R4
         ST    R15,EDTGASL
         L     R15,EDTNOWL         UPDATE NUMBER OF CARDS
         AR    R15,R4
         ST    R15,EDTNOWL
         L     R2,EDTPOOL          ADDRESS OF START DATA
         MVC   EDTPOOL,NPTR(R3)    NEW FREE POOL START
         L     R4,EDTABLOC         GET AFTER/BEFORE LOCATION
         CLC   LCMF(L'LCMF,R4),=CL2'B' COPY WHERE?
         BE    CPDBFR              BRANCH IF BEFORE
         ICM   R1,B'1111',NPTR(R4) ELSE IT IS AFTER
         BNZ   *+L'*+8
         ST    R3,EDTLAST
         B     *+L'*+4
         ST    R3,PPTR(R1)
         ST    R1,NPTR(R3)
         ST    R2,NPTR(R4)
         ST    R4,PPTR(R2)
         LR    R0,R4               SET CURRENT POINTER
         B     CPSTCP
CPDBFR   ICM   R1,B'1111',PPTR(R4)
         BNZ   *+L'*+10
         ST    R2,EDTFIRST
         LR    R0,R2               SET CURRENT POINTER
         B     *+L'*+6
         ST    R2,NPTR(R1)
         LR    R0,R1               SET CURRENT POINTER
         ST    R1,PPTR(R2)
         ST    R3,PPTR(R4)
         ST    R4,NPTR(R3)
CPSTCP   ST    R0,EDTCURR          UPDATE CURRENT POINTER
         OI    EDFSSW,SVDTSW       SAY DATA CHANGED
         TM    CPFLSW,CPWASFLG     ASIS DATA?
         BZ    CPRCLF              NO, GO CLOSE
         OI    EDFSSW,EDDTSW       YES, SET ASIS DATA
         OI    EDFUSW,EDASSW       SET ASIS
         B     CPRCLF              GO CLOSE
CPROVFL  LA    R1,*+L'*+12
         ST    R1,MSGADD
         OI    CPFUSW,CPXREQ
         B     CPRCLF              YUP - ALL DONE
         MSG   'YUP, SPACE SHORTAGE',H=Y
CPRCLF   MVI   OPCLPL,VLB          SET "VL" BIT
        CLOSE  (CPWDCB),MF=(E,OPCLPL)
CPRNTO   L     R7,DYNWORKP         INITIALIZE DYNAMIC ALLOCATION WORK
         LR    R0,R7
         LH    R1,=Y(PARMLLEN)     LENGTH TO BE CLEARED
         LA    R14,*
         XR    R15,R15
         ICM   R15,B'1000',=CL8' '
         MVCL  R0,R14              CLEAR TO ALL BLANKS
         USING PARMLIST,R7
         MVI   DSNAME,0            INDICATE FREE REQUEST
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         MVC   DDNAME,N#UT1        DD-NAME
         DROP  R7
         L     R15,ARDYNAM
*- - - - ETPSDYNA PARM.LIST : "DYNWORKP" ADDRESS
        CALL   (15),MF=(E,DYNWORKP)
         LTR   R15,R15
         BZ    CPDEXIT
        XMESS  2008
         TM    CPFUSW,CPXREQ       EXIT REQUESTED?
         BO    CPDEXIT             YES, ALL DONE (MESSAGE STILL SET)
         LA    R1,*+L'*+8
CPRSMS   ST    R1,MSGADD
         B     CPDEXIT             YUP - ALL DONE
         MSG   'FREE "CPY" FAILED',H=Y
CPDEXIT  LM    R11,R12,CPSVRS      RESTORE R11-R12
         DROP  R11,R12
         USING ETPSEDIT,R12,R11
         L     R0,CPWKLN           LENGTH
        FREEMAIN R,LV=(0),A=(R8)
CPLEAVE  L     R1,EDTABLOC         GET AFTER/BEFORE LOCATION
         XC    LCMF(L'LCMF,R1),LCMF(R1)
         XC    EDTABLOC,EDTABLOC
         NI    EDFUSW,255-EXTCPY   RESET COPY REQUEST
         NI    EDPNSW,255-AFBESW   RESET A/B PENDING
         XC    EDADDR,EDADDR       FORCE DEFAULT
         LA    R14,GOBACK          SET RETURN ADDRESS
         TM    EDFSSW,SVDTSW       DATA CHANGED?
         BZR   R14                 NO, RESHOW THE SCREEN
         B     EDRNRTN             ELSE RENUMBER BEFORE
         DROP  R11,R12
         SPACE 1
         USING EDXCPY,R11,R12
*------- SYNAD EXITS - ENTERED DURING THE I/O IF AN ERROR OCCURS.
         CNOP  0,4
CPDSYNA SYNADAF ACSMETH=BSAM
         MVI   CPWMSG,15
         MVC   CPWMSG+1(15),91(R1) ERROR DESCRIPTION ONLY
         OI    CPFLSW,CPWSYFLG
        SYNADRLS
         BR    R14
         CNOP  0,4
CPRSYNA SYNADAF ACSMETH=QSAM
         MVI   CPWMSG,15
         MVC   CPWMSG+1(15),91(R1) ERROR DESCRIPTION ONLY
         OI    CPFLSW,CPWSYFLG
        SYNADRLS
         BR    R14
         SPACE 1
CTCMLST CAMLST NAME,*-*,,*-*
CTCMLSL  EQU   *-CTCMLST
VTCMLST CAMLST SEARCH,*-*,*-*,*-*
VTCMLSL  EQU   *-VTCMLST
BADEDORG MSG   'BAD DSORG'
BADED80  MSG   'LRECL NOT 80'
XBADDSN  MSG   'DS-NAME ERROR'
BADCTLOC MSG   'LOCATE FAILED'
BADVTOBT MSG   'OBTAIN FAILED'
XINVPFK  MSG   'INVALID PF-KEY'
XDUMMY   DC    AL1(XDUMMYL-1),X'04',CL9' '
XDUMMYL  EQU   *-XDUMMY
         SPACE 1
SKDDCB  DCB    DSORG=PS,MACRF=RP,DDNAME=DUMMY,RECFM=F,                 X
               LRECL=256,BLKSIZE=256,KEYLEN=8,EODAD=*-*,SYNAD=*-*
SKDDCBL  EQU   *-SKDDCB
        READ   CPWDECB,SF,*-*,*-*,'S',MF=L
SKCDCB  DCB    DSORG=PS,MACRF=GM,DDNAME=DUMMY,EODAD=*-*,SYNAD=*-*
SKCDCBL  EQU   *-SKCDCB
         SPACE 1
*- - - - DIRECTORY LIST FORMAT
*        THIS IS THE FORMAT FOR A PDS LIBRARY DIRECTORY LISTING
CPWROW1  DC    AL1(CPWROW1L-1),XL1'05'
         DC    CL27'EDIT - COPY SELECTION FROM '
CPWDSNAM EQU   *-CPWROW1
         DC    52CL1'-'
CPWROW1L EQU   *-CPWROW1
CPDRSC   EQU   01                  CURSOR ROW ON LINE BELOW
CPZE     EQU   (CPDRSC+1)*4        "TERMINPT" DISPLACEMENT
CPWROW2  DC    AL1(CPWROW2L-1)
         DC    XL1'05',CL12'COMMAND ===>'
CCDRSC   EQU   *-CPWROW2           CURSOR COLUMN ON FIELD BELOW
CDSCF1   EQU   (*-CPWROW2)+1,46    INPUT FIELD 1
         DC    XL1'01',CL46' '
         DC    XL1'05',CL11'< SCROLL =>'
CDSCF2   EQU   (*-CPWROW2)+1,4     INPUT FIELD 2
         DC    XL1'01',CL4' ',XL1'05',CL1'<',XL1'04'
CPWROW2L EQU   *-CPWROW2
CPWROW3  DC    AL1(CPWROW3L-1)
         DC    XL1'05',CL26'    NAME                  '
         DC    C'VV.MM CREATED   CHANGED         SIZE  ID '
CPWROW3L EQU   *-CPWROW3
CPWROW4  DC    AL1(CPWROW4L-1)
         DC    XL1'05',CL26'    --------              '
         DC    C'----- -------   -------         ----  ------- '
CPWROW4L EQU   *-CPWROW4
CPDLST   EQU   04                  DIRECTORY LIST LINE NUMBER
CPZN     EQU   (CPDLST+1)*4        "TERMINPT" DISPLACEMENT
CPWLIST  DC    AL1(CPWELEN-1)
CCDLST   EQU   *-CPWLIST           CURSOR COLUMN ON FIELD BELOW
CPSLF1   EQU   (*-CPWLIST)+1,1     INPUT FIELD 1 - SEL.CODE
         DC    XL1'01',CL1' '
CPSLF2   EQU   (*-CPWLIST)+3,8     DISPLAY FIELD 2 - NAME
         DC    XL1'04',CL12' '
         DC    XL1'04',CL60' '
CPWELEN  EQU   *-CPWLIST
         PRINT &PRS
        LTORG
         PRINT &PRF
         DROP  R8,R10,R11,R12,R13
         EJECT
*------- SPF STATISTICS ---------------------------------------------*
         CNOP  0,4
         USING *,R12
SPFSTOW  STM   R14,R12,12(R13)     SAVE INPUT REGISTERS
         LR    R12,R15             SET BASE REGISTER
         USING SAVE3,R13
         XC    VUSWA,VUSWA         CLEAR ALL TO BINARY ZEROS
         LA    R11,VUSWA
         DROP  R13
         USING STOWSAVE,R11
         ST    R13,4(R11)          STORE BACKWARD POINTER
         ST    R11,8(R13)          STORE FORWARD POINTER
         LR    R13,R11
         LM    R2,R5,0(R1)         R2=ADDRESS OF OPEN DIRECTORY DCB
         L     R3,0(,R3)           R3=NUMBER OF CARDS
*                                  R4=ADDRESS OF USERID
*                                  R5=ADDRESS OF MEMBER NAME
         MVC   BLDLENT(4),=AL2(1,BLDLLEN)
         MVC   MEMNAME(8),0(R5)    MOVE THE MEMBER NAME
         XC    TTRC(L'TTRC+L'STALIAS),TTRC
         MVI   SPFVR,C' '
         MVC   SPFVR+1(SPFLLEN+L'BLDLPAD-1),SPFVR
        BLDL   (R2),BLDLENT
         LTR   R15,R15
         BZ    *+L'*+2
         DC    H'0'                YUP, TAKE AN S0C1 <------------ DUMP
         MVC   SPFVR(SPFLLEN),SPFVR+2 SKIP BLDL JUNK
         CLI   STALIAS,X'0F'
         BNE   NOTASPF
         XR    R15,R15
         IC    R15,SPFMD
         LA    R15,1(R15)
         STC   R15,SPFMD
         B     ITSASPF
NOTASPF  MVC   SPFVR(5),=XL5'0100000000'
         MVI   STALIAS,X'0F'
ITSASPF  MVI   SPFUS+7,C' '
         MVC   SPFUS(7),0(R4)      USERID
        TIME   ,                   R0 = HHMMSSTH / R1 = 0CYYDDDF
         STCM  R1,B'0111',SPFMDT
         CLC   SPFCDT(3),=CL3' '
         BNE   *+L'*+4
         STCM  R1,B'0111',SPFCDT
         STCM  R0,B'1100',SPFMDTM
         STCM  R3,B'0011',SPFSZ
         CLC   SPFSZI(2),=CL3' '
         BNE   *+L'*+4
         STCM  R3,B'0011',SPFSZI
        STOW   (R2),MEMNAME,R
         L     R13,4(,R13)         PICK UP CALLING SAVE-AREA
         LM    R14,R12,12(R13)     RESTORE INPUT REGISTERS
         XR    R15,R15             SET RC=0
         BR    R14                 RETURN
         PRINT &PRS
        LTORG
         PRINT &PRF
         DROP  R11,R12
         AIF   ('&TXV' NE 'YES').SKVPC2
         EJECT
*------- VERIFY CHAINING (BACKWARD-FORWARD POINTERS) ----------------*
*        USEFULL TO DEBUG A NEW IMPLEMENTED COMMAND OR LINE COMMAND
*        WHEN YOU ARE TESTING IT IN TSO.
*        YOU HAVE JUST TO ALLOCATE A "SYSSNAP" DD AND THE "XSNAP"
*        WILL BE ACTIVE IN CASE OF A CHAINING ERROR.
*              R14 = LINK REGISTER
*              R15 = ENTRY ADDRESS (BASE REGISTER)
*              R0 = AT EXIT : 0 - OK
*                             4 - ERROR / "EDDBLW" SET (SEE NOTE BELOW)
*              NOTE - "EDDBLW" DOUBLE-WORD FIELD SETTING DESCRIPTION :
*                     BYTES 0-7 = ALL ZEROES : THE INITIAL "PPTR" IS
*                                              NOT ZERO
*                     BYTE 0 = FF : "EDTNOWL" IS NOT ZERO
*                     BYTE 1 = FF : "EDTNOWL" COUNT ERROR
*                     BYTE 2 = FF : "EDTLAST" IS NOT ZERO
*                     BYTE 3 = FF : "EDTLAST" POINTER ERROR
*                     BYTES 4-7 = ADDRESS OF ERROR (THE NEXT "PPTR"
*                                 DOES NOT MATCH THIS ADDRESS)
         CNOP  0,4
         USING *,R15
VERCHAIN STM   R1,R3,24(R13)       SAVE R1-R3
         USING SPLTAREA,R10
         XR    R0,R0               SET RC=0
         XR    R1,R1               SET COUNT TO ZERO
         XC    EDDBLW,EDDBLW
         ICM   R3,B'1111',EDTFIRST
         BNZ   VERGO
         CL    R0,EDTLAST
         BE    *+L'*+8
         MVI   EDDBLW+2,X'FF'
         B     VERERRX
         CL    R0,EDTNOWL
         BE    VEREX
         MVI   EDDBLW+0,X'FF'
         B     VERERRX
VERGO    LR    R2,R0
VERLOOP  CL    R2,PPTR(R3)
         BE    *+L'*+8
         ST    R2,EDDBLW+4
         B     VERERRX
         LA    R1,1(R1)
         LR    R2,R3
         ICM   R3,B'1111',NPTR(R2)
         BNZ   VERLOOP
         CL    R2,EDTLAST
         BE    *+L'*+8
         MVI   EDDBLW+3,X'FF'
         B     VERERRX
         CL    R1,EDTNOWL
         BE    VEREX
         MVI   EDDBLW+1,X'FF'
VERERRX  LA    R0,4
VEREX    LM    R1,R3,24(R13)       RESTORE R1-R3
         BR    R14                 RETURN
         PRINT &PRS
        LTORG
         PRINT &PRF
         DROP  R10
.SKVPC2  EJECT
*- - - - TRANSLATE TABLES
ASIST    DC    64X'4B',X'40',9X'4B'
         DC    X'4A4B4C4D4E4F'     CENT,PERIOD,LESS,LPAREN,PLUS,BAR
         DC    X'50',9X'4B'        AMPERSAND
         DC    X'5A5B5C5D5E5F'     EXCL,$,DOT,RPAREN,SEMI,NOT
         DC    X'6061',8X'4B'      HYPHEN,SLASH
         DC    X'6A6B6C6D6E6F'     WHAT,COMMA,PERCENT,UNDLN,GT,QM
         DC    9X'4B',X'79'
         DC    X'7A7B7C7D7E7F'     COLON,POUND,AT,QUOTE,EQ,DBLQUOTE
         DC    X'4B',X'818283848586878889',6X'4B'
         DC    X'4B',X'919293949596979899',6X'4B'
         DC    X'4B',X'A1A2A3A4A5A6A7A8A9',6X'4B'
         DC    16X'4B'
         DC    X'C0',C'ABCDEFGHI',6X'4B'
         DC    X'D0',C'JKLMNOPQR',6X'4B'
         DC    X'E0',X'4B',C'STUVWXYZ',6X'4B'
         DC    C'0123456789',6X'4B'
CAPST    DC    64X'4B',X'40',9X'4B'
         DC    X'4A4B4C4D4E4F'     CENT,PERIOD,LESS,LPAREN,PLUS,BAR
         DC    X'50',9X'4B'        AMPERSAND
         DC    X'5A5B5C5D5E5F'     EXCL,$,DOT,RPAREN,SEMI,NOT
         DC    X'6061',8X'4B'      HYPHEN,SLASH
         DC    X'6A6B6C6D6E6F'     WHAT,COMMA,PERCENT,UNDLN,GT,QM
         DC    9X'4B',X'79'
         DC    X'7A7B7C7D7E7F'     COLON,POUND,AT,QUOTE,EQ,DBLQUOTE
         DC    X'4B',C'ABCDEFGHI',6X'4B'
         DC    X'4B',C'JKLMNOPQR',6X'4B'
         DC    2X'4B',C'STUVWXYZ',6X'4B'
         DC    16X'4B'
         DC    X'C0',C'ABCDEFGHI',6X'4B'
         DC    X'D0',C'JKLMNOPQR',6X'4B'
         DC    X'E0',X'4B',C'STUVWXYZ',6X'4B'
         DC    C'0123456789',6X'4B'
         EJECT
*- - - - EDIT INTERFACE HELP SCREEN
         CNOP  0,4
EDTHELP  DC    A(EDTHL1)
         DC    A(EDTENT)
         DC    A(EDTHL2)
         DC    A(EDTHL3)
         DC    A(EDTHL4)
         DC    A(EDTHL5)
         DC    A(EDTHL6)
         DC    A(EDTHL7)
         DC    A(EDTBLK)
         DC    A(EDTHL8)
         DC    A(EDTHL9)
         DC    A(EDTHL10)
         DC    A(EDTHL11)
         DC    A(EDTHL12)
         DC    A(EDTHL13)
         DC    A(EDTBLK)
         DC    A(EDTHL14)
         DC    A(EDTHL15)
         DC    A(EML+EDTHL16)
         SPACE 1
EDTHL1   DC    AL1(EDTHL1L-1)
         DC    XL1'05',10CL1'-'    PROTECT, HIGH-LIGHT
         DC    CL16' EDIT INTERFACE ',53CL1'-'
EDTHL1L  EQU   *-EDTHL1
*                ----+----1----+----2----+----3----+----4----+----5----
*              +----6----+----7----+----
EDTHL2   DC    AL1(EDTHL2L-1),XL1'05'
         DC    C'COMMANDS ARE :'
EDTHL2L  EQU   *-EDTHL2
EDTHL3   DC    AL1(EDTHL3L-1),XL1'05'
         DC    C' SAVE=SAVE NO END     / SAVEND=SAVE END      / END=SAVX
               E END'
EDTHL3L  EQU   *-EDTHL3
EDTHL4   DC    AL1(EDTHL4L-1),XL1'05'
         DC    C' CAN=NO SAVE END      / SUB=SUBMIT (IF JES2) / I=INPUTX
                (ONLY WHEN FILE EMPTY)'
EDTHL4L  EQU   *-EDTHL4
EDTHL5   DC    AL1(EDTHL5L-1),XL1'05'
         DC    C' F=FIND               / C=CHANGE             / ?=W=WHEX
               RE (PENDING RETRIEVE)'
EDTHL5L  EQU   *-EDTHL5
EDTHL6   DC    AL1(EDTHL6L-1),XL1'05'
         DC    C' UP, U OR -           / DOWN, D OR +         (FOLLOWEDX
                BY "M" OR A NUMBER)'
EDTHL6L  EQU   *-EDTHL6
EDTHL7   DC    AL1(EDTHL7L-1),XL1'05'
         DC    C' COPY                 (USED WITH AFTER/BEFORE)'
EDTHL7L  EQU   *-EDTHL7
EDTHL8   DC    AL1(EDTHL8L-1),XL1'05'
         DC    C'LINE PREFIX COMMANDS ARE :'
EDTHL8L  EQU   *-EDTHL8
EDTHL9   DC    AL1(EDTHL9L-1),XL1'05'
         DC    C' I=INSERT A BLANK LINE IMMEDIATELY AFTER THIS ONE'
EDTHL9L  EQU   *-EDTHL9
EDTHL10  DC    AL1(EDTHL10L-1),XL1'05'
         DC    C' C/CC=COPY LINE(S)    / M/MM=MOVE LINE(S)'
EDTHL10L EQU   *-EDTHL10
EDTHL11  DC    AL1(EDTHL11L-1),XL1'05'
         DC    C' D/DD=DELETE LINE(S)  / R/RR=REPEAT LINE(S)'
EDTHL11L EQU   *-EDTHL11
EDTHL12  DC    AL1(EDTHL12L-1),XL1'05'
         DC    C' A=AFTER / B=BEFORE  (USED WITH COPY/C/CC/M/MM)'
EDTHL12L EQU   *-EDTHL12
EDTHL13  DC    AL1(EDTHL13L-1),XL1'05'
         DC    C'REMARK : C, CC, M, MM, DD AND RR ARE MUTUALLY EXCLUSIVX
               E LINE COMMANDS'
EDTHL13L EQU   *-EDTHL13
EDTHL14  DC    AL1(EDTHL14L-1),XL1'05'
         DC    C'SCROLL : P(AGE) BY DEFAULT, H(ALF) OR C(SR)'
EDTHL14L EQU   *-EDTHL14
EDTHL15  DC    AL1(EDTHL15L-1),XL1'05'
         DC    C'PFK''S : 3-4=END, 5=FIND, 6=CHANGE, 7=UP AND 8=DOWN'
EDTHL15L EQU   *-EDTHL15
EDTHL16  DC    AL1(EDTHL16L-1),XL1'05'
         DC    C'        12=RESET (RESHOW/RESTORE PREVIOUS SCREEN WITH X
               CURSOR AT COMMAND LINE)'
EDTHL16L EQU   *-EDTHL16
EDTENT   DC    AL1(EDTENTL-1),XL1'01',CL1' ',XL1'05',CL7' '
EDTENTL  EQU   *-EDTENT
EDTBLK   DC    AL1(EDTBLKL-1),XL1'05',CL9' '
EDTBLKL  EQU   *-EDTBLK
         EJECT
*- - - - EDIT - COPY ENTRY SCREEN
         CNOP  0,4
CPYSCR   DC    A(CPROW1)
         DC    A(CPROW2)
CRCPSC   EQU   (*-CPYSCR)/4        CURSOR ROW ON LINE BELOW
ZCP1     EQU   (*-CPYSCR)+4        "TERMINPT" DISPLACEMENT
         DC    A(CPROW3)
ZCP2     EQU   (*-CPYSCR)+4        "TERMINPT" DISPLACEMENT
         DC    A(CPROW4)
         DC    A(EDTBLK)
ZCP3     EQU   (*-CPYSCR)+4        "TERMINPT" DISPLACEMENT
         DC    A(EML+CPROW5)
         SPACE 1
CPROW1   DC    AL1(CPROW1L-1)
         DC    XL1'05',10CL1'-'    PROTECT, HIGH-LIGHT
         DC    CL25' EDIT - COPY ENTRY PANEL ',44CL1'-'
CPROW1L  EQU   *-CPROW1
CPROW2   DC    AL1(CPROW2L-1)
         DC    XL1'05',CL30'ENTER/VERIFY PARAMETERS BELOW:'
         DC    XL1'04',CL1' '
CPROW2L  EQU   *-CPROW2
CPROW3   DC    AL1(CPROW3L-1)
CPOFF1   EQU   (*-CPROW3)+1,10
         DC    XL1'04',CL20'FULLY-QUALIFIED NAME',XL1'05',CL3'==>'
CCCPSC   EQU   (*-CPROW3)          CURSOR COLUMN ON FIELD BELOW
CPSCF1   EQU   (*-CPROW3)+1,54     INPUT FIELD 1
         DC    XL1'02',CL54' '
CPROW3L  EQU   *-CPROW3
CPROW4   DC    AL1(CPROW4L-1)
CPOFF2   EQU   (*-CPROW4)+10,13
         DC    XL1'04',CL22'         VOLUME SERIAL'
         DC    XL1'05',CL3'==>'
CPSCF2   EQU   (*-CPROW4)+1,6      INPUT FIELD 2
         DC    XL1'02',CL6' '
         DC    XL1'04',CL45'          (IF NOT CATALOGED)'
CPROW4L  EQU   *-CPROW4
CPROW5   DC    AL1(CPROW5L-1)
CPOFF3   EQU   (*-CPROW5)+6,17
         DC    XL1'04',CL22'     DATA-SET PASSWORD'
         DC    XL1'05',CL3'==>'
CPSCF3   EQU   (*-CPROW5)+1,8      INPUT FIELD 3
         DC    XL1'03',CL8' '      NO DISPLAY
         DC    XL1'04',CL37'        (IF PASSWORD PROTECTED)'
CPOFF4   EQU   (*-CPROW5)+1,3
         DC    XL1'04',CL3'(N)',XL1'04',CL1' '
CPROW5L  EQU   *-CPROW5
         EJECT
*- - - - EDIT - COPY ENTRY HELP SCREEN
         CNOP  0,4
CPYHLP   DC    A(CPYHL1)
         DC    A(EDTENT)
         DC    A(CPYHL2)
         DC    A(CPYHL3)
         DC    A(CPYHL4)
         DC    A(EDTBLK)
         DC    A(EML+CPYHL5)
         SPACE 1
CPYHL1   DC    AL1(CPYHL1L-1)
         DC    XL1'05',10CL1'-'    PROTECT, HIGH-LIGHT
         DC    CL25' EDIT - COPY ENTRY PANEL ',44CL1'-'
CPYHL1L  EQU   *-CPYHL1
*                ----+----1----+----2----+----3----+----4----+----5----
*              +----6----+----7----+----
CPYHL2   DC    AL1(CPYHL2L-1),XL1'05'
         DC    C'THE EDIT COPY PANEL PROVIDES FOR ENTERING THE DATA-SETX
                NAME, WHICH MUST BE A'
CPYHL2L  EQU   *-CPYHL2
CPYHL3   DC    AL1(CPYHL3L-1),XL1'05'
         DC    C'    FULLY-QUALIFIED DS-NAME (NEVER DELIMITED BY QUOTESX
               ).'
CPYHL3L  EQU   *-CPYHL3
CPYHL4   DC    AL1(CPYHL4L-1),XL1'05'
         DC    C'    A SPECIFIC VOL-SER MAY ALSO BE ENTERED, AND A PASSX
               WORD.'
CPYHL4L  EQU   *-CPYHL4
CPYHL5   DC    AL1(CPYHL5L-1),XL1'05'
         DC    C'PF3 RETURNS TO THE EDIT ENTRY PANEL.'
CPYHL5L  EQU   *-CPYHL5
         EJECT
*- - - - EDIT - COPY SELECTION HELP SCREEN
         CNOP  0,4
CPWHELP  DC    A(CPWHL1)
         DC    A(EDTENT)
         DC    A(CPWHL2)
         DC    A(CPWHL3)
         DC    A(EDTBLK)
         DC    A(CPWHL4)
         DC    A(CPWHL5)
         DC    A(CPWHL6)
         DC    A(CPWHL7)
         DC    A(EDTBLK)
         DC    A(CPWHL8)
         DC    A(CPWHL9)
         DC    A(EML+CPWHL10)
         SPACE 1
CPWHL1   DC    AL1(CPWHL1L-1)
         DC    XL1'05',10CL1'-'    PROTECT, HIGH-LIGHT
         DC    CL29' EDIT - COPY SELECTION PANEL ',40CL1'-'
CPWHL1L  EQU   *-CPWHL1
CPWHL2   DC    AL1(CPWHL2L-1),XL1'05'
*                ----+----1----+----2----+----3----+----4----+----5----
*              +----6----+----7----+----
         DC    C'THE COPY SELECTION PANEL ALLOWS YOU TO SELECT THE PDS X
               DATA-SET''S MEMBER-NAME'
CPWHL2L  EQU   *-CPWHL2
CPWHL3   DC    AL1(CPWHL3L-1),XL1'05'
         DC    C'     YOU WANT COPY BY TYPING A "S" OR "C" IN FRONT OF X
               THE DESIRED NAME.'
CPWHL3L  EQU   *-CPWHL3
CPWHL4   DC    AL1(CPWHL4L-1),XL1'05'
         DC    C'COMMANDS ARE :'
CPWHL4L  EQU   *-CPWHL4
CPWHL5   DC    AL1(CPWHL5L-1),XL1'05'
         DC    C' L(OCATE) OR F(IND) ... (MEMBER NAME OR MEMBER NAMES SX
               TARTING BY THE CHARACTER'
CPWHL5L  EQU    *-CPWHL5
CPWHL6   DC    AL1(CPWHL6L-1),XL1'05'
         DC    CL24' ',C'STRING ...)'
CPWHL6L  EQU   *-CPWHL6
CPWHL7   DC    AL1(CPWHL7L-1),XL1'05'
         DC    C' UP, U OR -           / DOWN, D OR +         FOLLOWED X
               BY "M" OR A NUMBER'
CPWHL7L  EQU   *-CPWHL7
CPWHL8   DC    AL1(CPWHL8L-1),XL1'05'
         DC    C'SCROLL : P(AGE) BY DEFAULT, H(ALF) OR C(SR)'
CPWHL8L  EQU   *-CPWHL8
CPWHL9   DC    AL1(CPWHL9L-1),XL1'05'
         DC    C'PFK''S : 7=UP AND 8=DOWN'
CPWHL9L  EQU   *-CPWHL9
CPWHL10  DC    AL1(CPWHL10L-1),XL1'05'
         DC    C'        PF3 RETURNS TO THE EDIT COPY ENTRY PANEL.'
CPWHL10L EQU   *-CPWHL10
         EJECT
CPWKAR   DSECT
CPWKLN   DS    F                   COPY-WORK-AREA LENGTH
CPSVRS   DS    2F                  SAVE R11-R12
CPWDSN   DS    CL44
CPWPSW   DS    CL8
CPWVOL   DS    CL6
CPWKSW   DS    XL1
VLRFC    EQU   X'80'               VOLSER RETRIEVED FROM CATALOG
PODS     EQU   X'01'               ON = DSORG IS PO
CPWSLF   DS    CL1                 SELECT CODE = S OR C
CPWDBLW  DS    D
CPWDCB   DS    0F,XL(DCBLNGQS)     DCB WORK-AREA
CPWPOINT DS    F                   TTR0 TO POINT A DIR. RECORD
CPWNOTE  DS    XL1                 MAX. R OF TTR'S DIR. TRACK
CPWTOP   DS    XL3                 TTR OF TOP SCREEN MEMBER NAME
CPWBOT   DS    F                   TTR0 OF BOTTOM SCREEN MEMBER NAME
CPWSR14  DS    F
CPWMEM   DS    CL8                 SELECTION MEMBER NAME
CPWFMEM  DS    CL8                 TOP SCREEN MEMBER NAME
CPWLMEM  DS    CL8                 BOTTOM SCREEN MEMBER NAME
CPWLOC   DS    CL8                 LOCATE MEMBER NAME
CPSCROLL DS    H
CPADDR   DS    XL2                 REQUESTED CURSOR (ROW,COLUMN)
        READ   CPWDECBW,SF,*-*,*-*,'S',MF=L
CPWDECBL EQU   *-CPWDECBW
CPWCARD  DS    CL80
CPWKEY   DS    CL8,XL256
CPFLSW   DS    XL1                 TESTS
CPWEOFLG EQU   X'80'                    ON = EOF ON "CPY" DIR.
CPWSYFLG EQU   X'40'                    ON = ERROR ON "CPY" DIR.
CPWASFLG EQU   X'01'                    ON = ASIS DATA IN "CPY" MEMBER
CPFUSW   DS    XL1                 FUNCTIONS
CPRCSW   EQU   X'80'                    DIR. RECORD STILL IN "CPWKEY"
CPHLSW   EQU   X'40'                    ON = HALF, OFF = PAGE
CPCRSW   EQU   X'20'                    ON = CURSOR, OFF = PAGE
CPUPSW   EQU   X'10'                    ON = UP, OFF = DOWN
CPXBCK   EQU   X'02'                    ON = BACK REQUESTED
CPXREQ   EQU   X'01'                    ON = EXIT REQUESTED
CPWMSG   DS    CL22
CPWKARL  EQU   (((*-CPWKAR)+7)/8)*8
         SPACE 1
STOWSAVE DSECT
         DS    18F
BLDLENT  DS    F
MEMNAME  DS    CL8
TTRC     DS    XL3
STALIAS  DS    XL1
SPFVR    DS    XL1                 SPF USER DATA
SPFMD    DS    XL1
         DS    XL2
         DS    XL1
SPFCDT   DS    PL3
         DS    XL1
SPFMDT   DS    PL3
SPFMDTM  DS    XL2
SPFSZ    DS    XL2
SPFSZI   DS    XL2
SPFMD2   DS    XL2
SPFUS    DS    CL7
         DS    CL3
SPFLLEN  EQU   *-SPFVR
BLDLPAD  DS    XL14
BLDLLEN  EQU   *-MEMNAME
STOWSVL  EQU   (((*-STOWSAVE)+7)/8)*8
STOWSVLT EQU   L'VUSWA-STOWSVL
         DS    0XL(STOWSVLT)       "STOWSVL" VALIDITY CHECK
         SPACE 1
         PRINT &PRS
        SPLTAREA
         SPACE 1
        MYSAVE
         SPACE 1
        DIRMASK
         SPACE 1
        SPFMT
         SPACE 1
        PARMLIST
         PRINT &PRF
        IEFZB4D0
        IFGACB
        IFGRPL
        IHAPDS PDSBLDL=NO
        DCBD   DSORG=(PS,PO),DEVD=DA
        IECSDSL1 (1)
DSCBLGTH EQU   DS1END-IECSDSL1
        IEZIOB
         PRINT GEN
         END
