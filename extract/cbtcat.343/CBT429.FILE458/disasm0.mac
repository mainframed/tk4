DIS0     TITLE '*** DISASSEMBLY PHASE 0 ***'
         PRINT OFF                                                 -EU-
         COPY  DISASMM                                             -EU-
         PRINT ON                                                  -EU-
DISASM   SVLNK R3,R4
         EJECT
         PRINT NOGEN
*DISASSEMBLER PROGRAM TO CREATE AN ASSEMBLER SOURCE PROGRAM
*FROM A LOAD MODULE IN A PDS. DD CARDS REQUIRED INCLUDE
*SYSPRINT FOR MESSAGES AND DIAGNOSTICS USING BLKSIZE A MULTIPLE
*OF 121, SYSLIB SPECIFYING THE PDS CONTAINING THE MEMBER,        FIX***
*WHICH MUST BE A PDS, SYSPUNCH FOR THE ASSEMBLER SOURCE
*PROGRAM, HAVING BLKSIZE A MULTIPLE OF 80, AND SYSIN
*FOR THE CONTROL CARD INPUT. CONTROL INPUT MAY OPTIONALLY
*BE ENTERED VIA THE PARM ON THE EXECUTE CARD. CONTROL
*INFORMATION INCLUDES THE MEMBER NAME AND CSECT NAME
*TO BE DISASSEMBLED. IF CSECT NAME IS OMITTED, THE CSECT
*FOR ESD-ID 0001 WILL BE USED.
*
*
* FILES USED BY THIS PROGRAM INCLUDE THE FOLLOWING:
*
* DDNAME SYSLIB: RECFM=U. INPUT LOAD MODULE LIBRARY.
*
* DDNAME SYSPUNCH: RECFM=FB,LRECL=80. OUTPUT FILE CONTAINING
*                 DISASSEMBLED TEXT. (MAXBLK=18,960)
*
* DDNAME SYSPRINT: RECFM=FBA,LRECL=121.  PRINTED OUTPUT CONTAINING A
*                LIST OF THE ESD TABLE, RLD TABLE, AND TEXT.
*                (MAXBLK=18997)
* DDNAME LOADLIB: (OPTIONAL) NAMES A PDS CONTAINING THE
*                 MODULES OF DISASM IF DIFFERENT FROM
*                 THE STEPLIB. USED PRIMARILY FOR TSO.
*
* DDNAME SYSIN: RECFM=FB, LRECL=80. CONTROL CARD INPUT.
*
*
* THE CONTROL CARD PROVIDES THE MEMBER NAME AND CSECT NAME
* OF THE PROGRAM TO BE DISASSEMBLED. MEMBER NAME IS REQUIRED.
* IF CSECT NAME IS OMITTED, THE CSECT WITH ESDID 0001 WILL
* BE USED. FORMAT IS FREE-FORM. MEMBER NAME MUST PRECEDE CSECT
* NAME. ANY NUMBER OF BLANKS MAY PRECEDE AND FOLLOW MEMBER NAME.
* A COMMA MAY IMMEDIATELY FOLLOW MEMBER NAME IF DESIRED.
         EJECT
* PARM DATA FROM THE EXECUTE CARD MAY BE USED TO SPECIFY
* VALIDITY OF PRIVILEGED OR FLOATING POINT INSTRUCTIONS,
* OR VALIDITY OF BRANCH REGISTER EXTENDED MNEMONICS.               -EU-
* IF NOT SPECIFIED, PRIVILEGED AND FLOATING POINT OPERATION
* CODES WILL NOT BE TREATED AS INSTRUCTION OP-CODES,
* OR BRANCH REGISTER EXTENDED MNEMONICS WILL NOT BE GENERATED.     -EU-
* TO INCLUDE THESE INSTRUCTIONS, CODE :
*     PARM=(SUPVR)      PRIVILEGED INSTRUCTIONS
*     PARM=(FLTPT)      FLOATING POINT INSTRUCTIONS
*     PARM=(BREMC)      BRANCH REGISTER EXTENDED MNEMONICS CODES   -EU-
* MULIPLE OPTIONS MAY BE SPECIFIED IN ANY ORDER AS FOLLOWS :       -EU-
*     PARM=(SUPVR,FLTPT)                                           -EU-
*     PARM=(BREMC,SUPVR,FLTPT)                                     -EU-
*
*
*PROCESSING FLOW:
*
* 1. PROCESS THE CONTROL INFORMATION TO OBTAIN THE MEMBER
*    AND CSECT NAMES.
* 2. ISSUE BLDL AGAINST SYSLIB TO OBTAIN DIRECTORY INFO FOR
*    THE MEMBER SPECIFIED. IF THE SPECIFIED MEMBER IS AN
*    ALIAS, RE-ISSUE A BLDL FOR THE REAL MEMBER. PRINT
*    DIRECTORY INFORMATION.
* 3. POINT TO THE MEMBER IN THE SYSLIB PDS, AND PROCESS THE
*    MEMBER. LOAD MODULES CONTAIN AN EXTERNAL SYMBOL DICTIONARY
*    FOLLOWED BY TEXT AND RELOCATION DICTIONARY INFORMATION.
*    ALL ESD INFO FOR THE MODULE PRECEDES THE FIRST CONTROL
*    RECORD. A CONTROL RECORD PRECEDES EACH BLOCK OF TEXT.
*    RLD INFO FOR THE TEXT FOLLOWS EACH TEXT BLOCK. PROCESSING
*    OF LOAD MODULE INFORMATION IS AS FOLLOWS:
*    A. BUILD AN EXTERNAL SYMBOL TABLE, USING THE CESD BLOCKS.
*    B. SEARCH FOR THE DESIRED CSECT AS THE TABLE IS BEING
*       BUILT. THIS CSECT MUST BE FOUND BEFORE THE FIRST
*       CONTROL RECORD.
*    C. READ BLOCKS UNTIL A CONTROL RECORD FOR THE DESIRED
*       CSECT IS FOUND (BY ESD-ID). WHEN FOUND, SAVE THE
*       TEXT FOR DISASSEMBLY, AND USE THE FOLLOWING RLD
*       INFORMATION TO BUILD A RELOCATION DICTIONARY TO BE USED
*       DURING DISASSEMBLY.
* 4. DISASSEMBLY USES THE EXTERNAL SYMBOL TABLE, RELOCATION
*    DICTIONARY, AND TEXT BUILT BY THE PREVIOUS STEPS.
*
*
* AUTHOR R THORNTON - NOV 1977
*        UPDATES (MARKED -EU- IN COLUMNS 68-71) DONE BY            -EU-
*        MOINIL P.A. , COMPUTING CENTRE                            -EU-
*                      J.R.C. - ISPRA ESTABLISHMENT                -EU-
*                      21020 ISPRA (VA), ITALY                     -EU-
         EJECT
****************************************************************
*                                                              *
* PROCESS THE PARM FIELD, IF ANY.                              *
*                                                              *
****************************************************************
         SPACE 1
         L     R12,0(R1)               GET PARM FIELD ADDRESS
         XR    R1,R1                   CLEAR WORK REG
         ICM   R1,B'0011',0(R12)       PICK UP PARM LENGTH
         BZ    OPENS                   NO PARM INFO ENTERED
         LA    R12,2(R12)              GET PARM FIELD TEXT ADDRESS -EU-
ANYPARM  CH    R1,H5                   5-BYTES OF PARM
         BNL   SGLPARM                 YES, ANALYZE SINGLE PARM    -EU-
BADPARM  WTO   'KEYWORD INVALID OR SPECIFIED TWICE',ROUTCDE=11     -EU-
         B     LEAVE                   EXIT                        -EU-
SGLPARM  CLC   0(5,R12),=C'SUPVR'      IS PARM=SUPVR
         BE    SUPARM                  YES
         CLC   0(5,R12),=C'FLTPT'      PARM IS FLTPT
         BE    FPTPARM                 YES                         -EU-
         CLC   0(5,R12),=C'BREMC'      PARM IS BREMC               -EU-
         BNE   BADPARM                 NO, ERROR
         CLI   BREMASM,0               BR EXT. MNEMONICS SET       -EU-
         BNE   BADPARM                 YES, ERROR                  -EU-
         MVI   BREMASM,1               SET BR EXT. MNEMONICS O.K.  -EU-
         B     TSTPARM                 CONTINUE                    -EU-
FPTPARM  CLI   FLPTASM,0               FLOATING POINT SET          -EU-
         BNE   BADPARM                 YES, ERROR                  -EU-
         MVI   FLPTASM,1               SET FLOATING POINT O.K.
         B     TSTPARM                 CONTINUE                    -EU-
SUPARM   CLI   PRIVASM,0               PRIVILEGED INSTR SET        -EU-
         BNE   BADPARM                 YES, ERROR                  -EU-
         MVI   PRIVASM,1               SET PRIVILEGED INSTR O.K.
TSTPARM  SH    R1,H5                   ANYMORE PARM TEXT           -EU-
         BNP   OPENS                   NO, END OF PARM             -EU-
         CLI   5(R12),C','             IS IT SEPARATOR             -EU-
         BNE   BADPARM                 NO, ERROR                   -EU-
         LA    R12,6(R12)              POINT TO NEXT PARM TEXT     -EU-
         BCT   R1,ANYPARM              GO HANDLE ANY OTHER         -EU-
OPENS    RDJFCB LOADLIB                WAS LOADLIB DD CARD INCLUDED
         LTR   R15,R15                 JFCB READ O.K.
         BNZ   OPEN1                   NO, DONT OPEN
         OPEN  LOADLIB                 GOT DD CARD, OPEN FILE
         EJECT
****************************************************************
*                                                              *
* GET STORAGE FOR THE SYMBOL TABLE, RLD TABLE, AND DATA-ONLY   *
* TABLES, AND OPEN FILES.                                      *
*                                                              *
****************************************************************
         SPACE 1
OPEN1    OPEN  (SYSPRINT,OUTPUT,SYSPUNCH,OUTPUT)
         OPEN  (SYSLIB,,SYSIN)         OPEN FILES
         L     R2,INDCB                                            -EU-
         USING IHADCB,R2                                           -EU-
         TM    DCBOFLGS,DCBOFOPN       DID SYSIN OPEN O.K.         -EU-
         BZ    NOCTL                   NO
         DROP  R2                                                  -EU-
         BAS   R9,GETCTL               EXTRACT DESIRED MEMBER AND CSECT
         BAS   R9,BLDL                 ISSUE BLDL AND PRINT
         MVI   CCAT,0                  INSURE TTR0
         L     R1,=A(SYSLIB)                                       -EU-
         POINT (1),TTRMOD              POINT TO 1ST BLOCK OF MODULE
         L     R0,BUFLGTH              BUFFER STORAGE LENGTH       -EU-
         GETMAIN R,LV=(0)              GET BUFFER STORAGE          -EU-
         ST    R1,BUFAD                SAVE BUFFER ADDRESS
         L     R0,SYMLGTH              SYMBOL TABLE STORAGE LENGTH -EU-
         GETMAIN R,LV=(0)              GET SYMBOL TABLE STORAGE    -EU-
         ST    R1,SYMTBAD              SAVE SYMBOL TABLE ADDRESS
         ST    R1,CURRSYM              SAVE CURRENT SYMBOL ADDRESS
         MVI   0(R1),X'FF'             TABLE END INDIC
         A     R1,SYMLGTH              COMPUTE END ADDRESS         -EU-
         ST    R1,ENDSYM               STORE TBL END ADDRESS
         L     R0,RLDLGTH              RLD TABLE STORAGE LENGTH    -EU-
         GETMAIN R,LV=(0)              GET RLD TABLE STORAGE       -EU-
         ST    R1,RLDTBL               SAVE RLD TABLE ADDRESS
         ST    R1,CURRLD               SAVE CURRENT RLD ADDRESS
         MVI   0(R1),X'FF'             TABLE END INDIC
         A     R1,RLDLGTH              COMPUTE END ADDRESS         -EU-
         ST    R1,ENDRLD               STORE TBL END ADDRESS
         L     R0,DATLGTH              DATA ONLY TABLE STOR. LENGTH-EU-
         GETMAIN R,LV=(0)              GET DATA ONLY TABLE STORAGE -EU-
         ST    R1,DATONLY              SAVE TBL ADDRESS
         MVC   0(3,R1),HIVAL           SET END VALUE
         ST    R1,DATSTART             SAVE START ADDRESS          -EU-
         ST    R1,DATOCUR              SET CURRENT ADDRESS
         A     R1,ENDATO               COMPUTE TABLE END ADDRESS
         ST    R1,DATOEND              SAVE END ADDRESS
         MVC   PRT+15(29),=C'*** EXTERNAL SYMBOL TABLE ***'
         MVI   PCC,C'-'                SET SKIP 3 LINES
         BAS   R9,PRINT                PRINT
         MVC   PRTLINE,SYMHDR          SYM TBL HEADER
         BAS   R9,PRINT                PRINT
         EJECT
******************************************************************
*                                                                *
* CHECK FOR PRIVILEGED AND/OR FLOATING POINT INSTRUCTION OPTION. *
* IF THESE INSTRUCTIONS ARE NOT TO BE ASSEMBLED, CLEAR THEIR     *
* INSTRUCTION TABLE ENTRIES.                                     *
*                                                                *
******************************************************************
         SPACE 1
         CLI   FLPTASM,1               FLOATING POINT INSTR O.K.
         BE    TSTPRIV                 YES
         L     R12,SGLOPAD             POINT TO OP-CODE TBL        -EU-
         USING INSTWA,R12                                          -EU-
TSTOPND  CLI   0(R12),X'FF'            END OF TBL
         BE    CKDBLST                 YES                         -EU-
         TM    ICLASS,FLTPT            IS IT FLOATING POINT        -EU-
         BZ    FLPSTP                  NO
         XC    0(L'SGLOP-1,R12),0(R12) CLEAR ENTRY                 -EU-
FLPSTP   LA    R12,L'SGLOP(R12)        TO NEXT ENTRY
         B     TSTOPND                 LOOP THRU TABLE
CKDBLST  L     R12,DBLOPAD             @ 2-BYTE OP-CODE TBL        -EU-
CKDBNDT  CLI   0(R12),X'FF'            END OF TBL                  -EU-
         BE    TSTPRIV                 YES                         -EU-
         TM    ICLASS+2,FLTPT          IS IT FLOATING POINT        -EU-
         BZ    DBSTPT                  NO                          -EU-
         XC    0(L'DBLOP-1,R12),0(R12) YES, CLEAR ENTRY            -EU-
DBSTPT   LA    R12,L'DBLOP(R12)        TO NEXT ENTRY               -EU-
         B     CKDBNDT                 LOOP THRU TABLE             -EU-
TSTPRIV  CLI   PRIVASM,1               PRIVILEGED INSTR O.K.
         BE    MAINLINE                YES                         -EU-
         L     R12,SGLOPAD             POINT TO OP-CODE TBL        -EU-
TTOPND   CLI   0(R12),X'FF'            END OF TABLE
         BE    CKDBLS                  YES
         TM    ICLASS,PRIV             IS IT PRIVILEGED INSTR      -EU-
         BZ    PRIVSTP                 NO
         XC    0(L'SGLOP-1,R12),0(R12) YES, CLEAR ENTRY            -EU-
PRIVSTP  LA    R12,L'SGLOP(R12)        TO NEXT ENTRY
         B     TTOPND                  LOOP THRU TABLE
CKDBLS   L     R12,DBLOPAD             @ 2-BYTE OP-CODE TBL
CKDBND   CLI   0(R12),X'FF'            END OF TBL
         BE    MAINLINE                YES                         -EU-
         TM    ICLASS+2,PRIV           IS IT PRIVILEGED OP-CODE    -EU-
         BZ    DBSTP                   NO
         XC    0(L'DBLOP-1,R12),0(R12) YES, CLEAR ENTRY            -EU-
DBSTP    LA    R12,L'DBLOP(R12)        TO NEXT ENTRY
         B     CKDBND                  LOOP THRU TABLE
         DROP  R12                                                 -EU-
         EJECT
****************************************************************
*                                                              *
* MAINLINE PROCESSING FOR THE LOAD MODULE. THE DIRECTORY ENTRY *
* AND TEXT ARE PROCESSED.                                      *
*                                                              *
****************************************************************
         SPACE 1
MAINLINE L     R6,BUFAD                GET BUFFER ADDRESS
         READ  DECB,SF,SYSLIB,(6),'S'  READ BLOCK FROM MEMBER
         CHECK DECB                    AWAIT COMPLETION
         CLI   0(R6),X'20'             CESD RECORD
         BNE   TESTOTHR                NO
         BAS   R9,CESDREC              PROCESS CESD RECORDS
         B     MAINLINE                GO READ AGAIN
TESTOTHR LA    R9,CNTLRECS             ASSUME CONTROL RECORD
         CLI   0(R6),1                 IT IS CONTROL
         BE    PERFORM                 YES
         CLI   0(R6),5                 IS IT CONTROL
         BE    PERFORM                 YES
         CLI   0(R6),13                IS IT CONTROL
         BE    PERFORM                 YES
         LA    R9,RLDRECS              ASSUME RLD RECORD
         CLI   0(R6),2                 IS IT RLD
         BE    PERFORM                 YES
         CLI   0(R6),6                 IS IT RLD
         BE    PERFORM                 YES
         CLI   0(R6),14                IS IT RLD
         BE    PERFORM                 YES
         LA    R9,CTRLRECS             ASSUME CONTROL AND RLD
         CLI   0(R6),3                 IS IT CTL AND RLD
         BE    PERFORM                 YES
         CLI   0(R6),7                 IS IT CTL AND RLD
         BE    PERFORM                 YES
         CLI   0(R6),15                IS IT CTL AND RLD
         BE    PERFORM                 YES
         B     MAINLINE                NONE OF THESE, SKIP
PERFORM  TM    PROCESS,X'80'           WAS CSECT FOUND
         BZ    MISSCS                  NO, ERROR
         BASR  R9,R9                   PERFORM APPROPRIATE ROUTINE
         TM    PROCESS,X'40'           MODULE PROCESSING DONE
         BZ    MAINLINE                NO, GO READ AGAIN
         MVI   EOFSW,0                 SET END OF FILE SWITCH
         B     ENDINIT                 GO COMPLETE PROCESSING
         EJECT
****************************************************************
*                                                              *
* PROCESS LOAD MODULE CONTROL RECORDS. THESE RECORDS PRECEDE   *
* TEXT RECORDS, WHICH ARE READ AND PLACED IN STORAGE IN CONTIG-*
* UOUS LOCATIONS SO THAT THE TEXT FOR THE DESIRED CSECT WILL   *
* ALL BE IN STORAGE FOR THE REMAINDER OF DISASSEMBLY.          *
*                                                              *
****************************************************************
         SPACE 1
CNTLRECS ST    R9,CT9                  SAVE RETURN ADDR
         XR    R8,R8                   CLEAR WORK
         ICM   R8,B'0111',9(R6)        LKED ASGND @ OF TXT
         TM    0(R6),X'08'             RECORD PRECEDES LAST RECORD OF M
         BZ    CNCKTYP                 NO
         OI    PROCESS,X'40'           YES, SHOW PROCESSING COMPLETE
CNCKTYP  TM    0(R6),X'02'             CONTROL AND RLD
         BO    CNPASRLD                YES
         LA    R12,16(R6)              @ CESD ENTRY NBR
         B     CNCKESD                 CONTINUE
CNPASRLD LH    R12,6(R6)               GET RLD SECTION LENGTH
         LA    R12,16(R6,R12)          @ CESD ENTRY NBR
CNCKESD  LH    R11,4(R6)               LENGTH OF CONTROL INFO SECTION
         SRL   R11,2                   COMPUTE NBR CNTL ENTRIES
         XR    R10,R10                 OFFSET TO 1ST BYTE
         XR    R9,R9                   LENGTH OF TEXT
CNCKESD1 CLC   ESDID,0(R12)            THIS THE DESIRED ESD   FIX***
         BE    CNFNDIT                 YES
         AH    R10,2(R12)              MAINTAIN OFFSET TO 1ST TEXT BYTE
         LA    R12,4(R12)              TO NEXT CNTL ENTRY
         BCT   R11,CNCKESD1            LOOP THRU CNTL ENTRIES  FIX***
         B     READTEXT                GO READ FOLLOWING TEXT
CNFNDIT  LH    R9,2(R12)               GET TEXT LENGTH
READTEXT READ  DECB,SF,,(6),MF=E       READ FOLLOWING TEXT RECORD
         CHECK DECB                    AWAIT COMPLETION
         LTR   R9,R9                   DOES IT CONTAIN DESIRED TEXT
         BZ    CTXIT                   NO, SKIP IT
         S     R8,START                (-) OFFSET IN MODULE    FIX***
         AR    R8,R10                  ADD OFFSET OF PORTION IN RCD  **
*              R8 SHOULD NOW CONTAIN THE OFFSET WITHIN THE CSECT
*              THAT THIS BLOCK CONTAINS (TRICKY).
         A     R10,BUFAD               @ 1ST TEXT BYTE
***      S     R8,START    MOVED UP    RELATIVIZE TEXT ADDR    FIX***
         A     R8,TXTSTRT              @ PLACE TO MOVE TEXT
         LR    R11,R9                  COPY LENGTH TO MOVE
         MVCL  R8,R10                  MOVE TEXT TO STORAGE
CTXIT    L     R9,CT9                  GET RETURN ADDR
         BR    R9                      EXIT
         EJECT
****************************************************************
*                                                              *
* PROCESS RLD RECORDS. A TABLE OF RLD DATA IS BUILT WHICH WILL *
* LATER BE USED TO BUILD PROGRAM LABELS AND ADCONS.            *
*                                                              *
****************************************************************
         SPACE 1
RLDRECS  TM    0(R6),X'08'             LAST RECORD OF MODULE
         BZ    RLSV9                   NO
         OI    PROCESS,X'40'           SHOW PROCESSING COMPLETE
RLSV9    ST    R9,RL9                  SAVE RETURN ADDR
RLDSW    NOP   RLDST                   FIRST TIME SWITCH
         MVI   RLDSW+1,C'0'            RESET 1ST TIME SW
         MVC   PRT+15(20),=C'***** RLD INFO *****'
         MVI   PCC,C'-'                SKIP 3 LINES
         BAS   R9,PRINT                PRINT
         MVC   PRTLINE,RLDHDR          RLD HEADER
         BAS   R9,PRINT                PRINT RLD HEADER
RLDST    LH    R8,6(R6)                NBR BYTES OF RLD DATA
         LA    R6,16(R6)               @ 1ST BYTE OF RLD DATA
         AR    R8,R6                   END OF RLD DATA ADDR
         L     R7,CURRLD               @ NEXT RLD TBL ENTRY
         USING RLDTBLD,R7
         LH    R10,0(R6)               RELOCATION POINTER
         LH    R11,2(R6)               POSITION POINTER
         LA    R6,4(R6)                PASS POINTERS
RLDNXT   CLC   1(3,R6),START+1         RLD ADDR BELOW CSECT
         BL    RLDSTEP                 LOW, IGNORE
         CLC   1(3,R6),END+1           RLD ADDR ABOVE CSECT
         BH    RLDSTEP                 HIGH, IGNORE
         C     R7,ENDRLD               END OF RLD TBL
         BE    RLDFULL                 YES, ERROR
         STH   R10,RLDRP               SAVE RELOC PTR
         STH   R11,RLDPP               POS PTR
         PACK  RLDTYPE,0(1,R6)         INVERT FLAG BYTE
         NI    RLDTYPE,X'0F'           CLEAR HI-ORDER
         CLI   RLDTYPE,9               UNRESOLVED
         BNE   RLDMOVLN                NO
         MVI   RLDTYPE,8               YES, USE PREFERRED VALUE
RLDMOVLN MVC   RLDLEN,0(R6)            FLAG BYTE
         NI    RLDLEN,X'0F'            CLEAR HI-ORDER
         XR    R12,R12                 CLEAR WORK
         IC    R12,RLDLEN              PICK UP BYTE
         SRL   R12,2                   SHIFT OUT DIR, IND BITS
         LA    R12,1(R12)              ADD 1 = LENGTH
         STC   R12,RLDLEN              LENGTH CODE
         MVI   RLDDIR,C'+'             ASSUME POS RELOC
         TM    0(R6),2                 IS IT POSITIVE
         BZ    RLADMV                  YES
         MVI   RLDDIR,C'-'             NO, SHOW NEGATIVE
RLADMV   XR    R1,R1                   CLEAR WORK REG
         ICM   R1,B'0111',1(R6)        PICK UP ADDRESS
         S     R1,START                RELATIVIZE WITHIN CSECT
         STCM  R1,B'0111',RLDADDR      SAVE RELATIVE ADDRESS
         LA    R12,RLDRP               @ RELOC PTR
         BAS   R9,HEXPRT2              CONVERT
         MVC   PRT+6(4),PRTABL         RELOC PTR
         LA    R12,RLDPP               @ POS PTR
         BAS   R9,HEXPRT2              CONVERT
         MVC   PRT+14(4),PRTABL        POS PTR
         MVC   PRT+24(4),=C'ACON'      ASSUME A TYPE ADCON
         CLI   RLDTYPE,0               IS IT ADCON
         BE    RLDLN                   YES
         MVC   PRT+24(4),=C'VCON'      ASSUME VCON
         CLI   RLDTYPE,1               IS IT VCON
         BE    RLDLN                   YES
         MVC   PRT+22(6),=C'PRDISP'    ASSUME PSEUDO REG DISPL
         CLI   RLDTYPE,2               IS IT P.R. DISPL
         BE    RLDLN                   YES
         MVC   PRT+22(6),=C'PRCUM'     ASSUME PSEUDO REG CUMUL DISPL
         CLI   RLDTYPE,3               IS IT P.R. CUM DISPL
         BE    RLDLN                   YES
         MVC   PRT+21(10),=C'UNRESOLVED' ASSUME UNRESOLVED
         CLI   RLDTYPE,8               IS IT UNRESOLVED
         BE    RLDLN                   YES
         MVC   PRT+21(10),BLANX        CLEAR FIELD
         MVC   PRT+24(3),=C'??:'
         LA    R12,RLDTYPE             @ TYPE
         BAS   R9,HEXPRT1              CONVERT
         MVC   PRT+27(1),PRTABL+1      TYPE
RLDLN    MVC   PRT+35(1),RLDLEN        LENGTH
         OI    PRT+35,C'0'             CLEAR ZONE
         MVC   PRT+42(1),RLDDIR        RELOCATION DIRECTION
         LA    R12,RLDADDR             @ ADDRESS
         BAS   R9,HEXPRT3              CONVERT
         MVC   PRT+46(6),PRTABL        ADDRESS
         XC    RLDNAME(9),RLDNAME      CLEAR
         LH    R15,RLDRP               GET RELOCATION POINTER
         BCTR  R15,0                   DEDUCT 1
         LTR   R15,R15                 TEST DIFFERENCE
         BM    RLPRT                   NEG, ERROR
         MH    R15,SYMLEN              TIMES SYM TBL ENTRY LENG
         A     R15,SYMTBAD             @ ESD SYMBOL TBL ENTRY
         C     R15,CURRSYM             PAST END OF TABLE
         BH    RLPRT                   YES, ERROR
         USING SYMTBL,R15
         MVC   RLDNAME,EXTSYM          ESD SYMBOL TO RLD TBL ENTRY
         MVC   RLDESDTP,TYPSYM         ESD TYPE TO RLD ENTRY
         DROP  R15
         MVC   PRT+60(8),RLDNAME       NAME TO PRINT
         MVC   PRT+70(2),=C'LR'        ASSUME LR
         CLI   RLDESDTP,3              IS IT LR
         BE    RLPRT                   YES
         MVC   PRT+70(2),=C'SD'        ASSUME SD
         CLI   RLDESDTP,0              IS IT SD
         BE    RLPRT                   YES
         MVC   PRT+70(2),=C'ER'        ASSUME ER
         CLI   RLDESDTP,2              IS IT ER
         BE    RLPRT                   YES
         MVC   PRT+70(2),=C'PC'        ASSUME PC
         CLI   RLDESDTP,4              IS IT PC
         BE    RLPRT                   YES
         MVC   PRT+70(2),=C'PR'        ASSUME PR
         CLI   RLDESDTP,6              IS IT PR
         BE    RLPRT                   YES
         MVC   PRT+70(2),=C'CM'        ASSUME CM
         CLI   RLDESDTP,5              IS IT CM
         BE    RLPRT                   YES
         MVC   PRT+70(2),=C'WX'        ASSUME WX
         CLI   RLDESDTP,X'0A'          IS IT WX
         BE    RLPRT                   YES
         MVC   PRT+70(4),=C'NULL'      ASSUME NULL
         CLI   RLDESDTP,7              IS IT NULL
         BE    RLPRT                   YES
         MVC   PRT+70(6),=C'E/STAB'    ASSUME E/STAB
         CLI   RLDESDTP,X'0F'          IS IT E/STAB
         BE    RLPRT                   YES
         MVC   PRT+70(6),=C'??????'    UNKNOWN YPE
RLPRT    BAS   R9,PRINT                PRINT
         CLC   RLDNAME,CSECT           RLD NAME IS CSECT NAME
         BNE   GOODRLD                 NO
         CLC   RLDADDR,XZROS           RELATIVE OFFSET IS ZERO
         BE    RLDSTEP                 YES, IGNORE ENTRY
GOODRLD  LA    R7,L'RLDENT(R7)         TO NEXT TBL ENTRY
RLDSTEP  TM    0(R6),1                 NEXT ITEM HAS REL AND POS PTRS
         BO    RLSAME                  NO
         LH    R10,4(R6)               PICK UP NEW REL PTR
         LH    R11,6(R6)               PICK UP NEW POS PTR
         LA    R6,4(R6)                STEP OVER 4 BYTES
RLSAME   LA    R6,4(R6)                TO NEXT RLD ITEM
         CR    R6,R8                   END OF RLD DATA
         BL    RLDNXT                  NO
         MVI   0(R7),X'FF'             SET TBL END INDIC
         ST    R7,CURRLD               SET NEW CURRENT ADDRESS
         L     R9,RL9                  GET RETURN ADDR
         BR    R9                      EXIT
         DROP  R7
         EJECT
****************************************************************
*                                                              *
* PROCESS CONTROL AND RLD RECORDS. THESE RECORDS CONTAIN BOTH  *
* RLD AND CONTROL INFORMATION, AND ARE PROCESSED BY BOTH       *
* THE RLDRECS AND CNTLRECS ROUTINES.                           *
*                                                              *
****************************************************************
         SPACE 1
CTRLRECS ST    R9,CR9                  SAVE RETURN ADDR
         BAS   R9,RLDRECS              PROCESS RLD DATA
         L     R6,BUFAD                RESET BUFFER ADDRESS
         BAS   R9,CNTLRECS             PROCESS CONTROL DATA
         L     R9,CR9                  GET RETURN ADDR
         BR    R9                      EXIT
         SPACE 2
****************************************************************
*                                                              *
* PROCESS COMPOSITE ESD RECORDS. DATA FROM THESE RECORDS IS    *
* PLACED IN THE SYMBOL TABLE, AND IS USED TO CREATE PROGRAM    *
* ENTRY STATEMENTS, AND TO IDENTIFY THE NAMES OF EXTERNAL      *
* SYMBOLS USED BY THE PROGRAM.                                 *
*                                                              *
****************************************************************
         SPACE 1
CESDREC  ST    R9,CES9                 SAVE RETURN
         L     R7,CURRSYM              GET SYMBOL TBL ADDR
         USING SYMTBL,R7
         LH    R10,4(R6)               GET ESD ID OF 1ST ITEM
         LH    R8,6(R6)                NBR BYTES OF ESD DATA
         SRL   R8,4                    COMPUTE NBR ENTRIES
         LA    R6,8(R6)                STEP TO 1ST RECORD ESD ITEM
CESDNXT  C     R7,ENDSYM               END OF TABLE
         BNL   SYMFULL                 YES, ERROR
         MVC   EXTSYM,0(R6)            SYMBOL NAME
         MVC   TYPSYM,8(R6)            TYPE
         NI    TYPSYM,X'0F'            CLEAR BITS 0-3
         MVC   SYMIND,8(R6)            INDICATOR BYTE
         NI    SYMIND,X'0F'            CLEAR BITS 4-7
         TM    8(R6),X'14'             POSSIBLE ENTAB/SEGTAB
         BNO   CEMVAD                  NO
         TM    8(R6),X'03'             IS IT ENTAB/SEGTAB
         BNZ   CEMVAD                  NO
         MVC   TYPSYM(2),=X'0F00'      SHOW ENTAB/SEGTAB
CEMVAD   MVC   SYMADDR,9(R6)           ADDRESS OF SYMBOL
         MVC   SYMSEG,12(R6)           SEGMENT WHERE DEFINED
         MVC   SYMLENG,13(R6)          LENGTH OR LR ESD ID
         STCM  R10,B'0011',SYMESDID    ESD ID
         MVC   PRT+5(8),EXTSYM         SYMBOL NAME
         MVC   PRT+20(2),=C'SD'        ASSUME SD
         CLI   TYPSYM,0                IS IT SD
         BE    CEPIND                  YES
         MVC   PRT+20(2),=C'LR'        ASSUME LR
         CLI   TYPSYM,3                IS IT LR
         BE    CEPIND                  YES
         MVC   PRT+20(2),=C'ER'        ASSUME ER
         CLI   TYPSYM,2                IS IT ER
         BE    CEPIND                  YES
         MVC   PRT+20(2),=C'PC'        ASSUME PC
         CLI   TYPSYM,4                IS IT PC
         BE    CEPIND                  YES
         MVC   PRT+20(2),=C'PR'        ASSUME PR
         CLI   TYPSYM,6                IS IT PR
         BE    CEPIND                  YES
         MVC   PRT+20(2),=C'CM'        ASSUME CM
         CLI   TYPSYM,5                IS IT CM
         BE    CEPIND                  YES
         MVC   PRT+20(2),=C'WX'        ASSUME WX
         CLI   TYPSYM,X'0A'            IS IT WX
         BE    CEPIND                  YES
         MVC   PRT+19(4),=C'NULL'      ASSUME NULL
         CLI   TYPSYM,7                IS IT NULL
         BE    CEPIND                  YES
         MVC   PRT+18(6),=C'E/STAB'    ASSUME ENTAB/SEGTAB
         CLI   TYPSYM,X'0F'            IS IT ENTAB/SEGTAB
         BE    CEPIND                  YES
         MVC   PRT+18(4),=C' ??: '     UNIDENTIFIABLE TYPE
         LA    R12,TYPSYM              @ TYPE
         BAS   R9,HEXPRT1              CONVERT
         MVC   PRT+23(2),PRTABL        TYPE
CEPIND   LA    R12,SYMIND              @ INDICATOR
         BAS   R9,HEXPRT1              CONVERT
         MVC   PRT+27(1),PRTABL        INDICATOR
         LA    R12,SYMADDR             @ SYMBOL ADDR
         BAS   R9,HEXPRT3              CONVERT
         MVC   PRT+30(6),PRTABL        SYMBOL ADDR
         LA    R12,SYMSEG              @ SEGMENT NBR
         BAS   R9,HEXPRT1              CONVERT
         MVC   PRT+39(2),PRTABL        SEGMENT NBR
         CLI   TYPSYM,2                IS IT ER
         BE    CEESD                   YES
         CLI   TYPSYM,3                IS IT AN LR
         BNE   CENOTLR                 NO
         LA    R12,SYMLRID             @ LR ESD ID
         BAS   R9,HEXPRT2              CONVERT
         MVC   PRT+43(4),PRTABL        LR ESD ID
         B     CEESD                   CONTINUE
CENOTLR  LA    R12,SYMLENG             @ LENGTH
         BAS   R9,HEXPRT3              CONVERT
         MVC   PRT+49(6),PRTABL        SYMBOL LENGTH
CEESD    LA    R12,SYMESDID            @ ESD ID
         BAS   R9,HEXPRT2              CONVERT
         MVC   PRT+57(4),PRTABL        ESD ID
         TM    PROCESS,X'80'           FOUND CSECT
         BO    CESDPT                  YES
         CLI   TYPSYM,0                SD
         BE    CECKCSB                 YES
         CLI   TYPSYM,4                PC
         BNE   CESDPT                  NO
CECKCSB  CLC   CSECT,BLANX             ANY CSECT NAME ENTERED
         BNE   CECKNM                  YES
         MVC   CSECT,EXTSYM            NAME TO CSECT
         B     CSGOTCS                 CONTINUE
CECKNM   CLI   TYPSYM,4                PC
         BE    CESDPT                  YES
         CLC   CSECT,EXTSYM            FOUND DESIRED NAME
         BNE   CESDPT                  NO
         TM    PROCESS,X'80'           ALREADY FOUND CSECT
         BZ    CSGOTCS                 NO
         MVC   PRT+15(2),=C'??'        SHOW DUPL
         B     CESDPT                  CONTINUE
CSGOTCS  OI    PROCESS,X'80'           SHOW CSECT FOUND
         MVC   PRT+15(2),=C'**'        FLAG ON PRINTOUT
         MVC   ESDID,SYMESDID          SAVE ESD ID FOUND
         MVC   START+1,SYMADDR         SAVE CSECT START ADDR
         MVC   LENGTH+1(3),SYMLENG     SAVE CSECT LENGTH
         L     R1,LENGTH               PICK UP LENGTH
         A     R1,START                COMPUTE CSECT END ADDR
         ST    R1,END                  SAVE CSECT END ADDR
         L     R11,LENGTH              TEXT LENGTH
         LA    R11,256(R11)            ADD FOR SAFETY
         ST    R11,TXTLGTH             SAVE TEXT LENGTH            -EU-
         GETMAIN R,LV=(R11)            GET STORAGE FOR TEXT
         ST    R1,TXTSTRT              SAVE TEXT ADDRESS
         SH    R11,H256                DEDUCT SAFETY FACTOR
         AR    R1,R11                  TXT END ADDRESS
         ST    R1,TXTEND               SAVE TEXT END ADDRESS
CESDPT   BAS   R9,PRINT                PRINT
         LA    R7,L'SYMENT(R7)         TO NEXT TBL ENTRY LOCATION
         LA    R10,1(R10)              ADD 1 TO ESD COUNTER
         LA    R6,16(R6)               TO NEXT ESD ITEM IN INPUT
         BCT   R8,CESDNXT              LOOP THRU INPUT RECORD
         MVI   0(R7),X'FF'             SET END OF TABLE INDIC
         ST    R7,CURRSYM              SAVE NEXT TABLE ADDR
         L     R9,CES9                 GET RETURN ADDR
         BR    R9                      EXIT
         DROP  R7
         EJECT
****************************************************************
*                                                              *
* ISSUE BLDL FOR THE MAIN MODULE, AND PRINT MODULE RELATED INFO*
*                                                              *
****************************************************************
         SPACE 1
BLDL     ST    R9,BL9                  SAVE RETURN ADDR
ISSBLDL  L     R1,=A(SYSLIB)                                       -EU-
         BLDL  (1),BLDLIST             ISSUE BLDL
         LTR   R15,R15                 ANY ERRORS
         BNZ   MISSMEM                 YES
         LA    R1,MEMBER+35            END OF BASIC PORTION
         TM    ATTR2,X'10'             SSI PRESENT
         BZ    BLREFA1                 NO
         LA    R1,4(R1)                ADD FOR SSI
BLREFA1  TM    ALIASIND,X'80'          ALIAS
         BZ    BLREFA2                 NO
         LA    R1,11(R1)               ADD FOR ALIAS
         B     BLREFA3                 NO                          -EU-
BLREFA2  TM    ATTR2,X'10'             SSI PRESENT                 -EU-
         BZ    BLREFA3                 NO                          -EU-
         LA    R1,1(R1)                ADJUST TO HALF-WORD BOUNDARY-EU-
BLREFA3  TM    ATTR1A,X'04'            SCATTER FORMAT
         BZ    BLREFA4                 NO
         LA    R1,8(R1)                ADD FOR SCATTER
BLREFA4  MVC   AUTHLEN(2),0(R1)        AUTH LENGTH AND CODE
         TM    ATTR2,X'10'             SSI PRESENT
         BZ    BLCKALI                 NO
         LA    R1,MEMBER+35            END OF BASIC PORTION
         TM    ATTR1A,X'04'            SCATTER FORMAT
         BZ    BLSSI1                  NO
         TM    ALIASIND,X'80'          ALIAS
         BO    BLFMTED                 YES, NO REFORMAT NEEDED
         LA    R1,8(R1)                NO, STEP PAST SCATTER SECTION
         B     BLSSI2                  GO MOVE SSI                 -EU-
BLSSI1   TM    ALIASIND,X'80'          ALIAS                       -EU-
         BZ    BLSSI2                  NO                          -EU-
         LA    R1,10(R1)               YES, STEP PAST ALIAS SECTION-EU-
BLSSI2   LA    R1,1(R1)                ADJUST TO HALF-WORD BOUNDARY-EU-
         MVC   SSI,0(R1)               MOVE SSI DATA
BLCKALI  TM    ALIASIND,X'80'          ALIAS
         BO    BLASC                   YES
         B     BLFMTED                 FINISHED
BLASC    TM    ATTR1A,X'04'            SCATTER FORMAT
         BO    BLFMTED                 YES, NO REFORMAT NEEDED
         MVC   ALMEM,MEMBER+38         MOVE ALIAS MEMBER
         MVC   ALEPA(3),MEMBER+35      YES, MOVE ALIAS DATA
BLFMTED  MVC   PRT(26),=C'DIRECTORY INFO FOR MODULE '
         MVC   PRT+27(8),MEMBER        MEMBER NAME TO PRINT
         BAS   R9,PRINT                PRINT
         MVC   PRT+10(14),=C'TTR OF MODULE='
         LA    R12,TTRMOD              @ TTR
         BAS   R9,HEXPRT3              CONVERT
         MVC   PRT+24(6),PRTABL        TTR TO PRINT
         BAS   R9,PRINT                PRINT
         MVC   PRT+10(18),=C'CONCATENATION NBR='
         LA    R12,CCAT                @ CONCATENATION NBR
         BAS   R9,HEXPRT1              CONVERT
         MVC   PRT+28(2),PRTABL        CONCATENATION NBR
         BAS   R9,PRINT                PRINT
         MVC   PRT+10(12),=C'ALIAS INDIC='
         LA    R12,ALIASIND            @ ALIAS INDICATOR
         BAS   R9,HEXPRT1              CONVERT
         MVC   PRT+22(2),PRTABL        ALIAS INDICATOR
         TM    ALIASIND,X'80'          IS IT AN ALIAS
         BZ    BLALPRT                 NO
         MVC   PRT+50(13),=C'*** ALIAS ***'
BLALPRT  BAS   R9,PRINT                PRINT
         MVC   PRT+10(18),=C'TTR, 1ST TXT RECD='
         LA    R12,TTR1TXT             @ TTR
         BAS   R9,HEXPRT3              CONVERT
         MVC   PRT+28(6),PRTABL        TTR OF 1ST TXT BLOCK
         BAS   R9,PRINT                PRINT
         MVC   PRT+10(25),=C'TTR OF NOTE/SCATTER LIST='
         LA    R12,TTRNS               @ TTR
         BAS   R9,HEXPRT3              CONVERT
         MVC   PRT+35(6),PRTABL        TTR OF NOTE/SCATTER
         BAS   R9,PRINT                PRINT
         MVC   PRT+10(17),=C'NBR NOTE ENTRIES='
         LA    R12,NNOTE               @ NBR NOTES
         BAS   R9,HEXPRT1              CONVERT
         MVC   PRT+27(2),PRTABL        NBR NOTE ENTRIES
         BAS   R9,PRINT                PRINT
         MVC   PRT+10(13),=C'ATTRIBUTES 1='
         LA    R12,ATTR1A              @ ATTRIBUTES
         BAS   R9,HEXPRT2              CONVERT
         MVC   PRT+23(4),PRTABL        ATTRIBUTES 1
         TM    ATTR1A,X'80'            RENT
         BZ    BLAT1A                  NO
         MVC   PRT+30(4),=C'RENT'
BLAT1A   TM    ATTR1A,X'40'            REUS
         BZ    BLAT1B                  NO
         MVC   PRT+35(4),=C'REUS'
BLAT1B   TM    ATTR1A,X'20'            OVLY
         BZ    BLAT1C                  NO
         MVC   PRT+40(4),=C'OVLY'
BLAT1C   TM    ATTR1A,X'10'            TEST
         BZ    BLAT1D                  NO
         MVC   PRT+45(4),=C'TEST'
BLAT1D   TM    ATTR1B,X'08'            OL
         BZ    BLAT1E                  NO
         MVC   PRT+50(2),=C'OL'
BLAT1E   TM    ATTR1A,X'04'            SCTR
         BZ    BLAT1F                  NO
         MVC   PRT+53(4),=C'SCTR'
BLAT1F   TM    ATTR1A,X'02'            EXEC
         BZ    BLAT1G                  NO
         MVC   PRT+58(4),=C'EXEC'
BLAT1G   TM    ATTR1B,X'01'            REFR
         BZ    BLAT1PRT                NO
         MVC   PRT+63(4),=C'REFR'
BLAT1PRT BAS   R9,PRINT                PRINT
         MVC   PRT+10(13),=C'TOTAL LENGTH='
         LA    R12,TOTVIRT             @ TOTAL LENGTH
         BAS   R9,HEXPRT3              CONVERT
         MVC   PRT+23(6),PRTABL        TOTAL LENGTH OF MODULE
         BAS   R9,PRINT                PRINT
         MVC   PRT+10(23),=C'LENGTH OF 1ST TXT RECD='
         LA    R12,LENG1               @ 1ST TXT LENG
         BAS   R9,HEXPRT2              CONVERT
         MVC   PRT+33(4),PRTABL        LENGTH OF 1ST TXT BLOCK
         BAS   R9,PRINT                PRINT
         MVC   PRT+10(11),=C'E. P. ADDR='
         LA    R12,LKEPA               @ E.P. ADDR
         BAS   R9,HEXPRT3              CONVERT
         MVC   PRT+21(6),PRTABL        E.P. ADDR
         BAS   R9,PRINT                PRINT
         MVC   PRT+10(13),=C'ATTRIBUTES 2='
         LA    R12,ATTR2               @ ATTRIBUTES 2
         BAS   R9,HEXPRT1              CONVERT
         MVC   PRT+23(2),PRTABL        ATTRIBUTES 2
         TM    ATTR2,X'20'             PAGE ALIGNMENT
         BZ    BLAT3A                  NO
         MVC   PRT+30(16),=C'PAGE ALIGN REQRD'
BLAT3A   TM    ATTR2,X'10'             SSI PRESENT
         BZ    BLAT3PRT                NO
         MVC   PRT+50(11),=C'SSI PRESENT'
BLAT3PRT BAS   R9,PRINT                PRINT
         TM    ATTR1A,X'04'            SCATTER FORMAT
         BZ    BLFAL                   NO
         MVC   PRT+10(8),=C'SCTRLEN='
         LA    R12,SCTRLEN             @ SCATTER LIST LENGTH
         BAS   R9,HEXPRT2              CONVERT
         MVC   PRT+18(4),PRTABL        SCATTER LIST LENGTH
         BAS   R9,PRINT                PRINT
         MVC   PRT+10(18),=C'TRANSLATE TBL LEN='
         LA    R12,TTLEN               @ TRANS TBL LEN
         BAS   R9,HEXPRT2              CONVERT
         MVC   PRT+28(4),PRTABL        TRANSLATION TABLE LENGTH
         BAS   R9,PRINT                PRINT
         MVC   PRT+10(18),=C'ESD ID OF 1ST TXT='
         LA    R12,SCESDID             @ ESD ID
         BAS   R9,HEXPRT2              CONVERT
         MVC   PRT+28(4),PRTABL        ESD ID OF 1ST TXT
         BAS   R9,PRINT                PRINT
         MVC   PRT+10(23),=C'ESD ID CONTAINING E.P.='
         LA    R12,SCEPESD             @ ESD ID
         BAS   R9,HEXPRT2              CONVERT
         MVC   PRT+33(4),PRTABL        @ ESD ID OF CSECT CONTAINING E.P
         BAS   R9,PRINT                PRINT
BLFAL    TM    ALIASIND,X'80'          ALIAS
         BZ    BLFSSI                  NO
         MVC   PRT+10(28),=C'E.P. ADDRESS OF THIS MEMBER='
         LA    R12,ALEPA               @ E.P. ADDR
         BAS   R9,HEXPRT3              CONVERT
         MVC   PRT+38(6),PRTABL        E.P. ADDR
         BAS   R9,PRINT
         MVC   PRT+10(17),=C'REAL MEMBER NAME='
         MVC   PRT+27(8),ALMEM         REAL MEMBER NAME
         BAS   R9,PRINT
BLFSSI   TM    ATTR2,X'10'             ANY SSI INFO
         BZ    BLAUTHC                 NO
         MVC   PRT+10(9),=C'SSI INFO='
         LA    R12,SSI                 @ SSI INFO
         BAS   R9,HEXPRT4              CONVERT
         MVC   PRT+19(8),PRTABL        SSI INFO
         BAS   R9,PRINT                PRINT
BLAUTHC  MVC   PRT+10(10),=C'AUTH CODE='
         LA    R12,AUTHCOD             @ AUTH CODE
         BAS   R9,HEXPRT1              CONVERT
         MVC   PRT+20(2),PRTABL        AUTH CODE
         BAS   R9,PRINT                PRINT
         TM    ALIASIND,X'80'          ALIAS
         BZ    BLXIT                   NO
         MVC   PRT+5(38),=C'***** REAL MEMBER DIRECTORY INFO *****'
         MVI   PCC,C'0'                DOUBLE SPACE
         BAS   R9,PRINT                PRINT
         MVC   MEMBER,ALMEM            REAL MEMBER NAME TO LIST
         B     ISSBLDL                 DO OVER FOR REAL MEMBER
BLXIT    L     R9,BL9                  GET RETURN ADDR
         BR    R9                      EXIT
         EJECT
****************************************************************
*                                                              *
* CREATE PRINTABLE HEX FROM HEX. ON ENTRY, REG 12 CONTAINS THE *
* ADDRESS OF THE DATA TO BE REFORMATTED. ENTRY POINT USED      *
* DETERMINES THE SIZE OF THE FIELD. OUTPUT DATA IS PLACED IN   *
* THE PRTABL FIELD, 2 CHARACTERS PER BYTE.                     *
*                                                              *
****************************************************************
         SPACE 1
HEXPRT1  UNPK  PRTABL(3),0(2,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT2  UNPK  PRTABL(5),0(3,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT3  UNPK  PRTABL(7),0(4,R12)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT4  UNPK  PRTABL(9),0(5,R12)      UNPACK HEX
HEXCLTR  MVZ   PRTABL(8),XZROS         CLEAR FOR TRANSLATE
         TR    PRTABL(8),TRTBL         MAKE PRINTABLE
         BR    R9                      EXIT
         SPACE 2
****************************************************************
*                                                              *
* PRINT USING SYSPRINT.                                        *
*                                                              *
****************************************************************
         SPACE 1
PRINT    L     R2,PRINTDCB                                         -EU-
         USING IHADCB,R2                                           -EU-
         TM    DCBOFLGS,DCBOFOPN       IS SYSPRINT OPEN            -EU-
         BNO   CLRPRT                  NO
         PUT   (R2),PRTLINE            WRITE PRINT LINE            -EU-
         DROP  R2                                                  -EU-
CLRPRT   MVC   PRT,BLANX               CLEAR PRINT LINE
         AP    LINECT,P1               INCR LINE COUNTER
         CLI   PCC,C' '                SINGLE SPACED
         BE    SETSGL                  YES
         AP    LINECT,P1               INCR LINE COUNTER
         CLI   PCC,C'0'                DOUBLE SPACED
         BE    SETSGL                  YES
         AP    LINECT,P1               INCR LINE COUNTER
         CLI   PCC,C'-'                TRIPLE SPACED
         BE    SETSGL                  YES
         ZAP   LINECT,P0               NO, MUST BE NEW PAGE
SETSGL   MVI   PCC,C' '                SET SINGLE SPACING
         CP    LINECT,P58              PAST END OF PAGE
         BH    NEWPAGE                 YES
         BR    R9                      EXIT
NEWPAGE  MVI   PCC,C'1'                SET SKIP TO HOF
         ZAP   LINECT,P0               RESET LINE COUNTER
         BR    R9                      EXIT
         EJECT
****************************************************************
*                                                              *
* PROCESS THE CONTROL CARD CONTAINING MODULE NAME AND CSECT.   *
* THIS MUST BE THE FIRST CARD IN THE SYSIN DECK.               *
*                                                              *
****************************************************************
         SPACE 1
GETCTL   L     R1,INDCB                                            -EU-
         GET   (1)                     READ THE CONTROL CARD       -EU-
         LA    R12,72                  LENGTH OF CONTROL CARD
         LA    R11,8                   MAX LENGTH OF MEMBER NAME
         LA    R10,MEMBER              @ MEMBER NAME FIELD
CKBLK1   CLI   0(R1),C' '              CONTROL BYTE IS BLANK
         BNE   GCMEMOV                 NO, GO MOVE MEMBER NAME
         LA    R1,0(R1)                TO NEXT CONTROL BYTE
         BCT   R12,CKBLK1              SUBTRACT 1 FROM REMAINING LENGTH
         B     GCEND                   ALL BLANKS, EXIT
GCMEMOV  MVC   0(1,R10),0(R1)          CONTROL BYTE TO MEMBER NAME
         LA    R1,1(R1)                TO NEXT CONTROL BYTE
         BCTR  R12,0                   SUBTRACT 1 FROM LENGTH
         LA    R10,1(R10)              TO NEXT NAME BYTE
         BCTR  R11,0                   SUBTRACT 1 FROM LENGTH
         CLI   0(R1),C' '              GOT A BLANK
         BE    GCSETUP2                YES
         CLI   0(R1),C','              GOT A COMMA
         BE    GCSETUP2                YES
         LTR   R12,R12                 END OF CONTROL DATA
         BE    GCEND                   YES
         LTR   R11,R11                 NAME FULL
         BNZ   GCMEMOV                 NO, CONTINUE
         B     NAMEOV8                 YES, NAME TOO LONG
GCSETUP2 LA    R11,8                   CSECT NAME MAX LENGTH
         LA    R10,CSECT               @ CSECT NAME FIELD
GCSTEP2  LA    R1,1(R1)                STEP PAST BLANK
         BCT   R12,GCHKBK2             CHECK NEXT FOR BLANK
         B     GCEND                   END OF SCAN
GCHKBK2  CLI   0(R1),C' '              CONTROL DATA IS BLANK
         BE    GCSTEP2                 YES
GCCSMOV  MVC   0(1,R10),0(R1)          CONTROL BYTE TO CSECT NAME
         LA    R1,1(R1)                TO NEXT CONTROL BYTE
         LA    R10,1(R10)              TO NEXT NAME BYTE
         BCTR  R12,0                   DEDUCT 1 FROM CONTROL LENGTH
         BCTR  R11,0                   DEDUCT 1 FROM NAME LENGTH
         LTR   R12,R12                 ANY CONTROL BYTES LEFT
         BZ    GCEND                   NO
         CLI   0(R1),C' '              NEXT CONTROL BYTE BLANK
         BE    GCEND                   YES
         LTR   R11,R11                 ANY NAME BYTES LEFT
         BNZ   GCCSMOV                 YES, LOOP
         B     NAMEOV8                 NAME TOO LONG, ERROR
GCEND    CLC   MEMBER,BLANX            ANY MEMBER NAME FOUND
         BE    NOMBR                   NO
         BR    R9                      EXIT
         EJECT
****************************************************************
*                                                              *
* MISCELLANEOUS ERROR MESSAGES.                                *
*                                                              *
****************************************************************
         SPACE 1
NOCTL    MVC   PRT(L'NOCNTRL),NOCNTRL  NO CONTROL INFO MESSAGE
         B     ERREND                  GO PRINT
NAMEOV8  MVC   PRT(L'OVER8),OVER8      NAME OVER 8 MESSAGE
         B     ERREND                  GO PRINT
NOMBR    MVC   PRT(L'NOMEM),NOMEM      MISSING MEMBER NAME MESSAGE
         B     ERREND                  GO PRINT
MISSMEM  MVC   PRT(L'INVMEM),INVMEM    MEMBER NOT IN PDS MESSAGE
         B     ERREND                  GO PRINT
MISSCS   MVC   PRT(L'INVCSECT),INVCSECT CSECT NOT IN MEMBER MESSAGE
         B     ERREND                  GO PRINT
SYMFULL  MVC   PRT(L'FULLSYM),FULLSYM  FULL SYM TBL MSG
         B     ERREND                  GO PRINT
RLDFULL  MVC   PRT(L'FULLRLD),FULLRLD  RLD TBL FULL MSDG
         B     ERREND                  GO PRINT
ERREND   BAS   R9,PRINT                GO PRINT MESSAGE
         ABEND 777,DUMP                ABEND
         SPACE 2
****************************************************************
*                                                              *
* COUNT THE ENTRIES IN THE ESD TABLE WHICH WILL RESULT IN      *
* ENTRIES IN THE LABEL TABLE.                                  *
*                                                              *
****************************************************************
         SPACE 1
ENDINIT  L     R6,SYMTBAD              GET @ ESD TABLE
         USING SYMTBL,R6
         LA    R7,4                    INITIAL LABEL COUNT VALUE
SYMCNT   CLI   0(R6),X'FF'             END OF ESD TBL
         BE    RLDCNT                  YES
         CLI   TYPSYM,3                IS ESD AN LR ENTRY
         BNE   SCSTP                   NO, IGNORE
         CLC   SYMADDR,START+1         ADDR BELOW DESIRED CSECT
         BL    SCSTP                   YES, IGNORE
         CLC   SYMADDR,END+1           ADDR ABOVE DESIRED CSECT
         BH    SCSTP                   YES, IGNORE
         LA    R7,1(R7)                ADD TO LABEL COUNT
         MVC   SYMLENG,=C'***'         FLAG AS USABLE
SCSTP    LA    R6,L'SYMENT(R6)         TO NEXT ESD ENTRY
         B     SYMCNT
         DROP  R6
         EJECT
****************************************************************
*                                                              *
* COUNT THE ENTRIES IN THE RLD TABLE WHICH WILL RESULT IN      *
* ENTRIES IN THE LABEL TABLE.                                  *
*                                                              *
****************************************************************
         SPACE 1
RLDCNT   L     R6,RLDTBL               GET RLD TBL ADDR
         USING RLDTBLD,R6
RLDCEND  CLI   0(R6),X'FF'             END OF RLD TABLE
         BE    LBLGET                  YES
         CLC   RLDPP,ESDID             ESDID SAME AS DESIRED CSECT -EU-
         BNE   RLDC1                   NO, EXTRN REF
         LA    R7,1(R7)                ADD 1 TO LABEL COUNT
RLDC1    LA    R7,1(R7)                ADD 1 TO LABEL COUNT
         LA    R6,L'RLDENT(R6)         TO NEXT RLD ENTRY
         B     RLDCEND                 LOOP THRU RLD TBL
         DROP  R6
LBLGET   MH    R7,LBLLGTH              COMPUTE LABEL TABLE SIZE
         L     R1,LENGTH               GET CSECT LENGTH
         SRL   R1,2                    DIVIDE BY 4
         MH    R1,LBLLGTH              TIMES LABEL ENTRY LENGTH
         AR    R7,R1                   TOTAL LABEL TABLE LENGTH
         ST    R7,LBLSLG               SAVE LABEL TBL LENGTH       -EU-
         EJECT
****************************************************************
*                                                              *
* CREATE INITIAL ENTRIES IN THE LABEL TABLE USING DATA FROM    *
* THE ESD AND RLD TABLES.                                      *
*                                                              *
****************************************************************
         SPACE 1
         GETMAIN R,LV=(R7)             GET LABEL TBL STORAGE       -EU-
         ST    R1,LBLTBL               SAVE LABEL TBL ADDR
         ST    R1,CURRLBL              SAVE CURRENT LABEL ADDR
         AR    R1,R7                   COMPUTE LABEL TBL END ADDR
         ST    R1,ENDLBL               SAVE END OF LBL TBL ADDR
         L     R6,LBLTBL               GET @ LABEL TABLE
         USING LABELD,R6
         L     R7,SYMTBAD              GET ESD TBL ADDR
         USING SYMTBL,R7
         CLC   LKEPA,XZROS             E.P. ADDR ZERO
         BE    LRENTS                  YES
         XR    R1,R1                   CLEAR WORK
         ICM   R1,B'0111',LKEPA        PICK UP E.P. ADDR
         S     R1,START                RELATIVIZE IN CSECT
         BM    LRENTS                  NEG, ERROR
         STCM  R1,B'0111',LBLADR       SAVE OFFSET
         MVI   LBLTYP,C'L'             SET LABEL TYPE IN ENTRY
         LA    R12,LBLADR              POINT TO OFFSET
         BAS   R9,HEXPRT3              CONVERT TO PRINTABLE
         MVI   LBLNAME,C'A'            1ST CHAR OF LABEL IS 'A'
         MVC   LBLNAME+1(6),PRTABL     END OF LABEL IS OFFSET
         LA    R6,L'LABEL(R6)          TO NEXT LABEL ENTRY
         ST    R6,CURRLBL              SAVE IT'S ADDRESS
LRENTS   CLI   0(R7),X'FF'             END OF ESD TBL
         BE    RLDLBLS                 YES
         CLC   SYMLENG,=C'***'         THIS DESIRED LR ENTRY
         BE    GOTLR                   YES
LRESTP   LA    R7,L'SYMENT(R7)         TO NEXT ESD ENTRY
         B     LRENTS                  LOOP THRU ESD TBL
GOTLR    XR    R12,R12                 CLEAR WORK REG
         ICM   R12,B'0111',SYMADDR     GET SYMBOL ADDR
         S     R12,START               RELATIVIZE IN CSECT
         STCM  R12,B'0111',LBLADR      SAVE RELATIVE ADDR
         MVC   LBLNAME,EXTSYM          SYMBOL NAME TO OUTPUT
         MVI   LBLTYP,C'L'             SHOW LABEL ENTRY
         LA    R6,L'LABEL(R6)          TO NEXT LABEL ENTRY
         ST    R6,CURRLBL              SAVE NEXT LABEL ENTRY ADDR
         B     LRESTP                  CONTINUE ESD PROCESSING
         DROP  R7
RLDLBLS  L     R7,RLDTBL               GET RLD TBL ADDR
         USING RLDTBLD,R7
RLDLBND  CLI   0(R7),X'FF'             END OF RLD TABLE
         BE    PHASE1                  YES
         CLC   RLDRP,ESDID             RLD ESDID = DESIRED CSECT ESDID
         BE    INTREFS                 YES, INTERNAL ADCON
         CLC   RLDPP,ESDID             RLD ESDID = CSECT ESDID     -EU-
         BE    ACONLBL                 YES, CSECT ADCON            -EU-
         CLI   RLDTYPE,1               VCON
         BE    EXTREFS                 YES
         CLI   RLDTYPE,8               IS IT UNRESOLVED
         BE    EXTREFS                 YES
RLLSTP   LA    R7,L'RLDENT(R7)         TO NEXT RLD ENTRY
         B     RLDLBND                 LOOP THRU RLD TABLE
EXTREFS  CLI   RLDESDTP,X'0A'          W-CON
         BNE   VCONLBL                 NO, BUILD V-CON
         MVI   LBLTYP,C'W'             SHOW W-CON
         B     FXTLBL                  CONTINUE LABEL ENTRY FORMAT
ACONLBL  CLI   RLDTYPE,0               A-CON                       -EU-
         BNE   RLLSTP                  NO, IGNORE                  -EU-
VCONLBL  MVI   LBLTYP,C'V'             SHOW V-CON
FXTLBL   MVC   LBLNAME,RLDNAME         NAME TO LABEL ENTRY
FINLBL   MVC   LBLADR,RLDADDR          ADDRESS TO LABEL ENTRY
         MVC   LBLLEN,RLDLEN           LENGTH TO LABEL ENTRY
         LA    R6,L'LABEL(R6)          TO NEXT LABEL TBL ENTRY
         ST    R6,CURRLBL              SAVE CURRENT LABEL TBL ADDR
         B     RLLSTP                  CONTINUE LABEL TABLE BUILD
INTREFS  CLI   RLDTYPE,0               A-CON
         BNE   RLLSTP                  NO, IGNORE
         MVI   LBLTYP,C'L'             SHOW LABEL ENTRY TYPE
         XR    R12,R12                 CLEAR WORK REG
         ICM   R12,B'0111',RLDADDR     GET RLD ADDR
         A     R12,TXTSTRT             FIND LOC IN TEXT
         MVC   LBLADR,1(R12)           MOVE TO LABEL ENTRY
         CLI   RLDLEN,4                ADCON IS 4-BYTES
         BE    INTGOTL                 YES
         MVC   LBLADR,0(R12)           TEXT TO LABEL ENTRY
         CLI   RLDLEN,3                ADCON IS 3-BYTES
         BE    INTGOTL                 YES
         MVC   LBLADR+1(2),0(R12)      TEXT TO LABEL ENTRY
         MVI   LBLADR,0                CLEAR 1ST BYTE
         CLI   RLDLEN,2                ADCON IS 2-BYTES
         BE    INTGOTL                 YES
         XC    LBLADR,LBLADR           CLEAR LABEL ENTRY ADDR
         MVC   LBLADR+2(1),0(R12)      TEXT TO LABEL ENTRY
INTGOTL  XR    R12,R12                 CLEAR WORK
         ICM   R12,B'0111',LBLADR      GET ADDRESS
         S     R12,START               RELATIVIZE IN CSECT
         BM    RLLSTP                  NEGATIVE, IGNORE
         STCM  R12,B'0111',LBLADR      STORE RELATIVE ADDRESS
         LA    R12,LBLADR              POINT TO ADDRESS
         BAS   R9,HEXPRT3              CONVERT TO PRINTABLE
         MVI   LBLNAME,C'A'            SET LABEL ENTRY TYPE
         MVC   LBLNAME+1(6),PRTABL     LOW ORDER NAME POSITIONS
         MVI   LBLNAME+7,C' '          CLEAR LAST NAME BYTE
         MVC   L'LABEL(L'LABEL,R6),0(R6) COPY THIS ENTRY TO NEXT
         MVI   LBLLEN,0                SET LENGTH = 0
         LA    R6,L'LABEL(R6)          STEP TO NEXT
         MVI   LBLTYP,C'A'             SHOW TYPE
         B     FINLBL                  FINISH LABEL
         DROP  R6
         DROP  R7
         EJECT
****************************************************************
*                                                              *
* LOAD AND EXECUTE PHASE 1: DISASM1                            *
*                                                              *
****************************************************************
         SPACE 1
PHASE1   MVC   0(3,R6),HIVAL           SET END OF LABEL TABLE  FIX***
         L     R1,=A(LOADLIB)                                      -EU-
         USING IHADCB,R1                                           -EU-
         TM    DCBOFLGS,DCBOFOPN       LOADLIB DD CARD ENTERED     -EU-
         BO    EXEC1                   YES                         -EU-
         DROP  R1                                                  -EU-
         XR    R1,R1                   NO                          -EU-
EXEC1    LOAD  EP=DISASM1,DCB=(1)      LOAD PHASE1                 -EU-
         LR    R15,R0                  COPY E.P. ADDRESS
         LA    R1,=A(COMMPARM)         @ PARAMETER LIST
         BASR  R14,R15                 LINK TO PHASE1
         DELETE EP=DISASM1             DELETE AFTER USE
         CLI   USERR,0                 ANY ERRORS
         BNE   CLOSES                  YES, STOP THE RUN
         SPACE 2
****************************************************************
*                                                              *
* PRINT THE LABEL TABLE AFTER PHASE 1 COMPLETION.              *
*                                                              *
****************************************************************
         SPACE 1
         MVC   PRTLINE,PH1LBL          HEADER 1
         BAS   R9,PRINT                PRINT IT
         MVC   PRTLINE,PH1HDR          HEADER 2
         BAS   R9,PRINT                PRINT IT
         L     R6,LBLTBL               GET LABEL TABLE ADDR
         USING LABELD,R6
LPLOOP   LA    R8,PRT                  @ FIRST PRINT LABEL         -EU-
         LA    R7,4                    4 LABELS PER LINE           -EU-
LPTEST   C     R6,CURRLBL              END OF TABLE       FIX****
         BNL   LPEND                   YES                FIX****  -EU-
         LA    R12,LBLADR              @ LABEL ADDRESS
         BAS   R9,HEXPRT3              CONVERT
         MVC   0(6,R8),PRTABL          ADDRESS TO PRINT            -EU-
         MVC   9(1,R8),LBLTYP          TYPE TO PRINT               -EU-
         MVC   12(8,R8),LBLNAME        SYMBOL TO PRINT             -EU-
         CLI   LBLLEN,0                ANY LENGTH
         BE    LTPPRT                  NO
         LA    R12,LBLLEN              GET @ LENGTH
         BAS   R9,HEXPRT1              CONVERT
         MVC   22(2,R8),PRTABL         LENGTH TO PRINT             -EU-
LTPPRT   LA    R6,L'LABEL(R6)          TO NEXT ENTRY               -EU-
         LA    R8,L'LPLEL(R8)          TO NEXT PRINT LOC           -EU-
         BCT   R7,LPTEST               LOOP IF MORE                -EU-
         BAS   R9,PRINT                PRINT TBL ENTRIES           -EU-
         B     LPLOOP                  LOOP THRU TABLE             -EU-
LPEND    CLI   PRT,C' '                LAST LINE TO BE PRINTED     -EU-
         BE    FREESTRG                NO                          -EU-
         BAS   R9,PRINT                PRINT LAST TBL ENTRIES      -EU-
FREESTRG L     R12,RLDTBL              @ RLD TABLE
         L     R0,RLDLGTH              RLD TABLE LENGTH            -EU-
         FREEMAIN R,A=(R12),LV=(0)     FREE RLD TABLE              -EU-
         SPACE 2
****************************************************************
*                                                              *
* PRINT THE TEXT FOR THE CSECT TO BE DISASSEMBLED.             *
*                                                              *
****************************************************************
         SPACE 1
         MVI   PCC,C'1'                SET SKIP TO HEAD
         MVC   PRT+50(19),=C'***** T E X T *****'
         BAS   R9,PRINT                PRINT TEXT HEADER
         MVI   PCC,C'0'                SET DOUBLE SPACING
         L     R11,TXTSTRT             GET TEXT START ADDRESS
PNEXLIN  LA    R10,2                   GROUPS PER LINE
         LA    R12,POFSET+1            @ OFFSET
         BAS   R9,HEXPRT3              CONVERT
         MVC   PRT(6),PRTABL           OFFSET TO PRINT
         MVC   PRT+85(32),0(R11)       TEXT TO PRINT
         L     R8,=A(PRTCHAR)                                      -EU-
         TR    PRT+85(32),0(R8)        TRANSLATE TO PRINTABLE      -EU-
         LA    R8,PRT+9                @ 1ST PRINT WORD
         LA    R7,4                    4 WORDS PER GROUP
PGRP     LA    R12,0(R11)              @ TEXT WORD
         BAS   R9,HEXPRT4              CONVERT
         MVC   0(8,R8),PRTABL          TEXT TO PRINT WORD
         LA    R11,4(R11)              TO NEXT TEXT WORD
         LA    R8,9(R8)                TO NEXT PRINT LOC
         BCT   R7,PGRP                 DO 4 TIMES
         LA    R8,2(R8)                SPACE BETWEEN GROUPS
         LA    R7,4                    FOR 2ND GROUP
         BCT   R10,PGRP                DO 4 MORE TIMES
         BAS   R9,PRINT                PRINT THE LINE
         L     R9,POFSET               GET OFFSET
         LA    R9,32(R9)               ADD 32 BYTES
         ST    R9,POFSET               UPDATE OFFSET
         C     R11,TXTEND              END OF TEXT
         BL    PNEXLIN                 NO, CONTINUE
         MVI   PCC,C'1'                SET SKIP TO HEAD
         MVC   WORKREC,BLANX           CLEAR OUTPUT RECORD
         MVC   NAME,CSECT              CSECT NAME
         EJECT
****************************************************************
*                                                              *
* CREATE THE INITIAL CSECT INSTRUCTION, AND ANY ENTRY STATE-   *
* MENTS WHICH MAY BE INDICATED BY ESD TABLE ENTRIES.           *
*                                                              *
****************************************************************
         SPACE 1
         MVC   MNEMONIC,=C'CSECT'      SET MNEMONIC
         BAS   R9,WRTOUT               WRITE OUTPUT RECORD
         BAS   R9,PRINT                AND PRINT IT
         L     R7,SYMTBAD              GET ESD TBL ADDR
         USING SYMTBL,R7
LREFSS   CLI   0(R7),X'FF'             END OF ESD TBL
         BE    CKLDLB                  YES
         CLC   SYMLENG,=C'***'         THIS DESIRED LR ENTRY
         BE    MAKEXT                  YES
ESDTSTP  LA    R7,L'SYMENT(R7)         TO NEXT ESD ENTRY
         B     LREFSS                  LOOP THRU ESD TBL
MAKEXT   MVC   MNEMONIC,=C'ENTRY'      MNEMONIC IS ENTRY
         MVC   OPNDS(8),EXTSYM         SYMBOL TO OPERAND
         BAS   R9,WRTOUT               WRITE OUTPUT RECORD
         BAS   R9,PRINT                AND PRINT IT
         B     ESDTSTP                 CONTINUE ESD PROCESSING
         DROP  R7
         DROP  R6
CKLDLB   L     R12,SYMTBAD             @ ESD SYMBOL TABLE
         L     R0,SYMLGTH              SYMBOL TABLE STORAGE LENGTH -EU-
         FREEMAIN R,A=(R12),LV=(0)     FREE SYMBOL TABLE           -EU-
         SPACE 2
****************************************************************
*                                                              *
* LOAD AND EXECUTE PHASE 2: DISASM2                            *
*                                                              *
****************************************************************
         SPACE 1
         L     R1,=A(LOADLIB)                                      -EU-
         USING IHADCB,R1                                           -EU-
         TM    DCBOFLGS,DCBOFOPN       LOADLIB DD CARD SUPPLIED    -EU-
         BO    EXEC2                   YES                         -EU-
         DROP  R1                                                  -EU-
         XR    R1,R1                   NO                          -EU-
EXEC2    LOAD  EP=DISASM2,DCB=(1)      LOAD PHASE2                 -EU-
         LR    R15,R0                  COPY E.P. ADDRESS
         LA    R1,=A(COMMPARM)         GET PARAMETER ADDRESS
         BASR  R14,R15                 CALL DISASM2
         DELETE EP=DISASM2             DELETE AFTER USE
         B     EOJ                     GO FINISH
         EJECT
****************************************************************
*                                                              *
* WRITE OUTPUT TO SYSPUNCH.                                    *
*                                                              *
****************************************************************
         SPACE 1
WRTOUT   MVC   PRT(80),WORKREC         SAVE IN PRINT
         L     R2,PUNCHDCB                                         -EU-
         USING IHADCB,R2                                           -EU-
         TM    DCBOFLGS,DCBOFOPN       IS FILE OPEN                -EU-
         BZ    CLRWKR                  NO
         AP    CARDNO,=P'10'           INCREMENT CARD NO
         UNPK  SEQNBR,CARDNO           UNPACK INTO CARD
         OI    SEQNBR+7,C'0'           CLEAR SIGN
         PUT   (R2),WORKREC            WRITE SOURCE CARD           -EU-
         DROP  R2                                                  -EU-
CLRWKR   MVC   WORKREC,BLANX           CLEAR OUTPUT RECORD
         BR    R9                      RETURN
         SPACE 2
****************************************************************
*                                                              *
* END OF JOB. DISASSEMBLY COMPLETE.                            *
*                                                              *
****************************************************************
EOFSW    EQU   *+1                     END OF JOB SWITCH
EOJ      B     NOCTL                   RESET IF CTL CARD FOUND
         MVC   MNEMONIC-1(8),=CL8'$DEFREG'  SET MNEMONIC           -EU-
         BAS   R9,WRTOUT               WRITE RECORD
         BAS   R9,PRINT                GO PRINT IT
         L     R12,DTBSTRT             @ DSECT HEADER TBL
CENDSTB  CLI   0(R12),X'FF'            END OF TABLE
         BE    ENDSTMT                 YES
         USING DTDS,R12                                            -EU-
         MVC   NAME,DTNAME             DSECT NAME TO RECORD        -EU-
         MVC   MNEMONIC(5),=C'DSECT'   OPERATION IS DSECT
         BAS   R9,WRTOUT               WRITE DSECT HEADER
         BAS   R9,PRINT                AND PRINT IT
         ICM   R11,B'0111',DTADDR      GET FIELD TABLE ADDR        -EU-
         USING DSECTD,R11
CENDFTB  CLI   0(R11),X'FF'            END OF FIELD TABLE
         BNE   DFMTFLD                 NO
         XR    R0,R0                                               -EU-
         XR    R1,R1                                               -EU-
         ICM   R1,B'0111',DTADDR       FIELD TABLE ADDRESS         -EU-
         BZ    NOFTBL                  BRANCH IF NONE              -EU-
         ICM   R0,B'0111',DTLGTH       FIELD TABLE LENGTH          -EU-
         FREEMAIN R,A=(1),LV=(0)       FREE FIELD TABLE            -EU-
NOFTBL   LA    R12,L'DTL(R12)          TO NEXT DSECT HEADER        -EU-
         B     CENDSTB                 LOOP
DFMTFLD  MVC   NAME,DSNAME             NAME TO RECORD
         MVC   MNEMONIC(3),=C'EQU'     OPERATION IS EQU
         MVC   OPNDS(8),DTNAME         BASE NAME TO OPERAND        -EU-
         LA    R10,OPNDS+7             @ NAME RHE
CFRHE    CLI   0(R10),C' '             AT RHE
         BNE   CFPLUS                  YES
         BCT   R10,CFRHE               BACK UP 1 AND LOOP
CFPLUS   LA    R10,1(R10)              TO NEXT POS
         MVI   0(R10),C'+'             DELIMITER
         XR    R1,R1                   CLEAR WORK
         ICM   R1,B'0111',DSOFSET      GET OFFSET
         CVD   R1,DBLWD                CONVERT
         UNPK  DBLWD(4),DBLWD+4(4)     UNPACK
         OI    DBLWD+3,C'0'            CLEAR SIGN
         CH    R1,H1000                OFFSET < 1000
         BL    CFO100                  YES
         MVC   1(4,R10),DBLWD          NO, MOVE 4-DIGIT OFFSET
         LA    R10,5(R10)              TO NEXT POS
         B     CFCMA                   CONTINUE
CFO100   CH    R1,H100                 OFFSET < 100
         BL    CFO10                   YES
         MVC   1(3,R10),DBLWD+1        NO, MOVE 3-DIGIT OFFSET
         LA    R10,4(R10)              TO NEXT POS
         B     CFCMA                   CONTINUE
CFO10    CH    R1,H10                  OFFSET < 10
         BL    CFO1                    YES
         MVC   1(2,R10),DBLWD+2        MOVE 2-DIGIT OFFSET
         LA    R10,3(R10)              TO NEXT POS
         B     CFCMA                   CONTINUE
CFO1     LTR   R1,R1                   ANY OFFSET
         BZ    CFCMA                   NO
         MVC   1(1,R10),DBLWD+3        YES, MOVE 1-DIGIT OFFSET
         LA    R10,2(R10)              TO NEXT POS
CFCMA    MVI   0(R10),C','             DELIMITER
         XR    R1,R1                   CLEAR WORK
         IC    R1,DSLENG               PICK UP LENGTH
         CVD   R1,DBLWD                CONVERT
         UNPK  DBLWD(3),DBLWD+4(4)     UNPACK
         OI    DBLWD+2,C'0'            CLEAR SIGN
         CH    R1,H100                 LENGTH < 100
         BL    CFL10                   YES
         MVC   1(3,R10),DBLWD          NO, MOVE 3-DIGIT LENGTH
         B     CFWRT                   CONTINUE
CFL10    CH    R1,H10                  LENGTH < 10
         BL    CFL1                    YES
         MVC   1(2,R10),DBLWD+1        NO, MOVE 2-DIGIT LENGTH
         B     CFWRT                   CONTINUE
CFL1     MVC   1(1,R10),DBLWD+2        MOVE 1-DIGIT LENGTH
CFWRT    BAS   R9,WRTOUT               WRITE THE RECORD
         BAS   R9,PRINT                PRINT THE RECORD
         LA    R11,L'DSECT(R11)        TO NEXT FIELD ENTRY
         B     CENDFTB                 LOOP
ENDSTMT  MVC   MNEMONIC,=CL5'END'      MNEMONIC TO OUTPUT RECORD
         MVC   OPNDS(8),ENDLBLNM       POINT END STMT TO BEGIN LOC
         BAS   R9,WRTOUT               WRITE THE RECORD
         BAS   R9,PRINT                GO PRINT IT
         DROP  R11,R12                                             -EU-
         EJECT  ,                                                  -EU-
CLOSES   CLOSE (SYSLIB,,SYSPUNCH,,SYSPRINT,,SYSIN) CLOSE FILES
         L     R0,BUFLGTH              BUFFER STORAGE LENGTH       -EU-
         L     R1,BUFAD                BUFFER STORAGE ADDRESS      -EU-
         FREEMAIN R,LV=(0),A=(1)       FREE BUFFER STORAGE         -EU-
         L     R1,DATSTART             DATA ONLY TABLE ADDRESS     -EU-
         L     R0,DATLGTH              DATA ONLY TABLE LENGTH      -EU-
         FREEMAIN R,A=(1),LV=(0)       FREE DATA ONLY TABLE        -EU-
         ICM   R1,B'1111',USGSTRT      USING STORAGE ADDRESS       -EU-
         BZ    NOUSGS                  BRANCH IF NONE              -EU-
         L     R0,USGLGTH              USING STORAGE LENGTH        -EU-
         FREEMAIN R,A=(1),LV=(0)       FREE USING STORAGE          -EU-
NOUSGS   ICM   R1,B'1111',DTBSTRT      DSECT STORAGE ADDRESS       -EU-
         BZ    NODTBS                  BRANCH IF NONE              -EU-
         L     R0,DTBLGTH              DSECT STORAGE LENGTH        -EU-
         FREEMAIN R,A=(1),LV=(0)       FREE DSECT STORAGE          -EU-
NODTBS   ICM   R1,B'1111',TXTSTRT      TEXT STORAGE ADDRESS        -EU-
         BZ    NOTXTS                  BRANCH IF NONE              -EU-
         L     R0,TXTLGTH              TEXT STORAGE LENGTH         -EU-
         FREEMAIN R,A=(1),LV=(0)       FREE TEXT STORAGE           -EU-
NOTXTS   ICM   R1,B'1111',LBLTBL       LABEL TABLE ADDRESS         -EU-
         BZ    LEAVE                   BRANCH IF NONE              -EU-
         L     R0,LBLSLG               LABEL TABLE STORAGE LENGTH  -EU-
         FREEMAIN R,A=(1),LV=(0)       FREE LABEL TABLE STORAGE    -EU-
         SPACE 1                                                   -EU-
         PRINT GEN                                                 -EU-
LEAVE    SVBCK ,                       RETURN TO CALLER            -EU-
         EJECT
         DEFCOM ,                                                  -EU-
         SPACE 2                                                   -EU-
         DEFINS DSECT=YES                                          -EU-
         EJECT ,                                                   -EU-
         DEFCDS ,                                                  -EU-
         EJECT ,                                                   -EU-
RLDTBLD  DSECT ,                       RELOCATION DICTIONARY TABLE
RLDENT   DS    0CL20                   11 BYTE ENTRIES
RLDRP    DS    XL2                     RELOCATION POINTER
RLDPP    DS    XL2                     POS PTR (SYMBOL CESD NBR)
RLDTYPE  DS    XL1                     TYPE
*                    00=A-TYPE ADCON
*                    01=V-TYPE ADCON
*                    02=PSEUDO REGISTER DISPLACEMENT
*                    03=PSEUDO REG CUMULATIVE DISPL
*                    08=UNRESOLVED
RLDLEN   DS    XL1                     LENGTH OF CONSTANT
RLDDIR   DS    CL1                     RELOCATION DIRECTION, + OR
RLDADDR  DS    XL3                     LKED ASSGND ADDR OF CONSTANT
RLDNAME  DS    CL8                     NAME FROM ASSOC ESD
RLDESDTP DS    XL1                     TYPE FROM ASSOC ESD
         DS    XL1
         SPACE 2                                                   -EU-
SYMTBL   DSECT ,                       EXTERNAL SYMBOL TABLE ENTRY
SYMENT   DS    0CL19                   19 BYTE ENTRIES
EXTSYM   DS    CL8                     EXTERNAL SYMBOL NAME
TYPSYM   DS    XL1                     SYMBOL TYPE
*                        00=SD (NAMED CSECT)
*                        02=ER (EXTRN)
*                        03=LR (ENTRY)
*                        04=PC (UNNAMED CSECT)
*                        05=CM (COM)
*                        06=PR (PSEUDO REGISTER)
*                        07=NULL
*                        0A=WX (WXTRN)
*                        0F=ENTAB OR SEGTAB
SYMIND   DS    XL1                     INDICATOR
*                        BIT 0 = MAP
*                        BIT 1 = CHAIN
*                        BIT 2 = INSERT
*                        BIT 3 = DELETE/REPLACE
SYMADDR  DS    XL3                     SYMBOL ADDRESS (0 FOR ER, WX, NU
SYMSEG   DS    XL1                     SEGMENT ID (0 FOR ER, WX, NULL)
SYMLRID  DS    0XL2                    ESD ID OF DEF FOR LR
SYMLENG  DS    XL3                     LENGTH FOR SD, PC, CM, PR
*                        0 FOR ER, WX, NULL
SYMESDID DS    XL2                     ESD ID OF THIS ITEM
         EJECT
DISASM   CSECT
         SPACE 1
BUFAD    DC    F'0'                    SYSLIB BUFFER ADDRESS
BUFLGTH  DC    F'20000'                SYSLIB BUFFER LENGTH        -EU-
SYMTBAD  DC    F'0'                    SYMBOL TABLE ADDRESS
SYMLGTH  DC    A(2000*L'SYMENT)        SYM TABLE LENGTH            -EU-
CURRSYM  DC    F'0'                    CURRENT SYM TBL ADDRESS
ENDSYM   DC    F'0'                    SYM TBL END ADDRESS         -EU-
RLDTBL   DC    F'0'                    ADDR OF RLD TABLE
RLDLGTH  DC    A(3000*L'RLDENT)        RLD TABLE LENGTH            -EU-
CURRLD   DC    F'0'                    CURR RLD TBL ADDRESS
ENDRLD   DC    F'0'                    RLD TBL END ADDRESS         -EU-
DATSTART DC    F'0'                    DATA ONLY TABLE ADDRESS     -EU-
DATLGTH  DC    A(256*6+8)              DATA ONLY TBL STOR. LENGTH  -EU-
ENDATO   DC    A(256*6)                DATA ONLY TBL LENGTH        -EU-
TXTLGTH  DC    F'0'                    TEXT STORAGE LENGTH         -EU-
LBLSLG   DC    F'0'                    LABEL TABLE LENGTH          -EU-
CES9     DC    F'0'                    CESDREC RETURN ADDRESS
BL9      DC    F'0'                    BLDL RTN RETURN ADDRESS
CR9      DC    F'0'                    CTRLRECS RETURN ADDRESS
CT9      DC    F'0'                    CNTLRECS RETURN ADDRESS
RL9      DC    F'0'                    RLDRECS RETURN ADDRESS
HIVAL    DC    4X'FF'                  CONSTANT F'S
H1000    DC    H'1000'                 CONSTANT 1000
H100     DC    H'100'                  CONSTANT 100
H10      DC    H'10'                   CONSTANT 10
SYMLEN   DC    AL2(L'SYMENT)           LENGTH OF SYMTBL ENTRY
PRTABL   DC    CL9' '                  HEX-PRINTABLE CONVERSION AREA
P0       DC    P'0'                    CONSTANT 0
P1       DC    P'1'                    CONSTANT 1
P58      DC    P'58'                   CONSTANT 58
PROCESS  DC    XL1'00'                 PROCESS INDIC 80=CSECT FOUND
*                                                    40=MODULE DONE
JFCBAD   DS    0F                      DCB EXIT LIST
         DC    X'87'                   RDJFCB, END OF LIST
         DC    AL3(JFCB)               ADDRESS OF JFCB READ AREA
JFCB     DC    XL176'0'                JFCB
         SPACE 1
SYMHDR   DC    C'0     SYMBOL        TYPE   IND  ADDR'
         DC    C'    SEG  LRID   LENG  ESDID'
         DC    CL64' '
         SPACE 1
RLDHDR   DC    C'0     RELPTR  POSPTR      TYPE     LEN'
         DC    C'    DIR   ADDR'
         DC    CL90' '
         SPACE 1
PH1LBL   DC    CL121'1***** PHASE 1 LABEL TABLE *****'
PH1HDR   DC    0CL121' ',C'0'                                      -EU-
LPLEL    DC    4CL30'   ADDR TYPE  SYMBOL  LEN'                    -EU-
         SPACE 1
BLANX    DC    CL121' '                CONSTANT BLANKS
XZROS    DC    8X'00'                  CONSTANT ZEROS
H5       DC    H'5'                    CONSTANT 5
H256     DC    H'256'                  CONSTANT 256
TRTBL    DC    C'0123456789ABCDEF'     TRANSLATE TBL
NOCNTRL  DC    C'MEMBER AND CSECT MUST BE ENTERED VIA SYSIN'
OVER8    DC    C'MEMBER OR CSECT NAME OVER 8 CHARACTERS'
NOMEM    DC    C'NO MEMBER NAME FOUND IN CONTROL CARD OR PARM'
INVMEM   DC    C'SPECIFIED MEMBER NOT FOUND IN SYSLIB PDS'
INVCSECT DC    C'SPECIFIED CSECT NOT FOUND IN MEMBER'
FULLSYM  DC    C'SYMBOL TABLE FULL: OVER 2000 ENTRIES'
FULLRLD  DC    C'RLD TABLE FULL: OVER 3000 ENTRIES'
POFSET   DC    F'0'                    OFFSET FOR TEXT PRINT
         EJECT ,                                                   -EU-
         LTORG ,                                                   -EU-
         EJECT
* END OF BASE REGISTERS ADDRESSABILITY - - - - - - - - - - - - - - -EU-
         SPACE 1                                                   -EU-
PRTCHAR  DC    256C'.'                 CHARACTER TRANSLATE TABLE
         ORG   PRTCHAR+C' '
         DC    C' '
         ORG   PRTCHAR+C'A'
         DC    C'ABCDEFGHI'
         ORG   PRTCHAR+C'J'
         DC    C'JKLMNOPQR'
         ORG   PRTCHAR+C'S'
         DC    C'STUVWXYZ'
         ORG   PRTCHAR+C'0'
         DC    C'0123456789'
         ORG
SYSPUNCH DCB   DSORG=PS,MACRF=(PM,GM),DDNAME=SYSPUNCH,                 X
               RECFM=FB,LRECL=80
SYSIN    DCB   DSORG=PS,MACRF=GL,DDNAME=SYSIN,                         X
               RECFM=FB,LRECL=80,EODAD=NOCTL
SYSLIB   DCB   DSORG=PO,MACRF=R,DDNAME=SYSLIB,                         X
               RECFM=U,NCP=1
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X
               RECFM=FBA,LRECL=121
LOADLIB  DCB   DSORG=PO,MACRF=R,DDNAME=LOADLIB,EXLST=JFCBAD
         EJECT
******************************************************************
*                                                                *
* INSTRUCTION DISASSEMBLY TABLES. THESE TABLES DEFINE VALID      *
* INSTRUCTION OP-CODES, AND GIVE MNEMONICS, FORMAT-TYPES,        *
* AND AN INDICATOR TO SHOW CONDITION SETTING INSTRUCTIONS,       *
* PRIVILEGED INSTRUCTIONS, AND FLOATING POINT INSTRUCTIONS.      *
*                                                                *
******************************************************************
         SPACE 1
SGLOP    DS    0CL10                   SINGLE BYTE OP-CODE TABLE
         DC    XL5'0',AL1(0,0,0,0,2)                               00
         DC    XL5'0',AL1(0,0,0,0,2)                               01
         DC    XL5'0',AL1(0,0,0,0,2)                               02
         DC    XL5'0',AL1(0,0,0,0,2)                               03
         DC    CL5'SPM',AL1(RR,0,0,ZRO8,2)                         04
         DC    CL5'BALR',AL1(RR,0,0,0,2)                           05
         DC    CL5'BCTR',AL1(RR,0,0,0,2)                           06
         DC    CL5'BCR',AL1(CONDBR,0,0,0,2)                        07
         DC    CL5'SSK',AL1(RR,PRIV,0,0,2)                         08
         DC    CL5'ISK',AL1(RR,PRIV,0,0,2)                         09
         DC    CL5'SVC',AL1(SVC,0,0,0,2)                           0A
         DC    CL5'BSM',AL1(RR,0,0,0,2)                            0B
         DC    CL5'BASSM',AL1(RR,0,0,0,2)                          0C
         DC    CL5'BASR',AL1(RR,0,0,0,2)                           0D
         DC    CL5'MVCL',AL1(RR,0,EPR,CPR,2)                       0E
         DC    CL5'CLCL',AL1(RR,0,EPR,CPR,2)                       0F
         DC    CL5'LPR',AL1(RR,0,0,ARITH,2)                        10
         DC    CL5'LNR',AL1(RR,0,0,ARITH,2)                        11
         DC    CL5'LTR',AL1(RR,0,0,ARITH,2)                        12
         DC    CL5'LCR',AL1(RR,0,0,ARITH,2)                        13
         DC    CL5'NR',AL1(RR,0,0,ZRO8,2)                          14
         DC    CL5'CLR',AL1(RR,0,0,CPR,2)                          15
         DC    CL5'OR',AL1(RR,0,0,ZRO8,2)                          16
         DC    CL5'XR',AL1(RR,0,0,ZRO8,2)                          17
         DC    CL5'LR',AL1(RR,0,0,0,2)                             18
         DC    CL5'CR',AL1(RR,0,0,CPR,2)                           19
         DC    CL5'AR',AL1(RR,0,0,ARITH,2)                         1A
         DC    CL5'SR',AL1(RR,0,0,ARITH,2)                         1B
         DC    CL5'MR',AL1(RR,0,EPR,0,2)                           1C
         DC    CL5'DR',AL1(RR,0,EPR,0,2)                           1D
         DC    CL5'ALR',AL1(RR,0,0,ARITH,2)                        1E
         DC    CL5'SLR',AL1(RR,0,0,ARITH,2)                        1F
         DC    CL5'LPDR',AL1(RR,FLTPT,0,ARITH,2)                   20
         DC    CL5'LNDR',AL1(RR,FLTPT,0,ARITH,2)                   21
         DC    CL5'LTDR',AL1(RR,FLTPT,0,ARITH,2)                   22
         DC    CL5'LCDR',AL1(RR,FLTPT,0,ARITH,2)                   23
         DC    CL5'HDR',AL1(RR,FLTPT,0,0,2)                        24
         DC    CL5'LRDR',AL1(RR,FLTPT,0,0,2)                       25
         DC    CL5'MXR',AL1(RR,FLTPT,0,0,2)                        26
         DC    CL5'MXDR',AL1(RR,FLTPT,0,0,2)                       27
         DC    CL5'LDR',AL1(RR,FLTPT,0,0,2)                        28
         DC    CL5'CDR',AL1(RR,FLTPT,0,CPR,2)                      29
         DC    CL5'ADR',AL1(RR,FLTPT,0,ARITH,2)                    2A
         DC    CL5'SDR',AL1(RR,FLTPT,0,ARITH,2)                    2B
         DC    CL5'MDR',AL1(RR,FLTPT,0,0,2)                        2C
         DC    CL5'DDR',AL1(RR,FLTPT,0,0,2)                        2D
         DC    CL5'AWR',AL1(RR,FLTPT,0,ARITH,2)                    2E
         DC    CL5'SWR',AL1(RR,FLTPT,0,ARITH,2)                    2F
         DC    CL5'LPER',AL1(RR,FLTPT,0,ARITH,2)                   30
         DC    CL5'LNER',AL1(RR,FLTPT,0,ARITH,2)                   31
         DC    CL5'LTER',AL1(RR,FLTPT,0,ARITH,2)                   32
         DC    CL5'LCER',AL1(RR,FLTPT,0,ARITH,2)                   33
         DC    CL5'HER',AL1(RR,FLTPT,0,0,2)                        34
         DC    CL5'LRER',AL1(RR,FLTPT,0,0,2)                       35
         DC    CL5'AXR',AL1(RR,FLTPT,0,ARITH,2)                    36
         DC    CL5'SXR',AL1(RR,FLTPT,0,ARITH,2)                    37
         DC    CL5'LER',AL1(RR,FLTPT,0,0,2)                        38
         DC    CL5'CER',AL1(RR,FLTPT,0,CPR,2)                      39
         DC    CL5'AER',AL1(RR,FLTPT,0,ARITH,2)                    3A
         DC    CL5'SER',AL1(RR,FLTPT,0,ARITH,2)                    3B
         DC    CL5'MER',AL1(RR,FLTPT,0,0,2)                        3C
         DC    CL5'DER',AL1(RR,FLTPT,0,0,2)                        3D
         DC    CL5'AUR',AL1(RR,FLTPT,0,ARITH,2)                    3E
         DC    CL5'SUR',AL1(RR,FLTPT,0,ARITH,2)                    3F
         DC    CL5'STH',AL1(RX,0,E2+S2,0,4)                        40
         DC    CL5'LA',AL1(RX,0,0,0,4)                             41
         DC    CL5'STC',AL1(RX,0,S2,0,4)                           42
         DC    CL5'IC',AL1(RX,0,0,0,4)                             43
         DC    CL5'EX',AL1(RX,0,E2+S2,0,4)                         44
         DC    CL5'BAL',AL1(RX,0,E2,0,4)                           45
         DC    CL5'BCT',AL1(RX,0,E2+S2,0,4)                        46
         DC    CL5'BC',AL1(CONDBR,0,E2,0,4)                        47
         DC    CL5'LH',AL1(RX,0,E2,0,4)                            48
         DC    CL5'CH',AL1(RX,0,E2,CPR,4)                          49
         DC    CL5'AH',AL1(RX,0,E2,ARITH,4)                        4A
         DC    CL5'SH',AL1(RX,0,E2,ARITH,4)                        4B
         DC    CL5'MH',AL1(RX,0,E2,0,4)                            4C
         DC    CL5'BAS',AL1(RX,0,E2,0,4)                           4D
         DC    CL5'CVD',AL1(RX,0,E8+S2,0,4)                        4E
         DC    CL5'CVB',AL1(RX,0,E8,0,4)                           4F
         DC    CL5'ST',AL1(RX,0,E4+S2,0,4)                         50
         DC    XL5'0',AL1(0,0,0,0,4)                               51
         DC    XL5'0',AL1(0,0,0,0,4)                               52
         DC    XL5'0',AL1(0,0,0,0,4)                               53
         DC    CL5'N',AL1(RX,0,E4,ZRO8,4)                          54
         DC    CL5'CL',AL1(RX,0,E4,CPR,4)                          55
         DC    CL5'O',AL1(RX,0,E4,ZRO8,4)                          56
         DC    CL5'X',AL1(RX,0,E4,ZRO8,4)                          57
         DC    CL5'L',AL1(RX,0,E4,0,4)                             58
         DC    CL5'C',AL1(RX,0,E4,CPR,4)                           59
         DC    CL5'A',AL1(RX,0,E4,ARITH,4)                         5A
         DC    CL5'S',AL1(RX,0,E4,ARITH,4)                         5B
         DC    CL5'M',AL1(RX,0,E4+EPR,0,4)                         5C
         DC    CL5'D',AL1(RX,0,E4+EPR,0,4)                         5D
         DC    CL5'AL',AL1(RX,0,E4,ARITH,4)                        5E
         DC    CL5'SL',AL1(RX,0,E4,ARITH,4)                        5F
         DC    CL5'STD',AL1(RX,FLTPT,0,0,4)                        60
         DC    XL5'0',AL1(0,0,0,0,4)                               61
         DC    XL5'0',AL1(0,0,0,0,4)                               62
         DC    XL5'0',AL1(0,0,0,0,4)                               63
         DC    XL5'0',AL1(0,0,0,0,4)                               64
         DC    XL5'0',AL1(0,0,0,0,4)                               65
         DC    XL5'0',AL1(0,0,0,0,4)                               66
         DC    CL5'MXD',AL1(RX,FLTPT,0,0,4)                        67
         DC    CL5'LD',AL1(RX,FLTPT,0,0,4)                         68
         DC    CL5'CD',AL1(RX,FLTPT,0,CPR,4)                       69
         DC    CL5'AD',AL1(RX,FLTPT,0,ARITH,4)                     6A
         DC    CL5'SD',AL1(RX,FLTPT,0,ARITH,4)                     6B
         DC    CL5'MD',AL1(RX,FLTPT,0,0,4)                         6C
         DC    CL5'DD',AL1(RX,FLTPT,0,0,4)                         6D
         DC    CL5'AW',AL1(RX,FLTPT,0,ARITH,4)                     6E
         DC    CL5'SW',AL1(RX,FLTPT,0,ARITH,4)                     6F
         DC    CL5'STE',AL1(RX,FLTPT+FLSHT,0,0,4)                  70
         DC    XL5'0',AL1(0,0,0,0,4)                               71
         DC    XL5'0',AL1(0,0,0,0,4)                               72
         DC    XL5'0',AL1(0,0,0,0,4)                               73
         DC    XL5'0',AL1(0,0,0,0,4)                               74
         DC    XL5'0',AL1(0,0,0,0,4)                               75
         DC    XL5'0',AL1(0,0,0,0,4)                               76
         DC    XL5'0',AL1(0,0,0,0,4)                               77
         DC    CL5'LE',AL1(RX,FLTPT+FLSHT,0,0,4)                   78
         DC    CL5'CE',AL1(RX,FLTPT+FLSHT,0,CPR,4)                 79
         DC    CL5'AE',AL1(RX,FLTPT+FLSHT,0,ARITH,4)               7A
         DC    CL5'SE',AL1(RX,FLTPT+FLSHT,0,ARITH,4)               7B
         DC    CL5'ME',AL1(RX,FLTPT+FLSHT,0,0,4)                   7C
         DC    CL5'DE',AL1(RX,FLTPT+FLSHT,0,0,4)                   7D
         DC    CL5'AU',AL1(RX,FLTPT+FLSHT,0,ARITH,4)               7E
         DC    CL5'SU',AL1(RX,FLTPT+FLSHT,0,ARITH,4)               7F
         DC    CL5'SSM',AL1(S,PRIV,0,0,4)                          80
         DC    XL5'0',AL1(0,0,0,0,4)                               81
         DC    CL5'LPSW',AL1(S,PRIV,E8,ARITH,4)                    82
         DC    XL5'0',AL1(0,0,0,0,4)                               83
         DC    CL5'WRD',AL1(SI,PRIV,0,0,4)                         84
         DC    CL5'RDD',AL1(SI,PRIV,0,0,4)                         85
         DC    CL5'BXH',AL1(RS,0,E2+S2,0,4)                        86
         DC    CL5'BXLE',AL1(RS,0,E2+S2,0,4)                       87
         DC    CL5'SRL',AL1(RS,0,0,0,4)                            88
         DC    CL5'SLL',AL1(RS,0,0,0,4)                            89
         DC    CL5'SRA',AL1(RS,0,0,ARITH,4)                        8A
         DC    CL5'SLA',AL1(RS,0,0,ARITH,4)                        8B
         DC    CL5'SRDL',AL1(RS,0,EPR,0,4)                         8C
         DC    CL5'SLDL',AL1(RS,0,EPR,0,4)                         8D
         DC    CL5'SRDA',AL1(RS,0,EPR,ARITH,4)                     8E
         DC    CL5'SLDA',AL1(RS,0,EPR,ARITH,4)                     8F
         DC    CL5'STM',AL1(RS,0,E4+S2,0,4)                        90
         DC    CL5'TM',AL1(SI,0,0,ARITH,4)                         91
         DC    CL5'MVI',AL1(SI,0,S2,0,4)                           92
         DC    CL5'TS',AL1(S,0,0,ARITH,4)                          93
         DC    CL5'NI',AL1(SI,0,0,ZRO8,4)                          94
         DC    CL5'CLI',AL1(SI,0,0,CPR,4)                          95
         DC    CL5'OI',AL1(SI,0,0,ZRO8,4)                          96
         DC    CL5'XI',AL1(SI,0,0,ZRO8,4)                          97
         DC    CL5'LM',AL1(RS,0,E4,0,4)                            98
         DC    CL5'TRACE',AL1(RS,PRIV,E4,0,4)                      99
         DC    XL5'0',AL1(0,0,0,0,4)                               9A
         DC    XL5'0',AL1(0,0,0,0,4)                               9B
         DC    CL5' ',AL1(TWO,0,0,0,4)                             9C
         DC    CL5' ',AL1(TWO,0,0,0,4)                             9D
         DC    CL5' ',AL1(TWO,0,0,0,4)                             9E
         DC    CL5' ',AL1(TWO,0,0,0,4)                             9F
         DC    XL5'0',AL1(0,0,0,0,4)                               A0
         DC    XL5'0',AL1(0,0,0,0,4)                               A1
         DC    XL5'0',AL1(0,0,0,0,4)                               A2
         DC    XL5'0',AL1(0,0,0,0,4)                               A3
         DC    XL5'0',AL1(0,0,0,0,4)                               A4
         DC    XL5'0',AL1(0,0,0,0,4)                               A5
         DC    XL5'0',AL1(0,0,0,0,4)                               A6
         DC    XL5'0',AL1(0,0,0,0,4)                               A7
         DC    XL5'0',AL1(0,0,0,0,4)                               A8
         DC    XL5'0',AL1(0,0,0,0,4)                               A9
         DC    XL5'0',AL1(0,0,0,0,4)                               AA
         DC    XL5'0',AL1(0,0,0,0,4)                               AB
         DC    CL5'STNSM',AL1(SI,PRIV,0,0,4)                       AC
         DC    CL5'STOSM',AL1(SI,PRIV,0,0,4)                       AD
         DC    CL5'SIGP',AL1(RS,PRIV,0,ARITH,4)                    AE
         DC    CL5'MC',AL1(SI,0,0,0,4)                             AF
         DC    XL5'0',AL1(0,0,0,0,4)                               B0
         DC    CL5'LRA',AL1(RX,PRIV,0,ARITH,4)                     B1
         DC    CL5' ',AL1(TWO,0,0,0,4)                             B2
         DC    XL5'0',AL1(0,0,0,0,4)                               B3
         DC    XL5'0',AL1(0,0,0,0,4)                               B4
         DC    XL5'0',AL1(0,0,0,0,4)                               B5
         DC    CL5'STCTL',AL1(RS,PRIV,0,0,4)                       B6
         DC    CL5'LCTL',AL1(RS,PRIV,E4,0,4)                       B7
         DC    XL5'0',AL1(0,0,0,0,4)                               B8
         DC    XL5'0',AL1(0,0,0,0,4)                               B9
         DC    CL5'CS',AL1(RS,0,E4+EPR,ARITH,4)                    BA
         DC    CL5'CDS',AL1(RS,0,E4+EPR,ARITH,4)                   BB
         DC    XL5'0',AL1(0,0,0,0,4)                               BC
         DC    CL5'CLM',AL1(RS,0,0,CPR,4)                          BD
         DC    CL5'STCM',AL1(RS,0,S2,0,4)                          BE
         DC    CL5'ICM',AL1(RS,0,0,ZRO8,4)                         BF
         DC    XL5'0',AL1(0,0,0,0,6)                               C0
         DC    XL5'0',AL1(0,0,0,0,6)                               C1
         DC    XL5'0',AL1(0,0,0,0,6)                               C2
         DC    XL5'0',AL1(0,0,0,0,6)                               C3
         DC    XL5'0',AL1(0,0,0,0,6)                               C4
         DC    XL5'0',AL1(0,0,0,0,6)                               C5
         DC    XL5'0',AL1(0,0,0,0,6)                               C6
         DC    XL5'0',AL1(0,0,0,0,6)                               C7
         DC    XL5'0',AL1(0,0,0,0,6)                               C8
         DC    XL5'0',AL1(0,0,0,0,6)                               C9
         DC    XL5'0',AL1(0,0,0,0,6)                               CA
         DC    XL5'0',AL1(0,0,0,0,6)                               CB
         DC    XL5'0',AL1(0,0,0,0,6)                               CC
         DC    XL5'0',AL1(0,0,0,0,6)                               CD
         DC    XL5'0',AL1(0,0,0,0,6)                               CE
         DC    XL5'0',AL1(0,0,0,0,6)                               CF
         DC    XL5'0',AL1(0,0,0,0,6)                               D0
         DC    CL5'MVN',AL1(SS1,0,S1,0,6)                          D1
         DC    CL5'MVC',AL1(SS1,0,S1,0,6)                          D2
         DC    CL5'MVZ',AL1(SS1,0,S1,0,6)                          D3
         DC    CL5'NC',AL1(SS1,0,S1,ZRO8,6)                        D4
         DC    CL5'CLC',AL1(SS1,0,0,CPR,6)                         D5
         DC    CL5'OC',AL1(SS1,0,S1,ZRO8,6)                        D6
         DC    CL5'XC',AL1(SS1,0,S1,ZRO8,6)                        D7
         DC    XL5'0',AL1(0,0,0,0,6)                               D8
         DC    CL5'MVCK',AL1(SSR,PRIV,0,ZRO8,6)                    D9
         DC    CL5'MVCP',AL1(SSR,PRIV,0,ZRO8,6)                    DA
         DC    CL5'MVCS',AL1(SSR,PRIV,0,ZRO8,6)                    DB
         DC    CL5'TR',AL1(SS1,0,S1,0,6)                           DC
         DC    CL5'TRT',AL1(SS1,0,0,ZRO8,6)                        DD
         DC    CL5'ED',AL1(SS1,0,S1,ARITH,6)                       DE
         DC    CL5'EDMK',AL1(SS1,0,S1,ARITH,6)                     DF
         DC    XL5'0',AL1(0,0,0,0,6)                               E0
         DC    XL5'0',AL1(0,0,0,0,6)                               E1
         DC    XL5'0',AL1(0,0,0,0,6)                               E2
         DC    XL5'0',AL1(0,0,0,0,6)                               E3
         DC    XL5'0',AL1(0,0,0,0,6)                               E4
         DC    CL5' ',AL1(TWO,0,0,0,6)                             E5
         DC    XL5'0',AL1(0,0,0,0,6)                               E6
         DC    XL5'0',AL1(0,0,0,0,6)                               E7
         DC    CL5'MVCIN',AL1(SS1,0,S1,0,6)                        E8
         DC    XL5'0',AL1(0,0,0,0,6)                               E9
         DC    XL5'0',AL1(0,0,0,0,6)                               EA
         DC    XL5'0',AL1(0,0,0,0,6)                               EB
         DC    XL5'0',AL1(0,0,0,0,6)                               EC
         DC    XL5'0',AL1(0,0,0,0,6)                               ED
         DC    XL5'0',AL1(0,0,0,0,6)                               EE
         DC    XL5'0',AL1(0,0,0,0,6)                               EF
         DC    CL5'SRP',AL1(SS2,0,S1,ARITH,6)                      F0
         DC    CL5'MVO',AL1(SS2,0,S1,0,6)                          F1
         DC    CL5'PACK',AL1(SS2,0,S1,0,6)                         F2
         DC    CL5'UNPK',AL1(SS2,0,S1,0,6)                         F3
         DC    XL5'0',AL1(0,0,0,0,6)                               F4
         DC    XL5'0',AL1(0,0,0,0,6)                               F5
         DC    XL5'0',AL1(0,0,0,0,6)                               F6
         DC    XL5'0',AL1(0,0,0,0,6)                               F7
         DC    CL5'ZAP',AL1(SS2,0,S1,ARITH,6)                      F8
         DC    CL5'CP',AL1(SS2,0,0,CPR,6)                          F9
         DC    CL5'AP',AL1(SS2,0,S1,ARITH,6)                       FA
         DC    CL5'SP',AL1(SS2,0,S1,ARITH,6)                       FB
         DC    CL5'MP',AL1(SS2,0,S1,0,6)                           FC
         DC    CL5'DP',AL1(SS2,0,S1,0,6)                           FD
         DC    XL5'0',AL1(0,0,0,0,6)                               FE
         DC    XL5'0',AL1(0,0,0,0,6)                               FF
         DC    X'FFFF'                 TABLE END
         SPACE 1                                                   -EU-
*        THE FOLLOWING TEST CONSTANT MUST BE ZERO,                 -EU-
*        OTHERWISE THERE WILL BE ANY TABLE ERROR.                  -EU-
         DC    AL4((*-SGLOP)-((256*L'SGLOP)+2))                    -EU-
         EJECT
DBLOP    DS    0CL12                   TWO-BYTE OP-CODE TABLE
         DC    X'9C00',CL5'SIO',AL1(S,PRIV,0,ARITH,4)              9C
         DC    X'9C01',CL5'SIOF',AL1(S,PRIV,0,ARITH,4)
         DC    X'9D00',CL5'TIO',AL1(S,PRIV,0,ARITH,4)              9D
         DC    X'9D01',CL5'CLRIO',AL1(S,PRIV,0,ARITH,4)
         DC    X'9E00',CL5'HIO',AL1(S,PRIV,0,ARITH,4)              9E
         DC    X'9E01',CL5'HDV',AL1(S,PRIV,0,ARITH,4)
         DC    X'9F00',CL5'TCH',AL1(S,PRIV,0,ARITH,4)              9F
         DC    X'9F01',CL5'CLRCH',AL1(S,PRIV,0,ARITH,4)
         DC    X'B200',CL5'CONCS',AL1(S,PRIV,0,ARITH,4)            B2
         DC    X'B201',CL5'DISCS',AL1(S,PRIV,0,ARITH,4)
         DC    X'B202',CL5'STIDP',AL1(S,PRIV,E8,0,4)
         DC    X'B203',CL5'STIDC',AL1(S,PRIV,0,ARITH,4)
         DC    X'B204',CL5'SCK',AL1(S,PRIV,E8,ARITH,4)
         DC    X'B205',CL5'STCK',AL1(S,0,S2,ARITH,4)
         DC    X'B206',CL5'SCKC',AL1(S,PRIV,E8,0,4)
         DC    X'B207',CL5'STCKC',AL1(S,PRIV,E8,0,4)
         DC    X'B208',CL5'SPT',AL1(S,PRIV,E8,0,4)
         DC    X'B209',CL5'STPT',AL1(S,PRIV,E8,0,4)
         DC    X'B20A',CL5'SPKA',AL1(S,PRIV,0,0,4)
         DC    X'B20B',CL5'IPK',AL1(S,PRIV+IOP,0,0,4)
         DC    X'B20D',CL5'PTLB',AL1(S,PRIV+IOP,0,0,4)
         DC    X'B210',CL5'SPX',AL1(S,PRIV,E4,0,4)
         DC    X'B211',CL5'STPX',AL1(S,PRIV,E4,0,4)
         DC    X'B212',CL5'STAP',AL1(S,PRIV,E2,0,4)
         DC    X'B213',CL5'RRB',AL1(S,PRIV,0,ARITH,4)
         DC    X'B218',CL5'PC',AL1(S,PRIV,0,0,4)
         DC    X'B219',CL5'SAC',AL1(S,0,0,0,4)
         DC    X'B221',CL5'IPTE',AL1(RRE,PRIV,0,0,4)
         DC    X'B222',CL5'IPM',AL1(RRE,0,E1R,0,4)
         DC    X'B223',CL5'IVSK',AL1(RRE,PRIV,0,0,4)
         DC    X'B224',CL5'IAC',AL1(RRE,PRIV,E1R,ARITH,4)
         DC    X'B225',CL5'SSAR',AL1(RRE,PRIV,E1R,0,4)
         DC    X'B226',CL5'EPAR',AL1(RRE,PRIV,E1R,0,4)
         DC    X'B227',CL5'ESAR',AL1(RRE,PRIV,E1R,0,4)
         DC    X'B228',CL5'PT',AL1(RRE,PRIV,0,0,4)
         DC    X'B229',CL5'ISKE',AL1(RRE,PRIV,0,0,4)
         DC    X'B22A',CL5'RRBE',AL1(RRE,PRIV,0,ARITH,4)
         DC    X'B22B',CL5'SSKE',AL1(RRE,PRIV,0,0,4)
         DC    X'B22C',CL5'TB',AL1(RRE,PRIV,0,ARITH,4)
         DC    X'B22D',CL5'DXR',AL1(RRE,FLTPT+FLEXR,0,0,4)
         DC    X'B230',CL5'CSCH',AL1(S,PRIV+IOP,0,ARITH,4)
         DC    X'B231',CL5'HSCH',AL1(S,PRIV+IOP,0,ARITH,4)
         DC    X'B232',CL5'MSCH',AL1(S,PRIV,E4,ARITH,4)
         DC    X'B233',CL5'SSCH',AL1(S,PRIV,E4,ARITH,4)
         DC    X'B234',CL5'STSCH',AL1(S,PRIV,E4,ARITH,4)
         DC    X'B235',CL5'TSCH',AL1(S,PRIV,E4,ARITH,4)
         DC    X'B236',CL5'TPI',AL1(S,PRIV,E4,ARITH,4)
         DC    X'B237',CL5'SAL',AL1(S,PRIV+IOP,0,0,4)
         DC    X'B238',CL5'RSCH',AL1(S,PRIV+IOP,0,ARITH,4)
         DC    X'B239',CL5'STCRW',AL1(S,PRIV,E4,ARITH,4)
         DC    X'B23A',CL5'STCPS',AL1(S,PRIV,0,0,4)
         DC    X'B23B',CL5'RCHP',AL1(S,PRIV+IOP,0,ARITH,4)
         DC    X'B23C',CL5'SCHM',AL1(S,PRIV+IOP,0,0,4)
         DC    X'E500',CL5'LASP',AL1(SSE,PRIV,E8,ARITH,6)          E5
         DC    X'E501',CL5'TPROT',AL1(SSE,PRIV,0,ARITH,6)
         DC    X'FFFF'                 TABLE END
         SPACE 1                                                   -EU-
*        THE FOLLOWING TEST CONSTANT MUST BE ZERO,                 -EU-
*        OTHERWISE THERE WILL BE ANY TABLE ERROR.                  -EU-
         DC    AL4((*-DBLOP)-((((*-DBLOP)/L'DBLOP)*L'DBLOP)+2))    -EU-
         EJECT
SVCOP    DS    0CL15                   SVC NAME TABLE
         DC    AL1(0),CL14'EXCP/XDAP'
         DC    AL1(1),CL14'WAIT(R)/PRTOV'
         DC    AL1(2),CL14'POST'
         DC    AL1(3),CL14'EXIT'
         DC    AL1(4),CL14'GETMAIN'
         DC    AL1(5),CL14'FREEMAIN'
         DC    AL1(6),CL14'LINK'
         DC    AL1(7),CL14'XCTL'
         DC    AL1(8),CL14'LOAD'
         DC    AL1(9),CL14'DELETE'
         DC    AL1(10),CL14'GET/FREEMAIN R'
         DC    AL1(11),CL14'TIME'
         DC    AL1(12),CL14'SYNCH'
         DC    AL1(13),CL14'ABEND'
         DC    AL1(14),CL14'SPIE'
         DC    AL1(15),CL14'ERREXCP'
         DC    AL1(16),CL14'PURGE'
         DC    AL1(17),CL14'RESTORE'
         DC    AL1(18),CL14'BLDL/FIND'
         DC    AL1(19),CL14'OPEN'
         DC    AL1(20),CL14'CLOSE'
         DC    AL1(21),CL14'STOW'
         DC    AL1(22),CL14'OPEN TYPE J'
         DC    AL1(23),CL14'CLOSE TYPE T'
         DC    AL1(24),CL14'DEVTYPE'
         DC    AL1(25),CL14'TRKBAL'
         DC    AL1(26),CL14'LOCATE, ...'
         DC    AL1(27),CL14'OBTAIN'
         DC    AL1(29),CL14'SCRATCH'
         DC    AL1(30),CL14'RENAME'
         DC    AL1(31),CL14'FEOV'
         DC    AL1(32),CL14'ALLOC'
         DC    AL1(33),CL14'IOHALT'
         DC    AL1(34),CL14'MGCR/QEDIT'
         DC    AL1(35),CL14'WTO/WTOR'
         DC    AL1(36),CL14'WTL'
         DC    AL1(37),CL14'SEGLD/SEGWT'
         DC    AL1(39),CL14'LABEL'
         DC    AL1(40),CL14'EXTRACT'
         DC    AL1(41),CL14'IDENTIFY'
         DC    AL1(42),CL14'ATTACH'
         DC    AL1(43),CL14'CIRB'
         DC    AL1(44),CL14'CHAP'
         DC    AL1(45),CL14'OVLYBRCH'
         DC    AL1(46),CL14'TTIMER'
         DC    AL1(47),CL14'STIMER'
         DC    AL1(48),CL14'DEQ'
         DC    AL1(51),CL14'SNAP/SDUMP'
         DC    AL1(52),CL14'RESTART'
         DC    AL1(53),CL14'RELEX'
         DC    AL1(54),CL14'DISABLE'
         DC    AL1(55),CL14'EOV'
         DC    AL1(56),CL14'ENQ/RESERVE'
         DC    AL1(57),CL14'FREEDBUF'
         DC    AL1(58),CL14'RELBUF/REQBUF'
         DC    AL1(59),CL14'OLTEP'
         DC    AL1(60),CL14'(E)STAE/STAI'
         DC    AL1(61),CL14'IKJEGS6A'
         DC    AL1(62),CL14'DETACH'
         DC    AL1(63),CL14'CHKPT'
         DC    AL1(64),CL14'RDJFCB'
         DC    AL1(66),CL14'BTAMTEST'
         DC    AL1(68),CL14'(SYNAD)AF/RLS'
         DC    AL1(69),CL14'BSP'
         DC    AL1(70),CL14'GSERV'
         DC    AL1(71),CL14'ASGNBFR, ...'
         DC    AL1(72),CL14'(NO MACRO)'
         DC    AL1(73),CL14'SPAR'
         DC    AL1(74),CL14'DAR'
         DC    AL1(75),CL14'DQUEUE'
         DC    AL1(76),CL14'IFBSTAT'
         DC    AL1(78),CL14'LSPACE'
         DC    AL1(79),CL14'STATUS'
         DC    AL1(81),CL14'SETPRT'
         DC    AL1(83),CL14'SMFWTM'
         DC    AL1(84),CL14'GRAPHICS'
         DC    AL1(85),CL14'DDRSWAP'
         DC    AL1(86),CL14'ATLAS'
         DC    AL1(87),CL14'DOM'
         DC    AL1(91),CL14'VOLSTAT'
         DC    AL1(92),CL14'TCPEXCP'
         DC    AL1(93),CL14'TGET/TPUT'
         DC    AL1(94),CL14'STCC'
         DC    AL1(95),CL14'SYSEVENT'
         DC    AL1(96),CL14'STAX'
         DC    AL1(97),CL14'IKJEGS9G'
         DC    AL1(98),CL14'PROTECT'
         DC    AL1(99),CL14'DYNALLOC'
         DC    AL1(100),CL14'IKJEFFIB'
         DC    AL1(101),CL14'QTIP'
         DC    AL1(102),CL14'AQCTL'
         DC    AL1(103),CL14'XLATE'
         DC    AL1(104),CL14'TOPCTL'
         DC    AL1(105),CL14'IMGLIB'
         DC    AL1(107),CL14'MODESET'
         DC    AL1(109),CL14'ESR TYPE 4'
         DC    AL1(110),CL14'(NO MACRO)'
         DC    AL1(111),CL14'(NO MACRO)'
         DC    AL1(112),CL14'PGRLSE'
         DC    AL1(113),CL14'PGFIX, ...'
         DC    AL1(114),CL14'EXCPVR'
         DC    AL1(116),CL14'ESR TYPE 1'
         DC    AL1(117),CL14'DEBCHK'
         DC    AL1(119),CL14'TESTAUTH'
         DC    AL1(120),CL14'GETMAIN/FREEMAIN'
         DC    AL1(121),CL14'VSAM'
         DC    AL1(122),CL14'ESR TYPE 2'
         DC    AL1(123),CL14'PURGEDQ'
         DC    AL1(124),CL14'TPIO'
         DC    AL1(125),CL14'EVENTS'
         DC    AL1(126),CL14'MSS(ICB2SVC)'
         DC    AL1(130),CL14'RACHECK'
         DC    AL1(131),CL14'RACINIT'
         DC    AL1(132),CL14'RACLIST'
         DC    AL1(133),CL14'RACDEF'
         DC    AL1(137),CL14'ESR'
         DC    AL1(138),CL14'PGSER'
         DC    AL1(139),CL14'CVAFDIR, ...'
         SPACE 1                                                   -EU-
*        HERE FOLLOWS INSTALLATION DEPENDENT SVC'S.                -EU-
*        ------------------------------------------                -EU-
         SPACE 1                                                   -EU-
         DC    AL1(210),CL14'CICS-VS 1.6.1'                        -EU-
         DC    AL1(214),CL14'I.M.S. 1.3'                           -EU-
         DC    AL1(215),CL14'I.M.S. 1.2'                           -EU-
         DC    AL1(216),CL14'ADABAS'                               -EU-
         DC    AL1(220),CL14'CICS-VS 1.6.1'                        -EU-
         DC    AL1(225),CL14'I.M.S. 1.3'                           -EU-
         DC    AL1(235),CL14'D.M.S.'                               -EU-
         DC    AL1(247),CL14'EU-SPF-AUTH.'                         -EU-
         DC    AL1(253),CL14'EU-AUTH.'                             -EU-
         DC    X'FFFF'                 END OF TABLE
         SPACE 1                                                   -EU-
*        THE FOLLOWING TEST CONSTANT MUST BE ZERO,                 -EU-
*        OTHERWISE THERE WILL BE ANY TABLE ERROR.                  -EU-
         DC    AL4((*-SVCOP)-((((*-SVCOP)/L'SVCOP)*L'SVCOP)+2))    -EU-
         SPACE 2
         END
