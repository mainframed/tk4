1   19/09/86
                                                      DISASM    1/9.

  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * *      D I S A S S E M B L E R        * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

  CBT origin : Extracted from CBT tape 84 JUN, file 217.
  ------------

     DISASM is a one-pass disassembler which produces an assembler
  language source program from a CSECT within a load module.
     Control cards permit specification of areas containing no
  instructions, allow base registers to be provided so that symbolic
  labels may be created during disassembly, and definition of DSECTs
  to be used during disassembly. Conditional branch instructions use
  the extended mnemonics, where possible, and explicit registers are
  denoted by R0, R1, ... R15. Informational comments are given on
  svc's, and various BAL instructions to aid in creating a documented
  source program.

  1. JCL requirements :
  ---------------------

       A. EXEC card :        to execute PGM=DISASM. A parm field may
                             be specified if floating point and/or
                             privileged instructions are to be
                             found in the module, and/or branch
                             register extended mnemonics are desired.

       B. STEPLIB DD card :  optional, specify the PDS containing
                             the module DISASM.

       C. SYSLIB DD card :   specify PDS containing the module to be
                             disassembled.

       D. SYSPRINT DD card : optional, specify the printed
                             output data-set. BLKSIZE must be
                             specified as a multiple of 121.
                             RECFM=FBA,LRECL=121 is hard-coded.

       E. SYSPUNCH DD card : optional, specify punched output
                             data-set. BLKSIZE must be specified
                             as a multiple of 80.
                             RECFM=FB,LRECL=80 is hard-coded.

       F. SYSIN DD card :    contains control cards. The MODULE-CSECT
                             card is required. BLKSIZE must be a
                             multiple of 80. RECFM=FB,LRECL=80 is
                             hard-coded.
1   19/09/86
                                                      DISASM    2/9.

    JCL example : disassemble csect IECIOSCN in module IEANUC01,
                  which is in the PDS SYS1.NUCLEUS. The modules
                  DISASM, DISASM1, and DISASM2 are all in the PDS
                  PRIVATE.EXEC.LOAD. A printed listing is to be made,
                  and the source program output will be placed in
                  the sequential data-set PRIVATE.IECIOSCN.ASM.

        //DISASM EXEC PGM=DISASM
        //STEPLIB  DD DSN=PRIVATE.EXEC.LOAD,DISP=SHR
        //SYSPRINT DD SYSOUT=A,DCB=BLKSIZE=121
        //SYSLIB   DD DSN=SYS1.NUCLEUS,DISP=SHR
        //SYSPUNCH DD UNIT=SYSDA,SPACE=(TRK,(5,2),RLSE),DISP=(,CATLG),
                      DSN=PRIVATE.IECIOSCN.ASM,DCB=(BLKSIZE=18960)
        //SYSIN    DD *
        IEANUC01 IECIOSCN
        /*

  2. Parm field on the EXEC card :
  --------------------------------

     Omit the parm field, unless floating point and/or privileged
  instructions are to be found in the CSECT being disassembled, and
  branch register extended mnemonics are desired.
     When the parm field is not specified, entries for privileged and
  floating point instructions are erased from the internal instruction
  tables used during disassemble. Valid parm fields are :

          PARM=(SUPVR)       - Assemble privileged instructions
          PARM=(FLTPT)       - Assemble floating point instructions
          PARM=(BREMC)       - Assemble using branch register extended
                               mnemonics coding.
          PARM=(BREMC,SUPVR,FLTPT) - Assemble both privileged and
                               floating point instructions, and use
                               extended mnemonics for branch register.

  3. Control cards entered in the SYSIN data-set :
  ------------------------------------------------

     Data is contained only in columns 1-72. Columns 73-80 may be
  used for any desired purpose. In addition, columns beyond the last
  specified may be used for any purpose. Leading zeros must be
  included in all fields giving hexadecimal or decimal data. Name
  fields must be left justified with trailing blanks. Hexadecimal
  fields may contain only the hexadecimal digits 0-9 and A-F, while
  decimal fields may contain only digits 0-9. The MODULE-CSECT card
  must be the first card in the input stream. DSECT definitions may
  not include any other control cards. USING cards for DSECTs must
  be entered at some point after the DSECT definition. DATA-ONLY
  cards and program USING cards may be entered in any order except
  within DSECT definitions.
1   19/09/86
                                                      DISASM    3/9.

        A. - MODULE-CSECT card (required), must be the first card
                     in the SYSIN stream. Specifies the MODULE name
                     and CSECT name. Module name is required, and
                     must name an entry in the directory of the
                     PDS specified by the SYSLIB DD card. Csect
                     name is optional. If specified, the named csect
                     must exist in the module. If omitted, the
                     csect with ESDID=0001 is disassembled.
            Format : free-form, with module name preceding csect name.
                     At least one blank must separate module name and
                     csect name. The names may be surrounded by any
                     number of blanks.
                     For example, see the JCL example.

        B. - DATA-ONLY card (optional), used to describe areas of
                     the CSECT being disassembled which contain no
                     instructions. Use of this card eliminates
                     creation of instructions from constant data.
                     Up to 256 DATA-ONLY cards may be entered. These
                     cards may occur anywhere in the SYSIN stream
                     after the MODULE-CSECT card, but not within
                     a DSECT definition set.
            Format : col  1-4  : literal DATA
                     col   5   : blank
                     col  6-11 : offset to beginning of area in hex
                     col   12  : blank
                     col 13-18 : offset to end of area in hex

        C. - DSECT definitions (optional). A DSECT is defined by a
                     header card followed by a variable number of
                     field definition cards (up to 9999 of them).
                     No other control card may be entered within a
                     DSECT definition. Up to 256 DSECT definitions
                     may be entered.
            DSECT header card format :
                     col 1-8    : DSECT name
                     col 9      : blank
                     col 10-14  : literal DSECT
                     col 15     : blank
                     col 16-19  : number of field cards to follow
                                  (decimal)
            DSECT field card format :
                     col 1-8    : field name
                     col 9      : blank
                     col 10-13  : offset to left end of field
                                  (decimal), maximum offset is 4095
                     col 14     : blank
                     col 15-17  : length of field in bytes (decimal),
                                  maximum length is 256
1   19/09/86
                                                      DISASM    4/9.

        D. - ULABL cards. These cards define user labels to be placed
                     on statements within the program. If program
                     base registers are set up with USING cards,
                     these will also be generated as symbolics
                     operands on instructions. Format is :
                     col  1-5   : literal ULABL
                     col   6    : blank
                     col  7-14  : label name
                     col  15    : blank
                     col 16-21  : offset to left end of field, in hex
                     col  22    : blank
                     col 23-25  : length of field in decimal (256
                                  is maximum)

        E. - USING cards. These cards define base register usage.
                     Up to 256 USING cards may be entered. Use
                     of these cards permits the disassembler to
                     convert explicit base-displacement addresses
                     to symbolic labels. Labels created within
                     the program will be 7 characters long. The
                     first character is A, followed by the
                     6-hex-digit offset to the label. A USING
                     card must be entered for each DSECT to be used.
            Format : col 1-5   : literal USING
                     col 6     : blank
                     col 7-12  : offset to begin loc for using range
                                 in hex (this is where the USING
                                 statement will occur)
                     col 13    : blank
                     col 14-19 : offset to ending loc for using
                                 range in hex (this is where the DROP
                                 statement will occur)
                     col 20    : blank
                     col 21    : base register to be used (hex, 1-F)
                     col 22    : blank
                     col 23    : type, P = program base
                                       D = dsect base
                     col 24    : blank
                     col 25-30 : initial base register value in hex
                                 if type P
                     col 25-32 : DSECT name if type D
1   19/09/86
                                                      DISASM    5/9.

  4. Suggestions for use :
  ------------------------

     On the first pass, do not use a SYSPUNCH DD card, but print the
   SYSPRINT listing. Use the listing to determine which registers are
   used as program base registers, their initial values, and their
   ranges. Make up USING cards for these. Find any places where no
   instructions should be generated (only constants), and make up
   DATA-ONLY cards for these ranges.
     If you can determine any registers that are bases for areas which
   can be used for DSECTs (CVT reference, etc...), determine the range
   of valid use, and make up DSECT definitions and USING cards for
   these.
     Make a second run, including the above cards, and creating a
   source program output with the SYSPUNCH DD card.

  5. Output description :
  -----------------------

    A. SYSPUNCH : this output contains the disassembled source
                  program. Statement names begin in column 1,
                  mnemonics begin in column 10, operands in column
                  16, and an occasional comment begins in column
                  44. A sequence number (by tens) is in columns
                  73-80. Comments are included to show the macro
                  name associated with svc's, and other statements
                  are flagged to aid in identification of certain
                  operations :

                  BALR 14,15              STD linkage
                  BALR X,0                address set
                  other BALR's            non-STD linkage
                  BAL 0,XXX and BAL 1,XXX parm set branch
                  BAL X,XXX               perform
                  STM instructions        save regs
                  LM  instructions        restore regs
                  BR R14                  exit
                  abs. location hex 10    CVT address
                  abs. location hex 4C    CVT address
                  other abs. locations    PSA reference

                  When used explicitly in instructions, registers
                  are specified as R0, R1, R2,... R15. A $DEFREG macro
                  is generated at the end of the program to create
                  the appropriate EQU statements. If any DSECTs
                  were defined in the SYSIN data-set, they will
                  be near the end of the source program.
                  The extended mnemonics are used for conditional
                  branches wherever possible.
1   19/09/86
                                                      DISASM    6/9.

    B. SYSPRINT content :

       Directory information : contains data from the directory
                               entry of the module containing
                               the CSECT to be disassembled.
       ESD table : a formatted list of all external symbol entries
                               found in the module.
       RLD table : a formatted listing of all relocation dictionary
                               entries pertaining to this CSECT.
       User entered cards : a list of the cards entered by the user,
                               with diagnostics, if appropriate.
       Phase 1 label table : a list of all the labels to be used
                               during disassembly including those
                               developed from ESD entries, RLD
                               entries, and generated names resulting
                               from USING and ULABL card processing.
       Text : a storage-dump formatted listing of the text which
                               comprises the CSECT being disassembled.
       Source listing : a printout of the generated source program
                               statements, including the hex value
                               which resulted in the instruction's
                               creation.

  6. Program processing description :
  -----------------------------------

     The disassembler is composed of three modules. The first is called
   DISASM. The second phase is DISASM1, and the third is DISASM2. The
   second and third phases are loaded and performed by a BALR 14,15
   from DISASM.

   DISASM functions :

      . Process the parm field, if any : set indicators used by
        DISASM1 and DISASM2.
      . Open all files.
      . Set up DISASM1 and DISASM2 instruction tables.
      . Get storage for the symbol table, RLD table, and DATA-ONLY
        tables (about 128K bytes total).
      . Process the MODULE-CSECT card to obtain the member and
        CSECT names.
      . Issue BLDL against SYSLIB to obtain directory info for the
        member specified. If the specified member is an ALIAS,
        re-issue a BLDL for the real member. Print directory
        information.
      . Point to the member in the SYSLIB PDS, and process the
        member. Load modules contain an external symbol dictionary
        followed by text and relocation dictionary information.
        All ESD info for the module precedes the first control
        record. A control record precedes each block of text.
1   19/09/86
                                                      DISASM    7/9.

        RLD info for the text follows each text block. Processing
        of load module information is as follows :
        A. Build an external symbol table, using the CESD blocks.
        B. Search for the desired CSECT as the table is being built.
           This CSECT must be found before the first control record.
        C. Read blocks until a control record for the desired CSECT
           is found (by ESD-id).
        D. When found, issue GETMAIN for an area large enough to
           contain the entire text.
        E. Place text blocks in contiguous storage locations and
           maintain during disassembly.
        F. Use RLD information for the CSECT to build the RLD table.
      . Load and perform DISASM1.
      . If any errors found by DISASM1, terminate processing.
      . Print the final label table to be used during disassembly.
      . Load and execute DISASM2.
      . Generate the $DEFREG macro statement.
      . Generate the DSECT entries if any.
      . Generate the END statement.
      . terminate processing.

   DISASM1 functions :

      DISASM1 is the second phase of disassembly, and is performed
      by DISASM. A common data area, defined in DISASM, is passed to
      this program on entry.

      The SYSIN file is read to exhaustion. USING cards are re-
      formatted and stored in a table - up to 256 USING statements
      may be entered. DSECT cards may follow the USING statements.
      When used, DSECT statements are re-formatted, and built into
      tables. A maximum of 256 DSECTs may be entered. DATA-ONLY cards
      may be included before, between, or after DSECTs to show areas
      in the program where no instructions occur. Up to 256 DATA-ONLY
      areas may be specified.

      At EOF on SYSIN, a pseudo disassembly pass is made using the
      text stored by DISASM. Any resolvable address within the text
      is used to create a new entry in the label table, which will be
      used by DISASM2 in the actual disassembly pass.

      Disassembly tables are set up similarly to those used by
      DISASM2 for the simulated disassembly performed in this module
      when any program base register USING statements are entered.

      Storage is obtained for the DSECT table and USING table, and
      addresses of these tables are stored in the common parameter
      area. USING and DSECT cards are edited, re-formatted, and
      placed in the appropriate tables. If any errors are found, they
      are printed, and the disassembly will be terminated on return
      to DISASM.
1   19/09/86
                                                      DISASM    8/9.

      Storage is obtained for the label table, and a simulated
      disassembly is performed to create label table entries for
      labels which will be generated for base-displacement addresses
      by DISASM2. On return to DISASM, these labels will be sorted
      with external symbol and RLD labels to form the final label
      table to be used by DISASM2.

   DISASM2 functions :

      This sub-program is called by DISASM after completion of
      processing by DISASM1. The final label table and module text
      is in an area of storage. A common parameter area is defined
      in DISASM, and passed to this program.

      Text bytes are used to create assembly language statements,
      and machine instruction statements. Output is written to the
      SYSPUNCH data-set for further processing by other modules.

      A text byte is considered to be an instruction if it occurs
      on a halfword boundary, is a valid op-code, and is followed
      by a valid op-code. Unconditional branches need not be
      followed by a valid op-code, however. The privileged and
      floating point instructions are not treated as instructions
      unless the user specified their inclusion at EXEC time.

  7. Installation :
  -----------------

     A. Assemble and link the three programs : DISASM0, DISASM1 and
        DISASM2.
     B. If a single load module is desired, the LOAD and BALR code
        in program DISASM0 (load and execute PHASE 1 and PHASE 2)
        may be changed to CALLs, passing the address of the common
        parameter area as a parameter. The three programs will all
        be linked into a single module with entry point DISASM, if
        this is done.
     C. If storage utilization is found to be excessive, investigate
        the possibility of reducing the size of the table GETMAINs
        in DISASM0 (see at labels SYMLGTH, RLDLGTH, DATLGTH ). The
        The programs were written for ease of use with an MVS
        Operating System, and may cause problems in a storage
        constrained environment.
     D. The svc table and instruction op-code tables in DISASM0
        should be changed for Operating System validity, and currency
        with the hardware from time to time.
1   19/09/86
                                                      DISASM    9/9.

     E. Macros used by the disassembler are included in DISASMM.
        If other macros will be used in their place, make appropriate
        source code changes in DISASM0, DISASM1, and DISASM2 before
        assembly.The $DEFREG macro is placed in each disassembled
        program (see DISASM0).
     F. Direct technical inquiries, comments, suggestions for
        improvements, etc..., to :

        1. CBT origin : Extracted from CBT tape 84 JUN, file 217.
             DICK THORNTON
             BLUE CROSS OF VIRGINIA
             2015 STAPLES MILL ROAD
             RICHMOND, VA. 23279 - Phone : (804) 359-7248

        2. Updated version (marked -EU- in columns 68-71).
             MOINIL P.A.
             COMPUTING CENTRE
             J.R.C. - ISPRA ESTABLISHMENT
             21020 ISPRA (VA); ITALY - Phone : (0332) 789442
