IZAP     TITLE '--- E T P S -- ETPSIZAP - INCORZAP INTERFACE ---'
         PRINT OFF
         COPY  ETPS$O2A            "ETPS" SYSPARM SELECTION
         MACRO
        @DST   &DUMMY
         GBLA  &IZNE
         GBLC  &IZSL(1),&IZDS(1)
         LCLA  &L,&M,&N
         AIF   (&IZNE LT 1).ERR1
*------- NUCLEUS/LPA DATA-SETS NAMES TABLE --------------------------*
NLDSTBL  DS    0CL1                START OF TABLE
&N       SETA  1
.LOOP    AIF   (&N GT &IZNE).END
         AIF   ('&IZSL(&N)' EQ '').ERR2
         AIF   ('&IZDS(&N)' EQ '').ERR3
&L       SETA  K'&IZSL(&N)
&M       SETA  K'&IZDS(&N)
         AIF   (&L NE 1).ERR4
         AIF   (&M GT 44).ERR5
         AIF   ('&IZSL(&N)'(1,1) EQ ' ').ERR6
         AIF   ('&IZDS(&N)'(1,1) EQ ' ').ERR7
         DC    CL1'&IZSL(&N)',AL1(&M-1),C'&IZDS(&N)'
&N       SETA  &N+1
         AGO   .LOOP
.ERR1    MNOTE 8,' NO. OF ELEMENTS (&IZNE) IN TABLE ERROR ********* '
         AGO   .END
.ERR2    MNOTE 8,' ACCESS-CODE (&N) MISSING *********************** '
         AGO   .END
.ERR3    MNOTE 8,' DS-NAME (&N) MISSING *************************** '
         AGO   .END
.ERR4    MNOTE 8,' ACCESS-CODE (&N) LENGTH ERROR (&L) ************* '
         AGO   .END
.ERR5    MNOTE 8,' DS-NAME (&N) LENGTH ERROR (&M) ***************** '
         AGO   .END
.ERR6    MNOTE 8,' ACCESS-CODE (&N) INVALID *********************** '
         AGO   .END
.ERR7    MNOTE 8,' DS-NAME (&N) INVALID *************************** '
.END     DC    XL1'0'              END OF TABLE
         MEND
         COPY  ETPSMACS            "ETPS" MACROS
         COPY  ETPSDEFS            "ETPS" DEFINITIONS
         PRINT ON
ETPSIZAP START 0
         SPACE 1
ETPSIZAP AMODE 24
ETPSIZAP RMODE 24
        MIDENT
         EJECT
*------- AT ENTRY, R1 = NONE (NO PARM.LIST)
         SPACE 1
         PRINT GEN
         USING *,R12,R11
         USING SAVE2,R13      ************************** R13 ==> SAVE2
         USING SPLTAREA,R10   AT ENTRY : R10 MUST POINT TO "SPLTAREA"
         B     32(,R15)
         DC    CL28'  ETPSIZAP &SYSDATE &SYSTIME'
         PRINT &PRF
         STM   R14,R12,12(R13)     SAVE INPUT REGISTERS
         LR    R12,R15             SET PROGRAM BASE REGISTER 1
         LA    R3,1
         LA    R11,4*KB-1(R3,R12)  SET PROGRAM BASE REGISTER 2
         LR    R3,R10              SPLIT-SCREEN DSECT
         SH    R3,=Y(SPLITWRK-SAVE2) POINT TO SAVE2
         ST    R13,4(,R3)          STORE BACKWARD POINTER
         ST    R3,8(R13)           STORE FORWARD POINTER
         LR    R13,R3              SET DSECT BASE
         L     R9,=A(@SIZE)
        GETMAIN RC,LV=(R9)         GET "WADATA" WORK-AREA
         LTR   R15,R15             HOW COMPLETE?
         BZ    SZSINIT             OK
        XMESS  4007,R15            ERROR
         LA    R1,ZGTMMSG
         ST    R1,MSGADD
         B     GOBACK
SZSINIT  LR    R0,R1
         LR    R9,R1
         L     R1,=A(WALEN)
         LA    R14,*
         XR    R15,R15
         MVCL  R0,R14              CLEAR ALL TO BINARY ZEROS
         USING WADATA,R9
         MVC   EYECATCH,=CL8'INCORZAP'
         MVI   ISZAC,C' '          INITIALIZATION
         LA    R0,NBRSTTS
         LA    R1,STMLNES
         MVI   0(R1),C' '
         MVC   1(L'STMLNES-1,R1),0(R1)
         LA    R1,L'STMLNES(R1)
         BCT   R0,*-14
         MVC   IZUSRID,USERID
         MVC   IZLIBDDN,N#UT1
         MVI   IZLIBDSN,C' '
         MVC   IZLIBDSN+1(L'IZLIBDSN-1),IZLIBDSN
         MVC   IZPRTDDN,N#PRINT
*- - - - SET UP THE SELECT SCREEN
SZSSTTM  LA    R4,TERMOUT+4        PICK UP ADDRESS OF FIRST OUTPUT LINE
         L     R8,SCROWS           PICK UP NUMBER OF ROWS
         CLI   SPLIT,0             AM I DOING SPLIT-SCREEN?
         BE    SZSSETNX            NOPE
         L     R8,SCROWS1          PICK UP NUMBER OF ROWS ON SCREEN 1
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   SZSSETNX            NO, GO DO IT
         SLL   R8,2                MULTIPLY BY 4
         LA    R4,TERMOUT+4(R8)    SET ADDRESS OF FIRST OUTPUT LINE
         L     R8,SCROWS2          PICK UP NUMBER OF ROWS ON SCREEN 2
SZSSETNX L     R14,0(,R4)          PICK UP ADDRESS OF FIRST OUTPUT LINE
         NI    0(R4),255-EOS       CLEAR END-OF-SCREEN
         MVC   0(IZROW1L,R14),IZROW1 FILL IN LINE1
         BCT   R8,*+L'*+4
         B     SZSCKSPL
         LA    R4,4(,R4)           BUMP
         NI    0(R4),255-EOS       CLEAR END-OF-SCREEN
         L     R14,0(,R4)          PICK UP ADDRESS OF NEXT OUTPUT LINE
         MVC   0(IZROW2L,R14),IZROW2 FILL IN LINE2
         MVC   SZSCF1(L'ISZAC,R14),ISZAC DISPLAY CURRENT ACCESS-CODE
         BCT   R8,*+L'*+4
         B     SZSCKSPL
         L     R2,=A(NLDSTBL)      DS-NAMES TABLE START ADDRESS
         XR    R15,R15
SZSSTST  LA    R4,4(,R4)           BUMP
         NI    0(R4),255-EOS       CLEAR END-OF-SCREEN
         L     R14,0(,R4)          PICK UP ADDRESS OF NEXT OUTPUT LINE
         IC    R15,1(R2)           GET DS-NAME LENGTH
         MVC   0(IZROWLL,R14),IZROWL FILL FROM LINE3
         MVC   SZOFF1(L'SZOFF1,R14),0(R2) COPY ACCESS-CODE TO SCREEN
         EX    R15,*+L'*+8         COPY DS-NAME TO SCREEN
         BCT   R8,*+L'*+10
         B     SZSCKSPL
         MVC   SZOFF2(*-*,R14),2(R2) <<EXECUTED>>
         LA    R2,3(R15,R2)        BUMP TO NEXT DS-NAME
         CLI   0(R2),0             END OF TABLE?
         BNE   SZSSTST             NO, LOOP
SZSLFILL LA    R4,4(,R4)           BUMP
         NI    0(R4),255-EOS       CLEAR END-OF-SCREEN
         L     R14,0(,R4)          PICK UP ADDRESS OF NEXT OUTPUT LINE
         MVC   0(BLNKLL,R14),BLNKL FILL IN A BLANK LINE
         BCT   R8,SZSLFILL
SZSCKSPL CLI   SPLIT,1             AM I DOING SPLIT-SCREEN 1?
         BE    *+L'*+4             YES
         OI    0(R4),EOS           NO, SET END-OF-SCREEN
         L     R15,=A(IZHELP)      HELP SCREEN
         ST    R15,HELPADD
         MVI   CURROW,CRSZSC       CURSOR ROW
         MVI   CURCOL,CCSZSC       CURSOR COLUMN
         L     R15,ARCOMM          GO COMMUNICATE
*- - - - ETPSCOMM PARM.LIST : NONE
        CALL   (15)
         LTR   R15,R15             BAD RC?
         BNZ   IZEOJ               OUT
         TM    COMMSW,PFKFLAG      PFK/ATTN ENTERED?
         BZ    SZSSTTS             NONE
         L     R2,TERMINPT         PICK UP AID ADDRESS
         CLI   0(R2),X'F3'         IS IT PF3?
         BE    IZEOJ               YUP, OUT
         CLI   0(R2),X'C3'         IS IT PF15?
         BE    IZEOJ               YUP, OUT
         CLI   0(R2),X'6C'         IS IT PA1?
         BE    IZEOJ               YUP, OUT
         CLI   0(R2),X'6D'         IS IT "CLEAR"?
         BE    SZSSTTM             YUP, RESHOW SCREEN
         CLI   0(R2),X'6E'         IS IT PA2?
         BE    SZSSTTM             YUP, RESHOW SCREEN
         LA    R1,IPFMSG
SZSTMSG  ST    R1,MSGADD
         B     SZSSTTM
*- - - - CHECK ENTERED ACCESS-CODE
SZSSTTS  L     R5,TERMINPT+SZI     PICK UP SELECT FIELD
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   *+L'*+12            NOPE
         L     R3,SCROWS1          PICK UP SIZE OF SCREEN 1
         SLL   R3,2                MULTIPLY BY 4
         L     R5,TERMINPT+SZI(R3) PICK UP SELECT FIELD
         CLI   0(R5),0             ACCESS-CODE ENTERED?
         BNE   *+L'*+12            YES
         CLI   ISZAC,C' '          NO, CURRENT EXIST?
         BNE   IZPSTTM             YES, USE IT (NO CHANGE)
         B     SZSSTTM             ELSE RESHOW SCREEN
         LA    R0,L'SZSCF1-1       LEFT JUSTIFY FIELD IF NEEDED
         CLI   SZSCF1(R5),C' '
         BNE   SZVERAC
         MVC   SZSCF1(L'SZSCF1-1,R5),SZSCF1+1(R5)
         MVI   SZSCF1+L'SZSCF1-1(R5),C' '
         BCT   R0,*-18
         MVI   ISZAC,C' '          RESET CURRENT ACCESS-CODE
         B     SZSSTTM             RESHOW SCREEN
SZVERAC  CLC   SZSCF1+1(L'SZSCF1-1,R5),=CL8' '
         BNE   SZINVMS
         L     R4,=A(NLDSTBL)      DS-NAMES TABLE START ADDRESS
         XR    R15,R15
SZTLOOP  CLC   0(1,R4),SZSCF1(R5)  IS THIS ACCESS-CODE?
         BE    SZFOUND             YES
         IC    R15,1(R4)           NO, GET DS-NAME LENGTH
         LA    R4,3(R15,R4)        BUMP TO NEXT DS-NAME
         CLI   0(R4),0             END OF TABLE?
         BNE   SZTLOOP             NO, LOOP
SZINVMS  LA    R1,INVMSG           ELSE INVALID
         B     SZSTMSG
SZMVDSN  MVC   IZLIBDSN(*-*),2(R4) <<EXECUTED>>
SZFOUND  CLC   ISZAC,0(R4)         IS IT THE CURRENT ONE?
         BE    IZPSTTM             YES
         CLI   IZLIBDSN,C' '       NO, PREVIOUS "LIB" ALLOCATED?
         BE    SZSTNEW             NO
         MVI   ISZAC,C' '          YES, RESET CURRENT ACCESS-CODE
         MVI   IZLIBDSN,C' '       CLEAR "LIB" DS-NAME
         MVC   IZLIBDSN+1(L'IZLIBDSN-1),IZLIBDSN
         L     R7,DYNWORKP         INITIALIZE DYNAMIC ALLOCATION WORK
         LR    R2,R7
         LH    R3,=Y(PARMLLEN)     LENGTH TO BE CLEARED
         LA    R14,*
         XR    R15,R15
         ICM   R15,B'1000',=CL8' '
         MVCL  R2,R14              CLEAR TO ALL BLANKS
         USING PARMLIST,R7
         MVI   DSNAME,0            INDICATE FREE REQUEST
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         MVC   DDNAME,IZLIBDDN     DD-NAME
         L     R15,ARDYNAM
*- - - - ETPSDYNA PARM.LIST : "DYNWORKP" ADDRESS
        CALL   (15),MF=(E,DYNWORKP)
         LTR   R15,R15             HOW COMPLETE?
         BZ    SZSTNEW             OK
        XMESS  4002
         LA    R1,ZFLBMSG
         B     SZSTMSG
SZSTNEW  MVC   ISZAC,0(R4)         SET THE NEW CURRENT
         IC    R15,1(R4)           GET DS-NAME LENGTH
         EX    R15,SZMVDSN         SET NEW "LIB" DS-NAME
         L     R7,DYNWORKP         INITIALIZE DYNAMIC ALLOCATION WORK
         LR    R2,R7
         LH    R3,=Y(PARMLLEN)     LENGTH TO BE CLEARED
         LA    R14,*
         XR    R15,R15
         ICM   R15,B'1000',=CL8' '
         MVCL  R2,R14              CLEAR TO ALL BLANKS
         MVC   DDNAME,IZLIBDDN     DD-NAME
         MVC   DSNAME,IZLIBDSN     DS-NAME
         MVC   DSSTATUS,=CL8'SHR'  DISP=SHR
         L     R15,ARDYNAM
*- - - - ETPSDYNA PARM.LIST : "DYNWORKP" ADDRESS
        CALL   (15),MF=(E,DYNWORKP)
         LTR   R15,R15             HOW COMPLETE?
         BZ    IZPSTTM             OK
        XMESS  4001
         LA    R1,ZLLBMSG
         B     SZSTMSG
         DROP  R7
*- - - - SET UP THE STATEMENTS SCREEN
IZPSTTM  LA    R4,TERMOUT+4        PICK UP ADDRESS OF FIRST OUTPUT LINE
         L     R8,SCROWS           PICK UP NUMBER OF ROWS
         CLI   SPLIT,0             AM I DOING SPLIT-SCREEN?
         BE    IZPSETNX            NOPE
         L     R8,SCROWS1          PICK UP NUMBER OF ROWS ON SCREEN 1
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   IZPSETNX            NO, GO DO IT
         SLL   R8,2                MULTIPLY BY 4
         LA    R4,TERMOUT+4(R8)    SET ADDRESS OF FIRST OUTPUT LINE
         L     R8,SCROWS2          PICK UP NUMBER OF ROWS ON SCREEN 2
IZPSETNX L     R14,0(,R4)          PICK UP ADDRESS OF FIRST OUTPUT LINE
         NI    0(R4),255-EOS       CLEAR END-OF-SCREEN
         MVC   0(ISZROW1L,R14),ISZROW1 FILL IN LINE1
         BCT   R8,*+L'*+4
         B     IZPCKSPL
         LA    R4,4(,R4)           BUMP
         NI    0(R4),255-EOS       CLEAR END-OF-SCREEN
         L     R14,0(,R4)          PICK UP ADDRESS OF NEXT OUTPUT LINE
         MVC   0(ISZROW2L,R14),ISZROW2 FILL IN LINE2
         BCT   R8,*+L'*+4
         B     IZPCKSPL
         LA    R4,4(,R4)           BUMP
         NI    0(R4),255-EOS       CLEAR END-OF-SCREEN
         L     R14,0(,R4)          PICK UP ADDRESS OF NEXT OUTPUT LINE
         MVC   0(ISZROW3L,R14),ISZROW3 FILL IN LINE3
         BCT   R8,*+L'*+4
         B     IZPCKSPL
         LA    R15,STMLNES         STATEMENTS START ADDRESS
         LA    R0,NBRSTTS          NUMBER OF STATEMENTS LINES
IZPSTST  LA    R4,4(,R4)           BUMP
         NI    0(R4),255-EOS       CLEAR END-OF-SCREEN
         L     R14,0(,R4)          PICK UP ADDRESS OF NEXT OUTPUT LINE
         MVC   0(ISZROW4L,R14),ISZROW4 FILL FROM LINE4
         MVC   IZSCF1(L'IZSCF1,R14),1(R15) COPY STATEMENTS TO SCREEN
         BCT   R8,*+L'*+4
         B     IZPCKSPL
         LA    R15,L'STMLNES(R15)  BUMP TO NEXT STATEMENT
         BCT   R0,IZPSTST
IZPLFILL LA    R4,4(,R4)           BUMP
         NI    0(R4),255-EOS       CLEAR END-OF-SCREEN
         L     R14,0(,R4)          PICK UP ADDRESS OF NEXT OUTPUT LINE
         MVC   0(BLNKLL,R14),BLNKL FILL IN A BLANK LINE
         BCT   R8,IZPLFILL
IZPCKSPL CLI   SPLIT,1             AM I DOING SPLIT-SCREEN 1?
         BE    *+L'*+4             YES
         OI    0(R4),EOS           NO, SET END-OF-SCREEN
         L     R15,=A(ISZHELP)     HELP SCREEN
         ST    R15,HELPADD
         MVI   CURROW,CRIZSC       CURSOR ROW
         MVI   CURCOL,CCIZSC       CURSOR COLUMN
         L     R15,ARCOMM          GO COMMUNICATE
*- - - - ETPSCOMM PARM.LIST : NONE
        CALL   (15)
         LTR   R15,R15             BAD RC?
         BNZ   IZEOJ               OUT
*- - - - CHECK TO SEE WHETHER INCORZAP STATEMENTS WAS ENTERED
         L     R2,TERMINPT         PICK UP AID ADDRESS
         LA    R4,TERMINPT+ZSI     SET START ADDRESS OF REPLY FIELDS
         L     R8,SCROWS           PICK UP NUMBER OF ROWS
         CLI   SPLIT,0             AM I DOING SPLIT-SCREEN?
         BE    IZPFMTPF            NOPE
         L     R8,SCROWS1          PICK UP NUMBER OF ROWS ON SCREEN 1
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   IZPFMTPF            NO, GO TEST PFKEY
         SLL   R8,2                MULTIPLY BY 4
         LA    R4,TERMINPT+ZSI(R8) SET START ADDRESS OF REPLY FIELDS
         L     R8,SCROWS2          PICK UP NUMBER OF ROWS ON SCREEN 2
IZPFMTPF TM    COMMSW,PFKFLAG      PFK/ATTN ENTERED?
         BZ    IZPSTTS             NONE
         CLI   0(R2),X'F3'         IS IT PF3?
         BE    SZSSTTM             YES, BACK TO SELECT PANEL
         CLI   0(R2),X'C3'         IS IT PF15?
         BE    SZSSTTM             YES, BACK TO SELECT PANEL
         CLI   0(R2),X'6C'         IS IT PA1?
         BE    SZSSTTM             YES, BACK TO SELECT PANEL
         CLI   0(R2),X'6D'         IS IT "CLEAR"?
         BE    IZPSTTM             YUP, RESHOW SCREEN
         CLI   0(R2),X'6E'         IS IT PA2?
         BE    IZPSTTM             YES, RESHOW SCREEN
         LA    R1,IPFMSG
         ST    R1,MSGADD
*- - - - SET UP INCORZAP STATEMENTS
IZPSTTS  NI    ISZSW,255-STTXENT   RESET TEXT-ENTERED
         LA    R15,STMLNES         STATEMENTS START ADDRESS
         LA    R0,NBRSTTS          NUMBER OF STATEMENTS LINES
GETSTTS  BCT   R8,*+L'*+4          START SKIPPING LINE1
         B     ENDSTTS
         L     R14,0(,R4)          PICK UP ADDRESS OF INPUT LINE
         CLI   0(R14),0            STATEMENT ENTERED?
         BE    NXTSTTS             NOPE
         MVC   1(L'STMLNES-1,R15),0(R15)
         OC    1(L'IZSCF1,R15),IZSCF1(R14) COPY TEXT IN UPPERCASE
         OI    ISZSW,STTXENT       SET TEXT-ENTERED
NXTSTTS  BCT   R0,*+L'*+4
         B     ENDSTTS
         LA    R4,4(,R4)           BUMP
         LA    R15,L'STMLNES(R15)  BUMP TO NEXT STATEMENT
         B     GETSTTS
ENDSTTS  TM    COMMSW,PFKFLAG      PFK/ATTN ENTERED?
         BO    IZPSTTM             YES, IT WAS AN INVALID PF-KEY
         TM    ISZSW,STTXENT       IS TEXT JUST ENTERED?
         BO    IZPSTTM             YES, WAIT EMPTY PRESS ENTER-KEY
         LA    R15,STMLNES         STATEMENTS START ADDRESS
         LA    R0,NBRSTTS          NUMBER OF STATEMENTS LINES
         CLC   1(L'IZSCF1,R15),=CL71' ' IS THERE A STATEMENT?
         BNE   *+L'*+12            YES
         LA    R15,L'STMLNES(R15)  NO, BUMP TO NEXT STATEMENT
         BCT   R0,*-14
         B     IZPSTTM             NONE, NO STATEMENT(S)
         MVI   IZPRTDSN,C' '       CLEAR "PRT" DS-NAME
         MVC   IZPRTDSN+1(L'IZPRTDSN-1),IZPRTDSN
         MVC   IZPRTVOL(L'IZPRTVOL),IZPRTDSN CLEAR "PRT" VOL-SER
         L     R15,=A(ETPSINCZ)
*- - - - ETPSINCZ PARM.LIST : NONE
        CALL   (15)                INVOKE INCORZAP PROGRAM
         LTR   R1,R1               IS THERE A MESSAGE?
         BNZ   IZMSST              YES
         LTR   R15,R15             NO, IS THERE A RC?
         BZ    IZPTST              NO
         MVC   IZMSGWA(INCZRCL),INCZRC YES, DISPLAY IT
         CVD   R15,DBLWRD
         MVC   DBLWRD(4),=XL4'40202120'
         ED    DBLWRD(4),DBLWRD+L'DBLWRD-2
         MVC   IZMSGWA+INCZRCL-2(2),DBLWRD+2
         LA    R1,IZMSGWA
IZMSST   ST    R1,MSGADD           SET MESSAGE
IZPTST   CLI   IZPRTDSN,C' '       IS THERE A "PRT" DS-NAME?
         BE    IZPSTTM             NO, BACK TO ENTER STATEMENT(S)
*- - - - BUILD "PRT" ENTRY SCREEN
         NI    ISZSW,255-ZPRVIEW-ZPRDEL-ZPRALT RESET ALL
ZPRSBLD  L     R5,=A(ZPRSCR)
         L     R4,SCROWS1          NUMBER OF ROWS IN SCREEN 1
         LA    R3,TERMOUT+4        POINT TO FIRST LINE OF SCREEN 1
         CLI   SPLIT,2             AM I ON SCREEN 2
         BNE   ZPRSBLD1            NOPE, I'M ALL SET
         SLL   R4,2                MULTIPLY OFFSET BY 4
         LA    R3,TERMOUT+4(R4)    POINT TO ROW 1 OF SCREEN 2
         L     R4,SCROWS2          NUMBER OF ROWS IN SCREEN 2
ZPRSBLD1 NI    0(R3),255-EOS       CLEAR END-OF-SCREEN
         L     R2,0(,R5)           ADDRESS OF FROM FIELD
         L     R6,0(,R3)           ADDRESS OF "TO" FIELD
         XR    R1,R1
         IC    R1,0(,R2)           PICK UP LENGTH
         EX    R1,ZPRSMVL          MOVE IT
         CLC   ZPOFF1(10,R6),=CL10'PRINT VIEW' VIEWING?
         BNE   ZPRSBLD2            NO
         TM    ISZSW,ZPRVIEW       YES
         BO    *+L'*+10
         MVC   ZPSCF1(2,R6),=CL2'NO' SET "NO"
         B     ZPRSBLD3            DO THE REST
         MVC   ZPSCF1(3,R6),=CL3'YES' SET "YES"
         B     ZPRSBLD3            DO THE REST
ZPRSMVL  MVC   0(*-*,R6),0(R2)     <<EXECUTED>>
ZPRSBLD2 CLC   ZPOFF2(8,R6),=CL8'AND / OR' DELETE?
         BNE   ZPRSBLD3            NO
         TM    ISZSW,ZPRDEL        YES
         BO    *+L'*+10
         MVC   ZPSCF2(2,R6),=CL2'NO' SET "NO"
         B     ZPRSBLD3            DO THE REST
         MVC   ZPSCF2(3,R6),=CL3'YES' SET "YES"
ZPRSBLD3 TM    0(R5),EOL           END-OF-LIST?
         BO    ZPRSBLD4            YUP
         BCT   R4,*+L'*+4          END OF SCREEN ROWS?
         B     ZPRSBLD5            YUP
         LA    R5,4(R5)            BUMP TO NEXT PARM
         LA    R3,4(R3)            BUMP TO NEXT PARM
         B     ZPRSBLD1            KEEP LOOPING
ZPRSBLD4 BCT   R4,*+L'*+4          END OF SCREEN ROWS?
         B     ZPRSBLD5            YUP
         LA    R3,4(R3)            BUMP TO NEXT PARM
         L     R6,0(,R3)           ADDRESS OF "TO" FIELD
         NI    0(R3),255-EOS       CLEAR END-OF-SCREEN
         MVC   0(ZDUMML,R6),ZDUMM  MOVE IN A DUMMY ROW
         B     ZPRSBLD4            KEEP LOOPING
ZPRSBLD5 CLI   SPLIT,1             AM I IN SPLIT-SCREEN, SCREEN 1?
         BE    *+L'*+4             YES
         OI    0(R3),EOS           SET END-OF-SCREEN
         L     R15,=A(ZPRHELP)     HELP SCREEN
         ST    R15,HELPADD
         TM    ISZSW,ZPRALT        ALTERNATE POSITION?
         BO    *+L'*+12            YES
         MVI   CURROW,CRZPSC       CURSOR ROW
         MVI   CURCOL,CCZPSC       CURSOR COLUMN
         B     *+L'*+8
         MVI   CURROW,CRAPSC       ALTERNATE CURSOR ROW
         MVI   CURCOL,CCAPSC       ALTERNATE CURSOR COLUMN
         L     R15,ARCOMM          GO COMMUNICATE
*- - - - ETPSCOMM PARM.LIST : NONE
        CALL   (15)
         LTR   R15,R15             BAD RC?
         BNZ   IZEOJ               YUP
         TM    COMMSW,PFKFLAG      IS IT A PF KEY/ATTN?
         BZ    ZPCKINPT            NOPE, GO CHECK THE INPUT
         L     R2,TERMINPT         PICK UP AID ADDRESS
         CLI   0(R2),X'F3'         IS IT PF3?
         BE    ZPCKINPT            YUP, LIKE ENTER
         CLI   0(R2),X'C3'         IS IT PF15?
         BE    ZPCKINPT            YUP, LIKE ENTER
         CLI   0(R2),X'6C'         IS IT PA1?
         BE    IZPSTTM             YUP, FORCE LIKE NO VIEW / NO DELETE
         CLI   0(R2),X'6D'         IS IT "CLEAR"?
         BE    ZPRSBLD             YUP, RESHOW SCREEN
         CLI   0(R2),X'6E'         IS IT PA2?
         BE    ZPRSBLD             YUP, RESHOW SCREEN
         LA    R1,IPFMSG
ZPSTMSG  ST    R1,MSGADD
         B     ZPRSBLD             RESHOW SCREEN
*- - - - CHECK ENTERED "PRT" SELECTIONS
ZPCKINPT NI    ISZSW,255-ZPRALT-ZPRPOC RESET ALTERNATE AND CHANGED
         L     R5,TERMINPT+ZPZ1    PICK UP VIEWING FIELD
         L     R6,TERMINPT+ZPZ2    PICK UP DELETE FIELD
         CLI   SPLIT,2             AM I ON SCREEN 2?
         BNE   ZPCKINPV            NOPE
         L     R3,SCROWS1          PICK UP SIZE OF SCREEN 1
         SLL   R3,2                MULTIPLY BY 4
         L     R5,TERMINPT+ZPZ1(R3) PICK UP VIEWING FIELD
         L     R6,TERMINPT+ZPZ2(R3) PICK UP DELETE FIELD
ZPCKINPV CLI   0(R5),0             VIEWING ENTERED (OR CHANGED)?
         BE    ZPCKINPD            NO
         OI    ISZSW,ZPRPOC        YES, SAY PANEL OPTION CHANGED
         LA    R0,L'ZPSCF1-1       LEFT JUSTIFY FIELD IF NEEDED
         CLI   ZPSCF1(R5),C' '
         BNE   ZPSTVW
         MVC   ZPSCF1(L'ZPSCF1-1,R5),ZPSCF1+1(R5)
         MVI   ZPSCF1+L'ZPSCF1-1(R5),C' '
         BCT   R0,*-18
ZPRSVW   NI    ISZSW,255-ZPRVIEW   RESET VIEW REQUEST
         B     ZPCKINPD
ZPSTVW   CLI   ZPSCF1(R5),C'N'
         BE    ZPRSVW
         CLI   ZPSCF1(R5),C'Y'
         BE    *+L'*+8
         LA    R1,IOPMSG
         B     ZPSTMSG
         OI    ISZSW,ZPRVIEW       SET VIEW REQUESTED
ZPCKINPD CLI   0(R6),0             DELETE ENTERED?
         BE    ZPROCHK             NO
         OI    ISZSW,ZPRPOC        YES, SAY PANEL OPTION CHANGED
         LA    R0,L'ZPSCF2-1       LEFT JUSTIFY FIELD IF NEEDED
         CLI   ZPSCF2(R6),C' '
         BNE   ZPSTDL
         MVC   ZPSCF2(L'ZPSCF2-1,R6),ZPSCF2+1(R6)
         MVI   ZPSCF2+L'ZPSCF2-1(R6),C' '
         BCT   R0,*-18
ZPRSDL   NI    ISZSW,255-ZPRDEL    RESET DELETE REQUEST
         B     ZPROCHK
ZPSTDL   CLI   ZPSCF2(R6),C'N'
         BE    ZPRSDL
         CLI   ZPSCF2(R6),C'Y'
         BE    *+L'*+12
         OI    ISZSW,ZPRALT
         LA    R1,IOPMSG
         B     ZPSTMSG
         OI    ISZSW,ZPRDEL        SET VIEW REQUESTED
ZPROCHK  TM    ISZSW,ZPRPOC        ANY OPTION CHANGED?
         BO    ZPRSBLD             YES, RESHOW
         TM    ISZSW,ZPRVIEW+ZPRDEL HOW SELECTION IS?
         BZ    ZPKEPT              NO VIEW / NO DELETE
         TM    ISZSW,ZPRVIEW       VIEW REQUESTED?
         BZ    ZPBRWOK             NO
         ICM   R15,B'1111',ARBROWSE YES, VERIFY BROWSE AVAILABLE?
         BNZ   ZPBRWOK             YES, OK
        LOAD   EP=ETPSBROW,ERRET=ZLBRERR
         ST    R0,ARBROWSE         LOADED, OK
*- - - - PROCESS THE "PRT" DATA-SET
ZPBRWOK  L     R7,DYNWORKP         INITIALIZE DYNAMIC ALLOCATION WORK
         LR    R2,R7
         LH    R3,=Y(PARMLLEN)     LENGTH TO BE CLEARED
         LA    R14,*
         XR    R15,R15
         ICM   R15,B'1000',=CL8' '
         MVCL  R2,R14              CLEAR TO ALL BLANKS
         USING PARMLIST,R7
         MVC   DSNAME,IZPRTDSN     DS-NAME
         MVC   DSVOLSER,IZPRTVOL   VOL-SER
         MVC   DSSTATUS,=CL8'SHR'  SET DISP=SHR
         TM    ISZSW,ZPRDEL        DELETE REQUESTED?
         BZ    *+L'*+12            NO
         MVC   DSNDISP,=CL8'UNCATLG' YES, SET DISP=(SHR,UNCATLG,KEEP)
         MVC   DSADISP,=CL8'KEEP'
         L     R4,ACOPDCB          PICK UP LIBRARY ADDRESS
         MVC   DDNAME(L'DDNAME),DCBDDNAM-IHADCB(R4) DDNAME
         MVC   0(ZPRDCBL,R4),ZPRDCB MOVE DCB SKELETON
         MVC   DCBDDNAM-IHADCB(L'DCBDDNAM,R4),DDNAME SET BACK DDNAME
         L     R15,ARDYNAM
*- - - - ETPSDYNA PARM.LIST : "DYNWORKP" ADDRESS
        CALL   (15),MF=(E,DYNWORKP)
         LTR   R15,R15             HOW COMPLETE?
         BZ    ZPALLOK             OK
        XMESS  4003
         TM    ISZSW,ZPRVIEW       VIEW REQUESTED?
         BZ    *+L'*+8             NO
         LA    R1,ZPRVMSG          YES
         B     ZPRTMSG             YUP - ALL DONE
         LA    R1,ZPRUMSG
ZPRTMSG  ST    R1,MSGADD           YUP - ALL DONE
         B     IZPSTTM             BACK TO ENTER STATEMENT(S)
ZPALLOK  TM    ISZSW,ZPRVIEW       VIEW REQUESTED?
         BZ    ZPFREE              NO
         LA    R2,IZPRTDSN         YES
         LA    R3,=CL8' '
         L     R15,ARBROWSE
*- - - - ETPSBROW PARM.LIST : DCB, DS-NAME, MEMBER-NAME
        CALL   (15),((R4),(R2),(R3)),VL,MF=(E,PARMVL)
ZPFREE   LR    R0,R7               INITIALIZE DYNAMIC ALLOCATION WORK
         LH    R1,=Y(PARMLLEN)     LENGTH TO BE CLEARED
         LA    R14,*
         XR    R15,R15
         ICM   R15,B'1000',=CL8' '
         MVCL  R0,R14              CLEAR TO ALL BLANKS
         MVI   DSNAME,0            INDICATE FREE REQUEST
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         MVC   DDNAME(L'DDNAME),DCBDDNAM-IHADCB(R4) DDNAME
         L     R15,ARDYNAM
*- - - - ETPSDYNA PARM.LIST : "DYNWORKP" ADDRESS
        CALL   (15),MF=(E,DYNWORKP)
         LTR   R15,R15             HOW COMPLETE?
         BZ    ZPFROK              OK
        XMESS  4004
         TM    ISZSW,ZPRVIEW       VIEW REQUESTED?
         BZ    *+L'*+8             NO
         LA    R1,ZFPVMSG          YES
         B     ZPRTMSG             YUP - ALL DONE
         LA    R1,ZFPUMSG
         B     ZPRTMSG             YUP - ALL DONE
ZPFROK   TM    ISZSW,ZPRDEL        DELETE REQUESTED?
         BO    ZPDEL               YES
ZPKEPT   LA    R1,ZPKMSG           NO, KEPT
         B     ZPRTMSG
ZPDEL    LR    R2,R7               INITIALIZE DYNAMIC ALLOCATION WORK
         LH    R3,=Y(PARMLLEN)     LENGTH TO BE CLEARED
         LA    R14,*
         XR    R15,R15
         ICM   R15,B'1000',=CL8' '
         MVCL  R2,R14              CLEAR TO ALL BLANKS
         MVC   DSNAME,IZPRTDSN     DS-NAME
         MVC   DSVOLSER,IZPRTVOL   VOL-SER
         MVC   DSSTATUS,=CL8'SHR'  SET DISP=SHR
         MVC   DSNDISP,=CL8'DELETE' SET DISP=(SHR,DELETE,DELETE)
         MVC   DSADISP,=CL8'DELETE'
         L     R4,ACOPDCB          PICK UP LIBRARY ADDRESS
         MVC   DDNAME(L'DDNAME),DCBDDNAM-IHADCB(R4) GET DDNAME FOR USE
         L     R15,ARDYNAM
*- - - - ETPSDYNA PARM.LIST : "DYNWORKP" ADDRESS
        CALL   (15),MF=(E,DYNWORKP)
         LTR   R15,R15             HOW COMPLETE?
         BZ    ZPDLAOK             OK
        XMESS  4003
         LA    R1,ZPRDMSG
         B     ZPRTMSG             YUP - ALL DONE
ZPDLAOK  LR    R0,R7               INITIALIZE DYNAMIC ALLOCATION WORK
         LH    R1,=Y(PARMLLEN)     LENGTH TO BE CLEARED
         LA    R14,*
         XR    R15,R15
         ICM   R15,B'1000',=CL8' '
         MVCL  R0,R14              CLEAR TO ALL BLANKS
         MVI   DSNAME,0            INDICATE FREE REQUEST
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         MVC   DDNAME(L'DDNAME),DCBDDNAM-IHADCB(R4) DDNAME
         L     R15,ARDYNAM
*- - - - ETPSDYNA PARM.LIST : "DYNWORKP" ADDRESS
        CALL   (15),MF=(E,DYNWORKP)
         LTR   R15,R15             HOW COMPLETE?
         BNZ   *+L'*+8             WITH ERROR
         LA    R1,ZPDMSG           OK
         B     ZPRTMSG             YUP - ALL DONE
        XMESS  4004
         LA    R1,ZFPDMSG
         B     ZPRTMSG             YUP - ALL DONE
         DROP  R7
ZLBRERR  STM   R0,R1,MESSPL        BROWSE IS UNAVAILABLE
        XMESS  99,R15
         LA    R1,BLDMSG
         B     ZPRTMSG             YUP - ALL DONE
*- - - - TERMINATE INCORZAP INTERFACE
IZEOJ    CLI   IZLIBDSN,C' '       ANY "LIB" ALLOCATED?
         BE    LEAVE               NO
         L     R7,DYNWORKP         INITIALIZE DYNAMIC ALLOCATION WORK
         LR    R2,R7
         LH    R3,=Y(PARMLLEN)     LENGTH TO BE CLEARED
         LA    R14,*
         XR    R15,R15
         ICM   R15,B'1000',=CL8' '
         MVCL  R2,R14              CLEAR TO ALL BLANKS
         USING PARMLIST,R7
         MVI   DSNAME,0            INDICATE FREE REQUEST
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         MVC   DDNAME,IZLIBDDN     DD-NAME
         L     R15,ARDYNAM
*- - - - ETPSDYNA PARM.LIST : "DYNWORKP" ADDRESS
        CALL   (15),MF=(E,DYNWORKP)
         LTR   R15,R15             HOW COMPLETE?
         BZ    LEAVE               OK
        XMESS  4002
         LA    R1,ZFLBMSG
         ST    R1,MSGADD
LEAVE    L     R0,=A(@SIZE)
        FREEMAIN R,LV=(0),A=(R9)
GOBACK   L     R13,4(,R13)         PICK UP CALLING SAVE-AREA
         LM    R14,R12,12(R13)     RESTORE CALLING REGISTERS
         XR    R15,R15             SET RC=0
         BR    R14                 RETURN
         SPACE 1
ZDUMM    DC    AL1(ZDUMML-1),XL1'04',CL9' '
ZDUMML   EQU   *-ZDUMM
         SPACE 1
IPFMSG   MSG   'INVALID PF-KEY'
INCZRC   MSG   'INCORZAP RC=XX'
INCZRCL  EQU   *-INCZRC
ZPKMSG   MSG   'IZAP "PRT" KEPT'
ZFLBMSG  MSG   'FREE "LIB" FAILED'
ZLLBMSG  MSG   'ALLOC "LIB" FAILED'
BLDMSG   MSG   'BROWSE UNAVAILABLE'
ZPDMSG   MSG   'IZAP "PRT" DELETED'
INVMSG   MSG   'INVALID ACCESS-CODE'
ZFPVMSG  MSG   'FREE "PRT"/V FAILED'
ZFPUMSG  MSG   'FREE "PRT"/U FAILED'
ZFPDMSG  MSG   'FREE "PRT"/D FAILED'
ZGTMMSG  MSG   'IN-ZAP GETMAIN ERROR'
IOPMSG   MSG   'INVALID OPTION (N/Y)'
ZPRVMSG  MSG   'ALLOC "PRT"/V FAILED'
ZPRUMSG  MSG   'ALLOC "PRT"/U FAILED'
ZPRDMSG  MSG   'ALLOC "PRT"/D FAILED'
         SPACE 1
IZROW1   DC    AL1(IZROW1L-1)
         DC    XL1'05',10CL1'-'    PROTECT, HIGH-LIGHT
         DC    CL35' INCORZAP INTERFACE - SELECT PANEL ',34CL1'-'
IZROW1L  EQU   *-IZROW1
CRSZSC   EQU   01                  CURSOR ROW ON LINE BELOW
SZI      EQU   (CRSZSC+1)*4        "TERMINPT" DISPLACEMENT
IZROW2   DC    AL1(IZROW2L-1)
         DC    XL1'05'             PROTECT, HIGH-LIGHT
         DC    CL22'ENTER ACCESS-CODE ===>'
CCSZSC   EQU   (*-IZROW2)          CURSOR COLUMN ON FIELD BELOW
SZSCF1   EQU   (*-IZROW2)+1,6      INPUT FIELD 1
         DC    XL1'01',CL6' '      SF UNPROTECTED
         DC    XL1'04',CL16'(SEE LIST BELOW)' SF PROTECTED
IZROW2L  EQU   *-IZROW2
IZROWL   DC    AL1(IZROWLL-1)
         DC    XL1'04',CL4' '      SF PROTECTED
SZOFF1   EQU   (*-IZROWL)+1,1
         DC    XL1'05',CL1' '      PROTECT, HIGH-LIGHT
         DC    XL1'04',CL2'- '     SF PROTECTED
SZOFF2   EQU   (*-IZROWL)+0,44
         DC    CL44' ',CL2' '
IZROWLL  EQU   *-IZROWL
         SPACE 1
ISZROW1  DC    AL1(ISZROW1L-1)
         DC    XL1'05',10CL1'-'    PROTECT, HIGH-LIGHT
         DC    CL34' INCORZAP INTERFACE - ENTRY PANEL ',35CL1'-'
ISZROW1L EQU   *-ISZROW1
ISZROW2  DC    AL1(ISZROW2L-1)
         DC    XL1'05'             PROTECT, HIGH-LIGHT
         DC    C'ENTER STATEMENTS (CARD COL.2-72) BELOW:'
         DC    XL1'04',CL1' '
ISZROW2L EQU   *-ISZROW2
ISZROW3  DC    AL1(ISZROW3L-1)
         DC    XL1'04',CL6' '
         DC    CL71'---+----1----+----2----+----3----+----4----+----5--X
               --+----6----+----7--',CL2' '
ISZROW3L EQU   *-ISZROW3
CRIZSC   EQU   03                  CURSOR ROW ON LINE BELOW
ZSI      EQU   (CRIZSC+1)*4        "TERMINPT" DISPLACEMENT
ISZROW4  DC    AL1(ISZROW4L-1)
         DC    XL1'05',CL5' ===>'
CCIZSC   EQU   *-ISZROW4           CURSOR COLUMN ON FIELD BELOW
IZSCF1   EQU   (*-ISZROW4)+1,71    INPUT FIELD 1
         DC    XL1'01',CL71' ',XL1'05',CL1'<'
ISZROW4L EQU   *-ISZROW4
         SPACE 1
BLNKL    DC    AL1(BLNKLL-1),XL1'04',CL9' '
BLNKLL   EQU   *-BLNKL
         PRINT &PRS
        LTORG
         PRINT &PRF
ZPRDCB  DCB    DSORG=PS,MACRF=(GM,PM),DDNAME=DUMMY,EODAD=*-*,SYNAD=*-*
ZPRDCBL  EQU   *-ZPRDCB
         SPACE 1
         DROP  R9,R10,R11,R12,R13
        @DST   ,                   DATA-SETS NAMES TABLE
         EJECT
*------- INCORZAP SELECT HELP SCREEN --------------------------------*
         CNOP  0,4
IZHELP   DC    A(IZHL1)
         DC    A(HLPENT)
         DC    A(IZHL2)
         DC    A(IZHL3)
         DC    A(IZHL4)
         DC    A(IZHL5)
         DC    A(IZHL6)
         DC    A(IZHL7)
         DC    A(IZHL8)
         DC    A(IZHL9)
         DC    A(IZHL10)
         DC    A(IZHL11)
         DC    A(IZHL12)
         DC    A(IZHL13)
         DC    A(LNEBLK)
         DC    A(IZHL14)
         DC    A(IZHL15)
         DC    A(IZHL16)
         DC    A(IZHL17)
         DC    A(LNEBLK)
         DC    A(EML+IZHL18)
         SPACE 1
IZHL1    DC    AL1(IZHL1L-1)       ROW 01, COL 01
         DC    XL1'05',10CL1'-'    PROTECT, HIGH-LIGHT
         DC    CL20' INCORZAP INTERFACE ',49CL1'-'
IZHL1L   EQU   *-IZHL1
*                ----+----1----+----2----+----3----+----4----+----5----
*              +----6----+----7----+----
IZHL2    DC    AL1(IZHL2L-1),XL1'05'
         DC    C'MAIN STORAGE SUPERZAP FOR MVS : INSPECT OR MODIFY LOADX
                MODULES IN THE NUCLEUS'
IZHL2L   EQU   *-IZHL2
IZHL3    DC    AL1(IZHL3L-1),XL1'05'
         DC    C'    OR IN THE LINK PACK AREA.'
IZHL3L   EQU   *-IZHL3
IZHL4    DC    AL1(IZHL4L-1),XL1'05'
         DC    C'ONCE A MODULE IS LOADED INTO MAIN STORAGE, CSECT INFORX
               MATION IS GENERALLY NOT'
IZHL4L   EQU   *-IZHL4
IZHL5    DC    AL1(IZHL5L-1),XL1'05'
         DC    C'    AVAILABLE (THE MVS/XA NUCLEUS IS AN EXCEPTION). FOX
               R THIS REASON MOST'
IZHL5L   EQU   *-IZHL5
IZHL6    DC    AL1(IZHL6L-1),XL1'05'
         DC    C'    OTHER MECHANISMS TO MODIFY MAIN STORAGE WORK WITH X
               ABSOLUTE ADDRESSES OR'
IZHL6L   EQU   *-IZHL6
IZHL7    DC    AL1(IZHL7L-1),XL1'05'
         DC    C'    LOAD MODULES ONLY.'
IZHL7L   EQU   *-IZHL7
IZHL8    DC    AL1(IZHL8L-1),XL1'05'
         DC    C'INCORZAP READS THE LIBRARY FROM WHICH THE MAIN STORAGEX
                VERSION OF THE MODULE'
IZHL8L   EQU   *-IZHL8
IZHL9    DC    AL1(IZHL9L-1),XL1'05'
         DC    C'    WAS LOADED IN ORDER TO DETERMINE CSECT PLACEMENT IX
               NFORMATION. THIS IS THEN'
IZHL9L   EQU   *-IZHL9
IZHL10   DC    AL1(IZHL10L-1),XL1'05'
         DC    C'    USED BY INCORZAP TO PERMIT CSECT LEVEL REFERENCES X
               AND CHANGES.'
IZHL10L  EQU   *-IZHL10
IZHL11   DC    AL1(IZHL11L-1),XL1'05'
         DC    C'SO, ENTER THE "ACCESS-CODE" TO INDICATE THE CORRESPONDX
               ING SYSTEM LIBRARY FROM'
IZHL11L  EQU   *-IZHL11
IZHL12   DC    AL1(IZHL12L-1),XL1'05'
         DC    C'    WHICH HAS BEEN LOADED THE CSECT (MODULE) YOU WANT X
               INSPECT OR MODIFY, AND'
IZHL12L  EQU   *-IZHL12
IZHL13   DC    AL1(IZHL13L-1),XL1'05'
         DC    C'    THEN PRESS THE ENTER-KEY.'
IZHL13L  EQU   *-IZHL13
IZHL14   DC    AL1(IZHL14L-1),XL1'05'
         DC    C'EXAMPLE - 1. ENTER THE ACCESS-CODE FOR "NUCLEUS", AND X
               PRESS THE ENTER-KEY.'
IZHL14L  EQU   *-IZHL14
IZHL15   DC    AL1(IZHL15L-1),XL1'05'
         DC    C'          2. ENTER THE STATEMENT "DUMP IEANUC01 IGC018X
               ", AND PRESS TWICE TIME'
IZHL15L  EQU   *-IZHL15
IZHL16   DC    AL1(IZHL16L-1),XL1'05'
         DC    C'             THE ENTER-KEY.'
IZHL16L  EQU   *-IZHL16
IZHL17   DC    AL1(IZHL17L-1),XL1'05'
         DC    C'          3. VIEW THE OUTPUT PRINT (DUMP OF IGC018 CSEX
               CT IN IEANUC01).'
IZHL17L  EQU   *-IZHL17
IZHL18   DC    AL1(IZHL18L-1),XL1'05'
         DC    C'PF3 RETURNS TO THE PRIMARY OPTION MENU PANEL.'
IZHL18L  EQU   *-IZHL18
         EJECT
*------- INCORZAP STATEMENTS HELP SCREEN ----------------------------*
         CNOP  0,4
ISZHELP  DC    A(ISZHL1)
         DC    A(HLPENT)
         DC    A(ISZHL2)
         DC    A(ISZHL3)
         DC    A(ISZHL4)
         DC    A(ISZHL5)
         DC    A(ISZHL6)
         DC    A(ISZHL7)
         DC    A(ISZHL8)
         DC    A(ISZHL9)
         DC    A(ISZHL10)
         DC    A(ISZHL11)
         DC    A(ISZHL12)
         DC    A(ISZHL13)
         DC    A(ISZHL14)
         DC    A(ISZHL15)
         DC    A(ISZHL16)
         DC    A(LNEBLK)
         DC    A(ISZHL17)
         DC    A(ISZHL18)
         DC    A(LNEBLK)
         DC    A(EML+ISZHL19)
         SPACE 1
ISZHL1   DC    AL1(ISZHL1L-1)      ROW 01, COL 01
         DC    XL1'05',10CL1'-'    PROTECT, HIGH-LIGHT
         DC    CL20' INCORZAP INTERFACE ',49CL1'-'
ISZHL1L  EQU   *-ISZHL1
*                ----+----1----+----2----+----3----+----4----+----5----
*              +----6----+----7----+----
ISZHL2   DC    AL1(ISZHL2L-1),XL1'05'
         DC    C'EIGHT STATEMENTS LINES ARE PROVIDED TO ENTER ONE OR MOX
               RE INCORZAP STATEMENTS.'
ISZHL2L  EQU   *-ISZHL2
ISZHL3   DC    AL1(ISZHL3L-1),XL1'05'
         DC    C'CONTROL STATEMENTS ARE COMPATIBLE WITH THE IBM''S SERVX
               ICE AID IMASPZAP OR'
ISZHL3L  EQU   *-ISZHL3
ISZHL4   DC    AL1(ISZHL4L-1),XL1'05'
         DC    C'    SUPERZAP PROGRAM. FOLLOWS A SHORT SUMMARY OF SOME X
               CONTROL STATEMENTS :'
ISZHL4L  EQU   *-ISZHL4
ISZHL5   DC    AL1(ISZHL5L-1),XL1'05'
         DC    C'NAME LOADMOD  CSECT      SPECIFY MODULE AND/OR CSECT TX
               O MODIFY.'
ISZHL5L  EQU   *-ISZHL5
ISZHL6   DC    AL1(ISZHL6L-1),XL1'05'
         DC    C'VER  OFFSET   HEXSTRING  VERIFY STORAGE AT OFFSET WITHX
               IN MODULE/CSECT MATCHES'
ISZHL6L  EQU   *-ISZHL6
ISZHL7   DC    AL1(ISZHL7L-1),XL1'05'
         DC    C'                         HEXSTRING.'
ISZHL7L  EQU   *-ISZHL7
ISZHL8   DC    AL1(ISZHL8L-1),XL1'05'
         DC    C'REP  OFFSET   HEXSTRING  CHANGE STORAGE AT OFFSET WITHX
               IN MODULE/CSECT TO MATCH'
ISZHL8L  EQU   *-ISZHL8
ISZHL9   DC    AL1(ISZHL9L-1),XL1'05'
         DC    C'                         HEXSTRING (CAUSES PGFIX IF PAX
               GEABLE).'
ISZHL9L  EQU   *-ISZHL9
ISZHL10  DC    AL1(ISZHL10L-1),XL1'05'
         DC    C'RES  OFFSET   HEXSTRING  LIKE REP, BUT CAUSES PGFREE.'
ISZHL10L EQU   *-ISZHL10
ISZHL11  DC    AL1(ISZHL11L-1),XL1'05'
         DC    C'ZAP  OFFSET   HEXSTRING  ZEROES STORAGE IF EQUAL TO HEX
               STRING.'
ISZHL11L EQU   *-ISZHL11
ISZHL12  DC    AL1(ISZHL12L-1),XL1'05'
         DC    C'DUMP LOADMOD  CSECT      PRINT MODULE OR CSECT.'
ISZHL12L EQU   *-ISZHL12
ISZHL13  DC    AL1(ISZHL13L-1),XL1'05'
         DC    C'BASE HEXVALUE            HEXVALUE WILL BE SUBTRACTED FX
               ROM NUMERIC OFFSETS.'
ISZHL13L EQU   *-ISZHL13
ISZHL14  DC    AL1(ISZHL14L-1),XL1'05'
         DC    C'RESET                    CLEARS NO-GO SWITCH (SET BY VX
               ER FAILURE).'
ISZHL14L EQU   *-ISZHL14
ISZHL15  DC    AL1(ISZHL15L-1),XL1'05'
         DC    C'/                        LOGICAL LINE SEPARATOR.'
ISZHL15L EQU   *-ISZHL15
ISZHL16  DC    AL1(ISZHL16L-1),XL1'05'
         DC    C'*                        COMMENT.'
ISZHL16L EQU   *-ISZHL16
ISZHL17  DC    AL1(ISZHL17L-1),XL1'05'
         DC    C'AFTER YOU HAVE TYPED IN THE STATEMENT(S) LINE(S), JUSTX
                PRESS ONCE AGAIN THE'
ISZHL17L EQU   *-ISZHL17
ISZHL18  DC    AL1(ISZHL18L-1),XL1'05'
         DC    C'    ENTER-KEY TO INVOKE THE INCORZAP PROCESSING.'
ISZHL18L EQU   *-ISZHL18
ISZHL19  DC    AL1(ISZHL19L-1),XL1'05'
         DC    C'PF3 RETURNS TO THE SELECT ENTRY PANEL.'
ISZHL19L EQU   *-ISZHL19
HLPENT   DC    AL1(HLPENTL-1),XL1'01',CL1' ',XL1'04',CL7' '
HLPENTL  EQU   *-HLPENT
LNEBLK   DC    AL1(LNEBLKL-1),XL1'04',CL9' '
LNEBLKL  EQU   *-LNEBLK
         EJECT
*- - - - "PRT" ENTRY SCREEN
         CNOP  0,4
ZPRSCR   DC    A(ZPROW1)
         DC    A(ZPROW2)
         DC    A(LNEBLK)
CRZPSC   EQU   (*-ZPRSCR)/4        CURSOR ROW ON LINE BELOW
ZPZ1     EQU   (*-ZPRSCR)+4        "TERMINPT" DISPLACEMENT
         DC    A(ZPROW3)
         DC    A(LNEBLK)
CRAPSC   EQU   (*-ZPRSCR)/4        ALTERNATE CURSOR ROW ON LINE BELOW
ZPZ2     EQU   (*-ZPRSCR)+4        "TERMINPT" DISPLACEMENT
         DC    A(EML+ZPROW4)
         SPACE 1
ZPROW1   DC    AL1(ZPROW1L-1)
         DC    XL1'05',10CL1'-'    PROTECT, HIGH-LIGHT
         DC    CL40' INCORZAP INTERFACE - ENTRY PRINT PANEL ',29CL1'-'
ZPROW1L  EQU   *-ZPROW1
ZPROW2   DC    AL1(ZPROW2L-1)
         DC    XL1'05',CL41'ENTER/VERIFY INCORZAP PRINT REQUIREMENTS:'
         DC    XL1'04',CL1' '
ZPROW2L  EQU   *-ZPROW2
ZPROW3   DC    AL1(ZPROW3L-1)
ZPOFF1   EQU   (*-ZPROW3)+9,10
         DC    XL1'04',CL21'        PRINT VIEWING',XL1'05',CL3'==>'
CCZPSC   EQU   (*-ZPROW3)          CURSOR COLUMN ON FIELD BELOW
ZPSCF1   EQU   (*-ZPROW3)+1,3      INPUT FIELD 1
         DC    XL1'02',CL3' ',XL1'04',C'(NO/N/YES/Y) '
ZPROW3L  EQU   *-ZPROW3
ZPROW4   DC    AL1(ZPROW4L-1)
ZPOFF2   EQU   (*-ZPROW4)+1,8
         DC    XL1'04',CL21'AND / OR PRINT DELETE',XL1'05',CL3'==>'
CCAPSC   EQU   (*-ZPROW4)          ALTERNATE CURSOR COL. ON FIELD BELOW
ZPSCF2   EQU   (*-ZPROW4)+1,3      INPUT FIELD 2
         DC    XL1'02',CL3' ',XL1'04',C'(NO/N/YES/Y) '
ZPROW4L  EQU   *-ZPROW4
         EJECT
*- - - - "PRT" ENTRY HELP SCREEN
         CNOP  0,4
ZPRHELP  DC    A(ZPRHL1)
         DC    A(HLPENT)
         DC    A(ZPRHL2)
         DC    A(ZPRHL3)
         DC    A(LNEBLK)
         DC    A(ZPRHL4)
         DC    A(ZPRHL5)
         DC    A(ZPRHL6)
         DC    A(EML+ZPRHL7)
         SPACE 1
ZPRHL1   DC    AL1(ZPRHL1L-1)
         DC    XL1'05',10CL1'-'    PROTECT, HIGH-LIGHT
         DC    CL20' INCORZAP INTERFACE ',49CL1'-'
ZPRHL1L  EQU   *-ZPRHL1
*                ----+----1----+----2----+----3----+----4----+----5----
*              +----6----+----7----+----
ZPRHL2   DC    AL1(ZPRHL2L-1),XL1'05'
         DC    C'THE PRINT PANEL ALLOWS TO VIEW THE SESSION OUTPUT PRINX
               T DATA-SET (WHEN IT HAS'
ZPRHL2L  EQU   *-ZPRHL2
ZPRHL3   DC    AL1(ZPRHL3L-1),XL1'05'
         DC    C'    BEEN CREATED), AND / OR DELETE IT (IF NEEDED, ELSEX
                IT IS KEPT).'
ZPRHL3L  EQU   *-ZPRHL3
ZPRHL4   DC    AL1(ZPRHL4L-1),XL1'05'
         DC    C'THE OUTPUT PRINT DATA-SET IS ALWAYS NAMED AS FOLLOWS:'
ZPRHL4L  EQU   *-ZPRHL4
ZPRHL5   DC    AL1(ZPRHL5L-1),XL1'05'
         DC    C'         <USER-ID>.ETPS.IZAPPRT.DYYDDD.THHMMSS.LIST'
ZPRHL5L  EQU   *-ZPRHL5
ZPRHL6   DC    AL1(ZPRHL6L-1),XL1'05'
         DC    C'    WHERE "YYDDD" IS THE YEAR AND SERIAL DAY, AND'
ZPRHL6L  EQU   *-ZPRHL6
ZPRHL7   DC    AL1(ZPRHL7L-1),XL1'05'
         DC    C'          "HHMMSS" IS THE TIME OF DAY.'
ZPRHL7L  EQU   *-ZPRHL7
         EJECT
*------- MAIN STORAGE SUPERZAP FOR MVS (INCORZAP) -------------------*
*        HOUSEKEEPING (PERFORMS PROGRAM INITIALIZATION)
*        AT ENTRY, R9 = "WADATA" WORK-AREA POINTER
*                  AND R10 POINTS TO "SPLTAREA"
         SPACE 1
         CNOP  0,4
         USING *,R12,R10
         USING SAVE3,R13      ************************** R13 ==> SAVE3
ETPSINCZ STM   R14,R12,12(R13)     SAVE INPUT REGISTERS
         LR    R12,R15             SET PROGRAM BASE REGISTER 1
         LR    R11,R10             SPLIT-SCREEN DSECT
         LA    R3,1
         LA    R10,4*KB-1(R3,R12)  SET PROGRAM BASE REGISTER 2
         SH    R11,=Y(SPLITWRK-SAVE3) POINT TO SAVE3
         ST    R13,4(,R11)         STORE BACKWARD POINTER
         ST    R11,8(R13)          STORE FORWARD POINTER
         LR    R13,R11             SET DSECT BASE
         L     R1,=A(WALEN)
         LA    R5,0(R1,R9)         1ST WORK-AREA BASE
         LA    R6,4*KB-1(R3,R5)    2ND WORK-AREA BASE
         LR    R0,R5
         L     R1,=A(@DATAL)
         LA    R14,*
         XR    R15,R15
         MVCL  R0,R14              CLEAR ALL TO BINARY ZEROS
         USING @DATA,R5,R6
         ST    R9,AWADT            SAVE IT FOR LATER USE
         USING WADATA,R9
         LA    R11,XDCBL
         L     R15,=A(LIBDCB)      POINTER TO DCB IMAGE
         MVC   0(LIBDCBL,R11),0(R15) MOVE DCB PROTOTYPE
         USING IHADCB,R11
         MVC   DCBDDNAM(L'DCBDDNAM),IZLIBDDN SET DD-NAME
         MVI   XDCBA,VLB           SET "VL" BIT
        OPEN   ((R11),(UPDAT)),MF=(E,XDCBA) OPEN LIB
         TM    DCBOFLGS,DCBOFOPN   WAS OPEN SUCCESSFUL?
         BO    LBOPNOK             YES
         DROP  R11
         LA    R14,MSG06           NO, LIBRARY OPEN ERROR
         ST    R14,XMSE
         BAL   R14,GENERR
         B     DOTEST
LBOPNOK  LA    R15,STMLNES         STATEMENTS START ADDRESS
         LA    R0,NBRSTTS          NUMBER OF STATEMENTS LINES
         STM   R15,R0,XINSTAC
         LA    R14,XCARD+71        POINT TO COLUMN 72
         ST    R14,XPENDREC        SET END OF PHYSICAL RECORD
         LA    R14,1(R14)          POINT TO BYTE FOLLOWING COL 72
         ST    R14,XENDREC         TO FORCE NEXT CARD (STATEMENT)
         B     DOTEST
         DROP  R9
         EJECT
* ROUTINES-SUBROUTINES FLOW :
* ===========================
*           NAME     -> CALL R= ROUTINES NAMES OR S= SUBROUTINES NAMES
*           --------    -----------------------------------------------
* 1. MAIN : GETREC   -> S= GLREC
*           GLREC
*           VERBSCN  -> S= GETFLD   SYNERR
*                       R= VER      REP      NAM      DUM      COMMENT
*                          RC       ZAP      GLO      LOC      GETOFF
* 2. VERB : VER      -> S= GETOFF   GETHEX   BIT31    BIT24    PUTLINE
*                          DUMP
*           REP      -> S= PUTLINE  GETOFF   GETHEX   FIXER    MODIFY
*           NAM      -> S= GETFLD   PUTLINE  SCANMOD  SCANLPA  GENERR
*                          PRADDR
*           DUM      -> R= NAM
*                       S= DUMP
*           COMMENT
*           RC       -> S= HEXCV    PUTLINE
*           ZAP      -> R= VER
*                       S= FIXER    MODIFY
*           GLO
*           LOC
*           GETOFF   -> S= GETHEX   SYNERR   GETFLD   SCANMOD  PRADDR
* 3. CALL : GETHEX   -> S= SYNERR
*           DUMP     -> S= HEXCV    MODESET1 BIT31    BIT24    MODESET2
*                          PUTLINE
*           FIXER    -> S= MODESET1 MODESET2
*           MODIFY   -> S= HEXCV    PUTLINE  MODESET1 BIT31    REAL2VIR
*                          BIT24    MODESET2
*           GETFLD   -> S= SYNERR
*           SCANMOD  -> S= FIND     BIT31    BIT24    READLIB  SYMCHK
*                          SECTMAP  GENERR
*           SCANLPA  -> S= GENERR
*           PRADDR   -> S= HEXCV    PUTLINE
*           HEXCV    -> S= MODESET1 BIT31    BIT24    MODESET2
*           REAL2VIR
*           FIND     -> S= GENERR
*           SYMCHK   -> S= SYMNEW   SYMFETCH
*           SYMFETCH -> S= SYMNEW
*           SYMNEW   -> S= READLIB
*           READLIB
*           SECTMAP
*           BIT24
*           BIT31
*           MODESET1
*           MODESET2
*           GENERR   -> S= PUTLINE
*           SYNERR   -> S= PUTLINE
*           PUTLINE
         EJECT
*------- MAIN-LINE EXECUTION : DO WHILE XFEOD=0
*                                 CALL "GETREC"
*                                 IF XFEOD=0 THEN
*                                    PRINT REC
*                                    CALL "VERBSCN"
*                                    END
*                                 END
*                              CLOSE FILES
*                              RETURN
DOLOOP   BAL   R14,GETREC          GET A LOGICAL RECORD
         TM    XFLAGS,XFEOD        END-OF-DATA?
         BO    DOTEST              YES
         MVI   @LINE,C' '
         MVC   @LINE+1(L'@LINE-1),@LINE
         L     R14,XFLDSTRT        POINT TO DATA TO BE MOVED
         L     R11,XENDREC         GET ADDRESS OF END OF DATA
         SLR   R11,R14             COMPUTE LENGTH
         EX    R11,LOGMVC          MOVE R14 TO @LN01
         BAL   R14,PUTLINE         LOG THE STATEMENT
         BAL   R14,VERBSCN
DOTEST   TM    XFLAGS,XFEOD        END-OF-DATA?
         BZ    DOLOOP              NO
         MVI   XDCBA,VLB           SET "VL" BIT
        CLOSE (XDCBL),MF=(E,XDCBA) CLOSE LIB
         TM    XFLAGS,XFOOP        PRT OPENED?
         BZ    DOFREE              NO
*- - - - CLOSE AND DE-ALLOCATE THE OUTPUT DATA-SET
         MVI   XDCBA,VLB           SET "VL" BIT
        CLOSE (XDCBP),MF=(E,XDCBA) CLOSE PRT
         NI    XFLAGS,255-XFOOP    RESET FLAG
DOFREE   TM    XFLAGS,XFOAL        PRT ALLOCATED?
         BZ    DOQUIT              NO, GO BACK AS WELL DONE
         L     R2,DYNWORKP         INIT. DYNAMIC ALLOC. WORK-AREA
         LR    R0,R2
         LH    R1,=Y(PARMLLEN)     LENGTH TO BE CLEARED
         LA    R14,*
         XR    R15,R15
         ICM   R15,B'1000',=CL72' '
         MVCL  R0,R14              CLEAR TO ALL BLANKS
         USING PARMLIST,R2
         L     R9,AWADT
         USING WADATA,R9
         MVC   DDNAME,IZPRTDDN     DDNAME
         DROP  R9
         MVI   DSNAME,0            INDICATE FREE REQUEST
         MVC   DSNAME+1(L'DSNAME-1),DSNAME
         DROP  R2
         NI    XFLAGS,255-XFOAL    RESET FLAG
         L     R15,ARDYNAM         FREE IT
*- - - - ETPSDYNA PARM.LIST : "DYNWORKP" ADDRESS
        CALL   (15),MF=(E,DYNWORKP)
         LTR   R15,R15             HOW COMPLETE?
         BZ    DOQUIT              OK
        XMESS  4006                ERROR
         OC    XMSGA,XMSGA         MESSAGE ADDRESS ALREADY IN?
         BNZ   *+L'*+8             YES, SKIP
         LA    R1,FPFMSG           NO
         ST    R1,XMSGA            SET MESSAGE ADDRESS
         MVC   XCODE,=F'16'        SET RETURN CODE = 16
DOQUIT   L     R13,4(,R13)         SWITCH TO OLD SAVE-AREA
         L     R15,XCODE           RETURN CODE
         L     R1,XMSGA            MESSAGE ADDRESS (OR ZERO)
         L     R14,12(,R13)        RESTORE REGISTERS
         L     R0,20(R13)
         LM    R2,R12,28(R13)
         BR    R14                 EXIT PROGRAM
         EJECT
*------- VERB ROUTINES ----------------------------------------------*
         SPACE 1
*- - - - VERIFY (R14 = LINK REGISTER)
VER      STM   R14,R12,@SVVER
         BAL   R14,GETOFF          GO GET VALUE OF OFFSET
         BAL   R14,GETHEX          GO GET HEX STRING
         TM    XFLAGS,XFEOD        EXIT REQUESTED?
         BO    VERX                YES
         BAL   R14,BIT31           GET INTO 31-BIT MODE
         L     R14,XHL
         BCTR  R14,0
         L     R11,XZADDR
         EX    R14,VERCLC          VERIFY THE DATA
         BNE   VERNO               BRANCH NOT VERIFIED
         BAL   R14,BIT24           INSURE BACK TO 24-BIT MODE
         B     VERX                EXIT IF IT VERIFIES OK
VERNO    OI    XFLAGS,XFNOGO       SET NO-GO SWITCH
         MVC   XCODE,=F'4'         SET RETURN CODE = 4
         MVI   @LN33,C' '
         MVC   @LN34(87),@LN33
         MVC   @LN01(32),REJECT
         BAL   R14,BIT24           GET BACK TO 24-BIT MODE
         BAL   R14,PUTLINE         ISSUE REJECT MESSAGE
         TM    XFLAGS,XFERR        PRT IN ERROR?
         BO    VERX                YES, GO BACK (FLUSH)
         BAL   R14,DUMP            DUMP THE MODULE
VERX     LM    R14,R12,@SVVER
         BR    R14
*- - - - REP OR RES OR RESET (R14 = LINK REGISTER)
REP      STM   R14,R12,@SVREP
         CLC   XEBV,=CL8'RESET'    IS IT RESET?
         BNE   REPIN               NO, BRANCH IF REP OR RES
         NI    XFLAGS,255-XFNOGO   RESET, JUST SET NO-GO SWITCH OFF
         B     REPX
REPIN    TM    XFLAGS,XFNOGO       IS NO-GO SWITCH ON?
         BZ    REPGO               NO, BRANCH
         MVI   @LN37,C' '
         MVC   @LN38(83),@LN37
         MVC   @LN01(36),IGNORED
         BAL   R14,PUTLINE
         B     REPX
REPGO    BAL   R14,GETOFF
         BAL   R14,GETHEX
         TM    XFLAGS,XFEOD        EXIT REQUESTED?
         BO    REPX                YES
         CLC   XEBV,=CL8'REP'      IS THIS A REP?
         BNE   RESTX               NO, GO DO RESTORE PROCESSING
         BAL   R14,FIXER           FIX PAGE IF REP
         BAL   R14,MODIFY          GO MODIFY STORAGE
         B     REPX                SKIP RESTORE PROCESSING
RESTX    BAL   R14,MODIFY          GO MODIFY STORAGE
         BAL   R14,FIXER           GO UNFIX STORAGE
REPX     LM    R14,R12,@SVREP
         BR    R14
*- - - - NAME (R14 = LINK REGISTER)
NAM      STM   R14,R12,@SVNAM
         NI    XFLAGS,255-XFNOGO   RESET NO-GO SWITCH
         SLR   R14,R14
         STCM  R14,B'0111',XCSLEN+1
         ST    R14,XBASE           GET OPERANDS
         MVC   XRCVLEN,=F'8'
         LA    R14,XEBLM           PUT ADDRESS OF MEMBER
         ST    R14,XRCVADDR        IN GETFLD RESULT POINTER
         B     NAMGO1              DO UNTIL POINTER GT MEMBER+8
NAMLP1   BAL   R14,GETFLD          CALL GETFLD TO GET NEXT OPERAND
         LA    R14,8               ADD 8
         AL    R14,XRCVADDR         TO
         ST    R14,XRCVADDR          GETFLD RESULT ADDRESS
NAMGO1   LA    R11,XEBCS           IF R14 GT MEMBER+8
         CR    R14,R11              THEN
         BNH   NAMLP1                EXIT DO LOOP
*                                  CHECK FOR A GLOBAL MODULE IN
         TM    @SWB,XFLOCSW         LOCAL MODE?
         BZ    NAMOK1              NO, BRANCH
         CLC   XEBLM(6),=CL6'IEANUC'    YES, DOES NAME LOOK GLOBAL
         BE    NAMWARN             YES, ISSUE WARNING
         CLC   XEBLM(5),=CL5'IGC00'     DOES NAME LOOK GLOBAL?
         BNE   NAMOK1              NO, BRANCH
NAMWARN  MVI   @LN58,C' '          ISSUE WARNING
         MVC   @LN59(62),@LN58
         MVC   @LN01(57),WARNMSG
         BAL   R14,PUTLINE
*              IF A CSECT WAS SPECIFIED, GET THE OFFSET TO THIS
*              CSECT FROM THE BEGINNING OF THE LOAD MODULE
NAMOK1   TM    XFLAGS,XFEOD        EXIT REQUESTED?
         BO    NAMOK3              YES
         CLC   XEBCS(L'XEBCS),=CL72' '
         BNE   NAMOK2
         SLR   R14,R14             CSECT OMITTED
         ST    R14,XCSOFF          OFFSET ZERO INTO MODULE
         B     NAMOK3
NAMOK2   MVC   XEBLBL(8),XEBCS     MAKE CSECT THE LABEL TO LOOKUP
         BAL   R14,SCANMOD         GO SCAN MODULE FOR THIS LABEL
         L     R14,XOFFSET
         ST    R14,XCSOFF          OFFSET INTO MODULE
NAMOK3   TM    XFLAGS,XFEOD        GET IN-CORE ADDRESS OF LOAD MODULE
         BO    NAMEX               BR IF EXIT REQUESTED
         TM    @SWB,XFLOCSW
         BZ    NAMOK4              BR IF NOT LOCAL MODE
        LOAD   EPLOC=XEBLM,DCB=XDCBL LOAD A COPY FOR LOCAL MODE
         BAL   R14,SCANLPA         GO FIND LOADED MODULE IN JPA
         B     NAMEEOD
NAMOK4   CLC   XEBLM(6),=CL6'IEANUC'
         BNE   NAMSCNL
         CLC   XEBCS(L'XEBCS),=CL72' ' NUCLEUS, IS CSECT SPECIFIED ?
         BNE   PASTNCSE            YES, BRANCH
         LA    R14,MSG05           NO, CSECT REQUIRED WITH NUCLEUS
         ST    R14,XMSE
         BAL   R14,GENERR
         B     NAMEX               EXIT
PASTNCSE L     R14,CVTPTR          CVT ADDRESS
         USING CVT,R14
         TM    CVTDCB,CVTMVSE      IS THIS MVS/XA?
         DROP  R14
         BO    NAMEEOD             YES, SKIP LM ADDR (SET BY SCANMOD)
         SLR   R14,R14
         ST    R14,XLMADDR         NUCLEUS LOCATION IS ZERO
         B     NAMEEOD
NAMSCNL  BAL   R14,SCANLPA
NAMEEOD  TM    XFLAGS,XFEOD        EXIT REQUESTED?
         BO    NAMEX               YES
         L     R14,XLMADDR
         AL    R14,XCSOFF
         ST    R14,XCSADDR         ADDRESS OF CSECT
         ST    R14,XLOC
         BAL   R14,PRADDR
NAMEX    LM    R14,R12,@SVNAM
         BR    R14
*- - - - DUMP (R14 = LINK REGISTER)
DUM      STM   R14,R12,@SVDUM
         BAL   R14,NAM
         BAL   R14,DUMP
         LM    R14,R12,@SVDUM
         BR    R14
*- - - - HANDLE COMMENT STATEMENTS (R14 = LINK REGISTER)
COMMENT  BR    R14
*- - - - RETURN CODE (R14 = LINK REGISTER)
RC       STM   R14,R12,@SVRC
         MVI   @LN17,C' '
         MVC   @LN18(103),@LN17
         MVC   @LN01(16),EQRC      DISPLAY CURRENT RETURN CODE
         LA    R14,XCODE
         AL    R14,=F'3'
         ST    R14,XHEX
         LA    R14,@LN01
         ST    R14,XEBAD
         MVC   XHEXL,ONE
         BAL   R14,HEXCV
         BAL   R14,PUTLINE
         LM    R14,R12,@SVRC
         BR    R14
*- - - - ZERO (AND PGFIX) STORAGE (R14 = LINK REGISTER)
ZAP      STM   R14,R12,@SVZAP
         BAL   R14,VER
         TM    XFLAGS,XFEOD+XFNOGO EXIT OR NO-GO REQUESTED?
         BNZ   ZAPX                YES
         BAL   R14,FIXER           FIX PAGE IF LPA
         L     R14,XHL
         BCTR  R14,0               LENGTH MINUS 1 FOR EX
         EX    R14,ZAPXC           MAKE REP DATA ALL ZEROS
         BAL   R14,MODIFY
ZAPX     LM    R14,R12,@SVZAP
         BR    R14
*- - - - GLOBAL (R14 = LINK REGISTER)
GLO      NI    @SWB,255-XFLOCSW
         BR    R14
*- - - - LOCAL (R14 = LINK REGISTER)
LOC      OI    @SWB,XFLOCSW
         BR    R14
*- - - - BASE - GET OFFSET (R14 = LINK REGSITER)
*              INPUT : XFLDSTRT
*              OUTPUT : XZADDR = IN-CORE ADDR CORRESPONDING TO OFFSET
GETOFF   STM   R14,R12,@SVBASE
         SLR   R14,R14
         ST    R14,XGOS
         MVI   XGOC,C' '
         B     BASGO1              SCAN FOR 1ST CHAR OF OFFSET
BASLP1   L     R14,XFLDSTRT
         CL    R14,XENDREC
         BNH   BASOK1
         ST    R14,XGOS
         B     BASGO1
BASOK1   L     R14,XFLDSTRT
         CLI   0(R14),C' '
         BNE   BASOK2
         AL    R14,ONE
         ST    R14,XFLDSTRT
         B     BASGO1
BASOK2   L     R14,XFLDSTRT
         MVC   XGOC,0(R14)
         ST    R14,XGOS
BASGO1   L     R14,XGOS
         LTR   R14,R14
         BZ    BASLP1
*                                  CHECK FIRST CHAR TO DETERMINE
*                                   TYPE OF OFFSET (HEX OR LBL)
         CLI   XGOC,C''''          QUOTE (LABEL OFFSET)?
         BE    BASQOT              YES, BRANCH
*                                  PROCESS A HEXADECIMAL OFFSET
         BAL   R14,GETHEX          GET HEX OFFSET
         L     R14,XHL
         CL    R14,=F'4'
         BNH   BASOK3
         LA    R14,MSG02           OFFSET FIELD IS TOO LONG
         ST    R14,XMSE
         BAL   R14,SYNERR          SYNTAX ERROR
         B     BASX
BASOK3   L     R14,XHL
         SLR   R11,R11
         CR    R14,R11             IS XHL ZERO?
         BE    BASX                YES, GO EXIT
         ST    R11,XHOP            LEADING ZEROES
         LCR   R14,R14             1, 2, 3, OR 4 BECOME -1, -2, -3, -4
         AL    R14,=F'5'           BECOME +4 +3 +2 +1
         LA    R11,XHOP-1(R14)
         LCR   R14,R14             BECOME -4 -3 -2 -1
         AL    R14,=F'4'           BECOME 0 1 2 3 LENGTH CODE
         EX    R14,MVREPDT         MOVE REPDATA TO R11
         CLC   XEBV(3),=CL3'BAS'   IS THIS A BASE STATEMENT?
         BNE   BASINN              NO, ITS A VER OR REP, BRANCH
         L     R14,XHOP
         ST    R14,XBASE           STORE BASE VALUE
         B     BASX
BASINN   L     R14,XCSADDR         GET ADDRESS OF CSECT
         AL    R14,XHOP            ADD OFFSET
         SL    R14,XBASE           SUBTRACT VALUE FROM 'BASE' VERB
         ST    R14,XZADDR          SAVE THIS AS ADDRESS TO ZAP
         B     BASX                GO EXIT
BASQOT   MVI   XEBLBL+1,C' '       PROCESS A SYMBOLIC (LABEL) OFFSET
         MVC   XEBLBL+2(6),XEBLBL+1
         MVI   XEBLBL,C' '
         LA    R14,XEBLBL
         ST    R14,XRCVADDR
         MVC   XRCVLEN,=F'8'
         BAL   R14,GETFLD          GO GET LABEL
         CLC   XEBLBL(L'XEBLBL),=CL72' '
         BE    BASMISS
         BAL   R14,SCANMOD         GO SCAN MOD FOR VALUE OF LABEL
         L     R14,XLMADDR         GET ADDRESS OF MODULE
         AL    R14,XOFFSET         ADD OFFSET TO CSECT
         ST    R14,XZADDR          STORE ADDR TO ZAP
         ST    R14,XLOC
         TM    XFLAGS,XFEOD        END-OF-DATA?
         BO    BASX                NO
         BAL   R14,PRADDR          GO PRINT ADDRESS
         B     BASX                GO EXIT
BASMISS  LA    R14,MSG10           REQUIRED FIELD MISSING
         ST    R14,XMSE
         BAL   R14,SYNERR          SYNTAX ERROR
BASX     LM    R14,R12,@SVBASE
         BR    R14
         EJECT
*------- SUBROUTINES ------------------------------------------------*
         SPACE 1
*- - - - RECORD FETCHING (R14 = LINK REGISTER)
GETREC   STM   R14,R12,@SVGTRC
         BAL   R14,GLREC           TRY TO GET A LOGICAL RECORD
         B     GETCGO              DO WHILE NO LOGICAL REC GOTTEN
GETCLP   LM    R15,R0,XINSTAC      GET A PHYSICAL RECORD
         LTR   R0,R0               ALL STATEMENTS PROCESSED?
         BNP   CTLEOD              YES
         CLC   0(72,R15),=CL72' '  NO, IS THERE A STATEMENT?
         BNE   GETINS              YES, PROCESS IT
         LA    R15,L'STMLNES(R15)  NO, BUMP TO NEXT STATEMENT
         BCT   R0,*-14             ALL STATEMENTS PROCESSED?
*                                  YES, END-OF-DATA (EODAD) FOR INPUT
CTLEOD   OI    XFLAGS,XFEOD        SET IT
         B     GETCX
GETINS   MVC   XCARD(L'XCARD),0(R15) COPY CARD
         LA    R15,L'STMLNES(R15)  BUMP TO NEXT STATEMENT
         BCTR  R0,0                REDUCE STATEMENTS COUNT
         STM   R15,R0,XINSTAC      AND SAVE
         LA    R14,XCARD
         LR    R11,R14
         BCTR  R11,0
         ST    R11,XENDREC         POINT TO BYTE PRECEDING COL 1
         SL    R14,=F'-71'         POINT TO COLUMN 72
         ST    R14,XPENDREC        THIS IS END OF PHYSICAL RECORD
         BAL   R14,GLREC           NOW GO GET LOGICAL RECORD
GETCGO   CLC   XENDREC,XPENDREC    IS THERE MORE PHYS REC LEFT
         BH    GETCLP              BRANCH IF NOT
GETCX    LM    R14,R12,@SVGTRC
         BR    R14
*- - - - LOGICAL RECORD EXTRACTION (R14 = LINK REGISTER)
GLREC    STM   R14,R12,@SVGLRC
         L     R14,XENDREC
         CL    R14,XPENDREC
         BH    SEPX
         AL    R14,ONE             ADD 1 TO
         ST    R14,XENDREC          END POINTER
         ST    R14,XFLDSTRT        INITIALIZE GETFLD BEGIN ADDRESS
         SLR   R14,R14             SET
         ST    R14,XPS              SW = 0
         B     SEPGO1              DO UNTIL SW NE 0
SEPLP1   CLC   XENDREC,XPENDREC
         BL    SEPOK1
         LA    R14,1               SET
         ST    R14,XPS              SW = 1
         B     SEPGO1
SEPOK1   L     R14,XENDREC
         CLI   0(R14),C'/'         MULTIPLE STATEMENTS PER CARD?
         BNE   SEPNXT              NO
         MVI   0(R14),C' '         YES, CHANGE SLASH TO BLANK
         LA    R14,1               SET
         ST    R14,XPS              SW = 1
         B     SEPGO1
SEPNXT   LA    R14,1               ADD 1
         AL    R14,XENDREC          TO
         ST    R14,XENDREC           END POINTER
SEPGO1   L     R14,XPS
         LTR   R14,R14
         BZ    SEPLP1
SEPX     LM    R14,R12,@SVGLRC
         BR    R14
*- - - - VERB SCANNING AND ROUTING (R14 = LINK REGISTER)
VERBSCN  TM    XFLAGS,XFERR        PRT IN ERROR?
         BOR   R14                 YES, GO BACK (FLUSH)
         STM   R14,R12,@SVVSCN
         LA    R14,XEBV
         ST    R14,XRCVADDR
         MVC   XRCVLEN,=F'8'
         BAL   R14,GETFLD
         SLR   R14,R14
         ST    R14,XVXSW           SET SW OFF
         LA    R14,1
         ST    R14,XVX             SET SUBSCRIPT TO 1
         L     R8,=A(OPCODES)      ADDRESS OF VERB TABLE
         L     R9,=A(OPENTRY)      ADDRESS OF VERB ROUTINES TABLE
PROCLOOP L     R11,XVXSW
         LTR   R11,R11             HAS SW BEEN SET ON?
         BNZ   PROCDONE            YES, JUMP OUT
         BCTR  R14,0
         LR    R11,R14
         MH    R11,=Y(L'OPCODES)
         LA    R7,0(R8,R11)        GET ADDRESS OF VERB TABLE ENTRY
         CLC   XEBV(3),0(R7)       IS THIS THE RIGHT VERB?
         BNE   PROCINCR            NO, GO INCREMENT TO NEXT ONE
         SLA   R14,2
         L     R15,0(R9,R14)       GET VERB ROUTINE ADDRESS
         BALR  R14,R15             CALL THE ROUTINE FOR THIS OPERATION
         TM    XFLAGS,XFEOD        EXIT REQUESTED?
         BO    VERBSCNX            YES
         LA    R14,1
         ST    R14,XVXSW           SET SW ON
PROCINCR LA    R14,1
         AL    R14,XVX
         ST    R14,XVX
         CH    R14,=Y(OPNUM)       HAVE ALL VERBS BEEN CHECKED?
         BNH   PROCLOOP            NO, KEEP CHECKING
PROCDONE L     R14,XVXSW           WAS SW EVER SET ON
         LTR   R14,R14             YES, BRANCH
         BNZ   VERBSCNX
         LA    R14,MSG09           OPERATION REQUESTED IS INVALID
         ST    R14,XMSE
         BAL   R14,SYNERR          SYNTAX ERROR
VERBSCNX LM    R14,R12,@SVVSCN
         BR    R14
*- - - - HEXADECIMAL FIELD FETCHING (R14 = LINK REGISTER)
*              INPUT : XFLDSTRT = ADDR OF START OF FIELD
*              OUTPUT : XHS = HEX STRING
*                       XHSL = LENGTH OF HEX STRING
GETHEX   STM   R14,R12,@SVGHEX
         SLR   R14,R14
         ST    R14,XHSW            SET SW = 0
         ST    R14,XHL             SET LEN = 0
         L     R14,XFLDSTRT
         ST    R14,XHP
*                                  MOVE FIELD TO 'XHW' AND
*                                   STRIP OUT COMMAS
         B     HPAGO1              DO UNTIL XHSW NE 0
HPALP1   CLC   XHP,XENDREC         STILL WITHIN STATEMENT?
         BNH   HPAIN1              YES, BRANCH
         MVC   XHSW,ONE
         B     HPAGO1
HPAIN1   L     R14,XHP
         CLI   0(R14),C' '         IS IT A BLANK?
         BNE   HPANBK              NO, BRANCH
         L     R14,XHL
         LTR   R14,R14
         BNP   *+L'*+10
         MVC   XHSW,ONE
         B     HPAGO1
         LA    R14,1
         AL    R14,XHP
         ST    R14,XHP
         B     HPAGO1
HPANBK   L     R14,XHP             NOT A BLANK
         CLI   0(R14),C','         IS IT A COMMA?
         BE    HPAINCR             YES, GO IGNORE IT
         LA    R11,1               ADD 1
         AL    R11,XHL              TO
         ST    R11,XHL               MODLEN
         LA    R7,XHW-1(R11)
         MVC   0(1,R7),0(R14)      COPY THE CHARACTER TO WORK-AREA
HPAINCR  LA    R14,1               POINT
         AL    R14,XHP              TO
         ST    R14,XHP               NEXT CHARACTER
HPAGO1   SLR   R14,R14
         CL    R14,XHSW
         BE    HPALP1
         L     R11,XHP             CHECK FOR MISSING FIELD
         ST    R11,XFLDSTRT
         CL    R14,XHL             IS LENGTH ZERO?
         BNE   HPAOK1              NO, BRANCH
         LA    R14,MSG10           REQUIRED FIELD MISSING
         ST    R14,XMSE
         BAL   R14,SYNERR          SYNTAX ERROR
         B     HPAX
HPAOK1   SLR   R2,R2               CHECK FOR INVALID (NON-HEX) CHARS
         L     R1,XHL
         BCTR  R1,0
         L     R14,=A(HEXTRT)
         EX    R1,HPRTRT           TRT WORK-AREA
         LTR   R2,R2               ARE ALL CHARACTERS HEX?
         BZ    HPAOK2              YES, BRANCH
         LA    R14,MSG03           INVALID HEX CHARACTER
         ST    R14,XMSE
         BAL   R14,SYNERR          SYNTAX ERROR
         B     HPAX
HPAOK2   L     R14,=A(HEXTR)       TRANSLATE FROM EBCDIC TO HEX
         TR    XHW,0(R14)          TRANSLATE TO 'UNPACKED' HEX
         LA    R14,XHS
         ST    R14,XHSPTR
         LA    R14,XHW             SET
         ST    R14,XHWPTR           PTR = ADDR(WORK-AREA)
         B     HPAGO2              DO WHILE PTR LE ADDR(WORK-AREA)+LEN
HPALP2   L     R14,XHWPTR
         PACK  XHPW,0(16,R14)      PACK 16 BYTES AT A TIME
         L     R11,XHSPTR
         MVO   0(9,R11),XHPW       SHIFT TO GET RID OF SIGN
         AL    R11,=F'8'           ADD 8 TO
         ST    R11,XHSPTR           HEX RESULT ADDRESS
         AL    R14,=F'16'          ADD 16 TO
         ST    R14,XHWPTR           PTR
HPAGO2   L     R14,XHL
         LA    R11,XHW
         ALR   R11,R14
         CL    R11,XHWPTR
         BH    HPALP2              END OF DO LOOP
*                                  CHECK FOR EVEN NUMBER OF
*                                   HEX DIGITS
         ST    R14,Y
         LR    R2,R14              PREPARE TO DIVIDE
         SRDA  R2,32               PREPARE TO DIVIDE
         D     R2,=F'2'            HALVE THE LENGTH
         ST    R3,XHL              SAVE LENGTH
         ALR   R3,R3               DOUBLE IT
         CR    R14,R3              AND COMPARE TO ORIGINAL
         BE    HPAX                IF EQUAL, THERE WERE AN EVEN NUMBER
         LA    R14,MSG11           UNEVEN NUMBER OF HEX DIGITS
         ST    R14,XMSE
         BAL   R14,SYNERR          SYNTAX ERROR
HPAX     LM    R14,R12,@SVGHEX
         BR    R14
*- - - - DUMP MAIN STORAGE (R14 = LINK REGISTER)
*              INPUT : XCSADDR=ADDRESS OF CSECT TO BE DUMPED
*                      XCSLEN = LENGTH TO DUMP
DUMP     STM   R14,R12,@SVDMP
         L     R14,XCSLEN          IS
         LA    R14,0(,R14)          AN
         LTR   R14,R14               ENDING ADDRESS SPECIFIED?
         BNZ   *+L'*+6             YES, BRANCH
         MVC   XCSLEN+1(3),ONE+1
         L     R14,=F'-32'         FFFFFFE0
         L     R11,XCSADDR         GET STARTING ADDRESS
         L     R7,XCSLEN           GET LENGTH
         LA    R7,0(,R7)
         ALR   R7,R11              ADD TO START ADDRESS
         BCTR  R7,0
         NR    R7,R14              ROUND DOWN TO MULTIPLE OF 32
         ST    R7,XDUMPEND         SAVE DUMP END ADDRESS
         MVI   @LN02,C' '
         MVC   @LN03(L'@LINE-3),@LN02
         MVI   @LN01,C' '
         MVC   XHEXL,=F'4'
         NR    R11,R14             ROUND DOWN TO MULTIPLE OF 32
         ST    R11,XDP             DUMP START ADDRESS
         B     DUMPGO
DUMPLP   LA    R14,@LN01
         ST    R14,XEBAD
         LA    R14,XDP
         ST    R14,XHEX
         BAL   R14,HEXCV           PUT HEX ADDRESS IN LINE
         L     R14,XDP
         ST    R14,XHEX
         LA    R14,1
         ST    R14,I               SET SUBSCRIPT TO 1
DUMPLLP  MH    R14,=H'9'           ADD SUBSCRIPT*9
         LA    R14,@LN03(14)        TO LINE+3
         ST    R14,XEBAD           SAVE RESULT IN HEX TO ADDRESS
         BAL   R14,HEXCV           PERFORM HEX CONVERSION
         L     R14,XHEX            ADD
         AL    R14,XHEXL            HEXLEN
         ST    R14,XHEX              TO HEXFR
         LA    R14,1               ADD 1
         AL    R14,I                TO
         ST    R14,I                 SUBSCRIPT
         CL    R14,=F'4'           IS SUBSCRIPT GT 4?
         BNH   DUMPLLP             NO, LOOP (LEFT HALF OF PAGE)
         LA    R14,1               YES,
         ST    R14,I                RESET SUBSCRIPT TO 1
DUMPRLP  MH    R14,=H'9'
         LA    R14,@LN41(14)
         ST    R14,XEBAD
         BAL   R14,HEXCV
         L     R14,XHEX
         AL    R14,XHEXL
         ST    R14,XHEX
         LA    R14,1
         AL    R14,I
         ST    R14,I
         CL    R14,=F'4'           IS SUBSCRIPT GT 4?
         BNH   DUMPRLP             NO, LOOP (RIGHT HALF OF PAGE)
         MVI   @LN87,C'*'
         MVI   @LN120,C'*'
         BAL   R14,MODESET1        GET INTO KEY 0
         BAL   R14,BIT31           GET INTO 31-BIT MODE
         L     R14,XDP
         MVC   @LN88(32),0(R14)    MOVE IN CHAR PORTION
         BAL   R14,BIT24           GET BACK TO 24-BIT MODE
         BAL   R14,MODESET2        GET BACK TO USER KEY
         L     R14,=A(EBCDIC)
         TR    @LN88(32),0(R14)
         BAL   R14,PUTLINE
         TM    XFLAGS,XFERR        PRT IN ERROR?
         BO    DUMPX               YES, GO BACK (FLUSH)
         LA    R11,32              ADD 32
         AL    R11,XDP              TO
         ST    R11,XDP               DUMP ADDRESS
DUMPGO   CL    R11,XDUMPEND
         BNH   DUMPLP
DUMPX    LM    R14,R12,@SVDMP
         BR    R14
*- - - - PGFIX/FREE (R14 = LINK REGISTER)
*              INPUT : XZADDR = ADDR OF STORAGE TO BE CHANGED
*                      XHL = LENGTH OF STORAGE
*                      XEBV = VERB
FIXER    STM   R14,R12,@SVFXR
         TM    @SWB,XFLOCSW
         BO    PAGEX
         CLC   XEBLM(6),=CL6'IEANUC' IS THIS A NUCLEUS ZAP?
         BE    PAGEX               YES, NO NEED TO FIX/FREE
         BAL   R14,MODESET1        SUP STATE, KEY ZERO
         AL    R13,=F'12'          CHANGE R13 FOR SETLOCK
        SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=SAVE,RELATED=X
         SLR   R4,R4               NO TCB - PGFIX NOT TO BE OWNED
         ST    R4,XPECB            CLEAR THE ECB
         LA    R0,XPECB            ECB ADDRESS
         L     R14,XZADDR          GET STARTING ADDRESS
         LR    R1,R14              STARTING ADDRESS
         AL    R14,XHL             COMPUTE ENDING ADDRESS
         LR    R2,R14              ENDING ADDRESS+1
         BCTR  R14,0               ENDING ADDRESS
         CLC   XEBV(3),=CL8'RESET' IS THIS A RES?
         BE    FREEPAGE            YES, FREE THE PAGE
FIXPAGE PGSER  R,FIX,A=(1),EA=(R14),TCB=0,ECB=(0),LONG=Y,BRANCH=Y,     X
               RELATED=FREEPAGE
         B     SVPSRC
FREEPAGE PGSER R,FREE,A=(1),EA=(R14),TCB=0,BRANCH=Y,RELATED=FIXPAGE
SVPSRC   ST    R15,XPSRC           SAVE RETURN CODE
        SETLOCK RELEASE,TYPE=LOCAL,REGS=SAVE,RELATED=X
         SL    R13,=F'12'          PUT R13 BACK TO NORMAL
         BAL   R14,MODESET2        PROBLEM STATE, KEY NZERO
         CLC   XPSRC,=F'8'         DID PAGE SERVICES RETURN AN 8?
         BNE   PAGEX               NO, NO NEED TO WAIT
        WAIT   ECB=XPECB
PAGEX    LM    R14,R12,@SVFXR
         BR    R14
*- - - - MODIFY STORAGE (R14 = LINK REGISTER)
*              INPUT : XHS = HEX STRING
*                      XHL = LENGTH OF HEX STRING
*                      XZADDR = ADDRESS OF CORE TO BE OVERLAYED
MODIFY   STM   R14,R12,@SVMOD
         MVI   @LN14,C' '
         MVC   @LN15(106),@LN14
         MVC   @LN01(13),OLDWAS
         L     R14,XHL             LENGTH OF DATA TO BE MODIFIED
         ST    R14,XHEXL
         L     R14,XZADDR          ADDRESS OF DATA TO BE MODIFIED
         ST    R14,XHEX
         LA    R14,@LN01
         AL    R14,=F'13'
         ST    R14,XEBAD           PUT HEX DUMP AT LINE+1+13
         BAL   R14,HEXCV           CONVERT OLD DATA TO HEX
         BAL   R14,PUTLINE         DISPLAY OLD DATA
         TM    XFLAGS,XFERR        PRT IN ERROR?
         BO    MODIFYX             YES, GO BACK (FLUSH)
         BAL   R14,MODESET1        SUPV STATE KEY ZERO
         BAL   R14,BIT31           GET 31-BIT MODE
         L     R14,XZADDR          GET ADDRESS TO BE MODIFIED
         L     R11,XHL             GET LENGTH OF DATA
         B     MODLPTST            GO DO LOOP TEST
MODLOOP  LA    R8,0(R11,R14)       POINT AT BYTE TO MOVE
         USING PSA,R0
         L     R2,PSAAOLD          GET ADDR OF CURRENT ASCB
         DROP  R0
         N     R8,MASKPAGE         GET LOWER PAGE BOUNDARY
         STCTL 1,1,I               GET SET TABLE ORIGIN
         L     R2,I                GET CONTENTS OF STO REG
*                                  TURN OFF PAGE PROTECTION FOR XA
         XR    R9,R9               CLEAR SECOND REG OF PAIR
         SRDL  R8,20               ISOLATE SX & PUT PX IN R9
         SLL   R8,2                GET SEG TBL OFFSET (SX*4)
         N     R2,MASKSTOX         ISOLATE ADDR OF SEG TABLE
         BAL   R15,REAL2VIR        GET VIRTUAL ADDR
         ALR   R2,R8               GET ADDR OF SEG TBL ENTRY
         SRL   R9,22               GET PAGE TABLE OFFSET (PX*2)
         L     R2,0(,R2)           GET CONTENT OF SEG TBL ENTRY
         N     R2,MASKSTE          ISOLATE ADDR OF PAGE TBL ORIGIN
         BAL   R15,REAL2VIR        GET VIRTUAL ADDR
         ALR   R9,R2               GET ADDR OF PAGE TBL ENTRY
         L     R8,0(,R9)           GET CONTENTS OF PAGE TABLE ENTRY
         N     R8,MASKPPBT         ISOLATE PAGE PROT BIT
         BZ    MODIT               BR IF NO PAGE PROT
         SRL   R8,8                SHIFT BYTE TO LO-ORDER
         LA    R9,2(,R9)           GET ADDR OF BYTE WITH PP BIT IN IT
         NI    0(R9),X'FD'         TURN OFF PAGE PROT
         PTLB  ,                   ELIM PROT BIT FROM TLB
*                                  MODIFY STORAGE A BYTE AT A TIME
MODIT    IC    R0,XHS(R11)         GET FROM BYTE
         STC   R0,0(R11,R14)       MODIFY STORAGE
         EX    R8,ORPROT           TURN PROT BIT BACK ON
MODLPTST S     R11,ONE             DECREMENT
         BNM   MODLOOP             BRANCH UNTIL DONE
         BAL   R14,BIT24           GET BACK TO 24-BIT MODE
         BAL   R14,MODESET2        PROBLEM STATE KEY NZERO
MODIFYX  LM    R14,R12,@SVMOD
         BR    R14
*- - - - FIELD FETCHING (R14 = LINK REGISTER)
*              INPUT : XRCVADDR = ADDR OF RECEIVING FIELD
*                      XRCVLEN = LENGTH OF RECEIVING FIELD
*              OUTPUT : XFLDALEN = ACTUAL LENGTH OF FETCHED FIELD
*                       (BLANKS ARE RETURNED IF NO FIELD IS FOUND)
GETFLD   STM   R14,R12,@SVGFLD
         L     R14,XFLDSTRT
         ST    R14,XFLDCUR         SET CURRENT = STARTING
         SLR   R14,R14             SET
         ST    R14,XSCANSW         SW = 0
*                                  SCAN PAST LEADING DELIMITERS
         B     PARGO1              DO UNTIL SW NE 0
PARLP1   CLC   XFLDCUR,XENDREC     STILL WITHIN STATEMENT?
         BNH   PARIN1              YES, BRANCH
*                                  IS BEYOND END OF STMT
         LA    R14,1               SET
         ST    R14,XSCANSW         SW = 1
         B     PARGO1
PARIN1   L     R14,XFLDCUR
         CLI   0(R14),C' '         BLANK?
         BE    PARNX1
         CLI   0(R14),C''''        QUOTE?
         BNE   PARFN1
PARNX1   LA    R14,1               QUOTE OR BLANK
         AL    R14,XFLDCUR         POINT TO
         ST    R14,XFLDCUR          NEXT CHARACTER
         B     PARGO1
*                                  NEITHER QUOTE NOR BLANK
*                                  SET TO EXIT LOOP
PARFN1   LA    R14,1               SET
         ST    R14,XSCANSW          SW = 1
PARGO1   SLR   R14,R14
         CL    R14,XSCANSW
         BE    PARLP1              END OF DO LOOP (SKIPPING LEADING
*                                  DELIMITERS)
*                                  SCAN FOR END OF FIELD
         L     R11,XFLDCUR         GET TRUE START OF FIELD
         ST    R11,XFLDSTRT
         ST    R14,XSCANSW         SET SW = 0
         B     PARGO2              DO UNTIL SW NE 0
PARLP2   CLC   XFLDCUR,XENDREC     STILL WITHIN STATEMENT?
         BNH   PARIN2              YES, BRANCH
         LA    R14,1               SET
         ST    R14,XSCANSW          SW = 1
         B     PARGO2
PARIN2   LA    R14,1               POINT XFLDCUR TO
         AL    R14,XFLDCUR          NEXT
         ST    R14,XFLDCUR           CHARACTER
         CLI   0(R14),C' '         BLANK?
         BE    PARFN2
         CLI   0(R14),C''''        QUOTE?
         BNE   PARGO2
PARFN2   LA    R14,1               SET
         ST    R14,XSCANSW          SW = 1
PARGO2   L     R14,XSCANSW
         LTR   R14,R14
         BZ    PARLP2              END OF DO LOOP (FOUND END)
*                                  CALCULATE LENGTH AND CHECK
*                                   FOR A TOO LONG FIELD
         L     R14,XFLDCUR         GET ADDRESS OF BLANK OR QUOTE
         SL    R14,XFLDSTRT        COMPUTE LENGTH
         ST    R14,XFLDALEN        SAVE LENGTH
         CL    R14,XRCVLEN         WILL IT FIT IN RESULT?
         BNH   PAROKL              YES, BRANCH
         LA    R14,MSG01           FIELD IS TOO LONG
         ST    R14,XMSE
         BAL   R14,SYNERR          SYNTAX ERROR
         B     PARMOV              GO TRUNCATE MOVE
*                                  MOVE IN FETCHED FIELD (IF ANY)
PAROKL   L     R14,XRCVADDR        GET ADDRESS OF GETFLD RESULT
         L     R11,XRCVLEN
         BCTR  R11,0
         EX    R11,PARBLNK         MOVE BLANKS TO GETFLD RESULT
PARMOV   L     R14,XFLDALEN        IF LENGTH
         LTR   R14,R14              GREATER THAN
         BZ    PARNUL                ZERO
         L     R11,XRCVADDR        GET ADDRESS OF GETFLD RESULT
         BCTR  R14,0
         L     R7,XFLDSTRT
         EX    R14,PARMVC          MOVE R7 TO R11
PARNUL   L     R14,XFLDCUR         GET ADDR OF TRAILING DELIMITER
         ST    R14,XFLDSTRT        READY FOR NEXT CALL
         CLI   0(R14),C''''        QUOTE?
         BNE   PARX                BRANCH IF NOT QUOTED
         AL    R14,ONE             POINT BEYOND QUOTE
         ST    R14,XFLDSTRT
PARX     LM    R14,R12,@SVGFLD
         BR    R14                 RETURN
*- - - - CONTROL SCANNING OF A MODULE FOR A DESIRED LABEL
*              (R14 = LINK REGISTER)
*              INPUT : XEBLM = LOAD MODULE TO SCAN
*                      XEBLBL = CESD LABEL WHOSE OFFSET IS TO BE
*                               RETURNED
*                      XEBCS = CSECT WHEREIN THE LABEL RESIDES
*                              (BLANK MEANS FIRST CSECT)
*              OUTPUT : XOFFSET = OFFSET IN LOAD MODULE TO LABEL
*                       XCSLEN = LENGTH OF SPECIFIED CSECT
SCANMOD  STM   R14,R12,@SVSCMD
         BAL   R14,FIND            GO FIND MODULE ON LIBRARY
         TM    XFLAGS,XFEOD        END-OF-DATA?
         BO    SCMEXIT             YES
         SLR   R14,R14
         BCTR  R14,0
         ST    R14,XOFFSET         SHOW LABEL REMAINS TO BE FOUND
         ST    R14,XSYMOFF         SHOW SYMBOL REMAINS TO BE FOUND
         SLR   R14,R14
         ST    R14,XCESDN
*                                  PERFORM SPECIAL PROCESSING FOR
*                                   THE NUCLEUS LOAD MODULE
         CLC   XEBLM(6),=CL6'IEANUC'
         BNE   SCNMD1
         BAL   R14,BIT31           GET INTO 31-BIT MODE
         CLC   XEBCS,=CL8'IEAVFX00'     IS THIS PSA CSECT?
         BNE   PASTCS0             NO, SKIP
         XR    R2,R2               CLEAR REGISTER
         ST    R2,XLMADDR          ADDR IS ZERO
         B     PASTLKU1            SKIP LOOKUP STUFF
PASTCS0 NUCLKUP BYNAME,NAME='IEAVBK00',ADDR=(R2) ADDR OF 1ST CSECT
         LA    R2,0(,R2)           CLEAR HI-ORDER BIT
         ST    R2,XLMADDR          SAVE AS ADDR OF LOAD MOD
PASTLKU1 NUCLKUP BYNAME,NAME=XEBLBL,ADDR=(R3) GET ADDR OF LABEL
         LTR   R15,R15
         BNZ   LBLNTFND            BR IF LABEL NOT FOUND
         LA    R3,0(,R3)           CLEAR HI-ORDER BIT
         SLR   R3,R2               GET OFFSET INTO NUC LOAD MOD
         ST    R3,XOFFSET          SAVE THIS OFFSET
        NUCLKUP BYNAME,NAME=XEBCS,ADDR=(R3) GET LENGTH OF CSECT
         LTR   R15,R15
         BNZ   LBLNTFND            BR IF LABEL NOT FOUND
         ST    R1,XCSLEN           SAVE CSECT LENGTH
         BAL   R14,BIT24           GET BACK TO 24-BIT MODE
         B     SCMEXIT             EXIT
SCNMD1   NI    @SWB,255-XFSKIP1
SCNMD2   SLR   R14,R14             CLEAR THE CSECT DESCRIPTOR ARRAY
         ST    R14,XSDCNT
         LA    R14,1
         ST    R14,@ESDSUB
SCNMD3   LR    R11,R14
         MH    R11,=Y(XSD@L)
         LA    R7,XSDNO(R11)
         XC    0(XSD@L,R7),0(R7)
         AL    R14,ONE
         ST    R14,@ESDSUB
         CL    R14,=F'400'
         BNH   SCNMD3
         SLR   R14,R14             READ AND PROCESS CESD RECORDS
         ST    R14,XCRSW           CLEAR LOOP SWITCH
         B     SCNMD10
SCNMD4   BAL   R14,READLIB
         CLI   XLREC,C' '          SYM RECORD?
         BNE   SCNMD5              NO, BRANCH
         BAL   R14,SYMCHK          GO PROCESS SYM RECORD
SCNMD5   CLI   XLREC,X'20'         CESD RECORD?
         BE    SCNMD6              YES, BRANCH
         LA    R14,1
         ST    R14,XCRSW
         B     SCNMD10
*                                  SCAN CESD ENTRIES ON CESD RECORD
SCNMD6   LH    R2,XLREC+6          GET LENGTH OF ESD DATA
         SRDA  R2,32
         D     R2,=F'16'           GET NUMBER OF ENTRIES
         ST    R3,XNUMCESD
         LA    R14,1               START WITH ENTRY NUMBER 1
         B     ESDGO
SCNMD7   LA    R14,1
         AL    R14,XCESDN
         ST    R14,XCESDN
         TM    @SWB,XFSKIP1
         BZ    SCNMD8
         NI    @SWB,255-XFSKIP1
         B     ESDINCR
SCNMD8   L     R14,@ESDSUB
         SLA   R14,4               MULTIPLY BY 16
         LA    R11,XLREC(R14)      ACTUALLY XLREC+16-16
         TM    0(R11),X'0F'        IS IT AN SD?
         BZ    GOTSD               YES, BRANCH
         LA    R11,XLREC(R14)
         TM    0(R11),X'03'        COULD IT BE AN LR?
         BNO   ESDINCR             NO, BRANCH
         TM    0(R11),X'0C'        MAY BE, IS IT AN LR?
         BNZ   ESDINCR             NO, BRANCH
GOTSD    L     R14,@ESDSUB
         ST    R14,XCESDX          SET INDEX TO CESD ENTRY
         BAL   R14,SECTMAP         USE THIS CESD TO MAP LOAD MODULE
         L     R14,@ESDSUB
         SLA   R14,4
         LA    R11,XLREC-8(R14)    ACTUALLY BUFFER+8-16
         CLC   0(8,R11),XEBLBL     IS THIS THE RIGHT LABEL?
         BNE   SCNMD9              NO, BRANCH
         L     R14,XLREC(R14)      ACTUALLY BUFFER+16-16
         LA    R14,0(,R14)         ZERO HI ORDER BYTE OF ADDRESS
         ST    R14,XOFFSET         SAVE CSECT ADDRESS
SCNMD9   L     R14,@ESDSUB
         SLA   R14,4
         LA    R11,XLREC(R14)      ACTUALLY BUFFER+8-16
         TM    0(R11),X'0F'        IS THIS AN SD?
         BNZ   ESDINCR             NO, BRANCH
         LA    R11,XLREC-8(R14)
         CLC   0(8,R11),XEBCS      IS THIS THE REQUESTED CSECT?
         BNE   ESDINCR             NO, BRANCH
         L     R14,XLREC(R14)      ACTUALLY BUFFER+16-16
         LA    R14,0(,R14)         ZERO HI ORDER BYTE OF ADDRESS
         ST    R14,XCSDADR         SAVE CSECT ADDRESS
         L     R14,XSDX
         ST    R14,XCSECNO
ESDINCR  LA    R14,1               ADD 1 TO
         AL    R14,@ESDSUB          ESD SUBSCRIPT
ESDGO    ST    R14,@ESDSUB
         CL    R14,XNUMCESD        HAS SUBSCRIPT HIT SIZE YET?
         BNH   SCNMD7              NO, BRANCH
SCNMD10  SLR   R14,R14             CHECK FOR SUCCESSFUL SCAN
         CL    R14,XCRSW
         BE    SCNMD4
         CLC   XEBCS(L'XEBCS),=CL72' '
         BNE   SCNMD11             IF NO CSECT SPECIFIED
         MVC   XCSECNO,ONE         USE THE FIRST CSECT
         ST    R14,XCSDADR          AND RELATIVE ADDRESS IS 0
SCNMD11  L     R14,XSYMOFF
         LTR   R14,R14             WAS LABEL FOUND IN A SYM REC?
         BM    SCNMD12             NO, BR
         AL    R14,XCSDADR         GET POSITION WITHIN LOAD MOD
         ST    R14,XOFFSET         STORE SYM OFFSET + CSECT ADDR
SCNMD12  SLR   R14,R14
         CL    R14,XSDCNT          WAS AT LEAST ONE CSECT FOUND?
         BNL   LBLNTFND            BR IF NO
         L     R11,XCSECNO
         CR    R11,R14             WAS OWNING CSECT FOUND?
         BNH   LBLNTFND            BR IF NO
         CL    R14,XOFFSET         WAS DESIRED LABEL FOUND?
         BH    LBLNTFND            BR IF NO
         MH    R11,=Y(XSD@L)
         LA    R7,XSDLEN(R11)
         MVC   XCSLEN+1(3),0(R7)   MOVE IN CSECT LENGTH
*              SCATTER LOAD PROCESSING FOR NUCLEUS GO THROUGH TABLE
*              ADDING UP LENGTH OF EACH CSECT (ROUNDED UP TO NEAREST
*              DOUBLE WORD) PREVIOUS TO DESIRED CSECT.
         CLC   XEBLM(6),=CL6'IEANUC'
         BNE   SCNMD15
         ST    R14,XACCUM          CLEAR ACCUMULATED LENGTH
         LA    R14,1               SET CSECT COUNTER
         B     SCNMD14             GO DO LOOP TEST
SCNMD13  L     R11,XACCUM          GET ACCUMULATED LENGTH
         ST    R11,XSMCSD          SAVE IT
         LR    R7,R14              GET CSECT NUMBER
         MH    R7,=Y(XSD@L)        GET OFFSET INTO TABLE
         XR    R4,R4               CLEAR REG.
         LA    R7,XSDLEN(R7)       POINT AT CSECT LENGTH
         ICM   R4,B'0111',0(R7)    LOAD CSECT LENGTH
         LA    R4,7(,R4)           ADD IN ROUNDUP VALUE
         N     R4,=F'-8'           GET DBL WORD ROUNDED UP VALUE
         ST    R4,XWORK
         ALR   R11,R4              ADD TO ACCUMULATED VALUE
         ST    R11,XACCUM
         AL    R14,ONE             INCREMENT CSECT COUNTER
SCNMD14  ST    R14,@ESDSUB
         CL    R14,XCSECNO         ALL PREV CSECTS PROCESSED?
         BNH   SCNMD13             NO, BRANCH
         B     SCNMD16
SCNMD15  L     R14,XCSDADR         NON-SCATTER-LOAD PROCESSING
         ST    R14,XSMCSD          DISK ADDR IS SAME AS IN-CORE
SCNMD16  L     R14,XOFFSET
         SL    R14,XCSDADR         GET OFFSET WITHIN CSECT
         ST    R14,XOFFSET
         AL    R14,XSMCSD          GET OFFSET WITHIN LOAD MOD
         ST    R14,XOFFSET
         B     SCMEXIT
LBLNTFND LA    R14,MSG08           SYMBOL NOT FOUND IN LOAD MODULE
         ST    R14,XMSE
         BAL   R14,BIT24           BE SURE WE ARE IN 24 BIT MODE
         BAL   R14,GENERR
SCMEXIT  LM    R14,R12,@SVSCMD
         BR    R14
*- - - - SCAN LPA/JPA LOOKING FOR LOAD MODULE (R14 = LINK REGISTER)
*              INPUT : XEBLM = NAME OF LOAD MODULE
*              OUTPUT : XLMADDR = ADDR OF LOAD MODULE
SCANLPA  STM   R14,R12,@SVSCLP
         TM    @SWB,XFLOCSW        IS IT LOCAL MODE?
         BO    SCLPA1              YES, GO LOOK IN JPA
         L     R8,CVTPTR           CVT ADDRESS
         USING CVT,R8
         LA    R8,CVTQLPAQ         LINK PACK POINTER
         DROP  R8
         B     SCLPA2
SCLPA1   L     R14,CVTPTR          CVT ADDRESS
         USING CVT,R14
         L     R14,CVTTCBP         TCB WORDS
         DROP  R14
         L     R14,4(,R14)         CURRENT TCB
         USING TCB,R14
         L     R8,TCBJSTCB
         DROP  R14
         USING TCB,R8
         LA    R14,TCBJPQ          LAST CDE
         DROP  R8
         LR    R8,R14
SCLPA2   LA    R9,XEBLM
         LR    R4,R9
         SL    R4,=F'48'
         L     R7,CVTPTR           CVT ADDRESS
         USING CVT,R7
         L     R15,CVTQCDSR        CDE SEARCH RTN
         DROP  R7
         BALR  R14,R15             STD LINKAGE
*                                  (RETURNS AT +4 IF NAME NOT FOUND)
         LA    R0,0                INDICATE NAME WAS FOUND
         LTR   R0,R0
         BNZ   SCLPA3              BR IF NAME NOT FOUND
         TM    28(R11),X'04'       IS THIS A MINOR CDE?
         BZ    GETEXTL             NO, SKIP OBTAINING MAJOR CDE
         L     R11,20(,R11)        GET ADDR OF MAJOR CDE
GETEXTL  L     R14,20(,R11)        GET ADDR OF EXTENT LIST
         L     R7,12(,R14)         GET ADDR OF LOAD MOD
         ST    R7,XLMADDR          ADDRESS OF MODULE
         L     R7,XCSLEN
         LA    R7,0(,R7)
         LTR   R7,R7               IS CSECT LENGTH CURRENTLY 0?
         BNZ   SCLPA4              NO, SKIP
         MVC   XCSLEN+1(3),9(R14)  USE LOAD MODULE LENGTH
         B     SCLPA4
SCLPA3   SLR   R14,R14
         ST    R14,XLMADDR         INDICATE NO CDE FOUND
SCLPA4   L     R14,XLMADDR         SCAN LPA DIRECTORY (LPDE'S)
         LTR   R14,R14
         BNZ   SCLPA7              BRANCH IF MODULE ALREADY FOUND
         TM    @SWB,XFLOCSW
         BO    SCLPA7              BR IF LOCAL MODE (SKIP SEARCH)
         L     R14,CVTPTR          CVT ADDRESS
         USING CVT,R14
         TM    CVTDCB,CVTMVS2      MVS BIT ON?
         BZ    SCLPA7
         SLR   R0,R0               SET
         BCTR  R0,0                 R0 NEGATIVE
         L     R1,CVTLPDIA         LPA DIRECTORY
         LA    R1,0(,R1)
         B     LOCATGO1            DO WHILE R0 NEGATIVE
         DROP  R14
LOCATLP1 CLC   8(8,R1),XEBLM
         BNE   SCLPA6
         TM    28(R1),X'04'        ALIAS?
         BZ    SCLPA5              NO
         MVC   XEBLM,32(R1)        YES, GET REAL NAME AND START OVER
         L     R14,CVTPTR          CVT ADDRESS
         USING CVT,R14
         L     R1,CVTLPDIA         LPA DIRECTORY
         LA    R1,0(,R1)
         B     LOCATINC
         DROP  R14
SCLPA5   L     R0,36(,R1)          SET R0 TO MODULE ADDRESS
         L     R14,XCSLEN
         LA    R14,0(,R14)
         LTR   R14,R14             IS THERE A CSECT LENGTH YET?
         BNZ   LOCATINC            YES, BRANCH
         MVC   XCSLEN+1(3),33(R1)  USE LOAD MOD LEN AS CSECT LEN
         B     LOCATINC
SCLPA6   CLC   8(8,R1),=XL8'FFFFFFFFFFFFFFFF'  HAVE WE SEE ALL LPDE'S?
         BNE   LOCATINC            NO, BRANCH
         SLR   R0,R0               END OF DIRECTORY, SET R0 NON NEG
LOCATINC AL    R1,=F'40'           POINT AT NEXT LPDE
LOCATGO1 LTR   R0,R0
         BM    LOCATLP1
         ST    R0,XLMADDR          SAVE LOCATION OF MODULE
SCLPA7   L     R14,XLMADDR
         LTR   R14,R14             WAS END OF DIRECTORY HIT?
         BNZ   SCANLPAX            NO, BRANCH
         LA    R14,MSG04           MODULE NOT FOUND IN MAIN STORAGE
         ST    R14,XMSE
         BAL   R14,GENERR
SCANLPAX LM    R14,R12,@SVSCLP
         BR    R14
*- - - - PRINT ADDRESS OF SYMBOL (CSECT, LABEL, ETC...)
*              (R14 = LINK REGISTER)
*              INPUT : XLOC = FOUR-BYTE ADDRESS TO BE DISPLAYED
PRADDR   STM   R14,R12,@SVPRAD
         MVI   @LN47,C' '
         MVC   @LN48(73),@LN47
         MVC   @LN01(46),WHEREMSG
         LA    R14,XLOC
         ST    R14,XHEX            ADDR OF WHERE HEX IS COMING FROM
         MVC   XHEXL,=F'4'
         LA    R14,@LN01
         ST    R14,XEBAD           ADDR WHERE WE WANT EBCDIC ADDR
         BAL   R14,HEXCV           CONVERT HEX ADDR TO EBCDIC
         BAL   R14,PUTLINE         GO PRINT IT OUT
         LM    R14,R12,@SVPRAD
         BR    R14
*- - - - HEX TO EBCDIC CONVERSION (R14 = LINK REGISTER)
*              INPUT : XHEX = ADDR OF HEX DATA TO BE CONVERTED
*                      XHEXL = LENGTH OF HEX DATA
*                      XEBAD = ADDRESS OF TARGET AREA TO RECEIVE
*                              EBCDIC DATA
HEXCV    STM   R14,R12,@SVHXCV
         BAL   R14,MODESET1        GET INTO KEY 0
         LA    R14,1               SET UP LOOP VARIABLE
         B     HEXCT
HEXLP    L     R11,XEBAD           GET ADDR OF TARGET EBCDIC AREA
         L     R7,XHEX             GET ADDR OF 'FROM' FIELD
         ALR   R7,R14
         BCTR  R7,0                POINT AT CURRENT CHARACTER
         LR    R4,R14              SAVE LOOP COUNTER
         BAL   R14,BIT31           GET 31-BIT MODE IF XA
         MVC   1(1,R11),0(R7)      MOVE CHARACTER TO TARGET AREA
         BAL   R14,BIT24           GET BACK TO 24-BIT MODE
         LR    R14,R4
         UNPK  0(1,R11),1(1,R11)   GET FIRST NIBBLE INTO NEXT BYTE
         NC    0(2,R11),=XL2'0F0F' STRIP ZONE BITS
         TR    0(2,R11),=CL16'0123456789ABCDEF'   TRANSLATE TO EBCDIC
         AL    R11,=F'2'           BUMP TARGET CHAR POINTER
         ST    R11,XEBAD
         AL    R14,ONE             INCREMENT LOOP COUNTER
HEXCT    ST    R14,XX
         CL    R14,XHEXL           ARE THERE MORE CHAR'S TO CONVERT
         BNH   HEXLP
         BAL   R14,MODESET2        GET BACK TO USER KEY
         LM    R14,R12,@SVHXCV
         BR    R14
*- - - - REAL TO VIRTUAL CONVERSION (R15 = LINK REGISTER)
*              INPUT : R2 - REAL ADDR
*              OUTPUT : R1,R3 - ALTERED
*                       R2 - CONVERTED VIRTUAL ADDRESS
REAL2VIR LR    R1,R2               COPY INPUT ADDR
         SRL   R1,12               SHIFT OFF DISPLACEMENT
         L     R3,CVTPTR           GET ADDR OF CVT
         USING CVT,R3
         L     R3,CVTPVTP          GET ADDR OF PVT
         DROP  R3
         USING PVT,R3
         L     R3,PVTRIT           GET ADDR OF RIT
         DROP  R3
         L     R3,RITPFT(,R3)      GET ADDR OF PFT
         SLL   R1,5                GET PFT DISPLACEMENT
         L     R1,PFTVSA(R1,R3)    GET VIRT PAGE ADDR
R2VB     N     R2,MASKPGDP         GET PAGE DISPLACEMENT
         OR    R2,R1               COMBINE WITH VIRT PAGE NO.
         BR    R15                 RETURN
*- - - - FIND MODULE ON PROGRAM LIBRARY (R14 = LINK REGISTER)
FIND     STM   R14,R12,@SVFIND
        FIND   XDCBL,XEBLM,D       FIND
         LTR   R15,R15             WAS MEMBER FOUND?
         BZ    FINDOK              YES, BRANCH
         LA    R14,MSG07           MEMBER NOT FOUND IN LIBRARY
         ST    R14,XMSE
         BAL   R14,GENERR
FINDOK   LM    R14,R12,@SVFIND
         BR    R14
*- - - - SYM REC PROCESSING (R14 = LINK REGISTER)
*              INPUT : XEBCS = CSECT CONTAINING LABEL
*                      XEBLBL = LABEL BEING SEARCHED FOR
*                      XLREC = FIRST SYMREC
*              OUTPUT : XSYMOFF = OFFSET OF LABEL IN CSECT
*                       XLREC = NEXT LIBRARY RECORD AFTER ALL SYMREC'S
SYMCHK   STM   R14,R12,@SVSCHK
         SLR   R14,R14
         ST    R14,XSYMTOTX
         LA    R14,XLREC+4
         ST    R14,XSYMCPT
         OI    @SWB,XFSYMSKP+XFSYMGO
         BAL   R14,SYMNEW
         B     SYMCHK12
SYMCHK1  LA    R14,@WAY08
         B     SYMCHK3
SYMCHK2  BAL   R14,SYMFETCH
         LA    R14,1
         AL    R14,XSYMFAD
SYMCHK3  ST    R14,XSYMFAD
         LA    R11,@WAY08
         SL    R11,=F'-3'
         CR    R14,R11
         BNH   SYMCHK2
         TM    @SWB,XFSYMGO
         BZ    SYMCHK12
         TM    @WAY08,X'88'
         BO    SYMCHK9
         MVC   @WAY08A(8),=CL72' '
         LA    R14,@WAY08A
         B     SYMCHK5
SYMCHK4  BAL   R14,SYMFETCH
         LA    R14,1
         AL    R14,XSYMFAD
SYMCHK5  ST    R14,XSYMFAD
         LA    R11,@WAY08A
         LA    R7,7
         SLR   R4,R4
         IC    R4,@WAY08
         NR    R7,R4
         ALR   R11,R7
         CR    R14,R11
         BNH   SYMCHK4
         TM    @SWB,XFSYMSKP
         BZ    SYMCHK7
         TM    @WAY08,X'80'
         BO    SYMCHK9
         TM    @WAY08,X'10'
         BZ    SYMCHK9
         TM    @WAY08,X'60'
         BNZ   SYMCHK9
         CLC   @WAY08A(8),XEBCS
         BE    SYMCHK6
         CLC   XEBCS(L'XEBCS),=CL72' '
         BNE   SYMCHK9
SYMCHK6  NI    @SWB,255-XFSYMSKP
         B     SYMCHK9
SYMCHK7  TM    @WAY08,X'80'
         BO    SYMCHK8
         TM    @WAY08,X'10'
         BZ    SYMCHK8
         TM    @WAY08,X'60'
         BNZ   SYMCHK8
         CLC   XEBCS(L'XEBCS),=CL72' '
         BE    SYMCHK9
         OI    @SWB,XFSYMSKP
         B     SYMCHK9
SYMCHK8  CLC   @WAY08A(8),XEBLBL
         BNE   SYMCHK9
         SLR   R14,R14
         ICM   R14,B'0111',@WAY08Z
         ST    R14,XSYMOFF
SYMCHK9  TM    @WAY08,X'80'
         BZ    SYMCHK12
         LA    R14,@WAY08B
         ST    R14,XSYMFAD
         BAL   R14,SYMFETCH
         LA    R14,@WAY08C
         ST    R14,XSYMFAD
         BAL   R14,SYMFETCH
         CLI   @WAY08B,X'10'
         BNL   SYMCHK10
         BAL   R14,SYMFETCH
SYMCHK10 TM    @WAY08,X'40'
         BZ    SYMCHK11
         BAL   R14,SYMFETCH
         BAL   R14,SYMFETCH
         BAL   R14,SYMFETCH
SYMCHK11 TM    @WAY08,X'10'
         BZ    SYMCHK12
         BAL   R14,SYMFETCH
         BAL   R14,SYMFETCH
SYMCHK12 TM    @SWB,XFSYMGO
         BO    SYMCHK1
         LM    R14,R12,@SVSCHK
         BR    R14
*- - - - CHARACTER FETCHING (FOR SYMREC PROCESSING)
*              (R14 = LINK REGISTER)
*              INPUT : XSYMFAD = ADDR OF BYTE TO RECEIVE FETCHED
*                                CHARACTER
*              OUTPUT : XSYMFAD -> BYTE = FETCHED CHARACTER
*                       XSYMFGO = ON IF DATA IS EXHAUSTED
SYMFETCH STM   R14,R12,@SVSFCH
         L     R14,XSYMRECX
         L     R11,XSYMCPT
         ICM   R11,B'1100',10(R11)
         SRA   R11,16
         CR    R14,R11
         BL    SYMFTCH1
         BAL   R14,SYMNEW
SYMFTCH1 TM    @SWB,XFSYMGO
         BZ    SYMFTCH2
         L     R14,XSYMFAD
         L     R11,XSYMFPT
         MVC   0(1,R14),0(R11)
         LA    R14,1
         L     R7,XSYMRECX
         ALR   R7,R14
         ST    R7,XSYMRECX
         ALR   R11,R14
         ST    R11,XSYMFPT
SYMFTCH2 LM    R14,R12,@SVSFCH
         BR    R14
*- - - - GET A NEW SYMREC LOGICAL RECORD (R14 = LINK REGISTER)
SYMNEW   STM   R14,R12,@SVSNEW
         SLR   R14,R14
         ST    R14,XSYMRECX
         ST    R14,XSYMFPT         SET PNTR = 0
         B     SYMNEW5             DO WHILE PNTR = 0 AND XFSYMGO ON
SYMNEW1  L     R14,XSYMTOTX
         CH    R14,XLREC+2
         BL    SYMNEW3
         SLR   R14,R14
         ST    R14,XSYMTOTX
         BAL   R14,READLIB
         CLI   XLREC,C' '          SYM?
         BNE   SYMNEW2             NO, BRANCH
         LA    R14,XLREC+4
         ST    R14,XSYMCPT
         B     SYMNEW3
SYMNEW2  NI    @SWB,255-XFSYMGO    SET XFSYMGO OFF
SYMNEW3  L     R14,XSYMTOTX
         LTR   R14,R14
         BZ    SYMNEW4
         LA    R14,80
         AL    R14,XSYMCPT
         ST    R14,XSYMCPT
SYMNEW4  LA    R14,80
         AL    R14,XSYMTOTX
         ST    R14,XSYMTOTX
         L     R14,XSYMCPT
         CLC   1(3,R14),=CL3'SYM'
         BNE   SYMNEW5
         L     R11,XSYMOFF
         LTR   R11,R11
         BNM   SYMNEW5
         LA    R14,16(,R14)
         ST    R14,XSYMFPT
SYMNEW5  L     R14,XSYMFPT
         LTR   R14,R14
         BNZ   SYMNEW6
         TM    @SWB,XFSYMGO
         BO    SYMNEW1
SYMNEW6  LM    R14,R12,@SVSNEW
         BR    R14
*- - - - READ RECORD FROM LIBRARY (R14 = LINK REGISTER)
READLIB  STM   R14,R12,@SVRDLB
        READ   @DECB,SF,XDCBL,XLREC,248,MF=E
        CHECK  @DECB
         LM    R14,R12,@SVRDLB
         BR    R14
*- - - - CSECT MAPPING (R14 = LINK REGISTER)
*              INPUT : XCESDX = INDEX INTO ARRAY OF CESD ENTRIES IN A
*                               CESD REC
*                      XCESDN = CESD NO. OF CURRENT CESD ENTRY
*                      CESD = A CESD RECORD
*                      XEBLM = LOAD MODULE NAME
*              OUTPUT : XSDNO = ARRAY OF CESD NO.S FRO CSECTS (SD'S) IN
*                               LD MOD
*                       XSDLEN = ARRAY OF CSECT LENGTHS
*                       XSDCNT = COUNT OF CSECTS IN LOAD MODULE
*                                (THUS FAR)
*                       XSDX = FOR A SD ENTRY, THE RELATIVE CSECT
*                              NUMBER WITHIN THE IN-CORE VERSION OF
*                              THE LOAD MODULE
SECTMAP  STM   R14,R12,@SVSCTM
         L     R14,XCESDX          GET ESD SUBSCRIPT
         SLA   R14,4               MULTIPLY BY 16
         LA    R11,XLREC(R14)      POINT TO ESD ENTRY + 8
         TM    0(R11),X'03'        IS IT AN LR?
         BNO   SCTMP4              NO, BRANCH
         TM    0(R11),X'0C'        IS IT AN LR?
         BNZ   SCTMP4              NO, BRANCH
*              IF CESD ENTRY IS A LABEL REFERENCE (ENTRY POINT)
*              CHECK FOR SCATTER LOADING (IE. NUCLEUS). SINCE THE
*              SCATTER-LOADED NUCLEUS IS LOADED AS CESD ENTRIES
*              (SD'S OR LR'S) OCCUR IN THE CESD RECORDS, ADD THE CESD
*              NUMBER OF THE LABEL'S CSECT TO THE SD (CSECT) ARRAY.
         CLC   XEBLM(6),=CL6'IEANUC' IS THIS A NUCLEUS ZAP?
         BNE   SCTMP4              NO, BRANCH
         MVC   XSDX,ONE
         B     SCTMP3
SCTMP1   L     R14,XSDX
         L     R11,XSDCNT
         CR    R14,R11
         BNH   SCTMP2
         AL    R11,ONE
         ST    R11,XSDCNT
         MH    R14,=Y(XSD@L)
         L     R11,XCESDX
         SLA   R11,4
         LH    R11,XLREC+6(R11)
         N     R11,MASKFFFF
         LA    R7,XSDNO(R14)
         STCM  R11,B'0011',0(R7)
         B     SCTMP3
SCTMP2   LA    R14,1
         AL    R14,XSDX
         ST    R14,XSDX
SCTMP3   L     R14,XSDX
         MH    R14,=Y(XSD@L)
         L     R11,XCESDX
         SLA   R11,4
         LH    R11,XLREC+6(R11)
         N     R11,MASKFFFF
         LA    R7,XSDNO(R14)
         ICM   R14,B'1100',0(R7)
         SRA   R14,16
         CR    R11,R14
         BNE   SCTMP1
*              IF CESD ENTRY IS A SECTION DEFINITION (SD OR CSECT),
*              ADD THE CESD NO. FOR THE CSECT TO THE ARRAY. IF LOAD
*              MOD IS THE NUCLEUS CHECK FIRST THAT AN ENTRY MIGHT
*              ALREADY BE IN THE ARRAY FOR THIS CESD NO. FROM AN
*              EARLIER 'LR' ENTRY. ONCE THE PROPER CESD ENTRY HAS
*              BEEN FOUND OR ADDED TO THE ARRAY, PUT IN THE LENGTH
*              OF THIS CSECT.
SCTMP4   L     R14,XCESDX          GET ESD SUBSCRIPT
         SLA   R14,4               MULTIPLY BY 16
         LA    R11,XLREC(R14)      POINT TO ESD ENTRY + 8
         TM    0(R11),X'0F'        IS IT AN SD?
         BNZ   SCTMP10             NO, BRANCH
         CLC   XEBLM(6),=CL6'IEANUC'    IS THIS A NUCLEUS ZAP?
         BNE   SCTMP8              NO, BRANCH
         MVC   XSDX,ONE
         B     SCTMP7
SCTMP5   L     R14,XSDX
         L     R11,XSDCNT
         CR    R14,R11
         BNH   SCTMP6
         AL    R11,ONE
         ST    R11,XSDCNT
         MH    R14,=Y(XSD@L)
         L     R11,XCESDN
         LA    R7,XSDNO(R14)
         STCM  R11,B'0011',0(R7)
         B     SCTMP7
SCTMP6   LA    R14,1
         AL    R14,XSDX
         ST    R14,XSDX
SCTMP7   L     R14,XSDX
         MH    R14,=Y(XSD@L)
         LA    R11,XSDNO(R14)
         ICM   R14,B'1100',0(R11)
         SRA   R14,16
         CL    R14,XCESDN
         BNE   SCTMP5
         B     SCTMP9
SCTMP8   LA    R14,1
         AL    R14,XSDCNT
         ST    R14,XSDCNT
         ST    R14,XSDX
         MH    R14,=Y(XSD@L)
         L     R11,XCESDN
         LA    R7,XSDNO(R14)
         STCM  R11,B'0011',0(R7)
SCTMP9   L     R14,XSDX
         MH    R14,=Y(XSD@L)
         L     R11,XCESDX          GET SUBSCRIPT
         SLA   R11,4               MULTIPLY BY 16
         LA    R7,XSDLEN(R14)
         LA    R14,XLREC+4+1(R11)
         MVC   0(3,R7),0(R14)
SCTMP10  LM    R14,R12,@SVSCTM
         BR    R14
*- - - - OBTAIN 24-BIT ADDRESSING MODE (R14 = LINK REGISTER)
BIT24    LA    R14,0(,R14)         CLEAR HI-ORDER PORTION
         BSM   0,R14               RETURN IN 24-BIT MODE
*- - - - OBTAIN 31-BIT ADDRESSING MODE (R14 = LINK REGISTER)
BIT31    LA    R14,0(,R14)         CLEAR OUT BAL STUFF, ETC...
         O     R14,HIORDBIT        TURN ON AMODE-31 BIT
         BSM   0,R14               RETURN IN 31-BIT MODE
*- - - - GAIN SUPERVISOR STATE, KEY ZERO (R14 = LINK REGISTER)
MODESET1 STM   R14,R12,@SVMST1
        MODESET KEY=ZERO,MODE=SUP
         LM    R14,R12,@SVMST1
         BR    R14
*- - - - RETURN TO PROBLEM STATE AND KEY (R14 = LINK REGISTER)
MODESET2 STM   R14,R12,@SVMST2
        MODESET KEY=NZERO,MODE=PROB
         LM    R14,R12,@SVMST2
         BR    R14
*- - - - GENERAL ERROR (R14 = LINK REGISTER)
*              INPUT : XMSE = ADDR OF MESSAGE LIST
GENERR   STM   R14,R12,@SVGNRR
         MVI   @LN02,C' '
         MVC   @LN03(L'@LINE-3),@LN02
         L     R14,XMSE            GET ADDRESS OF MESSAGE
         XR    R11,R11
         IC    R11,0(,R14)         GET LENGTH OF MESSAGE
         EX    R11,PUTMSGM         MOVE R14+4 TO @LN01
         BAL   R14,PUTLINE         WRITE THE MESSAGE
         TM    XFLAGS,XFERR        PRT IN ERROR?
         BO    GENERRX             YES, GO BACK (FLUSH)
         MVC   XCODE,=F'12'        SET RETURN CODE = 12
         OI    XFLAGS,XFEOD        FORCE END-OF-DATA (FLUSH)
GENERRX  LM    R14,R12,@SVGNRR
         BR    R14
*- - - - SYNTAX ERROR MESSAGE (R14 = LINK REGISTER)
SYNERR   STM   R14,R12,@SVSNRR
         MVI   @LN02,C' '
         MVC   @LN03(L'@LINE-3),@LN02
         MVI   @LN01,C' '
         MVC   @LN01(15),SYNTAX
         L     R14,XMSE
         XR    R11,R11
         IC    R11,0(,R14)
         EX    R11,PUTM8MV         MOVE 1(R14) TO LINE+16
         BAL   R14,PUTLINE
         TM    XFLAGS,XFERR        PRT IN ERROR?
         BO    SYNERRX             YES, GO BACK (FLUSH)
         MVC   XCODE,=F'8'         SET RETURN CODE = 8
         OI    XFLAGS,XFEOD        FORCE END-OF-DATA
SYNERRX  LM    R14,R12,@SVSNRR
         BR    R14
*- - - - OUTPUT RECORD PRINTING (CREATE AND OPEN THE DATA-SET)
*              (R14 = LINK REGISTER)
PUTLINE  TM    XFLAGS,XFERR        PRT IN ERROR?
         BOR   R14                 YES, GO BACK (FLUSH)
         STM   R14,R12,@SVPUTL
         TM    XFLAGS,XFOOP        PRT OPENED?
         BO    PUTLN               YES
         L     R2,DYNWORKP         INITIALIZE DYNAMIC ALLOCATION WORK
         LR    R0,R2
         LH    R1,=Y(PARMLLEN)     LENGTH TO BE CLEARED
         LA    R14,*
         XR    R15,R15
         ICM   R15,B'1000',=CL72' '
         MVCL  R0,R14              CLEAR TO ALL BLANKS
         USING PARMLIST,R2
         L     R9,AWADT
         USING WADATA,R9
         MVC   DDNAME,IZPRTDDN     DDNAME
         MVC   DSNAME(L'IZUSRID),IZUSRID BUILD DS-NAME
         LA    R3,DSNAME+L'IZUSRID-1
         CLI   0(R3),C' '
         BNE   *+L'*+4
         BCT   R3,*-8
         MVC   1(15,R3),=CL15'.ETPS.IZAPPRT.D'
         LA    R3,16(R3)
         LA    R1,VUSWA            -> FORMAT DATE AND TIME WORK-AREA
         XC    0(FDTWAL,R1),0(R1)  CLEAR
         L     R15,ARFDTE          GET CURRENT DATE/TIME
*- - - - ETPSFDTE PARM.LIST : "FDTWA" ADDRESS
        CALL   (15)
         USING FDTWA,R1
         MVC   0(L'FXYY,R3),FXYY   SET YEAR (YY)
         MVC   0+L'FXYY(L'FXDDD,R3),FXDDD SET DAY (DDD)
         MVC   0+L'FXYY+L'FXDDD(2,R3),=CL2'.T'
         LA    R3,2+L'FXYY+L'FXDDD(R3)
         MVC   0(L'FTM,R3),FTM     SET TIME HHMMSS
         MVC   0+L'FTM(5,R3),=CL5'.LIST'
         DROP  R1
         MVC   DSUNIT,=CL8'&IZUNM'
         MVC   DSVOLSER,=CL6'&IZVSN' VOL-SER
         MVC   DSALLOC,=CL5'&IZSPU' SPACE UNIT (TRK/CYL)
         MVC   DSPRI,=CL6'&IZPRQ'  PRIMARY QUANTITY
         MVC   DSSEC,=CL6'&IZSCQ'  SECONDARY QUANTITY
         MVI   DSRECFM1,C'F'       SET RECFM=FBA
         MVI   DSRECFM2,C'B'
         MVI   DSRECFM5,C'A'
         MVC   DSBLKSI,=CL5'3630 ' SET BLKSIZE
         MVC   DSLRECL,=CL5'121 '  SET LRECL
         MVC   DSSTATUS,=CL8'NEW ' SET DISP=(NEW,CATLG,CATLG)
         MVC   DSNDISP,=CL8'CATLG '
         MVC   DSADISP,=CL8'CATLG '
         L     R15,ARDYNAM
*- - - - ETPSDYNA PARM.LIST : "DYNWORKP" ADDRESS
        CALL   (15),MF=(E,DYNWORKP)
         LTR   R15,R15             HOW COMPLETE?
         BZ    PUTLAL              OK
        XMESS  4005                ERROR
         LA    R1,APFMSG
PUTLMS   ST    R1,XMSGA            SET MESSAGE ADDRESS
         MVC   XCODE,=F'16'        SET RETURN CODE = 16
         OI    XFLAGS,XFEOD+XFERR  FORCE END-OF-DATA (FLUSH) AND ERROR
         B     PUTLX
PUTLAL   OI    XFLAGS,XFOAL        PRT IS ALLOCATED
         LA    R11,XDCBP
         L     R15,=A(PRTDCB)      POINTER TO DCB IMAGE
         MVC   0(PRTDCBL,R11),0(R15) MOVE DCB PROTOTYPE
         USING IHADCB,R11
         MVC   DCBDDNAM(L'DCBDDNAM),IZPRTDDN SET DD-NAME
         MVI   XDCBA,VLB           SET "VL" BIT
        OPEN   ((R11),(OUTPUT)),MF=(E,XDCBA) OPEN PRT
         TM    DCBOFLGS,DCBOFOPN   WAS OPEN SUCCESSFUL?
         BO    PUTLOK              IF SO, GO PUT
         DROP  R11
         LA    R1,OPFMSG           ELSE IF NOT, ERROR
         B     PUTLMS
PUTLOK   OI    XFLAGS,XFOOP        PRT IS OPENED
         XC    XPGNO(L'XPGNO+L'XLNNO),XPGNO AND CLEAR PAGE AND LINE
         MVC   IZPRTDSN,DSNAME     PASS BACK "PRT" DS-NAME
         MVC   IZPRTVOL,DSVOLSER   PASS BACK "PRT" VOL-SER
         DROP  R2,R9
PUTLN    LH    R0,XLNNO            GET LINE NUMBER
         CLI   @LN00,C'1'          SKIP TO PAGE?
         BE    PUTPG               YES, FORCE PAGE SKIP
         CLI   @LN00,C'0'          DOUBLE SPACE?
         BE    PUTS2               YES
         CLI   @LN00,C'+'          SUPPRESS SKIP?
         BE    PUTS0               YES
         CLI   @LN00,C'-'          TRIPLE SPACE?
         BE    PUTS3               YES
         MVI   @LN00,C' '          ELSE FORCE SINGLE
         B     PUTS1               AND COUNT ONE
PUTS3    BCTR  R0,0
PUTS2    BCTR  R0,0
PUTS1    BCTR  R0,0
PUTS0    LTR   R0,R0               ANYTHING LEFT ON PAGE?
         BNP   PUTPG               NO, EJECT
         STH   R0,XLNNO            SAVE NEW LINE COUNTER
         NI    XFLAGS,255-XIOERR   TURN OFF FLAG
        PUT    XDCBP,@LINE         PRINT THE LINE NOW
         MVI   @LINE,C' '          RESET CC
         TM    XFLAGS,XIOERR       IO ERROR?
         BZ    PUTLX               NO
PUTERR   LA    R1,IOEMSG           ELSE SET I/O ERROR MESSAGE
         B     PUTLMS
PUTLX    LM    R14,R12,@SVPUTL
         BR    R14
*- - - - PUT OUT A TITLE IF AT TOP OF PAGE.
PUTPG    MVI   @LN00,C'-'          TRIPLE SPACE FROM TITLE
         MVC   XLNNO(2),=H'60'     RESET LINE COUNTER
         LH    R1,XPGNO            GET PAGE COUNTER
         LA    R1,1(R1)            COUNT LAST PAGE
         STH   R1,XPGNO            SAVE FOR LATER
         CVD   R1,DBLWRD           CONVERT THE PAGE NUMBER
         MVC   @HEAD,HEADING       MOVE IN THE MASK
         ED    @HEAD+HEADPGN(L'HEADPGN),DBLWRD+5 EDIT IT
         L     R1,AWADT
         USING WADATA,R1
         MVC   @HEAD+HEADUSR(L'HEADUSR),IZUSRID PICK UP USER-ID
         DROP  R1
         LA    R1,VUSWA            -> FORMAT DATE AND TIME WORK-AREA
         XC    0(FDTWAL,R1),0(R1)  CLEAR
         L     R15,ARFDTE          GET CURRENT DATE/TIME
*- - - - ETPSFDTE PARM.LIST : "FDTWA" ADDRESS
        CALL   (15)
         USING FDTWA,R1
         LTR   R15,R15             HOW COMPLETE?
         BNZ   *+L'*+12            ERROR, SKIP
         AIF   ('&TXV' NE 'EUROPE').SK1
         MVC   @HEAD+HEADDAY(L'FXDD),FXDD PICK UP DAY (DD)
         MVC   @HEAD+HEADDAY+3(L'FXMONTH),FXMONTH MONTH (MMM)
         MVC   @HEAD+HEADDAY+7(L'FXYY),FXYY AND YEAR (YY)
         AGO   .SK2
.SK1     MVC   @HEAD+HEADDAY+7(L'FXDD),FXDD PICK UP DAY (DD)
         MVC   @HEAD+HEADDAY+3(L'FXMONTH),FXMONTH MONTH (MMM)
         MVC   @HEAD+HEADDAY(L'FXYY),FXYY AND YEAR (YY)
.SK2     MVC   @HEAD+HEADHOUR(L'FTHH),FTHH SET TIME HH:MM
         MVI   @HEAD+HEADHOUR+L'FTHH,C':'
         MVC   @HEAD+HEADHOUR+L'FTHH+1(L'FTMM),FTMM
         DROP  R1
         NI    XFLAGS,255-XIOERR   TURN OFF FLAG
        PUT    XDCBP,@HEAD         PRINT THE TITLE
         TM    XFLAGS,XIOERR       IO ERROR?
         BO    PUTERR              YES
         B     PUTLN               GO PRINT THE LINE NOW
         SPACE 1
         CNOP  0,8
*------- SYNAD : AN I/O ERROR HAS OCCURED.
PSYNAD   OI    XFLAGS,XIOERR       SIGNAL ERROR
         BR    R14                 AND RETURN
         SPACE 1
*------- EXECUTED INSTRUCTIONS
LOGMVC   MVC   @LN01(*-*),0(R14)
PUTMSGM  MVC   @LN01(*-*),1(R14)
PARBLNK  MVC   0(*-*,R14),=CL72' '
PARMVC   MVC   0(*-*,R11),0(R7)
HPRTRT   TRT   XHW(*-*),0(R14)
MVREPDT  MVC   0(*-*,R11),XHS
PUTM8MV  MVC   @LN16(*-*),1(R14)
VERCLC   CLC   0(*-*,R11),XHS
ZAPXC    XC    XHS(*-*),XHS
ORPROT   OI    0(R9),*-*
         SPACE 1
*------- CONSTANTS
ONE      DC    F'1'
MASKFFFF DC    XL4'0000FFFF'
MASKPAGE DC    XL4'FFFFF000'       PAGE BOUNDARY MASK
MASKPGDP DC    XL4'00000FFF'       PAGE DISPLACEMENT MASK
MASKSTOX DC    XL4'7FFFF000'       XZ-MODE STO REG MASK
MASKSTE  DC    XL4'7FFFFFC0'       SEG TBL ENTRY MASK
MASKPPBT DC    XL4'00000200'       PAGE PROT BIT MASK
HIORDBIT DC    XL4'80000000'       HI-ORDER BIT MASK
         SPACE 1
*- - - - MESSAGES
APFMSG   MSG   'ALLOC "PRT" FAILED'
OPFMSG   MSG   'OPEN "PRT" FAILED'
FPFMSG   MSG   'FREE "PRT" FAILED'
IOEMSG   MSG   'I/O "PRT" ERROR'
WHEREMSG DC    CL46'         = IN-CORE ADDRESS OF PRECEDING SYMBOL'
IGNORED  DC    CL36'OPERATION IGNORED - NO GO SWITCH SET'
REJECT   DC    CL32'VERIFY REJECT - SET NO GO SWITCH'
OLDWAS   DC    CL13'OLD DATA WAS '
EQRC     DC    CL16'   = RETURN CODE'
SYNTAX   DC    CL15'SYNTAX ERROR - '
WARNMSG  DC    CL57'WARNING -- LOCAL MODE IS PROBABLY INVALID FOR THIS X
               MODULE'
HEADING  DS    0CL121
         DC    CL1'1',CL40'E T P S - MAIN STORAGE ZAP'
         DC    CL7'USER : '
HEADUSR  EQU   *-HEADING,8
         DC    CL20' ',CL7'****** '
HEADDAY  EQU   *-HEADING,9
         AIF   ('&TXV' NE 'EUROPE').SK3
         DC    CL9'?? ??? YY'
         AGO   .SK4
.SK3     DC    CL9'YY ??? ??'
.SK4     DC    CL5' --- '
HEADHOUR EQU   *-HEADING,5
         DC    CL18'HH:MM ****** PAGE '
HEADPGN  EQU   *-HEADING-1,6
         DC    XL5'2020202120',CL9' '
MSG01    DC    AL1(L'MSG01T-1)
MSG01T   DC    C'FIELD IS TOO LONG'
MSG02    DC    AL1(L'MSG02T-1)
MSG02T   DC    C'OFFSET FIELD IS TOO LONG'
MSG03    DC    AL1(L'MSG03T-1)
MSG03T   DC    C'INVALID HEXADECIMAL CHARACTER'
MSG04    DC    AL1(L'MSG04T-1)
MSG04T   DC    C'MODULE NOT FOUND IN MAIN STORAGE'
MSG05    DC    AL1(L'MSG05T-1)
MSG05T   DC    C'CSECT MUST BE SUPPLIED FOR NUCLEUS LOAD MODULE'
MSG06    DC    AL1(L'MSG06T-1)
MSG06T   DC    C'OPEN OF PROGRAM LIBRARY HAS FAILED'
MSG07    DC    AL1(L'MSG07T-1)
MSG07T   DC    C'MEMBER NOT FOUND ON PROGRAM LIBRARY'
MSG08    DC    AL1(L'MSG08T-1)
MSG08T   DC    C'SYMBOL NOT FOUND IN LOAD MODULE'
MSG09    DC    AL1(L'MSG09T-1)
MSG09T   DC    C'OPERATION REQUESTED IS INVALID'
MSG10    DC    AL1(L'MSG10T-1)
MSG10T   DC    C'REQUIRED FIELD MISSING'
MSG11    DC    AL1(L'MSG11T-1)
MSG11T   DC    C'UNEVEN NUMBER OF HEXADECIMAL DIGITS'
         PRINT &PRS
        LTORG
         PRINT &PRF
         DROP  R5,R6,R10,R12,R13
         SPACE 1
*------- UPPER LIMIT OF BASE REGISTERS USE --------------------------*
         EJECT
*- - - - FLAG MAPPINGS
XFEOD    EQU   X'80'     XFLAGS  - END-OF-DATA
XFNOGO   EQU   X'40'               NO-GO SWITCH
XFOAL    EQU   X'08'               OUTPUT DATA-SET ALLOCATED
XFOOP    EQU   X'04'               OUTPUT DATA-SET OPENED
XFERR    EQU   X'02'               OUTPUT DATA-SET ERROR
XIOERR   EQU   X'01'               OUTPUT DATA-SET I/O ERROR
XFSYMSKP EQU   X'80'     @SWB    - SKIP SYMBOLS (WRONG CSECT)
XFSYMGO  EQU   X'40'               SW FOR SYMREC PROCESSING
XFSKIP1  EQU   X'20'               SKIP 1ST CESD (NUC MOD)
XFLOCSW  EQU   X'08'               LOCAL(ON)/GLOBAL(OFF) SWITCH
         SPACE 1
*- - - - VERB NAMES TABLE
OPCODES  DC    CL3'VER'            01
         DC    CL3'REP'            02
         DC    CL3'NAM'            03
         DC    CL3'DUM'            04
         DC    CL3'RES'            05
         DC    CL3'   '            06
         DC    CL3'*  '            07
         DC    CL3'RC '            08
         DC    CL3'ZAP'            09
         DC    CL3'GLO'            10
         DC    CL3'LOC'            11
         DC    CL3'BAS'            12
         DC    CL3'IDR'            13
         DC    CL3'SET'            14
OPNUM    EQU   (*-OPCODES)/L'OPCODES
         SPACE 1
*- - - - VERB ROUTINES ADDRESS TABLE
OPENTRY  DC    A(VER)              01
         DC    A(REP)              02
         DC    A(NAM)              03
         DC    A(DUM)              04
         DC    A(REP)              05
         DC    A(COMMENT)          06
         DC    A(COMMENT)          07
         DC    A(RC)               08
         DC    A(ZAP)              09
         DC    A(GLO)              10
         DC    A(LOC)              11
         DC    A(GETOFF)           12
         DC    A(COMMENT)          13
         DC    A(COMMENT)          14
         SPACE 1
LIBDCB  DCB    DSORG=PO,MACRF=R,DDNAME=L
LIBDCBL  EQU   *-LIBDCB
PRTDCB  DCB    DSORG=PS,MACRF=PM,DDNAME=P,LRECL=121,SYNAD=PSYNAD
PRTDCBL  EQU   *-PRTDCB
         SPACE 1
HEXTR    DC    193X'00'            00-C0
         DC    X'0A0B0C0D0E0F'
         DC    41X'00'             C7-EF
         DC    X'00010203040506070809'
         DC    6X'00'              FA-FF
HEXTRT   DC    193X'01'            00-C0          HEXADECIMAL
         DC    6X'00'              C1-C6 (A-F)         VALIDATION
         DC    41X'01'             C7-EF                    TRANSLATE
         DC    10X'00'             F0-F9                         TABLE
         DC    6X'01'              FA-FF
EBCDIC   DC    74C' '              00-49
         DC    X'4A4B4C4D4E4F50'
         DC    C'         '        51-59
         DC    X'5A5B5C5D5E5F6061'
         DC    C'        '         62-69
         DC    X'6A6B6C6D6E6F'
         DC    C'         '        70-78
         DC    X'797A7B7C7D7E7F'
         DC    C' '                80
         DC    C'ABCDEFGHI'        81-89
         DC    C' '                8A
         DC    X'8B8C8D8E8F'
         DC    C' '                90
         DC    C'JKLMNOPQR'        91-99
         DC    C' '                9A
         DC    X'9B9C9D9E9FA0A1'
         DC    C'STUVWXYZ'         A2-A9
         DC    X'AAABACADAEAF'     AA-AF
         DC    X'B0B1B2B3B4B5B6B7B8B9'
         DC    C' '                BA
         DC    X'BBBCBDBEBFC0'
         DC    C'ABCDEFGHI'        C1-C9
         DC    C'      '           CA-CF
         DC    X'D0'
         DC    C'JKLMNOPQR'        D1-D9
         DC    C'      '           DA-DF
         DC    X'E0'
         DC    C' '                E1
         DC    C'STUVWXYZ'         E2-E9
         DC    C'      '           EA-EF
         DC    C'0123456789'       F0-F9
         DC    X'FA'
         DC    C'     '            FB-FF
         EJECT
*------- MAP OF GETMAINED WORK-AREA ---------------------------------*
         SPACE 1
WADATA   DSECT
EYECATCH DS    CL8                 "INCORZAP"
IZUSRID  DS    CL8                 USER-ID
IZLIBDDN DS    CL8                 "LIB" DD-NAME
IZLIBDSN DS    CL44                "LIB" DATA-SET NAME
IZPRTDDN DS    CL8                 "PRT" DD-NAME
IZPRTDSN DS    CL44                "PRT" DATA-SET NAME
IZPRTVOL DS    CL6                 "PRT" VOLUME SERIAL NUMBER
ISZAC    DS    CL1                 CURRENT ACCESS-CODE
ISZSW    DS    XL1
ZPRVIEW  EQU   X'80'               VIEW "PRT" DATA-SET REQUESTED
ZPRDEL   EQU   X'40'               DELETE "PRT" DATA-SET REQUESTED
ZPRALT   EQU   X'08'               ALTERNATE CURSOR POSITION
ZPRPOC   EQU   X'04'               PANEL OPTION CHANGED
STTXENT  EQU   X'01'               STATEMENT TEXT-ENTERED
IZMSGWA  DS    XL1,CL20            MESSAGE WORK-AREA
         DS    0D
STMLNES  DS    8CL80
NBRSTTS  EQU   (*-STMLNES)/L'STMLNES
WALEN    EQU   (((*-WADATA)+7)/8)*8
         SPACE 1
@DATA    DSECT
@SVVER   DS    15F                 LOCAL SAVE-AREAS
@SVREP   DS    15F
@SVNAM   DS    15F
@SVDUM   DS    15F
@SVRC    DS    15F
@SVZAP   DS    15F
@SVBASE  DS    15F
@SVGTRC  DS    15F
@SVGLRC  DS    15F
@SVVSCN  DS    15F
@SVGHEX  DS    15F
@SVDMP   DS    15F
@SVFXR   DS    15F
@SVMOD   DS    15F
@SVGFLD  DS    15F
@SVSCMD  DS    15F
@SVSCLP  DS    15F
@SVPRAD  DS    15F
@SVHXCV  DS    15F
@SVFIND  DS    15F
@SVSCHK  DS    15F
@SVSFCH  DS    15F
@SVSNEW  DS    15F
@SVRDLB  DS    15F
@SVSCTM  DS    15F
@SVMST1  DS    15F
@SVMST2  DS    15F
@SVGNRR  DS    15F
@SVSNRR  DS    15F
@SVPUTL  DS    15F
         SPACE 1
AWADT    DS    F                   "WADATA" POINTER
XINSTAC  DS    2F                  INPUT STATEMENT ADDRESS-COUNT
@ESDSUB  DS    0F
I        DS    F                   WORK VARIABLE
XACCUM   DS    F                   ACCUMULATED CSECT LENGTH
XBASE    DS    F                   BASE VALUE FOR OFFSET ADJ
XCESDN   DS    F                   CESD NUMBER
XCSECNO  DS    F                   CSECT NO. FOR 'XEBLBL'
XCESDX   DS    F                   INDEX TO CESD ENTRY
XCRSW    DS    F                   CESD RECORD SCAN SW
XCSADDR  DS    F                   ADDRESS OF CSECT
XCSDADR  DS    F                   REL ADDR OF CSECT ON DISK
XCSOFF   DS    F                   OFFSET TO CSECT IN LOAD MOD
XCODE    DS    F                   RETURN CODE
XMSGA    DS    F                   RETURN MESSAGE ADDRESS
XDUMPEND DS    F                   END OF DUMP
XDP      DS    F                   DUMP POINTER
XEBAD    DS    F                   ADDR OF EBCDIC DATA
XENDREC  DS    F                   ADDR OF END OF LOGICAL DATA
XFLDCUR  DS    F                   CURRENT CHARACTER POINTER
XRCVADDR DS    F                   ADDR OF RECEIVING FIELD
XFLDALEN DS    F                   ACTUAL FIELD LENGTH
XFLDSTRT DS    F                   START OF FIELD
XGOS     DS    F                   'GET OFFSET' ROUTINE SW
XHEX     DS    F                   ADDR OF HEX DATA
XHEXL    DS    F                   LENGTH OF HEX DATA
XHL      DS    F                   LENGTH OF HEX STRING
XHP      DS    F                   POINTER TO HEX STRING
XHSPTR   DS    F                   HEX STRING POINTER
XHSW     DS    F                   SWITCH
XHWPTR   DS    F                   HEX WORK-AREA POINTER
XLMADDR  DS    F                   IN-CORE ADDR OF LOAD MOD
XLOC     DS    F                   LOCATION TO BE DISPLAYED
XMSE     DS    F                   ADDR OF SYNTAX ERR MSG
XNUMCESD DS    F                   NO. OF ENTRIES IN CESD REC
XOFFSET  DS    F                   OFFSET TO CESD IN LOAD MOD
XPECB    DS    F
XPENDREC DS    F                   POINTER TO END OF PHYSICAL REC
XPS      DS    F                   LOOP SWITCH
XPSRC    DS    F                   PAGE SERVICE RETURN CODE
XRCVLEN  DS    F                   RECEIVING FIELD LEN
XSCANSW  DS    F                   SW TO CONTROL SCAN
XSDCNT   DS    F                   COUNT OF CSECTS IN MODULE
XSDX     DS    F                   ARRAY INDEX FOR XSD
XSMCSD   DS    F
XSYMCPT  DS    F
XSYMFAD  DS    F
XSYMFPT  DS    F
XSYMOFF  DS    F
XSYMRECX DS    F
XSYMTOTX DS    F
XVX      DS    F                   VERB INDEX
XVXSW    DS    F
XWECB    DS    F
XWORK    DS    F
XX       DS    F
XZADDR   DS    F                   IN-CORE STORAGE ADDR
Y        DS    F
XCSLEN   DS    F
XCARD    DS    CL80
         DS    0F
XDCBL    DS    XL100
         DS    0F
XDCBP    DS    XL100
XDCBA    DS    F                   ADDR. OF DCB (OPEN-CLOSE LIST)
         DS    F
@DECB    DS    5F
XEBLM    DS    CL8
XEBCS    DS    CL8
         DS    CL8
XEBLBL   DS    CL8
XEBV     DS    CL8
XPGNO    DS    H                   PAGE COUNTER
XLNNO    DS    H                   LINE COUNTER
XFLAGS   DS    XL1
@SWB     DS    XL1
XGOC     DS    C
         DS    C                   XHOP-1
XHOP     DS    F
XHPW     DS    CL9
XHS      DS    CL40
         DS    C                   XHW-1
XHW      DS    CL80
         SPACE 1
@LINE    DS    0CL121
@LN00    DS    C
@LN01    DS    C
@LN02    DS    C
@LN03    DS    CL11
@LN14    DS    C
@LN15    DS    C
@LN16    DS    C
@LN17    DS    C
@LN18    DS    CL15
@LN33    DS    C
@LN34    DS    CL3
@LN37    DS    C
@LN38    DS    CL3
@LN41    DS    CL6
@LN47    DS    C
@LN48    DS    CL10
@LN58    DS    C
@LN59    DS    CL28
@LN87    DS    C
@LN88    DS    CL26
         DS    CL6
@LN120   DS    C
         SPACE 1
@HEAD    DS    CL121
         SPACE 1
XLREC    DS    0F,XL248
@WAY08   DS    CL1
@WAY08Z  DS    CL3
@WAY08A  DS    CL5
         SPACE 1
*- - - - CSECT MAPPING ARRAY (2000 ENTRIES)
         DS    0F
XSDNO    DS    C                   CSECT NUMBER (2 BYTES)
         DS    C
XSDLEN   DS    C                   CSECT LENGTH (3 BYTES)
@WAY08B  DS    C
@WAY08C  DS    C
XSD@L    EQU   *-XSDNO             ONE ENTRY LENGTH
         DS    1000CL(XSD@L)
         DS    1000CL(XSD@L)
@DATAL   EQU   (((*-@DATA)+7)/8)*8
         SPACE 1
@SIZE    EQU   WALEN+@DATAL
         EJECT
*------- CONTROL BLOCK MAPPINGS -------------------------------------*
         SPACE 1
RITPFT   EQU   X'D0'               POINTER TO APPARENT PFT (XA-IARRIT)
PFTVSA   EQU   X'14'               VIRT STORAGE ADDR (XA-IARPFTE)
         PRINT &PRS
        SPLTAREA
         SPACE 1
        MYSAVE
         SPACE 1
        PARMLIST
         SPACE 1
        FDATE
         PRINT &PRF
        DCBD   DSORG=(PS,PO),DEVD=DA
        IEFZB4D0
        IEZIOB
        IHAPSA ,
        CVT    DSECT=YES,LIST=YES
        IHAPVT ,
        IKJTCB ,
         PRINT GEN
         END
