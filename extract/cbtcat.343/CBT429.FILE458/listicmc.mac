         MACRO
&LABEL   $EPILOG &RC
&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS
         L     R13,4(R13)          GET BACK CHAIN POINTER
         L     R0,16(R13)          GET SAVEAREA LENGTH
         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)
         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         AIF   (T'&RC EQ 'O').SPEC
         LA    R15,&RC             SET RETURN CODE
.SPEC    BR    R14                 RETURN TO CALLER
         MEND
         MACRO
&LABEL   $IN   &REG1=R14,&REG2=R15,&DEPTH=DEPTH,                       X
               &ENTRIES=ENTRIES,&EXITS=EXITS,&LREG=R9
         AIF   (T'&LABEL EQ 'O').ERR1   MUST HAVE A LABEL
&LABEL   LA    &REG1,&LABEL             GET SUBROUTINE ENTRY ADDR
         L     &REG2,&DEPTH             GET CURRENT NESTING DEPTH
         ST    &REG1,&ENTRIES.(&REG2)   SAVE ENTRY ADDR IN ENTRY TABLE
         ST    &LREG,&EXITS.(&REG2)     SAVE RETURN ADDR
         LA    &REG2,4(0,&REG2)         UPDATE NESTING FOR NEXT CALL
         ST    &REG2,&DEPTH              AND SAVE IT...
         MEXIT
.ERR1    MNOTE 8,'---> $IN MUST BE LABELLED'
.MEND    MEND
         MACRO
&LAB    $MESSAGE &MSGNO,&SKIP=0,&DATA=
         PUSH  PRINT
         PRINT GEN
         AIF   (T'&DATA EQ 'O').NODATA
         LA    R2,&DATA
.NODATA  LM    R15,R1,=A(MESGRTN,&SKIP,&MSGNO)
         BASR  R14,R15
         POP   PRINT
         MEND
         MACRO
&LABEL   $OUT  &REG1=R14,&DEPTH=DEPTH,                                 X
               &EXITS=EXITS,&LREG=R9
&LABEL   L     &REG1,&DEPTH             GET CURRENT NESTING DEPTH
         S     &REG1,=F'4'              BACKUP TO OUR CALLER
         ST    &REG1,&DEPTH             AND SAVE NEW DEPTH
         L     &LREG,&EXITS.(&REG1)     PICK UP OUR RETURN ADDR
         BR    &LREG                    AND GO THERE.
         MEND
         MACRO
&NAME    $PROLOG &LV=0
.**********************************************************************
.*
.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY
.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD
.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE
.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS
.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:
.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE
.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE
.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA
.*                                             REG 10 IS BASE
.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES
.*
.**********************************************************************
         LCLA  &AA,&AB,&AC
         LCLC  &LABEL                                              -EU-
         GBLB  &PRORG
&AC      SETA  4096
         AIF   ('&NAME' NE '').EU1                                 -EU-
&LABEL   SETC  '&SYSECT'                                           -EU-
         AGO   .EU2                                                -EU-
.EU1     ANOP  ,                                                   -EU-
&LABEL   SETC  '&NAME'                                             -EU-
&LABEL   CSECT
.EU2     B     32(R15)             BRANCH AROUND                   -EU-
         DC    AL1(26)
         DC    CL8'&LABEL'         CSECT NAME
         DC    C'-'
         DC    CL8'&SYSDATE'       COMPILE DATE
         DC    C'-'
         DC    CL8'&SYSTIME'       COMPILE TIME
         CNOP  0,4                 ALIGNMENT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R12,R15             LOAD BASE REG
         USING &LABEL,R12          INFORM ASSEMBLER
         AIF   (&LV GT 4023).MERR
         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE
         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER
         AIF   (&LV+72 LE 256).XC2
         AIF   (&LV+72 LE 512).XC1
         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE
         LR    R2,R1               SAVE POINTER IN EVEN REG
         LA    R4,1(R1)            SET RECEIVING POINTER
         LR    R5,R0               SET RECEIVING LENGTH
         BCTR  R5,R0               DECREMENT LENGTH
         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE
         LA    R3,1                SET SENDING LENGTH
         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'
         AGO   .STORE
.XC1     XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA
         XC    0(256,R1),0(R1)          CLEAR SAVE AREA
         AGO   .STORE
.XC2     XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA
.STORE   ST    R13,4(R1)           SAVE BACK CHAIN
         ST    R1,8(R13)           SET FORWARD CHAIN
         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS
         L     R15,16(R13)         RESTORE REG 15
         ST    R0,16(R13)          SAVE SAVEAREA LENGTH
         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN
         LR    R13,R11             SET SAVEAREA POINTER
         AIF   (N'&SYSLIST EQ 0).MEND
         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT
         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT
         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG
         DROP  R12                 DROP ASSUMED BASE REG
         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER
.SKIPIT  ANOP
&AA      SETA  2
.LOOP    AIF   (&AA GT N'&SYSLIST).MEXIT
&AB      SETA  &AA-1
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG
         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER
&AC      SETA  &AC+4096
&AA      SETA  &AA+1
         AGO   .LOOP
.MEXIT   AIF   (&PRORG).MEX2
         SPACE
         $REGS
         SPACE
.MEX2    ANOP
&AA      SETA  &LV+72
         MNOTE *,'---> TOTAL STORAGE AREA RECEIVED = &AA'
         MEXIT
.MEND    MNOTE *,'---> NO REGISTER SPECIFIED - R12 ASSUMED'
         AGO   .MEXIT
.MERR    MNOTE 12,'---> LV > 4023 - REQUEST IGNORED'
         AGO   .MEXIT
         MEND
         MACRO
         $REGS
         GBLB  &PRORG
         AIF   (&PRORG).MEX2
&PRORG   SETB  1
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 1
REG0     EQU   0
REG1     EQU   1
REG2     EQU   2
REG3     EQU   3
REG4     EQU   4
REG5     EQU   5
REG6     EQU   6
REG7     EQU   7
REG8     EQU   8
REG9     EQU   9
REG10    EQU   10
REG11    EQU   11
REG12    EQU   12
REG13    EQU   13
REG14    EQU   14
REG15    EQU   15
.MEX2    SPACE 1
         MEND
         MACRO
&NAME    ALLOC &DUMMY,&PERM,&DSN=,&DDN=,&DDNRET=,&MEMBER=,&DISP=,      X
               &TERM=,                                       CBOC      X
               &VOL=,&UNIT=,&SYSOUT=,&FREE=,&COPIES=,&LABEL=,          X
               &BLKSIZE=,&DEN=,&DSORG=,&KEYLEN=,&LRECL=,&RECFM=,       X
               &PASWORD=,&DSNRET=,&MF=AUTO,&PREFIX=,&ERROR=,           X
               &SPACE=,&F=,&FILE=,&DA=,&QNAME=,&DSORGRT=,              X
               &VOLRET=,&DCBDSN=,&DCBDDN=,&SPECIAL=,&DDNTO=,           X
               &FORMS=,&DEST=,&SSREQ=,&FORUSER=,&TU=,&DSNPDE=
.**********************************************************************
.*                                                                    *
.*    THIS MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION BY BUILDING   *
.*    A DYNAMIC ALLOCATION PARAMETER LIST AND INVOKING SVC 99.        *
.*    IT FIRST SETS UP A WORKAREA ENVIRONMENT FOR THE PARAMETER LIST  *
.*    AND THEN TESTS THE KEYWORDS SUPPLIED AND INVOKES INNER MACROS   *
.*    TO BUILD THE TEXT UNITS. THE INNER MACROS THEMSELVES USE INNER  *
.*    MACROS TO UPDATE GLOBAL VARIABLES, STORE TEXT UNIT POINTERS ETC *
.*    THERE ARE THREE WAYS OF SPECIFYING THE WORK AREA ADDRESS.       *
.*    A) MF=AUTO, MF=G, MF=(E,ADDRESS,LNTHSYMB).                      *
.*    IN THE FIRST FORM, AN INNER MACRO DYNSPACE IS CALLED TO NAME    *
.*    A WORK AREA, THE NAME BEING RETURNED IN THE GLOBAL SETC         *
.*    VARIABLE &DYNSP. A DSECT IS CREATED TO MAP THIS AREA.           *
.*    THE GLOBAL VARIABLES &DTUO (TEXT UNIT OFFSET COUNTER) AND       *
.*    &DTUPO (TEXT UNIT POINTER OFFSET ACCUMULATOR) ARE SET TO ZERO.  *
.*    THESE ACCUMULATORS ARE UPDATED AS EACH TEXT UNIT PROCESSOR      *
.*    AQUIRES STORAGE. AFTER ALL TEXT UNITS HAVE BEEN BUILT, THE      *
.*    AMOUNT OF SPACE USED IS CALCULATED, AND THE DYNSPACE MACRO IS   *
.*    THEN CALLED AGAIN TO LOG THE AMOUNT NEEDED. DYNSPACE SETS A     *
.*    GLOBAL VARIABLE &DYNSPQ TO THE HIGHEST AMOUNT ANY ALLOC OR      *
.*    FREE MACRO REQUESTED, AND WHEN CALLED WITH THE EXPAND OPTION,   *
.*    (NO OPERANDS OR NAME FIELD SUPPLIED), EXPANDS INTO A DS FOR     *
.*    THAT QUANTITY. (SEE DYNSPACE)                                   *
.*    MF=G SPECIFIES THAT THE ALLOC MACRO ENTER THE BEGIN MACRO       *
.*    WORKAREA TO ACQUIRE THE STORAGE NECESSARY. IT DOES THIS VIA     *
.*    THE RCPDS MACRO. (SEE RCPDS). HOWEVER, IF THE ALLOC MACRO IS    *
.*    CALLED SEVERAL TIMES WITH THIS OPTION, A LOT OF STORAGE WILL BE *
.*    USED UP, AS THE STORAGE WILL NOT BE SHARED. THUS, THIS FORM     *
.*    SHOULD ONLY BE USED IF THE ALLOC/FREE MACRO IS ONLY TO BE USED  *
.*    ONCE OR TWICE DURING AN ASSEMBLY.                               *
.*    MF=E CAUSES THE MACRO TO USE A USER SPECIFIED WORK AREA. THE    *
.*    SECOND PARAMETER GIVES THE NAME OF THE WORKAREA, AND AN         *
.*    OPTIONAL THIRD PARAMETER IS THE NAME OF A SYMBOL TO BE EQUATED  *
.*    TO THE LENGTH OF THE REQUIRED WORK AREA.                        *
.*                                                                    *
.*    DYNAMIC ALLOCATION FUNCTIONS ARE SIMILAR TO THOSE AVAILABLE    *
.*    WITH JCL, USING THE SAME KEYWORDS. HOWEVER, CERTAIN FORMATS    *
.*    ARE SLIGHTLY DIFFERENT. FOR INSTANCE, CERTAIN KEYWORDS CAN     *
.*    HAVE VARYING PARAMETERS, EG DATASET NAME, DDNAME, VOLSER ETC.  *
.*    PROVISION IS MADE FOR BOTH VARIABLE SPECIFICATION.             *
.*    IN THE ABSOLUTE FORM, THE PARAMETER IS ENTERED IN QUOTES,      *
.*    E.G.   ALLOC DSN='SYS1.LINKLIB',DISP=SHR                       *
.*    HOWEVER, THIS NAME REMAINS FIXED FOR THE ASSEMBLY.             *
.*    IN THE VARIABLE FORMAT, THE ADDRESS OF A LOCATOR IS SPECIFIED, *
.*    WHERE THE LOCATOR CONSISTS OF A SIX BYTE FIELD, THE FIRST 4    *
.*    BYTES OF WHICH POINT TO THE PARAMETER, WHILE THE NEXT TWO      *
.*    CONTAIN THE LENGTH.                                            *
.*    EG          ALLOC DSN=LOCATOR                                  *
.*       LOCATOR  DC    A(DSN),Y(12)                                 *
.*       DSN      DC    C'SYS1.LINKLIB'                              *
.*                                                                   *
.*       NUMERIC QUANTITIES E.G. COPIES= FOR SYSOUT, SHOULD EITHER   *
.*       SPECIFY A NUMERIC VALUE, COPIES=3,                          *
.*       A VALUE IN A REGISTER, COPIES=(R3),                         *
.*       OR THE NAME OFF A FULLWORD CONTAINING THE VALUE,            *
.*          COPIES=NUMCOPYS, WHERE NUMCOPYS IS THE NAME OF A         *
.*       FULLWORD FIELD.                                             *
.*                                                                   *
.*       OTHER KEYWORDS SUCH AS DISP= CAN ONLY HAVE THE ABSOLUTE     *
.*       FORM, AND VALUES SHOULD NOT BE ENTERED WITHIN QUOTES.       *
.*       ADDITIONAL FACILITIES NOT AVAILABLE WITH JCL ARE THE        *
.*       RETURN BY THE SYSTEM OF INFORMATION ON THE DATASET, EG      *
.*       DSORG. THIS IS DONE BY SPECIFYING DSORGRT=SYMBOL, WHERE     *
.*       SYMBOL IS A SYMBOL WHICH WILL BE EQUATED TO A TWO BYTE      *
.*       FIELD CONTAINING THE DSORG TYPE (SEE JOB MANAGEMENT,        *
.*       SUPERVISOR AND TSO).                                        *
.*       THE SYSTEM CAN ALSO GENERATE AND RETURN A DDNAME. THIS IS   *
.*       CARRIED OUT BY ENTERING DDNTO=(ADDR1,ADDR2,,...)            *
.*       WHERE ADDR1,ADDR2 ETC ARE THE NAMES OF 8 BYTE FIELDS WHICH  *
.*       ARE TO RECEIVE THE DDNAME.                                  *
.*       FOR FURTHER INFORMATION ON DYNAMIC ALLOCATION, SEE          *
.*       JOB MANAGEMENT, SUPERVISOR AND TSO.                         *
.*                                                                   *
.**********************************************************************
         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO
         GBLA  &DTUO              OFFSET TO TEXT UNITS
         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS
         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS
         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL
         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC
         LCLA  &DDNRTO,&DSNRTO         FOR EQUATES FOR RETURNED FLDS
         LCLA  &VOLRTO,&DSRGRTO        FOR EQUATES FOR RETURNED FIELDS
         LCLA  &I                 COUNTER
         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E
         LCLC  &C,&T,&PAR
.*
.*   THE ALLOC MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION,
&RCPS99(1)     SETB           1
&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER
&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX
&NAME    DS    0H
         AIF   ('&PREFIX' EQ '').TMF
         AIF   (K'&PREFIX LT 4).POK
         MNOTE 4,'---> PREFIX TOO LONG, 1ST 4 CHARS USED'
&DYNP    SETC  '&PREFIX'(1,4)
         AGO   .TMF
.POK     ANOP
&DYNP    SETC  '&PREFIX'
.TMF     AIF   ('&MF(1)' EQ 'G').GEN
         AIF   ('&MF' NE 'AUTO').TMFE
NAME     DYNSPACE             GET NAME FOR SPACE
         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST
         USING &DYNP.DS,R1             USE GENERATED DSECT
&T       SETC  'A'
&PAR     SETC  '&DYNSP+4'
&DSECT   SETB  1
         AGO   .START
.TMFE    AIF   ('&MF(2)' NE '').E2OK
         MNOTE 4,'---> PLIST ADDRESS OMITTED, MF=G USED'
         AGO   .GEN
.E2OK    ANOP
&DSECT   SETB  1
         AIF   ('&MF(2)' EQ '(').RMFE
         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS
         USING &DYNP.DS,R1             USE GENERATED DSECT
         AGO   .START
.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START
         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS
         AGO   .START
.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP
.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB
         USING S99RB,R15
         ST    R15,0(R1)               AND STORE IN RB POINTER
         XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST
         MVI   S99RBLN,20              MOVE IN LIST LENGTH
         MVI   S99VERB,S99VRBAL        MOVE IN VERB CODE
         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS
         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB
         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS
         USING S99TUNIT,R15
&DTUO    SETA  0
&DTUPO   SETA  0
         AIF   ('&SSREQ' EQ 'YES').SSREQ
.TDSN    AIF   ('&DSN&DA' NE '').DSN
         AIF   ('&DSNPDE' NE '').DSNPDE
         AIF   ('&DSNRET' NE '').DSNRT
         AIF   ('&TERM' NE '').TERM             CBOC......
         AIF   ('&SYSOUT' NE '').SYSOUT
         AIF   ('&DUMMY' NE '').DUMMY
         AIF   ('&QNAME' NE '').QNAME
.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN
         AIF   ('&DDNRET&DDNTO' NE '').DDNRT
.TUNIT   AIF   ('&UNIT&VOL' NE '').UNIT
.TVOLRET AIF   ('&VOLRET' NE '').VOLRET
.TDSRGO  AIF   ('&DSORGRT' NE '').DSORGRT
.TLABEL  AIF   ('&LABEL' NE '').LABEL
.TPSWD   AIF   ('&PASWORD' NE '').PASWORD
.TFORUSE AIF   ('&FORUSER' NE '').FORUSER
.TTU     AIF   ('&TU' NE '').TU
.TDISP   AIF   ('&DISP' NE '').DISP
.TSPACE  AIF   ('&SPACE' NE '').SPACE
.TLRECL  AIF   ('&LRECL' NE '').DCB
         AIF   ('&DEN' NE '').DCB
         AIF   ('&RECFM' NE '').DCB
         AIF   ('&BLKSIZE' NE '').DCB
         AIF   ('&DSORG' NE '').DCB
         AIF   ('&KEYLEN' NE '').DCB
.TDCBDSN AIF   ('&DCBDSN' NE '').DCBDSN
.TDCBDDN AIF   ('&DCBDDN' NE '').DCBDDN
.TFREE   AIF   ('&FREE' EQ 'CLOSE').FREE                         TE7343
.TPERM   AIF   ('&PERM' EQ 'PERM' OR '&PERM' EQ 'PERMANENT').PERM
         AIF   ('&DUMMY' EQ 'PERM' OR '&DUMMY' EQ 'PERMANENT').PERM
.TSPECI  AIF   ('&SPECIAL' NE '').SPECIAL
         AGO   .SVC99
.SSREQ   RCPSSREQ
         AGO   .TDSN
.DSN     RCPDSN &DSN&DA,&MEMBER
         AGO   .TDDN
.DSNPDE  RCPDSNPD &DSNPDE
         AGO   .TDDN
.DSNRT   RCPDSNRT &DSNRET
&DSNRTO  SETA  &DTUO-46
         AGO   .TDDN
.SYSOUT  RCPSYSOU &SYSOUT,COPIES=&COPIES,FREE=&FREE,DEST=&DEST,        X
               FORMS=&FORMS
         AGO   .TDDN
.TERM    RCPTERM &TERM           CBOC....
         AGO   .TDDN             CBOC..
.DUMMY   RCPDUMMY &DUMMY
         AGO   .TDDN
.QNAME   RCPQNAME &QNAME
         AGO   .TDDN
.DDN     RCPDDN &DDN&F&FILE
         AGO   .TUNIT
.DDNRT   RCPDDNRT &DDNRET
&DDNRTO  SETA  &DTUO-10
         AGO   .TUNIT
.UNIT    RCPUNIT &UNIT,&VOL
         AGO   .TVOLRET
.VOLRET  RCPVOLRT &VOLRET
&VOLRTO  SETA  &DTUO-8
         AGO   .TDSRGO
.DSORGRT RCPDSRGR
&DSRGRTO SETA  &DTUO-2
         AGO   .TLABEL
.LABEL   RCPLABEL &LABEL
         AGO   .TPSWD
.PASWORD RCPPSWD &PASWORD
         AGO   .TFORUSE
.FORUSER RCPFORUS &FORUSER
         AGO   .TTU
.TU      RCPTU &TU
         AGO   .TDISP
.DISP    RCPDISP &DISP
         AGO   .TSPACE
.SPACE   RCPSPACE &SPACE
         AGO   .TLRECL
.DCB     RCPDDCB LRECL=&LRECL,DEN=&DEN,RECFM=&RECFM,BLKSIZE=&BLKSIZE,  X
               DSORG=&DSORG,KEYLEN=&KEYLEN
         AGO .TDCBDSN
.DCBDSN  RCPDCBDS &DCBDSN
         AGO .TDCBDDN
.DCBDDN  RCPDCBDD &DCBDDN
         AGO .TFREE                                              TE7343
.FREE    RCPFREE  &FREE                                          TE7343
         AGO   .TPERM
.PERM    RCPPERM
         AGO   .TSPECI
.SPECIAL RCPSPEC &SPECIAL
.SVC99   ANOP
&DTUPO   SETA  &DTUPO-4
         SPACE
         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS
         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR
         RCPSR2 UNSAVE
&DTUPO   SETA  &DTUPO+4
         AIF   (NOT &DSECT).DYNA
         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY
         LA    R14,4(R1)               POINT TO REQUEST BLOCK
.DYNA    DYNALLOC
         AIF   (NOT &DSECT).LTR
         USING &DYNP.RB,R14            SET UP ADDRESSABILITY
**       NOTE  R14 HAS RB ADDRESS, R15 HAS SVC 99 RETURN CODE        **
.LTR     AIF   ('&ERROR' EQ '').TDDTO
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   &ERROR                  BRANCH IF NON ZERO
.TDDTO   AIF   ('&DDNTO' EQ '').RESERVE
&I       SETA  0
.DDNTOL  ANOP
&I       SETA  &I+1
         AIF   ('&DDNTO(&I)' EQ '').RESERVE
         AIF   ('&DDNTO(&I)'(1,1) EQ '(').DDNTOR
         MVC   &DDNTO(&I).(8),&DYNP.TU+&DDNRTO+2
         AGO   .DDNTOL
.DDNTOR  ANOP
&C       SETC  '&DDNTO(&I)'(2,K'&DDNTO(&I)-2)
         MVC   0(8,&C),&DYNP.TU+&DDNRTO+2
         AGO   .DDNTOL
.RESERVE AIF   (&DSECT).RESDS
         SPACE 1
***********************************************************************
**       RESERVE SPACE FOR DYNALLOC PARAMETER LIST                   **
***********************************************************************
         RCPDS
.SSP     ANOP
&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER
&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK
&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS
         AIF   (&DTUO EQ 0).DTU21
&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS
         AIF   (&DSNRTO EQ 0).TDDNRTO
&DSNRET  EQU   &DYNP.TU+&DSNRTO        OFFSET TO RETURNED DSN
.TDDNRTO AIF   ('&DDNRET' EQ '').DTU11
&DDNRET  EQU   &DYNP.TU+&DDNRTO        OFFSET TO RETURNED DDNAME
.DTU11   AIF   (&VOLRTO EQ 0).DTU12
&VOLRET  EQU   &DYNP.TU+&VOLRTO        OFFSET TO RETURNED VOLSER
.DTU12   AIF   (&DSRGRTO EQ 0).DTU10
&DSORGRT EQU   &DYNP.TU+&DSRGRTO       OFFSET TO RETURNED DSORG
         AGO   .DTU10
.DTU21   ANOP
&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS
.DTU10   ANOP
&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED
         AIF   (&DSECT).DSP
         RCPDS
         SPACE 2
         AGO   .EXIT
.RESDS   ANOP
         AIF   ('&DYNSP' EQ '').SP3
         DYNSPACE ADD
.SP3     SPACE 1
&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA
         AGO   .SSP
.DSP     AIF   ('&MF(3)' EQ '').END1
&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA
.END1    ANOP
&SYSECT  CSECT
         SPACE 2
.EXIT    MEND
         MACRO
&NAME    DYNSPACE &TYPE
.*
.*    THIS IS AN INNER MACRO TO ALLOC/FREE.
.*    IT IS CALLED TO   A) NAME AN AREA FOR THE PARMLIST
.*                      B) LOG THE VARIOUS AMOUNTS NEEDED BY
.*                         EACH, REMEMBERING THE LARGEST.
.*                      C) GENERATING A DS FOR THE LARGEST AMOUNT.
.*    THE FIRST TWO FUNCTIONS ARE INVOKED BY ALLOC/FREE MACROS ONLY,
.*    AND THE THIRD IS USED BY THE PROGRAMMER, EITHER EXPLICITLY,
.*    OR BY BEGINWKA, IF THE LATTER IS USED.
.*
.*     TO INVOKE THE NAMING FUNCTION, ALLOC/FREE GENERATE
.*     NAME DYNSPACE
.*     NOTE. THE NAMING OPERATION ONLY GENERATES A NAME ON THE
.*     FIRST CALL IN THE ASSEMBLY. THE NAME REMAINS THE SAME UNTIL
.*     DYNSPACE IS CALLED TO EXPAND INTO A DS.
.*
.*     THE SECOND FUNCTION IS INVOKED BY THE MACRO CALL
.*          DYNSPACE ADD
.*     (NO NAME FIELD AND ONE OPERAND)
.*     IT USES THE GLOBAL VARIABLES &DTUO AND &DTUPO TO CALCULATE
.*     THE SPACE FOR THIS REQUEST, AND UPDATES &DYNSPQ ONLY IF THE
.*     CURRENT REQUEST IS FOR A GREATER AMOUNT
.*
.*     THE THIRD FUNCTION IS INVOKED BY CALLING DYNSPACE WITH NO
.*     NAME OR OPERAND FIELD.
.*     THIS EXPANDS INTO A DEFINE STORAGE, CLEARS THE DYNSPACE NAME
.*     GLOBAL SETC, AND THE &DYNSPQ GLOBAL SETA.
.*     THUS, THE MACRO IS SERIALLY REUSABLE IN ALL FUNCTIONS.
.*
         GBLA  &DYNSPQ,&DTUO,&DTUPO,&RCPDYN
         GBLC  &DYNP,&DYNSP
         LCLA  &I
         AIF   ('&NAME' NE '').NAME
         AIF   ('&TYPE' EQ '').ALLOC
.*       THE ACCUMULATE FUNCTION IS REQUIRED
&I       SETA  24+&DTUO+&DTUPO         GET AMOUNT FOR THIS REQUEST
         AIF   (&I LE &DYNSPQ).EXIT    IF CURRENT < MAX, EXIT
&DYNSPQ  SETA  &I                      ELSE UPDATE CURRENT MAXIMUM
         MEXIT
.NAME    AIF   ('&DYNSP' NE '').EXIT   IF NAME ALREADY EXISTS, EXIT
&DYNSP   SETC  'DYNSP&RCPDYN'          ELSE GENERATE A NAME
.EXIT    MEXIT
.ALLOC   AIF   ('&DYNSP' EQ '').EXIT
*
***      RESERVE SPACE FOR ALLOC/FREE MACRO WORK AREA
*
&DYNSP   DS    0F,CL&DYNSPQ            RESERVE SPACE
&DYNSP   SETC  ''                      SET MAX QUANTITY TO 0
&DYNSPQ  SETA 0
         MEND
         MACRO
&NAME    EDIT  &PR,&NUM,&ED
         LCLA  &A1,&A2,&A3,&A4
         LCLB  &B1,&B2
         LCLC  &C1,&C2,&C3
         ACTR  200
         AIF   (N'&SYSLIST EQ 2 AND K'&ED EQ 0).ANOP1
         AIF   (N'&SYSLIST NE 3).MNOTE1
         AIF   ('&ED'(1,1) EQ '-' OR '&ED'(1,1) EQ '$').EDMK
.ANOP1   ANOP
&A1      SETA  &A1+1
         AIF   (K'&ED LT &A1).CONT
&A2      SETA  &A2+1
&A4      SETA  &A4+1
         AIF   ('&ED'(&A1,1) NE 'Z' AND '&ED'(&A1,1) NE '&C2').NINE
.ANOP2   ANOP
&C1      SETC  '&C1.20'
         AGO   .ANOP1
.NINE    AIF   ('&ED'(&A1,1) NE '9').PER
         AIF   (&B1).ANOP2
&B1      SETB  1
         AIF   (&A1 EQ 1).SIGNIF
         AIF   (&A1 EQ 2 AND &B2).SIGNIF
&C3      SETC  '&C1'(&A4*2-3,2)
         AIF   ('&C3' NE '20').NINE2
&C1      SETC  '&C1'(1,&A4*2-4).'2120'
         AGO   .ANOP1
.NINE2   ANOP
&C1      SETC  '&C1'(1,&A4*2-6).'21&C3.20'
         AGO   .ANOP1
.SIGNIF  ANOP
&C1      SETC  '21'
         AGO   .ANOP1
.PER     AIF   ('&ED'(&A1,1) NE '.').COMMA
&C1      SETC  '&C1.4B'
&A2      SETA  &A2-1
         AGO   .ANOP1
.COMMA   AIF   ('&ED'(&A1,1) NE 'V').SLASH
&C1      SETC  '&C1.6B'
&A2      SETA  &A2-1
         AGO   .ANOP1
.SLASH   AIF   ('&ED'(&A1,1) NE '/').DBCR
&C1      SETC  '&C1.61'
&A2      SETA  &A2-1
         AGO   .ANOP1
.DBCR    AIF   (&A1+1 NE K'&ED).MNOTE2
         AIF   ('&ED'(&A1,2) NE 'CR').DB
&C1      SETC  '&C1.C3D9'
&A2      SETA  &A2-1
         AGO   .CONT
.DB      AIF   ('&ED'(&A1,2) NE 'DB').MNOTE2
&C1      SETC  '&C1.C4C2'
&A2      SETA  &A2-1
.CONT    ANOP
&C3      SETC  '&PR'
         AIF   (L'&NUM*2-1 NE &A2).EDSIZE
.ENDCHEC ANOP
&A2      SETA  0
         AIF   (K'&C1/2+1 NE L'&PR).AREASIZ
.LAST    AIF   (&B2).EDMKEND
&NAME    MVC   &C3,=X'40&C1'
         ED    &C3,&NUM
         MEXIT
.EDSIZE  AIF   (L'&NUM*2-1 LT &A2).LONG
.SHORT   ANOP
&C1      SETC  '20&C1'
&A3      SETA  &A3+1
         AIF   (L'&NUM*2-1 GT &A2+&A3).SHORT
         AGO   .ENDCHEC
.LONG    ANOP
&C1      SETC  '&C1'(3,K'&C1-2)
&A3      SETA  &A3+1
         AIF   (L'&NUM*2-1 LT &A2-&A3).LONG
         AGO   .ENDCHEC
.AREASIZ AIF   (K'&C1/2+1 LT L'&PR).LESS
&A2      SETA  K'&C1/2+1-L'&PR
&A3      SETA  K'&C1/2+1
&C3      SETC  '&C3-&A2.(&A3)'
&B1      SETB  1
         AGO   .LAST
.LESS    ANOP
&B1      SETB  0
&A3      SETA  K'&C1/2+1
         AIF   (K'&C1/2+5 GE L'&PR).PLUSET
&C3      SETC  '&C3.(&A3)'
         AGO   .LAST
.PLUSET  ANOP
&A2      SETA  L'&PR-K'&C1/2-1
&C3      SETC  '&C3+&A2.(&A3)'
         AGO   .LAST
.EDMK    AIF   ('&ED'(1,1) EQ '-').NEG
&C2      SETC  '$'
         AGO   .C2SET
.NEG     ANOP
&C2      SETC  '-'
.C2SET   ANOP
&A1      SETA  1
&B2      SETB  1
         AGO   .ANOP1
.EDMKEND ANOP
&A1      SETA  -1
.EDMKNOP ANOP
&A1      SETA  &A1+2
         AIF   (K'&C1 LT &A1).SETA
         AIF   ('&C1'(&A1,2) EQ '21').SETAA
         AIF   ('&C1'(&A1,2) NE '4B').EDMKNOP
&A1      SETA  (&A1+1)/2
         AGO   .LA
.SETA    ANOP
&A1      SETA  (&A1+1)/2-1
         AGO   .LA
.SETAA   ANOP
&A1      SETA  (&A1+1)/2+1
.LA      ANOP
         AIF   (&B1).MINUS
&A1      SETA  &A1+&A2
         AGO   .MVC
.MINUS   ANOP
&A1      SETA  &A1-&A2
.MVC     ANOP
&NAME    MVC   &C3,=X'40&C1'
         LA    1,&PR+&A1
         EDMK  &C3,&NUM
         AIF   ('&C2' EQ '$').DOLLAR
         BNM   EDIT&SYSNDX
         BCTR  1,0
         MVI   0(1),C'-'
&C3      SETC  '&SYSNDX'
EDIT&C3  EQU   *
         MEXIT
.DOLLAR  BCTR  1,0
         MVI   0(1),C'$'
         MEXIT
.MNOTE1  MNOTE 8,'---> THREE OPERANDS MUST BE SPECIFIED'
         MEXIT
.MNOTE2  MNOTE 8,'---> INVALID EDIT PATTERN'
         MEND
         MACRO
&NFS     HEX   &TO,&FROM,&L,&LEN=,&HEXTAB=,&BYTE=C' ',&DIGITS=
         GBLC  &HEXTAB#
         LCLA  &LT                      UNPK "TO" LENGTH
         LCLA  &LF                      UNPK "FROM" LENGTH
         LCLA  &LTR                     TR "TO" LENGTH
         LCLA  &LL                      &LEN ONE WAY OR ANOTHER
         LCLC  &F1,&F2,&T1,&T2,&LX
&F1      SETC  '&FROM(1)'               FOR SHORTER STRING LATER
&F2      SETC  '&FROM(2)'               FOR SHORTER STRING LATER
&T1      SETC  '&TO(1)'                 FOR SHORTER STRING LATER
&T2      SETC  '&TO(2)'                 FOR SHORTER STRING LATER
&LX      SETC  '&L&LEN'                 GET LENGTH USING EITHER METHOD
         AIF   ('&LX' EQ '').DEFLEN     LENGTH WILL DEFAULT TO 4
&LL      SETA  &LX                      GET IT
         AGO   .OKLEN
.DEFLEN  ANOP
&LL      SETA  4                        SET THE DEFAULT LENGTH
.OKLEN   AIF   ('&HEXTAB' EQ '').OKHEX1
&HEXTAB# SETC  '&HEXTAB'
.OKHEX1  AIF   ('&HEXTAB#' NE '').OKHEX2
&HEXTAB# SETC  'HEXTAB'
.OKHEX2  ANOP
&LT      SETA  &LL*2
         AIF   ('&DIGITS' EQ '').OKDIGIT
&LT      SETA  &DIGITS
.OKDIGIT AIF   (N'&TO NE 2).TO1
         AIF   (N'&FROM NE 2).T2F1
&NFS     UNPK  &T1.(&LT+1,&T2),&F1.(&LL+1,&F2)
         TR    &T1.(&LT,&T2),&HEXTAB#
         MVI   &T1+&LT.(&T2),&BYTE
         AGO   .DONE
.T2F1    AIF   (N'&FROM NE 1).ERRF
&NFS     UNPK  &T1.(&LT+1,&T2),&FROM.(&LL+1)
         TR    &T1.(&LT,&T2),&HEXTAB#
         MVI   &T1+&LT.(&T2),&BYTE
         AGO   .DONE
.TO1     AIF   (N'&TO NE 1).ERRT
         AIF   (N'&FROM NE 2).T1F1
&NFS     UNPK  &TO.(&LT+1),&F1.(&LL+1,&F2)
         TR    &TO.(&LT),&HEXTAB#
         MVI   &TO+&LT,&BYTE
         AGO   .DONE
.T1F1    AIF   (N'&FROM NE 1).ERRF
&NFS     UNPK  &TO.(&LT+1),&FROM.(&LL+1)
         TR    &TO.(&LT),&HEXTAB#
         MVI   &TO+&LT,&BYTE
         AGO   .DONE
.ERRF    MNOTE 8,'---> ERROR IN "FROM" PARAMETER, MACRO TERMINATED'
         MEXIT
.ERRT    MNOTE 8,'---> ERROR IN "TO" PARAMETER, MACRO TERMINATED'
         MEXIT
.DONE    ANOP
         MEND
         MACRO
         MESG  &N,&F,&T
&L       SETA  K'&SYSLIST(3)-2
         AIF   (&SYSLIST(2) EQ 0).NOFILL
&L       SETA  &L+&SYSLIST(2)
MESG&N   DC    YL1(&L),YL1(&F),C&T,CL&F' '
         MEXIT
.NOFILL  ANOP
MESG&N   DC    YL1(&L),YL1(&F),C&T
         MEND
         MACRO
         RCPDDN &DDN
         GBLC  &DYNP
         SPACE 1
***********************************************************************
**   BUILD THE DDNAME TEXT UNIT                                      **
***********************************************************************
         AIF   ('&DDN'(K'&DDN,1) EQ '/').BTU
         AIF   ('&DDN'(1,1) EQ '''').Q
         RCPSR2
         AIF   ('&DDN'(1,1) EQ '(').R
         L     R14,&DDN                LOAD ADDRESS OF DDNAME
         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME
         AGO   .STH
.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME
         LH    R2,4&DDN                LOAD LENGTH OF DDNAME
.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE DDNAME
         MVI   S99TUKEY+1,DALDDNAM     MOVE IN DDNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 14
         MEXIT
.Q       RCPBTU DALDDNAM,1,&DDN
         MEXIT
.BTU     RCPTUBFR DALDDNAM,14,&DDN
         MEND
         MACRO
         RCPDINC &L1
         GBLA  &DTUO,&DTUPO
         GBLC  &DYNP
         AIF   ('&L1' EQ '').T2
         ST    R15,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS
         LA    R15,&L1.(R15)           BUMP TEXT UNIT PTR TO NEXT SLOT
&DTUPO   SETA  &DTUPO+4
&DTUO    SETA  &DTUO+&L1
         MEXIT
.T2      ST    R14,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS
&DTUPO   SETA  &DTUPO+4
         MEND
         MACRO
         RCPDISP &DISP
         LCLA  &I
         LCLB  &B(4)
         AIF   ('&DISP(1)' EQ '').TD2
         SPACE
***********************************************************************
**     DATA SET INITIAL STATUS                                       **
***********************************************************************
&B(1)    SETB  ('&DISP(1)' EQ 'SHR')
&B(2)    SETB  ('&DISP(1)' EQ 'NEW')
&B(3)    SETB  ('&DISP(1)' EQ 'MOD')
&B(4)    SETB  ('&DISP(1)' EQ 'OLD')
         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK1
         MNOTE 8,'---> &DISP(1) IS INVALID, DISP=SHR USED'
&B(1)    SETB  1
.OK1     ANOP
&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)
         MVC   S99TUKEY(8),=Y(DALSTATS,1,1,X'0&I.00')
         RCPDINC 8
.TD2     AIF   ('&DISP(2)' EQ '').TD3
         SPACE
***********************************************************************
**    DATA SET NORMAL DISPOSITION                                    **
***********************************************************************
&B(1)    SETB  ('&DISP(2)' EQ 'KEEP')
&B(2)    SETB  ('&DISP(2)' EQ 'DELETE')
&B(3)    SETB  ('&DISP(2)' EQ 'CATLG')
&B(4)    SETB  ('&DISP(2)' EQ 'UNCATLG')
         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK2
         MNOTE 8,'---> &DISP(2) IS INVALID, DISP=(,KEEP) USED'
&B(1)    SETB  1
.OK2     ANOP
&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)
         MVC   S99TUKEY(8),=Y(DALNDISP,1,1,X'0&I.00')
         RCPDINC 8
.TD3     AIF   ('&DISP(3)' EQ '').EXIT
         SPACE
***********************************************************************
**   DATASET CONDITIONAL DISPOSITION                                 **
***********************************************************************
&B(1)    SETB  ('&DISP(3)' EQ 'KEEP')
&B(2)    SETB  ('&DISP(3)' EQ 'DELETE')
&B(3)    SETB  ('&DISP(3)' EQ 'CATLG')
&B(4)    SETB  ('&DISP(3)' EQ 'UNCATLG')
         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK3
         MNOTE 8,'---> &DISP(3) IS INVALID, DISP=(,,KEEP) USED'
&B(1)    SETB  1
.OK3     ANOP
&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)
         MVI   S99TUKEY(8),=Y(DALCDISP,1,1,X'0&I.00')
         RCPDINC 8
.EXIT    MEND
         MACRO
         RCPDSN &DSN,&MEM
         LCLC  &MEMBER
         GBLC  &DYNP
         SPACE
***********************************************************************
**   BUILD THE DSNAME TEXT UNIT                                      **
***********************************************************************
         AIF   ('&DSN'(1,1) EQ '''').Q
         AIF   ('&DSN'(K'&DSN,1) EQ '/').BD
         AIF   ('&DSN'(1,1) EQ '(').REG
         AIF   ('&DSN'  EQ '*').TERM
         RCPSR2
         L     R14,&DSN                LOAD ADDRESS OF DSNAME
         LH    R2,&DSN+4               LOAD LENGTH OF DSNAME
.STH     STH   R2,S99TULNG             STORE DSNAME LENGTH
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE DSNAME
         MVI   S99TUKEY+1,DALDSNAM     MOVE IN DSNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 50
         AGO   .TMEMBER
.REG     L     R14,0&DSN               LOAD ADDRESS OF DSNAME
         RCPSR2
         LH    R2,4&DSN                LOAD LENGTH OF DSNAME
         AGO   .STH
.TERM    MVI   S99TUKEY+1,DALTERM
         RCPDINC 4
         MEXIT
.BD      RCPTUBFR DALDSNAM,50,&DSN
         AGO   .TMEMBER
.Q       RCPBTU DALDSNAM,1,&DSN
.TMEMBER AIF   ('&MEM' EQ '').EXIT
         SPACE
***********************************************************************
**   BUILD THE MEMBER NAME TEXT UNIT                                 **
***********************************************************************
&MEMBER  SETC  '&MEM'
         AIF   ('&MEM' NE '*').MOK
         AIF   ('&DSN'(1,1) NE '''').MAST
         MNOTE 8,'---> MEMBER=* INVALID WITH QUOTED DSNAME'
         MEXIT
.MAST    ANOP
&MEMBER  SETC  '8+&DSN'
.MOK     ANOP
         AIF   ('&MEMBER'(K'&MEMBER,1) EQ '/').BM
         RCPSR2
         AIF   ('&MEMBER'(1,1) EQ '(').RM
         LH    R2,4+&MEMBER            LOAD LENGTH OF MEMBER NAME
         LTR   R2,R2                   TEST FOR ZERO
         BZ    *+30                    IF NO MEMBER, SKIP
         L     R14,&MEMBER             LOAD ADDRESS OF MEMBER
         AGO   .STHM
.RM      LH    R2,4&MEMBER             LOAD LENGTH OF MEMBER
         LTR   R2,R2                   AND TEST FOR ZERO
         BZ    *+30                    IF NO MEMBER, SKIP
         L     R14,0&MEMBER            LOAD ADDRESS OF MEMBER
.STHM    STH   R2,S99TULNG             STORE LENGTH OF MEMBER
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE IN MEMBER NAME
         MVI   S99TUKEY+1,DALMEMBR     MOVE IN MEMBER KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 14
         MEXIT
.BM      RCPTUBFR DALMEMBR,14,&MEMBER
         MEXIT
.QM      RCPBTU DALMEMBR,1,&MEMBER
.EXIT    MEND
         MACRO
         RCPSR2 &A
         GBLB  &RCPSR2
         GBLC  &DYNP
         LCLC  &C
.*   TO SAVE REG 2 IN REG 0 FOR ALLOC INNER MACROS FIRST TIME ONLY
.*    IF OPERAND SUPPLIED AND SAVE DONE, RESTORES REG 2 AND
.*    GENERATES MOVE INSTRUCTION FOR EXECUTE
         AIF   ('&A' NE '').UNSAVE
         AIF   (&RCPSR2).EXIT
&RCPSR2  SETB  1
         LR    R0,R2                   SAVE CONTENTS OF REGISTER 2
         MEXIT
.UNSAVE  AIF   (NOT &RCPSR2).EXIT
         B     *+10                    SKIP NEXT INSTRUCTION
&C       SETC  '&DYNP.MVC'
&C       MVC   S99TUPAR(0),0(R14)      EXECUTED MOVE
         LR    R2,R0                   RESTORE CONTENTS OF REGISTER 2
&RCPSR2  SETB  0
.EXIT    MEND
         MACRO
&SYMBOL  XPRCLOSE  &WA
.* MACRO TO EXECUTE A CLOSE CALL TO 'XPRNTSUB'.
         CNOP  0,4
&SYMBOL  B     *+8                     BRANCH AROUND ADDRESS
         XPRINNRA  &WA,68
         MEND
         MACRO
&SYMBOL  XPRDCB  &DDNAME=SYSPRINT,&BLKSIZE=0
         LCLC  &TAG
.* MACRO TO GENERATE A WORK AREA FOR A PRINTER DATA SET, CONTAINING
.* A SAVE AREA, THE DCB, OPEN AND CLOSE PARAMETER LISTS, AND VARIOUS
.* CELLS AND SWITCHES.
&TAG     SETC  '&SYMBOL'
         AIF   (T'&SYMBOL NE 'O').TOK  TEST IF NAME SUPPLIED
&TAG     SETC  'XPRDCB01'              SUPPLY STANDARD PRDCB NAME
.TOK     ANOP
&TAG     DS    0D                      ALIGN ON DOUBLE-WORD BOUNDARY
         DS    18F                     STANDARD SAVE AREA
         SPACE
*        DCB   DDNAME=&DDNAME,DSORG=PS,RECFM=VBM,LRECL=137,           X
*              BLKSIZE=&BLKSIZE,MACRF=PL,BFTEK=S,BUFNO=2
IHB&SYSNDX DCB DDNAME=&DDNAME,DSORG=PS,RECFM=VBM,LRECL=137,            X
               BLKSIZE=&BLKSIZE,MACRF=PL,BFTEK=S,BUFNO=2
         SPACE
* PARAMETER LISTS FOR OPEN AND CLOSE:
         SPACE
         OPEN  (IHB&SYSNDX,(OUTPUT,LEAVE)),MF=L  PARM LIST FOR OPEN
         SPACE
         CLOSE (IHB&SYSNDX,LEAVE),MF=L PARM LIST FOR CLOSE
         SPACE
* WORK CELLS AND VARIABLE STORAGE:
         SPACE
         DS    1D                      WORK CELL
         DS    3F                      WORK CELLS
         DS    1A                      PAGE HEADING PARM LIST ADDRESS
         DS    1F                      MAXIMUM NUMBER OF OUTPUT LINES
         DS    1H                      PAGE WIDTH
         DS    1H                      PAGE LENGTH
         DS    1H                      PAGE NUMBER
         DS    1H                      PAGE BALANCE
         DS    1X                      SWITCHES
         DS    CL24                    DATE & TIME FOR PAGE HEADING
         SPACE 2
         MEND
         MACRO
&SYMBOL  XPREJECT  &WA,&COND=
.* MACRO TO EXECUTE AN EJECT CALL TO 'XPRNTSUB'.
         LCLC  &TAG,&SYM,&OPT,&R
         LCLA  &K
&SYM     SETC  '&SYMBOL'
&TAG     SETC  'IHB&SYSNDX'
         CNOP  2,4
.TST1    AIF   ('&COND' NE '').TST2
&OPT     SETC  'F000'
         AGO   .SIMPLE
.TST2    AIF   ('&COND' NE 'ATHOF').TSTC
&OPT     SETC  'F100'
.SIMPLE  ANOP
&SYM     BAS   1,&TAG.L                LOAD PARM ADDRESS
         DC    XL2'&OPT'               OPTION BITS
         AGO   .VCON
.TSTC    AIF   ('&COND(1)' NE 'EQ').NE
&OPT     SETC  '80'
.NE      AIF   ('&COND(1)' NE 'NE').LT
&OPT     SETC  '70'
.LT      AIF   ('&COND(1)' NE 'LT').GT
&OPT     SETC  '40'
.GT      AIF   ('&COND(1)' NE 'GT').LE
&OPT     SETC  '20'
.LE      AIF   ('&COND(1)' NE 'LE').GE
&OPT     SETC  'C0'
.GE      AIF   ('&COND(1)' NE 'GE').NOT
&OPT     SETC  'A0'
.NOT     AIF   ('&OPT' NE '').COK
         MNOTE 4,'---> COND OPERAND &COND(1) ILLEGAL'
.COK     AIF   ('&COND(2)' NE '').C2OK
         MNOTE 4,'---> TEST QUANTITY MISSING'
         AGO   .NOTREG
.C2OK    AIF   ('&COND(2)'(1,1) NE '(').NOTREG
&K       SETA  K'&COND(2)-2
&R       SETC  '&COND(2)'(2,&K)
&SYM     STC   &R,&TAG.A               STORE INTO PARM LIST
&SYM     SETC  ''
.NOTREG  ANOP
&SYM     BAS   1,&TAG.L                LOAD PARM ADDRESS
         DC    XL1'&OPT'               CONDITION MASK
         AIF   ('&COND(2)' EQ '').NOTREG2
         AIF   ('&COND(2)'(1,1) NE '(').NOTREG2
&TAG.A   DC    AL1(0)                  TEST QUANTITY
         AGO   .VCON
.NOTREG2 DC    AL1(&COND(2))           TEST QUANTITY
.VCON    ANOP
&TAG.L   XPRINNRA  &WA,92
         MEND
         MACRO
&SYMBOL  XPRHEAD  &WA,&LIST=
.* MACRO TO PRESENT A LIST OF PRINT LINE DESCRIPTORS FOR PAGE HEADINGS
.* TO 'XPRNTSUB'.
&SYMBOL  XPRLIST  &WA,LIST=&LIST,IHBPARM=80
         MEND
         MACRO
&TAG     XPRINNRA  &WA,&IHBPARM
.* INNER MACRO USED IN CALLS TO 'XPRNTSUB'
         DC    V(XPRNTSUB)             PRINTING SUBROUTINE ADDRESS
&TAG     L     15,*-4                  LOAD ENTRY POINT
         AIF   ('&WA' NE '').WOK
         LA    0,XPRDCB01              LOAD STANDARD WORK AREA ADDRESS
         AGO   .BAL
.WOK     AIF   ('&WA' EQ '(0)').BAL
         AIF   ('&WA'(1,1) EQ '(').REG
         LA    0,&WA                   LOAD WORK AREA ADDRESS
         AGO   .BAL
.REG     LR    0,&WA(1)                LOAD WORK AREA ADDRESS
.BAL     BAS   14,&IHBPARM.(15)        CALL PRINT SUBROUTINE
         MEND
         MACRO
&SYMBOL  XPRLDEF  &TEXT=,&LENGTH=132,&OFFSET=0,&SPA=1,&SPB=0
.* MACRO TO DEFINE PRINT LINE DESCRIPTOR BLOCKS ("PLD" BLOCKS) FOR
.* THE PRINTING SUBROUTINE "XPRNTSUB".
         LCLA  &N
         LCLC  &B3,&B6,&B7
         ACTR  25                      JUST IN CASE
&B3      SETC  '0'
&B6      SETC  '0'
&B7      SETC  '0'
.* PROCESS OPTIONS IN SPA OPERAND:
.TSTA1   AIF   ('&SPA(2)' EQ '').TSTB1
         AIF   ('&SPA(2)' NE 'NOEJ').TSTA2
&B3      SETC  '1'
         AGO   .TSTB1
.TSTA2   MNOTE 4,'---> OPERAND &SPA(2) AFTER KEYWORD SPA IS ILLEGAL'
.* PROCESS OPTIONS IN SPB OPERAND:
.TSTB1   ANOP
&N       SETA  2
.TSTB5   AIF   ('&SPB(&N)' NE 'NOEJ').TSTB2
&B7      SETC  '1'
         AGO   .TSTB4
.TSTB2   AIF   ('&SPB(&N)' NE 'ATHOF').TSTB3
&B6      SETC  '1'
         AGO   .TSTB4
.TSTB3   AIF   ('&SPB(&N)' EQ '').TSTB4
         MNOTE 4,'---> OPERAND &SPB(&N) AFTER KEYWORD SPB IS ILLEGAL'
.TSTB4   ANOP
&N       SETA  &N+1
         AIF   (&N LE 3).TSTB5
.IFTEXT  AIF   ('&TEXT' NE '').TOK
         MNOTE 4,'---> TEXT ADDRESS MISSING'
.TOK     ANOP
&SYMBOL  DS    0F                      ALIGN ON FULL-WORD BOUNDARY
         DC    BL1'000&B3.00&B6&B7'    OPTION BITS
         DC    AL3(&TEXT)              TEXT ADDRESS
         DC    AL1(&LENGTH)            TEXT LENGTH
         DC    AL1(&OFFSET)            MARGIN OFFSET
.TESTB   AIF   ('&SPB(1)' EQ 'EJECT').BSKIP
         AIF   ('&SPB(1)' EQ 'SKIP').BSKIP
         DC    AL1(&SPB(1))            PRE-SPACING
         AGO   .TESTA
.BSKIP   ANOP
         DC    AL1(255)                EJECT BEFORE PRINTING
.TESTA   AIF   ('&SPA(1)' EQ 'EJECT').ASKIP
         AIF   ('&SPA(1)' EQ 'SKIP').ASKIP
         DC    AL1(&SPA(1))                 POST-SPACING
         MEXIT
.ASKIP   ANOP
         DC    AL1(255)                EJECT AFTER PRINTING
         MEND
         MACRO
&SYMBOL  XPRLIST  &WA,&LIST=,&IHBPARM=32
.* MACRO TO DELIVER A LIST OF PRINT LINE DESCRIPTORS TO 'XPRNTSUB'.
         LCLA  &N,&K,&D
         LCLC  &TAG,&SYM,&R
         ACTR  100
&SYM     SETC  '&SYMBOL'
&TAG     SETC  'IHB&SYSNDX'
         AIF   ('&LIST' NE '').LOK
         MNOTE 8,'---> LIST OPERAND MUST BE SUPPLIED'
         MEXIT
.LOK     CNOP  0,4
         AIF   ('&LIST' NE '(1)').STLOOP
&SYMBOL  B     &TAG.L                  BRANCH AROUND ADDRESS
         AGO   .VCON
.STLOOP  ANOP
&N       SETA  &N+1
         AIF   (&N GT N'&LIST).STDONE
         AIF   ('&LIST(&N)'(1,1) NE '(').STLOOP
&K       SETA  K'&LIST(&N)-2
&R       SETC  '&LIST(&N)'(2,&K)
&D       SETA  4*(&N-1)
&SYM     ST    &R,&TAG.A+&D            STORE INTO PARM LIST
&SYM     SETC  ''
         AIF   (&N NE N'&LIST).STLOOP
         OI    &TAG.A+&D,X'80'         SET END-OF-LIST BIT
.STDONE  ANOP
&SYM     BAS   1,&TAG.L                LOAD PARM LIST ADDRESS
&SYM     SETC  '&TAG.A'
&N       SETA  0
.LOOP    ANOP
&N       SETA  &N+1
         AIF   (&N GT N'&LIST).VCON
         AIF   ('&LIST(&N)'(1,1) NE '(').NOTREG
&SYM     DC    A(0)
&SYM     SETC  ''
         AGO   .LOOP
.NOTREG  AIF   (&N EQ N'&LIST).LAST
&SYM     DC    A(&LIST(&N))
&SYM     SETC  ''
         AGO   .LOOP
.LAST    ANOP
&SYM     DC    X'80'                   END-OF-LIST BIT
         DC    AL3(&LIST(&N))
.VCON    ANOP
&TAG.L   XPRINNRA  &WA,&IHBPARM
         MEND
         MACRO
&SYMBOL  XPRMOD  &WA,&MAXLINE=0,&PAGENO=0,&PAGEWID=0,&PAGELEN=0,       X
               &TIME=0,&DATE=0
.* MACRO TO EXECUTE A MODIFY CALL TO 'XPRINTSUB'.
&SYMBOL  XPROPEN  &WA,MAXLINE=&MAXLINE,PAGENO=&PAGENO,PAGEWID=&PAGEWID,X
               PAGELEN=&PAGELEN,TIME=&TIME,DATE=&DATE,IHBPARM=104
         MEND
         MACRO
&SYMBOL  XPRNTLIN  &WA,&TEXT=00,&LENGTH=132,&OFFSET=0,&SPB=0,&SPA=1
         LCLA  &N
         LCLC  &B3,&B6,&B7,&T,&R
         ACTR  25
&T       SETC  'IHB&SYSNDX'
&B3      SETC  '0'
&B6      SETC  '0'
&B7      SETC  '0'
.* PROCESS OPTIONS IN SPA OPERAND:
.TSTA1   AIF   ('&SPA(2)' EQ '').TSTB1
         AIF   ('&SPA(2)' NE 'NOEJ').TSTA2
&B3      SETC  '1'
         AGO   .TSTB1
.TSTA2   MNOTE 4,'---> OPERAND &SPA(2) AFTER KEYWORD SPA IS ILLEGAL'
.* PROCESS OPTIONS IN SPB OPERAND:
.TSTB1   ANOP
&N       SETA  2
.TSTB5   AIF   ('&SPB(&N)' NE 'NOEJ').TSTB2
&B7      SETC  '1'
         AGO   .TSTB4
.TSTB2   AIF   ('&SPB(&N)' NE 'ATHOF').TSTB3
&B6      SETC  '1'
         AGO   .TSTB4
.TSTB3   AIF   ('&SPB(&N)' EQ '').TSTB4
         MNOTE 4,'---> OPERAND &SPB(&N) AFTER KEYWORD SPB IS ILLEGAL'
.TSTB4   ANOP
&N       SETA  &N+1
         AIF   (&N LE 3).TSTB5
.* GENERATE STORE INSTRUCTIONS IF REGISTER NOTATION IS USED:
         CNOP  0,4
         AIF   ('&SYMBOL' EQ '').IFR1
&SYMBOL  DS    0H
.IFR1    AIF   ('&TEXT' NE '00').TXTOK
         MNOTE 4,'---> TEXT ADDRESS MUST BE SUPPLIED'
.TXTOK   AIF   ('&TEXT'(1,1) NE '(').IFR2
         ST    &TEXT(1),&T.A           STORE TEXT ADDRESS
         MVI   &T.A,B'000&B3.00&B6&B7' INSERT OPTION BITS
.IFR2    AIF   ('&LENGTH'(1,1) NE '(').IFR3
         STC   &LENGTH(1),&T.A+4       STORE TEXT LENGTH
.IFR3    AIF   ('&OFFSET'(1,1) NE '(').IFR4
         STC   &OFFSET(1),&T.A+5       STORE MARGIN OFFSET
.IFR4    AIF   ('&SPB(1)'(1,1) NE '(').IFR5
&N       SETA  K'&SPB(1)-2
&R       SETC  '&SPB(1)'(2,&N)
         STC   &R,&T.A+6               STORE PRE-SPACING
.IFR5    AIF   ('&SPA(1)'(1,1) NE '(').LOAD1
&N       SETA  K'&SPA(1)-2
&R       SETC  '&SPA(1)'(2,&N)
         STC   &R,&T.A+7               STORE POST-SPACING
.* LOAD REG 1 AND GENERATE PLD LIST ADDRESS:
.LOAD1   BAS   1,&T.L                  LOAD PARM ADDRESS
         DC    X'80'                   MARK END OF ADDRESS LIST
         DC    AL3(&T.A)               ADDRESS OF PLD
.* GENREATE PLD PARAMETERS TO DESCRIBE THE PRINT LINE:
.IFR11   AIF   ('&TEXT'(1,1) NE '(').NOTR11
&T.A     DC    A(0)                    TEXT ADDRESS & OPTION BITS
         AGO   .IFR12
.NOTR11  ANOP
&T.A     DC    B'000&B3.00&B6&B7'      OPTION BITS
         DC    AL3(&TEXT)              TEXT ADDRESS
.IFR12   AIF   ('&LENGTH'(1,1) NE '(').NOTR12
         DC    AL1(0)                  TEXT LENGTH
         AGO   .IFR13
.NOTR12  DC    AL1(&LENGTH)            TEXT LENGTH
.IFR13   AIF   ('&OFFSET'(1,1) NE '(').NOTR13
         DC    AL1(0)                  MARGIN OFFSET
         AGO   .IFR14
.NOTR13  DC    AL1(&OFFSET)            MARGIN OFFSET
.IFR14   AIF   ('&SPB(1)'(1,1) NE '(').NOTR14
         DC    AL1(0)                  PRE-SPACING
         AGO   .IFR15
.NOTR14  AIF   ('&SPB(1)' EQ 'EJECT').BSKIP
         AIF   ('&SPB(1)' EQ 'SKIP').BSKIP
         DC    AL1(&SPB(1))            PRE-SPACING
         AGO   .IFR15
.BSKIP   DC    AL1(255)                SKIP BEFOR PRINTING
.IFR15   AIF   ('&SPA(1)'(1,1) NE '(').NOTR15
         DC    AL1(0)                  POST-SPACING
         AGO   .VCON
.NOTR15  AIF   ('&SPA(1)' EQ 'EJECT').ASKIP
         AIF   ('&SPA(1)' EQ 'SKIP').ASKIP
         DC    AL1(&SPA(1))            POST-SPACING
         AGO   .VCON
.ASKIP   DC    AL1(255)                SKIP AFTER PRINTING
.VCON    ANOP
&T.L    XPRINNRA  &WA,32
         MEND
         MACRO
&SYMBOL  XPROPEN  &WA,&MAXLINE=0,&PAGENO=0,&PAGEWID=0,&PAGELEN=0,      X
               &TIME=0,&DATE=0,&DDNAME=SYSPRINT,&IHBPARM=56
.* MACRO TO EXECUTE AN 'OPEN' OR 'MODIFY' CALL TO 'XPRNTSUB'.
         LCLC  &TAG
&TAG     SETC  'IHB&SYSNDX'
         AIF   ('&SYMBOL' EQ '').T1
&SYMBOL  DS    0H
.T1      AIF   ('&MAXLINE'(1,1) NE '(').T2
         ST    &MAXLINE(1),&TAG.A      STORE IN PARM LIST
.T2      AIF   ('&PAGENO'(1,1) NE '(').T3
         STH   &PAGENO(1),&TAG.A+4     STORE IN PARM LIST
.T3      AIF   ('&PAGEWID'(1,1) NE '(').T4
         STC   &PAGEWID(1),&TAG.A+6    STORE IN PARM LIST
.T4      AIF   ('&PAGELEN'(1,1) NE '(').T5
         STC   &PAGELEN(1),&TAG.A+7    STORE IN PARM LIST
.T5      AIF   ('&TIME'(1,1) NE '(').T6
         ST    &TIME(1),&TAG.A+8       STORE IN PARM LIST
.T6      AIF   ('&DATE'(1,1) NE '(').T7
         ST    &DATE(1),&TAG.A+12      STORE IN PARM LIST
.T7      AIF   ('&DDNAME'(1,1) NE '(').CNOP
         MVC   &TAG.A+16(8),0(&DDNAME(1))  STORE IN PARM LIST
.CNOP    CNOP  0,4
         BAS   1,&TAG.L        LOAD PARM LIST ADDRESS
.P1      AIF   ('&MAXLINE'(1,1) EQ '(').PR1
&TAG.A   DC    A(&MAXLINE)             PRINT OUTPUT LIMIT
         AGO   .P2
.PR1     ANOP
&TAG.A   DC    A(0)                    PRINT OUTPUT LIMIT
.P2      AIF   ('&PAGENO'(1,1) EQ '(').PR2
         DC    AL2(&PAGENO)            PAGE NUMBER
         AGO   .P3
.PR2     DC    AL2(0)                  PAGE NUMBER
.P3      AIF   ('&PAGEWID'(1,1) EQ '(').PR3
         DC    AL1(&PAGEWID)           PAGE WIDTH
         AGO   .P4
.PR3     DC    AL1(0)                  PAGE WIDTH
.P4      AIF   ('&PAGELEN'(1,1) EQ '(').PR4
         DC    AL1(&PAGELEN)           PAGE LENGTH
         AGO   .P5
.PR4     DC    AL1(0)                  PAGE LENGTH
.P5      AIF   ('&TIME'(1,1) EQ '(').PR5
         DC    A(&TIME)                ADDRESS OF TIME
         AGO   .P6
.PR5     DC    A(0)                    ADDRESS OF TIME
.P6      AIF   ('&DATE'(1,1) EQ '(').PR6
         DC    A(&DATE)                ADDRESS OF DATE
         AGO   .P7
.PR6     DC    A(0)                    ADDRESS OF DATE
.P7      AIF   ('&IHBPARM' NE '56').VCON
         AIF   ('&DDNAME'(1,1) EQ '(').PR7
         DC    CL8'&DDNAME'            DDNAME FOR DATA SET
         AGO   .VCON
.PR7     DC    CL8' '                  DDNAME FOR DATA SET
.VCON    ANOP
&TAG.L   XPRINNRA  &WA,&IHBPARM
         MEND
         MACRO
&SYMBOL  XPRSPACE  &WA,&LINES=1,&COND=
.* MACRO TO EXECUTE A SPACE CALL TO 'XPRNTSUB'.
         LCLA  &N,&B6,&B7
         LCLC  &TAG,&SYM
&SYM     SETC  '&SYMBOL'
&TAG     SETC  'IHB&SYSNDX'
.LOOP    ANOP
&N       SETA  &N+1
         AIF   (&N GT N'&COND).LDONE
.TST1    AIF   ('&COND(&N)' NE 'NOEJ').TST2
&B6      SETA  1
         AGO   .LOOP
.TST2    AIF   ('&COND(&N)' NE 'ATHOF').TST3
&B7      SETA  1
         AGO   .LOOP
.TST3    MNOTE 4,'---> OPERAND &COND(&N) AFTER KEYWORD COND IS ILLEGAL'
         AGO   .LOOP
.LDONE   CNOP  2,4
         AIF   ('&LINES'(1,1) NE '(').NOTREG1
&SYM     STC   &LINES(1),&TAG.A+1      STORE INTO PARM LIST
&SYM     SETC  ''
.NOTREG1 ANOP
&SYM     BAS   1,&TAG.L                LOAD PARM LIST ADDRESS
&TAG.A   DC    B'000000&B6&B7'         OPTION BITS
         AIF   ('&LINES'(1,1) NE '(').NOTREG2
         DC    X'00'                   SPACING AMOUNT
         AGO   .VCON
.NOTREG2 DC    AL1(&LINES)             SPACING AMOUNT
.VCON    ANOP
&TAG.L   XPRINNRA  &WA,44
         MEND
