YCPP     TITLE 'C O M P A R E B -- YALE COMPARE PLUS PROGRAM.'     -EU-
***********************************************************************
*                                                                     *
* COMPAREB - A MODIFIED VERSION OF THE YALE COMPARE PROGRAM.          *
*                                                                     *
* MODIFICATIONS AT AFDSC/PENTAGON:                                    *
*  07MAY81 - BILL GODFREY, PLANNING RESEARCH CORP.                    *
*   .  CHECK FOR 'IGNORE' DD WITH DEVTYPE AND BYPASS OPEN IF NOT      *
*      FOUND, SO OPEN WILL NOT WTO 'DD STATEMENT MISSING'.            *
*   .  NAME CHANGED TO 'COMPAREB' (SAVING NAME 'COMPARE' FOR A TSO    *
*      COMMAND WHICH WILL INVOKE THIS PROGRAM).                       *
*   .  ACCEPT ALTERNATE DDNAMES FROM INVOKER.                         *
*      DDNAMES ARE IN SAME SLOTS AS IBM UTILITIES.                    *
*   .  USE R11 AS BASE REGISTER INSTEAD OF R13                        *
*   .  CONVERT PARM TO CAPS.                                          *
*   .  CHANGE SYSPRINT LRECL FROM 109 TO 121                          *
*   .  TEST ALL DCB'S FOR SUCCESSFUL OPEN                             *
*  09JUN81 - BILL GODFREY                                             *
*   .  PROGRAM CHANGED TO ALLOW RECORDS LONGER THAN 80 BYTES TO       *
*      BE COMPARED.  A GOOD WAY TO COMPARE LOAD MODULES IS TO         *
*      COMPARE HEX DUMPS OF THEM. NOW THIS PROGRAM CAN COMPARE        *
*      PRINT FILES (IF THEY ARE FIXED LENGTH RECORDS).                *
*   .  CHANGE ALL BAL-R10 INSTRUCTIONS TO USE BAL-R14 INSTEAD,        *
*      (AND SAVE R14) SO WE CAN USE R10 FOR ANOTHER PURPOSE.          *
*   .  PUT THE RECORD LENGTH IN R10.                                  *
*   .  CHANGE ALL INSTRUCTIONS THAT USE THE RECORD LENGTH (80)        *
*      OR 2 RECORD LENGTHS (160) TO USE THE VALUE IN REGISTER R10     *
*      INSTEAD, SO THE PROGRAM CAN COMPARE MORE THAN 80 BYTES.        *
*   .  CHANGE MLENGTH FIELD TO A HALFWORD AND USE IT TO HOLD          *
*      A ZERO OR AN EIGHT INSTEAD OF A 79 OR 71.                      *
*   .  FIX S0C9 IN DCB OPEN EXIT, DIVIDING BY LRECL ZERO WHEN         *
*      RECFM IS UNBLOCKED.                                            *
*   .  PROGRAM WILL NO LONGER USE DEFAULT IGNORE DATA (FOR ASSEMBLER  *
*      SOURCE) UNLESS PARM=ASM IS SPECIFIED.                          *
*   .  FIX PARM FIELD BUG INTRODUCED 07MAY81, PARM=FULL WAS NEVER     *
*      RECOGNIZED AFTER THAT CHANGE.                                  *
*   .  CHECK PARM FIELD FOR 'FULL' OR 'ASM' ANYWHERE IN FIRST 16      *
*      BYTES.                                                         *
*  16JUN81 - BILL GODFREY                                             *
*   .  FIX PARM DD BUG INTRODUCED 09JUN81.                            *
*      R1 WAS DESTROYED PRIOR TO PARMX. USE R4 INSTEAD OF R1.         *
*   .  CHANGE R10 TO 256 IF LRECL GREATER THAN 256.                   *
*  08NOV84 - BRUCE LELAND                                             *
*   .  CHANGED TO RETURN DATA LINES TO THE PDS PUTLINE ROUTINE        *
*   .  CHANGED TO GETMAIN AND FREEMAIN BETWEEN 20K AND 200K           *
*                                                                     *
*   NOTE: THIS PROGRAM WORKS CORRECTLY ONLY ON FIXED LENGTH RECORDS   *
*   FROM 80 TO 256 BYTES LONG. ONLY THE FIRST 80 BYTES OF A RECORD    *
*   ARE LISTED. NO WARNING MESSAGE IS ISSUED FOR RECORDS LONGER THAN  *
*   256 OR VARIABLE LENGTH.                                           *
*                                                                     *
*   THE ORIGINAL DOCUMENTATION FOLLOWS. SOME OF IT IS NOW INACCURATE. *
*                                                                     *
*$DOC$*****************************************************************
         EJECT
***********************************************************************
*
*   THIS COMPARE PROGRAM ORIGINATED AT YALE UNIVERSITY AND WAS OBTAINED
*     FROM THE CONNECTICUT BANK AND TRUST COMPANY MODS TAPE (FILE 226)
*
*   THIS COMPARE PROGRAM USES ONLY COLUMNS ONE THROUGH 72; THUS, ANY
*     TWO VERSIONS OF A PROGRAM MAY BE EASILY COMPARED EVEN IF ONE
*     (OR BOTH) OF THE FILES HAS BEEN RESEQUENCED.  IF NEITHER FILE
*     HAS BEEN RESEQUENCED, A PARM OF "FULL" MAY BE CODED TO REQUEST
*     THAT ALL EIGHTY COLUMNS BE USED IN THE COMPARISON.  A FACILITY
*     IS ALSO PROVIDED TO IGNORE TRIVIAL CARD IMAGES (SUCH AS " EJECT "
*     OR " SPACE 3 " IN AN ASSEMBLER SOURCE PROGRAM).
*
*   THIS PROGRAM USES ALL AVAILABLE CORE IN ITS REGION AFTER OPENING
*     ITS INPUT/OUTPUT FILES (EXCEPT FOR 4K WHICH IS RELEASED).  THE
*     OBTAINED CORE AREA IS USED AS A COMPARE BUFFER WHICH IS ONLY
*     DUMPED (WRITTEN TO SYSPRINT) WHEN IDENTICAL RECORDS (BASED ON
*     THE FIRST 72 BYTES) ARE FOUND IN THE OLD AND NEW DATA SETS.  IF
*     THE COMPARE BUFFER OVERFLOWS, THE PROGRAM TERMINATES.  THEREFORE,
*     IF IT IS SUSPECTED THAT THE TWO DATA SETS MAY BE VERY FAR OUT OF
*     SYNC, A LARGE REGION SHOULD BE USED.  THE NUMBER OF UNMATCHED
*     RECORDS THAT CAN BE BUFFERED AT ONE TIME CAN BE CALCULATED FROM
*     THE EXPRESSION:  (REGION SIZE - 8K - BUFFERS) / 160
*     AS A GENERAL RULE, 30K IS SUFFICIENT FOR ABOUT 100 UNMATCHED
*     RECORDS AT A TIME, AND 100K IS SUFFICIENT FOR ABOUT 500 UNMATCHED
*     RECORDS AT A TIME.
*
*   CARD IMAGES OF THE TRIVAL DATA IS INPUT FROM THE IGNORE DDNAME;
*     IF THE DDCARD IS MISSING, A TABLE OF TRIVIAL DATA FOR ASSEMBLER
*     SOURCE CODE WILL BE ASSUMED (THIS INCLUDES " EJECT ", " SPACE   "
*     " SPACE 1 ", " SPACE 2 ", " SPACE 3 " AND BLANK COMMENT CARDS).
*
*   THE PROGRAM FORMAT ON THE CBT MODS TAPE WAS DISASSEMBLED SOURCE; IT
*     WAS RECOMMENTED, RESYMBOLIZED, REDOCUMENTED AND SLIGHTLY MODIFIED
*     BY  A. BRUCE LELAND (ABL)  OCTOBER, 1978
*
*   CHANGE: IF OUTPUT IS DIRECTED TO A TSO TERMINAL, ONLY THE FIRST
*           78 CHARACTERS OF EACH LINE ARE WRITTEN.  THIS MAY NOT BE
*           DESIRABLE IF YOU HAVE HARD-COPY TERMINALS.
*
*   JCL:
*   //STEPNAME   EXEC  PGM=COMPAREB,REGION=100K
*   //SYSPRINT   DD    SYSOUT=A
*   //OLD        DD    DSN=OLD.SEQ.DSN ....
*   //NEW        DD    DSN=NEW.SEQ.DSN ....
*   //IGNORE     DD    *      (OR DUMMY  --  OR OMITTED)
*     TRIVIAL CARD IMAGES THAT ARE TO BE IGNORED IN THE COMPARISON
*   /*
*
***********************************************************************
         SPACE 1                                                   -EU-
* ORIGIN : EXTRACTED FROM CBT TAPE 87 FEB, FILE 296.               -EU-
* --------                                                         -EU-
         EJECT
COMPAREB START 0                                                   -EU-
         USING *,R11
         B     @PROLOG-*(,R15)
         DC    AL1(11),CL11'COMPAREB'
         DC    CL16' &SYSDATE &SYSTIME '
@PROLOG  STM   14,12,12(R13)
         LR    R11,R15             BASE REGISTER
         LR    R15,R13
         LA    R13,SAVE
         ST    R13,8(,R15)         PUT NEW ADDRESS IN OLD SAVE AREA
         ST    R15,4(,R13)         PUT OLD ADDRESS IN NEW SAVE AREA
         SPACE 1
         L     R2,0(,R1)           POINT TO PARM
         LH    R3,0(,R2)           GET LENGTH OF PARM
         LTR   R3,R3
         BZ    PARMX
         CH    R3,=H'16'           IS LENGTH EXCESSIVE
         BNH   *+L'*+4             NO
         LH    R3,=H'16'           YES, TRUNCATE IT
         BCTR  R3,0                LENGTH MINUS 1 FOR EX
         B     *+L'*+6             SKIP MVC
         MVC   PARM(0),2(R2)       EXECUTED
         EX    R3,*-6              COPY PARM
         OC    PARM(16),BLANKS     CAPS
         LA    R4,PARM
         LA    R0,13               LOOK AT BYTES 1-13
PARMFUL  CLC   0(4,R4),=C'FULL'    PARM=FULL (COMPARE SEQUENCE NUMBERS)
         BNE   NOTFULL             NO
         MVI   MLENGTH+1,0         YES, CHANGE 8 TO ZERO
         B     PARM2
NOTFULL  LA    R4,1(,R4)
         BCT   R0,PARMFUL
PARM2    LA    R4,PARM
         LA    R0,14               LOOK AT BYTES 1-14
PARMASM  CLC   0(3,R4),=C'ASM'     PARM=ASM (USE DEFAULT IGNORE DATA)
         BNE   NOTASM              NO
         LA    R2,ENDDFTIG         YES, POINT TO END OF DEFAULT DATA
         ST    R2,IGASMS+4         STORE ENDING ADDRESS
         B     PARMX
NOTASM   LA    R4,1(,R4)
         BCT   R0,PARMASM
         SPACE 1
PARMX    TM    0(R1),X'80'         ONLY 1 PARAMETER
         BO    NODD                YES, BYPASS DD ROUTINE
         L     R2,4(,R1)           POINT TO DDNAME LIST
         LH    R1,0(,R2)           GET LENGTH OF DDNAME LIST
         LA    R2,2(,R2)           POINT PAST LENGTH
         SPACE 1
         CH    R1,=H'40'           LONG ENOUGH FOR SYSIN
         BL    NODD                NO, BRANCH
         CLI   32(R2),0            SYSIN OVERRIDE
         BE    *+L'*+6             NO, SKIP MVC
         MVC   IGNORE+(DCBDDNAM-IHADCB)(8),32(R2)
         SPACE 1
         CH    R1,=H'48'           LONG ENOUGH FOR SYSPRINT
         BL    NODD                NO, BRANCH
         CLI   40(R2),0            SYSPRINT OVERRIDE
         BE    *+L'*+6             NO, SKIP MVC
         MVC   SYSPRINT+(DCBDDNAM-IHADCB)(8),40(R2)
         SPACE 1
         CH    R1,=H'56'           LONG ENOUGH FOR ECHO
         BL    NODD                NO, BRANCH
         CLI   48(R2),0            REENTRY OVERRIDE
         BE    *+L'*+6             NO, SKIP MVC
         MVC   PVECTOR(4),48(R2)   YES, SAVE THE REENTRY VECTOR
         SPACE 1
         CH    R1,=H'64'           LONG ENOUGH FOR SYSUT1
         BL    NODD                NO, BRANCH
         CLI   56(R2),0            SYSUT1 OVERRIDE
         BE    *+L'*+6             NO, SKIP MVC
         MVC   OLD+(DCBDDNAM-IHADCB)(8),56(R2)
         SPACE
         CH    R1,=H'72'           LONG ENOUGH FOR SYSUT2
         BL    NODD                NO, BRANCH
         CLI   64(R2),0            SYSUT2 OVERRIDE
         BE    *+L'*+6             NO, SKIP MVC
         MVC   NEW+(DCBDDNAM-IHADCB)(8),64(R2)
         SPACE 1
NODD     OPEN  (NEW,,OLD,,SYSPRINT,OUTPUT)
         USING IHADCB,R2                                           -EU-
         LA    R2,SYSPRINT
         TM    DCBOFLGS,DCBOFOPN   DID SYSPRINT OPEN
         BZ    EXIT12              NO, BRANCH
         LA    R2,OLD
         TM    DCBOFLGS,DCBOFOPN   DID OLD DCB OPEN
         BZ    EXIT12              NO, BRANCH
         LA    R2,NEW
         TM    DCBOFLGS,DCBOFOPN   DID NEW DCB OPEN
         BZ    EXIT12              NO, BRANCH
         LA    R2,IGNORE+(DCBDDNAM-IHADCB)
         DEVTYPE (R2),DEVAREA
         LTR   R15,R15             IS IGNORE DD PRESENT
         BNZ   IGNAB               NO, SKIP OPEN
         OPEN  (IGNORE)
         SPACE 1
IGNAB    LA    R2,OLD
         LH    R10,DCBLRECL        GET LRECL
         TM    DCBRECFM,DCBRECBR   IS IT BLOCKED
         BO    *+L'*+4             YES, BRANCH
         LH    R10,DCBBLKSI        NO, BLKSIZE IS RECORD LENGTH
         SPACE 1
         LA    R2,NEW
         LH    R1,DCBLRECL         GET LRECL
         TM    DCBRECFM,DCBRECBR   IS IT BLOCKED
         BO    *+L'*+4             YES, BRANCH
         LH    R1,DCBBLKSI         NO, BLKSIZE IS RECORD LENGTH
         DROP  R2                                                  -EU-
         SPACE 1
         CR    R10,R1              IS OLD LONGER THAN NEW
         BNH   *+L'*+2             NO, BRANCH
         LR    R10,R1              YES, USE THE SHORTER OF THE TWO
         LA    R1,256              MAX RECORD SIZE
         CR    R10,R1              IS LRECL TOO LONG
         BNH   *+L'*+2             NO, BRANCH
         LR    R10,R1              YES, USE 256
         SPACE 1
         GETMAIN VU,LA=MIN,A=STARTADD   GET ALL AVAILABLE CORE
         LM    R0,R2,FOURK         LOAD 4K, START, SIZE
         ST    R2,SIZE             UPDATE REGION SIZE
         AR    R1,R2               LAST USEABLE BYTE
         ST    R1,HIGHCORE         SAVE FOR LATER
         SPACE 1
         L     R2,STARTADD
         ST    R2,FIRSTIG
         TM    IGNORE+(DCBOFLGS-IHADCB),DCBOFOPN  IGNORE OPEN?
         BO    GETIG               YES, BRANCH                      ABL
         MVC   FIRSTIG(8),IGASMS   FIRST AND LAST IGNORES           ABL
         B     NOIG
         SPACE 1
GETIG    GET   IGNORE,(2)
         LA    R2,80(,R2)
         B     GETIG
         SPACE 1
ENDIG    CLOSE (IGNORE)
         ST    R2,LASTIG                                            ABL
NOIG     ST    R2,LOWOLD                                            ABL
         ST    R2,HIGHOLD
         ST    R2,CURROLD
         AR    R2,R10
         ST    R2,LOWNEW
         ST    R2,HIGHNEW
         ST    R2,CURRNEW
         LA    R8,OLD
         LA    R9,NEW
         SPACE 1
SWAP     XR    R9,R8
         XR    R8,R9
         XR    R9,R8
         L     R3,CURR(,R9)
         C     R3,HIGH(,R9)
         BL    NOINPUT
         TM    DCBOFLGS-IHADCB(R9),DCBOFOPN  CURRENT DCB OPEN?
         BZ    SWAP                NO, BRANCH (AND SWAP)
         LA    R1,0(,R9)
         GET   (1)
         SPACE 1
         LA    R0,0(R10,R3)
         C     R0,HIGHCORE         FIT IN CORE?
         BH    NOTCORE             NO, BRANCH
         LR    R15,R10             GET LENGTH
         BCTR  R15,0               LENGTH MINUS 1 FOR EX
         B     *+L'*+6             SKIP MVC
         MVC   0(0,R3),0(R1)       EXECUTED
         EX    R15,*-6             MOVE THE RECORD
         LR    R0,R10              GET LENGTH
         AR    R0,R0               DOUBLE IT
         AR    R0,R3               ADD R3
         ST    R0,HIGH(,R9)
         SPACE 1
*        SEE IF THIS RECORD (R3) IS ANYWHERE IN THE OTHER BUFFER
         SPACE 1
NOINPUT  L     R2,LOW(,R8)
         LR    R1,R10              GET LENGTH TO COMPARE
         BCTR  R1,0                MINUS 1 FOR EX
         SH    R1,MLENGTH          MINUS 8 FOR SEQUENCE NUMBERS
NEXT8    C     R2,CURR(,R8)
         BNL   NO8
         B     *+L'*+6             SKIP CLC
         CLC   0(1,R3),0(R2)
         EX    R1,*-6              EXECUTE CLC
         BE    FOUND8
         AR    R2,R10
         AR    R2,R10
         B     NEXT8
NO8      AR    R3,R10              NOT IN THE BUFFER
         AR    R3,R10
         ST    R3,CURR(,R9)        UPDATE THE CURRENT POINTER
         B     SWAP
         SPACE 1
*        DOES NOT FIT IN THE ALLOCATED CORE
         SPACE 1
NOTCORE  BAS   R14,NOTEQUAL        OUTPUT NOT EQUAL MESSAGE
         CLOSE (NEW,,OLD)
         MVI   RETCODE+1,8         RETURN CODE 8
         MVC   BUFFER(35),CORE     CORE OVERFLOW MESSAGE
         MVC   BUFFER+35(86),BUFFER+34  CLEAR THE REMAINDER
         BAS   R14,PUTLINE         INVOKE THE PUTLINE ROUTINE
         MVI   BUFFER,C' '
         B     CORETERM
         SPACE 1
PUTLINE  ST    R14,R14SAVE
         CLI   PVECTOR,C'*'        PDS REENTRY?
         BE    PUTL10              YES, BRANCH
         PUT   SYSPRINT,BUFFER     NO, OUTPUT THE LINE
         L     R14,R14SAVE
         BR    R14
PUTL10   LA    R1,BUFFER           ADDRESS OF OUTPUT DATA
         L     R15,PVECTOR         REENTRY VECTOR ADDRESS
         BASR  R14,R15             RETURN TO PDS
         LTR   R15,R15             SUCCESSFUL OUTPUT?
         BNZ   EXIT12              NO - ATTENTION, BRANCH
         L     R14,R14SAVE
         BR    R14
         SPACE 1
*        RECORD WAS FOUND -- SEE IF IT IS TO BE IGNORED
         SPACE 1
FOUND8   CLC   CURR(4,R9),LOW(R9)  RECORDS IN ACTIVE BUFFER?
         BNE   CHKIG               YES, CHECK IGNORES
         ST    R2,CURR(,R8)
         B     IGEQUAL
CHKIG    L     R15,FIRSTIG         FIRST IGNORE
         LA    R0,79
         CR    R1,R0               IS LENGTH GREATER THAN 80
         BNH   *+L'*+2             NO
         LR    R1,R0               YES, REDUCE TO 80
LOOPIG   C     R15,LASTIG          LAST IGNORE?
         BNL   NOTIG               YES, BRANCH
         EX    R1,CLCIG            AN IGNORE RECORD?
         BE    NO8                 YES, BRANCH
         LA    R15,80(,R15)
         B     LOOPIG              CHECK ALL IGNORES
CLCIG    CLC   0(1,R3),0(R15)
NOTIG    ST    R2,CURR(,R8)        NOT AN IGNORE RECORD
         BAS   R14,NOTEQUAL        OUTPUT "NOT EQUAL"
IGEQUAL  BAS   R14,INBUFF          ADD TO COMPARE BUFFER
         XR    R9,R8
         XR    R8,R9
         XR    R9,R8
         BAS   R14,INBUFF          ADD TO OTHER BUFFER
         B     SWAP
         SPACE 1
*        END OF FILE (OLD OR NEW)
         SPACE 1
EOLDNEW  CLOSE ((9))               CLOSE THE CURRENT FILE
         XR    R9,R8
         XR    R8,R9
         XR    R9,R8
         TM    DCBOFLGS-IHADCB(R9),DCBOFOPN  OTHER FILE STILL OPEN?
         BO    SWAP                YES, BRANCH
         CLC   LOWOLD(4),HIGHOLD   BUFFER EMPTY?
         BNE   *+L'*+10            NO, BRANCH
         CLC   LOWNEW(4),HIGHNEW   OTHER BUFFER EMPTY TOO?
         BE    TRIPLE              YES, QUIT
         BAS   R14,NOTEQUAL        FLUSH THE CURRENT BUFFERS
         SPACE 1
*        TERMINATE -- LIST NUMBER OF UNEQUAL COMPARES
         SPACE 1
TRIPLE   MVI   BUFFER,C'-'
CORETERM MVC   BUFFER+1(6),EDCOUNT EDIT MASK
         MVC   BUFFER+7(35),BLOCKS UNEQUAL BLOCKS MESSAGE
         MVC   BUFFER+42(79),BUFFER+41  BLANK REMAINDER
         LH    R1,COUNT
         CVD   R1,DOUBLE
         ED    BUFFER+1(6),DOUBLE+5
         BAS   R14,PUTLINE         INVOKE THE PUTLINE ROUTINE
         B     EXIT
EXIT12   MVI   RETCODE+1,12
EXIT     LA    R2,NEW
         L     R0,SIZE             SIZE OF DYNAMIC AREA
         L     R1,STARTADD
         FREEMAIN R,LV=(0),A=(1)   FREE THE DYNAMIC AREA
         LA    R2,NEW
         USING IHADCB,R2                                           -EU-
         TM    DCBOFLGS,DCBOFOPN   IS DCB OPENED?
         BZ    EXITNEWC
         CLOSE (NEW)
EXITNEWC LA    R2,OLD
         TM    DCBOFLGS,DCBOFOPN   IS DCB OPENED?
         BZ    EXITOLDC
         CLOSE (OLD)
EXITOLDC LA    R2,SYSPRINT
         TM    DCBOFLGS,DCBOFOPN   IS DCB OPENED?
         BZ    EXITPRTC
         CLOSE (SYSPRINT)
         DROP  R2                                                  -EU-
EXITPRTC LH   R15,RETCODE
         L    R13,4(,R13)                                           ABL
         RETURN (14,12),RC=(15)                                     ABL
         SPACE 1
*        RE-INITIALIZE THE ACTIVE BUFFER -- SLIDE UNUSED RECORDS DOWN
         SPACE 1
INBUFF   L     R1,LOW(,R9)
         L     R2,CURR(,R9)
         ST    R1,CURR(,R9)
         LR    R15,R10             GET LENGTH FOR EX
         BCTR  R15,0               LENGTH MINUS 1 FOR EX
NXTREC   AR    R2,R10
         AR    R2,R10
         C     R2,HIGH(,R9)        FINISHED REINITIALIZING?
         BNL   REINIT              YES, BRANCH
         EX    R15,SLIDEMVC        MOVE THE RECORD
         AR    R1,R10
         AR    R1,R10
         B     NXTREC
SLIDEMVC MVC   0(0,R1),0(R2)       EXECUTED
REINIT   ST    R1,HIGH(,R9)        RESET MAXIMUM POINTER
         BR    R14
         SPACE 1
*        FLUSH OUT THE NON-EQUAL RECORDS
         SPACE 1
NOTEQUAL ST    R14,NOTEQR14
         MVI   RETCODE+1,4         RETURN CODE 4
         LH    R1,COUNT
         LA    R1,1(,R1)
         STH   R1,COUNT
         MVI   BUFFER,C'-'
         LA    R3,OLD
         TM    SYSPRINT+(DCBDEVT-IHADCB),DCBDVTRM TERM=TS           ABL
         BNO   MOVES               NO, BRANCH                       ABL
         MVC   BUFFER+1(120),BLANKS     BLANK PAST THE SCREEN WIDTH ABL
         BAS   R14,PUTLINE         INVOKE THE PUTLINE ROUTINE
MOVES    MVI   BUFFER+9,C'-'
         MVC   BUFFER+10(91),BUFFER+9
         MVC   BUFFER+9(3),OLDNEW(R3)
         MVC   BUFFER+98(3),OLDNEW(R3)
         MVI   BUFFER+7,C'-'
         MVI   BUFFER+102,C'-'
         ZAP   NUMBER(3),=P'0'
         L     R5,LOW(,R3)
FLUSHED  C     R5,CURR(,R3)        IS THIS BUFFER FLUSHED?
         BNL   GETNEW              YES, BRANCH
         MVI   BUFFER+7,C'-'
         MVI   BUFFER+102,C'-'
         MVC   BUFFER+15(80),0(R5) ALWAY SHOW 80 BYTES
         AP    NUMBER(3),=P'1'
         MVC   DOUBLE(6),EDMKPAT
         EDMK  DOUBLE(6),NUMBER    POINT R1 TO FIRST NONBLANK
         LA    R14,DOUBLE+5        POINT TO LAST DIGIT
         SR    R14,R1              GET LENGTH MINUS 1
         STC   R14,MOVEA+1         ALTER MVC LENGTH CODE
MOVEA    MVC   BUFFER+103(1),0(R1) MOVE NUMBER
         LA    R15,BUFFER+104(R14)
         MVI   0(R15),C'-'
         LA    R14,1(,R14)
         STC   R14,MOVEB+1
         LA    R1,BUFFER+6
         SR    R1,R14
MOVEB    MVC   0(1,R1),BUFFER+102
         TM    SYSPRINT+(DCBDEVT-IHADCB),DCBDVTRM TSO "DA(*)"?      ABL
         BNO   *+L'*+6             NO, BRANCH                       ABL
         MVC   BUFFER+78(43),BLANKS     BLANK PAST SCREEN WIDTH     ABL
         BAS   R14,PUTLINE         INVOKE THE PUTLINE ROUTINE
         MVI   BUFFER,C' '
         AR    R5,R10
         AR    R5,R10
         B     FLUSHED
GETNEW   LA    R1,NEW
         CR    R3,R1               NEW DONE?
         BE    NOTEQRET            YES, RETURN
         LR    R3,R1               NOW SETUP THE NEW BUFFER
         MVC   BUFFER+1(7),BLANKS
         MVI   BUFFER+9,C'-'
         MVC   BUFFER+10(91),BUFFER+9
         MVC   BUFFER+102(19),BLANKS
         TM    SYSPRINT+(DCBDEVT-IHADCB),DCBDVTRM TSO "DA(*)"?      ABL
         BNO   *+L'*+6             NO, BRANCH                       ABL
         MVC   BUFFER+78(43),BLANKS     BLANK PAST SCREEN WIDTH     ABL
         BAS   R14,PUTLINE         INVOKE THE PUTLINE ROUTINE
         MVI   BUFFER,C' '
         B     MOVES
NOTEQRET L     R14,NOTEQR14
         BR    R14
         SPACE 2
*        DCB EXIT ROUTINE (USED BY ALL FILES)
         SPACE 1
         USING IHADCB,R1                                           -EU-
DCBEXIT  LH    R3,DCBBLKSI       BLKSIZE
         LR    R4,R3               BLKSIZE        FIX-0C9
         TM    DCBRECFM,DCBRECBR   IS IT BLOCKED  FIX-0C9
         BZ    *+L'*+4             NO             FIX-0C9
         LH    R4,DCBLRECL         BLOCKED, GET LRECL
         XR    R2,R2
         DR    R2,R4               BLOCKSIZE/LRECL
         MR    R2,R4               BLOCKING*LRECL
         CR    R3,R4               BLOCKSIZE > LRECL?
         BH    *+L'*+6             YES, BRANCH
         LR    R3,R4               MAKE BLKSIZE=LRECL
         NI    DCBRECFM,255-DCBRECBR    TURN OFF BLOCKING
         STH   R3,DCBBLKSI         NEW BLOCKSIZE
         STH   R3,DCBBUFL          BUFLEN PARAMETER
         CLI   DCBBUFNO,0          BUFNO=0?
         BNER  R14                 NO, QUIT
         MVI   DCBBUFNO,3          DEFAULT TO 3 BUFFERS
         BR    R14                 EXIT
         DROP  R1                                                  -EU-
         EJECT
SAVE     DC    18F'0'
         SPACE 1
         PRINT NOGEN                                               -EU-
SYSPRINT DCB   LRECL=121,RECFM=FBA,EXLST=EXITDCB,DDNAME=SYSPRINT,      X
               MACRF=(PM),DSORG=PS
IGNORE   DCB   LRECL=80,RECFM=FB,EXLST=EXITDCB,DDNAME=IGNORE,          X
               EODAD=ENDIG,MACRF=(GM),DSORG=PS
         SPACE 1
FIRSTIG  DC    F'0'                POINTER TO FIRST IGNORE RECORD
LASTIG   DC    F'0'                POINTER TO LAST IGNORE RECORD
         SPACE 1
OLD      DCB   EXLST=EXITDCB,DDNAME=OLD,                               X
               EODAD=EOLDNEW,MACRF=(GL),DSORG=PS,OPTCD=C
         SPACE 1
LOWOLD   DC    F'0'                FIRST OLD RECORD
HIGHOLD  DC    F'0'                HIGHEST USED OLD RECORD
CURROLD  DC    F'0'                CURRENT OLD RECORD
OLDLIT   DC    C'OLD'
         SPACE 1
NEW      DCB   EXLST=EXITDCB,DDNAME=NEW,                               X
               EODAD=EOLDNEW,MACRF=(GL),DSORG=PS,OPTCD=C
         SPACE 1
LOWNEW   DC    F'0'                FIRST NEW RECORD
HIGHNEW  DC    F'0'                HIGHEST USED NEW RECORD
CURRNEW  DC    F'0'                CURRENT NEW RECORD
NEWLIT   DC    C'NEW'
         SPACE 1
         PRINT GEN                                                 -EU-
LOW      EQU   LOWNEW-NEW          DISPLACEMENT TO LOWOLD AND LOWNEW
HIGH     EQU   HIGHNEW-NEW         DISPLACEMENT TO HIGHOLD AND HIGHNEW
CURR     EQU   CURRNEW-NEW         DISPLACEMENT TO CURROLD AND CURRNEW
OLDNEW   EQU   NEWLIT-NEW          DISPLACEMENT TO OLD OR NEW LITERAL
         EJECT
DOUBLE   DC    D'0'
EXITDCB  DC    X'85',AL3(DCBEXIT)
RETCODE  DC    H'0'
COUNT    DC    H'0'
NUMBER   DC    XL3'0'
MLENGTH  DC    H'8'                ADJUSTMENT TO COMPARE LENGTH
MIN      DC    F'20480'            MINIMUM CORE TO GETMAIN
MAX      DC    F'204800'           MAXIMUM CORE TO GETMAIN
FOURK    DC    F'4096'             AMOUNT OF CORE TO RELEASE
STARTADD DC    F'0'                BUFFER START ADDRESS
SIZE     DC    F'0'                SIZE OF THE BUFFER AREA
HIGHCORE DC    F'0'                MAXIMUM BUFFER ADDRESS
BUFFER   DC    X'004040404040406040000000606060'
         DC    80X'00',X'606060000000',X'4060404040404040'
         DC    12C' '
BLANKS   DC    CL121' '
EDCOUNT  DC    X'402020202120'
EDMKPAT  DC    X'402020202020'
CORE     DC    C'-CORE OVERFLOW - COMPARE ABANDONED '
BLOCKS   DC    C' BLOCKS OF COMPARE ERRORS DETECTED '
DEVAREA  DC    2F'0'
PARM     DC    CL16' '
NOTEQR14 DC    F'0'
PVECTOR  DC    F'0'
R14SAVE  DC    F'0'
IGASMS   DC    A(DFTIG,DFTIG)      DEFAULT IGNORE TABLE             ABL
DFTIG    DC    CL80'         EJECT   '                              ABL
         DC    CL80'         SPACE   '                              ABL
         DC    CL80'         SPACE 1 '                              ABL
         DC    CL80'         SPACE 2 '                              ABL
         DC    CL80'         SPACE 3 '                              ABL
         DC    CL80'*                '                              ABL
ENDDFTIG EQU   *                                                    ABL
         EJECT
         LTORG
         SPACE 1
         PRINT NOGEN                                               -EU-
         DCBD  DSORG=PS                                            -EU-
         PRINT GEN                                                 -EU-
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 2
         END
