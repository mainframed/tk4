         TITLE 'XPRNTSUB - GENERAL PRINTING SUBROUTINE'
         SPACE 1
* FUNCTION/OPERATION : THIS IS A GENERAL PRINTING SUBROUTINE TO MANAGE
*        THE DETAILS OF PAGINATION, HEADINGS, AND OUTPUT COMPRESSION
*        FOR PRINTED OUTPUT. IT IS INVOKED FROM A PROBLEM PROGRAM VIA
*        THE MACRO 'XPRNT', WHICH HAS THE FOLLOWING CALL MODES :
*           OPEN - INITIALIZES PAGE SIZE PARAMETERS AND MAXIMUM NUMBER
*              OF OUTPUT LINES, RESETS PAGE NUMBER, CLEARS HEADING
*              LINES AND INSERTS CURRENT DATE AND TIME, INSERTS DDNAME
*              IN DCB, AND OPENS THE DATA SET.
*           MODIFY - ALTERS ANY OR ALL OF THE PARAMETERS LISTED UNDER
*              'OPEN' EXCEPT THE DDNAME.
*           SETHEAD - SUPPLIES TEXT FOR ONE OR MORE LINES TO BE USED
*              PAGE HEADINGS.
*           PRINT - DELIVERS ONE OR MORE LINES TO BE PRINTED.
*           SPACE - MOVES THE PAGE VERTICALLY A GIVEN NUMBER OF LINES.
*           EJECT - CONDITIONAL OR UNCONDITIONAL SKIP TO HEAD-OF-FORM.
*           CLOSE - CLOSES THE DATA SET.
         SPACE 1
* ENTRY POINTS : EACH MODE HAS A SEPARATE ENTRY AT A FIXED OFFSET FROM
*        THE BASE ADDRESS. ENTRIES ARE EFFECTED BY A  BAS  14,D(15)
*        (WHERE D IS A DISPLACEMENT WHICH SELECTS THE DESIRED MODE) AND
*        ASSUMES THAT REGISTER 13 ADDRESSES A STANDARD 18-WORD SAVE
*        AREA.
         SPACE 1
* INPUT : ON ENTRY, REG 0 POINTS TO A WORK AREA FOR THE DATA SET, WHICH
*        IS DESCRIBED IN THIS CODING BY THE DUMMY SECTION 'WORKAREA'.
*        REG 1 POINTS TO A PARAMETER LIST OF A FORM APPROPRIATE TO THE
*        CALL MODE. THESE LISTS ARE EITHER DESCRIBED BY DUMMY SECTIONS
*        OR ARE STANDARD VARIABLE-LENGTH ADDRESS LISTS.
         SPACE 1
* OUTPUT : PRINT LINES AND SPACE CONTROL RECORDS ARE DELIVERED VIA QSAM
*        TO A SEQUENTIAL DATA SET. EACH LINE IS REDUCED TO ITS MIN-
*        IMUM LENGTH BY TRUNCATING TRAILING BLANKS.
         SPACE 1
* DATA SETS : THE OUTPUT DATA SET IS SEQUENTIAL, ARRANGED FOR BLOCKED
*        FORMAT V RECORDS USING MACHINE CONTROL CHARACTERS APPROPRIATE
*        TO 1403 OR 1404 PRINTERS. THE DDNAME IS SUPPLIED BY THE
*        'OPEN' CALL; THE STANDARD VALUE IS 'SYSPRINT'.
         SPACE 1
* EXTERNAL ROUTINES : CALLS 'XDATEDIT' TO FORMAT THE DATE FOR THE
*        PAGE HEADING LINE.
         SPACE 1
* EXITS - NORMAL : RETURNS VIA REG 14 WITH RETURN CODE 0 IN REG 15.
*        THE CURRENT PAGE NUMBER (IN BINARY) IS IN REG 0 AND THE BINARY
*        NUMBER OF LINES REMAINING ON THE CURRENT PAGE IS IN REG 1.
*        IF AN OPEN CALL CANNOT OPEN THE DCB, THE RETURN CODE IS 4.
         SPACE 1
* EXITS - ERROR : ERRONEOUS CALLS RESULT IN AN 'ABEND' WITH ONE OF THE
*        FOLLOWING COMPLETION CODES :
*           4000 - ROUTINE WAS ILLEGALLY ENTERED AT ITS BASE ADDRESS.
*           4002 - A CALL MODE OTHER THAN 'OPEN' WAS DIRECTED TO A DATA
*              SET WHICH WAS NOT OPEN.
*           4003 - 'OPEN' OR 'MODIFY' SPECIFIED TOO LARGE A PAGE WIDTH.
*           4004 - 'OPEN' OR 'MODIFY' SPECIFIED TOO LONG A PAGE.
*           4005 - 'PRINT' OR 'SETHEAD' SPECIFIED A LINE WHOSE TEXT
*              LENGTH PLUS OFFSET EXCEEDED THE PAGE WIDTH.
*           4006 - THE MAXIMUM NUMBER OF OUTPUT LINES WAS EXCEEDED.
*           4007 - SYNCHRONOUS I/O ERROR.
         SPACE 1
* TABLES/WORK AREAS : THE CALL PARAMETER LISTS, WORK AREA, AND PRINT
*        LINE DESCRIPTOR BLOCK ARE ALL DESCRIBED BY DUMMY SECTIONS
*        AT THE END OF THE PROGRAM.
         SPACE 1
* ATTRIBUTES : REENTRANT, READ-ONLY.  WILL HANDLE ANY NUMBER OF DATA
*        SETS SIMULTANEOUSLY, USING A SEPARATE WORK AREA FOR EACH.
         SPACE 1
* OPERATING ENVIRONMENT : RUNS UNDER OPERATING SYSTEM/360, USING
*        QSAM DATA MANAGEMENT WITH LOCATE-MODE PUT MACROS AND SIMPLE
*        BUFFERING.  ASSUMES OPTION 6A OR 6B FOR TIME OF DAY.
         SPACE 1
* NOTES : NONE.
         EJECT
XPRNTSUB CSECT
         SPACE 2
* REGISTER ASSIGNMENTS :
         SPACE 2
* N.B. - REGISTER GROUPS 'RWA,RWB,RWC,RWD' AND 'RLPEXIT,RPARM' MUST BE
*        KEPT IN ORDER FOR LM AND STM ORDERS.
         SPACE 1
RWA      EQU   2                   GENERAL WORK REG
RWB      EQU   3                   GENERAL WORK REG
RWC      EQU   4                   GENERAL WORK REG
RWD      EQU   5                   GENERAL WORK REG
RSPACE   EQU   6                   NUMBER OF LINES TO SPACE
RBAL     EQU   7                   NUMBER OF LINES LEFT ON PAGE
RLPEXIT  EQU   8                   EXIT FROM LIST PROCESSING ROUTINE
RPARM    EQU   9                   CALL PARAMETER LIST ADDR
RPLD     EQU   10                  PLD BLOCK BASE
RWKAREA  EQU   11                  BASE REGISTER FOR WORK AREA
RBASE    EQU   12                  BASE REGISTER FOR CODING
RRET     EQU   14                  STANDARD RETURN ADDR
         SPACE 1
*        MASKS FOR CONTROL BYTE "SWITCHES" :
         SPACE 1
HOFBIT   EQU   X'80'               PAGE IS AT PHYSICAL HEAD-OF-FORM
NOSKBIT  EQU   X'40'               DISALLOW EJECT DURING HEAD PRINTING
TXT1BIT  EQU   X'20'               ON FOR FIRST TEXT LINE ON PAGE
HD1BIT   EQU   X'10'               ON FOR FIRST HEAD LINE WITH PAGE
*                                  NO, ETC
SP0BIT   EQU   X'08'               LAST LINE SPACED 0
         SPACE 2
EJFORCE  EQU   255                 SPACING QUANTITY TO FORCE PAGE EJECT
OPENBIT  EQU   X'10'               TO TEST 'DCBOFLGS' FOR SUCCESSFUL
*                                  OPEN
MAXLNGTH EQU   254                 MAXIMUM PAGE LENGTH
MAXWIDTH EQU   132                 MAXIMUM PAGE WIDTH
DEFBLKSZ EQU   1692                DEFAULT DCB BLOCK SIZE
         EJECT
**********************
* ENTRY AND PROLOGUE *
**********************
         SPACE 1
* ENTER FROM THE CALLING SEQUENCE VIA THE INSTRUCTION "BAS 14,X(0,15)".
* REGISTER 15 IS SET TO THE BASE OF THE ROUTINE AND THE DISPLACEMENT
* "X" SELECTS THE ENTRY POINT. EACH ENTRY SAVES REGISTERS, LOADS THE
* ADDRESS OF THE APPROPRIATE SUBROUTINE, AND GOES TO A COMMON
* PROLOGUE. NOTE THAT AN ATTEMPT TO ENTER AT THE BASE RESULTS IN
* AN ABEND.
         SPACE 1
BASEADDR B     20(0,R15)           BRANCH AROUND MODULE IDENTIFIER
         DC    AL1(15)             LENGTH OF IDENTIFIER
         DC    CL15'XPRNTSUB-028214'
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         XR    R1,R1               SET ABEND COMPLETION CODE
         LR    RBASE,R15           SET BASE REG FOR ABEND ROUTINE
         USING BASEADDR,RBASE
         B     ABEND
         DROP  RBASE
         SPACE 1
* ENTRY POINTS FOR VARIOUS FUNCTIONS, AT 12-BYTE INTERVALS BEGINNING
* AT BASEADDR+32. EACH LOADS "RWA" WITH THE ADDRESS OF THE SUBROUTINE
* TO GO TO AFTER EXECUTING "PROLOGUE".
         SPACE 1
         ORG   XPRNTSUB+32
         USING BASEADDR,R15
         SPACE 1
PRENTRY  STM   R14,R12,12(R13)     PRINT
         LA    RWA,PRPROC
         B     PROLOGUE
SPENTRY  STM   R14,R12,12(R13)     SPACE
         LA    RWA,SPPROC
         B     PROLOGUE
OPENTRY  STM   R14,R12,12(R13)     OPEN
         LA    RWA,OPPROC
         B     PROLOGUE
CLENTRY  STM   R14,R12,12(R13)     CLOSE
         LA    RWA,CLPROC
         B     PROLOGUE
SHENTRY  STM   R14,R12,12(R13)     SETHEAD
         LA    RWA,SHPROC
         B     PROLOGUE
EJENTRY  STM   R14,R12,12(R13)     EJECT
         LA    RWA,EJPROC
         B     PROLOGUE
MDENTRY  STM   R14,R12,12(R13)     MODIFY
         LA    RWA,MDPROC
         B     PROLOGUE
         EJECT
* PROLOGUE. SET UP BASE REGISTERS FOR CODING AND WORK AREA.  CHAIN
* SAVE AREAS IN STANDARD FASHION. LOAD "RBAL" WITH CURRENT PAGE
* BALANCE AND "RPARM" WITH THE CALLING PARAMETER LIST ADDRESS.
         SPACE 1
PROLOGUE LR    RBASE,R15           LOAD CODING BASE REG
         USING BASEADDR,RBASE
         DROP  R15
         LR    RWKAREA,R0          BASE REG FOR WORK AREA
         USING WORKAREA,RWKAREA
         LR    RWB,R13             ADDR OF CALLER'S SAVE AREA
         LA    R13,SAVEAREA        ADDR OF OUR SAVE AREA
         ST    R13,8(RWB)          CHAIN TO US FROM CALLER
         ST    RWB,SAVEAREA+4      CHAIN TO CALLER FROM US
         LR    RPARM,R1            LOAD PARAMETER LIST ADDR
         LH    RBAL,PAGEBAL        LOAD PAGE LINE COUNT BALANCE
         MVC   DCBSYNAD(3),=AL3(SYNAD)  PUT ERROR ROUTINE ADDRESS IN
*                                  DCB
         TM    DCBOFLGS,OPENBIT    MAKE SURE DATA SET IS OPEN
         BCR   1,RWA               BRANCH IF OPEN
         CL    RWA,=A(OPPROC)      IF NOT, ONLY OPEN CALL ALLOWED
         BCR   8,RWA               BR IF OPEN CALL
         LA    R1,2                ERROR CODE 2, GO TO ABEND
         SPACE 1
* ABEND ROUTINE FOR SERIOUS ERRORS.  ENTER WITH ERROR NUMBER IN R1.
* ADD DECIMAL 4000 FOR USER CONPLETION CODE AND ISSUE 'ABEND' WITH DUMP
         SPACE 1
         CNOP  2,4                 ALIGN CONSTANT FOLLOWING SVC
ABEND    AL    R1,*+6              LOAD ABEND CODES
         SVC   13                  ISSUE ABEND SVC
         DC    X'80'               'DUMP' BIT FOR ABEND
         DC    AL3(4000)           BASE FOR COMPLETION CODE
         EJECT
************
* EPILOGUE *
************
         SPACE 1
* ALL MODES RETURN TO THE CALLER VIA THIS ROUTINE. IT EXITS WITH
* THE RETURN CODE IN REGISTER 15, THE PAGE NUMBER IN REGISTER 0, AND
* THE NUMBER OF LINES REMAINING ON THE PAGE IN REGISTER 1.
         SPACE 1
EXIT4    LA    R15,4               SET RETURN CODE 4
         B     EXIT
         SPACE 1
EXIT0    XR    R15,R15             SET RETURN CODE 0
         SPACE 1
EXIT     LH    R0,PAGENO           LOAD CURRENT PAGE NUMBER
         LR    R1,RBAL             LOAD NUMBER OF LINES LEFT
         STH   RBAL,PAGEBAL        SAVE PAGE BALANCE
         XC    DCBSYNAD(3),DCBSYNAD  CLEAR ERROR ROUTINE ADDRESS
         L     R13,SAVEAREA+4      ADDRESS OF CALLER'S SAVE AREA
         L     R14,12(R13)         LOAD RETURN ADDRESS
         LM    R2,R12,28(R13)      RESTORE CALLER'S REGISTERS
         MVI   12(R13),X'FF'       SET RETURN INDICATION
         BR    R14                 RETURN TO CALLER
         SPACE 2
******************
* PRINT FUNCTION *
******************
         SPACE 1
* PRINT LINE DELIVERY CALL. THE PARAMETER LIST IS A VARIABLE-LENGTH
* LIST OF ADDRESSES, THE LAST OF WHICH IS NEGATIVE (I.E. BIT 0 IS A 1).
* EACH ADDRESS POINTS TO A PLD DESCRIBING A LINE TO BE PRINTED. CALL
* THE GENERAL LIST PROCESSING ROUTINE TO DO THE DIRTY WORK.
         SPACE 1
PRPROC   BAS   RLPEXIT,LISTPROC    INVOKE LIST PROCESSOR
         B     EXIT0               EXIT TO CALLER
         EJECT
******************
* SPACE FUNCTION *
******************
         SPACE 1
* CALL TO MOVE THE PAPER A SPECIFIED NUMBER OF LINES. IF THE NUMBER
* OF LINES EXCEEDS THE CURRENT PAGE BALANCE, AN EJECT RESULTS, UNLESS
* SUPPRESSED BY THE 'SPNOEJ' BIT IN THE PARAMETER LIST. IF THE PAGE
* IS AT HEAD-OF-FORM, SPACING IS SUPPRESSED UNLESS THE 'SPATHOF' BIT
* IS SET IN THE PARAMETER LIST. IN THE LATTER CASE, THE PAGE HEADINGS
* WILL BE PRINTED BEFORE THE SPACING IS EXECUTED.
         SPACE 1
         USING SPPARM,RPARM        ADDRESSING FOR PARM LIST
SPPROC   TM    SWITCHES,HOFBIT     TEST IF AT HEAD-OF-FORM
         BZ    SPSUBTR             BR IF NOT
         TM    SPCOND,SPATHOF      IS SPACE ALLOWED AT HOF?
         BZ    EXIT0               EXIT IF NOT
         BAS   RRET,HEADPRNT       IF SO, PRINT HEADINGS FIRST
SPSUBTR  XR    RSPACE,RSPACE
         IC    RSPACE,SPQUAN       LOAD SPACING AMOUNT
         SR    RBAL,RSPACE         COMPUTE NEW PAGE BALANCE
         BP    SPMOVE              BRANCH IF BAS STILL > 0
         TM    SPCOND,SPNOEJ       TEST IF EJECT ALLOWED
         BO    SPMOVE              BRANCH IF NOT
         LA    RSPACE,EJFORCE      IF ALLOWED, FORCE EJECT
SPMOVE   BAS   RWA,MOVE            CALL PAPER MOVING SUB
         B     EXIT0               EXIT TO CALLER
         DROP  RPARM
         EJECT
******************
* EJECT FUNCTION *
******************
         SPACE 1
* CALL TO MOVE THE PAPER TO HEAD-OF-FORM. IF THE PAGE IS ALREADY
* THERE, THE EJECT IS NOT EXECUTED UNLESS THE 'EJATHOF' BIT IN THE
* PARAMETER LIST IS ON. IN THE LATTER CASE, A SKIP IS EXECUTED WITHOUT
* PRINTING ANY HEADINGS, RESULTING IN A BLANK PAGE. IF THE MASK BITS
* IN THE 'EJCOND' PARAMETER ARE NOT ALL ONES, A CONDITIONAL EJECT IS
* REQUESTED. THE PAGE BALANCE IS COMPARED AGAINST THE TEST QUANTITY
* 'EJQUAN' IN THE PARAMETER LIST, THEN THE DECISION TO EJECT OR NOT
* IS MADE WITH A 'BC' ORDER USING THE 'EJCOND' BITS AS A MASK.
         SPACE 1
         USING EJPARM,RPARM        FOR PARM LIST ADDRESSING
EJPROC   TM    SWITCHES,HOFBIT     TEST IF AT HOF
         BZ    EJTEST              BR IF NOT
         TM    EJCOND,EJATHOF      IF SO, IS EJECT ALLOWED?
         BZ    EXIT0               IF NOT, EXIT
EJTEST   XR    R0,R0
         IC    R0,EJQUAN           LOAD TEST QUANTITY
         IC    R1,EJCOND           GET CONDITIONAL TEST MASK
         N     R1,=XL4'000000F0'   KEEP BITS 24-27 ONLY
         CR    RBAL,R0             COMPARE BALANCE WITH TEST QUAN
         EX    R1,EJBC             EXECUTE BC WITH MASK FROM PARM
         B     EXIT0               EXIT IF CONDITION NOT MET
EJMOVE   LA    RSPACE,EJFORCE      TO FORCE EJECT
         BAS   RWA,MOVE            CALL PAPER MOVER SUB
         B     EXIT0               EXIT TO CALLER
EJBC     BC    0,EJMOVE            BRANCH IF EJECT REQUIRED
         DROP  RPARM
         EJECT
*****************
* OPEN FUNCTION *
*****************
         SPACE 1
* THIS MUST BE THE FIRST CALL FOR A NEW DATA SET. IT SETS THE DDNAME
* IN THE DCB AND OPENS THE DATA SET. ALL COUNTERS AND SWITCHES ARE
* SET TO THEIR NOMINAL VALUES BEFORE PROCESSING ANY OPTIONS WHICH
* MAY HAVE BEEN SUPPLIED WITH THE CALL. THE PAGE BALANCE IS SET TO
* ZERO, BUT THE PAGE IS NOT MOVED. THE PROGRAMMER SHOULD NORMALLY
* ISSUE AN 'EJECT' CALL BEFORE BEGINNING HIS OUTPUT.
         SPACE 1
* IF THE DATA SET IS ALREADY OPEN, THE DDNAME IS IGNORED, THE NOMINAL
* OPTIONS ARE SET, THEN THIS CALL IS TREATED EXACTLY AS IF IT WERE A
* 'MODIFY' CALL.
         SPACE 1
         USING OMPARM,RPARM
OPPROC   MVC   PAPARMS(DEFSIZE),DEFAULTS  SET STANDARD OPTIONS
         MVI   HLTEXT,C' '         CLEAR HEADING TEXT
         MVC   HLTEXT+1(HLTXTLNG-1),HLTEXT
         TIME  DEC                 GET CURRENT DATE & TIME
         STM   R0,R1,HPRSAVE       SAVE TIME AND DATE
         SPACE 1
* NOW IF DATA SET IS ALREADY OPEN, GO TO 'MDPROC'. OTHERWISE, INSERT
* DDNAME AND OPEN IT.
         SPACE 1
         TM    DCBOFLGS,OPENBIT    TEST IF OPEN
         BO    OPJOIN              BR TO 'MDPROC' IF OPEN
         MVC   DCBDDNAM(8),OMDDNAME  INSERT DDNAME INTO CLOSED DCB
         MVC   DCBEXLST(3),=AL3(EXLST)  INSERT ADDRESS OF EXIT LIST
         MVI   DWORK,X'80'         SET END-OF-LIST BIT
         OPEN  (PRINTDCB,(OUTPUT,LEAVE)),MF=(E,DWORK)
         XC    DCBEXLST(3),DCBEXLST  CLEAR ADDRESS OF EXIT LIST
         TM    DCBOFLGS,OPENBIT    TEST FOR SUCCESSFUL OPEN
         BO    OPJOIN              TO 'MDPROC' IF O.K.
         B     EXIT4               EXIT WITH RC=4 IF OPEN FAILS
         DROP  RPARM
         EJECT
* DCB EXIT ROUTINE FOR OPEN. SET BLOCK SIZE TO THE DEFAULT VALUE IF
* NOT SPECIFIED IN DS LABEL OR DD CARD.
         SPACE 1
EXLST    DS    0F                  EXIT LIST, ON BOUNDARY
         DC    X'85'
         DC    AL3(DCBMOD)
         SPACE 1
DCBMOD   LH    RWA,DCBBLKSZ        LOAD BLOCK SIZE
         LTR   RWA,RWA             TEST IF ZERO
         BNZ   DCBNZ               BRANCH IF NOT ZERO
SETDEF   LA    RWA,DEFBLKSZ        SET DEFAULT BLOCK SIZE
         STH   RWA,DCBBLKSZ        STORE IN DCB
         BR    R14                 RETURN TO OPEN ROUTINE
DCBNZ    CH    RWA,=H'141'         TEST FOR MINIMUM BLOCKSIZE
         BL    SETDEF              USE DEFAULT IF TOO LOW
         BR    R14                 RETURN TO OPEN IF OK
         EJECT
*******************
* MODIFY FUNCTION *
*******************
         SPACE 1
* THIS CALL MAY ALTER ANY  OR ALL OF THE FOLLOWING : DATE, TIME, PAGE
* NUMBER, PAGE LENGTH, PAGE WIDTH, MAXIMUM NUMBER OF OUTPUT LINES.
* THE NEW VALUES ARE PRESENTED IN A PARAMETER LIST. IF A PARAMETER IS
* ZERO, THE CORRESPONDING QUANTITY IS NOT ALTERED.
         SPACE 1
* THE DATE AND TIME FIELDS MAY BE SUPPLIED BY THE 'OPEN' ROUTINE,
* WHICH JOINS THIS CODING AT 'OPJOIN'. IN THAT CASE, THE VALUES
* INSERTED BY 'OPEN' ARE USED UNLESS OVERRIDDEN BY THE PARAMETER LIST.
         SPACE 1
         USING OMPARM,RPARM
MDPROC   XR    R0,R0               GENERATE TWO ZERO WORDS
         XR    R1,R1
         STM   R0,R1,HPRSAVE       SET DATE & TIME FIELDS TO ZERO
         SPACE 1
* ENTER HERE FROM 'OPEN'. THE OBJECT OF THE FOLLOWING IS TO GET THE
* ACTUAL TIME AND DATE (IN PACKED DECIMAL) INTO 'HPRSAVE' AND
* 'HPRSAVE+4', RESPECTIVELY. THOSE FIELDS MAY HAVE BEEN FILLED IN BY
* THE OPEN ROUTINE, OR THEY MAY HAVE BEEN SET TO ZEROS BY 'MDPROC'
* ABOVE. NOW WE SEE IF ADDRESSES FOR TIME AND/OR DATE VALUES WERE
* PROVIDED IN THE PARAMETER LIST, AND TRANSFER THE VALUES IF SO.
         SPACE 1
OPJOIN   LM    RWA,RWB,OMTIMEAD    LOAD TIME & DATE ADDRS FROM PARM
         LTR   RWA,RWA             TEST FOR TIME ADDR SUPPLIED
         BZ    NOTIME              BRANCH IF ZERO
         MVC   HPRSAVE(4),0(RWA)   GET TIME AS DECIMAL 'HHMMSSTH'
NOTIME   LTR   RWB,RWB             TEST IF DATE ADDR SUPPLIED
         BZ    DATEEDIT            BR IF NOT
         MVC   HPRSAVE+4(4),0(RWB)  GET DECIMAL DATE AS '00YYDDD+'
         SPACE 1
* IF THE DATE VALUE IS NOT ZERO, EDIT INTO THE HEADING LINE TEXT. BOTH
* THE DAY NUMBER AND THE MONTH-DAY-YEAR FORM ARE USED.
         SPACE 1
DATEEDIT LM    RWA,RWB,HPRSAVE     LOAD TIME & DATE FOR TESTING
         LTR   RWB,RWB             TEST IF DATE WAS GIVEN
         BZ    TIMEEDIT            BRANCH IF ZERO
         MVC   HLDAY(4),=C'DAY='   INSERT DAY NUMBER
         UNPK  HLDAY+4(3),HPRSAVE+6(2)  UNPACK DAY NUMBER
         OI    HLDAY+6,X'F0'       TIDY UP SIGN BITS
         ST    RWB,DWORK+4         STORE DATE ARG FOR EDIT RTNE
         LA    R1,DWORK            CONSTRUCT ONE-WORD PARM LIST
         ST    R1,HPRSAVE+4        FOR XDATEDIT CALL
         LA    R1,HPRSAVE+4        LOAD PARM LIST ADDRESS
         L     R15,=V(XDATEDIT)    LOAD ADDRESS OF DATE EDIT RTNE
         BASR  R14,R15             TO EDIT DATE AS 'MM/DD/YY'
         MVC   HLDATE(8),DWORK     INSERT RESULT IN HL TEXT
         SPACE 1
* EDIT TIME IN HOURS AND MINUTES, IF SUPPLIED.
         SPACE 1
TIMEEDIT LTR   RWA,RWA             TEST IF TIME GIVEN
         BZ    TSTPGNO             BR IF ZERO
         SRL   RWA,4               ADD LEADING ZERO TO TIME
         ST    RWA,HPRSAVE         STORE TIME IN WORK LOC
         MVC   HLTIME(7),=X'402120207A2020'  EDIT CONTROL CHAR
         ED    HLTIME(7),HPRSAVE   EDIT INTO ALPHA
         SPACE 1
* MODIFY PAGE NUMBER. VALUE GIVEN IS DECREMENTED BY ONE, SINCE IT IS
* INCREMENTED BEFORE USE.
         SPACE 1
TSTPGNO  LH    RWA,OMPAGENO        GET VALUE FROM PARM LIST
         LTR   RWA,RWA             TEST IF ZERO
         BZ    TSTPGWID            BR IF ZERO
         BCTR  RWA,0               DECREMENT BY 1
         STH   RWA,PAGENO          STORE
         SPACE 1
* MODIFY PAGE WIDTH, TESTING FOR MAXIMUM ALLOWED.
         SPACE 1
TSTPGWID XR    RWA,RWA
         IC    RWA,OMPAGWID        GET WIDTH FROM PARM LIST
         LTR   RWA,RWA             TEST IF ZERO
         BZ    TSTPGLNG            BRANCH IF SO
         CLI   OMPAGWID,MAXWIDTH   TEST MAXIMUM SIZE
         BNH   PGWIDOK
         LA    R1,3                ERROR, TOO LARGE
         B     ABEND
PGWIDOK  STH   RWA,PAGWIDTH
         SPACE 1
* MODIFY PAGE LENGTH, TESTING FOR MAXIMUM VALUE.
         SPACE 1
TSTPGLNG XR    RWA,RWA
         IC    RWA,OMPAGLNG        GET FROM PARM LIST
         LTR   RWA,RWA             TEST IF SUPPLIED
         BZ    TSTMAXLN            BR IF NOT
         CLI   OMPAGLNG,MAXLNGTH   TEST FOR LEGAL VALUE
         BNH   PGLNGOK
         LA    R1,4                ERROR, ABORT
         B     ABEND
PGLNGOK  STH   RWA,PAGELNG         STORE
         SPACE 1
* MODIFY PRINT LINE LIMIT COUNTER.
         SPACE 1
TSTMAXLN L     RWA,OMMAXLIN        GET FROM PARM LIST
         LTR   RWA,RWA             TEST IF SUPPLIED
         BZ    EXIT0               EXIT IF NOT
         ST    RWA,MAXLINES        STORE
         B     EXIT0               EXIT TO CALLER
         DROP  RPARM
         EJECT
********************
* SETHEAD FUNCTION *
********************
         SPACE 1
* THIS CALL PRESENTS A LIST OF LINES WHICH WILL BE USED AS PAGE HEADING
* AND SUB-HEADING LINES. THE PARAMETER LIST IS A VARIABLE-LENGTH LIST
* OF PLD ADDRESSES, EXACTLY AS FOR 'PRINT' CALLS. THE FIRST LINE WILL
* HAVE ADDED TO ITS RIGHT END THE DATE, TIME, AND PAGE NUMBER.
* HOWEVER, IF ITS LENGTH EXCEEDS 98 BYTES, IT WILL OVERLAY THOSE
* FIELDS. THE SECOND AND SUBSEQUENT LINES WILL BE PRINTED NORMALLY.
* NOTE THAT THESE LINES ARE NOT PRINTED WHEN THE PAGE IS EJECTED, BUT
* WHEN THE LINE WHICH WILL BE FIRST ON THE NEW PAGE IS DELIVERED, THUS
* ALLOWING THE HEADINGS TO BE ALTERED AFTER DELIVERY OF THE LAST LINE
* ON THE PRECEDING PAGE. THE ADDRESS OF THE PARAMETER LIST IS SAVED
* BY THE PRINTING ROUTINE, BUT THE PARAMETER LIST, THE PLD'S TO WHICH
* IT POINTS, AND THE LINE TEXTS TO WHICH THEY POINT, MUST BE PRESERVED
* BY THE PROBLEM PROGRAM FOR AS LONG AS THEY ARE IN USE, SINCE THEY
* ARE REFERRED TO AT THE BEGINNING OF EACH NEW PAGE. EACH CALL TO
* TO 'SETHEAD' SUPERSEDES THE EFFECT OF THE PREVIOUS CALL. A CALL WITH
* A PARAMETER LIST ADDRESS OF ZERO INDICATES THAT NO HEADINGS ARE
* PROVIDED BY THE PROBLEM PROGRAM, AND ONLY THE PAGE NUMBER, DATE, AND
* TIME WILL BE PRINTED, WITH A STANDARD SPACING OF THREE.
         SPACE 1
SHPROC   LTR   RPARM,RPARM         TEST FOR NULL LIST ADDR
         BNZ   SHOK                BRANCH IF NON-ZERO
         LA    RPARM,NOHDLIST      ADDRESS OF PLD FOR BLANK LINE
SHOK     ST    RPARM,HEADLIST      STORE ADDR OF HEADING PARMS
         B     EXIT0               EXIT
         EJECT
******************
* CLOSE FUNCTION *
******************
         SPACE 1
* THIS CALL CLOSES THE PRINTER DATA SET. IT DOES NOT MOVE THE PAGE
* OR ALTER ANY SWITCHES OR VARIABLES EXCEPT THE DCB ITSELF.
* AFTER CLOSING THE DCB, IT RELEASES THE PRINT BUFFERS.
         SPACE 1
CLPROC   TM    DCBOFLGS,OPENBIT    IS DCB OPEN NOW?
         BZ    EXIT0               EXIT IF ALREADY CLOSED
         MVI   DWORK,X'80'         SET END-OF-LIST BIT
         CLOSE (PRINTDCB,LEAVE),MF=(E,DWORK)
         FREEPOOL  PRINTDCB        FREE THE BUFFER CORE
         B     EXIT0               EXIT TO CALLER
         EJECT
************
* LISTPROC *
************
         SPACE 1
* THIS ROUTINE PROCESSES A LIST OF PLD ADDRESSES, FORMATTING EACH PRINT
* LINE AND PERFORMING THE NECESSARY PRE- AND POST-SPACING OPERATIONS.
* IT IS ENTERED WITH 'RPARM' POINTING TO THE LIST OF ADDRESSES AND
* 'RLPEXIT' CONTAINING THE EXIT ADDRESS. IT MAY DISCOVER THAT ITS
* SPACING OPERATIONS HAVE BROUGHT THE PAGE TO HEAD OF FORM, REQUIRING
* THAT THE HEADING AND SUB-HEADING LINES BE PRINTED. WHEN THIS OCCURS,
* IT BRANCHES TO 'HEADPRNT', WHICH SAVES 'RPARM' AND 'RLPEXIT' AND
* REENTERS THIS ROUTINE WITH AN ADDRESS LIST FOR THE HEADING LINES.
* (WHEN THIS SECOND-LEVEL CALL IS MADE, SWITCH 'NOSKPBIT' IS ON,
* PREVENTING ANY FURTHER PAGE SKIPS AND ELIMINATING THE POSSIBILITY OF
* YET ANOTHER CALL TO 'HEADPRNT'). AFTER THE HEADINGS ARE PRINTED,
* THE ORIGINAL VALUES ARE RETURNED TO 'RPARM' AND 'RLPEXIT' AND
* PROCESSING OF THE LIST OF TEXT LINES PROVIDED BY THE CALLER IS
* CONTINUED.
         SPACE 1
         USING PLDBLOCK,RPLD       TO ADDRESS PLD BLOCKS
LISTPROC L     RPLD,0(RPARM)       LOAD A PLD BLOCK ADDRESS
         SPACE 1
* IF PAGE IS NOW AT HEAD OF FORM, EXECUTE 'HEADPRNT'.
         SPACE 1
         LA    RRET,LISTPROC       EXIT FROM HEADPRNT STARTS AGAIN
         TM    SWITCHES,HOFBIT     SEE IF HEAD-OF-FORM FLAG IS ON
         BO    HEADPRNT            EXIT IF SO
         SPACE 1
* TEST WHETHER WE ARE AT THE FIRST TEXT LINE ON A PAGE, AND, IF SO,
* WHETHER PRE-SPACING IS ALLOWED IN THAT POSITION. IF NOT, BYPASS
* PRE-SPACING ALTOGETHER.
         SPACE 1
         TM    SWITCHES,TXT1BIT    TEST IF FIRST TEXT LINE
         BZ    PRSUBTR             BRANCH IF NOT
         TM    PLDFLAGS,PRHOFBIT   TEST IF ALLOW SKIP AT HOF
         BZ    POSTSP              SKIP PRESPACING IF NOT
         SPACE 1
* DECREMENT THE PAGE BALANCE BY THE AMOUNT TO BE SPACED.
         SPACE 1
PRSUBTR  XR    RSPACE,RSPACE
         IC    RSPACE,PLDSPB       LOAD AMOUNT TO SPACE
         SR    RBAL,RSPACE         DECREMENT PAGE BALANCE
         SPACE 1
* IF SKIPPING IS ALLOWED BY BOTH THE SYSTEM AND THE USER, TEST THE
* BALANCE AND FORCE A PAGE SKIP IF <= ZERO.
         SPACE 1
         TM    SWITCHES,NOSKBIT    TEST IF SYSTEM ALLOWS SKIP
         BO    PREMOVE             BRANCH IF NOT
         TM    PLDFLAGS,PRSKPBIT   TEST IF USER ALLOWS SKIP
         BO    PREMOVE             BRANCH IF NOT
         LTR   RBAL,RBAL           TEST PAGE BALANCE
         BP    PREMOVE             BRANCH IF SOME LINES LEFT
         LA    RSPACE,EJFORCE      FORCE A PAGE SKIP
         SPACE 1
* MOVE THE PAGE THE NUMBER OF LINES IN 'RSPACE'.
         SPACE 1
PREMOVE  BAS   RWA,MOVE            TO PAPER MOVING SUBROUTINE
         SPACE 1
* IF THAT MOVING PUT US AT HEAD-OF-FORM, PRINT THE HEADINGS.
         SPACE 1
         LA    RRET,LISTPROC       EXIT FROM HEADPRNT STARTS AGAIN
         TM    SWITCHES,HOFBIT     TEST HEAD-OF-FORM BIT
         BO    HEADPRNT            EXIT IF AT HEAD
         SPACE 1
* NOW CONSIDER THE SPACING TO BE PERFORMED WHEN THE TEXT OF THE LINE
* IS PRINTED. BEGIN BY COMPUTING THE NEW PAGE BALANCE.
         SPACE 1
POSTSP   XR    RSPACE,RSPACE
         IC    RSPACE,PLDSPA       LOAD AMOUNT TO SPACE AFTER PRINT
         SR    RBAL,RSPACE         COMPUTE NEW PAGE BALANCE
         SPACE 1
* IF THE SYSTEM AND USER BOTH ALLOW SKIPPING, TEST THE PAGE BALANCE,
* AND FORCE A SKIP IF <= ZERO.
         SPACE 1
         TM    SWITCHES,NOSKBIT    TEST IF SYSTEM ALLOWS SKIPPING
         BO    GETPRCC             BRANCH IF NOT
         TM    PLDFLAGS,SPSKPBIT   TEST IF USER ALLOWS SKIPPING
         BO    GETPRCC             BRANCH IF NOT
         LTR   RBAL,RBAL           TEST FOR PAGE END
         BP    GETPRCC             BRANCH IF SOME LINES LEFT
         LA    RSPACE,EJFORCE      FORCE PAGE SKIP
         SPACE 1
* NOW CONSTRUCT THE PRINT LINE IN AN OUTPUT BUFFER. IN THE INTERESTS
* OF SAVING BUFFER SPACE, THE CALLER'S TEXT IS SCANNED FROM THE RIGHT
* TO REDUCE ITS NOMINAL LENGTH BY THE NUMBER OF RIGHT BLANKS. IN THE
* EXTREME CASE THAT IT IS ENTIRELY BLANK, BYPASS PRINTING ALTOGETHER
* AND MERELY SPACE. IF THIS IS TO BE THE FIRST HEADING LINE OF THE
* PAGE ('HD1BIT' SET), SCANNING IS OMITTED, THE RECORD LENGTH IS SET TO
* THE PAGE WIDTH, AND THE DATE, TIME, AND PAGE NUMBER ARE INSERTED.
         SPACE 1
GETPRCC  XR    RWA,RWA
         IC    RWA,PLDLNGTH        LOAD NOMINAL LENGTH OF TEXT
         XR    RWB,RWB
         IC    RWB,PLDOFFST        LOAD LEFT MARGIN OFFSET
         LA    R0,0(RWA,RWB)       LINE LENGTH = TEXT + OFFSET
         CH    R0,PAGWIDTH         TEST AGAINST PAGE WIDTH
         BNH   TSTHD1              BR IF OK
         LA    R1,5                ERROR, LINE TOO LONG
         B     ABEND
TSTHD1   TM    SWITCHES,HD1BIT     TEST IF FIRST HEADING LINE
         BZ    BLNKSCAN            BR IF NOT
         LH    RWB,PAGWIDTH        SET RECORD LENGTH AS PAGE WIDTH
         B     GETBUF              SKIP BLANK SCANNING
         SPACE 1
* SET UP A 'BXH' FOR SCAN. R0 IS INCREMENT, R1 IS COMPARAND, RWA
* VARIABLE.
         SPACE 1
BLNKSCAN LH    R0,=H'-1'           INCREMENT IS MINUS 1
         L     R1,PLDTXTAD-1       LOAD TEXT ADDRESS
         LA    R1,0(R1)            ZERO HIGH-ORDER BYTE
         BCTR  R1,0                DECREMENT BY ONE
         AR    RWA,R1              SET RWA TO RIGHT-MOST TEXT BYTE
         SPACE 1
* SCAN THE LINE, SEARCHING FOR FIRST NON-BLANK. RESULT IS NEW TEXT
* LENGTH IN RWA, WHICH WILL BE ZERO FOR BLANK LINES.
         SPACE 1
BLNKLOOP CLI   0(RWA),C' '         TEST FOR NON-BLANK CHAR
         BNE   BLNKDONE            EXIT WHEN FOUND
         BXH   RWA,R0,BLNKLOOP
BLNKDONE SR    RWA,R1              NOW RWA IS NEW TEXT LENGTH
         BC    13,POSTMOVE         NO PRINTING IF <= 0
         SPACE 1
* NOW ADD OFFSET TO LENGTH OF SURVIVING TEXT TO GET ACTUAL LINE LENGTH.
         SPACE 1
         AR    RWB,RWA             ADD TEXT LENGTH
         SPACE 1
* NOW RWA IS THE LENGTH OF THE CALLER'S TEXT, AND RWB IS THE LENGTH OF
* THE LINE. THE RECORD LENGTH WILL BE FIVE MORE THAT THE LENGTH OF THE
* LINE, TO INCLUDE FORMAT 'V'  AND PRINTER CONTROL CHARACTERS. GET
* A BUFFER OF THE PROPER LENGTH, KEEPING ITS ADDRESS IN R1.
         SPACE 1
GETBUF   LA    RWC,5(RWB)          LOAD LENGTH OF RECORD IN RWC
         STH   RWC,DCBLRECL        PUT LRECL IN DCB FOR PUT CALL
         PUT   PRINTDCB            GET BUFFER ADDRESS IN R1
         ST    R1,CCLAST           SAVE LOCATION OF THIS LINE
         LR    RWD,R1              RWD BECOMES BUFFER BASE REG
         MVI   3(RWD),C' '         CLEAR BUFFER TO BLANKS
         EX    RWB,BLNKMOVE
         SLL   RWC,16              SET UP 4-BYTE 'V' CONTROL FIELD
         ST    RWC,DWORK           CAN'T ASSUME BUFFER ON ANY
         MVC   0(4,RWD),DWORK      BOUNDARY
         SPACE 1
* IF THIS IS THE FIRST HEADING LINE, INSERT DATE AND TIME, AND EDIT
* THE PAGE NUMBER.
         SPACE 1
         TM    SWITCHES,HD1BIT     TEST IF FIRST LINE
         BZ    MOVETEXT            BRANCH IF NOT
         LA    RWC,0(RWB,RWD)      ADDRESS RIGHT END -5
         SH    RWC,=AL2(HLTXTLNG+10-5)  LOCATE PLACE FOR HEADING INFO
         MVC   0(HLTXTLNG,RWC),HLTEXT  INSERT DATE & TIME
         LH    R1,PAGENO           INCREMENT PAGE NUMBER
         LA    R1,1(R1)
         STH   R1,PAGENO
         CVD   R1,DWORK            CONVERT TO DECIMAL
         MVC   HLTXTLNG(10,RWC),=XL10'40404040402020202120'  EDIT CHARS
         LA    R1,HLTXTLNG+9(RWC)  IN CASE SIGNIFIGANCE FORCED
         EDMK  HLTXTLNG+4(6,RWC),DWORK+5  EDIT AND MARK SPOT FOR "PAGE"
         SH    R1,=H'5'
         MVC   0(4,R1),=C'PAGE'    INSERT WORD "PAGE"
         SPACE 1
* PUT PRINTER CONTROL CHARACTER AND CALLER'S TEXT INTO THE BUFFER.
* REGISTER RWA CONTAINS THE LENGTH OF THE TEXT.
         SPACE 1
MOVETEXT BAS   RWB,CCGEN           GO GET CONTROL CHAR
         STC   R0,4(RWD)           INSERT IN BUFFER
         NI    4(RWD),B'11111101'  CHANGE SPACE IMMEDIATE TO WRITE
         XR    RWB,RWB
         IC    RWB,PLDOFFST        LOAD LEFT MARGIN OFFSET
         LA    RWB,5(RWB,RWD)      ADDRESS FOR FIRST TEXT BYTE
         BCTR  RWA,0               DECREMENT LENGTH BY 1 FOR MVC
         L     RWC,PLDTXTAD-1      LOAD ADDRESS OF CALLER'S TEXT
         EX    RWA,MOVEINST        MOVE TEXT
         NI    SWITCHES,255-HD1BIT-TXT1BIT  RESET ONE-SHOT BITS
         SPACE 1
* DECREMENT PRINT LINE LIMIT COUNTER, ABORTING IF IT GOES NEGATIVE.
         SPACE 1
         L     R1,MAXLINES
         S     R1,=F'1'            BCTR WOULD NOT SET COND CODE
         ST    R1,MAXLINES
         BP    POSTMOVE            BRANCH IF POSITIVE
         LA    R1,6                ABORT, TOO MUCH OUTPUT
         B     ABEND
         SPACE 1
* DO ANY ADDITIONAL SPACING NECESSARY. AMOUNT STILL IN 'RSPACE'.
         SPACE 1
POSTMOVE BAS   RWA,MOVE            CALL PAPER MOVING SUBROUTINE
         SPACE 1
* NOW WE ARE FINISHED WITH THAT LINE. IF THE ADDRESS WHICH POINTED TO
* ITS PLD WAS NEGATIVE, THE LIST IS EXHAUSTED AND THE ROUTINE EXITS.
* OTHERWISE, INCREMENT THE LIST POINTER BY 4 AND START THE NEXT ONE.
         SPACE 1
         LTR   RPLD,RPLD           TEST CURRENT PLD ADDRESS
         BCR   4,RLPEXIT           EXIT IF NEGATIVE
         LA    RPARM,4(RPARM)      INCREMENT LIST POINTER
         B     LISTPROC            TO PROCESS NEXT LINE
         SPACE 1
* EXECUTED INSTRUCTIONS :
         SPACE 1
BLNKMOVE MVC   4(0,RWD),3(RWD)     SPREAD BLANKS IN OUTPUT BUFFER
MOVEINST MVC   0(0,RWB),0(RWC)     MOVE CALLER'S TEXT TO OUTPUT BUF
         SPACE 1
         DROP  RPLD
         EJECT
************
* HEADPRNT *
************
         SPACE 1
* ENTER THIS ROUTINE WHEN IT IS DISCOVERED THAT WE ARE AT
* HEAD-OF-FORM AND ARE ABOUT TO PRINT A LINE. SAVE THE REGISTERS
* DEFINING THE STATE OF 'LISTPROC' AND CALL IT WITH A LIST SPECIFYING
* THE HEADING AND SUB-HEADING LINES.
         SPACE 1
HEADPRNT ST    RRET,HPREXIT        SAVE RETURN ADDRESS
         STM   RLPEXIT,RPARM,HPRSAVE  STORE LISTPROC REGISTERS
         SPACE 1
* RESET HEAD-OF-FORM BIT AND SET NO-SKIP BIT TO SUPPRESS FORM SKIPS
* AND HEADING LINE BIT TO INCLUDE THE PAGE NUMBER. RESET PAGE BALANCE.
         SPACE 1
         NI    SWITCHES,255-HOFBIT  RESET HOF BIT
         OI    SWITCHES,HD1BIT+NOSKBIT  SET HEADING AND NOSKIP BITS
         LH    RBAL,PAGELNG        RESET PAGE BALANCE
         SPACE 1
* LOAD ADDRESS OF HEADINGS LIST AND CALL LIST PROCESSOR.
         SPACE 1
         L     RPARM,HEADLIST      ADDRESS OF HEADINGS LIST
         BAS   RLPEXIT,LISTPROC    CALL PROCESSING ROUTINE
         SPACE 1
* AFTER PRINTING THE HEADINGS, TURN SYSTEM SKIP-SUPPRESSION BIT OFF
* AND SET 'TXT1BIT' TO INDICATE THAT THERE ARE NO TEXT LINES ON THE
* PAGE YET. THEN RESTORE THE 'LISTPROC' REGISTERS AND RETURN TO
* PROCESSING THE CALLER'S LINES.
         SPACE 1
         NI    SWITCHES,255-NOSKBIT  RESET NO-SKIP BIT
         OI    SWITCHES,TXT1BIT    SET FIRST-TEXT-LINE BIT
         LM    RLPEXIT,RPARM,HPRSAVE  RESTORE LISTPROC REGISTERS
         L     RRET,HPREXIT        RECOVER EXIT ADDRESS AND
         BR    RRET                RETURN TO CALLER
         EJECT
***********************************
* MOVE - VERTICAL SPACING ROUTINE *
***********************************
         SPACE 1
* SUBROUTINE TO MOVE THE PAPER BY THE NUMBER OF LINES IN REGISTER
* 'RSPACE'. RETURN ADDRESS IS IN 'RWA'. IF THE CONTROL CHARACTER FOR
* THE LAST LINE SPACED 0 LINES, REPLACE IT WITH A NEW ONE BEFORE
* GENERATING ANY EXTRA LINES.
         SPACE 1
MOVE     LTR   RSPACE,RSPACE       TEST NUMBER OF LINES TO BE MOVED
         BCR   13,RWA              EXIT IF <= ZERO
         TM    SWITCHES,SP0BIT     DID PREVIOUS LINE SPACE 0?
         BZ    PREVNOT0            BRANCH IF NOT
         L     R1,CCLAST           GET ADDRESS OF PREVIOUS LINE
         BAS   RWB,CCGEN           GENERATE NEW CONTROL CHAR
         NI    4(R1),X'02'         TEST WRITE/SPACE BIT IN OLD CC
         STC   R0,4(R1)            STORE NEW CC IN PREVIOUS LINE
         BNZ   *+8                 BR IF WRITE/SPACE BIT WAS ON
         NI    4(R1),255-X'02'     TURN WRITE/SPACE BIT OFF
PREVNOT0 MVC   DCBLRECL(2),MOVELINE  SET LOGICAL RECORD LENGTH IN DCB
         PUT   PRINTDCB            GET BUFFER ADDRESS IN R1
         ST    R1,CCLAST           SAVE LOCATION OF THIS LINE
         MVC   0(6,R1),MOVELINE    INSERT FORMAT 'V' CONTROL RECORD
         BAS   RWB,CCGEN           GET PRINT CONTROL CHAR IN R0
         STC   R0,4(R1)            INSERT IN RECORD
         B     MOVE                LOOP UNTIL 'RSPACE' IS ZERO
         SPACE 1
MOVELINE DC    XL6'000600000340'   FORMAT 'V' CONTROL RECORD
         EJECT
*****************************************
* CCGEN - GENERATE PRINTER CONTROL CHAR *
*****************************************
         SPACE 1
* THIS ROUTINE GENERATES A PRINTER CONTROL CHARACTER TO SPACE OR EJECT
* IMMEDIATELY (WITHOUT PRINTING). ENTER WITH THE TOTAL NUMBER OF
* LINES TO BE MOVED IN 'RSPACE' AND RETURN ADDRESS IN 'RWB'. EXITS
* WITH THE CONTROL CHARACTER IN BITS 24-31 OF REGISTER 0 AND THE COUNT
* IN 'RSPACE' DECREMENTED BY THE AMOUNT WHICH THE CHARACTER WILL SPACE.
* A SPACE VALUE OF 255 OR GREATER WILL GENERATE AN EJECT CONTROL
* CHARACTER, SET 'RSPACE' AND 'RBAL' TO ZERO, AND SET THE HEAD-OF-FORM
* BIT. NOTE : MUST NOT USE R1.
         SPACE 1
CCGEN    NI    SWITCHES,255-SP0BIT  RESET 'PREVIOUS SPACED 0' BIT
         CH    RSPACE,=AL2(EJFORCE)  TEST FOR EJECT REQUEST
         BL    CCNOEJ              BRANCH IF NOT
         LA    R0,X'8B'            LOAD 'SKIP TO CHAN 1' CC
         OI    SWITCHES,HOFBIT     SET HEAD-OF-PAGE BIT
         XR    RBAL,RBAL           SET PAGE BALANCE TO ZERO
         XR    RSPACE,RSPACE       SET REMAINING SPACING TO ZERO
         BR    RWB                 EXIT
CCNOEJ   LR    R15,RSPACE          LOAD WORK REGISTER
         CH    RSPACE,=H'3'        TEST IF OVER THREE LINES
         BNH   CCOK                BR IF <= 3
         LA    R15,3               SET 3, MAXIMUM FOR 1 OPERATION
CCOK     SR    RSPACE,R15          DECR RSPACE BY AMOUNT SPACED
         SLL   R15,3               PUT AMOUNT IN BITS 2-4 OF BYTE
         LA    R0,X'03'(R15)       ADD COMMAND BITS AND PUT IN R0
         LTR   R15,R15             TEST FOR ZERO SPACING
         BCR   7,RWB               EXIT IF NOT ZERO
         OI    SWITCHES,SP0BIT     SET 'LINE SPACED 0' BIT
         BR    RWB                 EXIT
         EJECT
***********************
* SYNAD ERROR ROUTINE *
***********************
         SPACE 1
* IF A PERMANENT I/O ERROR OCCURS, TYPE A DIAGNOSTIC MESSAGE AND ABORT.
         SPACE 1
SYNAD    SYNADAF ACSMETH=QSAM      GET ERROR MESSAGE FROM O/S
         LR    RWA,R1              SAVE MESSAGE ADDRESS
         GETMAIN R,LV=128          GET BUFFER FOR MESSAGE
         MVC   0(LIOMSG,R1),IOMSG  INSERT MESSAGE BEGINNING
         MVC   LIOMSG(79,R1),49(RWA)  ADD TEXT FROM O/S
         LR    RWA,R1              SAVE MESSAGE ADDRESS
         SYNADRLS                  FREE O/S MESSAGE
         WTO   MF=(E,(RWA))        TYPE MESSAGE ON CONSOLE
         LA    R1,7                LOAD ERROR CODE
         B     ABEND               TO ABORT AND DUMP
         SPACE 1
IOMSG    DC    AL2(LIOMSG+78,0)    FORMAT V CONTROL FIELD
         DC    C'XPRNTSUB I/O ERROR'
LIOMSG   EQU   *-IOMSG
         EJECT
**************************
* CONSTANTS AND LITERALS *
**************************
         SPACE 1
* DUMMY PARAMETER LIST AND PLD FOR USE WHEN NO HEADING IS PROVIDED.
         SPACE 1
NOHDLIST DS    0F
         DC    XL1'80'             VL LIST BIT
         DC    AL3(NOHDPLD)        ADDRESS OF PLD BELOW
NOHDPLD  DS    0F                  ALIGN ON FULL-WORD BOUNDARY
         DC    BL1'00010000'       OPTION BITS
         DC    AL3(BLANK1)         PRINT TEXT ADDRESS
         DC    AL1(1)              PRINT TEXT LENGTH
         DC    AL1(0)              LEFT MARGIN INDENTATION
         DC    AL1(0)              SPACING BEFORE PRINTING
         DC    AL1(3)              SPACING AFTER PRINTING
         SPACE 1
* CONSTANTS TO INITIALIZE PARAMETERS AND SWITCHES WHEN 'OPEN' CALL IS
* RECEIVED. THE ORDER MUST MATCH THE 'PAPARMS' LIST IN THE WORK AREA.
         SPACE 1
DEFAULTS DS    0F
         DC    A(NOHDLIST)         PAGE HEADING PARM LIST ADDRESS
         DC    F'1000000'          MAXIMUM NUMBER OF OUTPUT LINES
         DC    H'132'              PAGE WIDTH
         DC    H'57'               PAGE LENGTH            ***TRW***
         DC    H'0'                PAGE NUMBER (-1)
         DC    H'0'                PAGE BALANCE
         DC    X'00'               SWITCHES
DEFSIZE  EQU   *-DEFAULTS
         SPACE 1
* MISCELLANEOUS CONSTANTS :
         SPACE 1
BLANK1   DC    C' '                TEXT OF DUMMY HEADING LINE
         SPACE 1
         LTORG
         EJECT
*******************
* WORK AREA DSECT *
*******************
         SPACE 1
* THIS DUMMY SECTION DEFINES THE WORK AREA PROVIDED BY THE PROBLEM
* PROGRAM FOR EACH DATA SET. ITS ADDRESS IS PASSED IN PARAMETER
* REGISTER 0 AT EACH CALL.
         SPACE 1
WORKAREA DSECT
         SPACE 1
* STANDARD 18-WORD SAVE AREA :
         SPACE 1
SAVEAREA DS    18F
         SPACE 1
* DATA CONTROL BLOCK FOR PRINTER DATA SET :
         SPACE 1
         PRINT NOGEN
PRINTDCB DCB   DDNAME=SYSPRINT,                                        X
               DSORG=PS,                                               X
               RECFM=VBM,                                              X
               LRECL=137,                                              X
               MACRF=PL,                                               X
               BFTEK=S,                                                X
               BUFNO=2,                                                X
               EROPT=ACC
         PRINT GEN
         SPACE 1
DCBEXLST EQU   PRINTDCB+37         ADDRESS OF EXIT LIST
DCBOFLGS EQU   PRINTDCB+48         CONTAINS 'OPENED SUCCESSFULLY' BIT
DCBDDNAM EQU   PRINTDCB+40         DDNAME (WHEN CLOSED)
DCBSYNAD EQU   PRINTDCB+57         ADDRESS OF SYNCHRONOUS ERROR ROUTINE
DCBBLKSZ EQU   PRINTDCB+62         BLOCK SIZE
DCBLRECL EQU   PRINTDCB+82         LOGICAL RECORD LENGTH
         SPACE 1
* ADDRESS OF LAST BUFFER OBTAINED BY "PUT" MACRO :
         SPACE 1
CCLAST   DS    1A
         SPACE 1
         DS    1F                  SPARE FULL WORD
         SPACE 1
* TEMPORARY WORK CELLS :
         SPACE 1
DWORK    DS    1D                  DOUBLE-WORD WORK CELL
HPREXIT  DS    1F                  HEADPRNT EXIT SAVE
HPRSAVE  DS    2F                  HEADPRNT REGISTER STORAGE
         SPACE 1
* PARAMETERS AND SWITCHES WHICH DEFINE THE PAGE SIZE AND STATUS.
* SEQUENCE MUST MATCH THAT IN 'DEFAULTS', WHICH INITIALIZES THEM.
         SPACE 1
PAPARMS  DS    0F
HEADLIST DS    1A                  PAGE HEADING PARM LIST ADDRESS
MAXLINES DS    1F                  MAXIMUM NUMBER OF OUTPUT LINES
PAGWIDTH DS    1H                  PAGE WIDTH
PAGELNG  DS    1H                  PAGE LENGTH
PAGENO   DS    1H                  PAGE NUMBER OF CURRENT PAGE
PAGEBAL  DS    1H                  PAGE BALANCE
SWITCHES DS    1X                  SWITCHES
         SPACE 1
* STORAGE FOR DATE AND TIME PORTION OF PAGE HEADING :
         SPACE 1
HLTXTLNG EQU   24
HLTEXT   DS    CL(HLTXTLNG)
HLDAY    EQU   HLTEXT
HLTIME   EQU   HLTEXT+7
HLDATE   EQU   HLTEXT+16
         EJECT
*************************
* PARAMETER LIST DSECTS *
*************************
         SPACE 1
* PARAMETER LIST FOR 'EJECT' CALL :
         SPACE 1
EJPARM   DSECT
         SPACE 1
EJCOND   DS    1X                  CONDITIONAL MASK AND SWITCHES
EJQUAN   DS    1X                  CONDITIONAL TEST QUANTITY
         SPACE 1
EJATHOF  EQU   X'01'               MASK FOR 'EJCOND'
         SPACE 1
* PARAMETER LIST FOR 'SPACE' CALL :
         SPACE 1
SPPARM   DSECT
         SPACE 1
SPCOND   DS    1X                  CONDITIONAL BITS
SPQUAN   DS    1X                  NUMBER OF LINES TO SPACE
         SPACE 1
SPATHOF  EQU   X'01'               MASK FOR 'SPCOND'
SPNOEJ   EQU   X'02'               MASK FOR 'SPCOND'
         SPACE 1
* PARAMETER LIST FOR 'OPEN' AND 'MODIFY' CALLS :
         SPACE 1
OMPARM   DSECT
         SPACE 1
OMMAXLIN DS    1F                  MAXIMUM NUMBER OF OUTPUT LINES
OMPAGENO DS    1H                  INITIAL PAGE NUMBER
OMPAGWID DS    1X                  PAGE WIDTH
OMPAGLNG DS    1X                  PAGE LENGTH
OMTIMEAD DS    1A                  ADDRESS OF TIME
OMDATEAD DS    1A                  ADDRESS OF DATE
OMDDNAME DS    CL8                 DDNAME (OPEN CALL ONLY)
         EJECT
*************
* PLD DSECT *
*************
         SPACE 1
* PRINT LINE DESCRIPTOR DUMMY SECTION :
         SPACE 1
*        ******************************************************
*        *            *                                       *
*        *   OPTION   *                                       *
*        *    BITS    *             TEXT ADDRESS              *
*        *            *                                       *
*        ******************************************************
*        *            *            *            *             *
*        *    TEXT    *    TEXT    *   SPACE    *    SPACE    *
*        *   LENGTH   *   OFFSET   *   BEFORE   *    AFTER    *
*        *            *            *            *             *
*        ******************************************************
         SPACE 1
PLDBLOCK DSECT
         SPACE 1
PLDFLAGS DS    1X                  OPTION BITS
PLDTXTAD DS    AL3                 TEXT ADDRESS
PLDLNGTH DS    1X                  TEXT LENGTH
PLDOFFST DS    1X                  TEXT OFFSET, OR LEFT MARGIN
PLDSPB   DS    1X                  AMOUNT TO SPACE BEFORE PRINTING
PLDSPA   DS    1X                  AMOUNT TO SPACE AFTER PRINTING
         SPACE 1
PRHOFBIT EQU   B'00000010'         MASK FOR 'PLDFLAGS'
PRSKPBIT EQU   B'00000001'         MASK FOR 'PLDFLAGS'
SPSKPBIT EQU   B'00010000'         MASK FOR 'PLDFLAGS'
         TITLE 'DATE EDITING ROUTINE "XDATEDIT"'
* STATUS : VERSION 0, MOD 2, 5 OCTOBER 1967.
         SPACE 1
* FUNCTION/OPERATION : EDITS A PACKED DECIMAL DATE IN YEAR-DAY FORM TO
*        EBCDIC MONTH-DAY-YEAR FORM. CORRECTS FOR LEAP YEARS AND
*        FOR THE TURN OF A CENTURY.
         SPACE 1
* ENTRY POINTS : ENTER AT "XDATEDIT" VIA BASR 14,15 WITH REG 13 SET
*        TO A STANDARD 18-WORD SAVE AREA. REGISTER 1 POINTS TO A
*        PARAMETER LIST CONTAINING ONE ADDRESS.
         SPACE 1
* INPUT : THE ADDRESS IN THE PARAMETER LIST IS THAT OF AN ALIGNED
*        DOUBLE WORD CONTAINING THE ARGUMENT IN PACKED DECIMAL AS :
*        X'0000000000YYDDD+'.
         SPACE 1
* OUTPUT : THE RESULT IS RETURNED IN THE SAME DOUBLE WORD IN EBCDIC AS
*        C'MM/DD/YY'.
         SPACE 1
* DATA SETS : NONE.
         SPACE 1
* EXTERNAL ROUTINES : NONE.
         SPACE 1
* EXITS-NORMAL : RETURN VIA REG 14 WITH RETURN CODE 0 IN REG 15.
         SPACE 1
* EXITS-ERROR : IF THE DAY NUMBER IS ZERO OR EXCEEDS THE MAXIMUM VALUE
*        APPROPRIATE TO THE YEAR, RETURN VIA REG 14 WITH RETURN CODE 4
*        IN REG 15 AND THE RESULT FIELD SET TO C' YY.DDD '.
         SPACE 1
* TABLES/WORK AREAS : NONE.
         SPACE 1
* ATTRIBUTES : REENTRANT, READ ONLY.
         SPACE 1
* NOTES : NONE.
         EJECT
* DUMMY SECTION TO DEFINE THE ARGUMENT AND RETURN FIELD.
         SPACE 1
DUMMY    DSECT
DWORD    DS    1D
         SPACE 2
* BEGIN CONTROL SECTION HERE. DEFINE REGISTER TAGS.
         SPACE 1
XDATEDIT CSECT
         SPACE 1
RDSECT   EQU   11                  BASE REG FOR ARGUMENT/RESULT
RPARMD   EQU   1                   PARAMETER LIST POINTER
RARGSAVE EQU   2                   TO SAVE ORIGINAL PACKED ARGUMENT
RMONTH   EQU   3
RDAY     EQU   4                   RDAY AND RYEAR ARE AN EVEN/ODD
RYEAR    EQU   5                   PAIR FOR DIVISION
RWORK    EQU   6
RLIST    EQU   7
         SPACE 2
* ENTER HERE. SAVE GENERAL REGISTERS AND SET UP BASE REGISTERS.
         SPACE 1
         SAVE  (14,12),,*
         BASR  RBASE,0
         USING *,RBASE
         L     RDSECT,0(RPARMD)    LOAD ARGUMENT ADDRESS
         USING DWORD,RDSECT
         EJECT
* CONVERT YEAR AND DAY TO BINARY, AND SEPARATE BY DIVISION.
         SPACE 1
         MVI   DWORD,X'00'         CLEAR HIGH DECIMAL DIGITS
         MVC   DWORD+1(4),DWORD    IN ARG TO ZEROS
         OI    DWORD+7,X'0F'       FORCE PLUS SIGN
         L     RARGSAVE,DWORD+4    SAVE ARGUMENT FOR 'BADDATE'
         CVB   RYEAR,DWORD         CONVERT YYDDD TO BINARY
         XR    RDAY,RDAY           CLEAR HIGH-ORDER DIVIDEND
         D     RDAY,F1000          QUOTIENT=YEAR; REMAINDER=DAY
         SPACE 1
* CHECK FOR LEAP YEAR, AND LOAD RLIST WITH BASE ADDRESS OF APPROPRIATE
* LIST OF MONTH SIZES.
         SPACE 1
DAYOK    LA    RLIST,STDLIST       POINT RLIST TO STANDARD MONTHS
         LTR   RWORK,RYEAR         LOAD BINARY YEAR NUMBER
         BZ    NOTLEAP             BR IF TURN OF CENTURY
         N     RWORK,=F'3'         TEST LOW TWO BITS
         BC    4,NOTLEAP           BR IF NON-ZERO
         LA    RLIST,LPYLIST       POINT RLIST TO LEAP-YEAR MONTHS
         SPACE 1
* TEST DAY NUMBER AGAINST ZERO AND THE UPPER LIMIT DETERMINED BY
* THE YEAR NUMBER.
         SPACE 1
NOTLEAP  LTR   RDAY,RDAY           TEST FOR ZERO
         BZ    BADDATE             BR IF SO
         CH    RDAY,0(0,RLIST)     TEST FOR UPPER LIMIT
         BH    BADDATE             BR IF TOO LARGE
         SPACE 1
* REDUCE JULIAN DAY TO DAY-OF-MONTH, ACCUMULATING MONTH NUMBER.
         SPACE 1
         LA    RMONTH,1            INITIAL MONTH NUMBER
         XR    RWORK,RWORK
DAYLOOP  IC    RWORK,1(RMONTH,RLIST)  LENGTH OF MONTH INTO RWORK
         CR    RDAY,RWORK          TEST IF DAY IN THIS MONTH
         BNH   DAYDONE             BR IF DAY LESS THAN MONTH SIZE
         SR    RDAY,RWORK          REDUCE DAY BY LENGTH OF MONTH
         LA    RMONTH,1(RMONTH)    INCREMENT MONTH
         B     DAYLOOP
         SPACE 1
* COMBINE MONTH, DAY, AND YEAR IN BINARY IN ONE REGISTER, MULTIPLYING
* EACH BY A FACTOR TO PLACE IT PROPERLY IN THE DECIMAL RESULT.
* THE TRICK IS THAT 1000(1000(MONTH)+DAY)+YEAR GIVES MM0DD0YY WHEN
* CONVERTED TO DECIMAL. AFTER UNPACKING, THE ZEROS ARE REPLACED BY
* SLASHES.
         SPACE 1
DAYDONE  MH    RMONTH,H1000
         AR    RMONTH,RDAY
         MH    RMONTH,H1000
         AR    RMONTH,RYEAR
         CVD   RMONTH,DWORD
         MVC   DWORD(5),DWORD+3    MOVE OVER FOR UNPACKING
         UNPK  DWORD(8),DWORD(5)   CONVERT TO ALPHA
         OI    DWORD+7,X'F0'       COVER UP SIGN
         MVI   DWORD+2,C'/'        INSERT SLASHES
         MVI   DWORD+5,C'/'
         XR    R15,R15             SET NORMAL RETURN CODE OF 0
EXITD    RETURN  (14,12),T,RC=(15)  RETURN TO CALLER
         SPACE 1
* FOR ARGUMENTS WHOSE DAY NUMBER IS ZERO OR TOO LARGE, RETURN IN
* 'DWORD' THE EDITED VALUE  C' YY.DDD ' AND SET A RETURN CODE OF 4.
         SPACE 1
BADDATE  ST    RARGSAVE,DWORD      RESTORE ORIGINAL PACKED ARGUMENT
         UNPK  DWORD+2(5),DWORD+1(3)  UNPACK INTO ALPHA
         MVC   DWORD+1(2),DWORD+2  SHIFT YEAR 1 LEFT
         MVI   DWORD,C' '          APPLY COSMETICS
         MVI   DWORD+3,C'.'
         MVI   DWORD+7,C' '
         LA    R15,4               SET RETURN CODE
         B     EXITD
         EJECT
* LISTS OF MONTH SIZES FOR STANDARD AND LEAP YEARS :
         SPACE 1
STDLIST  DC    H'365'              DAY LIMIT FOR STANDARD YEARS
         DC    AL1(31)
         DC    AL1(28)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         SPACE 1
LPYLIST  DC    H'366'              DAY LIMIT FOR LEAP YEARS
         DC    AL1(31)
         DC    AL1(29)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         DC    AL1(30)
         DC    AL1(31)
         SPACE 1
F1000    DC    F'1000'
H1000    EQU   F1000+2
         SPACE 1
         LTORG
