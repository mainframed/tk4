SETCLOCK TITLE '-- AUTOMATIC CLOCK SYNCHRONIZATION BETWEEN CPU''S --'
***********************************************************************
**                                                                   **
**       ------------------ S E T C L O C K ------------------       **
**                                                                   **
**       "AUTOMATIC CLOCK SYNCHRONISATION BETWEEN CPU'S"             **
**                                                                   **
**             THIS MODULE HAS BEEN WRITTEN TO PROVIDE A MEAN        **
**             BY WHICH DIFFERENT CPU'S WILL BE SET TO THE SAME      **
**             TIME-OF-DAY CLOCK VALUES.                             **
**                                                                   **
**                               AUTHOR : LOUIS LABRECHE, I.S.T.     **
**                                        JUNE 1980                  **
**                                                                   **
**-------------------------------------------------------------------**
**       LOG HERE ALL SIGNIFICANT MODIFICATION                       **
**-------------------------------------------------------------------**
**  DATE    ×   DESCRIPTION                         × IDENTIFICATION **
**----------×---------------------------------------×----------------**
** 81-04-06 ×   IMPLEMENT DISCREPANCY VALIDATION.   ×                **
**          ×   HIGHER THAN 15 MINUTES, SEND A      ×      V1.01     **
**          ×   WARNING MESSAGE TO OPERATOR.        ×                **
**          ×                        L. LABRECHE    ×                **
**----------×---------------------------------------×----------------**
** 81-04-06 ×   ISSUE A WAIT MACRO WHEN LOOPING     ×                **
**          ×   TO GET CHECKPOINT RECORD. WAIT TIME ×      V1.02     **
**          ×   SHOULD BE 'SEEK*NCPU'.              ×                **
**          ×                        L. LABRECHE    ×                **
**----------×---------------------------------------×----------------**
** 81-04-06 ×   MOVE "CPU SET" INDICATOR ONLY AFTER ×                **
**          ×   CPU CLOCK HAD ACTUALLY BEEN SET.    ×      V1.03     **
**          ×                        L. LABRECHE    ×                **
**----------×---------------------------------------×----------------**
** 81-04-07 ×   IF RESET IS NOT SPECIFIED, MAXIMUM  ×                **
**          ×   NUMBER OF CPU'S WILL BE READ FROM   ×      V1.04     **
**          ×   CHECKPOINT, AND WILL BE EQUAL TO    ×                **
**          ×   LAST NUMBER OF ACTIVE CPU'S.        ×                **
**          ×                        L. LABRECHE    ×                **
**----------×---------------------------------------×----------------**
** 81-11-04 ×   PARMLIB DATA-SET IMPLEMENTATION.    ×                **
**          ×                        L. LABRECHE    ×                **
**----------×---------------------------------------×----------------**
** 82-02-19 ×   CLARIFICATION OF SOME COMMENTS AND  ×                **
**          ×   ADDITION OF SOME MACROS TO AID IN   ×                **
**          ×   INSTALLATION TAILORING.             ×                **
**          ×                        P. FOSTER      ×                **
**----------×---------------------------------------×----------------**
         EJECT
**----------×---------------------------------------×----------------**
** 85-04-15 ×   TSO (TPUT) AUTO-RECOGNITION.        ×      -EU-      **
**          ×   SYNCHRONIZATION METHOD SELECTION.   ×                **
**          ×   APPLY "CVTTZ" TO CPU CLOCK VALUE.   ×                **
**          ×                        P.A. MOINIL    ×                **
**----------×---------------------------------------×----------------**
** 85-10-01 ×   OPTION TO SNAP-DUMP ANY DATA AREAS  ×      -EU-      **
**          ×   (DEBUG AID) IF 'SYSSNAP' DD-NAME    ×                **
**          ×   FILE IS PRESENT.                    ×                **
**          ×                        P.A. MOINIL    ×                **
***********************************************************************
         EJECT
***********************************************************************
**                                                                   **
**       DESCRIPTION :                                               **
**       -------------                                               **
**           THIS PROGRAM IS INITIATED AS A STARTED TASK ON EACH     **
**       CPU IN A COMPLEX FOR WHICH TOD CLOCK SYNCHRONIZATION IS     **
**       DESIRED. THIS SHOULD NORMALLY BE AT IPL TIME, SO THAT       **
**       THE MODIFICATION OF TOD CLOCK VALUES DO NOT IMPACT SMF      **
**       DATA RECORDING. ONCE STARTED, THE PROGRAM WILL REMAIN       **
**       ACTIVE UNTIL THE TOD CLOCK OF ITS HOST SYSTEM HAS BEEN      **
**       SYNCHRONIZED WITH THOSE OF ALL ITS PARTNERS.                **
**                                                                   **
**           THE INFORMATION IS TRANSMITTED BETWEEN CPU'S VIA        **
**       A "DASD" DEVICE, AND A CHECKPOINT RECORD IS USED TO         **
**       TRANSFER DATA. A LOGICAL LOCK IS USED TO DETERMINE IF       **
**       THE CHECKPOINT IS HELD BY ANY CPU.                          **
**                                                                   **
**           THE ALGORITHM USED TO SYNCHRONIZE THE CLOCKS IS THE     **
**       FOLLOWING :                                                 **
**       --  WHEN A SYSTEM REQUESTS THE TIME TO BE SYNCHRONIZED,     **
**           IT ASKS FOR A "SYSTEM TRACKING" REQUEST ON THE DASD     **
**           RECORD.                                                 **
**       --  FROM THAT MOMENT, EACH "SET CLOCK" JOB WILL ACCESS      **
**           THE CHECKPOINT AND EXPECT TO COMMUNICATE WITH EACH      **
**           CPU SPECIFIED BY "PARMLIB", UNTIL ALL OF THE            **
**           ACTIVE CPU'S KNOW THAT A TIME SYNCHRONIZATION           **
**           WILL BE PERFORMED (ACCESS SHOULD BE DONE, SAY ONCE      **
**           EACH 5 SECONDS) : THIS IS CALLED THE "TRACK" STATE.     **
**       --  ONCE ALL THE ACTIVE CPU'S ARE IN THE "TRACK" STATE,     **
**           THE LAST ONE INITIATES A REQUEST FOR ALL CPU'S TO       **
**           ENTER THE LOCK STATE. ONCE IN THIS STATE, EACH CPU      **
**           WILL STOP "TRACK WAITING" AND WAIT FOR A VERY SHORT     **
**           PERIOD OF TIME (2 TIMES THE "SEEK TIME", MULTIPLIED     **
**           BY THE NUMBER OF ACTIVE CPUS) UNTIL THE LAST ONE HAS    **
**           OBTAINED THE "LOCK" STATE.                              **
**       --  WHEN THE LAST ONE IS LOCKED, EACH CPU WILL THEN         **
**           WRITE IT'S CLOCK TO THE CHECKPOINT RECORD. THIS IS      **
**           DONE TO DETERMINE WHICH CPU HAS THE BASE CLOCK          **
**           VALUE AND WHAT DISCREPANCIES EXIST BETWEEN THE          **
**           VARIOUS CLOCK VALUES.                                   **
**       --  WHEN EACH CPU HAS WRITTEN ITS OWN CLOCK VALUE TO THE    **
**           RECORD, A REQUEST IS THEN MADE TO SET THE TIME.         **
**       --  FROM THAT MOMENT, EACH CPU THAT READS THE RECORD        **
**           WILL ISSUE A "SET CLOCK" INSTRUCTION ACCORDING TO       **
**           THE "NORMALIZED" TIME OF THE "SET" REQUEST. NORMALI-    **
**           ZATION IS DONE BY ADJUST THE CLOCK WITH THE CALCULATED  **
**           TIME DISCREPANCY AND THE SEEK TIME MULTIPLIED BY        **
**           THE SEQUENCE OF THE "SET" CPU. THE BASE VALUE FOR       **
**           THE "NORMALIZATION" IS THE VALUE OF THE TOD CLOCK       **
**           OF THE CPU IN THE COMPLEX WHICH WAS SET AS BASE CPU     **
**           BY THE SYNCHRONIZATION METHOD SELECTED.                 **
**                                                                   **
***********************************************************************
         EJECT
***********************************************************************
**                                                                   **
**       PARAMETERS :                                                **
**       ------------                                                **
**           THE PARAMETERS ARE PASSED TO THIS PROGRAM BY            **
**       ALLOCATING A DATA-SET POINTED BY DDNAME "SYSPARM"           **
**       IT CONTAINS THE FOLLOWING SPECIFICATIONS :                  **
**                                                                   **
**           LONG_WAIT       = SSSS          WHERE SSSS              **
**           TRACK_WAIT      = SSSS            IS THE TIME           **
**           SEEK_TIME       = SSSS              IN 100TH OF         **
**           DISCONNECT_TIME = SSSS                A SECOND          **
**           MAXCPU          = NN            WHERE N...              **
**           SYNCH_METHOD    = NN              IS A              -EU-**
**           SNAP_ID         = NNN               NUMERICAL       -EU-**
**           SNAP_IDS        = (N,NN,NNN)          VALUE         -EU-**
**                                                                   **
**                                                                   **
**       "LONG_WAIT"   IS THE INTERVAL OF TIME THE PROGRAM SHOULD    **
**                     WAIT BEFORE CHECKING IF ANY "SYSTEM TRACKING" **
**                     REQUEST IS MADE (SAY 300 SECONDS).            **
**                                                                   **
**       "TRACK_WAIT"  IS THE INTERVAL OF TIME THE PROGRAM SHOULD    **
**                     WAIT ONCE IT HAS DETECTED A "SYSTEM TRACKING" **
**                     REQUEST. AT THIS TIME, IT CHECKS IF ALL CPU'S **
**                     OBTAINED THAT STATE (SAY 5 SECONDS).          **
**                                                                   **
**       "SEEK_TIME"   IS THE AVERAGE INTERVAL OF TIME REQUIRED TO   **
**                     COMPLETE AN I/O ON THE CHECKPOINT DATA-SET.   **
**                                                                   **
**       "DISCONNECT_TIME" IS THE PERIOD OF TIME WE SHOULD WAIT      **
**                     BEFORE CONCLUDING THAT ALL THE OTHER CPUS     **
**                     THAT DID NOT REACH THE "TRACK STATE" ARE      **
**                     NOT ACTIVE (SAY 500 SECONDS). MUST BE         **
**                     HIGHER THAN "LONG WAIT".                      **
**                                                                   **
**       "MAXCPU"      IS THE MAXIMUM NUMBER OF CPU'S TO BE          **
**                     SYNCHRONIZED TOGETHER.                        **
**                                                               -EU-**
**       "SYNCH_METHOD" IS THE SYNCHRONIZATION METHOD NUMBER TO BE   **
**                     USED : 1 = THE CPU WHICH RESET CHECKPOINT     **
**                                SET THE BASE CLOCK VALUE.          **
**                      DEFAULT = THE CPU WHICH HAS THE HIGHEST      **
**                                CLOCK VALUE IN THE COMPLEX.        **
**                                                               -EU-**
**       "SNAP_ID"     IS THE SNAP-DUMP ID'S (0-255) TO SET ACTIVE   **
**       "SNAP_IDS"    (NEEDS "SYSSNAP" FILE ALLOCATED).             **
**                                                                   **
***********************************************************************
         EJECT
***********************************************************************
**                                                                   **
**       NOTES :                                                     **
**       -------                                                     **
**           THE "DASD" DEVICE IS POINTED TO BY THE DDNAME           **
**       "SYSCKPT". ONE TRACK IS A SUFFICENT ALLOCATION.             **
**                                                                   **
**           CPU IDENTIFIER IS TAKEN FROM "SMCA" AND THE LAST        **
**       CHARACTER IS USED TO DETERMINE ENTRY OFFSET IN CHECKPOINT.  **
**       SEE THE DESCRIPTION OF OPERANDS FOR THE SETCGEN MACRO FOR   **
**       AN EXPLANATION OF INSTALLATION TAILORING OPTIONS. THE       **
**       SETCLOCK PROGRAM ASSUMES THAT THE SMF SYSTEM ID FOR EACH    **
**       SYSTEM CONTAINS A UNIQUE 1 CHARACTER IDENTIFIER LOCATED     **
**       AT A CONSISTENT OFFSET. IF THIS IS NOT TRUE FOR YOUR        **
**       INSTALLATION, THE CPU IDENTIFICATION CODE WILL HAVE TO      **
**       BE ALTERED (SEE LABEL SCGSID).                              **
**                                                                   **
**       THE 'PARM' FIELD OF THE PROGRAM CAN BE USED TO RESET THE    **
**       CHECKPOINT RECORD BY CODING :                               **
**                      EXEC PGM=SETCLOCK,PARM='RESET'               **
**              IN THAT CASE, CHECKPOINT RECORD WILL BE INITIALIZED  **
**              AND WRITTEN TO THE CHECKPOINT DATA-SET.              **
**       OR IT CAN BE USED TO REQUEST ONLY THE SCAN OF THE       -EU-**
**       INPUT PARAMETERS BY CODING :                            -EU-**
**                      EXEC PGM=SETCLOCK,PARM='SCAN'            -EU-**
**              IN THAT CASE, THE EXECUTION TERMINATES AS SOON   -EU-**
**              AS THE PARAMETERS ARE SCANNED.                   -EU-**
**                                                                   **
*****************************************************************-EU-**
**       DEFINED SNAP-DUMP ID'S IN THE PROGRAM :                 -EU-**
**       ***************************************                 -EU-**
**                                                                   **
**       NO. - SNAP AREA         - SNAP POINT                    -EU-**
**       ---   -----------------   ---------------------------   -EU-**
**         1 - CHECKPOINT RECORD - INVALID DISCREPANCY           -EU-**
**       255 - STORAGE WORK AREA - PROGRAM TERMINATION           -EU-**
**                                                                   **
***********************************************************************
         EJECT
         MACRO
&LABEL   SETCGEN &SID,&SIDCHAR=4,&CKPTDD=SYSCKPT,&PARMDD=SYSPARM,      X
               &DISCTIM=15
.**********************************************************************
.**                                                                  **
.**  SETCLOCK GENERATION MACRO : THIS MACRO IS PROVIDED FOR THE      **
.**                  EASY TAILORING OF THE SETCLOCK PROGRAM TO A     **
.**                  USER'S ENVIRONMENT.                             **
.**                                                                  **
.**  OPERANDS :                                                      **
.**      &SID      : A LIST, ENCLOSED IN PARENTHESES, OF ALL SMF     **
.**                  SYSTEM IDS IN THE COMPLEX. THIS LIST IS         **
.**                  MANDATORY, AND MUST CONTAIN FROM 2 TO 8         **
.**                  ENTRIES.                                        **
.**      &SIDCHAR  : THE CHARACTER POSITION (FROM 1 TO 4) OF A       **
.**                  CHARACTER IN EACH SMF SYSTEM ID WHICH           **
.**                  UNIQUELY IDENTIFIES EACH CPU.                   **
.**      &CKPTDD   : THE DDNAME TO BE ASSIGNED TO THE                **
.**                  DASD-RESIDENT CHECKPOINT DATA-SET.              **
.**      &PARMDD   : THE DDNAME TO BE ASSIGNED TO THE SETCLOCK       **
.**                  PARAMETER DATA-SET.                             **
.**      &DISCTIM  : THE TIME IN MINUTES OF THE LARGEST              **
.**                  DISCREPANCY BETWEEN TOD CLOCK VALUES ALLOWED    **
.**                  WITHOUT GENERATING A WARNING MESSAGE.           **
.**                                                                  **
.**********************************************************************
         GBLC  &SYSCKPT            DDNAME FOR CHECKPOINT DATA-SET
         GBLC  &SETPARM            DDNAME FOR PARAMTERS DATA-SET
         GBLC  &MAXDISC            MAXIMUM DISCREPANCY ALLOWED    V1.01
.*                                 IN MINUTES BEFORE ISSUING MSG  V1.01
         GBLC  &SYSID(8)           SINGLE CHARACTER
.*                                 CPU IDENTIFIER TAKEN FROM SMCA
.*                                 USED TO IDENTIFY SYSTEM.
         GBLA  &MAXCPU             MAX NUMBER OF CPU'S TO BE SYNCHRON.
         GBLC  &OFFSET             OFFSET OF UNIQUE CHAR IN SMF SYSID
         LCLA  &N,&I
         AIF   (N'&SID GE 2 AND N'&SID LE 8).SIDOK
         MNOTE 8,'SYSTEM ID LIST ''&SID'' INVALID.  AT LEAST 2 SYSTEM IX
               D''S REQUIRED, WITH A MAXIMUM OF 8.)'
         MEXIT
.SIDOK   AIF   ('&SIDCHAR' GE '1' AND '&SIDCHAR' LE '4').GOODCHR
         MNOTE 4,'SIDCHAR VALUE &SIDCHAR INVALID. 4 ASSUMED.'
&OFFSET  SETC  '4'
         AGO   .SETCPU
.GOODCHR ANOP
&OFFSET  SETC  '&SIDCHAR'
&I       SETA  &OFFSET
.SETCPU  ANOP
&MAXCPU  SETA  N'&SID
MAXCPUD  EQU   &MAXCPU             MAXIMUM NUMBER OF CPU'S SUPPORTED
&N       SETA  1
.SYSLOOP ANOP
&SYSID(&N) SETC '&SID(&N)'(&I,1)
&N       SETA  &N+1
         AIF   (&N LE &MAXCPU).SYSLOOP
&I       SETA  &I-1
&OFFSET  SETC  '&I'
         MNOTE *,'SETCLOCK CURRENTLY GENERATED TO SUPPORT A MAXIMUM OF X
               &MAXCPU CPU''S'
         MNOTE *,'UNIQUE SYSTEM IDENTIFIER LOCATED AT SMCASID+&OFFSET..X
               '
&MAXDISC SETC  '&DISCTIM'
         MNOTE *,'MAXIMUM TOD CLOCK DIFFERENCE WITHOUT GENERATION OF A X
               WARNING MESSAGE IS &MAXDISC MIN.'
&SYSCKPT SETC  '&CKPTDD'
         MNOTE *,'DASD CHECKPOINT DDNAME SET TO &SYSCKPT..'
&SETPARM SETC  '&PARMDD'
         MNOTE *,'PARAMETER LIBRARY DDNAME SET TO &SETPARM..'
         MEND
         SPACE 5
         MACRO
&LABEL   SETCTRT
         GBLA  &MAXCPU
         GBLC  &SYSID(8)
         LCLA  &I
&LABEL   DC    256X'00'            TRANSLATE TABLE TO DEFINE SYSID'S
&I       SETA  1
.SYSLOOP ORG   &LABEL+C'&SYSID(&I)' SYS ID CHAR OFFSET IN TABLE
         DC    AL1(&I)             SYSTEM NUMBER
&I       SETA  &I+1
         AIF   (&I LE &MAXCPU).SYSLOOP
         ORG   ,                   RESET ORDINAL COUNTER
         MEND
         EJECT
         MACRO
&LABEL   $SUB  &LOCAL,&LOCLN,&TERMIN=NO
.**********************************************************************
.**                                                                  **
.**  $SUB : SUBROUTINE ENTRY POINT MACRO DEFINITION.                 **
.**                                                                  **
.**  OPERANDS :                                                      **
.**      &LOCAL    : LOCAL VARIABLES DSECT NAME                      **
.**      &LOCLN    : LOCAL VARIABLES DSECT LENGTH                    **
.**      &TERMIN   : IF YES (OR NOTHING) SPECIFIED, THIS SUBROUTINE  **
.**                  DOES NOT CALL OTHER SUBROUTINES                 **
.**                                                                  **
.**********************************************************************
         GBLC  &ALLOCLN            GETMAINED AREA LENGTH
&ALLOCLN SETC  '0'                 RESET LENGTH TO ZERO
         AIF   (T'&LABEL EQ 'O').ERROR1
&LABEL   CSECT ,                   SUBROUTINE ENTRY POINT
         STM   R14,R12,12(RSAVE)   SAVE REGISTERS
         PUSH  USING               SAVE USING STATUS
         LR    RSUB,RENTRY         LOAD BASE REGISTER
         USING &LABEL,RSUB         SETUP SUBROUTINE ADDRESSABILITY
         AIF   ('&TERMIN' NE 'NO').TERMIN
&ALLOCLN SETC  '18*4'              ALLOCATE AT LEAST A SAVE AREA
         AIF   (T'&LOCAL EQ 'O').GETMAIN
         AIF   (T'&LOCLN EQ 'O').ERROR2
.ALLOCDS ANOP                      ALLOCATE LOCAL VARIABLES STORAGE
&ALLOCLN SETC  '&ALLOCLN+&LOCLN'   SET TOTAL LENGTH TO ALLOCATE
.**********************************************************************
.*       ISSUE GETMAIN FOR LOCAL VARIABLES AND SAVE AREA              *
.**********************************************************************
.GETMAIN LA    R0,&ALLOCLN         GET TOTAL DSECT LENGTH
         GETMAIN R,                ALLOCATE STORAGE                    *
               LV=(0)              + OF LENGTH SPECIFIED BY R0
         ST    RSAVE,4(R1)         CHAIN SAVE AREAS
         ST    R1,8(RSAVE)         + FORWARD AND BACKWARD
         LM    R14,R1,12(RSAVE)    RELOAD PARAMETER REGISTERS      -EU-
         L     RSAVE,8(RSAVE)      + AND POINT TO NEW SAVE AREA
         AIF   (T'&LOCAL NE 'O').USING
         MEXIT
.USING   USING &LOCAL-(18*4),RSAVE ESTABLISH DSECT ADDRESSABILITY
         MEXIT
.TERMIN  AIF   (T'&LOCAL NE 'O').ALLOCDS
         MEXIT
.**********************************************************************
.*       ERROR MESSAGES                                               *
.**********************************************************************
.ERROR1  MNOTE 8,'SUBROUTINE NAME  MUST BE SPECIFIED'
         MEXIT
.ERROR2  MNOTE 8,'DSECT LENGTH MUST BE SPECIFIED FOR LOCAL VARIABLES'
         MEND
         SPACE 5
         MACRO
&LABEL   $SUBRET ,                 PROTOTYPE DEFINITION
.*********************************************************************
.**                                                                 **
.**  $SUBRET : RETURN FROM SUBROUTINE.                              **
.**                                                                 **
.*********************************************************************
         GBLC  &ALLOCLN            ALLOCATION LENGTH
         AIF   (T'&LABEL EQ 'O').NOLABEL
&LABEL   DS    0H                  RETURN TO CALLER
.NOLABEL AIF   ('&ALLOCLN' NE '0').FREE
         ST    RCODE,12+4(RSAVE)   SAVE RETURN CODE
         AGO   .TERM               PROCESS A TERMINAL SUBROUTINE RETURN
.FREE    LA    R0,&ALLOCLN         GET TOTAL DSECT LENGTH
         LR    R1,RSAVE            LOAD STORAGE ADDRESS
         L     RSAVE,4(RSAVE)      GET PREVIOUS SAVE AREA POINTER
         ST    RCODE,12+4(RSAVE)   SAVE RETURN CODE
         FREEMAIN R,               FREE STORAGE                        *
               LV=(0),             + OF LENGTH SPECIFIED BY R0         *
               A=(1)               + AND ADDRESS IN REGISTER 1
.TERM    LM    R14,R12,12(RSAVE)   RELOAD REGISTERS
         B     0(RCODE,RLINK)      + AND RETURN TO CALLER
         POP   USING               FORGET SUBROUTINE ADDRESSABILITY
         MEND
         EJECT
         MACRO
&LABEL   SCANTCB &DSECT=YES,&LIST=NO
         PUSH  PRINT
         PRINT OFF
         AIF   ('&LIST' NE 'YES').NOPRINT
         PRINT ON,GEN,NODATA
***********************************************************************
**                                                                   **
**       ------------------  S C A N T C B  ------------------       **
**                                                                   **
**           SCAN TEXT CONTROL BLOCK IS USED FOR PASSING             **
**       INFORMATION RELATED TO ANALYSE TEXT BUFFER.                 **
**                                                                   **
**           ON FIRST CALL, FOLLOWING HAS TO BE DONE :               **
**           -- ZERO OUT ALL CONTROL BLOCK                           **
**           -- FILL SBTXT AND SBTXTLN FIELDS                        **
**                                                                   **
***********************************************************************
.NOPRINT AIF   ('&DSECT' EQ 'YES').DSECT
SCANTCB  DS    0D
         AGO   .NODSECT
.DSECT   ANOP
SCANTCB  DSECT
.NODSECT AIF   ('&LABEL' EQ '').NEQ
&LABEL   DS    0D
.NEQ     ANOP
SBTXTBUF DS    CL88                TEXT BUFFER (FOR CARD IMAGE)
         ORG   SBTXTBUF            POINT TO BEGINNING OF BUFFER
SBTXTLN  DC    H'0'                TEXT LENGTH STARTING FROM
*                                  + SBTXTA (FIRST CHARACTER ADDRESS)
SBTXTOFS DC    H'0'                OFFSET TO OBTAIN NEXT CHARACTER
*                                  + FOLLOWING LAST PROCESSED TOKEN.
SBATOMA  DC    A(0)                POINTER TO FIRST CHARACTER FOLLOWING
*                                  + PROCESSED TOKEN
SBTXT    DC    CL80' '             TEXT CARD
SBGBUF   DC    XL80'00',X'00'      GROUP BUFFER THAT CONTAINS AN
*                                  + IMAGE OF SBTXT, BUT REPLACING EACH
*                                  + CHARACTER BY ASSOCIATED GROUP
*                                  + LAST BYTE IS X'00'
SBSFLG1  DS    FL1                 FLAGS BYTE
SBFNEW   EQU   B'00000001'         -- USED BY SCAN ROUTINE
SBSCNR15 DS    3F                  REGISTERS 15-0-1 UPON SCAN RETURN
         CNOP  0,8                                                 -EU-
SCANDLN  EQU   *-SCANTCB           DSECT LENGTH
         POP   PRINT
         MEND
         EJECT
***********************************************************************
**                                                                   **
**  SEND : SEND A MESSAGE MACRO.                                 -EU-**
**  SENDR : SEND A MESSAGE AND WAIT A REPLY MACRO.               -EU-**
**  GENMS : DEFINE A MESSAGE MACRO.                              -EU-**
**                                                                   **
***********************************************************************
         SPACE 2                                                   -EU-
         MACRO
&LABEL   SEND  &MSID               PROTOTYPE DEFINITION
&LABEL   L     R1,=A(&MSID)        MESSAGE POINTER                 -EU-
         CALL  MSSEND              SEND MESSAGE                    -EU-
         MEND
         SPACE 2                                                   -EU-
         MACRO                                                     -EU-
&LABEL   SENDR &MSID               PROTOTYPE DEFINITION            -EU-
         CNOP  0,4                                                 -EU-
&LABEL   B     *+L'*+4                                             -EU-
         DC    0F'0',XL1'80',AL3(&MSID)                            -EU-
         L     R1,*-4              MESSAGE POINTER                 -EU-
         CALL  MSSEND              SEND MESSAGE AND WAIT REPLY     -EU-
         MEND                                                      -EU-
         SPACE 2                                                   -EU-
         MACRO                                                     -EU-
&MSID    GENMS &MESS,&DC=4         PROTOTYPE DEFINITION            -EU-
         LCLC  &X                                                  -EU-
&X       SETC  'IHB'.'&SYSNDX'                                     -EU-
&X       WTO   &MESS,ROUTCDE=(2),DESC=(&DC),MF=L                   -EU-
&MSID    EQU   &X-MSDATA                                           -EU-
         SPACE 1                                                   -EU-
         MEND                                                      -EU-
         EJECT                                                     -EU-
***********************************************************************
**                                                                   **
**  @SNDMP : CALL SNAP-DUMP MACRO.                               -EU-**
**                                                                   **
***********************************************************************
         SPACE 1                                                   -EU-
         MACRO                                                     -EU-
&LABEL   @SNDMP &A,&L,&SNID=0      PROTOTYPE DEFINITION            -EU-
         LCLA  &IDN                                                -EU-
         AIF   (&SNID LE 255).OK                                   -EU-
         MNOTE 4,' ---> SNAP-ID ERROR (SET TO ZERO) *** *** ***'   -EU-
&IDN     SETA  0                                                   -EU-
         AGO   .SN                                                 -EU-
.OK      ANOP                                                      -EU-
&IDN     SETA  &SNID                                               -EU-
.SN      ANOP                                                      -EU-
&LABEL   LA    R1,&A               SNAP ADDRESS                    -EU-
         L     R15,=V(SNDMP)       GET ENTRY ADDRESS               -EU-
         BASR  R14,R15             GO DO SNAP REQUESTED            -EU-
         DC    AL1(&SNID),AL3(&L)  SNAP-ID - SNAP LENGTH           -EU-
         MEND                                                      -EU-
         TITLE '-- SYMBOLIC VARIABLES --'
SETCLOCK START 0                                                   -EU-
         SPACE 1                                                   -EU-
SETCLOCK AMODE 24                                                  -EU-
SETCLOCK RMODE 24                                                  -EU-
         SPACE 1                                                   -EU-
***********************************************************************
**                                                                   **
**       GLOBAL AND LOCAL SYMBOLIC VARIABLES DEFINITIONS             **
**                                                                   **
***********************************************************************
         SPACE 1
         GBLC  &SYSCKPT            DDNAME FOR CHECKPOINT DATA-SET
         GBLC  &SETPARM            DDNAME FOR PARAMTERS DATA-SET
         GBLC  &MAXDISC            MAXIMUM DISCREPANCY ALLOWED    V1.01
*                                  IN MINUTES BEFORE ISSUING MSG  V1.01
         GBLC  &OFFSET             SMCASID OFFSET OF UNIQUE ID CHAR
         SPACE 2
***********************************************************************
**                                                                   **
**       SYMBOLIC VARIABLES INITIALISATION                           **
**                                                                   **
***********************************************************************
         SPACE 1
         SETCGEN (SYSA,SYSB,SYSC,SYSD,SYSE)  SET GEN PARAMETERS    -EU-
         SPACE 1
***********************************************************************
**                                                                   **
**       PARMLIB DATA-SET DEFAULT PARAMETERS                         **
**                                                                   **
***********************************************************************
         SPACE 1
*        MAXCPU DETERMINED FROM SETCGEN MACRO
DISTIME  EQU   12000      DEFAULT DISC TIME  100TH OF A SECOND (2 MIN.)
LONGWT   EQU   6000       DEFAULT LONG WAIT  100TH OF A SECOND (1 MIN.)
TRAKWT   EQU   200        DEFAULT TRACK WAIT 100TH OF A SECOND (2 SEC.)
SEKTIM   EQU   2          DEFAULT SEEK TIME  100TH OF A SECOND (20 MS.)
         SPACE 1                                                   -EU-
*******************************************************************-EU-
**                                                                 -EU-
**       SNAP-ID'S STACKS                                          -EU-
**                                                                 -EU-
*******************************************************************-EU-
         SPACE 1                                                   -EU-
SNSTCKS  EQU   20         MAX. NO. OF K FOR SNAP-DUMP STACKS       -EU-
STCKSL   EQU   SNSTCKS*1024  STACKS ARRAY LENGTH                   -EU-
         TITLE '-- R E G I S T E R     D E F I N I T I O N S --'
***********************************************************************
**                                                                   **
**       ABSOLUTE REGISTER DEFINITIONS :                             **
**                                                                   **
***********************************************************************
         SPACE 1
R0       EQU   0                  + GENERAL REGISTER 0
R1       EQU   1                  + GENERAL REGISTER 1
R2       EQU   2                  + GENERAL REGISTER 2
R3       EQU   3                  + GENERAL REGISTER 3
R4       EQU   4                  + GENERAL REGISTER 4
R5       EQU   5                  + GENERAL REGISTER 5
R6       EQU   6                  + GENERAL REGISTER 6
R7       EQU   7                  + GENERAL REGISTER 7
R8       EQU   8                  + GENERAL REGISTER 8
R9       EQU   9                  + GENERAL REGISTER 9
R10      EQU   10                 + GENERAL REGISTER 10
R11      EQU   11                 + GENERAL REGISTER 11
R12      EQU   12                 + GENERAL REGISTER 12
R13      EQU   13                 + GENERAL REGISTER 13
R14      EQU   14                 + GENERAL REGISTER 14
R15      EQU   15                 + GENERAL REGISTER 15
         SPACE 1
***********************************************************************
**                                                                   **
**       SYMBOLIC REGISTERS DEFINITIONS :                            **
**                                                                   **
***********************************************************************
         SPACE 1
RPARM    EQU   R1                  O/S AND PROGRAM PARAMETER REGISTER
RWORK    EQU   R11                 COMMON WORKAREA POINTER
RBASE    EQU   R12                 BASE OF MAINLINE
RSUB     EQU   R12                 BASE OF SUBROUTINES
RSAVE    EQU   R13                 O/S SAVE AREA POINTER
RLINK    EQU   R14                 O/S AND PROGRAM LINK REGISTER
RENTRY   EQU   R15                 O/S AND PROGRAM ENTRY POINT REGISTER
RCODE    EQU   R15                 O/S AND PROGRAM RETURN CODE REGISTER
         SPACE 1
RLINK2   EQU   R8                  PROGRAM SECOND LEVEL LINK REGISTER
RBCKP    EQU   R9                  CHECKPOINT RECORD BASE REGISTER
RSENTRY  EQU   R10                 BASE REGISTER FOR SYSTEM (IN CKPT)
         SPACE 1
***********************************************************************
**                                                                   **
**       GLOBAL EQUATES                                              **
**                                                                   **
***********************************************************************
         SPACE 1
ZERO     EQU   0                   ZERO
FF       EQU   X'FF'               X'FF' DEFINITION
         TITLE ' -- I N I T I A L I Z A T I O N --'
***********************************************************************
**                                                                   **
**       SAVE REGISTERS AND CHAIN SAVE AREAS                         **
**                                                                   **
***********************************************************************
         SPACE 1
         SAVE  (14,12),,SETCLOCK--&SYSDATE.--&SYSTIME
         SPACE 1
         LR    RBASE,RENTRY        LOAD BASE REGISTER
         USING SETCLOCK,RBASE      TELL THE ASSEMBLER
         LR    R2,RPARM            LOAD R2 WITH PARM REGISTER
         LA    R0,WORKLEN          WORK AREA LENGTH
         GETMAIN R,LV=(0)          ALLOCATE LOCAL WORK STORAGE
         ST    RSAVE,4(R1)         *  CHAIN
         ST    R1,8(RSAVE)         *  SAVE
         LR    RWORK,R1            *  AREAS
         USING WORK,RWORK          SET DSECT ADDRESSABILITY
         LA    RSAVE,AREA          SET SAVEAREA POINTER
         USING PSA,R0              SET PSA ADDRESSABILITY
         LA    RBCKP,SCCKPNT       LOAD THE CHECKPOINT RECORD ADDRESS
         USING CHECKPT,RBCKP       SET CHECKPOINT ADDRESSABILITY
         EJECT
***********************************************************************
**                                                                   **
**       INITIALIZE PROGRAM FLAGS AND CCW'S ADDRESSES                **
**       DETERMINE AND PREPARE SNAP-DUMP PROCESS IF REQUESTED    -EU-**
**                                                                   **
***********************************************************************
         SPACE 1
         MVI   SCFLAGS,ZERO        CLEAR INITIAL FLAGS
         STCM  RBCKP,B'0111',CPRBUF3
         STCM  RBCKP,B'0111',CPRBUF2
         LA    R1,SCCKCNT          POINT TO COUNT FIELD
         STCM  R1,B'0111',CPWBUFA  SAVE IT IN CHANNEL PROGRAM
         LA    R1,CKID             CHECKPOINT 'DATA' PORTION ADDRESS
         STCM  R1,B'0111',CPRBUF1  STORE IT IN CCW
         MVC   SCCKLEN,SCKLDL      MOVE KEY AND RECORD LENGTH
         EXTRACT SCWTIOT,'S',FIELDS=(TIOT,TSO),MF=(E,SCWEXTR)      -EU-
         XR    R0,R0               DETERMINE SNAP-DUMP REQUEST     -EU-
         L     R1,SCWTIOT                                          -EU-
         USING TIODSECT,R1                                         -EU-
         L     R15,=A(SNAPCS)                                      -EU-
         USING IHADCB,R15                                          -EU-
SRSNAP   CLC   TIOELNGH(4),=XL4'0'                                 -EU-
         BE    NOSNAP                                              -EU-
         CLC   TIOEDDNM(L'DCBDDNAM),DCBDDNAM                       -EU-
         BE    SETSNAP                                             -EU-
         IC    R0,TIOELNGH                                         -EU-
         ALR   R1,R0                                               -EU-
         B     SRSNAP                                              -EU-
         DROP  R1,R15                                              -EU-
SETSNAP  OI    SCFLAGS,SCFSNAP     INDICATE IT                     -EU-
         L     R0,=A(STCKSL)       GET STACKS ARRAY                -EU-
         GETMAIN R,LV=(0)                                          -EU-
         ST    R1,ASTCK            SET START ADDRESS               -EU-
         ST    R1,CSTCK            SET CURRENT ADDRESS             -EU-
         AL    R1,=A(STCKSL)                                       -EU-
         ST    R1,LSTCK            SET LAST ADDRESS +1             -EU-
NOSNAP   L     R1,SCWTSO                                           -EU-
         TM    0(R1),X'80'         TSO ADDRESS SPACE ?             -EU-
         BZ    *+L'*+4             NO                              -EU-
         OI    SCFLAGS,SCFTEST     YES, INDICATE IT                -EU-
         EJECT
***********************************************************************
**                                                                   **
**       READ THE INPUT PARAMETERS FROM DDNAME "SETPARM"             **
**                                                                   **
***********************************************************************
         SPACE 1
         BAS   RLINK,READPARM      READ THE INPUT PARAMETERS
         B     *+L'*+4             ERROR IN THE INPUT PARAMETERS
         B     SCTEST              INPUT PARAMETERS ACCEPTED       -EU-
         SPACE 1
***********************************************************************
**                                                                   **
**       ERROR HAS BEEN DETECTED INPUT PARAMETERS, WRITE MSG & QUIT  **
**                                                                   **
***********************************************************************
         SPACE 1
         SEND  SCK0001E            ERROR DETECTED IN INPUT PARAMETERS
         B     SCERR               GO PROCESS AFTER ERROR
         SPACE 1                                                   -EU-
***********************************************************************
**                                                                   **
**       CHECK MAX NUMBER OF CPU'S SPECIFIED                         **
**                                                                   **
***********************************************************************
         SPACE 1                                                   -EU-
SCTEST   CLC   SCPMAXC,=A(MAXCPUD) CHECKPOINT CAN HANDLE ?         -EU-
         BNH   SCINIT              NO, PROCESS MAINLINE CODE       -EU-
         SEND  SCK0020E            MAX NUMBER OF CPU'S EXCEEDED    -EU-
         B     SCERR               GO PROCESS ERROR                -EU-
         EJECT
***********************************************************************
**                                                                   **
**       CHECK IF PARM 'RESET' IS SPECIFIED AND SET ACCORDING FLAG   **
**       CHECK IF PARM 'SCAN' IS SPECIFIED AND EXIT              -EU-**
**                                                                   **
***********************************************************************
         SPACE 1
SCINIT   L     R1,0(R2)            LOAD PARM ADDRESS IN REGISTER ONE
         XR    R0,R0               CLEAR WORK REGISTER
         ICM   R0,B'0011',0(R1)    LOAD PARM LENGTH
         BZ    SCOPEN              ZERO -- NO PARM WAS SPECIFIED
         CL    R0,=A(L'SCANT)      COMPARE PARM LENGTH             -EU-
         BNE   SCRST               NOT EQUAL -- LOOK TO NEXT       -EU-
         OC    2(L'SCANT,R1),SCBL  CONVERT PARM FIELD TO UPPERCASE -EU-
         CLC   SCANT,2(R1)         IS PARM EQUAL ?                 -EU-
         BNE   SCERPARM            NOT EQUAL -- PARM ERROR         -EU-
         SEND  SCK0025I            SCAN SPECIFIED -- TERMINATE     -EU-
         B     SCRETN                                              -EU-
SCRST    CL    R0,=A(L'RESET)      COMPARE PARM LENGTH             -EU-
         BNE   SCERPARM            NOT EQUAL -- PARM ERROR
         OC    2(L'RESET,R1),SCBL  CONVERT PARM FIELD TO UPPERCASE
         CLC   RESET,2(R1)         IS PARM EQUAL ?
         BE    SCRESET             YES, RESET THING
         SPACE 1
***********************************************************************
**                                                                   **
**       INVALID 'PARM' WAS ENCOUNTERED -- PRINT MSG & QUIT          **
**                                                                   **
***********************************************************************
         SPACE 1
SCERPARM SEND  SCK0008E            INVALID PARM WAS SPECIFIED
         B     SCERR               QUIT WITH ERROR
         EJECT
***********************************************************************
**                                                                   **
**       RESET HAS BEEN SPECIFIED -- INIT RECORD AND SET FLAG        **
**       ALSO TELL OPERATOR OF "CHECKPOINT" RESET                    **
**                                                                   **
***********************************************************************
         SPACE 1
SCRESET  SEND  SCK0016I            CHECKPOINT RECORD WILL BE RESET
         XC    CHECKPT(CKLEN),CHECKPT
*                                  ZERO OUT CHECKPOINT RECORD
*                                  LOCK IS NOW FREE (IN BUFFER)
         MVC   CKID,=CL4'CKPT'     MOVE RECORD ID
         OI    SCFLAGS,SCFRESET    RESET HAS BEEN SPECIFIED
         L     R1,SCPMAXC          GET MAX NUMBER OF CPU'S
         STH   R1,CKNRCPU          THIS IS NUMBER OF RESIDUAL CPU'S
         STH   R1,CKNACPU          POTENTIAL NUMBER OF ACTIVE CPU'S
         LA    R2,CKSENTRY         GET SYSTEM ENTRIES ADDRESSES
         USING CKSYS,R2            SET R2 AS BASE REGISTER
         LA    R1,MAXCPUD          MAXIMUM NUMBER OF ENTRIES
SCRLOOP  MVI   CKSSTAT,CKTDISC     SET SYSTEM AS 'DISCONNECTED'
         LA    R2,L'CKSENTRY(R2)   POINT TO NEXT ENTRY
         BCT   R1,SCRLOOP          RESET ALL SYSTEM ENTRIES
         DROP  R2                  NO MORE USED
         EJECT
***********************************************************************
**                                                                   **
**       OPEN THE CHECKPOINT DATA-SET -- EXCP                        **
**                                                                   **
***********************************************************************
         SPACE 1
SCOPEN   OPEN  (SYSCKPT,OUTPUT)    OPEN CKPT OUTPUT MODE
         TM    SYSCKPT+DCBOFLGS-IHADCB,DCBOFOPN
*                                  DID THE DATA-SET OPENED PROPERLY ?
         BO    SCGOODOP            YES, CONTINUE PROCESSING
         SEND  SCK0006E            DASD DEVICE DID NOT OPEN PROPERLY
         B     SCERR               GO PROCESS THE ERROR
         EJECT
***********************************************************************
**                                                                   **
**       OPEN WAS SUCCESSFUL -- ACKNOWLEGE SETCLOCK OPERATION        **
**                           -- SAVE "CC" AND "HH" FOR I/O ROUTINE   **
**                                                                   **
***********************************************************************
         SPACE 1
SCGOODOP SEND  SCK0015I            CLOCKS SYNCHRONIZATION IN PROGRESS
         LA    R2,SYSCKPT          GET DCB ADDRESS IN R2
         USING IHADCB,R2           SET DCB ADDRESSABILITY
         L     R2,DCBDEBAD         LOAD DEB ADDRESS
         USING DEBBASIC,R2         SET BASIC ADDRESSABILITY
         LA    R2,DEBBASND         LOAD SEGMENT ADDRESS
         USING DEBDASD,R2          SET DASD SECTION ADDRESSABILITY
         MVC   CPSEEKCC,DEBSTRCC   SET STARTING CYLINDER ADDRESS
         MVC   CPSEEKHH,DEBSTRHH   SET STARTING HEAD NUMBER
         MVI   CPSEEKR,1           SET STARTING RECORD TO '1'
         MVC   SCCKID,CPSEEKCC     MOVE ID FOR WRITE
         DROP  R2                  NO MORE USED
         TITLE '-- M A I N L I N E     P R O C E S S I N G --'
***********************************************************************
**                                                                   **
**       GET THE SYSTEM "ID" AND COMPUTE OUR ENTRY OFFSET IN THE     **
**       CHECKPOINT RECORD. SAVE IT IN WORK AREA.                    **
**                                                                   **
***********************************************************************
         SPACE 1
         L     R1,FLCCVT           LOAD CVT ADDRESS
         L     R1,CVTSMCA-CVT(,R1) LOAD SMCA ADDRESS
         MVC   SCSYSID,SMCASID-SMCABASE(R1)
*                                  AND SAVE CURRENT SYSID IN WORK AREA
         XR    R2,R2               CLEAR WORK REGISTER
         TRT   SCSYSID+&OFFSET.(1),SCXTBL SET R2 TO SYSTEM
*                                  OFFSET IN RECORD
         BNZ   SCCKSYS             BRANCH IF SMF SYSTEM ID KNOWN   -EU-
         SEND  SCK0021E            ID NOT SUPPORTED                -EU-
         B     SCERR               GO PROCESS ERROR                -EU-
SCCKSYS  BCTR  R2,0                OBTAIN RELATIVE POSITION        -EU-
         MH    R2,=Y(L'CKSENTRY)   THIS IS THE OFFSET OF OUR SYSID
         LA    RSENTRY,CKSENTRY(R2) POINT TO OUR SYSTEM ENTRY
         ST    RSENTRY,SCENTRYP    SAVE CPU ENTRY IN WORK AREA
         USING CKSYS,RSENTRY       SET OUR ENTRY ADDRESSABILITY
         EJECT
***********************************************************************
**                                                                   **
**       OBTAIN THE LOCK AND READ THE CHECKPOINT RECORD              **
**       -- IF RESET HAS BEEN SPECIFIED, SKIP THIS SECTION           **
**                                                                   **
***********************************************************************
         SPACE 1
         TM    SCFLAGS,SCFRESET    WAS RESET SPECIFIED?
         BZ    SCRCKPT             NO                              -EU-
         CLI   SCPMTHD+3,BASECPU   BASE CPU METHOD ?               -EU-
         BNE   SCSETRQ             NO, SO DO NOT READ THE RECORD   -EU-
         MVI   CKSREQ,CKTRFCPU     YES, INDICATE REFERENCE SYSTEM  -EU-
         B     SCSETRQ             AND DO NOT READ THE RECORD      -EU-
SCRCKPT  BAS   RLINK,SCGETREC      GET THE LOCK AND READ THE RECORD
         B     SCERR               IF AN ERROR OCCURS
         OC    CKSID,CKSID         ANY ONE ALREADY HERE ?          -EU-
         BZ    SCCKOK              NO, SMF SYSTEM ID IS OK         -EU-
         SEND  SCK0022E            DUPLICATE ID IN COMPLEX         -EU-
         B     SCERR               GO PROCESS ERROR                -EU-
SCCKOK   MVC   SCPMAXC+2(2),CKNACPU                           -EU-V1.04
*                                  RESET IS NOT SPECIFIED, TAKE   V1.04
*                                  MAX NUMBER OF CPU'S FROM CKPT  V1.04
         EJECT
***********************************************************************
**                                                                   **
**       SET THE REQUEST CODE TO "TRACK" --                          **
**       NOTE THAT OUR STATUS WILL REMAIN AS "DISCONNECTED" OR WAIT  **
**                                                                   **
**       TEST IF THIS REQUEST IS TOO LATE (SYNCHRONIZATION STARTED)  **
**       IF SO, WRITE MESSAGE AND TERMINATE EXECUTION                **
**                                                                   **
***********************************************************************
         SPACE 1
SCSETRQ  CLI   CKREQ,CKRLWAIT      IS ACTUAL REQUEST TO "WAIT" ?
         BE    SCOKREQ             OK, CONTINUE
         CLI   CKREQ,CKREND        IS ACTUAL REQUEST "END" ?
         BE    SCOKREQ             OK, CONTINUE
         CLI   CKREQ,CKRTRACK      IS ACTUAL REQUEST "TRACK" ?
         BE    SCOKREQ             OK, CONTINUE
         SEND  SCK0017I            TOO LATE FOR THIS CPU ...
         SEND  SCK0017E            RETRY LATER OR RESET CHECKPOINT
         B     SCERR               GO PROCESS THE ERROR
SCOKREQ  MVI   CKREQ,CKRTRACK      SET REQUEST CODE TO TRACK
         MVI   CKCREQ,CKCRTR       SET REQUEST CODE TO TRACK (CHAR)
         MVC   CKSID,SCSYSID       MOVE OUR SYSTEM ID TO BUFFER
         MVC   SCWTIME,SCPTRACK    SET WAITING TIME TO 'TRACK'
         EJECT
***********************************************************************
**                                                                   **
**       GET TIME AND DATE AND INITIALIZE REQUEST TIME AND DATE      **
**                                                                   **
***********************************************************************
         SPACE 1
         TIME  BIN                 SET TIME IN R0 AND DATE IN R1
*                                  TIME IS IN BINARY 100TH OF SECONDS
*                                  DATE IS IN FORMAT X'00YYDDDF'
         STCM  R0,B'1111',CKSTIME  STORE REQUEST TIME IN BUFFER    -EU-
         TM    SCFLAGS,SCFRESET    WAS RESET SPECIFIED?            -EU-
         BZ    *+L'*+4             NO                              -EU-
         STCM  R1,B'1111',CKRDATE  STORE REQUEST DATE IN BUFFER
         SPACE 1
***********************************************************************
**                                                                   **
**       WRITE THE RECORD AND FREE THE LOCK                          **
**                                                                   **
***********************************************************************
         SPACE 1
         BAS   RLINK,SCWRITE       WRITE THE RECORD
*                                  THIS SECTION WRITES THE RECORD
*                                  AND FREES THE LOCK BY WRITING A
*                                  HARDWARE KEY OF X'0000000000000000'
         B     SCERR               WHEN AN ERROR OCCURS
         TITLE '-- STATE PROCESSING --'
***********************************************************************
**                                                                   **
**       LOOP UNTIL ALL CPU'S REACH THE "WANTED STATE" OR IF THE     **
**       DISCONNECT TIME IS EXPIRED (WHEN REQUEST IS TRACK)          **
**                                                                   **
***********************************************************************
         SPACE 1
SCTLOOP  LA    R1,SCWTIME          LOAD THE WAIT TIME ADDRESS
         STIMER WAIT,              WAIT FOR TIME TO ELAPSE             *
               BINTVL=(R1)         ADDRESS SPECIFIED BY R1
         BAS   RLINK,SCGETREC      GET THE RECORD AND THE LOCK
         B     SCERR               IF AN ERROR OCCURS
         XR    R1,R1               CLEAR WORK REGISTER
         IC    R1,CKREQ            INSERT REQUEST CODE
         LA    RLINK,SCTWTR        SET RETURN ADDRESS TO 'WRITE'
         B     *+L'*(R1)           GO PROCESSING ACCORDING TO REQUEST
         B     SCTWTR              WAIT  -- WAIT FOR REQUEST
         B     SCTREQ              TRACK -- TRACK REQUEST
         B     SCLREQ              LOCK  -- LOCK REQUEST
         B     SCSTIME             SET   -- SET TIME REQUEST
         B     SCRETURN            END   -- RETURN TO CALLER
         SPACE 1
***********************************************************************
**                                                                   **
**       WRITE OUT THE RECORD AND RESET THE LOCK                     **
**                                                                   **
***********************************************************************
         SPACE 1
SCTWTR   BAS   RLINK,SCWRITE       WRITE THE RECORD
         B     SCERR               IF AN ERROR OCCURS
         B     SCTLOOP             LOOP AGAIN
         TITLE '-- PROCESS A TRACK REQUEST --'
***********************************************************************
**                                                                   **
**       "TRACK REQUEST"                                             **
**                                                                   **
**       ON ENTRY, STATE MIGHT BE "DISCONNECTED" (IF FIRST CALL )    **
**                                "SET"          (IF WAS IN WAIT)    **
**                                "TRACKED"      (IF PROCESSING )    **
**                                                                   **
***********************************************************************
         SPACE 1
SCTREQ   ST    RLINK,RLSAVE        SAVE RETURN REGISTER            -EU-
         CLI   CKSSTAT,CKTTRACK    ALREADY TRACKED ?
         BE    SCTCKDIS            YES, CHECK IF DISCONNECTED
         MVC   SCWTIME,SCPTRACK    SET WAIT TIME TO "TRACK" IN CASE
*                                  WE WERE IN "WAIT STATE" BEFORE
         LH    R1,CKNRCPU          NUMBER OF RESIDUAL CPU'S
         BCT   R1,SCTNOTL          IF NOT LAST ONE
         SPACE 1
***********************************************************************
**                                                                   **
**       WE ARE THE LAST CPU TO GET 'TRACK REQUEST'                  **
**                                                                   **
***********************************************************************
         SPACE 1
         SEND  SCK0012I            ALL CPU'S WILL BE SYNCHRONIZED
         MVI   CKREQ,CKRLOCK       ASK TO OBTAIN LOCK
         MVI   CKCREQ,CKCRTL       ALSO CHAR REQUEST
         L     R1,SCPMAXC          GET MAX NUMBER OF CPU'S
         STH   R1,CKNACPU          THIS IS NUMBER OF ACTIVE CPU"S
         B     SCTLOCK             AND PROCESS TO GET LOCK STATE
         SPACE 1
***********************************************************************
**                                                                   **
**       WE ARE NOT THE LAST TO GET TRACK STATE                      **
**                                                                   **
***********************************************************************
         SPACE 1
SCTNOTL  STH   R1,CKNRCPU          SAVE NUMBER OF RESIDUAL CPU'S
         MVI   CKSSTAT,CKTTRACK    OUR STATUS IS TRACK
         BR    RLINK               RETURN WRITE RECORD
         EJECT
***********************************************************************
**                                                                   **
**       "TRACK REQUEST" CHECK IF TIME IS EXPIRED                    **
**                                                                   **
***********************************************************************
         SPACE 1
SCTCKDIS TIME  BIN                 SET TIME IN R0 AND DATE IN R1
*                                  TIME IS IN BINARY 100TH OF SECONDS
*                                  DATE IS IN FORMAT X'00YYDDDF'
         CLI   CKRDATE+L'CKRDATE-1,0    DATE ALREADY SET ?         -EU-
         BE    *+L'*+8             NO, BYPASS DATE CHECK           -EU-
         CL    R1,CKRDATE          SAME DATE ?                     -EU-
         BNE   SCTDERR             NO, LOOP AGAIN                  -EU-
         S     R0,CKSTIME          GET TIME DISCREPANCY            -EU-
         C     R0,SCPDISC          CPU'S DISCONNECTED?
         BNH   SCTRRET             NO, LOOP AGAIN                  -EU-
         SPACE 1
***********************************************************************
**                                                                   **
**       DISCONNECT TIME HAS EXPIRED -- SET NUMBER OF ACTIVE CPU'S   **
**       AND ASK FOR A "LOCK" REQUEST                                **
**                                                                   **
***********************************************************************
         SPACE 1
         SEND  SCK0013I            DISCONNECT TIME HAS EXPIRED
         B     SCTCONT                                             -EU-
SCTDERR  SEND  SCK0004I            DISCONNECT DATE ERROR           -EU-
         OI    SCFLAGS,SCFDTERR    INDICATE DATE ERROR             -EU-
SCTCONT  SEND  SCK0015E            PARTIAL SYNCHRONIZATION WILL BE DONE
         MVI   CKREQ,CKRLOCK       NEW REQUEST IS TO LOCK
         MVI   CKCREQ,CKCRTL       SET CHAR REQUEST
         L     R1,SCPMAXC          LOAD MAX NUMBER OF CPU'S
         SH    R1,CKNRCPU          SUBSTRACT RESIDUAL
         STH   R1,CKNACPU          SAVE NUMBER OF ACTIVE CPU'S
SCTLOCK  BCTR  R1,0                NUMBER OF RESIDUAL CPU'S TO LOCK
         STH   R1,CKNRCPU          SAVE IT IN CHECKPOINT RECORD
         MVI   CKSSTAT,CKTLOCK     SET OUR STATUS TO 'LOCK'
         SPACE 1
***********************************************************************
**                                                                   **
**       COMPUTE WAIT TIME FOR LOCK STATE (SEEK*NACPU)               **
**                                                                   **
***********************************************************************
         SPACE 1
         L     R0,SCPSEEK          GET SEEK TIME
         MH    R0,CKNACPU          AND MULTIPLY BY NUMBER OF ACTIVE
*                                  CPU'S
         ST    R0,SCPLOCK          THIS IS THE LOCK TIME
         MVC   SCWTIME,SCPLOCK     SET WAIT TIME TO 'LOCK'
         SPACE 1
***********************************************************************
**                                                                   **
**       DETERMINE IF WE ARE THE ONLY ACTIVE CPU --                  **
**       WRITE A MESSAGE AND GO INTO A LONG WAIT IF SO               **
**                                                                   **
***********************************************************************
         SPACE 1
         LTR   R1,R1               IS NUMBER OF RESIDUAL CPU'S ZERO ?
         BNZ   SCTRRET             NO, SO QUIT + WRITE BACK CKPT   -EU-
         SEND  SCK0010I            NO OTHER ACTIVE CPU FOUND
         TM    SCFLAGS,SCFDTERR    DATE ERROR ?                    -EU-
         BO    RPNOWT              YES                             -EU-
         SEND  SCK0010W            WAITING FOR SYNCHRONIZATION
         SENDR SCK0010A            ASK IF SO ?                     -EU-
         B     RPWAIT              YES                             -EU-
         B     RPNOWT              NO                              -EU-
         SEND  SCK0010D            TERMINAL ERROR, NO ASSUMED      -EU-
RPNOWT   MVI   CKREQ,CKREND        REQUEST IS TO END               -EU-
         MVI   CKCREQ,CKCRND       REQUEST IS TO END (CHAR)        -EU-
         MVC   CKNRCPU,CKNACPU     NUMBER OF RESIDUAL IS AS ACTIVE -EU-
         B     SCTRRET             QUIT + WRITE BACK CKPT          -EU-
RPWAIT   MVC   SCWTIME,SCPWAIT     SET TIME TO WAIT
         MVI   CKREQ,CKRLWAIT      REQUEST IS TO WAIT
         MVI   CKCREQ,CKCRLW       SO IS CHAR REQUEST
         MVI   CKSSTAT,CKTWAIT     SET OUR STATUS TO "LONG WAIT"
         L     R1,SCPMAXC          LOAD MAX NUMBER OF CPU'S
         STH   R1,CKNACPU          SAVE IT IN CHECKPOINT
         STH   R1,CKNRCPU          ALSO SAVE RESIDUAL NUMBER
SCTRRET  L     RLINK,RLSAVE        RESTORE RETURN REGISTER         -EU-
         BR    RLINK               AND RETURN WRITE THE CKPT RECORD
         TITLE '-- PROCESS A LOCK REQUEST --'
***********************************************************************
**                                                                   **
**       LOCK REQUEST                                                **
**                                                                   **
***********************************************************************
         SPACE 1
SCLREQ   TM    CKFLAGS,CKFLOCK     ARE ALL CPU'S LOCKED ?
         BO    SCLTIME             YES, PROCESS AFTER ALL ARE LOCKED
         CLI   CKSSTAT,CKTLOCK     ARE WE ALREADY LOCKED?
         BER   RLINK               YES, SO RETURN TO CALLER
         SPACE 1
***********************************************************************
**                                                                   **
**       COMPUTE WAIT TIME FOR LOCK STATE (SEEK*NACPU)               **
**                                                                   **
***********************************************************************
         SPACE 1
         L     R0,SCPSEEK          GET SEEK TIME
         MH    R0,CKNACPU          AND MULTIPLY BY NUMBER OF ACTIVE
*                                  CPU'S
         ST    R0,SCPLOCK          THIS IS THE LOCK TIME
         MVC   SCWTIME,SCPLOCK     SET WAIT TIME TO 'LOCK'
         MVI   CKSSTAT,CKTLOCK     STATUS IS 'LOCKED'
         LH    R1,CKNRCPU          NUMBER OF RESIDUAL CPU'S TO LOCK
         BCT   R1,SCLCNT           NOT THE LAST, CONTINUE
         SPACE 1
***********************************************************************
**                                                                   **
**       WE WERE THE LAST CPU TO GET 'LOCKED'                        **
**                                                                   **
***********************************************************************
         SPACE 1
         MVC   CKNRCPU,CKNACPU     THIS NUMBER OF RESIDUAL I/O BEFORE
*                                  SET IS REACH
         STCK  CKSYSCLK            MOVE CLOCK TO CHECKPOINT
         BAS   RLINK2,SCCNORM      GO NORMALIZE THE CLOCK
         LH    R1,CKNACPU          GET NUMBER OF ACTIVE CPU'S
         BCTR  R1,0                SUBSTRACT ONE FROM IT (US)
         STH   R1,CKNRCPU          THIS NUMBER TO GET "TIME" MODE
         MVI   CKSSTAT,CKTTIME     SET OUR MODE TO "TIME"
         OI    CKFLAGS,CKFLOCK     AND INDICATE ALL CPU'S LOCKED
         BR    RLINK               GO BACK WRITE THE RECORD
SCLCNT   STH   R1,CKNRCPU          NUMBER OF RESIDUAL CPU'S TO GO
         BR    RLINK               RETURN WRITE THE RECORD
         SPACE 1
***********************************************************************
**                                                                   **
**       ALL CPU'S ARE LOCKED -- TIME SHOULD BE WRITTEN TO CKPT      **
**       TO DETERMINE THE ONE WHO GETS THE "BASE" CLOCK.             **
**                                                                   **
***********************************************************************
         SPACE 1
SCLTIME  CLI   CKSSTAT,CKTTIME     WE ALREADY GOT TIME MODE ?
         BNE   SCLREF              NO SO GO REFRESH CHECKPOINT
         SPACE 1
***********************************************************************
**                                                                   **
**       TIME MODE HAS ALREADY BEEN REACHED PRIOR TO NOW --          **
**       THIS MEANS THAT CPU'S DID NOT READ THE CHECKPOINT           **
**       IN SEQUENTIAL ORDER, SO TIME ACCURACY HAS BEEN LOST         **
**       IN TIME ESTIMATION                                          **
**                                                                   **
**       WRITE A WARNING MESSAGE AND CONTINUE PROCESSING             **
**                                                                   **
***********************************************************************
         SPACE 1
         ST    RLINK,RLSAVE        SAVE RETURN REGISTER            -EU-
         SEND  SCK0011I            TIME EST. MIGHT NOT BE ACCURATE
         L     RLINK,RLSAVE        RESTORE RETURN REGISTER         -EU-
         BR    RLINK               CONTINUE PROCESSING
         SPACE 1
***********************************************************************
**                                                                   **
**       REFRESH THE TIME IN CHECKPOINT RECORD                       **
**                                                                   **
***********************************************************************
         SPACE 1
SCLREF   STCK  CKSYSCLK            MOVE CLOCK TO CHECKPOINT RECORD
         BAS   RLINK2,SCCNORM      GO NORMALIZE THE CLOCK
         MVI   CKSSTAT,CKTTIME     SET OUR MODE TO "TIME REFRESHED"
         LH    R1,CKNRCPU          NUMBER OF RESIDUAL CPU'S TO REFRESH
         BCT   R1,SCLCNT           NOT THE LAST, CONTINUE
         SPACE 1
***********************************************************************
**                                                                   **
**       WE ARE THE LAST CPU TO GET 'REFRESHED'                      **
**       DETERMINE BASE TIME , SAVE IT IN CHECKPOINT AND             **
**       ASK FOR A "SET TIME" REQUEST.                               **
**                                                                   **
***********************************************************************
         SPACE 1
         XI    CKFLAGS,CKFLOCK     RESET 'LOCK' FLAG
         XC    CKSCLOCK,CKSCLOCK   RESET 'SET CLOCK' FIELD
         LH    R1,CKNACPU          LOAD NUMBER OF ACTIVE CPU'S
         PUSH  USING               SAVE USING STATUS
         DROP  RSENTRY             FORGET SYSTEM ENTRY ADDRESSABILITY
         LA    R2,CKSENTRY-CHECKPT-L'CKSENTRY(RBCKP)
*                                  POINT TO FIRST CPU ENTRY (- LENGTH)
         USING CKSYS,R2            SET ENTRIES ADDRESSABILITY
SCLTLP   LA    R2,L'CKSENTRY(R2)   POINT TO NEXT ENTRY
         CLI   CKSSTAT,CKTTIME     IS SYSTEM 'REFRESHED' ?
         BNE   SCLTLP              NO -- SO LOOP AGAIN
         CLI   SCPMTHD+3,BASECPU   BASE CPU METHOD ?               -EU-
         BNE   SCHIGH              NO, USE HIGHEST TIME            -EU-
         CLI   CKSREQ,CKTRFCPU     REFERENCE SYSTEM ?              -EU-
         BE    SCTSET              YES                             -EU-
         B     SCLOOP              NO -- SO DO NOT SWAP            -EU-
SCHIGH   CLC   CKSYSCLK,CKSCLOCK   IS TIME HIGHER THAN THE HIGHEST ?
         BNH   SCLOOP              NO -- SO DO NOT SWAP
SCTSET   MVC   CKSCLOCK,CKSYSCLK   MOVE TIME TO CHECKPOINT
SCLOOP   BCT   R1,SCLTLP           LOOP UNTIL ALL ARE SEARCHED
         DROP  R2                  NO MORE USED
         POP   USING               RESTORE OLD ADDRESSABILITY
         SPACE 1
***********************************************************************
**                                                                   **
**       BASE TIME HAS BEEN PLACED IN CHECKPOINT -- REQUEST SET TIME **
**                                                                   **
***********************************************************************
         SPACE 1
         MVC   CKNRCPU,CKNACPU     NUMBER OF RESIDUAL IS SAME AS TO SET
         MVI   CKREQ,CKRSET        REQUEST CODE IS TO 'SET' TIME
         MVI   CKCREQ,CKCRST       SO IS CHAR REQUEST
         BR    RLINK               RETURN WRITE THE RECORD
         TITLE '-- PROCESS A SET TIME REQUEST --'
***********************************************************************
**                                                                   **
**       REQUEST TO SET TIME -- ISSUE 'SET CLOCK' INSTRUCTION        **
**                                                                   **
**       CHECK FIRST IF TIME IS SET OR IF WE ARE THE BASE --         **
**       IF SO, DO NOT SET TIME ... IT IS ALREADY CORRECT            **
**                                                                   **
***********************************************************************
         SPACE 1
SCSTIME  CLI   CKSSTAT,CKTSET      ARE WE ALREADY SET ?
         BER   RLINK               IF SO, RETURN AT END OF PROCESS
         ST    RLINK,RLSAVE        SAVE RETURN REGISTER            -EU-
         CLC   CKSCLOCK,CKSYSCLK   ARE WE THE BASE ?
         BNE   SCSNOTH             NO, SO ISSUE A SET CLOCK INSTRUCTION
         SEND  SCK0014I            THIS CPU WILL BE USED AS REFERENCE
         OI    SCFLAGS,SCFNCMS     INDICATE NO CLOCK DONE          -EU-
         B     SCSUPD              GO RETURN UPDATE CHECKPOINT
         SPACE 1
***********************************************************************
**                                                                   **
**       GET CLOCK DISCREPANCY AND SAVE IT IN SCDCLOCK               **
**                                                                   **
***********************************************************************
         SPACE 1
SCSNOTH  BH    SCSADD                                              -EU-
         MVI   CKSREQ,CKTSUB       SUBSTRACT NEEDED                -EU-
         LM    R0,R1,CKSYSCLK      LOAD CLOCK INTO R0,R1 PAIR      -EU-
         SL    R1,CKSCLOCK+4       SUBSTRACT LOW ORDER SYS.CLOCK W.-EU-
         BC    12,*+L'*+2          IF NO CARRY, DO NOT INCR. HIGH  -EU-
         BCTR  R0,0                DECREASE HIGH ORDER WORD        -EU-
         SL    R0,CKSCLOCK         SUBSTRACT HIGH ORDER WORD       -EU-
         B     SCSCLKC                                             -EU-
SCSADD   MVI   CKSREQ,CKTADD       ADD NEEDED                      -EU-
         LM    R0,R1,CKSCLOCK      LOAD SYSTEM CLOCK INTO R0,R1 PAIR
         SL    R1,CKSYSCLK+4       SUBSTRACT LOW ORDER CLOCK WORD
         BC    12,*+L'*+2          IF NO CARRY, DO NOT INCREMENT HIGH
         BCTR  R0,0                DECREASE HIGH ORDER WORD
         SL    R0,CKSYSCLK         SUBSTRACT HIGH ORDER WORD
SCSCLKC  STM   R0,R1,SCDCLOCK      SAVE CLOCK DISCREPANCY          -EU-
         SPACE 1
***********************************************************************
**                                                                   **
**       VALIDATE DISCREPANCY -- IF NOT ACCEPTABLE, SEND WARN MSG    **
**                                                                   **
***********************************************************************
         SPACE 1
         CL    R0,=A(60*&MAXDISC)  IS DISCREPANCY HIGHER THAN     V1.01
*                                  MAXIMUM EXPECTED ?             V1.01
         BL    SCSDEPK             NO, ALL OK TO SET CLOCK        V1.01
*                                  DISCREPANCY IS MORE THAN MAX.  V1.01
*                                  MINUTES, CLOCK NOT SET -       V1.01
         @SNDMP CHECKPT,CKLEN,SNID=1    DEBUG IF REQUESTED         -EU-
         SEND  SCK0018E            ADVISE SYSTEM OPERATORS        V1.01
         OI    SCFLAGS,SCFNCMS     INDICATE NO CLOCK DONE          -EU-
         B     SCSUPD              PROCESS AS IF UPDATED          V1.01
         SPACE 1
***********************************************************************
**                                                                   **
**       WRITE THE OPERATOR A MSG TO DEPRESS "CLOCK KEY"             **
**                                                                   **
***********************************************************************
         SPACE 1
SCSDEPK  SEND  SCK0015A            PLEASE, DEPRESS TOD CLOCK KEY
         SPACE 1
***********************************************************************
**                                                                   **
**       ISSUE "SET CLOCK" INSTRUCTION --                            **
**       THIS REQUIRES TO BE IN SUPERVISOR MODE                      **
**                                                                   **
***********************************************************************
         SPACE 1
         TM    SCFLAGS,SCFTEST     ARE WE IN TSO ?                 -EU-
         BO    SCSSET              YES, BYPASS SUPERVISOR MODE     -EU-
         MODESET MODE=SUP          GET SUPERVISOR STATE
         LTR   R15,R15             IS IT RIGHT ?
         BZ    SCSSET              YES, CONTINUE PROCESSING
         DOM   MSGLIST=RDOM        DELETE TOD MESSAGE              -EU-
         SEND  SCK0002E            COULD NOT OBTAIN SUPERVISOR MODE
         B     SCERR               GO PROCESS THE ERROR
         SPACE 1
***********************************************************************
**                                                                   **
**       CALCULATE UPDATED CLOCK AND ISSUE SET CLOCK INSTRUCTION     **
**       UNTIL OPERATOR DEPRESS CLOCK KEY                            **
**                                                                   **
***********************************************************************
         SPACE 1
SCSSET   STCK  SCWDBLE             STORE CLOCK IN DOUBLE WORD
         LM    R0,R1,SCWDBLE       LOAD CLOCK IN R0,R1 PAIR
         CLI   CKSREQ,CKTADD       ADD REQUESTED ?                 -EU-
         BNE   SCSSUB              NO, SUBSTRACT                   -EU-
         AL    R1,SCDCLOCK+4       ADD CLOCK DISCREPANCY
         BC    12,*+L'*+4          IF CARRY, SHOULD ADD 1 TO HIGH
*                                  WORD OF RESULTANT CLOCK
         AL    R0,=A(1)            ADD 1 TO R0
         AL    R0,SCDCLOCK         ADD TO HIGH ORDER CLOCK WORD
         B     SCSSVCK                                             -EU-
SCSSUB   SL    R1,SCDCLOCK+4       SUBSTRACT CLOCK DISCREPANCY     -EU-
         BC    12,*+L'*+2          IF CARRY, SHOULD SUBSTRACT 1 TO -EU-
*                                  HIGH WORD OF RESULTANT CLOCK    -EU-
         BCTR  R0,0                SUBSTRACT 1 TO R0               -EU-
         SL    R0,SCDCLOCK         SUBSTRACT TO HIGH ORDER CLOCK W.-EU-
SCSSVCK  STM   R0,R1,SCWDBLE       SAVE CLOCK IN WORK DOUBLEWORD   -EU-
         TM    SCFLAGS,SCFTEST     ARE WE IN TSO ?                 -EU-
         BO    SCSUPD              YES, BYPASS SET CLOCK           -EU-
         SCK   SCWDBLE             SET CLOCK
         BC    7,SCSSET            IF NOT SET, GO BACK LOOP
         MVI   CKSSTAT,CKTSET      SET STATUS TO "TIME SET"       V1.03
         SPACE 1
***********************************************************************
**                                                                   **
**       OBTAIN PROGRAM MODE                                         **
**                                                                   **
***********************************************************************
         SPACE 1
         MODESET MODE=PROB         RESET MODE TO PROBLEM STATE
         DOM   MSGLIST=RDOM        DELETE TOD MESSAGE              -EU-
         SPACE 1
***********************************************************************
**                                                                   **
**       CLOCK IS UPDATED -- WRITE TIME TO CONSOLE                   **
**                                                                   **
***********************************************************************
         SPACE 1
SCSUPD   TIME  DEC                 SET TIME IN R0 AND DATE IN R1
*                                  TIME IS IN FORMAT X'HHMMSSTH'
*                                  DATE IS IN FORMAT X'00YYDDDF'
         STM   R0,R1,SCWPKBUF      SAVE TIME AND DATE IN PACK FORMAT
         TM    SCFLAGS,SCFTEST     ARE WE IN TSO ?                 -EU-
         BZ    SCSUPDX             NO, GO WRITE TIME               -EU-
         TM    SCFLAGS,SCFNCMS     SET CLOCK DONE ?                -EU-
         BO    SCSUPDX             NO, GO WRITE TIME               -EU-
         SPACE 1                                                   -EU-
***********************************************************************
**                                                                   **
**       PROVIDE TIME FROM TOD CLOCK VALUE                           **
**                                                                   **
***********************************************************************
         SPACE 1                                                   -EU-
         LM    R0,R1,SCWDBLE       GET TOD CLOCK VALUE             -EU-
         L     R15,CVTPTR          GET CVT ADDRESS                 -EU-
         USING CVT,R15                                             -EU-
         AL    R0,CVTTZ            ADD LOCAL TIME DEVIATION        -EU-
         DROP  R15                                                 -EU-
         SRDL  R0,12               ISOLATE NUMBER OF MICROSECONDS  -EU-
*                                  DIVIDE BY 1 MINUTE IN MICS      -EU-
         D     R0,=A(60*1000000)        (R1=MINUTES AFTER EPOCH)   -EU-
         LR    R15,R0              REMAINDER OF MICS TO GET SECS   -EU-
         XR    R14,R14             CLEAR FOR DIVIDE                -EU-
         D     R14,=F'1000000'     DIVIDE BY 1 SECOND IN MICS      -EU-
         CVD   R15,SCWDBLE         CONVERT SECONDS TO PACKED FORMAT-EU-
         L     R15,SCWDBLE+4                                       -EU-
         SRL   R15,4                                               -EU-
         STC   R15,SCWPKBUF+2      SET THE SECONDS                 -EU-
         CVD   R1,SCWDBLE          CONVERT MINUTES TO PACKED FORMAT-EU-
         DP    SCWDBLE,=PL2'+60'   DIVIDE INTO HOURS AND MINUTES   -EU-
         L     R15,SCWDBLE+4                                       -EU-
         SRL   R15,4                                               -EU-
         STC   R15,SCWPKBUF+1      SET THE MINUTES                 -EU-
         ZAP   SCWDBLE,SCWDBLE(6)  RESET TO FULL LENGTH            -EU-
         DP    SCWDBLE,=PL2'+24'   DIVIDE INTO DAYS AND HOURS      -EU-
         L     R15,SCWDBLE+4                                       -EU-
         SRL   R15,4                                               -EU-
         STC   R15,SCWPKBUF        SET THE HOURS                   -EU-
         SPACE 1
***********************************************************************
**                                                                   **
**       MOVE DATE TO MESSAGE                                        **
**                                                                   **
***********************************************************************
         SPACE 1
SCSUPDX  L     R2,=A(SCK0019I)     MESSAGE POINTER                 -EU-
         AL    R2,=V(MSDATA)       WTO MESSAGE ADDRESS             -EU-
         LA    R2,4(R2)            POINT TO MESSAGE TEXT           -EU-
         USING SCDWMSG,R2          SET DUMMY MESSAGE ADDRESSABILITY
         UNPK  SCWDBLE(5),SCWPKBUF+5(3)
*                                  UNPACK DATE TO WORK FIELD
         MVC   SCDWDAT(2),SCWDBLE  MOVE YEAR AND DAY INTO MESSAGE
         MVC   SCDWDAT+3(3),SCWDBLE+2
         SPACE 1
***********************************************************************
**                                                                   **
**       MOVE HOURS, MINUTES AND SECONDS TO MESSAGE                  **
**                                                                   **
***********************************************************************
         SPACE 1
         UNPK  SCWDBLE,SCWPKBUF(4) UNPACK TIME TO WORK FIELD
         MVC   SCDWTIM(2),SCWDBLE+1
         MVC   SCDWTIM+3(2),SCWDBLE+3
         MVC   SCDWTIM+6(2),SCWDBLE+5
*                                  TIME IS NOW HH.MM.SS,
         SEND  SCK0019I            DATE IS YY.DDD
         DROP  R2                  DROP MESSAGE ADDRESSABILITY
         SPACE 1
***********************************************************************
**                                                                   **
**       UPDATE THE CHECKPOINT RECORD                                **
**                                                                   **
***********************************************************************
         SPACE 1
         MVC   SCWTIME,SCPTRACK    SET TRACK TIME
         LH    R1,CKNRCPU          NUMBER OF CPU'S TO REACH THE "SET"
         SH    R1,=H'1'            MINUS ONE (BECAUSE WE NOW ARE)
         BP    SCWRWT              HIGH, THERE ARE STILL SOME TO RUN
         MVI   CKREQ,CKREND        REQUEST IS TO END
         MVI   CKCREQ,CKCRND       REQUEST IS TO END (CHAR)
         MVC   CKNRCPU,CKNACPU     NUMBER OF RESIDUAL IS AS ACTIVE
         B     SCWRET              RETURN WRITE THE UPDATED RECORD -EU-
SCWRWT   STH   R1,CKNRCPU          NUMBER OF RESIDUAL CPU'S TO PROCESS
SCWRET   L     RLINK,RLSAVE        RESTORE RETURN REGISTER         -EU-
         BR    RLINK               RETURN TO CALLER
         TITLE '-- NORMALIZE CLOCK TIME --'
***********************************************************************
**                                                                   **
**       NORMALIZE CLOCK TIME                                        **
**                                                                   **
**       WE MUST NORMALIZE THE TIME BY ADDING TO IT :                **
**       1. THE 'SEEK' TIME, MULTIPLIED BY RESIDUAL NUMBER OF I/O    **
**          BEFORE 'TIME SETTING'. BIT 51 OF THE CLOCK HAS THE       **
**          VALUE 1 MICROSECOND, SO, TO BE ACCURATE, SEEK TIME       **
**          SHOULD BE MULTIPLIED BY 10000 (TO GIVE IN MICROSECONDS)  **
**          AND SHIFT LEFT 12 BITS. THIS RESULT SHOULD BE ADDED TO   **
**          SECOND WORD OF THE CLOCK.                                **
**       2. THE DIFFERENCE BETWEEN LOCAL TIME AND GREENWICH MEAN -EU-**
**          TIME (CVTTZ). THIS IS EXPRESSED IN BINARY UNITS OF   -EU-**
**          1.048576 SECONDS, AND THUS SHOULD BE ADDED TO FIRST  -EU-**
**          WORD OF THE CLOCK.                                   -EU-**
**                                                                   **
**       -- LINK REGISTER IS RLINK2                                  **
**                                                                   **
***********************************************************************
         SPACE 1
SCCNORM  LH    R1,CKNRCPU          GET NUMBER OF RESIDUAL CPU'S.
*                                  THIS IS THE NUMBER OF I/O TO DO
*                                  ON THE CHECKPOINT DATA-SET BEFORE
*                                  TIME WILL BE SET
         XR    R0,R0               CLEAR REGISTER
         M     R0,SCPSEEK          MULTIPLY BY SEEK TIME
         MH    R1,=H'10000'        GET NUMBER OF MICROSECONDS
         SLL   R1,12               AND ALIGN IT TO BIT 51
         SPACE 1
***********************************************************************
**                                                                   **
**       NORMALISATION TIME IS IN R1 -- UPDATE CKSYSCLK FIELD        **
**                                                                   **
***********************************************************************
         SPACE 1
         AL    R1,CKSYSCLK+4       ADD TO TIME TO BE SET
         L     R0,CKSYSCLK         LOAD HIGH CLOCK WORD
         BC    12,*+L'*+4          IF OVERFLOW, SHOULD ADD 1 TO HIGH
*                                  WORD
         AL    R0,=A(1)            ADD 1 TO HIGH ORDER CLOCK WORD
         L     R15,CVTPTR          GET CVT ADDRESS                 -EU-
         USING CVT,R15                                             -EU-
         AL    R0,CVTTZ            ADD LOCAL TIME DEVIATION        -EU-
         MVC   CKCVTTZ,CVTTZ       TRACE DEVIATION                 -EU-
         DROP  R15                                                 -EU-
         STM   R0,R1,CKSYSCLK      AND SAVE IT IN CHECKPOINT
         BR    RLINK2              RETURN TO CALLER
         TITLE '-- RETURN TO CALLER, TERMINATE PROGRAM --'
***********************************************************************
**                                                                   **
**       WRITE BACK THE RECORD TO FREE THE LOCK AND RETURN           **
**                                                                   **
***********************************************************************
         SPACE 1
SCRETURN BAS   RLINK,SCWRITE       WRITE THE RECORD
         B     SCERR               IF AN ERROR OCCURS
         B     SCRETN              RETURN TO CALLER
         SPACE 1
***********************************************************************
**                                                                   **
**       PROCESS ERROR                                               **
**                                                                   **
***********************************************************************
         SPACE 1
SCERR    SEND  SCK0003E            ERROR ENCOUNTERED, PROCESS ENDED
         SPACE 1
***********************************************************************
**                                                                   **
**       PROGRAM TERMINATION                                         **
**                                                                   **
***********************************************************************
         SPACE 1
SCRETN   @SNDMP WORK,WORKLEN,SNID=255   DEBUG IF REQUESTED         -EU-
         CALL  EXDMP               PROCESS SNAP-DUMP IF ANY        -EU-
         L     RSAVE,AREA+4        LOAD BACK SAVE REGISTER         -EU-
         LR    R1,RWORK            WORK AREA ADDRESS               -EU-
         LA    R0,WORKLEN          WORK AREA LENGTH                -EU-
         FREEMAIN R,LV=(0),A=(1)   FREE LOCAL WORK STORAGE         -EU-
         LM    R14,R12,12(RSAVE)   AND THE CALLER'S REGISTERS
         XR    RCODE,RCODE         SET RETURN CODE TO ZERO
         BR    RLINK               RETURN TO CALLER
         TITLE '-- OBTAIN THE LOCK AND GET THE CHECKPOINT RECORD --'
***********************************************************************
**                                                                   **
**       OBTAIN THE LOCK AND GET THE CHECKPOINT RECORD               **
**                                                                   **
***********************************************************************
         SPACE 1
SCGETREC STM   R14,R12,AREA2+12    SAVE REGISTERS
SCGLOOP  LA    R1,SCPLOCK          LOAD THE WAIT TIME ADDRESS
         STIMER WAIT,              WAIT FOR TIME TO ELAPSE             *
               BINTVL=(R1)         ADDRESS SPECIFIED BY R1
         MVC   CKHKEY(4),=X'FFFFFFFF'
*                                  MOVE 'LOCK' KEY INTO BUFFER
         MVC   CKLKSID,SCSYSID     AND ALSO SYSTEM ID (HOLDING)
         LA    RPARM,CPRDCK        'READ THE CHECKPOINT RECORD' CCW
         BAS   RLINK,EXCP          READ THE CHECKPOINT RECORD
         B     SCGTERR             GET ERROR
         SPACE 1
***********************************************************************
**                                                                   **
**       READ WAS SUCCESSFUL -- SEE IF THE CHECKPOINT IS FREE        **
**                                                                   **
***********************************************************************
         SPACE 1
         CLC   CKLKSID,SCSYSID     IS THE KEY OBTAINED ?
         BNE   SCGLOOP             NO, SO TRY AGAIN
         LM    R14,R12,AREA2+12    LOAD BACK CALLER'S REGISTERS
         B     4(RLINK)            RETURN TO CALLER
SCGTERR  LM    R14,R12,AREA2+12    LOAD BACK CALLER'S REGISTERS
         BR    RLINK               RETURN TO CALLER -- ERROR OFFSET
         EJECT
***********************************************************************
**                                                                   **
**       'READ CHECKPOINT RECORD' CCW -- OBTAIN THE LOCK IF FREE     **
**                                                                   **
***********************************************************************
         SPACE 1
CPRDCK   DS    0D
         CCW   CWSKHD,CPSEEKBB,CWCC,6      - SEEK HEAD
         CCW   CWSIDEQ,CPSEEKCC,CWCC,5     - SEARCH ID EQUAL
         CCW   CWTIC,*-8,CWCC,1            - TIC *-8
         CCW   CWSKEYEQ,CPKFREE,CWCC,8     - SEARCH KEY EQUAL
         CCW   CWTIC,CPLOCKED,CWCC,1       - TIC CPLOCKED  (NOT FOUND)
         SPACE 1
         CCW   CWRDDATA,*-*,CWCC,CKLEN-8   - READ DATA
CPRBUF1  EQU   *-8+1,3,C'A'                DATA ADDRESS (TO BE READ)
         SPACE 1
         CCW   CWSKHD,CPSEEKBB,CWCC,6      - SEEK HEAD
         CCW   CWSIDEQ,CPSEEKCC,CWCC,5     - SEARCH ID EQUAL
         CCW   CWTIC,*-8,CWCC,1            - TIC *-8
         CCW   CWWRKD,*-*,0,CKLEN          - WRITE KEY AND DATA (STOP)
CPRBUF2  EQU   *-8+1,3,C'A'                DATA/KEY ADDRESS TO WRITE
         SPACE 1
CPLOCKED CCW   CWSKHD,CPSEEKBB,CWCC,6      - SEEK HEAD
         CCW   CWSIDEQ,CPSEEKCC,CWCC,5     - SEARCH ID EQUAL
         CCW   CWTIC,*-8,CWCC,1            - TIC *-8
         CCW   CWRDKDT,*-*,0,CKLEN         - READ KEY AND DATA
CPRBUF3  EQU   *-8+1,3,C'A'                KEY/DATA ADDRESS
      TITLE '-- WRITE THE CHECK POINT RECORD AND RELEASE THE LOCK --'
***********************************************************************
**                                                                   **
**       WRITE THE CKECKPOINT RECORD AND RELEASE THE LOCK            **
**                                                                   **
***********************************************************************
         SPACE 1
SCWRITE  STM   R14,R12,AREA2+12    SAVE REGISTERS
         XC    CKHKEY,CKHKEY       CLEAR FREE LOCK
         MVC   CPSEEKCW,CPSEEKCC   INIT SEEK ADDRESS
         MVI   CPSEEKCW+4,X'00'    BUT SEARCH FOR RECORD ZERO
         LA    RPARM,CPWRCK        WRITE RECORD CCW
         BAS   RLINK,EXCP          WRITE THE RECORD
         B     SCWERR              WRITE ERROR
         LM    R14,R12,AREA2+12    LOAD BACK CALLER'S REGISTERS
         B     4(RLINK)            RETURN TO CALLER
SCWERR   LM    R14,R12,AREA2+12    LOAD BACK CALLER'S REGISTERS
         BR    RLINK               RETURN TO CALLER -- ERROR OFFSET
         SPACE 1
***********************************************************************
**                                                                   **
**       'WRITE CHECKPOINT RECORD' CCW                               **
**                                                                   **
***********************************************************************
         SPACE 1
CPWRCK   DS    0D
         CCW   CWSKHD,CPSEEKBB,CWCC,6        - SEEK HEAD
         CCW   CWSIDEQ,CPSEEKCW,CWCC,5       - SEARCH ID EQUAL
         CCW   CWTIC,*-8,CWCC,1              - TIC *-8
         CCW   CWWRCKD,*-*,0,CKLEN+L'SCCKCNT - WRITE COUNT KEY AND DATA
         SPACE 1
CPWBUFA  EQU   *-8+1,3,C'A'                  DATA ADDRESS
         TITLE '-- READ AND INITIALIZE THE INPUT PARAMETERS --'
***********************************************************************
**                                                                   **
**       READ AND INITIALIZE THE INPUT PARAMETERS                    **
**                                                                   **
**       THIS  SUBROUTINE WILL SET DEFAULT PARAMETERS. IT WILL       **
**       THEN OPEN PARMLIB DATA-SET AND READ THE SPECIFIED           **
**       PARAMETERS. IF NO &SETPARM DDNAME IS ALLOCATED, DEFAULTS    **
**       PARAMETERS ONLY WILL BE USED (AND MESSAGE WILL BE ISSUED)   **
**                                                                   **
**       IF ANY ERROR IS ENCOUNTERED WITHIN THE PARAMETERS,          **
**       MESSAGE IS PRINTED AND EXECUTION IS TERMINATED              **
**                                                                   **
***********************************************************************
         SPACE 1
READPARM STM   R14,R12,12(R13)    SAVE REGISTERS
         LA    R15,AREA2          POINT TO OUR SAVE AREA
         ST    R13,4(R15)         SAVE CALLER'S SAVEAREA ADDRESS
         ST    R15,8(R13)         AND CHAIN BACK SAVEAREAS
         LR    R13,R15            AND FINALLY GET OUR SAVEAREA POINTER
         SPACE 1
***********************************************************************
**                                                                   **
**       INITIALIZE PARAMETERS BY SETTING DEFAULTS                   **
**                                                                   **
***********************************************************************
         SPACE 1
         MVC   SCPMAXC,=A(MAXCPUD) -- MAX NUMBER OF CPU'S
         MVC   SCPWAIT,=A(LONGWT)  -- LONG WAIT DEFAULT
         MVC   SCPTRACK,=A(TRAKWT) -- TRACK WAIT DEFAULT
         MVC   SCPSEEK,=A(SEKTIM)  -- SEEK TIME
         MVC   SCPDISC,=A(DISTIME) -- DISCONNECT TIME
         XC    SCPMTHD,SCPMTHD     -- SYNCH. METHOD NO.            -EU-
         XC    SCPSNF,SCPSNF       -- SNAP-ID INDICATORS           -EU-
         CALL  LPARMS              LOAD INPUT PARAMETERS
         EJECT
***********************************************************************
**                                                                   **
**       LOAD INPUT PARAMETERS                                       **
**                                                                   **
***********************************************************************
         SPACE 1
         B     READPXIT            EXIT, SUCCESSFULL
         L     RSAVE,4(RSAVE)      LOAD BACK PREVIOUS SAVE AREA
         LM    R14,R12,12(RSAVE)   RELOAD REGISTERS
         B     0(RLINK)            RETURN AFTER ERROR IN PARMS DATA-SET
         SPACE 1
***********************************************************************
**                                                                   **
**       COMPUTE INITIAL LOCK WAIT TIME AND RETURN                   **
**                                                                   **
***********************************************************************
         SPACE 1
READPXIT L     R1,SCPSEEK          GET SEEK TIME
         MH    R1,SCPMAXC+2        MULTIPLY BY MAX NUMBER OF CPU'S
         ST    R1,SCPLOCK          THIS IS COMPUTED LOCK TIME
         L     RSAVE,4(RSAVE)      LOAD BACK PREVIOUS SAVE AREA
         LM    R14,R12,12(RSAVE)   RELOAD REGISTERS
         B     4(RLINK)            RETURN OK
         TITLE '-- E X C P - EXECUTE THE SPECIFIED CHANNEL PROGRAM --'
***********************************************************************
**                                                                   **
**       EXECUTE THE CHANNEL PROGRAM                                 **
**                                                                   **
**           THE PURPOSE OF THIS ROUTINE IS TO INTERFACE WITH        **
**       THE OPERATING SYSTEM TO DO I/O ON THE CKECKPOINT DATA-SET   **
**                                                                   **
**           WHEN CONTROL WILL BE RETURNED TO THE CALLER,            **
**       THE I/O WILL BE COMPLETED SINCE CP EXCP ISSUES A            **
**       'WAIT' SVC UNTIL COMPLETION OF THE I/O OPERATION            **
**                                                                   **
**       PARAMETERS :                                                **
**                                                                   **
**       INPUT : RPARM -  POINTS TO THE CHANNEL PROGRAM TO           **
**                           BE EXECUTED                             **
**                                                                   **
**       OUTPUT : RETURN LOCATION DEPENDS UPON I/O COMPLETION        **
**                           0(RLINK)  UNCORRECTABLE I/O ERROR       **
**                           4(RLINK)  SUCCESSFULL                   **
**                                                                   **
***********************************************************************
         SPACE 1
EXCP     ST    RLINK,CPXSAVE       SAVE LINK REGISTER
         STM   R2,R5,CPXSAVE+4     AND SOME OTHER REGISTERS
         LA    R3,SCIOB            IOB ADDRESS
         USING IOBSTDRD,R3         SET ADDRESSABLILTY OF DSECT
         XC    SCECB,SCECB         CLEAR EVENT CONTROL BLOCK
         XC    IOBSENS0(2),IOBSENS0
*                                  CLEAR SENS BYTES
         MVI   IOBECBCC,X'00'      CLEAR CONDIITON CODE IN IOB
         XC    IOBCSW,IOBCSW       CLEAR CSW
         ST    RPARM,IOBSTART      SET CHANNEL PROGRAM ADDRESS
         MVC   IOBSEEK,CPSEEK      MOVE SEEK ADDRESS IN IOB
         SPACE 1
***********************************************************************
**                                                                   **
**       EXECUTE THE I/O AND WAIT FOR COMPLETION                     **
**                                                                   **
***********************************************************************
         SPACE 1
         LA    RPARM,SCIOB         LOAD IOB ADDRESS IN PARM REGISTER
         EXCP  (1)                 EXECUTE CHANNEL PROGRAM
         WAIT  ECB=SCECB           WAIT FOR THE I/O COMPLETION
         SPACE 1
***********************************************************************
**                                                                   **
**       ANALYZE  I/O COMPLETION CODES AND RETURN TO CALLER          **
**                                                                   **
***********************************************************************
         SPACE 1
         CLI   SCECB,ECBNORM       NORMAL COMPLETION?
         BE    SCRT                RETURN TO CALLER IF SO
         CLI   SCECB,ECBPERR       INDICATING PERMANENT I/O ERROR ?
         BE    SCNOTFND            YES, MAY BE NOT FOUND
         CLI   SCECB,ECBDAEA       DID WE HAVE AN END OF EXTEND ?
         BNE   SCIOERR             NO, MEANS I/O ERROR
         TM    IOBSENS1,IOBS1B2    TEST FOR AN END OF CYLINDER
         BZ    SCIOERR             NO, I/O ERROR
SCNOTFND XR    R1,R1               CLEAR REGISTER
         ICM   R1,B'0111',IOBCMDA  POINT TO COMMAND WORD
         CLI   0(R1),CWTIC         IS IT A TIC ?
         BNE   SCIOERR             NO, I/O ERROR
         SH    R1,=H'8'            POINT TO COMMAND
         TM    0(R1),X'21'         ONE OF THE SEARCH CMDS ?
         BO    SCRT                YES, RETURN, NOT FOUND
         SPACE 1
***********************************************************************
**                                                                   **
**       PERMANENT I/O ERROR ON THE CHECKPOINT DATA-SET --           **
**       RETURN TO CALLER WITH ERROR OFFSET                          **
**                                                                   **
***********************************************************************
         SPACE 1
SCIOERR  SEND  SCK0007E            I/O ERROR ON THE CHECKPOINT DATA-SET
         L     RLINK,CPXSAVE       RESTORE LINK REGISTER
         LM    R2,R5,CPXSAVE+4     AND SOME OTHER
         BR    RLINK               RETURN TO CALLER WITH ERROR
         SPACE 1
***********************************************************************
**                                                                   **
**       I/O TERMINATED NORMALLY -- RETURN TO CALLER                 **
**                                                                   **
***********************************************************************
         SPACE 1
SCRT     L     RLINK,CPXSAVE       RESTORE LINK REGISTER
         LM    R2,R5,CPXSAVE+4     AND SOME OTHER
         B     4(RLINK)            RETURN TO CALLER (GOOD)
         TITLE '-- E X C P - DATA AREAS AND EXECUTED INSTRUCTIONS --'
***********************************************************************
**                                                                   **
**       I/O ROUTINE EQUATES                                         **
**                                                                   **
***********************************************************************
         SPACE 1
ECBNORM  EQU   X'7F'               NORMAL COMPLETION
ECBPERR  EQU   X'41'               PERMANENT ERROR COMPLETION
ECBDAEA  EQU   X'42'               END OF EXTENT COMPLETION
         SPACE 1
***********************************************************************
**                                                                   **
**       DATA  AREAS AND CONSTANTS                                   **
**                                                                   **
***********************************************************************
         SPACE 1
SCECB    DC    F'0'                EVENT CONTROL BLOCK FOR I/O
CPXSAVE  DS    (1+4)F              CPEXCP SAVE AREA
         SPACE 1
***********************************************************************
**                                                                   **
**       EXCP PARAMETER BLOCK (IOB)                                  **
**                                                                   **
***********************************************************************
         SPACE 1
SCIOB    DC    0F'0'               BEGINNING OF IOB
         DC    AL1(IOBDATCH+IOBCMDCH+IOBUNREL,0,0,0)
         DC    A(SCECB)            ECB PTR
         DC    A(00,00)
         DC    A(*-*)              START OF CH. PROG.
         DC    A(SYSCKPT)          DCB ADDRESS
         DC    A(00,00)
         DC    XL8'00'             IOBSEEK
         SPACE 1
***********************************************************************
**                                                                   **
**       DATA AREAS AND EXECUTED INSTRUCTIONS                        **
**                                                                   **
***********************************************************************
         SPACE 1
CPSEEK   DC    0D'0'               SEEK ADDRESS FOR IOB
CPSEEKM  DC    FL1'0'              -- EXTEND NUMBER : ZERO
CPSEEKBB DC    FL2'0'              -- BINARY NUMBER : ZERO
CPSEEKCC DC    XL2'0000'           -- CYLINDER NUMBER
CPSEEKHH DC    XL2'0000'           -- HEAD NUMBER
CPSEEKR  DC    XL1'00'             -- RECORD NUMBER
CPSEEKCW DS    XL5                 SEEK ADDRESS FOR WRITE (RECORD 0)
         EJECT
***********************************************************************
**                                                                   **
**       CCW EQUATES  -- CHANNEL COMMAND CODES                       **
**                                                                   **
***********************************************************************
         SPACE 1
CWSKHD   EQU   X'1B'               --  SEEK HEAD
CWSSCTR  EQU   X'23'               --  SET SECTOR
CWSHOME  EQU   X'39'               --  SEARCH HOME ADDRESS
CWSIDEQ  EQU   X'31'               --  SEARCH ID EQUAL
CWSKEYEQ EQU   X'29'               --  SEARCH KEY EQUAL
CWSKHIGH EQU   X'49'               --  SEARCH KEY HIGH
CWSKHEQ  EQU   X'69'               --  SEARCH KEY HIGH OR EQUAL
CWRDCNT  EQU   X'12'               --  READ COUNT
CWRDDATA EQU   X'06'               --  READ DATA
CWRDKDT  EQU   X'0E'               --  READ KEY AND DATA
CWRDCKD  EQU   X'1E'               --  READ COUNT, KEY AND DATA
CWWRCKD  EQU   X'1D'               --  WRITE COUNT, KEY AND DATA
CWWRDAT  EQU   X'05'               --  WRITE DATA
CWWRKD   EQU   X'0D'               --  WRITE KEY AND DATA
CWTIC    EQU   X'08'               --  TRANSFER IN CHANNEL
CWNOP    EQU   X'03'               --  NO OPERATION
CWMTRK   EQU   X'80'               MULTI TRACK FEATURE BIT
         SPACE 1
***********************************************************************
**                                                                   **
**       CCW EQUATES  -- FLAGS                                       **
**                                                                   **
***********************************************************************
         SPACE 1
CWCD     EQU   X'80'               --  CHAIN ON DATA
CWCC     EQU   X'40'               --  CHAIN ON COMMAND
CWSILI   EQU   X'20'               --  SUPPRESS INCORRECT LENGTH
CWSKIP   EQU   X'10'               --  SUPPRESS TRANSFER OF
*                                      INFORMAITON TO MAIN STORAGE
CWPCI    EQU   X'08'               --  PROGRAM CONTROLLED
*                                      INTERRUPTION
         TITLE '-- D C B S - PROGRAM DATA CONTROL BLOCKS --'
***********************************************************************
**                                                                   **
**       DCB USED TO PROCESS CHECKPOINT DATA-SET                     **
**                                                                   **
***********************************************************************
         SPACE 1
         PUSH  PRINT               SAVE PRINT STATUS
         PRINT  ON,NOGEN           DO NOT EXPAND THE MACRO
         SPACE 1
SYSCKPT  DCB   DDNAME=&SYSCKPT,    CHECKPOINT DDNAME                   +
               MACRF=(E),          USING 'EXCP'                        +
               RECFM=F,            FIXED LENGTH RECORD                 +
               DSORG=DA,           DIRECT ACCESS DATA-SET              +
               KEYLEN=8            USE A 8 BYTES KEY (LOCK INDICATOR)
         POP   PRINT               RESTORE PRINT STATUS
         TITLE '-- CONSTANTS, TABLES, ETC... --'
***********************************************************************
**                                                                   **
**       CONSTANTS                                                   **
**                                                                   **
***********************************************************************
         SPACE 1
CPKFREE  DC    X'0000000000000000' FREE CHECKPOINT RECORD KEY
RESET    DC    C'RESET'            RESET KEY WORD
SCANT    DC    C'SCAN'             SCAN KEY WORD                   -EU-
SCBL     DC    CL8' '              8 BLANKS
SCKLDL   DC    AL1(L'CKHKEY)       LENGTH COUNT FIELD -- KEY
         DC    AL2(CKLEN-L'CKHKEY)                    -- DATA
         SPACE 2
***********************************************************************
**                                                                   **
**       LITTERAL POOL                                               **
**                                                                   **
***********************************************************************
         SPACE 1
         LTORG ,                   EXCP LITTERAL POOL
         SPACE 2
***********************************************************************
**                                                                   **
**       TABLES                                                      **
**                                                                   **
***********************************************************************
         SPACE 1
SCXTBL   SETCTRT ,                 GENERATE SID SEARCH TABLE
         TITLE '-- L P A R M S - LOAD INPUT PARAMETERS --'
***********************************************************************
**                                                                   **
**                      ----  L P A R M S  ----                      **
**                                                                   **
**           THIS SUBROUTINE, CALLED BY UTILITIES PROCESSOR, WILL    **
**       LOAD INPUT PARAMETERS SPECIFIED BY PARMLIB DATA-SET         **
**                                                                   **
**           -- INPUT :  RPARM    N/A                                **
**                       RLINK    RETURN ADDRESS                     **
**                                                                   **
**           -- OUTPUT : RCODE = 0  PARMS SUCCUSSFULLY READ          **
**                       RCODE = 4  PARMS ERROR ENCOUNTERED          **
**                                                                   **
***********************************************************************
         SPACE 1
LPARMS   $SUB  ,                   LOAD INPUT PARAMETERS SUBROUTINE
         EJECT
***********************************************************************
**                                                                   **
**       TRY TO OPEN PARMLIB DATA-SET. IF OPEN FAILS, SEND MSG       **
**       AND USE DEFAULTS                                            **
**                                                                   **
***********************************************************************
         SPACE 1
         OPEN  (SETPARM,INPUT)     OPEN PARMLIB, INPUT MODE
         TM    SETPARM+DCBOFLGS-IHADCB,DCBOFOPN
*                                  DID THE DATA-SET OPENED PROPERLY ?
         BO    LPAPGET             YES, CONTINUE PROCESSING
         SEND  SCK0009E            SETPARM NOT ALLOC., USING DEFAULTS
         B     LPAPEOD             RETURN USING DEFAULTS
         SPACE 1
***********************************************************************
**                                                                   **
**       SYSPARM DATA-SET SUCCESSFULLY OPENED                        **
**                                                                   **
***********************************************************************
         SPACE 1
LPAPGET  GET   SETPARM             GET INPUT CARD WITH QSAM
         MVC   SCPSTCB+SBTXT-SCANTCB(L'SBTXT),0(R1)
*                                  MOVE BUFFER TO SCAN TEXT CTL BLOCK
         LH    R1,SETPARM+DCBLRECL-IHADCB
*                                  GET TOTAL RECORD LENGTH
         SH    R1,=H'8'            SUBSTRACT SEQUENCE FIELD LENGTH
         STH   R1,SCPSTCB+SBTXTLN-SCANTCB
*                                  SAVE LENGTH TO BE SCANNED IN STCB
LPAPSCN  LA    RPARM,SCPSTCB       POINT TO SCANTCB
         CALL  RDPARM              READ PARAMETER LINE
         B     LPAPSCN             GO SCAN NEW KEYWORD WITHIN BUFFER
         B     LPAPGET             GO GET NEW BUFFER
         OI    SCPFLAGS,SCPFPERR   INDICATE PARSE ERROR
         B     LPAPSCN             CONTINUE SCAN WITHIN SAME BUFFER
         SPACE 1
***********************************************************************
**                                                                   **
**       END OF FILE ENCOUNTERED ON PARMLIB DATA-SET --              **
**       FREE/CLOSE IT AND RETURN TO CALLER WITH RCODE ZERO          **
**                                                                   **
***********************************************************************
         SPACE 1
LPAPEOD  CLOSE SETPARM             CLOSE/FREE DCB
         XR    RCODE,RCODE         CLEAR RETURN CODE
         TM    SCPFLAGS,SCPFPERR   TEST IF ANY PARSE ERROR
         BZ    LPAEXIT             NONE, EXIT RETURN CODE ZERO
         LA    RCODE,4             SET RETURN CODE = 4
LPAEXIT  $SUBRET                   RETURN TO CALLER
         TITLE '-- L P A R M S - DATA CONTROL BLOCKS DEFNITIONS --'
***********************************************************************
**                                                                   **
**       DATA CONTROL BLOCKS DEFINITIONS AND CONSTANTS               **
**                                                                   **
***********************************************************************
         SPACE 1
         PUSH  PRINT               SAVE PRINT STATUS
         PRINT  ON,NOGEN           DO NOT EXPAND THE MACROS
         SPACE 1
SETPARM  DCB   DDNAME=&SETPARM,    PARAMETER LIBRARY DDNAME            *
               MACRF=(GL),         USING GET LOCATE                    *
               RECFM=FB,           FIXED BLOCKED RECORDS               *
               EODAD=LPAPEOD,      WHEN END REACHED                    *
               DSORG=PS            SEQUENTIAL
         SPACE 1
         POP   PRINT               RESTORE PRINT STATUS
         SPACE 1
***********************************************************************
**                                                                   **
**       LITERAL POOL FOR LPARMS                                     **
**                                                                   **
***********************************************************************
         SPACE 1
         LTORG ,                   LITERAL POOL
         TITLE '-- R D P A R M - READ A PARAMETERS LINE --'
***********************************************************************
**                                                                   **
**                      ----  R D P A R M  ----                      **
**                                                                   **
**           THIS SUBROUTINE WILL READ AND PRINT THE PARAMETER       **
**       SPECIFIED BY INPUT REGISTER                                 **
**                                                                   **
**           -- INPUT :  RPARM    POINTER TO "READY" SCAN TCB        **
**                       RLINK    RETURN ADDRESS                     **
**                       SCPFLAGS IN REQWA IS SET TO 1 IF WE         **
**                                + ARE ENTERING FOR SAME KEYWORD    **
**                                                                   **
**           -- OUTPUT : MESSAGE IS SENT TO OPERAROR FOR PARAMETER   **
**                       RCODE = 0  KEYWORD COMPLETELY PARSED        **
**                       RCODE = 4  NEW TEXT LINE IS EXPECTED        **
**                                  TO CONTINUE PARSING              **
**                       RCODE = 8  PARSE ERROR                      **
**                                                                   **
***********************************************************************
         SPACE 1
PARMDS   DSECT                     LOCAL VARIABLES DEFINITIONS
         SPACE 1
PRMFLAGS DS    FL1                 FLAGS BYTE
PRMFCOM  EQU   B'00000001'         WHEN SCANNING MULTI-DECIMAL VALUE
*                                  + A COMMA WAS LAST ENCOUNTERED
PRMCBUF  DS    X                   CONVERSION BUFFER
         CNOP  0,8                                                 -EU-
PARMDLN  EQU   *-PARMDS
         EJECT
***********************************************************************
**                                                                   **
**       READ PARM TEXT INITIALISATION                               **
**                                                                   **
***********************************************************************
         SPACE 1
RDPARM   $SUB  PARMDS,PARMDLN      READ A PARAMETERS LINE
         LR    R6,RPARM            POINT TO SCAN TXT CTL BLOCK
         USING SCANTCB,R6          SET ADDRESSABILITY
         TM    SCPFLAGS,SCPFCNT    NEW KEYWORD PARSE EXPECTED ?
         BZ    RDPSCAN             YES, GO FOR IT
         LM    R0,R5,SCPRDSA       RELOAD REGISTERS TO CONTINUE PARSE
         BR    R3                  GO PROCESS IT WITH NEW TEXT BUFFER
         EJECT
***********************************************************************
**                                                                   **
**       SCAN LINE FOR ANY OF THE KEYWORDS IN TABLE                  **
**                                                                   **
***********************************************************************
         SPACE 1
RDPSCAN  BASR  R3,0                SET RESTART ADDRESS IN CASE OF EOD
         LR    RPARM,R6            LOAD SCANTCB ADDRESS
         CALL  SCAN                CALL SCANNER
         B     RDPGKW              GO SEARCH FOR KEYWORD
         B     RDGKERR             HEX -- SHOULD NOT OCCUR
         B     RDGKERR             DEC -- SHOULD NOT OCCUR
         B     RDGKERR             DLM -- SHOULD NOT OCCUR
         B     RDGKERR             STRING -- SHOULD NOT OCCUR
         B     *-*                 RESERVED
         B     RDPCNT              END OF TEXT -- PREPARE TO CONTINUE
         B     RDGKERR             ERROR OCCURED
         SPACE 1
***********************************************************************
**                                                                   **
**       FIND KEYWORD FROM TABLE                                     **
**                                                                   **
***********************************************************************
         SPACE 1
RDPGKW   DS    0H                  GET KEYWORD FROM TABLE
         PUSH  USING               SAVE CURRENT USING STATUS
         LA    R5,RDPKVTBL         POINT TO KEYWORDS TABLE
         USING RDPKVTBL,R5         SET TABLE ENTRY ADDRESSABILITY
RDPGETKW CH    R0,RDPKLN           POSSIBLE LENGTH (NOT HIGHER) ?
         BH    RDKNEXT             NO, SKIP TO NEXT
         L     R2,RDPKSA           GET SYMBOL ADDRESS
         LR    R3,R0               AND IT'S LENGTH
         BCTR  R3,0                DECREASE COUNT BY ONE FOR EXECUTE
         EX    R3,RDPKCLC          COMPARE KEYWORDS
         BE    RDPKFND             EQUAL, FOUND
RDKNEXT  TM    RDPKVTBL,X'80'      END OF TABLE ?
         BO    RDGKNF              YES, KEYWORD NOT FOUND
         LA    R5,RDPKELN(R5)      POINT TO NEXT ENTRY
         B     RDPGETKW            AND TRY AGAIN
         EJECT
***********************************************************************
**                                                                   **
**       EXPECTED KEYWORD WAS FOUND, SCAN FOR '=' AND VALUE          **
**                                                                   **
***********************************************************************
         SPACE 1
RDPKFND  BASR  R3,0                SET RESTART ADDRESS IN CASE OF EOD
         LR    RPARM,R6            LOAD SCANTCB ADDRESS
         CALL  SCAN                CALL SCANNER
         B     RDGDERR             GO SEARCH FOR KEYWORD
         B     RDGDERR             HEX -- SHOULD NOT OCCUR
         B     RDGDERR             DEC -- SHOULD NOT OCCUR
         B     RDPEQU              EQUAL SIGN IS EXPECTED
         B     RDGDERR             STRING -- SHOULD NOT OCCUR
         B     *-*                 RESERVED
         B     RDPCNT              END OF TEXT -- PREPARE TO CONTINUE
         B     RDGDERR             ERROR OCCURED
RDPEQU   CLI   0(R1),C'='          IS IT FOUND ?
         BNE   RDGDERR
         SPACE 1
***********************************************************************
**                                                                   **
**       SCAN FOR VALUE ASSOCIATED WITH KEYWORD                      **
**                                                                   **
***********************************************************************
         SPACE 1
         BASR  R3,0                SET RESTART ADDRESS IN CASE OF EOD
         LR    RPARM,R6            LOAD SCANTCB ADDRESS
         CALL  SCAN                SCAN FOR ASSOCIATED VALUE
RDPKVAL  B     RDPVERR             GOT A SYMBOL -- ERROR
         B     RDPVERR             HEX -- ERROR
         B     RDPVDEC             DEC -- DECIMAL VALUE
         B     RDPVDLM             DLM -- MULTI-NUMERIC VALUES
         B     RDPVSTR             STR -- STRING  VALUE
         B     *-*                 RESERVED
         B     RDPCNT              END OF TEXT, VALUE NOT SUPPLIED
         B     RDPVERR             ERROR ENCOUNTERED
         EJECT
***********************************************************************
**                                                                   **
**       SYMBOL (STRING) VALUE VALIDATION ROUTINE                    **
**                                                                   **
***********************************************************************
         SPACE 1
RDPVSTR  CH    RCODE,RDPKVT        IS EXPECTED TYPE FOUND ?
         BNE   RDPVERR             NO, MEANS ERROR
         CH    R0,=Y(L'DS1DSNAM+2) IS IT MORE THAN 44 CHARACTERS ?
         BH    RDPVERR             YES, VALUE LENGTH ERROR
*        MVI   WRKPNAM,C' '        MOVE IN A BLANK
*                                  + AND PROPAGATE IT ACROSS NAME
*        MVC   WRKPNAM+1(L'WRKPNAM-1),WRKPNAM
*                                  CLEAR OUT DATABASE NAME (BLANKS)
         LR    R2,R0               SET NAME LENGTH FOR EXECUTE
         SH    R2,=H'3'            + AND SUBSTRACT 1+2 (EX AND QUOTES)
*        EX    R2,RDPNMVC          MOVE DATA-SET NAME
         B     RDPEXIT             AND RETURN TO CALLER
         SPACE 1
***********************************************************************
**                                                                   **
**       NUMERIC VALUE VALIDATION ROUTINE                            **
**                                                                   **
***********************************************************************
         SPACE 1
RDPVDEC  CH    RCODE,RDPKVT        IS EXPECTED TYPE FOUND ?
         BNE   RDPVERR             NO, MEANS ERROR
         LR    R2,R0               SET LENGTH FOR EXECUTE
         BCTR  R2,0                + AND DECREASE BY ONE
         EX    R2,RDPVPAK          PACK VALUE TO WORK BUFFER
         CVB   R0,SCWDBLE          CONVERT VALUE TO BINARY INTO R0
         LH    R2,RDPKSEQ          GET SEQUENCE NUMBER
         SLL   R2,2                MULTIPLY BY FOUR
         EX    0,RDPVSTO-4(R2)     SAVE VALUE IN TABLE
*                                       OR GO TO PROCESS IT        -EU-
         B     RDPEXIT             RETURN TO CALLER
         EJECT
***********************************************************************
**                                                                   **
**       MULTI-NUMERIC VALIDATION ROUTINE (N1,N2,...)                **
**                                                                   **
***********************************************************************
         SPACE 1
RDPVDLM  CH    RCODE,RDPKVT        IS EXPECTED TYPE FOUND ?
         BNE   RDPVERR             NO, MEANS ERROR
         CLI   0(R1),C'('          IS EXPECTED '(' FOUND
         BNE   RDPVERR             NO, VALUE ERROR
         NI    PRMFLAGS,FF-PRMFCOM RESET COMMA INDICATOR BIT
         LH    R2,RDPKSEQ          GET SEQUENCE NUMBER
         SLL   R2,2                MULTIPLY BY FOUR
*        EX    0,RDPVLDA-4(R2)     SET R4 TO POINT TO RECEIVING FIELD
         SPACE 1
***********************************************************************
**                                                                   **
**       SCAN FOR ##,##,.. UNTIL ')'  IS FOUND                       **
**                                                                   **
***********************************************************************
         SPACE 1
RDPVMNUM BASR  R3,0                SET RESTART ADDRESS IN CASE OF EOD
         LR    RPARM,R6            LOAD SCANTCB ADDRESS
         CALL  SCAN
         B     RDPVERR             GOT A SYMBOL (CHARACTERS STRING)
         B     RDPVERR             HEX -- ERROR
         B     RDPVMDEC            DEC -- DECIMAL VALUE
         B     RDPVMDLM            DLM -- ',' OR ')' EXPECTED
         B     RDPVERR             STR -- ERROR
         B     *-*                 RESERVED
         B     RDPCNT              END OF TEXT, VALUE NOT SUPPLIED
         B     RDPVERR             ERROR ENCOUNTERED
         EJECT
***********************************************************************
**                                                                   **
**       DELIMITER ENCOUNTERED, CHECK FOR ',' OR ')'                 **
**                                                                   **
***********************************************************************
         SPACE 1
RDPVMDLM CLI   0(R1),C','          IS-IT A COMMA ?
         BNE   RDPVMEOD            NO, TRY FOR ')'
         XI    PRMFLAGS,PRMFCOM    REVERSE COMMA BIT
         TM    PRMFLAGS,PRMFCOM    IS-IT NOW RESET TO ZERO ?
         BO    RDPVERR             NO, WAS ENTERED TWICE ... ERROR
         B     RDPVMNUM            CONTINUE EXPECTING NUMERIC
RDPVMEOD CLI   0(R1),C')'          IS-IT FINISHED ?
         BE    RDPEXIT             YES, ALL OF IT IS DONE
         B     RDPVERR             NO, DON'T KNOW WHAT IS GOING ON ...
         SPACE 1
***********************************************************************
**                                                                   **
**       DECIMAL VALUE ENCOUNTERED, PROCESS IT                       **
**                                                                   **
***********************************************************************
         SPACE 1
RDPVMDEC XI    PRMFLAGS,PRMFCOM    REVERSE COMMA BIT
         TM    PRMFLAGS,PRMFCOM    IS-IT NOW SET TO ONE ?
         BZ    RDPVERR             NO, NO COMMA WAS SUPPLIED ... ERROR
         LR    R2,R0               SET LENGTH FOR EXECUTE
         BCTR  R2,0                + AND DECREASE BY ONE
         EX    R2,RDPVPAK          PACK VALUE TO WORK BUFFER
         CVB   R0,SCWDBLE          CONVERT VALUE TO BINARY INTO R0
         LH    R2,RDPKSEQ          GET SEQUENCE NUMBER
         SLL   R2,2                MULTIPLY BY FOUR
         B     *(R2)               PROCESS ACCORDING TO SEQUENCE #
*        B     RDPKSEQ1            -- PROCESS FIRST KEYWORD        -EU-
*        B     RDPKSEQ2            -- PROCESS SECOND KEYWORD       -EU-
         B     RDPVERR             -- ERROR                        -EU-
         B     RDPVERR             -- ERROR                        -EU-
         B     RDPVERR             -- ERROR                        -EU-
         B     RDPVERR             -- ERROR                        -EU-
         B     RDPVERR             -- ERROR                        -EU-
         B     RDPVERR             -- ERROR                        -EU-
         B     RDPVERR             -- ERROR                        -EU-
         B     RDPKSEQ3            -- PROCESS BIT SETTING (IDS)    -EU-
         EJECT
***********************************************************************
**                                                                   **
**       PROCESS BITMAPS ALLOCATION PATTERN                          **
**                                                                   **
***********************************************************************
         SPACE 1
RDPKSEQ1 LR    R1,R4               LOAD RECEIVING FIELD POINTER
*        LA    R15,WRKPALP         POINT TO INITIAL ADDRESS
         SR    R1,R15              GET CURRENT OFFSET
*        CH    R1,=Y(&MAXLVL)      COMPARE AGAINST MAXIMUM VALUE
         BNL   RDPVMERR            IF HIGH OR EQUAL TO MAX, IMPOSSIBLE
         LTR   R0,R0               TEST FOR POSITIVE VALUE
         BNP   RDPVMERR            IF NOT POSITIVE, ERROR
         STC   R0,0(R4)            SAVE VALUE
         LA    R4,1(R4)            POINT TO NEXT RECEIVING FIELD
         B     RDPVMNUM            CONTINUE SCANNING
         SPACE 1
*******************************************************************-EU-
**                                                                 -EU-
**       PROCESS BIT SETTING (SNAP-ID)                             -EU-
**                                                                 -EU-
*******************************************************************-EU-
         SPACE 1                                                   -EU-
RDPKSEQ3 LA    R4,SCPSNF           TARGET FIELD                    -EU-
         LTR   R0,R0               VALIDATE SNAP-ID NO. VALUE      -EU-
         BM    *+L'*+8                                             -EU-
         CH    R0,=H'255'                                          -EU-
         BNH   *+L'*+2                                             -EU-
         XR    R0,R0               ON ERROR, SET ZERO              -EU-
         SPACE 1                                                   -EU-
***********************************************************************
**                                                                   **
**       PROCESS SECOND KEYWORD VALUE                                **
**                                                                   **
***********************************************************************
         SPACE 1
RDPKSEQ2 DS    0H                  PROCESS MERGE BITMAP
*        CH    R0,=Y(&MAXFLD#-1)   TEST FOR MAXIMUM VALUE
*        BH    RDPVMERR            HIGHER, ERROR                   -EU-
         LR    R2,R0               LOAD IT'S CONTENT
         SRL   R2,3                DIVIDE BY 8
         LA    R3,0(R2,R4)         POINT TO FIELD RECEIVING BIT
         SLL   R2,3                RESET
         SR    R0,R2               SET TO BIT# TO BE SET
         STC   R0,PRMCBUF          SAVE IT IN CONVERT BUFFER
         TR    PRMCBUF,RDPCTBL     TRANSLATE IT
         OC    0(1,R3),PRMCBUF     SET RIGHT BIT
         B     RDPVMNUM            + AND GO PROCESS NEXT VALUE
         EJECT
***********************************************************************
**                                                                   **
**       VALUE  ERROR OCCURED -- PRINT MESSAGE AND QUIT              **
**                                                                   **
***********************************************************************
         SPACE 1
RDPVERR  SEND  SCK0005E            VALUE TYPE DOES NOT MATCH KEYWORD
         B     RDPPERR             RETURN TO CALLER
         SPACE 1
***********************************************************************
**                                                                   **
**       VALUE SUPPLIED OUT OF BOUNDS, SEND MESSAGE AND QUIT         **
**                                                                   **
***********************************************************************
         SPACE 1
RDPVMERR SEND  SCK0011E            TO MANY VALUES SUPPLIED
         B     RDPPERR             RETURN TO CALLER
         EJECT
***********************************************************************
**                                                                   **
**       ERROR OCCURED, PRINT MESSAGE AND QUIT                       **
**                                                                   **
***********************************************************************
         SPACE 1
RDGKERR  SEND  SCK0012E            ERROR OCCURED WHILE SCANNING
         B     RDPPERR             RETURN TO CALLER
         SPACE 1
***********************************************************************
**                                                                   **
**       EXPECTED KEYWORD WAS NOT FOUND                              **
**                                                                   **
***********************************************************************
         SPACE 1
RDGKNF   SEND  SCK0013E            KEYWORD EX.'D BUT BAD SYMBOL FOUND
         B     RDPPERR             RETURN TO CALLER
         EJECT
***********************************************************************
**                                                                   **
**       EQUAL SIGN NOT FOUND                                        **
**                                                                   **
***********************************************************************
         SPACE 1
RDGDERR  SEND  SCK0014E            EX.'D "=" NOT FOUND, "=" ASSUMED
         LM    R15,R1,SBSCNR15     RELOAD SCAN REGISTERS
         B     RDPKVAL(RCODE)      RETURN VALIDATING VALUE
         SPACE 1
***********************************************************************
**                                                                   **
**        KEYWORD PARSE NOT FINISHED, PREPARE TO CONTINUE            **
**                                                                   **
***********************************************************************
         SPACE 1
RDPCNT   OI    SCPFLAGS,SCPFCNT    CONTINUE PARSE OF SAME KEYWORD
         STM   R0,R5,SCPRDSA       SAVE REGISTERS (WHEN RE-ENTRY,
*                                  + WILL CONTINUE AT 0(RENTRY))
         LA    RCODE,4             SET RCODE TO 4
         B     RDPRET              RETURN TO CALLER -- WAIT BUFFER
         SPACE 1
***********************************************************************
**                                                                   **
**        PARSE ERROR OCCURED, SET BAD RETURN CODE AND EXIT          **
**                                                                   **
***********************************************************************
         SPACE 1
RDPPERR  NI    SCPFLAGS,FF-SCPFCNT REQUEST A NEW KEYWORD (IN CASE)
         LA    RCODE,8             SET RCODE TO 8
         B     RDPRET              RETURN TO CALLER
         EJECT
*******************************************************************-EU-
**                                                                 -EU-
**       PROCESS SNAP-ID NO.                                       -EU-
**                                                                 -EU-
*******************************************************************-EU-
         SPACE 1                                                   -EU-
SETSNID  LTR   R0,R0               VALIDATE SNAP-ID NO. VALUE      -EU-
         BM    *+L'*+8                                             -EU-
         CH    R0,=H'255'                                          -EU-
         BNH   *+L'*+2                                             -EU-
         XR    R0,R0               ON ERROR, SET ZERO              -EU-
         LR    R1,R0               LOAD IT'S CONTENT               -EU-
         SRL   R1,3                DIVIDE BY 8                     -EU-
         LA    R15,SCPSNF(R1)      POINT TO BYTE RECEIVING BIT     -EU-
         SLL   R1,3                RESET                           -EU-
         SR    R0,R1               SET TO BIT# TO BE SET           -EU-
         STC   R0,PRMCBUF          SAVE IT IN CONVERT BUFFER       -EU-
         TR    PRMCBUF,RDPCTBL     TRANSLATE IT                    -EU-
         OC    0(1,R15),PRMCBUF    SET RIGHT BIT                   -EU-
         SPACE 1                                                   -EU-
***********************************************************************
**                                                                   **
**        RETURN TO CALLER AT PROPER LOCATION                        **
**                                                                   **
***********************************************************************
         SPACE 1
RDPEXIT  NI    SCPFLAGS,FF-SCPFCNT REQUEST A NEW KEYWORD
         XR    RCODE,RCODE         SET RCODE TO ZERO
RDPRET   $SUBRET                   + AND RETURN TO CALLER
         EJECT
***********************************************************************
**                                                                   **
**       RDPARM DATA AND CONSTANTS                                   **
**                                                                   **
***********************************************************************
         SPACE 1
RDPKCLC  CLC   0(*-*,R1),0(R2)     COMPARE SUPPLIED ENTRY WITH KEYWORD
*DPNMVC  MVC   WRKPNAM(*-*),1(R1)  MOVE DATABASE NAME (EXCL QUOTE)
RDPVPAK  PACK  SCWDBLE,0(*-*,R1)   PACK NUMERIC VALUE
         SPACE 1
RDPVSTO  STCM  R0,B'1111',SCPMAXC  SAVE MAX CPU TIME
         STCM  R0,B'1111',SCPDISC  SAVE DISCONNECT TIME
         STCM  R0,B'1111',SCPWAIT  SAVE LONG WAIT TIME
         STCM  R0,B'1111',SCPTRACK SAVE TRACK TIME
         STCM  R0,B'1111',SCPSEEK  SAVE SEEK TIME
         STCM  R0,B'1111',SCPMTHD  SAVE SYNCH. METHOD NO.          -EU-
         B     SETSNID             GO TO PROCESS SNAP-ID NO.       -EU-
         NOP   *                   NOTHING TO DO SNAP-IDS NO.      -EU-
         SPACE 1
*DPVLDA  LA    R4,WRKPALP          SET TO ALLOC PATTERN ADDRESS
*        LA    R4,WRKPMRG          SET TO ALLOC PATTERN ADDRESS
         SPACE 1
RDPCTBL  DC    B'10000000'         BITMAP TRANSLATE TABLE
         DC    B'01000000'
         DC    B'00100000'
         DC    B'00010000'
         DC    B'00001000'
         DC    B'00000100'
         DC    B'00000010'
         DC    B'00000001'
         SPACE 1
***********************************************************************
**                                                                   **
**       LITERAL POOL DEFINITION                                     **
**                                                                   **
***********************************************************************
         SPACE 1
         LTORG ,                   LITERAL POOL DEFINITION
         EJECT
***********************************************************************
**                                                                   **
**       PARAMETERS KEYWORDS DEFINITIONS                             **
**                                                                   **
***********************************************************************
         SPACE 1
RDPKVTBL DS    0F                  KEYWORDS TABLE DEFINITION
RDPKSA   DS    AL4                 -- SYMBOL ADDRESS (UNALIGNED)
RDPKLN   DS    Y                   -- SYMBOL LENGTH
RDPKVT   DS    Y                   -- EXPECTED VALUE TYPE
RDPKSEQ  DS    Y                   -- SEQUENCE OF SYMBOL WITH SAME
*                                     VALUE TYPE (SEE UTILDS)
RDPKELN  EQU   *-RDPKVTBL          TABLE ENTRY LENGTH
         ORG   RDPKVTBL            RE-ORG TO TABLE DEFINITION
         DC    AL4(RDP1K),Y(L'RDP1K,SCTDEC,1)
         DC    AL4(RDP2K),Y(L'RDP2K,SCTDEC,2)
         DC    AL4(RDP3K),Y(L'RDP3K,SCTDEC,3)
         DC    AL4(RDP4K),Y(L'RDP4K,SCTDEC,4)
         DC    AL4(RDP5K),Y(L'RDP5K,SCTDEC,5)
         DC    AL4(RDP6K),Y(L'RDP6K,SCTDEC,6)                      -EU-
         DC    AL4(RDP7K),Y(L'RDP7K,SCTDEC,7)                      -EU-
         DC    AL4(RDP8K),Y(L'RDP8K,SCTDLM,8)                      -EU-
         ORG   *-RDPKELN           RE-ORG TO LAST ENTRY
         DC    X'80'               END OF KEYWORDS TABLE
         ORG   ,                   RE-ORG
RDP1K    DC    C'MAXCPU'           MAX NUMBER OF CPU'S
RDP2K    DC    C'DISCONNECT_TIME'  MAX TIME BEFORE DISCONNECTION
RDP3K    DC    C'LONG_WAIT'        LONG WAIT TIME
RDP4K    DC    C'TRACK_WAIT'       TRACK WAIT TIME
RDP5K    DC    C'SEEK_TIME'        SEEK TIME
RDP6K    DC    C'SYNCH_METHOD'     SYNCHRONIZATION METHOD NO.      -EU-
RDP7K    DC    C'SNAP_ID'          SNAP-ID NUMBER REQUEST          -EU-
RDP8K    DC    C'SNAP_IDS'         SNAP-IDS NUMBERS REQUEST        -EU-
         TITLE '-- S C A N - SERVICE ROUTINE --'
***********************************************************************
**                                                                   **
**                        ----  S C A N  ----                        **
**                                                                   **
**           THIS MODULE WILL EXTRACT A TOKEN FROM THE TEXT          **
**       BUFFER AND RETURN TO THE CALLER WITH THE NEXT TOKEN.        **
**       IT WILL ALSO FLUSH ANY COMMENT FROM TEXT (/*...*/)          **
**                                                                   **
**           POSSIBLE RETURNED TOKEN TYPES ARE :                     **
**                                                                   **
**             SYMBOL :   <ALP> (  <ALP> × <DIGIT> )                 **
**             HEX :      ( 0×1×2×3×4×5×6×7×8×9×A×B×C×D×E×F)         **
**             DEC :      ( 0×1×2×3×4×5×6×7×8×9 )                    **
**             DLM :      *×-×+×&×/×%×^×'×"×?×<×>×,×.×**×<=...       **
**             STRING :   'ANY CHARACTER  ...'                       **
**             OTHER :    ...                                        **
**                                                                   **
**       <ALP> ::=  A×B×C×D×E×F×G×H×I×J×K×L×M×N×O×P×                 **
**                  Q×R×S×T×U×V×W×X×Y×Z×@×#×_                        **
**                                                                   **
**       <DIGIT>    0×1×2×3×4×5×6×7×8×9                              **
**                                                                   **
**       PARAMTERS :                                                 **
**       -----------                                                 **
**                                                                   **
**       INPUT :  RPARM POINTS TO TEXT CONTROL BLOCK                 **
**                FOR INFORMATION, SEE DSECT SCANTCB                 **
**                                                                   **
**       OUTPUT : OFFSET IS UPDATED IN TEXT CONTROL BLOCK AND        **
**                NOW POINTS A THE FIRST CHARACTER FOLLOWING         **
**                EXTRACTED TOKEN                                    **
**                                                                   **
**       --  TOKEN ADDRESS IS RETURNED IN REGISTER R1                **
**       --  TOKEN LENGTH  IS RETURNED IN REGISTER R0                **
**       --  RETURN CODE IS SET IN REGISTER RCODE AND INDICATES      **
**           TOKEN TYPE :                                            **
**           RCODE  = 0  SYMBOL         -- MIGHT BE HEX (C.F. AABBC) **
**                  = 4  HEX            -- HEXADECIMAL NUMBER        **
**                  = 8  DEC            -- DECIMAL NUMBER (NO SIGN)  **
**                  = 12 DLM            -- DELIMITER                 **
**                  = 16 STRING         -- CHARACTER STRING          **
**                  = 20 RESERVED                                    **
**                  = 24 END OF TEXT BUFFER                          **
**                  = 28 SCAN ERROR (UNDEFINED OR INVALID CHARACTER) **
**                                                                   **
***********************************************************************
         EJECT
***********************************************************************
**                                                                   **
**       FUNCTIONNAL REGISTERS DEFINITIONS                           **
**                                                                   **
***********************************************************************
         SPACE 1
RSTCB    EQU   R10                 BASE REGISTER FOR TEXT CONTROL BLOCK
         SPACE 1
***********************************************************************
**                                                                   **
**       LOCAL EQUATES -- RETURNED TOKEN TYPES                       **
**                                                                   **
***********************************************************************
         SPACE 1
SCTSYM   EQU   0                   TYPE = SYMBOL
SCTHEX   EQU   4                   TYPE = HEXADECIMAL
SCTDEC   EQU   8                   TYPE = DECIMAL
SCTDLM   EQU   12                  TYPE = DELIMITER
SCTSTR   EQU   16                  TYPE = STRING
SCTRES   EQU   20                  RESERVED
SCTEND   EQU   24                  END OF TEXT BUFFER
SCTERR   EQU   28                  ERROR ENCOUNTERED
         SPACE 1
***********************************************************************
**                                                                   **
**       LOCAL VARIABLES DEFINITION                                  **
**                                                                   **
***********************************************************************
         SPACE 1
SCANDS   DSECT
SCATOMA  DC    A(0)                ADDRESS OF TOKEN FIRST CHARACTER
*                                  + IN GROUPS BUFFER
         CNOP  0,8                                                 -EU-
SCDSLN   EQU   *-SCANDS            LENGTH OF DSECT
         TITLE '-- S C A N - INITIALISATION --'
***********************************************************************
**                                                                   **
**       S C A N  --  INITIALIZATION                                 **
**                                                                   **
***********************************************************************
         SPACE 1
SCAN     $SUB  SCANDS,SCDSLN       DEFINE SCAN ENTRY POINT
         LR    RSTCB,RPARM         SET TEXT CONTROL BLOCK ADDR.
         USING SCANTCB,RSTCB       SET DSECT ADDRESSABILITY
         TITLE '-- S C A N - MAIN PROCESSING --'
***********************************************************************
**                                                                   **
**       CHECK FOR FIRST CALL FOR THIS TEXT BUFFER                   **
**                                                                   **
**       -- IF SO, INITIALIZE FIELD "SBGBUF" BY ASSOCIATING FOR      **
**          EACH CHARACTER A GROUP ACCORDING TO "SCGTAB" TABLE       **
**                                                                   **
***********************************************************************
         SPACE 1
         TM    SBSFLG1,SBFNEW      FIRST CALL ?
         BO    SCOKINIT            NO, CONTINUE PROCESSING THIS BUFFER
         OI    SBSFLG1,SBFNEW      SET INDICATOR
         MVC   SBGBUF,SBTXT        MOVE TEXT
         TR    SBGBUF,SCGTAB       TRANSLATE IN GROUPS
         LA    R1,SBTXT            POINT TO TEXT
         ST    R1,SBATOMA          INITIALIZE FIELD
         XC    SBTXTOFS,SBTXTOFS   INITIALIZE OFFSET FROM BEGINNING
         SPACE 1
***********************************************************************
**                                                                   **
**       SKIP BLANKS AND POINT TO FIRST CHARACTER OF TOKEN           **
**                                                                   **
***********************************************************************
         SPACE 1
SCOKINIT LA    R1,SBTXT            ADDRESS OF TEXT BUFFER
         LR    R3,R1               SET REGISTER TO POINT
         AH    R3,SBTXTLN          + END OF BUFFER
         BCTR  R3,0                POINT LAST CHARACTER
         AH    R1,SBTXTOFS         POINT TO FIRST CHARACTER
         CR    R1,R3               REACHED  END OF BUFFER ?
         BH    SCREINIT            YES, REINITIALIZE
         LA    R2,1                INITIALIZE TO 1 (INCREMENT)
SCSKIP   CLI   0(R1),C' '          IS-IT A BLANK ?
         BNE   SCBEGIN             NO, WE ARE AT THE BEGINNING
         BXLE  R1,R2,SCSKIP        POINT TO NEXT CHARACTER
*                                  + IF IT IS NOT FINISHED
SCREINIT XI    SBSFLG1,SBFNEW      RESET INDICATOR TO ZERO
         LA    R15,SCTEND          INDICATE  END OF BUFFER
         B     SCEXIT              END OF EXECUTION
SCBEGIN  ST    R1,SBATOMA          SAVE  TOKEN POINTER
         LA    R2,SBTXT            ADDRESS OF TEXT BUFFER
         SR    R1,R2               GET OFFSET
         STH   R1,SBTXTOFS         SAVE IN TEXT CONTROL BLOCK
         TITLE '-- S C A N - SELECTION OF TOKEN TYPE --'
***********************************************************************
**                                                                   **
**       DEFINE TOKEN TYPE IN FUNCTION OF FIRST CHARACTER            **
**       AND ANALYSE IT                                              **
**                                                                   **
**       -- REGISTER ONE CONTAINS TOKEN OFFSET IN BUFFER             **
**                                                                   **
***********************************************************************
         SPACE 1
         LA    R2,SBGBUF           ADDRESS OF GROUPS BUFFER
         AR    R2,R1               GROUPE OF FIRST CHARACTER FOR
*                                  + CURRENT SYMBOL
         ST    R2,SCATOMA          SAVE THIS ADDRESS
         XR    R1,R1               CLEAR BEFORE BRANCH
         ICM   R1,B'0001',0(R2)    INSERT 1ST CHARACTER GROUP
         BZ    SCERR1              ILLEGAL, END OF PROCESSING
         B     *(R1)               BRANCH ACCORDING TO GROUP
         B     SCLET               LETTER (A - F)
         B     SCLET               LETTER (G - Z), @, #, _
         B     SCNUM               DIGIT (0 - 9)
         B     SCDLMS              SIMPLE DELIMITER
         B     SCDLMM              MULTIPLE DELIMITER
         B     SCQUOT              QUOTE
         B     *-*                 RESERVED
         TITLE '-- S C A N - PROCESS PARAMETERS --'
***********************************************************************
**                                                                   **
**       PROCESS A SYMBOL                                            **
**                                                                   **
**       -- FIRST CHARACTER IS ALPHABETIC, REST IS ALPHANUMERIC      **
**                                                                   **
***********************************************************************
         SPACE 1
SCLET    LA    R15,SCTSYM          TYPE = SYMBOL
         LA    R2,1(R2)            POINT TO NEXT
         CLI   0(R2),SCGERR        ERROR ?
         BE    SCEXIT              NO, STOP
         CLI   0(R2),SCGNUM        DIGIT OR LETTER ?
         BNH   SCLET               YES, CONTINUE
         B     SCEXIT              RETURN TO CALLER
         SPACE 1
***********************************************************************
**                                                                   **
**       PROCESS A NUMBER                                            **
**                                                                   **
**       -- IT MIGHT BE HEX OR DECIMAL ...                           **
**                                                                   **
***********************************************************************
         SPACE 1
SCNUM    LA    R15,SCTDEC          INITIALIZE TYPE TO DECIMAL
*                                  IF ANY HEX CHARACTER (A-F) IS
*                                  + FOUND, TYPE WILL BE CHANGED TO
*                                  + "SCTHEX"
SCCHIB   LA    R2,1(R2)            SKIP TO NEXT CHARACTER
         CLI   0(R2),SCGNUM        DIGIT ?
         BE    SCCHIB              YES, LOOP ON NUMBER
         CLI   0(R2),SCGHEX        LETTER ? (A-F)
         BNE   SCEXIT              NO, THAT IS IT, ALL IS DONE
         LA    R15,SCTHEX          INITIALIZE TYPE HEX
         B     SCCHIB              CONTINUE PROCESSING
         SPACE 1
***********************************************************************
**                                                                   **
**       PROCESS A SIMPLE DELIMITER (1 CHARACTER)                    **
**                                                                   **
***********************************************************************
         SPACE 1
SCDLMS   LA    R15,SCTDLM          TYPE = DELIMITER
         LA    R2,1(R2)            SKIP TO NEXT CHARACTER
         B     SCEXIT              RETURN
         EJECT
***********************************************************************
**                                                                   **
**       PROCESS A MULTIPLE DELIMITER (MANY CHARACTERS)              **
**       -- THE POSSIBLE DELIMITERS ARE :                            **
**                                                                   **
**           **,<>,>=,<=,^=,/*,/*,:=                                 **
**                                                                   **
***********************************************************************
         SPACE 1
SCDLMM   L     R4,SBATOMA          TOKEN ADDRESS
         LR    R0,R2               SAVE REGISTER
         TRT   0(1,R4),SCDLMTBL    TRANSLATE TO CORRESPONDING OFFSET
         N     R2,=X'000000FF'     ZERO OUT 3 FIRST BYTES
         LR    R1,R2               LOAD BRANCH OFFSET
         LR    R2,R0               REINITIALIZE REGISTER
         B     *(R1)               BRANCH ACCORDING TO FIRST CHARACTER
         B     SCDLM00             X'04' * OR ** */
         B     SCDLM01             X'08' <    <= <>
         B     SCDLM02             X'0C' >    >=
         B     SCDLM02             X'10' ^    ^=
         B     SCDLM02             X'14' :    :=
         B     SCDLM03             X'18' /    /*
SCDLM00  CLI   1(R4),C'*'          IS-IT ** ?
         BE    SCDLMOK             YES, IT'S CORRECT
         CLI   1(R4),C'/'          IS-IT */ ?
         BE    SCDLMOK             YES, IT'S CORRECT
         B     SCDLMS              NO, IT'S A SIMPLE DELIMITER
SCDLM01  CLI   1(R4),C'='          IS-IT <= ?
         BE    SCDLMOK             YES, IT'S CORRECT
         CLI   1(R4),C'>'          IS-IT <> ?
         BE    SCDLMOK             YES, IT'S CORRECT
         B     SCDLMS              NO, IT'S A SIMPLE DELIMITER
SCDLM02  CLI   1(R4),C'='          IS-IT >= ^= := ?
         BE    SCDLMOK             YES, IT'S CORRECT
         B     SCDLMS              NO, IT'S A SIMPLE DELIMITER
SCDLM03  CLI   1(R4),C'*'          IS-IT /* ?
         BNE   SCDLMS              NO, IT'S A SIMPLE DELIMITER
         B     SCDCOMM             GO PROCESS A COMMENT (SKIP IT)
SCDLMOK  LA    R15,SCTDLM          TYPE = DELIMITER
         LA    R2,2(R2)            POINT TO NEXT CHARACTER (L=2)
         B     SCEXIT              IT'S ALL
         EJECT
***********************************************************************
**                                                                   **
**        WE ARE PROCESSING A COMMENT, SKIP IT UNTIL */ IS FOUND     **
**                                                                   **
***********************************************************************
         SPACE 1
SCDCOMM  LA    R1,SBTXT            ADDRESS OF TEXT BUFFER
         LR    R3,R1               SET REGISTER TO POINT
         AH    R3,SBTXTLN          + TO END OF BUFFER
         BCTR  R3,0                POINT TO LAST CHARACTER OF BUFFER
         LA    R2,1                INITIALIZE TO 1 (INCREMENT)
SCDCNXT  CLC   0(2,R4),=C'*/'      END OF COMMENT ?
         BE    SCDCRET             YES, GO RETRY SCAN
         BXLE  R4,R2,SCDCNXT       POINT TO NEXT CHARACTER
*                                  + IF IT IS NOT FINISHED
         B     SCREINIT            IF END OF BUFFER, RETURN
SCDCRET  LA    R4,2(R4)            POINT TO NEXT CHARACTER FOLLOWING */
         SR    R4,R1               GET OFFSET FROM BUFFER BEGINNING
         STH   R4,SBTXTOFS         SAVE IT IN TEXT CONTROL BLOCK
         B     SCOKINIT            + AND RESTART SCAN
         SPACE 1
***********************************************************************
**                                                                   **
**       PROCESS A CHARACTERS STRING                                 **
**                                                                   **
***********************************************************************
         SPACE 1
SCQUOT   LA    R15,SCTSTR          TYPE = STRING
         LA    R1,1(R2)            POINT TO NEXT GROUP OF CHARACTER
         LA    R2,1                INITIALIZE TO 1 (INCREMENT)
         LA    R3,SBGBUF           ADDRESS OF BUFFER
         AH    R3,SBTXTLN          POINTER AFTER LAST CHARACTER
         BCTR  R3,0                POINTER TO LAST CHARACTER
SCAPO00  CLI   0(R1),SCGAPO        IS-IT A QUOTE ?
         BE    SCAPO01             YES, CHECK IF WE REACHED END
         BXLE  R1,R2,SCAPO00       POINT TO NEXT CHARACTER
*                                  IF NOT THE END
         LR    R2,R1               POINTER TO LAST CHARACTER
         B     SCERR1              IT'S AN ERROR
SCAPO01  CLI   1(R1),SCGAPO        IS-IT AGAIN A QUOTE ?
         BNE   SCAPO02             NO, WE TERMINATED
         LA    R1,2(R1)            POINT TI NEXT CHARACTER
         B     SCAPO00             LOOK FOR ENDING QUOTE
SCAPO02  LA    R2,1(R1)            POINTER TO NEXT CHARACTER
         B     SCEXIT              END OF PROCESSING
         TITLE '-- S C A N - ERROR/END OF TOKEN PROCESSES --'
***********************************************************************
**                                                                   **
**       PROCESS AN ERROR                                            **
**                                                                   **
***********************************************************************
         SPACE 1
SCERR1   LA    R15,SCTERR          SYNTAX ERROR
         LA    R2,1(R2)            IGNORE CHARACTER IN ERROR
         SPACE 1
***********************************************************************
**                                                                   **
**       END OF TOKEN PROCESSING                                     **
**       WE MUST REINITIALIZE FIELD "SBTXTOFS"                       **
**                                                                   **
**          REGISTER 2 POINTS TO END OF SYMBOL                       **
**          REGISTER 15 CONTAINS TOKEN TYPE                          **
**                                                                   **
**       TO RETURN, REGISTER 0 MUST CONTAIN LENGTH                   **
**                  REGISTER 1 MUST POINT TO SYMBOL                  **
**                  REGISTER 15 IS SET TO TOKEN TYPE                 **
**                                                                   **
***********************************************************************
         SPACE 1
SCEXIT   LR    R0,R2               CALCULATE TOKEN LENGTH
         S     R0,SCATOMA          SET R0 TO IT
         LA    R1,SBGBUF           ADDRESS OF GROUP
         SR    R2,R1               OFFSET
         STH   R2,SBTXTOFS         SAVE IT BACK IN CONTROL BLOCK
         L     R1,SBATOMA          SET R1 TO TOKEN ADDRESS (RETURN IT)
         L     R2,4(RSAVE)         POINT TO PREVIOUS SAVE AREA
         STM   R15,R1,16(R2)       SAVE RETURNED REGISTERS
         $SUBRET ,                 RETURN TO CALLER
         TITLE '-- S C A N - CONSTANTS AND EXECUTED INSTRUCTIONS --'
***********************************************************************
**                                                                   **
**       CONSTANTS DEFINITIONS                                       **
**                                                                   **
***********************************************************************
         SPACE 1
         LTORG ,                   LITERAL POOL DEFINITION
         SPACE 1
***********************************************************************
**                                                                   **
**       MULTIPLE DELIMITERS TABLE                                   **
**                                                                   **
***********************************************************************
         SPACE 1
SCDLMTBL DC    256X'00'            INITIALIZE TABLE TO ZEROES
         ORG   SCDLMTBL+C'*'       STARTING WITH * : ** */
         DC    X'04'
         ORG   SCDLMTBL+C'<'       STARTING WITH < : <= <>
         DC    X'08'
         ORG   SCDLMTBL+C'>'       STARTING WITH > : >=
         DC    X'0C'
         ORG   SCDLMTBL+C'^'       STARTING WITH ^ : ^=
         DC    X'10'
         ORG   SCDLMTBL+C':'       STARTING WITH : : :=
         DC    X'14'
         ORG   SCDLMTBL+C'/'       STARTING WITH / : /*
         DC    X'18'
         ORG   ,                   REORG TO END OF TABLE
         EJECT
***********************************************************************
**                                                                   **
**       GROUPS TRANSCRIPTION TABLE                                  **
**                                                                   **
**       FOLLOWING ARE THE GROUPS ASSOCIATED WITH CHARACTERS :       **
**                                                                   **
**       X'00' : ERROR -- ILLEGAL CHARACTER                          **
**       X'04' : A-F                                                 **
**       X'08' : G-Z, @, #, _                                        **
**       X'0C' : 0-9                                                 **
**       X'10' : SIMPLE DELIMITER                                    **
**       X'14' : MULTIPLE DELIMITER                                  **
**       X'18' : QUOTE                                               **
**                                                                   **
***********************************************************************
         SPACE 1
SCGERR   EQU   X'00'               ERROR
SCGHEX   EQU   X'04'               A - F
SCGLET   EQU   X'08'               G - Z, @, #, _
SCGNUM   EQU   X'0C'               0 - 9
SCGDLS   EQU   X'10'               SIMPLE DELIMITER
SCGDLM   EQU   X'14'               MULTIPLE DELIMITER
SCGAPO   EQU   X'18'               QUOTE
         SPACE 1
SCGTAB   DC    0XL256'00'
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'00000000000000000000000000000000'  0
         DC    X'00000000000000000000000000000000'  1
         DC    X'00000000000000000000000000000000'  2
         DC    X'00000000000000000000000000000000'  3
         DC    X'00000000000000000000001014101010'  4
         DC    X'10000000000000000000101014101014'  5
         DC    X'10140000000000000000001010081410'  6
         DC    X'00000000000000000000140808181010'  7
         DC    X'00000000000000000000000000000000'  8
         DC    X'00000000000000000000000000000000'  9
         DC    X'00000000000000000000000000000000'  A
         DC    X'00000000000000000000000000000000'  B
         DC    X'00040404040404080808000000000000'  C
         DC    X'00080808080808080808000000000000'  D
         DC    X'00000808080808080808000000000000'  E
         DC    X'0C0C0C0C0C0C0C0C0C0C000000000000'  F
         SPACE 1
         LTORG ,                   LITERAL POOL DEFINITION
         TITLE '-- M S S E N D - SEND MESSAGE ROUTINE --'          -EU-
*******************************************************************-EU-
**                                                                 -EU-
**                      ----  M S S E N D  ----                    -EU-
**                                                                 -EU-
**           THIS SUBROUTINE, CALLED BY UTILITIES PROCESSOR, WILL  -EU-
**       SEND MESSAGE BY TPUT OR WTO DEPENDING IF IN TSO OR NOT,   -EU-
**       AND EVENTUALLY USE TGET OR WTOR IF A REPLY IS REQUESTED   -EU-
**                                                                 -EU-
**           -- INPUT :  RPARM    WTO/WTOR MESSAGE ADDRESS         -EU-
**                       RLINK    RETURN ADDRESS                   -EU-
**                                                                 -EU-
**           -- OUTPUT : MESSAGE IS SENT (RCODE = 0)               -EU-
**                       RCODE = 0 - REPLY IS "YES"                -EU-
**                       RCODE = 4 - REPLY IS "NO"                 -EU-
**                       RCODE = 8 - TGET ERROR                    -EU-
**                                                                 -EU-
*******************************************************************-EU-
**                                                                 -EU-
**       LOCAL VARIABLES DEFINITION                                -EU-
**                                                                 -EU-
*******************************************************************-EU-
         SPACE 1                                                   -EU-
MSDS     DSECT                                                     -EU-
RECB     DC    F'0'                REPLY ECB                       -EU-
RAREA    DC    XL8'0'              REPLY AREA                      -EU-
RWTO     WTOR  'SCK0000* -- ... MESSAGE TEXT ...',                 -EU-*
               *-*,*-*,*-*,MF=L                                    -EU-
         DC    XL100'0'            WORK SPACE                      -EU-
         CNOP  0,8                                                 -EU-
MSLN     EQU   *-MSDS                                              -EU-
         EJECT                                                     -EU-
MSSEND   $SUB  MSDS,MSLN           LOAD INPUT PARAMETERS SUBROUTINE-EU-
         SPACE 1                                                   -EU-
         LTR   RPARM,RPARM         REPLY REQUESTED ?               -EU-
         BM    REPLY               YES                             -EU-
         AL    RPARM,=V(MSDATA)    COMPUTE MESSAGE ADDRESS         -EU-
         TM    SCFLAGS,SCFTEST     ARE WE IN TSO ?                 -EU-
         BO    MSTSO               YES                             -EU-
         TM    2(RPARM),X'80'      MCS FLAGS ?                     -EU-
         BZ    NOMCS               NO                              -EU-
         LR    R2,RPARM                                            -EU-
         AH    R2,0(RPARM)         POINT TO DESCRIPTOR CODES       -EU-
         TM    0(R2),X'40'         DESC=2 ?                        -EU-
         BO    SDWTO               YES                             -EU-
NOMCS    XR    R2,R2                                               -EU-
SDWTO    WTO   MF=(E,(1))          SEND MESSAGE TO OPERATOR        -EU-
         LTR   R2,R2                                               -EU-
         BZ    MSEXIT                                              -EU-
         ST    R1,RDOM             GET MESSAGE ID                  -EU-
         OI    RDOM,X'80'          CLOSE MESSAGE ID'S LIST         -EU-
         B     MSEXIT                                              -EU-
MSTSO    LH    R0,0(RPARM)         GET WTO MESSAGE LENGTH          -EU-
         SH    R0,=H'4'            ADJUST LENGTH FOR TPUT          -EU-
         LA    RPARM,4(RPARM)      POINT TO MESSAGE TEXT           -EU-
         TPUT  (1),(0),EDIT        SEND MESSAGE TO TERMINAL        -EU-
         B     MSEXIT                                              -EU-
         SPACE 1                                                   -EU-
REPLY    LA    RPARM,0(RPARM)      CLEAR HIGH ORDER BYTE           -EU-
         AL    RPARM,=V(MSDATA)    COMPUTE MESSAGE ADDRESS         -EU-
         LH    R2,0(RPARM)         GET WTO MESSAGE LENGTH          -EU-
         LA    R2,3(R2)            ADJUST LENGTH FOR MOVE          -EU-
         EX    R2,RPMOVE           MOVE WTO MESSAGE TEXT           -EU-
         TM    SCFLAGS,SCFTEST     ARE WE IN TSO ?                 -EU-
         BO    RPTSO               YES                             -EU-
         LA    R2,RAREA                                            -EU-
         O     R2,=A(X'80000000')                                  -EU-
         ST    R2,RWTO                                             -EU-
         MVI   RWTO+8,L'RAREA                                      -EU-
         LA    R2,RECB                                             -EU-
         ST    R2,RWTO+4                                           -EU-
RPWTOR   XC    RECB,RECB           SEND MESSAGE AND WAIT REPLY     -EU-
         XC    RAREA,RAREA                                         -EU-
         WTOR  MF=(E,RWTO)                                         -EU-
         WAIT  ECB=RECB                                            -EU-
         B     RPLY                                                -EU-
RPMOVE   MVC   RWTO+8(*-*),0(RPARM)                                -EU-
RPTSO    LH    R0,RWTO+8           GET WTO MESSAGE LENGTH          -EU-
         SH    R0,=H'4'            ADJUST LENGTH FOR TPUT          -EU-
         TPUT  RWTO+12,(0),EDIT    SEND MESSAGE TO TERMINAL        -EU-
         XC    RAREA,RAREA                                         -EU-
         TGET  RAREA,L'RAREA                                       -EU-
         LTR   R15,R15                                             -EU-
         BZ    RPLY                                                -EU-
         CH    R15,=H'12'                                          -EU-
         BNE   RPERR                                               -EU-
         TCLEARQ INPUT                                             -EU-
         B     RPTSO                                               -EU-
RPLY     OC    RAREA,=CL8' '                                       -EU-
         CLC   RAREA(4),=CL4'YES'                                  -EU-
         BE    MSEXIT                                              -EU-
         CLC   RAREA(2),=CL2'Y'                                    -EU-
         BE    MSEXIT                                              -EU-
         CLC   RAREA(3),=CL3'NO'                                   -EU-
         BE    RPNO                                                -EU-
         CLC   RAREA(2),=CL2'N '                                   -EU-
         BE    RPNO                                                -EU-
         TM    SCFLAGS,SCFTEST     ARE WE IN TSO ?                 -EU-
         BO    RPTSO               YES                             -EU-
         B     RPWTOR              NO                              -EU-
RPERR    LA    RCODE,8             SET RETURN CODE = 8             -EU-
         B     MSRET                                               -EU-
RPNO     LA    RCODE,4             SET RETURN CODE = 4             -EU-
         B     MSRET                                               -EU-
MSEXIT   XR    RCODE,RCODE         SET RETURN CODE = 0             -EU-
         SPACE 1                                                   -EU-
MSRET    $SUBRET                   RETURN TO CALLER                -EU-
         SPACE 1                                                   -EU-
         LTORG ,                   LITERAL POOL DEFINITION         -EU-
         TITLE '-- M S D A T A - MESSAGE''S TEXT --'               -EU-
MSDATA   CSECT ,                   START OF MESSAGES               -EU-
         SPACE 1                                                   -EU-
SCK0001E GENMS 'SCK0001E -- ERROR DETECTED IN INPUT PARAMETERS'
SCK0002E GENMS 'SCK0002E -- SUPERVISOR MODE COULD NOT BE OBTAINED'
SCK0003E GENMS 'SCK0003E -- ERROR ENCOUNTERED, PROCESS ENDED'
SCK0004I GENMS 'SCK0004I -- DISCONNECT - DATE ERROR',DC=2          -EU-
SCK0005E GENMS 'SCK0005E -- VALUE TYPE DOES NOT MATCH KEYWORD'
SCK0006E GENMS 'SCK0006E -- DASD DEVICE DID NOT OPEN PROPERLY'
SCK0007E GENMS 'SCK0007E -- I/O ERROR ON THE CHECKPOINT DATA-SET'
SCK0008E GENMS 'SCK0008E -- INVALID PARM WAS SPECIFIED (RESET ?)'
SCK0009E GENMS 'SCK0009E -- SETPARM NOT ALLOCATED, USING DEFAULTS'
SCK0010A GENMS 'SCK0010A -- REPLY YES/NO (Y/N)',DC=2               -EU-
SCK0010D GENMS 'SCK0010D -- TERMINAL ERROR, "NO" ASSUMED'
SCK0010I GENMS 'SCK0010I -- NO OTHER ACTIVE CPU FOUND'
SCK0010W GENMS 'SCK0010W -- WAITING FOR SYNCHRONIZATION'
SCK0011E GENMS 'SCK0011E -- TO MANY VALUES SUPPLIED'
SCK0011I GENMS 'SCK0011I -- TIME ESTIMATION MIGHT NOT BE ACCURATE'
SCK0012E GENMS 'SCK0012E -- ERROR OCCURED WHILE SCANNING'
SCK0012I GENMS 'SCK0012I -- ALL CPU''S WILL BE SYNCHRONIZED'
SCK0013E GENMS 'SCK0013E -- KEYWORD EXPECTED BUT BAD SYMBOL FOUND'
SCK0013I GENMS 'SCK0013I -- DISCONNECT - TIME HAS EXPIRED'
SCK0014E GENMS 'SCK0014E -- EXPECTED "=" NOT FOUND, "=" ASSUMED'
SCK0014I GENMS 'SCK0014I -- THIS CPU WILL BE USED AS REFERENCE'
SCK0015A GENMS 'SCK0015A -- PLEASE, DEPRESS TOD CLOCK KEY',DC=2    -EU-
SCK0015E GENMS 'SCK0015E -- PARTIAL SYNCHRONIZATION WILL BE DONE'
SCK0015I GENMS 'SCK0015I -- CLOCKS SYNCHRONIZATION IN PROGRESS'
SCK0016I GENMS 'SCK0016I -- CHECKPOINT RECORD WILL BE RESET'
SCK0017E GENMS 'SCK0017E -- RETRY LATER OR RESET CHECKPOINT'
SCK0017I GENMS 'SCK0017I -- TOO LATE FOR THIS CPU ...'
SCK0018E GENMS 'SCK0018E -- DISCREPANCY IS MORE THAN &MAXDISC MINUTES, *
               CLOCK NOT SET',DC=2                            -EU-V1.01
SCK0019I GENMS 'SCK0019I -- TIME/DATE : HH.MM.SS/YY.DDD',DC=2      -EU-
SCK0020E GENMS 'SCK0020E -- MAX NUMBER OF CPU''S EXCEEDED'         -EU-
SCK0021E GENMS 'SCK0021E -- SMF SYSTEM-ID NOT SUPPORTED'           -EU-
SCK0022E GENMS 'SCK0022E -- DUPLICATE SMF SYSTEM-ID IN COMPLEX'    -EU-
SCK0023E GENMS 'SCK0023E -- SNAP-DUMP OPEN ERROR'                  -EU-
SCK0024E GENMS 'SCK0024E -- SNAP-DUMP ERROR (R.C.=HH)'             -EU-
SCK0025I GENMS 'SCK0025I -- SCAN TERMINATED'                       -EU-
         TITLE '-- S N D M P - STACK SNAP-DUMP ROUTINE --'         -EU-
*******************************************************************-EU-
**                                                                 -EU-
**                      ----  S N D M P  ----                      -EU-
**                                                                 -EU-
**           THIS SUBROUTINE, CALLED BY UTILITIES PROCESSOR,       -EU-
**       WILL STACK SNAP-DUMP OF DATA AREAS (DEBUG AID) IF         -EU-
**       'SYSSNAP' DD-NAME FILE IS PRESENT.                        -EU-
**           WHEN THE STACKS ARRAY IS EXHAUSTED ANY NEW SNAP       -EU-
**       REQUESTS IS LOST (SEE LABEL "SNSTCKS" FOR ARRAY SPACE).   -EU-
**                                                                 -EU-
**           -- INPUT :  R1       SNAP START ADDRESS               -EU-
**                       RLINK+0  SNAP-ID NUMBER                   -EU-
**                            +1  SNAP LENGTH                      -EU-
**                            +4  RETURN ADDRESS                   -EU-
**                                                                 -EU-
*******************************************************************-EU-
         SPACE 2                                                   -EU-
SNDMP    $SUB  ,,                  LOAD INPUT PARAMETERS SUBROUTINE-EU-
         SPACE 1                                                   -EU-
         TM    SCFLAGS,SCFSNAP     SNAP-DUMP REQUESTED ?           -EU-
         BZ    SNRTN               NO, SKIP ALL                    -EU-
         L     R4,CSTCK                                            -EU-
         LR    R6,R4                                               -EU-
         XR    R5,R5                                               -EU-
         ICM   R5,B'0111',1(R14)   GET LENGTH                      -EU-
         ALR   R6,R5                                               -EU-
         CL    R6,LSTCK                                            -EU-
         BH    SNRTN               SKIP IF STACKS ARRAY FULL       -EU-
         LR    R2,R1               SET START DATA ADDRESS          -EU-
         XR    R0,R0                                               -EU-
         IC    R0,0(R14)           SNAP-ID NO. VALUE               -EU-
         LR    R1,R0               LOAD IT'S CONTENT               -EU-
         SRL   R1,3                DIVIDE BY 8                     -EU-
         LA    R3,SCPSNF(R1)       POINT TO BYTE RECEIVING BIT     -EU-
         SLL   R1,3                RESET                           -EU-
         SR    R0,R1               SET TO BIT# TO BE SET           -EU-
         STC   R0,*+L'*+7          SAVE IT TO CONVERT              -EU-
         TR    *+L'*+1(1),=XL8'8040201008040201'  TRANSLATE IT     -EU-
         TM    0(R3),*-*           IS BIT ON ?                     -EU-
         BZ    SNRTN               NO, SKIP                        -EU-
         SPACE 1                                                   -EU-
         MVC   0(4,R4),0(R14)      STORE ID AND LENGTH             -EU-
         LA    R4,4(R4)                                            -EU-
         LR    R3,R5                                               -EU-
         MVCL  R4,R2               STORE DATA                      -EU-
         ST    R6,CSTCK            UPDATE CURRENT STACK ADDRESS    -EU-
         SPACE 1                                                   -EU-
SNRTN    LA    RCODE,4             SET R.C. = 4 TO ADJUST RETURN   -EU-
         $SUBRET                   RETURN TO CALLER                -EU-
         SPACE 1                                                   -EU-
         LTORG ,                   LITERAL POOL DEFINITION         -EU-
         TITLE '-- E X D M P - EXECUTE SNAP-DUMP ROUTINE --'       -EU-
*******************************************************************-EU-
**                                                                 -EU-
**                      ----  E X D M P  ----                      -EU-
**                                                                 -EU-
**           THIS SUBROUTINE, CALLED AT END OF PROCESSING,         -EU-
**       UNLOAD ALL STACKED SNAP-DUMP DATA AREAS ON 'SYSSNAP'      -EU-
**       DD-NAME FILE IF PRESENT.                                  -EU-
**                                                                 -EU-
*******************************************************************-EU-
         SPACE 2                                                   -EU-
EXDMP    $SUB  ,,                  LOAD INPUT PARAMETERS SUBROUTINE-EU-
         SPACE 1                                                   -EU-
         TM    SCFLAGS,SCFSNAP     SNAP-DUMP REQUESTED ?           -EU-
         BZ    SNRET               NO, SKIP ALL                    -EU-
         CLC   CSTCK,ASTCK         ANY SNAP-DUMP TO DO ?           -EU-
         BE    SNFR                NO, SKIP                        -EU-
         LA    R3,SNAPDCB                                          -EU-
         USING IHADCB,R3                                           -EU-
         MVC   SNAPDCB(SNAPLL),SNAPCS                              -EU-
         OPEN  ((R3),OUTPUT),MF=(E,SNAPOP)                         -EU-
         TM    DCBOFLGS,DCBOFOPN   SNAP-DUMP OPENED ?              -EU-
         BO    SNOP                YES                             -EU-
         SEND  SCK0023E                                            -EU-
         B     SNFR                                                -EU-
SNOP     LA    R1,SNHD                                             -EU-
         ST    R1,SNAPHD                                           -EU-
         OI    SNAPHD,X'80'                                        -EU-
         L     R4,ASTCK            START OF STACKS                 -EU-
SNNX     XR    R2,R2                                               -EU-
         IC    R2,0(R4)            GET SNAP-ID                     -EU-
         XR    R5,R5                                               -EU-
         ICM   R5,B'0111',1(R4)    GET LENGTH                      -EU-
         LA    R1,4(R4)            DATA START ADDRESS              -EU-
         ST    R1,SNAPLST                                          -EU-
         ALR   R1,R5                                               -EU-
         ST    R1,SNAPLST+4                                        -EU-
         OI    SNAPLST+4,X'80'                                     -EU-
         SNAP  DCB=(R3),TCB='S',ID=(R2),LIST=SNAPLST,              -EU-*
               STRHDR=SNAPHD,MF=(E,SNAPLIST)                       -EU-
         LTR   R15,R15             ALL OK ?                        -EU-
         BNZ   SNER                NO, ERROR                       -EU-
         ALR   R4,R5               NEXT STACK                      -EU-
         CL    R4,CSTCK                                            -EU-
         BNL   SNEND               END IF NO MORE                  -EU-
         CL    R4,LSTCK                                            -EU-
         BNL   SNEND               ALL STACKS ARRAY PROCESSED      -EU-
         B     SNNX                CONTINUE WITH NEXT              -EU-
SNER     L     R14,=A(SCK0024E)    MESSAGE POINTER                 -EU-
         AL    R14,=V(MSDATA)      WTO MESSAGE ADDRESS             -EU-
         AH    R14,0(R14)          POINT TO END OF TEXT +1         -EU-
         SH    R14,=H'3'           BACK TO R.C. TEXT               -EU-
         STC   R15,1(R14)          SET CC IN MESSAGE               -EU-
         SRL   R15,4                                               -EU-
         STC   R15,0(R14)                                          -EU-
         NC    0(2,R14),=XL2'0F0F'                                 -EU-
         TR    0(2,R14),=CL16'0123456789ABCDEF'                    -EU-
         SEND  SCK0024E                                            -EU-
SNEND    CLOSE (SNAPDCB),MF=(E,SNAPCL)                             -EU-
SNFR     L     R0,=A(STCKSL)       FREE STACKS ARRAY               -EU-
         L     R1,ASTCK                                            -EU-
         FREEMAIN R,LV=(0),A=(1)                                   -EU-
         SPACE 1                                                   -EU-
SNRET    XR    RCODE,RCODE         SET RETURN CODE = 0             -EU-
         $SUBRET                   RETURN TO CALLER                -EU-
         SPACE 1                                                   -EU-
         LTORG ,                   LITERAL POOL DEFINITION         -EU-
         TITLE '-- S N D M P - SKELETONS AND CONSTANTS --'         -EU-
SNAPCS   DCB   DSORG=PS,RECFM=VBA,MACRF=(W),BLKSIZE=1632,          -EU-*
               LRECL=125,DDNAME=SYSSNAP                            -EU-
         OPEN  (*-*),MF=L                                          -EU-
         CLOSE (*-*),MF=L                                          -EU-
         SNAP  MF=L                                                -EU-
SNAPLL   EQU   *-SNAPCS                                            -EU-
         SPACE 1                                                   -EU-
SNHD     DC    AL1(L'SNHDT)                                        -EU-
SNHDT    DC    C'S E T C L O C K - DATA AREAS STATUS (DEBUG AID).' -EU-
         TITLE '-- L O C A L     D S E C T S --'
***********************************************************************
**                                                                   **
**       SYSTEM ENTRY -- THERE IS ONE ENTRY FOR EACH SYSTEM          **
**                                                                   **
***********************************************************************
         SPACE 1
CKSYS    DSECT                     DEFINE SYSTEM ENTRY DSECT       -EU-
         SPACE 1                                                   -EU-
CKSID    DS    CL4                 SYSTEM ID
CKSSTAT  DS    C                   SYSTEM STATUS
CKTWAIT  EQU   C'W'                -- WAIT
CKTTRACK EQU   C'T'                -- TRACKED
CKTLOCK  EQU   C'L'                -- LOCKED
CKTTIME  EQU   C'R'                -- TIME REFRESHED
CKTSET   EQU   C'S'                -- TIME IS SET
CKTDISC  EQU   C'D'                -- DISCONNECTED
CKSREQ   DS    C                   INDICATORS                      -EU-
CKTRFCPU EQU   C'R'                -- REFERENCE CPU                -EU-
CKTADD   EQU   C'A'                -- ADD DISCREPANCY VALUE        -EU-
CKTSUB   EQU   C'S'                -- SUBSTRACT DISCREPANCY VALUE  -EU-
         DS    2X                  RESERVED                        -EU-
CKSYSCLK DS    D                   SYSTEM CLOCK -- CPU CLK WHEN REQUEST
*                                  WAS TO 'LOCK'
CKSTIME  DS    F                   TIME OF DAY IN 100TH OF SEC.    -EU-
CKCVTTZ  DS    F                   LOCAL-GREENWICH DEVIATION.      -EU-
         SPACE 1                                                   -EU-
CKSYSL   EQU   (((*-CKSYS)+7)/8)*8 LENGTH ROUNDED TO DOUBLEWORD    -EU-
         EJECT
***********************************************************************
**                                                                   **
**       CHECKPOINT RECORD DESCRIPTION                               **
**                                                                   **
***********************************************************************
         SPACE 1
CHECKPT  DSECT                     DEFINE CHECKPOINT RECORD DSECT
         SPACE 1
CKHKEY   DS    XL8                 HARDWARE KEY DESCRIPTION
*
*              X'0000000000000000' -- FREE LOCK HARD KEY
*
         ORG   CKHKEY
         DC    X'FFFFFFFF'         LOCKED STATE KEY
CKLKSID  DS    CL4                 LOCKED CHECKPOINT SYSTEM ID (OWNER)
CKID     DC    C'CKPT'             CHECKPOINT RECORD ID
CKREQ    DS    X                   REQUEST CODE
CKRLWAIT EQU   X'00'               -- LONG WAIT
CKRTRACK EQU   X'04'               -- TRACK SYSTEM
CKRLOCK  EQU   X'08'               -- LOCK  SYSTEM
CKRSET   EQU   X'0C'               -- SET TIME AND DATE
CKREND   EQU   X'10'               -- TERMINATE PROGRAM (END)
CKCREQ   DS    C                   "CHARACTER REQUEST"
CKCRLW   EQU   C'W'                -- LONG WAIT
CKCRTR   EQU   C'T'                -- TRACK
CKCRTL   EQU   C'L'                -- LOCK
CKCRST   EQU   C'S'                -- SET TIME
CKCRND   EQU   C'E'                -- END OF PROGRAM
CKFLAGS  DS    FL1                 GLOBAL CHECKPOINT FLAGS
CKFLOCK  EQU   B'00000001'         ALL SYSTEMS GOT THE LOCK STATE
         DS    X                   RESERVED
CKRDATE  DS    PL4                 DATE IN FORMAT X'00YYDDDF'      -EU-
CKNACPU  DS    H                   NUMBER OF ACTIVE CPU (TRACKED BEFORE
*                                  DISCONNECT TIME IS REACHED)
CKNRCPU  DS    H                   RESIDUAL NUMBER OF CPU'S TO REACH
*                                  THE "LOCK" STATE OR THE "SET" STATE
CKSCLOCK DS    D                   CLOCK TO BE SET
         DS    0D                  ALIGN ENTRIES TO DOUBLEWORD
CKSENTRY DS    (MAXCPUD)XL(CKSYSL) SYSTEM ENTRY (THERE IS AS       -EU-
*                                  MANY SYSTEM ENTRIES AS THERE    -EU-
*                                  ARE CPU'S TO BE SYNCHRONIZED    -EU-
*                                  TOGETHER).                      -EU-
         SPACE 1                                                   -EU-
CKLEN    EQU   *-CHECKPT           CHECKPOINT RECORD LENGTH        -EU-
         EJECT
***********************************************************************
**                                                                   **
**       SCAN CONTROL BLOCK DSECT DEFINITION                         **
**                                                                   **
***********************************************************************
         SPACE 1
         SCANTCB LIST=YES
         EJECT
***********************************************************************
**                                                                   **
**       WORK DSECT -- STORAGE WORK AREA                             **
**                                                                   **
***********************************************************************
         SPACE 1
WORK     DSECT                     WORK AREA DSECT DESCRIPTION
         SPACE 1
AREA     DS    18F                 MAINLINE SAVE AREA
AREA2    DS    18F                 SECOND LEVEL ROUTINES SAVE AREA
RLSAVE   DS    F                   SAVE PROCESS RETURN REGISTER    -EU-
SCWEXTR  EXTRACT *-*,'S',MF=L                                      -EU-
SCWTIOT  DS    F                                                   -EU-
SCWTSO   DS    F                                                   -EU-
SCWDBLE  DS    D                   WORK DOUBLE WORD
SCWPKBUF DS    PL8                 PACK BUFFER
SCSYSID  DS    CL4                 SYSTEM ID
SCENTRYP DS    A                   POINTER TO THE SYSTEM ENTRY IN THE
*                                  CHECKPOINT BUFFER
SCCKCNT  DS    XL8                 COUNT FIELD (SHOULD IMMEDIATELY
*                                  PRECEEDE 'SCCKPNT' -- USED TO
*                                  WRITE THE RECORD)
         ORG   SCCKCNT             RESET POINTER TO COUNT FIELD
SCCKID   DC    XL5'0000000000'     COUNT ID (CCHHR)
SCCKLEN  DS    AL3                 RECORD LENGTH
         ORG   SCCKLEN             RESET ORDINAL COUNTER
         DC    AL1(L'CKHKEY)       -- KEY  LENGTH
         DC    AL2(CKLEN-L'CKHKEY) -- DATA LENGTH
SCCKPNT  DS    XL(CKLEN)           CHECKPOINT RECORD BUFFER
SCDCLOCK DS    D                   CLOCK WORK DOUBLE WORD
SCWTIME  DS    F                   CURRENT WAITING TIME
*                                  -- DEPEND UPON STATE
         EJECT
***********************************************************************
**                                                                   **
**        SNAP-DUMP WORK AREA                                    -EU-**
**                                                                   **
***********************************************************************
         SPACE 1                                                   -EU-
SNAPDCB  DCB   DSORG=PS,RECFM=VBA,MACRF=(W),BLKSIZE=1632,          -EU-*
               LRECL=125,DDNAME=SYSSNAP                            -EU-
SNAPOP   OPEN  (*-*),MF=L                                          -EU-
SNAPCL   CLOSE (*-*),MF=L                                          -EU-
SNAPLIST SNAP  MF=L                                                -EU-
SNAPLST  DS    2F                                                  -EU-
SNAPHD   DS    F                                                   -EU-
         EJECT
***********************************************************************
**                                                                   **
**        INPUT PARAMETERS VARIABLES DEFINITIONS                     **
**                                                                   **
***********************************************************************
         SPACE 1
SCPRDSA  DS    6F                  RDSCAN COMMUNICATION SAVE AREA
SCPSTCB  DS    XL(SCANDLN)         SCAN TEXT CONTROL BLOCK
SCPWAIT  DS    F                   LONG  WAIT TIME (HUNDREDS OF SEC)
SCPTRACK DS    F                   TRACK WAIT TIME (HUNDREDS OF SEC)
SCPSEEK  DS    F                   SEEK TIME -- I/O ESTIMATED TIME
SCPMAXC  DS    F                   MAXIMUM NUMBER OF CPU'S. IF    V1.04
*                                  RESET IS NOT SPECIFIED, IT     V1.04
*                                  WILL BE READ FROM CHECKPOINT   V1.04
SCPDISC  DS    F                   ELAPSED TRACKING TIME  BEFORE
*                                  CONSIDERING A SYSTEM AS "INACTIVE"
SCPMTHD  DS    F                   SYNCH. METHOD NO.               -EU-
BASECPU  EQU   1                   -- BY BASE CPU                  -EU-
SCPLOCK  DS    F                   LOCK WAIT TIME -- SEEK*NACPU
RDOM     DS    F                   DELETE MESSAGE ID'S LIST        -EU-
ASTCK    DS    F                   FIRST STACK ADDRESS             -EU-
LSTCK    DS    F                   LAST STACK ADDRESS              -EU-
CSTCK    DS    F                   CURRENT STACK ADDRESS           -EU-
         SPACE 1
SCFLAGS  DS    FL1                 FLAGS
SCFRESET EQU   B'00000001'         CHECKPOINT RECORD WILL BE RESET
SCFTEST  EQU   B'00000010'         INDICATE 'TEST' RUN (TSO)       -EU-
SCFNCMS  EQU   B'00000100'         INDICATE NO SET CLOCK DONE      -EU-
SCFDTERR EQU   B'00001000'         INDICATE DATE ERROR             -EU-
SCFSNAP  EQU   B'00010000'         INDICATE SNAP-DUMP REQUEST      -EU-
SCPFLAGS DS    FL1                 FLAGS BYTE
SCPFCNT  EQU   B'00000001'         -- CONTINUING SAME KEYWORD PARSE
SCPFPERR EQU   B'00000010'         -- PARSE ERROR ENCOUNTERED
         SPACE 1                                                   -EU-
SCPSNF   DS    XL32                SNAP-ID INDICATORS (0-255)      -EU-
         SPACE 1
***********************************************************************
**                                                                   **
**       SET DATE MESSAGE MAPPING                                    **
**                                                                   **
***********************************************************************
         SPACE 1
SCDWMSG  DC    C'SCK0019I -- TIME/DATE : '                         -EU-
SCDWTIM  DC    C'HH.MM.SS',C'/'    TIME                            -EU-
SCDWDAT  DC    C'YY.DDD'           DATE
         SPACE 1                                                   -EU-
WORKLEN  EQU   (((*-WORK)+7)/8)*8  WORK AREA LENGTH IN DOUBLEWORDS -EU-
         TITLE '--  S Y S T E M     D S E C T S --'
***********************************************************************
**                                                                   **
**       SYSTEM DSECTS                                               **
**                                                                   **
***********************************************************************
         SPACE 1
         PUSH  PRINT               SAVE PRINT STATUS
         PRINT ON,NOGEN            SUPPRESS SYSTEM GENERATION
         SPACE 1
         IHAPSA                    PREFIXED STORAGE AREA
         DCBD DSORG=PS             DATA CONTROL BLOCK
         IECSDSL1 1                DSCB
         CVT   DSECT=YES           COMMUNICATION VECTOR TABLE
         IEESMCA                   SMF CONTROL TABLE (FOR SID)
         IEZDEB                    DEB MAP AND KEYWORDS
         IEZIOB                    IOB MAP AND KEYWORDS
TIODSECT DSECT                                                     -EU-
         IEFTIOT1 ,                                                -EU-
         SPACE 1
         POP   PRINT               RESET PRINT STATUS
         SPACE 2
         END
