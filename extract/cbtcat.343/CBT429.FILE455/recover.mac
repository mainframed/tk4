RCVR     TITLE 'SERVICE AIDS - RECOVER DATA-SETS.'
RECOVER  START 0
         SPACE 1
*********************************************************************
*** ALTHOUGH THIS PROGRAM HAS BEEN TESTED BY ITS AUTHOR AND IS IN ***
*** USE AT THE UNIVERSITY OF WATERLOO, NO WARRANTY, EXPRESSED OR  ***
*** IMPLIED, IS MADE AS TO THE ACCURACY OR FUNCTIONING OF THE     ***
*** PROGRAM AND RELATED MATERIAL. THERE IS NO COMMITED MAINTENANCE***
*** OF THE PROGRAM. THE FACT OF DISTRIBUTION SHALL NOT CONSTITUTE ***
*** ANY WARRANTY AND NO RESPONSIBILITY IS ASSUMED BY THE AUTHOR   ***
*** NOR THE UNIVERSITY OF WATERLOO IN CONNECTION HEREWITH.        ***
*********************************************************************
         SPACE 2
RECOVER AMODE  24
RECOVER RMODE  24
         EJECT
* SERVICE AIDS : RECOVER
* --------------
*
*     PURPOSE :      THIS PROGRAM ATTEMPTS TO RECOVER DATA-SETS
*                    THAT HAVE BECOME UNUSABLE DUE TO I/O ERRORS
*                    OR END-OF-FILE MARKS.
*                    WITH EITHER OF THE ABOVE ONE OR MORE BLOCKS
*                    MAY BE PERMANENTLY LOST (AT AND IMMEDIATELY
*                    FOLLOWING THE CAUSE), BUT THE REST CAN STILL
*                    BE RECOVERED.
*                    NO RE-BLOCKING FACILITY IS PROVIDED, AND TO
*                    AVOID ERRORS, THE OUTPUT DCB IS FILLED WITH
*                    VALUES TAKEN FROM THE INPUT DCB DURING THE
*                    OPEN, THUS NO DCB INFORMATION SHOULD BE
*                    SPECIFIED IN THE JCL (IT WOULD BE IGNORED).
*
*     USAGE :        THE FACILITIES PROVIDED IN THE PROGRAM ARE
*                    SPECIFIED BY THE EXEC PARM AS A SET OF
*                    KEYWORDS AND VALUES (NO BLANKS) :
*                    COUNT=N : SPECIFIES THE NUMBER OF I/O ERRORS
*                          OR END-OF-FILES THE PROGRAM IS TO
*                          ACCEPT (DEFAULT = 1),
*                    START=XXXXXXXX - SPECIFIES THE RELATIVE TRACK
*                          AND RECORD BEYOND THE START OF THE
*                          DATASET THAT THE RECOVERY IS TO START
*                          AT, THE VALUE GIVEN IS IN TTRZ FORMAT
*                          IN HEX (DEFAULT = 00000000),
*                    POINT=T - SPECIFIES THE TYPE OF SKIP TO BE
*                          USED WHEN AN I/O ERROR OR END-OF-FILE IS
*                          ENCOUNTERED, THE VALID TYPES ARE T, R
*                          OR Z TO CORRESPOND WITH TTRZ (DEFAULT = Z),
*                    WRITE=S - SPECIFIES WHETHER THE CURRENT BLOCK
*                          IS TO BE WRITTEN OUT IN THE EVENT OF AN
*                          I/O ERROR (CONSIDERING THAT THE BLOCK WAS
*                          PARTIALLY FILLED AT THE TIME OF THE ERROR
*                          AND THUS MAY YET BE USABLE), THE VALID
*                          SPECIFICATIONS ARE Y OR N FOR YES OR NO
*                          (DEFAULT = N).
*
*                    ABBREVIATIONS CONSISTING OF THE FIRST CHARACTER
*                    OF EACH KEYWORD ARE ALLOWED, FURTHER THE COUNT
*                    VALUE 'N' MAY BE SPECIFIED AS A POSITIONAL
*                    PARAMETER IF IT IS GIVEN FIRST (THIS ALLOWS
*                    PARM=N).
         EJECT
*                    THE PROGRAM IS DESIGNED TO HANDLE ONLY SEQUENTIAL
*                    FILES, BUT RECOVERY CAN OBVIOUSLY START AT THE
*                    BEGINNING OF A SPECIFIC MEMBER OF A PDS AS LONG
*                    AS IT IS EXPLICITLY STATED IN THE JCL.
*                    NOTE THAT IN THE CASE OF I/O ERRORS IN THE
*                    DIRECTORY OF A PDS THE EASIEST METHOD OF
*                    RECOVERY IS TO START THE COPY FUNCTION AT THE
*                    BEGINNING OF THE DATASET (IE. POINT THE
*                    SYSUT1 DD STATEMENT TO THE DATASET ITSELF),
*                    THIS EFFECTIVELY STARTS THE RECOVERY AT THE
*                    DIRECTORY - WHICH WILL NOT BE USABLE IN THE
*                    OUTPUT DATASET. THE OUTPUT DATASET WILL THEN
*                    BE A SEQUENTIAL CONCATENATION OF ALL THE
*                    MEMBERS IN THE PDS AND SOME OTHER UTILITY
*                    PROGRAM OR TSO MAY THEN BE USED TO SELECT
*                    THE PORTIONS FOR SAVING IN NEW, PERMANENT
*                    DATASETS.
*
*     JCL :          //........ JOB ........
*                    //RCV     EXEC PGM=RECOVER,PARM='C=5,P=T'
*                    //SYSUT1   DD  DSN=PDS(BADMEMB),DISP=SHR
*                    //SYSUT2   DD  DSN=RECOVERD,DISP=SHR
*
*                    WILL RESULT IN A TOTAL OF 5 INPUT ERRORS,
*                    END-OF FILES BEING ACCEPTED WHILE MEMBER
*                    BADMEMB IS COPIED TO DATASET RECOVERD. AT
*                    EACH I/O ERROR OR END-OF-FILE THE RELATIVE
*                    TRACK WILL BE INCREMENTED BEFORE COPYING IS
*                    CONTINUED. THE RECOVERY OPERATION WILL START
*                    AT THE BEGINNING OF MEMBER BADMEMB AND THE
*                    CURRENT BLOCK WILL NOT BE WRITTEN WHEN ERRORS
*                    OCCUR.
*
*     MESSAGES :     MESSAGES FROM THE PROGRAM ARE WRITTEN IN THE
*                    JOB'S LOG, THE FOLLOWING ARE THE POSSIBLE
*                    MESSAGES FROM RECOVER :
*
*                    **** INVALID EXEC PARM FIELD       ****
*                    **** MERGED DEFAULTS AND EXEC PARM ****
*                    **** CANNOT OPEN SYSUT1            **** (1)
*                    **** CANNOT OPEN SYSUT2            **** (2)
*                    **** EOF ON SYSUT1 NOTED           ****
*                    **** INPUT ERROR NOTED             ****
*                    **** CURRENT BLOCK WRITTEN         ****
*                    **** OUTPUT ERROR, FATAL           **** (3)
*                    **** NO. OF BLOCKS WRITTEN = VALUE ****
*
*                    AFTER MESSAGES 1, 2 OR 3 THE PROGRAM ISSUES
*                    AN ABEND REQUESTING A DUMP.
         EJECT
        $DEFREG
OFLGS    EQU   DCBOFLGS-IHADCB
RECFM    EQU   DCBRECFM-IHADCB
BLKSI    EQU   DCBBLKSI-IHADCB
LRECL    EQU   DCBLRECL-IHADCB
         EJECT
        $XENT  BASE=R12
         XR    R8,R8               INITIALIZE: WRITE CODE
         XR    R9,R9                           INITIAL TTR
         XR    R10,R10                         POINT METHOD
         XR    R11,R11                         EOF / IN-ERR COUNT
         L     R2,0(0,R1)          POINT TO PARM FIELD
         LH    R3,0(0,R2)          GET ITS LENGTH
         LTR   R3,R3               TEST IF PARM GIVEN
         BZ    NOPARM              NO, OMIT PARM PROCESSING
         LA    R2,2(0,R2)          POINT TO START OF CHAR STRING
         CLI   0(R2),C'Z'          TEST IF FIRST (ONLY) PARM IS COUNT
         BH    SETCOUNT            YES, GO PROCESS IT
PARMLOOP LR    R1,R2               GET PARM STRING INDEX
         LA    R2,6(0,R2)          POINT BEYOND KEY-WORD
         S     R3,=F'6'            REDUCE PARM LENGTH VALUE
         CLC   0(6,R1),=C'COUNT='  TEST FOR COUNT
         BE    SETCOUNT            EQUAL, GO PROCESS IT
         CLC   0(6,R1),=C'START='  TEST FOR START
         BE    SETSTART            EQUAL, GO PROCESS IT
         CLC   0(6,R1),=C'POINT='  TEST FOR POINT
         BE    SETPOINT            EQUAL, GO PROCESS IT
         CLC   0(6,R1),=C'WRITE='  TEST FOR WRITE
         BE    SETWRITE            EQUAL, GO PROCESS IT
         LA    R3,4(0,R3)          NOW TRY ABBREVIATED FORMS
         S     R2,=F'4'            RESET INDEX AND COUNT
         CLC   0(2,R1),=C'C='      IS IT COUNT ?
         BE    SETCOUNT            YES,...
         CLC   0(2,R1),=C'S='      IS IT START ?
         BE    SETSTART            YES,...
         CLC   0(2,R1),=C'P='      IS IT POINT ?
         BE    SETPOINT            YES,...
         CLC   0(2,R1),=C'W='      IS IT WRITE ?
         BE    SETWRITE            YES,...
BADPARM WTO    '**** INVALID EXEC PARM               ****', TELL USER  1
               ROUTCDE=11,DESC=7
         B     EXIT                NOT RECOGNISED ......
SETCOUNT LR    R1,R2               GET START OF NUMBERS
CNTLOOP  CLI   0(R1),C','          IS IT END OF NUMBERS ?
         BE    ENDCOUNT            YES, GO PROCESS THEM
         CLI   0(R1),C'0'          CHECK VALIDITY OF NUMBER
         BL    BADPARM             NOT NUMERIC .......
         LA    R1,1(0,R1)          POINT TO NEXT CHAR
         BCT   R3,CNTLOOP          CONTINUE SCAN
ENDCOUNT SR    R1,R2               GET LENGTH OF NUMBER STRING
         C     R1,=F'4'            MAX DIGITS ALLOWED = 4
         BH    BADPARM             TOO MANY .......
         BCTR  R1,0                REDUCE LENGTH FOR EX MVC'S
         XC    SCRATCH,SCRATCH     CLEAR SCRATCH AREA
         LA    R4,SCRATCH+7        POINT TO LAST BYTE OF WORK AREA
         SR    R4,R1               POINT TO TARGET ADDRESS
         EX    R1,NUMBMVC          SHIFT NUMBER TO SCRATCH (RIGHT ADJ)
         MVC   WTLCOUNT+8(4),SCRATCH+4  SHIFT IT TO WTL AREA
         MVI   WTLCOUNT+12,C','    INSERT COMMA
         PACK  SCRATCH,SCRATCH     PACK THE CHAR STRING
         LA    R2,1(R1,R2)         BUMP INDEX PTR
         CVB   R11,SCRATCH         AND CVB INTO PERMANENT LOC
         B     NEXTPARM            CONTINUE PARM PROCESSING
SETSTART LR    R1,R2               POINT TO START OF TTRZ FIELD
STRTLOOP CLI   0(R1),C','          END OF TTRZ FIELD ?
         BE    ENDTTRZ             YES, GO PROCESS IT
         CLI   0(R1),C'A'          ENSURE VALID HEX DIGIT
         BL    BADPARM             NOT HEX DIGIT .......
         LA    R1,1(0,R1)          BUMP INDEX PTR
         BCT   R3,STRTLOOP         CONTINUE SCAN
ENDTTRZ  SR    R1,R2               GET LENGTH OF STRING
         C     R1,=F'8'            COMPARE TO NECESSARY = 8
         BNE   BADPARM             INVALID LENGTH .....
         MVC   WTLSTART+8(8),0(R2) INSERT INTO WTL FIELD
         MVC   SCRATCH(8),0(R2)    SHIFT TTRZ TO WORK AREA
         PACK  SCRATCH+4(5),SCRATCH(9)  PACK INTO RIGHT ADJUST
         L     R9,SCRATCH+4        LOAD INTO PARAM REG
         LA    R2,8(0,R2)          POINT TO NEXT PARM
         B     NEXTPARM            CONTINUE PARM PROCESSING
SETPOINT LR    R1,R2               GET STRING INDEX
         MVC   WTLPOINT+8(1),0(R1) SHIFT POINT METHOD TO WTL
         LA    R2,1(0,R2)          POINT BEYOND IT
         BCTR  R3,0                REDUCE COUNT
         LA    R10,TTRZ            GET TTRZ METH ADDR
         CLI   0(R1),C'Z'          IT THIS THE ONE ?
         BE    NEXTPARM            YES, GO PROCESS NEXT
         LA    R10,TTR             GET TTR METH ADDR
         CLI   0(R1),C'R'          IS THIS THE ONE ?
         BE    NEXTPARM            YES, GO PROCESS NEXT
         LA    R10,TT              GET TT METH ADDR
         CLI   0(R1),C'T'          IS THIS THE ONE ?
         BE    NEXTPARM            YES, GO PROCESS NEXT
         B     BADPARM             NOT RECOGNIZED .......
SETWRITE LR    R1,R2               GET STRG INDEX
         LA    R2,1(0,R2)          POINT BEYOND CODE
         BCTR  R3,0                REDUCE COUNT
         MVC   WTLWRITE+8(1),0(R1) SHIFT CODE TO WTL
         CLI   0(R1),C'N'          IS CODE NO-WRITE ?
         BE    NEXTPARM            YES, LEAVE PRESET CODE
         CLI   0(R1),C'Y'          IS IT WRITE ?
         BNE   BADPARM             NEITHER, ......
         LA    R8,255(0,0)         SET CODE = WRITE
NEXTPARM LA    R2,1(0,R2)          SKIP OVER COMMA
         BCTR  R3,0                REDUCE COUNT FOR COMMA
         LTR   R3,R3               IS THERE ANY MORE ?
         BP    PARMLOOP            YES, CONTINUE PARM PROCESSING
NOPARM   STC   R8,WRFLAG           SAVE IN-ERR WRITE FLAG
         ST    R9,SCRATCH          SAVE R9 FOR INITIAL POINT
         LTR   R11,R11             PARM END, WAS COUNT SET ?
         BNZ   TRYPOINT            YES, OMIT DEFAULT SET
         LA    R11,1(0,0)          SET DEFAULT COUNT = 1
TRYPOINT LTR   R10,R10             WAS POINT METH SET ?
         BNZ   PARMWTL             YES, OMIT DEFAULT SET
         LA    R10,TTRZ            SET DEFAULT METH = TTRZ
PARMWTL WTO    '**** COUNT = 1,    START = 00000000, POINT = Z, WRITE =1
                N ****',ROUTCDE=11,DESC=7
WTLCOUNT EQU   PARMWTL+13
WTLSTART EQU   PARMWTL+27
WTLPOINT EQU   PARMWTL+45
WTLWRITE EQU   PARMWTL+56
         EJECT
         L     R0,CLEAR+4
        GETMAIN R,LV=(0)
         ST    R1,CLEAR
         LR    R7,R1               BUFFER ADDRESS
        OPEN   (SYSUT1)            OPEN SYSUT1
         TM    SYSUT1+OFLGS,DCBOFOPN    WAS SYSUT1 PROPERLY OPENED ?
         BO    OPENUT2             YES, GO OPEN SYSUT2
        WTO    '**** CANNOT OPEN SYSUT1              ****', TELL USER  1
               ROUTCDE=11,DESC=7
         B     ABEX                GO ABEND WITH DUMP
OPENUT2  MVC   SYSUT2+RECFM(1),SYSUT1+RECFM  SHIFT RECFM
         MVC   SYSUT2+BLKSI(2),SYSUT1+BLKSI  SHIFT BLKSIZE
         MVC   SYSUT2+LRECL(2),SYSUT1+LRECL  SHIFT LRECL
        OPEN   (SYSUT2,(OUTPUT))   OPEN SYSUT2
         TM    SYSUT2+OFLGS,DCBOFOPN    WAS SYSUT2 PROPERLY OPENED ?
         BO    INITP               YES, GO TEST FOR INITIAL POINT
        WTO    '**** CANNOT OPEN SYSUT2              ****', TELL USER  1
               ROUTCDE=11,DESC=7
         B     ABEX                GO ABEND WITH DUMP
INITP    LTR   R9,R9               WAS INITIAL POINT SPECIFIED ?
         BZ    RDWRLOOP            NO, GO READ
         EJECT
POINT   POINT  SYSUT1,SCRATCH      POINT TO NEXT BLOCK
RDWRLOOP LM    R2,R5,CLEAR         CLEAR BUFFER TO BLANKS
         MVCL  R2,R4
        READ   DECB1,SF,SYSUT1,(R7),'S' READ A BLOCK
        WAIT   1,ECB=DECB1         WAIT FOR COMPLETION
        NOTE   SYSUT1              NOTE THE TTRZ FROM READ
         LR    R9,R1               SAVE TTRZ IN R9
        CHECK  DECB1               ISSUE CHECK FOR THE READ
        WRITE  DECB2,SF,SYSUT2,(R7)     WRITE OUT THE BLOCK
        CHECK  DECB2               ISSUE CHECK FOR WRITE
         LA    R8,1(0,R8)          INCREMENT COUNT OF BLKS
         B     RDWRLOOP            CONTINUE
         EJECT
SUT1ERR SYNADAF ACSMETH=BSAM       GET ERROR MESSAGE
         MVC   ERRWTL+8(78),50(R1) SHIFT IT TO WTL FIELD
ERRWTL  WTO    '                                                       1
                                        ',ROUTCDE=11,DESC=7
        SYNADRLS                   RELEASE SAVE AREA, MESS BUFFER
        WTO    '**** INPUT ERROR NOTED               ****', TELL USER  1
               ROUTCDE=11,DESC=7
         CLI   WRFLAG,X'00'        TEST ERROR WRITE FLAG
         BE    CLOSE               OFF, DON'T ISSUE WRITE
        WRITE  DECB3,SF,SYSUT2,(R7)     WRITE OUT THE BLOCK
        CHECK  DECB3               ISSUE CHECK FOR WRITE
         LA    R8,1(0,R8)          INCREMENT COUNT OF BLKS
        WTO    '**** CURRENT BLOCK WRITTEN           ****', TELL USER  1
               ROUTCDE=11,DESC=7
         B     CLOSE               GO CLOSE, REOPEN, POINT
         SPACE 2
SUT2ERR SYNADAF ACSMETH=BSAM       GET ERROR MESSAGE
         MVC   ERRWTL2+8(78),50(R1)     SHIFT IT TO WTL FIELD
ERRWTL2 WTO    '                                                       1
                                        ',ROUTCDE=11,DESC=7
        SYNADRLS                   RELEASE SAVE AREA, MESS BUFFER
        WTO    '**** OUTPUT ERROR, FATAL             ****', TELL USER  1
               ROUTCDE=11,DESC=7
         BAS   R14,COUNT           GO GIVE BLOCK COUNT
ABEX    ABEND  1,DUMP              ABEND WITH DUMP
         SPACE 2
SUT1EOF WTO    '**** EOF ON SYSUT1 NOTED             ****', TELL USER  1
               ROUTCDE=11,DESC=7
CLOSE    BAS   R14,COUNT           GO GIVE BLOCK COUNT
         BCT   R11,CONT            DO WE CONTINUE ?
        CLOSE  (SYSUT1,,SYSUT2)    CLOSE ALL
         L     R1,CLEAR
         L     R0,CLEAR+4
        FREEMAIN R,A=(1),LV=(0)
EXIT    $XRET  CC=0                TERMINATE PROCESS
         EJECT
CONT    CLOSE  (SYSUT1)            CLOSE SYSUT1
        OPEN   (SYSUT1)            REOPEN SYSUT1
         ST    R9,SCRATCH          PUT INTO SCRATCH FOR POINT
         BR    R10                 GO TO REQUESTED ADDRESSING METH
TT       LH    R9,SCRATCH          PICK UP TT
         LA    R9,1(0,R9)          INCREMENT IT
         STH   R9,SCRATCH          AND RESTORE
         B     POINT               GO POINT TO IT
TTR      XR    R9,R9               CLEAR REG 9
         IC    R9,SCRATCH+2        INSERT R OF TTR
         LA    R9,1(0,R9)          INCREMENT IT
         STC   R9,SCRATCH+2        AND RESTORE
         B     POINT               GO POINT TO IT
TTRZ     MVI   SCRATCH+3,X'01'     SET Z OF TTRZ TO SPEC 'NEXT'
         B     POINT               GO POINT TO IT
         SPACE 2
COUNT    CVD   R8,SCRATCH          CONVERT BLK COUNT
         UNPK  WTL+36(7),SCRATCH+4(4)   UNPACK INTO WTL AREA
         OI    WTL+42,X'F0'        ZAP SIGN TO CHAR
WTL     WTO    '**** NO OF BLOCKS WRITTEN =          ****', TELL USER  1
               ROUTCDE=11,DESC=7
         BR    R14                 RETURN TO CALLER
         SPACE 2
NUMBMVC  MVC   0(*-*,R4),0(R2)     TO SHIFT PARM TO SCRATCH AREA
         EJECT
         LTORG
         SPACE 2
SCRATCH  DC    D'0',XL2'0'         SCRATCH AREA FOR CONVERT/POINT
WRFLAG   DC    XL1'0'              FLAG FOR WRITE AFTER IN ERR
BLANK    DC    CL1' '
CLEAR    DC    A(*-*,32*1024,BLANK),CL1' ',AL3(1)
         SPACE 2
SYSUT1   DCB   DSORG=PS,MACRF=(RP),DDNAME=SYSUT1,      INPUT DCB       1
               EODAD=SUT1EOF,SYNAD=SUT1ERR                ****
         SPACE 2
SYSUT2   DCB   DSORG=PS,MACRF=(W),DDNAME=SYSUT2,       OUTPUT DCB      2
               SYNAD=SUT2ERR                              ****
         SPACE 2
        PRINT  NOGEN
        DCBD   DSORG=PS,DEVD=DA
         SPACE 2
         END
