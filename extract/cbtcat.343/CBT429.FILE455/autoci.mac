AOCI     TITLE 'AUTOMATIC OPERATORS COMMANDS ISSUER.'
         PRINT OFF
         MACRO           GENERATE TABLE KEYWORDS ENTRIES.
&NAME   $KW    &RA,&KN,&KA
         LCLC  &X
.*
.* $KW MACRO : RA = ROUTINE ADDRESS.
.* ----------- KN = KEYWORD NAME.
.*             KA = KEYWORD ALIAS (OPTIONAL).
.*      NOTE : KN AND KA MAY BE SPECIFIED (...,N) TO SUPPRESS THE
.*             FINAL BLANK GENERATION.
.*
         AIF   (N'&SYSLIST GT 3).TOO
         AIF   (N'&SYSLIST EQ 0).MIS
         AIF   (T'&RA EQ 'O' AND T'&KN EQ 'O').MIS
&X       SETC  'IHB'.'&SYSNDX'
&NAME    DC    AL1(L'&X-1)
         AIF   ('&KN(2)' NE '').A
&X       DC    C'&KN ',AL4(&RA)
         AGO   .B
.A       AIF   ('&KN(2)' NE 'N').BKN
&X       DC    C'&KN(1)',AL4(&RA)
.B       AIF   (T'&KA EQ 'O').END
         DC    AL1(L'&X.A-1)
         AIF   ('&KA(2)' NE '').C
&X.A     DC    C'&KA ',AL4(&RA)
         MEXIT
.C       AIF   ('&KA(2)' NE 'N').BKA
&X.A     DC    C'&KA(1)',AL4(&RA)
         MEXIT
.TOO     MNOTE 8,' TOO MANY OPERANDS ******************************** '
         MEXIT
.MIS     MNOTE 8,' OPERANDS MISSING ********************************* '
         MEXIT
.BKN     MNOTE 8,' 2ND OPERAND SYNTAX ERROR ************************* '
         MEXIT
.BKA     MNOTE 8,' 3RD OPERAND SYNTAX ERROR ************************* '
.END     MEND
         PRINT ON
         SPACE 1
* PURPOSE :    ISSUE OPERATORS COMMANDS (STARTED TASK OR SPECIFIC
* ---------    BACKGROUND JOBS ONLY). WHEN EXECUTED IN FOREGROUND
*              REGION BY AN AUTHORIZED TSO USER, THE PROGRAM ENTER
*              A SPECIAL TEST MODE, USEFULL TO DEBUG THE OPERATORS
*              COMMANDS SEQUENCE PROCESS (USING TERMINAL TPUT/TGET).
*
* AUTHOR :     MOINIL P.A.
* --------     COMPUTING CENTRE
*              J.R.C. - ISPRA ESTABLISHMENT
*              21020 ISPRA (VA), ITALY
*
* INVOKED BY : 1. CONSOLE START COMMAND :
* ------------      S AUTO,FROM='...PO-DSNAME...',
*                          M=...MEMBER-NAME...
*
*              2. PROCEDURE (AUTHORIZED JOB) :
*                   //... EXEC AUTO,FROM='...PO-DSNAME...',
*                                   M=...MEMBER-NAME...
*                 WHERE AUTO PROCEDURE SKELETON MAY BE :
*                   //AUTO    PROC M=...,FROM='...'
*                   //AUTO    EXEC PGM=AUTOCI,PARM='&M'
*                   //STEPLIB   DD DSN=...LIBRARY...,DISP=SHR
*                   //SYSPDS    DD DSN=&FROM,DISP=SHR
*
*              3. JCL (AUTHORIZED JOB) :
*                   //... EXEC PGM=AUTOCI,PARM='...MEMBER-NAME...'
*                   //STEPLIB  DD DSN=...LIBRARY...,DISP=SHR
*                   //SYSPDS   DD DSN=...PO-DSNAME...,DISP=SHR
*
*              4. TSO TEST MODE (AUTHORIZED USER) :
*                   ALLOC DA(...PO-DSNAME...) F(SYSPDS) SHR
*                   CALL '...LIBRARY...(AUTOCI)' '...MEMBER-NAME...'
*                                           OR : '...MEMBER-NAME.../S'
*                   FREE F(SYSPDS)
*                 NOTE : CAN BE A CLIST IF DESIRED. '/S' MAY BE ADDED
*                        AFTER THE MEMBER-NAME TO SEND THE OPERATORS
*                        COMMANDS TO THE OPERATING SYSTEM.
*
*              5. TSO COMMAND OR SUB-COMMAND (AUTHORIZED USER) :
*                   AUTOCI ...PO-DSNAME... ...MEMBER-NAME... T(EST)
*                                                            S(YSTEM)
*                 NOTE : OPTION T OR TEST IS THE DEFAULT, WHEN S OR
*                        SYSTEM IS USED, THE OPERATORS COMMANDS ARE
*                        SENDED TO THE OPERATING SYSTEM.
         EJECT
* PARAMETERS FIELD : PARM=...MEMBER-NAME... TO SUPPLY THE INITIAL
* ------------------ OPERATORS COMMANDS MEMBER NAME.
*              ...MEMBER-NAME... MAY BE 1 UP TO 8 CHARACTERS LONG.
*
* INPUT DATA (SYSPDS) : COLUMNS 1 TO 72 OF CARDS CAN BE USED FOR
* --------------------- OPERATORS COMMANDS OR INSTRUCTIONS CODING.
*              NO FIXED COLUMNS NOR CONTINUATIONS ARE PROVIDED.
*
* INSTRUCTIONS : EACH MUST BE CODED ON A SEPARATE CARD AND MUST BE
* -------------- FOLLOWED BY AT LEAST ONE BLANK, EXCEPT THE NULL
*                INSTRUCTION WHICH MAY BE FOLLOWED BY ANOTHER ONE
*                (OBVIOUSLY NOT ANOTHER NULL) OR AN OPERATOR COMMAND
*                IN THE SAME CARD.
*
*    *  ...TEXT...
*         A STARTING ASTERISK (*) MEANS A COMMENT CARD.
*
*    GDATE  (ALIAS @G)
*         DISPLAY THE DATE AND TIME OF DAY.
*
*    MESSAGE  ...TEXT...  (ALIAS @M)
*         SEND A MESSAGE TEXT TO THE MAIN CONSOLE.
*         ...TEXT... MAY BE 55 CHARACTERS LONG AT MAXIMUM, OTHERWISE
*                   IT IS TRUNCATED.
*
*    PAUSE  ...TEXT...  (ALIAS @P)
*         SEND A MESSAGE TEXT TO THE MAIN CONSOLE AND ALLOW THE
*         OPERATOR TO REPLY IN ORDER TO CONTINUE OR STOP IMMEDIATELY
*         THE COMMANDS SEQUENCE OF THE CURRENT MEMBER (EXECUTE) OR
*         THE MAIN MEMBER (PROGRAM).
*         THE OPERATOR RESPONSE MAY BE 0 UP TO 8 CHARACTERS LONG AND
*         IS AVAILABLE TO VARIOUS OTHER STATEMENTS (UNTIL THE NEXT
*         PAUSE), UNLESS THE REPLY TEXT IS 'CANCEL', WHICH CAUSE THE
*         IMMEDIATE STOP AS PREVIOUSLY EXPLAINED.
*         ...TEXT... MAY BE 55 CHARACTERS LONG AT MAXIMUM, OTHERWISE
*                   IT IS TRUNCATED.
*
*    NULL  SSSS  (OR :SSSS)
*         DEFINE A SEQUENCE SYMBOL TO WHICH A BRANCH INSTRUCTION REFERS
*         (I.E. - GOTO, IF'S, ...).
*         SSSS : IS THE SEQUENCE SYMBOL. IT MAY BE 1 UP TO 8 CHARACTERS
*                   LONG.
*
*    GOTO  SSSS  (ALIAS GO)
*         ALLOWS TO BRANCH UNCONDITIONALLY.
*         SSSS : IS A SEQUENCE SYMBOL TO WHICH THE BRANCH IS DONE
*                   (SSSS MUST BE DEFINED IN A NULL INSTRUCTION).
*                   SSSS MAY BE 1 UP TO 8 CHARACTERS LONG.
         EJECT
*    IF-REPLY  WWWW  ....  SSSS  (ALIAS IF-R)
*         ALLOWS TO BRANCH ACCORDING TO A TEST RESULT ON THE PREVIOUS
*         PAUSE ... OPERATOR RESPONSE. THUS THE SEQUENCE IN WHICH THE
*         OPERATORS COMMANDS ARE PROCESSED CAN BE ALTERED.
*         WWWW MAY BE ONE OF THE FOLLOWING OPERATORS :
*                   EQ (OR =)     NE (OR /)     LT (OR <)
*                   GT (OR >)     LE (OR <=)    GE (OR >=)
*         .... : IS THE DESIRED VALUE TO TEST (TO INDICATE A NULL
*                   RESPONSE, ZERO LENGTH REPLY, CODE '').
*                   THE TEST IS DONE WITH THE VALUE LENGTH, THIS MEANS
*                   THAT 'YES' MATCHES ALSO 'Y' IN
*                        IF-R  EQ  Y  ACCEPT
*                   (THE BRANCH IS TAKEN), OR '9' IS GREATER THAN '50'
*                   IN
*                        IF-R  LE  50  ACCEPT
*                   (THE BRANCH IS NOT TAKEN).
*         SSSS : IS A SEQUENCE SYMBOL TO WHICH THE BRANCH IS TAKEN IF
*                   THE CONDITION IS TRUE, OTHERWISE THE PROCESS
*                   CONTINUE IN SEQUENCE (SSSS MUST BE DEFINED IN A
*                   NULL INSTRUCTION).
*                   SSSS MAY BE 1 UP TO 8 CHARACTERS LONG.
*
*    IF-REPLY-CHAR  WWWW  ....  SSSS  (ALIAS IF-C)
*         IDENTICAL TO IF-REPLY, BUT THE OPERATOR RESPONSE AND THE TEST
*         VALUES ARE COLLATING SEQUENCE COMPARED, THUS THE TWO VALUES
*         ARE LEFT PADDED WITH BLANKS (SO 'YES' DOES NOT MATCH 'Y' BUT
*         IS GREATER, AND '9' IS LOWER THAN '50').
*
*    IF-REPLY-BIN  WWWW  ....  SSSS  (ALIAS IF-B)
*         IDENTICAL TO IF-REPLY, BUT THE OPERATOR RESPONSE AND THE TEST
*         VALUES ARE CONSIDERED INTEGER NUMBERS FOR COMPARE (SO '9' IS
*         LESS THAN '50').
*                   NOTE : PLUS (+) OR MINUS (-) SIGN IS NOT ACCEPTED.
*
*    IF-REPLY-HEX  WWWW  ....  SSSS  (ALIAS IF-H)
*         IDENTICAL TO IF-REPLY, BUT THE OPERATOR RESPONSE AND THE TEST
*         VALUES ARE CONSIDERED HEXADECIMALS FOR COMPARE (SO 'F' IS
*         LESS THAN 'A0').
*                   NOTE : PLUS (+) OR MINUS (-) SIGN IS NOT ACCEPTED.
*
*    VER-BIN  SSSS  (ALIAS V-B)
*    VER-HEX  SSSS  (ALIAS V-H)
*         ALLOWS TO VERIFY THE OPERATOR RESPONSE FOR ONLY NUMERICS
*         (0-9) OR HEXADECIMALS (0-9,A-F) CHARACTERS CONTENTS.
*         THE BRANCH IS TAKEN IF A WRONG CHARACTER IS DETECTED.
*                   NOTE : PLUS (+) OR MINUS (-) SIGN IS NOT ACCEPTED.
*         SSSS : IS A SEQUENCE SYMBOL TO WHICH THE BRANCH IS TAKEN IF
*                   THE WRONG CONDITION IS TRUE, OTHERWISE THE PROCESS
*                   CONTINUE IN SEQUENCE (SSSS MUST BE DEFINED IN A
*                   NULL INSTRUCTION).
*                   SSSS MAY BE 1 UP TO 8 CHARACTERS LONG.
         EJECT
*    IF-REPLY-ID  ....  SSSS  (ALIAS IF-ID)
*         ALLOWS TO BRANCH ACCORDING TO A SEARCH FOR A REPLY PENDING
*         ID FOUND. THUS THE SEQUENCE IN WHICH THE OPERATORS COMMANDS
*         ARE PROCESSED CAN BE ALTERED.
*         .... : IS THE DESIRED MESSAGE-ID TEXT (MUST BE AT LEAST 8
*                   CHARACTERS LONG). IF ANY BLANKS ARE NEEDED (UNLESS
*                   LEADING BLANKS UP TO 8 CHARACTERS), THE MESSAGE-ID
*                   MUST BE GIVEN AS A QUOTED CHARACTERS STRING, SO A
*                   NEEDED QUOTE IN THE TEXT MUST BE DOUBLED.
*         SSSS : IS A SEQUENCE SYMBOL TO WHICH THE BRANCH IS TAKEN
*                   IF THE REPLY-ID IS FOUND, OTHERWISE THE PROCESS
*                   CONTINUE IN SEQUENCE (SSSS MUST BE DEFINED IN A
*                   NULL INSTRUCTION).
*                   SSSS MAY BE 1 UP TO 8 CHARACTERS LONG.
*         WHEN THE REPLY-ID IS FOUND, THE EDITED REPLY NUMBER IS SET
*         IN THE RESERVED VARIABLE NAMED 'RPID' (2 CHARACTERS LONG),
*         THIS ALLOWING THE '&S-RV(RPID)...REPLY TEXT...' STRING TO
*         BE AN OPERATOR REPLY COMMAND.
*
*    LOGICAL  VAR1  VAR2  ...  VARN  (ALIAS @L)
*         DEFINE PROCESSING LOGICAL VARIABLES (NAME MAY BE 1 UP TO 8
*         CHARACTERS LONG). THE INITIAL VALUE OF THESE VARIABLES IS
*         'FALSE'.
*
*    TRUE  VAR1  VAR2  ...  VARN  (ALIAS @T)
*    FALSE  VAR1  VAR2  ...  VARN  (ALIAS @F)
*         SET LOGICAL VARIABLES VALUE TO 'TRUE' OR 'FALSE'.
*
*    IF-TRUE  VARN  SSSS  (ALIAS IF-T)
*    IF-FALSE  VARN  SSSS  (ALIAS IF-F)
*         TEST THE LOGICAL VARIABLE 'VARN' ON 'TRUE' OR 'FALSE' VALUE.
*         SSSS : IS A SEQUENCE SYMBOL TO WHICH THE BRANCH IS TAKEN IF
*                   THE CONDITION IS MET, OTHERWISE THE PROCESS
*                   CONTINUE IN SEQUENCE (SSSS MUST BE DEFINED IN A
*                   NULL INSTRUCTION).
*
*    SET-REPLY  VVVV  (ALIASES SET, SET-VAR )
*    SET-VAR  VVVV  ....  (ALIASES SET, SET-REPLY)
*         MEMORIZE THE CURRENT AVAILABLE PAUSE ... OPERATOR RESPONSE
*         (0 UP TO 8 CHARACTERS LONG) OR A SPECIFIC VALUE (0 UP TO 8
*         CHARACTERS LONG) IN A VARIABLE.
*         VVVV IS THE VARIABLE NAME. IT MAY BE 1 UP TO 8 CHARACTERS
*                   LONG, AND CANNOT BE ONE OF THE RESERVED NAME (SEE
*                   IF QQQQ WWWW .... SSSS STATEMENT).
*         .... : IS THE DESIRED VALUE TO STORE (TO INDICATE A NULL
*                   VALUE, ZERO LENGTH, CODE '').
*         THEN THE STRING &S-RV(VVVV), INTO WHICH VVVV IS THE VARIABLE
*         NAME OR ONE OF THE RESERVED NAMES (HERE IT IS ACCEPTED), IS
*         REPLACED BY THE VARIABLE VALUE IF ENCOUNTERED IN THE TEXT OF
*         ANY MESSAGE, PAUSE, IF-REPLY'S, EXECUTE, SUBMIT, T-WAIT,
*         COMMON INSTRUCTIONS OR OPERATORS COMMANDS.
         EJECT
*    IF  QQQQ  WWWW  ....  SSSS
*    IF-VAR  VVVV  WWWW  ....  SSSS  (ALIAS IF-V)
*         ALLOWS TO BRANCH ACCORDING TO THE RESULT OF A CONDITION TEST.
*         THUS THE SEQUENCE IN WHICH THE OPERATORS COMMANDS ARE
*         PROCESSED CAN BE ALTERED.
*         QQQQ MAY BE ONE OF THE FOLLOWING RESERVED NAMES :
*                   SID : MEANS THE SYSTEM ID (FROM SMF : SSSS).
*                   CPU : MEANS THE CPU MODEL (FROM CVT : MMMM).
*                   SDATE : MEANS THE STANDARD DATE (YYMMDD).
*                   JDATE : MEANS THE JULIAN DATE (YYDDD).
*                   DAY : MEANS THE CURRENT DAY NAME (SUN, MON,
*                             TUE, WED, THU, FRI AND SAT).
*                   MONTH : MEANS THE CURRENT MONTH NAME (JAN,
*                             FEB, MAR, APR, MAY, JUN, JUL, AUG,
*                             SEP, OCT, NOV AND DEC).
*                   TIME : MEANS THE CURRENT TIME OF DAY IN
*                             HOURS/MINUTES (FORMAT : HHMM).
*                   HOURS : MEANS THE HOURS (HH PART OF TIME).
*                   MINS : MEANS THE MINUTES (MM PART OF TIME).
*                   YEAR : MEANS THE YEAR (YY PART OF SDATE).
*                   SMONTH : MEANS THE MONTH (MM PART OF SDATE).
*                   SDAY : MEANS THE DAY (DD PART OF SDATE).
*                   JDAY : MEANS THE DAY (DDD PART OF JDATE).
*         VVVV IS THE NAME OF A VARIABLE WHICH HAS BEEN DEFINED BY A
*                   PREVIOUS SET-REPLY OR SET-VAR. IT MAY BE 1 UP TO 8
*                   CHARACTERS LONG.
*         WWWW MAY BE ONE OF THE FOLLOWING OPERATORS :
*                   EQ (OR =)     NE (OR /)     LT (OR <)
*                   GT (OR >)     LE (OR <=)    GE (OR >=)
*         .... : IS THE DESIRED VALUE TO TEST.
*                   NOTE : THE TEST IS DONE WITH THE VALUE LENGTH AND
*                   RIGHT JUSTIFIED (I.E. : TIME EQ 945 MATCHES 0945 AM
*                   AND 1945 PM).
*         SSSS : IS A SEQUENCE SYMBOL TO WHICH THE BRANCH IS TAKEN
*                   IF THE CONDITION IS TRUE, OTHERWISE THE PROCESS
*                   CONTINUE IN SEQUENCE (SSSS MUST BE DEFINED IN A
*                   NULL INSTRUCTION).
*                   SSSS MAY BE 1 UP TO 8 CHARACTERS LONG.
         EJECT
*    EXECUTE  ...PO-DSNAME...  ...MEMBER-NAME...  (ALIAS @E)
*             *  ...MEMBER-NAME...
*         ALLOWS THE EXECUTION OF ANOTHER MEMBER CONTAINING OPERATORS
*         COMMANDS SEQUENCE, THEN AT END OF THIS MEMBER THE PROCESS
*         CONTINUE IN SEQUENCE (UP TO 99 NESTED EXECUTE MAY BE
*         DEFINED).
*         ...PO-DSNAME... IS THE PARTITIONED DATA-SET NAME, AND MAY BE
*                   1 UP TO 44 CHARACTERS LONG. WHEN * (ASTERISK) FORM
*                   IS CODED, IT MEANS THE CURRENT DATA-SET IN USE.
*         ...MEMBER-NAME... MAY BE 1 UP TO 8 CHARACTERS LONG.
*
*    SUBMIT  *(...MEMBER-NAME...)  (ALIAS SUB)
*            ...PO-DSNAME...(...MEMBER-NAME...)
*            ...PS-DSNAME...
*         ALLOWS THE SUBMIT OF A BATCH JOB FOR CONVENTIONAL PROCESSING.
*         THE JOB SUBMITTED MUST RESIDE IN EITHER A MEMBER OF A
*         PARTITIONED OR A SEQUENTIAL DATA-SET.
*         SUBMITTED DATA-SET MUST BE FIXED 80-BYTES RECORDS (BLOCKED
*         OR UNBLOCKED).
*                   NOTE : THE JCL JOB STATEMENT MUST BE THE FIRST AND
*                   MAY CONTAIN ALL THE NEEDED INFORMATION.
*         ...PO-DSNAME... IS THE PARTITIONED DATA-SET NAME, AND MAY BE
*                   1 UP TO 44 CHARACTERS LONG. WHEN * (ASTERISK) FORM
*                   IS CODED, IT MEANS THE CURRENT DATA-SET IN USE.
*         ...MEMBER-NAME... MAY BE 1 UP TO 8 CHARACTERS LONG.
*         ...PS-DSNAME... IS THE SEQUENTIAL DATA-SET NAME, AND MAY BE
*                   1 UP TO 44 CHARACTERS LONG.
*         NOTE : THE SUBMIT FUNCTION SUPPLIES THE PASSWORD ONLY IF THE
*                USER=... KEYWORD IS CODED AND THE PASSWORD=... KEYWORD
*                IS NOT CODED (THIS ASSUMES THE JOB STATEMENT IS MORE
*                THAN ONE CARD CODED).
* --- SUPPRESS - IF YOU DON'T WANT SUPPLY THE PASSWORD AS DESCRIBED
*                ABOVE, YOU MAY BYPASS THIS PROCESS BY SETTING THE BIT
*                'SWJS' PERMANENTLY ON IN THE SWITCH BYTE 'SWJBSC'.
*
*    T-WAIT  SECS  (ALIAS @W)
*         ALLOWS TO WAIT-A-BIT.
*         SECS : IS THE NUMBER (1-120) OF SECONDS TO WAIT. IF OMITTED
*                   OR 0 IS SPECIFIED, IT MEANS NO WAIT.
         EJECT
*    LOAD-COMMON  ...PO-DSNAME...  ...MEMBER-NAME...  (ALIAS @CL)
*    SAVE-COMMON  ...PO-DSNAME...  ...MEMBER-NAME...  (ALIAS @CS)
*         LOAD FROM OR SAVE IN THE INDICATED DATA-SET MEMBER ALL THE
*         COMMON-SWITCHES (1-400).
*                   NOTE : AS SOON AS THE EXECUTION BEGINS, ALL THE
*                   COMMON-SWITCHES ARE AVAILABLES (VALUE 'FALSE').
*                   A LOAD FROM ANY UNEXISTANT MEMBER OF AN EXISTING
*                   PO DATA-SET RESULTS IN A NO-OPERATION, SO ALL THE
*                   COMMON-SWITCHES REMAIN AS THEY WERE.
*         ...PO-DSNAME... IS THE PARTITIONED DATA-SET NAME, AND MAY BE
*                   1 UP TO 44 CHARACTERS LONG.
*         ...MEMBER-NAME... MAY BE 1 UP TO 8 CHARACTERS LONG.
*
*    SET-COMMON  NNN  NNN  ...  OR  ( NNN - NNN )  ...  (ALIAS @CT)
*    RESET-COMMON  NNN  NNN  ...  OR  ( NNN - NNN )  ...  (ALIAS @CF)
*         SET THE COMMON-SWITCH NUMBER NNN (1-400) OR RANGE OF
*         COMMON-SWITCHES NUMBERS (FROM-TO) VALUE TO 'TRUE' OR 'FALSE'.
*
*    IF-COMMON-TRUE  NNN  SSSS  (ALIAS @CIT)
*    IF-COMMON-FALSE  NNN  SSSS  (ALIAS @CIF)
*         TEST THE COMMON-SWITCH NUMBER NNN (1-400) ON 'TRUE' OR
*         'FALSE' VALUE.
*         SSSS : IS A SEQUENCE SYMBOL TO WHICH THE BRANCH IS TAKEN IF
*                   THE CONDITION IS MET, OTHERWISE THE PROCESS
*                   CONTINUE IN SEQUENCE (SSSS MUST BE DEFINED IN A
*                   NULL INSTRUCTION).
         EJECT
AUTOCI   START 0
         SPACE 1
AUTOCI  AMODE  24
AUTOCI  RMODE  24
         SPACE 1
        $DEFREG
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*        AUTHORITY LEVELS DEFINITIONS.                          *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
LV0      EQU   0         REJECT LEVEL.
         SPACE 1
        $MDL@IX
         SPACE 2
*        DEFINE TABLES DIMENSIONS.
*        -------------------------
         SPACE 1
MAXDD    EQU   99        MAX. DD-NAMES ALLOCATION
*                        (MIN=0, MAX=999).
MAXLV    EQU   100       MAX. LOGICAL VARIABLES NAMES
*                        (MIN=1, MAX=2040).
MAXRV    EQU   100       MAX. REPLY VARIABLES NAMES
*                        (ONLY MIN=1).
         SPACE 1
EOT      EQU   X'FF'               END OF TABLE INDICATOR.
         EJECT
        PRINT  NOGEN
        $DYNLIST
        PRINT  GEN
         SPACE 2
*        DYNAMIC DD-NAMES TABLE (EXECUTE).
*        ---------------------------------
         SPACE 1
DDTAB    DSECT
DDTFN    DS    AL2                 FILE NO.
DDTNME   DS    CL8                 FILE NAME (DD-NAME).
DDTMBN   DS    CL8                 MEMBER NAME.
DDTDSN   DS    CL44                DATA-SET NAME.
DDTABL   EQU   *-DDTAB             ELEMENT LENGTH.
         SPACE 2
*        LOGICAL VARIABLES TABLE AND SWITCHES BYTES.
*        -------------------------------------------
*
         SPACE 1
LVART    DSECT
LVARNME  DS    CL8                 VARIABLE NAME.
LVARSBN  DS    AL1                 SWITCH BYTE NUMBER.
LVARSMB  DS    XL1                 SWITCH MASK BIT.
LVARTL   EQU   *-LVART             ELEMENT LENGTH.
         SPACE 2
*        REPLY VARIABLES TABLE.
*        ----------------------
*
         SPACE 1
RVART    DSECT
RVARNME  DS    CL8                 VARIABLE NAME.
RVARV    DS    CL8                 VARIABLE VALUE (PADDED WITH BLANKS).
RVARVL   DS    AL1                 VARIABLE VALUE LENGTH.
RVARTL   EQU   *-RVART             ELEMENT LENGTH.
         SPACE 1
AUTOCI   CSECT ,                   RESTORE CURRENT MAIN SECTION
         EJECT
        $HEDIT
        $XENT  BASE=(R11,R12)
         EJECT
         LR    R4,R1               SAVE FOR LATER USE.
         L     R10,=A(GWATBS)
         BASR  R8,R10              GET WORK-AREAS AND TABLES SPACES.
         SPACE 2
*        VERIFY AUTHORITY.
*        -----------------
         SPACE 1
        $EACM  REQAUT
        EXTRACT ANSWER,'S',FIELDS=(TIOT,COMM,TSO,PSB)
         L     R2,ACOMM            COMMUNICATION AREA ADDRESS.
         L     R3,4(R2)            CIB ADDRESS.
         LA    R3,0(R3)            CLEAR HIGH BYTE.
         LTR   R3,R3               CURRENT CIB SET UP?
         BZ    *+L'*+8             NO.
         USING CIBDSECT,R3
         CLI   CIBVERB,CIBSTART    START COMMAND (SYSTEM TASK)?
         BE    PFAN                YES.
         DROP  R3
         L     R2,ATSO             TSO INDICATOR ADDRESS.
         TM    0(R2),X'80'         ARE WE IN TSO?
         BO    TPTSO               YES.
         CLI   AUTH,LV0            AUTHORIZED?
         BNE   PFAN                YES.
         L     R3,ATIOT            GET TIOT ADDRESS.
         USING TIODSECT,R3
         MVC   MSAUT+8(8),TIOCNJOB MOVE JOB-NAME IN MESSAGE.
         DROP  R3
        WTO    MF=(E,MSAUT)
         B     SETCC
TPTSO    L     R1,APSCB            PSCB ADDRESS.
         LTR   R1,R1
         BZ    NOTSO
         CLI   AUTH,LV0            AUTHORIZED?
         BE    NOTSO               NO.
         OI    SWITCH,SWTR         SET TSO TEST MODE.
         USING CPPL,R4
         USING PSCB,R1
         CLC   PSCBUPT,CPPLUPT     CPPL+4 = UPT ADDRESS?
         BNE   *+L'*+10            NO.
         DROP  R1
         CLC   CPPLPSCB(4),APSCB   CPPL+8=PSCB ADDRESS?
         BE    XTSO                YES, TSO COMMAND.
         DROP  R4
         USING IKJEBECA,R4
         L     R1,CAPTTMP          CPPL ADDRESS.
         DROP  R4
         USING CPPL,R1
         CLC   CPPLPSCB(4),APSCB   CPPL+8=PSCB ADDRESS?
         BE    XTSOS               YES, TSO SUB-COMMAND.
         DROP  R1
        TPUT   TSTART,L'TSTART
         B     PFAN
NOTSO   TPUT   TSAUT,L'TSAUT
SETCC    LA    R9,128              C.C. = 128.
         B     EXIT
         SPACE 2
*        TSO COMMAND OR SUB-COMMAND.
*        ---------------------------
         SPACE 1
XTSOS    LR    R4,R1
         USING CPPL,R4
XTSO     ST    R4,ACCPL
         MVC   PPLUPT,CPPLUPT      SET UP PARM. FOR PARSE.
         MVC   PPLECT,CPPLECT
         MVC   PPLCBUF,CPPLCBUF
        CALLTSSR EP=IKJPARS,MF=(E,PPLUPT)
         B     *+L'*(R15)          BRANCH ON RETURNED CODE :
         B     PARSOK              + 0 - SUCCESSFULL.
         B     ERROR1              + 4 - UNABLE TO PROMPT.
         B     RETURN              + 8 - USER ATTENTION OCCURED.
         B     ERROR2              +12 - PROGRAM BUG.
         B     ERROR3              +16 - SPACE UNAVAILABLE IN REGION.
         B     ERROR4              +20 - INVALID PARM.
         B     ERROR5              +24 - PARM. CONFLICT.
         B     ERROR6              +28 - TERMINAL DISCONNECTED.
PARSOK   L     R3,PPLANSS          CHECK ANSWER ADDRESS.
         LA    R3,0(R3)
         LTR   R3,R3
         BZ    ERROR7              PARSE ERROR.
         MVC   DAPLUPT,CPPLUPT     SET UP DAIR BLOCK TO ALLOC. FILE.
         MVC   DAPLECT,CPPLECT
         MVC   DAPLPSCB,CPPLPSCB
         DROP  R4
         USING IKJPARMD,R3
         TM    PODSN+6,X'80'       IS PO-DSNAME SUPPLIED?
         BZ    ERROR8              NO.
         TM    PODSN+6,X'40'       CHECK FOR QUOTES?
         BO    *+L'*+4             YES, DON'T TELL DAIR TO PUT USERID.
         OI    DA08CTL,X'20'       FLAG TO PREFIX USERID TO DSNAME.
         LH    R1,PODSN+4          SET UP DSNAME.
         STH   R1,DDSNAML          SAVE LENGTH FOR LATER.
         BCTR  R1,0                EXECUTE LENGTH.
         L     R15,PODSN           GET ADDRESS.
         EX    R1,MVPOD            MOVE IT TO BLOCK.
         TM    PODSN+14,X'80'      SET UP FOR MEMBER NAME ALSO?
         BO    ERROR9              YES, NOT ALLOWED.
         TM    PODSN+22,X'80'      TEST FOR PASSWORD?
         BZ    NOPASS              NO.
         LH    R1,PODSN+20         LENGTH.
         BCTR  R1,0                EXECUTE LENGTH.
         L     R15,PODSN+16        ADDRESS.
         EX    R1,MVPSW            MOVE PASSWORD.
NOPASS   TM    POMEM+6,X'80'       IS MEMBER SUPPLIED?
         BZ    ERROR10             NO.
         LH    R1,POMEM+4          LENGTH.
         BCTR  R1,0                EXECUTE LENGTH.
         L     R15,POMEM           ADDRESS.
         EX    R1,MVPOM            MOVE MEMBER-NAME.
         LH    R1,OPLIST           LOOK EVENTUAL OPTION.
         LTR   R1,R1
         BZ    *+L'*+8
         BCT   R1,*+L'*+4
         OI    SWITCH,SWSY        ALLOW SYSTEM.
         DROP  R3
        IKJRLSA PPLANSS
         L     R1,ADDTAB           GET STARTING DD-NAME.
         USING DDTAB,R1
         MVC   DA08DDN,DDTNME
         DROP  R1
         L     R1,ATIOT
         USING TIODSECT,R1
         XR    R0,R0
XTS1     CLC   TIOELNGH(4),=F'0'
         BE    XTS3
         CLC   TIOEDDNM,DA08DDN
         BE    XTS2
         IC    R0,TIOELNGH
         ALR   R1,R0
         B     XTS1
         DROP  R1
MVPOD    MVC   DDSNAM(*-*),0(R15)  << EXECUTED >>
MVPSW    MVC   DA08PSWD(*-*),0(R15)     << EXECUTED >>
MVPOM    MVC   MEMBER(*-*),0(R15)  << EXECUTED >>
XTS2     LA    R1,DA18CD
         ST    R1,DAPLDAPB
         MVC   DA18DDN,DA08DDN
         BAS   R8,DAIR             FREE ANY PREVIOUS ALLOCATION.
         B     EXIT                RETURN +0.
XTS3     LA    R1,DA08CD                  +4.
         ST    R1,DAPLDAPB
         OI    SWITCH,SWAL
         BAS   R8,DAIR             SET ALLOCATION.
         B     LEAVE               RETURN +0.
         TM    DA08DSO,X'02'              +4, PO ORGANIZATION?
         BZ    NOTPO               NO.
         TM    SWITCH,SWTR
         BZ    GETGI
        TPUT   TSTART,L'TSTART
         B     GETGI
NOTPO   TPUT   TSMNPO,L'TSMNPO
         B     LEAVE
         SPACE 1
*                                  TSO DYNAMIC ALLOCATION ROUTINE.
DAIR     XC    DAPLECBS,DAPLECBS   -------------------------------
        CALLTSSR EP=IKJDAIR,MF=(E,DAPLUPT)
         LTR   R15,R15
         BZ    4(R8)               OK, NORMAL RETURN IS +4.
         ST    R15,RETC            STORE RETURN CODE.
         LA    R1,DFDAPLP          PARM. ADDRESS.
        LINK   EP=IKJEFF18         ERROR MESSAGE ROUTINE.
         LR    R9,R15              GET RETURN CODE.
         BR    R8                  ERROR RETURN IS +0.
         SPACE 2
*        PARM. FIELD ANALYSIS.
*        ---------------------
         SPACE 1
PFAN     L     R4,0(R4)            GET PARM. FIELD ADDRESS.
         LH    R1,0(R4)            PARM. FIELD LENGTH.
         LTR   R1,R1
         BNP   MISS                MISSING.
         LA    R3,2(R4)            SCAN START ADDRESS.
         LA    R5,1(R1,R4)         SCAN END ADDRESS.
         LA    R4,1                SCAN STEP.
         LR    R2,R3
         CLI   0(R3),C'/'          SEARCH MEMBER NAME.
         BE    *+L'*+4
         BXLE  R3,R4,*-8
         LR    R1,R3
         SR    R1,R2
         BNP   MISS                MISSING.
         CH    R1,=H'8'
         BH    PERR                INVALID.
         BCT   R1,*+L'*+6
         MVC   MEMBER(*-*),0(R2)   << EXECUTED >>
         EX    R1,*-6              SET MEMBER NAME.
         TM    SWITCH,SWTR
         BZ    GETGI
         CLR   R3,R5
         BNL   GETGI
         BXLE  R3,R4,*+L'*+4
         B     GETGI
         CLI   0(R3),C'S'
         BNE   GETGI
         OI    SWITCH,SWSY        ALLOW SYSTEM.
         SPACE 2
*        GET GENERAL INFORMATION.
*        ------------------------
         SPACE 1
GETGI    L     R1,CVTPTR
         USING CVT,R1
         L     R2,CVTSMCA          GET SYSTEM ID.
         DROP  R1
         LTR   R2,R2
         BZ    *+L'*+6
         USING SMCABASE,R2
         MVC   SID(L'SID),SMCASID
         DROP  R2
         LA    R1,0(R1)            GET CPU MODEL.
         SL    R1,=F'6'
         UNPK  VLSTR(L'CPU+1),0(3,R1)
         TR    VLSTR(L'CPU),TRTAB-C'0'
         MVC   CPU(L'CPU),VLSTR
         TM    SWITCH,SWTR
         BZ    INIT
        TPUT   TSRQL,L'TSRQL       INSTRUCTIONS LIST OPTION.
RQLBK    XC    CARD(3),CARD
        TGET   CARD,3
         LTR   R15,R15
         BZ    RQLAN
         CH    R15,=H'12'
         BNE   TSOERR
        TCLEARQ INPUT
        TPUT   TSRTL,L'TSRTL
         B     RQLBK
RQLAN    LTR   R1,R1
         BZ    REQINF
         OC    CARD(3),=CL8' '
         CLC   CARD(3),=CL8' '
         BE    REQINF
         CLC   CARD(3),=CL3'N  '
         BE    REQINF
         CLC   CARD(3),=CL3'NO '
         BE    REQINF
         CLC   CARD(3),=CL3'Y  '
         BE    RQLYES
         CLC   CARD(3),=CL3'YES'
         BE    RQLYES
        TPUT   TSRSE,L'TSRSE
         B     RQLBK
RQLYES   OI    SWITCH,SWLS
REQINF   MVC   TSINF+10(L'CPU),CPU
         MVC   TSINF+23(L'SID),SID
        TPUT   TSINF,L'TSINF
        TPUT   TSREQ,L'TSREQ
         XR    R15,R15
REQBK    L     R10,=A(GACHG)
         BASR  R8,R10              GET ANY CHANGES.
         LTR   R1,R1
         BZ    GETDM
         LA    R0,NLP
         LA    R1,CARD
         OC    0(8,R1),=CL8' '
         LA    R1,8(R1)
         BCT   R0,*-10
         LM    R3,R5,SCCD
         CLI   0(R3),C' '          ANALYZE RESPONSE.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     GETDM
         CLI   0(R3),C'E'
         BE    GETDM
REQCN    CLC   0(4,R3),=CL4'SID='
         BE    RQ1
         CLC   0(4,R3),=CL4'CPU='
         BE    RQ2
REQER    LA    R15,4
         B     REQBK
RQ1      LA    R2,SID
         MVI   VLSTR,C' '
         B     *+L'*+8
RQ2      LA    R2,CPU
         MVI   VLSTR,C'0'
         MVC   VLSTR+1(L'VLSTR-1),VLSTR
         LA    R3,3(R3)
         BXLE  R3,R4,*+L'*+4
         B     REQER
         CLI   0(R3),C' '
         BE    REQER
         LR    R6,R3
         LA    R0,L'SID            OR L'CPU
RQ3      BXLE  R3,R4,*+L'*+4
         B     RQ4
         CLI   0(R3),C' '
         BE    RQ4
         BCT   R0,RQ3
         B     REQER
MVREQ    MVC   0(*-*,R15),0(R6)    << EXECUTED >>
RQ4      LA    R1,L'SID            OR L'CPU
         SR    R1,R0
         LA    R15,VLSTR-1
         AR    R15,R0
         EX    R1,MVREQ
         MVC   0(L'SID,R2),VLSTR   OR L'CPU
         CLR   R3,R5
         BNL   REQNW
         CLI   0(R3),C' '          CONTINUE.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     REQNW
         CLI   0(R3),C'E'
         BNE   REQCN
REQNW    MVC   TSNEW+23(L'CPU),CPU
         MVC   TSNEW+36(L'SID),SID
        TPUT   TSNEW,L'TSNEW
         SPACE 1
*        GET CURRENT DAY-MONTH-TIME.
*        ---------------------------
         SPACE 1
GETDM    L     R8,=A(UPDT)
         BASR  R14,R8
         MVC   TSIDM+10(L'DAY),DAY
         MVC   TSIDM+24(L'MONTH),MONTH
         MVC   TSIDM+37(L'THRS+L'TMNS),FTIME
        TPUT   TSIDM,L'TSIDM
        TPUT   TSRDM,L'TSRDM
         XR    R15,R15
RDMBK    L     R10,=A(GACHG)
         BASR  R8,R10              GET ANY CHANGES.
         LTR   R1,R1
         BZ    GETJS
         LA    R0,NLP
         LA    R1,CARD
         OC    0(8,R1),=CL8' '
         LA    R1,8(R1)
         BCT   R0,*-10
         LM    R3,R5,SCCD
         CLI   0(R3),C' '          ANALYZE RESPONSE.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     GETJS
         CLI   0(R3),C'E'
         BE    GETJS
RDMCN    CLC   0(4,R3),=CL4'DAY='
         BE    DM1
         CLC   0(6,R3),=CL6'MONTH='
         BE    DM2
         CLC   0(5,R3),=CL5'TIME='
         BE    DM10
RDMER    LA    R15,4
         B     RDMBK
DM1      LA    R2,DAY
         L     R6,=A(TDAY)
         LA    R3,3(R3)
         B     DM3
DM2      LA    R2,MONTH
         L     R6,=A(TMONTH)
         LA    R3,5(R3)
DM3      BXLE  R3,R4,DM4
         B     RDMER
DM4      LA    R1,2(R3)
         CLR   R1,R5
         BH    RDMER
         CLI   0(R6),0
         BE    RDMER
         CLC   0(3,R3),0(R6)
         BE    *+L'*+8
         LA    R6,3(R6)
         B     DM4
         MVC   0(3,R2),0(R3)
         LA    R3,3(R3)
         B     DM20                CONTINUE.
DM10     LA    R3,4(R3)
         BXLE  R3,R4,*+L'*+4
         B     RDMER
         LA    R1,3(R3)
         CLR   R1,R5
         BH    RDMER
         CLC   0(4,R3),=CL6'000000'
         BL    RDMER
         CLC   0(2,R3),=CL2'23'
         BH    RDMER
         CLC   2(2,R3),=CL2'59'
         BH    RDMER
         MVC   FTIME(L'THRS+L'TMNS),0(R3)
         MVC   TSCS(L'TSCS),=CL6'000000'
         MVC   RDATE(8),=CL8' (TEST) '
         LA    R3,4(R3)
DM20     CLR   R3,R5
         BNL   RDMNW
         CLI   0(R3),C' '          CONTINUE.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     RDMNW
         CLI   0(R3),C'E'
         BNE   RDMCN
RDMNW    MVC   TSNDM+23(L'DAY),DAY
         MVC   TSNDM+37(L'MONTH),MONTH
         MVC   TSNDM+50(L'THRS+L'TMNS),FTIME
        TPUT   TSNDM,L'TSNDM
         SPACE 1
*        GET CURRENT STANDARD-JULIAN DATE.
*        ---------------------------------
         SPACE 1
GETJS    MVC   TSIJS+20(L'SDATE),SDATE
         MVC   TSIJS+43(L'JDATE),JDATE
        TPUT   TSIJS,L'TSIJS
        TPUT   TSRJS,L'TSRJS
         XR    R15,R15
RJSBK    L     R10,=A(GACHG)
         BASR  R8,R10              GET ANY CHANGES.
         LTR   R1,R1
         BZ    INIT
         LA    R0,NLP
         LA    R1,CARD
         OC    0(8,R1),=CL8' '
         LA    R1,8(R1)
         BCT   R0,*-10
         LM    R3,R5,SCCD
         CLI   0(R3),C' '          ANALYZE RESPONSE.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     INIT
         CLI   0(R3),C'E'
         BE    INIT
RJSCN    CLC   0(4,R3),=CL4'STD='
         BE    JS1
         CLC   0(4,R3),=CL4'JUL='
         BE    JS2
RJSER    LA    R15,4
         B     RJSBK
JS1      LA    R3,3(R3)
         BXLE  R3,R4,*+L'*+4
         B     RJSER
         LA    R1,5(R3)
         CLR   R1,R5
         BH    RJSER
         CLC   0(6,R3),=CL6'000000'
         BL    RJSER
         CLC   2(2,R3),=CL2'12'
         BH    RJSER
         CLC   4(2,R3),=CL2'31'
         BH    RJSER
         MVC   SDATE(L'SDATE),0(R3)
         LA    R3,6(R3)
         B     JS3
JS2      LA    R3,3(R3)
         BXLE  R3,R4,*+L'*+4
         B     RJSER
         LA    R1,4(R3)
         CLR   R1,R5
         BH    RJSER
         CLC   0(5,R3),=CL6'000000'
         BL    RJSER
         CLC   2(3,R3),=CL3'366'
         BH    RJSER
         MVC   JDATE(L'JDATE),0(R3)
         LA    R3,5(R3)
JS3      CLR   R3,R5
         BNL   RJSNW
         CLI   0(R3),C' '          CONTINUE.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     RJSNW
         CLI   0(R3),C'E'
         BNE   RJSCN
RJSNW    MVC   TSNJS+33(L'SDATE),SDATE
         MVC   TSNJS+56(L'JDATE),JDATE
        TPUT   TSNJS,L'TSNJS
         SPACE 1
*        INITIALIZATION.
*        ---------------
         SPACE 1
INIT     L     R1,ADDTAB           SET STARTING DDNAME.
         ST    R1,DDPTR
         USING DDTAB,R1
         MVC   DDTMBN,MEMBER       SET STARTING MEMBER NAME.
         L     R2,=A(DUMMY)        GET STARTING JFCB.
         USING IHADCB,R2
         MVC   DCBDDNAM,DDTNME
         DROP  R1,R2
        RDJFCB (DUMMY)
         LTR   R15,R15
         BNZ   ERJF
         L     R2,=A(JFILE)        GET STARTING DATA-SET NAME.
         MVC   DSNM(L'DSNM),0(R2)
         LA    R1,DSNM+L'DSNM-1
         CLI   0(R1),C' '          CONTROL IF ANY MEMBER NAME.
         BNE   *+L'*+4
         BCT   R1,*-8
         CLI   0(R1),C')'
         BE    ERMB                I DON'T LIKE IT.
         L     R1,DDPTR
         USING DDTAB,R1
         MVC   DDTDSN,DSNM         SET STARTING DATA-SET NAME.
         SPACE 2
*        READ OPERATORS COMMANDS SEQUENCE MEMBER.
*        ----------------------------------------
         SPACE 1
OPDS     MVC   DDNME,DDTNME        SET DDNAME.
         DROP  R1
        $MOPEN LRECL,DDNME
         LTR   R15,R15             TEST COMPLETION CODE?
         BNZ   OERR                OPEN ERROR.
         CLC   LRECL,=F'80'        LOGICAL LENGTH AS WE LIKE IT?
         BNE   LERR
RSTMB   $MFIND MEMBER,DDNME
         LTR   R15,R15             TEST COMPLETION CODE?
         BNZ   MERR                OPEN ERROR.
RCMD     NI    SWPRSS,255-SWNL     ENABLE NULL.
        $MREAD CARD,DDNME          READ COMMAND TEXT.
         LTR   R15,R15             TEST COMPLETION CODE?
         BM    ENDMB               ENF-OF-FILE.
         BNZ   RERR                READ ERROR.
         LM    R3,R5,SCCD
         CLI   0(R3),C' '          FIND START OF TEXT.
         BNE   SCTBL
         BXLE  R3,R4,*-8
         B     RCMD
SCTBL    CLI   0(R3),C'*'          COMMENT?
         BNE   SC1                 NO.
         TM    SWPRSS,SWTO
         BO    RCMD
         B     PRCSS
SC1      L     R2,=A(CDTBL)        FIND IF KEYWORD.
         XR    R10,R10
SC2      CLI   0(R2),EOT           END OF KEYWORDS TABLE?
         BE    SNDCMD              YES, SEND COMMAND(S).
         IC    R10,0(R2)
         EX    R10,SCKW            THIS KEYWORD?
         BE    *+L'*+8             YES.
         LA    R2,6(R10,R2)        BUMP TO NEXT.
         B     SC2
         LA    R3,1(R10,R3)        ADJUST TEXT POINTER.
         LA    R2,2(R10,R2)
         ICM   R10,B'1111',0(R2)   GET PROCESS ADDRESS.
         BR    R10                 GO TO.
SCKW     CLC   1(*-*,R2),0(R3)     << EXECUTED >>
         SPACE 2
*        SEND COMMAND(S) TO SUPERVISOR.
*        ------------------------------
         SPACE 1
SNDCMD   TM    SWPRSS,SWTO
         BO    RCMD
         L     R8,=A(RSRVAR)
         BASR  R14,R8
         TM    SWITCH,SWTR
         BZ    TOOPER
        TPUT   CARD,L'CARD-8
         TM    SWITCH,SWSY
         BZ    RCMD
TOOPER   CLI   0(R5),C' '
         BNE   *+L'*+4
         BCT   R5,TOOPER
         SR    R5,R3               COMMAND LENGTH -1.
         LA    R2,CMND             COMMAND BUFFER ADDRESS.
         USING MGCRPL,R2
         XC    MGCRPL(MGCRLTH),MGCRPL   CLEAR PARAMETER LIST.
         MVI   MGCRFLG1,MGCRFI     SET MGCRFLG2 VALID.
         MVC   MGCRTEXT(*-*),0(R3) << EXECUTED >>
         EX    R5,*-6              MOVE COMMAND TEXT.
         LA    R1,(MGCRTEXT-MGCRPL)+1(R5)
         STC   R1,MGCRLGTH         SET LENGTH IN MGCRPL.
         DROP  R2
        ZEROKEY
         XR    R0,R0               SEND COMMAND.
         XR    R15,R15
        MGCR   (R2)
         LR    R2,R15              SAVE RETURN CODE.
        RESETKEY
         LTR   R15,R2              TEST RETURN CODE?
         BZ    RCMD                OK, GET ANOTHER COMMAND IF ANY.
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* NOTE - MVS/XA (MVS/SP 2.1.3) :                                      *
*        THE FOUR INSTRUCTIONS BELOW ARE ADDED JUST BECAUSE SOME      *
*        OPERATORS COMMANDS (LIKE VARY B20,MSTCONS), PASSED THROUGH   *
*        SVC 34, GIVES BACK AN ADDRESS INTO MODULE 'IEE0003D' INSTEAD *
*        OF A RETURN CODE IN THE REGISTER 15 (DIAGNOSE HAS BEEN DONE  *
*        USING DIDOCS).                                               *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         LA    R2,256              R.C. CONTROL.
         CLR   R15,R2              IS IT REALLY A RETURN CODE?
         BNL   RCMD                NO, GET ANOTHER COMMAND IF ANY.
         B     CERR                ERROR.
SKIPTO   OI    SWPRSS,SWTO+SWRM
         B     PRCSS
NOSKIP   NI    SWPRSS,255-SWTO
PRCSS    TM    SWITCH,SWTR
         BZ    WHERE
         TM    SWITCH,SWLS
         BZ    WHERE
        TPUT   CARD,L'CARD-8
WHERE    TM    SWPRSS,SWRM
         BZ    RCMD
         NI    SWPRSS,255-SWRM
         B     RSTMB
         SPACE 2
*        END OF A MEMBER.
*        ----------------
         SPACE 1
ENDMB    NI    SWPRSS,255-SWTO
         L     R6,DDPTR
         USING DDTAB,R6
         OC    DDTFN,DDTFN         MAIN MEMBER?
         BZ    REND                YES.
         DROP  R6
         LR    R1,R6
         SL    R1,=A(DDTABL)
         ST    R1,DDPTR            BACK TO PREVIOUS.
         USING DDTAB,R1
         MVC   DDNME,DDTNME
         MVC   MEMBER,DDTMBN
         MVC   DSNM,DDTDSN
         DROP  R1
         USING DDTAB,R6
         LA    R2,DDTNME           CLOSE THIS DD-NAME.
        $MCLOSE (R2)
         L     R1,DALIST           DE-ALLOCATE DD-NAME.
         LR    R2,R1
         L     R3,=A(DYNLGTH)
         LA    R4,*
         XR    R5,R5
         ICM   R5,B'1000',=CL8' '
         MVCL  R2,R4
         USING DYNLIST,R1
         MVC   DDNAME,DDTNME
         XC    DSNAME,DSNAME
         MVC   DSSTATUS(3),=CL3'SHR'
         MVC   DSNDISP(4),=CL4'KEEP'
         MVC   DSADISP(4),=CL4'KEEP'
         DROP  R1
        $DYNALL (R1),RCODES
         LTR   R15,R15
         BZ    *+L'*+8
         BAS   R8,DAMSG            DE-ALLOCATION ERROR.
         DC    CL4'FREE'
         XC    DDTFN(DDTABL),DDTFN ELIMINE ENTRY.
         B     RCMD                CONTINUE PROCESSING.
         SPACE 1
*                                  DYNALL ERROR MESSAGE ROUTINE.
DAMSG    MVC   MSDAF+8(8),DDTNME   -----------------------------
         MVC   MSDAF+25(4),0(R8)        R6 : DDNAME ENTRY.
         L     R0,RCODES+4              R0 : WORK REGISTER.
         STC   R0,MSDAF+43              R8 : LINK REGISTER.
         SRL   R0,4
         STC   R0,MSDAF+42
         NC    MSDAF+42(2),=XL2'0F0F'
         TR    MSDAF+42(2),TRTAB
         UNPK  MSDAF+52(5),RCODES(3)
         MVI   MSDAF+56,C','
         TR    MSDAF+52(4),TRTAB-C'0'
         UNPK  MSDAF+63(5),RCODES+2(3)
         MVI   MSDAF+67,C' '
         TR    MSDAF+63(4),TRTAB-C'0'
         DROP  R6
         TM    SWITCH,SWTR
         BZ    TOPRS
         LH    R0,MSDAF
         SH    R0,=H'4'
        TPUT   MSDAF+4,(0)
        TPUT   TSPCN,L'TSPCN
         B     4(R8)
TOPRS   WTO    MF=(E,MSDAF)
         B     4(R8)
         SPACE 2
*        ERROR MESSAGE AND EXIT.
*        -----------------------
         SPACE 1
SERR     BAS   R8,TIIR
         MVC   MSERR+19(27),=CL27'INSTR.SYNTAX ERROR DETECTED'
         B     SENDMSM
ISNR     MVC   MSERR+19(27),=CL27'COMMON-SWITCH NO. : INVALID'
         B     SENDMSM
ERJF     MVC   MSERR+19(19),=CL19'READ JOB-FILE ERROR'
         B     SENDMS
ERMB     MVC   MSERR+19(27),=CL27'DS-NAME(MEMBER) NOT ALLOWED'
         B     SENDMSM
ERTB     MVC   MSERR+19(27),=CL27'DYNAMIC EXEC-TABLE OVERFLOW'
         B     SENDMSM
ERVB     MVC   MSERR+19(27),=CL27'LOGICAL VAR.-TABLE OVERFLOW'
         B     SENDMSM
ERVR     MVC   MSERR+19(27),=CL27'S.REPLY VAR.-TABLE OVERFLOW'
         B     SENDMSM
ESDV     BAS   R8,TIIR
         MVC   MSERR+19(27),=CL27'VARIABLE NAME DEFINED TWICE'
         B     SENDMSM
ERUV     BAS   R8,TIIR
         MVC   MSERR+19(27),=CL27'UNDECLARED LOGICAL VARIABLE'
         B     SENDMSM
CERR     MVC   MSERR+19(19),=CL19'O.S. COMMAND FAILED'
         OI    SWITCH,SWEM
         B     SENDMS
MISS     MVC   MSERR+19(27),=CL27'INITIAL MEMBER NAME MISSING'
         B     SENDMSM
PERR     MVC   MSERR+19(27),=CL27'INVALID INITIAL MEMBER NAME'
         B     SENDMSM
OERR     MVC   MSERR+19(19),=CL19'OPEN DATA-SET ERROR'
         B     SENDMS
LERR     MVC   MSERR+19(27),=CL27'LOGICAL RECORD LENGTH ERROR'
         B     SENDMSM
MERR     MVC   MSERR+19(19),=CL19'LOCATE MEMBER ERROR'
         B     SENDMS
RERR     MVC   MSERR+19(8),DDNME
         MVC   MSERR+27(11),=CL11' READ ERROR'
         B     SENDMS
SRPERR   MVC   MSERR+19(19),=CL19'REPLY-ID LOOK ERROR'
SENDMS   MVC   MSERR+38(8),=CL8' (RC=  )'
         CVD   R15,WORK            SET RETURN CODE IN MESSAGE.
         BAS   R14,EDITW
         MVC   MSERR+43(2),WORK+2
SENDMSM  L     R2,ATIOT            GET TIOT ADDRESS.
         USING TIODSECT,R2
         MVC   MSERR+8(8),TIOCNJOB MOVE TASK NAME IN MESSAGE.
         DROP  R2
         TM    SWITCH,SWTR
         BZ    TOPER
         LH    R0,MSERR
         SH    R0,=H'4'
        TPUT   MSERR+4,(0)
         B     TOPERS
TOPER   WTO    MF=(E,MSERR)
TOPERS   TM    SWITCH,SWEM         WHICH WAY BACK?
         BZ    *+L'*+8             ERROR EXIT.
         NI    SWITCH,255-SWEM
         B     ENDMB               TRUNCATE EXECUTION.
         LA    R9,256              C.C. = 256.
         B     RET
TSOERR   LR    R9,R15              C.C. = TGET R.C.
         NI    SWITCH,255-SWTR
         B     RET
         SPACE 1
*                                  TRACE INSTRUCTION IMAGE ROUTINE.
TIIR     TM    SWITCH,SWTR         --------------------------------
         BZR   R8                       R3 - R5 : SCAN POINTERS.
        TPUT   CARD,L'CARD-8            R8 : LINK REGISTER.
         MVI   CARD,C' '
         MVC   CARD+1(L'CARD-1),CARD
         CLR   R3,R5
         BNH   *+L'*+2
         LR    R3,R5
         MVI   0(R3),C'$'
        TPUT   CARD,L'CARD-8
         BR    R8
         SPACE 1
ERROR1  TPUT   TSM1,L'TSM1
         B     RETURN
ERROR2  TPUT   TSM2,L'TSM2
         B     RETURN
ERROR3  TPUT   TSM3,L'TSM3
         B     RETURN
ERROR4  TPUT   TSM4,L'TSM4
         B     RETURN
ERROR5  TPUT   TSM5,L'TSM5
         B     RETURN
ERROR6  TPUT   TSM6,L'TSM6
         B     RETURN
ERROR7  TPUT   TSM7,L'TSM7
         B     RETURN
ERROR8  TPUT   TSM8,L'TSM8
         B     RLSA
ERROR9  TPUT   TSM9,L'TSM9
         B     RLSA
ERROR10 TPUT   TSM10,L'TSM10
RLSA    IKJRLSA PPLANSS
RETURN   XR    R9,R9               C.C. = 0.
         B     EXIT
         SPACE 1
REND     XR    R9,R9               C.C. = 0.
RET     $MCLOSE
         L     R6,DDPTR
         LTR   R6,R6               INITIALIZED?
         BZ    RET2                NO.
         USING DDTAB,R6
         OC    DDTFN,DDTFN         MAIN MEMBER?
         BZ    RET2                YES.
RET1     L     R1,DALIST           DE-ALLOCATE DD-NAME.
         LR    R2,R1
         L     R3,=A(DYNLGTH)
         LA    R4,*
         XR    R5,R5
         ICM   R5,B'1000',=CL8' '
         MVCL  R2,R4
         USING DYNLIST,R1
         XC    DSNAME,DSNAME
         MVC   DSSTATUS(3),=CL3'SHR'
         MVC   DSNDISP(4),=CL4'KEEP'
         MVC   DSADISP(4),=CL4'KEEP'
         MVC   DDNAME,DDTNME
         DROP  R1
         XC    DDTFN(DDTABL),DDTFN ELIMINE ENTRY.
         SL    R6,=A(DDTABL)
        $DYNALL (R1),RCODES
         OC    DDTFN,DDTFN         MAIN MEMBER?
         BNZ   RET1                NO, CONTINUE.
         DROP  R6
RET2     TM    SWITCH,SWSI
         BZ    RET3
         NI    SWITCH,255-SWSI
         L     R1,DASBIN           DE-ALLOCATE SUBMIT INPUT.
         USING DYNLIST,R1
         XC    DSNAME,DSNAME
         DROP  R1
        $DYNALL (R1),RCODES
RET3     TM    SWITCH,SWTR
         BZ    LEAVE
        TPUT   TSTOP,L'TSTOP
LEAVE    TM    SWITCH,SWAL
         BZ    EXIT
         NI    SWITCH,255-SWAL
         L     R1,ADDTAB
         USING DDTAB,R1
         MVC   DA18DDN,DDTNME
         DROP  R1
         LA    R1,DA18CD
         ST    R1,DAPLDAPB
         BAS   R8,DAIR             FREE FILE.
         NOP   0                   RETURN +0.
EXIT     L     R10,=A(FWATBS)             +4.
         BASR  R8,R10              FREE WORK-AREAS AND TABLES SPACES.
        $XRET  CC=(R9)
         SPACE 1
*        EDIT 'WORK' ROUTINE.
*        --------------------
*              R14 = LINK REGISTER.
         SPACE 1
EDITW    MVC   WORK(4),=XL4'40202120'
         ED    WORK(4),WORK+6
         BR    R14
         SPACE 2
*        EXECUTED INSTRUCTIONS.
*        ----------------------
         SPACE 1
MVLAB    MVC   LABEL(*-*),0(R6)    << EXECUTED >>
MVVAR    MVC   VAR(*-*),0(R6)      << EXECUTED >>
MVVLT    MVC   VALT(*-*),0(R6)     << EXECUTED >>
         EJECT
*        CONSTANTS AND WORK AREAS.
*        -------------------------
         SPACE 1
WORK     DC    D'0'
VLSTR    DC    CL8' '
         SPACE 1
CMND     DC    XL(MGCRLTH)'0'      OPERATOR COMMANDS BUFFER.
         SPACE 1
ANSWER   DS    0F                  EXTRACT RESPONSES.
ATIOT    DC    A(*-*)
ACOMM    DC    A(*-*)
ATSO     DC    A(*-*)
APSCB    DC    A(*-*)
         SPACE 1
ACCPL    DC    A(*-*)
ADDTAB   DC    A(*-*)
LDDTAB   DC    A(*-*)
ALVART   DC    A(*-*)
ASWVAR   DC    A(*-*)
LLVART   DC    A(*-*)
ARVART   DC    A(*-*)
LRVART   DC    A(*-*)
DALIST   DC    A(*-*)
DASBIN   DC    A(*-*)
DACOMM   DC    A(*-*)
LDAW     DC    A(((DYNLGTH+7)/8)*8)
SCCD     DC    A(CARD,1,CARD+L'CARD-9)
DDPTR    DC    A(*-*)
RCODES   DC    2F'0'
LRECL    DC    F'0'
DDNME    DC    CL8' '
MEMBER   DC    CL8' '
         SPACE 1
PPLUPT   DC    A(*-*)              PARSE PARM. LIST (PPL).
PPLECT   DC    A(*-*)
PPLECB   DC    A(PPLECBS)
PPLPCL   DC    A(PARMLST)
PPLANS   DC    A(PPLANSS)
PPLCBUF  DC    A(*-*)
PPLUWA   DC    A(0)
PPLECBS  DC    F'0'
PPLANSS  DC    A(0)
DAPLUPT  DC    A(*-*)              DAIR PARM. LIST (DAPL).
DAPLECT  DC    A(*-*)
DAPLECB  DC    A(DAPLECBS)
DAPLPSCB DC    A(*-*)
DAPLDAPB DC    A(*-*)
DAPLECBS DC    F'0'
DA08CD   DC    0F'0',X'0008'       DAIR ALLOC. BY DSNAME.
DA08FLG  DC    H'0'
DA08DARC DC    H'0'
DA08CTRC DC    H'0'
DA08PDSN DC    A(DDSNAML)
DA08DDN  DC    CL8' '
DA08UNIT DC    CL8' '
DA08SER  DC    CL8' '
DA08BLK  DC    F'0'
DA08PQTY DC    F'0'
DA08SQTY DC    F'0'
DA08DQTY DC    F'0'
DA08MNM  DC    CL8' '
DA08PSWD DC    CL8' '
DA08DSP1 DC    X'08'     (SHR)
DA08DSP2 DC    X'08'     (KEEP)
DA08DSP3 DC    X'08'     (KEEP)
DA08CTL  DC    X'00'
         DC    3X'0'
DA08DSO  DC    X'00'
DA08ALN  DC    CL8' '
DDSNAML  DC    H'0'
DDSNAM   DC    CL44' '
DASW     DC    X'0001'
DA18CD   DC    0F'0',X'0018'       DAIR DEALLOC. BY DDNAME/DSNAME.
DA18FLG  DC    H'0'
DA18DARC DC    H'0'
DA18CTRC DC    H'0'
DA18PDSN DC    F'0'
DA18DDN  DC    CL8' '
DA18MNM  DC    CL8' '
DA18SCLS DC    CL2' '
DA18DPS2 DC    X'08'     (KEEP)
DA18CTL  DC    X'10'     (PERMANENTLY D.S. ARE UNALLOCATED)
         DC    XL8'0'
DFDAPLP  DC    A(DAPLUPT)          DAIR FAILURE PARM. LIST.
DFRCP    DC    A(RETC)
DFJEFF02 DC    A(AEFF02)
DFIDP    DC    A(DASW)
RETC     DC    F'0'
AEFF02   DC    F'0'
         SPACE 1
CARD     DC    CL80' '
NLP      EQU   (L'CARD-8)/8
DSNM     DC    CL44' '
MSERR   WTO    '---          : 123456789012345678901234567 - END FORCEDX
                ---',ROUTCDE=1,DESC=3,MF=L
MSDAF   WTO    '---          : DYNAM 0123 FAILED (R15=01) - ERC=0123, IX
               NFO=0123 ---',ROUTCDE=1,DESC=3,MF=L
MSAUT   WTO    '---          : NOT AUTHORIZED TO PASS OPERATORS COMMANDX
               S - END ---',ROUTCDE=11,DESC=7,MF=L
TSM1     DC    C'INCOMPLETE PARAMETERS AND UNABLE TO PROMPT'
TSM2     DC    C'PARSE PARAMETER BLOCK INVALID'
TSM3     DC    C'NOT ENOUGH SPACE IN REGION'
TSM4     DC    C'INVALID PARAMETERS'
TSM5     DC    C'PARAMETERS CONFLICT'
TSM6     DC    C'TERMINAL HAS BEEN DISCONNECTED'
TSM7     DC    C'PARSE ANSWER ADDRESS ERROR'
TSM8     DC    C'PO-DSNAME NOT SUPPLIED'
TSM9     DC    C'PO-DSNAME(MEMBER) NOT ALLOWED'
TSM10    DC    C'MEMBER-NAME NOT SUPPLIED'
TSMNPO   DC    C'DATA-SET IS NOT A PARTITIONED'
TSAUT    DC    C'--- UNAUTHORIZED - END ---'
TSRQL    DC    C'--- DO YOU WANT THE INSTRUCTIONS LIST ? (Y/N)'
TSINF    DC    C'--- CPU : 0123 / SID : 0123 ---'
TSREQ    DC    C'ENTER CHANGES (CPU=.... SID=....) AND/OR E(ND) :'
TSNEW    DC    C'--- NOW RUN WITH CPU : 0123 / SID : 0123 ---'
TSIDM    DC    C'--- DAY : 012 / MONTH : 012 / TIME : 0123 ---'
TSRDM    DC    C'ENTER CHANGES (DAY=... MONTH=... TIME=HHMM) AND/OR E(NX
               D) :'
TSNDM    DC    C'--- NOW RUN WITH DAY : 012 / MONTH : 012 / TIME : 0123X
                ---'
TSIJS    DC    C'--- STANDARD DATE : 012345 / JULIAN DATE : 01234 ---'
TSRJS    DC    C'ENTER CHANGES (STD=YYMMDD JUL=YYDDD) AND/OR E(ND) :'
TSNJS    DC    C'--- NOW RUN WITH STANDARD DATE : 012345 / JULIAN DATE X
               : 01234 ---'
TSRTL    DC    C'INPUT TOO LONG - RESPECIFY :'
TSRSE    DC    C'SYNTAX ERROR - RESPECIFY :'
TSPCN    DC    C'TEST PROCESSING CONTINUE ...'
TSTART   DC    C'--- TEST STARTED ---'
TSTOP    DC    C'--- TEST ENDED ---'
         SPACE 1
         DS    0F
TRTAB    DC    CL16'0123456789ABCDEF'
RAREA    DC    XL8'0'
LABEL    DC    CL8' '
VAR      DC    CL8' '
VALT     DC    CL8' '
ARG1     DC    CL8' '
ARG2     DC    CL8' '
SID      DC    CL4' '
CPU      DC    CL4' '
FDATE    DS    0CL20 ------------* GDATE FIELDS
DAY      DC    CL3'DDD',CL2' '   *
MONTH    DC    CL3'MMM',CL2' '   *
RDATE    DC    CL10' '           *
FTIME    DS    0CL6              *
THRS     DC    CL2'HH'           *
TMNS     DC    CL2'MM'           *
TSCS     DC    CL2'SS'           *
SDATE    DC    CL6'YYMMDD'       *
JDATE    DC    CL5'YYDDD'
RPID     DC    CL2'00'
         SPACE 1
SWITCH   DC    XL1'0'
SWTR     EQU   X'01'               TEST RUN FORCED (ONLY TSO ALLOWED).
SWSY     EQU   X'02'               TSO - OPTION : SYSTEM.
SWAL     EQU   X'04'               INITIAL FILE TSO ALLOCATED.
SWSI     EQU   X'08'               SUBMIT INPUT FILE ALLOCATED.
SWEM     EQU   X'10'               TRUNCATE EXECUTION ON ERROR.
SWLS     EQU   X'20'               INSTRUCTIONS LIST.
SWIV     EQU   X'40'               IF-VAR INSTRUCTION.
SWPRSS   DC    XL1'0'
SWTF     EQU   X'01'               TRUE/FALSE SET OR TEST.
SWTO     EQU   X'02'               SKIP UNTIL NULL MATCH.
SWNL     EQU   X'04'               NULL DISABLED.
SWRM     EQU   X'08'               RESTART MEMBER.
SWRP     EQU   X'10'               IF-REPLY TEXT.
SWRB     EQU   X'20'               IF-REPLY-BIN INST.
SWRC     EQU   X'40'               IF-REPLY-CHAR INST.
SWRH     EQU   X'80'               IF-REPLY-HEX INST.
         SPACE 1
REQAUT   DC    0F'0',BL1'00000000',AL3(MDL@IX),AL4(AUTH)
AUTH     DC    XL1'0'
RAREAL   DC    XL1'0'
LABELL   DC    XL1'0'
VALTL    DC    XL1'0'
TMASK    DC    XL1'0'
RPTXTL   DC    AL1(*-*)
RPTXT    DC    CL72' '
         SPACE 2
*        LITERAL POOL.
*        -------------
         SPACE 1
        LTORG
         SPACE 2
*------------- BASE REGISTERS ADDRESSABILITY (R11,R12) LAST LIMIT.
         EJECT
        $HEDIT ROUTINES
*        SPACES MANAGEMENT ROUTINES.
*        ---------------------------
*        GWATBS : GET WORK-AREAS AND TABLES SPACES.
*        FWATBS : FREE WORK-AREAS AND TABLES SPACES.
*              R8 : LINK REGISTER.
*              R10 : LOCAL BASE REGISTER.
*              R0-R1-R2-R3-R6-R14-R15 : WORK REGISTERS.
*              R4 : MUST BE PRESERVED.
         SPACE 1
         DS    0H
         USING *,R10               LOCAL BASE REGISTER.
GWATBS   L     R3,=A(MAXDD)        GET DYNAMIC DD-NAMES TABLE SPACE.
         CL    R3,=F'999'
         BNH   *+L'*+4
         L     R3,=F'999'
         AH    R3,=H'1'
         MH    R3,=Y(DDTABL)       TOTAL ELEMENTS LENGTH.
         LR    R6,R3               = (MAXDD+1)*DDTABL
         AH    R3,=H'9'
         SRL   R3,3
         SLL   R3,3
         ST    R3,LDDTAB           = ((((MAXDD+1)*DDTABL)+9)/8)*8
         LR    R0,R3
        GETMAIN R,LV=(0)
         ST    R1,ADDTAB
         LR    R2,R1               INITIALIZE AREA.
         XR    R14,R14
         LR    R15,R14
         MVCL  R2,R14
         USING DDTAB,R1
         MVC   DDTNME,=CL8'SYSPDS'
         ALR   R1,R6
         MVC   DDTFN(L'DDTFN),=AL1(EOT,EOT)
         DROP  R1
         L     R3,=A(MAXLV)        GET LOGICAL VARIABLES TABLE AND
         LTR   R3,R3                    SWITCHES BYTES SPACE.
         BP    *+L'*+4
         LH    R3,=H'1'
         CL    R3,=F'2040'
         BNH   *+L'*+4
         L     R3,=F'2040'
         LR    R1,R3
         MH    R3,=Y(LVARTL)       TOTAL ELEMENTS LENGTH.
         LR    R6,R3               = MAXLV*LVARTL
         AH    R1,=H'7'            NUMBER OF BYTES FOR SWITCHES.
         SRL   R1,3                = (MAXLV+7)/8
         AR    R3,R1
         AH    R3,=H'8'
         SRL   R3,3
         SLL   R3,3
         ST    R3,LLVART      = (((MAXLV*LVARTL)+((MAXLV+7)/8)+8)/8)*8
         LR    R0,R3
        GETMAIN R,LV=(0)
         ST    R1,ALVART
         LR    R2,R1
         XR    R14,R14
         LR    R15,R14
         MVCL  R2,R14
         ALR   R1,R6
         MVI   0(R1),EOT
         AH    R1,=H'1'
         ST    R1,ASWVAR
         L     R3,=A(MAXRV)        GET REPLY VARIABLES TABLE SPACE.
         LTR   R3,R3
         BP    *+L'*+4
         LH    R3,=H'1'
         MH    R3,=Y(RVARTL)       TOTAL ELEMENTS LENGTH.
         LR    R6,R3               = MAXRV*RVARTL
         AH    R3,=H'8'
         SRL   R3,3
         SLL   R3,3
         ST    R3,LRVART           = (((MAXRV*RVARTL)+8)/8)*8
         LR    R0,R3
        GETMAIN R,LV=(0)
         ST    R1,ARVART
         LR    R2,R1
         XR    R14,R14
         LR    R15,R14
         MVCL  R2,R14
         ALR   R1,R6
         MVI   0(R1),EOT
         L     R1,LDAW             GET DYNAMIC ALLOCATION WORK SPACES.
         LR    R3,R1
         SLL   R3,1
         ALR   R3,R1
         LR    R0,R3
        GETMAIN R,LV=(0)
         ST    R1,DALIST
         LR    R2,R1
         XR    R14,R14
         LR    R15,R14
         ICM   R15,B'1000',=C' '
         MVCL  R2,R14
         AL    R1,LDAW
         ST    R1,DASBIN
         AL    R1,LDAW
         ST    R1,DACOMM
         BR    R8
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
         DS    0H
         USING *,R10               LOCAL BASE REGISTER.
FWATBS   L     R0,LDDTAB           FREE DYNAMIC DD-NAMES TABLE SPACE.
         L     R1,ADDTAB
        FREEMAIN R,A=(1),LV=(0)
         L     R0,LLVART           FREE LOGICAL VARIABLES TABLE AND
         L     R1,ALVART                SWITCHES BYTES SPACE.
        FREEMAIN R,A=(1),LV=(0)
         L     R0,LRVART           FREE REPLY VARIABLES TABLE SPACE.
         L     R1,ARVART
        FREEMAIN R,A=(1),LV=(0)
         L     R0,LDAW             FREE DYNAMIC ALLOCATION WORK SPACES.
         LR    R1,R0
         SLL   R0,1
         ALR   R0,R1
         L     R1,DALIST
        FREEMAIN R,A=(1),LV=(0)
         BR    R8
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        GET ANY CHANGES ROUTINE.
*        ------------------------
*              R1 : INPUT CHARACTERS NUMBER AT EXIT
*              R8 : LINK REGISTER.
*              R10 : LOCAL BASE REGISTER.
*              R15 : ENTRY INDEX.
         SPACE 1
         DS    0H
         USING *,R10               LOCAL BASE REGISTER.
GACHG    B     *+L'*(R15)
         B     GAGET               +0 = NORMAL ENTRY.
         B     GACER               +4 = ERROR ENTRY.
GAGET    XC    CARD,CARD           CLEAR INPUT.
        TGET   CARD,L'CARD-8
         LTR   R15,R15
         BZR   R8
         CH    R15,=H'12'
         BNE   TSOERR
        TCLEARQ INPUT
        TPUT   TSRTL,L'TSRTL
         B     GAGET
GACER    MVI   CARD,C' '
         MVC   CARD+1(L'CARD-1),CARD
         CLR   R3,R5
         BNH   *+L'*+2
         LR    R3,R5
         MVI   0(R3),C'$'
        TPUT   CARD,L'CARD-8
        TPUT   TSRSE,L'TSRSE
         B     GAGET
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        SET ...TEXT... IN MESSAGE ROUTINE.
*        ----------------------------------
*              R1 : TARGET ADDRESS.
*              R3-R4-R5 : SCAN POINTERS.
*              R8 : LOCAL BASE REGISTER.
*              R14 : LINK REGISTER.
         SPACE 1
         DS    0H
         USING *,R8                LOCAL BASE REGISTER.
SETMSG   MVI   0(R1),C' '
         MVC   1(54,R1),0(R1)
         CLI   0(R3),C' '
         BNE   SM1
         BXLE  R3,R4,*-8
         B     SM3
SM1      CLI   0(R5),C' '
         BNE   SM2
         BCTR  R5,0
         CLR   R5,R3
         BNL   SM1
         B     SM3
SM2      SR    R5,R3
         LA    R0,54
         CLR   R5,R0
         BNH   *+L'*+2
         LR    R5,R0
         EX    R5,SMMV
         BR    R14
SM3      MVC   0(20,R1),=CL20'... I AM WAITING ...'
         BR    R14
SMMV     MVC   0(*-*,R1),0(R3)     << EXECUTED >>
         SPACE 1
        LTORG
         SPACE 1
         DROP  R8
         SPACE 2
*        SCAN AND SET KEYWORD OPERATOR ROUTINE.
*        --------------------------------------
*        AT EXIT : 'TMASK' SET.
*              R3-R4-R5 : SCAN POINTERS.
*              R8 : LOCAL BASE REGISTER.
*              R14 : LINK REGISTER.
*              R15 : WORK REGISTER.
         SPACE 1
         DS    0H
         USING *,R8                LOCAL BASE REGISTER.
OPSET    CLI   0(R3),C'.'
         BNE   *+L'*+8
         BXLE  R3,R4,*+L'*+4
         B     SERR
         LA    R15,2(R3)
         CLR   R15,R5
         BNL   SERR
         L     R15,=A(OPTBL)
OPSET1   CLI   0(R15),EOT          END OF TABLE?
         BE    SERR                YES, ERROR
         CLC   0(2,R15),0(R3)
         BE    OPSET2
         CLC   2(2,R15),0(R3)
         BE    OPSET2
         LA    R15,L'OPTBL(R15)
         B     OPSET1
OPSET2   MVC   TMASK(1),5(R15)     GET TEST MASK.
         LA    R3,1(R3)            ADJUST SCAN POINTER.
         CLI   0(R3),C' '
         BER   R14
         LA    R3,1(R3)
         CLI   0(R3),C' '
         BER   R14
         CLI   0(R3),C'.'
         BNE   SERR
         BR    R14
         SPACE 1
        LTORG
         SPACE 1
         DROP  R8
         SPACE 2
*        REPLACE SET/RESERVED VARIABLES ROUTINE.
*        ---------------------------------------
*              R3-R4-R5 : SCAN POINTERS.
*              R8 : LOCAL BASE REGISTER.
*              R14 : LINK REGISTER.
*              R0-R1-R2-R6-R15 : WORK REGISTERS.
         SPACE 1
         DS    0H
         USING *,R8                LOCAL BASE REGISTER.
RSRVAR   STM   R3,R5,RSRSV         SAVE CURRENT POINTERS.
         SH    R5,=H'7'            MAX. TO SCAN.
RSR1     CLC   0(6,R3),=CL6'&&S-RV('    SEARCH ANY REPLY VARIABLE.
         BE    RSR2
         BXLE  R3,R4,RSR1
         LM    R3,R5,RSRSV         RESTORE CURRENT POINTERS.
         BR    R14
RSR2     LR    R6,R3
         LA    R3,5(R3)
RSR3     BXLE  R3,R4,RSR4
RSRERR   LR    R3,R6
         NI    SWPRSS,255-SWRP
         B     SERR
RSR4     CLI   0(R3),C')'          GET THE VARIABLE NAME.
         BNE   RSR3
         LR    R1,R3
         SR    R1,R6
         SH    R1,=H'6'
         BZ    RSRERR
         CH    R1,=H'8'
         BH    RSRERR
         BCTR  R1,0
         MVC   VALT(L'VALT),=CL16' '
         EX    R1,MVRVN
         L     R2,=A(FVTBL)        SCAN VARIABLES TABLES.
RSR5     CLI   0(R2),EOT           END OF TABLE?
         BE    RSR7                YES.
         CLC   VALT(L'VALT),0(R2)  THIS ONE MATCH?
         BE    *+L'*+8             YES.
         LA    R2,L'FVTBL(R2)
         B     RSR5
         TM    SWITCH,SWTR         ARE WE IN TEST?
         BO    RSR6                YES.
         CLI   9(R2),0             UPDATE REQUIRED?
         BE    RSR6                NO.
         LR    R15,R8              YES, GO UPDATE VALUES.
         STM   R14,R15,RSRUP
         L     R8,=A(UPDT)
         DROP  R8
         BASR  R14,R8
         USING *,R14
         LM    R14,R15,RSRUP
         DROP  R14
         LR    R8,R15
         USING RSRVAR,R8
RSR6     XR    R1,R1               REPLACE BY VALUE.
         IC    R1,10(R2)
         XR    R15,R15
         ICM   R15,B'0111',11(R2)
         BCTR  R1,0
         EX    R1,MVRFV
         LA    R6,1(R1,R6)
         B     RSR10
RSR7     L     R2,ARVART
         USING RVART,R2
RSR8     TM    RVARNME,EOT         END OF TABLE?
         BO    RSRERR              YES.
         BZ    RSRERR              FREE, NO MORE.
         CLC   RVARNME,VALT        THIS ONE MATCH?
         BE    *+L'*+8             YES.
         LA    R2,RVARTL(R2)
         B     RSR8
         XR    R1,R1
         ICM   R1,B'0001',RVARVL   REPLACE BY VALUE.
         BZ    RSR9
         BCTR  R1,0
         EX    R1,MVRVR
         DROP  R2
         LA    R6,1(R1,R6)
         B     RSR10
RSR9     TM    SWPRSS,SWRP
         BZ    RSR10
         MVC   0(2,R6),=CL2''''''  NULL WHEN IF-REPLY.
         LA    R6,2(R6)
RSR10    CLR   R6,R3               TEXT MUST BE SHIFTED?
         BNL   RSR1                NO, CONTINUE.
         L     R2,RSRSV+8          YES, SHIFT REST OF TEXT.
         LR    R1,R2
         SR    R1,R3
         BCTR  R1,0
         EX    R1,MVRSH
         LR    R1,R3
         SR    R1,R6
         SR    R2,R1
         EX    R1,MVRRS
         LR    R3,R6               SET POINTER.
         B     RSR1                CONTINUE.
MVRVN    MVC   VALT(*-*),6(R6)     << EXECUTED >>
MVRFV    MVC   0(*-*,R6),0(R15)    << EXECUTED >>
         USING RVART,R2
MVRVR    MVC   0(*-*,R6),RVARV     << EXECUTED >>
         DROP  R2
MVRSH    MVC   0(*-*,R6),1(R3)     << EXECUTED >>
MVRRS    MVC   0(*-*,R2),=CL16' '  << EXECUTED >>
         SPACE 1
RSRSV    DC    3F'0'               SAVE R3-R5.
RSRUP    DC    2F'0'               SAVE R14-R15(R8).
         SPACE 1
        LTORG
         SPACE 1
         DROP  R8
         SPACE 2
*        COMMON-SWITCH NUMBER SCAN ROUTINE.
*        ----------------------------------
*              R1 : COMMON-SWITCH NUMBER AT EXIT.
*              R3-R4-R5 : SCAN POINTERS.
*              R8 : LOCAL BASE REGISTER.
*              R14 : LINK REGISTER.
*              R0-R14-R15 : WORK REGISTERS.
         SPACE 1
         DS    0H
         USING *,R8                LOCAL BASE REGISTER.
CSSC     ST    R14,CSSCSV
         LA    R0,3
         XR    R1,R1
         XR    R14,R14
         LA    R15,15
CSSC1    CLI   0(R3),C'0'
         BL    SERR
         CLI   0(R3),C'9'
         BH    SERR
         IC    R14,0(R3)
         NR    R14,R15
         LTR   R1,R1
         BZ    *+L'*+4
         MH    R1,=H'10'
         AR    R1,R14
         BXLE  R3,R4,*+L'*+4
         B     CSSC2
         CLI   0(R3),C' '
         BE    CSSC2
         CLI   0(R3),C'-'
         BE    CSSC2
         CLI   0(R3),C')'
         BE    CSSC2
         BCT   R0,CSSC1
         B     SERR
CSSC2    LTR   R1,R1
         BNP   ISNR
         CH    R1,=Y(L'COMMSW*8)
         BH    ISNR
         L     R14,CSSCSV
         BR    R14
         SPACE 1
CSSCSV   DC    F'0'                SAVE R14.
         SPACE 1
        LTORG
         SPACE 1
         DROP  R8
         SPACE 2
*        UPDATE DATE-TIME ROUTINE.
*        -------------------------
*              R8 : LOCAL BASE REGISTER.
*              R14 : LINK REGISTER.
*              R0-R1-R14-R15 : WORK REGISTERS.
         SPACE 1
         DS    0H
         USING *,R8                LOCAL BASE REGISTER.
UPDT     ST    R14,UPDTSV
        $GDATE FDATE,FTIME,WORK
         MVC   SDATE+2(4),WORK
         MVC   SDATE(2),WORK+4
        $SDATE WORK,JDATE
         L     R14,UPDTSV
         BR    R14
         SPACE 1
UPDTSV   DC    F'0'                SAVE R14.
         SPACE 1
        LTORG
         SPACE 1
         DROP  R8
         SPACE 2
*        ACTION REQUEST ROUTINE.
*        -----------------------
*              R0 : INFO-ERC CODES FROM DYNAMIC ALLOCATION.
*              R1 : POINTER TO DATA-SET NAME.
*              R8 : LOCAL BASE REGISTER.
*              R14 : LINK REGISTER.
*              R15 : AT ENTRY = RC FROM DYNAMIC ALLOCATION.
*                    AT EXIT = RC 0 - RETRY (R).
*                                 4 - SKIP (S).
*                                 8 - CANCEL (C).
*              R0-R1-R14-R15 : WORK REGISTERS.
         SPACE 1
         DS    0H
         USING *,R8                LOCAL BASE REGISTER.
ACTRQ    ST    R14,ACTRQSV
         CH    R15,=H'4'
         BNE   *+L'*+8
         CL    R0,=A(X'020C0000')  SOMEBODY ELSE USE THE DATA-SET?
         BE    *+L'*+6             NO, NOT THAT SITUATION.
         XR    R15,R15
         B     ACTRQ10
         MVI   MSACT+4,C' '
         MVC   MSACT+5(64),MSACT+4
         MVC   MSACT+4(L'DSNM),0(R1)
         LA    R1,MSACT+L'DSNM+3
         CLI   0(R1),C' '
         BNE   *+L'*+4
         BCT   R1,*-8
         MVC   2(20,R1),=CL20'IS USED BY SOMEBODY.'
         TM    SWITCH,SWTR         DISPLAY MESSAGE.
         BO    ACTRQ2
        WTO    MF=(E,MSACT)
         XC    ACTECB,ACTECB
         XC    ACTAREA,ACTAREA
        WTOR   MF=(E,ACTMS)
ACTRQ1  WAIT   ECB=ACTECB
         B     ACTRQ5
ACTRQ2   LH    R0,MSACT
         SH    R0,=H'4'
        TPUT   MSACT+4,(0)
         XR    R0,R0
         IC    R0,ACTMS+9
         SH    R0,=H'4'
        TPUT   ACTMS+12,(0)
ACTRQ3   XC    ACTAREA,ACTAREA
        TGET   ACTAREA,L'ACTAREA
         LTR   R15,R15
         BZ    ACTRQ5
         CH    R15,=H'12'
         BNE   TSOERR
        TCLEARQ INPUT
ACTRQ4   XR    R0,R0
         IC    R0,ACTME+9
         SH    R0,=H'4'
        TPUT   ACTME+12,(0)
         B     ACTRQ3
ACTRQ5   OC    ACTAREA(8),=CL8' '
         LA    R1,L'ACTAREA
         LA    R14,ACTAREA+L'ACTAREA-1
         CLI   0(R14),C' '
         BNE   *+L'*+6
         BCTR  R14,0
         BCT   R1,*-10
         STC   R1,ACTRAL
         XR    R15,R15
         CLI   ACTRAL,1
         BNE   ACTRQ7
         CLI   ACTAREA,C'S'
         BE    ACTRQ11
         CLI   ACTAREA,C'R'
         BE    ACTRQ12
         CLI   ACTAREA,C'C'
         BE    ACTRQ10
ACTRQ6   TM    SWITCH,SWTR
         BO    ACTRQ4
         XC    ACTECB,ACTECB
         XC    ACTAREA,ACTAREA
        WTOR   MF=(E,ACTME)
         B     ACTRQ1
ACTRQ7   CLI   ACTRAL,4
         BNE   *+L'*+14
         CLC   ACTAREA(4),=CL4'SKIP'
         BE    ACTRQ11
         B     ACTRQ6
         CLI   ACTRAL,5
         BNE   *+L'*+14
         CLC   ACTAREA(5),=CL5'RETRY'
         BE    ACTRQ12
         B     ACTRQ6
         CLI   ACTRAL,6
         BNE   ACTRQ6
         CLC   ACTAREA(6),=CL6'CANCEL'
         BNE   ACTRQ6
ACTRQ10  LA    R15,4(R15)
ACTRQ11  LA    R15,4(R15)
ACTRQ12  L     R14,ACTRQSV
         BR    R14
         SPACE 1
MSACT   WTO    '1234567890123456789012345678901234567890123456789012345X
               6789012345',ROUTCDE=1,DESC=3,MF=L
ACTMS   WTOR   '--- REPLY ''R'' IF RECOVERED, ''S'' TO SKIP, OR ''C'' TX
               O CANCEL',ACTAREA,L'ACTAREA,ACTECB,ROUTCDE=2,DESC=2,MF=L
ACTME   WTOR   'SYNTAX ERROR - RESPECIFY ''R'', ''S'' OR ''C''',       X
               ACTAREA,L'ACTAREA,ACTECB,ROUTCDE=2,DESC=2,MF=L
         SPACE 1
ACTRQSV  DC    F'0'                SAVE R14.
ACTECB   DC    F'0'
ACTAREA  DC    XL8'0'
ACTRAL   DC    XL1'0'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R8
         EJECT
        $HEDIT KEYWORDS
*        PAUSE KEYWORD PROCESSING.
*        -------------------------
         SPACE 1
         DS    0H
         USING PAUSE,R10           LOCAL BASE REGISTER.
PAUSE    TM    SWPRSS,SWTO
         BO    RCMD
         L     R8,=A(RSRVAR)
         BASR  R14,R8
         LA    R1,MSOPP+24
         L     R8,=A(SETMSG)
         BASR  R14,R8
         TM    SWITCH,SWTR
         BO    PSTSO
         XC    RECB,RECB
         XC    RAREA,RAREA
        WTOR   MF=(E,MSOPP)
        WAIT   ECB=RECB
         LA    R1,L'RAREA
         LA    R14,RAREA+L'RAREA-1
         CLI   0(R14),0
         BNE   RPLY
         BCTR  R14,0
         BCT   R1,*-10
         B     RPLY
PSTSO    TM    SWITCH,SWLS
         BZ    PSTSONL
        TPUT   CARD,L'CARD-8
PSTSONL  XR    R0,R0
         IC    R0,MSOPP+9
         SH    R0,=H'4'
        TPUT   MSOPP+12,(0)
PSBCK    XC    RAREA,RAREA
        TGET   RAREA,L'RAREA
         LTR   R15,R15
         BZ    RPLY
         CH    R15,=H'12'
         BNE   TSOERR
        TCLEARQ INPUT
        TPUT   MSSER,L'MSSER
         B     PSBCK
RPLY     OC    RAREA(8),=CL8' '
         STC   R1,RAREAL
         CLC   RAREA(8),=CL8'CANCEL '
         BNE   RCMD
         B     ENDMB
         SPACE 1
RECB     DC    F'0'
MSOPP   WTOR   '--- PAUSE : 1234567890123456789012345678901234567890123X
               456789012345',RAREA,L'RAREA,RECB,ROUTCDE=2,DESC=2,MF=L
MSSER    DC    C'SYNTAX ERROR - RESPECIFY ... OR CANCEL'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        MESSAGE KEYWORD PROCESSING.
*        ---------------------------
         SPACE 1
         DS    0H
         USING MESSAGE,R10         LOCAL BASE REGISTER.
MESSAGE  TM    SWPRSS,SWTO
         BO    RCMD
         L     R8,=A(RSRVAR)
         BASR  R14,R8
         LA    R1,MSOPM+18
         L     R8,=A(SETMSG)
         BASR  R14,R8
         TM    SWITCH,SWTR
         BO    MESST
        WTO    MF=(E,MSOPM)
         B     RCMD
MESST    TM    SWITCH,SWLS
         BZ    MESSTNL
        TPUT   CARD,L'CARD-8
MESSTNL  LH    R0,MSOPM
         SH    R0,=H'4'
        TPUT   MSOPM+4,(0)
         B     RCMD
         SPACE 1
MSOPM   WTO    '--- MESSAGE : 12345678901234567890123456789012345678901X
               23456789012345',ROUTCDE=2,DESC=4,MF=L
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        IF-REPLY-BIN KEYWORD PROCESSING.
*        --------------------------------
         SPACE 1
         DS    0H
         USING IFRB,R10            LOCAL BASE REGISTER.
IFRB     NI    SWPRSS,255-SWRC-SWRH
         OI    SWPRSS,SWRB
         B     IFRP1
         SPACE 1
         DROP  R10
         SPACE 2
*        IF-REPLY-CHAR KEYWORD PROCESSING.
*        ---------------------------------
         SPACE 1
         DS    0H
         USING IFRC,R10            LOCAL BASE REGISTER.
IFRC     NI    SWPRSS,255-SWRB-SWRH
         OI    SWPRSS,SWRC
         B     IFRP1
         SPACE 1
         DROP  R10
         SPACE 2
*        IF-REPLY-HEX KEYWORD PROCESSING.
*        --------------------------------
         SPACE 1
         DS    0H
         USING IFRH,R10            LOCAL BASE REGISTER.
IFRH     NI    SWPRSS,255-SWRB-SWRC
         OI    SWPRSS,SWRH
         B     IFRP1
         SPACE 1
         DROP  R10
         SPACE 2
*        IF-REPLY KEYWORD PROCESSING.
*        ----------------------------
         SPACE 1
         DS    0H
         USING IFRP,R10            LOCAL BASE REGISTER.
IFRP     NI    SWPRSS,255-SWRB-SWRC-SWRH
         DROP  R10
IFRP1    BASR  R10,0               COMMON LOCAL BASE REGISTER.
         USING *,R10
         TM    SWPRSS,SWTO
         BO    RCMD
         OI    SWPRSS,SWRP
         L     R8,=A(RSRVAR)
         BASR  R14,R8
         NI    SWPRSS,255-SWRP
         MVC   VALT,=CL8' '
         MVI   VALTL,0
         CLI   0(R3),C' '          FIND OPERATOR.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     SERR
         L     R8,=A(OPSET)
         BASR  R14,R8
         BXLE  R3,R4,*+L'*+4       FIND VALUE.
         B     SERR
         CLI   0(R3),C' '
         BE    *-12
         CLC   0(2,R3),=CL2''''''  NULL VALUE REQUESTED?
         BNE   IFRP2               NO.
         LA    R3,1(R3)
         BXLE  R3,R4,*+L'*+4
         B     SERR
         CLI   0(R3),C' '
         BNE   SERR
         B     IFRP3
IFRP2    LR    R6,R3
         LA    R0,L'VALT
         BXLE  R3,R4,*+L'*+4
         B     SERR
         CLI   0(R3),C' '
         BE    *+L'*+8
         BCT   R0,*-16
         B     SERR
         LA    R1,L'VALT
         SR    R1,R0
         EX    R1,MVVLT
         LA    R1,1(R1)
         STC   R1,VALTL
IFRP3    BXLE  R3,R4,*+L'*+4       FIND LABEL.
         B     SERR
         CLI   0(R3),C' '
         BE    IFRP3
         LR    R6,R3
         LA    R0,L'LABEL
         BXLE  R3,R4,*+L'*+4
         B     IFRP4
         CLI   0(R3),C' '
         BE    IFRP4
         BCT   R0,*-16
         B     SERR
IFRP4    LA    R1,L'LABEL
         SR    R1,R0
         EX    R1,MVLAB
         STC   R1,LABELL
         XR    R2,R2
         IC    R2,TMASK            EXECUTE IF.
         TM    SWPRSS,SWRB+SWRC+SWRH    BIN-CHAR-HEX?
         BNZ   IFRBCH              YES.
         CLI   VALTL,0             NULL TEST ?
         BE    *+L'*+8             YES.
         CLI   RAREAL,0            NULL REPLY ?
         BNE   *+L'*+10            NO.
         CLC   VALTL,RAREAL
         B     *+L'*+10
         IC    R4,VALTL
         BCTR  R4,0
         EX    R4,CLVIF
         EX    R2,TSVIF
         B     NOSKIP
         SPACE 1
IFRBCH   MVC   ARG1,=CL8' '
         XR    R14,R14
         ICM   R14,B'0001',RAREAL
         BZ    *+L'*+12
         LA    R15,ARG1+L'ARG1
         SR    R15,R14
         BCTR  R14,0
         EX    R14,MVRC1
         MVC   ARG2,=CL8' '
         XR    R14,R14
         ICM   R14,B'0001',VALTL
         BZ    *+L'*+12
         LA    R15,ARG2+L'ARG2
         SR    R15,R14
         BCTR  R14,0
         EX    R14,MVRC2
         TM    SWPRSS,SWRC         CHAR?
         BZ    *+L'*+14            NO, IT IS BIN OR HEX.
         CLC   ARG1,ARG2
         EX    R2,TSVIF
         B     NOSKIP
         TM    SWPRSS,SWRB         BIN?
         BZ    IFRH1               NO, IT IS HEX.
         PACK  WORK,ARG1
         NI    WORK+L'WORK-1,X'F0'
         OC    WORK+L'WORK-1(1),=PL1'+0'
         CVB   R14,WORK
         PACK  WORK,ARG2
         NI    WORK+L'WORK-1,X'F0'
         OC    WORK+L'WORK-1(1),=PL1'+0'
         CVB   R15,WORK
         CR    R14,R15
         EX    R2,TSVIF
         B     NOSKIP
IFRH1    NC    ARG1,=XL8'1F1F1F1F1F1F1F1F'
         TR    ARG1,HEXTB
         PACK  WORK(5),ARG1(L'ARG1+1)
         L     R14,WORK
         NC    ARG2,=XL8'1F1F1F1F1F1F1F1F'
         TR    ARG2,HEXTB
         PACK  WORK(5),ARG2(L'ARG2+1)
         L     R15,WORK
         CR    R14,R15
         EX    R2,TSVIF
         B     NOSKIP
CLVIF    CLC   RAREA(*-*),VALT     << EXECUTED >>
TSVIF    NOP   SKIPTO              << EXECUTED >>
MVRC1    MVC   0(*-*,R15),RAREA    << EXECUTED >>
MVRC2    MVC   0(*-*,R15),VALT     << EXECUTED >>
         SPACE 1
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
HEXTB    DC    X'000A0B0C0D0E0F000000000000000000'
         DC    X'00010203040506070809000000000000'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        VER-BIN KEYWORD PROCESSING.
*        ---------------------------
         SPACE 1
         DS    0H
         USING VERB,R10            LOCAL BASE REGISTER.
VERB     NI    SWPRSS,255-SWRC-SWRH
         OI    SWPRSS,SWRB
         B     VER1
         SPACE 1
         DROP  R10
         SPACE 2
*        VER-HEX KEYWORD PROCESSING.
*        ---------------------------
         SPACE 1
         DS    0H
         USING VERH,R10            LOCAL BASE REGISTER.
VERH     NI    SWPRSS,255-SWRB-SWRC
         OI    SWPRSS,SWRH
         DROP  R10
VER1     BASR  R10,0               COMMON LOCAL BASE REGISTER.
         USING *,R10
         TM    SWPRSS,SWTO
         BO    RCMD
         CLI   0(R3),C' '          FIND LABEL.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     SERR
         LR    R6,R3
         LA    R0,L'LABEL
         BXLE  R3,R4,*+L'*+4
         B     VER2
         CLI   0(R3),C' '
         BE    VER2
         BCT   R0,*-16
         B     SERR
VER2     LA    R1,L'LABEL
         SR    R1,R0
         EX    R1,MVLAB
         STC   R1,LABELL
         XR    R14,R14             EXECUTE VERIFY.
         ICM   R14,B'0001',RAREAL
         BZ    PRCSS
         LA    R15,RAREA-1(R14)
VER3     TM    SWPRSS,SWRB         BIN?
         BO    VER4                YES.
         CLI   0(R15),C'A'         NO, IT IS HEX.
         BL    SKIPTO
         CLI   0(R15),C'F'
         BNH   VER5
VER4     CLI   0(R15),C'0'
         BL    SKIPTO
         CLI   0(R15),C'9'
         BH    SKIPTO
VER5     BCTR  R15,0
         BCT   R14,VER3
         B     PRCSS
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        IF/IF-VAR KEYWORD PROCESSING.
*        -----------------------------
         SPACE 1
         DS    0H
         USING IFV,R10             LOCAL BASE REGISTER.
IFV      TM    SWPRSS,SWTO
         BO    RCMD
         CLI   0(R3),C' '          FIND VARIABLE NAME.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     SERR
         LR    R6,R3
         LA    R0,L'VAR
         MVC   VAR,=CL8' '
         BXLE  R3,R4,*+L'*+4
         B     SERR
         CLI   0(R3),C' '
         BE    *+L'*+8
         BCT   R0,*-16
         B     SERR
         LA    R1,L'VAR
         SR    R1,R0
         EX    R1,MVVAR            GET VARIABLE NAME.
         L     R1,ARVART           SCAN VARIABLES TABLE.
         USING RVART,R1
IFV1     TM    RVARNME,EOT         END OF TABLE?
         BO    SERR                YES.
         BZ    SERR                BRANCH IF FREE ELEMENT.
         CLC   RVARNME,VAR         IS IT THIS ONE?
         BE    *+L'*+8             YES.
         LA    R1,RVARTL(R1)
         B     IFV1
         LA    R2,RVARV
         XR    R0,R0
         IC    R0,RVARVL
         DROP  R1
         MVI   VLSTR,C' '
         OI    SWITCH,SWIV
         B     IFCLBR
         DROP  R10
         SPACE 1
         DS    0H
         USING IF,R10              LOCAL BASE REGISTER.
IF       TM    SWPRSS,SWTO
         BO    RCMD
         CLI   0(R3),C' '          FIND WHAT.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     SERR
         L     R1,=A(FVTBL)
IF1      CLI   0(R1),EOT
         BE    SERR
         CLC   0(8,R1),=CL8'RPID'
         BE    IF2
         XR    R2,R2
         IC    R2,8(R1)
         BCT   R2,*+L'*+6
         CLC   0(*-*,R3),0(R1)     << EXECUTED >>
         EX    R2,*-6
         BNE   IF2
         LA    R2,1(R2,R3)
         CLI   0(R2),C' '
         BE    *+L'*+8
IF2      LA    R1,L'FVTBL(R1)
         B     IF1
         MVC   VLSTR(1),9(R1)
         LR    R3,R2
         XR    R0,R0
         LR    R2,R0
         IC    R0,10(R1)
         ICM   R2,B'0111',11(R1)
         NI    SWITCH,255-SWIV
         DROP  R10
IFCLBR   BASR  R10,0               COMMON LOCAL BASE REGISTER.
         USING *,R10
         MVC   VLSTR+1(L'VLSTR-1),VLSTR
         BXLE  R3,R4,*+L'*+4       FIND OPERATOR.
         B     SERR
         CLI   0(R3),C' '
         BE    *-12
         L     R8,=A(OPSET)
         BASR  R14,R8
         BXLE  R3,R4,*+L'*+4       FIND VALUE.
         B     SERR
         CLI   0(R3),C' '
         BE    *-12
         LR    R6,R3
         LR    R14,R0
         BXLE  R3,R4,*+L'*+4
         B     SERR
         CLI   0(R3),C' '
         BE    *+L'*+8
         BCT   R0,*-16
         B     SERR
         LR    R1,R14
         SR    R1,R0
         LA    R15,VLSTR-1
         AR    R15,R0
         EX    R1,MVVAL
         LR    R14,R1
         LR    R15,R0
         BXLE  R3,R4,*+L'*+4       FIND LABEL.
         B     SERR
         CLI   0(R3),C' '
         BE    *-12
         LR    R6,R3
         LA    R0,L'LABEL
         BXLE  R3,R4,*+L'*+4
         B     IF3
         CLI   0(R3),C' '
         BE    IF3
         BCT   R0,*-16
         B     SERR
IF3      LA    R1,L'LABEL
         SR    R1,R0
         EX    R1,MVLAB
         STC   R1,LABELL
         LR    R4,R14              EXECUTE IF.
         BCTR  R15,0
         LA    R2,0(R15,R2)
         LA    R3,VLSTR(R15)
         TM    SWITCH,SWTR+SWIV
         BNZ   *+L'*+6
         L     R8,=A(UPDT)
         BASR  R14,R8
         XR    R1,R1
         IC    R1,TMASK
         EX    R4,CLVAL
         EX    R1,TSVAL
         B     NOSKIP
MVVAL    MVC   0(*-*,R15),0(R6)    << EXECUTED >>
CLVAL    CLC   0(*-*,R2),0(R3)     << EXECUTED >>
TSVAL    NOP   SKIPTO              << EXECUTED >>
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        IF-ID KEYWORD PROCESSING.
*        -------------------------
         SPACE 1
         DS    0H
         USING IFID,R10            LOCAL BASE REGISTER.
IFID     TM    SWPRSS,SWTO
         BO    RCMD
         CLI   0(R3),C' '          FIND MESSAGE-ID TEXT.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     SERR
         LA    R0,L'RPTXT
         LA    R1,RPTXT
         LR    R2,R1
         MVI   RPTXTL,0
         MVI   0(R2),C' '
         MVC   1(L'RPTXT-1,R2),0(R2)
         CLI   0(R3),C''''
         BNE   IFID4
IFID1    BXLE  R3,R4,*+L'*+4       QUOTED.
         B     SERR
         CLI   0(R3),C''''
         BNE   IFID2
         BXLE  R3,R4,*+L'*+4
         B     SERR
         CLI   0(R3),C' '
         BE    IFID3
         CLI   0(R3),C''''
         BNE   SERR
IFID2    MVC   0(1,R2),0(R3)
         LA    R2,1(R2)
         BCT   R0,IFID1
         B     SERR
IFID3    SR    R2,R1
         BNP   SERR
         CH    R2,=H'8'
         BNL   IFID5
         B     SERR
IFID4    MVC   0(1,R2),0(R3)       NOT QUOTED.
         LA    R2,1(R2)
         BCT   R0,*+L'*+4
         B     SERR
         BXLE  R3,R4,*+L'*+4
         B     SERR
         CLI   0(R3),C' '
         BNE   IFID4
         SR    R2,R1
         BNP   SERR
         CH    R2,=H'8'
         BNL   IFID5
         LH    R2,=H'8'
IFID5    BCTR  R2,0
         STC   R2,RPTXTL
         BXLE  R3,R4,*+L'*+4       FIND LABEL.
         B     SERR
         CLI   0(R3),C' '
         BE    *-12
         LR    R6,R3
         LA    R0,L'LABEL
         BXLE  R3,R4,*+L'*+4
         B     IFID6
         CLI   0(R3),C' '
         BE    IFID6
         BCT   R0,*-16
         B     SERR
IFID6    LA    R1,L'LABEL
         SR    R1,R0
         EX    R1,MVLAB
         STC   R1,LABELL
        $SRPI  RPTXTL,RPID         EXECUTE IF.
         B     *+L'*(R15)
         B     SKIPTO              +0
         B     NOSKIP               4
         B     SRPERR               8
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        GOTO KEYWORD PROCESSING.
*        ------------------------
         SPACE 1
         DS    0H
         USING GOTO,R10            LOCAL BASE REGISTER.
GOTO     TM    SWPRSS,SWTO
         BO    RCMD
         CLI   0(R3),C' '          FIND LABEL.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     SERR
         LR    R6,R3
         LA    R0,L'LABEL
         BXLE  R3,R4,*+L'*+4
         B     GOTO1
         CLI   0(R3),C' '
         BE    GOTO1
         BCT   R0,*-16
         B     SERR
GOTO1    LA    R1,L'LABEL
         SR    R1,R0
         EX    R1,MVLAB
         STC   R1,LABELL
         B     SKIPTO
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        SET-REPLY/SET-VAR KEYWORD PROCESSING.
*        -------------------------------------
         SPACE 1
         DS    0H
         USING SETR,R10            LOCAL BASE REGISTER.
SETR     TM    SWPRSS,SWTO
         BO    RCMD
         CLI   0(R3),C' '          FIND VARIABLE NAME.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     SERR
         LR    R6,R3
         LA    R0,L'VAR
         MVC   VAR,=CL8' '
         BXLE  R3,R4,*+L'*+4
         B     SETR1
         CLI   0(R3),C' '
         BE    SETR1
         BCT   R0,*-16
         B     SERR
SETR1    LA    R1,L'VAR
         SR    R1,R0
         EX    R1,MVVAR            GET VARIABLE NAME.
         L     R1,=A(FVTBL)
SETR2    CLI   0(R1),EOT
         BE    SETR3
         CLC   VAR(L'VAR),0(R1)    CHECK AGAINST RESERVED NAME.
         BE    SERR
         LA    R1,L'FVTBL(R1)
         B     SETR2
SETR3    BXLE  R3,R4,*+L'*+4
         B     SETR6               IF NO VALUE USE REPLY.
         CLI   0(R3),C' '
         BE    *-12
         MVC   VALT,=CL8' '
         MVI   VALTL,0
         CLC   0(2,R3),=CL2''''''  NULL VALUE REQUESTED?
         BNE   SETR4               NO.
         LA    R3,1(R3)
         BXLE  R3,R4,*+L'*+4
         B     SETR7
         CLI   0(R3),C' '
         BE    SETR7
         B     SERR
SETR4    LR    R6,R3
         LA    R0,L'VALT
         BXLE  R3,R4,*+L'*+4
         B     SETR5
         CLI   0(R3),C' '
         BE    SETR5
         BCT   R0,*-16
         B     SERR
SETR5    LA    R1,L'VALT
         SR    R1,R0
         EX    R1,MVVLT
         LA    R1,1(R1)
         STC   R1,VALTL
         B     SETR7
SETR6    MVC   VALT,RAREA
         MVC   VALTL,RAREAL
SETR7    L     R1,ARVART           SCAN VARIABLES TABLE.
         USING RVART,R1
SETR8    TM    RVARNME,EOT         END OF TABLE?
         BO    ERVR                YES.
         BZ    SETR9               BRANCH IF FREE ELEMENT.
         CLC   RVARNME,VAR         THIS ONE MATCH?
         BE    SETR10              YES, UPDATE IT.
         LA    R1,RVARTL(R1)
         B     SETR8
SETR9    MVC   RVARNME,VAR         ENTER VARIABLE NAME IN TABLE.
SETR10   MVC   RVARV,VALT
         MVC   RVARVL,VALTL
         DROP  R1
         B     PRCSS
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        EXECUTE ANOTHER MEMBER.
*        -----------------------
         SPACE 1
         DS    0H
         USING EXECUTE,R10         LOCAL BASE REGISTER.
EXECUTE  TM    SWPRSS,SWTO
         BO    RCMD
         L     R8,=A(RSRVAR)
         BASR  R14,R8
         CLI   0(R3),C' '          FIND PO-DSNAME.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     SERR
         CLI   0(R3),C'*'          DATA-SET IN USE?
         BE    EXC2                YES.
         LR    R6,R3
         LA    R0,L'DSNM
         MVI   DSNM,C' '
         MVC   DSNM+1(L'DSNM-1),DSNM
         BXLE  R3,R4,*+L'*+4
         B     EXC1
         CLI   0(R3),C' '
         BE    EXC1
         BCT   R0,*-16
         B     SERR
EXC1     LA    R1,L'DSNM
         SR    R1,R0
         EX    R1,MVDSN
EXC2     BXLE  R3,R4,*+L'*+4       FIND MEMBER NAME.
         B     SERR
         CLI   0(R3),C' '
         BE    EXC2
         LR    R6,R3
         LA    R0,L'MEMBER
         MVC   MEMBER,=CL8' '
         BXLE  R3,R4,*+L'*+4
         B     EXC3
         CLI   0(R3),C' '
         BE    EXC3
         BCT   R0,*-16
         B     SERR
EXC3     LA    R1,L'MEMBER
         SR    R1,R0
         EX    R1,MVMBN
         TM    SWITCH,SWTR
         BZ    EXC4
         TM    SWITCH,SWLS
         BZ    EXC4
        TPUT   CARD,L'CARD-8
EXC4     XR    R0,R0               NOW ADD NEW DD-NAME ENTRY.
         L     R6,DDPTR
         USING DDTAB,R6
EXC5     ICM   R0,B'0011',DDTFN
         AL    R6,=A(DDTABL)
         OC    DDTFN,DDTFN         ALREADY IN USE?
         BO    ERTB                NO, TABLE OVERFLOW.
         BNZ   EXC5                YES.
         AH    R0,=H'1'            FREE, BUILD NEW DD-NAME.
         STCM  R0,B'0011',DDTFN
         CVD   R0,WORK
         MVC   DDTNME+3(5),=XL5'2120202020'
         ED    DDTNME+3(5),WORK+5
         MVC   DDTNME(L'DDTNME-3),=CL5'SYSPO'
         MVC   DDTMBN,MEMBER       SET MEMBER NAME.
         MVC   DDTDSN,DSNM         SET DATA-SET NAME.
         L     R1,DALIST           ALLOCATE NEW DD-NAME.
         LR    R2,R1
         L     R3,=A(DYNLGTH)
         LA    R4,*
         XR    R5,R5
         ICM   R5,B'1000',=CL8' '
         MVCL  R2,R4
         USING DYNLIST,R1
         MVC   DDNAME,DDTNME
         MVC   DSNAME,DSNM
         MVC   DSSTATUS(3),=CL3'SHR'
         MVC   DSNDISP(4),=CL4'KEEP'
         MVC   DSADISP(4),=CL4'KEEP'
         DROP  R1
         B     EXC6+L'EXC6
EXC6     L     R1,DALIST
        $DYNALL (R1),RCODES
         LTR   R15,R15
         BZ    EXC7
         LA    R1,DSNM
         L     R8,=A(ACTRQ)
         BASR  R14,R8              REQUEST ACTION.
         B     *+L'*(R15)
         B     EXC6                0 - RETRY (RECOVERED).
         B     *+L'*+4             4 - SKIP (IGNORE).
         B     *+L'*+12            8 - CANCEL.
         BAS   R8,DAMSG            ALLOCATION ERROR.
         DC    CL4'ALL.'
         B     RCMD                CONTINUE PROCESSING.
         BAS   R8,DAMSG            ALLOCATION ERROR.
         DC    CL4'ALL.'
         XC    DDTFN(DDTABL),DDTFN ELIMINE ENTRY.
         TM    SWITCH,SWTR
         BZ    TOPERS
         TM    SWITCH,SWSY
         BO    TOPERS
         B     RCMD                CONTINUE PROCESSING.
         DROP  R6
EXC7     ST    R6,DDPTR            PROCESS MEMBER.
         LR    R1,R6
         B     OPDS
MVDSN    MVC   DSNM(*-*),0(R6)     << EXECUTED >>
MVMBN    MVC   MEMBER(*-*),0(R6)   << EXECUTED >>
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        LOGICAL KEYWORD PROCESSING.
*        ---------------------------
         SPACE 1
         DS    0H
         USING LOGICAL,R10         LOCAL BASE REGISTER.
LOGICAL  TM    SWPRSS,SWTO
         BO    RCMD
         CLI   0(R3),C' '          FIND VARIABLE.
         BNE   LGC1
         BXLE  R3,R4,*-8
         B     SERR
LGC1     LR    R6,R3
         LA    R0,L'VAR
         MVC   VAR,=CL8' '
         BXLE  R3,R4,*+L'*+4
         B     LGC2
         CLI   0(R3),C' '
         BE    LGC2
         BCT   R0,*-16
         B     SERR
LGC2     LA    R1,L'VAR
         SR    R1,R0
         EX    R1,MVVAR            GET VARIABLE NAME.
         L     R1,ALVART           SCAN VARIABLES TABLE.
         USING LVART,R1
LGC3     TM    LVARNME,EOT         END OF TABLE?
         BO    ERVB                YES.
         BZ    LGC4                BRANCH IF FREE ELEMENT.
         CLC   LVARNME,VAR         THIS ONE MATCH?
         BE    ESDV                YES, ALREADY DEFINED.
         LA    R1,LVARTL(R1)
         B     LGC3
         DROP  R1
LGC4     LR    R6,R1
         USING LVART,R6
         MVC   LVARNME,VAR         ENTER VARIABLE NAME IN TABLE.
         XR    R0,R0
         S     R1,ALVART
         BZ    *+L'*+10
         D     R0,=A(LVARTL)
         LR    R0,R1
         SRL   R0,3
         STC   R0,LVARSBN          SET SWITCH BYTE NUMBER.
         LA    R0,BIT5+BIT6+BIT7
         NR    R1,R0
         LA    R0,BIT0
         SRL   R0,0(R1)
         STC   R0,LVARSMB          SET SWITCH MASK BIT.
         DROP  R6
         BXLE  R3,R4,*+L'*+4
         B     PRCSS
         CLI   0(R3),C' '
         BE    *-12
         B     LGC1                GO GET NEXT VARIABLE.
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        TRUE/FALSE KEYWORD PROCESSING.
*        ------------------------------
         SPACE 1
         DS    0H
         USING TRUE,R10            LOCAL BASE REGISTER.
TRUE     TM    SWPRSS,SWTO
         BO    RCMD
         OI    SWPRSS,SWTF         SET TRUE.
         BAS   R10,TF1
         DROP  R10
         USING FALSE,R10           LOCAL BASE REGISTER.
FALSE    TM    SWPRSS,SWTO
         BO    RCMD
         NI    SWPRSS,255-SWTF     SET FALSE.
TF1      CLI   0(R3),C' '          FIND VARIABLE.
         BNE   TF2
         BXLE  R3,R4,TF1
         B     SERR
TF2      LR    R6,R3
         LA    R0,L'VAR
         MVC   VAR,=CL8' '
         BXLE  R3,R4,*+L'*+4
         B     TF3
         CLI   0(R3),C' '
         BE    TF3
         BCT   R0,*-16
         B     SERR
TF3      LA    R1,L'VAR
         SR    R1,R0
         EX    R1,MVVAR            GET VARIABLE NAME.
         L     R2,ALVART           SCAN VARIABLES TABLE.
         USING LVART,R2
TF4      TM    LVARNME,EOT         END OF TABLE?
         BO    ERUV                YES.
         BZ    ERUV                BRANCH IF FREE ELEMENT.
         CLC   LVARNME,VAR         THIS ONE MATCH?
         BE    *+L'*+8             YES.
         LA    R2,LVARTL(R2)
         B     TF4
         XR    R0,R0
         IC    R0,LVARSBN          GET SWITCH BYTE NUMBER.
         XR    R1,R1
         IC    R1,LVARSMB          GET SWITCH MASK BIT.
         DROP  R2
         L     R2,ASWVAR
         AR    R2,R0
         TM    SWPRSS,SWTF
         BZ    *+L'*+8
         EX    R1,STTRUE           SET VARIABLE TRUE.
         B     *+L'*+10
         LA    R0,X'FF'
         XR    R1,R0
         EX    R1,STFLSE           SET VARIABLE FALSE.
         BXLE  R3,R4,*+L'*+4
         B     PRCSS
         CLI   0(R3),C' '
         BE    *-12
         B     TF2                 GO GET NEXT VARIABLE.
STTRUE   OI    0(R2),*-*           << EXECUTED >>
STFLSE   NI    0(R2),*-*           << EXECUTED >>
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        IF-TRUE/IF-FALSE KEYWORD PROCESSING.
*        ------------------------------------
         SPACE 1
         DS    0H
         USING IFTRUE,R10          LOCAL BASE REGISTER.
IFTRUE   TM    SWPRSS,SWTO
         BO    RCMD
         OI    SWPRSS,SWTF         SET TRUE.
         BAS   R10,IFTF1
         DROP  R10
         USING IFFALSE,R10         LOCAL BASE REGISTER.
IFFALSE  TM    SWPRSS,SWTO
         BO    RCMD
         NI    SWPRSS,255-SWTF     SET FALSE.
IFTF1    CLI   0(R3),C' '          FIND VARIABLE.
         BNE   *+L'*+8
         BXLE  R3,R4,IFTF1
         B     SERR
         LR    R6,R3
         LA    R0,L'VAR
         MVC   VAR,=CL8' '
         BXLE  R3,R4,*+L'*+4
         B     IFTF2
         CLI   0(R3),C' '
         BE    IFTF2
         BCT   R0,*-16
         B     SERR
IFTF2    LA    R1,L'VAR
         SR    R1,R0
         EX    R1,MVVAR            GET VARIABLE NAME.
         L     R2,ALVART           SCAN VARIABLES TABLE.
         USING LVART,R2
IFTF3    TM    LVARNME,EOT         END OF TABLE?
         BO    ERUV                YES.
         BZ    ERUV                BRANCH IF FREE ELEMENT.
         CLC   LVARNME,VAR         THIS ONE MATCH?
         BE    *+L'*+8             YES.
         LA    R2,LVARTL(R2)
         B     IFTF3
         BXLE  R3,R4,*+L'*+4       FIND LABEL.
         B     SERR
         CLI   0(R3),C' '
         BE    *-12
         LR    R6,R3
         LA    R0,L'LABEL
         BXLE  R3,R4,*+L'*+4
         B     IFTF4
         CLI   0(R3),C' '
         BE    IFTF4
         BCT   R0,*-16
         B     SERR
IFTF4    LA    R1,L'LABEL
         SR    R1,R0
         EX    R1,MVLAB
         STC   R1,LABELL
         XR    R0,R0
         IC    R0,LVARSBN          GET SWITCH BYTE NUMBER.
         XR    R1,R1
         IC    R1,LVARSMB          GET SWITCH MASK BIT.
         DROP  R2
         L     R2,ASWVAR
         AR    R2,R0
         TM    SWPRSS,SWTF         EXECUTE IF.
         BZ    *+L'*+12
         EX    R1,IFTMTF           IS VARIABLE TRUE?
         BO    SKIPTO              YES.
         B     NOSKIP
         EX    R1,IFTMTF           IS VARIABLE FALSE?
         BZ    SKIPTO              YES.
         B     NOSKIP
IFTMTF   TM    0(R2),*-*           << EXECUTED >>
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        NULL KEYWORD PROCESSING.
*        ------------------------
         SPACE 1
         DS    0H
         USING NULL,R10            LOCAL BASE REGISTER.
NULL     TM    SWPRSS,SWNL         NULL DISABLED?
         BO    SERR                YES.
         OI    SWPRSS,SWNL         INHIBIT ANOTHER.
         CLI   0(R3),C' '          FIND LABEL.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     SERR
         XR    R1,R1
         IC    R1,LABELL
         EX    R1,CLLAB
         BE    NULL3               MAY BE THIS ONE.
NULL1    TM    SWPRSS,SWTO
         BO    RCMD
         BXLE  R3,R4,*+L'*+4       LOOK IF AN INSTRUCTION FOLLOWS.
         B     PRCSS
         CLI   0(R3),C' '
         BNE   *-12
NULL2    BXLE  R3,R4,*+L'*+4
         B     PRCSS
         CLI   0(R3),C' '
         BE    NULL2
         B     SCTBL
NULL3    AR    R3,R1
         BXLE  R3,R4,*+L'*+4
         B     NOSKIP
         CLI   0(R3),C' '
         BNE   NULL1               NOT THIS ONE.
         NI    SWPRSS,255-SWTO
         B     NULL2
CLLAB    CLC   LABEL(*-*),0(R3)    << EXECUTED >>
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        GDATE KEYWORD PROCESSING.
*        -------------------------
         SPACE 1
         DS    0H
         USING GDTE,R10            LOCAL BASE REGISTER.
GDTE     TM    SWPRSS,SWTO
         BO    RCMD
         TM    SWITCH,SWTR
         BO    GDTE1
         L     R8,=A(UPDT)
         BASR  R14,R8
         MVC   MSGDT+15(L'FDATE),FDATE
         MVC   MSGDT+45(L'THRS),THRS
         MVC   MSGDT+48(L'TMNS),TMNS
         MVC   MSGDT+51(L'TSCS),TSCS
        WTO    MF=(E,MSGDT)
         B     RCMD
GDTE1    TM    SWITCH,SWLS
         BZ    GDTE2
        TPUT   CARD,L'CARD-8
GDTE2    MVC   MSGDT+15(L'FDATE),FDATE
         MVC   MSGDT+45(L'THRS),THRS
         MVC   MSGDT+48(L'TMNS),TMNS
         MVC   MSGDT+51(L'TSCS),TSCS
         LH    R0,MSGDT
         SH    R0,=H'4'
        TPUT   MSGDT+4,(0)
         B     RCMD
         SPACE 1
MSGDT   WTO    '--- DATE : 12345678901234567890 - TIME : HH.MM.SS',    X
               ROUTCDE=2,DESC=4,MF=L
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        T-WAIT KEYWORD PROCESSING.
*        --------------------------
         SPACE 1
         DS    0H
         USING TW,R10              LOCAL BASE REGISTER.
TW       TM    SWPRSS,SWTO
         BO    RCMD
         L     R8,=A(RSRVAR)
         BASR  R14,R8
         CLI   0(R3),C' '          FIND SECONDS.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     PRCSS               NONE, NO WAIT.
         LA    R0,3
         XR    R1,R1
         XR    R14,R14
         LA    R15,15
TW1      CLI   0(R3),C'0'
         BL    SERR
         CLI   0(R3),C'9'
         BH    SERR
         IC    R14,0(R3)
         NR    R14,R15
         LTR   R1,R1
         BZ    *+L'*+4
         MH    R1,=H'10'
         AR    R1,R14
         BXLE  R3,R4,*+L'*+4
         B     *+L'*+16
         CLI   0(R3),C' '
         BE    *+L'*+8
         BCT   R0,TW1
         B     SERR
         LTR   R1,R1
         BNP   PRCSS               ZERO, NO WAIT.
         CH    R1,=H'120'
         BH    SERR                ERROR, TOO HIGH.
         MH    R1,=H'100'
         ST    R1,WORK
        STIMER WAIT,,BINTVL=WORK
         B     PRCSS
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        SUBMIT KEYWORD PROCESSING.
*        --------------------------
         SPACE 1
         DS    0H
         USING SBMT,R10            LOCAL BASE REGISTER.
SBMT     TM    SWPRSS,SWTO
         BO    RCMD
         L     R8,=A(RSRVAR)
         BASR  R14,R8
         CLI   0(R3),C' '          FIND DSNAME.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     SERR
         CLI   0(R3),C'*'          FROM CURRENT DATA-SET?
         BNE   SBM1                NO.
         MVC   SBDSNM,DSNM         SET IT.
         BXLE  R3,R4,*+L'*+4       MUST BE PARTITIONED MEMBER.
         B     SERR
         CLI   0(R3),C'('
         BNE   SERR
         BXLE  R3,R4,SBM4
         B     SERR
SBM1     LR    R6,R3
         LA    R0,L'SBDSNM
         MVI   SBDSNM,C' '
         MVC   SBDSNM+1(L'SBDSNM-1),SBDSNM
         MVC   SBMEM,=CL8' '
SBM2     BXLE  R3,R4,*+L'*+4
         B     SBM3
         CLI   0(R3),C' '
         BE    SBM3
         CLI   0(R3),C'('
         BE    SBM3
         BCT   R0,SBM2
         B     SERR
SBM3     LA    R1,L'SBDSNM
         SR    R1,R0
         EX    R1,MVSBDSN
         CLR   R3,R5
         BH    SBM6                DATA-SET IS SEQUENTIAL.
         CLI   0(R3),C'('
         BNE   SBM6                DATA-SET IS SEQUENTIAL.
         BXLE  R3,R4,SBM4          FIND MEMBER NAME OF PARTITIONED.
         B     SERR
SBM4     LR    R6,R3
         LA    R0,L'SBMEM
SBM5     BXLE  R3,R4,*+L'*+4
         B     SBM6
         CLI   0(R3),C' '
         BE    SERR
         CLI   0(R3),C')'
         BE    *+L'*+8
         BCT   R0,SBM5
         B     SERR
         LA    R1,L'SBMEM
         SR    R1,R0
         EX    R1,MVSBMBN
SBM6     TM    SWITCH,SWTR
         BZ    SBM7
         TM    SWITCH,SWLS
         BZ    SBM7
        TPUT   CARD,L'CARD-8
SBM7     L     R1,DASBIN           ALLOCATE SUBMIT INPUT.
         LR    R2,R1
         L     R3,=A(DYNLGTH)
         LA    R4,*
         XR    R5,R5
         ICM   R5,B'1000',=CL8' '
         MVCL  R2,R4
         USING DYNLIST,R1
         MVC   DDNAME,SBDDN
         MVC   DSNAME,SBDSNM
         MVC   DSMEMBER,SBMEM
         MVC   DSSTATUS(3),=CL3'SHR'
         MVC   DSNDISP(4),=CL4'KEEP'
         MVC   DSADISP(4),=CL4'KEEP'
         DROP  R1
         B     SBM8+L'SBM8
SBM8     L     R1,DASBIN
        $DYNALL (R1),RCODES
         LTR   R15,R15
         BZ    SBM9
         LA    R1,SBDSNM
         L     R8,=A(ACTRQ)
         BASR  R14,R8              REQUEST ACTION.
         B     *+L'*(R15)
         B     SBM8                0 - RETRY (RECOVERED).
         B     *+L'*+4             4 - SKIP (IGNORE).
         B     *+L'*+16            8 - CANCEL.
         LA    R6,SBDDN-(DDTNME-DDTAB)
         BAS   R8,DAMSG            ALLOCATION ERROR.
         DC    CL4'ALL.'
         B     RCMD                CONTINUE PROCESSING.
         LA    R6,SBDDN-(DDTNME-DDTAB)
         BAS   R8,DAMSG            ALLOCATION ERROR.
         DC    CL4'ALL.'
         TM    SWITCH,SWTR
         BZ    TOPERS
         TM    SWITCH,SWSY
         BO    TOPERS
         B     RCMD                CONTINUE PROCESSING.
SBM9     OI    SWITCH,SWSI
         TM    SWITCH,SWTR         LIST MAY BE ALLOWED UNDER TEST.
         BZ    SBM11
         TM    SWITCH,SWSY         BUT NOT IF SYSTEM OPTION.
         BO    SBM11
        TPUT   TSSRQ,L'TSSRQ
         XC    RBRSC,RBRSC
        TGET   RBRSC,L'RBRSC
         LTR   R15,R15
         BZ    SBM10
         CH    R15,=H'12'
         BNE   SBM34
        TCLEARQ INPUT
         B     *+L'*+6
SBM10    LTR   R1,R1
         BZ    SBM34
         OI    RBRSC,C' '
         CLI   RBRSC,C'Y'
         BNE   SBM34
         NI    SWJBSC,255-SWJS
         OI    SWJBSC,SWJL         SET LIST OF SUBMIT JOB.
         B     SBM12
SBM11    NI    SWJBSC,255-SWJS     ALLOCATE INTERNAL READER.
         ZAP   CCJB,=PL1'+0'
         XC    RBRSC,RBRSC
         MVC   TXTDDNL,=XL2'0008'
         MVC   TXTDDN,=CL8' '
         LA    R1,RBBKPTR
        DYNALLOC
         LTR   R15,R15             CHECK FOR ERRORS?
         AIF   ('&SYSPARM' NE 'NOVSAM').O20S1
         BZ    SBM12               OK, ALLOCATED.
         AGO   .O20S2
.O20S1   BZ    *+L'*+26            OK, ALLOCATED.
.O20S2   MVC   RCODES,RBRSC
         ST    R15,RCODES+4
         LA    R6,TXTDDN-(DDTNME-DDTAB)
         BAS   R8,DAMSG            ALLOCATION ERROR.
         DC    CL4'ALL.'
         B     TOPERS
         AIF   ('&SYSPARM' EQ 'NOVSAM').O20S3
         MVC   INRDR+(ACBDDNM-IFGACB)(L'ACBDDNM),TXTDDN
        OPEN   (INRDR)             OPEN JES2 ACB.
         LTR   R15,R15
         BZ    SBM12
         OI    SWJBSC,SWJIO        SET OPEN ACB ERROR.
         MVC   MSEIR+8(15),=CL15'IN.RDR ACB OPEN'
         B     SBM25
.O20S3   ANOP
SBM12   $READ  TEXT,SBDDN
         LTR   R15,R15
         BM    SBM27
         BZ    *+L'*+10
         MVC   MSEIR+8(15),=CL15'SUBMIT DATA-SET'
         B     SBM25
         TM    SWJBSC,SWJL         LIST OF SUBMIT JOB?
         BZ    SBM13               NO.
        TPUT   TEXT,L'TEXT-8
         B     SBM12
SBM13    TM    SWJBSC,SWJS         BYPASS REQUESTED?
         BO    SBM23               YES.
         TM    SWJBSC,SWJB         JOB STATEMENT PROCESSED?
         BO    SBM23               YES.
         AP    CCJB,=PL1'+1'
         LM    R3,R5,SCTXT
         CLC   0(2,R3),=CL2'//'
         BNE   JERR
         LA    R3,2(R3)
         TM    SWJBSC,SWJN         JOB STATEMENT CONTINUATION?
         BZ    SBM14               NO.
         CLI   0(R3),C' '
         BE    SBM15
JERR     SL    R3,SCTXT            RELATIVE POSITION IN CARD.
         LA    R3,1(R3)
         CVD   R3,WORK
         BAS   R14,EDITW
         MVC   MSEJB+31(2),WORK+2
         UNPK  MSEJB+26(2),CCJB    JOB RELATIVE CARD.
         OI    MSEJB+27,C'0'
         MVC   MSEJB+57(8),SBMEM
         LA    R1,MSEJB
         BAS   R8,SBMR1
         B     SBM26
SBM14    CLI   0(R3),C' '          SCAN JOB STATEMENT FOR :
         BE    JERR                     USER=...
         BXLE  R3,R4,*+L'*+4            PASSWORD=...
         B     JERR
         CLI   0(R3),C' '
         BNE   *-12
         BXLE  R3,R4,*+L'*+4
         B     JERR
         CLI   0(R3),C' '
         BE    *-12
         CLC   0(4,R3),=CL4'JOB '
         BNE   JERR
         AIF   ('&SYSPARM' EQ 'NOVSAM').O21S1
         LA    R0,TEXT+3
         LR    R1,R3
         SLR   R1,R0
         LA    R0,7
         CLR   R1,R0
         BNH   *+L'*+2
         LR    R1,R0
         MVC   MSJNN+16(8),INSTXT+2
         MVC   MSJNN+16(*-*),TEXT+2
         EX    R1,*-6              SET JOB-NAME IN MESSAGE.
.O21S1   LA    R3,3(R3)
SBM15    BXLE  R3,R4,*+L'*+4
         B     JERR
         CLI   0(R3),C' '
         BE    SBM15
         TM    SWJBSC,SWJN
         BZ    *+L'*+10
         LR    R0,R3
         S     R0,=A(TEXT+15)
         BP    JERR
         OI    SWJBSC,SWJN
SBM16    CLI   0(R3),C''''
         BE    SBM18
         TM    SWJBSC,SWJA
         BO    SBM17
         CLC   0(2,R3),=CL2', '
         BE    SBM23
         CLI   0(R3),C' '
         BE    SBM20
         CLC   0(9,R3),=CL9'PASSWORD='  PASSWORD CODED?
         BE    SBM22               YES.
         TM    SWJBSC,SWJU
         BO    SBM17
         CLC   0(5,R3),=CL5'USER='
         BE    SBM19
SBM17    BXLE  R3,R4,*+L'*+4
         B     JERR
         CLR   R3,R5
         BL    SBM16
         CLI   0(R3),C','
         BNE   SBM16
         B     SBM23
SBM18    TM    SWJBSC,SWJA
         BO    *+L'*+8
         OI    SWJBSC,SWJA
         B     SBM17
         NI    SWJBSC,255-SWJA
         B     SBM17
SBM19    LA    R3,4(R3)            EXTRACT USER-ID.
         BXLE  R3,R4,*+L'*+4
         B     JERR
         CLI   0(R3),C' '
         BE    SBM23
         CLI   0(R3),C','
         BE    SBM23
         LR    R6,R3
         BXLE  R3,R4,*+L'*+4
         B     *+L'*+16
         CLI   0(R3),C' '
         BE    *+L'*+8
         CLI   0(R3),C','
         BNE   *-20
         LR    R1,R3
         SR    R1,R6
         STC   R1,JUSERL
         MVC   JUSER,=CL8' '
         BCTR  R1,0
         EX    R1,SBMMVUS
         CLR   R3,R5
         BH    *+L'*+24
         CLI   0(R3),C' '
         BE    *+L'*+16
         OI    SWJBSC,SWJU
         B     SBM16
SBM20    TM    SWJBSC,SWJU
         BZ    SBM22
         CP    CCJB,=PL1'+1'       JOB STATEMENT IN ONLY ONE CARD?
         BE    SBM22               YES.
         XC    GPWAR(GPWAL-L'GPWA),GPWAR     GET PASSWORD FROM RACF.
        SETAUTH
        ICHEINTY LOCATE,TYPE='USR',ENTRY=JUSERL,                       X
               ACTIONS=(GPSW),WKAREA=GPWA
         LR    R6,R15
        RESAUTH
         LTR   R6,R6
         BZ    SBM21
         CVD   R6,WORK
         BAS   R14,EDITW
         MVC   MSEPL+32(2),WORK+2
         MVC   MSEPL+58(8),SBMEM
         LA    R1,MSEPL
         BAS   R8,SBMR1
         B     SBM22
SBM21    CLC   GPPL,=XL2'0008'
         BNE   SBM22
         MVI   INSTXTP,C' '        DECODE RACF PASSWORD.
         MVC   INSTXTP+1(10),INSTXTP
        CALL   PSWREST,(GPPW,INSTXTP,LGPPW),VL
         LTR   R15,R15
         BNZ   SBM22
         CLI   INSTXTP,C' '
         BE    SBM22
         LA    R1,INSTXTP+8        ADD JOB PASSWORD KEYWORD.
         CLI   0(R1),C' '
         BNE   *+L'*+4
         BCT   R1,*-8
         MVC   1(2,R1),=CL2'),'
         AIF   ('&SYSPARM' NE 'NOVSAM').O22S1
        $PUNCH INSTXT,,TXTDDN
         AGO   .O22S2
.O22S1  MODCB  RPL=REQPL,AREA=INSTXT
         LTR   R15,R15
         BNZ   SBM24
        PUT    RPL=REQPL
.O22S2   LTR   R15,R15
         BNZ   SBM24
SBM22    OI    SWJBSC,SWJB
         AIF   ('&SYSPARM' NE 'NOVSAM').O22S3
SBM23   $PUNCH TEXT,,TXTDDN
         AGO   .O22S4
.O22S3   ANOP
SBM23   MODCB  RPL=REQPL,AREA=TEXT
         LTR   R15,R15
         BNZ   SBM24
        PUT    RPL=REQPL
.O22S4   LTR   R15,R15
         BZ    SBM12
SBM24    MVC   MSEIR+8(15),=CL15'INTERNAL READER'
         OI    SWJBSC,SWJIE        SET ERROR.
SBM25    CVD   R15,WORK            SET R.C. IN MESSAGE.
         BAS   R14,EDITW
         MVC   MSEIR+35(2),WORK+2
         MVC   MSEIR+61(8),SBMEM
         LA    R1,MSEIR
         BAS   R8,SBMR1
         TM    SWITCH,SWTR
         BZ    SBM26
         TM    SWITCH,SWSY
         BZ    SBM33
SBM26    TM    SWJBSC,SWJIE        INT. RDR ERROR?
         BO    SBM30               YES.
         AIF   ('&SYSPARM' EQ 'NOVSAM').O23S1
         TM    SWJBSC,SWJIO        OPEN ACB ERROR?
         BO    SBM34               YES.
.O23S1   MVI   TEXT,C' '           PURGE JOB.
         MVC   TEXT+1(L'TEXT-1),TEXT
         MVC   TEXT(7),=CL7'/*PURGE'    JES2 PURGE.
         AIF   ('&SYSPARM' NE 'NOVSAM').O23S2
        $PUNCH TEXT,,TXTDDN
         AGO   .O23S3
.O23S2  MODCB  RPL=REQPL,AREA=TEXT
         LTR   R15,R15
         BNZ   SBM30
        PUT    RPL=REQPL
.O23S3   LTR   R15,R15
         BZ    SBM29
         B     SBM30
SBM27    TM    SWJBSC,SWJL         LIST OF SUBMIT JOB?
         BZ    SBM28               NO.
        TPUT   TSEOF,L'TSEOF
         B     SBM33
SBM28    MVI   TEXT,C' '           CLOSE JOB.
         MVC   TEXT+1(L'TEXT-1),TEXT
         MVC   TEXT(2),INSTXT      NULL JCL.
         AIF   ('&SYSPARM' NE 'NOVSAM').O24S1
        $PUNCH TEXT,,TXTDDN
         AGO   .O24S2
.O24S1  MODCB  RPL=REQPL,AREA=TEXT
         LTR   R15,R15
         BNZ   SBM30
        PUT    RPL=REQPL
.O24S2   LTR   R15,R15
         BNZ   SBM30
SBM29    MVC   TEXT(7),=CL7'/*EOF  '    JES2 END-OF-FILE.
         AIF   ('&SYSPARM' NE 'NOVSAM').O24S3
        $PUNCH TEXT,,TXTDDN
SBM30   $UCLOSE TXTDDN
         AGO   .O24S4
.O24S3  MODCB  RPL=REQPL,AREA=TEXT
         LTR   R15,R15
         BNZ   SBM30
        PUT    RPL=REQPL
         LTR   R15,R15
         BNZ   SBM30
        ENDREQ RPL=REQPL           GET JOB NUMBER.
         LTR   R15,R15             RECEIVED BACK?
         BZ    SBM31               YES.
         MVC   MSEIR+8(15),=CL15'IN.RDR - ENDREQ'
         CVD   R15,WORK            SET R.C. IN MESSAGE.
         BAS   R14,EDITW
         MVC   MSEIR+35(2),WORK+2
         MVC   MSEIR+61(8),SBMEM
         LA    R1,MSEIR
         BAS   R8,SBMR1
         B     SBM30
SBM31    MVC   MSJNN+26(8),REQPL+(RPLRBAR-IFGRPL) MOVE JOB NUMBER.
         LA    R1,MSJNN+29
         CLI   0(R1),C'0'
         BNE   *+L'*+12
         MVI   0(R1),C' '
         LA    R1,1(R1)
         B     *-16
         TM    SWITCH,SWTR
         BZ    SBM32
         LH    R0,MSJNN
         SH    R0,=H'4'
        TPUT   MSJNN+4,(0)
         B     SBM30
SBM32   WTO    MF=(E,MSJNN)
SBM30   CLOSE  (INRDR)
.O24S4   ANOP
SBM33   $RCLOSE SBDDN
SBM34    NI    SWITCH,255-SWSI
         L     R1,DASBIN           DE-ALLOCATE SUBMIT INPUT.
         USING DYNLIST,R1
         XC    DSNAME,DSNAME
         DROP  R1
        $DYNALL (R1),RCODES
         LTR   R15,R15
         BZ    RCMD                CONTINUE.
         LA    R6,SBDDN-(DDTNME-DDTAB)
         BAS   R8,DAMSG            DE-ALLOCATION ERROR.
         DC    CL4'FREE'
         TM    SWITCH,SWTR
         BZ    TOPERS
         TM    SWITCH,SWSY
         BO    TOPERS
         B     RCMD                CONTINUE.
         SPACE 1
SBMR1    TM    SWITCH,SWTR         DISPLAY MESSAGE ROUTINE.
         BO    SBMR1A
        WTO    MF=(E,(1))
         BR    R8
SBMR1A   LH    R0,0(R1)
         SH    R0,=H'4'
         LA    R1,4(R1)
        TPUT   (1),(0)
         BR    R8
         SPACE 1
MVSBDSN  MVC   SBDSNM(*-*),0(R6)   << EXECUTED >>
MVSBMBN  MVC   SBMEM(*-*),0(R6)    << EXECUTED >>
SBMMVUS  MVC   JUSER(*-*),0(R6)    << EXECUTED >>
         SPACE 1
        PRINT  NOGEN
MSEIR   WTO    '--- 123456789012345 ERROR (R15=12) - ONLY SUBMIT FAILS X
               : 12345678 ---',ROUTCDE=1,DESC=3,MF=L
MSEJB   WTO    '--- JOB CARD ERROR (C=12,P=12) - ONLY SUBMIT FAILS : 12X
               345678 ---',ROUTCDE=1,DESC=3,MF=L
MSEPL   WTO    '--- RACF-ICHEINTY ERROR (RC=12) - ONLY SUBMIT FAILS : 1X
               2345678 ---',ROUTCDE=1,DESC=3,MF=L
         AIF   ('&SYSPARM' EQ 'NOVSAM').O30S1
MSJNN   WTO    '--- EU-S00I 12345678 (12345678) SUBMITTED.',           X
               ROUTCDE=1,DESC=3,MF=L
.O30S1  PRINT  GEN
         SPACE 1
SCTXT    DC    A(TEXT,1,TEXT+70)
LGPPW    DC    A(L'GPPW)
         SPACE 1
RBBKPTR  DC    0F'0',XL1'80',AL3(RBBK)
RBBK     DC    0F'0',AL1(RBBKEND-RBBK)
         DC    AL1(S99VRBAL)
         DC    AL1(S99NOCNV+S99NOMNT,0)
RBRSC    DC    F'0'                ERROR/INFO REASON CODES.
         DC    A(RBTXP)
         DC    F'0',XL4'0'
RBBKEND  EQU   *
RBTXP    DC    A(TXTUN1)
         DC    A(TXTUN2)
         DC    A(TXTUN3)
         DC    A(TXTUN4)
         DC    A(TXTUN5)
         DC    XL1'80',AL3(TXTUN6)
TXTUN1   DC    AL2(DALSYSOU),AL2(1),AL2(1),CL1'A'
TXTUN2   DC    AL2(DALSPGNM),AL2(1),AL2(6),CL6'INTRDR'
TXTUN3   DC    AL2(DALCLOSE),AL2(0)
TXTUN4   DC    AL2(DALLRECL),AL2(1),AL2(2),AL2(80)
TXTUN5   DC    AL2(DALRECFM),AL2(1),AL2(1),AL1(DCBRECF)
TXTUN6   DC    AL2(DALRTDDN),AL2(1)
TXTDDNL  DC    AL2(*-*)
TXTDDN   DC    CL8' '
         SPACE 1
GPSW    ICHEACTN FIELD=PASSWORD,MF=L
GPWA     DC    A(GPWAL)            WORK AREA LENGTH.
GPWAR    DC    XL20'0'             RESERVED.
         DC    F'0'                ACTION RESPONSE LENGTH.
GPPL     DC    XL2'0'              PASSWORD LENGTH (8).
GPPW     DC    XL8'0'              PASSWORD.
         DC    XL2'0'
GPWAL    EQU   *-GPWA
         SPACE 1
SWJBSC   DC    AL1(SWJS)
SWJB     EQU   X'01'               JOB STATEMENT PROCESSED.
SWJA     EQU   X'02'               START-STOP TEXT QUOTES.
SWJN     EQU   X'04'               JOB STATEMENT CONTINUATION.
SWJU     EQU   X'08'               USER= KEYWORD PROCESSED.
SWJL     EQU   X'10'               LIST OF SUBMIT JOB.
SWJIE    EQU   X'20'               INTERNAL READER ERROR.
SWJS     EQU   X'40'               BYPASS JOB CARD PROCESSING.
         AIF   ('&SYSPARM' EQ 'NOVSAM').O30S2
SWJIO    EQU   X'80'               INTERNAL READER OPEN ACB ERROR.
.O30S2   SPACE 1
         DC    AL1(L'TEXT)
TEXT     DC    CL80' '
         DC    AL1(L'INSTXT+L'INSTXTT+L'INSTXTP)
INSTXT   DC    CL15'// '
INSTXTT  DC    CL10'PASSWORD=('
INSTXTP  DC    CL35'               * SUBMIT SUPPLIED * '
         AIF   ('&SYSPARM' EQ 'NOVSAM').O30S3
         DC    CL20' '
.O30S3   ANOP
SBDDN    DC    CL8'SYSSBM'
SBDSNM   DC    CL44' '
SBMEM    DC    CL8' '
JUSERL   DC    AL1(*-*)
JUSER    DC    CL8' '
CCJB     DC    PL2'+0'
TSSRQ    DC    C'DO YOU WANT THE LIST? (REPLY Y/N)'
TSEOF    DC    C'--- SUBMIT : END OF LIST ---'
         SPACE 1
        LTORG
         AIF   ('&SYSPARM' EQ 'NOVSAM').O31S1
         SPACE 1
        PRINT  NOGEN
INRDR   ACB    MACRF=(ADR,SEQ,OUT),DDNAME=XXXXXXXX
REQPL   RPL    ACB=INRDR,RECLEN=80,AREALEN=80,OPTCD=(ADR,SEQ,SYN,NUP)
        PRINT  GEN
.O31S1   SPACE 1
         DROP  R10
         SPACE 2
*        SET/RESET-COMMON PROCESSING.
*        -----------------------------
         SPACE 1
         DS    0H
         USING CTR,R10             LOCAL BASE REGISTER.
CTR      TM    SWPRSS,SWTO
         BO    RCMD
         OI    SWPRSS,SWTF         SET TRUE.
         BAS   R10,CTF1
         DROP  R10
         USING CFL,R10             LOCAL BASE REGISTER.
CFL      TM    SWPRSS,SWTO
         BO    RCMD
         NI    SWPRSS,255-SWTF     SET FALSE.
CTF1     L     R8,=A(RSRVAR)
         BASR  R14,R8
         CLI   0(R3),C' '          FIND SWITCH NUMBER.
         BNE   CTF2
         BXLE  R3,R4,*-8
         B     SERR
CTF2     CLI   0(R3),C'('          START OF A RANGE?
         BE    CTF3                YES.
         L     R8,=A(CSSC)         ONLY ONE.
         BASR  R14,R8
         CLI   0(R3),C' '          SEPARATOR?
         BNE   SERR                NO.
         BCTR  R1,0
         LR    R6,R1
         LA    R8,1
         B     CTF8
CTF3     BXLE  R3,R4,*+L'*+4
         B     SERR
         CLI   0(R3),C' '          FIND START NUMBER.
         BE    CTF3
         L     R8,=A(CSSC)
         BASR  R14,R8
         BCTR  R1,0
         LR    R6,R1
         CLI   0(R3),C'-'          SEPARATOR?
         BE    CTF5                YES.
         CLI   0(R3),C' '
         BNE   SERR                NO.
CTF4     BXLE  R3,R4,*+L'*+4       FIND FINAL NUMBER.
         B     SERR
         CLI   0(R3),C'-'          SEPARATOR?
         BE    CTF5                YES.
         CLI   0(R3),C' '
         BE    CTF4                YES.
         B     SERR
CTF5     BXLE  R3,R4,*+L'*+4
         B     SERR
         CLI   0(R3),C' '
         BE    CTF5
         L     R8,=A(CSSC)
         BASR  R14,R8
CTF6     CLI   0(R3),C')'          SEPARATOR?
         BE    CTF7                YES.
         CLI   0(R3),C' '
         BNE   SERR                NO.
         BXLE  R3,R4,CTF6
         B     SERR
CTF7     CLR   R1,R6
         BNH   ISNR
         LR    R8,R1
         SR    R8,R6
CTF8     LR    R14,R6
         SRDL  R14,3
         SRL   R15,29
         LA    R1,BIT0
         SRL   R1,0(R15)
         L     R2,=A(COMMSW)
         ALR   R2,R14
         TM    SWPRSS,SWTF
         BZ    *+L'*+8
         EX    R1,CTTRUE           SET SWITCH TRUE.
         B     *+L'*+10
         LA    R0,X'FF'
         XR    R1,R0
         EX    R1,CTFLSE           SET SWITCH FALSE.
         BCT   R8,CTF9
         BXLE  R3,R4,*+L'*+4
         B     PRCSS
         CLI   0(R3),C' '
         BE    *-12
         B     CTF2                GO GET NEXT SWITCH NUMBER(S).
CTF9     AH    R6,=H'1'            STEP TO NEXT SWITCH.
         B     CTF8
CTTRUE   OI    0(R2),*-*           << EXECUTED >>
CTFLSE   NI    0(R2),*-*           << EXECUTED >>
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        IF-COMMON-TRUE/FALSE PROCESSING.
*        --------------------------------
         SPACE 1
         DS    0H
         USING IFCTR,R10           LOCAL BASE REGISTER.
IFCTR    TM    SWPRSS,SWTO
         BO    RCMD
         OI    SWPRSS,SWTF         SET TRUE.
         BAS   R10,IFC1
         DROP  R10
         USING IFCFL,R10           LOCAL BASE REGISTER.
IFCFL    TM    SWPRSS,SWTO
         BO    RCMD
         NI    SWPRSS,255-SWTF     SET FALSE.
IFC1     L     R8,=A(RSRVAR)
         BASR  R14,R8
         CLI   0(R3),C' '          FIND SWITCH NUMBER.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     SERR
         L     R8,=A(CSSC)
         BASR  R14,R8
         CLI   0(R3),C' '          SEPARATOR?
         BNE   SERR                NO.
         LR    R14,R1
         BXLE  R3,R4,*+L'*+4       FIND LABEL.
         B     SERR
         CLI   0(R3),C' '
         BE    *-12
         LR    R6,R3
         LA    R0,L'LABEL
IFC2     BXLE  R3,R4,*+L'*+4
         B     *+L'*+16
         CLI   0(R3),C' '
         BE    *+L'*+8
         BCT   R0,IFC2
         B     SERR
         LA    R1,L'LABEL
         SR    R1,R0
         EX    R1,MVLAB
         STC   R1,LABELL
         BCTR  R14,0
         SRDL  R14,3
         SRL   R15,29
         LA    R1,BIT0
         SRL   R1,0(R15)
         L     R2,=A(COMMSW)
         ALR   R2,R14
         TM    SWPRSS,SWTF         EXECUTE IF.
         BZ    *+L'*+12
         EX    R1,IFCTM            IS SWITCH TRUE?
         BO    SKIPTO              YES.
         B     NOSKIP
         EX    R1,IFCTM            IS SWITCH FALSE?
         BZ    SKIPTO              YES.
         B     NOSKIP
IFCTM    TM    0(R2),*-*           << EXECUTED >>
         SPACE 1
        LTORG
         SPACE 1
         DROP  R10
         SPACE 2
*        LOAD/SAVE-COMMON PROCESSING.
*        ----------------------------
         SPACE 1
         DS    0H
         USING LCM,R10             LOCAL BASE REGISTER.
LCM      TM    SWPRSS,SWTO
         BO    RCMD
         MVI   SWCOMM,SWCOLD       SET LOAD.
         BAS   R10,LSC1
         DROP  R10
         USING SCM,R10             LOCAL BASE REGISTER.
SCM      TM    SWPRSS,SWTO
         BO    RCMD
         MVI   SWCOMM,0            SET SAVE.
LSC1     L     R8,=A(RSRVAR)
         BASR  R14,R8
         CLI   0(R3),C' '          FIND PO-DSNAME.
         BNE   *+L'*+8
         BXLE  R3,R4,*-8
         B     SERR
         LR    R6,R3
         LA    R0,L'CODSNM
         MVI   CODSNM,C' '
         MVC   CODSNM+1(L'CODSNM-1),CODSNM
         BXLE  R3,R4,*+L'*+4
         B     *+L'*+16
         CLI   0(R3),C' '
         BE    *+L'*+8
         BCT   R0,*-16
         B     SERR
         LA    R1,L'CODSNM
         SR    R1,R0
         EX    R1,MVCODSN
         BXLE  R3,R4,*+L'*+4       FIND MEMBER NAME.
         B     SERR
         CLI   0(R3),C' '
         BE    *-12
         LR    R6,R3
         LA    R0,L'COMBRN
         MVC   COMBRN,=CL8' '
         BXLE  R3,R4,*+L'*+4
         B     *+L'*+16
         CLI   0(R3),C' '
         BE    *+L'*+8
         BCT   R0,*-16
         B     SERR
         LA    R1,L'COMBRN
         SR    R1,R0
         EX    R1,MVCOMBN
         TM    SWITCH,SWTR
         BZ    LSC2
         TM    SWITCH,SWLS
         BZ    LSC2
        TPUT   CARD,L'CARD-8
LSC2     L     R6,DACOMM
         BAS   R8,LSCR1
         USING DYNLIST,R6
         MVC   DDNAME,CODDNM
         MVC   DSNAME,CODSNM
         MVC   DSSTATUS(3),=CL3'SHR'
         MVC   DSNDISP(4),=CL4'KEEP'
         MVC   DSADISP(4),=CL4'KEEP'
         XC    DSORG,DSORG
         BAS   R8,LSCR2            ALLOCATE DATA-SET.
         LTR   R15,R15
         BZ    LSC5
LSC3     LA    R6,CODDNM-(DDTNME-DDTAB)
         BAS   R8,DAMSG            ALLOCATION ERROR.
         DC    CL4'ALL.'
LSC4     TM    SWITCH,SWTR
         BZ    TOPERS
         TM    SWITCH,SWSY
         BO    TOPERS
         B     RCMD                CONTINUE PROCESSING.
LSC5     CLC   DSORG(2),=CL2'PO'   PARTITIONED DATA-SET?
         BE    LSC9                YES.
         L     R1,=A(MSCPO)
         MVC   MSCER+4(65),0(R1)
         B     LSC7
LSC6     MVC   MSCER+23(1),COMMDS
LSC7     BAS   R8,LSCR3            DISPLAY MESSAGE.
         XC    DSNAME,DSNAME       DE-ALLOCATE DD-NAME.
         BAS   R8,LSCR2
         LTR   R15,R15
         BZ    LSC4
LSC8     LA    R6,CODDNM-(DDTNME-DDTAB)
         BAS   R8,DAMSG            DE-ALLOCATION ERROR.
         DC    CL4'FREE'
         B     LSC4
LSC9     MVI   COMMDS,C'1'         SAY DATA-SET (1).
        OPEN   (COMMPO,INPUT)      OPEN DATA-SET.
         L     R1,=A(COMMPO)
         USING IHADCB,R1
         TM    DCBOFLGS,DCBOFOPN   OPEN OK?
         BZ    LSC20               NO.
         TM    SWCOMM,SWCORF       RECFM ERROR?
         BO    LSC23               YES.
         TM    SWCOMM,SWCOLR       LRECL ERROR?
         BO    LSC24               YES.
         MVC   COMMBM,COMBRN       SET BLDL PARM LIST.
         XC    COMMBM+L'COMMBM(L'COMMDT),COMMBM+L'COMMBM
        BLDL   (1),COMMBL
         DROP  R1
         LTR   R15,R15             COMPLETION CODE?
         BZ    LSC13               OK.
         CH    R15,=H'4'           MEMBER NOT FOUND?
         BE    LSC10               YES.
         L     R1,=A(MSCSR)
         MVC   MSCER+4(65),0(R1)
         STC   R15,MSCER+38
         SRL   R15,4
         STC   R15,MSCER+37
         NC    MSCER+37(2),=XL3'0F0F0F'
         TR    MSCER+37(2),TRTAB
         STC   R0,MSCER+41
         SRL   R15,4
         STC   R15,MSCER+40
         NC    MSCER+40(2),=XL3'0F0F0F'
         TR    MSCER+40(2),TRTAB
         BAS   R8,LSCR4            CLOSE DATA-SET.
         B     LSC7
LSC10    TM    SWCOMM,SWCOLD       WAS LOAD REQUESTED?
         BZ    LSC14               NO, IT WAS SAVE.
         BAS   R8,LSCR4            CLOSE DATA-SET.
         L     R1,=A(MSCNF)
LSC11    MVC   MSCER+4(65),0(R1)
         MVC   MSCER+20(L'COMBRN),COMBRN
         BAS   R8,LSCR3            DISPLAY MESSAGE.
LSC12    XC    DSNAME,DSNAME       DE-ALLOCATE DD-NAME.
         BAS   R8,LSCR2
         LTR   R15,R15
         BZ    RCMD                CONTINUE PROCESSING.
         B     LSC4
LSC13    TM    SWCOMM,SWCOLD       WAS LOAD REQUESTED?
         BO    LSC14               YES.
         CLC   COMMDT+20(4),=AL2(1,1)   NO, SAVE, MY ISPF SIZE-INIT?
         BNE   *+L'*+8             NO.
         OI    SWCOMM,SWCOIN       YES, UPDATE IN PLACE.
         B     LSC14
         OI    SWCOMM,SWCOFS       FORCE RE-WRITE.
LSC14    BAS   R8,LSCR4            CLOSE DATA-SET.
         XC    DSNAME,DSNAME       DE-ALLOCATE DD-NAME.
         BAS   R8,LSCR2
         LTR   R15,R15
         BNZ   LSC8
         BAS   R8,LSCR1
         MVC   DDNAME,CODDNM
         MVC   DSNAME,CODSNM
         TM    SWCOMM,SWCOLD+SWCOIN     FIRST SAVE OR RE-WRITE?
         BZ    *+L'*+6             YES, WILL BE DONE BY STOW.
         MVC   DSMEMBER,COMBRN     SET MEMBER NAME.
         MVC   DSNDISP(4),=CL4'KEEP'
         MVC   DSADISP(4),=CL4'KEEP'
         MVI   COMMDS,C'2'         SAY DATA-SET (2).
         NI    SWCOMM,SWCOLD+SWCOIN+SWCOFS   RESET ALL UNLESS ...
         TM    SWCOMM,SWCOLD       WAS LOAD REQUESTED?
         BZ    *+L'*+10            NO, SAVE
         MVC   DSSTATUS(3),=CL3'SHR'    YES, SET TO SHR.
         B     LSC15
         TM    SWCOMM,SWCOIN       UPDATE IN PLACE?
         BNZ   *+L'*+10            YES.
         MVC   DSSTATUS(3),=CL3'MOD'    NO, CHANGE TO MOD.
         B     LSC15
         MVC   DSSTATUS(3),=CL3'OLD'    CHANGE TO OLD.
LSC15    BAS   R8,LSCR2            ALLOCATE DATA-SET.
         LTR   R15,R15
         BZ    LSC16
         TM    SWCOMM,SWCOLD       WAS LOAD REQUESTED?
         BO    LSC3                YES.
         LA    R1,CODSNM
         L     R8,=A(ACTRQ)
         BASR  R14,R8              REQUEST ACTION.
         B     *+L'*(R15)
         B     LSC15               0 - RETRY (RECOVERED).
         B     *+L'*+4             4 - SKIP (IGNORE).
         B     LSC3                8 - CANCEL.
         LA    R6,CODDNM-(DDTNME-DDTAB)
         BAS   R8,DAMSG            ALLOCATION ERROR.
         DC    CL4'ALL.'
         B     RCMD                CONTINUE PROCESSING.
LSC16    TM    SWCOMM,SWCOLD       WAS LOAD REQUESTED?
         BO    LSC18               YES.
         TM    SWCOMM,SWCOIN       UPDATE IN PLACE?
         BO    LSC17               YES.
        OPEN   (COMMPO,OUTPUT)     OPEN DATA-SET.
         L     R5,=A(COMMPO)
         B     LSC19+L'LSC19
LSC17   OPEN   (COMMPS,UPDAT)      OPEN DATA-SET.
         B     LSC19
LSC18   OPEN   (COMMPS,INPUT)      OPEN DATA-SET.
LSC19    L     R5,=A(COMMPS)
         USING IHADCB,R5
         TM    DCBOFLGS,DCBOFOPN   OPEN OK?
         BO    LSC25               YES.
LSC20    ICM   R2,B'1111',=CL4'OPEN'
         TM    SWCOMM,SWCOAB       ABEND HAS OCCURED?
         BO    LSC22               YES.
LSC21    L     R1,=A(MSCOE)
         MVC   MSCER+4(65),0(R1)
         STCM  R2,B'1111',MSCER+28
         B     LSC6
LSC22    BAS   R8,LSCR5
         B     LSC6
LSC23    L     R1,=A(MSCRF)
         B     LSC24+L'LSC24
LSC24    L     R1,=A(MSCLR)
         MVC   MSCER+4(65),0(R1)
         BAS   R8,LSCR4            CLOSE DATA-SET.
         B     LSC6
LSC25    TM    SWCOMM,SWCORF       RECFM ERROR?
         BO    LSC23               YES.
         TM    SWCOMM,SWCOLR       LRECL ERROR?
         BO    LSC24               YES.
         LH    R1,LSCBLK           GET READ/WRITE AREA.
         LA    R0,7(R1)
         SRL   R0,3
         SLL   R0,3
         ST    R0,COMMBUF
        GETMAIN R,LV=(0)
         ST    R1,COMMBUF+4
         LR    R2,R1
         TM    SWCOMM,SWCOLD       WAS LOAD REQUESTED?
         BO    *+L'*+8             YES.
         TM    SWCOMM,SWCOIN       NO, SAVE, BUT UPDATE IN PLACE?
         BZ    LSC26               NO.
         MVC   DCBBLKSI(L'DCBBLKSI),LSCLRL
        READ   COMMDECB,SF,(R5),(R2),80,MF=E
        CHECK  COMMDECB
         TM    SWCOMM,SWCOER+SWCOAB     ERROR OR ABEND HAS OCCURED?
         BNZ   LSCEND              YES.
         CLC   51(6,R2),=CL6'COMMSW'
         BE    *+L'*+8
         OI    SWCOMM,SWCONV       SAY INVALID ERROR, IGNORE.
         B     LSCEND
         TM    SWCOMM,SWCOIN       UPDATE IN PLACE?
         BO    LSC26               YES.
         L     R1,=A(COMMSW)       NO, LOAD COMMON-SWITCHES.
         MVC   0(L'COMMSW,R1),0(R2)
         B     LSCEND
LSC26    L     R1,=A(COMMSW)       SAVE COMMON-SWITCHES.
         MVC   0(L'COMMSW,R2),0(R1)
         MVI   50(R2),C' '
         MVC   51(6,R2),=CL6'COMMSW'
         MVI   57(R2),C' '
         TM    SWITCH,SWTR
         BO    *+L'*+6
         L     R8,=A(UPDT)
         BASR  R14,R8
         MVC   58(L'FTIME,R2),FTIME
         MVI   58+L'FTIME(R2),C' '
         MVC   59+L'FTIME(L'SDATE,R2),SDATE
         MVI   59+L'FTIME+L'SDATE(R2),C' '
         MVC   72(8,R2),=CL8'00010000'
         MVC   DCBBLKSI(L'DCBBLKSI),LSCLRL
        WRITE  COMMDECB,SF,(R5),(R2),80,MF=E
        CHECK  COMMDECB
         TM    SWCOMM,SWCOIN       UPDATE IN PLACE?
         BO    LSCEND              YES.
         MVC   COMMSTL(L'COMBRN),COMBRN NO, ADD OR REPLACE MEMBER NAME.
         PACK  COMMSTL1,JDATE
         MVC   COMMSTL2,COMMSTL1
         PACK  WORK(L'COMMSTL3+1),FTIME(L'THRS+L'TMNS+1)
         MVC   COMMSTL3(L'COMMSTL3),WORK
         L     R1,ATIOT            GET TIOT ADDRESS.
         USING TIODSECT,R1
         MVC   COMMSTL4,TIOCNJOB   SET TASK NAME.
         DROP  R1
         TM    SWCOMM,SWCOFS       FORCE RE-WRITE?
         BO    LSC27               YES.
        STOW   (R5),COMMSTL,A      NO, ADD.
         B     LSC28
LSC27   STOW   (R5),COMMSTL,R      REPLACE.
LSC28    LTR   R15,R15
         BZ    LSCEND
         L     R1,=A(MSCST)
         MVC   MSCER+4(65),0(R1)
         MVC   MSCER+20(L'COMBRN),COMBRN
         STC   R15,MSCER+43
         SRL   R15,4
         STC   R15,MSCER+42
         NC    MSCER+42(2),=XL3'0F0F0F'
         TR    MSCER+42(2),TRTAB
         STC   R0,MSCER+46
         SRL   R0,4
         STC   R0,MSCER+45
         NC    MSCER+45(2),=XL3'0F0F0F'
         TR    MSCER+45(2),TRTAB
         BAS   R8,LSCR3            DISPLAY MESSAGE.
         B     LSCEND
         DROP  R5
         SPACE 1
        CNOP   0,4
*        DCB EXIT ROUTINE          R2 -> R13 = AS OPEN ISSUED.
         USING IHADCB,R1
LSCEXT   MVC   LSCBLK,DCBBLKSI     GET RECORD SIZE.
         TM    DCBRECFM,DCBRECF    FIXED RECORDS?
         BZ    *+L'*+8
         TM    DCBRECFM,DCBRECV
         BZ    *+L'*+6
         OI    SWCOMM,SWCORF       SAY RECFM ERROR.
         BR    R14                 RETURN.
         CLC   DCBLRECL,LSCLRL     RECORD LENGTH?
         BER   R14                 OK, RETURN.
         OI    SWCOMM,SWCOLR       SAY LRECL ERROR.
         BR    R14                 RETURN.
         DROP  R1
LSCLRL   DC    H'80'               REQUESTED LRECL.
LSCBLK   DC    H'0'                DATA-SET BLOCK-SIZE.
LSCXLS   DC    0F'0',XL1'05',AL3(LSCEXT)
         DC    XL1'91',AL3(LSCXAB)
        CNOP   0,4
*        SYNAD EXIT ROUTINE        R2 -> R13 = AS READ/WRITE ISSUED.
LSCERR   STM   R13,R1,COMMSV
        SYNADAF ACSMETH=BSAM
         MVC   COMMWTX(L'COMMWTX),50(R1)     GET MESSAGE TEXT.
        SYNADRLS
         OI    SWCOMM,SWCOER       SAY I/O ERROR OCCURED.
         LM    R13,R1,COMMSV
         BR    R14                 RETURN.
        CNOP   0,4
*        DCB ABEND ROUTINE         R2 -> R13 = AS OPEN ... ISSUED.
LSCXAB   TM    3(R1),B'00000100'   OPTION MASK = OK TO IGNORE?
         BO    *+L'*+6             YES.
         NI    3(R1),B'11110001'   NO, IMMMEDIATE ABEND.
         BR    R14                 RETURN.
         MVC   COCCRC(3),0(R1)     SAVE ABEND CODES.
         OI    SWCOMM,SWCOAB       SAY ABEND.
         NI    3(R1),B'11110101'   OK TO IGNORE ONLY.
         BR    R14                 RETURN.
         SPACE 1
        CNOP   0,4
*        EODAD EXIT
         USING IHADCB,R5
LSCEND   MVC   DCBBLKSI(L'DCBBLKSI),LSCBLK
         DROP  R5
         BAS   R8,LSCR4            CLOSE DATA-SET.
         LM    R0,R1,COMMBUF       FREE READ/WRITE AREA.
         LTR   R1,R1
         BNP   LSCE1
        FREEMAIN R,A=(1),LV=(0)
         XC    COMMBUF(2*4),COMMBUF
LSCE1    TM    SWCOMM,SWCOER+SWCOAB+SWCONV   ANY ERROR HAS OCCURED?
         BZ    LSC12               NO.
         TM    SWCOMM,SWCONV       YES, WAS INVALID ERROR?
         BO    LSCE3               YES.
         TM    SWCOMM,SWCOLD       NO, WAS LOAD REQUESTED?
         BZ    *+L'*+8             NO, SAVE.
         ICM   R2,B'1111',=CL4'LOAD'
         B     *+L'*+4
         ICM   R2,B'1111',=CL4'SAVE'
         TM    SWCOMM,SWCOAB       ABEND HAS OCCURED?
         BO    LSC22               YES.
         TM    SWITCH,SWTR         DISPLAY SYNAD MESSAGE.
         BO    LSCE2
         MVC   COMMWER+2(2),MSCER+2
         MVC   COMMWDR(L'COMMWDR),MSCER+69
        WTO    MF=(E,COMMWER)
         B     LSC21
LSCE2   TPUT   COMMWTX,L'COMMWTX
         B     LSC21
LSCE3    L     R1,=A(MSCNV)
         B     LSC11
         SPACE 1
LSCR1    LR    R2,R6               DYNAMIC ALLOCATION AREA ROUTINE.
         L     R3,=A(DYNLGTH)
         LA    R4,*
         XR    R5,R5
         ICM   R5,B'1000',=CL8' '
         MVCL  R2,R4
         BR    R8
LSCR2   $DYNALL (R6),RCODES        DYNAMIC ALLOCATION ROUTINE.
         BR    R8
LSCR3    TM    SWITCH,SWTR         DISPLAY MESSAGE ROUTINE.
         BO    LSCR3A
        WTO    MF=(E,MSCER)
         BR    R8
LSCR3A   LH    R0,MSCER
         SH    R0,=H'4'
        TPUT   MSCER+4,(0)
         BR    R8
LSCR4    CLI   COMMDS,C'1'         CLOSE DATA-SET ROUTINE.
         BNE   LSCR4A
        CLOSE  (COMMPO)            DATA-SET (1).
         BR    R8
LSCR4A  CLOSE  ((R5))              DATA-SET (2).
         BR    R8
LSCR5    L     R1,=A(MSCAB)        SET ABEND MESSAGE ROUTINE.
         MVC   MSCER+4(65),0(R1)
         STCM  R2,B'1111',MSCER+28
         UNPK  MSCER+41(3),COCCRC(2)
         NC    MSCER+41(3),=XL3'0F0F0F'
         TR    MSCER+41(3),TRTAB
         UNPK  MSCER+45(3),COCCRC+2(2)
         NC    MSCER+45(2),=XL3'0F0F0F'
         TR    MSCER+45(2),TRTAB
         MVI   MSCER+47,C'.'
         BR    R8
         DROP  R6
         SPACE 1
MVCODSN  MVC   CODSNM(*-*),0(R6)   << EXECUTED >>
MVCOMBN  MVC   COMBRN(*-*),0(R6)   << EXECUTED >>
         SPACE 1
COMMBUF  DC    A(0,*-*)
COMMSV   DC    5F'0'               SYNAD SAVE AREA (R13-R1).
COCCRC   DC    F'0'                SAVE ABEND CODES.
CODDNM   DC    CL8'SYSCOMM'
CODSNM   DC    CL44' '
COMBRN   DC    CL8' '
COMMWER  DC    0F'0',AL2(L'COMMWER+L'COMMWTX),H'0'
COMMWTX  DC    CL78' '
COMMWDR  DC    XL4'0'
COMMDS   DC    CL1'0'
SWCOMM   DC    XL1'0'
SWCOLD   EQU   X'01'               LOAD-COMMON FUNCTION.
SWCOIN   EQU   X'02'               UPDATE IN PLACE.
SWCOFS   EQU   X'04'               FORCE SAVE RE-WRITE.
SWCONV   EQU   X'08'               INVALID ERROR.
SWCORF   EQU   X'10'               RECFM ERROR.
SWCOLR   EQU   X'20'               LRECL ERROR.
SWCOER   EQU   X'40'               I/O ERROR (SYNAD ENTERED).
SWCOAB   EQU   X'80'               DCB ABEND ENTERED.
         SPACE 1
        LTORG
         SPACE 2
*        COMMON CONTROL BLOCKS.
*        ----------------------
         SPACE 1
MSCER   WTO    '1234567890123456789012345678901234567890123456789012345X
               6789012345',ROUTCDE=1,DESC=3,MF=L
         SPACE 1
COMMBL   DC    0F'0',AL2(1,L'COMMBM+L'COMMDT)
COMMBM   DC    CL8' '
COMMDT   DC    XL72'0'
         SPACE 1
COMMSTL  DC    0F'0',CL8' '        STOW LIST, MEMBER NAME.
         DC    XL3'0',XL1'0F'      TTR, C-BYTE.
         DC    AL1(1,0),H'0'       ISPF VERSION.
COMMSTL1 DC    PL4'0'              ISPF DATE CREATED.
COMMSTL2 DC    PL4'0'              ISPF DATE LAST MOD.
COMMSTL3 DC    H'0'                ISPF TIME LAST MOD.
         DC    AL2(1,1,0)          ISPF SIZE, INIT, MOD.
COMMSTL4 DC    CL8' ',CL2' '       ISPF ID.
         SPACE 1
        READ   COMMDECB,SF,,,80,MF=L
         SPACE 1
         DROP  R10
         SPACE 2
        PRINT  NOGEN
COMMPO  DCB    DDNAME=SYSCOMM,DSORG=PO,MACRF=(R,W),EXLST=LSCXLS,       X
               SYNAD=LSCERR
COMMPS  DCB    DDNAME=SYSCOMM,DSORG=PS,MACRF=(R,W),EXLST=LSCXLS,       X
               SYNAD=LSCERR,EODAD=LSCEND
        PRINT  GEN
         SPACE 1
*        COMMON MESSAGES TEXTS.
*        ----------------------
         SPACE 1
MSCPO    DC    CL65'COMMON : NOT A PARTITIONED DATA-SET.'
MSCSR    DC    CL65'COMMON : DATA-SET SEARCH ERROR : 01/01.'
MSCNF    DC    CL65'COMMON : MEMBER 01234567 NOT FOUND / IGNORED.'
MSCOE    DC    CL65'COMMON : DATA-SET (0) - 0123 ERROR.'
MSCRF    DC    CL65'COMMON : DATA-SET (0) - DCBRECFM INVALID.'
MSCLR    DC    CL65'COMMON : DATA-SET (0) - DCBLRECL NOT 80.'
MSCAB    DC    CL65'COMMON : DATA-SET (0) - 0123 ABEND : 012/01.'
MSCNV    DC    CL65'COMMON : MEMBER 01234567 INVALID / IGNORED.'
MSCST    DC    CL65'COMMON : MEMBER 01234567 STOW ERROR : 01/01.'
         EJECT
         DROP  R11,R12             KILL BASE REGISTERS ADDRESSABILITY.
         SPACE 2
*        DUMMY DCB (TO GET FIRST PO-DSNAME).
*        -----------------------------------
         SPACE 1
        PRINT  NOGEN
DUMMY   DCB    DSORG=PO,DEVD=DA,MACRF=R,EXLST=JOBFILE,DDNAME=XXXXXXNN
        PRINT  GEN
JOBFILE  DC    0F'0',XL1'87',AL3(JFILE)
JFILE    DC    0F'0',XL176'0'
         SPACE 2
*        COMMON-SWITCHES AREA.
*        ---------------------
         SPACE 1
COMMSW   DC    XL50'0'
         EJECT
*        SYNTAX KEYWORDS TABLE.
*        ----------------------
*
*        FORMAT :     DC AL1(...L'KEYWORD-1...)
*                     DC C'...KEYWORD...'
*                     DC AL4(...KEYWORD PROCESS ADDRESS...)
         SPACE 1
         PRINT NOGEN
CDTBL    $KW   PAUSE,PAUSE,@P
         $KW   MESSAGE,MESSAGE,@M
         $KW   NULL,NULL,(:,N)
         $KW   GOTO,GOTO,GO
         $KW   IFRP,IF-REPLY,IF-R
         $KW   IFRB,IF-REPLY-BIN,IF-B
         $KW   IFRC,IF-REPLY-CHAR,IF-C
         $KW   IFRH,IF-REPLY-HEX,IF-H
         $KW   VERB,VER-BIN,V-B
         $KW   VERH,VER-HEX,V-H
         $KW   SETR,SET-REPLY
         $KW   SETR,SET-VAR,SET
         $KW   IF,IF
         $KW   IFV,IF-VAR,IF-V
         $KW   EXECUTE,EXECUTE,@E
         $KW   SBMT,SUBMIT,SUB
         $KW   LOGICAL,LOGICAL,@L
         $KW   TRUE,TRUE,@T
         $KW   FALSE,FALSE,@F
         $KW   IFTRUE,IF-TRUE,IF-T
         $KW   IFFALSE,IF-FALSE,IF-F
         $KW   GDTE,GDATE,@G
         $KW   LCM,LOAD-COMMON,@CL
         $KW   SCM,SAVE-COMMON,@CS
         $KW   CTR,SET-COMMON,@CT
         $KW   CFL,RESET-COMMON,@CF
         $KW   IFCTR,IF-COMMON-TRUE,@CIT
         $KW   IFCFL,IF-COMMON-FALSE,@CIF
         $KW   TW,T-WAIT,@W
         $KW   IFID,IF-REPLY-ID,IF-ID
         PRINT GEN
         SPACE 1
         DC    AL1(EOT)            END OF TABLE INDICATOR.
         EJECT
*        OPERATORS KEYWORDS TABLE.
*        -------------------------
*
*        FORMAT :     DC CL2'...KEYWORD...',CL2'...ALIAS...'
*                     BRANCH REGISTER OPERATION TO GENERATE THE
*                        REQUESTED CONDITION TEST MASK.
         SPACE 1
         NOPR  R0                  FORCE HALFWORD ALIGNMENT.
OPTBL    DS    0CL6
         DC    CL2'EQ',CL2'= '
         BER   R0
         DC    CL2'NE',CL2'/ '
         BNER  R0
         DC    CL2'LT',CL2'< '
         BLR   R0
         DC    CL2'GT',CL2'> '
         BHR   R0
         DC    CL2'LE',CL2'<='
         BNHR  R0
         DC    CL2'GE',CL2'>='
         BNLR  R0
         SPACE 1
         DC    AL1(EOT)            END OF TABLE INDICATOR.
         SPACE 2
*        DAY-MONTH NAMES TABLES.
*        -----------------------
         SPACE 1
TDAY     DC    CL3'SUN',C'MONTUEWEDTHUFRISAT',XL1'0'
TMONTH   DC    CL3'JAN',C'FEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC',XL1'0'
         EJECT
*        FIXED VARIABLES NAMES TABLE.
*        ----------------------------
*
*        FORMAT :     DC CL8'...'       +0   NAME (MAX. 7 CHAR.)
*                     DC AL1(...)       +8   NAME LENGTH
*                     DC CL1'...'       +9   CLEAR BYTE
*                     DC AL1(...)       +10  FIELD LENGTH
*                     DC AL3(...)       +11  FIELD ADDRESS
         SPACE 1
FVTBL    DS    0CL14
         DC    CL8'SID',AL1(3),XL1'0',AL1(L'SID),AL3(SID)
         DC    CL8'CPU',AL1(3),XL1'0',AL1(L'CPU),AL3(CPU)
         DC    CL8'RPID',AL1(4),XL1'0',AL1(L'RPID),AL3(RPID)
         DC    CL8'SDATE',AL1(5),CL1' ',AL1(L'SDATE),AL3(SDATE)
         DC    CL8'JDATE',AL1(5),CL1' ',AL1(L'JDATE),AL3(JDATE)
         DC    CL8'DAY',AL1(3),CL1' ',AL1(L'DAY),AL3(DAY)
         DC    CL8'MONTH',AL1(5),CL1' ',AL1(L'MONTH),AL3(MONTH)
         DC    CL8'TIME',AL1(4),CL1' ',AL1(L'THRS+L'TMNS),AL3(FTIME)
         DC    CL8'HOURS',AL1(5),CL1' ',AL1(L'THRS),AL3(THRS)
         DC    CL8'MINS',AL1(4),CL1' ',AL1(L'TMNS),AL3(TMNS)
         DC    CL8'YEAR',AL1(4),CL1' ',AL1(2),AL3(SDATE)
         DC    CL8'SMONTH',AL1(6),CL1' ',AL1(2),AL3(SDATE+2)
         DC    CL8'SDAY',AL1(4),CL1' ',AL1(2),AL3(SDATE+4)
         DC    CL8'JDAY',AL1(4),CL1' ',AL1(3),AL3(JDATE+2)
         DC    AL1(EOT)            END OF TABLE INDICATOR.
         EJECT
        PRINT  NOGEN
PARMLST IKJPARM
PODSN   IKJPOSIT DSNAME,PROMPT='PO-DSNAME'
POMEM   IKJIDENT 'MEMBER-NAME',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM
OPLIST  IKJKEYWD
        IKJNAME  'SYSTEM',ALIAS=('S')
        IKJNAME  'TEST',ALIAS=('T')
        IKJENDP
         SPACE 2
*        DSECT DEFINITIONS.
*        ------------------
         SPACE 1
CIBDSECT DSECT
CIB     IEZCIB
        IKJPSCB
        IKJCPPL
        IKJEBECA
        CVT    DSECT=YES,LIST=YES
        IEESMCA
        IEZMGCR
TIODSECT DSECT
        IEFTIOT1
        IEFZB4D0
        IEFZB4D2
        DCBD   DSORG=PO,DEVD=DA
         AIF   ('&SYSPARM' EQ 'NOVSAM').O90S1
        IFGACB
        IFGRPL
.O90S1   SPACE 2
         END
