V200     TITLE 'VSM00200 - SQA/CSA SUBPOOL MONITOR.'
         PRINT OFF
         COPY  VSMMAC
         PRINT ON
         SPACE 1
***********************************************************************
*                                                                     *
*    MODULE :           VSM00200 (MVS/XA)                             *
*                       VERSION : 1.0                                 *
*                       DATE : 12 NOV 1986                            *
*                       NAME : SQA/CSA SUBPOOL MONITOR                *
*                       ATTRIBUTES : REUS                             *
*                                                                     *
*    AUTHOR :           MOINIL P.A. - COMPUTING CENTRE                *
*                       J.R.C. - ISPRA ESTABLISHMENT                  *
*                       21020 ISPRA (VA), ITALY                       *
*                                                                     *
*    FUNCTION :         THIS MODULE WILL SHOW SUBPOOL UTILIZATION     *
*                       IN CSA AND IN SQA. IT SHOWS THE AMOUNT OF     *
*                       FREE OR UNALLOCATED SPACE IN EACH SUBPOOL,    *
*                       THE LARGEST CONTIGUOUS FREE SPACE AND THE     *
*                       PERCENTAGE FREE OR UNUSED.                    *
*                                                                     *
*    REGS AT INPUT :    R1   - INTER MODULE LINKAGE                   *
*                       R14  - RETURN ADDRESS                         *
*                       R15  - EPA                                    *
*                                                                     *
*    REGS USAGE :       R0   - WORK REGISTER                          *
*                       R1   - POINTER TO INTER MODULE LINKAGE        *
*                       R2-R5 - WORK REGISTERS                        *
*                       R6   - WORK AREA POINTER (VSMLIST)            *
*                       R7   - WORK AREA SIZE (VSMLIST)               *
*                       R8   - WORK REGISTER                          *
*                       R9   - INTERNAL LINKAGE REGISTER              *
*                       R10  - LINKAGE AREA POINTER                   *
*                       R11  - BASE REGISTER                          *
*                       R12  - 2ND BASE REGISTER (RESERVED)           *
*                       R13  - SAVE AREA POINTER                      *
*                       R14  - LINKAGE REGISTER                       *
*                       R15  - ADDRESS OF CALLED MODULES              *
*                                                                     *
*    REGS AT EXIT :     R14  - RETURN ADDRESS                         *
*                                                                     *
*    LABELS :           SOME OF THE FIELD USAGE IN THIS MODULE CAN    *
*                       BE DETERMINED BY THE FIRST CHARACTER OF THE   *
*                       FIELD. THE KEYS ARE :                         *
*                            @ - THE FIELD IS IN THE INTER MODULE     *
*                                LINKAGE AREA                         *
*                            # - FIELD IS PART OF THE OUTPUT SCREEN   *
*                            $ - DSECT                                *
*                                                                     *
***********************************************************************
         EJECT
VSM00200 START 0
         SPACE 1
        $DEFREG ,
***********************************************************************
*        STANDARD OS LINKAGE                                          *
***********************************************************************
         SPACE 1
        $XENT  BASE=R11            SAVE CALLER'S REGS
         EJECT
***********************************************************************
*        INITIALIZATION                                               *
***********************************************************************
         SPACE 1
         MVI   SW16M,0             RESET
         LR    R10,R1              LOAD INTER MOD LNKG ADDR R10
         USING $LNKSECT,R10        DSECT ADDRESSABILITY
P000100  MVI   DBLEWORD,0          CLEAR WORK AREA WITH ZEROS
         MVC   DBLEWORD+1(CLRL-1),DBLEWORD
         L     R1,=A(WCELLS)       RESET SP COLLECT DATA AREAS
         XC    0(WSPL,R1),0(R1)
         TM    SW16M,UP16M
         BO    *+L'*+8
         MVI   #S16M,C'<'
         B     *+L'*+4
         MVI   #S16M,C'>'
         MVI   #SQATHRS,C' '
         MVC   #SQATHRS+1(L'#SQATHRS-1),#SQATHRS
         MVC   #SQAOVFA(L'#SQAOVFA),#SQATHRS
         MVC   #SQAOVFX(L'#SQAOVFX),#SQATHRS
         MVC   #SQAOVFB(L'#SQAOVFB),#SQATHRS
         MVC   #ALTM01(L'#ALTM01),#SQATHRS
         MVC   #ALTM02(L'#ALTM02),#SQATHRS
         LM    R6,R7,@WAADD        SET WORK AREA POINTER/SIZE
         L     R4,@GDA             GDA POINTER
         USING GDA,R4              GDA DSECT ADDRESSABILITY
         TM    GDAFLGS,GDALOW1+GDALOW2  ANY PROBLEMS ?
         BZ    P000120             NO
         TM    GDAFLGS,GDALOW1     THRESHOLD 1 ?
         BZ    P000110             IF NO, MUST BE THRESHOLD 2
         MVC   #SQATHRS,MSG1       MOVE THRESHOLD 1 MSG TO OUTPUT SCR
P000110  MVC   #SQATHRS,MSG2       MOVE THRESHOLD 2 MSG TO OUTPUT SCR
P000120  MVC   SQASIZE,GDASQASZ    SQA AREA SIZE
         MVC   SQAESIZE,GDAESQAS   SQA AREA EXTENDED SIZE
         MVC   CSASIZE,GDACSASZ    CSA AREA SIZE
         MVC   CSAESIZE,GDAECSAS   CSA AREA EXTENDED SIZE
         DROP  R4                  DROP GDA ADDRESSABILITY
         EJECT
***********************************************************************
*        SQA - GET VSM DATA                                           *
***********************************************************************
         SPACE 1
         MVC   #ALTM03,=CL3'SQA'
         LR    R2,R6               CLEAR
         LR    R3,R7                 VSMLIST
         LR    R4,R6                   WORK AREA
         XR    R5,R5                     WITH
         MVCL  R2,R4                       ZEROS
        VSMLIST SP=SQA,SPACE=FREE,WKAREA=((R6),(R7))
         LTR   R15,R15             SUCCESSFULLY EXECUTED ?
         BNZ   ERRG                NO, ERROR
         BAS   R9,WKSNAP           TAKE W.A. SNAP IF NEEDED
         EJECT
***********************************************************************
*        SQA - COLLECT DATA FROM VSM                                  *
***********************************************************************
         SPACE 1
         L     R3,4(R6)            GET ADDRESS OF DATA
         L     R5,8(R6)            GET LENGTH OF DATA
         AR    R5,R3               END OF DATA+1 ADDRESS
         L     R8,0(R3)            GET NUMBER OF SUBPOOLS
         LTR   R8,R8               NONE ?
         BNP   ERRN                YES
         LA    R3,4(R3)            BUMP CURRENT POINTER,
P000200  CLR   R3,R5                 TEST IF OVERFLOW,
         BNL   ERR0                    AND BRANCH IF YES, ERROR
         BAS   R9,SDLOOP           DO A SUBPOOL COMPUTATIONS
         BCT   R8,P000200          LOOP IF MORE SUBPOOLS
         CLR   R3,R5               DATA EXHAUSTED ?
         BNE   ERRD                BRANCH IF NOT, ERROR
         EJECT
***********************************************************************
*        CSA - GET VSM DATA                                           *
***********************************************************************
         SPACE 1
         MVC   #ALTM03,=CL3'CSA'
         OI    SWPRC,PRCCSA
         LR    R2,R6               CLEAR
         LR    R3,R7                 VSMLIST
         LR    R4,R6                   WORK AREA
         XR    R5,R5                     WITH
         MVCL  R2,R4                       ZEROS
        VSMLIST SP=CSA,SPACE=FREE,WKAREA=((R6),(R7))
         LTR   R15,R15             SUCCESSFULLY EXECUTED ?
         BNZ   ERRG                NO, ERROR
         BAS   R9,WKSNAP           TAKE W.A. SNAP IF NEEDED
         EJECT
***********************************************************************
*        CSA - COLLECT DATA FROM VSM                                  *
***********************************************************************
         SPACE 1
         L     R3,4(R6)            GET ADDRESS OF DATA
         L     R5,8(R6)            GET LENGTH OF DATA
         AR    R5,R3               END OF DATA+1 ADDRESS
         L     R8,0(R3)            GET NUMBER OF SUBPOOLS
         LTR   R8,R8               NONE ?
         BNP   ERRN                YES
         LA    R3,4(R3)            BUMP CURRENT POINTER,
P000300  CLR   R3,R5                 TEST IF OVERFLOW,
         BNL   ERR0                    AND BRANCH IF YES, ERROR
         BAS   R9,SDLOOP           DO A SUBPOOL COMPUTATIONS
         BCT   R8,P000300          LOOP IF MORE SUBPOOLS
         CLR   R3,R5               DATA EXHAUSTED ?
         BNE   ERRD                BRANCH IF NOT, ERROR
         EJECT
***********************************************************************
*        SQA - DO THE CALCULATIONS AND FORMAT DATA TO BE OUTPUT       *
***********************************************************************
         SPACE 1
         XC    TOTSIZE(TOTL),TOTSIZE    RESET
         L     R5,=A(SPSQA)        START OF SQA SUBPOOLS
         LA    R8,SPSQAN           NUMBER OF SQA SUBPOOLS
P000400  BAS   R9,SPEDIT           FORMAT SUBPOOL OUTPUT DATA
         BAS   R9,SPTOTL           COMPUTE SQA SUBPOOLS TOTAL
         LA    R5,L'SPTAB(R5)      POINT TO NEXT
         BCT   R8,P000400          LOOP IF MORE SUBPOOLS IN SQA
         TM    SW16M,UP16M         SET GLOBAL SQA VALUES
         BO    *+L'*+8
         L     R0,SQASIZE
         B     *+L'*+4
         L     R0,SQAESIZE
         C     R0,TOTSIZE
         BL    P000410
         BE    P000420
         LR    R1,R0
         S     R1,TOTSIZE
         ST    R0,TOTSIZE
         A     R1,TOTFREE
         ST    R1,TOTFREE
         MVI   TOTLARGE,X'FF'
         B     P000420
P000410  MVC   #SQAOVFA,MSG3A      SQA OVERFLOWS INTO CSA
         MVC   #SQAOVFB,MSG3B
         L     R1,TOTSIZE
         SR    R1,R0
         ST    R1,OVERFLOW
         SRA   R1,10               DIVIDE BY 1024 TO HAVE IN K
         CVD   R1,DBLEWORD         CONVERT
         MVC   #SQAOVFX,EDIT2        AND
         ED    #SQAOVFX,DBLEWORD+4     EDIT
P000420  LA    R3,#SQALINE
         LA    R4,TOTSIZE
         BAS   R9,GLEDIT           EDIT SQA TOTAL
         EJECT
***********************************************************************
*        CSA - DO THE CALCULATIONS AND FORMAT DATA TO BE OUTPUT       *
***********************************************************************
         SPACE 1
         XC    TOTSIZE(TOTL),TOTSIZE    RESET
         L     R5,=A(SPCSA)        START OF CSA SUBPOOLS
         LA    R8,SPCSAN           NUMBER OF CSA SUBPOOLS
P000500  BAS   R9,SPEDIT           FORMAT SUBPOOL OUTPUT DATA
         BAS   R9,SPTOTL           COMPUTE CSA SUBPOOLS TOTAL
         LA    R5,L'SPTAB(R5)      POINT TO NEXT
         BCT   R8,P000500          LOOP IF MORE SUBPOOLS IN CSA
         TM    SW16M,UP16M         SET GLOBAL CSA VALUES
         BO    *+L'*+8
         L     R0,CSASIZE
         B     *+L'*+4
         L     R0,CSAESIZE
         C     R0,TOTSIZE
         BE    P000510
         LR    R1,R0
         S     R1,TOTSIZE
         A     R1,TOTFREE
         ST    R1,TOTFREE
         MVI   TOTLARGE,X'FF'
P000510  S     R0,OVERFLOW
         ST    R0,TOTSIZE
         LA    R3,#CSALINE
         LA    R4,TOTSIZE
         BAS   R9,GLEDIT           EDIT CSA TOTAL
         EJECT
***********************************************************************
*        OUTPUT THE SCREEN                                            *
***********************************************************************
         SPACE 1
         LA    R0,#SCREEN          LOAD SCREEN ADDR
         ST    R0,@PUTAREA         STORE IN LINKAGE AREA
         LA    R0,#SCRNLEN         LOAD SCREEN LENGTH
         ST    R0,@PUTLEN          STORE IN LINKAGE AREA
         L     R0,=A(HCSCR)        HARDCOPY SCREEN                 -EU-
        $HCPY  HSA=(R0)              IF NEEDED                     -EU-
P000900  MVI   @RSPONSE,C' '       MOVE BLANK TO RESPONSE
         LR    R1,R10              POINT R1 TO LINKAGE AREA
         L     R15,@IOMOD          LOAD ADDRESS OF TERMINAL I/O MOD
         BASR  R14,R15             GO DO TERMINAL IO
         CLI   @RSPONSE,C'R'       REFRESH SCREEN ?
         BNE   *+L'*+8             BRANCH IF NOT
         XI    SW16M,UP16M         FLIP/FLOP BETWEEN LOW/UP 16 MB LINE
         B     P000100
        $XRET  CC=0                B O O G I E
         EJECT
***********************************************************************
*        ERRORS DIAGNOSE                                              *
***********************************************************************
         SPACE 1
ERRG     MVC   #ALTM01,=CL16'VSMLIST REG 15 :'
         CH    R15,=H'4'           ALL INFORMATION NOT RECEIVED R.C. ?
         BNE   *+L'*+10            NO
         MVC   #ALTM02,=CL8'4 - W.A.'   YES, WORK AREA IS TOO SMALL
         B     ERRSV
         STCM  R15,B'1111',FIVEBYTE     NO, DISPLAY R.C.
         UNPK  TENBYTE,FIVEBYTE
         TR    TENBYTE+1(8),TRTABLE
         MVC   #ALTM02,TENBYTE+1
         B     ERRSV
ERRS     MVC   #ALTM01,=CL16'UNDEF. SUBPOOL :'
         STM   R0,R15,SVREGS
         XR    R0,R0
         USING SDF,R3
         IC    R0,SDFID            SUBPOOL ID NUMBER
         DROP  R3
         CVD   R0,DBLEWORD
         MVC   #ALTM02+L'#ALTM02-L'EDIT1(L'EDIT1),EDIT1
         ED    #ALTM02+L'#ALTM02-L'EDIT1(L'EDIT1),DBLEWORD+6
         B     ERRDIAG
ERR0     MVI   #ALTM02+6,C'0'
         B     ERRMSG
ERR1     MVI   #ALTM02+6,C'1'
         B     ERRMSG
ERR2     MVI   #ALTM02+6,C'2'
         B     ERRMSG
ERR3     MVI   #ALTM02+6,C'3'
         B     ERRMSG
ERR4     MVI   #ALTM02+6,C'4'
         B     ERRMSG
ERRD     MVI   #ALTM02+6,C'D'
         B     ERRMSG
ERRN     MVI   #ALTM02+6,C'N'
         B     ERRMSG
ERRIS    MVC   #ALTM02+6(2),=CL2'IS'
ERRMSG   MVC   #ALTM02(5),=CL5'ERROR'
ERRSV    STM   R0,R15,SVREGS
ERRDIAG  LA    R1,SVREGS           BUILD
         ST    R1,@SNPLST            REGISTERS AT
         LA    R1,16*4-1(R1)           TIME OF ERROR
         ST    R1,@SNPLST+4              SNAP
         OI    @SNPLST+4,X'80'             LIST
        $SNAP  ID=0                ID-NUMBER - - - - - - - - - - - 000
         TM    @SWITCH,@SNPFNA     SNAP INACTIVE ?
         BZ    *+L'*+10            NO
         MVC   #ALTM04,MSGE1       YES
         B     *+L'*+10
         BAS   R9,WKSNAP           TAKE W.A. SNAP
         MVC   #ALTM04,MSGE2
         MVC   #A16M,#S16M
         LA    R0,#ALTSCR          LOAD ALTERNATE SCREEN ADDR
         ST    R0,@PUTAREA         STORE IN LINKAGE AREA
         LA    R0,#ALTSCRL         LOAD ALTERNATE SCREEN LENGTH
         ST    R0,@PUTLEN          STORE IN LINKAGE AREA
         B     P000900
         EJECT
***********************************************************************
*                                                                     *
* ===> SDLOOP <===                                                    *
*                                                                     *
*        COLLECT VSM DATA OF A SUBPOOL                                *
*                                                                     *
*        REGISTERS AT ENTRY IN THIS SUBROUTINE                        *
*                                                                     *
*        R3 =>   POINT TO SUBPOOL DESCRIPTOR                          *
*        R5 =>   END OF DATA ADDRESS                                  *
*        R9 =>   RETURN ADDRESS                                       *
*                                                                     *
*        REGISTERS USAGE FOR THIS SUBROUTINE                          *
*                                                                     *
*        R0 =>   TEMPORARY WORK REGISTER                              *
*        R1 =>   SUB-POOL FREE SPACE ACCUMULATOR                      *
*        R2 =>   NUMBER OF ALLOCATED BLOCKS                           *
*        R3 =>   DATA CURRENT POINTER                                 *
*        R4 =>   NUMBER OF FREE SPACE DESCRIPTORS                     *
*        R14 =>  SUB-POOL WORK CELLS POINTER                          *
*        R15 =>  SUB-POOL ALLOCATED SPACE ACCUMULATOR                 *
*                                                                     *
***********************************************************************
         SPACE 1
         USING SDF,R3
SDLOOP   CLI   SDFIS,X'00'         SUBPOOL DESCRIPTOR IDENTIFIER ?
         BNE   ERRIS
         LA    R0,SPTABN           SCAN SUBPOOLS TABLE
         L     R1,=A(SPTAB)
SDLOOP1  CLC   0(1,R1),SDFID       THIS SUBPOOL ID NUMBER ?
         BE    SDLOOP2             YES
         LA    R1,L'SPTAB(R1)
         BCT   R0,SDLOOP1
         B     ERRS                UNKNOWN SUBPOOL
SDLOOP2  L     R14,4(R1)           GET SP WORK CELLS ADDRESS
         L     R15,0(R14)          ALLOCATED SPACE ACCUMULATOR
         L     R1,4(R14)           FREE SPACE ACCUMULATOR
         XR    R0,R0
         IC    R0,SDFLG            LENGTH OF SUBPOOL DESCRIPTOR
         DROP  R3
         AR    R3,R0               BUMP CURRENT PTR
         CLR   R3,R5               TEST IF DATA OVERFLOW
         BNL   ERR1                BRANCH IF YES, ERROR
         ICM   R2,B'1111',0(R3)    GET NUMBER OF ALLOCATED BLOCKS
         LA    R3,4(R3)            BUMP CURRENT POINTER
         LTR   R2,R2               HOW MANY ALLOCATED BLOCKS ?
         BNPR  R9                  RETURN IF NONE
SDLOOP3  CLR   R3,R5               TEST IF DATA OVERFLOW
         BNL   ERR2                BRANCH IF YES, ERROR
         USING AFUF,R3
         NI    SW16M,255-SKACC
         ICM   R4,B'1111',AFUFVA   VIRTUAL ADDRESS OF ALLOC. BLOCK
         LA    R4,0(R4)
         TM    SW16M,UP16M
         BO    SDLOOP5
         CL    R4,=A(16*1024*1024)
         BL    SDLOOP6
SDLOOP4  OI    SW16M,SKACC
         B     SDLOOP7
SDLOOP5  CL    R4,=A(16*1024*1024)
         BL    SDLOOP4
SDLOOP6  ICM   R0,B'1111',AFUFLG   LENGTH OF ALLOCATED BLOCK
         AR    R15,R0
         DROP  R3
SDLOOP7  LA    R3,LAFUF(R3)        BUMP CURRENT POINTER,
         CLR   R3,R5               TEST IF OVERFLOW
         BNL   ERR3                BRANCH IF YES, ERROR
         ICM   R4,B'1111',0(R3)    GET NUMBER OF FREE SPACE DESC.
         LA    R3,4(R3)            BUMP CURRENT POINTER
         LTR   R4,R4               HOW MANY FREE SPACE DESC. ?
         BNP   SDLOOP10            BRANCH IF NONE
SDLOOP8  CLR   R3,R5               TEST IF DATA OVERFLOW
         BNL   ERR4                BRANCH IF YES, ERROR
         TM    SW16M,SKACC
         BO    SDLOOP9
         USING AFUF,R3
         ICM   R0,B'1111',AFUFLG   LENGTH OF FREE SPACE
         AR    R1,R0
         DROP  R3
         C     R0,8(R14)           COLLECT
         BNH   *+L'*+4               THE LARGEST
         ST    R0,8(R14)               FREE SPACE
SDLOOP9  LA    R3,LAFUF(R3)        BUMP CURRENT POINTER
         BCT   R4,SDLOOP8          LOOP IF MORE FREE SPACE DESC.
SDLOOP10 BCT   R2,SDLOOP3          LOOP IF MORE ALLOCATED BLOCKS
         ST    R15,0(R14)          SUBPOOL SIZE
         ST    R1,4(R14)           FREE SPACE
         BR    R9                  RETURN
         EJECT
***********************************************************************
*                                                                     *
* ===> SPEDIT / GLEDIT <===                                           *
*                                                                     *
*        FORMAT SUBPOOL / TOTAL COMPUTATIONS DATA                     *
*                                                                     *
*        REGISTERS AT ENTRY IN THIS SUBROUTINE                        *
*                                                                     *
*        R3 =>   SCREEN OUTPUT LINE ADDRESS ---> GLEDIT               *
*        R4 =>   TOTAL WORK CELLS POINTER ---> GLEDIT                 *
*        R5 =>   SUBPOOL TABLE POINTER ---> SPEDIT                    *
*        R9 =>   RETURN ADDRESS                                       *
*                                                                     *
*        REGISTERS USAGE FOR THIS SUBROUTINE                          *
*                                                                     *
*        R0 =>   TEMPORARY WORK REGISTER                              *
*        R1 =>   TEMPORARY WORK REGISTER                              *
*        R2 =>   TEMPORARY WORK REGISTER                              *
*        R3 =>   SCREEN OUTPUT LINE ADDRESS                           *
*        R4 =>   SUBPOLL WORK CELLS POINTER                           *
*        R15 =>  TEMPORARY WORK REGISTER                              *
*                                                                     *
***********************************************************************
         SPACE 1
SPEDIT   XR    R3,R3
         ICM   R3,B'0111',1(R5)    SCREEN OUTPUT LINE ADDRESS
         L     R4,4(R5)            SUBPOOL DATA CELLS
         USING $WRKSECT,R3
         XR    R0,R0
         IC    R0,0(R5)            SUBPOOL ID NUMBER
         CVD   R0,DBLEWORD         CONVERT
         MVC   $WRKNUMB,EDIT1        AND
         ED    $WRKNUMB,DBLEWORD+6     EDIT
GLEDIT   L     R0,0(R4)            SUBPOOL SIZE
         LR    R15,R0
         SRA   R0,10               DIVIDE BY 1024 TO HAVE IN K
         CVD   R0,DBLEWORD         CONVERT
         MVC   $WRKSIZE,EDIT2        AND
         ED    $WRKSIZE,DBLEWORD+4     EDIT
         L     R0,4(R4)            SUBPOOL FREE SPACE
         LR    R1,R0
         SRA   R0,10               DIVIDE BY 1024 TO HAVE IN K
         CVD   R0,DBLEWORD         CONVERT
         MVC   $WRKFREE,EDIT2        AND
         ED    $WRKFREE,DBLEWORD+4     EDIT
         CLI   8(R4),X'FF'
         BNE   SETLFS
         MVI   $WRKLRGE,C' '
         MVC   $WRKLRGE+1(L'$WRKLRGE-1),$WRKLRGE
         B     NOLFS
SETLFS   L     R0,8(R4)            SUBPOOL LARGEST FREE SPACE
         SRA   R0,10               DIVIDE BY 1024 TO HAVE IN K
         CVD   R0,DBLEWORD         CONVERT
         MVC   $WRKLRGE,EDIT2        AND
         ED    $WRKLRGE,DBLEWORD+4     EDIT
NOLFS    XR    R0,R0               SUBPOOL FREE PERCENTAGE
         LA    R2,1000             SET R2 TO 1000
         MR    R0,R2               MULTIPLY FREE SPACE BY 1000
         CLR   R1,R15              PERCENT CAN BE DONE ?
         BNH   *+L'*+6             BRANCH IF NOT
         DR    R0,R15              COMPUTE PERCENT FREE WITH
         B     *+L'*+2               ONE DIGIT AFTER DECIMAL POINT
         XR    R1,R1               SET ZERO PERCENT
         CVD   R1,DBLEWORD         CONVERT
         MVC   $WRKPCT,EDIT3         AND
         ED    $WRKPCT,DBLEWORD+6      EDIT
         DROP  R3
         BR    R9                  RETURN
         EJECT
***********************************************************************
*                                                                     *
* ===> SPTOTL <===                                                    *
*                                                                     *
*        COMPUTE SUBPOOLS TOTAL                                       *
*                                                                     *
*        REGISTERS AT ENTRY IN THIS SUBROUTINE                        *
*                                                                     *
*        R4 =>   SUBPOLL WORK CELLS POINTER                           *
*        R9 =>   RETURN ADDRESS                                       *
*                                                                     *
*        REGISTERS USAGE FOR THIS SUBROUTINE                          *
*                                                                     *
*        R0 =>   TEMPORARY WORK REGISTER                              *
*                                                                     *
***********************************************************************
         SPACE 1
SPTOTL   L     R0,0(R4)            COMPUTE
         A     R0,TOTSIZE            TOTAL
         ST    R0,TOTSIZE              SIZE
         L     R0,4(R4)            COMPUTE
         A     R0,TOTFREE            TOTAL
         ST    R0,TOTFREE              FREE SPACE
         CLC   8(4,R4),TOTLARGE    RETAIN THE LARGEST
         BNHR  R9                    FREE SPACE
         MVC   TOTLARGE(4),8(R4)       OF TOTAL
         BR    R9                  RETURN
         EJECT
***********************************************************************
*                                                                     *
* ===> WKSNAP <===                                                    *
*                                                                     *
*        WORK AREA SNAP                                               *
*                                                                     *
*        REGISTERS USAGE FOR THIS SUBROUTINE                          *
*                                                                     *
*        R1 =>   TEMPORARY WORK REGISTER                              *
*        R9 =>   RETURN ADDRESS                                       *
*                                                                     *
***********************************************************************
         SPACE 1
WKSNAP   ST    R6,@SNPLST          BUILD
         LR    R1,R6                 VSMLIST
         BCTR  R1,0                    WORK
         AR    R1,R7                     AREA
         ST    R1,@SNPLST+4                SNAP
         OI    @SNPLST+4,X'80'               LIST
         TM    SWPRC,PRCCSA        SET ID-NUMBER
         BO    *+L'*+8
         LA    R0,2                2 = SQA
         B     *+L'*+4
         LA    R0,3                3 = CSA
        $SNAP  ID=(R0)             ID-NUMBER - - - - - - - - 002 - 003
         BR    R9                  RETURN
         EJECT
DBLEWORD DC    D'0'                DOUBLE WORD WORK AREA
OVERFLOW DC    F'0'                SQA SPACE INTO CSA
TENBYTE  DC    XL10'0'
FIVEBYTE DC    XL5'0'
SWPRC    DC    XL1'0'         PROCESSING FLAGS
PRCCSA   EQU   X'01'               PROCESS CSA
CLRL     EQU   *-DBLEWORD          LENGTH FOR CLEAR
         SPACE 1
TOTSIZE  DC    F'0'                WORK AREA FOR TOTAL SIZE
TOTFREE  DC    F'0'                WORK AREA FOR TOTAL FREE SPACE
TOTLARGE DC    F'0'                WORK AREA FOR LARGEST OF TOTAL
TOTL     EQU   *-TOTSIZE           LENGTH FOR CLEAR
         SPACE 1
SQASIZE  DC    F'0'                SIZE OF SQA AREA
SQAESIZE DC    F'0'                SIZE OF SQA AREA EXTENDED
CSASIZE  DC    F'0'                SIZE OF CSA AREA
CSAESIZE DC    F'0'                SIZE OF CSA AREA EXTENDED
SVREGS   DC    16F'0'              SAVE REGS 0-15
TRTABLE  DS    0CL256
         DC    CL240' '
         DC    CL16'0123456789ABCDEF'
MSG1     DC    C'===> COMMON AREA FREE SPACE THRESHOLD 1 <==='
MSG2     DC    C'===> COMMON AREA FREE SPACE THRESHOLD 2 <==='
MSG3A    DC    C'===> SQA OVERFLOWING INTO CSA :'
MSG3B    DC    C' K <==='
MSGE1    DC    C'===> ALLOCATE A FILE "SYSSNAP" FOR MORE DETAILS.'
MSGE2    DC    C'===> SEE TO FILE "SYSSNAP" FOR MORE DETAILS.    '
EDIT1    DC    XL4'40202120'       EDIT PATTERN FOR ID NUMBER
EDIT2    DC    XL8'4020202020202120'    EDIT PATTERN FOR SIZE IN K
EDIT3    DC    XL5'4020214B20'     EDIT PATTERN FOR PERCENT
SW16M    DC    XL1'0'         16 MB PROCESS FLAGS
UP16M    EQU   X'01'               PROCESS UP 16 MB LINE
SKACC    EQU   X'02'               SKIP ACCOUNT
         SPACE 1
#SCREEN  DS    0F
         $FS   WCC=(KBR,RMDT),MF=L
         $FS   SBA=(1,1),RA=(1,1,00),MF=L
         $FS   SBA=(1,1),SF=(PROT,INT),MF=L
HCL1     $FS   TEXT='SELECT OPTION =>',MF=L
         $FS   SF=NORMAL,TEXT=' ',MF=L
         $FS   SF=(PROT),MF=L
         $FS   SBA=(3,23),SF=(PROT,INT),MF=L
HCL3     $FS   TEXT='SQA/CSA UTILIZATION : ',MF=L
#S16M    $FS   TEXT=' ',MF=L
         $FS   TEXT=' 16MB-LINE',MF=L
HCL3L    EQU   *-HCL3
         $FS   SF=(PROT),MF=L
         $FS   SBA=(5,34),MF=L
HCL5     $FS   TEXT='UNAL OR       LARGEST       % UNAL',MF=L
         $FS   SBA=(6,14),MF=L
HCL6     $FS   TEXT='ID         SIZE     FREE SP     ',MF=L
         $FS   TEXT='UNAL/FREE      OR FREE',MF=L
HCL6L    EQU   *-HCL6
         $FS   SBA=(8,13),MF=L
HCL8     $FS   TEXT='SQA  ',MF=L
#SQALINE EQU   *-4
         $FS   TEXT=(' ',11),MF=L
         $FS   TEXT=' K  ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K    ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K      ',MF=L
         $FS   TEXT=(' ',5),MF=L
HCL8L    EQU   *-HCL8
         $FS   SBA=(9,11),MF=L
HCL9     $FS   TEXT='SP ',MF=L
#226LINE $FS   TEXT=(' ',4),MF=L
         $FS   TEXT=(' ',3),MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K  ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K    ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K      ',MF=L
         $FS   TEXT=(' ',5),MF=L
HCL9L    EQU   *-HCL9
         $FS   SBA=(10,11),MF=L
HCL10    $FS   TEXT='SP ',MF=L
#239LINE $FS   TEXT=(' ',4),MF=L
         $FS   TEXT=(' ',3),MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K  ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K    ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K      ',MF=L
         $FS   TEXT=(' ',5),MF=L
HCL10L   EQU   *-HCL10
         $FS   SBA=(11,11),MF=L
HCL11    $FS   TEXT='SP ',MF=L
#245LINE $FS   TEXT=(' ',4),MF=L
         $FS   TEXT=(' ',3),MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K  ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K    ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K      ',MF=L
         $FS   TEXT=(' ',5),MF=L
HCL11L   EQU   *-HCL11
         $FS   SBA=(12,11),RA=(12,68,-),MF=L
         $FS   SBA=(13,13),MF=L
HCL13    $FS   TEXT='CSA  ',MF=L
#CSALINE EQU   *-4
         $FS   TEXT=(' ',11),MF=L
         $FS   TEXT=' K  ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K    ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K      ',MF=L
         $FS   TEXT=(' ',5),MF=L
HCL13L   EQU   *-HCL13
         $FS   SBA=(14,11),MF=L
HCL14    $FS   TEXT='SP ',MF=L
#227LINE $FS   TEXT=(' ',4),MF=L
         $FS   TEXT=(' ',3),MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K  ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K    ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K      ',MF=L
         $FS   TEXT=(' ',5),MF=L
HCL14L   EQU   *-HCL14
         $FS   SBA=(15,11),MF=L
HCL15    $FS   TEXT='SP ',MF=L
#228LINE $FS   TEXT=(' ',4),MF=L
         $FS   TEXT=(' ',3),MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K  ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K    ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K      ',MF=L
         $FS   TEXT=(' ',5),MF=L
HCL15L   EQU   *-HCL15
         $FS   SBA=(16,11),MF=L
HCL16    $FS   TEXT='SP ',MF=L
#231LINE $FS   TEXT=(' ',4),MF=L
         $FS   TEXT=(' ',3),MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K  ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K    ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K      ',MF=L
         $FS   TEXT=(' ',5),MF=L
HCL16L   EQU   *-HCL16
         $FS   SBA=(17,11),MF=L
HCL17    $FS   TEXT='SP ',MF=L
#241LINE $FS   TEXT=(' ',4),MF=L
         $FS   TEXT=(' ',3),MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K  ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K    ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K      ',MF=L
         $FS   TEXT=(' ',5),MF=L
HCL17L   EQU   *-HCL17
         $FS   SBA=(20,18),SF=(PROT,INT),MF=L
#SQATHRS $FS   TEXT=(' ',44),MF=L
         $FS   SF=(PROT),MF=L
         $FS   SBA=(21,17),SF=(PROT,INT),MF=L
#SQAOVFA $FS   TEXT=(' ',31),MF=L
#SQAOVFX $FS   TEXT=(' ',8),MF=L
#SQAOVFB $FS   TEXT=(' ',7),MF=L
HCL21L   EQU   *-#SQAOVFA
         $FS   SF=(PROT),MF=L
         $FS   SBA=(1,1),SF=(PT,IC),MF=L
#SCRNLEN EQU   *-#SCREEN
         SPACE 1
#ALTSCR  DS    0F
         $FS   WCC=(KBR,RMDT),MF=L
         $FS   SBA=(1,1),RA=(1,1,00),MF=L
         $FS   SBA=(1,1),SF=(PROT,INT),MF=L
         $FS   TEXT='SELECT OPTION =>',MF=L
         $FS   SF=NORMAL,TEXT=' ',MF=L
         $FS   SF=(PROT),MF=L
         $FS   SBA=(3,20),SF=(PROT,INT),MF=L
         $FS   TEXT='SQA/CSA UTILIZATION : DEBUG AID SERVICE',MF=L
         $FS   SF=(PROT),MF=L
         $FS   SBA=(6,1),MF=L
#ALTM01  $FS   TEXT=(' ',16),MF=L
         $FS   SF=(PROT,INT),MF=L
#ALTM02  $FS   TEXT=(' ',8),MF=L
         $FS   SF=(PROT),MF=L
         $FS   SBA=(8,1),TEXT='CURRENT PROCESSING WAS :',MF=L
         $FS   SF=(PROT,INT),MF=L
#ALTM03  $FS   TEXT=(' ',3),MF=L
         $FS   TEXT=' (',MF=L
#A16M    $FS   TEXT=' ',MF=L
         $FS   TEXT=' 16MB-LINE)',MF=L
         $FS   SF=(PROT),MF=L
         $FS   SBA=(10,5),MF=L
#ALTM04  $FS   TEXT=(' ',48),MF=L
         $FS   SBA=(1,1),SF=(PT,IC),MF=L
#ALTSCRL EQU   *-#ALTSCR
         EJECT
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*        HARDCOPY SCREEN PROCESS                                      *
*                                                                     *
*        HERE, WE RECEIVES CONTROL FROM HARDCOPY MODULE WITH THE      *
*        REGISTERS AS BELOW :                                         *
*              R2   - '#SCREEN' ADDRESS                               *
*              R3   - HARDCOPY TARGET LINE ADDRESS (BLANKS            *
*                     INITIALIZED AND LENGTH 80)                      *
*              R4   - 'HCSCR' ADDRESS                                 *
*              R10  - LINKAGE AREA POINTER                            *
*              R14  - LINKAGE REGISTER                                *
*                                                                     *
*        NOTE : DO NOT USE ANY OTHER REGISTER WITHOUT LOOKING IN      *
*               THE HARDCOPY MODULE FOR HIS AVAILABILITY              *
*                                                                     *
***********************************************************************
         SPACE 1
         DS    0F
         USING #SCREEN,R2
         USING *,R4
HCSCR    B     HCSCR1              LINE 1
         B     0(R14)              LINE 2
         B     HCSCR3              LINE 3
         B     0(R14)              LINE 4
         B     HCSCR5              LINE 5
         B     HCSCR6              LINE 6
         B     0(R14)              LINE 7
         B     HCSCR8              LINE 8
         B     HCSCR9              LINE 9
         B     HCSCR10             LINE 10
         B     HCSCR11             LINE 11
         B     HCSCR12             LINE 12
         B     HCSCR13             LINE 13
         B     HCSCR14             LINE 14
         B     HCSCR15             LINE 15
         B     HCSCR16             LINE 16
         B     HCSCR17             LINE 17
         B     0(R14)              LINE 18
         B     0(R14)              LINE 19
         B     HCSCR20             LINE 20
         B     HCSCR21             LINE 21
         B     0(R14)              LINE 22
         B     0(R14)              LINE 23
         B     0(R14)              LINE 24
         SPACE 1
HCSCR1   MVC   2(L'HCL1,R3),HCL1
         MVC   3+L'HCL1(1,R3),@RSPONSE
         BR    R14
HCSCR3   MVC   24(HCL3L,R3),HCL3
         BR    R14
HCSCR5   MVC   34(L'HCL5,R3),HCL5
         BR    R14
HCSCR6   MVC   14(HCL6L,R3),HCL6
         BR    R14
HCSCR8   MVC   13(HCL8L,R3),HCL8
         BR    R14
HCSCR9   MVC   11(HCL9L,R3),HCL9
         BR    R14
HCSCR10  MVC   11(HCL10L,R3),HCL10
         BR    R14
HCSCR11  MVC   11(HCL11L,R3),HCL11
         BR    R14
HCSCR12  MVI   11(R3),C'-'
         MVC   12(56,R3),11(R3)
         BR    R14
HCSCR13  MVC   13(HCL13L,R3),HCL13
         BR    R14
HCSCR14  MVC   11(HCL14L,R3),HCL14
         BR    R14
HCSCR15  MVC   11(HCL15L,R3),HCL15
         BR    R14
HCSCR16  MVC   11(HCL16L,R3),HCL16
         BR    R14
HCSCR17  MVC   11(HCL17L,R3),HCL17
         BR    R14
HCSCR20  MVC   19(L'#SQATHRS,R3),#SQATHRS
         BR    R14
HCSCR21  MVC   18(HCL21L,R3),#SQAOVFA
         BR    R14
         SPACE 1
         DROP  R2,R4
         EJECT
SPTAB    DS    0D                  SUB-POOLS TABLE
SPSQA    DC    AL1(226),AL3(#226LINE),A(W226) --- SQA SUB-POOLS
         DC    AL1(239),AL3(#239LINE),A(W239)
         DC    AL1(245),AL3(#245LINE),A(W245)
SPSQAN   EQU   (*-SPSQA)/L'SPTAB   NUMBER OF SQA SUB-POOLS
SPCSA    DC    AL1(227),AL3(#227LINE),A(W227) --- CSA SUB-POOLS
         DC    AL1(228),AL3(#228LINE),A(W228)
         DC    AL1(231),AL3(#231LINE),A(W231)
         DC    AL1(241),AL3(#241LINE),A(W241)
SPCSAN   EQU   (*-SPCSA)/L'SPTAB   NUMBER OF CSA SUB-POOLS
SPTABN   EQU   (*-SPTAB)/L'SPTAB   NUMBER OF SUB-POOLS IN TABLE
         SPACE 1
WCELLS   DS    0F                  SUB-POOLS WORK CELLS
W226     DC    3F'0'
W227     DC    3F'0'
W228     DC    3F'0'
W231     DC    3F'0'
W239     DC    3F'0'
W241     DC    3F'0'
W245     DC    3F'0'
WSPL     EQU   *-WCELLS
         EJECT
$WRKSECT DSECT
$WRKNUMB DS    CL4
         DS    CL3
$WRKSIZE DS    CL8
         DS    CL4
$WRKFREE DS    CL8
         DS    CL6
$WRKLRGE DS    CL8
         DS    CL8
$WRKPCT  DS    CL5
         SPACE 2
         $GDA  G=NO                GENERAL DATA AREA DSECT
         SPACE 2
         $SDF
         SPACE 2
         $AFUF
         EJECT
         $LNKSECT
         SPACE 2
         END
