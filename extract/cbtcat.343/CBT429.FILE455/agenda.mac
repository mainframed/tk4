AGND     TITLE '--  A G E N D A  --'
AGENDA   START 0
         SPACE 1
*--------------------------------------------------------------------*
* PURPOSE : AN ONLINE AGENDA AT YOUR DISPOSAL.                       *
*        THIS CP COMPARE TODAY DATE AGAINST ALL DATES STORED         *
*        IN THE DATA-SET 'USER-ID.AGENDA.DATA' (OLD VERSION NAMED    *
*        'USER-ID.AGENDA' IS ALWAYS HANDLED TOO).                    *
*        WHEN A DATE MATCH IS ENCOUNTERED, THE CORRESPONDING         *
*        TEXT MESSAGE IS OUTPUTED TO THE TERMINAL.                   *
*                                           M.SACRE  23 SEPTEMBRE 86 *
*                                         P.A.MOINIL  14 DECEMBRE 89 *
*                                                                    *
* DATA-SET RECORD FORMAT :                                           *
*         DD/MM/YY..............MESSAGE....................          *
*         <---  80 BYTES LONG  --- --- --- --- --- --- --->          *
*         IF A DATE FIELD STARTS BY AN ASTERISK (*), THEN THE        *
*         MESSAGE IS DISPLAYED EVERY DAY.                            *
*--------------------------------------------------------------------*
         SPACE 1
        $DEFREG
         SPACE 1
OFF      EQU   X'0F'               NOP OPERATION SWITCH SETTING
ON       EQU   X'F0'               BRANCH OPERATION SWITCH SETTING
NTMX     EQU   1000                MAX. NO. OF MESSAGES TABLE ELEMENT
WSZ      EQU   (NTMX*80)           MESSAGES TABLE TOTAL LENGTH
         EJECT
*--------------------------------------------------------------------*
*                            H  E  L  P                              *
*--------------------------------------------------------------------*
* FUNCTION :                                                         *
*   THE AGENDA COMMAND DISPLAYS ALL TODAY (BY DEFAULT) PLANNED       *
*        ACTIVITIES OR ANY OTHERS AS REQUIRED BY A SPECIFIED DATE.   *
*   TO USE THIS FACILITY, IT IS MANDATORY TO :                       *
*        (1) PRE-ALLOCATE A SEQUENTIAL DATA-SET WITH THE FOLLOWING   *
*            CHARACTERISTICS                                         *
*            DSNAME  - 'USER-ID.AGENDA.DATA' USER-ID = YOUR USERID   *
*            FORMAT  -  FB               FIXED BLOCKED               *
*            DSORG   -  PS               PHYSICAL SEQUENTIAL         *
*            LRECL   -  80               RECORD LENGTH               *
*            BLKSIZE -  9040             BLOCK LENGTH                *
*        (2) THEN, INITIALIZE THIS AGENDA DATA-SET WITH YOUR PLANNED *
*            ACTIVITIES (USING AN EDIT OF YOUR CHOICE).              *
*            THE RECORDS MUST BE FORMATED AS BELOW                   *
*            DD/MM/YY..............MESSAGE....................       *
*            <---  80 BYTES LONG  --- --- --- --- --- --- --->       *
*            WHERE                                                   *
*            COL 1-2  = DD (2 DIGITS) IS THE DAY                     *
*            COL 3    = / (A SLASH)                                  *
*            COL 4-5  = MM (2 DIGITS) IS THE MONTH                   *
*            COL 6    = / (A SLASH)                                  *
*            COL 7-8  = YY (2 DIGITS) IS THE YEAR                    *
*            COL 9-80 = MESSAGE (CHARACTERS - FREE FORMAT)           *
*        NOTE : AN * IN COL 1 DEFINES A MESSAGE (COL 9-80) TO BE     *
*               ALWAYS DISPLAYED.                                    *
* SYNTAX :                                                           *
*        AGENDA    = TODAY MESSAGE(S) BY DEFAULT                     *
*     OR AGENDA DD/MM/YY                                             *
*                  = SPECIFIED DATE DD/MM/YY MESSAGE(S)              *
*     OR AGENDA DD/MM/YY DD/MM/YY                                    *
*                  = SPECIFIED RANGE OF DATES MESSAGE(S)             *
*     OR ANY PREVIOUS AGENDA COMMAND FORMAT FOLLOWED BY A LAST       *
*                  OPERAND USER-ID WHICH ALLOWS THE ACCESS TO        *
*                  ANOTHER AGENDA DATA-SET IF DESIRED.               *
*--------------------------------------------------------------------*
         SPACE 1
         PRINT NOGEN
         EJECT
        $XENT  BASE=(R10,R11)
         ST    R1,CPPLADDR             ADDRESS OF CPPL
        GETMAIN R,LV=WSZ
         ST    R1,ATBMSG
        EXTRACT ,'S',,MF=(E,EXTRL)
         L     R1,APSCB
         LTR   R1,R1
         BZ    NOTTSO
         USING PSCB,R1                 SET PSCB ADDRESSABILITY
         L     R2,CPPLADDR             REG ONE AT ENTRY
         TM    0(R2),X'80'             IF CALLED, NOT CP
         BO    NOCALL
         USING CPPL,R2                 SET CPPL ADDRESSABILITY
         CLC   PSCBUPT,CPPLUPT         CPPL+4 = UPT ADDRESS?
         BNE   *+L'*+10                NO
         DROP  R1
         CLC   APSCB(L'APSCB),CPPLPSCB CPPL+8 = PSCB ADDRESS?
         BE    USOK                    YES, TSO COMMAND
         LR    R1,R2
         USING IKJEBECA,R1
         L     R2,CAPTTMP              CPPL ADDRESS
         DROP  R1
         CLC   APSCB(L'APSCB),CPPLPSCB CPPL+8 = PSCB ADDRESS?
         BNE   NOCALL                  NO, NOT TSO SUB-COMMAND
         ST    R2,CPPLADDR             SET CPPL ADDRESS
USOK     L     R1,CPPLPSCB             ADRESSE DU PSCB
         MVC   USID,0(R1)              SAVE USERID (FROM PSCB)
         CLC   USID(3),=CL8'OPER '     IS USERID OPE...?
         BNE   *+L'*+6                 IF NOT, JUMP NEXT INSTRUCTION
         MVC   USID,=CL8'OPER '        IF YES, ALLOCATE OPER.AGENDA
         L     R3,CPPLCBUF             ADDR. OF COMMAND BUFFER
         DROP  R2
         SPACE 1
*------- LOOK IF OPERAND(S) SUPPLIED.
*        COMMAND BUFFER FORMAT :
*        ×     ×     ×        ×                            ×
*        × LT  × DSP × NAME   ×  OPERANDS                  ×
*        ×..×..×..×..×........×...................    .....×
*
*        LT    TOTAL COMMAND LENGTH (2 BYTES)
*        DSP   OFFSET TO FIRST OPERAND (2 BYTES)
*        NAME  COMMAND NAME
*        OPERANDS ...
         SPACE 1
INITRQ   MVC   ALTUI(L'ALTUI),=CL8' '  INITIALIZE USERID
         MVI   FLAG3D,0
         BAS   R9,GETDTES              GET DATE(S) IF ANY
         B     NOLAST                  +0
         CLR   R4,R3                   +4
         BNL   NOLAST
         CLI   0(R4),C' '              LOOK FOR LAST OPERAND
         BNE   *+L'*+8
         BXLE  R4,R2,*-8
         B     NOLAST
         LA    R1,ALTUI                MOVE LAST OPERAND
         LA    R0,L'ALTUI
LPMVP3   MVC   0(1,R1),0(R4)
         BXLE  R4,R2,*+L'*+4
         B     CHKPM3
         CLI   0(R4),C' '
         BE    CHKPM3
         LA    R1,1(R1)
         BCT   R0,LPMVP3
         B     ERRPM3                  INVALID LAST OPERAND
CHKPM3   TR    ALTUI,MAJMIN            TRANSFORM IN UPPER CASE
         CLI   ALTUI,C'A'
         BL    ERRPM3                  INVALID LAST OPERAND
         CLI   ALTUI,C'Z'
         BH    ERRPM3                  INVALID LAST OPERAND
         MVI   FLAG3D,1                SIGNAL A LAST OPERAND
NOLAST   BAS   R9,CHKDTES              CHECK DATE(S)
         SPACE 1
*------- ALLOCATION DYNAMIQUE DU FICHIER D'AGENDA
*        QUI SE TROUVE SOUS LA DD-NAME 'DIARY'.
*        BUILD THE DSNAME TO BE ALLOCATED.
         SPACE 1
         LA    R6,L'USID               MAX 7 CHAR IN USERID
         CLI   FLAG3D,1                WAS A LAST PARM PASSED ?
         BNE   *+L'*+8                 IF NOT, SKIP USERID
         LA    R4,ALTUI                USERID PASSED AS LAST PARM.
         B     *+L'*+4
         LA    R4,USID                 USERID ADDRESS
         LA    R5,DYNDSNM              DSNAME ADDRESS
LOOP1    CLI   0(R4),C' '              IS CHARACTER BLANK ?
         BE    MOVEEND                 IF YES, ADD END OF DSNAME
         MVC   0(1,R5),0(R4)           IF NOT, MOVE CHARACTER
         LA    R4,1(R4)                JUMP TO NEXT CHAR IN USERID
         LA    R5,1(R5)                JUMP TO NEXT CHAR IN DSNAME
         BCT   R6,LOOP1                LOOP MAX 7 TIMES
MOVEEND  MVC   0(7,R5),=CL7'.AGENDA'   END OF DSNAME (OLD VERSION)
        $DYNALL DYNLIST                DYNAMIC ALLOC OF DIARY
         LTR   R15,R15                 TEST RETURN CODE
         BZ    OPDSD                   B ON ALLOCATED
         CH    R15,=H'4'               LOOK IF NOT FOUND
         BNE   ERRALL                  B ON ERROR ALLOC
         CL    R0,=A(X'17080000')
         BNE   ERRALL                  B ON ERROR ALLOC
         NOP   ERRNFD                  B ON NOT FOUND
         OI    *-3,ON                  CLOSE THIS WAY
         MVC   7(5,R5),=CL5'.DATA'     END OF DSNAME (NEW VERSION)
         B     MOVEEND+L'MOVEEND
OPDSD   OPEN   (DIARY,(INPUT))         OPEN FILE DIARY
         TM    DIARY+(DCBOFLGS-IHADCB),DCBOFOPN  OPEN SUCCESSFULL ?
         BZ    ERROPN                  NO, ERROR
         XR    R7,R7                   ENTRIES COUNTER
         L     R6,ATBMSG               TABLE OF MESSAGES
GET     GET    DIARY,WRKAR             READ FILE
SWGTE    NOP   ERRGEM
         CLI   WRKAR,C'*'              IS FIRST CHAR '*' ?
         BNE   TESTNUM                 IF NOT, TEST IF NUMERIC
         XC    WRKAR(8),WRKAR          SET DATE TO ZERO INSTEAD OF *
STRTBL   CL    R7,=A(NTMX)             CHECK PLACE IN TABLE
         BNL   TBOVFL                  NO MORE, TABLE OVERFLOW
         MVC   0(80,R6),WRKAR          MOVE RECORD IN TABLE
         LA    R6,80(R6)               JUMP TO NEXT FREE ENTRY
         AH    R7,=H'1'                ADD ONE IN COUNTER
         B     GET                     READ NEXT RECORD
TBOVFL   LA    R0,L'MSGOVFL
         LA    R1,MSGOVFL
         B     ERREXM                  EXIT
TESTNUM  MVC   DSD,=CL6'000000'
         MVN   DSD(2),WRKAR            MOVE DD
         MVN   DSD+2(2),WRKAR+3        MOVE MM
         MVN   DSD+4(2),WRKAR+6        MOVE YY
         CLC   DSD(2),WRKAR            IS DATE IN NUMERIC ?
         BNE   *+L'*+20
         CLC   DSD+2(2),WRKAR+3
         BNE   *+L'*+10
         CLC   DSD+4(2),WRKAR+6
         BE    CHKSEP                  YES
         LA    R0,L'MESSAGE1           NO, ERROR MESSAGES
         LA    R1,MESSAGE1
         BAS   R14,PUTLNE
         LA    R0,L'MESSAGE2
         LA    R1,MESSAGE2
ERRVRFY  BAS   R14,PUTLNE
         LA    R0,L'MESSAGE3
         LA    R1,MESSAGE3
         B     ERREXM                  EXIT
CHKSEP   CLI   WRKAR+2,C'.'            CHECK DATES SEPARATORS
         BE    *+L'*+8
         CLI   WRKAR+2,C'-'
         BNE   *+L'*+4
         MVI   WRKAR+2,C'/'
         CLI   WRKAR+5,C'.'
         BE    *+L'*+8
         CLI   WRKAR+5,C'-'
         BNE   *+L'*+4
         MVI   WRKAR+5,C'/'
         CLI   WRKAR+2,C'/'
         BNE   *+L'*+8
         CLI   WRKAR+5,C'/'
         BE    CHKSDTE
         LA    R0,L'MESSAGE4           ERROR MESSAGES
         LA    R1,MESSAGE4
         BAS   R14,PUTLNE
         LA    R0,L'MESSAGE5
         LA    R1,MESSAGE5
         BAS   R14,PUTLNE
         LA    R0,L'MESSAGE6
         LA    R1,MESSAGE6
         B     ERRVRFY                 EXIT
CHKSDTE  ICM   R0,B'0011',WRKAR        BUILD DATE
         ICM   R0,B'1100',WRKAR+3        FROM DD/MM/YY
         STCM  R0,B'1111',DSD              TO MMDDYYYY
         MVC   DSD+6(2),WRKAR+6
         CLC   WRKAR+6(2),=CL2'50'     SET CENTURY AHEAD
         BL    *+L'*+10
         MVC   DSD+4(2),=CL2'19'
         B     *+L'*+6
         MVC   DSD+4(2),=CL2'20'
        $GSDATE DSD,WRKAR
         LTR   R15,R15
         BZ    COMPARE
         ST    R15,DSD
         UNPK  MESSAGE7+L'MESSAGE7-10(9),DSD(5)
         TR    MESSAGE7+L'MESSAGE7-10(8),TRTAB-X'F0'
         MVI   MESSAGE7+L'MESSAGE7-2,C')'
         MVC   MESSAGE7+13(8),WRKAR
         LA    R0,L'MESSAGE7
         LA    R1,MESSAGE7
         B     ERRVRFY                 EXIT
COMPARE  MVI   WRKAR+7,0               CLEAR LAST BYTE OF PREVIOUS DATE
         CLI   FLAGP,2                 WAS THERE 2 OPERANDS PASSED ?
         BE    RANGE                   IF YES, COMPARE A RANGE OF DATE
         CLC   SDTE(L'SDTE),WRKAR      COMPARE DATES
         BNE   GET                     IF DIFFERENT, READ AGAIN
         B     STRTBL                  GO MOVE RECORD IN TABLE
RANGE    CLC   WRKAR(L'SDTE),SDTE      COMPARE REC.DATE - LOWER LIMIT
         BL    GET                     IF LOW, READ NEXT RECORD
         CLC   WRKAR(L'EDTE),EDTE      COMPARE REC.DATA - HIGHER LIMIT
         BH    GET                     IF HIGH, READ NEXT RECORD
         B     STRTBL                  GO MOVE RECORD IN TABLE
         SPACE 1
*------- SORT TABLE IN ASCENDING ORDER ON THE DATE.
         SPACE 1
EODATA   CH    R7,=H'1'                COMPARE WITH ONE
         BNH   NOSORT                  IF LOW OR EQUAL, NO SORT
         L     R6,ATBMSG
        $SORT  (R6),(R7),80,0,8        SORT TABLE ON DATE
         SPACE 1
*------- DISPLAY TABLE CONTENTS.
         SPACE 1
NOSORT   LTR   R7,R7                   ANY ENTRY ?
         BP    *+L'*+16                YES
         LA    R0,L'MSGNONE            NO, SAY NONE
         LA    R1,MSGNONE
         BAS   R14,PUTLNE
         B     CLDSD
         L     R4,ATBMSG               BEGINNING OF TABLE
TH1L1    LR    R6,R4
         OC    0(8,R4),0(R4)           IS IT AN ALL DAYS MESSAGE ?
         BNZ   DTELN                   NO
         LA    R0,L'MSGALLD            PUT ALL DAYS MESSAGE
         LA    R1,MSGALLD
         B     PDTLN
DTELN    MVC   WRKAR(7),=CL7'Date : '
         MVC   WRKAR+7(30),WRKAR+6
        $GFDATE WRKAR+7,,MDY,(R4)
         LTR   R15,R15
         BZ    DSPLDT
         MVC   WRKAR+7(11),=CL11'GFDATE R15='
         ST    R15,DSD
         UNPK  WRKAR+18(9),DSD(5)
         MVI   WRKAR+26,C'.'
         B     DSPLDL
DSPLDT   NC    WRKAR+8(2),=XL2'BFBF'   LOWER-CASE
         NC    WRKAR+13(2),=XL2'BFBF'
         MVC   WRKAR+26(10),=CL10'(  /  /  )'
         MVC   WRKAR+27(2),MDY+2
         MVC   WRKAR+30(2),MDY
         MVC   WRKAR+33(2),MDY+6
DSPLDL   LA    R0,36                   PUT DATE LINE
         LA    R1,WRKAR
PDTLN    BAS   R14,PUTLNE
TH1L2    MVC   WRKAR(4),=CL4' -> '     DISPLAY MESSAGE
         MVC   WRKAR+4(72),8(R4)
         LA    R0,76
         LA    R1,WRKAR
         BAS   R14,PUTLNE
         BCT   R7,*+L'*+4              LOOP UNTIL END
         B     CLDSD
         LA    R4,80(R4)               JUMP TO NEXT ENTRY
         CLC   0(8,R4),0(R6)           COMPARE DATES
         BE    TH1L2                   IF EQUAL, DISPLAY MESSAGE
         B     TH1L1                   IF DIFFERENT, DISPLAY DATE
CLDSD   CLOSE  (DIARY)
NXTREQ   CLI   DYNDSNM,C' '            INITIAL REQUEST ?
         BNE   *+L'*+12                NO
         LA    R0,L'MSGINIT
         LA    R1,MSGINIT
         B     *+L'*+8
         LA    R0,L'MSGENTER
         LA    R1,MSGENTER
         BAS   R14,PUTLNE              ASK CONTINUE OR END
         BAS   R14,GETLNE
         L     R3,INPUTADR
         CLC   0(2,R3),=H'4'           A NULL RETURN ?
         BH    *+L'*+12                NO, GO SEE WHAT REQUESTED
         CLI   DYNDSNM,C' '            YES, ON INITIAL REQUEST ?
         BE    NXTREQ                  YES, NO REPLY, GO ASK AGAIN
         B     XREPT                   NO, IT IS A REPEAT
         CLC   0(2,R3),=H'7'           MAY BE END ?
         BNE   ANALZE
         MVC   DSD(3),4(R3)
         TR    DSD(3),MAJMIN
         CLC   DSD(3),=CL3'END'
         BE    FRDSD                   END, EXIT
ANALZE   CLI   DYNDSNM,C' '            INITIAL REQUEST ?
         BE    INITRQ                  YES
         BAS   R9,GETDTES              GET DATE(S) IF ANY
         NOP   0                       +0
         BAS   R9,CHKDTES              +4 CHECK DATE(S)
XREPT    NI    SWERSE+1,OFF            OPEN FIRST PUTLINE WAY
         B     OPDSD
FRDSD    CLI   DYNDSNM,C' '            INITIAL REQUEST ?
         BE    LEAVE                   YES
         XC    DYNDSNM,DYNDSNM
        $DYNALL DYNLIST                DYNAMIC DE-ALLOC OF DIARY
         LTR   R15,R15                 TEST RETURN CODE
         BZ    LEAVE                   B ON DE-ALLOCATED
         STM   R15,R0,DSD
         LA    R0,L'ERROR1
         LA    R1,ERROR1
         BAS   R14,PUTLNE
         B     ERRDLL
NOTTSO  WTO    'NOT ALLOWED OUTSIDE TSO - REJECTED.',ROUTCDE=11,DESC=7
LEAVE    L     R1,ATBMSG
        FREEMAIN R,A=(1),LV=WSZ
        $XRET  CC=0
         SPACE 1
*        ERROR ANALYSIS ROUTINE (DIARY-READ).
         SPACE 1
        CNOP   0,4
ERRGET  SYNADAF   ACSMETH=BSAM
         MVC   MSGERR+4(72),56(R1)
         CLI   69(R1),C'*'             TEST UNSIGNIFICANT MESSAGE ?
         BE    SYNAD2                  BRANCH IF YES
         CLI   8(R1),C' '              TEST IF BINARY INFORMATIONS ?
         BE    SYNAD1                  BRANCH IF NOT
         UNPK  MSGERR+4(7),9(4,R1)
         TR    MSGERR+4(6),TRTAB-X'F0'
         MVI   MSGERR+10,C','
         UNPK  MSGERR+11(5),12(3,R1)
         TR    MSGERR+11(4),TRTAB-X'F0'
         MVI   MSGERR+15,C','
         B     SYNAD2
SYNAD1   MVC   MSGERR+4(12),8(R1)      MOVE BLANKS.
SYNAD2  SYNADRLS
         NI    SWGTE+1,OFF             SET NOP OPERATION
         BR    R14                     RETURN
         EJECT
*--------------------------------------------------------------------*
*        MESSAGES D'ERREURS.                                         *
*--------------------------------------------------------------------*
         SPACE 1
ERRPM1   LA    R0,L'ERRMPM1
         LA    R1,ERRMPM1
         BAS   R14,PUTLNE
         B     NXTREQ                  ASK AGAIN
ERRPM2   LA    R0,L'ERRMPM2
         LA    R1,ERRMPM2
         BAS   R14,PUTLNE
         B     NXTREQ                  ASK AGAIN
ERRPM3   LA    R0,L'ERRMPM3
         LA    R1,ERRMPM3
         BAS   R14,PUTLNE
         B     NXTREQ                  ASK AGAIN
NOCALL   L     R1,ATSO
         TM    0(R1),X'80'             ARE WE RUNNING IN BACKGROUND?
         BO    STSO                    NO, IN FOREGROUND
        WTO    '"CALL" NOT ALLOWED - REJECTED.',ROUTCDE=11,DESC=7
         B     LEAVE
STSO    TPUT   MSGNCL,L'MSGNCL
         B     LEAVE
ERRALL   STM   R15,R0,DSD
         LA    R0,L'ERROR0
         LA    R1,ERROR0
         BAS   R14,PUTLNE
ERRDLL   UNPK  ERROR1C+8(9),DSD(5)
         TR    ERROR1C+8(8),TRTAB-X'F0'
         MVI   ERROR1C+16,C' '
         UNPK  ERROR1C+22(9),DSD+4(5)
         TR    ERROR1C+22(8),TRTAB-X'F0'
         MVI   ERROR1C+30,C' '
         LA    R0,L'ERROR1C
         LA    R1,ERROR1C
         BAS   R14,PUTLNE
         B     LEAVE                   EXIT
ERRNFD   LA    R0,L'ERROR2
         LA    R1,ERROR2
         BAS   R14,PUTLNE
         B     LEAVE                   EXIT
ERRGSDT  MVI   ERROR3+5,C'S'
ERRGFDT  ST    R15,DSD
         UNPK  ERROR3+L'ERROR3-16(9),DSD(5)
         TR    ERROR3+L'ERROR3-16(8),TRTAB-X'F0'
         MVI   ERROR3+L'ERROR3-8,C' '
         LA    R0,L'ERROR3
         LA    R1,ERROR3
         BAS   R14,PUTLNE
         B     FRDSD                   EXIT
ERROPN   LA    R0,L'ERROR4
         LA    R1,ERROR4
         BAS   R14,PUTLNE
         B     FRDSD                   EXIT
ERRGEM   LA    R0,L'ERROR5
         LA    R1,ERROR5
         BAS   R14,PUTLNE
         LA    R0,L'MSGERR
         LA    R1,MSGERR
ERREXM   BAS   R14,PUTLNE
        CLOSE  (DIARY)
         B     FRDSD                   EXIT
         EJECT
*        GETDTES - GET DATES ROUTINE.
*
*              R0  : WORK REGISTER.
*              R1  : WORK REGISTER.
*              R2  : WORK REGISTER.
*              R3  : INPUT BUFFER POINTER.
*              R4  : WORK REGISTER.
*              R9  : LINK REGISTER - RETURN +0 = NO OR ONE DATE
*                                           +4 = TWO DATES
         SPACE 1
GETDTES  LA    R4,4(R3)                INPUT TEXT START ADDRESS
         LH    R0,0(R3)                TOTAL LENGTH
         ALR   R3,R0                   END ADDRESS + 1
         BCTR  R3,0                    ADJUST IT
         LA    R2,1
         XC    SDTE,SDTE               INITIALIZE DATE(S)
         XC    EDTE,EDTE
         MVI   FLAGP,0                 SAY NO DATES OPERANDS
         LA    R1,5(R4)
         CLR   R1,R3
         BH    *+L'*+14
         CLC   0(6,R4),=CL6'AGENDA'    COMMAND NAME ?
         BNE   *+L'*+4                 NO
         LA    R4,6(R4)                YES, SKIP IT
         CLI   0(R4),C' '              LOOK FOR START-DATE OPERAND
         BNE   *+L'*+6
         BXLE  R4,R2,*-8
         BR    R9                      RETURN = +0
         CLI   DYNDSNM,C' '            INITIAL REQUEST ?
         BNE   *+L'*+8                 NO
         CLI   0(R4),C'0'              YES, POSSIBLE LAST OPERAND ?
         BL    4(R9)                   YES
         LA    R1,DSD                  GET START-DATE OPERAND
         LA    R0,L'DSD
LPMVP1   MVC   0(1,R1),0(R4)
         BXLE  R4,R2,*+L'*+4
         B     CHKPM1
         CLI   0(R4),C' '
         BE    CHKPM1
         LA    R1,1(R1)
         BCT   R0,LPMVP1
         B     ERRPM1                  INVALID START-DATE OPERAND
CHKPM1   XC    WRKAR(8),WRKAR
         MVZ   WRKAR(8),DSD
         CLI   DSD+2,C'.'
         BE    *+L'*+8
         CLI   DSD+2,C'-'
         BNE   *+L'*+4
         MVI   DSD+2,C'/'
         CLI   DSD+5,C'.'
         BE    *+L'*+8
         CLI   DSD+5,C'-'
         BNE   *+L'*+4
         MVI   DSD+5,C'/'
         MVC   WRKAR+2(1),DSD+2
         MVC   WRKAR+5(1),DSD+5
         CLC   WRKAR(8),=CL8'00/00/00'
         BNE   ERRPM1                  INVALID START-DATE OPERAND
         CLC   DSD(8),=CL8'00/00/00'   START OF ALL AGENDA ?
         BNE   *+L'*+10                NO
         XC    SDTE,SDTE
         B     SETFL1
         CLC   DSD(8),=CL8'99/99/99'   END OF ALL AGENDA ?
         BNE   *+L'*+10                NO
         MVC   SDTE,=XL7'FFFFFFFFFFFFFF'
         B     SETFL1
         ICM   R0,B'0011',DSD          CHANGE DATE
         ICM   R0,B'1100',DSD+3          FROM DD/MM/YY
         STCM  R0,B'1111',DSD              TO MMDDYYYY
         CLC   DSD+6(2),=CL2'50'       SET CENTURY AHEAD
         BL    *+L'*+10
         MVC   DSD+4(2),=CL2'19'
         B     *+L'*+6
         MVC   DSD+4(2),=CL2'20'
        $GSDATE DSD,SDTE               CHECK VALIDITY
         LTR   R15,R15
         BNZ   CHKPM1
SETFL1   MVI   FLAGP,1                 SET FLAG TO ONE DATE OPERAND
         CLR   R4,R3
         BNLR  R9                      RETURN = +0
         CLI   0(R4),C' '              LOOK FOR END-DATE OPERAND
         BNE   *+L'*+6
         BXLE  R4,R2,*-8
         BR    R9                      RETURN = +0
         CLI   DYNDSNM,C' '            INITIAL REQUEST ?
         BNE   *+L'*+8                 NO
         CLI   0(R4),C'0'              YES, POSSIBLE LAST OPERAND ?
         BL    4(R9)                   YES
         LA    R1,DSD                  MOVE END-DATE OPERAND
         LA    R0,L'DSD
LPMVP2   MVC   0(1,R1),0(R4)
         BXLE  R4,R2,*+L'*+4
         B     CHKPM2
         CLI   0(R4),C' '
         BE    CHKPM2
         LA    R1,1(R1)
         BCT   R0,LPMVP2
         B     ERRPM2                  INVALID END-DATE OPERAND
CHKPM2   XC    WRKAR(8),WRKAR
         MVZ   WRKAR(8),DSD
         CLI   DSD+2,C'.'
         BE    *+L'*+8
         CLI   DSD+2,C'-'
         BNE   *+L'*+4
         MVI   DSD+2,C'/'
         CLI   DSD+5,C'.'
         BE    *+L'*+8
         CLI   DSD+5,C'-'
         BNE   *+L'*+4
         MVI   DSD+5,C'/'
         MVC   WRKAR+2(1),DSD+2
         MVC   WRKAR+5(1),DSD+5
         CLC   WRKAR(8),=CL8'00/00/00'
         BNE   ERRPM2                  INVALID END-DATE OPERAND
         CLC   DSD(8),=CL8'00/00/00'   START OF ALL AGENDA ?
         BNE   *+L'*+10                NO
         XC    EDTE,EDTE
         B     SETFL2
         CLC   DSD(8),=CL8'99/99/99'   END OF ALL AGENDA ?
         BNE   *+L'*+10                NO
         MVC   EDTE,=XL7'FFFFFFFFFFFFFF'
         B     SETFL2
         ICM   R0,B'0011',DSD          CHANGE DATE
         ICM   R0,B'1100',DSD+3          FROM DD/MM/YY
         STCM  R0,B'1111',DSD              TO MMDDYYYY
         CLC   DSD+6(2),=CL2'50'       SET CENTURY AHEAD
         BL    *+L'*+10
         MVC   DSD+4(2),=CL2'19'
         B     *+L'*+6
         MVC   DSD+4(2),=CL2'20'
        $GSDATE DSD,EDTE               CHECK VALIDITY
         LTR   R15,R15
         BNZ   CHKPM2
SETFL2   MVI   FLAGP,2                 SET FLAG TO TWO DATES OPERANDS
         B     4(R9)                   RETURN = +4
         EJECT
*        CHKDTES - CHECK DATE(S) ROUTINE.
*                  GET TODAY DATE IF NONE SPECIFIED.
*
*              R2  : WORK REGISTER.
*              R9  : LINK REGISTER.
         SPACE 1
CHKDTES  CLI   FLAGP,0                 OPERAND(S) PASSED ?
         BNE   SEEWH                   YES
         LA    R2,SDTE
SETDTE  $GFDATE ,,MDY
         LTR   R15,R15
         BNZ   ERRGFDT
        $GSDATE MDY,(R2)
         LTR   R15,R15
         BNZ   ERRGSDT
         BR    R9                      RETURN
SEEWH    CLI   FLAGP,1                 ONLY ONE OPERAND PASSED ?
         BE    SETONE+L'SETONE         YES
         CLC   SDTE,EDTE               COMPARE START AGAINST END DATES
         BLR   R9                      IF LOW, OK, RETURN
         BE    SETONE                  IF EQUAL, GO SAY ONLY ONE
         XC    SDTE,EDTE               IF HIGH, EXCHANGE DATES
         XC    EDTE,SDTE
         XC    SDTE,EDTE
         BR    R9                      RETURN
SETONE   MVI   FLAGP,1                 IF EQUAL, SAY ONLY START-DATE
         OC    SDTE,SDTE               IS IT START OF ALL AGENDA ?
         BNZ   *+L'*+12                NO
         MVI   FLAGP,2                 YES, SAY TWO DATES
         LA    R2,EDTE                 SAY UNTIL TODAY
         B     SETDTE
         CLC   SDTE,=XL7'FFFFFFFFFFFFFF' IS IT END OF ALL AGENDA ?
         BNER  R9                      NO, RETURN
         MVI   FLAGP,2                 YES, SAY TWO DATES
         MVC   EDTE,SDTE               SET IT AS END-DATE
         LA    R2,SDTE                 SAY FROM TODAY
         B     SETDTE
         EJECT
*        PUTLNE - PUTLINE ROUTINE.
*
*              R0  : MESSAGE TEXT LENGTH.
*              R1  : POINTS TO THE MESSAGE TEXT.
*              R14 : LINK REGISTER.
         SPACE 1
PUTLNE   STM   R0,R15,SAVEREGS         SAVE CALLER'S REGS
SWERSE   NOP   SKPFRST
         OI    SWERSE+1,ON             CLOSE THIS WAY
         L     R1,ATSO
         TM    0(R1),X'80'             ARE WE RUNNING IN BACKGROUND?
         BZ    SKPCLR                  YES, SKIP CLEAR
        CALL   ERASE                   EVENTUALLY CLEAR IF SCREEN
         LA    R0,L'MSGTIT             START BY THE TITLE
         LA    R1,MSGTIT
         MVC   SAVEFRST(16*4),SAVEREGS
         BAS   R14,PUTLNE
         MVC   SAVEREGS(16*4),SAVEFRST
SKPCLR   LM    R0,R1,SAVEREGS          RESTORE PARM-REGS
SKPFRST  LTR   R2,R0
         BNP   NOMSG
         BCT   R2,*+L'*+6
         MVC   MSGOUT(*-*),0(R1)
         EX    R2,*-6
         MVC   MSGCNTL,=AL2(L'MSGWORK,0)  MOVE IN PUTLINE CTL CHARS
         LA    R5,MSGWORK              ADDR OF MSG BUFFER
         L     R2,CPPLADDR             ADDR OF CPPL
         USING CPPL,R2
         L     R3,CPPLUPT              UPT ADDR
         L     R4,CPPLECT              ECT ADDR
         DROP  R2
         XC    PECB,PECB               CLEAR ECB TO ZEROS
         XC    PTPB(12),PTPB           CLEAR PLIST TO ZEROS
         XC    IOPLZ(16),IOPLZ         CLEAR PARM LIST TO ZEROS
         LA    R1,IOPLZ                ADDR OF LIST
        PUTLINE PARM=PTPB,UPT=(R3),ECT=(R4),ECB=PECB,                  X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X
               OUTPUT=((R5),TERM,SINGLE,DATA),                         X
               MF=(E,(1))
         MVI   MSGWORK,C' '            CLEAR BUFFER TO SPACES
         MVC   MSGWORK+1(L'MSGWORK-1),MSGWORK
NOMSG    LM    R0,R15,SAVEREGS         RESTORE CALLER'S REGS
         BR    R14                     RETURN TO CALLER
         EJECT
*        GETLNE - GETLINE ROUTINE.
*
*              R14 : LINK REGISTER.
*              AT EXIT : INPUTADR = A(INPUT BUFFER ADDRESS).
         SPACE 1
GETLNE   STM   R0,R15,SAVEREGS         SAVE CALLER'S REGS
         L     R2,CPPLADDR             ADDR OF CPPL
         USING CPPL,R2
         L     R3,CPPLUPT              UPT ADDR
         L     R4,CPPLECT              ECT ADDR
         DROP  R2
         XC    RECB,RECB               CLEAR OUT ECB
         XC    GTPBX(8),GTPBX          CLEAR GET PARMLIST TO ZEROS
         XC    IOPLX(16),IOPLX         CLEAR PARM LIST TO ZEROS
         LA    R1,IOPLX                ADDR OF LIST
        GETLINE PARM=GTPBX,UPT=(R3),ECT=(R4),ECB=RECB,                 X
               TERMGET=(EDIT,WAIT),INPUT=(TERM,LOGICAL),               X
               MF=(E,(1))
         LA    R5,GTPBX                ADDRESSABILITY FOR THE GTPB
         USING GTPB,R5
         MVC   INPUTADR,GTPBIBUF       SAVE ADDR OF INPUT BUFFER
         DROP  R5
         LM    R0,R15,SAVEREGS         RESTORE CALLER'S REGS
         BR    R14                     RETURN TO CALLER
         EJECT
*--------------------------------------------------------------------*
*        VARIABLES DE TRAVAIL.                                       *
*--------------------------------------------------------------------*
         SPACE 1
DIARY   DCB    DDNAME=DIARY,DSORG=PS,MACRF=GM,EODAD=EODATA,            X
               SYNAD=ERRGET,RECFM=FB,BLKSIZE=9040,LRECL=80
         SPACE 1
*--------------------------------------------------------------------*
*        DYNAMIC ALLOCATION PARAMETER LIST.                          *
*--------------------------------------------------------------------*
         SPACE 1
DYNLIST  DC    CL8'DIARY'  DDNAME
DYNDSNM  DC    CL44' '     DSNAME
         DC    CL8' '      MEMBER NAME
         DC    CL8' '      PASSWORD
         DC    CL8'SHR'    STATUS
         DC    CL256' '    FILLER
         DC    CL88' '     FILLER
         SPACE 1
*                 0 1 2 3 4 5 6 7 8 9 A B C D E F
MAJMIN   DC    X'000102030405060708090A0B0C0D0E0F'  0
         DC    X'101112131415161718191A1B1C1D1E1F'  1
         DC    X'202122232425262728292A2B2C2D2E2F'  2
         DC    X'303132333435363738393A3B3C3D3E3F'  3
         DC    X'404142434445464748494A4B4C4D4E4F'  4
         DC    X'505152535455565758595A5B5C5D5E5F'  5
         DC    X'606162636465666768696A6B6C6D6E6F'  6
         DC    X'707172737475767778797A7B7C7D7E7F'  7
         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F'  C
         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'  9
         DC    X'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'  A
         DC    X'F0F1F2F3F4F5F6F7F8F9BABBBCBDBEBF'  B
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'  C
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'  D
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'  E
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'  F
TRTAB    DC    C'0123456789ABCDEF'
         EJECT
SAVEREGS DC    18F'0'    FOR PUTLINE/GETLINE
SAVEFRST DC    18F'0'    FOR FIRST PUTLINE
CPPLADDR DC    A(*-*)    PUTLINE/GETLINE USE
ATBMSG   DC    A(*-*)    ADDRESS OF TABLE OF MESSAGES TO DISPLAY
MSGWORK  DS    0CL84     PUTLINE WORK USE
MSGCNTL  DC    F'0'           CONTROL WORD FOR PUTLINE
MSGOUT   DC    CL80' '        PUTLINE TEXT
IOPLZ    DC    4F'0'          I-O PARM LIST FOR PUTLINE
PTPB     DC    3F'0'
PECB     DC    F'0'
IOPLX    DC    4F'0'          I-O PARM LIST FOR GETLINE
GTPBX    DC    2F'0'
INPUTADR DC    A(*-*)         ADDR FOR INPUT BFFER
RECB     DC    F'0'
         SPACE 1
EXTRL   EXTRACT ATSO,'S',FIELDS=(TSO,PSB),MF=L
ATSO     DC    A(*-*)
APSCB    DC    A(*-*)
         SPACE 1
DSD      DC    D'0'
WRKAR    DC    CL80' '
MDY      DC    CL8' '    MONTH, DAY, YEAR (MMDDYYYY) FROM GFDATE
SDTE     DC    CL7' '    TO GET EVENTUAL START-DATE OPERAND (YYYYDDD)
EDTE     DC    CL7' '    TO GET EVENTUAL END-DATE OPERAND (YYYYDDD)
USID     DC    CL7' '    USER-ID
ALTUI    DC    CL7' '    TO GET EVENTUAL LAST OPERAND (USERID)
FLAGP    DC    XL1'0'    FLAG TO SIGNAL AN OPERAND WAS PASSED
FLAG3D   DC    XL1'0'    FLAG TO SIGNAL A LAST OPERAND
         EJECT
MSGERR   DC    CL78' '
MSGNCL   DC    C'"CALL" NOT ALLOWED - REJECTED.'
MSGINIT  DC    C'Re-enter correct command or "END" :'
MSGENTER DC    C'Enter date(s), "END" or hit "ENTER" to repeat :'
MSGTIT   DC    C'    =====  A G E N D A  ====='
MSGALLD  DC    C'Date : all days'
MSGNONE  DC    C'--- None in AGENDA for your request.'
MSGOVFL  DC    C'--- Internal table space overflow, exit.'
ERRMPM1  DC    C'--- Start-date operand is invalid.'
ERRMPM2  DC    C'--- End-date operand is invalid.'
ERRMPM3  DC    C'--- User-ID last operand is invalid.'
MESSAGE1 DC    C'---    At least one date has been found which is not'
MESSAGE2 DC    C'       numeric form (except dates starting by an *).'
MESSAGE3 DC    C'---    Verify the dates in your file AGENDA, please.'
MESSAGE4 DC    C'---    At least one date has been found which is not'
MESSAGE5 DC    C'       coded using slash, period or minus sign as'
MESSAGE6 DC    C'       separator (except dates starting by an *).'
MESSAGE7 DC    C'---    Date "........" invalid (GSDATE R15=........).'
ERROR0   DC    C'--- File AGENDA allocation error.'
ERROR1   DC    C'--- File AGENDA de-allocation error.'
ERROR1C  DC    C'    R15=........ - R0=........ - Exit.'
ERROR2   DC    C'--- File AGENDA not found, create it, please.'
ERROR3   DC    C'--- GFDATE error detected - R15=........ - exit.'
ERROR4   DC    C'--- OPEN error detected on file AGENDA, exit.'
ERROR5   DC    C'--- READ error detected on file AGENDA, exit.'
         EJECT
        LTORG
         SPACE 1
        DROP   R10,R11
        IKJCPPL
        IKJPSCB
        IKJEBECA
        IKJGTPB
        DCBD   DEVD=DA,DSORG=PS
         SPACE 2
         END
