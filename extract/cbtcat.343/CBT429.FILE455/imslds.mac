ILDS     TITLE '--- I M S L D S --- I.M.S. LOG DATA-SET(S) ---'
         PRINT OFF
         MACRO
&NAME   @CALL  &RTN,&ERR=
         AIF   ('&RTN' EQ '').ERR
&NAME    L     R15,=A(&RTN)        GET ROUTINE ADDRESS
         BASR  R14,R15             LINK TO IT
         AIF   ('&ERR' EQ '').X
         BNZ   &ERR                BRANCH ON ERROR RC
.X       MEXIT
.ERR    MNOTE  8,'===> ROUTINE NAME MISSING *************************'
         MEND
         MACRO
&NAME   @ENTER &DUMMY
         CNOP  0,8
         USING *,R11
&NAME    STM   R14,R12,12(R13)     SAVE CALLER REGISTERS
         LR    R11,R15             LOCAL BASE REGISTER
         LR    R1,R13              OLD SAVE-AREA
         LA    R13,*+L'*+4         NEW SAVE-AREA
         B     *+L'*+18*4
         DC    18F'0' ------------ LOCAL SAVE-AREA
         XC    0(18*4,R13),0(R13)  CLEAN NEW SAVE-AREA
         ST    R13,8(R1)           CHAIN SAVE-AREA'S
         ST    R1,4(R13)
         MEND
         MACRO
&NAME   @EXIT  &RC
&NAME    L     R13,4(R13)          BACK TO PREVIOUS SAVE AREA
         AIF   ('&RC' EQ '').A
         AIF   ('&RC'(1,1) EQ '(').B
         AIF   ('&RC' NE '0').C
.A       XC    16(4,R13),16(R13)   SET RETURN CODE
         AGO   .D
.B       ST    &RC(1),16(R13)      SET RETURN CODE
         AGO   .D
.C       MVC   16(4,R13),=AL4(&RC) SET RETURN CODE
.D       LM    R14,R12,12(R13)     RESTORE REGISTERS
         MVI   12(R13),X'FF'       SET RETURN INDICATOR
         LTR   R15,R15             SET CC ON RETURN CODE
         BR    R14                 RETURN TO CALLER
         MEND
         MACRO
        @STOP  &DUMMY
        LTORG  ,
         SPACE 1
         DROP  R11                 KILL LOCAL ADDRESSABILITY
         MEND
         PRINT ON
         SPACE 1
IMSLDS   START 0
         SPACE 1
* PURPOSE :    AUTOMATIC JCL GENERATION TO CUMULATE ALL DAY'S IMS LOG
* =========    DATA-SET(S) INTO A ONE MONTH DATA-SET.
*
* FUNCTIONAL SUMMARY :
* ====================
*        THE JCL SKELETON, USED FOR JOB GENERATION, IS OBTAINED FROM
*   A MEMBER NAMED IMSLOG.. (DEFAULT FOR .. IS 00), AND LOCATED IN A
*   PREDEFINED PARTITIONED DATA-SET (WITH LRECL=80 AND DECLARED AT THE
*   ASSEMBLY STEP WITH SYSPARM).
*        VARIOUS MEMBERS IMSLOG.. (JCL SKELETONS) CAN BE BUILD AS YOU
*   WANT TO GENERATE DIFFERENT JOBS, ASSUMING THEY ARE ALL BASED ON
*   IMS LOG DATA-SET(S) MANIPULATION (NORMAL JCL STATEMENTS CARDS).
*   THE FIRST JCL STATEMENT SUPPLIED MUST BE A JOB CARD, WHICH WILL
*   BE USED BY SUBMIT WHEN STARTED TASK RUNNING. SOME OTHER CARDS ARE
*   EXPLAINED BELOW :
*        1. CARDS STARTING WITH THREE ASTERISKS (COLUMNS 1-3 = ***)
*           ARE CONSIDERED AS PRIVATE COMMENT CARDS (NEVER COPIED OR
*           SUBMITED).
*        2. SPECIAL CARDS STARTING (COLUMNS 1-2) WITH A QUESTION MARK
*           FOLLOWED BY AN INDICATOR CHARACTER ARE CONTROL PROCESSING
*           ORIENTED.
*           POSITIONAL CONTROL ONLY :
*           ?I = IS MANDATORY AND INDICATE WHERE THE EVENTUAL TYPRUN=
*                PARAMETER CARD CAN BE INSERTED IN THE JOB STATEMENT.
*           ?0 = IS MANDATORY AND INDICATE WHERE STARTS THE NORMAL JCL
*                SKELETON (WHEN NOT STARTED TASK). GENERALLY THIS IS
*                PLACED AFTER THE JOB STATEMENT.
*           SUBSTITUTION VALUES DEFINITION :
*           ?1 = IS MANDATORY AND DEFINES THE IMS DAY'S LOG DATA-SET(S)
*                LEVEL NAME (THIS IS THE LEVEL TO SEARCH THE DAY'S
*                DATA-SET(S) IN THE CATALOG).
*           ?2 = IS OPTIONAL AND DEFINES THE IMS MONTH LOG DATA-SET
*                LEVEL NAME (THIS IS THE LEVEL TO CREATE THE MONTH'S
*                DATA-SET).
*           THEN ?1... AND ?2... CODING ARE USED TO INDICATE WHERE
*           SUBSTITUTION MUST BE DONE IN THE JCL SKELETON.
         EJECT
* HOW TO INVOKE IT :
* ==================
*     1. AS CONSOLE START COMMAND :
*             S IMSLOG,D=YYDDD,J=XX,O=COPY
*                                     SCAN
*        WHERE "IMSLOG" MAY BE, I.E., THE FOLLOWING PROCEDURE :
*             //IMSLOG  PROC D=,J=,O=
*             //IMSLOG  EXEC PGM=IMSLDS,PARM='DAY=&D,JCL=&J,&O'
*                                    OR PARM='D=&D,J=&J,&O'
*     2. AS BATCH EXEC PROCEDURE :
*             //... EXEC IMSLOG,D=YYDDD,J=XX
*     3. AS BATCH EXEC :
*             //... EXEC PGM=IMSLDS,PARM='DAY=YYDDD,JCL=XX'
*                                OR PARM='D=YYDDD,J=XX'
*     4. AS TSO CALL :
*             CALL '...DSNAME...(IMSLDS)' 'DAY=YYDDD,JCL=XX'
*                                      OR 'D=YYDDD,J=XX'
*     5. AS TSO COMMAND OR SUB-COMMAND :
*             IMSLDS ... (FOR SYNTAX DESCRIPTION SEE BELOW) ...
*
* WHERE : - YYDDD IS THE DESIRED SERIAL DAY DATE SELECTION (IF NOT
* -------   SPECIFIED, YESTERDAY DATE IS USED).
*         - JCL=XX (OR JOB=/J=) IS THE TWO CHARACTERS SUFFIX TO FORM
*           THE MEMBER NAME "IMSLOG.." (DEFAULT IS 00).
*         - COPY/SCAN (OR C/S) ARE JCL SUBMIT OPTIONS (JOB TYPRUN).
*
* NOTES : 1. ONLY WHEN RUNNING AS SYSTEM TASK (THROUGH OPERATOR START
* =======    COMMAND), THE "COPY" OR "SCAN" OPTIONS ARE ACCEPTED AND
*            ALL GENERATED JCL STATEMENTS ARE IMMEDIATELY "SUBMIT" TO
*            JES2.
*         2. OTHERWISE (BATCH OR TSO RUNNING), THE GENERATED JCL IS
*            ALWAYS STORED IN A NEW (CREATED) DATA-SET NAMED AS
*            FOLLOWS : '#0.GENJCL.D#1.T#2'
*            WHERE : #0 = CURRENT RACF USER-ID
*                    #1 = YYDDD (CURRENT DAY)
*                    #2 = HHMMSS (CURRENT TIME OF DAY)
*            YOU MAY THEN "SUBMIT" IT, IF YOU WANT.
         EJECT
* TSO COMMAND OR SUB-COMMAND SYNTAX :
* ===================================
*        IMSLDS  DAY(DD/MM/YY)  JCL(XX)  OPTION
*                ALIAS : D(DD/MM/YY)  JOB(XX)
*                                     J(XX)
*        IMSLDS  FROM(DD/MM/YY)  TO(DD/MM/YY)  JCL(XX)  OPTION
*                ALIAS : F(DD/MM/YY)  T(DD/MM/YY)  JOB(XX)
*                                                  J(XX)
* WHERE : DAY(DD/MM/YY) INDICATE A PARTICULAR DATE SELECTION, IF
* -------      NOT SPECIFIED IT MEANS YESTERDAY DATE.
*         FROM(DD/MM/YY) AND TO(DD/MM/YY) INDICATE A RANGE OF DATES
*              (RESPECTIVELY THE STARTING AND ENDING DATE), WHICH
*              MUST FALL IN THE SAME MONTH.
*              IF THE ENDING DATE IS NOT SUPPLIED IT MEANS THE END
*              OF THE STARTING DATE MONTH OR THE YESTERDAY DATE WHEN
*              THIS IS LOWER.
*         JCL(XX) IS THE TWO CHARACTERS SUFFIX TO FORM THE MEMBER NAME
*              "IMSLOG.." (DEFAULT IS 00).
*         OPTION MAY ONE OF THE FOLLOWING KEYWORDS :
*                   MSG OR LIST (ALIAS M OR L)
*              OR : NOMSG OR NOLIST (ALIAS N)
*              WHICH ALLOWS YOU TO ACCEPT/SUPPRESS ALL MESSAGES.
* REMARKS : 1. A "IMSLDS" COMMAND WITH "FROM" AND "TO" DATES IDENTICAL
* --------     IS LIKE "IMSLDS DAY(DD/MM/YY)" COMMAND.
*           2. A "IMSLDS" COMMAND WITH ONLY THE "FROM(DD/MM/YY)" DATE
*              WHICH MATCHES THE LAST DAY OF THE MONTH IS ALSO LIKE
*              A "IMSLDS DAY(DD/MM/YY)" COMMAND.
*
* COMPLETION CODES :     0 = NORMAL TERMINATION.
* ==================    16 = A SEVERE ERROR HAS BEEN DETECTED.
*
* TSO CLIST :  WHEN RUNNING IN A TSO CLIST ENVIRONMENT, A VARIABLE
* ===========  NAMED "EUGENDS" WILL CONTAIN THE NAME OF THE JCL
*              GENERATED DATA-SET.
*
* AUTHOR :     MOINIL P.A. - COMPUTING CENTRE
* ========                   J.R.C. - ISPRA ESTABLISHMENT
*                            21020 ISPRA (VA), ITALY
         EJECT
        $DEFREG
        $XENT  BASE=R12
         ST    R1,APARM
         B     BEGIN
         SPACE 1
         AIF   ('&SYSPARM' NE '').OK
        MNOTE  8,' JCL SKELETONS LIBRARY NAME MISSING * * * * * * * * '
.OK      ANOP
RPLMEM   DC    CL44'&SYSPARM '
         EJECT
BEGIN   @CALL  XINIT,ERR=LEAVE
        @CALL  XGTSKL,ERR=LEAVE
        @CALL  XIDCAMS,ERR=LEAVE
        @CALL  XANALO,ERR=LEAVE
         TM    RUNSW,SWSYS         SYSTEM TASK?
         BO    DOSBM               YES
        @CALL  XGENER
         B     LEAVE
DOSBM   @CALL  XSUBMIT
LEAVE    LR    R10,R15
        @CALL  XEXIT
         SPACE 1
        $XRET  CC=(R15)
         EJECT
*------- COMMON DYNAMIC FAILURE MESSAGE ROUTINE
*              R1 - DYNAM OPERATION NAME ('ALL.' OR 'FREE')
*              R6 - DD-NAME POINTER
*              R8 - LINK REGISTER
         SPACE 1
DFMR     STCM  R1,B'1111',DFOPER
         MVC   DFNAME(L'DDNAME),0(R6)
         UNPK  DFERC(L'DFERC+1),RCODES(3)
         TR    DFERC(L'DFERC),TRTAB-X'F0'
         MVI   DFERC+L'DFERC,C''''
         UNPK  DFINFO(L'DFINFO+1),RCODES+2(3)
         TR    DFINFO(L'DFINFO),TRTAB-X'F0'
         MVI   DFINFO+L'DFINFO,C''''
         UNPK  DFRC15(L'DFRC15+1),RCODES+4(5)
         TR    DFRC15(L'DFRC15),TRTAB-X'F0'
         MVI   DFRC15+L'DFRC15,C''''
         LA    R1,DFMSG1
         BAS   R9,SMSG
         LA    R1,DFMSG2
         BAS   R9,SMSG
         BR    R8
         EJECT
*------- COMMON SEND MESSAGE ROUTINE
*              R1 - POINTER -> AL1(MESSAGE LENGTH),C'...MESSAGE...'
*              R9 - LINK REGISTER
         SPACE 1
SMSG     TM    REQSW,SWMSG         SUPPRESS ALL MESSAGES?
         BOR   R9                  YES
         XR    R15,R15
         IC    R15,0(R1)
         LTR   R15,R15
         BNPR  R9
         LH    R14,MSGAR
         SH    R14,=H'4'
         CLR   R15,R14
         BNH   *+L'*+2
         LR    R15,R14
         LR    R0,R15
         TM    RUNSW,SWTFG+SWTBG
         BNZ   SMSG1
         BCT   R15,*+L'*+6
         MVC   MSGAR+4(*-*),1(R1)
         EX    R15,*-6
        WTO    ,MF=(E,MSGAR)
         LH    R15,MSGAR
         SH    R15,=H'6'
         MVI   MSGAR+4,C' '
         EX    R15,*+L'*+2
         BR    R9
         MVC   MSGAR+5(*-*),MSGAR+4
SMSG1    BCT   R15,*+L'*+6
         MVC   MSGOUT(*-*),1(R1)
         EX    R15,*-6
         LA    R15,L'MSGCNTL+1(R15)
         STH   R15,MSGCNTL
         LA    R0,MSGWORK
         L     R1,ACPPL
         USING CPPL,R1
         L     R14,CPPLUPT
         L     R15,CPPLECT
         DROP  R1
         XC    PECB,PECB
         XC    PTPB(PTPBLEN),PTPB
         XC    IOPLZ(IOPLLEN),IOPLZ
         LA    R1,IOPLZ
        PUTLINE PARM=PTPB,UPT=(R14),ECT=(R15),ECB=PECB,                X
               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),                     X
               OUTPUT=((R0),TERM,SINGLE,DATA),                         X
               MF=(E,(1))
         XC    MSGCNTL,MSGCNTL
         MVI   MSGOUT,C' '
         MVC   MSGOUT+1(L'MSGOUT-1),MSGOUT
         BR    R9
         EJECT
*------- COMMON CONSTANTS AND WORK AREAS
         SPACE 1
DBLWRK   DC    D'0'
CHKWRK   DC    D'0'
YESWRK   DC    D'0'
DYNPLS  $DYNALL ,RCODES,MF=L
RCODES   DC    2F'0'               DYN. ALL. RETURN CODES
APARM    DC    A(*-*)
ATIOT    DC    A(*-*)
ACOMM    DC    A(*-*)
ATSO     DC    A(*-*)
APSCB    DC    A(*-*)
ACPPL    DC    A(*-*)
DALIST   DS    0A
DAGSKL   DC    A(*-*)
DAIDIN   DC    A(*-*)
DAIDOUT  DC    A(*-*)
DAGJCL   DC    A(*-*)
NDW      EQU   (*-DALIST)/L'DALIST      NUMBER OF DYN.ALL. AREAS
TDW      EQU   (((NDW*DYNLGTH)+7)/8)*8  TOTAL GETMAIN AREA LENGTH
LDYNW    DC    A(TDW)              DYN.ALL. TOTAL LENGTH
SDYNW    DC    A(*-*)              DYN.ALL. START ADDRESS
SKW      EQU   (((256*72)+7)/8)*8  TOTAL GETMAIN AREA LENGTH
LSKLW    DC    A(SKW)              JCL SKELETON TOTAL LENGTH
SSKLW    DC    A(*-*)              JCL SKELETON START ADDR. (JOB CARD)
SKLJS    DC    A(*-*)              START WITHOUT JOB CARD
SKLJE    DC    A(*-*)              LAST JCL CARD
SKLJI    DC    A(*-*)              INSERT TYPRUN= CARD (JOB CARD)
LVECT    DC    A(TVT)              ONE VECTOR TOTAL LENGTH
SVECT    DC    A(*-*)              FIRST VECTOR ADDRESS (SEE VTDSECT)
CVECT    DC    A(*-*)              CURRENT VECTOR ADDRESS
OPTIDC   DC    H'0'
DNMIDC   DC    Y(DNML)
         DC    4XL8'0'
DDI      DC    CL8'IDCIN'
DDO      DC    CL8'IDCOUT'
DNML     EQU   (*-DNMIDC)-L'DNMIDC
DDP      DC    CL8'SYSPDS'
TRTAB    DC    CL16'0123456789ABCDEF'
SBNAME   DC    CL8' '
DDG      DC    CL8'GENJCL '
USID     DC    CL8' '
MBNME    DC    CL8'IMSLOG00'
YDAY     DC    CL5' '              YYDDD
SDAY     DC    CL5' '              YYDDD
EDAY     DC    CL5' '              YYDDD
DDAY     DC    CL6' '              MMDDYY
FDAY     DC    CL6' '              YYMMDD
TDAY     DC    CL6' '              YYMMDD
MONTH    DC    CL4' '              YYMM
USIDL    DC    XL1'0'
RUNSW    DC    XL1'0'
SWSYS    EQU   X'80'               SYSTEM TASK RUNNING
SWTFG    EQU   X'40'               TSO FOREGROUND RUNNING
SWTBG    EQU   X'20'               TSO BACKGROUND RUNNING
REQSW    DC    XL1'0'
SWMSG    EQU   X'80'               NO MSG OPTION (TSO COMMAND)
SWOLD    EQU   X'08'               MONTH LOG DATA-SET EXIST
SWCPY    EQU   X'02'               SUBMIT JCL OPTION COPY
SWSCN    EQU   X'01'               SUBMIT JCL OPTION SCAN
MANSW    DC    XL1'0'
SWDAY    EQU   X'80'               DAY LEVEL NAME MANDATORY
SWMON    EQU   X'40'               MONTH LEVEL NAME MANDATORY
         SPACE 1
MSGAR   WTO    '                                                       1
                                      ',ROUTCDE=11,DESC=7,MF=L
PTPB    PUTLINE MF=L
PTPBLEN  EQU   *-PTPB
         DS    0F                  I-O PARM LIST FOR PUTLINE
IOPLZ    DS    (IOPLLEN)X
PECB     DS    F
MSGWORK  DS    0CL82               PUTLINE WORK USE
MSGCNTL  DS    F                   CONTROL WORD FOR PUTLINE
MSGOUT   DS    CL78                PUTLINE TEXT
         SPACE 1
VARDATA  DC    CL44' '
         SPACE 1
DFMSG1   DC    AL1(DFMSG1L),C' -> DYNAMIC '
DFOPER   DC    CL4' ',C' ('
DFNAME   DC    CL8' ',C') FAILED : R15 = X'''
DFRC15   DC    CL8' ',C''' '
DFMSG1L  EQU   *-(DFMSG1+1)
DFMSG2   DC    AL1(DFMSG2L),CL28' ',C'ERC = X'''
DFERC    DC    CL4' ',C''', INFO = X'''
DFINFO   DC    CL4' ',C''' '
DFMSG2L  EQU   *-(DFMSG2+1)
MSERL    DC    AL1(MSERLL),C' => EU-S02A UNMATCHED '
         DC    C'"//LOG...    DD DSN=?1...,DISP=" <-DD-CARD '
MSERLL   EQU   *-(MSERL+1)
MSERS    DC    AL1(MSERSL),C' => EU-S03A CANNOT SPLIT '
         DC    C'"//LOG...    DD DSN=?1...,DISP=" <-DD-CARD '
MSERSL   EQU   *-(MSERS+1)
MSERO    DC    AL1(MSEROL),C' => EU-S04A UNMATCHED '
         DC    C'"//LOGOUT    DD DSN=?2...,DISP=..., " <-DD-CARD '
MSEROL   EQU   *-(MSERO+1)
MSERX    DC    AL1(MSERXL),C' => EU-S05A 44 CHARACTERS LONG '
         DC    C'"?1... " IS MANDATORY '
MSERXL   EQU   *-(MSERX+1)
         SPACE 1
         DC    AL1(L'TEXT)
TEXT     DC    CL80' '
LLN      DC    AL1(*-*)
LINE     DC    CL133' '
DAYMNL   DC    AL1(*-*)
DAYMN    DC    CL44' '
LOGMNL   DC    AL1(*-*)
LOGMN    DC    CL44' '
         SPACE 1
*------- MAIN LITERAL POOL
         SPACE 1
        LTORG
         EJECT
XINIT   @ENTER
         USING PSA,R0
         L     R1,PSAAOLD          GET CURRENT USER-ID (RACF)
         DROP  R0
         USING ASCB,R1
         L     R2,ASCBASXB
         DROP  R1
         USING ASXB,R2
         L     R1,ASXBSENV
         DROP  R2
         USING ACEE,R1
         MVC   USID,ACEEUSRI       GET USER ID
         MVC   USIDL,ACEEUSRL      GET USER ID LENGTH
         DROP  R1
         XC    ATIOT(L'ATIOT+L'ACOMM+L'ATSO+L'APSCB),ATIOT
        EXTRACT ATIOT,'S',FIELDS=(TIOT,COMM,TSO,PSB)
         L     R1,ACOMM            COMMUNICATION AREA ADDRESS
         L     R2,4(R1)            CIB ADDRESS
         LA    R2,0(R2)
         LTR   R2,R2               CURRENT CIB SET UP?
         BZ    *+L'*+12            NO
         USING CIBDSECT,R2
         CLI   CIBVERB,CIBSTART    START COMMAND?
         BNE   *+L'*+4             NO
         OI    RUNSW,SWSYS         YES, SYSTEM TASK
         DROP  R2
         L     R1,ATIOT
         USING TIODSECT,R1
         MVC   SBNAME,TIOCNJOB
         DROP  R1
         ICM   R2,B'1111',APSCB
         BZ    PCALL               IF 0 = BATCH-EXEC
         L     R1,ATSO
         TM    0(R1),X'80'
         BZ    *+L'*+8             IF 0 = TSO-BACKGROUND
         OI    RUNSW,SWTFG
         B     *+L'*+4
         OI    RUNSW,SWTBG
         L     R3,APARM            RESTORE PARM. ADDRESS
         TM    0(R3),X'80'         CALL PARM. LIST?
         BO    PCALL               YES, CALL UNDER TSO
         USING CPPL,R3             SET CPPL ADDRESSABILITY
         USING PSCB,R2
         CLC   PSCBUPT,CPPLUPT     CPPL+4 = UPT ADDRESS?
         BNE   *+L'*+10            NO
         DROP  R2
         CLC   APSCB(L'APSCB),CPPLPSCB  CPPL+8 = PSCB ADDRESS?
         BE    OKSCN               YES, TSO COMMAND
         LR    R1,R3
         USING IKJEBECA,R1
         L     R3,CAPTTMP          CPPL ADDRESS
         DROP  R1
         CLC   APSCB(L'APSCB),CPPLPSCB  CPPL+8 = PSCB ADDRESS?
         BNE   ERROR0              NO, NOT TSO SUB-COMMAND
OKSCN    ST    R3,ACPPL            RETAIN CPPL ADDRESS
         LA    R1,MYPPL            SET PARSE PARAMETER LIST (PPL)
         USING PPL,R1
         MVC   PPLUPT,CPPLUPT
         MVC   PPLECT,CPPLECT
         LA    R0,MYECB
         ST    R0,PPLECB
         MVC   PPLPCL,=A(PARMLST)
         LA    R0,MYANS
         ST    R0,PPLANS
         MVC   PPLCBUF,CPPLCBUF
         DROP  R1,R3
        CALLTSSR EP=IKJPARS,MF=(E,(1))
         LR    R10,R15
         B     *+L'*(R15)          BRANCH ON RETURNED CODE
         B     PARSOK               0 - SUCCESSFULL
         B     ERROR1               4 - UNABLE TO PROMPT
         B     EXINI                8 - USER ATTENTION OCCURED
         B     ERROR2              12 - PROGRAM BUG
         B     ERROR3              16 - SPACE UNAVAILABLE IN REGION
         B     ERROR4              20 - INVALID PARM
         B     ERROR5              24 - PARM. CONFLICT
         B     ERROR6              28 - TERMINAL DISCONNECTED
PARSOK   L     R2,MYANS            CHECK ANSWER ADDRESS
         LA    R2,0(R2)
         LTR   R2,R2
         BZ    ERROR7
         USING IKJPARMD,R2
         MVC   DDAY,=CL6' '        SET NONE
         CLI   PDID+1,0            DAY SPECIFIED?
         BE    NOIDX               NO
         TM    SDID+6,X'80'        VALUE PRESENT?
         BZ    NOIDX               NO
         LH    R14,SDID+4          GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BNP   NOIDX               YES
         L     R15,SDID            POINT TO VALUE
         CLC   0(4,R15),=CL4'NONE' DEFAULT?
         BE    NOIDX               YES
         MVC   DDAY(2),3(R15)      MMDDYY
         MVC   DDAY+2(2),0(R15)
         MVC   DDAY+4(2),6(R15)
NOIDX    MVC   FDAY,=CL6' '        SET NONE
         CLI   PDIF+1,0            FROM SPECIFIED?
         BE    NOIFX               NO
         TM    SDIF+6,X'80'        VALUE PRESENT?
         BZ    NOIFX               NO
         LH    R14,SDIF+4          GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BNP   NOIFX               YES
         L     R15,SDIF            POINT TO VALUE
         CLC   0(4,R15),=CL4'NONE' DEFAULT?
         BE    NOIFX               YES
         MVC   FDAY+4(2),0(R15)    SET YYMMDD
         MVC   FDAY+2(2),3(R15)
         MVC   FDAY(2),6(R15)
NOIFX    MVC   TDAY,=CL6' '        SET NONE
         CLI   PDIT+1,0            TO SPECIFIED?
         BE    NOITX               NO
         TM    SDIT+6,X'80'        VALUE PRESENT?
         BZ    NOITX               NO
         LH    R14,SDIT+4          GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BNP   NOITX               YES
         L     R15,SDIT            POINT TO VALUE
         CLC   0(4,R15),=CL4'NONE' DEFAULT?
         BE    NOITX               YES
         MVC   TDAY+4(2),0(R15)    SET YYMMDD
         MVC   TDAY+2(2),3(R15)
         MVC   TDAY(2),6(R15)
NOITX    CLI   PDIJ+1,0            JCL SPECIFIED?
         BE    NOIJX               NO
         TM    SDIJ+6,X'80'        VALUE PRESENT?
         BZ    NOIJX               NO
         LH    R14,SDIJ+4          GET LENGTH
         LTR   R14,R14             LENGTH ZERO?
         BNP   NOIJX               YES
         L     R15,SDIJ            POINT TO VALUE
         MVC   MBNME+6(2),0(R15)   SET XX
NOIJX    LH    R1,PDOP             MSG/NOMSG OPTION
         LTR   R1,R1
         BNP   NOOPT
         BCT   R1,*+L'*+4
         B     NOOPT
         OI    REQSW,SWMSG
         DROP  R2
NOOPT   IKJRLSA MYANS
         CLI   DDAY,C' '           DAY SPECIFIED?
         BE    CHKRG               NO
         CLI   FDAY,C' '
         BE    *+L'*+8
         LA    R1,OCMSG
         B     EXERX
         CLI   TDAY,C' '
         BE    *+L'*+8
         LA    R1,TOMSG
         B     EXERX
         MVC   DBLWRK(L'DDAY),DDAY VALIDATE DAY DATE
         LA    R0,DBLWRK
         LA    R15,SDAY
         BAS   R8,GTSDT
         B     LSTCK               +0 - OK
         MVC   S1RC(L'S1RC),DBLWRK+1 +4 - ERROR
         LA    R1,S1MSG
         B     EXERS
CHKRG    CLI   FDAY,C' '           FROM DATE SPECIFIED?
         BNE   *+L'*+16            YES
         CLI   TDAY,C' '           NO, TO DATE SPECIFIED?
         BE    GDFLT               NO, YESTERDAY
         LA    R1,FRMSG            YES
         B     EXERX
         MVC   DBLWRK(4),FDAY+2    VALIDATE FROM DATE
         MVC   DBLWRK+4(2),FDAY
         LA    R0,DBLWRK
         LA    R15,SDAY
         BAS   R8,GTSDT
         B     *+L'*+14            +0 - OK
         MVC   S2RC(L'S2RC),DBLWRK+1 +4 - ERROR
         LA    R1,S2MSG
         B     EXERS
         LA    R0,YESWRK           HERE GET TODAY DATE
         XR    R15,R15
         BAS   R8,GTGDT
         B     *+L'*+4             +0 - OK
         B     G1ERR               +4 - ERROR
         LA    R0,YESWRK           NOW GET YESTERDAY DATE
         LA    R15,YDAY
         BAS   R8,GTSDT
         B     *+L'*+4             +0 - OK
         B     G2ERR               +4 - ERROR
         PACK  DBLWRK,YDAY+2(3)
         CVB   R2,DBLWRK
         PACK  DBLWRK,YDAY(2)
         CVB   R3,DBLWRK
GTYT1    BCT   R2,GTYT2
         LTR   R3,R3
         BP    *+L'*+4
         LA    R3,100
         BCTR  R3,0
         CVD   R3,DBLWRK
         UNPK  DBLWRK(3),DBLWRK+6(2)
         OI    DBLWRK+2,C'0'
         MVC   YDAY(2),DBLWRK+1
         LA    R2,366
GTYT2    CVD   R2,DBLWRK
         UNPK  YDAY+2(3),DBLWRK+L'DBLWRK-2(2)
         OI    YDAY+4,C'0'
         LA    R0,YESWRK
         LA    R15,YDAY
         BAS   R8,GTGDT
         B     *+L'*+14            +0 - OK
         CLC   YDAY+2(3),=CL3'366' +4 - ERROR
         BE    GTYT1
         B     G3ERR
         ICM   R1,B'1111',YESWRK
         MVC   YESWRK(2),YESWRK+4
         STCM  R1,B'1111',YESWRK+2
         CLC   FDAY(L'FDAY),YESWRK VALID FROM DATE?
         BNH   *+L'*+8             YES
         LA    R1,FUMSG
         B     EXERX
         CLI   TDAY,C' '
         BNE   CHKTD
         MVC   CHKWRK(2),FDAY+2    GET LAST DAY OF MONTH
         MVC   CHKWRK+4(2),FDAY
         MVC   DBLWRK+L'DBLWRK-2(2),=PL2'+31'
GTLDL    UNPK  DBLWRK(3),DBLWRK+L'DBLWRK-2(2)
         OI    DBLWRK+2,C'0'
         MVC   CHKWRK+2(2),DBLWRK+1
         LA    R0,CHKWRK
         LA    R15,EDAY
         BAS   R8,GTSDT
         B     CHKYD               +0 - OK
         CLC   CHKWRK+2(2),FDAY+4  +4 - ERROR, MATCH FROM DATE?
         BE    OKCHK               YES, IT IS LIKE DAY DATE
         BNH   *+L'*+16
         PACK  DBLWRK,CHKWRK+2(2)
         SP    DBLWRK+L'DBLWRK-2(2),=PL1'+1'
         B     GTLDL
         MVC   S3RC(L'S3RC),DBLWRK+1
         LA    R1,S3MSG
         B     EXERS
CHKYD    ICM   R1,B'1111',CHKWRK
         MVC   CHKWRK(2),CHKWRK+4
         STCM  R1,B'1111',CHKWRK+2
         CLC   CHKWRK(L'FDAY),YESWRK VALID DATE?
         BNH   OKCHK               YES
         MVC   EDAY,YDAY           TO DATE = YESTERDAY
OKCHK    MVC   MONTH(L'MONTH),FDAY
         B     GTDWS
CHKTD    CLC   FDAY(4),TDAY        SAME MONTH?
         BNE   ERRMN               NO
         CLC   FDAY,TDAY           CORRECTLY SPECIFIED?
         BH    ERDTE               NO
         BE    OKCHK               SAME DATE = ONLY ONE DATE
         CLC   TDAY(L'TDAY),YESWRK VALID TO DATE?
         BNH   *+L'*+8             YES
         LA    R1,TUMSG
         B     EXERX
         MVC   DBLWRK(4),TDAY+2    VALIDATE TO DATE
         MVC   DBLWRK+4(2),TDAY
         LA    R0,DBLWRK
         LA    R15,EDAY
         BAS   R8,GTSDT
         B     OKCHK               +0 - OK
         MVC   S4RC(L'S4RC),DBLWRK+1 +4 - ERROR
         LA    R1,S4MSG
         B     EXERS
ERRMN    LA    R1,MNMSG
         B     EXERX
ERDTE    LA    R1,DTMSG
         B     EXERX
ERROR0   LA    R1,ERRMS0
         B     EXERX
ERROR1   LA    R1,ERRMS1
         B     EXERS
ERROR2   LA    R1,ERRMS2
         B     EXERS
ERROR3   LA    R1,ERRMS3
         B     EXERS
ERROR4   LA    R1,ERRMS4
         B     EXERS
ERROR5   LA    R1,ERRMS5
         B     EXERS
ERROR6   LA    R1,ERRMS6
         B     EXERS
ERROR7   LA    R1,ERRMS7
         B     EXERX
PCALL    L     R1,APARM            RESTORE PARM. ADDRESS
         L     R1,0(R1)            PARM. FIELD ADDRESS
         LH    R4,0(R1)            PARM. FIELD LENGTH
         LTR   R4,R4
         BNP   PAEND               NO PARM. FIELD
         LA    R2,2(R1)            SET START OF PARM. FIELD TEXT
         LA    R4,1(R4,R1)         END OF PARM. FIELD TEXT
PANW     CLI   SDAY,C' '
         BNE   PA2                 NOT FIRST TIME
         CLI   0(R2),C'D'
         BNE   PA2                 NOT DAY= OR D= KEYWORD
         LA    R1,1(R2)
         CLR   R1,R4
         BH    PARMERR             END OF PARM. FIELD TEXT
         CLI   0(R1),C'='
         BE    PA1
         LA    R0,2(R1)
         CLR   R0,R4
         BH    PARMERR             END OF PARM. FIELD TEXT
         CLC   0(3,R1),=CL3'AY='
         BNE   PARMERR             NOT DAY= KEYWORD
         LA    R2,2(R2)
PA1      LA    R2,2(R2)            START OF OPERAND ANALYSIS
         CLR   R2,R4
         BH    PAEND               NULL OPERAND
         CLI   0(R2),C','
         BE    PASK                NULL OPERAND
         LA    R5,SDAY
         LA    R6,L'SDAY           OPERAND LENGTH CONTROL
PA1A     CLI   0(R2),C'0'
         BL    PARMERR             NOT NUMERIC
         CLI   0(R2),C'9'
         BH    PARMERR             NOT NUMERIC
         MVC   0(1,R5),0(R2)       MOVE OPERAND TO DESTINATION FIELD
         LA    R2,1(R2)            INCREMENT POINTERS
         LA    R5,1(R5)
         CLR   R2,R4
         BH    *+L'*+8             END OF PARM. FIELD TEXT
         BCT   R6,PA1A             TEST OPERAND VALIDITY-LENGTH
         B     PATS                SEPARATOR
         BCT   R6,PARMERR
         B     PAEND
PA2      CLC   MBNME+6(2),=CL2'00'
         BNE   PA3                 NOT FIRST TIME
         CLI   0(R2),C'J'
         BNE   PA3                 NOT JCL=, JOB= OR J= KEYWORD
         LA    R1,1(R2)
         CLR   R1,R4
         BH    PARMERR             END OF PARM. FIELD TEXT
         CLI   0(R1),C'='
         BE    PA2A
         LA    R0,2(R1)
         CLR   R0,R4
         BH    PARMERR             END OF PARM. FIELD TEXT
         CLC   0(3,R1),=CL3'CL='
         BE    *+L'*+10
         CLC   0(3,R1),=CL3'OB='
         BNE   PARMERR             NOT JCL= OR JOB= KEYWORD
         LA    R2,2(R2)
PA2A     LA    R2,2(R2)            START OF OPERAND ANALYSIS
         CLR   R2,R4
         BH    PAEND               NULL OPERAND
         CLI   0(R2),C','
         BE    PASK                NULL OPERAND
         LA    R5,MBNME+6
         LA    R6,2                OPERAND LENGTH CONTROL
PA2B     CLI   0(R2),C' '
         BE    PARMERR             REJECT BLANK
         MVC   0(1,R5),0(R2)       MOVE OPERAND TO DESTINATION FIELD
         LA    R2,1(R2)            INCREMENT POINTERS
         LA    R5,1(R5)
         CLR   R2,R4
         BH    *+L'*+8             END OF PARM. FIELD TEXT
         BCT   R6,PA2B             TEST OPERAND VALIDITY-LENGTH
         B     PATS                SEPARATOR
         BCT   R6,PARMERR
         B     PAEND
PA3      TM    RUNSW,SWSYS         SYSTEM TASK?
         BZ    PATS                NO
         CLI   0(R2),C'C'
         BNE   PA4                 NOT C(OPY) KEYWORD
         LA    R2,1(R2)
         CLR   R2,R4
         BNH   *+L'*+8
         OI    REQSW,SWCPY
         B     PAEND               END OF PARM. FIELD TEXT
         LA    R1,2(R2)
         CLR   R1,R4
         BH    PARMERR             END OF PARM. FIELD TEXT
         CLC   0(3,R2),=CL3'OPY'
         BNE   PARMERR             NOT COPY KEYWORD
         OI    REQSW,SWCPY
         LA    R2,3(R2)
         B     PANX
PA4      CLI   0(R2),C'S'
         BNE   PATS                NOT S(CAN) KEYWORD
         LA    R2,1(R2)
         CLR   R2,R4
         BNH   *+L'*+8
         OI    REQSW,SWSCN
         B     PAEND               END OF PARM. FIELD TEXT
         LA    R1,2(R2)
         CLR   R1,R4
         BH    PARMERR             END OF PARM. FIELD TEXT
         CLC   0(3,R2),=CL3'CAN'
         BNE   PARMERR             NOT SCAN KEYWORD
         OI    REQSW,SWSCN
         LA    R2,3(R2)
PANX     CLR   R2,R4
         BH    PAEND               END OF PARM. FIELD TEXT
PATS     CLI   0(R2),C','
         BNE   PARMERR             NOT SEPARATOR
PASK     LA    R2,1(R2)            INCREMENT POINTER
         CLR   R2,R4
         BH    PAEND               END OF PARM. FIELD TEXT
         CLI   0(R2),C','
         BE    PASK                SEPARATOR AGAIN
         B     PANW                GO TO SEE ANY KEYWORD
PARMERR  LA    R1,PAMSG
         B     EXERX
PAEND    CLC   SDAY+2(3),=CL3'366'
         BNH   *+L'*+8
         LA    R1,PRMSG
         B     EXERX
         CLC   SDAY(L'SDAY),=CL6' ' SERIAL DAY DEFINED?
         BE    GDFLT               NO
         LA    R0,DBLWRK
         LA    R15,SDAY
         BAS   R8,GTGDT
         B     LSTCK               +0 - OK
         MVC   VDRC(L'VDRC),DBLWRK+1 +4 - ERROR
         LA    R1,VDMSG
         B     EXERS
GDFLT    LA    R0,DBLWRK           GET TODAY DATE
         XR    R15,R15
         BAS   R8,GTGDT
         B     *+L'*+4             +0 - OK
         B     G1ERR               +4 - ERROR
         LA    R0,DBLWRK           NOW GET YESTERDAY DATE
         LA    R15,SDAY
         BAS   R8,GTSDT
         B     *+L'*+14            +0 - OK
G2ERR    MVC   G2RC(L'G2RC),DBLWRK+1 +4 - ERROR
         LA    R1,G2MSG
         B     EXERS
         PACK  DBLWRK,SDAY+2(3)
         CVB   R2,DBLWRK
         PACK  DBLWRK,SDAY(2)
         CVB   R3,DBLWRK
GDFLT1   BCT   R2,GDFLT2
         LTR   R3,R3
         BP    *+L'*+4
         LA    R3,100
         BCTR  R3,0
         CVD   R3,DBLWRK
         UNPK  DBLWRK(3),DBLWRK+6(2)
         OI    DBLWRK+2,C'0'
         MVC   SDAY(2),DBLWRK+1
         LA    R2,366
GDFLT2   CVD   R2,DBLWRK
         UNPK  SDAY+2(3),DBLWRK+L'DBLWRK-2(2)
         OI    SDAY+4,C'0'
         LA    R0,DBLWRK
         LA    R15,SDAY
         BAS   R8,GTGDT
         B     LSTCK               +0 - OK
         CLC   SDAY+2(3),=CL3'366' +4 - ERROR
         BE    GDFLT1
G3ERR    MVC   G3RC(L'G3RC),DBLWRK+1
         LA    R1,G3MSG
         B     EXERS
LSTCK    ICM   R1,B'1111',DBLWRK
         MVC   DBLWRK(2),DBLWRK+4
         STCM  R1,B'1111',DBLWRK+2
         LA    R0,CHKWRK
         XR    R15,R15
         BAS   R8,GTGDT
         B     *+L'*+18            +0 - OK
G1ERR    MVC   G1RC(L'G1RC),DBLWRK+1 +4 - ERROR
         LA    R1,G1MSG
EXERS    BAS   R9,SMSG
         B     EXINI
         ICM   R1,B'1111',CHKWRK
         MVC   CHKWRK(2),CHKWRK+4
         STCM  R1,B'1111',CHKWRK+2
         CLC   DBLWRK,CHKWRK
         BL    CHKOK
         LA    R1,FTMSG
EXERX    BAS   R9,SMSG
         LR    R10,R9
         B     EXINI
CHKOK    MVC   MONTH(L'MONTH),DBLWRK
GTDWS    L     R0,LDYNW
         LR    R3,R0
        GETMAIN R,LV=(0)           GET DYNAMIC WORK STORAGE
         ST    R1,SDYNW
         ST    R1,DAGSKL
         LR    R2,R1
         LA    R1,DYNLGTH(R1)
         ST    R1,DAIDIN
         LA    R1,DYNLGTH(R1)
         ST    R1,DAIDOUT
         LA    R1,DYNLGTH(R1)
         ST    R1,DAGJCL
         XR    R5,R5
         ICM   R5,B'1000',=CL6' '
         BASR  R4,0
         MVCL  R2,R4
         XR    R10,R10
EXINI   @EXIT  (R10)
         SPACE 1
*------- DATES SERVICES ROUTINES
*              R8 - LINK REGISTER / RETURN +0 = OK
*                                          +4 = ERROR
*                                               (EDITED RC IN DBLWRK)
*              R10 = R15 - RETURN CODE
         SPACE 1
GTSDT   $SDATE (R0),(R15)
         B     GTTRC
GTGDT   $GDATE ,,(R0),(R15)
GTTRC    LTR   R10,R15
         BZR   R8
         CVD   R10,DBLWRK
         MVC   DBLWRK(4),=XL4'40202120'
         ED    DBLWRK(4),DBLWRK+L'DBLWRK-2
         B     4(R8)
         SPACE 1
MYPPL    DC    0F'0',(PPLL)X'0'
MYANS    DC    F'0'
MYECB    DC    F'0'
         SPACE 1
ERRMS0   DC    AL1(ERRMS0L)
         DC    C' -> NOT TSO COMMAND OR SUB-COMMAND NOR CALL ? '
ERRMS0L  EQU   *-(ERRMS0+1)
ERRMS1   DC    AL1(ERRMS1L)
         DC    C' -> INCOMPLETE PARAMETERS OR UNABLE TO PROMPT '
ERRMS1L  EQU   *-(ERRMS1+1)
ERRMS2   DC    AL1(ERRMS2L),C' -> PARSE PARAMETER BLOCK INVALID '
ERRMS2L  EQU   *-(ERRMS2+1)
ERRMS3   DC    AL1(ERRMS3L),C' -> NOT ENOUGH SPACE IN REGION '
ERRMS3L  EQU   *-(ERRMS3+1)
ERRMS4   DC    AL1(ERRMS4L),C' -> INVALID PARAMETERS '
ERRMS4L  EQU   *-(ERRMS4+1)
ERRMS5   DC    AL1(ERRMS5L),C' -> PARAMETERS CONFLICT '
ERRMS5L  EQU   *-(ERRMS5+1)
ERRMS6   DC    AL1(ERRMS6L),C' -> TERMINAL HAS BEEN DISCONNECTED '
ERRMS6L  EQU   *-(ERRMS6+1)
ERRMS7   DC    AL1(ERRMS7L),C' -> PARSE ANSWER ADDRESS ERROR '
ERRMS7L  EQU   *-(ERRMS7+1)
PAMSG    DC    AL1(PAMSGL),C' -> INVALID PARM. FIELD TEXT / '
         DC    C'SYNTAX ERROR DETECTED '
PAMSGL   EQU   *-(PAMSG+1)
PRMSG    DC    AL1(PRMSGL),C' -> INVALID REQUESTED DAY / '
         DC    C'MAX. DDD VALUE IS 366 '
PRMSGL   EQU   *-(PRMSG+1)
FTMSG    DC    AL1(FTMSGL),C' -> INVALID REQUESTED DAY / '
         DC    C'HIGHER THAN YESTERDAY '
FTMSGL   EQU   *-(FTMSG+1)
FUMSG    DC    AL1(FUMSGL),C' -> INVALID "FROM" DATE / '
         DC    C'HIGHER THAN YESTERDAY '
FUMSGL   EQU   *-(FUMSG+1)
TUMSG    DC    AL1(TUMSGL),C' -> INVALID "TO" DATE / '
         DC    C'HIGHER THAN YESTERDAY '
TUMSGL   EQU   *-(TUMSG+1)
OCMSG    DC    AL1(OCMSGL),C' -> "DAY" AND "FROM" OPERANDS CONFLICT '
OCMSGL   EQU   *-(OCMSG+1)
TOMSG    DC    AL1(TOMSGL),C' -> "DAY" AND "TO" OPERANDS CONFLICT '
TOMSGL   EQU   *-(TOMSG+1)
DTMSG    DC    AL1(DTMSGL),C' -> "FROM" DATE GREATER THAN "TO" DATE '
DTMSGL   EQU   *-(DTMSG+1)
FRMSG    DC    AL1(FRMSGL),C' -> "FROM" DATE MISSING '
FRMSGL   EQU   *-(FRMSG+1)
MNMSG    DC    AL1(MNMSGL),C' -> "FROM" AND "TO" DATES ARE NOT IN '
         DC    C'THE SAME MONTH '
MNMSGL   EQU   *-(MNMSG+1)
VDMSG    DC    AL1(VDMSGL),C' -> INVALID REQUESTED DAY / '
         DC    C'$GDATE RC='
VDRC     DC    CL3' ',C' '
VDMSGL   EQU   *-(VDMSG+1)
S1MSG    DC    AL1(S1MSGL),C' -> UNABLE TO GET "DAY" SERIAL DATE / '
         DC    C'$SDATE RC='
S1RC     DC    CL3' ',C' '
S1MSGL   EQU   *-(S1MSG+1)
S2MSG    DC    AL1(S2MSGL),C' -> UNABLE TO GET "FROM" SERIAL DATE / '
         DC    C'$SDATE RC='
S2RC     DC    CL3' ',C' '
S2MSGL   EQU   *-(S2MSG+1)
S3MSG    DC    AL1(S3MSGL),C' -> UNABLE TO GET LAST DAY OF MONTH '
         DC    C'SERIAL DATE / $SDATE RC='
S3RC     DC    CL3' ',C' '
S3MSGL   EQU   *-(S3MSG+1)
S4MSG    DC    AL1(S4MSGL),C' -> UNABLE TO GET "TO" SERIAL DATE / '
         DC    C'$SDATE RC='
S4RC     DC    CL3' ',C' '
S4MSGL   EQU   *-(S4MSG+1)
G1MSG    DC    AL1(G1MSGL),C' -> UNABLE TO GET TODAY DATE / '
         DC    C'$GDATE RC='
G1RC     DC    CL3' ',C' '
G1MSGL   EQU   *-(G1MSG+1)
G2MSG    DC    AL1(G2MSGL),C' -> UNABLE TO GET TODAY SERIAL DATE / '
         DC    C'$SDATE RC='
G2RC     DC    CL3' ',C' '
G2MSGL   EQU   *-(G2MSG+1)
G3MSG    DC    AL1(G3MSGL),C' -> UNABLE TO GET YESTERDAY DATE / '
         DC    C'$GDATE RC='
G3RC     DC    CL3' ',C' '
G3MSGL   EQU   *-(G3MSG+1)
         SPACE 1
        @STOP
         EJECT
* ------ PARSE VALIDITY CHECK ROUTINES
*        1. CONTROL DATE (DD/MM/YY) SUPPLIED BY THE
*           'FROM' (ALIAS 'DAY') AND 'TO' KEYWORDS.
         SPACE 1
         CNOP  0,8
         USING *,R8
DTEVALCK STM   R14,R12,12(R13)
         LR    R8,R15
         L     R2,0(,R1)           -> PDE
         L     R3,0(,R2)           -> CHARACTER STRING
         LA    R15,4               RETURN 4 IF CHECK FAILS
         LH    R0,4(R2)            -> STRING LENGTH
         LTR   R0,R0               NULL STRING?
         BNP   DTEVALX             YES, OK
         CH    R0,=H'4'            LENGTH OF 4 CHARACTERS?
         BNE   *+L'*+14            NO
         CLC   0(4,R3),=CL4'NONE'  DEFAULT?
         BE    DTEVALX             YES, OK
         B     DTEERRX             NO, EXIT WITH RC=4
         CH    R0,=H'8'            LENGTH OF 8 CHARACTERS?
         BNE   DTEERRX             NO, EXIT WITH RC=4
         CLI   2(R3),C'/'          SLASH?
         BE    DTEV1OK             YES
         CLI   2(R3),C'.'          PERIOD?
         BE    DTEV1ST             YES
         CLI   2(R3),C'-'          MINUS?
         BNE   DTEERRX             NO, EXIT WITH RC=4
DTEV1ST  MVI   2(R3),C'/'          SET A SLASH
DTEV1OK  CLI   5(R3),C'/'          SLASH?
         BE    DTEV2OK             YES
         CLI   5(R3),C'.'          PERIOD?
         BE    DTEV2ST             YES
         CLI   5(R3),C'-'          MINUS?
         BNE   DTEERRX             NO, EXIT WITH RC=4
DTEV2ST  MVI   5(R3),C'/'          SET A SLASH
DTEV2OK  ICM   R0,B'1111',0(R3)    TEST NUMERICS?
         N     R0,=A(X'F0F000F0')
         CL    R0,=A(X'F0F000F0')
         BNE   DTEERRX             NO, EXIT WITH RC=4
         ICM   R0,B'1111',4(R3)
         N     R0,=A(X'F000F0F0')
         CL    R0,=A(X'F000F0F0')
         BNE   DTEERRX             NO, EXIT WITH RC=4
         CLC   0(2,R3),=CL2'01'    VALID DD (DAY)?
         BL    DTEERRX             NO, EXIT WITH RC=4
         CLC   0(2,R3),=CL2'31'    IN RANGE 01 THRU 31?
         BH    DTEERRX             NO, EXIT WITH RC=4
         CLC   3(2,R3),=CL2'01'    VALID MM (MONTH)?
         BL    DTEERRX             NO, EXIT WITH RC=4
         CLC   3(2,R3),=CL2'12'    IN RANGE 01 THRU 12?
         BH    DTEERRX             NO, EXIT WITH RC=4
DTEVALX  XR    R15,R15             SET RC=0
DTEERRX  L     R14,12(,R13)
         LM    R0,R12,20(R13)
         BR    R14
         SPACE 1
         LTORG
         SPACE 1
         DROP  R8
         SPACE 1
*        2. CONTROL SUFFIX (XX) SUPPLIED BY 'JCL' KEYWORD.
         SPACE 1
         CNOP  0,8
         USING *,R8
JCLVALCK STM   R14,R12,12(R13)
         LR    R8,R15
         L     R2,0(,R1)           -> PDE
         L     R3,0(,R2)           -> CHARACTER STRING
         LA    R15,4               RETURN 4 IF CHECK FAILS
         LH    R0,4(R2)            -> STRING LENGTH
         LTR   R0,R0               NULL STRING?
         BNP   JCLVALX             YES, OK
         CH    R0,=H'2'            LENGTH OF 2 CHARACTERS?
         BE    JCLVALX             YES, OK
         B     JCLERRX             NO, EXIT WITH RC=4
JCLVALX  XR    R15,R15             SET RC=0
JCLERRX  L     R14,12(,R13)
         LM    R0,R12,20(R13)
         BR    R14
         SPACE 1
         LTORG
         SPACE 1
         DROP  R8
         EJECT
XGTSKL  @ENTER
         L     R6,DAGSKL           GET SKELETON ALLOCATION
         USING DYNLIST,R6
         MVC   DDNAME,DDP
         MVC   DSNAME,RPLMEM
         MVC   DSSTATUS(3),=CL3'SHR'
        $DYNALL (R6),,MF=(E,DYNPLS)
         LTR   R10,R15             TEST RETURN CODE
         BZ    OKGPDS              OK, ALLOCATED
         ICM   R1,B'1111',=CL4'ALL.'
         BAS   R8,DFMR
         XC    DSNAME,DSNAME
         B     EXGTS
         DROP  R6
OKGPDS  $MOPEN DBLWRK
         LTR   R10,R15
         BZ    OKGOPN
         CVD   R10,DBLWRK
         MVC   DBLWRK(4),=XL4'40202120'
         ED    DBLWRK(4),DBLWRK+L'DBLWRK-2
         MVC   MORC(L'MORC),DBLWRK+1
         LA    R1,MOMSG
         BAS   R9,SMSG
         B     EXGTS
OKGOPN   L     R0,DBLWRK
         CH    R0,=Y(L'TEXT)
         BE    OKLRL
         LA    R1,LOMSG
         BAS   R9,SMSG
         LR    R10,R9
         B     GSCLS
OKLRL   $MFIND MBNME
         LTR   R10,R15
         BZ    OKMFN
         CVD   R10,DBLWRK
         MVC   DBLWRK(4),=XL4'40202120'
         ED    DBLWRK(4),DBLWRK+L'DBLWRK-2
         MVC   FORC(L'FORC),DBLWRK+1
         LA    R1,FOMSG
         BAS   R9,SMSG
         CH    R10,=H'3'
         BNE   GSCLS
         MVC   NFMB,MBNME
         LA    R1,NFMSG
         BAS   R9,SMSG
         B     GSCLS
OKMFN    L     R0,LSKLW
        GETMAIN R,LV=(0)           GET JCL WORK STORAGE
         ST    R1,SSKLW
         LR    R6,R1
GNXSK   $MREAD TEXT
         LTR   R10,R15
         BM    GSEND
         BZ    OKGRD
         CVD   R10,DBLWRK
         MVC   DBLWRK(4),=XL4'40202120'
         ED    DBLWRK(4),DBLWRK+L'DBLWRK-2
         MVC   MRRC(L'MRRC),DBLWRK+1
         LA    R1,MRMSG
         BAS   R9,SMSG
         B     GSCLS
OKGRD    CLC   TEXT(3),=CL3'***'
         BE    GNXSK
         CLI   TEXT,C'?'
         BE    GSDEF
         MVC   0(72,R6),TEXT
         LA    R6,72(R6)
         CLC   TEXT(2),=CL2'/*'
         BE    GNXSK
         CLC   TEXT(3),=CL3'//*'
         BE    GNXSK
         LM    R1,R3,=A(TEXT,1,TEXT+70)
         BXLE  R1,R2,*+L'*+4
         B     GNXSK
         CLI   0(R1),C'?'
         BNE   *-12
         CLC   0(5,R1),=CL5'?1...'
         BE    GNXS1
         CLC   0(5,R1),=CL5'?2...'
         BE    GNXS2
         B     GNXSK
GNXS1    OI    MANSW,SWDAY
         B     GNXSK
GNXS2    OI    MANSW,SWMON
         B     GNXSK
GSDEF    CLI   TEXT+1,C'I'
         BE    GSSJI
         CLI   TEXT+1,C'0'
         BE    GSSJS
         CLI   TEXT+1,C'1'
         BE    *+L'*+8
         CLI   TEXT+1,C'2'
         BNE   GNXSK
         LM    R1,R3,=A(TEXT,1,TEXT+70)
         LA    R1,2(R1)
         CLI   0(R1),C' '
         BNE   *+L'*+8
         BXLE  R1,R2,*-8
         B     GDERL
         LR    R4,R1
         BXLE  R1,R2,*+L'*+4
         B     *+L'*+8
         CLI   0(R1),C' '
         BNE   *-12
         SR    R1,R4
         BNP   GDERL
         CLI   TEXT+1,C'1'
         BNE   *+L'*+16
         CH    R1,=H'24'
         BH    GDERL
         LA    R2,DAYMNL
         B     GSSET
         CH    R1,=H'38'
         BH    GDERL
         LA    R2,LOGMNL
GSSET    STC   R1,0(R2)
         BCT   R1,*+L'*+6
         MVC   1(*-*,R2),0(R4)
         EX    R1,*-6
         B     GNXSK
GSSJI    ST    R6,SKLJI            INSERT TYPRUN= CARD
         B     GNXSK
GSSJS    ST    R6,SKLJS            START WITHOUT JOB CARD
         B     GNXSK
GDERL    MVC   GSLN(L'GSLN),TEXT
         LA    R1,GSMSG
         BAS   R9,SMSG
         LR    R10,R9
         B     GSCLS
GSEND    SH    R6,=H'72'
         ST    R6,SKLJE
         XR    R10,R10
GSCLS   $MCLOSE ,
         LTR   R10,R10
         BZ    *+L'*+12
         LTR   R15,R15
         BZ    OKGCLS
         LR    R10,R15
         B     *+L'*+6
         LTR   R10,R15
         BZ    OKGCLS
         CVD   R10,DBLWRK
         MVC   DBLWRK(4),=XL4'40202120'
         ED    DBLWRK(4),DBLWRK+L'DBLWRK-2
         MVC   MCRC(L'MCRC),DBLWRK+1
         LA    R1,MCMSG
         BAS   R9,SMSG
OKGCLS   L     R6,DAGSKL           GET SKELETON DE-ALLOCATION
         USING DYNLIST,R6
         XC    DSNAME,DSNAME
        $DYNALL (R6),,MF=(E,DYNPLS)
         LTR   R10,R10
         BZ    *+L'*+12
         LTR   R15,R15
         BZ    EXGTS
         LR    R10,R15
         B     *+L'*+6
         LTR   R10,R15
         BZ    *+L'*+12
         ICM   R1,B'1111',=CL4'FREE'
         BAS   R8,DFMR
         DROP  R6
         B     EXGTS
         OC    SKLJS,SKLJS
         BNZ   *+L'*+8
         MVI   GENR,C'0'
         B     GERRM
         OC    SKLJI,SKLJI
         BNZ   *+L'*+8
         MVI   GENR,C'I'
         B     GERRM
         TM    MANSW,SWDAY
         BO    *+L'*+14
         MVC   RFMB,MBNME
         LA    R1,RFMSG
         B     GSERR
         XR    R1,R1
         IC    R1,DAYMNL
         LTR   R1,R1
         BP    *+L'*+8
         MVI   GENR,C'1'
         B     GERRM
         TM    MANSW,SWMON
         BZ    EXGTS
         MVI   TEXT,C' '
         MVC   TEXT+1(L'TEXT-1),TEXT
         XR    R1,R1               BUILD MONTH DATA-SET NAME
         IC    R1,LOGMNL
         LTR   R1,R1
         BP    BLDNM
         MVI   GENR,C'2'
GERRM    MVC   GEMB,MBNME
         LA    R1,GEMSG
GSERR    BAS   R9,SMSG
         LR    R10,R9
         B     EXGTS
BLDNM    BCT   R1,*+L'*+6
         MVC   TEXT(*-*),LOGMN
         EX    R1,*-6
         LA    R1,TEXT+1(R1)
         MVC   0(2,R1),=CL2'.M'
         MVC   2(L'MONTH,R1),MONTH
         TM    RUNSW,SWSYS         SYSTEM TASK?
         BZ    *+L'*+10            NO, CHANGE USER-ID PREFIX
         MVC   LOGMN(L'LOGMN),TEXT YES, OK
         B     CMPLG
         XR    R1,R1
         IC    R1,USIDL
         BCT   R1,*+L'*+6
         MVC   LOGMN(*-*),USID
         EX    R1,*-6
         LA    R3,LOGMN+1(R1)
         LA    R1,TEXT
         CLI   0(R1),C'.'
         BE    *+L'*+8
         LA    R1,1(R1)
         B     *-12
         LR    R2,R1
         LA    R1,1(R1)
         CLI   0(R1),C' '
         BNE   *-8
         SLR   R1,R2
         BCT   R1,*+L'*+6
         MVC   0(*-*,R3),0(R2)
         EX    R1,*-6
CMPLG    LA    R1,LOGMN+L'LOGMN-1
         CLI   0(R1),C' '
         BNE   *+L'*+4
         BCT   R1,*-8
         LA    R0,LOGMNL
         SLR   R1,R0
         STC   R1,LOGMNL
EXGTS   @EXIT  (R10)
         SPACE 1
MOMSG    DC    AL1(MOMSGL),C' -> GET JCL SKELETON FAILED / '
         DC    C'$MOPEN RC='
MORC     DC    CL3' ',C' '
MOMSGL   EQU   *-(MOMSG+1)
LOMSG    DC    AL1(LOMSGL),C' -> GET JCL SKELETON FAILED / '
         DC    C'PO-LRECL NOT 80 '
LOMSGL   EQU   *-(LOMSG+1)
FOMSG    DC    AL1(FOMSGL),C' -> GET JCL SKELETON FAILED / '
         DC    C'$MFIND RC='
FORC     DC    CL3' ',C' '
FOMSGL   EQU   *-(FOMSG+1)
NFMSG    DC    AL1(NFMSGL),C' -> JCL SKELETON MEMBER "'
NFMB     DC    CL8' ',C'" NOT FOUND '
NFMSGL   EQU   *-(NFMSG+1)
MRMSG    DC    AL1(MRMSGL),C' -> GET JCL SKELETON FAILED / '
         DC    C'$MREAD RC='
MRRC     DC    CL3' ',C' '
MRMSGL   EQU   *-(MRMSG+1)
MCMSG    DC    AL1(MCMSGL),C' -> GET JCL SKELETON FAILED / '
         DC    C'$MCLOSE RC='
MCRC     DC    CL3' ',C' '
MCMSGL   EQU   *-(MCMSG+1)
GSMSG    DC    AL1(GSMSGL),C' -> GET JCL SKELETON FAILED / '
GSLN     DC    CL2' ',C' LEVEL NAME ERROR '
GSMSGL   EQU   *-(GSMSG+1)
GEMSG    DC    AL1(GEMSGL),C' -> JCL SKELETON "'
GEMB     DC    CL8' ',C'" REQUIRE ?'
GENR     DC    CL1' ',C' DEFINITION '
GEMSGL   EQU   *-(GEMSG+1)
RFMSG    DC    AL1(RFMSGL),C' -> JCL SKELETON "'
RFMB     DC    CL8' ',C'" HAS NO REFERENCE TO ?1 DEFINITION '
RFMSGL   EQU   *-(RFMSG+1)
         SPACE 1
        @STOP
         EJECT
XIDCAMS @ENTER
         L     R6,DAIDIN           IDCAMS INPUT ALLOCATION
         USING DYNLIST,R6
         MVC   DDNAME,DDI
         MVC   DSNAME(6),=CL6'&&&&IDIN'
         MVI   DSPRI,C'2'
         MVC   DSBLKSI(3),=CL3'800'
         MVC   DSORG(2),=CL2'PS'
         MVC   DSLRECL(2),=CL2'80'
         MVI   DSRECFM1,C'F'
         MVI   DSRECFM2,C'B'
         MVC   DSSTATUS(3),=CL3'NEW'
         MVC   DSNDISP(6),=CL6'DELETE'
         MVC   DSADISP(6),=CL6'DELETE'
         MVC   DSUNIT(3),=CL3'VIO'
         MVC   DSALLOC(3),=CL3'TRK'
         MVI   DSSEC,C'1'
        $DYNALL (R6),,MF=(E,DYNPLS)
         LTR   R10,R15             TEST RETURN CODE
         BZ    OKIDCI              OK, ALLOCATED
         ICM   R1,B'1111',=CL4'ALL.'
         BAS   R8,DFMR
         XC    DSNAME,DSNAME
         B     EXIDC
OKIDCI   MVI   TEXT,C' '
         MVC   TEXT+1(L'TEXT-1),TEXT
         TM    MANSW,SWMON
         BZ    NOMDS
         MVC   TEXT+2(12),=CL12'LISTCAT ENT('
         XR    R1,R1
         IC    R1,LOGMNL
         BCT   R1,*+L'*+6
         MVC   TEXT+14(*-*),LOGMN
         EX    R1,*-6
         LA    R1,TEXT+15(R1)
         MVC   0(7,R1),=CL7') NVSAM'
        $PUNCH TEXT,,DDI
         LTR   R10,R15
         BNZ   IDINCL
         MVC   TEXT+1(L'TEXT-1),TEXT
NOMDS    MVC   TEXT+2(12),=CL12'LISTCAT LVL('
         XR    R1,R1
         IC    R1,DAYMNL
         BCT   R1,*+L'*+6
         MVC   TEXT+14(*-*),DAYMN
         EX    R1,*-6
         LA    R2,TEXT+15(R1)
         MVC   0(2,R2),=CL2'.D'
         MVC   2(L'SDAY,R2),SDAY
         MVC   2+L'SDAY(7,R2),=CL7') NVSAM'
IDPULP  $PUNCH TEXT,,DDI
         LTR   R10,R15
         BNZ   IDINCL
         CLC   2(L'SDAY,R2),EDAY
         BNL   IDINCL
         PACK  DBLWRK,2(L'SDAY,R2)
         AP    DBLWRK,=PL1'+1'
         UNPK  2(L'SDAY,R2),DBLWRK+L'DBLWRK-3(3)
         OI    1+L'SDAY(R2),C'0'
         B     IDPULP
IDINCL  $UCLOSE DDI
         LTR   R10,R10
         BNZ   IPERR
         LTR   R10,R15
         BNZ   IUERR
         L     R6,DAIDOUT          IDCAMS OUTPUT ALLOCATION
         MVC   DDNAME,DDO
         MVC   DSNAME(6),=CL6'&&&&IDOUT'
         MVC   DSPRI(2),=CL2'10'
         MVC   DSSTATUS(3),=CL3'NEW'
         MVC   DSNDISP(6),=CL6'DELETE'
         MVC   DSADISP(6),=CL6'DELETE'
         MVC   DSUNIT(3),=CL3'VIO'
         MVC   DSALLOC(3),=CL3'TRK'
         MVI   DSSEC,C'5'
        $DYNALL (R6),,MF=(E,DYNPLS)
         LTR   R10,R15             TEST RETURN CODE
         BZ    OKIDCO              OK, ALLOCATED
         ICM   R1,B'1111',=CL4'ALL.'
         BAS   R8,DFMR
         XC    DSNAME,DSNAME
         B     EXIDC
OKIDCO  LINK   EP=IDCAMS,PARAM=(OPTIDC,DNMIDC),VL=1
         LTR   R10,R15
         BNZ   XIERR
         L     R6,DAIDIN           IDCAMS INPUT DE-ALLOCATION
         XC    DSNAME,DSNAME
        $DYNALL (R6),,MF=(E,DYNPLS)
         LTR   R10,R15             TEST RETURN CODE
         BZ    EXIDC               OK, DE-ALLOCATED
         ICM   R1,B'1111',=CL4'FREE'
         BAS   R8,DFMR
         DROP  R6
         B     EXIDC
IPERR    CVD   R10,DBLWRK
         MVC   DBLWRK(4),=XL4'40202120'
         ED    DBLWRK(4),DBLWRK+L'DBLWRK-2
         MVC   IPRC(L'IPRC),DBLWRK+1
         LA    R1,IPMSG
         BAS   R9,SMSG
         B     EXIDC
IUERR    CVD   R10,DBLWRK
         MVC   DBLWRK(4),=XL4'40202120'
         ED    DBLWRK(4),DBLWRK+L'DBLWRK-2
         MVC   IURC(L'IURC),DBLWRK+1
         LA    R1,IUMSG
         BAS   R9,SMSG
         B     EXIDC
XIERR    CVD   R10,DBLWRK
         MVC   DBLWRK(4),=XL4'40202120'
         ED    DBLWRK(4),DBLWRK+L'DBLWRK-2
         MVC   XIRC(L'XIRC),DBLWRK+1
         LA    R1,XIMSG
         BAS   R9,SMSG
         XR    R10,R10             JUST TO GET DIAGNOSE
EXIDC   @EXIT  (R10)
         SPACE 1
IPMSG    DC    AL1(IPMSGL),C' -> IDCAMS INPUT GENERATION FAILED / '
         DC    C'$PUNCH RC='
IPRC     DC    CL3' ',C' '
IPMSGL   EQU   *-(IPMSG+1)
IUMSG    DC    AL1(IUMSGL),C' -> IDCAMS INPUT GENERATION FAILED / '
         DC    C'$UCLOSE RC='
IURC     DC    CL3' ',C' '
IUMSGL   EQU   *-(IUMSG+1)
XIMSG    DC    AL1(XIMSGL),C' -> IDCAMS DIAGNOSE FOLLOWS / '
         DC    C'RETURN CODE ='
XIRC     DC    CL3' ',C' '
XIMSGL   EQU   *-(XIMSG+1)
         SPACE 1
        @STOP
         EJECT
XANALO  @ENTER
        $VOPEN DBLWRK,DDO
         LTR   R10,R15
         BNZ   VOERR
         L     R0,LVECT
        GETMAIN R,LV=(0)           GET VECTOR STORAGE
         ST    R1,SVECT
         USING VTDSECT,R1
         XC    VTNXT,VTNXT
         LA    R4,LVT
         LA    R5,VT1ST
         LR    R7,R5
         AL    R5,=A(NVT)
         SLR   R5,R4
         STM   R4,R5,VT1LE
         ST    R7,VTSTR
         MVC   VTDDN,=CL2'01'      SET 1ST DD NUMBER
         DROP  R1
         ST    R1,CVECT
         SLR   R7,R4
RDREC    MVI   LINE,C' '
         MVC   LINE+1(L'LINE-1),LINE
        $VREAD LINE,DDO
         LTR   R10,R15
         BM    RDEND
         BNZ   VRERR
         LM    R1,R3,=A(LINE+1,1,LINE+L'LINE-1)
         CLI   0(R1),C' '
         BNE   *+L'*+8
         BXLE  R1,R2,*-8
         B     RDREC
         CLC   0(9,R1),=CL9'NONVSAM -'
         BE    NNVSM
         CLC   0(3,R1),=CL3'IDC'
         BE    SCENT
         B     RDREC
NNVSM    LA    R1,9(R1)
         CLI   0(R1),C' '
         BE    *+L'*+8
         BXLE  R1,R2,*-8
         B     RDREC
         BXLE  R1,R2,*+L'*+4
         B     RDREC
         CLI   0(R1),C' '
         BE    *-12
         LR    R15,R1
         CLI   0(R1),C' '
         BE    *+L'*+8
         BXLE  R1,R2,*-8
         B     RDREC
         SLR   R1,R15
         CLM   R1,B'0001',LOGMNL
         BNE   TIDVT
         LR    R2,R1
         BCT   R2,*+L'*+6
         CLC   0(*-*,R15),LOGMN
         EX    R2,*-6
         BNE   TIDVT
         OI    REQSW,SWOLD
         OI    ANSW,ANSWL
         B     RDREC
TIDVT    BXLE  R7,R4,TIDST
         L     R3,CVECT
         USING VTDSECT,R3
         CLC   VTDDN,=CL2'09'      VECTORS OVERFLOW?
         BNE   GTNVT               NO, GET ANOTHER ONE
         XR    R1,R1
         IC    R1,DAYMNL
         LA    R15,2(R1,R15)
         MVC   OVMD(L'OVMD),0(R15) SAY AT WHICH DAY OCCURS
         LA    R1,OVMSG
         BAS   R9,SMSG
         LR    R10,R9
         B     RDCLS
GTNVT    SLR   R7,R4
         ST    R7,VTEND
         LR    R2,R1               SAVE AROUND GETMAIN
         LR    R6,R15              ...
         L     R0,LVECT
        GETMAIN R,LV=(0)           GET VECTOR STORAGE
         ST    R1,VTNXT
         XR    R0,R0
         ICM   R0,B'0011',VTDDN
         DROP  R3
         ST    R1,CVECT
         USING VTDSECT,R1
         XC    VTNXT,VTNXT
         LA    R5,VT1ST
         LR    R7,R5
         AL    R5,=A(NVT)
         SLR   R5,R4
         STM   R4,R5,VT1LE
         ST    R7,VTSTR
         AH    R0,=H'1'
         STCM  R0,B'0011',VTDDN    SET NEXT DD NUMBER
         DROP  R1
         ST    R1,CVECT
         LR    R1,R2               RESTORE AFTER GETMAIN
         LR    R15,R6              ...
TIDST    BCT   R1,*+L'*+6
         MVC   1(*-*,R7),0(R15)
         EX    R1,*-6
         STC   R1,0(R7)
         B     RDREC
SCENT    CLC   3(12,R1),=CL12'3012I ENTRY '
         BNE   TIDCM
         LA    R1,15(R1)
         CLI   0(R1),C' '
         BNE   *+L'*+8
         BXLE  R1,R2,*-8
         B     TIDCE
         LR    R15,R1
         CLI   0(R1),C' '
         BE    *+L'*+8
         BXLE  R1,R2,*-8
         B     TIDCE
         SLR   R1,R15
         CLM   R1,B'0001',LOGMNL
         BNE   TIDCE
         LR    R2,R1
         BCT   R2,*+L'*+6
         CLC   0(*-*,R15),LOGMN
         EX    R2,*-6
         BNE   TIDCE
         OI    ANSW,ANSWL
         B     RDREC
TIDCM    TM    3(R1),C'0'
         BNO   RDREC
         CLC   3(5,R1),=CL5'0001I'
         BE    RDREC
         CLC   3(5,R1),=CL5'0002I'
         BNE   TIDCE
         CLC   63(3,R1),=CL3' 0 '
         BE    RDREC
TIDCE    MVC   LLN(2),=AL1(74,C' ')
         LA    R1,LLN
         BAS   R9,SMSG
         B     RDREC
RDEND    XR    R10,R10
RDCLS   $VCLOSE DDO
         LTR   R10,R10
         BZ    *+L'*+12
         LTR   R15,R15
         BZ    EXANAL
         LR    R10,R15
         B     VCERR
         LTR   R10,R15
         BNZ   VCERR
         L     R6,DAIDOUT          IDCAMS OUTPUT DE-ALLOCATION
         USING DYNLIST,R6
         XC    DSNAME,DSNAME
        $DYNALL (R6),,MF=(E,DYNPLS)
         LTR   R10,R15             TEST RETURN CODE
         BZ    STVCT               OK, DE-ALLOCATED
         ICM   R1,B'1111',=CL4'FREE'
         BAS   R8,DFMR
         DROP  R6
         B     EXANAL
VOERR    CVD   R10,DBLWRK
         MVC   DBLWRK(4),=XL4'40202120'
         ED    DBLWRK(4),DBLWRK+L'DBLWRK-2
         MVC   VORC(L'VORC),DBLWRK+1
         LA    R1,VOMSG
         BAS   R9,SMSG
         B     EXANAL
VRERR    CVD   R10,DBLWRK
         MVC   DBLWRK(4),=XL4'40202120'
         ED    DBLWRK(4),DBLWRK+L'DBLWRK-2
         MVC   VRRC(L'VRRC),DBLWRK+1
         LA    R1,VRMSG
         BAS   R9,SMSG
         B     RDCLS
VCERR    CVD   R10,DBLWRK
         MVC   DBLWRK(4),=XL4'40202120'
         ED    DBLWRK(4),DBLWRK+L'DBLWRK-2
         MVC   VCRC(L'VCRC),DBLWRK+1
         LA    R1,VCMSG
         BAS   R9,SMSG
         B     EXANAL
STVCT    L     R1,CVECT
         USING VTDSECT,R1
         CL    R1,SVECT
         BNE   STEVC
         CL    R7,VTSTR
         BNL   STEVC
         CLI   EDAY,C' '
         BNE   *+L'*+20
         MVC   NNMD,SDAY
         LA    R1,NNMSG
         BAS   R9,SMSG
         LR    R10,R9
         B     EXANAL
         MVC   NSMD,SDAY
         MVC   NSME,EDAY
         LA    R1,NSMSG
         BAS   R9,SMSG
         LR    R10,R9
         B     EXANAL
STEVC    ST    R7,VTEND
         DROP  R1
         TM    ANSW,ANSWL
         BO    EXANAL
         TM    MANSW,SWMON
         BZ    EXANAL
         LA    R1,MWMSG
         BAS   R9,SMSG
EXANAL  @EXIT  (R10)
         SPACE 1
ANSW     DC    XL1'0'
ANSWL    EQU   X'80'               MONTH LOG NOTICE RECEIVED
         SPACE 1
VOMSG    DC    AL1(VOMSGL),C' -> IDCAMS OUTPUT ANALYSIS FAILED / '
         DC    C'$VOPEN RC='
VORC     DC    CL3' ',C' '
VOMSGL   EQU   *-(VOMSG+1)
VRMSG    DC    AL1(VRMSGL),C' -> IDCAMS OUTPUT ANALYSIS FAILED / '
         DC    C'$VREAD RC='
VRRC     DC    CL3' ',C' '
VRMSGL   EQU   *-(VRMSG+1)
VCMSG    DC    AL1(VCMSGL),C' -> IDCAMS OUTPUT ANALYSIS FAILED / '
         DC    C'$VCLOSE RC='
VCRC     DC    CL3' ',C' '
VCMSGL   EQU   *-(VCMSG+1)
OVMSG    DC    AL1(OVMSGL),C' -> OVERFLOW AT DAY '
OVMD     DC    CL5' ',C' / MORE THAN 9 * 256 LOG DATA-SETS '
OVMSGL   EQU   *-(OVMSG+1)
NNMSG    DC    AL1(NNMSGL),C' -> DAY '
NNMD     DC    CL5' ',C' HAS NO LOG DATA-SETS '
NNMSGL   EQU   *-(NNMSG+1)
NSMSG    DC    AL1(NSMSGL),C' -> DAY RANGE '
NSMD     DC    CL5' ',C'-'
NSME     DC    CL5' ',C' HAS NO LOG DATA-SETS '
NSMSGL   EQU   *-(NSMSG+1)
MWMSG    DC    AL1(MWMSGL),C' -> IDCAMS / NONE ABOUT MONTH LOG '
         DC    C'DATA-SET (NEW ASSUMED) '
MWMSGL   EQU   *-(MWMSG+1)
         SPACE 1
        @STOP
         EJECT
XGENER  @ENTER
         MVI   LLN,80
         MVI   LINE,C' '
         MVC   LINE+1(L'LINE-1),LINE
         L     R6,DAGJCL           GENJCL ALLOCATION
         USING DYNLIST,R6
         MVC   DDNAME,DDG
         LA    R2,DSNAME
         XR    R1,R1
         IC    R1,USIDL
         BCT   R1,*+L'*+6
         MVC   0(*-*,R2),USID
         EX    R1,*-6
         LA    R2,1(R1,R2)
         MVC   0(16,R2),=CL16'.GENJCL.L     .T'
         LA    R2,9(R2)
         LA    R3,7(R2)
        $GDATE ,(R3),DBLWRK
        $SDATE DBLWRK,(R2)
         MVC   DSPRI(2),=CL2'10'
         MVC   DSBLKSI(3),=CL3'800'
         MVC   DSORG(2),=CL2'PS'
         MVC   DSLRECL(2),=CL2'80'
         MVI   DSRECFM1,C'F'
         MVI   DSRECFM2,C'B'
         MVC   DSSTATUS(3),=CL3'NEW'
         MVC   DSNDISP(5),=CL5'CATLG'
         MVC   DSADISP(6),=CL6'DELETE'
         MVC   DSUNIT(5),=CL5'SYSDA'
         XC    DSVOLSER,DSVOLSER
         MVC   DSALLOC(3),=CL3'TRK'
         MVI   DSSEC,C'5'
        $DYNALL (R6),,MF=(E,DYNPLS)
         LTR   R10,R15             TEST RETURN CODE
         BZ    GNJOP               OK, ALLOCATED
         ICM   R1,B'1111',=CL4'ALL.'
         BAS   R8,DFMR
         XC    DSNAME,DSNAME
         B     XGNJ
         DROP  R6
GNJOP    MVI   TEXT,C' '
         MVC   TEXT+1(L'TEXT-1),TEXT
         L     R4,SKLJS            START (NO JOB CARD)
         L     R5,SKLJE            END SKELETON
GNJLP    TM    GNSW,GNSWL          LOGOUT DD PROCESSING ?
         BO    GNJLG
         MVC   TEXT(72),0(R4)
         CLC   TEXT(9),=CL9'//LOG... '
         BE    GNJIN
         CLC   TEXT(9),=CL9'//LOGOUT '
         BE    GNJOU
         LM    R1,R3,=A(TEXT,1,TEXT+70)
         BXLE  R1,R2,*+L'*+4
         B     GNJPT
         CLI   0(R1),C'?'
         BNE   *-12
         CLC   0(6,R1),=CL6'?1... '
         BNE   GNJPT
         LR    R6,R1
         SR    R3,R1
         BNP   GNERX
         CH    R3,=H'44'
         BL    GNERX
         MVI   0(R6),C' '
         EX    R3,GNMRZ
         L     R1,SVECT            GET THE COLLECTED DSN
         ST    R1,CVECT
         USING VTDSECT,R1
         LM    R2,R3,VTEND
         DROP  R1
GNJAL    MVI   0(R6),C' '
         MVC   1(43,R6),0(R6)
         XR    R1,R1
         IC    R1,0(R3)
         EX    R1,GNMVD
         CLR   R3,R2
         BNE   GNJAV
         L     R1,CVECT
         USING VTDSECT,R1
         L     R0,VTNXT
         LTR   R1,R0
         BNP   GNJPT
         LM    R2,R3,VTEND
         DROP  R1
         ST    R1,CVECT
         BAS   R8,GNOUT
         B     GNJER               +0
         B     GNJAL               +4 - NEXT DSN
GNJAV    BAS   R8,GNOUT
         B     GNJER               +0
         LA    R3,LVT(R3)          +4 - NEXT DSN
         B     GNJAL
GNJOU    LM    R1,R3,=A(TEXT,1,TEXT+70)
         LA    R1,9(R1)
         CLC   0(21,R1),=CL21' DSN=?2...,DISP=..., '
         BE    *+L'*+8
         BXLE  R1,R2,*-10
         B     GNERO
         LA    R1,5(R1)
         LR    R6,R1
         XR    R1,R1
         IC    R1,LOGMNL
         BCT   R1,*+L'*+6
         MVC   0(*-*,R6),LOGMN
         EX    R1,*-6
         LA    R6,1(R1,R6)
         MVI   0(R6),C','
         BAS   R8,GNOUT
         B     GNJER               +0
         TM    REQSW,SWOLD         +4 - MONTH LOG EXIST?
         BZ    *+L'*+8             NO
         OI    GNSW,GNSWL
         B     GNJNX
         MVI   TEXT+2,C' '
         MVC   TEXT+3(L'TEXT-3),TEXT+2
         MVC   TEXT+15(24),=CL24'DISP=(NEW,CATLG,DELETE),'
         B     GNJPT
GNJLG    CLC   0(3,R4),=CL3'// '
         BE    GNJNX
         MVI   TEXT+2,C' '
         MVC   TEXT+3(L'TEXT-3),TEXT+2
         MVC   TEXT+15(15),=CL15'DISP=(MOD,KEEP)'
         BAS   R8,GNOUT
         B     GNJER               +0
         NI    GNSW,255-GNSWL      +4
         B     GNJLP
GNJIN    LM    R1,R3,=A(TEXT,1,TEXT+70)
         LA    R1,9(R1)
         CLC   0(16,R1),=CL16' DSN=?1...,DISP='
         BE    *+L'*+8
         BXLE  R1,R2,*-10
         B     GNERL
         MVC   TEXT+5(3),=CL3' '
         LA    R6,5(R1)
         LA    R1,11(R6)
         CLI   0(R1),C' '
         BE    *+L'*+8
         BXLE  R1,R2,*-8
         B     GNERS
         SR    R3,R6
         SH    R3,=H'6'
         BNP   GNERL
         EX    R3,GNMVE
         MVI   0(R6),C' '
         EX    R3,GNMRZ
         MVC   GNDSN1(L'GNDSN1),TEXT
         MVC   GNDSN1+2(3),=CL3' '
         L     R1,SVECT            GET THE COLLECTED DSN
         ST    R1,CVECT
         USING VTDSECT,R1
         LM    R2,R3,VTEND
         MVC   TEXT+5(L'VTDDN),VTDDN
         DROP  R1
GNJIL    XR    R1,R1
         IC    R1,0(R3)
         EX    R1,GNMVD
         LA    R1,1(R1,R6)
         MVI   0(R1),C','
         BAS   R8,GNOUT
         B     GNJER               +0
         MVC   TEXT(L'GNDSN2),GNDSN2    +4 - DISP= CARD
         CLR   R3,R2
         BNE   GNJNV
         L     R1,CVECT
         USING VTDSECT,R1
         L     R0,VTNXT
         LTR   R1,R0
         BNP   GNJPT
         LM    R2,R3,VTEND
         DROP  R1
         ST    R1,CVECT
         BAS   R8,GNOUT
         B     GNJER               +0
         MVC   TEXT(L'GNDSN1),GNDSN1    +4 - NEXT //LOG...
         MVC   TEXT+2(3),=CL3'LOG'
         L     R1,CVECT
         USING VTDSECT,R1
         MVC   TEXT+5(L'VTDDN),VTDDN
         DROP  R1
         B     GNJIL
GNJNV    BAS   R8,GNOUT
         B     GNJER               +0
         LA    R3,LVT(R3)          +4 - NEXT DSN
         MVC   TEXT(L'GNDSN1),GNDSN1
         B     GNJIL
GNMVE    MVC   GNDSN2+15(*-*),6(R6)
GNMRZ    MVC   1(*-*,R6),0(R6)
GNMVD    MVC   0(*-*,R6),1(R3)
GNJPT    BAS   R8,GNOUT
         B     GNJER               +0
GNJNX    LA    R4,72(R4)           +4 - NEXT JCL CARD
         CLR   R4,R5               CHECK END OF JCL SKELETON
         BNH   GNJLP
         LA    R1,GNJNN
         BAS   R9,SMSG
GNJNM    L     R6,DAGJCL
         USING DYNLIST,R6
         MVC   GNJNT1,DSNAME
         TM    RUNSW,SWTFG+SWTBG
         BZ    *+L'*+6
         MVC   VARDATA,DSNAME
         DROP  R6
         LA    R1,GNJNT
         BAS   R9,SMSG
GNJCL   $UCLOSE DDG
         LTR   R10,R10
         BNZ   XGNJ
         LR    R10,R15
         B     XGNJ
GNJER    CVD   R15,DBLWRK          SET R.C. IN MESSAGE
         UNPK  DBLWRK(3),DBLWRK+L'DBLWRK-2(2)
         OI    DBLWRK+2,C'0'
         MVC   GNPER1(L'GNPER1),DBLWRK+3-L'GNPER1
         LA    R1,GNPER
         BAS   R9,SMSG
         B     GNJNM
GNERX    LA    R1,MSERX
         B     GNEND
GNERO    LA    R1,MSERO
         B     GNEND
GNERL    LA    R1,MSERL
         B     GNEND
GNERS    LA    R1,MSERS
GNEND    BAS   R9,SMSG
         LR    R10,R9
         B     GNJCL
XGNJ    @EXIT  (R10)
         SPACE 1
*------- GENERATE OUTPUT ROUTINE
*              R8 - LINK REGISTER / RETURN +0 = $PUNCH ERROR
*                                          +4 = OK
*              R10 = R15 - RETURN CODE
         SPACE 1
GNOUT    MVC   LINE(L'TEXT),TEXT
        $PUNCH LINE,,DDG
         LTR   R10,R15
         BZ    4(R8)
         BR    R8
         SPACE 1
GNDSN1   DC    CL72' '
GNDSN2   DC    CL72'// '
GNSW     DC    XL1'0'
GNSWL    EQU   X'80'               LOGOUT DD PROCESSING
         SPACE 1
GNPER    DC    AL1(GNPERL),C' -> $PUNCH ERROR (R15='
GNPER1   DC    CL2' ',C') - DATA-SET INCOMPLETE '
GNPERL   EQU   *-(GNPER+1)
GNJNN    DC    AL1(GNJNNL),C' => EU-S01I '
         DC    C'JCL DATA-SET (CATALOG''D) SUCCESSFULLY GENERATED '
GNJNNL   EQU   *-(GNJNN+1)
GNJNT    DC    AL1(GNJNTL),C' => EU-S02I NAME IS : '
GNJNT1   DC    CL44' ',C' '
GNJNTL   EQU   *-(GNJNT+1)
         SPACE 1
        @STOP
         EJECT
XSUBMIT @ENTER
         LA    R1,RBBKPTR          ALLOCATE INTERNAL READER
        DYNALLOC ,
         LTR   R10,R15             CHECK FOR ERRORS?
         BZ    SBMOK               OK, ALLOCATED
         MVC   RCODES,RBRSC
         ST    R15,RCODES+4
         LA    R6,=CL8'INT.RDR.'
         ICM   R1,B'1111',=CL4'ALL.'
         BAS   R8,DFMR
         B     XSBMT
SBMOK    MVC   INRDR+(ACBDDNM-IFGACB)(L'ACBDDNM),TXTDDN
        OPEN   (INRDR)             OPEN JES2 ACB
         LTR   R10,R15
         BZ    SBMOP               OK, OPEN DONE
         LA    R7,XSBMT
         MVC   MSEIR1,=CL15'IN.RDR --- OPEN'
SBMSM    CVD   R15,DBLWRK          SET R.C. IN MESSAGE
         UNPK  DBLWRK(3),DBLWRK+L'DBLWRK-2(2)
         OI    DBLWRK+2,C'0'
         MVC   MSEIR2(L'MSEIR2),DBLWRK+3-L'MSEIR2
         LA    R1,MSEIR
         BAS   R9,SMSG
         BR    R7
SBMOP    LA    R7,SBMCL
         MVI   TEXT,C' '
         MVC   TEXT+1(L'TEXT-1),TEXT
         L     R4,SSKLW            START (WITH JOB CARD)
         L     R5,SKLJE            END SKELETON
         LA    R2,2(R4)            GET JOB-NAME FOR FURTHER MESSAGE
         LA    R3,SBJBNM
         LA    R0,L'SBJBNM
         CLI   0(R2),C' '
         BE    *+L'*+18
         MVC   0(1,R3),0(R2)
         LA    R2,1(R2)
         LA    R3,1(R3)
         BCT   R0,*-22
         TM    REQSW,SWCPY+SWSCN   COPY OR SCAN REQUESTED?
         BNZ   SBMLP
         OI    SBSW,SBSWJ          NO, SET AS JOB CARD PROCESSED
SBMLP    TM    SBSW,SBSWL          LOGOUT DD PROCESSING ?
         BO    SBMLG
         TM    SBSW,SBSWJ
         BO    SBMSC               JOB CARD PROCESSED
         CL    R4,SKLJI            INSERT TYPRUN= CARD?
         BNE   SBMSC               NO, NOT HERE
         MVC   TEXT(3),=CL3'// '   YES, ADD IT
         MVC   TEXT+3(L'TEXT-3),TEXT+2
         MVC   TEXT+15(7),=CL7'TYPRUN='
         TM    REQSW,SWCPY
         BZ    *+L'*+10
         MVC   TEXT+22(5),=CL5'COPY,'
         B     *+L'*+6
         MVC   TEXT+22(5),=CL5'SCAN,'
         OI    SBSW,SBSWJ
         BAS   R8,SBOUT
         B     SBMEM               +0
         B     SBMEP               +4
SBMSC    MVC   TEXT(72),0(R4)      +8
         CLC   TEXT(9),=CL9'//LOG... '
         BE    SBMIN
         CLC   TEXT(9),=CL9'//LOGOUT '
         BE    SBMOU
         LM    R1,R3,=A(TEXT,1,TEXT+70)
         BXLE  R1,R2,*+L'*+4
         B     SBMPT
         CLI   0(R1),C'?'
         BNE   *-12
         CLC   0(6,R1),=CL6'?1... '
         BNE   SBMPT
         LR    R6,R1
         SR    R3,R1
         BNP   SBERX
         CH    R3,=H'44'
         BL    SBERX
         MVI   0(R6),C' '
         EX    R3,SBMRZ
         L     R1,SVECT            GET THE COLLECTED DSN
         ST    R1,CVECT
         USING VTDSECT,R1
         LM    R2,R3,VTEND
         DROP  R1
SBMAL    MVI   0(R6),C' '
         MVC   1(43,R6),0(R6)
         XR    R1,R1
         IC    R1,0(R3)
         EX    R1,SBMVD
         CLR   R3,R2
         BNE   SBMAV
         L     R1,CVECT
         USING VTDSECT,R1
         L     R0,VTNXT
         LTR   R1,R0
         BNP   SBMPT
         LM    R2,R3,VTEND
         DROP  R1
         ST    R1,CVECT
         BAS   R8,SBOUT
         B     SBMEM               +0
         B     SBMEP               +4
         B     SBMAL               +8 - NEXT DSN
SBMAV    BAS   R8,SBOUT
         B     SBMEM               +0
         B     SBMEP               +4
         LA    R3,LVT(R3)          +8 - NEXT DSN
         B     SBMAL
SBMOU    LM    R1,R3,=A(TEXT,1,TEXT+70)
         LA    R1,9(R1)
         CLC   0(21,R1),=CL21' DSN=?2...,DISP=..., '
         BE    *+L'*+8
         BXLE  R1,R2,*-10
         B     SBERO
         LA    R1,5(R1)
         LR    R6,R1
         XR    R1,R1
         IC    R1,LOGMNL
         BCT   R1,*+L'*+6
         MVC   0(*-*,R6),LOGMN
         EX    R1,*-6
         LA    R6,1(R1,R6)
         MVI   0(R6),C','
         BAS   R8,SBOUT
         B     SBMEM               +0
         B     SBMEP               +4
         TM    REQSW,SWOLD         +8 - MONTH LOG EXIST?
         BZ    *+L'*+8             NO
         OI    SBSW,SBSWL
         B     SBMNX
         MVI   TEXT+2,C' '
         MVC   TEXT+3(L'TEXT-3),TEXT+2
         MVC   TEXT+15(24),=CL24'DISP=(NEW,CATLG,DELETE),'
         B     SBMPT
SBMLG    CLC   0(3,R4),=CL3'// '
         BE    SBMNX
         MVI   TEXT+2,C' '
         MVC   TEXT+3(L'TEXT-3),TEXT+2
         MVC   TEXT+15(15),=CL15'DISP=(MOD,KEEP)'
         BAS   R8,SBOUT
         B     SBMEM               +0
         B     SBMEP               +4
         NI    SBSW,255-SBSWL      +8
         B     SBMLP
SBMIN    LM    R1,R3,=A(TEXT,1,TEXT+70)
         LA    R1,9(R1)
         CLC   0(16,R1),=CL16' DSN=?1...,DISP='
         BE    *+L'*+8
         BXLE  R1,R2,*-10
         B     SBERL
         MVC   TEXT+5(3),=CL3' '
         LA    R6,5(R1)
         LA    R1,11(R6)
         CLI   0(R1),C' '
         BE    *+L'*+8
         BXLE  R1,R2,*-8
         B     SBERS
         SR    R3,R6
         SH    R3,=H'6'
         BNP   SBERL
         EX    R3,SBMVE
         MVI   0(R6),C' '
         EX    R3,SBMRZ
         MVC   SBDSN1(L'SBDSN1),TEXT
         MVC   SBDSN1+2(3),=CL3' '
         L     R1,SVECT            GET THE COLLECTED DSN
         ST    R1,CVECT
         USING VTDSECT,R1
         LM    R2,R3,VTEND
         MVC   TEXT+5(L'VTDDN),VTDDN
         DROP  R1
SBMIL    XR    R1,R1
         IC    R1,0(R3)
         EX    R1,SBMVD
         LA    R1,1(R1,R6)
         MVI   0(R1),C','
         BAS   R8,SBOUT
         B     SBMEM               +0
         B     SBMEP               +4
         MVC   TEXT(L'SBDSN2),SBDSN2    +8 - DISP= CARD
         CLR   R3,R2
         BNE   SBMNV
         L     R1,CVECT
         USING VTDSECT,R1
         L     R0,VTNXT
         LTR   R1,R0
         BNP   SBMPT
         LM    R2,R3,VTEND
         DROP  R1
         ST    R1,CVECT
         BAS   R8,SBOUT
         B     SBMEM               +0
         B     SBMEP               +4
         MVC   TEXT(L'SBDSN1),SBDSN1    +8 - NEXT //LOG...
         MVC   TEXT+2(3),=CL3'LOG'
         L     R1,CVECT
         USING VTDSECT,R1
         MVC   TEXT+5(L'VTDDN),VTDDN
         DROP  R1
         B     SBMIL
SBMNV    BAS   R8,SBOUT
         B     SBMEM               +0
         B     SBMEP               +4
         LA    R3,LVT(R3)          +8 - NEXT DSN
         MVC   TEXT(L'SBDSN1),SBDSN1
         B     SBMIL
SBMVD    MVC   0(*-*,R6),1(R3)
SBMVE    MVC   SBDSN2+15(*-*),6(R6)
SBMRZ    MVC   1(*-*,R6),0(R6)
SBMPT    BAS   R8,SBOUT
         B     SBMEM               +0
         B     SBMEP               +4
SBMNX    LA    R4,72(R4)           +8 - NEXT JCL CARD
         CLR   R4,R5               CHECK END OF JCL SKELETON
         BNH   SBMLP
         MVI   TEXT,C' '
         MVC   TEXT+1(L'TEXT-1),TEXT
         MVC   TEXT(2),SBDSN2      NULL JCL
         BAS   R8,SBOUT
         B     SBMEM               +0
         B     SBMEP               +4
         MVC   TEXT(5),=CL5'/*EOF' +8 - JES2 END-OF-FILE
         BAS   R8,SBOUT
         B     SBMEM               +0
         B     SBMEP               +4
        ENDREQ RPL=REQPL           +8 - GET JOB NUMBER
         LTR   R10,R15             RECEIVED BACK?
         BZ    *+L'*+10            YES
         MVC   MSEIR1,=CL15'IN.RDR - ENDREQ'
         B     SBMSM
         MVC   MSJNN1,SBJBNM       MOVE JOB-NAME
         MVC   MSJNN2(8),REQPL+(RPLRBAR-IFGRPL) MOVE JOB NUMBER
         LA    R1,MSJNN2+3
         CLI   0(R1),C'0'
         BNE   *+L'*+12
         MVI   0(R1),C' '
         LA    R1,1(R1)
         B     *-16
         MVC   MSJNN3,SBNAME
        $GDATE MSJNN4,MSJNT1
         ICM   R1,B'1111',MSJNT1+2
         STCM  R1,B'1100',MSJNT1+3
         STCM  R1,B'0011',MSJNT1+6
         MVI   MSJNT1+2,C':'
         MVI   MSJNT1+5,C':'
         LA    R1,MSJNN
         BAS   R9,SMSG
         LA    R1,MSJNT
         BAS   R9,SMSG
SBMCL    LA    R7,XSBMT
        CLOSE  (INRDR)
         LTR   R10,R10
         BZ    *+L'*+8
         LTR   R15,R15
         BZR   R7
         B     *+L'*+6
         LTR   R10,R15
         BZ    XSBMT
         MVC   MSEIR1,=CL15'IN.RDR -- CLOSE'
         B     SBMSM
SBMEM    MVC   MSEIR1,=CL15'IN.RDR -- MODCB'
         B     SBMSM
SBMEP    MVC   MSEIR1,=CL15'IN.RDR ---- PUT'
         B     SBMSM
SBERI    TM    REQSW,SWCPY
         BZ    *+L'*+10
         MVC   MSERI1,=CL4'COPY'
         B     *+L'*+6
         MVC   MSERI1,=CL4'SCAN'
         LA    R1,MSERI
         B     SBPRG
SBERX    LA    R1,MSERX
         B     SBPRG
SBERO    LA    R1,MSERO
         B     SBPRG
SBERL    LA    R1,MSERL
         B     SBPRG
SBERS    LA    R1,MSERS
SBPRG    BAS   R9,SMSG
         LR    R10,R9
         MVC   TEXT(7),=CL7'/*PURGE'    JES2 CANCEL JOB
         BAS   R8,SBOUT
         B     SBMEM               +0
         B     SBMEP               +4
         MVC   TEXT(5),=CL5'/*EOF' +8 - JES2 END-OF-FILE
         BAS   R8,SBOUT
         B     SBMEM               +0
         B     SBMEP               +4
         BR    R7                  +8
XSBMT   @EXIT  (R10)
         SPACE 1
*------- INTRDR OUTPUT ROUTINE
*              R8 - LINK REGISTER / RETURN +0 = MODCB ERROR
*                                          +4 = PUT ERROR
*                                          +8 = OK
*              R10 = R15 - RETURN CODE
         SPACE 1
SBOUT   MODCB  RPL=REQPL,AREA=TEXT
         LTR   R10,R15
         BNZR  R8
        PUT    RPL=REQPL
         LTR   R10,R15
         BNZ   4(R8)
         B     8(R8)
         SPACE 1
RBBKPTR  DC    0F'0',XL1'80',AL3(RBBK)
RBBK     DC    0F'0',AL1(RBBKEND-RBBK)
         DC    AL1(S99VRBAL)
         DC    AL1(S99NOCNV+S99NOMNT,0)
RBRSC    DC    F'0'                ERROR/INFO REASON CODES.
         DC    A(RBTXP)
         DC    F'0',XL4'0'
RBBKEND  EQU   *
RBTXP    DC    A(TXTUN1)
         DC    A(TXTUN2)
         DC    A(TXTUN3)
         DC    A(TXTUN4)
         DC    A(TXTUN5)
         DC    XL1'80',AL3(TXTUN6)
TXTUN1   DC    AL2(DALSYSOU),AL2(1),AL2(1),CL1'A'
TXTUN2   DC    AL2(DALSPGNM),AL2(1),AL2(6),CL6'INTRDR'
TXTUN3   DC    AL2(DALCLOSE),AL2(0)
TXTUN4   DC    AL2(DALLRECL),AL2(1),AL2(2),AL2(80)
TXTUN5   DC    AL2(DALRECFM),AL2(1),AL2(1),AL1(DCBRECF)
TXTUN6   DC    AL2(DALRTDDN),AL2(1)
TXTDDNL  DC    AL2(8)
TXTDDN   DC    CL8' '
         SPACE 1
SBJBNM   DC    CL8' '
SBDSN1   DC    CL72' '
SBDSN2   DC    CL72'// '
SBSW     DC    XL1'0'
SBSWL    EQU   X'80'               LOGOUT DD PROCESSING
SBSWJ    EQU   X'01'               JOB CARD PROCESSED
         SPACE 1
MSEIR    DC    AL1(MSEIRL),C' -> '
MSEIR1   DC    CL15' ',C' ERROR (R15='
MSEIR2   DC    CL2' ',C') - ONLY SUBMIT FAILS '
MSEIRL   EQU   *-(MSEIR+1)
MSJNN    DC    AL1(MSJNNL),C' => EU-S00I '
MSJNN1   DC    CL8' ',C' ('
MSJNN2   DC    CL8' ',C') SUBMITTED BY '
MSJNN3   DC    CL8' ',C' ON '
MSJNN4   DC    CL20' '
MSJNNL   EQU   *-(MSJNN+1)
MSJNT    DC    AL1(MSJNTL),C' => EU-S00I ',CL42' ',C'AT '
MSJNT1   DC    CL8' ',C' '
MSJNTL   EQU   *-(MSJNT+1)
MSERI    DC    AL1(MSERIL),C' => EU-S01A FAILED INSERT "TYPRUN='
MSERI1   DC    CL4' ',C'" CONTINUATION TO JOB CARD '
MSERIL   EQU   *-(MSERI+1)
         SPACE 1
         PRINT NOGEN
INRDR   ACB    MACRF=(ADR,SEQ,OUT),DDNAME=XXXXXXXX
REQPL   RPL    ACB=INRDR,RECLEN=80,AREALEN=80,OPTCD=(ADR,SEQ,SYN,NUP)
         PRINT GEN
         SPACE 1
        @STOP
         EJECT
XEXIT   @ENTER
         LR    R7,R10
         L     R6,DAGSKL           GET SKELETON DE-ALLOCATION
         USING DYNLIST,R6
         CLI   DSNAME,C' '
         BE    NOTAP               NEVER ALLOCATED
         CLI   DSNAME,0
         BE    NOTAP               ALREADY DE-ALLOCATED
         XC    DSNAME,DSNAME
        $DYNALL (R6),,MF=(E,DYNPLS)
         LTR   R10,R15             TEST RETURN CODE
         BZ    NOTAP               OK, DE-ALLOCATED
         ICM   R1,B'1111',=CL4'FREE'
         BAS   R8,DFMR
NOTAP    L     R6,DAIDIN           IDCAMS INPUT DE-ALLOCATION
         CLI   DSNAME,C' '
         BE    NOTAI               NEVER ALLOCATED
         CLI   DSNAME,0
         BE    NOTAI               ALREADY DE-ALLOCATED
         XC    DSNAME,DSNAME
        $DYNALL (R6),,MF=(E,DYNPLS)
         LTR   R10,R15             TEST RETURN CODE
         BZ    NOTAI               OK, DE-ALLOCATED
         ICM   R1,B'1111',=CL4'FREE'
         BAS   R8,DFMR
NOTAI    L     R6,DAIDOUT          IDCAMS OUTPUT DE-ALLOCATION
         CLI   DSNAME,C' '
         BE    NOTAO               NEVER ALLOCATED
         CLI   DSNAME,0
         BE    NOTAO               ALREADY DE-ALLOCATED
         XC    DSNAME,DSNAME
        $DYNALL (R6),,MF=(E,DYNPLS)
         LTR   R10,R15             TEST RETURN CODE
         BZ    NOTAO               OK, DE-ALLOCATED
         ICM   R1,B'1111',=CL4'FREE'
         BAS   R8,DFMR
NOTAO    TM    RUNSW,SWSYS         SYSTEM TASK?
         BO    NOTAT               YES
         L     R6,DAGJCL           GENJCL DE-ALLOCATION
         CLI   DSNAME,C' '
         BE    NOTAT               NEVER ALLOCATED
         CLI   DSNAME,0
         BE    NOTAT               ALREADY DE-ALLOCATED
         XC    DSNAME,DSNAME
        $DYNALL (R6),,MF=(E,DYNPLS)
         LTR   R10,R15             TEST RETURN CODE
         BZ    NOTAT               OK, DE-ALLOCATED
         ICM   R1,B'1111',=CL4'FREE'
         BAS   R8,DFMR
         DROP  R6
NOTAT    LM    R2,R3,LVECT         FREE ALL VECTORS STORAGE
         LTR   R1,R3
         BZ    NOFREE
         USING VTDSECT,R1
         L     R3,VTNXT
         DROP  R1
         LR    R0,R2
        FREEMAIN R,LV=(0),A=(1)
         B     NOTAT+L'NOTAT
NOFREE   LM    R0,R1,LSKLW
         LTR   R1,R1
         BZ    NOSKLW
        FREEMAIN R,LV=(0),A=(1)    FREE JCL WORK STORAGE
NOSKLW   LM    R0,R1,LDYNW
         LTR   R1,R1
         BZ    STVAR
        FREEMAIN R,LV=(0),A=(1)    FREE DYNAMIC WORK STORAGE
STVAR    TM    RUNSW,SWTFG+SWTBG
         BZ    QUIT
         CLI   VARDATA,C' '
         BE    QUIT
         LA    R1,VARDATA+L'VARDATA ESTABLISH TSO CLIST VARIABLE
         LA    R0,L'VARDATA
         BCTR  R1,0
         CLI   0(R1),C' '
         BNE   *+L'*+8
         BCT   R0,*-10
         LA    R0,1
         ST    R0,DATALENG
         L     R15,CVTPTR
         USING CVTMAP,R15
         L     R15,CVTTVT
         DROP  R15
         USING TSVT,R15
         L     R15,TSVTVACC        VARIABLE ACCESS ROUTINE
         DROP  R15
         LA    R1,CT441PRM
         LTR   R15,R15
         BNZ   STVXQ
        LINK   EP=IKJCT441,MF=(E,(1))
         B     STVXQ+L'STVXQ
STVXQ    BASR  R14,R15
         LTR   R15,R15             ANY ERROR?
         BZ    QUIT                NO, OK
         CH    R15,=H'40'          YES, BUT BECAUSE NOT IN A CLIST?
         BE    QUIT                YES, OK
         CVD   R15,DBLWRK
         UNPK  DBLWRK(3),DBLWRK+6(2)
         OI    DBLWRK+2,C'0'
         MVC   TSRC(L'TSRC),DBLWRK+3-L'TSRC
         LA    R1,TSMSG
         BAS   R9,SMSG
QUIT     LTR   R7,R7               SET FINAL C.C.
         BNZ   *+L'*+6
         LTR   R10,R10
         BZ    *+L'*+4
         LA    R10,16
        @EXIT  (R10)
         SPACE 1
CT441PRM DC    A(ENTRYCDE)         IKJCT441 PARM.LIST
         DC    A(NAMEADDR)
         DC    A(NAMELENG)
         DC    A(DATAADDR)
         DC    A(DATALENG)
         DC    A(TOKENPRM+X'80000000')
ENTRYCDE DC    A(TSVEUPDT)         ENTRY CODE
NAMEADDR DC    A(VARNAME)          ADDRESS OF VARIABLE NAME
NAMELENG DC    A(L'VARNAME)        LENGTH OF VARIABLE NAME
DATAADDR DC    A(VARDATA)          ADDRESS OF VARIABLE DATA
DATALENG DC    A(*-*)              LENGTH OF VARIABLE DATA
TOKENPRM DC    A(*-*)              TOKEN TO VARIABLE ACCESS SERVICE
VARNAME  DC    C'EUGENDS'
         SPACE 1
TSMSG    DC    AL1(TSMSGL),C' => EU-S02I IKJCT441 : RC = '
TSRC     DC    CL2' ',C' / TSO CLIST VARIABLE : EUGENDS '
TSMSGL   EQU   *-(TSMSG+1)
         SPACE 1
        @STOP
         EJECT
         DROP  R12                 KILL MAIN ADDRESSABILITY
         SPACE 1
*------- PARSE PCL CSECT AND PDL DSECT (COMMAND SYNTAX)
         SPACE 1
         PRINT  NOGEN
PARMLST IKJPARM
PDID    IKJKEYWD
        IKJNAME 'DAY',SUBFLD=SFID,ALIAS=('D')
PDIF    IKJKEYWD
        IKJNAME 'FROM',SUBFLD=SFIF,ALIAS=('F')
PDIT    IKJKEYWD
        IKJNAME 'TO',SUBFLD=SFIT,ALIAS=('T')
PDIJ    IKJKEYWD
        IKJNAME 'JCL',SUBFLD=SFIJ,ALIAS=('JOB','J')
PDOP    IKJKEYWD
        IKJNAME  'MSG',ALIAS=('M','LIST','L')
        IKJNAME  'NOMSG',ALIAS=('NOLIST','N')
SFID    IKJSUBF
SDID    IKJIDENT 'DAY(DATE)',MAXLNTH=8,FIRST=ANY,OTHER=ANY,            X
               VALIDCK=DTEVALCK,DEFAULT='NONE',                        X
               HELP=('FORMAT : DD/MM/YY, DD.MM.YY OR DD-MM-YY')
SFIF    IKJSUBF
SDIF    IKJIDENT 'FROM(DATE)',MAXLNTH=8,FIRST=ANY,OTHER=ANY,           X
               VALIDCK=DTEVALCK,DEFAULT='NONE',                        X
               HELP=('FORMAT : DD/MM/YY, DD.MM.YY OR DD-MM-YY')
SFIT    IKJSUBF
SDIT    IKJIDENT 'TO(DATE)',MAXLNTH=8,FIRST=ANY,OTHER=ANY,             X
               VALIDCK=DTEVALCK,DEFAULT='NONE',                        X
               HELP=('FORMAT : DD/MM/YY, DD.MM.YY OR DD-MM-YY')
SFIJ    IKJSUBF
SDIJ    IKJIDENT 'JCL(XX)',MAXLNTH=2,FIRST=ANY,OTHER=ANY,              X
               VALIDCK=JCLVALCK,DEFAULT='00',                          X
               HELP=('2 CHARACTERS SUFFIX TO MEMBER NAME "IMSLOG.."')
        IKJENDP
         EJECT
*------- DSECT'S AREAS
         SPACE 1
VTDSECT  DSECT ,                   LOCAL VECTOR AREA DESCRIPTION
VTNXT    DS    A                   NEXT VECTOR AREA POINTER
VT1LE    DS    F                   LENGTH OF 1 VECTOR ELEMENT
VTEND    DS    A                   ADDRESS OF LAST VECTOR ELEMENT
VTSTR    DS    A                   ADDRESS OF FIRST VECTOR ELEMENT
VTDDN    DS    CL2                 VECTOR DD NUMBER (//LOG.. NUMBER)
BVL      EQU   *-VTDSECT
VT1ST    DS    XL1,CL44            FIRST VECTOR ELEMENT
LVT      EQU   *-VT1ST
NVT      EQU   256*LVT             MAX. DD-CONCAT. = 256
TVT      EQU   ((BVL+NVT+7)/8)*8   GETMAIN VECTOR LENGTH
         SPACE 1
CIBDSECT DSECT ,
CIB     IEZCIB ,
        CVT    DSECT=YES,LIST=YES
        IHAPSA
        IHAASCB
        IHAASXB
        IHAACEE
TIODSECT DSECT ,
        IEFTIOT1 ,
        IKJTSVT
        IKJEBECA
        IKJCPPL
        IKJPSCB
        IKJPPL
PPLL    EQU    *-PPL
        IKJUPT
        IKJIOPL
IOPLLEN  EQU   *-IOPL
        $DYNLIST R=NO
        IEFZB4D0
        IEFZB4D2
        DCBD   DSORG=PS,DEVD=DA
        IFGACB
        IFGRPL
         SPACE 2
         END
