V300     TITLE 'VSM00300 - CSA PROTECT KEY MONITOR.'
         PRINT OFF
         COPY  VSMMAC
         PRINT ON
         SPACE 1
***********************************************************************
*                                                                     *
*    MODULE :           VSM00300 (MVS/XA)                             *
*                       VERSION : 1.0                                 *
*                       DATE : 12 NOV 1986                            *
*                       NAME : CSA PROTECT KEY MONITOR                *
*                       ATTRIBUTES : REUS                             *
*                                                                     *
*    AUTHOR :           MOINIL P.A. - COMPUTING CENTRE                *
*                       J.R.C. - ISPRA ESTABLISHMENT                  *
*                       21020 ISPRA (VA), ITALY                       *
*                                                                     *
*    FUNCTION :         SHOW CSA SUBPOOL UTILIZATION BY PROTECT KEY   *
*                                                                     *
*    REGS AT INPUT :    R1   - INTER MODULE LINKAGE                   *
*                       R14  - RETURN ADDRESS                         *
*                       R15  - EPA                                    *
*                                                                     *
*    REGS USAGE :       R0   - WORK REGISTER                          *
*                       R1   - POINTER TO INTER MODULE LINKAGE        *
*                       R2-R5 - WORK REGISTERS                        *
*                       R6   - WORK AREA POINTER (VSMLIST)            *
*                       R7   - WORK AREA SIZE (VSMLIST)               *
*                       R8   - WORK REGISTER                          *
*                       R9   - INTERNAL LINKAGE REGISTER              *
*                       R10  - LINKAGE AREA POINTER                   *
*                       R11  - BASE REGISTER                          *
*                       R12  - 2ND BASE REGISTER (RESERVED)           *
*                       R13  - SAVE AREA POINTER                      *
*                       R14  - LINKAGE REGISTER                       *
*                       R15  - ADDRESS OF CALLED MODULES              *
*                                                                     *
*    REGS AT EXIT :     R14  - RETURN ADDRESS                         *
*                                                                     *
*    LABELS :           SOME OF THE FIELD USAGE IN THIS MODULE CAN    *
*                       BE DETERMINED BY THE FIRST CHARACTER OF THE   *
*                       FIELD. THE KEYS ARE :                         *
*                            @ - FIELD IS IN INTER MODULE LINKAGE     *
*                                AREA                                 *
*                            # - FIELD IS PART OF THE OUTPUT SCREEN   *
*                            $ - DSECT                                *
*                                                                     *
***********************************************************************
         EJECT
VSM00300 START 0
         SPACE 1
        $DEFREG ,
***********************************************************************
*        STANDARD OS LINKAGE                                          *
***********************************************************************
         SPACE 1
        $XENT  BASE=R11            SAVE CALLER'S REGS
         EJECT
***********************************************************************
*        INITIALIZATION                                               *
***********************************************************************
         SPACE 1
         MVI   SW16M,0             RESET
         LR    R10,R1              POINT TO LINKAGE AREA
         USING $LNKSECT,R10        DSECT ADDRESSABILITY
P000100  MVI   DBLEWORD,0          CLEAR WORK FIELDS WITH ZEROS
         MVC   DBLEWORD+1(CLRL-1),DBLEWORD
         L     R1,=A(WCELLS)       RESET SP COLLECT DATA AREAS
         XC    0(WSPL,R1),0(R1)
         TM    SW16M,UP16M
         BO    *+L'*+8
         MVI   #S16M,C'<'
         B     *+L'*+4
         MVI   #S16M,C'>'
         MVI   #ALTM01,C' '
         MVC   #ALTM01+1(L'#ALTM01-1),#ALTM01
         MVC   #ALTM02(L'#ALTM02),#ALTM01
         LM    R6,R7,@WAADD        SET WORK AREA POINTER/SIZE
         EJECT
***********************************************************************
*        CSA - GET VSM DATA                                           *
***********************************************************************
         SPACE 1
         LR    R2,R6               CLEAR
         LR    R3,R7                 VSMLIST
         LR    R4,R6                   WORK AREA
         XR    R5,R5                     WITH
         MVCL  R2,R4                       ZEROS
        VSMLIST SP=CSA,SPACE=FREE,WKAREA=((R6),(R7))
         LTR   R15,R15             SUCCESSFULLY EXECUTED ?
         BNZ   ERRG                NO, ERROR
         BAS   R9,WKSNAP           TAKE W.A. SNAP IF NEEDED
         EJECT
***********************************************************************
*        CSA - COLLECT DATA FROM VSM                                  *
***********************************************************************
         SPACE 1
         L     R3,4(R6)            GET ADDRESS OF DATA
         L     R5,8(R6)            GET LENGTH OF DATA
         AR    R5,R3               END OF DATA+1 ADDRESS
         L     R8,0(R3)            GET NUMBER OF SUBPOOLS
         LTR   R8,R8               NONE ?
         BNP   ERRN                YES
         LA    R3,4(R3)            BUMP CURRENT POINTER,
P000200  CLR   R3,R5                 TEST IF OVERFLOW,
         BNL   ERR0                    AND BRANCH IF YES, ERROR
         USING SDF,R3
         CLI   SDFIS,X'00'         SUBPOOL DESCRIPTOR IDENTIFIER ?
         BNE   ERRIS
         LA    R0,SPTABN           SCAN SUBPOOLS TABLE
         L     R2,=A(SPTAB)
P000210  CLC   0(1,R2),SDFID       THIS SUBPOOL ID NUMBER ?
         LA    R2,L'SPTAB(R2)
         BE    P000220             YES
         BCT   R0,P000210
         B     ERRS                UNKNOWN SUBPOOL
P000220  SL    R2,=A(SPTAB)        COMPUTE DISPLACEMENT
         SLL   R2,2                  INTO WORK CELLS
         MVZ   KEY,SDFKF           EXTRACT STORAGE KEY
         L     R1,=A(KEYTAB)       SCAN KEYS TABLE
P000230  CLC   KEY(L'KEY),0(R1)    THIS KEY ?
         BNH   P000240             YES
         LA    R1,L'KEYTAB(R1)
         B     P000230
P000240  L     R14,4(R1)           GET WORK CELLS ADDRESS
         XR    R15,R15             ALLOCATED SPACE ACCUMULATOR
         XR    R1,R1               FREE SPACE ACCUMULATOR
         XR    R0,R0
         IC    R0,SDFLG            LENGTH OF SUBPOOL DESCRIPTOR
         DROP  R3
         AR    R3,R0               BUMP CURRENT PTR
         CLR   R3,R5               TEST IF DATA OVERFLOW
         BNL   ERR1                BRANCH IF YES, ERROR
         ICM   R9,B'1111',0(R3)    GET NUMBER OF ALLOCATED BLOCKS
         LA    R3,4(R3)            BUMP CURRENT POINTER
         LTR   R9,R9               HOW MANY ALLOCATED BLOCKS ?
         BNP   P000280             BRANCH IF NONE
P000250  CLR   R3,R5               TEST IF DATA OVERFLOW
         BNL   ERR2                BRANCH IF YES, ERROR
         USING AFUF,R3
         NI    SW16M,255-SKACC
         ICM   R4,B'1111',AFUFVA   VIRTUAL ADDRESS OF ALLOC. BLOCK
         LA    R4,0(R4)
         TM    SW16M,UP16M
         BO    P000252
         CL    R4,=A(16*1024*1024)
         BL    P000253
P000251  OI    SW16M,SKACC
         B     P000254
P000252  CL    R4,=A(16*1024*1024)
         BL    P000251
P000253  ICM   R0,B'1111',AFUFLG   LENGTH OF ALLOCATED BLOCK
         AR    R15,R0
         DROP  R3
P000254  LA    R3,LAFUF(R3)        BUMP CURRENT POINTER,
         CLR   R3,R5               TEST IF OVERFLOW
         BNL   ERR3                BRANCH IF YES, ERROR
         ICM   R4,B'1111',0(R3)    GET NUMBER OF FREE SPACE DESC.
         LA    R3,4(R3)            BUMP CURRENT POINTER
         LTR   R4,R4               HOW MANY FREE SPACE DESC. ?
         BNP   P000270             BRANCH IF NONE
P000260  CLR   R3,R5               TEST IF DATA OVERFLOW
         BNL   ERR4                BRANCH IF YES, ERROR
         TM    SW16M,SKACC
         BO    P000261
         USING AFUF,R3
         ICM   R0,B'1111',AFUFLG   LENGTH OF FREE SPACE
         AR    R1,R0
         DROP  R3
P000261  LA    R3,LAFUF(R3)        BUMP CURRENT POINTER
         BCT   R4,P000260          LOOP IF MORE FREE SPACE DESC.
P000270  BCT   R9,P000250          LOOP IF MORE ALLOCATED BLOCKS
         SR    R15,R1              COMPUTE SPACE USED
         LR    R1,R15
         LR    R0,R15
         A     R15,0(R14)          CSA SPACE
         ST    R15,0(R14)
         A     R1,0(R2,R14)        SUBPOOL SPACE
         ST    R1,0(R2,R14)
         L     R15,=A(TOTCSA)      COMPUTE CSA TOTAL (ALL KEYS)
         L     R1,0(R15)
         AR    R1,R0
         ST    R1,0(R15)
         L     R1,0(R2,R15)
         AR    R1,R0
         ST    R1,0(R2,R15)
P000280  BCT   R8,P000200          LOOP IF MORE SUBPOOLS
         CLR   R3,R5               DATA EXHAUSTED ?
         BNE   ERRD                BRANCH IF NOT, ERROR
         EJECT
***********************************************************************
*        CSA - FORMAT DATA TO BE OUTPUT                               *
***********************************************************************
         SPACE 1
         L     R5,=A(KEYTAB)       START OF CSA KEYS - SUBPOOLS
P000500  BAS   R9,TSEDIT           FORMAT KEY OUTPUT DATA
         CLI   0(R5),VRKEY         ALL KEYS PROCESSED ?
         BE    P000510             YES
         LA    R5,L'KEYTAB(R5)     POINT TO NEXT
         B     P000500
P000510  LA    R3,#TOTLINE         EDIT CSA TOTAL (ALL KEYS)
         L     R4,=A(TOTCSA)
         BAS   R9,ALLEDIT
         EJECT
***********************************************************************
*        OUTPUT THE SCREEN                                            *
***********************************************************************
         SPACE 1
         LA    R0,#SCREEN          LOAD SCREEN ADDR INTO R0
         ST    R0,@PUTAREA         STORE IN LINKAGE AREA
         LA    R0,#SCRNLEN         LOAD SCREEN LENGTH INTO R0
         ST    R0,@PUTLEN          STORE LENGTH IN LINKAGE AREA
         L     R0,=A(HCSCR)        HARDCOPY SCREEN
        $HCPY  HSA=(R0)              IF NEEDED
P000900  MVI   @RSPONSE,C' '       MOVE BLANK TO RESPONSE
         LR    R1,R10              POINT R1 TO LINKAGE AREA
         L     R15,@IOMOD          LOAD ADDR OF TERMINAL I/O MODULE
         BASR  R14,R15             GO DO TERMINAL I/O
         CLI   @RSPONSE,C'R'       REFRESH SCREEN ?
         BNE   *+L'*+8             BRANCH IF NOT
         XI    SW16M,UP16M         FLIP/FLOP BETWEEN LOW/UP 16 MB LINE
         B     P000100
        $XRET  CC=0                B O O G I E
         EJECT
***********************************************************************
*        ERRORS DIAGNOSE                                              *
***********************************************************************
         SPACE 1
ERRG     MVC   #ALTM01,=CL16'VSMLIST REG 15 :'
         CH    R15,=H'4'           ALL INFORMATION NOT RECEIVED R.C. ?
         BNE   *+L'*+10            NO
         MVC   #ALTM02,=CL8'4 - W.A.'   YES, WORK AREA IS TOO SMALL
         B     ERRSV
         STCM  R15,B'1111',FIVEBYTE     NO, DISPLAY R.C.
         UNPK  TENBYTE,FIVEBYTE
         TR    TENBYTE+1(8),TRTABLE
         MVC   #ALTM02,TENBYTE+1
         B     ERRSV
ERRS     MVC   #ALTM01,=CL16'UNDEF. SUBPOOL :'
         STM   R0,R15,SVREGS
         XR    R0,R0
         USING SDF,R3
         IC    R0,SDFID            SUBPOOL ID NUMBER
         DROP  R3
         CVD   R0,DBLEWORD
         MVC   #ALTM02+L'#ALTM02-L'EDIT1(L'EDIT1),EDIT1
         ED    #ALTM02+L'#ALTM02-L'EDIT1(L'EDIT1),DBLEWORD+6
         B     ERRDIAG
ERR0     MVI   #ALTM02+6,C'0'
         B     ERRMSG
ERR1     MVI   #ALTM02+6,C'1'
         B     ERRMSG
ERR2     MVI   #ALTM02+6,C'2'
         B     ERRMSG
ERR3     MVI   #ALTM02+6,C'3'
         B     ERRMSG
ERR4     MVI   #ALTM02+6,C'4'
         B     ERRMSG
ERRD     MVI   #ALTM02+6,C'D'
         B     ERRMSG
ERRN     MVI   #ALTM02+6,C'N'
         B     ERRMSG
ERRIS    MVC   #ALTM02+6(2),=CL2'IS'
ERRMSG   MVC   #ALTM02(5),=CL5'ERROR'
ERRSV    STM   R0,R15,SVREGS
ERRDIAG  LA    R1,SVREGS           BUILD
         ST    R1,@SNPLST            REGISTERS AT
         LA    R1,16*4-1(R1)           TIME OF ERROR
         ST    R1,@SNPLST+4              SNAP
         OI    @SNPLST+4,X'80'             LIST
        $SNAP  ID=0                ID-NUMBER - - - - - - - - - - - 000
         TM    @SWITCH,@SNPFNA     SNAP INACTIVE ?
         BZ    *+L'*+10            NO
         MVC   #ALTM03,MSGE1       YES
         B     *+L'*+10
         BAS   R9,WKSNAP           TAKE W.A. SNAP
         MVC   #ALTM03,MSGE2
         MVC   #A16M,#S16M
         LA    R0,#ALTSCR          LOAD ALTERNATE SCREEN ADDR
         ST    R0,@PUTAREA         STORE IN LINKAGE AREA
         LA    R0,#ALTSCRL         LOAD ALTERNATE SCREEN LENGTH
         ST    R0,@PUTLEN          STORE IN LINKAGE AREA
         B     P000900
         EJECT
***********************************************************************
*                                                                     *
* ===> TSEDIT / ALLEDIT <===                                          *
*                                                                     *
*        FORMAT KEYS / ALL KEYS COMPUTATIONS DATA                     *
*                                                                     *
*        REGISTERS AT ENTRY IN THIS SUBROUTINE                        *
*                                                                     *
*        R3 =>   SCREEN OUTPUT LINE ADDRESS ---> ALLEDIT              *
*        R4 =>   ALL KEYS WORK CELLS POINTER ---> ALLEDIT             *
*        R5 =>   KEY TABLE POINTER ---> TSEDIT                        *
*        R9 =>   RETURN ADDRESS                                       *
*                                                                     *
*        REGISTERS USAGE FOR THIS SUBROUTINE                          *
*                                                                     *
*        R0 =>   TEMPORARY WORK REGISTER                              *
*        R1 =>   TEMPORARY WORK REGISTER                              *
*        R2 =>   TEMPORARY WORK REGISTER                              *
*        R3 =>   SCREEN OUTPUT LINE ADDRESS                           *
*        R4 =>   WORK CELLS POINTER                                   *
*                                                                     *
***********************************************************************
         SPACE 1
TSEDIT   XR    R3,R3
         ICM   R3,B'0111',1(R5)    SCREEN OUTPUT LINE ADDRESS
         L     R4,4(R5)            KEY SUBPOOLS WORK CELLS
ALLEDIT  LA    R2,SPTABN+1
TSEDIT1  L     R0,0(R4)            GET VALUE
         LTR   R0,R0
         BNZ   TSEDIT2
         MVI   0(R3),C' '
         MVC   1(L'EDIT1-1,R3),0(R3)
         B     TSEDIT3
TSEDIT2  SRA   R0,10               DIVIDE BY 1024 TO HAVE IN K
         CVD   R0,DBLEWORD         CONVERT
         MVC   0(L'EDIT1,R3),EDIT1   AND
         ED    0(L'EDIT1,R3),DBLEWORD+4 EDIT
TSEDIT3  LA    R3,L'EDIT1+3(R3)    NEXT VALUE
         LA    R4,4(R4)
         BCT   R2,TSEDIT1          LOOP IF MORE
         BR    R9                  RETURN
         EJECT
***********************************************************************
*                                                                     *
* ===> WKSNAP <===                                                    *
*                                                                     *
*        WORK AREA SNAP                                               *
*                                                                     *
*        REGISTERS USAGE FOR THIS SUBROUTINE                          *
*                                                                     *
*        R1 =>   TEMPORARY WORK REGISTER                              *
*        R9 =>   RETURN ADDRESS                                       *
*                                                                     *
***********************************************************************
         SPACE 1
WKSNAP   ST    R6,@SNPLST          BUILD
         LR    R1,R6                 VSMLIST
         BCTR  R1,0                    WORK
         AR    R1,R7                     AREA
         ST    R1,@SNPLST+4                SNAP
         OI    @SNPLST+4,X'80'               LIST
        $SNAP  ID=3                ID-NUMBER - - - - - - - - - - - 003
         BR    R9                  RETURN
         EJECT
DBLEWORD DC    D'0'                DOUBLE WORD WORK AREA
TENBYTE  DC    XL10'0'
FIVEBYTE DC    XL5'0'
KEY      DC    XL1'0'
CLRL     EQU   *-DBLEWORD
         SPACE 1
SVREGS   DC    16F'0'              SAVE REGS 0-15
TRTABLE  DS    0CL256
         DC    CL240' '
         DC    CL16'0123456789ABCDEF'
MSGE1    DC    C'===> ALLOCATE A FILE "SYSSNAP" FOR MORE DETAILS.'
MSGE2    DC    C'===> SEE TO FILE "SYSSNAP" FOR MORE DETAILS.    '
EDIT1    DC    XL8'4020202020202120'    EDIT PATTERN FOR SIZE IN K
SW16M    DC    XL1'0'         16 MB PROCESS FLAGS
UP16M    EQU   X'01'               PROCESS UP 16 MB LINE
SKACC    EQU   X'02'               SKIP ACCOUNT
         SPACE 1
#SCREEN  DS    0F
         $FS   WCC=(KBR,RMDT),MF=L
         $FS   SBA=(1,1),RA=(1,1,00),MF=L
         $FS   SBA=(1,1),SF=(PROT,INT),MF=L
HCL1     $FS   TEXT='SELECT OPTION =>',MF=L
         $FS   SF=NORMAL,TEXT=' ',MF=L
         $FS   SF=(PROT),MF=L
         $FS   SBA=(3,18),SF=(PROT,INT),MF=L
HCL3     $FS   TEXT='CSA UTILIZATION BY PROTECT KEY : ',MF=L
#S16M    $FS   TEXT=' ',MF=L
         $FS   TEXT=' 16MB-LINE',MF=L
HCL3L    EQU   *-HCL3
         $FS   SF=(PROT),MF=L
         $FS   SBA=(5,5),MF=L
HCL5     $FS   TEXT='KEY        NAME         CSA       ',MF=L
         $FS   TEXT='SP 227     SP 228     SP 231     SP 241',MF=L
HCL5L    EQU   *-HCL5
         $FS   SBA=(6,5),MF=L
HCL6     $FS   TEXT=' 0  ',MF=L
         $FS   TEXT=(' ',4),MF=L
         $FS   TEXT='SUPERVISOR',MF=L
         $FS   TEXT=' ',MF=L
#00LINE  $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K',MF=L
HCL6L    EQU   *-HCL6
         $FS   SBA=(7,5),MF=L
HCL7     $FS   TEXT=' 1  ',MF=L
         $FS   TEXT=(' ',4),MF=L
         $FS   TEXT='SCHDLR/JES',MF=L
         $FS   TEXT=' ',MF=L
#01LINE  $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K',MF=L
HCL7L    EQU   *-HCL7
         $FS   SBA=(8,5),MF=L
HCL8     $FS   TEXT=' 2  ',MF=L
         $FS   TEXT=(' ',4),MF=L
         $FS   TEXT='VSPC      ',MF=L
         $FS   TEXT=' ',MF=L
#02LINE  $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K',MF=L
HCL8L    EQU   *-HCL8
         $FS   SBA=(9,5),MF=L
HCL9     $FS   TEXT=' 3  ',MF=L
         $FS   TEXT=(' ',4),MF=L
         $FS   TEXT=(' ',10),MF=L
         $FS   TEXT=' ',MF=L
#03LINE  $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K',MF=L
HCL9L    EQU   *-HCL9
         $FS   SBA=(10,5),MF=L
HCL10    $FS   TEXT=' 4  ',MF=L
         $FS   TEXT=(' ',4),MF=L
         $FS   TEXT=(' ',10),MF=L
         $FS   TEXT=' ',MF=L
#04LINE  $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K',MF=L
HCL10L   EQU   *-HCL10
         $FS   SBA=(11,5),MF=L
HCL11    $FS   TEXT=' 5  ',MF=L
         $FS   TEXT=(' ',4),MF=L
         $FS   TEXT='DATA MNGT ',MF=L
         $FS   TEXT=' ',MF=L
#05LINE  $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K',MF=L
HCL11L   EQU   *-HCL11
         $FS   SBA=(12,5),MF=L
HCL12    $FS   TEXT=' 6  ',MF=L
         $FS   TEXT=(' ',4),MF=L
         $FS   TEXT='TCAM/VTAM ',MF=L
         $FS   TEXT=' ',MF=L
#06LINE  $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K',MF=L
HCL12L   EQU   *-HCL12
         $FS   SBA=(13,5),MF=L
HCL13    $FS   TEXT=' 7  ',MF=L
         $FS   TEXT=(' ',4),MF=L
         $FS   TEXT='IMS       ',MF=L
         $FS   TEXT=' ',MF=L
#07LINE  $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K',MF=L
HCL13L   EQU   *-HCL13
         $FS   SBA=(14,5),MF=L
HCL14    $FS   TEXT=' 8  ',MF=L
         $FS   TEXT=(' ',4),MF=L
         $FS   TEXT='V=V JOBS  ',MF=L
         $FS   TEXT=' ',MF=L
#08LINE  $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K',MF=L
HCL14L   EQU   *-HCL14
         $FS   SBA=(15,5),MF=L
HCL15    $FS   TEXT='9-15',MF=L
         $FS   TEXT=(' ',4),MF=L
         $FS   TEXT='V=R JOBS  ',MF=L
         $FS   TEXT=' ',MF=L
#VRLINE  $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K',MF=L
HCL15L   EQU   *-HCL15
         $FS   SBA=(16,5),RA=(16,78,-),MF=L
         $FS   SBA=(17,5),MF=L
HCL17    $FS   TEXT='0-15',MF=L
         $FS   TEXT=(' ',4),MF=L
         $FS   TEXT='ALL KEYS  ',MF=L
         $FS   TEXT=' ',MF=L
#TOTLINE $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K ',MF=L
         $FS   TEXT=(' ',8),MF=L
         $FS   TEXT=' K',MF=L
HCL17L   EQU   *-HCL17
         $FS   SBA=(1,1),SF=(PT,IC),MF=L
#SCRNLEN EQU  *-#SCREEN
         SPACE 1
#ALTSCR  DS    0F
         $FS   WCC=(KBR,RMDT),MF=L
         $FS   SBA=(1,1),RA=(1,1,00),MF=L
         $FS   SBA=(1,1),SF=(PROT,INT),MF=L
         $FS   TEXT='SELECT OPTION =>',MF=L
         $FS   SF=NORMAL,TEXT=' ',MF=L
         $FS   SF=(PROT),MF=L
         $FS   SBA=(3,15),SF=(PROT,INT),MF=L
         $FS   TEXT='CSA UTILIZATION BY PROTECT KEY : ',MF=L
         $FS   TEXT='DEBUG AID SERVICE',MF=L
         $FS   SF=(PROT),MF=L
         $FS   SBA=(6,1),MF=L
#ALTM01  $FS   TEXT=(' ',16),MF=L
         $FS   SF=(PROT,INT),MF=L
#ALTM02  $FS   TEXT=(' ',8),MF=L
         $FS   SF=(PROT),MF=L
         $FS   SBA=(8,1),TEXT='CURRENT PROCESSING WAS :',MF=L
         $FS   SF=(PROT,INT),MF=L
         $FS   TEXT='CSA (',MF=L
#A16M    $FS   TEXT=' ',MF=L
         $FS   TEXT=' 16MB-LINE)',MF=L
         $FS   SF=(PROT),MF=L
         $FS   SBA=(10,5),MF=L
#ALTM03  $FS   TEXT=(' ',48),MF=L
         $FS   SBA=(1,1),SF=(PT,IC),MF=L
#ALTSCRL EQU   *-#ALTSCR
         EJECT
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*        HARDCOPY SCREEN PROCESS                                      *
*                                                                     *
*        HERE, WE RECEIVES CONTROL FROM HARDCOPY MODULE WITH THE      *
*        REGISTERS AS BELOW :                                         *
*              R2   - '#SCREEN' ADDRESS                               *
*              R3   - HARDCOPY TARGET LINE ADDRESS (BLANKS            *
*                     INITIALIZED AND LENGTH 80)                      *
*              R4   - 'HCSCR' ADDRESS                                 *
*              R10  - LINKAGE AREA POINTER                            *
*              R14  - LINKAGE REGISTER                                *
*                                                                     *
*        NOTE : DO NOT USE ANY OTHER REGISTER WITHOUT LOOKING IN      *
*               THE HARDCOPY MODULE FOR HIS AVAILABILITY              *
*                                                                     *
***********************************************************************
         SPACE 1
         DS    0F
         USING #SCREEN,R2
         USING *,R4
HCSCR    B     HCSCR1              LINE 1
         B     0(R14)              LINE 2
         B     HCSCR3              LINE 3
         B     0(R14)              LINE 4
         B     HCSCR5              LINE 5
         B     HCSCR6              LINE 6
         B     HCSCR7              LINE 7
         B     HCSCR8              LINE 8
         B     HCSCR9              LINE 9
         B     HCSCR10             LINE 10
         B     HCSCR11             LINE 11
         B     HCSCR12             LINE 12
         B     HCSCR13             LINE 13
         B     HCSCR14             LINE 14
         B     HCSCR15             LINE 15
         B     HCSCR16             LINE 16
         B     HCSCR17             LINE 17
         B     0(R14)              LINE 18
         B     0(R14)              LINE 19
         B     0(R14)              LINE 20
         B     0(R14)              LINE 21
         B     0(R14)              LINE 22
         B     0(R14)              LINE 23
         B     0(R14)              LINE 24
         SPACE 1
HCSCR1   MVC   2(L'HCL1,R3),HCL1
         MVC   3+L'HCL1(1,R3),@RSPONSE
         BR    R14
HCSCR3   MVC   19(HCL3L,R3),HCL3
         BR    R14
HCSCR5   MVC   5(HCL5L,R3),HCL5
         BR    R14
HCSCR6   MVC   5(HCL6L,R3),HCL6
         BR    R14
HCSCR7   MVC   5(HCL7L,R3),HCL7
         BR    R14
HCSCR8   MVC   5(HCL8L,R3),HCL8
         BR    R14
HCSCR9   MVC   5(HCL9L,R3),HCL9
         BR    R14
HCSCR10  MVC   5(HCL10L,R3),HCL10
         BR    R14
HCSCR11  MVC   5(HCL11L,R3),HCL11
         BR    R14
HCSCR12  MVC   5(HCL12L,R3),HCL12
         BR    R14
HCSCR13  MVC   5(HCL13L,R3),HCL13
         BR    R14
HCSCR14  MVC   5(HCL14L,R3),HCL14
         BR    R14
HCSCR15  MVC   5(HCL15L,R3),HCL15
         BR    R14
HCSCR16  MVI   5(R3),C'-'
         MVC   6(72,R3),5(R3)
         BR    R14
HCSCR17  MVC   5(HCL17L,R3),HCL17
         BR    R14
         SPACE 1
         DROP  R2,R4
         EJECT
VRKEY    EQU   X'F0'
         SPACE 1
KEYTAB   DS    0D                  KEYS TABLE
         DC    XL1'00',AL3(#00LINE),A(WK00)
         DC    XL1'10',AL3(#01LINE),A(WK01)
         DC    XL1'20',AL3(#02LINE),A(WK02)
         DC    XL1'30',AL3(#03LINE),A(WK02)
         DC    XL1'40',AL3(#04LINE),A(WK04)
         DC    XL1'50',AL3(#05LINE),A(WK05)
         DC    XL1'60',AL3(#06LINE),A(WK06)
         DC    XL1'70',AL3(#07LINE),A(WK07)
         DC    XL1'80',AL3(#08LINE),A(WK08)
         DC    AL1(VRKEY),AL3(#VRLINE),A(WKVR)
         SPACE 1
SPTAB    DS    0C                  CSA SUB-POOLS TABLE
         DC    AL1(227,228,231,241)
SPTABN   EQU   *-SPTAB             NUMBER OF CSA SUB-POOLS
         SPACE 1
WCELLS   DS    0F                  KEYS SUB-POOLS WORK CELLS
WK00     DC    (SPTABN+1)F'0'
WK01     DC    (SPTABN+1)F'0'
WK02     DC    (SPTABN+1)F'0'
WK03     DC    (SPTABN+1)F'0'
WK04     DC    (SPTABN+1)F'0'
WK05     DC    (SPTABN+1)F'0'
WK06     DC    (SPTABN+1)F'0'
WK07     DC    (SPTABN+1)F'0'
WK08     DC    (SPTABN+1)F'0'
WKVR     DC    (SPTABN+1)F'0'
TOTCSA   DC    (SPTABN+1)F'0'
WSPL     EQU   *-WCELLS
         EJECT
         $SDF
         SPACE 2
         $AFUF
         EJECT
         $LNKSECT                  INTER MODULE LINKGAGE AREA DSECT
         SPACE 2
         END
