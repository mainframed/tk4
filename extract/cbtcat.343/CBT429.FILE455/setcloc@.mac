1   23/11/85
                                                      SETCLOCK  1/5.

  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * *           S E T C L O C K           * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * *        TOD CLOCK SYNCHRONIZER       * * * * * * * *
  * * * * * * * *                                     * * * * * * * *
  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

 CBT origin :  Extracted from CBT 84 JUN, file 350.
 ------------  Installed by MOINIL P.A.
                            COMPUTING CENTRE
                            J.R.C. - ISPRA ESTABLISHMENT
                            21020 ISPRA (VA), ITALY

 Purpose :     This is a program whose function is to synchronize the
 ---------     Time-of-Day clocks on all processors in a multi-cpu
               complex. The communications vehicule is a Shared-Dasd
               data-set.
               The use of this program permits the synchronization of
               TOD clocks of cpu's in a complex to within milliseconds
               of each other. The program must be APF-Authorized, since
               it must issue a MODESET to get into Supervisor state to
               issue the SCK (set clock) instruction.
               SETCLOCK Should be run immediately after a complex-wide
               IPL if SMF data validity is to be ensured. The TOD
               clocks should be set normally before starting SETCLOCK
               on all processors. The TOD clock value used for all
               processors may be the highest TOD clock value found
               among the participating processors or the TOD clock
               value of a selected participating processor.

               The SETCLOCK Package consists of three members :
                        - Assembler source for the SETCLOCK program.
                          Installation considerations are outlined in
                          the comments at the Start of the program.
                        - A sample SETCLOCK catalogued procedure for
                          starting the SETCLOCK program.
                        - A copy of our SETCLOCK parameters (SCKPRM00),
                          which explains and illustrates the TOD clock
                          synchronization parameters.

 Authors :     LOUIS LABRECHE
 ---------     PHILIP A. FOSTER
                    I.S.T. INC.
                    2 COMPLEXE DESJARDINS
                    MONTREAL, QUEBEC
                    H5B 1B3
                    (514) 284-1111                JUNE 1980
1   03/10/85
                                                      SETCLOCK  2/5.

  *******************************************************************
  **        --------------- S E T C L O C K ---------------        **
  **        "AUTOMATIC CLOCK SYNCHRONISATION BETWEEN CPU'S"        **
  *******************************************************************

 Purpose :     This module has been written to provide a mean by which
 ---------     different CPU's will be set to the same Time-of-Day
               clock values.

 Description : This program is initiated as a Started Task on each CPU
 ------------- in a complex for which TOD clock synchronization is
               desired. This should normally be at IPL time, so that
               the modification of TOD clock values do not impact SMF
               data recording. Once started, the program will remain
               active until the TOD clock of its Host System has been
               synchronized with those of all its partners.
               The information is transmitted between CPU's via a
               "DASD" device, and a Checkpoint Record is used to
               transfer data. A logical lock is used to determine if
               the Checkpoint is held by any CPU.
               The algorithm used to synchronize the clocks is the
               following :
               - When a System requests the TIME to be synchronized,
                 it asks for a "SYSTEM TRACKING" request on the Dasd
                 Record.
               - From that moment, each "SET CLOCK" job will access
                 the Checkpoint and expect to communicate with each
                 CPU specified by "PARMLIB", until all of the active
                 CPU's know that a TIME synchronization will be
                 performed (access should be done, say once each 5
                 seconds) : this is called the "TRACK" state.
               - Once all the active CPU's are in the "TRACK" state,
                 the last one initiates a request for all CPU's to
                 enter the LOCK state. Once in this state, each CPU
                 will stop "TRACK WAITING" and wait for a very short
                 period of time (2 times the "SEEK TIME", multiplied
                 by the number of active CPUs) until the last one has
                 obtained the "LOCK" state.
               - When the last one is locked, each CPU will then write
                 it's clock to the Checkpoint Record. This is done to
                 determine which CPU has the base clock value and what
                 discrepancies exist between the various clock values.
               - When each CPU has written its own clock value to the
                 record, a request is then made to set the TIME.
               - From that moment, each CPU that reads the record
                 will issue a "SET CLOCK" instruction according to
                 the "NORMALIZED" time of the "SET" request. Normali-
                 zation is done by adjust the clock with the calculated
                 time discrepancy plus the seek time multiplied by the
                 sequence of the "SET" CPU. The base value for the
                 "NORMALIZATION" is the value of the TOD clock of the
                 CPU in the complex which was set as base CPU by the
                 synchronization method selected.
1   03/10/85
                                                      SETCLOCK  3/5.

 Parameters :  The parameters are passed to this program by allocating
 ------------  a data-set pointed by DDname "SYSPARM", it contains the
               following specifications :
               LONG_WAIT       = SSSS
               TRACK_WAIT      = SSSS
               SEEK_TIME       = SSSS
               DISCONNECT_TIME = SSSS
               MAXCPU          = NN
               SYNCH_METHOD    = NN
               SNAP_ID         = NNN
               SNAP_IDS        = (N,NN,NNN)
                    where : SSSS  is the time in 100th of a second,
                            N...  is a numerical value.

          "LONG_WAIT" is the interval of time the program should wait
                    before checking if any "SYSTEM TRACKING" request is
                    made (say 300 seconds).
          "TRACK_WAIT" is the interval of time the program should wait
                    once it has detected a "SYSTEM TRACKING" request.
                    At this time, it checks if all CPU's obtained that
                    state (say 5 seconds).
          "SEEK_TIME" is the average interval of time required to
                    complete an I/O on the Checkpoint data-set.
          "DISCONNECT_TIME" is the period of time we should wait before
                    concluding that all the other CPUs that did not
                    reach the "TRACK STATE" are not active (say 500
                    seconds). Must be higher than "LONG WAIT".
          "MAXCPU" is the maximum number of CPU's to be synchronized
                    together.
          "SYNCH_METHOD" is the Synchronization Method number to be
                    used :   1 = the CPU which RESET Checkpoint sets
                                 the base clock value.
                    Default = the CPU which has the HIGHEST clock
                              value in the complex.
          "SNAP_ID" is the Snap-Dump ID's (0-255) to set active.
          "SNAP_IDS"          (needs SYSSNAP file allocated)
1   03/10/85
                                                      SETCLOCK  4/5.

 Notes :     - The "DASD" device is pointed to by the DDname "SYSCKPT".
 -------       One track is a sufficent allocation.
             - CPU identifier is taken from "SMCA" and the last charac-
               ter is used to determine entry offset in Checkpoint
               (see in the source of SETCLOCK program the description
               of the SETCGEN macro operands for an explanation of
               installation tailoring options).
               The SETCLOCK program assumes that the SMF System ID for
               each System contains a unique 1 character identifier
               located at a consistent offset. If this is not true for
               your installation, the CPU identification code will have
               to be altered (see label SCGSID).
             - The 'PARM' field of the program can be used to RESET the
               Checkpoint Record by coding :
                             EXEC PGM=SETCLOCK,PARM='RESET'
                        In that case, Checkpoint Record will be
                        be initialized and written to the Checkpoint
                        data-set (it may also indicate the base CPU
                        clock value for synchronization).
               or it can be used to request only the scan of the input
               parameters by coding :
                             EXEC PGM=SETCLOCK,PARM='SCAN'
                        In that case, the execution terminates as soon
                        as the parameters are scanned.


  *******************************************************************
  **                       INSTALLATION GUIDE                      **
  *******************************************************************

  Use the following steps to install SETCLOCK :
       - Assemble and Link-Edit SETCLOCK into an AUTHORIZED Library.
       - Move procedure member SETCLOCK into the System's start
         procedures Library.
       - Move the member SCKPRM00 (Synchronization parameters) into
         the System's common parameters Library.
1   03/10/85
                                                      SETCLOCK  5/5.

  *******************************************************************
  **                          USER'S GUIDE                         **
  *******************************************************************

         SETCLOCK is invoked to perform "CLOCK SYNCHRONIZATION" between
  CPU's. It must be started on each CPU to be synchronized, and will
  terminate when the time is set. If it is not started on a CPU two (2)
  minutes after the last 'S SETCLOCK', the CPU will be considered as
  "DISCONNECTED" and will not be synchronized.
         Note : this program should not run when BATCH or TSO is active
  (because SMF records would be falsified), unless you are sure that
  the corresponding CPU TOD CLOCK will not be set.
         When invoking the program for the first time (or if there is
  a problem), you should enter :
         S SETCLOCK,OPT=RESET on the first CPU to synchronize or the
  base CPU, and :
         S SETCLOCK on the remaining CPU's.
         Normally the default Synchronization parameters list
  (SCKPRM00) is selected, but if you want to change list, enter :
         S SETCLOCK,OPT=RESET,MBR=nn on the first or base CPU, and :
         S SETCLOCK,MBR=nn on the remaining CPU's, where nn is the two
  desired decimal digits list number to form the member name SCKPRMnn.

         SETCLOCK runs with TPUT's instead of WTO's, does not enter the
  Supervisor mode nor execute the "SCK" instruction (store clock) when
  invoked in TSO as below :
       - ALLOC F(SYSCKPT) DA('...Checkpoint data-set...') SHR
       - ALLOC F(SYSPARM) DA('...Synchronization parameters...') SHR
       - AUTHC CALL '... Link Library ...(SETCLOCK)' 'RESET'
         on the first or base CPU, and
         AUTHC CALL '... Link Library ...(SETCLOCK)' on the other CPUs.
       - FREE F(SYSCKPT SYSPARM)
       - FREE DA('... Link Library ...')
