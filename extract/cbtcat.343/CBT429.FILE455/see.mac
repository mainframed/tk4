SEE      TITLE '---  S E E  - SEE CURRENT ISPF PANEL (TSO COMMAND) ---'
         PRINT OFF
         MACRO
&NAME   @SNAP  &W
         AIF   ('&W' EQ '').MIS
         AIF   ('&W' EQ 'OPEN').O
         AIF   ('&W' EQ 'CLOSE').C
         AIF   (&W EQ 0).INV
         AIF   (&W GT 255).INV
&NAME    LA    R0,&W               DO SNAP
         AGO   .T
.O       ANOP
&NAME    XR    R0,R0               OPEN SNAP
         AGO   .T
.C       ANOP
&NAME    XR    R0,R0               CLOSE SNAP
         BCTR  R0,0
.T       TM    SWITCH,SNPOFF       SNAP ALREADY OFF?
         BO    *+L'*+6             YES, BYPASS CALL
         L     R15,=A(SNAP)
         BASR  R14,R15
         MEXIT
.MIS     MNOTE 8,' OPERAND MISSING ********************************** '
         MEXIT
.INV     MNOTE 8,' INVALID OPERAND ********************************** '
         MEND
         PRINT ON
         SPACE 1
SYSPMSDP START 0
         SPACE 1
* ORIGIN :     RECEIVED FROM COLOMBO A. (AMDAHL).
* --------     UPDATED/MODIFIED BY MOINIL P.A. (J.R.C. ISPRA).
*
* COMMAND :    SYNTAX : SEE / WHEN DEBUG : SEE SNAP (ALIAS SEE S)
* ---------                                + FILE SYSSNAP PRE-ALLOCATED
         SPACE 1
        $DEFREG
         PRINT NOGEN
DIDOCS  $MDL@IX
LV15     EQU   15                  LEVEL IS HIGHLY SENSITIVE
         PRINT GEN
         SPACE 1
KB       EQU   1024                1K BYTES
         EJECT
        $XENT  BASE=R12,LV=WKDL,TYPE=RENT
         LR    R8,R13
         USING WKDATA,R8
        $TEW$EC TIOT=YES,NOTTSO=(,ONLY),MSG=PUTMSG,ERR=SETRC
         LA    R0,MDL@IX
         LA    R1,AUTH
         STM   R0,R1,REQAUT
        $EACM  REQAUT
         CLI   AUTH,LV15
         BNE   NOTAUT
        $TEW$PP PARM=PARMLST,REG=R3
         CLI   PDSN+1,0            SNAP SPECIFIED ?
         BE    *+L'*+4             NO
         OI    SWITCH,SNPREQ       SET SNAP REQUESTED
         DROP  R3
        IKJRLSA #TSANSW
        GTSIZE ,                   GET ORIGINAL SCREEN SIZE
         LTR   R0,R0               IS IT A SCREEN?
         BZ    NOTSCR              BRANCH IF NOT
         CH    R0,=H'24'           STANDARD NUMBER OF LINES?
         BL    NOTSTD              BRANCH IF LESS
         BE    TSTLNL              BRANCH IF YES
         CH    R1,=H'80'           STANDARD LINE LENGTH?
         BL    NOTSTD              BRANCH IF LESS
SETSSZ   ST    R0,SZSCRN           SAVE SCREEN SIZE
         ST    R1,SZLINE           SAVE LINE SIZE
         OI    SWITCH,SCRST        INDICATE SCREEN SIZE TO BE SET
         B     SETSCR
TSTLNL   CH    R1,=H'80'           STANDARD LINE LENGTH?
         BL    NOTSTD              BRANCH IF LESS
         BH    SETSSZ              BRANCH IF MORE
SETSCR   TM    SWITCH,SNPREQ       SNAP REQUESTED?
         BO    *+L'*+12            YES
         NI    SWITCH,255-SNPOPN
         OI    SWITCH,SNPOFF
         B     NOSNAP
        @SNAP  OPEN                TEST AND OPEN SNAP IF DD PRESENT
         TM    SWITCH,SNPOPN       SNAP ACTIVE?
         BZ    NOSNAP              NO
         MVC   ALSRB,=A(TSRBS)
         MVC   VLSRB(VLSRBL),=Y(TSRBE,SBTEND,TSRBR,L'SBDAT+SBTNML)
         B     *+L'*+12
NOSNAP   MVC   ALSRB,=A(NSRBS)
         MVC   VLSRB(VLSRBL),=Y(NSRBE,SBNEND,NSRBR,L'SBDAT)
         L     R1,#TSTIOT
         USING TIODSECT,R1
         MVC   MYSELF,TIOCNJOB
         DROP  R1
        STFSMODE ON,INITIAL=YES    TURN ON VTAM FULL SCREEN MODE
         TM    SWITCH,SCRST        SCREEN SIZE TO BE SET?
         BZ    NOSCRS              BRANCH IF NOT
        STSIZE SIZE=80,LINE=24     SET STANDARD SCREEN SIZE
         OI    SWITCH,SCRRS        INDICATE SCREEN SIZE TO BE RESET
NOSCRS   MVC   SCDATA(CLRSCRNL),CLRSCRN
         LA    R0,CLRSCRNL
         LA    R1,SCDATA
         ICM   R1,B'1000',=X'03'
        TPUT   (1),(0),R           TPUT FULLSCR
        SETAUTH ,                  SET APF
         MVI   MERR,C' '
         MVC   MERR+1(L'MERR-1),MERR
LLIST    NI    SWITCH,255-CLIST
LRSTR    LA    R6,23*10
         LA    R1,SCDATA
        $FS    CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=E
        $FS    SBA=(1,1),SF=(SKIP,INT),TEXT='===>',MF=E
        $FS    SF=NORMAL,MF=E
        $FS    SBA=(1,17),SF=(SKIP,INT),MF=E
        $FS    SBA=(1,80),SF=(SKIP),MF=E
        $FS    SBA=(2,1),MF=E
         TM    SWITCH,CLIST
         BZ    *+L'*+8
         NI    SWITCH,255-CLIST
         B     LCONT
         L     R2,CVTPTR           CVT
         USING CVT,R2
         L     R2,CVTASVT          ADDRESS SPACE VECTOR TABLE
         DROP  R2
         USING ASVT,R2
         L     R5,ASVTMAXU         MAX. NUMBER OF ADDRESS SPACES
         SLL   R5,2
         LA    R5,ASVTENTY(R5)     + ENTRY FOR EACH POSSIBLE ASID
         LA    R2,ASVTENTY         -> ENTRY FOR EACH POSSIBLE ASID
         DROP  R2
LASCB    CLR   R2,R5
         BNL   LENDTB
         TM    0(R2),ASVTAVAL      ASID AVAILABLE?
         BO    LNEXT               YES
         L     R3,0(R2)            NO, GET ASCB ADDRESS
         USING ASCB,R3
         CLC   ASCBASCB,=CL4'ASCB'
         BNE   LNEXT
         ICM   R4,B'1111',ASCBTSB  TSB ADDRESS (TSO USER)
         BZ    LNEXT
         ICM   R4,B'1111',ASCBJBNI GET AS-NAME
         BNZ   *+L'*+8
         ICM   R4,B'1111',ASCBJBNS
         BZ    LNEXT
         CLC   MYSELF(L'MYSELF),0(R4)
         BE    LNEXT
         LTR   R6,R6
         BNP   LFILL
LCONT    MVC   0(8,R1),0(R4)       LIST TSO USER-NAMES
         MVC   8(2,R1),=CL10' '
         LA    R1,10(R1)
         BCTR  R6,0
LNEXT    LA    R2,4(R2)            STEP TO NEXT ENTRY
         B     LASCB
         DROP  R3
LFILL   $FS    SBA=(1,28),TEXT='or continue ...',MF=E
         OI    SWITCH,CLIST
LENDTB  $FS    SBA=(1,18),TEXT='Select ...',MF=E
         CLI   MERR,C' '
         BE    LPTIC
        $FS    SBA=(1,45),MF=E
         MVC   0(L'MERR,R1),MERR
         LA    R1,L'MERR(R1)
         MVI   MERR,C' '
         MVC   MERR+1(L'MERR-1),MERR
LPTIC   $FS    SBA=(1,1),SF=(PT,IC),MF=E
         LR    R0,R1
         LA    R1,SCDATA
         SLR   R0,R1
         ICM   R1,B'1000',=X'03'
        TPUT   (1),(0),R           TPUT FULLSCR
         XC    PFREPLY,PFREPLY
        TGET   PFREPLY,L'PFREPLY,ASIS,WAIT
         CH    R15,=H'20'          TERMINAL DISCONNECTED?
         BE    ENDPRC              YES,... SPLIT
         CH    R15,=H'8'           ATTENTION?
         BE    ENDPRC              YES,... START OVER
         CH    R15,=H'12'          IS INPUT LONGER THAN BUFFER?
         BNE   SKCLRQ              NO
        TCLEARQ INPUT              FLUSH THE TRASH
SKCLRQ   CLI   PFREPLY,X'F3'       PF 3 ENTERED?
         BE    ENDPRC              YES,... END
         CLI   PFREPLY,X'C3'       PF 15 ENTERED (ALT. PF 3)?
         BE    ENDPRC              YES,... END
         OC    TXREPLY,=CL10' '
         CLC   TXREPLY,=CL10' '    ANY REQUEST?
         BE    LRSTR               BRANCH IF NOT
         LA    R0,L'TARGET
         LA    R1,TARGET
         LA    R14,L'TXREPLY
         LA    R15,TXREPLY
         MVC   TARGET(L'TARGET),=CL10' '
SCNTX    CLI   0(R15),C' '
         BE    SKPTX
         MVC   0(1,R1),0(R15)
         BCT   R0,*+L'*+4
         B     CHCKTG
         LA    R1,1(R1)
SKPTX    BCT   R14,*+L'*+4
         B     CHCKTG
         LA    R15,1(R15)
         B     SCNTX
CHCKTG   CLC   TARGET(4),=CL4'END ' END REQUESTED?
         BE    ENDPRC              YES,... END
TSCHCK   CLC   TARGET,MYSELF
         BNE   TSCONT
         MVC   MERR+L'TARGET+2(16),=CL16'=> Yourself ???)'
STMSG    MVC   MERR+1(L'TARGET),TARGET
         MVI   MERR,C'('
         B     LLIST
TSCONT   XC    SVASCB,SVASCB
         L     R2,CVTPTR           CVT
         USING CVT,R2
         L     R2,CVTASVT          ADDRESS SPACE VECTOR TABLE
         DROP  R2
         USING ASVT,R2
         L     R5,ASVTMAXU         MAX. NUMBER OF ADDRESS SPACES
         SLL   R5,2
         LA    R5,ASVTENTY(R5)     + ENTRY FOR EACH POSSIBLE ASID
         LA    R2,ASVTENTY         -> ENTRY FOR EACH POSSIBLE ASID
         DROP  R2
LPASCB   CLR   R2,R5
         BNL   ENDTAB
         TM    0(R2),ASVTAVAL      ASID AVAILABLE?
         BO    NEXT                YES
         L     R3,0(R2)            NO, GET ASCB ADDRESS
         USING ASCB,R3
         CLC   ASCBASCB,=CL4'ASCB'
         BNE   NEXT
         ICM   R4,B'1111',ASCBTSB  TSB ADDRESS (TSO USER)
         BZ    NEXT
         ICM   R4,B'1111',ASCBJBNI GET AS-NAME
         BNZ   *+L'*+8
         ICM   R4,B'1111',ASCBJBNS
         BZ    NEXT
         CLC   TARGET,0(R4)        SEARCH A SPECIFIED ASCB NAME
         BE    *+L'*+8             BRANCH IF FOUND
NEXT     LA    R2,4(R2)            STEP TO NEXT ENTRY
         B     LPASCB
         LA    R3,0(R3)
         ST    R3,SVASCB
         DROP  R3
ENDTAB   OC    SVASCB,SVASCB
         BNZ   *+L'*+10
         MVC   MERR+L'TARGET+2(18),=CL18'=> Not a TSO user)'
         B     STMSG
        MODESET MODE=SUP,KEY=ZERO
         TM    SWITCH,FIRST
         BO    LPMAIN
         LH    R2,VLSRB1
        GETMAIN RU,LV=(R2),SP=228
         ST    R2,COMMON
         ST    R1,COMMON+4
         LR    R4,R1
         LR    R5,R2
         LR    R3,R2
         L     R2,ALSRB
         MVCL  R4,R2
         LH    R0,VLSRB2
        GETMAIN RU,LV=(0),SP=228
         ST    R1,SRBADR
         LR    R9,R1
         OI    SWITCH,FIRST
         USING SRBSECT,R9
LPMAIN   XC    SRB(SBDAT-SRB),SRB
         MVC   SRBID,=C'SRB '
         L     R1,COMMON+4
         ST    R1,SRBEP
         AH    R1,VLSRB3
         ST    R1,SRBRMTR
         LA    R1,SBSAVE
         ST    R1,SRBPARM
         ST    R1,SRBSAVE
         MVC   SRBASCB,SVASCB
         LA    R0,SBDAT
         LH    R1,VLSRB4
         LR    R14,R0
         XR    R15,R15
         MVCL  R0,R14
        SCHEDULE SRB=(R9),SCOPE=GLOBAL            <======== DO SERVICE
        MODESET KEY=NZERO,MODE=PROB
         LA    R2,3
WTABIT  STIMER WAIT,BINTVL==F'125'
         CLI   SBRETCC,0
         BNE   *+L'*+4
         BCT   R2,WTABIT
        MODESET KEY=ZERO,MODE=SUP
         LH    R2,VLSRB3
         A     R2,COMMON+4
         L     R1,SVASCB
         USING ASCB,R1
         MVC   ASPID,ASCBASID      ADDRESS SPACE IDENTIFIER
         DROP  R1
        PURGEDQ RMTR=(R2),ASID=ASPID              <==== DELETE SERVICE
        MODESET KEY=NZERO,MODE=PROB
        @SNAP  2                   SNAP SBTNM
         LA    R1,SCDATA
        $FS    CC=EW,WCC=(KBR,RMDT),SBA=(1,1),RA=(1,1,00),MF=E
        $FS    SBA=(1,1),SF=(SKIP,INT),TEXT='===>',MF=E
        $FS    SF=NORMAL,MF=E
        $FS    SBA=(1,17),SF=(SKIP,INT),TEXT='/ ',MF=E
         MVC   0(L'TARGET,R1),TARGET
         LA    R1,L'TARGET(R1)
         XR    R15,R15
         IC    R15,SBRETCC
         B     *+L'*(R15)
         B     XRC0
         B     XRC4
         B     XRC8
         B     XRC12
         B     XRC16
         B     XRC20
XRC0    $FS    TEXT=' => No SRB data ...',MF=E
         B     SHPNL
XRC8    $FS    TEXT=' => No ISPF TLD ...',MF=E
         B     SHPNL
XRC12   $FS    TEXT=' => No ISPF TCT ...',MF=E
         B     SHPNL
XRC16   $FS    TEXT=' => No ISPF TPP1 ...',MF=E
         B     SHPNL
XRC20    TM    SBSWTCH,SWISPF
         BO    XRC20A
        $FS    TEXT=' => Not ISPF user ...',MF=E
         B     SHPNL
XRC20A  $FS    TEXT=' => Can''t retrieve ISPF panel ...',MF=E
         B     SHPNL
XRC4    @SNAP  1                   SNAP SBDAT
         LA    R2,SBDAT
         LA    R14,1
         LA    R15,L'SBDAT-1(R2)
         CLI   0(R2),C' '
         BH    PNLOK
         BXLE  R2,R14,*-8
        $FS    TEXT=' => No panel data ...',MF=E
SHPNL   $FS    SBA=(1,80),SF=(SKIP),MF=E
         B     DSPNL
PNLOK   $FS    TEXT=' => current ISPF panel displayed below :',MF=E
        $FS    SBA=(1,80),SF=(SKIP),MF=E
        $FS    SBA=(2,1),MF=E
         LA    R2,SBDAT
         MVC   0(240,R1),0(R2)
         TR    0(240,R1),TABLE
         MVC   240(240,R1),240(R2)
         TR    240(240,R1),TABLE
         MVC   480(240,R1),480(R2)
         TR    480(240,R1),TABLE
         MVC   720(240,R1),720(R2)
         TR    720(240,R1),TABLE
         MVC   960(240,R1),960(R2)
         TR    960(240,R1),TABLE
         MVC   1200(240,R1),1200(R2)
         TR    1200(240,R1),TABLE
         MVC   1440(240,R1),1440(R2)
         TR    1440(240,R1),TABLE
         MVC   1680(160,R1),1680(R2)
         TR    1680(160,R1),TABLE
         LA    R1,7*240+160(R1)
DSPNL   $FS    SBA=(1,1),SF=(PT,IC),MF=E
         LR    R0,R1
         LA    R1,SCDATA
         SLR   R0,R1
         ICM   R1,B'1000',=X'03'
        TPUT   (1),(0),R           TPUT FULLSCR
         XC    PFREPLY,PFREPLY
        TGET   PFREPLY,L'PFREPLY,ASIS,WAIT
         CH    R15,=H'20'          TERMINAL DISCONNECTED?
         BE    ENDPRC              YES,... SPLIT
         CH    R15,=H'8'           ATTENTION?
         BE    ENDPRC              YES,... START OVER
         CH    R15,=H'12'          IS INPUT LONGER THAN BUFFER?
         BNE   SKPCLRQ             NO
        TCLEARQ INPUT              FLUSH THE TRASH
SKPCLRQ  CLI   PFREPLY,X'F3'       PF 3 ENTERED?
         BE    LLIST               YES,... GO BACK DISPLAY LIST
         CLI   PFREPLY,X'C3'       PF 15 ENTERED (ALT. PF 3)?
         BE    LLIST               YES,... GO BACK DISPLAY LIST
         OC    TXREPLY,=CL10' '
         CLC   TXREPLY,=CL10' '    ANY REQUEST?
         BE    TSCONT              NO,... DISPLAY AGAIN
         LA    R0,L'TARGET
         LA    R1,TARGET
         LA    R14,L'TXREPLY
         LA    R15,TXREPLY
         MVC   TARGET(L'TARGET),=CL10' '
TXSCN    CLI   0(R15),C' '
         BE    TXSKP
         MVC   0(1,R1),0(R15)
         BCT   R0,*+L'*+4
         B     TGCHCK
         LA    R1,1(R1)
TXSKP    BCT   R14,*+L'*+4
         B     TGCHCK
         LA    R15,1(R15)
         B     TXSCN
TGCHCK   CLC   TARGET(4),=CL4'END ' END REQUESTED?
         BE    LLIST               YES,... GO BACK DISPLAY LIST
         B     TSCHCK              ELSE DISPLAY AGAIN
ENDPRC   TM    SWITCH,FIRST
         BZ    QUIT
        MODESET KEY=ZERO,MODE=SUP
         LH    R2,VLSRB2
        FREEMAIN R,LV=(R2),A=(R9),SP=228
         DROP  R9
         LM    R4,R5,COMMON
        FREEMAIN R,A=(R5),LV=(R4),SP=228
        MODESET KEY=NZERO,MODE=PROB
QUIT    RESAUTH ,                  RESET APF
         MVC   SCDATA(CLRSCRNL),CLRSCRN
         TM    SWITCH,SCRRS        WAS SCREEN SIZE CHANGED?
         BZ    ENDCL               BRANCH IF NOT
        STSIZE SIZELOC=SZLINE,LINELOC=SZSCRN RESTORE ORIGINAL SIZE
        $FS    CC=EWA,MF=(I,SCDATA)
ENDCL    LA    R0,CLRSCRNL
         LA    R1,SCDATA
         ICM   R1,B'1000',=X'03'
        TPUT   (1),(0),R           TPUT FULLSCR
        STLINENO LINE=1,MODE=OFF
        @SNAP  CLOSE               CLOSE SNAP IF DD WAS PRESENT
         XR    R15,R15             RC = 0 -----------------------------
LEAVE   $XRET  CC=0,LV=WKDL,TYPE=RENT
NOTAUT   LA    R1,AUTMS
         B     FINISH
NOTSCR   LA    R1,SCRMS
         B     FINISH
NOTSTD   LA    R1,STDMS
FINISH   BAS   R14,PUTMSG
SETRC    LA    R15,16              RC = 16 ----------------------------
         B     LEAVE
         DROP  R8
         EJECT
         PRINT NOGEN
AUTMS    WTO   ' -> Illegal command',                                  X
               ROUTCDE=11,DESC=7,MF=L
SCRMS    WTO   ' -> Run only on a screen terminal',                    X
               ROUTCDE=11,DESC=7,MF=L
STDMS    WTO   ' -> Screen want to be 24 x 80 sized',                  X
               ROUTCDE=11,DESC=7,MF=L
         PRINT GEN
         SPACE 1
CLRSCRN $FS    CC=EW,WCC=(KBR,RMDT),SBA=(24,79),MF=L
        $FS    SBA=(1,1),RA=(1,1,00),MF=L
        $FS    SBA=(1,1),SF=IC,MF=L
CLRSCRNL EQU   *-CLRSCRN
         SPACE 1
TABLE    DS    0XL256
         DC    64X'40'
         DC    XL16'404140404040404040404A4B4C4D4E4F'
         DC    XL16'504040404040404040405A5B5C5D5E5F'
         DC    XL16'606140404040404040406A6B6C6D6E6F'
         DC    XL16'404040404040404040797A7B7C7D7E7F'
         DC    XL16'408182838485868788898A8B8C8D8E8F'
         DC    XL16'909192939495969798999A9B9C9D9E9F'
         DC    XL16'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    XL16'C0C1C2C3C4C5C6C7C8C9CA4040404040'
         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'
         DC    XL16'E0E1E2E3E4E5E6E7E8E9404040404040'
         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'
         SPACE 1
        LTORG  ,                   LITERAL POOL
         SPACE 1
         DROP  R12                 END OF MAIN ADDRESSABILITY
         EJECT
*------- SRB PROGRAM (NORMAL ACTIVITY)
*              R1  = SRB PARAMETER / POINTER -> SBSAVE
*              R9  = SRB BASE REGISTER
*              R14 = RETURN REGISTER
*              R15 = ENTRY ADDRESS
         SPACE 1
        CNOP  0,8
         USING SBSAVE,R1           SRB WORK-AREA ADDRESSABILITY
         USING *,R9                SRB ADDRESSABILITY
NSRBS    LR    R9,R15
         L     R3,CVTPTR           CVT
         USING CVT,R3
         L     R3,CVTTCBP
         DROP  R3
         L     R3,12(R3)           GET CURRENT ASCB ADDRESS
         USING ASCB,R3
         L     R3,ASCBASXB         POINTER TO ASXB
         DROP  R3
         USING ASXB,R3
         L     R3,ASXBLTCB         POINTER TO LAST TCB ON TCB QUEUE
         DROP  R3
         XR    R5,R5
         USING TCB,R3
         L     R7,TCBRBP           ADDRESS OF SVRB (SRB)
NSRBL    L     R4,TCBRBP           ADDRESS OF RB FOR EXECUTING PROGRAM
         USING RBBASIC,R4
NSRBV    CLI   RBSTAB1,RBFTPRB
         BNE   NSRBN
         ICM   R5,B'0111',RBCDE1   ADDRESS OF CDE
         USING CDENTRY,R5
         CLC   CDNAME(3),=CL3'ISP'
         BE    NSRBT
         CLC   CDNAME(3),=CL3'IKJ'
         BE    NSRBM
         DROP  R5
NSRBN    TM    RBSTAB2,RBTCBNXT
         BO    *+L'*+8
         ICM   R4,B'0111',RBLINKB  NEXT RB
         B     NSRBV
         ICM   R3,B'1111',TCBOTC   NEXT TCB
         BNZ   NSRBL
         DROP  R3,R4
NSRBM    MVI   SBRETCC,20
         BR    R14
NSRBT    OI    SBSWTCH,SWISPF
         USING RBBASIC,R7
         L     R3,RBGRS9
         DROP  R7
         MVI   SBRETCC,8
         CLC   0(3,R3),=CL3'TLD'
         BNER  R14
         L     R3,32(R3)           ADDRESS OF TCT
         MVI   SBRETCC,12
         CLC   0(3,R3),=CL3'TCT'
         BNER  R14
         L     R3,336(R3)          -> PRIVATE AREA
         MVI   SBRETCC,16
         CLC   0(4,R3),=CL4'TPP1'
         BNER  R14
         LA    R3,324(R3)          -> LAST ISPF PANEL
         MVC   SBDAT(240),0(R3)
         MVC   SBDAT+240(240),240(R3)
         MVC   SBDAT+480(240),480(R3)
         MVC   SBDAT+720(240),720(R3)
         MVC   SBDAT+960(240),960(R3)
         MVC   SBDAT+1200(240),1200(R3)
         MVC   SBDAT+1440(240),1440(R3)
         MVC   SBDAT+1680(240),1680(R3)
         MVI   SBRETCC,4
NSRBR    EQU   *-NSRBS             SRB RECOVERY ADDRESS
         BR    R14
         DROP  R1                  KILL SRB WORK-AREA ADDRESSABILITY
         SPACE 1
        LTORG  ,                   LITERAL POOL
         SPACE 1
         DS    0D
NSRBE    EQU   *-NSRBS             SRB CODE TOTAL LENGTH
         SPACE 1
         DROP  R9                  KILL SRB ADDRESSABILITY
         EJECT
*------- SRB PROGRAM (TRACE ACTIVITY)
*              R1  = SRB PARAMETER / POINTER -> SBSAVE
*              R9  = SRB BASE REGISTER
*              R14 = RETURN REGISTER
*              R15 = ENTRY ADDRESS
         SPACE 1
        CNOP  0,8
         USING SBSAVE,R1           SRB WORK-AREA ADDRESSABILITY
         USING *,R9                SRB ADDRESSABILITY
TSRBS    LR    R9,R15
         L     R3,CVTPTR           CVT
         USING CVT,R3
         L     R3,CVTTCBP
         DROP  R3
         L     R3,12(R3)           GET CURRENT ASCB ADDRESS
         USING ASCB,R3
         L     R3,ASCBASXB         POINTER TO ASXB
         DROP  R3
         USING ASXB,R3
         L     R3,ASXBLTCB         POINTER TO LAST TCB ON TCB QUEUE
         DROP  R3
         XR    R5,R5
         LA    R6,SBTNM
         USING TCB,R3
         L     R7,TCBRBP           ADDRESS OF SVRB (SRB)
TSRBL    L     R4,TCBRBP           ADDRESS OF RB FOR EXECUTING PROGRAM
         MVC   0(4,R6),=F'-1'
         STCM  R3,B'1111',4(R6)
         LA    R6,8(R6)
         USING RBBASIC,R4
TSRBV    STCM  R4,B'1111',0(R6)
         MVC   4(4,R6),RBSIZE
         LA    R6,8(R6)
         CLI   RBSTAB1,RBFTPRB
         BNE   TSRBN
         ICM   R5,B'0111',RBCDE1   ADDRESS OF CDE
         USING CDENTRY,R5
         MVC   0(L'CDNAME,R6),CDNAME
         LA    R6,8(R6)
         CLC   CDNAME(3),=CL3'ISP'
         BNE   TSRBN
         DROP  R5
         OI    SBSWTCH,SWISPF
TSRBN    TM    RBSTAB2,RBTCBNXT
         BO    *+L'*+8
         ICM   R4,B'0111',RBLINKB  NEXT RB
         B     TSRBV
         ICM   R3,B'1111',TCBOTC   NEXT TCB
         BNZ   TSRBL
         DROP  R3,R4
         TM    SBSWTCH,SWISPF
         BO    *+L'*+6
         MVI   SBRETCC,20
         BR    R14
         USING RBBASIC,R7
         L     R3,RBGRS9
         DROP  R7
         MVI   SBRETCC,8
         CLC   0(3,R3),=CL3'TLD'
         BNER  R14
         L     R3,32(R3)           ADDRESS OF TCT
         MVI   SBRETCC,12
         CLC   0(3,R3),=CL3'TCT'
         BNER  R14
         L     R3,336(R3)          -> PRIVATE AREA
         MVI   SBRETCC,16
         CLC   0(4,R3),=CL4'TPP1'
         BNER  R14
         LA    R3,324(R3)          -> LAST ISPF PANEL
         MVC   SBDAT(240),0(R3)
         MVC   SBDAT+240(240),240(R3)
         MVC   SBDAT+480(240),480(R3)
         MVC   SBDAT+720(240),720(R3)
         MVC   SBDAT+960(240),960(R3)
         MVC   SBDAT+1200(240),1200(R3)
         MVC   SBDAT+1440(240),1440(R3)
         MVC   SBDAT+1680(240),1680(R3)
         MVI   SBRETCC,4
TSRBR    EQU   *-TSRBS             SRB RECOVERY ADDRESS
         BR    R14
         DROP  R1                  KILL SRB WORK-AREA ADDRESSABILITY
         SPACE 1
        LTORG  ,                   LITERAL POOL
         SPACE 1
         DS    0D
TSRBE    EQU   *-TSRBS             SRB CODE TOTAL LENGTH
         SPACE 1
         DROP  R9                  KILL SRB ADDRESSABILITY
         EJECT
*------- TRACE ROUTINE (DEBUG AID FACILITY)
*              R0  = 0 : OPEN
*                    + : SNAP (1=SBDAT,2=SBTNM)
*                        R9  = -> SRB
*                    - : CLOSE
*              R8  = -> WKDATA
*              R12 = LOCAL BASE REGISTER
*              R13 = SAVE AREA POINTER
*              R14 = LINK REGISTER
*              R15 = ENTRY ADDRESS
*              NOTE - THE FOLLOWING ALLOCATION IS NEEDED TO
*                     OBTAIN THE SNAP DUMPS :
*                          ALLOC F(SYSSNAP) SYSOUT(A)
*                     OR : ALLOC F(SYSSNAP) ...
         SPACE 1
        CNOP   0,8
         USING *,R12               LOCAL BASE REGISTER
SNAP     STM   R14,R12,12(R13)     ENTRY
         LR    R12,R15
         LR    R1,R13
         USING WKDATA,R8
         LA    R13,SVSNAP
         ST    R1,4(R13)
         ST    R13,8(R1)
         LA    R3,SNAPDCB
         USING IHADCB,R3
         LTR   R0,R0
         BM    SNC
         BP    SND
         TM    SWITCH,SNPOPN+SNPOFF SNAP ALREADY OPENED OR OFF?
         BNZ   SNX                 YES
         MVC   0(SNAPLL,R3),SNAPCS
         XR    R1,R1
         L     R2,#TSTIOT
         USING TIODSECT,R2
SNL      CLC   TIOELNGH(4),=XL4'0'
         BE    SNF
         CLC   TIOEDDNM(L'TIOEDDNM),DCBDDNAM
         BE    *+L'*+10
         IC    R1,TIOELNGH
         ALR   R2,R1
         B     SNL
         DROP  R2
        OPEN   ((R3),OUTPUT),MF=(E,SNAPOP)
         TM    DCBOFLGS,DCBOFOPN   OPENED?
         BZ    SNF                 NO
         OI    SWITCH,SNPOPN       YES, SET OPENED
         MVI   HDR,LHDR
         MVC   HDRT(25),=CL25'S E E -- DATA BLOCK FROM '
         LA    R1,HDR
         ST    R1,SNAPHD
         OI    SNAPHD,X'80'        HEADER BUILDED
         B     SNX
SND      TM    SWITCH,SNPOPN       SNAP OPENED?
         BZ    SNX                 NO
         TM    SWITCH,SNPOFF       SNAP OFF?
         BO    SNX                 YES
         MVC   HDRU(8),TARGET
         CH    R0,=H'1'
         BE    SN1
         CH    R0,=H'2'
         BE    SN2
         B     SNX                 EXIT, UNKNOWN
SN1      MVC   HDRW,=CL8'- PANEL.'
         USING SRBSECT,R9
         LA    R14,SBDAT           START OF SNAP
         DROP  R9
         LA    R15,L'SBDAT-1(R14)  + LENGTH = END OF SNAP
         B     SNS
SN2      MVC   HDRW,=CL8'- TRACE.'
         USING SRBSECT,R9
         LA    R14,SBTNM           START OF SNAP
         DROP  R9
         LA    R15,SBTNML-1(R14)   + LENGTH = END OF SNAP
SNS      STM   R14,R15,SNAPLST
         OI    SNAPLST+4,X'80'
        SNAP   DCB=(R3),TCB='S',ID=0,LIST=SNAPLST,                     1
               STRHDR=SNAPHD,MF=(E,SNAPLIST)
         LTR   R15,R15             ALL OK?
         BZ    SNX                 YES
SNF      OI    SWITCH,SNPOFF       SET PERMANENTLY OFF
SNC      TM    SWITCH,SNPOPN
         BZ    SNX
        CLOSE  ((R3)),MF=(E,SNAPCL)
         NI    SWITCH,255-SNPOPN   SET CLOSED
         DROP  R3
SNX      L     R13,4(R13)          EXIT
         LM    R14,R12,12(R13)
         MVI   12(R13),X'FF'
         XR    R15,R15
         BR    R14
         SPACE 1
         DROP  R8
         EJECT
         PRINT NOGEN
SNAPCS  DCB    DSORG=PS,RECFM=VBA,MACRF=(W),                           1
               BLKSIZE=1632,LRECL=125,                                 2
               DDNAME=SYSSNAP
        OPEN   (*-*),MF=L
        CLOSE  (*-*),MF=L
        SNAP   MF=L
         PRINT GEN
SNAPLL   EQU   *-SNAPCS
         SPACE 1
        LTORG  ,                   LITERAL POOL
         SPACE 1
         DROP  R12                 END OF LOCAL ADDRESSABILITY
         SPACE 1
         PRINT NOGEN
PARMLST IKJPARM ,                  PARSE PARAMETER'S LIST (SYNTAX)
PDSN    IKJKEYWD
        IKJNAME 'SNAP',ALIAS=('S')
        IKJENDP
         PRINT GEN
         EJECT
WKDATA   DSECT
         DS    18F                 SAVE AREA
SVSNAP   DS    18F                 SNAP SAVE AREA
         SPACE 1
        $TEW$WA
         SPACE 1
         PRINT NOGEN
SNAPDCB DCB    DSORG=PS,RECFM=VBA,MACRF=(W),                           1
               BLKSIZE=1632,LRECL=125,                                 2
               DDNAME=SYSSNAP
SNAPOP  OPEN   (*-*),MF=L
SNAPCL  CLOSE  (*-*),MF=L
SNAPLIST SNAP  MF=L
         PRINT GEN
         SPACE 1
SNAPLST  DS    2F
SNAPHD   DS    F
REQAUT   DS    2F
SZLINE   DS    F                   LINE SIZE (LINE LENGTH)
SZSCRN   DS    F                   SCREEN SIZE (NUMBER OF LINES)
COMMON   DS    2A
ALSRB    DS    A
SRBADR   DS    A
SVASCB   DS    A
MYSELF   DS    CL8
TARGET   DS    CL8
PFREPLY  DS    0CL16               AREA TO HOLD TGET REPLY
         DS    CL6                 AID + JUNK
TXREPLY  DS    CL10                REAL REPLY
MERR     DS    CL30                ERROR MESSAGE
ASPID    DS    H
VLSRB    DS    0H
VLSRB1   DS    H                   SRB ROUTINE CODE TOTAL LENGTH
VLSRB2   DS    H                   SRB REQUEST BLOCK TOTAL LENGTH
VLSRB3   DS    H                   SRB RECOVERY ADDRESS DISPLACEMENT
VLSRB4   DS    H                   SRB REQUEST BLOCK VARIABLE LENGTH
VLSRBL   EQU   *-VLSRB
AUTH     DS    XL1
SWITCH   DS    XL1
SCRST    EQU   X'80'               SCREEN SIZE TO BE SET
SCRRS    EQU   X'40'               SCREEN SIZE TO BE RESET
FIRST    EQU   X'10'               SRB SPACE GETMAIN'D
SNPREQ   EQU   X'08'               SNAP REQUESTED
SNPOPN   EQU   X'04'               SNAP DCB OPENED
SNPOFF   EQU   X'02'               SNAP PERMANENTLY OFF
CLIST    EQU   X'01'               CONTINUE LIST
         SPACE 1
HDR      DS    AL1
HDRT     DS    CL25
HDRU     DS    CL8
HDRW     DS    CL8
LHDR     EQU   *-HDRT
         SPACE 1
         DS    0F
LBF      EQU   (3*KB)-(*-WKDATA)
SCDATA   DS    (LBF)X
WKDL     EQU   (((*-WKDATA)+7)/8)*8
         SPACE 1
         PRINT NOGEN
        IHASRB ,
SBSAVE   DS    18F
SBRETCC  DS    XL1
SBSWTCH  DS    XL1
SWISPF   EQU   X'80'
         DS    0D
SBDAT    DS    CL1920
         DS    0D
SBNEND   EQU   *-SRB
SBTNM    DS    100CL8
SBTNML   EQU   *-SBTNM
         DS    0D
SBTEND   EQU   *-SRB
         SPACE 1
        $TEW$DS
        IHAASVT DSECT=YES,LIST=YES
        IHAASCB DSECT=YES,LIST=YES
        IHAASXB DSECT=YES,LIST=YES
        IKJTCB DSECT=YES,LIST=YES
        IKJRB  DSECT=YES,LIST=YES
        IHACDE ,
        DCBD   DEVD=DA,DSORG=PO
         SPACE 1
         END
