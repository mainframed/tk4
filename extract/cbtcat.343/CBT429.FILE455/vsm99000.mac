VSM9     TITLE 'VSM99000 - TERMINAL I/O MODULE.'
         PRINT OFF                                                 -EU-
         COPY  VSMMAC                                              -EU-
         PRINT ON                                                  -EU-
         SPACE 1
***********************************************************************
*                                                                     *
*    MODULE :           VSM99000                                      *
*                       VERSION : 1.1                                 *
*                       DATE : 06 JUL 1984                            *
*                       NAME : TERMINAL I/O MODULE                    *
*                       ATTRIBUTES : REUS                             *
*                                                                     *
*    AUTHOR :           R.P. SHANNON (VERSION 1.0 - 9/1/82)           *
*                       HALLMARK CARDS                                *
*                       ENFIELD DISTRIBUTION CENTER                   *
*                                                                     *
*    FUNCTION :         THIS MODULE DOES ALL THE TERMINAL I/O FOR     *
*                       VSM. THE SCREEN ADDRESSES AND LENGTHS ARE     *
*                       PASSED TO VSM99000 VIA THE LINKAGE AREA.      *
*                                                                     *
*    REGS AT ENTRY :    R1   - INTER MODULE LINKAGE                   *
*                       R14  - RETURN ADDRESS                         *
*                       R15  - EPA                                    *
*                                                                     *
*    REGS USAGE :       R0   - SCREEN LENGTH FOR I/O                  *
*                       R1   - SCREEN ADDR FOR I/O                    *
*                       R2   - TGET/TPUT FLAGS                        *
*                       R10  - LINKAGE AREA POINTER                   *
*                       R11  - BASE REGISTER                          *
*                       R12  - 2ND BASE REGISTER (RESERVED)           *
*                       R13  - SAVE AREA POINTER                      *
*                                                                     *
*    REGS AT EXIT :     R14  - RETURN ADDRESS                         *
*                                                                     *
*    LABELS :           SOME OF THE FIELD USAGE IN THIS MODULE CAN    *
*                       BE DETERMINED BY THE FIRST CHARACTER OF THE   *
*                       FIELD. THE KEYS ARE :                         *
*                            @ - FIELD IS IN INTER MODULE LINKAGE     *
*                                AREA                                 *
*                            # - FIELD IS PART OF THE OUTPUT SCREEN   *
*                            $ - DSECT                                *
*                                                                     *
*    MODS : VERSION 1.0  - BASE                                       *
*           VERSION 1.1  - PFK'S ADDED AND BATCH RUN ALLOWED      -EU-*
*                          MOINIL P.A. - COMPUTING CENTRE         -EU-*
*                          J.R.C. - ISPRA ESTABLISHMENT           -EU-*
*                          21020 ISPRA (VA), ITALY                -EU-*
*                                                                     *
***********************************************************************
         EJECT
VSM99000 START 0
         SPACE 1
        $DEFREG ,                                                  -EU-
***********************************************************************
*        STANDARD OS LINKAGE                                          *
***********************************************************************
         SPACE 1
        $XENT  BASE=R11            SAVE CALLER'S REGS              -EU-
         EJECT
         LR    R10,R1              POINT TO LINKAGE
         USING $LNKSECT,R10        DSECT ADDRESSABILITY
         TM    @SWITCH,@BATCH      BATCH RUNNING ?                 -EU-
         BO    BATCH01             YES                             -EU-
         MVI   @RSPONSE,C' '       CLEAR RESPONSE
         L     R0,@PUTLEN          LOAD SCREEN LENGTH INTO R0
         L     R1,@PUTAREA         POINT TO SCREEN
         XR    R2,R2
         ICM   R2,B'1000',=B'00100011'  BIT SETTINGS FOR PUT TO R2
         OR    R1,R2               PUT FLAGS IN R1 HI-ORDER BYTE
         TPUT  (1),(0),R           PUT SCREEN
         LA    R0,@GETLEN          INPUT BUFFER LENGTH IN R0
         LA    R1,@GETAREA         INPUT BUFFER ADDR IN R1
         XR    R2,R2
         ICM   R2,B'1000',=B'10100001'  BIT SETTINGS FOR GET TO R2
         OR    R1,R2               PUT FLAGS IN R1 HI-ORDER BYTE
         TGET  (1),(0),R           READ SCREEN - WAIT FOR RESPONSE
         CLI   @PFKCODE,X'7D'      SPECIFIC REQUEST ?              -EU-
         BE    ENTER               YES                             -EU-
         CLI   @PFKCODE,X'6E'      PA 2 ENTERED ?                  -EU-
         BE    ENTER               YES                             -EU-
         CLI   @PFKCODE,X'F1'      PF 1 ENTERED ?                  -EU-
         BE    SETH                YES                             -EU-
         CLI   @PFKCODE,X'C1'      PF 13 ENTERED (ALT. PF 1) ?     -EU-
         BE    SETH                YES                             -EU-
         CLI   @PFKCODE,X'F2'      PF 2 ENTERED ?                  -EU-
         BE    SETM                YES                             -EU-
         CLI   @PFKCODE,X'C2'      PF 14 ENTERED (ALT. PF 2) ?     -EU-
         BE    SETM                YES                             -EU-
         CLI   @PFKCODE,X'F3'      PF 3 ENTERED ?                  -EU-
         BE    SETZ                YES                             -EU-
         CLI   @PFKCODE,X'C3'      PF 15 ENTERED (ALT. PF 3) ?     -EU-
         BE    SETZ                YES                             -EU-
         CLI   @PFKCODE,X'F7'      PF 7 ENTERED ?                  -EU-
         BE    SETS                YES                             -EU-
         CLI   @PFKCODE,X'C7'      PF 19 ENTERED (ALT. PF 7) ?     -EU-
         BE    SETS                YES                             -EU-
         CLI   @PFKCODE,X'F8'      PF 8 ENTERED ?                  -EU-
         BE    SETP                YES                             -EU-
         CLI   @PFKCODE,X'C8'      PF 20 ENTERED (ALT. PF 8) ?     -EU-
         BE    SETP                YES                             -EU-
         CLI   @PFKCODE,X'7A'      PF 10 ENTERED ?                 -EU-
         BE    SET1                YES                             -EU-
         CLI   @PFKCODE,X'4A'      PF 22 ENTERED (ALT. PF 10) ?    -EU-
         BE    SET1                YES                             -EU-
         CLI   @PFKCODE,X'7B'      PF 11 ENTERED ?                 -EU-
         BE    SET2                YES                             -EU-
         CLI   @PFKCODE,X'4B'      PF 23 ENTERED (ALT. PF 11) ?    -EU-
         BE    SET2                YES                             -EU-
         CLI   @PFKCODE,X'7C'      PF 12 ENTERED ?                 -EU-
         BE    SET3                YES                             -EU-
         CLI   @PFKCODE,X'4C'      PF 24 ENTERED (ALT. PF 12) ?    -EU-
         BE    SET3                YES                             -EU-
         MVI   @RSPONSE,C'?'       SET INVALID RESPONSE            -EU-
         B     RETURN                                              -EU-
SETH     MVI   @RSPONSE,C'H'       SET HELP                        -EU-
         B     RETURN                                              -EU-
SETM     MVI   @RSPONSE,C'M'       SET PRIMARY                     -EU-
         B     RETURN                                              -EU-
SETP     MVI   @RSPONSE,C'P'       SET STOP HARDCOPY               -EU-
         B     RETURN                                              -EU-
SETS     MVI   @RSPONSE,C'S'       SET START HARDCOPY              -EU-
         B     RETURN                                              -EU-
SETZ     MVI   @RSPONSE,C'Z'       SET TERMINATION                 -EU-
         B     RETURN                                              -EU-
SET1     MVI   @RSPONSE,C'1'       SET MAP VS                      -EU-
         B     RETURN                                              -EU-
SET2     MVI   @RSPONSE,C'2'       SET MAP SUBPOOL                 -EU-
         B     RETURN                                              -EU-
SET3     MVI   @RSPONSE,C'3'       SET MAP CSA                     -EU-
         B     RETURN                                              -EU-
BATCH01  L     R1,@PPTR            NEXT COMMAND IF ANY             -EU-
         XR    R0,R0                                               -EU-
         IC    R0,@SBXQ(R1)                                        -EU-
         LTR   R0,R0               END OF PARM. ?                  -EU-
         BNZ   BATCH02             NO, CONTINUE                    -EU-
         MVI   @RSPONSE,C'Z'       TERMINATION                     -EU-
         B     ENTER                                               -EU-
BATCH02  STC   R0,@RSPONSE                                         -EU-
         LA    R1,1(R1)                                            -EU-
         ST    R1,@PPTR                                            -EU-
ENTER    TR    @RSPONSE,TRTABLE    TRANSLATE TO UPPER CASE         -EU-
         CLI   @RSPONSE,C' '       JUST ENTER ?                    -EU-
         BNE   RETURN              NO                              -EU-
         MVI   @RSPONSE,C'R'       SET REFRESH                     -EU-
RETURN  $XRET  CC=0                B O O G I E                     -EU-
         EJECT
TRTABLE  DS    0CL256              UPPER CASE TRANSLATE TABLE
         DC    X'000102030405060708090A0B0C0D0E0F'
         DC    X'101112131415161718191A1B1C1D1E1F'
         DC    X'202122232425262728292A2B2C2D2E2F'
         DC    X'303132333435363738393A3B3C3D3E3F'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F'
         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'
         DC    X'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
         SPACE 2
         LTORG
         SPACE 2
         $LNKSECT                  LINKAGE SECTION DSECT
         SPACE 2
         END
