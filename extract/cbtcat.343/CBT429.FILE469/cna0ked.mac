CNA0KED  TITLE ' - ISPF COMMAND TABLE EDIT BY DDNAME'
*********************************************************************
*                                                                   *
*   BOB  ZIMMERMAN                                                  *
*   CNA  INSURANCE                                                  *
*   (312) 822-5719                                                  *
*   LAST MODIFIED 8503                                              *
*                                                                   *
*                                                                   *
*                                                                   *
*   EDIT BY DDNAME REQUIRES OTHER MODULES (SEE INSTALLATION         *
*   INSTRUCTIONS)                                                   *
*                                                                   *
*   THIS CODE WRITTEN/MAINTAINED AT CNA                             *
*********************************************************************
         EJECT
CNA0KED  CSECT
         SPACE
***********************************************************************
*        STANDARD ENTRY CODE FOR A RE-ENTRANT PROGRAM
*        SAVE REGISTER IN SAVE AREA AND GETMAIN WORKING STORAGE
***********************************************************************
         USING *,15                     TEMPORARY BASE REGISTER
         B     PASSLIT                  BRANCH AROUND LITERALS
         DC    C'CNA0KED '              CSECT NAME
         DC    C'02/16/85 '             DATE WRITTEN
         DC    C'VERSION 1.1 '          VERSION
         DC    C'&SYSDATE '             DATE ASSEMBLED
         DC    C'&SYSTIME '             TIME ASSEMBLED
PASSLIT  DS    0H
         STM   14,12,12(13)             SAVE CALLERS REGISTERS
         LR    11,1                     SAVE PARAMETERS PASSED
         LR    12,15                    REGISTER 12 IS BASE REGISTER
         DROP  15                       END TEMPORARY ADDRESSING
         USING CNA0KED,12               PERMANENT ADDRESSING
         SPACE
         GETMAIN R,LV=WSLEN,SP=0        GET WORKING STORAGE AREA
         SPACE
         ST    1,8(13)                  SET FORWARD CHAIN IN SAVEAREA
         ST    13,4(1)                  SET BACKWARD CHAIN
         LM    13,1,8(13)               RESTORE CLOBBERED REGISTERS
         USING WORKSTOR,13              SETUP WORKING STORAGE
         TITLE ' - INITALIZATION SECTION'
***********************************************************************
*        LOAD THE ISPLINK MODULE
*        SET ISPF ERROR MODE TO CANCEL
*        DEFINE ISPF ERROR MESSAGE VARIABLES
***********************************************************************
         ISPF  LOAD                     LOAD ISPLINK
         SPACE
         CONTROL ERRORS,CANCEL          SET ISPF ERROR MODE
         SPACE
         XR    10,10
         SELECT ,'PGM(EDREC)'           CHECK FOR EDIT RECOVERY
         SPACE
         C     15,=F'20'
         BE    EXITPGM
         SPACE
         VDEFINE '(UMSG1)',             VDEFINE VARIABLES              *
               UMSG1,                   WORKING STORAGE AREA           *
               CHAR,                    FULLWORD                       *
               =F'24',                  4 BYTES LONG                   *
               MF=E                     EXECUTE FORM
         SPACE
         VDEFINE '(LMSG1)',             VDEFINE VARIABLES              *
               LMSG1,                   WORKING STORAGE AREA           *
               CHAR,                    FULLWORD                       *
               =F'78',                  4 BYTES LONG                   *
               MF=E                     EXECUTE FORM
         SPACE 3
***********************************************************************
*
*        CPPLRET IS A MODULE THAT WILL BUILD A CPPL FOR IKJPARSE
*        1.   RESTORE PARAMTERS USER ENTERED INTO REGISTER 1
*        2.   CALL CPPLRET TO BUILD A CPPL AND A CBUF FOR IKJPARSE
*        3.   POINT REGISTER 3 TO WORKING STORAGE
*        4.   CALL CNA0KED1 WHICH WILL PARSE THE PARAMTERS AND STORE
*             THE USER DATA INTO WORKING STORAGE (POINTED TO BY REG 3)
*
***********************************************************************
         LR    1,11                     RESTORE PARAMETERS PASSED
         CALL  CPPLRET                  GET CPPL FOR CALL
         SPACE
         LA    3,DSNADD                 GET ADDRESS OF LINK AREA
         CALL  CNA0KED1                 PARSE FIELDS
         TITLE ' - PROCESS DDNAME REQUEST'
***********************************************************************
*   1.   MOVE THE DDNAME INTO AN 8 BYTE FIELD.
*   2.   THE MODULE KDSNSUB WILL RETURN THE LIST OF DATASET ALLOCATED
*        TO THE REQUESTED DDNAME.
***********************************************************************
         L     2,DSNLEN                 LOAD THE LENGTH OF THE DDNAME
         BCTR  2,0                      SUBTRACT 1 FOR THE EXECUTE
         L     14,DSNADD                LOAD THE ADDRESS OF THE DDNAME
         MVC   DDNAME,=CL8' '           INIT THE DDNAME TO SPACES
         MVC   DDNAME(*-*),0(14)        DUMMY MOVE FOR POINTER
         EX    2,*-6                    MOVE THE DDNAME
         SPACE
         MVC   KDSNAMT,=H'30'           ALLOW UP TO 30 DATASETS
         CALL  KDSNSUB,                 GET THE DSNAMES ALLOCATED      *
               (DDNAME,                 8 BYTE DDNAME REQUESTED        *
               KDSNAMT,                 RETURN UP TO THIS MANY DSNS    *
               DSNTABLE,                TABLE TO STORE 44 BYTE DSNS    *
               VOLTABLE),               TABLE TO STORE 6 BYTE VOLSERS  *
               VL,                      SET BIT ON LAST PARM           *
               MF=(E,SPFPARMS)          EXECUTE FORM OF MACRO
         SPACE 3
***********************************************************************
*   RETURN CODES ARE:
*        0   -   CALL WORKED
*                DDNAME FIELD REMAINS THE SAME
*                KDSNAMT FIELD CONTAINS AMOUNT OF DSNS RETURNED
*                DSNTABLE CONTAINS 44 BYTE DSNS RETURNED
*                VOLTABLE CONTAINS 6 BYTE VOLSERS TO THE ABOVE DSNS
*
*        4   -   THE DSNTABLE WOULD HAVE OVERFLOWED.
*                THE KDSNAMT FIELD CONTAINS THE LIMIT OF DSNAMES THAT
*                THE DSNTABLE CAN HOLD. IN THIS PROGRAM THE LIMIT IS
*                30. THIS RETURN CODE SAYS THAT THE LIMIT WOULD HAVE
*                BEEN EXECEED. ALL FIELDS ARE FILLED IN AS IN
*                RETURN CODE 0 ABOVE.
*
*        8   -   REQUESTED DDNAME NOT ALLOCTED.
*                THE KDSNAMT FIELD CONTAINS 0.
*                ALL OTHER FIELDS REMAIN BLANK.
***********************************************************************
         C     15,=F'8'                 WAS DDNAME ALLOCATED
         BL    B1000                    IF SO, CONTINUE
         SPACE
         MVC   UMSG1,=CL24'DDNAME NOT ALLOCATED'
         MVC   LMSG1,=CL78'THE DDNAME YOU REQUESTED TO EDIT IS NOT ALLO*
               CATED AT THIS TIME'
         SETMSG MSG==CL8'DTSM001',MF=E
         SPACE
         LA    10,8                     SET RETURN CODE TO 8
         B     EXITPGM                  EXITPGM
         SPACE 3
B1000    DS    0H
         C     15,=F'4'                 DID OVERFLOW OCCUR
         BNE   B2000                    IF NOT RC 4 - CONTINUE
         CONTROL DISPLAY,LINE,=F'4',MF=E ENTER ISPF LINE MODE
         SPACE
         TPUTE 'KED002W ERROR: REQUESTED DDNAME HAS ALLOCTED IN MORE TH*
               AN 30 DSNAMES'
         SPACE
         TPUTE 'KED002W ERROR: DSNLIST WILL CONTAIN ONLY FIRST 30 DSNAM*
               ES IN CONCATENATION'
         SPACE
B2000    DS    0H
         TITLE ' - PROCESS DSNAMES RETURNED FOR DDNAME'
***********************************************************************
*   1.   CHECK IF CONCATENATION EXISTS.
*   2.   IF NOT INVOKE EDIT UPON THE SINGLE DATASET.
***********************************************************************
         CLC   KDSNAMT,=H'1'            WAS ONLY 1 DSN RETURNED
         BNE   B3000                    IF NOT CONTINUE PROCESSING
         MVC   JCLDSN,DSNTABLE          MOVE THE DSNAME TO SAVE AREA
         MVC   EDITVOL,VOLTABLE         MOVE THE VOLSER OF DATASET
         LA    10,EDITIT                GET ADDRESS OF EDIT SUBROUTINE
         B     JCLTOTSO                 CONVERT JCL DSN TO TSO DSN
         SPACE
B3000    DS    0H
         SPACE 3
***********************************************************************
*   1.   IF A MEMBER WAS SPECIFIED BY THE USER, THEN REDUCE THE
*        LIST OF DSNS TO THOSE THAT CONTAIN THE MEMBER
*
*   KMEMSUB IS A SUBROUTINE DESIGNED TO BE USED WITH KDSNSUB (ABOVE)
*   KMEMSUB WILL SEARCH THE DSNTABLE RETURNED BY KDSNSUB AND SPACE OUT
*   AND DSN IN THE TABLE THAT DOES NOT CONTAIN THE MEMBER REQUESTED.
*
***********************************************************************
         CLC   MEM,=CL8' '              WAS A MEMBER REQUESTED
         BE    DSNLIST                  IF NO MEMBER, BYPASS THIS CODE
         CALL  KMEMSUB,                 CALL ROUTINE                   *
               (MEM,                    MEMBER TO CHECK FOR            *
               KDSNAMT,                 AMOUNT OF DSNS FROM KDSNSUB    *
               DSNTABLE),               THE TABLE OF DSNS FROM KDSNSUB *
               VL,                      MARK LAST PARM IN PARMLIST     *
               MF=(E,SPFPARMS)          EXECUTE FORM OF CALL
         SPACE 3
         LTR   15,15                    CHECK RETURN CODE
         BZ    B4000                    IF MEMBER FOUND - CONTINUE
         SPACE
         MVC   UMSG1,=CL24'MEMBER NOT FOUND'
         MVC   LMSG1,=CL78'THE MEMBER REQUESTED WAS NOT FOUND ON THE SP*
               ECIFIED DDNAME'
         SETMSG MSG==CL8'DTSM001',MF=E
         SPACE
         LA    10,8                     SET RETURN CODE
         B     EXITPGM                  EXIT
B4000    DS    0H
         SPACE 3
***********************************************************************
*   KMEMSUB WILL SET KDSNAMT TO THE AMOUNT OF DSNS THAT CONTAINED
*   THE MEMBER. IF THIS AMOUNT IS 1 - DIRECTLY INVOKE EDIT ON THE
*   DSN.
***********************************************************************
         CLC   KDSNAMT,=H'1'            WAS ONLY 1 DSNAME FOUND
         BNE   DSNLIST                  IF MORE, BUILD TABLE OF DSNS
*IND1ST  SEEK  (CLI,0(4),C' ',NE),      SEARCH DSN TABLE FOR NONBLANK
*              BASEREG=4,BASE=DSNTABLE, DSNAME. IF NONE IS FOUND I
*              LENREG=5,LEN=44,         HAVE A SEVERE BUG
*              COUNTREG=6,COUNT=30,
*              NOTFOUND=0
FIND1ST  DS    0H
         LA    4,DSNTABLE               GET ADDRESS OF TABLE
         LA    5,44                     GET ENTRY LENGTH
         LA    6,30                     GET NUMBER OF ENTRIES
LOOP001  DS    0H
         CLI   0(4),C' '                IS THERE A TABLE ENTRY
         BNE   LOOX001                  WHEN FOUND EXIT
         AR    4,5                      BUMP TO NEXT ENTRY
         BCT   6,LOOP001                KEEP SEARCHING
         B     0                        IF NOT FOUND ERROR
LOOX001  DS    0H
         SPACE
         LA    2,30                     GET NUMBER OF TOTAL ENTRIES
         SR    2,6                      2 WILL CONTAIN ENTRY NUMBER
         MH    2,=H'6'                  FIND DISP INTO VOLTABLE
         LA    3,VOLTABLE               GET ADDRESS OF VOLSER TABLE
         LA    2,0(2,3)                 GET VOLSER OF DSN FOUND
         MVC   EDITVOL,0(2)             MOVE THE VOLSER FOR EDIT
         MVC   JCLDSN,0(4)              MOVE THE DSNAME TO A SAVE AREA
         LA    10,EDITIT                GET EDIT SUBROUTINE ADDRESS
         B     JCLTOTSO                 CONVERT JCL DSN TO TSO DSN
         TITLE ' - CREATE AND PROCESS ISPF TABLE OF DSNAMES'
***********************************************************************
*   1.   CREATE A TABLE OF DSNAMES
*   2.   VDEFINE THE VARIABLES FOR THE TABLE PROCESSING
*   3.   TBADD THE DSNAMES INTO THE TABLE
***********************************************************************
DSNLIST  DS    0H
         CLC   FIRSTK,=F'0'
         BNE   FIND1ST
         MVC   CNATKED(4),=CL4'KEDT'    TABLE NAME BEGINS WITH KEDT
         TIME  ,                        GET THE TIME OF DAY
         SPACE
         ST    0,CNATKED+4              TABLE NAME ENDS WITH TIME
         TBCREATE CNATKED,              TBCREATE TABLE                 *
               NAMES='(TABLEDSN TABLEVOL LSEL)',                       *
               WRITE='NOWRITE',         TEMPORARY TABLE                *
               REPLACE='REPLACE',       REPLACE ANY CURRENT TABLE      *
               MF=E                     EXECUTE FORM (FOR ISPF 2.1.2)
         SPACE 3
         VDEFINE '(ZTDTOP)',            VDEFINE VARIABLES              *
               ZTDTOP,                  WORKING STORAGE AREA           *
               FIXED,                   FULLWORD                       *
               =F'4',                   4 BYTES LONG                   *
               MF=E                     EXECUTE FORM
         SPACE
         VDEFINE '(TABLEDSN)',          VDEFINE VARIABLES              *
               TABLEDSN,                WORKING STORAGE AREA           *
               CHAR,                    CHARACTER FORMAT               *
               56,                      10 BYTES LONG                  *
               MF=E                     EXECUTE FORM
         SPACE
         VDEFINE '(LSEL)',              VDEFINE VARIABLES              *
               LSEL,                    WORKING STORAGE AREA           *
               CHAR,                    CHARACTER FORMAT               *
               1,                       10 BYTES LONG                  *
               MF=E                     EXECUTE FORM
         SPACE
         VDEFINE '(TABLEVOL)',          VDEFINE VARIABLES              *
               TABLEVOL,                WORKING STORAGE AREA           *
               CHAR,                    CHARACTER FORMAT               *
               6,                       10 BYTES LONG                  *
               MF=E                     EXECUTE FORM
         SPACE
         VDEFINE '(CNAFPROF CNAFMACR CNAFDUMM DDNAME)',                *
               PROF,                    WORKING STORAGE AREA           *
               CHAR,                    CHARACTER FORMAT               *
               8,                       10 BYTES LONG                  *
               MF=E                     EXECUTE FORM
         SPACE
         XC    ZTDTOP,ZTDTOP            ZERO OUT ZTDTOP
         EJECT
***********************************************************************
*   1.   SEARCH DSNTABLE FROM KDSNSUB AND KMEMSUB -
*   2.   ANY NON SPACE DSNAMES SHOULD BE TBADDED TO OUR TABLE
***********************************************************************
         LA    4,DSNTABLE               GET ADDRESS OF TABLE
         LA    5,30                     SET TABLE LIMIT TO 30
         SPACE
*EEKLOOP SEEK  (CLI,0(4),C' ',NE),      SEARCH FOR EMPTY DSN SLOT
*              BASEREG=4,               REGISTER 4 POINTS TO DSNTABLE
*              LEN=44,                  ENTRIES ARE 44 BYTES LONG
*              COUNTREG=5               REGISTER 5 CONTAINS COUNT
         SPACE
SEEKLOOP DS    0H
         LA    15,44                    GET LENGTH OF ENTRY
LOOP002  DS    0H
         CLI   0(4),C' '                IS THERE A TABLE ENTRY
         BNE   LOOX002                  IF YES - EXIT LOOP
         AR    4,15                     BUMP TO NEXT ENTRY
         BCT   5,LOOP002                KEEP SEARCHING
LOOX002  DS    0H
         SPACE
         LTR   5,5                      IS TABLE SEARCH DONE
         BZ    DISPLOOP                 GO DISPLAY TABLE
         LA    2,30                     GET NUMBER OF TOTAL ENTRIES
         SR    2,5                      2 WILL CONTAIN ENTRY NUMBER
         MH    2,=H'6'                  FIND DISP INTO VOLTABLE
         LA    3,VOLTABLE               GET ADDRESS OF VOLSER TABLE
         LA    2,0(2,3)                 GET VOLSER OF DSN FOUND
         MVC   TABLEVOL,0(2)            MOVE THE VOLSER FOR EDIT
         MVC   JCLDSN,0(4)              GET THE DSNAME
         BAL   10,JCLTOTSO              CONVERT TO TSO SYNTAX
         MVC   TABLEDSN,EDITDSN         GET CONVERTED DSNAME
         LA    4,44(4)                  BUMP TO NEXT ENTRY FOR SEARCH
         BCTR  5,0                      SUBTRACT 1 FROM ENTRY COUNT
         MVI   LSEL,C' '
         TBADD CNATKED,MF=E             ADD TABLE ENTRY
         SPACE
         B     SEEKLOOP                 FIND ALL DSNAMES
         TITLE ' - TBDISPL LOOP AND PROCESSING CODE'
***********************************************************************
*   1.   SET ZTDTOP AND TBDISPL THE TABLE
***********************************************************************
DISPLOOP DS    0H
         TBTOP CNATKED,MF=E             GO TO TOP OF TABLE
         SPACE
         TBSKIP CNATKED,NUMBER=ZTDTOP,MF=E
         SPACE
         TBDISPL CNATKED,PANEL='CNADKED',MF=E
         SPACE
CHECKIT  LR    10,15                    SAVE RETURN CODE FROM TBDISPL
         C     15,=F'4'                 WAS PF3 HIT
         BNH   B5000                    BRANCH AROUND EXIT CODE
         TBEND CNATKED,MF=E             CLOSE TABLE
         SPACE
         SR    10,10                    SET RETURN CODE TO 0
         B     EXITPGM                  EXIT PROGRAM
         SPACE
B5000    MVC   EDITDSN,TABLEDSN         GET THE DSNAME FOR EDIT
         MVC   EDITVOL,TABLEVOL         GET THE VOLSER FOR EDIT
         B     EDITIT2                  GO EDITIT
         TITLE ' - EXIT THE PROGRAM'
***********************************************************************
*   1.   VDELETE ANY VARIABLES
*   2.   DELETE THE ISPLINK MODULE FROM  CORE
*   3.   STANDARD EXIT CODE - RETURN CODE IN REGISTER 10
***********************************************************************
EXITPGM  DS    0H
         VRESET MF=E                    DELETE ALL FUNCTION VARIABLES
         SPACE
         ISPF  DELETE                   DELETE ISPLINK
         SPACE
         LR    1,13                     GET ADDRESS FOR FREEMAIN
         L     13,WORKSTOR+4            GET CALLERS SAVE AREA
         FREEMAIN R,A=(1),LV=WSLEN,SP=0 FREE WORKING STORAGE
         SPACE
         LR    15,10                    GET RETURN CODE
         L     14,12(,13)               RESTORE RETURN ADDRESS
         LM    0,12,20(13)              RESTORE REMAINING REGISTERS
         MVI   12(13),X'FF'             FLAG AS RETURNED FOR SNAP SVC
         BR    14                       RETURN TO CALLER
         TITLE ' - CONVERT DSN FROM JCL SYNTAX TO TSO DSNAME SYNTAX'
***********************************************************************
*   1.   ADD QUOTES AROUND DSN
*   2.   ADD MEMBER NAME IF SPECIFIED.
***********************************************************************
JCLTOTSO DS    0H
         MVC   EDITDSN,=CL56''''        PUT FIRST QUOTE ON
         MVC   EDITDSN+1(44),JCLDSN     MOVE THE DSNAME AFTER QUOTE
         TRT   EDITDSN,TABLE40          FIND END OF DSNAME
         CLC   MEM,=CL8' '              WAS A MEMBER ENTERED
         BE    B6000                    IF NOT DONT PROCESS ONE
         MVI   0(1),C'('                ADD PAREN FOR MEMBER
         MVC   1(8,1),MEM               MOVE MEMBER NAME
         TRT   EDITDSN,TABLE40          FIND END OF MEMBER NAME
         MVI   0(1),C')'                MOVE FINAL PAREN
         LA    1,1(1)                   POINT REG 1 TO END OF MEMBER
B6000    DS    0H
         MVI   0(1),C''''               END DSNAME WITH QUOTE
         BR    (10)                     RETURN TO NEXT ROUTINE
         TITLE ' - STANDARD EDIT ROUTINES'
***********************************************************************
*   1.   EDITIT WILL EDIT SIMPLE DSNAME
*   2.   EDITIT2 WILL PROCESS LSEL LINE COMMAND
***********************************************************************
EDITIT   DS    0H
         CONTROL ERRORS,RETURN,MF=E     SET ISPF ERROR MODE
         SPACE
         EDIT  DATASET=EDITDSN,         DSNAME FOR EDIT                *
               VOLUME=EDITVOL,          VOLSER FOR EDIT                *
               MACRO=MACRO,             EDIT MACRO                     *
               PROFILE=PROF,            EDIT PROFILE                   *
               MF=E                     EXECUTE FORM
         SPACE
         C     15,=F'4'                 WAS RETURN CODE GREATER THAN 4
         BNH   B7000                    NO - EDIT OK
         SPACE
         MVC   VCOPYLEN,=F'8'           SET VCOPY LENGTH
         VCOPY '(ZERRMSG)',             COPY THE ERROR MESSAAGE        *
               VCOPYLEN,                LENGTH                         *
               ZERRMSG,                 WORKING STORAGE AREA           *
               MOVE,                    MOVE MODE                      *
               MF=E                     EXECUTE FORM OF MACRO
         SPACE
         SETMSG MSG=ZERRMSG,MF=E        ISSUE ERROR MESSAGE
         SPACE
         LA    10,16                    SET RETURN CODE
         B     EXITPGM                  EXIT PROGRAM
B7000    DS    0H
         SR    10,10                    SET RETURN CODE
         B     EXITPGM                  EXIT PROGRAM
         SPACE 3
EDITIT2  CONTROL ERRORS,RETURN,MF=E
         SPACE
         CLI   LSEL,C'P'                PDS COMMAND REQUESTED
         BE    PDSCMD
         CLI   LSEL,C' '                WAS A LINE COMMAND SPECIFIED
         BE    B9000
         CLI   LSEL,C'L'                WAS A LIBRARY REQUESTED
         BNE   LSELS
         TRT   EDITDSN,TABLE            FIND MEMBER
         BZ    LSELS                    NO MEMBER FOUND
         MVC   0(10,1),=CL10''''        SPACE OUT MEMBER NAME
LSELS    CONTROL DISPLAY,SAVE,MF=E
         SPACE
         EDIT  DATASET=EDITDSN,         DSNAME FOR EDIT                *
               VOLUME=EDITVOL,          VOLSER FOR EDIT                *
               MACRO=MACRO,             EDIT MACRO                     *
               PROFILE=PROF,            EDIT PROFILE                   *
               MF=E                     EXECUTE FORM
         SPACE
         C     15,=F'4'                 WAS RETURN CODE GREATER THAN 4
         BNH   B8000                    NO - EDIT OK
         SPACE
         MVC   VCOPYLEN,=F'8'           SET VCOPY LENGTH
         VCOPY '(ZERRMSG)',             COPY THE ERROR MESSAAGE        *
               VCOPYLEN,                LENGTH                         *
               ZERRMSG,                 WORKING STORAGE AREA           *
               MOVE,                    MOVE MODE                      *
               MF=E                     EXECUTE FORM OF MACRO
         SPACE
         SETMSG MSG=ZERRMSG,MF=E        ISSUE ERROR MESSAGE
         SPACE
B8000    DS    0H
         CONTROL DISPLAY,RESTORE,MF=E
B9000    CONTROL ERRORS,CANCEL,MF=E
         SPACE
         C     10,=F'4'                 WAS RETURN CODE GREATER THAN 4
         BNE   DISPLOOP                 TBDISPL SOME MORE
         TBDISPL CNATKED,MF=E           GET NEXT LINE COMMAND
         SPACE
         B     CHECKIT                  CHECK RETURN CODE
         SPACE
PDSCMD   DS    0H
         VCOPY '(PDSCMD)',VCOPYLEN,PDSADD,LOCATE,MF=E
         SPACE
         CONTROL DISPLAY,SAVE,MF=E
         SPACE
         L     2,PDSADD
         SELECT VCOPYLEN,(2),MF=E
         SPACE
         CONTROL DISPLAY,RESTORE,MF=E
         SPACE
         B     B9000
         EJECT
TABLE40  DC    256X'00'                 TABLE FOR FINDING END OF DSN
         ORG   TABLE40+C' '
         DC    X'40'
TABLE    DC    256X'00'                 TABLE FOR FINDING END OF DSN
         ORG   TABLE+C'('
         DC    C'('
         ORG
WORKSTOR DSECT                          WORKING STORAGE DSECT
SAVEAREA DS    18F                      PROGRAM SAVE AREA
         DS    0D                       DOUBLE WORD ALIGN
DSNADD   DS    F                        ADDRESS OF DDNAME
DSNLEN   DS    F                        LENGTH OF DDNAME
MEM      DS    CL8                      MEMBER (OPTIONAL)
PROF     DS    CL8                      EDIT PROFILE (OPTIONAL)
MACRO    DS    CL8                      EDIT MACRO (OPTIONAL)
FIRSTK   DS    F                        EDIT PANEL (OPTIONAL)
         DS    F
DDNAME   DS    CL8                      DDNAME BUILT BY PARSE
EDITDSN  DS    CL56                     DSNAME USE BY EDIT SERVICE
EDITVOL  DS    CL6                      VOLSER OF DSNAME FOR EDIT
PDSADD   DS    F                        BUFFER FOR ISPEXEC SELECT CMD
TABLEDSN DS    CL56                     DSNAME USE FOR TABLE
TABLEVOL DS    CL6                      VOLSER OF DSNAME FOR TABLE
JCLDSN   DS    CL44                     JCLDSN USED BY CONVERT TO TSO
KDSNAMT  DS    H                        AMOUNT FIELD FOR KDSNSUBS
VCOPYLEN DS    F                        VCOPY LENGTH FIELDS
ZTDTOP   DS    F                        TOP OF TABLE ON TBDISPL
CNATKED  DS    CL8                      KED TABLE NAME
LSEL     DS    CL1                      TBDISPL LINE COMMAND
ZERRMSG  DS    CL8                      LONG ERROR MESSAGE
UMSG1    DS    CL24                     UPPER ERROR MESSAGE
LMSG1    DS    CL78                     LOWER ERROR MESSAGE
         ISPF  PARMS,                   GENERATE ISPF WORKING STORAGE  *
               MINIMUM=5                MINIMUM OF 5F IN PARMLIST
         SPACE
DSNTABLE DS    30CL44                   TABLE OF DSNS FOR KDSNSUB
VOLTABLE DS    30CL6                    TABLE OF VOLSERS FOR KDSNSUB
         DS    0D
WSLEN    EQU   *-WORKSTOR               LENGTH OF WORKING STORAGE
CNA0KED  CSECT ,                        RESUME CSECT
         END   CNA0KED
