*PROCESS;
 /*
   TITLE      -   TUTPRNT2

   FUNCTION   -   THIS PROGRAM PRINTS TUTORIAL PANELS IN ORDER

   SPECIFIER  -   CHRIS GERKEN

   DEVELOPER  -   CHRIS GERKEN

   DATE       -   OCTOBER 10, 1984

   LANGUAGE   -   PLI

   PANVALET   -

   ENTRY      -   PLISTART

   LINKAGE    -   THIS PROGRAM IS SELECTED BY CLIST TUTPRINT

   EXT. REF.  -   ISPLINK

   DATA SETS  -   PDS'S CONTAINING ISPF PANEL DEFINITIONS

   SPF TABLES -   TUTPTABL

   SPF PANELS -   TUTPC050

   SPF MSGS   -   TUTP000

   UPDATES    -   NONE

 */
1TUTPRNT: PROC OPTIONS(MAIN);
0   DCL ISPLINK       EXTERNAL ENTRY OPTIONS(ASM RETCODE INTER),
        ISPEXEC       EXTERNAL ENTRY OPTIONS(ASM RETCODE INTER),
        PLIRETV       BUILTIN,
        RETCODD       FIXED BIN(31),
        RETCODE       FIXED BIN(31),
        LVAR          FIXED BIN(31);
0   DCL CTABLE       STREAM FILE PRINT,
        LISTING      STREAM FILE PRINT;
0   DCL NEW_AMPER     BIT(1),
        XEROX         BIT(1),
        BOLD          BIT(1)  INIT('1'B),
        EOV           BIT(1),
        EXP1          CHAR(1),
        EXP2          CHAR(1),
        TOC           BIT(1),
        PAN           BIT(1),
        CAP           BIT(1),
        REMOT         CHAR(5),
        DATAID        CHAR(8),
        TUTOR         CHAR(8),
        MEMBER        CHAR(8),
        SYSUID        CHAR(8),
        QUP           CHAR(8),
        QCONT         CHAR(8),
        QSEL          CHAR(400),
        BUF_10        CHAR(10),
        H_POS         CHAR(60),
        VALID_CHARS   CHAR(65),
        KEYLIST       CHAR(20),
        NAMELIST      CHAR(100),
        BUFFER        CHAR(300),
        VERIFY        BUILTIN,
        INDEX         BUILTIN,
        HIGH          BUILTIN,
        MIN           BUILTIN,
        MOD           BUILTIN,
        REPEAT        BUILTIN,
        TRANSLATE     BUILTIN,
        TIME          BUILTIN,
        SUBSTR        BUILTIN;
0   DCL EOF           BIT(1),
        OVERPRINT     BIT(1),
        EXPAND        BIT(1),
        BLANK_FIELD   BIT(1),
        PRINT_PANELS  BIT(1),
        PRINT_CTABLE  BIT(1),
        NOT_FOUND     BIT(1),
        PRINT_ME      BIT(1),
        PIC_2         PIC'Z9',
        PIC_2A        PIC'99',
        PIC_4         PIC'ZZZ9',
        ROWID         FIXED BIN(31),
        SECTION       FIXED BIN(31),
        LEVEL         FIXED BIN(31),
        PAGE#         FIXED BIN(31)  INIT(0),
        TOTNUM        FIXED BIN(31),
        TTL_BEG       FIXED BIN(31),
        TTL_END       FIXED BIN(31),
        LINE#         FIXED BIN(31)  INIT(0),
        CTABLE_LINE#  FIXED BIN(31)  INIT(0),
        FIELD#        FIXED BIN(31),
        ISEL          FIXED BIN(31),
        NSEL          FIXED BIN(31),
        ICONT         FIXED BIN(31),
        IOVER         FIXED BIN(31),
        POS           FIXED BIN(31),
        POS1          FIXED BIN(31),
        POS2          FIXED BIN(31),
        MORE          FIXED BIN(31),
        LEFT          FIXED BIN(31),
        FILL          FIXED BIN(31),
        (I,J,K,L,M,N) FIXED BIN(31),
        TUTNUM        FIXED BIN(31)  INIT(0),
        BUFLEN        FIXED BIN(31),
        EXP_COUNT     FIXED BIN(31),
        EXP_STRT(0:50) FIXED BIN(31),
        PAGES(50)     FIXED BIN(31),
        HRCHY(50)     FIXED BIN(31),
        UDK           CHAR(1),
        BUF_2         CHAR(2),
        BUF_3         CHAR(3),
        BUF_4         CHAR(4),
        UPPER_CASE    CHAR(26) INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),
        LOWER_CASE    CHAR(26) INIT('abcdefghijklmnopqrstuvwxyz'),
        BUF1          CHAR(80),
        BUF2          CHAR(80),
        BUF_80        CHAR(80),
        BUF3          CHAR(120),
        LINE          CHAR(80),
        SCREEN(32)    CHAR(80);
0   DCL FDCLIST       CHAR(19),
        FDCTYPE(0:19) FIXED BIN(31),
        FDCINT(0:19)  FIXED BIN(31),
        FDCPAD(0:19)  CHAR(1),
        FDC#          FIXED BIN(31),
        FDCS          FIXED BIN(31);
0   DCL START         FIXED BIN(31) INIT(0),
        ATTR          FIXED BIN(31) INIT(1),
        BODY          FIXED BIN(31) INIT(2),
        MODEL         FIXED BIN(31) INIT(3),
        INIT          FIXED BIN(31) INIT(4),
        REINIT        FIXED BIN(31) INIT(5),
        PROC          FIXED BIN(31) INIT(6),
        END           FIXED BIN(31) INIT(7);
0   DCL WIDTH         FIXED BIN(31) INIT(25),
        HIGHT         FIXED BIN(31) INIT(40);
0   DCL HELPID        CHAR(20),
        HELP_FOUND    BIT(1),
        HELPLEN       FIXED BIN(31);
1   CALL ISPLINK('CONTROL ','ERRORS  ','RETURN  ');
0   CALL SETUP;
0   /*   OUTPUT THOSE TUTORIALS                                */
0   LVAR = 75;
    BUFFER = 'LMMLIST        DATAID(&ID)    OPTION(LIST)   ' ××
             'MEMBER(MEMBER) STATS(YES)     ';
    CALL ISPEXEC(LVAR , BUFFER);
    LVAR = 8;
    CALL ISPLINK('VCOPY   ','(TUTORTOP)', LVAR, TUTOR ,'MOVE');
    LEVEL = 1;
    PAGES(1) = 1;
    CALL TUTPROC;
    CALL NEXTTUT;
    DO WHILE (LEVEL > 0);
       CALL TUTPROC;
       CALL NEXTTUT;
       END;
0   CALL ISPLINK('TBEND   ','TUTPTABL');
    CALL ISPLINK('SETMSG  ','TUTP000 ');
    CALL ISPLINK('VRESET  ');
1TUTPROC: PROC;
0   /*   START:    LEVEL IS SET TO THE CURRENT POSITION IN THE TUTORIAL
                            HIERARCHY.
                   TUTOR IS SET TO THE ID OF THE TUTORIAL TO BE
                            PROCESSED.

         PROCESS:  PRINT TUTORIAL PANEL.
                   SAVE ZSEL, ZCONT AND ZUP VALUES.
                   ADD A ROW FOR THIS PANEL IN TUTPTABL

         END:      ROWID IS SET TO THE ROW-ID OF THE ROW FOR THIS PANEL
                            IN TUTPTABL.
                   HRCHY(LEVEL) IS SET TO THE ROW-ID OF TUTOR
     */
0   CALL INITIAL;
    IF MOD(PAGE#,10) = 0
       THEN CALL ISPLINK('CONTROL ','DISPLAY ','REFRESH ');
       ELSE;
    CALL ISPLINK('CONTROL ','DISPLAY ','LOCK    ');
    CALL ISPLINK('DISPLAY ','TUTPC050');
0   I = 0;
    CALL NEWLINE;
    DO WHILE (^EOF);
       I = I + 1;
       SELECT(SECTION);
         WHEN(ATTR)  IF I > 1
                        THEN DO;
                             CALL RAISE;
                             CALL DECOM;
                             CALL NEWFDC;
                             END;
                        ELSE;
         WHEN(BODY)  IF ((SUBSTR(LINE,1,5) ^= ')BODY') & (LINE# < 32))
                        THEN DO;
                             IF EXPAND
                                THEN CALL EXPLINE;
                                ELSE;
                             LINE# = LINE# + 1;
                             SCREEN(LINE#) = LINE;
                             END;
                        ELSE;
         WHEN(PROC)  DO;
                     CALL RAISE;
                     CALL DECOM;
                     POS = VERIFY(LINE,' ');
                     IF POS > 0
                        THEN DO;
                             IF POS < 74
                               THEN IF SUBSTR(LINE,POS,6) = '&ZCONT'
                                    THEN DO;
                                         CALL GET_CONT;
                                         POS = 80;
                                         END;
                                    ELSE;
                             IF POS < 75
                               THEN IF SUBSTR(LINE,POS,5) = '&ZSEL'
                                    THEN DO;
                                         CALL GET_SEL;
                                         POS = 80;
                                         END;
                                    ELSE;
                             IF POS < 76
                               THEN IF SUBSTR(LINE,POS,4) = '&ZUP'
                                    THEN DO;
                                         CALL GET_UP;
                                         POS = 80;
                                         END;
                                    ELSE;
                             IF POS < 75
                               THEN IF SUBSTR(LINE,POS,5) = '&CONT'
                                    THEN DO;
                                         CALL GET_CONT;
                                         POS = 80;
                                         END;
                                    ELSE;
                             IF POS < 76
                               THEN IF SUBSTR(LINE,POS,4) = '&SEL'
                                    THEN DO;
                                         CALL GET_SEL;
                                         POS = 80;
                                         END;
                                    ELSE;
                             IF POS < 77
                               THEN IF SUBSTR(LINE,POS,3) = '&UP'
                                    THEN DO;
                                         CALL GET_UP;
                                         POS = 80;
                                         END;
                                    ELSE;
                             END;
                        ELSE;
                     END;
         OTHERWISE;
         END;
       CALL NEWLINE;
       END;
0   IF INDEX(FDCLIST,'&') = 0
       THEN NEW_AMPER = '0'B;
       ELSE NEW_AMPER = '1'B;
0   /*  UPDATE TABLE          */
0   IF NOT_FOUND
       THEN DO;
            LEVEL = LEVEL - 1;
            END;
       ELSE DO;
            NSEL = 0;
            MEMBER = TUTOR;
            CALL ISPLINK('TBADD   ','TUTPTABL');
            RETCODE = PLIRETV;
            IF RETCODE > 0
               THEN DO;
                    LEVEL = LEVEL - 1;
                    END;
               ELSE DO;
                    CALL ISPLINK('TBGET   ','TUTPTABL','D1 ','ROWID  ');
                    HRCHY(LEVEL) = ROWID;
                    END;
            END;
    IF ^NOT_FOUND      /* HOW 'BOUT THOSE DOUBLE NEGATIVES?  */
       THEN DO;
            TOTNUM = TOTNUM + 1;
            PAGE# = PAGE# + 1;
            IF PAN
               THEN DO;
                    PUT PAGE FILE(LISTING);
                    PUT FILE(LISTING) SKIP(5);
                    DO I = 1 TO LINE#;
                       CALL DSPLINE;
                       END;
                    CALL FOOTER;
                    END;
               ELSE;
            IF TOC
               THEN DO;
                    IF MOD(TUTNUM,40) = 0
                       THEN DO;
                            PUT PAGE    FILE(CTABLE);
                            PUT SKIP(6) FILE(CTABLE);
                            END;
                       ELSE;
                    TUTNUM = TUTNUM + 1;
                    POS  = INDEX(SUBSTR(SCREEN(1),15,66),' ') + 14;
                    POS1 = VERIFY(SUBSTR(SCREEN(1),POS,81-POS),' ') +
                           POS - 1;
                    POS2 = INDEX(SUBSTR(SCREEN(1),POS1,81-POS1),'----');
                    PUT FILE(CTABLE) EDIT
                                       (SUBSTR(SCREEN(1),POS1,POS2-1) ××
                                        REPEAT('..',15-LEVEL) ××
                                        REPEAT('.', 50-POS2),
                                        PAGE#,'('××TUTOR××')')
                                       (COL(LEVEL*2),A,
                                        COL(83),F(4),X(3),A(10));
                    END;
               ELSE;
            END;
       ELSE;
1INITIAL: PROC;
    CALL ISPLINK('LMMFIND ', DATAID , TUTOR);
    RETCODE = PLIRETV;
    NOT_FOUND = (RETCODE > 0);
0   H_POS = REPEAT(' ',59);
    PIC_2A = PAGES(1);
    SUBSTR(H_POS,1,2) = PIC_2A;
    DO I = 2 TO LEVEL;
       PIC_2A = PAGES(I);
       SUBSTR(H_POS,I*3-3) = '.' ×× PIC_2A;
       END;
0   /*   INITIALIZE COUNTERS AND STUFF...   */
0   EOF = '0'B;
    FDCS = 3;
    FDCTYPE = 0;
    FDCTYPE(0) = 1;
    FDCTYPE(1) = 1;
    FDCTYPE(2) = 1;
    FDCTYPE(3) = 2;
    FDCINT = 0;
    FDCINT(0) = 0;
    FDCINT(1) = 1;
    FDCINT(2) = 0;
    FDCINT(3) = 1;
0   SECTION = 0;
    SUBSTR(FDCLIST,1,3) = '%+_';
    FDCPAD(0) = ' ';
    FDCPAD(1) = ' ';
    FDCPAD(2) = ' ';
    FDCPAD(3) = ' ';
    LINE# = 0;
    HELP_FOUND = '0'B;
    HELPID = '                    ';
0   CALL ISPLINK('TBVCLEAR','TUTPTABL');
0   ICONT = 0;
    IOVER = 0;
    ISEL  = 0;
    NSEL  = 0;
0END INITIAL;
1NEWLINE: PROC;
0   LVAR = 90;
    BUFFER = 'LMGET          DATAID(&ID)    MODE(INVAR)    ' ××
             'DATALOC(INVAR) DATALEN(LNVAR) MAXLEN(80)     ';
    CALL ISPEXEC(LVAR , BUFFER);
    RETCODE = PLIRETV;
    IF RETCODE = 8
       THEN EOF = '1'B;
       ELSE SELECT;
              WHEN (SUBSTR(LINE,1,6) = ')ATTR ')
                              IF (I = 0)
                                 THEN DO;
                                      SECTION = ATTR;
                                      POS = INDEX(LINE,'DEFAULT(');
                                      IF POS > 0
                                         THEN SUBSTR(FDCLIST,1,3) =
                                                   SUBSTR(LINE,POS+8,3);
                                         ELSE;
                                      FDCPAD = ' ';
                                      END;
                                 ELSE;
              WHEN (SUBSTR(LINE,1,6) = ')BODY ') DO;
                              SECTION = BODY;
                              POS = INDEX(LINE,'EXPAND(');
                              IF (POS > 0) & (POS < 72)
                                 THEN DO;
                                      POS = POS + 7;
                                      EXPAND = '1'B;
                                      EXP1 = SUBSTR(LINE,POS,1);
                                      EXP2 = SUBSTR(LINE,POS+1,1);
                                      END;
                                 ELSE EXPAND = '0';
                              END;
              WHEN (SUBSTR(LINE,1,6) = ')INIT ')
                              SECTION = INIT;
              WHEN (SUBSTR(LINE,1,6) = ')PROC ')
                              SECTION = PROC;
              WHEN (SUBSTR(LINE,1,5) = ')END ') DO;
                              SECTION = END;
                              EOF = '1'B;
                              END;
              OTHERWISE     IF I = 0
                               THEN SECTION = BODY;
                               ELSE;
              END;
0END NEWLINE;
1NEWFDC: PROC;
0   POS = VERIFY(LINE,' ');
    IF POS > 0
       THEN DO;
            FDCS = FDCS + 1;
            FDCINT(FDCS) = 0;
            FDCTYPE(FDCS) = 1;
            SUBSTR(FDCLIST,FDCS,1) = SUBSTR(LINE,POS,1);
            FDCPAD(FDCS)  = ' ';
            IF INDEX(LINE,'INTENS(HIGH)') > 0
               THEN FDCINT(FDCS) = 1;
               ELSE;
            IF INDEX(LINE,'TYPE(OUTPUT)') > 0
               THEN FDCTYPE(FDCS) = 0;
               ELSE;
            IF INDEX(LINE,'TYPE(TEXT)') > 0
               THEN FDCTYPE(FDCS) = 1;
               ELSE;
            IF INDEX(LINE,'TYPE(INPUT)') > 0
               THEN FDCTYPE(FDCS) = 2;
               ELSE;
            POS = INDEX(LINE,'PAD(');
            IF POS > 0
               THEN FDCPAD(FDCS) = SUBSTR(LINE,POS+5,1);
               ELSE;
            IF INDEX(LINE,'INTENS(NON)') > 0
               THEN DO;
                    FDCINT(FDCS) = 0;
                    FDCTYPE(FDCS)= 0;
                    FDCPAD(FDCS) = ' ';
                    END;
               ELSE;
            END;
       ELSE;
0END NEWFDC;
1EXPLINE: PROC;
0   POS1 = INDEX(LINE,EXP1);
    EXP_COUNT = 0;
    EXP_STRT(0) = 0;
    POS = 0;
    DO WHILE (POS1 > 0);
       POS = POS + POS1;
       IF SUBSTR(LINE,POS+2,1) = EXP2
          THEN DO;
               LINE = SUBSTR(LINE,1,POS-1) ××
                      SUBSTR(LINE,POS+1,1) ××
                      SUBSTR(LINE,POS+3,78-POS) ×× '  ';
               EXP_COUNT = EXP_COUNT + 1;
               EXP_STRT(EXP_COUNT) = POS;
               END;
          ELSE;
       POS1 = INDEX(SUBSTR(LINE,POS+1,81-POS),EXP1);
       END;
0   IF EXP_COUNT > 0
       THEN DO;
0           DO POS = 80 TO 1 BY -1 WHILE(SUBSTR(LINE,POS,1) = ' ');
               END;
            POS = 80 - POS;
0           MORE = MOD(POS,EXP_COUNT);
            FILL = (POS - MORE) / EXP_COUNT;
            N = 1;
0           DO M = 1 TO MORE;
               J = EXP_STRT(M-1) + 1;
               K = EXP_STRT(M);
               SUBSTR(BUF_80,N,K-J+2+FILL) = SUBSTR(LINE,J,K-J) ××
                                             REPEAT(SUBSTR(LINE,K,1),
                                                    FILL+2);
               N = N + K - J + FILL;
               END;
0           DO M = (MORE + 1) TO EXP_COUNT;
               J = EXP_STRT(M-1) + 1;
               K = EXP_STRT(M);
               SUBSTR(BUF_80,N,K-J+1+FILL) = SUBSTR(LINE,J,K-J) ××
                                             REPEAT(SUBSTR(LINE,K,1),
                                                    FILL+1);
               N = N + K - J - 1 + FILL;
               END;
0           LEFT = 81 - POS - EXP_STRT(M-1);
            SUBSTR(BUF_80,N,LEFT) = SUBSTR(LINE,EXP_STRT(M-1)+1,LEFT);
            LINE = BUF_80;
            END;
       ELSE;
0END EXPLINE;
1RAISE: PROC;
0   LINE = TRANSLATE(LINE,UPPER_CASE,LOWER_CASE);
0END RAISE;
1DECOM: PROC;
0   POS1 = INDEX(LINE,'/*');
    POS2 = INDEX(SUBSTR(LINE,POS1+2,79-POS1),'*/');
    DO WHILE ((0 < POS1) & (0 < POS2));
       SUBSTR(LINE,POS1,POS1+POS2+3) = REPEAT(' ',POS1+POS2+2);
       POS1 = INDEX(LINE,'/*');
       POS2 = INDEX(SUBSTR(LINE,POS1+2,79-POS1),'*/');
       END;
0END DECOM;
1GET_CONT: PROC;
0   POS  = INDEX(LINE,'=');
    POS1 = VERIFY(SUBSTR(LINE,POS+1,80-POS),' ');
    IF POS1 = 0
       THEN POS1 = POS + 1;
       ELSE POS1 = POS + POS1;
0   /*  POS1 NOW CONTAINS THE STARTING POSITION OF THE TUTOR ID   */
0   POS = INDEX(SUBSTR(LINE,POS1,81-POS1),' ');
    IF POS = 0
       THEN POS2 = 81 - POS1;
       ELSE POS2 = POS - 1;
0   /*  POS2 NOW CONTAINS THE LENGTH OF THE TUTOR ID              */
0   QCONT = SUBSTR(LINE,POS1,POS2) ×× '        ';
    ICONT = 1;
0END GET_CONT;
1GET_UP: PROC;
0   POS  = INDEX(LINE,'=');
    POS1 = VERIFY(SUBSTR(LINE,POS+1,80-POS),' ');
    IF POS1 = 0
       THEN POS1 = POS + 1;
       ELSE POS1 = POS + POS1;
0   /*  POS1 NOW CONTAINS THE STARTING POSITION OF THE TUTOR ID   */
0   POS = INDEX(SUBSTR(LINE,POS1,81-POS1),' ');
    IF POS = 0
       THEN POS2 = 81 - POS1;
       ELSE POS2 = POS - 1;
0   /*  POS2 NOW CONTAINS THE LENGTH OF THE TUTOR ID              */
0   QUP = SUBSTR(LINE,POS1,POS2) ×× '        ';
0END GET_UP;
1GET_SEL: PROC;
    L = 0;
    CALL NEWLINE;
    DO UNTIL (POS > 0);
       POS = INDEX(LINE,',');
       POS1 = VERIFY(SUBSTR(LINE,POS+1,80-POS),'* ');
       IF POS1 = 0
          THEN POS1 = POS + 1;
          ELSE POS1 = POS + POS1;
0      /*  POS1 NOW CONTAINS THE STARTING POSITION OF THE TUTOR ID   */
0      POS = VERIFY(SUBSTR(LINE,POS1,81-POS1),VALID_CHARS);
       IF POS = 0
          THEN POS2 = 81 - POS1;
          ELSE POS2 = POS - 1;
0      /*  POS2 NOW CONTAINS THE LENGTH OF THE TUTOR ID              */
       L = L + 1;
       SUBSTR(QSEL,8*L-7,POS2) = SUBSTR(LINE,POS1,POS2);
0      CALL NEWLINE;
       POS = INDEX(LINE,')');
       END;
0   ISEL = L;
0END GET_SEL;
1DSPLINE: PROC;
    FIELD# = 0;
    BUF1 = TRANSLATE(SCREEN(I),HIGH(FDCS),SUBSTR(FDCLIST,1,FDCS));
    IF CAP
       THEN BUF1 = TRANSLATE(BUF1,UPPER_CASE,LOWER_CASE);
       ELSE;
    IF ^NEW_AMPER
       THEN DO;
            POS = INDEX(BUF1,'&');
            POS1 = 1;
            DO WHILE (POS > 0);
               POS = POS1 + POS - 1;
               IF POS = 80
                  THEN SUBSTR(BUF1,80,1) = ' ';
                  ELSE IF SUBSTR(BUF1,POS+1,1) = '&'
                          THEN DO;
                               BUF1 = SUBSTR(BUF1,1,POS)        ××
                                      SUBSTR(BUF1,POS+2,79-POS) ××
                                      ' ';
                               POS = POS + 1;
                               END;
                          ELSE DO;
                               EOV = '0'B;
                               DO POS1 = 1 TO MIN(8,80-POS) WHILE(^EOV);
                                  J = INDEX(VALID_CHARS,
                                            SUBSTR(BUF1,POS+POS1,1));
                                  SELECT;
                                    WHEN (J = 0)               EOV='1'B;
                                    WHEN ((J < 11)&(POS1 = 1)) EOV='1'B;
                                    OTHERWISE;
                                    END;
                                  END;
                               POS1 = POS1 - 1;
                               BUF1 = SUBSTR(BUF1,1,POS-1) ××
                                      REPEAT(' ',POS1-1)   ××
                                      SUBSTR(BUF1,POS+POS1,81-POS-POS1);
                               POS1 = POS1 + POS + 1;
                               IF POS1 < 81
                                  THEN IF SUBSTR(BUF1,POS1,1)='.'
                                          THEN SUBSTR(BUF1,POS1,1)=' ';
                                          ELSE;
                               END;
               POS1 = POS;
               POS = INDEX(SUBSTR(BUF1,POS,81-POS),'&');
               END;
            END;
       ELSE;
    BUF2 = REPEAT(' ',79);
    BUF3 = REPEAT(' ',119);
    OVERPRINT = '0'B;
    POS = INDEX(BUF1,HIGH(1));
    IF POS = 1
       THEN FDC# = -1;
       ELSE FDC# = 0;
    DO WHILE (POS < 80);
       IF FDC# ^= 0
          THEN DO;
               POS1 = INDEX(SUBSTR(BUF1,POS+1,81-POS),HIGH(1));
               IF POS1 = 0
                  THEN POS1 = 80 - POS;
                  ELSE POS1 = POS1 - 1;
               FDC#=INDEX(
                       SUBSTR(FDCLIST,1,FDCS),
                       SUBSTR(SCREEN(I),POS,1));
               SUBSTR(BUF1,POS,1) = ' ';
               POS = POS+1;
               END;
          ELSE DO;
               POS1 = INDEX(BUF1,HIGH(1));
               IF POS1 = 0
                  THEN POS1 = 80;
                  ELSE POS1 = POS1 - 1;
               POS = 1;
               END;
       K = FDCTYPE(FDC#);
       BLANK_FIELD =  (K = 0) ×
                     ((K = 1) & (VERIFY(SUBSTR(BUF1,POS,POS1),' ')=0))×
                     ((K = 2) & (FDCPAD(FDC#) = ' '));
       SELECT;
         WHEN (BLANK_FIELD)
                  IF ^XEROX
                     THEN SUBSTR(BUF1,POS,POS1) = REPEAT(' ',POS1-1);
                     ELSE DO;
                          SUBSTR(BUF3,FIELD#*2+POS+1,1) = ' ';
                          SUBSTR(BUF3,FIELD#*2+POS+2,POS1) =
                                REPEAT(' ',POS1-1);
                          END;
         WHEN (FDCTYPE(FDC#) = 0)
                  IF ^XEROX
                     THEN SUBSTR(BUF1,POS,POS1) = REPEAT(' ',POS1-1);
                     ELSE DO;
                          FIELD# = FIELD# + 1;
                          SUBSTR(BUF3,FIELD#*2+POS-1,1) = ' ';
                          IF FDCINT(FDC#) = 1
                             THEN SUBSTR(BUF3,FIELD#*2+POS,2)=UDK××'1';
                             ELSE SUBSTR(BUF3,FIELD#*2+POS,2)=UDK××'2';
                          SUBSTR(BUF3,FIELD#*2+POS+2,POS1) =
                                REPEAT(' ',POS1-1);
                          END;
         WHEN (FDCTYPE(FDC#) = 1) DO;     /*  TEXT  */
                  IF ^XEROX
                     THEN IF FDCINT(FDC#) = 1
                             THEN DO;
                                  OVERPRINT = '1'B;
                                  SUBSTR(BUF2,POS,POS1) =
                                        SUBSTR(BUF1,POS,POS1);
                                  END;
                             ELSE;
                     ELSE DO;
                          FIELD# = FIELD# + 1;
                          SUBSTR(BUF3,FIELD#*2+POS-1,1) = ' ';
                          IF FDCINT(FDC#) = 1
                             THEN SUBSTR(BUF3,FIELD#*2+POS,2)=UDK××'1';
                             ELSE SUBSTR(BUF3,FIELD#*2+POS,2)=UDK××'2';
                          SUBSTR(BUF3,FIELD#*2+POS+2,POS1) =
                                SUBSTR(BUF1,POS,POS1);
                          END;
                  END;
         WHEN (FDCTYPE(FDC#) = 2) DO; /* VARIABLE - PAD */
                  IF ^XEROX
                     THEN DO;
                          SUBSTR(BUF1,POS,POS1) =
                                 REPEAT(FDCPAD(FDC#),POS1-1);
                          IF FDCINT(FDC#) = 1
                             THEN DO;
                                  SUBSTR(BUF2,POS,POS1) =
                                        REPEAT(FDCPAD(FDC#),POS1-1);
                                  OVERPRINT = '1'B;
                                  END;
                             ELSE;
                          END;
                     ELSE DO;
                          FIELD# = FIELD# + 1;
                          SUBSTR(BUF3,FIELD#*2+POS-1,1) = ' ';
                          IF FDCINT(FDC#) = 1
                             THEN SUBSTR(BUF3,FIELD#*2+POS,2)=UDK××'1';
                             ELSE SUBSTR(BUF3,FIELD#*2+POS,2)=UDK××'2';
                          SUBSTR(BUF3,FIELD#*2+POS+2,POS1) =
                                REPEAT(FDCPAD(FDC#),POS1-1);
                          END;
                  END;
         OTHERWISE;
         END;
       FDCTYPE(0) = FDCTYPE(FDC#);
       FDCINT(0)  = FDCINT(FDC#);
       FDCPAD(0)  = FDCPAD(FDC#);
       POS = INDEX(BUF1,HIGH(1));
       IF POS = 0
          THEN POS = 81;
          ELSE;
       FDC# = -1;
       END;
    IF XEROX
       THEN PUT FILE(LISTING) EDIT(BUF3) (COL(10),A(120));
       ELSE PUT FILE(LISTING) EDIT(BUF1) (COL(10),A(80));
    IF OVERPRINT & BOLD
       THEN DO;
            PUT SKIP(0) FILE(LISTING) EDIT(BUF2) (COL(10),A(80));
            END;
       ELSE;
0END DSPLINE;
1FOOTER: PROC;
0   PUT FILE(LISTING) EDIT ('PANEL ID: '××TUTOR)
                           (LINE(40),COL(13),A(18));
0   PIC_2A = PAGES(1);
    PUT FILE(LISTING) EDIT ('HIER: '××SUBSTR(H_POS,1,LEVEL*3-1))
                           (COL(36),A);
0   PUT SKIP(0) FILE(LISTING) EDIT ('PAGE: ',PAGE#)
                           (COL(82),A(6),F(4));
0END FOOTER;
0END TUTPROC;
1NEXTTUT: PROC;
0   /*   START:    ROWID IS SET TO THE ROW-ID OF THE ROW FOR THIS PANEL
                            IN TUTPTABL.

         PROCESS:  RETRIEVE ROW WITH ROW-ID OF ROWID.
                   FIGURE OUT WHAT TUTORIAL TO PRINT NEXT.

         END:      TUTOR IS THE ID OF THE NEXT TUTORIAL.
                   LEVEL IS SET TO THE POSITION OF ID TUTOR IN THE
                            TUTORIAL HIERARCHY.
     */
0   PRINT_ME = '0'B;
    DO WHILE (^PRINT_ME & (LEVEL > 0));
       ROWID = HRCHY(LEVEL);
       CALL ISPLINK('TBTOP   ','TUTPTABL');
       CALL ISPLINK('TBSKIP  ','TUTPTABL',' ','D1 ','D2 ', ROWID);
       SELECT;
         WHEN (ISEL > 0) DO;  /* PROCESS QSEL LIST   */
              NSEL = NSEL + 1;
              ICONT = 0;
              CALL ISPLINK('TBPUT   ','TUTPTABL');
              IF NSEL > ISEL
                 THEN DO;    /* NO MORE ID'S */
                      LEVEL = LEVEL - 1;
                      END;
                 ELSE DO;
                      TUTOR = SUBSTR(QSEL,8*NSEL-7,8);
                      LEVEL = LEVEL + 1;
                      IF NSEL = 1
                         THEN PAGES(LEVEL) = 1;
                         ELSE PAGES(LEVEL) = PAGES(LEVEL) + 1;
                      PRINT_ME = '1'B;
                      END;
              END;
         WHEN (ICONT > 0) DO;   /* PROCESS QCONT ID    */
              TUTOR = QCONT;
              PAGES(LEVEL) = PAGES(LEVEL) + 1;
              PRINT_ME = '1'B;
              END;
         OTHERWISE DO;
              LEVEL = LEVEL - 1;
              END;
         END;
       END;
0END NEXTTUT;
1SETUP: PROC;
0   LVAR = 4;
    CALL ISPLINK('VDEFINE ','(NSEL)    ', NSEL      ,'FIXED', LVAR);
    CALL ISPLINK('VDEFINE ','(ISEL)    ', ISEL      ,'FIXED', LVAR);
    CALL ISPLINK('VDEFINE ','(ICONT)   ', ICONT     ,'FIXED', LVAR);
    CALL ISPLINK('VDEFINE ','(IOVER)   ', IOVER     ,'FIXED', LVAR);
    CALL ISPLINK('VDEFINE ','(LEVEL)   ', LEVEL     ,'FIXED', LVAR);
    CALL ISPLINK('VDEFINE ','(ROWID)   ', ROWID     ,'FIXED', LVAR);
    CALL ISPLINK('VDEFINE ','(TOTNUM)  ', TOTNUM    ,'FIXED', LVAR);
0   LVAR = 8;
    CALL ISPLINK('VDEFINE ','(TUTOR)   ', TUTOR     ,'CHAR' , LVAR);
    CALL ISPLINK('VDEFINE ','(MEMBER)  ', MEMBER     ,'CHAR' , LVAR);
    CALL ISPLINK('VDEFINE ','(ID)      ', DATAID    ,'CHAR' , LVAR);
    CALL ISPLINK('VDEFINE ','(QCONT)   ', QCONT     ,'CHAR' , LVAR);
    CALL ISPLINK('VDEFINE ','(QUP)     ', QUP       ,'CHAR' , LVAR);
    CALL ISPLINK('VDEFINE ','(ZUSER)   ', SYSUID    ,'CHAR' , LVAR);
0   LVAR = 60;
    CALL ISPLINK('VDEFINE ','(HPOS)    ', H_POS     ,'CHAR' , LVAR);
0   LVAR = 80;
    CALL ISPLINK('VDEFINE ','(INVAR)   ', LINE      ,'CHAR' , LVAR);
0   LVAR = 400;
    CALL ISPLINK('VDEFINE ','(QSEL)    ', QSEL      ,'CHAR' , LVAR);
0   NAMELIST = '(QSEL QUP QCONT NSEL ISEL ICONT IOVER)';
    KEYLIST  = '(MEMBER)';
    CALL ISPLINK('TBCREATE','TUTPTABL', KEYLIST , NAMELIST ,'NOWRITE');
0   /*           SET FLAGS ET ALL           */
0   NAMELIST = '(CAP TOC PAN XRX UDK TUTORTOP)';
    CALL ISPLINK('VGET    ', NAMELIST ,'PROFILE ');
    NAMELIST = '(ID)';
    CALL ISPLINK('VGET    ', NAMELIST ,'SHARED  ');
0   LVAR = 3;
    CALL ISPLINK('VCOPY   ','(CAP)', LVAR , BUF_3 ,'MOVE');
    CAP = (BUF_3 = 'YES');
0   LVAR = 3;
    CALL ISPLINK('VCOPY   ','(TOC)', LVAR , BUF_3 ,'MOVE');
    TOC = (BUF_3 = 'YES');
0   LVAR = 3;
    CALL ISPLINK('VCOPY   ','(PAN)', LVAR , BUF_3 ,'MOVE');
    PAN = (BUF_3 = 'YES');
0   LVAR = 3;
    CALL ISPLINK('VCOPY   ','(XRX)', LVAR , BUF_3 ,'MOVE');
    XEROX = (BUF_3 = 'YES');
    LVAR = 1;
0   CALL ISPLINK('VCOPY   ','(UDK)', LVAR , UDK ,'MOVE');
0   TOTNUM = 0;
0   IF XEROX
       THEN CALL PANXEROX;
       ELSE;
0   PUT PAGE FILE(LISTING);
    CALL ISPLINK('VGET    ','(ZUSER)','SHARED  ');
    PUT SKIP FILE(LISTING) EDIT(' *** TUTORIAL PRINT OUTPUT FOR USER '××
                                SYSUID ×× ' ***')
                               (COL(3),A);
0   VALID_CHARS = '0123456789' ×× UPPER_CASE ×× LOWER_CASE ×× '#@$';
1PANXEROX: PROC;
0   PUT FILE(LISTING) EDIT('=UDK=' ×× UDK)          (COL(1),A(6));
    PUT FILE(LISTING) EDIT(UDK ×× '+X ')            (COL(1),A(4));
    PUT FILE(LISTING) EDIT('=UDK=' ×× UDK)          (COL(1),A(6));
    PUT FILE(LISTING) EDIT(UDK ×× 'c1          ')   (COL(1),A(13));
    PUT FILE(LISTING) EDIT(UDK ×× '+1Titan10B-L')   (COL(1),A(13));
    PUT FILE(LISTING) EDIT(UDK ×× '+2Titan10-L ')   (COL(1),A(13));
    PUT FILE(LISTING) EDIT(UDK ×× 'm510,5,5,5,650') (COL(1),A(15));
    PUT FILE(LISTING) EDIT(UDK ×× '+P          ')   (COL(1),A(13));
    PUT FILE(LISTING) EDIT(UDK ×× '1           ')   (COL(1),A(13));
0   PUT FILE(CTABLE) EDIT('=UDK=' ×× UDK)         (COL(1),A(6));
    PUT FILE(CTABLE) EDIT(UDK ×× '+X ')           (COL(1),A(4));
    PUT FILE(CTABLE) EDIT('=UDK=' ×× UDK)         (COL(1),A(6));
    PUT FILE(CTABLE) EDIT(UDK ×× 'c1          ')  (COL(1),A(13));
    PUT FILE(CTABLE) EDIT(UDK ×× '+1Titan10B-L')  (COL(1),A(13));
    PUT FILE(CTABLE) EDIT(UDK ×× '+2Titan10-L ')  (COL(1),A(13));
    PUT FILE(CTABLE) EDIT(UDK ×× 'm510,5,5,5,650') (COL(1),A(15));
    PUT FILE(CTABLE) EDIT(UDK ×× '+P          ')  (COL(1),A(13));
    PUT FILE(CTABLE) EDIT(UDK ×× '1           ')  (COL(1),A(13));
0END PANXEROX;
0END SETUP;
0END TUTPRNT;
