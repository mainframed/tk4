         TITLE ' - DA TSO CP CONVERTED TO ISPF DIALOG'
JOB1LIST AMODE 31
JOB1LIST CSECT
***********************************************************************
*        STANDARD ENTRY CODE FOR A RE-ENTRANT PROGRAM
*                 REGISTER 12 IS ONLY BASE REGISTER
***********************************************************************
         USING *,15                     TEMPORARY BASE REGISTER
         B     PASSLIT                  BRANCH AROUND LITERALS
         DC    C'JOB1LIST '             CSECT NAME
         DC    C'04/23/85 '             DATE WRITTEN
         DC    C'VERSION 1.0 '          VERSION NUMBER
         DC    C'&SYSDATE '             DATE ASSEMBLED
         DC    C'&SYSTIME '             TIME ASSEMBLED
PASSLIT  DS    0H
         STM   14,12,12(13)             SAVE CALLERS REGISTERS
         LR    3,1                      SAVE PARAMETERS PASSED
         LR    12,15                    REGISTER 12 IS BASE REGISTER
         DROP  15                       END TEMPORARY ADDRESSING
         USING JOB1LIST,12              PERMANENT ADDRESSING
         SPACE
         GETMAIN R,LV=DSECTL,SP=0       GET WORKING STORAGE AREA
         SPACE
         ST    1,8(13)                  SET FORWARD CHAIN IN SAVEAREA
         ST    13,4(1)                  SET BACKWARD CHAIN
         LM    13,1,8(13)               RESTORE CLOBBERED REGISTERS
         USING VARYABL,13               SETUP WORKING STORAGE
         LA    14,BINIT
         LA    15,EINIT
         L     1,=X'40000000'
         MVCL  14,0
         EJECT
         ISPF  LOAD                LOAD ISPLINK
         SPACE
         VDEFINE '(JOBNAME)',JOBNAME,CHAR,=F'8',MF=E
         SPACE
         VDEFINE '(PROCNAME)',PROCNAME,CHAR,=F'8',MF=E
         SPACE
         VDEFINE '(STEPNAME)',STEPNAME,CHAR,=F'8',MF=E
         SPACE
         VDEFINE '(MEMSTAT1)',MEMSTAT1,CHAR,=F'8',MF=E
         SPACE
         VDEFINE '(JOBHH)',JOBHH,CHAR,=F'8',MF=E
         SPACE
         VDEFINE '(CPUTIME)',CPUTIME,CHAR,=F'8',MF=E
         SPACE 5
         MVC   VCOPYLEN,=F'1'
         VCOPY  '(JOBPTSO)',VCOPYLEN,JOBPTSO,MOVE,MF=E
         SPACE 5
         MVC   VCOPYLEN,=F'8'
         VCOPY '(JOBPLMT)',VCOPYLEN,LIMIT,MOVE,MF=E
         SPACE
         MVC   LIMITL,VCOPYLEN
         MVC   VCOPYLEN,=F'1'
         VCOPY '(JOBFTSO)',VCOPYLEN,JOBFTSO,MOVE,MF=E
         SPACE
         L     1,0(3)              GET PARM PASSED
         MVC   TABLE,0(1)          GET ISPF TABLE NAME
         B     START               BRANCH TO ENTRY CODE.
         EJECT
$$EOJ    DS    0H                       GET ADDRESS FOR FREEMAIN
         LR    10,15               SAVE RETURN CODE
         VDELETE '(JOBNAME STEPNAME PROCNAME MEMSTAT1 JOBHH CPUTIME)', *
               MF=E
         SPACE
         ISPF  DELETE              DELETE ISPLINK
         SPACE 3
         LR    1,13                     GET ADDRESS FOR FREEMAIN
         L     13,VARYABL+4             GET CALLERS SAVE AREA
         FREEMAIN R,A=(1),LV=DSECTL,SP=0 FREE WORKING STORAGE
         SPACE
         LR    15,10                    GET RETURN CODE
         L     14,12(,13)               RESTORE RETURN ADDRESS
         LM    0,12,20(13)              RESTORE REMAINING REGISTERS
         MVI   12(13),X'FF'             FLAG AS RETURNED FOR SNAP SVC
         BR    14                       RETURN TO CALLER
START    DS    0H                  PROGRAM ENTRY POINT.
LINKREG  EQU   6                   LINK REGISTER
*
         MVI   BUFFER,C' '        CLEAR OUT BUFFER
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
         SPACE
*
         MVC   SWITCH(1),CSWITCH
         MVC   WRKD(1),CWRKD
         MVC   DDOTS(2),DOTS      MOVE IN CONSTANTS TO #JOBS/
         MVC   DJOBS(6),JOBS      INITIATORS MESSAGE
         MVC   DINITIAT(11),INITIAT
         LA    R2,0               COUNTER FOR # INITIATORS
         LA    R3,0               COUNTER FOR # JOBS/STC
         L     R11,CVTPTR         (R11)=ADDR CVT
         USING CVT,R11
         L     R9,CVTOPCTP        (R9) =ADDR (SRM'S RMCT)
         ST    R9,RMCTPTR            WHICH IS SAVED FOR LATER
         L     R9,CVTASVT         (R9)= ADDR ASVT
         USING ASVT,R9
         L     R5,ASVTMAXU        (R5)=MAX NUMB OF ASCB ENTRIES
         LA    R5,2(R5)              +2 SO WE CAN SCAN ENTIRE ASVT..
         LA    R9,ASVTFRST-4      (R9)= ADDR-4 OF FIRST ASCB ENTRY
         DROP  R9
         LA    R0,MSGL            MSGL IS LENGTH OF MESSAGE
         LA    R1,MSGH            MSGH - MESSAGE "SADSC DISPLAY ACTIVE"
         BAL   LINKREG,PUTMSG     DO THE TPUT OF MSGH
         LA    R0,HEADINGL
         LA    R1,HEADING
*        BAL   LINKREG,PUTMSG     WRITE OUT HEADING
         B     NEXTONE            GO GET ASCB
         USING ASCB,R8
*
* LOOP THROUGH ALL ASCBS
*
LOOP1    L     R10,ASCBCSCB       LOAD CSCB ADDR
         USING CSCB,R10
CHKCSCB  TM    CHTRKID,CHINITID   IS IT AN INIT?
         BNO   TESTJOB            NO-> ..GO CHECK FOR JOB
         LA    R2,1(R2)           YES-> INCR COUNT OF INITS
         B     NEXTONE              GO GET ANOTHER
*
*
TESTJOB  DS    0H
         TM    CHTRKID,CHJOBID    IS IT A STC?
*        BNO   NEXTONE            NOPE-> MUST BE TSO..GO GET ANOTHER
         BNO   CHECKTSO           NOPE-> MUST BE TSO..GO GET ANOTHER
         B     NOTTSO
CHECKTSO DS    0H
         CLI   JOBPTSO,C'Y'        ARE TSO USERS DESIRED
         BNE   NEXTONE             IF NOT KEEP GOING
         MVI   SWITCH,X'F0'       SAY WE FOUND ONE
         MVC   JOBNAME,CHKEY      MOVE IN JOBNAME FROM CSCB
         MVC   PROCNAME,CHCLS     MOVE IN PROCNAME FROM CSCB
         MVC   STEPNAME,=CL8'TSO ' MOVE IN STEPNAME FROM CSCB
         B     GETREST             KEEP GOING
NOTTSO   MVI   SWITCH,X'F0'       SAY WE FOUND ONE
         MVC   JOBNAME,CHCLS      MOVE IN JOBNAME FROM CSCB
         MVC   PROCNAME,CHKEY     MOVE IN PROCNAME FROM CSCB
         MVC   STEPNAME,CHPROCSN  MOVE IN STEPNAME FROM CSCB
GETREST  LA    R3,1(R3)           BUMP COUNT OF JOBS/STC
         BAL   R6,COMPTIME        GO GET STEP/CPU TIME
*                                   AND MEMORY STATUS
         LA    R0,BUFFERL
         LA    R1,BUFFER
         BAL   LINKREG,PUTMSG     SHOVEL IT OUT
         MVI   BUFFER,C' '        AND CLEAR IT OUT
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
*
NEXTONE  BCT   R5,DOIT            CHECK COUNT
         B     DOJOBS             NO MORE..SPLIT
DOIT     LA    R9,4(0,R9)         INCR INTO ASVT
         L     R8,0(0,R9)         LOAD ASCB ADDR
         LTR   R8,R8              END OF ASCBS?
         BZ    DOJOBS             YES->EXIT
         TM    0(R9),X'80'        ASID ASSIGNED?
         BO    NEXTONE            NO-> TRY AGAIN.
         B     LOOP1              YES->SEE IF WE LIKE IT
         EJECT
*
* NOW WE HAVE DISPOSED OF THE STC IN THE SYSTEM,
*
*  WE MUST GO BACK THRU THE ASCBS AND LOOK FOR 'REAL' JOBS...
*
*
DOJOBS   L     R11,CVTPTR         (R11)=ADDR CVT
         L     R9,CVTASVT         (R9)= ADDR ASVT
         USING ASVT,R9
         L     R5,ASVTMAXU        (R5)=MAX NUMB OF ASCB ENTRIES
         LA    R5,2(R5)              +2 SO WE CAN SCAN ENTIRE ASVT..
         LA    R9,ASVTFRST-4      (R9)= ADDR-4 OF FIRST ASCB ENTRY
         DROP  R9
         B     NEXTPLS            GO GET ASCB
*
* LOOP THROUGH ALL ASCBS
*
LOOP2    L     R10,ASCBCSCB       LOAD CSCB ADDR
         USING CSCB,R10
CHKCSCB1 TM    CHTRKID,CHINITID   IS IT AN INIT?
         BNO   NEXTPLS            ->NO GO GET ANOTHER ASCB
         L     R4,ASCBJBNI        GET PTR TO JOBNAME
         LTR   R4,R4              IS IT A JOB?
         BZ    NEXTPLS            NOPE->DRY INIT..GO GET ANOTHER
*
* HERE WE GET  SNEAKY..A HONEST TO GOD JOB'S CSCB IS NOT POINTED TO
*   BY ASCBCSCB, BUT INSTEAD, ASCBJBNI (JOBNAME) REALLY POINTS TO
*   THE  CHKEY IN THE CSCB FOR THE JOB. WE'LL GET OUR GOODIES
*   IN THE INDIRECT ROUTE........
*
         DROP  R10
         USING CSCB,R4
         S     R4,=F'8'           ADJUST FOR SNEAKINESS..
         MVC   JOBNAME,CHKEY      MOVE IN JOBNAME
         MVC   PROCNAME,CHSTEP    MOVE IN STEPNAME INVOK PROC
         MVC   STEPNAME,CHPROCSN  MOVE IN STEPNAME OF PROC
         DROP  R4
         USING CSCB,R10           PUT BACK ADDRESSABILITY TO
*                                  'REAL' CSCB..
         LA    R3,1(R3)           BUMP COUNT OF JOBS/STC
         BAL   R6,COMPTIME        GO GET STEP/CPU TIME
*                                   AND MEMORY STATUS
         LA    R0,BUFFERL
         LA    R1,BUFFER
         BAL   LINKREG,PUTMSG     SHOVEL IT OUT
         MVI   BUFFER,C' '        AND CLEAR IT OUT
         MVC   BUFFER+1(L'BUFFER-1),BUFFER
*
NEXTPLS  BCT   R5,DOIT1           CHECK COUNT
         B     CHKFIN             NO MORE..SPLIT
DOIT1    LA    R9,4(0,R9)         INCR INTO ASVT
         L     R8,0(0,R9)         LOAD ASCB ADDR
         LTR   R8,R8              END OF ASCBS?
         BZ    CHKFIN             YES->EXIT
         TM    0(R9),X'80'        ASID ASSIGNED?
         BO    NEXTPLS            NO-> TRY AGAIN.
         B     LOOP2              YES->SEE IF WE LIKE IT
*
CHKFIN   CLC   BUFFER(8),=CL8' '  ANYTHING TO WRITE?
         BE    CLEANUP            NO-> SPLIT
         LA    R0,BUFFERL
         LA    R1,BUFFER
         BAL   LINKREG,PUTMSG     SHOVEL IT OUT
         EJECT
CLEANUP  TM    SWITCH,X'F0'       DID WE POKE ANYTHING
         BZ    NOOUTPUT           NO..GRIPE AND SPLIT
         B     $$EOJ              RETURN
         SPACE 2
NOOUTPUT LA    R0,GRIPEL
         LA    R1,GRIPE
         BAL   LINKREG,PUTMSG     SHOVEL IT OUT
         B     $$EOJ
*
         EJECT
*
*  LOCAL  SUBROUTINE TO CALC JOB TIME AND CPU TIME.
*       AND GEN SWAP REASON CODES/MEMORY STATUS
*
*  ENTER  WITH BAL R6,COMPTIME  (ALL REGS PRESERVED)
*
*
*   COMPUTE ELAPSED TRANSACTION TIME (JOB TIME FOR BATCH)
*
*
COMPTIME STM   R2,R5,SAVEREGS    SAVE WORK REGS
         SPACE 1
ELAPSED  L     R2,RMCTPTR        POINTER TO THE RMCT.
         L     R2,X'7C'(,R2)     PICK UP TIME OF DAY FROM RMCT.  (SU)
         L     R3,ASCBOUCB       GET ADDR OF OUCB FOR USER
         S     R2,72(,R3)        SUBTRACT TRANSACTION START TIME.(SU)
         SRDL  R2,32             MOVE INTO R5 FOR DIVIDE.
         D     R2,=F'1024'       CONVERT TO SECONDS.
         SR    R2,R2             IGNORE REMAINDER.
         D     R2,=F'3600'       DIVIDE TO GET HOURS.
         CVD   R3,WRKD           CONVERT HOURS -
         UNPK  JOBHH,WRKD+6(2)     - TO PRINTABLE FORMAT.
         OI    JOBHH+1,X'F0'     FIXUP SIGN BYTE.
         MVI   JOBHH+2,C':'      SEPARATOR.
         SRDL  R2,32             MOVE REMAINDER OVER FOR DIVIDE.
         D     R2,=F'60'         GET MINUTES.
         CVD   R3,WRKD           CONVERT MINUTES -
         UNPK  JOBMM(2),WRKD+6(2)  - TO PRINTABLE FORMAT.
         OI    JOBMM+1,X'F0'     FIXUP SIGN BYTE.
         MVI   JOBMM+2,C':'      SEPARATOR.
         CVD   R2,WRKD           REMAINDER IS SECONDS.
         UNPK  JOBSS(2),WRKD+6(2)  CONVERT SEC TO PRINTABLE FORMAT.
         OI    JOBSS+1,X'F0'     FIXUP SIGN.
         SPACE 2
*
*   COMPUTE TOTAL CPU TIME USED IN THE CURRENT STEP.
*
CPUSTART LM    R2,R3,ASCBEJST    LOAD ASCBEJST (CPU TASK TIME).
         SRDL  R2,12             CONVERT TO MICRO-SECONDS.
         LM    R4,R5,ASCBSRBT    LOAD ASCBSRBT (CPU SRB TIME).
         SRDL  R4,12             CONVERT TO MICROSECONDS.
         AR    R3,R5             TOTAL CPU TIME (LOW ORDER).
         BNO   CPULBL1           BRANCH IF NO OVERFLOW ON ADD.
         A     R2,=F'1'          OTHERWISE, ADD 1 TO HIGH ORDER.
CPULBL1  AR    R2,R4             TOTAL CPU TIME (HIGH ORDER).
         D     R2,=F'100'        DIVIDE TO GET SECONDS.
         LTR   R3,R3             CHK TO SEE IF ANYTHING IS THERE
         BNM   CPULBL3           BRANCH IF RESULT MAKES SENSE.
         LA    R3,0              OTHERWISE, SET THE VALUE TO ZERO.
CPULBL3  CVD   R3,WRKD           *
         MVC   CPUTIME,=X'20202021204B2020' *
         ED    CPUTIME-1(9),WRKD+3 *
         EJECT
*
***********************************************************************
*
*        SWAP  REASON CODE (R8=ASCB,R5=OUCB,R2-6=WORK)
*
***********************************************************************
         L     R5,ASCBOUCB        GET ADDR OF OUCB
         USING OUCB,R5
SRCSTART SR    R2,R2              PREPARE FOR IC INSTRUCTION.     V2M0
         IC    R2,OUCBSRC         LOAD SU7 SWAP REASON CODE.      V2M0
         SLL   R2,2               MULTIPLY BY FOUR FOR OFFSET     V2M0
         LA    R2,SRCTABLE(R2)    POINT TO CORRECT ENTRY.         V2M0
         MVC   MEMSTAT2,0(R2)     MOVE IN SWAP REASON CODE.       V2M0
SRCEND   DS    0H                 LABEL.
         SPACE 2
***********************************************************************
*
*        FIND  MEMORY POSITION (R8=ASCB,R5=OUCB,R2-6=WORK)
*
***********************************************************************
QLCSTART MVC   MEMSTAT1,=CL2'IN'  DEFAULT POSITION IS SWAPPED-IN. V2M0
         TM    OUCBSFL,OUCBNSW    SEE IF NON-SWAPPABLE MEMORY.    V2M0
         BZ    QLCLBL1C           BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'NS'  MOVE IN NON-SWAPPABLE INDICATIONV2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.
QLCLBL1C TM    OUCBSFL,OUCBPVL    SEE IF PRIVILEDGED STATUS.      V2M0
         BZ    QLCLBL1            BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'PR'  MOVE IN PRIVILEDGED INDICATION. V2M0
*                                 BUT CONTINUE IN CASE SWAPPED-OUT.
QLCLBL1  TM    OUCBQFL,OUCBOFF    TEST FOR WAIT QUEUE.            V2M0
         BZ    QLCLBL2            BRANCH IF NOT.
         MVC   MEMSTAT1,=C'WT'    INDICATE WAIT STATUS.           V2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.       V2M0
QLCLBL2  TM    OUCBQFL,OUCBOUT    TEST FOR OUT QUEUE.             V2M0
         BZ    QLCLBL3            BRANCH IF NOT.
         MVC   MEMSTAT1,=CL2'S '  INDICATE OUT STATUS.            V2M0
         B     QLCEND             FINISHED FOR THIS MEMORY.
QLCLBL3  TM    OUCBQFL,X'E0'      CHECK MISCELLANEOUS BITS.       V2M0
         BZ    QLCEND             ASSUME MEMORY IS SWAPPED-IN.
         MVC   MEMSTAT1,=CL2'<>'  INDICATE TRANSITIONING STATUS.
QLCEND   DS    0H                 LABEL.
         SPACE 2
         LM    R2,R5,SAVEREGS    RESTORE REGISTERS
         BR    R6                AND RETURN..
         EJECT
*.....................................................................*
*        LOCAL SUBROUTINE FOR IO TO TSO USER                         *
*.....................................................................*
         SPACE
*
* PRINT MESSAGE TO TERMINAL POINTED TO BY R1
*
*    BAL  LINKREG,PUTMSG
*
PUTMSG   DS    0H
         CLI JOBNAME,X'C1'
         BLR LINKREG
         CLI   JOBFTSO,C'O'
         BNE   CH2
         CLC   STEPNAME,=CL8'TSO'
         BNER  LINKREG
CH2      DS    0H
         CLC   LIMIT,=CL8' '
         BE    ADDIT
         L     2,LIMITL
         BCTR  2,0
         CLC   LIMIT(*-*),JOBNAME
         EX    2,*-6
         BNER  LINKREG
ADDIT    TBADD TABLE,ORDER='ORDER',MF=E
         BR    LINKREG
         EJECT
*.....................................................................*
*        CONSTANTS                                                    *
*.....................................................................*
         SPACE 2
SRCTABLE DC    C'    TPUTTGETLONGPGS<RSS<WAITRQSWDENQEXCHSWAP'
*                0...1...2...3...4...5...6...7...8...9...A...
         SPACE 2
**********************************************************************
* SWAP REASON CODES - TWO BYTES PER ENTRY:
*
*      CODE    DESCRIPTION
*      ----    -------------------------------------------------------
*       TPUT   TERMINAL OUTPUT WAIT SWAP-OUT.
*       TGET   TERMINAL INPUT WAIT SWAP-OUT.
*       LONG   LONG WAIT CAUSED SWAP-OUT.
*       PGS<   AUXILIARY STORAGE (PAGING SPACE) SHORTAGE SWAP-OUT.
*       RSS<   REAL STORAGE PAGEABLE POOL SHORTAGE SWAP-OUT.
*       WAIT   MSO DETECTED WAIT SWAP-OUT.
*       RQSW   REQSWAP SYSEVENT CAUSED SWAP-OUT.
*       DENQ   CAP ENQ EXCHANGE SWAP-OUT.
*       EXCH   CAP EXCHANGE SWAP BASED UPON RECOMMENDATION VALUES.
*       SWAP   CAP UNILATERAL SWAP-OUT.
**********************************************************************
         SPACE 2
DOTS     DC    C'..'
JOBS     DC    C' JOBS '
INITIAT  DC    C' INITIATORS'
CSWITCH  DC    XL1'00'
CWRKD    DC    D'0'
         SPACE 2
* TERMINAL OUTPUT MESSAGES
MSGH     DC    C'                  SADSC DISPLAY ACTIVE'
MSGL     EQU   *-MSGH
         SPACE 2
*               XXXXXXXX XXXXXXXX XXXXXXXX XX XXXX XX:XX:XX NNNNN.NN
HEADING  DC    C'JOBNAME  STEPNAME PROCSTEP STATUS STEP-TIME STEP-CPU SX
               EC'
HEADINGL EQU   *-HEADING
         SPACE 2
GRIPE    DC    C'**NO INITIATORS OR JOBS RUNNING**'
GRIPEL   EQU   *-GRIPE
         SPACE 2
         DS    0F
MEMSIZE  DC    AL1(0),AL3(DSECTL)
         EJECT
*.....................................................................*
*        LITERALS                                                     *
*.....................................................................*
         SPACE 2
         LTORG
         EJECT
*.....................................................................*
*        VARIABLES                                                    *
*.....................................................................*
         SPACE 2
VARYABL  DSECT
SAVEAREA DS    18F
BINIT    DS    0D
RMCTPTR  DS    F
SWITCH   DS    X
WRKD     DS    D
SAVEREGS DS    4F
         SPACE 2
* TERMINAL OUTPUT MESSAGES
MSG2     DS    0CL31
DDOTS    DS    CL2
NJOBS    DS    CL6
DJOBS    DS    CL6
NINIT    DS    CL6
DINITIAT DS    CL11
MSG2L    EQU   *-MSG2
         SPACE 2
BUFFER   DS    0CL52
JOBNAME  DS    CL8                JOBNAME
         DS    CL1                FILLER
PROCNAME DS    CL8                STEPNAME  OR STEPNAME INVOKING PROC
         DS    CL1
STEPNAME DS    CL8                STEPNAME FOR PROCS
         DS    CL1
MEMSTAT1 DS    CL2
         DS    CL1
MEMSTAT2 DS    CL4                MEMORY STATUS = SWAPPED NS
         DS    CL1
JOBHH    DS    CL2                FOR JOB  TIME HH:MM:SS
         DS    CL1
JOBMM    DS    CL2
         DS    CL1
JOBSS    DS    CL2
         DS    CL1
CPUTIME  DS    CL8                FOR CPUTIME NNNNN.NN SECONDS
BUFFERL  EQU   *-BUFFER
JOBFTSO  DS    C
LIMIT    DS    CL8
LIMITL   DS    F
VCOPYLEN DS    F                   VCOPY LENGTH FIELD
JOBPTSO  DS    C                   TSO USERS?
TABLE    DS    CL8                 ISPF TABLE NAME
         ISPF  PARMS               SPF WORKING STORAGE
         SPACE 2
         DS    0D
EINIT    EQU   *-BINIT
DSECTL   EQU   *-VARYABL
*
         EJECT
CVT      DSECT
         CVT   SYS=VMS,TSO=YES,DSECT=YES
         EJECT
CSCB     DSECT
         IEECHAIN
         EJECT
         IHAASCB
         EJECT
         IHAASVT
         EJECT
BIT0     EQU   128
BIT1     EQU   64
BIT2     EQU   32
BIT3     EQU   16
BIT4     EQU   8
BIT5     EQU   4
BIT6     EQU   2
BIT7     EQU   1
OUCB     DSECT
OUCBNAME DC    C'OUCB' -           BLOCK IDENTIFICATION
OUCBFWD  DC    A(OUCB) -           SWAP CHAIN FORWARD POINTER
OUCBBCK  DC    A(OUCB) -           SWAP CHAIN BCKWARD POINTER
OUCBTMA  DC    F'0' -              TIME OF LAST ANALYSYS      @Z40BPCH
OUCBQFL  DC    B'00100000' -       SWAPPABILITY TRANSITION FLAGS
OUCBGOO  EQU   BIT0 -              TRANSITIONING OUT OF CORE
OUCBGOI  EQU   BIT1 -              TRANSITIONING INTO CORE
OUCBGOB  EQU   BIT2 -              TRANSITIONING BETWEEN STATES
OUCBOFF  EQU   BIT4 -              REQUESTING ENTER WAIT STATE
OUCBOUT  EQU   BIT5 -              REQUESTING ENTER OUT STATE
OUCBSFL  DC    B'10010100' -       SWAPOUT CONTINUATION FLAGS
OUCBNSW  EQU   BIT0 -              NON-SWAPPABLE STATUS
OUCBCTI  EQU   BIT1 -              CTL INHIBITS QUIESCE
OUCBBIB  EQU   BIT2 -              BRING IN FOR CANCEL         @Z40BPCH
OUCBINV  EQU   BIT3 -              =1 IF OUCB IS INVALID       @Z40BPCH
OUCBPVL  EQU   BIT5 -              PRIVILEGED PROGRAM RUNNING
OUCBENQ  EQU   BIT6 -              ENQ RESIDENT STATUS
OUCBSCN  EQU   BIT7 -              SWAP CHAIN TERMINATION MARK
OUCBYFL  DC    B'00000000' -       USER TYPE FLAGS
OUCBPSTE EQU   BIT0 -              POST ERROR @ZA07127
OUCBSTT  EQU   BIT1 -              START CREATED USER
OUCBLOG  EQU   BIT2 -              LOGON CREATED USER
OUCBMNT  EQU   BIT3 -              MOUNT CREATED USER
OUCBR01  EQU   BIT4 -              RESERVED                    @ZM43085
OUCBAXS  EQU   BIT5 -              AUX SHORTAGE FORCED SWAP
OUCBDTA  EQU   BIT6 -              DATA ACCUMULATION IMPACTED
OUCBFXS  EQU   BIT7 -              FIXED STORAGE FORCED SWAP   @Z40BPCH
OUCBAFL  DC    B'00000000' -       ALGORITHM STATUS FLAGS
OUCBAPG  EQU   BIT1 -              APG ALGORITHM APPLICABLE
OUCBRMA  EQU   BIT2 -              RMA ALGORITHM APPLICABLE
OUCBCPL  EQU   BIT3 -              SIGNIFICANT CPU USER FLAG
OUCBJSR  EQU   BIT4 -              JOBSELECT RECEIVED          @Z40BPCH
OUCBR02  EQU   BIT5 -              RESERVED                   @ZM43085
OUCBNWT  EQU   BIT6 -              MSO DETECTED NONSWAPPABLE WAIT
OUCBASW  EQU   BIT7 -              AUTHORIZED FOR DONTSWAP
OUCBTFL  DC    B'00000000' -       TRANSACTION STATUS FLAGS
OUCBATR  EQU   BIT0 -              TRANSACTION IN EXISTENCE
OUCBSTR  EQU   BIT1 -              TRANSACTION START PENDING
OUCBNTR  EQU   BIT2 -              TRANSACTION STOP PENDING
OUCBRTR  EQU   BIT3 -              TRANSACTION RESUME PENDING
OUCBPCH  EQU   BIT4 -              PERF GRP PERIOD CHANGE PENDING
OUCBMAR  EQU   BIT5 -              ACTIVITY RECORDING SUBTRACT FLAG
OUCBINP  EQU   BIT6 -              INITIATOR ATTACH PENDING
OUCBINC  EQU   BIT7 -              INITIATOR ATTACH CURRENT
OUCBEFL  DC    B'00000000' -       EVENT STATUS FALGS
OUCBLWT  EQU   BIT0 -              LONG WAIT STATUS
OUCBTRM  EQU   BIT1 -              TERMINAL WAIT STATUS
OUCBOWT  EQU   BIT2 -              OUTPUT TERMINAL WAIT
OUCBCIM  EQU   BIT3 -              COMPOSITE INPUT MESSAGE
OUCBNQF  EQU   BIT4 -              ENQHOLD EVENT PROCESSED
OUCBQSS  EQU   BIT5 -              QSCEST  EVENT PROCESSED
OUCBQSC  EQU   BIT6 -              QSCECMP EVENT PROCESSED
OUCBMWT  EQU   BIT7 -              MSO DETECTED WAIT STATUS
OUCBNQC  DC    HL1'0' -            NO. OF OUTSTANDING ENQHOLDS
OUCBUFL  DC    B'00000000' -       USER TYPE FLAGS             @ZM43072
OUCBJSFS EQU   BIT0 -              JOB SELECT DELAYED          @ZM43072
OUCBJSAS EQU   BIT1 -              JOB SELECT DELAYED          @ZM43072
OUCBNPG  DC    HL1'0' -            NEW PERFORMANCE GROUP NUMBER
OUCBRPG  DC    HL1'0' -            RESET PERFORMANCE GROUP NUMBER
OUCBNDP  DC    HL1'0' -            NEW ASCB DISPATCHING PRIORITY
OUCBRDP  DC    HL1'0' -            REAL DISPATCHING PRIORITY   @Z40BPCH
OUCBSPG  DC    HL1'0' -            SPECIFIED PERFORMANCE GROUP @Z40BPCH
OUCBR30  DC    HL1'0' -            RESERVED                    @Z40BPEB
OUCBR40  DC    HL1'0' -            RESERVED                    @Z40BPEB
OUCBPGP  DC    HL1'12' -           CURRENT WPGP OFFSET IN WPGD
OUCBWMG  DC    H'0' -              WPGD OFFSET IN WPGD TABLE
OUCBDMO  DC    H'0' -              OFFSET INTO DOMAIN TABLE    @Z40BPCH
OUCBDMN  DC    HL1'0'              DOMAIN NUMBER               @Z40BPCH
OUCBSRC  DC    HL1'0'              SWAP OUT REASON CODE        @Z40BPCH
OUCBSWC  DC    H'0' -              TRANSACTION SWAP COUNT
OUCBASCB DC    A(0) -              ASCB ADDRESS
OUCBIMCB DC    A(0) -              IMCB ADDRESS
OUCBTMW  DC    F'0' -              WLM INTERVAL START TIME
OUCBWMS  DC    F'0' -              INTERVAL SERVICE ACCUMULATOR
OUCBCPU  DC    F'0' -              INTERVAL CPU SERVICE ACCUM  @Z40BPCH
OUCBIOC  DC    F'0' -              INTERVAL I/O SERVICE ACCUM  @Z40BPCH
OUCBMSO  DC    F'0' -              INTERVAL MSO SERVICE ACCUM  @Z40BPCH
OUCBTMS  DC    F'0' -              TIME OF LAST SWAP ACTION
OUCBTMO  DC    F'0' -              TRANSACTION START TIME
OUCBPSO  DC    H'0' -              PAGES SWAPPED AT LAST SWAP-OUT
OUCBWSS  DC    H'0' -              WORKING SET SIZE AT SWAP-IN
OUCBACT  DC    A(0) -              ACTION QUEUE FORWARD POINTER
OUCBCSW  DS    0F -                COMPARE AND SWAP FIELD NAME
OUCBACN  DC    2B'00000000' -      DEFERRED ACTION FLAGS
OUCBCFL  DC    B'00000000' -       MULTIPROCESS CONDITION FLAGS
OUCBRDY  EQU   BIT0 -              USERRDY EVENT RECEIVED
OUCBRSM  EQU   BIT1 -              RSM SERVICE OUTSTANDING
OUCBCMRV DC    F'0' -              COMPOSITE RECOM VALUE       @Z40BPCH
OUCBWMR  DC    F'0' -              WLM RECOMMENDATION VALUE    @Z40BPCH
OUCBIRV  DC    H'0' -              IOM RECOMMENDATION VALUE    @Z40BPCH
OUCBCRV  DC    H'0' -              CPM RECOMMENDATION VALUE    @Z40BPCH
OUCBIOR  DC    H'0' -              I/O USAGE PROFILE
OUCBR03  DC    H'0' -              RESERVED                    @ZM43085
OUCBTMP  DC    F'0' -              PERF GRP PERIOD STARTING TIME
OUCBR04  DC    H'0' -              RESERVED                    @ZM43085
OUCBR05  DC    H'0' -              RESERVED                    @ZM43085
OUCBPSS  DC    D'0' -              CPU PAGE SECONDS            @Z40BPCH
OUCBPS1  EQU   OUCBPSS -           HIGH WORD PAGE SECONDS      @Z40BPCH
OUCBPS2  EQU   OUCBPSS+4 -         LOW  WORD PAGE SECONDS      @Z40BPCH
OUCBPST  DC    F'0' -              TIME OF LAST WORKING SET CHANGE
*                                                              @Z40BPCH
OUCBTCP  DC    F'0' -              TIME OF CPU USAGE EVALUATION
*                                                              @Z40BPCH
OUCBTIO  DC    F'0' -              TIME OF I/O USAGE EVALUATION
*                                                              @Z40BPCH
OUCBNDS  DC    H'1' -              NUM OUTSTANDING DONTSWAPS   @Z40BPEB
OUCBR90  DC    H'0' -              RESERVED                    @Z40BPEB
OUCBEND  DS    0D -                END OF OUCB
OUCBLEN  EQU   OUCBEND-OUCB -      LENGTH OF OUCB
R0       EQU   0                   REGISTER 0.
R1       EQU   1                   REGISTER 1.
R2       EQU   2                   REGISTER 2.
R3       EQU   3                   REGISTER 3.
R4       EQU   4                   REGISTER 4.
R5       EQU   5                   REGISTER 5.
R6       EQU   6                   REGISTER 6.
R7       EQU   7                   REGISTER 7.
R8       EQU   8                   REGISTER 8.
R9       EQU   9                   REGISTER 9.
R10      EQU   10                  REGISTER 10.
R11      EQU   11                  REGISTER 11.
R12      EQU   12                  REGISTER 12.
R13      EQU   13                  REGISTER 13.
R14      EQU   14                  REGISTER 14.
R15      EQU   15                  REGISTER 15.
         END   JOB1LIST
