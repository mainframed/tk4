DSNI     TITLE 'RETURN DATASET CHARACTERISTICS TO ISPF'          *LBD*
*--------------------------------------------------------------------*
*                                                                    *
*        MODIFIED BY L. DYCK TO RETURN DSNAME INFORMATION        *LBD*
*        TO ISPF VARIABLES.                                      *LBD*
*                                                                *LBD*
*        THIS  WAS ORIGINALLY THE LISTSPC TSO COMMAND FROM       *LBD*
*        THE CBT TAPE FILE 300                                   *LBD*
*                                                                    *
*   DSNINFO IS INVOKED AS FOLLOWS :                              *LBD*
*                                                                    *
*        ISPEXEC PGM(DSNINFO) PARM(DSN-VARIABLE)                 *LBD*
*                                                                    *
*        WHERE  DSN-VARIABLE IS THE ISPF VARIABLE CONTAINING     *LBD*
*        THE DSNAME TO BE ANALYZED.                              *LBD*
*                                                          *LBD 12/83*
*        IF THE DSNAME IS NOT FULLY QUALIFIED, THAT IS     *LBD 12/83*
*        IN QUOTES, THEN THE ISPF ZPREFIX IS APPENDED TO   *LBD 12/83*
*        THE BEGINNING OF THE DSNAME SO THAT THE DYNAMIC   *LBD 12/83*
*        ALLOCATION WILL BE SUCCESSFUL.                    *LBD 12/83*
*                                                          *LBD 12/83*
*                                                                *LBD*
* ISPF VARIABLE NAMES:                                           *LBD*
*                                                                *LBD*
*              ALCYL                   # ALLOCATED CYL'S   *LBD 12/83*
*              ATRECFM                 RECORD FORMAT FOR ATTR    *LBD*
*              BALC                    # BLK'S ALLOCATED    *LBD 03/85*
*              BLKSIZE                 BLOCK SIZE                *LBD*
*              BUSE                    # BLK'S USED         *LBD 03/85*
*              CREDT                   CREATION DATE             *LBD*
*              DSORG                   DATA SET ORGANIZATION     *LBD*
*              DEVTYPE                 UNIT NAME FOR DATASET     *LBD*
*              DIRALLOC                # ALLOC DIR BLOCKS  *LBD 11/83*
*              DIRUSE                  # USED DIR BLOCKS   *LBD 11/83*
*              EX                      # OF EXTENTS              *LBD*
*              GCREDT                  GREGORIAN CREDT     *LBD 11/83*
*              GUSEDT                  GREGORIAN USEDT     *LBD 11/83*
*              KEYLEN                  KEY LENGTH                *LBD*
*              LRECL                   LOGICAL RECORD LENGTH     *LBD*
*              MEMBER                  MEMBER NAME (OR BLANK)    *LBD*
*              RECFM                   RECORD FORMAT             *LBD*
*              RKP                     RELATIVE KEY POSITION     *LBD*
*              SCALO                   SECONDARY ALLOCATION      *LBD*
*              TRALC                   ALLOCATED TRACKS          *LBD*
*              TRUSE                   USED TRACKS               *LBD*
*              UNIT                    ALLOCATION UNIT TYPE      *LBD*
*              USEDT                   LAST USE DATE             *LBD*
*              VOLSER                  VOLSER OF DATASET         *LBD*
*              USCYL                   # USED CYL'S        *LBD 12/83*
*                                                                *LBD*
*        NOTE: IF A MEMBER NAME IS SPECIFIED THE DSORG     *LBD 01/84*
*              WILL REMAIN PO.  BUT VARIABLE MEMBER WILL   *LBD 01/84*
*              CONTAIN THE MEMBER NAME .                   *LBD 01/84*
*                                                          *LBD 02/84*
*        RETURN CODES:            0 = OK                   *LBD 02/84*
*                                 99 = DATASET NOT FOUND   *LBD 02/84*
*                                                          *LBD 02/84*
*                                                                    *
*        ADDED CHECK FOR VSAM DSORG FOR DSORG= ONLY         *LBD 02/84*
*        ADDED BALC VARIABLE                                *LBD 03/85*
*--------------------------------------------------------------------*
         EJECT                                             *LBD 11/83*
         MACRO
         RCPDINC &L1
         GBLA  &DTUO,&DTUPO
         GBLC  &DYNP
         AIF   ('&L1' EQ '').T2
         ST    R15,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS
         LA    R15,&L1.(R15)           BUMP TEXT UNIT PTR TO NEXT SLOT
&DTUPO   SETA  &DTUPO+4
&DTUO    SETA  &DTUO+&L1
         MEXIT
.T2      ST    R14,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS
&DTUPO   SETA  &DTUPO+4
         MEND
         MACRO
         RCPDS
         GBLB  &RCPDSBR
         GBLC  &RCPWKDS,&RCPWKCS,&RCPDS
         AIF   ('&RCPDS' NE '').RESUME
&RCPDS   SETC  '&SYSECT'
         AIF   ('&RCPWKDS' EQ '').CSECT
&RCPWKDS DSECT                         ENTER WORKAREA DSECT
         MEXIT
.CSECT   AIF   ('&RCPWKCS' EQ '').BRANCH
&RCPWKCS CSECT                         ENTER WORKAREA CSECT
         MEXIT
.RESUME  AIF   (&RCPDSBR).BRTO
&RCPDS   CSECT                         RESUME PROGRAM CSECT
&RCPDS   SETC  ''
         MEXIT
.BRANCH  ANOP
&RCPDS   SETC  'RCP&SYSNDX'
&RCPDSBR SETB  1
         B     &RCPDS                  BRANCH AROUND CONSTANTS
         MEXIT
.BRTO    ANOP
&RCPDS   DS    0H
&RCPDSBR SETB  0
&RCPDS   SETC  ''
         MEND
         MACRO
&NAME    S99FAIL &RB=(R14),&RC=(R15),&CPPL=,&MF=G,&CP=
         GBLB  &RCPCPPL(2)             CP INDICATOR
         GBLC  &RCPPRE
         LCLB  &GEN
         LCLC  &C
&NAME    DS    0H
         AIF   ('&MF(1)' EQ 'G').GEN
         AIF   ('&MF(1)' EQ 'E').EXEC
         MNOTE 4,'&MF(1) IS AN INVALID MF, MF=G USED'
.GEN     LA    R1,FAIL&SYSNDX     LOAD PLIST ADDRESS
&GEN     SETB  1
         AGO   .L
.EXEC    AIF   ('&MF(2)' NE '').LISTOK
         MNOTE 8,'LIST ADDRESS NOT SPECIFIED'
         MEXIT
.LISTOK  AIF   ('&MF(3)' EQ '').TMF2
&MF(3)   EQU   24                      LENGTH OF PARAMETER LIST
.TMF2    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').L
         AIF   ('&MF(2)'(1,1) EQ '(').REG
         LA    R1,&MF(2)          LOAD DAIRFAIL PARAM LIST ADDRESS
         AGO   .L
.REG     ANOP
&C       SETC  '&MF(2)'(2,K'&MF(2)-2)
         LR    R1,&C              LOAD DAIRFAIL PARAM LIST ADDR
.L       AIF   ('&RB'(1,1) EQ '(').RBR
         AIF   ('&RB' NE '').RBA
         MNOTE 8,'REQ BLOCK ADDRESS NOT SPECIFIED'
         MEXIT
.RBR     ST    &RB(1),0(R1)       STORE S99 RB ADDRESS
         AGO   .RC
.RBA     LA    R14,&RB            LOAD ADDRESS OF REQ BLOCK
         ST    R14,0(R1)          AND STORE IN PLIST
.RC      AIF   ('&RC'(1,1) EQ '(').RCR
         LA    R14,&RC            LOAD ADDRESS OF RET CODE
         ST    R14,4(R1)          AND STORE IN PLIST
         AGO   .EFF02
.RCR     ANOP
.GRC     LA    R14,20(R1)         LOAD ADDR RET CODE FLD
         ST    &RC(1),0(R14)      STORE RET CODE
         ST    R14,4(R1)          AND STORE ITS ADDRESS
.EFF02   LA    R14,=A(0)          LOAD ADDR OF FULLWORD OF 0
         ST    R14,8(R1)          STORE IT.
         AIF   ('&CP' EQ 'YES' OR &RCPCPPL(1)).CPID
         LA    R14,=X'8032'       LOAD ADDRESS OF CALLERID
         ST    R14,12(R1)          AND STORE IT
         XC    16(4,R1),16(R1)    CLEAR CPPL POINTER
         AGO   .GO
.CPID    LA    R14,=Y(50)         LOAD ADDRESS OF CALLERID
         ST    R14,12(R1)         AND STORE IT
         AIF   ('&CPPL' EQ '').DCPPL
         AIF   ('&CPPL'(1,1) EQ '(').RCPPL
         LA    R14,&CPPL          LOAD CPPL ADDRESS
         ST    R14,16(R1)          AND STORE IT
         AGO   .GO
.DCPPL   MVC   16(4,R1),&RCPPRE.CPPL MOVE IN CPPL ADDRESS
         AGO   .GO
.RCPPL   ST    &CPPL(1),16(R1)    STORE ADDRESS OF CPPL
.*       LINK  EP=IKJEFF18         MODIFIED BY BZFONT
.GO      ANOP
         AIF   (NOT &GEN).EXIT
         SPACE 1
         RCPDS
&C SETC 'FAIL&SYSNDX'
&C       DS    6F             RESERVE SPACE FOR PARAM LIST
         RCPDS
.EXIT    MEND
         MACRO
         RCPFDDN &DDN
         GBLC &DYNP
         SPACE
***********************************************************************
**        FREE DDNAME TEXT UNIT                                      **
***********************************************************************
         AIF   ('&DDN'(1,1) EQ '''').Q
         AIF   ('&DDN'(K'&DDN,1) EQ '/').B
         RCPSR2
         AIF   ('&DDN'(1,1) EQ '(').R
         L     R14,&DDN                LOAD ADDRESS OF DDNAME
         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME
         AGO   .STH
.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME
         LH    R2,4&DDN                LOAD LENGTH OF DDNAME
.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE DDNAME
         MVI   S99TUKEY+1,DUNDDNAM     MOVE IN DDNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 14
         MEXIT
.Q       RCPBTU DUNDDNAM,1,&DDN
         MEXIT
.B       RCPTUBFR DUNDDNAM,14,&DDN
         MEND
         MACRO
         RCPDISP &DISP
         LCLA  &I
         LCLB  &B(4)
         AIF   ('&DISP(1)' EQ '').TD2
         SPACE
***********************************************************************
**     DATA SET INITIAL STATUS                                       **
***********************************************************************
&B(1)    SETB  ('&DISP(1)' EQ 'SHR')
&B(2)    SETB  ('&DISP(1)' EQ 'NEW')
&B(3)    SETB  ('&DISP(1)' EQ 'MOD')
&B(4)    SETB  ('&DISP(1)' EQ 'OLD')
         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK1
         MNOTE 8,'&DISP(1) IS INVALID, DISP=SHR USED'
&B(1)    SETB  1
.OK1     ANOP
&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)
         MVC   S99TUKEY(8),=Y(DALSTATS,1,1,X'0&I.00')
         RCPDINC 8
.TD2     AIF   ('&DISP(2)' EQ '').TD3
         SPACE
***********************************************************************
**    DATA SET NORMAL DISPOSITION                                    **
***********************************************************************
&B(1)    SETB  ('&DISP(2)' EQ 'KEEP')
&B(2)    SETB  ('&DISP(2)' EQ 'DELETE')
&B(3)    SETB  ('&DISP(2)' EQ 'CATLG')
&B(4)    SETB  ('&DISP(2)' EQ 'UNCATLG')
         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK2
         MNOTE 8,'&DISP(2) IS INVALID, DISP=(,KEEP) USED'
&B(1)    SETB  1
.OK2     ANOP
&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)
         MVC   S99TUKEY(8),=Y(DALNDISP,1,1,X'0&I.00')
         RCPDINC 8
.TD3     AIF   ('&DISP(3)' EQ '').EXIT
         SPACE
***********************************************************************
**   DATASET CONDITIONAL DISPOSITION                                 **
***********************************************************************
&B(1)    SETB  ('&DISP(3)' EQ 'KEEP')
&B(2)    SETB  ('&DISP(3)' EQ 'DELETE')
&B(3)    SETB  ('&DISP(3)' EQ 'CATLG')
&B(4)    SETB  ('&DISP(3)' EQ 'UNCATLG')
         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK3
         MNOTE 8,'&DISP(3) IS INVALID, DISP=(,,KEEP) USED'
&B(1)    SETB  1
.OK3     ANOP
&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)
         MVC   S99TUKEY(8),=Y(DALCDISP,1,1,X'0&I.00')
         RCPDINC 8
.EXIT    MEND
         MACRO
         RCPSR2 &A
         GBLB  &RCPSR2
         GBLC  &DYNP
         LCLC  &C
.*   TO SAVE REG 2 IN REG 0 FOR ALLOC INNER MACROS FIRST TIME ONLY
.*    IF OPERAND SUPPLIED AND SAVE DONE, RESTORES REG 2 AND
.*    GENERATES MOVE INSTRUCTION FOR EXECUTE
         AIF   ('&A' NE '').UNSAVE
         AIF   (&RCPSR2).EXIT
&RCPSR2  SETB  1
         LR    R0,R2                   SAVE CONTENTS OF REGISTER 2
         MEXIT
.UNSAVE  AIF   (NOT &RCPSR2).EXIT
         B     *+10                    SKIP NEXT INSTRUCTION
&C       SETC  '&DYNP.MVC'
&C       MVC   S99TUPAR(0),0(R14)      EXECUTED MOVE
         LR    R2,R0                   RESTORE CONTENTS OF REGISTER 2
&RCPSR2  SETB  0
.EXIT    MEND
         MACRO
&NAME    DYNSPACE &TYPE
.*
.*    THIS IS AN INNER MACRO TO ALLOC/FREE.
.*    IT IS CALLED TO   A) NAME AN AREA FOR THE PARMLIST
.*                      B) LOG THE VARIOUS AMOUNTS NEEDED BY
.*                         EACH, REMEMBERING THE LARGEST.
.*                      C) GENERATING A DS FOR THE LARGEST AMOUNT.
.*    THE FIRST TWO FUNCTIONS ARE INVOKED BY ALLOC/FREE MACROS ONLY,
.*    AND THE THIRD IS USED BY THE PROGRAMMER, EITHER EXPLICITLY,
.*    OR BY BEGINWKA, IF THE LATTER IS USED.
.*
.*     TO INVOKE THE NAMING FUNCTION, ALLOC/FREE GENERATE
.*     NAME DYNSPACE
.*     NOTE. THE NAMING OPERATION ONLY GENERATES A NAME ON THE
.*     FIRST CALL IN THE ASSEMBLY. THE NAME REMAINS THE SAME UNTIL
.*     DYNSPACE IS CALLED TO EXPAND INTO A DS.
.*
.*     THE SECOND FUNCTION IS INVOKED BY THE MACRO CALL
.*          DYNSPACE ADD
.*     (NO NAME FIELD AND ONE OPERAND)
.*     IT USES THE GLOBAL VARIABLES &DTUO AND &DTUPO TO CALCULATE
.*     THE SPACE FOR THIS REQUEST, AND UPDATES &DYNSPQ ONLY IF THE
.*     CURRENT REQUEST IS FOR A GREATER AMOUNT
.*
.*     THE THIRD FUNCTION IS INVOKED BY CALLING DYNSPACE WITH NO
.*     NAME OR OPERAND FIELD.
.*     THIS EXPANDS INTO A DEFINE STORAGE, CLEARS THE DYNSPACE NAME
.*     GLOBAL SETC, AND THE &DYNSPQ GLOBAL SETA.
.*     THUS, THE MACRO IS SERIALLY REUSABLE IN ALL FUNCTIONS.
.*
         GBLA  &DYNSPQ,&DTUO,&DTUPO,&RCPDYN
         GBLC  &DYNP,&DYNSP
         LCLA  &I
         AIF   ('&NAME' NE '').NAME
         AIF   ('&TYPE' EQ '').ALLOC
.*   THE ACCUMULATE FUNCTION IS REQUIRED
&I       SETA  24+&DTUO+&DTUPO         GET AMOUNT FOR THIS REQUEST
         AIF   (&I LE &DYNSPQ).EXIT    IF CURRENT < MAX, EXIT
&DYNSPQ  SETA  &I                      ELSE UPDATE CURRENT MAXIMUM
         MEXIT
.NAME    AIF   ('&DYNSP' NE '').EXIT   IF NAME ALREADY EXISTS, EXIT
&DYNSP   SETC  'DYNSP&RCPDYN'           ELSE GENERATE A NAME
.EXIT    MEXIT
.ALLOC   AIF   ('&DYNSP' EQ '').EXIT
*
**     RESERVE SPACE FOR ALLOC/FREE MACRO WORK AREA
*
&DYNSP   DS    0F,CL&DYNSPQ            RESERVE SPACE
&DYNSP   SETC  ''                      SET MAX QUANTITY TO 0
&DYNSPQ  SETA 0
         MEND
         MACRO
         RCPDDNRT
         SPACE 1
***********************************************************************
**    DDNAME RETURN TEXT UNIT                                        **
***********************************************************************
         MVI   S99TUKEY+1,DALRTDDN     SET RETURN DDNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,8            SET LENGTH FIELD
         MVC   S99TUPAR(8),=CL8' '     INITIALIZE FIELD TO BLANKS
         RCPDINC 14
         MEND
         MACRO
         RCPDSN &DSN,&MEM
         LCLC  &MEMBER
         GBLC  &DYNP
         SPACE
***********************************************************************
**   BUILD THE DSNAME TEXT UNIT                                      **
***********************************************************************
         AIF   ('&DSN'(1,1) EQ '''').Q
         AIF   ('&DSN'(K'&DSN,1) EQ '/').BD
         AIF   ('&DSN'(1,1) EQ '(').REG
         AIF   ('&DSN'  EQ '*').TERM
         RCPSR2
         L     R14,&DSN                LOAD ADDRESS OF DSNAME
         LH    R2,&DSN+4               LOAD LENGTH OF DSNAME
.STH     STH   R2,S99TULNG             STORE DSNAME LENGTH
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE DSNAME
         MVI   S99TUKEY+1,DALDSNAM     MOVE IN DSNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 50
         AGO   .TMEMBER
.REG     L     R14,0&DSN               LOAD ADDRESS OF DSNAME
         RCPSR2
         LH    R2,4&DSN                LOAD LENGTH OF DSNAME
         AGO   .STH
.TERM    MVI   S99TUKEY+1,DALTERM
         RCPDINC 4
         MEXIT
.BD      RCPTUBFR DALDSNAM,50,&DSN
         AGO   .TMEMBER
.Q       RCPBTU DALDSNAM,1,&DSN
.TMEMBER AIF   ('&MEM' EQ '').EXIT
         SPACE
***********************************************************************
**   BUILD THE MEMBER NAME TEXT UNIT                                 **
***********************************************************************
&MEMBER  SETC  '&MEM'
         AIF   ('&MEM' NE '*').MOK
         AIF   ('&DSN'(1,1) NE '''').MAST
         MNOTE 8,'MEMBER=* INVALID WITH QUOTED DSNAME'
         MEXIT
.MAST    ANOP
&MEMBER  SETC  '8+&DSN'
.MOK     ANOP
         AIF   ('&MEMBER'(K'&MEMBER,1) EQ '/').BM
         RCPSR2
         AIF   ('&MEMBER'(1,1) EQ '(').RM
         LH    R2,4+&MEMBER            LOAD LENGTH OF MEMBER NAME
         LTR   R2,R2                   TEST FOR ZERO
         BZ    *+30                    IF NO MEMBER, SKIP
         L     R14,&MEMBER             LOAD ADDRESS OF MEMBER
         AGO   .STHM
.RM      LH    R2,4&MEMBER             LOAD LENGTH OF MEMBER
         LTR   R2,R2                   AND TEST FOR ZERO
         BZ    *+30                    IF NO MEMBER, SKIP
         L     R14,0&MEMBER            LOAD ADDRESS OF MEMBER
.STHM    STH   R2,S99TULNG             STORE LENGTH OF MEMBER
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE IN MEMBER NAME
         MVI   S99TUKEY+1,DALMEMBR     MOVE IN MEMBER KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 14
         MEXIT
.BM      RCPTUBFR DALMEMBR,14,&MEMBER
         MEXIT
.QM      RCPBTU DALMEMBR,1,&MEMBER
.EXIT    MEND
         MACRO
&NAME    FREE  &UNALC,&DSN=,&DDN=,&MEMBER=,&DISP=,&SYSOUT=,            X
               &ERROR=,&MF=AUTO,&PREFIX=,&FILE=,&F=,&DA=,&HOLD=
         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO
         GBLA  &DTUO              OFFSET TO TEXT UNITS
         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS
         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS
         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL
         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC
         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E
         LCLC  &C,&T,&PAR
&RCPS99(1)     SETB           1
&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER
&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX
&NAME    DS    0H
         AIF   ('&PREFIX' EQ '').TMF
         AIF   (K'&PREFIX LT 4).POK
         MNOTE 4,'PREFIX TOO LONG, 1ST 4 CHARS USED'
&DYNP    SETC  '&PREFIX'(1,4)
         AGO   .TMF
.POK     ANOP
&DYNP    SETC  '&PREFIX'
.TMF     AIF   ('&MF(1)' EQ 'G').GEN
         AIF   ('&MF' NE 'AUTO').TMFE
NAME     DYNSPACE             GET NAME FOR SPACE
         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST
         USING &DYNP.DS,R1             USE GENERATED DSECT
&T       SETC  'A'
&PAR     SETC  '&DYNSP+4'
&DSECT   SETB  1
         AGO   .START
.TMFE    AIF   ('&MF(2)' NE '').E2OK
         MNOTE 4,'PLIST ADDRESS OMITTED, MF=G USED'
         AGO   .GEN
.E2OK    ANOP
&DSECT   SETB  1
         AIF   ('&MF(2)' EQ '(').RMFE
         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS
&T       SETC  'A'
&PAR     SETC  '&MF(2)+4'
         USING &DYNP.DS,R1             USE GENERATED DSECT
         AGO   .START
.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START
&PAR     SETC  '&MF(2)'(2,K'&MF(2)-2)
&T       SETC  'R'
         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS
&PAR     SETC  '4&MF(2)'
         USING &DYNP.DS,R1             USE GENERATED DSECT
         AGO   .START
.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP
&T       SETC  'A'
&PAR     SETC  '&DYNP.RB'
.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB
         USING S99RB,R15
         ST    R15,0(R1)               AND STORE IN RB POINTER
         XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST
         MVI   S99RBLN,20              MOVE IN LIST LENGTH
         MVI   S99VERB,S99VRBUN        MOVE IN VERB CODE
         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS
         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB
         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS
         USING S99TUNIT,R15
&DTUO    SETA  0
&DTUPO   SETA  0
         AIF   ('&DSN&DA' NE '').DSN
         AIF   ('&SYSOUT' NE '').SYSOUT
.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN
.TDISP   AIF   ('&DISP' NE '').DISP
.TUNALC  AIF   ('&UNALC' NE '').PERM
.THOLD   AIF   ('&HOLD' NE '').HOLD
         AGO   .SVC99
.DSN     RCPFDSN &DSN&DA,&MEMBER
         AGO   .TDDN
.SYSOUT  RCPFSYS &SYSOUT
         AGO   .TDDN
.DDN     RCPFDDN &DDN&F&FILE
         AGO   .TDISP
.DISP RCPFDISP &DISP
         AGO   .TUNALC
.PERM    RCPUNALC
         AGO   .THOLD
.HOLD    RCPFHOLD &HOLD
.SVC99   ANOP
&DTUPO   SETA  &DTUPO-4
         SPACE
         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS
         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR
         RCPSR2 UNSAVE
&DTUPO   SETA  &DTUPO+4
         AIF   (NOT &DSECT).DYNA
         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY
.DYNA    DYNALLOC
         AIF   ('&ERROR' EQ '').RESERVE
         AIF   ('&PAR' EQ '').LTR
         L&T   R14,&PAR                 LOAD REG 14 WITH ADDRESS OF RB
         AIF   (NOT &DSECT).LTR
         USING &DYNP.RB,R14            SET UP ADDRESSABILITY
.LTR     LTR   R15,R15                 TEST RETURN CODE
         BNZ   &ERROR                  BRANCH IF NON ZERO
**       NOTE.  R14 POINTS TO REQUEST BLOCK, R15 HAS RETURN CODE     **
.RESERVE AIF   (&DSECT).RESDS
         SPACE
***********************************************************************
**       RESERVE SPACE FOR DYNALLOC DATA                             **
***********************************************************************
         RCPDS
.SSP     ANOP
&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER
&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK
&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS
         AIF   (&DTUO EQ 0).DTU11
&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS
         AGO   .DTU10
.DTU11   ANOP
&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS
.DTU10   ANOP
&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED
         AIF   (&DSECT).DSP
         RCPDS
         SPACE 3
         AGO   .EXIT
.RESDS   ANOP
         AIF   ('&DYNSP' EQ '').SP3
         DYNSPACE ADD
.SP3     SPACE
&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA
         AGO   .SSP
.DSP     AIF   ('&MF(3)' EQ '').END1
&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA
.END1    ANOP
&SYSECT  CSECT
         SPACE 3
.EXIT    MEND
         MACRO
&NAME    ALLOC &DUMMY,&PERM,                                           X
               &WAITDSN=NO,&WAITVOL=NO,&WAITUNIT=NO,                   X
               &DSN=,&DDN=,&DDNRET=,&MEMBER=,&DISP=,                   X
               &VOL=,&UNIT=,&SYSOUT=,&FREE=,&COPIES=,&LABEL=,          X
               &BLKSIZE=,&DEN=,&DSORG=,&KEYLEN=,&LRECL=,&RECFM=,       X
               &PASWORD=,&DSNRET=,&MF=AUTO,&PREFIX=,&ERROR=,           X
               &SPACE=,&F=,&FILE=,&DA=,&QNAME=,&DSORGRT=,              X
               &VOLRET=,&DCBDSN=,&DCBDDN=,&SPECIAL=,&DDNTO=,&TERM=,    X
               &FCB=,                                                  X
               &FORMS=,&DEST=,&SSREQ=,&FORUSER=,&TU=,&DSNPDE=,&MSVGP=
.**********************************************************************
.*                                                                    *
.*    THIS MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION BY BUILDING   *
.*    A DYNAMIC ALLOCATION PARAMETER LIST AND INVOKING SVC 99.        *
.*    IT FIRST SETS UP A WORKAREA ENVIRONMENT FOR THE PARAMETER LIST  *
.*    AND THEN TESTS THE KEYWORDS SUPPLIED AND INVOKES INNER MACROS   *
.*    TO BUILD THE TEXT UNITS. THE INNER MACROS THEMSELVES USE INNER  *
.*    MACROS TO UPDATE GLOBAL VARIABLES, STORE TEXT UNIT POINTERS ETC *
.*    THERE ARE THREE WAYS OF SPECIFYING THE WORK AREA ADDRESS.       *
.*    A) MF=AUTO, MF=G, MF=(E,ADDRESS,LNTHSYMB).                      *
.*    IN THE FIRST FORM, AN INNER MACRO DYNSPACE IS CALLED TO NAME    *
.*    A WORK AREA, THE NAME BEING RETURNED IN THE GLOBAL SETC         *
.*    VARIABLE &DYNSP. A DSECT IS CREATED TO MAP THIS AREA.           *
.*    THE GLOBAL VARIABLES &DTUO (TEXT UNIT OFFSET COUNTER) AND       *
.*    &DTUPO (TEXT UNIT POINTER OFFSET ACCUMULATOR) ARE SET TO ZERO.  *
.*    THESE ACCUMULATORS ARE UPDATED AS EACH TEXT UNIT PROCESSOR      *
.*    AQUIRES STORAGE. AFTER ALL TEXT UNITS HAVE BEEN BUILT, THE      *
.*    AMOUNT OF SPACE USED IS CALCULATED, AND THE DYNSPACE MACRO IS   *
.*    THEN CALLED AGAIN TO LOG THE AMOUNT NEEDED. DYNSPACE SETS A     *
.*    GLOBAL VARIABLE &DYNSPQ TO THE HIGHEST AMOUNT ANY ALLOC OR      *
.*    FREE MACRO REQUESTED, AND WHEN CALLED WITH THE EXPAND OPTION,   *
.*    (NO OPERANDS OR NAME FIELD SUPPLIED), EXPANDS INTO A DS FOR     *
.*    THAT QUANTITY. (SEE DYNSPACE)                                   *
.*    MF=G SPECIFIES THAT THE ALLOC MACRO ENTER THE BEGIN MACRO       *
.*    WORKAREA TO ACQUIRE THE STORAGE NECESSARY. IT DOES THIS VIA     *
.*    THE RCPDS MACRO. (SEE RCPDS). HOWEVER, IF THE ALLOC MACRO IS    *
.*    CALLED SEVERAL TIMES WITH THIS OPTION, A LOT OF STORAGE WILL BE *
.*    USED UP, AS THE STORAGE WILL NOT BE SHARED. THUS, THIS FORM     *
.*    SHOULD ONLY BE USED IF THE ALLOC/FREE MACRO IS ONLY TO BE USED  *
.*    ONCE OR TWICE DURING AN ASSEMBLY.                               *
.*    MF=E CAUSES THE MACRO TO USE A USER SPECIFIED WORK AREA. THE    *
.*    SECOND PARAMETER GIVES THE NAME OF THE WORKAREA, AND AN         *
.*    OPTIONAL THIRD PARAMETER IS THE NAME OF A SYMBOL TO BE EQUATED  *
.*    TO THE LENGTH OF THE REQUIRED WORK AREA.                        *
.*                                                                    *
.*    DYNAMIC ALLOCATION FUNCTIONS ARE SIMILAR TO THOSE AVAILABLE    *
.*    WITH JCL, USING THE SAME KEYWORDS. HOWEVER, CERTAIN FORMATS    *
.*    ARE SLIGHTLY DIFFERENT. FOR INSTANCE, CERTAIN KEYWORDS CAN     *
.*    HAVE VARYING PARAMETERS, EG DATASET NAME, DDNAME, VOLSER ETC.  *
.*    PROVISION IS MADE FOR BOTH VARIABLE SPECIFICATION.             *
.*    IN THE ABSOLUTE FORM, THE PARAMETER IS ENTERED IN QUOTES,      *
.*    E.G.   ALLOC DSN='SYS1.LINKLIB',DISP=SHR                       *
.*    HOWEVER, THIS NAME REMAINS FIXED FOR THE ASSEMBLY.             *
.*    IN THE VARIABLE FORMAT, THE ADDRESS OF A LOCATOR IS SPECIFIED, *
.*    WHERE THE LOCATOR CONSISTS OF A SIX BYTE FIELD, THE FIRST 4    *
.*    BYTES OF WHICH POINT TO THE PARAMETER, WHILE THE NEXT TWO      *
.*    CONTAIN THE LENGTH.                                            *
.*    EG          ALLOC DSN=LOCATOR                                  *
.*       LOCATOR  DC    A(DSN),Y(12)                                 *
.*       DSN      DC    C'SYS1.LINKLIB'                              *
.*                                                                   *
.*       NUMERIC QUANTITIES E.G. COPIES= FOR SYSOUT, SHOULD EITHER   *
.*       SPECIFY A NUMERIC VALUE, COPIES=3,                          *
.*       A VALUE IN A REGISTER, COPIES=(R3),                         *
.*       OR THE NAME OFF A FULLWORD CONTAINING THE VALUE,            *
.*          COPIES=NUMCOPYS, WHERE NUMCOPYS IS THE NAME OF A         *
.*       FULLWORD FIELD.                                             *
.*                                                                   *
.*       OTHER KEYWORDS SUCH AS DISP= CAN ONLY HAVE THE ABSOLUTE     *
.*       FORM, AND VALUES SHOULD NOT BE ENTERED WITHIN QUOTES.       *
.*       ADDITIONAL FACILITIES NOT AVAILABLE WITH JCL ARE THE        *
.*       RETURN BY THE SYSTEM OF INFORMATION ON THE DATASET, EG      *
.*       DSORG. THIS IS DONE BY SPECIFYING DSORGRT=SYMBOL, WHERE     *
.*       SYMBOL IS A SYMBOL WHICH WILL BE EQUATED TO A TWO BYTE      *
.*       FIELD CONTAINING THE DSORG TYPE (SEE JOB MANAGEMENT,        *
.*       SUPERVISOR AND TSO).                                        *
.*       THE SYSTEM CAN ALSO GENERATE AND RETURN A DDNAME. THIS IS   *
.*       CARRIED OUT BY ENTERING DDNTO=(ADDR1,ADDR2,,...)            *
.*       WHERE ADDR1,ADDR2 ETC ARE THE NAMES OF 8 BYTE FIELDS WHICH  *
.*       ARE TO RECEIVE THE DDNAME.                                  *
.*       FOR FURTHER INFORMATION ON DYNAMIC ALLOCATION, SEE          *
.*       JOB MANAGEMENT, SUPERVISOR AND TSO.                         *
.*                                                                   *
.**********************************************************************
.*  MODIFIED 08/25/82 TO ADD MSVGP SUPPORT .                         *
.*  MODIFIED 09/10/82 TO ADD TERM  SUPPORT .                         *
.*  MODIFIED 10/27/83 TO:                                            *
.*             ADD WAITVOL TO WAIT FOR VOLUME TO BE MOUNTED.         *
.*             ADD WAITDSN TO WAIT FOR DSN TO BECOME AVAILABLE.      *
.*             ADD WAITUNIT TO WAIT FOR UNIT TO BECOME AVAILABLE.    *
.*             **  THESE THREE OPTIONS ARE VALID ONLY IF THE USER    *
.*             **  IS AN AUTHORIZED PROGRAM                          *
.*                   LIONEL DYCK/ROCKWELL INT'L  (213) 594-1647      *
.**********************************************************************
         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO
         GBLA  &DTUO              OFFSET TO TEXT UNITS
         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS
         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS
         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL
         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC
         LCLA  &DDNRTO,&DSNRTO         FOR EQUATES FOR RETURNED FLDS
         LCLA  &VOLRTO,&DSRGRTO        FOR EQUATES FOR RETURNED FIELDS
         LCLA  &I                 COUNTER
         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E
         LCLC  &C,&T,&PAR
.*
.*   THE ALLOC MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION,
&RCPS99(1)     SETB           1
&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER
&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX
&NAME    DS    0H
         AIF   ('&PREFIX' EQ '').TMF
         AIF   (K'&PREFIX LT 4).POK
         MNOTE 4,'PREFIX TOO LONG, 1ST 4 CHARS USED'
&DYNP    SETC  '&PREFIX'(1,4)
         AGO   .TMF
.POK     ANOP
&DYNP    SETC  '&PREFIX'
.TMF     AIF   ('&MF(1)' EQ 'G').GEN
         AIF   ('&MF' NE 'AUTO').TMFE
NAME     DYNSPACE             GET NAME FOR SPACE
         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST
         USING &DYNP.DS,R1             USE GENERATED DSECT
&T       SETC  'A'
&PAR     SETC  '&DYNSP+4'
&DSECT   SETB  1
         AGO   .START
.TMFE    AIF   ('&MF(2)' NE '').E2OK
         MNOTE 4,'PLIST ADDRESS OMITTED, MF=G USED'
         AGO   .GEN
.E2OK    ANOP
&DSECT   SETB  1
         AIF   ('&MF(2)' EQ '(').RMFE
         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS
         USING &DYNP.DS,R1             USE GENERATED DSECT
         AGO   .START
.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START
         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS
         AGO   .START
.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP
.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB
         USING S99RB,R15
         ST    R15,0(R1)               AND STORE IN RB POINTER
         XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST
         MVI   S99RBLN,20              MOVE IN LIST LENGTH
         MVI   S99VERB,S99VRBAL        MOVE IN VERB CODE
         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS
         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB
         AIF   ('&WAITDSN' EQ 'NO').NWD
         OI    S99FLG21,S99WTDSN       SET WAIT FOR DSN FLAG
.NWD     AIF   ('&WAITVOL' EQ 'NO').NWV
         OI    S99FLG21,S99WTVOL       SET WAIT FOR VOLUME
.NWV     AIF   ('&WAITUNIT' EQ 'NO').NWU
         OI    S99FLG21,S99WTUNT       SET WAIT FOR UNIT
.NWU     ANOP
         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS
         USING S99TUNIT,R15
&DTUO    SETA  0
&DTUPO   SETA  0
         AIF   ('&SSREQ' EQ 'YES').SSREQ
.TDSN    AIF   ('&DSN&DA' NE '').DSN
         AIF   ('&DSNPDE' NE '').DSNPDE
         AIF   ('&DSNRET' NE '').DSNRT
         AIF   ('&SYSOUT' NE '').SYSOUT
         AIF   ('&DUMMY' NE '').DUMMY
         AIF   ('&QNAME' NE '').QNAME
.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN
         AIF   ('&DDNRET&DDNTO' NE '').DDNRT
.TUNIT   AIF   ('&UNIT&VOL' NE '').UNIT
.TVOLRET AIF   ('&VOLRET' NE '').VOLRET
.TDSRGO  AIF   ('&DSORGRT' NE '').DSORGRT
.TLABEL  AIF   ('&LABEL' NE '').LABEL
.TPSWD   AIF   ('&PASWORD' NE '').PASWORD
.TFORUSE AIF   ('&FORUSER' NE '').FORUSER
.TTU     AIF   ('&TU' NE '').TU
.TDISP   AIF   ('&DISP' NE '').DISP
.TSPACE  AIF   ('&SPACE' NE '').SPACE
.TLRECL  AIF   ('&LRECL' NE '').DCB
         AIF   ('&DEN' NE '').DCB
         AIF   ('&RECFM' NE '').DCB
         AIF   ('&BLKSIZE' NE '').DCB
         AIF   ('&DSORG' NE '').DCB
         AIF   ('&KEYLEN' NE '').DCB
.TDCBDSN AIF   ('&DCBDSN' NE '').DCBDSN
.TDCBDDN AIF   ('&DCBDDN' NE '').DCBDDN
.TFREE   AIF   ('&FREE' EQ 'CLOSE').FREE                         TE7343
.TPERM   AIF   ('&PERM' EQ 'PERM' OR '&PERM' EQ 'PERMANENT').PERM
         AIF   ('&DUMMY' EQ 'PERM' OR '&DUMMY' EQ 'PERMANENT').PERM
.TSPECI  AIF   ('&SPECIAL' NE '').SPECIAL
.TMSVGP  AIF   ('&MSVGP' NE '').MSVGP
.TTERM   AIF   ('&TERM' NE '').TERM
         AGO   .SVC99
.TERM    RCPTERM
         AGO   .SVC99
.SSREQ   RCPSSREQ
         AGO   .TDSN
.DSN     RCPDSN &DSN&DA,&MEMBER
         AGO   .TDDN
.DSNPDE  RCPDSNPD &DSNPDE
         AGO   .TDDN
.DSNRT   RCPDSNRT &DSNRET
&DSNRTO  SETA  &DTUO-46
         AGO   .TDDN
.SYSOUT  RCPSYSOU &SYSOUT,COPIES=&COPIES,FREE=&FREE,DEST=&DEST,        X
               FORMS=&FORMS,FCB=&FCB
         AGO   .TDDN
.DUMMY   RCPDUMMY &DUMMY
         AGO   .TDDN
.QNAME   RCPQNAME &QNAME
         AGO   .TDDN
.DDN     RCPDDN &DDN&F&FILE
         AGO   .TUNIT
.DDNRT   RCPDDNRT &DDNRET
&DDNRTO  SETA  &DTUO-10
         AGO   .TUNIT
.UNIT   RCPUNIT &UNIT,&VOL
         AGO   .TVOLRET
.VOLRET  RCPVOLRT &VOLRET
&VOLRTO  SETA  &DTUO-8
         AGO   .TDSRGO
.DSORGRT RCPDSRGR
&DSRGRTO SETA  &DTUO-2
         AGO   .TLABEL
.LABEL   RCPLABEL &LABEL
         AGO   .TPSWD
.PASWORD RCPPSWD &PASWORD
         AGO   .TFORUSE
.FORUSER RCPFORUS &FORUSER
         AGO   .TTU
.TU      RCPTU &TU
         AGO   .TDISP
.DISP    RCPDISP &DISP
         AGO   .TSPACE
.SPACE   RCPSPACE &SPACE
         AGO   .TLRECL
.DCB     RCPDDCB LRECL=&LRECL,DEN=&DEN,RECFM=&RECFM,BLKSIZE=&BLKSIZE,  X
               DSORG=&DSORG,KEYLEN=&KEYLEN
         AGO .TDCBDSN
.DCBDSN  RCPDCBDS &DCBDSN
         AGO .TDCBDDN
.DCBDDN  RCPDCBDD &DCBDDN
         AGO .TFREE                                              TE7343
.FREE    RCPFREE  &FREE                                          TE7343
         AGO   .TPERM
.PERM    RCPPERM
         AGO   .TSPECI
.MSVGP   RCPMSVGP &MSVGP
         AGO   .SVC99
.SPECIAL RCPSPEC &SPECIAL
.SVC99   ANOP
&DTUPO   SETA  &DTUPO-4
         SPACE
         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS
         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR
         RCPSR2 UNSAVE
&DTUPO   SETA  &DTUPO+4
         AIF   (NOT &DSECT).DYNA
         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY
         LA    R14,4(R1)               POINT TO REQUEST BLOCK
.DYNA    DYNALLOC
         AIF   (NOT &DSECT).LTR
         USING &DYNP.RB,R14            SET UP ADDRESSABILITY
**       NOTE  R14 HAS RB ADDRESS, R15 HAS SVC 99 RETURN CODE        **
.LTR     AIF   ('&ERROR' EQ '').TDDTO
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   &ERROR                  BRANCH IF NON ZERO
.TDDTO   AIF   ('&DDNTO' EQ '').RESERVE
&I       SETA  0
.DDNTOL  ANOP
&I       SETA  &I+1
         AIF   ('&DDNTO(&I)' EQ '').RESERVE
         AIF   ('&DDNTO(&I)'(1,1) EQ '(').DDNTOR
         MVC   &DDNTO(&I).(8),&DYNP.TU+&DDNRTO+2
         AGO   .DDNTOL
.DDNTOR  ANOP
&C       SETC  '&DDNTO(&I)'(2,K'&DDNTO(&I)-2)
         MVC   0(8,&C),&DYNP.TU+&DDNRTO+2
         AGO   .DDNTOL
.RESERVE AIF   (&DSECT).RESDS
         SPACE 1
***********************************************************************
**       RESERVE SPACE FOR DYNALLOC PARAMETER LIST                   **
***********************************************************************
         RCPDS
.SSP     ANOP
&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER
&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK
&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS
         AIF   (&DTUO EQ 0).DTU21
&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS
         AIF   (&DSNRTO EQ 0).TDDNRTO
&DSNRET  EQU   &DYNP.TU+&DSNRTO        OFFSET TO RETURNED DSN
.TDDNRTO AIF   ('&DDNRET' EQ '').DTU11
&DDNRET  EQU   &DYNP.TU+&DDNRTO        OFFSET TO RETURNED DDNAME
.DTU11   AIF   (&VOLRTO EQ 0).DTU12
&VOLRET  EQU   &DYNP.TU+&VOLRTO        OFFSET TO RETURNED VOLSER
.DTU12   AIF   (&DSRGRTO EQ 0).DTU10
&DSORGRT EQU   &DYNP.TU+&DSRGRTO       OFFSET TO RETURNED DSORG
         AGO   .DTU10
.DTU21   ANOP
&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS
.DTU10   ANOP
&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED
         AIF   (&DSECT).DSP
         RCPDS
         SPACE 3
         AGO   .EXIT
.RESDS   ANOP
         AIF   ('&DYNSP' EQ '').SP3
         DYNSPACE ADD
.SP3     SPACE
&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA
         AGO   .SSP
.DSP     AIF   ('&MF(3)' EQ '').END1
&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA
.END1    ANOP
&SYSECT  CSECT
         SPACE 3
.EXIT    MEND
         MACRO
&LABEL   $EPILOG &RC
         GBLC  &PROGM
&LABEL   LR    R1,R13              GET SAVEAREA ADDRESS
         L     R13,4(R13)          GET BACK CHAIN POINTER
         AIF   ('&PROGM' NE 'GETMAIN').NOFREE
         L     R0,16(R13)          GET SAVEAREA LENGTH
         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)
         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA
         AGO   .LM
.NOFREE  ANOP
         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)
.LM      ANOP
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         AIF   (T'&RC EQ 'O').SPEC
         LA    R15,&RC             SET RETURN CODE
.SPEC    ANOP
         BR    R14                 RETURN TO CALLER
         MEND
         MACRO
&LABEL   $PROLOG &LV=0,&GM=Y
.**********************************************************************
.*
.*       THIS MACRO WILL PROVIDE ENTRY LINKAGE AND OPTIONALLY
.*       MULTIPLE BASE REGISTERS.  ALSO, VIA THE 'LV=' KEYWORD
.*       PROVIDE ADDITIONAL USER STORAGE (APPENDED TO THE
.*       SAVE AREA) ADDRESSABLE FROM REG 13.  IF NO OPERANDS
.*       ARE CODED, REG 12 IS ASSUMED THE BASE. EXAMPLE:
.*              SECTNAME $PROLOG          = STANDARD REG 12 BASE
.*              SECTNAME $PROLOG 5        = STANDARD, REG 5 BASE
.*              SECTNAME $PROLOG 10,LV=20 = ADD 20 BYTES TO SAVE AREA
.*                                             REG 10 IS BASE
.*              SECTNAME $PROLOG R10,R11  = REGS 10 AND 11 ARE BASES
.*
.**********************************************************************
         LCLA  &AA,&AB,&AC
         GBLB  &PRORG
         GBLC  &PROGM
&AC      SETA  4096
&LABEL   CSECT
         B     32(R15)             BRANCH AROUND
         DC    AL1(26)
         DC    CL8'&LABEL'         CSECT NAME
         DC    C'-'
         DC    CL8'&SYSDATE'       COMPILE DATE
         DC    C'-'
         DC    CL8'&SYSTIME'       COMPILE TIME
         CNOP  0,4                 ALIGNMENT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R12,R15             LOAD BASE REG
         USING &LABEL,R12          INFORM ASSEMBLER
         AIF   (&LV GT 4023).MERR
         AIF   ('&GM' EQ 'N').NOGM
&PROGM   SETC  'GETMAIN'
         LA    R0,&LV+72           LOAD REG 0 WITH LENGTH VARIABLE
         GETMAIN R,LV=(0)          GET CORE FOR SAVEAREA AND USER
         AIF   (&LV+72 LE 256).XC2
         AIF   (&LV+72 LE 512).XC1
         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE
         LR    R2,R1               SAVE POINTER IN EVEN REG
         LA    R4,1(R1)            SET RECEIVING POINTER
         LR    R5,R0               SET RECEIVING LENGTH
         BCTR  R5,R0               DECREMENT LENGTH
         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE
         LA    R3,1                SET SENDING LENGTH
         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'
         AGO   .STORE
.XC1     ANOP
         XC    256(&LV-184,R1),256(R1)  CLEAR SAVE AREA
         XC    0(256,R1),0(R1)          CLEAR SAVE AREA
         AGO   .STORE
.XC2     ANOP
         XC    0(&LV+72,R1),0(R1)       CLEAR SAVE AREA
         AGO   .STORE
.NOGM    ANOP
         CNOP  0,4
         LA    R1,SAVE&SYSNDX
         B     *+76
SAVE&SYSNDX DC 18F'0'
.STORE   ANOP
         ST    R13,4(R1)           SAVE BACK CHAIN
         ST    R1,8(R13)           SET FORWARD CHAIN
         LR    R11,R1              SAVE NEW SAVEAREA ADDRESS
         L     R15,16(R13)         RESTORE REG 15
         ST    R0,16(R13)          SAVE SAVEAREA LENGTH
         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN
         LR    R13,R11             SET SAVEAREA POINTER
         AIF   (N'&SYSLIST EQ 0).MEND
         AIF   ('&SYSLIST(1)' EQ 'R12').SKIPIT
         AIF   ('&SYSLIST(1)' EQ '12').SKIPIT
         LA    &SYSLIST(1),&LABEL  LOAD REQUESTED BASE REG
         DROP  R12                 DROP ASSUMED BASE REG
         USING &LABEL,&SYSLIST(1)  INFORM ASSEMBLER
.SKIPIT  ANOP
&AA      SETA  2
.LOOP    ANOP
         AIF   (&AA GT N'&SYSLIST).MEXIT
&AB      SETA  &AA-1
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AB))  LOAD NEXT BASE REG
         LA    &SYSLIST(&AA),2048(&SYSLIST(&AA))  LOAD NEXT BASE REG
         USING &LABEL+&AC,&SYSLIST(&AA) INFORM ASSEMBLER
&AC      SETA  &AC+4096
&AA      SETA  &AA+1
         AGO   .LOOP
.MEXIT   ANOP
         AIF   (&PRORG).MEX2
         SPACE
         $REGS
         SPACE
.MEX2    ANOP
&AA      SETA  &LV+72
         MNOTE *,'TOTAL STORAGE AREA RECEIVED = &AA'
         MEXIT
.MEND    ANOP
         MNOTE *,'NO REGISTER SPECIFIED - R12 ASSUMED'
         AGO   .MEXIT
.MERR    ANOP
         MNOTE 12,'LV > 4023 - REQUEST IGNORED'
         AGO   .MEXIT
         MEND
         MACRO
&L       CVDT  &O
.*
&L       XR    R15,R15
         IC    R15,DS1&O
         CVD   R15,DWD
         ICM   R14,B'0011',DWD+L'DWD-2
         ICM   R15,B'0011',DS1&O+1
         CVD   R15,DWD
         SRL   R14,4
         STC   R14,DWD+5
         ED    FMT&O,DWD+5
         SPACE
.*
         MEND
         EJECT                                             *LBD 11/83*
         MACRO
&L       CVRTX &O,&ADD=0,&OFFSET=0
.*
&L       XR    R15,R15
         L     R15,DS1&O
.*
         CVD   R15,DWD
         ED    FMT&O,DWD+8-((L'FMT&O+1)/2)
         SPACE
.*
         MEND
         MACRO
&L       CVRT  &O,&ADD=0,&OFFSET=0
.*
&L       XR    R15,R15
         LA    R1,1
         SLA   R1,(L'DS1&O-&OFFSET)
         BCTR  R1,0
         EX    R1,*+L'*+4
         B     *+L'*+4
         ICM   R15,*-*,DS1&O+&OFFSET
.*
         AIF   (&ADD EQ 0).CVD
.*
         LA    R15,&ADD.(R15)
.*
.CVD     ANOP
.*
         CVD   R15,DWD
         ED    FMT&O,DWD+8-((L'FMT&O+1)/2)
         SPACE
.*
         MEND
         EJECT                                             *LBD 11/83*
         MACRO                                             *LBD 11/83*
         JUSTL &OUT,&IN                                    *LBD 11/83*
         LA    R1,&IN                  -> INPUT FIELD      *LBD 11/83*
         LA    R2,&OUT                 -> OUTPUT FIELD     *LBD 11/83*
         LA    R3,L'&IN                LOAD LEN            *LBD 11/83*
S&SYSNDX DS    0H                      START JUSTIFICATION *LBD 11/83*
         CLI   0(R1),C' '              BLANK               *LBD 11/83*
         BE    U&SYSNDX                YES - INCREMENT     *LBD 11/83*
         MVC   0(1,R2),0(R1)           MOVE CHARACTER      *LBD 11/83*
         LA    R2,1(R2)                DITTO               *LBD 11/83*
U&SYSNDX DS    0H                                          *LBD 11/83*
         LA    R1,1(R1)                INCR BY 1           *LBD 11/83*
         BCT   R3,S&SYSNDX             KEEP DOING IT       *LBD 11/83*
E&SYSNDX DS    0H                      END OF JUSTIFICATION*LBD 11/83*
         SPACE 2                                           *LBD 11/83*
         MEND                                              *LBD 11/83*
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*   PERFORM STANDARD REENTRANT PROLOGUE - GET WORK AREA AND SET UP   *
*                                                                    *
*--------------------------------------------------------------------*
         SPACE 2
DSNINFO  $PROLOG R11,R12
         EJECT                                             *LBD 12/83*
         L     R1,0(R1)         * LOAD ADDR OF PARM        *LBD 12/83*
         LH    R2,0(R1)         * LOAD LENGTH OF PARM      *LBD 12/83*
         LTR   R2,R2            * LENGTH OF ZERO           *LBD 12/83*
         BZ    NOPARM           * NO - BYPASS MOVE         *LBD 12/83*
         BCTR  R2,R0            * SUBTRACT LENGTH BY 1     *LBD 12/83*
         MVC   DSN+1(8),=CL8' '                            *LBD 12/83*
         EX    R2,MVCPARM       * EXECUTE THE MOVE         *LBD 12/83*
NOPARM   DS    0H                                          *LBD 12/83*
         EJECT
         GETMAIN R,LV=DSALEN                               *LBD 12/83*
         ST    R1,CORE                                     *LBD 12/83*
         LR    R8,R1                                       *LBD 12/83*
         SPACE 2
         USING DSAWRK,R8
         USING UCBWRK,R7
         EJECT
         SPACE
         EXTRACT TIOTA,'S',FIELDS=TIOT,MF=(E,EXTRACT)
         EJECT
*----------------------------------------------------------------*LBD*
*                                                                *LBD*
*        ACQUIRE DATASET NAME FROM ISPF                          *LBD*
*                                                                *LBD*
*----------------------------------------------------------------*LBD*
         L     R15,ISPLINK
         CALL  (15),(VDEFINE,ZPRF,VZPRF,CHAR,LZPRF),VL     *LBD 12/83*
         EJECT                                             *LBD 12/83*
         L     R15,ISPLINK
         CALL  (15),(VDEFINE,DSN,VDSN,CHAR,LDSN),VL              *LBD*
         EJECT                                             *LBD 12/83*
         L     R15,ISPLINK
         CALL  (15),(VGET,DSN,SHARED),VL                         *LBD*
         EJECT                                             *LBD 12/83*
         L     R15,ISPLINK
         CALL  (15),(VGET,ZPRF,SHARED),VL                  *LBD 12/83*
         EJECT                                             *LBD 12/83*
         LA    R1,ODSN
         LA    R2,VDSN
         CLI   0(R2),X'7D'             QUOTE ?
         BE    DSNUP                   YES - SKIP IT
         MVC   TDSN(8),VZPRF           MOVE PREFIX         *LBD 12/83*
         LA    R3,TDSN                                     *LBD 12/83*
FINDP    CLI   0(R3),C' '                                  *LBD 12/83*
         BE    MVCP                                        *LBD 12/83*
         LA    R3,1(R3)                                    *LBD 12/83*
         B     FINDP                                       *LBD 12/83*
MVCP     MVI   0(R3),C'.'                                  *LBD 12/83*
         LA    R3,1(R3)                                    *LBD 12/83*
         L     R1,LDSN                                     *LBD 12/83*
         BCTR  R1,R0                                       *LBD 12/83*
         STC   R1,MVCPDSN+1                                *LBD 12/83*
MVCPDSN  MVC   0(0,R3),VDSN                                *LBD 12/83*
         LA    R1,ODSN                                     *LBD 12/83*
         LA    R2,TDSN                                     *LBD 12/83*
DSNLP    DS    0H
         CLI   0(R2),X'7D'             QUOTE ?
         BE    EDSN                    YES - SKIP IT
         CLI   0(R2),C' '              END OF DSNAME
         BE    EDSN                    YES - SKIP IT
         CLI   0(R2),C'('              START OF MEMBER ?
         BE    HMEMBER                 YES
         MVC   0(1,R1),0(R2)           MOVE CHAR
         LA    R1,1(R1)
DSNUP    LA    R2,1(R2)
         B     DSNLP
HMEMBER  DS    0H
         LA    R1,OMEM                 -> MEMBER
         LA    R2,1(R2)                -> START OF MEMBER NAME
MLP      CLI   0(R2),C')'              END OF MEMBER NAME ?
         BE    EDSN                    YES
         MVC   0(1,R1),0(R2)           NO - MOVE IT
         LA    R1,1(R1)
         LA    R2,1(R2)
         B     MLP
EDSN     DS    0H                      END OF DSNAME
         L     R15,ISPLINK
         CALL  (15),(VDEFINE,NAMES,VNAMES,CHAR,LNAMES),VL        *LBD*
         MVC   MEMBER,OMEM
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*        ALLOC DATASET                                           *LBD*
*                                                                    *
*--------------------------------------------------------------------*
         SPACE 2
DSLOOP   EQU   *
         SPACE
         ALLOC DDNRET=DDNRET,DSN=OURDSN,ERROR=S99FAIL,DISP=SHR   *LBD*
         MVC   OURDDN,DDNRET+2                                   *LBD*
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*   LOOK UP DDNAME IN TIOT, GET UCB INFORMATION, AND OBTAIN DSCB'S   *
*                                                                    *
*--------------------------------------------------------------------*
         SPACE 1
         L     R15,TIOTA
         LA    R15,TIOENTRY-TIOT(R15)
         USING TIOENTRY,R15
         XR    R14,R14
         SPACE
TIOLOOK  EQU   *
         CLC   TIOEDDNM,OURDDN
         BE    DDNHIT
         IC    R14,TIOELNGH
         LA    R15,0(R14,R15)
         LTR   R14,R14
         BP    TIOLOOK
         SPACE
         ABEND 100
         SPACE
DDNHIT   EQU   *
         ICM   R7,B'0111',TIOEFSRT
         MVC   VOLSER,UCBVOLI
         MVC   CUU,UCBNAME
         MVC   DWD,OURDDN
         SPACE
         DEVTYPE DWD,DVTWKA,DEVTAB
         SPACE
         LA    R1,DEVTAB                                   *LBD 11/83*
DEVLOOP  CLC   0(1,R1),UCBTYP+3        OUR DEVICE          *LBD 11/83*
         BE    HAVEDEV                 YES                 *LBD 11/83*
         LA    R1,9(R1)                -> NEXT DEVICE      *LBD 11/83*
         CLI   0(R1),X'FF'             END OF TABLE        *LBD 11/83*
         BNE   DEVLOOP                                     *LBD 11/83*
         MVC   MYDEVTYP,=CL8'UNKNOWN'                      *LBD 11/83*
         B     GOTDEV                                      *LBD 11/83*
HAVEDEV  MVC   MYDEVTYP,1(R1)                              *LBD 11/83*
         TM    UCBTYP+1,X'08'          3330V               *LBD 11/83*
         BZ    GOTDEV                                      *LBD 11/83*
         MVC   MYDEVTYP,=CL8'3330V'                        *LBD 11/83*
GOTDEV   DS    0H                                                *LBD*
         SPACE
         MVC   CAMLST,CAMSRCH
         EJECT
OBTAINF1 EQU   *
         LA    R15,ODSN
         ST    R15,CAMDSN
         LA    R15,VOLSER
         ST    R15,CAMSER
         LA    R15,OBTWKA
         ST    R15,CAMWKA
         XR    R0,R0
         SPACE
         OBTAIN CAMLST
         SPACE
         LTR   R15,R15
         BNZ   OBTNFAIL
         SPACE
         CLI   DS1NOEPV,3
         BNH   FORMAT
         SPACE
         LA    R15,DS1PTRDS
OBTAINF3 ST    R15,CAMDSN
         LA    R15,F3WKA
         ST    R15,CAMWKA
         MVC   CAMLST,CAMSEEK
         SPACE
         OBTAIN CAMLST
         SPACE
         LTR   R15,R15
         BNZ   OBTNFAIL
         SPACE
         CLI   DS3FMTID,C'3'
         LA    R15,DS2PTRDS
         BNE   OBTAINF3
         SPACE
         DROP  R15
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*   OUTPUT HEADINGS AND FORMAT DATA SET LABEL INFORMATION IN BUFFER  *
*                                                                    *
*--------------------------------------------------------------------*
         SPACE 1
FORMAT   EQU   *
         MVC   OUTPUT,MASK                                 *LBD 11/83*
         SPACE
*DS1SCAL EQU   DS1SCALO+1,3
         CVRT  SCAL
         CVRT  BLKL
         MVC   TRKCALDD,DS1BLKL    SAVE BLKSIZE             *LBD 03/85*
         EJECT
         CVRT  LRECL
         CVRT  KEYL
         MVC   TRKCALK,DS1KEYL     SAVE KEY FOR TRKCALC     *LBD 03/85*
         CVRT  RKP
         CVRT  NOEPV
         EJECT
RFAORM   LA    R15,FMTRECFM+L'FMTRECFM-1
         TM    DS1RECFM,B'00000110'
         BZ    RFT
         BCTR  R15,0
         TM    DS1RECFM,B'00000010'
         BZ    RFA
RFM      MVI   1(R15),C'M'
         B     RFT
RFA      MVI   1(R15),C'A'
RFT      TM    DS1RECFM,B'00100000'
         BZ    RFS
         MVI   0(R15),C'T'
         BCTR  R15,0
RFS      TM    DS1RECFM,B'00001000'
         BZ    RFB
         MVI   0(R15),C'S'
         BCTR  R15,0
RFB      TM    DS1RECFM,B'00010000'
         BZ    RFU
         MVI   0(R15),C'B'
         BCTR  R15,0
RFU      TM    DS1RECFM,B'11000000'
         BM    RFFORV
         BZ    UNITS
         MVI   0(R15),C'U'
         B     UNITS
RFFORV   TM    DS1RECFM,B'10000000'
         BO    RFF
         MVI   0(R15),C'V'
         B     UNITS
RFF      MVI   0(R15),C'F'
         EJECT
UNITS    XR    R15,R15
         IC    R15,DS1SCALO
         SRL   R15,6
         LA    R14,ALLCUNIT(R15)
         CLI   0(R14),C'A'                                 *LBD 11/83*
         BE    UNABS                                       *LBD 11/83*
         CLI   0(R14),C'B'                                 *LBD 11/83*
         BE    UNBLK                                       *LBD 11/83*
         CLI   0(R14),C'T'                                 *LBD 11/83*
         BE    UNTRK                                       *LBD 11/83*
*        ASSUME CYLINDER ALLOCATION                        *LBD 11/83*
UNCYL    MVC   FMTUN(3),=C'CYL'                            *LBD 11/83*
         B     UNDONE                                      *LBD 11/83*
UNABS    MVC   FMTUN(3),=C'ABS'                            *LBD 11/83*
         B     UNDONE                                      *LBD 11/83*
UNBLK    MVC   FMTUN(3),=C'BLK'                            *LBD 11/83*
         B     UNDONE                                      *LBD 11/83*
UNTRK    MVC   FMTUN(3),=C'TRK'                            *LBD 11/83*
UNDONE   DS    0H                                          *LBD 11/83*
         SPACE
         LA    R15,FMTDSORG+L'FMTDSORG-2
         TM    DS1DSORG+1,X'08'        VSAM DATASET ?       *LBD 02/84*
         BO    DSVSAM                                       *LBD 02/84*
         TM    DS1DSORG,1
         BZ    DODSORG
         MVI   1(R15),C'U'
         BCTR  R15,0
         B     DODSORG                                      *LBD 02/84*
         SPACE
DSVSAM   MVC   FMTDSORG+2(2),=C'VS'    SET AS VSAM          *LBD 02/84*
         B     DATES                   SKIP DIR COUNT       *LBD 02/84*
         SPACE 1                                            *LBD 02/84*
DODSORG  MVC   DWD(1),DS1DSORG
         NI    DWD,X'E2'
         TR    DWD(1),TRDSORG
         XR    R1,R1
         IC    R1,DWD
         LA    R14,DSORGMN(R1)
         MVC   0(2,R15),0(R14)
         CLC   FMTDSORG+2(2),=C'PO'                        *LBD 11/83*
         BNE   DATES                   NO - SKIP DIR COUNT *LBD 11/83*
         EJECT                                             *LBD 11/83*
*----------------------------------------------------------*LBD 11/83*
*                                                          *LBD 11/83*
*        COUNT  USED DIRECTORY BLOCKS                      *LBD 11/83*
*                                                          *LBD 11/83*
*----------------------------------------------------------*LBD 11/83*
         MVC   PDS+40(8),OURDDN        SET UP DDNAME       *LBD 11/83*
         OPEN  PDS                                         *LBD 11/83*
         USING DIR,R10                                     *LBD 11/83*
READDIR  GET   PDS                                         *LBD 11/83*
         LR    R10,R1                                      *LBD 11/83*
         LH    R9,0(R10)                                   *LBD 11/83*
         AR    R9,R10                  -> END OF DIR BLOCK *LBD 11/83*
         LA    R10,2(R10)              -> PAST LENGTH      *LBD 11/83*
         AP    DIRACNT,=P'01'          ADD 1 TO ALLOC CNT  *LBD 11/83*
PLPS     CLI   DIRNAME,X'FF'           LAST USED BLOCK ?   *LBD 11/83*
         BE    ENDUSE                  YES -               *LBD 11/83*
         TM    DIRFLAG,DIRALIAS        ALIAS ??            *LBD 11/83*
         BZ    NOTALIAS                NO                  *LBD 11/83*
         AP    ALIASCNT,=P'01'                             *LBD 11/83*
NOTALIAS DS    0H                                          *LBD 11/83*
         AP    MEMCNT,=P'01'                               *LBD 11/83*
         SR    R1,R1                                       *LBD 11/83*
         NI    DIRFLAG,X'1F'           TURN OFF MISC BITS  *LBD 11/83*
         IC    R1,DIRFLAG                                  *LBD 11/83*
         LA    R1,6(R1)                ADD 6 HALF WORDS    *LBD 11/83*
         SLA   R1,1                    MULT BY 2           *LBD 11/83*
         AR    R10,R1                                      *LBD 11/83*
         CR    R10,R9                                      *LBD 11/83*
         BL    PLPS                                        *LBD 11/83*
         AP    DIRCNT,=P'01'           INCR COUNT BY 1     *LBD 11/83*
         B     READDIR                 AND READ NEXT BLOCK *LBD 11/83*
ENDUSE   AP    DIRACNT,=P'01'          ADD 1 TO ALLOC CNT  *LBD 11/83*
         GET   PDS                                         *LBD 11/83*
         B     ENDUSE                                      *LBD 11/83*
EOFPDS   CLOSE PDS                     DONE - CLOSE IT     *LBD 11/83*
         AP    DIRCNT,=P'01'           FOR LAST BLOCK      *LBD 11/83*
         SP    DIRACNT,=P'01'          -1 TO CORRECT BUG   *LBD 12/83*
         SPACE
DATES    CVDT  CREDT
         PACK  DWD,FMTCREDT+1(5)       PACK JULIAN DATE    *LBD 11/83*
         LA    R1,DWD+4                LOAD PACKED CDATE   *LBD 11/83*
         BAL   R14,DATEROU             AND GET GREG DATE   *LBD 11/83*
         MVC   GCREDT(8),0(R1)         INTO ISPF VARIABLE  *LBD 11/83*
         CVDT  REFD
         PACK  DWD,FMTREFD+1(5)        PACK JULIAN DATE    *LBD 11/83*
         LA    R1,DWD+4                LOAD PACKED USE DATE*LBD 11/83*
         BAL   R14,DATEROU             AND GET GREG DATE   *LBD 11/83*
         MVC   GUSEDT(8),0(R1)         INTO ISPF VARIABLE  *LBD 11/83*
         XR    R15,R15
         ST    R15,BTRALC
         ICM   R15,B'0001',DS1NOEPV
         BZ    EXTCVRT
         MVC   DS3FMTID(9*10),DS3ADEXT
         MVC   DS3EXTNT-3*10(3*10),DS1EXT1
         LA    R14,DS3EXTNT-3*10
         EJECT
         XC    DS1ALCYL,DS1ALCYL                           *LBD 12/83*
         XC    DS1USCYL,DS1USCYL                           *LBD 12/83*
         XC    DS1BALC,DS1BALC                              *LBD 03/85*
         XC    DS1BUSE,DS1BUSE                              *LBD 03/85*
EXTENTS  EQU   *
         USING EXTENT,R14
         CLI   EXTTYPE,0
         BNH   EXTLOOP
* DEVTPC EQU   DVTWKA+10
         LH    R1,EXTHICC              LOAD HI CYL         *LBD 02/84*
         SH    R1,EXTLOCC              SUB LOC CYL         *LBD 02/84*
         LA    R1,1(R1)                ADD FOR CURRENT CYL *LBD 02/84*
CYLOK    A     R1,DS1ALCYL             ADD ALLOC CYL       *LBD 02/84*
         ST    R1,DS1ALCYL             AND SAVE IT         *LBD 02/84*
         LH    R1,EXTLOCC
         MH    R1,DEVTPC
         AH    R1,EXTLOHH
         LH    R0,EXTHICC
         MH    R0,DEVTPC
         AH    R0,EXTHIHH
         BCTR  R1,0
         SR    R0,R1
         A     R0,BTRALC
         ST    R0,BTRALC
         SPACE
EXTLOOP  LA    R14,EXTNEXT
         BCT   R15,EXTENTS
         SPACE
EXTCVRT  EQU   *
         CLC   =C'BLK',FMTUN       BLOCK ALLOCATION ?       *LBD 03/85*
         BNE   NOTBLK              NO                       *LBD 03/85*
         TRKCALC FUNCTN=TRKCAP,UCB=(R7),REGSAVE=YES,R=1,    *LBD 03/85*X
               K=TRKCALK,DD=TRKCALDD                        *LBD 03/85*
         LR    R4,R0               SAVE BLKS/TRK            *LBD 03/85*
         L     R3,DS1TRALC         LOAD ALLOC TRKS          *LBD 03/85*
         SR    R2,R2               ZERO R2 FOR MULTIPLY     *LBD 03/85*
         LR    R1,R0               GET BLKS PER TRK         *LBD 03/85*
         MR    R2,R1               GET BLKS IN DATASET      *LBD 03/85*
         ST    R3,DS1BALC          SAVE BLOCKS ALLOCATED    *LBD 03/85*
         CVRT  BALC                CONVERT TO DISPLAY       *LBD 03/85*
         LH    R3,DS1TRUSE         LOAD USED TRACKS         *LBD 03/85*
         SR    R2,R2               ZERO R2 FOR MULTIPLY     *LBD 03/85*
         MR    R2,R4               GET BLKS IN DATASET      *LBD 03/85*
         ST    R3,DS1BUSE          SAVE BLOCKS ALLOCATED    *LBD 03/85*
         CVRT  BUSE                CONVERT TO DISPLAY       *LBD 03/85*
NOTBLK   DS    0H                                           *LBD 03/85*
*DS1TRALC EQU  BTRALC,4
         CVRT  TRALC
*DS1TRUSE EQU  DS1LSTAR,2
         ICM   R15,B'11',DS1LSTAR
         CLI   DS1LSTAR+2,0                                       82089
         BNH   *+L'*+4
         LA    R15,1(R15)
         STCM  R15,B'11',DS1LSTAR
         CVRT  TRUSE
         LR    R3,R15                  LOAD USED TRACKS    *LBD 02/84*
         SR    R2,R2                   ZERO R2             *LBD 02/84*
         LH    R1,DEVTPC               LOAD TRKS/CYL       *LBD 02/84*
         DR    R2,R1                   DIVIDE              *LBD 02/84*
         LTR   R2,R2                   ANY REMAINDER       *LBD 02/84*
         BZ    NOLEFT                  NO                  *LBD 02/84*
         LA    R3,1(R3)                YES - ADD 1 CYL     *LBD 02/84*
NOLEFT   DS    0H                                          *LBD 02/84*
         ST    R3,DS1USCYL             SAVE IT             *LBD 02/84*
         L     R1,DS1ALCYL             LOAD ALLOC CYL      *LBD 02/84*
         LTR   R1,R1                   ANY CYL ALLOC ?     *LBD 02/84*
         BNZ   DOCYL                   YES                 *LBD 02/84*
         LH    R1,=H'01'               SET AS MIN 1        *LBD 02/84*
DOCYL    ST    R1,DS1ALCYL             RESAVE IT           *LBD 02/84*
         CVRT  ALCYL                                       *LBD 12/83*
         CVRT  USCYL                                       *LBD 12/83*
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*   TRANSLATE OUT EDIT CHARACTERS AND WRITE FORMATTED LABEL DATA     *
*                                                                    *
*--------------------------------------------------------------------*
         SPACE
         TR    OUTPUT(MASKEND-MASK),TREDIT
         JUSTL BALC,FMTBALC        BLOCKS ALLOCATED         *LBD 03/85*
         JUSTL BUSE,FMTBUSE        BLOCKS USED              *LBD 03/85*
         JUSTL TRALC,FMTTRALC                                    *LBD*
         JUSTL TRUSE,FMTTRUSE                                    *LBD*
         JUSTL EX,FMTNOEPV                                       *LBD*
         MVC   UNIT(3),FMTUN                                     *LBD*
         JUSTL SCALO,FMTSCAL                                     *LBD*
         JUSTL RECFM,FMTRECFM                                    *LBD*
         JUSTL BLKSIZE,FMTBLKL                                   *LBD*
         JUSTL LRECL,FMTLRECL                                    *LBD*
         JUSTL KEYLEN,FMTKEYL                                    *LBD*
         JUSTL DSORG,FMTDSORG                                    *LBD*
         JUSTL RKP,FMTRKP                                        *LBD*
         JUSTL ALCYL,FMTALCYL                              *LBD 12/83*
         JUSTL USCYL,FMTUSCYL                              *LBD 12/83*
         MVC   CREDT(5),FMTCREDT+1                               *LBD*
         MVC   USEDT(5),FMTREFD+1                                *LBD*
         MVC   MYVOLSER(6),VOLSER                                *LBD*
         MVC   FMTWORK,=XL8'4020202020202021'              *LBD 11/83*
         ED    FMTWORK,DIRCNT                              *LBD 11/83*
         JUSTL DIRUSE,FMTWORK                              *LBD 11/83*
         MVC   FMTWORK,=XL8'4020202020202021'              *LBD 11/83*
         ED    FMTWORK,DIRACNT                             *LBD 11/83*
         JUSTL DIRALLOC,FMTWORK                            *LBD 11/83*
         MVC   FMTWORK,=XL8'4020202020202021'              *LBD 11/83*
         ED    FMTWORK,MEMCNT                              *LBD 11/83*
         JUSTL MEMBERS,FMTWORK                             *LBD 11/83*
         MVC   FMTWORK,=XL8'4020202020202021'              *LBD 11/83*
         ED    FMTWORK,ALIASCNT                            *LBD 11/83*
         JUSTL ALIASES,FMTWORK                             *LBD 11/83*
         LA    R1,RECFM                                    *LBD 11/83*
         LA    R2,ATRECFM                                  *LBD 11/83*
FXRECFM  DS    0H                                          *LBD 11/83*
         MVC   0(1,R2),0(R1)                               *LBD 11/83*
         LA    R1,1(R1)                                    *LBD 11/83*
         LA    R2,2(R2)                                    *LBD 11/83*
         CLI   0(R1),C' '              END OF RECFM ?      *LBD 11/83*
         BE    DOPUT                                       *LBD 11/83*
         B     FXRECFM                                     *LBD 11/83*
DOPUT    DS    0H                                          *LBD 11/83*
         L     R15,ISPLINK
         CALL  (15),(VPUT,NAMES,SHARED),VL
         SPACE 2                                          *LBD 01/85*
         L     R15,ISPLINK
         CALL  (15),(VDELETE,NAMES),VL                           *LBD*
         L     R15,ISPLINK
         CALL  (15),(VDELETE,DSN),VL                             *LBD*
         SPACE
         EJECT
*-------------------------------------------------------------------*
*                                                                   *
*   WHEN OUTPUT HAS BEEN GENERATED, FREE DATASET                    *
*                                                                   *
*-------------------------------------------------------------------*
         SPACE 2
FREE     EQU   *
         FREE  DDN=OURDDNA,ERROR=S99FAIL
         BE    DONE
         EJECT
*-------------------------------------------------------------------*
*                                                                   *
*   ABNORMAL SERVICE ROUTINE                                        *
*                                                                   *
*-------------------------------------------------------------------*
         SPACE
OBTNFAIL EQU   *
         B     DONE
         SPACE
S99FAIL  S99FAIL
         LA    R2,99              SET RETURN CODE          *LBD 02/84*
         B     ALLDONE                                     *LBD 02/84*
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*        EXIT                                                    *LBD*
*                                                                    *
*--------------------------------------------------------------------*
         SPACE 2
DONE     DS    0H
         SR    R2,R2              SET OK RETURN CODE       *LBD 02/84*
         SPACE 1                                                 *LBD*
ALLDONE  DS    0H                                          *LBD 02/84*
         DELETE EP=ISPLINK
         SPACE 1                                                 *LBD*
         FREEMAIN R,LV=DSALEN,A=CORE                       *LBD 12/83*
         LR    R15,R2             SET RETURN CODE          *LBD 02/84*
         $EPILOG ,                                               *LBD*
         SPACE 2
         PRINT NOGEN
         EJECT
*----------------------------------------------------------*LBD 11/83*
*                                                          *LBD 11/83*
*        CONVERT JULIAN DATE TO GREGORIAN DATE             *LBD 11/83*
*                                                          *LBD 11/83*
*----------------------------------------------------------*LBD 11/83*
*        REG = THE REGISTER CONTAING THE PACKED JULIAN DATE
*        THIS ROUTINE ALSO USES REGISTERS 1,2,3
*        THIS ROUTINE CONVERTS THE JULIAN DATE INTO THE CALENDAR DATE
*        EX.   FROM 75339 TO 12/05/75
DATEROU  ZAP   MX001M,=P'01'           INITIALIZE MONTH
         ZAP   T001BL+2(2),=P'28'      INITIALIZE FEB
         MVC   R1001ST(4),0(R1)        MOVE JULIAN DATE    *LBD 11/83*
         XC    W001X,W001X             ZERO WORK AREA
         MVC   W001X+3(1),R1001ST+1    MOVE YEAR INTO WORK
         L     R1,W001X                LOAD YEAR INTO REGISTER
         SLL   R1,4                    SHIFT LEFT 1/2 BYTE
         ST    R1,W001X                STORE YEAR INTO WORK AGAIN
         OI    W001X+3,X'0F'           CONVERT YEAR INTO PACKED FORMAT
         ZAP   YR001X,W001X            SAVE YEAR
         DP    W001X,=P'04'            DIVIDE YEAR BY 4
         CP    W001X+2(2),=P'00'       IF REMAINDER THEN LEAP YEAR
         BNE   XNOLEAPX                NOT A LEAP YEAR
         ZAP   T001BL+2(2),=P'29'      SET MONTH 2 EQUAL TO 29 DAYS
XNOLEAPX LA    1,T001BL                SET POINTER TO MONTH TABLE
         L     2,=F'02'                SET COUNTER
         LA    3,MX001M-1              SET POINTER TO END OF TABLE
XCPR01   CP    R1001ST+2(2),0(2,1)     COMPARE DAYS TO MONTH DABLE
         BNH   XDATEX                  LESS THAN TABLE
         AP    MX001M,=P'01'           INCRIMENT MONTH COUNTER
         SP    R1001ST+2(2),0(2,1)     SUB TABLE DAY FORM JULIAN DAY
         BXLE  1,2,XCPR01              CONTINUE SCAN
XDATEX   ZAP   DYXX,R1001ST+2(2)       SET DAY
         UNPK  W001X,DYXX              UNPACK DAY
         OI    W001X+3,X'F0'           RESET SIGN
         MVC   XD1(2),W001X+2          MOVE DAY TO O/P AREA
         UNPK  W001X,MX001M            UNPACK MONTH
         OI    W001X+3,X'F0'           RESET SIGN
         MVC   XM1(2),W001X+2          MOVE MONTH TO O/P AREA
         UNPK  W001X,YR001X            UNPACK YEAR
         OI    W001X+3,X'F0'           RESER SIGN
         MVC   XY1(2),W001X+2          MOVE YEAR TO O/P AREA
         LA    R1,XM1                  LOAD REGISTER WITH ADDR OF CAL
         BR    R14                     RETURN TO CALLER
         EJECT
         EJECT
*--------------------------------------------------------------------*
*                                                                    *
*   DECLARE ALL CONSTANTS, LITERALS, WORK AREAS, AND CONTROL BLOCKS  *
*                                                                    *
*--------------------------------------------------------------------*
         SPACE 2
CORE     DC    F'0'                                        *LBD 12/83*
         SPACE 2
MASK     DC    X'402020202120402020202120202120404040'
*                FMTTRALC    FMTTRUSE    NOEPV  FMTUN      *LBD 02/84*
         DC    X'402020202120404040404040402020202120'
*                SCAL         RECFM      BLKL              *LBD 02/84*
         DC    X'4020202021204020202021204020212040202120'
*                LRECL       KEYL         DSORG  RKP       *LBD 02/84*
         DC    X'402020202120402020202120'
*                CREDT       REFD                          *LBD 02/84*
         DC    X'402020202021402020202021'                 *LBD 02/84*
*                ALCYL       USCYL                         *LBD 02/84*
         DC    X'402020202021'                              *LBD 03/85*
*                BALC                                       *LBD 03/85*
         DC    X'402020202021'                              *LBD 03/85*
*                BUSE                                       *LBD 03/85*
MASKEND  EQU   *
         SPACE 2                                           *LBD 11/83*
DEVTAB   DS    0F                                          *LBD 11/83*
         DC    X'09',CL8'3330'                             *LBD 11/83*
         DC    X'0B',CL8'3350'                             *LBD 11/83*
         DC    X'0D',CL8'3330-1'                           *LBD 11/83*
         DC    X'0E',CL8'3380'                             *LBD 11/83*
         DC    X'FF'                   END OF TABLE        *LBD 11/83*
         SPACE 2                                           *LBD 11/83*
TREDIT   DC    256AL1(*-TREDIT)
         ORG   TREDIT+X'20'
         DC    X'4040'
         ORG   TREDIT+256
TRDSORG  DC    XL256'00'
         ORG   TRDSORG+X'80'
         DC    AL1(2)
         ORG   TRDSORG+X'40'
         DC    AL1(4)
         ORG   TRDSORG+X'20'
         DC    AL1(6)
         ORG   TRDSORG+X'02'
         DC    AL1(8)
         ORG   TRDSORG+256
DSORGMN  DC    C'  ISPSDAPO'       DATA SET ORGANIZATIONS
ALLCUNIT DC    C'ABTC'             ALLOCATION UNIT MNEMONICS
         EJECT                                             *LBD 11/83*
*******  CONSTANTS USED BY THE DATE CONVERSION ROUTINE     *LBD 11/83*
W001X    DC    F'00'
T001BL   EQU   *                       MONTH TABLE
         DC    PL2'31'
         DC    PL2'28'
         DC    PL2'31'
         DC    PL2'30'
         DC    PL2'31'
         DC    PL2'30'
         DC    PL2'31'
         DC    PL2'31'
         DC    PL2'30'
         DC    PL2'31'
         DC    PL2'30'
         DC    PL2'31'
MX001M   DC    PL2'00'                 MONTH WORK AREA
R1001ST  DC    F'00'                   REGISTER SAVE AREA FOR REG
YR001X   DC    PL2'00'                 YEAR WORK AREA
DYXX     DC    PL2'00'                 DAY WORK AREA
XM1      DC    CL2'  '                 MONTH O/P AREA
         DC    C'/'
XD1      DC    CL2'  '                 DAY O/P AREA
         DC    C'/'
XY1      DC    CL2'  '                 YEAR O/P AREA
         EJECT
CAMSRCH  CAMLST      SEARCH,*-*,*-*,*-*
CAMSEEK  CAMLST      SEEK,*-*,*-*,*-*
*        PRINT       DATA
         SPACE
         LTORG
         EJECT                                                   *LBD*
ISPLINK  DC    V(ISPLINK)
DIRCNT   DC    PL4'0'                  COUNT OF USED DIR   *LBD 11/83*
DIRACNT  DC    PL4'0'                  ALLOC DIR BLOCKS    *LBD 11/83*
MEMCNT   DC    PL4'0'                  MEMBER COUNT        *LBD 11/83*
ALIASCNT DC    PL4'0'                  ALIAS COUNT         *LBD 11/83*
MVCPARM  MVC   DSN+1(0),2(R1)   * EXECUTED INSTRUCTION     *LBD 12/83*
OURDDNA  DC    A(OURDDN),Y(8)                                    *LBD*
OURDDN   DC    CL8' '                                            *LBD*
OURDSN   DC    A(ODSN),Y(44)                                     *LBD*
ODSN     DC    CL44' '                                           *LBD*
OMEM     DC    CL8' '                                            *LBD*
TDSN     DC    CL56' '                                           *LBD*
VDSN     DC    CL56' '                                           *LBD*
VZPRF    DC    CL8' '                                      *LBD 12/83*
VDEFINE  DC    CL8'VDEFINE'                                      *LBD*
VGET     DC    CL8'VGET'                                         *LBD*
VPUT     DC    CL8'VPUT'                                         *LBD*
SHARED   DC    CL8'SHARED'                                       *LBD*
DSN      DC    C'(DSNINFO )'                                     *LBD*
ZPRF     DC    C'(ZPREFIX)'                                *LBD 12/83*
CHAR     DC    CL8'CHAR'                                         *LBD*
LDSN     DC    A(L'VDSN)                                         *LBD*
LZPRF    DC    A(L'VZPRF)                                  *LBD 12/83*
VDELETE  DC    CL8'VDELETE'                                      *LBD*
NAMES    DC    C'(TRALC,TRUSE,EX,UNIT,SCALO,RECFM,'        *LBD 11/83*
         DC    C'BLKSIZE,LRECL,KEYLEN'                     *LBD 11/83*
         DC    C',DSORG,RKP,CREDT,USEDT,MEMBER,ATRECFM,'         *LBD*
         DC    C'VOLSER,DEVTYPE,DIRUSE,DIRALLOC'                 *LBD*
         DC    C',GCREDT,GUSEDT'                           *LBD 11/83*
         DC    C',MEMBERS,ALIASES'                         *LBD 11/83*
         DC    C',ALCYL,USCYL'                             *LBD 12/83*
         DC    C',BALC,BUSE'                                *LBD 03/85*
         DC    C',)'                                       *LBD 11/83*
LNAMES   DC    A(8)                                              *LBD*
VNAMES   DS    0F                                                *LBD*
TRALC    DC    CL8' '                                            *LBD*
TRUSE    DC    CL8' '                                            *LBD*
EX       DC    CL8' '                                            *LBD*
UNIT     DC    CL8' '                                            *LBD*
SCALO    DC    CL8' '                                            *LBD*
RECFM    DC    CL8' '                                            *LBD*
BLKSIZE  DC    CL8' '                                            *LBD*
LRECL    DC    CL8' '                                            *LBD*
KEYLEN   DC    CL8' '                                            *LBD*
DSORG    DC    CL8' '                                            *LBD*
RKP      DC    CL8' '                                            *LBD*
CREDT    DC    CL8' '                                            *LBD*
USEDT    DC    CL8' '                                            *LBD*
MEMBER   DC    CL8' '                                            *LBD*
ATRECFM  DC    CL8' '                                            *LBD*
MYVOLSER DC    CL8' '                                            *LBD*
MYDEVTYP DC    CL8' '                                            *LBD*
DIRUSE   DC    CL8' '                                      *LBD 11/83*
DIRALLOC DC    CL8' '                                      *LBD 11/83*
GCREDT   DC    CL8' '                                      *LBD 11/83*
GUSEDT   DC    CL8' '                                      *LBD 11/83*
MEMBERS  DC    CL8' '                                      *LBD 11/83*
ALIASES  DC    CL8' '                                      *LBD 11/83*
ALCYL    DC    CL8' '                                      *LBD 12/83*
USCYL    DC    CL8' '                                      *LBD 12/83*
BALC     DC    CL8' '                                       *LBD 03/85*
BUSE     DC    CL8' '                                       *LBD 03/85*
         EJECT
PDS      DCB   DSORG=PS,MACRF=GL,DDNAME=NULLDDN,LRECL=256, *LBD 11/83* X
               BLKSIZE=256,RECFM=F,EODAD=EOFPDS            *LBD 11/83*
         EJECT
         SPACE 2
EXTENT   DSECT
         SPACE
EXTTYPE  DS    BL1
EXTSEQ   DS    XL1
EXTLOCC  DS    HL2
EXTLOHH  DS    HL2
EXTHICC  DS    HL2
EXTHIHH  DS    HL2
         SPACE
EXTNEXT  EQU   *
         EJECT
TIOT     DSECT
         IEFTIOT1
         EJECT
UCBWRK   DSECT
         IEFUCBOB
         EJECT
DSAWRK   DSECT
DSASTART DS    0H                                          *LBD 12/83*
         SPACE
TIOTA    DS    A
ANS      DS    A
ECB      DS    A
UWA      DS    A
DWD      DS    D
OBTSTRT  DS    CL44                                        *LBD 12/83*
OBTWKA   DS    0D,XL148
F3WKA    DS    0D,XL148
DVTWKA   DS    5F
FAIL     DS    4F
BTRALC   DS    F
CAMLST   DS    F
CAMDSN   DS    A
CAMSER   DS    A
CAMWKA   DS    A
VOLSER   DS    CL6
CUU      DS    CL3
TRKCALK  DS    X                   KEYLEN OF DATASET        *LBD 03/85*
TRKCALDD DS    H                   BLKSIZE OF DATASET       *LBD 03/85*
         SPACE 2                                            *LBD 03/85*
         DYNSPACE ,                                              *LBD*
         EJECT
EXTRACT  EXTRACT  TIOTA,FIELDS=TIOT,MF=L
         EJECT
         SPACE
OUTLAST  DS    A
OUTLLEN  DS    2H
OUTPUT   DS    0CL(MASKEND-MASK)
FMTTRALC DS    ZL6
FMTTRUSE DS    ZL6
FMTNOEPV DS    ZL3
FMTUN    DS    CL3
FMTSCAL  DS    ZL6
FMTRECFM DS    CL6
FMTBLKL  DS    ZL6
FMTLRECL DS    ZL6
FMTKEYL  DS    ZL6
FMTDSORG DS    CL4
FMTRKP   DS    ZL4
FMTCREDT DS    ZL6
FMTREFD  DS    ZL6                                         *LBD 11/83*
FMTALCYL DS    ZL6                                         *LBD 12/83*
FMTUSCYL DS    ZL6                                         *LBD 12/83*
FMTBALC  DS    ZL6                                          *LBD 03/85*
FMTBUSE  DS    ZL6                                          *LBD 03/85*
FMTWORK  DS    ZL8                                         *LBD 11/83*
DS1ALCYL DS    F                                           *LBD 12/83*
DS1USCYL DS    F                                           *LBD 12/83*
DS1BALC  DS    F                                            *LBD 03/85*
DS1BUSE  DS    F                                            *LBD 03/85*
         EJECT                                                   *LBD*
         ORG   OBTWKA-44
         IECSDSL1 (1)
         SPACE
         ORG   F3WKA
         SPACE
         IECSDSL1 (3)
         SPACE
         ORG   F3WKA
         SPACE
         IECSDSL1 (2)
         SPACE
         ORG
         SPACE
         SPACE
DSALEN   EQU   *-DSASTART                                  *LBD 12/83*
         SPACE
DS1SCAL  EQU   DS1SCALO+1,3
DEVTPC   EQU   DVTWKA+10
DS1TRALC EQU   BTRALC,4
DS1TRUSE EQU   DS1LSTAR,2
         EJECT                                                   *LBD*
DIR      DSECT                                             *LBD 12/83*
DIRNAME  DS    CL8                                         *LBD 12/83*
DIRTTR   DS    XL3                                         *LBD 12/83*
DIRFLAG  DS    X                                           *LBD 12/83*
DIRALIAS EQU   X'80'                                       *LBD 12/83*
         EJECT                                                   *LBD*
         IEFZB4D0                                                *LBD*
         EJECT                                                   *LBD*
         IEFZB4D2                                                *LBD*
         END
