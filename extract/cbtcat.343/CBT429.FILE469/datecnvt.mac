*          DATA SET 00MA2456   AT LEVEL 001 AS OF 06/11/75
DATECNVT CSECT
         TITLE '"DATECNVT" - DATE CONVERSION SUBROUTINE'
***********************************************************************
*        THIS SUBROUTINE PERFORMS DATE CONVERSION AND DATE RETRIEVAL  *
* FOR THE INVOKING PROGRAM. ON ENTRY, REGISTER 1 MUST POINT TO A PARM *
* AREA WITHIN THE INVOKER'S STORAGE. THE CONTENTS OF THE 1ST THREE    *
* FIELDS INDICATE WHAT CONVERSION IS DESIRED:                         *
*                                                                     *
*        1. IF THE 1ST FIELD IN THE PARM LIST CONTAINS A NON-BINARY   *
*           ZERO VALUE, THEN THE SUBROUTINE ASSUMES THAT IT IS A VALID*
*           JULIAN DATE, AND PERFORMS ALL CONVERSIONS NECESSARY TO    *
*           FILL IN THE REST OF THE LIST.                             *
*        2. IF THE 1ST FIELD IS BINARY ZEROES, AND THE SECOND FIELD   *
*           CONTAINS A VALUE, THE SUBROUTINE CONVERTS THE SECOND FIELD*
*           (PACKED CALENDAR DATE), AND FILLS IN THE REST OF THE LIST,*
*           INCLUDING THE 1ST FIELD - (PACKED JULIAN DATE).           *
*        3. IF THE 1ST TWO FIELDS ARE BINARY ZERO, AND THE THIRD      *
*           CONTAINS A VALUE, THEN THE THIRD FIELD (PRINTABLE CALENDAR*
*           DATE) IS CONVERTED TO FILL IN THE REST OF THE FIELDS,     *
*           INCLUDING THE 1ST TWO.                                    *
*        4. IF ALL THREE OF THE 1ST FIELDS ARE BINARY ZERO,           *
*           IPL DATE IS RETRIEVED, AND THE ENTIRE LIST IS FILLED IN.  *
*        5. IF MORE THAN ONE OF THE 1ST THREE FIELDS CONTAINS A       *
*           VALID VALUE, THE SUBROUTINE PERFORMS CONVERSION ON THE    *
*           FIRST ONE ENCOUNTERED, AND OVERLAYS THE OTHER(S).         *
*                                                                     *
*        THE SUBROUTINE DOES PERFORM DATE CONTENT AND VALIDITY CHECK- *
* ING, AND WILL ISSUE THE FOLLOWING RETURN CODES IN REGISTER 15, ON   *
* RETURN TO THE INVOKING PROGRAM:                                     *
*                                                                     *
*        R15 = 0 MEANS SUCCESSFUL COMPLETION                          *
*        R15 = 4 MEANS INVALID DATE WAS PASSED; E.G. THE 32ND DAY OF  *
*                MONTH, JULIAN DATE OF 000, ETC. NO CONVERSION        *
*                HAS BEEN PERFORMED.                                  *
*        R15 = 8 MEANS THAT NON-NUMERIC DATE HAS BEEN PASSED IN A     *
*                FIELD; NO CONVERSION HAS BEEN PERFORMED.             *
*        R15 = 12 MEANS THAT THE PARM LIST WAS NOT DOUBLEWORD         *
*                ALIGNED; NO CONVERSION PERFORMED.                    *
*                                                                     *
*        THE PARM LIST PROVIDED BY THE INVOKING PROGRAM MUST HAVE     *
* THE FOLLOWING FORMAT, AND BE DOUBLEWORD ALIGNED:                    *
*                                                                     *
* PARMLIST DS    0D                                                   *
* PACKJUL  DC    PL3'YYDDD'        * PACKED JULIAN DATE; Y=YEAR, D=DAY*
* PACKCAL  DC    PL4'MMDDYY'       * PACKED CALENDAR DATE; E.G.       *
* *                                * PL4'123175'                      *
* PRNTCAL  DC    CL8'MM/DD/YY'     * PRINTABLE CALENDAR DATE; E.G.    *
* *                                * CL8'12/31/75' - YOU MUST CODE    *
* *                                * IN THE SLASHES                   *
* MNTHLNTH DS    XL1               * CONTAINS BINARY LENGTH OF NEXT   *
* *                                * FIELD, ON RETURN TO INVOKING PROG*
* MNTHNAME DS    CL9               ( CONTAINS NAME OF MONTH, LEFT     *
* *                                * JUSTIFIED, RIGHT BLANK FILLED ON *
* *                                * RETURN - E.G. C'APRIL    '       *
* DAYLNTH  DS    XL1               * BINARY LENGTH OF NEXT FIELD      *
* DAYNAME  DS    CL9               * NAME OF DAY OF WEEK, ON RETURN   *
* *                                * - E.G. C'SUNDAY   '              *
* WORK     DS    CL21              * WORK AREA                        *
*                                                                     *
*        THIS CODE IS REENTRANT AS IT STANDS. IF THE INVOKING PROG-   *
* RAM IS REENTRANT (INCLUDING THE PARM LIST PASSED TO THIS SUBROUTINE)*
* THEN THIS SUBROUTINE WILL NOT VIOLATE THAT REENTRANCY.  ON RETURN   *
* ALL OF THE INVOKING PROGRAMS REGISTERS WILL BE RETURNED INTACT,     *
* WITH THE EXCEPTION OF R15, WHICH IS USED TO PASS THE RETURN CODE.   *
*                                                                     *
*        - DENNIS BUSWELL, DEPT OF ADMIN, SYSTEMS TECH, 5/5/75        *
*                                                                     *
***********************************************************************
         EJECT
         USING *,R15               * ESTABLISH E.P REG AS BASE
         B     AROUNDID            * BRANCH AROUND
         DC    C'DATECNVT'         *    I.D.
AROUNDID STM   R14,R5,12(R13)      * SAVE INVOKER'S REGISTERS
         LR    R3,R1               * TRANSFER PARMLIST ADDRESS
         USING PARMLIST,R3         *    & ESTABLISH ADDRESSABILITY
         CLC   PACKJUL(15),=4F'0'  * DOES HE WANT IPL DATE ?
         BNE   CHCKPARM            * - NO, GO EDIT PARM FIELD
         LR    R4,R15              * - YES, SAVE OUR BASE REG
         TIME
         LR    R15,R4              * RESTORE OUR BASE REG
         STCM  R1,7,PACKJUL        * FORCE DATE INTO JULIAN AREA
         SPACE 2
CHCKPARM EQU   *                   * ROUTINE TO INSURE VALID DATA
*                                  * WAS PASSED
         SR    R1,R1               * PRECLEAR R1
         LR    R0,R3               * TRANSFER PARM LIST ADDRESS
         SRDL  R0,3                * SHIFT LOWEST ADDR BITS TO R1
         LTR   R1,R1               * WERE THEY ALL ZEROES ?
         BZ    DECODE              * - YES, CONTINUE ON
         MVC   DOUB(2),=H'12'      * - NO, SET APPROPRIATE RETURN CODE
         B     RETURN              *    AND GO GET OUT
         SPACE 2
DECODE   EQU   *                   * ROUTINE TO FIND OUT WHAT
*                                  *    CONVERSION HE WANTS
         CLC   PACKJUL,=4F'0'      * IS JULIAN DATE CODED ?
         BNE   CNVTJUL             * - YES, GO EDIT IT
         CLC   PACKCAL,=4F'0'      * HOW ABOUT PACKED CALENDAR ?
         BNE   CNVTCAL             * - YES, GO DO IT
         SPACE 2
CNVTPRNT MVC   WORK(2),PRNTCAL     * - MUST BE PRINTABLE CAL DATE
         MVC   WORK+2(2),PRNTCAL+3 *     SO LET'S PACK THE NUMERIC
         MVC   WORK+4(2),PRNTCAL+6 *        PORTION OF IT
         PACK  PACKCAL,WORK(6)     *           FOR EDIT SUBROUTINE
         SPACE 2
CNVTCAL  LA    R1,PACKCAL          * POINT TO FIELD
         BAL   R5,EDIT             *    AND GO EDIT IT
         MVC   DOUB+6(2),PACKCAL+2 * PUT CAL YEAR INTO PARM AREA
         BAL   R5,TESTLEAP         *    & GO SET LEAP YR SWITCH
         BAL   R5,CALRANGE         * GO SEE IF THIS CAL DATE'S IN RANGE
         BAL   R5,CALTOPRT         * GO CNVRT PACKED CAL TO PRINTABLE
         BAL   R5,CALTOJUL         * GO CONVERT CAL TO JULIAN
         BAL   R5,BLDMONTH         * NOW GO BUILD NAME OF MONTH
         BAL   R5,BLDDAY           *    AND DAY FIELDS
         B     GOODEND             *        AND GET OUT
         SPACE 2
CNVTJUL  EQU   *
         NI    DOUB+4,0            * PRECLEAR 1ST BYTE OF FULLWORD
         MVC   DOUB+5(3),PACKJUL   * PUT PKD JULIAN INTO WORK AREA
         LA    R1,DOUB+4           * POINT TO IT,
         BAL   R5,EDIT             *    AND GO EDIT IT
         SR    R1,R1               * PRECLEAR WORK REG
         IC    R1,PACKJUL          * PICK UP JULIAN YEAR
         SLL   R1,4                * MAKE ROOM FOR SIGN
         STH   R1,DOUB+6           *   AND PUT YEAR IN PARM AREA
         BAL   R5,TESTLEAP         *        THEN GO SET LEAP SWITCH
         MVC   DOUB+6(2),PACKJUL+1 * PUT JULIAN DAYS INTO WORK AREA
         CVB   R1,DOUB             * CONVERT JULIAN DAYS
         STH   R1,BNRYJDAY         * SAVE IT FOR LATER
         LTR   R1,R1               * IS JULIAN DATE ZERO ?
         BZ    BADJUL              * - YES, GO SET R.C. AND GET OUT
         LA    R2,365              * PRELOAD # OF DAYS IN REG YEAR
         AH    R2,LEAPSAVE         * ADD IN ANY LEAPYEAR ADJUSTMENT
         CR    R1,R2               * IS JULIAN IN RANGE ?
         BNH   JULIANOK            * - YES, CONTINUE
BADJUL   MVC   DOUB(2),=H'4'       * - NO, SET RETURN CODE
         B     RETURN              *    AND GET OUT NOW
         SPACE 1
JULIANOK BAL   R5,JULTOCAL         * GO CONVERT JULIAN TO PACKED CAL
         BAL   R5,CALTOPRT         *    AND THEN CAL TO PRTABLE CAL
         BAL   R5,BLDMONTH         *        THEN NAME OF MONTH AND
         BAL   R5,BLDDAY           *            YEAR FIELDS
         SPACE 5
GOODEND  XC    DOUB(2),DOUB        * SET RETURN CODE =0 - EVERYTHING OK
         SPACE 1
RETURN   LM    R14,R5,12(R13)      * NOW RESTORE ALL OF INVOKER'S REGS
         DROP  R3                  * CHANGE BASE REGS FOR PARM LIST
         USING PARMLIST,R1         *    BACK TO R1
         LH    R15,DOUB            * LOAD RETURN CODE,
         BR    R14                 *    AND RETURN TO INVOKING PROGRAM
         DROP  R1                  * NOW REESTABLISH ADDRESSABILITY
         USING PARMLIST,R3         *    FOR "PARMLIST" WITH R3 FOR
*                                  *        REMAINDER OF CODE
         EJECT
         SPACE 5
**************************** SUBROUTINES ******************************
         SPACE 3
TESTLEAP EQU   *             ******* SUBROUT TO SET LEAP YR SWITCH
         MVC   LEAPSAVE,=H'1'      * PRESET SWITCH TO "IT'S LEAP YEAR"
         NC    DOUB,=X'0000000000000FF0' * "AND" OUT EXTRANEOUS BITS
         OI    DOUB+7,X'0F'        * FORCE IN PACKED SIGN
         CVB   R1,DOUB             * CONVERT IT TO BINARY
         STC   R1,DOUB+7           *   THEN PUT IT BACK FOR TESTING
         TM    DOUB+7,B'00000011'  * IS IT LEAP YEAR ?
         BZR   R5                  * - YES, GET OUT - WE'RE ALL SET
         NI    LEAPSAVE+1,0        * - NO, RESET LEAP SWITCH
         BR    R5                  *    AND GET OUT
         SPACE 5
BLDMONTH EQU   *              ****** SUBROUTINE TO BUILD NAME OF MONTH
         LH    R1,BNRYMNTH         *    & PICK UP MONTH # IN BINARY
         BCTR  R1,0                * ADJUST FOR TABLE
         MH    R1,=H'10'           * MULTIPLY BY TABLE ENTRY LENGTH
         LA    R1,MONTHTAB(R1)     * GET ADDR OF ENTRY WE WANT
         MVC   MNTHLNTH(L'MNTHLNTH+L'MNTHNAME),0(R1) * MOVE IT INTO
*                                  * USERS PARM FIELD
         BR    R5                  * RETURN TO POINT OF INVOCATION
         SPACE 5
CALTOPRT EQU   *              ****** SUBROUTINE TO CONVERT PACKED CAL
*                                  *    DATE TO PRINTABLE CALENDAR
         MVC   WORK(10),=X'40202020612020612120' * MOVE IN EDIT PATT
         ED    WORK(10),PACKCAL    * EDIT PACKED CAL DATE TO PRTABLE
         MVC   PRNTCAL,WORK+2      * MOVE RESULT INTO USER PARM FIELD,
         BR    R5                  *    AND RETURN TO POINT OF INVOC
         SPACE 5
JULTOCAL EQU   *              ****** SUBROUT TO CALC CAL DATE FROM JUL
         LH    R1,BNRYJDAY         * PICK UP BINARY JULIAN DATE
         LH    R2,LEAPSAVE         *    & LEAP YEAR INDICATOR
         MH    R2,TABLNGTH         * MULTIPLY BY TABLE LENGTH
         LA    R2,REGYEAR(R2)      *    & GET ADDR OF APPROP TABLE
         LA    R4,1                * PRELOAD OUR MONTH COUNTER
         SPACE 1
LOOPIT   CH    R1,2(R2)            * IS JULIAN GRTR = TABLE VALUE ?
         BNH   GOTCHA              * - YES, GET OUT
         LA    R4,1(R4)            * - NO, ADD 1 TO MONTH COUNT
         LA    R2,2(R2)            *    POINT TO NEXT ENTRY
         B     LOOPIT              *        & GO TRY AGAIN
         SPACE 1
GOTCHA   SH    R1,0(R2)            * SUBTRACT TABLE ENTRY FROM JULIAN
*                                  *    TO GET DAY OF MONTH
         STH   R4,BNRYMNTH         * SAVE BINARY MONTH # FOR LATER
         MH    R4,=H'10000'        * SHIFT MONTH OVER 4 DEC PLACES
         MH    R1,=H'100'          * SHIFT DAYS OVER 2
         AR    R4,R1               * CONCATENATE MONTH AND DAYS
         SR    R1,R1               * PRECLEAR WORK REG
         IC    R1,PACKJUL          * PICK UP YEAR
         SLL   R1,4                * MAKE ROOM FOR SIGN
         ST    R1,DOUB+4           * STORE RESULT
         OI    DOUB+7,X'0F'        * FORCE IN SIGN
         CVB   R1,DOUB             * CONVERT IT
         AR    R1,R4               * CONCATENATE MONTH, DAY, YEAR
         CVD   R1,DOUB             * CONVERT RESULT
         MVC   PACKCAL,DOUB+4      *    AND PUT IT IN USER'S PARM LIST
         BR    R5                  * RETURN TO POINT OF INVOCATION
         SPACE 5
CALTOJUL EQU   *              ****** CALENDAR TO JULIAN CONVERS SUBRT
         L     R1,PACKCAL          * PICK UP PACKED CALENDAR DATE
         SRL   R1,4                * GET RID OF SIGN
         STC   R1,PACKJUL          *    & PUT YEAR IN JULIAN AREA
         LH    R1,BNRYMNTH         * GET MONTH FROM CAL YEAR
         LH    R2,LEAPSAVE         * PICK UP LEAP YEAR INDICATOR
         MH    R2,TABLNGTH         * MULTIPLY BY TABLE LENGTH
         LA    R2,REGYEAR(R2)      *    & GET ADDR OF APPROP TABLE
         SPACE 5
         BCTR  R1,0                * ADJUST TO BEGIN OF TABLE
         SLL   R1,1                * MULTIPLY R1 BY TABLE ENTRY LNGTH
         LH    R2,0(R2,R1)         * PICK UP ENTRY FROM TABLE
         AH    R2,BNRYCDAY         * PICK UP MONTH # IN BINARY
         STH   R2,BNRYJDAY         * STORE JULIAN DATE FOR LATER
         CVD   R2,DOUB             * CONVERT IT BACK
         MVC   PACKJUL+1(2),DOUB+6 *    & PUT RESULT IN PARM LIST
         BR    R5                  * RETURN TO POINT OF INVOCATION
         SPACE 5
BLDDAY   EQU   *              ****** SUBROUT TO BUILD NAME OF DAY
*                                  *    OF WEEK
         MVC   WORK(2),CENTURY     * PUT CENTURY AND
         MVC   WORK+2(2),PRNTCAL+6 *    YEAR IN WORK AREA
         PACK  DOUB,WORK(4)        * PACK THEM
         CVB   R1,DOUB             *    & CONVERT THEM
         ST    R1,WORK             * SAVE THIS VALUE
         BCTR  R1,0                * BACK OFF 1 TO GET CENT-YEAR - 1
         LR    R2,R1               * SAVE THIS, TOO
         SRL   R1,2                * DIVIDE CENT-YEAR -1 / 4
         LR    R14,R1              * SAVE THIS
         LR    R1,R2               * RESTORE CENT-YEAR - 1
         SR    R0,R0               * PRECLEAR EVEN DIVIDE REG
         D     R0,=F'400'          * DIVIDE IT BY 400
         LR    R4,R1               * SAVE RESULT
         SR    R0,R0               * RECLEAR EVEN DIVIDE REG
         LR    R1,R2               * RESTORE  CENT-YEAR - 1
         D     R0,=F'100'          * DIVIDE IT BY 100
         LH    R0,BNRYJDAY         * PICK UP JULIAN DAY IN BINARY
         A     R0,WORK             * ADD CENT-YEAR TO JULIAN
         AR    R0,R4               * ADD IN CENT-YEAR - 1 / 400
         AR    R0,R14              * ADD IN CENT-YEAR - 1 / 4
         SR    R0,R1               * SUBTRACT CENT-YEAR - 1 / 100
         LR    R1,R0               * TRANSFER TO ODD DIVIDE REG
         SR    R0,R0               * PRECLEAR EVEN DIVIDE REG
         D     R0,=F'7'            * DIVIDE BY SEVEN
         LR    R1,R0               * GET REMAINDER OUT OF R0
         MH    R1,=H'10'           * MULTIPLY BY TABLE ENTRY LNGTH
         LA    R1,DAYTAB(R1)       * GET ADDRESS OF OUR ENTRY
         MVC   DAYLNTH(L'DAYLNTH+L'DAYNAME),0(R1) * MOVE RESULT TO
*                                  *    USER PARM LIST
         BR    R5                  * RETURN TO POINT OF INVOCATION
         SPACE 5
EDIT     EQU   *              ****** SUBROUT TO CHECK FOR VALID PACKED
*                                  *    DATA IN A 4 BYTE FIELD POINTED
*                                  *        TO BY R1 AT ENTRY
         TM    3(R1),B'00001100'   * 1ST TWO DIGITS OF SIGN VALID ?
         BNO   BADDIGIT            * - NO, GO SET R.C. & GET OUT
         TM    3(R1),B'00000011'   * HOW ABOUT LAST TWO ?
         BM    BADDIGIT            * - NO, DO LIKEWISE
         L     R0,0(R1)            * LOAD PACKED DATA INTO R1
         SRL   R0,4                * SHIFT OUT PACKED SIGN
         SPACE 1
EDLOOP   SR    R1,R1               * PRECLEAR ODD REGISTER
         SRDL  R0,4                * SHIFT ONE PACKED DIGIT INTO R1
         CL    R1,=X'90000000'     * IS DIGIT GREATER THAN 9 ?
         BH    BADDIGIT            * - YES, GO SET R.C. & GET OUT
         LTR   R0,R0               * ARE WE OUT OF DIGITS ?
         BNZ   EDLOOP              * - NO, KEEP IT UP
         BR    R5                  * - YES, RETURN TO POINT OF INVOC
         SPACE 1
BADDIGIT MVC   DOUB(2),=H'8'       * SET RETURN CODE TO APPROPIATE
         B     RETURN              *    VALUE & GO GET OUT
         SPACE 5
CALRANGE EQU   *              ****** SUBROUTINE TO VALIDATE DAY OF
*                                  * MONTH - MAKE SURE THAT THE 32ND
*                                  * OF FEBRUARY HAS NOT BEEN PASSED
         XC    DOUB(6),DOUB        * PRECLEAR WORK AREA
         MVC   DOUB+6(2),PACKCAL   * PUT X'0MMD' IN WORK AREA
         OI    DOUB+7,X'0F'        * FORCE IN PACKED SIGN
         CVB   R1,DOUB             * CONVERT IT
         CH    R1,=H'12'           * IS MONTH GRTR THAN 12 ?
         BH    BADMONTH            * - YES, IT'S BAD
         LTR   R1,R1               * IS MONTH ZERO ?
         BZ    BADMONTH            * - YES, GO SET R.C. & END
         STH   R1,BNRYMNTH         * SAVE BINARY MONTH #
         BCTR  R1,0                * ADJUST REG TO BEGIN OF TABLE
         SR    R0,R0               * PRECLEAR WORK REG
         IC    R0,VALIDTAB(R1)     * PICK UP ENTRY
         MVC   DOUB+6(2),PACKCAL+1 * MOVE IN PASSED CAL DAY
         OI    DOUB+7,X'0F'        * FORCE IN PACKED SIGN
         NI    DOUB+6,X'0F'        * "AND" OUT LAST DIGIT OF MONTH
         CVB   R2,DOUB             * CONVERT IT
         STH   R2,BNRYCDAY         * SAVE IT FOR LATER
         CH    R1,=H'1'            * IS IT  FEB ?
         BNE   NOTLEAP             * - YES, DON'T ADJUST TABLE
         AH    R0,LEAPSAVE         * - NO, ADD IN ANY LEAP YR ADJUST.
NOTLEAP  CR    R2,R0               * IS OUR DAY OF YEAR TO LARGE ?
         BNHR  R5                  * - NO, RETURN CLEAN
         SPACE 1
BADMONTH MVC   DOUB(2),=H'4'       * - YES, SET APPROPRIATE RETURN CODE
         B     RETURN              *    AND GO GET OUT NOW
         EJECT
***********************  CONSTANTS, TABLES, ETC **********************
         SPACE 3
CENTURY  DC    C'19'               * CURRENT CENTURY
         SPACE 3
TABLNGTH DC    AL2(ENDREGYR-REGYEAR) * LENGTH OF TABLE "REGYEAR"
         SPACE 3
REGYEAR  DC    H'0'                * REGULAR YEAR JULIAN TABLE
         DC    H'31'               *
         DC    H'59'               *
         DC    H'90'               *
         DC    H'120'              *
         DC    H'151'              *
         DC    H'181'              *
         DC    H'212'              *
         DC    H'243'              *
         DC    H'273'              *
         DC    H'304'              *
         DC    H'334'              *
         DC    H'365'              *
ENDREGYR EQU   *                   * END OF ABOVE TABLE
         SPACE 3
LEAPYEAR DC    H'0'                * LEAP YEAR JULIAN TABLE
         DC    H'31'               *
         DC    H'60'               *
         DC    H'91'               *
         DC    H'121'              *
         DC    H'152'              *
         DC    H'182'              *
         DC    H'213'              *
         DC    H'244'              *
         DC    H'274'              *
         DC    H'305'
         DC    H'335'              *
         DC    H'366'              *
         SPACE 3
DAYTAB   EQU   *                   * DAY OF WEEK TABLE
         DC    X'08',C'SATURDAY '  * LENGTH OF ENTRY AND ENTRY ITSELF
         DC    X'06',C'SUNDAY   '  *
         DC    X'06',C'MONDAY   '  *
         DC    X'07',C'TUESDAY  '  *
         DC    X'09',C'WEDNESDAY'  *
         DC    X'08',C'THURSDAY '  *
         DC    X'06',C'FRIDAY   '  *
         SPACE 3
MONTHTAB EQU   *                   * NAME OF MONTH TABLE
         DC    X'07',C'JANUARY  '  *
         DC    X'08',C'FEBRUARY '  *
         DC    X'05',C'MARCH    '  *
         DC    X'05',C'APRIL    '  *
         DC    X'03',C'MAY      '  *
         DC    X'04',C'JUNE     '  *
         DC    X'04',C'JULY     ' *
         DC    X'06',C'AUGUST   '  *
         DC    X'09',C'SEPTEMBER'  *
         DC    X'07',C'OCTOBER  '  *
         DC    X'08',C'NOVEMBER '  *
         DC    X'08',C'DECEMBER '  *
         SPACE 3
VALIDTAB EQU   *                   * VALIDITY TABLE; CONTAINS LAST
*                                  *     VALID DAY OF EACH MONTH
         DC    FL1'31'             *
         DC    FL1'28'             *
         DC    FL1'31'             *
         DC    FL1'30'             *
         DC    FL1'31'             *
         DC    FL1'30'             *
         DC    FL1'31'             *
         DC    FL1'31'             *
         DC    FL1'30'             *
         DC    FL1'31'             *
         DC    FL1'30'             *
         DC    FL1'31'             *
         SPACE 3
         LTORG
         EJECT
         SPACE 5
***************************  DSECTS, EQUTES **************************
         SPACE 5
**************************************************************
*   ABSOLUTE REGISTER EQUATES
**************************************************************
          SPACE
R0        EQU   0
R1        EQU   1           PARAMETER REGISTER
R2        EQU   2
R3        EQU   3
R4        EQU   4
R5        EQU   5
R6        EQU   6
R7        EQU   7
R8        EQU   8
R9        EQU   9
R10       EQU   10
R11       EQU   11
R12       EQU   12
R13       EQU   13          ADDRESS OF SAVE-AREA
R14       EQU   14          RETURN REGISTER
R15       EQU   15
          SPACE
**************************************************************
*   CONDITIONAL VALUES
**************************************************************
          SPACE
*   AFTER COMPARE INSTRUCTIONS (A:B)
          SPACE
H         EQU   2           A HIGH
L         EQU   4           A LOW
E         EQU   8           A EQUAL B
NH        EQU   13          A NOT HIGH
NL        EQU   11          A NOT LOW
NE        EQU   7           A NOT EQUAL B
          SPACE
*   AFTER ARITHMETIC INSTRUCTIONS
          SPACE
O         EQU   1           OVERFLOW     (AFTER TM - ALL ONES)
P         EQU   2           PLUS
M         EQU   4           MINUS        (AFTER TM - MIXED   )
Z         EQU   8           ZERO         (AFTER TM - ALL ZERO)
NP        EQU   13          NOT PLUS
NM        EQU   11          NOT MINUS
NZ        EQU   7           NOT ZERO
          SPACE
*   AFTER TEST UNDER MASK INSTRUCTIONS
          SPACE
NO        EQU   14          NOT ONES     (SEE ABOVE FOR O, M, & Z)
          SPACE
**************************************************************
         SPACE 3
PARMLIST DSECT                     * DSECT FOR INVOKER'S PARM LIST
PACKJUL  DS    PL3                 * PACKED JULIAN DATE - P'YYDDD'
PACKCAL  DS    PL4                 * PACKED CALENDAR DATE - P'0MMDDYY'
PRNTCAL  DS    CL8                 * PRINTABLE CALENDAR DATE
MNTHLNTH DS    XL1                 * LENGTH OF MONTH NAME - BINARY
MNTHNAME DS    CL9                 * NAME OF MONTH - E.G. "MARCH"
DAYLNTH  DS    XL1                 * LENGTH OF NAME OF DAY - BINARY
DAYNAME  DS    CL9                 * NAME OF DAY - E.G. "SUNDAY"
WORK     DS    CL5                 * WORK AREA
DOUB     DS    XL8                 * DOUBLEWORD WORK AREA
LEAPSAVE DS    XL2                 * LEAP YEAR INDICATOR; H'0' = NON-
*                                  * LEAP YEAR; H'1' = LEAP YEAR
BNRYJDAY DS    XL2                 * SAVE AREA FOR BINARY JULIAN DATE
BNRYMNTH DS    XL2                 *  "     "   "     "   MONTH #
BNRYCDAY DS    XL2                 *  "     "   "     " DAY OF MONTH
         END   DATECNVT
