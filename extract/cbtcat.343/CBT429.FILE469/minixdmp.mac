***********************************************************************
***                                                                 ***
**       PROGNAME: MINIXDMP                                          **
**       PROGAUTH: DAVID ALCOCK                                      **
**       PROGDATE: 03/02/85                                          **
**                                                                   **
**       PRODUCE A MINIATURE HEX DUMP A LINE AT A TIME WITH          **
**       OFFSET, WHICH YOU CAN PUT TO A FILE, WTO, TPUT, ETC.        **
**       MINIXDMP IS CALLED FOR EACH LINE TO BE PRODUCED.            **
**       THIS PROGRAM SET RETURN CODE=4 IF THE LENGTH TO             **
**       TOO HIGH AND RETURN CODE=8 IF LENGTH IS ZERO.               **
**       IF OVERHEAD IS A CONCERN THEN DO A STATIC CALL,             **
**       OTHERWISE DO A LINK, SINCE THE MODULE RESIDES IN            **
**       A LNKLST LIBRARY.                                           **
**                                                                   **
**       SAMPLE RESULT:                                              **
**                                                                   **
**  +X'0000' F1F2F3F4 F1F2F3F4 F1F2F3F4 F1F2F3F4 *1234123412341234*  **
**  +X'0010' F1F2F3F4 F1F2F3F4 00000000 00000000 *12341234........*  **
**  +X'0020' C4C1E5C5 C4C1E5C5 C4C1E5C5 C4C1E5C5 *DAVEDAVEDAVEDAVE*  **
**  +X'0030' C4C1E5C5 C4C1E5C5 C4C1E5C5 C4C1E5C5 *DAVEDAVEDAVEDAVE*  **
**  +X'0040' C4C1E5C5 C4C1E5C5 C4C1E5C5 C4C1E5C5 *DAVEDAVEDAVEDAVE*  **
**                                                                   **
**       SAMPLE PROGRAM TO PRODUCE RESULTS ABOVE:                    **
**                                                                   **
**  TESTIT ENTER 'TEST MINIXDMP PROGRAM'                             **
**         LINK EP=MINIXDMP,PARAM=(LENGTH,INPUT,OUTPUT,OFFSET)       **
**         TPUT OUTPUT,L'OUTPUT                                      **
**         LINK EP=MINIXDMP,PARAM=(LENGTH,INPUT+16,OUTPUT,OFFSET)    **
**         TPUT OUTPUT,L'OUTPUT                                      **
**         LA   R3,DAVE                                              **
**         LA   R4,3                                                 **
**  DOLOOP EQU  *                                                    **
**         LINK EP=MINIXDMP,PARAM=(LENGTH,(3),OUTPUT,OFFSET)         **
**         TPUT OUTPUT,L'OUTPUT                                      **
**         LA   R3,16(R3)                                            **
**         BCT  R4,DOLOOP                                            **
**         LEAVE RC=0                                                **
**  OFFSET DC   H'0'     <- SET TO ZERO FIRST TIME,                  **
**  LENGTH DC   H'16'                                                **
**  OUTPUT DS   CL80                                                 **
**  INPUT  DC   CL16'1234123412341234'                               **
**         DC   CL8'12341234',XL8'00'                                **
**  DAVE   DC   16CL4'DAVE'                                          **
**         END                                                       **
**                                                                   **
***                                                                 ***
***********************************************************************
MINIXDMP ENTER 'MINIATURE HEX DUMP...DAVID ALCOCK'
         LM    R2,R5,0(R1)             GET INPUT PARMS
*        ......R2 <-- LENGTH OF INPUT AREA (POINTS TO HALFWORD)
*        .......R3 <-- ADDRESS OF INPUT AREA
*        ........R4 <-- ADDRESS OF OUTPUT AREA
*        .........R5 <-- OFFSET COUNT FIELD (POINTS TO HALFWORD)
         SR    R7,R7                    ZERO WORK REGISTER
         LH    R7,0(R5)                 GET OFFSET INTO WORK REGISTER
         LA    R7,16(R7)                INCREMENT BY OFFSET
         MVC   0(3,R4),=C'+X'''         MOVE HEX OFFSET PREFIX
         LA    R4,3(R4)                 BUMP UP TO OUTPUT STUFF
         LA    R15,2                    GET LENGTH TO CONVERT
         STH   R15,DUMPLEN              SAVE FOR ROUTINE
         CALL  CON2PHEX,(DUMPLEN,(5),(4)) CONVERT GROUP TO HEX STR
         STH   R7,0(R5)                 SAVE OFFSET FOR NEXT TIME
         LA    R15,4                    GET LENGTH TO CONVERT
         STH   R15,DUMPLEN              SAVE FOR FOR REMAINING CALLS
         MVI   4(R4),X'7D'              PUT HEX OFFSET SUFFIX
         LA    R4,6(R4)                 BUMP UP TO HEX STUFF
         MVI   36(R4),C'*'              CHARACTER DUMP PREFIX
         SLR   R15,R15                  CLEAR OUT REGISTER
         LH    R15,0(R2)                LENGTH TO DUMP
         CH    R15,=H'16'               ---+
         BH    LENHIGH                     × TEST FOR VALID
         LTR   R15,R15                     × LENGTH TO PRINT
         BZ    LENZERO                  ---+
         BCTR  R15,0                    DECREMENT FOR MOVE
         EX    R15,MOVECHAR             ONLY MOVE THE PART TO DUMP
         EX    R15,TRANCHAR             TRANSLATE THIS FOR UNPRINTABLES
         MVI   37+16(R4),C'*'           PUT CHARACTER DUMP SUFFIX
         XR    R14,R14                  CLEAR OUT REGISTER
         LH    R15,0(R2)                GET LENGTH TO PRINT
         LA    R1,4                     NUMBER OF 4 BYTE GROUPS ON LINE
         DR    R14,R1                   FIND EVEN/LEFTOVER FOR DUMP
         LR    R6,R15                   NUMBER OF FULL 4 BYTE FIELDS
         LA    R6,1(R6)                 EXTRA LOOP TO CATCH LEFTOVERS
         LR    R8,R14                   NUMBER OF LEFTOVER BYTES
PRTHEX   EQU   *
         CH    R6,=H'1'                 ON LAST (LEFTOVER) GROUP?
         BNZ   PH0001                   NO, MOVE ON
         LTR   R8,R8                    YES, CHECK FOR LEFTOVER BYTES
         BZ    GOBACK                        NONE, LEAVE
         STH   R8,DUMPLEN                    GOT SOME, SET DUMP LENGTH
PH0001   EQU   *
         CALL  CON2PHEX,(DUMPLEN,(3),(4))    CONVERT GROUP TO HEX STR
         LA    R3,4(R3)                 BUMP UP ON INPUT
         LA    R4,9(R4)                 BUMP UP ON OUTPUT
         BCT   R6,PRTHEX                PRINT NEXT...
         SLR   R15,R15                  SET RETURN CODE = 0
GOBACK   EQU   *
         LEAVE RC=(15)                  LEAVE THIS PARTY
LENHIGH  EQU   *                        INPUT LENGTH IS TOO HIGH
         LA    R15,4                    SET RETURN CODE
         B     GOBACK
LENZERO  EQU   *                        INPUT LENGTH IS ZERO
         LA    R15,8                    SET RETURN CODE
         B     GOBACK
         DS    0D
DOUBLE   DS    D                       WORK AREA
DUMPLEN  DS    H                       LENGTH TO DUMP TO HEX STRING
MOVECHAR MVC   37(0,R4),0(R3)          SET UP EBCDIC AREA ON OUTPUT
TRANCHAR TR    37(0,R4),TRANSTAB       TRANSLATE CHARACTER DUMP
TRANSTAB DC    256C'.'                 CHARACTER TRANSLATE TABLE
         ORG   TRANSTAB+C' '
         DC    C' '
         ORG   TRANSTAB+C'A'
         DC    C'ABCDEFGHI'
         ORG   TRANSTAB+C'J'
         DC    C'JKLMNOPQR'
         ORG   TRANSTAB+C'S'
         DC    C'STUVWXYZ'
         ORG   TRANSTAB+C'0'
         DC    C'0123456789'
         ORG
         LTORG ,
***********************************************************************
***                                                                 ***
**       CONVERT INPUT STRING TO EBCDIC HEX STRING DISPLAY           **
***                                                                 ***
***********************************************************************
CON2PHEX ENTER 'CONVERT TO EBCDIC HEX STRING...DAVID ALCOCK'
         LM    R2,R4,0(R1)             GET INPUT PARMS
*        ..... R2 <-- LENGTH OF INPUT AREA
*        ...... R3 <-- ADDRESS OF INPUT AREA
*        ....... R4 <-- ADDRESS OF OUTPUT AREA
         SLR   R6,R6
         LH    R6,0(R2)                GET LENGTH OF INPUT BYTES
         CH    R6,=H'1'                IS IT 1?
         BE    HEXPRT1                 ...YES, THEN PRINT 2
         CH    R6,=H'2'                IS IT 2?
         BE    HEXPRT2                 ...YES, THEN PRINT 4
         CH    R6,=H'3'                IS IT 3?
         BE    HEXPRT3                 ...YES, THEN PRINT 6
         CH    R6,=H'4'                IS IT 4?
         BE    HEXPRT4                 ...YES, THEN PRINT 8
         LA    R15,1                   SET NON-ZERO CONDITION CODE
         B     EXIT
HEXPRT1  UNPK  WRKAREA(3),0(2,R3)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT2  UNPK  WRKAREA(5),0(3,R3)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT3  UNPK  WRKAREA(7),0(4,R3)      UNPACK HEX
         B     HEXCLTR                 CONTINUE
HEXPRT4  UNPK  WRKAREA(9),0(5,R3)      UNPACK HEX
HEXCLTR  MVZ   WRKAREA(8),XZROS        CLEAR FOR TRANSLATE
         TR    WRKAREA(8),TRTBL        MAKE PRINTABLE
         SLR   R15,R15                 CLEAR OUT REGISTER
         SLL   R6,1                    MULTIPLY BY 2
         BCTR  R6,0                    DECREMENT FOR MOVE
         EX    R6,MOVEXSTR             MOVE IT OUT
EXIT     LEAVE RC=(15)
MOVEXSTR MVC   0(0,R4),XSTRING
WRKAREA  EQU   *                       WORK AREA
XSTRING  DS    CL8                     STRING TO RETURN
XTRABYTE DS    CL1                     THROW-A-WAY BYTE (EXTRA)
XZROS    DC    8X'00'                  CONSTANT ZEROS
TRTBL    DC    C'0123456789ABCDEF'     TRANSLATE TABLE
         LTORG ,
         END
