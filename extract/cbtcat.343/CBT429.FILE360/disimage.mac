         TITLE 'W.S.R.C.C.  <DISIMAGE>  BUILD IEBIMAGE SOURCE DECKS FRO*
               M MEMBERS IN YOUR IMAGELIB - JOHN A SHELL'
*---------------------------------------------------------------------*
*                                                                     *
*                             <DISIMAGE>                              *
*                                                                     *
*             IBM 3800 PRINTING SUBSYSTEM SUPPORT UTILITY             *
*                                                                     *
*                                                                     *
*      DISIMAGE WILL ALLOW YOU TO CREATE AN IEBIMAGE SOURCE DECK      *
*      FROM ANY MEMBER OF YOUR SYSTEM OR LOCAL IMAGELIB THAT WAS      *
*      CREATED BY IEBIMAGE IN THE FIRST PLACE. THIS WILL ALLOW        *
*      LOCAL MODIFICATION OF IBM CHARACTER SETS FOR WHICH NO SOURCE   *
*      IS PROVIDED. IT WILL ALSO ELIMINATE THE NEED TO RETAIN THE     *
*      SOURCE DECKS, WHICH ARE QUITE BULKY, FOR ANY LOCAL FONTS.      *
*      AS LONG AS YOU HAVE A USABLE COPY OF THE IMAGELIB MEMBER,      *
*      THE SOURCE DECK CAN BE RECREATED.                              *
*                                                                     *
*                              NOTES.                                 *
*                                                                     *
*      1. THIS PROGRAM WILL NOT RECREATE SOURCE DECKS FOR             *
*         COPYMOD'S, OR FOR NON-3800 IMAGELIB MODULES CREATED         *
*         WITH UTILITIES OTHER THAN IEBIMAGE.                         *
*                                                                     *
*      2. THIS PROGRAM WILL REQUIRE ACCESS TO THE <ZSORTZ>            *
*         SUBROUTINE. THIS WILL THE SORT THE INTERNAL TABLE           *
*         OF CHANNEL-LINE NUMBER RELATIONSHIPS (CHTBL) FOR            *
*         USE IN GENERATING FCB CARDS.                                *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                       *** SAMPLE JCL ***                            *
*                                                                     *
*    //IMAGE   EXEC PGM=DISIMAGE,PARM='MODEL3' ..OR.. PARM='MODEL1'   *
*    //SYSUT1    DD DISP=SHR,DSN=SYS1.IMAGELIB    IEBIMAGE SYSUT1     *
*    //SYSUT2    DD UNIT=SYSDA,SPACE=(80,...  )            SYSIN      *
*    //SYSUT3    DD UNIT=SYSDA,SPACE=(121,... )            SYSPRINT   *
*    //SORTIN    DD UNIT=SYSDA,SPACE=(80,...  )   SORT INPUT          *
*    //SORTMSGS  DD SYSOUT=A                           SYSOUT         *
*    //SORTWK01  DD UNIT=SYSDA,SPACE=(...     )        WORKS          *
*        ....                                           *             *
*    //SORTWK0N  DD UNIT=SYSDA,SPACE=(...     )         *             *
*    //SORTOUT   DD UNIT=SYSDA,SPACE=(80,...  ),...    OUTPUT         *
*    //SYSPRINT  DD SYSOUT=A                      DISIMAGE LISTING    *
*    //SYSIN     DD *,DCB=BLKSIZE=80                       CARDS IN   *
*       ...CONTROL CARDS...                                           *
*    /*                                                               *
*                                                                     *
*    ...WHERE THE PARM TELLS WHAT IBM 3800 MODEL YOU ARE RUNNING      *
*       ON.   PARM='MODEL3' IS THE DEFAULT IF PARM IS OMITTED.        *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*     "DISIMAGE" CONTROL INFORMATION IS PUNCHED IN THE FIRST SIX      *
*      COLUMNS OF THE CONTROL CARDS. THE REMAINDER OF THE CARD,       *
*      WHILE IT IS IGNORED, WILL BE PRINTED ON THE CONTROL LISTING    *
*      AND THUS CAN BE USED FOR DOCUMENTATION.                        *
*                                                                     *
*                         CONTROL CARD FORMAT                         *
*                                                                     *
*      COLUMN  CODE  MEANING                                          *
*                                                                     *
*         1      C   ALL COMPONENTS OF A STANDARD IBM CHARACTER       *
*                     ARRANGEMENT TABLE (ALL LCS'S AND/OR GCM'S)      *
*                     WILL BE GENERATED. !!MUST BE ONLY CARD IN!!     *
*                                                                     *
*                F   FORMS CONTROL BUFFER (FCB) MODULE.               *
*                                                                     *
*                G   GRAPHIC CHARACTER MODIFICATION (GCM) MODULE.     *
*                                                                     *
*                L   LIBRARY CHARACTER SET (LCS) MODULE.              *
*                                                                     *
*                T   CHARACTER ARRANGEMENT TABLE (CAT) MODULE.        *
*                                                                     *
*         2      =   (MUST BE AN EQUAL SIGN)                          *
*                                                                     *
*         3      *   GENERATE WORLD TRADE NATIONAL USE GRAPHICS       *
*                               GCM (MUST BE  "G=*").                 *
*                                                                     *
*        3-4    XX   MUST BE TWO HEX DIGITS (2ND DIGIT ODD)           *
*                          FOR ALL LCS MODULES ONLY.                  *
*                                                                     *
*        3-6   XXXX  FOR ALL OTHER MODULES, CAN BE FROM 1 TO 4        *
*                      ALPHA, NUMERIC OR NATIONAL CHARACTERS.         *
*                                                                     *
*    XXXX VALUE IS PROVIDED BY BYTES 5 TO 8 OF THE IEBIMAGE MEMBER    *
*               NAME (E.G. FOR GRF2BRTA, CODE G=BRTA).                *
*                                                                     *
*                                                                     *
*                         SYSIN ERROR MESSAGES                        *
*                                                                     *
*               ERR01 CC2 NOT EQUAL       ALL CODES                   *
*               ERR02 NAME BLANK              "                       *
*               ERR03 NAME INVALID            "                       *
*               ERR04 IMBEDED BLANK           "                       *
*               ERR05 CODE INVALID            "                       *
*               ERR06 NAME TOO LONG       CODE L ONLY                 *
*               ERR07 NAME NOT HEX            "                       *
*               ERR08 NAME NOT ODD            "                       *
*               ERR09 UNKNOWN CHARS       CODE C ONLY                 *
*               ERR10 NOT 1ST/ONLY            "                       *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
         EJECT
DISIMAGE CSECT
R0       EQU   0                   *************
R1       EQU   1                   *           *
R2       EQU   2                   * REGISTERS *
R3       EQU   3                   *    ARE    *
R4       EQU   4                   *  EQUATED  *
R5       EQU   5                   *    TO     *
R6       EQU   6                   *  SYMBOLS  *
R7       EQU   7                   *    SO     *
R8       EQU   8                   *   THEY    *
R9       EQU   9                   *   WILL    *
R10      EQU   10                  *   SHOW    *
R11      EQU   11                  *    ON     *
R12      EQU   12                  *   CROSS   *
R13      EQU   13                  * REFERENCE *
R14      EQU   14                  *           *
R15      EQU   15                  *************
         USING *,R15               INITIALLY USE ENTRY AS BASE REGISTER
         B     $BG0001             BRANCH AROUND CONSTANTS
         DC    CL8'DISIMAGE'       CSECT ID
         DC    C'_',C'&SYSDATE.@&SYSTIME._' SYSTEM DATE AND TIME
$BG0001A DS    18F                 MY REGISTER SAVE AREA
$BG0001D DC    A($BG0001A+4096)
$BG0001  DS    0H
         STM   R14,R12,12(R13)     SAVE CLG PGMS REGS
         LA    R3,$BG0001A         LOAD ADDR OF MY REG SAVE AREA
         ST    R13,4(R3)           STORE ADDR OF CLG SAVE IN MINE
         ST    R3,8(R13)           STORE ADDR OF MY SAVE IN CLG PGM
         LR    R13,R3              POINT REG 13 AT MY SAVE AREA
         DROP  R15                 DROP INITIAL BASE REGISTER
         USING $BG0001A,R13,R12
         L     R12,$BG0001D        LOAD 2ND BASE REGISTER
         L     R3,0(R1)            LOAD ADDRESS AND
         LH    R4,0(R3)                 LENGTH OF PARM INFORMATION
         LTR   R4,R4               WAS PARM OMITTED (LENGTH=0)...
         BZ    ENDPARM                ..YES, USE DEFAULT (MODEL3)
         CH    R4,=H'+6'           IS PARM LENGTH SIX (MODELX)...
         BNE   ENDPARM                ..NO, USE DEFAULT (MODEL3)
         LA    R3,2(R3)            STEP PARM POINTER PAST THE LENGTH
         CLC   =C'MODEL1',0(R3)    IS THIS FOR AN IBM 3800 MODEL 1...
         BNE   ENDPARM                ..NO, USE DEFAULT (MODEL3)
         OI    MOD1SW+1,X'F0'      ACTIVATE OPTION CARD BYPASS
         MVI   MODEL,C'1'          SET MODEL NUMBER TO ONE
ENDPARM  EQU   *
         LA    R1,2                LOAD 1 TO SPECIFY UNIT  *** TIME ***
         SVC   11                  ISSUE TIME SVC                     *
         ST    R1,DBLWRD+4         MOVE JULIAN DATE INTO CORE AND
         ED    HDATE,DBLWRD+5           EDIT INTO HEADER LITERAL
         ST    R0,DBLWRD           MOVE DECIMAL TIME INTO CORE THEN
         MVO   DBLWRD+4(4),DBLWRD(3)    SHIFT INTO PACKED FORMAT AND
         ED    HTIME,DBLWRD+4           EDIT INTO HEADER LITERAL
         SR    R3,R3               ZERO SYSIN AND
         SR    R4,R4                    SYSUT2 COUNTERS
         EJECT
* OPEN1  EQU   *
         LA    R1,SIOB             LOAD REG1 W/LIST ADDR.  *** OPEN ***
         SVC   19                  ISSUE OPEN SVC                     *
         SR    R9,R9               ZERO LINE COUNTER
GETSIN   EQU   *
         LA    R0,SINRCD           POINT AT SYSIN RCD AREA  *** GET ***
         L     R1,SIOB             POINT AT SYSIN DCB                 *
         L     R15,48(R1)          LOAD GET ROUTINE ADDR              *
         BALR  R14,R15             LINK TO GET ROUTINE                *
         LA    R3,1(R3)            INCREMENT SYSIN COUNTER
         MVI   EMNO,X'01'          SET ERROR MESSAGE NUMBER
         CLI   SIEQUALS,C'='       BYTE 2 IS EQUAL SIGN...
         BNE   BADSIN                 ..NO, FLAG AS ERROR
         MVC   MNCA,SINAME         MOVE MODULE NAME TO COMPARE AREA
         MVI   EMNO,X'02'          SET ERROR MESSAGE NUMBER
         CLC   MNCA,BLANKS         IS MODULE NAME TOTALLY BLANK...
         BE    BADSIN                 ..YES, FLAG AS ERROR
         L     R14,=A(VMNTBL)      POINT AT VALID MODULE NAME TABLE
         TRT   MNCA,0(R14)         VALID MODULE NAME...
         BZ    CCHECK                 ..SO FAR, GO CHECK REQUEST CODE
         STC   R2,FBYTE               ..MAYBE NOT, SAVE FUNCTION BYTE
         MVI   EMNO,X'03'          SET ERROR MESSAGE NUMBER
         CLI   FBYTE,X'FF'         BAD CHARACTER...
         BE    BADSIN                 ..YES, FLAG AS ERROR
         CLI   MNCA,C'*'           WORLD TRADE NATIONAL USE GRAPHICS...
         BE    GCHECK                 ..YES, CHECK FOR G CODE
         MVI   EMNO,X'04'          SET ERROR MESSAGE NUMBER
         CLC   BLANKS,0(R1)        ALL REMAINING CHARACTERS BLANK...
         BNE   BADSIN                 ..NO, FLAG AS ERROR
CCHECK   EQU   *
         CLI   SIMODTYP,C'C'       CHARS NAME REQUEST...
         BNE   FCHECK                 ..NO, GO CHECK FOR FCB REQUEST
         MVI   EMNO,X'0A'          SET ERROR MESSAGE NUMBER
         LTR   R4,R4               WERE THERE ANY SYSUT2 CARDS OUT...
         BNZ   BADSIN                 ..YES, C CARD MUST BE 1ST/ONLY
         MVI   SINLINE,C'0'        FORCE DOUBLE SPACE FOR SYSIN LINE
         L     R10,=A(CHARSTBL)    POINT AT TABLE OF CHARS
         MVI   EMNO,X'09'          SET ERROR MESSAGE NUMBER
CC1      EQU   *
         CLC   SINAME,0(R10)       DOES THIS ENTRY MATCH OUR CHARS...
         BE    CC2                    ..YES, EXPAND TABLE VALUES
         CLI   0(R10),X'FF'        END OF TABLE...
         BE    BADSIN                 ..YES, FLAG AS ERROR
         LA    R10,28(R10)            ..NO, POINT AT NEXT ENTRY AND
         B     CC1                              GO CHECK IT OUT
*
CC2      EQU   *
         LA    R8,SINLINE          POINT AT OUTPUT LINE
         BAL   R11,PRTOUT          GO PRINT SYSIN CARD IMAGE
         NI    CRSW+1,X'0F'        RESET BRANCH TO NOP AND
         MVC   SIFLAG+3(11),=C'GENERATED *' CHANGE PRINT LINE FLAG
         LA    R10,4(R10)          STEP POINTER TO 1ST LCS NAME
         LA    R6,GENEDLS          POINT AT 1ST GEN-ED L SLOT
         LA    R5,4                SET LCS SCAN LIMIT
CC3      EQU   *
         CLC   =C'FF',0(R10)       NULL ENTRY...
         BE    CC4                    ..YES, BYPASS IT
         CLC   =C'7F',0(R10)       NULL ENTRY...
         BE    CC4                    ..YES, BYPASS IT
         CLI   0(R10),X'40'        EMPTY ENTRY...
         BE    CC4                    ..YES, BYPASS IT
         MVC   2(2,R6),0(R10)         ..NO, MOVE NAME TO GEN-ED SLOT
         LA    R6,6(R6)            INCREMENT THE SLOT ADDRESS
CC4      EQU   *
         LA    R10,2(R10)          INCREMENT TO NEXT TABLE VALUE
         BCT   R5,CC3                   (IF ANY) AND TRY AGAIN
         MVC   0(25,R6),GENEDGS    MOVE UP THE G ENTRIES AND STOPPER
         LA    R5,4                SET GCM SCAN LIMIT
CC5      EQU   *
         CLI   0(R10),X'40'        NULL ENTRY...
         BE    CC6                    ..YES, END OF SCAN
         MVC   2(4,R6),0(R10)         ..NO, MOVE NAME TO GEN-ED SLOT
         LA    R6,6(R6)            INCREMENT THE SLOT ADDRESS
         LA    R10,4(R10)          INCREMENT TO NEXT TABLE VALUE
         BCT   R5,CC5                   (IF ANY) AND TRY AGAIN
CC6      EQU   *
         MVI   0(R6),X'FF'         INSERT TABLE STOPPER
         LA    R6,GENEDLS          POINT AT 1ST GEN-ED L SLOT
         B     CRSWAD              GO INSERT FIRST GEN-ED SYSIN CARD
*
FCHECK   EQU   *
         CLI   SIMODTYP,C'F'       FCB MODULE REQUEST...
         BNE   TCHECK                 ..NO, GO CHECK FOR CAT REQUEST
         MVC   ATYPE+80,FCB        MOVE FCB AND
         MVI   ANAME+80,X'08'           CONTROL BYTE TO ASSIGN CARD (2)
         B     PRTSIN              GO LIST GOOD SYSIN CARD
*
TCHECK   EQU   *
         CLI   SIMODTYP,C'T'       CAT MODULE REQUEST...
         BNE   GCHECK                 ..NO, GO CHECK FOR GCM REQUEST
         MVC   ATYPE+80,TABLE      MOVE TABLE AND
         MVI   ANAME+80,X'10'           CONTROL BYTE TO ASSIGN CARD (2)
         B     PRTSIN              GO LIST GOOD SYSIN CARD
*
GCHECK   EQU   *
         CLI   SIMODTYP,C'G'       GCM MODULE REQUEST...
         BNE   LCHECK                 ..NO, GO CHECK FOR LCS REQUEST
         MVC   ATYPE+80,GRAPHIC    MOVE GRAPHIC AND
         MVI   ANAME+80,X'04'           CONTROL BYTE TO ASSIGN CARD (2)
         B     PRTSIN              GO LIST GOOD SYSIN CARD
*
LCHECK   EQU   *
         MVI   EMNO,X'05'          SET ERROR MESSAGE NUMBER
         CLI   SIMODTYP,C'L'       LCS MODULE REQUEST...
         BNE   BADSIN                 ..NO, FLAG AS ERROR
         MVC   ATYPE+80,CHARSET    MOVE CHARSET AND
         MVI   ANAME+80,X'04'           CONTROL BYTE TO ASSIGN CARD (2)
         MVI   EMNO,X'06'          SET ERROR MESSAGE NUMBER
         CLC   SINAME+2(2),BLANKS  NAME SUFFIX MORE THAN TWO BYTES...
         BNE   BADSIN                 ..YES, FLAG AS ERROR
         MVI   EMNO,X'07'          SET ERROR MESSAGE NUMBER
         L     R14,=A(VHVTBL)      POINT AT VALID HEX VALUE TABLE
         TRT   SINAME(1),0(R14)    TEST BYTE ONE FOR VALID HEX...
         BZ    LC2                    ..YES (ODD), GO TEST 2ND BYTE
         STC   R2,FBYTE            SAVE FUNCTION BYTE
         CLI   FBYTE,X'FF'         NOT A HEX CHARACTER...
         BE    BADSIN                 ..TRUE, FLAG AS ERROR
LC2      EQU   *
         L     R14,=A(VHVTBL)      POINT AT VALID HEX VALUE TABLE
         TRT   SINAME+1(1),0(R14)  IS BYTE TWO A VALID ODD HEX DIGIT...
         BZ    PRTSIN                 ..YES, GO LIST GOOD SYSIN CARD
         STC   R2,FBYTE            SAVE FUNCTION BYTE
         CLI   FBYTE,X'FF'         NOT A HEX CHARACTER...
         BE    BADSIN                 ..TRUE, FLAG AS ERROR
         MVI   EMNO,X'08'          SET ERROR MESSAGE NUMBER
BADSIN   EQU   *
         L     R1,=A(EMTBL)        POINT AT ERROR MESSAGE TABLE
         SR    R0,R0               ZERO WORK REGISTER AND
         IC    R0,EMNO                  INSERT ERROR MESSAGE NUMBER
         BCTR  R0,R0               DECREMENT NUMBER BY ONE
         SLL   R0,4                MULTIPLY RESULT BY SIXTEEN
         AR    R1,R0               ADD OFFSET TO BASE ADDRESS
         MVC   EMNO,0(R1)          MOVE TEXT TO MESSAGE FRAME
         MVC   SINERR,ERRMSG       MOVE ERROR FLAG TO PRINT LINE
PRTSIN   EQU   *
         MVI   SINLINE,C'0'        FORCE DOUBLE SPACE FOR SYSIN LINE
         LA    R8,SINLINE          POINT AT OUTPUT LINE
         BAL   R11,PRTOUT          GO PRINT SYSIN CARD IMAGE
         MVI   IMGLINE,C'0'        FORCE DOUBLE SPACE FOR IMAGE LINE 1
         CLI   SINERR,X'40'        WAS CARD BAD...
         BE    PUTII                  ..NO, GO PUT OUT IEBIMAGE INPUT
         MVC   SINERR,SINERR-1     BLANK SYSIN ERROR MESSAGE
         B     GETSIN                   AND GO GET NEXT CARD
*
PUTII    EQU   *
         BAL   R11,PUTREQ          GO PUT OUT IEBIMAGE INPUT
         B     GETSIN                   AND GO GET NEXT CARD
*
PUTREQ   EQU   *
         ST    R11,SAVER11A        SAVE RETURN ADDRESS
MOD1SW   DS    0H
         NOP   ALLREQ              NOP/BR IF IBM 3800 MODEL 1
         MVC   IMGRCD(73),OPTION   MOVE OPTION CARD TO OUTOUT AREA
         BAL   R11,PUTIMG          GO PUNCH/LIST IEBIMAGE OPTION CARD
ALLREQ   EQU   *
         MVC   IMGRCD(73),ASSIGN2  MOVE ASSIGN CARD (2) TO OUTPUT AREA
         BAL   R11,PUTIMG          GO PUNCH/LIST IEBIMAGE REQUEST CARD
         MVC   NNAME1,SINAME       MOVE MODULE NAME TO NAME CARD
         MVC   IMGRCD(73),NAME     MOVE NAME CARD TO OUTPUT AREA
         BAL   R11,PUTIMG          GO PUNCH/LIST IEBIMAGE NAME CARD
         L     R11,SAVER11A        RESTORE RETURN ADDRESS
CRSWAD   EQU   *
CRSW     DS    0H
         BR    R11                 BR/NOP IF CHARS REQUEST
         CLI   0(R6),X'FF'         END OF GEN-ED TABLE...
         BE    EOSIN                  ..YES, GO CLOSE SYSUT2/SYSIN
         MVC   SINRCD(6),0(R6)     MOVE GEN-ED SYSIN TO INPUT AREA
         LA    R6,6(R6)            POINT AT NEXT TABLE ENTRY AND
         B     GCHECK              GO GENERATE IEBIMAGE SYSIN
*
EOSIN    EQU   *                   CLOSE SYSIN/SYSUT2
         LA    R1,SIOB             LOAD REG1 W/LIST ADDR. *** CLOSE ***
         MVI   U2OB,X'80'          RESET SYSUT2 OPTION BYTE           *
         SVC   20                  ISSUE CLOSE SVC                    *
         LTR   R3,R3               WERE THERE ANY SYSIN CARDS IN...
         BZ    NOSIN                  ..NO, GO PUT OUT ERR MSG
         LTR   R4,R4               WERE THERE ANY SYSUT2 CARDS OUT...
         BZ    NOUT2                  ..NO, GO PUT OUT ERR MSG
         L     R8,=A(EOSMSG)       POINT AT END OF SYSIN MESSAGE
         BAL   R11,PRTOUT               AND GO PRINT IT
         LA    R1,PARAM            LOAD PARAMETER REG1     *** LINK ***
         LA    R15,LINKLIST        LOAD PARAMETER REG15               *
         SVC   6                   DSSUE LINK SVC (IEBIMAGE)          *
         ST    R15,RETCODE         SAVE RETURN CODE FROM IEBIMAGE
         LTR   R15,R15             IS RETURN CODE ZERO...
         BZ    OPEN2                  ..YES, GO OPEN SORTIN/SYSUT3
         NI    LIPSW+1,X'0F'       RESET LIST-INPUT-PAGES SWITCH TO NOP
OPEN2    EQU   *                   OPEN SYSUT3/SORTIN
         LA    R1,U3OB             LOAD REG1 W/LIST ADDR.  *** OPEN ***
         SVC   19                  ISSUE OPEN SVC                     *
         SR    R6,R6               ZERO OUTPUT COUNTER
GETCC1   EQU   *
         BAL   R11,GETUT3          GET IEBIMAGE LISTING LINE
TST4CC1  EQU   *
         CLI   UT3AREA,C'1'        IS CCTL = 1 (SKIP TO TOP OF PAGE)...
         BNE   GETCC1                 ..NO, GO GET ANOTHER LINE
*                    SYSTEM SUPPORT UTILITY --IEBIMAGE--
         CLC   SYSTEM,UT3AREA+41   IEBIMAGE HEADER LINE...
         BNE   GETCC1                 ..NO, GO GET ANOTHER LINE
GETIPL   EQU   *
         BAL   R11,GETUT3          GET IEBIMAGE LISTING LINE
         CLI   UT3AREA,C'1'        IS CCTL = 1 (SKIP TO TOP OF PAGE)...
         BE    CHKCC1                 ..YES, GO CHECK HEADER TYPE
LIPSW    DS    0H
         B     CBCHK               BR/NOP IF IEBIMAGE RC .NE. 0
         LA    R8,UT3AREA          PASS PRINT LINE TO SYSPRINT
         BAL   R11,PRTOUT               AND GO LIST IT
CBCHK    EQU   *
         CLI   UT3AREA+73,X'14'    OPTION CARD LINE...
         BE    GETIPL                 ..YES, GO GET NEXT LINE
         CLI   UT3AREA+73,X'00'    NAME CARD LINE...
         BE    GOTNAM                 ..YES, GO SAVE NAME
         CLC   =C'IEB',UT3AREA+1   IEBANNI MESSAGE LINE...
         BE    GOTMSG                 ..YES, GO CHECK CBSAVE
         MVC   GENMSG+23(8),UT3AREA+7 SAVE MODULE TYPE IN MESSAGE
         MVC   CBSAVE,UT3AREA+73   RETAIN CONTROL BYTE AND
         B     GETIPL                   GO GET NEXT LINE
*
GOTNAM   EQU   *
         MVC   ONAME,UT3AREA+16    SAVE NAME IN OPTION,
         MVC   GENMSG+45(4),ONAME               MESSAGE
         MVC   NNAME1,ONAME                      AND
         MVC   NNAME2,ONAME                     NAME CARDS
         LA    R2,NNAME1           POINT AT 1ST BYTE OF NAME CARD NAME
         LA    R3,4                SET SCAN LIMIT
GN2      EQU   *
         CLI   0(R2),X'40'         END OF NAME...
         BE    GN3                    ..YES, GO INSERT (R)
         LA    R2,1(R2)               ..NO, INCREMENT POINTER AND
         BCT   R3,GN2                       TRY NEXT BYTE (IF ANY)
GN3      EQU   *
         MVC   0(6,R2),=C'(R)   '  INSERT (R) AFTER NAME
         LA    R0,NAME             POINT AT OUTPUT CARD
         BAL   R11,PUTSRT          GO PUT CARD TO SORTIN
         MVI   GENMSG,C'0'         FORCE DOUBLE SPACE
         LA    R8,GENMSG           POINT AT GENERATING SOURCE MESSAGE
         BAL   R11,PRTOUT               AND GO PRINT IT
         CLI   MODEL,C'3'          IBM 3800 MODEL 3...
         BNE   GETIPL                 ..NO, GO GET NEXT LINE
         LA    R0,OPTION           POINT AT OUTPUT CARD
         BAL   R11,PUTSRT          GO PUT CARD TO SORTIN
         B     GETIPL                   AND GO GET NEXT LINE
*
GOTMSG   EQU   *
         CLI   CBSAVE,X'08'        FCB NAME...
         BNE   GETIPL                 ..NO, GO GET NEXT LINE
         CLC   =C'32',UT3AREA+5    IEBA32I SIZE OF FORM IS...
         BNE   GETIPL                 ..NO, GO GET NEXT LINE
         MVC   FCB1+10(20),FCBLIT  RESET FCB1 LINE LITERAL AND
         MVC   FCB1+30(42),FCB1+29    PROPIGATE THE TRAILING BLANK
         MVC   F1HT,UT3AREA+25     MOVE HUNDREDS/TENS AND
         MVC   F1O,UT3AREA+28           ONES DIGIT TO FCB CARD
         B     GETIPL              GO GET NEXT LINE
*
CHKCC1   EQU   *
         CLC   SYSTEM,UT3AREA+41   IEBIMAGE HEADER LINE...
         BE    GETIPL                 ..YES, CONTINUE SCAN
         SR    R2,R2               ZERO OFFSET REGISTER AND
         IC    R2,CBSAVE              INSERT CONTROL BYTE
         LA    R1,1                SET ABEND CODE
         CH    R2,=H'+16'          VALUE TOO HIGH FOR BRANCH TABLE...
         BH    BELLYUP                ..YES, GO SHOOT IT DOWN
         B     GI2(R2)             BRANCH TO ROUTINE BASED ON R2
GI2      DS    0H
         B     BELLYUP                  R2 = 00  (NAME)
         B     CGLINES                  R2 = 04  (CHARSET/GRAPHIC)
         B     FLINES                   R2 = 08  (FCB)
         B     BELLYUP                  R2 = 0C  (COPYMOD) (!!NEVER!!)
         B     TLINES                   R2 = 10  (TABLE)
*
CGLINES  EQU   *                   GRAPHIC OR CHARSET * * * * * * * * *
*                                  GRF2GT5A
         CLC   SAVE,UT3AREA+55     SAME MODULE AS LAST PAGE...
         BE    GETSEG                 ..YES, GO GET SEGMENT LINE
         CLC   =C'GRAF',UT3AREA+55 MODEL 1 GCM MODULE...
         BE    MOD1MOD                ..YES, CHECK PARM
         CLC   =C'LCS1',UT3AREA+55 MODEL 1 LCS MODULE...
         BE    MOD1MOD                ..YES, CHECK PARM
         CLC   =C'GRF2',UT3AREA+55 MODEL 3 GCM MODULE...
         BE    MOD3MOD                ..YES, CHECK PARM
         CLC   =C'LCS2',UT3AREA+55 MODEL 3 LCS MODULE...
         BE    MOD3MOD                ..YES, CHECK PARM
         B     GETCC1                 ..NO, GO GET ANOTHER LINE
*
NOSIN    EQU   *
         L     R8,=A(NOSINLIN)     POINT AT OUTPUT LINE
         B     CLOSEPRT            GO CLOSE PRINTER FILE
*
NOUT2    EQU   *
         L     R8,=A(NOUT2LIN)     POINT AT OUTPUT LINE
         B     CLOSEPRT            GO CLOSE PRINTER FILE
*
NOSORT   EQU   *
         L     R8,=A(NOSRTLIN)     POINT AT OUTPUT LINE
         B     CLOSEPRT            GO CLOSE PRINTER FILE
*
MOD1MOD  EQU   *
         LA    R1,2                SET ABEND CODE
         CLI   MODEL,C'1'          WAS PARM=MODEL1...
         BNE   BELLYUP                ..NO, SOMETHINGS WRONG
         MVC   DDATA,BLANKS        BLANK DATA AREA ON DATA CARD (1)
         MVC   DDATA+80,BLANKS                        DATA CARD (2)
         MVC   DDATA+160,BLANKS                       DATA CARD (3)
         MVC   DDATA+240,BLANKS                   AND DATA CARD (4)
         B     SAVENAME               ..YES, GO ON
*
MOD3MOD  EQU   *
         LA    R1,3                SET ABEND CODE
         CLI   MODEL,C'3'          WAS PARM=MODEL3...
         BNE   BELLYUP                ..NO, SOMETHINGS WRONG
SAVENAME EQU   *
         MVC   SAVE,UT3AREA+55     SAVE FULL MODULE NAME FOR CONTROL
         MVC   ANAME,ONAME         SAVE NAME IN ASSIGN (1),
         MVC   DNAME,ONAME                  AND DATA (1) CARDS
         MVC   ATYPE,GRAPHIC       MOVE GRAPHIC TO ASSIGN CARD
         CLI   UT3AREA+55,C'G'     IS THIS A GCM MODULE...
         BE    REPL                   ..YES, GO REPLICATE MULTI-CARDS
         MVC   ATYPE,CHARSET       MOVE CHARSET TO ASSIGN CARD
REPL     EQU   *
         MVC   ASSIGN2,ASSIGN1     REPLICATE ASSIGN1 TO ASSIGN2
         MVC   ASSIGN3,ASSIGN1                          ASSIGN3
         MVC   ASSIGN4,ASSIGN1                      AND ASSIGN4
         MVC   DATA2,DATA          REPLICATE DATA TO DATA2
         MVC   DATA3,DATA                            DATA3
         MVC   DATA4,DATA                        AND DATA4
GETSEG   EQU   *
         BAL   R11,GETUT3          GET IEBIMAGE SEGMENT LINE
TST4SEG  EQU   *
* SEGMENT   001                           SEGMENT   002
         LA    R1,4                SET ABEND CODE
         CLC   =C'SEGM',UT3AREA+2  SEGMENT INFO LINE...
         BNE   BELLYUP                ..NO, GO DUMP
         MVC   ASGNO,UT3AREA+13    MOVE SEGMNT-#-A TO ASSIGN CARD (1)
         MVC   DSGNO,ASGNO                        AND DATA CARD (1)
         LA    R3,1                INITIALIZE SEGMENTS ON PAGE COUNT
         CLI   MODEL,C'3'          IBM 3800 MODEL 3...
         BE    SEGM3                  ..YES, LOOK FOR MORE SEGMENTS
* SEGM1  EQU   *
         CLI   UT3AREA+43,X'40'    MODEL 1 SEGMENT B...
         BE    GETASG                 ..NO, GO GET ASSIGNMENT LINE
         MVC   ASGNO+80,UT3AREA+43 MOVE SEGMNT-#-B TO ASSIGN CARD (2)
         MVC   DSGNO+80,ASGNO+80                  AND DATA CARD (2)
         LA    R3,1(R3)            INCREMENT SEGMENTS ON PAGE COUNT
         CLI   UT3AREA+73,X'40'    MODEL 1 SEGMENT C...
         BE    GETASG                 ..NO, GO GET ASSIGNMENT LINE
         MVC   ASGNO+160,UT3AREA+73 MOVE SEGMNT-#-C TO ASSIGN CARD (3)
         MVC   DSGNO+160,ASGNO+160                 AND DATA CARD (3)
         LA    R3,1(R3)            INCREMENT SEGMENTS ON PAGE COUNT
         CLI   UT3AREA+103,X'40'   MODEL 1 SEGMENT D...
         BE    GETASG                 ..NO, GO GET ASSIGNMENT LINE
         MVC   ASGNO+240,UT3AREA+103 MOVE SEGMNT-#-D TO ASSIGN CARD (4)
         MVC   DSGNO+240,ASGNO+240                  AND DATA CARD (4)
         LA    R3,1(R3)            INCREMENT SEGMENTS ON PAGE COUNT
         B     GETASG              GO GET ASSIGNMENT LINE
*
SEGM3    EQU   *
         CLI   UT3AREA+53,X'40'    MODEL 3 SEGMENT B...
         BE    GETASG                 ..NO, GO GET ASSIGNMENT LINE
         MVC   ASGNO+80,UT3AREA+53 MOVE SEGMNT-#-B TO ASSIGN CARD (2)
         MVC   DSGNO+80,ASGNO+80                  AND DATA CARD (2)
         LA    R3,1(R3)            INCREMENT SEGMENTS ON PAGE COUNT
         CLI   UT3AREA+93,X'40'    MODEL 3 SEGMENT C...
         BE    GETASG                 ..NO, GO GET ASSIGNMENT LINE
         MVC   ASGNO+160,UT3AREA+93 MOVE SEGMNT-#-C TO ASSIGN CARD (3)
         MVC   DSGNO+160,ASGNO+160                 AND DATA CARD (3)
         LA    R3,1(R3)            INCREMENT SEGMENTS ON PAGE COUNT
GETASG   EQU   *
         BAL   R11,GETUT3          GET IEBIMAGE ASSIGNMENT LINE
*ASSIGNMENT 40  PITCH 15                 ASSIGNMENT C1  PITCH 15
         LA    R1,5                SET ABEND CODE
         CLC   ASSIGN,UT3AREA+1    ASSIGNMENT INFO LINE...
         BNE   BELLYUP                ..NO, GO DUMP
         MVC   AHEX,UT3AREA+12     MOVE ASSIGNMENT-A AND
         MVC   APITCH,UT3AREA+22        PITCH-A TO ASSIGN CARD (1)
         CLI   MODEL,C'3'          IBM 3800 MODEL 3...
         BE    ASGM3                  ..YES, LOOK FOR MORE SEGMENTS
* ASGM1  EQU   *
         CLI   UT3AREA+42,X'40'    MODEL 1 SEGMENT B...
         BE    PUTASG                 ..NO, GO PUT ASSIGNMENT LINE
         MVC   AHEX+80,UT3AREA+42  MOVE ASSIGNMENT-B AND
         MVC   APITCH+80,UT3AREA+52     PITCH-B TO ASSIGN CARD (2)
         CLI   UT3AREA+72,X'40'    MODEL 1 SEGMENT C...
         BE    PUTASG                 ..NO, GO PUT ASSIGNMENT LINE
         MVC   AHEX+160,UT3AREA+72 MOVE ASSIGNMENT-C AND
         MVC   APITCH+160,UT3AREA+82    PITCH-C TO ASSIGN CARD (3)
         CLI   UT3AREA+102,X'40'   MODEL 1 SEGMENT D...
         BE    PUTASG                 ..NO, GO PUT ASSIGNMENT LINE
         MVC   AHEX+240,UT3AREA+102 MOVE ASSIGNMENT-D AND
         MVC   APITCH+240,UT3AREA+112    PITCH-D TO ASSIGN CARD (4)
         B     PUTASG              GO PUT ASSIGNMENT LINE
*
ASGM3    EQU   *
         CLI   UT3AREA+52,X'40'    MODEL 3 SEGMENT B...
         BE    PUTASG                 ..NO, GO PUT ASSIGNMENT LINE
         MVC   AHEX+80,UT3AREA+52  MOVE ASSIGNMENT-B AND
         MVC   APITCH+80,UT3AREA+62     PITCH-B TO ASSIGN CARD (2)
         CLI   UT3AREA+92,X'40'    MODEL 3 SEGMENT C...
         BE    PUTASG                 ..NO, GO PUT ASSIGNMENT LINE
         MVC   AHEX+160,UT3AREA+92 MOVE ASSIGNMENT-C AND
         MVC   APITCH+160,UT3AREA+102   PITCH-C TO ASSIGN CARD (3)
PUTASG   EQU   *
         LR    R2,R3               SET CYCLE LIMIT (SEGS PER PAGE)
         LA    R4,ASSIGN1          POINT AT ASSIGN CARD (1)
PUTASGN  EQU   *
         LR    R0,R4               POINT AT OUTPUT CARD
         BAL   R11,PUTSRT          GO PUT CARD TO SORTIN
         LA    R4,80(R4)           INCREMENT TO NEXT CARD (IF ANY)
         BCT   R2,PUTASGN               AND GO PUT IT OUT
         BAL   R11,GETUT3          GET IEBIMAGE COLUMN NBRS LINE
*      123456789012345678901234                123456789012345678901234
GETDATA  EQU   *
         BAL   R11,GETUT3          GET IEBIMAGE DATA LINE
*   1 .                        .            1 .
         CLI   UT3AREA+6,C'.'      DATA LINE...
         BNE   TST4CC0                ..NO, GO TEST FOR DOUBLE SPACE
         MVC   DSQNO1,UT3AREA+3    MOVE SEQUENCE NBR TO DATA LINE (1)
         CLI   DSQNO1,X'40'        SINGLE DIGIT (LEADING BLANK)...
         BNE   REPL2                  ..NO, GO REPLICATE SEQ NO
         MVI   DSQNO1,C'0'            ..YES, INSERT LEADING ZERO
REPL2    EQU   *
         MVC   DSQNO2,DSQNO1       REPLICATE SEQ NO TO DATA CARD (1)
         MVC   DSQNO1+80,DSQNO1                        DATA CARD (2)
         MVC   DSQNO2+80,DSQNO1                        DATA CARD (2)
         MVC   DSQNO1+160,DSQNO1                       DATA CARD (3)
         MVC   DSQNO2+160,DSQNO1                       DATA CARD (3)
         MVC   DSQNO1+240,DSQNO1                       DATA CARD (4)
         MVC   DSQNO2+240,DSQNO1                       DATA CARD (4)
         CLI   MODEL,C'3'          IBM 3800 MODEL 3...
         BE    DATM3                  ..YES, LOOK FOR MORE SEGMENTS
* DATM1  EQU   *
         MVC   DDATA(18),UT3AREA+7 MOVE DATA-A TO CARD (1)
         CLI   UT3AREA+36,C'.'     MODEL 1 SEGMENT B...
         BNE   PUTDAT                 ..NO, GO PUT DATA LINE
         MVC   DDATA+80(18),UT3AREA+37 MOVE DATA-B TO CARD (2)
         CLI   UT3AREA+66,C'.'     MODEL 1 SEGMENT C...
         BNE   PUTDAT                 ..NO, GO PUT DATA LINE
         MVC   DDATA+160(18),UT3AREA+67 MOVE DATA-C TO CARD (3)
         CLI   UT3AREA+96,C'.'     MODEL 1 SEGMENT D...
         BNE   PUTDAT                 ..NO, GO PUT DATA LINE
         MVC   DDATA+240(18),UT3AREA+97 MOVE DATA-D TO CARD (4)
         B     PUTDAT              GO PUT DATA LINE
*
DATM3    EQU   *
         MVC   DDATA,UT3AREA+7     MOVE DATA-A TO CARD (1)
         CLI   UT3AREA+46,C'.'     MODEL 3 SEGMENT B...
         BNE   PUTDAT                 ..NO, GO PUT DATA LINE
         MVC   DDATA+80,UT3AREA+47 MOVE DATA-B TO CARD (2)
         CLI   UT3AREA+86,C'.'     MODEL 3 SEGMENT C...
         BNE   PUTDAT                 ..NO, GO PUT DATA LINE
         MVC   DDATA+160,UT3AREA+87 MOVE DATA-C TO CARD (3)
PUTDAT   EQU   *
         LR    R2,R3               SET CYCLE LIMIT (SEGS PER PAGE)
         LA    R4,DATA             POINT AT DATA CARD (1)
PUTDATA  EQU   *
         LR    R0,R4               POINT AT OUTPUT CARD
         BAL   R11,PUTSRT          GO PUT CARD TO SORTIN
         LA    R4,80(R4)           INCREMENT TO NEXT CARD (IF ANY)
         BCT   R2,PUTDATA               AND GO PUT IT OUT
         B     GETDATA             GO GET NEXT DATA LINE
*
TST4CC0  EQU   *
         CLI   UT3AREA,C'0'        IS CCTL = 0 (DOUBLE SPACE)...
         BE    TST4SEG                ..YES, GO TEST FOR SEGMENT LINE
         CLI   UT3AREA,C'1'        IS CCTL = 1 (TOP OF PAGE)...
         BE    CHKCC1                 ..YES, CHECK FOR TYPE OF HEADER
         B     GETCC1                 ..NO, GO SCAN FOR NEXT HEADER
*
FLINES   EQU   *
*         PRINT LINE   1 AT 12 LINES PER INCH - HAS CHANNEL  1 CODE.
         MVI   CHTBL,X'FF'         MOVE HI-VALUE TO CHANNEL TABLE AND
         MVC   CHTBL+1(119),CHTBL    PROPIGATE THROUGHOUT THE TABLE
         MVC   LPI,UT3AREA+28      MOVE INITIAL LPI TO SAVE
         SP    NOL,NOL               ZERO NUMBER OF LINES AND
         ZAP   SEQ,=P'+10'             INITIALIZE STARTING SEQ NBR
         MVC   F1NAME,ONAME        MOVE NAME TO FCB CARD
         LA    R7,CHTBL            INITIALIZE CHANNEL TABLE POINTER
         LA    R5,41               SET CARDS SCAN LIMIT
         LA    R2,F1O+6            POINT AT OPENING LEFT PARENTHESIS
         CLI   F1HT,X'40'          DOES SIZE VALUE HAVE LEADING BLANK..
         BNE   FL2                    ..NO, BYPASS LEFT ADJUST
         MVC   F1HT(8),F1HT+1         ..YES, SHIFT TO LEFT,
         BCTR  R2,0                          DECREMENT POINTER, AND
         LA    R5,1(R5)                      INCREMENT SCAN LIMIT
FL2      EQU   *
         CLC   LPI,UT3AREA+28      LPI VALUE SAME AS PREVIOUS...
         BE    FL7                    ..YES, GO UP NUMBER OF LINES
         NI    SWFL+1,X'0F'        RESET BRANCH TO NOP
FL2I     EQU   *
         CH    R5,=H'+9'           ENOUGH ROOM FOR ONE MORE ENTRY...
         BH    FL3                    ..YES, GO INSERT IT
         BAL   R11,FL90            GO FINISH/PUT FCB LINE
*          FCB SIZE=HTO,LPI=((12,1),(8,1),(12,1),(8,1),(12,1),(8,1),
FL3      EQU   *
         MVC   1(9,R2),=C'(LL,NNN),'    INSERT LPI ENTRY MASK
         MVC   2(2,R2),LPI         INSERT LPI VALUE
         UNPK  5(3,R2),NOL         UNPACK NBR OF LINES AT THIS LPI
         OI    7(R2),X'F0'              AND CLEAR THE SIGN
         LA    R1,9                SET INCREMENT FOR SCAN POINTER
FL4      EQU   *
         CLI   5(R2),X'F0'         H/O ZERO ON NBR OF LINES...
         BNE   FL5                    ..NO MORE, GO CHECK LPI
         MVC   5(5,R2),6(R2)          ..YES, SHIFT LEFT ONE BYTE,
         BCTR  R1,0                            DECREMENT THE INCREMENT
         B     FL4                               AND TEST AGAIN
*
FL5      EQU   *
         CLI   2(R2),X'40'         H/O BLANK ON LPI...
         BNE   FL6                    ..NO, GO INCREMENT SCAN POINTER
         MVC   2(8,R2),3(R2)          ..YES, SHIFT LEFT ONE BYTE,
         BCTR  R1,0                            DECREMENT THE INCREMENT
FL6      EQU   *
         AR    R2,R1               INCREMENT THE SCAN POINTER AND
         SR    R5,R1                  DECREMENT THE SCAN LIMIT
SWFL     DS    0H
         NOP   FL9                 NOP/BRANCH FOR LAST LPI ENTRY
         MVC   LPI,UT3AREA+28      MOVE NEXT LPI TO SAVE AND
         SP    NOL,NOL               ZERO NUMBER OF LINES
FL7      EQU   *
         AP    NOL,=P'+1'          INCREMENT NUMBER OF LINES
         CLI   UT3AREA+46,C'-'     DOES LINE HAVE A CHANNEL CODE...
         BNE   FL8                    ..NO, GO GET NEXT LINE
         LA    R1,6                SET ABEND CODE
         CLI   1(R7),X'FF'         UNUSED TABLE ENTRY...
         BNE   BELLYUP                ..NO, TABLE OVERFLOW - DUMP
         MVC   0(2,R7),UT3AREA+60  MOVE CHANNEL CODE AND
         MVC   2(3,R7),UT3AREA+21       LINE NUMBER TO TABLE ENTRY
         LA    R7,5(R7)            INCREMENT TABLE POINTER
FL8      EQU   *
         BAL   R11,GETUT3          GET IEBIMAGE LISTING LINE
         CLC   =C'PRIN',UT3AREA+10 ANOTHER FCB PRINT LINE...
         BE    FL2                    ..YES, GO CHECK LPI
         CLI   0(R2),C'('          IS THIS FIRST AND ONLY LPI...
         BE    FL10                   ..YES, STORE ONLY LPI
         OI    SWFL+1,X'F0'        RESET NOP TO BRANCH
         B     FL2I                GO STORE LAST LPI IN  CARD
*
FL9      EQU   *
         MVI   0(R2),C')'          CLOSE LPI PARENTHESIS
         B     FL12                GO CHECK CHANNEL TABLE
*
FL10     EQU   *
         MVC   0(2,R2),LPI         MOVE LPI TO OUTPUT CARD
         CLI   0(R2),X'40'         H/O BLANK ON LPI...
         BE    FL11                   ..YES, GO LEFT ADJUST
         LA    R2,1(R2)            POINT AT LAST BYTE USED
         BCTR  R5,0                DECREMENT SCAN LIMIT FOR ONE BYTE
         B     FL12                GO CHECK CHANNEL TABLE
*
FL11     EQU   *
         MVC   0(2,R2),1(R2)       SHIFT ONE BYTE TO LEFT
FL12     EQU   *
         CLI   CHTBL,X'FF'         ANY ENTRIES IN CHANNEL TABLE...
         BE    FL20                   ..NO, GO PUT OUT FINAL CARD
         MVI   1(R2),C','             ..YES, INSERT TRAILING COMMA
         BAL   R11,FL90            GO FINISH/PUT THIS FCB LINE
         LA    R7,CHTBL            POINT AT FIRST ENTRY IN TABLE
         CLI   CHTBL+5,X'FF'       MORE THAN ONE ENTRY IN TABLE...
         BE    FL13                   ..NO, JUST PUT IT OUT
         LA    R1,ZSORTLST         LOAD LIST ADDR IN REG1  *** CALL ***
         L     R15,=V(ZSORTZ)      LOAD 15 WITH ENTRY ADDR            *
         BALR  R14,R15             BRANCH TO ENTRY POINT              *
FL13     EQU   *
         MVC   1(2,R2),=C'CH'      MOVE LITERAL
         MVC   3(2,R2),0(R7)            CHANNEL NUMBER AND
         MVC   5(2,R2),=C'=('           LITERAL TO CARD
         LA    R1,6                LOAD INCREMENT FOR SCAN POINTER
         CLI   3(R2),X'40'         H/O BLANK ON CHANNEL NUMBER...
         BNE   FL14                   ..NO, GO CHECK FOR MULTIPLES
         MVC   3(4,R2),4(R2)          ..YES, SHIFT ONE BYTE LEFT AND
         BCTR  R1,0                          DECREMENT THE INCREMENT
FL14     EQU   *
         AR    R2,R1               INCREMENT THE SCAN POINTER AND
         SR    R5,R1                  DECREMENT THE SCAN LIMIT
FL15     EQU   *
         MVC   1(3,R2),2(R7)       MOVE LINE NUMBER TO CARD AND
         LA    R1,3                LOAD INCREMENT FOR SCAN POINTER
FL16     EQU   *
         CLI   1(R2),X'40'         H/O BLANK ON LINE NUMBER...
         BNE   FL17                   ..NO MORE, GO INSERT TRAILER
         MVC   1(3,R2),2(R2)          ..YES, SHIFT LEFT ONE BYTE,
         BCTR  R1,0                            DECREMENT THE INCREMENT
         B     FL16                              AND TEST AGAIN
*
FL17     EQU   *
         AR    R2,R1               INCREMENT THE SCAN POINTER AND
         SR    R5,R1                  DECREMENT THE SCAN LIMIT
         CLC   0(2,R7),5(R7)       DOES CHANNEL OCCUR ON MULTIPLE LINES
         BNE   FL18                   ..NO, GO CHECK FOR MORE ENTRIES
         MVI   1(R2),C','          INSERT DELIMITER AND
         LA    R2,1(R2)            INCREMENT THE SCAN POINTER AND
         BCTR  R5,0                   DECREMENT THE SCAN LIMIT
         LA    R7,5(R7)            POINT AT NEXT TABLE ENTRY AND
         B     FL15                     GO MOVE IT TO CARD
*
FL18     EQU   *
         LA    R7,5(R7)            POINT AT NEXT TABLE ENTRY
         CLI   0(R7),X'FF'         END OF TABLE...
         BE    FL19                   ..YES, GO PUT OUT LAST FCB CARD
         MVC   1(2,R2),=C'),'      INSERT DELIMITERS AND
         BAL   R11,FL90            GO FINISH/PUT THIS FCB LINE AND
         B     FL13                     GO FORMAT NEXT LINE
*
FL19     EQU   *
         MVI   1(R2),C')'          INSERT DELIMITER AND
FL20     EQU   *
         BAL   R11,FL91            GO FINISH/PUT THIS FCB LINE AND
         B     TST4CC1                  SCAN FOR NEXT EJECT
*
FL90     EQU   *
         MVI   F1CC,C'*'           INSERT CONTINUATION CHARACTER
FL91     EQU   *
         ST    R11,SAVER11A        SAVE RETURN ADDRESS
         UNPK  F1SEQ(5),SEQ        UNPACK SEQUENCE NBR INTO FCB CARD
         AP    SEQ,=P'+10'           AND INCREMENT SEQUENCE NUMBER
         LA    R0,FCB1             POINT AT OUTPUT CARD
         BAL   R11,PUTSRT          GO PUT CARD TO SORTIN
         MVC   FCB1+10(62),FCB1+9  BLANK OUT CARD,
         LA    R5,55                    SET SCAN LIMIT AND
         LA    R2,F1DATA-1              POINT AT CARD COLUMN 15
         L     R11,SAVER11A        LOAD RETURN ADDRESS AND
         BR    R11                   RETURN TO MAIN LOGIC
*
TLINES   EQU   *
*                                                      XTB1JSB2
         LA    R1,7                SET ABEND CODE
         CLC   =C'XTB1',UT3AREA+55 CHARACTER ARRANGEMENT TABLE LIST...
         BNE   BELLYUP                ..NO, GO DUMP
         MVC   CAT1+9(12),CATLIT   RESET CAT1 LINE LITERAL AND
         MVC   CAT1+21(51),CAT1+20    PROPIGATE THE TRAILING BLANK
         MVC   C1NAME,ONAME        MOVE NAME TO TABLE CARD AND
         ZAP   SEQ,=P'+10'            INITIALIZE STARTING SEQ NBR
         LA    R5,50               SET CARDS SCAN LIMIT
         SR    R4,R4               ZERO NULL COUNTER
         LA    R2,C1DATA+4         POINT AT OPENING LEFT PARENTHESIS
TL2      EQU   *
*         X0     X1     X2     X3     X4     X5     X6     X7     X8
         BAL   R11,GETUT3          GET IEBIMAGE LISTING LINE
         CLI   UT3AREA+3,C'X'      TRANSLATE TABLE LINE...
         BNE   TL2                    ..NO, GET NEXT LINE
TL3      EQU   *
* 0X       *    2 01   2 02   2 03   2 04   2 05   2 06   2 07   2 08
         LA    R7,UT3AREA+9        POINT AT 1ST SLOT ON LINE IN
         LA    R10,HDTBL                AND 1ST HEX DIGIT (0)
         LA    R3,16               SET SLOTS ON LINE LIMIT
TL4      EQU   *
         CLI   2(R7),C'*'          NULL SLOT...
         BNE   TL6                    ..NO, GO BUILD SUBPARAMETER
         LA    R4,1(R4)               ..YES, UP THE NULL COUNT
TL5      EQU   *
         LA    R7,7(R7)            POINT AT NEXT SLOT (IF ANY)
         LA    R10,1(R10)               AND NEXT HEX DIGIT
         BCT   R3,TL4                 THEN GO TEST FOR NULL
         BAL   R11,GETUT3          GET IEBIMAGE LISTING LINE
         CLI   UT3AREA+3,C'X'      TRANSLATE TABLE LINE...
         BE    TL3                    ..YES, GO PROCESS IT
         B     TL8                    ..NO, GO CLOSE PARENTHESES
*
TL6      EQU   *
         CH    R5,=H'+10'          ENOUGH ROOM FOR ONE MORE ENTRY...
         BH    TL7                    ..YES, GO INSERT IT
         BAL   R11,TL90            GO FINISH/PUT TABLE LINE
TL7      EQU   *
         MVC   1(10,R2),=C'(FF,3F,0),'  INSERT LOC VALUE MASK
         MVC   2(1,R2),UT3AREA+2   INSERT SIXTEENS DIGIT AND
         MVC   3(1,R2),0(R10)             ONES DIGIT IN XLOC (00-FF)
         MVC   5(2,R2),2(R7)       MOVE WCGM OFFSET TO CLOC (00-3F)
         MVC   8(1,R2),0(R7)       MOVE WCGM NUMBER TO SETNO (0-3)
         LA    R2,10(R2)           POINT AT TRAILING COMMA
         SH    R5,=H'+10'          DECREMENT BYTES LEFT
         B     TL5                 GO STEP TO NEXT SLOT
*
TL8      EQU   *
         MVC   0(2,R2),=C'),'      CLOSE OFF LOC PARAMETER AND
         BAL   R11,TL90            GO FINISH/PUT TABLE LINE
         LA    R1,8                SET ABEND CODE
TL9      EQU   *
*CGM IDENTIFICATION ORDER    0       1       2       3
         CLC   =C'CGM ',UT3AREA+1  CGM IDENTIFICATION LINE...
         BNE   BELLYUP                ..NO, GO DUMP
         CLC   =C'ORDE',UT3AREA+20 CGM HEADER LINE...
         BNE   TL10                   ..NO, GO EXTRACT CODES
         BAL   R11,GETUT3          GET IEBIMAGE LISTING LINE
         B     TL9                 GO CHECK FOR DATA LINE
*
TL10     EQU   *
*CGM IDENTIFICATION          FF      FF      FF      *
         MVC   1(7,R2),=C'CGMID=(' INSERT CGMID VALUE MASK AND
         LA    R2,7(R2)            POINT AT TRAILING LEFT PAREN
         LA    R3,4                SET NUMBER OF CODES LIMIT
         LA    R7,UT3AREA+29       POINT AT FIRST CODE POSITION
TL11     EQU   *
         CLI   0(R7),C'*'          ANY MORE CODES...
         BE    TL12                   ..NO, CHECK FOR ANY IN
         MVC   1(2,R2),0(R7)       MOVE CGMID CODE AND
         MVI   3(R2),C','               TRAILING COMMA TO CARD OUT
         LA    R2,3(R2)            POINT AT TRAILING COMMA AND
         LA    R7,8(R7)                  NEXT POSSIBLE CODE
         BCT   R3,TL11             GO CHECK NEXT CODE (IF ANY)
TL12     EQU   *
         LA    R1,9                SET ABEND CODE
         CLI   0(R2),C','          TRAILING COMMA...
         BNE   BELLYUP                ..NO, GO DUMP
         BAL   R11,GETUT3          GET IEBIMAGE LISTING LINE
*GRAPHIC MODIFICATION RECORDS       GRAFGT0A    GRAFGT0B    GRAFJSB2
*GRAPHIC MODIFICATION RECORDS       ****NONE****
         LA    R1,10               SET ABEND CODE
         CLC   GRAPHIC,UT3AREA+1   GRAPHIC MODIFICATION DATA LINE...
         BNE   BELLYUP                ..NO, GO DUMP
         CLI   UT3AREA+36,C'*'     NO GCM MODULES (****NONE****)...
         BE    TL16                   ..TRUE, GO CLOSE CGM PARENS
         MVC   0(11,R2),=C'),GCMLIST=(' INSERT GCMLIST LITERAL
         LA    R2,10(R2)           POINT AT OPENING PAREN
         LA    R3,4                SET NUMBER OF CODES LIMIT
         LA    R7,UT3AREA+36       POINT AT FIRST CODE POSITION
TL13     EQU   *
         CLI   0(R7),X'40'         ANY MORE CODES...
         BE    TL16                   ..NO, CHECK FOR ANY IN
         MVC   1(4,R2),4(R7)       MOVE GCM CODE AND
TL14     EQU   *
         LA    R2,1(R2)            POINT AT NEXT OUTPUT BYTE
         CLI   0(R2),X'40'         END OF GCM MODULE SUFFIX...
         BNE   TL14                   ..NO, SCAN TO NEXT BYTE
         MVI   0(R2),C','          MOVE TRAILING COMMA TO CARD OUT
         LA    R7,12(R7)           POINT AT NEXT POSSIBLE CODE
         BCT   R3,TL13             GO CHECK NEXT CODE (IF ANY)
         LA    R1,11               SET ABEND CODE
         CLI   0(R2),C','          TRAILING COMMA...
         BNE   BELLYUP                ..NO, GO DUMP
TL16     EQU   *
         MVI   0(R2),C')'          CLOSE FINAL PARENS
         BAL   R11,TL91            GO FINISH/PUT LAST TABLE LINE
         MVC   NULLMSG+6(3),=C'*NO' INSERT INITIAL VALUE IN MESSAGE
         LTR   R4,R4               ANY NULL POSITIONS IN TABLE...
         BZ    TL17                   ..NO, GO PUT MESSAGE AS IS
         CVD   R4,DBLWRD           CONVERT NULL COUNT TO DECIMAL
         MVC   NULLMSG+6(3),=X'202120' INSERT EDIT MASK IN MESSAGE AND
         ED    NULLMSG+5(4),DBLWRD+6   EDIT NULL COUNT ONTO IT
TL17     EQU   *
         LA    R8,NULLMSG          POINT AT NULL COUNT MESSAGE AND
         BAL   R11,PRTOUT               GO PRINT IT OUT
         B     TST4CC1             GO SCAN FOR NEXT EJECT
*
TL90     EQU   *
         MVI   C1CC,C'*'           INSERT CONTINUATION CHARACTER
TL91     EQU   *
         ST    R11,SAVER11A        SAVE RETURN ADDRESS
         UNPK  C1SEQ(5),SEQ        UNPACK SEQUENCE NBR INTO CAT CARD
         AP    SEQ,=P'+10'           AND INCREMENT SEQUENCE NUMBER
         LA    R0,CAT1             POINT AT OUTPUT CARD
         BAL   R11,PUTSRT          GO PUT CARD TO SORTIN
         MVC   CAT1+1(71),CAT1     BLANK OUT CARD
         LA    R5,55                    SET SCAN LIMIT AND
         LA    R2,C1DATA-1              POINT AT CARD COLUMN 15
         L     R11,SAVER11A        LOAD RETURN ADDRESS AND
         BR    R11                   RETURN TO MAIN LOGIC
*
EOUT3    EQU   *                   CLOSE SORTIN/SYSUT3
         LA    R1,U3OB             LOAD REG1 W/LIST ADDR. *** CLOSE ***
         MVI   SOOB,X'80'          RESET SORTIN OPTION BYTE           *
         SVC   20                  ISSUE CLOSE SVC                    *
         L     R8,=A(EOUMSG)       POINT AT END OF SYSUT3 MESSAGE
         BAL   R11,PRTOUT               AND GO PRINT IT
         LTR   R6,R6               ANY SORTIN RECORDS WRITTEN...
         BZ    NOSORT                 ..NO, GO PUT OUT ERR MSG
         LA    R1,PTRWORD          LOAD PARAMETER REG1     *** LINK ***
         LA    R15,SORTLIST        LOAD PARAMETER REG15               *
         SVC   6                   ISSUE LINK SVC (IEBIMAGE)          *
         ST    R15,RETCODE         SAVE RETURN CODE FROM SORT
         L     R8,=A(BADSORT)      POINT AT OUTPUT LINE
         LTR   R15,R15             WAS SORT SUCCESSFUL...
         BNZ   CLOSEPRT               ..NO, WRITE UNSUCCESSFUL MESSAGE
         MVC   11(16,R8),13(R8)       ..YES, CHANGE UN- TO SUCCESSFUL
CLOSEPRT EQU   *
         BAL   R11,PRTOUT          GO PRINT SORT SUCCESS MESSAGE
         LA    R1,SPOB             LOAD REG1 W/LIST ADDR. *** CLOSE ***
         MVI   SPOB,X'80'          RESET SYSPRINT OPTION BYTE         *
         SVC   20                  ISSUE CLOSE SVC                    *
         L     R15,RETCODE         LOAD RETURN CODE FROM FIELD
         L     R13,4(R13)          RESTORE POINTER TO CALLING PGM SAVE
         L     R14,12(R13)         LOAD RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE REGS 0 THRU 12
         BR    R14                 RETURN TO CALLING PROGRAM
*
BELLYUP  EQU   *
*        ABEND (1),DUMP
         LA    R0,128              PICK UP DUMP OPTION    *** ABEND ***
         SLL   R0,24               SHIFT TO HIGH ORDER                *
         OR    R1,R0               OR IN WITH COMPCODE                *
         SVC   13                  LINK TO ABEND ROUTINE              *
*
PUTIMG   EQU   *
         LA    R0,IMGRCD           LOAD PARAMETER REG 0     *** PUT ***
         L     R1,=A(UT2DCB)       LOAD PARAMETER REG 1               *
         L     R15,48(R1)          LOAD PUT ROUTINE ADDRESS           *
         BALR  R14,R15             LINK TO PUT ROUTINE                *
         LA    R4,1(R4)            INCREMENT SYSUT1 COUNTER
         LA    R8,IMGLINE          POINT AT PRINT LINE
PRTOUT   EQU   *
         LTR   R9,R9               ANY LINES LEFT...
         BP    PRTDTL                 ..YES, GO PRINT DETAIL LINE
         MVC   HPAGE,=X'202120'    MOVE MASK TO HEADER AND
         ED    HPAGE-1(4),PAGENBR       EDIT PAGE NUMBER ONTO IT
         LA    R0,HEADER           LOAD PARAMETER REG 0     *** PUT ***
         L     R1,=A(PRTDCB)       LOAD PARAMETER REG 1               *
         L     R15,48(R1)          LOAD PUT ROUTINE ADDRESS           *
         BALR  R14,R15             LINK TO PUT ROUTINE                *
         AP    PAGENBR,=P'+1'      INCREMENT PAGE NUMBER
         LA    R9,58               RESET LINE COUNTER
         MVI   0(R8),C'0'          FORCE DOUBLE SPACE AFTER HEADER
PRTDTL   EQU   *
         LR    R0,R8               LOAD PARAMETER REG 0     *** PUT ***
         L     R1,=A(PRTDCB)       LOAD PARAMETER REG 1               *
         L     R15,48(R1)          LOAD PUT ROUTINE ADDRESS           *
         BALR  R14,R15             LINK TO PUT ROUTINE                *
         CLI   0(R8),X'40'         SINGLE SPACE CARRIAGE CONTROL...
         BE    ONELINE                ..YES, DECREMENT ONE LINE
         BCTR  R9,0                   ..NO, DECREMENT TWO LINES
ONELINE  EQU   *
         BCTR  R9,0                DECREMENT LINE COUNTER
         MVI   0(R8),X'40'         RESET PRINT LINE TO SINGLE SPACE
         BR    R11                 RETURN TO MAIN LOGIC
*
GETUT3   EQU   *
         LA    R0,UT3AREA          LOAD PARAMETER REG 0     *** GET ***
         L     R1,U3OB             LOAD PARAMETER REG 1               *
         L     R15,48(R1)          LOAD GET ROUTINE ADDRESS           *
         BALR  R14,R15             LINK TO GET ROUTINE                *
         BR    R11                 RETURN TO MAIN LOGIC
*
PUTSRT   EQU   *
         L     R1,=A(SORTIN)       LOAD PARAMETER REG 1     *** PUT ***
         L     R15,48(R1)          LOAD PUT ROUTINE ADDRESS           *
         BALR  R14,R15             LINK TO PUT ROUTINE                *
         LA    R6,1(R6)            INCREMENT SORTIN COUNT
         BR    R11                 RETURN TO MAIN LOGIC
*
DBLWRD   DS    D
*
         DS    0F                  OPTION BYTE/DCB ADDRS FOR OPEN/CLOSE
SIOB     DC    X'00',AL3(SINDCB)
U2OB     DC    X'0F',AL3(UT2DCB)
SPOB     DC    X'8F',AL3(PRTDCB)
*
U3OB     DC    X'00',AL3(UT3DCB)
SOOB     DC    X'8F',AL3(SORTIN)
*
ZSORTLST DS    0F
         CALL  ,(CHTBL,COUNT,LRECL,H1,LRECL),VL,MF=L
*
COUNT    DC    H'24'
*
LRECL    DC    H'5'
*
H1       DC    H'1'
*
RETCODE  DS    F                   RETURN CODE
*
SAVER11A DS    F                   INTERIM R11 SAVE AREA
*
FWZERO   DC    A(0)
*
*        LINK PARAMETER LIST - POINTERS TO...
PARAM    DC    A(FWZERO)              ..PARM INFORMATION (NONE)
         DC    X'80',AL3(DDS)         ..ALTERNATE DDNAMES
*
LINKLIST DC    A(IEBIMAGE)         ADDR OF ENTRY POINT NAME
         DC    A(0)                DCB ADDRESS (NONE)
IEBIMAGE DC    CL8'IEBIMAGE'       ENTRY POINT NAME
*
SORTLIST DC    A(SORT)             ADDR OF ENTRY POINT NAME
         DC    A(0)                DCB ADDRESS (NONE)
SORT     DC    CL8'SORT'           ENTRY POINT NAME
*
PTRWORD  DS    0F                  POINTER TO PARAMETER LIST FOR SORT
         DC    X'80',AL3(PARMS)
*
PAGENBR  DC    PL2'1'              PAGE NUMBER
*
SAVE     DC    CL8' '              MODULE NAME SAVE
*
GENEDLS  DC    CL6'L=    '         1ST LCS MODULE NAME
         DC    CL6'L=    '         2ND LCS MODULE NAME
         DC    CL6'L=    '         3RD LCS MODULE NAME
         DC    CL6'L=    '         4TH LCS MODULE NAME
GENEDGS  DC    CL6'G=    '         1ST GCM MODULE NAME
         DC    CL6'G=    '         2ND GCM MODULE NAME
         DC    CL6'G=    '         3RD GCM MODULE NAME
         DC    CL6'G=    '         4TH GCM MODULE NAME
GENEDFF  DC    X'FF'               * * * TABLE STOPPER * * *
*
CBSAVE   DC    X'00'               CONTROL BYTE SAVE
*
* IEBIMAGE CONTROL CARDS
*
OPTION   DS    0CL80
         DC    CL72'        OPTION DEVICE=3800M3 '
ONAME    DC    XL4'14404040'
         DC    CL4'0000'
*
CHARSET  DC    CL7'CHARSET'
COPYMOD  DC    CL7'COPYMOD'
FCB      DC    CL7'    FCB'
GRAPHIC  DC    CL7'GRAPHIC'
TABLE    DC    CL7'  TABLE'
*
ASSIGN1  DS    0CL80
         DC    CL7' '
ATYPE    DC    CL7'GRAPHIC'
         DC    CL1' '
ASSIGN   DC    CL6'ASSIGN'
         DC    CL2'=('
AHEX     DC    CL2'XX'
         DC    CL1','
APITCH   DC    CL2'PP'
         DC    CL44') '
ANAME    DC    CL4'    '
ASGNO    DC    CL2'NN'
         DC    CL2'00'
*
ASSIGN2  DC    CL80' '
*
ASSIGN3  DC    CL80' '
*
ASSIGN4  DC    CL80' '
*
DATA     DS    0CL80
DDATA    DC    CL24' '
         DC    CL4'SEQ='
DSQNO1   DC    CL2'NN'
         DC    CL42' '
DNAME    DC    CL4'XXXX'
DSGNO    DC    CL2'NN'
DSQNO2   DC    CL2'NN'
*
DATA2    DC    CL80'                        SEQ=NN '
*
DATA3    DC    CL80'                        SEQ=NN '
*
DATA4    DC    CL80'                        SEQ=NN '
*
LPI      DC    CL2'XX'             LINES PER INCH
*
NOL      DC    PL2'+0'             NUMBER OF LINES AT XX LPI
*
SEQ      DC    PL3'+0'             SEQUENCE NUMBER
*
FCBLIT   DC    CL20' FCB SIZE=HTO,LPI=( '
*
FCB1     DS    0CL80
         DC    CL15'           FCB '
F1DATA   DC    CL5'SIZE='
F1HT     DC    CL2'HT'             HUNDREDS AND TENS DIGITS
F1O      DC    CL1'O',CL7',LPI=( ' ONES DIGIT AND LITERAL
         DC    CL41' '             BLANKS
F1CC     DC    CL1' '              CONTINUATION CHARACTER
F1NAME   DC    CL4'XXXX'
F1SEQ    DC    CL4'0000'
         DC    CL1' '              SLOP-OVER BYTE FOR UNPACK
*
CATLIT   DC    CL12'TABLE LOC=( '
*
CAT1     DS    0CL80
         DC    CL15'         TABLE '
C1DATA   DC    CL56'LOC=('
C1CC     DC    CL1' '              CONTINUATION CHARACTER
C1NAME   DC    CL4'XXXX'
C1SEQ    DC    CL4'0000'
         DC    CL1' '              SLOP-OVER BYTE FOR UNPACK
*
CHTBL    DS    0F                  CHANNEL/LINE NUMBERS FOR FCB-S
         DC    24XL5'FFFFFFFFFF'        CC/LLL
         DC    X'FF00'             TABLE STOPPER
*
NAME     DS    0CL80
         DC    CL15'          NAME '
NNAME1   DC    CL4'XXXX',CL53' '
NNAME2   DC    XL4'00404040'
         DC    CL4'9999'
*
HEADER   DC    CL1'1'
HDATE    DC    XL6'21204B202020'                  YY.DDD
HTIME    DC    XL10'402021204B20204B2020',CL11' ' HH.MM.SS
         DC    CL13'W.S.R.C.C.---'
SYSTEM   DC    CL6'SYSTEM'
         DC    CL29' SUPPORT UTILITIES---DISIMAGE',CL10' '
         DC    CL15'IBM 3800 MODEL '
MODEL    DC    CL1'3',CL11' ',CL5'PAGE '
HPAGE    DC    CL3' '
*
UT3AREA  DS    CL121               SYSUT3 RECORD AREA
*
SINLINE  DS    0CL121              SYSIN CARD PRINT LINE
         DC    CL1'0'              CARRIAGE CONTROL
SINRCD   DS    0CL80
SIMODTYP DC    CL1' '              MODULE TYPE REQUESTED, WHERE...
*                  C = GENERATE COMPONENT LCS/GCM MODULES FOR STANDARD
*                       IBM CHARACTER ARRANGEMENT TABLE (CHARS) VALUE
*                      !NOTE - A 'C' CARD MUST BE FIRST AND ONLY INPUT!
*                  F = FORMS CONTROL BUFFER MODULE (FCB)
*                  G = GRAPHIC CHARACTER MODIFICATION MODULE (GRAPHIC)
*                  L = LIBRARY CHARACTER SET MODULE (CHARSET)
*                  M = COPY MODIFICATION MODULE (COPYMOD) ?? NEVER ??
*                  T = CHARACTER ARRANGEMENT TABLE MODULE (TABLE)
SIEQUALS DC    CL1' '              EQUAL SIGN
SINAME   DC    CL4' '              MODULE NAME, WHERE...
*                  LCSM NAMES ARE 2 HEXIDECIMAL DIGITS AND MUST BE ODD
*                  ALL OTHERS ARE 1-4 ALPHAMERIC OR NATIONAL CHARACTERS
         DC    CL74' '             FILLER
SIFLAG   DC    CL20' * SYSIN CARD * '
SINERR   DC    CL20' '             ERROR MSG (IF ANY)
*
ERRMSG   DS    0CL20               ERROR MESSAGE TEXT
         DC    CL4'*ERR'
EMNO     DC    CL16' '             ERROR MESSAGE NUMBER/TEXT
*
IMGLINE  DS    0CL121              IEBIMAGE SYSIN CARD PRINT LINE
         DC    CL1'0'              CARRIAGE CONTROL
IMGRCD   DC    CL80' '             CARD IMAGE
         DC    CL40' * IEBIMAGE SYSIN * '
*
GENMSG   DC    CL121'0GENERATING SOURCE FOR XXXXXXXX MODULE NAMED XXXX'
*
NULLMSG  DC    CL121'     *NNN POSITIONS REMAIN UNUSED IN THIS TABLE. '
*
HDTBL    DS    0F                  HEX DIGIT TABLE
         DC    C'0123456789ABCDEF'
*
MNCA     DS    CL4                 MODULE NAME COMPARE AREA
BLANKS   DC    CL24' '             (SLOPOVER AREA FOR COMPARE)
*
FBYTE    DS    CL1                 FUNCTION BYTE
*
         LTORG
*
EMTBL    DC    CL16'01 CC2 NOT EQUAL'  ERR01 MESSAGE
         DC    CL16'02 NAME BLANK   '  ERR02 MESSAGE
         DC    CL16'03 NAME INVALID '  ERR03 MESSAGE
         DC    CL16'04 IMBEDED BLANK'  ERR04 MESSAGE
         DC    CL16'05 CODE INVALID '  ERR05 MESSAGE
         DC    CL16'06 NAME TOO LONG'  ERR06 MESSAGE
         DC    CL16'07 NAME NOT HEX '  ERR07 MESSAGE
         DC    CL16'08 NAME NOT ODD '  ERR08 MESSAGE
         DC    CL16'09 UNKNOWN CHARS'  ERR09 MESSAGE
         DC    CL16'10 NOT 1ST/ONLY '  ERR10 MESSAGE
*
         CNOP  2,4
PARMS    DC    AL2(PARMSEND-PARMSBEG) BYTE COUNT OF REMAINING PARAMS
PARMSBEG DC    A(SORTBEG)          SORT STATEMENT - BEGINNING ADDRESS
         DC    A(SORTEND)                         - ENDING ADDRESS
         DC    A(RECBEG)           RECORD STATEMENT - BEGINNING ADDRESS
         DC    A(RECEND)                            - ENDING ADDRESS
         DC    A(0)                NO E15/E32 EXIT ROUTINE
         DC    A(0)                NO E35 EXIT ROUTINE
         DC    X'03',AL3(SORTMSGS) ADDR OF SYSOUT DD NAME REPLACEMENT
PARMSEND DS    0C                  END OF PARAMETER LIST
*
SORTBEG  DC    C' SORT FIELDS=(73,8,CH,A)'
SORTEND  DC    C' '
RECBEG   DC    C' RECORD TYPE=F,LENGTH=80'
RECEND   DC    C' '
*
SORTMSGS DC    CL8'SORTMSGS'       REPLACES SORT SYSOUT
*
         CNOP  2,4
DDS      DC    H'48'               ALTERNATE DDNAMES FOR...
         DC    8F'0'
         DC    CL8'SYSUT2'            ..SYSIN
         DC    CL8'SYSUT3'            ..SYSPRINT
*
NOSINLIN DC    CL121'0 *** NO SYSIN RECORDS IN JOB STREAM - TERMINATE **
               ** '
*
NOUT2LIN DC    CL121'0 *** NO SYSIN RECORDS ACCEPTED - TERMINATE *** '
*
EOSMSG   DC    CL121'0 *** END OF SYSIN *** '
*
NOSRTLIN DC    CL121'0 *** NO SORTIN RECORDS WERE WRITTEN - TERMINATE **
               ** '
*
EOUMSG   DC    CL121'0 *** END OF SYSUT3 *** '
*
BADSORT  DC    CL121'0 *** SORT UNSUCCESSFUL *** '
*
VMNTBL   DS    0F                  VALID MODULE NAME TABLE
         DC    64X'FF'             HEX 00 TO 3F
         DC    X'01'                   40       (BLANK)
         DC    26X'FF'                 41 TO 5A
         DC    X'00'                   5B       (DOLLAR SIGN)
         DC    X'02'                   5C       (ASTERISK)
         DC    30X'FF'                 5D TO 7A
         DC    2X'00'                  7B TO 7C (AT-SIGN/POUND-SIGN)
         DC    68X'FF'                 7D TO C0
         DC    9X'00'                  C1 TO C9 (ALPHA A-I)
         DC    7X'FF'                  CA TO D0
         DC    9X'00'                  D1 TO D9 (ALPHA J-R)
         DC    8X'FF'                  DA TO E1
         DC    8X'00'                  E2 TO E9 (ALPHA S-Z)
         DC    6X'FF'                  EA TO EF
         DC    10X'00'                 F0 TO F9 (NUMERIC 0-9)
         DC    6X'FF'                  FA TO FF
*
VHVTBL   DS    0F                  VALID HEX VALUES TABLE
         DC    193X'FF'            HEX 00 TO C0
         DC    XL6'010001000100'       C1 TO C6 (ALPHA A-F)
         DC    41X'FF'                 C7 TO EF
         DC    XL5'0100010001'         F0 TO F4 (NUMERIC 0-4)
         DC    XL5'0001000100'         F5 TO F9 (NUMERIC 5-9)
         DC    6X'FF'                  FA TO FF
* * * * HEX FF-INVALID, 00-VALID HEX (ODD), 01-VALID HEX (EVEN) * * * *
*
SINDCB   DCB   DDNAME=SYSIN,DSORG=PS,LRECL=80,MACRF=(GM),RECFM=FB,     X
               EODAD=EOSIN
*
PRTDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=121,MACRF=(PM),          X
               RECFM=FBA
*
* SYSUT1 IS THE IMAGE LIBRARY FOR IEBIMAGE
*
* SYSUT2 IS THE SYSIN FILE FOR IEBIMAGE
UT2DCB   DCB   BLKSIZE=80,DDNAME=SYSUT2,DSORG=PS,LRECL=80,             X
               MACRF=(PM),RECFM=F
*
* SYSUT3 IS THE SYSPRINT FILE FOR IEBIMAGE
UT3DCB   DCB   DDNAME=SYSUT3,DSORG=PS,LRECL=121,MACRF=(GM),            X
               RECFM=FBA,EODAD=EOUT3
*
SORTIN   DCB   DDNAME=SORTIN,DSORG=PS,LRECL=80,MACRF=(PM),RECFM=FB
*
CHARSTBL DS    0F                  ACCEPTABLE CHARS TO LCS/GCM TABLE
         DC    C'AE107F7F7F  AE0AAE0BAE0C    '  APL EXTENDED
         DC    C'AN  83                      '  GOTHIC-10 (1403)
         DC    C'AOA 8317                    '  GOTHIC-10, OCR-A
         DC    C'AOD 8317                    '  GOTHIC-10, OCR-A
         DC    C'AON 8317                    '  GOTHIC-10, OCR-A
         DC    C'A11 83                      '  GOTHIC-10 (3211)
         DC    C'BITRFFFF    BITABITB        '  BOLDFACE ITALIC
         DC    C'BOA 8319                    '  GOTHIC-10, OCR-B
         DC    C'BON 8319                    '  GOTHIC-10, OCR-B
         DC    C'BRTRFFFF    BRTABRTB        '  BOLDFACE REGULAR
         DC    C'CE10FFFF    CE0ACE0B        '  COURIER-10 EXTENDED
         DC    C'CE12FFFF    CE2ACE2B        '  COURIER-12 EXTENDED
         DC    C'CO10FFFF    CO0ACO0B        '  COURIER-10 OVERSTRUCK
         DC    C'CR10FFFF    CR0ACR0B        '  COURIER-10 REGULAR
         DC    C'DOTRFFFF    DOTADOTB        '  DOCUMENT REGULAR
         DC    C'DUMP863D                    '  GOTHIC-15/GOTHIC-15 U/S
         DC    C'EBTRFFFF    EBTAEBTB        '  ESSAY BOLD
         DC    C'EITRFFFF    EITAEITB        '  ESSAY ITALIC
         DC    C'ESTRFFFF    ESTAESTB        '  ESSAY STANDARD
         DC    C'FM1009                      '  FORMAT-10
         DC    C'FM120B                      '  FORMAT-12
         DC    C'FM150D                      '  FORMAT-15
         DC    C'GB10FFFF    GB0AGB0B        '  GOTHIC-10 BOLD
         DC    C'GB12FFFF    GB2AGB2B        '  GOTHIC-12 BOLD
         DC    C'GFC 93                      '  GOTHIC-15 CONDENSD/FOLD
         DC    C'GF1083                      '  GOTHIC-10 FOLDED
         DC    C'GF1285                      '  GOTHIC-12 FOLDED
         DC    C'GF1587                      '  GOTHIC-15 FOLDED
         DC    C'GI12FFFF    GI2AGI2B        '  GOTHIC ITALIC
         DC    C'GN  83      SPC1            '  GOTHIC-10 (1403)
         DC    C'GP12FFFF    GP2AGP2B        '  GOTHIC PROPORTIONAL
         DC    C'GR10FFFF    GR0AGR0B        '  GOTHIC REVERSE
         DC    C'GSC 93                      '  GOTHIC-15 CONDENSED
         DC    C'GS1083                      '  GOTHIC-10
         DC    C'GS1285                      '  GOTHIC-12
         DC    C'GS1587                      '  GOTHIC-15
         DC    C'GT10FFFF    GT0AGT0B        '  GOTHIC-10 TEXT
         DC    C'GT12FFFF    GT2AGT2B        '  GOTHIC-12 TEXT
         DC    C'GT15FFFF    GT5AGT5B        '  GOTHIC-15 TEXT
         DC    C'GUC 37                      '  GOTHIC-15 CONDENSED U/S
         DC    C'GU1039                      '  GOTHIC-10 U/S
         DC    C'GU123B                      '  GOTHIC-12 U/S
         DC    C'GU153D                      '  GOTHIC-15 U/S
         DC    C'G11 83      SPC1            '  GOTHIC-10 (3211)
         DC    C'HN  83                      '  GOTHIC-10 (1403)
         DC    C'H11 83                      '  GOTHIC-10 (3211)
         DC    C'KN1 831B                    '  GOTHIC-10, KATAKANA-10
         DC    C'LB12FFFF    LB2ALB2B        '  LETTER GOTHIC BOLD
         DC    C'LR12FFFF    LR2ALR2B        '  LETTER GOTHIC REGULAR
         DC    C'OAA 8317                    '  GOTHIC-10, OCR-A
         DC    C'OAA18317                    '  GOTHIC-10, OCR-A
         DC    C'OAB 19                      '  OCR-B
         DC    C'OB10FFFF    OB0AOB0B        '  ORATOR BOLD
         DC    C'ODA 8317                    '  GOTHIC-10, OCR-A
         DC    C'ONA 8317                    '  GOTHIC-10, OCR-A
         DC    C'ONB 8319                    '  GOTHIC-10, OCR-B
         DC    C'OR10FFFF    OR0AOR0B        '  ORATOR REGULAR
         DC    C'PB12FFFF    PB2APB2B        '  PRESTIGE ELITE BOLD
         DC    C'PCAN83                      '  GOTHIC-10 (1403)
         DC    C'PCHN83                      '  GOTHIC-10 (1403)
         DC    C'PI12FFFF    PI2API2B        '  PRESTIGE ELITE ITALIC
         DC    C'PN  83                      '  GOTHIC-10 (1403)
         DC    C'PR10FFFF    PR0APR0B        '  PRESTIGE PICA REGULAR
         DC    C'PR12FFFF    PR2APR2B        '  PRESTIGE ELITE REGULAR
         DC    C'P11 83                      '  GOTHIC-10 (3211)
         DC    C'QN  83                      '  GOTHIC-10 (1403)
         DC    C'QNC 83                      '  GOTHIC-10 (1403)
         DC    C'RN  83                      '  GOTHIC-10 (1403)
         DC    C'RT10FFFF    RT0ART0B        '  ROMAN TEXT
         DC    C'SB12FFFF    SB2ASB2B        '  SERIF BOLD
         DC    C'SI10FFFF    SI0ASI0B        '  SERIF-10 ITALIC
         DC    C'SI12FFFF    SI2ASI2B        '  SERIF-12 ITALIC
         DC    C'SN  8F11                    '  TEXT 1 & 2 (1403)
         DC    C'SO12FFFF    SO2ASO2B        '  SERIF OVERSTRUCK
         DC    C'SR12FFFF    SR2ASR2B        '  SCRIPT REGULAR
         DC    C'ST10FFFF    ST0AST0B        '  SERIF-10 TEXT
         DC    C'ST12FFFF    ST2AST2B        '  SERIF-12 TEXT
         DC    C'ST15FFFF    ST5AST5B        '  SERIF-15 TEXT
         DC    C'TN  8F11                    '  TEXT 1 & 2 (1403)
         DC    C'TU103F41                    '  TEXT 1 & 2 U/S
         DC    C'T11 8F11                    '  TEXT 1 & 2 (3211)
         DC    C'XN  83                      '  GOTHIC-10 (1403)
         DC    C'YN  83                      '  GOTHIC-10 (1403)
         DC    C'2773831B                    '  GOTHIC-10, KATAKANA-10
         DC    C'2774831B                    '  GOTHIC-10, KATAKANA-10
         DC    X'FFFFFFFF'         END OF TABLE STOPPER
*
         END
