***********************************************************************
*                                                                     *
*             MODULE NAME = IEFACTRT                                  *
*                                                                     *
*             DESCRIPTIVE NAME =  MVS/SP SYSTEM IPO SUPPLIED          *
*                SMF EXIT ROUTINE TO PUT MESSAGES ON JOB LOG WITH     *
*                STEP TERMINATION STATUS.                             *
*                                                                     *
*             LOCALLY MODIFIED BY TOM FOTH AND JOE MARTIN AT          *
*                STATE OF WISCONSIN                                   *
*                DEPARTMENT OF HEALTH AND SOCIAL SERVICES             *
*                OFFICE OF INFORMATION SYSTEMS                        *
*                WILSON STREET REGIONAL COMPUTING CENTER              *
*                PO BOX 7850 - ROOM B253                              *
*                ONE WEST WILSON STREET                               *
*                MADISON, WISCONSIN 53707-7850                        *
*                                                                     *
*             FUNCTION =                                              *
*                PUT MESSAGES VIA WTO ON JOB, SYS AND JES2 LOG.       *
*                ADD SOME INFORMATION TO THE RACF FIELDS OF THE       *
*                TYPE 30 AND 32 SMF RECORDS IN AN ACF2 ENVIRONMENT.   *
*                                                                     *
*                OPERATION =                                          *
*                   FOR JOB STEP TERMINATION PUT STATISTICS OF STEP.  *
*                   FOR JOB TERMINATION PUT OUT JOB ENDED MESSAGE.    *
*                                                                     *
*              NOTES =                                                *
*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.             *
*                    REQUIRES WTO EXIT ROUTINE, IEECVXIT, TO          *
*                    SUPPRESS ROUTE CODE 14 FROM CONSOLE.             *
*                                                                     *
*                 RESTRICTIONS = NONE                                 *
*                                                                     *
*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *
*                   BINARY ZEROES)                                    *
*                                                                     *
*             MODULE TYPE = PROCEDURE                                 *
*                                                                     *
*                PROCESSOR = ASM                                      *
*                                                                     *
*                MODULE SIZE = LOTS OF BYTES                          *
*                                                                     *
*                ATTRIBUTES = KEY 0, REENTRANT,                       *
*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          *
*                                                                     *
*             ENTRY POINTS = IEFACTRT (ONLY ENTRY POINT)              *
*                                                                     *
*             INPUT = REG1 POINTS TO LIST OF FULLWORD ADDRESSES       *
*                     AS FOLLOWS.                                     *
*                 1.  PTR TO COMMON EXIT PARAMETER AREA               *
*                 2.  PTR TO STEPNAME FIELD                           *
*                 3.  PTR TO PROGRAMMER NAME FIELD                    *
*                 4.  PTR TO JOB CPU TIME FIELD                       *
*                 5.  PTR TO JOB ACCOUNTING FIELDS                    *
*                 6.  PTR TO STEP CPU TIME FIELD                      *
*                 7.  PTR TO STEP ACCOUNTING FIELDS                   *
*                 8.  PTR TO CANCEL FLAG & STEP NUMBER                *
*                 9.  PTR TO CONDITION CODE FIELD                     *
*                10.  PTR TO SMF RECORD TO BE WRITTEN                 *
*                                                                     *
*             OUTPUT = NONE                                           *
*                                                                     *
*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *
*                OUTPUT = NONE                                        *
*                RETURN CODE = ZERO                                   *
*                                                                     *
*             EXIT - ERROR = NONE                                     *
*                OUTPUT = NONE                                        *
*                RETURN CODE = ZERO                                   *
*                                                                     *
*             EXTERNAL REFERENCES =                                   *
*                ROUTINES = NONE                                      *
*                DATA AREAS = NONE                                    *
*                CONTROL BLOCKS = NONE                                *
*                                                                     *
*             TABLES = NONE                                           *
*                                                                     *
*             MACROS = SAVE, WTO, RETURN, GETMAIN, FREEMAIN, ESTAE,   *
*                      SETRP, IFASMFR, IEFJMR, IHASDWA, TIME          *
*                      BEGIN AND FINISH FROM WSRCC                    *
*                                                                     *
*             MESSAGES =                                              *
*                STEP TERMINATION LINE AND JOB TERMINATION LINE.      *
*                                                                     *
*             ABEND CODES = NONE                                      *
*                                                                     *
***********************************************************************
         EJECT
*
* CONSTANT ADDRESS EQAUTES
*
PSAAOLD  EQU    X'224',4    ADDRESS IN PSA OF CURRENT ASCB
CHSTEP   EQU    X'38',8     ADDRESS IN STEP NAME IN CSCB
CHPROCSN EQU    X'18',8     ADDRESS IN PROC STEP NAME IN CSCB
*
* CONSTANT EQUATES
*
K0       EQU   00                  NON-RELOCATABLE CONSTANT 00
K1       EQU   01                  NON-RELOCATABLE CONSTANT 01
K2       EQU   02                  NON-RELOCATABLE CONSTANT 02
K3       EQU   03                  NON-RELOCATABLE CONSTANT 03
K4       EQU   04                  NON-RELOCATABLE CONSTANT 04
K5       EQU   05                  NON-RELOCATABLE CONSTANT 05
K6       EQU   06                  NON-RELOCATABLE CONSTANT 06
K7       EQU   07                  NON-RELOCATABLE CONSTANT 07
K8       EQU   08                  NON-RELOCATABLE CONSTANT 08
K9       EQU   09                  NON-RELOCATABLE CONSTANT 09
KA       EQU   10                  NON-RELOCATABLE CONSTANT 10
KB       EQU   11                  NON-RELOCATABLE CONSTANT 11
KC       EQU   12                  NON-RELOCATABLE CONSTANT 12
KD       EQU   13                  NON-RELOCATABLE CONSTANT 13
KE       EQU   14                  NON-RELOCATABLE CONSTANT 14
KF       EQU   15                  NON-RELOCATABLE CONSTANT 15
*
* CONSTANT EQUATES
*
SUBPOOL  EQU   252                 USE SUBPOOL 252 FOR GETMAIN
LSQASUBP EQU   255                 USE SUBPOOL 255 FOR WJCT GETMAIN
CK       EQU   C'K'                CONSTANT CHAR 'K'
CASTR    EQU   C'*'                CONSTANT CHAR '*'
C0       EQU   C'0'                CONSTANT CHAR '0'
         IEZBITS
*
* REGISTER EQUATES
*
*R0  WORK
*R1  WORK / PARM
*R2  WORK
*R3  WORK
*R4  SECTION PTR
*R5  WORK
*R6  OUTPUT LINE
*R7  COMMON AREA
*R8  WSRCC JCT
*R9  SMF RECORD
*R10 BASE REG2
*R11 CONSTANTS
*R12 BASE REG1
*R13 SAVE AREA
*R14 LINKAGE
*R15 LINKAGE
         EJECT
         PRINT NOGEN                                            WDA#01
IEFACTRT BEGIN BASE=(R12,R10),                                         X
               SAVE=(DATA,LDATA,SUBPOOL),                              X
               AUTHOR=TJF,VER=SP13,NOP=YES
         SPACE 2
*
* INITIALIZATION
*
         L     R11,4(R13)          POINT TO PREVIOUS SAVE AREA
         L     R2,20(R11)          GET THE ENTRY REASON CODE
         L     R11,68(R11)         GET THE PREVIOUS R12
         ST    R11,R12FORYS        SAVE R12 FOR IEFYS USE
         LA    R11,CONSTANT        GET THE ADDRESS ON THE CONSTANT AREA
         USING CONSTANT,R11
         L     R7,PARMEPRM-PARMS(K0,R1) COMMON AREA ADDRESS
         USING JMR,R7              SET UP ADDRESSABILITY TO COMMON
         LA    R6,WTO1TXT          GET REGISTER FOR ADDRESSABILITY
         MVC   PARMS(LPARMS),K0(R1) SAVE INPUT PARMS
*
*        SET UP RECOVERY ENVIRONMENT
*
         XC    ESTAPARM(LESTAEPM),ESTAPARM CLEAR ESTAE PARAMETER LIST
         MVC   ESTAEW(LESTAEL),ESTAEL  MOVE IN ESTAE PARAMETER LIST
         LA    R0,RTRYRTN1             RETRY ROUTINE - NO SDWA
         ST    R0,NOSDWARR             STORE IN PARAMETER LIST
         LA    R0,RTRYRTN2             RETRY ROUTINE - WITH SDWA
         ST    R0,SDWARR               STORE IN PARAMETER LIST
         STM   R12,R13,ESTAER12        STORE BASE & DATA REG IN PARM
         ESTAE RECOVERY,CT,PARAM=ESTAPARM,MF=(E,ESTAEW) SETUP RCVRY
*
*        DETERMINE REASON FOR ENTRY  STEP/JOB TERMINATION
*
         L     R9,PARMRECD         LOAD ADDRESS OF SMF RECORD
         C     R2,R30CODE          WAS ENTRY CODE FOR REC30     WDA#01
         BE    DOTYPE30            RECORD IS A TYPE 30          WDA#01
         C     R2,R32CODE          WAS ENTRY CODE FOR REC32     WDA#01
         BE    DOTYPE32            RECORD IS A TYPE 32          WDA#01
         B     EXIT                NOT 30 OR 32 - GO AWAY       WDA#01
         EJECT
DOTYPE32 DS    0H                  PROCESS TYPE 32 RECORDS      WDA#01
         USING SMFRCD32,R9         ADDRESS THE TYPE 32 RECORD   WDA#01
*
* TSO STATION ID FIX UP FOR NON-RACF SYSTEMS - TYPE 32 RECORDS  WDA#01
*
         L     R4,SMF32IOF         GET THE OFFSET               WDA#01
         LTR   R4,R4               DO WE HAVE ONE               WDA#01
         BNZ   GOTTSOI2            YEP                          WDA#01
*
         MVC   WTO1TXT,MSG084A     MOVE THE MSG OVLY TO MSG BFR WDA#01
         L     R0,=F'-1'           ERROR MESSAGE                WDA#01
         BAL   R14,MSGRTN                                       WDA#01
         B     EXIT                DISCONTINUE EXECUTION        WDA#01
*
GOTTSOI2 AR    R4,R9               POINT TO SS SEGMENT          WDA#01
         USING SMF32ID,R4          MAP TYPE 32                  WDA#01
         LH    R2,=S(SMF32TID)                                  WDA#01
         SLL   R2,20               CLEAR BASE & HIGH ORDER BITS WDA#01
         SRL   R2,20               BY SHIFITING                 WDA#01
         LA    R2,L'SMF32TID(R2,0) MINIMUM LENGTH OF ID SECTION WDA#01
         CH    R2,SMF32ILN         ARE WE OKAY                  WDA#01
         BNH   GUDTSO32            YEP                          WDA#01
*
         MVC   WTO1TXT,MSG085A     MOVE THE MSG OVLY TO MSG BFR WDA#01
         L     R0,=F'-1'           ERROR MESSAGE                WDA#01
         BAL   R14,MSGRTN                                       WDA#01
         B     EXIT                DISCONTINUE EXECUTION        WDA#01
*
GUDTSO32 L     R3,PSAAOLD          GET CURRENT ASCB             WDA#01
         USING ASCB,R3             MAP IT                       WDA#01
         L     R3,ASCBTSB          LOAD ADDRESS OF TSB          WDA#01
         USING TSB,R3              ESTABLISH ADDRESSBLTY TO TSB WDA#01
         LTR   R3,R3               SEE IF ADDRESS ZERO -NOT TSO WDA#01
         BNZ   GOTTSB2             OKAY TSB                     WDA#01
*
         MVC   WTO1TXT,MSG086A     MOVE THE MSG OVLY TO MSG BFR WDA#01
         L     R0,=F'-1'           ERROR MESSAGE                WDA#01
         BAL   R14,MSGRTN                                       WDA#01
         B     EXIT                DISCONTINUE EXECUTION        WDA#01
*
GOTTSB2  TM    TSBFLG5,TSBVTAM     SEE IF THIS IS TSO/VTAM TSB  WDA#01
         BO    GETTSBX2            YES....GO GET TSB EXTENSION  WDA#01
         MVC   RWORK(2),TSBLINE    MOVE OVER THE BINARY CUA     WDA#01
         UNPK  RWORK+K3(K5),RWORK(K3) UNPACK IT                 WDA#01
         TR    RWORK+K4(K3),TRTAB-C0 TRANSLATE TO PRINTABLE CHR WDA#01
         MVC   SMF32TID(3),RWORK+K4 MOVE TO FIELD               WDA#01
         B     EXIT                END OF ROUTINE               WDA#01
*
GETTSBX2 L     R2,TSBEXTNT         GET ADDRESS OF TSB EXTENSION WDA#01
         USING TSBX,R2             ESTABLSH ADDRESSBLTY TO TSBX WDA#01
         TM    TSBXFLG1,TSBXWREC   SEE IF TERMNL AWAITING RECON WDA#01
         BNO   GETSYM2             NO.....GO GET SYMBOLIC NAME  WDA#01
         MVC   SMF32TID(8),=CL8'DISCON''D' MOVE IN DISCON'D     WDA#01
         B     EXIT                END OF ROUTINE               WDA#01
*
GETSYM2  MVC   SMF32TID(8),TSBTRMID MOVE IN TERM SYMBOLIC NAME  WDA#01
         B     EXIT                                             WDA#01
         LTORG
         DROP  R3,R2,R4
         EJECT
DOTYPE30 DS    0H                  PROCESS TYPE 30 RECORDS      WDA#01
         USING SMFRCD30,R9         ADDRESS THE TYPE 30 RECORD   WDA#01
         TM    JMRINDC,JMRFIND     IS IT TIME SHARING USER?
         BNO   NORMACT             NO, DO ACTRT PROCESSING
*
* TSO STATION ID FIX UP FOR NON-RACF SYSTEMS - TYPE 30 RECORDS  WDA#01
*
         L     R4,SMF30IOF         GET THE OFFSET
         LTR   R4,R4               DO WE HAVE ONE
         BNZ   GOTTSOID            YEP
*
         MVC   WTO1TXT,MSG087A     MOVE THE MSG OVLY TO MSG BUFFER
         L     R0,=F'-1'           ERROR MESSAGE
         BAL   R14,MSGRTN
         B     EXIT                DISCONTINUE EXECUTION
*
GOTTSOID AR    R4,R9               POINT TO SS SEGMENT
         USING SMF30ID,R4          MAP TYPE 30
         LH    R2,=S(SMF30TID)
         SLL   R2,20               CLEAR BASE AND HIGH ORDER BITS
         SRL   R2,20               BY SHIFITING
         LA    R2,L'SMF30TID(R2,0) MINIMUM LENGTH OF ID SECTION
         CH    R2,SMF30ILN         ARE WE OKAY
         BNH   GUDTSO30            YEP
*
         MVC   WTO1TXT,MSG088A     MOVE THE MSG OVLY TO MSG BUFFER
         L     R0,=F'-1'           ERROR MESSAGE
         BAL   R14,MSGRTN
         B     EXIT                DISCONTINUE EXECUTION
*
GUDTSO30 L     R3,PSAAOLD          GET CURRENT ASCB
         USING ASCB,R3             MAP IT
         L     R3,ASCBTSB          LOAD ADDRESS OF TSB
         USING TSB,R3              ESTABLISH ADDRESSABILITY TO TSB
         LTR   R3,R3               SEE IF ADDRESS ZERO - NOT TSO
         BNZ   GOTTSB              OKAY TSB
*
         MVC   WTO1TXT,MSG089A     MOVE THE MSG OVLY TO MSG BUFFER
         L     R0,=F'-1'           ERROR MESSAGE
         BAL   R14,MSGRTN
         B     EXIT                DISCONTINUE EXECUTION
*
GOTTSB   TM    TSBFLG5,TSBVTAM     SEE IF THIS IS A TSO/VTAM TSB
         BO    GETTSBX             YES....GO GET TSB EXTENSION
         MVC   RWORK(2),TSBLINE    MOVE OVER THE BINARY CUA
         UNPK  RWORK+K3(K5),RWORK(K3) UNPACK IT
         TR    RWORK+K4(K3),TRTAB-C0 TRANSLATE TO PRINTABLE CHAR
         MVC   SMF30TID(3),RWORK+K4 MOVE TO FIELD
         B     EXIT                END OF ROUTINE
*
GETTSBX  L     R2,TSBEXTNT         GET ADDRESS OF TSB EXTENSION
         USING TSBX,R2             ESTABLISH ADDRESSABILITY TO TSBX
         TM    TSBXFLG1,TSBXWREC   SEE IF TERMINAL AWAITING RECON
         BNO   GETSYM              NO.....GO GET SYMBOLIC NAME
         MVC   SMF30TID(8),=CL8'DISCON''D' MOVE IN DISCON'D
         B     EXIT                END OF ROUTINE
*
GETSYM   MVC   SMF30TID(8),TSBTRMID MOVE IN TERMINAL SYMBOLIC NAME
         B     EXIT
         LTORG
         DROP  R3,R2,R4
         EJECT
*
* BATCH AND STC STATISTIC DISPLAYS INITIALIZATION
*
         DS    0F
NORMACT  CLC   SMF30SON,=H'0'      CHECK IF SSSEGMENT IS THERE  MSEIPO4
         BH    GUDSSS              YES, CONTINUE
*
         MVC   WTO1TXT,MSG094A     MOVE THE MSG OVLY TO MSG BUFFER
         L     R0,=F'-1'           ERROR MESSAGE
         BAL   R14,MSGRTN
         B     EXIT                DISCONTINUE EXECUTION
*
GUDSSS   L     R8,JMRUCOM          GET THE WJCT ADDRESS
         TIME  BIN                 GET CURRENT DATE + TIME
         STM   R0,R1,TIMEDATE
         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4
         A     R4,SMF30SOF         POINT TO SS SEGMENT          MSEIPO4
         USING SMF30PSS,R4                                      MSEIPO4
         CLC   SMF30TYP,R30JOB     WAS IT JOB TERMINATION       MSEIPO4
         BE    JOBTERM             YES, HANDLE JOB TERM         MSEIPO4
         CLC   SMF30TYP,R30STEP    WAS IT STEP TERMINATION      MSEIPO4
         BNE   EXIT                NOPE, DISREGARD              MSEIPO4
         DROP  R4                                               MSEIPO4
         EJECT
*
*        HANDLE STEP TERMINATION CONDITIONS
*
STEPTERM DS    0H                  ENTRY FROM STEP TERMINATION
*
* PERFORM LOTS OF DATA VERIFICATION AND WARNINGS IF NECESSARY
*
         CLC   SMF30ION,=H'0'      IS THERE AN ID SECTION
         BH    CHEKSTEP            NOPE - EXIT - CAN'T WORK WITHOUT ONE
         MVC   WTO1TXT,MSG099A     MOVE THE MSG OVLY TO MSG BUFFER
         L     R0,=F'-1'           ERROR MESSAGE
         BAL   R14,MSGRTN
         B     EXIT                DISCONTINUE EXECUTION
*
CHEKSTEP LR    R4,R9               PRIME R4 WITH SMF REC BASE
         A     R4,SMF30IOF         GET ADDRESS OF ID SECTION
         USING SMF30ID,R4
         CLC   SMF30JNM,SMF30JBN   IS THIS A SUBSYSTEM
         BE    EXIT                YES-NO PROCESSING
         L     R1,PARMINDC         LOAD ADDRESS OF STEP NO
         CLI   1(R1),X'00'         CHECK STEP IS THE STEP ZERO?
         BH    GUDSTEP             NOPE, IT'S OKAY
*                                  BAD STEP NUMBER
         MVC   WTO1TXT,MSG098A     MOVE THE MSG OVLY TO MSG BUFFER
         L     R0,=F'-1'           ERROR MESSAGE
         BAL   R14,MSGRTN
         B     EXIT                DISCONTINUE EXECUTION
*
GUDSTEP  CLC   SMF30RON,=H'0'      IS THERE A STORAGE SECTION?
         BH    CHEKWJCT            YEP, FIRST TYPE 30 FOR THIS SUBTYPE
*                                  NOPE, WE BETTER HAVE A WJCT
         LTR   R8,R8               DO WE HAVE A WJCT?
         BNZ   VERWJCT             YEP (MAYBE, SUBJECT TO VERIFICATION)
*                                  NOPE, TELL THE OPERATOR
         MVC   WTO1TXT,MSG097A     MOVE THE MSG OVLY TO MSG BUFFER
         L     R0,=F'-1'           ERROR MESSAGE
         BAL   R14,MSGRTN
         B     EXIT                DISCONTINUE EXECUTION
*
CHEKWJCT LTR   R8,R8               DO WE HAVE A WJCT?
         BZ    FIRSTSTP            NOPE, GO GET ONE
*                                  POTENTIAL GOOD WJCT
VERWJCT  MVC   ESTAECOD(4),=CL4'WJCT' SAVE ESTAE REFERENCE MATERIAL
         ST    R8,ESTAEWRK            AND THE JMRUCOM WJCT POINTER
         CLC   =CL8'WSRCCJCT',0(R8)   GOOD WJCT?
         BE    NOTFIRST            YEP, WE ARE POINTING TO A REAL WJCT
*                                  JMRUCOM HAS BAD WJCT POINTER
*                                  WARN THE OPERATOR AND EXIT
         MVC   WTO1TXT,MSG096A     MOVE THE MSG OVLY TO MSG BUFFER
         USING DMYM096A,R6
         ST    R8,RWORK            BAD WJCT POINTER
         UNPK  DWORD(K8),RWORK(K4) ADD ZONES TO FIELD
         OI    DWORD+7,X'F0'       OR THE LAST ZONE
         TR    DWORD(K8),TRTAB-C0  TRANSLATE TO CHARACTERS
         MVC   M096AWJC(K8),DWORD  MOVE TO OUTPUT LINE
         L     R0,=F'-1'           ERROR MESSAGE
         BAL   R14,MSGRTN
         B     EXIT                DISCONTINUE EXECUTION
         EJECT
*
* FIRST STEP PROCESSING
*
FIRSTSTP L     R0,WJCTGMPM         LOAD GETMAIN PARMS
         GETMAIN R,LV=(0)          GET STORAGE FOR DATA DSECT
         ST    R1,JMRUCOM          SAVE THE WJCT ADDR
         LR    R8,R1               R8 IS WJCT BASE
         USING WJCT,R8             ADDRESSABILITY
         XC    WJCT(LWJCT),WJCT    CLEAR THE WJCT
         MVC   WJCT(8),=CL8'WSRCCJCT' MOVE IN THE ID
*
* HERE WE DISPLAY SYS001I, SYS101I JOB START STATISTICS
*
         MVC   WTO1TXT,MSG001A
         USING DMYM001A,R6
         MVC   M001AJBN,JMRJOB     MOVE THE JOBNAME IN
         MVC   M001AJNM,SMF30JNM   MOVE IN JOB NUMBER
         MVC   M001AUSR,SMF30USR   PROGRAMMER FILED
         MVC   M001ASID,SMF30SID   SYSTEM ID
         MVC   M001ACLS,SMF30CLS   JOB CLASS
         LH    R1,SMF30JPT         GET PRIORITY
         LA    R2,M001AJPT
         BAL   R14,PCOUNT
         L     R1,SMF30SIT         GET INIT TIME
         SR    R0,R0               CLEAR R0
         L     R3,ZERODATE         CLEAR R2
         L     R2,ZERODATE         CLEAR R3
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   M001ATME,TIMEFLD+2
         L     R0,SMF30STD         DATE OF STEP INITIATION
         BAL   R14,DATECONV        GO CONVERT DATE
         MVC   M001AGDT,MODDYY     MOVE IN CONVERTED DATE
         MVC   M001ADAY,DAY        MOVE IN DAY-OF-WEEK
         MVC   M001AJDT,JULIAN     MIVE IN JULIAN DATE
         LA    R0,X'1'             011 PUT TO JOBLOG, SYSLOG
         BAL   R14,MSGRTN
         MVC   WTO1TXT,MSG101A
         USING DMYM101A,R6
         L     R0,SMF30RED         GET ADDRESS FOR DATE CONVERSION
         BAL   R14,DATECONV        GO CONVERT DATE
         MVC   M101AGD1,MODDYY     MOVE IN CONVERTED DATE
         MVC   M101ADY1,DAY        MOVE IN DAY-OF-WEEK
         MVC   M101AJDT,JULIAN     MIVE IN JULIAN DATE
         L     R1,SMF30RET         GET RDR OFF TIME
         SR    R0,R0               CLEAR R0
         L     R3,ZERODATE         CLEAR R2
         L     R2,ZERODATE         CLEAR R3
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   M101ATM1,TIMEFLD+2
         L     R1,SMF30SIT         GET INIT TIME
         L     R0,SMF30RET         GET RDR OFF TIME
         L     R3,SMF30STD         GET INIT DATE
         L     R2,SMF30RED         GET RDR OFF DATE
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   M101ATM2,TIMEFLD
         L     R1,SMF30AST         GET DEVICE ALLOCATION
         L     R0,SMF30SIT         GET INIT TIME
         L     R3,ZERODATE         GET ZERO DATE
         L     R2,ZERODATE         GET ZERO DATE
         CR    R1,R0
         BNL   CALLCLK1
         L     R3,DATE1            GET DATE OF 1
CALLCLK1 BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   M101ATM3,TIMEFLD
         LA    R0,X'1'             011 PUT TO JOBLOG, SYSLOG
         BAL   R14,MSGRTN
         EJECT
*
* ENTER HERE FOR STEP STATISTICS
*
NOTFIRST DS    0H
         CLC   SMF30RON,=H'1'      IS THERE A STORAGE SECTION?
         BL    T30DDEXT            NOPE, THIS IS A DD EXTENSION RECORD
         MVC   WTO1TXT,MSG102A     MOVE THE MSG OVLY TO MSG BUFFER
         USING DMYM102A,R6
         MVC   M102AJBN,JMRJOB     MOVE THE JOBNAME IN
         MVC   M102AJNM,SMF30JNM   MOVE IN JOB NUMBER
         L     R1,PSAAOLD          GET ADDRESS OF CURRENT ASCB
         USING ASCB,R1
         L     R1,ASCBJBNI        GET ADDRESS OF JOBNAME FIELD
         DROP  R1
         CLI   CHPROCSN(R1),C' '   IS PROC STEP NAME BLANK?
         BNH   NOPROC              YES, DO NOT MOVE IT IN
         MVC   M102APRC,CHPROCSN(R1) MOVE IN PROC STEP NAME
NOPROC   CLI   CHSTEP(R1),C' '     IS STEP NAME BLANK?
         BNH   NOSTEPNM            YES, DO NOT MOVE IT IN
         MVC   M102ASTP,CHSTEP(R1) MOVE IN STEP NAME
NOSTEPNM LH    R1,SMF30STN         GET STEP NUMBER
         LA    R2,M102ASNN
         BAL   R14,PCOUNT
         MVI   0(R2),C')'
         MVC   M102APRG,SMF30PGM   MOVE IN PROGRAM NAME
         L     R1,SMF30SIT         GET INIT START TIME
         SR    R0,R0               CLEAR R0
         L     R3,ZERODATE         CLEAR R2
         L     R2,ZERODATE         CLEAR R3
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   M102ATM1,TIMEFLD+2
         L     R0,SMF30STD         DATE OF STEP INITIATION
         BAL   R14,DATECONV        GO CONVERT DATE
         MVC   M102AGD1,MODDYY     MOVE IN CONVERTED DATE
         MVC   M102ADAY,DAY        MOVE IN DAY-OF-WEEK
         MVC   M102AJDT,JULIAN     MIVE IN JULIAN DATE
         LA    R0,X'0'             110 PUT TO JESMSG & JOBLOG
         BAL   R14,MSGRTN
         MVC   M102AIDN,=C'SYS003I ' STEP TERM MSG
         MVC   M102AIDM,=C'END    '  CONSTANT TEXT
         MVC   M102ASRC,=C'RC '      INFORMATION
         MVC   M102ARC,=C'XNNNN'    TO OVERLAY 102
         L     R1,CURRTIME           GET STEP TERM TIME
         SR    R0,R0               CLEAR R0
         L     R3,ZERODATE         CLEAR R2
         L     R2,ZERODATE         CLEAR R3
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   M102ATM1,TIMEFLD+2
         L     R0,CURRDATE STEP TERM DATE
         BAL   R14,DATECONV        GO CONVERT DATE
         MVC   M102AGD1,MODDYY     MOVE IN CONVERTED DATE
         MVC   M102ADAY,DAY        MOVE IN DAY-OF-WEEK
         MVC   M102AJDT,JULIAN     MIVE IN JULIAN DATE
         DROP  R4
         EJECT
*                                                               MSEIPO4
* GET INFORMATION FROM COMPLETION SEGMENT                       MSEIPO4
*                                                               MSEIPO4
         CLC   SMF30TON,=H'1'      IS THERE A COMPLETION SECTION?
         BL    SECT01              NO
         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4
         A     R4,SMF30TOF         POINT TO SS SEGMENT          MSEIPO4
         USING SMF30CMP,R4                                      MSEIPO4
         SR    R0,R0               CLEAR RELATIVE RETURN CODE
         TM    SMF30STI,SMF30FLH   WAS THE STEP FLUSHED
         BO    COMPARRC            YEP, RELATIVE VALUE IS ZERO
         LH    R0,SMF30SCC         GET THE RETURN CODE
         TM    SMF30STI,SMF30ABD   AND ABEND?
         BNO   COMPARRC            NOPE, RELATIVE VALUE IS RC
         N     R0,=A(X'FFF')       ZERO UNUSED PORTION
         A     R0,=F'100000'       USER ABEND VALUE 100000-199999
         TM    SMF30SCC,SMF30SAB   SYSTEM ABEND?
         BO    COMPARRC            NOPE, USER ABEND
         A     R0,=F'100000'       SYSTEM ABEND VALUE 200000-299999
COMPARRC C     R0,WJCTHIRC         IS THIS A HIGHER RETURN CODE?
         BNH   CNVTRC              THIS STEP IS NOT HIGHER
         ST    R0,WJCTHIRC         YEP, SAVE RELATIVE RETURN CODE
         MVC   WJCTHSTI,SMF30STI   AND STEP INDICATOR
         MVC   WJCTHSCC,SMF30SCC   AND STEP CONDITION CODE
CNVTRC   LH    R0,SMF30SCC         GET THE STEP CONDITION CODE
         LA    R1,SMF30STI         POINT TO THE STEP INDICATOR
         BAL   R14,PRETCDE         CALL RETURN CODE ROUTINE
         MVC   M102ASRC,=C'RC '
         MVC   M102ARC,RC
         CLI   RC,C'F'             WAS THE STEP FLUSHED
         BNE   NOFLUSH             NOPE
         LH    R1,WJCTNOFS         YEP, ADD ONE
         LA    R1,1(R1)
         STH   R1,WJCTNOFS
         B     SECT01
NOFLUSH  CLI   RC,C'*'
         BNE   NOSYSAB
         LH    R1,WJCTNOSA
         LA    R1,1(R1)
         STH   R1,WJCTNOSA
         B     SECT01
NOSYSAB  CLI   RC,C'U'
         BNE   NOUSRAB
         LH    R1,WJCTNOUA
         LA    R1,1(R1)
         STH   R1,WJCTNOUA
         B     SECT01
NOUSRAB  LH    R1,WJCTNORN
         LA    R1,1(R1)
         STH   R1,WJCTNORN
         DROP  R4                                               MSEIPO4
SECT01   LA    R0,X'1'             111 PUT TO JESMSG,JOBLOG+SYSLOG
         BAL   R14,MSGRTN
         MVC   WTO1TXT,MSG103A     MOVE THE MSG OVLY TO MSG BUFFER
         USING DMYM103A,R6
         EJECT
*                                                               MSEIPO4
* GET INFORMATION FROM ID SEGMENT                               MSEIPO4
*                                                               MSEIPO4
         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4
         A     R4,SMF30IOF         POINT TO ID SEGMENT          MSEIPO4
         USING SMF30ID,R4                                       MSEIPO4
         L     R1,CURRTIME GET STEP TERM TIME
         L     R0,SMF30SIT         GET STEP INIT TIME
         L     R3,CURRDATE GET STEP TERM DATE
         L     R2,SMF30STD         GET STEP INIT DATE
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   M103ATM5,TIMEFLD
         L     R1,SMF30PPS         GET PGM  START TIME
         LTR   R1,R1               IF STEP FLUSH, THIS IS ZERO
         BNZ   PGMSTART            STEP NOT FLUSHED
         MVC   M103ATM4,=C'0000:00:00' NO DEVICE WAIT FOR FLUSHED STEP
         B     GTSTEPRC
PGMSTART L     R0,SMF30AST         GET ALLOC START DATE
         L     R3,ZERODATE         GET A ZERO DATE
         L     R2,ZERODATE         GET A ZERO DATE
         CR    R1,R0
         BNL   CALLCLK2
         L     R3,DATE1            GET DATE OF 1
CALLCLK2 BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   M103ATM4,TIMEFLD
         DROP  R4                                               MSEIPO4
         EJECT
*                                                               MSEIPO4
* GET INFORMATION FROM CPU ACCOUNTING SECTION
*                                                               MSEIPO4
GTSTEPRC CLC   SMF30CON,=H'1'      IS THERE A CPU ACCOUNTING SECTION?
         BL    SECT02              NO
         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4
         A     R4,SMF30COF         POINT TO ID SEGMENT          MSEIPO4
         USING SMF30CAS,R4                                      MSEIPO4
         L     R1,SMF30CPT         GET TCB TIME
         SR    R0,R0               CLEAR R0
         L     R3,ZERODATE         GET A ZERO DATE
         L     R2,ZERODATE         GET A ZERO DATE
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         CLI   TIMEFLD,X'40'
         BE    NOOV1
         MVC   M103ATM1,=C'***:**:**.**'
         B     OV1
NOOV1    MVC   M103ATM1,TIMEFLD+1
OV1      L     R1,SMF30CPS         GET SRB TIME
         SR    R0,R0               CLEAR R0
         L     R3,ZERODATE         GET A ZERO DATE
         L     R2,ZERODATE         GET A ZERO DATE
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         CLI   TIMEFLD,X'40'
         BE    NOOV2
         MVC   M103ATM2,=C'***:**:**.**'
         B     OV2
NOOV2    MVC   M103ATM2,TIMEFLD+1
OV2      L     R1,SMF30CPS         GET SRB TIME
         A     R1,SMF30CPT         ADD TCB TIME
         SR    R0,R0               CLEAR R0
         L     R3,ZERODATE         GET A ZERO DATE
         L     R2,ZERODATE         GET A ZERO DATE
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   M103ATM3,TIMEFLD
SECT02   LA    R0,X'0'             100 PUT TO JESMSG
         BAL   R14,MSGRTN
         DROP  R4                                               MSEIPO4
         EJECT
*                                                               MSEIPO4
* GET INFORMATION FROM I/O ACTIVITY SEGMENT                     MSEIPO4
*                                                               MSEIPO4
         MVC   WTO1TXT,MSG103B     MOVE THE MSG OVLY TO MSG BUFFER
         USING DMYM103B,R6
         CLC   SMF30UON,=H'1'      IS THERE A UNIT RECORD SECTION?
         BL    SECT03              NO
         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4
         A     R4,SMF30UOF         POINT TO ID SEGMENT          MSEIPO4
         USING SMF30URA,R4                                      MSEIPO4
         L     R1,SMF30TEP         GET TOTAL NUMBER OF EXCPS    MSEIPO4
         CLI   RC,C'F'             WAS THE STEP FLUSHED?
         BNE   CNVTEXCP            NO
         SR    R1,R1               FORCE EXCP COUNT TO ZERO
CNVTEXCP LA    R2,M103BEXC
         BAL   R14,PCOUNT          CALL CONVERT ROUTINE
         L     R1,SMF30INP         GET TOTAL NUMBER OF EXCPS    MSEIPO4
         LA    R2,M103BSIN
         BAL   R14,PCOUNT          CALL CONVERT ROUTINE
         DROP  R4
         EJECT
*
* GET INFORMATION FROM OPERATOR SEGMENT
*
SECT03   CLC   SMF30OON,=H'1'      IS THERE AN OPERATOR SECTION?
         BL    SECT04              NO
         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4
         A     R4,SMF30OOF         POINT TO ID SEGMENT          MSEIPO4
         USING SMF30OPS,R4                                      MSEIPO4
         L     R1,SMF30PTM         GET NON-SPEC TAPE
         A     R1,SMF30TPR         ADD SPEC TAPE
         LA    R2,M103BTPM
         BAL   R14,PCOUNT
         DROP  R4
         EJECT
*
* GET INFORMATION FROM PERFORMANCE SEGMENT
*
SECT04   CLC   SMF30RON,=H'1'      IS THERE AN PERFORMANCE SECTION?
         BL    SECT05              NO
         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4
         A     R4,SMF30ROF         POINT TO PERFORMANCE         MSEIPO4
         USING SMF30SAP,R4                                      MSEIPO4
         L     R1,SMF30NSW         SWAP SEQ
         LA    R2,M103BSWP
         BAL   R14,PCOUNT
         LH    R1,SMF30RGN         REGION REQUESTED
         LA    R2,M103BTRG
         BAL   R14,PCOUNT
         MVI   0(R2),CK
         LH    R1,SMF30PRV         REGION USED
         AH    R1,SMF30SYS
         LA    R2,M103BURG
         BAL   R14,PCOUNT
         MVI   0(R2),CK
SECT05   LA    R0,X'0'             100 PUT TO JESMSG
         BAL   R14,MSGRTN
         DROP  R4
         NOP   EXIT
         EJECT
*
*        DISPLAY EXCPS BY DDNAME ...
*
         LH    R3,SMF30EON         NUMBER OF EXCP SECTIONS THIS REC
         LTR   R3,R3               IS THERE AN EXCP SECTION
         BZ    EXIT                NOPE-EXIT
         LR    R4,R9               GET THE RECORD BASE
         A     R4,SMF30EOF         ADD THE OFFSET
         USING SMF30EXP,R4
FIRSTDDN MVI   WTO1TXT,C' '        CLEAR THE OUTPUT LINE
         MVC   WTO1TXT+1(L'WTO1TXT-1),WTO1TXT
         MVC   WTO1TXT(7),=C'SYS103I' MOVE IN THE MESSAGE NUMBER
         LA    R5,3                THREE DDNAME / LINE
         LA    R6,WTO1TXT+KC       POINT TO FIRST DDNAME FIELD
         USING DMYM103C,R6
NEXTDDN  DS    0H
         MVC   M103CDDN,SMF30DDN   MOVE IN THE DDNAME
         CLC   =XL2'7C00',M103CDDN IS THIS A STEPCAT CONCAT DD?
         BNE   LASTSAME            NO, GO COMPARE WITH LAST DD
         MVC   M103CDDN,=CL8'STEPCAT' MOVE IN STEPCAT
LASTSAME CLC   WJCTDDNM,M103CDDN   IS IT THE SAME AS LAST
         BNE   NEWDDNAM            NOPE
         L     R1,WJCTDDNO         GET THE CONCAT DD NUMBER
         A     R1,=F'1'            ADD ONE
         ST    R1,WJCTDDNO         SAVE IT
         LA    R2,M103CNNN
         BAL   R14,PCOUNT          CONVERT TO PRINTABLE NUMBER
         MVI   M103CNNN-1,C'+'     MOVE IN PLUS
         B     DEVT                GO DO DEVICE TYPE
NEWDDNAM XC    WJCTDDNO,WJCTDDNO   CLEAR THE CONCAT DD NUMBER
         MVC   WJCTDDNM,M103CDDN    SAVE THE DDNAME
DEVT     CLC   SMF30CUA,=X'0FFF'   IS THIS A VIO UCB
         BNE   TSTJES2             NOPE
         MVC   M103CCUA,=C'FFF'    MOVE IN PHONEY UCB
         LA    R1,=C'  VIO '       POINT TO VIO LITERAL
         B     GOTDEVT             GO PLACE IT
TSTJES2  CLC   SMF30CUA,=H'0'      IS THIS A JES2 UCB
         BNE   IDEVTSRC            NOPE
         MVC   M103CCUA,=C'SPL'    MOVE IN SPL (SPOOL)
         LA    R1,=C'  JES2'       POINT TO JES2 LITERAL
         B     GOTDEVT             GO PLACE IT
IDEVTSRC MVC   RWORK(2),SMF30CUA   MOVE OVER THE BINARY CUA
         UNPK  RWORK+K3(K5),RWORK(K3) UNPACK IT
         TR    RWORK+K4(K3),TRTAB-C0  TRANSLATE TO PRINTABLE CHAR
         MVC   M103CCUA,RWORK+K4   MOVE TO MSG FIELD
         LA    R1,DEVTABLE         GET THE ADDRESS OF THE DEVICE TBL
GETDEVT  CLC   0(2,R1),SMF30DEV    IS IT THIS DEVICE?
         BE    GOTDEVT             YES
         CLI   1(R1),X'00'         IS THIS A CLASS ENTRY?
         BNE   CHKDVEND            NOPE
         CLC   0(1,R1),SMF30DEV    ARE THE CLASSES THE SAME?
         BE    GOTDEVT             YEP
CHKDVEND CLC   0(2,R1),=H'-1'      IS IT THE END OF THE TABLE?
         BE    GOTDEVT             YES
         LA    R1,6(R1)            INCREMENT TO NEXT ENTRY
         B     GETDEVT             TRY, TRY, AGAIN
GOTDEVT  MVC   M103CDEV,2(R1)      MOVE IN THE DEVICE TYPE
         L     R1,SMF30BLK         GET EXCP COUNTS
         LA    R2,M103CEXC
         BAL   R14,PCOUNT          CONVERT IT
         LH    R0,SMF30ELN         GET LENGTH OF AN EXCP SECTION
         AR    R4,R0               POINT TO NEXT DDN ENTRY IN REC
         LA    R6,M103CLEN(R6)     POINT TO NEXT DDN ENTRY IN OUTPUT
         BCT   R3,MOREDDNS         ANY MORE DDNAME IN REC?
         XC    WJCTXDDS,WJCTXDDS   NO, CLEAR THE EXTRA DDNAME FIELD
         CLC   SMF30EOR,=H'0'      ANY MORE IN FOLLOWING RECS?
         BE    LASTPUT             NO, GO DEAL WITH THAT
         BCT   R5,SAVEDDNS         YES, ANY ROOM ON THIS LINE
LASTPUT  LA    R0,0                NOPE, PUT ONLY IEFYS OUTPUT
         BAL   R14,MSGRTN          PUT IT
         B     EXIT                GO SEE IF THERE IS ANOTHER REC
SAVEDDNS L     R0,XDDSGMPM         GET PARMS FOR DDNAME FIELD
         GETMAIN R,LV=(0)          GETMAIN THE AREA
         ST    R1,WJCTXDDS         SAVE IT IN WJCT
         ST    R5,WJCTOLNN         SAVE THE POSITION IN THE OUTPUT LINE
         LA    R0,WTO1TXT          GET THE ADDRESS OF THE MSG LINE
         SR    R6,R0               GET THE OFFSET INTO THE MESSAGE
         ST    R6,WJCTOLOF         SAVE THE OFFSET INTO THE LINE
         MVC   0(L'WTO1TXT,R1),WTO1TXT MOVE IN THE PARTIAL LINE
         B     EXIT                EXIT
MOREDDNS BCT   R5,NEXTDDN          ROOM FOR MORE IN OUTPUT LINE
         LA    R0,0                NOPE - PUT ONLY IEFYS OUTPUT
         BAL   R14,MSGRTN          PUT IT
         B     FIRSTDDN            GO SET UP OUTPUT LINE
T30DDEXT DS    0H                  REENTRY FOR A EXCP ONLY RECORD
         LH    R3,SMF30EON         NUMBER OF EXCP SECTIONS THIS REC
         LR    R4,R9               GET THE RECORD BASE
         A     R4,SMF30EOF         ADD THE OFFSET
         L     R1,WJCTXDDS         GET ADDRESS OF EXTRA DDS MSG
         LTR   R1,R1               IS THERE ONE?
         BZ    FIRSTDDN            NOPE
         MVC   WTO1TXT,0(R1)       MOVE IN THE MESSAGE
         L     R0,XDDSGMPM         GET FREEMAIN PARMS
         FREEMAIN R,A=(1),LV=(0)     FREE THE XDDS AREA
         XC    WJCTXDDS,WJCTXDDS   CLEAR THE XDDS POINTER
         L     R5,WJCTOLNN         DDNAME / LINE REMAINING
         LA    R6,WTO1TXT          POINT TO MESSAGE
         A     R6,WJCTOLOF         ADD OFFSET TO NEXT FIELD
         B     NEXTDDN             GO DO IT
         EJECT
*                                                               MSEIPO4
*        HANDLE JOB TERMINATION CONDITIONS                      MSEIPO4
*                                                               MSEIPO4
JOBTERM  DS    0H                  ENTRY ON JOB TERMINATION
         LTR   R8,R8               DO WE HAVE A WJCT?
         BZ    EXIT                NOPE, DONE WITH SUBTYPE 5 PROCESSING
*                                  POTENTIAL GOOD WJCT
         MVC   ESTAECOD(4),=CL4'WJCT' SAVE ESTAE REFERENCE MATERIAL
         ST    R8,ESTAEWRK            AND THE JMRUCOM WJCT POINTER
         CLC   =CL8'WSRCCJCT',0(R8)   GOOD WJCT?
         BE    JOBCKION            YEP, WE ARE POINTING TO A REAL WJCT
*                                  JMRUCOM HAS BAD WJCT POINTER
*                                  WARN THE OPERATOR AND EXIT
         MVC   WTO1TXT,MSG093A     MOVE THE MSG OVLY TO MSG BUFFER
         USING DMYM093A,R6
         ST    R8,RWORK            BAD WJCT POINTER
         UNPK  DWORD(K8),RWORK(K4) ADD ZONES TO FIELD
         OI    DWORD+7,X'F0'       OR THE LAST ZONE
         TR    DWORD(K8),TRTAB-C0  TRANSLATE TO CHARACTERS
         MVC   M093AWJC(K8),DWORD  MOVE TO OUTPUT LINE
         L     R0,=F'-1'           ERROR MESSAGE
         BAL   R14,MSGRTN
         B     EXIT                DISCONTINUE EXECUTION
*
JOBCKION CLC   SMF30ION,=H'0'      IS THERE AN ID SECTION
         BH    JOBCKTON            YEP
*                                  NOPE, TELL THE OPERATOR
         MVC   WTO1TXT,MSG092A     MOVE THE MSG OVLY TO MSG BUFFER
         L     R0,=F'-1'           ERROR MESSAGE
         BAL   R14,MSGRTN
         B     EXIT                DISCONTINUE EXECUTION
*
JOBCKTON LR    R4,R9               PRIME R4 WITH SMF REC BASE
         A     R4,SMF30IOF         GET ADDRESS OF ID SECTION
         USING SMF30ID,R4
         CLC   SMF30JNM,SMF30JBN   IS THIS A SUBSYSTEM
         BE    EXIT                YES
         DROP  R4
         CLC   SMF30TON,=H'0'      IS THERE A COMPLETION SECTION?
         BH    JOBTERM1            NO
*                                  NOPE, TELL THE OPERATOR
         MVC   WTO1TXT,MSG090A     MOVE THE MSG OVLY TO MSG BUFFER
         L     R0,=F'-1'           ERROR MESSAGE
         BAL   R14,MSGRTN
         B     EXIT                DISCONTINUE EXECUTION
         EJECT
*
* FIX THE COMPLETION CODE TO HIGHEST CODE FOUND
*
JOBTERM1 LR    R4,R9               GET RECORD ADDRESS           MSEIPO4
         A     R4,SMF30TOF         POINT TO SS SEGMENT          MSEIPO4
         USING SMF30CMP,R4                                      MSEIPO4
         MVC   SMF30SCC,WJCTHSCC   PUT IN HIGHEST RETURN CODE
         MVC   SMF30STI,WJCTHSTI   AND INDICATOR
         DROP  R4
         LR    R4,R9               PRIME R4 WITH SMF REC BASE
         A     R4,SMF30IOF         GET ADDRESS OF ID SECTION
         USING SMF30ID,R4
         EJECT
*
* HERE WE DISPLAY SYS004I
*
         MVC   WTO1TXT,MSG001A     MOVE THE MSG OVLY TO MSG BUFFER
         USING DMYM001A,R6
         MVC   M001AIDN,=C'SYS004I '
         MVC   M001AIDM,=C'OFF '
         MVI   M001ARCF,C' '
         MVC   M001ARCF+1(L'M001ARCF-1),M001ARCF
         MVC   M001ASRC,=C'HIGH RC'
         MVC   M001AJBN,JMRJOB     MOVE THE JOBNAME IN
         MVC   M001AJNM,SMF30JNM   MOVE IN JOB NUMBER
         MVC   M001AUSR,SMF30USR   PROGRAMMER FILED
         L     R1,CURRTIME GET JOB TERM TIME
         SR    R0,R0               CLEAR R0
         L     R3,ZERODATE         CLEAR R2
         L     R2,ZERODATE         CLEAR R3
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   M001ATME,TIMEFLD+2
         L     R0,CURRDATE DATE OF STEP INITIATION
         BAL   R14,DATECONV        GO CONVERT DATE
         MVC   M001AGDT,MODDYY     MOVE IN CONVERTED DATE
         MVC   M001ADAY,DAY        MOVE IN DAY-OF-WEEK
         MVC   M001AJDT,JULIAN     MIVE IN JULIAN DATE
         LH    R0,WJCTHSCC         GET COND CODE
         LA    R1,WJCTHSTI         AND INDICATOR
         BAL   R14,PRETCDE         CALL RETURN CODE ROUTINE
         MVC   M001AHCC,RC
         LA    R0,X'1'             011 PUT TO JOBLOG, SYSLOG
         BAL   R14,MSGRTN
         MVC   WTO1TXT,MSG104A     MOVE THE MSG OVLY TO MSG BUFFER
         USING DMYM104A,R6
         LH    R1,SMF30STN         GET STEP NUMBER
         LA    R2,M104ATST
         BAL   R14,PCOUNT
         LH    R1,WJCTNORN         GET STEP NUMBER
         LA    R2,M104ASRN
         BAL   R14,PCOUNT
         LH    R1,WJCTNOFS         GET FLUSHED STEP NUMBER
         LA    R2,M104ASFL
         BAL   R14,PCOUNT
         LH    R1,WJCTNOUA
         LA    R2,M104ASUA
         BAL   R14,PCOUNT
         LH    R1,WJCTNOSA
         LA    R2,M104ASSA
         BAL   R14,PCOUNT
         SR    R0,R0               000 PUT TO JOBLOG
         BAL   R14,MSGRTN
         MVC   WTO1TXT,MSG103A     MOVE THE MSG OVLY TO MSG BUFFER
         USING DMYM103A,R6
         MVC   M103AIDN,=C'SYS104I '
         L     R1,CURRTIME GET STEP TERM TIME
         L     R0,SMF30SIT         GET STEP INIT TIME
         L     R3,CURRDATE GET STEP TERM DATE
         L     R2,SMF30STD         GET STEP INIT DATE
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   M103ATM5,TIMEFLD
         MVC   M103ATM4-10(20),=CL20' '
         DROP  R4                                               MSEIPO4
         EJECT
*                                                               MSEIPO4
* GET INFORMATION FROM CPU ACCOUNTING SECTION
*                                                               MSEIPO4
         CLC   SMF30CON,=H'1'      IS THERE A CPU ACCOUNTING SECTION?
         BL    SECT07              NO
         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4
         A     R4,SMF30COF         POINT TO ID SEGMENT          MSEIPO4
         USING SMF30CAS,R4                                      MSEIPO4
         L     R1,SMF30CPT         GET TCB TIME
         SR    R0,R0               CLEAR R0
         L     R3,ZERODATE         GET A ZERO DATE
         L     R2,ZERODATE         GET A ZERO DATE
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         CLI   TIMEFLD,X'40'
         BE    NOOV3
         MVC   M103ATM1,=C'***:**:**.**'
         B     OV3
NOOV3    MVC   M103ATM1,TIMEFLD+1
OV3      L     R1,SMF30CPS         GET SRB TIME
         SR    R0,R0               CLEAR R0
         L     R3,ZERODATE         GET A ZERO DATE
         L     R2,ZERODATE         GET A ZERO DATE
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         CLI   TIMEFLD,X'40'
         BE    NOOV4
         MVC   M103ATM2,=C'***:**:**.**'
         B     OV4
NOOV4    MVC   M103ATM2,TIMEFLD+1
OV4      L     R1,SMF30CPS         GET SRB TIME
         A     R1,SMF30CPT         ADD TCB TIME
         SR    R0,R0               CLEAR R0
         L     R3,ZERODATE         GET A ZERO DATE
         L     R2,ZERODATE         GET A ZERO DATE
         BAL   R14,PCLOCK          CALL CLOCK CONVERTER
         MVC   M103ATM3,TIMEFLD
SECT07   LA    R0,X'0'             100 PUT TO JESMSG
         BAL   R14,MSGRTN
         DROP  R4                                               MSEIPO4
         EJECT
*                                                               MSEIPO4
* GET INFORMATION FROM I/O ACTIVITY SEGMENT                     MSEIPO4
*                                                               MSEIPO4
         MVC   WTO1TXT,MSG103B     MOVE THE MSG OVLY TO MSG BUFFER
         USING DMYM103B,R6
         MVC   M103BIDN,=C'SYS104I '
         CLC   SMF30UON,=H'1'      IS THERE A UNIT RECORD SECTION?
         BL    SECT08              NO
         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4
         A     R4,SMF30UOF         POINT TO ID SEGMENT          MSEIPO4
         USING SMF30URA,R4                                      MSEIPO4
         L     R1,SMF30TEP         GET TOTAL NUMBER OF EXCPS    MSEIPO4
         LA    R2,M103BEXC
         BAL   R14,PCOUNT          CALL CONVERT ROUTINE
         L     R1,SMF30INP         GET TOTAL NUMBER OF EXCPS    MSEIPO4
         LA    R2,M103BSIN
         BAL   R14,PCOUNT          CALL CONVERT ROUTINE
         DROP  R4
         EJECT
*
* GET INFORMATION FROM OPERATOR SEGMENT
*
SECT08   CLC   SMF30OON,=H'1'      IS THERE AN OPERATOR SECTION?
         BL    SECT09              NO
         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4
         A     R4,SMF30OOF         POINT TO ID SEGMENT          MSEIPO4
         USING SMF30OPS,R4                                      MSEIPO4
         L     R1,SMF30PTM         GET NON-SPEC TAPE
         A     R1,SMF30TPR         ADD SPEC TAPE
         LA    R2,M103BTPM
         BAL   R14,PCOUNT
         DROP  R4
         EJECT
*
* GET INFORMATION FROM PERFORMANCE SEGMENT
*
SECT09   CLC   SMF30RON,=H'1'      IS THERE AN PERFORMANCE SECTION?
         BL    SECT10              NO
         LR    R4,R9               GET RECORD ADDRESS           MSEIPO4
         A     R4,SMF30ROF         POINT TO PERFORMANCE         MSEIPO4
         USING SMF30SAP,R4                                      MSEIPO4
         L     R1,SMF30NSW         SWAP SEQ
         LA    R2,M103BSWP
         BAL   R14,PCOUNT
         LH    R1,SMF30RGN         REGION REQUESTED
         LA    R2,M103BTRG
         BAL   R14,PCOUNT
         MVI   0(R2),CK
         LH    R1,SMF30PRV         REGION USED
         AH    R1,SMF30SYS
         LA    R2,M103BURG
         BAL   R14,PCOUNT
         MVI   0(R2),CK
SECT10   LA    R0,X'0'             100 PUT TO JESMSG
         BAL   R14,MSGRTN
         EJECT
*
* CLEAN UP FROM ACTRT PROCESSING
*
         L     R0,WJCTGMPM         LOAD FREEMAIN PARM
         LTR   R8,R8               IS IT VALID
         BZ    BADWJCT
         LR    R1,R8
         FREEMAIN R,LV=(0),A=(1)   FREE DATA DSECT STORAGE
         XC    JMRUCOM(4),JMRUCOM  CLEAR THE POINT TO IT IN JMR
         DROP  R4
BADWJCT  DS    0H
EXIT     DS    0H                  EXIT PROLOGUE
         ESTAE 0                   CANCEL ESTAE EXIT
FINI     FINISH RC=0               RETURN TO CALLER
         EJECT
*
* WRITE MESSAGE TO WTO
*
MSGRTN   DS    0H                  MESSAGE(WTO) ROUTINE
         STM   R14,R1,SAVEAR2      SAVE A FEW REGISTERS
         ST    R12,R12FORMS        SAVE R12
         L     R1,R12FORYS         GET THE R12 ON ENTRY TO IEFACTRT
         LA    R0,WTO1TXT          ADDRESS OF MESSAGE
         ST    R0,36(R1)           SAVE INTO 'SYSTEM' AREA
         MVC   42(2,R1),=AL2(114) LENGTH SAVE INTO 'SYSTEM' AREA
         L     R15,=V(IEFYS)       ENTRY TO IEFYS
         LR    R12,R1              R12 PRIMED FOR YS
         BALR  R14,R15             GO TO IEFYS
         L     R12,R12FORMS        RESTORE R12
         L     R0,SAVEAR2+8        RESTORE R0
         LTR   R0,R0               WAS IT ZERO
         BZ    MSGRTNEX            YES, DON'T DO WTO
         LA    R1,L'WTO1TXT+K4     GET LENGTH FOR WTO
         STH   R1,WTO1LEN          STORE IN WTO PARM LIST
         C     R0,=F'-1'           ERROR MESSAGE?
         BNE   NORMWTO             NOPE
         MVC   WTO1MCS,ERMCSFLG    MOVE IN MCSFLAG
         MVC   WTO1DESC,ERDESC     MOVE IN DESCRIPTOR CODES
         MVC   WTO1ROUT,ERROUT     MOVE IN ROUTE CODES
         B     DOWTO               DO THE WTO
NORMWTO  MVC   WTO1MCS,MCSFLAG     MOVE IN MCSFLAG
         MVC   WTO1DESC,DESC       MOVE IN DESCRIPTOR CODES
         MVC   WTO1ROUT,ROUT       MOVE IN ROUTE CODES
DOWTO    WTO   MF=(E,WTO1)         ISSUE WTO
MSGRTNEX LM    R14,R1,SAVEAR2      RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*  DATE  CONVERSION ROUTINE: CONVERTS A PACKED DATE TO DAY OF WEEK,   *
*        UNPACKED JULIAN, AND MO/DA/YR  FORMATS                       *
*        INPUT   REG 1 HAS DATE  TO BE CONVERTED                      *
*        OUTPUT  DAY   THREE CHARACTER DAY OF WEEK                    *
*                JULIAN THREE  CHARACTER JULIAN DAY                   *
*                MMDDYY EIGHT  CHARACTER DATE                         *
*                                                                     *
***********************************************************************
DATECONV SAVE  (14,12)             SAVE CALLER'S REGISTERS
         MVC   MODDYY,DATEMASK MOVE IN SLASHES
         STCM  R0,B'0011',WORKDDD1 SAVE DATE
         STCM  R0,B'0011',WORKDDD0 SAVE DATE
         UNPK  JULIAN,WORKDDD1 UNPACK JULIAN DATE
         OI    JULIAN+2,X'F0'  FIX SIGN
         SRL   R0,12           SHIFT YEAR ZERO
         O     R0,=F'15'       FIX SIGN
         STCM  R0,B'0011',WORKYY1 STORE PACKED YEAR
         UNPK  YY,WORKYY1      UNPACK YEAR
         OI    YY+1,X'F0'      FIX SIGN
         LA    R1,MONTABLE     POINT TO 'NORMAL' MONTH TABLE
         TM    WORKYY1+1,B'00110000' IS THIS LEAP YEAR?
         BNZ   MONTHTST        NOPE
         LA    R1,LEPTABLE     POINT TO 'LEAP YEAR' MONTH TABLE
MONTHTST CP    WORKDDD1,0(2,1) CAN WE SUBTRACT THIS MONTH
         BNH   GOTMONTH        NOPE THIS IS THE MONTH
         SP    WORKDDD1,0(2,1) SUBTRACT THE DAYS
         LA    R1,4(R1)        POINT TO NEXT MONTH
         B     MONTHTST        GO TEST AGAIN
GOTMONTH MVC   MO,2(R1)        MOVE IN THE MONTH NUMBER
         UNPK  DD,WORKDDD1     UNPACK DAY
         OI    DD+1,X'F0'      FIX SIGN
         ZAP   WKYR1,WORKYY1   GET THE YEAR
         AP    WKYR1,=P'1900'  ADD 1900
         ZAP   WKYR2,WKYR1     INITIALIZE WKYR2
         SP    WKYR2,=P'1'     TO WKYR1-1
         ZAP   WKYR3,WKYR2     PREPARE TO DIVIDE
         DP    WKYR3,=P'4'     (Y-1)/4
         ZAP   WKTOT,WKYR3(4)  SAVE DIVIDEND
         ZAP   WKYR3,WKYR2     PREPARE TO DIVIDE
         DP    WKYR3,=P'100'   (Y-1)/100
         SP    WKTOT,WKYR3(3)  (Y-1)/4 - (Y-1)/100
         ZAP   WKYR3,WKYR2     PREPARE TO DIVIDE
         DP    WKYR3,=P'400'   (Y-1)/400
         AP    WKTOT,WKYR3(3)  (Y-1)/4 - (Y-1)/100 + (Y-1)/400
         AP    WKTOT,WKYR1     (Y-1)/4 - (Y-1)/100 + (Y-1)/400 + Y
         AP    WKTOT,WORKDDD0  (Y-1)/4 - (Y-1)/100 + (Y-1)/400 + Y + D
         DP    WKTOT,=P'7'     DIVIDE BY 7
         ZAP   DWORD,WKTOT+4(1) PREPARE FOR CONVERT
         CVB   R0,DWORD        CONVERT TO BINARY
         SLL   R0,2            MULTIPLY BY FOUR
         LA    R1,DAYTABLE     POINT TO DAYTABLE
         AR    R1,R0           ADD OFFSET
         MVC   DAY,0(R1)       MOVE IN DAY
DTECVTEX RETURN (14,12)            RETURN TO CALLER
DAYTABLE DC    C'SAT SUN MON TUE WED THU FRI'
MONTABLE DC    PL2'31',CL2'01',PL2'28',CL2'02',PL2'31',CL2'03'
         DC    PL2'30',CL2'04',PL2'31',CL2'05',PL2'30',CL2'06'
         DC    PL2'31',CL2'07',PL2'31',CL2'08',PL2'30',CL2'09'
         DC    PL2'31',CL2'10',PL2'30',CL2'11',PL2'31',CL2'12'
LEPTABLE DC    PL2'31',CL2'01',PL2'29',CL2'02',PL2'31',CL2'03'
         DC    PL2'30',CL2'04',PL2'31',CL2'05',PL2'30',CL2'06'
         DC    PL2'31',CL2'07',PL2'31',CL2'08',PL2'30',CL2'09'
         DC    PL2'31',CL2'10',PL2'30',CL2'11',PL2'31',CL2'12'
         EJECT
***********************************************************************
*                                                                     *
*  COUNT CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *
*        INPUT   REG 1 HAS COUNT TO BE CONVERTED                      *
*        OUTPUT  DWORD COUNTAINS CHARACTER OUTPUT FIELD               *
*                                                                     *
***********************************************************************
         DS    0H
PCOUNT   SAVE  (14,12)             SAVE CALLER'S REGISTERS
         CVD   R1,DWORD            CONVERT COUNT TO DECIMAL
         MVC   EDWORK2,EDMASK2     MOVE IN EDIT MASK
         LA    R1,EDWORK2+L'EDWORK2-1
         EDMK  EDWORK2,DWORD+K2    CONVERT TO CHARACTER
         LA    R3,EDWORK2+L'EDWORK2-1
         SR    R3,R1
         CP    DWORD,P99999        IS COUNT>99999?
         BNH   NOFLOAT             NO, BR PAST FLOAT CODE
         S     R3,=F'2'
         MVC   0(*-*,R2),0(R1)       SHIFT IT RIGHT 3 DEC DIGTS
         EX    R3,*-6
         LA    R2,1(R2,R3)
         MVI   0(R2),CK            MOVE A 'K' FOR THOUSANDS
         B     PCNTEX              BR TO RETURN
NOFLOAT  MVC   0(*-*,R2),0(R1)
         EX    R3,*-6
PCNTEX   LA    R2,1(R2,R3)
         ST    R2,28(R13)
         RETURN (14,12)            RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*  CLOCK CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *
*        INPUT   REG 1 HAS FIRST TIME                                 *
*                REG 0 HAS SECOND TIME                                *
*                REG 3 HAS FIRST DATE                                 *
*                REG 2 HAS SECOND DATE                                *
*        OUTPUT  TIMEFLD COUNTAINS CHARACTER OUTPUT FIELD             *
*                                                                     *
***********************************************************************
PCLOCK   SAVE  (14,12)             SAVE CALLER'S REGISTERS
         MVC   TIMEFLD,TIMEMASK MOVE IN COLONS AND DOT
         STCM  R3,B'0011',WORKDDD1 SAVE THE ENDING DAYS
         STCM  R2,B'0011',WORKDDD0 SAVE THE STARTING DAYS
         SRL   R3,12           MOVE THE YEAR OVER
         O     R3,=F'15'       OR IN THE PACKED SIGN NIBBLE
         STCM  R3,B'0011',WORKYY1 SAVE THE ENDING YEAR
         SRL   R2,12           MOVE THE YEAR OVER
         O     R2,=F'15'       OR IN THE PACKED SIGN NIBBLE
         STCM  R2,B'0011',WORKYY0 SAVE THE STARTING YEAR
         SR    R1,R0           SUBTRACT THE RAW TIME
         BNM   GTZERO1         THIS IS NOT A NEGATIVE NUMBER
         A     R1,HR24         CARRY 24 HOURS
         SP    WORKDDD1,=P'1'  SUBTRACT A DAY FOR THE CARRY
         BNZ   GTZERO1         WE DID NOT SUBTRACT ONE FROM JAN 1
         ZAP   WORKDDD1,=P'365' CARRY A YEAR
         SP    WORKYY1,=P'1'   SUBTRACT A YEAR FOR THE CARRY
         TM    WORKYY1+1,B'00110000' WAS LAST YEAR A LEAP YEAR?
         BNZ   GTZERO1         NO IT WASN'T
         AP    WORKDDD1,=P'1'  ADD ONE (366 DAYS IN A LEAP YEAR)
GTZERO1  SP    WORKDDD1,WORKDDD0 SUBTRACT DAYS
         BNM   GTZERO2         WAS NO NEGATIVE
         AP    WORKDDD1,=P'365' CARRY A YEAR
         SP    WORKYY1,=P'1'   SUBTRACT A YEAR FOR CARRY
         TM    WORKYY1+1,B'00110000' WAS LAST YEAR A LEAP YEAR
         BNZ   GTZERO2         NO
         AP    WORKDDD1,=P'1'  ADD ONE (366 DAYS IN A LEAP YEAR)
GTZERO2  SP    WORKYY1,WORKYY0 SUBTRACT THE YEARS
         BZ    NOLEAPYR        NO YEAR ARITHMATIC
         BP    YEARS           MAYBE MORE THAN ONE YEAR
         MVC   TIMEFLD,=C'----:--:--.--' DENOTE A NEGATIVE NUMBER
         B     PCLKEX          RETURN
YEARS    CP    WORKYY1,=P'1'   WE CAN ONLY HANDLE ONE YEAR
         BE    ADD365          ADD A YEAR OF DAYS
         MVC   TIMEFLD,=C'****:**:**.**' DENOTE A LARGE NUMBER
         B     PCLKEX          RETURN
ADD365   AP    WORKDDD1,=P'365' CARRY A YEAR
         TM    WORKYY0+1,B'00110000' WAS THE YEAR A LEAP YEAR?
         BNZ   NOLEAPYR        NOPE
         AP    WORKDDD1,=P'1'  ADD A DAY FOR LEAP YEAR
NOLEAPYR CP    WORKDDD1,=P'415' WE CAN ONLY 415*24+24(9984) HRS
         BNH   OKAYDAYS        NO OVERFLOW
         MVC   TIMEFLD,=C'****:**:**.**' DENOTE A LARGE NUMBER
         B     PCLKEX          RETURN
OKAYDAYS ZAP   DWORD,WORKDDD1  GET PREPARED TO CVB
         CVB   R3,DWORD        GET DAYS IN REGISTER
         M     R2,HR24         MULTIPLY BY 24 HRS
         AR    R3,R1           ADD TIME FROM SUBTRACT
         SR    R2,R2           CLEAR FOR DIVIDE
         D     R2,HR1          DIVIDE BY HRS
         MVC   PREHHHH(7),=XL7'40202020202021' MOVE IN EDIT FIELD
         CVD   R3,DWORD        CONVERT HRS TO PACKED
         MVC   EDWORK2,EDMASK3     MOVE IN EDIT MASK
         ED    EDWORK2,DWORD+K2    CONVERT TO CHARACTER
         MVC   HHHH,EDWORK2+8  MOVE TO HRS FIELD
         LR    R3,R2           MOVE REMAINDER FOR DIVISION
         SR    R2,R2           CLEAR FOR DIVIDE
         D     R2,MIN1         DIVIDE BY MINUTES
         CVD   R3,DWORD        CONVERT MINUTES TO PACKED
         UNPK  MM,DWORD+6(2)   UNPACK
         OI    MM+1,X'F0'      FIX THE SIGN
         LR    R3,R2           MOVE REMAINDER FOR DIVISION
         SR    R2,R2           CLEAR FOR DIVISION
         D     R2,SEC1         DIVIDE BY SECONDS
         CVD   R3,DWORD        CONVERT SECONDS TO PACKED
         UNPK  SS,DWORD+6(2)   UNPACK
         OI    SS+1,X'F0'      FIX THE SIGN
         CVD   R2,DWORD        CONVERT REMAINDER PACKED
         UNPK  TH,DWORD+6(2)   UNPACK
         OI    TH+1,X'F0'      FIX THE SIGN
PCLKEX   RETURN (14,12)            RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*  CONDITION CODE CONVERSION ROUTINE: CHARACTER OUTPUT INTO RC FIELD  *
*        INPUT   REG 0 HAS            STEP TERM CONDTION CODE         *
*                REG 1 HAS ADDRESS OF STEP TERM INDICATOR FIELD       *
*        OUTPUT  FIELD RC OF OUTPUT LINE CONTAINS RETURN CODE         *
*                                                                     *
***********************************************************************
PRETCDE  SAVE  (14,12)             SAVE CALLER'S REGISTERS
         TM    K0(R1),SMF30FLH     WAS STEP FLUSHED             MSEIPO4
         BNO   NOTFLUSH            NO,BRANCH PAST
         MVC   RC,=C'FLUSH'        MOVE IN FLUSHED MESSAGE
         B     PRETEXT             BR TO RETURN
NOTFLUSH TM    K0(R1),SMF30ABD     DID IT ABEND?                MSEIPO4
         BO    STPABEND            YES, GO CONVERT ABEND CODE
         N     R0,=A(X'FFF')       ZERO UNUSED PORTION
         CVD   R0,RWORK            GET ADDRESS OF COND FIELD
         MVC   RC-K1(L'RC+K1),=X'402120202020' MOVE IN EDIT MASK
         ED    RC-K1(L'RC+K1),RWORK+K5 CONVERT RET CODE TO CHAR
         B     PRETEXT             BR TO RETURN
STPABEND CLM   R0,B'0010',=X'80'   WAS IT A USER ABEND CODE?
         BL    SYSABND             NO, PROCESS SYSTEM ABEND CODE.
         N     R0,=A(X'FFF')       TURN OFF X'80' BIT
         CVD   R0,RWORK            CONVERT FOR OUTPUT
         MVC   RC-K1(L'RC+K1),=X'402120202020' MOVE IN EDIT MASK
         ED    RC-K1(L'RC+K1),RWORK+K5 CONVERT TO CHARACTER
         MVI   RC,C'U'             MOVE IN 'U' USER ABEND
         B     PRETEXT             BR TO RETURN
SYSABND  STH   R0,RWORK            STORE ABEND CODE
         UNPK  RWORK+K3(K5),RWORK(K3) ADD ZONES TO CC FIELD
         TR    RWORK+K4(K3),TRTAB-C0 TRANSLATE TO CHARACTERS
         MVC   RC+K2(L'RC-K2),RWORK+K4  MOVE TO OUTPUT LINE
         MVC   RC(K2),=C'*S'       MOVE IN S FOR SYSTEM ABEND
PRETEXT  RETURN (14,12)            RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*  ESTAE EXIT ROUTINE                                                 *
*                                                                     *
***********************************************************************
RECOVERY DS    0H
         USING *,R15               SET UP ADDRESSABILITY
         LA    R4,K4               PUT 4 IN REGISTER FOR COMPARE
         CR    R0,R4               IS SDWA PRESENT?
         BNE   HAVESDWA            YES, BR TO PROCESS WITH SDWA
         L     R0,K0(R2)           LOAD RETRY ADDRESS FROM PARAM LIST
         ST    R1,ESTAEPSW-ESTAPARM(R2) SAVE THE ABEND CODE
         XC    ESTAEPSW-ESTAPARM(4,R2),ESTAEPSW-ESTAPARM(R2) CLR PSW
         LA    R15,K4              SET RETCODE TO RETRY ADDR IN R0
         BR    R14                 RETURN TO PROCESSOR WITH RETRY ADDR
HAVESDWA DS    0H                  ENTER HERE IF SDWA PRESENT
         ST    R14,12(R13)         SAVE RETURN ADDRESS
         USING SDWA,R1
         L     R2,SDWAPARM         LOAD PARAM LIST ADDR FROM SDWA
         L     R4,SDWAABCC         GET THE ABEND CODE
         ST    R4,ESTAEABN-ESTAPARM(R2) SAVE  IT
         L     R4,SDWANXT1         GET NEXT EC INSTRUCTION POINTER
         ST    R4,ESTAEPSW-ESTAPARM(R2) SAVE IT
         DROP  R1
         L     R2,SDWARR-ESTAPARM(R2) LOAD RETRY ADDRESS
         SETRP RC=4,,RETADDR=(2),RETREGS=YES,FRESDWA=YES,REGS=(14)
         DROP  R15
         SPACE 3
***********************************************************************
*                                                                     *
*  ESTAE RETRY ROUTINE WHEN NO SDWA WAS PRESENT                       *
*                                                                     *
***********************************************************************
RTRYRTN1 DS    0H                  RETRY ROUTINE WITH NO SDWA PRESENT
         LM    R12,R13,K8(R1)      LOAD REGS FOR ESTAE PARM LIST
         B     RTRYRTN2            AND GET OUT
***********************************************************************
*                                                                     *
*  ESTAE RETRY ROUTINE WHEN SDWA WAS PRESENT                          *
*                                                                     *
***********************************************************************
RTRYRTN2 DS    0H
         LA    R11,CONSTANT
         LA    R6,WTO1TXT
         MVC   WTO1TXT,MSG095A     MOVE THE MSG OVLY TO MSG BUFFER
         USING DMYM095A,R6
         MVC   RWORK,ESTAECOD
         UNPK  DWORD(K8),RWORK(K4) ADD ZONES TO FIELD
         OI    DWORD+7,X'F0'       OR THE LAST ZONE
         TR    DWORD(K8),TRTAB-C0  TRANSLATE TO CHARACTERS
         MVC   M095ACOD,DWORD     MOVE TO OUTPUT LINE
         MVC   RWORK,ESTAEPSW
         UNPK  DWORD(K8),RWORK(K4) ADD ZONES TO FIELD
         OI    DWORD+7,X'F0'       OR THE LAST ZONE
         TR    DWORD(K8),TRTAB-C0  TRANSLATE TO CHARACTERS
         MVC   M095APSW,DWORD     MOVE TO OUTPUT LINE
         MVC   RWORK,ESTAEWRK
         UNPK  DWORD(K8),RWORK(K4) ADD ZONES TO FIELD
         OI    DWORD+7,X'F0'       OR THE LAST ZONE
         TR    DWORD(K8),TRTAB-C0  TRANSLATE TO CHARACTERS
         MVC   M095AWRK,DWORD     MOVE TO OUTPUT LINE
         MVC   RWORK,ESTAEABN
         UNPK  DWORD(K8),RWORK(K4) ADD ZONES TO FIELD
         OI    DWORD+7,X'F0'       OR THE LAST ZONE
         TR    DWORD(K8),TRTAB-C0  TRANSLATE TO CHARACTERS
         MVC   M095AABN,DWORD     MOVE TO OUTPUT LINE
         L     R0,=F'-1'           ERROR MESSAGE
         BAL   R14,MSGRTN
         B     FINI
         EJECT
***********************************************************************
*                                                                     *
*  PATCH AREA                                                         *
*                                                                     *
***********************************************************************
MODLEN   EQU   *-IEFACTRT
LPATCH1  EQU   (MODLEN+K9)/K5/K8+K1 ADD 5% FOR PATCH AREA
LPATCHL1 DC    AL2(LPATCH1*K8)
SPATCH1  DC    S(PATCH1)
PATCH1   DC    (LPATCH1)D'00'
         EJECT
***********************************************************************
*                                                                     *
*  PROGRAM CONSTANTS                                                  *
*                                                                     *
***********************************************************************
CONSTANT DS    0D
WJCTGMPM DC    0F'0',AL1(LSQASUBP),AL3(LWJCT)
XDDSGMPM DC    0F'0',AL1(LSQASUBP),AL3(114)
R30CODE  DC    F'20'               CODE FOR NEW RECORD 30       MSEIPO4
R32CODE  DC    F'24'               CODE FOR NEW RECORD 32       WDA#01
R30START DC    H'1'                  STEP TERMINATION           MSEIPO4
R30STEP  DC    H'4'                  STEP TERMINATION           MSEIPO4
R30JOB   DC    H'5'                  JOB TERMINATION            MSEIPO4
F6       DC    F'6'
TOVER    DC    F'10000000'         OVERFLOW CONSTANT
HR24     DC    A(24*60*60*100)     24 HRS IN .01 SECONDS
HR1      DC    A(60*60*100)        1 HR IN .01 SECONDS
MIN1     DC    A(60*100)           1 MIN IN .01 SECONDS
SEC1     DC    A(100)              1 SEC IN .01 SECONDS
MCSFLAG  DC    B'1000001000000000' ROUT+HRDCPY
*                0123456789ABCDEF
DESC     DC    B'0000000000000000' NO DEC CODES
*                1234567890123456
ROUT     DC    B'0000000000000100' ROUT CODE=14
*                1234567890123456
ERMCSFLG DC    B'1000010000000000' ROUT+BROADCAST
*                0123456789ABCDEF
ERDESC   DC    B'0100000000000000' IMMEDIATE ACTION REQUIRED
*                1234567890123456
ERROUT   DC    B'1111111111111111' ROUT CODE=ALL
*                1234567890123456
P99999   DC    P'99999'
EDMASK2  DC    XL12'402020202020202020202120'
EDMASK3  DC    XL12'402020202020202020212020'
TIMEMASK DC    CL13'HHHH:MM:SS.TH'
DATEMASK DC    CL8'MO/DD/YY'
         DS    0F
ZERODATE DC    PL4'0'
DATE1    DC    PL4'1'
*
* DEFINE ESTAE LIST FORM
*
ESTAEL   ESTAE MF=L               CREATE MODEL ESTAE PARM LIST
LESTAEL  EQU   *-ESTAEL           NAME ITS LENGTH
         EJECT
***********************************************************************
*                                                                     *
*  PROGRAM MESSAGES                                                   *
*                                                                     *
***********************************************************************
MSG084A  DS    0C
         DC    C'SYS084E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'TSO TERMINAL STATION SET: NO IDENTIFICATION SECTION'
         DC    CL(114-(*-MSG084A))' '
MSG085A  DS    0C
         DC    C'SYS085E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'TSO TERMINAL STATION SET: IDENTIFICATION SECTION'
         DC    C' TOO SHORT'
         DC    CL(114-(*-MSG085A))' '
MSG086A  DS    0C
         DC    C'SYS086E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'TSO TERMINAL STATION SET: ZERO TSB POINTER '
         DC    CL(114-(*-MSG086A))' '
MSG087A  DS    0C
         DC    C'SYS087E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'TSO TERMINAL STATION SET: NO IDENTIFICATION SECTION'
         DC    CL(114-(*-MSG087A))' '
MSG088A  DS    0C
         DC    C'SYS088E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'TSO TERMINAL STATION SET: IDENTIFICATION SECTION'
         DC    C' TOO SHORT'
         DC    CL(114-(*-MSG088A))' '
MSG089A  DS    0C
         DC    C'SYS089E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'TSO TERMINAL STATION SET: ZERO TSB POINTER '
         DC    CL(114-(*-MSG089A))' '
MSG090A  DS    0C
         DC    C'SYS090E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'JOBTERM: TYPE 30 RECORD WITH NO COMPLETION SECTION'
         DC    CL(114-(*-MSG090A))' '
MSG091A  DS    0C
         DC    C'SYS091E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'TYPE 30 RECORD WITH NO STORAGE SECTION'
         DC    CL(114-(*-MSG091A))' '
MSG092A  DS    0C
         DC    C'SYS092E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'JOBTERM: TYPE 30 RECORD WITH NO IDENTIFICATION '
         DC    C'SECTION'
         DC    CL(114-(*-MSG092A))' '
MSG093A  DS    0C
         DC    C'SYS093E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'JOBTERM: WJCT INVALID POINTER IN JMRUCOM - '
         DC    C'12345678'
         DC    CL(114-(*-MSG093A))' '
MSG094A  DS    0C
         DC    C'SYS094E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'TYPE 30 RECORD WITH NO SUBSYSTEM SECTION'
         DC    CL(114-(*-MSG094A))' '
MSG095A  DS    0C
         DC    C'SYS095E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'ESTAED - '
         DC    C'12345678 '
         DC    C'12345678 '
         DC    C'12345678 '
         DC    C'12345678 '
         DC    CL(114-(*-MSG095A))' '
MSG096A  DS    0C
         DC    C'SYS096E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'STEPTERM: WJCT INVALID POINTER IN JMRUCOM - '
         DC    C'12345678'
         DC    CL(114-(*-MSG096A))' '
MSG097A  DS    0C
         DC    C'SYS097E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'EXTENDED DD TYPE30 SUBTYPE 4, JMRUCOM IS ZERO'
         DC    CL(114-(*-MSG097A))' '
MSG098A  DS    0C
         DC    C'SYS098E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'JMR HAS A STEP NUMBER OF ZERO'
         DC    CL(114-(*-MSG098A))' '
MSG099A  DS    0C
         DC    C'SYS099E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'TYPE 30 WITH NO ID SECTION'
         DC    CL(114-(*-MSG099A))' '
MSG001A  DS    0C
         DC    C'SYS001I '
         DC    C'ON  '
         DC    C'JOBNAMEX'
         DC    C'('
         DC    C'JOB 1234'
         DC    C') '
         DS    0CL8
         DC    C'HH:MM:SS'
         DC    C' '
         DC    C'DAY'
         DC    C' '
         DS    0CL8
         DC    C'MO/DD/YY'
         DC    C'('
         DC    C'DDD'
         DC    C')'
         DS    0CL54
         DC    C' FOR '
         DC    C'12345678901234567890'
         DC    C' ON '
         DC    C'SUID'
         DC    C' CL/PR '
         DC    C'X'
         DC    C'/'
         DC    C'   '
         DC    CL(114-(*-MSG001A))' '
MSG101A  DS    0C
         DC    C'SYS101I '
         DC    C'    '
         DC    C'READER OFF '
         DS    0CL8
         DC    C'HH:MM:SS'
         DC    C' '
         DC    C'DAY'
         DC    C' '
         DS    0CL8
         DC    C'MO/DD/YY'
         DC    C'('
         DC    C'DDD'
         DC    C') '
         DC    C' QUEUE WAIT '
         DS    0CL10
         DC    C'HHHH:MM:SS'
         DC    C' ENQUEUE WAIT '
         DS    0CL10
         DC    C'HHHH:MM:SS'
         DC    CL(114-(*-MSG101A))' '
MSG102A  DC    C'SYS102I '
         DC    C'DO  '
         DC    C'JOBNAMEX'
         DC    C'('
         DC    C'JOB 1234'
         DC    C') '
         DC    C'        '
         DC    C'.'
         DC    C'        '
         DC    C'('
         DC    C'   '
         DC    C' PGM '
         DC    C'PROGNAME'
         DC    C' '
         DS    0CL8
         DC    C'HH:MM:SS'
         DC    C' '
         DC    C'DAY'
         DC    C' '
         DS    0CL8
         DC    C'MO/DD/YY'
         DC    C'('
         DC    C'DDD'
         DC    C') '
         DC    CL(114-(*-MSG102A))' '
MSG103A  DC    C'SYS103I '
         DC    C'    '
         DC    C'TCB '
         DC    C'   '
         DC    C':'
         DC    C'  '
         DC    C':'
         DC    C'  '
         DC    C'.'
         DC    C'  '
         DC    C' SRB '
         DC    C'   '
         DC    C':'
         DC    C'  '
         DC    C':'
         DC    C'  '
         DC    C'.'
         DC    C'  '
         DC    C' TOTAL '
         DC    C'    '
         DC    C':'
         DC    C'  '
         DC    C':'
         DC    C'  '
         DC    C'.'
         DC    C'  '
         DC    C' ELAPSE '
         DC    C'    '
         DC    C':'
         DC    C'  '
         DC    C':'
         DC    C'  '
         DC    C' DEV WAIT '
         DC    C'    '
         DC    C':'
         DC    C'  '
         DC    C':'
         DC    C'  '
         DC    CL(114-(*-MSG103A))' '
MSG103B  DC    C'SYS103I '
         DC    C'    '
         DC    C'TAPE MOUNTS '
         DC    C'    '
         DC    C' SYSIN '
         DC    C'          '
         DC    C' SWAPS '
         DC    C'          '
         DC    C' EXCP '
         DC    C'          '
         DC    C' REGION '
         DC    C'     '
         DC    C'  USED '
         DC    CL(114-(*-MSG103B))' '
MSG104A  DS    0C
         DC    C'SYS104I '
         DC    C'    '
         DC    C'STEPS: TOTAL '
         DC    C'   '
         DC    C' RUN '
         DC    C'   '
         DC    C' FLUSHED '
         DC    C'   '
         DC    C' USER ABENDED '
         DC    C'   '
         DC    C' SYSTEM ABENDED '
         DC    C'   '
         DC    CL(114-(*-MSG104A))' '
         EJECT
***********************************************************************
*                                                                     *
*  DEVICE TABLE FOR TRANSLATING UCB TYPE BYTES TO LITERALS            *
*                                                                     *
***********************************************************************
DEVTABLE DS    0H
         DC    X'0000',C'JES2'
         DC    X'8003',C'TAPE'
         DC    X'8000',C'TAPE'
         DC    X'2009',C'3330'
         DC    X'200A',C'3340'
         DC    X'200B',C'3350'
         DC    X'200D',C'3331'
         DC    X'200E',C'3380'
         DC    X'2000',C'DASD'
         DC    X'1009',C'3270'
         DC    X'1000',C'GRAF'
         DC    X'0801',C'254R'
         DC    X'0802',C'254P'
         DC    X'0804',C'2501'
         DC    X'0805',C'2520'
         DC    X'0806',C'3505'
         DC    X'0808',C'1403'
         DC    X'0809',C'3211'
         DC    X'080B',C'3203'
         DC    X'080C',C'3525'
         DC    X'080E',C'3800'
         DC    X'0800',C'U/R '
         DC    X'4000',C'TP  '
         DC    X'4100',C'CTCA'
         DC    X'FFFF',C'UNKN'
         EJECT
***********************************************************************
*                                                                     *
*  TRANSLATE TABLE FOR HEX CONVERSION                                 *
*                                                                     *
***********************************************************************
TRTAB    DC    C'0123456789ABCDEF'
         EJECT
***********************************************************************
*                                                                     *
*  LITERALS                                                           *
*                                                                     *
***********************************************************************
         LTORG ,
         EJECT
***********************************************************************
*                                                                     *
*  CONSTANT PATCH AREA                                                *
*                                                                     *
***********************************************************************
CONLEN   EQU   *-CONSTANT
LPATCH2  EQU   (CONLEN+K9)/K5/K8+K1 ADD 5% FOR PATCH AREA
LPATCHL2 DC    AL2(LPATCH2*K8)
SPATCH2  DC    S(PATCH2)
PATCH2   DC    (LPATCH2)D'00'
         EJECT
***********************************************************************
*                                                                     *
*  WORKING STORAGE / SAVE AREA                                        *
*                                                                     *
***********************************************************************
DATA     DSECT
SAVE     DS    18F              SAVE AREA FOR REGISTERS ON ENTRY
         ORG   SAVE
SAVEXX   DS    F
SAVEBK   DS    F
SAVEFW   DS    F
SAVER14  DS    F
SAVER15  DS    F
SAVER0   DS    F
SAVER1   DS    F
         DS    11F
R12FORYS DS    F
R12FORMS DS    F
NUMLEN   DS    F
*
DWORD    DS    D
RWORK    DS    D
TIMEDATE DS    0D
CURRTIME DS    F
CURRDATE DS    F
ESTAEW   DS    XL(LESTAEL)      ESTAE PARM LIST AREA
ESTAPARM DS    0F               PARAMETER LIST PASSED TO RETR
NOSDWARR DS    F   +0  1 RETRY ROUTINE ADDRESS - NO SWDA OBTAINED
SDWARR   DS    F   +4  2 RETRY ROUTINE ADDRESS - SWDA OBTAINED
ESTAER12 DS    F   +8  3 BASE REGISTER R12
ESTAER13 DS    F  +12  4 DATA REGISTER R13
ESTAECOD DS    F  +16  5 ENTRY CODE
ESTAE2RR DS    F  +20  6 SECOND LEVEL RETRY ADDRESS
ESTAEABN DS    F  +24  7 ABEND CODE
ESTAEPSW DS    F  +28  8 FAILING ADDRESS FROM SDWA IF AVAILABLE
ESTAEWRK DS    F  +32  9 WORK WORD IF NEEDED
LESTAEPM EQU   *-ESTAPARM
*
SAVEAR2  DS    6F               INTERNAL SAVE REGISTER SAVE AREA
*
PARMS    DS    0F               PARMS PASSED IN REG 1 TO ROUTINE
PARMEPRM DS    F                PTR TO COMMON EXIT PARAMETER AREA
PARMSTEP DS    F                PTR TO STEPNAME FIELD
PARMPROG DS    F                PTR TO PROGRAMMER NAME FIELD
PARMJOBC DS    F                PTR TO JOB CPU TIME FIELD
PARMACCT DS    F                PTR TO JOB ACCOUNTING FIELDS
PARMSTPC DS    F                PTR TO STEP CPU TIME FIELD
PARMSACT DS    F                PTR TO STEP ACCOUNTING FIELDS
PARMINDC DS    F                PTR TO CANCEL FLAG & STEP NUMBER
PARMCOND DS    F                PTR TO CONDITION CODE FIELD
PARMRECD DS    F                PTR TO SMF RECORD TO BE WRITTEN
LPARMS   EQU   *-PARMS
EDWORK   DC    XL9'00'
EDWORK2  DC    XL12'00'
WORKDDD1 DS    PL2
WORKYY1  DS    PL2
WORKDDD0 DS    PL2
WORKYY0  DS    PL2
WKYR1    DS    PL4
WKYR2    DS    PL4
WKYR3    DS    PL5
WKTOT    DS    PL5
         DS    C                   SPACE FOR PAD CHARACTER
RC       DS    CL5
MODDYY   DS    0CL8
MO       DS    CL2
         DS    C
DD       DS    CL2
         DS    C
YY       DS    CL2
JULIAN   DS    CL3
DAY      DS    CL3
PREHHHH  DS    CL3
TIMEFLD  DS    0CL13
HHHH     DS    CL4
         DS    C
MM       DS    CL2
         DS    C
SS       DS    CL2
         DS    C
TH       DS    CL2
*
LWTO1    EQU   114+KA
         DS    0F
WTO1     DS    0CL(LWTO1)
WTO1LEN  DS    XL2
WTO1MCS  DS    XL2
WTO1TXT  DS    CL114            MESSAGE TEXT
WTO1DESC DS    XL2
WTO1ROUT DS    XL2
         DS    6D             RESERVE FOR ZAPS
LDATA    EQU   *-DATA
         EJECT
***********************************************************************
*                                                                     *
*  MAPPING DSECTS                                                     *
*                                                                     *
***********************************************************************
DMYM095A DSECT
         DC    C'SYS095E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'ESTAED - '
M095ACOD DC    C'12345678 '
M095AWRK DC    C'12345678 '
M095APSW DC    C'12345678 '
M095AABN DC    C'12345678 '
         SPACE 2
DMYM093A DSECT
         DC    C'SYS093E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'JOBTERM: WJCT INVALID POINTER IN JMRUCOM - '
M093AWJC DC    C'12345678'
         EJECT
DMYM096A DSECT
         DC    C'SYS096E '
         DC    C'IEFACTRT ERROR, CONTACT SYSTEMS PROGRAMMING: '
         DC    C'STEPTERM: WJCT INVALID POINTER IN JMRUCOM - '
M096AWJC DC    C'12345678'
         SPACE 2
DMYM001A DSECT
M001AIDN DC    C'SYS001I '
M001AIDM DC    C'ON  '
M001AJBN DC    C'JOBNAMEX'
         DC    C'('
M001AJNM DC    C'JOB 1234'
         DC    C') '
M001ATME DS    0CL8
         DC    C'HH:MM:SS'
         DC    C' '
M001ADAY DC    C'DAY'
         DC    C' '
M001AGDT DS    0CL8
         DC    C'MO/DD/YY'
         DC    C'('
M001AJDT DC    C'DDD'
         DC    C')'
M001ASTP DS    0CL54
         DC    C' FOR '
M001AUSR DC    C'12345678901234567890'
M001ARCF DS    0CL19
         DC    C' ON '
M001ASID DC    C'SUID'
         DC    C' CL/PR '
M001ACLS DC    C'X'
         DC    C'/'
M001AJPT DC    C'   '
         DC    C'         '
M001ASRC EQU   M001ARCF+6,7,C'C'
M001AHCC EQU   M001ARCF+14,5,C'C'
M001ALEN EQU   *-M001AIDN
         EJECT
DMYM101A DSECT
M101AIDN DC    C'SYS101I '
         DC    C'    '
         DC    C'READER OFF '
M101ATM1 DS    0CL8
         DC    C'HH:MM:SS'
         DC    C' '
M101ADY1 DC    C'DAY'
         DC    C' '
M101AGD1 DS    0CL8
         DC    C'MO/DD/YY'
         DC    C'('
M101AJDT DC    C'DDD'
         DC    C') '
         DC    C' QUEUE WAIT '
M101ATM2 DS    0CL10
         DC    C'HHHH:MM:SS'
         DC    C' ENQUEUE WAIT '
M101ATM3 DS    0CL10
         DC    C'HHHH:MM:SS'
         DC    CL19' '
M101ALEN EQU   *-M101AIDN
         SPACE 2
DMYM102A DSECT
M102AIDN DC    C'SYS102I '
M102AIDM DC    C'DO  '
M102AJBN DC    C'JOBNAMEX'
         DC    C'('
M102AJNM DC    C'JOB 1234'
         DC    C') '
M102ASTP DC    C'STEPNAME'
         DC    C'.'
M102APRC DC    C'PROCSTEP'
         DC    C'('
M102ASNN DC    C'NNN'
         DC    C' PGM '
M102APRG DC    C'PROGNAME'
         DC    C' '
M102ATM1 DS    0CL8
         DC    C'HH:MM:SS'
         DC    C' '
M102ADAY DC    C'DAY'
         DC    C' '
M102AGD1 DS    0CL8
         DC    C'MO/DD/YY'
         DC    C'('
M102AJDT DC    C'DDD'
         DC    C') '
M102ASRC DS    0CL3
         DC    CL3'RC '
M102ARC  DS    0CL5
         DC    CL5' '
M102ALEN EQU   *-M102AIDN
         EJECT
DMYM103A DSECT
M103AIDN DC    C'SYS103I '
         DC    C'    '
         DC    C'TCB '
M103ATM1 DS    0CL12
         DC    C'HHH:MM:SS.TH'
         DC    C' SRB '
M103ATM2 DS    0CL12
         DC    C'HHH:MM:SS.TH'
         DC    C' TOTAL '
M103ATM3 DS    0CL13
         DC    C'HHHH:MM:SS.TH'
         DC    C' ELAPSE '
M103ATM5 DS    0CL10
         DC    C'HHHH:MM:SS'
         DC    C' DEV WAIT '
M103ATM4 DS    0CL10
         DC    C'HHHH:MM:SS'
         DC    CL14' '
M103ALEN EQU   *-M103AIDN
         SPACE 2
DMYM103B DSECT
M103BIDN DC    C'SYS103I '
         DC    C'    '
         DC    C'TAPE MOUNTS '
M103BTPM DC    C'NNNN'
         DC    C' SYSIN '
M103BSIN DC    C'NNNNNNNN'
         DC    C'   SWAPS '
M103BSWP DC    C'NNNNNNNN'
         DC    C'   EXCP '
M103BEXC DC    C'NNNNNNNN'
         DC    C'   REGION '
M103BTRG DC    C'NNNNN'
         DC    C'K USED '
M103BURG DC    C'NNNNN'
         DC    C'K'
         DC    CL13' '
M103BLEN EQU   *-M103BIDN
         EJECT
DMYM103C DSECT
M103CDDN DC    C'DDNAMEXX'
         DC    C' '
M103CNNN DC    C'NNN'
         DC    C' '
M103CCUA DC    C'CUU'
         DC    C' '
M103CDEV DC    C'DEVT'
         DC    C' '
M103CEXC DC    C'NNNNNNNN'
         DC    C'      '
M103CLEN EQU   *-DMYM103C
         SPACE 2
DMYM104A DSECT
M104AIDN DC    C'SYS104I '
         DC    C'    '
         DC    C'STEPS: TOTAL '
M104ATST DC    C'NNN'
         DC    C' RUN '
M104ASRN DC    C'NNN'
         DC    C' FLUSHED '
M104ASFL DC    C'NNN'
         DC    C' USER ABENDED '
M104ASUA DC    C'NNN'
         DC    C' SYSTEM ABENDED '
M104ASSA DC    C'NNN '
         DC    CL13' '
M104ALEN EQU   *-M104AIDN
         EJECT
WJCT     DSECT
WJCTID   DC    CL8'WSRCCJCT'
*
WJCTHSCC DS    H                   HIGHEST COMPLETION CODE
WJCTHSTI DS    H                    AND TERMINATION CODE
*
WJCTNORN DS    H                   NUMBER OF RAN
WJCTNOFS DS    H                   NUMBER OF FLUSHED STEPS
*
WJCTNOUA DS    H                   NUMBER OF USER ABEND
WJCTNOSA DS    H                   NUMBER OF SYSTEM ABEND
*
WJCTHIRC DS    F                   RELATIVE HIGHEST RETURN CODE FOR
*                                  COMPARE
WJCTDDNO DS    F                   CONCATENATED DD NUMBER
WJCTXDDS DS    F                   POINTER TO GETMAINED MSG LINE
WJCTOLOF DS    F                   OUTPUT LINE OFFSET
WJCTOLNN DS    F                   NUMBER OF POSITIONS LEFT IN LINE
WJCTDDNM DS    CL8                 LAST DDNAME
LWJCT    EQU   *-WJCT
         EJECT
         IFASMFR 30                SMF TYPE 30 RECORD           MSEIPO4
         SPACE 2
         IFASMFR 32                SMF TYPE 32 RECORD           WDA#01
         SPACE 2
         IEFJMR                    JMR MAPS COMMON PARAMETER AREA
         SPACE 2
         IHASDWA DSECT=YES         SDWA FOR ESTAE/SETRP MACRO
         SPACE 2
         IKJTSB LIST=YES,EXT=NO
         IKTTSBX
         IHAASCB
         END   IEFACTRT
