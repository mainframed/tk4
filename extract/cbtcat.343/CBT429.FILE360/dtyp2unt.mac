         TITLE 'W.S.R.C.C.  <DTYP2UNT>  CONVERT UCB-TYPE HEX DEVICE COD*
               E TO UNIT NAME - JOHN A SHELL'
*---------------------------------------------------------------------*
*                                                                     *
*                             <DTYP2UNT>                              *
*                                                                     *
*             CONVERT UCB-TYPE HEX DEVICE CODE SUBROUTINE             *
*                                                                     *
*                                                                     *
*      MANY SYSTEM UTILITIES HAVE NEED OF THE ABILITY TO CONVERT      *
*      A UCB-TYPE HEX DEVICE CODE INTO A VALID UNIT NAME. THIS        *
*      USUALLY MEANT HARD-CODING A TABLE OF YOUR SYSTEM'S DEVICES     *
*      INTO EACH PROGRAM. THEN, AS NEW DEVICE TYPES WERE ADDED        *
*      TO YOUR SYSTEM, YOU ALWAYS HAD MULTIPLE UPDATES TO MAKE.       *
*      ALL OF THE NECESSARY INFORMATION, HOWEVER, IS CURRENTLY        *
*      AVAILABLE TO YOU IN THE SYSTEM DEVICE NAME TABLE <DEVNAMET>.   *
*      <DTYP2UNT> SUBROUTINE WILL NOW MAKE THIS CONVERSION FOR YOU!   *
*                                                                     *
*      TO INVOKE <DTYP2UNT> FROM AN ASSEMBLER PROGRAM, JUST CODE...   *
*                                                                     *
*        CALL  DTYP2UNT,(UCBTYP,UNITNAME),VL                          *
*                                                                     *
*        WHERE...                                                     *
*                                                                     *
*              UCBTYP      REPRESENTS A FOUR BYTE FIELD CONTAINING    *
*                          THE HEXIDECIMAL UCB-TYPE DEVICE CODE.      *
*                                                                     *
*              UNITNAME    IS AN EIGHT BYTE FIELD TO RECEIVE THE      *
*                          RESULTANT UNIT NAME. MOST OF THE TIME IT   *
*                          WILL BE A DEVICE-TYPE (3330, 2400-3), BUT, *
*                          ON OCCASION, IT WILL RETURN A GROUP-NAME   *
*                          (SYSDA, TAPE9TRK). IF NO MATCHING ENTRY    *
*                          IS FOUND IN THE SYSTEM DEVICE NAME TABLE,  *
*                          ALL ASTERISKS WILL BE RETURNED.            *
*                                                                     *
*      ABNORMAL COMPLETION CODES                                      *
*                                                                     *
*        U008  MORE OR LESS THAN THE REQUIRED 2 PARAMETERS WAS        *
*              PROVIDED.                                              *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*              W A R N I N G ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !        *
*                                                                     *
*        I HAVE BEEN TOLD THAT THE DEVICE NAME TABLE <DEVNAMET>       *
*        WILL CEASE TO EXIST WITH MVS/XA. IF THIS TRUE, I HAVE        *
*        NO IDEA IF THERE WILL BE AN EQUIVALENT FUNCTION/MODULE       *
*        TO RELACE IT.                                                *
*                                  JOHN A SHELL                       *
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
DTYP2UNT CSECT
R0       EQU   0                   *************
R1       EQU   1                   *           *
R2       EQU   2                   * REGISTERS *
R3       EQU   3                   *    ARE    *
R4       EQU   4                   *  EQUATED  *
R5       EQU   5                   *    TO     *
R6       EQU   6                   *  SYMBOLS  *
R7       EQU   7                   *    SO     *
R8       EQU   8                   *   THEY    *
R9       EQU   9                   *   WILL    *
R10      EQU   10                  *   SHOW    *
R11      EQU   11                  *    ON     *
R12      EQU   12                  *   CROSS   *
R13      EQU   13                  * REFERENCE *
R14      EQU   14                  *           *
R15      EQU   15                  *************
         USING *,R15               INITIALLY USE ENTRY AS BASE REGISTER
         B     $BG0001             BRANCH AROUND CONSTANTS
         DC    CL8'DTYP2UNT'       CSECT ID
         DC    C'_',C'&SYSDATE.@&SYSTIME._' SYSTEM DATE AND TIME
$BG0001A DS    18F                 MY REGISTER SAVE AREA
$BG0001  DS    0H
         STM   R14,R12,12(R13)     SAVE CLG PGMS REGS
         LA    R3,$BG0001A         LOAD ADDR OF MY REG SAVE AREA
         ST    R13,4(R3)           STORE ADDR OF CLG SAVE IN MINE
         ST    R3,8(R13)           STORE ADDR OF MY SAVE IN CLG PGM
         LR    R13,R3              POINT REG 13 AT MY SAVE AREA
         DROP  R15                 DROP INITIAL BASE REGISTER
         USING $BG0001A,R13
         LM    R3,R4,0(R1)         LOAD PARAMETER ADDRESS LIST
         LTR   R3,R3               ONLY ONE ADDRESS...
         BM    BADLIST                ..YES, BAD LIST (2 REQUIRED)
         LTR   R4,R4               TWO ADDRESSES...
         BM    LISTOK                 ..YES, LIST OK, GO ON
BADLIST  EQU   *
         ABEND 8                   TERMINATE ABNORMALLY
*
LISTOK   EQU   *
         SR    R9,R9               ZERO RETURN CODE
SW1T     DS    0H
         NOP   LOOKUP              NOP/BRANCH AFTER 1ST TIME
         OI    SW1T+1,X'F0'        RESET NOP TO BRANCH
         LOAD  EPLOC=DEVNAMET      LOAD/FIND DEVICE NAME TABLE
         ST    R0,DNTBLADR         SAVE TABLE ADDR IN CORE
LOOKUP   EQU   *
         L     R5,DNTBLADR         LOAD TABLE ADDRESS AND
         L     R6,0(R5)                 NBR OF ENTRIES IN TABLE
         LA    R5,4(R5)            POINT AT 1ST ENTRY
DVNLOOP  EQU   *
         CLC   0(4,R3),8(R5)       DOES DEVTYPE = TABLE...
         BE    HIT                    ..YES, GO RETURN UNIT NAME
         LA    R5,12(R5)              ..NO, INCREMENT TABLE POINTER AND
         BCT   R6,DVNLOOP                   TRY NEXT ENTRY (IF ANY)
MISS     EQU   *
         MVC   0(8,R4),=C'********' NO MORE, INSERT ASTERISKS AND
         LA    R9,4                          SET NON-ZERO RETURN CODE
         B     WRAPUP              RETURN TO CALLING PROGRAM
*
HIT      EQU   *
         MVC   0(8,R4),0(R5)       RETURN UNIT NAME TO CALLING PROGRAM
WRAPUP   EQU   *
*        FINISH RC=(9)
         LR    R15,R9              LOAD RETURN CODE FROM REGISTER
         L     R13,4(R13)          RESTORE POINTER TO CALLING PGM SAVE
         L     R14,12(R13)         LOAD RETURN ADDRESS
         LM    R0,R12,20(R13)      RESTORE REGS 0 THRU 12
         BR    R14                 RETURN TO CALLING PROGRAM
*
DNTBLADR DS    F                   ADDRESS OF SYSTEM DEVICE NAME TABLE
*
DEVNAMET DC    CL8'DEVNAMET'       SYSTEM DEVICE NAME TABLE
*
         END
