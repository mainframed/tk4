AU20     TITLE '-- TSO-CP AUT20 --'
AUT20    START 0
         SPACE 1
**********************************************************************
*        THIS CP PERMITS TO VISUALIZE IN A TRANSACTIONNAL            *
*        WAY THE ACCOUNTING FILE.                                    *
*        THIS CP IS GIVEN TO SUPPORT GROUP.                          *
*        THE PURPOSE OF THIS CP IS TO SHOW WHAT ARE THE              *
*        AUTHORIZATIONS UNDER WHICH A USER CAN WORK.                 *
*                                            M.SACRE  01 NOVEMBRE 84 *
*                                        P.A.MOINIL  21 SEPTEMBRE 89 *
**********************************************************************
         SPACE 1
         PRINT NOGEN
        $DEFREG
        $XENT  BASE=(R10,R11,R12)
         SPACE 1
*------- CONTROL OF CALLER (USERID)
         XR    R0,R0                   NO HARDCOPY
         L     R15,=V(AUT98)
         BALR  R14,R15
         LTR   R15,R15
         BNZ   LEAVE                   BRANCH TO END OF CP
         SPACE 1
*--------------------------------------------------------------------*
*        USERID AUTORISE A UTILISER CETTE CP.                        *
*--------------------------------------------------------------------*
         SPACE 1
*------- ALLOCATION DYNAMIQUE DU FICHIER D'ACCOUNTING
*        QUI SE TROUVE SOUS LA DD-NAME SYSACC
         L     R1,=V(AUT98A)
         MVC   DYNDSN(44),0(R1)        SET ACCOUNT FILE DS-NAME
        $DYNALL DYNLIST                DYNAMIC ALLOC OF SYSACC
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   ERALL                   B ON ERROR ALLOC IF NOT ZERO
        CALL   ZOPEN,(RETCD,XOPT),VL   OPEN FILE UNDER SYSACC DD
         LTR   R15,R15                 IS RETURN CODE 0?
         BNZ   ERRZOC                  IF NOT, ERROR AT OPEN
         L     R1,=V(AUT99I)
         MVC   0(4,R1),=V(AUT95)       SET PF-2 KEY ACTIVE
         EJECT
*--------------------------------------------------------------------*
*        FICHIER D'ACCOUNTING BIEN OUVERT.                           *
*--------------------------------------------------------------------*
         SPACE 1
*------- START PROCESSING.
DEMINIT  LA    R1,PECRIN               INITIAL DEMAND
         L     R15,=V(AUT99)
         BALR  R14,R15
         NOP   *+L'*+16                SWITCH ADVICE
         OI    *-3,X'F0'               THIS WAY DONE JUST ONCE
         MVC   OVRR(LPTIC),PTIC        CUT OUT THE ADVICE
         MVC   PECRIN,=A(LECRIN)
         MVI   ECRINM,C' '
         MVC   ECRINM+1(L'ECRINM-1),ECRINM
         LTR   R15,R15                 NORMAL COMPLETION ?
         BNZ   SEEWHAT                 NO
         L     R15,=V(AUT99R)          GET RESPONSE
         BALR  R14,R15
         LTR   R15,R15                 ONLY END OF TEXT ?
         BZ    FININER                 IF YES, ESCAPE
         LTR   R1,R1                   NO TEXT ?
         BZ    FININER                 YES
         MVC   RESPONSE(1),3(R15)
         OI    RESPONSE,C' '           TRANSLATE LOWER CASE IN UPPER
         CLI   RESPONSE,C'P'           IS RESPONSE = P ?
         BE    INPROG                  IF YES, ACCESS BY PROG NBR
         CLI   RESPONSE,C'U'           IS RESPONSE = U ?
         BE    INUSID                  IF YES, ACCESS BY USERID
         CLI   RESPONSE,C' '           IS RESPONSE = BLANK ?
         BE    FININER                 IF YES, CLOSE FILE, END
         MVC   ECRINM(L'MSGINV),MSGINV
         MVC   ECRINM+L'MSGINV-5(1),RESPONSE
         B     DEMINIT                 BACK TO DEMAND INITIAL
SEEWHAT  CH    R15,=H'4'
         BE    FININER                 END OF CP REQUESTED
         B     CLSZR                   ELSE EXIT
*------- DEMANDE LE NUMERO DE PROGRAMMEUR.
INPROG   MVI   ECRAPM,C' '
         MVC   ECRAPM+1(L'ECRAPM-1),ECRAPM
ASKDEM   LA    R1,PECRAP               ASK PGRMER NUMBER
         L     R15,=V(AUT99)
         BALR  R14,R15
TESTASK  LTR   R15,R15                 NORMAL COMPLETION ?
         BNZ   FININER                 NO, END (ONLY 4)
         MVI   ECRAPM,C' '
         MVC   ECRAPM+1(L'ECRAPM-1),ECRAPM
         L     R15,=V(AUT99R)          GET RESPONSE
         BALR  R14,R15
         LTR   R15,R15                 ONLY END OF TEXT ?
         BZ    DEMINIT                 IF YES, ESCAPE
         LTR   R1,R1                   NO TEXT ?
         BZ    DEMINIT                 YES
         MVC   RESPONSE(4),=CL40' '
         BCT   R1,*+L'*+6
         MVC   RESPONSE(*-*),3(R15)
         EX    R1,*-6
         LA    R0,4
         LA    R1,RESPONSE+4
         BCTR  R1,0
         CLI   0(R1),C'0'              TEST IF NUMERIC
         BL    WRNUM
         CLI   0(R1),C'9'
         BH    WRNUM
         BCT   R0,*-18
         MVC   INFO+4(4),RESPONSE      MOVE PROGR. NUMBER ENTERED
         MVC   USERID(L'USERID),=CL40' '  CLEAR USERID IN DISPLAY
         MVC   SCRFILL(LPNF),PNF
         B     PRPRGN
WRNUM    CLC   RESPONSE(4),=CL40' '    IS RESPONSE BLANK ?
         BE    DEMINIT                 IF YES, ESCAPE
         MVC   ECRAPM(L'MSGPN1),MSGPN1 PGRMER NUMBER NOT NUMERIC
         B     ASKDEM
*------- DEMANDE LE USER-ID DU PROGRAMMEUR.
INUSID   MVC   INFO(L'INFO),=CL40' '   ASK FOR USERID.
        CALL   AUT90,(INFO),VL         ROUTINE RETURNS ACCT.NO/USERID
         LTR   R15,R15
         BNZ   FININER                 END OF CP
         CLC   INFO+8(7),=CL40' '      ESCAPE?
         BE    DEMINIT                 YES
         MVC   USERID(L'USERID),INFO+8 MOVE USERID FOR DISPLAY
         MVC   SCRFILL(LUSF),USF
         SPACE 1
*--------------------------------------------------------------------*
*        ACCES DU FICHIER PAR LE NUMERO DE PROGRAMMEUR.              *
*--------------------------------------------------------------------*
         SPACE 1
*------- CLEAR SCREEN
PRPRGN   MVC   NMPR(L'NMPR),=CL40' '   CLEAR NAME IN DISPLAY
         MVC   NMALT(L'NMALT),=CL40' '
         LA    R6,INVA1                CLEAR OUTPUT FIELDS
         LA    R7,AUT1
         LA    R9,NDL
         LA    R1,DX
BCLCLEAR MVI   0(R6),C' '              CLEAR INVA1, INVA2,...
         MVI   RESP1(R6),C' '          CLEAR RESP1, RESP2,...
         MVI   INVP1(R6),C' '          CLEAR INVP1, INVP2,...
         MVC   0(4,R7),=CL40' '        CLEAR AUT1, AUT2,...
         ALR   R6,R1                   POINT TO NEXT ...
         ALR   R7,R1
         BCT   R9,BCLCLEAR             LOOP N... TIMES
         MVC   ALARM(L'ALARM),=CL40' '
*------- BOUCLE DE RECHERCHE DU PROGRAMMEUR DANS TOUTES
*        LES AUTORISATIONS
         LA    R6,INVA1                LOAD ADDR OF FLAGS
         LA    R7,AUT1                 LOAD ADDR OF AUTH
         LA    R5,NDL                  AUTH. N... LOOPS
         PACK  DSD,INFO+4(4)           PACK PROGRAMMER NUMBER
         CVB   R0,DSD                  CONVERT IN BINARY
         STH   R0,POSIPGM              STORE NUMBER OF PGM IN BINARY
         LNR   R0,R0                   CONVERT IN NEGATIVE
         STH   R0,NEGAPGM              STORE IN NEGATIVE PROGRAMMER
         LA    R2,AREAR                SET ADDRESSABILITY OF AUTH DSECT
         USING AUTDSECT,R2
         LA    R3,AREAP                SET ADDRESSABILITY OF PROG DSECT
         USING PRGDSECT,R3
         XC    ARGUMAUT,ARGUMAUT       RESET ARGUMENT
LOOPAUT CALL   ZSEQR,(RETCD,AREAR,ARGUMAUT),VL  READ FILE
         LTR   R15,R15                 TEST RETURN CODE
         BM    DSPLAY                  IF NEGATIVE, END-OF-DATA
         BP    ERRZR                   IF POSITIVE, DISPLAY Z... MSG
         CLC   ARGUMAUT,=Y(NAUTNO)     IS IT YET AN AUTH. ?
         BH    DSPLAY                  IF NOT, EXIT LOOP ALL AUTH. NO.
*------- EXPLOITATION DU VECTEUR
         CLC   AUTPMNO,POSIPGM         IS IT THE AUTH. RESPONSIBLE ?
         BNE   *+L'*+4                 BRANCH IF NOT
         MVI   RESP1(R6),C'R'          YES, SAY RESPONSIBLE
         LA    R9,AUTPNO               ADDR VECTOR OF PGM NBR IN AUT
         LA    R8,AUTNPNF              MAX NBR IN VECTOR
LOOPNBR  CLC   0(L'AUTPNO,R9),POSIPGM  IS PROGR. IN AUTHORIZATION ?
         BE    PRESENTP                IF YES, GO TO PRESENT POSITIVE
         CLC   0(L'AUTPNO,R9),NEGAPGM  IS PROG IN AUT IN NEGATIVE ?
         BNE   INCREMEN                IF NOT, GO TO INCREMENT
*------- HERE, THE PROGRAMMER IS PRESENT IN NEGATIVE. THIS MEANS
*        THAT IT IS INVALIDATED TEMPORALLY IN THIS AUTHORIZATION.
         MVI   INVP1(R6),C'I'          MOVE FLAG 'INVALIDATED'
*------- HERE, THE PROGRAMMER IS PRESENT IN POSITIVE
PRESENTP LH    R15,AUTANO              AUTHORIZATION NUMBER
         LTR   R15,R15                 IS AUTH NEGATIVE ?
         BP    *+L'*+6                 IF NOT, DO NOT SET THE FLAG
         MVI   0(R6),C'*'              IF YES, FLAG THE AUTH WITH *
         LPR   R15,R15                 SET AUTH POSITIVE
         CVD   R15,DSD                 CONVERT IN PACKED
         UNPK  WCL4,DSD+5(3)           CONVERT IN EBCDIC
         OI    WCL4+L'WCL4-1,C'0'      RESOLVE ZONING PROBLEM
         MVC   0(4,R7),WCL4            MOVE AUT NBR
         LA    R6,DX(R6)               JUMP TO NEXT FLAGS
         LA    R7,DX(R7)               JUMP TO NEXT AUTH.
         BCT   R5,*+L'*+10             LOOP UNTIL SCREEN FILLED
         MVC   ALARM,=CL25'ALARM : Screen Overflow ×'
         B     DSPLAY
         LA    R8,1                    STOP LOOP
INCREMEN LA    R9,L'AUTPNO(R9)         JUMP TO NEXT PGM NBR IN VECTOR
         BCT   R8,LOOPNBR              LOOP TO EXPLOITATION VECTEUR
         B     LOOPAUT                 GO GET NEXT AUTH. NO.
*------- DISPLAY INFORMATION FOUND FOR THIS PROGRAMMER
*        RECHERCHE DU NOM DU PROGRAMMEUR POUR QUI ON FAIT LE DISPLAY
DSPLAY   LH    R0,POSIPGM              RELOAD PGM NBR
         AH    R0,=Y(NAUTNO+1)         ADD NO. OF AUT.
         STH   R0,ARGUMPRG             STORE RESEARCH ARGUMENT
        CALL   ZREAD,(RETCD,ARGUMPRG,AREAP),VL  READ FILE
         LTR   R15,R15                 TEST RETURN CODE
         BZ    TSTNF                   IF ZERO, RESPONS. NAME FOUND
         CH    R15,=H'15'              IS RETURN CODE 15 ?
         BNE   ERRZR                   IF NOT, GO DISPLAY Z... MSG
         MVC   NMPR,MSG3               MOVE MESSAGE IN DISPLAY
         B     OKNF+L'OKNF
TSTNF    LH    R15,PRGPNO              LOAD PGM NUMBER
         LTR   R15,R15                 TEST SIGN
         BP    OKNF                    IF POSITIVE
         MVC   NMPR,MSG4               MOVE MESSAGE IN DISPLAY
         MVC   NMALT,PRGPNME           MOVE NAME IN DISPLAY FIELD
         B     OKNF+L'OKNF
OKNF     MVC   NMPR,PRGPNME            MOVE NAME IN DISPLAY FIELD
         MVC   PGMNBR(L'PGMNBR),INFO+4 MOVE PROGR. NBR FOR DISPLAY
         LA    R1,PECRAN               DISPLAY SCREEN
         L     R15,=V(AUT99)
         BALR  R14,R15
         MVC   ALARM(L'ALARM),=CL40' '
         CLI   SCRFILL,C'U'            USERID CALL?
         BNE   TESTASK                 NO
         LTR   R15,R15
         BNZ   FININER                 END OF CP
         MVC   RESPONSE(7),=CL40' '
         L     R15,=V(AUT99R)          GET RESPONSE
         BALR  R14,R15
         LTR   R15,R15                 ONLY END OF TEXT ?
         BZ    DEMINIT                 IF YES, ESCAPE
         LTR   R1,R1                   NO TEXT ?
         BZ    DEMINIT                 YES
         BCT   R1,*+L'*+6
         MVC   RESPONSE(*-*),3(R15)
         EX    R1,*-6
         CLC   RESPONSE(7),=CL40' '
         BE    DEMINIT                 ESCAPE
         MVC   INFO(8),=CL40' '
         OC    RESPONSE(7),=CL40' '    TRANSLATE LOWER CASE IN UPPER
         MVC   INFO+8(7),RESPONSE      PASS NEW USERID
         B     INUSID+L'INUSID
         SPACE 1
         DROP  R2,R3
         EJECT
*--------------------------------------------------------------------*
*        ERREUR AU MOMENT DE L'ALLOCATION DU FICHIER D'ACCOUNTING.   *
*--------------------------------------------------------------------*
         SPACE 1
ERALL    STM   R15,R0,DSD
        TPUT   ERROR1,L'ERROR1
         UNPK  ERROR1C+8(9),DSD(5)
         TR    ERROR1C+8(8),TRTAB-X'F0'
         MVI   ERROR1C+16,C' '
         UNPK  ERROR1C+22(9),DSD+4(5)
         TR    ERROR1C+22(8),TRTAB-X'F0'
         MVI   ERROR1C+30,C' '
        TPUT   ERROR1C,L'ERROR1C
         B     LEAVE
         SPACE 1
*--------------------------------------------------------------------*
*        FIN DU TRAVAIL - SORTIE.                                    *
*--------------------------------------------------------------------*
         SPACE 1
FININER  XR    R1,R1                   EXIT FULLSCREEN
         L     R15,=V(AUT99)
         BALR  R14,R15
CLSZR   CALL   ZCLOSE,(RETCD),VL       CLOSE FILE UNDER SYSACC DD
         LTR   R15,R15                 IS RETURN CODE 0?
         BNZ   ERRZOC                  IF NOT, ERROR AT CLOSE
FREACC   XC    DYNDSN,DYNDSN
        $DYNALL DYNLIST                DYNAMIC DE-ALLOC OF SYSACC
LEAVE   $XRET  CC=0
         SPACE 1
*--------------------------------------------------------------------*
*        ERREUR A L'UTILISATION DU FICHIER D'ACCOUNTING              *
*--------------------------------------------------------------------*
         SPACE 1
ERRZOC   LR    R0,R15
         XR    R1,R1
        CALL   ZYDIAG
         LA    R8,1(R15)
         XR    R9,R9
         BCTR  R15,0
         IC    R9,0(R15)
         BCTR  R9,0
        TPUT   (R8),(R9)
         B     FREACC
         SPACE 1
ERRZR    LR    R0,R15
         XR    R1,R1
         LM    R2,R3,NZRD
         L     R15,=V(AUT97)
         BALR  R14,R15
         B     CLSZR
         EJECT
*--------------------------------------------------------------------*
*        VARIABLES DE TRAVAIL                                        *
*--------------------------------------------------------------------*
         SPACE 1
DSD      DC    D'0'
PECRIN   DC    A(LECRIF,ECRIN)
PECRAP   DC    A(LECRAP,ECRAP)
PECRAN   DC    A(LECRAN,ECRAN)
RETCD    DC    F'0'          RETURN CODE FROM Z... ROUTINES
XOPT     DC    C'ONLY'       OPTION FOR Z... ROUTINES
NZRD     DC    0F'0',CL8'ZREAD'
AREAR    DC    (AUTLGTH)X'0' WORKA FOR READ FILE, RECORD AUTHOR.
AREAP    DC    (PRGLGTH)X'0' WORKA FOR READ FILE, RECORD PROGRAMMER
ARGUMAUT DC    H'0'          AUTORIZATION NUMBER TO CHAIN IN FILE
ARGUMPRG DC    H'0'          PROGRAMMER NUMBER TO CHAIN IN FILE
POSIPGM  DC    H'0'          PROGRAMMER NUMBER IN BINARY POSITIVE
NEGAPGM  DC    H'0'          PROGRAMMER NUMBER IN BINARY NEGATIVE
WCL4     DC    CL4' '
RESPONSE DC    CL7' '
INFO     DC    CL15' '
         EJECT
*--------------------------------------------------------------------*
*        DYNAMIC ALLOCATION PARAMETER LIST                           *
*--------------------------------------------------------------------*
         SPACE 1
DYNLIST  DC    C'SYSACC  '
DYNDSN   DC    XL44'0'
         DC    CL8' '        MEMBER NAME
         DC    CL8' '        PASSWORD
         DC    CL8'SHR'      STATUS
         DC    CL256' '      FILLER
         DC    CL85' '       FILLER
         SPACE 1
*--------------------------------------------------------------------*
*        MESSAGES D'ERREURS                                          *
*--------------------------------------------------------------------*
         SPACE 1
ERROR1   DC    C'*** ACCOUNT file ALLOC error *** '
ERROR1C  DC    C'    R15=........ - R0=........ - AUT20 '
MSGINV   DC    C'Unknown option selected :   ???'
MSGPN1   DC    C'Programmer Number NOT Numeric or NOT 4 digits.'
MSG1     DC    CL40'Responsible Number NOT FOUND in file.'
MSG2     DC    CL40'Resp. Number REC INVALIDATED in file.'
MSG3     DC    CL40'Programmer Name NOT FOUND in file.'
MSG4     DC    CL40'Prog. Number REC INVALIDATED in file.'
TRTAB    DC    C'0123456789ABCDEF'
         SPACE 1
*--------------------------------------------------------------------*
*        VARIABLE SCREEN DATA                                        *
*--------------------------------------------------------------------*
         SPACE 1
PNF     $FS    TEXT='Number (4 numerics)',MF=L
        $FS    SF=(PROT,INT),TEXT='===>',MF=L
        $FS    SF=(INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),TEXT='<   ',MF=L
LPNF     EQU   *-PNF
USF     $FS    TEXT='USERID (7 char.max)',MF=L
        $FS    SF=(PROT,INT),TEXT='===>',MF=L
        $FS    SF=(INT),TEXT=(' ',7),MF=L
        $FS    SF=(PROT),TEXT='<',MF=L
LUSF     EQU   *-USF         MUST MATCH VALUE OF 'LPNF'
         EJECT
*--------------------------------------------------------------------*
*        ECRANS D'OUTPUT                                             *
*--------------------------------------------------------------------*
         SPACE 1
ECRIN   $FS    CC=W,WCC=(AL,KBR,RMDT),SBA=(24,80),MF=L
        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.
        $FS    SBA=(1,1),SF=(PROT),MF=L
        $FS    SBA=(1,25),SF=(PROT,INT),MF=L
        $FS    TEXT='AUTHORIZATIONS  D I S P L A Y',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(2,25),SF=(PROT,INT),MF=L
        $FS    TEXT='=============================',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(5,10),SF=(PROT),MF=L
        $FS    TEXT='You can display Authorizations for a Userid',MF=L
        $FS    SBA=(6,42),SF=(PROT),MF=L
        $FS    TEXT='or a Programmer Number',MF=L
        $FS    SBA=(9,11),TEXT='Enter U or P',MF=L
        $FS    SF=(PROT,INT),TEXT='===>',MF=L
        $FS    SF=(INT),TEXT=' ',MF=L
        $FS    SF=(PROT),TEXT='<',MF=L
        $FS    SBA=(10,16),SF=(PROT),TEXT='or you may Hit',MF=L
        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L
        $FS    SF=(PROT),TEXT='or',MF=L
        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L
        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L
        $FS    SBA=(11,10),SF=(PROT),TEXT='Hit',MF=L
        $FS    SF=(PROT,INT),TEXT='PF-1',MF=L
        $FS    SF=(PROT),TEXT='to view ',MF=L
        $FS    TEXT='Authorizations/Programmers ',MF=L
        $FS    TEXT='MANAGEMENT Rules Summary',MF=L
        $FS    SBA=(12,10),SF=(PROT),TEXT='Hit',MF=L
        $FS    SF=(PROT,INT),TEXT='PF-2',MF=L
        $FS    SF=(PROT),TEXT='to view ',MF=L
        $FS    TEXT='the current Accounting data-set status',MF=L
        $FS    SBA=(14,1),SF=(PROT,INT),MF=L
ECRINM  $FS    TEXT=(' ',78),MF=L
        $FS    SF=(PROT),MF=L
LECRIN   EQU   (*-ECRIN)+LPTIC
OVRR    $FS    SBA=(20,1),SF=(PROT,INT),RA=(20,80,-),MF=L
        $FS    SBA=(21,2),TEXT='Remark :',MF=L
        $FS    SF=(PROT),TEXT='if desired, you can also enter ',MF=L
        $FS    TEXT='directly in this process typing',MF=L
        $FS    SBA=(22,11),TEXT='the TSO-command',MF=L
        $FS    SF=(PROT,INT),TEXT='AUT20',MF=L
        $FS    SF=(PROT),TEXT='at any time in your session.',MF=L
        $FS    SBA=(23,1),SF=(PROT,INT),RA=(23,80,-),MF=L
        PRINT  OFF
        $FS    SBA=(24,1),SF=(PROT,INT),TEXT='WELCOME',MF=L
        $FS    SF=(PROT),MF=L
        $FS    TEXT='to this up-grade CP implemented by ',MF=L
        $FS    TEXT='MOINIL P.A. ... your wizard ×',MF=L
        PRINT  ON
PTIC    $FS    SBA=(1,1),SF=(PT,IC),MF=L
LPTIC    EQU   *-PTIC
LECRIF   EQU   *-ECRIN
         SPACE 1
ECRAP   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L
        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.
        $FS    SBA=(1,1),SF=(PROT),MF=L
        $FS    SBA=(1,25),SF=(PROT,INT),MF=L
        $FS    TEXT='PROGRAMMER      N U M B E R',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(2,25),SF=(PROT,INT),MF=L
        $FS    TEXT='===========================',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(5,10),SF=(PROT),MF=L
        $FS    TEXT='Enter Programmer Number (4 numerics)',MF=L
        $FS    SF=(PROT,INT),TEXT='===>',MF=L
        $FS    SF=(INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),TEXT='<',MF=L
        $FS    SBA=(6,10),SF=(PROT),TEXT='or you may Hit',MF=L
        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L
        $FS    SF=(PROT),TEXT='to escape or',MF=L
        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L
        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L
        $FS    SBA=(23,1),SF=(PROT,INT),MF=L
ECRAPM  $FS    TEXT=(' ',78),MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(1,1),SF=(PT,IC),MF=L
LECRAP   EQU   *-ECRAP
         SPACE 1
ECRAN   $FS    CC=W,WCC=(KBR,RMDT),SBA=(24,80),MF=L
        $FS    SBA=(1,1),RA=(1,1,00),MF=L        SET BUFFER/CLEAR.
        $FS    SBA=(1,1),SF=(PROT),MF=L
        $FS    SBA=(1,21),SF=(PROT,INT),MF=L
        $FS    TEXT='DISPLAY AUTHORIZATION NUMBER(S) FOR :',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(2,21),SF=(PROT,INT),MF=L
        $FS    TEXT='=====================================',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(4,5),SF=(PROT),TEXT='Programmer number :',MF=L
        $FS    SF=(PROT,INT),MF=L
PGMNBR  $FS    TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(4,35),SF=(PROT,INT),MF=L
USERID  $FS    TEXT=(' ',7),MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(4,50),SF=(PROT,INT),MF=L
ALARM   $FS    TEXT=(' ',25),MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(5,18),SF=(PROT),TEXT='Name :',MF=L
        $FS    SF=(PROT,INT),MF=L
NMPR    $FS    TEXT=(' ',40),MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(6,25),SF=(PROT),MF=L
NMALT   $FS    TEXT=(' ',40),MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(7,5),SF=(PROT),TEXT='Flags  Aut.',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(7,25),SF=(PROT),TEXT='Flags  Aut.',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(7,45),SF=(PROT),TEXT='Flags  Aut.',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(7,65),SF=(PROT),TEXT='Flags  Aut.',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(8,5),SF=(PROT),TEXT='- - -  ----',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(8,25),SF=(PROT),TEXT='- - -  ----',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(8,45),SF=(PROT),TEXT='- - -  ----',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SBA=(8,65),SF=(PROT),TEXT='- - -  ----',MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 01 -*
SX       EQU   *
        $FS    SBA=(9,5),SF=(PROT,INT),MF=L
INVA1   $FS    TEXT=' ',MF=L
        $FS    SF=(PROT,INT),MF=L
RESP1    EQU   *-INVA1
        $FS    TEXT=' ',MF=L
        $FS    SF=(PROT,INT),MF=L
INVP1    EQU   *-INVA1
        $FS    TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),MF=L
AUT1    $FS    TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
DX       EQU   *-SX
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 02 -*
        $FS    SBA=(9,25),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 03 -*
        $FS    SBA=(9,45),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 04 -*
        $FS    SBA=(9,65),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 05 -*
        $FS    SBA=(10,5),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 06 -*
        $FS    SBA=(10,25),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 07 -*
        $FS    SBA=(10,45),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 08 -*
        $FS    SBA=(10,65),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 09 -*
        $FS    SBA=(11,5),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 10 -*
        $FS    SBA=(11,25),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 11 -*
        $FS    SBA=(11,45),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 12 -*
        $FS    SBA=(11,65),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 13 -*
        $FS    SBA=(12,5),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 14 -*
        $FS    SBA=(12,25),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 15 -*
        $FS    SBA=(12,45),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 16 -*
        $FS    SBA=(12,65),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 17 -*
        $FS    SBA=(13,5),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 18 -*
        $FS    SBA=(13,25),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 19 -*
        $FS    SBA=(13,45),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 20 -*
        $FS    SBA=(13,65),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 21 -*
        $FS    SBA=(14,5),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 22 -*
        $FS    SBA=(14,25),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 23 -*
        $FS    SBA=(14,45),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 24 -*
        $FS    SBA=(14,65),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 25 -*
        $FS    SBA=(15,5),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 26 -*
        $FS    SBA=(15,25),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 27 -*
        $FS    SBA=(15,45),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 28 -*
        $FS    SBA=(15,65),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 29 -*
        $FS    SBA=(16,5),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 30 -*
        $FS    SBA=(16,25),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 31 -*
        $FS    SBA=(16,45),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 32 -*
        $FS    SBA=(16,65),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 33 -*
        $FS    SBA=(17,5),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 34 -*
        $FS    SBA=(17,25),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 35 -*
        $FS    SBA=(17,45),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 36 -*
        $FS    SBA=(17,65),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 37 -*
        $FS    SBA=(18,5),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 38 -*
        $FS    SBA=(18,25),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 39 -*
        $FS    SBA=(18,45),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 40 -*
        $FS    SBA=(18,65),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 41 -*
        $FS    SBA=(19,5),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 42 -*
        $FS    SBA=(19,25),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 43 -*
        $FS    SBA=(19,45),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 44 -*
        $FS    SBA=(19,65),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 45 -*
        $FS    SBA=(20,5),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 46 -*
        $FS    SBA=(20,25),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 47 -*
        $FS    SBA=(20,45),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 48 -*
        $FS    SBA=(20,65),SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT,INT),TEXT=' ',MF=L
        $FS    SF=(PROT),MF=L
        $FS    SF=(PROT,INT),TEXT=(' ',4),MF=L
        $FS    SF=(PROT),MF=L
NDL      EQU   (*-SX)/DX               NO. OF AUT. ON SCREEN DISPLAY
        $FS    SBA=(21,1),SF=(PROT,INT),TEXT='Flags : *',MF=L
        $FS    SF=(PROT),TEXT='= Invalid Auth. -',MF=L
        $FS    SF=(PROT,INT),TEXT='R',MF=L
        $FS    SF=(PROT),TEXT='= Responsible Progr. -',MF=L
        $FS    SF=(PROT,INT),TEXT='I',MF=L
        $FS    SF=(PROT),TEXT='= Invalid Progr.',MF=L
        $FS    SBA=(22,1),SF=(PROT),MF=L
        $FS    TEXT='Enter another Programmer ',MF=L
SCRFILL  DC    (LPNF)X'0'
        $FS    SF=(PROT),MF=L
        $FS    SBA=(23,1),SF=(PROT),TEXT='or you may Hit',MF=L
        $FS    SF=(PROT,INT),TEXT='ENTER',MF=L
        $FS    SF=(PROT),TEXT='to escape or',MF=L
        $FS    SF=(PROT,INT),TEXT='PF-3',MF=L
        $FS    SF=(PROT),TEXT='to exit (emergency)',MF=L
        $FS    SBA=(1,1),SF=(PT,IC),MF=L
LECRAN   EQU   *-ECRAN
         EJECT
*--------------------------------------------------------------------*
*        LITERAL POOL                                                *
*--------------------------------------------------------------------*
         SPACE 1
        LTORG
         EJECT
*--------------------------------------------------------------------*
*        DUMMY SECTIONS                                              *
*--------------------------------------------------------------------*
         SPACE 1
         PRINT GEN
        $AIRD  SEC=YES,R=NO
         SPACE 2
         END
