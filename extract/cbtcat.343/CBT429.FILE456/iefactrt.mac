ACT      TITLE '-- I E F A C T R T - MVS/SMF TERMINATION EXIT --'
IEFACTRT START 0
         SPACE 1
*            -------------------------------------------
*              S M F   T E R M I N A T I O N   E X I T
*            -------------------------------------------
         SPACE 1
* AT ENTRY TO THE IEFACTRT EXIT ROUTINE :
* --------
*
*     A. THE REGISTER 1 POINTS TO A LIST OF FOUR-BYTE ADDRESSES,
*        AS FOLLOWS :
*
* +0  -  1. THE ADDRESS OF THE COMMON EXIT PARAMETER AREA.
*
* +4  -  2. THE ADDRESS OF AN EIGHT-BYTE AREA CONTAINING THE JOB STEP
*           NAME (IN EBCDIC). THIS AREA IS ALIGNED LEFT AND PADDED
*           WITH BLANKS IF NECESSARY. AT JOB TERMINATION, THE ADDRESS
*           IS ZERO.
*
* +8  -  3. THE ADDRESS OF A 20-BYTE AREA CONTAINING THE PROGRAMMER'S
*           NAME (IN EBCDIC). THIS AREA IS ALIGNED LEFT AND PADDED
*           WITH BLANKS IF NECESSARY.
*
* +12 -  4. THE ADDRESS OF A FOUR-BYTE AREA WHOSE FIRST THREE BYTES
*           CONTAIN THE JOB CPU TIME UNDER TCB'S, IN HUNDREDTHS OF A
*           SECOND (IN BINARY), AND WHOSE LAST BYTE CONTAINS THE
*           NUMBER OF ACCOUNTING FIELDS IN THE JOB STATEMENT (IN
*           BINARY).
*
* +16 -  5. THE ADDRESS OF AN AREA THAT CONTAINS ACCOUNTING INFORMA-
*           TION FROM THE JOB STATEMENT.
*           FORMAT : THE ACCOUNTING FIELDS (VARIABLE). EACH ENTRY FOR
*                    AN ACCOUNTING FIELD CONTAINS THE LENGTH OF THE
*                    FIELD (ONE BYTE, BINARY, A ZERO INDICATES AN
*                    OMITTED FIELD) FOLLOWED BY THE FIELD (EBCDIC).
*
* +20 -  6. THE ADDRESS OF A FOUR-BYTE AREA WHOSE FIRST THREE BYTES
*           CONTAIN THE STEP CPU TIME UNDER TCB'S, IN HUNDREDTHS OF A
*           SECOND (IN BINARY), AND WHOSE LAST BYTE CONTAINS THE
*           NUMBER OF ACCOUNTING FIELDS IN THE EXEC STATEMENT (IN
*           BINARY). AT JOB TERMINATION, THE ADDRESS IS ZERO.
         EJECT
* +24 -  7. THE ADDRESS OF AN AREA THAT CONTAINS ACCOUNTING INFORMA-
*           TION FROM THE EXEC STATEMENT.
*           FORMAT : THE ACCOUNTING FIELDS (VARIABLE). EACH ENTRY FOR
*                    AN ACCOUNTING FIELD CONTAINS THE LENGTH OF THE
*                    FIELD (ONE BYTE, BINARY, A ZERO INDICATES AN
*                    OMITTED FIELD) FOLLOWED BY THE FIELD (EBCDIC).
*           AT JOB TERMINATION, THE ADDRESS IS ZERO.
*
* +28 -  8. THE ADDRESS OF A TWO-BYTE AREA. THE FIRST BYTE IS AN
*           INDICATOR : IF BIT 7 IS SET TO 1 WHEN THE EXIT ROUTINE
*           IS ENTERED, THE JOB HAS BEEN CANCELED; IF THE EXIT
*           ROUTINE SETS BIT 7 TO 1, THE JOB WILL BE CANCELED. THE
*           SECOND BYTE CONTAINS THE NUMBER OF THE JOB STEP CURRENTLY
*           BEING PROCESSED. AT JOB TERMINATION, THE SECOND BYTE
*           CONTAINS THE NUMBER OF STEPS IN THE JOB.
*
* +32 -  9. THE ADDRESS OF A TWO-BYTE AREA CONTAINING THE TERMINATION
*           STATUS (CONDITION OR COMPLETION CODE) OF THE JOB OR JOB
*           STEP.
*
* +36 - 10. THE ADDRESS OF AN AREA CONTAINING A FOUR-BYTE RECORD
*           DESCRIPTOR WORD (RDW) IMMEDIATELY FOLLOWED BY THE JOB STEP
*           TERMINATION RECORD (TYPE 4 OR 34) OR THE JOB TERMINATION
*           RECORD (TYPE 5 OR 35) OR THE COMMON ADDRESS SPACE WORK
*           RECORD (TYPE 30), OR THE TSO COMMAND COUNTING RECORD
*           (TYPE 32) TO BE WRITTEN TO THE SMF DATA SET.
*
*     B. REGISTER 0 CONTAINS A BINARY CODE INDICATING THE REASON FOR
*        ENTRY, AS FOLLOWS :
*
*        12 - INDICATES JOB STEP TERMINATION.
*        16 - INDICATES JOB TERMINATION.
*        20 - INDICATES JOB OR STEP TERMINATION. THE TENTH PARAMETER
*             IS THE ADDRESS OF THE RDW FOR A TYPE 30 RECORD. THE
*             SUBTYPE FIELD IN THE RECORD DETERMINES IF IT IS A JOB
*             OR STEP TERMINATION RECORD.
*        24 - INDICATES THAT THE TENTH PARAMETER IS THE ADDRESS OF
*             THE RDW FOR A TYPE 32 RECORD.
         EJECT
* AT EXIT BEFORE THE IEFACTRT EXIT ROUTINE RETURNS CONTROL TO THE
* -------      CONTROL PROGRAM, IT MUST PLACE RETURN CODES IN
*              REGISTERS 1 AND 15, AS FOLLOWS :
*
*        IN REGISTER 1 :
*
*              4 INDICATES THE TERMINATION RECORD IS NOT TO BE WRITTEN
*                       TO THE SMF DATA SET.
*              A VALUE OTHER THAN 4 INDICATES THE TERMINATION RECORD
*                       IS TO BE WRITTEN TO THE SMF DATA SET.
*
*        IN REGISTER 15 :
*
*              4 INDICATES THE REMAINING JOB STEPS ARE TO BE CANCELED.
*              A VALUE OTHER THAN 4 INDICATES JOB PROCESSING IS TO BE
*                       CONTINUED.
         SPACE 2
* AUTHOR :     A. COLOMBO (AMDAHL CONSULTANT)
* --------     P.A. MOINIL
*              COMPUTING CENTRE
*              J.R.C. - ISPRA ESTABLISHMENT
*              21020 ISPRA (VA), ITALY
         SPACE 2
        $DEFREG
         EJECT
        $CEPA
         EJECT
        PRINT  NOGEN
         SPACE 2
SMFR4    DSECT
        IFASMFR 4
         SPACE 1
SMFR5    DSECT
        IFASMFR 5
         SPACE 1
        IFASMFR 30
         SPACE 1
        IHAPSA
         SPACE 1
        IHAASCB
         SPACE 2
        PRINT  GEN
         SPACE 1
MSGL     EQU   132                 MESSAGE'S LENGTH.
         EJECT
*        WORK AREAS.
*        -----------
         SPACE 2
AREA     DSECT - - - - - - - - - - START OF DSECT - - - - - - - - - - -
         SPACE 1
SAVAREA  DS    18F           SAVE AREA.
ALTAREA  DS    18F           ALTERNATE SAVE AREA.
         SPACE 1
DW       DS    D'0'                WORK.
UP       DS    XL8'0'              WORK.
RSV      DS    F                   WORK.
SWS      DS    XL1,XL3             WORK.
WRKL     EQU   *-SAVAREA           WORK LENGTH.
         SPACE 1
ROW      DC    CL8' '              FILLER INSTEAD OF MSG ID.
SEQ      DC    CL7'STEP : '        OR ' JOB : '.
STP      DC    CL8' ',C' '         STEP OR JOB NAME.
PEQ      DC    CL7'/ PGM =',C' '   OR '/ C-NNN'.
PGM      DC    CL8' '              EXEC PROGRAM NAME OR '/ TOTAL '.
SSP      DC    C' : '
SEPL     EQU   *-SEQ-1
TTLIST   DC    4CL17' '            4 TIMES 'NNNNN I/O XXXX Y '.
         DC    (MSGL-(*-ROW))C' '  FILLER.
         SPACE 1
DDHEADER DC    CL8' ',C'I '        HEADER.
DDLIST   DC    6CL17' '            6 TIMES 'NNNNN DDNAMEXX I '.
         DC    (MSGL-(*-DDHEADER))C' '  FILLER.
         SPACE 1
AREAL    EQU   (((*-AREA)+7)/8)*8
         SPACE 1
IEFACTRT CSECT                     RESTORE ORIGINAL CSECT.
         EJECT
AR       DSECT - - - - - - - - - - START OF DSECT - - - - - - - - - - -
         SPACE 1
SVAR     DS    18F           SAVE AREA.
         SPACE 1
WCTL     DS    F
MSG      DS    0CL72         MESSAGE AREA.
MSG1     DC    CL14'--- IEFACTRT ('
MSG2     DS    CL8
MSG3     DC    CL10') / JOB : '
MSG4     DS    CL8
MSG5     DC    CL10' / STEP : '
MSG6     DS    CL8
MSG7     DC    CL8' / CC = '
MSG8     DS    CL4
MSG9     DC    CL2'. '
         SPACE 1
ARL      EQU   (((*-AR)+7)/8)*8
         SPACE 1
IEFACTRT CSECT                     RESTORE ORIGINAL CSECT.
         SPACE 2
AW       DSECT - - - - - - - - - - START OF DSECT - - - - - - - - - - -
         SPACE 1
SVAW     DS    18F           SAVE AREA.
ALTAW    DS    18F           ALTERNATE SAVE AREA.
         SPACE 1
WK       DS    D'0'                WORK.
WKL      EQU   *-SVAW              WORK LENGTH.
UOL      DS    0PL13               WORK.
UOW      DS    PL12,PL1
UOT      DS    PL16                WORK.
         SPACE 1
LSU      DC    CL8' ',C' '         FILLER INSTEAD OF MSG ID.
LSUT     DC    C'JOB SERVICE-UNITS :',C' '
LSUV     DC    CL12' ',C' '        NUMBER OF SU.
LSUX     DC    C'FOR',C' '
LSUN     DC    CL26' '             SU IDENTIFICATION.
         DC    (MSGL-(*-LSU))C' '  FILLER.
         SPACE 1
AWL      EQU   (((*-AW)+7)/8)*8
         SPACE 1
IEFACTRT CSECT                     RESTORE ORIGINAL CSECT.
         EJECT
* PROCESS :
* ---------
*
*        1. AT STEP TERMINATION (R0=12, SMF RECORD 4, 34) :
*
*              UPDATE SRB TIME LIMIT :
*                SRB.TIME.LIMIT = SRB.TIME.LIMIT - STEP.SRB.TIME
*              IF NEW SRB.TIME.LIMIT EQUAL ZERO, THEN :
*                SRB.TIME.LIMIT = 1
*              IF NEW SRB.TIME.LIMIT LESS THAN ZERO, THEN :
*                CANCEL THE JOB
*              IF SRB.TIME.LIMIT EQUAL ZERO :
*                NO SRB TIMING PERFORMED
*
*        2. AT JOB TERMINATION (R0=16, SMF RECORD 5, 35) :
*
*              RESET SRB TIME LIMIT TO ZERO (IT IS BETTER), AND
*              IF END OF A JOB (SMF RECORD 5) :
*                WRITE TO SYSOUT THE JOB SERVICE UNITS VALUES AND
*                THE JOB COST (IN U.O.).
*
*        3. AT JOB/STEP TERMINATION (R0=20, SMF RECORD 30) :
*
*              AT END OF STEP, IF STEP WAS NOT FLUSHED :
*                WRITE TO SYSOUT A ROW WITH JOB NAME, STEP NAME,
*                PROGRAM NAME AND NUMBER OF I/O.
*
*              AT END OF JOB :
*                WRITE TO SYSOUT A ROW WITH JOB NAME, JOB CLASS,
*                PERFORMANCE GROUP AND NUMBER OF I/O.
*
*        4. IF SYSTEM TASK (STC), AT STEP TERMINATION :
*
*              ANY NOT ZERO COMPLETION CODE IS SIGNALED TO OPERATOR.
         SPACE 1
         USING *,R11               ADDRESSABILITY.
         SPACE 1
         STM   R14,R12,12(R13)     SAVE REGISTERS.
         LA    R11,0(R15)          SET BASE REGSITER.
         L     R2,0(R1)            GET COMMON EXIT PARM. ADDRESS.
         B     START
         SPACE 1
         DC    CL8'IEFACTRT',C'-'  IDENTIFIER.
         DC    CL8'&SYSDATE',C'('  ASSEMBLY DATE.
         DC    CL5'&SYSTIME',C')'  ASSEMBLY TIME.
         EJECT
*        IF STEP TERMINATION, UPDATE SRB TIME.
         SPACE 1
START    CH    R0,=H'12'           IF STEP END, UPDATE SRB TIME.
         BNE   IFTYPE5             CHECK OTHER.
         USING CEPA,R2
         SR    R9,R9
         ICM   R9,B'0011',CEPAUCOM+2    I/O COUNT IN K (IF ANY).
         DROP  R2
         BZ    GOBACK              IF MISSING, NO TIMING REQUIRED.
         L     R6,36(R1)           POINTER TO RDW.
         LA    R6,0(R6)            CLEAR ADDRESS.
         LTR   R6,R6               IS THERE A RECORD?
         BZ    GOBACK              THERE IS NO SMF RECORD TYPE 4.
         USING PSA,R0              PSA ADDRESSABILITY.
         L     R7,PSAAOLD          PSA ASCB OLD POINTER.
         DROP  R0
         USING ASCB,R7             ASCB ADDRESSABILITY.
         L     R4,ASCBR15C         SRB TIME LIMIT.
         LTR   R4,R4               IF MISSING, SRB TIME EXPIRED.
         BZ    SEEWHY              TRY TO SEE WHY NOT SRB TIMED.
         SR    R3,R3
         USING SMFR4,R6            RECORD SMF TYPE 4 ADDRESSABILITY.
         ICM   R3,B'0111',SMF4SRBT SRB TIME IN .01 SEC.
         SR    R2,R2               CLEAN UP (IS BETTER).
         M     R2,=F'10000'        TO GET TIME IN MICROSEC.
         SLDL  R2,12               TO GET MICROSEC IN BIT 51.
         SR    R4,R2               NEW TIME LIMIT.
         BH    STORE               IF GREATER THAN 0, OK.
         BL    CANCEL              IF LESS THAN ZERO, CANCEL.
GIVE1    LH    R4,=H'1'            TO TERMINATE IN NEXT STEP.
STORE    ST    R4,ASCBR15C         NEW SRB TIME LIMIT.
         B     GOBACK              RETURN.
SEEWHY   TM    SMF4STI,X'02'       IF ONE, ABEND.
         BNO   GIVE1               (SHOULD NOT OCCUR).
         CLC   SMF4SCC,=XL2'0322'  IF STEP COMPLETION CODE IS S322.
         BNE   GIVE1               (SHOULD BE RESET AT END OF JOB).
         DROP  R6
         LA    R6,SIDIO            SYSTEM-ID'S/FACTOR TO BE APPLIED.
         USING CEPA,R2
SCAN     CLC   0(L'CEPASID,R6),CEPASID
         BE    FOUND
         LA    R6,L'SIDIO(R6)
         CLI   0(R6),0             AT END OF TABLE USE DEFAULT.
         BNE   SCAN
         DROP  R2
FOUND    SR    R8,R8               CALCULATE NEW SRB LIMIT.
         M     R8,4(R6)            I/O'S * (SRB-TIME FOR 1000 I/O).
         SLDL  R8,12               TO HAVE 1 MICROSEC IN  BIT 51.
         CH    R8,=H'1'            IF LESS THAN 1, SET TO 1.
         BH    STOREIT             OK, USE.
         LA    R8,1                GET A 1.
STOREIT  ST    R8,ASCBR15C         SET NEW SRB TIME LIMIT.
         B     GOBACK              GO BACK.
         DROP  R7
         EJECT
*        RESET SRB TIME LIMIT AT END OF JOB.
         SPACE 1
IFTYPE5  CH    R0,=H'16'           IF EQUAL, JOB TERMINATION.
         BNE   IFTYPE30            CHECK OTHER.
         USING CEPA,R2
         SR    R9,R9
         ICM   R9,B'0011',CEPAUCOM+2    I/O  NUMBER IN K.
         DROP  R2
         BZ    GETJSU              NO TIMING.
         USING PSA,R0              PSA ADDRESSABILITY.
         L     R7,PSAAOLD          PSA ASCB OLD POINTER.
         DROP  R0
         USING ASCB,R7             ASCB ADDRESSABILITY.
         SR    R4,R4               GET A ZERO.
         C     R4,ASCBR15C         IS SRB TIME LIMIT ALREADY ZERO?
         BE    GETJSU              YES.
         ST    R4,ASCBR15C         RESET SRB TIME LIMIT.
         DROP  R7
GETJSU   LTR   R1,R1               IS THERE A PARAMETER LIST?
         BZ    GOBACK              IF NOT RETURN.
         L     R7,36(R1)           TYPE 5 OR 35 RECORD.
         LA    R7,0(R7)            CLEAR ADDRESS.
         LTR   R7,R7               IS THERE AN SMF RECORD?
         BZ    GOBACK              NO, NOTHING TO DO.
         USING SMFR5,R7            BASE SMF5 SEGMENT.
         CLI   SMF5RTY,5           RECORD TYPE 5?
         BNE   GOBACK              IF NOT RETURN.
         SPACE 1
*        JOB RECORD TYPE 5 - OUTPUT JOB SERVICE UNITS AND COST.
         SPACE 1
         XR    R4,R4               COMPUTE SERVICES POINTER
         IC    R4,SMF5TLEN
         LA    R4,SMF5TLEN+1(R4)
         DROP  R7
        GETMAIN R,LV=AWL,SP=255
         LR    R3,R1               SET BASE REGISTER FOR AREA.
         USING AW,R3               ADDRESSABILITY.
         XC    SVAW(WKL),SVAW
         ST    R13,SVAW+4          LINK SAVE AREAS.
         ST    R3,8(R13)
         LR    R13,R3              ACTIVE MY SAVE AREA.
         MVI   LSU,C' '            PREPARE MESSAGES AREA.
         MVC   LSU+1(MSGL-1),LSU
         LA    R10,LSU
         LA    R15,MSGL            LENGTH OF MESSAGE.
         LA    R13,ALTAW           PTR WORD W/A.
         BAL   R2,GWRT             WRITE A BLANK LINE.
         MVC   LSUT,=C'JOB SERVICE-UNITS :'
         MVC   LSUX,=C'FOR'
         LA    R5,SUTBN
         LA    R6,SUTB
         ZAP   UOL,=PL1'+0'
LOOPV    ICM   R15,B'1111',0(R4)
         TM    0(R4),X'80'
         BZ    *+L'*+8
         SLL   R15,1
         SRL   R15,1
         CVD   R15,WK
         TM    0(R4),X'80'
         BZ    *+L'*+6
         AP    WK,=PL6'+2147483648'
         MVC   LSUV,=XL12'402020202020202020202120'
         ED    LSUV,WK+2
         MVC   LSUN(L'LSUN),0(R6)
         ZAP   UOT(L'UOW),WK
         MP    UOT(L'UOW),SUNML(SUKVL,R6)
         AP    UOL,UOT(L'UOW)
         LA    R10,LSU
         LA    R15,MSGL            LENGTH OF MESSAGE.
         LA    R13,ALTAW           PTR WORD W/A.
         BAL   R2,GWRT             WRITE LINE WITH SU.
         BCT   R5,*+L'*+4
         B     LVSMS
         LA    R4,4(R4)
         LA    R6,SUTBL(R6)
         MVC   LSUT(L'LSUT),LSUT-1
         B     LOOPV
LVSMS    MVI   LSU,C' '
         MVC   LSU+1(MSGL-1),LSU
         LA    R10,LSU
         LA    R15,MSGL            LENGTH OF MESSAGE.
         LA    R13,ALTAW           PTR WORD W/A.
         BAL   R2,GWRT             WRITE A BLANK LINE.
         MVC   LSUT(10),=C'JOB COST :'
         NI    UOW+L'UOW-1,X'F0'
         OI    UOW+L'UOW-1,X'0C'
         ZAP   UOT,=PL1'+0'
         CP    UOW,=PL1'+0'
         BE    TVSMS
         MVC   UOT(L'UOW),UOW
         NI    UOT+L'UOW-1,X'F0'
         ZAP   UOW,=PL1'+0'
         MVO   UOW,UOT(3)
         CP    UOW,KUO
         BNL   *+L'*+10
         DP    UOT,KUO
         B     TVSMS
         MVC   LSUT+11(32),=C'UNABLE TO COMPUTE IT (OVERFLOW).'
         B     PVSMS
TVSMS    NI    UOT+9,X'F0'
         OI    UOT+9,X'0C'
         MVC   LSUT+10(15),=XL15'402020202021206B20202020202020'
         ED    LSUT+10(15),UOT+3
         MVC   LSUT+26(7),=C'OF U.O.'
PVSMS    LA    R10,LSU
         LA    R15,MSGL            LENGTH OF MESSAGE.
         LA    R13,ALTAW           PTR WORD W/A.
         BAL   R2,GWRT             WRITE LINE WITH COST.
         SPACE 1
*        FREE WORK AREA AND GO BACK.
         SPACE 1
         DROP  R3
         LR    R1,R3               ADDRESS OF AREA TO BE FREED.
         L     R3,4(R13)           PREVIOUS SAVE AREA.
        FREEMAIN R,LV=AWL,A=(1),SP=255
         LR    R13,R3              RESTORE ORIGINAL SAVE AREA.
         B     GOBACK              RETURN.
         EJECT
*        IF RECORD TYPE 30, SUBTYPES 4 AND 5, PROCESS THE JOB.
         SPACE 1
IFTYPE30 CH    R0,=H'20'           IF EQUAL, JOB TERMINATION TYPE 30.
         BNE   GOBACK              IGNORE.
         LTR   R1,R1               IS THERE A PARAMETER LIST?
         BZ    GOBACK              IF NOT RETURN.
         L     R7,36(R1)           TYPE 30 RECORD.
         LA    R7,0(R7)            CLEAR ADDRESS.
         LTR   R7,R7               IS THERE AN SMF RECORD?
         BZ    GOBACK              NO, NOTHING TO DO.
         USING SMFRCD30,R7         BASE SMF30 SEGMENT.
         LR    R4,R7               FOR ADDRESSABILITY.
         A     R4,SMF30SOF         SUBSYSTEM SECTION.
         USING SMF30PSS,R4         SUBSYSTEM SECTION ADDRESSABILITY.
         CLI   SMF30TYP+1,5        JOB TERMINATION?
         BE    ENDJOB              YES, END JOB.
         CLI   SMF30TYP+1,4        STEP TERMINATION?
         BNE   GOBACK              NO, IGNORE.
         DROP  R4
         LR    R4,R7               FOR ADDRESSABILITY.
         A     R4,SMF30TOF         COMPLETION SEGMENT.
         USING SMF30CMP,R4         COMPLETION SEGMENT ADDRESSABILITY.
         TM    SMF30STI,SMF30FLH   WAS THIS STEP FLUSHED?
         BO    GOBACK              IF YES, GO BACK.
         DROP  R4
         SR    R1,R1               SET SWITCH IN CASE OF STC.
ENDJOB   LR    R4,R7               FOR ADDRESSABILITY.
         A     R4,SMF30IOF         JOB / SESSION IDENTIFICATION.
         USING SMF30ID,R4          JOB / SESSION ID ADDRESSABILITY.
         CLI   SMF30JNM,C'J'       IS IT A NORMAL JOB?
         BE    PRJOB               YES.
         CLI   SMF30JNM,C'S'       IS IT A SYSTEM TASK?
         BNE   GOBACK              NO, SKIP IT (TSU).
         DROP  R4
         EJECT
*        PROCESS ANY STEP COMPLETION CODE OF SYSTEM TASK.
         SPACE 1
         LTR   R1,R1
         BNZ   GOBACK              BRANCH IF NOT STEP TERMINATION.
         LR    R4,R7               FOR ADDRESSABILITY.
         A     R4,SMF30TOF         COMPLETION SEGMENT.
         USING SMF30CMP,R4         COMPLETION SEGMENT ADDRESSABILITY.
         TM    SMF30STI,SMF30SRS   IS STEP TO BE RESTARTED?
         BO    GOBACK              IF YES, GO BACK.
         TM    SMF30SCC,X'0F'      ANY COMPLETION CODE?
         BNZ   STCCC               NOT ZERO.
         TM    SMF30SCC+1,X'FF'
         BZ    GOBACK              ZERO, ALL O.K.
STCCC   GETMAIN R,LV=ARL,SP=255
         LR    R3,R1               SET BASE REGISTER FOR AREA.
         USING AR,R3               ADDRESSABILITY.
         XC    SVAR(ARL),SVAR
         ST    R13,SVAR+4          LINK SAVE AREAS.
         ST    R3,8(R13)
         LR    R13,R3              ACTIVE MY SAVE AREA.
         MVI   MSG,C' '            PREPARE WTO MESSAGE.
         MVC   MSG+1(L'MSG-1),MSG
         MVC   MSG1(14),=C'--- IEFACTRT ('
         MVC   MSG3(9),=C') / JOB :'
         MVC   MSG5+1(8),=C'/ STEP :'
         MVC   MSG7+1(6),=C'/ CC ='
         MVI   MSG9,C'.'
         MVC   MSG8+1(1),SMF30SCC
         MVO   MSG8+2(2),SMF30SCC
         MVC   MSG8+3(1),SMF30SCC+1
         OC    MSG8+1(3),=C'000'
         TRT   MSG8+1(3),TRTAB-X'F0'
         MVI   MSG8,C'U'
         TM    SMF30SCC,SMF30SAB
         BZ    *+L'*+4
         MVI   MSG8,C'S'
         DROP  R4
         LR    R4,R7               FOR ADDRESSABILITY.
         A     R4,SMF30IOF         JOB / SESSION IDENTIFICATION.
         USING SMF30ID,R4          JOB / SESSION ID ADDRESSABILITY.
         MVC   MSG4,SMF30JBN
         MVC   MSG6,SMF30STM
         MVC   MSG2,SMF30JNM
         DROP  R4
         LA    R0,L'WCTL+L'MSG
         SLL   R0,16
         ST    R0,WCTL
        WTO    MF=(E,WCTL)         SEND MESSAGE.
         DROP  R3
         LR    R1,R3               ADDRESS OF AREA TO BE FREED.
         L     R3,4(R13)           PREVIOUS SAVE AREA.
        FREEMAIN R,LV=ARL,A=(1),SP=255
         LR    R13,R3              RESTORE ORIGINAL SAVE AREA.
         B     GOBACK
         EJECT
*        PROCESS A RECORD FOR END STEP / JOB.
         SPACE 1
PRJOB   GETMAIN R,LV=AREAL,SP=255
         LR    R3,R1               SET BASE REGISTER FOR AREA.
         USING AREA,R3             ADDRESSABILITY.
         XC    SAVAREA(WRKL),SAVAREA
         ST    R13,SAVAREA+4       LINK SAVE AREAS.
         ST    R3,8(R13)
         LR    R13,R3              ACTIVE MY SAVE AREA.
         MVI   ROW,C' '            INITIALIZE PRINT ROW TO BLANKS.
         MVC   ROW+1(MSGL-1),ROW
         LR    R4,R7
         A     R4,SMF30SOF         SUBSYSTEM SECTION.
         USING SMF30PSS,R4         SUBSYSTEM SECTION ADDRESSABILITY.
         CLI   SMF30TYP+1,5        JOB TERMINATION?
         BE    JOBEND              YES, END JOB.
         DROP  R4
         SPACE 1
*        END STEP - LIST I/O FOR EACH DDNAME.
         SPACE 1
         LR    R4,R7
         SR    R8,R8               COUNT OF READY DDNAMES TO PRINT.
         MVI   DDHEADER,C' '       CLEAR TO BLANKS ROW.
         MVC   DDHEADER+1(MSGL-1),DDHEADER
         LA    R5,DDLIST           START ADDRESS OF DDNAME LIST.
         A     R4,SMF30UOF         I/O ACTIVITY SEGMENT.
         USING SMF30URA,R4         I/O ACTIVITY SEGMENT.
         L     R15,SMF30TPT        NUMBER OF TPUT.
         LTR   R15,R15             SKIP IF ZERO.
         BZ    IFTGET
         MVC   6(7,R5),=C'TERMPUT' DDNAME FOR TPUT.
         BAL   R2,BIDI             TO LIST I/O NUMBER.
         LA    R8,1(R8)            NUMBER OF LISTED DDNAMES.
         LA    R5,L'DDLIST(R5)     GO ON.
IFTGET   L     R15,SMF30TGT        NUMBER OF TGET.
         LTR   R15,R15             SKIP IF ZERO.
         BZ    EXCPSEG
         MVC   6(7,R5),=C'TERMGET' DDNAME FOR TPUT.
         BAL   R2,BIDI             TO LIST I/O NUMBER.
         LA    R8,1(R8)            NUMBER OF LISTED DDNAMES.
         LA    R5,L'DDLIST(R5)     GO ON.
         DROP  R4
EXCPSEG  LR    R4,R7
         A     R4,SMF30EOF         EXCP SEGMENT.
         USING SMF30EXP,R4         EXCP SEGMENT.
         LH    R6,SMF30EON         NUMBER OF EXCP SEGMENTS.
         LTR   R6,R6               IF ZERO ENTRIES, GO HOME.
         BZ    IFPRINT             TO SEE IF ENTRIES LEFT TO PRINT.
LOOPI    L     R15,SMF30BLK        IF ANY I/O.
         LTR   R15,R15
         BZ    NEXTDE              IF NOT, NEXT DEVICE.
         MVC   6(8,R5),SMF30DDN    DDNAME.
         BAL   R2,BIDI             TO PUT IN NUMBER.
         LA    R8,1(R8)
         LA    R5,L'DDLIST(R5)     BUMP POINTER.
         CH    R8,=H'6'            LINE FULL?
         BL    NEXTDE              NO, CONTINUE.
         BAL   R2,SWRT             WRITE A ROW.
         MVI   DDHEADER,C' '       BLANK A ROW.
         MVC   DDHEADER+1(MSGL-1),DDHEADER
         SR    R8,R8               ZERO ENTRIES.
         LA    R5,DDLIST
NEXTDE   AH    R4,SMF30ELN        LENGTH OF EXCP SECTION.
         BCT   R6,LOOPI
IFPRINT  LTR   R8,R8              IF ANY ROW TO PRINT.
         BZ    ENDDD              IF NOT, SKIP.
         BAL   R2,SWRT            WRITE A ROW.
         DROP  R4
ENDDD    TM    SWS,X'01'
         BZ    NODD
         MVI   ROW+L'DDHEADER,C'-'
         MVC   ROW+L'DDHEADER+1(6*L'DDLIST),ROW+L'DDHEADER
         LA    R10,ROW
         BAL   R2,SLWRT            WRITE SEPARATOR.
         MVC   ROW+1(MSGL-1),ROW
         SPACE 1
*        END STEP - FINAL MESSAGE.
         SPACE 1
NODD     LR    R4,R7
         A     R4,SMF30IOF         JOB / SESSION IDENTIFICATION.
         USING SMF30ID,R4          JOB / SESSION ID ADDRESSABILITY.
         LA    R10,ROW
         BAL   R2,SLWRT            WRITE A BLANK ROW.
         MVI   SEQ,C'-'
         MVC   SEQ+1(SEPL-1),SEQ
         LA    R10,ROW
         BAL   R2,SLWRT            WRITE SEPARATOR.
         MVC   SEQ(SEPL),SEQ-1
         MVC   SEQ,=C'STEP : '     SET TEXT.
         MVC   STP,SMF30STM        STEP NAME.
         MVC   PEQ,=C'/ PGM ='
         MVC   PGM,SMF30PGM        PROGRAM NAME.
         B     GOOUT
         DROP  R4
         SPACE 1
SWRT     ST    R2,RSV
         TM    SWS,X'01'
         BO    WGO
         LA    R10,ROW
         BAL   R2,SLWRT            WRITE A BLANK ROW.
         MVC   ROW+L'DDHEADER(L'MNDD),MNDD
         LA    R10,ROW
         BAL   R2,SLWRT            WRITE TITLE.
         MVI   ROW+L'DDHEADER,C'-'
         MVC   ROW+L'DDHEADER+1(6*L'DDLIST),ROW+L'DDHEADER
         LA    R10,ROW
         BAL   R2,SLWRT            WRITE SEPARATOR.
         MVC   ROW+1(MSGL-1),ROW
         OI    SWS,X'01'
WGO      MVI   DDHEADER+L'DDHEADER,C'I'
         MVI   DDLIST+L'DDLIST-2,C'I'
         MVI   DDLIST+(2*L'DDLIST)-2,C'I'
         MVI   DDLIST+(3*L'DDLIST)-2,C'I'
         MVI   DDLIST+(4*L'DDLIST)-2,C'I'
         MVI   DDLIST+(5*L'DDLIST)-2,C'I'
         MVI   DDLIST+(6*L'DDLIST)-2,C'I'
         L     R2,RSV
         LA    R10,DDHEADER
SLWRT    LA    R15,MSGL            LENGTH OF MESSAGE.
         LA    R13,ALTAREA         PTR WORD W/A.
         B     GWRT
         SPACE 1
*        END JOB - FINAL MESSAGE.
         SPACE 1
JOBEND   LR    R4,R7
         A     R4,SMF30IOF         JOB / SESSION IDENTIFICATION.
         USING SMF30ID,R4          JOB / SESSION ID ADDRESSABILITY.
         LA    R10,ROW
         BAL   R2,SLWRT            WRITE A BLANK ROW.
         MVI   SEQ,C'-'
         MVC   SEQ+1(SEPL-1),SEQ
         LA    R10,ROW
         BAL   R2,SLWRT            WRITE SEPARATOR.
         MVC   SEQ(SEPL),SEQ-1
         MVC   SEQ,=C' JOB : '     SET TEXT.
         MVC   STP,SMF30JBN        JOB NAME.
         MVC   PGM,=C'/ TOTAL '    ALL JOB.
         LH    R15,SMF30PGN        PERFORM GROUP NUMBER.
         MVI   PEQ,C'/'
         LA    R5,PEQ+2            CLASS-PERFORM.
         BAL   R2,BIDI
         MVC   PEQ+2(1),SMF30CLS   JOB CLASS.
         MVI   PEQ+2+1,C'-'        A-XXX.
         OI    PEQ+2+2,C'0'        FORCE ZERO.
         OI    PEQ+2+3,C'0'        FORCE ZERO.
         DROP  R4
         SPACE 1
*        COLLECT DISK-TAPE-TERM I/O ACTIVITY.
         SPACE 1
GOOUT    MVI   SSP+1,C':'
         LA    R5,TTLIST
         LR    R4,R7
         SR    R8,R8               HERE NUMBER OF I/O DISK.
         SR    R9,R9               HERE NUMBER OF I/O TAPE.
         SR    R10,R10             HERE NUMBER OF I/O TERM.
         A     R4,SMF30UOF         I/O ACTIVITY SEGMENT.
         USING SMF30URA,R4         I/O ACTIVITY SEGMENT.
         A     R10,SMF30TPT        TPUT.
         A     R10,SMF30TGT        TGET.
         DROP  R4
         LR    R4,R7
         A     R4,SMF30EOF         EXCP SEGMENT.
         USING SMF30EXP,R4         EXCP SEGMENT.
         LH    R6,SMF30EON         NUMBER OF EXCP SEGMENTS.
         LTR   R6,R6               IF ZERO ENTRIES, GO HOME.
         BE    ENDIO
LOOPIO   CLI   SMF30DEV,X'20'      IF DASD DEVICE.
         BE    ADDR8
         CLI   SMF30DEV,X'80'      IF TAPE DEVICE.
         BE    ADDR9
         CLI   SMF30DEV,X'40'      IF COMMUNICATION DEVICE.
         BE    ADDRA
         CLI   SMF30DEV,X'10'      IF GRAPHICS DEVICE.
         BE    ADDRA
         TM    SMF30CUA,SMF30VDV   IF VIRTUAL DEVICE.
         BNZ   NEXTDEV
ADDR8    A     R8,SMF30BLK         NUMBER OF DISK EXCP-S.
         B     NEXTDEV
ADDR9    A     R9,SMF30BLK         NUMBER OF TAPE EXCP-S.
         B     NEXTDEV
ADDRA    A     R10,SMF30BLK        NUMBER OF TERM EXCP-S.
NEXTDEV  AH    R4,SMF30ELN         LENGTH OF EXCP SECTION.
         BCT   R6,LOOPIO
         DROP  R4
ENDIO    LTR   R8,R8               IF ZERO I/O DISK, SKIP NEXT CODE.
         BZ    TOTAPE              GO TO SEE IF I/O TAPE.
         LR    R15,R8              DISK I/O.
         MVC   6(11,R5),=C'I/O DISK + '
         BAL   R2,BIDI
         LA    R5,L'TTLIST(R5)
TOTAPE   LTR   R9,R9               IF ZERO I/O TAPE, SKIP NEXT CODE.
         BZ    TOTERM              GO TO SEE IF I/O TERM.
         LR    R15,R9              TAPE I/O.
         MVC   6(11,R5),=C'I/O TAPE + '
         BAL   R2,BIDI
         LA    R5,L'TTLIST(R5)
TOTERM   LTR   R10,R10             IF ZERO I/O TERM, SKIP NEXT CODE.
         BZ    TOTOTA              GO TO PRINT I/O TOTAL.
         LR    R15,R10             TERM I/O.
         MVC   6(11,R5),=C'I/O TERM = '
         BAL   R2,BIDI
         LA    R5,L'TTLIST(R5)
TOTOTA   LR    R15,R8              GET DISK I/O.
         AR    R15,R9              ADD TAPE I/O.
         AR    R15,R10             ADD TERM I/O.
         LTR   R15,R15             IF TOT. I/O EQ 0 WRITE IT.
         BZ    TOTA
         CR    R15,R8              IF TOT. I/O EQ DISK I/O SKIP.
         BE    ADJ
         CR    R15,R9              IF TOT. I/O EQ TAPE I/O SKIP.
         BE    ADJ
         CR    R15,R10             IF TOT. I/O EQ TERM I/O SKIP.
         BE    ADJ
         SH    R5,=H'2'
         MVI   0(R5),C'='
         AH    R5,=H'2'
TOTA     MVC   6(8,R5),=C'I/O TOT.'
         BAL   R2,BIDI
         B     WRTMSG
ADJ      SH    R5,=H'3'
         MVC   0(3,R5),=C'.  '
WRTMSG   LA    R10,ROW
         BAL   R2,SLWRT            WRITE ROW.
         MVC   ROW+1(MSGL-1),ROW
         MVI   SEQ,C'-'
         MVC   SEQ+1(SEPL-1),SEQ
         LA    R10,ROW
         BAL   R2,SLWRT            WRITE SEPARATOR.
         MVC   SEQ(SEPL),SEQ-1
         LA    R10,ROW
         BAL   R2,SLWRT            WRITE A BLANK ROW.
         DROP  R7
         SPACE 1
*        FREE WORK AREA AND GO BACK.
         SPACE 1
         DROP  R3
         LR    R1,R3               ADDRESS OF AREA TO BE FREED.
         L     R3,4(R13)           PREVIOUS SAVE AREA.
        FREEMAIN R,LV=AREAL,A=(1),SP=255
         LR    R13,R3              RESTORE ORIGINAL SAVE AREA.
         B     GOBACK
         EJECT
*        LOCAL SUBROUTINE BIDI : TRANSLATE FROM BINARY TO EBCDIC.
*        -----------------------
*
*        INPUT : R15 (BINARY VALUE).
*        OUTPUT : POINTED BY R5 (FIVE DIGITS : NNNNN, NNNNK OR NNNNM).
*        LINK REGISTER : R2.
         SPACE 1
         USING AREA,R3             ADDRESSABILITY.
BIDI     MVI   4(R5),C'0'
         LTR   R15,R15             VALID REQUEST?
         BZR   R2                  NO, ZERO.
         MVC   UP,=XL8'4020202020202020'     EDIT MASK.
         C     R15,=F'99999'       MAX. FOR FIVE DIGITS.
         BH    TRYKM
         CVD   R15,DW              IN DECIMAL FORMAT.
         ED    UP,DW+4
         MVC   0(5,R5),UP+3
         BR    R2                  RETURN.
TRYKM    SR    R14,R14
         D     R14,=F'1000'        IN K.
         MVI   4(R5),C'K'
         C     R15,=F'9999'        STAYS IN FIVE DIGITS?
         BNH   SETKM               YES.
         SR    R14,R14
         D     R14,=F'1000'        IN M.
         MVI   4(R5),C'M'
SETKM    CVD   R15,DW              IN DECIMAL FORMAT.
         ED    UP,DW+4
         MVC   0(4,R5),UP+4
         BR    R2                  RETURN.
         DROP  R3
         EJECT
*        EXIT - NORMAL TERMINATION.
         SPACE 1
GOBACK   LM    R14,R12,12(R13)     RESTORE REGISTERS.
         SR    R15,R15             TO CONTINUE PROCESSING.
         SR    R1,R1               TO WRITE RECORD TO SMF DATA SET.
         BR    R14                 GO BACK.
         SPACE 1
*        EXIT - ABNORMAL TERMINATION.
         SPACE 1
CANCEL   LM    R14,R12,12(R13)     RESTORE REGISTERS.
         LA    R15,4               TO CANCEL THIS JOB.
         SR    R1,R1               TO WRITE RECORD TO SMF DATA SET.
         BR    R14                 GO BACK.
         EJECT
*        GENERAL SUBROUTINE GWRT : OUTPUT A MESSAGE.
*        -------------------------
*
*        INPUT : R10 (ADDRESS OF BUFFER TO BE WRITTEN).
*                R12 (CONTENTS AS ON ENTRY TO IEFACTRT).
*                R13 (POINTER WORD W/A).
*                R15 (LENGTH OF MESSAGE).
*        LINK REGISTER : R2.
         SPACE 1
* NOTE - IEFACTRT IS THE ONLY EXIT ROUTINE THAT CAN WRITE TO THE
*        SYSTEM OUPUT MESSAGE DATA SET, AND ONLY BY PASSING A
*        MESSAGE TO MODULE IEFYS. IF A USER-WRITTEN IEFACTRT EXIT
*        ROUTINE WRITES MESSAGES FOR SYSTEM OUTPUT, THE CONTENTS OF
*        REGISTER 12 MUST BE THE SAME AS WHEN THE ROUTINE RECEIVED
*        CONTROL, AND REGISTER 13 MUST CONTAIN THE ADDRESS OF AN
*        18 WORDS WORK AREA. THE MAXIMUM NUMBER OF CHARACTERS PRINTED
*        ON ONE LINE IS 132 (THE MESSAGE WILL BE TRUNCATED TO 132
*        CHARACTERS IF NECESSARY). THE PROCEDURE TO USE WHEN WRITING
*        SYSTEM OUTPUT MESSAGES FROM IEFACTRT IS SHOWED BELOW :
*
*                 MVC   36(4,12),MSGADDR   MOVE MESSAGE ADDRESS AND
*                 MVC   42(2,12),MSGLEN    LENGTH TO SYSTEM TABLE,
*                 L     15,VIEFYS          BRANCH AND LINK TO MESSAGE
*                 BALR  14,15              ROUTINE.
*                 ...
*        MSGADDR  DC    A(MSG)
*        MSG      DC    C'...MESSAGE TEXT...'
*        MSGLEN   DC    H'...MESSAGE LENGTH...'
*        VIEFYS   DC    V(IEFYS)
         SPACE 1
GWRT     STCM  R10,B'1111',36(R12) MSG ADDRESS FOR IEFYS.
         STCM  R15,B'0011',42(R12) SET FOR IEFYS.
         L     R15,VIEFYS          PICK UP VCON.
         BALR  R14,R15             ENTER IEFYS.
         LR    R13,R3              RESTORE SAVE AREA ADDRESS.
         BR    R2                  RETURN.
         EJECT
*              CONSTANTS.
         SPACE 1
VIEFYS   DC    V(IEFYS)            VCON FOR IEFYS.
TRTAB    DC    C'0123456789ABCDEF'
MNDD     DC    C'NUMBER OF I/O-S (EXCP-S) BY DD-NAMES :'
         SPACE 1
*        JOB COST = ((CPU * 10) + (IOC * 5) + (MSO * 0.5) +
*                    (SRB * 10)) / (4.58 * (10**7))
         SPACE 1
*                                            VALUE = NNN.NN
SUTB     DC    CL26'CPU SERVICE (CPU)         ',PL3'+1000'
         DC    CL26'I/O SERVICE (IOC)         ',PL3'+500'
         DC    CL26'MAIN STORAGE SERVICE (MSO)',PL3'+50'
         DC    CL26'SRB SERVICE (SRB)         ',PL3'+1000'
SUNML    EQU   26
SUKVL    EQU   3
SUTBL    EQU   SUNML+SUKVL
SUTBN    EQU   (*-SUTB)/SUTBL
KUO      DC    PL3'+458'                     VALUE = NNN.NN
         EJECT
        $SIDTB TYPE=I/O
         EJECT
         LTORG
         SPACE 2
         END
