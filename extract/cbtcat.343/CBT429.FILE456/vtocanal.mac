VTA      TITLE 'DIRECT-ACCESS STORAGE - VTOC ANALYSIS.'
VTAMAIN  START 0
         SPACE 1
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * * * * * * * *                                     * * * * * * * * *
* * * * * * * * *         V T O C    ANALYSIS         * * * * * * * * *
* * * * * * * * *                                     * * * * * * * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
* AUTHOR :     P.A. MOINIL                                            *
* --------     COMPUTING CENTRE                                       *
*              J.R.C. - ISPRA ESTABLISHMENT                           *
*              21020 ISPRA (VA), ITALY                                *
*                                                                     *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                                                                     *
* PURPOSE :    THIS PROGRAM PERFORMS THE SPACE DISTRIBUTION (MAP)     *
* ---------    ANALYSIS ON ANY VOLUME WHICH IS A DIRECT-ACCESS        *
*              STORAGE  DEVICE CLASS (UCBTYP+2 = X'20').              *
*                                                                     *
*              A DD-CARD, WRITTEN AS BELOW, IS NEEDED FOR EACH        *
*              VOLUME ON WHICH THE ANALYSIS IS DESIRED :              *
*                                                                     *
*              //VTDD...  DD  UNIT=...,VOLUME=SER=...,DISP=OLD        *
*                                                                     *
*                                                                     *
* CALL OF THE PROGRAM :                                               *
* ---------------------                                               *
*                                                                     *
*        //ANAL   EXEC  PGM=VTOCANAL                                  *
*        //VTDD...  DD  UNIT=...,VOLUME=SER=...,DISP=OLD              *
*        //VTDD...  DD  --- --- --- --- --- --- --- ---               *
*        //VTDD...  DD  --- ANY NUMBER OF DD-CARDS. ---               *
*        //VTDD...  DD  --- --- --- --- --- --- --- ---               *
*        //SYSPRINT DD  SYSOUT=A                                      *
*                                                                     *
*                                                                     *
* RESTRICTION : BE CAREFULL TO RUN THIS PROGRAM ON VOLUMES WHICH      *
* ------------- ARE NOT INVOLVED BY ALLOCATIONS DURING THE VTOC       *
*               ANALYSIS.                                             *
*               MVS/XA : MUST BE AMODE AND RMODE 24.                  *
*                                                                     *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         EJECT
        $DEFREG
*        MISCELLANEOUS DEFINITIONS.
         SPACE 1
OFF      EQU   X'0F'               NOP OPERATION SWITCH SETTING.
ON       EQU   X'F0'               BRANCH OPERATION SWITCH SETTING.
NTF13    EQU   64                  NO. OF FMT1-FMT3 ELEMENTS IN TABLE.
NTF5     EQU   8                   NO. OF FMT5 ELEMENTS IN TABLE.
         EJECT
*        INTERNAL WORK TABLE DESCRIPTION (IWT).
*        --------------------------------------
         SPACE 1
TABDSECT DSECT
         SPACE 1
EXTCA    DS    AL3                 EXTENT SEQUENTIAL CHAIN ADDRESS.
EXTDSN   DS    CL44                EXTENT OR DATA-SET NAME.
EXTSQN   DS    XL1                 EXTENT SEQUENCE NUMBER.
EXTLOL   DS    XL4                 EXTENT LOWER LIMIT (CCHH).
EXTUPL   DS    XL4                 EXTENT UPPER LIMIT (CCHH).
EXTLOLT  DS    XL4                 EXTENT LOWER LIMIT (TRACK ADDRESS).
EXTUPLT  DS    XL4                 EXTENT UPPER LIMIT (TRACK ADDRESS).
         SPACE 1
TABLGTH  EQU   *-TABDSECT          ONE ELEMENT TABLE LENGTH.
         SPACE 2
VTAMAIN  CSECT                     RESTORE ORIGNAL CSECT.
         SPACE 2
*        FORMATS 1-2-3 TABLE DESCRIPTION.
*        --------------------------------
         SPACE 1
FMTDSECT DSECT
         SPACE 1
FMTSE    DS    F                   FMT 1 OR 3 START EL.ADDR. IN IWT.
FMTAF2   DS    XL5                 FMT 2 ADDRESS (CCHHR).
FMTAF3   DS    XL5                 FMT 3 ADDRESS (CCHHR).
         DS    0F                  FORCE WORD BOUNDARY LENGTH.
         SPACE 1
FMTLGTH  EQU   *-FMTDSECT          ONE ELEMENT TABLE LENGTH.
         SPACE 2
VTAMAIN  CSECT                     RESTORE ORIGNAL CSECT.
         EJECT
        PRINT  NOGEN
         SPACE 1
TIODSECT DSECT
        IEFTIOT1
         SPACE 1
DSCDSECT DSECT
        IECSDSL1 (1)
         SPACE 1
        ORG    DS1EXT1             EXTENT DESCRIPTION.
DSCBTYP  DS    XL1                 DATA-SET EXTENT TYPE INDICATOR.
DSCBSQN  DS    XL1                 EXTENT SEQUENCE NUMBER.
DSCBLOL  DS    XL4                 LOWER LIMIT OF THIS EXTENT (CCHHR).
DSCBUPL  DS    XL4                 UPPER LIMIT OF THIS EXTENT (CCHHR).
         SPACE 1
         ORG   DS1DSNAM
        IECSDSL1 (2)
         SPACE 1
         ORG   DS1DSNAM
        IECSDSL1 (3)
         SPACE 1
         ORG   DS1FMTID
        IECSDSL1 (4)
         SPACE 1
         ORG   DS1DSNAM
        IECSDSL1 (5)
DS5LGTH  EQU   *-DS5KEYID          DSCB 5 LENGTH.
         SPACE 1
        ORG    DS5AVEXT            AVAILABLE EXTENT DESCRIPTION.
DSCBRLT  DS    XL2                 RELATIVE TRK. ADDRESS OF 1ST TRK.
DSCBUNC  DS    XL2                 NO. OF ENTIRE UNUSED CYL.
DSCBUNT  DS    XL1                 NO. OF ADDITIONAL UNUSED TRK.
         SPACE 1
        ORG    DS1DSNAM
        IECSDSL1 (6)
         SPACE 1
VTAMAIN  CSECT                     RESTORE ORIGNAL CSECT.
         SPACE 1
        PRINT  GEN
         EJECT
        $XENT BASE=(R11,R12)
*  EXEC PARM. FIELD DESCRIPTION : OPTIONS ARE SEPARATED BY COMMA.
*  ------------------------------
*
*        N :       SUPPRESS THE VOLUME VTOC ANALYSIS LIST.
*
*        R :       REQUEST TO SUPPLY THE VTOC RECOVERY INFORMATION
*                  IF THE PROGRAM FINDS THAT ANY VOLUME SPACE HAS
*                  BEEN LOST.
*
*        Q :       USE THE QUICK (EXCP FULL TRACK) METHOD TO READ
*                  THE VTOC.
         SPACE 1
         L     R1,0(R1)            PARM. FIELD ADDRESS.
         LH    R4,0(R1)            PARM. FIELD LENGTH.
         LTR   R4,R4
         BNP   NOPARM              BRANCH IF NO PARM. FIELD.
         LA    R2,2(R1)            SET START OF PARM. FIELD TEXT.
         LA    R4,1(R4,R1)         END OF PARM. FIELD TEXT.
PA0      CLI   0(R2),C'R'
         BNE   PA1                 BRANCH IF NOT RECOVERY REQUEST.
         TM    SWRCV+1,ON          TEST IF FIRST TIME,
         BZ    PARMERR             BRANCH IF NOT.
         NI    SWRCV+1,OFF         SET NOP OPERATION.
         B     PA3
PA1      CLI   0(R2),C'N'
         BNE   PA2                 BRANCH IF NOT NOLIST REQUEST.
         TM    SWLS+1,ON           TEST IF FIRST TIME,
         BO    PARMERR             BRANCH IF NOT.
         OI    SWLS+1,ON           SET BRANCH OPERATION.
         B     PA3
PA2      CLI   0(R2),C'Q'
         BNE   PARMERR             BRANCH IF NOT QUICK REQUEST.
         TM    SWQR+1,ON           TEST IF FIRST TIME,
         BO    PARMERR             BRANCH IF NOT.
         OI    SWQR+1,ON           SET BRANCH OPERATION.
PA3      LA    R2,1(R2)            NEXT OPERAND POINTER IF ANY.
         CLR   R2,R4
         BH    NOPARM              BRANCH IF END OF PARM. FIELD TEXT.
         CLI   0(R2),C','
         BNE   PARMERR             NOT SEPARATOR.
         LA    R2,1(R2)            NEXT SUBFIELD IF ANY.
         CLR   R2,R4
         BNH   PA0                 BRANCH IF NOT END PARM. FIELD TEXT.
         SPACE 2
NOPARM  EXTRACT   ATIOT,'S',FIELDS=(TIOT)
        GETMAIN   VC,LA=NMCORE,A=ATABLE
         LTR   R15,R15             TEST COMPLETION CODE,
         BNZ   NSTOR               BRANCH IF NO STORAGE.
         L     R1,ATABLE           GET START OF AREA.
         L     R9,ATABLE+4         GET LENGTH OF AREA.
         LR    R0,R9
         S     R9,NMCORE           SUBTRACT RESERVED AREA SIZE.
         BNP   NSP                 BRANCH OF NOT ENOUGH SPACE.
         LA    R7,L'ADDREC+DS5LGTH     LENGTH OF FMT5 ELEMENT TABLE.
         MH    R7,NRTF5            COMPUTE SPACE FOR FMT 5 TABLE.
         LR    R6,R7
         AH    R7,NRTF13           ADD FMT 1-2-3 TABLE LENGTH.
         CLR   R9,R7               TEST IF SPACE ENOUGH,
         BNH   NST                 BRANCH IF NOT.
         ST    R1,AFMT5            SET FMT 5 TABLE START ADDRESS.
         AR    R6,R1
         ST    R6,AFMT13           SET FMT 1-2-3 TABLE START ADDRESS.
         AR    R1,R7
         ST    R1,ATABLE           SET NEW TABLE ADDRESS.
         SR    R9,R7               ADJUST REMAINING LENGTH.
         SR    R0,R7
         LA    R7,TABLGTH          LENGTH OF 1 TABLE ELEMENT.
         LR    R6,R7
         SLL   R6,6
         CLR   R9,R6               TEST FOR A MINIMUM OF 64 ELEMENTS,
         BL    NST                 BRANCH IF NO TABLE SPACE.
         XR    R8,R8
         DR    R8,R7               COMPUTE NUMBER OF ENTRIES.
         XR    R8,R8
         MR    R8,R7               COMPUTE SIZE OF USEFUL BLOCK.
         LA    R8,7(0,R9)          COMPUTE NEXT DOUBLE-WORD BOUNDARY.
         SRL   R8,3
         SLL   R8,3
         LR    R7,R1
         AR    R1,R8               ADDRESS OF STORAGE TO FREE.
         AR    R7,R9               POINT TO END OF AREA + 1.
         ST    R7,ATABLE+4
         SR    R0,R8               COMPUTE SIZE TO FREE.
        FREEMAIN   R,LV=(0),A=(1)  FREE STORAGE.
         SPACE 2
         L     R8,ATIOT            SET ADDRESSABILITIES.
         USING TIODSECT,R8
         LA    R6,DATAAREA
         USING DSCDSECT,R6
         SPACE 2
NEXTDD   CLC   TIOELNGH(L'ZEROS),ZEROS
         BE    SWEND               END OF TIOT INDICATOR.
         CLC   TIOEDDNM(L'VTDD),VTDD
         BNE   NOVTA+L'NOVTA       BRANCH IF NOT VTOC DD-NAME.
         MVC   VTDDNM,TIOEDDNM
         ST    R8,STIOT
         DROP  R8
         TM    SWQR+1,ON
         BO    QOPEN
        $VTOCSO VTDDNM,DVTYP
         B     TOPEN
QOPEN   $VTOCQO VTDDNM,DVTYP
TOPEN    LTR   R15,R15
         BZ    DSOP
         TM    SWQR+1,ON
         BO    *+L'*+10
         MVC   MSERR(8),VSO
         B     SMSG
         MVC   MSERR(8),VQO
         B     SMSG
         SPACE 1
CFMTXC   XC    0(*-*,R2),0(R2)
DSOP     NI    SWCL+1,OFF          SET NOP OPERATION.
         LA    R1,NTF5             CLEAR FMT 5 TABLE.
         L     R2,AFMT5
CFMT5    XC    0(L'ADDREC+DS5LGTH,R2),0(R2)
         LA    R2,L'ADDREC+DS5LGTH(R2)
         BCT   R1,CFMT5
         LH    R0,NRTF13           CLEAR FMT 1-2-3 TABLE.
         L     R2,AFMT13
         BCTR  R0,0
         SRDL  R0,8
         SRL   R1,24
         LTR   R0,R0
         BZ    CFMT13B
CFMT13A  XC    0(256,R2),0(R2)
         LA    R2,256(R2)
         BCT   R0,CFMT13A
CFMT13B  EX    R1,CFMTXC
         STH   R0,FDSCB            CLEAR FREE DSCB'S COUNT.
         STH   R0,VFDSCB
         XC    IXDSCB(L'IXDSCB+L'IXVIRS),IXDSCB
         OI    SWFS+1,ON
         NI    FMT4+1,OFF
         NI    SWXX+1,OFF
         L     R8,ATABLE
         USING TABDSECT,R8
         SPACE 2
READ     XC    DATAAREA(L'DATAAREA),DATAAREA   CLEAR READ DSCB'S AREA.
SWQR     NOP   QREAD
        $VTOCSR (R6),ADDREC
         B     TREAD
QREAD   $VTOCQR (R6),ADDREC
TREAD    LTR   R15,R15
         BZ    READOK
         BM    ENDVTOC             END-OF-FILE.
         TM    SWQR+1,ON
         BO    *+L'*+10
         MVC   MSERR(8),VSR
         B     SREAD
         MVC   MSERR(8),VQR
         LTR   R0,R0
         BZ    SREAD
         ST    R0,WORKF            IX - DISPLAY R0.
         UNPK  MSIX+L'MSIX-9(9),WORKF(5)
         NC    MSIX+L'MSIX-9(8),=XL8'0F0F0F0F0F0F0F0F'
         TR    MSIX+L'MSIX-9(8),TRTAB
         MVI   MSIX+L'MSIX-1,C'.'
         NI    SWIX+1,OFF
SREAD    STC   R15,MSERR+L'MSERR-9
         NI    MSERR+L'MSERR-9,X'0F'
         SRL   R15,4
         STC   R15,MSERR+L'MSERR-10
         NI    MSERR+L'MSERR-10,X'0F'
         TR    MSERR+L'MSERR-10(2),TRTAB
         MVI   MC,C'0'             DOUBLE SPACE.
         MVI   MESSAGE,C' '
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   MESSAGE+1(L'MSERR),MSERR
         OI    SWPR+1,ON           SET BRANCH OPERATION.
         BAS   R3,PMSG
SWIX     B     SETSWS
         OI    SWIX+1,ON
         MVI   MESSAGE,C' '
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   MESSAGE+1(L'MSIX),MSIX
         BAS   R3,PMSG
SETSWS   NI    SWPR+1,OFF          SET NOP OPERATION.
         OI    SWEND+1,ON          SET BRANCH OPERATION.
         TM    SWRCV+1,ON          TEST IF RECOVERY REQUESTED,
         BO    ENDVT               BRANCH IF NOT.
         LA    R9,ADDREC           DUMP ADDRESS AND DSCB'S AREA.
         LA    R10,3
         MVI   MC,C' '             NORMAL SPACE.
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         OI    SWPR+1,ON           SET BRANCH OPERATION.
DUMP     XR    R0,R0
         LA    R1,50
         LA    R15,MESSAGE+9
DUMPL    IC    R0,0(R9)
         STC   R0,1(R15)
         NI    1(R15),X'0F'
         SRL   R0,4
         STC   R0,0(R15)
         LA    R9,1(R9)
         LA    R15,2(R15)
         BCT   R1,DUMPL
         TR    MESSAGE+9(100),TRTAB
         BAS   R3,PMSG
         BCT   R10,DUMP
         NI    SWPR+1,OFF          SET NOP OPERATION.
         B     READ
READOK   CLI   DS4IDFMT,C'4'       TEST IF DSCB'S FORMAT 4,
         BE    FMT4                BRANCH IF YES.
SWFS     B     FRSTNOT4
         CLI   DS1FMTID,C'1'       TEST IF DSCB'S FORMAT 1,
         BE    FMT1                BRANCH IF YES.
         CLI   DS2FMTID,C'2'       TEST IF DSCB'S FORMAT 2,
         BE    FMT2                BRANCH IF YES.
         CLI   DS3FMTID,C'3'       TEST IF DSCB'S FORMAT 3,
         BE    FMT3                BRANCH IF YES.
         CLI   DS5FMTID,C'5'       TEST IF DSCB'S FORMAT 5,
         BE    FMT5                BRANCH IF YES.
         CLI   DS6FMTID,C'6'       TEST IF DSCB'S FORMAT 6,
         BE    READ                BRANCH IF YES.
         LH    R1,FDSCB            UPDATE FREE DSCB'S COUNT.
         LA    R1,1(,R1)
         STH   R1,FDSCB
         B     READ
FRSTNOT4 MVI   MC,C'0'             DOUBLE SPACE.
         MVI   MESSAGE,C' '
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   MESSAGE+1(L'MSNF4),MSNF4
         MVC   MESSAGE+8(L'VOLSER),VOLSER
         BAS   R3,PMSG
         OI    SWXX+1,ON
         B     ENDVT
         SPACE 2
FMT1     DS    0H                  FORMAT 1 - IDENTIFIER DSCB.
         LR    R1,R8
         LA    R2,DS1EXT1          STORE EXTENTS.
         BAS   R10,FMT1ST
         LA    R2,DS1EXT2
         BAS   R10,FMT1ST
         LA    R2,DS1EXT3
         BAS   R10,FMT1ST
FMT1H    OC    DS1PTRDS(L'DS1PTRDS),DS1PTRDS TEST IF FMT 2 OR 3 EXISTS,
         BZ    READ                BRANCH IF NOT.
         L     R2,AFMT13           GET FMT 1-2-3 TABLE ADDRESS.
         LA    R0,NTF13            NR. OF ELEMENTS.
         USING FMTDSECT,R2
FMT1A    OC    FMTSE(FMTLGTH),FMTSE     TEST IF ELEMENT EXISTS,
         BZ    FMT1B               BRANCH IF NOT.
         TM    DS1DSORG,DS1DSGIS   TEST IF DSORG=IS,
         BZ    FMT1I               BRANCH IF NOT.
         CLC   FMTAF2(L'DS1PTRDS),DS1PTRDS   TEST IF FMT2 CCHHR MATCH,
         B     FMT1I+L'FMT1I
FMT1I    CLC   FMTAF3(L'DS1PTRDS),DS1PTRDS   TEST IF FMT3 CCHHR MATCH,
         BE    FMT1G               BRANCH IF YES.
         LA    R2,FMTLGTH(R2)      POINT TO NEXT ELEMENT.
         BCT   R0,FMT1A            CONTINUE SEARCH.
         B     T13OV               TABLE OVERFLOW.
FMT1B    TM    DS1DSORG,DS1DSGIS   TEST IF DSORG=IS,
         BZ    FMT1J               BRANCH IF NOT.
         MVC   FMTAF2(L'DS1PTRDS),DS1PTRDS   SET FMT2 CCHHR.
         B     FMT1J+L'FMT1J
FMT1J    MVC   FMTAF3(L'DS1PTRDS),DS1PTRDS   SET FMT3 CCHHR.
         ST    R1,FMTSE            SET FMT 1 ELEMENT ADDRESS IN IWT.
         B     READ
FMT1G    TM    DS1DSORG,DS1DSGIS   TEST IF DSORG=IS,
         BZ    FMT1C               BRANCH IF NOT.
         OC    FMTAF3(L'FMTAF3),FMTAF3  TEST IF FMT3 EXISTS,
         BZ    FMT1E               BRANCH IF NOT.
         OC    FMTSE(L'FMTSE),FMTSE     TEST IF FMT3 PRESENT,
         BZ    FMT1J+L'FMT1J       BRANCH IF NOT.
FMT1C    L     R7,FMTSE            GET FMT3 START EL. ADDRESS IN IWT.
         XR    R1,R1
         IC    R1,EXTDSN-TABDSECT(R7)   NO. FMT3 EXTENTS TO COMPLETE.
FMT1D    MVC   EXTDSN-TABDSECT(L'DS1DSNAM,R7),DS1DSNAM
         LA    R7,TABLGTH(R7)      NEXT EXTENT ADDRESS.
         BCT   R1,FMT1D            LOOP IF MORE.
FMT1E    BCT   R0,FMT1F            TEST IF LAST FMT 1-2-3 ELEMENT,
         XC    FMTSE(FMTLGTH),FMTSE     CLEAR LAST ELEMENT.
         B     READ
FMT1F    OC    FMTSE+FMTLGTH(FMTLGTH),FMTSE+FMTLGTH    TEST NEXT EL.,
         BZ    FMT1E+L'FMT1E       BRANCH IF NOT.
         MVC   FMTSE(FMTLGTH),FMTSE+FMTLGTH  SHIFT FMT 1-2-3 TABLE EL.
         LA    R2,FMTLGTH(R2)      POINT TO NEXT ELEMENT.
         B     FMT1E
         DROP  R2
         SPACE 1
FMT1ST   CLI   0(R2),0             TEST IF EXTENT EXISTS,
         BE    FMT1H               BRANCH IF NOT.
         CL    R8,ATABLE+4         TEST IF TABLE OVERFLOW,
         BNL   TABOV               BRANCH IF YES.
         MVC   EXTDSN(L'DS1DSNAM),DS1DSNAM   BUILD ELEMENT.
         MVC   EXTSQN(L'DSCBSQN+L'DSCBLOL+L'DSCBUPL),1(R2)
         BAS   R9,TAC              COMPUTE TRACK ADDRESSES.
         LA    R8,TABLGTH(R8)      NEXT ELEMENT ADDRESS.
         BR    R10                 RETURN.
         SPACE 2
FMT2     DS    0H                  FORMAT 2 - INDEX DSCB.
         L     R2,AFMT13           GET FMT 1-2-3 TABLE ADDRESS.
         LA    R0,NTF13            NR. OF ELEMENTS.
         USING FMTDSECT,R2
FMT2A    OC    FMTSE(FMTLGTH),FMTSE     TEST IF ELEMENT EXISTS,
         BZ    FMT2C               BRANCH IF NOT.
         CLC   FMTAF2(L'ADDREC-3),ADDREC+3 TEST IF MY FMT2 ADDRESS,
         BE    FMT2D               BRANCH IF YES.
         OC    DS2PTRDS(L'DS2PTRDS),DS2PTRDS TEST IF FMT3 EXISTS,
         BZ    FMT2B               BRANCH IF NOT.
         CLC   FMTAF3(L'DS2PTRDS),DS2PTRDS   TEST IF ADDRESS MATCH,
         BE    FMT2I               BRANCH IF YES.
FMT2B    LA    R2,FMTLGTH(R2)      POINT TO NEXT ELEMENT.
         BCT   R0,FMT2A            CONTINUE SEARCH.
         B     T13OV               TABLE OVERFLOW.
FMT2C    MVC   FMTAF2(L'ADDREC-3),ADDREC+3 SET MY FMT2 CCHHR.
         MVC   FMTAF3(L'DS2PTRDS),DS2PTRDS   SET EVENTUAL FMT3 CCHHR.
         B     READ
FMT2D    OC    DS2PTRDS(L'DS2PTRDS),DS2PTRDS TEST IF FMT3 EXISTS,
         BZ    FMT1E               BRANCH IF NOT.
         L     R15,AFMT13          SCAN FOR A POSSIBLE FMT3 PRESENT.
         LA    R14,NTF13           NR. OF ELEMENTS.
FMT2E    OC    FMTSE-FMTDSECT(FMTLGTH,R15),FMTSE-FMTDSECT(R15)   TEST,
         BZ    FMT2C+L'FMT2C       BRANCH IF NO ELEMENT.
         CLC   FMTAF3-FMTDSECT(L'DS2PTRDS,R15),DS2PTRDS     TEST ADDR.,
         BE    FMT2F               BRANCH IF IT MATCH.
         LA    R15,FMTLGTH(R15)    POINT TO NEXT ELEMENT.
         BCT   R14,FMT2E           CONTINUE SEARCH.
         B     T13OV               TABLE OVERFLOW.
FMT2F    MVC   FMTSE(L'FMTSE),FMTSE-FMTDSECT(R15) MOVE FMT3 EL. INF.
         CLR   R2,R15              TEST IF SHIFT INVOLVE FIRST POINTER,
         BNH   FMT2H               BRANCH IF NOT.
         LA    R10,FMTLGTH         ADJUST FIRST POINTER.
         SLR   R2,R10
         AH    R0,NULL
         B     FMT2H
FMT2G    OC    FMTSE+FMTLGTH-FMTDSECT(FMTLGTH,R15),FMTSE+FMTLGTH-FMTDSE1
               CT(R15)             TEST NEXT ELEMENT,
         BZ    FMT1C               BRANCH IF NO ELEMENT.
         MVC   FMTSE-FMTDSECT(FMTLGTH,R15),FMTSE+FMTLGTH-FMTDSECT(R15)
         LA    R15,FMTLGTH(R15)    POINT TO NEXT ELEMENT.
FMT2H    BCT   R14,FMT2G           TEST IF LAST FMT 1-2-3 ELEMENT,
         XC    FMTSE-FMTDSECT(FMTLGTH,R15),FMTSE-FMTDSECT(R15)   CLEAR.
         B     FMT1C
FMT2I    L     R15,AFMT13          SCAN FOR A POSSIBLE FMT1 PRESENT,
         LA    R14,NTF13           NR. OF ELEMENTS.
FMT2J    OC    FMTSE-FMTDSECT(FMTLGTH,R15),FMTSE-FMTDSECT(R15)   TEST,
         BZ    FMT2K               BRANCH IF NO ELEMENT.
         CLC   FMTAF2-FMTDSECT(L'ADDREC-3,R15),ADDREC+3   TEST FMT2,
         BE    FMT2L               BRANCH IF MY FMT2 ADDRESS.
         LA    R15,FMTLGTH(R15)    POINT TO NEXT ELEMENT.
         BCT   R14,FMT2J           CONTINUE SEARCH.
         B     T13OV               TABLE OVERFLOW.
FMT2K    MVC   FMTAF2(L'ADDREC-3),ADDREC+3 SET MY FMT2 CCHHR.
         B     READ
FMT2L    LR    R10,R15             EXCHANGE POINTERS.
         LR    R15,R2
         LR    R2,R10
         LR    R10,R14
         LR    R14,R0
         LR    R0,R10
         B     FMT2F               GO PROCESS.
         DROP  R2
         SPACE 2
FMT3     DS    0H                  FORMAT 3 - EXTENSION DSCB.
         L     R2,AFMT13           GET FMT 1-2-3 TABLE ADDRESS.
         LA    R0,NTF13            NR. OF ELEMENTS.
         USING FMTDSECT,R2
FMT3A    OC    FMTSE(FMTLGTH),FMTSE     TEST IF ELEMENT EXISTS,
         BZ    FMT3B               BRANCH IF NOT.
         CLC   FMTAF3(L'ADDREC-3),ADDREC+3 TEST IF MY FMT3 ADDRESS,
         BE    FMT3F               BRANCH IF YES.
         LA    R2,FMTLGTH(R2)      POINT TO NEXT ELEMENT.
         BCT   R0,FMT3A            CONTINUE SEARCH.
         B     T13OV               TABLE OVERFLOW.
FMT3B    MVC   FMTAF3(L'ADDREC-3),ADDREC+3 SET MY FMT3 CCHHR.
         ST    R8,FMTSE            SET FMT3 ELEMEMT ADDRESS IN IWT.
         LR    R7,R8               SAVE FIRST FMT3 EL. ADDRESS IN IWT.
         LA    R14,FMT3E           SET END RETURN ADDRESS.
         XR    R1,R1               NO. OF EXTENTS COUNTER.
         LA    R0,4                SET FIRST 4 EXTENTS POINTER.
         LA    R2,DS3EXTNT
FMT3C    BAS   R10,FMT3ST
         LA    R2,L'DS1EXT1(R2)
         LA    R1,1(R1)
         BCT   R0,FMT3C
         LA    R0,9                SET LAST 9 EXTENTS POINTER.
         LA    R2,DS3ADEXT
FMT3D    BAS   R10,FMT3ST
         LA    R2,L'DS1EXT1(R2)
         LA    R1,1(R1)
         BCT   R0,FMT3D
FMT3E    STC   R1,EXTDSN-TABDSECT(R7)   NO. FMT3 EXTENTS TO COMPLETE.
         B     READ
FMT3F    L     R7,FMTSE            GET FMT1 ELEMENT ADDRESS IN IWT.
         LTR   R7,R7               TEST IF EXISTS,
         BZ    FMT3B+L'FMT3B       BRANCH IF NOT.
         B     FMT3H
FMT3G    OC    FMTSE+FMTLGTH(FMTLGTH),FMTSE+FMTLGTH    TEST NEXT EL.,
         BZ    FMT3H+L'FMT3H       BRANCH IF NOT.
         MVC   FMTSE(FMTLGTH),FMTSE+FMTLGTH  SHIFT FMT 1-2-3 TABLE EL.
         LA    R2,FMTLGTH(R2)      POINT NEXT ELEMENT.
FMT3H    BCT   R0,FMT3G            TEST IF LAST FMT 1-2-3 ELEMENT,
         XC    FMTSE(FMTLGTH),FMTSE     CLEAR LAST ELEMENT.
         DROP  R2
         LA    R14,READ            SET END RETURN ADDRESS.
         LA    R0,4                SET FIRST 4 EXTENTS POINTER.
         LA    R2,DS3EXTNT
FMT3I    LR    R1,R8
         BAS   R10,FMT3ST
         MVC   EXTDSN-TABDSECT(L'EXTDSN,R1),EXTDSN-TABDSECT(R7)
         LA    R2,L'DS1EXT1(R2)
         BCT   R0,FMT3I
         LA    R0,9                SET LAST 9 EXTENTS POINTER.
         LA    R2,DS3ADEXT
FMT3J    LR    R1,R8
         BAS   R10,FMT3ST
         MVC   EXTDSN-TABDSECT(L'EXTDSN,R1),EXTDSN-TABDSECT(R7)
         LA    R2,L'DS1EXT1(R2)
         BCT   R0,FMT3J
         B     READ
         SPACE 1
FMT3ST   CLI   0(R2),0             TEST IF EXTENT EXISTS,
         BER   R14                 BRANCH IF NOT.
         CL    R8,ATABLE+4         TEST IF TABLE OVERFLOW,
         BNL   TABOV               BRANCH IF YES.
         MVC   EXTSQN(L'DSCBSQN+L'DSCBLOL+L'DSCBUPL),1(R2)
         BAS   R9,TAC              COMPUTE TRACK ADDRESSES.
         LA    R8,TABLGTH(R8)      NEXT ELEMENT ADDRESS.
         BR    R10                 RETURN.
         SPACE 2
FMT4     B     MOREF4              FORMAT 4 - VTOC DSCB.
         CL    R8,ATABLE+4         TEST IF TABLE OVERFLOW,
         BNL   TABOV               BRANCH IF YES.
         NI    SWFS+1,OFF
         OI    FMT4+1,ON
         MVC   EXTDSN(L'VTOCN),VTOCN    SET VTOC NAME.
         MVC   EXTDSN+L'VTOCN(L'EXTDSN-L'VTOCN),EXTDSN+L'VTOCN-1
         MVC   VFDSCB(L'DS4DSREC),DS4DSREC   SET VTOC FREE DSCB'S.
         CLI   DS4VTOCI,0          TEST IF ANY VTOC INDICATORS ON,
         BE    FMT4A               BRANCH IF NOT.
         MVC   EXTDSN+L'EXTDSN-L'VTI(L'VTI),VTI
         XR    R15,R15
         IC    R15,DS4VTOCI
         STC   R15,EXTDSN+L'EXTDSN-2
         SRL   R15,4
         STC   R15,EXTDSN+L'EXTDSN-3
         NI    EXTDSN+L'EXTDSN-2,X'0F'
         TR    EXTDSN+L'EXTDSN-3(2),TRTAB
         MVI   EXTDSN+L'VTOCN,C'.'
         MVC   EXTDSN+L'VTOCN+1(L'EXTDSN-L'VTOCN-L'VTI-1),EXTDSN+L'VTOC1
               N                   INDICATORS PRINT PREPARED.
         TM    SWLS+1,ON           TEST IF NOLIST REQUESTED,
         BZ    FMT4A               BRANCH IF NOT.
         MVI   MC,C' '             NORMAL SPACE.
         MVI   MESSAGE,C' '        CLEAR LINE.
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   MESSAGE+1(L'VOLSER),VOLSER    VOLUME SERIAL NUMBER.
         MVI   MESSAGE+L'VOLSER+2,C'-'
         MVC   MESSAGE+L'VOLSER+4(L'EXTDSN),EXTDSN
         BAS   R3,PMSG
FMT4A    MVC   EXTSQN(L'DSCBSQN+L'DSCBLOL+L'DSCBUPL),DS4VTOCE+1
         BAS   R9,TAC              COMPUTE TRACK ADDRESSES.
         LA    R8,TABLGTH(R8)      NEXT ELEMENT ADDRESS.
         B     READ
MOREF4   MVI   MC,C'0'             DOUBLE SPACE.
         MVI   MESSAGE,C' '
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   MESSAGE+1(L'MSMF4),MSMF4
         MVC   MESSAGE+8(L'VOLSER),VOLSER
         BAS   R3,PMSG
         OI    SWXX+1,ON
         TM    SWRCV+1,ON          TEST IF RECOVERY REQUESTED,
         BO    ENDVT               BRANCH IF NOT.
         LA    R9,ADDREC           DUMP ADDRESS AND DSCB'S AREA.
         LA    R10,3
         MVI   MC,C' '             NORMAL SPACE.
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
DMP      XR    R0,R0
         LA    R1,50
         LA    R15,MESSAGE+9
DMPL     IC    R0,0(R9)
         STC   R0,1(R15)
         NI    1(R15),X'0F'
         SRL   R0,4
         STC   R0,0(R15)
         LA    R9,1(R9)
         LA    R15,2(R15)
         BCT   R1,DMPL
         TR    MESSAGE+9(100),TRTAB
         BAS   R3,PMSG
         BCT   R10,DMP
         B     ENDVT
         SPACE 2
FMT5     DS    0H                  FORMAT 5 - FREE SPACE DSCB.
         LA    R1,NTF5             NR. OF POSSIBLE FMT5 IN TABLE.
         L     R2,AFMT5            GET FMT5 TABLE ADDRESS.
FMT5A    OC    0(L'ADDREC,R2),0(R2)    TEST IF EMPTY,
         BZ    FMT5B               BRANCH IF YES.
         LA    R2,L'ADDREC+DS5LGTH(R2) NEXT FMT5 POINTER.
         BCT   R1,FMT5A            CONTINUE SEARCH.
         B     T5OV                TABLE OVERFLOW.
FMT5B    MVC   0(L'ADDREC,R2),ADDREC  MOVE MBBCCHHR OF FMT5 DSCB.
         MVC   L'ADDREC(DS5LGTH,R2),DS5KEYID     MOVE FMT5.
         LH    R7,DVTYP+10         GET NR. OF TRACKS BY CYLINDER.
         LA    R9,8                SET FIRST 8 EXTENTS POINTER.
         LA    R2,DS5AVEXT
FMT5C    BAS   R10,FMT5ST
         LA    R2,L'DS5AVEXT(R2)
         BCT   R9,FMT5C
         LA    R9,18               SET LAST 18 EXTENTS POINTER.
         LA    R2,DS5MAVET
FMT5D    BAS   R10,FMT5ST
         LA    R2,L'DS5AVEXT(R2)
         BCT   R9,FMT5D
         B     READ
         SPACE 1
FMT5ST   OC    2(L'DSCBUNC+L'DSCBUNT,R2),2(R2)    TEST IF EXTENT EXISTS
         BZ    READ                BRANCH IF NOT.
         CL    R8,ATABLE+4         TEST IF TABLE OVERFLOW,
         BNL   TABOV               BRANCH IF YES.
         MVC   WORKD(L'DS5AVEXT),0(R2)
         XR    R0,R0               TRANSFORM START ADDRESS TO CCHH.
         LH    R1,WORKD
         ST    R1,WORKF
         MVC   EXTLOLT(L'EXTLOLT),WORKF
         DR    R0,R7
         STH   R1,WORKF
         STH   R0,WORKF+2
         MVC   EXTLOL(L'EXTLOL),WORKF   SET LOWER LIMIT.
         XR    R0,R0               COMPUTE LAST ADDRESS.
         LH    R1,WORKD+L'DSCBRLT
         MR    R0,R7
         IC    R0,WORKD+L'DSCBRLT+L'DSCBUNC
         AR    R1,R0
         BCTR  R1,0
         AH    R1,WORKD
         ST    R1,WORKF
         MVC   EXTUPLT(L'EXTUPLT),WORKF
         XR    R0,R0               TRANSFORM LAST ADDRESS TO CCHH.
         DR    R0,R7
         STH   R1,WORKF
         STH   R0,WORKF+2
         MVC   EXTUPL(L'EXTUPL),WORKF   SET UPPER LIMIT.
         MVI   EXTSQN,255          SET FREE SPACE INDICATOR.
         MVI   EXTDSN,C'.'         NO DATA-SET NAME.
         MVC   EXTDSN+1(L'EXTDSN-L'FSN-1),EXTDSN
         MVC   EXTDSN+L'EXTDSN-L'FSN(L'FSN),FSN
         LA    R8,TABLGTH(R8)      NEXT ELEMENT ADDRESS.
         BR    R10                 RETURN.
         SPACE 1
TAC      MVC   WORKD(L'EXTLOL+L'EXTUPL),EXTLOL
         LH    R15,WORKD           TRANSFORM CCHH TO TRACK ADDRESS.
         MH    R15,DVTYP+10
         AH    R15,WORKD+2
         ST    R15,WORKF
         MVC   EXTLOLT(L'EXTLOLT),WORKF
         LH    R15,WORKD+4
         MH    R15,DVTYP+10
         AH    R15,WORKD+6
         ST    R15,WORKF
         MVC   EXTUPLT(L'EXTUPLT),WORKF
         BR    R9                  RETURN.
         SPACE 2
T5OV     MVI   MSTOV+L'MSTOV-2,C'F'     SET FMT 5 TABLE INDICATOR.
         B     MSGOV
T13OV    MVI   MSTOV+L'MSTOV-2,C'C'     SET FMT1-FMT3 TABLE INDICATOR.
         B     MSGOV
TABOV    MVI   MSTOV+L'MSTOV-2,C'E'     SET EXTENTS TABLE INDICATOR.
MSGOV    MVI   MESSAGE,C' '
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVI   MC,C'0'             DOUBLE SPACE.
         MVC   MESSAGE+1(L'VOLSER),VOLSER
         MVC   MESSAGE+L'VOLSER+2(L'MSTOV),MSTOV
         BAS   R3,PMSG
         OI    SWEND+1,ON          SET BRANCH OPERATION.
         SPACE 1
         DROP  R6
         SPACE 2
ENDVTOC  LTR   R1,R0               INDEXED VTOC INFO'S?
         BZ    ENDVT               NO, NORMAL VTOC.
         MVC   IXDSCB(L'IXDSCB+L'IXVIRS),0(R1)    YES.
ENDVT    OI    SWCL+1,ON           SET BRANCH OPERATION.
         TM    SWQR+1,ON
         BO    QCLOSE
        $VTOCSC
         B     TCLOSE
QCLOSE  $VTOCQC
TCLOSE   LTR   R15,R15
         BZ    SWXX
         TM    SWQR+1,ON
         BO    *+L'*+10
         MVC   MSERR(8),VSC
         B     SMSG
         MVC   MSERR(8),VQC
         B     SMSG
SWXX     NOP   ENDVTA
         ST    R8,EVEA             SET ADDRESS END OF VTOC ELEMENTS.
         LA    R9,ASEQCA+1         EXTENT SEQUENTIAL CHAIN START ADDR.
         ZAP   NPA,ONE             INITIALIZE PAGE NO.
         NI    SWDG+1,OFF          SET NOP OPERATION.
         XC    EXTCTL(L'EXTCTL),EXTCTL  INIT. EXTENTS CONTROL.
SWLS     NOP   LVT1
         MVI   MC,C' '             NORMAL SPACE.
         MVI   MESSAGE,C' '        CLEAR LINE.
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   TIT11(L'VOLSER),VOLSER   VOLUME SERIAL NUMBER.
         ZAP   NLI,NSLI            FORCE SKIP PAGE.
LVT1     XR    R7,R7               SET NO ELEMENT ADDRESS.
         MVC   NVA(L'NVA),NVMX     SET STARTING ARGUMENT VALUE.
         L     R8,ATABLE           GET START OF TABLE.
LVT2     CLI   EXTDSN,128          TEST IF ELEMENT PROCESSED,
         BE    LVT3                BRANCH IF YES.
         CLC   NVA(L'EXTLOLT),EXTLOLT   TEST IF THIS IS THE LOWEST,
         BL    LVT3                BRANCH IF NOT.
         LR    R7,R8               SAVE ELEMENT ADDRESS.
         MVC   NVA(L'EXTLOLT),EXTLOLT   SET NEW ELEMENT VALUE.
LVT3     LA    R8,TABLGTH(R8)      NEXT ELEMENT ADDRESS.
         CL    R8,EVEA             TEST END OF TABLE,
         BNE   LVT2                BRANCH IF NOT.
         LTR   R8,R7               TEST IF ANY ELEMENT TO BE PRINTED,
         BZ    LTVT1               BRANCH IF NOT (TABLE END).
         OI    SWOV+1,ON           SET BRANCH OPERATION.
         CLC   EXTLOLT(L'EXTLOLT),EXTCTL     TEST EXTENTS OVERLAP,
         BH    LVTC2               BRANCH IF NOT.
         OI    SWEND+1,ON          SET BRANCH OPERATION.
SWDG     NOP   LVTC1
         OI    SWDG+1,ON           SET BRANCH OPERATION.
         TM    SWLS+1,ON           TEST IF NOLIST OPTION,
         BZ    LVTC1               BRANCH IF NOT.
         MVI   MC,C'1'             SKIP PAGE.
         MVI   MESSAGE,C' '        CLEAR LINE.
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   MESSAGE+1(L'MSEXOV),MSEXOV    EXTENTS OVERLAP MSG.
         MVC   MESSAGE+1(L'VOLSER),VOLSER    VOLUME SERIAL NUMBER.
         BAS   R3,PMSG
         B     LVTC2
LVTC1    NI    SWOV+1,OFF          SET NOP OPERATION.
LVTC2    CLC   EXTCTL(L'EXTUPLT),EXTUPLT
         BNL   *+L'*+6
         MVC   EXTCTL(L'EXTUPLT),EXTUPLT     SET FOR NEXT CONTROL.
         TM    SWLS+1,ON           TEST IF NOLIST OPTION,
         BO    LVT7                BRANCH IF YES.
         MVC   MESSAGE+4(L'OV),MESSAGE+3
SWOV     B     *+L'*+6
         MVC   MESSAGE+4(L'OV),OV  SET OVERLAP INDICATOR.
         MVC   WORKF(L'EXTLOL),EXTLOL   EXTENT LOWER LIMIT.
         LA    R2,MESSAGE+8
         BAS   R10,DECODE
         MVC   WORKF(L'EXTUPL),EXTUPL   EXTENT UPPER LIMIT.
         LA    R2,MESSAGE+31
         BAS   R10,DECODE
         CLI   EXTSQN,255          TEST IF FREE SPACE EXTENT,
         BE    LVT4                BRANCH IF YES.
         XR    R0,R0
         IC    R0,EXTSQN           EXTENT SEQUENCE NUMBER.
         CVD   R0,WORKD
         MVC   MESSAGE+56(3),MASK+3
         ED    MESSAGE+55(4),WORKD+6
         B     LVT5
LVT4     MVC   MESSAGE+56(3),MESSAGE+55
LVT5     MVC   MESSAGE+64(L'EXTDSN),EXTDSN   EXTENT NAME.
         CP    NLI,NLMX            TEST IF SKIP PAGE REQUESTED,
         BNH   LVT6                BRANCH IF NOT.
         MVI   LC,C'1'             SKIP PAGE.
         MVI   LINE,C' '           CLEAR LINE.
         MVC   LINE+1(L'LINE-1),LINE
         MVC   LINE+1(L'TIT11),TIT11
         MVC   LINE+99(L'TIT12),TIT12
         ED    LINE+103(4),NPA
         AP    NPA,ONE
         ZAP   NLI,SEVEN
         BAS   R3,PLNE
         MVI   LC,C' '             NORMAL SPACE.
         MVI   LINE+1,C'='
         MVC   LINE+2(L'TIT11-1),LINE+1
         MVC   LINE+99(L'TIT12),LINE+98
         BAS   R3,PLNE
         MVI   LC,C'0'             DOUBLE SPACE.
         MVC   LINE+1(L'LINE-1),LINE
         MVC   LINE+9(L'TIT2),TIT2
         BAS   R3,PLNE
         MVI   LC,C' '             NORMAL SPACE.
         MVC   LINE+9(L'TIT3),TIT3
         BAS   R3,PLNE
         MVI   LINE+9,C'-'
         MVC   LINE+10(19),LINE+9
         MVC   LINE+32(20),LINE+9
         MVC   LINE+55(6),LINE+9
         MVI   LINE+64,C'-'
         MVC   LINE+65(L'EXTDSN-1),LINE+64
         BAS   R3,PLNE
         MVI   MC,C'0'             DOUBLE SPACE.
LVT6     BAS   R3,PMSG
         MVI   MC,C' '             NORMAL SPACE.
         AP    NLI,ONE
LVT7     ST    R8,WORKF            SET EXTENT SEQUENTIAL CHAIN ADDRESS.
         MVC   EXTCA-TABDSECT(L'EXTCA,R9),WORKF+1
         MVI   EXTDSN,128          SET PROCESSED INDICATOR.
         LR    R9,R8
         B     LVT1
         SPACE 2
LTVT1    XC    EXTCA-TABDSECT(L'EXTCA,R9),EXTCA-TABDSECT(R9) END CHAIN.
         L     R2,AFMT13           GET FMT 1-2-3 TABLE ADDRESS.
         USING FMTDSECT,R2
         OC    FMTSE(FMTLGTH),FMTSE     TEST IF ANY ELEMENT REMAINING,
         BZ    LTVT8               BRANCH IF NOT.
         MVI   MC,C'1'             SKIP PAGE.
         MVI   MESSAGE,C' '
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   MESSAGE+1(L'VOLSER),VOLSER
         MVC   MESSAGE+L'VOLSER+2(L'MSF13),MSF13
         MVC   MESSAGE+99(L'TIT12),TIT12
         ED    MESSAGE+103(4),NPA
         AP    NPA,ONE
         BAS   R3,PMSG
         MVI   MC,C' '             NORMAL SPACE.
         MVI   MESSAGE+1,C'-'
         MVC   MESSAGE+2(L'VOLSER+L'MSF13+1),MESSAGE+1
         MVC   MESSAGE+99(L'TIT12),MESSAGE+98
         BAS   R3,PMSG
         MVI   MC,C'0'             DOUBLE SPACE.
         LA    R7,NTF13            NR. OF ELEMENTS IN TABLE.
LTVT2    MVI   MESSAGE,C' '
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         LA    R1,MESSAGE+9
         LA    R0,4
LTVT3    UNPK  0(11,R1),FMTAF2(L'FMTAF2+1)   PREPARE CCHHR'S PRINT.
         TR    0(10,R1),TRTAB-X'F0'
         MVI   10(R1),C'-'
         UNPK  11(11,R1),FMTAF3(L'FMTAF3+1)
         TR    11(10,R1),TRTAB-X'F0'
         MVI   21(R1),C','
         LA    R2,FMTLGTH(R2)      STEP TO NEXT ELEMENT IN TABLE.
         BCT   R7,LTVT4            TEST IF MORE.
         B     LTVT6+L'LTVT6       NO MORE (END TABLE).
LTVT4    OC    FMTSE(FMTLGTH),FMTSE     TEST IF ANY ELEMENT REMAINING,
         BZ    LTVT6               BRANCH IF NOT.
         BCT   R0,LTVT5            TEST IF LINE FULL FILLED,
         B     LTVT7               END LINE.
LTVT5    LA    R1,23(R1)
         B     LTVT3
LTVT6    XR    R7,R7               INDICATE END TABLE.
         MVI   21(R1),C'.'
LTVT7    BAS   R3,PMSG
         MVI   MC,C' '             NORMAL SPACE.
         LTR   R7,R7               TEST IF CONTINUE,
         BNZ   LTVT2               BRANCH IF YES.
         DROP  R2
LTVT8    CLC   FDSCB(L'FDSCB),VFDSCB    CONTROL FREE DSCB'S COUNT?
         BNE   LTVT9               BRANCH IF DISCREPANCY.
         OC    IXDSCB(L'IXDSCB+L'IXVIRS),IXDSCB   INDEXED VTOC INFO'S?
         BZ    LTVT10              BRANCH IF NONE.
         CLC   FDSCB(L'FDSCB),IXDSCB+2  CONTROL FREE DSCB'S COUNT?
         BE    LTVT10              BRANCH IF OK.
LTVT9    NI    SWFE+1,OFF          SET NOP OPERATION.
         MVI   MC,C'0'             DOUBLE SPACE.
         MVI   MESSAGE,C' '
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   MESSAGE+1(L'VOLSER),VOLSER
         MVC   MESSAGE+L'VOLSER+2(L'MSFE1),MSFE1
         BAS   R3,PMSG
         MVI   MC,C' '             NORMAL SPACE.
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   MESSAGE+9(L'MSFE21),MSFE21
         UNPK  MESSAGE+L'MSFE21+10(5),VFDSCB(3)
         TR    MESSAGE+L'MSFE21+10(4),TRTAB-X'F0'
         MVC   MESSAGE+L'MSFE21+14(L'MASK),MASK
         LH    R1,VFDSCB
         CVD   R1,WORKD
         ED    MESSAGE+L'MSFE21+14(L'MASK),WORKD+5
         MVI   MESSAGE+L'MSFE21+14,C'('
         MVC   MESSAGE+L'MSFE21+L'MASK+14(L'MSFE22),MSFE22
         UNPK  MESSAGE+L'MSFE21+L'MSFE22+L'MASK+15(5),FDSCB(3)
         TR    MESSAGE+L'MSFE21+L'MSFE22+L'MASK+15(4),TRTAB-X'F0'
         MVC   MESSAGE+L'MSFE21+L'MSFE22+L'MASK+19(L'MASK),MASK
         LH    R1,FDSCB
         CVD   R1,WORKD
         ED    MESSAGE+L'MSFE21+L'MSFE22+L'MASK+19(L'MASK),WORKD+5
         MVI   MESSAGE+L'MSFE21+L'MSFE22+L'MASK+19,C'('
         MVC   MESSAGE+L'MSFE21+L'MSFE22+2*L'MASK+19(L'MSFE23),MSFE23
         BAS   R3,PMSG
LTVT10   OC    IXDSCB(L'IXDSCB+L'IXVIRS),IXDSCB   INDEXED VTOC INFO'S?
         BZ    SWRCV               BRANCH IF NONE.
         MVI   MC,C'0'             DOUBLE SPACE.
         MVI   MESSAGE,C' '
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   MESSAGE+1(L'VOLSER),VOLSER
         MVC   MESSAGE+L'VOLSER+2(L'MSFE31),MSFE31
         UNPK  MESSAGE+L'MSFE31+L'VOLSER+3(5),IXDSCB+2(3)
         TR    MESSAGE+L'MSFE31+L'VOLSER+3(4),TRTAB-X'F0'
         MVC   MESSAGE+L'MSFE31+L'VOLSER+7(L'MASK),MASK
         LH    R1,IXDSCB+2
         CVD   R1,WORKD
         ED    MESSAGE+L'MSFE31+L'VOLSER+7(L'MASK),WORKD+5
         MVI   MESSAGE+L'MSFE31+L'VOLSER+7,C'('
LGTEMP   EQU   L'MSFE31+L'VOLSER+L'MASK+7
         MVC   MESSAGE+LGTEMP(L'MSFE32),MSFE32
         UNPK  MESSAGE+LGTEMP+L'MSFE32+1(5),IXVIRS+2(3)
         TR    MESSAGE+LGTEMP+L'MSFE32+1(4),TRTAB-X'F0'
         MVC   MESSAGE+LGTEMP+L'MSFE32+5(L'MASK),MASK
         LH    R1,IXVIRS+2
         CVD   R1,WORKD
         ED    MESSAGE+LGTEMP+L'MSFE32+5(L'MASK),WORKD+5
         MVI   MESSAGE+LGTEMP+L'MSFE32+5,C'('
         MVC   MESSAGE+LGTEMP+L'MSFE32+L'MASK+5(L'MSFE23),MSFE23
         BAS   R3,PMSG
         SPACE 2
SWRCV    B     ENDVTA
         SPACE 1
         LH    R2,DVALT            GET NO. OF ALTERNATE TRACKS.
         LH    R1,DVTYP+8          GET NO. OF CYLINDERS IN VOLUME.
         MH    R1,DVTYP+10         MULTIPLY BY NO. OF TRACKS / CYL.
         CH    R2,NULL             TEST IF NULL NO. OF ALTERNATE TRACKS
         BE    *+L'*+2             BRANCH IF YES.
         SR    R1,R2               FIRST ALTERNATE TRACK ADDRESS.
         L     R8,ASEQCA           GET START OF CHAIN ADDRESS.
         XC    WORKF(L'WORKF),WORKF     START TRACK ADDRESS VALUE.
         L     R2,AFMT13           USE TABLE TO STORE UNAV. SPACE ADDR.
NTUNV    EQU   ((NTF13*FMTLGTH)/8)-1
         LA    R7,NTUNV            NR. OF ELEMENTS IN TABLE.
AN1      CLC   EXTLOLT(L'EXTLOLT),WORKF TEST IF TRACK 0, 1 OR 2,
         BE    AN3                 BRANCH IF YES.
         CLI   WORKF+3,0           TEST IF TRACK ADDRESS IS 0,
         BNE   AN2                 BRANCH IF NOT.
         MVI   WORKF+3,1           SET TRACK ADDRESS 1.
         B     AN1
AN2      CLI   WORKF+3,1           TEST IF TRACK ADDRESS IS 1,
         BNE   AN4                 BRANCH IF NOT.
         MVI   WORKF+3,2           SET TRACK ADDRESS 2.
         B     AN1
AN3      MVC   WORKF(L'EXTUPLT),EXTUPLT GET EXTENT UPPER LIMIT.
         L     R9,WORKF            COMPUTE NEXT EXTENT LOWER LIMIT.
         LA    R9,1(R9)
         ST    R9,WORKF
NXT      MVC   EVEA+1(L'EXTCA),EXTCA GET NEXT EXTENT CHAIN ADDRESS.
         L     R8,EVEA
         LTR   R8,R8               TEST IF END OF CHAIN,
         BZ    AN6                 BRANCH IF YES.
         CLC   EXTLOLT(L'EXTLOLT),WORKF TEST IF ADDRESSES MATCHES,
         BE    AN3                 BRANCH IF YES.
         BH    AN4                 BRANCH IF UNAVAILABLE SPACE.
         CLC   WORKF(L'EXTUPLT),EXTUPLT OVERLAP EXTENTS.
         BNH   AN3
         B     NXT
AN4      BCT   R7,AN5              TEST IF TABLE OVERFLOW,
         MVI   MC,C'1'             SKIP PAGE.
         MVI   MESSAGE,C' '
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   MESSAGE+1(L'VOLSER),VOLSER
         MVI   MSTOV+L'MSTOV-2,C'R'     SET RECOVERY TABLE INDICATOR.
         MVC   MESSAGE+L'VOLSER+2(L'MSTOV),MSTOV
         BAS   R3,PMSG
         B     ENDVTA
AN5      MVC   0(4,R2),WORKF       SET UNAVAILABLE SPACE START ADDRESS.
         MVC   WORKF(L'EXTLOLT),EXTLOLT
         L     R9,WORKF            COMPUTE UNAVAILABLE SPACE LAST ADDR.
         BCTR  R9,0
         ST    R9,4(R2)
         LA    R2,8(R2)            NEXT ELEMENT ADDRESS IN TABLE.
         B     AN3
AN6      CLR   R9,R1               TEST IF MATCH WITH VOLUME LAST TRACK
         BE    AN8                 BRANCH IF YES.
         BCT   R7,AN7              TEST IF TABLE OVERFLOW,
         B     AN4+L'AN4           BRANCH IF YES.
AN7      ST    R9,0(R2)            SET UNAVAILABLE SPACE LIMITS.
         BCTR  R1,0                ADJUST TO LAST TRACK (1ST ALT.).
         ST    R1,4(R2)
         LA    R2,8(R2)
AN8      S     R2,AFMT13           TEST IF ANY UNAV. EXTENTS,
         BZ    ENDVTA              BRANCH IF NOT (ALL O.K.).
         MVI   LC,C' '             NORMAL SPACE.
         MVI   LINE,C' '
         MVC   LINE+1(L'LINE-1),LINE
         ZAP   NLI,NSLI            FORCE SKIP PAGE.
         L     R7,AFMT13           GET TABLE START ADDRESS.
         LH    R8,DVTYP+10         GET NR. OF TRACKS BY CYLINDER.
         SRL   R2,3                COMPUTE NO. OF ELEMENTS.
         LR    R9,R2
AN9      MVC   WORKF(4),0(R7)      EXTENT LOWER LIMIT.
         LA    R2,LINE+8
         BAS   R10,PRDEC
         MVC   WORKF(4),4(R7)      EXTENT UPPER LIMIT.
         LA    R2,LINE+31
         BAS   R10,PRDEC
         UNPK  LINE+L'UEST+15(5),2(3,R7) REL. TRK. ADDRESS.
         TR    LINE+L'UEST+15(4),TRTAB-X'F0'
         MVI   LINE+L'UEST+19,C' '
         CP    NLI,NLMX            TEST IF SKIP PAGE REQUESTED,
         BNH   AN10                BRANCH IF NOT.
         MVI   MC,C'1'             SKIP PAGE.
         MVI   MESSAGE,C' '
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   MESSAGE+1(L'VOLSER),VOLSER
         MVC   MESSAGE+L'VOLSER+2(L'MSUES),MSUES
         MVC   MESSAGE+99(L'TIT12),TIT12
         ED    MESSAGE+103(4),NPA
         AP    NPA,ONE
         ZAP   NLI,SEVEN
         BAS   R3,PMSG
         MVI   MC,C' '             NORMAL SPACE.
         MVI   MESSAGE+1,C'='
         MVC   MESSAGE+2(L'VOLSER+L'MSUES),MESSAGE+1
         MVC   MESSAGE+99(L'TIT12),MESSAGE+98
         BAS   R3,PMSG
         MVI   MC,C'0'             DOUBLE SPACE.
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   MESSAGE+9(L'UEST),TIT2
         MVC   MESSAGE+L'UEST+9(L'MUES1),MUES1
         BAS   R3,PMSG
         MVI   MC,C' '             NORMAL SPACE.
         MVC   MESSAGE+9(L'UEST),TIT3
         MVC   MESSAGE+L'UEST+9(L'MUES2),MUES2
         BAS   R3,PMSG
         MVI   MESSAGE+9,C'-'
         MVC   MESSAGE+10(19),MESSAGE+9
         MVC   MESSAGE+32(20),MESSAGE+9
         MVC   MESSAGE+L'UEST+9(16),MESSAGE+9
         BAS   R3,PMSG
         MVI   LC,C'0'             DOUBLE SPACE.
AN10     BAS   R3,PLNE
         MVI   LC,C' '             NORMAL SPACE.
         AP    NLI,ONE
         LA    R7,8(R7)            NEXT ELEMENT ADDRESS.
         BCT   R9,AN9              CONTINUE IF MORE.
         SPACE 2
         MVI   MC,C'1'             SKIP PAGE.
         MVI   MESSAGE,C' '
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   MESSAGE+1(L'MFD50),MFD50
         MVC   MESSAGE+99(L'TIT12),TIT12
         ED    MESSAGE+103(4),NPA
         AP    NPA,ONE
         BAS   R3,PMSG
         MVI   MC,C' '             NORMAL SPACE.
         MVI   MESSAGE+1,C'='
         MVC   MESSAGE+2(L'MFD50-1),MESSAGE+1
         MVC   MESSAGE+99(L'TIT12),MESSAGE+98
         BAS   R3,PMSG
         MVI   MC,C'-'             THREE SPACES.
         MVC   MESSAGE+1(L'MFD50),MESSAGE
         MVC   MESSAGE+9(L'MFD51),MFD51
         BAS   R3,PMSG
         MVI   MC,C' '             NORMAL SPACE.
         MVI   MESSAGE+9,C'-'
         MVC   MESSAGE+10(L'MFD51-1),MESSAGE+9
         MVC   MESSAGE+15(2),MESSAGE
         BAS   R3,PMSG
         MVI   MC,C'0'             DOUBLE SPACE.
         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8
         MVC   MESSAGE+9(L'MFD52),MFD52
         BAS   R3,PMSG
         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8
         MVC   MESSAGE+9(L'MFD53),MFD53
         BAS   R3,PMSG
         MVI   MC,C' '             NORMAL SPACE.
         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8
         MVC   MESSAGE+9(L'MFD54),MFD54
         BAS   R3,PMSG
         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8
         MVC   MESSAGE+9(L'MFD55),MFD55
         BAS   R3,PMSG
         MVI   MC,C'0'             DOUBLE SPACE.
         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8
         MVC   MESSAGE+9(L'MFD56),MFD56
         BAS   R3,PMSG
         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8
         MVC   MESSAGE+9(L'MFD57),MFD57
         BAS   R3,PMSG
         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8
         MVC   MESSAGE+9(L'MFD58),MFD58
         BAS   R3,PMSG
         MVC   MESSAGE+9(L'MESSAGE-9),MESSAGE+8
         MVC   MESSAGE+9(L'MFD59),MFD59
         BAS   R3,PMSG
         SPACE 2
         L     R8,AFMT5            GET FMT5 TABLE ADDRESS.
         LA    R9,NTF5             NR. OF POSSIBLE FMT5 IN TABLE.
         ZAP   NLI,NSLI            FORCE SKIP PAGE.
LF5A     OC    0(L'ADDREC,R8),0(R8)    TEST IF EMPTY,
         BZ    ENDVTA              BRANCH IF YES.
         CP    NLI,FOUR            TEST IF SKIP PAGE REQUESTED,
         BNH   LF5B                BRANCH IF NOT.
         MVI   MC,C'1'             SKIP PAGE.
         MVI   MESSAGE,C' '
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVC   MESSAGE+1(L'VOLSER),VOLSER
         MVC   MESSAGE+L'VOLSER+2(L'MSLF50),MSLF50
         MVC   MESSAGE+99(L'TIT12),TIT12
         ED    MESSAGE+103(4),NPA
         AP    NPA,ONE
         ZAP   NLI,ONE
         BAS   R3,PMSG
         MVI   MC,C' '             NORMAL SPACE.
         MVI   MESSAGE+1,C'='
         MVC   MESSAGE+2(L'VOLSER+L'MSLF50),MESSAGE+1
         MVC   MESSAGE+99(L'TIT12),MESSAGE+98
         BAS   R3,PMSG
LF5B     MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVI   MC,C'0'             DOUBLE SPACE.
         OC    0(L'ADDREC,R8),0(R8)    TEST IF INDEXED VTOC?
         BNO   LF5C                BRANCH IF NOT.
         CP    NLI,ONE             TEST IF SKIP PAGE DONE?
         BNE   LF5D                BRANCH IF NOT.
         MVC   MESSAGE+1(L'MSLF51IX),MSLF51IX
         BAS   R3,PMSG
         B     LF5D
LF5C     MVC   MESSAGE+1(L'MSLF51),MSLF51
         LA    R7,L'ADDREC-5(R8)   CCHHR ADDRESS.
         LA    R2,MESSAGE+L'MSLF51+1
         LA    R1,L'ADDREC-3
         BAS   R10,PRHEX
         MVI   MESSAGE+L'MSLF51+11,C'.'
         BAS   R3,PMSG
LF5D     MVC   MESSAGE+1(4),MESSAGE
         MVC   MESSAGE+5(L'MSLF52),MSLF52
         BAS   R3,PMSG
         MVI   MC,C' '             NORMAL SPACE.
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVI   MESSAGE+5,C'-'
         MVC   MESSAGE+6(5),MESSAGE+5
         BAS   R3,PMSG
         MVC   MESSAGE+5(6),MESSAGE+4   FORMAT 5 DSCB DUMP.
         MVC   MESSAGE+6(L'MSLF53),MSLF53
         MVI   MESSAGE+12,C'-'
         LA    R2,MESSAGE+14
         LA    R1,48
         BAS   R10,PRHEX
         BAS   R3,PMSG
         MVC   MESSAGE+6(L'MSLF54),MSLF54
         LA    R1,48
         BAS   R10,PRHEX
         BAS   R3,PMSG
         MVC   MESSAGE+6(L'MSLF55),MSLF55
         LA    R1,DS5LGTH-96
         BAS   R10,PRHEX
         MVI   MESSAGE+2*(DS5LGTH-96)+14,C' '
         MVC   MESSAGE+2*(DS5LGTH-96)+15(L'MESSAGE-2*(DS5LGTH-96)-15),M1
               ESSAGE+2*(DS5LGTH-96)+14
         BAS   R3,PMSG
         AP    NLI,ONE
         LA    R8,L'ADDREC+DS5LGTH(R8) NEXT FMT5 POINTER.
         BCT   R9,LF5A             CONTINUE.
ENDVTA   MVC   ENDM+10(L'VOLSER),VOLSER
ENDM    WTO    '-        : VTOC ANALYSIS END -',ROUTCDE=2,DESC=7
         B     NOVTA
         SPACE 1
PRDEC    XR    R0,R0               TRANSFORM TRACK ADDRESS TO CCHH.
         L     R1,WORKF
         DR    R0,R8
         STH   R1,WORKF
         STH   R0,WORKF+2
         SPACE 1
DECODE   LH    R0,WORKF            GET CC (DECIMAL PRINT).
         CVD   R0,WORKD
         MVC   0(L'MASK,R2),MASK
         ED    0(L'MASK,R2),WORKD+5
         LH    R0,WORKF+2          GET HH (DECIMAL PRINT).
         CVD   R0,WORKD
         UNPK  6(3,R2),WORKD+6(2)
         OI    8(R2),C'0'
         MVI   6(R2),C','
         MVI   WORKD+7,X'0F'       GET CCHH (HEXADECIMAL PRINT).
         MVO   WORKD+3(5),WORKF(4)
         UNPK  12(9,R2),WORKD+3(5)
         TR    13(8,R2),TRTAB-X'F0'
         MVC   12(4,R2),13(R2)
         MVI   16(R2),C','
         BR    R10                 RETURN.
         SPACE 1
PRHEX    XR    R0,R0               TRANSFORM TO HEXADECIMAL PRINT.
         LR    R14,R1
         LR    R15,R2
PRHEX1   IC    R0,0(R7)
         STC   R0,1(R15)
         NI    1(R15),X'0F'
         SRL   R0,4
         STC   R0,0(R15)
         LA    R7,1(R7)
         LA    R15,2(R15)
         BCT   R14,PRHEX1
         SLL   R1,1
         BCTR  R1,0
         EX    R1,PRHEX2
         BR    R10                 RETURN.
PRHEX2   TR    0(*-*,R2),TRTAB
         SPACE 1
         DROP  R8
         SPACE 2
NOVTA    L     R8,STIOT
         USING TIODSECT,R8
         XR    R7,R7
         IC    R7,TIOELNGH
         AR    R8,R7
         B     NEXTDD
         DROP  R8
         EJECT
SWEND    NOP   EXERR               BRANCH IF ERRORS DETECTED.
SWFE     B     LEAVE
SETCC4   MVI   RCODE+1,4           C.C. = 4.  - - - - - - - - - - - -
LEAVE   $PCLOSE
         LH    R15,RCODE
        $XRET  CC=(R15)
         SPACE 2
PARMERR WTO    'PARM.FIELD ERROR.',ROUTCDE=11,DESC=7
         MVI   RCODE+1,8           C.C. = 8.  - - - - - - - - - - - -
         B     LEAVE
         SPACE 2
EXERR   WTO    '-END- ERROR(S) ON SYSPRINT.',ROUTCDE=11,DESC=7
         MVI   RCODE+1,12          C.C. = 12. - - - - - - - - - - - -
         B     LEAVE
         EJECT
SMSG     STC   R15,MSERR+L'MSERR-9
         NI    MSERR+L'MSERR-9,X'0F'
         SRL   R15,4
         STC   R15,MSERR+L'MSERR-10
         NI    MSERR+L'MSERR-10,X'0F'
         TR    MSERR+L'MSERR-10(2),TRTAB
         LA    R2,MSERRL
         B     PRMSG
NST      LA    R2,MNSTL
         B     PRMSG
NSP      LA    R2,MNSPL
         B     PRMSG
NSTOR    LA    R2,MSTL
PRMSG    MVI   MESSAGE,C' '
         MVC   MESSAGE+1(L'MESSAGE-1),MESSAGE
         MVI   MC,C'1'             SKIP PAGE.
         XR    R1,R1
         IC    R1,0(R2)
         BCTR  R1,0
         EX    R1,MVMSG
         MVI   RCODE+1,16          C.C. = 16. - - - - - - - - - - - -
         BAS   R3,PMSG
         B     LEAVE
MVMSG    MVC   MESSAGE+1(*-*),1(R2)
         EJECT
*        PRINT ROUTINES (SYSPRINT).
*        --------------------------
*
*              R3  = LINK REGISTER.
         SPACE 1
PMSG    $PRINT MC
         B     PRET
PLNE    $PRINT LC
PRET     LTR   R15,R15
         BZR   R3                  NORMAL RETURN.
SWPR     NOPR  R3
SWCL     B     ERET
         TM    SWQR+1,ON
         BO    QECL
        $VTOCSC
         B     ERET
QECL    $VTOCQC
ERET     OC    RCODE,RCODE
         BZ    SETCC4
         B     LEAVE
         EJECT
        LTORG
         SPACE 2
*        CONSTANTS AND WORK-AREAS.
         SPACE 1
ADDREC   DC    0D'0',XL3'0'
CCHHR    DC    XL5'0'
DATAAREA DC    XL140'00'
         SPACE 1
WORKF    DC    F'0'
WORKD    DC    D'0'
EXTCTL   DC    F'0'
NVA      DC    F'0'
NVMX     DC    XL4'7FFFFFFF'
EVEA     DC    A(*-*)
ATIOT    DC    A(*-*)
STIOT    DC    A(*-*)
ASEQCA   DC    A(*-*)
AFMT5    DC    A(*-*)
AFMT13   DC    A(*-*)
ATABLE   DC    A(*-*,*-*)
NMCORE   DC    A(6*1024,1000*1024)
ZEROS    DC    F'0'
DVTYP    DC    5F'0'
DVALT    DC    H'0'
VOLSER   DC    CL6' '
VTDDNM   DC    CL8'0'
IXDSCB   DC    F'0'
IXVIRS   DC    F'0'
FDSCB    DC    H'0'
VFDSCB   DC    H'0'
NRTF13   DC    0H'0',AL2(NTF13*FMTLGTH)
NRTF5    DC    0H'0',AL2(NTF5)
RCODE    DC    H'0'
NULL     DC    H'1'
         SPACE 1
         DC    AL1(L'MC+L'MESSAGE)
MC       DC    CL1' '
MESSAGE  DC    CL131' '
         DC    AL1(L'LC+L'LINE)
LC       DC    CL1' '
LINE     DC    CL131' '
         EJECT
ONE      DC    PL1'+1'
FOUR     DC    PL1'+4'
SEVEN    DC    PL1'+7'
NPA      DC    PL2'+0'
NLI      DC    PL2'+0'
NLMX     DC    PL2'+56'
NSLI     DC    PL2'+999'
MASK     DC    X'402020202120'
RCV      DC    C'RECOVERY'
NLS      DC    C'NOLIST'
VTDD     DC    C'VTDD'
VSO      DC    CL8'VTOCSO'
VSR      DC    CL8'VTOCSR'
VSC      DC    CL8'VTOCSC'
VQO      DC    CL8'VTOCQO'
VQR      DC    CL8'VTOCQR'
VQC      DC    CL8'VTOCQC'
VTOCN    DC    C'V.T.O.C. '
VTI      DC    C'(INDICATORS=  )'
FSN      DC    C'(FREE)'
OV       DC    C'-OV-'
TRTAB    DC    C'0123456789ABCDEF'
MSTL     DC    AL1(L'MST)
MST      DC    C'NO STORAGE AVAILABLE. -ABORT-'
MNSPL    DC    AL1(L'MNSP)
MNSP     DC    C'NOT ENOUGH SPACE AVAILABLE. -ABORT-'
MNSTL    DC    AL1(L'MNST)
MNST     DC    C'NO TABLE SPACE AVAILABLE. -ABORT-'
MSERRL   DC    AL1(L'MSERR)
MSERR    DC    C'XXXXXXXX - ERROR CODE : XX. -EXIT-'
MSIX     DC    C'IXTOFMT5 - REGISTER 0 = XXXXXXXX.'
MSTOV    DC    C'VOLUME VTOC ANALYSIS INCOMPLETE. -TABLE OVERFLOW- ( )'
MSNF4    DC    C'VOLUME ...... : FIRST DSCB NOT TYPE 4. -SKIP-'
MSMF4    DC    C'VOLUME ...... : MULTIPLES DSCB TYPE 4. -SKIP-'
         EJECT
TIT11    DC    C'       - VTOC ANALYSIS.'
TIT12    DC    0CL9' ',C'PAGE',X'40202120',C'.'
UEST     DS    0CL46
TIT2     DC    C' EXTENT LOWER LIMIT.    EXTENT UPPER LIMIT.   EXTENT  1
                EXTENT NAME.'
TIT3     DC    C'  DECIMAL   HEXADEC.     DECIMAL   HEXADEC.   SQ.NO.  1
                (DATA-SET NAME)'
MSF13    DC    C'- UNRESOLVED FORMAT 1-2-3 DSCB(S) ADDRESSES (CCHHR) LI1
               ST.'
MSFE1    DC    C'- VTOC FORMAT 4 DISCREPANCY.'
MSFE21   DC    C'NO. OF AVAILABLE FORMAT 0 DSCB-S IN VTOC (AT X''0032''1
               ) ='
MSFE22   DC    C'), READ COUNT ='
MSFE23   DC    C').'
MSFE31   DC    C'- INDEXED VTOC INFO''S : FREE (FMT 0) DSCB-S ='
MSFE32   DC    C'), FREE VIRS ='
MSEXOV   DC    C'       - EXTENTS OVERLAP DETECTED (SUPPRESS NOLIST OPT1
               ION FOR DETAIL).'
MSUES    DC    C'- VTOC UNAVAILABLE SPACE EXTENTS LIST.'
MUES1    DC    C'REL.TRK.ADDRESS.'
MUES2    DC    C'    HEXADEC.    '
MFD50    DC    C'FORMAT 5 DSCB DESCRIPTION.'
MFD51    DC    C'H.DIS.  CONTENTS / DESCRIPTION.'
MFD52    DC    C' 0000   X''05050505'' = KEY IDENTIFICATION.'
MFD53    DC    C' 0004   +0 - 2 BYTES = RELATIVE TRACK ADDRESS OF FIRST1
                TRACK IN EXTENT.'
MFD54    DC    C'        +2 - 2 BYTES = NO. OF ENTIRELY UNUSED CYLINDER1
               S IN EXTENT.'
MFD55    DC    C'        +4 - 1 BYTE = NO. OF ADDITIONAL UNUSED TRACKS 1
               IN  EXTENT.'
MFD56    DC    C' 0009   7 MORE AVAILABLE EXTENTS.'
MFD57    DC    C' 002C   X''F5'' = FORMAT IDENTIFIER.'
MFD58    DC    C' 002D   18 MORE AVAILABLE EXTENTS.'
MFD59    DC    C' 0087   5 BYTES = DIRECT-ACCESS ADDRESS (CCHHR) OF NEX1
               T FORMAT 5 DSCB.'
MSLF50   DC    C'- VTOC FORMAT 5 DSCB''S HEXADECIMAL DUMP.'
MSLF51   DC    C'FORMAT 5 DSCB - CCHHR = '
MSLF51IX DC    C'INDEXED VTOC INTERFACE FORMAT 5 DSCB(S) RECEIVED :'
MSLF52   DC    C'DISPL.    0 . . . 4 . . . 8 . . . C . . .10 . . .14 . 1
               . .18 . . .1C . . .20 . . .24 . . .28 . . .2C . .2F'
MSLF53   DC    C'0000'
MSLF54   DC    C'0030'
MSLF55   DC    C'0060'
         SPACE 2
         END
