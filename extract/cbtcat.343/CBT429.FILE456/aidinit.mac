AIDI     TITLE 'ACCOUNTING INFORMATION DATA-SET INITIALIZATION.'
AIDINIT  START 0
         SPACE 1
AIDINIT AMODE  24
AIDINIT RMODE  24
         SPACE 1
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* * * * * * * * *                                     * * * * * * * * *
* * * * * * * * *       ACCOUNTING INFORMATION        * * * * * * * * *
* * * * * * * * *                                     * * * * * * * * *
* * * * * * * * *       DATA-SET INITIALIZATION       * * * * * * * * *
* * * * * * * * *                                     * * * * * * * * *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
* AUTHOR :     P.A. MOINIL                                            *
* --------     COMPUTING CENTRE                                       *
*              J.R.C. - ISPRA ESTABLISHMENT                           *
*              21020 ISPRA (VA), ITALY                                *
*                                                                     *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         EJECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                                                                     *
* PURPOSE :    THIS PROGRAM INITIALIZES THE ACCOUNTING INFORMATION    *
* ---------    DATA-SET ACCORDINGLY TO THE DUMMY SECTION DESCRIBED    *
*              BY THE MACRO '$AIRD'.                                  *
*                                                                     *
* CALL OF THE PROGRAM :                                               *
* ---------------------                                               *
*                                                                     *
*        //INACC  EXEC  PGM=AIDINIT,PARM=...(OPTIONAL)...             *
*        //SYSACC   DD  UNIT=...,VOL=SER=...,DSN=...,                 *
*                       SPACE=(TRK,(...),,CONTIG),DISP=(NEW,CATLG)    *
*                              CYL                                    *
*           OR :                                                      *
*                                                                     *
*        //SYSACC   DD  DSN=...,DISP=OLD                              *
*                                    SHR                              *
*        //SYSPRINT DD  SYSOUT=A                                      *
*                                                                     *
*        PARM=DUMP : DUMP REQUESTED WHEN AN ERROR IS DETECTED.        *
*                    IT CAN BE USED TO OBTAIN A DUMP (ABEND U0001)    *
*                    WHEN DEBUGGING THE PROGRAM (SYSUDUMP OR SYSABEND *
*                    DD-CARD NEEDED).                                 *
*                                                                     *
* N.B. - THE KEY (ARGUMENT OR INDEX) LENGTH IS ASSUMED TO BE TWO      *
* ----   BYTES (HALFWORD) LONG, AND MAY OR NOT BE INCLUDED IN THE     *
*        ACCOUNTING INFORMATION RECORD.                               *
*                                                                     *
*      - WHEN ASSIGNING THE DATA-SET SPACE, NO SECONDARY ALLOCATION   *
*        IS ACCEPTED, AND IT MUST BE CATALOGED.                       *
*                                                                     *
*      - IF THE DATA-SET IS OLD, THE PROGRAM REQUESTS A CONFIRM       *
*        REPLY TO THE OPERATOR BEFORE STARTING THE INITIALIZATION     *
*        UNLESS IT IS AN OWNER DATA-SET.                              *
*                                                                     *
*      - IF THE DATA-SET IS OLD AND THE BLOCK-SIZE DOES NOT MATCH     *
*        THE ASSEMBLED ACCOUNTING RECORD LENGTH (MACRO '$AIRD'), THE  *
*        DATA-SET MUST BE DELETED AND THEN REALLOCATED.               *
*                                                                     *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         EJECT
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                                                                     *
* DATA-SET ORGANIZATION :                                             *
* -----------------------                                             *
*                                                                     *
*              THE DATA-SET IS A DIRECT-ACCESS ORGANIZATION, BUT      *
*        DIVIDED IN FOUR DIFFERENT SECTIONS AS DESCRIBED BELOW :      *
*                                                                     *
*        1. THE RECORDS FROM 0 TO 19997 ARE NORMAL DIRECT ACCESS      *
*           CONTAINING THE ACCOUNTING INFORMATION FOR THE             *
*           CORRESPONDING 0001 TO 9999 AUTHORIZATION'S NUMBERS        *
*           AND 0001 TO 9999 PROGRAMMER'S NUMBERS.                    *
*                                                                     *
*        2. THE RECORDS FROM 19998 TO 19998+(N-1) ARE USED TO         *
*           STORE THE KEYS (ARGUMENTS OR INDEXES) TABLE REFERING      *
*           TO THE NEXT SECTION.                                      *
*                                                                     *
*        3. THE RECORDS FROM 19998+N TO END-X (THE END OF THE         *
*           DATA-SET SPACE MINUS THE NUMBER OF RECORDS NECESSARY      *
*           TO THE MAP TABLE) ARE DESTINATED TO OTHER ACCOUNTING      *
*           INFORMATION (I.E. - ACTIVITIES OR CONTRACTS AND           *
*           SERVICES DESCRIPTIONS).                                   *
*                                                                     *
*        4. THE LAST X RECORDS ARE RESERVED TO A BIT MAP TABLE        *
*           NECESSARY TO REPRESENT THE PRESENCE OR ABSENCE OF         *
*           THE CORRESPONDING AUTHORIZATION NUMBER RECORD (SEE        *
*           SECTION 1).                                               *
*                                                                     *
* DATA-SET SEARCH STRATEGY.                                           *
* -------------------------                                           *
*                                                                     *
*              FOR THE KEYS (ARGUMENTS OR INDEXES) FROM 1 TO          *
*        19999 THE PROGRAM ACCESS DIRECTLY THE DATA RECORDS           *
*        (SECTION 1 OF THE DATA-SET), AND FOR KEYS FROM 20000,        *
*        THE PROGRAM SCAN THE KEYS TABLE (SECTION 2 OF THE            *
*        DATA-SET) TO FIND THE CORRESPONDING PHYSICAL ADDRESS         *
*        OF THE DATA RECORDS (SECTION 3 OF THE DATA-SET).             *
*        THE BIT MAP TABLE (SECTION 4 OF THE DATA-SET) IS USED        *
*        TO GAIN TIME WHEN IT IS REQUESTED TO READ THE AUT./          *
*        PRG. NUMBER RECORDS (SECTION 1 OF THE DATA-SET) IN           *
*        A SEQUENTIAL MODE. IT ALLOWS TO SKIP THE UNUSED              *
*        RECORDS (NO DATA) WITHOUT READING IT IN CORE STORAGE.        *
*                                                                     *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         EJECT
        $AIRD
         SPACE 2
        $DEFREG
         EJECT
*---------------------------------------------------------------------*
*        AUTHORITY LEVELS DEFINITIONS.                                *
*---------------------------------------------------------------------*
         SPACE 1
LV12     EQU   12        ADMINISTRATOR CONTROL LEVEL
         SPACE 1
AUT98   $MDL@IX
         SPACE 1
*        MISCELLANEOUS DEFINITIONS.
         SPACE 1
OFF      EQU   X'0F'               NOP OPERATION SWITCH SETTING.
ON       EQU   X'F0'               BRANCH OPERATION SWITCH SETTING.
UCB3DACC EQU   X'20'               DIRECT ACCESS DEVICE TYPE.
         SPACE 2
        PRINT  NOGEN
         SPACE 1
TIODSECT DSECT
        IEFTIOT1
         SPACE 1
JFCDSECT DSECT
        IEFJFCBN LIST=YES
         SPACE 1
DSCDSECT DSECT
        IECSDSL1 (1)
         SPACE 1
        DCBD   DSORG=PS,DEVD=DA
         SPACE 1
AIDINIT  CSECT                     RESTORE ORIGINAL CSECT.
         SPACE 1
        PRINT  GEN
         EJECT
        $XENT  BASE=(R11,R12)
         SPACE 1
         L     R1,0(R1)            PARM. FIELD ADDRESS.
         LH    R2,0(R1)            PARM. FIELD LENGTH.
         LTR   R2,R2
         BNP   NOPARM              BRANCH IF NO PARM. FIELD.
         CH    R2,LDEBUG
         BNE   PARMERR             BRANCH IF INCORRECT KEYWORD LENGTH.
         CLC   2(L'DEBUG,R1),DEBUG
         BNE   PARMERR             BRANCH IF INCORRECT KEYWORD.
         LA    R8,SYSDMP-(DCBDDNAM-IHADCB)   SEARCH SYSUDUMP.
         BAS   R10,STRTN
         B     *+L'*+4             BRANCH DD NOT FOUND.
         B     SETSW
         LA    R8,SYSABD-(DCBDDNAM-IHADCB)   SEARCH SYSABEND.
         BAS   R10,STRTN
         B     ABMS                BRANCH DD NOT FOUND.
SETSW    NI    SWDUMP+1,OFF        SET SWITCH TO NOP.
         SPACE 2
NOPARM  $EACM  REQAUT
         CLI   AUTLVL,LV12
         BL    NOTAUT
        CALL   HRDAY,(TIME,DAY),VL
         LTR   R15,R15
         BNZ   EXIT
         LA    R8,INIT
         BAS   R10,MSRTN
         B     EXIT                ERROR.
         LA    R8,UNDL
         BAS   R10,MSRTN
         B     EX1                 ERROR.
         LA    R8,DTMSG
         BAS   R10,MSRTN
         B     EX1                 ERROR.
         SPACE 1
         LA    R8,DCBCR            SEARCH SYSACC.
         BAS   R10,STRTN
         B     NODD                BRANCH IF NOT FOUND.
         USING IHADCB,R8
        DEVTYPE DCBDDNAM,DVTYP,DEVTAB
         DROP  R8
         CLI   DVTYP+2,UCB3DACC    DIRECT-ACCESS STORAGE?
         BNE   ERUN                BRANCH IF NOT.
        RDJFCB (DCBCR)
         LTR   R15,R15             TEST COMPLETION CODE.
         BNZ   ERJF
         LA    R7,JF
         USING JFCDSECT,R7
         TM    JFCBIND2,JFCNEW     DISP=NEW CODED OR ASSUMED?
         BNO   JL0                 BRANCH IF NOT.
         TM    JFCBTSDM,255-JFCCAT CONTROL SYSACC DD-CARD CODE.
         BNZ   DDMER
JLA      EQU   JFCBLTYP-JFCFCBID
         OC    JFCFCBID(JLA),JFCFCBID
         BNZ   DDMER
JLB      EQU   JFCBCRDT-JFCBOTTR
         OC    JFCBOTTR(JLB),JFCBOTTR
         BNZ   DDMER
JLC      EQU   JFCBIND2-JFCBXPDT
         OC    JFCBXPDT(JLC),JFCBXPDT
         BNZ   DDMER
JLD      EQU   JFCBNVOL-JFCBUFNO
         OC    JFCBUFNO(JLD),JFCBUFNO
         BNZ   DDMER
JLE      EQU   JFCBPQTY-JFCBEXTL
         OC    JFCBEXTL(JLE),JFCBEXTL
         BNZ   DDMER
         OC    JFCBSQTY(L'JFCBSQTY),JFCBSQTY
         BNZ   DDMER
JLF      EQU   JFCBVLCT-JFCBDQTY
         OC    JFCBDQTY(JLF),JFCBDQTY
         BNZ   DDMER
         TM    JFCFLGS1,JFCVRDS    VIO DATA-SET.
         BO    DDMER
         CLI   JFCBCTRI,JFCBCYL+JFCONTIG CONTROL SPACE PARAMETERS.
         BE    JFOK
         CLI   JFCBCTRI,JFCBTRK+JFCONTIG
         BE    JFOK
         B     DDMER
JL0      TM    JFCBIND2,JFCOLD     DISP=OLD OR SHR CODED?
         BZ    DDMER               BRANCH IF NOT.
         TM    JFCBTSDM,255-JFCCAT CONTROL SYSACC DD-CARD CODE.
         BNZ   DDMER
JL1      EQU   JFCBLTYP-JFCFCBID
         OC    JFCFCBID(JL1),JFCFCBID
         BNZ   DDMER
JL2      EQU   JFCBCRDT-JFCBOTTR
         OC    JFCBOTTR(JL2),JFCBOTTR
         BNZ   DDMER
JL3      EQU   JFCBIND2-JFCBXPDT
         OC    JFCBXPDT(JL3),JFCBXPDT
         BNZ   DDMER
JL4      EQU   JFCBNVOL-JFCBUFNO
         OC    JFCBUFNO(JL4),JFCBUFNO
         BNZ   DDMER
JL5      EQU   JFCBVLCT-JFCBPQTY
         OC    JFCBPQTY(JL5),JFCBPQTY
         BNZ   DDMER
JFOK     CLI   JFCBVLCT,X'01'
         BNE   DDMER
         CLI   JFCBLTYP,JFCSL
         BNE   DDMER
         CLI   JFCBNVOL,X'01'
         BNE   DDMER
         CLI   JFCBSPTN,X'00'
         BNE   DDMER
         MVC   VOLNUM(L'VOLNUM),JFCBVOLS
         MVC   DSNM(L'JFCBDSNM),JFCBDSNM
         MVC   DSNMSGN(L'DSNM),DSNM
         LA    R8,DSNMSGN+L'DSNM-1
         CLI   0(R8),C' '
         BNE   *+L'*+4
         BCT   R8,*-8
         MVI   1(R8),C'.'
         LA    R8,DSNMSG
         BAS   R10,MSRTN
         B     EX1                 ERROR.
         MVC   VOLMSGN(L'VOLNUM),VOLNUM
         LA    R8,VOLMSG
         BAS   R10,MSRTN
         B     EX1                 ERROR.
         TM    JFCBTSDM,JFCCAT     IS DATA-SET CATALOGED?
         BO    LOCDS               BRANCH IF YES.
         TM    JFCBIND2,JFCNEW     IF NOT CATALOGED, IS IT NEW?
         BO    OBTDS               BRANCH IF YES.
         B     CATERR
         DROP  R7
LOCDS   LOCATE CVLIST
         LTR   R15,R15             TEST COMPLETION CODE.
         BNZ   LOCERR
         CLC   VOLNUM(L'VOLNUM),LOCAREA+6 VOLUME MATCH?
         BNE   VOLERR              BRANCH IF NOT.
OBTDS   OBTAIN DSCBAR
         LTR   R15,R15             TEST COMPLETION CODE.
         BZ    DSCBCTL
OBTERR   CVD   R15,WORKD
         UNPK  OBMSG2(2),WORKD+6(2)
         OI    OBMSG2+1,C'0'
         LA    R8,OBMSG
         B     SDMSG
LOCERR   MVC   OBMSG1+6(L'LCMSG),LCMSG
         B     OBTERR
DSCBCTL  LA    R6,WORKAREA-L'DS1DSNAM   CONTROL THE DSCB'S DEFINITIONS.
         USING DSCDSECT,R6
         LA    R5,9
         CLC   DS1VOLSQ(L'DS1VOLSQ),ONE
         BNE   ERRDS               ERR. 9.
         BCTR  R5,0
         CLI   DS1NOEPV,X'01'
         BNE   ERRDS               ERR. 8.
         BCTR  R5,0
         CLI   DS1EXT1+1,X'00'
         BNE   ERRDS               ERR. 7.
         BCTR  R5,0
         CLC   DS1SCALO+1(L'DS1SCALO-1),ZEROS
         BNE   ERRDS               ERR. 6.
         BCTR  R5,0
         CLI   DS1KEYL,X'00'
         BNE   ERRDS               ERR. 5.
         BCTR  R5,0
         CLC   DS1RKP(L'DS1RKP),ZEROS
         BNE   ERRDS               ERR. 4.
         BCTR  R5,0
         CLC   DS1DSORG(L'DS1DSORG),ZEROS
         BE    RFM
         CLC   DS1DSORG(L'DS1DSORG),DAORG
         BNE   ERRDS               ERR. 3.
RFM      BCTR  R5,0
         CLI   DS1RECFM,X'00'
         BE    BLKL
         CLI   DS1RECFM,DCBRECF
         BNE   ERRDS               ERR. 2.
BLKL     BCTR  R5,0
         CLC   DS1BLKL(L'DS1BLKL),ZEROS
         BE    LRECL
         NI    SWT+1,OFF           SET SWITCH TO NOP.
         CLC   DS1BLKL(L'DS1BLKL),RCL
         BNE   ERRDS               ERR. 1.
LRECL    BCTR  R5,0
         CLC   DS1LRECL(L'DS1LRECL),ZEROS
         BE    SWT
         NI    SWT+1,OFF           SET SWITCH TO NOP.
         CLC   DS1LRECL(L'DS1LRECL),RCL
         BE    SWT
ERRDS    SLL   R5,3
         LA    R5,TABM(R5)
         MVC   DSEMD(L'TABM),0(R5)
         LA    R8,DSEM
         B     SDMSG
SWT      B     DSOK
         MVC   AUTLVL+L'AUTLVL+8(8),=CL8' '
         LA    R1,DS1DSNAM         CHECK DATA-SET OWNER.
         LA    R0,8
         LA    R15,AUTLVL+L'AUTLVL+8
SCDSN    CLI   0(R1),C'.'
         BE    TSDSN
         CLI   0(R1),C' '
         BE    TSDSN
         MVC   0(1,R15),0(R1)
         LA    R1,1(R1)
         LA    R15,1(R15)
         BCT   R0,SCDSN
TSDSN    CLC   AUTLVL+L'AUTLVL(8),AUTLVL+L'AUTLVL+8
         BE    DSOK
REQ     WTOR   'CONFIRM DATA-SET INITIALIZATION(YES/NO)',              1
               RAREA,L'RAREA,RECB,ROUTCDE=11,DESC=7
RPLY    WAIT   ECB=RECB            WAIT OPERATOR REPLY.
         CLC   RAREA(L'RYES),RYES
         BE    DSOK
         CLC   RAREA(L'RNO),RNO
         BNE   RESPY
         LA    R8,CMS
         B     SDMSG
RESPY    XC    RAREA(L'RAREA),RAREA     CLEAR REPLY AREA.
         XC    RECB(L'RECB),RECB   CLEAR ECB.
        WTOR   'SYNTAX ERROR -- RESPECIFY OPTION',                     1
               RAREA,L'RAREA,RECB,ROUTCDE=11,DESC=7
         B     RPLY
DSOK     XR    R2,R2
         IC    R2,DVTYP+3          GET UNIT TYPE.
         LH    R3,RCL              UNKEYED DATA BLOCK LENGTH.
         ICM   R3,B'1000',ONE+L'ONE-1
        TRKCALC FUNCTN=TRKCAP,TYPE=(R2),RKDD=(R3),REGSAVE=YES
         LTR   R15,R15             DOES RECORD FIT ON TRACK?
         BNZ   ERCL                BRANCH IF NOT.
         LR    R5,R0               NO. OF BLOCKS/TRACK.
         MVC   WORKD(L'DS1EXT1-2),DS1EXT1+2
         DROP  R6
         L     R1,WORKD+4          UPPER LIMIT(CCHH).
         S     R1,WORKD            LOWER LIMIT(CCHH).
         ST    R1,WORKD
         LH    R1,WORKD            GET NUMBER OF CYLINDERS.
         LTR   R1,R1
         BZ    *+L'*+4
         MH    R1,DVTYP+10         TRANSFORM CYL. IN TRACKS.
         LH    R2,WORKD+2          GET NUMBER OF TRACKS.
         LA    R3,1(R1,R2)         EXTENT TOTAL NR. OF TRACKS.
         XR    R2,R2
         MR    R2,R5               EXTENT TOTAL NR. OF BLOCKS.
         LR    R5,R3               SAVE ADDRESS FIRST OUT OF DATA-SET.
         LH    R4,RCL
         LH    R3,NAUT             GET NUMBER OF AUT. NR.
         AH    R3,NPRG             ADD NUMBER OF PRG. NR.
         ST    R3,NBT
         SRL   R3,3                COMPUTE NR. OF BYTES FOR MAP TABLE.
         TM    NBT+3,X'07'
         BZ    *+L'*+4
         AH    R3,ONE
         XR    R2,R2               COMPUTE NR. OF RECORDS FOR MAP TABLE
         DR    R2,R4
         LTR   R2,R2
         BZ    *+L'*+4
         AH    R3,ONE
         ST    R3,NBT              NR. OF MAP TABLE RECORDS.
         LR    R3,R5               TOTAL NR. OF DATA-SET RECORDS.
         S     R3,NBT              SUBTRACT NR. OF MAP TABLE RECORDS.
         SH    R3,NAUT             SUBTRACT NR. OF AUT.
         SH    R3,NPRG             SUBTRACT NR. OF PRG.
         BNP   ERDSAL
         SRL   R4,1                NR. OF ARG. IN 1 TABLE RECORD.
         XR    R1,R1
         LR    R2,R1
SNRT     CLR   R2,R3               COMPUTE TABLE RECORDS NUMBER.
         BNL   FNRT
         LA    R1,1(0,R1)
         AR    R2,R4
         BCT   R3,SNRT
FNRT     ST    R1,NRT              NR. OF TABLE RECORDS.
         ST    R3,NARG             MAX. NR. OF ARG. RECORDS.
         USING JFCDSECT,R7
         MVC   JFCDSORG(L'DAORG),DAORG  PREPARE JFCB.
         MVI   JFCRECFM,DCBRECF
         MVC   JFCBLKSI(L'RCL),RCL
         MVC   JFCLRECL(L'RCL),RCL
         OI    JFCBTSDM,JFCNWRIT   INHIBIT WRITE BACK.
         DROP  R7
         MVC   RNME(L'VOLNUM),VOLNUM
         LA    R1,RNME+L'VOLNUM-1
         CLI   0(R1),C' '
         BNE   *+L'*+8
         MVI   0(R1),C'.'
         BCT   R1,*-12
         LA    R1,DSNM+L'DSNM-1
         LA    R2,L'RNME+L'DSNM
         CLI   0(R1),C' '
         BNE   *+L'*+6
         BCTR  R1,0
         BCT   R2,*-10
         STH   R2,RNMEL
        ENQ    (QNME,RNME,E,(R2),SYSTEMS),RET=USE
         LTR   R15,R15             AVAILABLE?
         BNZ   ERAV                BRANCH IF NOT.
        OPEN   (DCBCR,(OUTPUT)),TYPE=J
         TM    DCBCR+DCBOFLGS-IHADCB,DCBOFOPN SUCCESSFULLY OPENED?
         BZ    EROP                BRANCH IF NOT.
         XR    R4,R4               FIRST RECORD ADDRESS.
WCRT     LA    R1,DECBCR
        WRITE  (1),SF,DCBCR,RECAI,MF=E
         STC   R15,WCCM+L'WCCM-2   STORE CC FOR EVENTUAL DIAGNOSE.
         SRL   R15,4
         STC   R15,WCCM+L'WCCM-3
        CHECK  DECBCR
SWW      B     CROK
         LA    R8,MESSAGE
         BAS   R10,MSRTN           PRINT ERROR MESSAGE.
         B     EX2                 ERROR.
         B     EX2
CROK     LA    R4,1(0,R4)          BUMP RECORD ADDRESSES.
         CLR   R4,R5               CONTROL END.
         BL    WCRT
         SPACE 2
         BAS   R10,CLERR
         CVD   R5,WORKD
         ED    ENDT72(L'ENDT72),WORKD+5
         LA    R5,AUTLGTH
         CVD   R5,WORKD
         ED    ENDT12(L'ENDT12),WORKD+6
         LA    R8,ENDM1
         BAS   R10,MSRTN
         B     EX1                 ERROR.
         LA    R8,ENDM2
         BAS   R10,MSRTN
         B     EX1                 ERROR.
         LH    R5,NAUT
         CVD   R5,WORKD
         ED    ENDT3A2(L'ENDT3A2),WORKD+5
         LA    R8,ENDM3A
         BAS   R10,MSRTN
         B     EX1                 ERROR.
         LH    R5,NPRG
         CVD   R5,WORKD
         ED    ENDT3B2(L'ENDT3B2),WORKD+5
         LA    R8,ENDM3B
         BAS   R10,MSRTN
         B     EX1                 ERROR.
         L     R5,NARG
         CVD   R5,WORKD
         ED    ENDT42(L'ENDT42),WORKD+5
         LA    R8,ENDM4
         BAS   R10,MSRTN
         B     EX1                 ERROR.
         L     R5,NRT
         CVD   R5,WORKD
         ED    ENDT52(L'ENDT52),WORKD+5
         LA    R8,ENDM5
         BAS   R10,MSRTN
         B     EX1                 ERROR.
         L     R5,NBT
         CVD   R5,WORKD
         ED    ENDT62(L'ENDT62),WORKD+5
         LA    R8,ENDM6
         BAS   R10,MSRTN
         B     EX1                 ERROR.
         LA    R8,ENDM7
         BAS   R10,MSRTN
         B     EX1                 ERROR.
         SPACE 2
        $PCLOSE
         SPACE 1
EXIT    $XRET  CC=(R15)
         SPACE 2
*        ERRORS - EXECUTION TERMINATED.
         SPACE 1
PARMERR WTO    'PARM.FIELD ERROR - EXIT -',ROUTCDE=11,DESC=7
         B     SETCC
ABMS    WTO    'SYSUDUMP OR SYSABEND DD MISSING - EXIT -',             1
               ROUTCDE=11,DESC=7
         B     SETCC
NOTAUT  WTO    'UNAUTHORIZED ACCESS TO THIS PROGRAM - EXIT -',         1
               ROUTCDE=11,DESC=7
         B     SETCC
         SPACE 1
EX2      BAS   R10,CLERR
         B     EX1
ERAV     LA    R8,AVM
         B     SDMSG
EROP     LA    R8,OPM
         B     SDMSG
ERCL     LA    R8,MERC
         B     SDMSG
CATERR   LA    R8,CATMSG
         B     SDMSG
VOLERR   MVC   VLMV(L'VOLNUM),LOCAREA+6
         LA    R8,VLM
         B     SDMSG
DDMER    LA    R8,DDMO
         B     SDMSG
ERDSAL   LA    R8,DSALM
         B     SDMSG
ERJF     LA    R8,JPM
         B     SDMSG
ERUN     LA    R8,UPM
         B     SDMSG
NODD     LA    R8,SPM
SDMSG    BAS   R10,MSRTN           SEND MESSAGE.
         NOP   0                   ERROR.
EX1     $PCLOSE
SETCC    LA    R15,16              C.C. = 16.
SWDUMP   B     EXIT
        ABEND  1,DUMP              DEBUG OPTION SELECTED BY PARM.FIELD.
         SPACE 1
CLERR   CLOSE  DCBCR
         LH    R2,RNMEL
        DEQ    (QNME,RNME,(R2),SYSTEMS)
         BR    R10
         EJECT
*        SCAN TIOT ROUTINE.
*        ------------------
*
*        R1  = WORK REGISTER.
*        R2  = DD ENTRY ADDRESS (NORMAL RETURN).
*        R8  = DCB ADDRESS (SUPPLIED BY CALLER).
*        R10 = LINK REGISTER.
*
*        RETURN +0 = ERROR(NO DD ENTRY).
*               +4 = NORMAL.
         SPACE 1
         USING IHADCB,R8
         USING TIODSECT,R2
STRTN    OC    ATIOT,ATIOT         TIOT ADDRESS KNOWED?
         BNZ   STSCN               BRANCH IF YES.
        EXTRACT ATIOT,'S',FIELDS=(TIOT)
STSCN    L     R2,ATIOT            GET TIOT ADDRESS.
STLOOP   CLC   TIOELNGH(L'ZEROS),ZEROS  END OF TIOT?
         BER   R10                 ERROR RETURN IF YES.
         CLC   TIOEDDNM(L'DCBDDNAM),DCBDDNAM THIS DD-NAME?
         BE    4(R10)              NORMAL RETURN IF YES.
         XR    R1,R1
         IC    R1,TIOELNGH
         ALR   R2,R1               NEXT DD ENTRY.
         B     STLOOP
         DROP  R2,R8
         EJECT
*        PRINT ROUTINE (SYSPRINT).
*        -------------------------
*
*        R1  = WORK REGISTER.
*        R8  = ADDRESS OF LINE (PRECEEDED BY ONE BYTE LENGTH).
*        R10 = LINK REGISTER.
*
*        RETURN +0 = ERROR.
*               +4 = NORMAL.
         SPACE 1
MSRTN   $PRINT (R8)
         LTR   R15,R15
         BNZR  R10                 ERROR RETURN.
         B     4(,R10)             NORMAL RETURN.
         EJECT
*        ERROR ANALYSIS ROUTINE (DCBCR).
         SPACE 1
CERR    SYNADAF   ACSMETH=BSAM
         CLI   69(R1),C'*'         UNSIGNIFICANT MESSAGE?
         BE    SYNAD2              BRANCH IF YES.
         CLI   8(R1),C' '          BINARY INFORMATIONS?
         BE    SYNAD1              BRANCH IF NOT.
         UNPK  56(7,R1),9(4,R1)
         TR    56(6,R1),TRTAB-X'F0'
         MVI   62(R1),C','
         UNPK  63(5,R1),12(3,R1)
         TR    63(4,R1),TRTAB-X'F0'
         MVI   67(R1),C','
         B     SYNAD2
SYNAD1   MVC   56(12,R1),8(R1)     MOVE BLANKS.
SYNAD2   MVI   MESSAGE+1,C' '
         MVC   MESSAGE+2(L'MESSAGE-2),MESSAGE+1
         MVI   MESSAGE,C'0'        DOUBLE SPACE.
         MVC   MESSAGE+2(L'WRM),WRM
         MVC   MESSAGE+L'WRM+2(L'VOLNUM),VOLNUM
         MVI   MESSAGE+L'WRM+L'VOLNUM+3,C'-'
         CLI   69(R1),C'*'         UNSIGNIFICANT MESSAGE?
         BE    SYNAD3              BRANCH IF YES.
         MVC   MESSAGE+L'WRM+L'VOLNUM+5(72),56(R1)
SYNAD3   NC    WCCM+L'WCCM-3(L'HEXMSK),HEXMSK
         TR    WCCM+L'WCCM-3(2),TRTAB
         MVC   MESSAGE+L'WRM+L'VOLNUM+78(L'WCCM),WCCM
        SYNADRLS
         NI    SWW+1,OFF           SET SWITCH TO NOP.
         BR    R14
         SPACE 1
         LTORG
         EJECT
*        CONSTANTS AND WORK-AREAS.
         SPACE 1
WORKD    DC    D'0'
LOCAREA  DC    0D'0',XL120'00'     OVERLAP ON WORKAREA.
WORKAREA DC    0D'0',XL140'00',XL5'00',XL3'00'
DVTYP    DC    5F'0'
ATIOT    DC    A(*-*)
ZEROS    DC    F'0'
RECB     DC    F'0'
NRT      DC    F'0'
NARG     DC    F'0'
NBT      DC    F'0'
REQAUT   DC    0F'0',BL1'00010000',AL3(MDL@IX),AL4(AUTLVL)
JOBFILE  DC    0F'0',XL1'87',AL3(JF)
JF       DC    0F'0',XL176'00'
CVLIST  CAMLST NAME,DSNM,,LOCAREA
DSCBAR  CAMLST SEARCH,DSNM,VOLNUM,WORKAREA
RAREA    DC    XL3'00',X'00'
QNME     DC    CL8'EURACCNT'
RNME     DC    CL8'........'
DSNM     DC    CL44' '
VOLNUM   DC    CL6' '
         DC    AL1(L'MESSAGE)
MESSAGE  DC    CL133' '
ONE      DC    H'1'
RNMEL    DC    H'0'
NAUT     DC    0H'0',AL2(NAUTNO)
NPRG     DC    0H'0',AL2(NPRGNO)
LDEBUG   DC    0H'0',AL2(DEBUGL)
DAORG    DC    0H'0',AL1(DCBDSGDA,0)
RCL      DC    0H'0',AL2(AUTLGTH)
HEXMSK   DC    XL2'0F0F'
TRTAB    DC    C'0123456789ABCDEF'
SYSDMP   DC    CL8'SYSUDUMP'
SYSABD   DC    CL8'SYSABEND'
DEBUG    DC    C'DUMP'
DEBUGL   EQU   *-DEBUG
RNO      DC    C'NO'
RYES     DC    C'YES'
AUTLVL   DC    XL1'0',CL16' '
         DC    AL1(L'INIT)
INIT     DC    C'1     ACCOUNTING DATA-SET INITIALIZATION.'
         DC    AL1(L'UNDL)
UNDL     DC    C'      -----------------------------------'
         DC    AL1(L'DTMSG+L'DAY+L'TIME)
DTMSG    DC    C'0          DATE : '
DAY      DC    C'        , TIME : '
TIME     DC    C'        .'
WRM      DC    C'I/O ERROR ON '
WCCM     DC    C'(WRITE CC =   )'
         DC    AL1(L'SPM)
SPM      DC    C'0     -SYSACC- DD MISSING. -EXIT-'
         DC    AL1(L'AVM)
AVM      DC    C'0     -SYSACC- ENQ IN USE. -EXIT-'
         DC    AL1(L'OPM)
OPM      DC    C'0     -SYSACC- OPEN ERROR. -EXIT-'
         DC    AL1(L'UPM)
UPM      DC    C'0     -SYSACC- UNIT ERROR. -EXIT-'
         DC    AL1(L'JPM)
JPM      DC    C'0     -SYSACC- JFCB ERROR. -EXIT-'
         DC    AL1(L'CATMSG)
CATMSG   DC    C'0     -SYSACC- DATA-SET MUST BE CATALOGED. -EXIT-'
LCMSG    DC    C'LOCATE'
         DC    AL1(L'OBMSG1+L'OBMSG2)
OBMSG    EQU   *
OBMSG1   DC    C'0     OBTAIN CC = '
OBMSG2   DC    C'   WHILE PROCESSING -SYSACC- VOLUME. -EXIT-'
         DC    AL1(L'DSEM+L'DSEMD)
DSEM     DC    C'0     -SYSACC- DSCB FORMAT 1 ERROR DETECTED('
DSEMD    DC    C'        ). -EXIT-'
         DC    AL1(L'DDMO)
DDMO     DC    C'0     -SYSACC- DD-CARD INCORRECTLY CODED. -EXIT-'
         DC    AL1(L'MERC)
MERC     DC    C'0     -SYSACC- DATA BLOCK EXCEEDS TRACK CAPACITY. -EXI1
               T-'
         DC    AL1(L'DSALM)
DSALM    DC    C'0     -SYSACC- DATA-SET SPACE TOO SHORT. -EXIT-'
         DC    AL1(L'CMS)
CMS      DC    C'0     DATA-SET INITIALIZATION CANCELED BY OPERATOR RES1
               PONSE. -EXIT-'
         DC    AL1(L'DSNMSG+L'DSNMSGN)
DSNMSG   DC    C'0          DATA-SET NAME : '
DSNMSGN  DC    CL45' '
         DC    AL1(L'VOLMSG+L'VOLMSGN)
VOLMSG   DC    C'0          VOLUME SERIAL NUMBER : '
VOLMSGN  DC    C'      .'
         DC    AL1(L'VLM+L'VLMV)
VLM      DC    C'0     CATALOGED VOLUME ('
VLMV     DC    C'      ) DOES NOT AGREE WITH DD-CARD. -EXIT-'
         DC    AL1(L'ENDT11+L'ENDT12+L'ENDT13)
ENDM1    EQU   *
ENDT11   DC    C'0          ORGANIZATION : DA, RECORD LENGTH :'
ENDT12   DC    X'40202120'
ENDT13   DC    C'.'
         DC    AL1(L'ENDT21)
ENDM2    EQU   *
ENDT21   DC    C'0          DATA-SET IS INITIALIZED AS FOLLOWS :'
         DC    AL1(L'ENDT3A1+L'ENDT3A2+L'ENDT3A3)
ENDM3A   EQU   *
ENDT3A1  DC    C'0               '
ENDT3A2  DC    X'402020202120'
ENDT3A3  DC    C' AUT. RECORDS,'
         DC    AL1(L'ENDT3B1+L'ENDT3B2+L'ENDT3B3)
ENDM3B   EQU   *
ENDT3B1  DC    C'                '
ENDT3B2  DC    X'402020202120'
ENDT3B3  DC    C' PRG. RECORDS,'
         DC    AL1(L'ENDT41+L'ENDT42+L'ENDT43)
ENDM4    EQU   *
ENDT41   DC    C'                '
ENDT42   DC    X'402020202120'
ENDT43   DC    C' ARG. RECORDS (MAXIMUM AVAILABLE),'
         DC    AL1(L'ENDT51+L'ENDT52+L'ENDT53)
ENDM5    EQU   *
ENDT51   DC    C'                '
ENDT52   DC    X'402020202120'
ENDT53   DC    C' ARG. TABLE RECORDS,'
         DC    AL1(L'ENDT61+L'ENDT62+L'ENDT63)
ENDM6    EQU   *
ENDT61   DC    C'                '
ENDT62   DC    X'402020202120'
ENDT63   DC    C' MAP TABLE RECORDS.'
         DC    AL1(L'ENDT71+L'ENDT72+L'ENDT73)
ENDM7    EQU   *
ENDT71   DC    C'0          TOTAL'
ENDT72   DC    X'402020202120'
ENDT73   DC    C' RECORDS.'
         SPACE 1
TABM     DC    CL8'DS1LRECL'       0.
         DC    CL8'DS1BLKL '       1.
         DC    CL8'DS1RECFM'       2.
         DC    CL8'DS1DSORG'       3.
         DC    CL8'DS1RKP  '       4.
         DC    CL8'DS1KEYL '       5.
         DC    CL8'DS1SCALO'       6.
         DC    CL8'DS1EXT1 '       7.
         DC    CL8'DS1NOEPV'       8.
         DC    CL8'DS1VOLSQ'       9.
         EJECT
DCBCR   DCB    DSORG=PS,DEVD=DA,MACRF=WL,EXLST=JOBFILE,SYNAD=CERR,     1
               DDNAME=SYSACC
         SPACE 2
        WRITE  DECBCR,SF,MF=L
         SPACE 2
RECAI    DC    (AUTLGTH)X'0'       RECORD AREA.
         SPACE 2
         END
