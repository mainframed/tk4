PDSP     TITLE 'PDS DIRECTORY CLEANUP.'
PDSPURGE START 0
         SPACE 1
* PURPOSE :    PROGRAM TO PURGE ALL MEMBERS FROM THE DIRECTORY OF
* ---------    PARTITIONED DATA-SETS (DSORG=PO).
*              USE A DD-CARD WITH A DDNAME IN THE FORM @....... FOR
*              EACH PARTITIONED DATA-SET WHICH DIRECTORY IS TO BE
*              CLEARED.
*
* CALL OF THE PROGRAM :
* ---------------------
*
*        //CLEAN  EXEC PGM=PDSPURGE
*        //@...     DD --- --- --- --- --- --- --- ---
*        //@...     DD --- ANY NUMBER OF DD-CARDS. ---
*        //@...     DD --- --- --- --- --- --- --- ---
*        //SYSPRINT DD SYSOUT=A
         EJECT
PDSPURGE AMODE  24
PDSPURGE RMODE  24
         SPACE 2
        $DEFREG
         EJECT
*---------------------------------------------------------------------*
*        INITIALIZE PROGRAM.                                          *
*---------------------------------------------------------------------*
         SPACE 1
         $XENT BASE=R10            PDS DIRECTORY PURGE PROGRAM.
         SPACE 1
        EXTRACT TIOTADDR,,FIELDS=(TIOT) GET THE TIOT ADDRESS.
         L     R11,TIOTADDR        LOAD THE ADDRESS OF THE TIOT.
         SPACE 1
*---------------------------------------------------------------------*
*        SCAN THE TIOT ENTRIES FOR A DATA-SET TO BE PURGED.           *
*---------------------------------------------------------------------*
         SPACE 1
         USING TIODSECT,R11        ESTABLISH ADDRESSABILITY.
TIOTCHK  CLI   TIOELNGH,0          ZERO LENGTH ENTRY?
         BE    EXIT                IF SO, NO MORE ENTRIES, EXIT.
         CLI   TIOEDDNM,C'@'       IS THIS ONE OF THE PURGE DDNAME?
         BE    PURGE               BRANCH IF IT IS.
NEXTTIOT XR    R0,R0               CLEAR R0 (WORK REGISTER).
         IC    R0,TIOELNGH         LOAD LENGTH OF THIS TIOT ENTRY.
         ALR   R11,R0              ADD IT TO THE TIOT TABLE POINTER.
         B     TIOTCHK             TRY NEXT ENTRY.
         DROP  R11                 KILL ADDRESSABILITY.
         SPACE 1
*---------------------------------------------------------------------*
*        RETURN TO SYSTEM AT END OF JOB.                              *
*---------------------------------------------------------------------*
         SPACE 1
EXIT     CP    NDS,=PL1'+0'
         BE    EXNP
         ED    DNDS,NDS
        $PRINT ENDPR
         B     SETRC
EXNP    $PRINT ENDNP
SETRC    LR    R9,R15              SET LAST R.C.
LEAVE   $PCLOSE
        $XRET  CC=(R9)
         SPACE 1
*---------------------------------------------------------------------*
*        OPEN DCB OF PDS TO BE PURGED.                                *
*---------------------------------------------------------------------*
         SPACE 1
         USING TIODSECT,R11        ESTABLISH ADDRESSABILITY.
PURGE    LA    R12,PDS             ADDRESS OF DCB.
         USING IHADCB,R12          ESTABLISH ADDRESSABILITY.
         MVC   DCBDDNAM,TIOEDDNM   MOVE DDNAME TO DCB.
         MVC   DDNAME,TIOEDDNM     PUT NAME INTO MESSAGE.
         DROP  R11                 KILL ADDRESSABILITY.
        RDJFCB (PDS)               READ JFCB TO GET DSNAME & VOLSER.
        DEVTYPE DCBDDNAM,AREA,DEVTAB,RPS     GET ALL DATA.
         MVC   DSNAME,PDSARE       DSNAME OF DATA-SET.
         MVC   VOLSER,PDSARE+118   VOL=SER OF DATA-SET.
        OPEN   (PDS,OUTPUT)        OPEN THIS DCB.
         TM    DCBOFLGS,DCBOFOPN   WAS THE DATA-SET SUCESSFULLY OPENED?
         BO    OPEN1               BRANCH IF IT WAS.
         MVC   OPERRD,DDNAME       ERROR MESSAGE.
         MVC   OPERRV,VOLSER
         MVC   OPERRN,DSNAME
        $PRINT OPERR
         B     TNEXT
OPEN1    TM    DCBDSORG,DCBDSGPO   IS THE DATA-SET PARTITIONED?
         BO    OPEN2               BRANCH IF YES.
         MVC   NPOD,DDNAME         ERROR MESSAGE.
         MVC   NPOV,VOLSER
         MVC   NPON,DSNAME
        $PRINT NPO
        $PCLOSE
         ABEND 013,DUMP ---------> ABORT PROGRAM. - - - - - - - - - - -
         SPACE 1
*---------------------------------------------------------------------*
*        CALCULATE THE 'MBBCCHHR' OF THE FIRST DIRECTORY BLOCK.       *
*---------------------------------------------------------------------*
         SPACE 1
OPEN2    STM   R10,R13,CNVTSV      SAVE IMPORTANT REGISTERS.
         LA    R0,X'00000100'      LOAD THE TTRN 00000100.
         L     R1,DCBDEBAD         LOAD THE ADDRESS OF THE DEB.
         LA    R2,PDSSEEK          LOAD THE ADDRESS OF THE OUTPUT AREA.
         L     R15,CVTPTR          SET UP ADDRESS OF CVT.
         USING CVT,R15
         L     R15,CVTPCNVT        LOAD THE ADDRESS OF 'CVTPCNVT'.
         DROP  R15
         BASR  R14,R15             CALCULATE 'MBBCCHHR' FROM 'TTRN'.
         DROP  R10
         USING *,R14
         LM    R10,R13,CNVTSV      RESTORE REGISTERS.
         DROP  R14
         USING PDSPURGE,R10
         SPACE 1
*---------------------------------------------------------------------*
*        EXECUTE CHANNEL PROGRAM TO RE-WRITE PDS DIRECTORY.           *
*---------------------------------------------------------------------*
         SPACE 1
         MVC   DREWRITE,EFFS
         B     REXCPIT
NEXTBLOK MVC   PDSSEEK+3(5),DIRWORK
         XC    DREWRITE,DREWRITE
REXCPIT EXCP   PDSIOB              RE-WRITE DIRECTORY.
        WAIT   ECB=PDSECB          MAKE SURE IT COMPLETES.
         CLI   PDSECB,IOGOOD
         BNE   CLIIOER
         AP    NEXCP,=PL1'+1'
         B     NEXTBLOK
CLIIOER  CLI   PDSECB,IOERROR      INSURE THAT WE GOT AN I/O ERROR?
         BE    EXCP1               BRANCH IF IT WAS.
EABND   ABEND  001,DUMP ---------> ERROR DURING SIO EXT REQUEST.  - - -
EXCP1    CLI   PDSIOB+IOBUSTAT,IOBUSB4+IOBUSB5+IOBUSB7 CE/DE/UE?
         BNE   EABND               SHOULD HAVE GOTTEN UNIT EXCEPTION.
         TM    PDSIOB+IOBCSTAT,IOBCSBXX INSURE WE DON'T HAVE OTHERS?
         BNZ   EABND               BRANCH IF NOT WHAT WE EXPECT.
         SPACE 1
*---------------------------------------------------------------------*
*        PERFORM HOUSEKEEPING AT END OF DIRECTORY REWRITE.            *
*        CALCULATE THE TRACK BALANCE OF THE LAST DIRECTORY TRACK.     *
*---------------------------------------------------------------------*
         SPACE 1
         XC    DCBFDAD,DCBFDAD     CLEAR THE 'MBBCCHHR' FIELD IN DCB.
         MVC   DCBFDAD+3(5),DIRWORK     INSERT DIRECTORY EOF 'CCHHR'.
         LA    R7,AREA             LOAD ADDRESS OF THE DVAT TABLE.
         USING DVAREA,R7           ESTABLISH ADDRESSABILITY.
         XR    R2,R2
         IC    R2,DVAUNIT          GET UNIT TYPE.
         XR    R3,R3
         ICM   R3,B'0011',DVATRKLN GET LENGTH OF A TRACK.
         L     R4,RKDD             GET DIR. KEY AND DIR. BLOCK.
         BAS   R8,CMRTN
         XR    R4,R4
         IC    R4,DCBFDAD+7        GET RECORD NO. LAST READ.
         BCTR  R4,0                BACK IT OFF THE EOF RECORD.
         LR    R5,R3               GET LENGTH OF A TRACK.
         SR    R5,R0               COMPUTE RECORD BALANCE.
         MR    R4,R4               TOTAL DIR. RECORDS BALANCE.
         L     R4,RKDDEOF          EOF COUNT.
         LA    R8,CMPT
CMRTN   TRKCALC FUNCTN=TRKBAL,TYPE=(R2),BALANCE=(R3),RKDD=(R4),        X
               REGSAVE=YES
         LTR   R15,R15             COMPLETION?
         BZR   R8                  OK, RETURN.
         STC   R15,TBMR+1          ERROR MESSAGE.
         SRL   R15,4
         STC   R15,TBMR
         NC    TBMR,=XL2'0F0F'
         TR    TBMR,=CL16'0123456789ABCDEF'
         MVC   TBMD,DDNAME         ERROR MESSAGE.
         MVC   TBMV,VOLSER
         MVC   TBMN,DSNAME
        $PRINT TBM
         B     TNEXT
CMPT     SR    R0,R5               SUBSTRACT TOTAL DIR. REC. BALANCE.
         STH   R0,DCBTRBAL         SET NEW TRACK BALANCE.
         DROP  R7                  KILL ADDRESSABILITY.
         SPACE 1
*---------------------------------------------------------------------*
*        INDICATE THAT LAST I/O WAS A WRITE AND CLOSE DCB.            *
*---------------------------------------------------------------------*
         SPACE 1
         OI    DCBOFLGS,DCBOFLWR   INDICATE LAST OPERATION WAS A WRITE.
         CLOSE (PDS)               CLOSE THE DCB, LET SYSTEM DO WORK.
         MVC   WORK(L'WORK),=XL8'4020202020202120' DISPLAY EXCP COUNT.
         ED    WORK,NEXCP
         MVC   DEXCP(L'DEXCP),WORK+L'WORK-L'DEXCP
         ZAP   NEXCP,=PL1'+1'      ZERO COUNT.
         AP    NDS,=PL1'+1'
        $PRINT PURGED
TNEXT    LTR   R9,R15              ANY PRINT ERROR?
         BZ    NEXTTIOT            NO, CHECK NEXT TIOT ENTRY.
         B     LEAVE               YES, QUIT.
         EJECT
*---------------------------------------------------------------------*
*        DATA CONSTANTS, EQUATES, AND WORK-AREAS.                     *
*---------------------------------------------------------------------*
         SPACE 1
CNVTSV   DC    4F'0'
TIOTADDR DC    A(*-*)              TIOT ADDRESS.
RKDD     DC    0F'0',AL1(1,DIRKEY),AL2(DIRBLK)
RKDDEOF  DC    0F'0',AL1(1,0),AL2(1)
WORK     DC    XL8'0'
EFFS     DC    X'FFFFFFFFFFFFFFFF',X'000E'
         DC    X'FFFFFFFFFFFFFFFF',X'00000000'
DREWRITE DC    XL22'0'
         SPACE 1
DIRWORK  DC    XL256'0'
PDSECB   DC    F'0'                CHANNEL PROGRAM EVENT CONTROL BLOCK.
PDSIOB   DC    A(0,PDSECB,0,0,DIRPROG,PDS,0,0)
         ORG   PDSIOB
         DC    X'42'
         ORG
         SPACE 1
PDSSEEK  DC    XL8'0'              MBBCCHHR.
         SPACE 1
DIRPROG  CCW   SRCHIDEQ,PDSSEEK+3,CC,5
         CCW   TIC,*-8,0,0
         CCW   WRITEKD,DREWRITE,CC+SILI,22
LOOP     CCW   RDCNT+MT,DIRWORK,CC,8
         CCW   RDKDATA,DIRWORK,SKIP,256+8
         SPACE 1
NEXCP    DC    PL4'+1'
NDS      DC    PL2'+0'
         DC    AL1(OPERRL)
OPERR    DC    CL6'0 ',C'OPEN ERROR FOR : //'
OPERRD   DC    CL8' ',C' DD VOL=SER='
OPERRV   DC    CL6' ',C',DSN='
OPERRN   DC    CL44' '
OPERRL   EQU   *-OPERR
         DC    AL1(NPOL)
NPO      DC    CL6'0 ',C'NOT DSORG=PO FOR : //'
NPOD     DC    CL8' ',C' DD VOL=SER='
NPOV     DC    CL6' ',C',DSN='
NPON     DC    CL44' '
NPOL     EQU   *-NPO
         DC    AL1(TBML)
TBM      DC    CL6'0 ',C'TRK-BAL ERROR (RC='
TBMR     DC    CL2' ',C') FOR : //'
TBMD     DC    CL8' ',C' DD VOL=SER='
TBMV     DC    CL6' ',C',DSN='
TBMN     DC    CL44' '
TBML     EQU   *-TBM
         DC    AL1(PURGEDL)
PURGED   DC    CL6'0 '
DEXCP    DC    CL5' ',C' DIR.-BLOCKS PURGED FOR : //'
DDNAME   DC    CL8' ',C' DD VOL=SER='
VOLSER   DC    CL6' ',C',DSN='
DSNAME   DC    CL44' '
PURGEDL  EQU   *-PURGED
         DC    AL1(ENDPRL)
ENDPR    DC    C'0 --- END :'
DNDS     DC    XL4'40202120',C' PARTITIONED DATA-SETS PURGED.'
ENDPRL   EQU   *-ENDPR
         DC    AL1(L'ENDNP)
ENDNP    DC    C'0 --- END : NO DATA-SETS PROCESSED.'
         SPACE 1
PDS     DCB    DDNAME=PDS,MACRF=E,DSORG=PO,DEVD=DA,EXLST=PDSEXL
PDSEXL   DC    X'07',AL3(PDSARE)
         DS    0D
PDSARE   DC    CL176' '
AREA     DC    5D'0'
         EJECT
IOERROR  EQU   X'41'               ECB RTN CODE FOR I/O ERROR.
IOGOOD   EQU   X'7F'               ECB RTN CODE FOR GOOD COMPL.
         SPACE 1
IOBUSTAT EQU   12                  CSW UNIT STATUS FLAGS (IOB).
IOBUSB4  EQU   X'08'               CHANNEL END (IOB).
IOBUSB5  EQU   X'04'               DEVICE END (IOB).
IOBUSB7  EQU   X'01'               UNIT EXCEPTION (IOB).
IOBCSTAT EQU   13                  CSW CHANNEL STATUS FLAGS (IOB).
IOBCSB2  EQU   X'20'               PROGRAM CHECK (IOB).
IOBCSB3  EQU   X'10'               PROTECTION CHECK.
IOBCSB4  EQU   X'08'               CHANNEL DATA CHECK.
IOBCSB5  EQU   X'04'               CHANNEL CONTROL CHECK.
IOBCSB6  EQU   X'02'               INTERFACE CONTROL CHECK.
IOBCSB7  EQU   X'01'               CHAINING CHECK.
IOBCSBXX EQU   IOBCSB2+IOBCSB3+IOBCSB4+IOBCSB5+IOBCSB6+IOBCSB7 2-7 BITS
         SPACE 1
DIRBLK   EQU   256                 LENGTH OF A DIRECTORY BLOCK.
DIRKEY   EQU   8                   LENGTH OF A DIRECTOR KEY.
         SPACE 1
CC       EQU   X'40'               COMMAND CHAINING.
SILI     EQU   X'20'               SUPPRESS INCORRECT LENGTH.
SKIP     EQU   X'10'               SUPRESS DATA TRANSFER TO STORAGE.
         SPACE 1
MT       EQU   X'80'               MULTI TRACK.
TIC      EQU   X'08'               TRANSFER IN CHANNEL.
SRCHIDEQ EQU   X'31'               SEARCH ID EQUAL.
WRITEKD  EQU   X'0D'               WRITE KEY + DATA.
RDCNT    EQU   X'12'               READ COUNT.
RDKDATA  EQU   X'0E'               READ DATA.
         SPACE 2
        LTORG
         EJECT
*---------------------------------------------------------------------*
*        DSECT'S.                                                     *
*---------------------------------------------------------------------*
         SPACE 1
        IHADVA
         SPACE 2
         PRINT NOGEN
        CVT    DSECT=YES,LIST=YES
        DCBD   DSORG=PO,DEVD=DA
TIODSECT DSECT
        IEFTIOT1
         SPACE 2
         END
