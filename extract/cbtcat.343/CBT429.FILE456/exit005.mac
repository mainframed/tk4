X005     TITLE 'JES2 - EXIT 005 - ADDITIONAL LOCAL COMMANDS'
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* MODULE NAME : EXIT005                                               *
* DESCRIPTIVE NAME : JES2 EXIT 5 (HASPCOMM)                           *
*                    JES2 COMMAND PREPROCESSOR                        *
*                    (ADDITIONAL LOCAL COMMANDS)                      *
* PURPOSE :     THIS JES2 EXIT IS DESIGNED TO IMPLEMENT INSTALLATION  *
*               SPECIFIC COMMANDS, AND AS SUCH MUST INTERCEPT ONLY    *
*               THOSE COMMANDS WHEN ENCOUNTERED.                      *
* INVOCATION POINT : EXIT005                                          *
* ENTRY POINT : UEXIT005                                              *
* ENVIRONMENT : JES2 MAIN TASK                                        *
* REGISTERS AT ENTRY :                                                *
*               R0-R4 : N/A                                           *
*               R5 : POINTER TO THE ADDRESS OF THE CURRENT OPERAND    *
*               R6 : INCREMENT VALUE OF 4                             *
*               R7 : POINTER TO THE ADDRESS OF THE LAST OPERAND       *
*               R8-R10 : N/A                                          *
*               R11 : ADDRESS OF THE HCT                              *
*               R12 : N/A                                             *
*               R13 : ADDRESS OF THE HASPCOMM PCE                     *
*               R14 : RETURN ADDRESS                                  *
*               R15 : ENTRY ADDRESS                                   *
* REGISTERS ON RETURN :                                               *
*               R0 : IF A USER SUPPLIED MESSAGE IS TO BE PASSED,      *
*                    IT MUST CONTAIN THE LENGTH OF THE MESSAGE,       *
*                    OTHERWISE, IT'S NOT APPLICABLE.                  *
*               R1 : N/A                                              *
*               R15 : A RETURN CODE :                                 *
*                     =0, CONTINUE USING ANY ADDITIONAL EXITS         *
*                     =4, CONTINUE WITHOUT USING ANY ADDITIONAL EXITS *
*                     =8, TERMINATE WITHOUT ANY MESSAGE               *
*                     =12, TERMINATE ISSUING THE "OK" MESSAGE         *
*                     =16, TERMINATE USING A USER SUPPLIED MESSAGE    *
* LINKAGE EDITOR INFO :                                               *
*               ATTRIBUTES : REENTRANT, REUSEABLE, REFRESHABLE        *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* AUTHOR :      JOHN V. HOOPER                                        *
*               FIRST UNION NATIONAL BANK                             *
*               301 SOUTH TRYON STREET                                *
*               CHARLOTTE, N.C. 28288                                 *
*               (704) 374-2427                                        *
*               ORIGIN : J005$SL FROM CBT TAPE 89 FEB, FILE 381.      *
* CHANGES :     ADAPTED TO JES2 2.2.0 BY MOINIL P.A.                  *
*               THE ORIGINAL $SL COMMAND HAS TAKEN AS BASIS TO        *
*               IMPLEMENT $Y... LOCAL COMMANDS (WE CHOICE $Y...       *
*               FOR OUR ACTUAL AND ANY FUTURE NEEDS).                 *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* JES2PARM INITIALIZATION STATEMENTS :                                *
*               LOAD=J2XIT005                                         *
*               EXIT005 ROUTINE=UEXIT005,DISABLE,TRACE=YES            *
*                                        ENABLE        NO             *
*                                                                     *
* JES2 OPERATOR CONTROL COMMANDS :                                    *
*               $T EXIT005,DISABLE,TRACE=YES                          *
*                          ENEABLE       NO                           *
*               $D EXIT005                                            *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         EJECT
*---------------------------------------------------------------------*
*                                                                     *
*                    C   O   M   M   A   N   D   S                    *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* $YL COMMAND :                                                       *
* -------------                                                       *
*        THIS COMMAND IS WRITTEN TO LIST THE INDIVIDUAL SETUP         *
*        STATEMENTS FOR A REQUESTED BATCH JOB (BY READING THE         *
*        JCL IMAGES DATA-SET FOR THE JOB).                            *
*        COMMAND SYNTAX : $YL JN                                      *
*                         WHERE : JN IS THE BATCH JOB NUMBER.         *
*        RESPONSE MSG-ID'S USED : $HASP900 AND $HASP999.              *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         EJECT
         COPY  $HASPGBL
         SPACE 1
J2XIT005 $MODULE ENVIRON=JES2,TITLE='JES2 - EXIT 005',                 X
               $BUFFER,            GENERATE HASP BUFFER DSECT          X
               $CMB,               GENERATE HASP CMB DSECT             X
               $COMWORK,           GENERATE HASP COMWORK DSECT         X
               $CWA,               GENERATE HASP CWA DSECT             X
               $DCT,               GENERATE HASP DCT DSECT             X
               $HASPEQU,           GENERATE HASP EQUATES               X
               $HCT,               GENERATE HASP HCT DSECT             X
               $IOT,               GENERATE HASP IOT DSECT             X
               $JCT,               GENERATE HASP JCT DSECT             X
               $JOE,               GENERATE HASP JOE DSECT             X
               $JQE,               GENERATE HASP JQE DSECT             X
               $MIT,               GENERATE HASP MIT DSECT             X
               $PADDR,             GENERATE HASP PADDR DSECT           X
               $PCE,               GENERATE HASP PCE DSECT             X
               $PDDB,              GENERATE HASP PDDB DSECT            X
               $TAB,               GENERATE HASP TAB DSECT             X
               CVT,                GENERATE MVS CVT DSECT              X
               RESPA,              GENERATE MVS RESPA DSECT            X
               RPL,                GENERATE MVS IFGRPL DSECT           X
               UCM                 GENERATE MVS UCM DSECT
         TITLE 'JES2 - EXIT 005 - ADDITIONAL LOCAL COMMANDS'
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        REDIRECTION VALUES FOR DISPLAY COMMANDS.                     *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
RV$Y     EQU   4                   $Y SAME AS FOR $DJ (SEE HASPCOMM)
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        EXIT MAIN ENTRY POINT.                                       *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
UEXIT005 $ENTRY BASE=R12
        $SAVE  ,                   SAVE CALLER'S REGISTERS
         LR    R12,R15             LOAD BASE REGISTER
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        SEE IF THIS IS A COMMAND FOR US.                             *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
         CLI   COMVERB,C'Y'        SEE IF THIS IS THE $Y... COMMAND
         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES.                *
*        (SEE HASPCOMM AT LABEL 'COMTREDI') ---> (*1)                 *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
*------------------------------------------------------ (*1) START ---*
         TM    COMFLAG,CMBFLAGU    IS THIS UCM...                  @130
         BZ    COMGOOD             IF NOT SKIP REDIRECTION
         TM    COMLFLG,COMLFLGC+COMLFLGR CONSOLE SET OR REMOTE SYSTEM
         BNZ   COMRPT              SKIP AUTOMATIC L=CCA
         CLI   COMUCM,0            IS UCM ID VALID?            @OY29823
         BE    COMGOOD             BR IF NO                    @OY29823
         LA    R1,RV$Y             LOAD REDIRECT OFFSET FOR $Y     -EU-
         BCTR  R1,0                REDUCE BY 1                     -EU-
         SLL   R1,1                DOUBLE                          -EU-
         XR    R2,R2               ZERO WORK
         IC    R2,COMUCM           PICK UP CURRENT UCM
         LR    R3,R1               SAVE OFFSET                 @OY29019
         L     R10,$COMEXTN        POINT TO EXTENDED AREA      @OY29019
         USING CWA,R10             ESTABLISH ADDRESSABILITY    @OY29019
        $CALL  CONSCHK,PARM=(R2),ERRET=COMRPT VALID CONSOLE ID @OY29019
         LR    R1,R3               RESTORE OFFSET              @OY29019
         MH    R2,CWALCON          MULTIPLY BY LENGTH DIMENSION
         AR    R1,R2               COMBINE OFFSETS
         LA    R1,CWARESP-CWACONL(R1) POINT TO ELEMENT
         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID
         TM    COMLFLG,COMLFLGA    HAS AREA BEEN SET
         BO    COMRPT              SKIP AUTOMATIC IF YES
         MVC   COMUCMA,CWACONA(R1) SET NEW AREA
         DROP  R10                 DROP EXTENDED AREA BASE     @OY29019
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        VERIFY CONSOLE/AREA.                                         *
*        (SEE HASPCOMM AT LABEL 'COMVCCA') ---> (*2)                  *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
*------------------------------------------------------ (*2) START ---*
COMRPT   TM    COMLFLG,COMLFLGR    REMOTE SYSTEM UCM               @130
         BO    COMROK              UCM AND AREA OK                 @130
         L     R2,$COMEXTN         POINT TO EXTENDED WORK AREA     @134
         USING CWA,R2              ESTABLISH COM ADDRESSABILITY    @136
         CLC   CWA7603D,$ZEROS     VERIFICATION RTN AVAILABLE ...  @136
         BE    COMROK              NO, RETURN AS VALID ROUTING     @136
         MVC   XASCID(1),COMUCM    SET UCM
         MVC   XASDID(1),COMUCMA   SET AREA
         CLI   XASDID,0            ZERO AREA
         BNE   COMSSAOP            SKIP NSI                        @130
         MVI   XASDID,C'Z'         FORCE AREA Z
COMSSAOP MVC   XAU(1),COMUCM       INDICATE SOURCE SAME AS OUTPUT  @130
         MVI   XAN,X'22'           SET ID FOR VERIFIER
        MODESET EXTKEY=ZERO        GET KEY 0
         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE
        $AMODE 24,PUSHR=R0,R=R14   GO TO AMODE 24                  @136
         BALR  R14,R15             ENTER OS VERIFICATION ROUTINE   @136
        $AMODE POPR=R0,R=R14       RESTORE PREV AMODE              @136
        MODESET EXTKEY=HASP        GET KEY 1
         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR         @133
         BH    COMBADRC            BRANCH IF BAD RETURN CODE   @OY18399
         NI    COMGFLG1,FF-COMG1CON CLEAR MSTR CON RETRY BIT   @OY18399
         B     COMROK              SKIP NXT IF CONSOLE/AREA OK @OY18399
COMBADRC XR    R10,R10             ZERO WORK                   @OY18399
         ICM   R10,B'0011',COMUCM+(COMUCMA-COMUCMA) UCMID + AREA @133KL
         MVI   COMUCMA,0           FORCE NO MLWTO (NO PREVIOUS LINE)
         CH    R15,=H'12'          IS CONSOLE DOWN
         BNE   COMCLBIT            NO, BRANCH                  @OY18399
         CLI   COMACEID,C' '       IS COMMAND AN ACE ?         @OY18399
         BE    COMCONDN            NO, BRANCH                  @OY18399
         TM    COMGFLG1,COMG1CON   TRIED TO GET MSTR CON ID ?  @OY18399
         BO    COMCONDN            YES, BRANCH                 @OY18399
         L     R15,CVTPTR          GET CVT ADDRESS             @OY18399
         L     R15,CVTCUCB-CVT(,R15) GET ADDR OF UCM BASE      @OY18399
         SL    R15,$F4             ADDR OF MCS PREFIX PTR      @OY18399
         L     R15,UCMPRFXP-UCMPRFXP(,R15) ADDR OF MCS PREFIX  @OY18399
         L     R15,UCMMCENT-UCMPRFX(,R15) ADD OF MSTR CON UCM  @OY18399
         MVC   XASCID,UCMID-UCMLIST(R15) SET MASTER CONSOLE    @OY18399
         MVC   COMUCM,UCMID-UCMLIST(R15)     UCMID             @OY18399
         MVI   XASDID,C'Z'         FORCE AREA Z                @OY18399
         OI    COMGFLG1,COMG1CON   TURN ON MSTR CON RETRY BIT  @OY18399
         B     COMSSAOP            GO TRY IT AGAIN             @OY18399
COMCONDN MVC   COMFLAG(4),COWTOL DESTROY APPARENT SOURCE INFO  @OY18399
         MVC   COMOUT,COWTOL+(COMOUT-COMFLAG) OMIT CNTRL FIELD @OY18399
COMCLBIT NI    COMGFLG1,FF-COMG1CON CLEAR MSTR CON RETRY BIT   @OY18399
        $CWTO  L=L'CMBMSG,MSGID=900 ECHO THE COMMAND             @220KR
         MVC   COMMAND(COMVINVL),COMVINV MOVE DIAGNOSTIC TEXT
         STC   R10,COMVINVA        SET AREA
         SRL   R10,8               ALIGN CONSOLE ID
*-EU-   $CFCVE VALUE=(R10)         CONVERT TO EBCDIC              -EU-*
         CVD   R10,$DOUBLE         CONVERT TO PACKED
         MVC   $DOUBLE(4),=X'F0212020' SET EDIT MASK
         ED    $DOUBLE(4),$DOUBLE+6 EDIT CONSOLE ID TO AREA
         MVC   COMVINVC,$DOUBLE+2  MOVE CONSOLE ID TO MESSAGE
         MVC   COMMAND+COMVINVL(8),COMACEID MOVE IDENTIFIER
         MVC   COMMAND+COMVINVL(8),COMACEID MOVE IDENTIFIER
        $CWTO  L=COMVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE -EU-
         B     EXIT8               GET OUT                         -EU-
         DROP  R2                  DROP COM ADDRESSABILITY         @136
*-------------------------------------------------------- (*2) END ---*
COMROK   CLI   COMUCMA,0           TEST FOR MLWTO                  @130
         BE    COMGOOD             IF NOT, SKIP                    @130
         MVI   COMLINET,X'80'      SET CONTROL LINE
        $CWTO  L=L'CMBMSG,MSGID=900 ECHO THE COMMAND             @220KR
         MVI   COMLINET,X'20'      SET DATA LINE
*-------------------------------------------------------- (*1) END ---*
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        SELECT THE SPECIFIC COMMAND AND                              *
*        CHECK THE CONSOLE AUTHORITY.                                 *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
COMGOOD  LA    R2,COMTBL           COMMANDS TABLE
         CLI   0(R2),0             TEST END OF TABLE
         BE    COMINVC             BRANCH IF YES
         CLC   COMVERB+1(1),0(R2)  IS IT THIS ONE
         BE    COMCHKA             BRANCH IF YES
         LA    R2,L'COMTBL(R2)     BUMP TO NEXT ONE
         B     COMGOOD+L'COMGOOD
COMCHKT  TM    COMAUTH,*-*         <<EXECUTED>>
COMCHKA  XR    R1,R1
         IC    R1,1(R2)            GET REJECTION BITS
         ICM   R9,B'1111',2(R2)    SET COMMAND ADDRESS
         EX    R1,COMCHKT          TEST FOR AUTHORIZED CONSOLE
         BZR   R9                  BRANCH IF OK, GO PROCESS COMMAND
COMINVC  MVC   COMMAND+9(L'MSGINVC),MSGINVC SET ERROR MESSAGE
         LA    R0,L'MSGINVC+9      SET MESSAGE LENGTH
        $CWTO  L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        GO BYE-BYE.                                                  *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
EXIT0    XR    R15,R15             SET RETURN CODE TO 0
        $RETURN RC=(R15)           RETURN TO JES2
         SPACE 1
EXIT8    LA    R15,8               SET RETURN CODE TO 8
        $RETURN RC=(R15)           RETURN TO JES2
         EJECT
*------- (SEE HASPCOMM AT THE SAME LABELS) ---------------------------*
         SPACE 1
COWTOL  $WTO   PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX
COMVINV  DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '
COMVINVL EQU   *-COMVINV
COMVINVC EQU   COMMAND+COMVINVL-16,2
COMVINVA EQU   COMVINVC+2,1
COMLFLG  EQU   COMEWORK+2          FLAG BYTE
COMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER
COMLFLGR EQU   1                   UCM COMMAND FROM REMOTE SYSTEM
COMLFLGC EQU   2                   CONSOLE HAS BEEN SPECIFIED
COMLFLGA EQU   4                   AREA HAS BEEN SPECIFIED
COMR     EQU   CMBFLAGR            LEVEL OF RESTRICTION FOR REMOTES
COMS     EQU   DCTREJSY            REJECT UNLESS SYSTEM AUTHORIZATION
COMD     EQU   DCTREJDV            REJECT UNLESS DEVICE AUTHORIZATION
COMJ     EQU   DCTREJJB            REJECT UNLESS JOB AUTHORIZATION
COMJDS   EQU   COMJ+COMD+COMS      COMBINATION
COMRS    EQU   COMR+COMS           COMBINATION
COMRJ    EQU   COMR+COMJ           COMBINATION
*---------------------------------------------------------------------*
         SPACE 1
MSGINVC  DC    C' INVALID COMMAND'
         EJECT
        LTORG
         SPACE 1
PATCH    DC    128S(*)
         DC    CL8'ENDPATCH'
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        $Y... COMMANDS TABLE.                                        *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
COMTBL   DS    0CL6
         DC    CL1'L',AL1(COMRJ+COMD),AL4(YLCMD)
         DC    AL1(0)
         EJECT
*------------------------------------------------------- $YL START ---*
         CNOP  0,8                 $YL JN COMMAND PROCESSING
         USING *,R9                LOCAL ADDRESSABILITY
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        GET A JES2 BUFFER FOR REENTRANCY AND                         *
*        CLEAR THE COMMAND WORK AREA.                                 *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
YLCMD   $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA
         LR    R8,R1               SAVE WORK AREA ADDRESS
         USING $YLWORK,R8          SET ADDRESSABILITY TO WORK AREA
         LA    R14,$YLWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS
         LH    R15,$BUFSIZE        SET 'TO' LENGTH
         XR    R0,R0               CLEAR 'FROM' ADDRESS
         XR    R1,R1               CLEAR 'FROM' LENGTH
         MVCL  R14,R0              CLEAR THE BUFFER
        $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA
         ST    R1,BUFADDR          SAVE BUFFER ADDRESS
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        EXAMINE THE COMMAND OPERAND.                                 *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
         L     R1,0(,R5)           POINT TO OPERAND
         LA    R1,1(,R1)           BUMP PAST 2ND CHAR IN COMVERB
         ST    R1,0(,R5)           SAVE POINTER TO OPERAND
         CLI   0(R1),C'J'          SEE IF BATCH JOBS REQUESTED
         BNE   YLBADOP             BRANCH IF NOT
         LA    R14,1(R1)           POINT TO START OF JOB NUMBER
         LA    R1,1(R1)            POINT TO OPERAND
         LR    R2,R1               SAVE START OF OPERAND ADDRESS
         XR    R15,R15             SET LENGTH
YLSN1    CLI   0(R14),C' '         END OF OPERAND
         BE    YLSN2               YES, BRANCH
         CLI   0(R14),C'0'         SEE IF NUMERIC
         BL    YLBADOP             NO, ERROR
         CLI   0(R14),C'9'         SEE IF NUMERIC
         BH    YLBADOP             NO, ERROR
         LA    R15,1(R15)          ADD 1 TO LENGTH
         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR
         B     YLSN1               LOOP
YLSN2    LTR   R15,R15             TEST LENGTH
         BZ    YLBADOP             ZERO, ERROR
         CH    R15,=H'6'           TEST LENGTH
         BH    YLBADOP             GREATER THAN 6, ERROR
         BCT   R15,*+L'*+6         MAKE MACHINE LENGTH
         PACK  DOUBLE,0(*-*,R2)    <<EXECUTED>>
         EX    R15,*-6             PACK JOB NUMBER
         CVB   R15,DOUBLE          CONVERT TO BINARY
         LTR   R15,R15             TEST JOB NUMBER
         BZ    YLBADOP             YES, BRANCH
         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM
         BH    YLBADOP             YES, BRANCH
         STH   R15,JOBNUM          SAVE JOB NUMBER
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        SCAN THE JOB QUEUE FOR THE JOB NUMBER.                       *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
         LR    R1,R15              LOAD JOB NUMBER
        $QLOC  (R1)                GET JQE FOR THIS JOB NUMBER
         BNZ   YLJQEF              BRANCH IF FOUND
         MVC   COMMAND(L'YLMSG1),YLMSG1 SET JOB NOT FOUND MESSAGE
         LA    R0,L'YLMSG1         SET MESSAGE LENGTH
        $CWTO  L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR
         B     YLEXIT              GET OUT
YLJQEF   LR    R7,R1               SAVE JQE ADDRESS
         USING JQE,R7              SET ADDRESSABILITY TO JQE
         TM    JQEFLAG3,JQE3JOB    IS THIS A BATCH JOB
         BZ    YLJQEF1             BRANCH IF YES
         MVC   COMMAND(L'YLMSG2),YLMSG2 SET NOT BATCH JOB MESSAGE
         LA    R0,L'YLMSG2         SET MESSAGE LENGTH
        $CWTO  L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR
         B     YLEXIT              GET OUT
YLJQEF1  MVI   COMMAND,C' '        BLANK ENTIRE
         MVC   COMMAND+1(199),COMMAND  COMMAND
         MVC   COMMAND+201(200),COMMAND+200  AREA
         LH    R1,JOBNUM           LOAD JOB NUMBER
         MVC   COMMAND(3),=C'JOB'  ASSUME BATCH JOB
         CVD   R1,DOUBLE           CONVERT JOB NUMBER TO PACKED
         MVC   DBL(6),=X'402020202120' SET EDIT MASK
         ED    DBL(6),DOUBLE+5     EDIT JOB NUMBER
         MVC   COMMAND+3(5),DBL+1  MOVE JOB NUMBER TO MESSAGE
         MVC   COMMAND+10(8),JQEJNAME MOVE JOB NAME TO MESSAGE
         LH    R14,$JQEMSKL        GET JQE SPOOL MASK LEN-1
         EX    R14,MVSPMASK        SAVE SPOOL MASK USED BY THIS JOB
         NC    $SPMSKWA,$SPLSLCT   'AND' WITH QUALIFYING SPOOLS
         EX    R14,CKSPMASK        SEE IF ALL REQUIRIED SPOOLS AVAIL
         BE    YLJQEF2             BRANCH IF YES
         MVC   COMMAND+19(L'YLMSG3),YLMSG3 MOVE MESSAGE TO BUFFER
         LA    R0,L'YLMSG3+19      SET LENGTH
        $CWTO  L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     YLEXIT              GET OUT
MVSPMASK MVC   $SPMSKWA(*-*),JQESUMSK <<EXECUTED>>
CKSPMASK CLC   $SPMSKWA(*-*),JQESUMSK <<EXECUTED>>
YLJQEF2  TM    JQEFLAG3,JQE3SYSD   IS THIS A JES2 CREATED JOB
         BZ    YLJQEF3             NO, BRANCH
         MVC   COMMAND+19(L'YLMSG4),YLMSG4 SET MSG TEXT
        $CWTO  L=L'YLMSG4+19,MSGID=999 WRITE THE MSG TO THE OPERATOR
         B     YLEXIT              GET OUT
YLJQEF3  LH    R3,$BUFSIZE         LOAD LENGTH OF BUFFER
         SH    R3,=Y($YLBLEN-(BUFSTART-BFPDSECT)) SUBTR LEN OF BASIC
         STH   R3,WRKLEN           SAVE LENGTH OF WORK AREA
         LA    R2,$YLWORK+$YLBLEN  POINT TO CARD SECTION OF BUFFER
         ST    R2,CURRTEXT         SAVE ADDRESS OF SETUP TEXT
         LR    R4,R2
         XR    R5,R5               SET MOVE LENGTH TO ZERO
         MVCL  R2,R4               ZEROES SETUP TEXT AREA
         LA    R3,PCEDADCT         POINT TO DA DCT
         L     R4,BUFADDR          GET A BUFFER ADDRESS
         USING BFPDSECT,R4         SET ADDRESSABILITY TO THE BUFFER
         MVI   PCEDEVTP,PCEDARD    INDICATE READ REQUEST
         ST    R4,PCEBUFAD         SET THE BUFFER ADDRESS
         L     R15,JQETRAK         GET THE JCT TRACK ADDRESS
         ST    R15,PCESEEK         SET THE TRACK ADDRESS
         LA    R15,IOBCCW1         LOAD START ADDRESS OF CCW'S
         ST    R15,IOBSTART        STORE ADDRESS IN BUFFER
        $EXCP  (R3)                READ IN THE JCT
YLWTIO1 $WAIT  IO                  WAIT FOR IO TO COMPLETE
         TM    BUFECBCC,X'7F'      TEST COMPLETION OF OUR IO
         BZ    YLWTIO1             NOT COMPLETE, GO WAIT AGAIN
         BM    YLIOERR             GO PROCESS I/O ERROR
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        AT THIS POINT WE HAVE SUCCESSFULLY READ THE JCT.             *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
         LR    R10,R4              MOVE JCT ADDRESS TO REG 10
         USING JCT,R10             SET ADDRESSABILITY TO JCT
         L     R0,$JOBQPTR         GET ADDR OF JOB QUEUE ORIGIN
         AL    R0,JCTJQE           ADD JQE OFFSET FROM JCT
         CLR   R0,R7               SEE IF IT MATCHES OUR JQE ADDRESS
         BNE   YLIOERR             NO, ERROR
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        AT THIS POINT WE HAVE A VALID JCT FOR THE JOB.               *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
         TM    JCTJBOPT,JCTSETUP   HAS JOB EVER BEEN SETUP
         BO    YLSUPOK             BRANCH IF YES
         MVC   COMMAND+19(L'YLMSG5),YLMSG5 MOVE MESSAGE TO BUFFER
         LA    R0,L'YLMSG5+19      SET LENGTH
        $CWTO  L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     YLEXIT              GET OUT
YLSUPOK  L     R15,JCTIOT          GET FIRST IOT TRACK ADDR
YLRDIOT  ST    R15,PCESEEK         SET SEEK ADDRESS FOR READ
        $EXCP  (R3)                READ THE IOT
YLWTIO2 $WAIT  IO                  WAIT FOR IO TO COMPLETE
         TM    BUFECBCC,X'7F'      TEST COMPLETION OF OUR IO
         BZ    YLWTIO2             NOT COMPLETE GO WAIT AGAIN
         BM    YLIOERR             GO PROCESS I/O ERROR
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        AT THIS POINT WE HAVE SUCCESSFULLY READ THE IOT.             *
*        NOW ATTEMPT TO FIND THE JCL IMAGES PDDB.                     *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
         DROP  R10                 DROP ADDRESSABILITY TO JCT
         LR    R10,R4              SAVE ADDRESS OF IOT BUFFER
         DROP  R4                  DROP ADDRESSABILITY TO BUFFER
         USING IOT,R4              SET ADDRESSABILITY TO IOT
         L     R10,IOTPDDB         LOAD OFFSET TO FIRST PDDB
         LA    R10,0(R10,R4)       POINT TO FIRST PDDB IN THIS IOT
         L     R15,IOTPDDBP        LOAD OFFSET PAST LAST PDDB
         LA    R15,0(R15,R4)       POINT PAST LAST PDDB IN THIS IOT
YLPDDBLP CR    R15,R10             LAST PDDB IN THIS IOT
         BNH   YLNXTIOT            YES, GO GET NEXT IOT
         CLC   PDBDSKEY-PDB(2,R10),=Y(PDBINJCL) JCL IMAGE DATA-SET
         BE    YLRDJCL1            YES, GO PROCESS IT
         LA    R10,PDBLENG(,R10)   NO, POINT TO NEXT PDDB IN IOT
         B     YLPDDBLP            GO CHECK NEXT PDDB
YLNXTIOT ICM   R15,B'1111',IOTIOTTR   YES, GET NEXT IOT TRACK ADDRESS
         BNZ   YLRDIOT             GO READ NEXT IOT IF PRESENT
         MVC   COMMAND+19(L'YLMSG6),YLMSG6 SET IN MSG TEXT
        $CWTO  L=L'YLMSG6+19,MSGID=999 WRITE THE MSG TO THE OPERATOR
         B     YLEXIT              GET OUT
         DROP  R4                  DROP ADDRESSABILITY TO IOT
         USING BFPDSECT,R4         SET ADDRESSABILITY TO THE BUFFER
YLRDJCL1 L     R15,PDBMTTR-PDB(R10) POINT TO START OF JCL DATA-SET
YLRDJCL2 ST    R15,PCESEEK         SET FOR READ
        $EXCP  (R3)                READ THE DATA-SET
YLWTIO3 $WAIT  IO                  WAIT FOR IO TO COMPLETE
         TM    BUFECBCC,X'7F'      TEST COMPLETION OF OUR IO
         BZ    YLWTIO3             NOT COMPLETE GO WAIT AGAIN
         BM    YLIOERR             GO PROCESS I/O ERROR
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        AT THIS POINT WE HAVE A BUFFER CONTAINING THE JCL            *
*        STATEMENTS FOR THE JOB, SO SEARCH IN THE SETUP CARDS.        *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
         LA    R5,BUFSTART+10      POINT TO DATA
         XR    R6,R6               CLEAR REGISTER FOR IC
YLGCARD  IC    R6,0(,R5)           GET LENGTH
         CLC   3(3,R5),=C'//*'     IS IT POTENTIAL JES2 JCL CARD
         BNE   YLNXCARD            NO, IGNORE IT
         CLC   6(6,R5),=C'SETUP '  YES, SEE IF SETUP CARD
         BNE   YLNXCARD            NO, GO GET NEXT CARD
         LR    R1,R6
         SH    R1,=H'9'            TEST IF SETUP HAS VALID TEXT
         BNP   YLNXCARD            NO, GO GET NEXT CARD
         LA    R0,2(R1)
         LH    R15,WRKLEN
         SR    R15,R0              HAVE WE REACHED THE LIMIT
         BNM   YLPRTXT             NO, GO HANDLE THE SETUP TEXT
         STH   R15,WRKLEN          SAY WE HAVE REACHED THE LIMIT
         B     YLPUTCDS            QUIT LOOKING
YLMVTXT  MVC   1(*-*,R15),11(R5)   <<EXECUTED>>
YLPRTXT  STH   R15,WRKLEN          SAVE REMAINING WORK AREA SPACE
         L     R15,CURRTEXT        LOAD POINTER TO TEXT SAVE ENTRY
         EX    R1,YLMVTXT          MOVE SETUP TEXT TO SAVE ENTRY
         STC   R1,0(R15)           SET SETUP TEXT MOVE LENGTH
         ALR   R15,R0              POINT TO NEXT SETUP TEXT ENTRY
         ST    R15,CURRTEXT        AND SAVE ADDRESS
YLNXCARD LA    R5,3(R5,R6)         POINT TO NEXT CARD IN THE BUFFER
         CLI   0(R5),X'FF'         END OF THE BUFFER
         BE    YLNXBUFF            YES, GO GET NEXT BUFFER
         CLI   1(R5),X'FF'         TEST NEXT BYTE ALSO FOR END OF BUFF
         BNE   YLGCARD             NO, PROCESS NEXT CARD
YLNXBUFF ICM   R15,15,HDBNXTRK     NEXT BUFFER ADDRESS
         BNZ   YLRDJCL2            END OF CHAIN IF ZERO
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        AT THIS POINT WE HAVE SAVED ALL SETUP MESSAGES FOR THE       *
*        JOB AND ARE READY TO WRITE THEM TO THE OPERATOR.             *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
YLPUTCDS LA    R2,$YLWORK+$YLBLEN  POINT TO TEXT SECTION OF BUFFER
         CL    R2,CURRTEXT         ANY SETUP FOUND
         BNE   YLPUTJS             BRANCH IF YES
         MVC   COMMAND+19(L'YLMSG7),YLMSG7 MOVE MESSAGE TO BUFFER
         LA    R0,L'YLMSG7+19      SET LENGTH
        $CWTO  L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     YLEXIT              GET OUT
YLPUTJS  MVC   COMMAND+19(15),=C' --- SETUP(S) :'
        $CWTO  L=34,MSGID=900      WRITE TITLE TO THE OPERATOR
         MVI   COMMAND,C'-'
YLPUTLP  XR    R1,R1
         IC    R1,0(R2)            GET SETUP TEXT MOVE LENGTH
         EX    R1,YLMVSMB          MOVE THE SETUP MSG TO BUFFER
         LA    R0,2(R1)            SETUP MSG LENGTH
         ALR   R2,R0               POINT TO THE NEXT SETUP TEXT
        $CWTO  L=(R0),MSGID=900    WRITE THE TEXT TO THE OPERATOR
         CL    R2,CURRTEXT         TEST END OF SETUP TEXT
         BL    YLPUTLP             NO, LOOP
         LH    R0,WRKLEN
         LTR   R0,R0               HAVE WE REACHED THE LIMIT
         BNM   YLEXIT              NO, GET OUT
         MVC   COMMAND(L'YLMSGOV),YLMSGOV SET OVERFLOW MESSAGE
         LA    R0,L'YLMSGOV        SET MESSAGE LENGTH
        $CWTO  L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR
         B     YLEXIT              GET OUT
YLMVSMB  MVC   COMMAND+1(*-*),1(R2) <<EXECUTED>>
YLIOERR $IOERROR (R4)              ISSUE IOERROR MESSAGE
         MVC   COMMAND+19(L'YLMSG8),YLMSG8 MOVE ERROR MSG TO BUFFER
         LA    R0,L'YLMSG8+19      SET LENGTH OF MESSAGE
        $CWTO  L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     YLEXIT              GET OUT
YLBADOP  L     R1,0(,R5)           POINT TO INVALID OPERAND
         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG
         MVC   COMMAND+9(L'YLMSG9),YLMSG9 SET ERROR MESSAGE
         LA    R0,L'YLMSG9+9       SET MESSAGE LENGTH
        $CWTO  L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
YLEXIT   L     R10,BUFADDR         LOAD BUFFER ADDRESS
        $FREEBUF (R10)             FREE THE BUFFER
        $FREEBUF (R8)              FREE THE WORK AREA
         B     EXIT8               GET OUT
         DROP  R4                  DROP ADDRESSABILITY TO BUFFER/IOT
         DROP  R7                  DROP ADDRESSABILITY TO JQE
         DROP  R8                  DROP ADDRESSABILITY TO WORK AREA
         EJECT
YLMSG1   DC    C'JOB NOT FOUND'
YLMSG2   DC    C'NOT BATCH JOB'
YLMSG3   DC    C' REQUIRED SPOOL VOLUMES NOT MOUNTED'
YLMSG4   DC    C' JES2 GENERATED JOB, CANNOT BE DISPLAYED'
YLMSG5   DC    C' NOT SETUP JOB'
YLMSG6   DC    C' CANNOT LOCATE JCL IMAGES PDDB'
YLMSG7   DC    C' NO SETUP INFORMATION AVAILABLE'
YLMSG8   DC    C' I/O ERROR ON SPOOL, COMMAND ABORTED'
YLMSG9   DC    C' INVALID OPERAND'
YLMSGOV  DC    C' ... ETC ...'
         SPACE 1
        LTORG
         SPACE 1
         DROP  R9                  KILL LOCAL ADDRESSABILITY
*--------------------------------------------------------- $YL END ---*
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        HASP COMMAND SERVICES -- CONSOLE CHECK ROUITNE.     @OY29019 *
*        (FROM HASPCOMM AT LABEL 'CONSCHK') ---> (*3)        @OY29019 *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
*------------------------------------------------------ (*3) START ---*
************************************************************** @OY29019
*                                                            * @OY29019
*        CONSCHK - CHECK THAT THIS IS A DEFINED MCS CONSOLE  * @OY29019
*                  RETURN CODES                              * @OY29019
*                  0 - NO ERROR                              * @OY29019
*                  4 - MIGRATION CONSOLE ID                  * @OY29019
*                  8 - INVALID CONSOLE ID                    * @OY29019
*                                                            * @OY29019
************************************************************** @OY29019
         SPACE 1                                               @OY29019
CONSCHK $ENTRY BASE=R8             LOCAL ADDRESSABILITY        @OY29019
        $SAVE  TRACE=NO            SAVE REGISTERS              @OY29019
         LR    R8,R15              LOAD BASE ADDRESS           @OY29019
         XR    R15,R15             ASSUME CONSOLE OK           @OY29019
         LTR   R1,R1               IS THE CONSOLE = 0...       @OY29019
         BZ    CONSRET             YES, RETURN WITH NO ERROR   @OY29019
         CL    R1,=A(CWAMAXC)      IS THE CONSOLE # > MAX ...  @OY29019
         BH    CONSHIGH            YES, RETURN WITH ERROR      @OY29019
         LR    R10,R1              KEEP THE CONSOLE ID         @OY29019
         L     R2,CVTPTR           POINT TO CVT                @OY29019
         L     R2,CVTCUCB-CVT(,R2) THEN TO UCM                 @OY29019
         LM    R5,R7,UCMVEA-UCM(R2) GET 1ST, LEN, LAST UCME    @OY29019
         LR    R1,R7               COPY LAST UCME              @OY29019
         ALR   R1,R6               POINT TO END OF UCMES       @OY29019
         XR    R0,R0               CLEAR FOR DIVIDE            @OY29019
         SLR   R1,R5               GET LEN OF ALL UCMES        @OY29019
         DR    R0,R6               GET NUMBER OF MCS CONSOLES  @OY29019
         CLR   R10,R1              A UCME FOR THIS CONSOLE...  @OY29019
         BH    CONSBAD             NO, RETURN WITH ERROR       @OY29019
         LR    R1,R10              RESTORE CONSOLE #           @OY29019
         SL    R1,=F'1'            SUBTRACT ONE FROM CONSOLE # @OY29019
         MR    R0,R6               GET INDEX INTO UCMES        @OY29019
         ALR   R1,R5               AND POINT TO CORRECT UCME   @OY29019
         ICM   R5,B'1111',UCMID-UCMLIST(R1) UCME DEFINED ?     @OY29019
         BNZ   CONSRET             YES, EXIT WITH NO ERROR     @OY29019
CONSBAD  LR    R15,8               SET RC FOR INVALID CONS     @OY29019
         B     CONSRET             AND RETURN TO CALLER        @OY29019
CONSHIGH LR    R15,4               SET RC FOR CONS MIG ID      @OY29019
CONSRET $RETURN RC=(R15)           RETURN TO CALLER            @OY29019
         SPACE 1                                               @OY29019
         LTORG ,                                               @OY29019
         SPACE 1                                               @OY29019
         DROP  R8                  DROP LOCAL ADDRESSABILITY   @OY29019
*-------------------------------------------------------- (*3) END ---*
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        WORK-AREAS.                                                  *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
$YLWORK  DSECT
         DS    CL(BUFSTART-BFPDSECT) -------- RESERVED BY JES2 --------
DOUBLE   DS    D                   DOUBLE WORD WORK AREA
DBL      DS    D                   DOUBLE WORD WORK AREA
BUFADDR  DS    F                   ADDRESS OF A JES2 BUFFER
CURRTEXT DS    F                   ADDRESS OF CURRENT SETUP TEXT
JOBNUM   DS    H                   LOW RANGE JOB REQUESTED
WRKLEN   DS    H                   LENGTH OF SETUP TEXT AREA
$YLBLEN  EQU   *-$YLWORK           LENGTH OF BASIC WORK AREA
         SPACE 2
J2XIT005 CSECT ,                   RESTORE THE CSECT ENVIRONMENT
         SPACE 1
        $MODEND
         SPACE 1
         END
