X006     TITLE 'JES2 - EXIT 006 - INTERNAL TEXT SCAN'
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* MODULE NAME : EXIT006                                               *
* DESCRIPTIVE NAME : JES2 EXIT 6 (HOSCNVT SUBTASK OF HASPCNVT)        *
*                    INTERNAL TEXT SCAN                               *
* PURPOSE :     THIS JES2 EXIT ALLOWS YOU TO INTERPRET AN INTERNAL    *
*               TEXT IMAGE AND DECIDE WHETHER JES2 SHOULD EITHER      *
*               CANCEL THE JOB OR LET IT TO CONTINUE WITH NORMAL      *
*               EXECUTION. THIS ROUTINE CAN ALSO MODIFY ANY INTERNAL  *
*               TEXT IMAGE. IN ADDITION, AFTER ALL OF THE JCL FOR A   *
*               PARTICULAR JOB HAS BEEN CONVERTED TO INTERNAL TEXT,   *
*               THIS EXIT AGAIN ALLOWS TO DIRECT JES2 EITHER TO       *
*               CANCEL THE JOB OR TO CONTINUE WITH NORMAL EXECUTION.  *
* INVOCATION POINT : UEXIT006                                         *
* ENVIRONMENT : JES2 SUBTASK                                          *
* REGISTERS AT ENTRY :                                                *
*               R0 : A CODE INDICATING THE STATUS OF CONVERSION       *
*                    PROCESSING                                       *
*                    0 = A JCL STATEMENT HAS BEEN CONVERTED TO AN     *
*                        INTERNAL TEXT IMAGE                          *
*                    4 = ALL OF THE JCL FOR A PARTICULAR JOB HAS BEEN *
*                        CONVERTED TO INTERNAL TEXT                   *
*               R1 : ADDRESS OF A 4-WORD PARAMETER LIST               *
*                    WORD 1 (+0) = ADDRESS OF A 16-BYTE WORK AREA     *
*                           AVAILABLE TO THE INSTALLATION.            *
*                    WORD 2 (+4) = IF THE CODE PASSED IN R0 IS 0,     *
*                           THIS WORD POINTS TO THE ADDRESS OF THE    *
*                           LAST SINGLE INTERNAL TEXT IMAGE CONVERTED *
*                           FROM A JCL STATEMENT. IF THE CODE PASSED  *
*                           IN R0 IS 4, THIS WORD CONTAINS THE        *
*                           ADDRESS OF THE CONVERTER'S RETURN CODE.   *
*                    WORD 3 (+8) = ADDRESS OF THE DTE.                *
*                    WORD 4 (+12) = ADDRESS OF THE JCT.               *
*               R2-R10 : N/A                                          *
*               R11 : ADDRESS OF THE HCT                              *
*               R12 : N/A                                             *
*               R13 : ADDRESS OF AN 18-WORD OS-STYLE SAVE AREA        *
*               R14 : RETURN ADDRESS                                  *
*               R15 : ENTRY ADDRESS                                   *
* REGISTERS ON RETURN :                                               *
*               R0-R14 : AS AT ENTRY                                  *
*               R15 : A RETURN CODE :                                 *
*                     =0, CONTINUE USING ANY ADDITIONAL EXITS         *
*                     =4, CONTINUE WITHOUT USING ANY ADDITIONAL EXITS *
*                     =8, BYPASS EXECUTION AND CANCEL THE JOB, IT IS  *
*                         QUEUED FOR OUTPUT RATHER THAN FOR EXECUTION *
* LINKAGE EDITOR INFO :                                               *
*               ATTRIBUTES : REENTRANT, REUSEABLE, REFRESHABLE        *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* AUTHOR :      JOHN V. HOOPER                                        *
*               FIRST UNION NATIONAL BANK                             *
*               301 SOUTH TRYON STREET                                *
*               CHARLOTTE, N.C. 28288                                 *
*               (704) 374-2427                                        *
*               ORIGIN : J006STDS FROM CBT TAPE 89 FEB, FILE 381.     *
* CHANGES :     ADAPTED TO JES2 2.2.0 BY MOINIL P.A.                  *
*               OUR NEEDS IMPLEMENTATION BASED ON ORIGINAL CODING.    *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* JES2PARM INITIALIZATION STATEMENTS :                                *
*               LOAD=J2XIT006                                         *
*               EXIT006 ROUTINE=UEXIT006,DISABLE,TRACE=YES            *
*                                        ENABLE        NO             *
*                                                                     *
* JES2 OPERATOR CONTROL COMMANDS :                                    *
*               $T EXIT006,DISABLE,TRACE=YES                          *
*                          ENABLE        NO                           *
*               $D EXIT006                                            *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* NOTE :        THE ESTAE ROUTINE, WHEN ENTERED FOR AN ABEND, WILL    *
*               RECOVER TO PROTECT THE CONVERSION SUBTASK FROM ABEND  *
*               AND CONSEQUENT LOSS OF THE JOB.                       *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         EJECT
         COPY  $HASPGBL
         SPACE 1
J2XIT006 $MODULE ENVIRON=SUBTASK,TITLE='JES2 - EXIT 006',              X
               $BUFFER,            GENERATE HASP BUFFER DSECT          X
               $CAT,               GENERATE HASP CAT DSECT             X
               $CNVWORK,           GENERATE HASP CNVWORK DSECT         X
               $DTE,               GENERATE HASP DTE DSECT             X
               $DTECNV,            GENERATE HASP CNV DTE EXTEN         X
               $ERA,               GENERATE HASP ERA DSECT             X
               $HASPEQU,           GENERATE HASP EQUATES               X
               $HCT,               GENERATE HASP HCT DSECT             X
               $JCT,               GENERATE HASP JCT DSECT             X
               $JQE,               GENERATE HASP JQE DSECT             X
               $MIT,               GENERATE HASP MIT DSECT             X
               $PADDR,             GENERATE HASP PADDR DSECT           X
               $PCE,               GENERATE HASP PCE DSECT             X
               $TQE,               GENERATE HASP TQE DSECT             X
               $XECB,              GENERATE HASP EXT ECB DSECT         X
               DEB,                GENERATE MVS DEB DSECT              X
               KEYS,               GENERATE MVS TEXT KEYS EQUATES      X
               NEL,                GENERATE MVS NEL DSECT              X
               RPL,                GENERATE MVS RPL DSECT              X
               SDWA,               GENERATE MVS SDWA DSECT             X
               TEXT,               GENERATE MVS TEXT DSECT             X
               WPL                 GENERATE MVS WPL DSECT
         TITLE 'JES2 - EXIT 006 - INTERNAL TEXT SCAN'
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        EXIT MAIN ENTRY POINT.                                       *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
UEXIT006 $ENTRY BASE=R12
        SAVE   (14,12)             SAVE CALLERS REGISTERS
         LR    R12,R15             ESTABLISH BASE REGISTER
        $AMODE 31                  ENTER 31-BIT MODE
         LR    R8,R1               SAVE INPUT PARM LIST ADDRESS
         L     R10,12(R8)          LOAD JCT ADDRESS
         USING JCT,R10             SET ADDRESSABILITY TO JCT
         LR    R7,R0               SAVE REG 0
         TM    JCTJBOPT,JCTXBACH   IS THIS AN XBATCH JOB
         BO    QUICKOUT            YES, GET OUT IMMEDIATELY
         L     R9,4(R8)            LOAD ADDRESS OF INTERNAL TEXT RECORD
         USING TEXT,R9             SET ADDRESSABILITY TO TEXT RECORD
         L     R15,0(R8)           LOAD ADDRESS OF EXIT WORK AREA
         ICM   R1,B'1111',0(R15)   LOAD GETMAINED AREA ADDRESS (IF ONE)
         BZ    GETMWA              ZERO, GO DO REQUIRED GETMAIN
         ST    R13,4(R1)           SAVE OLD SAVE ADDR IN NEW
         ST    R1,8(R13)           SAVE NEW SAVE ADDR IN OLD
         LR    R13,R1              SAVE NEW SAVE AND WORK AREA ADDRESS
         USING WORKAREA,R13        SET ADDRESSABILITY
         B     ENDGETM             BYPASS GETMAIN
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        GET STORAGE FOR WORK AREAS ON FIRST ENTRY TO EXIT FOR        *
*        THE JOB.                                                     *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
GETMWA   LH    R0,GETMWAL          LOAD GETMAIN SIZE
        GETMAIN R,LV=(0)           GET CORE FOR DYNAMIC SAVE AREA
         LR    R3,R1               SAVE GETMAINED ADDRESS
         LR    R0,R1               CLEAR
         LH    R1,GETMWAL            ENTIRE
         XR    R15,R15                 GETMAINED
         MVCL  R0,R14                    TO ZEROS
         ST    R13,4(R3)           SAVE OLD SAVE ADDR IN NEW
         ST    R3,8(R13)           SAVE NEW SAVE ADDR IN OLD
         LR    R13,R3              SAVE NEW SAVE AND WORK AREA ADDRESS
         L     R15,0(R8)           LOAD ADDRESS OF EXIT WORK AREA
         ST    R13,0(R15)          SAVE GETMAINED ADDRESS IN EXIT WA
         LA    R15,MSGRPL          LOAD OUTPUT RPL ADDRESS
         ST    R15,OUTRPL          SAVE OUTPUT RPL ADDRESS
ENDGETM  ST    R10,JCTADDR         SAVE JCT ADDRESS
         ST    R8,WORKADDR         SAVE EXIT PARM LIST ADDRESS
         ST    R9,TEXTSTAR         SAVE TEXT STARTING ADDRESS
         L     R8,8(R8)            LOAD DTE ADDRESS
         ST    R8,DTEADDR          SAVE DTE ADDRESS
         USING DTE,R8              SET ADDRESSABILITY TO DTE
         LA    R1,DCNVMSG          LOAD OUTPUT ACB ADDRESS
         ST    R1,OUTACB           SAVE OUTPUT ACB ADDRESS
         DROP  R8                  DROP ADDRESSABILITY TO DTE
         L     R1,JCTJQE           LOAD JQE OFFSET
         N     R1,$ZEROFFF         CLEAR HIGH ORDER BYTE
         AL    R1,$JOBQPTR         GET ACTUAL JQE ADDRESS
         ST    R1,JQEADDR          SAVE JQE ADDRESS
         MVC   JBNAME,JCTJNAME     SAVE JOB NAME
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        ESTABLISH ESTAE ENVIRONMENT.                                 *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
         MVC   ESTAEL(LESTAEL),ESTAEX INITIALIZE ESTAE LIST FORM
         STM   R14,R12,STAEREGS+12 SAVE CURRENT REGISTERS
         LA    R1,ESTAEL           LOAD ADDRESS OF ESTAE LIST FORM
        ESTAE  STAEXIT,CT,PARAM=(13),XCTL=NO,PURGE=NONE,ASYNCH=NO,     X
               RECORD=YES,TERM=NO,MF=(E,(1))
         LTR   R0,R7               INDIVIDUAL ENTRY FOR INTERNAL TEXT
         BNZ   EOF                 NO, GET OUT
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        SOME TYPES OF ERRORS DETECTED BY THE CONVERTER TURN ON       *
*        BITS IN THE JCTCNVRC FIELD WHICH WILL FAIL THE JOB WHEN      *
*        THE CONVERTER COMPLETES. THESE BITS WILL BE TESTED, AND      *
*        IF THE JOB IS TO BE FAILED, A QUICK PATH THROUGH THE         *
*        EXIT WILL BE MADE.                                           *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
CHECKJCT TM    MSGIND,SEVERE       SEE IF SEVERE ERROR HAS OCCURRED
         BO    GETNEXT             YES, IGNORE THIS ENTRY
         LA    R15,JCTCJCL         SET JCL ERROR IN CONVERTER RTN CODE
         C     R15,JCTCNVRC        TEST CONVERTER RETURN CODE
         BE    BADERROR            BAD, GO PROCESS SEVERE ERROR
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        SELECT STATEMENT PROCESS.                                    *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
         TM    STRINDCS,JOBSTR     JOB STATEMENT?
         BO    JOBSTMT             YES, BRANCH
         TM    STRINDCS,EXECSTR    EXEC STATEMENT?
         BO    EXECSTMT            YES, BRANCH
         TM    STRINDCS,DDSTR      DD STATEMENT?
         BO    GETNEXT             YES, BRANCH
         TM    STRINDCS,PROCSTR    PROC STATEMENT?
         BO    GETNEXT             YES, BRANCH
         TM    STRINDCS,JDVBSTR    JDT OUTPUT STATEMENT?
         BO    GETNEXT             YES, BRANCH
         L     R15,=A(MSGINV)      SET ERROR MSG ADDRESS
         BAL   R14,ERMRTN          GO ISSUE ERROR MSG
         B     GETNEXT             GO GET ANOTHER STATEMENT
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                      J O B    S T A T E M E N T                     *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* PURPOSE :    SET THE NEW EXECUTION CLASS AND THE NEW PERFORMANCE    *
*              GROUP, DELETE AN EVENTUAL PRTY= IF SPECIFIED AND ADD   *
*              A TIME=DEFAULT IF NOT SPECIFIED.                       *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
JOBSTMT  TM    JCTJOBFL,JCTBATCH   TEST FOR BATCH JOB
         BZ    GETNEXT             NO, GO GET ANOTHER STATEMENT
         ICM   R15,B'1000',=AL1(CLASSJK) GET 'CLASS=' KEY
         LA    R6,STRJKEY          POINT TO FIRST KEYWORD SEQUENCE
         BAL   R5,XINTKEY          TRY TO LOCATE KEYWORD
         BZ    JOBPERF             IF MISSING, OK
         MVC   3(1,R6),JCTJCLAS    PUT CLASS IN INTERNAL TEXT
JOBPERF  CLI   JCTUSER0,0          IF SPECIAL PROGRAM
         BE    JOBPRTY             DO NOT CHECK PERFORM
         ICM   R15,B'1000',=AL1(PRFMJK) GET 'PERFORM=' KEY
         LA    R6,STRJKEY          POINT TO FIRST KEYWORD SEQUENCE
         BAL   R5,XINTKEY          TRY TO LOCATE KEYWORD
         BZ    JOBPRFO             BRANCH IF MISSING
         XR    R2,R2
         IC    R2,JCTUSER0         GET PERFORM VALUE (IEFUJV)
         CVD   R2,DOUBLE
         UNPK  3(3,R6),DOUBLE+6(2) SET EBCDIC PERFORM VALUE
         OI    5(R6),C'0'
         B     JOBPRTY             GO BACK TO MAIN LINE
JOBPRFO  MVC   0(L'XPRFMTXT,R6),XPRFMTXT MOVE 'PERFORM=' TEXT TO
         MVI   0(R6),PRFMJK        'PERFORM=' KEY FOR A JOB
         XR    R2,R2
         IC    R2,JCTUSER0         GET PERFORM VALUE (IEFUJV)
         CVD   R2,DOUBLE
         UNPK  3(3,R6),DOUBLE+6(2) SET EBCDIC PERFORM VALUE
         OI    5(R6),C'0'
         LH    R5,STRLTH           GET LENGTH OF JOB TEXT STRING
         LA    R5,L'XPRFMTXT-1(,R5) AND ADD LENGTH OF NEW TEXT
         STH   R5,STRLTH           STORE UPDATED STRING LENGTH
JOBPRTY  ICM   R15,B'1000',=AL1(PRTYJK) GET 'PRTY=' KEY
         LA    R6,STRJKEY          POINT TO FIRST KEYWORD SEQUENCE
         BAL   R5,XINTKEY          TRY TO LOCATE KEYWORD
         BZ    JOBTIME             IF MISSING, OK
         BAL   R5,XDELET           DELETE KEY
JOBTIME  ICM   R15,B'1000',=AL1(TIMEJK) GET 'TIME=' KEY
         LA    R6,STRJKEY          POINT TO FIRST KEYWORD SEQUENCE
         BAL   R5,XINTKEY          TRY TO LOCATE KEYWORD
         BNZ   GETNEXT             SKIP IF SUCCESSFUL
         MVC   0(L'XPRFMTXT,R6),XPRFMTXT MOVE 'PERFORM=' TEXT TO
         MVI   0(R6),TIMEJK        'TIME=' KEY FOR A JOB
         L     R3,JCTETIME         GET ESTIMATED TIME (DEFAULT)
         XR    R2,R2
         D     R2,=F'60'           COMPUTE MINUTES
         CVD   R3,DOUBLE
         UNPK  3(3,R6),DOUBLE+6(2) MOVE EBCDIC TIME
         OI    5(R6),C'0'
         LH    R5,STRLTH           GET LENGTH OF TIME TEXT STRING
         LA    R5,L'XPRFMTXT-1(,R5) AND ADD LENGTH OF NEW TEXT
         STH   R5,STRLTH           STORE UPDATED STRING LENGTH
         B     GETNEXT             GO GET ANOTHER STATEMENT
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                     E X E C    S T A T E M E N T                    *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* PURPOSE :    DELETE ANY EVENTUAL PERFORM=, DPRTY= AND ACCT=, THEN   *
*              ADD THE NEW PERFORMANCE GROUP.                         *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
EXECSTMT TM    JCTJOBFL,JCTSTCJB   TEST FOR STARTED RASK
         BZ    *+L'*+8             BRANCH IF NOT
         TM    STREINDC,ETXPRCV    TEST FOR 'EXEC PROC='
         BO    GETNEXT             YES, GO GET ANOTHER STATEMENT
         TM    JCTJOBFL,JCTBATCH   ONLY FOR BATCH
         BZ    EXPERFM             BRANCH IF NOT BATCH
         ICM   R15,B'1000',=AL1(PRFMEEK) GET PERFORM= KEY
         LA    R6,STREKEY          GET ADDRESS OF FIRST EXEC KEY
         BAL   R5,XINTKEY          AND TRY TO LOCATE DESIRED KEY
         BZ    EXPERFP             IF KEY NOT SPECIFIED
         BAL   R5,XDELET           DELETE KEY
EXPERFP  ICM   R15,B'1000',=AL1(PRFMPEK) GET PERFORM. KEY
         LA    R6,STREKEY          GET ADDRESS OF FIRST EXEC KEY
         BAL   R5,XINTKEY          AND TRY TO LOCATE DESIRED KEY
         BZ    EXDPRTY             IF KEY NOT SPECIFIED
         BAL   R5,XDELET           DELETE KEY
EXDPRTY  ICM   R15,B'1000',=AL1(SDPPEK) GET DPRTY= KEY
         LA    R6,STREKEY          GET ADDRESS OF FIRST EXEC KEY
         BAL   R5,XINTKEY          AND TRY TO LOCATE DESIRED KEY
         BZ    EXDPRTP             IF KEY NOT SPECIFIED
         BAL   R5,XDELET           DELETE KEY
EXDPRTP  ICM   R15,B'1000',=AL1(SDPEEK) GET DPRTY. KEY
         LA    R6,STREKEY          GET ADDRESS OF FIRST EXEC KEY
         BAL   R5,XINTKEY          AND TRY TO LOCATE DESIRED KEY
         BZ    EXACCT              IF KEY NOT SPECIFIED
         BAL   R5,XDELET           DELETE KEY
EXACCT   ICM   R15,B'1000',=AL1(ACCTEEK) GET ACCT= KEY
         LA    R6,STREKEY          GET ADDRESS OF FIRST EXEC KEY
         BAL   R5,XINTKEY          AND TRY TO LOCATE DESIRED KEY
         BZ    EXACCP              IF KEY NOT SPECIFIED
         BAL   R5,XDELET           DELETE KEY
EXACCP   ICM   R15,B'1000',=AL1(ACCTPEK) GET ACCT. KEY
         LA    R6,STREKEY          GET ADDRESS OF FIRST EXEC KEY
         BAL   R5,XINTKEY          AND TRY TO LOCATE DESIRED KEY
         BZ    EXPERFM             IF KEY NOT SPECIFIED
         BAL   R5,XDELET           DELETE KEY
EXPERFM  TM    STREINDC,ETXPRCV    TEST FOR 'EXEC PROC='
         BO    GETNEXT             YES, GO GET ANOTHER STATEMENT
         IC    R4,JCTJCLAS         GET JOB CLASS FROM JCT
         N     R4,=A(X'3F')        DERIVE RELATIVE CAT ENTRY
         MH    R4,=Y(CATLEN)       MULTIPLY BY CAT ENTRY LENGTH
         AL    R4,$CATABLE         GET CAT ENTRY ADDRESS
         USING CAT,R4              PROVIDE CAT ADDRESSABILITY
         CLC   CATPERFM,=C'000'    MUST WE SCAN FOR 'PERFORM='...
         BE    GETNEXT             NO, GO GET ANOTHER STATEMENT
         ICM   R15,B'1000',XPRFMKEY GET 'PERFORM=' KEY
         LA    R6,STREKEY          GET ADDRESS OF FIRST EXEC KEY
         BAL   R5,XINTKEY            AND TRY TO LOCATE DESIRED KEY
         BNZ   GETNEXT             BRANCH IF KEYWORD ALREADY SPECIFIED
         MVC   0(L'XPRFMTXT,R6),XPRFMTXT MOVE 'PERFORM=' TEXT TO
         MVC   3(L'CATPERFM,R6),CATPERFM END OF TEXT STRING
         DROP  R4                  DROP ADDRESSABILITY TO CAT
         CLI   JCTUSER0,0          IF SPECIAL PROGRAM
         BE    EXSETL              SKIP NEXT SETTING
         XR    R2,R2
         IC    R2,JCTUSER0         GET PERFORM VALUE (IEFUJV)
         CVD   R2,DOUBLE
         UNPK  3(3,R6),DOUBLE+6(2) SET EBCDIC PERFORM VALUE
         OI    5(R6),C'0'
EXSETL   LH    R5,STRLTH           GET LENGTH OF EXEC TEXT STRING
         LA    R5,L'XPRFMTXT-1(,R5) AND ADD LENGTH OF NEW TEXT
         STH   R5,STRLTH           STORE UPDATED STRING LENGTH
         B     GETNEXT             GO GET ANOTHER STATEMENT
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*      L O C A T E   K E Y   W I T H I N   T E X T   S T R I N G      *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* ON INPUT :   R6 POINTS TO 1ST KEYWORD SEQUENCE IN TEXT              *
*              HI-ORDER BYTE OF R15 CONTAINS KEY                      *
*              R5 = LINK REGISTER                                     *
* ADDRESS OF KEYWORD SEQUENCE (IF FOUND) RETURNED IN R6               *
*              NON-ZERO RETURN CODE : R6 POINTS TO KEYWORD SEQUENCE   *
*              ZERO RETURN CODE : R6 POINTS TO END-OF-TEXT BYTE       *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
XINTKEY  XR    R2,R2               CLEAR R2 FOR WORK
         LR    R3,R2               CLEAR R3 FOR WORK
XINTNEXT ICM   R2,B'0001',1(R6)    SET R2 TO NUMBER OF PARMS
         LA    R6,2(,R6)           GET ADDRESS OF FIRST PARM (IF ANY)
         BZ    XGOTKEY             BRANCH IF NONE
XFINDBYT ICM   R3,B'0001',0(R6)    SET R3 TO PARM LENGTH
         BM    XFINDSUB            BRANCH IF SUBPARM COUNT
         LA    R6,0(R6,R3)           ELSE GET ADDRESS OF NEXT PARM
XFINDLUP LA    R6,1(,R6)           SKIP OVER LENGTH BYTE
         BCT   R2,XFINDBYT         BRANCH IF MORE PARMS TO SKIP
XGOTKEY  CLI   0(R6),ENDK          TEST KEY TYPE
         BER   R5                  RETURN IF END OF TEXT STRING
         CLM   R15,B'1000',0(R6)     ELSE TEST FOR DESIRED KEY
         BNE   XINTNEXT            BRANCH IF NO
         SLR   R2,R2                 ELSE SET NON-ZERO RETURN CODE
         BR    R5                    AND RETURN
XFINDSUB SL    R3,=A(X'80')        CLEAR HI-ORDER BIT OF SUBPARM COUNT
         ALR   R2,R3               ADD SUBPARM COUNT TO PARM COUNT
         B     XFINDLUP              AND RESUME PARM FIELD SCAN
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*      D E L E T E   K E Y   W I T H I N   T E X T   S T R I N G      *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
* ON INPUT :   R6 POINTS TO KEYWORD SEQUENCE IN TEXT (SEE NON-ZERO    *
*              RETURN CODE OF "XINTKEY")                              *
*              R5 = LINK REGISTER                                     *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
XDELET   LR    R2,R6               'TO' OPERAND
         LR    R6,R5               SAVE RETURN REGISTER
         XR    R5,R5               CLEAR WORK REGISTER
         XR    R3,R3               CLEAR WORK REGISTER
         IC    R3,1(R2)            COUNT OF SUBPARM
         LA    R4,2(R2)            'FROM' OPERAND INITIAL
XDLEOP   LTR   R3,R3               ANY SUBPARM
         BZ    XDLDOIT             IF NO SUBPARM LEFT
         IC    R5,0(R4)            NEXT PARM LENGTH
         LA    R4,1(R4,R5)         TO NEXT SUBPARM
         BCT   R3,XDLEOP           SCAN NEXT SUBPARM
XDLDOIT  LR    R3,R4               IN R3 'FROM' LOCATION
         SR    R3,R2               - 'TO', IN R3 KEY LENGTH
         LH    R5,STRLTH           ORIGINAL STRING LENGTH
         SR    R5,R3               - KEYWORD LENGTH
         STH   R5,STRLTH           STORE MODIFIED LENGTH
         LA    R3,STRLTH           STRING START ADDRESS
         LCR   R3,R3               NEGATIVE START ADDRESS
         AR    R3,R2               'TO' DISPLACEMENT
         SR    R5,R3               = MVCL LENGTH
         LR    R3,R5               = MVCL LENGTH
         MVCL  R2,R4               SHIFT LEFT INTERNAL TEXT
         BR    R6                  GO BACK TO CALLER
         SPACE 1
         DROP  R9                  DROP ADDRESSABILITY TO TEXT RECORD
         DROP  R10                 DROP ADDRESSABILITY TO JCT
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        RETURN TO JES2 REQUESTING THE NEXT INTERNAL TEXT STATEMENT.  *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
GETNEXT  L     R1,STMTNO           LOAD CARD NUMBER FIELD
         LA    R1,1(,R1)           ADD 1 TO CARD NUMBER
         ST    R1,STMTNO           STORE NEW CARD NUMBER
         LA    R1,ESTAEL           LOAD ADDRESS OF ESTAE LIST FORM
        ESTAE  0,MF=(E,(1))        CANCEL ESTAE ENVIRONMENT
         L     R13,4(,R13)         RESTORE ORIGINAL REG 13
QUICKOUT XR    R10,R10             SET RETURN CODE TO ZERO
         B     LEAVE               EXIT TO JES2
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        ALL OF THE JCL FOR THE JOB HAS BEEN CONVERTED TO             *
*        INTERNAL TEXT.                                               *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
EOF      XR    R10,R10             SET RETURN CODE TO ZERO
         TM    JOBIND,JOBFAIL      WAS JOB FAILED BY EXIT?
         BO    JOBERROR            YES, BRANCH
         TM    MSGIND,WARNING      WAS JOB WARNED BY EXIT?
         BZ    ENDOFIT             NO, BRANCH
         L     R1,=A(WTO1)
         MVC   WTOLIST(LWTO1),0(R1) SET WTO LIST FORM
         B     SNDWTO              GO DO WTO
JOBERROR LA    R10,8               SET JOB FAIL RETURN CODE
         TM    MSGIND,SEVERE       WAS JOB SEVERE BY EXIT?
         BO    JBFSERR             NO, BRANCH
         L     R1,=A(WTO2)
         MVC   WTOLIST(LWTO2),0(R1) SET WTO LIST FORM
         B     SNDWTO              GO DO WTO
JBFSERR  L     R1,=A(WTO3)
         MVC   WTOLIST(LWTO3),0(R1) SET WTO LIST FORM
SNDWTO   MVC   WTOLIST+13+4(8),JBNAME MOVE JOBNAME TO MESSAGE
        $$WTO  WTOLIST             WRITE ERROR MESSAGE
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                           C L E A N    U P                          *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
ENDOFIT  LA    R1,ESTAEL           LOAD ADDRESS OF ESTAE LIST FORM
        ESTAE  0,MF=(E,(1))        CANCEL ESTAE ENVIRONMENT
         L     R1,WORKADDR         LOAD ADDRESS OF EXIT PARM LIST
         L     R1,0(R1)            LOAD ADDRESS OF EXIT WORK AREA
         XC    0(16,R1),0(R1)      CLEAR EXIT WORK AREA
         LH    R0,GETMWAL          LOAD FREEMAIN SIZE
         LR    R1,R13              SAVE WORKAREA ADDRESS
         L     R13,4(,R13)         RESTORE ORIG REG 13
        FREEMAIN R,LV=(0),A=(1)
LEAVE   $AMODE 24                  BACK TO 24-BIT MODE
         LR    R15,R10             SET RETURN CODE
        RETURN (14,12),RC=(15)     GO BACK TO JES2
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*              M E S S A G E    R O U T I N E    (ERMRTN)             *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        THIS ROUTINE WILL WRITE A MESSAGE WHICH IS POINTED TO        *
*        BY REGISTER 15 (AS DESCRIBED BELOW) TO THE JES2 MESSAGE      *
*        DATA-SET AND USE THE "STMTNO" FOR THE STATEMENT NUMBER       *
*        IN THE MESSAGE PREFIX.                                       *
*                         DC    AL1(L'MESSAGE-1)                      *
*        R15 --- MESSAGE  DC    C'...MESSAGE TEXT...'                 *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
         USING IFGRPL,R6           SET ADDRESSABILITY
ERMRTN   STM   R14,R12,SAVEREGS    SAVE REGISTERS
         L     R6,OUTRPL           GET BASE FOR RPL
         LR    R2,R15              SAVE MESSAGE ADDRESS
         L     R3,STMTNO           LOAD CARD NUMBER
         CVD   R3,DOUBLE           CONVERT CARD NUMBER TO PACKED
         MVI   BUFFER,C' '         CLEAR BUFFER
         MVC   BUFFER+1(L'BUFFER),BUFFER
         L     R4,MSGCOUNT         LOAD MESSAGE COUNTER
         LTR   R4,R4               SEE IF FIRST MESSAGE
         BNZ   ERMRTN1             NO, DO NOT PUT HEADERS
         L     R15,=A(HEADER1)
         MVC   BUFFER(L'HEADER1),0(R15) MOVE HEADER LINE1 TO BUFFER
         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET
         B     ERMRTNX             +0 - GET OUT
         MVI   BUFFER,C' '         +4 - CLEAR BUFFER
         MVC   BUFFER+1(L'BUFFER),BUFFER
         L     R15,=A(HEADER2)
         MVC   BUFFER(L'HEADER2),0(R15) MOVE HEADER LINE2 TO BUFFER
         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET
         B     ERMRTNX             +0 - GET OUT
         MVI   BUFFER,C' '         +4 - CLEAR BUFFER
         MVC   BUFFER+1(L'BUFFER),BUFFER
ERMRTN1  LA    R4,1(,R4)           ADD 1 TO MESSAGE COUNT
         ST    R4,MSGCOUNT         SAVE MESSAGE COUNTER
         MVC   MSGPREF,PREFIX      MOVE MSG PREFIX TO BUFFER
         ED    MSGPREF(6),DOUBLE+5 EDIT CARD NUMBER TO PREFIX
         BCTR  R2,0
         XR    R1,R1
         IC    R1,0(R2)
         EX    R1,ERMRTNM          MOVE PROPER MSG TO BUFFER
         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET
         B     ERMRTNX             +0 - GET OUT
         CLI   MSGTLVL,C'E'        +4 - IS THIS AN ERROR MESSAGE
         BNE   ERMRTN2             BRANCH IF NOT
         OI    JOBIND,JOBFAIL      YES, TURN ON JOB FAILED IND
         B     ERMRTN3             GET OUT
ERMRTN2  CLI   MSGTLVL,C'W'        IS THIS A WARNING MSG
         BNE   ERMRTN3             NO, JUST GET OUT
         OI    MSGIND,WARNING      TURN ON JOB WARNED IND
ERMRTN3  MVI   BUFFER,C' '         +4 - CLEAR BUFFER
         MVC   BUFFER+1(L'BUFFER),BUFFER
         LM    R14,R12,SAVEREGS    RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
ERMRTNX  LM    R14,R12,SAVEREGS    RESTORE REGISTERS
         B     JOBERROR            GET OUT
ERMRTNM  MVC   MSGTEXT,1(R2)       <<EXECUTED>>
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        WRITE MESSAGE TO JES2 MESSAGE DATA-SET.                      *
*        LOCAL ROUTINE : R5 = LINK REGISTER.                          *
*                        RETURN = +0 - PUT ERROR.                     *
*                                 +4 - OK, PUT DONE.                  *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
PUTMSG   MVI   RPLREQ,RPLPUT       OPERATION TO BE A PUT
         L     R0,OUTACB           LOAD OUTPUT ACB ADDRESS
         ST    R0,RPLDACB          SET IN ACB POINTER IN RPL
         LA    R0,BUFFER           LOAD ADDR OF BUFFER
         ST    R0,RPLAREA          POINT TO BUFFER
         XC    RPLARG(4),RPLARG    ZERO FIELD
         MVI   RPLOPT1,RPLSEQ      OPERATION TO BE SEQUENTIAL
         MVI   RPLOPT2,0           ZERO FIELD
         LA    R0,100              LOAD MESSAGE LENGTH
         ST    R0,RPLRLEN          STORE MESSAGE LENGTH
         XC    RPLBUFL(4),RPLBUFL  ZERO FIELD
         XC    RPLDDDD(4),RPLDDDD  ZERO FIELD
         ST    R13,PUTSAVE+72      SAVE SAVE AREA POINTER
         LA    R13,PUTSAVE         SAVE AREA FOR ACCESS METHOD
         LA    R1,IFGRPL           LOAD ADDR OF RPL
        PUT    RPL=(1)             WRITE TO MESSAGE DATA SET
         L     R13,72(R13)         RESTORE SAVE AREA POINTER
         LTR   R15,R15             TEST RETURN CODE
         BZ    4(R5)               RETURN TO CALLER
         L     R1,=A(WTO4)
         MVC   WTOLIST(LWTO4),0(R1) SET WTO LIST FORM
         MVC   WTOLIST+13+4(8),JBNAME MOVE JOBNAME TO MESSAGE
        $$WTO  WTOLIST             WRITE ERROR MESSAGE
         BR    R5                  RETURN TO CALLER
         DROP  R6
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                            S T A E X I T                            *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        THIS ROUTINE GETS CONTROL FOR EVERY ABEND OCCURRING IN       *
*        THE EXIT. THIS ROUTINE WILL ISSUE AN APPROPRIATE MESSAGE     *
*        TO THE OPERATOR AND TAKE A CONSOLE DUMP FOR PROBLEM          *
*        RESOLUTION. RETRY WILL BE ATTEMPTED FOR ALL ABENDS           *
*        WHICH WILL SET A FAST PATH THROUGH THE EXIT AND              *
*        TERMINATE THE JOB. NOTE THAT THERE IS A RECURSION            *
*        CHECK TO PROTECT FROM ABEND LOOPS.                           *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
         DROP  R12                 DROP GLOBAL ADDRESSABILITY
STAEXIT  LR    R8,R15              SET NEW BASE ADDRESS
         USING STAEXIT,R8          SET LOCAL ADDRESSABILITY
         CH    R0,=H'12'           SEE IF CORE AVAILABLE
         BE    STAENO              NO, BRANCH
        SAVE   (14,12)             SAVE REGISTERS
         L     R2,0(R1)            LOAD PARAMETER ADDRESS
         L     R11,STAEREGS+64-WORKAREA(R2) RESTORE HCT ADDRESS
         LA    R3,STAESAVE-WORKAREA(R2) LOAD ADDRESS OF NEW SAVE
         ST    R3,8(,R13)          SAVE NEW SAVE ADDRESS IN OLD
         ST    R13,4(,R3)          SAVE OLD SAVE ADDRESS IN NEW
         LR    R13,R3              SET NEW SAVE ADDRESS
         LR    R3,R1               SAVE SDWA ADDRESS
         LA    R0,L'WTO5           LOAD LENGTH OF MESSAGE
         LA    R1,WTOLIST-WORKAREA(R2) LOAD ADDRESS OF WTO LIST FORM
         L     R15,=A(WTO5)
         MVC   0(LWTO5,R1),0(R15)  SET WTO LIST FORM
         LA    R15,JBNAME-WORKAREA(R2) LOAD ADDRESS OF JOB NAME
         MVC   13+4(8,R1),0(R15)   MOVE JOBNAME TO MESSAGE
        $$WTO  (R1)                WRITE ERROR MESSAGE
         CLI   RECURS-WORKAREA(R2),X'FF' SEE IF RECURSIVE ABEND
         BE    STAENO              YES, TELL ABEND NOT TO RETRY
         MVI   RECURS-WORKAREA(R2),X'FF' PREVENT RECURSIVE ABEND RETRY
         LA    R1,SDUMPL-WORKAREA(R2) LOAD ADDRESS OF SDUMP LIST FORM
         MVC   0(LSDUMPL,R1),SDUMPX INITIALIZE SDUMP LIST FORM
        SDUMP  MF=(E,(1))          TAKE SYSTEM DUMP
         L     R13,4(,R13)         RESTORE ORIGINAL REG 13
         LR    R1,R3               RESTORE SDWA ADDRESS
        SETRP  REGS=(14,12),DUMP=IGNORE,RC=4,FRESDWA=YES,              X
               RETADDR=STAERTRY
STAENO   LA    R0,STAERTRY         LOAD RETRY ADDRESS
         LA    R15,4               SET RETURN CODE TO RETRY
         BR    R14                 GO RETRY
         SPACE 1
         DROP  R8                  DROP LOCAL ADDRESSABILITY
         USING UEXIT006,R12        RESTORE GLOBAL ADDRESSABILITY
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                           S T A E R T R Y                           *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        RESTORE ORIGINAL REGISTERS AND GET OUT.                      *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
STAERTRY LR    R13,R1              RESTORE GETMAINED AREA ADDRESS
         LM    R14,R12,STAEREGS+12 RESTORE REGISTERS
         SPACE 1
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                           B A D E R R O R                           *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        A BAD ERROR HAS OCCURRED, AND A FAST PATH THROUGH THE        *
*        EXIT MUST BE FACILITATED.                                    *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
BADERROR OI    MSGIND,SEVERE       TURN ON SEVERE INDICATOR
         OI    JOBIND,JOBFAIL      TURN ON JOB FAILED INDICATOR
         B     GETNEXT             GO GET NEXT CARD
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*        CONSTANTS USED BY EXIT.                                      *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
ESTAEX  ESTAE  STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X
               TERM=NO,MF=L
SDUMPX  SDUMP  HDR='JES2 J2XIT006 CONVERTER TIME ESTAE',MF=L
GETMWAL  DC    0H'0',AL2(WASIZE)   SIZE OF GETMAIN AREA
PREFIX   DC    0CL11' ',XL6'402020202120',CL5' ' NORMAL MESSAGE PREFIX
XPRFMKEY DC    AL1(PRFMEEK,1,L'CATPERFM),(L'CATPERFM)X'0',AL1(ENDK)
XPRFMTXT EQU   XPRFMKEY,*-XPRFMKEY LABEL AND LENGTH FOR ABOVE TEXT
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                       L I T E R A L    P O O L                      *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
        LTORG
         SPACE 1
PATCH    DC    128S(*)
         DC    CL8'ENDPATCH'
         SPACE 1
         DROP  R12                 END OF BASE ADDRESSABILITY
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                          W O R K - A R E A                          *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
WORKAREA DSECT
         DS    18F                 NEW SAVE AREA
SAVEREGS DS    18F                 ROUTINE REGISTER SAVE AREA
STAEREGS DS    18F                 REGISTERS FOR ESTAE RECOVERY
STAESAVE DS    18F                 SAVE AREA FOR ESTAE ROUTINE
DOUBLE   DS    D                   DOUBLE WORD FOR PACK & CVB
PUTSAVE  DS    19F                 PUT SAVE AREA
WORKADDR DS    F                   EXIT PARM LIST ADDRESS
JCTADDR  DS    F                   ADDRESS OF JCT
JQEADDR  DS    F                   ADDRESS OF JQE
DTEADDR  DS    F                   ADDRESS OF DTE
TEXTSTAR DS    F                   START ADDRESS OF INTERNAL TEXT
STMTNO   DS    F                   CARD NUMBER FOR MSG ROUTINE
OUTRPL   DS    F                   ADDR OF OUTPUT RPL
OUTACB   DS    F                   ADDR OF JOB MESSAGE DATA-SET ACB
MSGCOUNT DS    F                   MESSAGE COUNT FOR MSG ROUTINE
MSGRPL   DS    19F                 SKELETON RPL FOR OUTPUT MSG DATA-SET
JBNAME   DS    CL8                 JOB NAME
RECURS   DS    XL1                 RECURSIVE ABEND INDICATOR
JOBIND   DS    XL1                 JOB RELATED INDICATORS
JOBFAIL  EQU   X'02'               JOB FAILED EXIT TESTING
MSGIND   DS    XL1                 MSG RELATED INDICATORS
SEVERE   EQU   X'02'               A SEVERE ERROR HAS OCCURRED
WARNING  EQU   X'04'               JOB WARNING MESSAGES WRITTEN
MSGPREF  DS    0CL11               ERROR MESSAGE PREFIX
         DS    CL1                 EDIT FILL CHARACTER
BUFFER   DS    0CL100              JES2 MESSAGE AREA
         DS    CL10                REST OF MESSAGE PREFIX
MSGTEXT  DS    CL90                TEXT OF ERROR MESSAGE
MSGTLVL  EQU   MSGTEXT+6
WTOLIST  DS    CL120               SET WTO LIST FORM
ESTAEL   ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X
               TERM=NO,MF=L
LESTAEL  EQU   *-ESTAEL
SDUMPL   SDUMP HDR='JES2 J2XIT006 CONVERTER TIME ESTAE',MF=L
LSDUMPL  EQU   *-SDUMPL
WASIZE   EQU   (((*-WORKAREA)+7)/8)*8   LENGTH OF WORK AREA
         SPACE 1
J2XIT006 CSECT ,                   RESTORE THE CSECT ENVIRONMENT
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                          W T O - L I S T S                          *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
        $MID   901
WTO1    WTO    '&MID.JOB XXXXXXXX - WARNING ERROR(S) DETECTED',        X
               ROUTCDE=(2),DESC=(4),MF=L
LWTO1    EQU   *-WTO1
        $MID  902
WTO2    WTO    '&MID.JOB XXXXXXXX - FAILING ERROR(S) DETECTED',        X
               ROUTCDE=(2),DESC=(4),MF=L
LWTO2    EQU   *-WTO2
        $MID  903
WTO3    WTO    '&MID.JOB XXXXXXXX - SEVERE ERROR(S) DETECTED',         X
               ROUTCDE=(2),DESC=(4),MF=L
LWTO3    EQU   *-WTO3
        $MID   904
WTO4    WTO    '&MID.JOB XXXXXXXX - PUT TO MESSAGE DATA-SET FAILED',   X
               ROUTCDE=(2),DESC=(4),MF=L
LWTO4    EQU   *-WTO4
        $MID   905
WTO5    WTO    '&MID.JOB XXXXXXXX - JES2/J2XIT006 EXIT ABEND',         X
               ROUTCDE=(2),DESC=(4),MF=L
LWTO5    EQU   *-WTO5
         EJECT
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
*                     M E S S A G E S    (ERMRTN)                     *
*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*
         SPACE 1
HEADER1  DC    C' STMT NO. MESSAGE'
HEADER2  DC    C'- '
         DC    AL1(L'MSGINV-1)
MSGINV   DC    C'EU-001I INTERNAL ERROR - INVALID TEXT STATEMENT TYPE DX
               ETECTED.'
         SPACE 1
        $MODEND
         SPACE 1
         END
