         MACRO
&NAME    QSTART  &QNUM,&TYPE=,&WORKLEN=,&STACK=
.*--------------------------------------------------------------------*
.*                                                                    *
.*  QSTART - Do O/S housekeeping at start of a routine                *
.*                                                                    *
.*  Note:  &QNUM is not used -- it is for historical purposes only    *
.*                                                                    *
.*  Updates:                                                          *
.*     05Jun89  LDW  Utilize special LINK SVC to run SUPR mode        *
.*     23Mar89  LDW  Move .ALL1 to ANOP to keep ASMF happy            *
.*     21Feb87  LDW  Invoke new QHASPEQU macro to generate misc       *
.*                      equates needed for JES2 macros                *
.*     01Jan86  LDW  SPLEVEL SET=1 (If you don't have SPLEVEL, you'll *
.*                      to create a dummy macro that does nothing)    *
.*     30Nov86  LDW  Ok, Jack, I broke down and changed the _ to -    *
.*                      in the id field                               *
.*     22JUN86  LDW  Use &@@ACF2 instead of &QACF2                    *
.*              LDW  Support PRINT=ALL for debugging                  *
.*     03/30/86 LDW  Fix bug in 'ENTRY' creaded by previous update    *
.*     02/23/86 LDW  Don't clobber R0 (sometimes used as a parm reg)  *
.*     01/21/85 LDW  Correct asm errors for 'NOACF2' option           *
.*     12/05/84 LDW  Set local workarea size via LA/ST instead of     *
.*                      MVC, so don't get addressibility errors in    *
.*                      large routines                                *
.*     08/07/84 LDW  Drop all registers at start (needed because      *
.*                      some stupid JES2/SP134 macros do USINGs)      *
.*                   Add SYSPARM support for ALTCCH                   *
.*     08/02/84 LDW  Add support for SYSPARM and TYPE=COMMON          *
.*     01/17/84 LDW  Add support for command stacking                 *
.*     03/04/83 LDW  Change USING/DROP to USNGX/DROPX, add INUSE      *
.*     01/27/83 LDW  ACF2 SP support                                  *
.*     01/19/83 LDW  Fix bug:  need WORKLEN= for TYPE=ENTRY also      *
.*     01/04/83 LDW  Add support for WORKLEN=                         *
.*     12/14/82 LDW  Skip blurb if &DOC=NOGEN                         *
.*                                                                    *
.*--------------------------------------------------------------------*
.*
.*  Suppress comments around QGLOBALS
         AIF   ('&SYSPARM'(1,9) EQ 'PRINT=ALL').ALL1
         PRINT OFF                                                    1
.ALL1    ANOP
         COPY  QGLOBALS
         SPLEVEL  SET=1
.***     AIF   (&QLEVEL LT 4 OR &@@ACF2 EQ 0).NACF2J2
.***     #ACFJES2  ,                    Set &ACF2JCT
.*** .NACF2J2 PRINT ON,&PRINT                                         2
         PRINT ON,&PRINT                                              2
         GBLB  &QBLURB                  Blurb given for this assembly
         GBLC  &QSECT                   Name of current routine
         GBLC  &QSWRKLN                 Name of WORKLEN constant
         LCLA  &IDL,&PARMLEN,&PARMPOS,&PARMPTR
         LCLC  &ID,&IHBNX,&PARMKEY,&PARMVAL,&XPARM,&C1,&C2,&C3,&C4
&IHBNX   SETC  'IHB&SYSNDX'
         AIF   ('&TYPE' EQ 'ENTRY').ENTRY  Don't scan SYSPARM for ENTRY
&QSWRKLN SETC  '&IHBNX.W'               Set name of WORKLEN constant
         AIF   (K'&SYSPARM EQ 0).SPNONE    No SYSPARM
         AIF   ('&SYSPARM' EQ '*').SPNONE  No SYSPARM
         AIF   ('&SYSPARM' EQ ' ').SPNONE  No SYSPARM
         MNOTE *,'SYSPARM IS ''&SYSPARM'' '
&PARMLEN SETA  K'&SYSPARM
&XPARM   SETC  '&SYSPARM'.','           Add trailing comma
&PARMPTR SETA  1                        Starting pos of this key
.PARMLP1 ANOP
&PARMPOS SETA  &PARMPOS+1
         AIF   ('&XPARM'(&PARMPOS,1) EQ ',').COMMA
         AIF   ('&XPARM'(&PARMPOS,1) NE '=').PARMLP1
&PARMKEY SETC  '&XPARM'(&PARMPTR,&PARMPOS-&PARMPTR+1)  Include the '='
&PARMPTR SETA  &PARMPOS+1               Starting pos of this value
.PARMLP2 ANOP
&PARMPOS SETA  &PARMPOS+1
         AIF   ('&XPARM'(&PARMPOS,1) NE ',').PARMLP2
&PARMVAL SETC  '&XPARM'(&PARMPTR,&PARMPOS-&PARMPTR)
         AGO   .PARMCHK
.COMMA   ANOP
&PARMKEY SETC  '&XPARM'(&PARMPTR,&PARMPOS-&PARMPTR)
&PARMVAL SETC  '***NONE***'
.PARMCHK ANOP
&PARMPTR SETA  &PARMPOS+1               Starting pos of next key
         AIF   ('&PARMKEY' EQ 'DOC='    ).SPDOC
         AIF   ('&PARMKEY' EQ 'PRINT='  ).SPPRINT
         AIF   ('&PARMKEY' EQ 'ACF2='   ).SPACF2
         AIF   ('&PARMKEY' EQ 'ALTCCH=' ).SPALTCC
         AIF   ('&PARMKEY' EQ 'APFSVC'  ).SPAPF
         AIF   ('&PARMKEY' EQ 'NOAPFSVC').SPAPFNO
         AIF   ('&PARMKEY' EQ 'QLEVEL=' ).SPQLVL
         AIF   ('&PARMKEY' EQ 'JQEOWN=' ).SPJQE
         AIF   ('&PARMKEY' EQ 'TMPMAC'  ).SPTMP
         AIF   ('&PARMKEY' EQ 'NOTMPMAC').SPTMPNO
         AIF   ('&PARMKEY' EQ 'JES2='   ).SPTBL1
         MNOTE 8,'Unsupported SYSPARM key -- &PARMKEY -- ignored'
.PARMNXT AIF   (&PARMPTR LT &PARMLEN).PARMLP1
         AGO   .SPEND
.SPDOC   ANOP
&DOC     SETC  '&PARMVAL'
         MNOTE *,'SYSPARM override -- &&DOC=&DOC'
         AGO   .PARMNXT
.SPPRINT ANOP
&PRINT   SETC  '&PARMVAL'
         MNOTE *,'SYSPARM override -- &&PRINT=&PRINT'
         AIF   ('&PRINT' NE 'ALL').PARMNXT
&PRINT   SETC  'GEN'
         AGO   .PARMNXT
.SPACF2  ANOP
&@@ACF2  SETA  &PARMVAL
         MNOTE *,'SYSPARM override -- &&@@ACF2=&@@ACF2'
         AGO   .PARMNXT
.SPALTCC ANOP
&QALTCCH SETC  '&PARMVAL'
         MNOTE *,'SYSPARM override -- &&QALTCCH=&QALTCCH'
         AGO   .PARMNXT
.SPAPF   ANOP
&QAPFSVC SETB  1
         MNOTE *,'SYSPARM override -- &&QAPFSVC=&QAPFSVC'
         AGO   .PARMNXT
.SPAPFNO ANOP
&QAPFSVC SETB  0
         MNOTE *,'SYSPARM override -- &&QAPFSVC=&QAPFSVC'
         AGO   .PARMNXT
.SPQLVL  ANOP
&QLEVEL  SETA  &PARMVAL
         MNOTE *,'SYSPARM override -- &&QLEVEL=&QLEVEL'
         AGO   .PARMNXT
.SPJQE   ANOP
&QJQEOWN SETC  '&PARMVAL'
         MNOTE *,'SYSPARM override -- &&QJQEOWN=&QJQEOWN'
         AGO   .PARMNXT
.SPTMP   ANOP
&QTMPMAC SETB  1
         MNOTE *,'SYSPARM override -- &&QTMPMAC=&QTMPMAC'
         AGO   .PARMNXT
.SPTMPNO ANOP
&QTMPMAC SETB  0
         MNOTE *,'SYSPARM override -- &&QTMPMAC=&QTMPMAC'
         AGO   .PARMNXT
.SPTBL1  ANOP
&QSYSTBL(1) SETC '&PARMVAL'
         MNOTE *,'SYSPARM override which follows forces &&QSYSNUM=1'
         MNOTE *,'SYSPARM override -- &&QSYSTBL(1)=&QSYSTBL(1)'
&C1      SETC  '&PARMVAL'(1,6)
&C2      SETC  '&PARMVAL'(7,4)
&C3      SETC  '&PARMVAL'(11,6)
&C4      SETC  '&PARMVAL'(17,8)
         MNOTE *,'==> SYSRES=&C1, JES2 name=&C2, CKPTVOL=&C3, CKPTPFX=&$
               C4'
         AGO   .PARMNXT
.SPNONE  MNOTE *,'No overriding SYSPARM'
.SPEND   AIF   (&QLEVEL LT 4 OR &@@ACF2 EQ 0).NACF2J2
         AIF   ('&SYSPARM'(1,9) EQ 'PRINT=ALL').ALL2
         PRINT OFF                                                    3
.ALL2    #ACFJES2  ,                    Set &ACF2JCT
         PRINT ON,&PRINT                                              4
.NACF2J2 AIF   ('&TYPE' EQ 'COMMON').COMMON1
         AGO   .CSECT
.ENTRY   ENTRY &NAME
&NAME    LA    R15,&NAME-&QSECT         Compute difference in bases
         SR    R12,R15                  Adjust my base to that of CSECT
         MVC   2(2,R13),&QSWRKLN        Set size of local workarea
         AIF   ('&WORKLEN' EQ '').STACK Continue
         MNOTE 0,'WORKLEN=&WORKLEN ignored for TYPE=ENTRY'
         AGO   .STACK                   Continue
.CSECT   AIF   ('&PRINT' EQ 'GEN').CSECTX  Skip double 'GEN'
         PRINT GEN                      Show CSECT start addr         5
.CSECTX  ANOP
&NAME    CSECT
&QSECT   SETC  '&NAME'                  Remember name of current rtn
         AIF   ('&DOC' EQ 'GEN').NOGEN2 Avoid 2 GEN's in a row
         AIF   ('&SYSPARM'(1,9) EQ 'PRINT=ALL').NOGEN2
         PRINT NOGEN                                                  6
.NOGEN2  DROPX ,                        DROP all previous base regs
         DROP  ,                        Just to be sure        SP134
         QREGS
.COMMON1 QHASPEQU
         AIF   ('&DOC' EQ 'NOGEN').OKBLURB  Skip blurb if &DOC=NOGEN
         AIF   (&QBLURB).OKBLURB        Skip if already done
&QBLURB  SETB  1                        Don't do it again
         COPY  $UPDATES
         SPACE 2
.OKBLURB AIF   ('&PRINT' EQ 'NOGEN').NOGEN3   Avoid 2 NOGEN's in a row
         PRINT GEN                                                    7
.NOGEN3  AIF   ('&TYPE' EQ 'COMMON').COMMON2
&ID      SETC  '&NAME-&SYSDATE-&SYSTIME'
&IDL     SETA  K'&ID                    Length of id
         AIF   ('&TYPE' EQ 'MAIN').MAIN
         USNGX QCOMMON,R11              Access to common vector table
         USNGX &NAME,R12                Base register
         B     &IHBNX.A                 Brance around id
         DC    AL1(&IDL),C'&ID'
         AIF   ('&WORKLEN' NE '').HAVELWA
&QSWRKLN DC    Y(72+8)                  Default size of save area
         AGO   .MVCWORK
.HAVELWA ANOP
&QSWRKLN DC    Y((&WORKLEN+7)/8*8)      Default size of local workarea
.MVCWORK ANOP
&IHBNX.A MVC   2(2,R13),&QSWRKLN        Set size of local workarea
         AGO   .STACK
.MAIN    USING *,R15                    Temp
         B     &IHBNX.A                 Branch around id
         DROP  R15
         DC    AL1(&IDL),C'&ID'
&QSWRKLN DC    Y((&WORKLEN+7)/8*8)      Default size of save area
&IHBNX.A STM   R14,R12,12(R13)          Save caller's registers
         LR    R12,R15                  Load base reg
         USNGX &NAME,R12                Base register
         LR    R2,R1                    Save parameter register
          AIF   (&@@LKSVC EQ 0).NOSVC   skip if no special LINK SVC
*
*        TESTAUTH  FCTN=1               see if we're APF authorized
         TESTAUTH  FCTN=1
*
         LTR   R15,R15                  are we?
         BZ    &IHBNX.Z                 yes - can't use ISPF services
*
*        TESTAUTH  STATE=YES,RBLEVEL=1  see if we're SUPR state
         TESTAUTH  STATE=YES,RBLEVEL=1
*
         LTR   R15,R15                  are we?
         BZ    &IHBNX.Y                 yes - go change keys
         L     R1,X'218'                PSA.TNEW
         L     R1,0(,R1)                TCB.RBP
         N     R1,=X'00FFFFFF'          clean in case AMODE31
.*       TM    10(R1),X'E0'             RB.STAB1,RBFTP  PRB?
.*       BNZ   &IHBNX.Y                 no, assume SVRB - go change key
         L     R1,12(,R1)               RB.CDE
         N     R1,=X'00FFFFFF'          clean in case AMODE31
         LA    R0,8(,R1)                CDNAME
         LR    R1,R2                    restore parm ptr
         SVC   &@@LKSVC                 reinvoke myself SUPR, KEY 0
*
*        RETURN  (14,12),T,RC=(15)      exit from top level
         RETURN  (14,12),T,RC=(15)      exit from top level
*
 MNOTE '&IHBNX.Y MODESET  EXTKEY=&QEXKEY'
&IHBNX.Y MODESET  EXTKEY=&QEXKEY
*
&IHBNX.Z EQU   *
.NOSVC    ANOP
*        GETMAIN R,LV=4096,SP=1         Get storage for savearea
         GETMAIN R,LV=4096,SP=1
         ST    R1,8(,R13)               Forward pointer
         ST    R13,4(,R1)               Backward pointer
         LR    R13,R1                   Move addr of savearea stack
.*       MVC   2(2,R13),=Y((&WORKLEN+7)/8*8) Set size of local workarea
         MVC   2(2,R13),&QSWRKLN        Set size of local workarea
.STACK   AIF   ('&STACK' EQ '').DONE
         SPACE 2
*        QSTACK  ...
         QSTACK  &STACK(1),&STACK(2)
.DONE    SPACE 2
         INUSE ,
.COMMON2 MEND
