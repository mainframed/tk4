    TITLE '--- QUEUE--GETREC -- GET A RECORD FROM CURRENT SPOOL DS ---'
*---------------------------------------------------------------------*
*                                                                     *
*   GETREC - Get either next or a specific record from the currently  *
*            selected spooled dataset                                 *
*                                                                     *
*   Entry - R4>0  -> current record (described by $LRC macro)         *
*           R4=0 ==> start at top of dataset                          *
*           R4<0 ==> start at record number in "QPREC"                *
*                                                                     *
*   Exit  - R4    -> new current record, or zero if end of dataset    *
*           R6    =  record data length                               *
*                                                                     *
*   Note - Registers R4 and R5 must be preserved across calls         *
*                                                                     *
*   Updates:                                                          *
*      29Jun91  LDW  Integrate GLA fixes below:                       *
*     (10Jul90) GLA  Fix test for valid block after read              *
*      15Dec90  EMS  Update for SP410                                 *
*      25Dec89  LDW  QDCBD -> QZDCBD                                  *
*      31May89  LDW  Do it without conditional assembly               *
*      26Apr89  EMS  Update for SP311                                 *
*       8Aug87  EMS  Add "PAGE" command support                       *
*                    fix bug running off end of getrec table          *
*       8Jul87  EMS  Fix more 0c7 abends (wierd sequences)            *
*                    Delete QCEND                                     *
*                    Update for GETPDDB  routine                      *
*      22May87  EMS  Update to reload r6 across calls                 *
*                    Fix misc 0c7 abends                              *
*                    Add support for LISTDS                           *
*                    Remove restrictions on regs during reentry       *
*      01/27/83 LDW  FIX END OF DISK BLOCK PROCESSING                 *
*      01/05/83 LDW  IDEA FOR THIS ROUTINE STOLEN FROM SKIP ROBINSON  *
*                       (THIS CODE ADAPTED FROM LISTDS - SKIP GOT     *
*                       HIS FROM SAVEDS)                              *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 3
GETREC   QSTART  WORKLEN=GR@WORKL
         SPACE 1
         USNGX WORK,R13
         SPACE 2
         L     R2,QCSTART               -> start of table
         A     R2,QCSIZE                + current size
         SH    R2,=Y(GR@TBLL)           -> last usable entry in table
         ST    R2,GR@CEND               save for later
         ZAP   GR@PREC,QPREC            set to current
         SP    GR@PREC,=P'1'            origin 0 now
         XR    R1,R1
         ICM   R1,B'0001',QPLINECT      pdblinct valid?
         BNZ   GR$INICT
         ICM   R1,B'0001',QJLINECT      jctlinct valid?
         BNZ   GR$INICT
         ICM   R1,B'0001',QSLINECT      $linect valid?
         BNZ   GR$INICT
         ICM   R1,B'0001',QMLINECT      Mode value valid?
         BNZ   GR$INICT
         LA    R1,60                    use 60 if all invalid
GR$INICT CVD   R1,GR@DWD
         ZAP   GR@LINCT,GR@DWD
         L     R2,QCCPTR                -> CURRENT DISK ADDR TABLE ENT
         L     R5,QCBLKA                -> buffer
         USNGX BUFSTART,R5
         TM    QCRFLAG,QRFINIT          req init?
         BZ    GR$INITC                 no, continue
         ZAP   QCHREC,=P'0'             clear high
         MVC   QCHPTR,QCSTART                     wm
         NI    QCRFLAG,255-QRFINIT-QRFEOF-QRFERR     clear flags
         L     R2,QCSTART               -> head of table
         USNGX GR@TBL,R2
         MVC   GR@MTTR,QCGRMTTR         set starting mttr
         B     GR$INT                   start at top
GR$INITC LTR   R4,R4                    DETERMINE FUNCTION DESIRED
         BP    GR$NXT                   continue with next record
         BM    GR$REPOS                 START AT SPECIFIED RECORD NBR
***********************************************************************
*                                                                     *
*   REPOSITION TO TOP OF DATASET                                      *
*                                                                     *
***********************************************************************
GR$INT   L     R2,QCSTART               BEGINNING OF DISK ADDR TABLE
         L     R4,GR@MTTR               DISK ADDR OF TOP OF DATASET
         MVC   QCCREC(12),GR#LTOP       Zero current record no
         TM    QCRECFM,DCBRECCC         control chars in dsid?
         BO    *+10                     yes, skip update
         ZAP   QCCPAGE,=P'1'            set to page 1
         ST    R2,QCCPTR                BEGIN OF TBL
**%%     ZAP   QCHREC,=P'0'             ZERO HIGH REC NO
**%%     MVC   QCHPTR,QCSTART           BEGIN OF TBL
         ZAP   QPREC,=P'1'              REPOSITION TO TOP OF DATASET
         ZAP   QCRHOLD,=P'0'            clear out garbage
         NI    QCRFLAG,255-QRFSKP1      here too.
         B     GR$FIRST                 PROCESS DATASET
***********************************************************************
*                                                                     *
*   PROCESS DATASET                                                   *
*                                                                     *
***********************************************************************
GR$NXTBL L     R4,HDBNXTRK              DISK ADDR OF NEXT BLOCK
         LA    R2,GR@TBLL(,R2)          -> next table entry
GR$FIRST LTR   R4,R4                    IS THE DISK ADDR ZERO?
         BZ    GR$END                   YES - END OF DATASET
         ST    R4,GR@MTTR               STORE DISK ADDR IN TABLE
***********************************************************************
*                                                                     *
*   READ A BLOCK FROM HASPACE                                         *
*                                                                     *
***********************************************************************
         ST    R4,QCTRAK                STORE DISK ADDR
         NI    QCRFLAG,255-QRFERR       Clear error indicator
         LR    R1,R5                    -> ioarea
         QCALL READSPC                  READ HASPACE
         CLC   HDBKEY,QPJOBID           Does full jobid match?
         BE    GR$OKBLK                 yes, use block
         CLC   QPJOBID,HDBJBKEY         check jobid name
         BNE   GR$ERR                   NO - block gone - error
         CLC   =C'$JESNEWS',QJOBNAME    is it jesnews?
         BNE   GR$ERR                   NO - block gone - error
GR$OKBLK MVC   GR@REC(12),QCCREC        Store current rec nums in tbl
         ST    R2,QCCPTR                STORE CURRENT TABLE ADDR
         CP    QCCREC,QCHREC            IS CURRENT REC NO > HIGHEST?
         BNH   *+4+6                    NO - SKIP
         MVC   QCHREC(16),QCCREC        Replace hi rec cnts and ptr
         LA    R4,HDBSTART              -> first record in block
         C     R2,GR@CEND               IS THIS THE END OF TABLE?
         BL    GR$REC1                  NO - OK
***********************************************************************
*                                                                     *
*   DATASET RECORD NUMBER TABLE IS TOO SMALL.  TRY TO GET A BIGGER    *
*   ONE, COPY THE INFORMATION, AND FREE THE OLD ONE.  WE WILL TRY     *
*   FOR ONE 4 TIMES THE SIZE, SO WE WILL GO FROM THE ORIGINAL 64K TO  *
*   256K.  IF THAT ONE IS TOO SMALL, WE WILL GO TO 1024K.  IF THAT    *
*   ONE IS TOO SMALL, YOU BETTER BE LOGGED ON IN A MONSTER REGION.    *
*                                                                     *
***********************************************************************
         L     R2,QCSIZE                get current size
         LR    R7,R2                    copy for later
         SLL   R2,2                     multiply by 4
         GETMAIN  RC,LV=(R2),SP=1       get new workarea
         LTR   R15,R15                  did it work?
         BNZ   GR$TILT1                 no, exit stage right
         LR    R6,R1                    set
         LR    R0,R1                       up
         LR    R1,R2                         regs
         LR    R15,R7                            for
         L     R14,QCSTART                          mvcl
         MVCL  R0,R14                   copy table
         LR    R0,R7                    point to old table
         ICM   R0,B'1000',=AL1(1)       set subpool
         L     R1,QCSTART               ditto addr
         FREEMAIN  R,LV=(0),A=(1)       free old table
         L     R1,QCCPTR                Get current record ptr
         S     R1,QCSTART               get offset entry
         AR    R1,R6                    set new addr
         ST    R1,QCCPTR                save it
         ST    R6,QCSTART               set
         ST    R2,QCSIZE                   new
         AR    R6,R2                          table
         L     R2,QCCPTR                           ptrs
         SH    R6,=Y(GR@TBLL)           -> last entry
         ST    R6,GR@CEND               save for later
         B     GR$REC1                  GO PROCESS FIRST RECORD IN BLK
***********************************************************************
*                                                                     *
*   ADVANCE TO NEXT RECORD IN BLOCK                                   *
*                                                                     *
***********************************************************************
GR$NXT   L     R4,QCGRPTR               -> current record
         LH    R6,QCGRLEN               len of record
         USING LRCDSECT,R4
GR$NXREC TM    LRCFLAG1,LRC1SPAN        IS THIS A SPANNED RECORD?
         BO    GR$SPAN                  YES - USE SPECIAL CODE
         LA    R4,LRCTEXT(R6)           -> NEXT RECORD
         B     GR$REC1                  PROCESS IT
GR$SPAN  LH    R6,LRCSEGL               LENGTH OF SEGMENT
         TM    LRCFLAG1,LRC1SBGN        IS THIS THE FIRST SEGMENT?
         BO    GR$SPAN1                 YES - USE DIFFERENT HDR LENGTH
         LA    R4,LRCSTEXT(R6)          UPDATE RECORD POSITION
         B     GR$REC1                  PROCESS NEXT RECORD
GR$SPAN1 LA    R4,LRCSFTXT(R6)          UPDATE RECORD POSITION
*     (  B     GR$REC1   )              PROCESS NEXT RECORD
***********************************************************************
*                                                                     *
*   PROCESS RECORDS                                                   *
*                                                                     *
***********************************************************************
GR$REC1  CLI   LRCTLENG,LRCBFEND        IS LENGTH BYTE FF?
         BE    GR$NXTBL                 YES - END OF BLOCK
         SR    R6,R6                    CLEAR FOR IC
         IC    R6,LRCTLENG              INSERT LENGTH
         TM    LRCFLAG1,LRC1CCTL        IS CARRIAGE CONTROL SPECIFIED?
         BZ    *+8                      NO - SKIP
         LA    R6,1(,R6)                YES - BUMP RECORD LENGTH
         TM    LRCFLAG1,LRC1INUL        IS THIS RECORD TO BE IGNORED?
         BNZ   GR$NXREC                 YES - SKIP IT
         AP    QCCREC,=P'1'             BUMP CURRENT REC NO
         LA    R14,=PL1'1'              Default to 1 rec no
         TM    LRCFLAG1,LRC1CCTL        any char ctl?
         BZ    GR$INCLN                 no, add in line
         TM    QCRFLAG,QRFSKP1          was last held skp 1
         BO    GR$INCPG                 yes, do it now
         LA    R14,=PL1'2'              try skip 1
         CLI   3(R4),C'0'               true?
         BE    GR$INCLN                 go do it
         CLI   3(R4),X'13'              true?
         BE    GR$INCLN                 go do it
         LA    R14,=PL1'3'              try skip 2
         CLI   3(R4),C'-'               true?
         BE    GR$INCLN                 do it
         CLI   3(R4),X'1B'              true?
         BE    GR$INCLN                 go do it
         LA    R14,=PL1'0'              assume imm cmd
         CLI   3(R4),C'1'               check for new page
         BE    GR$INCPG                 no, use next line
         CLI   3(R4),X'8B'              check for new page
         BE    GR$INCPG                 no, use next line
         ZAP   QCRHOLD,=PL1'1'
         CLI   3(R4),X'09'
         BE    GR$INCLN
         ZAP   QCRHOLD,=PL1'2'
         CLI   3(R4),X'11'
         BE    GR$INCLN
         ZAP   QCRHOLD,=PL1'3'
         CLI   3(R4),X'19'
         BE    GR$INCLN
         LA    R14,=PL1'1'
         CLI   3(R4),X'89'
         BNE   GR$INCLN
         OI    QCRFLAG,QRFSKP1
         LA    R14,=PL1'0'
         B     GR$INCLN
GR$INCPG CP    QCCREC,=P'1'             first rec?
         BE    GR$RCHK                  yes, skip update
         AP    QCCPAGE,=P'1'            BUMP PAGE NO
         ZAP   QCRHOLD,=P'0'            clear held lines
         NI    QCRFLAG,255-QRFSKP1      ditto pages
         ZAP   QCCLINE,=P'1'            line 1
         ZAP   QCCLINEA,=P'1'           line 1 here too.
         B     GR$RCHK                  check for record no.
GR$INCLN AP    QCCLINE,0(1,R14)         add in correct offset
         AP    QCCLINE,QCRHOLD          add in held count
         ZAP   QCRHOLD,=P'0'            clear out held lines
         AP    QCCLINEA,=P'1'           BUMP ABS LINE OFFSET
         TM    QCRECFM,DCBRECCC         and carriage ctl here?
         BO    GR$RCHK                  yes, leave it alone
         CP    QCCLINEA,GR@LINCT        over max?
         BH    GR$INCPG                 yes, fake new page
         SPACE 1
GR$RCHK  LA    R1,QCCREC                REACHED THE RECORD WE WANT?
         BAL   R14,GR$CP
         BH    GR$NXREC                 NO - TRY NEXT RECORD
GR$LEAVE CP    QCCREC,QCHREC            IS CURRENT REC NO > HIGHEST?
         BNH   *+4+6                    NO - SKIP
         MVC   QCHREC(16),QCCREC        Replace hi rec cnts and ptr
         ST    R4,QCGRPTR               save ptr to record
         STH   R6,QCGRLEN               save len too.
         L     R15,4(,R13)              DECHAIN SAVEAREAS
         ST    R4,36(,R15)              Pass back addr
         ST    R6,44(,R15)              ...       len
         B     QSTOP                    ALL DONE
         DROP  R4
GR$ERR   CL    R2,QCHPTR                Are at end of DS?
         BH    GR$END                   YES - not error
         OI    QCRFLAG,QRFERR           no - INDICATE ERROR ON DS
GR$END   SR    R4,R4                    INDICATE END OF DATASET
         OI    QCRFLAG,QRFEOF           eod reached
         B     GR$LEAVE                 AND RETURN
***********************************************************************
*                                                                     *
*   REPOSITION TO REQUESTED RECORD NUMBER                             *
*                                                                     *
***********************************************************************
GR$REPOS NI    QCRFLAG,255-QRFSKP1      here too.
         ZAP   QCRHOLD,=P'0'            and line cnt
         LA    R1,QCHREC                is req no > highest read?
         BAL   R14,GR$CP
         BNL   GR$HI                    YES - GO FROM HI
         LA    R1,QCCREC                is req no > current rec?
         BAL   R14,GR$CP
         BH    GR$UP                    YES - GO FROM CURRENT
         LA    R1,GR#LTOP               -> top literal
         BAL   R14,GR$CP                IS REQ FOR TOP OF DATASET?
         BH    GR$DOWN                  NO - GO DOWN FROM CURRENT
GR$TOP   L     R2,QCSTART               START AT TOP
GR$RESUM L     R4,GR@MTTR               LOAD DISK ADDR
         L     R5,QCBLKA                ADDR OF BLOCK IOAREA
         MVC   QCCREC(12),GR@REC        Reset current rec nos
         B     GR$FIRST                 RESUME PROCESSING
GR$HI    ICM   R2,B'1111',QCHPTR        START AT HIGHEST SO FAR
         BZ    GR$TOP                   if nothing, start at top
         B     GR$DWNLP                 FIND CORRECT BLOCK
GR$UP    L     R2,QCCPTR                CURRENT TABLE PTR
GR$UPLP  LA    R1,GR@TBLL(,R2)          -> next table entry
         CL    R1,QCHPTR                past end?
         BH    GR$RESUM                 yes, go look for record
         LA    R1,GR@REC+GR@TBLL        no, check next block
         BAL   R14,GR$CP
         BNH   GR$RESUM                 YES - PROCESS IT
         LA    R2,GR@TBLL(,R2)          -> next entry
         B     GR$UPLP                  AGAIN
GR$DOWN  ICM   R2,B'1111',QCCPTR        CURRENT TABLE PTR
         BZ    GR$END                   if nothing, return eof
GR$DWNLP LA    R1,GR@REC                is req no > entry?
         BAL   R14,GR$CP
         BH    GR$RESUM                 YES - PROCESS IT
         SH    R2,=Y(GR@TBLL)           Try previous entry
         CL    R2,QCSTART               below start?
         BL    GR$TOP                   yes, start at top
         B     GR$DWNLP                 AGAIN
         SPACE 3
*%GR$CP  TM    QMODE1,QM1PAGE           page mode?
*%       BZ    GR$CPL                   no, normal compare
GR$CP    TM    QFLAG2,Q2LISTDS          from listds?
         BZ    GR$CPL                   no, normal
         CLI   QCODE,64                 "PAGE" command?
         BNE   GR$CPL                   no, normal check
         CP    QPPAGE,QPPAGE-QPREC(4,R1)  Check Page
         BNER  R14
         CP    QPLINE,QPLINE-QPREC(2,R1)            /Line
         BR    R14
GR$CPL   CP    QPREC,0(4,R1)            check rec no
         BR    R14
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
         SPACE 2
GR$TILT1 QTILT '*** Dataset Table Limits Exceeded ***'
         SPACE 2
         DC    0D'0'                    align stuff
GR#LTOP  DC    PL4'0',PL4'0',2PL2'1'    rec 1; page 1,line 1,line 1
         SPACE 3
         LTORG ,
         SPACE 3
WORK     DSECT ,
         ORG   WORK+72
GR@DWD   DS    D                        misc dwd
GR@CEND  DS    A                        -> last entry in table
GR@PREC  DS    PL4                      adjusted desired rec no
GR@LINCT DS    PL2                      linecount for this dsid
GR@WORKL EQU   *-WORK
         SPACE 3
         DROPX R5,R13
         SPACE 3
         QDSTAB  PREFIX=GR@,DSECT=YES,MTTR=YES
         SPACE 3
         QCOMMON
         SPACE 3
         Q$BUFFER
         Q$LRC
         QZDCBD
