         TITLE '--- QUEUE--AUTHFUNC -- CHANGE AUTHORIZED STATES ---'
*---------------------------------------------------------------------*
*                                                                     *
*   AUTHFUNC - Test, set, reset APF authorization, switch PSW key     *
*              or mode                                                *
*                                                                     *
*   Entry - R1 = 0 ==> invalid entry code                             *
*              = 4 ==> get APF authorized if not                      *
*              = 8 ==> reset APF if we set it                         *
*              = 12 ==> switch to key zero                            *
*              = 16 ==> switch to key non-zero                        *
*              = 20 ==> switch to supervisor state                    *
*              = 24 ==> switch to problem state                       *
*         - If the entry code in R1 is negative, the function indi-   *
*           cated by the complement of R1 is performed conditionally. *
*                                                                     *
*   Exit - R15 = 0 ==> success                                        *
*              = 4 ==> unable to perform function                     *
*                                                                     *
*   Updates:                                                          *
*      04Jun88  LDW  Add call types 12-24                             *
*      24OCT86  EMS  FIX APF RESET CODE                               *
*      03/30/86 LDW  USE &@@SCSVC INSTEAD OF &QAPFSVC                 *
*      01/13/83 LDW  ROUTINE CREATED                                  *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 3
AUTHFUNC QSTART
         LR    R3,R1                    save entry code
         LPR   R1,R1                    get a positive copy of code
         CH    R1,=H'24'                TOO BIG?
         BH    AF$ERR2                  YES - ABORT
         B     *+4(R1)                  decode function request
         B     AF$ERR1                  00 - obsolete entry code
         B     AF$APF                   04 - set APF
         B     AF$UNAPF                 08 - reset APF
         B     AF$ZERO                  12 - switch to key zero
         B     AF$NONZ                  16 - switch to key non-zero
         B     AF$SUPR                  20 - switch to supervisor state
         B     AF$PROB                  24 - switch to problem state
         SPACE 3
AF$ZERO  TM    QXAUTH,QXSUPR            are we in supervisor state?
         BZ    AF$Z$1                   no - try to get APF
*
         MODESET  EXTKEY=ZERO           do it the quick way
*
         B     QSTOP00
         SPACE 1
AF$Z$1   LA    R1,4                     try to get APF authorized
         LTR   R3,R3                    original request conditional?
         BNM   *+6                      no - ok
         LNR   R1,R1                    yes - make this conditional
         QCALL AUTHFUNC                 recursive!
         LTR   R15,R15                  ok?
         BNZ   QSTOPRC                  no - return to caller
*
         MODESET  KEY=ZERO
*
         LA    R1,8                     unset it if necessary
         QCALL AUTHFUNC                 recursive!
         B     QSTOP00
         SPACE 3
AF$NONZ  TM    QXAUTH,QXSUPR            are we in supervisor state?
         BZ    AF$N$1                   no - try to get APF
*
         MODESET  EXTKEY=&QEXKEY        do it the quick way
*
         B     QSTOP00
         SPACE 1
AF$N$1   LA    R1,4                     try to get APF authorized
         LTR   R3,R3                    original request conditional?
         BNM   *+6                      no - ok
         LNR   R1,R1                    yes - make this conditional
         QCALL AUTHFUNC                 recursive!
         LTR   R15,R15                  ok?
         BNZ   QSTOPRC                  no - return to caller
*
         MODESET  KEY=NZERO
*
         LA    R1,8                     unset it if necessary
         QCALL AUTHFUNC                 recursive!
         B     QSTOP00
         SPACE 3
AF$SUPR  TM    QXAUTH,QXSUPR            are we in supervisor state?
         BNZ   QSTOP00                  yes - don't change anything
         LA    R1,4                     try to get APF authorized
         LTR   R3,R3                    original request conditional?
         BNM   *+6                      no - ok
         LNR   R1,R1                    yes - make this conditional
         QCALL AUTHFUNC                 recursive!
         LTR   R15,R15                  ok?
         BNZ   QSTOPRC                  no - return to caller
*
         MODESET  MODE=SUP
*
         LA    R1,8                     unset it if necessary
         QCALL AUTHFUNC                 recursive!
         B     QSTOP00
         SPACE 3
AF$PROB  TM    QXAUTH,QXSUPR            did we start in supervisor st?
         BNZ   QSTOP00                  yes - don't change back
         LA    R1,4                     try to get APF authorized
         LTR   R3,R3                    original request conditional?
         BNM   *+6                      no - ok
         LNR   R1,R1                    yes - make this conditional
         QCALL AUTHFUNC                 recursive!
         LTR   R15,R15                  ok?
         BNZ   QSTOPRC                  no - return to caller
*
         MODESET  MODE=PROB
*
         LA    R1,8                     unset it if necessary
         QCALL AUTHFUNC                 recursive!
         B     QSTOP00
         SPACE 3
AF$APF   EQU   *
**       TESTAUTH  FCTN=1               ASK MVS IF WE ARE APF AUTH
         SPACE 1
**       LTR   R15,R15                  ARE WE?
**       BZ    QSTOPRC                  YES - RETURN WITH RC=0
         TM    QXAUTH,QXAPFENT          are we running APF authorized?
         BNZ   QSTOP00                  yes - return with RC=0
          AIF   (&@@SCSVC EQ 0).APF01    SKIP IF APF SVC NOT PROVIDED
         QAPF  SET                      ATTEMPT TO SET IT
         SPACE 1
         TESTAUTH  FCTN=1               SEE IF IT WORKED
         SPACE 1
         OI    QXAUTH,QXAPFSET          ASSUME IT WORKED
         LTR   R15,R15                  DID IT?
         BZ    QSTOPRC                  YES - RETURN WITH RC=0
         NI    QXAUTH,255-QXAPFSET      NO - RESET INDICATOR
.APF01    ANOP
         LTR   R15,R3                   WHAT WAS REQUESTED FUNCTION?
         BNZ   QSTOPRC                  RETURN WITH RC=4 FOR ENTRY=4
         QTILT '*** QUEUE IS NOT RUNNING APF AUTHORIZED ***'
         SPACE 2
AF$UNAPF TESTAUTH  FCTN=1               CURRENTLY APF AUTHORIZED?
         SPACE 1
         LTR   R15,R15                  WELL?
         BNZ   AF$ERR3                  NO - ERROR
         TM    QXAUTH,QXAPFSET          DID WE SET IT ON?
         BNO   QSTOPRC                  NO - LEAVE IT ON
          AIF   (&@@SCSVC EQ 0).APF02    SKIP IF APF SVC NOT PROVIDED
         QAPF  RESET                    TURN IT OFF
         SPACE 1
         TESTAUTH  FCTN=1               SEE IF IT WENT OFF
         SPACE 1
         LTR   R15,R15                  DID IT?
         BNZ   QSTOP                    YES - RETURN WITH RC=0
         L     R0,=C'AF4 '              SET LOGIC ERROR CODE
         L     R15,=V(LOGICERR)         -> ROUTINE
         BALR  R14,R15                  GO TO IT (NO RETURN)
         SPACE 2
          AGO   .APF03
.APF02    ANOP
         L     R0,=C'AF5 '              SET LOGIC ERROR CODE
         L     R15,=V(LOGICERR)         -> ROUTINE
         BALR  R14,R15                  GO TO IT (NO RETURN)
.APF03    ANOP
         SPACE 2
AF$ERR1  L     R0,=C'AF1 '              SET LOGIC ERROR CODE
         L     R15,=V(LOGICERR)         -> ROUTINE
         BALR  R14,R15                  GO TO IT (NO RETURN)
         SPACE 2
AF$ERR2  L     R0,=C'AF2 '              SET LOGIC ERROR CODE
         L     R15,=V(LOGICERR)         -> ROUTINE
         BALR  R14,R15                  GO TO IT (NO RETURN)
         SPACE 2
AF$ERR3  L     R0,=C'AF3 '              SET LOGIC ERROR CODE
         L     R15,=V(LOGICERR)         -> ROUTINE
         BALR  R14,R15                  GO TO IT (NO RETURN)
         SPACE 2
         LTORG ,
         SPACE 3
         QCOMMON
