         TITLE '--- QUEUE--LIST -- PRINT A DS FROM SPOOL BY ID ---'
*---------------------------------------------------------------------*
*                                                                     *
*   List - Prepare to display a dataset from a job on spool           *
*                                                                     *
*   Entry - If subcommand is "LIST":                                  *
*         - QPARM1 = jobid                                            *
*         - QPARM2 = dsid                                             *
*         - QPARM3 = print column (default of blank => column 1)      *
*                                                                     *
*   Updates:                                                          *
*      22Sep91  LDW  Make jobid/dsid optional for LIST subcommand     *
*                    Support EL/ELIST subcommand                      *
*                    Support /EDIT operand of LIST, JLOG, JCL, JMSG   *
*                    Add missing end of table indicator to NS#KEYS    *
*      20Jun90  LDW  Fix for DSID > 9999                              *
*      23Nov89  LDW  Remove unneeded Q$IOT, comment Q$PDDB usage      *
*      26Apr89  EMS  Update for SP311                                 *
*       8Jul87  EMS  Update to use GETPDDB routine                    *
*      21Mar87  LDW  Fix bug                                          *
*      25Jan87  LDW  Pass READSPC the JQE addr in case of CB ID error *
*               LDW  Fix for SJ on job with no displayable datasets   *
*      08/09/84 LDW  UPDATE FOR SP134 (USE IOTPDDB INSTEAD OF         *
*                       QCPDDB1)                                      *
*      04/11/84 LDW  JCTDSECT -> JCTSTART, IOTDSECT -> IOTSTART       *
*      01/27/84 LDW  ADD 'PS' SUBCOMMAND, CHANGE 'NS' TO ALWAYS GO    *
*                       FORWARD, ADD 'NS *' TO GO BACK/FORWARD        *
*      01/25/84 LDW  FIX BUG IN 'NS TOP' AND 'NS BOTTOM'              *
*      01/23/84 LDW  ADD SUPPORT FOR COMMAND STACKING                 *
*                    ADD SUPPORT FOR 'NS' SUBCOMMAND                  *
*                    USING/DROP -> USNGX/DROPX                        *
*      03/02/83 LDW  CHANGE 'QTILT *' TO USE QERRMSG                  *
*      12/15/82 LDW  PUT IN DIFFERENT QTILT IF COLUMN IS BAD          *
*                    FIX BUG IN COLUMN NUMBER CONVERSION              *
*      12/08/82 LDW  CHANGE FROM PRINT OFFSETS TO PRINT COLUMNS       *
*                    SAVE OFFSET IN QPOFFDEF FOR "C" WITH NO OPERAND  *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 3
LIST     QSTART  Q14,STACK=(X'30','REDISP')
         CLI   QCODE,16                 'NS'?
         BE    LIST$NS                  YES
***********************************************************************
*                                                                     *
*  CALL FINDJOB TO LOCATE THE JQE, JCT, AND IOT, VALIDITY CHK ACCESS  *
*                                                                     *
***********************************************************************
         QCALL FINDJOB                  FIND THE JOB
***********************************************************************
*                                                                     *
*   DECODE SUBCOMMAND                                                 *
*                                                                     *
***********************************************************************
         LH    R1,QCODEH
         B     *+4(R1)
         B     LISTANY                  0
         B     LISTJCL                  4
         B     LISTJLOG                 8
         B     LISTJMSG                 12
         EX    0,*                      16 (checked above)
         B     LISTEDIT                 20
***********************************************************************
*                                                                     *
*   LIST THE JCL FOR A JOB                                            *
*                                                                     *
***********************************************************************
          AIF  (&QLEVEL GE 9).LI01
LISTJCL  MVC   QPDSID,=H'3'             DSID OF DATASET TO BE PRINTED
          AGO  .LI02
.LI01     ANOP ,
LISTJCL  MVC   QPDSID,=F'3'             dsid of dataset to be printed
.LI02     ANOP ,
         MVC   QDHDSID,=CL8'JCL'        SET DSID
         LA    R15,3  **LDW**  WAS 11   PRINT COLUMN FOR EACH RECORD
         B     L$CALL                   GO CALL LISTDS
***********************************************************************
*                                                                     *
*   LIST THE JOBLOG MESSAGES FOR A JOB                                *
*                                                                     *
*                                                                     *
*   DETERMINE IF JOB LOG IS AVAILABLE                                 *
*                                                                     *
***********************************************************************
LISTJLOG MVI   QGPFLAG,QPFDIR+QPFNMSG   dir, no msg
          AIF  (&QLEVEL GE 9).LI03
         MVC   QPDSID,=H'2'             ask for joblog
          AGO  .LI04
.LI03     ANOP ,
         MVC   QPDSID,=F'2'             ask for joblog
.LI04     ANOP ,
         QCALL GETPDDB                  Go find it
         LTR   R2,R1                    check if we got it
         BNZ   JLFOUND
***      USNGX PDBDSECT,R2
         QTILT '*** JOBLOG IS NOT AVAILABLE ***'
JLFOUND  MVC   QDHDSID,=CL8'JOBLOG'     SET DSID
         LA    R15,1                    PRINT COLUMN FOR EACH RECORD
         B     L$CALL                   GO CALL LISTDS
*JL$TILT2 QTILT '*** JOBLOG IS EMPTY ***'
***********************************************************************
*                                                                     *
*   LIST THE SYSTEM MESSAGES FOR A JOB                                *
*                                                                     *
***********************************************************************
          AIF  (&QLEVEL GE 9).LI05
LISTJMSG MVC   QPDSID,=H'4'             DSID OF DATASET TO BE PRINTED
          AGO  .LI06
.LI05     ANOP ,
LISTJMSG MVC   QPDSID,=F'4'             dsid of dataset to be printed
.LI06     ANOP ,
         MVC   QDHDSID,=CL8'JOBMSG'     SET DSID
         LA    R15,1                    PRINT COLUMN FOR EACH RECORD
         B     L$CALL                   GO CALL LISTDS
***********************************************************************
*                                                                     *
*   CHECK AND CONVERT THE DATASET ID NUMBER FOR USER DSID             *
*                                                                     *
***********************************************************************
LISTEDIT OI    QSCFLAG3,QSC3EDIT        indicate EDIF instead of BRIF
LISTANY  LH    R1,QLNG2                 LENGTH OF DATASET ID FIELD
         SH    R1,=H'1'                 DATASET ID FIELD ZERO LENGTH?
***      BM    LI$TILT                  YES. QUIT.
         BM    LI$NDSID                 yes - try to use prev selected
         LA    R15,QPARM2               POINT TO PARM
         BAL   R14,QNUMCONV             CONVERT IT
         BNE   LI$TILT                  QUIT IF NOT NUMERIC
         TM    QXAUTH,QXAUTHX           PRIVILEGED USER?
         BNZ   LISTX                    YES - SKIP NEXT VALIDITY CHECK
         CH    R15,=H'101'              DATASET ID LESS THAN 101?
         BL    LI$TILT                  YES. TILT.
          AIF  (&QLEVEL GE 9).LI07
LISTX    STH   R15,QPDSID               STORE DATASET ID
          AGO  .LI08
.LI07     ANOP ,
LISTX    STCM  R15,B'1111',QPDSID       STORE DATASET ID
.LI08     ANOP ,
         MVC   QDHDSID,QPARM2           SET DSID
***********************************************************************
*                                                                     *
*   CHECK AND CONVERT THE PRINT COLUMN                                *
*                                                                     *
***********************************************************************
         LA    R15,1                    DEFAULT TO ONE
         LH    R1,QLNG3                 LENGTH OF COLUMN FIELD
         SH    R1,=H'1'                 COLUMN FIELD ZERO LENGTH?
         BM    L$CALL                   YES. USE COLUMN 1
         LA    R15,QPARM3               POINT TO PARM
         BAL   R14,QNUMCONV             CONVERT IT
         BZ    L$CALL                   CONTINUE IF OK
L$BADCOL QTILT '*** COLUMN NUMBER INVALID ***',OPTIONS=REPROMPT
L$CALL   SH    R15,=H'1'                CONVERT COLUMN INTO OFFSET
         BM    L$BADCOL                 ABORT IF NFG
         STH   R15,QPOFFSET             STORE OFFSET
         STH   R15,QPOFFDEF             STORE DEFAULT OFFSET
         OI    QFLAG2,Q2VALIDS          INDICATE VALIDITY FOR LISTDS
***********************************************************************
*                                                                     *
*   Set flag for EDIF if /EDIT keyword specified                      *
*                                                                     *
***********************************************************************
LI$NDSID TM    QFLAG2,Q2VALIDS          have a valid dsid?
         BZ    LI$TILT                  no - quit
         CLI   QKEYWORD,C'E'            /EDIT specified?
         BNE   *+8                      no - skip
         OI    QSCFLAG3,QSC3EDIT        indicate EDIF instead of BRIF
         TM    QSCFLAG3,QSC3EDIT        want EDIF?
         BZ    LI$CALL3                 no - ok
         TM    QISFLAG1,QIS1ISPF        yes - running under ISPF?
         BO    LI$ISPF                  yes - ok
         QTILT '*** EDIT only valid under ISPF ***'
LI$ISPF  TM    QISFLAG1,QIS1V23         are we V2.3 or higher?
         BO    LI$CALL3                 yes - ok
         QTILT '*** ISPF V2R3 or later required for EDIT ***'
***********************************************************************
*                                                                     *
*   CALL LISTDS TO LIST THE DATASET                                   *
*                                                                     *
***********************************************************************
LI$CALL3 MVI   QCODE,0                  TELL LISTDS "INITIAL POSIT'ING"
         QCALL LISTDS
         B     QSTOP
***********************************************************************
*                                                                     *
*   TELL HIM HE REQUESTED SOMETHING DUMB                              *
*                                                                     *
***********************************************************************
LI$TILT  OI    QSCFLAG1,QSC1JOB         PUT THE JOBID IN QDTOP
         MVC   QERRMSG,QBLANK           CLEAR THE MESSAGE AREA
         MVC   QERRMSG(14),=C'*** DATASET ID'
         MVC   QERRMSG+15(8),QPARM2     SHOW WHAT HE ASKED FOR
         MVC   QERRMSG+24(11),=C'INVALID ***'
         QTILT *,OPTIONS=REPROMPT
***********************************************************************
*                                                                     *
*   PROCESS 'NS' SUBCOMMAND                                           *
*                                                                     *
***********************************************************************
LIST$NS  L     R14,QCDDTBLA             -> DSID TABLE
         LTR   R14,R14                  ANY?
         BZ    NS$TILT1                 NO - ABORT
         CLI   QKEYWORD+8,C' '          MORE THAN ONE OPERAND?
         BNE   NS$TILT2                 YES - ABORT
*---  RE-READ THE FIRST IOT.  THIS IS REQUIRED SINCE SOME OTHER    ---*
*---  SUBCOMMAND MAY HAVE CHAINED DOWN IOTS AND LEFT ONE OTHER     ---*
*---  THAN THE FIRST IN STORAGE.                                   ---*
         L     R1,QCJCTA                -> JCT
         MVC   QCTRAK,JCTIOT-JCTSTART(R1)  GET MTTR OF FIRST IOT
         MVC   QCCBID,=C'IOT '          SHOW WHAT WE WANT
         L     R1,QCIOTA                -> IOAREA FOR IOT FOR READSPC
         L     R0,QCJQEA                -> JQE
         QCALL READSPC                  READ HASPACE
         L     R14,QCDDTBLE             -> CURRENT TABLE ENTRY
         CLI   QSUBNAME,C'P'            IS THIS 'PS' SUBCOMMAND?
         BE    NS$PREV                  YES - SELECT PREVIOUS SYSOUT DS
         CLI   QKEYWORD,C' '            NEXT? (DEFAULT)
         BE    NS$NEXT                  YES
         CLI   QKEYWORD,C'*'            SAME DIRECTION AS LAST TIME?
         BNE   *+10                     NO - SKIP
         MVC   QKEYWORD(1),QCNSDIR      YES - USE PREVIOUS DIRECTION
         CLI   QKEYWORD,C'T'            TOP?
         BE    NS$TOP                   YES
         CLI   QKEYWORD,C'B'            BOTTOM?
         BE    NS$BOTT                  YES
         CLI   QKEYWORD,C'N'            NEXT?
         BE    NS$NEXT                  YES
         CLI   QKEYWORD,C'+'            NEXT?
         BE    NS$NEXT                  YES
         CLI   QKEYWORD,C'P'            PREVIOUS?
         BE    NS$PREV                  YES
         CLI   QKEYWORD,C'-'            PREVIOUS?
         BE    NS$PREV                  YES
         EX    0,*                      SHOULD BE IMPOSSIBLE
         SPACE 2
NS$TOP   MVI   QCNSDIR,C'N'             SET DIRECTION
         L     R14,QCDDTBLA             -> DSID TABLE
         LA    R14,4(,R14)              -> FIRST ENTRY
         CLC   =C'*E',0(R14)            END OF TABLE?
         BNE   NS$GO                    NO - GO PROCESS IT
NS$TILT3 QTILT '*** NO DATASETS TO DISPLAY ***'
         SPACE 2
NS$BOTT  MVI   QCNSDIR,C'P'             SET DIRECTION
         L     R14,QCDDTBLA             -> DSID TABLE
NS$BLOOP LA    R14,4(,R14)              -> NEXT ENTRY
         CLC   =C'*E',0(R14)            END OF TABLE?
         BNE   NS$BLOOP                 NO - KEEP LOOKING
         SH    R14,=H'4'                YES - BACK UP TO LAST ENTRY
         CLC   =C'*T',0(R14)            START OF TABLE?
         BNE   NS$GO                    NO - GO PROCESS IT
         B     NS$TILT3                 YES - NOTHING TO DISPLAY
         SPACE 2
NS$NEXT  LA    R14,4(,R14)              -> NEXT ENTRY
         CLC   =C'*E',0(R14)            END OF TABLE?
         BNE   NS$GO                    NO - GO PROCESS
         MVI   QCNSDIR,C'P'             CHANGE DIRECTION TO 'PREV'
         QTILT '*** END OF OUTPUT REACHED -- ENTER "NS *" AGAIN TO GO B$
               ACKWARD ***'
         B     NS$GO                    GO PROCESS IT
         SPACE 2
NS$PREV  SH    R14,=H'4'                -> PREVIOUS ENTRY
         CLC   =C'*T',0(R14)            START OF TABLE?
         BNE   NS$GO                    NO - GO PROCESS
         MVI   QCNSDIR,C'N'             CHANGE DIRECTION TO 'NEXT'
         QTILT '*** TOP OF OUTPUT REACHED -- ENTER "NS *" AGAIN TO GO F$
               ORWARD ***'
         B     NS$GO                    GO PROCESS IT
         SPACE 2
NS$GO    ST    R14,QCDDTBLE             SAVE ADDR OF CURRENT ENTRY
         CLC   =F'2',0(R14)             JLOG?
         BE    LISTJLOG                 YES - GO LIST IT
         CLC   =F'3',0(R14)             JCL?
         BE    LISTJCL                  YES - GO LIST IT
         CLC   =F'4',0(R14)             JMSG?
         BE    LISTJMSG                 YES - GO LIST IT
         MVC   QLNG2,=H'6'              SET LENGTH OF OPERAND
         L     R0,0(,R14)               GET BINARY DSID
         CVD   R0,QNUMWORK              CONVERT TO PACKED
         OI    QNUMWORK+7,X'0F'         REMOVE SIGN
         UNPK  QPARM2(6),QNUMWORK       MAKE PRINTABLE
         XC    QLNG3,QLNG3              NO THIRD OPERAND
         B     LISTANY                  AND GO DISPLAY THIS DATASET
         SPACE 2
NS$TILT1 QTILT '*** YOU MUST FIRST SELECT JOB WITH "SJ" SUBCOMMAND ***'
NS$TILT2 QTILT '*** NS -- TOO MANY OPERANDS ***',OPTIONS=REPROMPT
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
         LTORG
         SPACE 2
         ENTRY LI#KEYS
LI#KEYS  DC    CL8'EDIT    ',CL8'E       '
         DC    X'FF'                    end of table indicator
         SPACE 2
         ENTRY NS#KEYS
NS#KEYS  DC    CL8'*       '
         DC    CL8'N       ',CL8'NEXT    ',CL8'+       '
         DC    CL8'P       ',CL8'PREV    ',CL8'-       '
         DC    CL8'T       ',CL8'TOP     '
         DC    CL8'B       ',CL8'BOTTOM  '
         DC    X'FF'                    end of table indicator
         SPACE 3
***      DROPX R2                       PDBDSECT
         SPACE 3
         QCOMMON
         SPACE 3
         Q$JCT
***      Q$PDDB
