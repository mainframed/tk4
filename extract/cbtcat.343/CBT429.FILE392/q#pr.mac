         TITLE '--- QUEUE--PRINT -- PRINT SCREEN DISPLAY ---'
*---------------------------------------------------------------------*
*                                                                     *
*   PRINT - CREATE HARDCOPY OF CURRENT SCREEN IMAGE                   *
*                                                                     *
*   Updates:                                                          *
*      29Jan91  LDW  Use QVPRNTWA to access most PRINT fields         *
*                    Change USING/DROP to USNGX/DROPX                 *
*      16Jun90  LDW  Since we run (mostly) in AMODE31 now, switch to  *
*                       AMODE24 to do I/O                             *
*      17Apr89  LDW  Fix bug in printing LBLK screens                 *
*      19May87  EMS  Change QPPAGE;QPPAGE# -> QPAGEN;QPAGEN#          *
*      21Mar87  LDW  Fix for DSID = 0 (from RSCS)                     *
*      02/02/83 LDW  CHANGE "PRINT N N" AND "PRINT ALL" TO "COPY"     *
*      01/27/83 LDW  ADD PRINT DATASET CAPABILITY                     *
*                    FIX UP 'HOLD' AND CLASS OPERANDS                 *
*      01/07/83 LDW  FIX BUGS IN BUILDING DYNAMIC ALLOCATION PARMLIST *
*                    CHANGE 'DEST=' FROM THIRD POSITIONAL TO KEYWORD  *
*      12/23/82 LDW  ADD SUPPORT FOR UCS AND FCB AS KEYWORDS          *
*                    DON'T PRINT SCREEN IF OPERAND IS 'ON' (THIS      *
*                       ALLOWS PRINT TO BE TURNED ON FOR SPOOLING A   *
*                       DATASET WITHOUT ALSO PRINTING A SCREEN IMAGE) *
*                    SQUEEZE OUT EMBEDDED ATTR BYTES IN PRINT LINE    *
*                    DELETE CODE TO OVERPRINT HIGH INTENSITY FIELDS   *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 3
PRINT    QSTART  Q27,WORKLEN=PR@WORKL
         USNGX WORK,R13                 BASE REG FOR LOCAL WORK AREA
         L     R8,QVPRNTWA              -> my workarea
         USNGX QPRNTWA,R8
***********************************************************************
*   DETERMINE WHETHER COMMAND IS "PRINT" OR "COPY"
***********************************************************************
         CLI   QCODE,0                  IS IT PRINT?
         BE    PR$PRINT                 YES
***********************************************************************
*   PROCESS THE COPY COMMAND
***********************************************************************
         ZAP   PR@LAST,=P'9999999'      ASSUME ALL, SET MAX HIGH REC #
         CLC   =C'ALL ',QPARM1          WANT WHOLE DATASET PRINTED?
         BE    PR$COPY                  YES - GO DO IT
         LH    R1,QLNG1                 GET LENGTH OF FIRST PARM
         BCTR  R1,0                     -1 FOR EX
         LA    R15,QPARM1               -> FIRST PARM (STARTING LINE)
         BAL   R14,QNUMCONV             CONVERT OPERAND
         BNE   PR$BAD1                  ABORT IF NOT NUMERIC
         LTR   R15,R15                  ZERO?
         BZ    PR$BAD1                  YES - INVALID
         ZAP   PR@FIRST,QNUMWORK        SAVE STARTING NUMBER
         LH    R1,QLNG2                 GET LENGTH OF SECOND PARM
         SH    R1,=H'1'                 -1 FOR EX
         BM    PR$BAD2                  ABORT IF MISSING
         LA    R15,QPARM2               -> SECOND PARM (ENDING LINE)
         BAL   R14,QNUMCONV             CONVERT OPERAND
         BNE   PR$BAD2                  ABORT IF NOT NUMERIC
         ZAP   PR@LAST,QNUMWORK         SAVE ENDING   NUMBER
         CP    PR@FIRST,PR@LAST         FIRST > LAST?
         BNH   PR$COPY                  NO - GO PRINT THE RANGE
         QTILT '*** REVERSE RANGE INVALID ***',OPTIONS=(REPROMPT,SET)
PR$BAD1  QTILT '*** STARTING RECORD NUMBER INVALID ***',               $
               OPTIONS=(REPROMPT,SET)
PR$BAD2  QTILT '*** ENDING RECORD NUMBER INVALID ***',                 $
               OPTIONS=(REPROMPT,SET)
***********************************************************************
*   PROCESS THE PRINT COMMAND
***********************************************************************
PR$PRINT CLC   =C'ON',QPARM1            START PRINT REQUEST?
         BE    STARTPRT                 YES...GO START IT
         CLC   =C'OFF',QPARM1           STOP PRINT REQUEST?
         BE    STOPPRT                  YES... GO STOP IT
         CLC   =C'DEL',QPARM1           DELETE PRINT REQUEST?
         BE    STOPPRT                  YES... GO STOP IT
         CLI   QPARM1,C' '              ANY PARM?
         BE    STARTPRT                 NO...ASSUME START
         CLI   QPARM1,C'P'              PAGE EJECT?
         BE    PR$EJECT                 NO - SKIP
         QTILT '*** INVALID FIRST OPERAND ***',OPTIONS=(REPROMPT,SET)
PR$EJECT MVI   QPHEAD1,C'0'             YES - SET UP FOR EJECT
         B     QSTOP                    LEAVE
         EJECT
***********************************************************************
*   START (OR CONTINUE) THE PRINT PROCESS
***********************************************************************
STARTPRT BAL   R7,ALLOCHC               GO ALLOCATE / OPEN HARDCOPY
         CLC   =C'ON',QPARM1            START PRINT REQUEST?
         BE    QSTOP                    YES - ALL DONE
         BAL   R7,GETTIME               GO GET DATE AND TIME
         MVC   QPUSER,QLOGON            MOVE IN USERID
         MVC   QPDATE,JDATE             MOVE IN DATE TIME INFO
         MVC   QPAGEN#,QBLANK           Clear out Page # field
         XI    QPHEAD1,X'01'            TOGGLE ASA FLAG 0-1 OR 1-0
         CLC   QDROWS,=H'24'            MODEL 2?
         BNH   *+8                      YES - OK
         MVI   QPHEAD1,C'1'             NO - 1 SCREEN PER PAGE
         CLI   QPHEAD1,C'1'             EJECT NOW SCHEDULED?
         BNE   NOPAGE                   NO..SKIP PAGE SETTING
*
         AP    QPAGEN,=P'1'             Bump page count
         MVC   QPAGEN#,=X'402020202021' Move in mask
         ED    QPAGEN#,QPAGEN           Edit in page no
NOPAGE   LA    R0,QPHEAD1               POINT TO TITLE LINE
         BAL   R10,PR$PUT0              PUT IT OUT
         LH    R5,QDCOLS
         BCTR  R5,0                     -1 FOR EX
         EJECT
***********************************************************************
*  PUT OUT RECONSTRUCTED SCREEN IMAGE                                 *
***********************************************************************
*---  LINE 1
         MVI   PR@CC,C'-'               TRIPLE SPACE
*  RECONSTRUCT LINE WITHOUT 3270 CONTROL CHARS
         MVC   PR@LINE,QBLANK
         MVC   PR@LINE(*-*),QDQUEUE-1   << EXECUTED >>
         EX    R5,*-6
         MVI   PR@LINE,C' '             KILL THE ATTRIBUTE BYTE
         BAL   R10,PR$PUT
*        MVI   PR@CC,C'+'               OVERPRINT THE HIGHLIGHTED FLDS
*        BAL   R10,PR$PUT
*        BAL   R10,PR$PUT
*---  LINE 2
         MVI   PR@CC,C' '               RESET CARRIAGE CONTROL
         MVC   PR@LINE,QBLANK           CLEAR THE AREA
         MVC   PR@LINE(12),PR#CMD       'COMMAND ===>'
         MVC   PR@LINE+13(L'QDPROMPT),QDPROMPT   MOVE IN PREVIOUS CMD
         BAL   R10,PR$PUT               PRINT IT
         MVC   PR@LINE+13(L'QDPROMPT),QBLANK
*        MVI   PR@CC,C'+'               SET FOR OVERPRINT
*        BAL   R10,PR$PUT               PRINT IT
*        BAL   R10,PR$PUT               PRINT IT
*---  LINE 3
         MVI   PR@CC,C' '               RESET CARRIAGE CONTROL
         MVC   PR@LINE(*-*),QDHLINE     << EXECUTED >>
         EX    R5,*-6
         LA    R15,PR@LINE(R5)          -> LAST CHAR OF HEADER LINE
         MVI   0(R15),C' '              KILL ATTRIBUTE BYTE
         BAL   R10,PR$PUT               PRINT IT
*        MVI   PR@CC,C'+'               SET FOR OVERPRINT
*        BAL   R10,PR$PUT               PRINT IT
*        BAL   R10,PR$PUT               PRINT IT
         EJECT ,
***********************************************************************
*  PUT OUT ENTIRE SCREEN OF DETAIL LINES (BLANK OR NOT)               *
***********************************************************************
         XC    PR@TRTAB,PR@TRTAB        INIT TRTAB TO STOP ON
         MVI   PR@TRTAB+X'1D',4         ... START FIELD
         MVI   PR@TRTAB+X'3C',8         ... AND REPEAT TO ADDRESS
         MVI   PR@CC,C' '               SINGLE SPACE
         L     R6,QVLINE1               -> FIRST DATA LINE
         LH    R3,QDROWS                NUMBER TO CRANK
PUTLOOP  EX    R5,PRNT$MVC              MOVE INTO OUR BUFFER
**       LA    R15,0(R5,R6)             -> END OF LINE
         LR    R14,R5                   LENGTH TO TRT
         LA    R6,1(R5,R6)              -> NEXT LINE
         LA    R1,PR@LINE               -> START OF LINE
PR$TRTLP SR    R2,R2                    CLEAR FOR TRT
         EX    R14,PRNT$TRT             FIND A "START FIELD"
         BZ    PRNTLINE                 NONE - GO PUT OUT THE LINE
         CLI   0(R1),X'3C'              IS IT THE TRAILING "RA"?
         BE    PR$RA                    YES - SPECIAL HANDLING
         SPACE 2
*---  REMOVE THE ATTR BYTE FROM THE PRINT LINE                     ---*
         MVI   0(R1),C' '               KILL THE X'1D'
         LA    R1,1(,R1)                SKIP OVER IT
         LA    R14,PR@LINE(R5)          -> LAST CHAR OF LINE
         MVC   1(1,R14),0(R6)           get another char for whole line
**       LA    R15,1(,R15)              ADJUST END OF LINE POINTER
         LA    R6,1(,R6)                ALSO, FIX PTR TO NEXT SCRN LINE
         SR    R14,R1                   EXECUTE LENGTH TO SHIFT OVER
         BM    PR$TRTLP                 continue if end of this line
**       LR    R2,R15                   COMPUTE ADDRESS OF PART OF LINE
**       SR    R2,R14                   ... AFTER THE ATTR BYTE
         EX    R14,PR$SHIFT             SHIFT REMAINDER OF LINE LEFT
         B     PR$TRTLP                 LOOK FOR NEXT ATTR BYTE
         SPACE 2
*---  THE TRAILING "RA" SEQUENCE HAS BEEN FOUND.  REMOVE IT, AND   ---*
*---  PUT OUT ENOUGH BLANK LINES TO ACCOUNT FOR THE REST OF THE    ---*
*---  SCREEN                                                       ---*
PR$RA    MVC   0(132,R1),QBLANK         CLEAR REST OF PRINT LINE
         BAL   R10,PR$PUT               PUT OUT THIS LINE
         BCT   R3,*+8                   COUNT THIS LINE
         B     PR$DONE                  EXIT LOOP IF WHOLE SCREEN DONE
         MVC   PR@LINE,QBLANK           CLEAR THE PRINT LINE
         BAL   R10,PR$PUT               PUT OUT A BLANK LINE
         BCT   R3,*-4                   DO ENOUGH BLANK LINES
         B     PR$DONE                  WHOLE SCREEN NOW DONE
         SPACE 3
PRNTLINE BAL   R10,PR$PUT               PUT DETAIL LINE OUT
**       LA    R6,1(R5,R6)              -> NEXT LINE
         BCT   R3,PUTLOOP               AND GRIND THE SCREEN THROUGH
         EJECT ,
PR$DONE  MVI   PR@CC,C'-'               TRIPLE SPACE A BLANK LINE
         MVC   PR@LINE,QBLANK
         CLI   QPHEAD1,C'1'             WAS THIS SECOND ON PAGE?
         BNE   *+8                      YES - DON'T ADD BLANK LINE
         BAL   R10,PR$PUT               AND PRINT IT
         MVI   PR@CC,C' '               RESTORE TO SINGLE SPACE
*
         LA    R15,QDTOP-8-15+1(R5)     -> END OF TOP LINE
         MVC   0(15,R15),=C' SCREEN PRINTED'
         SPACE 1
GOTMSG   SR    R1,R1                    SET A ZERO
         L     R2,4(,R13)                   RETURN CODE
         ST    R1,16(,R2)                     IN REGISTER 15 (SAVED)
         B     QSTOP
         SPACE 2
PRNT$MVC MVC   PR@LINE(*-*),0(R6)       << EXECUTED >>
PRNT$TRT TRT   0(*-*,R1),PR@TRTAB       << EXECUTED >>
**$SHIFT MVC   0(*-*,R1),0(R2)          << EXECUTED >>
PR$SHIFT MVC   0(*-*,R1),1(R1)          << EXECUTED >>
         SPACE 3
***********************************************************************
*  PUT SUBROUTINE                                                     *
***********************************************************************
PR$PUT   LA    R0,PR@CC                 GET ADDRESS OF PRINT LINE BUFF
PR$PUT0  BAL   R14,QAMODE24             change to AMODE 24
         L     R1,QPPRNT                -> HASPPRNT DCB
         PUT   (1),(0)                  PUT IT
         BAL   R14,QAMODE31             resume AMODE 31
         BR    R10                      return to caller
         EJECT ,
***********************************************************************
*
*   PRINT ALL OR A RANGE OF THE CURRENTLY SELECTED DATASET
*
***********************************************************************
*R$COPY% OC    QPDSID,QPDSID            IS THERE A VALID DATASET?
PR$COPY  TM    QFLAG2,Q2VALIDS          IS THERE A VALID DATASET?
         BNZ   PR$CY$01                 YES - CONTINUE
         QTILT '=== YOU ARE NOT PROCESSING A VALID DATASET ==='
PR$CY$01 MVC   QPARM2,QBLANK            ALLOCHC USES THIS FOR ...
         MVI   QLNG2+1,0                ... SYSOUT CLASS
         BAL   R7,ALLOCHC               GO ALLOCATE / OPEN HARDCOPY
         MVI   PR@FLAG,0                INIT FLAGS
         L     R9,=V(CHARTAB)           -> TRANSLATE TABLE
         SR    R4,R4                    ASSUME START AT TOP
         CLC   =C'ALL',QPARM1           IS THIS 'COPY ALL'?
         BE    PR$CY$LP                 YES - START AT TOP
         ZAP   QPREC,PR@FIRST           NO - SET STARTING RECORD NUMBER
         BCTR  R4,0                     R4 NEGATIVE ==> SPECIFIC START
         SPACE 2
PR$CY$LP QCALL GETREC                   GET THE NEXT REC FROM DATASET
         LTR   R4,R4                    HAVE WE HIT BOTTOM?
         BZ    PR$CYEND                 YES - END OF DATASET
         USNGX LRCDSECT,R4
         TM    LRCFLAG1,LRC1SPAN        IS THIS A SPANNED RECORD?
         BO    PR$CY$LP                 YES - CAN'T HANDLE THESE YET
         TM    PR@FLAG,PR@PRTED         HAVE WE PRINTED ANYTHING?
         BO    PR$CY$GO                 YES - HEADER ALREADY PUT OUT
*---  BUILD AND PRINT THE HEADING                                  ---*
         MVI   PR@CC,C'1'               SET FOR PAGE EJECT
         MVC   PR@LINE,QBLANK           CLEAR THE PRINT LINE
         MVC   PR@LINE(57),=C'QUEUE SPOOL DATASET PRINT FOR JOB XXXXXXX$
               X(JOB01234) DSID'
         MVC   PR@LINE+34(18),QDHJOBID  JOB NAME / JOBID
         MVC   PR@LINE+58(8),QDHDSID    DSID
         CLC   =C'ALL',QPARM1           IS THIS 'COPY ALL'?
         BE    PR$CY$02                 YES - BYPASS REC NBR LOGIC
         MVC   PR@LINE+66(7),=C'RECORDS'
         MVC   PR@EDWRK(15),=X'402020202020202040404040404040'
         LA    R1,PR@EDWRK+7            PRESET IN CASE
         EDMK  PR@EDWRK(8),PR@FIRST     EDIT START LINE NUMBER
         MVC   PR@LINE+74(8),0(R1)      MOVE TO PRINT LINE
         MVC   PR@LINE+84(4),=C'THRU'
         MVC   PR@EDWRK(15),=X'402020202020202040404040404040'
         LA    R1,PR@EDWRK+7            PRESET IN CASE
         EDMK  PR@EDWRK(8),PR@LAST      EDIT END   LINE NUMBER
         MVC   PR@LINE+89(8),0(R1)      MOVE TO PRINT LINE
         SPACE 1
PR$CY$02 BAL   R7,GETTIME               GO GET DATE/TIME FOR PRINT
         MVC   PR@LINE+100(L'QPDATE),JDATE  DATE/TIME INFO
         BAL   R10,PR$PUT               GO PRINT THE HEADING LINE
         MVC   PR@LINE,QBLANK           BLANK THE PRINT LINE
         MVI   PR@CC,C'-'               REQUEST TRIPLE SPACE
         BAL   R10,PR$PUT               GO PRINT IT
         SPACE 1
PR$CY$GO LA    R0,LRCTEXT               -> DATA PORTION OF RECORD
         LR    R1,R6                    GET DATA LENGTH
         LA    R14,PR@CC                -> PRINT LINE CC CHAR
         LA    R15,L'PR@LINE+1          GET DEST LENGTH
         TM    LRCFLAG1,LRC1CCTL        IS CCTL SPECIFIED?
         BO    PR$PAD                   YES - SKIP
         MVI   PR@CC,C' '               SET FOR SINGLE SPACE
         LA    R14,PR@LINE              DON'T OVERWRITE CC CHAR
PR$PAD   ICM   R1,B'1000',QBLANK        INSERT PAD CHAR
         MVCL  R14,R0                   MOVE RECORD TO PRINT LINE
         TR    PR@LINE,0(R9)            TRANSLATE UNPRINTABLES
         BAL   R10,PR$PUT               GO WRITE THE LINE
         OI    PR@FLAG,PR@PRTED         REMEMBER WE PRINTED SOMETHING
         CP    QCCREC,PR@LAST           REACH USER'S LIMIT?
         BL    PR$CY$LP                 NO - CONTINUE
         SPACE 2
*---  END OF DATASET ENCOUNTERED                                   ---*
PR$CYEND TM    PR@FLAG,PR@PRTED         DID WE PRINT ANYTHING?
         BNO   PR$NOPRT                 NO - TELL USER SO
PR$PRTED QTILT '=== PRINTED ==='
PR$NOPRT QTILT '*** STARTING LINE NUMBER > SIZE OF DATASET ***',       $
               OPTIONS=(REPROMPT,SET)
         DROPX R4
         EJECT ,
***********************************************************************
*   STOP PRINT PROCESS AND FREE HASPPRNT DDNAME
***********************************************************************
STOPPRT  CLC   =C'HOLD ',QPARM2         WANT IT TO HELD SYSOUT?
         BE    STOPPRT2                 YES - OK
         CLC   QLNG2,=H'1'              CHECK SECOND OPERAND LENGTH
         BH    CLASSBAD                 TOO LONG TO BE A SYSOUT CLASS
         BL    STOPPRT2                 NONE - OK
         CLI   QPARM2,C'A'              VALID?
         BL    CLASSBAD                 NO
         SPACE 1
STOPPRT2 TM    QPFLAG,HARDCPY           IS HARDCPY ON
         BNO   QSTOP                    NOPE..NO WORK TO DO
         BAL   R14,QAMODE24             change to AMODE 24
         SPACE 1
         CLOSE MF=(E,QPPRNT)            CLOSE OFF THE FILE
         SPACE 1
         BAL   R14,QAMODE31             resume AMODE 31
         SR    R1,R1                    clear for ICM
         ICM   R1,B'0111',QPPRNT+1      -> HASPPRNT
         SPACE 1
         FREEPOOL (1)                   FREE THE BUFFERS TOO
         SPACE 1
         MVC   DYNALLOC(F99LEN),F99PTR  COPY DYN FREE LIST
         LA    R1,FREERB                RELOCATE THE LIST ADDRESSES.
         STCM  R1,B'0111',FREEPTR+1     *
         LA    R1,FREETXPT              *
         ST    R1,FREETPTR              *
         LA    R1,FREETU1               *
         STCM  R1,B'0111',FREETXPT+1    *
         LA    R1,FREETU2               *
         STCM  R1,B'0111',FREETXPT+9    *
         MVI   QDTOP+19,C'-'
         MVC   QDTOP+20(37),QDTOP+19    CLEAR ANY PREVIOUS MESSAGE
         LA    R14,QDTOP-8
         AH    R14,QDCOLS               -> END+1 OF TOP LINE
         SPACE 1
         CLC   =C'DEL',QPARM1           FIRST OPERAND = DELETE?
         BE    STOP$DEL                 YES - PROCESS
         CLC   =C'HOLD',QPARM2          SECOND OPERAND = HOLD?
         BE    STOPHOLD                 YES - PROCESS
         CLI   QPARM2,C' '              SYSOUT CLASS SPECIFIED?
         BE    STOP$STD                 NO - SKIP
         EJECT ,
*---  OVERRIDING SYSOUT CLASS SPECIFIED                            ---*
         LR    R3,R14                   COPY END+1 ADDR
         LA    R2,L'PRTSTP3             GET MSG LENGTH
         SR    R3,R2                    GET MSG ADDR
         MVC   0(L'PRTSTP3,R3),PRTSTP3  SET TITLE
         MVC   L'PRTSTP3-1(1,R3),QPARM2 PUT SYSOUT CLASS IN TITLE
         LA    R1,FREETU4               -> OVERRIDING CLASS TEXT UNIT
         MVC   FREETU4+2+2+2(1),QPARM2  GET SYSOUT CLASS
         B     STOPSPEC
         SPACE 1
*---  NO OVERRIDING CLASS OR 'HOLD' SPECIFIED                      ---*
STOP$STD LR    R3,R14                   COPY END+1 ADDR
         LA    R2,L'PRTSTP1             GET MSG LENGTH
         SR    R3,R2                    GET MSG ADDR
         MVC   0(L'PRTSTP1,R3),PRTSTP1  STANDARD MESSAGE
         B     STOP$GO                  GO PROCESS
         SPACE 1
*---  OVERRIDING 'HOLD' SPECIFIED                                  ---*
STOPHOLD LR    R3,R14                   COPY END+1 ADDR
         LA    R2,L'PRTSTP2             GET MSG LENGTH
         SR    R3,R2                    GET MSG ADDR
         MVC   0(L'PRTSTP2,R3),PRTSTP2  SET TITLE
         LA    R1,FREETU5               ASSUME OVERRIDING "HOLD"
         B     STOPSPEC                 PROCESS
         SPACE 1
*---  DELETE REQUESTED                                             ---*
STOP$DEL LA    R1,FREETU3               -> TEXT UNIT FOR DISP=DELETE
         LR    R3,R14                   COPY END+1 ADDR
         LA    R2,L'PRTDEL              GET MSG LENGTH
         SR    R3,R2                    GET MSG ADDR
         MVC   0(L'PRTDEL,R3),PRTDEL    SET TITLE
         SPACE 1
STOPSPEC STCM  R1,B'0111',FREETXPT+5    SAVE ADDR OF SPECIAL TEXT UNIT
STOP$GO  LA    R1,FREEPTR
         DYNALLOC
         NI    QPFLAG,255-HARDCPY       TURN OFF PRINT FLAG
         TM    QTERMFLG,QTFTTY          DISPLAY TERMINAL?
         BNO   GOTMSG                   YES - SKIP
         LR    R0,R2                    GET MSG LENGTH
         LR    R1,R3                    GET MSG ADDR
         TPUT  (1),(0),R                NOT DISPLAY - PRINT MESSAGE
         B     GOTMSG
         SPACE 2
PRTSTP1  DC    C' PRINT STOPPED; SYSOUT FREED FOR PRINT'
PRTSTP2  DC    C' PRINT STOPPED; SYSOUT FREED TO HELD OUTPUT'
PRTSTP3  DC    C' PRINT STOPPED; SYSOUT FREED FOR PRINTING IN CLASS=X'
PRTDEL   DC    C' PRINT STOPPED; SYSOUT DELETED'
         EJECT ,
***********************************************************************
* GET DATE/TIME FOR HEADING   ENTER WITH BAL R7,GETTIME
* RETURNS WITH JDATE(LEN) = YY.DDD  HH:MM:SS DAY MTH DD,19YY
*                           123456789.123456789.123456789.123
*
***********************************************************************
GETTIME  TIME  DEC
         ST    R1,DATE                  SAVE DATE FOR LATER
***FORMAT THE PRESENT TIME (AS SET BY THE OPERATOR)
         ST    R0,DBLWORK               CNVT PACKED TO DEC
         MVC   MONMSK(MVCLEN),XMONMSK   MOVE IN AND INITIALIZE TBL/DAT
         MVI   DBLWORK+4,X'0F'
         UNPK  WORKWORD(9),DBLWORK(5)
         MVC   TIMEHRS,WORKWORD         MOVE TIME TO MSG
         MVC   TIMMINS,WORKWORD+2
         MVC   TIMSECS,WORKWORD+4
***FORMAT TODAY'S DATE INTO THE OUTPUT MSG
         MVC   WORKWORD(4),DATE         MOVE DATE TO WORK AREA.
         MVO   WORKWORD+1(3),WORKWORD(2)   MAKE 00YYDDDS INTO 00000YYS.
         UNPK  CYR(2),WORKWORD+2(2)     FORMAT YEAR.
         XC    DBLWORK,DBLWORK
         MVC   DBLWORK+4(4),WORKWORD    CNVT YEAR TO BIN
         CVB   R0,DBLWORK
         ST    R0,BINYEAR               AND SAVE
         TM    BINYEAR+3,X'03'          LEAP YEAR?
         BNZ   MON1                     NO.
         MVI   MONMSK+10,29             YES, CORRECT
MON1     XC    DBLWORK,DBLWORK          CNVT DAYS TO BIN
         MVC   DBLWORK+6(2),DATE+2
         CVB   R2,DBLWORK
         ST    R2,BINDAYS               SAVE FOR LATER
         XR    R1,R1
         LA    R15,11
MON2     IC    R1,MONMSK(R15)           COMPUTE MON & DAY
         SR    R2,R1
         BNP   MONOVR
         BCT   R15,MON2
         B     *+6
MONOVR   AR    R2,R1                    CORRECT OVERDRAW
         CVD   R2,DBLWORK               FORMAT DAY
         UNPK  CDAYN(2),DBLWORK+6(2)
         OI    CDAYN+1,X'F0'            FIX UP SIGN
         MH    R15,=H'3'                GET TABLE OFFSET
         LA    R15,MONTAB(R15)          AND POINT AT MONTH
         MVC   CMON(3),0(R15)           MOVE IT TO THE MSG
         EJECT ,
***DAY OF WEEK
         L     R15,BINYEAR
         SH    R15,=H'69'
         BNP   OUTT                     MUST BE GREATER OR BAD
         XR    R14,R14                  CLEAR DAY REG
         D     R14,=F'4'
         MH    R15,=H'5'
         AR    R14,R15
         A     R14,BINDAYS
         SRDA  R14,32
         D     R14,=F'7'                MODULO 7 FOR WEEK
         MH    R14,=H'3'
         LA    R14,DAYTAB(R14)          POINT AT TODAY
         MVC   CDAY(3),0(R14)           INSERT IN MSG
***
MOVEJD   MVC   JDATE-1(7),=X'4020204B202020'
         ED    JDATE-1(7),DATE+1
*
DATERTN  BR    R7                       RETURN TO MAINLINE
*
OUTT     MVC   CDAY(3),=CL3'???'
         B     MOVEJD
         SPACE 2
***********************************************************************
* LEAVE FIELDS TOGETHER.. INITIALIZED BY ONE MVC WITH VALUES
*
XMONMSK  DC    AL1(31,30,31,30,31,31,30,31,30,31,28,31)  L
         DC    C' XX.XXX',C'  '                          E  F
         DC    CL2' ',C':'                               A  I  T
         DC    CL2' ',C':'                               V  E  O
         DC    CL2' ',C' '                               E  L  G
         DC    CL3' ',C' '                                  D  E
         DC    CL3' ',C' '                                  S  T
         DC    CL2' ',C',19'                                   H
         DC    CL2'  ',C' '                                    E
*                                                              R
***********************************************************************
MVCLEN   EQU   *-XMONMSK
*
***********************************************************************
DAYTAB   DC    C'TUEWEDTHRFRISATSUNMON'
MONTAB   DC    C'DECNOVOCTSEPAUGJULJUNMAYAPRMARFEBJAN'
         DC    0H'0'
         EJECT ,
***********************************************************************
*
*  ALLOC HARDCOPY TO HASPPRNT DDNAME
*
***********************************************************************
ALLOCHC  TM    QPFLAG,HARDCPY           IS HARDCOPY ALREADY ON?
         BOR   R7                       YES - JUST RETURN TO CALLER
         ZAP   QPAGEN,=P'0'             Reset Page no
         MVI   QPHEAD1,C'0'             ASA ON HEADING SO START FRESH
         MVC   DYNALLOC(S99LENG),S99RBPTR COPY DYN ALLOCATION LIST.
         LA    R1,P99RB                 RELOCATE THE LIST ADDRESSES.
         STCM  R1,B'0111',P99RBPTR+1    *
         LA    R1,P99PDDN               *
         ST    R1,P99TXTPP              *
         LA    R1,P99TDDN               *
         ST    R1,P99PDDN               *
         LA    R1,P99TCLAS              *
         ST    R1,P99PCLAS              *
         LA    R1,P99TDEST              *
         ST    R1,P99PDEST              *
***********************************************************************
*  PROCESS PARMS..........
***********************************************************************
         MVC   P99CLASS,QPCLASS         SET DEFAULT PRINT CLASS
         CLC   QLNG2,=H'1'              LENGTH OF SECOND PARM > 1?
         BH    CLASSBAD                 YES - INVALID
         BL    CLASSOK                  SKIP IF OMITTED
         CLI   QPARM2,C'A'              IS IT ALPHA?
         BL    CLASSBAD                 NO - INVALID
         MVC   P99CLASS,QPARM2          MOVE IN PARM FOR SYSOUT CLASS
CLASSOK  MVC   P99DEST,QPDEST           SET DEFAULT DEST
         MVC   P99FCB,QPFCB             SET DEFAULT FCB
         MVC   P99UCS,QPUCS             SET DEFAULT UCS
         MVC   P99FORM,QPFORM           SET DEFAULT FORM
         SPACE 2
         LA    R14,QKEYWORD             -> FIRST KEYWORD
         LA    R0,16                    ENTRY LENGTH
         LA    R1,QKEYLAST              -> PAST LAST KEYWORD
         SPACE 1
PR$KEYLP CLI   0(R14),C' '              ANY KEYWORD HERE?
         BE    PR$KEYSP                 NO - DONE WITH KEYWORDS
         SPACE 1
*---  CHECK FOR 'DEST='                                            ---*
         BAL   R15,*+10                 SET INST ADDR
         MVC   P99DEST,8(R14)           << EXECUTED >>
         CLC   =C'DEST',0(R14)          IS THIS DEST?
         BE    PR$GOTKY                 YES - GO SAVE OPERAND
         SPACE 1
*---  CHECK FOR 'UCS='                                             ---*
         BAL   R15,*+10                 SET INST ADDR
         MVC   P99UCS,8(R14)            << EXECUTED >>
         CLC   =C'UCS',0(R14)           IS THIS UCS?
         BE    PR$GOTKY                 YES - GO SAVE OPERAND
         SPACE 1
*---  CHECK FOR 'FCB='                                             ---*
         BAL   R15,*+10                 SET INST ADDR
         MVC   P99FCB,8(R14)            << EXECUTED >>
         CLC   =C'FCB',0(R14)           IS THIS FCB?
         BE    PR$GOTKY                 YES - GO SAVE OPERAND
         SPACE 1
*---  CHECK FOR 'FORM='                                            ---*
         BAL   R15,*+10                 SET INST ADDR
         MVC   P99FORM,8(R14)           << EXECUTED >>
         CLC   =C'FORM',0(R14)          IS THIS FORM?
         BE    PR$GOTKY                 YES - GO SAVE OPERAND
         QTILT '*** LOGIC ERROR IN "ALLOCHC" ***'
PR$GOTKY EX    0,0(,R15)                MOVE THE OPERAND
         BXLE  R14,R0,PR$KEYLP          SCAN ALL KEYWORD SLOTS
         SPACE 1
*---  SET POINTERS TO OPTIONAL TEXT UNITS
PR$KEYSP LA    R0,P99TDEST              -> TEXT UNIT
         CLI   P99DEST,C' '             ANY DEST FROM EITHER SOURCE?
         BNH   *+8                      NO - DON'T USE THIS TEXT KEY
         ST    R0,P99PDEST              YES - SET TEXT UNIT POINTER
         SPACE 1
         LA    R0,P99TFCB               -> TEXT UNIT
         CLI   P99FCB,C' '              IS THERE ANYTHING?
         BE    *+8                      NO - DON'T USE THIS TEXT KEY
         ST    R0,P99PFCB               YES - SET TEXT UNIT POINTER
         SPACE 1
         LA    R0,P99TUCS               -> TEXT UNIT
         CLI   P99UCS,C' '              IS THERE ANYTHING?
         BE    *+8                      NO - DON'T USE THIS TEXT KEY
         ST    R0,P99PUCS               YES - SET TEXT UNIT POINTER
         SPACE 1
         LA    R0,P99TFORM              -> TEXT UNIT
         CLI   P99FORM,C' '             IS THERE ANYTHING?
         BE    *+8                      NO - DON'T USE THIS TEXT KEY
         ST    R0,P99PFORM              YES - SET TEXT UNIT POINTER
         SPACE 1
*  DO THE ALLOCATE
         LA    1,DYNALLOC               ADDR OF PARM LIST FOR DYNALLOC.
         DYNALLOC
         LTR   R15,R15                  CHK RETURN CODE
         BNZ   CANTALLC                 NO CAN DO..POST MESSAGE
         BAL   R14,QAMODE24             change to AMODE 24
         OPEN  MF=(E,QPPRNT)            OPEN THE FILE
         BAL   R14,QAMODE31             resume AMODE 31
         SR    R1,R1                    clear for ICM
         ICM   R1,B'0111',QPPRNT+1      -> HASPPRNT DCB
         TM    48(R1),X'10'             CHECK FOR SUCCESSFUL OPEN.
         BZ    PRNTBAD                  SKIP SWITCH SETTING IF BAD OPEN
         OI    QPFLAG,HARDCPY           INDICATE HARDCPY FILE AVAILABLE
         MVC   QDTOP+19(30),=C' PRINT STARTED; SYSOUT=X,DEST='
         MVC   QDTOP+42(1),P99CLASS     MOVE IN SYSOUT CLASS
         MVC   QDTOP+49(8),P99DEST
         CLI   QDTOP+49,C' '            ANY DEST?
         BHR   R7
         MVC   QDTOP+49(8),QPDEST       SAY LOGON DEFAULT DEST
         CLI   QPDEST,C' '              STILL BLANK?
         BHR   R7                       NO - OK
         MVC   QDTOP+49(8),=C'CENTRAL ' WHEN ALL ELSE FAILS...
         BR    R7                       RETURN
         SPACE 3
PRNTBAD  QTILT '*** UNABLE TO ALLOC/OPEN HASPPRNT FOR HARDCOPY ***'
CLASSBAD QTILT '*** INVALID SYSOUT CLASS (SECOND OPERAND) ***',        $
               OPTIONS=(REPROMPT,SET)
***********************************************************************
*        FORMULATE TEXT FOR SVC99 ALLOCATE FAILURE
***********************************************************************
         SPACE 3
CANTALLC CLC   P99ERROR,=X'046C'        WAS IT 'RMT NOT DEF TO JES2'?
         BE    BADRMT                   YES..POST MSG AND EXIT
*
         MVC   QDTOP(L'MSGERR),MSGERR
         CVD   R15,DBLWORK              CONVERT SVC 99 RETURN CODE
         MVC   QDTOP+53(4),=X'40202020' TO NICE PRINTABLE DECIMAL
         ED    QDTOP+53(4),DBLWORK+6
*
         UNPK  QDTOP+34(5),P99ERROR(3)  CONVERT DYNAM ALLOC ERR CODE
         TR    QDTOP+34(4),QHEXTAB      TO PRINTABLE HEXADECIMAL
         MVI   QDTOP+38,C' '
*
         UNPK  QDTOP+44(5),P99INFO(3)   CONVERT DYNAM ALLOC INFO
         TR    QDTOP+44(4),QHEXTAB      CODE TO PRNTABLE HEX
         MVI   QDTOP+48,C' '
         B     GOTMSG                   AND GO POST THE MESSAGE
*
BADRMT   MVC   QDTOP(L'MSGNRMT),MSGNRMT    MOVE IN NO SUCH REMOTE MSG
         MVC   QDTOP+7(8),P99DEST       MOVE IN REMOTE ASKED FOR
         B     GOTMSG                   AND GO POST THE MESSAGE
         SPACE 2
PR#CMD   LC    '/COMMAND ===>'
MSGNRMT  DC    C'REMOTE XXXXXXXX NOT DEFINED TO JES2; PRINT BYPASSED'
MSGERR   DC    C'CANT ALLOC SYSOUT FOR PRINT; DARC=XXXX INFO=XXXX R15=X$
               XXX '
         SPACE 2
         ENTRY PR#KEYS
PR#KEYS  DC    CL8'DEST    '
         DC    CL8'UCS     '
         DC    CL8'FCB     '
         DC    CL8'FORM    '
*        DC    CL8'CHARS   '
*        DC    CL8'HOLD    '
*        DC    CL8'LINECNT '
         DC    X'FF'                    END OF KEYWORD TABLE
         EJECT ,
         LTORG
         EJECT ,
         DC    0F'0'
*                                       SVC 99 REQUEST BLOCK  PTR
S99RBPTR DC    X'80',AL3(S99RB)
*                                       SVC 99 REQUEST BLOCK
S99RB    DC    0F'0'
S99RBLN  DC    AL1(20)                  LENGTH=20 BYTES
S99VERB  DC    X'01'                    VERB CODE=01 (DSNAME ALLOC)
S99FLAG1 DC    X'1000'                  DONT USE EXISTING ALLOC
S99ERROR DC    AL2(0)                           ERROR CODE
S99INFO  DC    AL2(0)                           INFO  CODE
S99TXTPP DC    A(S99PDDN)               POINTER TO TEXT UNIT POINTERS
S99RSVD1 DC    A(0)                       RESERVED
S99FLAG2 DC    A(0)                       FLAGS 2
S99PDDN  DC    A(S99TDDN)               TEXT UNIT POINTERS
S99PCLAS DC    A(S99TCLAS-S99TCLAS)     -> CLASS TEXT UNIT
S99PFCB  DC    A(S99TFCB-S99TFCB)       -> FCB TEXT UNIT, OR ZERO
S99PUCS  DC    A(S99TUCS-S99TUCS)       -> UCS TEXT UNIT, OR ZERO
S99PFORM DC    A(S99TFORM-S99TFORM)     -> FORM TEXT UNIT, OR ZERO
S99PDEST DC    A(S99TDEST-S99TDEST)     -> DEST TEXT UNIT, OR ZERO
         DC    X'80000000'              LAST TEXT UNIT POINTER
S99TDDN  DC    X'0001',AL2(1,8),C'HASPPRNT'  DDNAME=HASPPRNT
S99TCLAS DC    X'0018',AL2(1,1)         SYSOUT=A
S99CLASS DC    C'A'
S99TFCB  DC    X'0025',AL2(1,4)         FCB=
S99FCB   DC    CL4' '
S99TUCS  DC    X'0029',AL2(1,4)         UCS=
S99UCS   DC    CL4' '
S99TFORM DC    X'001A',AL2(1,4)         FORM=
S99FORM  DC    CL4' '
S99TDEST DC    X'0058',AL2(1,8)         DEST=
S99DEST  DC    CL8' '
         DC    0D'0'
S99LENG  EQU   *-S99RBPTR               LENGTH OF WHOLE MAGILLA
         SPACE 3
*.....................................................................*
*.       DYNAMIC ALLOCATION REQUEST BLOCK TO FREE DDNAME HASPPRNT    .*
*.....................................................................*
         SPACE 3
         DC    0F'0'                    GET FULLWORD BOUNDARY
F99PTR   DC    X'80',AL3(F99RB)         THE POINTER TO THE MESS..
*
F99RB    DC    FL1'20'                  LENGTH OF RB IN BYTES = 20
         DC    XL1'02'                  VERB CODE=X'02'..FREE BY DDN
         DC    AL2(0)                   FLAGS1..NO OPTIONS
F99RC    DC    XL2'0000'                ERROR CODE
F99INFO  DC    XL2'0000'                INFO CODE
         DC    AL4(F99TXPT)             ADDRESS OF TEXT UNITS
         DC    XL4'00'                  RESERVED
         DC    XL4'00'                  FLAGS2
         SPACE 2
F99TXPT  DC    AL4(F99TU1)              ADDR OF DSN TEXT UNIT
         DC    AL4(0)                   -> T.U. FOR DEL, CLASS, OR HOLD
         DC    X'80',AL3(F99TU2)        ADDR OF UNALLOC TEXT TU(LAST)
         SPACE 2
F99TU1   DC    X'0001',AL2(1,8),C'HASPPRNT'  DDNAME
F99TU2   DC    X'0007',AL2(0)           UNALLOC EVEN IF PERM ALLOC
F99TU3   DC    X'0005',AL2(1,1),X'04'   OVERRIDING DISP=DELETE
F99TU4   DC    X'0018',AL2(1,1),C' '    OVERRIDING SYSOUT CLASS
F99TU5   DC    X'0059',AL2(0)           OVERRIDING SYSOUT HOLD
F99LEN   EQU   *-F99PTR                 LENGTH OF FILEDS
         EJECT ,
***********************************************************************
WORK     DSECT
         ORG   WORK+72                  SKIP OVER SAVE AREA
PR@FIRST DS    PL4                      FIRST DS RECORD # TO PRINT
PR@LAST  DS    PL4                      LAST  DS RECORD # TO PRINT
PR@FLAG  DS    B
PR@PRTED EQU   X'80'                    WE HAVE PRINTED SOMETHING
PR@WORKL EQU   *-WORK
DBLWORK  DS    D
BINYEAR  DS    F
BINDAYS  DS    F
DATE     DS    F
WORKWORD DS    2F,C
PR@CC    DS    C                        ASA
PR@LINE  DS    CL132
         DS    CL150                    SLOP FACTOR (SEE PR$RA)
         DS    0D
PR@EDWRK DS    0CL20                    WORK AREA FOR EDMK
PR@TRTAB DS    XL256
***********************************************************************
* LEAVE FIELDS TOGETHER.. INITIALIZED BY ONE MVC WITH VALUES
*
MONMSK   DC    AL1(31,30,31,30,31,31,30,31,30,31,28,31)
         DC    CL1' '                                    L
JDATE    DC    C'XX.XXX',C'  '                           E  F
TIMEHRS  DC    CL2' ',C'.'                               A  I  T
TIMMINS  DC    CL2' ',C'.'                               V  E  O
TIMSECS  DC    CL2' ',C' '                               E  L  G
CDAY     DC    CL3' ',C' '                                  D  E
CMON     DC    CL3' ',C' '                                  S  T
CDAYN    DC    CL2' ',C',19'                                   H
CYR      DC    CL2'  ',C' '                                    E
*                                                              R
***********************************************************************
LEN      EQU   *-JDATE
         SPACE 2
         DS    0F
DYNALLOC DS    (S99LENG)XL1
         ORG   DYNALLOC
*                                       SVC 99 REQUEST BLOCK  PTR
P99RBPTR DC    X'80',AL3(P99RB)
*                                       SVC 99 REQUEST BLOCK
P99RB    DC    0F'0'
P99RBLN  DC    AL1(20)                  LENGTH=20 BYTES
P99VERB  DC    X'01'                    VERB CODE=01 (DSNAME ALLOC)
P99FLAG1 DC    X'1000'                  DONT USE EXISTING ALLOC
P99ERROR DC    AL2(0)                           ERROR CODE
P99INFO  DC    AL2(0)                           INFO  CODE
P99TXTPP DC    A(P99PDDN)               POINTER TO TEXT UNIT POINTERS
P99RSVD1 DC    A(0)                          RESERVED
P99FLAG2 DC    A(0)                          FLAGS 2
P99PDDN  DC    A(P99TDDN)               TEXT UNIT POINTERS
P99PCLAS DC    A(P99TCLAS)              -> CLASS TEXT UNIT
P99PFCB  DC    A(P99TFCB)               -> FCB TEXT UNIT, OR ZERO
P99PUCS  DC    A(P99TUCS)               -> UCS TEXT UNIT, OR ZERO
P99PFORM DC    A(P99TFORM)              -> FORM TEXT UNIT, OR ZERO
P99PDEST DC    A(P99TDEST)              -> DEST TEXT UNIT, OR ZERO
         DC    X'80000000'              LAST TEXT UNIT POINTER
P99TDDN  DC    X'0001',AL2(1,8),C'HASPPRNT'  DDNAME=HASPPRNT
P99TCLAS DC    X'0018',AL2(1,1)         SYSOUT=A
P99CLASS DC    C'A'
P99TFCB  DC    X'0025',AL2(1,4)         FCB=
P99FCB   DC    CL4' '
P99TUCS  DC    X'0029',AL2(1,4)         UCS=
P99UCS   DC    CL4' '
P99TFORM DC    X'001A',AL2(1,4)         FORM=
P99FORM  DC    CL4' '
P99TDEST DC    X'0058',AL2(1,8)         DEST=
P99DEST  DC    CL8' '
         SPACE 3
         ORG   DYNALLOC
         DC    0F'0'                    GET FULLWORD BOUNDARY
FREEPTR  DC    X'80',AL3(FREERB)        THE POINTER TO THE MESS..
*
FREERB   DC    FL1'20'                  LENGTH OF RB IN BYTES = 20
         DC    XL1'02'                  VERB CODE=X'02'..FREE BY DDN
         DC    AL2(0)                   FLAGS1..NO OPTIONS
FREERC   DC    XL2'0000'                ERROR CODE
FREEINFO DC    XL2'0000'                INFO CODE
FREETPTR DC    AL4(FREETXPT)            ADDRESS OF TEXT UNITS
         DC    XL4'00'                  RESERVED
         DC    XL4'00'                  FLAGS2
         SPACE 2
FREETXPT DC    AL4(FREETU1)             ADDR OF DSN TEXT UNIT
         DC    AL4(0)                   -> T.U. FOR DEL, CLASS, OR HOLD
         DC    X'80',AL3(FREETU2)       ADDR OF UNALLOC TEXT TU(LAST)
         SPACE 2
FREETU1  DC    X'0001',AL2(1,8),C'HASPPRNT'   DDNAME
FREETU2  DC    X'0007',AL2(0)           UNALLOC EVEN IF PERM ALLOC
FREETU3  DC    X'0005',AL2(1,1),X'04'   OVERRIDING DISP=DELETE
FREETU4  DC    X'0018',AL2(1,1),C' '    OVERRIDING SYSOUT CLASS
FREETU5  DC    X'0059',AL2(0)           OVERRIDING SYSOUT HOLD
         ORG   ,
         SPACE 1
         DROPX R13,R8                   WORK, QPRNTWA
         SPACE 1
         QCOMMON
         SPACE 2
         Q$LRC
