         TITLE '--- QUEUE--HEXBLK -- HEXADECIMAL DUMP OF A BLOCK ---'
*---------------------------------------------------------------------*
*                                                                     *
*   HEXBLK - Display a block from HASPACE in dump or character forms  *
*                                                                     *
*   Entry - Block address in QPARM1                                   *
*         - 'C' in QKEYWORD to request character form                 *
*                                                                     *
*   Updates:                                                          *
*      16Jun90  LDW  Fix for running AMODE 31                         *
*      23Nov89  LDW  Eliminate "LC" macro usage                       *
*       1Jun87  EMS  Update for Starting/Draining spool volumes       *
*      17Jan87  LDW  Misc cleanup                                     *
*      03/31/86 LDW  RE-DESIGN 3278-5 SUPPORT (THIRD TRY!)            *
*      11/15/84 LDW  FIX JCT OFFSET DISPLAY                           *
*      01/23/84 LDW  ADD SUPPORT FOR COMMAND STACKING                 *
*                    DISPLAY ADDRESS FOR QCMN, CKPT                   *
*      01/06/83 LDW  CHANGE 'C' OPERAND FROM POSITIONAL-2 TO KEYWORD  *
*                    ADD HCT, QCMN, CKPT SUBCOMMANDS                  *
*                    ADD DISPLACEMENT AND OFFSET SUPPORT              *
*      12/20/82 LDW  CHANGE QTILT REPRMPT=YES TO OPTIONS=REPROMPT     *
*      12/08/82 LDW  CHANGE USAGE OF QPARM4 TO HBHEXIN (ADDED)        *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 3
HEXBLK   QSTART  Q9
         USING WORK,R13
         QCALL DISP80                   SWITCH TO 3278-2 MODE IF 3278-5
         LH    R15,QCODEH               GET ENTRY CODE
         TM    QXAUTH,QXSYSP            SYSTEMS PROGRAMMER?
         BO    HB$BRTAB(R15)            YES - ALLOW SUBCOMMAND
         TM    QXAUTH,QXOPER+QXPSWD     OPERATOR PLUS KNOW PASSWORD?
         BO    HB$BRTAB(R15)            YES - ALLOW SUBCOMMAND
         QTILT '*** PRIVILEGED SUBCOMMAND ***'  THIS IS A SENSITIVE CMD
HB$BRTAB B     HB$XB                    00 - XB
         B     HB$JCT                   04 - JCT
         B     HB$HCT                   08 - HCT
         B     HB$QCMN                  12 - QCMN
         B     HB$CKPT                  16 - CKPT
***********************************************************************
*                                                                     *
*   VALIDATE AND CONVERT BLOCK ADDRESS                                *
*                                                                     *
***********************************************************************
HB$XB    QSTACK  X'A0'
         L     R2,QCBLKA                -> BUFFER
         CLI   QPARM1,C'$'              REDISPLAY FROM CURRENT BUFFER?
         BE    HB$STAR                  YES - USE IT
         MVC   QCTRAK,QXBTRAK           COPY LAST MTTR
         CLI   QPARM1,C'*'              USE LAST MTTR?
         BE    HB$STAR                  YES - USE IT
         CLI   QPARM1,C'+'              CHAIN FROM CURRENT BLOCK?
         BNE   HB$NEW                   NO - GO CONVERT MTTR
         OC    0(4,R2),0(R2)            ANY CHAIN MTTR?
         BNZ   HB$CHAIN                 YES - USE IT
         QTILT '*** BLOCK CHAIN FIELD IS ZERO ***'
HB$CHAIN MVC   QCTRAK,0(R2)             SET MTTR TO READ
         B     HB$STAR                  GO READ IT
HB$NEW   LH    R15,QLNG1                LENGTH OF PARM
         MVC   HBHEXIN,QPARM1           PARM
         BAL   R8,HBGETHEX              CONVERT FROM HEX
         B     HB$TILT                  TILT IF INVALID HEX
         B     HB$TILT                  TILT IF NO OPERAND
         MVC   QCTRAK,HBHEXOUT          SET MTTR TO READ
         MVC   QXBTRAK,HBHEXOUT         SAVE FOR NEXT TIME
***********************************************************************
*                                                                     *
*   READ THE BLOCK FROM HASPACE                                       *
*                                                                     *
***********************************************************************
HB$STAR  LH    R1,QCHSBLK               HASPACE BLOCK SIZE
         BCTR  R1,0                     SUBTRACT 1
         N     R1,=F'-64'               ROUND TO PREV. 64 BYTE BOUNDARY
         AR    R1,R2                    ADD BASE OF BUFFER
         MVC   0(64,R1),QBLANK          BLANK LAST 64 BYTES OF BUFFER
         LR    R1,R2                    PARM FOR READSPC
         QCALL READSPC                  READ HASPACE
***********************************************************************
*                                                                     *
*   PRINT THE BLOCK                                                   *
*                                                                     *
***********************************************************************
         L     R6,=V(CHARTAB)           -> CHARACTER TRANSLATE TABLE
         MVC   QDHLINE,QBLANK           BLANK THE TITLE LINE
         MVC   QDHLINE(5),=C'BLOCK'
         UNPK  QDHLINE+6(8+1),QCTRAK(4+1)
         TR    QDHLINE+6(8),HB#TBL#H
         MVC   QDHLINE+14(5),=C' FROM'
         MVC   QDHLINE+20(17),QDSNSPC+2 MOVE IN DSNAME OF HASPSPC
         MVC   QDHLINE+38(2),=C'ON'
         SR    R1,R1                    CLEAR FOR IC
         IC    R1,QCTRAKM               GET RELATIVE DCB NUMBER
         L     R15,QCEXTMAP             -> extent map
         IC    R1,0(R1,R15)             get correct dcb addr
         SLL   R1,2                     MULTIPLY BY 4
         L     R15,QCSPOOLS             -> Dcb table
         L     R1,0(R1,R15)             -> DCB
         L     R1,44(,R1)               -> DEB
         L     R1,32(,R1)               -> UCB
         N     R1,=X'00FFFFFF'          purify the address
         MVC   QDHLINE+41(6),28(R1)     MOVE VOLSER TO TITLE
         SR    R4,R4                    SET DEFAULT DISPLACEMENT
         LH    R15,QLNG2                LENGTH OF PARM
         MVC   HBHEXIN,QPARM2           COPY THE DISPLACEMENT OPERAND
         BAL   R8,HBGETHEX              CONVERT IT
         B     HB$TILT3                 TILT IF INVALID
         B     *+8                      SKIP IF OMITTED
         L     R4,HBHEXOUT              GET THE DISPLACEMENT
         AR    R2,R4                    AND ADJUST STARTING ADDR
         CLI   QKEYWORD,C'C'            WANT CHARACTER FORM?
         BNE   HB$DUMP                  NO - DO HEX DUMP
         USING HB@IN,R2                 BASE REG FOR RAW BLOCK
         LA    R3,QDMSG                 -> MSG LINE
         USING HB@OUT,R3                BASE REG FOR PRINTABLE LINES
HB$LOOP  MVC   HBOLINE1,QBLANK          BLANK THE WORK AREA
         MVC   HB@O1,HB@I1              MOVE RECORD TO PRINT LINE
         MVC   HB@O2,HB@I2
         MVC   HB@O3,HB@I3
         MVC   HB@O4,HB@I4
         MVC   HB@O5,HB@I5
         MVC   HB@O6,HB@I6
         MVC   HB@O7,HB@I7
         MVC   HB@O8,HB@I8
         STH   R4,QNUMWORK              STORE OFFSET
         UNPK  HBOFFSET(5),QNUMWORK(3)  CONVERT TO HEX
         TR    HBOFFSET,HB#TBL#H        TRANSLATE TO PRINTABLE
         MVI   HBOFFSET+4,C' '          CLEAR GARBAGE BYTE
         TR    HBODATA1,0(R6)           TRANSLATE OUT BAD CHARACTERS
         BAL   R14,QADDLINE             DISPLAY THE LINE
         LR    R1,R2                    SAVE ADDR OF RECORD
HB$SKIP  LA    R2,64(,R2)               NEXT RECORD
         LA    R4,64(,R4)               INCREMENT TO NEXT OFFSET
         CH    R4,QCHSBLK               STILL IN THE BLOCK?
         BNL   QSTOP                    NO. GO HOME.
         CLC   0(64,R1),0(R2)           THIS RECORD THE SAME AS PREV?
         BE    HB$SKIP                  YES. SKIP IT.
         B     HB$LOOP                  PRINT NEXT RECORD
         SPACE 2
HB$DUMP  LR    R1,R2                    SET ADDR
         LR    R0,R4                    SET OFFSET
         LH    R2,QCHSBLK               SET LENGTH
         QCALL HEXFMT                   GO DISPLAY IN CORE DUMP FORMAT
         B     QSTOP                    ALL DONE
***********************************************************************
*                                                                     *
*   DISPLAY JCT                                                       *
*                                                                     *
***********************************************************************
HB$JCT   QSTACK  X'30'
         LA    R4,BUFSTART-BUFDSECT     SET DEFAULT OFFSET
         LH    R15,QLNG2                LENGTH OF PARM
         MVC   HBHEXIN,QPARM2           COPY THE OFFSET OPERAND
         BAL   R8,HBGETHEX              CONVERT IT
         B     HB$TILT2                 TILT IF INVALID
         B     *+8                      SKIP IF OMITTED
         L     R4,HBHEXOUT              GET THE DISPLAY OFFSET
         QCALL FINDJOB                  LOCATE THE JCT, ETC
         OI    QSCFLAG1,QSC1JOB         PUT JOBID IN QDTOP
         MVC   QDHLINE,QBLANK           CLEAR HEADER LINE
         MVC   QDHLINE(L'HB#JCT),HB#JCT MOVE IN HEADER
         L     R1,QCJCTA                -> JCT
         LR    R0,R4                    SET OFFSET
         LH    R2,QCHSBLK               SET LENGTH
         QCALL HEXFMT                   GO DISPLAY IN CORE DUMP FORMAT
         B     QSTOP                    ALL DONE
***********************************************************************
*                                                                     *
*   DISPLAY HCT $SAVEAREA                                             *
*                                                                     *
***********************************************************************
HB$HCT   QSTACK  X'B0'
         QCALL CKPT                     READ CHECKPOINT DATA
         LA    R4,$SAVEBEG-HCTDSECT  SET DEFAULT OFFSET
         LH    R15,QLNG1                LENGTH OF PARM
         MVC   HBHEXIN,QPARM1           COPY THE OFFSET OPERAND
         BAL   R8,HBGETHEX              CONVERT IT
         B     HB$TILT2                 TILT IF INVALID
         B     *+8                      SKIP IF OMITTED
         L     R4,HBHEXOUT              GET THE DISPLAY OFFSET
         MVC   QDHLINE,QBLANK           CLEAR HEADER LINE
         MVC   QDHLINE(L'HB#HCT),HB#HCT MOVE IN HEADER
         L     R1,QCJQTL                -> HCT $SAVEAREA
         LR    R0,R4                    SET OFFSET
         LA    R2,$SAVELEN              SET LENGTH
         QCALL HEXFMT                   GO DISPLAY IN CORE DUMP FORMAT
         B     QSTOP                    ALL DONE
***********************************************************************
*                                                                     *
*   DISPLAY QCOMMON WORK AREA                                         *
*                                                                     *
***********************************************************************
HB$QCMN  QSTACK  X'B0'
         SR    R4,R4                    SET DEFAULT OFFSET
         LH    R15,QLNG1                LENGTH OF PARM
         MVC   HBHEXIN,QPARM1           COPY THE DISPLACEMENT OPERAND
         BAL   R8,HBGETHEX              CONVERT IT
         B     HB$TILT3                 TILT IF INVALID
         B     *+8                      SKIP IF OMITTED
         L     R4,HBHEXOUT              GET THE DISPLACEMENT
         MVC   QDHLINE,QBLANK           CLEAR HEADER LINE
         MVC   QDHLINE(L'HB#QCMN),HB#QCMN  MOVE IN HEADER
         ST    R11,HBHEXOUT             SAVE FOR UNPK
         UNPK  QDHLINE+L'HB#QCMN(8+1),HBHEXOUT(4+1)
         TR    QDHLINE+L'HB#QCMN(8),HB#TBL#H
         MVI   QDHLINE+L'HB#QCMN+8,C')'
         LA    R1,0(R4,R11)             -> QCOMMON
         LR    R0,R4                    SET OFFSET
         L     R2,QGETMAIN              SET LENGTH
         SR    R2,R4                    ADJUST BY DISPLACEMENT
         BNP   HB$TILT4                 ABORT IF DISPLACEMENT > LENGTH
         QCALL HEXFMT                   GO DISPLAY IN CORE DUMP FORMAT
         B     QSTOP                    ALL DONE
***********************************************************************
*                                                                     *
*   DISPLAY CKPT DATA                                                 *
*                                                                     *
***********************************************************************
HB$CKPT  QSTACK  X'B0'
         QCALL CKPT                     READ CHECKPOINT DATA
         SR    R4,R4                    SET DEFAULT DISPLACEMENT
         LH    R15,QLNG1                LENGTH OF PARM
         MVC   HBHEXIN,QPARM1           COPY THE DISPLACEMENT OPERAND
         BAL   R8,HBGETHEX              CONVERT IT
         B     HB$TILT3                 TILT IF INVALID
         B     *+8                      SKIP IF OMITTED
         L     R4,HBHEXOUT              GET THE DISPLACEMENT
         MVC   QDHLINE,QBLANK           CLEAR HEADER LINE
         MVC   QDHLINE(L'HB#CKPT),HB#CKPT  MOVE IN HEADER
         UNPK  QDHLINE+L'HB#CKPT(8+1),QCJQTL(4+1)
         TR    QDHLINE+L'HB#CKPT(8),HB#TBL#H
         MVI   QDHLINE+L'HB#CKPT+8,C')'
         L     R1,QCJQTL                -> CKPT DATA
         AR    R1,R4                    ADJUST BY DISPLACEMENT
         LR    R0,R4                    SET OFFSET
         L     R2,QCJOTL                GET NUMBER OF CKPT BLOCKS
         SLL   R2,12                    SET LENGTH TO DISPLAY
         SR    R2,R4                    ADJUST BY DISPLACEMENT
         BNP   HB$TILT4                 ABORT IF DISPLACEMENT > LENGTH
         QCALL HEXFMT                   GO DISPLAY IN CORE DUMP FORMAT
         B     QSTOP                    ALL DONE
***********************************************************************
*                                                                     *
*   ERROR MESSAGES                                                    *
*                                                                     *
***********************************************************************
HB$TILT  QTILT '*** BLOCK ADDRESS WAS OMITTED OR INVALID ***',         $
               OPTIONS=REPROMPT
HB$TILT2 QTILT '*** DISPLAY OFFSET IS INVALID ***',OPTIONS=REPROMPT
HB$TILT3 QTILT '*** DISPLACEMENT IS INVALID ***',OPTIONS=REPROMPT
HB$TILT4 QTILT '*** DISPLACEMENT IS GREATER THAN AREA LENGTH ***',     $
               OPTIONS=REPROMPT
***********************************************************************
*                                                                     *
*   SUBROUTINE TO CONVERT FROM INPUT HEX                              *
*                                                                     *
***********************************************************************
HBGETHEX LTR   R14,R15                  COPY AND TEST LENGTH
         BNP   4(,R8)                   RETURN IF NO OPERAND
         BCTR  R14,0                    -1 FOR EX
         EX    R14,HB$TRT               ALL VALID CHARACTERS?
         BNZR  R8                       NO - RETURN
         TR    HBHEXIN,HB#TBL#H         CONVERT TO HEX
         EX    R15,HB$PACK              PACK INTO HBHEXOUT
         B     8(,R8)                   RETURN
HB$TRT   TRT   HBHEXIN(*-*),HB#TBL#V    << EXECUTED >>
HB$PACK  PACK  HBHEXOUT(4+1),HBHEXIN(*-*)  << EXECUTED >>
***********************************************************************
*                                                                     *
*   MISCELLANY                                                        *
*                                                                     *
***********************************************************************
         ENTRY HB#KEYS
HB#KEYS  DC    CL8'C',CL8'CHAR'
         DC    X'FF'                    END OF KEYWORD TABLE
         LTORG
HB#JCT   DC    C'Hex dump of JCT'
HB#HCT   DC    C'Hex dump of HCT $SAVEAREA'
HB#QCMN  DC    C'Hex dump of QCOMMON ('
HB#CKPT  DC    C'Hex dump of CKPT data ('
* TABLE FOR HEX CONVERT/UNCONVERT
HB#TBL#H EQU   *-C'A'
         DC    X'0A0B0C0D0E0F',CL41' ',C'0123456789ABCDEF'
* TABLE USED TO VERIFY HEX OPERAND
HB#TBL#V DC    256X'FF'
         ORG   HB#TBL#V+C'A'
         DC    6X'00'
         ORG   HB#TBL#V+C'0'
         DC    10X'00'
         ORG   ,
* INPUT WORK AREA
HB@IN    DSECT
HB@I1    DS    CL8
HB@I2    DS    CL8
HB@I3    DS    CL8
HB@I4    DS    CL8
HB@I5    DS    CL8
HB@I6    DS    CL8
HB@I7    DS    CL8
HB@I8    DS    CL8
* OUTPUT WORK AREA
HB@OUT   DSECT
HBOLINE1 DS    0CL80
HBOFFSET DS    CL4
         DS    CL2
HBODATA1 DS    0CL74
HB@O1    DS    CL8
         DS    C
HB@O2    DS    CL8
         DS    CL2
HB@O3    DS    CL8
         DS    C
HB@O4    DS    CL8
         DS    CL2
HB@O5    DS    CL8
         DS    C
HB@O6    DS    CL8
         DS    CL2
HB@O7    DS    CL8
         DS    C
HB@O8    DS    CL8
         SPACE 3
         DROP  R2,R3
         SPACE 3
WORK     DSECT
         ORG   WORK+72                  SKIP OVER THE SAVE AREA
HBHEXIN  DS    CL8
HBHEXOUT DS    XL4,X
         SPACE 2
         QCOMMON
         SPACE 2
         Q$HCT
         Q$BUFFER
