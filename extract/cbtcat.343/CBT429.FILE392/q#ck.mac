         TITLE '--- QUEUE--CKPT -- READ JES2 CKPT RECORDS ---'
*---------------------------------------------------------------------*
*                                                                     *
*   CKPT - Read the JES2 checkpoint dataset into storage              *
*                                                                     *
*   Updates:                                                          *
*      14Jul91  LDW  Do logic trace if QDEBUG47                       *
*      25Sep90  LDW  Switch to 24 bit mode before POINT               *
*      16Jun90  LDW  Use new QAMODE24/31 subroutines                  *
*                    Since we now run in AMODE=31, change to AMODE 24 *
*                       when doing I/O, and don't do other switching  *
*      04Jun89  LDW  Use improved AUTHFUNC routine                    *
*      31May89  LDW  Don't switch back to key NZERO if not APF!       *
*                    Init flag byte to zero                           *
*                    Copy applcopy even if it didn't change (temp?)   *
*                    Bypass intentional delay if reading from         *
*                       in-storage checkpoint                         *
*      15May89  EMS  Copy from in core checkpoint optionally          *
*      25Sep88  LDW  Fix bug:  don't read one extra block (this       *
*                       sometimes caused Abend337-04)                 *
*       5Jun87  EMS  fix for base level JES2                          *
*      16Jan87  LDW  SP136 update                                     *
*      03JUN86  LDW  IMPLEMENT CHAINED SCHEDULING                     *
*      08/06/84 LDW  ALLOW FOR MASTER RECORD > 4K FOR SP              *
*                       (SEE "INITIAL")                               *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE 3
CKPT     QSTART  Q3,WORKLEN=CK@WORKL
         USING WORK,R13
         QDEBUG QDEBUG47,'>>> at ckpt'
         L     R15,QC##CKPT             GET CALL COUNTER
         LA    R15,1(,R15)              INCREMENT
         ST    R15,QC##CKPT             STORE UPDATED COUNTER
         MVI   CK@FLAG,0                init flags
         SPACE 2
          AIF   (&QLEVEL LT 8).CK01
***********************************************************************
*                                                                     *
*   Check to see if in core checkpoint is available                   *
*                                                                     *
***********************************************************************
         TM    QXAUTH,QXAPFENT+QXSUPR   APF authorized or SUPR state?
         BNZ   CK$APFOK                 yes - continue
         QDEBUG QDEBUG47,'>>> ckpt needs apf'
         LA    R1,4                     ask for auth
         LNR   R1,R1                    make it conditional
         QCALL AUTHFUNC                 try to get APF authorized
         LTR   R15,R15                  did we get it?
***      BNZ   CK$KC$SW                 branch if nogo
         BNZ   CKPT$GO                  branch if nogo
         QDEBUG QDEBUG47,'>>> ckpt got apf'
         SPACE 1
CK$APFOK ICM   R8,B'1111',QKACA         -> KAC area
         BZ    CK$KC$SW                 if invalid, don't use
         QDEBUG QDEBUG47,'>>> ck$apfok using kac'
         USNGX KAC,R8
         TM    QMODE2,QM2CKPT           use incore checkpoint?
         BZ    CK$KC$SW                 no, read ckpt
         LA    R1,12                    function code
         QCALL AUTHFUNC                 go key zero
         CLC   =C'KAC',KACIDENT         is it really a KAC?
         BNE   CK$KC$SW                 no, read normally
         TM    KACFLAG1,KAC1ECSA        in ECSA?
         BZ    CK$KC$SW                 no, read ckpt
         TM    KACFLAG1,KAC1GONE+KAC1BADC   unusable?
         BNZ   CK$KC$SW                 yes, read ckpt
         OI    CK@FLAG,CK@FCKPT         read from in core
CK$KC$SW LA    R1,16                    function code
         QCALL AUTHFUNC                 reset key
         QDEBUG QDEBUG47,'>>> ck$kc$sw'
         TM    CK@FLAG,CK@FCKPT         read from in core?
         BNZ   CKPT$GO                  yes - skip delay
.CK01     ANOP ,
***********************************************************************
*                                                                     *
*   KEEP HIM FROM HITTING THE CHECKPOINT FILE TOO OFTEN               *
*                                                                     *
***********************************************************************
         TM    QXAUTH,QXSYSP            SYSTEMS PROGRAMMER?
         BO    CKPT$GO                  YES - NO DELAY
         CLI   QCKPTIME,X'FF'           FIRST TIME HERE?
         BE    CKPTMARK                 YES - NO WAIT
         TIME  BIN                      GET CURRENT TIME
         S     R0,QCKPTIME              COMPUTE ELAPSED TIME
         BNM   *+8                      CONTINUE IF OK
         A     R0,=A(24*60*60*100)      MIDNIGHT ADJUSTMENT
         LA    R2,2*100                 ASSUME 2 SECOND DELAY
         TM    QSCFLAG1,QSC1CPU         EXTRA SLOW COMMAND?
         BNO   *+8                      NO - SKIP
         SLL   R2,2                     YES - USE 8 SECOND DELAY
         CR    R0,R2                    DIFFERENCE > DELAY?
         BNL   CKPTMARK                 YES - NO WAIT
         SR    R2,R0                    COMPUTE WAIT TIME
         CH    R2,=H'50'                < .5 SECOND?
         BL    CKPTMARK                 YES - SAVE SWAP OVERHEAD
*  NOTE: IF YOU HAVE RTO OF 1.5 SECOND OR MORE, THE FOLLOWING WILL
*        ALWAYS BE SKIPPED.
         ST    R2,QNUMWORK              STORE DELAY
         STIMER  WAIT,BINTVL=QNUMWORK   MAKE HIM WAIT
         SPACE 2
CKPTMARK TIME  BIN                      GET CURRENT TIME
         ST    R0,QCKPTIME              SAVE
CKPT$GO  EQU   *
         QDEBUG QDEBUG47,'>>> ckpt$go'
          AIF   (&QLEVEL LT 8).CK02
         TM    CK@FLAG,CK@FCKPT         read from incore ckpt?
         BZ    CK$RD                    no, do real i/o
***********************************************************************
*                                                                     *
*   READ FROM IN CORE COPY OF CKPT                                    *
*                                                                     *
***********************************************************************
         QDEBUG QDEBUG47,'>>> ckpt using in core'
         LA    R1,12                    function code
         QCALL AUTHFUNC                 go key zero
*  The following may seem like a good idea, but since QUEUE modifies
*  its copy of the checkpoint data, we have to skip this for now, or
*  we get strange results if JES2 hasn't updated its copy!
         CLC   QKACTUP,KACTUP           any update since last time?
**       BE    CK$CY$SK                 no, skip read
         NOP   CK$CY$SK                 no, skip read
         L     R2,QCJQTL                -> area for master rec
         L     R14,KACMSTRA             -> kac master rec
         L     R3,$MASTERL-$SAVEBEG(,R14)  len of master rec
         LR    R15,R3                   copy for mvcl
         MVCL  R2,R14                   get master rec
         L     R2,QCJQTL                -> master rec
         L     R1,$MASTERL-$SAVEBEG(,R2)  get master record len
         LA    R1,4095(,R1)             round
         SRL   R1,12                    round to 4k
         AH    R1,$CLRECN-$SAVEBEG(,R2) # number of change blocks
         SLL   R1,12                    get back as mult of 4k
         AR    R2,R1                    -> new target
         L     R3,KACCLEN               len of copy
         L     R14,KACCKPTA             -> to ckpt area
         LR    R15,R3                   copy for mvcl
         MVCL  R2,R14                   get ckpt area
         MVC   QKACTUP,KACTUP           last update tod
         LA    R1,16                    function code
         QCALL AUTHFUNC                 reset key
         B     CK$CY$EX                 and exit in 24 bit mode
         SPACE 1
CK$CY$SK LA    R1,1                     incr by 1
         A     R1,QC#CKPT#              new count
         ST    R1,QC#CKPT#              save it
         SPACE 1
CK$CY$EX LA    R1,8                     reset apf
         QCALL AUTHFUNC                 do it only if we set it
         B     QSTOP                    and exit
.CK02     ANOP ,
***********************************************************************
*                                                                     *
*   REPOSITION DATASET                                                *
*                                                                     *
***********************************************************************
CK$RD    L     R1,QCCKPT                -> HASPCKPT
         BAL   R14,QAMODE24             change to AMODE 24
         QDEBUG QDEBUG47,'>>> ck$rd'
         SPACE 1
         POINT (1),=FS8'3'              POINT PAST SYNC RECORDS TO REC3
         SPACE 1
         L     R2,QCJQTL                -> IOAREA FOR CKPT MASTER REC
         L     R3,QCJOTL                NUMBER OF RECS IN CKPT DATASET
         L     R4,QCDECB1               -> DECB FOR HASPCKPT
          AIF   (&QLEVEL LT 4).CK03
         SPACE 1
***********************************************************************
*                                                                     *
*   READ MASTER RECORD                                                *
*                                                                     *
***********************************************************************
         SPACE 1
         READ  (R4),SF,,(R2),'S',MF=E   READ THE MASTER RECORD
         SPACE 1
         CHECK (R4)
         SPACE 1
         BAL   R14,QAMODE31             resume AMODE 31
         SPACE 1
***********************************************************************
*                                                                     *
*   READ REMAINING CHECKPOINT BLOCKS                                  *
*                                                                     *
***********************************************************************
         BCTR  R3,0                     adjust remaining record count
         L     R1,$MASTERL-$SAVEBEG(,R2)  GET MASTER RECORD LENGTH
         LA    R1,4095(,R1)             ROUND
         SRL   R1,12                    ROUND TO 4K
         SLL   R1,12                    GET BACK AS MULT OF 4K
         AR    R2,R1                    -> IOAREA FOR NEXT CKPT BLOCK
.CK03     ANOP ,
***********************************************************************
*                                                                     *
*   READ CHECKPOINT DATASET                                           *
*                                                                     *
***********************************************************************
         LH    R5,=H'4096'              LENGTH TO READ
         SPACE 1
         L     R7,QCCKPT                -> HASPCKPT DCB
         MVI   CK@NCP,0                 CLEAR TOP OF HALFWORD
         MVC   CK@NCP+1(1),DCBNCP-IHADCB(R7)  SAVE NCP VALUE
         SPACE 1
CKPT$LP1 LR    R6,R3                    COPY NUMBER OF RECORDS TO READ
         CH    R6,CK@NCP                MORE THAN LIMIT?
         BNH   *+8                      NO - OK
         LH    R6,CK@NCP                YES - USE MAX
         BAL   R10,CKPT$RD              READ "N" RECORDS
         SH    R3,CK@NUM                SUBTRACT "N" RECORDS READ
         BP    CKPT$LP1                 KEEP READING IF MORE TO GO
         B     QSTOP                    RETURN TO CALLER
         SPACE 3
*---  SUBROUTINE TO READ A SPECIFIED NUMBER OF HASPCKPT RECORDS    ---*
CKPT$RD  STH   R6,CK@NUM                SAVE NUMBER OF RECORDS TO READ
         L     R4,QVCKDECB              -> FIRST HASPCKPT DECB
         BAL   R14,QAMODE24             change to AMODE 24
         SPACE 2
*  REGISTER USAGE AT THIS POINT:
*    R2 - IOAREA FOR NEXT RECORD
*    R3 - USED BY OUTER LOOP - NUMBER OF REMAINING RECORDS TO READ
*    R4 - DECB ADDRESS
*    R5 - LENGTH TO READ
*    R6 - NUMBER OF RECORDS TO READ THIS TIME
*    R7 - HASPCKPT DCB ADDRESS
CKPT$RL1 READ  (R4),SF,(R7),(R2),(R5),MF=E  READ A RECORD
         SPACE 1
         LA    R4,HDECB1L(,R4)          INCREMENT TO NEXT DECB
         AR    R2,R5                    INCREMENT TO NEXT BUFFER
         BCT   R6,CKPT$RL1              READ NEXT RECORD
         SPACE 2
         LH    R6,CK@NUM                GET NUMBER OF RECORDS READ
         L     R4,QVCKDECB              -> FIRST HASPCKPT DECB
         SPACE 2
CKPT$RL2 CHECK (R4)                     CHECK A RECORD
         SPACE 1
         LA    R4,HDECB1L(,R4)          INCREMENT TO NEXT DECB
         BCT   R6,CKPT$RL2              CHECK NEXT RECORD
         BAL   R14,QAMODE31             resume AMODE 31
         SPACE 1
         BR    R10                      RETURN TO CALLER
         SPACE 3
         LTORG ,
         SPACE 3
         QCOMMON
         QDCB  ,                        ADDED FOR DCB EQUATES
WORK     DSECT
         ORG   WORK+72                  PAST SAVE AREA
CK@NCP   DS    H                        MAX NUMBER OF BUFFERS
CK@NUM   DS    H                        NUMBER OF RECORDS TO READ NOW
CK@FLAG  DS    X                        misc flags
CK@FCKPT EQU   X'80'                    use incore ckpt
CK@WORKL EQU   *-WORK                   len of ckpt workarea
         Q$HCT ,
         Q$KAC ,
