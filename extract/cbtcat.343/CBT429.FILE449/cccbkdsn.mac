BKDSN    TITLE 'TSO COMMAND TO RETURN BOOKMANAGER DATA SET NAME'
***********************************************************************
*                                                                     *
*        CCCBKDSN                                                     *
*                                                                     *
*        THIS PROGRAM IS A TSO COMMAND OR PROGRAM THAT IS DESIGNED    *
*        TO RUN IN A CLIST OR REXX EXEC OR CALLED INTERNALLY.  IT     *
*        WILL TAKE A A BOOKMANAGER NAME AND TYPE AND CONVERT THEN     *
*        TO A FULLY QUALIFIED DATA SET NAME.  THE DATA IS             *
*        RETURNED IN EITHER CLIST VARIABLES OR IN AN AREA POINTED     *
*        TO BY THE PARAMETER LIST.                                    *
*                                                                     *
*        INPUT(1) TSO COMMAND PARAMETER LIST WITH THREE POSITIONAL    *
*                 PARAMETERS - THE BOOKMANAGER NAME, THE              *
*                 BOOKMANAGER TYPE, AND THE NAME OF THE RETURN        *
*                 CLIST/REXX VARIABLE.                                *
*                                                                     *
*        INPUT(2) CALLED PROGRAM PARAMETER LIST CONSISTING OF THE     *
*                 BOOKMANAGER NAME, BOOKMANAGER TYPE, AND THE         *
*                 CLIST/REXX VARIABLE NAME SEPARATED BY COMMAS.       *
*                                                                     *
*        INPUT(3) THREE WORD PARAMETER LIST WITH THE FIRST WORD       *
*                 BEING THE ADDRESS OF THE 8 CHARACTER BOOKMANAGER    *
*                 NAME (PADDED WITH BLANKS), THE SECOND WORD BEING    *
*                 THE ADDRESS OF THE 8 CHARACTER BOOKMANAGER TYPE,    *
*                 AND THE THIRD WORD THE ADDRESS OF THE 44 BYTE       *
*                 DATA SET NAME RETURN AREA.                          *
*                                                                     *
*        NOTE -   IN ORDER FOR THE PROGRAM TO DETECT THE VARIOUS      *
*                 TYPES OF PARAMETER LIST, IT IS REQUIRED THAT THE    *
*                 LAST PARAMETER BE FLAGGED WITH THE HIGH ORDER       *
*                 BIT ON.                                             *
*                                                                     *
*        OUTPUT - SPECIFIED VALIABLE NAME OR AREA SET TO THE          *
*                 BOOKMANAGER DATA SET NAME.                          *
*                                                                     *
*                 RETURN CODE 0 - VALID DATA SET - VARIABLE SET       *
*                 RETURN CODE 8 - NOT WITHIN A CLIST                  *
*                 RETURN CODE 12 - SERIOUS ERROR IN PROGRAM           *
*                 RETURN CODE 16 - UNABLE TO LOCATE DEFINITION MODULE *
*                                                                     *
*        ATTRIBUTES - REENTRANT, REFRESHABLE, AMODE 31, RMODE ANY,    *
*                     UNAUTHORIZED                                    *
*                                                                     *
***********************************************************************
         EJECT
*
CCCBKDSN CSECT
CCCBKDSN AMODE 31
CCCBKDSN RMODE ANY
*
         USING CCCBKDSN,R15
         B     AROUNDID
         DC    CL8'CCCBKDSN'
         DC    CL8'V 1.1.0'
         DC    CL8'&SYSDATE'
         DC    CL8' &SYSTIME'
AROUNDID DS    0H
         STM   R14,R12,12(R13)     SAVE THE REGISTERS
*
         LR    R12,R15             LOAD REGISTER 12 WITH ENTRY
         DROP  R15
         USING CCCBKDSN,R12        ESTABLISH ADDRESSABILITY
*
         LR    R8,R1               LOAD REGISTER 8 TO PRESERVE PARMADDR
*
         LA    R0,WORKLENG         LOAD LENGTH OF GETMAINED AREA
         GETMAIN RU,LV=(0),LOC=(BELOW,ANY)
         LR    R14,R1              COPY FOR THE MOVE LONG
         LA    R15,WORKLENG        GET THE LENGTH
         SLR   R3,R3
         MVCL  R14,R2              CLEAR THE AREA
*
         ST    R13,4(,R1)          STORE ADDRESS OF PREVIOUS
*
         ST    R1,8(,R13)          STORE ADDRESS OF CURRENT
*
         LR    R13,R1              LOAD REGISTER 13 WITH SAVEAREA
*
         USING WORKAREA,R13        ESTABLISH ADDRESSABILITY
*
         MVI   MODEFLAG,0          INITIALIZE THE MODE FLAG
*
         MVI   VARINAME,C' '       BLANK OUT THE VARIABLE NAME BUF
         MVC   VARINAME+1(L'VARINAME-1),VARINAME
*
         MVI   BOOKNAME,C' '       PRE-BLANK OUT THE
         MVC   BOOKNAME+1(L'BOOKNAME-1),BOOKNAME INPUT BOOKNAME
*
         MVI   BOOKTYPE,C' '       PRE-BLANK OUT THE
         MVC   BOOKTYPE+1(L'BOOKTYPE-1),BOOKTYPE INPUT BOOK TYPE
*
         MVI   DATASETO,C' '       PRE-BLANK OUT THE
         MVC   DATASETO+1(L'DATASETO-1),DATASETO RETURN DATA FIELD
         MVI   DATASETX,X'FF'      SET A ONE TOO MANY FLAG
*
         MVC   USMVALUE,=CL8'NONE' INITIALIZE THE USM VALUE
*
         XC    RETCODE,RETCODE     ASSUME GOOD RETURN CODE
*
         EJECT
***********************************************************************
*                                                                     *
*        LOAD THE DEFINITION SUBROUTINE ADDRESS AND EXTRACT THE       *
*        HIGH LEVEL AND SECOND LEVEL INDEX NAMES.                     *
*                                                                     *
***********************************************************************
*
         LOAD  EPLOC=DEFMODUL,ERRET=NODATA
         ST    R0,DEFADDR          STORE THE DEFINE MODULE ADDRESS
*
         LA    R0,DATARETD         POINT AT RETURN DATA AREA
         ST    R0,DEFPARMS+4       STORE IN PARM LIST
         OI    DEFPARMS+4,X'80'    INDICATE END OF PARM LIST
*
         LA    R0,HLICODE          POINT AT HIGH LEVEL INDEX CODE WORD
         ST    R0,DEFPARMS+0       STORE IN PARM LIST
*
         LA    R1,DEFPARMS         POINT AT PARAMETER LIST
         L     R15,DEFADDR         LOAD THE DEFINITION ROUTINE ADDRESS
         BASSM R14,R15             CALL THE DEFINITION MODULE
*
         LTR   R15,R15             CHECK IF HLI WAS SUCCESSFUL
         BNZ   NODATA              THIS IS NOT VERY GOOD
*
         MVC   HLIVALUE,DATARETD   COPY THE RETURNED LEVEL
*
         LA    R0,SECCODE          POINT AT 2ND LEVEL INDEX CODE WORD
         ST    R0,DEFPARMS+0       STORE IN PARM LIST
*
         LA    R1,DEFPARMS         POINT AT PARAMETER LIST
         L     R15,DEFADDR         LOAD THE DEFINITION ROUTINE ADDRESS
         BASSM R14,R15             CALL THE DEFINITION MODULE
*
         LTR   R15,R15             CHECK IF 2ND WAS SUCCESSFUL
         BNZ   NODATA              THIS IS NOT VERY GOOD
*
         MVC   SECVALUE,DATARETD   COPY THE RETURNED LEVEL
*
         TM    0(R8),X'80'         TEST FOR ONE WORD PARM LIST
         BO    CALLPARM            IF SO, THIS IS A CALLED PARAMETER
         TM    8(R8),X'80'         TEST FOR A THREE WORD PARAMETER LIST
         BO    PGMPARM             IF SO, THIS IS A PROGRAM PARM
*
         EJECT
***********************************************************************
*                                                                     *
*        BUILD PARSE PARAMETER LIST                                   *
*        INITIALIZE OUTPUT DATA CONTROL BLOCKS IN WORKAREA            *
*                                                                     *
***********************************************************************
*
CMDPARM  DS    0H
         OI    MODEFLAG,MODECMD    INDICATE WE HAVE A TSO CPPL
*
         USING CPPL,R8             ESTABLISH ADDRESSABILITY TO CPPL
*
         LA    R4,PPLSECT          LOAD ADDRESS OF PARSE PARAMETER
         USING PPL,R4              ESTABLISH ADDRESSABILITY TO PPL
*
         L     R1,CPPLUPT          LOAD POINTER TO USER PROFILE
         L     R2,CPPLECT          LOAD POINTER TO ENVIRONMENT
*                                  CONTROL TABLE FROM CPPL
         SLR   R3,R3               ZERO REGISTER 3
         ST    R3,ECB              STORE REGISTER AS ECB FOR PPL
         LA    R3,ECB              LOAD ADDRESS OF ECB
         STM   R1,R3,PPLSECT       STORE ADDRESS OF UPT, ECT, AND
*                                  ECB IN PPL
         MVC   PPLPCL,PCLADDR      MOVE POINTER TO PARAMETER
*                                  CONTROL LIST INTO PPL
         LA    R2,PARSBACK         LOAD ADDRESS OF FULLWORD TO
*                                  CONTAIN ADDRESS OF PDE RETURNED
*                                  BY PARS
         ST    R2,PPLANS           STORE POINTER TO RETURN ADDRESS
         MVC   PPLCBUF,CPPLCBUF    MOVE POINTER TO COMMAND BUFFER
*                                  INTO PPL
         LA    R2,PPLUWA           LOAD ADDRESS OF USER WORK AREA
         ST    R2,PPLUWA           STORE ADDRESS IN PPL
         DROP  R4,R8               DROP ADDRESSABILITY
*
***********************************************************************
*                                                                     *
*        CALLTSSR TO PARSE (ENTRY NAME IKJPARS)                       *
*        ON RETURN PARSBACK -> PDL                                    *
*                                                                     *
***********************************************************************
*
         CALLTSSR  EP=IKJPARS,MF=(E,PPLSECT)
         LTR   R15,R15             SEE IF RETURN CODE IS ZERO
         BNZ   BADPARSE            NO, BAD NEWS
*
***********************************************************************
*                                                                     *
*        SET UP ADDRESSABILITY TO PDL                                 *
*           AND PROCESS THE PARAMETERS                                *
*                                                                     *
***********************************************************************
*
         L     R9,PARSBACK         LOAD POINTER TO PARSE ANSWER
         USING IKJPARMD,R9         ESTABLISH ADDRESSABILITY TO PDL
*
         LA    R6,NAMEINPT         LOAD POINTER TO BOOKNAME PDE
         L     R5,0(R6)            LOAD POINTER TO BOOKNAME DATA
         LH    R4,4(R6)            LOAD LENGTH OF BOOKNAME DATA
         BCTR  R4,0                DECREMENT LENGTH FOR EXECUTE OF MVC
*
         EX    R4,PARSNAME         MOVE IN THE BOOK NAME
*
         LA    R6,TYPEINPT         LOAD POINTER TO BOOKTYPE PDE
         L     R5,0(R6)            LOAD POINTER TO BOOKTYPE DATA
         LH    R4,4(R6)            LOAD LENGTH OF BOOKTYPE DATA
         BCTR  R4,0                DECREMENT LENGTH FOR EXECUTE OF MVC
*
         EX    R4,PARSTYPE         MOVE IN THE BOOK TYPE
*
         LA    R6,VARIABLE         LOAD POINTER TO VARIABLE PDE
         L     R5,0(R6)            LOAD POINTER TO VARIABLE DATA
         LH    R4,4(R6)            LOAD LENGTH OF VARIABLE
         ST    R4,NAMELENG         SAVE THIS LENGTH FOR SERVICE
         BCTR  R4,0                DECREMENT LENGTH FOR EXECUTE OF MVC
*
         EX    R4,PARSVARI         MOVE IN THE VARIABLE NAME
*
         DROP  R9                  DROP ADDRESSABILITY TO PDL
*
         B     GETUSMLV            AND GO DECODE THE REQUEST
*
PARSNAME MVC   BOOKNAME(*-*),0(R5) *** EXECUTE ONLY ***
PARSTYPE MVC   BOOKTYPE(*-*),0(R5) *** EXECUTE ONLY ***
PARSVARI MVC   VARINAME(*-*),0(R5) *** EXECUTE ONLY ***
*
         EJECT
***********************************************************************
*                                                                     *
*        PROGRAM HAS BEEN INVOKED WITH A ONE WORD PARAMETER LIST      *
*        IN THE FORMAT OF THE CALL/JCL PARAMETER.  SCAN FOR THE       *
*        PUBLICATION NUMBER AND RETURN VARIABLE NAME.                 *
*                                                                     *
***********************************************************************
*
CALLPARM DS    0H
         OI    MODEFLAG,MODECALL   INDICATE WE HAVE A CALL PROGRAM PARM
*
         L     R2,0(,R8)           LOAD THE ADDRESS OF THE PARM STRING
         LH    R3,0(,R2)           LOAD THE STRING LENGTH
         LA    R2,2(,R2)           POINT AT ACTUAL FIRST CHARACTER
*
         CH    R3,=H'5'            CHECK MINIMUM LENGTH
         BL    BADPARM             RETURN BAD NEWS IF TOO SMALL
*
         LR    R1,R2               SET SCAN POINTER
*
CALLLP1  DS    0H
         CLI   0(R1),C','          LOOK FOR DELIMITER
         BE    CALLCOM1            BRANCH WHEN FOUND
         LA    R1,1(,R1)           INCREMENT SCAN POINTER
         BCT   R3,CALLLP1          LOOP LOOKING FOR COMMA
         B     BADPARM             IF NOT COMMA, BAD NEWS
*
CALLCOM1 DS    0H
         LR    R15,R1              COPY FOR LENGTH CALCULATION
         SR    R15,R2              CALCULATE LENGTH
         BNH   BADPARM             ERROR IF NOT POSITIVE
         CH    R15,=Y(L'BOOKNAME)  CHECK MAXIMUM LENGTH
         BH    BADPARM             ERROR IF TOO BIG
*
         BCTR  R15,0               DECREMENT FOR MVC INSTRUCTION
         EX    R15,CALLNAME        MOVE THE BOOK NAME
*
         LA    R1,1(,R1)           INCREMENT PAST THE COMMA
         BCT   R3,*+8              DECREMENT THE COMMA
         B     BADPARM             ERROR IF COMMA THE LAST THING
*
         CH    R3,=H'3'            CHECK REMAINING MINIMUM LENGTH
         BL    BADPARM             RETURN BAD NEWS IF TOO SMALL
*
         LR    R2,R1               SAVE SCAN POINTER
*
CALLLP2  DS    0H
         CLI   0(R1),C','          LOOK FOR DELIMITER
         BE    CALLCOM2            BRANCH WHEN FOUND
         LA    R1,1(,R1)           INCREMENT SCAN POINTER
         BCT   R3,CALLLP2          LOOP LOOKING FOR COMMA
         B     BADPARM             IF NO COMMA, BAD NEWS
*
CALLCOM2 DS    0H
         LR    R15,R1              COPY FOR LENGTH CALCULATION
         SR    R15,R2              CALCULATE LENGTH
         BNH   BADPARM             ERROR IF NOT POSITIVE
         CH    R15,=Y(L'BOOKTYPE)  CHECK MAXIMUM LENGTH
         BH    BADPARM             ERROR IF TOO BIG
*
         BCTR  R15,0               DECREMENT FOR MVC INSTRUCTION
         EX    R15,CALLTYPE        MOVE THE BOOK TYPE
*
         LA    R1,1(,R1)           INCREMENT PAST THE COMMA
         BCT   R3,*+8              DECREMENT THE COMMA
         B     BADPARM             ERROR IF COMMA THE LAST THING
*
         CH    R3,=Y(L'VARINAME)   CHECK REMAINING LENGTH
         BH    BADPARM             ERROR IF TOO BIG
         ST    R3,NAMELENG         SAVE THIS LENGTH FOR SERVICE
*
         BCTR  R3,0                DECREMENT THE LENGTH FOR MVC
         EX    R3,CALLVARI         MOVE THE VARIABLE NAME
*
         EX    R3,CALLTRT          SCAN FOR VALID CHARACTERS
         BNZ   BADPARM             ERROR ID ANY BAD ONES
*
         CLI   VARINAME,C'0'       MAKE SURE THAT FIRST CHARACTER IS
         BNL   BADPARM             NOT NUMERIC
*
         B     GETUSMLV            AND GO DECODE THE REQUEST
*
CALLNAME MVC   BOOKNAME(*-*),0(R2) *** EXECUTE ONLY ***
CALLTYPE MVC   BOOKTYPE(*-*),0(R2) *** EXECUTE ONLY ***
CALLVARI MVC   VARINAME(*-*),0(R1) *** EXECUTE ONLY ***
CALLTRT  TRT   VARINAME(*-*),ALPHANUM   *** EXECUTE ONLY ***
*
         EJECT
***********************************************************************
*                                                                     *
*        PROGRAM HAS BEEN INVOKED WITH A THREE WORD PARAMETER LIST    *
*        EXTRACT BOOK NAME AND TYPE AND SAVE THE RETURN DATA          *
*        ADDRESS.                                                     *
*                                                                     *
***********************************************************************
*
PGMPARM  DS    0H
         OI    MODEFLAG,MODEPGM    INDICATE WE HAVE AN INTERNAL PROGRAM
*
         L     R1,0(,R8)           LOAD THE ADDRESS OF THE BOOKNAME
         MVC   BOOKNAME,0(R1)      COPY THE BOOKNAME
*
         L     R1,4(,R8)           LOAD THE ADDRESS OF THE BOOKTYPE
         MVC   BOOKTYPE,0(R1)      COPY THE BOOKTYPE
*
         L     R1,8(,R8)           LOAD THE RETURN DATA ADDRESS
         ST    R1,DATARETA         STORE THE RETURN DATA ADDRESS
*
         B     GETUSMLV            AND GO DECODE THE REQUEST
*
         EJECT
***********************************************************************
*                                                                     *
*        DETERMINE IF THE BOOK IS PART OF THE UNIVERSAL SALES         *
*        MANUAL SET.                                                  *
*                                                                     *
***********************************************************************
*
GETUSMLV DS    0H
         CLC   BOOKTYPE,=CL8'BOOK' CHECK IF THIS IS A BOOK TYPE DSN
         BE    GETUSMBK            BRANCH IF SO
         CLC   BOOKTYPE,=CL8'BKSHELF'   CHECK FOR BOOKSHELF
         BE    GETUSMIS            BRANCH IF SO
         CLC   BOOKTYPE,=CL8'BKINDEX'   CHECK FOR BOOKSHELF INDEX
         BE    GETUSMIS            BRANCH IF SO
*
         B     NOTUSMBK            IT'S NONE OF THESE
*
***********************************************************************
*                                                                     *
*        CHECK BOOKSHELF AND BOOKSHELF INDEX NAMES.  THESE MUST       *
*        BE EXACT.                                                    *
*                                                                     *
***********************************************************************
*
GETUSMIS DS    0H
         CLC   BOOKNAME,=CL8'HARDWARE'  CHECK FOR USM HARDWARE SHELF
         BE    SETUSMHW            IF SO, GO SET IT
         CLC   BOOKNAME,=CL8'WDNHARDW'  CHECK FOR USM WITHDRAWN HDW
         BE    SETUSMHW            IF SO, GO SET IT
         CLC   BOOKNAME,=CL8'SOFTWARE'  CHECK FOR USM SOFTWARE SHELF
         BE    SETUSMSW            IF SO, GO SET IT
         CLC   BOOKNAME,=CL8'WDNSOFTW'  CHECK FOR USM WITHDRAWN SFTW
         BE    SETUSMSW            IF SO, GO SET IT
         CLC   BOOKNAME,=CL8'PRICES'    CHECK FOR USM PRICES SHELF
         BE    SETUSMPR            IF SO, GO SET IT
*
         B     NOTUSMBK            NONE OF THE ABOVE
*
***********************************************************************
*                                                                     *
*        CHECK BOOK NAMES.  THESE CONSIST OF KNOWN PREFIXES AND       *
*        SUFFIXES OF KNOWN PATTERNS.                                  *
*                                                                     *
***********************************************************************
*
GETUSMBK DS    0H
         CLC   BOOKNAME(5),=C'PRICE'    CHECK FOR THE USM PRICES MANUAL
         BE    SETUSMPR            IF SO, GO SET IT
*
         CLC   BOOKNAME(2),=C'HW'  CHECK FOR THE USM HARDWARE MANUALS
         BE    GETUSMHW            BRANCH IF SO
         CLC   BOOKNAME(2),=C'SW'  CHECK FOR THE USM SOFTWARE MANUALS
         BE    GETUSMSW            BRANCH IF SO
         CLC   BOOKNAME(5),=C'WDNHW'    CHECK FOR USM WITHDRAWN HDW
         BE    GETUSMWH            BRANCH IF SO
         CLC   BOOKNAME(5),=C'WDNSW'    CHECK FOR USM WITHDRAWN SFTW
         BE    GETUSMWS            BRANCH IF SO
*
         CLI   BOOKNAME,C'M'       CHECK FOR NEW HARDWARE MANUALS
         BE    GETUSMHM            BRANCH IF SO
         CLI   BOOKNAME,C'P'       CHECK FOR NEW SOFTWARE MANUALS
         BE    GETUSMSP            BRANCH IF SO
         CLI   BOOKNAME,C'S'       CHECK FOR NEW SOFTWARE MANUALS
         BE    GETUSMSS            BRANCH IF SO
*
         B     NOTUSMBK            NOT A USM BOOK
*
         EJECT
***********************************************************************
*                                                                     *
*        ORIGINAL USM HARDWARE BOOKS.                                 *
*                                                                     *
*        HW###, WHERE ### MUST BE NUMERIC, EXACTLY 5 CHARACTERS LONG  *
*                                                                     *
***********************************************************************
*
GETUSMHW DS    0H
         TM    BOOKNAME+2,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         TM    BOOKNAME+3,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         TM    BOOKNAME+4,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         CLI   BOOKNAME+5,C' '     AND CHECK FOR EXACTLY 5 LONG
         BNE   NOTUSMBK            IF NOT, IT'S NOT A USMER
         B     SETUSMHW            SO SET USM
*
***********************************************************************
*                                                                     *
*        NEW (BUT HARDLY IMPROVED) USM HARDWARE MANUALS.              *
*                                                                     *
*        M##%%***, WHERE ## MUST BE NUMERIC AND *** OPTIONAL          *
*                                                                     *
***********************************************************************
*
GETUSMHM DS    0H
         TM    BOOKNAME+1,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         TM    BOOKNAME+2,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         B     SETUSMHW            SO SET USM
*
***********************************************************************
*                                                                     *
*        WITHDRAWN USM HARDWARE BOOKS.                                *
*                                                                     *
*        WDNHW###, WHERE ### MUST BE NUMERIC                          *
*                                                                     *
***********************************************************************
*
GETUSMWH DS    0H
         TM    BOOKNAME+5,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         TM    BOOKNAME+6,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         TM    BOOKNAME+7,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         B     SETUSMHW            SO SET USM
*
         EJECT
***********************************************************************
*                                                                     *
*        ORIGINAL USM SOFTWARE BOOKS.                                 *
*                                                                     *
*        SW###, WHERE ### MUST BE NUMERIC, EXACTLY 5 CHARACTERS LONG  *
*                                                                     *
***********************************************************************
*
GETUSMSW DS    0H
         TM    BOOKNAME+2,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         TM    BOOKNAME+3,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         TM    BOOKNAME+4,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         CLI   BOOKNAME+5,C' '     AND CHECK FOR EXACTLY 5 LONG
         BNE   NOTUSMBK            IF NOT, IT'S NOT A USMER
         B     SETUSMSW            SO SET USM
*
***********************************************************************
*                                                                     *
*        NEW (BUT HARDLY IMPROVED) USM SOFTWARE MANUALS.              *
*                                                                     *
*        P##%%***, WHERE ## MUST BE NUMERIC AND *** OPTIONAL          *
*        OR                                                           *
*        S##%%***, WHERE ## MUST BE NUMERIC AND *** OPTIONAL          *
*                                                                     *
***********************************************************************
*
GETUSMSP DS    0H
GETUSMSS DS    0H
         TM    BOOKNAME+1,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         TM    BOOKNAME+2,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         B     SETUSMSW            SO SET USM
*
***********************************************************************
*                                                                     *
*        WITHDRAWN USM SOFTWARE BOOKS.                                *
*                                                                     *
*        WDNSW###, WHERE ### MUST BE NUMERIC                          *
*                                                                     *
***********************************************************************
*
GETUSMWS DS    0H
         TM    BOOKNAME+5,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         TM    BOOKNAME+6,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         TM    BOOKNAME+7,X'F0'    TEST FOR A NUMERIC
         BNO   NOTUSMBK            IF NOT, IT'S BAD
         B     SETUSMSW            SO SET USM
*
         EJECT
***********************************************************************
*                                                                     *
*        THE BOOK/BOOKSHELF/INDEX HAS BEEN IDENTIFIED AS A            *
*        USM DATA SET.                                                *
*                                                                     *
***********************************************************************
*
SETUSMHW DS    0H
         MVC   USMPREFX,USMPFXHW   SET THE USM HARDWARE PREFIX NAME
         B     SETUSMBK            AND DO THE USM THING
*
SETUSMSW DS    0H
         MVC   USMPREFX,USMPFXSW   SET THE USM SOFTWARE PREFIX NAME
         B     SETUSMBK            AND DO THE USM THING
*
SETUSMPR DS    0H
         MVC   USMPREFX,USMPFXPR   SET THE USM PRICES PREFIX NAME
         B     SETUSMBK            AND DO THE USM THING
*
SETUSMBK DS    0H
         OI    MODEFLAG,MODEUSM    INDICATE THAT THIS IS A USM BOOK
*
         LA    R0,USMCODE          POINT AT USMLEVEL CODE WORD
         ST    R0,DEFPARMS+0       STORE IN PARM LIST
*
         LA    R1,DEFPARMS         POINT AT PARAMETER LIST
         L     R15,DEFADDR         LOAD THE DEFINITION ROUTINE ADDRESS
         BASSM R14,R15             CALL THE DEFINITION MODULE
*
         LTR   R15,R15             CHECK IF USMLEVEL WAS SUCCESSFUL
         BNZ   NODATA              THIS IS NOT VERY GOOD
*
         MVC   USMVALUE,DATARETD   COPY THE RETURNED LEVEL
*
NOTUSMBK DS    0H
*
         EJECT
***********************************************************************
*                                                                     *
*        SCAN THE BOOK/INDEX/SHELF NAME FOR INVALID CHARACTERS        *
*        AND REPLACE THEM WITH @.                                     *
*                                                                     *
***********************************************************************
*
         TR    BOOKNAME,REPLCECH    REPLACE BAD CHARACTERS
*
***********************************************************************
*                                                                     *
*        CONSTRUCT THE DATA SET NAME FROM THE OBTAINED AND            *
*        PASSED INFORMATION.                                          *
*                                                                     *
***********************************************************************
*
         MVC   DATASETO(L'HLIVALUE),HLIVALUE COPY THE HIGH LEVEL INDEX
*
         TRT   DATASETO(L'DATASETO+1),BLANKTRT SCAN FOR BLANK
         CLI   0(R1),C' '           IS THIS REALLY A BLANK
         BNE   BADDSN               THIS ISN'T VERY GOOD!
*
         MVI   0(R1),C'.'           SET THE DELIMITER
*
         MVC   1(L'SECVALUE,R1),SECVALUE COPY THE SECOND LEVEL INDEX
*
         TRT   DATASETO(L'DATASETO+1),BLANKTRT SCAN FOR BLANK
         CLI   0(R1),C' '           IS THIS REALLY A BLANK
         BNE   BADDSN               THIS ISN'T VERY GOOD!
*
         MVI   0(R1),C'.'           SET THE DELIMITER
*
         TM    MODEFLAG,MODEUSM     CHECK FOR THIS BEING A USM DATA SET
         BZ    NOUSMBK              BRANCH IF NOT
*
         MVC   1(L'USMPREFX,R1),USMPREFX COPY THE USM PREFIX VALUE
         MVC   1+L'USMPREFX(2,R1),USMVALUE COPY THE USM LEVEL
*
         TRT   DATASETO(L'DATASETO+1),BLANKTRT SCAN FOR BLANK
         CLI   0(R1),C' '           IS THIS REALLY A BLANK
         BNE   BADDSN               THIS ISN'T VERY GOOD!
*
         MVI   0(R1),C'.'           SET THE DELIMITER
*
NOUSMBK  DS    0H
         MVC   1(L'BOOKNAME,R1),BOOKNAME COPY THE BOOK NAME FIELD
*
         TRT   DATASETO(L'DATASETO+1),BLANKTRT SCAN FOR BLANK
         CLI   0(R1),C' '           IS THIS REALLY A BLANK
         BNE   BADDSN               THIS ISN'T VERY GOOD!
*
         MVI   0(R1),C'.'           SET THE DELIMITER
*
         MVC   1(L'BOOKTYPE,R1),BOOKTYPE COPY THE BOOK TYPE FIELD
*
         EJECT
***********************************************************************
*                                                                     *
*        CONSTRUCT THE PARAMETER LIST FOR IKJCT441                    *
*                                                                     *
***********************************************************************
*
CRE8VARI DS    0H
         TM    MODEFLAG,MODEPGM    IS THIS A PROGRAM TO RETURN DATA TO
         BZ    GODOVARI            IF NOT, GO CREATE THE VARIABLE
*
         L     R15,DATARETA        LOAD THE RETURN DATA ADDRESS
         MVC   0(L'DATASETO,R15),DATASETO COPY THE RETURN DATA
         B     ALLDONE
*
GODOVARI DS    0H
         L     R3,CVTPTR           FIND CVT
         USING CVTMAP,R3
*
         L     R3,CVTTVT           FIND THE TSVT
         USING TSVT,R3
*
         LA    R0,TSVEUPDT
         ST    R0,ENTRYCDE
         LA    R0,ENTRYCDE
         ST    R0,CT441PRM+0
*
         LA    R0,VARINAME
         ST    R0,NAMEADDR
         LA    R0,NAMEADDR
         ST    R0,CT441PRM+4
*
         LA    R0,NAMELENG
         ST    R0,CT441PRM+8
*
         LA    R0,DATAADDR
         ST    R0,CT441PRM+12
*
         LA    R0,DATALENG
         ST    R0,CT441PRM+16
*
         LA    R0,TOKENPRM
         ST    R0,CT441PRM+20
         OI    CT441PRM+20,X'80'
*
         LA    R1,DATASETO
         ST    R1,DATAADDR
*
         LA    R0,L'DATASETO       LOAD LENGTH OF DATA
         AR    R1,R0               POINT PAST END OF STRING
*
CALCLOOP BCTR  R1,0                BACK UP TO THE PREVIOUS CHARACTER
         CLI   0(R1),C' '
         BH    CALCSTOR
         BCT   R0,CALCLOOP
*
         LA    R0,1
*
CALCSTOR DS    0H
         ST    R0,DATALENG         STORE DATA LENGTH
*
         LA    R1,CT441PRM         POINT AT PARM LIST
         L     R15,TSVTVACC        LOAD THE VARIABLE ACCESS RTN
         BALR  R14,R15             GO CALL VARIABLE ROUTINE
*
         LTR   R15,R15             TEST IF RETURN WAS GOOD
         BNZ   NOTCLIST            ASSUME WE AREN'T IN CLIST IF BAD
*
ALLDONE  DS    0H
         B     RETURN
*
         DROP  R3                  DONE WITH TSVT
*
         EJECT
***********************************************************************
*                                                                     *
*        ERROR CONDITIONS                                             *
*                                                                     *
***********************************************************************
*
NOTCLIST LA    R0,8                SET WE AREN'T IN A CLIST ENV
         ST    R0,RETCODE
         B     RETURN
*
BADPARM  DS    0H
BADDSN   DS    0H
BADPARSE LA    R0,12               SET SERIOUS ERROR
         ST    R0,RETCODE
         B     RETURN
*
NODATA   LA    R0,16               SET NO DATA MODULE FOUND
         ST    R0,RETCODE
         B     RETURN
*
***********************************************************************
*                                                                     *
*        CLEANUP AREAS GETMAINED BY PARSE,                            *
*           SET RETURN CODE, RESTORE REGISTERS AND                    *
*           RETURN TO CALLER                                          *
*                                                                     *
***********************************************************************
*
RETURN   DS    0H
         TM    MODEFLAG,MODECMD    IS THIS A TSO COMMAND
         BZ    NOPARSEF            BRANCH IF NOT
         IKJRLSA PARSBACK          RELEASE AREAS GETMAINED BY PARSE
*
NOPARSEF DS    0H
         DELETE EPLOC=DEFMODUL     DELETE THE DEFINITION MODULE
*
         L     R2,RETCODE          LOAD THE RETURN CODE
*
         LR    R1,R13              LOAD ADDRESS OF GETMAINED AREA
         L     R13,4(,R13)         RELOAD ADDRESS OF PREVIOUS SAVE
*
         LA    R0,WORKLENG         LOAD LENGTH OF GETMAINED AREA
         FREEMAIN RU,LV=(0),A=(1)  FREE GETMAINED AREA
*
         LR    R15,R2              SET THE RETURN CODE
         L     R14,12(,R13)        LOAD REGISTER 14 WITH RETURN
         LM    R0,R12,20(R13)      RESTORE REGISTERS
         BSM   0,R14               RETURN
*
         EJECT
PATCH    DC    0D'0',32S(*)
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
DEFMODUL DC    CL8'CCCBKDEF'       DATA INFORMATION PROGRAM
*
USMCODE  DC    CL16'USMLEVEL'      USM LEVEL CODE WORD
HLICODE  DC    CL16'HLI'           HIGH LEVEL INDEX CODE WORD
SECCODE  DC    CL16'CD2ND'         2ND LEVEL INDEX CODE WORD
*
*        NOTE:  THE USMPFX.. FIELDS AND USMPREFX MUST ALL BE
*        THE SAME LENGTH AND NOT EXCEED SIX CHARACTERS.
*
USMPFXHW DC    C'USMHW'            USM HARDWARE PREFIX
USMPFXSW DC    C'USMSW'            USM SOFTWARE PREFIX
USMPFXPR DC    C'USMPR'            USM PRICES PREFIX
*
LITERALS LTORG ,
*
PCLADDR  DC    V(PARMTAB)
*
ALPHANUM DC    256X'FF'            ALPHANUMERIC TEST TABLE
         ORG   ALPHANUM+C'$'
         DC    X'00'
         ORG   ALPHANUM+C'#'
         DC    X'00'
         ORG   ALPHANUM+C'@'
         DC    X'00'
         ORG   ALPHANUM+C'A'
         DC    9X'00'
         ORG   ALPHANUM+C'J'
         DC    9X'00'
         ORG   ALPHANUM+C'S'
         DC    8X'00'
         ORG   ALPHANUM+C'0'
         DC    10X'00'
         ORG   ,
*
BLANKTRT DC    256X'00'            LOCATE BLANK TRT TABLE
         ORG   BLANKTRT+C' '
         DC    X'FF'               FLAG THE BLANK
         ORG   BLANKTRT+X'FF'
         DC    X'FF'               FLAG THE ENDING DELIMITER
         ORG   ,
*
REPLCECH DC    256C'@'             ALL BAD CHARACTERS
         ORG   REPLCECH+C' '       BLANK IS GOOD
         DC    C' '
         ORG   REPLCECH+C'$'       $ IS GOOD
         DC    C'$'
         ORG   REPLCECH+C'#'       # IS GOOD
         DC    C'#'
         ORG   REPLCECH+C'@'       @ IS GOOD
         DC    C'@'
         ORG   REPLCECH+C'A'       ALPHABET IS GOOD
         DC    C'ABCDEFGHI'
         ORG   REPLCECH+C'J'       ALPHABET IS GOOD
         DC    C'JKLMNOPQR'
         ORG   REPLCECH+C'S'       ALPHABET IS GOOD
         DC    C'STUVWXYZ'
         ORG   REPLCECH+C'0'       NUMBERS ARE GOOD
         DC    C'0123456789'
*
         EJECT
************************ PARS PARAMETER LIST **************************
PARMTAB  IKJPARM  DSECT=IKJPARMD
PARMTAB  AMODE 31
PARMTAB  RMODE ANY
*
NAMEINPT IKJIDENT 'BOOKNAME',UPPERCASE,                                X
               FIRST=ALPHA,OTHER=ANY,MAXLNTH=8,                        X
               PROMPT='BOOK NAME',                                     X
               HELP='BOOKMANAGER DATA SET NAME'
*
TYPEINPT IKJIDENT 'BOOKTYPE',UPPERCASE,                                X
               FIRST=ALPHA,OTHER=ANY,MAXLNTH=8,                        X
               PROMPT='BOOK TYPE',                                     X
               HELP='BOOKMANAGER DATA SET TYPE'
*
VARIABLE IKJIDENT 'VARIABLE',UPPERCASE,                                X
               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=32,                  X
               PROMPT='VARIABLE NAME',                                 X
               HELP='REXX/CLIST VARIABLE NAME'
         IKJENDP
*
         EJECT
************************ DSECTS (MAPPING MACROS) **********************
         PRINT NOGEN
         IKJCPPL
CPPLLEN  EQU   *-CPPL
*
         IKJPPL
PPLLEN   EQU   *-PPL
*
         CVT   DSECT=YES
*
         IKJTSVT
*
*
         PRINT GEN
*
WORKAREA DSECT
SAVEAREA DS    9D
RETCODE  DS    F
*
         DS    0D
PPLSECT  DS    0F
         ORG   PPLSECT+PPLLEN
*
ECB      DS    F
PARSBACK DS    F
*
CT441PRM DS    6F
*
ENTRYCDE DS    F
NAMEADDR DS    A                   ADDRESS OF VARIABLE NAME
NAMELENG DS    F                   LENGTH OF VARIABLE NAME
DATAADDR DS    A                   ADDRESS OF VARIABLE DATA
DATALENG DS    F                   LENGTH OF DATA
TOKENPRM DS    F
*
VARINAME DS    CL32                VARIABLE NAME FIELD
*
BOOKNAME DS    CL8                 INPUT PUBLICATION NUMBER
BOOKTYPE DS    CL8                 INPUT PUBLICATION NUMBER
DATASETO DS    CL44                RETURNED DATA FIELD
DATASETX DS    C                   INDICATION WE HAVE GONE TOO FAR
*
HLIVALUE DS    CL8                 HIGH LEVEL INDEX VALUE
SECVALUE DS    CL8                 SECOND LEVEL INDEX VALUE
USMVALUE DS    CL8                 VALUE FOR THE USM FIELD
*
USMPREFX DS    CL5                 USM PREFIX SET
*
DEFADDR  DS    A                   DATA INFORMATION PROGRAM ADDRESS
*
DATARETA DS    A                   ADDRESS OF THE RETURN DATA
*
DEFPARMS DS    2A                  PARM LIST FOR DEFINITION MODULE
*
DATARETD DS    CL64                RETURNED DATA FROM DEFINITION SUB
*
MODEFLAG DS    X                   PROGRAM MODE
MODECMD  EQU   X'80'               INVOKED AS A TSO COMMAND
MODECALL EQU   X'40'               INVOKED AS A CALLED PROGRAM
MODEPGM  EQU   X'20'               INVOKED AS AN INTERNAL CALL
MODEUSM  EQU   X'01'               PUBLICATION IS PART OF THE USM
*
         DS    0D
WORKLENG EQU   *-WORKAREA
*
         END   CCCBKDSN
