BKCPS    TITLE 'BOOKMANAGER CELL POOL SERVICES'
***********************************************************************
*                                                                     *
*        CCCBKCPS                                                     *
*                                                                     *
*        THIS PROGRAM WILL ESTABLISH, MAINTAIN, AND FREE LARGE        *
*        BLOCKS OF STORAGE WHICH CAN BE OBTAINED IN SMALLER PIECES.   *
*                                                                     *
*        INPUT  - REGISTER 1 - ADDRESS OF CELL POOL BLOCK ID          *
*                 REGISTER 0 - LENGTH OF CELL TO OBTAIN - IF ZERO,    *
*                 ALL STORAGE IS FREED.                               *
*                                                                     *
*        OUTPUT - ADDRESS OF RETURNED STORAGE IN REGISTER 15.         *
*                                                                     *
*        ATTRIBUTES - REENTRANT, REFRESHABLE, AMODE 31, RMODE ANY,    *
*                     UNAUTHORIZED                                    *
*                                                                     *
***********************************************************************
         EJECT
*
CCCBKCPS CSECT
CCCBKCPS AMODE 31
CCCBKCPS RMODE ANY
*
         USING CCCBKCPS,R15
         B     AROUNDID
         DROP  R15
*
         DC    CL8'CCCBKCPS'
         DC    CL8'V 1.1.1'
         DC    CL8'&SYSDATC'
         DC    CL8' &SYSTIME'
*
AROUNDID DS    0H
         STM   R14,R12,12(R13)     SAVE THE REGISTERS
*
         LR    R12,R15             LOAD REGISTER 12 WITH ENTRY
         USING CCCBKCPS,R12        ESTABLISH ADDRESSABILITY
*
         LR    R8,R1               LOAD REGISTER 8 WITH USER HEADER
         USING BKCDSECT,R8
*
         LR    R7,R0               SAVE THE USER REQUEST LENGTH
*
         ICM   R9,15,BKCSTART      LOAD THE FIRST BLOCK ADDRESS
         BNZ   HAVE1ST             BRANCH IF WE HAVE IT
*
         BAL   R14,INITBLK         INITIALIZE BLOCK HEADER
         ST    R1,BKCSTART         INITIALIZE USER HEADER
         LR    R9,R1               COPY ADDRESS
*
         USING BKDDSECT,R9
HAVE1ST  DS    0H
         LTR   R7,R7               IS THIS A FREE REQUEST
         BZ    DOFREEIT            BRANCH IF SO
*
         LA    R0,BKDLNGTH(,R7)    GET FULL SIZE
         C     R0,BKCSIZE          CHECK IF TOO BIG
         BNH   FREELOOP            BRANCH IF OK
         DC    H'0'                DO THE DIRTY
*
FREELOOP DS    0H
         C     R7,BKDFREE          CHECK FREE SPACE
         BNH   HAVEFREE            BRANCH IF IT WILL FIT
*
         ICM   R1,15,BKDNEXT       GET NEXT BLOCK
         BZ    NEEDNEW             BRANCH IF NONE
*
         LR    R9,R1               GET THE NEXT BLOCK
         B     FREELOOP            AND CHECK THE NEXT ONE
*
NEEDNEW  DS    0H
         BAL   R14,INITBLK         GET ANOTHER BLOCK
*
         ST    R1,BKDNEXT          CHAIN IT ON
         LR    R9,R1               AND MAKE THIS THE CURRENT BLOCK
*
HAVEFREE DS    0H
         L     R2,BKDADDR          GET ADDRESS OF AREA TO BE RETURNED
         LA    R0,0(R7,R2)         GET ADDRESS OF NEW FREE OFFSET
         ST    R0,BKDADDR          STORE UPDATED ADDRESS
*
         L     R0,BKDFREE          LOAD FREE AREA AVAILABLE
         SR    R0,R7               SUBTRACT AREA WANTED
         ST    R0,BKDFREE          STORE REMAINING FREE AREA
         B     RETURN              AND LEAVE
*
DOFREEIT DS    0H
         LR    R1,R9               COPY AREA TO BE FREED
         L     R0,BKCSIZE          LOAD THE SIZE OF THE BLOCK
         IC    R15,BKCSPID         LOAD THE SUBPOOL ID
         N     R15,=X'0000007F'    CLEAR LOC FLAG
         L     R9,BKDNEXT          LOAD THE NEXT BLOCK ADDRESS
*
         FREEMAIN RU,LV=(0),SP=(15),A=(1) FREE THE STORAGE
*
         LTR   R9,R9               DO WE HAVE ANOTHER
         BNZ   DOFREEIT            LOOP IF WE DO
*
         SLR   R2,R2               SET THE RETURN ADDRESS
         ST    R2,BKCSTART         RESET STARTING ADDRESS
         B     RETURN              AND RETURN
*
         DROP  R9
*
RETURN   DS    0H
         LR    R15,R2              SET THE RETURN AREA ADDRESS
         L     R14,12(,R13)        LOAD REGISTER 14 WITH RETURN
         LM    R0,R12,20(R13)      RESTORE REGISTERS
         BSM   0,R14               RETURN
*
INITBLK  DS    0H
         L     R0,BKCSIZE          LOAD THE BLOCK SIZE
         IC    R15,BKCSPID         INSERT THE CELL POOL SIZE
         N     R15,=X'0000007F'    CLEAR LOC FLAG
*
         TM    BKCSPID,BKCABOVE    CHECK FOR LOC=ANY
         BO    GETLOCAN
*
         GETMAIN RU,SP=(15),LV=(0),LOC=(BELOW,ANY)
         B     GETSETUP
*
GETLOCAN DS    0H
         GETMAIN RU,SP=(15),LV=(0),LOC=ANY
*
         USING BKDDSECT,R1
GETSETUP DS    0H
         MVC   BKDBLKID,=A(BKDIDEQU)    SET THE EYECATCHER
         XC    BKDNEXT,BKDNEXT     MAKE SURE NEXT POINTER IS ZERO
         LA    R15,BKDDATA         POINT AT START OF DATA AREA
         ST    R15,BKDADDR         INITIALIZE START OF FREE AREA
*
         L     R15,BKCSIZE         GET SIZE OF AREA
         SH    R15,=Y(BKDLNGTH)    SUBTRACT HEADER
         ST    R15,BKDFREE         STORE FREE SPACE SIZE
*
         BR    R14
*
         DROP  R1
*
         EJECT
LITERALS LTORG ,
*
PATCH    DC    0D'0',32S(*)
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
         BKMGRCPS TYPE=DSECT
*
         END   CCCBKCPS
