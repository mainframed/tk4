BKDEF    TITLE 'TSO COMMAND TO RETURN BOOKMANAGER DEFINITION DATA'
***********************************************************************
*                                                                     *
*        CCCBKDEF                                                     *
*                                                                     *
*        THIS PROGRAM IS A TSO COMMAND OR PROGRAM THAT IS DESIGNED    *
*        TO RUN IN A CLIST OR REXX EXEC ONLY.  IT WILL RETURN A       *
*        BOOKMANAGER DEFINITION VALUE IN A SPECIFIED CLIST/REXX       *
*        VARIABLE NAME.                                               *
*                                                                     *
*        INPUT(1) TSO COMMAND PARAMETER LIST WITH TWO POSITIONAL      *
*                 PARAMETERS - THE DEFINITION NAME AND THE            *
*                 CLIST/REXX VARIABLE NAME.                           *
*                                                                     *
*        INPUT(2) CALLED PROGRAM PARAMETER LIST CONSISTING OF THE     *
*                 DEFINITION KEY AND THE CLIST/REXX VARIABLE NAME     *
*                 SEPARATED BY A COMMA.                               *
*                                                                     *
*        INPUT(3) TWO WORD PARAMETER LIST WITH THE FIRST WORD         *
*                 BEING THE ADDRESS OF THE 16 CHARACTER DEFINITION    *
*                 KEY (PADDED WITH BLANKS) AND THE SECOND WORD        *
*                 BEING THE ADDRESS OF THE 64 BYTE RETURN AREA.       *
*                                                                     *
*        NOTE -   IN ORDER FOR THE PROGRAM TO DETECT THE VARIOUS      *
*                 TYPES OF PARAMETER LIST, IT IS REQUIRED THAT THE    *
*                 LAST PARAMETER BE FLAGGED WITH THE HIGH ORDER       *
*                 BIT ON.                                             *
*                                                                     *
*        OUTPUT - SPECIFIED VALIABLE NAME SET TO THE APPROPRIATE      *
*                 BOOKMANAGER VALUE OR RETURN CODE 4 IF THE           *
*                 FIRST PARAMETER DOES NOT DEFINE A VALID             *
*                 BOOKMANAGER DEFINITION VALUE.                       *
*                                                                     *
*                 FOR THE CASE WHERE CLIST/REXX VARIABLES ARE BEING   *
*                 RETURNED, PASSING A DEFINITION NAME OF "ALL" WILL   *
*                 CAUSE EVERY DEFINITION TO BE RETURNED AS            *
*                 CLIST/REXX VARIABLES, USING THE DEFINITION NAME     *
*                 AS THE CLIST/REXX VARIABLE NAME.                    *
*                                                                     *
*                 RETURN CODE 0 - VALID DEFINITION - VARIABLE SET     *
*                 RETURN CODE 4 - INVALID DEFINITION VALUE            *
*                 RETURN CODE 8 - NOT WITHIN A CLIST                  *
*                 RETURN CODE 12 - SERIOUS ERROR IN PROGRAM           *
*                 RETURN CODE 16 - UNABLE TO LOCATE DATA MODULE       *
*                                                                     *
*        THIS PROGRAM LOADS A DATA MODULE, CCCBKDAT, TO OBTAIN        *
*        THE VALID DEFINITION KEYS AND THE CORRESPONDING DATA         *
*        VALUES.                                                      *
*                                                                     *
*        ATTRIBUTES - REENTRANT, REFRESHABLE, AMODE 31, RMODE ANY,    *
*                     UNAUTHORIZED                                    *
*                                                                     *
***********************************************************************
         EJECT
*
CCCBKDEF CSECT
CCCBKDEF AMODE 31
CCCBKDEF RMODE ANY
*
         USING CCCBKDEF,R15
         B     AROUNDID
         DC    CL8'CCCBKDEF'
         DC    CL8'V 1.2.1'
         DC    CL8'&SYSDATE'
         DC    CL8' &SYSTIME'
AROUNDID DS    0H
         STM   R14,R12,12(R13)     SAVE THE REGISTERS
*
         LR    R12,R15             LOAD REGISTER 12 WITH ENTRY
         DROP  R15
         USING CCCBKDEF,R12        ESTABLISH ADDRESSABILITY
*
         LR    R8,R1               LOAD REGISTER 8 TO PRESERVE PARMADDR
*
         LA    R0,WORKLENG         LOAD LENGTH OF GETMAINED AREA
         GETMAIN RU,LV=(0),LOC=(BELOW,ANY)
         LR    R14,R1              COPY FOR THE MOVE LONG
         LA    R15,WORKLENG        GET THE LENGTH
         SLR   R3,R3
         MVCL  R14,R2              CLEAR THE AREA
*
         ST    R13,4(,R1)          STORE ADDRESS OF PREVIOUS
*
         ST    R1,8(,R13)          STORE ADDRESS OF CURRENT
*
         LR    R13,R1              LOAD REGISTER 13 WITH SAVEAREA
*
         USING WORKAREA,R13        ESTABLISH ADDRESSABILITY
*
         MVI   MODEFLAG,0          INITIALIZE THE MODE FLAG
*
         MVI   VARINAME,C' '       BLANK OUT THE VARIABLE NAME BUF
         MVC   VARINAME+1(L'VARINAME-1),VARINAME
*
         MVI   DEFNAME,C' '        BLANK OUT THE DEFINITION BUFFER
         MVC   DEFNAME+1(L'DEFNAME-1),DEFNAME
*
         MVI   DATAFLD,C' '        PRE-BLANK OUT THE
         MVC   DATAFLD+1(L'DATAFLD-1),DATAFLD RETURN DATA FIELD
*
         XC    RETCODE,RETCODE     ASSUME GOOD RETURN CODE
*
         TM    0(R8),X'80'         TEST FOR ONE WORD PARM LIST
         BO    CALLPARM            IF SO, THIS IS A CALLED PARAMETER
         TM    4(R8),X'80'         TEST FOR A TWO WORD PARAMETER LIST
         BO    PGMPARM             IF SO, THIS IS A PROGRAM PARM
*
         EJECT
***********************************************************************
*                                                                     *
*        BUILD PARSE PARAMETER LIST                                   *
*        INITIALIZE OUTPUT DATA CONTROL BLOCKS IN WORKAREA            *
*                                                                     *
***********************************************************************
*
CMDPARM  DS    0H
         OI    MODEFLAG,MODECMD    INDICATE WE HAVE A TSO CPPL
*
         USING CPPL,R8             ESTABLISH ADDRESSABILITY TO CPPL
*
         LA    R4,PPLSECT          LOAD ADDRESS OF PARSE PARAMETER
         USING PPL,R4              ESTABLISH ADDRESSABILITY TO PPL
*
         L     R1,CPPLUPT          LOAD POINTER TO USER PROFILE
         L     R2,CPPLECT          LOAD POINTER TO ENVIRONMENT
*                                  CONTROL TABLE FROM CPPL
         SLR   R3,R3               ZERO REGISTER 3
         ST    R3,ECB              STORE REGISTER AS ECB FOR PPL
         LA    R3,ECB              LOAD ADDRESS OF ECB
         STM   R1,R3,PPLSECT       STORE ADDRESS OF UPT, ECT, AND
*                                  ECB IN PPL
         MVC   PPLPCL,PCLADDR      MOVE POINTER TO PARAMETER
*                                  CONTROL LIST INTO PPL
         LA    R2,PARSBACK         LOAD ADDRESS OF FULLWORD TO
*                                  CONTAIN ADDRESS OF PDE RETURNED
*                                  BY PARS
         ST    R2,PPLANS           STORE POINTER TO RETURN ADDRESS
         MVC   PPLCBUF,CPPLCBUF    MOVE POINTER TO COMMAND BUFFER
*                                  INTO PPL
         LA    R2,PPLUWA           LOAD ADDRESS OF USER WORK AREA
         ST    R2,PPLUWA           STORE ADDRESS IN PPL
         DROP  R4,R8               DROP ADDRESSABILITY
*
***********************************************************************
*                                                                     *
*        CALLTSSR TO PARSE (ENTRY NAME IKJPARS)                       *
*        ON RETURN PARSBACK -> PDL                                    *
*                                                                     *
***********************************************************************
*
         CALLTSSR  EP=IKJPARS,MF=(E,PPLSECT) CALL PARSE
         LTR   R15,R15             SEE IF RETURN CODE IS ZERO
         BNZ   BADPARSE            NO, BAD NEWS
*
***********************************************************************
*                                                                     *
*        SET UP ADDRESSABILITY TO PDL                                 *
*           AND PROCESS THE PARAMETERS                                *
*                                                                     *
***********************************************************************
*
         L     R9,PARSBACK         LOAD POINTER TO PARSE ANSWER
         USING IKJPARMD,R9         ESTABLISH ADDRESSABILITY TO PDL
*
         LA    R6,DEFINIT          LOAD POINTER TO DEFINITION PDE
         L     R5,0(R6)            LOAD POINTER TO DEFINITION DATA
         LH    R4,4(R6)            LOAD LENGTH OF DEFINITION
         BCTR  R4,0                DECREMENT LENGTH FOR EXECUTE OF MVC
*
         EX    R4,PARSDEF          MOVE IN THE DEFINITION
*
         LA    R6,VARIABLE         LOAD POINTER TO VARIABLE PDE
         L     R5,0(R6)            LOAD POINTER TO VARIABLE DATA
         LH    R4,4(R6)            LOAD LENGTH OF VARIABLE
         ST    R4,NAMELENG         SAVE THIS LENGTH FOR SERVICE
         BCTR  R4,0                DECREMENT LENGTH FOR EXECUTE OF MVS
*
         EX    R4,PARSVARI         MOVE IN THE VARIBALE NAME
*
         DROP  R9                  DROP ADDRESSABILITY TO PDL
*
         CLC   DEFNAME(4),=C'ALL ' CHECK FOR EVERYTHING WANTED
         BNE   *+8                 BRANCH IF NOT
         OI    MODEFLAG,MODEALL    INDICATE EVERYTHING WANTED
*
         B     LOOKUP              AND GO DECODE THE REQUEST
*
PARSDEF  MVC   DEFNAME(*-*),0(R5)  *** EXECUTE ONLY ***
PARSVARI MVC   VARINAME(*-*),0(R5) *** EXECUTE ONLY ***
*
         EJECT
***********************************************************************
*                                                                     *
*        PROGRAM HAS BEEN INVOKED WITH A ONE WORD PARAMETER LIST      *
*        IN THE FORMAT OF THE CALL/JCL PARAMETER.  SCAN FOR THE       *
*        DEFINITION KEY AND RETURN VARIABLE NAME.                     *
*                                                                     *
***********************************************************************
*
CALLPARM DS    0H
         OI    MODEFLAG,MODECALL   INDICATE WE HAVE A CALL PROGRAM PARM
*
         L     R2,0(,R8)           LOAD THE ADDRESS OF THE PARM STRING
         LH    R3,0(,R2)           LOAD THE STRING LENGTH
         LA    R2,2(,R2)           POINT AT ACTUAL FIRST CHARACTER
*
         CH    R3,=H'3'            CHECK MINIMUM LENGTH
         BL    BADPARM             RETURN BAD NEWS IF TOO SMALL
*
         LR    R1,R2               SET SCAN POINTER
*
CALLLP1  DS    0H
         CLI   0(R1),C','          LOOK FOR DELIMITER
         BE    CALLCOMA            BRANCH WHEN FOUND
         LA    R1,1(,R1)           INCREMENT SCAN POINTER
         BCT   R3,CALLLP1          LOOP LOOKING FOR COMMA
         B     BADPARM             IF NO COMMA, BAD NEWS
*
CALLCOMA DS    0H
         LR    R15,R1              COPY FOR LENGTH CALCULATION
         SR    R15,R2              CALCULATE LENGTH
         BNH   BADPARM             LENGTH SHOULD BE POSITIVE
         CH    R15,=Y(L'DEFNAME)   CHECK MAXIMUM LENGTH
         BH    BADPARM             ERROR IF TOO BIG
*
         BCTR  R15,0               DECREMENT FOR MVC INSTRUCTION
         EX    R15,CALLDEF         MOVE THE DEFINITION KEY
*
         LA    R1,1(,R1)           INCREMENT PAST THE COMMA
         BCT   R3,*+8              DECREMENT THE COMMA
         B     BADPARM             ERROR IF COMMA THE LAST THING
*
         CH    R3,=Y(L'VARINAME)   CHECK REMAINING LENGTH
         BH    BADPARM             ERROR IF TOO BIG
         ST    R3,NAMELENG         SAVE THIS LENGTH FOR SERVICE
*
         BCTR  R3,0                DECREMENT THE LENGTH FOR MVC
         EX    R3,CALLVARI         MOVE THE VARIABLE NAME
*
         EX    R3,CALLTRT          SCAN FOR VALID CHARACTERS
         BNZ   BADPARM             ERROR IF ANY BAD ONES
*
         CLI   VARINAME,C'0'       MAKE SURE THAT FIRST CHARACTER IS
         BNL   BADPARM             NOT NUMERIC
*
         CLC   DEFNAME(4),=C'ALL ' CHECK FOR EVERYTHING WANTED
         BNE   *+8                 BRANCH IF NOT
         OI    MODEFLAG,MODEALL    INDICATE EVERYTHING WANTED
*
         B     LOOKUP              AND GO DECODE THE REQUEST
*
CALLDEF  MVC   DEFNAME(*-*),0(R2)  *** EXECUTE ONLY ***
CALLVARI MVC   VARINAME(*-*),0(R1) *** EXECUTE ONLY ***
CALLTRT  TRT   VARINAME(*-*),ALPHANUM   *** EXECUTE ONLY ***
*
         EJECT
***********************************************************************
*                                                                     *
*        PROGRAM HAS BEEN INVOKED WITH A TWO WORD PARAMETER LIST      *
*        EXTRACT DEFINITION KEY NAME AND SAVE THE RETURN DATA         *
*        ADDRESS.                                                     *
*                                                                     *
***********************************************************************
*
PGMPARM  DS    0H
         OI    MODEFLAG,MODEPGM    INDICATE WE HAVE AN INTERNAL PROGRAM
*
         L     R1,0(,R8)           LOAD THE ADDRESS OF THE DEF KEY
         MVC   DEFNAME,0(R1)       COPY THE DEFINITION KEY
*
         L     R1,4(,R8)           LOAD THE RETURN DATA ADDRESS
         ST    R1,DATARETA         STORE THE RETURN DATA ADDRESS
*
         B     LOOKUP              AND GO DECODE THE REQUEST
*
         EJECT
***********************************************************************
*                                                                     *
*        LOOK UP DEFINITION NAME IN TABLE                             *
*                                                                     *
***********************************************************************
*
LOOKUP   DS    0H
         LOAD  EPLOC=DATMODUL,ERRET=NODATA
         OI    MODEFLAG,MODELOAD   INDICATE DATA MODULE LOADED
*
         LR    R10,R0              COPY THE ENTRY POINT
         LR    R9,R1               COPY THE LENGTH
         SLL   R9,3                CALCULATE MODULE'S ACTUAL LENGTH
*
         LA    R10,80(,R10)        BUMP PAST THE IDENTIFICATION ENTRY
         SH    R9,=H'80'           ADJUST FOR THE IDENTIFICATION ENTRY
*
DEFLOOP  DS    0H
         TM    MODEFLAG,MODEALL    CHECK FOR ALL VARIABLES (TSO/CALL)
         BO    DEFFOUND            GO CREATE VARIABLE
*
         CLC   DEFNAME,0(R10)      MATCH THE NAME FIELD
         BNE   DEFNEXT             BRANCH IF NO MATCH
*
DEFFOUND DS    0H
         MVC   DATAFLD,16(R10)     COPY THE DATA VALUE
*
         TM    MODEFLAG,MODEALL    ARE WE IN ALL MODE
         BZ    CRE8VARI            BRANCH IF NOT
*
         MVC   VARINAME(16),0(R10) COPY THE DATA NAME
         MVI   VARINAME+16,C' '    BLANK THE REMAINDER
         MVC   VARINAME+17(L'VARINAME-17),VARINAME+16
*
         LA    R1,VARINAME+15      SET TO LAST POSSIBLE CHARACTER
         LA    R0,16               SET MAXIMUM LENGTH
*
DEFVARIL DS    0H
         CLI   0(R1),C' '          DO WE HAVE A BLANK
         BNE   DEFVARIF            BRANCH IF WE DON'T
         BCTR  R1,0                DECREMENT ONE
         BCT   R0,DEFVARIL         LOOP THROUGH THE VARIABLE NAME
         DC    H'0'                DON'T EVEN THINK ABOUT IT!
*
DEFVARIF DS    0H
         ST    R0,NAMELENG         STORE THE VARIBALE NAME LENGTH
*
         EJECT
***********************************************************************
*                                                                     *
*        CONSTRUCT THE PARAMETER LIST FOR IKJCT441                    *
*                                                                     *
***********************************************************************
*
CRE8VARI DS    0H
         TM    MODEFLAG,MODEPGM    IS THIS A PROGRAM TO RETURN DATA TO
         BZ    GODOVARI            IF NOT, GO CREATE THE VARIABLE
*
         L     R15,DATARETA        LOAD THE RETURN DATA ADDRESS
         MVC   0(L'DATAFLD,R15),DATAFLD COPY THE RETURN DATA
         B     RETURN
*
GODOVARI DS    0H
         L     R3,CVTPTR           FIND CVT
         USING CVTMAP,R3
*
         L     R3,CVTTVT           FIND THE TSVT
         USING TSVT,R3
*
         LA    R0,TSVEUPDT
         ST    R0,ENTRYCDE
         LA    R0,ENTRYCDE
         ST    R0,CT441PRM+0
*
         LA    R0,VARINAME
         ST    R0,NAMEADDR
         LA    R0,NAMEADDR
         ST    R0,CT441PRM+4
*
         LA    R0,NAMELENG
         ST    R0,CT441PRM+8
*
         LA    R0,DATAADDR
         ST    R0,CT441PRM+12
*
         LA    R0,DATALENG
         ST    R0,CT441PRM+16
*
         LA    R0,TOKENPRM
         ST    R0,CT441PRM+20
         OI    CT441PRM+20,X'80'
*
         LA    R1,DATAFLD
         ST    R1,DATAADDR
*
         LA    R0,L'DATAFLD        LOAD LENGTH OF DATA AREA
         AR    R1,R0               POINT PAST END OF STRING
*
CALCLOOP BCTR  R1,0                BACK UP TO THE PREVIOUS CHARACTER
         CLI   0(R1),C' '
         BH    CALCSTOR
         BCT   R0,CALCLOOP
*
         LA    R0,1
*
CALCSTOR DS    0H
         ST    R0,DATALENG
*
         LA    R1,CT441PRM         POINT AT PARM LIST
         L     R15,TSVTVACC        LOAD THE VARIABLE ACCESS RTN
         BALR  R14,R15             GO CALL VARIABLE ROUTINE
*
         DROP  R3                  DONE WITH TSVT
*
         LTR   R15,R15             TEST IF RETURN WAS GOOD
         BNZ   NOTCLIST            ASSUME WE AREN'T IN CLIST IF BAD
*
         TM    MODEFLAG,MODEALL    ARE WE IN ALL MODE
         BZ    RETURN              IF NOTE, WE ARE DONE
*
DEFNEXT  DS    0H
         LA    R10,80(,R10)        INCREMENT TO NEXT ENTRY
         SH    R9,=H'80'           DECREMENT THE LENGTH
         BP    DEFLOOP             LOOP IF MORE LEFT
*
         TM    MODEFLAG,MODEALL    ARE WE IN ALL MODE
         BO    RETURN              IF SO, THIS IS OK
         B     NOTFOUND            ERROR - DEFINITION KEY NOT FOUND
*
         EJECT
***********************************************************************
*                                                                     *
*        ERROR CONDITIONS                                             *
*                                                                     *
***********************************************************************
*
NOTFOUND DS    0H
         LA    R0,4                SET UNKNOWN DEFINITION KEY
         ST    R0,RETCODE
         B     RETURN
*
NOTCLIST DS    0H
         LA    R0,8                SET WE AREN'T IN A CLIST ENV
         ST    R0,RETCODE
         B     RETURN
*
BADPARM  DS    0H
BADPARSE LA    R0,12               SET SERIOUS ERROR
         ST    R0,RETCODE
         B     RETURN
*
NODATA   DS    0H
         LA    R0,16               SET NO DATA MODULE FOUND
         ST    R0,RETCODE
         B     RETURN
*
***********************************************************************
*                                                                     *
*        CLEANUP AREAS GETMAINED BY PARSE,                            *
*           SET RETURN CODE, RESTORE REGISTERS AND                    *
*           RETURN TO CALLER                                          *
*                                                                     *
***********************************************************************
*
RETURN   DS    0H
         TM    MODEFLAG,MODELOAD   WAS THE DATA MODULE LOADED
         BZ    NOTLOADD            BRANCH IF NOT
         DELETE EPLOC=DATMODUL     CLEAN UP MODULE
*
NOTLOADD DS    0H
         TM    MODEFLAG,MODECMD    IS THIS A TSO COMMAND
         BZ    NOPARSEF            BRANCH IF NOT
         IKJRLSA PARSBACK          RELEASE AREAS GETMAINED BY PARSE
*
NOPARSEF DS    0H
         L     R2,RETCODE          LOAD THE RETURN CODE
*
         LR    R1,R13              LOAD ADDRESS OF GETMAINED AREA
         L     R13,4(,R13)         RELOAD ADDRESS OF PREVIOUS SAVE
*
         LA    R0,WORKLENG         LOAD LENGTH OF GETMAINED AREA
         FREEMAIN RU,LV=(0),A=(1)  FREE GETMAINED AREA
*
         LR    R15,R2              SET THE RETURN CODE
         L     R14,12(,R13)        LOAD REGISTER 14 WITH RETURN
         LM    R0,R12,20(R13)      RESTORE REGISTERS
         BSM   0,R14               RETURN
*
         EJECT
PATCH    DC    0D'0',32S(*)
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
DATMODUL DC    CL8'CCCBKDAT'       DATA DEFINITION MODULE NAME
*
LITERALS LTORG ,
*
PCLADDR  DC    V(PARMTAB)
*
ALPHANUM DC    256X'FF'            ALPHANUMERIC TEST TABLE
         ORG   ALPHANUM+C'$'
         DC    X'00'
         ORG   ALPHANUM+C'#'
         DC    X'00'
         ORG   ALPHANUM+C'@'
         DC    X'00'
         ORG   ALPHANUM+C'A'
         DC    9X'00'
         ORG   ALPHANUM+C'J'
         DC    9X'00'
         ORG   ALPHANUM+C'S'
         DC    8X'00'
         ORG   ALPHANUM+C'0'
         DC    10X'00'
         ORG   ,
*
         EJECT
************************ PARS PARAMETER LIST **************************
PARMTAB  IKJPARM  DSECT=IKJPARMD
PARMTAB  AMODE 31
PARMTAB  RMODE ANY
*
DEFINIT  IKJIDENT 'DEFINITION',UPPERCASE,                              X
               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=16,               X
               PROMPT='DEFINITION VALUE',                              X
               HELP='BOOKMANAGER VARIABLE DEFINITION CODE'
*
VARIABLE IKJIDENT 'VARIBALE',UPPERCASE,                                X
               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=32,                  X
               PROMPT='VARIABLE NAME',                                 X
               HELP='REXX/CLIST VARIABLE NAME'
         IKJENDP
*
         EJECT
************************ DSECTS (MAPPING MACROS) **********************
         PRINT NOGEN
         IKJCPPL
CPPLLEN  EQU   *-CPPL
*
         IKJPPL
PPLLEN   EQU   *-PPL
*
         CVT   DSECT=YES
*
         IKJTSVT
*
*
         PRINT GEN
*
WORKAREA DSECT
SAVEAREA DS    9D
RETCODE  DS    F
*
         DS    0D
PPLSECT  DS    0F
         ORG   PPLSECT+PPLLEN
*
ECB      DS    F
PARSBACK DS    F
*
CT441PRM DS    6F
*
ENTRYCDE DS    F
NAMEADDR DS    A                        ADDRESS OF VARIABLE NAME
NAMELENG DS    F                        LENGTH OF VARIABLE NAME
DATAADDR DS    A                        ADDRESS OF VARIABLE DATA
DATALENG DS    F                        LENGTH OF DATA
TOKENPRM DS    F
*
VARINAME DS    CL32                     VARIABLE NAME FIELD
*
DATAFLD  DS    CL64                     RETURNED DATA FIELD
*
DEFNAME  DS    CL16                     REQUESTED DEFINITION NAME
*
DATARETA DS    A                        ADDRESS OF THE RETURN DATA
*
MODEFLAG DS    X                        PROGRAM MODE
MODECMD  EQU   X'80'                    INVOKED AS A TSO COMMAND
MODECALL EQU   X'40'                    INVOKED AS A CALLED PROGRAM
MODEPGM  EQU   X'20'                    INVOKED AS AN INTERNAL CALL
MODEALL  EQU   X'02'                    ALL VARIABLES WANTED (CALL/TSO)
MODELOAD EQU   X'01'                    DATA MODULE HAS BEEN LOADED
*
         DS    0D
WORKLENG EQU   *-WORKAREA
*
         END   CCCBKDEF
