LOCATE   TITLE 'TSO COMMAND TO LOCATE DATA SET AND RETURN VOLUME INFO'
***********************************************************************
*                                                                     *
*        CCCLOCAT (ALIAS LOCATE)                                      *
*                                                                     *
*        THIS PROGRAM IS A TSO COMMAND THAT IS DESIGNED TO            *
*        RUN IN A CLIST OR REXX EXEC ONLY.  IT WILL DETERMINE         *
*        IF THE DATA SET NAME PASSED IN THE PARAMETER LIST IS         *
*        CATALOGUED AND, IF SO, WILL RETURN THE DATA SET'S            *
*        VOLUME AND DEVICE TYPE INFORMATION IN CLIST/REXX             *
*        VARIABLES.                                                   *
*                                                                     *
*        THIS PROGRAM CAN ALSO RUN AS A NORMAL MVS CALLED PROGRAM.    *
*        IN THIS MODE, THE ONLY RETURN IS THE RETURN CODE AND         *
*        ARE DIFFERENT FROM THE TSO COMMAND RETURN CODES,             *
*        INDICATING IF THE DATA SET EXISTS AND IF IT IS ARCHIVED.     *
*                                                                     *
*        INPUT - TSO COMMAND PARAMETER LIST WITH ONE POSITIONAL       *
*                PARAMETER - THE DATA SET NAME.                       *
*                                                                     *
*        OUTPUT - TWO CLIST/REXX VARIABLES AND A RETURN CODE          *
*                 (&)DATASETVOLUME - VOLUME SERIAL NUMBER             *
*                 (&)DATASETDEVICE - DEVICE TYPE (GENERIC)            *
*                                                                     *
*        TSO COMMAND RETURN CODES                                     *
*                                                                     *
*                 RETURN CODE 0 - DATA SET EXISTS - VARIABLES SET     *
*                 RETURN CODE 4 - DATA SET NOT CATALOGUED             *
*                 RETURN CODE 8 - UNABLE TO CREATE VARIABLES          *
*                 RETURN CODE 12 - SERIOUS ERROR IN PROGRAM           *
*                                                                     *
*        CALLED PROGRAM RETURN CODES                                  *
*                                                                     *
*                 RETURN CODE 0 - DATA SET EXISTS                     *
*                 RETURN CODE 4 - DATA SET NOT CATALOGUED             *
*                 RETURN CODE 8 - DATA SET ARCHIVED TO DASD           *
*                 RETURN CODE 12 - DATA SET ARCHIVED TO TAPE          *
*                                                                     *
*        ATTRIBUTES - REENTRANT, REFRESHABLE, AMODE 31, RMODE ANY,    *
*                     UNAUTHORIZED                                    *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
         PUNCH '         ALIAS LOCATE'
*
CCCLOCAT CSECT
CCCLOCAT AMODE 31
CCCLOCAT RMODE ANY
*
         USING CCCLOCAT,R15
         B     AROUNDID
         DC    AL1(33)
         DC    CL8'CCCLOCAT'
         DC    CL8'V 1.2.0'
         DC    CL8'&SYSDATE'
         DC    CL8' &SYSTIME'
AROUNDID DS    0H
         STM   R14,R12,12(R13)         SAVE THE REGISTERS
*
         LR    R12,R15                 LOAD REGISTER 12 WITH ENTRY
         DROP  R15
         USING CCCLOCAT,R12            ESTABLIST ADDRESSABILITY
*
         LR    R8,R1                   LOAD REGISTER 8 TO PRESERVE
*
         LA    R0,WORKLENG             LOAD LENGTH OF GETMAINED AREA
         GETMAIN RU,LV=(0),LOC=(BELOW,ANY)
         LR    R14,R1                  COPY FOR THE MOVE LONG
         LA    R15,WORKLENG            GET THE LENGTH
         SLR   R3,R3
         MVCL  R14,R2                  CLEAR THE AREA
*
         ST    R13,4(,R1)              STORE ADDRESS OF PREVIOUS
*
         ST    R1,8(,R13)              STORE ADDRESS OF CURRENT
*
         LR    R13,R1                  LOAD REGISTER 13 WITH SAVEAREA
*
         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY
*
         TM    0(R8),X'80'             TEST FOR ONE PARAMETER
         BZ    CMDPARM                 BRANCH IF NOT, IT'S TSO
*
         EJECT
***********************************************************************
*                                                                     *
*        EXTRACT THE DATA SET NAME FROM THE CALLED PARAMETER          *
*                                                                     *
***********************************************************************
*
         L     R5,0(R8)                LOAD POINTER TO DSNAME
         LH    R4,0(,R5)               LOAD LENGTH OF DSNAME
         LA    R5,2(,R5)               POINT TO ACTUAL DATA SET NAME
         BCTR  R4,0                    DECREMENT LENGTH FOR EXECUTE OF
*                                      MOVE
         MVI   NAMEFLD,C' '            BLANK OUT THE DSNAME BUFFER
         MVC   NAMEFLD+1(43),NAMEFLD   FINISH BLANKING OUT THE BUFFER
         EX    R4,MOVEDSN              MOVE IN THE DSNAME
*
         B     LOCATEIT                AND GO LOCATE THE DATA SET
*
         EJECT
***********************************************************************
*                                                                     *
*        BUILD PARSE PARAMETER LIST                                   *
*        INITIALIZE OUTPUT DATA CONTROL BLOCKS IN WORKAREA            *
*                                                                     *
***********************************************************************
*
         USING CPPL,R8                 ESTABLISH ADDRESSABILITY TO CPPL
*
CMDPARM  DS    0H
         LA    R4,PPLSECT              LOAD ADDRESS OF PARSE PARAMETER
         USING PPL,R4                  ESTABLISH ADDRESSABILITY TO PPL
*
         L     R1,CPPLUPT              LOAD POINTER TO USER PROFILE
         L     R2,CPPLECT              LOAD POINTER TO ENVIRONMENT
*                                      CONTROL TABLE FROM CPPL
         SLR   R3,R3                   ZERO REGISTER 3
         ST    R3,ECB                  STORE REGISTER AS ECB FOR PPL
         LA    R3,ECB                  LOAD ADDRESS OF ECB
         STM   R1,R3,PPLSECT           STORE ADDRESS OF UPT, ECT, AND
*                                      ECB IN PPL
         MVC   PPLPCL,PCLADDR          MOVE POINTER TO PARAMETER
*                                      CONTROL LIST INTO PPL
         LA    R2,PARSBACK             LOAD ADDRESS OF FULLWORD TO
*                                      CONTAIN ADDRESS OF PDE RETURNED
*                                      BY PARS
         ST    R2,PPLANS               STORE POINTER TO RETURN ADDRESS
         MVC   PPLCBUF,CPPLCBUF        MOVE POINTER TO COMMAND BUFFER
*                                      INTO PPL
         LA    R2,PPLUWA               LOAD ADDRESS OF USER WORK AREA
         ST    R2,PPLUWA               STORE ADDRESS IN PPL
         DROP  R4,R8                   DROP ADDRESSABILITY
*
***********************************************************************
*                                                                     *
*        CALLTSSR TO PARSE (ENTRY NAME IKJPARS)                       *
*        ON RETURN PARSBACK -> PDL                                    *
*        HANDLE ALL ERROR CODES RETURNED BY PARS                      *
*        IF NECESSARY CALL GENERAL FAIL SERVICE ROUTINE               *
*                                                                     *
***********************************************************************
*
         CALLTSSR  EP=IKJPARS,MF=(E,PPLSECT)
*                                      CALL PARS TO PARSE COMMAND
         LTR   R15,R15                 SEE IF RETURN CODE IS ZERO
         BNZ   BADPARSE                NO, BAD NEWS
*
***********************************************************************
*                                                                     *
*        SET UP ADDRESSABILITY TO PDL                                 *
*           AND LOAD REGISTER 6 WITH ADDRESS OF DSNAME PDE            *
*                                                                     *
***********************************************************************
*
         L     R9,PARSBACK             LOAD POINTER TO PARS ANSWER
         USING IKJPARMD,R9             ESTABLISH ADDRESSABILITY TO PDL
         LA    R6,DSNAME               LOAD POINTER TO DSNAME
         DROP  R9                      DROP ADDRESSABILITY TO PDL
*
         L     R5,0(R6)                LOAD POINTER TO DSNAME
         LH    R4,4(R6)                LOAD LENGTH OF DSNAME
         BCTR  R4,0                    DECREMENT LENGTH FOR EXECUTE OF
*                                      MOVE
         MVI   NAMEFLD,C' '            BLANK OUT THE DSNAME BUFFER
         MVC   NAMEFLD+1(43),NAMEFLD   FINISH BLANKING OUT THE BUFFER
         EX    R4,MOVEDSN              MOVE IN THE DSNAME
*
         EJECT
***********************************************************************
*                                                                     *
*        LOCATE THE DATA SET                                          *
*                                                                     *
***********************************************************************
*
LOCATEIT DS    0H
         MVC   CAMLST(CAMLSTML),CAMLSTMD    COPY CAMLIST MODEL
         LA    R1,NAMEFLD              POINT AT NAME FIELD
         ST    R1,CAMLST+4             STORE IN CAMLST
         LA    R1,LOCWORK              POINT AT LOCATE WORK AREA
         ST    R1,CAMLST+12            STORE IN CAMLST
*
         LOCATE CAMLST                 DO THE LOCATE
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   NOTCAT                  IF NON-ZERO ASSUME NOT CATALOGED
*
         EDTINFO RTNUNIT,DEVTYPE=LOCDEVT,OUTUNIT=DEVNAME,              X
               MF=(E,EDTINFOP,COMPLETE)
*
         LTR   R15,R15
         BZ    GOTDEVN
         MVC   DEVNAME,=CL8'UNKNOWN'
*
GOTDEVN  DS    0H
*
         TM    0(R8),X'80'         CHECK THE PARM LIST FORMAT
         BZ    TSOVARS             GO RETURN THE TSO VARIABLES
*
         XC    RETCODE,RETCODE     CLEAR THE RETURN CODE
         CLC   LOCVOLSR,=C'MIGRAT' CHECK FOR MIGRATED VOLUME
         BNE   RETURN              LEAVE IF NOT MIGRATED RETURN CODE
*
         TM    LOCDEVT+2,X'80'     TEST FOR TAPE DEVICE
         BO    ARCHTAPE            IF SO, RETURN TAPE ARCHIVE
         B     ARCHDASD            IF NOT, RETURN DASD ARCHIVE
*
         EJECT
***********************************************************************
*                                                                     *
*        CONSTRUCT THE PARAMETER LIST FOR IKJCT441                    *
*                                                                     *
***********************************************************************
*
TSOVARS  DS    0H
         L     R3,CVTPTR           FIND CVT
         USING CVTMAP,R3
*
         L     R3,CVTTVT           FIND THE TSVT
         USING TSVT,R3
*
         LA    R0,TSVEUPDT
         ST    R0,ENTRYCDE
         LA    R0,ENTRYCDE
         ST    R0,CT441PRM+0
*
         LA    R0,VARINAME
         ST    R0,NAMEADDR
         LA    R0,NAMEADDR
         ST    R0,CT441PRM+4
*
         LA    R0,NAMELENG
         ST    R0,CT441PRM+8
*
         LA    R0,DATAADDR
         ST    R0,CT441PRM+12
*
         LA    R0,DATALENG
         ST    R0,CT441PRM+16
*
         LA    R0,TOKENPRM
         ST    R0,CT441PRM+20
         OI    CT441PRM+20,X'80'
*
         MVC   VARINAME(13),=C'DATASETVOLUME'
*
         LA    R15,13
         LA    R1,LOCVOLSR
         LA    R0,L'LOCVOLSR
*
         BAL   R14,TSOVARSV        GO CALL VARIABLE ROUTINE
         LTR   R15,R15             TEST IF RETURN WAS GOOD
         BNZ   NOTCLIST            ASSUME WE AREN'T IN CLIST IF BAD
*
         MVC   VARINAME(13),=C'DATASETDEVICE'
*
         LA    R15,13
         LA    R1,DEVNAME
         LA    R0,L'DEVNAME
*
         BAL   R14,TSOVARSV        GO CALL VARIABLE ROUTINE
         LTR   R15,R15             TEST IF RETURN WAS GOOD
         BNZ   NOTCLIST            ASSUME WE AREN'T IN CLIST IF BAD
*
ALLDONE  XC    RETCODE,RETCODE         INDICATE GOOD END
         B     RETURN
*
***********************************************************************
*                                                                     *
*        SUBROUTINE TO CALL TSO VARIABLE SERVICES                     *
*                                                                     *
*        ON ENTRY, R1 POINTS TO DATA AREA                             *
*                  R0 CONTAINS DATA LENGTH (MAXIMUM)                  *
*                  R15 CONTAINS VARIABLE NAME LENGTH                  *
*                  VARINAME CONTAINS VARIABLE NAME                    *
*                  R14 IS RETURN ADDRESS                              *
*                                                                     *
*        A BRANCH IS MADE TO THE TSO VARIABLE ROUTINE, WHICH          *
*        RETURNS TO THE CALLER VIA R14.                               *
*                                                                     *
***********************************************************************
*
TSOVARSV DS    0H
         ST    R15,NAMELENG
         ST    R1,DATAADDR
*
         AR    R1,R0               POINT PAST END OF STRING
*
CALCLOOP BCTR  R1,0                BACK UP TO THE PREVIOUS CHARACTER
         CLI   0(R1),C' '
         BH    CALCSTOR
         BCT   R0,CALCLOOP
*
         LA    R0,1
*
CALCSTOR DS    0H
         ST    R0,DATALENG
*
         LA    R1,CT441PRM         POINT AT PARM LIST
         L     R15,TSVTVACC        LOAD THE VARIABLE ACCESS RTN
         BR    R15                 CALL IT (WITH RETURN TO CALLER)
*
         DROP  R3                  DONE WITH TSVT
*
         EJECT
***********************************************************************
*                                                                     *
*        ERROR CONDITIONS                                             *
*                                                                     *
***********************************************************************
*
NOTCAT   LA    R0,4                    SET DATA SET NOT CATALOGUED
         ST    R0,RETCODE
         B     RETURN
*
ARCHDASD DS    0H
NOTCLIST LA    R0,8                    SET WE AREN'T IN A CLIST ENV
         ST    R0,RETCODE
         B     RETURN
*
ARCHTAPE DS    0H
BADPARSE LA    R0,12                   SET SERIOUS ERROR
         ST    R0,RETCODE
         B     RETURN
*
***********************************************************************
*                                                                     *
*        CLEANUP AREAS GETMAINED BY PARSE,                            *
*           SET RETURN CODE, RESTORE REGISTERS AND                    *
*           RETURN TO CALLER                                          *
*                                                                     *
***********************************************************************
*
RETURN   DS    0H
         TM    0(R8),X'80'         CHECK THE PARM LIST FORMAT
         BO    RETURN2             SKIP FREE PARSE DATA
*
         IKJRLSA PARSBACK          RELEASE AREAS GETMAINED BY PARS
*
RETURN2  DS    0H
         L     R2,RETCODE          LOAD THE RETURN CODE
*
         LR    R1,R13              LOAD ADDRESS OF GETMAINED AREA
         L     R13,4(,R13)         RELOAD ADDRESS OF PREVIOUS SAVE
*
         LA    R0,WORKLENG         LOAD LENGTH OF GETMAINED AREA
         FREEMAIN RU,LV=(0),A=(1)  FREE GETMINED AREA
*
         LR    R15,R2              SET THE RETURN CODE
         L     R14,12(,R13)        LOAD REGISTER 14 WITH RETURN
         LM    R0,R12,20(R13)      RESTORE REGISTERS
         BR    R14                 RETURN
*
******************** INSTRUCTIONS TO BE EXECUTED **********************
*
MOVEDSN  MVC   NAMEFLD(0),0(R5)
*
***************************** CONSTANTS *******************************
*
         EJECT
CAMLSTMD CAMLST NAME,*-*,,*-*
CAMLSTML EQU   *-CAMLSTMD
*
PATCH    DC    0D'0',32S(*)
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
LITERALS LTORG ,
*
PCLADDR  DC    V(PARMTAB)
*
         EJECT
************************ PARSE PARAMETER LIST *************************
PARMTAB  IKJPARM  DSECT=IKJPARMD
PARMTAB  AMODE 31
PARMTAB  RMODE ANY
*
DSNAME   IKJPOSIT  DSNAME,USID,                                        X
               PROMPT='DSNAME',                                        X
               HELP='DATA SET NAME'
         IKJENDP
*
         EJECT
************************ DSECTS (MAPPING MACROS) **********************
         PRINT NOGEN
         IKJCPPL
CPPLLEN  EQU   *-CPPL
*
         IKJPPL
PPLLEN   EQU   *-PPL
*
         CVT   DSECT=YES
*
         IKJTSVT
*
*
         PRINT GEN
*
WORKAREA DSECT
SAVEAREA DS    9D
RETCODE  DS    F
*
CAMLST   CAMLST NAME,*-*,,*-*
*
         DS    0D
NAMEFLD  DS    CL44
         DS    0D
LOCWORK  DS    CL265
         ORG   LOCWORK
LOCCOUNT DS    H
LOCDEVT  DS    XL4
LOCVOLSR DS    CL6
LOCVOLSQ DS    H
         ORG   ,
*
PPLSECT  DS    0F
         ORG   PPLSECT+PPLLEN
*
ECB      DS    F
PARSBACK DS    F
*
         EDTINFO MF=(L,EDTINFOP)
*
DEVNAME  DS    CL8
*
CT441PRM DS    6F
*
ENTRYCDE DS    F
NAMEADDR DS    A                        ADDRESS OF VARIABLE NAME
NAMELENG DS    F                        LENGTH OF VARIABLE NAME
DATAADDR DS    A                        ADDRESS OF VARIABLE DATA
DATALENG DS    F                        LENGTH OF DATA
TOKENPRM DS    F
*
VARINAME DS    CL32                     VARIABLE NAME FIELD
*
         DS    0D
WORKLENG EQU   *-WORKAREA
*
         END   CCCLOCAT
