BKPUB    TITLE 'TSO COMMAND TO RETURN PROPER PUBLICATION NUMBER'
***********************************************************************
*                                                                     *
*        CCCBKPUB                                                     *
*                                                                     *
*        THIS PROGRAM IS A TSO COMMAND OR PROGRAM THAT IS DESIGNED    *
*        TO RUN IN A CLIST OR REXX EXEC OR CALLED INTERNALLY.  IT     *
*        WILL TAKE AN IBM PUBLICATION NUMBER AND CONVERT IT TO        *
*        A UNIFORM 12 CHARACTER FORMAT OF XXNN-NNNN-NN.  THE          *
*        DATA IS RETURNED IN EITHER CLIST VARIABLES OR IN AN          *
*        AREA POINTED TO BY THE PARAMETER LIST.                       *
*                                                                     *
*        INPUT(1) TSO COMMAND PARAMETER LIST WITH TWO POSITIONAL      *
*                 PARAMETERS - THE ORIGINAL PUBLICATION NUMBER        *
*                 CHARACTER STRING AND THE NAME OF THE RETURN         *
*                 CLIST/REXX VARIABLE.                                *
*                                                                     *
*        INPUT(2) CALLED PROGRAM PARAMETER LIST CONSISTING OF THE     *
*                 PUBLICATION NUMBER AND THE CLIST/REXX VARIABLE      *
*                 NAME SEPARATED BY A COMMA.                          *
*                                                                     *
*        INPUT(3) TWO WORD PARAMETER LIST WITH THE FIRST WORD         *
*                 BEING THE ADDRESS OF THE 12 CHARACTER PUBLICATION   *
*                 NUMBER (PADDED WITH BLANKS) AND THE SECOND WORD     *
*                 BEING THE ADDRESS OF THE 12 BYTE RETURN AREA.       *
*                                                                     *
*        NOTE -   IN ORDER FOR THE PROGRAM TO DETECT THE VARIOUS      *
*                 TYPES OF PARAMETER LIST, IT IS REQUIRED THAT THE    *
*                 LAST PARAMETER BE FLAGGED WITH THE HIGH ORDER       *
*                 BIT ON.                                             *
*                                                                     *
*        OUTPUT - SPECIFIED VARIABLE NAME SET TO THE APPROPRIATE      *
*                 PUBLICATION NUMBER OR SET TO "*999" FOLLOWED        *
*                 BY 8 CHARACTERS OF THE PUBLICATION NUMBER IF        *
*                 IT CANNOT BE CONVERTED.                             *
*                                                                     *
*                 RETURN CODE 0 - VALID PUBLICATION - VARIABLE SET    *
*                 RETURN CODE 4 - INVALID PUBLICATION VALUE           *
*                 RETURN CODE 8 - NOT WITHIN A CLIST                  *
*                 RETURN CODE 12 - SERIOUS ERROR IN PROGRAM           *
*                 RETURN CODE 16 - UNABLE TO LOCATE DEFINITION MODULE *
*                                                                     *
*        IF THE PROGRAM DETECTS THAT THE PUBLICATION NUMBER IS A      *
*        UNIVERSAL SALES MANUAL PUBLICATION, IT WILL INVOKE           *
*        CCCBKDEF TO OBTAIN THE CURRENT USM LEVEL.                    *
*                                                                     *
*        ATTRIBUTES - REENTRANT, REFRESHABLE, AMODE 31, RMODE ANY,    *
*                     UNAUTHORIZED                                    *
*                                                                     *
***********************************************************************
         EJECT
*
CCCBKPUB CSECT
CCCBKPUB AMODE 31
CCCBKPUB RMODE ANY
*
         USING CCCBKPUB,R15
         B     AROUNDID
         DC    AL1(33)
         DC    CL8'CCCBKPUB'
         DC    CL8'V 1.1.0'
         DC    CL8'&SYSDATE'
         DC    CL8' &SYSTIME'
AROUNDID DS    0H
         STM   R14,R12,12(R13)     SAVE THE REGISTERS
*
         LR    R12,R15             LOAD REGISTER 12 WITH ENTRY
         DROP  R15
         USING CCCBKPUB,R12        ESTABLISH ADDRESSABILITY
*
         LR    R8,R1               LOAD REGISTER 8 TO PRESERVE PARMADDR
*
         LA    R0,WORKLENG         LOAD LENGTH OF GETMAINED AREA
         GETMAIN RU,LV=(0),LOC=(BELOW,ANY)
         LR    R14,R1              COPY FOR THE MOVE LONG
         LA    R15,WORKLENG        GET THE LENGTH
         SLR   R3,R3
         MVCL  R14,R2              CLEAR THE AREA
*
         ST    R13,4(,R1)          STORE ADDRESS OF PREVIOUS
*
         ST    R1,8(,R13)          STORE ADDRESS OF CURRENT
*
         LR    R13,R1              LOAD REGISTER 13 WITH SAVEAREA
*
         USING WORKAREA,R13        ESTABLISH ADDRESSABILITY
*
         MVI   MODEFLAG,0          INITIALIZE THE MODE FLAG
*
         MVI   VARINAME,C' '       BLANK OUT THE VARIBALE NAME BUF
         MVC   VARINAME+1(L'VARINAME-1),VARINAME
*
         MVI   PUBNOIN,C' '        PRE-BLANK OUT THE
         MVC   PUBNOIN+1(L'PUBNOIN-1),PUBNOIN INPUT PUB NUMBER
*
         MVI   PUBNOOUT,C' '       PRE-BLANK OUT THE
         MVC   PUBNOOUT+1(L'PUBNOOUT-1),PUBNOOUT RETURN DATA FIELD
*
         XC    RETCODE,RETCODE     ASSUME GOOD RETURN CODE
*
         TM    0(R8),X'80'         TEST FOR ONE WORD PARM LIST
         BO    CALLPARM            IF SO, THIS IS A CALLED PARAMETER
         TM    4(R8),X'80'         TEST FOR A TWO WORD PARAMETER LIST
         BO    PGMPARM             IF SO, THIS IS A PROGRAM PARM
*
         EJECT
***********************************************************************
*                                                                     *
*        BUILD PARSE PARAMETER LIST                                   *
*        INITIALIZE OUTPUT DATA CONTROL BLOCKS IN WORKAREA            *
*                                                                     *
***********************************************************************
*
CMDPARM  DS    0H
         OI    MODEFLAG,MODECMD    INDICATE WE HAVE A TSO CPPL
*
         USING CPPL,R8             ESTABLISH ADDRESSABILITY TO CPPL
*
         LA    R4,PPLSECT          LOAD ADDRESS OF PARSE PARAMETER
         USING PPL,R4              ESTABLISH ADDRESSABILITY TO PPL
*
         L     R1,CPPLUPT          LOAD POINTER TO USER PROFILE
         L     R2,CPPLECT          LOAD POINTER TO ENVIRONMENT
*                                  CONTROL TABLE FROM CPPL
         SLR   R3,R3               ZERO REGISTER 3
         ST    R3,ECB              STORE REGISTER AS ECB FOR PPL
         LA    R3,ECB              LOAD ADDRESS OF ECB
         STM   R1,R3,PPLSECT       STORE ADDRESS OF UPT, ECT, AND
*                                  ECB IN PPL
         MVC   PPLPCL,PCLADDR      MOVE POINTER TO PARAMETER
*                                  CONTROL LIST INTO PPL
         LA    R2,PARSBACK         LOAD ADDRESS OF FULLWORD TO
*                                  CONTAIN ADDRESS OF PDE RETURNED
*                                  BY PARSE
         ST    R2,PPLANS           STORE POINTER TO RETURN ADDRESS
         MVC   PPLCBUF,CPPLCBUF    MOVE POINTER TO COMMAND BUFFER
*                                  INTO PPL
         LA    R2,PPLUWA           LOAD ADDRESS OF USER WORK AREA
         ST    R2,PPLUWA           STORE ADDRESS IN PPL
         DROP  R4,R8               DROP ADDRESSABILITY
*
***********************************************************************
*                                                                     *
*        CALLTSSR TO PARSE (ENTRY NAME IKJPARS)                       *
*        ON RETURN PARSBACK -> PDL                                    *
*        HANDLE ALL ERROR CODES RETURNED BY PARSE                     *
*                                                                     *
***********************************************************************
*
         CALLTSSR  EP=IKJPARS,MF=(E,PPLSECT)
*                                  CALL PARS TO PARSE COMMAND
         LTR   R15,R15             SEE IF RETURN CODE IS ZERO
         BNZ   BADPARSE            NO, BAD NEWS
*
***********************************************************************
*                                                                     *
*        SET UP ADDRESSABILITY TO PDL                                 *
*           AND PROCESS THE PARAMETERS                                *
*                                                                     *
***********************************************************************
*
         L     R9,PARSBACK         LOAD POINTER TO PARSE ANSWER
         USING IKJPARMD,R9         ESTABLISH ADDRESSABILITY TO PDL
*
         LA    R6,PUBINPUT         LOAD POINTER TO PUB NUMBER PDE
         L     R5,0(R6)            LOAD POINTER TO PUB NUMBER DATA
         LH    R4,4(R6)            LOAD LENGTH OF PUB NUMBER DATA
         BCTR  R4,0                DECREMENT LENGTH FOR EXECUTE OF MVC
*
         EX    R4,PARSPUB          MOVE IN THE PUBLICATION NUMBER
*
         LA    R6,VARIABLE         LOAD POINTER TO VARIABLE PDE
         L     R5,0(R6)            LOAD POINTER TO VARIABLE DATA
         LH    R4,4(R6)            LOAD LENGTH OF VARIABLE
         ST    R4,NAMELENG         SAVE THIS LENGTH FOR SERVICE
         BCTR  R4,0                DECREMENT LENGTH FOR EXECUTE OF MVC
*
         EX    R4,PARSVARI         MOVE IN THE VARIBALE NAME
*
         DROP  R9                  DROP ADDRESSABILITY TO PDL
*
         B     GETPUBNO            AND GO DECODE THE REQUEST
*
PARSPUB  MVC   PUBNOIN(*-*),0(R5)  *** EXECUTE ONLY ***
PARSVARI MVC   VARINAME(*-*),0(R5) *** EXECUTE ONLY ***
*
         EJECT
***********************************************************************
*                                                                     *
*        PROGRAM HAS BEEN INVOKED WITH A ONE WORD PARAMETER LIST      *
*        IN THE FORMAT OF THE CALL/JCL PARAMETER.  SCAN FOR THE       *
*        PUBLICATION NUMBER AND RETURN VARIABLE NAME.                 *
*                                                                     *
***********************************************************************
*
CALLPARM DS    0H
         OI    MODEFLAG,MODECALL   INDICATE WE HAVE A CALL PROGRAM PARM
*
         L     R2,0(,R8)           LOAD THE ADDRESS OF THE PARM STRING
         LH    R3,0(,R2)           LOAD THE STRING LENGTH
         LA    R2,2(,R2)           POINT AT ACTUAL FIRST CHARACTER
*
         CH    R3,=H'3'            CHECK MINIMUM LENGTH
         BL    BADPARM             RETURN BAD NEWS IF TOO SMALL
*
         LR    R1,R2               SET SCAN POINTER
*
CALLLP1  DS    0H
         CLI   0(R1),C','          LOOK FOR DELIMITER
         BE    CALLCOMA            BRANCH WHEN FOUND
         LA    R1,1(,R1)           INCREMENT SCAN POINTER
         BCT   R3,CALLLP1          LOOP LOOKING FOR COMMA
         B     BADPARM             IF NOT COMMA, BAD NEWS
*
CALLCOMA DS    0H
         LR    R15,R1              COPY FOR LENGTH CALCULATION
         SR    R15,R2              CALCULATE LENGTH
         BNH   BADPARM             NOT GOOD IF ZERO (OR LESS!)
         CH    R15,=Y(L'PUBNOIN)   CHECK MAXIMUM LENGTH
         BH    BADPARM             ERROR IF TOO BIG
*
         BCTR  R15,0               DECREMENT FOR MVC INSTRUCTION
         EX    R15,CALLPUB         MOVE THE PUBLICATION NUMBER
*
         LA    R1,1(,R1)           INCREMENT PAST THE COMMA
         BCT   R3,*+8              DECREMENT THE COMMA
         B     BADPARM             ERROR IF COMMA THE LAST THING
*
         CH    R3,=Y(L'VARINAME)   CHECK REMAINING LENGTH
         BH    BADPARM             ERROR IF TOO BIG
         ST    R3,NAMELENG         SAVE THIS LENGTH FOR SERVICE
*
         BCTR  R3,0                DECREMENT THE LENGTH FOR MVC
         EX    R3,CALLVARI         MOVE THE VARIABLE NAME
*
         EX    R3,CALLTRT          SCAN FOR VALID CHARACTERS
         BNZ   BADPARM             ERROR ID ANY BAD ONES
*
         CLI   VARINAME,C'0'       MAKE SURE THAT FIRST CHARACTER IS
         BNL   BADPARM             NOT NUMERIC
*
         B     GETPUBNO            AND GO DECODE THE REQUEST
*
CALLPUB  MVC   PUBNOIN(*-*),0(R2)  *** EXECUTE ONLY ***
CALLVARI MVC   VARINAME(*-*),0(R1) *** EXECUTE ONLY ***
CALLTRT  TRT   VARINAME(*-*),ALPHANUM   *** EXECUTE ONLY ***
*
         EJECT
***********************************************************************
*                                                                     *
*        PROGRAM HAS BEEN INVOKED WITH A TWO WORD PARAMETER LIST      *
*        EXTRACT PUBLICATION NUMBER AND SAVE THE RETURN DATA          *
*        ADDRESS.                                                     *
*                                                                     *
***********************************************************************
*
PGMPARM  DS    0H
         OI    MODEFLAG,MODEPGM    INDICATE WE HAVE AN INTERNAL PROGRAM
*
         L     R1,0(,R8)           LOAD THE ADDRESS OF THE DEF KEY
         MVC   PUBNOIN,0(R1)       COPY THE PUBLICATION NUMBER
*
         L     R1,4(,R8)           LOAD THE RETURN DATA ADDRESS
         ST    R1,DATARETA         STORE THE RETURN DATA ADDRESS
*
         B     GETPUBNO            AND GO DECODE THE REQUEST
*
         EJECT
***********************************************************************
*                                                                     *
*        CONSTRUCT A PUBLICATION NUMBER                               *
*                                                                     *
***********************************************************************
*
GETPUBNO DS    0H
         LA    R14,12              LOAD MAXIMUM LENGTH
         LA    R15,PUBNOIN+L'PUBNOIN-1  POINT AT LAST CHARACTER
*
GETPUBLN CLI   0(R15),C' '         LOOK FOR THE BLANK
         BNE   GOTPUBLN            BRANCH IF NON BLANK
         BCTR  R15,0               BACK UP ONE CHARACTER
         BCT   R14,GETPUBLN        LOOP TO CALCULATE THE LENGTH
*
GOTPUBLN DS    0H
         LR    R0,R14              SAVE THE LENGTH
         SLL   R14,2               MULTIPLE LENGTH BY 4
*
         B     GETPUBTB(R14)       BRANCH BASED ON THE PUB NUMBER LENG
GETPUBTB DS    0H
         B     GETPUB00            ZERO LENGTH
         B     GETPUB01            LENGTH 1
         B     GETPUB02            LENGTH 2
         B     GETPUB03            LENGTH 3
         B     GETPUB04            LENGTH 4
         B     GETPUB05            LENGTH 5
         B     GETPUB06            LENGTH 6
         B     GETPUB07            LENGTH 7
         B     GETPUB08            LENGTH 8
         B     GETPUB09            LENGTH 9
         B     GETPUB10            LENGTH 10
         B     GETPUB11            LENGTH 11
         B     GETPUB12            LENGTH 12
*
GETPUB12 DS    0H
         MVC   PUBNOOUT,PUBNOIN    SET THE FULL PUBLICATION NUMBER
*
         OI    MODEFLAG,MODEWELL   INDICATE WELL-FORMED PUB NUMBER
*
         B     GOTPUBNO            CONTINUE
*
GETPUB11 DS    0H
         MVC   PUBNOOUT(10),PUBNOIN     SET THE PUBLICATION NUMBER
         MVI   PUBNOOUT+10,C'0'    ZERO PAD THE REVISION LEVEL
         MVC   PUBNOOUT+11(1),PUBNOIN+10 MOVE THE REVISION LEVEL
*
         OI    MODEFLAG,MODEWELL   INDICATE WELL-FORMED PUB NUMBER
*
         B     GOTPUBNO            CONTINUE
*
GETPUB10 DS    0H
         MVC   PUBNOOUT(10),PUBNOIN     SET THE PUBLICATION NUMBER
         MVC   PUBNOOUT+10(2),=C'00'    ZERO THE REVISION LEVEL
*
         B     GOTPUBNO            CONTINUE
*
GETPUB09 DS    0H
         MVC   PUBNOOUT(9),PUBNOIN      SET THE PUBLICATION NUMBER
         MVC   PUBNOOUT+9(3),=C'-00'    ZERO THE REVISION LEVEL
*
         B     GOTPUBNO            CONTINUE
*
GETPUB08 DS    0H
         CLC   PUBNOIN(5),=C'WDNHW'     CHECK FOR USM WITHDRAWN HDW
         BE    GETPUBWH            BRANCH IF SO
         CLC   PUBNOIN(5),=C'WDNSW'     CHECK FOR USM WITHDRAWN SOFTW
         BE    GETPUBWS            BRANCH IF SO
         CLC   PUBNOIN(5),=C'PRICE'     CHECK FOR THE USM PRICES MANUAL
         BE    GETPUBPR            BRANCH IF SO
*
         CLI   PUBNOIN,C'M'        CHECK FOR NEW HARDWARE MANUALS
         BE    GETPUBHM            BRANCH IF SO
         CLI   PUBNOIN,C'P'        CHECK FOR NEW SOFTWARE MANUALS
         BE    GETPUBSP            BRANCH IF SO
         CLI   PUBNOIN,C'S'        CHECK FOR NEW SOFTWARE MANUALS
         BE    GETPUBSS            BRANCH IF SO
*
         B     GETPUBXX            IF NOT, GO TO GENERAL BAD ROUTINE
*
GETPUB07 DS    0H
         CLC   PUBNOIN(5),=C'WDNHW'     CHECK FOR USM WITHDRAWN HDW
         BE    GETPUBWH            BRANCH IF SO
         CLC   PUBNOIN(5),=C'WDNSW'     CHECK FOR USM WITHDRAWN SOFTW
         BE    GETPUBWS            BRANCH IF SO
         CLC   PUBNOIN(5),=C'PRICE'     CHECK FOR THE USM PRICES MANUAL
         BE    GETPUBPR            BRANCH IF SO
*
         B     GETPUBXX            IF NOT, GO TO GENERAL BAD ROUTINE
*
GETPUB05 DS    0H
         CLC   PUBNOIN(2),=C'HW'   CHECK FOR THE USM HARDWARE MANUALS
         BE    GETPUBHW            BRANCH IF SO
         CLC   PUBNOIN(2),=C'SW'   CHECK FOR THE USM SOFTWARE MANUALS
         BE    GETPUBSW            BRANCH IF SO
*
         CLI   PUBNOIN,C'M'        CHECK FOR NEW HARDWARE MANUALS
         BE    GETPUBHM            BRANCH IF SO
         CLI   PUBNOIN,C'P'        CHECK FOR NEW SOFTWARE MANUALS
         BE    GETPUBSP            BRANCH IF SO
         CLI   PUBNOIN,C'S'        CHECK FOR NEW SOFTWARE MANUALS
         BE    GETPUBSS            BRANCH IF SO
*
         B     GETPUBXX            IF NOT, GO TO GENERAL BAD ROUTINE
*
GETPUB00 DS    0H
         LA    R0,1                INDICATE A LENGTH OF ONE
*
GETPUB06 DS    0H
*
GETPUB04 DS    0H
*
GETPUB03 DS    0H
*
GETPUB02 DS    0H
*
GETPUB01 DS    0H
         B     GETPUBXX            GO TO THE BAD BOOK ROUTINE
*
         EJECT
***********************************************************************
*                                                                     *
*        UNIVERSAL SALE MANUAL PRICES BOOKS                           *
*                                                                     *
***********************************************************************
*
GETPUBPR DS    0H
         OI    MODEFLAG,MODEUSM    INDICATE THAT THIS IS A USM BOOK
*
         MVC   PUBNOOUT(L'USMPREFX),USMPREFX MOVE IN THE USM PREFIX
         MVC   PUBNOOUT+L'USMPREFX(2),PUBNOIN  MOVE IN TWO CHARACTERS
         MVC   PUBNOOUT+L'USMPREFX+2(2),PUBNOIN+5 MOVE IN TWO MOVE
*
         CLI   PUBNOIN+7,C' '      CHECK FOR 8 CHARACTER PRICE MANUAL
         BE    GOTPUBNO            BRANCH IF SO
         MVC   PUBNOOUT+L'USMPREFX+3(1),PUBNOIN+7 MOVE IN LAST DIGIT
*
         B     GOTPUBNO
*
***********************************************************************
*                                                                     *
*        UNIVERSAL SALE MANUAL WITHDRAWN HARDWARE/SOFTWARE BOOKS      *
*                                                                     *
***********************************************************************
*
GETPUBWH DS    0H
GETPUBWS DS    0H
         TM    PUBNOIN+5,X'F0'     TEST FOR A NUMERIC
         BNO   GETPUBXX            IF NOT, IT'S BAD
         TM    PUBNOIN+6,X'F0'     TEST FOR A NUMERIC
         BNO   GETPUBXX            IF NOT, IT'S BAD
         TM    PUBNOIN+7,X'F0'     TEST FOR A NUMERIC
         BNO   GETPUBXX            IF NOT, IT'S BAD
*
         OI    MODEFLAG,MODEUSM    INDICATE THAT THIS IS A USM BOOK
*
         MVC   PUBNOOUT(L'USMPREFX),USMPREFX SET THE USM PREFIX
         MVC   PUBNOOUT+L'USMPREFX(1),PUBNOIN COPY THE "W" OF WDN
         MVC   PUBNOOUT+L'USMPREFX+1(1),PUBNOIN+3 COPY THE "S" OR "H"
         MVC   PUBNOOUT+L'USMPREFX+2(2),PUBNOIN+6 COPY THE NUMBER
*
         B     GOTPUBNO            CONTINUE
*
***********************************************************************
*                                                                     *
*        UNIVERSAL SALE MANUAL ORIGINAL HARDWARE/SOFTWARE BOOKS       *
*                                                                     *
***********************************************************************
*
GETPUBHW DS    0H
GETPUBSW DS    0H
         TM    PUBNOIN+2,X'F0'     TEST FOR A NUMERIC
         BNO   GETPUBXX            IF NOT, IT'S BAD
         TM    PUBNOIN+3,X'F0'     TEST FOR A NUMERIC
         BNO   GETPUBXX            IF NOT, IT'S BAD
         TM    PUBNOIN+4,X'F0'     TEST FOR A NUMERIC
         BNO   GETPUBXX            IF NOT, IT'S BAD
*
         OI    MODEFLAG,MODEUSM    INDICATE THAT THIS IS A USM BOOK
*
         MVC   PUBNOOUT(L'USMPREFX),USMPREFX SET THE USM PREFIX
         MVC   PUBNOOUT+L'USMPREFX(2),PUBNOIN COPY THE "HW" OR "SW"
         MVC   PUBNOOUT+L'USMPREFX+2(2),PUBNOIN+3 COPY THE NUMBER
*
         B     GOTPUBNO            CONTINUE
*
***********************************************************************
*                                                                     *
*        UNIVERSAL SALE MANUAL NEW HARDWARE/SOFTWARE BOOKS            *
*                                                                     *
***********************************************************************
*
GETPUBHM DS    0H
         TM    PUBNOIN+1,X'F0'     TEST FOR A NUMERIC
         BNO   GETPUBXX            IF NOT, IT'S BAD
         TM    PUBNOIN+2,X'F0'     TEST FOR A NUMERIC
         BNO   GETPUBXX            IF NOT, IT'S BAD
*
         B     GETPUBUS            SO SET USM
*
GETPUBSP DS    0H
GETPUBSS DS    0H
         TM    PUBNOIN+1,X'F0'     TEST FOR A NUMERIC
         BNO   GETPUBXX            IF NOT, IT'S BAD
         TM    PUBNOIN+2,X'F0'     TEST FOR A NUMERIC
         BNO   GETPUBXX            IF NOT, IT'S BAD
*
         B     GETPUBUS            SO SET USM
*
GETPUBUS DS    0H
         OI    MODEFLAG,MODEUSM    INDICATE THAT THIS IS A USM BOOK
*
         MVC   PUBNOOUT(L'USMPREFX),USMPREFX SET THE USM PREFIX
         MVC   PUBNOOUT+3(1),PUBNOIN    COPY THE M/P/S
         MVC   PUBNOOUT+L'USMPREFX(4),PUBNOIN+1 COPY IN THE ###%
*
         B     GOTPUBNO
*
***********************************************************************
*                                                                     *
*        THIS IS WHERE WE END UP IF WE CAN'T MAKE SENSE OF THE        *
*        PUBLICATION NUMBER WE'VE FOUND.                              *
*                                                                     *
***********************************************************************
*
GETPUBXX DS    0H
         MVC   PUBNOOUT(L'INVPREFX),INVPREFX SET INVALID PREFIX
         LR    R14,R0              COPY THE LENGTH AGAIN
         BCTR  R14,0               DECREMENT FOR THE MVC
         EX    R14,GETPUBNV        MOVE THE PUBLICATION NUMBER
         B     GOTPUBNO            CONTINUE
*
GETPUBNV MVC   PUBNOOUT+L'INVPREFX(*-*),PUBNOIN  *** EXECUTE ONLY ***
*
         EJECT
***********************************************************************
*                                                                     *
*        DETERMINE THE UNIVERSAL SALES MANUAL LEVEL (IF NEEDED)       *
*                                                                     *
***********************************************************************
*
GOTPUBNO DS    0H
         TM    MODEFLAG,MODEUSM    IS THIS A UNIVERSAL SALES MANUAL PUB
         BZ    NOUSM               BRANCH IF NOT
*
         TM    MODEFLAG,MODEWELL   DOES IT ALREADY HAVE A SUFFIX
         BO    NOUSM               BRANCH IF SO, DON'T OVERLAY
*
         LA    R0,USMCODE          POINT AT USMLEVEL CODE WORD
         ST    R0,DEFPARMS+0       STORE IN PARM LIST
         LA    R0,USMLEVEL         POINT AT RETURN DATA AREA
         ST    R0,DEFPARMS+4       STORE IN PARM LIST
         OI    DEFPARMS+4,X'80'    INDICATE END OF PARM LIST
*
         LOAD  EPLOC=DEFMODUL,ERRET=NODATA
*
         LR    R15,R0              COPY THE ENTRY POINT
         LA    R1,DEFPARMS         POINT AT PARAMETER LIST
         BASSM R14,R15             CALL THE DEFINITION MODULE
*
         LR    R3,R15              SAVE THE RETURN CODE
         DELETE EPLOC=DEFMODUL     DELETE THE DEFINITION MODULE
*
         LTR   R3,R3               CHECK IF USMLEVEL WAS SUCCESSFUL
         BNZ   NODATA              THIS IS NOT VERY GOOD
*
         MVI   PUBNOOUT+L'USMPREFX+4,C'-' SET THE DELIMITER
         MVC   PUBNOOUT+L'USMPREFX+5(2),USMLEVEL COPY THE RETURNED LVL
*
NOUSM    DS    0H
*
         EJECT
***********************************************************************
*                                                                     *
*        CONSTRUCT THE PARAMETER LIST FOR IKJCT441                    *
*                                                                     *
***********************************************************************
*
CRE8VARI DS    0H
         TM    MODEFLAG,MODEPGM    IS THIS A PROGRAM TO RETURN DATA TO
         BZ    GODOVARI            IF NOT, GO CREATE THE VARIABLE
*
         L     R15,DATARETA        LOAD THE RETURN DATA ADDRESS
         MVC   0(L'PUBNOOUT,R15),PUBNOOUT COPY THE RETURN DATA
         B     ALLDONE
*
GODOVARI DS    0H
         L     R3,CVTPTR           FIND CVT
         USING CVTMAP,R3
*
         L     R3,CVTTVT           FIND THE TSVT
         USING TSVT,R3
*
         LA    R0,TSVEUPDT
         ST    R0,ENTRYCDE
         LA    R0,ENTRYCDE
         ST    R0,CT441PRM+0
*
         LA    R0,VARINAME
         ST    R0,NAMEADDR
         LA    R0,NAMEADDR
         ST    R0,CT441PRM+4
*
         LA    R0,NAMELENG
         ST    R0,CT441PRM+8
*
         LA    R0,DATAADDR
         ST    R0,CT441PRM+12
*
         LA    R0,DATALENG
         ST    R0,CT441PRM+16
*
         LA    R0,TOKENPRM
         ST    R0,CT441PRM+20
         OI    CT441PRM+20,X'80'
*
         LA    R1,PUBNOOUT
         ST    R1,DATAADDR
*
         LA    R0,L'PUBNOOUT       LOAD OUTPUT DATA LENGTH
         AR    R1,R0               POINT PAST END OF STRING
*
CALCLOOP BCTR  R1,0                BACK UP TO THE PREVIOUS CHARACTER
         CLI   0(R1),C' '
         BH    CALCSTOR
         BCT   R0,CALCLOOP
*
         LA    R0,1
*
CALCSTOR DS    0H
         ST    R0,DATALENG
*
         LA    R1,CT441PRM         POINT AT PARM LIST
         L     R15,TSVTVACC        LOAD THE VARIABLE ACCESS RTN
         BALR  R14,R15             GO CALL VARIABLE ROUTINE
*
         LTR   R15,R15             TEST IF RETURN WAS GOOD
         BNZ   NOTCLIST            ASSUME WE AREN'T IN CLIST IF BAD
*
ALLDONE  DS    0H
         B     RETURN
*
         DROP  R3                  DONE WITH TSVT
*
         EJECT
***********************************************************************
*                                                                     *
*        ERROR CONDITIONS                                             *
*                                                                     *
***********************************************************************
*
NOTCLIST LA    R0,8                SET WE AREN'T IN A CLIST ENV
         ST    R0,RETCODE
         B     RETURN
*
BADPARM  DS    0H
BADPARSE LA    R0,12               SET SERIOUS ERROR
         ST    R0,RETCODE
         B     RETURN
*
NODATA   LA    R0,16               SET NO DATA MODULE FOUND
         ST    R0,RETCODE
         B     RETURN
*
***********************************************************************
*                                                                     *
*        CLEANUP AREAS GETMAINED BY PARSE,                            *
*           SET RETURN CODE, RESTORE REGISTERS AND                    *
*           RETURN TO CALLER                                          *
*                                                                     *
***********************************************************************
*
RETURN   DS    0H
         TM    MODEFLAG,MODECMD    IS THIS A TSO COMMAND
         BZ    NOPARSEF            BRANCH IF NOT
         IKJRLSA PARSBACK          RELEASE AREAS GETMAINED BY PARS
*
NOPARSEF DS    0H
         L     R2,RETCODE          LOAD THE RETURN CODE
*
         LR    R1,R13              LOAD ADDRESS OF GETMAINED AREA
         L     R13,4(,R13)         RELOAD ADDRESS OF PREVIOUS SAVE
*
         LA    R0,WORKLENG         LOAD LENGTH OF GETMAINED AREA
         FREEMAIN RU,LV=(0),A=(1)  FREE GETMAINED AREA
*
         LR    R15,R2              SET THE RETURN CODE
         L     R14,12(,R13)        LOAD REGISTER 14 WITH RETURN
         LM    R0,R12,20(R13)      RESTORE REGISTERS
         BSM   0,R14               RETURN
*
         EJECT
PATCH    DC    0D'0',32S(*)
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*
DEFMODUL DC    CL8'CCCBKDEF'       DATA INFORMATION PROGRAM
*
USMCODE  DC    CL16'USMLEVEL'      USM LEVEL CODE WORD
*
USMPREFX DC    C'ZUSM-'            USM PREFIX
*
INVPREFX DC    C'*999'             INVALID NUMBER PREFIX
*
LITERALS LTORG ,
*
PCLADDR  DC    V(PARMTAB)
*
ALPHANUM DC    256X'FF'            ALPHANUMERIC TEST TABLE
         ORG   ALPHANUM+C'$'
         DC    X'00'
         ORG   ALPHANUM+C'#'
         DC    X'00'
         ORG   ALPHANUM+C'@'
         DC    X'00'
         ORG   ALPHANUM+C'A'
         DC    9X'00'
         ORG   ALPHANUM+C'J'
         DC    9X'00'
         ORG   ALPHANUM+C'S'
         DC    8X'00'
         ORG   ALPHANUM+C'0'
         DC    10X'00'
         ORG   ,
*
         EJECT
************************ PARS PARAMETER LIST **************************
PARMTAB  IKJPARM  DSECT=IKJPARMD
PARMTAB  AMODE 31
PARMTAB  RMODE ANY
*
PUBINPUT IKJIDENT 'PUBNUMBER',UPPERCASE,                               X
               FIRST=ALPHA,OTHER=ANY,MAXLNTH=12,                       X
               PROMPT='PUBLICATION NUMBER',                            X
               HELP='IBM PUBLICATION NUMBER'
*
VARIABLE IKJIDENT 'VARIABLE',UPPERCASE,                                X
               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=32,                  X
               PROMPT='VARIABLE NAME',                                 X
               HELP='REXX/CLIST VARIABLE NAME'
         IKJENDP
*
         EJECT
************************ DSECTS (MAPPING MACROS) **********************
         PRINT NOGEN
         IKJCPPL
CPPLLEN  EQU   *-CPPL
*
         IKJPPL
PPLLEN   EQU   *-PPL
*
         CVT   DSECT=YES
*
         IKJTSVT
*
*
         PRINT GEN
*
WORKAREA DSECT
SAVEAREA DS    9D
RETCODE  DS    F
*
         DS    0D
PPLSECT  DS    0F
         ORG   PPLSECT+PPLLEN
*
ECB      DS    F
PARSBACK DS    F
*
CT441PRM DS    6F
*
ENTRYCDE DS    F
NAMEADDR DS    A                   ADDRESS OF VARIABLE NAME
NAMELENG DS    F                   LENGTH OF VARIABLE NAME
DATAADDR DS    A                   ADDRESS OF VARIABLE DATA
DATALENG DS    F                   LENGTH OF DATA
TOKENPRM DS    F
*
VARINAME DS    CL32                VARIABLE NAME FIELD
*
PUBNOIN  DS    CL12                INPUT PUBLICATION NUMBER
PUBNOOUT DS    CL12                RETURNED DATA FIELD
*
DATARETA DS    A                   ADDRESS OF THE RETURN DATA
*
DEFPARMS DS    2A                  PARM LIST FOR DEFINITION MODULE
*
USMLEVEL DS    CL64                RETURNED DATA FROM DEFINITION SUB
*
MODEFLAG DS    X                   PROGRAM MODE
MODECMD  EQU   X'80'               INVOKED AS A TSO COMMAND
MODECALL EQU   X'40'               INVOKED AS A CALLED PROGRAM
MODEPGM  EQU   X'20'               INVOKED AS AN INTERNAL CALL
MODEWELL EQU   X'02'               WELL FORMED PUB NUMBER
MODEUSM  EQU   X'01'               PUBLICATION IS PART OF THE USM
*
         DS    0D
WORKLENG EQU   *-WORKAREA
*
         END   CCCBKPUB
