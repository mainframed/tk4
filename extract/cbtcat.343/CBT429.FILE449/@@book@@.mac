                     WHAT DOCUMENTATION YOU GET

The Amdahl BookManager BookServer Front-end provides a means to search
a "catalog" of all book titles and publication numbers kept in MVS
BookManager Sequential Data Sets and link directly to the Book or
BookShelf containing the Book.  While obviously dependent on the title
of the Book, it eliminates the User having to know which BookShelf
contains the Book he or she is looking for.  It supports only Books and
BookShelves kept in MVS sequential Data Sets, not anything kept in an
HFS.

This data Set contains a subset(*) of the Amdahl BookManager Management
Utilities.  What is included are those pieces needed to run the
BookServer Front-end.

List of provided members:

BKMGRCPS - Assembler Macro
BKMGRHST - Assembler Macro
BKMGRINF - Assembler Macro
BKMGRLOC - Assembler Macro

BOOKMGRX - BookServer Front-end CGI (WebServer) REXX EXEC

BKMGRLPA - USERMOD to create LPA resident BookSERVER Load Module

BOOKCSA  - Started Task JCL to run CCCBKACE (Search Data CSA Load)
BOOKSACE - JCL to run CCCBKACE (Search Data CSA Load)
BOOKSEXT - JCL to build search data from BookShelf List(s) (QLSHELF)
REXXCOMP - JCL to compile the REXX Exec and copy it to an HFS

CCCBKACE - Assembler Source - Load Search Data into CSA
CCCBKCPS - Assembler Source - Cell Pool Subroutine
CCCBKDAT - Assembler Source - Data Variable Table
CCCBKDEF - Assembler Source - Data Table Lookup Subroutine
CCCBKDSN - Assembler Source - Data Set Name Generator Subroutine
CCCBKEXT - Assembler Source - Build Book/BookShelf Extract Data Set
CCCBKLOC - Assembler Source - Determine location of all Bkmgr Data Sets
CCCBKPUB - Assembler Source - Format Pub Number Subroutine
CCCBKSRV - Assembler Source - Search Program called by REXX EXEC
CCCLOCAT - Assembler Source - LOCATE TSO Command - bonus

I assume that you're capable of assembling programs, so I'm not
including sample assembly JCL.  Each program is linked by itself.
MACLIB and MODGEN are needed along with the Macros supplied above.

CCCBKCPS, CCCBKDAT, CCCBKDEF, CCCBKDSN, CCCBKPUB, and CCCBKSRV are
re-entrant and RMODE ANY. (So is CCCLOCAT, but it's included as a bonus
and is not really needed.)  CCCBKACE, CCCBKEXT, and CCCBKLOC are "main"
programs that are NOT re-rentrant and are RMODE 24 (AMODE 31).

Assemble and Link all the programs into a "BookManager Utility" Load
Library.  CCCBKEXT is unauthorized and can run from it.  CCCBKACE is
AUTHORIZED, so it (and CCCBKCPS which it loads as a subroutine) need
to be placed in an authorized library (that end-users should not have
access to).  CCCBKSRV should be placed in the LinkList or LPAList, as
it is used by the CGI REXX Exec.

BOOKMGRX is a REXX Exec that will require installation specific
customization (unless you like to see some missing GIFs and bad links).
It (or a complied version of it) needs to end up in a HFS that will be
mapped in directives in the WebServer HTTPD.CONF file.


Before going any farther....

This BookServer Front-end builds an ECSA Resident Catalog which is
anchored using the time-honored technique of using a SubSystem Control
Table (SSCT).  The default name of this SubSystem is "BKSV".  This value
is EQUated in the BKMGRCSA Macro (Label BKASSNAM).  If you want a
different SubSystem Name, change this equate and reassemble CCCBKACE and
CCCBKSRV.

There is no attempt made to create the "BKSV" SubSystem Control Table
dynamically if it doesn't exist.  You will need to update the IEFSSNxx
PARMLIB Member and then either re-IPL or use the SETSSI Command to
create it.

If you don't like this anchor technique and want to change it, go ahead.


Building the Book Catalog Data Set

The CCCBKEXT program uses the MVS BookManager "Master" BookShelf List
Data Set (specified by the QLSHELF setting in EOXVOPTS REXX Exec) to
construct the Book and BookShelf Catalog.  The BookShelf List Data Set
Name is specified as a parameter in the JCL used to execute CCCBKEXT.
The output Data Set is VB,259.  Sample JCL is provided in the BOOKSEXT
member.  Note that the output needs to be sorted in order to be
properly searchable.

The sample job is two steps.  The extract is to a temporary Data Set.
The sort of this temporary Data Set is output to a permanent extract
Data Set which will be used to create the in storage copy.


Building the In Storage Catalog

The CCCBKACE program use the Book Catalog Data Set to create a Common
Storage copy of the Book Catalog (in Key 1 Storage) and anchor it in
the chosen SSCT.  This eliminates the I/O associated with reading the
Catalog Data Set (which in our case is 5 cylinders) for each and every
search.

This program, which is authorized since it needs to obtain CSA, can be
run as either a Batch Job or Started Task.  A sample of each is
provided.  We runs it as a Started Task specified in our COMMND00
PARMLIB member, so it runs at every IPL on every System.  In addition,
it can be run at any time to refresh the in storage Book Catalog
whenever updates have been made to the BookManager BookShelf List and
the Catalog Data Set rebuilt.  If a previous in storage Book Catalog
exists, the old one is freed and the new one built, so there should be
no lost CSA.


BookServer CGI REXX Exec

The BOOKMGRX REXX Exec and the CCCBKSRV program are the heart of the
BookServer Front-end. The REXX Exec (raw or compiled) must be placed
into an installation HFS directory that is mapped by an "Exec"
directive in the BookServer's HTTPD.CONF file (more on that later).
The sample REXX Compile job shows how to place the compiled REXX
Exec (CEXEC) into the chosen HFS.  Whatever name is chosen for the
file in the HFS (compiled or not) will be part of the URL to invoke it
(and like everything in UNIX is CaSe SeNsItIvE).

This REXX Exec will need customization for your installation, as it
has a whole lot of Amdahl specific GIFs and links.  They are "fairly"
isolated, but it's your responsibility to find and fix 'em.  Also,
the BookServer URLs are different based on the level of the BookServer
you are running and whether or not you have moved the BookServer CGI
Load Module (bookmgr.exe) into LPA (as described in my SHARE
presentation and included as a Local Mod).  This, too, will have to
be changed.

The CCCBKSRV program is invoked by the REXX Exec to perform the actual
search of the in storage Book Catalog and return the results in a pool
of REXX stem variables.  Because this program is invoked using the
"address LINKMVS" REXX statement, it needs to be available to whatever
Address Space the REXX Exec runs in.  The easiest way to accomplish
this is to place it in a Link List Data Set or (since it's re-entrant
and RMODE ANY) an LPA List Data Set.  This program is unauthorized
and needs no special attributes.


HTTPD.CONF Updates

So, you've assembled the programs, stashed the REXX Exec, and created
the in storage Book Catalog.  Now you need to get the BookServer
WebServer to invoke the REXX Exec CGI.  To do this, you need to add
directives to the HTTPD.CONF (or whatever you've called it) file that
is used by the BookServer's WebServer.

You've already had to add "Pass" and "Exec" directives to this file
for the BookServer itself, so you (or at least someone in your
installation) are somewhat familiar with this process.  For purposes
of the samples provided below, let's assume the following:

     The main BookServer Front-end Directory is: '/BookServer'
     The CGI BookServer Front-end Directory is: '/BookServer/cgi'
     BookManager Data Sets all start with 'CCCPUBS.' (needed for PDFs)
     The URL "code" for the Front-end CGI is: '/bookmanager-cgi'
     The URL "code" for the Front-end files is: '/bookmanager'
     The REXX Exec HFS file name is: 'bookmanager'

(Again, note the UNIX is very case sensitive.)

So stick the following two lines in the HTTPD.CONF after the lines
that were inserted for the IBM BookServer:

Exec            /bookmanager-cgi/*   /BookServer/cgi/*
Pass            /bookmanager/*   /BookServer/*

So given all of the above, a URL of:

http://your.mvs.domain.name:portnumber/bookmanager-cgi/bookmanager/

will bring up the BookServer Front-end, from which everything else is
self-explanatory (yah, right!). The trailing slash in the URL is
required for some browsers and not for others, but it doesn't hurt to
always code it.

Assuming that the User has the Adobe Acrobat Plug-in in his or her
browser, and that you have uploaded BOOK PDF files to MVS (as binary
files into any suitable VB format Data Set) using the same Data Set Name
as the BookManager Book with 'PDF' instead of 'BOOK' as the lowest
level qualifier, the BookServer Front-end is capable of allowing the
User to view the PDF file for a Book which has been located via the
search.

To be able to view these PDF files, you need to have a couple of
"Service" Directives in the HTTPD.CONF File.  Find where IBM stuck the
sample commented out "mvsds.so" Service Statement and add the following
two statements:

Service /bookmanager-pdf/'cccpubs.*      (continued on next line)
/usr/lpp/internet/bin/mvsds.so:mvsdsGet/'cccpubs.*
Service /bookmanager-pdf/'CCCPUBS.*      (continued on next line)
/usr/lpp/internet/bin/mvsds.so:mvsdsGet/'CCCPUBS.*


Disclaimer

As usual, Amdahl Corporation (and I) take no responsibility for how
well this works in your environment and any problems it might cause.
Suffice it to say, it does work, as our Users use it regularly.  (I
also think that it is a good introduction to CGI programming in REXX
with the IBM WebServer.)

Feel free to contact me with questions, problems, and suggestions, but
please keep in mind that I do have other things to do.


Keith E. Moe
Amdahl Corporation
1250 E. Arques Ave
M/S 383
Sunnyvale, Ca  94088-3470
(408) 746-6386
Keith_Moe@notes.amdahl.com

