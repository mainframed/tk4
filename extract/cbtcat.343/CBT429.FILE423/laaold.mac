LAA      TITLE 'LAA - EXPANDED, DEFAULT-ONLY, ALLOCATION LISTER.'
*%A PPLINK NOTEST
         SPACE 1
***********************************************************************
*                                                                     *
*  COPYRIGHT (C) 1978 BY BROIDO COMPUTER CONSULTING.  ALL RIGHTS      *
*  RESERVED EXCEPT:                                                   *
*                                                                     *
*  PARTICULAR LICENSE IS GRANTED TO DISTRIBUTE THIS PROGRAM FREE      *
*  OF CHARGE, BUT IT MUST NOT BE SOLD.  A SERVICE CHARGE FOR          *
*  HANDLING A COLLECTION OF SOFTWARE OF WHICH THIS IS A PART,         *
*  ON THE OTHER HAND, IS APPROPRIATE.                                 *
*                                                                     *
*                                  BROIDO COMPUTER CONSULTING         *
*                                  104 MILLS STREET                   *
*                                  MORRISTOWN, N.J.  07960            *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
*        LAA -  PROGRAM TO LIST ALLOCATION IN A FASHION SIMILAR TO    *
*               LISTALC COMMAND.  THIS COMMAND TAKES NO OPERANDS,     *
*               AND PRINTS THE DATASETS, WITH DDNAMES, IN A MORE      *
*               LINEWISE-COMPACT WAY THAN LISTALC.                    *
*                                                                     *
*                                  JEFFREY R. BROIDO - 20 FEB 78      *
*                                  COLGATE-PALMOLIVE, PISCATAWAY.     *
*                                                                     *
***********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
*        MODIFIED 1 FEB 79 AT J & J MIC TO TAKE A K OPERAND TO        *
*                 CLEAR THE SCREEN OF A DISPLAY TUBE BEFORE           *
*                 EXECUTION.                                          *
*                                  JRB                                *
*                                                                     *
***********************************************************************
         SPACE 3
LAA      CSECT
         REGS
         USING LAA,R15             (ESTABLISH TEMPORARY BASE).
         B     BEGIN               SKIP OVER HEADER.
HEAD0    DC    AL1(HEADL)          EXCLUSIVE LENGTH OF HEADER.
HEAD     DC    C' LAA - &SYSDATE - &SYSTIME -'
         DC    C'COPYRIGHT (C) BROIDO COMPUTER CONSULTING '
         DC    C'1978 - '
         DC    C'ALL RIGHTS RESERVED'
HEADL    EQU   *-HEAD
         DROP  R15                 (DROP TEMPORARY BASE).
BEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         LR    R12,R15             COPY BASE.
         USING LAA,R12             (TELL ASSEMBLER).
         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.
         LA    R13,SAVE            POINT TO MY SAVE AREA.
         ST    R13,8(,R14)         CHAIN ...
         ST    R14,SAVE+4          ... SAVE AREAS.
         SPACE 1
*              LOCATE THE DSAB QUEUE.
         SPACE 1
         LTR   R1,R1               ANY CPPL OR PARM POINTER?
         BZ    LAASTART            B IF NOT.
         L     R2,0(,R1)           POINT TO BUFFER
         LTR   R2,R2               ANY?
         BZ    LAASTART            B IF NOT.
         LH    R3,0(R2)            LOAD LENGTH.
         LTR   R3,R3               ANY?
         BZ    LAASTART            B IF NOT.
         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOKATION?
         BE    LAACP
         LA    R2,2(,R2)           POINT TO PARM.
         B     PARM
LAACP    CH    R3,=H'4'            ANY PARM?
         BE    LAASTART            B IF NOT.
         AH    R2,2(,R2)           POINT TO ...
         LA    R2,4(,R2)           ... PARM.
PARM     OI    0(R2),C' '          UPPERCASE.
         CLI   0(R2),C'K'          CLEAR?
         BNE   LAASTART            B IF NOT.
         GTSIZE
         LTR   R0,R0               DISPLAY?
         BZ    LAASTART            B IF NOT.
         K     ,                   CLEAR SCREEN.
LAASTART L     R5,X'10'            POINT TO THE CVT.
         L     R5,0(,R5)           POINT TO TCB WORDS.
         L     R5,0(,R5)           POINT TO MY TCB.
         L     R5,X'B4'(,R5)       POINT TO MY JSCB.
         L     R5,X'140'(,R5)      POINT TO MY QDB FOR DSAB QUEUE.
*        L     R5,X'10'(,R5)       POINT TO MY FIRST DSAB.
         L     R5,X'C'(,R5)        POINT TO MY FIRST DSAB.
         MVI   OUT,X'40'           CLEAR ...
         MVC   OUT+1(OUTLEN-1),OUT ... OUTPUT AREA
         B     CKEND
*TLUP    L     R5,8(,R5)           POINT TO NEXT DSAB.
TLUP     L     R5,4(,R5)           POINT TO NEXT DSAB.
CKEND    LTR   R5,R5               END OF DSAB QUEUE?
         BNZ   CKDD                B IF NOT
         L     R13,SAVE+4             E
         LM    R14,R12,12(R13)          X
         SR    R15,R15                    I
         BR    R14                          T
CKDD     L     R2,16(,R5)          POINT TO ASSOCIATED TIOT ENTRY.
         MVI   DISP,X'40'                CLEAR DISP, TFLAG ...
         MVC   DISP+1(OUTEND-DISP),DISP  ... AND DSN.
         MVC   DDN,4(R2)           MOVE DDNAME
         MVC   DEV,=CL6'Term'      MOVE DEVICE NAME OF TERM.
         TM    3(R2),X'20'         IS IT A TERMINAL?
         BO    OUTPUT              B IF YES.
         MVC   DEV,=CL6'Sysout'    MOVE DEV NAME OF SYSOUT.
         TM    3(R2),X'02'         SUBSYSTEM DATASET?
         BZ    MVDSN               B IF NOT.
         MVC   DSN(6),=C'Class='   MOVE SYSOUT CLASS GRAPHIC.
         ICM   R4,7,12(R2)         LOAD JFCB HEADER ADDRESS.
         MVC   DSN+6(1),X'120'(R4) MOVE SYSOUT CLASS FROM SIOT.
* NOTE THAT THE ABOVE INSTRUCTION REPRESENTS ABOUT AS SLOPPY A
* PRACTICE AS I'VE EVER USED.  IT DEPENDS UPON THE SIOT FOLLOWING
* THE JFCB IN STORAGE AND THE JFCB LENGTH REMAINING CONSTANT.
*
         B     OUTPUT              CONTINUE.
MVDSN    ICM   R4,7,12(R2)         LOAD JFCB HEADER ADDRESS.
         MVC   DSN,16(R4)          MOVE DATASET NAME.
         CLC   =C'NULLFILE ',DSN   DUMMY DATASET?
         BNE   MVVOL               B IF NOT.
         MVC   DEV,=CL6'Dummy'     MOVE DUMMY GRAPHIC.
         B     CKTCAM              CONTINUE.
MVVOL    MVC   DEV,X'86'(R4)       MOVE VOLUME NAME.
CKTCAM   TM    3(R2),X'08'         TCAM?
         BZ    CKVIO               B IF NOT
         MVC   DSN(11),=C'TCAM Queue:'
         MVC   DEV,=CL6'Queue'     MOVE DEV NAME OF QUEUE (TCAM).
         MVC   DSN+12(8),16(R4)    MOVE DATASET NAME AGAIN.
         B     OUTPUT              CONT.
CKVIO    TM    X'AF'(R4),X'04'     VIO DATASET?
         BZ    GETUNIT             B IF NOT.
         MVC   DEV,=CL6'Vio'       MOVE VIO GRAPHIC.
         B     CKDISP              CONT.
GETUNIT  CLC   DEV,=CL6' '         HAS DEVICE FIELD BEEN FILLED?
         BNE   CKDISP              B IF YES.
         SR    R1,R1               LOAD ...
         ICM   R1,7,X'11'(R2)      ... POINTER TO UCB.
         MVC   DEV,=CL6'(###)'     MOVE DEVICE GRAPHIC.
         MVC   DEV+1(3),X'D'(R1)   MOVE DEVICE ADDRESS.
CKDISP   MVC   DISP,=C'SHR'        MOVE SHR GRAPHIC.
         TM    X'67'(R4),X'08'     SHARED?
         BO    CKTEMP              B IF YES
         MVC   DISP,=C'NEW'        MOVE NEW GRAPHIC.
         TM    X'67'(R4),X'C0'     TEST OLD-NEW BITS.
         BO    CKTEMP              B IF NEW.
         MVC   DISP,=C'OLD'        MOVE OLD GRAPHIC.
         TM    X'67'(R4),X'40'     OLD?
         BO    CKTEMP              B IF YES.
         MVC   DISP,=C'MOD'        MOVE MOD GRAPHICS.
CKTEMP   TM    X'22'(R5),X'40'     PERMANENT ALLOCATION?
         BO    NOTTEMP             B IF YES.
         MVI   TFLAG,C'*'          MOVE TEMP. ALLOCATION FLAG.
NOTTEMP  CLI   X'3C'(R4),C' '      MEMBER OR GENERATION?
         BE    OUTPUT              B IF NOT.
MEM      LA    R1,8                LD MAX MEMBER LEN FOR BCT.
         LA    R2,X'3C'(R4)        PT TO MEMBER.
MEMLUP   CLI   0(R2),C' '          CHAR BLANK?
         BE    MEMLCALC            B IF YES.
         LA    R2,1(,R2)           BUMP POINTER.
         BCT   R1,MEMLUP
MEMLCALC LA    R3,8                CALC ...
         SR    R3,R1               ... MEMBER LENGTH.
         LA    R1,76-(OUT-DSN)     GENERATE ...
         SR    R1,R3               ... DSN SCAN INDEX.
         LA    R2,DSN              POINT TO DSN.
DFBLUP   CLI   0(R2),C' '          CHAR BLANK?
         BE    DFBSET              B IF YES.
         LA    R2,1(,R2)           BUMP POINTER.
         BCT   R1,DFBLUP           LOOK AT ANOTHER CHAR.
         B     OUTPUT              NO ROOM FOR MEMBER.  SKIP IT.
DFBSET   MVI   0(R2),C'('          MOVE PAREN.
         EX    R3,MVMEMB           MOVE MEMBER (+ ONE CHAR).
         LA    R2,0(R2,R3)         BUMP PTR.
         MVI   1(R2),C')'          MOVE PAREN.
OUTPUT   TPUT  OUT,OUTLEN          OUTPUT LINE
         B     TLUP                LOOP.
SAVE     DS    9D
MVMEMB   MVC   1(*-*,R2),X'3C'(R4) EXECUTED.
OUT      EQU   *
DDN      DS    CL8,3X
DEV      DS    CL6,3X
DISP     DS    CL3,2X
TFLAG    DS    C
DSN      DS    CL44
OUTEND   EQU   *
OUTLEN   EQU   *-OUT
         END   LAA
