DYNALLOC TITLE 'Do dynamic allocation - faster than TSO'
*   +---------------------------------------------+
*   ×  DYNALLOC - Ken MacKenzie - August 1999     ×
*   +---------------------------------------------+
*   ×  Limited support can be obtained by         ×
*   ×  contacting the author at:                  ×
*   ×    ken.mackenzie@tesco.net                  ×
*   ×         - or -                              ×
*   ×    ken.mackenzie@talk21.com                 ×
*   +---------------------------------------------+
*   ×  This routine, which is designed to be      ×
*   ×  called as a REXX function, allocates a     ×
*   ×  list of datasets to a ddname.  All         ×
*   ×  datasets are fully-qualified, assumed to   ×
*   ×  exist already and are allocated as         ×
*   ×  "DISP=SHR".                                ×
*   +---------------------------------------------+
*   ×                                             ×
*   × +-----------------------------------------+ ×
*   × ×  IT IS *NOT* A RE-WRITE OF THE TSO      × ×
*   × ×  ALLOC COMMAND.                         × ×
*   × +-----------------------------------------+ ×
*   ×                                             ×
*   +---------------------------------------------+
*   ×  Sample call:                               ×
*   ×    ddname = 'MYDD'                          ×
*   ×    dslist = 'A.FILE B.FILE C.FILE D.FILE'   ×
*   ×    x = 'DYNALLOC'(dsname, dslist)           ×
*   +---------------------------------------------+
*   ×  Return information:                        ×
*   ×    This function returns the return-code    ×
*   ×    from the SVC99 call                      ×
*   ×         - or -                              ×
*   ×    -1 if no ddname is supplied              ×
*   ×    -2 if no dataset list is supplied        ×
*   ×    -3 if there are more than 2 parameters   ×
*   +---------------------------------------------+
*   ×  Additional variables set:                  ×
*   ×    S99INFO & S99REASON are set to the       ×
*   ×    appropriate values as described in the   ×
*   ×    "Authorized Assembler Services Guide"    ×
*   ×    manual.                                  ×
*   ×                                             ×
*   ×    S99MSG1 & S99MSG2 are set to the first   ×
*   ×    and second level messages in the event   ×
*   ×    of a non-zero return code from SVC99     ×
*   +---------------------------------------------+
         SPACE 1
DYNALLOC CSECT
DYNALLOC AMODE 31
DYNALLOC RMODE ANY
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         USING *,R12
         SPACE 3
         SAVE  (14,12),,*
         LR    R12,R15
         LR    15,13                    * CHAIN
         LA    13,SAVEAREA              * THE
         ST    13,8(15)                 * SAVE
         ST    15,4(13)                 * AREAS.
         B     A000                     * BRANCH AROUND
*
         ASMTSTMP
*
SAVEAREA DC    18A(0)                   * SAVE AREA.
*
         EJECT
A000     DS    0H
         MVI   DYNFLAG,C'N'            Show that we've done nothing
         USING EFPL,R1                 Address EFPL
         L     R11,EFPLEVAL            Get address of...
         L     R11,0(,R11)             ...and address REXX's EVALBLOCK
         ST    R11,$EVALBLOCK          (Save it)
         USING EVALBLOCK,R11           Register 11 is EVALBLOCK base
         MVC   EVALBLOCK_EVLEN,=X'80000000'
         LR    R10,R0                  Get address of environment block
         USING ENVBLOCK,R10            Register 10 is ENVBLOCK base
         L     R9,ENVBLOCK_WORKBLOK_EXT Get address of workblock
*                                                          extension
         L     R9,ENVBLOCK_IRXEXTE     Get address of vector block
         USING IRXEXTE,R9              Register 9 is IRXEXTE base
         MVC   $IRXEXCOM,IRXEXCOM      Get variable routine address
         L     R8,EFPLARG              Address REXX's Parsed Argument
*                                                     List
         USING ARGTABLE_ENTRY,R8
         ST    R8,$EFPLARG             (Save Arglist Address)
         CLC   ARGTABLE_ARGSTRING_PTR,ARGTABLE_END Any DDNAME parm?
         BNE   A001                    Yes ... good --->
         XR    R15,R15
         BCTR  R15,0                   No ... exit with...
         B     A999                    ...return code -1
A001     EQU   *
         L     R7,ARGTABLE_ARGSTRING_PTR
         ST    R7,$DDPARM              Save Address of DDname
         L     R7,ARGTABLE_ARGSTRING_LENGTH
         ST    R7,#DDLEN               Save Length of DDname
         LA    R8,ARGTABLE_NEXT        Address next argument
         CLC   ARGTABLE_ARGSTRING_PTR,ARGTABLE_END Any DSNAME parameter
         BNE   A002                    Yes ... good --->
         XR    R15,R15
         BCTR  R15,0                   No ... exit with...
         BCTR  R15,0                   ...wait for it...
         B     A999                    ...return code -2
A002     EQU   *
         L     R7,ARGTABLE_ARGSTRING_PTR
         ST    R7,$DSNPARM             Store DSNs Address
         L     R7,ARGTABLE_ARGSTRING_LENGTH
         ST    R7,#DSNLEN              Store DSNs Length
         LA    R8,ARGTABLE_NEXT        Address next argument
         CLC   ARGTABLE_ARGSTRING_PTR,ARGTABLE_END Any more parameters?
         BE    A003                    No ... good --->
         XR    R15,R15
         BCTR  R15,0                   No ... exit with...
         BCTR  R15,0                   ...wait for it...
         BCTR  R15,0                   ...wait for it...
         B     A999                    ...return code -3
A003     EQU   *
         BAS   R14,GETDSNS             Were there any dsns?
         ICM   R15,B'1111',#DSNS
         BNZ   A004                    Yes ... carry on
         BCTR  R15,0                        exit...
         BCTR  R15,0                               with...
         B     A999                    ...return code -2
A004     EQU   *
         L     R6,#DSNS                Get number of DSNs
         MH    R6,=H'6'                Mult no. of dsn * 6
         A     R6,#DSNLEN              Add on the dsn lengths
         LA    R6,4(,R6)               Add on a bit for END marker
         ST    R6,@DSNLIST             Store length of DSN list
         STORAGE OBTAIN,LENGTH=(R6),LOC=ANY
         ST    R1,$DSNLIST             Store Address of DSN list
         L     R6,#DSNS                Get number of DSNs
         MH    R6,=H'14'               Mult no. of dsn * 14
         AH    R6,=H'6'                Add on a bit
         A     R6,#DDLEN               Add on the DD length
         ST    R6,@DDLIST              Store length of DD list
         STORAGE OBTAIN,LENGTH=(R6),LOC=ANY
         ST    R1,$DDLIST              Store address of DD list
         L     R8,$EFPLARG             Re-address REXX parameters
         L     R2,$DDLIST              Re-address DD list
         USING TU_DDLIST,R2
         MVC   TU_DD_T,=AL2(DALDDNAM)  Set type to "DD"
         MVC   TU_DDLIST_T,=AL2(DALDDNAM) (Set to type to "DD")
         L     R6,#DSNS                Get no. of DSNs
         STH   R6,TU_DDLIST_#          Store in no. of DDs
         L     R7,ARGTABLE_ARGSTRING_PTR * Address DD name
         L     R6,ARGTABLE_ARGSTRING_LENGTH * Get DD length
         STH   R6,TU_DD_L              Save DD length in Text Unit
         BCTR  R6,0                    Less 1 for "EX"
         EX    R6,MOVEDD               Move DD name
         B     A005                    Go for the DSNs
MOVEDD   MVC   TU_DD_$(0),0(R7)        Move DDNAME ("EX"ed instr.)
A005     EQU   *
         L     R3,$DSNLIST             Re-address (SVC99) DSN list
         L     R8,$DSNADDR             Re-address DSN List
A006     EQU   *
         CLC   ARGTABLE_ARGSTRING_PTR,ARGTABLE_END End of arguments?
         BE    A007                    No more entries --->
         USING TU_DSN,R3
         MVC   TU_DSN_T,=AL2(DALDSNAM) Set TU type to DSNAME
         MVC   TU_DSN_#,=H'1'          Set number to 1
         L     R7,ARGTABLE_ARGSTRING_PTR * Get DSN address
         L     R6,ARGTABLE_ARGSTRING_LENGTH * Get DSN length
         STH   R6,TU_DSN_L             Store length in Text Unit
         BCTR  R6,0                    -1 for "EX"
         EX    R6,MOVEDSN              Move the DSN
         LA    R3,7(R6,R3)             Address next (SVC99) DSN
         LA    R8,ARGTABLE_NEXT        Address next DSN
         B     A006                    Go back round
MOVEDSN  MVC   TU_DSN_$(0),0(R7)       Move DSNAME ("EX"ed instr.)
A007     EQU   *
         MVC   TU_DSN_T(4),=X'FFFF'    Indicate end of list
         L     R3,$DSNLIST             * Address DSN list
         BAS   R14,DDFREE              Go free the DD
A008     EQU   *
*   *************************************************
*   *  We're going to allocate the DSNs one by one  *
*   *  The first one is allocated to the supplied   *
*   *  DD name and the subsequent ones are          *
*   *  allocated to a system-supplied DD name       *
*   *************************************************
         CLC   TU_DSN_T(4),=X'FFFF'    * End of table?
         BE    A009                    * Yes ... get out
         BAS   R14,DSNALLOC            * Allocate requested DD
         LTR   R15,R15                 * Did it work OK?
         BNZ   A999                    * No ... better go
         LH    R4,TU_DD_L              Get DD length
         STH   R4,TU_DDLIST_L          Save in DD list
         BCTR  R4,0                    -1 for EX
         EX    R4,MOVEDD1              Move this DD to list
         LA    R2,3(R4,R2)             Address next DD list entry
         LH    R4,TU_DSN_L             Get DSN length
         BCTR  R4,0
         LA    R3,7(R4,R3)             Address next DSN
         MVC   TU_DD_T,=AL2(DALRTDDN)  Set DD Text unit
         MVC   TU_DD_L,=H'8'           To request a DD name
         B     A008                    Loop round
MOVEDD1  MVC   TU_DDLIST_$(0),TU_DD_$  Move DD name ("EX"ed instr.)
A009     DS    0H
         L     R2,$DDLIST              Re-address DD list
         CLC   TU_DDLIST_#,=H'1'       Is there only one DSN?
         BE    A999                    Yes ... let's leave
         BAS   R14,CONCAT              Else ... concatenate them
A999     EQU   *
         L     R11,$EVALBLOCK          Re-address REXX eval block
         MVC   RCSIGN,=H'0'            Assume "positive"
         CVD   R15,PACKDUBL            * Get return code
         UNPK  ZONEDEC,PACKDUBL        * Into zoned decimal
         LA    R8,ZONEDEC-1            * Address intermediate field
         LA    R3,RC                   * Address return code
         LA    R4,16                   * Set up maximum output length
A999A1   EQU   *
         LTR   R4,R4                   * Are we on the last character?
         BZ    A999A2                  * We'd better move a single char
         BCTR  R4,0                    * Prepare for potential 'EX'
         LA    R8,1(,R8)               * Point to current character
         TM    0(R8),X'0F'             * Is it a zero?
         BZ    A999A1                  * Yes ... get the next one
A999A2   EQU   *
         TM    ZONEDEC+L'ZONEDEC-1,X'30' * Is it negative?
         BNM   A999A3                  * No ... ignore sign
         MVC   RCSIGN,=H'1'
         MVI   0(R3),C'-'              * Move the sign in
         LA    R3,1(,R3)               * Point to next output char.
A999A3   EQU   *
         OI    ZONEDEC+L'ZONEDEC-1,X'F0' Switch the sign off
         EX    R4,EXEC5                * Move the answer out
         EX    R4,EXEC6                * Move the answer out
         LA    R4,1(,R4)               * Re-adjust to "real" length
         AH    R4,RCSIGN               * Add on sign adjustment
         ST    R4,EVALBLOCK_EVLEN
         LA    R9,RC_SHVBLOCK          * Address RC variable block
         USING SHVBLOCK,R9             * R9 is SHVBLOCK base
         XR    R2,R2
         CLI   DYNFLAG,C'Y'            * Has DYNALLOC been done?
         BNE   A999A                   * No ... this is last block
         LA    R2,S99ERROR_SHVBLOCK    * Yes ... get next SHVBLOCK addr
A999A    EQU   *
         ST    R2,SHVNEXT              * Chain to next SHVBLOCK
         LA    R2,=C'RC'               * Address RC variable name
         ST    R2,SHVNAMA              * Store address in SHVBLOCK
         LA    R2,2                    * Length of RC variable name
         ST    R2,SHVNAML              * Store length in SHVBLOCK
         ST    R4,SHVVALL              * Store length of RC value
         LA    R2,RC                   * Address RC variable value
         ST    R2,SHVVALA              * Store address in SHVBLOCK
         MVI   SHVCODE,SHVSTORE
         LA    R4,S99_AREA             * Re-address SVC99 Request block
         USING S99RBP,R4
         LA    R5,S99RBPTR+4           * Point four bytes beyond start
         USING S99RB,R5                * Est addressability to RB DSECT
*
*   *  If the dynamic allocation was performed, then there
*   *  are potentially 2 codes available.  These are S99ERROR
*   *  and S99INFO.  They are both held in binary coded decimal
*   *  (unsigned packed decimal) format          ×         ×
*                                                ×         ×
         UNPK  SVC99_ERROR(5),S99ERROR(3)        ×         ×
         NC    SVC99_ERROR(4),=4X'0F'            ×         ×
         TR    SVC99_ERROR,=C'0123456789ABCDEF'  ×         ×
         UNPK  SVC99_INFO(5),S99INFO(3)          ×         ×
         NC    SVC99_INFO(4),=4X'0F'             ×         ×
         TR    SVC99_INFO,=C'0123456789ABCDEF'   V         V
*
         LA    R9,S99ERROR_SHVBLOCK    * Address S99ERROR SHVBLOCK
         LA    R2,S99INFO_SHVBLOCK     * Chain forward to...
         ST    R2,SHVNEXT              * ...S99INFO SHVBLOCK
         LA    R2,=C'S99ERROR'         Set S99ERROR variable name
         ST    R2,SHVNAMA              Store in Name address
         LA    R2,8                    Set name length
         ST    R2,SHVNAML              Store in name length
         LA    R2,4                    Set value length
         ST    R2,SHVVALL              Save in value length
         LA    R2,SVC99_ERROR          Address Value
         ST    R2,SHVVALA              Store value
         MVI   SHVCODE,SHVSTORE        Indicate "Store"
*
         LA    R9,S99INFO_SHVBLOCK     Address S99INFO SHVBLOCK
         LA    R2,S99MSG1_SHVBLOCK     Indicate...
         ST    R2,SHVNEXT              ...no more SHVBLOCKs
         LA    R2,=C'S99INFO'          Set S99ERROR variable name
         ST    R2,SHVNAMA              Store in Name address
         LA    R2,7                    Set name length
         ST    R2,SHVNAML              Store in name length
         LA    R2,4                    Set value length
         ST    R2,SHVVALL              Save in value length
         LA    R2,SVC99_INFO           Address Value
         ST    R2,SHVVALA              Store value
         MVI   SHVCODE,SHVSTORE        Indicate "Store"
*
         LA    R9,S99MSG1_SHVBLOCK     Address S99INFO SHVBLOCK
         LA    R2,S99MSG2_SHVBLOCK     Indicate...
         ST    R2,SHVNEXT              ...no more SHVBLOCKs
         LA    R2,=C'S99MSG1'          Set S99ERROR variable name
         ST    R2,SHVNAMA              Store in Name address
         LA    R2,7                    Set name length
         ST    R2,SHVNAML              Store in name length
         LH    R2,DFBUFL1              Set value length
         S     R2,=F'4'
         ST    R2,SHVVALL              Save in value length
         LA    R2,DFBUFL1+4            Address Value
         ST    R2,SHVVALA              Store value
         MVI   SHVCODE,SHVSTORE        Indicate "Store"
*
         LA    R9,S99MSG2_SHVBLOCK     Address S99INFO SHVBLOCK
         XR    R2,R2                   Indicate...
         ST    R2,SHVNEXT              ...no more SHVBLOCKs
         LA    R2,=C'S99MSG2'          Set S99ERROR variable name
         ST    R2,SHVNAMA              Store in Name address
         LA    R2,7                    Set name length
         ST    R2,SHVNAML              Store in name length
         LH    R2,DFBUFL2              Set value length
         S     R2,=F'4'
         ST    R2,SHVVALL              Save in value length
         LA    R2,DFBUFL2+4            Address Value
         ST    R2,SHVVALA              Store value
         MVI   SHVCODE,SHVSTORE        Indicate "Store"
*
A999B    EQU   *
         L     R15,$IRXEXCOM           Call REXX variable routine
         CALL  (15),(@IRXEXCOM,0,0,RC_SHVBLOCK),VL
A999Z    EQU   *
         ICM   R2,B'1111',$DDLIST      Is there a DD list
         BZ    A999Z1                  No ... ignore
         L     R3,@DDLIST              Else ... free it
         STORAGE RELEASE,LENGTH=(R3),ADDR=(R2)
A999Z1   EQU   *
         ICM   R2,B'1111',$DSNLIST     Is there a DSN list
         BZ    A999Z2                  No ... ignore
         L     R3,@DSNLIST             Else ... free it
         STORAGE RELEASE,LENGTH=(R3),ADDR=(R2)
A999Z2   EQU   *
         ICM   R2,B'1111',$DSNADDR     Is there a DSN address list
         BZ    A999Z3                  No ... ignore
         L     R3,@DSNADDR             Else ... free it
         STORAGE RELEASE,LENGTH=(R3),ADDR=(R2)
A999Z3   EQU   *
         L     R13,4(,R13)             * Re-address HSA
         RETURN (14,12),T,RC=0         * All done
*
GETDSNS  DS    0H
*   ****************************************************
*   *  This routine separates the DSNs parameter into  *
*   *  separate DSN parameters.  The result is a       *
*   *  list of address/length pairs (like REXX uses)   *
*   *  terminated by HIGH-VALUES                       *
*   ****************************************************
         ST    R14,GETSAVE             Save return address
         L     R7,$DSNPARM             Address the DSN parm
         L     R6,#DSNLEN              Get the DSN length
         LA    R6,0(R7,R6)             Address end of parameter
         BCTR  R6,0
GET003   EQU   *
         CLI   0(R7),C' '              Is the first character a space
         BNE   GET005                  No ... carry on
         LA    R7,1(,R7)               Else ... increment address
         B     GET003                  And go round again
GET005   EQU   *
         ST    R7,$DSNPARM             Set "new" address of DSN
         CLI   0(R6),C' '              Is last character a space?
         BNE   GET007                  No ... carry on
         BCTR  R6,0                    Else ... decrement address
         B     GET005                  And go round again
GET007   EQU   *
         LA    R6,1(,R6)               Set "new" end address
         XR    R3,R3
GET010   DS    0H
         TRT   0(44,R7),TABLE_SPACE    Find next space
         BZ    GET020                  Branch if there wasn't one
         CR    R1,R6                   "Belt and Braces" ...
         BNL   GET020                  ... not found
         LR    R7,R1                   Address the Space
         TRT   0(44,R7),TABLE_CHAR     Find next valid DSN char
         BZ    GET020                  Branch if there isn't one
         CR    R1,R6                   "Belt and Braces" ...
         BNL   GET020                  ... not found
         LR    R7,R1                   Address start of DSN
         LA    R3,1(,R3)               Increment count of DSNs
         B     GET010                  Go for more
GET020   DS    0H
         LA    R3,1(,R3)               Increment count of DSNs
         ST    R3,#DSNS                Stash it away
         LA    R3,1(,R3)               Increment for STORAGE request
         MH    R3,=H'8'                Mult. by 8
         ST    R3,@DSNADDR             Save required length
         STORAGE OBTAIN,LENGTH=(R3),LOC=ANY
         ST    R1,$DSNADDR             Save "gotten" address
         LR    R8,R1
         L     R7,$DSNPARM             Re-address DSN parm
GET030   EQU   *
         ST    R7,ARGTABLE_ARGSTRING_PTR * Save address in list
         TRT   0(44,R7),TABLE_SPACE    Find next space
         BZ    GET040                  Branch if there isn't one
         CR    R1,R6                   "Belt and Braces" ...
         BNL   GET040                  ... not found
         SR    R1,R7                   Calculate the length
         ST    R1,ARGTABLE_ARGSTRING_LENGTH * Stash it away
         LA    R7,0(R1,R7)             Address the space
         TRT   0(44,R7),TABLE_CHAR     Find next valid DSN char
         BZ    GET040                  Branch if there isn't one
         CR    R1,R6                   "Belt and Braces" ...
         BNL   GET040                  ... not found
         LR    R7,R1                   Address next entry
         LA    R8,ARGTABLE_NEXT        Address next table entry
         B     GET030                  Go back round
GET040   DS    0H
         SR    R6,R7                   Set length of last one
         ST    R6,ARGTABLE_ARGSTRING_LENGTH * Store it
         LA    R8,ARGTABLE_NEXT        Address next entry
         MVC   ARGTABLE_ARGSTRING_PTR,=X'FFFFFFFF' * set to
         MVC   ARGTABLE_ARGSTRING_LENGTH,=X'FFFFFFFF' * HIGH-VALUES
GETDSNS_EXIT DS  0H
         L     R14,GETSAVE             Get return address...
         BR    R14                     ...and return
GETSAVE  DC    A(0)
*
DSNALLOC DS    0H
*   **********************************
*   *  Allocate individual datasets  *
*   **********************************
         USING TU_DSN,R3
         ST    R14,DSNRSAVE            Save the return address
         LA    R4,S99_AREA             Address our SVC 99 area
         MVI   DYNFLAG,C'Y'            Show that we attempted DYNALLOC
         USING S99RBP,R4               * Address SVC 99 Request Block
         LA    R5,S99RBPTR+4           * Point four bytes beyond start
         USING S99RB,R5                * Est addressability to RB DSECT
         ST    R5,S99RBPTR             * Make RBPTR point to Req Block
         OI    S99RBPTR,S99RBPND       * On high-order bit in RBPTR
         XC    S99RB(RBLEN),S99RB      * Zero out Req Block entirely
         MVI   S99RBLN,RBLEN           * Put RB length into LEN field
         MVI   S99VERB,S99VRBAL        * Set verb to ALLOCATE
         LA    R6,S99RB+RBLEN          * Point past RB to TUP list
         USING S99TUPL,R6              * Address Text Unit Pointers
         ST    R6,S99TXTPP             * Store TUP address in RB
*
         LA    R7,TU_DSN               * Address DSN parameter
         ST    R7,S99TUPTR             * ... and store in TUP list
*
         LA    R6,S99TUPL+4            * Get add of next TUP list entry
         LA    R7,TU_DISP              * Address DISP parameter
         ST    R7,S99TUPTR             * ... and store in TUP list
*
         LA    R6,S99TUPL+4            * Get add of next TUP list entry
         LA    R7,TU_STAT              * Address STAT parameter
         ST    R7,S99TUPTR             * ... and store in TUP list
*
         LA    R6,S99TUPL+4            * Get add of next TUP list entry
         LA    R7,TU_DD                * Address DD parameter
         ST    R7,S99TUPTR             * ... and store in TUP list
*
         LA    R6,S99TUPL+4            * Get add of next TUP list entry
         LA    R7,TU_PERMD             * Address DD parameter
         ST    R7,S99TUPTR             * ... and store in TUP list
*
         LA    R6,S99TUPL+4            * Get add of next TUP list entry
         LA    R7,TU_NONCONV           * Address DD parameter
         ST    R7,S99TUPTR             * ... and store in TUP list
*
         OI    S99TUPTR,S99TUPLN       * flag last parameter
*
         LR    R1,R4
         DYNALLOC ,                    Do the "business"
         LTR   R15,R15
         BZ    DSNALLOC_EXIT           If it worked, we get out->
         LA    R4,4(,R4)               Address the SVC99 RB
         ST    R4,DFS99RBP             Set address for DAIRFAIL
         ST    R15,SVC99RC             Set SVC99 retcode
         LA    R14,SVC99RC             Get address of it
         ST    R14,DFRCP               Set address for DAIRFAIL
         LA    R14,DAIRSWIT            Get address of DAIR switches
         ST    R14,DFIDP               Set address for DAIRFAIL
         LA    R14,ZEROES              Get address of word of zeroes
         ST    R14,DFJEFF02            Set IKJEFF02 addr Not Known
         LA    R14,DFBUFS              Get address for messages
         ST    R14,DFBUFP              Set address for DAIRFAIL
         LA    R1,DFPARMS              Address DAIRFAIL parameter
         LINK  EP=IKJEFF18             Call DAIRFAIL
         L     R15,SVC99RC             Retrieve SVC 99 retcode
DSNALLOC_EXIT DS 0H
         L     R14,DSNRSAVE            Get return address
         BR    R14                     And return
DDFREE   DS    0H
*   *************************************************
*   *  This routine frees up the requested DD name  *
*   *  giving us the same flexibility as the REUSE  *
*   *  parameter in the TSO ALLOC command           *
*   *************************************************
         USING TU_DSN,R3               Address Text Unit
         ST    R14,DSNRSAVE            Save the return address
         LA    R4,S99_AREA             Address the SVC99 area
         MVI   DYNFLAG,C'Y'            Show that we've tried DYNALLOC
         USING S99RBP,R4               * Address SVC 99 Request Block
         LA    R5,S99RBPTR+4           * Point four bytes beyond start
         USING S99RB,R5                * Est addressability to RB DSECT
         ST    R5,S99RBPTR             * Make RBPTR point to Req Block
         OI    S99RBPTR,S99RBPND       * On high-order bit in RBPTR
         XC    S99RB(RBLEN),S99RB      * Zero out Req Block entirely
         MVI   S99RBLN,RBLEN           * Put RB length into LEN field
         MVI   S99VERB,S99VRBUN        * Set verb to UNALLOCATE
         LA    R6,S99RB+RBLEN          * Point past RB to TUP list
         USING S99TUPL,R6              * Address Text Unit Pointers
         ST    R6,S99TXTPP             * Store TUP address in RB
*
         LA    R7,TU_DD                * Address DD parameter
         ST    R7,S99TUPTR             * ... and store in TUP list
*
         LA    R6,S99TUPL+4            * Get add of next TUP list entry
         LA    R7,TU_DUN               * Address DUN parameter
         ST    R7,S99TUPTR             * ... and store in TUP list
*
         OI    S99TUPTR,S99TUPLN       * flag last parameter
*
         LR    R1,R4
         DYNALLOC                      Do the "business"
         LTR   R15,R15
         BZ    DDFREE_EXIT
         LA    R4,4(,R4)               Address the SVC99 RB
         ST    R4,DFS99RBP             Set address for DAIRFAIL
         ST    R15,SVC99RC             Set SVC99 retcode
         LA    R14,SVC99RC             Get address of it
         ST    R14,DFRCP               Set address for DAIRFAIL
         LA    R14,DAIRSWIT_F          Get address of DAIR switches
         ST    R14,DFIDP               Set address for DAIRFAIL
         LA    R14,ZEROES              Get address of word of zeroes
         ST    R14,DFJEFF02            Set IKJEFF02 addr Not Known
         LA    R14,DFBUFS              Get address for messages
         ST    R14,DFBUFP              Set address for DAIRFAIL
         LA    R1,DFPARMS              Address DAIRFAIL parameter
         LINK  EP=IKJEFF18             Call DAIRFAIL
         L     R15,SVC99RC             Retrieve SVC 99 retcode
DDFREE_EXIT DS 0H
         L     R14,DSNRSAVE            Get return address
         BR    R14                     Go back
CONCAT   DS    0H
*   *********************************************
*   *  This routine performs the concatenation  *
*   *  this is done by addressing the list of   *
*   *  DDnames and requesting concatenation     *
*   *********************************************
         ST    R14,DSNRSAVE            Save return address
         LA    R4,S99_AREA             Address SVC99 area
         MVI   DYNFLAG,C'Y'            Show we've done DYNALLOC
         USING S99RBP,R4               * Address SVC 99 Request Block
         LA    R5,S99RBPTR+4           * Point four bytes beyond start
         USING S99RB,R5                * Est addressability to RB DSECT
         ST    R5,S99RBPTR             * Make RBPTR point to Req Block
         OI    S99RBPTR,S99RBPND       * On high-order bit in RBPTR
         XC    S99RB(RBLEN),S99RB      * Zero out Req Block entirely
         MVI   S99RBLN,RBLEN           * Put RB length into LEN field
         MVI   S99VERB,S99VRBCC        * Set verb to CONCATENATE
         LA    R6,S99RB+RBLEN          * Point past RB to TUP list
         USING S99TUPL,R6              * Address Text Unit Pointers
         ST    R6,S99TXTPP             * Store TUP address in RB
*
         LA    R7,TU_DDLIST            * Get address of DD list
         ST    R7,S99TUPTR             * ... and store in TUP list
*
         LA    R6,S99TUPL+4            * Get add of next TUP list entry
         LA    R7,TU_PERM              * Get address of PERM flag
         ST    R7,S99TUPTR             * ... and store in TUP list
         OI    S99TUPTR,S99TUPLN       * Indicate last Text Unit
         LR    R1,R4
         DYNALLOC
         LTR   R15,R15
         BZ    CONCAT_EXIT
         LA    R4,4(,R4)               Address the SVC99 RB
         ST    R4,DFS99RBP             Set address for DAIRFAIL
         ST    R15,SVC99RC             Set SVC99 retcode
         LA    R14,SVC99RC             Get address of it
         ST    R14,DFRCP               Set address for DAIRFAIL
         LA    R14,DAIRSWIT            Get address of DAIR switches
         ST    R14,DFIDP               Set address for DAIRFAIL
         LA    R14,ZEROES              Get address of word of zeroes
         ST    R14,DFJEFF02            Set IKJEFF02 addr Not Known
         LA    R14,DFBUFS              Get address for messages
         ST    R14,DFBUFP              Set address for DAIRFAIL
         LA    R1,DFPARMS              Address DAIRFAIL parameter
         LINK  EP=IKJEFF18             Call DAIRFAIL
         L     R15,SVC99RC             Retrieve SVC 99 retcode
CONCAT_EXIT DS 0H
         L     R14,DSNRSAVE            Get return address
         BR    R14                     Go back
DSNRSAVE DS    F
         DS    0D
EXEC5    MVC   0(0,R3),0(R8)           Move return code to REXX RC
EXEC6    MVC   EVALBLOCK_EVDATA(0),0(R8)
@IRXEXCOM DC   C'IRXEXCOM'
#DDLEN   DC    A(0)
#DSNLEN  DC    A(0)
#DSNS    DC    A(0)
$DDPARM  DC    A(0)
$DSNPARM DC    A(0)
$DSNADDR DC    A(0)
$DSNLIST DC    A(0)
$DDLIST  DC    A(0)
$IRXEXCOM DC   A(0)
$EFPLARG  DC   A(0)
$EVALBLOCK DC  A(0)
@DSNADDR DC    A(0)
@DSNLIST DC    A(0)
@DDLIST  DC    A(0)
PACKDUBL DS    D
ZONEDEC  DS    CL16
RC_SHVBLOCK DS CL(SHVBLEN)
S99ERROR_SHVBLOCK DS CL(SHVBLEN)
S99INFO_SHVBLOCK DS CL(SHVBLEN)
S99MSG1_SHVBLOCK DS CL(SHVBLEN)
S99MSG2_SHVBLOCK DS CL(SHVBLEN)
RC       DS    CL5
ZEROES   DC    A(0)                @ IKJEFF02 (NOT KNOWN)
DAIRSWIT DC    AL1(DFBUFSW)        RETURN THE MESSAGE
         DC    AL1(DFSVC99)        ERROR DETECTED IN SVC 99
DAIRSWIT_F DC  AL1(DFBUFSW)        RETURN THE MESSAGE
         DC    AL1(DFFREE)        ERROR DETECTED IN "FREE"
SVC99_ERROR DS    CL5
SVC99_INFO  DS    CL5
SVC99RC  DS F
DYNFLAG  DS    CL1' '
RCSIGN   DS    H
RBLEN    EQU   (S99RBEND-S99RB)
         DS    0D
S99_AREA DC    XL100'FF'
*
*
TU_DUN   DC    AL2(DUNUNALC)
         DC    X'0000'
*
TU_PERMD DC    AL2(DALPERMA)
         DC    X'0000'
*
TU_NONCONV DC    AL2(DALCNVRT)
         DC    X'0000'
*
TU_DD    DS    0A
TU_DD_T  DC    AL2(0)   <-will be DALDDNAM or DALRTDDN
TU_DD_#  DC    X'0001'
TU_DD_L  DC    X'0000'
TU_DD_$  DC    CL8'        '
*
TU_PERM  DC    AL2(DCCPERMC)
         DC    X'0000'
*
TU_DUNUNALC DC    AL2(DUNUNALC)
         DC    X'0000'
*
TU_STAT  DC    AL2(DALSTATS)           Data Set status
         DC    X'0001'                 .
         DC    X'0001'                 .
STATUS   DC    X'08'                   DISP=KEEP
*
TU_DISP  DC    AL2(DALNDISP)           Data Set Disposition
         DC    X'0001'                 .
         DC    X'0001'                 .
         DC    X'08'                   DISP=KEEP
*
TABLE_CHAR   DC XL256'00'              *****************************
         ORG TABLE_CHAR+C'A'           * Table of valid characters *
         DC  C'ABCDEFGHI'              * which can be at the start *
         ORG TABLE_CHAR+C'J'           * of a dataset name         *
         DC  C'JKLMNOPQR'              *****************************
         ORG TABLE_CHAR+C'S'
         DC  C'STUVWXYZ'
         ORG TABLE_CHAR+C'#'
         DC  C'#'
         ORG TABLE_CHAR+C'@'
         DC  C'@'
         ORG TABLE_CHAR+C'$'
         DC  C'$'
         ORG TABLE_CHAR+X'7D'
         DC  X'7D'
         ORG TABLE_CHAR+L'TABLE_CHAR
TABLE_SPACE  DC XL256'00'              ********************
         ORG TABLE_SPACE+C' '          * Table containing *
         DC  C' '                      * space and comma  *
         ORG TABLE_SPACE+C','          * (used as dataset *
         DC  C','                      * name delimiters  *
         ORG TABLE_SPACE+L'TABLE_SPACE ********************
         LTORG
*
TU_DSN   DSECT
TU_DSN_T DC    AL2(DALDSNAM)           Data Set Name
TU_DSN_# DC    X'0001'
TU_DSN_L DC    X'002C'
TU_DSN_$ DS    CL44
*
TU_DDLIST DSECT
TU_DDLIST_T DC AL2(DALDDNAM)           DD Name
TU_DDLIST_# DC X'0001'
TU_DDLIST_L DC X'0008'
TU_DDLIST_$ DS CL8
TU_DDLIST_@ EQU *-TU_DDLIST_L
*
         IEFZB4D0 ,
         IEFZB4D2 ,
         IRXEVALB ,                    REXX's evaluation block
         IRXENVB  ,                    REXX's environment block
         IRXEXTE  ,                    REXX's vector block
         IRXSHVB  ,                    REXX's shared variable block
         IRXEFPL  ,                    REXX's external function
*                                             parameter list
DYNALLOC CSECT
         IRXARGTB DECLARE=YES          REXX's parsed argument list
DYNALLOC CSECT
         IKJEFFDF DFDSECT=NO,DFDSEC2=NO DAIRFAIL areas
         END
