         TITLE ' M V S   C O M M A N D   P R O C E S S O R '
TSSOPCMD CSECT
***********************************************************************
* THIS IS THE TSSOPCMD SUBROUTINE. THIS SUBROUTINE WILL BE CALLED BY  *
* SERVERS DESIRING TO ISSUE OPERATING SYSTEM COMMANDS AND RETRIEVE    *
* RESPONSES. THE SUBROUTINE WILL RUN IN THE COMMON SYSTEM AREA,       *
* AND UTILIZE THE SERVICES OF TSSO TO RETRIEVE THE OPERATING SYSTEM   *
* COMMAND RESPONSE. BECAUSE OF THIS, THE SUBROUTINE CANNOT BE RUN     *
* IN AN ENVIRONMENT THAT DOES NOT CONTAIN TSSO. SINCE THIS MODULE IS  *
* IN FACT, A SUBROUTINE, IT DOES ISSUE ANY MESSAGES OF ITS OWN, SAVE  *
* THOSE FORTELLINGDISASTER WITH TSSO ITSELF. IT WILL, INSTEAD, OFFER  *
* RETURN CODES TO ITS CALLERS. THIS MODULE MUST RUN APF AUTHORIZED,   *
* HOWEVER, IT WILL ASSUME IT IS CALLED IN THAT STATE. THIS REQUIRES   *
* THE CALLER TO GET AUTHORIZED.                                       *
*                                  . THE FOLLOWING ARE THE INPUT      *
* PARAMETERS THAT THIS MODULE EXPECTS.                                *
*                                                                     *
*                                                                     *
* R1 --> PARAMETER LIST                                               *
*                                                                     *
*  0(R1) ---> ADDRESS OF THE MVS COMMAND TO BE ISSUED THROUGH SVC 34  *
*                                                                     *
*  4(R1) ---> ADDRESS OF A 4 BYTES FIELD CONTAINING THE LENGTH OF     *
*             THE ABOVE COMMAND.                                      *
*                                                                     *
*  8(R1) ---> ADDRESS OF A 4 BYTE FIELD CONTAINING THE MAXIMUM AMOUNT *
*             OF TIME, IN 1/100 OF A SECOND, THAT THE CALLER  TO WAIT *
*             FOR THE COMMAND TO TERMINATE. THE VALUE MUST BE BETWEEN *
*             1 SECOND AND 60 SECONDS.                                *
*                                                                     *
* 12(R1) ---> ADDRESS OF A 4 BYTE FIELD CONTAINING THE MAXIMUM        *
*             NUMBER OF LINES THAT THE CALLER WOULD LIKE TO GET       *
*             BACK.                                                   *
*                                                                     *
* 16(R1) ---> ADDRESS OF A ONE BYTE FLAG INDICATING THE AUTHORITY     *
*             LEVEL THAT THE COMMAND SHOULD BE INVOKED WITH. THE      *
*             FLAG VALUES ARE:                                        *
*                                                                     *
*             X'80' - SYSTEM AUTHORITY                                *
*             X'40' - I/O AUTHORITY                                   *
*             X'20' - CONSOLE AUTHORITY                               *
*             X'01' - CONSOLE IS CONSIDERED A PSEUDO-MASTER.          *
*                                                                     *
* 20(R1) ---> ADDRESS OF AN 8 BYTE FIELD CONTAINING THE USERID OF     *
*             THE INVOKER. THIS WILL TYPICALLY BE THE TSO USERID,     *
*             IMS LTERM                                               *
*                                                                     *
*                                                                     *
* 24(R1) ---> ADDRESS OF A 40,000 BYTE BUFFER THAT TSSOPCMD IS TO     *
*             COPY THE COMMAND RESPONSE BACK TO. THE REASON FOR       *
*             REQUIRING THIS PARAMETER IS TO ENSURE THE 40K BUFFER    *
*             REQUIRED IN CSA GETS FREED. A MOVE LONG INSTRUCTION     *
*             WILL BE PERFORMED TO DO THE COPY.                       *
*             NOTE: THE FIRST FOUR BYTES OF THIS BUFFER CONTAIN THE   *
*                   COUNT OF MESSAGES IN THE BUFFER.                  *
*                                                                     *
*                                                                     *
*                                                                     *
* 28(R1) ---> ADDRESS OF A 4 BYTE FIELD THAT TSSOPCMD WILL PLACE THE  *
*             NUMBER OF LINES RETURNED FROM THE MVS COMMAND.          *
*                                                                     *
*                                                                     *
* 32(R1) ---> ADDRESS OF A 1 BYTE FIELD THAT TSSOPCMD WILL PLACE THE  *
*             REASON CODE BEHIND SUCCESS/FAILURE.                     *
*                                                                     *
*                                                                     *
*                                                                     *
* METHOD OF OPERATION:                                                *
*                                                                     *
* 1) - VALIDATE THE PARAMETERS, AS WELL AS THE CALLING ENVIRONMENT    *
*      AND ISSUE RETURN CODES IF NOT GOOD.                            *
*                                                                     *
* 2) - FIND A TSSO SUBSYSTEM CONSOLE. THIS IS DONE BY SCANNING THE    *
*      SSCONCB CHAIN AND FINDING A FREE CONSOLE                       *
*                                                                     *
* 3) - GETMAIN AN OSCMD INTERFACE CONTROL BLOCK                       *
*                                                                     *
* 4) - PREPARE THE STIMER TO BLOW OFF IN THE SPECIFIED NUMBER OF      *
*      SECONDS.                                                       *
*                                                                     *
* 5) - ISSUE SVC 34 AND WAIT.                                         *
*                                                                     *
* 6) - RETURN CONTROL TO CALLER AFTER FILLING IN PARAMETER LIST WITH  *
*      OUTPUT VARIABLES.                                              *
*                                                                     *
*        +----------+                                                 *
*        + CHANGES  +                                                 *
*        +----------+                                                 *
*  20DEC96 RPS FIXED ADDRESSABILITY ERROR WITH HLASM                  *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EQUATES
         STM   R14,R12,12(R13)    SAVE CALLERS REGSITERS
         LR    R12,R15            LOAD ENTRY POINT OF TSSOPCMD
         USING TSSOPCMD,R12
         B     EYE1
         COPY  EYECATCH
EYE1     DS    0H
         LR    R8,R1              SAVE INPUT PARMS.
*                                 THEN I EXPECTED.
         GETMAIN R,LV=72          WE NEED STORAGE FOR THE SAVE AREA
         ST    R13,4(R1)          STORE ADDRESS OF CALLERS SAVE AREA
*                                  SAVE AREA
         ST    R1,8(R13)          REMEMBER WHERE THIS CORE IS
         LR    R13,R1             KEEP A COPY IN R13
*
         GETMAIN R,LV=4096         GETMAIN SOME PRIVATE STORAGE...
         LR    R11,R1
         USING OSCMDATD,R11
         MVC   OPESTAED(ESTAECE-ESTAEC),ESTAEC
         GETCVT (R10)
         USING TSSOCVT,R10
         TM    TSSOFLG1,TSSOGONE   TSSO BLOWN AWAY ?
         BO    RC32
         MVC   STIMERD(STIMRPEN-STIMRPRE),STIMRPRE     COPY STIMER
*                                                   PREPROCESSING EXIT
         LA    R2,OSCMDATD
         ST    R2,STIMPARM         GET ADDRESS OF DSECT AREA FOR PARMS
         LA    R2,STIMEREX         GET ADDRESS OF STIMER EXIT
         ST    R2,STIMREAL         AND TELL STIMER PREPROCESSOR
         ST    R8,TSSOPPRM         REMEMBER PARM LIST ADDRESS
         MVI   MVSCMD+4,X'40'
         MVC   MVSCMD+5(130),MVSCMD+4
***********************************************************************
* STEP 1 IS TO VALIDATE THE INPUT PARAMETERS AND APF AUTHORIZATION    *
* STATUS.                                                             *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         TESTAUTH FCTN=1              ARE WE AUTHORIZED ?
         LTR   R15,R15
         BNZ   RC4                    NO, GIVE UP.
*
***********************************************************************
* STEP 2: VALIDATE AND PROCESS MVS COMMAND                            *
*                                                                     *
***********************************************************************
         L     R3,0(R8)               POINT AT MVS COMMAND
         L     R4,4(R8)               POINT AT LENGTH
         L     R4,0(R4)               OBTAIN LENGTH
         STH   R4,MVSCMD              STORE LENGTH AWAY
         MVC   MVSCMD+2(2),=H'0'
         MVC   MVSCMD(2),=H'127'
         CH    R4,=H'127'
         BH    RC8                    LENGTH OUT OF RANGE
         LTR   R4,R4
         BNH   RC8
         BCTR  R4,0                   FOR EXECUTE.
         EX    R4,MOVMVSCM            MOVE THE COMMAND TO OUR STORAGE
         B     AR2
MOVMVSCM MVC   MVSCMD+4(0),0(R3)      ** EXECUTED **
AR2      DS    0H
***********************************************************************
* STEP 3: VALIDATE AND PROCESS THE TIME PARAMETER...                  *
*                                                                     *
***********************************************************************
         L     R3,8(R8)               PICK UP POINTER TO TIME PARM
         L     R3,0(R3)               PICK UP ACTUAL WAIT TIME
         LTR   R3,R3                  POSTIVE  ?
         BNH   RC12                   BAD NEWS.
         CH    R3,=H'6000'            TO HIGH ?
         BH    RC12                   BAD NEWS...
         ST    R3,WAITTIME            PUT AWAY.
***********************************************************************
* STEP 4: VALIDATE AND PROCESS THE LINES PARAMETER...                 *
*                                                                     *
***********************************************************************
         L     R3,12(R8)              PICK UP POINTER TO LINES PARM
         L     R3,0(R3)               PICK UP ACTUAL MAX LINES COUNT
         CH    R3,=H'200'             MAXIMUM SUPPORT IS 200.
         BH    RC16
         LTR   R3,R3                  POSTIVE  ?
         BNH   RC16                   BAD NEWS.
         ST    R3,MAXLINES            PUT AWAY.
***********************************************************************
* STEP 5: VALIDATE AND PROCESS THE COMMAND AUTHORIZATION PARAMETERS...*
*         HERE, WE TAKE IT ON BLIND FAITH THAT THE INVOKER IS         *
*         AUTHORIZED TO WHATEVER AUTHORITY HE WANTS, SINCE HE WAS APF *
*         AUTHORIZED TO BEGIN WITH.                                   *
***********************************************************************
         L     R3,16(R8)              PICK UP POINTER TO AUTH  PARM
         TM    0(R3),B'00001110'      CHECK THAT ALL BITS IN TAIL END
*                                     OF BYTE ARE OFF...
         BNZ   RC20                   INVALID AUTHORIZATION PARAMETER
         MVC   AUTHBYTE(1),0(R3)      COPY IT.
*
***********************************************************************
* NEXT, WE MOVE THE CALLER SUPPLIED USERID INTO LOCAL STORAGE.        *
*                                                                     *
*                                                                     *
***********************************************************************
         L     R3,20(R8)              GET POINTER TO USERID
         MVC   USERID(8),0(R3)
***********************************************************************
* THE NEXT STEP IS TO FIND AN AVAILABLE TSSO SUBSYSTEM CONSOLE. TSSO  *
* SUBSYSTEM CONSOLES ARE CHAINED OFF THE SSCONCBH CONTROL BLOCK IN THE*
* TSSO CVT.                                                           *
***********************************************************************
         L     R4,SSCONSAD            GET THE SSCON CB HEADER
         USING SSCONCBH,R4            ADDRESS IT
         LA    R3,SSCONFIR            GET THE FIRST CONSOLE CONTROL BLK
         USING SSCONCB,R3
         L     R5,SSCONAMT            HOW MANY SUBSYSTEM CONSOLES ARE
*                                     THERE.
         LTR   R5,R5                  ARE THERE ANY ?
         BZ    RC24                   NOPE, NO SS CONSOLES
CHEKCONS DS    0H
         TM    SSCONFLG,X'80'         IS THIS SS CONSOLE IN USE ?
         BO    TRYNXTSS               YUP, TRY THE NEXT SS CONSOLE
* THIS SUBSYSTEM CONSOLE IS NOT IN USE... CHECK OUT IF IT IS AVAILABLE
* FOR AVERAGE USERS...
         TM    SSCONFLG,X'40'         IS THIS SS CONSOLE DEDICATED
*                                     TO TSSO ?
         BNO   ALLOCONS               NO, THIS CONSOLE IS FREE TO ALLOC
***********************************************************************
* HERE, WE HAVE OURSELVES A SUBSYSTEM CONSOLE THAT WE CAN USE ONLY FOR*
* TSSO. LETS CHECK IF WE ARE INDEED TSSO                              *
***********************************************************************
         L     R4,X'224'              GET ASCB ADDRESS
         C     R4,TSSOASCB            ARE WE TSSO ?
         BE    ALLOCONS               YES.. OK TO ALLOCATE CONSOLE
         B     TRYNXTSS
TRYNXTSS DS    0H
***********************************************************************
* HERE, WE HAVE FOUND THE CONSOLE TO BE BUSY... WE WILL GO AND TRY
* THE NEXT SUBSYSTEM CONSOLE.
***********************************************************************
         LA    R3,SSCONCBL(R3)        TRY NEXT ENTRY
         LTR   R3,R3                  IS THERE A NEXT ENTRY ?
         BZ    RC24                   NO, BAD NEWS- ALL CONSOLES BUSY
         BCT   R5,CHEKCONS
         B     RC24
ALLOCONS DS    0H
***********************************************************************
* WE COME HERE WHEN WE HAVE DETERMINED THAT A SUBSYSTEM CONSOLE IS    *
* AVAILABLE.                                                          *
***********************************************************************
         MODESET KEY=ZERO             SINCE THE SSCONCB IS FETCH PROT.
         ST    R3,SSCONENT            SUBSYSTEM CONSOLE ENTRY WE ARE
*                                     USING
         OI    SSCONFLG,X'80'         MARK THE CONSOLE AS ALLOCATED
         MVC   SSCONUID(8),USERID
         DROP  R4
***********************************************************************
* NEXT, WE ALLOCATE THE OSCMD INTERFACE CONTROL BLOCK. THIS BLOCK IS  *
* THE PRIMARY INTERFACE BETWEEN TSSOPCMD AND TSSOSS09.                *
***********************************************************************
         L     R2,=F'40000'
         GETMAIN RC,LV=(R2),SP=241
         LTR   R15,R15
         BNZ   RC28                   STORAGE NOT AVAILABLE
         ST    R1,ICBADDR             REMEMBER ADDRESS OF ICB
         ST    R1,SSCONICB
***********************************************************************
* BECAUSE AN ADDRESS SPACE MAY BE CANCELLED WHILE WAITING FOR TSSO    *
* SERVICES, WE MUST PROVIDE AN ESTAE ROUTINE TO RECOVER...            *
***********************************************************************
         L     R6,=V(TSSOPREC)
         LTR   R6,R6              SAVE ENTRY POINT
         BZ    BADESTAE
*
         ESTAE (R6),TERM=YES,PARAM=(R3),MF=(E,OPESTAED)
*
         LTR   R15,R15
         BNZ   BADESTAE
         B     OKESTAE
BADESTAE DS    0H
         B     RC36
OKESTAE  DS    0H
***********************************************************************
* THE SSCONCB HAS BEEN PREPARED FOR MESSAGE INTERCEPTION. NOW, ME MUST*
* INITIALIZE THE OSCMD INTERFACE CONTROL BLOCK.                       *
*                                                                     *
***********************************************************************
         L     R7,SSCONICB            ADDRESS THE OSCMD INTERFACE
*                                     CONTROL BLOCK
         USING OSCMDICB,R7
         XC    OSCMDECB(4),OSCMDECB
         XC    OSCMDFLG(4),OSCMDFLG
*
         LA    R8,OSCMDBUF            GET ADDRESS OF OSCMDBUF
         ST    R8,OSCMDNEX            THIS IS THE NEXT PLACE TO PUT
*                                     A TRAPPED MVS MESSAGE
         L     R8,X'224'              GET ASCB OF THIS ADDRESS SPACE
         ST    R8,OSCMDACB            AND PUT IT AWAY...
         XC    OSCMDCNT(4),OSCMDCNT   ZERO OUT THE COMMAND COUNT
*
         LA    R8,OSCMDBUF
         LA    R1,199
BLNKLOOP DS    0H                 BLANK OUT THE
         MVI   0(R8),C' '         BUFFERS IN THE OSCMD
         MVC   1(149,R8),0(R8)    INTERFACE CONTROL
         LA    R8,150(R8)             BLOCK
         BCT   R1,BLNKLOOP
*
         L     R8,MAXLINES            GET MAXIMUM NUMBER OF LINES
         ST    R8,OSCMDMAX
*
***********************************************************************
* THE NEXT STEP IS TO COPY THE AUTHORIZATION BITS FROM THE INVOKER TO *
* THE TSSO SUBSYSTEM CONSOLE.                                         *
***********************************************************************
         L     R8,SSCONAUT            GET ADDRESS OF UCMAUTH
         MVC   0(1,R8),AUTHBYTE       COPY THE AUTHORIZTION BYTE.
         TM    AUTHBYTE,X'01'         PSEUDO MASTER AUTHORITY DESIRED?
         BNO   NOPSEUDO               NO - SKIP IT
         OI    2(R8),X'08'            SET PSEUDO MASTER FLAG.
         B     PSPSEUDO               GO DO OTHER STUFF
NOPSEUDO DS    0H
         NI    2(R8),255-X'08'        RESET MASTER AUTH BIT
         B     PSPSEUDO               AND TO DO OTHER STUFF
PSPSEUDO DS    0H
***********************************************************************
* ALL IS IN READINESS. NOW WE MUST ISSUE THE STIMER, AND GO TO SLEEP, *
* AWAITING THE MVS RESPONSE TO OUR COMMANDS.                          *
***********************************************************************
         STIMER REAL,STIMERD,BINTVL=WAITTIME
***********************************************************************
* WE WILL AWAKEN UPON ONE OF TWO EVENTS. IF THE STIMER EXPIRES, THE   *
* STIMEREX EXIT IS DRIVEN, AND THIS WILL POST THE ECB. WE WILL THEN   *
* PROCESS THE BUFFER(S) CREATED BY TSSOSS09. IF THE ECB IS POSTED     *
* DIRECTLY BY TSSOSS09, WE WILL WAKE UP, AND IMMEDIATELY CANCEL THE   *
* STIMER. EITHER WAY, WE WILL PROCESS THE RESULTS OF THE BUFFER. NOTE *
* THAT WE EXPECT TO BE POSTED FROM TSSOSS09 IN THE CASE OF A MULTI    *
* LINE DISPLAY COMMAND, AND FROM THE STIMER EXIT IN THE CASE OF A JES2*
* OR OTHER SUBSYSTEM COMMAND.                                         *
***********************************************************************
         XC    OSCMDECB(4),OSCMDECB   NULL OUT OSCMDECB
         XC    STIMRECB(4),STIMRECB   NULL OUT STIMRECB
         LA    R2,OSCMDECB            GET ADDRESS OF SS09ECB
         ST    R2,LISTECBS            STORE IN LIST
         LA    R2,STIMRECB            GET ADDRESS OF OTHER ECB
         ST    R2,LISTECBS+4           STORE IN LIST
         OI    LISTECBS+4,X'80'       SET HIGH ORDER BYTE
*
         MODESET MODE=SUP             GET POWER
         LA    R1,MVSCMD              POINT TO THE MVS COMMAND
         L     R3,SSCONENT            GET SS CON ENTRY
         USING SSCONCB,R3
         L     R0,SSCONNUM            GET THE SUBSYSTEM CONSOLE
         OI    SSCONFLG,X'20'         ** START INTERCEPTING COMMANDS **
*                                     INTERFACE CONTROL BLOCK.
         SVC   34                     ** BANG !! **
*
         WAIT  ECBLIST=LISTECBS
*
         NI    SSCONFLG,255-X'20'     TURN OFF MESSAGE INTERCEPT FLAG
         DROP  R3
*
         MODESET MODE=PROB
*
***********************************************************************
* WE HAVE BEEN POSTED, EITHER FROM COMMTASK VIA XMEM-POST OR THROUGH  *
* OUR STIMER EXIT ROUTINE. IF POSTED THROUGH OUR STIMER EXIT, WE ARE  *
* OK, IF POSTED THROUGH THE XMEM-POST, WE SHOULD CANCEL THE STIMER    *
***********************************************************************
         TM    OSCMDECB,X'40'              POST BIT ON ?
         BNO   PSTTSTIM
         TTIMER CANCEL
***********************************************************************
* FOLLOWING THE TTIMER, THERE IS A CHANCE THAT THE TIMER EXIT WAS     *
* SCHEDULED (IF TIME REMAINING IS ZERO) BUT NOT YET CALLED. TO HANDLE *
* THIS RARE OCCURANCE, WE WILL CHECK..                                *
***********************************************************************
         LTR   R0,R0          ANY TIME INTERVAL REMAINING ?
         BNZ   NOWAIT2        NO, NO NEED TO BE CONCERNED...
         TM    STIMRECB,X'40' WERE WE ALREADY POSTED ?
         BNZ   NOWAIT2        NO, NO NEED TO BE CONCERNED...
         WAIT  ECB=STIMRECB   WE HAVE TO BE CONCERNED... WAIT TILL
*                             STIMER EXIT POPS BEFORE CONTINUING.
NOWAIT2  DS    0H
*
PSTTSTIM DS    0H
***********************************************************************
* NOW, WE GO ABOUT THE BUSINESS OF EVALUATING THE RESULTS, AND PLACING*
* ANSWERS IN THE INVOKERS PARAMETER LIST.                             *
*
* NOTE THAT THE OSCMDICB IN STILL ADDRESSED BY REGISTER 7             *
* WE WILL TAKE THE FOLLOWING STEPS...                                 *
*                                                                     *
* 1) COPY THE GETMAINED AREA INTO THE CALLER PROVIDED AREA            *
*                                                                     *
* 2) DE-ALLOCATE THE SUBSYSTEM CONSOLE                                *
*                                                                     *
* 3) FREE THE ALLOCATED CSA                                           *
*                                                                     *
* 4) RETURN                                                           *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
COPYBUF  DS    0H
         L     R8,TSSOPPRM
         L     R2,24(R8)              GET ADDRESS OF 40K BUFFER IN
*                                     CALLERS REGION.
         MVC   0(4,R2),OSCMDCNT       COPY THE COUNT FIELD
         LA    R2,4(R2)
         L     R3,=F'30000'           LENGTH
         LA    R4,OSCMDBUF            ADDRESS OF OSCMD BUFFERS
         LR    R5,R3                  SAME LENGTH
         MVCL  R2,R4                  ** MOVE IT **
*
         FREEMAIN R,LV=40000,A=(R7),SP=241   *FREE CSA *
*
***********************************************************************
* NOW - TO DEALLOCATE THE SUBSYSTEM CONSOLE.                          *
*                                                                     *
***********************************************************************
         L     R3,SSCONENT
         USING SSCONCB,R3
         NI    SSCONFLG,255-X'80'    TURN OFF "IN USE" FLAG
         XC    SSCONICB(4),SSCONICB  ZERO OUT THE ICB POINTER
         MVC   SSCONUID(8),=CL8' '   BLANK OUT THE USER ID
         DROP  R3
*
         ESTAE 0
*
         MODESET KEY=NZERO
         B     RC0
RC0      DS    0H
         MVC   RETCODE(2),=H'0'      RETURN CODE 0
         B     ENDPROG
*
RC4      DS    0H
         MVC   RETCODE(2),=H'4'      RETURN CODE 4
         B     ENDPROG               NOT AUTHORIZED
*
RC8      DS    0H
         MVC   RETCODE(2),=H'8'      RETURN CODE 8
         B     ENDPROG               MVS COMMAND IS INVALID
*
RC12     DS    0H
         MVC   RETCODE(2),=H'12'     RETURN CODE 12
         B     ENDPROG               TIME PARM INVALID
*
RC16     DS    0H
         MVC   RETCODE(2),=H'16'     RETURN CODE 16
         B     ENDPROG               LINES PARM INVALID
*
RC20     DS    0H
         MVC   RETCODE(2),=H'20'     RETURN CODE 20
         B     ENDPROG               AUTHORIZATION PARM INVALID
*
RC24     DS    0H
         MVC   RETCODE(2),=H'24'     RETURN CODE 24
         B     ENDPROG               ALL SUBSYSTEM CONSOLES BUSY
*
RC28     DS    0H
         MVC   RETCODE(2),=H'28'     RETURN CODE 28
         B     ENDPROG               STORAGE NOT AVAILABLE
*
RC32     DS    0H
         MVC   RETCODE(2),=H'32'     RETURN CODE 32
         B     ENDPROG               TSSO IS BLOWN AWAY
*
RC36     DS    0H
         MVC   RETCODE(2),=H'36'     RETURN CODE 36
         B     ENDPROG
*
ENDPROG  DS    0H
         LH    R8,RETCODE
         FREEMAIN R,LV=4096,A=(R11)   FREEMAIN THE PRIVATE STORAGE
         LR    R1,R13              GET ADDRESS OF CORE IN R1
         L     R13,4(R13)          RESTORE R13
         FREEMAIN R,LV=72,A=(R1)    FREE UP THE CORE
         B     ENDPROG1
ENDPROG1 DS    0H
         L     R14,12(R13)         RELOAD RETURN POINT
         LR    R15,R8              PICK UP RETURN CODE.
         LM    R0,R12,20(R13)      RELOAD MORE REGISTERS
         BR    R14
STIMEREX DS    0H
***********************************************************************
* THIS IS THE STIMER EXIT ROUTINE. IT IS BRANCHED TO BY THE STIMER    *
* PREPROCESSING ROUTINE THAT IS SET UP TO PASS PARAMETERS. THE        *
* REGISTERS ON ENTRY TO THIS ROUTINE ARE:                             *
*                                                                     *
* R1: ADDRESS OF THE OSCMD DSECT.   R15: ADDRESS OF STIMEREX          *
* R13: SAVEAREA                                                       *
* R14: PLACE TO RETURN TO.                                            *
*
* SINCE THIS CODE MUST RESTORE ALL REGISTERS TO THE OPERATING SYSTEM,
* IT WILL LOCATE THE "REAL" REGS 1 AND 15 THROUGH THE
***********************************************************************
         PUSH  USING
         STM   R14,R12,12(R13)     SAVE OS REGS FOR STIMER
         LR    R12,R15             GET GOOD BASE
         USING STIMEREX,R12        TELL GOOD ASSEMBLER
         LR    R11,R1              GET ADDRESS OF OSCMD DSECT AREA
         USING OSCMDATD,R11        TELL MEDIOCRE ASSEMBLER
***********************************************************************
* THE WHOLE IDEA OF THIS CODE IS TO POST THE ECB ASSOCIATED WITH THE  *
* STIMER. THE ECB IS NOW CONVIENTLY ADDRESSABLE.                      *
***********************************************************************
         LA    R2,STIMRECB         GET ADDRESS OF STIMER ECB
         POST  (R2),0              POST ECB WITH COMP CODE ZERO
***********************************************************************
* NOW WE WILL TERMINATE STIMER EXIT PROCESSING BY RESTORING REGISTERS *
* INCLUDING R1 AND R15 PREVIOUSLY DESTROYED. NOTE THAT THESE WERE     *
* SAVED IN THE DSECT AREA, WHICH WE STILL HAVE ADDRESSABILITY TO.     *
***********************************************************************
         L     R15,R15SAVED        RESTORE R15
         L     R1,R1SAVED          RESTORE R1
         L     R14,12(R13)         RESTORE RETURN ADDRESS
         LM    R2,R12,28(R13)      RESTORE EVERYTHING ELSE.
         BR    R14
*
************************************************************
*                                                          *
*        CONSTANTS AND WORKAREAS                           *
*                                                          *
************************************************************
***********************************************************************
* ALTHOUGH THIS LOOKS LIKE REAL CODE, IT'S ACTUALLY A MECHANISM USED  *
* TO PASS A PARAMETER TO A STIMER EXIT ROUTINE. WE WILL PREPORCESS THE*
* ROUTINE WITH THIS ONE, WHICH IS COPIED TO THE DSECT AREA.           *
***********************************************************************
STIMRPRE DS    0D
*        PUSH  USING                                       RPS
*        DROP  R15                                         RPS
*        USING *,R15            ON ENTRY, R15 POINTS TO STIMER EXIT.
         ST    R15,20(R15)  +0: STORE REGISTER 15 IN DSECT AREA
         ST    R1,24(R15)   +4: STORE REGISTER 1  IN DSECT AREA
         L     R1,PARMADDR  +8: LOAD PARAMETER R1 FROM DSECT AREA
         L     R15,STMRADDR +12: LOAD REGISTER 15 WITH "REAL" STIMER
*                                EXIT ROUTINE
         BR    R15          +16: BRANCH TO REAL STIMER EXIT ROUTINE
R15SAVE  DS    A            +20: ROOM FOR R15
R1SAVE   DS    A            +24: ROOM FOR R1
STMRADDR DC    A(STIMEREX)  +28: ADDRESS OF REAL STIMER EXIT ROUTINE
PARMADDR DS    F            +32: TO BE FILLED IN BY PROGRAM.
STIMRPEN DS    0H
*        POP   USING
*
*
ESTAEC   ESTAE 0,MF=L
ESTAECE  EQU   *
*
*
         DS    0D
STIMERD  CSECT
*        USING *,R15            ON ENTRY, R15 POINTS TO STIMER EXIT.
         ST    R15,R15SAVED +0: STORE REGISTER 15 IN DSECT AREA
         ST    R1,R1SAVED   +4: STORE REGISTER 1  IN DSECT AREA
         L     R1,PARMADDR  +8: LOAD PARAMETER R1 FROM DSECT AREA
         L     R15,STMRADDR +12: LOAD REGISTER 15 WITH "REAL" STIMER
*                                EXIT ROUTINE
         BR    R15          +16: BRANCH TO REAL STIMER EXIT ROUTINE
R15SAVED DS    A            +20: ROOM FOR R15
R1SAVED  DS    A            +24: ROOM FOR R1
STIMREAL DS    A            +28: ADDRESS OF REAL STIMER EXIT ROUTINE
STIMPARM DS    F            +32: TO BE FILLED IN BY PROGRAM.
STIMERDE DS    0H
*
***********************************************************************
* THE FOLLOWING SECTION OUR VARIABLES THAT TSSOPCMD NEEDS, PRIMARILY  *
* TO ACCESS THE CALLERS PARAMETER LIST.                               *
*                                                                     *
***********************************************************************
MVSCMD   DS    0D
         DC    H'0',H'0'      LENGTH,GARBAGE
         DC    CL255' '       ACTUAL COMMAND
*
TSSOPPRM DS    F              ADDRESS OF THE PARAMETER LIST
*
SSCONENT DS    F              ADDRESS OF THE SSCONCB FOR THIS RUN OF
*                             TSSOPCMD
WAITTIME DS    F              MAXIMUM WAIT TIME FOR THE MVS COMMAND
*
MAXLINES DS    F              MAXIMUM NUMBER OF LINES TO GET BACK FOR
*                             OUTPUT.
AUTHBYTE DS    H              AUTHORIZATION FOR THE MVS COMMAND TO BE
*                             ISSUED.
*
USERID   DS    CL8            USER IDENTIFER (SUPPLIED BY CALLER OF
*                             TSSOPCMD.
*
ICBADDR  DS    F              ADDRESS OF ICB.
RETCODE  DS    H              RETURN CODE TO GIVE TO CALLER
***********************************************************************
* THE FOLLOWING SECTION DENOTES THE ECB LIST THAT TSSOPCMD WILL WAIT  *
* ON                                                                  *
***********************************************************************
LISTECBS DS    0F
         DC    A(0)            ONE FOR THE OSCMDECB
         DC    X'80'
         DC    A(0)
*
SS09ECB  DS    F
STIMRECB DS    F
*
OPESTAED ESTAE 0,MF=L
OSCMDATD DSECT
***********************************************************************
* WORK AREA FOR TSSOPCMD.                                             *
***********************************************************************
OSWKAREA DS    CL200

         SSCONCBH
         SSCONCB
         TSSOCVT
         COPY  TSSODATD
         OSCMDICB
         CVT   DSECT=YES
         IEFJSCVT
         IEFJESCT
UCM      DSECT
         IEECUCM
         END   TSSOPCMD
 PUNCH ' SETCODE  AC(1)'
 PUNCH ' IDENTIFY TSSOPCMD(''TSSO V 4.3.0 &SYSDATE &SYSTIME'') '
 PUNCH ' INCLUDE  SYSLMOD(TSSOPREC)'
 PUNCH ' ENTRY    TSSOPCMD'
 PUNCH ' NAME     TSSOPCMD(R)'
         END
