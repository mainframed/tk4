         MACRO
&LAB     FORMAT &STUFF,&TO=,&WKA=
.* MACRO 'FORMAT' WRITTEN MAY,1975 BY HOWARD GILBERT
.* FUNCTION -- GENERATE MESSAGE WITH INSERTS FOR OUTPUT
.* CODE GENERATED IS INLINE AND POTENTIALLY REENTRANT
.* REGISTER 0 IS USED BY THE EXPANSION OF THIS MACRO
.* THERE ARE A VARIABLE NUMBER OF POSITONAL OPERANDS, EACH A SUBLIST OF
.*     THREE ELEMENTS:
.*          1) THE DATA ELEMENT OR LITERAL. MUST BE A RELOCATABLE
.*             EXPRESSION OR CHARACTER STRING ENCLOSED IN QUOTES,
.*             OR A SELF-DEFINING COLUMN SPECIFICATION.
.*          2) THE DATA TYPE OF THE ELEMENT. MUST BE EXPLICITLY
.*             DECLARED SO AS TO BE AVAILABEL AT PRE-ASSEMBLY TIME.
.*               VALID VALUES ARE '1','2','3','4' FOR 1-4 BYTE FIX BIN
.*                  'A' FOR SYMBOLIC TAG OF CHARACTER DATA.
.*                  'P' FOR PACKED DECIMAL
.*                  ''  (NULL) FOR CHARACTER LITERAL AS FIRST ELEMENT
.*          3) FORMAT OF OUTPUT. OPTIONS INCLUDE:
.*                  A PICTURE SPECIFICATION OF 'Z','9','$', AND STATIC
.*                     EDITING CAHRACTERS LIKE '/' AND '.'. VALID FOR
.*                     1,2,3,4, AND P TYPES.
.*                  A STRING OF 'X'S SIGNIFYING A HEX FIELD. ONE 'X'
.*                     FOR EACH HEX DIGIT. VALID TYPES ARE 1,2,3,4.
.*                  THE CONSTANT LENGTH OF THE REMOTE CHARACTER FIELD
.*                     FOR TYPE 'A'.
.*                  (OMITTED FOR LITERAL CONSTANT)
.* TWO KEYWORD ARGUMENTS ARE REQUIRED.
.* TO=  SPECIFIES THE TARGET MESSAGE BUFFER. MAY BE A SUBLIST
.* AND IF IT IS THE SECOND ELEMENT MUST BE A SELF-DEFINING
.* TERM GIVING THE LENGTHSO THE BUFFER CAN BE CLEARED WITH
.* BLANKS.
.* WKA=  SPECIFIES THE WORK AREA. IT MUST BE A 12  BYTE FIELD
.* STARTING ON A DOUBLE WORD BOUNDARY. IF HEX CONVERSION IS
.* NOT REQUESTED, AN 8 BYTE FIELD WILL DO. AFTER THE FIRST
.* MACRO CALL TO FORMAT, THIS KEYWORD MAY BE OMITTED.
         GBLC  &FMTWKA
         LCLA  &ARGN,&POSIT,&DIG,&LP
         LCLC  &CHR
&ARGN    SETA  1
&POSIT   SETA  0
&LAB     DS    0H
.* CHECK ENTRY CONDITIONS
         AIF   ('&TO(1)' EQ '').ERROR1
         AIF   ('&WKA' EQ '' AND '&FMTWKA' EQ '').ERROR2
         AIF   ('&WKA' EQ '').N0
&FMTWKA  SETC  '&WKA'         SAVE WORK AREA NAME
.* NOW WE DECIDE IF THE BUFFER MUST BE BLANKED AND
.* GENERATE A MVI,MVC COMBINATION TO BLANK IT
.N0      ANOP
&CHR     SETC  T'&TO(2)
         AIF   ('&CHR' EQ 'O').N1
         MVI   &TO(1),C' '
         MVC   &TO(1)+1(&TO(2)-1),&TO(1)
.N1      AIF   ('&SYSLIST(&ARGN,1)' EQ '').ENDER
.* NOW BASED ON THE TYPE DECLARATION WE PROVIDE UNIFORM
.* STATUS FOR VARIOUS VALUES. FOR 1,2,3 OR 4 THE VALUE IS
.* LOADED IN R0 BY IC,ICM,LH,L.
         AIF   ('&SYSLIST(&ARGN,2)' NE '1').N2
         SR    0,0
         IC    0,&SYSLIST(&ARGN,1)
         AGO   .CVD
.N2      AIF   ('&SYSLIST(&ARGN,2)' NE '2').N3
         AIF   ('&SYSLIST(&ARGN,3)'(1,1) NE 'X').N25
         SR    0,0
         ICM   0,B'0011',&SYSLIST(&ARGN,1)
         AGO   .CVD
.N25     LH    0,&SYSLIST(&ARGN,1)
         AGO   .CVD
.N3      AIF   ('&SYSLIST(&ARGN,2)' NE '3').N4
         SR    0,0
         ICM   0,B'0111',&SYSLIST(&ARGN,1)
         AGO   .CVD
.N4      AIF   ('&SYSLIST(&ARGN,2)' NE '4').N5
         ICM   0,15,&SYSLIST(&ARGN,1)
         AGO   .CVD
.* PACKED DECIMAL FIELDS ARE PROCESSED SEPARATELY.
.N5      AIF   ('&SYSLIST(&ARGN,2)' NE 'P').N6
         EDIT  FROM=&SYSLIST(&ARGN,1),TO=&TO(1)+&POSIT,MASK=' &SYSLIST(X
               &ARGN,3)'
&POSIT   SETA  &POSIT+K'&SYSLIST(&ARGN,3)+1
         AGO   .NXT
.* REMOTE CHARACTER DATA IS MOVED INTO THE BUFFER WITH A MVC
.N6      AIF   ('&SYSLIST(&ARGN,2)' NE 'A').N7
         MVC   &TO(1)+&POSIT.(&SYSLIST(&ARGN,3)),&SYSLIST(&ARGN,1)
&POSIT   SETA  &POSIT+&SYSLIST(&ARGN,3)
         AGO   .NXT
.* THE NEXT BLOCK HANDLES THE NON SUBLIST ELEMENTS, EITHER
.* QUOTED TEXT OR COLUMN TAB SPECIFICATIONS
.N7      AIF   ('&SYSLIST(&ARGN,2)' NE '').ERROR3
         AIF   (T'&SYSLIST(&ARGN,1) NE 'N').N75
.* TAB SPECIFICATION SIMPLY BUMP THE CURRENT VALUE OF POSIT,
.* THE POSITION-REMEMBERING VARIABLE
&POSIT   SETA  &SYSLIST(&ARGN,1)
         AGO   .NXT
.N75     ANOP
.* CHARACTER LITERAL DATA IS CONVERTED TO AN ASSEMBLER LITERAL
.* NOTATION AMD MOVED INTO THE BUFFER
         AIF   (K'&SYSLIST(&ARGN,1) NE 3).N8
         MVI   &TO(1)+&POSIT,C&SYSLIST(&ARGN,1)
&POSIT   SETA  &POSIT+1
         AGO   .NXT
.N8      ANOP
&LP      SETA  K'&SYSLIST(&ARGN,1)-2
         MVC   &TO(1)+&POSIT.(&LP),=C&SYSLIST(&ARGN,1)
&POSIT   SETA  &POSIT+K'&SYSLIST(&ARGN,1)-2
         AGO   .NXT
.CVD     AIF   ('&SYSLIST(&ARGN,3)'(1,1) EQ 'X').HEX
.* THE FOLLOWING  CODE HANDLES THE OUTPUT OF 1,2,3 OR 4 TYPE
.* DATA ACCORDING TO A PICTURE FORMAT.
         CVD   0,&FMTWKA
.* THE EDIT MACRO WILL CONVERT DATA FROM LEFT TO RIGHT.
.* TO GET GOOD OUTPUT, AN OFFSET MUST BE ADDED TO THE
.* ADDRESS OF &WKA SO THE OUTPUT WILL CONTAIN THE RIGHTMOST
.* DIGITS. THIS LOOP COUNTS UP DIGIT SELECTORS IN THE FORMAT
.* TO CALCULATE THE OFFSET.
&DIG     SETA  0
&LP      SETA  1
.LOP     ANOP
&CHR     SETC  '&SYSLIST(&ARGN,3)'(&LP,1)
         AIF   ('&CHR' NE '9' AND '&CHR' NE 'Z' AND '&CHR' NE '$').N10
&DIG     SETA  &DIG+1
.N10     ANOP
&LP      SETA  &LP+1
         AIF   (&LP LE K'&SYSLIST(&ARGN,3)).LOP
.* END OF LOOP
&DIG     SETA  &DIG/2+1
         EDIT  TO=&TO(1)+&POSIT,FROM=&FMTWKA+8-&DIG,MASK=' &SYSLIST(&ARX
               GN,3)'
&POSIT   SETA  &POSIT+K'&SYSLIST(&ARGN,3)+1
         AGO   .NXT
.* THE FOLLOWING CODE HANDLES THE CONVERSION TO HEX.
.* IT FOLLOWS THE USUAL SORT OF CUTE TIRCKS
.HEX     ST    0,&FMTWKA+8
         UNPK  &FMTWKA.(7),&FMTWKA+8(4)
         MVC   &FMTWKA+7(1),&FMTWKA+11
         NC    &FMTWKA.(8),=X'0F0F0F0F0F0F0F0F'
         TR    &FMTWKA.(8),=C'0123456789ABCDEF'
&LP      SETA  K'&SYSLIST(&ARGN,3)
         MVC   &TO(1)+&POSIT.(&LP),&FMTWKA+8-&LP
&POSIT   SETA  &POSIT+K'&SYSLIST(&ARGN,3)
.NXT     ANOP
&ARGN    SETA  &ARGN+1
         AGO   .N1
.ERROR1  MNOTE 8,'NO ''TO'' STRING'
         MEXIT
.ERROR2  MNOTE 8,'NO WORK AREA PROVIDED'
         MEXIT
.ERROR3  MNOTE 8,'INVALID ITEM FORMAT &SYSLIST(&ARGN,2)'
.ENDER   MEND
