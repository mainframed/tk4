         TITLE ' T S S O  WTOR TSO INTERFACE'
OSASK    CSECT
         EQUATES
***********************************************************************
* THIS IS THE OSASK COMMAND PROCESSOR. IT IS A TSO COMMAND PROCESSOR  *
* DESIGNED TO RUN UNDER THE TSSO SUBSYSTEM, OR FROM A TSO ADDRESS     *
* SPACE. THE COMMAND WILL BEHAVE DIFFERENTLY DEPENDING ON THE         *
* ENVIRONMENT IN WHICH IT IS INVOKED. THE COMMAND CAN BE RUN FROM     *
* EITHER TSSO, OR ANY AUTHORIZED TSO ADDRESS SPACE.                   *
*                                                                     *
* IF UNDER TSSO.                                                      *
*                                                                     *
* 1) CHECKS TO SEE IF THE COMMAND IS RUNNING UNDER A CLIST. IF NOT    *
*    TERMINATE.                                                       *
*                                                                     *
* 2) OBTAIN VALUES FOR REPLYWAIT.                                     *
*                                                                     *
* 3) ISSUE A WTOR CONTAINING THE MESSAGE TO THE CONSOLE THAT ISSUED   *
*    THE COMMAND.                                                     *
*                                                                     *
* 4) OBTAIN RESPONSE FROM WTOR AND PLACE IN CLIST VARIABLES... OR     *
*    PUT A DUMMY RESPONSE INTO CLIST VARIABLES.                       *
*                                                                     *
* 5) TERMINATE.                                                       *
*                                                                     *
*                                                                     *
* IF UNDER TSO:                                                       *
*                                                                     *
* 1) CHECK TO SEE IF RUNNING UNDER A CLIST. IF YES, OBTAIN VALUE FOR  *
*    COMMAND REPLYWAIT. IF NOT, DEFAULT REPLYWAIT TO 60 SECONDS...    *
*
* 2) ISSUES A WTOR CONTAINING THE MESSAGE THE MASTER CONSOLE, AND WAIT*
*                                                                     *
* 3) IF INVOKED FROM A CLIST, THE COMMAND CREATES CLIST VARIABLES.    *
*    IF INVOKED FROM THE COMMAND LINE, THE COMMAND WILL PUTLINE       *
*    THE RESPONSE TO THE TERMINAL.                                    *
*                                                                     *
* 4) TERMINATE.                                                       *
*                                                                     *
*                                                                     *
***********************************************************************
***********************************************************************
         STM   R14,R12,12(R13)    SAVE CALLERS REGSITERS
         LR    R12,R15            LOAD ENTRY POINT OF OSASK
         LR    R8,R1              SAVE INPUT PARMS.
         USING OSASK,R12
         B     EYE1
         COPY  EYECATCH
EYE1     DS    0H
         GETMAIN R,LV=72          WE NEED STORAGE FOR THE SAVE AREA
         ST    R13,4(R1)          STORE ADDRESS OF CALLERS SAVE AREA
*                                  SAVE AREA
         ST    R1,8(R13)          REMEMBER WHERE THIS CORE IS
         LR    R13,R1             KEEP A COPY IN R13
*
         GETMAIN R,LV=4096         GETMAIN SOME PRIVATE STORAGE...
         LR    R11,R1
         USING OSASDATD,R11
***********************************************************************
* THIS SECTION OF THE CODE SETS UP THE TSO IOPL, ALLOWING FOR GETLINE *
* AND PUTLINE.                                                        *
***********************************************************************
         LA    R2,IOPLADS
         USING IOPL,R2
         L     R3,0(8)
         ST    R3,CPPLCBUF
         L     R3,4(8)
         ST    R3,CPPLUPT
         ST    R3,IOPLUPT
         L     R3,8(8)
         ST    R3,CPPLPSCB
         L     R3,12(8)
         ST    R3,CPPLECT
         ST    R3,IOPLECT
         L     R3,ECBADS
         ST    R3,IOPLECB
*
***********************************************************************
* SINCE OSASK IS A RE-ENTRANT MODULE, WE WILL COPY THE CONSTANTS INTO *
* THE VARIABLE WORK AREA.                                             *
***********************************************************************
*
         XC    FLAGS(4),FLAGS
         MVC   OSCALL1D(OSCALL1E-OSCALL1C),OSCALL1C
         MVC   STIMERD(STIMRPEN-STIMRPRE),STIMRPRE     COPY STIMER
*                                                   PREPROCESSING EXIT
         MVC   MESSAGED(MESSAGEE-MESSAGEC),MESSAGEC
         MVC   LINE1HD(80),LINE1HC
         MVC   LINE2HD(80),LINE2HC
         MVC   LINE3HD(80),LINE3HC
         MVC   LINE4HD(80),LINE4HC
         MVC   LINE6HD(80),LINE6HC
         MVC   LINE12HD(80),LINE12HC
         LA    R2,OSASDATD
         ST    R2,STIMPARM         GET ADDRESS OF DSECT AREA FOR PARMS
         LA    R2,STIMEREX         GET ADDRESS OF STIMER EXIT
         ST    R2,STIMREAL         AND TELL STIMER PREPROCESSOR
***********************************************************************
* WE MUST CHECK TO SEE IF THE ENVIRONMENT IS AMENIABLE TO RUNNING THE *
* COMMAND. LETS CHECK IF THIS IS THE TSSO ADDRESS SPACE.              *
*                                                                     *
***********************************************************************
         L     R2,X'224'         GET OUR ASCB
         GETCVT (R10)
         USING TSSOCVT,R10
         LTR   R10,R10           IS TSSO EVEN THERE ?
         BZ    ERROR12           NO, BLOW HIM AWAY
         TM    TSSOFLG1,TSSOGONE TSSO BLOWN AWAY ?
         BO    ERROR12           YUP- SORRY GUY.
         C     R2,TSSOASCB
         BNE   NOTUNDSS          NO, NOT UNDER TSSO...
         L     R10,TSSODSEC
         USING DATD,R10
***********************************************************************
* YES, WE ARE UNDER THE TSSO ADDRESS SPACE.                           *
* THIS MEANS THAT A PARTICULAR CONSOLE HAS ISSUED THIS COMMAND. LETS  *
* SAVE THE CONSOLE ID, AND USE IT WHEN ISSUING THE WTOR.              *
***********************************************************************
         L     R2,CURRCONS       GET CONSOLE ID OF GUY WITH CLIST
         ST    R2,CONSOLE
         OI    FLAGS,X'10'       INDICATE WITH FLAG THAT TSSO IS THE
*                                CURRENT USER.
         B     GETMSG
NOTUNDSS DS    0H
***********************************************************************
* THE NEXT STEP IS TO EXTRACT THE MVS COMMAND TO BE EXECUTED FROM THE *
* BUFFER. WE WILL USE THE CPPLCBUF FIELD PREVIOUSLY SET UP.           *
***********************************************************************
         XR    R2,R2
         ST    R2,CONSOLE
*
GETMSG   DS    0H
         L     R2,CPPLCBUF         GET THE COMMAND BUFFER.
         LH    R3,2(R2)            GET THE OFFSET TO THE FIRST OPERAND
         LH    R4,0(R2)            GET THE TOTAL LENGTH OF THE BUFFER
         LA    R5,4(R3,R2)         R5 NOW POINTS AT THE MESSAGE
         LA    R3,0(R2,R4)         R3 NOW POINTS AT THE END OF THE MSG
         SR    R3,R5               R3 NOW HAS LENGTH OF THE MESSAGE
         LTR   R3,R3
         CH    R3,=H'1'
         BL    ERROR1
         CH    R3,=H'120'
         BH    ERROR1
         MVI   MESSAGED+12,X'40'
         MVC   MESSAGED+13(124),MESSAGED+12
         BCTR  R3,0
         EX    R3,MOVEMSG
         B     AR1
MOVEMSG  MVC   MESSAGED+12(0),0(R5)
AR1      DS    0H
*
*
***********************************************************************
* LET US CHECK TO SEE IF WE WERE INVOKED USING TSO/E RELEASE 2. IF NOT*
* WE WILL TERMINATE.                                                  *
***********************************************************************
         L     R9,16               GET CVT
         USING CVT,R9
         L     R9,CVTTVT           GET TIME SHARING VECTOR TABLE
         USING TSVT,R9
         LTR   R9,R9               IS THIS A TSO/E R2 SYSTEM ?
         BZ    ERROR2
***********************************************************************
* THE NEXT STEP IS TO EXTRACT THE VALUE OF THE REPLYWAIT CLIST        *
* VARIABLE, IF ONE EXISTS...                                          *
***********************************************************************
         L     R15,TSVTVACC        GET ADDRESS OF CLIST ROUTINE TO
         ST    R15,VACCRTN         STORE THIS SUCKER AWAY
*                                  ACCESS PROGRAM VARIABLES.
         LA    R2,TSVERETR         "ENTRY CODE" = RETRIEVE
         ST    R2,ECODE            SET PARM 1
*
*
*
*
         CALL  (15),                                                   X
               (ECODE,             ENTRY CODE                          X
               REPVARA,            PTR TO VAR NAME                     X
               REPVARL,            PTR TO VAR LENGTH                   X
               VALPTR,             PTR TO VALUE                        X
               VALLENGT,           PTR TO VALUE LENGTH                 X
               TOKEN),             TOKEN                               X
               VL,MF=(E,OSCALL1D)
*
         DROP  R9
         LTR   R15,R15
         BZ    WAITOK              YUP, COMMAND OUT WAS OK
         CH    R15,=H'40'          CLIST ENVIRONMENT ACTIVE ?
         BE    NOTUNDCL            NO, WE ARE NOT UNDER A CLIST...
         CH    R15,=H'52'          UNDEFINED SYMBOL ?
         BNE   ERROR3              NO, WE HAVE REAL PROBLEMS.
DEFCMDOT DS    0H
         L     R15,=F'6000'
         ST    R15,REPLYWTT        SELECT DEFAULT TIME OF SIXTY SECONDS
         B     PROCWTOR            GO AND PROCESS THE WTOR.
*
WAITOK   DS    0H
         L     R1,VALPTR           GET ADDRESS OF VARIABLE VALUE
         L     R0,VALLENGT         AND ITS LENGTH
         LTR   R0,R0
         BZ    DEFCMDOT
         LA    R10,OSWKAREA
         CALL  JCECVTDB            GET SOMETHING IN BINARY.
         BNZ   ERROR4
         CH    R1,=H'600'
         BH    ERROR4
         OI    FLAGS,X'80'         INDICATE REPLYWAIT SPECIFIED...
         M     R0,=F'100'
         ST    R1,REPLYWTT         MAXIMUM NUMBER OF LINE TO ALLOW.
         B     PROCWTOR            GET THE MVS WAIT TIME FROM THE CLIST
*                                  IF NOT SPECIFIED, ASSUME 2 SECONDS.
NOTUNDCL DS    0H
***********************************************************************
* HERE, WE HAVE DISCOVERED WE ARE NOT RUNNING UNDER A CLIST. THIS IS  *
* BRANCHED TO FROM THE SECTION OF CODE THAT TRIES TO OBTAIN THE       *
* REPLYWAIT VARIABLE VALUE. THIS IS PERMISSIBLE ONLY IF NOT RUNNING   *
* UNDER THE TSSO ADDRESS SPACE.                                       *
*                                                                     *
*                                                                     *
***********************************************************************
         TM    FLAGS,X'10'         TSSO ADDRESS SPACE ?
         BO    ERROR6              YUP, ILLEGAL (AND IMMORAL)
         OI    FLAGS,X'20'         INDICATE WE ARE NOT UNDER A CLIST
         MVC   REPLYWTT(4),=F'6000' DEFAULT COMMAND WAIT TIME
*                                  IN  .01 SECONDS...
         OI    FLAGS,X'80'         INDICATE REPLYWTT SPECIFIED...
         B     PROCWTOR
PROCWTOR DS    0H
***********************************************************************
* FINALLY, WE ARE READY TO ISSUE THE MVS WTOR.                        *
***********************************************************************
* FIRST, LET US ISSUE THE STIMER SO WE CAN AWAKE FROM THE WTOR IS THE *
* OPERATOR IS OUT FOR COFFEE...                                       *
***********************************************************************
***********************************************************************
         STIMER REAL,STIMERD,BINTVL=REPLYWTT
***********************************************************************
* WE WILL AWAKEN UPON ONE OF TWO EVENTS. IF THE STIMER EXPIRES, THE   *
* STIMEREX EXIT IS DRIVEN, AND THIS WILL POST THE ECB. THIS MEANS THAT*
* THE OPERATOR DID NOT REPLY TO THE WTOR IN TIME, AND THEREFORE, WE   *
* WILL DUMMY UP THE RESPONSE, CANCEL THE WTOR, AND PROCEED TO PARSE   *
* THE WTOR. IF THE OPERATOR DOES RESPOND, WE WILL WAKE UP, CANCEL THE *
* STIMER, AND PARSE THE RESULTS...                                    *
***********************************************************************
         MVI   REPLYADD,C' '
         MVC   REPLYADD+1(132),REPLYADD
         XC    OSASKECB(4),OSASKECB
         XC    STIMRECB(4),STIMRECB
         LA    R2,OSASKECB            GET ADDRESS OF OSASKECB
         ST    R2,LISTECBS            STORE IN LIST
         LA    R2,STIMRECB            GET ADDRESS OF OTHER ECB
         ST    R2,LISTECBS+4           STORE IN LIST
         OI    LISTECBS+4,X'80'       SET HIGH ORDER BYTE
*
         LA    R3,REPLYADD            GET REPLY ADDRESS
         LA    R4,OSASKECB            GET ECB ADDRESS
*
         L     R0,CONSOLE
         WTOR  ,(R3),125,(R4),MF=(E,MESSAGED)
         ST    R1,WTORMSGN
*
         WAIT  ECBLIST=LISTECBS
*
*
***********************************************************************
* WE HAVE BEEN POSTED, EITHER FROM THE WTOR BEING POSTED, OR FROM THE *
* STIMER POPPING...        IF POSTED THROUGH OUR STIMER EXIT, WE ARE  *
* OK, IF POSTED THROUGH THE WTOR ECB , WE SHOULD CANCEL THE STIMER    *
***********************************************************************
         TM    OSASKECB,X'40'              POST BIT ON ?
         BNO   PSTTSTIM
         TTIMER CANCEL
***********************************************************************
* FOLLOWING THE TTIMER, THERE IS A CHANCE THAT THE TIMER EXIT WAS     *
* SCHEDULED (IF TIME REMAINING IS ZERO) BUT NOT YET CALLED. TO HANDLE *
* THIS RARE OCCURANCE, WE WILL CHECK..                                *
***********************************************************************
         LTR   R0,R0          ANY TIME INTERVAL REMAINING ?
         BNZ   NOWAIT2        NO, NO NEED TO BE CONCERNED...
         TM    STIMRECB,X'40' WERE WE ALREADY POSTED ?
         BNZ   NOWAIT2        NO, NO NEED TO BE CONCERNED...
         WAIT  ECB=STIMRECB   WE HAVE TO BE CONCERNED... WAIT TILL
*                             STIMER EXIT POPS BEFORE CONTINUING.
NOWAIT2  DS    0H
         B     PUTRESP
*
PSTTSTIM DS    0H
***********************************************************************
* HERE, THE STIMER EXIT HAS POPPED, AND POSTED THE STIMERECB, MEANING *
* THAT THE OPERATOR HAS GONE OUT FOR COFFEE...                        *
* WE WILL DUMMY UP A RESPONSE FOR THE OPERATOR, AS IF A  RESPONSE WAS *
* RETURNED.                                                           *
***********************************************************************
         MVC   REPLYADD(7),=CL7'NOREPLY'
         L     R0,CONSOLE
         WTO   'OSASK01 OSASK COMMAND TIMING OUT -> REQUEST DELETED'
         L     R2,WTORMSGN         GET WTOR MESSAGE NUMBER
         DOM   MSG=(R2),REPLY=YES
         B     PUTRESP
*
PUTRESP  DS    0H
***********************************************************************
* NEXT, WE MUST GO ABOUT THE BUSINESS OF CONVERTING THE RESPONSE OF   *
* THE MESSAGE INTO CLIST VARIABLES, SO THE CLIST CAN ACCESS THEM.     *
* THIS IS, OF COURSE, ONLY NECCESARY IF THE OSASK COMMAND WAS INVOKED *
* FROM A CLIST.IFNOWE WILL SIMPLY TAKE THE RESPONSE, AND PUTLINE IT   *
* OUT TO THE TSO TERMINAL.                                            *
***********************************************************************
         TM    FLAGS,X'20'     NOT INVOKED FROM A CLIST ?
         BNO   PUTCLSTV        YES, PUTLINE THE RESPONSE TO THE TUBE.
***********************************************************************
* HERE, WE WILL SIMPLY RETURN THE COMMAND RESPONSE TO THE TERMINAL.   *
* THE PUTLINE MACRO WILL BE USED.                                     *
***********************************************************************
         MVC   PUTRESPD(2),=H'125'       LENGTH IS ALWAYS 130
         XC    PUTRESPD+2(2),PUTRESPD+2  CLEAR OUT BUFFER
PUTRLOOP DS    0H
         MVC   PUTRESPD+4(125),REPLYADD
         PUTLINE PARM=PUTBLOK,OUTPUT=(PUTRESPD,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
         B     ENDCMD
*
PUTCLSTV DS    0H
*
         LA    R4,TSVEUPDT         WE WISH TO UPDATE CLIST VARS..
         ST    R4,ECODE
*
         LA    R4,CLVARNME         GET VARNAME PTR
         ST    R4,NAMEPTR          TELL IKJCT441
         MVC   CLVARNME(5),=CL5'REPLY'
*
         LA    R4,5
         ST    R4,NAMELEN
*
GOTNAME  DS    0H
         LA    R2,REPLYADD        POINT TO REPLY ADDRESS
         ST    R2,VALUEPTR
*
         LA    R3,REPLYADD
         LA    R4,REPLYADD+132    START AT LAST CHARACTER
LLOOP    DS    0H
         CLI   0(R4),C' '
         BNE   NBLNKFND           FOUND A NON  BLANK
         BCTR  R4,0
         CR    R4,R3              ARE WE DONE
         BL    NULLVAR            YUP, PITTY...   (PTF 2)
         B     LLOOP
*
NULLVAR  DS    0H
         XR    R4,R4
         ST    R4,VALUELEN
         B     CALLTSV
*
NBLNKFND DS    0H
         SR    R4,R3              GOT THE LENGTH IN R4
         LA    R4,1(R4)
         ST    R4,VALUELEN
*
CALLTSV  DS    0H
         L     R15,VACCRTN         GET VARIABLE ACCESS ROUTINE
         CALL  (15),                                                   X
               (ECODE,             ENTRY CODE                          X
               NAMEPTR,            PTR TO VAR NAME                     X
               NAMELEN,            PTR TO VAR LENGTH                   X
               VALUEPTR,           PTR TO VALUE                        X
               VALUELEN,           PTR TO VALUE LENGTH                 X
               TOKEN),             TOKEN                               X
               VL,MF=(E,OSCALL1D)
*
         LTR   R15,R15
         BNZ   ERROR3
*
***********************************************************************
* NOW, WE WANT TO PARSE THIS RETURNED LINE INTO ITS COMPONENT FORM. TO*
* ACCOMPLISH THIS, WE CALL THE TSSOPARS ROUTINE, SCAN THE RESULTS,    *
* AND PUT THE WORDS INTO CLIST VARIABLES.                             *
* WE BEGIN BY SETTING UP THE CALL TO TSSOPARS                         *
***********************************************************************
         ST    R2,OSPARS1      FIRST PARM -> ADDRESS OF STRING TO PARSE
*
         MVC   OSPARS2(4),=F'125' SECOND PARM -> LENGTH OF STRING
*
         MVI   OSPARARR,X'40'
         MVC   OSPARARR+1(255),OSPARARR   BLANK OUT THE RETURNED ARRAY
         MVC   OSPARARR+255(64),OSPARARR  FINISH THE JOB
         MVC   OSPARARR(2),=H'20'         MAX 20 TOKENS...
         LA    R4,OSPARARR                GET ADDRESS
         ST    R4,OSPARS3                 AND PASS TO TSSOPARS
*
         LA    R4,WORDSEPS                TELL TSSOPARS ABOUT THE
         ST    R4,OSPARS4             SEPARATOR CHARACTERS.
         MVC   WORDSEPS(4),=CL4' ,= '
*
         LA    R1,OSPARSPM
         CALL  TSSOPARS              ** PARSE IT **
         LH    R8,OSPARARR
         ST    R8,WORDLINE
***********************************************************************
* PARSE HAS RETURNED.. LETS ANALYZE THE RESULTS...                    *
* FIRST, GET NUMBER OF WORDS RETURNED ON THIS LINE...                 *
***********************************************************************
         LA    R4,CLVARNME           GET VARIABLE NAME
         ST    R4,NAMEPTR
         A     R4,NAMELEN            GET LENGTH OF VARIABLE SO FAR...
         MVI   0(R4),C'W'            MOVE IN A "W"
*
*
         L     R4,NAMELEN
         LA    R4,1(R4)
         ST    R4,NAMELEN
*
         LA    R4,EBCCOUNT
         ST    R4,VALUEPTR
         L     R1,WORDLINE           GET NUMBER OF WORDS RETURNED
         XR    R0,R0
         LA    R10,OSWKAREA
         CALL  JCECVTBD
         STCM  R1,B'1111',EBCCOUNT
*
         LA    R4,4
         ST    R4,VALUELEN
*
         L     R15,VACCRTN         GET VARIABLE ACCESS ROUTINE
         CALL  (15),                                                   X
               (ECODE,             ENTRY CODE                          X
               NAMEPTR,            PTR TO VAR NAME                     X
               NAMELEN,            PTR TO VAR LENGTH                   X
               VALUEPTR,           PTR TO VALUE                        X
               VALUELEN,           PTR TO VALUE LENGTH                 X
               TOKEN),             TOKEN                               X
               VL,MF=(E,OSCALL1D)
         LTR   R15,R15
         BNZ   ERROR3
*
***********************************************************************
* THE NEXT STEP IS TO CREATE THE REPLYWN   VARIABLES, WHERE "N" IS    *
* THE CURRENT WORD THAT WE ARE WORKING ON...                          *
* THE STRING IS PARSED, WE JUST NEED TO LOOP AROUND, PLACING IT IN    *
* CLIST VARIABLES.                                                    *
***********************************************************************
*
*
         LA    R4,1
         ST    R4,CURRWNUM               INITIALIZE CURRENT WORD
         LA    R4,OSPARARR+2
         ST    R4,CURRWPOS               INITIALIZE CURRENT POSITION IN
*                                        THE PARSE ARRAY
*
WORDLOOP DS    0H
         L     R4,NAMELEN               LOAD LENGTH OF VAR NAME SO FAR
         ST    R4,NAMELENW              AND KEEP A COPY
         L     R4,CURRWNUM               WHICH WORD ARE WE STARTING ON?
         C     R4,WORDLINE               IS IT PASSED THE LAST WORD ?
         BH    ENDWORDS                  YUP, NO MORE WORDS TO WORK ON
*
         LA    R4,CLVARNME               GET THE VARIABLE NAME
         ST    R4,NAMEPTR                TELL CLIST ROUTINE
*
         L     R4,CURRWNUM               GET BACK CURRENT WORD NUM
         LR    R1,R4
         XR    R0,R0
         LA    R10,OSWKAREA
         CALL  JCECVTBD
         CH    R4,=H'10'
         BL    WOR1BYTE
WOR2BYTE DS    0H
         LA    R3,CLVARNME
         A     R3,NAMELENW               START OF VARIABLE PLUS
*                                        LENGTH = A(END OF VARIABLE)
         STCM  R1,B'0011',0(R3)          PLACE EBCIDIC FOR WORD NUMBER
         L     R3,NAMELENW               GET LENGTH OF NAME (INCLUDING
*                                        THE LEADING "W")
         LA    R3,2(R3)                  INCREMENT BY TWO BYTES
         ST    R3,NAMELENW               RESTORE LENGTH OF NAME
         B     GOTNAME2
WOR1BYTE DS    0H
         LA    R3,CLVARNME
         A     R3,NAMELENW               START OF VARIABLE PLUS
*                                        LENGTH = A(END OF VARIABLE)
         STCM  R1,B'0001',0(R3)          PLACE EBCIDIC FOR WORD NUMBER
         L     R3,NAMELENW               GET LENGTH OF NAME (INCLUDING
*                                        THE LEADING "W")
         LA    R3,1(R3)                  INCREMENT BY TWO BYTES
         ST    R3,NAMELENW               RESTORE LENGTH OF NAME
         B     GOTNAME2
GOTNAME2 DS    0H
***********************************************************************
* CALCULATE THE LENGTH OF THE RETURNED WORD.                          *
*                                                                     *
***********************************************************************
         L     R4,CURRWPOS
         LA    R5,16          MAXIMUM LENGTH FOR WORD IS 16..
         XR    R6,R6
WLENLOOP DS    0H
         CLI   0(R4),C' '    BLANK FOUND ?
         BE    WLENELOP      YUP.. WE HAVE THE LENGTH IN R6
         LA    R6,1(R6)
         LA    R4,1(R4)
         BCT   R5,WLENLOOP
WLENELOP DS    0H
         ST    R6,VALUELEN
*
         L     R4,CURRWPOS
         ST    R4,VALUEPTR
*
         L     R15,VACCRTN         GET VARIABLE ACCESS ROUTINE
         CALL  (15),                                                   X
               (ECODE,             ENTRY CODE                          X
               NAMEPTR,            PTR TO VAR NAME                     X
               NAMELENW,           PTR TO VAR LENGTH                   X
               VALUEPTR,           PTR TO VALUE                        X
               VALUELEN,           PTR TO VALUE LENGTH                 X
               TOKEN),             TOKEN                               X
               VL,MF=(E,OSCALL1D)
*
         LTR   R15,R15
         BNZ   ERROR3
*
         L     R4,CURRWPOS
         LA    R4,16(R4)
         ST    R4,CURRWPOS
*
         L     R4,CURRWNUM
         LA    R4,1(R4)
         ST    R4,CURRWNUM
         B     WORDLOOP
*
ENDWORDS DS    0H
***********************************************************************
* WE COME HERE WHEN WE ARE COMPLETED PROCESSING THE LINE... WE SHOULD *
* NOW BE FINISHED...                                                  *
***********************************************************************
ENDCMD   DS    0H
ENDPROG  DS    0H
         FREEMAIN R,LV=4096,A=(R11)   FREEMAIN THE PRIVATE STORAGE
         LR    R1,R13              GET ADDRESS OF CORE IN R1
         L     R13,4(R13)          RESTORE R13
         FREEMAIN R,LV=72,A=(R1)    FREE UP THE CORE
         XR    R8,R8
         B     ENDPROG1
ENDPROG1 DS    0H
         L     R14,12(R13)         RELOAD RETURN POINT
         LR    R15,R8              PICK UP RETURN CODE.
         LM    R0,R12,20(R13)      RELOAD MORE REGISTERS
         BR    R14
*
***********************************************************************
* E R R O R   C O N D I T I O N S ...                                 *
*                                                                     *
***********************************************************************
ERROR1   DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(LINE1HD,TERM,SINGLE,DATA),       X
               MF=(E,IOPLADS)
         B     ENDPROG
*
ERROR2   DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(LINE2HD,TERM,SINGLE,DATA),       X
               MF=(E,IOPLADS)
         B     ENDPROG
*
ERROR3   DS    0H
         CH    R15,=H'40'             INCORRECT ENVIRONMENT
         BE    ERROR6                 JUST IN CASE
         PUTLINE PARM=PUTBLOK,OUTPUT=(LINE3HD,TERM,SINGLE,DATA),       X
               MF=(E,IOPLADS)
         B     ENDPROG
*
ERROR4   DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(LINE4HD,TERM,SINGLE,DATA),       X
               MF=(E,IOPLADS)
         B     ENDPROG
*
ERROR6   DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(LINE6HD,TERM,SINGLE,DATA),       X
               MF=(E,IOPLADS)
         B     ENDPROG
*
ERROR12  DS    0H
         PUTLINE PARM=PUTBLOK,OUTPUT=(LINE12HD,TERM,SINGLE,DATA),      X
               MF=(E,IOPLADS)
         B     ENDPROG

         TITLE 'STIMEREX'                                           RPS
STIMEREX DS    0H
***********************************************************************
* THIS IS THE STIMER EXIT ROUTINE. IT IS BRANCHED TO BY THE STIMER    *
* PREPROCESSING ROUTINE THAT IS SET UP TO PASS PARAMETERS. THE        *
* REGISTERS ON ENTRY TO THIS ROUTINE ARE:                             *
*                                                                     *
* R1: ADDRESS OF THE OSASK DSECT.   R15: ADDRESS OF STIMEREX          *
* R13: SAVEAREA                                                       *
* R14: PLACE TO RETURN TO.                                            *
*
* SINCE THIS CODE MUST RESTORE ALL REGISTERS TO THE OPERATING SYSTEM,
* IT WILL LOCATE THE "REAL" REGS 1 AND 15 THROUGH THE
***********************************************************************
         PUSH  USING
         DROP  R12                                           RPS
         STM   R14,R12,12(R13)     SAVE OS REGS FOR STIMER
         LR    R12,R15             GET GOOD BASE
         USING STIMEREX,R12        TELL GOOD ASSEMBLER
         LR    R11,R1              GET ADDRESS OF OSASK DSECT AREA
         USING OSASDATD,R11        TELL MEDIOCRE ASSEMBLER
***********************************************************************
* THE WHOLE IDEA OF THIS CODE IS TO POST THE ECB ASSOCIATED WITH THE  *
* STIMER. THE ECB IS NOW CONVIENTLY ADDRESSABLE.                      *
***********************************************************************
         LA    R2,STIMRECB         GET ADDRESS OF STIMER ECB
         POST  (R2),0              POST ECB WITH COMP CODE ZERO
***********************************************************************
* NOW WE WILL TERMINATE STIMER EXIT PROCESSING BY RESTORING REGISTERS *
* INCLUDING R1 AND R15 PREVIOUSLY DESTROYED. NOTE THAT THESE WERE     *
* SAVED IN THE DSECT AREA, WHICH WE STILL HAVE ADDRESSABILITY TO.     *
***********************************************************************
         L     R15,R15SAVED        RESTORE R15
         L     R1,R1SAVED          RESTORE R1
         L     R14,12(R13)         RESTORE RETURN ADDRESS
         LM    R2,R12,28(R13)      RESTORE EVERYTHING ELSE.
         BR    R14
         DROP  R11
         DROP  R12
         POP   USING
         TITLE 'STIMRPRE'                                          RPS
*
************************************************************
*                                                          *
*        CONSTANTS AND WORKAREAS                           *
*                                                          *
************************************************************
***********************************************************************
* ALTHOUGH THIS LOOKS LIKE REAL CODE, IT'S ACTUALLY A MECHANISM USED  *
* TO PASS A PARAMETER TO A STIMER EXIT ROUTINE. WE WILL PREPORCESS THE*
* ROUTINE WITH THIS ONE, WHICH IS COPIED TO THE DSECT AREA.           *
***********************************************************************
STIMRPRE DS    0D
         PUSH  USING                                          RPS
         DROP  R15                                            RPS
         USING *,R15            ON ENTRY, R15 POINTS TO STIMER EXIT.
         ST    R15,20(R15)  +0: STORE REGISTER 15 IN DSECT AREA
         ST    R1,24(R15)   +4: STORE REGISTER 1  IN DSECT AREA
         L     R1,PARMADDR  +8: LOAD PARAMETER R1 FROM DSECT AREA
         L     R15,STMRADDR +12: LOAD REGISTER 15 WITH "REAL" STIMER
*                                EXIT ROUTINE
         BR    R15          +16: BRANCH TO REAL STIMER EXIT ROUTINE
R15SAVE  DS    A            +20: ROOM FOR R15
R1SAVE   DS    A            +24: ROOM FOR R1
STMRADDR DC    A(STIMEREX)  +28: ADDRESS OF REAL STIMER EXIT ROUTINE
PARMADDR DS    F            +32: TO BE FILLED IN BY PROGRAM.
STIMRPEN DS    0H
         DROP  R15
         POP   USING                                        RPS
         TITLE 'OSASK MAINLINE'                             RPS
*
*
REPVARA  DC    A(REPVAR)
REPVAR   DC    CL9'REPLYWAIT'
REPVARL  DC    F'9'
*
OSCALL1C CALL  ,(0,0,0,0,0,0),MF=L
OSCALL1E EQU  *
*
MESSAGEC WTOR  '                                                       X
                                                                       X
                             ',MCSFLAG=(REG0,RESP),DESC=(6),MF=L
*
MESSAGEE EQU   *
LINE1HC  DC    H'80',H'0'
LINE1H   DC    CL76'THE MESSAGE TO BE ISSUED IS INVALID ( <1 OR >120 CHX
               ARACTERS'
*
LINE2HC  DC    H'80',H'0'
LINE2H   DC    CL76'OSASK TERMINATING BECAUSE IT WAS NOT UNDER TSO/E REX
               LEASE 2 OR HIGHER'
*
LINE3HC  DC    H'80',H'0'
LINE3H   DC    CL76'OSASK TERMINATING --> ERROR IN CLIST VARIABLE ACCESX
               S ROUTINE'
*
LINE4HC  DC    H'80',H'0'
LINE4H   DC    CL76'OSASK TERMINATING --> VALUE FOR REPLYWAIT NOT BETWEX
               EN 10 AND 600'
*
LINE6HC  DC    H'80',H'0'
LINE6H   DC    CL76'OSASK TERMINATING --> IT MUST BE ISSUED FROM A CLISX
               T ENVIRONMENT'
*
LINE12HC DC    H'80',H'0'
LINE12H  DC    CL76'OSASK TERMINATING --> TSSO IS NOT AVAILABLE'
************************************************************
*                                                          *
*        VARIABLE WORK AREAS, COVERED BY BASE REG R11.     *
*                                                          *
************************************************************
OSASDATD DSECT
OSWKAREA DS    CL200
*
         TITLE 'STRMERD'                                        RPS
STIMERD  DS    0D
         PUSH  USING                                            RPS
         DROP  R12                                              RPS
         USING *,R15            ON ENTRY, R15 POINTS TO STIMER EXIT.
         ST    R15,R15SAVED +0: STORE REGISTER 15 IN DSECT AREA
         ST    R1,R1SAVED   +4: STORE REGISTER 1  IN DSECT AREA
         L     R1,PARMADDR  +8: LOAD PARAMETER R1 FROM DSECT AREA
         L     R15,STMRADDR +12: LOAD REGISTER 15 WITH "REAL" STIMER
*                                EXIT ROUTINE
         BR    R15          +16: BRANCH TO REAL STIMER EXIT ROUTINE
R15SAVED DS    A            +20: ROOM FOR R15
R1SAVED  DS    A            +24: ROOM FOR R1
STIMREAL DS    A            +28: ADDRESS OF REAL STIMER EXIT ROUTINE
STIMPARM DS    F            +32: TO BE FILLED IN BY PROGRAM.
STIMERDE DS    0H
         DROP  R15                                                RPS
         POP   USING                                              RPS
*
FLAGS    DS    4X
CPPLCBUF DS    A
CPPLUPT  DS    A
CPPLPSCB DS    A
CPPLECT  DS    A
IOPLADS  DS    4F               SPACE FOR IO PARM LIST
ECBADS   DC    F'0'             ECB FOR PUTLINE, GETLINE
PUTBLOK  PUTLINE MF=L             DEFAULT PUTLINE MACRO, LIST FORM
OSCALL1D CALL  ,(0,0,0,0,0,0),MF=L
*
***********************************************************************
* THE FOLLOWING SECTION DENOTES THE ECB LIST THAT OSASK WILL WAIT ON  *
*                                                                     *
***********************************************************************
LISTECBS DS    0F
         DC    A(0)            ONE FOR THE OSASKECB
         DC    X'80'
         DC    A(0)
*
OSASKECB DS    F
STIMRECB DS    F
*
***********************************************************************
* THE VARIABLES ARE NEEDED FOR THE CLIST VARIABLE ACCESS ROUTINE      *
* IKJCT441.                                                           *
***********************************************************************
VACCRTN  DS    A                ADDRESS OF CLIST VARIABLE ACCESS RTN.
VALPTR   DS    A                FOR CLIST VARIABLE ACCESS ROUTINE.
VALLENGT DS    F                FOR CLIST VARIABLE ACCESS ROUTINE.
TOKEN    DS    F                FOR CLIST VARIABLE ACCESS ROUTINE.
ECODE    DS    F
*
NAMEPTR  DS    F                FOR UPDATE ROUTINE
NAMELEN  DS    F                FOR UPDATE ROUTINE
VALUEPTR DS    F                FOR UPDATE ROUTINE
VALUELEN DS    F                FOR UPDATE ROUTINE
NAMELENW DS    F                FOR UPDATE ROUTINE FROM "CMDOUTNWM"
CLVARNME DS    CL12
EBCCOUNT DS    CL4
CONSOLE  DS    F
***********************************************************************
* THESE VARIABLES ARE USED TO KEEP TRACK OF WHICH LINES AND WORDS WE  *
* ARE USING WHEN STUFFING RESULTS IN CLIST VARIABLES.                 *
***********************************************************************
CURRWNUM DS    F                CURRENT WORD NUMBER IN THE CURRENT LINE
CURRWPOS DS    F                POINTER TO 16 BYTE WORD RETURNED IN
*                               TSSOPARS
WORDLINE DS    F                NUMBER OF WORDS IN CURRENT LINE
NUMLINES DS    F                NUMBER OF LINES RETURNED FROM COMMAND
***********************************************************************
* THESE VARIABLES ARE USED IN CALLING THE NOW FAMOUS TSSO PARSE       *
* ROUTINE.                                                            *
***********************************************************************
OSPARSPM DS    0H
OSPARS1  DS    F
OSPARS2  DS    F
OSPARS3  DS    F
OSPARS4  DS    F
WORDSEPS DS    CL4           PROBABLY CL4' ,= '
OSPARARR DS    20CL16
***********************************************************************
* THESE VARIABLES ARE THE BINARY REPRESENTATIONS OF STUFF DERIVED FROM*
* THE INVOKING CLIST.                                                 *
***********************************************************************
WTORMSGN DS    F
REPLYADD DS    CL133
REPLYWTT DS    F                MAXIMUM WAIT TIME (IN .01 SECONDS)
*
MESSAGED WTOR  '                                                       X
                                                                       X
                             ',MCSFLAG=(REG0,RESP),DESC=(6),MF=L
*
PUTRESPD DC    H'130',H'0'      FOR PUTTING COMMAND RESPONSE TO TUBE
         DC    CL130' '
*
LINE1HD  DC    H'80',H'0'
         DC    CL76'THE MESSAGE TO BE ISSUED IS INVALID ( <1 OR >125 CHX
               ARACTERS'
*
LINE2HD  DC    H'80',H'0'
         DC    CL76'OSASK TERMINATING BECAUSE IT WAS NOT UNDER TSO/E REX
               LEASE 2 OR HIGHER'
*
LINE3HD  DC    H'80',H'0'
         DC    CL76'OSASK TERMINATING --> ERROR IN CLIST VARIABLE ACCESX
               S ROUTINE'
*
LINE4HD  DC    H'80',H'0'
         DC    CL76'OSASK TERMINATING --> VALUE FOR REPLYWAIT NOT BETWEX
               EN 10 AND 600'
*
LINE6HD  DC    H'80',H'0'
         DC    CL76'OSASK TERMINATING --> IT MUST BE ISSUED FROM A CLISX
               T ENVIRONMENT'
*
LINE12HD DC    H'80',H'0'
         DC    CL76'OSASK TERMINATING --> TSSO IS NOT AVAILABLE'
         IKJTSVT
         IKJIOPL
         TSSOCVT
         COPY  TSSODATD
         CVT   DSECT=YES
         IEFJSCVT
         IEFJESCT
         END   OSASK
 PUNCH ' SETCODE  AC(1)'
 PUNCH ' IDENTIFY OSASK(''TSSO V 4.2.0 &SYSDATE &SYSTIME'') '
 PUNCH ' INCLUDE  SYSLMOD(JCECVT)'
 PUNCH ' INCLUDE  SYSLMOD(TSSOPARS)'
 PUNCH ' ENTRY    OSASK'
 PUNCH ' NAME     OSASK(R)'
         END
