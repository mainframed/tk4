                               STRUCTURED MACROS

  THESE MACROS CAN HELP YOU CREATE NEW PROGRAMS AND MODIFY EXISTING CODE
  SUPPORTING IF-THEN-ELSE LOGIC WHILE REQUIRING ONLY A SMALL LEARNING CU
  FROM WHAT YOU ALREADY KNOW ABOUT S/390 ASSEMBLER (ASSUMING THAT YOU DO
  KNOW IT ALREADY).  EACH 'IF' STATEMENT CAN BE ARBITRARILY COMPLEX, AND
  'IF' STATEMENTS CAN BE NESTED AS MANY LEVELS AS YOU MIGHT NEED (CERTAI
  NO ONE WOULD NEED MORE THAN 255 LEVELS OF NESTING, WOULD HE?).

  EACH GROUP OF INSTRUCTIONS THAT YOU WANT CONDITIONALLY EXECUTED WOULD
  HEADED BY AN 'IF' MACRO, AND TERMINATED BY AN 'ENDIF' MACRO.

  IN ITS SIMPLIST FORM, THE OPERAND OF THE 'IF' MACRO CONSISTS OF AN OP-
  THE FIRST OPERAND ADDRESS, THE SECOND OPERAND ADDRESS, AND A CONDITION
  FOUR VALUES MUST BE ENCLOSED WITHIN PARENTHESES, AND FOLLOWING THE OPE
  MUST BE A COMMA AND THE STATEMENT TERMINATING TERM 'THENDO'.

  THE OP-CODE MAY BE ANY VALID S/390 OP-CODE THAT SETS THE CONDITION COD
  FIRST AND SECOND OPERANDS MAY BE ANY VALUES THAT ARE VALID FOR THE INS
  BEING CREATED. THE CONDITION, SUCH AS 'E' OR 'NO, IS ANY VALUE THAT CA
  USED IN CREATING AN EXTENDED MNEMONIC BRANCH INSTRUCTION (SUCH AS 'BE'
  'BNO').

  IF YOU CHOOSE 'E' AS THE CONDITION, THEN THE GROUP OF INSTRUCTIONS BET
  'IF' AND THE 'ENDIF' WILL BE EXECUTED ONLY IF THE CONDITION CODE SET B
  OP-CODE AND OPERANDS SPECIFIED IS A ZERO.

  IN THE FOLLOWING EXAMPLES, THE HEADING WILL INDICATE THE
  CONDITIONS IN WHICH THE DO-GROUP WILL BE EXECUTED. IN EACH CASE,
  AN 'IF' STATEMENT DETERMINES THE CONDITIONS, AND AN 'ENDIF'
  STATEMENT TERMINATES THE DO-GROUP. COMMENTS EITHER IN THE HEADING
  OR ON THE APPROPRIATE INSTRUCTIONS WILL INDICATE THE DETAILS.
       HERE IS AN EXAMPLE:

         IF    (CLC,A,B,NE),THENDO

  THE INSTRUCTIONS BETWEEN THIS 'IF' AND ITS MATCHING 'ENDIF' WILL BE EX
  IF THE RESULT OF THE 'CLC' IS A 1 OR 2 (THE NOT-EQUAL CONDITION).

       TO EXECUTE THE DO-GROUP IF EITHER ONE OF TWO CONDITIONS IS
  TRUE, THE FORMAT IS:

       IF    (CLC,A,B,NE),OR,(CLC,C,D,NE),THENDO

       ALTERNATE FORMAT:
                                                            72
       IF    (CLC,A,B,NE),OR,                                C
             (CLC,C,D,NE),THENDO

       SINCE 'AND' TAKES PRECEDENCE OVER 'OR', IN THE FOLLOWING
  EXAMPLE, THE DO-GROUP IS PERFORMED IF THE FIRST TEST IS TRUE, OR
  IF BOTH THE SECOND AND THIRD ARE TRUE:

       IF    (CLC,A,B,E),OR,                                 C
             (CLC,C,D,E),AND,                                C
             (CLC,E,F,E),THENDO

       IF THE DO-GROUP IS TO BE PERFORMED IF THE THIRD IS TRUE AND
  EITHER THE FIRST OR SECOND IS TRUE, INCLUDE THE TESTS CONNECTED
  BY THE 'OR' WITHIN ADDITIONAL PARENTHESES:

             * <-NESTING PARENTHESES -> *
       IF    ((CLC,A,B,E),OR,(CLC,C,D,E)),AND,               C
             (CLC,E,F,E),THENDO

       ALTERNATE FORMAT:
                                                            72
       IF    ((CLC,A,B,E),OR,                                C
             (CLC,C,D,E)),AND,                               C
             (CLC,E,F,E),THENDO

       GROUPS OF EXPRESSIONS MAY BE NESTED AS DEEPLY AS REQUIRED
  TO DEFINE THE LOGIC DESIRED.
       EACH DO-GROUP MUST BE TERMINATED WITH AN 'ENDIF' STATEMENT
  OR AN 'ELSE' - 'ENDELSE' COMBINATION:

       ENDIF ,
                   - OR -
       ELSE  ,
       ... ADDITIONAL INSTRUCTIONS TO BE EXECUTED IF 'IF' FAILS
       ENDELSE ,  (OR ENDIF - EITHER IS ACCEPTABLE AFTER AN 'ELSE')

       ALTERNATIVELY, A DO-GROUP CAN BE TERMINATED AS FOLLOWS:

       ELSEIF  (CLC,G,H,E),THENDO ...

       ANY NUMBER OF 'ELSEIF' STATEMENTS CAN FOLLOW THE ORIGINAL
       'IF' STATEMENT. THERE MAY BE (BUT NEED NOT BE) ONE AND ONLY
       ONE 'ELSE' STATEMENT FOLLOWING THE FINAL 'ELSEIF'. THE ENTIRE
       GROUP IS TERMINATED WITH ONE 'ENDIF' OR 'ENDELSE'.

       IF    (...),THENDO            REQUIRED
       ...
       ELSEIF (...),THENDO           OPTIONAL (REPEATED AS REQUIRED)
       ...
       ELSE  ,                       OPTIONAL
       ...
       ENDIF ,                       REQUIRED (OR 'ENDELSE')

  THE 'DO' MACRO HEADS A 'DO-GROUP' - A GROUP OF INSTRUCTIONS THAT WILL
  EXECUTED ZERO OR MORE TIMES, DEPENDING ON THE OPERANDS OF THE 'DO'
  STATEMENT.  IN ITS SIMPLIST FORM, AN INTEGER IS THE ONLY OPERAND, SPEC
  THE NUMBER OF TIMES TO REPEAT THE GROUP.  ALTERNATIVELY, EITHER THE 'U
  OR THE 'WHILE=' CLAUSE MAY BE SPECIFIED.  THE FORM OF EACH OF THESE CL
  IS SIMILAR TO THE REQUIREMENTS FOR THE 'IF' STATEMENT, WITH THE ADDITI
  IF MORE THAN ONE SIMPLE TEST IS SPECIFIED, THEN ALL OF THE CONDITIONS
  ENCLOSED WITHIN AN ADDITIONAL LEVEL OF PARENTHESES:

       DO    UNTIL=(CLC,FIELDA,FIELDB,E)
       ...
       ENDO  ,

       DO    UNTIL=((CLC,FIELDA,FIELDB,E),RO,
             (CLR,R5,R6,NE))
       ...
       ENDO  ,

  IN THE ABOVE EXAMPLES, THE TEST IS PERFORMED BEFORE THE GROUP IS EXECU
  IF THE TEST FAILS, THE GROUP WILL NOT BE PERFORMED EVEN ONCE. IF YOU N
  EXECUTE THE GROUP ONCE, BEFORE THE TESTING INSTRUCTIONS ARE PERFORMED,
  ADD THE 'TEST=AFTER' CLAUSE:

       DO    UNTIL=(CLC,FIELDA,FIELDB,E),TEST=AFTER
       ...
       ENDO  ,

  WHEN YOU USE THE 'UNTIL' CLAUSE, THE GROUP WILL BE EXECUTED REPEATEDLY
  SOME PART OF THE CONDITIONAL PHRASE EVALUATES AS 'TRUE'.  WHEN YOU USE
  'WHILE' CLAUSE, THE GROUP WILL BE EXECUTED REPEATEDLY AS LONG AS SOME
  THE CONDITIONAL PHRASE EVALUATES AS TRUE.

  THREE ADDITIONAL GROUP-DEFINING INSTRUCTIONS ARE PROVIDED FOR USE AS '
  TIME SWITCHES', ETC.  THEY ARE 'FIRST', 'AFTER', AND 'EVERY'.  EACH OF
  REQUIRES, AS ITS ONLY OPERAND, AN INTEGER.

  'FIRST N' HEADS A GROUP THAT WILL BE EXECUTED THE FIRST 'N' TIMES THRO
  SECTION OF CODE:

       FIRST 1
         OPEN  (SYSPRINT,OUTPUT)
       ENDFIRST ,

  'EVERY N' HEADS A GROUP THAT WILL BE EXECUTED ONLY EVERY N'TH PASS THR
  THAT SECTION OF CODE:

       EVERY 10000
          WTO   'ANOTHER 10000 PROCESSED'
       ENDEVERY ,

  'AFTER N' HEADS A GROUP THAT WILL BE EXECUTED AFTER 'N' PASSES THROUGH
  SECTION OF CODE:

       AFTER 1000000
         WTO   '1,000,000 PASSES - CHECK FOR LOGIC ERROR'
       ENDAFTER ,

  NOTE THAT THE ABOVE 'WTO' INSTRUCTION WILL BE EXECUTED ON EVERY PASS T
  THAT CODE AFTER THE 1000000TH PASS.  TO ISSUE THE MESSAGE JUST ONCE:

       AFTER 1000000
         FIRST 1
           WTO   '1,000,000 PASSES - CHECK FOR LOGIC ERROR'
         ENDFIRST ,
       ENDAFTER ,

  IF YOU NAME ONE OF THE CONDITIONAL INSTRUCTIONS ('IF' ETC) IN COLS 1-8
  THAT NAME MAY BE USED IN ANY OF THE 'END...' STATEMENTS TO TERMINATE A
  THE NESTED LOGIC STATEMENTS UP TO THE ONE WITH THAT NAME:

  EXAMP1  IF    (CLC,FIELDA,FIELDB,E),THENDO
             ...
  LEVEL2     IF    (CLR,R5,R6,E),THENDO
             ...
               IF   (TM,FLAG1,X'80',O),THENDO
                 ....
             ENDIF DOGROUP=LEVEL2
             ...
           ENDIF ,                   ENDS 'EXAMP1'

  IF YOU WANT TO END ALL OF THE NESTED GROUPS, YOU CAN CODE A 'MAGIC' VA
  THE 'DOGROUP' KEYWORD:

  EXAMP1  IF    (CLC,FIELDA,FIELDB,E),THENDO
             ...
  LEVEL2     IF    (CLR,R5,R6,E),THENDO
             ...
               IF   (TM,FLAG1,X'80',O),THENDO
                 ....
           ENDIF DOGROUP=*ALL*       ENDS ALL ACTIVE GROUPS

  SINCE '*ALL*' IS NOT A VALID ASSEMBLER TAG VALUE, IT IS USED TO CAUSE
  CLOSURE OF ALL EXISTING ACTIVE DO-GROUPS.
