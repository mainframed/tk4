DATECONV TITLE 'UNIVERSAL DATE CONVERTER'
*                                                                     *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
* DATECONV REFORMATS A DATE FIELD PROVIDED BY THE CALLER (HENCEFORTH  *
* CALLED THE 'FROM DATE') INTO AN OUTPUT FIELD ALSO PROVIDED BY THE   *
* CALLER (THE 'TO DATE'). THIS MIRACULOUS TRANSFORMATION IS DRIVEN    *
* BY FORMATS (ALSO PROVIDED BY THE CALLER) FOR THE 'FROM DATE' AND    *
* THE 'TO DATE'.                                                      *
*                                                                     *
* DATECONV REQUIRES THE USER TO PROVIDE A FORMAT FOR THE 'FROM DATE', *
* A VALUE FOR THE 'FROM DATE', AND A FORMAT FOR THE 'TO DATE'. THE    *
* VALUE FOR THE 'FROM DATE' IS INTERPRETTED BASED ON THE FORMAT OF    *
* THE 'FROM DATE'. THE VALUE FOR THIS DATE IS TRANSMORGRIFIED INTO A  *
* COMMON FORMAT, AND IS THEN MOVED TO THE CALLER'S OUTPUT FIELD       *
* DRIVEN BY THE FORMAT PROVIDED BY THE USER FOR THE 'TO DATE'.        *
*                                                                     *
* THE FIELDS THAT THE CALLER MUST PASS ARE DEFINED AS FOLLOWS:        *
*                                                                     *
* PASSED PARAMETER LIST:              SET BY CALLER   CHANGED BY      *
* 01  PASSED-PARMS.                     AT 'CALL'?   THIS ROUTINE?    *
*     05  WINDOW-RC-VALUE   PIC 9(02).     YES        YES -> SEE (*)  *
*     05  FROM-FORMAT       PIC X(16).     YES            NO          *
*     05  TO-FORMAT         PIC X(16).     YES            NO          *
*     05  FROM-VALUE        PIC X(16).     YES            NO          *
*     05  TO-VALUE          PIC X(16).      NO           YES          *
*                                                                     *
* EACH CHARACTER IN THE FROM-FORMAT FIELD CONTROLS THE                *
* INTERPRETATION OF THE CORRESPONDING CHARACTER IN THE FROM-VALUE     *
* FIELD (APPLIES TO THE TO- FIELDS ON OUTPUT). FOR EXAMPLE, IF 'YYYY' *
* OCCURS IN POSITIONS 1-4 OF FROM-FORMAT, THEN POSITIONS 1-4 OF       *
* FROM-VALUE MUST CONTAIN THE VALUE FOR 'YYYY' (EG '1998').           *
*                                                                     *
* EXCEPT FOR THE COBOL-TYPE DAY COUNT, ANY COMBINATION OF FORMAT      *
* VALUES IS PERMITTED (FOR COBOL-TYPE DAY COUNT, NO OTHER VALUES ARE  *
* PERMITTED). IN THE 'FROM DATE' FIELD, A COMPLETE DATE               *
* MUST BE SPECIFIED ('DDDDDDD', OR 'YY', WITH AT LEAST ENOUGH         *
* ADDITIONAL DATA TO DEFINE THE DAY OF THE YEAR, SUCH AS:             *
* 'JJJ' OR           (JULIAN DAY OF YEAR)                             *
* 'MM' AND 'DD' OR   (NUMERIC MONTH AND DAY)                          *
* 'MMM' AND 'DD'     (ALPHA MONTH AND NUMERIC DAY)                    *
*                                                                     *
* IF 'YY' IS DEFINED IN THE 'FROM DATE', AND 'CC' IS NOT DEFINED,     *
* THEN 'YY' WILL BE WINDOWED BASED ON THE PIVOT YEAR PROVIDED IN      *
* THE FIRST PARAMETER (WHICH DOUBLES AS THE RETURN CODE), OR ON THE   *
* YEAR CALCULATED BY SUBTRACTING 50 FROM THE CURRENT YEAR (WHICH IS   *
* OBTAINED FROM THE SYSTEM DATE). THE CENTURY VALUE USED WHEN         *
* WINDOWING IS REQUIRED IS DETERMINED BY ADDING 50 TO THE CURRENT     *
* YEAR TO GET THE 'NEXT' CENTURY, AND SUBTRACTING 50 FROM THE CURRENT *
* YEAR TO DETERMINE THE 'PREVIOUS' CENTURY (IT'LL WORK PAST           *
* THE YEAR 2049, SPORTS FANS! HOWEVER, WHEN WE GET TO THE YEAR 9949,  *
* WE'LL HAVE A PROBLEM.)                                              *
*                                                                     *
* THE FOLLOWING LIST OF VALUES FOLLOWS THE PRECEDENCE USED IN         *
* PROCESSING THE FORMAT. I.E., 'YYYY' IS TESTED BEFORE 'YY' SO THAT   *
* A 4-DIGIT YEAR WILL BE CORRECTLY PROCESSED IF IT IS DEFINED, BUT    *
* IF IT ISN'T DEFINED, THEN A 2-DIGIT YEAR WILL BE TESTED FOR.        *
*                                                                     *
* VALID FORMAT VALUES (IN FROM-FORMAT OR TO-FORMAT):                  *
* DDDDDDD - COBOL-TYPE DAY COUNT (01/01/1601 IS DAY 1)                *
*           (IF THIS VALUE IS SPECIFIED, THEN NO OTHER VALUES MAY BE  *
*           DEFINED IN THE SAME FORMAT FIELD)                         *
* YYYY    - YEAR INCLUDING CENTURY (EQUIVALENT TO CCYY)               *
* CCYY    - YEAR INCLUDING CENTURY (EQUIVALENT TO YYYY)               *
* CC      - 2-DIGIT CENTURY                                           *
* YY      - 2-DIGIT YEAR (NOT INCLUDING CENTURY)                      *
* C       - 1-DIGIT CENTURY '0' FOR 20TH '1' FOR 21ST '2' FOR 22ND    *
*         - (WILL FAIL AFTER 12/31/2899)                              *
* QQQ     - 3-CHAR QUARTER (E.G. 1ST 2ND 3RD 4TH) (IGNORED ON INPUT)  *
* MMM     - ALPHABETIC MONTH SUCH AS 'JAN'                            *
* MM      - 2-DIGIT NUMERIC MONTH                                     *
* DDD     - 3-CHAR ALPHABETIC DAY OF WEEK (IGNORED ON INPUT)          *
* JJJ     - 3-DIGIT JULIAN DAY OF YEAR                                *
* DD      - 2-DIGIT GREGORIAN DAY OF MONTH                            *
* ANY OTHER CHARACTER:                                                *
*      FROM-FORMAT:    IGNORED                                        *
*      TO-FORMAT:      COPIED TO OUTPUT DATE (TO-VALUE) AS-IS         *
*      EXAMPLES OF POSSIBLE CHARACTERS: SLASH ('/') COMMA (',')       *
*                                       SPACE (' ')                   *
*                                                                     *
* EXAMPLE OF CALL:                                                    *
* 01  PASSED-PARMS.                                                   *
*     05  WINDOW-RC-VALUE      PIC 9(02) VALUE 80.                    *
*     05  FROM-FORMAT          PIC X(16) VALUE 'YYMMDD'.              *
*     05  TO-FORMAT            PIC X(16) VALUE 'MMM DD, YYYY'.        *
*     05  FROM-VALUE           PIC X(16) VALUE '970615'.              *
*     05  TO-VALUE             PIC X(16).                             *
*                                                                     *
* NOTE THAT FROM-VALUE MATCHES, BYTE BY BYTE, FROM-FORMAT.            *
* THE CALCULATED RESULT WILL BE 'JUN 15, 1997    '.                   *
*                                                                     *
* (*) IF VALID NUMERIC, THIS INPUT VALUE IS USED AS THE WINDOWING     *
*     PIVOT YEAR. IF VALUE IS '80' THEN YEARS 81 - 99 ARE INTERPRETED *
*     AS 20TH CENTURY AND 00 - 80 ARE INTERPRETED AS 21ST CENTURY.    *
* ->  IF IT IS NOT VALID NUMERIC, THEN TODAY'S DATE MINUS 50 YEARS IS *
*     USED AS A PIVOT YEAR.                                           *
*                                                                     *
* ->  IF YOU WANT THE ROUTINE TO USE A FLOATING PIVOT, CALCULATED BY  *
*     SUBTRACTING 50 FROM THE CURRENT YEAR, THEN MOVE SOMETHING LIKE  *
*     'XX' (OR SOME OTHER NON-NUMERIC VALUE) TO THIS FIELD EACH TIME  *
*     THE ROUTINE IS CALLED.  THIS IS REQUIRED BECAUSE THE ROUTINE    *
*     ITSELF SETS THE FIELD TO A RETURN CODE VALUE WHICH IS ALWAYS    *
*     NUMERIC.  IF YOU DON'T RESET IT TO SOMETHING LIKE 'XX' BEFORE   *
*     THE NEXT CALL, THEN THE RETURN CODE FROM THE PREVIOUS CALL WILL *
*     BE USED AS THE PIVOT YEAR.                                      *
*                                                                     *
* ->  IF, FOR SOME IDIOTIC REASON, YOU WANT TO USE A FIXED PIVOT,     *
*     OR MAYBE YOU WANT TO CALCULATE YOUR OWN FLOATING PIVOT, THEN    *
*     YOU MUST REFRESH ITS VALUE BEFORE EACH CALL, FOR THE SAME       *
*     REASON AS EXPLAINED IN THE PREVIOUS PARAGRAPH.                  *
*                                                                     *
* ->  IF YOU WANT TO CHANGE THE FLOATING PIVOT CALCULATED WITHIN THIS *
*     PROGRAM, THEN CHANGE THE CONSTANT USED IN THE INSTRUCTION       *
*     TAGGED 'SETPIVOT' TO THE DESIRED INCREMENT.                     *
*                                                                     *
* ->  ON OUTPUT, IT IS SET TO ZERO IF NO ERRORS ARE DETECTED OR TO    *
*     A VALUE > 0 IF ONE OR MORE ERRORS WERE DETECTED:                *
*   1 - JJJ WAS SPECIFIED IN FROM-FORMAT, BUT AN INVALID DATE         *
*       WAS CREATED AND INTOFDAY RETURNED AN ERROR RETURN CODE        *
*   2 - MM AND DD WERE SPECIFIED IN FROM-FORMAT, BUT AN INVALID DATE  *
*       WAS CREATED AND INTOFDTE RETURNED AN ERROR RETURN CODE        *
*   4 - MMM WAS SPECIFIED IN FROM-FORMAT BUT THE CORRESPONDING        *
*       POSITIONS IN FROM-VALUE DID NOT CONTAIN JAN FEB MAR APR MAY   *
*       JUN JUL AUG SEP OCT NOV OR DEC.                               *
*   8 - A DATE OF GREATER THAN DEC 31, 9999 WAS CREATED FROM          *
*       FROM-FORMAT AND FROM-VALUE.                                   *
*  16 - DDDDDDD WAS NOT SPECIFIED, JJJ WAS NOT SPECIFIED, AND NO      *
*       VALUE FOR MM WAS FOUND.                                       *
*  32 - DDDDDDD WAS NOT SPECIFIED, JJJ WAS NOT SPECIFIED, AND NO      *
*       VALUE FOR DD WAS FOUND.                                       *
*                                                                     *
* IF A NON-ZERO ERROR CODE OTHER THAN THOSE LISTED ABOVE IS RECEIVED, *
* THEN REPETITIVELY DETERMINE THE LARGEST OF THE ABOVE LISTED CODES   *
* THAT IS NOT GREATER THAN THE RECEIVED ERROR CODE, NOTE IT (I.E.,    *
* THAT PARTICULAR EVENT WAS DETECTED), SUBTRACT THAT VALUE FROM THE   *
* RECEIVED ERROR CODE, AND REPEAT THE PROCESS UNTIL THE REMAINING     *
* VALUE IS ZERO.                                                      *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
*                                                                     *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
* GLOBAL SET SYMBOL CONTROLS INCLUSION OF DIAGNOSTIC CODE AND SET UP  *
* NAMES FOR INSTRUCTION AND DATA AREA LOCATION COUNTERS               *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
         SPACE 1
         GBLC  &GSECT,&WSECT
&GSECT   SETC  'GSECT'             THESE SYMBOLS ARE USED BY MACROS
&WSECT   SETC  'WSECT'             . THAT GENERATE 'DC' INSTRUCTIONS
         SPACE 1
         PRINT NOGEN
         SPACE 1
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
* SET UP PROGRAM CSECT AND LOCATION COUNTERS FOR INSTRUCTION AREA AND *
* DATA AREA. DEFINE REGISTER SAVE AREA                                *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
         SPACE 1
DATECONV CSECT
&GSECT   LOCTR ,                   LADIES BEFORE GENTLEMEN, THANK YOU
&WSECT   LOCTR ,                   NOW YOU, SIR
SAVEAREA DC    18F'0'              STD REG SAVE AREA
&GSECT   LOCTR ,                   AND NOW, BACK TO THE LADY
         USING *,R12               INFORM ASSEMBLER
         STM   R14,R12,12(R13)     SAVE REGS
         LR    R12,R15             SET UP BASE REG
         B     CONTINUE            SKIP AROUNT MARKERS
         DC    C'********        '
         DC    C'DATECONV ASSEMBLED ON '
         DC    C'&SYSDATC AT &SYSTIME'
         DC    C'        ********'
CONTINUE DS    0H
         SLR   R15,R15             ASSUME R/C ZERO
         ST    R15,16(,R13)        STUFF R/C BACK INTO SAVEAREA
         LA    R14,SAVEAREA        POINT TO MY SAVE AREA
         ST    R14,8(,R13)         FORWARD CHAIN
         ST    R13,4(,R14)         BACK CHAIN
         LR    R13,R14             SET UP MY SAVEAREA
         SPACE 1
         L     R11,0(,R1)          PASSED PARAMETERS
         USING PASSED_PARAMETERS,R11 MAKE IT OFFICIAL
         TIME  DEC,SYSTEM_DATE,DATETYPE=YYYYMMDD,LINKAGE=SYSTEM
         UNPK  CURRENT_DATE(9),SYSTEM_DATE+8(5) VIZUALIZE YYYYMMDD
         PACK  WS_PL3,CURRENT_DATE(4)         COPY SYSTEM DATE
SETPIVOT AP    WS_PL3,=P'50'                  PLUS 50
         IF    (CLI,ERROR_CODE+0,X'EF',H),AND,    MUST BE IN RANGE OF  X
               (CLI,ERROR_CODE+0,X'FA',L),AND,    . 0 - 9              X
               (CLI,ERROR_CODE+1,X'EF',H),AND,    . DITTO              X
               (CLI,ERROR_CODE+1,X'FA',L),THENDO  .
           MVC   WINDOW_YY,ERROR_CODE           USE IT
         ELSE  ,                   ELSE
           UNPK  WINDOW_YY,WS_PL3  COPY SYS DATE YY MINUS 50
           OI    WINDOW_YY+1,C'0'  AND FIX SIGN
         ENDO  ,
         UNPK  NEXT_CENT(4),WS_PL3   CAPTURE NEXT CENTURY ('20'?)
         SP    WS_PL3,=P'100'        BACK UP TO PREV CENTURY ('19'?)
         UNPK  PREV_CENT(4),WS_PL3   . AND CAPTURE IT
         PACK  ERRORS,=Z'0'        SET DEFAULT RETURN CODE
         UNPK  HOLD_JJJ,=X'0F'     SET WORK FIELD TO ZEROS
         UNPK  CALLED_YYYYMMDD,=X'0F'  SET WORK FIELDS TO ZEROS
         UNPK  CALLED_DAY_COUNT,=X'0F'   .
         LA    R3,HOLD_FMT         GET READY TO BUMP THROUGH FIELD
         LA    R4,FROM_VAL         .
         MVC   HOLD_FMT(16),FROM_FMT COPY TO HOLDING TANK
         DO    UNTIL=(CL,R3,=A(HOLD_FMT+16),H) SCAN ENTIRE STRING
           IF    (CLC,=C'DDDDDDD',0(R3),E),THENDO DAYS SINCE 01/01/1601
             MVC   CALLED_DAY_COUNT+1(7),0(R4) SAVE DDDDDDD
             LA    R3,17(,R3)      NO OTHERS SCANNED THIS PASS
             UNPK  CALLED_YYYYMMDD,=X'0F'  SET WORK FIELDS TO ZEROS
           ELSEIF (CLC,=C'YYYY',0(R3),E),OR,    4-DIGIT YEAR           X
               (CLC,=C'CCYY',0(R3),E),THENDO 4-DIGIT YEAR
             MVC   CALLED_YYYYMMDD(4),0(R4)
             LA    R3,4(,R3)
             LA    R4,4(,R4)
           ELSEIF (CLC,=C'CYY',0(R3),E),THENDO 3-DIGIT YEAR
             IF    (CLI,0(R4),C'0',E),THENDO FIGURE OUT CC VALUE
               MVC   CALLED_YYYYMMDD(2),=C'19'
             ELSEIF (CLI,0(R4),C'1',E),THENDO FIGURE OUT CC VALUE
               MVC   CALLED_YYYYMMDD(2),=C'20'
             ELSEIF (CLI,0(R4),C'2',E),THENDO FIGURE OUT CC VALUE
               MVC   CALLED_YYYYMMDD(2),=C'21'
             ELSE  ,
               CONTINUE ,          23RD CENTURY ???
             ENDIF ,
             MVC   CALLED_YYYYMMDD+2(2),1(R4) COPY YY VALUE
             LA    R3,3(,R3)
             LA    R4,3(,R4)
           ELSEIF (CLC,=C'JJJ',0(R3),E),THENDO  JULIAN DAY OF YEAR
             MVC   HOLD_JJJ,0(R4)  COPY JULIAN DAY OF YEAR
             LA    R3,3(,R3)
             LA    R4,3(,R4)
           ELSEIF (CLC,=C'DDD',0(R3),E),THENDO  ALPHA DAY OF WEEK
* IGNORE ON INPUT
             LA    R3,3(,R3)
             LA    R4,3(,R4)
           ELSEIF (CLC,=C'MMM',0(R3),E),THENDO EX. 'JAN'
* FIGURE OUT NUMERIC MONTH BASED ON ALPHA MONTH
             LA    R5,1            GET SET TO SCAN TABLE
             DO    UNTIL=(CL,R5,=F'12',H)
               LR    R6,R5         COPY COUNTER
               BCTR  R6,0          CHANGE TO OFFSET
               MH    R6,=H'3'      EACH IS 3 CHARS LONG
               LA    R6,MONTHS_DEF(R6) POINT TO ENTRY
               IF    (CLC,0(3,R6),0(R4),E),THENDO MATCH?
                 CVD   R5,DOUBLE   YES - GET MONTH COUNT
                 UNPK  CALLED_YYYYMMDD+4(2),DOUBLE .
                 OI    CALLED_YYYYMMDD+5,C'0'      .
                 LA    R5,13       FORCE END-OF-LOOP
               ENDO  ,
               LA    R5,1(,R5)     BUMP TO NEXT MONTH NUMBER
             ENDO  ,
             IF    (CL,R5,=F'13',E),THENDO IF NOT-FOUND, THEN
               MVC   CALLED_YYYYMMDD+4(2),CURRENT_DATE+4 SET TO CURRENT
               AP    ERRORS,=P'04' AND FLAG ERROR
             ENDO  ,
             LA    R3,3(,R3)       BUMP PAST MMM ON FORMAT
             LA    R4,3(,R4)       . AND DATA
           ELSEIF  (CLC,=C'MM',0(R3),E),THENDO NUMERIC MONTH
             IF    (CLI,1(R4),C'0',L),THENDO IF +1 NOT NUMERIC THEN...
               MVC   CALLED_YYYYMMDD+5(1),0(R4) COPY ONLY 1 DIGIT
               LA    R4,1(,R4)
             ELSE  ,
               MVC   CALLED_YYYYMMDD+4(2),0(R4) COPY 2 DIGITS
               LA    R4,2(,R4)
             ENDIF ,
             LA    R3,2(,R3)
           ELSEIF  (CLC,=C'CC',0(R3),E),THENDO 'CC' BUT NOT 'CCYY'
             MVC   CALLED_YYYYMMDD(2),0(R4) COPY CC VALUE
             LA    R3,2(,R3)
             LA    R4,2(,R4)
           ELSEIF  (CLC,=C'YY',0(R3),E),THENDO 'YY' BUT NOT 'YYYY'
             MVC   CALLED_YYYYMMDD+2(2),0(R4) COPY YY VALUE
             LA    R3,2(,R3)
             LA    R4,2(,R4)
           ELSEIF  (CLC,=C'DD',0(R3),E),THENDO 'DD' BUT NOT 'DDDDDDD'
             IF    (CLI,1(R4),C'0',L),THENDO IF +1 NOT NUMERIC THEN...
               MVC   CALLED_YYYYMMDD+7(1),0(R4) COPY 1 DIGIT
               LA    R4,1(,R4)
             ELSE  ,
               MVC   CALLED_YYYYMMDD+6(2),0(R4) COPY 2 DIGITS
               LA    R4,2(,R4)
             ENDIF ,
             LA    R3,2(,R3)
           ELSEIF  (CLC,=C'C',0(R3),E),THENDO 1-DIGIT CENTURY BY ITSELF
             PACK  WS_PL2,0(1,R4)  CAPTURE 'FUNNY' CENTURY
             AP    WS_PL2,=P'19'   NORMALIZE IT
             UNPK  CALLED_YYYYMMDD(2),WS_PL2 COPY TO OUTPUT FIELD
             OI    CALLED_YYYYMMDD+1,C'0' FIX SIGN
             LA    R3,1(,R3)
             LA    R4,1(,R4)
           ELSE  ,
* JUST BUMP TO NEXT POSITION IN FORMAT AND VALUE FIELDS
             LA    R3,1(,R3)
             LA    R4,1(,R4)
           ENDIF ,
         ENDO  ,
* IF DAY_COUNT IS ZEROS THEN PROCESS YYYYMMDD TYPE DATE
         IF    (CLC,CALLED_DAY_COUNT,=C'00000000',E),THENDO
* WINDOWING REQUIRED?
           IF    (CLC,=CL2'00',CALLED_YYYYMMDD,E),THENDO
             IF    (CLC,CALLED_YYYYMMDD+2(2),WINDOW_YY,H),THENDO
               MVC   CALLED_YYYYMMDD(2),PREV_CENT '19' UNTIL AFTER 2049
             ELSE  ,
               MVC   CALLED_YYYYMMDD(2),NEXT_CENT '20' UNTIL AFTER 2049
             ENDIF ,
           ENDIF ,
* NOW FIND A JJJ (1ST PRIORITY) OR MMDD
           IF    (CLC,=C'000',HOLD_JJJ,E),THENDO IF NO JJJ THEN MMDD
             IF    (CLC,=CL2'00',CALLED_YYYYMMDD+4,E),THENDO TEST MONTH
               MVC   CALLED_YYYYMMDD+4(2),CURRENT_DATE+4
               AP    ERRORS,=P'16'
             ELSEIF  (CLC,=CL2'00',CALLED_YYYYMMDD+6,E),THENDO TEST DAY
               MVC   CALLED_YYYYMMDD+6(2),CURRENT_DATE+6
               AP    ERRORS,=P'32'
             ELSE  ,
               CALL  INTOFDTE,(CALLED_YYYYMMDD,CALLED_DAY_COUNT)
               IF    (CLC,CALLED_DAY_COUNT,=C'00000000',E),THENDO
                 AP    ERRORS,=P'2'
               ENDIF ,
             ENDIF ,
           ELSE  ,
             MVC   CALLED_YYYYMMDD+4(3),HOLD_JJJ
             CALL  INTOFDAY,(CALLED_YYYYMMDD,CALLED_DAY_COUNT)
             IF    (CLC,CALLED_DAY_COUNT,=C'00000000',E),THENDO
               AP    ERRORS,=P'1'
             ELSE  ,
             ENDIF ,
           ENDIF ,
         ELSE  ,
           IF    (CLC,CALLED_DAY_COUNT,=C'03067671',H),THENDO
             AP    ERRORS,=P'8'
           ENDIF ,
         ENDIF ,
         MVC   TO_VAL,SPACES       SET OUTPUT TO SPACES
         UNPK  ERROR_CODE,ERRORS
         OI    ERROR_CODE+1,C'0'
         IF    (CP,ERRORS,=P'0',NE),THENDO
           B     RETURN
         ENDIF ,
* AT THIS POINT WE FOR-SURE HAVE A VALID CALLED_DAY_COUNT
* NOW GET GREGORIAN AND JULIAN DATES FROM CALLED_DAY_COUNT
         IF    (CLC,TO_FMT+00(7),=C'DDDDDDD',NE),AND,                  X
               (CLC,TO_FMT+09(7),=C'DDDDDDD',NE),THENDO
* I ASSUME WE'LL NEED THE GREGORIAN DATE (BUT NOT JULIAN)
           CALL  DTEOFINT,(CALLED_DAY_COUNT,CALLED_YYYYMMDD)
           MVC   STD_DATE_YYYYMMDD,CALLED_YYYYMMDD
         ENDIF ,
* SET UP TO BUMP THROUGH OUTPUT FORMAT AND DATA
         LA    R3,HOLD_FMT
         LA    R4,TO_VAL
         MVC   HOLD_FMT(16),TO_FMT
* SLASH_SW, IF SET, ALLOWS THE OUTPUT OF SINGLE DIGIT DAYS AND MONTHS
* WHEN THE VALUE IS < 10. IF NOT SET, THEN THE OUTPUT VALUE WILL BE
* '01' ETC. IF SET, THIS ALLOWS A DATE TO BE OUTPUT AS '7/4/1998' OR
* AS '07041998' DEPENDING ON THE VALUE FOR TO_FMT.
         MVI   SLASH_SW,C' '       NULL
         DO    UNTIL=(CL,R3,=A(HOLD_FMT+16),H) SCAN ALL 16 POSITIONS
           IF    (CLC,=C'DDDDDDD',0(R3),E),THENDO DAY_COUNT
             MVC   0(7,R4),CALLED_DAY_COUNT+1 COPY 7 D'S
             LA    R3,HOLD_FMT+17  FORSAKE ALL OTHERS...
           ELSEIF (CLC,=C'YYYY',0(R3),E),OR,    4-DIGIT YEAR           X
               (CLC,=C'CCYY',0(R3),E),THENDO 4-DIGIT YEAR
             MVC   0(4,R4),STD_DATE_YYYYMMDD COPY 4-DIGIT YEAR
             LA    R3,4(,R3)
             LA    R4,4(,R4)
           ELSEIF (CLC,=C'CYY',0(R3),E),THENDO 3-DIGIT YEAR
             IF    (CLC,STD_DATE_YYYYMMDD(2),=C'19',E),THENDO
               MVI   0(R4),C'0'    CREATE SILLY 1-DIGIT CENTURY
             ELSEIF (CLC,STD_DATE_YYYYMMDD(2),=C'20',E),THENDO
               MVI   0(R4),C'1'    DITTO
             ELSEIF (CLC,STD_DATE_YYYYMMDD(2),=C'21',E),THENDO
               MVI   0(R4),C'2'    DITTO
             ELSE  ,
               CONTINUE ,          NOW WHAT, MOMMY?
             ENDIF ,
             MVC   1(2,R4),STD_DATE_YYYYMMDD+2 COPY 2-DIGIT YEAR
             LA    R3,3(,R3)
             LA    R4,3(,R4)
           ELSEIF  (CLC,=C'QQQ',0(R3),E),THENDO 3-CHAR QUARTER
             IF     (CLC,STD_DATE_YYYYMMDD+4(2),=C'09',H),THENDO
               MVC   0(3,R4),=C'4TH'   SET 4TH QUARTER
             ELSEIF (CLC,STD_DATE_YYYYMMDD+4(2),=C'06',H),THENDO
               MVC   0(3,R4),=C'3RD'   SET 3RD QUARTER
             ELSEIF (CLC,STD_DATE_YYYYMMDD+4(2),=C'03',H),THENDO
               MVC   0(3,R4),=C'2ND'   SET 2ND QUARTER
             ELSE  ,
               MVC   0(3,R4),=C'1ST'   SET 1ST QUARTER
             ENDIF ,
             LA    R3,3(,R3)
             LA    R4,3(,R4)
           ELSEIF (CLC,=C'JJJ',0(R3),E),THENDO  JULIAN DAY OF YEAR
* OK, OK, ALREADY - GET THE JULIAN...
             CALL  DAYOFINT,(CALLED_DAY_COUNT,CALLED_YYYYMMDD)
             MVC   STD_DATE_YYYYJJJ,CALLED_YYYYMMDD
             MVC   0(3,R4),STD_DATE_YYYYJJJ+4 COPY DAY-OF-YEAR
             LA    R3,3(,R3)
             LA    R4,3(,R4)
           ELSEIF (CLC,=C'DDD',0(R3),E),THENDO  ALPHA DAY OF WEEK
             PACK  DIVIDEND,CALLED_DAY_COUNT COMPUTERIZE DAY_COUNT
             DP    DIVIDEND,=PL2'7' GET INDEX INTO DAY_TABLE
             ZAP   DOUBLE,REMAINDER VALUE RANGE IS 0 - 6
             CVB   R5,DOUBLE        BINARY IT
             MH    R5,=H'3'        NOW RANGE IS 0 - 18 FOR 3-CHAR TABLE
             LA    R5,DAY_TABLE(R5)  GET LOC'N OF REQUIRED DAY
             MVC   0(3,R4),0(R5)    COPY IT TO OUTPUT
             LA    R3,3(,R3)
             LA    R4,3(,R4)
           ELSEIF (CLC,=C'MMM',0(R3),E),THENDO ALPHABETIC MONTH
             PACK  DOUBLE,STD_DATE_YYYYMMDD+4(2) MONTH NUMBER
             CVB   R5,DOUBLE       BINARY
             MH    R5,=H'3'        OFFSET
             LA    R5,MONTHS_DEF-3(R5) MONTH NAME LOC'N
             MVC   0(3,R4),0(R5)   COPY IT TO OUTPUT
             LA    R3,3(,R3)
             LA    R4,3(,R4)
           ELSEIF  (CLC,=C'CC',0(R3),E),THENDO 2-DIGIT CENTURY
             MVC   0(2,R4),STD_DATE_YYYYMMDD COPY CC TO OUTPUT
             LA    R3,2(,R3)
             LA    R4,2(,R4)
           ELSEIF  (CLC,=C'YY',0(R3),E),THENDO 2-DIGIT YEAR
             MVC   0(2,R4),STD_DATE_YYYYMMDD+2 COPY YY TO OUTPUT
             LA    R3,2(,R3)
             LA    R4,2(,R4)
           ELSEIF  (CLC,=C'MM',0(R3),E),THENDO NUMERIC MONTH
             IF    ((CLI,2(R3),C',',E),OR, COMMA DELIMITED?            X
               (CLI,SLASH_SW,C'Y',E),OR, SLASH ALREADY DETECTED?       X
               (CLI,2(R3),C'/',E)),AND, SLASH DELIMITED?               X
               (CLI,STD_DATE_YYYYMMDD+4,C'0',E),THENDO AND 1-DIGIY VAL?
               MVC   0(1,R4),STD_DATE_YYYYMMDD+5 COPY 1-DIGIT MM
               LA    R3,2(,R3)
               LA    R4,1(,R4)
             ELSE  ,
               MVC   0(2,R4),STD_DATE_YYYYMMDD+4 COPY 2-DIGIT MM
               LA    R3,2(,R3)
               LA    R4,2(,R4)
             ENDIF ,
           ELSEIF  (CLC,=C'DD',0(R3),E),THENDO    DD
             IF    ((CLI,2(R3),C',',E),OR, COMMA DELIMITED?            X
               (CLI,SLASH_SW,C'Y',E),OR, SLASH ALREADY DETECTED?       X
               (CLI,2(R3),C'/',E)),AND, SLASH DELIMITED                X
               (CLI,STD_DATE_YYYYMMDD+6,C'0',E),THENDO
               MVC   0(1,R4),STD_DATE_YYYYMMDD+7 COPY 1-DIGIT DD
               LA    R3,2(,R3)
               LA    R4,1(,R4)
             ELSE  ,
               MVC   0(2,R4),STD_DATE_YYYYMMDD+6 COPY 2-DIGIT DD
               LA    R3,2(,R3)
               LA    R4,2(,R4)
             ENDIF ,
           ELSEIF  (CLC,=C'C',0(R3),E),THENDO 1-DIGIT CENTURY
             PACK  WS_PL2,STD_DATE_YYYYMMDD(2) CAPTURE CENTURY
             SP    WS_PL2,=P'19'   CALCULATE 1-DIGIT CENTURY
             UNPK  0(1,R4),WS_PL2  FLIP TO 'FUNNY' CENTURY
             OI    0(R4),C'0'      FIX SIGN
             LA    R3,1(,R3)
             LA    R4,1(,R4)
           ELSE  ,                 MOVE OTHER FORMATTING CHARACTER
             IF    (CLI,0(R3),C'/',E),OR,                              X
               (CLI,0(R3),C',',E),THENDO
               MVI   SLASH_SW,C'Y'
             ENDIF ,
             MVC   0(1,R4),0(R3)   COPY TO-FMT CHAR TO OUTPUT DATE
             LA    R3,1(,R3)
             LA    R4,1(,R4)
           ENDIF ,
         ENDO  ,
RETURN   DS    0H                  PROVIDE STD RETURN LINKAGE
         L     R13,4(,R13)         BACK CHAIN
         LM    R14,R12,12(R13)     RESTORE REGS
         DROP  R12                 NEGATE ADDRESSABILITY
         BR    R14                 RETURN
&WSECT   LOCTR ,                   FINALLY - THE GENTLEMAN'S TURN
DOUBLE   DC    D'0'
         EJECT
         SPACE 1
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
* VARIABLES, CONSTANTS, DCB'S ETC.                                    *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
         SPACE 1
DIVIDEND  DC    PL8'0'
QUOTIENT  EQU   DIVIDEND,6,C'P'
REMAINDER EQU   DIVIDEND+6,2,C'P'
CALLED_YYYYMMDD DC CL8'00000000'   DTEOFINT CALCS THIS ONE
CALLED_DAY_COUNT  DC CL8'00000000' DATECONV CALCS THIS ONE
*                                  END OF PARAMETERS
STD_DATE_YYYYMMDD DC CL8'00000000' WORK AREA TO CREATE DATE
STD_DATE_YYYYJJJ  DC CL7'0000000'  USED WHEN FMT 'DDDDDDD' FOUNT
HOLD_JJJ          DC CL3'000'      USED WHEN FMT 'JJJ' FOUND
HOLD_FMT          DC CL24' '       USED SO COMPARES WON'T OVERFLOW
SPACES            DC CL133' '
MONTHS_DEF DC CL36'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'
DAY_TABLE  DC CL21'SUNMONTUEWEDTHUFRISAT'
WINDOW_YY           DC CL2'00'     SET TO WINDOWING VALUE
PREV_CENT           DC CL2'00',2C' '
NEXT_CENT           DC CL2'00',2C' '
ERRORS              DC PL2'0'      ACCUMULATE ERRORS
WS_PL2              DC PL2'0'      TEMP CELL
WS_PL3              DC PL4'0'         .
SYSTEM_DATE DS   2F'0',X'19981109',F'0' WORK AREA FOR SYSTEM DATE
CURRENT_DATE DC    CL8'19981109',C' ' HOLDS UNPACKED SYSTEM DATE
SLASH_SW DC    C' '                FOR '/' OR ','
LINKAGE  DSECT
PASSED_PARAMETERS   DS    0D
ERROR_CODE          DS    CL2      EX. '50' (WINDOWING VALUE)
FROM_FMT            DS    CL16     EX. 'YYYYMMDD        '
TO_FMT              DS    CL16     EX. 'MMM DD, YYYY    '
FROM_VAL            DS    CL16     EX. '19981110        '
TO_VAL              DS    CL16     EX. 'NOV 11, 1998    ' (CALCULATED)
DATECONV CSECT ,                   BACK TO MAIN
         EQUATE ,                  REGISTER EQUATES
         END   ,                   REQUIRED END STATEMENT
