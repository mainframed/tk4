This documentation was created from Dan Snyder's documentation by
folding the long lines with 'TF68' under ISPF EDIT.  Just makes it
a bit easier to read.                              (S.Golob  12/99)

Author's Note:

       The member SAMPLE is a demo of the power of the macros,
       but it was written as a sort of automated test to make
       sure I didn't mess anything up when I made a change. It
       is a poor marketing tool. To see 'real life examples'
       please look at the programs DATECONV, INTOFDTE, and
       DTEOFINT (also members of 'MACLIB'). These are purposeful
       programs that utilize the macros.

                         STRUCTURED MACROS

  THESE MACROS CAN HELP YOU CREATE NEW PROGRAMS AND MODIFY EXISTING
  CODE BY SUPPORTING IF-THEN-ELSE LOGIC WHILE REQUIRING ONLY A SMALL
  LEARNING CURVE FROM WHAT YOU ALREADY KNOW ABOUT S/390 ASSEMBLER
  (ASSUMING THAT YOU DO KNOW IT ALREADY).  EACH 'IF' STATEMENT CAN
  BE ARBITRARILY COMPLEX, AND THE 'IF' STATEMENTS CAN BE NESTED AS
  MANY LEVELS AS YOU MIGHT NEED (CERTAINLY, NO ONE WOULD NEED MORE
  THAN 255 LEVELS OF NESTING, WOULD HE?).

  EACH GROUP OF INSTRUCTIONS THAT YOU WANT CONDITIONALLY EXECUTED
  WOULD BE HEADED BY AN 'IF' MACRO, AND TERMINATED BY AN 'ENDIF'
  MACRO.

  IN ITS SIMPLIST FORM, THE OPERAND OF THE 'IF' MACRO CONSISTS OF AN
  OP-CODE, THE FIRST OPERAND ADDRESS, THE SECOND OPERAND ADDRESS,
  AND A CONDITION. THESE FOUR VALUES MUST BE ENCLOSED WITHIN
  PARENTHESES, AND FOLLOWING THE OPERANDS MUST BE A COMMA AND THE
  STATEMENT TERMINATING TERM 'THENDO'.

  THE OP-CODE MAY BE ANY VALID S/390 OP-CODE THAT SETS THE CONDITION
  CODE. THE FIRST AND SECOND OPERANDS MAY BE ANY VALUES THAT ARE
  VALID FOR THE INSTRUCTION BEING CREATED. THE CONDITION, SUCH AS
  'E' OR 'NO', IS ANY VALUE THAT CAN BE USED IN CREATING AN EXTENDED
  MNEMONIC BRANCH INSTRUCTION (SUCH AS 'BE' OR 'BNO').

  IF YOU CHOOSE 'E' AS THE CONDITION, THEN THE GROUP OF INSTRUCTIONS
  BETWEEN THE 'IF' AND THE 'ENDIF' WILL BE EXECUTED ONLY IF THE
  CONDITION CODE SET BY THE OP-CODE AND OPERANDS SPECIFIED IS A
  ZERO.

  IN THE FOLLOWING EXAMPLES, THE HEADING WILL INDICATE THE
  CONDITIONS IN WHICH THE DO-GROUP WILL BE EXECUTED. IN EACH CASE,
  AN 'IF' STATEMENT DETERMINES THE CONDITIONS, AND AN 'ENDIF'
  STATEMENT TERMINATES THE DO-GROUP. COMMENTS EITHER IN THE HEADING
  OR ON THE APPROPRIATE INSTRUCTIONS WILL INDICATE THE DETAILS.
       HERE IS AN EXAMPLE:

         IF    (CLC,A,B,NE),THENDO

  THE INSTRUCTIONS BETWEEN THIS 'IF' AND ITS MATCHING 'ENDIF' WILL
  BE EXECUTED IF THE RESULT OF THE 'CLC' IS A 1 OR 2 (THE NOT-EQUAL
  CONDITION).

       TO EXECUTE THE DO-GROUP IF EITHER ONE OF TWO CONDITIONS IS
  TRUE, THE FORMAT IS:

       IF    (CLC,A,B,NE),OR,(CLC,C,D,NE),THENDO

       ALTERNATE FORMAT:
                                                            72
       IF    (CLC,A,B,NE),OR,                                C
             (CLC,C,D,NE),THENDO

       SINCE 'AND' TAKES PRECEDENCE OVER 'OR', IN THE FOLLOWING
  EXAMPLE, THE DO-GROUP IS PERFORMED IF THE FIRST TEST IS TRUE, OR
  IF BOTH THE SECOND AND THIRD ARE TRUE:

       IF    (CLC,A,B,E),OR,                                 C
             (CLC,C,D,E),AND,                                C
             (CLC,E,F,E),THENDO

       IF THE DO-GROUP IS TO BE PERFORMED IF THE THIRD IS TRUE AND
  EITHER THE FIRST OR SECOND IS TRUE, INCLUDE THE TESTS CONNECTED
  BY THE 'OR' WITHIN ADDITIONAL PARENTHESES:

             * <-NESTING PARENTHESES -> *
       IF    ((CLC,A,B,E),OR,(CLC,C,D,E)),AND,               C
             (CLC,E,F,E),THENDO

       ALTERNATE FORMAT:
                                                            72
       IF    ((CLC,A,B,E),OR,                                C
             (CLC,C,D,E)),AND,                               C
             (CLC,E,F,E),THENDO

       GROUPS OF EXPRESSIONS MAY BE NESTED AS DEEPLY AS REQUIRED
  TO DEFINE THE LOGIC DESIRED.
       EACH DO-GROUP MUST BE TERMINATED WITH AN 'ENDIF' STATEMENT
  OR AN 'ELSE' - 'ENDELSE' COMBINATION:

       ENDIF ,
                   - OR -
       ELSE  ,
       ... ADDITIONAL INSTRUCTIONS TO BE EXECUTED IF 'IF' FAILS
       ENDELSE ,  (OR ENDIF - EITHER IS ACCEPTABLE AFTER AN 'ELSE')

       ALTERNATIVELY, A DO-GROUP CAN BE TERMINATED AS FOLLOWS:

       ELSEIF  (CLC,G,H,E),THENDO ...

       ANY NUMBER OF 'ELSEIF' STATEMENTS CAN FOLLOW THE ORIGINAL
       'IF' STATEMENT. THERE MAY BE (BUT NEED NOT BE) ONE AND ONLY
       ONE 'ELSE' STATEMENT FOLLOWING THE FINAL 'ELSEIF'. THE ENTIRE
       GROUP IS TERMINATED WITH ONE 'ENDIF' OR 'ENDELSE'.

       IF    (...),THENDO            REQUIRED
       ...
       ELSEIF (...),THENDO           OPTIONAL (REPEATED AS REQUIRED)
       ...
       ELSE  ,                       OPTIONAL
       ...
       ENDIF ,                       REQUIRED (OR 'ENDELSE')

  THE 'DO' MACRO HEADS A 'DO-GROUP' - A GROUP OF INSTRUCTIONS THAT
  WILL BE EXECUTED ZERO OR MORE TIMES, DEPENDING ON THE OPERANDS OF
  THE 'DO' STATEMENT.  IN ITS SIMPLIST FORM, AN INTEGER IS THE ONLY
  OPERAND, SPECIFYING THE NUMBER OF TIMES TO REPEAT THE GROUP.
  ALTERNATIVELY, EITHER THE 'UNTIL=' OR THE 'WHILE=' CLAUSE MAY BE
  SPECIFIED.  THE FORM OF EACH OF THESE CLAUSES IS SIMILAR TO THE
  REQUIREMENTS FOR THE 'IF' STATEMENT, WITH THE ADDITION THAT, IF
  MORE THAN ONE SIMPLE TEST IS SPECIFIED, THEN ALL OF THE CONDITIONS
  MUST BE ENCLOSED WITHIN AN ADDITIONAL LEVEL OF PARENTHESES:

       DO    UNTIL=(CLC,FIELDA,FIELDB,E)
       ...
       ENDO  ,

       DO    UNTIL=((CLC,FIELDA,FIELDB,E),RO,                          X
             (CLR,R5,R6,NE))
       ...
       ENDO  ,

  IN THE ABOVE EXAMPLES, THE TEST IS PERFORMED BEFORE THE GROUP IS
  EXECUTED, SO IF THE TEST FAILS, THE GROUP WILL NOT BE PERFORMED
  EVEN ONCE. IF YOU NEED TO EXECUTE THE GROUP ONCE, BEFORE THE
  TESTING INSTRUCTIONS ARE PERFORMED, THEN ADD THE 'TEST=AFTER'
  CLAUSE:

       DO    UNTIL=(CLC,FIELDA,FIELDB,E),TEST=AFTER
       ...
       ENDO  ,

  WHEN YOU USE THE 'UNTIL' CLAUSE, THE GROUP WILL BE EXECUTED
  REPEATEDLY UNTIL SOME PART OF THE CONDITIONAL PHRASE EVALUATES AS
  'TRUE'.  WHEN YOU USE THE 'WHILE' CLAUSE, THE GROUP WILL BE
  EXECUTED REPEATEDLY AS LONG AS SOME PART OF THE CONDITIONAL PHRASE
  EVALUATES AS TRUE.

  THREE ADDITIONAL GROUP-DEFINING INSTRUCTIONS ARE PROVIDED FOR USE
  AS 'FIRST TIME SWITCHES', ETC.  THEY ARE 'FIRST', 'AFTER', AND
  'EVERY'.  EACH OF THESE REQUIRES, AS ITS ONLY OPERAND, AN INTEGER.

  'FIRST N' HEADS A GROUP THAT WILL BE EXECUTED THE FIRST 'N' TIMES
  THROUGH THAT SECTION OF CODE:

       FIRST 1
         OPEN  (SYSPRINT,OUTPUT)
       ENDFIRST ,

  'EVERY N' HEADS A GROUP THAT WILL BE EXECUTED ONLY EVERY N'TH PASS
  THROUGH THAT SECTION OF CODE:

       EVERY 10000
          WTO   'ANOTHER 10000 PROCESSED'
       ENDEVERY ,

  'AFTER N' HEADS A GROUP THAT WILL BE EXECUTED AFTER 'N' PASSES
  THROUGH THAT SECTION OF CODE:

       AFTER 1000000
         WTO   '1,000,000 PASSES - CHECK FOR LOGIC ERROR'
       ENDAFTER ,

  NOTE THAT THE ABOVE 'WTO' INSTRUCTION WILL BE EXECUTED ON EVERY
  PASS THROUGH THAT CODE AFTER THE 1000000TH PASS.  TO ISSUE THE
  MESSAGE JUST ONCE:

       AFTER 1000000
         FIRST 1
           WTO   '1,000,000 PASSES - CHECK FOR LOGIC ERROR'
         ENDFIRST ,
       ENDAFTER ,

  IF YOU NAME ONE OF THE CONDITIONAL INSTRUCTIONS ('IF' ETC) IN COLS
  1-8, THEN THAT NAME MAY BE USED IN ANY OF THE 'END...' STATEMENTS
  TO TERMINATE ALL OF THE NESTED LOGIC STATEMENTS UP TO THE ONE WITH
  THAT NAME:

  EXAMP1  IF    (CLC,FIELDA,FIELDB,E),THENDO
             ...
  LEVEL2     IF    (CLR,R5,R6,E),THENDO
             ...
               IF   (TM,FLAG1,X'80',O),THENDO
                 ....
             ENDIF DOGROUP=LEVEL2
             ...
           ENDIF ,                   ENDS 'EXAMP1'

  IF YOU WANT TO END ALL OF THE NESTED GROUPS, YOU CAN CODE A
  'MAGIC' VALUE FOR THE 'DOGROUP' KEYWORD:

  EXAMP1  IF    (CLC,FIELDA,FIELDB,E),THENDO
             ...
  LEVEL2     IF    (CLR,R5,R6,E),THENDO
             ...
               IF   (TM,FLAG1,X'80',O),THENDO
                 ....
           ENDIF DOGROUP=*ALL*       ENDS ALL ACTIVE GROUPS

  SINCE '*ALL*' IS NOT A VALID ASSEMBLER TAG VALUE, IT IS USED TO
  CAUSE THE CLOSURE OF ALL EXISTING ACTIVE DO-GROUPS.
