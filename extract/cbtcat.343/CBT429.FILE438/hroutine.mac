         TITLE 'HEXADECIMAL CONVERSION ROUTINE'
         SPACE 2
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
*        CONVERT ONE WORD OF DATA FROM EBCDIC TO PRINTABLE HEX        *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
         SPACE 2
         GBLC  &GCVXL,&WCVXL       'LOCAL' SYMBOLS DECLARED HERE SO
* USER IS NOT REQUIRED TO DEFINE &GSECT AND &WSECT IN OPEN CODE
         MACRO
         GETCVX &DUMMY             GET SYMBOLS INTO OPEN CODE
         GBLC  &GSECT,&WSECT,&GCVXL,&WCVXL
&GCVXL   SETC  '&GSECT'
&WCVXL   SETC  '&WSECT'
         MEND
         VERSION 2
         GETCVX ,                  INVOKE MACRO
CVXWORD  SECTION ,                 ONE WORD TO THE WISE
         SPACE
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
*        WORD TO BE CONVERTED MUST BE IN R1                           *
*        PRINTABLE HEX ANSWER IS RETURNED IN R0-R1                    *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
         SPACE
         ST    R1,$CVXEB           STORE IN WORK AREA
         UNPK  $CVXPR,$CVXEB       EXPLODE THE DIGITS
         MVZ   $CVXPR(8),=XL8'00'  ZERO OUT THE ZONE BITS FOR TR
         TR    $CVXPR(8),$CVXTBL   MAKE DIGITS PRINTABLE
         LM    R0,R1,$CVXPR        GIVE BACK TO CALLER
         RETN   ,                  KEEP CONSTANTS LOCAL
         SPACE
         DC    0D'0'               EFFICIENT BOUNDARY FOR TBL & EB
$CVXTBL  DC    C'0123456789ABCDEF' IDENTITY TABLE FOR PRINTING
$CVXEB   DC    PL5'0'              EXTRA BYTE IS FOR UNPK
         DC    0F'0'               GET BACK ON A BOUNDARY
$CVXPR   DC    ZL9'0'              EXTRA BYTE IS FOR UNPK
         SPACE
         ENDSECT ,                  END OF CVXWORD
         TITLE 'CONVERT A LINE TO HEX'
         SPACE
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
*        CALLER MUST PASS ADDRESS OF DATA IN R1 - OUTPUT TO OUTLINE   *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
         SPACE
CVXLINE  SECTION ,                 SAVE 2-11 & 14
         SPACE
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
*        ADDRESS OF LINE TO BE CONVERTED MUST BE IN R1                *
*        HEX 'DUMP' MOVED TO OUTLINE                                  *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
         SPACE
         LR    R10,R1              SAVE POINTER
         PERFORM CVXWORD           GET PRINTABLE FOR ADDRESS
         STCM  R0,15,$CVXADDR      STORE FIRST 4 HEX CHARS
         STCM  R1,15,$CVXADDR+4    . NOW SECOND 4
         LA    R2,$CVX1ST          POINT TO OUTPUT AREA
         IF    (CLC,=CL5'REGS ',$CVXMSG,NE),OR,                        C
               ((CLC,=CL5'0-7  ',$CVXMSG+5,NE),AND,                    C
               (CLC,=CL5'8-15 ',$CVXMSG+5,NE)),THENDO
           MVC   $CVXTXT,0(R10)    MOVE IN AS-IS
           TR    $CVXTXT,$CVXTBL2  USER MAY CHANGE TABLE
         ELSE  ,
           MVC   $CVXTXT,=CL32'                                '
         ENDELSE ,
         DO    2                   MAJOR LOOP COUNTER
           DO    4                 MINOR LOOP COUNTER
             ICM   R1,15,0(R10)    WORD TO CONVERT
             PERFORM CVXWORD       GO CONVERT IT
             STCM  R0,15,0(R2)     STORE FIRST 4 HEX CHARS
             STCM  R1,15,4(R2)     . NOW SECOND 4
             I     R10,4           BUMP INPUT POINTER
             I     R2,9            BUMP OUTPUT POINTER
           ENDO  ,                 BACK FOR ANOTHER WORD
           I     R2,2              2 EXTRA AFTER 4 WORDS
         ENDO  ,                   BACK FOR NEXT 4 WORDS
         MVC   OUTLINE+1(132),$CVXLINE DATA - NO CCCHAR
         CALL  TRACERTN,(OUTLINE)
         MVC   $CVXMSG,=C'          ' RESET
         RETN   ,                   RETURN TO CALLER
         SPACE
&WCVXL   LOCTR
         SPACE
$CVXLINE DC    C'  '
$CVXADDR DC    CL8' ',C' '         ADDRESS OF THIS MESS
$CVX1ST  DC    CL8' ',C' ',CL8' ',C' ',CL8' ',C' ',CL8' ',C'   '
$CVX2ND  DC    CL8' ',C' ',CL8' ',C' ',CL8' ',C' ',CL8' ',C'   *'
$CVXTXT  DC    CL32' ',C'* '
$CVXMSG  DC    CL10' '             FOR USER
$CVXTBL2 DC    CL16'................'    00 - 0F
         DC    CL16'................'    10 - 1F
         DC    CL16'................'    20 - 2F
         DC    CL16'................'    30 - 3F
         DC    CL16' .........Ö.<(+×'    40 - 4F
         DC    CL16'&&.........!$*);^'   50 - 5F
         DC    CL16'-/........×,%_>?'    60 - 6F
         DC    CL16'.........`:#@''="'   70 - 7F
         DC    CL16'...............+'    80 - 8F
         DC    CL16'................'    90 - 9F
         DC    CL16'................'    A0 - AF
         DC    CL16'................'    B0 - BF
         DC    CL16'{ABCDEFGHI......'    C0 - CF
         DC    CL16'}JKLMNOPQR......'    D0 - DF
         DC    CL16'..STUVWXYZ......'    E0 - EF
         DC    CL16'0123456789......'    F0 - FF
         SPACE
&GCVXL   LOCTR
         SPACE
         ENDSECT , END OF CVXLINE
         TITLE 'CONVERT A BLOCK TO HEX'
         SPACE
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
* R1 MUST POINT TO 2 ADCONS - THE FIRST IS THE BEGINNING OF THE       *
* BLOCK TO BE PRINTED, AND THE SECOND IS THE LAST BYTE TO BE          *
* PRINTED. RC16 IS SET IF THE FIRST ADDRESS IS GREATER THAN THE       *
* SECOND.                                                             *
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
         SPACE
CVXBLOCK SECTION ,
         LM    R2,R3,0(R1)         START/END ADDRESSES
         IF    (CLR,R2,R3,NH),THENDO START MUST BE <= END
           SLR   R15,R15           SET RETURN CODE TO ZERO
           STM   R2,R3,$CVXST      SAVE
           MVI   CCCHAR,C'0'       DOUBLE SPACE FIRST LINE
           LR    R4,R2             DUPLICATE BEGIN POINTER
           SRL   R2,5              GET ADDRESS OF PREV 32 BYTE
           SLL   R2,5              . BOUNDARY
           ST    R2,$CVX32         SAVE
           LR    R3,R4             DUPLICATE
           SLR   R3,R2             R3 IS INDEX INTO 32 BYTE UNIT
           LA    R6,$CVXCHAR(R3)   STARTING POINT FOR AS-IS
           SLL   R3,1              DOUBLE INDEX
           LA    R5,$CVXHEX(R3)    STARTING POINT FOR HEX
           L     R7,$CVX32         START 32 BYTE BOUNDARY
           LA    R8,31(,R7)        LAST CHAR OF LINE
           IF    (CL,R8,$CVXEND,H),THENDO R8 IS MINIMUM
             L     R8,$CVXEND      . OF 31+$CVX32 AND $CVXEND
           ENDO ,                  R7 IS NOW SET
           DO    WHILE=(CL,R8,$CVXEND,NH) DO-GROUP FOR ENTIRE BLOCK
             IF   (CL,R8,$CVXEND,L),AND, SEE IF WE CAN DO ONE          C
               (CLR,R4,R7,E),THENDO . COMPLETE LINE (EFFICIENT)
               LR    R1,R4         POINT TO THIS BLOCK
               PERFORM CVXLINE     . AND GO CONVERT 32
               I     R4,32         BUMP INPUT POINTER
               IF    (CL,R8,$CVXEND,E),THENDO WAS THIS LAST PASS?
                 I     R8,32       FORCE PAST 'END'
               ELSE  ,             NOT LAST - CONTINUE
                 LA    R8,63(,R7)  LAST CHAR OF FOLLOWING LINE
                 I     R7,32       BUMP TO NEXT 'LINE'
                 IF    (CL,R8,$CVXEND,H),THENDO R7 IS MINIMUM
                   L     R8,$CVXEND . OF 32+$CVX32 AND $CVXEND
                 ENDO  ,           R7 IS NOW SET
               ENDELSE ,           END OF LAST-PASS LOGIC
             ELSE  ,               CAN ONLY DO PART OF THIS LINE
               LR    R1,R7         FOR CVXWORD
               PERFORM CVXWORD     CONV TO HEX
               STCM  R0,15,$CVXADDR FIRST WORD
               STCM  R1,15,$CVXADDR+4 SECOND
               DO    WHILE=(CLR,R4,R8,NH) DO THRU 'R8'
                 MVC   $CVXPL1,0(R4) MOVE 1 CHAR
                 UNPK  $CVXZL2(3),$CVXPL1(2) EXPLODE
                 MVZ   $CVXZL2,=X'0000' SET ZONES TO '0'
                 TR    $CVXZL2,$CVXTBL3 MAKE PRINTABLE
                 MVC   0(2,R5),$CVXZL2 MOVE TWO HEX NIBBLES
                 MVC   0(1,R6),0(R4) MOVE ORIG BYTE
                 I     R4          BUMP INPUT POINTER
                 I     R5,2        BUMP HEX OUTPUT POINTER
                 I     R6          BUMP CHAR OUTPUT POINTER
               ENDO  ,             END OF THIS OUTPUT LINE
               LA    R5,$CVXHEX    POINTER FOR HEX MOVE
               MVC   $CVXTXT,$CVXCHAR MOVE 32 BYTES AS-IS
               TR    $CVXTXT,$CVXTBL2 USER MAY CHANGE TABLE
               LA    R2,$CVX1ST    'TO' POINTER
               DO    2             OUTER LOOD TWO TIMES
                 DO    4           INNER LOOP 4 TIMES
                   MVC   0(8,R2),0(R5) ONE WORD CONVERTED TO HEX
                   I     R2,9      BUMP 'TO' POINTER
                   I     R5,8      BUMP 'FROM' POINTER
                 ENDO ,            END OF HALF-LINE
                 I     R2,2        TWO EXTRA MID-LINE
               ENDO ,              END OF LINE
               MVC   OUTLINE+1(132),$CVXLINE LINE TO OUTPUT AREA
               CALL  TRACERTN,(OUTLINE)
               MVC   $CVXHEX(96),SPACES INITIALIZE LINE
               LA    R5,$CVXHEX    RESET
               LA    R6,$CVXCHAR   . POINTERS
               IF    (CL,R8,$CVXEND,E) THENDO WAS THIS LAST PASS?
                 I     R8,32       FORCE PAST 'END'
               ELSE  ,             NOT LAST - CONTINUE
                 LA    R8,63(,R7)  LAST CHAR OF FOLLOWING LINE
                 I     R7,32       BUMP TO NEXT 'LINE'
                 IF    (CL,R8,$CVXEND,H),THENDO R7 IS MINIMUM
                   L     R8,$CVXEND . OF 32+$CVX32 AND $CVXEND
                 ENDO ,            R7 IS NOW SET
               ENDELSE ,           END OF LAST-PASS LOGIC
             ENDELSE ,             END OF CVXLINE CALL
           ENDO ,                  BACK TO TEST FOR END OF BLOCK
         ENDO  ,                   END OF 'MAIN'
         RETN  ,
$CVXST   DC    A(*)            START OF INPUT
$CVXEND  DC    A(*)            END OF INPUT
$CVX32   DC    A(*)            32 BYTE BOUNDARY
$CVXHEX  DC    CL64' '         32 BYTES CONVERTED TO HEX
$CVXCHAR DC    CL32' '         32 BYTES AS-IS
$CVXPL1  DC    PL1'0',C' '     FOR UNPACK
$CVXZL2  DC    ZL2'0',C' '     FOR UNPACK
$CVXTBL3 DC    C'0123456789ABCDEF' MAKE PRINTABLE
         ENDSECT ,             END OF CVXBLOCK
*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
