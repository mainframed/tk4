         MACRO
&NAME    EM    &TARGET,&SOURCE,&FORMAT,&FLOAT=,&INSERT=,&COMMA=,&MASK=,C
               &DB=
.*       SPACE 2
.**=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
.* 'EM' UTILIZES 'ED' OR 'EDMK' TO EDIT USER FIELD TO USER'S SPECS    *
.* THE FIRST OPERAND SPECIFIES THE RECEIVING FIELD                    *
.* THE SECOND IS THE SENDING FIELD AND MUST BE VALID DECIMAL DATA     *
.*   (IF THE DATA IS ZONED, IT IS CONVERTED TO PACKED)                *
.* THE (OPTIONAL) THIRD FIELD (A NUMERIC SELF-DEFINING TERM)          *
.*   SPECIFIES THE TOTAL NUMBER OF DIGITS TO THE RIGHT OF THE DECIMAL *
.*   - IF THIS PARAMETER IS OMITTED, THE SCALING VALUE OF THE SOURCE  *
.*   OPERAND IS USED (EG: DC    PL4'12345.67' WOULD HAVE A SCALING    *
.*   VALUE OF 2)                                                      *
.* FLOAT=X SPECIFIES THE FILL CHARACTER TO PRECEED THE                *
.*   FIRST NUMERIC DIGIT (BLANK IS DEFAULT) (X IS ANY NON-BLANK CHAR) *
.* INSERT=X SPECIFIES THE SINGLE CHARACTER TO IMMEDIATELY PRECEED THE *
.*   FIRST NUMERIC DIGIT (BLANK IS DEFAULT) (X IS ANY NON-BLANK CHAR) *
.* EX: IF FLOAT=* AND INSERT=$ THEN THE RESULT COULD APPEAR:          *
.*         *******$1,225.00                                           *
.* COMMA=NO CAUSES NO COMMAS TO BE INSERTED IN THE RESULT. LEAVING    *
.*   PARAMETER OUT OR SPECIFYING ANY VALUE OTHER THAN 'NO' CAUSES     *
.*   COMMAS TO BE INSERTED BETWEEN EACH THREE DIGITS                  *
.* MASK=HEXDIGITS ALLOWS USER TO SPECIFY HER/HIS OWN EDIT MASK        *
.* DB=X ALLOWS USER TO SPECIFY TYPE OF NOTATION FOR +/- VALUES. IF    *
.*   NOT SPECIFIED, NEGATIVE VALUES ARE INDICATED BY A '-' IN THE     *
.*   HIGH ORDER POSITION (IMMEDIATELY PRECEDING THE MOST SIGNIFICANT  *
.*   DIGIT.                                                           *
.*   SUPPORTED VALUES FOR THIS PARAMETER ARE:                         *
.*   DB=- OR DB=(-,LEFT/RIGHT)                                        *
.*   DB=DB                                                            *
.*   DB=PARENS                                                        *
.*   DB=CR                                                            *
.*   DB=+ OR DB=(+,LEFT/RIGHT)                                        *
.*   WHEN -, DB, OR PARENS IS SPECIFIED. INDICATION IS PROVIDED       *
.*   FOR NEGATIVE VALUES ONLY. WHEN CR OR + IS SPECIFIED, AN          *
.*   EXPLICIT INDICATION IS PROVIDED FOR POSITIVE OR NEGATIVE VALUES  *
.*   (I.E. DB FOR NEGATIVE AND CR FOR POSITIVE).                      *
.*   FOR + AND - ONLY, A SECOND POSITIONAL SUBPARAMETER IS            *
.*   SUPPORTED WHICH ALLOWS PLACEMENT OF THE SIGN TO THE LEFT OF THE  *
.*   MOST SIGNIFICANT DIGIT, WITH NO BLANK POSITIONS BETWEEN THE SIGN *
.*   AND THE DIGIT. DEFAULT IS 'RIGHT', AGAIN WITH NO BLANK POSITIONS *
.*   BETWEEN THE RIGHTMOST DIGIT AND THE SIGN.                        *
.*   WHEN DB OR CR IS SPECIFIED, ONE BLANK POSITION IS PROVIDED       *
.*   BETWEEN THE RIGHTMOST DIGIT AND THE CR OR DB INDICATOR.          *
.* THE FIRST TWO OPERANDS CAN BE SPECIFIED IN THE FOLLOWING WAYS:     *
.*    DATANAME   - OR - DATANAME(LENGTH)   - OR -                     *
.*    DATANAME(,BASEREG)  - OR - DATANAME(LENGTH,BASEREG)  - OR -     *
.*    NUMERIC(LENGTH,BASEREG)                                         *
.* THE LENGTH PARAMETER FOR EACH OPERAND DEFAULTS TO THE LENGTH       *
.* ATTRIBUTE OF THE VARIABLE NAME (IF ANY - THE LENGTH IS SET TO 1    *
.* FOR EXPRESSIONS WHICH DO NOT BEGIN WITH A DATA NAME). THE LENGTH   *
.* OF 'TARGET' MUST BE BETWEEN 1 AND 255. IF THE SOURCE ITEM IS       *
.* ZONED DECIMAL, ITS LENGTH MUST BE BETWEEN 1 AND 31. IF IT IS NOT   *
.* ZONED DECIMAL, THEN IT IS ASSUMED TO BE PACKED DECIMAL, AND ITS    *
.* LENGTH MUST BE BETWEEN 1 AND 16 (16 IS THE MAXIMUM NUMBER OF       *
.* BYTES IN A PACKED DECIMAL FIELD).                                  *
.**=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
.*       SPACE 2
         GBLC  &$MSECT(31)         TESTED FOR ENVIRONMENT
         GBLC  &$PTAG1,&$PTAG2     PAR$E - TAG PORTION
         GBLA  &$PLEN1,&$PLEN2     PAR$E - LENGTH
         GBLC  &$PBASE1,&$PBASE2   PAR$E - BASE REGISTER PORTION
         GBLC  &$PEB1,&$PEB2       '' OR '(R5)' ETC
         GBLC  &$PELB1,&$PELB2     '(4)' OR '(4,R5)' ETC
         GBLA  &$MBLATH            CONTROLS LISTING OF DIAGNOSTICS
         LCLA  &DIG                NUMBER OF DIGITS TO EDIT
         LCLA  &DEC                DIGITS TO RIGHT OF DECIMAL POINT
         LCLA  &LN                 BYTE LENGTH OF PACKED FIELD
         LCLA  &DCRMT              LOCATES BYTE PRECEDING X'21'
         LCLA  &SCALE              # OF DIGITS RIGHT OF DECIMAL POINT
         LCLA  &I,&J               WORK VARIABLES
         LCLB  &GENDC              SET TO (1) TO GEN WORK CELL
         LCLA  &M                  FOR LENGTH OF (OPT) MINUS SIGN
         LCLC  &S                  NAME FOR GENERATED PACKED FIELD
         LCLC  &U                  WORK VARIABLE
         LCLC  &W                  WORK VARIABLE
         LCLC  &X                  LOCAL FOR &SYSNDX
         LCLC  &Y                  HOLDS EDIT MASK (BUILT OR MASK=)
         LCLC  &Z                  WORK VARIABLE
         LCLC  &N                  HOLDS &NAME - BLANKED OUT
         LCLC  &INS                USER SPECIFIED INSERT CHARACTER
         LCLC  &FLT                USER SPECIFIED FLOAT CHARACTER
         LCLC  &COM                '6B' DEFAULT; '' IF 'COMMA=NO'
&M       SETA  0                   ASSUME NO MINUS SIGN
&SCALE   SETA  0                   ASSUME INTEGER
         AIF   ('&SOURCE'(1,1) GE '0').TEST00 GO IF SELF-DEFINING
         AIF   (T'&SOURCE NE 'P' AND T'&SOURCE NE 'Z').TEST00
&SCALE   SETA  S'&SOURCE           SET TO IMPLICIT SCALING
.TEST00  AIF   ('&FORMAT' EQ '').SKIP00 GO IF NO EXPLICIT SCALING
&SCALE   SETA  &FORMAT             SET TO USER-SPECIFIED SCALING
.SKIP00  PAR$E &TARGET,&SOURCE     BREAK UP INTO TAG-LENGTH-BASE
&X       SETC  '&SYSNDX'           FOR BREVITY
&N       SETC  '&NAME'             BLANK LATER
&Z       SETC  '$WRK&X'            FOR BREVITY
&COM     SETC  '6B'                ASSUME COMMA
         AIF   ('&MASK' EQ '').TEST01 GO IF NO MASK SPECIFIED
         AIF   ('&INSERT' EQ '' AND '&FLOAT' EQ '').DOMASK
         MNOTE 8,'MASK AND INSERT/FLOAT MUTUALLY EXCLUSIVE - ABORTED'
         MEXIT
.DOMASK  ANOP                      USER SPECIFIED 'MASK=...'
&Y       SETC  '&MASK'             SET SYMBOL TO USER VALUE
         AGO   .OK05
.TEST01  ANOP
&FLT     SETC  ' '                 ASSUME BLANK
         AIF   ('&FLOAT' EQ '').OK01 GO IF ASSUMPTION CORRECT
&FLT     SETC  '&FLOAT'(1,1)       SET TO USER-SPECIFIED VALUE
.OK01    AIF   ('&INSERT' EQ '').OK02
&INS     SETC  '&INSERT'(1,1)      SET TO USER-SPECIFIED VALUE
.OK02    ANOP
&DEC     SETA  0                   DEFAULT 0 DIG TO RIGHT OF '.'
         AIF   (&SCALE EQ 0).OK03
&DEC     SETA  &SCALE              # OF USER SPEC. DIGITS RIGHT OF '.'
.OK03    AIF   ('&COMMA' NE 'NO').OK05 IF NOT =, LEAVE IT AT '6B'
&COM     SETC  ''                  SET TO NULL
.OK05    AIF   ('&SOURCE'(1,1) GE '0').PACKED ASSUME PACKED
         AIF   (T'&SOURCE NE 'Z').PACKED GO IF INPUT IS PACKED
&DIG     SETA  &$PLEN2             SET ZONED DECIMAL LENGTH
&LN      SETA  (&DIG+1)/2          REQUIRED LENGTH FOR PACKED
&S       SETC  '$PWK&SYSNDX'       UNIQUE TAG
         $WA                       DATA AREA
&S       DC    PL&LN'0'            PACKED DECIMAL WORK CELL
         $IA                       INSTRUCTION AREA
         AIF   (&$MBLATH LT 6).SKIP06
         DC    0C'&S-&$PTAG2-&$PELB2' EM DIAGNOSTIC - S - $PTAG - $PELB
.SKIP06  ANOP
&N       EPACK &S,&$PTAG2&$PELB2   COPY TO PACKED DECIMAL
&N       SETC  ''                  ELIM DUP TAGS
         PAR$E &TARGET,&SOURCE     RESCAN (KLUDGE)
         AGO   .SKIP10
.PACKED  ANOP
&DIG     SETA  &$PLEN2*2-1         NUMBER OF DIGITS
&LN      SETA  &$PLEN2             PACKED LENGTH (IN CASE &DEC >= &DIG)
&S       SETC  '&$PTAG2&$PEB2'     ELIM POSSIBLE EXPLICIT LENGTH
.SKIP10  AIF   (&DIG GT &DEC).OK20 GO IF AT LEAST 1 DIGIT LEFT OF '.'
.LOOP12  ANOP              *****   ALL DIGITS ARE TO RIGHT OF '.' *****
&Y       SETC  '20&Y'              CREATE ONE DIGIT SELECT
&DEC     SETA  &DEC-1              . FOR EACH USER
&DIG     SETA  &DIG-1              . SPECIFIED DIGIT
         AIF   (&DIG GT 0).LOOP12  LOOP BACK UNTIL FINISHED
.LOOP14  AIF   (&DEC EQ 0).SKIP16  GO IF WE HAVE LOCATED '.'
&Y       SETC  'F0&Y'              ZERO FILL TO LEFT OF USER'S DIGITS
&DEC     SETA  &DEC-1              DECREMENT DECIMAL COUNT
         AGO   .LOOP14             BACK FOR TEST
.SKIP16  ANOP              *****   HERE IS WHERE '.' GOES *****
&Y       SETC  '21204B&Y'          MOVE IN '.' AND PRECEDING CHARS
&S       SETC  '$PWK&SYSNDX'       TWO EXTRA DIGITS FOR '0.DDD'
&GENDC   SETB  (1)                 SHOW DEFINE CONSTANT REQUIRED
&LN      SETA  &LN+1               .
&N       ZAP   &S,&$PTAG2&$PELB2   MOVE TO LARGER WORK CELL
&N       SETC  ''                  NULLIFY NAME
         AGO   .LAST50             GO ON TO NEXT STEP
.OK20    ANOP
         AIF   ('&MASK' NE '').LAST50 GO IF USER-DEFINED MASK
&DCRMT   SETA  0                   DIGIT COUNT TO RIGHT OF X'21'
         AIF   (&DIG GT 1).TEST2   FALL THROUGH IF 1 DIGIT
&DCRMT   SETA  1                   SET LOC'N OF X'21' FROM RIGHT
&Y       SETC  '202120'            SELECT 1 DIGIT
&S       SETC  '$PWK&SYSNDX'       TWO EXTRA DIGITS FOR 'BBD'
&GENDC   SETB  (1)                 SHOW DEFINE CONSTANT REQUIRED
&LN      SETA  &LN+1               .
&N       ZAP   &S,&$PTAG2&$PELB2   MOVE TO LARGER WORK CELL
&N       SETC  ''                  NULLIFY NAME
         AGO   .LAST50             GO ON TO NEXT STEP
.TEST2   AIF   (&DEC EQ 0).INTEGER
.LOOP22  ANOP
&Y       SETC  '20&Y'
&DCRMT   SETA  &DCRMT+1            COUNT DIGITS IN MASK
&DEC     SETA  &DEC-1
&DIG     SETA  &DIG-1
         AIF   (&DEC GT 0).LOOP22
&Y       SETC  '4B&Y'
&DCRMT   SETA  &DCRMT+1            COUNT DIGITS IN MASK
.INTEGER AIF   (&DIG GT 1).TEST24
&Y       SETC  '21&Y'
&FLT     SETC  '0'                 FLOOD WITH ZEROS
         AGO   .LAST50
.TEST24  AIF   (&DIG GT 2).TEST26  GO IF THREE OR MORE DIGITS
&Y       SETC  '2120&Y'            2 DIGITS TO LEFT OF '.'
&DCRMT   SETA  &DCRMT+1            COUNT DIGITS IN MASK
         AGO   .LAST50             GO FISH
.TEST26  ANOP
&Y       SETC  '202120&Y'          SET FIRST 3 DIGITS TO LEFT OF '.'
&DCRMT   SETA  &DCRMT+1            COUNT DIGITS IN MASK
         AIF   (&DIG EQ 3).LAST50  GO IF DONE WITH DIGITS
&DIG     SETA  &DIG-3              SUB THE THREE WE JUST DID
.LOOP28  ANOP
&Y       SETC  '20&COM&Y'          ONE MORE DIGIT SELECT
         AIF   (&DIG EQ 1).LAST50  GO IF DONE WITH DIGITS
&Y       SETC  '20&Y'              YET ANOTHER
         AIF   (&DIG EQ 2).LAST50  GO IF DONE WITH DIGITS
&Y       SETC  '20&Y'              YET ANOTHER
&DIG     SETA  &DIG-3              SUB THE THREE WE JUST DID
         AIF   (&DIG GT 0).LOOP28  BACK IF MORE ELSE FALL THROUGH
.LAST50  ANOP
         $WA                       WORK AREA
         AIF   ('&MASK' NE '').DOMASK2
$WRK&X   DC    X'40&Y'             WORK AREA FOR EDIT
         AIF   ('&DB' EQ '').NEXT55
         AIF   ('&DB' NE '-').NEXT55
         DC    C' '                MINUS SIGN POSITION
&M       SETA  1                   ALLOW FOR MINUS SIGN
.NEXT55  ANOP
$EDW&X   DC    C'&FLT',X'&Y'       EDIT MASK
         AGO   .FIN1
.DOMASK2 ANOP
$WRK&X   DC    X'&Y'               WORK AREA FOR EDIT
$EDW&X   DC    X'&Y'               EDIT MASK
.FIN1    AIF   (NOT &GENDC).FIN2   GO IF NO PACKED CELL NEEDED
&S       DC    PL&LN'0'            PACKED DECIMAL WORK CELL
.FIN2    $IA                       INSTRUCTION AREA
&N       MVC   $WRK&X,$EDW&X       COPY IN EDIT WORD
         AIF   ('&DB' NE '').NEXT60 GO IF &DB WAS SPECIFIED
         AIF   ('&INSERT' EQ '').SKIP62 GO IF NO INSERT - GEN 'ED'
         AIF   ('&INSERT' EQ '&FLOAT').SKIP62 SAME AS FLOAT - GEN 'ED'
.NEXT60  LA    R1,&Z+L'&Z-&DCRMT   DEFAULT POSITION FOR '$' ETC
         EDMK  $WRK&X,&S           MAKE IT PRINTABLE
         BCTR  R1,0                BACK UP TO 'REAL' LOCATION
         AIF   ('&DB' EQ '').SKIP60Z
         AIF   ('&DB' NE '-').SKIP64 FOR NOW...
         THENDO M                  DO IF NEGATIVE RESULT
           MVI   &Z+L'&Z,C'-'      SET MINUS SIGN
         ENDO  ,
         AGO   .SKIP64
.SKIP60Z MVI   0(R1),C'&INS'       MOVE IN PROTECT CHARACTER
         AGO   .SKIP64             SKIP AROUND 'ED'
.SKIP62  ED    $WRK&X,&S           MAKE IT PRINTABLE
.SKIP64  ANOP
&U       SETC  '$WRK&X+1'          NAME OF WORK CELL
&A       SETA  L'&Z                BYTE LENGTH OF WORK CELL
&B       SETA  &$PLEN1             BYTE LENGTH OF TARGET CELL
         AIF   (&$MBLATH LT 6).SKIP65
         DC    0AL4(&A,&B)         EM DIAGNOSTIC - L'WORK, L'TARGET
.SKIP65  ANOP
         AIF   (&B GT &A).SECOND   GO IF L'TARGET > L'WORK
&LW      SETA  &A-&B
         AIF   ('&DB(1,1)' NE '-').NEXT70
&LW      SETA  (&LW+1)             BUMP FOR POTENTIAL '-'
.NEXT70  ANOP
         MVC   &TARGET,$WRK&X+&LW  MOVE TO TARGET (TRUNCATE LEFTMOST)
         AGO   .MEND
.SECOND  ANOP                      L'TARGET < L'WORK
&LW      SETA  &B-&A               EXCESS LENGTH TO LEFT
&Y       SETC  '&$PTAG1.(&LW&$PBASE1)' CREATE OPERAND
         MVC   &Y,=&LW.C'&FLT'     FLOOD LEFTMOST CHARACTERS
&Y       SETC  '&$PTAG1+&LW.(&M+L''&Z&$PBASE1)' CREATE OPERAND
         MVC   &Y,&U               COPY ANSWER (RIGHT JUSTIFIED)
.MEND    AIF   ('&DB(1,1)' NE '-' OR '&DB(1,2)' EQ 'LEFT').OUT99
         MVI   &Z+L'&Z,C' '        SET SIGN POSITION TO SPACE
.OUT99   MEND
