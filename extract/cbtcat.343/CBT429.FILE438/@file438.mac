//***FILE 438 is from Dan Snyder of Columbus, Ohio and contains     *
//*           his collection of structured assembler macros that    *
//*           he developed for himself, over many years of coding.  *
//*                                                                 *
//*          email:   dsnyder@elektro.cmhnet.org                    *
//*                                                                 *
//*  -------------------------------------------------------------  *
//*                                                                 *
//*                       STRUCTURED MACROS                         *
//*                                                                 *
//*      These macros can help you create new programs and          *
//*      modify existing code by supporting IF-THEN-ELSE logic      *
//*      while requiring only a small learning curve from what      *
//*      you already know about S/390 Assembler (assuming that      *
//*      you do know it already).  Each 'IF' statement can be       *
//*      arbitrarily complex, and the 'IF' statements can be        *
//*      nested as many levels as you might need. (Certainly,       *
//*      no one would need more than 255 levels of nesting,         *
//*      would he?)                                                 *
//*                                                                 *
//*      Each group of instructions that you want conditionally     *
//*      executed would be headed by an 'IF' macro, and             *
//*      terminated by an 'ENDIF' macro.                            *
//*                                                                 *
//*      In its simplest form, the operand of the 'IF' macro        *
//*      consists of an op-code, the first operand address,         *
//*      the second operand address, and a condition. These         *
//*      four values must be enclosed within parentheses, and       *
//*      following the operands must be a comma and the             *
//*      statement terminating term 'THENDO'.                       *
//*                                                                 *
//*      The op-code may be any valid S/390 op-code that sets       *
//*      the condition code. The first and second operands may      *
//*      be any values that are valid for the instruction           *
//*      being created. The condition, such as 'E' or 'NO', is      *
//*      any value that can be used in creating an extended         *
//*      mnemonic branch instruction (such as 'BE' or 'BNO').       *
//*                                                                 *
//*      If you choose 'E' as the condition, then the group of      *
//*      instructions between the 'IF' and the 'ENDIF' will be      *
//*      executed only if the condition code set by the             *
//*      op-code and operands specified is a zero.                  *
//*                                                                 *
//*      In the following examples, the heading will indicate       *
//*      the conditions in which the do-group will be               *
//*      executed. In each case, an 'IF' statement determines       *
//*      the conditions, and an 'ENDIF' statement terminates        *
//*      the do-group. Comments either in the heading or on         *
//*      the appropriate instructions will indicate the             *
//*      details.                                                   *
//*                                                                 *
//*           Here is an example:                                   *
//*                                                                 *
//*             IF    (CLC,A,B,NE),THENDO                           *
//*                                                                 *
//*      The instructions between this 'IF' and its matching        *
//*      'ENDIF' will be executed if the result of the 'CLC'        *
//*      is a 1 or 2 (the not-equal condition).                     *
//*                                                                 *
//*           To execute the do-group if either one of two          *
//*      conditions is true, the format is:                         *
//*                                                                 *
//*           IF    (CLC,A,B,NE),OR,(CLC,C,D,NE),THENDO             *
//*                                                                 *
//*           Alternate format:                                     *
//*                                                        72       *
//*           IF    (CLC,A,B,NE),OR,                        C       *
//*                 (CLC,C,D,NE),THENDO                             *
//*                                                                 *
//*      (This will give you a small idea of what these macros      *
//*      can do.  For information about the more complicated        *
//*      capabilities of the structured macros in this package,     *
//*      please see member $$ALTDOC.)                               *
//*                                                                 *
//* --------------------------------------------------------------- *
//*                                                                 *
//*      Dan initially submitted only the structured macros         *
//*      that he wrote, to this tape.  He has now submitted many    *
//*      more macros.  Below, we see the types of macros which      *
//*      perform other categories of function, as well as the       *
//*      ones which can be used to create structured assembler      *
//*      programs.                                                  *
//*                                                                 *
//* --------------------------------------------------------------- *
//*                                                                 *
//*      In the following list of macros, each one is assigned to   *
//*      a category according to its intended use.  Most of the     *
//*      testing on these macros has been done in an environment    *
//*      called 'Version 2', or '2nd Generation'.  This             *
//*      environment presents a programmer with a pseudo-COBOL      *
//*      way of coding, and was created in the early 1990's as an   *
//*      aid to getting programs going faster.  The 'Version 1'     *
//*      or '1st Generation' environment was created in the mid     *
//*      1970's, and is somewhat more oriented toward Systems       *
//*      Programming types of programming.                          *
//*                                                                 *
//*      If a macro is listed as being 'GENERAL', or general        *
//*      purpose, then it is not part of either Version 1 or 2,     *
//*      but it might not have been tested outside one of these     *
//*      environments.                                              *
//*                                                                 *
//*      What follows is a description of the categories that       *
//*      these macros have been classified into:                    *
//*                                                                 *
//*      DIAGNOSTIC - The macro may be used in either Version 1     *
//*      or 2 programs, and is intended primarily as a diagnostic   *
//*      aid in getting the program running correctly.  Hopefully   *
//*      the effort expended in using one or more of these          *
//*      diagnostic macros will pay off in diagnosing the           *
//*      progress of your program.                                  *
//*                                                                 *
//*      GENERAL - Various utility macros that should provide       *
//*      services required for typical programs.                    *
//*                                                                 *
//*      INTERNAL - These macros are typically used as common       *
//*      service routines by other macros within this library.      *
//*      They usually provide services that would not be useful     *
//*      for use as open code macros (those coded within the        *
//*      program itself).                                           *
//*                                                                 *
//*      RUN-TIME-TOTALS - A set of general purpose macros that     *
//*      might make it easier to create counters that can be        *
//*      incremented at each of several places within a program,    *
//*      and then at some point during program execution            *
//*      (presumably during the finalization step of the            *
//*      program), print out all of the accumulated counts with     *
//*      one easy statement.                                        *
//*                                                                 *
//*      STRUCTURED - Macros that control the conditional or        *
//*      repetitive execution of a group of instructions            *
//*      following the group-initiation macro and ending with a     *
//*      group-terminating macro.                                   *
//*                                                                 *
//*      1st Generation - A set of macros that provice standard     *
//*      MVS interface and subroutine linkage conventions.          *
//*                                                                 *
//*      2nd GENERATION - Another set of MVS interface and          *
//*      subroutine linkage macros.                                 *
//*                                                                 *
//*      What follows is an alphabetic listing of all of the        *
//*      macro definitions included in the package, with its        *
//*      identifying macro type:                                    *
//*                                                                 *
//*                $AGOTO    INTERNAL                               *
//*                $ASECT    INTERNAL                               *
//*                $IA       INTERNAL                               *
//*                $MENDDO1  INTERNAL                               *
//*                $MENDDO2  INTERNAL                               *
//*                $MGBLDEF  INTERNAL                               *
//*                $MGFNAME  INTERNAL                               *
//*                $MGPNAME  INTERNAL                               *
//*                $WA       INTERNAL                               *
//*                ADDR      GENERAL                                *
//*                AFTER     STRUCTURED                             *
//*                AN        GENERAL                                *
//*                BEGTEST   DIAGNOSTIC                             *
//*                BHE       GENERAL                                *
//*                BLE       GENERAL                                *
//*                COMBOX    GENERAL                                *
//*                CONTINUE  GENERAL                                *
//*                CPYPAR$E  INTERNAL                               *
//*                CTE       TEXT SEARCH                            *
//*                CTEB      TEXT SEARCH                            *
//*                CVN       GENERAL                                *
//*                CVXREGS   DIAGNOSTIC                             *
//*                CVXWORD   DIAGNOSTIC                             *
//*                DEFPGMID  INTERNAL                               *
//*                DIAGMSG   INTERNAL                               *
//*                DISPLAY   DIAGNOSTIC                             *
//*                DIVISION  2ND GENERATION                         *
//*                DO        STRUCTURED                             *
//*                DTM       INTERNAL                               *
//*                DUMPMAIN  DIAGNOSTIC                             *
//*                DUMPREGS  DIAGNOSTIC                             *
//*                EDIT      STRUCTURED                             *
//*                ELSE      STRUCTURED                             *
//*                ELSEDO    STRUCTURED                             *
//*                ELSEIF    STRUCTURED                             *
//*                EM        GENERAL                                *
//*                ENDAFTER  STRUCTURED                             *
//*                ENDELSE   STRUCTURED                             *
//*                ENDFIRST  STRUCTURED                             *
//*                ENDIF     STRUCTURED                             *
//*                ENDO      STRUCTURED                             *
//*                ENDP      1ST GENERATION                         *
//*                ENDSECT   2ND GENERATION                         *
//*                ENDTEST   DIAGNOSTIC                             *
//*                EPACK     GENERAL                                *
//*                EQUATE    GENERAL                                *
//*                EUNPK     GENERAL                                *
//*                EVERY     STRUCTURED                             *
//*                EXECUTE   GENERAL                                *
//*                EXIT      2ND GENERATION                         *
//*                FINAL     2ND GENERATION                         *
//*                FIRST     STRUCTURED                             *
//*                GO        1ST GENERATION                         *
//*                GOBACK    2ND GENERATION                         *
//*                GOTO      2ND GENERATION                         *
//*                HEXRTN    DIAGNOSTIC (1ST GENERATION VERSION)    *
//*                HROUTINE  DIAGNOSTIC (2ND GENERATION VERSION)    *
//*                I         GENERAL                                *
//*                IF        STRUCTURED                             *
//*                IP        GENERAL                                *
//*                LEVELMSG  INTERNAL                               *
//*                MACBOX    GENERAL                                *
//*                NEXT      STRUCTURED                             *
//*                PAR$E     INTERNAL                               *
//*                PCALL     1ST GENERATION                         *
//*                PERFORM   2ND GENERATION                         *
//*                PRDEF     GENERAL (1ST GENERATION VERSION)       *
//*                PRINTER   GENERAL (2ND GENERATION VERSION)       *
//*                PROC      1ST GENERATION                         *
//*                PRTTABLE  RUN-TIME-TOTALS                        *
//*                RETN      1ST OR 2ND GENERATION                  *
//*                RTTBEG    RUN-TIME-TOTALS                        *
//*                RTTEND    RUN-TIME-TOTALS                        *
//*                RTTENT    RUN-TIME-TOTALS                        *
//*                RTTINCR   RUN-TIME-TOTALS                        *
//*                RTTPRT    RUN-TIME-TOTALS                        *
//*                RTTRESET  RUN-TIME-TOTALS                        *
//*                SECONDEP  2ND GENERATION                         *
//*                SECTION   2ND GENERATION                         *
//*                SETCSECT  INTERNAL                               *
//*                SETDEF    INTERNAL                               *
//*                SETRC     GENERAL                                *
//*                SETUP     INTERNAL                               *
//*                STOP      1ST GENERATION                         *
//*                SYSUT1    1ST GENERATION                         *
//*                SYSUT2    1ST GENERATION                         *
//*                TAG       GENERAL                                *
//*                THENDO    STRUCTURED                             *
//*                TRACER    DIAGNOSTIC                             *
//*                TRACER2   INTERNAL                               *
//*                TRC       DIAGNOSTIC (1ST GENERATION ONLY)       *
//*                TRSP      GENERAL                                *
//*                VAL       INTERNAL                               *
//*                VERSION   INTERNAL                               *
//*                                                                 *
