         MACRO
         PAR$E &OPND1,&OPND2
.*                      GLOBAL SYMBOLS FOR FIRST OPERAND
         GBLC  &$PTAG1        DISPLACEMENT PORTION OF OPERAND
         GBLA  &$PLEN1      EXPLICIT LENGTH IF SPECIFIED ELSE IMPLICIT
         GBLC  &$PBASE1       EXPLICIT BASE IF SPECIFIED ELSE NULL
         GBLC  &$PEB1         NULL IF NO EXPLICIT BASE ELSE (&$PBASE1)
         GBLC  &$PELB1 (&$PLEN1) IF NO EXP BASE ELSE (&$PLEN1,&$PBASE1)
.*                      GLOBAL SYMBOLS FOR SECOND OPERAND
         GBLC  &$PTAG2        DISPLACEMENT PORTION OF OPERAND
         GBLA  &$PLEN2      EXPLICIT LENGTH IF SPECIFIED ELSE IMPLICIT
         GBLC  &$PBASE2       EXPLICIT BASE IF SPECIFIED ELSE NULL
         GBLC  &$PEB2         NULL IF NO EXPLICIT BASE ELSE (&$PBASE2)
         GBLC  &$PELB2 (&$PLEN2) IF NO EXP BASE ELSE (&$PLEN2,&$PBASE2)
         GBLA  &$MBLATH       DOCUMENTATION CONTROL
         LCLA  &I,&J,&END,&BEG,&LEN
         LCLB  &ERRSW              FOR LENGTH ERROR DIAGNOSTIC
         LCLC  &X
&$PLEN1  SETA  1                   OPERATING ASSUMPTION
&$PBASE1 SETC  ''                  OPERATING ASSUMPTION
&END     SETA  K'&OPND1            NUMBER OF CHARS IN OPERAND
&I       SETA  1                   1ST CHAR OF OPND
         AIF   ('&OPND1'(1,1) GE '0').LOOP10 GO IF SELF-DEFINING
         AIF   (D'&OPND1).OK08     GO IF ALREADY DEFINED
&ERRSW   SETB  (1)                 SHOW EXPLICIT LENGTH REQUIRED
         AGO   .LOOP10             SKIP SETA
.OK08    ANOP
&$PLEN1  SETA  L'&OPND1            SET TO LENGTH ATTRIBUTE
.LOOP10  AIF   (&I EQ &END).NEXT15
&J       SETA  &I+1                POTENTIAL '('
         AIF   ('&OPND1'(&J,1) EQ '(').NEXT15
&I       SETA  &J                  BUMP BY 1
         AGO   .LOOP10             TRY, TRY AGAIN
.NEXT15  ANOP                      PROCESS TAG
&$PTAG1  SETC  '&OPND1'(1,&I)       SET TO TAG PORTION
         AIF   (&$MBLATH LT 6).SKIP16
         DC    0C'&$PTAG1',0AL4(1,&I) PAR$E DIAGNOSTIC - TAG1 PORTION
.SKIP16  AIF   (&I NE &END).NEXT18 GO IF NOT FINISHED
         AIF   (NOT &ERRSW).NEXT40 WE MUST HAVE A GOOD LENGTH
&$PLEN1  SETA  L'&OPND1            DO FORWARD SCAN
&ERRSW   SETB  (0)
         AGO   .NEXT40
.NEXT18  ANOP
&I       SETA  &I+2                SKIP OVER '('
         AIF   ('&OPND1'(&I,1) EQ ',').NEXT30 GO IF NO LENGTH
&BEG     SETA  &I                  BEGINNING OF LENGTH PARAMETER
.LOOP20  ANOP
&I       SETA  &I+1                BUMP TO NEXT
         AIF   (&I LE &END).TEST24
         MNOTE 8,'INVALID PARAMETER - CHECK OPERANDS'
         MEXIT
.TEST24  AIF   ('&OPND1'(&I,1) NE ',' AND '&OPND1'(&I,1) NE ')').LOOP20
&LEN     SETA  &I-&BEG             LENGTH OF LENGTH PORTION
&X       SETC  '&OPND1'(&BEG,&LEN)  EXPLICIT LENGTH
&$PLEN1  SETA  &X                   CONV TO SETA SYMBOL
         AIF   (&$MBLATH LT 6).NEXT31
         DC    0C'&$PLEN1',0AL4(&BEG,&LEN) PAR$E DIAGNOSTIC - LENGTH1
         AGO   .NEXT31
.NEXT30  AIF   (NOT &ERRSW).NEXT31 GO IF EXP LEN NOT REQ'D
&$PLEN1  SETA  L'&OPND1            DO FORWARD SCAN
&ERRSW   SETB  (0)
.NEXT31  AIF   ('&OPND1'(&I,1) EQ ')').NEXT40 GO IF FINISHED
&BEG     SETA  &I+1                SAVE FOR DESSERT
.LOOP32  AIF   (&I LT &END).CONT34 GO IF OK
         MNOTE 8,'ERROR IN BASE REGISTER PARM - CHECK OPERANDS'
         AGO   .NEXT40
.CONT34  ANOP
&I       SETA  &I+1                BEG OF BASE REG PORTION
         AIF   (&I LT &END AND '&OPND1'(&I,1) NE ')').LOOP32
&LEN     SETA  &I-&BEG             LENGTH OF BASE REG PORTION
&$PBASE1 SETC  '&OPND1'(&BEG,&LEN)  SET TO BASE PORTION
         AIF   (&$MBLATH LT 6).NEXT40
         DC   0C'&$PBASE1',0AL4(&BEG,&LEN) PAR$E DIAGNOSTIC - BASE REG1
.NEXT40  ANOP
&$PEB1   SETC  ''                  ASSUME NO EXPLICIT BASE REGISTER
&$PELB1  SETC  '(&$PLEN1.)'        ASSUME NO EXPLICIT BASE REGISTER
         AIF   ('&$PBASE1' EQ '').NEXT42
&$PEB1   SETC  '(&$PBASE1.)'       SET TO '(R5)' ETC
&$PBASE1 SETC  ',&$PBASE1'         ADD PRECEEDING COMMA
&$PELB1  SETC  '(&$PLEN1&$PBASE1.)' SET LENGTH AND BASE
.NEXT42  AIF   (&$MBLATH LT 6).SKIP44
         DC 0C'&$PTAG1&$PEB1'   PAR$E DIAGNOSTIC - DISP1(BASE1)
         DC 0C'&$PTAG1&$PELB1'  PAR$E DIAGNOSTIC - DISP1(LENGTH1,BASE1)
.SKIP44  AIF   ('&OPND2' EQ '').MEND
&$PTAG2  SETC  '&OPND2'            SET DEFAULT
&$PLEN2  SETA  1                   OPERATING ASSUMPTION
&$PBASE2 SETC  ''                  OPERATING ASSUMPTION
&END     SETA  K'&OPND2            NUMBER OF CHARS IN OPERAND
         AIF   ('&OPND2' EQ '').MEND
&I       SETA  1                   1ST CHAR OF OPND
         AIF   ('&OPND2'(1,1) GE '0').LOOP50 GO IF SELF-DEFINING
         AIF   (D'&OPND2).OK48     GO IF ALREADY DEFINED
&ERRSW   SETB  (1)                 SHOW EXPLICIT LENGTH REQUIRED
         AGO   .LOOP50             SKIP SETA
.OK48    ANOP
&$PLEN2  SETA  L'&OPND2            SET TO LENGTH ATTRIBUTE
.LOOP50  AIF   (&I EQ &END).NEXT55
&J       SETA  &I+1                POTENTIAL '('
         AIF   ('&OPND2'(&J,1) EQ '(').NEXT55
&I       SETA  &J                  BUMP BY 1
         AGO   .LOOP50             TRY, TRY AGAIN
.NEXT55  ANOP                      PROCESS TAG
&$PTAG2  SETC  '&OPND2'(1,&I)      SET TO TAG PORTION
         AIF   (&$MBLATH LT 6).SKIP57
         DC    0C'&$PTAG2',0AL4(1,&I) PAR$E DIAGNOSTIC - TAG2 PORTION
.SKIP57  AIF   (&I NE &END).NEXT58 GO IF NOT FINISHED
         AIF   (NOT &ERRSW).NEXT80 GO IF REALLY FINISHED
&$PLEN2  SETA  L'&OPND2            DO FORWARD SCAN
&ERRSW   SETB  (0)
         AGO   .NEXT80
.NEXT58  ANOP
&I       SETA  &I+2                SKIP OVER '('
         AIF   ('&OPND2'(&I,1) EQ ',').NEXT70 GO IF NO LENGTH
&BEG     SETA  &I                  BEGINNING OF LENGTH PARAMETER
.LOOP60  ANOP
&I       SETA  &I+1                BUMP TO NEXT
         AIF   (&I LE &END).TEST64
         MNOTE 8,'INVALID PARAMETER - CHECK OPERANDS'
         MEXIT
.TEST64  AIF   ('&OPND2'(&I,1) NE ',' AND '&OPND2'(&I,1) NE ')').LOOP60
&LEN     SETA  &I-&BEG             LENGTH OF LENGTH PORTION
&X       SETC  '&OPND2'(&BEG,&LEN)  EXPLICIT LENGTH
&$PLEN2  SETA  &X                   CONV TO SETA
         AIF   (&$MBLATH LT 6).NEXT71
         DC    0C'&$PLEN2',0AL4(&BEG,&LEN) PAR$E DIAGNOSTIC - LENGTH2
         AGO   .NEXT71
.NEXT70  AIF   (NOT &ERRSW).NEXT71
&$PLEN2  SETA  L'&OPND2            DO FORWARD SCAN
&ERRSW   SETB  (0)
.NEXT71  AIF   ('&OPND2'(&I,1) EQ ')').NEXT80 GO IF FINISHED
&BEG     SETA  &I+1                SAVE FOR DESSERT
.LOOP72  AIF   (&I LT &END).CONT74 GO IF OK
         MNOTE 8,'ERROR IN BASE REGISTER PARM - CHECK OPERANDS'
         AGO   .NEXT80
.CONT74  ANOP
&I       SETA  &I+1                BEG OF BASE REG PORTION
         AIF   (&I LT &END AND '&OPND2'(&I,1) NE ')').LOOP72
&LEN     SETA  &I-&BEG             LENGTH OF BASE REG PORTION
&$PBASE2 SETC  '&OPND2'(&BEG,&LEN)  SET TO BASE PORTION
         AIF   (&$MBLATH LT 6).NEXT80
         DC   0C'&$PBASE2',0AL4(&BEG,&LEN) PAR$E DIAGNOSTIC - BASE REG
.NEXT80  ANOP
&$PEB2   SETC  ''                  ASSUME NO EXPLICIT BASE REGISTER
&$PELB2  SETC  '(&$PLEN2.)'        ASSUME NO EXPLICIT BASE REG
         AIF   ('&$PBASE2' EQ '').NEXT82
&$PEB2   SETC  '(&$PBASE2.)'       SET TO '(R5)' ETC
&$PBASE2 SETC  ',&$PBASE2'         FINISH IT OFF
&$PELB2  SETC  '(&$PLEN2&$PBASE2.)' SET LENGTH AND BASE
.NEXT82  AIF   (&$MBLATH LT 6).MEND
         DC 0C'&$PTAG2&$PEB2'   PAR$E DIAGNOSTIC - DISP2(BASE2)
         DC 0C'&$PTAG2&$PELB2'  PAR$E DIAGNOSTIC - DIS2P(LENGTH2,BASE2)
.MEND    MEND
