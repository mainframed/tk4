//XODMNC4S JOB MSGCLASS=X,CLASS=B,NOTIFY=XSDMN
//*
//ASMHCL  PROC
//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=5M
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1
//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))
//SYSPRINT DD SYSOUT=X,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))
//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *
//             DCB=(BLKSIZE=400),DSN=&&LOADSET
//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=2M,COND=(8,LT,C)
//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)
//         DD  DDNAME=SYSIN
//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1,2)),DSN=&GOSET(GO)
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1
//SYSPRINT DD  SYSOUT=X,DCB=(RECFM=FB,BLKSIZE=3509)
//  PEND
//*
//*
//*  DM
//*
// EXEC ASMHCL
//SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB
//       DD DISP=SHR,DSN=SYS1.MODGEN
//SYSPRINT DD SYSOUT=*
//C.SYSIN DD *
SMFDS    CSECT
         IEESMCA
         EJECT
RDS      DSECT
******* START OF SPECIFICATIONS ***************************************
***                                                                  **
***  MACRO-NAME = IEEMBRDS                                           **
***                                                                  **
***  DESCRIPTIVE-NAME = SMF RECORDING DATA SET CONTROL BLOCK         **
***                                                                  **
***                                                                  **
***  FUNCTION = MAPPING FOR THE RDS.  AN RDS CONTAINS THE            **
***             DATA NECESSARY TO CONTROL AN SMF RECORDING           **
***             DATASET.  IT INCLUDES THE VSAM ACB AND RPL AND       **
***             OTHER FLAGS AND FIELDS DESCRIBING THE STATUS         **
***             OF THE DATASET.                                      **
***                                                                  **
******* END OF SPECIFICATIONS *****************************************
RDSID    DS    CL4           CONTROL BLOCK ID
RDSNEXT  DS    F             FORWARD CHAIN POINTER
RDSPREV  DS    F             BACKWARD CHAIN POINTER
RDSFLAG1 DS    XL1           DATASET STATUS INDICATORS
*                            XXX. ....  RESERVED
RDSFREE  EQU   X'10'         ...1 ....  NEED TO FREE DATASET AND RDS
RDSDUMP  EQU   X'08'         .... 1...  OPER HAS BEEN TOLD TO DUMP DS
RDSREADY EQU   X'04'         .... .1..  DS IS OPEN AND READY TO USE
RDSCLOSE EQU   X'02'         .... ..1.  DS NEEDS TO BE CLOSED
RDSNDOP  EQU   X'01'         .... ...1  DS NEEDS TO BE OPENED
RDSFLAG2 DS    XL1           DATASET STATUS INDICATORS
RDSLOST  EQU   X'80'         1... ....  DUMMY RDS FOR LOST DATA
RDSPHYER EQU   X'40'         .1.. ....  PHYSICAL I/O ERROR
RDSLOGER EQU   X'20'         ..1. ....  LOGICAL I/O ERROR
*                            ...X XXXX  RESERVED
RDSFLAG3 DS    XL1           RESERVED
RDSFLAG4 DS    XL1           RESERVED
RDSNAME  DS    CL10          DATASET NAME
RDSVOLID DS    CL6           VOLUME SERIAL
RDSDDN   DS    CL8           DDNAME RETURNED BY DYNAMIC ALLOC
RDSCAPTY DS    F             DATASET CAPACITY IN # OF BLOCKS
RDSNXTBL DS    F             NUMBER OF NEXT AVAILABLE BLOCK
RDSBQE   DS    A             ADDRESS OF BQE BEING WRITTEN
RDSAVSPC DS    F             AVAILABLE SPACE FROM SHOWCB
RDSENRBA DS    F             ENDRBA FROM SHOWCB
RDSCINV  DS    F             CONTROL INTERVAL SIZE
RDSDOMID DS    F             MSG # OF DUMP MSG
RDSRPL   DS    CL76          VSAM RPL
RDSACB   DS    CL76          VSAM ACB
         EJECT
SMFDS    CSECT
**********************************
*                                *
*        REGISTER EQUATES        *
*                                *
**********************************
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
**********************************
*                                *
*        STANDARD ENTRY LINKAGE  *
*                                *
**********************************
         STM   R14,R12,12(R13)         SAVE CALLERS REGS
         BALR  R12,0                   ESTABLIST BASE REGISTER
         USING *,R12                   USE REG 12 AS BASE
         ST    R13,SAVE+4              CROSS
         LA    R15,SAVE                  CHAIN
         ST    R15,8(R13)                  SAVE
         LR    R13,R15                       AREAS
         B     START                   BRANCH AROUND ID SECTION
         DC    CL8'SMFDS'              CSECT NAME
         DC    CL8'&SYSDATE'           ASSEMBLY DATE
         DC    CL8'&SYSTIME'           ASSEMBLY TIME
         EJECT
****************************************
*                                      *
*  START REAL CODE                     *
*    CHECK IF PARMS WERE PASSED TO     *
*    DETERMINE IF ANY MESSAGES         *
*    SHOULD BE WRITTEN                 *
*                                      *
****************************************
START    DS    0H                      START REAL CODE
         LINK  EP=KLEAR
         LR    R3,R1                   SAVE PASSED POINTER IN REG 3
         L     R3,0(R3)                GET PARM LINKAGE
         L     R10,CVTPTR              PUT CVTPTR INTO REG 10
         L     R10,SMCAADR(R10)        GET SMCA ADDR INTO REG 10
         LTR   R10,R10                 SE2 INSTALLED ?
         BZ    NOACTIVE
         BNM   NONSE2                  NO , BRANCH
         CLC   0(2,R3),NOPARMS         CHECK FOR NO PARMS
         BE    NOPARM                  IF NO PARMS, DO TPUT
         CLC   2(5,R3),NOMSG           CHECK FOR NOMSG
         BE    NOMESS                  IF YES, SKIP MESSAGE
         EJECT
****************************************
*                                      *
*  MESSAGES SHOULD BE WRITTEN          *
*    LOOP THROUGH ALL RDS'S AND        *
*    INDICATE THE STATUS OF EACH       *
*                                      *
****************************************
NOPARM   DS    0H                      NO PARM OR PARM NOT NOMSG
         SPACE 5
         USING SMCABASE,R10            SMCA ADDRESSABILITY
         TM    SMCAMISC,SMCAMAN        SMF ACTIVE
         BNO   NOACTIVE                NO , BRANCH
         TM    SMCAFLGS,SMCADTLS       DATA LOST ?
         BO    DATALOST                YES , BRANCH
         L     R11,SMCAFRDS            GET FIRST RDS POINTER
         USING RDS,R11                 RDS ADDRESSABILITY
         TPUT  TITLE,L'TITLE           WRITE TITLE
         EJECT
****************************************
*                                      *
*  GET THE NAME OF THE SMF DATA        *
*    SET AND THE VOLUME SERIAL         *
*    OF THE DEVICE ON WHICH IT RESIDES *
*                                      *
****************************************
LOOP     DS    0H
         TM    RDSFLAG2,RDSLOST        DATA LOST RDS
         BO    NOMESS                  YES , BRANCH (DO NOT FORMAT)
         MVI   OUTLINE,C' '            CLEAR THE
         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE  OUTPUT LINE
         MVC   OUTNAME(L'RDSNAME),RDSNAME   MOVE DSNAME
         MVC   OUTVSER(L'RDSVOLID),RDSVOLID MOVE VOLID
         EJECT
****************************************
*                                      *
*  CALCULATE HOW THE FULL THE DATA     *
*    SET IS AND REPORT THIS AS A       *
*    PERCENTAGE                        *
*                                      *
****************************************
         L     R4,RDSCAPTY             GET CAPACITY OF DS
         L     R3,RDSNXTBL             GET NEXT BLOCK NUMBER
         BCTR  R3,0                    DECREMENT BY 1
         M     R2,ONETHOU              SCALE FOR PERCENT
         DR    R2,R4                   DIVIDE (R3 HAS RESULT)
         CVD   R3,DBLWORD1             CONVERT TO DECIMAL
         UNPK  DBLWORD2,DBLWORD1+4(4)  UNPACK RESULT
         OI    DBLWORD2+7,X'F0'        FIX SIGN
         MVC   OUTPCNT(2),DBLWORD2+5   MOVE PERCENT
         MVI   OUTDOT,C'.'             INSERT DECIMAL POINT
         MVC   OUTPCNTT(1),DBLWORD2+7  MOVE TENTHS
         MVI   OUTPCNTS,C'%'           INSERT PERCENT SIGN
         CLI   OUTPCNT,C'0'            FIRST DIGIT ZERO ?
         BNE   AROUND1                 NO , BRANCH
         MVI   OUTPCNT,C' '            BLANK FIELD
         EJECT
****************************************
*                                      *
*  CALCULATE THE SIZE OF THE DATA      *
*    SET AND REPORT THIS IN BLOCKS     *
*    A BLOCK = X'1000' BYTES           *
*                                      *
****************************************
AROUND1  DS    0H
         L     R4,RDSCAPTY             GET CAPACITY OF DS
         CVD   R4,DBLWORD1             CONVERT TO DECIMAL
         UNPK  DBLWORD2,DBLWORD1+4(4)  UNPACK RESULT
         OI    DBLWORD2+7,X'F0'        FIX SIGN
         MVC   OUTSIZE(6),DBLWORD2+2   MOVE SIZE OF DATA SET
         CLI   OUTSIZE,C'0'            FIRST DIGIT ZERO
         BNE   AROUND2                 NO , BRANCH
         MVI   OUTSIZE,C' '            BLANK FIELD
         CLI   OUTSIZE+1,C'0'          SECOND DIGIT ZERO
         BNE   AROUND2                 NO , BRANCH
         MVI   OUTSIZE+1,C' '          BLANK FIELD
         CLI   OUTSIZE+2,C'0'          THIRD DIGIT ZERO
         BNE   AROUND2                 NO , BRANCH
         MVI   OUTSIZE+2,C' '          BLANK FIELD
         CLI   OUTSIZE+3,C'0'          FOURTH DIGIT ZERO
         BNE   AROUND2                 NO , BRANCH
         MVI   OUTSIZE+3,C' '          BLANK FIELD
         CLI   OUTSIZE+4,C'0'          FIFTH DIGIT ZERO
         BNE   AROUND2                 NO , BRANCH
         MVI   OUTSIZE+4,C' '          BLANK FIELD
         EJECT
****************************************
*                                      *
*  DETERMINE THE STATUS OF THE DATA    *
*    SET. IE. ACTIVE , ALTERNATE ,     *
*    OR DUMP REQUIRED                  *
*                                      *
****************************************
AROUND2  DS    0H
         C     R11,SMCASVCR            IS THIS DS ACTIVE ?
         BNE   NOTACTIV                NO , BRANCH
         MVC   OUTSTAT(L'ACTIVE),ACTIVE      INDICATE ACTIVE DS
         MVC   SUFFIX,24(R11)          GET LOCAL COPY OF SUFFIX
         B     TO@TPUT                 BRANCH AROUND
         SPACE 5
NOTACTIV DS    0H                      NOT ACTIVE DS
         TM    RDSFLAG1,RDSDUMP        DUMP REQUIRED ?
         BNO   ALT                     NO , BRANCH
         MVC   OUTSTAT(L'DUMPREQ),DUMPREQ    INDICATE DUMP REQUIRED
         B     TO@TPUT                 BRANCH AROUND
         SPACE 5
ALT      DS    0H
         MVC   OUTSTAT(L'ALTERNAT),ALTERNAT  INDICATE ALTERNATE DS
         EJECT
****************************************
*                                      *
*  PUT OUT A LINE OF DATA              *
*                                      *
****************************************
TO@TPUT  DS    0H
         TPUT  OUTLINE,L'OUTLINE       WRITE PGMER MESSAGE
         L     R11,RDSNEXT             MOVE TO NEXT RDS
         C     R11,SMCARDSH            LAST POINTS TO HEADER
         BNE   LOOP                    CONTINUE LOOP
         EJECT
****************************************
*                                      *
*  DETERMINE APPROPRIATE RETURN CODE   *
*    1 = SYS1.MANA                     *
*    2 = SYS1.MANB                     *
*    36= SYS1.MAN9    ...   ETC.       *
*                                      *
****************************************
NOMESS   DS    0H                      DON'T WRITE MESSAGE
         LA    R6,SUFFIXS              POINT TO SUFFIXS ARRAY
         LA    R7,L'SUFFIXS            NUMBER OF SUFFIXES
         SLR   R15,R15                 ZERO INDEX AND RETURN CODE
         SPACE 5
CONTINUE DS    0H
         CLC   SUFFIX,0(R6)            SUFFIX MATCH ??
         BE    EXITX                   IF YES, EXIT WITH RC
         LA    R15,1(R15)              INCREMENT RETURN CODE
         LA    R6,1(R6)                INCREMENT INDEX
         BCT   R7,CONTINUE             CONTINUE LOOP
         LA    R15,100                 IF NOT FOUND  ..  BUG
         B     EXIT                    BRANCH TO EXIT
         EJECT
****************************************
*                                      *
*  NON SE2 SYSTEM                      *
*                                      *
****************************************
NONSE2   DS    0H
         IC    R10,35(R10)             GET SMCAXORY FROM SMCA
         STC   R10,XORY                STORE IN O/P MESSAGE
         CLC   0(2,R3),NOPARMS         ANY PARMS ENTERED
         BE    NOPARMS1                NO , BRANCH
         CLC   2(5,R3),NOMSG           CHECK FOR NOMSG
         BE    NOMESS1                 IF YES, SKIP MESSAGE
NOPARMS1 DS    0H
         TPUT  MESS,L'MESS             WRITE PGMER MESSAGE
NOMESS1  DS    0H
         LA    R15,1                   PRIME RETURN CODE FOR MANX
         CLI   XORY,EX                 CHECK FOR MANX
         BE    EXIT                    IF YES, EXIT WITH RC=1
         LA    R15,2                   IF MANY, MAKE IT RC=2
         B     EXIT                    BRANCH TO EXIT
         EJECT
****************************************
*                                      *
*  PUT OUT SMF NOT ACTIVE MESSAGE      *
*                                      *
****************************************
NOACTIVE DS    0H
         TPUT  NOACTIVM,L'NOACTIVM     WRITE MESSAGE
         LA    R15,300                 INDICATE SMF NOT ACTIVE
         B     EXIT
         EJECT
****************************************
*                                      *
*  PUT OUT DATA LOST MESSAGE           *
*                                      *
****************************************
DATALOST DS    0H
         TPUT  DATALOSM,L'DATALOSM     WRITE MESSAGE
         LA    R15,400                 INDICATE DATA LOST MODE
         B     EXIT
         EJECT
EXITX    DS    0H
         LA    R15,1(R15)              RETCODE IS 1 GREATER THAN INDEX
EXIT     DS    0H
****************************************
*                                      *
*  STANDARD EXIT LINKAGE               *
*                                      *
****************************************
         L     13,SAVE+4
         L     14,12(13)
         LM    1,12,20(13)
         BR    14
         EJECT
****************************************
*                                      *
*  CONSTANTS AND STORAGE FIELDS USED   *
*                                      *
****************************************
DBLWORD1 DC    D'0'
DBLWORD2 DC    D'0'
FULLWORD DC    F'0'
ONETHOU  DC    F'1000'
MESS     DS    0CL9                    MESSAGE DC
         DC    C'SYS1.MAN'
XORY     DS    C
SUFFIX   DS    C
NOMSG    DC    C'NOMSG'
NOPARMS  DC    X'0000'                 NO PARMS
SUFFIXS  DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
ACTIVE   DC    C'ACTIVE       '
ALTERNAT DC    C'ALTERNATE    '
DUMPREQ  DC    C'DUMP REQUIRED'
NONSE2M  DC CL80'+++ SE2 OR SMF IS NOT ACTIVE IN THIS SYSTEM - SMFDS'
NOACTIVM DC CL80'+++ SMF IS NOT ACTIVE - SMFDS'
DATALOSM DC CL80'+++ SMF IS IN DATA LOST STATUS - NO RECORDING - SMFDS'
TITLE    DC    CL80'DATASET NAME  VOLSER      SIZE  %USED    STATUS'
OUTLINE  DC    CL80' '
OUTNAME  EQU   OUTLINE+0
OUTVSER  EQU   OUTLINE+14
OUTSIZE  EQU   OUTLINE+24
OUTPCNT  EQU   OUTLINE+32
OUTDOT   EQU   OUTLINE+34
OUTPCNTT EQU   OUTLINE+35
OUTPCNTS EQU   OUTLINE+36
OUTSTAT  EQU   OUTLINE+41
CVTPTR   EQU   16                      POINTER TO THE CVT
SMCAADR  EQU   X'C4'                   OFFSET IN CVT OF THE SMCA PTR
EX       EQU   C'X'                    TO CHECK SUFFIX
         DC    C'SAVE AREA'
SAVE     DC    18F'0'
         END   SMFDS
//L.SYSLMOD DD DISP=SHR,DSN=TEST.PGM.LOAD(C4SMFDS)
