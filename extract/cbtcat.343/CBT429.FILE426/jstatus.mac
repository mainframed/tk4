STAT  TITLE 'DISPLAY STATUS OF JES2 JOBS, LOGONS, AND STARTED TASKS'
***********************************************************************
*                                                                     *
*                                                                     *
*                               STATUS                                *
*                                                                     *
*                                                                     *
* ABSTRACT: DISPLAY STATUS OF JES2 JOBS, LOGONS, & STARTED TASKS.     *
*                                                                     *
*                                                                     *
* FUNCTION: STATUS IS A COMMAND PROCESSOR.                            *
*                                                                     *
*           STATUS BUILDS A PARAMETER LIST TO BE PASSED TO            *
*           STATJES2, EXECUTES STATJES2 UNDER A JES2 ADDRESS SPACE  × *
*           VIA SVC 208, AND OUTPUTS THE INFORMATION RETURNED BY      *
*           STATJES2.                                                 *
*                                                                     *
*           THE FIRST OPERAND ON THE COMMAND EXECUTION IS A LIST OF × *
*           JOBNAMES TO BE SELECTED FROM THE JES2 JOB QUEUE.  THE   × *
*           SECOND OPERAND IS THE NAME OF THE JES2 SUBSYSTEM TO BE  × *
*           QUERIED. IF OMITTED, THE SECOND PARAMETER DEFAULTS TO   × *
*           'JES2'.                                                 × *
*                                                                     *
*           IF THE FIRST OPERAND WAS NOT SPECIFIED ON THE COMMAND   × *
*           INVOCATION OF STATUS, THE USER'S ID IS PASSED TO        × *
*           STATJES2. OTHERWISE, STATUS PASSES THE LIST OF JOB      × *
*           NAMES SPECIFIED BY THE USER TO STATJES2.                  *
*                                                                     *
*           ALONG WITH A JOB NAME LIST, STATUS PASSES STATJES2 A    × *
*           WORK AREA OF 2048 BYTES AND A RETURN AREA OF 60K.       × *
*           STATUS GETS STATJES2 EXECUTED UNDER A JES2 ADDRESS      × *
*           SPACE VIA THE HELP OF SVC 208.                            *
*                                                                     *
*           BEFORE CALLING STATJES2 VIA SVC 208, STATUS DEFERS ATTEN- *
*           TION INTERRUPTIONS AND SINGLE STREAMS EXECUTION OF        *
*           STATJES2 VIA AN EXCLUSIVE ENQ.                            *
*                                                                     *
*           DEPENDING UPON THE RETURN CODE FROM SVC 208 AND STATJES2, *
*           STATUS EITHER ABENDS (STATUS ERRORS), DISPLAYS A MESSAGE  *
*           SAYING JES2 IS NOT UP, DISPLAYS A MESSAGE SAYING NO JOBS  *
*           WERE FOUND, OR DISPLAYS THE JOBS RETURNED BY STATJES2.    *
*                                                                     *
*           THE JES2 JOB QUEUE ELEMENTS (JQES) RETURNED BY STATJES2   *
*           ARE USED TO DISPLAY INFORMATION ON JOBS ON INPUT, WAIT-   *
*           ING FOR EXECUTION, OR EXECUTING.                          *
*                                                                     *
*           THE JES2 JOB OUTPUT ELEMENTS (JOES) ARE USED TO DISPLAY   *
*           JOBS WAITING FOR OR ON OUTPUT.                            *
*                                                                     *
*           MOST OF THE CODE INVOLVED IN THE OUTPUTTING OF THE INFOR- *
*           MATION FROM THE JQES AND JOES IS COPIED FROM JES2'S CMD   *
*           HANDLING ROUTINE - HASPCOMM.                              *
*                                                                     *
* RELEASE                                                           × *
*    INFO:  THIS COMMAND ONLY SUPPORTS MVS/SP JES2 1.3.3            × *
*           OR 1.3.4. IT HAS JUST BEEN TOO DIFICULT AND TIME        × *
*           CONSUMING TO MAINTAIN DOWNWARD COMPATIBILITY.           × *
*           YOU GOVERMENT WORKERS ARE JUST OUT OF LUCK, I GUESS.    × *
*           TIME PERMITTING, UPDATES FOR SUBSEQUENT RELEASES        × *
*           OF MVS/SP JES2 WILL BE ATTEMPTED. HOWEVER, THERE        × *
*           ARE NO GUARANTEES. LET THE BUYER BEWARE (I HATE LATIN). × *
*                                                                   × *
*           IF YOU HAVE ANY SUGGESTIONS (OR FREE CODE) PLEASE       × *
*           CONTACT ME. THIS COMMAND IS "PUBLIC DOMAIN" BUT I       × *
*           WOULD LIKE TO INTEGRATE ANY IMPROVEMENT YOU HAVE MADE.  × *
*                                                                   × *
*           CONTACT:                                                × *
*                                                                   × *
*           HOWARD M. DEAN                                          × *
*           SYNTEX U.S.A                                            × *
*           MAIL STOP A5-CIS-5                                      × *
*           3401 HILLVIEW AVENUE                                    × *
*           PALO ALTO, CA, CA 90403                                 × *
*           (415) - 852-1792                                        × *
*                                                                   × *
*           CHANGES TO THIS DOCUMENTATION ARE INDICATED             × *
*           VIA A VERTICAL BAR TO THE RIGHT OF THE                  × *
*           COMMENTS.                                               × *
*                                                                   × *
* LAST MODIFIED ON 03/29/85 - HOWARD M. DEAN                        × *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                                                                     *
* INPUT: R1 -> COMMAND PROCESSOR PARAMETER LIST (CPPL)                *
*                                                                     *
*                                                                     *
* EXTERNAL REFERENCE: STATJES2                                        *
*                                                                     *
*                                                                     *
* MACROS USED: SAVE                                                   *
*              ABEND                                                  *
*              RETURN                                                 *
*              GETMAIN                                                *
*              CALL                                         *HMD 10/80*
*              LINK                                         *HMD 03/85*
*              STAX                                                   *
*              ENQ                                                    *
*              DEQ                                                    *
*              PUTLINE                                      *HMD 12/79*
*              IKJRLSA                                                *
*              FREEMAIN                                               *
*              IKJPARM                                                *
*              IKJIDENT                                               *
*              IKJENDP                                                *
*              $JQE                                                   *
*              $JOE                                                   *
*              IKJCPPL                                                *
*              IKJECT                                                 *
*              IKJPSCB                                                *
*              CVT                                                    *
*                                                                     *
* ATTRIBUTES: REENTRANT,RESIDENT                                      *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
STATUS   CSECT                DISPLAY STATUS OF JES2 JOBS
         SAVE  (14,12),,STATUS_COPYRIGHT_(C)_1985_HOWARD_M_DEAN
         LR    RBASE,R15      A(STATUS)
         USING STATUS,RBASE   ADDRESSABILITY
         B     IDEND          BRANCH AROUND ID              *HMD 01/83*
*                                                           *HMD 01/83*
ID       DC    CL32' ASSEMBLED ON &SYSDATE AT &SYSTIME'     *HMD 01/83*
         DC    CL32' VER 1 REL 5 MOD 0'                     *HMD 01/83*
*                                                           *HMD 01/83*
IDEND    DS   0H              POINT TO BRANCH AROUND        *HMD 01/83*
         LR    RCPPL,R1       A(CPPL)
         USING CPPL,RCPPL     ADDRESSABILITY
         BAL   RLINK,STINIT   STATUS INITIALIZATION
         BAL   RLINK,JOBUILD  BUILD THE JOB NAME PARAMETER LIST
         BAL   RLINK,CALLJES2 CALL STATJES2 THRU SVC 208
         BAL   RLINK,CHKRCODE TRANSFER CNTL BASED ON RET CODES
         B     OUTINFO        OUTPUT THE INFO ON RETURNED JOBS
         B     NOJOBS         NO JOBS FOUND
         B     NOJES2         SELECTED JES2 NOT UP
         ABEND 12             STATJES2 ABENDED
NOJES2   BAL   RLINK,OUTNOJES OUTPUT SELECTED JES2 NOT UP
         LA    R6,12          RETURN CODE                   *HMD 01/83*
         B     DONE           RETURN
NOJOBS   BAL   RLINK,OUTNOJOB OUTPUT NO JOBS FOUND
         LA    R6,8           RETURN CODE                   *HMD 01/83*
         B     DONE           RETURN
OUTINFO  BAL   RLINK,OUTJQES  OUTPUT JOBS ON INPUT, AWAITING
*                             EXECUTION, OR EXECUTING
         BAL   RLINK,OUTJOES  OUTPUT JOBS AWAITING OR ON OUTPUT
         BAL   RLINK,OUTFILL  OUTPUT FILLED RETURN AREA MSG IF NEEDED
         BAL   RLINK,SETRC    SET RETURN CODE HERE          *HMD 01/83*
DONE     BAL   RLINK,STDONE   CLOSE UP SHOP
         LR    R15,R6         FETCH RETURN CODE             *HMD 01/83*
         RETURN (14,12),RC=(15)                             *HMD 01/83*
*                             RETURN TO CALLER              *HMD 01/83*
         EJECT
STINIT   LA    R0,LWRKAREA    LENGTH OF OUR WORK SPACE
         GETMAIN R,LV=(0)     GET THE WORK AREA
         ST    R1,8(R13)      LINK SAVE AREAS
         ST    R13,4(R1)      SAVE THE CALLER'S R13
         LR    R13,R1         A(OUR WORK SPACE)
         USING WORKAREA,R13   ADDRESSABILITY
         SPACE 1                                            *HMD 04/85*
         L     R1,CPPLPSCB    POINT TO PSCB USER FIELD      *HMD 04/85*
         MVC   USERID(7),PSCBUSER-PSCB(R1)                  *HMD 04/85*
         MVI   USERID+7,C' '  BLANK OUT LAST CHARACTER      *HMD 04/85*
         SPACE 1                                            *HMD 04/85*
         MVI   STATS,KZERO    INITIALIZE THE STATUS BITS    *HMD 02/83*
         L     R14,RETLEN     LENGTH OF THE RETURN INFO AREA*HMD 01/83*
         GETMAIN R,LV=(R14)   GET SPACE FOR THE RETURN AREA *HMD 01/83*
         ST    R14,0(R1)      SAVE ITS LENGTH IN THE 1ST WORD
         ST    R1,ATACHPL+16  PASS THE RETURN INFO AREA TO ATACHSRB
         MVC   JES2,JESNAME    INIT SUBSYSTEM NAME          *HMD 01/83*
         MVC   IOPLUPT,CPPLUPT A(UPT) TO IOPL               *HMD 12/79*
         MVC   IOPLECT,CPPLECT A(ECT) TO IOPL               *HMD 12/79*
         LA    RWORK,ANECB1    A(ECB) TO IOPL               *HMD 12/79*
         ST    RWORK,IOPLECB   SAVE IN IOPL                 *HMD 12/79*
         MVC   MLISTH,=C'SYN005I '  MOVE IN SYNTEX ERROR ID *HMD 04/85*
         LA    RWORK,MLISTA   GET OUTPUT LINE ADDR          *HMD 12/79*
         ST    RWORK,OLDIE+4  SAVE IN O.L.D                 *HMD 12/79*
         LA    RWORK,83       GET OUTPUT LINE LENGTH        *HMD 12/79*
         SLL   RWORK,16       MOVE TO HIGH ORDER            *HMD 12/79*
         ST    RWORK,MLISTA   SAVE IN OUTPUT DESCRIPTOR     *HMD 12/79*
         ST    RWORK,MLISTB   SAVE IN OUTPUT DESCRIPTOR     *HMD 12/79*
         LA    RWORK,1        ONLY ONE SEGMENT              *HMD 12/79*
         ST    RWORK,OLDIE    SAVE IN O.L.D                 *HMD 12/79*
         L     RECT,CPPLECT   A(ECT)
         USING ECT,RECT       ADDRESSABILITY
         BR    RLINK          RETURN TO OUR CALLER
         EJECT
JOBUILD  TM    ECTSWS,ECTNOPD OPERANDS PRESENT?
         BZ    PARSE          YES => PARSE THEM
         SPACE 1
JOBUSER  L     R1,CPPLPSCB    A(PSCB)                       *HMD 01/83*
         USING PSCB,R1        ADDRESSABILITY
         MVC   ONEJOBNM(7),PSCBUSER PUT IN THE USER'S ID
         MVI   ONEJOBNM+7,C' ' BLANK OUT THE LAST CHAR
         SR    R15,R15        FOR THE INSERT CHARACTER
         IC    R15,PSCBUSRL   AL1(LENGTH OF THE USER'S ID)
         DROP  R1             PSCB NO LONGER NEEDED
         STH   R15,ONEJBNML   SET THE USER'S ID LENGTH
         LA    R1,14          LENGTH OF THE ENTIRE PARM     *HMD 03/85*
         ST    R1,ONEJOBLN    ENTIRE PARM COMPLETE
         LA    R1,ONEJOBLN    PASS THE 1 JOB NAME PARM
         ST    R1,ATACHPL+8   TO STATJES2
         BR    RLINK          RETURN TO OUR CALLER
PARSE    MVC   PPLCBUF,CPPLCBUF PASS IKJPARS THE CBUF,
         MVC   PPLUPT,CPPLUPT UPT,
         MVC   PPLECT,CPPLECT AND ECT
         MVI   ANECB,KZERO    ZERO OUR ECB                  *HMD 02/83*
         LA    R1,ANECB       A(OUR ECB)
         ST    R1,PPLECB      PASS IT TO IKJPARS
         L     R1,STPCLAD     V(OUR PCL)
         ST    R1,PPLPCL      PASS IT TO IKJPARS
         LA    R1,PPLRANS     A(WORD TO RECEIVE PDL ADDR)
         ST    R1,PPLANS      PASS IT AS WELL
         LA    R1,PPL         A(IKJPAR'S PARAMETER LIST)
         CALLTSSR EP=IKJPARS  CALL TSO PARSE ROUTINE        *HMD 12/80*
         LTR   R15,R15        PARSED OK?
         BZ    GETJES         YES => CHECK FOR JES2 NAME    *HMD 01/83*
         ABEND 4              LET OUR CALLER KNOW WE SCREWED UP
         EJECT
GETJES   DS    0H             CHECK THE SECOND PARM         *HMD 01/83*
         L     R1,PPLRANS     A(PDL)                        *HMD 01/83*
         USING IKJPARMD,R1    ADDRESSIBILITY                *HMD 01/83*
         LA    R1,SUBSYS      ADDRESS OF THE ADDRESS        *HMD 01/83*
         DROP  R1             TEMPORARY                     *HMD 01/83*
         TM    6(R1),X'80'    PARM PRESENT?                 *HMD 01/83*
         BZ    GETJOBS        NO - GET USERID               *HMD 01/83*
         MVI   JES2,C' '      CLEAR THE FIELD               *HMD 01/83*
         MVC   JES2+1(L'JES2-1),JES2                        *HMD 01/83*
         LH    R15,4(R1)      LENGTH OF PARM                *HMD 01/83*
         LA    R14,JES2       TARGET FIELD                  *HMD 01/83*
         L     R1,0(,R1)      A(SUBSYS NAME)                *HMD 01/83*
         BCTR  R15,0          MINUS ONE FOR EXECUTE         *HMD 01/83*
         EX    R15,MOVEJES    MOVE THE NAME                 *HMD 01/83*
         SPACE 2                                            *HMD 01/83*
GETJOBS  L     R1,PPLRANS     A(PDL)
         USING IKJPARMD,R1    ADDRESSABILITY
         LA    R1,JOBNAME     A(1ST JOB NAME)
         DROP  R1             TEMPORARY
         TM    6(R1),X'80'    PARM PRESENT?                 *HMD 01/83*
         BZ    JOBUSER        NO - GET USERID               *HMD 01/83*
         LA    R14,1          AT LEAST 1 JOB NAME IS THERE
JOBLOOK  CLI   8(R1),X'FF'    END OF OPERAND JOB LIST?
         BE    GETSPACE       YES => GET SPACE FOR THE PARM LIST
         LA    R14,1(R14)     ONE MORE JOB SPECIFIED
         L     R1,8(R1)       A(NEXT JOB PDE)
         B     JOBLOOK        CHECK THIS JOB
GETSPACE MH    R14,TEN        10 BYTES FOR EACH JOBNAME
         LA    R14,4(R14)     ACCOUNT FOR THE DESCRIPTOR WORD
         GETMAIN R,LV=(R14)   GET THE SPACE
         ST    R1,ATACHPL+8   PASS IT TO STATJES2
         ST    R14,0(R1)      SAVE THE FIELD'S LENGTH IN THE 1ST WORD
         LA    R14,4(R1)      A(SPOT FOR THE 1ST JOBNAME)
         L     RWORK,PPLRANS  A(PDL)
         USING IKJPARMD,RWORK ADDRESSABILITY
         LA    RWORK,JOBNAME  A(1ST JOBNAME PDE)
         DROP  RWORK          TEMPORARY
JOBCHK   L     R15,0(RWORK)   A(JOBNAME)
         LH    R1,4(RWORK)    H'JOBNAME LENGTH'
         STH   R1,0(R14)      PASS THE JOB NAME LENGTH
         BCTR  R1,R0          FOR THE MOVE
         EX    R1,MOVEJOB     PUT THE JOB NAME IN THE PARM LIST
         CLI   8(RWORK),X'FF' END OF JOB NAME OPERANDS?
         BER   RLINK          YES => RETURN TO OUR CALLER
         LA    R14,10(R14)    A(NEXT SPOT FOR A JOB NAME)
         L     RWORK,8(RWORK) A(NEXT JOB NAME PDE)
         B     JOBCHK         PUT THIS JOB NAME IN THE LIST
         SPACE 5
MOVEJOB  MVC   2(0,R14),0(R15) TO BE EXECUTED
MOVEJES  MVC   0(0,R14),0(R1)  MOVE JES2 NAME TO AREA       *HMD 01/83*
TEN      DC    H'10'          NUMBER OF BYTES/JOBNAME IN PARM
STPCLAD  DC    V(STPCL)       PARSING SPECIFICATIONS
JESNAME  DC    CL8'JES2'      DEFAULT JES SUBSYSTEM NAME    *HMD 01/83*
         EJECT
CALLJES2 LA    R15,JES2       A(CL8'JES2')
         L     R0,STATJSAD    V(STATJES2)
         STM   R15,R0,ATACHPL SOME OF ATACHSRB'S PARMS
         LA    R0,WORKLEN     A(H'WORK AREA LENGTH')
         ST    R0,ATACHPL+12  COMPLETE THE ATACHSRB PARM LIST
         STAX  DEFER=YES      DEFER ATTENTION INTERRUPTS
         MVC   ENQLIST(ENQSETL),ENQSETUP SET UP THE ENQ PARM LIST
         ENQ   MF=(E,ENQLIST) ONE USER AT A TIME THRU HERE
         LA    R1,ATACHPL     A(ATACHSRB'S PARAMETER LIST)
         SVC   208            INVOKE THE CROSS MEMORY INTERFACE
         STM   R15,R0,ATACHPL SAVE ATACHSRB'S RETURN CODES
         MVC   DEQLIST(DEQSETL),DEQSETUP SET UP THE DEQ PARM LIST
         DEQ   MF=(E,DEQLIST) DROP THE SINGLE STREAM OF USERS
         STAX  DEFER=NO       ALLOW ATTENTION INTERRUPTS
         BR    RLINK          RETURN TO OUR CALLER
         SPACE 5
STATJSAD DC    V(STATJES2)    GETS JOB STATUS FROM JES2
WORKLEN  DC    H'2048'        LENGTH OF STATJES2 WORK AREA  *HMD 04/85*
ENQSETUP ENQ   (HACSTATS,ONEATIME,E,,SYSTEM),MF=L ENQ SKELETON
ENQSETL  EQU   *-ENQSETUP      LENGTH OF THE ENQ PARM LIST
DEQSETUP DEQ   (HACSTATS,ONEATIME,,SYSTEM),MF=L DEQ SKELETON
DEQSETL  EQU   *-DEQSETUP     LENGTH OF THE DEQ PARM LIST
HACSTATS DC    C'HACSTATS'    ENQ MAJOR NAME
ONEATIME DC    C'ONEATATIME'  ENQ MINOR NAME
         EJECT
CHKRCODE L     RET,ATACHPL+16 A(RETURN AREA)
         L     R15,ATACHPL    SVC 208'S RETURN CODE
         B     CHKRCS(R15)    TRANSFER CNTL BASED ON THE RETURN CODE
CHKRCS   B     CHKCOUNT       SEE IF ANY JQES OR JOES WERE RET
         B     8(RLINK)       JES2 ADDRESS SPACE NOT FOUND
         B     JES2RC         STATJES2 RETURNED A RC > 0
         B     ABEND8         SVC 208 DIDN'T LIKE THE CODE PASSED
         B     12(RLINK)      STATJES2 ABENDED
ABEND8   ABEND 8              WE'VE SCREWED UP SOMEHOW
JES2RC   L     R0,ATACHPL+4   STATJES2'S RETURN CODE
         CH    R0,FOUR        STATJES2 UNABLE TO FIND JES2'S HCT?
         BE    8(RLINK)       YES => TELL OUR CALLER
         OI    STATS,FILLEDRT NO => THE RETURN AREA IS FULL
CHKCOUNT L     R1,4(RET)      H'# OF JQES',H'# OF JOES'
         LTR   R1,R1          ANYTHING RETURNED?
         BNZR  RLINK          YES => TELL OUR CALLER
         B     4(RLINK)       NO => TELL OUR CALLER
         SPACE 5
FOUR     DC    H'4'           RC FROM CALLRSB => JES2 NOT UP
         EJECT
OUTNOJES ST    RLINK,SAVLINK  SAVE LINK REGISTER            *HMD 12/79*
         LA    R1,JESNOTMS    A(C'JES2 NOT UP')             *HMD 12/79*
         LA    R0,L'JESNOTMS  LENGTH OF THE MESSAGE
         BAL   RLINK,PUTLINEI TELL OUR CALLER               *HMD 12/79*
         L     RLINK,SAVLINK  RESTORE LINK REGISTER         *HMD 12/79*
         BR    RLINK          RETURN TO OUR CALLER
         SPACE 5
JESNOTMS DC    C'MVS/SP JES2 IS NOT UP'                     *HMD 01/83*
         EJECT
OUTNOJOB ST    RLINK,SAVLINK  SAVE LINK REGISTER            *HMD 12/79*
         LA    R1,NOJOBMSG    A(C'NO JOBS FOUND')           *HMD 12/79*
         LA    R0,L'NOJOBMSG LENGTH OF THE MESSAGE
         BAL   RLINK,PUTLINEI TELL OUR CALLER               *HMD 12/79*
         L     RLINK,SAVLINK  RESTORE LINK REGISTER         *HMD 12/79*
         BR    RLINK          RETURN TO OUR CALLER
         SPACE 5
NOJOBMSG DC    C'NO JOB(S) FOUND'
         EJECT
OUTJQES  DS    0H                                           *HMD 01/83*
         ST    RLINK,JQESHOLD SAVE THE RETURN ADDRESS
         LH    R#JQES,4(RET)  H'# OF RETURNED JQES'
         LA    RJQE,8(RET)    A(1ST RETURNED JQE)
         USING JQE,RJQE       ADDRESSABILITY
CHECKJQE CLI   JQETYPE,$OUTPUT    JOB AWAITING OUTPUT?      *HMD 01/82*
         BE    AWOUTPUT       YES - PROCESS WAIT QUEUE      *HMD 01/82*
         CLI   JQETYPE,$INPUT JOB POSSIBLE ACTIVE ON INPUT? *HMD 01/82*
         BE    CHECKDEV       YES, GO PROCESS DEVICE        *HMD 04/82*
         CLI   JQETYPE,$XMIT  TRANSMIT QUEUE?               *HMD 01/83*
         BNE   CHKRECV        NO, CHECK RECEIVER QUEUE      *HMD 01/83*
         TM    JQEFLAGS,QUEBUSY   THIS JQE BUSY?            *HMD 02/83*
         BNZ   CHECKDEV       YES, MUST BE ON XMITTER       *HMD 02/83*
         BAL   RLINK,INITMSG  INITIALIZE MESSAGE            *HMD 01/83*
         BAL   RLINK,SETWXMT  INDICATE AWAITING XMITTER     *HMD 01/83*
         BAL   RLINK,OUTMSG   PUT OUT THE MESSAGE           *HMD 01/83*
         B     NEXTJQE        GET THE NEXT JOB QUEUE ELEM.  *HMD 01/83*
CHKRECV  DS    0H             CHECK FOR SYSOUT RECEIVER     *HMD 02/83*
         CLI   JQETYPE,$RECEIVE    ON RECEIVE QUEUE         *HMD 02/83*
         BNE   CHKREND                                      *HMD 02/83*
         TM    JQEFLAGS,QUEBUSY   THIS JQE BUSY?            *HMD 02/83*
         BNZ   CHECKDEV       YES, MUST BE ON RECEIVER      *HMD 02/83*
         BAL   RLINK,INITMSG       INITIALIZE THE MESSAGE   *HMD 02/83*
         MVC   MSGSTYPE(L'AWAITRCV),AWAITRCV                *HMD 02/83*
*                                  AWAITING SYSOUT RECEIVER *HMD 02/83*
         BAL   RLINK,OUTMSG        PUT OUT THE MESSAGE      *HMD 02/83*
         B     NEXTJQE             GET THE NEXT QUEUE ELEM. *HMD 02/83*
CHKREND  DS    0H                                           *HMD 02/83*
         B     CHKDMPR             NO => SEE IF ON DUMPQ    *HMD 01/83*
CHECKDEV BAL   RLINK,INITMSG  INITIALIZE THE OUTPUT MESSAGE *HMD 04/82*
         LA    RDEVID,JQEDEVID A(INPUT DEVICE DESCRIPTOR)
         BAL   RLINK,SETDEVIC SET UP THE INPUT DEVICE
         B     MSGNEXT        OUTPUT THE MSG & DO THE NEXT JQE
CHKDMPR  CLI   JQETYPE,$DUMPQ JOB ON THE DUMPER QUEUE       *HMD 01/83*
         BNE   CHKEXEC        NO, CHECK EXECUTION QUEUE     *HMD 01/83*
         TM    JQEFLAGS,QUEBUSY   THIS JQE BUSY?            *HMD 02/83*
         BNZ   CHECKDEV       YES, MUST BE ON DUMPER/LOADER *HMD 02/83*
         BAL   RLINK,INITMSG  INITIALIZE THE OUTPUT MESSAGE *HMD 01/83*
         MVC   MSGSTYPE(L'AWAITDMP),AWAITDMP                *HMD 01/83*
         BAL   RLINK,OUTMSG   PUT OUT MESSAGE               *HMD 01/83*
         B     NEXTJQE        CONTINUE WITH NEXT JQE        *HMD 01/83*
CHKEXEC  TM    JQETYPE,$XEQ   JOB ON AN EXECUTION Q?        *HMD 01/83*
         BO    ITISEXEC       YES => OUTPUT THE INFO        *HMD 01/83*
         BAL   RLINK,JQEHOLDS PROCESS ANY HELD DATA SETS
         B     NEXTJQE        GET ANOTHER JQE
ITISEXEC BAL   RLINK,INITMSG  INITIALIZE THE OUTPUT MESSAGE
         CLI   JQETYPE,$XEQ   JOB ON THE CONVERSION Q?
         BE    WAITEXEC       YES => IT'S AWAITING EXECUTION
         TM    JQEFLAGS,QUEBUSY JOB EXECUTING?
         BZ    WAITEXEC       NO => AWAITING EXECUTION
         BAL   RLINK,SETEXEC  SET UP THE EXECUTING MESSAGE
         B     MSGNEXT        OUTPUT THE MSG & DO THE NEXT JQE
WAITEXEC BAL   RLINK,SETWXEQ  SET UP THE AWAITING EXEC MSG
MSGNEXT  BAL   RLINK,OUTMSG   OUTPUT THE MESSAGE
NEXTJQE  LA    RJQE,JQELNGTH(RJQE) A(NEXT JQE)
         BCT   R#JQES,CHECKJQE CHECKED ALL RETURNED JQES?
         L     RLINK,JQESHOLD YES => RETURN
         BR    RLINK          TO OUR CALLER
AWAITJOT DC    C'AWAITING OUTPUT PROCESSOR'                 *HMD 01/82*
AWAITDMP DC    C'AWAITING SPOOL DUMPER'                     *HMD 01/83*
AWAITRCV DC    C'AWAITING NETWORK RECEIVER'                 *HMD 02/83*
         SPACE 2
AWOUTPUT DS    0H                AWAITING OUTPUT            *HMD 01/83*
         BAL   RLINK,INITMSG     INITIALIZE MESSAGE AREA    *HMD 01/83*
         BAL   RLINK,GETSYSID    GET SYSTEM AFFINITY        *HMD 02/83*
         MVC   MSGSTYPE(L'AWAITJOT),AWAITJOT                *HMD 01/83*
         BAL   RLINK,OUTMSG   PUT OUT MESSAGE               *HMD 01/82*
         B     NEXTJQE        CONTINUE WITH NEXT JQE        *HMD 01/82*
         SPACE 2                                            *HMD 01/83*
SETWXEQ  DS    0H                                           *HMD 02/83*
         ST    RLINK,WXEQHOLD SAVE THE RETURN ADDRESS
         BAL   RLINK,GETSYSID       GET THE SYSTEM AFFINITY *HMD 02/83*
         MVC   MSGSTYPE(L'AWAITXEQ),AWAITXEQ AWAITING EXECUTION
         MVC   MSGWXCLS,JQEJCLAS  SET THE JOB CLASS         *HMD 02/83*
         LA    R15,MSGSTYPE+L'AWAITXEQ+1 A(SPOT FOR JOB'S POSITION)
         LH    R1,JQEPOSTN    H'JOB'S POSITION'
         BAL   RLINK,FITINUM  PUT THE POS IN THE MSG
         MVC   0(L'OF,R15),OF PUT IN ' OF '
         LA    R15,L'OF(R15)  A(SPOT FOR JOB Q TOTAL)
         LH    R1,JQETOTAL    H'JOB Q'S TOTAL'
         BAL   RLINK,FITINUM  PUT THE Q TOTAL IN THE MSG
         L     RLINK,WXEQHOLD RESTORE THE RETURN ADDRESS
         BR    RLINK          RETURN TO OUR CALLER
         SPACE 2
AWAITXEQ DC    C'AWAITING EXECUTION CLASS ?,'
         EJECT
SETWXMT  ST    RLINK,WXMTHOLD    SAVE THE RETURN ADDRESS    *HMD 01/83*
         MVC   MSGSTYPE(L'AWAITXMT),AWAITXMT                *HMD 01/83*
*                                AWAITING TRANSMISSION      *HMD 01/83*
         MVC   WXMTNODE(L'JQEXEQND),JQEXEQND                *HMD 01/83*
*                                MOVE TRANSMISSION NODE     *HMD 01/83*
         LA    R15,MSGSTYPE+L'AWAITXMT                      *HMD 01/83*
*                                A(SPOT FOR NODE)           *HMD 01/83*
         LH    R1,WXMTNODE       H'NODE NUMBER'             *HMD 01/83*
         BAL   RLINK,FITINUM     FIT THE NUMBER             *HMD 01/83*
         MVI   0(R15),C','       INSERT COMMA               *HMD 01/83*
         LA    R15,2(,R15)       A(SPOT FOR POSITION)       *HMD 01/83*
         LH    R1,JQEPOSTN    H'JOB'S POSITION'             *HMD 01/83*
         BAL   RLINK,FITINUM  PUT THE POS IN THE MSG        *HMD 01/83*
         MVC   0(L'OF,R15),OF PUT IN ' OF '                 *HMD 01/83*
         LA    R15,L'OF(R15)  A(SPOT FOR JOB Q TOTAL)       *HMD 01/83*
         LH    R1,JQETOTAL    H'JOB Q'S TOTAL'              *HMD 01/83*
         BAL   RLINK,FITINUM  PUT THE Q TOTAL IN THE MSG    *HMD 01/83*
         L     RLINK,WXMTHOLD RESTORE THE RETURN ADDRESS    *HMD 01/83*
         BR    RLINK          RETURN TO OUR CALLER          *HMD 01/83*
         SPACE 5                                            *HMD 01/83*
AWAITXMT DC    C'AWAITING TRANSMITTER N'                    *HMD 01/83*
         EJECT                                              *HMD 01/83*
OUTJOES  DS    0H                                           *HMD 01/83*
         LH    R#JOES,6(RET)  H'# OF RETURNED JOES'
         LTR   R#JOES,R#JOES  ANY JOES RETURNED?
         BZR   RLINK          NO => NOTHING TO DO
         ST    RLINK,JOESHOLD SAVE THE RETURN ADDRESS
         LH    R1,4(RET)      H'# OF RETURNED JQES'
         MH    R1,JQELEN      LENGTH OF THE RETURNED JQES
         LA    RJOE,8(RET,R1) A(1ST RETURNED JOE)
         USING JOEDSECT,RJOE  ADDRESSABILITY
CHECKJOE SLR   RJQE,RJQE      CLEAR FOR INSERT CHAR         *HMD 01/83*
         ICM   RJQE,B'0111',JOEJQEB                         *HMD 01/83*
*                             GET OFFSET TO ASSOC JQE       *HMD 01/83*
         ALR   RJQE,RET       A(ASSOCIATED JQE)
         BAL   RLINK,INITMSG  INITIALIZE THE OUTPUT MSG
         TM    JOEFLAG,$JOEBUSY ACTIVE OUTPUT?
         BZ    WAITOUT        NO => AWAITING OUTPUT
**                                                          *HMD 02/83*
** ELEMENT IS ON A DEVICE                                   *HMD 02/83*
**                                                          *HMD 02/83*
ONDEVICE DS    0H             OUTPUT IS ACTIVE ON DEVICE    *HMD 02/83*
         LA    RDEVID,JOEDEVID    A(OUTPUT DEVICE DESCRIPTOR)
         BAL   RLINK,SETDEVIC SET THE OUTPUT DEVICE
         B     MSGNXTJO       OUTPUT THE MSG & DO THE NEXT JOE
WAITOUT  TM    JOEFLAG2,$JOEDUMP   Q. AWAITING DUMPER?      *HMD 01/83*
         BZ    WAITXMTR            A. NO - PROCESS JOE      *HMD 01/83*
         MVC   MSGSTYPE(L'AWAITDMP),AWAITDMP                *HMD 01/83*
*                                  MOVE DUMPER MESSAGE      *HMD 01/83*
         B     MSGNXTJO            OUTPUT AND DO NEXT JOE   *HMD 01/83*
         SPACE 1                                            *HMD 04/85*
WAITXMTR DS    0H                                           *HMD 04/85*
         SLR   R1,R1               CLEAR REGISTER           *HMD 04/85*
         ICM   R1,B'0111',JOENETCB ON XMITTER QUEUE?        *HMD 04/85*
         BZ    WAITOUT1            NO, CONTINUE PROCESSING  *HMD 04/85*
         MVC   MSGSTYPE(L'AWAITXMT),AWAITXMT                *HMD 04/85*
*                                  SYSOUT TRANSMISSION      *HMD 04/85*
         MVC   WXMTNODE(L'JOEPDBND),JOEPDBND                *HMD 04/85*
*                                  MOVE DESTINATION NODE    *HMD 04/85*
         LA    R15,MSGSTYPE+L'AWAITXMT                      *HMD 04/85*
*                                A(SPOT FOR NODE)           *HMD 04/85*
         LH    R1,WXMTNODE       H'NODE NUMBER'             *HMD 04/85*
         BAL   RLINK,FITINUM     FIT THE NUMBER             *HMD 04/85*
         MVI   0(R15),C','       INSERT COMMA               *HMD 04/85*
         LA    R15,2(,R15)       A(SPOT FOR POSITION)       *HMD 04/85*
         B     SETJOPOS          GET JOE'S POSITION         *HMD 04/85*
         SPACE 1                                            *HMD 04/85*
WAITOUT1 MVC   MSGSTYPE(L'AWAITOUT),AWAITOUT                *HMD 01/83*
*                                  AWAITING OUTPUT          *HMD 01/83*
         MVC   MSGWOUTC,JOECURCL OUTPUT CLASS
         SR    R15,R15        GET JOE ROUTE CODE            *HMD 04/80*
         CLC   JOERNODE(2),=H'0'                            *HMD 01/83*
*                             TEST FOR NODE NUMBER          *HMD 01/83*
         BE    TESTLOC        NO, TEST FOR LOCAL PRINTER    *HMD 01/83*
         ICM   R15,B'0011',JOEREMOT    GET LOCAL REMOTE #   *HMD 01/83*
         BZ    LOCALRTE       ZERO MEANS LOCAL              *HMD 01/83*
         STH   R15,SAVEAREA   SAVE ROUTE CODE               *HMD 01/83*
         B     MOVEMSG        NOW MOVE MESSAGE              *HMD 01/83*
TESTLOC  DS    0H             TEST FOR PRINTER ID           *HMD 08/80*
         ICM   R15,B'0011',JOEREMOT                         *HMD 01/83*
*                             GET LOCAL PRINTER ID          *HMD 01/83*
         BZ    LOCALRTE                                     *HMD 01/83*
         B     SPECLOC        SPECIAL LOCAL ROUTING         *HMD 01/83*
MOVEMSG  DS    0H             REMOTE JOE PROCESSING         *HMD 08/80*
         MVC   MSGOUTLC(L'RMT),RMT OUTPUT GOING TO A REMOTE
         LA    R15,MSGOUTLC+L'RMT A(WHERE RMT # GOES)
         SR    R1,R1          FOR THE INSERT CHARACTER
         LH    R1,SAVEAREA    REMOTE NUMBER                 *HMD 01/83*
         BAL   RLINK,FITINUM  PUT THE REMOTE # IN THE MSG
         MVI   0(R15),C','    PUT IN A COMMA
         LA    R15,2(R15)     A(SPOT FOR THE OUTPUT'S POSITION)
         B     SETJOPOS       SET THE OUTPUT'S POSITION
SPECLOC  DS    0H             SPECIAL LOCAL ROUTING         *HMD 04/80*
         STH   R15,SAVEAREA   SAVE ROUTE CODE               *HMD 04/80*
         MVC   MSGOUTLC(L'PRT),PRT OUTPUT GOING TO SPECIAL  *HMD 04/80*
         LA    R15,MSGOUTLC+L'PRT  A(WHERE PRT # GOES)      *HMD 04/80*
         SR    R1,R1          FOR THE INSERT CHARACTER      *HMD 04/80*
         LH    R1,SAVEAREA    GET THE LOCAL PRINTER NO.     *HMD 01/83*
         BAL   RLINK,FITINUM  PUT THE LOCAL PRT # IN MSG    *HMD 04/80*
         MVI   0(R15),C','    PUT COMMA IN MESSAGE          *HMD 04/80*
         LA    R15,2(R15)     A(SPOT FOR OUTPUT'S POSITION) *HMD 04/80*
         B     SETJOPOS       SET THE OUTPUT'S POSITION     *HMD 04/80*
LOCALRTE MVC   MSGOUTLC(L'LOCAL),LOCAL PUT IN THE LOCAL
         LA    R15,MSGOUTLC+L'LOCAL+1 A(SPOT FOR THE OUTPUT'S POSITON)
SETJOPOS LH    R1,JOEPOSTN    H'OUTPUT'S POSITION'
         BAL   RLINK,FITINUM  PUT IT IN THE MSG
         MVC   0(L'OF,R15),OF PUT IN ' OF '
         LA    R15,L'OF(R15)  A(SPOT FOR THE OUTPUT Q TOTAL)
         LH    R1,JOETOTAL    H'OUTPUT Q TOTAL'
         BAL   RLINK,FITINUM  PUT IT IN THE MSG
         SPACE 1                                            *HMD 04/85*
SETMAIL  CLC   USERID(L'JOEWTRID),JOEWRECN                  *HMD 04/85*
         BNE   MSGNXTJO       DO WE HAVE SOME TSO/E MAIL?   *HMD 04/85*
         MVC   MSGSYSID,=C'MAIL'    YES, INDICATE SO        *HMD 04/85*
         SPACE 1                                            *HMD 04/85*
MSGNXTJO BAL   RLINK,OUTMSG   OUTPUT THE MESSAGE
         LA    RJOE,JOESIZE(RJOE) A(NEXT JOE)
         BCT   R#JOES,CHECKJOE OUTPUT ALL RETURNED JOES?    *HMD 04/85*
         L     RLINK,JOESHOLD YES => RETURN
         BR    RLINK          TO OUR CALLER
         SPACE 5
JQELEN   DC    AL2(JQELNGTH)  LENGTH OF A JQE
OF       DC    C' OF '
AWAITOUT DC    C'AWAITING OUTPUT CLASS ?,'
RMT      DC    C'RMT'
PRT      DC    C'PRT'                                       *HMD 04/80*
LOCAL    DC    C'LOCAL,'
         EJECT
OUTFILL  ST    RLINK,SAVLINK  SAVE RETURN REGISTER          *HMD 12/79*
         NI    SWITCHES,FF-NOSTOR                           *HMD 01/83*
*                             CLEAR STORAGE SWITCH          *HMD 01/83*
         TM    STATS,FILLEDRT RETURN AREA FULL?             *HMD 12/79*
         BZR   RLINK          NO => NO NEED FOR THIS MSG
         OI    SWITCHES,NOSTOR INDICATE NO STORAGE LEFT     *HMD 01/83*
         LA    R1,FILLDMSG    A(C'INSUFFICIENT SP TO COMPLETE ST REQ')
         LA    R0,L'FILLDMSG  LENGTH OF THE MESSAGE
         BAL   RLINK,PUTLINEI TELL OUR CALLER               *HMD 12/79*
         L     RLINK,SAVLINK  RESTORE LINK REGISTER         *HMD 12/79*
         BR    RLINK          RETURN TO OUR CALLER
         SPACE 5
FILLDMSG DC    C'INSUFFICIENT STORAGE TO COMPLETE YOUR REQUEST'
         EJECT
SETRC    DS    0H                                           *HMD 01/83*
         SLR   R6,R6          CLEAR WORK REGISTER           *HMD 01/83*
         TM    SWITCHES,NOSTOR      SHORT ON STORAGE?       *HMD 01/83*
         BZR   RLINK          NO - CONTINUE                 *HMD 01/83*
         LA    R6,4           SET RETURN CODE               *HMD 01/83*
         BR    RLINK          RETURN TO CALLER              *HMD 01/83*
         EJECT                                              *HMD 01/83*
STDONE   TM    ECTSWS,ECTNOPD OPERANDS ON THE COMMAND?
         BO    FREEWORK       NO => JUST FREE OUR WORK AREA
         IKJRLSA PPLRANS      FREE THE PDL
         L     R1,ATACHPL+8   A(JOB NAME LIST)
         L     R0,0(R1)       LENGTH OF THE JOB NAME LIST
         FREEMAIN R,LV=(0),A=(1) FREE THE JOB NAME LIST
FREEWORK L     R0,RETLEN      LENGTH OF THE RETURN INFO AREA*HMD 01/83*
         FREEMAIN R,LV=(0),A=(RET) FREE THE RETURN INFO AREA
         LR    R1,R13         A(OUR WORK AREA)
         L     R13,4(R13)     RESTORE THE CALLER'S R13
         LA    R0,LWRKAREA    LENGTH OF OUR WORK AREA
         FREEMAIN R,LV=(0),A=(1) FREE OUR WORK AREA
         BR    RLINK          RETURN TO OUR CALLER
         SPACE 5
RETLEN   DC    A(15*4096)     LENGTH OF THE RETURN AREA     *HMD 01/83*
         EJECT
INITMSG  MVI   MESSAGE,C' '   BLANK OUT THE
         MVC   MESSAGE+1(LMESSAGE-1),MESSAGE MESSAGE BUFFER
         MVI   JES2TYPE,C'J'  INITIALIZE JOB MESSAGE        *HMD 10/80*
         MVC   MSGJBHDG(3),JOB  INSERT HEADING              *HMD 10/80*
         MVC   MSGJNME,JQEJNAME PUT IN THE JOB NAME
         LA    R1,MSGJNME+8  LOAD ADDRESS OF END OF JOBNAME *HMD 10/80*
         LA    RWORK,9       COUNT REGISTER                 *HMD 10/80*
INITMLP  CLI   0(R1),C' '    SPACE?                         *HMD 10/80*
         BNE   INITMLO       OUT OF LOOP                    *HMD 10/80*
         BCTR  R1,0          DECREMENT REGISTER             *HMD 10/80*
         BCT   RWORK,INITMLP FIND END OF JOBNAME            *HMD 10/80*
INITMLO  LR    RWORK,R1      END  OF JOBNAME                *HMD 10/80*
         MVI   1(RWORK),C'(' RIGHT PAREN                    *HMD 10/80*
         LH    R1,JQEJOBNO   JOB'S NUMBER
         TM    JQEFLAG3,QUEJOB      Q. BATCH JOB?           *HMD 01/83*
         BNZ   STCORTSU             A. NO, TRY STC OR TSU   *HMD 01/83*
         MVC   2(3,RWORK),JOB       INDICATE IT'S A JOB     *HMD 01/83*
         B     CONVERT#             PUT IN THE JOB NUMBER   *HMD 01/83*
STCORTSU TM    JQEFLAG3,QUETSU  Q. TSU JOB?                 *HMD 01/83*
         BZ    ITSTC            A. NO, MUST BE STC          *HMD 01/83*
         MVC   2(3,RWORK),TSU   INDICATE TSU                *HMD 01/83*
         MVI   JES2TYPE,C'T'    INDICATE TSU                *HMD 01/83*
         B     CONVERT#         PUT IN THE TSU NUMBER       *HMD 01/83*
ITSTC    MVC   2(3,RWORK),STC   INDICATE STC                *HMD 01/83*
         MVI   JES2TYPE,C'S'    INDICATE STC                *HMD 01/83*
CONVERT# CVD   R1,DOUBLEWD    CONVERT TO PACKED DECIMAL
         UNPK  5(5,RWORK),DOUBLEWD+5(3) CONVERT TO ZONED DECIMAL
*                                                           *HMD 10/80*
         OI    9(RWORK),C'0'           CONVERT TO EBCDIC    *HMD 10/80*
         MVI   10(RWORK),C')'  MOVE IN RIGHT PAREN          *HMD 10/80*
         TM    JQEFLAGS,QUEHOLDA+QUEHOLD1+QUEHOLD2+QUEPURGE+QUEOPCAN
         BZR   RLINK          NO SPECIAL FLAGS
         MVC   MSGSPCST(L'HOLD),HOLD ASSUME THE JOB'S ON HOLD
         TM    JQEFLAGS,QUEHOLDA+QUEHOLD1 JOB ON HOLD?
         BNZR  RLINK          YES => RETURN TO OUR CALLER
         MVC   MSGSPCST(L'PURGE),PURGE ASSUME THE JOB'S TO BE PURGED
         TM    JQEFLAGS,QUEPURGE JOB TO BE PURGED?
         BOR   RLINK          YES => RETURN TO OUR CALLER
         MVC   MSGSPCST(L'CANCEL),CANCEL ASSUME JOB CANCELLED
         TM    JQEFLAGS,QUEOPCAN JOB CANCELLED?
         BOR   RLINK          YES => RETURN TO OUR CALLER
         MVC   MSGSPCST(L'DUPLICAT),DUPLICAT MUST BE DUPLICATE JOB
         BR    RLINK          RETURN TO OUR CALLER
         SPACE 5
JOB      DC    C'JOB'
TSU      DC    C'TSU'
STC      DC    C'STC'
HOLD     DC    C'HOLD'                                      *HMD 01/81*
PURGE    DC    C'PURG'                                      *HMD 01/81*
CANCEL   DC    C'CANC'                                      *HMD 01/81*
DUPLICAT DC    C'DUPL'                                      *HMD 01/81*
         EJECT
GETSYSID DS    0H                SUBROUTINE TO GET SYSID    *HMD 02/83*
         SLR   R15,R15           CLEAR FOR SYSAFF TEST      *HMD 02/83*
         LA    R1,AWAITTBL       GET TABLE ADDR             *HMD 02/83*
         NI    JQEFLAG2,QUESYSAF CLEAR UNWANTED BITS        *HMD 02/83*
         IC    R15,JQEFLAG2      GET SYSTEM AFFINITY FLAGS  *HMD 02/83*
         CH    R15,SAF+2         ANY CPU OK?                *HMD 02/83*
         BNE   GETSLOOP          YES, TELL USER             *HMD 02/83*
GETSANY  MVC   MSGSYSID,JSYSANY  MOVE IN 'ANY' SYSTEM       *HMD 02/83*
         B     GETSEND           FORGET TABLE LOOKUP        *HMD 02/83*
GETSLOOP CLI   0(R1),X'FF'       END OF TABLE?              *HMD 02/83*
         BE    GETSANY           BAD ENTRY, SET ANY         *HMD 02/83*
         IC    R15,0(R1)         GET SYSTEM AFFINITY FLAGS  *HMD 02/83*
         EX    R15,CLIJQE        LOOK AT SYSAFF FLAGS       *HMD 02/83*
         BE    GETSGOT           WE'VE GOT A SPECIAL SYSTEM *HMD 02/83*
         LA    R1,2(R1)          BUMP TO NEXT ENTRY         *HMD 02/83*
         B     GETSLOOP          LOOP TILL FOUND            *HMD 02/83*
GETSGOT  IC    R15,1(R1)         GET TRUE SYSTEM ID INDEX   *HMD 02/83*
         SLL   R15,2             MULTIPLY BY 4              *HMD 02/83*
         LA    R15,JSYSID(R15)   GET SYSTEM AFFINITY        *HMD 02/83*
         MVC   MSGSYSID,0(R15)   MOVE INTO PRINT AREA       *HMD 02/83*
GETSEND  BR    RLINK             RETURN TO CALLER           *HMD 02/83*
         SPACE 2                                            *HMD 02/83*
CLIJQE   CLI   JQEFLAG2,X'00'    COMPARE SYSTEM AFFINITY    *HMD 12/80*
         SPACE 2                                            *HMD 02/83*
AWAITTBL DC    X'01',X'01'  SYSTEM 1                        *HMD 12/80*
         DC    X'02',X'02'  SYSTEM 2                        *HMD 12/80*
         DC    X'04',X'03'  SYSTEM 3                        *HMD 12/80*
         DC    X'08',X'04'  SYSTEM 4                        *HMD 12/80*
         DC    X'10',X'05'  SYSTEM 5                        *HMD 12/80*
         DC    X'20',X'06'  SYSTEM 6                        *HMD 12/80*
         DC    X'40',X'07'  SYSTEM 7                        *HMD 12/80*
AWAITBLE DC    X'FF',X'FF'  END OF TABLE                    *HMD 12/80*
         SPACE 2
         DS    0F             ALIGN TO FULLWORD BOUNDARY    *HMD 02/83*
HIGHBIT  EQU   X'80'          HIGH BIT IS SET               *HMD 02/83*
MIDBIT   EQU   X'40'          NEXT TO THE HIGH BIT IS SET   *HMD 02/82*
LOBITS   EQU   X'0F'          ALL LOW ORDER BITS SET        *HMD 01/83*
SAF      DC    F'127'         SYSAFF FLAG VALUE             *HMD 10/80*
JSYSANY  DC    CL4'ANY'       SYSTEM ID OF 'ANY'            *HMD 10/80*
         EJECT                                              *HMD 02/83*
SETDEVIC DS    0H                                           *HMD 02/83*
         MVC   MSGSTYPE(L'ON),ON PUT IN THE 'ON'            *HMD 02/82*
         TM    0(RDEVID),HIGHBIT+MIDBIT    REMOTE DEVICE?   *HMD 02/82*
         BNZ   CHKXFRDV       CHECK FOR SPOOL XFER DEVICE   *HMD 01/83*
         CLI   0(RDEVID),LOBITS TEST FOR PSO JOE            *HMD 01/83*
         BE    DEVPSO           INDICATE PROCESS SYSOUT     *HMD 01/83*
         SR    R1,R1          FOR THE INSERT CHARACTER
         IC    R1,0(RDEVID)     DEVICE TYPE
         SRL   R1,4           RIGHT JUSTIFIED
         MH    R1,DEVTYPEL    TYPE * LENGTH OF A DEVICE ENTRY
         LA    R1,DEVTABLE(R1) A(DEVICE TYPE)
         MVC   MSGDEV,1(R1)   PUT IN THE DEVICE TYPE
         CLI   0(RDEVID),0      INTERNAL READER?
         BER   RLINK          YES => GIVE THE USER THE INFO
         SR    R15,R15        FOR THE INSERT CHARACTER
         ICM   R15,B'0011',1(RDEVID)                        *HMD 02/83*
*                               DEVICE NUMBER               *HMD 02/83*
         CVD   R15,DOUBLEWD   IN PACKED DECIMAL
         IC    R15,0(R1)      OFFSET TO WHERE THE DEV # GOES
         LA    R15,MSGDEV(R15) A(WHERE THE DEV # GOES)
         MVC   1(L'DIGITS3,R15),DIGITS3 SET UP THE EDIT OF 3 DIGITS
         EDMK  0(L'DIGITS3+1,R15),DIGITS     DEV # IN EBCDIC
         MVC   0(L'DIGITS3+1,R15),0(R1) ADJUST FOR BLANKS
         BR    RLINK          GIVE THE INFO TO THE USER
DEVPSO   DS    0H             PROCESS SYSOUT DEVICE         *HMD 01/83*
         MVC   MSGDEV,=C'PRSYSOUT'                          *HMD 01/83*
*                             FILL IN DEVICE NAME           *HMD 01/83*
         BR    RLINK          RETURN TO CALLER              *HMD 01/83*
         SPACE 2                                            *HMD 01/83*
CHKXFRDV DS    0H             CHECK FOR SPOOL DMP/LOD       *HMD 01/83*
         TM    0(RDEVID),MIDBIT+LOBITS                      *HMD 01/83*
         BNO   RMTDEV         NO - MUST BE REMOTE DEVICE    *HMD 01/83*
         SLR   R15,R15        CLEAR FOR INSERT              *HMD 01/83*
         IC    R15,0(RDEVID)  GET DEVICE TYPE               *HMD 01/83*
         SRL   R15,4          ISOLATE DEVICE TYPE           *HMD 01/83*
         ALR   R15,R15        ADJUST FOR DEVICE LOCATE      *HMD 01/83*
         LA    R15,RMTDEVS-MIDBIT/8(R15)                    *HMD 01/83*
*                             LOAD TABLE ENTRY ADDRESS      *HMD 01/83*
         MVC   MSGDEV+6(2),0(R15)   MOVE DEVICE NAME        *HMD 01/83*
         MVC   MSGDEV(6),=C'DMP1 .' ASSUME DUMPER           *HMD 01/83*
         MVC   MSGDEV+3(1),2(RDEVID)                        *HMD 01/83*
         CLI   MSGDEV+7,C'T'  Q. TRANSMITTER?               *HMD 01/83*
         BER   RLINK          A. YES, ALL DONE              *HMD 01/83*
         MVC   MSGDEV(3),=C'LOD'                            *HMD 01/83*
*                             INDICATE LOADER FUNCTION      *HMD 01/83*
         BR    RLINK                                        *HMD 01/83*
RMTDEV   DS    0H                                           *HMD 01/83*
         SR    R0,R0          FOR THE INSERT CHARACTER
         ICM   R0,B'0011',1(RDEVID)                         *HMD 02/83*
*                               REMOTE NUMBER               *HMD 02/83*
         CVD   R0,DOUBLEWD    IN PACKED DECIMAL
         MVI   MSGDEV,C'L'    ASSUME NJE LINE XMIT/RECV     *HMD 02/82*
         TM    0(RDEVID),MIDBIT      IS THIS AN NJE DEVICE? *HMD 02/82*
         BO    NJEDEV         YES, WE WERE CORRECT          *HMD 02/82*
         MVI   MSGDEV,C'R'    INDICATE A REMOTE DEVICE
NJEDEV   DS    0H             LABEL ONLY USED IF NJE        *HMD 02/82*
         MVC   MSGDEV+2(L'THREEPT),THREEPT SET UP THE EDIT MASK
         EDMK  MSGDEV+1(L'THREEPT),DIGITS     CONVERT TO EBCDIC
         MVC   MSGDEV+1(L'THREEPT),0(R1) ADJUST FOR BLANKS
         LA    R1,MSGDEV+1    A(SPOT JUST BEFORE POSSIBLE SEP)
FINDPT   LA    R1,1(R1)       A(NEXT BYTE)
         CLI   0(R1),C'.'     FOUND THE SEPARATOR?
         BNE   FINDPT         NO => KEEP LOOKING
         SR    R15,R15        FOR THE INSERT CHARACTER
         IC    R15,0(RDEVID)    DEVICE TYPE INDICATOR
         SRL   R15,3          RIGHT JUSTIFIED               *HMD 02/82*
         LA    R15,RMTDEVS-MIDBIT/8(R15) A(DEVICE TYPE)     *HMD 02/82*
         MVC   1(2,R1),0(R15) PUT IN THE DEVICE TYPE
         MVC   3(1,R1),0(RDEVID) PUT IN THE DEVICE NUMBER
         MVC   4(4,R1),BLANKS CLEAR TRAILING DOTS (IF ANY)  *HMD 02/83*
         OI    3(R1),C'0'     MAKE THE DEVICE NUMBER PRINTABLE
         BR    RLINK          RETURN TO OUR CALLER
         SPACE 5
ON       DC    C'ON'
DIGITS3  DC    X'2020202020'  REALLY SHOULD BE DIGITS5      *HMD 02/83*
THREEPT  DC    X'20202020204B'       SHOULD BE FIVEPT       *HMD 02/83*
         DS    0H
DEVTABLE DC    AL1(0),CL8'INTRDR',AL1(6),CL8'READER'
         DC    AL1(7),CL8'PRINTER',AL1(5),CL8'PUNCH'
DEVTYPEL DC    AL2((*-DEVTABLE)/4)
RMTDEVS  DC    C'JT',C'JR',C'ST',C'SR'      NJE STUFF       *HMD 02/82*
         DC    C'**',C'RD',C'PR',C'PU'                      *HMD 02/82*
         EJECT
JQEHOLDS CLI   JQETYPE,$HARDCPY JOB ON THE OUTPUT QUEUE?
         BNER  RLINK          NO => RETURN TO CALLER
         LH    R1,JQEHLDCT    BL12'HELD DS COUNT',BL4'HELD DS LOCK'
         SRL   R1,4           HELD DS COUNT
         LTR   R1,R1          ANY DS HELD BY THIS JOB?
         BZR   RLINK          NO => RETURN TO OUR CALLER
         ST    RLINK,HOLDSLNK SAVE OUR RETURN ADDRESS
         BAL   RLINK,INITMSG  INITIALIZE THE OUTPUT MESSAGE
         MVC   MSGSTYPE(L'WATOUTOF),WATOUTOF C'AWAITING OUTPUT OF'
         LA    R15,MSGSTYPE+L'WATOUTOF+1 A(SPOT FOR THE HELD DS COUNT)
         LH    R1,JQEHLDCT    BL12'HELD DS COUNT',BL4'HELD DS LOCK'
         SRL   R1,4           HELD DS COUNT
         BAL   RLINK,FITINUM  PUT THE HELD DS COUNT IN THE MSG
         MVC   1(L'HLDSMSG,R15),HLDSMSG C'HELD SYSOUT(S)'
         BAL   RLINK,OUTMSG   OUTPUT THE MESSAGE
         L     RLINK,HOLDSLNK RESTORE OUR RETURN ADDRESS
         BR    RLINK          RETURN TO OUR CALLER
         SPACE 5
WATOUTOF DC    C'AWAITING OUTPUT OF'
HLDSMSG  DC    C'HELD SYSOUT(S)'
         EJECT
SETEXEC  DS    0H             EXECUTING JOB                 *HMD 08/80*
         IC    R15,JQEFLAGS   GET SYSTEM ID                 *HMD 08/80*
         N     R15,=A(QUEBUSY)                              *HMD 01/83*
*                             ZERO OUT UNWANTED BITS        *HMD 01/83*
         SLL   R15,2          MULTIPLY BY 4                 *HMD 08/80*
         LA    R15,JSYSID(R15)   GET SYSTEM ID              *HMD 08/80*
         MVC   MSGSYSID,0(R15)   MOVE IN SYSTEM ID          *HMD 08/80*
         CLI   JES2TYPE,C'J'  JOB?
         BE    EXECJOB        YES => SET THE MSG
         CLI   JES2TYPE,C'T'  TSUSER?
         BE    LOGDUSER       YES => SET THE MSG
         MVC   MSGSTYPE(L'ACTIVE),ACTIVE MUST BE A STARTED TASK
         BR    RLINK          RETURN TO OUR CALLER
LOGDUSER MVC   MSGSTYPE(L'LOGGEDON),LOGGEDON TSUSER
         BR    RLINK          RETURN TO OUR CALLER
EXECJOB  MVC   MSGSTYPE(L'EXECUTNG),EXECUTNG EXECUTING JOB
         MVC   MSGQTYPE,JQEJCLAS     SET THE JOB CLASS      *HMD 02/83*
         BR    RLINK          RETURN TO OUR CALLER
         SPACE 5
ACTIVE   DC    C'ACTIVE'      STARTED TASK
LOGGEDON DC    C'LOGGED ON'   TSO USER
EXECUTNG DC    C'EXECUTING CLASS'  JOB
JSYSID   DC    CL4'    '                                    *HMD 08/80*
         DC    CL4'1MVS'     SYSTEM #1  NOTE:               *HMD 04/85*
         DC    CL4'****'     SYSTEM #2    CHANGE            *HMD 09/82*
         DC    CL4'****'     SYSTEM #3        FOR           *HMD 09/82*
         DC    CL4'****'     SYSTEM #4            YOUR      *HMD 09/82*
         DC    CL4'****'     SYSTEM #5    INSTALLATION      *HMD 08/80*
         DC    CL4'****'     SYSTEM #6                      *HMD 08/80*
         DC    CL4'****'     SYSTEM #7                      *HMD 08/80*
         EJECT
OUTMSG   ST    RLINK,SAVLINK  SAVE LINK REGISTER            *HMD 12/79*
         LA    R1,MESSAGE     A(MESSAGE)                    *HMD 12/79*
         LA    R0,LMESSAGE    LENGTH OF THE MESSAGE
         BAL   RLINK,PUTLINED GIVE IT TO OUR CALLER (DATA)  *HMD 12/79*
         L     RLINK,SAVLINK  RESTORE LINK REGISTER         *HMD 12/79*
         BR    RLINK          RETURN TO OUR CALLER
         EJECT
FITINUM  CVD   R1,DOUBLEWD    CONVERT TO PACKED DECIMAL
         MVC   NUMBER(L'NORMAL),NORMAL INITIALIZE THE EDIT FORMAT
         LA    R1,NUMBER+SIGNORM IN CASE OF ZEROES
         EDMK  NUMBER(L'NORMAL),DOUBLEWD+2 CONVERT TO EBCDIC
         LA    R14,NUMBER+L'NORMAL-1 A(END OF CONVERTED NUMBER)
         SLR   R14,R1         LENGTH OF THE CONVERTED NUMBER - 1
         EX    R14,MVNUMBER   PUT THE NUMBER IN THE MSG
         LA    R15,1(R14,R15) A(NEXT SPOT IN MSG)
         BR    RLINK          RETURN TO OUR CALLER
         SPACE 5
MVNUMBER MVC   0(0,R15),0(R1) TO BE EXECUTED
         SPACE 5
NORMAL   DC    X'402020202020202020202120' EDIT MASK
SIGNORM  EQU   11             OFFSET TO LAST DIGIT
         EJECT
*************************************************************HMD 12/79*
**  TSO PUTLINE SUBROUTINES, SO STATUS CAN BE RUN IN BATCH  *HMD 12/79*
*************************************************************HMD 12/79*
PUTLINEI DS    0H             PUTLINE SUBROUTINE (INFO)     *HMD 12/79*
         MVC   MLISTT,BLANKS  BLANK MESSAGE AREA            *HMD 12/79*
         LR    RWORK,R0       GET MESSAGE LENGTH            *HMD 12/79*
         BCTR  RWORK,0        DECREMENT FOR EX              *HMD 12/79*
         EX    RWORK,MVCMSGI  MOVE INFO MESSAGE TO AREA     *HMD 12/79*
         PUTLINE PARM=PTPB,                                 *HMD 05/80*X
               OUTPUT=(OLDIE,TERM,SINGLE,INFOR),            *HMD 05/80*X
               MF=(E,IOPL)                                  *HMD 01/81*
         BR    RLINK          RETURN TO CALLER              *HMD 12/79*
         SPACE 1                                            *HMD 12/79*
PUTLINED DS    0H             PUTLINE SUBROUTINE (DATA)     *HMD 12/79*
         MVC   MLISTC,BLANKS  BLANK OUTPUT AREA             *HMD 12/79*
         LR    RWORK,R0       GET MESSAGE LENGTH            *HMD 12/79*
         BCTR  RWORK,0        DECREMENT FOR EX              *HMD 12/79*
         EX    RWORK,MVCMSGD  MOVE DATA MESSAGE TO AREA     *HMD 12/79*
         PUTLINE PARM=PTPB,                                 *HMD 05/80*X
               OUTPUT=(MLISTB,TERM,SINGLE,DATA),            *HMD 05/80*X
               MF=(E,IOPL)                                  *HMD 01/81*
         BR    RLINK          RETURN TO CALLER              *HMD 12/79*
         SPACE 1                                            *HMD 12/79*
MVCMSGI  MVC   MLISTT(0),0(R1) MOVE MESSAGE TO INFO AREA    *HMD 12/79*
MVCMSGD  MVC   MLISTC(0),0(R1) MOVE MESSAGE TO DATA AREA    *HMD 12/79*
BLANKS   DC    CL80' '         BLANKS FOR CLEARING          *HMD 12/79*
         EJECT                                              *HMD 12/79*
STPCL    IKJPARM
JOBNAME  IKJIDENT 'JOB NAME',LIST,MAXLNTH=8,FIRST=ALPHA,               X
               OTHER=ALPHANUM,PROMPT='JOB NAME'
         SPACE  2
SUBSYS   IKJIDENT 'SUBSYSTEM NAME',MAXLNTH=4,FIRST=ALPHA,   *HMD 01/83*X
               OTHER=ALPHANUM,CHAR,DEFAULT='JES2'           *HMD 01/83*
         IKJENDP
         $JQE
JQEPOSTN EQU   JQETRAK,2      JQE POSITION
JQETOTAL EQU   JQETRAK+2,2    QUEUE TOTAL
         $JOE
JOEPOSTN EQU   JOEIOTTR,2     JOE POSITION                  *HMD 01/83*
JOETOTAL EQU   JOEIOTTR+2,2   QUEUE TOTAL                   *HMD 01/83*
   TITLE 'DISPLAY STATUS OF JES2 JOBS, LOGONS, AND STARTED TASKS'
         IKJCPPL
         EJECT                                              *HMD 12/79*
         IKJECT
         EJECT                                              *HMD 12/79*
         IKJPSCB
         EJECT                                              *HMD 12/79*
         CVT   DSECT=YES,LIST=YES
         EJECT
KZERO    EQU   0             CONSTANT OF ZERO               *HMD 02/83*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 2                                            *HMD 12/79*
RBASE    EQU   R2             A(STATUS)
RCPPL    EQU   R3             A(CPPL)
RECT     EQU   R4             A(ECT)
RWORK    EQU   R5             TEMPORARY WORK REGISTER
RJQE     EQU   R6             A(JOB QUEUE ELEMENT)
RLINK    EQU   R7             INTERNAL LINK REGISTER
RET      EQU   R8             A(RETURN AREA)
R#JQES   EQU   R9             # OF RETURNED JQES
R#JOES   EQU   R10            # OF RETURNED JOES
RJOE     EQU   R11            A(JOB OUTPUT ELEMENT)
RDEVID   EQU   R12            A(DEVICE DESCRIPTOR)
         EJECT
WORKAREA DSECT                OUR WORK AREA
SAVEAREA DS    18F            OUR SAVE AREA
DOUBLEWD EQU   SAVEAREA+16    PACKED DECIMAL WORK AREA
NUMBER   EQU   DOUBLEWD+8     FINAL PRODUCT OF CONVERT
DIGITS   EQU   DOUBLEWD+5     FOR EDMK START DIGIT          *HMD 02/83*
ONEJOBLN DS    F              LENGTH OF THE PARM FIELD FOR 1 JOB NAME
ONEJBNML DS    H              LENGTH OF THE 1 JOB NAME
ONEJOBNM DS    CL8            THE 1 JOB NAME
IOPL     DS    0A                                           *HMD 05/78*
***********************************************************************
*    THE I/O SERVICE ROUTINE PARAMETER LIST (IOPL) IS A LIST OF       *
*    FULLWORD ADDRESSES PASSED BY THE INVOKER OF ANY I/O SERVICE      *
*    ROUTINE TO THE APPROPRIATE SERVICE ROUTINE VIA REGISTER ONE.     *
***********************************************************************
         SPACE
IOPLUPT  DS    A        PTR TO UPT
IOPLECT  DS    A        PTR TO ECT
IOPLECB  DS    A        PTR TO USER'S ECB
IOPLIOPB DS    A        PTR TO THE I/O SERVICE RTN PARM BLOCK
OLDIE    DS    2F             O.L.D FOR PUTLINE             *HMD 12/79*
PTPB     PUTLINE MF=L         PUTLINE PARM BLOCK            *HMD 12/79*
MLISTA   DS    A              INFO MSG AREA                 *HMD 12/79*
MLISTH   DS    CL8            SYNTEX HEADER INFO            *HMD 05/85*
MLISTT   DS    CL71           71 CHARS OF DATA TO PUT       *HMD 12/79*
MLISTB   DS    A              MESSAGE HEADER                *HMD 12/79*
MLISTC   DS    CL79           MESSAGE TEXT                  *HMD 12/79*
         DS    0F             ALIGNMENT                     *HMD 12/79*
         EJECT
PPL      DS    0F
***********************************************************************
*    THE PARSE PARAMETER LIST (PPL) IS A LIST OF ADDRESSES PASSED     *
*    FROM THE INVOKER TO PARSE VIA REGISTER 1                         *
***********************************************************************
         SPACE
PPLUPT   DS    A        PTR TO UPT
PPLECT   DS    A        PTR TO ECT
PPLECB   DS    A        PTR TO CP'S ECB
PPLPCL   DS    A        PTR TO PCL
PPLANS   DS    A        PTR TO ANS PLACE
PPLCBUF  DS    A        PTR TO CMD BUFFER
PPLUWA   DS    A        PTR TO USER WORK AREA (FOR VALIDITY CK RTNS)
PPLRANS  DS    A        ANSWER PLACE
         SPACE
ANECB    DS    F              COMMUNICATION ECB FOR IKJPARS
ANECB1   DS    F              ECB FOR PUTLINE ROUTINE       *HMD 12/79*
ATACHPL  DS    5A             ATACHSRB'S PARAMETER LIST
INFORET  DS    A              A(WORD TO RECEIVE A(RET AREA))
ENQLIST  ENQ   (0,0,E,0,SYSTEMS),MF=L ENQ PARAMETER LIST
DEQLIST  EQU   ENQLIST        DEQ PARAMETER LIST
         DS    0D             ALIGNMENT                     *HMD 01/83*
JES2     DS    CL8            WHERE OUR JOB QUEUES ARE
USERID   DS    CL8            CURRENT TSO USERID            *HMD 04/85*
SAVLINK  DS    A              SAVE AREA FOR RETURN LINKAGE  *HMD 12/79*
JQESHOLD DS    A              RETURN ADDRESS HOLD FOR OUTJQES
WXEQHOLD DS    A              RETURN ADDRESS HOLD FOR SETWXEQ
WXMTHOLD DS    A              RETURN ADDRESS HOLD FOR SETWXMT
WXMTNODE DS    H              NODE NUMBER FOR XMITTER       *HMD 01/83*
JOESHOLD DS    A              RETURN ADDRESS HOLD FOR OUTJOES
HOLDSLNK DS    A              RETURN ADDRESS HOLD FOR JQEHOLDS
         SPACE 1                                            *HMD 01/83*
SWITCHES DS    X              VARIOUS STATUS SWITCHES       *HMD 01/83*
FF       EQU   X'FF' 1111 1111 TO TURN OF SOME OTHER        *HMD 01/83*
*                              SWITCHES                     *HMD 01/83*
NOSTOR   EQU   X'80' 1... .... NOT ENOUGH STORAGE TO        *HMD 01/83*
*                              COMPLETE REQUEST             *HMD 01/83*
NEWJES   EQU   X'40' .1.. .... ANOTHER JES2 SUBSYSTEM WAS   *HMD 01/83*
*                              SPECIFIED VIA THE SECOND     *HMD 01/83*
*                              PARAMETER TO STATUS          *HMD 01/83*
         SPACE 1                                            *HMD 01/83*
ALIGN    DS    0F             ALIGNMENT OF MESSAGE AREA     *HMD 01/83*
MESSAGE  EQU   *              OUTPUT MESSAGE BUFFER
MSGJBHDG DS    CL4            CL4'JOB '                     *HMD 10/80*
MSGJNME  DS    CL8            JOB NAME
MSGJPARR DS    C              CL1'('                        *HMD 10/80*
         DS    CL3            JOB OR TSU OR STC             *HMD 10/80*
MSGJOB#  DS    CL5            JOB NUMBER
MSGJPARL DS    C              CL1')'                        *HMD 10/80*
         DS    C
MSGSTYPE DS    CL42           JOB STATUS
MSGWXCLS EQU   MSGSTYPE+L'AWAITXEQ-2,1
MSGWOUTC EQU   MSGSTYPE+L'AWAITOUT-2,1
MSGOUTLC EQU   MSGSTYPE+L'AWAITOUT+1
MSGQTYPE EQU   MSGSTYPE+L'EXECUTNG+1,1
MSGDEV   EQU   MSGSTYPE+L'ON+1,8
         DS    C
MSGSPCST DS    CL4            SPECIAL STATUS
         DS    C                                            *HMD 08/80*
MSGSYSID DS    CL4            SYSTEM ID AFFINITY            *HMD 08/80*
LMESSAGE EQU   *-MESSAGE      LENGTH OF THE MESSAGE BUFFER
JES2TYPE DS    X              (JOB OR STC OR TSU)           *HMD 10/80*
STATS    DS    X              STATUS BITS
FILLEDRT EQU   X'80'          RETURN AREA FULL
LWRKAREA EQU   *-WORKAREA     WORK AREA LENGTH
         END
