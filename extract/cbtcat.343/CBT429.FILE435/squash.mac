/* REXX    SQUASH     Submit a job to compress a dataset.
   ×**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**×
   ×                                                                 ×
   ×          WARNING: EMBEDDED COMPONENTS.                          ×
   ×                      See text following TOOLKIT_INIT            ×
   ×                                                                 ×
   ×**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**×

           Written by Chris Lewis 19960708

     Impact Analysis
.    SYSPROC   DFLTHLQ
.    SYSPROC   TRAPOUT
.    ISPSLIB   SQUASH

     Modification History
     19980505 fxc RXSKLY2K; upgrade from v.960702 to v.19980225;
                  DECOMM;
     19990712 fxc adapted for PMU

*/
address ISPEXEC                        /* REXXSKEL ver.19980225      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc     = trace(tv)
info   = parms                         /* to enable parsing          */

parse value reverse(info) with dsn .   /* take parm over ZDSN        */
dsn = reverse(dsn)

if dsn = "" × dsn = "''" then do
   helpmsg = "Dataset Name Required"
   call HELP
   end

if left(dsn,1) = "'" then              /* dataset should be in TSO   */
   dsn = strip(dsn,,"'")               /* format; must be fully      */
else                                   /* qualified and unquoted for */
   dsn = userid()"."dsn                /* the JCL.                   */

call DEIMBED                           /* extract SLIB(SQUASH)      -*/
"LIBDEF  ISPSLIB  DATASET  ID("exec_name".SLIB)  STACK"
"FTOPEN TEMP"
"FTINCL SQUASH"
"FTCLOSE"
"LIBDEF  ISPSLIB"
mstat = Msg("OFF"); address TSO "DELETE" exec_name".SLIB"; mstat = Msg(m

"VGET (ZTEMPN ZTEMPF)"

if monitor then do
   "LMINIT DATAID(DDNID) DDNAME("ztempn")"
   "EDIT DATAID("DDNID")"
   end

if noupdt then nop
else
   address TSO "submit '"ztempf"'"

exit                                   /*@ SQUASH                    */
/*
   Parse out the embedded components at the back of the source code.

   The components are enclosed in a comment whose start and end are on
   individual lines for easier recognition.

   Each component is identified by a triple-close-paren ")))" in
   column 1 followed by a DDName and a membername.  The text of the
   component begins on the next line.

   There are no restrictions on the DDName, but the DSName which will
   be generated for each component type is <exec_name.DDName>.  It is
   up to the programmer to add the code to properly LIBDEF each
   component type.
.  ----------------------------------------------------------------- */
DEIMBED: Procedure expose,             /*@                           */
   exec_name ddnlist branch tv monitor

   address TSO

   fb80po.0  = "NEW CATALOG UNIT(sysda) SPACE(5 5) TRACKS DIR(40) RECFM(
"B) LRECL(80) BLKSIZE(0)"
   fb80po.1  = "SHR"                      /* if it already exists...
   ddnlist = ""

   lastln   = sourceline()
   currln   = lastln                   /*                            */
   if Left(sourceline(currln),2) <> "*/" then return

   currln = currln - 1                 /* previous line              */
   "NEWSTACK"
   do while sourceline(currln) <> "/*"
      text = sourceline(currln)        /* save with a short name !   */
      if Left(text,3) = ")))" then do  /* package the queue          */
         parse var text ")))" ddn mbr .   /* PLIB PANL001  maybe     */
         outdsn = exec_name"."ddn
         stat = Sysdsn(outdsn) = "OK"
         if ^stat then do              /* doesn't exist              */
            "ALLOC FI("ddn") DA("outdsn") REU" fb80po.0
            "FREE  FI("ddn")"
            end                        /*                            */
         if Pos(ddn,ddnlist) = 0 then, /* doesn't exist              */
            ddnlist = ddnlist ddn      /* keep track                 */
         "ALLOC FI("ddn") DA("outdsn"("mbr"))  SHR REU"
         "EXECIO"  queued() "DISKW"  ddn "(FINIS"
         end                           /* package the queue          */
      else push text                   /* onto the top of the stack  */
      currln = currln - 1              /* previous line              */
   end                                 /* while                      */
   "DELSTACK"

return                                 /*@ DEIMBED                   */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   if branch then call BRANCH
   address TSO


return                                 /*@ LOCAL_PREINIT             */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@ HELP                      */
address TSO;"CLEAR"
if helpmsg <> "" then do ; say helpmsg; say ""; end

say "  SQUASH        Submit a job to compress a dataset.              "
say "                                                                 "
say "  Syntax:   SQUASH    <dsn>              -  TSO Format           "
say "                                                                 "
say "            To squeeze the dataset you are currently in, add     "
say "            the following to your command table:                 "
say "                                                                 "
say "            VERB     T  ACTION                                   "
say "                           DESCRIPTION                           "
say "            -------- -  ---------------------------------------- "
say "            SQUASH   2  SELECT CMD(%SQUASH '&ZDSN' &ZPARM)       "
say "                           SUBMIT A JOB TO COMPRESS A DATASET    "
say "                                                                 "
say "            NOTE:  Any parm is taken in preference to ZDSN.  The "
say "                   program will take the last parm as the dsn to "
say "                   compress.                                     "
say "            NOTE:  Option MONITOR will display the JCL prior to  "
say "                   submission.                                   "
say "                   Option NOUPDT will stop automatic submission  "
say "                   of the JCL.                                   "
say "                                                                 "
pull
"CLEAR"
say "   Debugging tools provided include:"
say "                                                                 "
say "        MONITOR:  displays key information throughout processing."
say "                  Displays most paragraph names upon entry."
say "                                                                 "
say "        NOUPDT:   by-pass all update logic."
say "                                                                 "
say "        BRANCH:   show all paragraph entries."
say "                                                                 "
say "        TRACE tv: will use value following TRACE to place"
say "                  the execution in REXX TRACE Mode."
say "                                                                 "
say "                                                                 "
say "   Debugging tools can be accessed in the following manner:"
say "                                                                 "
say "        TSO" exec_name"  parameters  ((  debug-options"
say "                                                                 "
say "   For example:"
say "                                                                 "
say "        TSO" exec_name " (( MONITOR TRACE ?R"

address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   $a#y = sigl                         /* where was I called from ?  */
   do $b#x = $a#y to 1 by -1           /* inch backward to label     */
      if Right(Word(Sourceline($b#x),1),1) = ":" then do
         parse value sourceline($b#x) with $l#n ":" . /* Paragraph   */
         leave ; end                   /*                name        */
   end                                 /* $b#x                       */

   select
      when brparm = "NAME" then return($l#n) /* Return full name     */
      when brparm = "ID"      then do  /*        Return prefix       */
         parse var $l#n $l#n "_" .     /* get the prefix             */
         return($l#n)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left($l#n,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   say "Total Stacks" rc ,             /* rc = #of stacks            */
       "Begin Stacks" tk_init_stacks , /* Stacks present at start    */
       "Stacks to DUMP" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      say "Processing Stack #" dd "Total Lines:" queued()
      do queued();pull line;say line;end /* pump to the screen       */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/*
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+1)        /* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg "Invalid length for delimiter("dlm") with KEYPHR
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg "No matching second delimiter("dlm") with KEYPHR
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") × \datatype(ssend,"W") then return
   address TSO "CLEAR"
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say sourceline(ssii) ; end
   address TSO "CLEAR"
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":" ,
errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm  as_invokt
cmd_env  addr_spc  usr_tokn
   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   if WordPos("?",parms) > 0 then call HELP    /* I won't be back    */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   sw.nested    = sysvar("SYSNEST") = "YES"
   sw.batch     = sysvar("SYSENV")  = "BACK"
   sw.inispf    = sysvar("SYSISPF") = "ACTIVE"

   "NEWSTACK"
   "DFLTHLQ"  ; pull hlq.  hlqdata
   "DELSTACK"

   do while hlqdata <> ""
      parse var hlqdata site hlq.site hlqdata
   end

   tk_hlq  = KEYWD("USEHLQ")
   parse value tk_hlq hlq.node with hlq . /* default to prod         */
   parse value KEYWD("TRACE")  "O"    with   tv  .
   tk_globalvars = "tk_globalvars exec_name tv helpmsg sw. zerrhm",
                   "zerralrm zerrsm zerrlm tk_init_stacks branch",
                   "monitor noupdt hlq"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
/*
)))SLIB SQUASH
&JOB1
&JOB2
&JOB3
&JOB4
//* -------------------------------------- ISPSLIB(SQUASH) */
//SQUASH   EXEC PGM=IEBCOPY
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(80,(60,45))
//SYSUT4    DD UNIT=SYSDA,SPACE=(256,(15,1)),DCB=KEYLEN=8
//SYSIN     DD *
     COPY  OUTDD=INOUT,INDD=INOUT
//INOUT     DD DISP=SHR,DSN=&DSN
*/
