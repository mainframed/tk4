/* REXX    TBLOOK     Display any ISPF table

           Written by Frank Clarke, Oldsmar FL

     Impact Analysis
.    SYSPROC   DFLTHLQ
.    SYSPROC   TRAPOUT
.    SYSPROC   LA

     Modification History
     19951016 fxc upgrade REXXSKEL (950824); activate 'IN datasetname';
     19980211 fxc leave table OPEN if it was found that way; enable
                  SORT;
     19980602 fxc enable Find/Locate
     19980729 fxc upgrade from v.960119 to v.19980225;
                  RXSKLY2K; DECOMM;
     19991101 fxc use VIO for the panel library similar to the method
                  used by DEIMBED.

*/
address TSO                            /* REXXSKEL ver.19980225      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc     = trace(tv)
info   = parms                         /* to enable parsing          */

call A_INIT                            /*                           -*/
                                   if \sw.0error_found then,
call B_BUILD_PANELS                    /*                           -*/

exit                                   /*@ TBLOOK                    */
/*
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch  then call BRANCH
   address ISPEXEC

   "CONTROL ERRORS RETURN"             /* I'll handle my own.        */
   alloc.0   = "NEW CATALOG UNIT(VIO) SPACE(2 2) TRACKS DIR(5)",
               "RECFM(F B) LRECL(80) BLKSIZE(0)"
   parse value "" with,
      pfkey  thisds  keynames  varnames

   call AA_KEYWDS                      /*                           -*/

   parse var info  tblid .
   if tblid = "" then do               /* tablename not specified ?  */
      helpmsg = "Tablename must be specified."
      call HELP; end

   if tblds = "" then do
      "TBSTATS" tblid "STATUS2(s2)"
      if rc > 0 then do
         zerrlm  = exec_name "("BRANCH("ID")")",
                   zerrlm
         "SETMSG  MSG(ISRZ002)"
         sw.0error_found = "1" ; return
         end
      if s2 > 1 then do
         sw.0leave_open = "1"
         return
         end
      call AB_LISTA                    /*                           -*/
      end
   else do
      if Left(tblds,1) <> "'" then tblds = Userid()"."tblds  /*
fully-qualified  */
                              else tblds = Strip(tblds,,"'") /* unquoted
      */
      end

   do ii = 1 to Words(tblds)
      parse var tblds thisds tblds
      if Sysdsn("'"thisds"("tblid")'") = "OK" then leave
   end                                 /* ii                         */

   if Sysdsn("'"thisds"("tblid")'") <> "OK" then do
      say tblid "not found in ISPTLIB"
      sw.0error_found = "1" ; return
      end

return                                 /*@ A_INIT                    */
/*
.  ----------------------------------------------------------------- */
AA_KEYWDS:                             /*@                           */
   if branch then call BRANCH
   address TSO

   parse value  KEYWD("TBLIB") KEYWD("IN") with,
                tblds    .

return                                 /*@ AA_KEYWDS                 */
/*
   No <tblds> was specified.  Search area is ISPTLIB.
.  ----------------------------------------------------------------- */
AB_LISTA:                              /*@                           */
   if branch then call BRANCH
   address TSO

   "NEWSTACK"
   "LA ISPTLIB ((STACK"
   pull tblds
   "DELSTACK"

return                                 /*@ AB_LISTA                  */
/*
.  ----------------------------------------------------------------- */
B_BUILD_PANELS:                        /*@                           */
   if branch  then call BRANCH
   address ISPEXEC

   call BA_ALLOC_PNL                   /*                           -*/
                                   if \sw.0error_found then,
   call BB_OPEN                        /*                           -*/
                                   if \sw.0error_found then,
   call BC_LOAD_PANELS                 /*                           -*/
                                   if \sw.0error_found then,
   call BD_SHOW_TABLE                  /*                           -*/

   if sw.0leave_open then nop; else,
      "TBEND"  tblid

return                                 /*@ B_BUILD_PANELS            */
/*
.  ----------------------------------------------------------------- */
BA_ALLOC_PNL:                          /*@                           */
   if branch then call BRANCH
   address TSO

   mstat = Msg("OFF")
   $ddn = "$PNL"Random(999)
   "ALLOC FI("$ddn") REU" alloc.0
   address ISPEXEC "LMINIT DATAID(DAID) DDNAME("$ddn")"
   rc = Msg(mstat)                     /* restore                    */

return                                 /*@ BA_ALLOC_PNL              */
/*
.  ----------------------------------------------------------------- */
BB_OPEN:                               /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   if sw.0leave_open then return

   "CONTROL ERRORS RETURN"
   if thisds <> "" then,
      "LIBDEF ISPTLIB DATASET ID('"thisds"') STACK"

   "TBSTATS" tblid "STATUS1(s1) STATUS2(s2)"
   if rc = 20 then do
      say tblid "is not a valid ISPF table"
      sw.0error_found = "1"
      end ; else,
   if thisds <> "" & s1 > 1 then do
      say "Table" tblid "not available."
      sw.0error_found = "1"
      end ; else,
   if s2 = 1 then,                     /* not open                   */
      "TBOPEN" tblid "NOWRITE"

   if thisds <> "" then,
      "LIBDEF  ISPTLIB"

return                                 /*@ BB_OPEN                   */
/*
   Build the panels for the table display.
.  ----------------------------------------------------------------- */
BC_LOAD_PANELS:                        /*@                           */
   if branch  then call BRANCH
   address TSO

   call BCA_GETNAMES                   /*                           -*/
   call BCH_HEADERS                    /*                           -*/

   "NEWSTACK"
   call BCP_LOADP1                     /*                           -*/
   call BCQ_LOADP2                     /*                           -*/
   "DELSTACK"

return                                 /*@ BC_LOAD_PANELS            */
/*
.  ----------------------------------------------------------------- */
BCA_GETNAMES:                          /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "TBQUERY" tblid "KEYS(keynames) NAMES(varnames)"
   parse var keynames "(" keynames ")"
   parse var varnames "(" varnames ")"
   keynmes = keynames
   varnmes = varnames
   allnames = keynames varnames

return                                 /*@ BCA_GETNAMES              */
/*
.  ----------------------------------------------------------------- */
BCH_HEADERS:                           /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   cols   = ""                         /* P1 column header           */
   slug   = " S"                       /* P1 column header           */
   dashes = " -"
   zees   = "14"x"Z"
   ccol   = ""
   do forever
      if allnames = "" then leave
      parse var allnames var allnames  /* next field name            */
      slug  = slug Left(var,8)
      if Length(slug) > 78 then leave  /* too long for display       */
      cols   = slug
      dashes = dashes "--------"
      zees   =   zees"?Z       "
      ccol   = ccol var
   end                                 /* forever                    */

return                                 /*@ BCH_HEADERS               */
/*
.  ----------------------------------------------------------------- */
BCP_LOADP1:                            /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   queue ")ATTR                                                     "
   queue " #    TYPE(TEXT)    INTENS(HIGH)                          "
   queue " 14   TYPE(INPUT)   INTENS(LOW)   PAD('.')   CAPS(ON)     "
   queue " ?    TYPE(OUTPUT)  INTENS(HIGH)  SKIP(ON)                "
   queue ")BODY EXPAND(××)                                          "
   queue "+×-×-#TABLE" tblid "("thisds")+-×-×                       "
   queue "%COMMAND ===>_Z                                           "
   queue "+       SORT <fld>,<typ>,<dir>  <fld>    L fld=value / F5=refi
   queue cols
   queue dashes
   queue ")MODEL                                                    "
   queue zees
   queue ")INIT                                                     "
   queue "  .ZVARS='( ZCMD          $S$ +                           "
   queue " "ccol ")'"
   queue "  &ZSCROLLA = 'CSR'                                       "
   queue "  &$S$ = ' '                                              "
   queue ")REINIT                                                   "
   queue ")PROC                                                     "
   queue "   IF (.PFKEY = 'PF05')                                   "
   queue "       &PFKEY = 'F5'                                      "
   queue "       .RESP = END                                        "
   queue ")END                                                      "
   "LMOPEN DATAID("daid") OPTION(OUTPUT)"
   do queued()
      parse pull line
      "LMPUT DATAID("daid") MODE(INVAR) DATALOC(LINE) DATALEN(80)"
   end
   "LMMADD DATAID("daid") MEMBER(P1)"
   "LMCLOSE DATAID("daid")"

return                                 /*@ BCP_LOADP1                */
/*
.  ----------------------------------------------------------------- */
BCQ_LOADP2:                            /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   queue ")ATTR                                                     "
   queue "  14   TYPE(INPUT) INTENS(LOW) PAD('.') CAPS(ON)          "
   queue "  ?    TYPE(OUTPUT) INTENS(HIGH) SKIP(ON)                 "
   queue "  #    TYPE(TEXT) INTENS(HIGH)                            "
   queue ")BODY EXPAND(××)                                          "
   queue "+×-×-#TABLE" tblid "("thisds")+-×-×                       "
   queue "%COMMAND ===>_Z                                           "
   queue "+                                                         "
   queue "#VARIABLE  T  VALUE+                                      "
   queue "+                                                         "
   queue ")MODEL                                                    "
   queue "?Z        ?Z ?Z                                           "
   queue ")INIT                                                     "
   queue "  .ZVARS='( ZCMD          XVAR XTYPE XVALUE )'            "
   queue "  &ZSCROLLA = 'CSR'                                       "
   queue ")END                                                      "
   "LMOPEN DATAID("daid") OPTION(OUTPUT)"
   do queued()
      parse pull line
      "LMPUT DATAID("daid") MODE(INVAR) DATALOC(LINE) DATALEN(80)"
   end
   "LMMADD DATAID("daid") MEMBER(P2)"
   "LMCLOSE DATAID("daid")"

return                                 /*@ BCQ_LOADP2                */
/*
.  ----------------------------------------------------------------- */
BD_SHOW_TABLE:                         /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "LIBDEF  ISPPLIB  LIBRARY  ID("$ddn") STACK"
   "VGET (ZPF05) PROFILE"
   save_f5 = zpf05
   do forever
                               zpf05 = "END"  ; "VPUT (ZPF05) PROFILE"
      "TBDISPL" tblid "PANEL(P1)"
      disp_rc = rc
                               zpf05 = save_f5; "VPUT (ZPF05) PROFILE"
      if disp_rc > 8 then do
         zerrlm = exec_name "("BRANCH("ID")")",
                  zerrlm ,
                  "K:"keynmes "N:"varnmes
         "SETMSG  MSG(ISRZ002)"
         sw.0error_found = "1"
         leave
         end
      if disp_rc = 8 then,
         if pfkey = "F5" then call Z_REFIND        /*               -*/
                         else leave
      if zcmd <> "" then do
         call BDC_ZCMD                 /*                           -*/
         end ; else,
      do ztdsels
         "TBGET" tblid "SAVENAME(xvars)"
         call BDA_BUILD_ROW
         call BDB_SHOW_ROW
         if ztdsels = 1 then,          /* never do the last one      */
            ztdsels = 0
         else "TBDISPL" tblid          /* next row                  #*/
      end                              /* ztdsels                    */
      action = ""                      /* clear for re-display       */
   end                                 /* forever                    */
   "LIBDEF  ISPPLIB"

return                                 /*@ BD_SHOW_TABLE             */
/*
.  ----------------------------------------------------------------- */
BDA_BUILD_ROW:                          /*@                           */
   if branch  then call BRANCH
   address ISPEXEC

   "TBCREATE XTABLE NOWRITE REPLACE NAMES(XVAR XTYPE XVALUE)"
   parse var xvars "(" xvars ")"
   xtype = "K"
   keynames = keynmes
   do while keynames <> ""
      parse var keynames xvar keynames
      xvalue = Value(xvar)
      "TBADD  XTABLE"
   end                                 /* keynames                   */
   xtype = "N"
   varnames = varnmes
   do while varnames <> ""
      parse var varnames xvar varnames
      xvalue = Value(xvar)
      "TBADD  XTABLE"
   end                                 /* varnames                   */
   xtype = "S"
   do while xvars    <> ""
      parse var xvars    xvar xvars
      xvalue = Value(xvar)
      "TBADD  XTABLE"
   end                                 /* xvars                      */

return                                 /*@ BDA_BUILD_ROW             */
/*
.  ----------------------------------------------------------------- */
BDB_SHOW_ROW: Procedure expose,        /*@                           */
      branch
   if branch  then call BRANCH
   address ISPEXEC

   "CONTROL DISPLAY SAVE"
   "TBTOP   XTABLE"
   "TBDISPL XTABLE PANEL(P2)"
   "TBEND   XTABLE"
   "CONTROL DISPLAY RESTORE"

return                                 /*@ BDB_SHOW_ROW              */
/*
.  ----------------------------------------------------------------- */
BDC_ZCMD:                              /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   parse var zcmd  verb  text
   if verb = "SORT" then do
      zerrlm    = "ZERRLM not yet set."
      sortspec  = ""
      do while text <> ""
         parse var text  spec text
         parse var spec  fldnm "," fldtyp "," sortdir
         parse value  fldtyp "C"  with  fldtyp  .
         parse value sortdir "A"  with sortdir  .
         sortspec = sortspec fldnm","fldtyp","sortdir
      end                              /* text                       */
      sortspec = Space(sortspec,1)     /* squeeze out extra blanks   */
      sortspec = Translate(sortspec,","," ")    /* blanks to commas  */
      "TBSORT" tblid "FIELDS("sortspec")"
      if rc > 0 then do
         zerrsm  = "TBSORT failed."
         zerrlm  = exec_name "("BRANCH("ID")")",
                   zerrlm
         "SETMSG  MSG(ISRZ002)"
         end
      end  ; else,                     /* SORT                       */
   if Wordpos(Left(verb,1),"F L") > 0 then do
      parse var text  fld . "=" val .
      "TBVCLEAR" tblid
      $z$ = Value(fld,val"*")          /* load value                 */
      "TBSARG" tblid "NAMECOND("fld",EQ)"
      "TBTOP" tblid
      call Z_TBSCAN                    /*                           -*/
      end                              /* L LOCATE F FIND            */

return                                 /*@ BDC_ZCMD                  */
/*
   Position the cursor, then TBSCAN
.  ----------------------------------------------------------------- */
Z_REFIND:                              /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "TBSKIP" tblid "ROW("lastfnd") NOREAD"
   call Z_TBSCAN                       /*                           -*/
   pfkey = ""                          /* prevent re-use             */

return                                 /*@ Z_REFIND                  */
/*
   The table is positioned to find a row and the argument is set.
.  ----------------------------------------------------------------- */
Z_TBSCAN:                              /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   "TBSCAN" tblid "ROWID(LASTFND) POSITION(LASTCRP)"
   if rc = 8 then do                   /* not found                  */
      zerrsm = "Not found"
      if pfkey = "F5" then,
         zerrlm = "End of table encountered."
      else,
         zerrlm = "No rows found to match" fld"="val
      zerrlm = exec_name "("BRANCH("ID")")",
               zerrlm
      address ISPEXEC "SETMSG  MSG(ISRZ002)"
      end                              /* not found                  */
   "TBSKIP" tblid "ROW("lastfnd") NOREAD"

return                                 /*@ Z_TBSCAN                  */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   if branch then call BRANCH
   address TSO

   sw.0DIAGNOSE    = SWITCH("DIAGNOSE")

return                                 /*@ LOCAL_PREINIT             */
/*
. -------------------------------------------------------------------*/
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then do ; say helpmsg; say ""; end
say "  TBLOOK        Displays any specified table.                    "
say "                                                                 "
say "  Syntax:   TBLOOK    <table-name>                               "
say "                      <TBLIB table-library-name>  (or)           "
say "                      <IN    table-library-name>                 "
say "                                                                 "
pull
"CLEAR"
say "   Debugging tools provided include:"
say " "
say "        BRANCH:   show all paragraph entries."
say " "
say "        TRACE tv: will use value following TRACE to place"
say "                  the execution in REXX TRACE Mode."
say " "
say " "
say "   Debugging tools can be accessed in the following manner:"
say " "
say "        TSO" exec_name"  parameters  ((  debug-options"
say " "
say "   For example:"
say " "
say "        TSO" exec_name " (( MONITOR TRACE ?R"
address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   $a#y = sigl                         /* where was I called from ?  */
   do $b#x = $a#y to 1 by -1           /* inch backward to label     */
      if Right(Word(Sourceline($b#x),1),1) = ":" then do
         parse value sourceline($b#x) with $l#n ":" . /* Paragraph   */
         leave ; end                   /*                name        */
   end                                 /* $b#x                       */

   select
      when brparm = "NAME" then return($l#n) /* Return full name     */
      when brparm = "ID"      then do  /*        Return prefix       */
         parse var $l#n $l#n "_" .     /* get the prefix             */
         return($l#n)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left($l#n,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   say "Total Stacks" rc ,             /* rc = #of stacks            */
       "Begin Stacks" tk_init_stacks , /* Stacks present at start    */
       "Stacks to DUMP" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      say "Processing Stack #" dd "Total Lines:" queued()
      do queued();pull line;say line;end /* pump to the screen       */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/*
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+1)        /* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg "Invalid length for delimiter("dlm") with KEYPHR
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg "No matching second delimiter("dlm") with KEYPHR
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") × \datatype(ssend,"W") then return
   address TSO "CLEAR"
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say sourceline(ssii) ; end
   address TSO "CLEAR"
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":" ,
errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Requires DFLTHLQ.  Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm  as_invokt
cmd_env  addr_spc  usr_tokn
   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   sw.nested    = sysvar("SYSNEST") = "YES"
   sw.batch     = sysvar("SYSENV")  = "BACK"
   sw.inispf    = sysvar("SYSISPF") = "ACTIVE"

   "NEWSTACK"
   "DFLTHLQ"  ; pull hlq.  hlqdata
   "DELSTACK"

   do while hlqdata <> ""
      parse var hlqdata site hlq.site hlqdata
   end

   tk_hlq  = KEYWD("USEHLQ")
   parse value tk_hlq  hlq.node   with  hlq  .  /* default to prod   */

   parse value KEYWD("TRACE")  "O"    with   tv  .
   tk_globalvars = "tk_globalvars exec_name tv helpmsg sw. zerrhm",
                   "zerralrm zerrsm zerrlm tk_init_stacks branch",
                   "monitor noupdt hlq"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
