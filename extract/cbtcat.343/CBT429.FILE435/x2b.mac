/* REXX    X2B        Hexadecimal-to-Binary converter fills in a gap
                      in the conversion routines built into REXX.

           Input to this subroutine is a hexadecimal string (length
           2n).  Output is a binary string (length 8n).

                Written by Frank Clarke, Oldsmar, FL

*/
address TSO                            /*                            */
signal on syntax                       /*                            */
tv = ''                                /*                            */
arg parms "((" opts                    /*                            */
opts = Strip(opts,T,")")               /* clip trailing paren        */
                                       /*                            */
parse var opts "TRACE" tv .            /*                            */
if tv ^= '' then rc = trace(tv)        /*                            */
broken = SWITCH(BROKEN)                /*                            */
if broken then spacer = " "            /*                            */
          else spacer = ""             /*                            */
                                       /*                            */
if parms = '' then call HELP           /*                            */
if Word(parms,1) = '?' then call HELP  /*                            */
                                       /*                            */
parse var parms hex_str                /*                            */
hex_str = Space(hex_str,0)             /*                            */
bits.  = "?"                           /*                            */
bits.0 = "0000"                        /*                            */
bits.1 = "0001"                        /*                            */
bits.2 = "0010"                        /*                            */
bits.3 = "0011"                        /*                            */
bits.4 = "0100"                        /*                            */
bits.5 = "0101"                        /*                            */
bits.6 = "0110"                        /*                            */
bits.7 = "0111"                        /*                            */
bits.8 = "1000"                        /*                            */
bits.9 = "1001"                        /*                            */
bits.A = "1010"                        /*                            */
bits.B = "1011"                        /*                            */
bits.C = "1100"                        /*                            */
bits.D = "1101"                        /*                            */
bits.E = "1110"                        /*                            */
bits.F = "1111"                        /*                            */
ret_str = ''                           /*                            */
                                       /*                            */
do while hex_str ^= ''                 /*                            */
   parse var hex_str hi 2 lo 3 hex_str /* F 4 C1D5 maybe             */
   ret_str = ret_str ×× spacer ×× bits.hi ×× bits.lo
end                                    /*                            */
                                       /*                            */
ret_str = Strip(ret_str)               /*                            */
if Sysvar(Sysnest) = "YES" then,       /*                            */
   return ret_str                      /*                            */
else say  ret_str                      /*                            */
                                       /*                            */
exit                                   /*                            */
                                       /*                            */
/*-------------------------------------------------------------------*/
HELP:                                  /*@                           */
say "HELP for" Sysvar(Sysicmd) "not available"
exit                                   /*@ HELP                      */
address TSO "CLEAR"                    /*                            */
say "                                                                 "
                                       /*
       ........      .........
                     ...

       Syntax:   ........  .........
                           ...

                 ...........
                 ...
                                                                     */
say "                                                                 "
exit                                   /*@ HELP                      */
                                       /*                            */
/*-------------------------------------------------------------------*/
KEYWD: Procedure expose,               /*@                           */
       kw parms                        /*                            */
arg kw .                               /*                            */
if Wordpos(kw,parms) = 0 then,         /*                            */
   kw_val = ''                         /*                            */
else,                                  /*                            */
if Wordpos(kw,parms) = 1 then,         /*                            */
   kwa = kw" "                         /*                            */
else kwa = " "kw" "                    /*                            */
parse var parms . value(kwa)  kw_val .
if kw_val <> '' then parms = Delword(parms,Wordpos(value(kw),parms),2)
return kw_val                          /*@ KEYWD                     */
                                       /*                            */
/*-------------------------------------------------------------------*/
SWITCH:                                /*@                           */
arg kw .                               /*                            */
sw_val  = Wordpos(value(kw),parms) > 0
if sw_val  then parms = Delword(parms,Wordpos(value(kw),parms),1)
return sw_val                          /*@ SWITCH                    */
                                       /*                            */
/*-------------------------------------------------------------------*/
SYNTAX:                                /*@                           */
   errormsg = "REXX error" rc "in line" sigl":" errortext(rc)
   say errormsg                        /*                            */
   say sourceline(sigl)                /*                            */
   trace "?r"                          /*                            */
   nop                                 /*                            */
exit                                   /*@ SYNTAX                    */
                                       /*                            */
