FAKEGSAM TITLE 'SUBSTITUTE GSAM ROUTINE'
FAKEGSAM CSECT ,
         PRINT NOGEN
         SPACE 3
*************************************************************
*        PSA = PREFIXED STORAGE AREA                        *
*        PSA = DSECT AND BASE                               *
*************************************************************
         SPACE 1
         IHAPSA ,
         SPACE 3
*************************************************************
*        TCB = TASK CONTROL BLOCK                           *
*        TCBFIX = PREFIX AND BASIC SECTIONS DSECT           *
*        TCBFIX = PREFIX SECTION BASE                       *
*        TCB = BASIC SECTION BASE                           *
*        TCBXTNT2 = COMMON EXTENSION DSECT AND BASE         *
*************************************************************
         SPACE 1
         IKJTCB LIST=YES
         SPACE 3
*************************************************************
*        TIOT = TASK INPUT/OUTPUT TABLE                     *
*        DSECT CARD NOT GENERATED                           *
*        TIOCNJOB = BASIC SECTION BASE                      *
*        TIOENTRY = DD ENTRY BASE                           *
*        TIOESTTB = DEVICE ENTRY BASE                       *
*************************************************************
         SPACE 1
TIOT     DSECT ,
         IEFTIOT1 ,
         SPACE 3
*************************************************************
*        ACB = ACCESS METHOD CONTROL BLOCK (VSAM)           *
*        IFGACB = DSECT AND BASE                            *
*************************************************************
         SPACE 1
         IFGACB ,
         SPACE 3
*************************************************************
*        RPL = REQUEST PARAMETER LIST (VSAM)                *
*        IFGRPL = DSECT AND BASE                            *
*************************************************************
         SPACE 1
         IFGRPL ,
         SPACE 3
*************************************************************
*        STANDARD REGISTER NAMES                            *
*************************************************************
         SPACE 1
         #REGS R,                  STANDARD REGISTER NAMES             *
               (BASE1REG,R12),     PROGRAM BASE REGISTER               *
               (GSBREG,R10),       GSAM REQUEST BLOCK POINTER          *
               (FGGREG,R9),        GLOBAL DATA AREA POINTER            *
               (FGLREG,R8)         LOCAL DATA AREA POINTER
         SPACE 3
         PRINT ON,GEN,NODATA
FAKEGSAM CSECT ,
         TITLE 'OCMA MAP -- VSAM OPEN/CLOSE/TCLOSE MESSAGE AREA HEADER'
OCMA     DSECT ,
OCMAFLAG DS    B                   FLAG BYTE
OCMAFMAH EQU   B'10000000'         A COMPLETE MESSAGE HAEDER EXISTS
OCMAMAHL DS    HL2                 L'MESSAGE AREA HEADER
OCMARQT  DS    X                   REQUEST TYPE
OCMARO   EQU   1                   OPEN REQUEST
OCMARC   EQU   2                   CLOSE REQUEST
OCMARTC  EQU   3                   TCLOSE REQUEST
OCMADDN  DS    CL8                 DDNAME BEING OPENED/CLOSED
OCMAECNT DS    H                   ERROR COUNT
OCMAMCNT DS    H                   ERROR MESSAGE COUNT
OCMAMADR DS    A                   --> 1ST ERROR MESSAGE
OCMAHZ   DS    0X                  EO-OCMA HEADER
OCMAHLEN EQU   OCMAHZ-OCMA         L'OCMA HEADER
         TITLE 'GSB MAP -- GSAM REQUEST BLOCK'
         GSB   ,
         SPACE 3
*************************************************************
*        MODIFIED GSB FIELDS FOR FAKEGSAM SUPPORT           *
*************************************************************
         SPACE 1
FGSBOFLG EQU   GSBFLG1             OPEN FLAGS
FGSBOPEN EQU   B'01000000'         THE "GSAM" FILE HAS BEEN OPENED
FGSBFGG  EQU   GSBINDX,4           AFTER OPEN: --> FFG
         TITLE 'FGG MAP -- GLOBAL DATA AREA'
FGG      DSECT ,
         SPACE 3
*************************************************************
*        THE FOLLOWING AREA IS INITIALIZED AS A UNIT, SO IT *
*        MUST CONFORM TO THE SHAPE OF THE STATIC DATA AREA  *
*        NAMED "FGREL".                                     *
*************************************************************
         SPACE 1
FGGREL   DS    0F                  START OF AREA
FGGID    DC    CL8'FAKEGSAM'       AREA ID
         SPACE 1
FGGACB   ACB   AM=VSAM,                                                *
               BUFND=4,                                                *
               BUFNI=10,                                               *
               DDNAME=FILLEDIN,    FROM GSBFILE                        *
               MACRF=(DIR,SEQ,IN,OUT),                                 *
               MAREA=*-*,                                              *
               MLEN=L'FGLOCMA,                                         *
               PASSWD=*-*          POINTS TO GSBPASSW
         SPACE 1
FGGRPL   RPL   ACB=FGGACB,                                             *
               AM=VSAM,                                                *
               AREA=*-*,           FROM GSBBUFA                        *
               AREALEN=*-*,        FROM GSBBUFL                        *
               ARG=*-*,            POINTS TO GSBBUFX                   *
               ECB=*-*,            FROM GSBECB                         *
               MSGAREA=*-*,        FROM GSBMSGA                        *
               MSGLEN=L'GSBMSGX,                                       *
               OPTCD=(KEY,SYN,KGE,NWAITX,MVE),                         *
               RECLEN=*-*          FROM GSBRECL
         SPACE 1
FGGOPEN  OPEN  FGGACB,MF=L
         SPACE 1
FGGRELL  EQU   *-FGGREL            LENGTH OF AREA
         SPACE 3
*************************************************************
*        SHOWCB PLIST AND SINKS                             *
*************************************************************
         SPACE 1
SHOWPLST SHOWCB ACB=*-*,                                               *
               AREA=SHOWAREA,      GSB FEEDBACK FIELDS                 *
               LENGTH=SHOWALEN,    TOTAL FIELDS LENGTH                 *
               FIELDS=(KEYLEN,     KEY KENGTH                          *
               RKP,                RELATIVE KEY POSITION               *
               LRECL,              MAX RECORD LENGTH                   *
               CINV,               CONTROL INTERVAL LENGTH             *
               ENDRBA),            HIGH RBA                            *
               MF=L                LIST FORM
         SPACE 1
SHOWAREA DS    0F
FGGKEYLN DS    F                   KEYLEN
FGGKEYOF DS    F                   RKP
FGGMAXRL DS    F                   LRECL
FGGCISIZ DS    F                   CINV
SHGSBNFO EQU   FGGKEYLN,*-FGGKEYLN FIELDS COPIED TO THE GSB
FGGHIRBA DS    F                   ENDRBA
SHOWALEN EQU   *-SHOWAREA
         SPACE 3
*************************************************************
*        MISC DATA                                          *
*************************************************************
         SPACE 1
FGGMKYLN DS    H                   KEY LENGTH-1
         SPACE 1
FGGPVKEY DS    CL256               PREVIOUS KEY (FOR CONTROLLING
*                                  SEQUENTIAL GETS)
         #TEST SIZE=(L'FGGPVKEY,EQ,L'FGLKEY)
         SPACE 1
FGGFLAG  DS    B                   FLAG BYTE
FGGFPVKY EQU   B'10000000'         THE CONTENTS OF FGGPVKEY ARE VALID
         SPACE 3
*************************************************************
*        END OF GLOBAL DATA AREA                            *
*************************************************************
         SPACE 1
FGGEND   DS    0D
FGGLEN   EQU   FGGEND-FGG
         TITLE 'FGL MAP -- LOCAL DATA AREA'
*************************************************************
*        STANDARD REGISTER SAVE AREA                        *
*************************************************************
         SPACE 1
FGL      #DSA  ,
         SPACE 3
SAVEVSIO DS    4A                  FGGET
SAVESRCH DS    16A                 SRCH
         SPACE 3
FGLCALTP DS    AL1                 GSAM CALL TYPE
FGLCTREA EQU   0                   READ
FGLCTWRI EQU   1                   WRITE
FGLCTREW EQU   2                   REWRITE
FGLCTDEL EQU   3                   DELETE
FGLCTREL EQU   4                   RELEASE
FGLCTMON EQU   5                   MONITER
FGLCTMAI EQU   6                   MAINTAIN
FGLCTFIN EQU   7                   FINISH
         SPACE 3
FGLKEYAD DS    A                   --> KEY IN RECORD BUFFER
FGLKEY   DS    CL256               SEARCH KEY BUFFER
         SPACE 3
FGLOCMA  DS    CL512               VSAM OPEN/CLOSE/TCLOSE MSG AREA
         SPACE 3
*************************************************************
*        DATA FOR CALLING IDCAMS WITH A VERIFY REQUEST.     *
*************************************************************
         SPACE 1
AMSPLIST DS    4A                  PLIST
AMSIOLST DS    7A                  I/O LIST
         SPACE 1
VERIFY   DC    C' VERIFY FILE('
VERDDN   DS    CL(L'ACBDDNM),C') '
         SPACE 3
*************************************************************
*        END OF LOCAL DATA AREA                             *
*************************************************************
         SPACE 1
FGLEND   DS    0D
FGLLEN   EQU   FGLEND-FGL
         TITLE 'ERROR CODES CONTROL ENTRY MAP'
ERC      DSECT ,
ERCRETUR DS    FL1                 GSAM RETURN CODE
ERCREASO DS    FL1                 GSAM REASON CODE
         SPACE 3
*************************************************************
*        NOTE, THE FOLLOWING FIELDS DO NOT APPEAR IN ALL    *
*        ENTRIES. THEY MUST NOT BE REFERENCED BY THE CODE   *
*        AT 'FGRETURN'.                                     *
*************************************************************
         SPACE 1
ERCVRETU DS    FL1                 MAPPED FROM VSAM RETURN CODE
ERCVREAL DS    FL1                  AND VSAM REASON CODE RANGE (LOW)
ERCVREAH DS    FL1                  AND VSAM REASON CODE RANGE (HIGH)
ERCELEN  EQU   *-ERC               ENTRY LENGTH
         TITLE 'ENTRY PROCESSING'
*************************************************************
*        STANDARD REENTRANT ENTRY LINKAGE                   *
*************************************************************
         SPACE 1
FAKEGSAM #ENTER BASES=(BASE1REG),SAVTYPE=(RENT,FGLLEN)
         SPACE 1
         LR    FGLREG,R13          LOAD FGL POINTER
         USING FGL,FGLREG          DECLARE ITS BASE
         STC   R0,FGLCALTP         SAVE THE CALL TYPE
         SPACE 1
         LR    GSBREG,R1           COPY GSB POINTER
         USING GSB,GSBREG          DECLARE ITS BASE
         SR    FGGREG,FGGREG       SIGNAL NO FGG POINTER (YET)
         SPACE 3
*************************************************************
*        IF THIS IS THE FIRST CALL, THEN OBTAIN A GLOBAL    *
*        DATA AREA, INITIALIZE IT, AND OPEN AN ACB FOR THE  *
*        VSAM FILE TO BE PROCESSED.                         *
*************************************************************
         SPACE 1
FGRETRY  TM    FGSBOFLG,FGSBOPEN   IS THE ACB ALREADY OPEN?
         BNZ   FGOPENED            YES, NOT THE FIRST CALL
         SPACE 1
         LA    R0,FGGLEN           NO, GET L'FGG
         GETMAIN R,LV=(0)          ALLOCATE AN FGG
         LR    FGGREG,R1           COPY ITS POINTER
         USING FGG,FGGREG          DECLARE ITS BASE
         SPACE 1
         LR    R0,FGGREG           CLEAR -
         LA    R1,FGGLEN            THE -
         MVCL  R0,R14                FGG (R15=0 FROM GETMAIN)
         ST    FGGREG,FGSBFGG      SAVE THE FGG POINTER IN THE GSB
         SPACE 3
*************************************************************
*        INITIALIZE AN ACB FOR THE FILE TO BE PROCESSED.    *
*************************************************************
         SPACE 1
         MVC   FGGREL(FGGRELL),FGREL INITIALIZE ACB, ETC.
         #TEST SIZE=(FGGRELL,EQ,FGRELL)
         LA    R15,FGGACB          --> ACB
         USING IFGACB,R15          DCL ACB BASE
         ST    R15,RPLDACB-IFGRPL+FGGRPL LINK TO THE RPL
         MVC   ACBDDNM,GSBFILE     GET THE DDNAME
         TM    GSBPASSW,255-C' '   IS A PASSWORD PROVIDED?
         BZ    FGOPNPWD            NO, PROCEED
         LA    R0,GSBPASSW         YES, --> IT
         ST    R0,ACBPASSW         STORE INTO THE ACB
FGOPNPWD DS    0H
         SPACE 3
*************************************************************
*        IF THIS IS ACTUALLY A FINISH REQUEST, THEN DON'T   *
*        BOTHER TO ACTUALLY OPEN THEN VSAM FILE.            *
*************************************************************
         SPACE 1
         CLI   FGLCALTP,FGLCTFIN   "FINISH" REQUEST?
         BE    FGOPENED            YES, SKIP OPEN PROCESSING
         SPACE 3
*************************************************************
*        SCAN THE TIOT TO SEE IF THE DESIRED FILE IS        *
*        DEFINED.                                           *
*************************************************************
         SPACE 1
         L     R1,PSATOLD-PSA      --> MY TCB
         L     R1,TCBTIO-TCB(,R1)  --> MY TIOT
         LA    R0,TIOENTRY-TIOT    OFFSET TO 1ST DD ENTRY
         USING TIOENTRY,R1         DCL TIOT DD-ENTRY BASE
         SPACE 1
         BALR  R14,0               LOAD LOOP HEAD
         AR    R1,R0               --> NEXT DD ENTRY
         ICM   R0,1,TIOELNGH       GET ITS LENGTH; EO-TIOT?
         BZ    FGERRUDF            YES, OPEN WILL FAIL; ERROR RETURN
         CLC   ACBDDNM,TIOEDDNM    NO, DESIRED DDNAME FOUND?
         BNER  R14                 NOT YET; KEEP SCANNING
         DROP  R1                  YES, RELEASE TIOENTRY BASE
         SPACE 3
*************************************************************
*        THE DESIRED FILE IS DEFINED. ATTEMPT TO OPEN IT.   *
*************************************************************
         SPACE 1
         LA    R0,FGLOCMA          --> OCMA
         ST    R0,ACBMSGAR         LINK TO THE ACB
         OPEN  ((R15)),MF=(E,FGGOPEN) OPEN THE ACB
         DROP  R15                 RELEASE ACB BASE
         SPACE 1
         TM    ACBOFLGS-IFGACB+FGGACB,ACBOPEN OK?
         BNZ   FGOPENOK            YES, DONE HERE
         SPACE 3
*************************************************************
*        THE OPEN HAS FAILED. ASSUMING THAT THE FAILURE CAN *
*        BE CORRECTED, LINK TO IDCAMS WITH A "VERIFY"       *
*        REQUEST, AND THEN REATTEMPT THE OPEN REQUEST.      *
*************************************************************
         SPACE 1
         LA    R14,=H'0'           --> NULL PARMS
         SR    R15,R15             NO DDNAMES SUBSTITUTE LIST
         SR    R0,R0               NO PAGE NUMBER PARAMETER
         LA    R1,AMSIOLST         --> I/O ROUTINES CONTROL LIST
         STM   R14,R1,AMSPLIST     BUILD IDCAMS' PLIST
         OI    AMSPLIST+12,B'10000000' SET EO-PLIST SIGNAL
         SPACE 1
         LA    R14,2               GET I/O LIST ENTRY COUNT
         LA    R15,=CL10'DDSYSPRINT' 1ST ENTRY IS FOR SYSPRINT
         L     R0,=A(SYSPRINT)     --> SYSPRINT HANDLER
         SR    R1,R1               NO USER DATA
         LA    R2,=CL10'DDSYSIN'   2ND ENTRY IS FOR SYSIN
         L     R3,=A(SYSIN)        --> SYSIN HANDLER
         LA    R4,FGL              LOAD USER DATA (--> FGL)
         STM   R14,R4,AMSIOLST     BUILD I/O LIST FOR IDCAMS
         SPACE 1
         MVC   VERDDN,ACBDDNM-IFGACB+FGGACB MAKE DDNAME AVAIL TO
*                                  THE 'SYSIN' HANDLER ROUTINE THAT
*                                  IDCAMS WILL BE REQUIRED TO USE
         LA    R1,AMSPLIST         --> PLIST
         LINK  EP=IDCAMS           CALL IDCAMS
         SPACE 1
         OPEN  MF=(E,FGGOPEN)      REATTEMPT THE OPEN REQUEST
         TM    ACBOFLGS-IFGACB+FGGACB,ACBOPEN OPEN OK NOW?
         BNZ   FGOPENOK            YES, DONE HERE
         SPACE 3
*************************************************************
*        THE OPEN FAILURE PERSISTS. SETUP AN ERROR MESSAGE  *
*        FOR THE CALLER, AND THEN RETURN WITH AN ERROR      *
*        INDICATION.                                        *
*************************************************************
         SPACE 1
         LA    R1,GSBMSGX          --> POSSIBLE ERROR MSG RETURN BUFFER
         TM    GSBBUFA,B'10000000' CONTIGUOUS BUFFERS PRESENT?
         BNZ   FGOFGMSG            YES, PROCEED
         ICM   R1,15,GSBMSGA       NO, --> NON-CONTIG MSG BUF; EXIST?
         BZ    FGOFMSGZ            NO, FORGET RETURNING A MESSAGE
FGOFGMSG DS    0H                  YES, PROCEED
         SPACE 1
         MVI   0(R1),C' '          INSURE AT LEAST ONE BLANK IN MSG
         LA    R0,1(,R1)           COPY AND ADVANCE MSG SCANNER
         LA    R1,L'GSBMSGX-1      GET L'MSG SINK
         SPACE 1
         L     R15,=AL1(C' ',0,0,0) ASSUME NO SOURCE MSG
         ICM   R2,15,ACBMSGAR-IFGACB+FGGACB --> OCMA; EXIST?
         BZ    FGOFCMSG            NO, CLEAR GSBMSGA W/O A SOURCE MSG
         USING OCMA,R2             YES, DCL OCMA BASE
         TM    OCMAFLAG,OCMAFMAH   IS THE OCMA LONG ENOUGH TO HOLD AN
*                                  OMCA HEADER?
         BZ    FGOFCMSG            NO, NO SOURCE MSG
         ICM   R14,3,OCMAMCNT      YES, WAS AT LEAST ONE MSG BUFFERED?
         BZ    FGOFCMSG            NO, NO SOURCE MSG
         ICM   R14,15,OCMAMADR     YES, --> 1ST MSG; EXIST?
         BZ    FGOFCMSG            NO, NO SOURCE MSG
         ICM   R15,3,0(R14)        YES, GET ITS LENGTH+4
         LA    R14,4(,R14)         --> MSG DATA
         SH    R15,=H'4'           GET L'MSG
         CLM   R15,3,=X'7FFF'      WAS THE LENGTH VALID?
         BNH   FGOFCMSG            YES, PROCEED
         L     R15,=AL1(C' ',0,0,0) NO, JUST PREPAER TO CLEAR SINK
         DROP  R2                  RELEASE OCMA BASE
FGOFCMSG MVCL  R0,R14              COPY MSG OR JUST CLAER SINK
FGOFMSGZ B     FGERROPN            GO MAKE AN ERROR RETURN
         SPACE 3
*************************************************************
*        THE OPEN HAS SUCCEEDED.                            *
*************************************************************
         SPACE 1
FGOPENOK OI    FGSBOFLG,FGSBOPEN   REMEMBER THE GSB IS NOW OPEN
         XC    ACBMSGAR-IFGACB+FGGACB,ACBMSGAR-IFGACB+FGGACB CLEAR PTR
         SPACE 3
*************************************************************
*        EXTRACT SOME INFORMATION ABOUT THE VSAM FILE.      *
*************************************************************
         SPACE 1
         SHOWCB ACB=(S,FGGACB),                                        *
               AREA=(S,SHOWAREA),  GSB FEEDBACK FIELDS                 *
               LENGTH=SHOWALEN,    LENGTH THEREOF                      *
               FIELDS=(KEYLEN,     KEY KENGTH                          *
               RKP,                RELATIVE KEY POSITION               *
               LRECL,              MAX RECORD LENGTH                   *
               CINV,               CONTROL INTERVAL LENGTH             *
               ENDRBA),            HIGH RBA                            *
               MF=(G,SHOWPLST)
         SPACE 1
         L     R0,FGGKEYLN         GET KEY LENGTH
         CL    R0,=A(L'FGLKEY)     WITHIN LIMITS?
         #DIE  H                   NO, DESIGN ERROR
         BCTR  R0,0                YES, ADJUST FOR 'EX'
         STH   R0,FGGMKYLN         STORE
         SPACE 3
*************************************************************
*        USE THE EXTRACTED INFORMATION AND OTHER            *
*        INFORMATION TO FILL IN THE GSB FEEDBACK FIELDS     *
*************************************************************
         SPACE 1
         MVC   GSBFILKL(L'GSBFILKL+L'GSBFILKO+L'GSBFILRL+L'GSBFILCL),SH*
               GSBNFO              COPY SOME OF IT TO THE GSB
         #TEST SIZE=(L'GSBFILKL+L'GSBFILKO+L'GSBFILRL+L'GSBFILCL,EQ,L'S*
               HGSBNFO)
         SPACE 1
         MVI   GSBFILAC,GSBACC2    SIGNAL "UPDATE ACCESS PERMITTED"
         MVI   GSBFILFG,GSBRDWT    SIGNAL "FULL ACCESS PERMITTED"
         SPACE 3
*************************************************************
*        RESUME COMMON CODE. THE FILE IS OPEN. VALIDATE THE *
*        FGG.                                               *
*************************************************************
         SPACE 1
FGOPENED DS    0H
         DROP  FGGREG              RELEASE FGG BASE
         L     FGGREG,FGSBFGG      --> FGG
         USING FGG,FGGREG          DCL FGG BASE
         CLC   FGGID,FGID          IS THE FGG POINTER VALID?
         BNE   FGERRFGG            NO, ERROR EXIT
         SPACE 3
*************************************************************
*        LOCATE AND EXTRACT A COPY OF THE CURRENT           *
*        PROCESSING KEY.                                    *
*************************************************************
         SPACE 1
         L     R1,GSBBUFA          --> RECORD BUFFER (MAYBE)
         CH    R1,=H'-1'           BUFFER IN A SPECIAL PLACE?
         BNE   FGBUFA              NO, PROCEED
         LA    R1,GSBBUFX          YES, --> IT
FGBUFA   A     R1,FGGKEYOF         --> RECORD'S KEY AREA
         ST    R1,FGLKEYAD         SAVE FOR PROCESSING
         SPACE 1
         LH    R15,FGGMKYLN        GET KEY LENGTH-1
         MVC   FGLKEY(*-*),0(R1)   (EXECUTED)
         EX    R15,*-6             COPY KEY TO LOCAL BUFFER
         #TEST SIZE=(L'FGLKEY,LE,256)
         SPACE 3
*************************************************************
*        BRANCH ACCORDING TO THE GSAM CALL TYPE.            *
*************************************************************
         SPACE 1
         SR    R1,R1               CLEAR FOR INSERT
         IC    R1,FGLCALTP         GET THE CALL TYPE CODE
         SLL   R1,2                CNVRT TO FWORD OFFSET
         B     *+4(R1)             ENTER BRANCH VECTOR
         SPACE 1
         B     FGREAD              0 READ
         B     FGWRITE             1 WRITE
         B     FGREWRIT            2 REWRITE
         B     FGDELETE            3 DELETE
         B     FGRELEAS            4 RELEASE
         #DIE  C,15,'GSAM MONITER NOT SUPPORTED'
         #DIE  C,15,'GSAM MAINTAIN NOT SUPPORTED'
         B     FGFINISH            7 FINISH
         TITLE 'FGREAD -- GSAM READ REQUESTS'
*************************************************************
*        IF THIS IS A SEQUENTIAL GET, THEN INSURE THAT      *
*        VSAM'S NOTION OF THE CURRENT POSITION MATCHES THE  *
*        USER'S NOTION. IF NOT, THEN USE THE USER'S NOTION. *
*************************************************************
         SPACE 1
FGREAD   TM    GSBFLGS,GSBDIR      DIRECT REQUEST?
         BNZ   FGRSEQOK            YES, IT'S OK; SKIP THIS JUNK
         TM    FGGFLAG,FGGFPVKY    NO, SEQUENTIAL; IS MY RECORD OF THE
*                                  PREVIOUSLY READ KEY VALID?
         BZ    FGRPOSIT            PROBABLY NOT, GO ESTABLISH POSITION
*                                  USING THE USER'S KEY
         CLC   FGGPVKEY,FGLKEY     YES, IS THE USER PLAYING MUSICAL
*                                  POSITIONING ON ME?
         BNE   FGRPOSIT            YES, GO ESTABLISH POSITION USING THE
*                                  USER'S KEY
FGRSEQOK DS    0H                  NO, PROCEED
         SPACE 3
*************************************************************
*        ATTEMPT "JOE GET" AND SEE WHAT HAPPENS             *
*************************************************************
         SPACE 1
         SR    R15,R15             NO SPECIAL OPTCD OVERRIDES
         BAL   R14,VSAMGET         ATTEMPT THE GET
         CLM   R15,2,=AL1(0)       RETURN=0?
         BNE   FGRCKEOD            NO, GO CHECK FOR EOD
         SPACE 1
         TM    GSBFLGS,GSBBACK+GSBDIR YES, BACKWARDS/DIRECT?
         BNO   FGROKCHK            NO, GO SAVE MY NEW POSITION, IF ANY
         SPACE 3
*************************************************************
*        A "NORMAL RETURN" HAS BEEN RECEIVED FOR A          *
*        BACKWARDS/DIRECT READ REQUEST. SUCH A GSAM REQUEST *
*        IMPLIES A "KLE" SEARCH. IF I GOT A "KEQ" RESULT,   *
*        THEN FINE. IF NOT, THEN I GOT A "KGT" RESULT WHICH *
*        I NOW HAVE TO CONVERT TO A "KLT" RESULT.           *
*************************************************************
         SPACE 1
         LH    R15,FGGMKYLN        GET KEY LENGTH-1
         L     R1,FGLKEYAD         --> KEY JUST READ
         CLC   FGLKEY(*-*),0(R1)   (EXECUTED)
         EX    R15,*-6             "KEQ" RESULT?
         BE    FGROKCHK            YES, GO SAVE MY NEW POSITION, IF ANY
*        FALL THROUGH              NO, RESULT WAS "KGT". I MUST NOW
*                                  CONVERT THAT TO A "KLT" RESULT.
         SPACE 3
*************************************************************
*        FORCED SEQUENTIAL READ (FORWARDS OR BACKWARDS)     *
*************************************************************
         SPACE 1
FGRNPSEQ L     R15,=AL1(RPLDIR,RPLSEQ,0,0) FORCE "SEQ"
         BAL   R14,VSAMGET         GET NEXT/PRIOR SEQUENTIAL RECORD
         B     FGROKCHK            GO SAVE MY NEW POSITION, IF ANY
         SPACE 3
*************************************************************
*        "EOD" HANDLING                                     *
*************************************************************
         SPACE 1
FGRCKEOD CLM   R15,3,=AL1(8,4)     VSAM EOD ERROR?
         BNE   FGRCKPOS            NO, SKIP
         TM    GSBFLGS,GSBBACK+GSBDIR YES, BACKWARDS/DIRECT REQUEST?
         BNO   FGROKCHK            NO, GO SAVE MY NEW POSITION, IF ANY
         SPACE 3
*************************************************************
*        VSAM EOD HAS OCCURED DURING A GSAM                 *
*        BACKWARDS/DIRECT REQUEST. THIS MEANS THAT THE USER *
*        WANTS THE LAST RECORD IN THE FILE.                 *
*************************************************************
         SPACE 1
FGRLASTR L     R15,=AL1(RPLSEQ,RPLDIR,0,RPLBWD+RPLLRD) FORCED OPTCDS
         BAL   R14,VSAMGET         VSAM GET
         B     FGROKCHK            GO SAVE MY NEW POSITION, IF ANY
         SPACE 3
*************************************************************
*        "POSITIONING ERROR" HANDLING                       *
*************************************************************
         SPACE 1
FGRCKPOS CLM   R15,3,=AL1(8,88)    VSAM POSITIONING ERROR?
         BNE   FGROKCHK            NO, GO SAVE MY NEW POSITION, IF ANY
         SPACE 1
FGRPOSIT L     R15,=AL1(RPLSEQ,RPLDIR,0,0) YES, FORCE DIRECT GET
         BAL   R14,VSAMGET         VSAM GET
         CLM   R15,2,=AL1(0)       "AOK"?
         BE    FGRCKPO2            PROBABLY, GO CHECK FOR FURTHER
         CLM   R15,3,=AL1(8,4)     NO, "EOD"?
         BNE   FGROKCHK            NO, GO SAVE MY NEW POSITION, IF ANY
         TM    GSBFLGS,GSBBACK     YES, GSAM BACKWARDS REQUEST?
         BNZ   FGRLASTR            YES, GO GET FILE'S LAST RECORD
         B     FGROKCHK            NO, GO SAVE MY NEW POSITION, IF ANY
         SPACE 3
*************************************************************
*        A DIRECT GET (AFTER A POSITIONING FAILURE ON A     *
*        SEQUENTIAL GET) HAS SUCCEEDED. IF THIS IS A GSAM   *
*        FORWARDS REQUEST, AND IF THE VSAM-GET RESULT WAS   *
*        "KGT", THEN FINE. OTHERWISE, A VSAM SEQUENTIAL GET *
*        (FORWARDS OR BACKWARDS) IS NOW NEEDED TO GET THE   *
*        CORRECT RECORD.                                    *
*************************************************************
         SPACE 1
FGRCKPO2 LH    R15,FGGMKYLN        GET KEY LENGTH-1
         L     R1,FGLKEYAD         --> KEY JUST READ
         CLC   FGLKEY(*-*),0(R1)   (EXECUTED)
         EX    R15,*-6             "KEQ" RESULT?
         BE    FGRNPSEQ            YES, NOW PERFORAM A SEQ-GET
         TM    GSBFLGS,GSBBACK     NO, RESULT WAS "KGT"; GSAM-BACK?
         BNZ   FGRNPSEQ            YES, CONVERT TO "KLT" RESULT
         SPACE 3
*************************************************************
*        THE GET REQUEST HAS EITHER COMPLETED OR FAILED. IF *
*        IT HAS COMPLETED SUCCESSFULLY, THEN SAVE THE       *
*        CURRENT POSITIONING INFORMATION.                   *
*************************************************************
         SPACE 1
FGROKCHK NI    FGGFLAG,255-FGGFPVKY ASSUME FAILURE
         CLI   RPLRTNCD-IFGRPL+FGGRPL,0 RIGHT?
         BNE   FGRCODES            YES, EXIT TO THE CALLER
         MVC   FGGPVKEY,FGLKEY     YES, SAVE THIS NEW KEY
         OI    FGGFLAG,FGGFPVKY    REMEMVER VALID POSITIONING INFO
         B     FGRCODES            EXIT TO THE CALLER
         TITLE 'FGWRITE -- GSAM WRITE REQUESTS'
*************************************************************
*        INSERT A NEW RECORD INTO THE FILE                  *
*************************************************************
         SPACE 1
FGWRITE  TM    RPLOPT2-IFGRPL+FGGRPL,RPLUPD DO I OWN A RECORD?
         BZ    FGWNOWN             NO, PROCEED
         SR    R15,R15             YES, SIGNAL "NO OPTCDS OVERRIDES"
         BAL   R14,VSAMENDR        RELEASE THE OWNED RECORD
FGWNOWN  DS    0H
         SPACE 1
         L     R15,=AL1(0,0,RPLLRD+RPLUPD,RPLNSP)
         BAL   R14,VSAMPUT         WRITE THE NEW RECORD
         B     FGRCODES            EXIT TO CALLER
         TITLE 'FGREWRIT -- GSAM REWRITE REQUESTS'
*************************************************************
*        IF THE CURRENT RECORD IS OWNED FOR UPDATE, THEN    *
*        REWRITE IT.                                        *
*************************************************************
         SPACE 1
FGREWRIT TM    RPLOPT2-IFGRPL+FGGRPL,RPLUPD DO I OWN THE CURRENT RCD?
         BZ    FGERRPOS            NO, ERROR EXIT
         SPACE 1
         SR    R15,R15             YES, SET "DO NOT MUCK -
         BCTR  R15,0                WITH THE OPTCDS" SIGNAL
         BAL   R14,VSAMPUT         REWRITE THE CURRENT RECORD
         B     FGRCODES            EXIT TO CALLER
         TITLE 'FGDELETE -- GSAM DELETE REQUESTS'
*************************************************************
*        IF THE CURRENT RECORD IS OWNED, THEN DELETE IT.    *
*************************************************************
         SPACE 1
FGDELETE TM    RPLOPT2-IFGRPL+FGGRPL,RPLUPD DO I OWN THE CRNT RCD?
         BZ    FGERRPOS            NO, ERROR EXIT
         SPACE 1
         SR    R15,R15             YES, SET "DON'T MUCK WITH -
         BCTR  R15,0                THE OPTCDS" SIGNAL
         BAL   R14,VSAMERAS        DELETE THE CURRENT RECORD
         B     FGRCODES            EXIT TO CALLER
         TITLE 'FGRELEAS -- GSAM RELEASE REQUESTS'
*************************************************************
*        IF I OWN THE CURRENT RECORD, THEN RELEASE IT       *
*************************************************************
         SPACE 1
FGRELEAS TM    RPLOPT2-IFGRPL+FGGRPL,RPLUPD DO I OWN THE CURRENT RCD?
         BZ    FGERRPOS            NO, ERROR EXIT
         SR    R15,R15             YES, SIGNAL "NO OPTCDS OVERRIDES"
         BAL   R14,VSAMENDR        RELEASE THE CURRENT RECORD
         B     FGRCODES            EXIT TO CALLER
         TITLE 'FGFINISH -- GSAM FINISH REQUESTS'
*************************************************************
*        CLOSE THE VSAM FILE AND RETURN TO THE CALLER.      *
*************************************************************
         SPACE 1
FGFINISH NI    FGSBOFLG,255-FGSBOPEN CLEAR GSB'S "OPEN" SIGNAL
         TM    ACBOFLGS-IFGACB+FGGACB,ACBOPEN IS THE FILE OPEN?
         BZ    FGFINRET            NO, DONE HERE
         CLOSE MF=(E,FGGOPEN)      YES, CLOSE THE VSAM FILE
         B     FGFINRET            EXIT TO CALLER
         TITLE 'ERROR AND NORMAL RETURNS TO CALLER'
*************************************************************
*        MAP THE VSAM RETURN/REASON CODES INTO GSAM CODES.  *
*************************************************************
         SPACE 1
FGRCODES LA    R15,ERCMAP          --> CODES MAP
         LA    R0,ERCELEN          GET L'MAP ENTRY
         LA    R1,ERCMAPZ          --> EO-MAP
         BAL   R14,SRCH            SEARCH THE MAP; VSAM CODES FOUND?
         LR    R2,R1               (COPY THE POSSIBLE ERC PTR)
         BE    FGRETURN            YES, TO RETURN TO FAKEGSAM'S CALLER
         #DIE  'UNANTICIPATED VSAM RETURN/REASON CODE' NO, LOGIC ERROR
         SPACE 3
*************************************************************
*        DISTINGUISH VARIOUS RETURNS                        *
*************************************************************
         SPACE 1
FGFINRET BAL   R2,FGRETURN         NORMAL FINISH PROCESSING RETURN
         DC    AL1(0,0)
         SPACE 1
FGERRUDF BAL   R2,FGRETURN         UNDEFINED FILE
         DC    AL1(GSAMEFIL,0)
         SPACE 1
FGERROPN BAL   R2,FGRETURN         OPEN FAILURE
         DC    AL1(GSAMEFIL,-1)
         SPACE 1
FGERRPOS BAL   R2,FGRETURN         UPDATE SEQUENCE ERROR
         DC    AL1(GSAMEPOS,8)
         SPACE 1
FGERRFGG BAL   R2,FGRETURN         BAD FGG ERROR
         DC    AL1(GSAMEPRM,16)
         SPACE 3
*************************************************************
*        DEVELOP THE VARIOUS GSAM RETURN AND REASON CODES.  *
*************************************************************
         SPACE 1
         USING ERC,R2              DCL ERC BASE
FGRETURN LH    R15,=H'-1'          ASSUME VSAM FUNCTION CODE N/A
         CLI   ERCRETUR,GSAMEIO    VSAM PHYSICAL I/O ERROR?
         BNE   FGFUNCTI            NO, ASSUMPTION CORRECT
         SR    R15,R15             YES, CLEAR FOR INSERT
         IC    R15,RPLCMPON-IFGRPL+FGGRPL GET VSAM FUNCTION CODE
FGFUNCTI ST    R15,GSBVSFN         STORE INTO GSB
         SPACE 1
         SR    R15,R15             CLEAR FOR INSERT
         IC    R15,ERCREASO        GET GSAM REASON CODE
         CLI   ERCREASO,X'100'-1   USE VSAM REASON CODE?
         BNE   FGREASON            NO, PROCEED
         IC    R15,ACBERFLG-IFGACB+FGGACB YES, ASSUME OPEN/CLOSE ERROR
         CLI   ERCRETUR,GSAMEFIL   RIGHT?
         BE    FGREASON            YES, PROCEED
         IC    R15,RPLERRCD-IFGRPL+FGGRPL NO, GET VSAM REASON CODE
FGREASON ST    R15,GSBVSAM         STORE INTO GSB
         SPACE 3
*************************************************************
*        IF THE VSAM FILE IS NOT OPEN, THEN RELEASE THE FGG *
*        AND RESTORE THE GSB.                               *
*************************************************************
         SPACE 1
         TM    ACBOFLGS-IFGACB+FGGACB,ACBOPEN IS THE FILE OPEN?
         BNZ   KEEPFGG             YES, SKIP
         NI    FGSBOFLG,255-FGSBOPEN NO, INSURE GSB "OPEN-FILE" SIGNAL
*                                  IS OFF
         LA    R0,FGGLEN           GET L'FGG
         FREEMAIN R,LV=(0),A=(FGGREG) RELEASE THE FGG
         PUSH  USING               SAVE STATUS
         DROP  FGGREG              RELEASE THE FGG BASE
         SR    FGGREG,FGGREG       CLEAR THE FGG PTR
         ST    FGGREG,FGSBFGG      CLEAR THE GSB LINK TO THE FGG
KEEPFGG  DS    0H
         SPACE 3
         MVI   GSBECB,X'7F'        INSURE THAT THE GSB ECB IS POSTED
         SPACE 3
*************************************************************
*        EXIT TO MY CALLER                                  *
*************************************************************
         SPACE 1
         IC    R15,ERCRETUR        GET GSAM RETURN CODE
         #EXIT ((R14,R12)),RC=(R15) RETURN TO CALLER
         POP   USING               RESTORE STATUS (FGG BASE)
         DROP  R2                  RELEASE ERC BASE
         TITLE 'FGVSAMIO -- VSAM I/O ROUTINE'
*************************************************************
*        DISTINGUISH VARIOUS CALL TYPES                     *
*************************************************************
         SPACE 1
VSAMGET  ICM   R14,8,=AL1(VSIOVGET-VSIOVECT) LOAD "GET" SIGNAL
         B     FGVSAMIO            PROCEED
         SPACE 1
VSAMPUT  ICM   R14,8,=AL1(VSIOVPUT-VSIOVECT) LOAD "PUT" SIGNAL
         B     FGVSAMIO            PROCEED
         SPACE 1
VSAMERAS ICM   R14,8,=AL1(VSIOVERA-VSIOVECT) LOAD "ERASE" SIGNAL
         B     FGVSAMIO            PROCEED
         SPACE 1
VSAMENDR ICM   R14,8,=AL1(VSIOVEND-VSIOVECT) LOAD "ENDREQ" SIGNAL
         B     FGVSAMIO            PROCEED
         SPACE 3
*************************************************************
*        COMMON ENTRY POINT                                 *
*************************************************************
         SPACE 1
FGVSAMIO STM   R14,R1,SAVEVSIO     SAVE REGISTERS
         LA    R1,FGGRPL           --> RPL
         USING IFGRPL,R1           DCL RPL BASE
         SPACE 3
*************************************************************
*        SET RPL OPTCD FLAGS ASSUMING ALL RELEVENT GSB      *
*        FLAGS ARE OFF. THEN EXAMINE THE GSB FLAGS TO SEE   *
*        HOW THE RPL OPTCD FLAGS SHOULD REALLY BE SET.      *
*************************************************************
         SPACE 1
         CL    R15,=F'-1'          SHOULD I MUCK WITH THE OPTCDS?
         BE    VSIOPTOK            NO, SKIP
         SPACE 1
         MVI   RPLOPT1,RPLSEQ+RPLKGE+RPLECBSW YES, LOAD OPTCD1
         MVI   RPLOPT2,RPLNSP+RPLKEY LOAD OPTCD2
         SPACE 1
         TM    GSBFLGS,GSBUPD      UPDATE?
         BZ    FGETNUPD            NO, SKIP
         XI    RPLOPT2,RPLNSP+RPLUPD YES, FLIP FLAGS
FGETNUPD DS    0H
         SPACE 1
         TM    GSBFLGS,GSBDIR      DIRECT?
         BZ    FGETNDIR            NO, SKIP
         XI    RPLOPT1,RPLSEQ+RPLDIR YES, FLIP FLAGS
         B     FGETNBWD            SKIP NEXT
FGETNDIR DS    0H
         SPACE 1
         TM    GSBFLGS,GSBBACK     BACKWARDS?
         BZ    FGETNBWD            NO, SKIP
         OI    RPLOPT2,RPLBWD      YES, FLIP FLAG
FGETNBWD DS    0H
         SPACE 3
*************************************************************
*        PROPAGATE OTHER INFORMATION FROM THE GSB TO THE    *
*        RPL.                                               *
*************************************************************
         SPACE 1
         L     R15,GSBBUFL         GET L'BUFFER
         ST    R15,RPLBUFL
         SPACE 1
         ICM   R15,15,GSBBUFA      --> BUFFER; SPECIAL LOCATION?
         BNM   FGETBUFA            NO, PROCEED
         LA    R15,GSBBUFX         YES, --> IT
FGETBUFA ST    R15,RPLAREA
         SPACE 1
         L     R15,GSBRECL         GET L'RECORD
         ST    R15,RPLRLEN
         SPACE 1
         LA    R0,L'GSBMSGX        ASSUME MSG AREA; GET MANDATORY LEN
         LA    R15,GSBMSGX         ASSUME SPECIALLY LOCATED
         TM    GSBBUFA,B'10000000' SPECIALLY LOCATED BUFFERS?
         BNZ   FGETMSGA            YES, PROCEED
         ICM   R15,15,GSBMSGA      NO, LOAD MSG AREA PTR; EXIST?
         BNZ   FGETMSGA            YES, PROCEED
         SR    R0,R0               GET SET L'MSG=0 (==> NO MSG AREA)
FGETMSGA ST    R15,RPLERMSA
         STH   R0,RPLEMLEN
         SPACE 1
         LA    R15,GSBECB          --> ECB
         ST    R15,RPLECB
         SPACE 1
         LA    R15,FGLKEY          --> POSSIBLE SEARCH KEY
         ST    R15,RPLARG          STORE
         SPACE 3
*************************************************************
*        NOW SET RPL OPTCD BITS ACCORDING TO THE MANDATORY  *
*        REQUIREMENTS OF THIS SPECIFIC CALL.                *
*************************************************************
         SPACE 1
         L     R15,SAVEVSIO+4      RESTORE REQUIRED SETTINGS CONTROL
         X     R15,=X'FF00FF00'    FLIP THE ANDED BITS
         OI    RPLOPT2,*-*         (EXECUTED)
         EX    R15,*-4             TURN ON OPTCD2 BITS
         SPACE 1
         SRL   R15,8               SHIFT THE SOURCE
         B     *+8                 SKIP EXECUTED STMT
         NI    RPLOPT2,*-*         (EXECUTED)
         EX    R15,*-4             TURN OFF OPTCD2 BITS
         SPACE 1
         SRL   R15,8               SHIFT THE SOURCE
         OI    RPLOPT1,*-*         (EXECUTED)
         EX    R15,*-4             TURN ON OPTCD1 BITS
         SPACE 1
         SRL   R15,8               SHIFT THE SOURCE
         B     *+8                 SKIP EXECUTED STMT
         NI    RPLOPT1,*-*         (EXECUTED)
         EX    R15,*-4             TURN OFF OPTCD1 BITS
         SPACE 1
VSIOPTOK DS    0H
         SPACE 3
*************************************************************
*        ISSUE THE VSAM I/O REQUEST                         *
*************************************************************
         SPACE 1
         DROP  R1                  RELEASE RPL BASE
         SR    R15,R15             CLEAR FOR INSERT
         IC    R15,SAVEVSIO        LOAD CALL TYPE
         B     VSIOVECT(R15)       ENTRY BRANCH VECTOR
         SPACE 1
VSIOVECT DS    0H
VSIOVGET B     VSIOGET
VSIOVPUT B     VSIOPUT
VSIOVERA B     VSIOERAS
VSIOVEND B     VSIOENDR
         SPACE 1
VSIOGET  GET   RPL=(1)             VSAM GET
         MVC   GSBRECL,RPLRLEN-IFGRPL+FGGRPL FEEDBACK THE LRECL
         MVC   GSBRBA,RPLDDDD-IFGRPL+FGGRPL RETURN CRNT RBA (IF ANY)
         LTR   R15,R15             GET OK?
         BZ    VSIOAFTR            YES, PROCEED
         NI    RPLOPT2-IFGRPL+FGGRPL,255-RPLUPD NO, CLEAR OWNERSHIP
         NI    FGGFLAG,255-FGGFPVKY SEQ-GET POSITION INFO NOW BAD
         B     VSIOAFTR            RESUME COMMON CODE
         SPACE 1
VSIOPUT  PUT   RPL=(1)             VSAM PUT
         MVC   GSBRBA,RPLDDDD-IFGRPL+FGGRPL RETURN CRNT RBA (IF ANY)
         NI    RPLOPT2-IFGRPL+FGGRPL,255-RPLUPD DON'T OWN RCD NOW
         NI    FGGFLAG,255-FGGFPVKY SEQ-GET POSITION INFO NOW BAD
         LTR   R15,R15             I/O OK?
         BNZ   VSIOAFTR            NO, DONE HERE
         LA    R1,FGGRPL           YES, INSURE RPL PTR RESTORED
         B     VSIOENDR            GO FLUSH BUFFER
         SPACE 1
VSIOERAS ERASE RPL=(1)             VSAM ERASE
         MVC   GSBRBA,RPLDDDD-IFGRPL+FGGRPL RETURN CRNT RBA (IF ANY)
         NI    RPLOPT2-IFGRPL+FGGRPL,255-RPLUPD DON'T OWN RCD NOW
         NI    FGGFLAG,255-FGGFPVKY SEQ-GET POSITION INFO NOW BAD
         LTR   R15,R15             I/O OK?
         BNZ   VSIOAFTR            NO, DONE HERE
         LA    R1,FGGRPL           YES, INSURE RPL PTR RESTORED
         SPACE 1
VSIOENDR ENDREQ RPL=(1)            VSAM ENDREQ
         NI    RPLOPT2-IFGRPL+FGGRPL,255-RPLUPD DON'T OWN RCD NOW
         NI    FGGFLAG,255-FGGFPVKY SEQ-GET POSITION INFO NOW BAD
VSIOAFTR DS    0H
         SPACE 3
*************************************************************
*        HANDLE ERRORS THAT RESULT FROM REQUESTS THAT ARE   *
*        INVALID DURING THE CREATION OF VSAM DATASETS. IF   *
*        THE FILE IS TRUELY STILL EMPTY, THEN PASS THE      *
*        ERROR CONDITION BACK TO THE CALLER. IF THE FILE IS *
*        NOT EMPTY, THEN CLOSE IT AND THEN RE-OPEN IT AND   *
*        THEN RETRY THE REQUEST.                            *
*************************************************************
         SPACE 1
         CLI   RPLRTNCD-IFGRPL+FGGRPL,8 DATA ERROR?
         BNE   VSIONCRE            NO, FORGET IT
         CLI   RPLERRCD-IFGRPL+FGGRPL,116 YES, INVALID REQUEST DURING
*                                  FILE CREATION?
         BNE   VSIONCRE            NO, SKIP
         SHOWCB MF=(E,SHOWPLST)    YES, EXTRACT THE HIGH RBA
         SPACE 1
         ICM   R15,15,FGGHIRBA     IS THE FILE STILL EMPTY?
         BZ    VSIONCRE            YES, JUST RETURN THE ERROR TO CALLER
         SPACE 1
         CLOSE MF=(E,FGGOPEN)      NO, CLOSE THE FILE
         NI    FGSBOFLG,255-FGSBOPEN RESET THE GSB
         SPACE 1
         LA    R0,FGGLEN           GET L'FGG
         FREEMAIN R,LV=(0),A=(FGGREG) FREE THE FGG
         SR    FGGREG,FGGREG       CLEAR FGG POINTER
         ST    FGGREG,FGSBFGG      CLEAR FGG POINTER
         B     FGRETRY             GO RE-OPEN AND RETRY
VSIONCRE DS    0H
         SPACE 3
*************************************************************
*        LOAD RETURN CODES AND RETURN TO CALLER             *
*************************************************************
         SPACE 1
         LM    R14,R1,SAVEVSIO     RESTORE REGISTERS
         SR    R15,R15             CLEAR FOR INSERTS
         ICM   R15,2,RPLRTNCD-IFGRPL+FGGRPL GET VSAM RETURN CODE
         IC    R15,RPLERRCD-IFGRPL+FGGRPL GET REASON CODE
         BR    R14                 RETURN TO CALLER
         TITLE 'SRCH -- SORTED LIST SEARCH ROUTINE'
SRCH     #SEARCH SVID=SAVESRCH,CMPRID=COMPARE
         TITLE 'COMPARE -- ERROR CODES MAP SEARCH COMPARE ROUTINE'
         USING ERC,R15             DCL ERC BASE
COMPARE  CLC   RPLRTNCD-IFGRPL+FGGRPL,ERCVRETU RIGHT RETURN CODE?
         BNER  R14                 NO, RETURN TO SEARCH
         CLC   RPLERRCD-IFGRPL+FGGRPL,ERCVREAL YES, REASON CODE WITHIN
*                                  LOW LIMIT?
         BNHR  R14                 NO, OR JUST BARELY; RETURN TO SEARCH
         CLC   RPLERRCD-IFGRPL+FGGRPL,ERCVREAH YES, WITH HI LIMIT TOO?
         BNLR  R14                 NO, OR JUST BARELY; RETURN TO SEARCH
         CR    R14,R14             YES, SET "FOUND" SIGNAL
         BR    R14                 RETURN TO SEARCH
         DROP  R15                 RELEASE ERC BASE
         TITLE 'STATIC DATA AREA'
*************************************************************
*        THE FOLLOWING DATA IS USED TO INITIALIZE A SECTION *
*        OF THE FGG AS A UNIT, SO IT MUST CONFORM TO THE    *
*        SHAPE OF "FGGREL" IN THE FGG.                      *
*************************************************************
         SPACE 1
FGREL    DS    0F                  START OF AREA
FGID     DC    CL8'FAKEGSAM'
         SPACE 1
FGACB    ACB   AM=VSAM,                                                *
               BUFND=4,                                                *
               BUFNI=10,                                               *
               DDNAME=FILLEDIN,    FROM GSBFILE                        *
               MACRF=(DIR,SEQ,IN,OUT),                                 *
               MAREA=*-*,                                              *
               MLEN=L'FGLOCMA,                                         *
               PASSWD=*-*          POINTS TO GSBPASSW
         SPACE 1
FGRPL    RPL   ACB=*-*,                                                *
               AM=VSAM,                                                *
               AREA=*-*,           FROM GSBBUFA                        *
               AREALEN=*-*,        FROM GSBBUFL                        *
               ARG=*-*,            POINTS TO GSBBUFX                   *
               ECB=*-*,            FROM GSBECB                         *
               MSGAREA=*-*,        FROM GSBMSGA                        *
               MSGLEN=L'GSBMSGX,                                       *
               OPTCD=(KEY,SYN,KGE,NWAITX,MVE),                         *
               RECLEN=*-*          FROM GSBRECL
         SPACE 1
FGOPEN   OPEN  *-*,MF=L
         SPACE 1
FGRELL   EQU   *-FGREL             LENGTH OF AREA
         EJECT ,
*************************************************************
*        VSAM TO GSAM ERROR CODES MAP                       *
*************************************************************
         SPACE 1
ERCMAP   DS    0X
         DC    AL1(0,-1,0,0,X'FF')
         DC    AL1(GSAMEKEY,-1,8,4,8)
         DC    AL1(GSAMEKEY,-1,8,16,16)
         DC    AL1(GSAMEDS,-1,8,24,32)
         DC    AL1(GSAMEKEY,-1,8,36,36)
         DC    AL1(GSAMECOR,36,8,40,40)
         DC    AL1(GSAMEREC,-1,8,44,44)
         DC    AL1(GSAMEREC,-1,8,100,100)
         DC    AL1(GSAMEREC,-1,8,108,108)
         DC    AL1(GSAMEDS,-1,8,116,116)
         DC    AL1(GSAMEREC,-1,8,140,140)
         DC    AL1(GSAMEDS,-1,8,144,144)
         DC    AL1(GSAMEKEY,-1,8,148,148)
         DC    AL1(GSAMECOR,36,8,152,152)
         DC    AL1(GSAMEKEY,-1,8,192,192)
         DC    AL1(GSAMEIO,-1,12,0,X'FF')
         DC    AL1(GSAMEBUG,0,X'FF',X'FF',X'FF')
ERCMAPZ  DS    0X                  END OF MAP
         SPACE 3
         LTORG ,
         TITLE 'SYSPRINT -- DUMMY SYSPRINT I/O ROUTINE FOR IDCAMS'
SYSPRINT SR    R15,R15             SET RC=0
         BR    R14                 NOP BACK TO IDCAMS
         TITLE 'SYSIN -- I/O ROUTINE FOR IDCAMS'
*************************************************************
*                                                           *
*        SYSIN -- THIS ROUTINE HANDLES SYSIN I/O FOR        *
*        IDCAMS. ESSENTIALLY ALL IT DOES IS RETURN A VERIFY *
*        COMMAND TO IDCAMS. THIS ROUTINE IS USED ONLY WHEN  *
*        AN OPEN ATTEMPT FOR A GIVEN "GSAM" FILE HAS        *
*        FAILED.                                            *
*                                                           *
*************************************************************
         SPACE 1
SYSIN    STM   R14,R12,12(R13)     SAVE ALL REGISTERS
         LR    R12,R15             LOAD A LOCAL BASE
         USING SYSIN,R12           DECLARE IT
         SPACE 1
         L     R2,4(,R1)           --> CALL FLAGS
         CLI   0(R2),X'0C'         IS THIS A PUT REQUEST?
         #DIE  E                   YES, LOGIC ERROR
         CLI   0(R2),X'08'         NO, IS THIS A GET REQUEST?
         BNE   SYSIN0              NO, OPEN/CLOSE; RETURN AOK
         SPACE 1
         L     R11,0(,R1)          YES, --> THE FGL
         USING FGL,R11             DCL THE FGL BASE
         CLI   VERIFY,0            IS THIS THE FIRST GET REQUEST?
         BNE   SYSIN4              NO, RETURN SIGNALLING "NO MORE
*                                  GETS, PLEASE"
         MVC   VERIFY,=C' VERIFY FILE(' YES, BUILD VERIFY COMMAND
         #TEST SIZE=(L'VERIFY,EQ,13)
         LA    R15,VERDDN+L'VERDDN  --> PAST PROBLEM DDNAME
         BALR  R14,0               LOAD LOOP HEAD
         BCTR  R15,0               BACK UP
         TM    0(R15),255-C' '     TRAILING BLANK?
         BER   R14                 YES, CONTINUE THE BACKSCAN
         MVC   1(2,R15),=C') '     NO, APPEND TRAILER
         LA    R14,VERIFY-3        --> SO COMMAND
         SR    R15,R14             GET L'COMMAND
         LA    R14,VERIFY          --> TRUE SO-COMMAND
         L     R1,8(,R1)           --> RETURN DATA AREA
         STM   R14,R15,0(R1)       RETURN COMMAND DESCRIPTOR TO IDCAMS
         B     SYSIN0              RETURN AOK
         SPACE 3
SYSIN4   BAL   R0,SYSINRET         RETURN RC=4
SYSIN0   BAL   R0,SYSINRET         RETURN RC=0
SYSINRET LA    R15,SYSINRET        LOAD VECTOR BASE
         SR    R15,R0              GET RC
         LA    R15,0(,R15)         PURIFY
         SPACE 1
         L     R14,12(,R13)        RESTORE REGISTER
         LM    R0,R12,20(R13)      RESTORE REGISTERS
         DROP  R11                 RELEASE FGL BASE
         DROP  R12                 RELEASE LOCAL BASE
         BR    R14                 RETURN TO IDCAMS
         SPACE 3
         LTORG ,
         SPACE 3
         END   ,
