*
***********************************************************************
*                                                                     *
* XRXVARS - Author: Stephen E. Bacher 18 September 1989               *
*                                                                     *
***********************************************************************
*
***********************************************************************
*
*  This routine returns the names of all current REXX variables and
*  queues them on the REXX data stack.  The names are selected based
*  on a prefix given in the parameter field.
*
*  Particularly useful if a stem (varname.) is given as the argument.
*
*  Invocation:  CALL 'wherever.load(XRXVARS)' 'variable-prefix'
*
***********************************************************************
         PRINT NOGEN
XRXVARS  CSECT
XRXVARS  AMODE 31
XRXVARS  RMODE ANY
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SAVE  (14,12),,XRXVARS_&SYSDATE._&SYSTIME
         LR    R12,R15
         USING XRXVARS,R12
         LR    R2,R1               Save parameter address
         LA    R0,SIZDATD
         GETMAIN R,LV=(0)
         ST    R1,8(,R13)
         ST    R13,4(,R1)
         LR    R13,R1
         USING DATD,R13
         MVI   FLAGS,0             Random initializations
         L     R4,0(,R2)           Get address of parm string
         LH    R3,0(,R4)           R3 = length of parm
         LA    R4,2(,R4)           R4 = address of parm
         LOAD  EP=IRXSTK                Get address of IRXSTK routine
         ST    R0,@IRXSTK               Save it
         LOAD  EP=IRXEXCOM              Get address of IRXEXCOM routine
         ST    R0,@IRXEXCO              Save it
*
***********************************************************************
*                                                                     *
* Invoke the IRXEXCOM routine to retrieve all variable names.         *
*                                                                     *
* Reference: TSO/E Version 2 REXX Reference, pp. 240-246              *
*                                                                     *
***********************************************************************
*
* Build the SHVBLOCK
*
* To store the argument value, we try using ARGWA, a 512-byte area
* that is already part of our workarea, to avoid unnecessary GETMAINs.
*
* If that doesn't turn out to be big enough, we'll have to GETMAIN,
* but it's best to avoid that.
*
CONTINUE DS    0H
         XC    VARNAME(L'VARNAME),VARNAME
         XC    SHVBLOCK(SHVBLEN),SHVBLOCK
         MVI   SHVCODE,SHVNEXTV    Fetch "next" variable
         LA    R1,L'VARNAME
         ST    R1,SHVUSER          Length of name buffer
         LA    R1,VARNAME
         ST    R1,SHVNAMA          Address of name buffer
         LA    R1,1
         ST    R1,SHVBUFL          Length of dummy value buffer
         LA    R1,DUMBUF
         ST    R1,SHVVALA          Address of dummy value buffer
*                 SHVNAML will contain the length of the name returned
         LA    R14,=CL8'IRXEXCOM'  IRXEXCOM parm 1
         XR    R15,R15             IRXEXCOM parm 2
         LR    R0,R15              Parm 3 must be same as Parm 2
         LA    R1,SHVBLOCK         IRXEXCOM parm 4
         STM   R14,R1,IRPARMS
         OI    IRPARM4,X'80'
         XR    R0,R0               Don't specify an environment block
         L     R15,@IRXEXCO        Get address of IRXEXCOM
         LA    R1,IRPARMS          Point to parameter list
         BALR  R14,R15             Call REXX arg access routine
         LTR   R15,R15             Check RC
         BM    BADEXCOM
         TM    SHVRET,SHVLVAR      If no more variables
         BO    ENDIT               then finished
*
* Compare variable prefix here...
*
         LTR   R15,R3
         BZ    QUEUEIT             If no prefix given, accept all
         BCTR  R15,0               Else reduce length for execute
         EX    R15,CLCNAME         If prefix doesn't match
         BNE   CONTINUE            then continue
QUEUEIT  DS    0H
*
* Queue line onto REXX data stack
*
         MVC   IRFUNCT,=CL8'QUEUE'
         LA    R1,VARNAME
         ST    R1,IRSTRADR
         L     R1,SHVNAML
         ST    R1,IRSTRLEN
         XR    R1,R1
         ST    R1,IRRETCD
         LA    R14,IRFUNCT
         LA    R15,IRSTRADR
         LA    R0,IRSTRLEN
         LA    R1,IRRETCD
         STM   R14,R1,IRPARMS
         OI    IRPARM4,X'80'
         XR    R0,R0               Don't specify an environment block
         LA    R1,IRPARMS          Point to parameter list
         L     R15,@IRXSTK         Get address of IRXSTK
         BALR  R14,R15             Call REXX stack access routi ne
         LTR   R15,R15             Check rc
         BNZ   BADSTK
STACKOK  DS    0H                  R15 = 0
         B     CONTINUE
         SPACE 1
ENDIT    DS    0H
         LR    R1,R13
         L     R13,4(,R13)
         ST    R15,16(,R13)        Store return code in save area
         LA    R0,SIZDATD
         FREEMAIN R,LV=(0),A=(1)
         LM    R14,R12,12(R13)
         BR    R14
         SPACE 1
ERROR    DS    0H
         L     R15,=F'-1'          Load error code
         B     ENDIT
         SPACE 1
BADEXCOM DS    0H
         LA    R1,1111             U1111 for error in IRXEXCOM
         ABEND (1)
         SPACE 1
BADSTK   DS    0H
         LR    R1,R15              Make abend code the return code
         ABEND (1)
         SPACE 1
         EJECT
CLCNAME  CLC   0(*-*,R4),VARNAME   Executed: compare variable prefix
         EJECT
DATD     DSECT
SAVEAREA DS    18F
@IRXSTK  DS    A                   Address of REXX stack routine
@IRXEXCO DS    A                   Address of REXX access routine
FLAGS    DC    X'00'               Flags
*        EQU   B'10000000'          Reserved
*        EQU   B'01000000'          Reserved
*        EQU   B'00100000'          Reserved
*        EQU   B'00010000'          Reserved
*        EQU   B'00001000'          Reserved
*        EQU   B'00000100'          Reserved
*        EQU   B'00000010'          Reserved
*        EQU   B'00000001'          Reserved
*
VARNAME  DS    CL256               Area where variable name is returned
DUMBUF   DS    CL1                 We don't care about the value
*
IRPARMS  DS    0A                  Parameter list for IRX routines
IRPARM1  DS    A                   Address of parameter 1
IRPARM2  DS    A                   Address of parameter 2
IRPARM3  DS    A                   Address of parameter 3
IRPARM4  DS    A                   Address of parameter 4
*                                  Parameters used by IRXSTK
IRFUNCT  DS    CL8                 Parameter 1: function to perform
IRSTRADR DS    CL8                 Parameter 2: address of string
IRSTRLEN DS    CL8                 Parameter 3: length of string
IRRETCD  DS    CL8                 Parameter 4: return code
*                                  Parameters used by IRXEXCOM
*
***********************************************************************
*                                                                     *
* Copied from 'SYS1.MACLIB(IRXSHVB)'.                                 *
*                                                                     *
***********************************************************************
*
SHVBLOCK DS    0D                     SHARED VARIABLE REQUEST BLOCK
SHVNEXT  DS  A                        Chain pointer to next SHVBLOCK
SHVUSER  DS  F                        Used during "FETCH NEXT"
*                                      Contains length of buffer
*                                      pointed to by SHVNAMA
SHVCODES DS  0F
SHVCODE  DS  CL1                      Function code - indicates type
*                                      of variable access request
SHVRET   DS  XL1                      Return codes
         DS  H'0'                     Reserved (should be 0)
SHVBUFL  DS  F                        Length of fetch value buffer
SHVNAMA  DS  A                        Address of variable name
SHVNAML  DS  F                        Length of variable name
SHVVALA  DS  A                        Address of value buffer
SHVVALL  DS  F                        Length of value buffer
*                                      (Set on fetch)
SHVBLEN  EQU *-SHVBLOCK               Length of SHVBLOCK
         SPACE 1
**********************************************************************/
*   SHARED VARIABLE REQUEST BLOCK - function codes                   */
**********************************************************************/
         SPACE 1
SHVFETCH EQU   C'F'            Copy value of shared variable
SHVSTORE EQU   C'S'            Set variable from given value
SHVDROPV EQU   C'D'            Drop variable
SHVSYFET EQU   C'f'            Symbolic name retrieve
SHVSYSET EQU   C's'            Symbolic name set
SHVSYDRO EQU   C'd'            Symbolic name drop
SHVNEXTV EQU   C'N'            Fetch "next" variable
SHVPRIV  EQU   C'P'            Fetch private information
         SPACE 1
**********************************************************************/
*        SHARED VARIABLE REQUEST BLOCK - return codes (SHVRET)       */
**********************************************************************/
        SPACE 1
SHVCLEAN EQU   X'00'           Execution was OK
SHVNEWV  EQU   X'01'           Variable did not exist
SHVLVAR  EQU   X'02'           Last variable transferred ("N")
SHVTRUNC EQU   X'04'           Truncation occurred for "Fetch"
SHVBADN  EQU   X'08'           Invalid variable name
SHVBADV  EQU   X'10'           Invalid value specified
SHVBADF  EQU   X'80'           Invalid function code (SHVCODE)
         SPACE 1
**********************************************************************/
*        R15 return codes                                            */
**********************************************************************/
         SPACE 1
SHVRCOK  EQU    0              Entire Plist chain processed
SHVRCINV EQU   -1              Invalid entry conditions
SHVRCIST EQU   -2              Insufficient storage available
         SPACE 1
SIZDATD  EQU   *-DATD
         END
