         TITLE 'JES2 $DN COMMAND PROCESSOR'
***********************************************************************
*                                                                     *
*        ENVIRONMENT   MVS SP 2.2.0                                   *
*                                                                     *
*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $DN COMMAND   *
*        WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS A TYPE 5       *
*        EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY THE $DN        *
*        COMMAND WHEN ENCOUNTERED.  THE IBM $DN COMMAND CAN BE        *
*        EXECUTED BY ENTERING THE $QN COMMAND.                        *
*                                                                     *
*        NOTE THAT AN EXIT 255 ROUTINE WILL BE CALLED TO PERFORM      *
*        THE ACTUAL DISPLAY OF THE REQUESTED JOBS.  THIS EXIT         *
*        WILL PROCESS THE COMMAND, PERFORM SOME PRELIMINARY           *
*        SELECTION PROCESSING, AND CALL THE EXIT WITH AN              *
*        APPROPRIATE PARM LIST.  THE PARM LIST IS MAPPED WITH         *
*        A USER MACRO $FCSFMTP.                                       *
*                                                                     *
*        THE $DN COMMAND HAS THE FOLLOWING SYNTAX:                    *
*                                                                     *
*        $DN  ,SYSTEM-ID                                              *
*             ,ANY                                                    *
*             ,ALL                                                    *
*                                                                     *
*                         ,V=VOLSER                                   *
*                         ,IND                                        *
*                         ,R=DEST1 (-DEST2)                           *
*                         ,Q=CNV (CLASS)                              *
*                            XEQ (CLASS)                              *
*                            OUT                                      *
*                            PPU                                      *
*                            HOLD                                     *
*                            XMT (DEST1 (-DEST2))                     *
*                         ,JTYPE=JOBTYPE                              *
*                         ,FLAGS=HOLD                                 *
*                               +OHOLD                                *
*                               +UHOLD                                *
*                               +SETUP                                *
*                               +FAIL                                 *
*                               +ABEND                                *
*                               +JCLERROR                             *
*                         ,OWNERID                                    *
*                         ,OWNERID=OWNERID                            *
*                         ,RESOURCE                                   *
*                          ,L=CCA                                     *
*                                                                     *
*                                                                     *
*        WHERE:                                                       *
*                                                                     *
*        SYSTEM-ID     - LIST ONLY JOBS WITH AFFINITIES TO THE        *
*                        SPECIFIED SYSTEM IDENTIFIER                  *
*        ANY           - LIST ONLY JOBS WITHOUT ANY SYSTEM            *
*                        AFFINITY                                     *
*        ALL           - LIST JOBS REGARDLESS OF SYSTEM AFFINITY      *
*        VOLSER        - LIST ONLY JOBS WHICH HAVE DATA ON THE        *
*                        SPECIFIED SPOOL VOLUME                       *
*        IND           - LIST ONLY JOBS WHOSE SYSTEM AFFINITY         *
*                        IS FOR JOBS SET TO RUN IN THE INDEPENDENT    *
*                        MODE OF OPERATION                            *
*        R=DEST        - LIST ONLY JOBS WHICH HAVE PRINT/PUNCH        *
*                        ROUTING TO THE SPECIFIED DESTINATION         *
*                        NAME OR RANGE OF DESTINATIONS                *
*        CNV (CLASS)   - LIST ONLY JOBS AWAITING CONVERSION WITH      *
*                        OPTIONAL SPECIFIED CLASS OR '*' FOR ALL.     *
*        OUT           - LIST ONLY JOBS AWAITING OUTPUT PROCESSING    *
*        PPU           - LIST ONLY JOBS WITH OUTPUT QUEUED FOR        *
*                        PRINT/PUNCH PROCESSING                       *
*        HOLD          - LIST ONLY JOBS WAITING FOR ACTIVITY AND      *
*                        IN HOLD PROCESSING                           *
*        XMT (DEST)    - LIST ONLY JOBS AWAITING TRANSMISSION         *
*                        TO ANOTHER NODE WITH OPTIONAL NODE           *
*                        NUMBER OR RANGE                              *
*        JOBTYPE       - LIST ONLY JOB THAT ARE THE REQUESTED         *
*                        JOB TYPE.  THIS MUST BE A T (TEST) OR        *
*                        P (PRODUCTION)                               *
*        FLAGS         - LIST ONLY JOB THAT CONTAIN THE REQUESTED     *
*                        SPECIAL JOB FLAG(S).  IF MORE THAN ONE       *
*                        IS REQUESTED, THEY MUST SEPARATED BY A       *
*                        PLUS SIGN.  THEY WILL BE PROCESSED AS        *
*                        AN 'AND' CONDITION IN WHICH ANY JOB WITH     *
*                        ANY OF THE FLAGS WILL BE LISTED.             *
*        HOLD          - LIST ONLY JOB THAT ARE ON HOLD.  THIS        *
*                        WILL INCLUDE JOBS ON OPERATOR HOLD,          *
*                        USER HOLD, OR SETUP HOLD.                    *
*        OHOLD         - LIST ONLY JOB THAT ARE ON OPERATOR           *
*                        HOLD.                                        *
*        UHOLD         - LIST ONLY JOB THAT ARE ON USER HOLD          *
*        SETUP         - LIST ONLY JOB THAT ARE ON SETUP HOLD         *
*        FAIL          - LIST ONLY JOB THAT HAVE FAILED WITH          *
*                        AN ABEND OR JCLERROR.                        *
*        ABEND         - LIST ONLY JOB THAT HAVE FAILED WITH          *
*                        AN ABEND.                                    *
*        JCLERROR      - LIST ONLY JOB THAT HAVE FAILED WITH          *
*                        A JCL ERROR.                                 *
*        OWNERID       - LIST THE OWNERID FOR ALL JOBS THAT           *
*                        ARE SELECTED.  IF THE OWNERID VALUE          *
*                        FOLLOWS THIS SPECIFICATION, ONLY JOBS        *
*                        WITH THAT OWNERID WILL BE LISTED.            *
*        RESOURCE      - LIST THE ESOTERIC RESOURCES ATTACHED         *
*                        THE SELECTED JOBS.                           *
*                                                                     *
*        NOTE                                                         *
*                                                                     *
*        WRITTEN BY:                                                  *
*                        JOHN V. HOOPER                               *
*                        FIRST UNION NATIONAL BANK                    *
*                        301 SOUTH TRYON STREET                       *
*                        CHARLOTTE, N.C.  28288                       *
*                        (704) 374-2427                               *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *
*                                                                     *
*        1)  THE HASP908 MESSAGE WILL BE ISSUED FOR EACH JOB          *
*            WHICH IS DISPLAYED.                                      *
*                                                                     *
*        $HASP908 JOBNAME  EXECUTING C PRIO XX SSSS                   *
*                                                                     *
*        $HASP908 JOBNAME  ON PRINTRXX PRIO XX SSSS                   *
*                                                                     *
*        $HASP908 JOBNAME  WAIT EXEC X PRIO XX SSSS                   *
*                                                                     *
*        2)  THE HASP946 MESSAGE WILL BE ISSUED AFTER ALL             *
*            APPROPRIATE JOBS HAVE BEEN DISPLAYED.                    *
*                                                                     *
*        $HASP946 ??? PERCENT SPOOL UTILIZATION                       *
*                                                                     *
*        3)  THE HASP999 MESSAGE WILL BE ISSUED FOR ALL               *
*            ERRORS.                                                  *
*                                                                     *
*        $HASP999 XXXXXXXXX INVALID OPERAND                           *
*                                                                     *
*        THE JOBNAME/JOB NUMBER CONTAINS INVALID SYNTAX.              *
*                                                                     *
*        $HASP999 LIST INCOMPLETE                                     *
*                                                                     *
*        DURING WTO PROCESSING A BUFFER SHORTAGE WAS DETECTED, SO     *
*        $DN PROCESSING WILL BE TERMINATED TO PREVENT FURTHER         *
*        BUFFER SHORTAGES.                                            *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*              M A C R O S   U S E D   I N   J 0 0 5 $ D N            *
*                                                                     *
*        01)  $AMODE       SYS1.HASPSRC                               *
*        02)  $BUFFER      SYS1.HASPSRC                               *
*        03)  $CAT         SYS1.HASPSRC                               *
*        04)  $CMB         SYS1.HASPSRC                               *
*        05)  $COMWORK     SYS1.HASPSRC                               *
*        06)  $CWA         SYS1.HASPSRC                               *
*        07)  $CWTO        SYS1.HASPSRC                               *
*        08)  $DAS         SYS1.HASPSRC                               *
*        09)  $DEST        SYS1.HASPSRC                               *
*        10)  $DCT         SYS1.HASPSRC                               *
*        11)  $ENTRY       SYS1.HASPSRC                               *
*        12)  $EXIT        SYS1.HASPSRC                               *
*        13)  $EXITPL      SYS1.HASPSRC                               *
*        14)  $FREEBUF     SYS1.HASPSRC                               *
*        15)  $GETBUF      SYS1.HASPSRC                               *
*        16)  $HASPEQU     SYS1.HASPSRC                               *
*        17)  $HASPGBL     SYS1.HASPSRC                               *
*        18)  $HCT         SYS1.HASPSRC                               *
*        19)  $IOT         SYS1.HASPSRC                               *
*        20)  $JCT         SYS1.HASPSRC                               *
*        21)  $JOE         SYS1.HASPSRC                               *
*        22)  $JQE         SYS1.HASPSRC                               *
*        23)  $LCK         SYS1.HASPSRC                               *
*        24)  $MIT         SYS1.HASPSRC                               *
*        25)  $MODEND      SYS1.HASPSRC                               *
*        26)  $MODULE      SYS1.HASPSRC                               *
*        27)  $PADDR       SYS1.HASPSRC                               *
*        28)  $PCE         SYS1.HASPSRC                               *
*        29)  $QLOC        SYS1.HASPSRC                               *
*        30)  $QSE         SYS1.HASPSRC                               *
*        31)  $RAT         SYS1.HASPSRC                               *
*        32)  $RETURN      SYS1.HASPSRC                               *
*        33)  $SAVE        SYS1.HASPSRC                               *
*        34)  $TAB         SYS1.HASPSRC                               *
*        35)  $XIT         SYS1.HASPSRC                               *
*        36)  IAZRESPA     SYS1.AMODGEN                               *
*        37)  IFGRPL       SYS1.MACLIB                                *
*        38)  MODESET      SYS1.MACLIB                                *
*                                                                     *
*                                                                     *
*              L I N K A G E    E D I T O R    I N F O                *
*                                                                     *
*        SIZE:       4K                                               *
*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
         COPY  $HASPGBL
J005$QN  $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X
               ENVIRON=JES2,                                           X
               TITLE='JES2 $DN COMMAND PROCESSOR',                     X
               $BUFFER,            GENERATE HASP BUFFER DSECT          X
               $CAT,               GENERATE HASP CAT DSECT             X
               $CMB,               GENERATE HASP CMB DSECT             X
               $COMWORK,           GENERATE HASP COMWORK DSECT         X
               $CWA,               GENERATE HASP CWA DSECT             X
               $DAS,               GENERATE HASP DAS DSECT             X
               $DCT,               GENERATE HASP DCT DSECT             X
               $EXITPL,            GENERATE HASP EXITPL DSECT          X
               $HASPEQU,           GENERATE HASP EQUATES               X
               $HCT,               GENERATE HASP HCT DSECT             X
               $IOT,               GENERATE HASP IOT DSECT             X
               $JCT,               GENERATE HASP JCT DSECT             X
               $JOE,               GENERATE HASP JOE DSECT             X
               $JQE,               GENERATE HASP JQE DSECT             X
               $LCK,               GENERATE HASP LCK DSECT             X
               $MIT,               GENERATE HASP MIT DSECT             X
               $PADDR,             GENERATE HASP PADDR DSECT           X
               $PCE,               GENERATE HASP PCE DSECT             X
               $PDDB,              GENERATE HASP PDDB DSECT            X
               $QSE,               GENERATE HASP QSE DSECT             X
               $RAT,               GENERATE HASP RAT DSECT             X
               $TAB,               GENERATE HASP TAB DSECT             X
               $XIT,               GENERATE HASP XIT DSECT             X
               RESPA,              GENERATE MVS  RESPA DSECT           X
               RPL                 GENERATE MVS  IFGRPL DSECT
         EJECT
***********************************************************************
*                                                                     *
*        PROGRAM WORK AREAS                                           *
*                                                                     *
***********************************************************************
$DNWORK  DSECT
         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****
         $FCSFMTP ,                MAP THE EXIT 255 PARM LIST
SYSID    DS    CL4                 REQUESTED SYSTEM ID
VOLSER   DS    CL6                 REQUESTED SPOOL VOLUME
ROUTCDE  DS    F                   DESTINATION CODE FOR SETDEST ROUTINE
SAVEBAS  DS    CL18                MSG SAVE AREA FOR JOB NBR AND NAME
OPNDCTR  DS    H                   COMMAND OPERAND COUNTER
LTEXT    DS    H                   CURRENT LENGTH OF MESSAGE AREA
RC       DS    H                   $CWTO RETURN CODE
LOWROUT  DS    F                   LOW ROUTE CODE FROM PROCDEST
HIGHROUT DS    F                   HIGH ROUTE CODE FROM PROCDEST
LOWJOB   DS    H                   LOW RANGE JOB REQUESTED
HIGHJOB  DS    H                   HIGH RANGE JOB REQUESTED
MISCSW1  DS    X                   MISCELLANEOUS SWITCHES
TWOPART  EQU   X'40'               A TWO PART DESTINATION WAS FOUND
VOLHEAD  EQU   X'20'               SPOOL VOLUME HEADER MSG PROCESSED
SPOOLS   EQU   X'10'               SPOOL VOLUME INFORMATION REQUESTED
MISCSW2  DS    X                   MISCELLANEOUS SWITCHES
JOEFND   EQU   X'80'               AN ACTIVE JOE FOUND FOR THIS JOB
LASTYPE  DS    C                   LAST JOB TYPE PROCESSED
DEVNO    DS    H                   NUMBER OF ACTIVE DEVICES
DOUBLE   DS    D                   DOUBLE WORD WORK AREA
DBL      DS    D                   DOUBLE WORD WORK AREA
DEST1P1  DS    CL10                BEGINNING DEST PART 1
DEST1P2  DS    CL10                BEGINNING DEST PART 2
DEST2P1  DS    CL10                ENDING DEST PART 1
SAVEAFF  DS    16F                 REGISTER SAVE FOR SETAFF  ROUTINE
SAVEOWN  DS    16F                 REGISTER SAVE FOR SETOWN  ROUTINE
SAVESPL  DS    16F                 REGISTER SAVE FOR SETSPL  ROUTINE
SAVEBLD  DS    16F                 REGISTER SAVE FOR BLDACT  ROUTINE
SAVEPUT  DS    16F                 REGISTER SAVE FOR BLDPUT  ROUTINE
DEVTBL   DS    50XL4               ACTIVE DEVICE TABLE
         SPACE 3
J005$QN  CSECT ,                   RESTORE THE CSECT ENVIRONMENT
         TITLE 'JES2 $QN COMMAND PROCESSOR'
***********************************************************************
*                                                                     *
*        EXIT MAIN ENTRY POINT                                        *
*                                                                     *
***********************************************************************
E005$QN  $ENTRY BASE=(R12)
         SPACE 1
         $SAVE                     SAVE CALLER'S REGISTERS
         LR    R12,R15             LOAD FIRST BASE REGISTER
         EJECT
***********************************************************************
*                                                                     *
*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *
*                                                                     *
*        R5       - ADDRESS OF THE CURRENT OPERAND                    *
*        R6       - INCREMENT VALUE OF 4                              *
*        R7       - ADDRESS OF THE LAST OPERAND                       *
*        R11      - ADDRESS OF THE HCT                                *
*        R13      - ADDRESS OF THE HASPCOMM PCE                       *
*        R14      - RETURN ADDRESS                                    *
*        R15      - ENTRY ADDRESS                                     *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        SEE IF THIS IS A $QN COMMAND.  IF IT IS, CHANGE IT           *
*        TO A $DN COMMAND AND PASS IT BACK TO JES2.                   *
*                                                                     *
***********************************************************************
         CLC   COMVERB(7),=C'DNJEDEF' SEE IF DISPLAY NJEDEF COMMAND
         BE    EXIT0               YES, LET IBM HANDLE IT
         CLC   COMVERB(2),=C'DN'   SEE IF THIS IS THE $DN COMMAND
         BE    DNOK                YES, GO PROCESS IT
         CLC   COMVERB(2),=C'QN'   SEE IF THIS IS THE $QN COMMAND
         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT
         MVC   COMVERB(2),=C'DN'   CHANGE TO THE IBM DN COMMAND
         B     EXIT0               GO LET IBM HANDLE IT
***********************************************************************
*                                                                     *
*        GET A JES2 BUFFER FOR REENTRANCY AND                         *
*        CLEAR THE COMMAND WORK AREA                                  *
*                                                                     *
***********************************************************************
         SPACE 1
DNOK     $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA
         LR    R8,R1               SAVE WORK AREA ADDRESS
         USING $DNWORK,R8          SET ADDRESSABILITY TO WORK AREA
         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA
         LR    R10,R1              SAVE WORK AREA ADDRESS
         LA    R14,$DNWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS
         LH    R15,$BUFSIZE        SET   'TO'   LENGTH
         SLR   R0,R0               CLEAR 'FROM' ADDRESS
         SLR   R1,R1               CLEAR 'FROM' LENGTH
         MVCL  R14,R0              CLEAR THE BUFFER
         EJECT
*****************************************************************
*                                                               *
*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES           *
*                                                               *
*****************************************************************
         SPACE 1
         TM    COMFLAG,CMBFLAGU    IS THIS A UCM
         BZ    MSGGOOD             NO, SKIP REDIRECTION
         TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM
         BNZ   MSGRPT              SKIP AUTOMATIC L=CCA
         LA    R1,4                LOAD REDIRECT OFFSET FOR $DN
*                                  SAME AS FOR $DN
         BCTR  R1,0                REDUCE BY 1
         SLL   R1,1                DOUBLE
         SLR   R2,R2               ZERO REGISTER FOR IC
         IC    R2,COMUCM           PICK UP CURRENT UCM ID
         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA
         USING CWA,R14             SET ADDRESSABILITY TO CWA
         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM
         BH    MSGRPT              YES, ERROR, NO AUTOMATIC REDIRECTION
         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY
         AR    R1,R2               COMBINE OFFSETS
         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY
         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID
         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET
         BO    MSGRPT              YES, SKIP AUTOMATIC REDIRECTION
         MVC   COMUCMA,CWACONA(R1) SET NEW AREA
         DROP  R14                 DROP ADDRESSABILITY TO CWA
MSGRPT   BAL   R4,MSGVCCA          VERIFY CCA (NO RETURN IF BAD)
         CLI   COMUCMA,0           TEST FOR DISPLAY AREA
         BZ    MSGGOOD             IF NOT, SKIP
         MVI   COMLINET,X'80'      SET CONTROL LINE
         $CWTO L=L'CMBMSG,MSGID=908 ECHO THE COMMAND
         MVI   COMLINET,X'20'      SET DATA LINE
***********************************************************************
*                                                                     *
*        INITIALIZE FIELDS                                            *
*                                                                     *
***********************************************************************
MSGGOOD  DS    0H
         CLI   COMVERB+2,C' '      SEE IF OTHER OPERANDS SPECIFIED
         BE    INSUFF              NO, INSUFFICIENT OPERANDS
         CLI   COMVERB+2,C','      SEE IF PROPER DELIMETER
         BNE   BADOPRND            NO, INVALID OPERAND
         MVC   LOWJOB,=H'1'        SET LOW JOB NUMBER TO 1
         MVC   HIGHJOB,$NUMJBNO    SET HIGH JOB NUMBER
         XC    OPNDCTR,OPNDCTR     ZERO THE OPERAND COUNTER
         MVI   QBITS,QCNV+QXEQ+QOUT+QPPU+QXMT+QPUR SET DEFAULT BITS
         MVI   QBITS+1,0           SET DEFAULT BITS
         MVI   QFILT1,0            ZERO THE FILTER FLAGS FIELD
         MVI   QFILT2,0            ZERO THE FILTER FLAGS FIELD
         MVI   VOLMASK,X'FF'       SET SPOOL MASK
         MVC   VOLMASK+1(L'VOLMASK-1),VOLMASK  TO VOLUMES
         MVC   SYSMASK,$SIDAFF     SET DEFAULT SYSTEM ID MASK
         XC    OWNERID,OWNERID     ZERO THE OWNERID FIELD
***********************************************************************
*                                                                     *
*        GET THE DEFAULT ROUTE CODE FOR $DN                           *
*                                                                     *
***********************************************************************
GETROUT  L     R1,COMJROUT         LOAD COMMAND ROUTE CODE
         TM    COMFLAG,CMBFLAGW    IS THIS AN RJE
         BNO   GETROUTE            NO, BRANCH
         CLM   R1,B'1100',$OWNNODE IS THIS OUR NODE AND RJE
         BNE   GETROUTE            NO, BRANCH
         LH    R1,COMJRMT          LOAD THE REMOTE NUMBER
         BCTR  R1,0                MAKE NUMBER RELATIVE TO ZERO
         MH    R1,=Y(RATTLE)       MULTIPLY BY RAT LENGTH FOR OFFSET
         AL    R1,$RATABLE         POINT TO RAT ENTRY FOR THIS RJE
         L     R1,RATROUTE-RAT(,R1) PICK UP PROPER ROUTINE
GETROUTE OI    QMISC+L'SELDEST,SELDEST TURN ON SELECT BY DEST INDICATOR
         ST    R1,LOWDEST          SET DEFAULT LOW ROUTE CODE
         ST    R1,HIDEST           AND HIGH ROUTE CODE
         EJECT
***********************************************************************
*                                                                     *
*        EXAMINE THE COMMAND OPERANDS                                 *
*                                                                     *
***********************************************************************
CKOPND   BXH   R5,R6,JQESCAN       IF NO MORE EXIT
         L     R3,0(R5)            POINT TO OPERAND
         LH    R15,OPNDCTR         LOAD OPERAND COUNTER
         LA    R15,1(R15)          ADD 1 TO COUNTER
         STH   R15,OPNDCTR         SAVE OPERAND COUNTER
         CLC   0(2,R3),=C'V='      SEE IF 'V=' OPERAND
         BE    OPV                 YES, GO PROCESS IT
         CLC   0(2,R3),=C'R='      SEE IF 'R=' OPERAND
         BE    OPR                 YES, GO PROCESS IT
         CLC   0(2,R3),=C'Q='      SEE IF 'Q=' OPERAND
         BE    OPQ                 YES, GO PROCESS IT
         CLC   0(3,R3),=C'IND'     SEE IF 'IND' OPERAND
         BE    OPIND               YES, GO PROCESS IT
         CLC   0(6,R3),=C'JTYPE='  SEE IF 'JT' OPERAND
         BE    OPJT                YES, GO PROCESS IT
         CLC   0(3,R3),=C'JT='     SEE IF 'JT' OPERAND
         BE    OPJT                YES, GO PROCESS IT
         CLC   0(6,R3),=C'FLAGS='  SEE IF 'FLAGS' OPERAND
         BE    OPFLAG              YES, GO PROCESS IT
         CLC   0(5,R3),=C'FLAG='   SEE IF 'FLAGS' OPERAND
         BE    OPFLAG              YES, GO PROCESS IT
         CLC   0(3,R3),=C'FL='     SEE IF 'FLAGS' OPERAND
         BE    OPFLAG              YES, GO PROCESS IT
         CLC   0(2,R3),=C'F='      SEE IF 'FLAGS' OPERAND
         BE    OPFLAG              YES, GO PROCESS IT
         CLC   0(7,R3),=C'OWNERID' SEE IF 'OWNERID' OPERAND
         BE    OPOWN               YES, GO PROCESS IT
         CLC   0(5,R3),=C'OWNER'   SEE IF 'OWNERID' OPERAND
         BE    OPOWN               YES, GO PROCESS IT
         CLC   0(8,R3),=C'RESOURCE' SEE IF 'RESOURCE' OPERAND
         BE    OPRES               YES, GO PROCESS IT
         CLI   0(R3),C'O'          SEE IF 'OWNERID' OPERAND
         BE    OPOWN               YES, GO PROCESS IT
         CLC   OPNDCTR,=H'1'       IS THIS THE FIRST OPERAND
         BNE   BADOPRND            NO, INVALID OPERAND
         CLC   0(3,R3),=C'ANY'     SEE IF 'ANY' OPERAND
         BE    OPANY               YES, GO PROCESS IT
         CLC   0(3,R3),=C'ALL'     SEE IF 'ALL' OPERAND
         BE    OPALL               YES, GO PROCESS IT
         B     OPSYSID             ASSUME SYSTEM-ID
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE V= OPERAND                                       *
*                                                                     *
***********************************************************************
         SPACE 1
OPV      OI    QMISC+L'SELVOL,SELVOL TURN ON SELECT BY VOLUME IND
         SLR   R14,R14             SET VOLSER LENGTH
         LA    R15,2(R3)           POINT TO VOLSER OPERAND
         MVC   VOLSER,$BLANKS      BLANK THE VOLSER
OPV1     CLI   0(R15),C' '         END OF VOLSER
         BE    OPV2                YES, BRANCH
         CLI   0(R15),C','         END OF VOLSER
         BE    OPV2                YES, BRANCH
         LA    R14,1(R14)          ADD 1 TO VOLSER LENGTH
         LA    R15,1(R15)          INCREMENT TO NEXT CHAR VOLSER
         B     OPV1                LOOP
OPV2     LTR   R14,R14             TEST VOLSER LENGTH
         BZ    BADOPRND            ZERO, ERROR
         CH    R14,=H'6'           SEE IF EXCEEDS MAX
         BH    BADOPRND            YES, ERROR
         BCTR  R14,0               MAKE MACHINE LENGTH
         EX    R14,MVVOL           MOVE VOLSER TO WORK AREA
         L     R15,$DASFRST        LOAD ADDRESS OF FIRST DAS
         USING DAS,R15             SET ADDRESSABILITY TO DAS
         LH    R14,$SPOLNUM        LOAD NUMBER OF SPOOL VOLUMES
         LTR   R14,R14             TEST NUMBER OF SPOOL VOLUMES
         BZ    BADOPRND            NO SPOOL VOLUMES, BAD OPERAND
OPV3     CLC   DASVOLID,VOLSER     SEE IF MATCH ON SPOOL VOLSER
         BE    OPV4                YES, BRANCH
         LA    R15,DASSIZ(R15)     POINT TO NEXT DAS ENTRY
         BCT   R14,OPV3            LOOP FOR NEXT DAS
         B     BADOPRND            INVALID VOLSER, BAD OPERAND
OPV4     MVC   VOLMASK,DASMASK     SAVE DAS VOLUME MASK
         B     CKOPND              LOOP FOR NEXT OPERAND
         DROP  R15                 DROP ADDRESSABILITY TO DAS
MVVOL    MVC   VOLSER(0),2(R3)     **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE R= OPERAND                                       *
*                                                                     *
***********************************************************************
         SPACE 1
OPR      OI    QMISC+L'SELDEST,SELDEST TURN ON SELECT BY DEST IND
         L     R3,0(,R5)           POINT TO OPERAND
         LA    R1,2(,R3)           INCREMENT PAST 'R='
         $CALL PROCDEST            CALL THE DEST CONVERSION ROUTINE
         MVC   LOWDEST,LOWROUT     SAVE FIRST DESTINATION CODE
         MVC   HIDEST,HIGHROUT     SAVE SECOND DESTINATION CODE
         B     CKOPND              GO GET NEXT OPERAND
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE Q= OPERAND                                       *
*                                                                     *
***********************************************************************
         SPACE 1
OPQ      SLR   R14,R14             SET VOLSER LENGTH
         LA    R15,2(R3)           POINT TO Q OPERAND
OPQ1     CLI   0(R15),C' '         END OF OPERAND
         BE    OPQ2                YES, BRANCH
         CLI   0(R15),C','         END OF OPERAND
         BE    OPQ2                YES, BRANCH
         LA    R14,1(R14)          ADD 1 TO OPERAND LENGTH
         LA    R15,1(R15)          INCREMENT TO NEXT CHAR OPERAND
         B     OPQ1                LOOP
OPQ2     CLI   QBITS,QCNV+QXEQ+QOUT+QPPU+QXMT+QPUR SEE IF DEFAULT BITS
         BNE   BADOPRND            NO, SECOND Q= OPERAND, ERROR
         CH    R14,=H'3'           TEST OPERAND LENGTH
         BL    BADOPRND            LESS THAN 3, ERROR
         CLC   2(3,R3),=C'CNV'     SEE IF CONVERSION QUEUE
         BE    OPQ3                YES, BRANCH
         CLC   2(3,R3),=C'XEQ'     SEE IF EXECUTION QUEUE
         BE    OPQ4                YES, BRANCH
         CLC   2(3,R3),=C'OUT'     SEE IF OUTPUT QUEUE
         BE    OPQ5                YES, BRANCH
         CLC   2(3,R3),=C'PPU'     SEE IF PRINT/PUNCH QUEUE
         BE    OPQ6                YES, BRANCH
         CLC   2(4,R3),=C'HOLD'    SEE IF HOLD QUEUE
         BE    OPQ7                YES, BRANCH
         CLC   2(3,R3),=C'XMT'     SEE IF TRANSMISSION QUEUE
         BE    OPQ8                YES, BRANCH
         B     BADOPRND            NO, ERROR
***********************************************************************
*                                                                     *
*        PROCESS THE Q=CNV OPERAND                                    *
*                                                                     *
***********************************************************************
OPQ3     MVI   QBITS+L'QCNV,QCNV   TURN ON CONVERSION QUEUE BIT
         CH    R14,=H'3'           SEE IF LENGTH = 3
         BE    CKOPND              YES, DONE WITH THIS OPERAND
         CH    R14,=H'4'           SEE IF LENGTH = 4
         BNE   OPQ3A               NO, BRANCH
         CLI   5(R3),C'*'          SEE IF 'CNV*'
         BE    CKOPND              YES, IGNORE CLASS
         MVC   QCLASS,5(R3)        NO, SAVE CLASS
         B     CKOPND              GO GET NEXT OPERAND
OPQ3A    CH    R14,=H'6'           SEE IF LENGTH = 6
         BNE   BADOPRND            NO, ERROR
         CLC   5(3,R3),=C'STC'     SEE IF WANT STARTED TASKS
         BNE   OPQ3B               NO, BRANCH
         MVI   QCLASS,C'$'         SET CLASS TO '$'
         B     CKOPND              GO GET NEXT OPERAND
OPQ3B    CLC   5(3,R3),=C'TSU'     SEE IF WANT TSO USERS
         BNE   BADOPRND            NO, ERROR
         MVI   QCLASS,C'@'         SET CLASS TO '@'
         B     CKOPND              GO GET NEXT OPERAND
***********************************************************************
*                                                                     *
*        PROCESS THE Q=XEQ OPERAND                                    *
*                                                                     *
***********************************************************************
OPQ4     MVI   QBITS+L'QXEQ,QXEQ   TURN ON EXECUTION QUEUE BIT
         OI    QBITS+L'QCNV,QCNV   TURN ON CONVERSION QUEUE BIT ALSO
         CH    R14,=H'3'           SEE IF LENGTH = 3
         BE    CKOPND              YES, DONE WITH THIS OPERAND
         CH    R14,=H'4'           SEE IF LENGTH = 4
         BNE   OPQ4A               NO, BRANCH
         MVC   QCLASS,5(R3)        NO, SAVE CLASS
         B     CKOPND              GO GET NEXT OPERAND
OPQ4A    CH    R14,=H'6'           SEE IF LENGTH = 6
         BNE   BADOPRND            NO, ERROR
         CLC   5(3,R3),=C'STC'     SEE IF WANT STARTED TASKS
         BNE   OPQ4B               NO, BRANCH
         MVI   QCLASS,C'$'         SET CLASS TO '$'
         B     CKOPND              GO GET NEXT OPERAND
OPQ4B    CLC   5(3,R3),=C'TSU'     SEE IF WANT TSO USERS
         BNE   BADOPRND            NO, ERROR
         MVI   QCLASS,C'@'         SET CLASS TO '@'
         B     CKOPND              GO GET NEXT OPERAND
***********************************************************************
*                                                                     *
*        PROCESS THE Q=OUT OPERAND                                    *
*                                                                     *
***********************************************************************
OPQ5     MVI   QBITS+L'QOUT,QOUT   TURN ON OUTPUT QUEUE BIT
         CH    R14,=H'3'           SEE IF LENGTH = 3
         BNE   BADOPRND            NO, ERROR
         B     CKOPND              GO GET NEXT OPERAND
***********************************************************************
*                                                                     *
*        PROCESS THE Q=PPU OPERAND                                    *
*                                                                     *
***********************************************************************
OPQ6     MVI   QBITS+L'QPPU,QPPU   TURN ON PRINT/PUNCH QUEUE BIT
         CH    R14,=H'3'           SEE IF LENGTH = 3
         BNE   BADOPRND            NO, ERROR
         B     CKOPND              GO GET NEXT OPERAND
***********************************************************************
*                                                                     *
*        PROCESS THE Q=HOLD OPERAND                                   *
*                                                                     *
***********************************************************************
OPQ7     OI    QBITS+L'QHOLD,QHOLD TURN ON HOLD QUEUE BIT
         CH    R14,=H'4'           SEE IF LENGTH = 4
         BNE   BADOPRND            NO, ERROR
         B     CKOPND              GO GET NEXT OPERAND
***********************************************************************
*                                                                     *
*        PROCESS THE Q=XMT OPERAND                                    *
*                                                                     *
***********************************************************************
OPQ8     MVI   QBITS+L'QXMT,QXMT   TURN ON TRANSMISSION QUEUE BIT
         CH    R14,=H'3'           SEE IF LENGTH = 3
         BE    CKOPND              YES, DONE WITH THIS OPERAND
         OI    QMISC+L'XMTDEST,XMTDEST TURN ON SELECT XMT BY DEST IND
         LA    R1,5(,R3)           INCREMENT PAST 'Q=XMT'
         $CALL PROCDEST            CALL THE DEST CONVERSION ROUTINE
         MVC   LOWXDEST,LOWROUT    SAVE FIRST DESTINATION CODE
         MVC   HIXDEST,HIGHROUT    SAVE SECOND DESTINATION CODE
         CLC   LOWXDEST+2(2),=H'0' MAKE SURE ONLY NODE SPECIFIED
         BNE   BADOPRND            NO, ERROR
         CLC   HIXDEST+2(2),=H'0'  MAKE SURE ONLY NODE SPECIFIED
         BNE   BADOPRND            NO, ERROR
         B     CKOPND              GO GET NEXT OPERAND
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE IND OPERAND                                      *
*                                                                     *
***********************************************************************
         SPACE 1
OPIND    OI    QMISC+L'INDONLY,INDONLY TURN ON IND INDICATOR
         CLI   3(R3),C' '          THREE CHARACTER OPERAND
         BE    CKOPND              YES, GO GET NEXT OPERAND
         CLI   3(R3),C','          THREE CHARACTER OPERAND
         BNE   BADOPRND            NO, ERROR
         B     CKOPND              GO GET NEXT OPERAND
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE ANY OPERAND                                      *
*                                                                     *
***********************************************************************
         SPACE 1
OPANY    OI    QMISC+L'SYSANY,SYSANY TURN ON 'ANY' SYSTEM INDICATOR
         CLI   3(R3),C' '          THREE CHARACTER OPERAND
         BE    CKOPND              YES, GO GET NEXT OPERAND
         CLI   3(R3),C','          THREE CHARACTER OPERAND
         BNE   BADOPRND            NO, ERROR
         B     CKOPND              GO GET NEXT OPERAND
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE ALL OPERAND                                      *
*                                                                     *
***********************************************************************
         SPACE 1
OPALL    OI    QMISC+L'SYSALL,SYSALL TURN ON ALL SYSTEMS INDICATOR
         CLI   3(R3),C' '          THREE CHARACTER OPERAND
         BE    CKOPND              YES, GO GET NEXT OPERAND
         CLI   3(R3),C','          THREE CHARACTER OPERAND
         BNE   BADOPRND            NO, ERROR
         B     CKOPND              GO GET NEXT OPERAND
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE SYSTEM-ID OPERAND                                *
*                                                                     *
***********************************************************************
         SPACE 1
OPSYSID  MVC   SYSID,$BLANKS       BLANK THE SYSTEM ID
         SLR   R14,R14             SET VOLSER LENGTH
         LR    R15,R3              POINT TO SYSTEM ID
OPSYSID1 CLI   0(R15),C' '         END OF OPERAND
         BE    OPSYSID2            YES, BRANCH
         CLI   0(R15),C','         END OF OPERAND
         BE    OPSYSID2            YES, BRANCH
         LA    R14,1(R14)          ADD 1 TO OPERAND LENGTH
         LA    R15,1(R15)          INCREMENT TO NEXT CHAR OPERAND
         B     OPSYSID1            LOOP
OPSYSID2 LTR   R14,R14             TEST SYSID LENGTH
         BZ    BADOPRND            ZERO, ERROR
         CH    R14,=H'4'           TEST MAX LENGTH
         BH    BADOPRND            GREATER THAN 4, ERROR
         BCTR  R14,0               MAKE MACHINE LENGTH
         EX    R14,MVSYSID         SAVE SYSTEM ID
         L     R14,$QSE1           LOAD ADDRESS OF FIRST QSE
         USING QSE,R14             SET ADDRESSABILITY TO QSE
OPSYSID3 MVC   SYSMASK,QSESIAFF    SAVE SYSTEM AFFINITY BIT
         CLC   QSESID,SYSID        SEE IF OUR SYSTEM ID
         BE    CKOPND              YES, GO GET NEXT OPERAND
         TM    QSESTAT,QSELAST     SEE IF LAST QSE
         BO    BADOPRND            YES, INVALID SYSTEM ID
         LA    R14,QSELEN(R14)     INCREMENT TO NEXT QSE
         B     OPSYSID3            LOOP
         DROP  R14                 DROP ADDRESSABILITY TO QSE
MVSYSID  MVC   SYSID(0),0(R3)      **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE JOBTYPE OPERAND                                  *
*                                                                     *
***********************************************************************
         SPACE 1
OPJT     LA    R15,8               SET LOOP COUNTER
OPJT1    CLI   0(R3),C'='          FIND END OF KEYWORD
         BE    OPJT2               YES, BRANCH
         LA    R3,1(R3)            INCREMENT TO NEXT CHAR
         BCT   R15,OPJT1           LOOP
         B     BADOPRND            NO '=' ERROR
OPJT2    LA    R3,1(R3)            INCREMENT PAST '='
         CLI   1(R3),C' '          PROPER END OF VALUE
         BE    OPJT3               YES, BRANCH
         CLI   1(R3),C','          PROPER END OF VALUE
         BE    OPJT3               YES, BRANCH
OPJT3    OI    QFILT1,QPROD        ASSUME PROD
         CLI   0(R3),C'P'          SEE IF PRODUCTION
         BE    CKOPND              YES, GO GET NEXT OPERAND
         OI    QFILT1,QTEST        ASSUME TEST
         CLI   0(R3),C'T'          SEE IF TEST
         BE    CKOPND              YES, GO GET NEXT OPERAND
         B     BADOPRND            NO, ERROR
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE FLAG OPERAND                                     *
*                                                                     *
***********************************************************************
         SPACE 1
OPFLAG   LA    R15,8               SET LOOP COUNTER
OPFLAG1  CLI   0(R3),C'='          FIND END OF KEYWORD
         BE    OPFLAG2             YES, BRANCH
         LA    R3,1(R3)            INCREMENT TO NEXT CHAR
         BCT   R15,OPFLAG1         LOOP
         B     BADOPRND            NO '=' ERROR
OPFLAG2  LA    R3,1(R3)            INCREMENT PAST '=' OR '+'
         LR    R4,R3               SAVE START OF VALUE ADDRESS
         LA    R15,10              SET LOOP COUNTER
OPFLAG3  CLI   0(R4),C','          PROPER END OF VALUE
         BE    OPFLAG4             YES, BRANCH
         CLI   0(R4),C' '          PROPER END OF VALUE
         BE    OPFLAG4             YES, BRANCH
         CLI   0(R4),C'+'          PROPER END OF VALUE
         BE    OPFLAG4             YES, BRANCH
         LA    R4,1(R4)            INCREMENT TO NEXT CHAR
         BCT   R15,OPFLAG3         LOOP
         B     BADOPRND            OPERAND TOO LONG
OPFLAG4  LR    R15,R4              SAVE END ADDRESS
         SR    R15,R3              CALCULATE LENGTH
         LTR   R15,R15             TEST LENGTH
         BZ    BADOPRND            ZERO, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,CLCHOLD         SEE IF HOLD
         BE    OPFLAG5             YES, BRANCH
         EX    R15,CLCOHOLD        SEE IF OPERATOR HOLD
         BE    OPFLAG6             YES, BRANCH
         EX    R15,CLCUHOLD        SEE IF USER HOLD
         BE    OPFLAG7             YES, BRANCH
         EX    R15,CLCSETUP        SEE IF SETUP HOLD
         BE    OPFLAG8             YES, BRANCH
         EX    R15,CLCFAIL         SEE IF FAIL
         BE    OPFLAG9             YES, BRANCH
         EX    R15,CLCABEND        SEE IF ABEND
         BE    OPFLAG10            YES, BRANCH
         EX    R15,CLCJCLER        SEE IF JCL ERROR
         BE    OPFLAG11            YES, BRANCH
         B     BADOPRND            NO, BAD OPERAND
CLCHOLD  CLC   0(0,R3),=C'HOLD'    **** EXECUTE ONLY ****
CLCOHOLD CLC   0(0,R3),=C'OHOLD'   **** EXECUTE ONLY ****
CLCUHOLD CLC   0(0,R3),=C'UHOLD'   **** EXECUTE ONLY ****
CLCSETUP CLC   0(0,R3),=C'SETUP'   **** EXECUTE ONLY ****
CLCFAIL  CLC   0(0,R3),=C'FAIL'    **** EXECUTE ONLY ****
CLCABEND CLC   0(0,R3),=C'ABEND'   **** EXECUTE ONLY ****
CLCJCLER CLC   0(0,R3),=C'JCLERROR' **** EXECUTE ONLY ****
OPFLAG5  OI    QFILT2+L'QOHOLD,QOHOLD SET OPERATOR HOLD INDICATOR
         OI    QFILT2+L'QUHOLD,QUHOLD SET USER    HOLD INDICATOR
         OI    QFILT2+L'QSETUP,QSETUP SET SETUP   HOLD INDICATOR
         B     OPFLAG12            GO CHECK FOR ANOTHER FLAG
OPFLAG6  OI    QFILT2+L'QOHOLD,QOHOLD SET OPERATOR HOLD INDICATOR
         B     OPFLAG12            GO CHECK FOR ANOTHER FLAG
OPFLAG7  OI    QFILT2+L'QUHOLD,QUHOLD SET USER HOLD INDICATOR
         B     OPFLAG12            GO CHECK FOR ANOTHER FLAG
OPFLAG8  OI    QFILT2+L'QSETUP,QSETUP SET SETUP HOLD INDICATOR
         B     OPFLAG12            GO CHECK FOR ANOTHER FLAG
OPFLAG9  OI    QFILT2+L'QABEND,QABEND SET ABEND INDICATOR
         OI    QFILT2+L'QJCLERR,QJCLERR SET JCL ERROR INDICATOR
         B     OPFLAG12            GO CHECK FOR ANOTHER FLAG
OPFLAG10 OI    QFILT2+L'QABEND,QABEND SET ABEND INDICATOR
         B     OPFLAG12            GO CHECK FOR ANOTHER FLAG
OPFLAG11 OI    QFILT2+L'QJCLERR,QJCLERR SET JCL ERROR INDICATOR
         B     OPFLAG12            GO CHECK FOR ANOTHER FLAG
OPFLAG12 CLI   0(R4),C'+'          SEE IF ANOTHER FLAG
         BNE   CKOPND              NO, GO GET NEXT OPERAND
         LR    R3,R4               SET ADDRESS OF NEXT FLAG OPTION
         B     OPFLAG2             GO CHECK NEXT FLAG OPTION
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE OWNERID OPERAND                                  *
*                                                                     *
***********************************************************************
         SPACE 1
OPOWN    OI    QMISC+L'OWNER,OWNER SET OWNERID REQUEST FLAG
         XC    OWNERID,OWNERID     SET OWNERID TO ZEROS
         LA    R15,8               SET LOOP COUNTER
OPOWN1   CLI   0(R3),C'='          FIND END OF KEYWORD
         BE    OPOWN2              YES, BRANCH
         CLI   0(R3),C' '          FIND END OF KEYWORD
         BE    CKOPND              YES, NO OWNERID, GET NEXT OPERAND
         CLI   0(R3),C','          FIND END OF KEYWORD
         BE    CKOPND              YES, NO OWNERID, GET NEXT OPERAND
         LA    R3,1(R3)            INCREMENT TO NEXT CHAR
         BCT   R15,OPOWN1          LOOP
         B     BADOPRND            NO '=' ERROR
OPOWN2   LA    R3,1(R3)            INCREMENT PAST '='
         LR    R4,R3               SAVE START ADDRESS OF OPERAND
         LA    R15,8               SET LOOP COUNTER
OPOWN3   CLI   0(R4),C' '          PROPER END OF VALUE
         BE    OPOWN4              YES, BRANCH
         CLI   0(R4),C','          PROPER END OF VALUE
         BE    OPOWN4              YES, BRANCH
         LA    R4,1(R4)            INCREMENT TO NEXT CHAR OF OPERAND
         BCT   R15,OPOWN3          LOOP
         B     BADOPRND            OWNERID TOO LONG
OPOWN4   SR    R4,R3               CALCULATE LENGTH OF OWNERID
         LTR   R4,R4               TEST LENGTH
         BZ    BADOPRND            ZERO, ERROR
         BCTR  R4,0                MAKE MACHINE LENGTH
         MVC   OWNERID,BLANKS      BLANK OWNERID
         EX    R4,MVCOWNER         SAVE OWNERID
         B     CKOPND              GO GET NEXT OPERAND
MVCOWNER MVC   OWNERID(0),0(R3)    **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE RESOURCE OPERAND                                 *
*                                                                     *
***********************************************************************
         SPACE 1
OPRES    OI    QMISC+L'RESOURCE,RESOURCE SET RESOURCE REQUESTED FLAG
         B     CKOPND              GO GET NEXT OPERAND
         EJECT
***********************************************************************
*                                                                     *
*        SCAN THE JOB QUEUE FOR THE JOB LIST                          *
*                                                                     *
***********************************************************************
         SPACE 1
JQESCAN  LH    R1,LOWJOB           LOAD JOB NUMBER
         $QLOC (R1)                GET JQE FOR THIS JOB NUMBER
         BZ    NEXTJQE             GET NEXT JQE IF NOT FOUND
         LR    R9,R1               SAVE JQE ADDRESS
         USING JQE,R9              SET ADDRESSABILITY TO JQE
         LA    R1,QBITS            POINT TO EXIT PARM LIST
EXIT255  $EXIT 255,ENVIRON=JES2,MAXRC=8 CALL FORMAT ROUTINE
         CH    R15,=H'8'           TEST FOR CONSOLE BUFFER SHORTAGE
         BNE   NEXTJQE             NO, CONTINUE
         B     ENDJOB              YES, GET OUT
NEXTJQE  LH    R1,LOWJOB           LOAD PREVIOUS JOB NUMBER
         LA    R1,1(R1)            ADD 1 TO JOB NUMBER
         STH   R1,LOWJOB           SAVE NEW JOB NUMBER
         CH    R1,HIGHJOB          SEE IF END OF RANGE
         BNH   JQESCAN             NO, LOOP
         EJECT
***********************************************************************
*                                                                     *
*        DISPALY THE PERCENT SPOOL UTILIZATION MESSAGE                *
*                                                                     *
***********************************************************************
ENDJOB   LA    R15,100             SET TO 100% IF NO TRACK GROUPS
         ICM   R1,B'1111',$TGTOTAL LOAD TOTAL NUMBER OF TRACK GROUPS
         BZ    ENDJOB1             NONE, BRANCH
         L     R15,$TGALLOC        LOAD NUMBER OF ALLOC TRACK GROUPS
         M     R14,=F'100'         MULTIPLY BY 100 FOR PERCENT
         DR    R14,R1              COMPUTE PERCENT= (ALLOC*100)/TOTAL
         LTR   R15,R15             TEST QUOTIENT
         BNZ   ENDJOB1             NOT ZERO, BRANCH
         LA    R15,1               MAKE AT LEAST 1 PERCENT
ENDJOB1  CVD   R15,DBL             CONVERT TO PACKED
         MVC   COMMAND(L'MSG1),MSG1 SET PERCENT SPOOL UTIL MSG
         MVC   COMMAND(4),=X'40202120' SET EDIT MASK
         ED    COMMAND(4),DBL+6  EDIT PERCENT TO MESSAGE
         LA    R0,L'MSG1           SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=946    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
         EJECT
*****************************************************************
*                                                               *
*        SUBROUTINE TO VERIFY CONSOLE/AREA                      *
*                                                               *
*****************************************************************
         SPACE 1
MSGVCCA  TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM
         BOR   R4                  YES, UCM AND AREA ARE OK
         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA
         USING CWA,R2              SET ADDRESSABILITY TO CWA
         MVC   XASCID(1),COMUCM    SET UCM ID
         MVC   XASDID(1),COMUCMA   SET AREA ID
         CLI   XASDID,0            SEE IF AREA ID SPECIFIED
         BNZ   MSGSSAOP            YES, BRANCH
         MVI   XASDID,C'Z'         NO,  FORCE AREA Z
MSGSSAOP MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT
         MVI   XAN,X'22'           SET ID FOR VERIFIER
         MODESET EXTKEY=ZERO       GET KEY 0
         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE
         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24
         BALR  R14,R15             ENTER IT
         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE
         MODESET EXTKEY=HASP       RETURN TO KEY 1
         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR
         BNHR  R4                  NO, RETURN TO CALLER
         SLR   R3,R3               CLEAR REGISTER FOR ICM
         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID
         MVI   COMUCMA,0           FORCE NO DISPLAY AREA
         CH    R15,=H'12'          SEE IF CONSOLE DOWN
         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE
         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO
         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD
         $CWTO L=L'CMBMSG,MSGID=908 ECHO THE COMMAND
         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT
         STC   R3,MBVINVA          SET AREA
         SRL   R3,8                ALIGN CONSOLE ID
         CVD   R3,$DOUBLE          CONVERT TO PACKED
         MVC   DBL(4),=X'F0212020' SET EDIT MASK
         ED    DBL(4),$DOUBLE+6    EDIT CONSOLE ID TO AREA
         MVC   MBVINVC,DBL+2       MOVE CONSOLE ID TO MESSAGE
         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER
         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE
         B     EXIT8               GET OUT
         DROP  R2                  DROP ADDRESSABILITY TO CWA
         EJECT
*****************************************************************
*                                                               *
*       R E D I R E C T   R O U T I N E   C O N S T A N T S     *
*                                                               *
*****************************************************************
         SPACE 1
MOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX
MBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '
MBVINVL  EQU   *-MBVINV
MBVINVC  EQU   COMMAND+MBVINVL-16,2
MBVINVA  EQU   MBVINVC+2,1
FBLFLG   EQU   COMEWORK+2          FLAG BYTE
COMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER
FBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM
FBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED
FBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED
         EJECT
***********************************************************************
*        CONSTANTS FOR $DN                                            *
***********************************************************************
         SPACE 3
BLANKS   DC    CL20' '             STRING OF 20 BLANKS
         SPACE 3
MSG1     DC    C' XXX PERCENT SPOOL UTILIZATION'
MSG2     DC    C' INVALID OPERAND'
MSG3     DC    C' INSUFFICIENT OPERANDS'
         EJECT
***********************************************************************
*                                                                     *
*        INVALID $DN OPERAND                                          *
*                                                                     *
***********************************************************************
         SPACE 1
BADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND
         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG
         MVC   COMMAND+9(L'MSG2),MSG2 SET ERROR MESSAGE
         LA    R0,L'MSG2+9         SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
         EJECT
***********************************************************************
*                                                                     *
*        INSUFFICIENT OPERANDS                                        *
*                                                                     *
***********************************************************************
         SPACE 1
INSUFF   MVC   COMMAND(L'MSG3),MSG3 SET ERROR MESSAGE
         LA    R0,L'MSG3           SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE DESTINATION RANGE POINTED TO BY REGISTER 1       *
*        ON ENTRY.  ANY ERRORS WILL RESULT IN THE OPERAND AND         *
*        SUBSEQUENTLY THE COMMAND BEING REJECTED BY AN INVALID        *
*        OPERAND MESSAGE.  IF NO ERRORS ARE DETECTED, THE             *
*        DESTINATION RANGE VALUES WILL BE STORED IN LOWROUT           *
*        AND HIGHROUT RESPECTIVELY WITH BOTH VALUES BEING THE         *
*        SAME IF ONLY ONE DESTINATION IS SPECIFIED.                   *
*                                                                     *
*    RANGES ALLOWED  -    ONLY ASCENDING RANGES ARE PERMITTED         *
*    --------------                                                   *
*    NNNNNRNNNN (-RMMMM)                                              *
*    NNNN.RNNNN (-RMMMM)                                              *
*    NAME.RNNNN (-RMMMM)                                              *
*                      -  RANGE OF REMOTES AT A GIVEN NODE            *
*                        (NAME IS 8-BYTE EBCDIC FROM A DESTID CARD    *
*    NNNNN(-NMMMM)     -  RANGE OF ALL REMOTES/UNITS AT GIVEN NODE    *
*    UNNNN(-UMMMM)     -  RANGE OF UNITS AT THE LOCAL NODE ONLY       *
*    RNNNN(-RMMMM)     -  RANGE OF REMOTES AT THE LOCAL NODE ONLY     *
*    NAME1(-NAME2)     -  AS ANY ONE OF THE ABOVE, BUT NO OTHERS      *
*    LOCAL             -  ALL SPECIAL LOCAL                           *
*                                                                     *
***********************************************************************
PROCDEST $SAVE                     SET REGISTER SAVE AREA
         NI    MISCSW1,255-TWOPART  TURN OFF TWO PART DEST SWITCH
         LR    R3,R1               SAVE START OF OPERAND
         LR    R4,R1               SAVE START OF OPERAND
         SLR   R1,R1               SET ZERO LENGTH
         MVC   DEST1P1,=CL10' '    BLANK DEST1 PART1
         MVC   DEST1P2,=CL10' '    BLANK DEST1 PART2
         MVC   DEST2P1,=CL10' '    BLANK DEST2 PART1
PRDLOOP CLI    0(R4),C'-'          END OF FIRST OPERAND
         BE    PRD2                YES, BRANCH
         CLI   0(R4),C','          END OF LAST OPERAND
         BE    PRD2                YES, BRANCH
         CLI   0(R4),C' '          END OF LAST OPERAND
         BE    PRD2                YES, BRANCH
         CLI   0(R4),C'.'          TWO PART DESTINATION
         BE    PRD1                YES, BRANCH
         LA    R4,1(,R4)           INCREMENT TO NEXT CHAR OF DEST
         LA    R1,1(,R1)           ADD 1 TO LENGTH
         B     PRDLOOP             LOOP UNTIL DONE
PRD1     OI    MISCSW1,TWOPART     SET TWO PART DEST INDICATION
         CLI   DEST1P1,C' '        HAS FIRST ALREADY BEEN SPECIFIED
         BNE   BADOPRND            YES, ERROR
         B     PRD2                GO PROCESS DEST FIELD
PRD2     LTR   R1,R1               CHECK LENGTH OF DEST
         BZ    BADOPRND            ZERO, ERROR
         CH    R1,=H'10'           CHECK LENGTH OF DEST
         BH    BADOPRND            GREATER THAN 10, ERROR
         BCTR  R1,0                MAKE MACHINE LENGTH
         CLI   DEST1P1,C' '        HAS PART1 ALREADY BEEN SPECIFIED
         BNE   PRD3                YES, BRANCH
         EX    R1,MDEST1P1         MOVE DEST1 PART1
         B     PRD5                GET OUT
PRD3     TM    MISCSW1,TWOPART     SEE IF TWO PART DEST INDICATION
         BZ    PRD4                NO, BRANCH
         CLI   DEST1P2,C' '        SEE IF PART2 ALREADY BEEN SPECIFIED
         BNE   PRD4                YES, THIS IS THE SECOND DEST
         EX    R1,MDEST1P2         MOVE DEST1 PART2
         B     PRD5                GET OUT
PRD4     CLI   DEST2P1,C' '        SEE IF DEST2 ALREADY BEEN SPECIFIED
         BNE   BADOPRND            YES, ERROR
         EX    R1,MDEST2P1         MOVE DEST2 PART1
         B     PRD5                GET OUT
MDEST1P1 MVC   DEST1P1(0),0(R3)    MOVE DEST1 PART1
MDEST1P2 MVC   DEST1P2(0),0(R3)    MOVE DEST1 PART2
MDEST2P1 MVC   DEST2P1(0),0(R3)    MOVE DEST2 PART1
PRD5     CLI   0(R4),C'-'          SEE IF DESTINATION RANGE SPECIFIED
         BE    PRD6                YES, BRANCH
         CLI   0(R4),C'.'          SEE IF TWO PART DEST SPECIFIED
         BE    PRD6                YES, BRANCH
         B     PRD7                GO CONVERT DEST TO ROUTE CODES
PRD6     LA    R4,1(,R4)           INCREMENT PAST '-' OR '.'
         LR    R3,R4               SAVE START ADDRESS
         SLR   R1,R1               RESET LENGTH TO ZERO
         B     PRDLOOP             LOOP FOR NEXT DESTINATION
PRD7     DS    0H
         MVC   COMDWORK(2),COMJNOD SET DEFAULT NODE
         $DEST DEST1P1,COMDWORK,LEN=10 CONVERT DEST1 PART1
         BZ    BADOPRND            BAD DEST, ERROR
         ST    R1,LOWROUT          SAVE ROUTE CODE
         CLI   DEST1P2,C' '        CHECK IF TWO PART DEST
         BE    PRD9                NO, BRANCH
PRD8     CLM   R1,B'0011',$ZEROES  SEE IF NODAL DESTINATION ONLY
         BNE   BADOPRND            NO, ERROR
         CLM   R1,B'1100',$ZEROES  SEE IF NODE NUMBER SET
         BE    BADOPRND            NO, ERROR
         ST    R1,COMDWORK         SET DEFAULT NODE FOR SECOND PART
         $DEST DEST1P2,COMDWORK,LEN=10 CONVERT DEST1 PART1
         BZ    BADOPRND            BAD DEST, ERROR
         ST    R1,LOWROUT          SAVE ROUTE CODE
         CLM   R1,B'1100',COMDWORK MAKE SURE NODE DEFAULTED
         BNE   BADOPRND            NO, ERROR
PRD9     MVC   HIGHROUT,LOWROUT    SET DEST RANGE TO EQUAL VALUES
         CLI   DEST2P1,C' '        WAS DEST RANGE SPECIFIED
         BE    PRD10               NO, BRANCH
         $DEST DEST2P1,COMDWORK,LEN=10 CONVERT DEST2 PART1
         BZ    BADOPRND            BAD DEST, ERROR
         ST    R1,HIGHROUT         SAVE ROUTE CODE
PRD10    CLC   HIGHROUT,LOWROUT    CHECK FOR ASCENDING RANGE
         BL    BADOPRND            NO, ERROR
         $RETURN RC=0              RETURN TO CALLERERAND
         EJECT
***********************************************************************
*                                                                     *
*                    E X I T     R O U T I N E S                      *
*                                                                     *
*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *
*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *
*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *
*        RC = 12 - TERMINATE ISSUING THE "OK" MESSAGE                 *
*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *
*                                                                     *
***********************************************************************
EXIT0    LA    R15,0               SET RETURN CODE TO 0
         $RETURN RC=(R15)          RETURN TO JES2
EXIT8    $FREEBUF (R8)             FREE THE WORK AREA
         $FREEBUF (R10)            FREE THE WORK AREA
         LA    R15,8               SET RETURN CODE TO 8
         $RETURN RC=(R15)          RETURN TO JES2
         EJECT
         LTORG
         EJECT
         $MODEND
         END
