         TITLE 'JES2 $TUCC7 COMMAND PROCESSOR'
***********************************************************************
*                                                                     *
*        ENVIRONMENT   MVS SP 2.2.0                                   *
*                                                                     *
*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $TUCC7        *
*        COMMAND WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS        *
*        AN EXIT5 EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY       *
*        $TUCC7 COMMAND WHEN ENCOUNTERED.                             *
*                                                                     *
*                                                                     *
*        THE $TUCC7 COMMAND HAS THE FOLLOWING SYNTAX:                 *
*                                                                     *
*        $TUCC7,                                                      *
*              STOP      STOP UCC7 TASK PROCESSING BY TURNING         *
*                        OFF THE ENABLED BIT.                         *
*                                                                     *
*              START     START UCC7 TASK PROCESSING BY RELOADING      *
*                        THE UCC7 INTERFACE MODULE AND TURNING        *
*                        ON THE ENABLED BIT.                          *
*                                                                     *
*              RESTART   RESTART UCC7 TASK PROCESSING BY RELOADING    *
*                        THE UCC7 INTERFACE MODULE AND TURNING ON     *
*                        THE ENABLED BIT.                             *
*                                                                     *
*              STATUS    DISPLAY THE STATUS OF THE UCC7 TASK.         *
*                                                                     *
*                                                                     *
*        WRITTEN BY:                                                  *
*                        JOHN V. HOOPER                               *
*                        FIRST UNION NATIONAL BANK                    *
*                        301 SOUTH TRYON STREET                       *
*                        CHARLOTTE, N.C.  28288                       *
*                        (704) 374-2427                               *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *
*                                                                     *
*        1)  THE HASP990 MESSAGE WILL BE ISSUED FOR EACH REQUEST      *
*                                                                     *
*        $HASP990 UCC7 START   PROCESSING SUCESSFULLY COMPLETED       *
*        $HASP990 UCC7 STOP    PROCESSING SUCESSFULLY COMPLETED       *
*        $HASP990 UCC7 RESTART PROCESSING SUCESSFULLY COMPLETED       *
*        $HASP990 UCC7 DEMAND  PROCESSING SUCESSFULLY COMPLETED       *
*                                                                     *
*        2)  THE HASP990 MESSAGE WILL BE ISSUED FOR EACH STATUS       *
*            REQUEST.                                                 *
*                                                                     *
*        3)  THE HASP990 MESSAGE WILL BE ISSUED FOR EACH DEMAND       *
*            REQUEST.                                                 *
*                                                                     *
*        $HASP990 UCC7 JOBNAME =JOBNAME                               *
*        $HASP990 UCC7 GROUPID =OUTPUT GROUP NAME                     *
*                                                                     *
*        $HASP990 UCC7 ENABLED/DISABLED INTERFACE LOADED              *
*                                                                     *
*        4)  THE HASP999 MESSAGE WILL BE ISSUED WHEN AN INVALID       *
*            OPERAND KEYWORD OR VALUE IS DETECTED OR WHEN ONE         *
*            OF THE POSITIONAL KEYWORDS ARE NOT FIRST IN THE LIST.    *
*                                                                     *
*        $HASP999 ......... INVALID OPERAND                           *
*                                                                     *
*        5)  THE HASP999 MESSAGE WILL BE ISSUED WHEN THE L=CCA        *
*            OPERAND SPECIFIES AN INVALID CONSOLE OR DISPLAY          *
*            AREA.                                                    *
*                                                                     *
*        $HASP999 RESPONSE LOCATION L=CCA UNAVAILABLE                 *
*                                                                     *
***********************************************************************
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*              M A C R O S   U S E D   I N   J 0 0 5 U C C 7          *
*                                                                     *
*        01)  $AMODE       SYS1.HASPSRC                               *
*        02)  $BUFFER      SYS1.HASPSRC                               *
*        03)  $CAT         SYS1.HASPSRC                               *
*        04)  $CMB         SYS1.HASPSRC                               *
*        05)  $COMWORK     SYS1.HASPSRC                               *
*        06)  $CWA         SYS1.HASPSRC                               *
*        07)  $CWTO        SYS1.HASPSRC                               *
*        08)  $DTE         SYS1.HASPSRC                               *
*        09)  $ENTRY       SYS1.HASPSRC                               *
*        10)  $ERA         SYS1.HASPSRC                               *
*        11)  $GETBUF      SYS1.HASPSRC                               *
*        12)  $FCSDTE      SYS1.HASPSRC (USER)                        *
*        13)  $FCSJITB     SYS1.HASPSRC (USER)                        *
*        14)  $FCSUCT      SYS1.HASPSRC (USER)                        *
*        15)  $FREEBUF     SYS1.HASPSRC                               *
*        16)  $HASPEQU     SYS1.HASPSRC                               *
*        17)  $HASPGBL     SYS1.HASPSRC                               *
*        18)  $HCT         SYS1.HASPSRC                               *
*        19)  $JCT         SYS1.HASPSRC                               *
*        20)  $JOE         SYS1.HASPSRC                               *
*        21)  $JOT         SYS1.HASPSRC                               *
*        22)  $JQE         SYS1.HASPSRC                               *
*        23)  $MIT         SYS1.HASPSRC                               *
*        24)  $MODEND      SYS1.HASPSRC                               *
*        25)  $MODULE      SYS1.HASPSRC                               *
*        26)  $PADDR       SYS1.HASPSRC                               *
*        27)  $PCE         SYS1.HASPSRC                               *
*        28)  $RETURN      SYS1.HASPSRC                               *
*        29)  $SAVE        SYS1.HASPSRC                               *
*        30)  $STORE       SYS1.HASPSRC                               *
*        31)  $XECB        SYS1.HASPSRC                               *
*        32)  $WAIT        SYS1.HASPSRC                               *
*        33)  IAZRESPA     SYS1.AMODGEN                               *
*        34)  IFGRPL       SYS1.MACLIB                                *
*        35)  MODESET      SYS1.AMODGEN                               *
*        36)  POST         SYS1.MACLIB                                *
*                                                                     *
*                                                                     *
*              L I N K A G E    E D I T O R    I N F O                *
*                                                                     *
*        SIZE:       2K                                               *
*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
         COPY  $HASPGBL
J005UCC7 $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X
               ENVIRON=JES2,                                           X
               TITLE='JES2 $TUCC7 COMMAND PROCESSOR',                  X
               $BUFFER,            GENERATE HASP BUFFER DSECT          X
               $CAT,               GENERATE HASP CAT DSECT             X
               $CMB,               GENERATE HASP CMB DSECT             X
               $COMWORK,           GENERATE HASP COMWORK DSECT         X
               $CWA,               GENERATE HASP CWA DSECT             X
               $DTE,               GENERATE HASP DTE DSECT             X
               $ERA,               GENERATE HASP ERA DSECT             X
               $HASPEQU,           GENERATE HASP EQUATES               X
               $HCT,               GENERATE HASP HCT DSECT             X
               $JCT,               GENERATE HASP JCT DSECT             X
               $JOE,               GENERATE HASP JOE DSECT             X
               $JOT,               GENERATE HASP JOT DSECT             X
               $JQE,               GENERATE HASP JQE DSECT             X
               $MIT,               GENERATE HASP MIT DSECT             X
               $PADDR,             GENERATE HASP PADDR DSECT           X
               $PCE,               GENERATE HASP PCE DSECT             X
               $XECB,              GENERATE HASP XECB DSECT            X
               CVT,                GENERATE MVS  CVT DSECT             X
               RESPA,              GENERATE MVS  RESPA  DSECT          X
               RPL,                GENERATE MVS  IFGRPL DSECT          X
               UCB                 GENERATE MVS  UCB DSECT
               SPACE 3
         EJECT
***********************************************************************
*                                                                     *
*        USER ADDITION OF THE DTE                                     *
*                                                                     *
***********************************************************************
DTE      DSECT
         ORG  DTEWORK
         DS   0CL2048              2048 BYTE EXTENSION
         $FCSDTE ,                 MAP THE COMMON DTE EXTENSION AREA
J005UCC7 CSECT ,                   RESTORE THE CSECT ENVIRONMENT
         EJECT
         $FCSUCT ,                 MAP THE UCT DSECT
J005UCC7 CSECT ,                   RESTORE THE CSECT ENVIRONMENT
         EJECT
         $FCSJITB ,                MAP THE JITB DSECT
J005UCC7 CSECT ,                   RESTORE THE CSECT ENVIRONMENT
         EJECT
***********************************************************************
*                                                                     *
*        PROGRAM WORK AREAS                                           *
*                                                                     *
***********************************************************************
         SPACE 3
$UC7WORK DSECT                     COMMAND WORK AREA
         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****
JITBAREA DS    CL200               RESERVE 200 CHARACTERS FOR JITB
OPNDCTR  DS    H                   COUNT OF COMMAND OPERANDS
DSNAME   DS    CL44                REQUESTED NEW DSNAME
DBL1     DS    D                   DOUBLE WORD WORK AREA
WRKA     DS    CL10                EXIT WORK AREA
J005UCC7 CSECT ,                   RESTORE THE CSECT ENVIRONMENT
         TITLE 'JES2 $TUCC7 COMMAND PROCESSOR'
***********************************************************************
*                                                                     *
*        EXIT MAIN ENTRY POINT                                        *
*                                                                     *
***********************************************************************
E005UCC7 $ENTRY BASE=R12
         SPACE 1
         $SAVE                     SAVE CALLER'S REGISTERS
         LR    R12,R15             LOAD BASE REGISTER
         EJECT
***********************************************************************
*                                                                     *
*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *
*                                                                     *
*        R5       - ADDRESS OF THE CURRENT OPERAND                    *
*        R6       - INCREMENT VALUE OF 4                              *
*        R7       - ADDRESS OF THE LAST OPERAND                       *
*        R11      - ADDRESS OF THE HCT                                *
*        R13      - ADDRESS OF THE HASPCOMM PCE                       *
*        R14      - RETURN ADDRESS                                    *
*        R15      - ENTRY ADDRESS                                     *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        SEE IF THIS IS A $TUCC7 COMMAND                              *
*                                                                     *
***********************************************************************
         CLC   COMVERB(5),=C'TUCC7' SEE IF THIS IS THE $TUCC7 COMMAND
         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT
         EJECT
***********************************************************************
*                                                                     *
*        GET A JES2 BUFFER FOR REENTRANCY AND                         *
*        CLEAR THE COMMAND WORK AREA                                  *
*                                                                     *
***********************************************************************
         SPACE 1
         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA
         LR    R9,R1               SAVE WORK AREA ADDRESS
         USING $UC7WORK,R9         SET ADDRESSABILITY TO WORK AREA
         LA    R14,$UC7WORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS
         LH    R15,$BUFSIZE        SET   'TO'   LENGTH
         SLR   R0,R0               CLEAR 'FROM' ADDRESS
         SLR   R1,R1               CLEAR 'FROM' LENGTH
         MVCL  R14,R0              CLEAR THE BUFFER
         CLI   COMVERB+5,C' '      SEE IF OTHER OPERANDS SPECIFIED
         BE    INSUFF              NO, INSUFFICIENT OPERANDS
         ICM   R10,15,$UCT         LOAD ADDRESS OF UCT
         BZ    NOUCC7              ZERO, NONE, ERROR
         USING UCT,R10             SET ADDRESSABILITY TO UCT
         LA    R8,JITBAREA         LOAD ADDRESS OF JITB AREA
         USING JITB,R8             SET ADDRESSABILITY TO JITB
         MVC   JITBID,=C'JITB'     SET THE JITBID FIELD
         EJECT
***********************************************************************
*                                                                     *
*        EXAMINE THE COMMAND OPERANDS                                 *
*                                                                     *
***********************************************************************
CKOPND   BXH   R5,R6,CTUCC7OK      IF NO MORE GO PROCESS THEM
         L     R3,0(,R5)           POINT TO OPERAND
         LH    R15,OPNDCTR         LOAD OPERAND COUNTER
         LA    R15,1(R15)          ADD 1 TO COUNTER
         STH   R15,OPNDCTR         SAVE OPERAND COUNTER
         CLC   0(4,R3),=C'DMD='    SEE IF 'DEMAND' OPTION
         BE    OPDMD               YES, GO PROCESS IT
         CLC   0(7,R3),=C'DEMAND=' SEE IF 'DEMAND' OPTION
         BE    OPDMD               YES, GO PROCESS IT
         CLC   OPNDCTR,=H'1'       IS THIS THE FIRST OPERAND
         BNE   BADOPRND            NO, INVALID OPERAND
         CLC   0(5,R3),=C'START'   SEE IF 'START' OPTION
         BE    OPSTART             YES, GO PROCESS IT
         CLC   0(4,R3),=C'STOP'    SEE IF 'STOP' OPTION
         BE    OPSTOP              YES, GO PROCESS IT
         CLC   0(7,R3),=C'RESTART' SEE IF 'RESTART' OPTION
         BE    OPREST              YES, GO PROCESS IT
         CLC   0(6,R3),=C'STATUS'  SEE IF 'STATUS' OPTION
         BE    OPSTAT              YES, GO PROCESS IT
         B     BADOPRND            NOT VALID, ERROR
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE START OPERAND                                    *
*                                                                     *
***********************************************************************
         SPACE 1
OPSTART  MVI   JITBFLG,JITBSTAR    TURN ON 'START' OPTION
         CLI   5(R3),C' '          FIVE CHARACTER OPERAND
         BE    CKOPND              YES, GO GET NEXT OPERAND
         CLI   5(R3),C','          FIVE CHARACTER OPERAND
         BNE   BADOPRND            NO, ERROR
         B     CKOPND              GO GET NEXT OPERAND
         SPACE 1
***********************************************************************
*                                                                     *
*        PROCESS THE STOP OPERAND                                     *
*                                                                     *
***********************************************************************
         SPACE 1
OPSTOP   MVI   JITBFLG,JITBSTOP    TURN ON 'STOP' OPTION
         CLI   4(R3),C' '          FOUR CHARACTER OPERAND
         BE    CKOPND              YES, GO GET NEXT OPERAND
         CLI   4(R3),C','          FOUR CHARACTER OPERAND
         BNE   BADOPRND            NO, ERROR
         B     CKOPND              GO GET NEXT OPERAND
         SPACE 1
***********************************************************************
*                                                                     *
*        PROCESS THE RESTART OPERAND                                  *
*                                                                     *
***********************************************************************
         SPACE 1
OPREST   MVI   JITBFLG,JITBREST    TURN ON 'RESTART' OPTION
         CLI   7(R3),C' '          SEVEN CHARACTER OPERAND
         BE    CKOPND              YES, GO GET NEXT OPERAND
         CLI   7(R3),C','          SEVEN CHARACTER OPERAND
         BNE   BADOPRND            NO, ERROR
         B     CKOPND              GO GET NEXT OPERAND
         SPACE 1
***********************************************************************
*                                                                     *
*        PROCESS THE STATUS OPERAND                                   *
*                                                                     *
***********************************************************************
         SPACE 1
OPSTAT   MVI   JITBFLG,JITBDISP    TURN ON 'STATUS' OPTION
         CLI   6(R3),C' '          SIX CHARACTER OPERAND
         BE    CKOPND              YES, GO GET NEXT OPERAND
         CLI   6(R3),C','          SIX CHARACTER OPERAND
         BNE   BADOPRND            NO, ERROR
         B     CKOPND              GO GET NEXT OPERAND
         SPACE 1
***********************************************************************
*                                                                     *
*        PROCESS THE DEMAND OPERAND                                   *
*                                                                     *
***********************************************************************
         SPACE 1
OPDMD    MVI   JITBKEY,C' '        BLANK ENTIRE
         MVC   JITBKEY+1(15),JITBKEY   FILE KEY FIELD
         MVI   JITBFLG,JITBDMD     TURN ON OPTION BIT
         LA    R15,8               SET LOOP COUNTER
OPDMD1   CLI   0(R3),C'='          FIND END OF KEYWORD
         BE    OPDMD2              YES, BRANCH
         LA    R3,1(R3)            INCREMENT TO NEXT CHAR
         BCT   R15,OPDMD1          LOOP
         B     BADOPRND            NO '=' ERROR
OPDMD2   LA    R3,1(R3)            INCREMENT PAST '='
         LR    R4,R3               SAVE START OF VALUE ADDRESS
         LA    R15,17              SET LOOP COUNTER
OPDMD3   CLI   0(R4),C','          PROPER END OF VALUE
         BE    OPDMD4              YES, BRANCH
         CLI   0(R4),C' '          PROPER END OF VALUE
         BE    OPDMD4              YES, BRANCH
         LA    R4,1(R4)            INCREMENT TO NEXT CHAR
         BCT   R15,OPDMD3          LOOP
         B     BADOPRND            OPERAND TOO LONG
OPDMD4   LR    R15,R4              SAVE END ADDRESS
         SR    R15,R3              CALCULATE LENGTH
         LTR   R15,R15             TEST LENGTH
         BZ    BADOPRND            ZERO, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,MVKEY           SAVE KEY
***********************************************************************
*        TRANSLATE PLACEHOLDER CHARACTERS IN KEY TO BLANKS            *
***********************************************************************
         LA    R15,16              SET LOOP COUNTER
         LA    R14,JITBKEY         POINT TO JITB KEY
OPDMD5   CLI   0(R14),C'*'         SEE IF PLACEHOLDER
         BE    OPDMD6              YES, BRANCH
         CLI   0(R14),C'.'         SEE IF PLACEHOLDER
         BNE   OPDMD7              NO,  BRANCH
OPDMD6   MVI   0(R14),C' '         MAKE IT A BLANK
OPDMD7   LA    R14,1(R14)          INCREMENT TO NEXT CHAR
         BCT   R15,OPDMD5          LOOP
         B     CKOPND              GO GET NEXT OPERAND
MVKEY    MVC   JITBKEY(0),0(R3)    **** EXECUTE ONLY ****
         SPACE 1
         EJECT
*****************************************************************
*                                                               *
*        CHECK FOR REDIRECTION OF RESPONSES                     *
*                                                               *
*****************************************************************
         SPACE 1
CTUCC7OK TM    COMFLAG,CMBFLAGU    IS THIS A UCM
         BZ    PROCESS             NO, SKIP REDIRECTION
REDIR    TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM
         BNZ   REDIR1              SKIP AUTOMATIC L=CCA
         LA    R1,2                LOAD REDIRECT OFFSET FOR $TJIT
*                                  SAME AS FOR $DF
         BCTR  R1,0                REDUCE BY 1
         SLL   R1,1                DOUBLE
         SLR   R2,R2               ZERO REGISTER FOR IC
         IC    R2,COMUCM           PICK UP CURRENT UCM ID
         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA
         USING CWA,R14             SET ADDRESSABILITY TO CWA
         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM
         BH    REDIR1              YES, ERROR, NO AUTOMATIC REDIRECTION
         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY
         AR    R1,R2               COMBINE OFFSETS
         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY
         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID
         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET
         BO    REDIR1              YES, SKIP AUTOMATIC REDIRECTION
         MVC   COMUCMA,CWACONA(R1) SET NEW AREA
         DROP  R14                 DROP ADDRESSABILITY TO CWA
         EJECT
*****************************************************************
*                                                               *
*        ROUTINE TO VERIFY CONSOLE/AREA                         *
*                                                               *
*****************************************************************
         SPACE 1
REDIR1   TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM
         BO    REDIR3              YES, UCM AND AREA ARE OK
         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA
         USING CWA,R2              SET ADDRESSABILITY TO CWA
         MVC   XASCID(1),COMUCM    SET UCM ID
         MVC   XASDID(1),COMUCMA   SET AREA ID
         CLI   XASDID,0            SEE IF AREA ID SPECIFIED
         BNZ   REDIR2              YES, BRANCH
         MVI   XASDID,C'Z'         NO,  FORCE AREA Z
REDIR2   MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT
         MVI   XAN,X'22'           SET ID FOR VERIFIER
         MODESET EXTKEY=ZERO       GET KEY 0
         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE
         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24
         BALR  R14,R15             ENTER IT
         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE
         MODESET EXTKEY=HASP       RETURN TO KEY 1
         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR
         BNH   REDIR3              NO, GO ISSUE ERROR MESSAGE
         SLR   R3,R3               CLEAR REGISTER FOR ICM
         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID
         MVI   COMUCMA,0           FORCE NO DISPLAY AREA
         CH    R15,=H'12'          SEE IF CONSOLE DOWN
         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE
         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO
         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD
         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND
         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT
         STC   R3,MBVINVA          SET AREA
         SRL   R3,8                ALIGN CONSOLE ID
         CVD   R3,$DOUBLE          CONVERT TO PACKED
         MVC   WRKA(4),=X'F0212020' SET EDIT MASK
         ED    WRKA(4),$DOUBLE+6   EDIT CONSOLE ID TO AREA
         MVC   MBVINVC,WRKA+2      MOVE CONSOLE ID TO MESSAGE
         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER
         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE
         B     EXIT8               GET OUT
         DROP  R2                  DROP ADDRESSABILITY TO CWA
REDIR3   CLI   COMUCMA,0           TEST FOR DISPLAY AREA
         BE    PROCESS             IF NOT, SKIP
         MVI   COMLINET,X'80'      SET CONTROL LINE
         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND
         MVI   COMLINET,X'20'      SET DATA LINE
         B     PROCESS             CONTINUE
         EJECT
*****************************************************************
*                                                               *
*       R E D I R E C T   R O U T I N E   C O N S T A N T S     *
*                                                               *
*****************************************************************
         SPACE 1
MOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX
MBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '
MBVINVL  EQU   *-MBVINV
MBVINVC  EQU   COMMAND+MBVINVL-16,2
MBVINVA  EQU   MBVINVC+2,1
FBLFLG   EQU   COMEWORK+2          FLAG BYTE
COMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER
FBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM
FBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED
FBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE REQUESTED OPERANDS                               *
*                                                                     *
***********************************************************************
PROCESS  DS    0H
CK1      TM    JITBFLG,JITBDISP    SEE IF DISPLAY STATUS OPTION
         BO    STATUS              YES, BRANCH
CK2      TM    JITBFLG,JITBDMD     SEE IF DEMAND OPTION
         BNO   CK3                 NO, BRANCH
         SPACE 1
***********************************************************************
*                                                                     *
*        CHAIN THE JITB FOR THE JIT SUBTASK                           *
*                                                                     *
***********************************************************************
         SPACE 1
         ICM   R4,B'1111',UCTJITDT LOAD JIT DTE ADDRESS
         BZ    NOJIT               NONE, BRANCH
         USING DTE,R4              SET ADDRESSABILITY TO DTE
         XC    JITBXECB(L'XECBECB),JITBXECB CLEAR THE XECB
         L     R1,DTEFQUE          LOAD THE WORK QUEUE ADDRESS
CSLOOP1  ST    R1,JITBCH           PUSH HEAD QUEUE DOWN
         CS    R1,R8,DTEFQUE       ADD TO WORK QUEUE
         BNE   CSLOOP1             CHANGED, TRY AGAIN
         POST  DTEWECB             POST SUBTASK
         $WAIT OPER,XECB=JITBXECB,INHIBIT=YES
         TM    JITBSTAT,JITBOK     SEE IF ACTUALLY SUCCESSFUL
         BO    CK3                 YES, BRANCH
         MVI   COMMAND,C' '        BLANK ENTIRE
         MVC   COMMAND+1(99),COMMAND     COMMAND AREA
         MVC   COMMAND(3),=C'JIT'  SET MESSAGE PREFIX
         MVC   COMMAND+4(4),=C'READ' ASSUME LIST REQUEST
         MVC   COMMAND+12(10),=C'PROCESSING' SET MESSAGE TEXT
         MVC   COMMAND+23(6),=C'FAILED'  SAY THAT IT FAILED
         B     RESULTS3            GO DISPLAY MESSAGE
         DROP  R4                  DROP ADDRESSABILITY TO DTE
         SPACE 1
***********************************************************************
*                                                                     *
*        CHAIN THE JITB FOR THE UCC7 SUBTASK                          *
*                                                                     *
***********************************************************************
         SPACE 1
CK3      CLI   JITBFLG,0           SEE IF ANY OPTIONS SET
         BE    EXIT8               NO, GET OUT
         ICM   R4,B'1111',UCTUC7DT LOAD UCC7 DTE ADDRESS
         BZ    NOUCC7              NONE, BRANCH
         USING DTE,R4              SET ADDRESSABILITY TO DTE
         XC    JITBXECB(L'XECBECB),JITBXECB CLEAR THE XECB
         L     R1,DTEFQUE          LOAD THE WORK QUEUE ADDRESS
CSLOOP2  ST    R1,JITBCH           PUSH HEAD QUEUE DOWN
         CS    R1,R8,DTEFQUE       ADD TO WORK QUEUE
         BNE   CSLOOP2             CHANGED, TRY AGAIN
         POST  DTEWECB             POST SUBTASK
         $WAIT OPER,XECB=JITBXECB,INHIBIT=YES
         DROP  R4                  DROP ADDRESSABILITY TO DTE
         SPACE 1
***********************************************************************
*                                                                     *
*        DISPLAY THE RESULTS OF THE CALL TO THE JIT SUBTASK           *
*                                                                     *
***********************************************************************
         SPACE 1
RESULTS1 MVI   COMMAND,C' '        BLANK ENTIRE
         MVC   COMMAND+1(99),COMMAND     COMMAND AREA
         MVC   COMMAND(4),=C'UCC7'  SET MESSAGE PREFIX
         MVC   COMMAND+13(10),=C'PROCESSING' SET MESSAGE TEXT
         MVC   COMMAND+24(6),=C'FAILED'  ASSUME THAT IT FAILED
         TM    JITBSTAT,JITBOK     SEE IF ACTUALLY SUCCESSFUL
         BNO   RESULTS2            NO, CONTINUE
         MVC   COMMAND+24(22),=C'SUCCESSFULLY COMPLETED'
RESULTS2 MVC   COMMAND+5(4),=C'STOP' ASSUME STOP REQUEST
         TM    JITBFLG,JITBSTOP    SEE IF STOP REQUEST
         BO    RESULTS3            YES, BRANCH
         MVC   COMMAND+5(5),=C'START' ASSUME START REQUEST
         TM    JITBFLG,JITBSTAR    SEE IF START REQUEST
         BO    RESULTS3            YES, BRANCH
         MVC   COMMAND+5(6),=C'DEMAND' ASSUME DEMAND REQUEST
         TM    JITBFLG,JITBDMD     SEE IF DEMAND REQUEST
         BO    RESULTS3            YES, BRANCH
         MVC   COMMAND+5(7),=C'RESTART' ASSUME RESTART REQUEST
         TM    JITBFLG,JITBREST    SEE IF RESTART REQUEST
         BO    RESULTS3            YES, BRANCH
         MVC   COMMAND+5(7),=C'UNKNOWN' UNKNOWN REQUEST
RESULTS3 LA    R0,50               SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR
         TM    JITBFLG,JITBDMD     SEE IF DEMAND OPTION
         BNO   EXIT8               NO, BRANCH
         MVC   COMMAND(5),=C'UCC7 ' SET LINE TITLE
         MVC   COMMAND+5(9),=C'JOBNAME =' SET MESSAGE PREFIX
         MVC   COMMAND+14(08),JITBJOBN SET MESSAGE KEY
         LA    R0,22               SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR
         MVC   COMMAND+5(9),=C'GROUPID =' SET MESSAGE PREFIX
         MVC   COMMAND+14(08),JITBGRP  SET MESSAGE KEY
         LA    R0,22               SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
         EJECT
***********************************************************************
*                                                                     *
*        DISPLAY THE STATUS OF THE UCC7 SUBTASK                       *
*                                                                     *
***********************************************************************
STATUS   ICM   R4,B'1111',UCTUC7DT LOAD JIT DTE ADDRESS
         BZ    NOUCC7              NONE, BRANCH
         USING DTE,R4              SET ADDRESSABILITY TO DTE
         MVI   COMMAND,C' '        BLANK ENTIRE
         MVC   COMMAND+1(99),COMMAND     COMMAND AREA
         LA    R14,COMMAND         POINT TO COMMAND AREA
         SLR   R15,R15             ZERO THE LENGTH FIELD
         MVC   0(4,R14),=C'UCC7'   SET MSG TITLE
         LA    R15,5(R15)          ADD 8 TO LENGTH
         LA    R14,5(R14)          INCREMENT TO FIRST STATUS LOCATION
         TM    DTEFLAGS,UENABLE    SEE IF UCC7 TASK ENABLED
         BO    STATUS02            YES, BRANCH
         MVC   0(8,R14),=C'DISABLED' SET STATUS TO DISABLED
         LA    R15,9(R15)          ADD 8 TO LENGTH
         LA    R14,9(R14)          INCREMENT TO NEXT STATUS LOCATION
         B     STATUS03            BRANCH
STATUS02 MVC   0(7,R14),=C'ENABLED' SET STATUS TO ENABLED
         LA    R15,8(R15)          ADD 8 TO LENGTH
         LA    R14,8(R14)          INCREMENT TO NEXT STATUS LOCATION
STATUS03 TM   DTEFLAGS,ULOADED     SEE IF UCC7 INTERFACE MODULE LOADED
         BNO   STATUS04            NO, BRANCH
         MVC   0(16,R14),=C'INTERFACE LOADED' TELL THAT IT IS LOADED
         LA    R15,17(R15)         ADD 17 TO LENGTH
         LA    R14,17(R14)         INCREMENT TO NEXT STATUS LOCATION
STATUS04 LR    R0,R15              SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=990    WRITE MESSAGE
         B     EXIT8               GET OUT
         DROP  R4                  DROP ADDRESSABILITY TO DTE
         EJECT
***********************************************************************
*                                                                     *
*        INVALID $TUCC7 OPERAND                                       *
*                                                                     *
***********************************************************************
         SPACE 1
BADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND
         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG
         MVC   COMMAND+9(L'MSG2),MSG2 SET ERROR MESSAGE
         LA    R0,L'MSG2+9         SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
         EJECT
***********************************************************************
*                                                                     *
*        UCC7 TASK NOT INITIALIZED                                    *
*                                                                     *
***********************************************************************
         SPACE 1
NOUCC7   MVC   COMMAND(L'MSG3),MSG3 SET ERROR MESSAGE
         LA    R0,L'MSG3           SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
***********************************************************************
*                                                                     *
*        JOB INFORMATION TASK NOT INITIALIZED                         *
*                                                                     *
***********************************************************************
         SPACE 1
NOJIT    MVC   COMMAND(L'MSG4),MSG4 SET ERROR MESSAGE
         LA    R0,L'MSG4           SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
         EJECT
***********************************************************************
*                                                                     *
*        INSUFFICIENT $TUCC7 OPERANDS                                 *
*                                                                     *
***********************************************************************
         SPACE 1
INSUFF   MVC   COMMAND(L'MSG1),MSG1 SET ERROR MESSAGE
         LA    R0,L'MSG1           SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=990    WRITE ERROR MESSAGE
         B     EXIT8               GET OUT
MSG1     DC    C'INSUFFICIENT OPERANDS'
MSG2     DC    C' INVALID OPERAND'
MSG3     DC    C'UCC7 TASK NOT INITIALIZED'
MSG4     DC    C'JOB INFORMATION TASK NOT INITIALIZED'
         EJECT
***********************************************************************
*                                                                     *
*                    E X I T     R O U T I N E S                      *
*                                                                     *
*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *
*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *
*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *
*        RC = 12 - TERMINATE ISSUING THE "OK" MESSAGE                 *
*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *
*                                                                     *
***********************************************************************
EXIT0    DS    0H
         LA    R15,0               SET RETURN CODE TO 0
         $RETURN RC=(R15)          RETURN TO JES2
EXIT8    DS    0H
         $FREEBUF (R9)             FREE THE WORK AREA
         LA    R15,8               SET RETURN CODE TO 8
         $RETURN RC=(R15)          RETURN TO JES2
         EJECT
         LTORG
         SPACE 3
BLANKS   DC    100C' '             STRING OF BLANKS
         EJECT
         $MODEND
         END
