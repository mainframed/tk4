         TITLE 'DSAT COMMAND FOR TSO'
***********************************************************************
*                                                                     *
*        THE TSO DSAT COMMAND IS DESIGNED TO RETURN CATALOG           *
*        AND/OR ALLOCATION INFORMATION ABOUT A GROUP OF DATASETS      *
*        DEFINED BY THE INDEXED PASSED TO THE COMMAND.  THE           *
*        FORMAT OF THE COMMAND IS AS FOLLOWS:                         *
*                                                                     *
*        DSAT INDEX LONG/SHORT DAONLY/ALL                             *
*                                                                     *
*        WHERE INDEX IS A 1 TO 44 CHARACTER DSNAME OR INDEX TO        *
*        BE USED IN SEARCHING THE CATALOG FOR A LIST OF NAMES.        *
*                                                                     *
*        LONG -  LIST SPACE AND DSATSET ATTRIBUTES FOR EACH           *
*                DATASET                                              *
*                                                                     *
*        SHORT - LIST ONLY VOLUME AND DSNAME FOR EACH DATASET         *
*                                                                     *
*        DAONLY - LIST DIRECT ACCESS DATASETS ONLY                    *
*                                                                     *
*        ALL    - LIST DIRECT ACCESS AND UNSUPPORTED DEVICE TYPE      *
*                 DATASETS                                            *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        THE ASSEMBLY VARIABLE &WKSIZE IS USED TO DEFINE THE          *
*        MAXIMUM WORK AREA SIZE TO BE USED FOR THE GENERIC            *
*        LOCATE TO AN INDEX LEVEL.  CATALOG MANAGEMENT RETURNS        *
*        A LIST OF 45 CHARACTER ENTRIES FOR EACH LEVEL WITHIN         *
*        AN INDEX.  THIS WORK AREA SHOULD BE LARGE ENOUGH TO          *
*        ACCOMODATE LARGE INDEXES WITHOUT CAUSING AN 80A              *
*        ABEND OR A PAGING PROBLEM.  NOTE THAT THIS ROUTINE           *
*        WILL START WITH 16K AND INCREMENT BY 16K UP TO THE           *
*        MAXIMUM DEFINED BY THIS VARIABLE IN AN ATTEMPT TO            *
*        GET A LARGE ENOUGH WORK AREA.                                *
*                                                                     *
***********************************************************************
         SPACE 3
         LCLC  &WKSIZE
&WKSIZE  SETC  '500000'
         EJECT
***********************************************************************
*                                                                     *
*        MACROS USED IN THIS PROGRAM                                  *
*                                                                     *
*        1)  CAMLST   - SYS1.MACLIB                                   *
*        2)  CVT      - SYS1.AMODGEN                                  *
*        3)  FREEMAIN - SYS1.MACLIB                                   *
*        4)  GETMAIN  - SYS1.MACLIB                                   *
*        5)  IECSDSL1 - SYS1.AMODGEN                                  *
*        6)  IEFUCBOB - SYS1.AMODGEN                                  *
*        7)  IKJENDP  - SYS1.MACLIB                                   *
*        8)  IKJKEYWD - SYS1.MACLIB                                   *
*        9)  IKJNAME  - SYS1.MACLIB                                   *
*        10) IKJPARM  - SYS1.MACLIB                                   *
*        11) IKJPOSIT - SYS1.MACLIB                                   *
*        12) IKJPSCB  - SYS1.MACLIB                                   *
*        13) IKJRLSA  - SYS1.MACLIB                                   *
*        14) IKJUPT   - SYS1.MACLIB                                   *
*        15) LINK     - SYS1.MACLIB                                   *
*        16) OBTAIN   - SYS1.MACLIB                                   *
*        17) PUTLINE  - SYS1.MACLIB                                   *
*        18) RETURN   - SYS1.MACLIB                                   *
*        19) SAVE     - SYS1.MACLIB                                   *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        REGISTER EQUATES                                             *
*                                                                     *
***********************************************************************
         SPACE 3
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
***********************************************************************
*                                                                     *
*        START OF PROGRAM                                             *
*                                                                     *
***********************************************************************
DSAT     CSECT
         SAVE  (14,12)             SAVE REGISTERS
         LR    R11,R15             SET FIRST BASE REGISTER
         LA    R12,4095(R11)       SET SECOND
         LA    R12,1(,R12)             BASE REGISTER
         USING DSAT,R11,R12        SET ADDRESSABILITY TO CSECT
         LR    R2,R1               SAVE CPPL ADDRESS
         GETMAIN R,LV=LDSA         GET WORK AREA
         LR    R3,R1               SAVE GETMAIN ADDRESS
         LR    R14,R3              SET 'TO' ADDRESS FOR MVCL
         LA    R15,LDSA            SET 'TO' LENGTH
         SLR   R0,R0               SET 'FROM' ADDRESS
         LA    R1,0                SET 'FROM' LENGTH
         ICM   R1,8,=X'00'         SET PAD CHARACTER TO ZEROS
         MVCL  R14,R0              BLANK ENTIRE GETMAIN AREA
         ST    R3,8(R13)           SAVE NEW SAVE ADDRESS IN OLD
         ST    R13,4(R3)           SAVE OLD SAVE ADDRESS IN NEW
         LR    R13,R3              SET NEW SAVE AREA ADDRESS
         USING WORKA,R13           SET ADDRESSABILITY TO WORK AREA
         MVC   CPPL(16),0(R2)      SAVE CPPL
***********************************************************************
*        INITIALIZE THE IOPL FOR PUTLINE                              *
***********************************************************************
         MVC   IOPL+0(4),CPPLUPT   SAVE UPT ADDRESS IN IOPL
         MVC   IOPL+4(4),CPPLECT   SAVE ECT ADDRESS IN IOPL
         LA    R15,ECB             LOAD ADDRESS OF MY ECB
         ST    R15,IOPL+8          SAVE IN IOPL
***********************************************************************
*        INITIALIZE THE PUTLINE CONTROL BLOCKS                        *
***********************************************************************
         MVC   PUTLINE(LPUTLINE),PUTLINIT INITIALIZE PUTLINE LIST FORM
         LA    R15,1               SET NUMBER OF MESSAGE LINES
         ST    R15,MSGOUT          SAVE IN MSG POINTER LIST
         LA    R15,MSGLINE         LOAD ADDRESS OF MSG LINE
         ST    R15,MSGOUT+4        SAVE IN MSG POINTER LIST
         LA    R15,121             LOAD LENGTH OF MESSAGE LINE
         STH   R15,MSGLINE         SAVE IN MSG LINE
         XC    MSGLINE+2(2),MSGLINE+2 ZERO THE OFFSET FIELD
         MVI   MSGPREF,C' '        BLANK THE MSG PREFIX CHAR
         MVC   MSG,BLANKS          BLANK THE ACTUAL MESSAGE AREA
         MVC   MSGDATA,BLANKS      BLANK THE SPECIAL MSG AREA
         EJECT
***********************************************************************
*        EXTRACT TSO ID AND PROFILE PREFIX VALUES                     *
***********************************************************************
FINDID   L     R3,CPPLPSCB         LOAD PSCB ADDRESS
         USING PSCB,R3             SET ADDRESSABILITY TO PSCB
         MVC   TSOID,PSCBUSER      SAVE LOGONID VALUE
         DROP  R3                  DROP ADDRESSABILITY TO UPT
         L     R3,CPPLUPT          LOAD UPT ADDRESS
         USING UPT,R3              SET ADDRESSABILITY TO UPT
         MVC   TSOPREF,UPTPREFX    SAVE PROFILE PREFIX VALUE
         MVC   TSOPREFL,UPTPREFL   SAVE LENGTH OF PREFIX VALUE
         DROP  R3                  DROP ADDRESSABILITY TO UPT
         EJECT
***********************************************************************
*        PARSE THE INPUT COMMAND                                      *
***********************************************************************
         MVC   PPLUPT,CPPLUPT      SET UPT ADDRESS
         MVC   PPLECT,CPPLECT      SET ECT ADDRESS
         XC    ECB,ECB             ZERO MY ECT
         LA    R15,ECB             LOAD ADDRESS OF MY ECB
         ST    R15,PPLECB          SET MY ECB ADDRESS
         L     R15,=A(DSATPCL)     LOAD ADDRESS OF PARSE CONTROL LIST
         ST    R15,PPLPCL          SET PCL ADDRESS
         XC    PDLPOINT,PDLPOINT   ZERO PDL
         LA    R15,PDLPOINT        LOAD ADDRESS OF PDL
         ST    R15,PPLPDL          SET POINTER TO PDL
         MVC   PPLBUFF,CPPLCBUF    SET COMMAND BUFFER ADDRESS
         XC    PPLWORK,PPLWORK     ZERO WORK AREA ADDRESS
         LA    R1,PPL              LOAD ADDRESS OF PPL
         LINK  EP=IKJPARS          GO TO PARSE
         LTR   R15,R15             TEST RETURN CODE FROM PARSE
         BZ    GOODPARS            ZERO, OK BRANCH
         MVC   MSG,=CL120'RETURN CODE XXXXX FROM PARSE'
         CVD   R15,DOUBLE          CONVERT RETURN CODE TO PACKED
         OI    DOUBLE+7,X'0F'      SET SIGN PRINTABLE
         UNPK  MSG+12(5),DOUBLE+5  UNPACK RETURN CODE INTO MSG
         BAL   R14,PUTMSG          GO WRITE ERROR MESSAGE
         B     EXIT
         EJECT
***********************************************************************
*        PROCESS THE DSNAME (IF ANY)                                  *
***********************************************************************
GOODPARS L     R2,PDLPOINT         LOAD ADDRESS OF PDL
         USING DSATPDL,R2          SET ADDRESSABILITY TO PDL
         MVC   DSN,BLANKS          BLANK THE DSNAME
         ICM   R3,15,PARSDSN       LOAD POINTER TO DSN
         BZ    NODSN               ZERO, NONE, USE LOGON ID
         LA    R4,DSN              LOAD ADDRESS OF DSNAME FIELD
         TM    PARSDSN+6,X'40'     SEE IF DSNAME WITHIN QUOTES
         BO    QUOTED              YES, BRANCH
         CLI   TSOPREFL,0          SEE IF PREFIX LENGTH ZERO
         BE    QUOTED              YES, BRANCH
         MVC   DSN(7),TSOPREF      SET PREFIX
DSNLP    CLI   0(R4),C' '          END OF PREFIX
         BE    DSNLP1              YES, BRANCH
         LA    R4,1(,R4)           INCREMENT TO NEXT CHARACTER PREFIX
         B     DSNLP               LOOP
DSNLP1   MVI   0(R4),C'.'          SET SEPARATOR
         LA    R4,1(,R4)           INCREMENT PAST '.'
QUOTED   LH    R5,PARSDSN+4        LOAD LENGTH OF DSN
         BCTR  R5,0                MAKE MACHING LENGTH
         EX    R5,SAVEDSN          SAVE DSNAME FROM PARSE
         B     CKSHORT             GO CHECK FOR SHORT OPTION
SAVEDSN  MVC   0(0,R4),0(R3)       **** EXECUTE ONLY ****
NODSN    MVC   DSN(7),TSOPREF      SET DSN TO PROFILE PREFIX
         CLI   TSOPREFL,0          SEE IF PREFIX LENGTH ZERO
         BNE   CKSHORT             NO, GO CHECK FOR SHORT OPTION
         MVC   DSN(7),TSOID        SET DSN TO TSO ID
         B     CKSHORT             GO CHECK FOR SHORT OPTION
         SPACE 3
***********************************************************************
*        PROCESS THE LONG/SHORT OPTION                                *
***********************************************************************
CKSHORT  CLC   OPT(2),=H'2'        SEE IF SHORT SPECIFIED
         BNE   CKDAONLY            NO, CHECK FOR DAONLY
         OI    MISCINFO,SHORT      SET SWITCH
         SPACE 3
***********************************************************************
*        PROCESS THE DAONLY/ALL OPTION                                *
***********************************************************************
CKDAONLY CLC   DAOPT(2),=H'2'      SEE IF DAONLY SPECIFIED
         BNE   PARSEND             NO, END OF PARSE
         OI    MISCINFO,DAONLY     SET SWITCH
         SPACE 3
***********************************************************************
*        END OF PARSE                                                 *
***********************************************************************
PARSEND  LA    R1,PDLPOINT         LOAD ADDRESS OF POINTER TO PDL
         IKJRLSA (1)               FREE STORAGE USED BY PARSE
         DROP  R2                  DROP ADDRESSABILITY TO PDL
         EJECT
***********************************************************************
*        GET STORAGE FOR SVC26 WORK AREA                              *
***********************************************************************
         GETMAIN R,LV=5120         GET SPECIAL SVC26 WORK AREA
         ST    R1,SVC26SPC         SAVE WORK AREA ADDRESS
         LR    R8,R1               SET REGISTER WITH RESULTS AREA
         USING RESULTS,R8          SET ADDRESSABILITY TO RESULTS AREA
         MVC   WKSIZE,=F'16384'    SET DEFAULT WORK AREA SIZE TO 16K
***********************************************************************
*        INITIALIZE OBTAIN BY NAME CAMLST PARAMETER LIST              *
***********************************************************************
         XC    CAMLST2(16),CAMLST2 ZERO CAMLST PARM LIST
         MVI   CAMLST2,193         SET FLAG BYTE
         LA    R15,LDSN            LOAD ADDRESS OF DSNAME FIELD
         ST    R15,CAMLST2+4       SAVE IN PARM LIST2
         LA    R15,OVOLSER         LOAD ADDRESS OF VOLSER FIELD
         ST    R15,CAMLST2+8       SAVE IN PARM LIST2
         LA    R15,DSCB1+44        LOAD ADDRESS OF RETURN AREA
         ST    R15,CAMLST2+12      SAVE IN PARM LIST2
***********************************************************************
*        INITIALIZE OBTAIN BY CCHHR CAMLST PARAMETER LIST             *
***********************************************************************
         XC    CAMLST3(16),CAMLST3 ZERO CAMLST PARM LIST
         MVI   CAMLST3,192         SET FLAG BYTE
         MVI   CAMLST3+1,128       SET FLAG BYTE
         LA    R15,CCHHR           LOAD ADDRESS OF SEEK VALUE
         ST    R15,CAMLST3+4       SAVE IN PARM LIST3
         LA    R15,OVOLSER         LOAD ADDRESS OF VOLSER FIELD
         ST    R15,CAMLST3+8       SAVE IN PARM LIST3
         LA    R15,DSCB3           LOAD ADDRESS OF RETURN AREA
         ST    R15,CAMLST3+12      SAVE IN PARM LIST3
***********************************************************************
*        INITIALIZE REST OF WORK AREAS                                *
***********************************************************************
         MVC   PDSN,BLANKS         BLANK PREVIOUS DSNAME FIELD
         MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
         XC    TOTSPACE,TOTSPACE   ZERO THE TOTAL SPACE ALLOCATED
         XC    TOTUSED,TOTUSED     ZERO THE TOTAL SPACE USED
         XC    TOTDS,TOTDS         ZERO THE TOTAL DATASET COUNT
***********************************************************************
*        PRODUCE PROPER HEADINGS                                      *
***********************************************************************
         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BO    HEAD1               YES, BRANCH
         MVC   MSG,HEADING1        NO, PRODUCE LONG HEADINGS
         BAL   R14,PUTMSG          WRITE HEADING LINE
         B     FINDIT              GO SEE IF INDEX LEVEL
HEAD1    MVC   MSG,HEADING2        PRODUCE SHORT HEADINGS
         BAL   R14,PUTMSG          WRITE HEADING LINE
         EJECT
***********************************************************************
*                                                                     *
*        CALL SPECIAL SVC 26 FOR THE DSNAME ENTERED.  IF AN           *
*        ENTRY IS FOUND, THE INFORMATION FOR THAT ENTRY MUST          *
*        BE FORMATED PRIOR TO CALLING SVC 26 FOR A GENERIC            *
*        LOCATE FOR ALL ENTRIES WHICH MAY USE THIS NAME AS            *
*        AN INDEX LEVEL SUCH AS A GDG BASE OR CLUSTER.                *
*                                                                     *
***********************************************************************
FINDIT   DS    0H
         MVC   LDSN,DSN            SET DSNAME
         BAL   R14,DSETINFO        GO GET DATASET/GDG INFO
         CLI   ENTYPE,C' '         SEE IF ANYTHING FOUND
         BE    CATNDX1             NO, GO DO GENERIC LOCATE
         OI    MISCINFO,DOGEN      TURN ON NEED GENERIC LOCATE
         CLI   ENTYPE,C'A'         NONVSAM RECORD
         BE    NVSAMR              YES, BRANCH
         CLI   ENTYPE,C'B'         GDG BASE RECORD
         BE    GDGR                YES, BRANCH
         CLI   ENTYPE,C'C'         CLUSTER
         BE    CLUSTRR             YES, BRANCH
         CLI   ENTYPE,C'R'         PATH RECORD
         BE    PATHR               YES, BRANCH
         CLI   ENTYPE,C'V'         VOLUME RECORD
         BE    VOLUMER             YES, BRANCH
         CLI   ENTYPE,C'X'         ALIAS RECORD
         BE    ALIASR              YES, BRANCH
         CLI   ENTYPE,C'Y'         UPGRADE RECORD
         BE    UPGRDR              YES, BRANCH
         CLI   ENTYPE,C'G'         ALTERNATE INDEX RECORD
         BE    AIXR                YES, BRANCH
         CLI   ENTYPE,C'D'         VSAM DATASET COMPONENT RECORD
         BE    VSAMR               YES, BRANCH
         CLI   ENTYPE,C'I'         VSAM INDEX COMPONENT RECORD
         BE    VSAMR               YES, BRANCH
         CLI   ENTYPE,C'M'         MASTER CATALOG RECORD
         BE    MCATR               YES, BRANCH
         CLI   ENTYPE,C'P'         PAGE DATA SET RECORD
         BE    PAGEDSR             YES, BRANCH
         CLI   ENTYPE,C'U'         USER CATALOG RECORD
         BE    UCATR               YES, BRANCH
         EJECT
***********************************************************************
*        DO A GENERIC LOCATE FOR THE DSNAME INDEX GIVEN               *
***********************************************************************
CATNDX1  NI    MISCINFO,255-DOGEN  TURN OFF NEED GENERIC LOCATE
         MVC   SVC26DS,DSN         MOVE DSNAME TO SVC26 AREA
         LA    R1,44               LOAD MAXIMUM LENGTH OF DSN
         LA    R14,SVC26DS+43      LOAD ADDRESS OF END OF DSN
CATNDX2  CLI   0(R14),C' '         SEE IF LAST CHAR DSN
         BNE   CATNDX3             YES, BRANCH
         BCTR  R14,0               BACK UP DSN POINTER 1 POSITION
         BCT   R1,CATNDX2          LOOP UNTIL FOUND
CATNDX3  CH    R1,=H'44'           SEE IF FULL DSN
         BE    CATNDX4             YES, DO NOT ADD '.'
         CLI   0(R14),C'.'         IS SEPARATOR ALREADY PROVIDED?
         BE    CATNDX4             YES, BRANCH
         MVI   1(R14),C'.'         SET SEPARATOR
         LA    R1,1(,R1)           ADD 1 TO LENGTH
CATNDX4  STC   R1,SVC26DSL         SAVE LENGTH OF DSN
***********************************************************************
*        INITIALIZE SVC 26 PARAMETER LIST                             *
***********************************************************************
***********************************************************************
*        GET STORAGE FOR SVC26 WORK AREA                              *
***********************************************************************
CATNDX5  L     R0,WKSIZE           LOAD WORK AREA SIZE
         GETMAIN R,LV=(0)          GET SVC26 WORK AREA
         ST    R1,SVC26WRK         SAVE WORK AREA ADDRESS
         XC    CTGPL,CTGPL         ZERO PARM LIST
         MVI   CTGPL,B'00000101'   SET CTGOPTN1
         MVI   CTGPL+2,B'00010001' SET CTGOPTN3
         LA    R1,SVC26DSN         LOAD ADDRESS OF DSNAME
         ST    R1,CTGPL+4          SET CTGENT
         XC    CTGPL+8(4),CTGPL+8  ZERO CTGCAT
         L     R1,WKSIZE           LOAD LENGTH OF WORK AREA
         L     R15,SVC26WRK        LOAD ADDRESS OF SVC26 WORK AREA
         ST    R1,0(R15)           SAVE LENGTH AT START OF WORK AREA
         MVC   4(4,R15),=A(8)      SET LENGTH OF WORK AREA AT OFFSET 4
         ST    R15,CTGPL+12        SET CTGWKA
         MVI   CTGPL+16,X'04'      SET FOR FORMAT-2 WORK AREA
         LA    R1,CTGPL            LOAD ADDRESS OF WORK AREA
         SVC   26                  CALL CATALOG GENERIC SEARCH
         CH    R15,=H'40'          RETURN CODE = 40?
         BE    TOOSMLL             YES, WORKAREA TOO SMALL
         LTR   R15,R15             TEST RETURN CODE
         BNZ   ENDDS               NOT ZERO, BRANCH
         EJECT
***********************************************************************
*                                                                     *
*        FOUND DATA SETS AT THE GIVEN INDEX LEVEL.                    *
*                                                                     *
*        THE WORK AREA IS OF THE FOLLOWING FORMAT:                    *
*                                                                     *
*        4  BYTE FULL LENGTH OF WORK AREA                             *
*        4  BYTE USED LENGTH OF WORK AREA                             *
*        45 BYTE ENTRIES FOR EACH DATASET                             *
*                                                                     *
*           THIS FIELD IS IN THE FORMAT OF A 1 BYTE TYPE FIELD        *
*           FOLLOWED BY THE 44 BYTE DSNAME.                           *
*                                                                     *
*           TYPE FIELD                                                *
*                                                                     *
*           A - NON-VSAM                                              *
*           B - GDG BASE                                              *
*           C - CLUSTER                                               *
*           D - DATA SET                                              *
*           G - ALTERNATE INDEX                                       *
*           I - INDEX                                                 *
*           M - MASTER CATALOG                                        *
*           P - PAGE SPACE                                            *
*           R - PATH                                                  *
*           U - USER CATALOG                                          *
*           V - VOLUME                                                *
*           X - ALIAS NAME                                            *
*           Y - UPGRADE                                               *
*                                                                     *
***********************************************************************
         L     R4,SVC26WRK         LOAD ADDRESS OF SVC26 WORK AREA
         L     R14,4(R4)           LOAD LENGTH OF AREA INCLUDING PREFIX
         SH    R14,=H'8'           SUBTRACT LENGTH OF PREFIX
         SRDA  R14,32              SHIFT TO ODD REGISTER OF PAIR
         D     R14,=F'45'          DIVIDE BY LENGTH OF EACH ENTRY
         LTR   R5,R15              TEST NUMBER OF DSNAMES RETURNED
         BZ    ENDDS               ZERO, NONE
         BM    ENDDS               NEGATIVE, ????, NONE
         LA    R4,8(R4)            POINT TO FIRST DSN
         EJECT
***********************************************************************
*        PROCESS EACH ENTRY TYPE                                      *
***********************************************************************
PROCDSN  MVC   LDSN,1(R4)          SET DSNAME FOR LOCATE
         CLI   0(R4),C'A'          NONVSAM
         BE    NVSAMR              YES, BRANCH
         CLI   0(R4),C'C'          CLUSTER
         BE    CLUSTRR             YES, BRANCH
         CLI   0(R4),C'B'          GDG BASE RECORD
         BE    GDGR                YES, BRANCH
         CLI   0(R4),C'R'          PATH RECORD
         BE    PATHR               YES, BRANCH
         CLI   0(R4),C'V'          VOLUME RECORD
         BE    VOLUMER             YES, BRANCH
         CLI   0(R4),C'X'          ALIAS RECORD
         BE    ALIASR              YES, BRANCH
         CLI   0(R4),C'Y'          UPGRADE RECORD
         BE    UPGRDR              YES, BRANCH
         CLI   0(R4),C'G'          ALTERNATE INDEX RECORD
         BE    AIXR                YES, BRANCH
         CLI   0(R4),C'M'          MASTER CATALOG
         BE    MCATR               YES, BRANCH
         CLI   0(R4),C'U'          USER CATALOG
         BE    UCATR               YES, BRANCH
         CLI   0(R4),C'P'          PAGE DATASET
         BE    PAGEDSR             YES, BRANCH
         CLI   0(R4),C'D'          DATASET COMPONENT
         BE    VSAMR               YES, BRANCH
         CLI   0(R4),C'I'          INDEX COMPONENT
         BE    VSAMR               YES, BRANCH
         B     ERRORR              NO, ERROR UNKNOWN TYPE
         EJECT
***********************************************************************
*        END OF PROCESSING FOR THIS DATASET, CHECK FOR OTHER          *
*        DATASETS.                                                    *
***********************************************************************
DSNLOOP  LA    R4,45(,R4)          INCREMENT TO NEXT DSNAME ENTRY
         BCT   R5,PROCDSN          LOOP UNTIL END OF DSNAMES
         B     ENDDS               GET OUT
         EJECT
***********************************************************************
*        WORK AREA TOO SMALL                                          *
***********************************************************************
TOOSMLL  L     R2,WKSIZE           LOAD SIZE OF WORK AREA
         AH    R2,=H'16384'        ADD 16K TO THE SIZE
         C     R2,=F'&WKSIZE'      SEE IF EXCEEDS MAX ALLOWED
         BH    TOOSMLL1            YES, ISSUE ERROR MESSAGE
         L     R1,SVC26WRK         LOAD ADDRESS OF WORK AREA
         L     R0,WKSIZE           LOAD SIZE OF WORK AREA
         FREEMAIN R,LV=(0),A=(1)   FREE WORK AREA
         ST    R2,WKSIZE           STORE NEW SIZE OF WORK AREA
         B     CATNDX5             GO TRY AGAIN
TOOSMLL1 MVC   MSG(80),=CL80'TOO MANY DATASETS FOR INDEX ENTERED - REENX
               TER WITH MORE SPECIFIC INDEX'
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         B     EXIT                GET OUT
         SPACE 3
***********************************************************************
*        PRODUCE TOTALS                                               *
***********************************************************************
ENDDS    L     R15,TOTDS           LOAD NUMBER OF DATASETS PROCESSED
         LTR   R15,R15             TEST FOR ZERO
         BNZ   ENDDS1              NOT ZERO, BRANCH
         MVC   MSG(80),=CL80'DATASET NAME NOT FOUND'
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         B     EXIT                GET OUT
ENDDS1   MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
         L     R15,TOTSPACE        LOAD TOTAL TRACKS ALLOCATED
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   DBL(6),=X'402020202020' SET EDIT MASK
         ED    DBL(6),DOUBLE+5     EDIT COUNT TO WORK
         MVC   OSPALLOC,DBL+1      MOVE COUNT TO MSG
         L     R15,TOTUSED         LOAD TOTAL TRACKS USED
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   DBL(6),=X'402020202020' SET EDIT MASK
         ED    DBL(6),DOUBLE+5     EDIT COUNT TO WORK
         MVC   OSPUSED,DBL+1       MOVE COUNT TO MSG
         L     R15,TOTDS           LOAD DATASET COUNT
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   DBL(6),=X'402020202120' SET EDIT MASK
         ED    DBL(6),DOUBLE+5     EDIT COUNT TO WORK
         MVC   ODSN-1(5),DBL+1     MOVE COUNT TO MSG
         MVC   ODSN+5(20),=CL20'DATA SETS DISPLAYED'
         MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         B     EXIT                GET OUT
         EJECT
***********************************************************************
*        GDG BASE ENTRY                                               *
***********************************************************************
GDGR     MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    GDGR1               NO, BRANCH
         BAL   R14,DSETINFO        GO GET SPECIAL CATALOG INFO
***********************************************************************
*        ISSUE SHORT FORM OF GDG DETAIL                               *
***********************************************************************
GDGR1    TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    GDGR2               NO, BRANCH
         MVC   OSMSG(20),=CL20'GDG BASE ENTRY' SET TYPE IN MESSAGE
         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE
         B     GDGR5               GO WRITE MESSAGE
***********************************************************************
*        ISSUE LONG FORM OF GDG DETAIL                                *
***********************************************************************
GDGR2    MVC   OMSG(20),=CL20'GDG BASE ENTRY' SET TYPE IN MESSAGE
         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE
         MVC   OGDGLIM(4),=C'LIM('   SET LIMIT TITLE
         SLR   R1,R1               CLEAR REG FOR IC
         IC    R1,GDGLIMIT         LOAD LIMIT VALUE
         CVD   R1,DOUBLE           CONVERT TO PACKED
         OI    DOUBLE+7,X'0F'      SET SIGN PRINTABLE
         UNPK  OGDGLIM+4(3),DOUBLE+6(2)  UNPACK LIMIT VALUE
         MVI   OGDGLIM+7,C')'      SET CLOSING PARENS
         MVC   OGDGEMP,=C'EMPTY'   ASSUME EMPTY OPTION
         TM    GDGATTR,GDGEMP      TEST BIT
         BO    GDGR3               YES, BRANCH
         MVC   OGDGEMP,=C'NOEMP'   SET TO NOEMPTY OPTION
GDGR3    MVC   OGDGSCR,=C'SCR  '   ASSUME SCRATCH OPTION
         TM    GDGATTR,GDGSCR      TEST BIT
         BO    GDGR4               YES, BRANCH
         MVC   OGDGSCR,=C'NOSCR'   SET TO NOSCRATCH OPTION
GDGR4    MVC   PJDATE,DSETCRDT     MOVE CREATION DATE TO PJDATE
         L     R15,=V(DATERTN)     LOAD ADDRESS OF DATE CONVERT ROUTINE
         BALR  R14,R15             GO CONVERT JULIAN TO CALENDAR DATE
         MVC   OCRTDT,CALDATE      MOVE CREATION DATE TO MSG
***********************************************************************
*        WRITE GDG DETAIL LINE                                        *
***********************************************************************
GDGR5    MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         L     R15,TOTDS           LOAD NUMBER OF DSNAMES
         LA    R15,1(R15)          ADD 1 TO COUNT
         ST    R15,TOTDS           SAVE NUMBER OF DATASETS
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         EJECT
***********************************************************************
*        CLUSTER ENTRY                                                *
***********************************************************************
CLUSTRR  MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
***********************************************************************
*        ISSUE SHORT FORM OF CLUSTER DETAIL                           *
***********************************************************************
         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    CLUSTRR1            NO, BRANCH
         MVC   OSMSG(20),=CL20'CLUSTER' SET TYPE IN MESSAGE
         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE
         B     CLUSTRR2            GO WRITE MESSAGE
***********************************************************************
*        ISSUE LONG FORM OF CLUSTER DETAIL                            *
***********************************************************************
CLUSTRR1 MVC   OMSG(20),=CL20'CLUSTER' SET TYPE IN MESSAGE
         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE
***********************************************************************
*        WRITE CLUSTER DETAIL LINE                                    *
***********************************************************************
CLUSTRR2 MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         L     R15,TOTDS           LOAD NUMBER OF DSNAMES
         LA    R15,1(R15)          ADD 1 TO COUNT
         ST    R15,TOTDS           SAVE NUMBER OF DATASETS
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         EJECT
***********************************************************************
*        PATH ENTRY                                                   *
***********************************************************************
PATHR    MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
***********************************************************************
*        ISSUE SHORT FORM OF PATH DETAIL                              *
***********************************************************************
         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    PATHR1              NO, BRANCH
         MVC   OSMSG(20),=CL20'PATH ENTRY' SET TYPE IN MESSAGE
         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE
         B     PATHR2              GO WRITE MESSAGE
***********************************************************************
*        ISSUE LONG FORM OF PATH DETAIL                               *
***********************************************************************
PATHR1   MVC   OMSG(20),=CL20'PATH ENTRY' SET TYPE IN MESSAGE
         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE
***********************************************************************
*        WRITE PATH DETAIL LINE                                       *
***********************************************************************
PATHR2   MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         L     R15,TOTDS           LOAD NUMBER OF DSNAMES
         LA    R15,1(R15)          ADD 1 TO COUNT
         ST    R15,TOTDS           SAVE NUMBER OF DATASETS
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         EJECT
***********************************************************************
*        VOLUME ENTRY                                                 *
***********************************************************************
VOLUMER  MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
***********************************************************************
*        ISSUE SHORT FORM OF VOLUME DETAIL                            *
***********************************************************************
         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    VOLUMER1            NO, BRANCH
         MVC   OSMSG(20),=CL20'VOLUME ENTRY' SET TYPE IN MESSAGE
         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE
         B     VOLUMER2            GO WRITE MESSAGE
***********************************************************************
*        ISSUE LONG FORM OF VOLUME DETAIL                             *
***********************************************************************
VOLUMER1 MVC   OMSG(20),=CL20'VOLUME ENTRY' SET TYPE IN MESSAGE
         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE
***********************************************************************
*        WRITE VOLUME DETAIL LINE                                     *
***********************************************************************
VOLUMER2 MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         L     R15,TOTDS           LOAD NUMBER OF DSNAMES
         LA    R15,1(R15)          ADD 1 TO COUNT
         ST    R15,TOTDS           SAVE NUMBER OF DATASETS
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         EJECT
***********************************************************************
*        ALIAS ENTRY                                                  *
***********************************************************************
ALIASR   MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
***********************************************************************
*        ISSUE SHORT FORM OF ALIAS DETAIL                             *
***********************************************************************
         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    ALIASR1             NO, BRANCH
         MVC   OSMSG(20),=CL20'ALIAS ENTRY' SET TYPE IN MESSAGE
         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE
         B     ALIASR2             GO WRITE MESSAGE
***********************************************************************
*        ISSUE LONG FORM OF ALIAS DETAIL                              *
***********************************************************************
ALIASR1  MVC   OMSG(20),=CL20'ALIAS ENTRY' SET TYPE IN MESSAGE
         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE
***********************************************************************
*        WRITE ALIAS DETAIL LINE                                      *
***********************************************************************
ALIASR2  MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         L     R15,TOTDS           LOAD NUMBER OF DSNAMES
         LA    R15,1(R15)          ADD 1 TO COUNT
         ST    R15,TOTDS           SAVE NUMBER OF DATASETS
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         EJECT
***********************************************************************
*        UPGRADE ENTRY                                                *
***********************************************************************
UPGRDR   MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
***********************************************************************
*        ISSUE SHORT FORM OF UPGRADE DETAIL                           *
***********************************************************************
         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    UPGRDR1             NO, BRANCH
         MVC   OSMSG(20),=CL20'UPGRADE ENTRY' SET TYPE IN MESSAGE
         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE
         B     UPGRDR2             GO WRITE MESSAGE
***********************************************************************
*        ISSUE LONG FORM OF UPGRADE DETAIL                            *
***********************************************************************
UPGRDR1  MVC   OMSG(20),=CL20'UPGRADE ENTRY' SET TYPE IN MESSAGE
         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE
***********************************************************************
*        WRITE UPGRADE DETAIL LINE                                    *
***********************************************************************
UPGRDR2  MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         L     R15,TOTDS           LOAD NUMBER OF DSNAMES
         LA    R15,1(R15)          ADD 1 TO COUNT
         ST    R15,TOTDS           SAVE NUMBER OF DATASETS
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         EJECT
***********************************************************************
*        ALTERNATE INDEX ENTRY                                        *
***********************************************************************
AIXR     MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
         BAL   R14,DSETINFO        GO GET DATASET/GDG INFO
         CLI   ENTYPE,C' '         SEE IF ENTRY FOUND
         BE    AIXR1               NO, BRANCH
***********************************************************************
*        ISSUE SHORT FORM OF ALTERNATE INDEX DETAIL                   *
***********************************************************************
AIXR1    TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    AIXR3               NO, BRANCH
         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST
         BE    AIXR4               YES, JUST GO WRITE MESSAGE
         MVC   OSMSG(20),=CL20'ALTERNATE INDEX' SET TYPE IN MESSAGE
         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE
         MVC   PDSN,LDSN           SAVE CURRENT DSNAME
         B     AIXR4               GO WRITE MESSAGE
***********************************************************************
*        ISSUE LONG FORM OF ALTERNATE INDEX DETAIL                    *
***********************************************************************
AIXR3    MVC   OMSG(20),=CL20'ALTERNATE INDEX' SET TYPE IN MESSAGE
         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE
         MVC   PDSN,LDSN           SAVE CURRENT DSNAME
***********************************************************************
*        WRITE ALTERNATE INDEX DETAIL LINE                            *
***********************************************************************
AIXR4    MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         L     R15,TOTDS           LOAD NUMBER OF DSNAMES
         LA    R15,1(R15)          ADD 1 TO COUNT
         ST    R15,TOTDS           SAVE NUMBER OF DATASETS
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         EJECT
***********************************************************************
*        MASTER CATALOG ENTRY                                         *
***********************************************************************
MCATR    MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
         BAL   R14,DSETINFO        GO GET DATASET/GDG INFO
         CLI   ENTYPE,C' '         SEE IF ENTRY FOUND
         BE    MCATR1              NO, BRANCH
         LH    R2,NBRVOLS          LOAD NUMBER OF VOLUMES
         BNZ   VSAMR01             NOT ZERO, TREAT LIKE VSAM
***********************************************************************
*        ISSUE SHORT FORM OF MASTER CATALOG DETAIL                    *
***********************************************************************
MCATR1   TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    MCATR3              NO, BRANCH
         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST
         BE    MCATR4              YES, JUST GO WRITE MESSAGE
         MVC   OSMSG(20),=CL20'MASTER CATALOG' SET TYPE IN MESSAGE
         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE
         MVC   PDSN,LDSN           SAVE CURRENT DSNAME
         B     MCATR4              GO WRITE MESSAGE
***********************************************************************
*        ISSUE LONG FORM OF MASTER CATALOG DETAIL                     *
***********************************************************************
MCATR3   MVC   OMSG(20),=CL20'MASTER CATALOG' SET TYPE IN MESSAGE
         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE
         MVC   PDSN,LDSN           SAVE CURRENT DSNAME
***********************************************************************
*        WRITE MASTER CATALOG DETAIL LINE                             *
***********************************************************************
MCATR4   MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         L     R15,TOTDS           LOAD NUMBER OF DSNAMES
         LA    R15,1(R15)          ADD 1 TO COUNT
         ST    R15,TOTDS           SAVE NUMBER OF DATASETS
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         EJECT
***********************************************************************
*        USER CATALOG ENTRY                                           *
***********************************************************************
UCATR    MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
         BAL   R14,DSETINFO        GO GET DATASET/GDG INFO
         CLI   ENTYPE,C' '         SEE IF ENTRY FOUND
         BE    UCATR1              NO, BRANCH
         LH    R2,NBRVOLS          LOAD NUMBER OF VOLUMES
         BNZ   VSAMR01             NOT ZERO, TREAT LIKE VSAM
***********************************************************************
*        ISSUE SHORT FORM OF USER CATALOG DETAIL                      *
***********************************************************************
UCATR1   TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    UCATR3              NO, BRANCH
         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST
         BE    UCATR4              YES, JUST GO WRITE MESSAGE
         MVC   OSMSG(20),=CL20'USER CATALOG' SET TYPE IN MESSAGE
         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE
         MVC   PDSN,LDSN           SAVE CURRENT DSNAME
         B     UCATR4              GO WRITE MESSAGE
***********************************************************************
*        ISSUE LONG FORM OF USER CATALOG DETAIL                       *
***********************************************************************
UCATR3   MVC   OMSG(20),=CL20'USER CATALOG' SET TYPE IN MESSAGE
         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE
         MVC   PDSN,LDSN           SAVE CURRENT DSNAME
***********************************************************************
*        WRITE USER CATALOG DETAIL LINE                               *
***********************************************************************
UCATR4   MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         L     R15,TOTDS           LOAD NUMBER OF DSNAMES
         LA    R15,1(R15)          ADD 1 TO COUNT
         ST    R15,TOTDS           SAVE NUMBER OF DATASETS
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         EJECT
***********************************************************************
*        PAGE DATASET ENTRY                                           *
***********************************************************************
PAGEDSR  MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
         BAL   R14,DSETINFO        GO GET DATASET/GDG INFO
         CLI   ENTYPE,C' '         SEE IF ENTRY FOUND
         BE    PAGEDSR1            NO, BRANCH
         LH    R2,NBRVOLS          LOAD NUMBER OF VOLUMES
         BNZ   VSAMR01             NOT ZERO, TREAT LIKE VSAM
***********************************************************************
*        ISSUE SHORT FORM OF PAGE DATASET DETAIL                      *
***********************************************************************
PAGEDSR1 TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    PAGEDSR3            NO, BRANCH
         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST
         BE    PAGEDSR4            YES, JUST GO WRITE MESSAGE
         MVC   OSMSG(20),=CL20'PAGE DATASET' SET TYPE IN MESSAGE
         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE
         MVC   PDSN,LDSN           SAVE CURRENT DSNAME
         B     PAGEDSR4            GO WRITE MESSAGE
***********************************************************************
*        ISSUE LONG FORM OF PAGE DATASET DETAIL                       *
***********************************************************************
PAGEDSR3 MVC   OMSG(20),=CL20'PAGE DATASET' SET TYPE IN MESSAGE
         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE
         MVC   PDSN,LDSN           SAVE CURRENT DSNAME
***********************************************************************
*        WRITE PAGE DATASET DETAIL LINE                               *
***********************************************************************
PAGEDSR4 MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         L     R15,TOTDS           LOAD NUMBER OF DSNAMES
         LA    R15,1(R15)          ADD 1 TO COUNT
         ST    R15,TOTDS           SAVE NUMBER OF DATASETS
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         EJECT
***********************************************************************
*         UNKNOWN CATALOG ENTRY TYPE                                  *
***********************************************************************
ERRORR   MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
***********************************************************************
*        ISSUE SHORT FORM OF ERROR MESSAGE                            *
***********************************************************************
         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    ERRORR1             NO, BRANCH
         MVC   OSMSG(20),=CL20'UNKNOWN TYPE      ' SET ERROR MESSAGE
         MVC   OSMSG+13(1),0(R4)   SET TYPE IN MESSAGE
         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE
         B     ERRORR2             GO WRITE MESSAGE
***********************************************************************
*        ISSUE LONG FORM OF ERROR MESSAGE                             *
***********************************************************************
ERRORR1  MVC   OMSG(20),=CL20'UNKNOWN TYPE      ' SET ERROR MESSAGE
         MVC   OMSG+13(1),0(R4)    SET TYPE IN MESSAGE
         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE
***********************************************************************
*        WRITE ERROR MESSAGE DETAIL LINE                              *
***********************************************************************
ERRORR2  MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         L     R15,TOTDS           LOAD NUMBER OF DSNAMES
         LA    R15,1(R15)          ADD 1 TO COUNT
         ST    R15,TOTDS           SAVE NUMBER OF DATASETS
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         EJECT
***********************************************************************
*        READ CATALOG FOR UNIT TYPE AND VOLSER                        *
***********************************************************************
NVSAMR   MVC   DETAIL,BLANKS       BLANK DETAIL LINE
         BAL   R14,DSETINFO        GO GET DATASET/GDG INFO
         CLI   ENTYPE,C'A'         SEE IF NONVSAM FOUND
         BNE   NVSAMR30            NO, CONSIDER NOT FOUND
         LA    R6,VOLSER           POINT TO FIRST VOLUME ENTRY
         USING VOLSER,R6           SET ADDRESSABILITY TO VOLUME ENTRY
         LH    R7,NBRVOLS          LOAD NUMBER OF VOLUMES IN LIST
         LTR   R7,R7               TEST FOR ZERO
         BZ    NVSAMR30            SAME AS NOT FOUND, BRANCH
***********************************************************************
*        PROCESS THE VOLSER LIST                                      *
***********************************************************************
NVSAMR01 CLC   VOLSER,=C'******'   SEE IF SPECIAL SYSRES VOLSER
         BNE   NVSAMR0Y            NO, BRANCH
         CLI   SYSVOL,C' '         SEE IF SYSRES VOLUME HAS BEEN DETERM
         BH    NVSAMR0X            YES, BRANCH
         BAL   R14,UCBLOOK         NO, GO GET SYSRES VOLSER
NVSAMR0X MVC   VOLSER,SYSVOL       SET VOLSER TO SYSRES VOLSER
         MVC   DEVTYP,SYSTYP       SET DEVICE TYPE TO SYSRES DEV TYPE
NVSAMR0Y TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BO    NVSAMR02            YES, BRANCH
         TM    DEVTYP+2,X'20'      IS THIS DIRECT ACCESS?
         BNO   NVSAMR27            NO, BRANCH
         SLR   R1,R1               ZERO REG FOR IC
         IC    R1,DEVTYP+3         LOAD UNIT TYPE DEVICE CODE FIELD
         IC    R1,TRKSCYL(R1)      LOAD TRKS PER CYLINDER FROM TABLE
         STH   R1,TRKCYL           SAVE TRACKS PER CYLINDER
***********************************************************************
*        READ FORMAT 1 DSCB FOR VOLUME                                *
***********************************************************************
         MVC   OVOLSER,VOLSER      SET VOLSER FOR OBTAIN
         OBTAIN CAMLST2            READ FORMAT 1 DSCB
         LTR   R15,R15             TEST RETURN CODE
         BNZ   NVSAMR24            NOT ZERO, FAILED
         B     NVSAMR04            GO FORMAT LONG PRINT LINE
         EJECT
***********************************************************************
*        FORMAT SHORT PRINT LINE                                      *
***********************************************************************
NVSAMR02 TM    DEVTYP+2,X'20'      IS THIS DIRECT ACCESS?
         BO    NVSAMR03            YES, BRANCH
         TM    MISCINFO,DAONLY     SEE IF DASD ONLY REQUESTED
         BZ    NVSAMR03            NO, CONTINUE
         MVC   DETAIL,BLANKS       BLANK DETAIL LINE
         MVC   PDSN,LDSN           SAVE CURRENT DSNAME
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
NVSAMR03 MVC   OVOL,VOLSER         MOVE VOLSER TO MESSAGE
         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST
         BE    NVSAMR22            YES, DO NOT SET DSNAME IN DETAIL
         MVC   OSHORTDS,LDSN       NO, SET DSNAME IN DETAIL LINE
         B     NVSAMR22            GO WRITE DETAIL LINE
         EJECT
***********************************************************************
*        FORMAT LONG PRINT LINE                                       *
***********************************************************************
***********************************************************************
*        VOLSER                                                       *
***********************************************************************
NVSAMR04 MVC   OVOL,VOLSER         MOVE VOLSER TO MESSAGE
***********************************************************************
*        SPACE ALLOCATED                                              *
***********************************************************************
NVSAMR05 XC    SPALLOC,SPALLOC     ZERO SPACE ALLOCATED
         SLR   R15,R15             CLEAR REG FOR ICM
         ICM   R15,1,DS1NOEPV      LOAD NUMBER OF EXTENTS
         BZ    NVSAMR08            ZERO, NO EXTENTS
         STH   R15,EXTLEFT         SAVE EXTENTS LEFT
         CH    R15,=H'3'           SEE IF MORE THAN THREE EXTENTS
         BNH   NVSAMR06            NO, BRANCH
         LA    R15,3               SET NUMBER OF EXTENTS TO THREE
NVSAMR06 LA    R1,DS1EXT1          LOAD START OF EXTENTS
         BAL   R14,EXTCALC         CALL CALCULATION ROUTINE
         STH   R15,SPALLOC         SAVE NUMBER OF TRACKS
         LH    R15,EXTLEFT         LOAD NUMBER OF EXTENTS LEFT
         SH    R15,=H'3'           SUBTRACT NUMBER IN FMT1
         BNP   NVSAMR08            NONE LEFT, BRANCH
         STH   R15,EXTLEFT         SAVE EXTENTS LEFT
         CLC   DS1PTRDS,=10X'00'   SEE IF POINTER TO FMT3
         BE    NVSAMR08            NO, ????, END OF SPACE
         MVC   CCHHR,DS1PTRDS      SET SEEK ADDRESS
NVSAMR07 OBTAIN CAMLST3            READ FORMAT3 DSCB
         LTR   R15,R15             TEST RETURN CODE
         BNZ   NVSAMR08            IGNORE ERROR AND USE SPACE FROM FMT1
         LA    R15,4               SET NUMBER OF EXTENTS TO FOUR
         LA    R1,DS3EXTNT         LOAD START OF FIRST GROUP OF EXTENTS
         BAL   R14,EXTCALC         CALL CALCULATION ROUTINE
         LH    R1,SPALLOC          LOAD SPACE ACUMMULATOR
         AR    R1,R15              ADD NUMBER OF TRACKS IN EXTENT GROUP
         STH   R1,SPALLOC          SAVE NEW SPACE ACCUMULATOR
         LA    R15,9               SET NUMBER OF EXTENTS TO NINE
         LA    R1,DS3ADEXT         LOAD START OF SECOND GRP OF EXTENTS
         BAL   R14,EXTCALC         CALL CALCULATION ROUTINE
         LH    R1,SPALLOC          LOAD SPACE ACUMMULATOR
         AR    R1,R15              ADD NUMBER OF TRACKS IN EXTENT GROUP
         STH   R1,SPALLOC          SAVE NEW SPACE ACCUMULATOR
         LH    R15,EXTLEFT         LOAD NUMBER OF EXTENTS LEFT
         SH    R15,=H'13'          SUBTRACT NUMBER IN FMT3
         BNP   NVSAMR08            NONE LEFT, BRANCH
         STH   R15,EXTLEFT         SAVE NEW NUMBER OF EXTENTS
         CLC   DS3PTRDS,=10X'00'   SEE IF POINTER TO FMT3
         BE    NVSAMR08            NO, ????, END OF SPACE
         MVC   CCHHR,DS3PTRDS      SET SEEK ADDRESS
         B     NVSAMR07            GO GET ANOTHER FMT3
NVSAMR08 L     R15,TOTSPACE        LOAD TOTAL SPACE ALLOC ACCUMULATOR
         AH    R15,SPALLOC         ADD SPACE ALLOCATED TO THIS DATASET
         ST    R15,TOTSPACE        SAVE UPDATED TOTAL SPACE ALLOCATED
         LH    R15,SPALLOC         LOAD SPACE ALLOCATED FOR DATA SET
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   DBL(6),=X'402020202120' SET EDIT MASK
         ED    DBL(6),DOUBLE+5     EDIT SPACE ALLOCATED TO WORK
         MVC   OSPALLOC,DBL+1      MOVE SPACE ALLOCATED VALUE TO MSG
***********************************************************************
*                                                                     *
*        SPACE USED                                                   *
*                                                                     *
*        THIS FIGURE IS CALCULATED FROM THE DS1LSTAR FIELD            *
*        WHERE THE FORMAT IS AS FOLLOWS:                              *
*                                                                     *
*        TTTTRR - TTTT IS THE RELATIVE ADDRESS OF THE LAST USED       *
*                      TRACK IN THE DATA SET                          *
*               - RR   IS THE LAST USED RECORD ON THE LAST USED       *
*                      TRACK IN THE DATASET                           *
*        IF RR IS NOT EQUAL TO ZERO, THEN AN ADDITIONAL TRACK WILL    *
*        BE ADDED TO TTTT TO ACCOUNT FOR THE PARTIAL TRACK.           *
*                                                                     *
***********************************************************************
NVSAMR09 LH    R1,DS1LSTAR         LOAD DS1LSTAR REL TRACK NUMBER
         ICM   R14,1,DS1LSTAR+2    TEST 'RR' VALUE
         BZ    NVSAMR10            ZERO, BRANCH
         LA    R1,1(,R1)           ADD TO TO REL TRACK NUMBER
NVSAMR10 L     R15,TOTUSED         LOAD TOTAL SPACE USED ACCUMULATOR
         AR    R15,R1              ADD SPACE USED BY THIS DATASET
         ST    R15,TOTUSED         SAVE UPDATED TOTAL SPACE USED
         CVD   R1,DOUBLE           CONVERT TRACKS USED TO PACKED
         MVC   DBL(6),=X'402020202120' SET EDIT MASK
         ED    DBL(6),DOUBLE+5     EDIT SPACE USED TO WORK
         MVC   OSPUSED,DBL+1       MOVE SPACE USED VALUE TO MSG
***********************************************************************
*        NUMBER OF EXTENTS                                            *
***********************************************************************
NVSAMR11 SLR   R15,R15             CLEAR REG FOR IC
         IC    R15,DS1NOEPV        LOAD NUMBER OF EXTENTS
         CVD   R15,DOUBLE          CONVERT NBR OF EXTENTS TO PACKED
         MVC   DBL(4),=X'40202120' SET EDIT MASK
         ED    DBL(4),DOUBLE+6     EDIT NBR OF EXTENTS TO WORK
         MVC   OEXTENT,DBL+1       MOVE EXTENT NUMBER TO MSG
***********************************************************************
*        DO NOT FORMAT ANY OTHER OF THE DETAILED INFORMATION          *
*        UNLESS THE DSNAME HAS CHANGED.  HOPEFULLY THE DETAILED       *
*        INFORMATION IS IDENTICAL FOR MULTIVOLUME DATASETS.           *
***********************************************************************
         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST
         BE    NVSAMR22            YES, BRANCH
***********************************************************************
*        DSORG                                                        *
***********************************************************************
NVSAMR12 MVC   ODSORG,=C'IS'       SET TO ISAM ORGANIZATION
         TM    DS1DSORG+1,X'80'    IS IT IS
         BO    NVSAMR13            YES, BRANCH
         MVC   ODSORG,=C'PS'       SET TO PHYSICAL SEQUENTIAL
         TM    DS1DSORG,X'40'      IS IT PS
         BO    NVSAMR13            YES, BRANCH
         MVC   ODSORG,=C'DA'       SET TO DIRECT ACCESS
         TM    DS1DSORG,X'20'      IS IT DA
         BO    NVSAMR13            YES, BRANCH
         MVC   ODSORG,=C'PO'       SET TO PARTITIONED ORGANIZATION
         TM    DS1DSORG,X'02'      IS IT PO
         BO    NVSAMR13            YES, BRANCH
         MVC   ODSORG,=C'VS'       SET TO VSAM ORGANIZATION
         TM    DS1DSORG+1,X'08'    IS IT VS
         BO    NVSAMR13            YES, BRANCH
         MVC   ODSORG,BLANKS       SET DSORG TO BLANKS
NVSAMR13 TM    DS1DSORG,X'01'      IS DATASET UNMOVEABLE
         BZ    NVSAMR14            NO, BRANCH
         MVI   ODSORG+2,C'U'       SET UNMOVEABLE INDICATOR
         EJECT
***********************************************************************
*        RECFM                                                        *
***********************************************************************
NVSAMR14 CLC   ODSORG,=C'VS'       IS THIS A VSAM DATASET
         BE    NVSAMR20            YES, DCB STUFF INCORRECT
         LA    R15,ORECFM          LOAD ADDR OF DETAIL RECFM FIELD
         CLI   DS1RECFM,X'00'      SEE IF RECFM SPECIFIED
         BE    NVSAMR18            IF NOT SPECIFIED, EXIT
         MVI   0(R15),C'U'         ASSUME UNDEFINED
         TM    DS1RECFM,B'11000000' TEST RECFM=U
         BO    NVSAMR18            IF RECFM=U, EXIT
         MVI   0(R15),C'F'         ASSUME FIXED
         TM    DS1RECFM,B'10000000' TEST RECFM=F
         BO    NVSAMR15            IF RECFM=F, BRANCH
         MVI   0(R15),C'V'         IF NOT RECFM=F, THEN RECFM=V
NVSAMR15 LA    R15,1(R15)          INCREMENT TO NEXT OUTPUT BYTE
         TM    DS1RECFM,B'00010000' TEST RECFM=B
         BNO   NVSAMR16            IF NOT BLOCKED, BRANCH
         MVI   0(R15),C'B'         SET DETAIL TO BLOCKED
         LA    R15,1(R15)          INCREMENT TO NEXT OUTPUT BYTE
NVSAMR16 TM    DS1RECFM,B'00001000' TEST RECFM=S
         BNO   NVSAMR17            IF NOT RECFM=S, BRANCH
         MVI   0(R15),C'S'         MOVE RECFM=S TO DETAIL
         LA    R15,1(R15)          INCREMENT TO NEXT OUTPUT BYTE
NVSAMR17 TM    DS1RECFM,B'00000110' SEE IF PRINT CONTROL
         BZ    NVSAMR18            IF NOT PRINT CONTROL, EXIT
         MVI   0(R15),C'A'         ASSUME ASA CONTROL
         TM    DS1RECFM,B'00000100' TEST FOR ASA CONTROL
         BO    NVSAMR18            IF ASA CONTROL, EXIT
         MVI   0(R15),C'M'         IF NOT ASA, THEN MUST BE MACHINE CTL
***********************************************************************
*        BLKSIZE                                                      *
***********************************************************************
NVSAMR18 LH    R15,DS1BLKL         LOAD BLOCK SIZE
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   DBL(6),=X'402020202020' SET EDIT MASK
         ED    DBL(6),DOUBLE+5     EDIT BLKSIZE TO WORK
         MVC   OBLKSIZE,DBL+1      MOVE BLKSIZE TO MSG
***********************************************************************
*        LRECL                                                        *
***********************************************************************
NVSAMR19 LH    R15,DS1LRECL        LOAD LOGICAL RECORD SIZE
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   DBL(6),=X'402020202020' SET EDIT MASK
         ED    DBL(6),DOUBLE+5     EDIT LRECL TO WORK
         MVC   OLRECL,DBL+1        MOVE LRECL TO MSG
***********************************************************************
*        CREATION DATE                                                *
***********************************************************************
NVSAMR20 SLR   R15,R15             CLEAR REG FOR ICM
         ICM   R15,3,DS1CREDT+1    LOAD DAY
         CVD   R15,DOUBLE          CONVERT DAY TO PACKED
         ZAP   PJDATE,DOUBLE       MOVE DAY TO PJDATE
         SLR   R15,R15             CLEAR REG FOR ICM
         ICM   R15,1,DS1CREDT      LOAD YEAR
         CVD   R15,DOUBLE          CONVERT YEAR TO PACKED
         MVO   DBL,DOUBLE+6(2)     MOVE YEAR BY OFFSET FOR UNSIGNED
         MVC   PJDATE(1),DBL+6     MOVE YEAR TO PJDATE
         L     R15,=V(DATERTN)     LOAD ADDRESS OF DATE CONVERT ROUTINE
         BALR  R14,R15             GO CONVERT JULIAN TO CALENDAR DATE
         MVC   OCRTDT,CALDATE      MOVE CREATION DATE TO MSG
***********************************************************************
*        DSNAME                                                       *
***********************************************************************
NVSAMR21 CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST
         BE    NVSAMR22            YES, BRANCH
         MVC   ODSN,LDSN           NO, SET DSNAME IN DETAIL LINE
***********************************************************************
*        WRITE DETAIL LINE                                            *
***********************************************************************
NVSAMR22 MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         MVC   DETAIL,BLANKS       BLANK DETAIL LINE
         MVC   PDSN,LDSN           SAVE CURRENT DSNAME
NVSAMR23 LA    R6,16(,R6)          INCREMENT TO NEXT VOLUME ENTRY
         BCT   R7,NVSAMR01         LOOP UNTIL END OF VOLUME LIST
         L     R15,TOTDS           LOAD NUMBER OF DSNAMES
         LA    R15,1(R15)          ADD 1 TO COUNT
         ST    R15,TOTDS           SAVE NUMBER OF DATASETS
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         EJECT
***********************************************************************
*        NO FORMAT1 DSCB FOUND                                        *
***********************************************************************
NVSAMR24 MVC   MSGDATA(20),=CL20'VOLUME NOT MOUNTED'
         CH    R15,=H'4'           RETURN CODE OF 4
         BE    NVSAMR25            YES, CORRECT MESSAGE
         MVC   MSGDATA(20),=CL20'NOT ON INDICATED VOL'
         CH    R15,=H'8'           RETURN CODE OF 8
         BE    NVSAMR25            YES, CORRECT MESSAGE
         MVC   MSGDATA(20),=CL20'I/O ERROR IN VTOC   '
NVSAMR25 MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
         MVC   OVOL,VOLSER         SET VOLSER IN MESSAGE
         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    NVSAMR26            NO, BRANCH
         MVC   OSMSG(20),MSGDATA   SET ERROR MESSAGE
         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE
         B     NVSAMR22            GO WRITE MESSAGE
NVSAMR26 MVC   OMSG(20),MSGDATA    SET ERROR MESSAGE
         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE
         B     NVSAMR22            GO WRITE MESSAGE
         EJECT
***********************************************************************
*        NOT A DASD DATASET                                           *
***********************************************************************
NVSAMR27 TM    MISCINFO,DAONLY     SEE IF DASD ONLY REQUESTED
         BO    NVSAMR29            YES, BYPASS THIS ONE
         MVC   OVOL,VOLSER         MOVE VOLSER TO MESSAGE
         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST
         BE    NVSAMR28            YES, BRANCH
         MVC   ODSN,LDSN           NO, SET DSNAME IN DETAIL LINE
NVSAMR28 MVC   OSPALLOC(25),=CL25'UNSUPPORTED DEVICE TYPE'
         B     NVSAMR22            GO PROCESS VOLSERS
NVSAMR29 MVC   DETAIL,BLANKS       BLANK DETAIL LINE
         MVC   PDSN,LDSN           SAVE CURRENT DSNAME
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         EJECT
***********************************************************************
*        DATASET NOT FOUND                                            *
***********************************************************************
NVSAMR30 MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
         MVC   OVOL,VOLSER         SET VOLSER IN MESSAGE
         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    NVSAMR31            NO, BRANCH
         MVC   OSMSG(20),=CL20'DATASET NOT FOUND'  SET ERROR MESSAGE
         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE
         B     NVSAMR32            GO WRITE MESSAGE
NVSAMR31 MVC   OMSG(20),=CL20'DATASET NOT FOUND'  SET ERROR MESSAGE
         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE
NVSAMR32 MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         MVC   DETAIL,BLANKS       BLANK DETAIL LINE
         MVC   PDSN,LDSN           SAVE CURRENT DSNAME
         L     R15,TOTDS           LOAD NUMBER OF DSNAMES
         LA    R15,1(R15)          ADD 1 TO COUNT
         ST    R15,TOTDS           SAVE NUMBER OF DATASETS
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         DROP  R6                  DROP ADDRESSABILITY TO VOLSER SECTN
         EJECT
***********************************************************************
*        PROCESS DATASET OR INDEX COMPONENTS                          *
***********************************************************************
VSAMR    MVC   DETAIL,BLANKS       BLANK DETAIL LINE
         BAL   R14,DSETINFO        GO GET DATASET/GDG INFO
VSAMR01  LA    R6,VOLSER           POINT TO FIRST VOLUME ENTRY
         USING VOLSER,R6           SET ADDRESSABILITY TO VOLUME ENTRY
         LH    R7,NBRVOLS          LOAD NUMBER OF VOLUMES IN LIST
         LTR   R7,R7               TEST FOR ZERO
         BZ    VSAMR09             NONE, CATALOG ERROR
***********************************************************************
*        PROCESS THE VOLSER LIST                                      *
***********************************************************************
VSAMR02  TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    VSAMR03             NO, BRANCH
***********************************************************************
*        FORMAT SHORT PRINT LINE                                      *
***********************************************************************
         MVC   OVOL,VOLSER         SET VOLSER IN MESSAGE
         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST
         BE    VSAMR08             YES, DO NOT SET DSNAME IN DETAIL
         MVC   OSHORTDS,LDSN       NO, SET DSNAME IN DETAIL LINE
         B     VSAMR08             GO WRITE DETAIL LINE
         EJECT
***********************************************************************
*        FORMAT LONG PRINT LINE                                       *
***********************************************************************
***********************************************************************
*        VOLSER                                                       *
***********************************************************************
VSAMR03  MVC   OVOL,VOLSER         MOVE VOLSER TO MESSAGE
***********************************************************************
*        IF SPACE ALLOCATED = 0 THEN CANDIDATE ONLY                   *
***********************************************************************
         OC    NOTRKSA,NOTRKSA     SEE IF SPACE ALLOCATED
         BZ    VSAMR12             ZERO, CANDIDATE
***********************************************************************
*        SPACE ALLOCATED                                              *
***********************************************************************
         L     R15,TOTSPACE        LOAD TOTAL SPACE ALLOC ACCUMULATOR
         AH    R15,NOTRKSA         ADD SPACE ALLOCATED TO THIS DATASET
         ST    R15,TOTSPACE        SAVE UPDATED TOTAL SPACE ALLOCATED
         LH    R15,NOTRKSA         LOAD SPACE ALLOCATED FOR DATA SET
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   DBL(6),=X'402020202120' SET EDIT MASK
         ED    DBL(6),DOUBLE+5     EDIT SPACE ALLOCATED TO WORK
         MVC   OSPALLOC,DBL+1      MOVE SPACE ALLOCATED VALUE TO MSG
***********************************************************************
*        SPACE USED                                                   *
***********************************************************************
         L     R15,TOTUSED         LOAD TOTAL SPACE USED ACCUMULATOR
         AH    R15,NOTRKSU         ADD SPACE USED BY THIS DATASET
         ST    R15,TOTUSED         SAVE UPDATED TOTAL SPACE USED
         LH    R15,NOTRKSU         LOAD SPACE USED BY THIS DATASET
         CVD   R15,DOUBLE          CONVERT TRACKS USED TO PACKED
         MVC   DBL(6),=X'402020202120' SET EDIT MASK
         ED    DBL(6),DOUBLE+5     EDIT SPACE USED TO WORK
         MVC   OSPUSED,DBL+1       MOVE SPACE USED VALUE TO MSG
***********************************************************************
*        NUMBER OF EXTENTS                                            *
***********************************************************************
         LH    R15,NOEXT           LOAD NUMBER OF EXTENTS
         CVD   R15,DOUBLE          CONVERT NBR OF EXTENTS TO PACKED
         MVC   DBL(4),=X'40202120' SET EDIT MASK
         ED    DBL(4),DOUBLE+6     EDIT NBR OF EXTENTS TO WORK
         MVC   OEXTENT,DBL+1       MOVE EXTENT NUMBER TO MSG
***********************************************************************
*        DO NOT FORMAT ANY OTHER OF THE DETAILED INFORMATION          *
*        UNLESS THE DSNAME HAS CHANGED.  HOPEFULLY THE DETAILED       *
*        INFORMATION IS IDENTICAL FOR MULTIVOLUME DATASETS.           *
***********************************************************************
         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST
         BE    VSAMR08             YES, BRANCH
***********************************************************************
*        DSORG                                                        *
***********************************************************************
         MVC   ODSORG,=C'VS'       SET TO VSAM ORGANIZATION
         LA    R15,ODSORG+2        POINT TO EXTRA AREA
         TM    VSAMATTR,IMBED      SEE IF HAS IMBEDDED KEYS
         BZ    VSAMR04             NO, BRANCH
         MVI   0(R15),C'I'         SET INDICATOR
         LA    R15,1(R15)          INCREMENT FIELD ADDRESS
VSAMR04  TM    VSAMATTR,REPLIC     SEE IF HAS REPLICATED KEYS
         BZ    VSAMR05             NO, BRANCH
         MVI   0(R15),C'R'         SET INDICATOR
         LA    R15,1(R15)          INCREMENT FIELD ADDRESS
         EJECT
***********************************************************************
*        RECFM                                                        *
***********************************************************************
VSAMR05  LA    R15,ORECFM          LOAD ADDR OF DETAIL RECFM FIELD
         MVI   0(R15),C'F'         ASSUME FIXED
         CLC   LRECL,MAXLRECL      SEE IF AVG LRECL = MAX
         BE    VSAMR06             YES, FIXED
         MVI   0(R15),C'V'         NO, SET TO VARIABLE
VSAMR06  LA    R15,1(R15)          INCREMENT TO NEXT CHAR RECFM
         MVI   0(R15),C'B'         SET TO BLOCKED (VSAM ALWAYS BLOCKED)
         LA    R15,1(R15)          INCREMENT TO NEXT CHAR RECFM
         TM    VSAMATTR,SPANNED    SEE IF SPANNED
         BZ    VSAMR07             NO, BRANCH
         MVI   0(R15),C'S'         SET TO SPANNED
***********************************************************************
*        BLKSIZE (CISIZE)                                             *
***********************************************************************
VSAMR07  L     R15,CISIZE          LOAD CI SIZE
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   DBL(6),=X'402020202020' SET EDIT MASK
         ED    DBL(6),DOUBLE+5     EDIT BLKSIZE TO WORK
         MVC   OBLKSIZE,DBL+1      MOVE BLKSIZE TO MSG
***********************************************************************
*        LRECL (AVG)                                                  *
***********************************************************************
         L     R15,LRECL           LOAD AVERAGE LRECL
         CVD   R15,DOUBLE          CONVERT TO PACKED
         MVC   DBL(6),=X'402020202120' SET EDIT MASK
         ED    DBL(6),DOUBLE+5     EDIT LRECL TO WORK
         MVC   OLRECL,DBL+1        MOVE LRECL TO MSG
***********************************************************************
*        CREATION DATE                                                *
***********************************************************************
         MVC   PJDATE,DSETCRDT     MOVE CRDATE TO PJDATE
         L     R15,=V(DATERTN)     LOAD ADDRESS OF DATE CONVERT ROUTINE
         BALR  R14,R15             GO CONVERT JULIAN TO CALENDAR DATE
         MVC   OCRTDT,CALDATE      MOVE CREATION DATE TO MSG
***********************************************************************
*        DSNAME                                                       *
***********************************************************************
         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST
         BE    VSAMR08             YES, BRANCH
         MVC   ODSN,LDSN           NO, SET DSNAME IN DETAIL LINE
***********************************************************************
*        WRITE DETAIL LINE                                            *
***********************************************************************
VSAMR08  MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         MVC   DETAIL,BLANKS       BLANK DETAIL LINE
         MVC   PDSN,LDSN           SAVE CURRENT DSNAME
         LA    R6,16(,R6)          INCREMENT TO NEXT VOLUME ENTRY
         BCT   R7,VSAMR02          LOOP UNTIL END OF VOLUME LIST
         L     R15,TOTDS           LOAD NUMBER OF DSNAMES
         LA    R15,1(R15)          ADD 1 TO COUNT
         ST    R15,TOTDS           SAVE NUMBER OF DATASETS
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         EJECT
***********************************************************************
*                                                                     *
*        DATASET WITHOUT DETAILS                                      *
*                                                                     *
*        THIS APPEARS TO ONLY OCCUR WITH CATALOG ERRORS SUCH AS       *
*        TRUENAME ENTRIES WITHOUT THEIR RELATED BASE ENTRY,           *
*        CATALOG POINTERS TO A VVDS WHICH DOES NOT CONTAIN THE        *
*        ENTRY OR JUST A TRUE VSAM I/O ERROR.                         *
*                                                                     *
***********************************************************************
VSAMR09  MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
         MVC   OVOL,VOLSER         SET VOLSER
         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    VSAMR10             NO, BRANCH
         MVC   OSMSG(20),=CL20'** CATALOG ERROR **'  SET ERROR MESSAGE
         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE
         B     VSAMR11             GO WRITE MESSAGE
VSAMR10  MVC   OMSG(20),=CL20'** CATALOG ERROR **'  SET ERROR MESSAGE
         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE
VSAMR11  MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         MVC   DETAIL,BLANKS       BLANK DETAIL LINE
         MVC   PDSN,LDSN           SAVE CURRENT DSNAME
         L     R15,TOTDS           LOAD NUMBER OF DSNAMES
         LA    R15,1(R15)          ADD 1 TO COUNT
         ST    R15,TOTDS           SAVE NUMBER OF DATASETS
         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?
         BO    CATNDX1             NO, GO DO IT
         B     DSNLOOP             YES, GO PROCESS NEXT DSN
         EJECT
***********************************************************************
*                                                                     *
*        VOLUME WITHOUT SPACE - CANDIDATE                             *
*                                                                     *
*        THIS COULD ALSO BE A VSAM OBJECT WHOSE VOLUME IS NOT         *
*        MOUNTED.                                                     *
*                                                                     *
***********************************************************************
VSAMR12  MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE
         MVC   OVOL,VOLSER         SET VOLSER
         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND
         BZ    VSAMR13             NO, BRANCH
         MVC   OSMSG(20),=CL20'CANDIDATE' SET MESSAGE
         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST
         BE    VSAMR14             YES, DO NOT SET DSNAME
         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE
         B     VSAMR14             GO WRITE MESSAGE
VSAMR13  MVC   OMSG(20),=CL20'CANDIDATE' SET MESSAGE
         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST
         BE    VSAMR14             YES, DO NOT SET DSNAME
         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE
VSAMR14  B     VSAMR07             GO WRITE MESSAGE
         DROP  R6                  DROP ADDRESSABILITY TO VOLSER SECTN
         EJECT
***********************************************************************
*                                                                     *
*                        EXTCALC ROUTINE                              *
*                                                                     *
*        THIS WILL CALCULATE THE NUMBER OF TRACKS IN THE EXTENT       *
*        ENTRY(S) POINTED TO BY REGISTER 1 UPON ENTRY.  REGISTER      *
*        15 CONTAINS THE NUMBER OF EXTENT DESCRIPTORS, BUT ALL        *
*        CALCULATIONS WILL TERMINATE UPON ENCOUNTERING THE FIRST      *
*        ZERO EXTENT DESCRIPTOR.  THE NUMBER OF TRACKS IN THE         *
*        EXTENT DESCRIPTORS WILL BE RETURNED IN REGISTER 15, AND      *
*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14.        *
*                                                                     *
***********************************************************************
EXTCALC  ST    R14,RETEXTC         SAVE RETURN ADDRESS
         LR    R14,R15             SAVE NUMBER OF EXTENTS
         SLR   R15,R15             ZERO THE SPACE ACCUMULATOR
EXTCALC1 CLC   0(10,R1),=10X'00'   SEE IF EXTENT DESC ALL ZEROS
         BE    EXTCALC2            YES, POSSIBLE ERROR BUT JUST EXIT
         SLR   R2,R2               ZERO REG FOR ICM
         ICM   R2,3,6(R1)          LOAD END CC
         MH    R2,TRKCYL           MULTIPLY BY TRKS PER CYL
         AR    R15,R2              ADD TO ACCUMULATOR
         SLR   R2,R2               ZERO REG FOR ICM
         ICM   R2,3,8(R1)          LOAD END HH
         AR    R15,R2              ADD TO ACCUMULATOR
         SLR   R2,R2               ZERO REG FOR ICM
         ICM   R2,3,2(R1)          LOAD START CC
         MH    R2,TRKCYL           MULTIPLY BY TRKS PER CYL
         SR    R15,R2              SUBTRACT FROM ACCUMULATOR
         SLR   R2,R2               ZERO REG FOR ICM
         ICM   R2,3,4(R1)          LOAD START HH
         SR    R15,R2              SUBTRACT FROM ACCUMULATOR
         LA    R15,1(,R15)         ADD 1 TO MAKE SIZE REL TO 1
         LA    R1,10(,R1)          INCREMENT TO NEXT EXTENT DESCRIPTION
         BCT   R14,EXTCALC1        LOOP
EXTCALC2 L     R14,RETEXTC         RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        END OF PROGRAM ROUTINE                                       *
*                                                                     *
***********************************************************************
EXIT     L     R1,SVC26WRK         LOAD ADDRESS OF WORK AREA
         L     R0,WKSIZE           LOAD SIZE OF WORK AREA
         FREEMAIN R,LV=(0),A=(1)   FREE WORK AREA
         L     R1,SVC26SPC         LOAD ADDRESS OF WORK AREA
         FREEMAIN R,LV=5120,A=(1)  FREE WORK AREA
         LR    R1,R13              SAVE DSA ADDRESS
         L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE
         FREEMAIN R,LV=LDSA,A=(1)  FREE WORK AREA
         RETURN (14,12),RC=0       RETURN TO TSO USER
         EJECT
***********************************************************************
*                                                                     *
*        WRITE MESSAGE LINE TO TSO TERMINAL                           *
*                                                                     *
***********************************************************************
PUTMSG   ST    R14,SAVERET         SAVE RETURN ADDRESS
         XC    ECB,ECB             ZERO MY ECB
         PUTLINE PARM=PUTLINE,OUTPUT=(MSGOUT,TERM,SINGLE,INFOR),       X
               MF=(E,IOPL)
         L     R14,SAVERET         RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        CALL SVC26 TO RETURN DATASET/GDG BASE INFORMATION            *
*                                                                     *
***********************************************************************
DSETINFO STM   R0,R15,SAVEDINF     SAVE INPUT REGISTERS
         MVC   ENTNAME,LDSN        SET DSNAME IN PARM LIST
         LA    R1,RESULTS          LOAD ADDRESS OF PARM LIST
         L     R15,=V(VSAMRTN)     LOAD ADDRESS OF SPECIAL VSAM ROUTINE
         BALR  R14,R15             GO GET SPECIAL VSAM INFORMATION
         LM    R0,R14,SAVEDINF     RESTORE INPUT REGISTERS EXCEPT 15
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        SCAN UCB TABLE FOR SYSRES VOLUME                             *
*                                                                     *
***********************************************************************
         SPACE 1
UCBLOOK  ST    R14,RETUCBL         SAVE RETURN ADDRESS
         MVC   SYSVOL,=C'******'   SET VOLSER
         XC    SYSTYP,SYSTYP       SET DEVICE TYPE
         L     R1,CVTPTR           GET CVT ADDRESS
         L     R14,CVTUCBSC-CVT(R1) POINT TO UCB SCAN SERVICE RTN
         ST    R14,IOSVSUCB        SAVE ADDR OF UCB SCAN ROUTINE
         MVI   DEVCLASS,UCB3DACC   SET FOR DASD UCBS ONLY
         LA    R1,SCANWORK         LOAD ADDRESS OF SCAN WORK AREA
         ST    R1,SCANP1           SAVE IN PARM LIST
         LA    R1,DEVCLASS         LOAD ADDRESS OF DEVICE CLASS
         ST    R1,SCANP2           SAVE IN PARM LIST
         LA    R1,UCBADDR          LOAD ADDRESS OF UCB RETURN
         ST    R1,SCANP3           SAVE IN PARM LIST
         OI    SCANP3,X'80'        TURN ON HIGH ORDER BIT
         XC    SCANWORK,SCANWORK   CLEAR SCAN SERVICE WORK AREA
UCBLOOK1 L     R15,IOSVSUCB        LOAD ADDR OF UCB SCAN ROUTINE
         LA    R1,SCANPARM         LOAD ADDRESS OF UCB SCAN PARM
         BALR  R14,R15             GO TO UCB SCAN SERVICE ROUTINE
         LTR   R15,R15             TEST RETURN CODE
         BNZ   UCBLOOK2            NOT ZERO, END OF UCBS
         L     R9,UCBADDR          LOAD UCB ADDRESS
***********************************************************************
*        SEE IF THE SYSRES VOLUME                                     *
***********************************************************************
         USING UCB,R9              SET ADDRESSABILITY TO UCB
         TM    UCBSTAT,UCBSYSR     IS IT THE SYSRES VOLUME?
         BZ    UCBLOOK1            NO, GO LOOK AT THE NEXT UCB
         MVC   SYSVOL,UCBVOLI      MOVE VOLSER TO SAVE AREA
         MVC   SYSTYP,UCBTYP       MOVE DEVICE TYPE TO SAVE AREA
UCBLOOK2 L     R14,RETUCBL         LOAD RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         DROP  R9                  DROP ADDRESSABILITY TO UCB
         EJECT
***********************************************************************
*                                                                     *
*        CONSTANTS USED BY THIS PROGRAM                               *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*        TRACKS PER CYLINDER TABLE BASED ON DEVICE TYPE               *
***********************************************************************
TRKSCYL  DC    AL1(0)                  00 (00) - UNASSIGNED
         DC    AL1(10)                 01 (01) - 2311 DISK
         DC    AL1(200)                02 (02) - 2301 DRUM
         DC    AL1(10)                 03 (03) - 2303 DRUM
         DC    AL1(46)                 04 (04) - 2302 DISK FILE
         DC    AL1(00)                 05 (05) - 2321 DATA CELL
         DC    AL1(8)                  06 (06) - 2305-1
         DC    AL1(8)                  07 (07) - 2305-2
         DC    AL1(20)                 08 (08) - 2314 DISK
         DC    AL1(19)                 09 (09) - 3330 DISK
         DC    AL1(00)                 10 (0A) - 3340
         DC    AL1(30)                 11 (0B) - 3350 DISK
         DC    AL1(00)                 12 (0C) - 3375
         DC    AL1(19)                 13 (0D) - 3330-11 DISK
         DC    AL1(15)                 14 (0E) - 3380
         DC    AL1(00)                 15 (0F) - UNASSIGNED
         SPACE 3
BLANKS   DC    CL120' '            CHARACTER STRING OF BLANKS
HEADING1 DC    CL120'SERIAL ALLOC  USED  EX DSO  -DCB ATTRIBUTES- CR. DX
               ATE -DSNAME-'
HEADING2 DC    CL120'SERIAL -DSNAME-'
PUTLINIT PUTLINE MF=L              PUTLINE LIST FORM
         EJECT
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*        DYNAMIC WORK AREA                                            *
*                                                                     *
***********************************************************************
WORKA    DSECT
         DS    18F                 PROGRAM SAVE AREA
SAVEDATE DS    18F                 SAVE AREA FOR DATE ROUTINE
SAVEDINF DS    16F                 SAVE AREA FOR DATASET INFO ROUTINE
SAVERET  DS    F                   REGISTER SAVE AREA FOR PUTMSG RTN
RETEXTC  DS    F                   RETURN ADDRESS FROM EXTENT CALC RTN
RETUCBL  DS    F                   RETURN ADDRESS FROM UCB LOOKUP RTN
DOUBLE   DS    D                   DOUBLE WORD WORK AREA
DBL      DS    D                   DOUBLE WORD WORK AREA
TSOID    DS    CL7                 TSO LOGONID
TSOPREF  DS    CL7                 TSO PROFILE PREFIX
TSOPREFL DS    C                   LENGTH OF PROFILE PREFIX
*
DSN      DS    CL44                DSN FOR SEARCH
CATDSN   DS    CL44                CATALOG DSNAME
*
MSGDATA  DS    CL20                SPECIAL MESSAGE DATA
         SPACE 3
MISCINFO DS    X                   MISCELLANEOUS INDICATORS
SHORT    EQU   X'80'               SHORT RESPONSE TO COMMAND
SPMSG    EQU   X'40'               SPECIAL MESSAGE FOR DATASET
DAONLY   EQU   X'20'               REPORT ONLY ON DA DATASETS
DOGEN    EQU   X'10'               DO GENERIC LOCATE
         CNOP  0,4
CALDATE  DS    CL8                 CALENDAR DATE (MM/DD/YY)
PJDATE   DS    PL3                 PACKED JULIAN DATE (YYDDDS)
LDSN     DS    CL44                DSNAME USED BY LOCATE
PDSN     DS    CL44                PREVIOUS DSNAME DISPLAYED
SVC26DSN DS    0CL45               DSNAME USED BY SVC26
SVC26DSL DS    CL1                 LENGTH OF DSN
SVC26DS  DS    CL44                ACTUAL DSNAME INDEX
         EJECT
SVC26WRK DS    F                   ADDRESS OF SVC26 WORK AREA
WKSIZE   DS    F                   SIZE OF SVC26WRK
SVC26SPC DS    F                   ADDRESS OF SPECIAL SVC26 WORK AREA
TOTSPACE DS    F                   TOTAL SPACE ALLOCATED
TOTUSED  DS    F                   TOTAL SPACE USED
TOTDS    DS    F                   TOTAL DATASETS
EXTLEFT  DS    H                   NUMBER OF VTOC EXTENTS LEFT
SPALLOC  DS    H                   SPACE ALLOCATED FOR THIS DATASET
TRKCYL   DS    H                   TRACKS PER CYLINDER FOR THIS VOLUME
         SPACE 3
DETAIL   DS    0CL120              DETAIL LINE
OVOL     DS    CL6                 OUTPUT VOLSER
         DS    C
OSPALLOC DS    CL5                 OUTPUT SPACE ALLOCATED
         DS    C
OSPUSED  DS    CL5                 OUTPUT SPACE USED
         DS    C
OEXTENT  DS    CL3                 OUTPUT NUMBER OF EXTENTS
         DS    C
ODSORG   DS    CL2                 OUTPUT DSORG
         DS    3C
ORECFM   DS    CL4                 OUTPUT RECFM
         DS    C
OBLKSIZE DS    CL5                 OUTPUT BLKSIZE
         DS    C
OLRECL   DS    CL5                 OUTPUT LRECL
         DS    C
OCRTDT   DS    CL8                 OUTPUT CREATION DATE
         DS    C
ODSN     DS    CL44                OUTPUT DSNAME
         DS    CL22
OSHORTDS EQU   DETAIL+7,44         OUTPUT DSN FOR SHORT FORMAT
OSMSG    EQU   DETAIL+52,20        OUTPUT MSG FOR SHORT FORMAT
OMSG     EQU   DETAIL+7,20         OUTPUT MSG FOR LONG  FORMAT
OGDGLIM  EQU   DETAIL+24,8         OUTPUT GDG LIMIT FIELD
OGDGEMP  EQU   DETAIL+33,5         OUTPUT GDG EMPTY/NOEMPTY IND
OGDGSCR  EQU   DETAIL+39,5         OUTPUT GDG SCRATCH/NOSCRATCH IND
         SPACE 3
CAMLST2  CAMLST SEARCH,LDSN,OVOLSER,DSCB1+44 OBTAIN BY NAME PARAM AREA
         SPACE 3
CAMLST3  CAMLST SEEK,CCHHR,OVOLSER,DSCB3 OBTAIN BY DSCB ADDR PARAM AREA
         SPACE 3
         CNOP  0,4
CTGPL    DS    XL60                CATALOG MANAGEMENT PARAMETER LIST
CCHHR    DS    XL5                 CCHHR OF FORMAT 3 DSCB
OVOLSER  DS    CL6                 VOLSER OF VTOC
DSCB1    DS    0F                  FORMAT 1 DSCB
         IECSDSL1 1
         ORG   DSCB1+44+140
DSCB3    DS    0F                  FORMAT 3 DSCB
         IECSDSL1 3
         ORG   DSCB3+140
CPPL     DS    0F                  COMMAND PROCESSOR PARAMETER LIST
CPPLCBUF DS    F                   COMMAND BUFFER
CPPLUPT  DS    F                   USER PROFILE TABLE
CPPLPSCB DS    F                   PROTECTED STEP CONTROL BLOCK
CPPLECT  DS    F                   ENVIRONMENT CONTROL TABLE
*
PPL      DS    0F                  PARSE PARAMETER LIST
PPLUPT   DS    F                   USER PROFILE TABLE
PPLECT   DS    F                   EVIRONMENT CONTROL TABLE
PPLECB   DS    F                   MY ECB
PPLPCL   DS    F                   PARSE CONTROL LIST
PPLPDL   DS    F                   POINTER TO PARSE DESCRIPTOR LIST
PPLBUFF  DS    F                   COMMAND BUFFER ADDRESS
PPLWORK  DS    F                   USER WORK AREA ADDRESS
*
PDLPOINT DS    F                   ADDRESS OF PARSE DESCRIPTOR LIST
*
PUTLINE  PUTLINE MF=L              PUTLINE LIST FORM
LPUTLINE EQU   *-PUTLINE           LENGTH OF PUTLINE LIST FORM
*
IOPL     DS    4F                  IOPL
*
ECB      DS    F                   MY ECB
*
MSGOUT   DS    2F                  PUTLINE MSG POINTER
MSGLINE  DS    0CL125              PUTLINE MSG AREA
         DS    AL2(121)            LENGTH OF MSG
         DS    AL2(0)              RESERVED
MSGPREF  DS    C                   START WITH BLANK CHAR
MSG      DS    CL120               ACTUAL MESSAGE
*
DEVCLASS DS    X                   IOSVSUCB DEVICE TYPE
SCANWORK DS    CL100               IOSVSUCB SCAN WORK AREA
UCBADDR  DS    F                   ADDRESS OF UCB
IOSVSUCB DS    F                   ADDRESS OF IOSVSUCB ROUTINE
SCANPARM DS    0F                  IOSVSUCB PARM LIST
SCANP1   DS    F                   ADDRESS OF WORK AREA
SCANP2   DS    F                   ADDRESS OF DEVICE TYPE FIELD
SCANP3   DS    F                   ADDRESS OF UCB RETURN AREA
*
SYSVOL   DS    CL6                 VOLSER OF SYSRES VOLUME
SYSTYP   DS    XL4                 DEVICE TYPE OF SYSRES VOLUME
*
LDSA     EQU   *-WORKA             LENGTH OF WORK AREA
         EJECT
***********************************************************************
*                                                                     *
*                          D A T E R T N                              *
*                                                                     *
*         CONVERT JULIAN DATA TO CALENDAR DATE                        *
*                                                                     *
*         PJDATE  - PACKED JULIAN DATE                                *
*         CALDATE - CALENDAR DATE RETURNED FROM THIS ROUTINE          *
*                                                                     *
***********************************************************************
DATERTN  CSECT
         DROP  ,                   DROP ALL PREVIOUS USINGS
         USING WORKA,R13           SET ADDRESSABILITY TO SAVE AREA
         STM   R14,R12,SAVEDATE    SAVE INPUT REGISTERS
         LR    R12,R15             SET FIRST BASE REGISTER
         USING DATERTN,R12         SET ADDRESABILITY TO CSECT
         SR    R3,R3               ZERO REGISTER
         LA    R6,CALDATE+7        LOAD ADDR OF LOW BYTE OF CAL DATE
         SR    R0,R0               CLEAR REG 0
         SR    R1,R1               CLEAR REG 1
         ICM   R1,7,PJDATE         INSERT JULIAN DATE
         SLDL  R0,16(0)            SHIFT YEAR OF JULIAN DATE TO REG 0
         BAL   R2,DATERTN7         MOVE LOW BYTE YEAR TO CAL DATE
         BAL   R2,DATERTN7         MOVE HIGH BYTE YEAR TO CAL DATE
         BCTR  R6,0                SHIFT LEFT PAST '/'
         SRL   R1,20(0)            SHIFT DAY TO LOW ORDER 12 BITS
         TM    CALDATE+7,X'01'     SEE IF ODD YEAR
         BO    DATERTN3            YES, BRANCH
         TM    CALDATE+6,X'01'     SEE IF 1ST DIGIT YEAR ODD
         BO    DATERTN1            YES, BRANCH
         TM    CALDATE+7,X'02'     SEE IF LOW DIGIT YEAR 2 OR 6
         BO    DATERTN3            YES, BRANCH
         B     DATERTN2            BRANCH
DATERTN1 TM    CALDATE+7,X'02'     SEE IF LOW DIGIT YEAR 2 OR 6
         BNO   DATERTN3            NO, BRANCH
DATERTN2 LA    R3,1                MUST BE LEAP YEAR
DATERTN3 SLL   R1,4(0)             SHIFT DAY 'DDD' TO LEFT
         LA    R1,12(R1)           MOVE SIGN 'C'
         STH   R1,CALDATE+2        SAVE DAY (PACKED)
         ZAP   CALDATE(2),=P'1'    ADD 1 TO PACKED MONTH
         LA    R7,DAYTABLE         LOAD ADDR OF DAY IN MONTH TABLE
         LA    R15,12              SET LOOP COUNT
DATERTN4 MVC   CALDATE+4(2),0(R7)  MOVE DAYS IN MONTH
         CP    CALDATE(2),=P'2'    SEE IF FEBRUARY
         BNE   DATERTN5            NO, BRANCH
         LTR   R3,R3               SEE IF LEAP YEAR
         BZ    DATERTN5            NO, BRANCH
         AP    CALDATE+4(2),=P'1'  ADD 1 TO DAYS FOR LEAP YEAR
DATERTN5 CP    CALDATE+2(2),CALDATE+4(2)  CHECK JULIAN DAYS LEFT
         BNH   DATERTN6            ONLY PARTIAL MONTH LEFT, BRANCH
         SP    CALDATE+2(2),CALDATE+4(2)  SUBTR DAY/MONTH FROM JDAYS
         AP    CALDATE(2),=P'1'    ADD 1 TO MONTH
         LA    R7,2(R7)            INDEX TO NEXT DAYS IN MONTH ENTRY
         BCT   R15,DATERTN4        LOOP
DATERTN6 LH    R0,CALDATE+2        LOAD DAY WITHIN MONTH (PACKED)
         SRL   R0,4(0)             SHIFT OFF SIGN
         BAL   R2,DATERTN7         MOVE LOW DIGIT DAY TO OUTPUT
         BAL   R2,DATERTN7         MOVE HIGH DIGIT DAY TO OUTPUT
         BCTR  R6,0                SHIFT PAST '/'
         LH    R0,CALDATE          LOAD MONTH (PACKED)
         SRL   R0,4(0)             SHIFT OFF SIGN
         BAL   R2,DATERTN7         MOVE LOW DIGIT MONTH TO OUTPUT
         BAL   R2,DATERTN7         MOVE HIGH DIGIT MONTH TO OUTPUT
         MVI   CALDATE+5,C'/'      MOVE '/' TO OUTPUT
         MVI   CALDATE+2,C'/'      MOVE '/' TO OUTPUT
         LM    R14,R12,SAVEDATE    RESTORE REGISTERS
         SR    R15,R15             ZERO RETURN CODE
         BR    R14                 RETURN
DATERTN7 STC   R0,0(R6)            STORE LOW BYTE R0 TO OUTPUT
         SRL   R0,4(0)             SHIFT LOW BYTE R0 OUT
         OI    0(R6),X'F0'         MAKE PRINTABLE
         BCTR  R6,0                MOVE OUTPUT POINTER TO LEFT
         BR    R2                  RETURN
DAYTABLE DS    0H
JAN#     DC    PL2'31'
FEB#     DC    PL2'28'
MAR#     DC    PL2'31'
APR#     DC    PL2'30'
MAY#     DC    PL2'31'
JUN#     DC    PL2'30'
JUL#     DC    PL2'31'
AUG#     DC    PL2'31'
SEP#     DC    PL2'30'
OCT#     DC    PL2'31'
NOV#     DC    PL2'30'
DEC#     DC    PL2'31'
         SPACE 3
         LTORG
         EJECT
***********************************************************************
*                                                                     *
*        START OF SPECIAL VSAM CATALOG ACCESS ROUTINE                 *
*                                                                     *
***********************************************************************
VSAMRTN  CSECT
         DROP  ,                   DROP ALL PREVIOUS USINGS
         SAVE  (14,12)             SAVE REGISTERS
         LR    R11,R15             SET FIRST BASE REGISTER
         LA    R12,4095(R11)       SET SECOND
         LA    R12,1(,R12)             BASE REGISTER
         USING VSAMRTN,R11,R12     SET ADDRESSABILITY TO CSECT
         LR    R8,R1               SAVE PARM ADDRESS
         USING RESULTS,R8          SET ADDRESSABILITY TO RESULTS AREA
         GETMAIN R,LV=LGETM        GET WORK AREA
         LR    R2,R1               SAVE GETMAIN ADDRESS
         LR    R14,R2              SET 'TO' ADDRESS FOR MVCL
         LA    R15,LGETM           SET 'TO' LENGTH
         SLR   R0,R0               SET 'FROM' ADDRESS
         LA    R1,0                SET 'FROM' LENGTH
         ICM   R1,8,=X'00'         SET PAD CHARACTER TO ZEROS
         MVCL  R14,R0              BLANK ENTIRE GETMAIN AREA
         ST    R2,8(R13)           SAVE NEW SAVE ADDRESS IN OLD
         ST    R13,4(R2)           SAVE OLD SAVE ADDRESS IN NEW
         LR    R13,R2              SET NEW SAVE AREA ADDRESS
         USING VSAMWRK,R13         SET ADDRESSABILITY TO WORK AREA
         GETMAIN R,LV=20480        GET SVC26 WORK AREA
         ST    R1,S26WRK           SAVE WORK AREA ADDRESS
         MVC   CATENT,ENTNAME      SET INITIAL ENTRY NAME
         MVC   SAVEENT,ENTNAME     SAVE INITIAL ENTRY NAME
         MVC   CATNAME,BLNKS       SET INITIAL CATALOG NAME TO BLANKS
         XC    CATACBA,CATACBA     ZERO CATALOG ACB ADDRESS
         BAL   R10,CALLSVC         GO ISSUE SVC26
         LA    R1,OPTNLIST         POINT TO ENTYPE OPTION LIST
         ICM   R2,15,16(R1)        LOAD LENGTH OF RESULT AREA
         BZ    CK1                 NOT ZERO, NOT FOUND
         ICM   R2,15,20(R1)        LOAD ADDRESS OF ENTYPE
         BZ    CK1                 NOT ZERO, NOT FOUND
***********************************************************************
*                                                                     *
*        SOME OF THE CATALOG ENTRIES SUCH AS PAGE DATA SETS           *
*        OR CATALOGS REQUIRE USING SVC26 TO READ THE CATALOG          *
*        USING THE CATALOG ACB ADDRESS TO RETURN DETAILED             *
*        CLUSTER INFORMATION.                                         *
*                                                                     *
***********************************************************************
         CLI   0(R2),C'M'          SEE IF MASTER CATALOG ENTRY
         BE    VSAMRTN5            YES, BRANCH
         CLI   0(R2),C'U'          SEE IF USER CATALOG ENTRY
         BE    VSAMRTN5            YES, BRANCH
         CLI   0(R2),C'P'          SEE IF PAGE DATASET ENTRY
         BE    VSAMRTN1            YES, BRANCH
         CLI   0(R2),C'G'          SEE IF ALTERNATE INDEX ENTRY
         BE    VSAMRTN1            YES, BRANCH
         CLI   0(R2),C'C'          SEE IF CLUSTER ENTRY
         BE    VSAMRTN1            YES, BRANCH
         B     CK1                 NO, PROCESS ORIGINAL INFORMATION
***********************************************************************
*        IF WE HAVE VOLUME INFORMATION, EVERYTHING IS OK.             *
***********************************************************************
VSAMRTN1 LA    R1,OPTNLIST+168     POINT TO ENTVOL OPTION LIST
         ICM   R2,15,16(R1)        LOAD LENGTH OF RESULT AREA
         BNZ   CK1                 NOT ZERO, USE WHAT WE HAVE
***********************************************************************
*        SEE IF WE HAVE AN ACB ADDRESS                                *
***********************************************************************
         LA    R1,OPTNLIST+216     POINT TO CATACB OPTION LIST
         ICM   R2,15,16(R1)        LOAD LENGTH OF RESULT AREA
         BZ    CK1                 NONE, NOTHING WE CAN DO
***********************************************************************
*        SEE IF WE HAVE ANY ASSOCIATED ENTRIES                        *
***********************************************************************
         LA    R1,OPTNLIST+192     POINT TO NAMEDS OPTION LIST
         ICM   R2,15,16(R1)        LOAD LENGTH OF RESULT AREA
         BZ    CK1                 ZERO, USE WHAT WE HAVE
***********************************************************************
*                                                                     *
*        IF THE ELEMENT IS ASSOCIATED WITH ONLY 1 ELEMENT AND         *
*        IT IS A DATASET, USE THE ASSOCIATION NAME AND THE            *
*        CATALOG ACB ADDRESS TO "FAKE" THE ASSOCIATION NAME           *
*        BEING THE SAME AS THE ORIGINAL NAME.  THIS WILL              *
*        HAPPEN WITH PAGE DATA SETS ESPECIALLY OR ESDS DATA           *
*        SETS.                                                        *
*                                                                     *
*        IF THE ELEMENT NAME EXACTLY MATCHES ONE OF THE               *
*        ASSOCIATION NAMES, USE THE CATALOG ACB ADDRESS TO            *
*        OBTAIN THE DETAILED INFORMATION.  THIS WILL HAPPEN           *
*        WITH ICF CATALOGS THEMSELVES.                                *
*                                                                     *
*        IF THE ELEMENT IS ASSOCIATED WITH AN ALIAS ENTRY,            *
*        THEN THE ELEMENT IS A CATALOG.  SVC ROUTINE MUST             *
*        BE CALLED USING THE CATALOG NAME, AND THEN CALLED            *
*        AGAIN USING THE ACB ADDRESS FOR THE CATALOG TO               *
*        GET THE DETAILED INFORMATION.                                *
*                                                                     *
***********************************************************************
         LA    R1,OPTNLIST+192     POINT TO NAMEDS OPTION LIST
         ICM   R2,15,16(R1)        LOAD LENGTH OF RESULT AREA
         SRDA  R2,32               SHIFT TO ODD REG OF PAIR
         D     R2,=F'45'           DIVIDE BY LENGTH OF EACH ENTRY
         L     R2,20(R1)           LOAD ADDRESS OF RELATED ENTRIES
         CLI   0(R2),C'X'          IS THIS AN ALIAS ENTRY
         BE    VSAMRTN5            YES, GO HANDLE CATALOG
         CLI   0(R2),C'D'          IS THIS A DATASET ENTRY
         BNE   VSAMRTN2            NO, BRANCH
         CH    R3,=H'1'            SEE IF ONLY ONE ENTRY
         BE    VSAMRTN3            YES, GO HANDLE ESDS
VSAMRTN2 CLC   1(44,R2),CATENT     SEE IF ASSOCIATION TO OURSELVES
         BE    VSAMRTN4            YES, GO HANDLE DUPL ASSOCIATION
         LA    R2,45(R2)           INCREMENT TO NEXT ASSOCIATION
         BCT   R3,VSAMRTN2         LOOP THROUGH ASSOCIATIONS
         B     CK1                 NOTHING WE CAN HANDLE, CONTINUE
VSAMRTN3 MVC   CATENT,1(R2)        MOVE ASSOCIATION NAME TO DSNAME
VSAMRTN4 LA    R1,OPTNLIST+216     POINT TO CATACB OPTION LIST
         ICM   R2,15,20(R1)        LOAD ADDRESS OF ACB
         BZ    CK1                 NONE, NOTHING WE CAN DO
         ST    R2,CATACBA          SAVE ACB ADDRESS
         BAL   R10,CALLSVC         GO ISSUE SVC26
         LTR   R15,R15             TEST RETURN CODE
         BZ    CK1                 GO PROCESS NEW VALUES
         B     VSAMRTN6            TRY TO RECOVER
VSAMRTN5 MVC   CATNAME,CATENT      SET CATALOG NAME TO ENTRY NAME
         BAL   R10,CALLSVC         GO ISSUE SVC26 WITH CATALOG NAME
         LTR   R15,R15             TEST RETURN CODE
         BNZ   VSAMRTN6            NOT ZERO, TRY TO RECOVER
         LA    R1,OPTNLIST+216     POINT TO CATACB OPTION LIST
         ICM   R2,15,20(R1)        LOAD ADDRESS OF ACB
         BZ    VSAMRTN6            NONE, TRY TO RECOVER
         ST    R2,CATACBA          SAVE ACB ADDRESS
         BAL   R10,CALLSVC         GO ISSUE SVC26
         LTR   R15,R15             TEST RETURN CODE
         BZ    CK1                 GO PROCESS NEW VALUES
         B     VSAMRTN4            GO READ WITH ACB ADDRESS
***********************************************************************
*        OUR FANCY PROCESSING FAILED, REDO THE ORIGINAL CALL          *
***********************************************************************
VSAMRTN6 MVC   CATENT,SAVEENT      SET INITIAL ENTRY NAME
         MVC   CATNAME,BLNKS       SET INITIAL CATALOG NAME TO BLANKS
         XC    CATACBA,CATACBA     ZERO CATALOG ACB ADDRESS
         BAL   R10,CALLSVC         GO ISSUE SVC26
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE ENTYPE RETURN AREA                               *
*                                                                     *
***********************************************************************
CK1      LA    R2,OPTNLIST         POINT TO ENTYPE OPTION LIST
         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA
         BZ    CK2                 ZERO, NON-APPLICABLE
         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA
         MVC   ENTYPE,0(R3)        MOVE ENTRY TYPE TO PARM LIST
         SPACE 3
***********************************************************************
*                                                                     *
*        PROCESS THE ENTNAME RETURN AREA                              *
*                                                                     *
***********************************************************************
CK2      LA    R2,OPTNLIST+24      POINT TO ENTNAME OPTION LIST
         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA
         BZ    CK3                 ZERO, NON-APPLICABLE
         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA
         MVC   ENTNAME,0(R3)       MOVE ENTRY NAME TO PARM LIST
         SPACE 3
***********************************************************************
*                                                                     *
*        PROCESS THE DSETCRDT RETURN AREA                             *
*                                                                     *
***********************************************************************
CK3      LA    R2,OPTNLIST+48      POINT TO DSETCRDT OPTION LIST
         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA
         BZ    CK4                 ZERO, NON-APPLICABLE
         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA
         MVC   DSETCRDT,0(R3)      MOVE CREATION DATE TO PARM LIST
         SPACE 3
***********************************************************************
*                                                                     *
*        PROCESS THE GDGATTR RETURN AREA                              *
*                                                                     *
***********************************************************************
CK4      LA    R2,OPTNLIST+72      POINT TO GDGADDR OPTION LIST
         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA
         BZ    CK5                 ZERO, NON-APPLICABLE
         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA
         MVC   GDGATTR,0(R3)       MOVE GDG ATTRIBUTES TO PARM LIST
         SPACE 3
***********************************************************************
*                                                                     *
*        PROCESS THE GDGLIMIT RETURN AREA                             *
*                                                                     *
***********************************************************************
CK5      LA    R2,OPTNLIST+96      POINT TO GDGLIMIT OPTION LIST
         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA
         BZ    CK6                 ZERO, NON-APPLICABLE
         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA
         MVC   GDGLIMIT,0(R3)      MOVE GDG LIMIT TO PARM LIST
         SPACE 3
***********************************************************************
*                                                                     *
*        PROCESS THE LRECL RETURN AREA                                *
*                                                                     *
***********************************************************************
CK6      LA    R2,OPTNLIST+120     POINT TO LRECL OPTION LIST
         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA
         BZ    CK7                 ZERO, NON-APPLICABLE
         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA
         MVC   LRECL,0(R3)         MOVE AVERAGE LRECL TO PARM LIST
         SPACE 3
***********************************************************************
*                                                                     *
*        PROCESS THE AMDSBCAT RETURN AREA                             *
*                                                                     *
***********************************************************************
CK7      LA    R2,OPTNLIST+144     POINT TO AMDSBCAT OPTION LIST
         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA
         BZ    CK8                 ZERO, NON-APPLICABLE
         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA
         USING S26AMDA,R3          SET ADDRESSABILITY TO RESULT AREA
         MVC   MAXLRECL,AMDLRECL   MOVE MAXIMUM LRECL TO PARM LIST
         MVC   CISIZE,AMDCINV      MOVE CI SIZE TO PARM LIST
         MVC   VSAMATTR,AMDATTR    MOVE VSAM ATTRIBUTES TO PARM LIST
         DROP  R3                  DROP ADDRESSABILITY TO RESULT AREA
         SPACE 3
***********************************************************************
*                                                                     *
*        PROCESS THE ENTVOL RETURN AREA                               *
*                                                                     *
***********************************************************************
CK8      LA    R2,OPTNLIST+168     POINT TO ENTVOL OPTION LIST
         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA
         BZ    CKEND               ZERO, NON-APPLICABLE
         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA
         USING S26VOLA,R3          SET ADDRESSABILITY TO RESULT AREA
***********************************************************************
*                                                                     *
*        PROCESS INDIVIDUAL VARIABLE LENGTH VOLUME ENTRIES            *
*        UNTIL THE END OF THE ENTVOL RETURN AREA HAS BEEN             *
*        REACHED                                                      *
*                                                                     *
*        THE ENTVOL RETURN AREA CAN CONTAIN MULTIPLE VOLUME           *
*        ENTRIES.  EACH VOLUME ENTRY CONTAINS A FIXED AREA            *
*        FOLLOWED BY A 20 BYTE EXTENT DESCRIPTOR FOR EACH             *
*        EXTENT.                                                      *
*                                                                     *
***********************************************************************
         AR    R1,R3               CALCULATE END OF RESULTS AREA
         LA    R4,VOLSER           POINT TO FIRST VOLUME FIELD
         USING VOLSER,R4           SET ADDR TO FIRST VOLUME SAVE AREA
***********************************************************************
*                                                                     *
*        PROCESS THE NEXT VOLUME ENTRY                                *
*                                                                     *
***********************************************************************
CK8A     CR    R1,R3               SEE IF END OF RESULTS AREA
         BNH   CKEND               YES, BRANCH
         MVC   VOLSER,CVOLSER      SAVE VOLSER
         MVC   DEVTYP,CDEVTYP      SAVE DEVICE TYPE
         XC    NOEXT,NOEXT         SET NUMBER OF EXTENTS TO ZERO
         XC    NOTRKSA,NOTRKSA     SET NUMBER OF TRKS ALLOCATED TO ZERO
         XC    NOTRKSU,NOTRKSU     SET NUMBER OF TRKS USED TO ZERO
***********************************************************************
*                                                                     *
*        GET NUMBER OF EXTENTS.  THERE MAY BE NONE FOR CANDIDATE      *
*        VOLUMES OR NONVSAM ENTRIES                                   *
*                                                                     *
***********************************************************************
         TM    CVOLFLG,CCAND       SEE IF CANDIDATE ONLY
         BO    CK8D                YES, BRANCH
         CLI   CNOEXT,X'FF'        CHECK NUMBER OF EXTENTS
         BE    CK8D                X'FF', PROBABLY NONVSAM
         SLR   R9,R9               ZERO REGISTER FOR ICM
         ICM   R9,1,CNOEXT         LOAD NUMBER OF EXTENTS
         BZ    CK8D                NO EXTENTS, GET OUT
         STH   R9,NOEXT            SAVE NUMBER OF EXTENTS
***********************************************************************
*                                                                     *
*        LOOP THROUGH THE EXTENT DESCRIPTORS WHILE ACCUMULATING       *
*        THE TOTAL NUMBER OF TRACKS ALLOCATED IN ALL DESCRIPTORS.     *
*                                                                     *
***********************************************************************
         LA    R5,CEXTLEN+2        LOAD START ADDR OF 1ST EXT DESCR
         USING S26EXTA,R5          SET ADDRESSABILITY TO EXT DESCR
         SLR   R14,R14             ZERO TRACK ACCUMULATOR
CK8B     AH    R14,CEXTRKS         ADD NBR OF TRKS IN EXT TO ACCUM
         LA    R5,20(R5)           INCREMENT TO NEXT EXT DESCR
         BCT   R9,CK8B             LOOP ON NUMBER OF EXTENTS
***********************************************************************
*                                                                     *
*        CALCULATE THE NUMBER OF TRACKS USED BY USING THE             *
*        FOLLOWING EQUASION:                                          *
*                                                                     *
*        TRKSU = TRKSA * HI-USED-RBA / HI-ALLOC-RBA                   *
*                                                                     *
***********************************************************************
         STH   R14,NOTRKSA         SAVE NUMBER OF TRKS ALLOCATED
         OC    CHARBA,CHARBA       TEST HIGH ALLOCATED RBA
         BZ    CK8D                ZERO, 0 PERCENT USED
         SRDA  R14,32              SHIFT TO SECOND REGISTER OF PAIR
         M     R14,CHURBA          MULTIPLY TRKS BY HIGH USED RBA
         D     R14,CHARBA          DIVIDE BY HIGH ALLOC RBA
         LTR   R14,R14             TEST REMAINDER
         BZ    CK8C                ZERO, NO PARTIAL TRACK
         LA    R15,1(R15)          ADD 1 TO QUOTIENT
CK8C     STH   R15,NOTRKSU         SAVE NUMBER OF TRACKS USED
***********************************************************************
*                                                                     *
*        INCREMENT TO THE NEXT VOLUME ENTRY                           *
*                                                                     *
*        IF THE CURRENT VOLUME ENTRY IS FOR A SEQUENCE SET,           *
*        DO NOT INCREMENT THE VOLUME COUNT OR INCREMENT TO            *
*        THE NEXT VOLUME SAVE AREA.  THIS WILL ALLOW THE              *
*        NEXT ENTRY TO OVERLAY THE ONE JUST USED FOR THE              *
*        SEQUENCE SET ENTRY.                                          *
*                                                                     *
***********************************************************************
CK8D     CLI   CEXTFLG,X'FF'       CHECK MISC BIT SWITCHES
         BE    CK8E                X'FF', PROBABLY NONVSAM
         TM    CEXTFLG,CSEQSET     IS THIS A SEQUENCE SET?
         BZ    CK8E                NO, BRANCH
         LH    R15,NOEXT           RELOAD NUMBER OF EXTENTS
         B     CK8F                SKIP INCREMENT TO NEXT VOLUME AREA
CK8E     LH    R15,NBRVOLS         LOAD NUMBER OF VOLUMES
         LA    R15,1(R15)          ADD 1 TO NUMBER OF VOLUMES
         STH   R15,NBRVOLS         SAVE NEW NUMBER OF VOLUMES
         LH    R15,NOEXT           RELOAD NUMBER OF EXTENTS
         LA    R4,16(R4)           INCREMENT TO NEXT VOLUME SAVE AREA
CK8F     LA    R3,CEXTLEN+2        LOAD ADDR END OF VOL FIXED AREA
         LTR   R15,R15             TEST NUMBER OF EXTENTS
         BZ    CK8A                ZERO, END OF VOLUME ENTRY
CK8G     LA    R3,20(R3)           INCREMENT PAST EXTENT DESCRIPTOR
         BCT   R15,CK8G            LOOP THROUGH EXTENT DESCRIPTORS
         B     CK8A                END OF VOLUME ENTRY
         DROP  R3                  DROP ADDRESSABILITY TO RESULT AREA
         SPACE 3
CKEND    L     R1,S26WRK           LOAD WORK AREA ADDRESS
         FREEMAIN R,LV=20480,A=(1) FREE SVC26 WORK AREA
         LR    R1,R13              SAVE GETMAIN ADDRESS
         L     R13,4(R1)           RESTORE OLD SAVE ADDRESS
         FREEMAIN R,LV=LGETM,A=(1)  FREE WORK AREA
         RETURN (14,12),RC=0       RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        CALL SVC 26 TO RETURN DATASET/GDG BASE INFORMATION           *
*                                                                     *
*        RETURN WILL BE MAKE TO REGISTER 10 ON ENTRY                  *
*                                                                     *
***********************************************************************
CALLSVC  MVC   S26DS,CATENT        SAVE DSN
         MVC   S26CDSN,CATNAME     SET CATALOG DSNAME
         MVI   ENTYPE,C' '         SET ENTRY TYPE TO BLANK
         MVC   ENTNAME,BLNKS       SET ENTRY NAME TO BLANKS
         ZAP   DSETCRDT,=P'0'      SET CREATION DATE TO ZERO
         MVI   GDGATTR,X'00'       SET GDG ATTRIBUTES TO ZERO
         MVI   GDGLIMIT,X'00'      SET GDG LIMIT TO ZERO
         XC    LRECL,LRECL         ZERO THE AVERAGE LRECL
         XC    MAXLRECL,MAXLRECL   ZERO THE MAXIMUM LRECL
         XC    CISIZE,CISIZE       ZERO THE CI SIZE
         MVI   VSAMATTR,X'00'      ZERO THE VSAM ATTRIBUTES
         XC    NBRVOLS,NBRVOLS     ZERO THE NUMBER OF VOLUMES
         SPACE 3
***********************************************************************
*                                                                     *
*        SET UP STANDARD PARAMETER LIST WITHOUT A CATALOG ACB         *
*        ADDRESS.                                                     *
*                                                                     *
***********************************************************************
STS26    XC    CTGPL2,CTGPL2       ZERO PARM LIST
         MVI   CTGPL2,B'00000110'  SET CTGOPTN1
         MVI   CTGPL2+1,B'01000001' SET CTGOPTN2
         MVI   CTGPL2+2,B'10000001' SET CTGOPTN3
         LA    R1,S26DS            LOAD ADDRESS OF DSNAME
         ST    R1,CTGPL2+4         SET CTGENT
         LA    R1,S26CDSN          LOAD ADDRESS OF CATALOG DSN
         ST    R1,CTGPL2+8         SAVE CTGCAT
         LH    R1,=H'20480'        LOAD LENGTH OF WORK AREA
         L     R15,S26WRK          LOAD ADDRESS OF SVC26 WORK AREA
         STH   R1,0(R15)           SAVE LENGTH AT START OF WORK AREA
         ST    R15,CTGPL2+12       SET CTGWKA
         MVI   CTGPL2+16,B'00100001' SET CTGOPTNS
         LA    R15,10              LOAD NUMBER OF OPTIONS
         STC   R15,CTGPL2+19       SET CTGNOFLD
         LA    R14,OPTNLIST        LOAD ADDRESS OF OPTION LIST
         LA    R1,CTGPL2+28        SAVE IN CTGFIELD
         LA    R2,OPT1             LOAD ADDRESS OF OPTION NAME LIST
OPTLOOP  XC    0(24,R14),0(R14)    ZERO THE ENTRY
         MVI   0(R14),X'01'        SET FIRST FIELD
         ST    R2,8(R14)           SET ADDRESS OF OPTION NAME
         ST    R14,0(R1)           SAVE OPTNLIST ADDRESS IN CTGPL
         LA    R1,4(R1)            POINT TO NEXT OPTNLIST ADDRESS
         LA    R14,24(R14)         POINT TO NEXT ENTRY IN OPTION LIST
         LA    R2,8(R2)            POINT TO NEXT OPTION NAME
         BCT   R15,OPTLOOP         LOOP
         SPACE 3
***********************************************************************
*                                                                     *
*        IF A CATALOG ACB ADDRESS HAS BEEN SPECIFIED IN THE           *
*        FIELD CATACBA, MODIFY THE PARAMETER LIST TO UTILIZE          *
*        THIS ADDRESS INSTEAD OF THE DEFAULT CATALOG SEARCH           *
*        SEQUENCE.                                                    *
*                                                                     *
*        IF A CATALOG DSNAME HAS BEEN SPECIFIED IN THE FIELD          *
*        CATNAME, MODIFY THE PARAMETER LIST TO SEARCH ONLY            *
*        THIS CATALOG INSTEAD OF ALL CATALOGS.                        *
*                                                                     *
***********************************************************************
         SPACE 3
         OC    CATACBA,CATACBA     TEST ACB ADDRESS
         BZ    NOACB               NONE, GO CHECK CATALOG DSN
         MVI   CTGPL2,B'00000100'  SET CTGOPTN1
         MVI   CTGPL2+1,B'00000001' SET CTGOPTN2
         L     R1,CATACBA          LOAD ADDRESS OF CATALOG ACB
         ST    R1,CTGPL2+8         SAVE CTGCAT
         MVI   CTGPL2+18,C'D'      SET FOR DATASET COMPONENT
         MVI   CTGPL2+19,X'09'     SET CTGNOFLD
         B     DOS26               GO DO SVC26 CALL
NOACB    CLI   CATNAME,C' '        SEE IF CATALOG DSNAME SPECIFIED
         BE    DOS26               NO, BRANCH
         MVI   CTGPL2+1,B'00000001' SET CTGOPTN2
DOS26    LA    R1,CTGPL2           LOAD ADDRESS OF WORK AREA
         SVC   26                  CALL CATALOG SEARCH FOR GDG BASE
         BR    R10                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        CONSTANTS USED BY THIS ROUTINE                               *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*        CATALOG LOCATE OPTIONS LIST                                  *
***********************************************************************
OPT1     DC    CL8'ENTYPE  '
OPT2     DC    CL8'ENTNAME '
OPT3     DC    CL8'DSETCRDT'
OPT4     DC    CL8'GDGATTR '
OPT5     DC    CL8'GDGLIMIT'
OPT6     DC    CL8'LRECL   '
OPT7     DC    CL8'AMDSBCAT'
OPT8     DC    CL8'ENTVOL  '
OPT9     DC    CL8'NAMEDS  '
OPT10    DC    CL8'CATACB  '
         SPACE 3
BLNKS    DC    CL120' '            CHARACTER STRING OF BLANKS
         EJECT
         LTORG
***********************************************************************
*                                                                     *
*        PARSE CONTROL BLOCKS                                         *
*                                                                     *
***********************************************************************
DSATPCL  IKJPARM DSECT=DSATPDL
PARSDSN  IKJPOSIT DSNAME
OPT      IKJKEYWD DEFAULT='LONG'
         IKJNAME 'LONG'
         IKJNAME 'SHORT'
DAOPT    IKJKEYWD DEFAULT='ALL'
         IKJNAME 'ALL'
         IKJNAME 'DAONLY'
         IKJENDP
         EJECT
         IKJUPT
         EJECT
         IKJPSCB
         EJECT
UCB      DSECT
         IEFUCBOB LIST=YES
         EJECT
         CVT   LIST=YES,DSECT=YES
         EJECT
***********************************************************************
*                                                                     *
*        DYNAMIC WORK AREA FOR SPECIAL VSAM CATALOG ACCESS RTN        *
*                                                                     *
***********************************************************************
VSAMWRK  DSECT
         DS    18F                 PROGRAM SAVE AREA
OPTNLIST DS    10CL24              SVC26 OPTION LIST
CTGPL2   DS    XL68                CATALOG MANAGEMENT PARAMETER LIST
*
         DS    0F                  ALIGNMENT
S26CDSN  DS    CL44                CATALOG DSNAME
S26DS    DS    CL44                ACTUAL DSNAME INDEX
S26WRK   DS    F                   ADDRESS OF SVC26 WORK AREA
SAVEENT  DS    CL44                ORIGINAL CATALOG ENTRY NAME
CATENT   DS    CL44                CATALOG ENTRY NAME
CATNAME  DS    CL44                CATALOG NAME
CATACBA  DS    F                   ADDRESS OF CATALOG ACB
*
LGETM    EQU   *-VSAMWRK           LENGTH OF WORK AREA
         EJECT
***********************************************************************
*                                                                     *
*        SVC26 ENTVOL FIXED AREA                                      *
*                                                                     *
***********************************************************************
S26VOLA  DSECT
CVOLSEQ  DS    H                   VOLUME SEQUENCE NUMBER
CDEVTYP  DS    CL4                 DEVICE TYPE
CVOLSER  DS    CL6                 VOLSER
CFILESEQ DS    H                   FILE SEQUENCE NUMBER (TAPE)
CVOLFLG  DS    X                   VOLUME FLAGS
CPRIME   EQU   X'80'               PRIME AREA
CCAND    EQU   X'40'               CANDIDATE
COVFL    EQU   X'20'               OVERFLOW AREA
CNOEXT   DS    X                   NUMBER OF EXTENTS ON THIS VOLUME
CHKRBA   DS    F                   HIGH KEY RBA
CHURBA   DS    F                   HIGH USED RBA
CHARBA   DS    F                   HIGH ALLOCATED RBA
CCISIZE  DS    F                   CI SIZE
CBLKTR   DS    H                   BLOCKS PER TRACK
CTRKAL   DS    H                   NUMBER OF TRKS PER ALLOC UNIT
CEXTFLG  DS    X                   EXTENT FLAGS
CSEQSET  EQU   X'80'               SEQUENCE SET IS WITH DATA (INDEX)
CNOTPREF EQU   X'40'               EXTENTS ARE NOT PREFORMATTED
         DS    CL2                 UNKNOWN (CONTAINS X'FFFF'
         DS    CL4                 UNKNOWN (CONTAINS X'00000000'
CEXTLEN  DS    XL2                 LENGTH OF EXTENT DESCRIPTIONS
         EJECT
***********************************************************************
*                                                                     *
*        SVC26 ENTVOL VARIABLE EXTENT DESCRIPTION AREA                *
*                                                                     *
***********************************************************************
S26EXTA  DSECT
CEXTNBR  DS    H                   EXTENT NUMBER
CLOWCCHH DS    XL4                 EXTENT LOW CCHH
CHICCHH  DS    XL4                 EXTENT HIGH CCHH
CEXTRKS  DS    H                   EXTENT NUMBER OF TRACKS
CLOWRBA  DS    F                   EXTENT LOW RBA
CHIRBA   DS    F                   EXTENT HIGH RBA
         EJECT
***********************************************************************
*                                                                     *
*        SVC26 AMDSBCAT AREA (AMDSB)                                  *
*                                                                     *
***********************************************************************
S26AMDA  DSECT
AMDSBID  DS    X                   AMDSB INDENTIFIER X'60'
AMDATTR  DS    X                   ATTRIBUTES
AMDDST   EQU   X'80'               KSDS (OFF FOR ESDS)
AMDWCK   EQU   X'40'               WRITE VALIDITY CHECK
AMDSDT   EQU   X'20'               IMBED
AMDREPL  EQU   X'10'               REPLICATE
AMDORDER EQU   X'08'               ORDERED
AMDRANGE EQU   X'04'               DIVIDED INTO KEY RANGES
AMDRRDS  EQU   X'02'               RELATIVE RECORDS
AMDSPAN  EQU   X'01'               SPANNED RECORDS
AMDLEN   DS    H                   LENGTH OF AMDSB
AMDNEST  DS    0H                  NBR OF INDEX ENTRIES - OR -
AMDAKRKP DS    H                   RKP OF ALTERNATE KEY
AMDRKP   DS    H                   RELATIVE KEY POSITION
AMDKEYLN DS    H                   KEY LENGTH
AMDPCTCA DS    X                   PERCENT FREESPACE FOR CA
AMDPCTCI DS    X                   PERCENT FREESPACE FOR CI
AMDCIPCA DS    H                   NBR CI'S IN A CA
AMDFSCA  DS    H                   NBR FREE CI'S IN A CA
AMDFSCI  DS    F                   NBR FREE BYTES IN A CA
AMDCINV  DS    F                   CI SIZE
AMDLRECL DS    F                   MAX RECORD SIZE
AMDHLRBA DS    0F                  RBA OF HI-LEVEL INDEX RCD (KSDS)
AMDNSLOT DS    F                   NBR OF RCD SLOTS PER CI (RRDS)
AMDSSRBA DS    0F                  RBA OF FIRST SEQ-SET RECD (KSDS)
AMDMAXRR DS    F                   MAX VALID REL RCD NBR (RRDS)
AMDPARDB DS    F                   ADDR OF FIRST ARDB
AMDATTR3 DS    X                   ATTRIBUTES
AMDUNQ   EQU   X'80'               NON-UNIQUE KEYS (OFF FOR UNIQUE)
AMDFAULT EQU   X'40'               STAGED BY CYLINDER FAULT
AMDBIND  EQU   X'20'               STAGED AND BOUND
AMDWAIT  EQU   X'10'               WAIT FOR DESTAGING
AMDLM    EQU   X'08'               LOADED
AMDSTRNO DS    X                   NUMBER OF CONCURRENT REQUESTS
AMDDUI   DS    XL4                 IMS DBRC USAGE INDICATORS
AMDBFNO  DS    H                   NUMBER OF DATA OR INDEX BUFFERS
AMDSTAT  DS    0CL48               STATISTICS
AMDSTSP  DS    CL8                 TIME STAMP
AMDNIL   DS    H                   NUMBER OF INDEX LEVELS
AMDNEXT  DS    H                   NUMBER OF EXTENTS IN DATA SET
AMDNLR   DS    F                   NUMBER OF RECORDS
AMDDELR  DS    F                   NUMBER OF DELETED RECORDS
AMDIREC  DS    F                   NUMBER OF INSERTED RECORDS
AMDUPR   DS    F                   NUMBER OF UPDATED RECORDS
AMDRETR  DS    F                   NUMBER OF RETRIEVED RECORDS
AMDASPA  DS    F                   BYTES OF FREE SPACE
AMDNCIS  DS    F                   NUMBER OF CI SPLITS
AMDNCAS  DS    F                   NUMBER OF DA SPLITS
AMDEXCP  DS    F                   NUMBER OF VSAM EXCPS
         EJECT
***********************************************************************
*                                                                     *
*        RESULTS OF SPECIAL VSAM CATALOG ACCESS ROUTINE               *
*                                                                     *
***********************************************************************
RESULTS  DSECT
ENTYPE   DS    C                   TYPE OF CATALOG ENTRY
ENTNAME  DS    CL44                NAME OF CATALOG ENTRY
DSETCRDT DS    PL3                 CREATION DATE
GDGATTR  DS    X                   GDG ATTRIBUTES
GDGEMP   EQU   X'80'               EMPTY OPTION
GDGSCR   EQU   X'40'               SCRATCH OPTION
GDGLIMIT DS    X                   GDG LIMIT
NBRVOLS  DS    H                   NUMBER OF VOLUME ENTRIES
LRECL    DS    F                   AVG LRECL OF DATA SET
MAXLRECL DS    F                   MAX LRECL OF DATA SET
CISIZE   DS    F                   CISIZE OF DATA SET
VSAMATTR DS    X                   VSAM ATTRIBUTES
IMBED    EQU   X'20'               DATA SET CONTAINS IMBEDDED KEYS
REPLIC   EQU   X'10'               DATA SET CONTAINS REPLICATED KEYS
SPANNED  EQU   X'01'               DATA SET CONTAINS SPANNED RECORDS
         DS    X                   RESERVED
***********************************************************************
*        THE FOLLOWING FIELDS ARE REPEATED AS REQUIRED                *
***********************************************************************
VOLSER   DS    CL6                 VOLSER
DEVTYP   DS    XL4                 DEVICE TYPE
NOEXT    DS    H                   NUMBER OF EXTENTS ON VOL
NOTRKSA  DS    H                   NUMBER OF TRKS ALLOC ON VOL
NOTRKSU  DS    H                   NUMBER OF TRKS USED ON VOL
         END
