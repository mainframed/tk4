         TITLE 'JES2 ESOTERIC RESOURCE ROUTING EXITS'
***********************************************************************
*                                                                     *
*        ENVIRONMENT   MVS SP 2.2.0                                   *
*                                                                     *
*        THIS MODULE CONTAINS SEVERAL EXIT POINTS WHICH WILL          *
*        IMPLEMENT ESOTERIC ROUTINE CAPABILITIES WITHIN JES2.         *
*        THE EXITS ARE AS FOLLOWS:                                    *
*                                                                     *
*        E004RESC - PROCESS THE ESOTERIC RESOURCE NAMES ON THE        *
*                   /*ROUTE STATEMENT.                                *
*                                                                     *
*        E005RESC - EXIT 5 ROUTINES AS FOLLOWS:                       *
*                                                                     *
*            $DC  - DISPLAY THE ESOTERIC RESOURCE CONFLICTS           *
*                   THAT EXIST OR IN OTHER WORDS, LIST THOSE          *
*                   JOBS THAT CANNOT RUN BECAUSE NONE OF THE          *
*                   PROCESSORS CONTAIN ALL THE ESOTERIC               *
*                   NECESSARY TO RUN THAT JOB.                        *
*                                                                     *
*            $DR  - LIST THE ESOTERIC RESOURCES ATTACHED TO A         *
*                   PROCESSOR.                                        *
*                                                                     *
*            $QA  - ADD ESOTERIC RESOURCES TO A PROCESSOR             *
*                                                                     *
*            $QD  - DELETE ESOTERIC RESOURCES FROM A PROCESSOR        *
*                                                                     *
*        E014RESC - TEST FOR RESOURCE ROUTINGS WITHIN THE JOB         *
*                   QUEUE WORK SELECT ROUTINE.                        *
*                                                                     *
*        WRITTEN BY:                                                  *
*                        JOHN V. HOOPER                               *
*                        FIRST UNION NATIONAL BANK                    *
*                        301 SOUTH TRYON STREET                       *
*                        CHARLOTTE, N.C.  28288                       *
*                        (704) 374-2427                               *
*                                                                     *
*        CREDITS:                                                     *
*                   THIS FACILITY IS A DIRECT COPY IN FUNCTION        *
*                   OF THE MELLON BANK SHARED SPOOL MODS THAT         *
*                   ARE AVAILABLE ON MANY OF THE MODS TAPES.          *
*                   THE FACILITY WAS REWRITTEN TO EXCLUDE SOME        *
*                   PORTIONS OF THE ORIGINAL MODS AND TO FIT          *
*                   OUR EXISTING EXIT STRUCTURE.                      *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *
*                                                                     *
*        1)  THE HASP999 MESSAGE WILL BE ISSUED WHEN AN INVALID       *
*            L=CCA OPERAND IS ENTERED.                                *
*                                                                     *
*        $HASP999 RESPONSE LOCATION L=CCA UNAVAILABLE                 *
*                                                                     *
*                                                                     *
*        2)  THE HASP900 MESSAGE WILL BE ISSUED FOR ALL MESSAGES      *
*            FROM THE $DR COMMAND.                                    *
*                                                                     *
*        $HASP900 SID  = NO RESOURCES FOUND                           *
*                     OR                                              *
*        $HASP900 SID  = RESOURCE1 RESOURCE2 RESOURCE3                *
*                                                                     *
*                                                                     *
*        3)  THE HASP900 MESSAGE WILL BE ISSUED FOR ALL MESSAGES      *
*            FROM THE $DC COMMAND.                                    *
*                                                                     *
*        $HASP900 - NO CONFLICTS EXIST                                *
*                     OR                                              *
*        $HASP900 - END OF CONFLICTS                                  *
*                                                                     *
*        THE END OF CONFLICTS MESSAGE WILL FOLLOW A LIST OF           *
*        $HASP908 MESSAGES LISTING EACH JOB WHICH HAS RESOURCES       *
*        WHICH ARE NOT ATTACHED TO ANY PROCESSOR.                     *
*                                                                     *
*                                                                     *
*        5)  THE HASP970 MESSAGE WILL BE ISSUED WHEN WHEN ANY         *
*            RESOURCE CONTROLLING COMMAND RECEIVES A NULL             *
*            OPERAND OR AN OPERAND LONGER THAN 8 CHARACTERS.          *
*                                                                     *
*                                                                     *
*        $HASP970 ......... INVALID OPERAND                           *
*                                                                     *
*        6)  THE HASP971 MESSAGE WILL BE ISSUED WHEN MORE THAN        *
*            TWO OPERANDS ARE RECEIVED BY ANY RESOURCE                *
*            CONTROLLING COMMAND.                                     *
*                                                                     *
*        $HASP971 TOO MANY OPERANDS                                   *
*                                                                     *
*                                                                     *
*        7)  THE HASP972 MESSAGE WILL BE ISSUED WHEN THE $DC          *
*            COMMAND DETECTS ANY OPERAND.  IT MUST BE ENTERED         *
*            WITHOUT OPERANDS.                                        *
*                                                                     *
*        $HASP972 NO OPERANDS ALLOWED ON THE $DC COMMAND              *
*                                                                     *
*                                                                     *
*        8)  THE HASP973 MESSAGE WILL BE ISSUED WHEN THE $QA          *
*            OR $QD COMMAND DETECTS AN INVALID RESOURCE NAME          *
*            TO BE ADDED OR DELETED.                                  *
*                                                                     *
*        $HASP973 ........ INVALID RESOURCE NAME                      *
*                                                                     *
*                                                                     *
*        9)  THE HASP974 MESSAGE WILL BE ISSUED WHEN THE $QA          *
*            $QD, OR $DR COMMANDS DETECTS AN INVALID SYSTEM           *
*            NAME.                                                    *
*                                                                     *
*        $HASP974 ........ INVALID SYSTEM ID                          *
*                                                                     *
*                                                                     *
*        10) THE HASP976 MESSAGE WILL BE ISSUED WHEN THE $QA          *
*            OR $QD COMMAND DETECTS THAT THE RESOURCE NAME WAS        *
*            NOT ENTERED.                                             *
*                                                                     *
*        $HASP976 RESOURCE NAME MUST BE SPECIFIED                     *
*                                                                     *
*                                                                     *
*        11) THE HASP977 MESSAGE WILL BE ISSUED WHEN ANY OF           *
*            THE RESOURCE CONTROLLING COMMANDS ARE ISSUED FROM        *
*            A REMOTE CONSOLE.                                        *
*                                                                     *
*        $HASP977 COMMAND NOT AUTHORIZED FROM THIS CONSOLE            *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*              M A C R O S   U S E D   I N   J E S R E S R C          *
*                                                                     *
*        01)  $AMODE       SYS1.HASPSRC                               *
*        02)  $BUFFER      SYS1.HASPSRC                               *
*        03)  $CAT         SYS1.HASPSRC                               *
*        04)  $CMB         SYS1.HASPSRC                               *
*        05)  $COMWORK     SYS1.HASPSRC                               *
*        06)  $CWA         SYS1.HASPSRC                               *
*        07)  $CWTO        SYS1.HASPSRC                               *
*        08)  $ENTRY       SYS1.HASPSRC                               *
*        09)  $EXITPL      SYS1.HASPSRC                               *
*        10)  $GETBUF      SYS1.HASPSRC                               *
*        11)  $FREEBUF     SYS1.HASPSRC                               *
*        12)  $HASPEQU     SYS1.HASPSRC                               *
*        13)  $HASPGBL     SYS1.HASPSRC                               *
*        14)  $HCT         SYS1.HASPSRC                               *
*        15)  $JCT         SYS1.HASPSRC                               *
*        16)  $JOE         SYS1.HASPSRC                               *
*        17)  $JQE         SYS1.HASPSRC                               *
*        18)  $MIT         SYS1.HASPSRC                               *
*        19)  $MODEND      SYS1.HASPSRC                               *
*        20)  $MODULE      SYS1.HASPSRC                               *
*        21)  $PADDR       SYS1.HASPSRC                               *
*        22)  $PCE         SYS1.HASPSRC                               *
*        23)  $POST        SYS1.HASPSRC                               *
*        24)  $QGET        SYS1.HASPSRC                               *
*        25)  $QSE         SYS1.HASPSRC                               *
*        26)  $QSUSE       SYS1.HASPSRC                               *
*        27)  $RDRWORK     SYS1.HASPSRC                               *
*        28)  $RETURN      SYS1.HASPSRC                               *
*        29)  $SAVE        SYS1.HASPSRC                               *
*        30)  $STORE       SYS1.HASPSRC                               *
*        31)  $XIT         SYS1.HASPSRC                               *
*        32)  IAZRESPA     SYS1.AMODGEN                               *
*        33)  IEFUCBOB     SYS1.AMODGEN                               *
*        34)  IEZCVT       SYS1.AMODGEN                               *
*        35)  IFGRPL       SYS1.MACLIB                                *
*        36)  MODESET      SYS1.AMODGEN                               *
*                                                                     *
*                                                                     *
*              L I N K A G E    E D I T O R    I N F O                *
*                                                                     *
*        SIZE:       2K                                               *
*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
         COPY  $HASPGBL
JESRESRC $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X
               ENVIRON=JES2,                                           X
               TITLE='JES2 ESOTERIC RESOURCE ROUTING EXITS',           X
               $CAT,               GENERATE HASP CAT DSECT             X
               $CMB,               GENERATE HASP CMB DSECT             X
               $COMWORK,           GENERATE HASP COMWORK DSECT         X
               $CWA,               GENERATE HASP CWA DSECT             X
               $BUFFER,            GENERATE HASP BUFFER DSECT          X
               $EXITPL,            GENERATE HASP $EXIT PARM LIST       X
               $HASPEQU,           GENERATE HASP EQUATES               X
               $HCT,               GENERATE HASP HCT DSECT             X
               $JCT,               GENERATE HASP JCT DSECT             X
               $JOE,               GENERATE HASP JOE DSECT             X
               $JQE,               GENERATE HASP JQE DSECT             X
               $MIT,               GENERATE HASP MIT DSECT             X
               $PADDR,             GENERATE HASP PADDR DSECT           X
               $PCE,               GENERATE HASP PCE DSECT             X
               $QGET,              GENERATE HASP QGET DSECT            X
               $QSE,               GENERATE HASP QSE DSECT             X
               $RDRWORK,           GENERATE HASP RDRWORK DSECT         X
               $XIT,               GENERATE HASP XIT DSECT             X
               CVT,                GENERATE MVS  CVT DSECT             X
               RESPA,              GENERATE MVS  RESPA DSECT           X
               RPL,                GENERATE MVS  IFGRPL DSECT          X
               UCB                 GENERATE MVS  UCB DSECT
               SPACE 3
         EJECT
***********************************************************************
*                                                                     *
*        PROGRAM WORK AREAS                                           *
*                                                                     *
***********************************************************************
         SPACE 3
RESWORK1 DSECT                     EXIT WORK AREA
E004NAME DS    CL8                 POSSIBLE RESOURCE NAME
E004BITS DS    F                   RESOURCE BITS WORK AREA
*
         SPACE 3
RESWORK2 DSECT                     COMMAND WORK AREA
         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****
         $FCSFMTP                  MAP THE EXIT 255 PARM LIST
BUFADDR  DS    F                   ADDRESS OF A WORK BUFFER
WRKA     DS    CL10                EXIT WORK AREA
E005INDX DS    H                   JOB QUEUE OFFSET INDEX
E005SW1  DS    X                   MISCELLANEOUS BIT SWITCHES
CMD$DC   EQU   X'80'               $DC COMMAND
CMD$DR   EQU   X'40'               $DR COMMAND
CMD$QA   EQU   X'20'               $QA COMMAND
CMD$QD   EQU   X'10'               $QD COMMAND
FOUND    EQU   X'08'               RESOURCE CONFLICT FOUND
E005OP1  DS    CL8                 FIRST COMMAND OPERAND
E005OP2  DS    CL8                 SECOND COMMAND OPERAND
MESSAGE  DS    CL100               MESSAGE WORK AREA
*
JESRESRC CSECT ,                   RESTORE THE CSECT ENVIRONMENT
         TITLE 'JES2 ESOTERIC RESOURCE ROUTING EXITS - EXIT 4'
***********************************************************************
*                                                                     *
*        RESOURCE ROUTINE EXIT 4                                      *
*                                                                     *
***********************************************************************
E004RESC $ENTRY BASE=R12
         SPACE 1
         $SAVE                     SAVE CALLER'S REGISTERS
         LR    R12,R15             LOAD BASE REGISTER
         EJECT
***********************************************************************
*                                                                     *
*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *
*                                                                     *
*        R0       - STATEMENT TYPE INDICATOR                          *
*                   0 - JES2 CONTROL STATEMENT                        *
*                   4 - JCL CONTROL STATEMENT                         *
*        R1       - ADDRESS OF A 3 WORD PARAMETER LIST                *
*                   WORD 1 - ADDRESS OF THE CONTROL STATEMENT         *
*                   WORD 2 - ADDRESS OF THE EXIT FLAG                 *
*                   WORD 3 - ADDRESS OF 80 BYTE JCTXWORK FIELD        *
*        R10      - ADDRESS OF THE JCT                                *
*        R11      - ADDRESS OF THE HCT                                *
*        R13      - ADDRESS OF THE PCE                                *
*        R14      - RETURN ADDRESS                                    *
*        R15      - ENTRY ADDRESS                                     *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        SEE IF THIS IS A JECL STATEMENT                              *
*                                                                     *
***********************************************************************
         LTR   R0,R0               SEE IF JES2 CONTROL STATEMENT
         BNZ   E004RC00            NO, PASS THIS STATEMENT ALONG
         EJECT
***********************************************************************
*                                                                     *
*        SEE IF THIS IS ONE THAT WE WANT                              *
*                                                                     *
***********************************************************************
         L     R2,0(R1)            GET ADDRESS OF JECL STATEMENT
         L     R4,8(R1)            GET ADDRESS OF WORK AREA
         LTR   R4,R4               SEE IF JCT EXISTS YET
         BZ    E004RC00            NO, PASS THIS STATEMENT ALONG
         USING RESWORK1,R4         SET ADDRESSABILITY TO WORK AREA
         XC    RESWORK1(80),RESWORK1 CLEAR THE WORK AREA
         CLC   2(6,R2),=C'ROUTE '  SEE IF /*ROUTE CARD
         BE    E004PR              YES, GO CHECK SOME MORE
         CLC   2(4,R2),=C'XEQ '    SEE IF /*XEQ CARD
         BE    E004PR              YES, GO CHECK SOME MORE
         B     E004RC00            NO, PASS THIS STATEMENT ALONG
         EJECT
***********************************************************************
*                                                                     *
*        SEARCH FOR FIRST OPERAND PAST XEQ                            *
*        IF NONE, JUST PASS THE STATEMENT ALONG TO JES2               *
*                                                                     *
***********************************************************************
E004PR   LA    R7,2(R2)            POINT TO CONTROL CARD
         LA    R5,70(R2)           POINT TO END OF CONTROL CARD
E004PR1  CLC   0(4,R7),=C'XEQ '    SEE IF OUR KEYWORD
         BE    E004PR2             YES, BRANCH
         LA    R7,1(R7)            INCREMENT TO NEXT CHAR OF CARD
         CR    R7,R5               SEE IF DONE
         BL    E004PR1             NO, LOOP
         B     E004RC00            NOT FOUND, PASS THIS ONE ALONG
E004PR2  LA    R7,4(R7)            POINT PAST 'XEQ '
E004PR3  CLI   0(R7),C' '          SEE IF START OF NEXT OPERAND
         BNE   E004PR4             YES, BRANCH
         LA    R7,1(R7)            INCREMENT TO NEXT CHAR OF CARD
         CR    R7,R5               SEE IF DONE
         BL    E004PR3             NO, LOOP
         B     E004RC00            NOT FOUND, PASS THIS ONE ALONG
E004PR4  LR    R6,R7               SAVE START ADDRESS OF OPERAND
E004PR5  CLI   0(R7),C' '          SEE IF END OF OPERAND
         BE    E004PR6             YES, BRANCH
         LA    R7,1(R7)            INCREMENT TO NEXT CHAR OF CARD
         CR    R7,R5               SEE IF DONE
         BL    E004PR5             NO, LOOP
         B     E004RC00            NOT FOUND, PASS THIS ONE ALONG
E004PR6  SR    R7,R6               GET LENGTH OF OPERAND
         CH    R7,=H'8'            SEE IF EXCEEDS 8 CHARACTERS
         BH    E004RC00            NOT OURS, PASS THIS ONE ALONG
         LA    R15,0(R7,R6)        CALCULATE END ADDRESS OF OPERAND
         CR    R15,R5              SEE IF PAST END OF CARD
         BH    E004RC00            LET JES2 HANDLE THIS ERROR
         MVC   E004NAME,$BLANKS    BLANK THE POSSIBLE RESOURCE NAME
         BCTR  R7,0                MAKE MACHINE LENGTH
         EX    R7,E004MVC          MOVE POSSIBLE RESOURCE NAME TO SAVE
***********************************************************************
*                                                                     *
*        SEE IF ONE OF OUR SPECIAL VALUES                             *
*                                                                     *
***********************************************************************
         CLC   E004NAME,=CL8'HERE' SEE IF 'HERE'
         BE    E004PR9             YES, BRANCH
         LA    R7,$RESTAB          POINT TO START OF RESOURCE NAMES
         LA    R15,$RESMAX         SET LOOP COUNTER
         ICM   R5,B'1111',=X'80000000' SET RESOURCE BIT MASK
E004PR7  CLC   E004NAME,0(R7)      SEE IF MATCH ON NAME
         BE    E004PR8             YES, BRANCH
         LA    R7,$RESLEN(R7)      INCREMENT TO NEXT RESTABLE ENTRY
         SRL   R5,1                SHIFT RESOURCE BIT MASK
         BCT   R15,E004PR7         LOOP
         B     E004PR10            NOT A RESOURCE, CHECK AFFINITY NAME
E004PR8  L     R3,PCEJQE           LOAD JQE ADDRESS
         USING JQE,R3              SET ADDRESSABILITY TO JQE
         $QSUSE ,                  GET CONTROL OF JES2 CHECKPOINT
         ST    R5,E004BITS         SAVE RESOURCE BIT EQUIVALENT
         OC    JQERESRT,E004BITS   ADD THIS RESOURCE NAME TO LIST
         B     E004RC08            DONE, GET OUT
E004MVC  MVC   E004NAME(0),0(R6)   **** EXECUTE ONLY ****
         DROP  R3                  DROP ADDRESSABILITY TO JQE
         EJECT
***********************************************************************
*                                                                     *
*        SEE IF ROUTING TO A SYSTEM-ID                                *
*                                                                     *
***********************************************************************
E004PR9  MVC   E004NAME(4),$SID    CHANGE 'HERE' TO OUR SYSTEM ID
E004PR10 CLC   E004NAME+4(4),$BLANKS SEE IF NOT OVER 4 CHARACTERS
         BNE   E004RC00            NOT A SID, PASS THIS ONE ALONG
         L     R5,$QSE1            LOAD ADDRESS OF FIRST QSE
         USING QSE,R5              SET ADDRESSABILITY TO QSE
E004PR11 CLC   QSESID,E004NAME     SEE IF SID MATCH
         BE    E004PR12            YES, BRANCH
         TM    QSESTAT,QSELAST     SEE IF LAST QSE
         BO    E004RC00            YES, NOT A SID,PASS THIS ONE ALONG
         LA    R5,QSELEN(R5)       INCREMENT TO NEXT QSE ENTRY
         B     E004PR11            LOOP
E004PR12 MVC   RDWSIAFF,QSESIAFF   SET/RESET SYSTEM AFFINITY
         B     E004RC08            DONE, GET OUT
         DROP  R5                  DROP ADDRESSABILITY TO QSE
         EJECT
***********************************************************************
*                                                                     *
*                    E X I T     R O U T I N E S                      *
*                                                                     *
*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *
*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *
*        RC = 08 - BYPASS FURTHER PROCESSING OF THIS STATEMENT        *
*        RC = 12 - CANCEL THE JOB WITH INCOMPLETE LISTING             *
*        RC = 16 - CANCEL THE JOB WITH NO OUTPUT                      *
*                                                                     *
***********************************************************************
E004RC00 DS    0H
         LA    R15,0               SET RETURN CODE TO 0
         $RETURN RC=(R15)          RETURN TO JES2
E004RC08 DS    0H
         LA    R15,8               SET RETURN CODE TO 8
         $RETURN RC=(R15)          RETURN TO JES2
         DROP  R4                  DROP ADDRESSABILITY TO WORK AREA
         EJECT
         LTORG
         TITLE 'JES2 ESOTERIC RESOURCE ROUTING EXITS - EXIT 5'
***********************************************************************
*                                                                     *
*        RESOURCE ROUTINE EXIT 5                                      *
*                                                                     *
***********************************************************************
E005RESC $ENTRY BASE=R12
         SPACE 1
         $SAVE                     SAVE CALLER'S REGISTERS
         LR    R12,R15             LOAD BASE REGISTER
         EJECT
***********************************************************************
*                                                                     *
*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *
*                                                                     *
*        R5       - ADDRESS OF THE CURRENT OPERAND                    *
*        R6       - INCREMENT VALUE OF 4                              *
*        R7       - ADDRESS OF THE LAST OPERAND                       *
*        R11      - ADDRESS OF THE HCT                                *
*        R13      - ADDRESS OF THE HASPCOMM PCE                       *
*        R14      - RETURN ADDRESS                                    *
*        R15      - ENTRY ADDRESS                                     *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        SEE IF THIS IS ONE OF OUR COMMANDS:                          *
*                                                                     *
*        $DC - DISPLAY JOBS NON-EXECUTABLE BECAUSE OF                 *
*              RESOURCE COMBINATIONS.                                 *
*        $QA - ATTACH A RESOURCE TO A CPU                             *
*        $QD - DETATCH A RESOURCE FROM A CPU                          *
*        $DR - DISPLAY CPU RESOURCES                                  *
*                                                                     *
***********************************************************************
         CLC   COMVERB(8),=C'DCKPTDEF' SEE IF DISPLAYING CKPTDEF
         BE    E005RC00            YES, LET IT PASS THROUGH
         CLC   COMVERB(7),=C'DCONDEF' SEE IF DISPLAYING CONDEF
         BE    E005RC00            YES, LET IT PASS THROUGH
         LA    R2,CMD$DC           ASSUME $DC
         CLC   COMVERB(2),=C'DC'   SEE IF $DC COMMAND
         BE    E005GBUF            YES, GO PROCESS IT
         LA    R2,CMD$DR           ASSUME $DR
         CLC   COMVERB(2),=C'DR'   SEE IF $DR COMMAND
         BE    E005GBUF            YES, GO PROCESS IT
         LA    R2,CMD$QA           ASSUME $QA
         CLC   COMVERB(2),=C'QA'   SEE IF $QA COMMAND
         BE    E005GBUF            YES, GO PROCESS IT
         LA    R2,CMD$QD           ASSUME $QD
         CLC   COMVERB(2),=C'QD'   SEE IF $QD COMMAND
         BE    E005GBUF            YES, GO PROCESS IT
         B     E005RC00            NO,  LET IT PASS THROUGH
         EJECT
***********************************************************************
*                                                                     *
*        GET A JES2 BUFFER FOR REENTRANCY AND                         *
*        CLEAR THE COMMAND WORK AREA                                  *
*                                                                     *
***********************************************************************
         SPACE 1
E005GBUF $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA
         LR    R4,R1               SAVE WORK AREA ADDRESS
         USING RESWORK2,R4         SET ADDRESSABILITY TO WORK AREA
         LA    R14,RESWORK2+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS
         LH    R15,$BUFSIZE        SET   'TO'   LENGTH
         SLR   R0,R0               CLEAR 'FROM' ADDRESS
         SLR   R1,R1               CLEAR 'FROM' LENGTH
         MVCL  R14,R0              CLEAR THE BUFFER
         STC   R2,E005SW1          SAVE COMMAND INDICATORS
         MVC   E005OP1,$BLANKS     BLANK THE FIRST OPERAND VALUE
         MVC   E005OP2,$BLANKS     BLANK THE SECOND OPERAND VALUE
         EJECT
*****************************************************************
*                                                               *
*        CHECK FOR REDIRECTION OF RESPONSES                     *
*                                                               *
*****************************************************************
         SPACE 1
E005RED  TM    COMFLAG,CMBFLAGU    IS THIS A UCM
         BZ    E005AUTH            NO, SKIP REDIRECTION
         TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM
         BNZ   E005RED1            SKIP AUTOMATIC L=CCA
         LA    R1,2                LOAD REDIRECT OFFSET FOR CMDS
*                                  SAME AS FOR $DF
         BCTR  R1,0                REDUCE BY 1
         SLL   R1,1                DOUBLE
         SLR   R2,R2               ZERO REGISTER FOR IC
         IC    R2,COMUCM           PICK UP CURRENT UCM ID
         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA
         USING CWA,R14             SET ADDRESSABILITY TO CWA
         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM
         BH    E005RED1            YES, ERROR, NO AUTOMATIC REDIRECTION
         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY
         AR    R1,R2               COMBINE OFFSETS
         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY
         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID
         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET
         BO    E005RED1            YES, SKIP AUTOMATIC REDIRECTION
         MVC   COMUCMA,CWACONA(R1) SET NEW AREA
         DROP  R14                 DROP ADDRESSABILITY TO CWA
         EJECT
*****************************************************************
*                                                               *
*        ROUTINE TO VERIFY CONSOLE/AREA                         *
*                                                               *
*****************************************************************
         SPACE 1
E005RED1 TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM
         BO    E005RED3            YES, UCM AND AREA ARE OK
         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA
         USING CWA,R2              SET ADDRESSABILITY TO CWA
         MVC   XASCID(1),COMUCM    SET UCM ID
         MVC   XASDID(1),COMUCMA   SET AREA ID
         CLI   XASDID,0            SEE IF AREA ID SPECIFIED
         BNZ   E005RED2            YES, BRANCH
         MVI   XASDID,C'Z'         NO,  FORCE AREA Z
E005RED2 MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT
         MVI   XAN,X'22'           SET ID FOR VERIFIER
         MODESET EXTKEY=ZERO       GET KEY 0
         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE
         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24
         BALR  R14,R15             ENTER IT
         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE
         MODESET EXTKEY=HASP       RETURN TO KEY 1
         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR
         BNH   E005RED3            NO, GO ISSUE ERROR MESSAGE
         SLR   R3,R3               CLEAR REGISTER FOR ICM
         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID
         MVI   COMUCMA,0           FORCE NO DISPLAY AREA
         CH    R15,=H'12'          SEE IF CONSOLE DOWN
         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE
         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO
         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD
         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND
         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT
         STC   R3,MBVINVA          SET AREA
         SRL   R3,8                ALIGN CONSOLE ID
         CVD   R3,$DOUBLE          CONVERT TO PACKED
         MVC   WRKA(4),=X'F0212020' SET EDIT MASK
         ED    WRKA(4),$DOUBLE+6   EDIT CONSOLE ID TO AREA
         MVC   MBVINVC,WRKA+2      MOVE CONSOLE ID TO MESSAGE
         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER
         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE
         B     E005RC08            GET OUT
         DROP  R2                  DROP ADDRESSABILITY TO CWA
E005RED3 CLI   COMUCMA,0           TEST FOR DISPLAY AREA
         BE    E005AUTH            IF NOT, SKIP
         MVI   COMLINET,X'80'      SET CONTROL LINE
         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND
         MVI   COMLINET,X'20'      SET DATA LINE
         EJECT
***********************************************************************
*                                                                     *
*        CHECK THE CONSOLE AUTHORITY FOR THESE COMMANDS               *
*                                                                     *
*        ONLY LOCAL CONSOLES ARE ALLOWED TO ISSUE THE COMMANDS        *
*                                                                     *
***********************************************************************
E005AUTH TM    COMFLAG,CMBFLAGU    IS THIS A UCM (LOCAL CONSOLE)
         BZ    E005ERR7            NO, ERROR
         SPACE 3
***********************************************************************
*                                                                     *
*        PARSE THE COMMAND BUFFER.                                    *
*                                                                     *
*        1)  ONLY TWO OPERANDS ARE ALLOWED                            *
*        2)  EACH OPERAND CAN ONLY BE 8 CHARACTERS LONG               *
*        3)  EACH COMMAND WILL VALIDATE THE INDIVIDUAL VALUES         *
*                                                                     *
***********************************************************************
E005CK   BXH   R5,R6,E005CK8       IF NO MORE EXIT
         L     R1,0(,R5)           POINT TO OPERAND
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE FIRST PARAMETER                                  *
*                                                                     *
***********************************************************************
         SPACE 1
E005CK1  LR    R14,R1              SAVE PARAMETER ADDRESS
         SLR   R15,R15             SET LENGTH TO ZERO
E005CK2  CLI   0(R1),C' '          END OF PARAMETER STRING
         BE    E005CK3             YES, BRANCH
         CLI   0(R1),C','          END OF PARAMETER STRING
         BE    E005CK3             YES, BRANCH
         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF SUBPARAM
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     E005CK2             LOOP
E005CK3  LTR   R15,R15             TEST LENGTH
         BZ    E005ERR1            ZERO, ERROR
         CH    R15,=H'8'           SEE IF GT 8
         BH    E005ERR1            GREATER THAN 8, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,E005MV1         SAVE FIRST OPERAND
         B     E005CK5             GO PROCESS SECOND PARAMETER
E005MV1  MVC   E005OP1(0),0(R14)   **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE SECOND PARAMETER                                 *
*                                                                     *
***********************************************************************
E005CK5  BXH   R5,R6,E005CK8       IF NO MORE EXIT
         L     R1,0(,R5)           POINT TO OPERAND
         LR    R14,R1              SAVE PARAMETER ADDRESS
         SLR   R15,R15             SET LENGTH TO ZERO
E005CK6  CLI   0(R1),C' '          END OF PARAMETER STRING
         BE    E005CK7             YES, BRANCH
         CLI   0(R1),C','          END OF PARAMETER STRING
         BE    E005ERR2            YES, ERROR
         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF PARAM
         LA    R15,1(,R15)         ADD 1 TO LENGTH
         B     E005CK6             LOOP
E005CK7  LTR   R15,R15             TEST LENGTH
         BZ    E005ERR1            ZERO, ERROR
         CH    R15,=H'8'           SEE IF GT 8
         BH    E005ERR1            GREATER THAN 8, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,E005MV2         SAVE FIRST OPERAND
         B     E005CK8             GO CHECK VALUES
E005MV2  MVC   E005OP2(0),0(R14)   **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        GO TO THE PROPER ROUTINE TO PROCESS THE COMMAND              *
*                                                                     *
***********************************************************************
E005CK8  TM    E005SW1,CMD$DR      SEE IF $DR COMMAND
         BO    E005$DR             YES, BRANCH
         TM    E005SW1,CMD$QA      SEE IF $QA COMMAND
         BO    E005$QA             YES, BRANCH
         TM    E005SW1,CMD$QD      SEE IF $QD COMMAND
         BO    E005$QD             YES, BRANCH
         B     E005$DC             NO,  MUST BE $DC COMMAND
         EJECT
***********************************************************************
*                                                                     *
*        $DC COMMAND                                                  *
*                                                                     *
***********************************************************************
E005$DC  TM    E005SW1,CMD$DC      SEE IF $DC COMMAND
         BNO   E005$DC1            NO, BYPASS OPERAND CHECK
         CLI   E005OP1,C' '        SEE IF ANY OPERANDS SPECIFIED
         BNE   E005ERR3            YES, ERROR
***********************************************************************
*                                                                     *
*        THIS COMMAND WILL SCAN THE QUEUES FOR ALL JOBS WAITING       *
*        FOR EXECUTION.  THE RESOURCE BITS FOR THOSE JOBS WILL        *
*        BE EXAMINED TO DETERMINE IF THERE IS A PROCESSOR THAT        *
*        HAS ALL OF THE APPROPRIATE BITS SET AN THUS COULD RUN        *
*        THE JOB.  IF THERE IS NO PROCESSOR, A CONFLICT EXISTS        *
*        AND THE JOB STATUS INFORMATION FOR THESE JOBS WILL BE        *
*        DISPLAYED ON THE CONSOLE.                                    *
*                                                                     *
*        THE JOB QUEUES ARE ANCHORED OFF OF THE HCT.  THE FIELD       *
*        $JQHEADS POINT TO 46 + 1 DUMMY CLASS QUEUES.  EACH           *
*        QUEUE HAS THE OFFSET FROM THE START OF THE JOB QUEUE         *
*        OF THE FIRST JQE IN THAT CATAGORY.  THESE QUEUES ARE         *
*        AS FOLLOWS:                                                  *
*                                                                     *
*          WORD     QUEUE                                             *
*                                                                     *
*           1       PURGE QUEUE                                       *
*           2       HARDCOPY (PRINT) QUEUE                            *
*           3       OUTPUT QUEUE                                      *
*           4       RECEIVE QUEUE                                     *
*           5       SETUP QUEUE                                       *
*           6       XMIT QUEUE                                        *
*           7       INPUT QUEUE                                       *
*           8       CONVERSION QUEUE                                  *
*           9       STARTED TASK EXECUTION QUEUE                      *
*           10      TSO EXECUTION QUEUE                               *
*           11-36   CLASS A-Z EXECUTION QUEUE                         *
*           37-46   CLASS 0-9 EXECUTION QUEUE                         *
*           47      DUMMY ENTRY                                       *
*                                                                     *
*        THE FIRST QUEUE IN THE QUEUE WILL POINT TO THE NEXT          *
*        JQE, ETC, UNTIL THE END OF THE QUEUE.                        *
*                                                                     *
***********************************************************************
E005$DC1 SLR   R3,R3               ZERO THE QUEUE OFFSET
         STH   R3,E005INDX         SAVE THE QUEUE OFFSET
         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA
         ST    R1,BUFADDR          SAVE BUFFER ADDRESS
E005$DC2 LA    R9,$JQHEADS-(JQENEXT-JQE)(R3) POINT TO NEXT QUEUE
         USING JQE,R9              SET ADDRESSABILITY TO JQE
E005$DC3 L     R9,JQENEXT          GET OFFSET OF FIRST/NEXT JQE
         N     R9,$ZEROFFF         CLEAR THE HIGH ORDER BYTE
         BZ    E005$DC8            ZERO, END OF QUEUE, GO TO NEXT
         AL    R9,$JOBQPTR         CHANGE JQE OFFSET TO ACTUAL ADDRESS
         TM    JQETYPE,$XEQ        SEE IF POSSIBLY AWAITING EXECUTION
         BNO   E005$DC7            NO, BYPASS THIS JQE
         TM    JQEFLAG1,JQE1BUSY   SEE IF BUSY (EXECUTING)
         BO    E005$DC7            YES, BYPASS THIS JQE
         ICM   R15,B'1111',JQERESRT LOAD RESOURCE BITS
         BZ    E005$DC7            NONE, BYPASS THIS JQE
         L     R1,$QSE1            LOAD ADDRESS OF FIRST QSE
         USING QSE,R1              SET ADDRESSABILITY TO QSE
E005$DC4 ICM   R14,B'1111',QSERESTB LOAD RESOURCE BITS
         BZ    E005$DC5            THIS PROCESSOR IS NOT ELIGIBLE
         OR    R14,R15             'OR' THE RESOURCES TOGETHER
         C     R14,QSERESTB        SEE IF THEY CHANGED
         BE    E005$DC3            NO, THERE IS ONE ELIGIBLE PROCESSOR
E005$DC5 TM    QSESTAT,QSELAST     SEE IF LAST QSE
         BO    E005$DC6            YES, NONE ELIGIBLE, GO FORMAT IT
         LA    R1,QSELEN(R1)       INCREMENT TO NEXT QSE
         B     E005$DC4            GO PROCESS NEXT QSE
         DROP  R1                  DROP ADDRESSABILITY TO QSE
E005$DC6 MVI   QBITS,QCNV+QXEQ     EXECUTION QUEUE ONLY
         MVI   QBITS+1,0           NO ACTIVE JOBS OR DEVICE ACTIVITY
         MVI   QMISC+L'SYSALL,SYSALL ALL SYSTEMS
         MVI   QMISC+L'RESOURCE,RESOURCE LIST RESOURCE NAMES
         MVI   QFILT1,0            NO SPECIAL FILTERING
         MVI   QFILT2,0            NO SPECIAL FILTERING
         MVI   QCLASS,0            ZERO THE XEQ/CNV CLASS
         XC    OWNERID,OWNERID     NO OWNERID SELECTION
         L     R10,BUFADDR         GET A BUFFER ADDRESS
         LA    R1,QBITS            POINT TO EXIT PARM LIST
         $EXIT 255,ENVIRON=JES2,MAXRC=8 CALL FORMAT ROUTINE
         CH    R15,=H'8'           SEE IF CONSOLE BUFFER SHORTAGE
         BE    E005RC08            YES, GET OUT
         CH    R15,=H'4'           SEE IF JOB PASSED FILTERING
         BE    E005$DC7            NO, DO NOT TURN ON JOB FOUND
         OI    E005SW1,FOUND       TURN ON JOB FOUND INDICATOR
E005$DC7 B     E005$DC3            GO PROCESS NEXT JQE
E005$DC8 LH    R3,E005INDX         LOAD THE QUEUE OFFSET
         LA    R3,4(R3)            INCREMENT TO NEXT QUEUE
         STH   R3,E005INDX         SAVE THE NEW QUEUE OFFSET
         LA    R1,$JQTYPES*$JQHEADL CALCULATE END OF QUEUE
         CLR   R3,R1               SEE IF END OF QUEUE
         BL    E005$DC2            NO, GO PROCESS THIS QUEUE
E005$DC9 L     R10,BUFADDR         GET THE WORK AREA ADDRESS
         $FREEBUF (R10)            FREE THE WORK AREA
         TM    E005SW1,FOUND       SEE IF RESOURCE CONFLICT FOUND
         BNO   E005$DCA            YES, BRANCH
         MVC   MESSAGE(20),=CL20'- END OF CONFLICTS'
         LA    R0,20               LOAD LENGTH OF MESSAGE
         LA    R1,MESSAGE          LOAD ADDRESS OF MESSAGE
         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE
         B     E005RC08            END OF COMMAND
E005$DCA MVC   MESSAGE(20),=CL20'- NO CONFLICTS EXIST'
         LA    R0,20               LOAD LENGTH OF MESSAGE
         LA    R1,MESSAGE          LOAD ADDRESS OF MESSAGE
         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE
         B     E005RC08            END OF COMMAND
         DROP  R9                  DROP ADDRESSABILITY TO JQE
         EJECT
***********************************************************************
*                                                                     *
*        $DR COMMAND                                                  *
*                                                                     *
***********************************************************************
E005$DR  TM    E005SW1,CMD$DR      SEE IF $DR COMMAND
         BNO   E005$DR2            NO, BYPASS OPERAND CHECK
         CLI   E005OP2,C' '        SEE IF TOO MANY OPERANDS
         BNE   E005ERR2            YES, ERROR
         CLI   E005OP1,C' '        SEE IF SID SPECIFIED
         BNE   E005$DR1            YES, BRANCH
         MVC   E005OP1(4),$SID     SET DEFAULT SID
E005$DR1 MVC   E005OP2,E005OP1     MOVE SID TO SECOND OPERAND
***********************************************************************
*                                                                     *
*        FIND THE QSE THAT MATCHES THE SID                            *
*                                                                     *
***********************************************************************
E005$DR2 LA    R1,E005OP2          POINT TO SID
         CLI   E005OP2+4,C' '      SEE IF SID LENGTH GREATER THAN 4
         BNE   E005ERR5            YES, ERROR
         L     R8,$QSE1            LOAD ADDRESS OF FIRST QSE
         USING QSE,R8              SET ADDRESSABILITY TO QSE
         CLC   E005OP2(4),=C'ALL ' SEE IF WANT ALL SIDS
         BE    E005$DR4            YES, GO FORMAT THIS ONE
E005$DR3 CLC   QSESID,0(R1)        SEE IF MATCH ON SID
         BE    E005$DR4            YES, BRANCH
         TM    QSESTAT,QSELAST     SEE IF LAST QSE
         BO    E005ERR5            YES, ERROR
         LA    R8,QSELEN(R8)       LOAD ADDRESS OF NEXT QSE
         B     E005$DR3            LOOP
E005$DR4 MVI   MESSAGE,C' '        BLANK THE ENTIRE
         MVC   MESSAGE+1(99),MESSAGE MESSAGE AREA
         MVC   MESSAGE(4),QSESID   SET THE SYSTEM ID
         MVI   MESSAGE+5,C'='      SET EQUAL SIGN
         LA    R3,$RESTAB          POINT TO FIRST RESOURCE NAME
         LA    R15,MESSAGE+7       POINT TO RESOURCE NAME AREA
         ICM   R6,B'1111',QSERESTB LOAD THE SYSTEM RESOURCE BITS
         BNZ   E005$DR5            NOT ZERO, WE HAVE SOME
         MVC   MESSAGE+7(21),=C'NO RESOURCES ATTACHED'
         LA    R0,28               LOAD LENGTH OF MESSAGE
         LA    R1,MESSAGE          LOAD ADDRESS OF MESSAGE
         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE
         B     E005$DR8            END OF THIS QSE
E005$DR5 LTR   R6,R6               TEST RESOURCE BIT
         BZ    E005$DR7            ZERO, DONE, BRANCH
         BP    E005$DR6            NOT ON, BRANCH
         MVC   0($RESLEN,R15),0(R3) MOVE RESOURCE NAME TO MSG
         LA    R15,$RESLEN+1(R15)  INCREMENT TO NEXT SLOT IN MSG
         LA    R0,MESSAGE+40       LOAD LINE LIMIT ADDRESS
         CR    R15,R0              SEE IF PAST LIMIT
         BL    E005$DR6            NO, BRANCH
         LA    R1,MESSAGE          LOAD ADDRESS OF MESSAGE
         LA    R0,$RESLEN+1(R15)   CALCULATE LENGTH
         SR    R0,R1                  OF MESSAGE
         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE
         MVI   MESSAGE,C' '        BLANK THE ENTIRE
         MVC   MESSAGE+1(99),MESSAGE MESSAGE AREA
         MVI   MESSAGE+1,C'"'      SET CONTINUATION INDICATOR
         MVI   MESSAGE+5,C'='      SET EQUAL SIGN
         LA    R15,MESSAGE+7       POINT TO RESOURCE NAME AREA
         B     E005$DR6            GO PROCESS NEXT RESOURCE BIT
E005$DR6 SLL   R6,1                SHIFT RESOURCE BITS
         LA    R3,$RESLEN(R3)      INCREMENT TO NEXT RESOURCE NAME
         B     E005$DR5            GO TEST THIS BIT
E005$DR7 CLI   MESSAGE+7,C' '      HAS A RESOURCE NAME BEEN SET
         BE    E005$DR8            NO, NOTHING ELSE TO WRITE
         LA    R1,MESSAGE          LOAD ADDRESS OF MESSAGE
         LA    R0,$RESLEN+1(R15)   CALCULATE LENGTH
         SR    R0,R1                  OF MESSAGE
         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE
         MVI   MESSAGE,C' '        BLANK THE ENTIRE
         MVC   MESSAGE+1(99),MESSAGE MESSAGE AREA
E005$DR8 CLC   E005OP2(4),=C'ALL ' SEE IF WANT ALL SIDS
         BNE   E005$DR9            NO, BRANCH
         TM    QSESTAT,QSELAST     SEE IF LAST QSE
         BO    E005$DR9            YES, GET OUT
         LA    R8,QSELEN(R8)       LOAD ADDRESS OF NEXT QSE
         B     E005$DR4            GO FORMAT THIS ONE ALSO
         DROP  R8                  DROP ADDRESSABILITY TO QSE
E005$DR9 TM    E005SW1,CMD$QA+CMD$QD SEE IF $QA OR $QD COMMAND
         BNZ   E005$DC             YES, BRANCH ENTER THE $DC COMMAND
         B     E005RC08            NO,  GET OUT
         EJECT
***********************************************************************
*                                                                     *
*        $QA COMMAND                                                  *
*                                                                     *
***********************************************************************
E005$QA  CLI   E005OP1,C' '        SEE IF RESOURCE NAME SPECIFIED
         BE    E005ERR6            NO, ERROR
         CLI   E005OP2,C' '        SEE IF SID SPECIFIED
         BNE   E005$QA1            YES, BRANCH
         MVC   E005OP2(4),$SID     NO,  USE DEFAULT SID
***********************************************************************
*                                                                     *
*        FIND THE QSE THAT MATCHES THE SID                            *
*                                                                     *
***********************************************************************
E005$QA1 LA    R1,E005OP2          POINT TO SID
         CLI   E005OP2+4,C' '      SEE IF SID LENGTH GREATER THAN 4
         BNE   E005ERR5            YES, ERROR
         L     R8,$QSE1            LOAD ADDRESS OF FIRST QSE
         USING QSE,R8              SET ADDRESSABILITY TO QSE
E005$QA2 CLC   QSESID,0(R1)        SEE IF MATCH ON SID
         BE    E005$QA3            YES, BRANCH
         TM    QSESTAT,QSELAST     SEE IF LAST QSE
         BO    E005ERR5            YES, ERROR
         LA    R8,QSELEN(R8)       LOAD ADDRESS OF NEXT QSE
         B     E005$QA2            LOOP
***********************************************************************
*                                                                     *
*        FIND THE RESOURCE NAME IN THE RESTABL                        *
*                                                                     *
***********************************************************************
E005$QA3 LA    R1,E005OP1          POINT TO RESOURCE NAME
         LA    R7,$RESTAB          POINT TO START OF RESOURCE NAMES
         LA    R15,$RESMAX         SET LOOP COUNTER
         ICM   R5,B'1111',=X'80000000' SET RESOURCE BIT MASK
E005$QA4 CLC   E005OP1,0(R7)       SEE IF MATCH ON NAME
         BE    E005$QA5            YES, BRANCH
         LA    R7,$RESLEN(R7)      INCREMENT TO NEXT RESTABLE ENTRY
         SRL   R5,1                SHIFT RESOURCE BIT MASK
         BCT   R15,E005$QA4        LOOP
         B     E005ERR4            INVALID RESOURCE NAME, ERROR
E005$QA5 LR    R3,R5               SAVE RESOURCE BITS
         O     R3,QSERESTB         'OR' THE QSE BITS ON ALSO
         CL    R3,QSERESTB         SEE IF CHANGED
         BE    E005$QA6            NO, NOTHING CHANGED
         $QSUSE ,                  GET CONTROL OF THE CHECKPOINT
         O     R5,QSERESTB         'OR' THE QSE BITS
         STCM  R5,B'1111',QSERESTB AND REPLACE IN THE QSE
E005$QA6 $POST $HASPECF,JOB        POST JES2 WORK SELECT ROUTINE
         B     E005$DR             DONE, GO DISPLAY RESOURCES
         DROP  R8                  DROP ADDRESSABILITY TO QSE
         EJECT
***********************************************************************
*                                                                     *
*        $QD COMMAND                                                  *
*                                                                     *
***********************************************************************
E005$QD  CLI   E005OP1,C' '        SEE IF RESOURCE NAME SPECIFIED
         BE    E005ERR6            NO, ERROR
         CLI   E005OP2,C' '        SEE IF SID SPECIFIED
         BNE   E005$QD1            YES, BRANCH
         MVC   E005OP2(4),$SID     NO,  USE DEFAULT SID
***********************************************************************
*                                                                     *
*        FIND THE QSE THAT MATCHES THE SID                            *
*                                                                     *
***********************************************************************
E005$QD1 LA    R1,E005OP2          POINT TO SID
         CLI   E005OP2+4,C' '      SEE IF SID LENGTH GREATER THAN 4
         BNE   E005ERR5            YES, ERROR
         L     R8,$QSE1            LOAD ADDRESS OF FIRST QSE
         USING QSE,R8              SET ADDRESSABILITY TO QSE
E005$QD2 CLC   QSESID,0(R1)        SEE IF MATCH ON SID
         BE    E005$QD3            YES, BRANCH
         TM    QSESTAT,QSELAST     SEE IF LAST QSE
         BO    E005ERR5            YES, ERROR
         LA    R8,QSELEN(R8)       LOAD ADDRESS OF NEXT QSE
         B     E005$QD2            LOOP
***********************************************************************
*                                                                     *
*        FIND THE RESOURCE NAME IN THE RESTABL                        *
*                                                                     *
***********************************************************************
E005$QD3 LA    R1,E005OP1          POINT TO RESOURCE NAME
         LA    R7,$RESTAB          POINT TO START OF RESOURCE NAMES
         LA    R15,$RESMAX         SET LOOP COUNTER
         ICM   R5,B'1111',=X'80000000' SET RESOURCE BIT MASK
E005$QD4 CLC   E005OP1,0(R7)       SEE IF MATCH ON NAME
         BE    E005$QD5            YES, BRANCH
         LA    R7,$RESLEN(R7)      INCREMENT TO NEXT RESTABLE ENTRY
         SRL   R5,1                SHIFT RESOURCE BIT MASK
         BCT   R15,E005$QD4        LOOP
         B     E005ERR4            INVALID RESOURCE NAME, ERROR
E005$QD5 LR    R3,R5               SAVE NEW RESOURCE BIT
         O     R3,QSERESTB         'OR' THE QSE BITS ON ALSO
         XR    R3,R5               'EXCLUSIVE OR' THE NEW BIT
         CL    R3,QSERESTB         SEE IF CHANGED
         BE    E005$QD6            NO, NOTHING CHANGED
         $QSUSE ,                  GET CONTROL OF THE CHECKPOINT
         LR    R3,R5               SAVE NEW RESOURCE BIT
         O     R5,QSERESTB         'OR' THE QSE BITS ON ALSO
         XR    R3,R5               'EXCLUSIVE OR' THE NEW BIT
         STCM  R3,B'1111',QSERESTB AND REPLACE IN THE QSE
E005$QD6 $POST $HASPECF,JOB        POST JES2 WORK SELECT ROUTINE
         B     E005$DR             DONE, GO DISPLAY RESOURCES
         DROP  R8                  DROP ADDRESSABILITY TO QSE
         EJECT
***********************************************************************
*                                                                     *
*        INVALID OPERAND SPECIFIED                                    *
*                                                                     *
***********************************************************************
         SPACE 1
E005ERR1 L     R1,0(0,R5)          POINT TO INVALID OPERAND
         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG
         MVC   COMMAND+9(16),=C' INVALID OPERAND' SET ERROR MSG
         LA    R0,25               SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=970    WRITE ERROR MESSAGE
         B     E005RC08            GET OUT
         SPACE 1
***********************************************************************
*                                                                     *
*        TOO MANY COMMAND OPERANDS                                    *
*                                                                     *
***********************************************************************
         SPACE 1
E005ERR2 MVC   COMMAND(18),=C' TOO MANY OPERANDS' SET ERROR MSG
         LA    R0,18               SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=971    WRITE ERROR MESSAGE
         B     E005RC08            GET OUT
         SPACE 1
***********************************************************************
*                                                                     *
*        NO OPERANDS ON $DC COMMAND                                   *
*                                                                     *
***********************************************************************
         SPACE 1
E005ERR3 MVC   COMMAND(40),=CL40' NO OPERANDS ALLOWED ON THE $DC COMMANX
               D'
         LA    R0,40               SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=972    WRITE ERROR MESSAGE
         B     E005RC08            GET OUT
         SPACE 1
***********************************************************************
*                                                                     *
*        INVALID RESOURCE NAME                                        *
*                                                                     *
***********************************************************************
         SPACE 1
E005ERR4 MVC   COMMAND(8),0(R1)    MOVE RESOURCE NAME TO MSG
         MVC   COMMAND+8(23),=C' INVALID RESOURCE NAME ' SET ERROR MSG
         LA    R0,30               SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=973    WRITE ERROR MESSAGE
         B     E005RC08            GET OUT
         SPACE 1
***********************************************************************
*                                                                     *
*        INVALID SYSTEM ID                                            *
*                                                                     *
***********************************************************************
         SPACE 1
E005ERR5 MVC   COMMAND(8),0(R1)    MOVE SYSTEM ID TO MESSAGE
         MVC   COMMAND+9(22),=C'INVALID SYSTEM ID     ' SET ERROR MSG
         LA    R0,30               SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=974    WRITE ERROR MESSAGE
         B     E005RC08            GET OUT
         SPACE 1
***********************************************************************
*                                                                     *
*        RESOURCE NAME MISSING                                        *
*                                                                     *
***********************************************************************
         SPACE 1
E005ERR6 MVC   COMMAND(35),=CL35' RESOURCE NAME MUST BE SPECIFIED'
         LA    R0,35               SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=976    WRITE ERROR MESSAGE
         B     E005RC08            GET OUT
         SPACE 1
***********************************************************************
*                                                                     *
*        COMMAND NOT FROM A LOCAL CONSOLE                             *
*                                                                     *
***********************************************************************
         SPACE 1
E005ERR7 MVC   COMMAND(45),=CL45' COMMAND NOT AUTHORIZED FROM THIS CONS*
               OLE'
         LA    R0,45               SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=977    WRITE ERROR MESSAGE
         B     E005RC08            GET OUT
         EJECT
***********************************************************************
*                                                                     *
*                    E X I T     R O U T I N E S                      *
*                                                                     *
*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *
*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *
*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *
*        RC = 12 - TERMINATE ISSUING THE "OK" MESSAGE                 *
*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *
*                                                                     *
***********************************************************************
E005RC00 DS    0H
         LA    R15,0               SET RETURN CODE TO 0
         $RETURN RC=(R15)          RETURN TO JES2
E005RC08 DS    0H
         $FREEBUF (R4)             FREE THE WORK AREA
         LA    R15,8               SET RETURN CODE TO 8
         $RETURN RC=(R15)          RETURN TO JES2
         DROP  R4                  DROP ADDRESSABILITY TO WORK AREA
         EJECT
*****************************************************************
*                                                               *
*       R E D I R E C T   R O U T I N E   C O N S T A N T S     *
*                                                               *
*****************************************************************
         SPACE 1
MOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX
MBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '
MBVINVL  EQU   *-MBVINV
MBVINVC  EQU   COMMAND+MBVINVL-16,2
MBVINVA  EQU   MBVINVC+2,1
FBLFLG   EQU   COMEWORK+2          FLAG BYTE
COMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER
FBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM
FBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED
FBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED
         EJECT
         $RESTABL ,
         EJECT
         LTORG
         EJECT
         TITLE 'JES2 ESOTERIC RESOURCE ROUTING EXITS - EXIT 14'
***********************************************************************
*                                                                     *
*        RESOURCE ROUTINE EXIT 14                                     *
*                                                                     *
***********************************************************************
E014RESC $ENTRY BASE=R12
         SPACE 1
         $SAVE                     SAVE CALLER'S REGISTERS
         LR    R12,R15             LOAD BASE REGISTER
         EJECT
***********************************************************************
*                                                                     *
*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *
*                                                                     *
*        R1       - ADDRESS OF A QGET PARAMETER LIST                  *
*                   WORD 1 - ADDRESS OF THE NODE TABLE                *
*                   WORD 2 - ADDRESS OF THE CONTROL BLOCK             *
*                            PIT  --  IF INWS                         *
*                            DCT  --  IF OJTWS OR OJTWSC              *
*                   WORD 3 - ADDRESS OF THE CLASS LIST                *
*                   WORD 4 - ADDRESS OF THE SELECTED JQE              *
*                   WORD 5 - MISCELLANEOUS BYTES                      *
*                            1 - LENGTH OF THE CLASS LIST             *
*                            2 - QUEUE TYPE                           *
*                            3 - WORK SELECTION TYPE FLAG             *
*                            4 - RESERVED                             *
*        R11      - ADDRESS OF THE HCT                                *
*        R13      - ADDRESS OF THE PCE                                *
*        R14      - RETURN ADDRESS                                    *
*        R15      - ENTRY ADDRESS                                     *
*                                                                     *
***********************************************************************
         LR    R2,R1               COPY $QGET PARAMETER LIST ADDR
         USING QGT,R2              SET ADDRESSABILITY TO THE QGT
***********************************************************************
*                                                                     *
*        LIMIT PROCESSING TO REQUESTS FOR JOBS AWAITING EXECUTION     *
*                                                                     *
***********************************************************************
         TM    QGTWSTP,$QGTLST+$QGTLSTC WORK SELECTION FOR OFFJT
         BM    E014RC00            YES, LET JES2 DO IT
         TM    QGTWSTP,$QGTINWS    INITIATOR CLASS LIST SEARCH
         BO    E014QLST            YES, GO PROCESS IT
         TM    QGTTYP,$XEQ         EXECUTION QUEUE REQUEST
         BNO   E014RC00            NO, LET JES2 DO IT
         CLI   QGTTYP,$XEQ         CONVERSION QUEUE REQUEST
         BE    E014RC00            YES, LET JES2 TO IT ALSO
E014QLST ICM   R5,B'1111',QGTCLST  GET CLASS LIST ADDRESS
         BZ    E014RC00            NONE, LET JES2 DO IT
         SLR   R3,R3               CLEAR REGISTER FOR CLASS COUNTER
***********************************************************************
*                                                                     *
*        RUN THROUGH THE SPECIFIED CLASS LIST.  CALCULATE THE         *
*        $QINDEX OFFSET OF EACH CLASS IN THE LIST AND SCAN THAT       *
*        CLASS QUEUE.                                                 *
*                                                                     *
***********************************************************************
E014NXTC CLM   R3,B'0001',QGTLSTLN SEE IF END OF CLASS LIST
         BNL   E014RC12            YES, EXIT WITH NO JQE FOUND
         SLR   R6,R6               CLEAR REG FOR IC
         IC    R6,0(R5)            GET NEXT CLASS IN LIST
         CLM   R6,B'0001',$BLANKS  SEE IF END OF CLASS LIST
         BE    E014RC12            YES, EXIT WITH NO JQE FOUND
         LA    R5,1(,R5)           POINT TO NEXT CLASS IN LIST
         LA    R3,1(,R3)           INCREMENT CLASS LIST COUNTER
         N     R6,=A($XEQCLAS)     MODIFY CLASS FOR TABLE INDEX
         LA    R4,X'3F'            GET MASK FOR RELATIVE CAT ENTRY
         NR    R4,R6               GET RELATIVE CAT ENTRY
         MH    R4,=Y(CATLEN)       MULTIPLY BY CAT ENTRY LENGTH
         AL    R4,$CATABLE         POINT TO CAT ENTRY
         USING CAT,R4              SET ADDRESSABILITY TO CAT
***********************************************************************
*                                                                     *
*        IF CURRENT CLASS IS A TSU, STC, OR HELD CLASS, DON'T         *
*        SCAN THE CLASS QUEUE FOR JQES                                *
*                                                                     *
***********************************************************************
         TM    CATJOBFL,JCTTSUJB+JCTSTCJB IS THIS A TSU OR SCT CLASS
         BNZ   E014NXTC            YES, GET NEXT CLASS
         TM    CATJBOPT,JCTQHELD   IS THIS A HELD CLASS
         BO    E014NXTC            YES, GET NEXT CLASS
         DROP  R4                  KILL CAT ADDRESSABILITY
         L     R15,$QINDEXA        GET JOB QUEUE..
         IC    R6,0(R6,R15)        LOAD QUEUE HEADER OFFSET
         LTR   R6,R6               IS THIS A VALID QUEUE TYPE
         BZ    E014CLST            YES, CHECK IF RUNNING CLASS LIST
         LA    R6,$JQHEADS-$JQHEADL-(JQENEXT-JQE)(R6) SETUP Q SCAN
         USING JQE,R6              SET ADDRESSABILITY TO JQE
***********************************************************************
*        SCAN SELECTED QUEUE FOR A JQE                                *
***********************************************************************
E014NXTQ L     R6,JQENEXT          GET OFFSET OF FIRST/NEXT JQE
         N     R6,$ZEROFFF         CLEAR THE HIGH ORDER BYTE
         BNZ   E014CK1             NOT END OF QUEUE, GO CHECK THIS ONE
E014CLST TM    QGTWSTP,$QGTINWS    CLASS LIST BEING SCANNED
         BO    E014NXTC            YES, GET NEXT CLASS
         B     E014RC12            NO,  RETURN WITH NO JQE FOUND
***********************************************************************
*                                                                     *
*        CHECK FOR ACTIVE OR HELD JOB                                 *
*                                                                     *
***********************************************************************
E014CK1  AL    R6,$JOBQPTR         CALCULATE JQE ADDRESS
         TM    JQETYPE,$XEQ        IS QUEUE TYPE XEQ?
         BNO   E014NXTQ            NO, BYPASS
         CLI   JQETYPE,$XEQ        JOB ON CONVERSION QUEUE
         BE    E014NXTQ            YES, BYPASS
         TM    JQEFLAG1,JQE1HLDA+JQE1HLD1+JQE1HLD2+JQE1BUSY
         BNZ   E014NXTQ            BYPASS IF HELD OR ACTIVE
         TM    JQEFLAG4,JQE4CAN    IS FORCE PURGE FLAG ON
         BO    E014NXTQ            YES, BYPASS
         TM    JQEXFLG2,JQEXUHLD   JOB ON USER HOLD
         BO    E014NXTQ            YES, BYPASS
         CLI   JQETYPE,$XMIT       JOB IS ON NJE TRANSMISSION QUEUE
         BE    E014NXTQ            YES, BYPASS
         TM    JQEXFLG2,JQEXWSET   JOB AWAITING SETUP
         BO    E014NXTQ            YES, BYPASS
***********************************************************************
*                                                                     *
*        CHECK THAT ALL SPOOLS FOR THIS JOB ARE ONLINE                *
*                                                                     *
***********************************************************************
E014CK2  LH    R15,$JQEMSKL        GET JQE SPOOL MASK LENGTH-1
         EX    R15,MBJQEMVC        GET SPOOLS USED BY THIS JOB
         NC    $SPMSKWA,$SPLSLCT   'AND' WITH QUALIFYING SPOOLS
         EX    R15,MBJQECLC        ALL REQUIRED SPOOLS MOUNTED
         BNE   E014NXTQ            NO, BYPASS
***********************************************************************
*                                                                     *
*        CHECK FOR AFFINITY AND INDEPENDENT MODE                      *
*                                                                     *
***********************************************************************
E014CK3  TM    $STATUS,$INDMODE    IS THE CPU IN INDEPENDENT MODE
         BO    E014CK4             YES, GO CHECK THE JQE
         TM    JQEFLAG2,JQE2IND    IS THE JOB IN INDEPENDENT MODE
         BO    E014NXTQ            YES, BYPASS THIS ONE
         B     E014CK5             NO,  GO CHECK AFFINITY
E014CK4  TM    JQEFLAG2,JQE2IND    IS THE JOB IN INDEPENDENT MODE
         BZ    E014NXTQ            NO, BYPASS THIS ONE
E014CK5  SLR   R15,R15             CLEAR R15 FOR IC
         IC    R15,$SIDAFF         GET THE SYSTEM ID (CAN BE 1-7)
         EX    R15,MBTSTAFF        MAY JOB RUN ON THIS SYSTEM
         BZ    E014NXTQ            NO, BYPASS THIS ONE
***********************************************************************
*                                                                     *
*        CHECK FOR RESOURCE ROUTINE BITS                              *
*                                                                     *
***********************************************************************
E014CK6  L     R15,$AQSE           LOAD ADDRESS OF OUR QSE
         ICM   R15,B'1111',QSERESTB-QSE(R15) LOAD RESOURCE BITS
         N     R15,JQERESRT        COMBINE WITH BITS FOR THE JOB
         C     R15,JQERESRT        SEE IF CHANGED
         BNE   E014NXTQ            YES, INSUFFICIENT RESOURCES
         SPACE 1
***********************************************************************
*                                                                     *
*        CHECK FOR THREAD/EXCLUDE RESTRICTIONS                        *
*                                                                     *
***********************************************************************
E014DEP  TM    JQEXFLG2,JQEXTHRD+JQEXXCLU JOB HAVE THREAD OR EXCLUDE
         BZ    E014RC08            NO. USE THIS JOB
         SLR   R8,R8               ZERO THE QUEUE OFFSET
         B     E014DEP2            GO PROCESS THE FIRST QUEUE
***********************************************************************
*                                                                     *
*        POINT TO NEXT QUEUE ENTRY                                    *
*                                                                     *
***********************************************************************
E014DEP1 LA    R8,$JQHEADL(R8)     POINT TO NEXT QUEUE
         LA    R1,$JQTYPES*$JQHEADL CALCULATE END OF QUEUES
         CLR   R8,R1               SEE IF END OF QUEUES
         BNL   E014RC08            YES, NO THREAD/EXCLUDE, GO JQE
E014DEP2 LA    R1,$JQHEADS-(JQENEXT-JQE)(R8) POINT TO FIRST IN QUEUE
***********************************************************************
*                                                                     *
*        POINT TO NEXT JQE IN CURRENT EXECUTION QUEUE                 *
*                                                                     *
***********************************************************************
E014DEP3 L     R1,JQENEXT-JQE(R1)  GET OFFSET OF FIRST/NEXT JQE
         N     R1,$ZEROFFF         CLEAR THE HIGH ORDER BYPE
         BZ    E014DEP1            ZERO, END OF QUEUE, GO TO NEXT
         AL    R1,$JOBQPTR         CHANGE JQE OFFSET TO ACTUAL ADDRESS
         CLI   JQETYPE-JQE(R1),$XEQ IS THIS THE CONVERSION QUEUE
         BE    E014DEP3            YES, GO GET NEXT JQE
         TM    JQETYPE-JQE(R1),$XEQ IS THIS THE $XEQ QUEUE
         BNO   E014DEP3            NO, GO GET NEXT JQE
         TM    JQEFLAG1-JQE(R1),JQE1BUSY IS THIS JOB ACTIVE
         BZ    E014DEP3            NO, GET NEXT JQE
         CLR   R6,R1               IS IT OUR JQE?
         BE    E014DEP3            YES, GO GET NEXT JQE
***********************************************************************
*                                                                     *
*        CHECK FOR THREAD CONTROL                                     *
*                                                                     *
***********************************************************************
E014THRD TM    JQEXFLG2,JQEXTHRD   DID JOB USE THREAD
         BZ    E014EXCL            NO. TEST FOR EXCLUDE
         CLC   JQEXTHRN(8),JQEJNAME-JQE(R1) THREAD NAME = JOB NAME?
         BE    E014NXTQ            YES. DON'T SELECT THIS JQE
         TM    JQEXFLG2-JQE(R1),JQEXTHRD DID OTHER JOB USE THREAD
         BZ    E014EXCL            NO. TRY EXCLUDE
         CLC   JQEXTHRN(8),JQEXTHRN-JQE(R1) IS THREAD NAME EQUAL
         BE    E014NXTQ            YES. DON'T SELECT THIS JQE
***********************************************************************
*                                                                     *
*        CHECK FOR EXCLUDE CONTROL                                    *
*                                                                     *
***********************************************************************
E014EXCL TM    JQEXFLG2,JQEXXCLU   DID JOB USE EXCLUDE?
         BZ    E014DEP3            NO. GET ANOTHER EXECUTING JQE
         CLC   JQEXEXCN(8),JQEJNAME-JQE(R1) EXCLUDE NAME = JOB NAME?
         BE    E014NXTQ            YES. DON'T SELECT THIS JQE
         TM    JQEXFLG2-JQE(R1),JQEXTHRD DID OTHER JOB USE THREAD
         BZ    E014DEP3            NO. GET ANOTHER EXECUTING JQE
         CLC   JQEXEXCN(8),JQEXTHRN-JQE(R1) EXCLUDE NAME = THREAD NAME
         BE    E014NXTQ            YES. DON'T SELECT THIS JQE
         B     E014DEP3            GET ANOTHER EXECUTING JQE
         EJECT
***********************************************************************
*                                                                     *
*                    E X I T     R O U T I N E S                      *
*                                                                     *
*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *
*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *
*        RC = 08 - USE THE JQE PROVIDED                               *
*        RC = 12 - NO JQE WAS FOUND                                   *
*                                                                     *
***********************************************************************
         SPACE 2
E014RC00 LA    R15,0               SET RETURN CODE TO 0
         $RETURN RC=(R15)          RETURN TO JES2
E014RC04 LA    R15,4               SET RETURN CODE TO 4
         $RETURN RC=(R15)          RETURN TO JES2
E014RC08 ST    R6,QGTJQE           PLACE JQE ADDRESS IN $QGET LIST
         LA    R15,8               SET RETURN CODE TO 8
         $RETURN RC=(R15)          RETURN TO JES2
E014RC12 LA    R15,12              SET RETURN CODE TO 12
         $RETURN RC=(R15)          RETURN TO JES2
         EJECT
***********************************************************************
*                                                                     *
*        E X I T    R O U T I N E    C O N S T A N T S                *
*                                                                     *
***********************************************************************
         LTORG                    EXPAND LITERAL POOL HERE
         SPACE 1
MBJQEMVC MVC   $SPMSKWA(*-*),JQESUMSK  EXECUTED INSTRUCTION
MBJQECLC CLC   $SPMSKWA(*-*),JQESUMSK  EXECUTED INSTRUCTION
MBTSTAFF TM    JQEFLAG2,*-*       EXECUTED INSTRUCTION
         EJECT
         $MODEND
         END
