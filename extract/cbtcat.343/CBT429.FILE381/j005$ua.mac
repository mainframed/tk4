J005$UA  TITLE 'JES2 $UA COMMAND PROCESSOR'
***********************************************************************
*                                                                     *
*        ENVIRONMENT   MVS SP 2.2.0                                   *
*                                                                     *
*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $UA COMMAND   *
*        WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS A TYPE 5       *
*        EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY THE $UA        *
*        COMMAND WHEN ENCOUNTERED.                                    *
*                                                                     *
*                                                                     *
*        THE $UA COMMAND HAS THE FOLLOWING SYNTAX:                    *
*                                                                     *
*        $UA                                                          *
*             JN-NN                                                   *
*             SN-NN                                                   *
*             TN-NN                                                   *
*                                                                     *
*        WHERE:                                                       *
*                                                                     *
*        JN-NN         - LIST JOB INFORMATION FOR THE SPECIFIED       *
*                        BATCH JOB(S)                                 *
*        SN-NN         - LIST JOB INFORMATION FOR THE SPECIFIED       *
*                        STARTED TASK(S)                              *
*        TN-NN         - LIST JOB INFORMATION FOR THE SPECIFIED       *
*                        TSO USER(S)                                  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *
*                                                                     *
*        1)  THE HASP90X MESSAGES ARE MADE UPON COMPLETION OF         *
*            COMMAND                                                  *
*                                                                     *
*        $HASP903 JOB XXX XXXXXXXX RELEASED FROM USER HOLD            *
*                                                                     *
*        $HASP904 JOB XXX XXXXXXXX NOT ON USER HOLD                   *
*                                                                     *
*        2)  THE HASP900 MESSAGE WILL BE ISSUED WHEN NONE             *
*            OF THE REQUESTED JOBS CANNOT BE FOUND.                   *
*                                                                     *
*        $HASP900 JOB(S) NOT FOUND                                    *
*                                                                     *
*        3)  THE HASP999 MESSAGE WILL BE ISSUED FOR ALL               *
*            ERRORS.                                                  *
*                                                                     *
*        $HASP999 XXXXXXXXX INVALID OPERAND                           *
*                                                                     *
*        THE JOBNAME/JOB NUMBER CONTAINS INVALID SYNTAX.              *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*              M A C R O S   U S E D   I N   J 0 0 5 $ U A            *
*                                                                     *
*        01)  $AMODE       SYS1.HASPSRC                               *
*        02)  $BUFFER      SYS1.HASPSRC                               *
*        03)  $CAT         SYS1.HASPSRC                               *
*        04)  $CMB         SYS1.HASPSRC                               *
*        05)  $COMWORK     SYS1.HASPSRC                               *
*        06)  $CWA         SYS1.HASPSRC                               *
*        07)  $CWTO        SYS1.HASPSRC                               *
*        08)  $DAS         SYS1.HASPSRC                               *
*        09)  $DCT         SYS1.HASPSRC                               *
*        10)  $ENTRY       SYS1.HASPSRC                               *
*        11)  $FREEBUF     SYS1.HASPSRC                               *
*        12)  $GETBUF      SYS1.HASPSRC                               *
*        13)  $HASPEQU     SYS1.HASPSRC                               *
*        14)  $HASPGBL     SYS1.HASPSRC                               *
*        15)  $HCT         SYS1.HASPSRC                               *
*        16)  $IOT         SYS1.HASPSRC                               *
*        17)  $JCT         SYS1.HASPSRC                               *
*        18)  $JOE         SYS1.HASPSRC                               *
*        19)  $JQE         SYS1.HASPSRC                               *
*        20)  $LCK         SYS1.HASPSRC                               *
*        21)  $MIT         SYS1.HASPSRC                               *
*        22)  $MODEND      SYS1.HASPSRC                               *
*        23)  $MODULE      SYS1.HASPSRC                               *
*        24)  $PADDR       SYS1.HASPSRC                               *
*        25)  $PCE         SYS1.HASPSRC                               *
*        26)  $POST        SYS1.HASPSRC                               *
*        27)  $QLOC        SYS1.HASPSRC                               *
*        28)  $QSE         SYS1.HASPSRC                               *
*        29)  $QSUSE       SYS1.HASPSRC                               *
*        30)  $RETURN      SYS1.HASPSRC                               *
*        31)  $SAVE        SYS1.HASPSRC                               *
*        32)  $TAB         SYS1.HASPSRC                               *
*        33)  IAZRESPA     SYS1.AMODGEN                               *
*        34)  IFGRPL       SYS1.MACLIB                                *
*        35)  MODESET      SYS1.MACLIB                                *
*                                                                     *
*                                                                     *
*              L I N K A G E    E D I T O R    I N F O                *
*                                                                     *
*        SIZE:       4K                                               *
*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
         COPY  $HASPGBL
J005$UA  $MODULE $HASPEQU,                                             X
               $BUFFER,            GENERATE HASP BUFFER DSECT          X
               $CAT,               GENERATE HASP CAT DSECT             X
               $CMB,               GENERATE HASP CMB DSECT             X
               $COMWORK,           GENERATE HASP COMWORK DSECT         X
               $CWA,               GENERATE HASP CWA DSECT             X
               $DAS,               GENERATE HASP DAS DSECT             X
               $DCT,               GENERATE HASP DCT DSECT             X
               $HASPEQU,           GENERATE HASP EQUATES               X
               $HCT,               GENERATE HASP HCT DSECT             X
               $IOT,               GENERATE HASP IOT DSECT             X
               $JCT,               GENERATE HASP JCT DSECT             X
               $JOE,               GENERATE HASP JOE DSECT             X
               $JQE,               GENERATE HASP JQE DSECT             X
               $KIT,               GENERATE HASP KIT DSECT             X
               $LCK,               GENERATE HASP LCK DSECT             X
               $MIT,               GENERATE HASP MIT DSECT             X
               $PADDR,             GENERATE HASP PADDR DSECT           X
               $PCE,               GENERATE HASP PCE DSECT             X
               $PDDB,              GENERATE HASP PDDB DSECT            X
               $QSE,               GENERATE HASP QSE DSECT             X
               $TAB,               GENERATE HASP TAB DSECT             X
               RESPA,              GENERATE MVS  RESPA DSECT           X
               RPL                 GENERATE MVS  IFGRPL DSECT
         EJECT
***********************************************************************
*                                                                     *
*        PROGRAM WORK AREAS                                           *
*                                                                     *
***********************************************************************
$UAWORK  DSECT
         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****
DOUBLE   DS    D                   DOUBLE WORD WORK AREA
DBL      DS    D                   DOUBLE WORD WORK AREA
ROUTCDE  DS    F                   DESTINATION CODE FOR SETDEST ROUTINE
SAVEBAS  DS    CL18                MSG SAVE AREA FOR JOB NBR AND NAME
LTEXT    DS    H                   CURRENT LENGTH OF MESSAGE AREA
RC       DS    H                   $CWTO RETURN CODE
LOWJOB   DS    H                   LOW RANGE JOB REQUESTED
HIGHJOB  DS    H                   HIGH RANGE JOB REQUESTED
JOBNAME  DS    CL8                 JOBNAME REQUESTED
JOBNAMEL DS    H                   LENGTH OF JOBNAME REQUESTED
MISCSW1  DS    X                   MISCELLANEOUS SWITCHES
NAME     EQU   X'80'               A JOBNAME WAS ENTERED - NOT NUMBER
FOUND    EQU   X'40'               A JOB WAS FOUND FOR PROCESSING
SPOOLS   EQU   X'20'               SPOOL VOLUME INFORMATION REQUESTED
VOLHEAD  EQU   X'10'               SPOOL VOLUME HEADER WRITTEN IND
MISCSW2  DS    X                   MISCELLANEOUS SWITCHES
JOEFND   EQU   X'80'               AN ACTIVE JOE FOUND FOR THIS JOB
LASTYPE  DS    C                   LAST JOB TYPE PROCESSED
DEVNO    DS    H                   NUMBER OF ACTIVE DEVICES
LASTRNG  DS    F                   ADDRESS OF LAST RANGE ENTRY
RANGES   DS    H                   NUMBER OF JOB RANGES ENTERED
***********************************************************************
*                                                                     *
*       THE JOB RANGE ENTRY TABLE HAS A FORMAT AS FOLLOWS:            *
*                                                                     *
*       1 BYTE   JOB TYPE (J/S/T)                                     *
*       1 BYTE   FILLER                                               *
*       HALFWORD LOW  JOB NUMBER IN RANGE                             *
*       HALFWORD HIGH JOB NUMBER IN RANGE                             *
*                                                                     *
***********************************************************************
RANGETBL DS    51CL6               ROOM FOR 50 RANGES + END OF LIST
SAVEAFF  DS    16F                 REGISTER SAVE FOR SETAFF  ROUTINE
SAVESPL  DS    16F                 REGISTER SAVE FOR SETSPL  ROUTINE
SAVEBLD  DS    16F                 REGISTER SAVE FOR BLDACT  ROUTINE
SAVEPUT  DS    16F                 REGISTER SAVE FOR BLDPUT  ROUTINE
DEVTBL   DS    50XL4               ACTIVE DEVICE TABLE
         SPACE 3
J005$UA  CSECT ,                   RESTORE THE CSECT ENVIRONMENT
         TITLE 'JES2 $UA COMMAND PROCESSOR'
***********************************************************************
*                                                                     *
*        EXIT MAIN ENTRY POINT                                        *
*                                                                     *
***********************************************************************
E005$UA  $ENTRY BASE=(R10,R12)
         SPACE 1
         $SAVE                     SAVE CALLER'S REGISTERS
         LR    R10,R15             LOAD FIRST BASE REGISTER
         LA    R12,4095(R10)       LOAD SECOND
         LA    R12,1(R12)               BASE REGISTER
         EJECT
***********************************************************************
*                                                                     *
*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *
*                                                                     *
*        R5       - ADDRESS OF THE CURRENT OPERAND                    *
*        R6       - INCREMENT VALUE OF 4                              *
*        R7       - ADDRESS OF THE LAST OPERAND                       *
*        R11      - ADDRESS OF THE HCT                                *
*        R13      - ADDRESS OF THE HASPCOMM PCE                       *
*        R14      - RETURN ADDRESS                                    *
*        R15      - ENTRY ADDRESS                                     *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        SEE IF THIS IS A $UA COMMAND                                 *
*                                                                     *
***********************************************************************
         CLC   COMVERB(2),=C'UA'   SEE IF THIS IS THE $UA COMMAND
         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT
         EJECT
***********************************************************************
*                                                                     *
*        GET A JES2 BUFFER FOR REENTRANCY AND                         *
*        CLEAR THE COMMAND WORK AREA                                  *
*                                                                     *
***********************************************************************
         SPACE 1
UAOK     $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA
         LR    R8,R1               SAVE WORK AREA ADDRESS
         USING $UAWORK,R8          SET ADDRESSABILITY TO WORK AREA
         LA    R14,$UAWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS
         LH    R15,$BUFSIZE        SET   'TO'   LENGTH
         SLR   R0,R0               CLEAR 'FROM' ADDRESS
         SLR   R1,R1               CLEAR 'FROM' LENGTH
         MVCL  R14,R0              CLEAR THE BUFFER
*****************************************************************
*                                                               *
*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES           *
*                                                               *
*****************************************************************
         SPACE 1
         TM    COMFLAG,CMBFLAGU    IS THIS A UCM
         BZ    MSGGOOD             NO, SKIP REDIRECTION
         TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM
         BNZ   MSGRPT              SKIP AUTOMATIC L=CCA
         LA    R1,4                LOAD REDIRECT OFFSET FOR $UA
*                                  SAME AS FOR $DJ
         BCTR  R1,0                REDUCE BY 1
         SLL   R1,1                DOUBLE
         SLR   R2,R2               ZERO REGISTER FOR IC
         IC    R2,COMUCM           PICK UP CURRENT UCM ID
         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA
         USING CWA,R14             SET ADDRESSABILITY TO CWA
         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM
         BH    MSGRPT              YES, ERROR, NO AUTOMATIC REDIRECTION
         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY
         AR    R1,R2               COMBINE OFFSETS
         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY
         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID
         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET
         BO    MSGRPT              YES, SKIP AUTOMATIC REDIRECTION
         MVC   COMUCMA,CWACONA(R1) SET NEW AREA
         DROP  R14                 DROP ADDRESSABILITY TO CWA
MSGRPT   BAL   R4,MSGVCCA          VERIFY CCA (NO RETURN IF BAD)
         CLI   COMUCMA,0           TEST FOR DISPLAY AREA
         BZ    MSGGOOD             IF NOT, SKIP
         MVI   COMLINET,X'80'      SET CONTROL LINE
         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND
         MVI   COMLINET,X'20'      SET DATA LINE
***********************************************************************
*                                                                     *
*        EXTRACT THE JOB/TSU/STC RANGE FROM THE COMMAND BUFFER        *
*                                                                     *
***********************************************************************
*        SEARCH FOR END OF FIRST JOB NUMBER IN RANGE                  *
***********************************************************************
MSGGOOD  MVI   LASTYPE,C'J'        DEFAULT JOB TYPE TO JOB
         LA    R1,COMVERB+2        POINT TO START OF JOB NUMBER
         LA    R4,RANGETBL         POINT TO JOB RANGE TABLE
SETRNG01 LR    R14,R1              POINT TO OPERAND
         LR    R2,R1               SAVE START OF OPERAND ADDRESS
         SLR   R15,R15             SET LENGTH
         CLI   0(R14),C'0'         SEE IF NUMERIC
         BNL   SETRNG03            YES, MUST BE JOB NUMBER
         CLC   0(3,R14),=C'JOB'    SEE IF JOB
         BNE   CKJOB2              NO, CHECK FOR JXXX
         LA    R14,2(R14)          UPDATE R14 TO POINT TO LAST CHAR
         B     SETRNG02            NOW GO PROCESS AS A JOB
CKJOB2   CLI   0(R14),C'J'         SEE IF JOB
         BE    SETRNG02            YES, BRANCH
         CLC   0(3,R14),=C'STC'    SEE IF STC
         BNE   CKSTC2              NO, CHECK FOR JXXX
         LA    R14,2(R14)          UPDATE R14 TO POINT TO LAST CHAR
         B     SETRNG02            NOW GO PROCESS AS A JOB
CKSTC2   CLI   0(R14),C'S'         SEE IF STC
         BE    SETRNG02            YES, BRANCH
         CLC   0(3,R14),=C'TSO'    SEE IF TSO
         BNE   CKTSO2              NO, CHECK FOR JXXX
         LA    R14,2(R14)          UPDATE R14 TO POINT TO LAST CHAR
         B     SETRNG02            NOW GO PROCESS AS A JOB
CKTSO2   CLI   0(R14),C'T'         SEE IF TSO
         BNE   BADOPRND            NO, MUST BE A KEYWORD OPERAND
SETRNG02 MVC   LASTYPE,0(R1)       SAVE JOB TYPE
         CLI   1(R14),C'0'         SEE IF NEXT CHAR NUMERIC
         BL    BADOPRND            NO, MUST BE A KEYWORD OPERAND
         LA    R14,1(R14)          INCREMENT PAST JOB TYPE
         LR    R2,R14              SAVE START OF OPERAND ADDRESS
SETRNG03 CLI   0(R14),C' '         END OF OPERAND
         BE    SETRNG04            YES, BRANCH
         CLI   0(R14),C'-'         END OF OPERAND
         BE    SETRNG04            YES, BRANCH
         CLI   0(R14),C','         END OF OPERAND
         BE    SETRNG04            YES, BRANCH
         CLI   0(R14),C'0'         SEE IF NUMERIC
         BL    BADOPRND            NO, ERROR
         CLI   0(R14),C'9'         SEE IF NUMERIC
         BH    BADOPRND            NO, ERROR
         LA    R15,1(R15)          ADD 1 TO LENGTH
         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR
         B     SETRNG03            LOOP
SETRNG04 LTR   R15,R15             TEST LENGTH
         BZ    BADOPRND            ZERO, ERROR
         CH    R15,=H'5'           TEST LENGTH
         BH    BADOPRND            GREATER THAN 5, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,PKJOBNO         PACK JOB NUMBER
         CVB   R15,DOUBLE          CONVERT TO BINARY
         LTR   R15,R15             TEST JOB NUMBER
         BZ    BADOPRND            YES, BRANCH
         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM
         BH    BADOPRND            YES, BRANCH
         STH   R15,LOWJOB          SAVE AS LOW JOB NUMBER
         STH   R15,HIGHJOB         AND AS HIGH JOB NUMBER
         CLI   0(R14),C'-'         SEE IF JOB RANGE REQUESTED
         BNE   SETRNG07            NO, GO SEE IF OTHER JOB RANGES
         LA    R14,1(R14)          INCREMENT PAST '-'
         LR    R2,R14              SAVE START OF OPERAND ADDRESS
         XR    R15,R15             SET LENGTH
***********************************************************************
*        SEARCH FOR END OF SECOND JOB NUMBER IN RANGE                 *
***********************************************************************
SETRNG05 CLI   0(R14),C' '         END OF OPERAND
         BE    SETRNG06            YES, BRANCH
         CLI   0(R14),C','         END OF OPERAND
         BE    SETRNG06            YES, BRANCH
         CLI   0(R14),C'0'         SEE IF NUMERIC
         BL    BADOPRND            NO, ERROR
         CLI   0(R14),C'9'         SEE IF NUMERIC
         BH    BADOPRND            NO, ERROR
         LA    R15,1(R15)          ADD 1 TO LENGTH
         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR
         B     SETRNG05            LOOP
SETRNG06 LTR   R15,R15             TEST LENGTH
         BZ    BADOPRND            ZERO, ERROR
         CH    R15,=H'5'           TEST LENGTH
         BH    BADOPRND            GREATER THAN 5, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,PKJOBNO         PACK JOB NUMBER
         CVB   R15,DOUBLE          CONVERT TO BINARY
         LTR   R15,R15             TEST JOB NUMBER
         BZ    BADOPRND            YES, BRANCH
         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM
         BH    BADOPRND            YES, BRANCH
         STH   R15,HIGHJOB         AND AS HIGH JOB NUMBER
SETRNG07 LH    R15,RANGES          LOAD NUMBER OF RANGES
         LA    R15,1(R15)          ADD 1 TO NUMBER OF RANGES
         CH    R15,=H'50'          SEE IF MAX EXCEEDED
         BNH   SETRNG08            NO, CONTINUE
         MVC   COMMAND(L'MSG1),MSG1 SET MAXIMUM RANGE EXCEEDED MSG
         LA    R0,L'MSG1           SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
SETRNG08 STH   R15,RANGES          SAVE NEW NUMBER OF RANGES
         MVC   0(1,R4),LASTYPE     SET JOB TYPE IN TABLE
         MVC   2(2,R4),LOWJOB      SET LOW JOB NUMBER IN TABLE
         MVC   4(2,R4),HIGHJOB     SET HIGH JOB NUMBER IN TABLE
         LA    R4,6(R4)            INCREMENT TO NEXT RANGE TABLE ENTRY
         MVI   0(R4),X'FF'         FLAG END OF LIST
         BXH   R5,R6,JQESCAN       IF NO MORE EXIT
         L     R1,0(R5)            POINT TO OPERAND
         B     SETRNG01            PROCESS THIS OPERAND
PKJOBNO  PACK  DOUBLE,0(0,R2)      *** EXECUTE ONLY ***
         SPACE 3
***********************************************************************
*                                                                     *
*        SCAN THE JOB QUEUE FOR THE JOB LIST                          *
*                                                                     *
***********************************************************************
         SPACE 1
JQESCAN  LA    R1,RANGETBL         LOAD ADDRESS OF FIRST RANGE ENTRY
         ST    R1,LASTRNG          SAVE ADDRESS OF THIS RANGE ENTRY
         MVC   LASTYPE,0(R1)       SAVE JOB TYPE
         MVC   LOWJOB,2(R1)        SAVE LOW JOB
         MVC   HIGHJOB,4(R1)       SAVE HIGH JOB
JQESCAN1 LH    R1,LOWJOB           LOAD JOB NUMBER
         $QLOC (R1)                GET JQE FOR THIS JOB NUMBER
         BZ    NEXTJQE             GET NEXT JQE IF NOT FOUND
         LR    R9,R1               SAVE JQE ADDRESS
         USING JQE,R9              SET ADDRESSABILITY TO JQE
CKJOBNO  TM    JQEFLAG3,JQE3JOB    IS THIS A BATCH JOB
         BNZ   CKSTC               NO, SEE IF STARTED TASK
         CLI   LASTYPE,C'J'        ARE WE LOOKING FOR A BATCH JOB
         BE    JQEFND              YES, GO PROCESS IT
         B     NEXTJQE             NO, GET NEXT JQE
CKSTC    TM    JQEFLAG3,JQE3STC    IS THIS A STC
         BNO   CKTSU               NO, SEE IF A TSO USER
         CLI   LASTYPE,C'S'        ARE WE LOOKING FOR A STARTED TASK
         BE    JQEFND              YES, GO PROCESS IT
         B     NEXTJQE             NO, GET NEXT JQE
CKTSU    CLI   LASTYPE,C'T'        ARE WE LOOKING FOR A TSO USER
         BE    JQEFND              YES, GO PROCESS IT
NEXTJQE  LH    R1,LOWJOB           LOAD PREVIOUS JOB NUMBER
         LA    R1,1(R1)            ADD 1 TO JOB NUMBER
         STH   R1,LOWJOB           SAVE NEW JOB NUMBER
         CH    R1,HIGHJOB          SEE IF END OF RANGE
         BNH   JQESCAN1            NO, LOOP
         L     R1,LASTRNG          LOAD ADDRESS OF LAST RANGE ENTRY
         LA    R1,6(R1)            INCREMENT TO NEXT ENTRY
         ST    R1,LASTRNG          AND SAVE ADDRESS OF THIS ENTRY
         CLI   0(R1),X'FF'         SEE IF END OF RANGES
         BE    NEXTJQE1            YES, END OF PROCESSING
         MVC   LASTYPE,0(R1)       SAVE JOB TYPE
         MVC   LOWJOB,2(R1)        SAVE LOW JOB
         MVC   HIGHJOB,4(R1)       SAVE HIGH JOB
         B     JQESCAN1            GO PROCESS THIS RANGE
NEXTJQE1 TM    MISCSW1,FOUND       SEE IF ANY JOBS FOUND
         BO    EXIT8               YES, GET OUT
         MVC   COMMAND(L'MSG2),MSG2 SET NO JOBS FOUND MESSAGE
         LA    R0,L'MSG2           SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
         EJECT
***********************************************************************
*                                                                     *
*        BUILD BASIC PORTION OF MESSAGE                               *
*                                                                     *
***********************************************************************
JQEFND   OI    MISCSW1,FOUND       TURN ON JOB FOUND INDICATOR
         MVI   COMMAND,C' '        BLANK ENTIRE
         MVC   COMMAND+1(199),COMMAND  COMMAND
         LH    R1,LOWJOB           LOAD JOB NUMBER
         MVC   COMMAND(3),=C'JOB'  ASSUME BATCH JOB
         TM    JQEFLAG3,JQE3JOB    IS IT A BATCH JOB
         BZ    JQEFND01            YES, BRANCH
         MVC   COMMAND(3),=C'STC'  ASSUME STARTED TASK
         TM    JQEFLAG3,JQE3STC    IS IT A STC
         BO    JQEFND01            YES, BRANCH
         MVC   COMMAND(3),=C'TSU'  MUST BE A TSO USER
JQEFND01 CVD   R1,DOUBLE           CONVERT JOB NUMBER TO PACKED
         MVC   DBL(6),=X'402020202120' SET EDIT MASK
         ED    DBL(6),DOUBLE+5     EDIT JOB NUMBER
         MVC   COMMAND+3(5),DBL+1  MOVE JOB NUMBER TO MESSAGE
         MVC   COMMAND+9(8),JQEJNAME MOVE JOB NAME TO MESSAGE
         TM    JQEXFLG2,JQEXUHLD   USER HOLD?
         BNO   NOHLD               NO. JQE NOT ON USER HOLD
         $QSUSE ,
         NI    JQEXFLG2,255-JQEXUHLD TURN OFF THE BIT
         $POST $HASPECF,(JOB,CNVT,HOPE,PURGE),MASPOST=YES
         LR     R1,R9
         $CKPT  ID=JQE,ADDR=(R1)                SET CHECKPOINT
*
* UPDATE THE JCT VIA EXIT 7 JCT READ/WRITE EXIT
*
         $JCTIO TYPE=READ,JQE=(R9) BRING IN THE JCT FOR THIS JQE
         LR    R3,R1               PUT ADDRESS OF BUFFER IN R3
         $JCTIO TYPE=WRITE,JQE=(R9),JCTBUF=(R3),FREE=YES REWRITE JCT
         MVC   COMMAND+18(L'MSG4),MSG4
         LA    R0,LMSG4
         $CWTO L=(R0),JOB=NO,MSGID=903
         B     NEXTJQE             GO GET ANOTHER ONE
NOHLD    DS    0H
         MVC   COMMAND+18(L'MSG5),MSG5
         LA    R0,LMSG5
         $CWTO L=(R0),JOB=NO,MSGID=904
         B     NEXTJQE
         EJECT
*****************************************************************
*                                                               *
*        SUBROUTINE TO VERIFY CONSOLE/AREA                      *
*                                                               *
*****************************************************************
         SPACE 1
MSGVCCA  TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM
         BOR   R4                  YES, UCM AND AREA ARE OK
         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA
         USING CWA,R2              SET ADDRESSABILITY TO CWA
         MVC   XASCID(1),COMUCM    SET UCM ID
         MVC   XASDID(1),COMUCMA   SET AREA ID
         CLI   XASDID,0            SEE IF AREA ID SPECIFIED
         BNZ   MSGSSAOP            YES, BRANCH
         MVI   XASDID,C'Z'         NO,  FORCE AREA Z
MSGSSAOP MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT
         MVI   XAN,X'22'           SET ID FOR VERIFIER
         MODESET EXTKEY=ZERO       GET KEY 0
         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE
         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24
         BALR  R14,R15             ENTER IT
         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE
         MODESET EXTKEY=HASP       RETURN TO KEY 1
         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR
         BNHR  R4                  NO, RETURN TO CALLER
         SLR   R3,R3               CLEAR REGISTER FOR ICM
         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID
         MVI   COMUCMA,0           FORCE NO DISPLAY AREA
         CH    R15,=H'12'          SEE IF CONSOLE DOWN
         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE
         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO
         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD
         $CWTO L=L'CMBMSG,MSGID=908 ECHO THE COMMAND
         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT
         STC   R3,MBVINVA          SET AREA
         SRL   R3,8                ALIGN CONSOLE ID
         CVD   R3,$DOUBLE          CONVERT TO PACKED
         MVC   DBL(4),=X'F0212020' SET EDIT MASK
         ED    DBL(4),$DOUBLE+6    EDIT CONSOLE ID TO AREA
         MVC   MBVINVC,DBL+2       MOVE CONSOLE ID TO MESSAGE
         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER
         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE
         B     EXIT8               GET OUT
         DROP  R2                  DROP ADDRESSABILITY TO CWA
         EJECT
*****************************************************************
*                                                               *
*       R E D I R E C T   R O U T I N E   C O N S T A N T S     *
*                                                               *
*****************************************************************
         SPACE 1
MOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX
MBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '
MBVINVL  EQU   *-MBVINV
MBVINVC  EQU   COMMAND+MBVINVL-16,2
MBVINVA  EQU   MBVINVC+2,1
FBLFLG   EQU   COMEWORK+2          FLAG BYTE
COMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER
FBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM
FBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED
FBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED
         EJECT
***********************************************************************
*        CONSTANTS FOR $UA                                            *
***********************************************************************
         SPACE 3
BLANKS   DC    CL20' '             STRING OF 20 BLANKS
         SPACE 3
MSG1     DC    C'MORE THAN 50 JOBS OR RANGES SPECIFIED'
MSG2     DC    CL16'JOB(S) NOT FOUND'
MSG3     DC    C' INVALID OPERAND'
MSG4     DC    C' RELEASED FROM USER HOLD'
LMSG4    EQU   *-MSG4+18
MSG5     DC    C' NOT ON USER HOLD'
LMSG5    EQU   *-MSG5+18
         SPACE 3
DEVNTBL  DS    0F                  DEVICE NAME TABLE
         DC    AL1(5),CL7'INTRDR'
         DC    AL1(5),CL7'READER'
         DC    AL1(5),CL7'PRINTR'
         DC    AL1(4),CL7'PUNCH'
         DC    AL1(1),CL7'JT'
         DC    AL1(1),CL7'JR'
         DC    AL1(1),CL7'ST'
         DC    AL1(1),CL7'SR'
         DC    AL1(2),CL7'RMT'
         DC    AL1(2),CL7'RDR'
         DC    AL1(2),CL7'PRT'
         DC    AL1(2),CL7'PUN'
         EJECT
***********************************************************************
*                                                                     *
*        INVALID $UA OPERAND                                          *
*                                                                     *
***********************************************************************
         SPACE 1
BADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND
         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG
         MVC   COMMAND+9(L'MSG3),MSG3 SET ERROR MESSAGE
         LA    R0,L'MSG3+9         SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
         EJECT
***********************************************************************
*                                                                     *
*                    E X I T     R O U T I N E S                      *
*                                                                     *
*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *
*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *
*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *
*        RC = 12 - TERMINATE ISSUING THE "OK" MESSAGE                 *
*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *
*                                                                     *
***********************************************************************
EXIT0    LA    R15,0               SET RETURN CODE TO 0
         $RETURN RC=(R15)          RETURN TO JES2
EXIT8    $FREEBUF (R8)             FREE THE WORK AREA
         LA    R15,8               SET RETURN CODE TO 8
         $RETURN RC=(R15)          RETURN TO JES2
         EJECT
         LTORG
         EJECT
         $MODEND
         END
