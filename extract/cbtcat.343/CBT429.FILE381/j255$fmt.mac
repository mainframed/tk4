         TITLE 'JES2 JQE FORMAT ROUTINE'
***********************************************************************
*                                                                     *
*        ENVIRONMENT   MVS SP 2.2.0                                   *
*                                                                     *
*        THIS JES2 EXIT PROGRAM IS DESIGNED TO RUN AS AN EXIT TO      *
*        AN EXIT5 ROUTINE WHENEVER A JOB IS TO BE DISPLAYED ON THE    *
*        CONSOLE.  THIS EXIT WILL SELECT/REJECT THE REQUESTED JOB     *
*        ON THE BASIS OF AN INPUT PARAMETER LIST PASSED IN REGISTER   *
*        1.  THE INPUT PARAMETER LIST IS MAPPED BY THE USER MACRO     *
*        $FCSFMTP.                                                    *
*                                                                     *
*        INPUT TO THIS EXIT IS AS FOLLOWS:                            *
*                                                                     *
*        R1  - ADDRESS OF THE INPUT PARM LIST                         *
*        R9  - ADDRESS OF THE JQE                                     *
*        R10 - ADDRESS OF A JES2 BUFFER FOR A WORK AREA               *
*        R11 - ADDRESS OF THE HCT                                     *
*        R13 - ADDRESS OF THE HASPCOMM PCE                            *
*        R14 - RETURN ADDRESS                                         *
*        R15 - ENTRY ADDRESS                                          *
*                                                                     *
*                                                                     *
*        NOTE                                                         *
*                                                                     *
*        WRITTEN BY:                                                  *
*                        JOHN V. HOOPER                               *
*                        FIRST UNION NATIONAL BANK                    *
*                        301 SOUTH TRYON STREET                       *
*                        CHARLOTTE, N.C.  28288                       *
*                        (704) 374-2427                               *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *
*                                                                     *
*        1)  THE HASP908 MESSAGE WILL BE ISSUED FOR EACH JOB          *
*            WHICH IS DISPLAYED.                                      *
*                                                                     *
*        $HASP908 JOBNAME  EXECUTING C PRIO XX SSSS                   *
*                                                                     *
*        $HASP908 JOBNAME  ON PRINTRXX PRIO XX SSSS                   *
*                                                                     *
*        $HASP908 JOBNAME  WAIT EXEC X PRIO XX SSSS                   *
*                                                                     *
*                                                                     *
*                                                                     *
*        $HASP999 LIST INCOMPLETE                                     *
*                                                                     *
*        DURING WTO PROCESSING A BUFFER SHORTAGE WAS DETECTED, SO     *
*        $QN PROCESSING WILL BE TERMINATED TO PREVENT FURTHER         *
*        BUFFER SHORTAGES.                                            *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*              M A C R O S   U S E D   I N   J 2 5 5 $ F M T          *
*                                                                     *
*        01)  $BUFFER      SYS1.HASPSRC                               *
*        02)  $CAT         SYS1.HASPSRC                               *
*        03)  $CMB         SYS1.HASPSRC                               *
*        04)  $COMWORK     SYS1.HASPSRC                               *
*        05)  $CWTO        SYS1.HASPSRC                               *
*        06)  $DAS         SYS1.HASPSRC                               *
*        07)  $DCT         SYS1.HASPSRC                               *
*        08)  $ENTRY       SYS1.HASPSRC                               *
*        09)  $FCSFMTP     SYS1.HASPSRC (USER)                        *
*        10)  $HASPEQU     SYS1.HASPSRC                               *
*        11)  $HASPGBL     SYS1.HASPSRC                               *
*        12)  $HCT         SYS1.HASPSRC                               *
*        13)  $IOT         SYS1.HASPSRC                               *
*        14)  $JCT         SYS1.HASPSRC                               *
*        15)  $JOE         SYS1.HASPSRC                               *
*        16)  $JQE         SYS1.HASPSRC                               *
*        17)  $LCK         SYS1.HASPSRC                               *
*        18)  $MIT         SYS1.HASPSRC                               *
*        19)  $MODEND      SYS1.HASPSRC                               *
*        20)  $MODULE      SYS1.HASPSRC                               *
*        21)  $PADDR       SYS1.HASPSRC                               *
*        22)  $PCE         SYS1.HASPSRC                               *
*        23)  $QSE         SYS1.HASPSRC                               *
*        24)  $RESTABL     SYS1.HASPSRC (USER)                        *
*        25)  $RETURN      SYS1.HASPSRC                               *
*        26)  $SAVE        SYS1.HASPSRC                               *
*        27)  $TAB         SYS1.HASPSRC                               *
*        28)  IAZRESPA     SYS1.AMODGEN                               *
*        29)  IFGRPL       SYS1.MACLIB                                *
*                                                                     *
*                                                                     *
*              L I N K A G E    E D I T O R    I N F O                *
*                                                                     *
*        SIZE:       4K                                               *
*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *
*                                                                     *
*                                                                     *
***********************************************************************
        PRINT OFF
***********************************************************************
*                                                                     *
*        THIS EXIT CAN ALSO OPTIONALLY FORMAT THE ESOTERIC            *
*        RESOURCE ROUTINE NAMES ATTACHED TO A JOB.  THIS IS           *
*        ENABLED BY SETTING THE FOLLOWING LOCAL ASSEMBLER             *
*        VARIABLE TO 'YES'.  IF THIS FACILITY IS NOT DESIRED,         *
*        SET THE VARIABLE TO 'NO'.                                    *
*                                                                     *
***********************************************************************
         LCLC  &RESRCE
&RESRCE  SETC  'YES'               ENABLE THE LISTING OF RESOURCE NAMES
         PRINT ON
         EJECT
         COPY  $HASPGBL
J255$FMT $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X
               ENVIRON=JES2,                                           X
               TITLE='JES2 JQE FORMAT ROUTINE',                        X
               $BUFFER,            GENERATE HASP BUFFER DSECT          X
               $CAT,               GENERATE HASP CAT DSECT             X
               $CMB,               GENERATE HASP CMB DSECT             X
               $COMWORK,           GENERATE HASP COMWORK DSECT         X
               $DAS,               GENERATE HASP DAS DSECT             X
               $DCT,               GENERATE HASP DCT DSECT             X
               $HASPEQU,           GENERATE HASP EQUATES               X
               $HCT,               GENERATE HASP HCT DSECT             X
               $IOT,               GENERATE HASP IOT DSECT             X
               $JCT,               GENERATE HASP JCT DSECT             X
               $JOE,               GENERATE HASP JOE DSECT             X
               $JQE,               GENERATE HASP JQE DSECT             X
               $LCK,               GENERATE HASP LCK DSECT             X
               $MIT,               GENERATE HASP MIT DSECT             X
               $PADDR,             GENERATE HASP PADDR DSECT           X
               $PCE,               GENERATE HASP PCE DSECT             X
               $PDDB,              GENERATE HASP PDDB DSECT            X
               $QSE,               GENERATE HASP QSE DSECT             X
               $TAB,               GENERATE HASP TAB DSECT             X
               RESPA,              GENERATE MVS  RESPA DSECT           X
               RPL                 GENERATE MVS  IFGRPL DSECT
         EJECT
***********************************************************************
*                                                                     *
*        PARM LIST FROM CALLING EXIT PROGRAM                          *
*                                                                     *
***********************************************************************
$FMTPARM DSECT
         $FCSFMTP ,                MAP THE INPUT PARM LIST
         EJECT
***********************************************************************
*                                                                     *
*        PROGRAM WORK AREAS                                           *
*                                                                     *
***********************************************************************
$FMTWORK DSECT
         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****
ROUTCDE  DS    F                   DESTINATION CODE FOR SETDEST ROUTINE
SAVEBAS  DS    CL18                MSG SAVE AREA FOR JOB NBR AND NAME
LTEXT    DS    H                   CURRENT LENGTH OF MESSAGE AREA
RC       DS    H                   $CWTO RETURN CODE
MISCSW1  DS    X                   MISCELLANEOUS SWITCHES
VOLHEAD  EQU   X'80'               SPOOL VOLUME HEADER MSG PROCESSED
MSG      EQU   X'40'               MESSAGE FOR JOB HAS BEEN WRITTEN
DEVNO    DS    H                   NUMBER OF ACTIVE DEVICES
DOUBLE   DS    D                   DOUBLE WORD WORK AREA
DBL      DS    D                   DOUBLE WORD WORK AREA
SAVEAFF  DS    16F                 REGISTER SAVE FOR SETAFF  ROUTINE
SAVEOWN  DS    16F                 REGISTER SAVE FOR SETOWN  ROUTINE
SAVERES  DS    16F                 REGISTER SAVE FOR SETRES  ROUTINE
SAVESPL  DS    16F                 REGISTER SAVE FOR SETSPL  ROUTINE
SAVEBLD  DS    16F                 REGISTER SAVE FOR BLDACT  ROUTINE
SAVEPUT  DS    16F                 REGISTER SAVE FOR PUTMSG  ROUTINE
DEVTBL   DS    50XL4               ACTIVE DEVICE TABLE
         SPACE 3
J255$FMT CSECT ,                   RESTORE THE CSECT ENVIRONMENT
         TITLE 'JES2 JQE FORMAT ROUTINE'
***********************************************************************
*                                                                     *
*        EXIT MAIN ENTRY POINT                                        *
*                                                                     *
***********************************************************************
E255$FMT $ENTRY BASE=(R12,R8)
         SPACE 1
         $SAVE                     SAVE CALLER'S REGISTERS
         LR    R12,R15             LOAD FIRST BASE REGISTER
         LA    R8,4095(R12)        LOAD SECOND
         LA    R8,1(R8)                 BASE REGISTER
         LR    R7,R1               SAVE ADDRESS OF INPUT PARM LIST
         USING $FMTPARM,R7         SET ADDRESSABILITY TO INPUT PARM
         USING $FMTWORK,R10        SET ADDRESSABILITY TO WORK AREA
         USING JQE,R9              SET ADDRESSABILITY TO JQE
         SPACE 3
***********************************************************************
*                                                                     *
*        CLEAR INPUT WORK AREA                                        *
*                                                                     *
***********************************************************************
         SPACE 1
         LA    R14,$FMTWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS
         LH    R15,$BUFSIZE        SET   'TO'   LENGTH
         SLR   R0,R0               CLEAR 'FROM' ADDRESS
         SLR   R1,R1               CLEAR 'FROM' LENGTH
         MVCL  R14,R0              CLEAR THE BUFFER
         SPACE 3
***********************************************************************
*                                                                     *
*        BUILD BASIC PORTION OF MESSAGE                               *
*                                                                     *
***********************************************************************
JQEFND   MVI   COMMAND,C' '        BLANK ENTIRE
         MVC   COMMAND+1(199),COMMAND  COMMAND
         MVC   COMMAND+201(200),COMMAND+200  AREA
         LH    R1,JQEJOBNO         LOAD JOB NUMBER
         MVC   COMMAND(3),=C'JOB'  ASSUME BATCH JOB
         TM    JQEFLAG3,JQE3JOB    IS IT A BATCH JOB
         BZ    JQEFND01            YES, BRANCH
         MVC   COMMAND(3),=C'STC'  ASSUME STARTED TASK
         TM    JQEFLAG3,JQE3STC    IS IT A STC
         BO    JQEFND01            YES, BRANCH
         MVC   COMMAND(3),=C'TSU'  MUST BE A TSO USER
JQEFND01 CVD   R1,DOUBLE           CONVERT JOB NUMBER TO PACKED
         MVC   DBL(6),=X'402020202120' SET EDIT MASK
         ED    DBL(6),DOUBLE+5     EDIT JOB NUMBER
         MVC   COMMAND+3(5),DBL+1  MOVE JOB NUMBER TO MESSAGE
         MVC   COMMAND+9(8),JQEJNAME MOVE JOB NAME TO MESSAGE
         MVC   SAVEBAS,COMMAND     SAVE FIRST 18 CHARACTERS OF MSG
         LA    R15,18              LOAD LENGTH OF BASE TEXT
         STH   R15,LTEXT           SAVE LENGTH
***********************************************************************
*                                                                     *
*        CHECK FOR SELECTION BY JOB ORIENTED SELECTION                *
*        CRITERIA                                                     *
*                                                                     *
***********************************************************************
CKJQE    TM    QMISC+L'INDONLY,INDONLY WANT ONLY INDEPENDENT JOBS?
         BZ    CKJQE1              NO, BRANCH
         TM    JQEFLAG2,JQE2IND    SEE IF IN 'IND' MODE
         BZ    GOBACK              NO, BYPASS THIS JOB
CKJQE1   TM    QMISC+L'SELVOL,SELVOL SELECTING BY SPOOL VOLUME?
         BZ    CKJQE2              NO, BRANCH
         XC    $SPMSKWA,$SPMSKWA   ZERO THE SPOOL MASK WORK AREA
         LH    R1,$JQEMSKL         GET MACHINE LENGTH OF JQE SPOOL MASK
         EX    R1,MVOLMASK         MOVE JQE VOLUME MASK TO WORK AREA
         EX    R1,OVOLMASK         'OR' JQE MASK WITH OUR MASK
         EX    R1,CJQESPM1         SEE IF STAYED THE SAME
         BNE   GOBACK              NO, BYPASS THIS JOB
CKJQE2   TM    QBITS+L'QHOLD,QHOLD SEE IF WANT HOLD QUEUE ONLY
         BZ    CKJQE3              NO, BRANCH
         TM    JQEFLAG1,JQE1HLD1   SEE IF OPERATOR HOLD
         BNO   GOBACK              NO, BYPASS THIS JOB
CKJQE3   CLI   QFILT1,0            SEE IF JOB TYPE FILTER FLAGS ON
         BE    CKJQE4              NO, BRANCH
         TM    QFILT1,QTEST        SEE IF WANT ONLY TEST JOB
         BNO   CKJQE3A             NO, BRANCH
         TM    JQEXFLG1,JQEXTEST   SEE IF TEST JOB
         BNO   GOBACK              NO, BYPASS THIS JOB
         B     CKJQE4              YES, GO SEE IF OTHER FILTERS
CKJQE3A  TM    JQEXFLG1,JQEXPROD   SEE IF PRODUCTION JOB
         BNO   GOBACK              NO, BYPASS THIS JOB
CKJQE4   CLI   QFILT2,0            SEE IF FILTERS ON
         BE    CKJQE5              NO, BRANCH
         TM    QFILT2,QOHOLD+QUHOLD+QSETUP SEE IF ANY HOLD BITS ON
         BZ    CKJQE4D             NO, BRANCH
         TM    QFILT2,QOHOLD       SEE IF WANT OPERATOR HOLD
         BNO   CKJQE4A             NO, BRANCH
         TM    JQEFLAG1,JQE1HLD1   SEE IF ON OPERATOR HOLD
         BO    CKJQE4D             YES, PASS THIS CHECK
CKJQE4A  TM    QFILT2,QUHOLD       SEE IF WANT USER HOLD
         BNO   CKJQE4B             NO, BRANCH
         TM    JQEXFLG2,JQEXUHLD   SEE IF ON OPERATOR HOLD
         BO    CKJQE4D             YES, PASS THIS CHECK
CKJQE4B  TM    QFILT2,QSETUP       SEE IF WANT SETUP HOLD
         BNO   CKJQE4C             NO, BRANCH
         TM    JQEXFLG2,JQEXWSET   SEE IF ON WAITING FOR SETUP
         BO    CKJQE4D             YES, PASS THIS CHECK
CKJQE4C  B     GOBACK              NO,  NO HOLD BITS ON, BYPASS
CKJQE4D  TM    QFILT2,QABEND+QJCLERR SEE IF ANY FAIL BITS ON
         BZ    CKJQE5              NO, BRANCH
CKJQE4E  TM    QFILT2,QABEND       SEE IF WANT ABENDED JOBS
         BNO   CKJQE4F             NO, BRANCH
         TM    JQEXFLG3,JQEXABND   SEE IF ABENDED
         BO    CKJQE5              YES, PASS THIS CHECK
CKJQE4F  TM    QFILT2,QJCLERR      SEE IF WANT JCL ERROR JOBS
         BNO   CKJQE4G             NO, BRANCH
         TM    JQEXFLG3,JQEXJCLE   SEE IF ABENDED
         BO    CKJQE5              YES, PASS THIS CHECK
CKJQE4G  B     GOBACK              NO,  NO FAIL BITS ON, BYPASS
CKJQE5   CLI   OWNERID,C' '        SEE IF OWNERID SPECIFIED
         BNH   CKJQE6              NO, BRANCH
         CLC   JQEXOWNR,OWNERID    SEE IF OWNERID MATCHES
         BNE   GOBACK              NO, BYPASS THIS JOB
CKJQE6   B     CKCONV              GO PROCESS THIS JOB
MVOLMASK MVC   $SPMSKWA(0),JQESUMSK **** EXECUTE ONLY ****
OVOLMASK NC    $SPMSKWA(0),VOLMASK  **** EXECUTE ONLY ****
CVOLMASK CLC   $SPMSKWA(0),VOLMASK  **** EXECUTE ONLY ****
***********************************************************************
*                                                                     *
*        SEE IF JOB IS IN THE CONVERSION/EXECUTION QUEUE              *
*                                                                     *
***********************************************************************
CKCONV   TM    JQETYPE,$XEQ        SEE IF CONVERSION/EXECUTION QUEUE
         BZ    CKXMIT              NO, GO CHECK JOB TRANSMITTER
         TM    JQEFLAG1,JQE1BUSY   SEE IF JOB BUSY
         BZ    CKCONV1             NO, BRANCH
         TM    JQEDEVID,DCTXFRID+DCTNJTID IS JOB ON JOB TRANSMITTER
         BO    CKJOES              YES, GO PROCESS JOE CHAIN
CKCONV1  CLI   JQETYPE,$XEQ        SEE IF ON CONVERSION QUEUE
         BNE   CKXEQ               NO, GO CHECK EXECUTION QUEUE
         TM    QBITS+L'QCNV,QCNV   DO WE WANT JOBS IN CONVERSION
         BNO   CKXEQ               NO, GO CHECK EXECUTION QUEUE
***********************************************************************
*        JOB IS IN THE CONVERSION QUEUE                               *
***********************************************************************
         CLI   QCLASS,X'40'        SEE IF SELECTING BY CLASS
         BNH   CKCONV3             NO, BRANCH
         MVI   DBL,CATSTCID        ASSUME STC
         CLI   JQEJCLAS,CATSTCCL   SEE IF STC
         BE    CKCONV2             YES, BRANCH
         MVI   DBL,CATTSUID        ASSUME TSO USER
         CLI   JQEJCLAS,CATTSUCL   SEE IF TSO USER
         BE    CKCONV2             YES, BRANCH
         MVC   DBL(1),JQEJCLAS     SET BATCH JOB CLASS
CKCONV2  CLC   DBL(1),QCLASS       SEE IF MATCH ON CLASS
         BNE   GOBACK              NO, GO PROCESS NEXT JQE
CKCONV3  TM    JQEFLAG1,JQE1BUSY   SEE IF JOB BUSY
         BNO   CKCONV4             NO, BRANCH
         LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         MVC   0(10,R15),=C'CONVERTING' SET QUEUE TYPE
         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,11(R15)         POINT PAST OUR TEXT
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         B     CKCONV5             GO FILL IN REST OF MESSAGE
CKCONV4  LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         MVC   0(9,R15),=C'WAIT CONV' SET QUEUE TYPE
         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,10(R15)         POINT PAST OUR TEXT
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
CKCONV5  BAL   R14,SETCL           GO MOVE CLASS TO MESSAGE
         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,1(R15)          ADD 1 MORE SPACE
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         BAL   R14,CKQDEST         GO CHECK JOB DESTINATION CODES
         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE
         BAL   R14,CKSAFF          GO CHECK SYSTEM AFFINITY
         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE
         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE
         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG
         BAL   R14,SETAFF          GO MOVE SYSTEM AFFINITY TO MESSAGE
         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION
         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         BZ    GOBACK              GOOD, GO PROCESS THE NEXT JQE
         B     INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT
***********************************************************************
*        JOB IS IN THE EXECUTION QUEUE                                *
***********************************************************************
CKXEQ    LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         TM    JQEFLAG1,JQE1BUSY   SEE IF JOB BUSY
         BZ    CKXEQ2              NO, BRANCH
         TM    QBITS+L'QACT,QACT   DO WE WANT ACTIVE JOBS
         BNO   CKXEQ1              NO, GO SEE IF SPIN DATA SETS
         MVC   0(9,R15),=C'EXECUTING'  SET QUEUE TYPE
         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,10(R15)         POINT PAST OUR TEXT
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         BAL   R14,SETCL           GO MOVE CLASS TO MESSAGE
         BAL   R14,CKQDEST         GO CHECK JOB DESTINATION CODES
         BNE   CKXEQ1              NO MATCH, IGNORE THIS MESSAGE
         BAL   R14,CKSAFF          GO CHECK SYSTEM AFFINITY
         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE
         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE
         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG
         BAL   R14,SETUATTR        GO MOVE SPECIAL USER CONTROL TO MSG
         IC    R1,JQEFLAG1         LOAD ACTIVE BIT
         BAL   R14,SETACTS         GO MOVE ACTIVE SYSTEM ID TO MESSAGE
         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION
         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         BNZ   INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT
CKXEQ1   CLC   JQEJOEB,$ZEROS      ANY SPIN DATA SETS YET
         BE    GOBACK              NO, GO PROCESS NEXT JQE
         B     CKJOES              YES, GO SEARCH JOES
CKXEQ2   TM    QBITS+L'QXEQ,QXEQ   DO WE WANT JOBS AWAITING EXECUTION
         BNO   GOBACK              NO, BYPASS THIS JOB
         CLI   QCLASS,X'40'        SEE IF SELECTING BY CLASS
         BNH   CKXEQ4              NO, BRANCH
         MVI   DBL,CATSTCID        ASSUME STC
         CLI   JQEJCLAS,CATSTCCL   SEE IF STC
         BE    CKXEQ3              YES, BRANCH
         MVI   DBL,CATTSUID        ASSUME TSO USER
         CLI   JQEJCLAS,CATTSUCL   SEE IF TSO USER
         BE    CKXEQ3              YES, BRANCH
         MVC   DBL(1),JQEJCLAS     SET BATCH JOB CLASS
CKXEQ3   CLC   DBL(1),QCLASS       SEE IF MATCH ON CLASS
         BNE   GOBACK              NO, GO PROCESS NEXT JQE
CKXEQ4   MVC   0(9,R15),=C'WAIT EXEC' SET QUEUE TYPE
         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,10(R15)         POINT PAST OUR TEXT
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         BAL   R14,SETCL           GO MOVE CLASS TO MESSAGE
         BAL   R14,CKQDEST         GO CHECK JOB DESTINATION CODES
         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE
         BAL   R14,CKSAFF          GO CHECK SYSTEM AFFINITY
         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE
         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE
         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG
         BAL   R14,SETUATTR        GO MOVE SPECIAL USER CONTROL TO MSG
         BAL   R14,SETAFF          GO MOVE SYSTEM AFFINITY TO MESSAGE
         BAL   R14,SETRES          GO MOVE RESOURCE NAMES TO MESSAGE
         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION
         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         BZ    GOBACK              GOOD, GO PROCESS THE NEXT JQE
         B     INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT
         EJECT
***********************************************************************
*        JOB IS ON THE TRANSMISSION QUEUE                             *
***********************************************************************
CKXMIT   CLI   JQETYPE,$XMIT       SEE IF JOB ON THE XMIT QUEUE
         BNE   CKJOES              NO, GO SEARCH JOES
         TM    QBITS+L'QXMT,QXMT   DO WE WANT JOBS IN TRANSMISSION QUE
         BNO   GOBACK              NO, BYPASS THIS JOB
         TM    QMISC+L'XMTDEST,XMTDEST SELECTING BY NODE NUMBER?
         BZ    CKXMIT1             NO, BRANCH
         CLC   LOWXDEST(2),JQEXEQND SEE IF CORRECT NODE NUMBER
         BL    GOBACK              NO, BYPASS THIS JOB
         CLC   HIXDEST(2),JQEXEQND SEE IF CORRECT NODE NUMBER
         BH    GOBACK              NO, BYPASS THIS JOB
***********************************************************************
*        JOB IS ON THE TRANSMISSION QUEUE                             *
***********************************************************************
CKXMIT1  TM    JQEFLAG1,JQE1BUSY   SEE IF JOB BUSY
         BNZ   CKJOES              YES, GO SEARCH JOES
         LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         MVC   0(9,R15),=C'WAIT XMIT' SET QUEUE TYPE
         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,10(R15)         POINT PAST OUR TEXT
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         SLR   R1,R1               CLEAR REG FOR ICM
         ICM   R1,B'1100',JQEXEQND LOAD NODE NUMBER
         BAL   R14,SETDEST         GET DEST NAME FOR ROUTE CODE
         BAL   R14,CKQDEST         GO CHECK JOB DESTINATION CODES
         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE
         BAL   R14,CKSAFF          GO CHECK SYSTEM AFFINITY
         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE
         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE
         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG
         IC    R1,JQEFLAG1         LOAD ACTIVE BIT
         BAL   R14,SETACTS         GO MOVE ACTIVE SYSTEM ID TO MESSAGE
         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION
         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         BZ    GOBACK              GOOD, GO PROCESS THE NEXT JQE
         B     INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT
         EJECT
***********************************************************************
*                                                                     *
*        SEE IF JOB HAS ANY ACTIVE JOES                               *
*                                                                     *
***********************************************************************
CKJOES   TM    QBITS+L'QDEV,QDEV   DO WE WANT DEVICE ACTIVITY
         BNO   CKOUT               NO, GO CHECK OUTPUT QUEUE
         BAL   R14,BLDACT          GO BUILD TBL OF ACTIVE OUTPUT
         LH    R15,DEVNO           LOAD NUMBER OF ENTRIES IN THE TABLE
         LTR   R15,R15             TEST NUMBER OF DEVICES
         BZ    CKOUT               NONE, GO CHECK OUTPUT QUEUE
         LA    R2,DEVTBL           LOAD START ADDRESS OF TABLE
CKJOES00 LH    R15,DEVNO           LOAD NUMBER OF ENTRIES LEFT IN TBL
         LTR   R15,R15             TEST NUMBER OF DEVICES
         BZ    GOBACK              NONE, GO GET NEXT JQE
         BCTR  R15,0               REDUCE DEVICE COUNT BY 1
         STH   R15,DEVNO           SAVE NEW DEVICE COUNT
CKJOES01 MVI   COMMAND,C' '        BLANK ENTIRE
         MVC   COMMAND+1(199),COMMAND  COMMAND
         MVC   COMMAND+201(200),COMMAND+200  AREA
         MVC   COMMAND(18),SAVEBAS RESTORE JOB NAME AND NUMBER
         MVC   LTEXT,=H'18'        RESET MESSAGE LENGTH
         LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         MVC   0(2,R15),=C'ON'     SET 'ON' MESSAGE
         LA    R15,3(R15)          INCREMENT PAST THIS TEXT
CKJOES02 TM    1(R2),DCTRMTID+DCTNJTID SEE IF NJE OR RJE
         BNZ   CKJOES03            YES, BRANCH
         CLI   1(R2),X'0F'         SEE IF 'PSO'
         BE    CKJOES10            YES, BRANCH
         EJECT
***********************************************************************
*                                                                     *
*        DEVICE IS ONE OF THE FOLLOWING                               *
*                                                                     *
*        1)  INTRDR                                                   *
*        2)  READER*                                                  *
*        3)  PRINTR*                                                  *
*        4)  PUNCH*                                                   *
*                                                                     *
***********************************************************************
         SLR   R3,R3               CLEAR REG FOR IC
         IC    R3,1(R2)            LOAD DEVICE FLAGS
         SRL   R3,4                SHIFT OFF LOW 4 BITS
         SLL   R3,3                MULTIPLY BY 8 FOR OFFSET
         LA    R3,DEVNTBL(R3)      POINT TO DEVICE NAME
         SLR   R14,R14             CLEAR REG FOR IC
         IC    R14,0(R3)           LOAD LENGTH OF DEVICE NAME
         EX    R14,MVDEVNM1        MOVE DEVICE NAME TO MESSAGE
         LA    R15,1(R14,R15)      INCREMENT PAST DEVICE NAME
         SLR   R1,R1               CLEAR REG FOR ICM
         ICM   R1,B'0011',2(R2)    LOAD DEVICE NUMBER
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   1(3,R15),=X'202020' SET EDIT MASK
         EDMK  0(4,R15),DOUBLE+6   EDIT DEVICE NUMBER
         MVC   0(4,R15),0(R1)      POSITION DEVICE NUMBER
         B     CKJOES11            GET OUT OF DEVICE NAME ROUTINE
CKJOES03 TM    1(R2),DCTNJTID+DCTXFRID SEE IF TRANSFER DEVICE
         BNO   CKJOES04            NO, BRANCH
***********************************************************************
*                                                                     *
*        DEVICE IS ONE OF THE FOLLOWING                               *
*                                                                     *
*        1)  OFF*.JT                                                  *
*        2)  OFF*.JR                                                  *
*        3)  OFF*.ST                                                  *
*        4)  OFF*.SR                                                  *
*                                                                     *
***********************************************************************
         MVC   0(3,R15),=C'OFF'    SET DEVICE TYPE IN MESSAGE
         MVC   3(1,R15),3(R2)      MOVE DEVICE NUMBER TO MESSAGE
         OI    3(R15),X'F0'        MAKE PRINTABLE
         MVI   4(R15),C'.'         SET SEPARATOR
         SLR   R3,R3               CLEAR REG FOR IC
         IC    R3,1(R2)            LOAD DEVICE FLAGS
         SRL   R3,4                SHIFT OFF LOW 4 BITS
         SLL   R3,3                MULTIPLY BY 8 FOR OFFSET
         LA    R3,DEVNTBL(R3)      POINT TO DEVICE NAME
         SLR   R14,R14             CLEAR REG FOR IC
         IC    R14,0(R3)           LOAD LENGTH OF DEVICE NAME
         EX    R14,MVDEVNM2        MOVE DEVICE NAME TO MESSAGE
         B     CKJOES11            GET OUT OF DEVICE NAME ROUTINE
CKJOES04 TM    1(R2),DCTNJTID+DCTRTEID SEE IF ROUTE DEVICE
         BNO   CKJOES05            NO, BRANCH
***********************************************************************
*                                                                     *
*        DEVICE IS ONE OF THE FOLLOWING                               *
*                                                                     *
*        1)  ROUTE.RD*                                                *
*        2)  ROUTE.PR*                                                *
*        3)  ROUTE.PU*                                                *
*                                                                     *
***********************************************************************
         MVC   0(6,R15),=C'ROUTE.' SET DEVICE TYPE IN MESSAGE
         SLR   R3,R3               CLEAR REG FOR IC
         IC    R3,1(R2)            LOAD DEVICE FLAGS
         SRL   R3,4                SHIFT OFF LOW 4 BITS
         SLL   R3,3                MULTIPLY BY 8 FOR OFFSET
         LA    R3,DEVNTBL(R3)      POINT TO DEVICE NAME
         SLR   R14,R14             CLEAR REG FOR IC
         IC    R14,0(R3)           LOAD LENGTH OF DEVICE NAME
         EX    R14,MVDEVNM3        MOVE DEVICE NAME TO MESSAGE
         MVC   8(1,R15),1(R2)      MOVE DEVICE FLAGS TO MESSAGE
         OI    8(R15),X'F0'        MAKE DEVICE NUMBER PRINTABLE
         NI    8(R15),FF-DCTRTEID  TURN OFF FLAG BIT
         B     CKJOES11            GET OUT OF DEVICE NAME ROUTINE
***********************************************************************
*                                                                     *
*        DEVICE IS ONE OF THE FOLLOWING                               *
*                                                                     *
*        1)  L*.JT*                                                   *
*        2)  L*.JR*                                                   *
*        3)  L*.ST*                                                   *
*        4)  L*.SR*                                                   *
*        5)  R*.RD*                                                   *
*        6)  R*.PR*                                                   *
*        7)  R*.PU*                                                   *
*                                                                     *
***********************************************************************
CKJOES05 MVI   0(R15),C'L'         ASSUME NJE DEVICE
         TM    1(R2),DCTRMTID      SEE IF RJE DEVICE
         BZ    CKJOES06            NO, BRANCH
         MVI   0(R15),C'R'         SET TO RJE DEVICE
CKJOES06 LH    R1,2(R2)            LOAD REMOTE/LINE NUMBER
         CVD   R1,DOUBLE           CONVERT TO PACKED
         MVC   2(5,R15),=X'2020202020' SET EDIT MASK
         EDMK  1(6,R15),DOUBLE+5   EDIT REMOTE/LINE NUMBER
         MVC   1(5,R15),0(R1)      POSITION REMOTE/LINE NUMBER
CKJOES07 CLI   0(R15),C' '         END OF REMOTE/LINE NUMBER
         BE    CKJOES08            YES, BRANCH
         LA    R15,1(R15)          INCREMENT TO NEXT CHAR
         B     CKJOES07            LOOP
CKJOES08 LH    R1,2(R2)            LOAD REMOTE/LINE NUMBER
         CH    R1,=H'999'          SEE IF REMOTE NUMBER GT 999
         BH    CKJOES09            YES, BRANCH
         MVI   0(R15),C'.'         SET SEPARATOR IF NOT GT 999
         LA    R15,1(R15)          INCREMENT PAST '.'
CKJOES09 SLR   R3,R3               CLEAR REG FOR IC
         IC    R3,1(R2)            LOAD DEVICE FLAGS
         SRL   R3,4                SHIFT OFF LOW 4 BITS
         SLL   R3,3                MULTIPLY BY 8 FOR OFFSET
         LA    R3,DEVNTBL(R3)      POINT TO DEVICE NAME
         SLR   R14,R14             CLEAR REG FOR IC
         IC    R14,0(R3)           LOAD LENGTH OF DEVICE NAME
         EX    R14,MVDEVNM1        MOVE DEVICE NAME TO MESSAGE
         LA    R15,1(R14,R15)      INCREMENT PAST DEVICE NAME
         MVC   0(1,R15),1(R2)      MOVE DEVICE NUMBER TO MESSAGE
         OI    0(R15),X'F0'        MAKE PRINTABLE
         B     CKJOES11            GET OUT OF DEVICE NAME ROUTINE
***********************************************************************
*                                                                     *
*        DEVICE IS IN PROCESS SYSOUT MODE                             *
*                                                                     *
***********************************************************************
CKJOES10 MVC   0(8,R15),=C'PRSYSOUT' SET DEVICE NAME
         B     CKJOES11            GET OUT OF DEVICE NAME ROUTINE
MVDEVNM1 MVC   0(0,R15),1(R3)      *** EXECUTE ONLY ***
MVDEVNM2 MVC   5(0,R15),1(R3)      *** EXECUTE ONLY ***
MVDEVNM3 MVC   6(0,R15),1(R3)      *** EXECUTE ONLY ***
CKJOES11 LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,12(R15)         ADD LENGTH OF DEVICE NAME + 'ON'
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE
         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG
         IC    R1,0(R2)            LOAD ACTIVE BITS
         BAL   R14,SETACTS         GO MOVE ACTIVE SYSTEM ID TO MESSAGE
         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION
         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION
         LA    R2,4(R2)            INCREMENT TO NEXT DEVICE TBL ENTRY
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         BZ    CKJOES00            GOOD, GO PROCESS NEXT DEVICE FOR JOB
         B     INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT
         EJECT
CKOUT    TM    JQETYPE,$OUTPUT     SEE IF JOB IN OUTPUT QUEUE
         BNO   CKPRPU              NO, BRANCH
         TM    QBITS+L'QOUT,QOUT   DO WE WANT JOBS ON OUTPUT QUEUE
         BNO   CKPRPU              NO, BRANCH
***********************************************************************
*        JOB IS ON THE OUTPUT QUEUE                                   *
***********************************************************************
         LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         MVC   0(9,R15),=C'WAIT OUT ' ASSUME AWAITING
         TM    JQEFLAG1,JQE1BUSY   SEE IF JOB BUSY
         BZ    CKOUT01             NO, BRANCH
         MVC   0(4,R15),=C'  IN'   SET TO 'IN PROCESS'
CKOUT01  LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,10(R15)         ADD LENGTH OF OUR TEXT
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         BAL   R14,CKQDEST         GO CHECK JOB DESTINATION CODES
         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE
         BAL   R14,CKSAFF          GO CHECK SYSTEM AFFINITY
         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE
         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE
         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG
         BAL   R14,SETAFF          GO MOVE SYSTEM AFFINITY TO MESSAGE
         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION
         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         BZ    GOBACK              GOOD, GO PROCESS THE NEXT JQE
         B     INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT
         EJECT
CKPRPU   TM    JQETYPE,$HARDCPY    SEE IF JOB IN HARDCOPY QUEUE
         BNO   CKPURG              NO, BRANCH
         TM    QBITS+L'QPPU,QPPU   DO WE WANT JOBS ON PRINT/PUNCH QUEUE
         BNO   CKPURG              NO, BRANCH
***********************************************************************
*        JOB IS ON THE PRINT/PUNCH QUEUE                              *
***********************************************************************
         LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         MVC   0(3,R15),=C'PRT'    SET TITLE
         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,4(R15)          ADD LENGTH OF OUR TEXT
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         SLR   R1,R1               CLEAR REG FOR ICM
         ICM   R1,B'1111',JQEPRTRT LOAD PRINT ROUTE CODE
         BAL   R14,SETDEST         GET DEST NAME FOR ROUTE CODE
         LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         MVC   0(3,R15),=C'PUN'    SET TITLE
         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,4(R15)          ADD LENGTH OF OUR TEXT
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         SLR   R1,R1               CLEAR REG FOR ICM
         ICM   R1,B'1111',JQEPUNRT LOAD PRINT ROUTE CODE
         BAL   R14,SETDEST         GET DEST NAME FOR ROUTE CODE
         BAL   R14,CKQDEST         GO CHECK JOB DESTINATION CODES
         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE
         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE
         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG
         LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         MVC   0(3,R15),=C'ANY'    SET AFFINITY TO ANY
         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,4(R15)          ADD LENGTH OF OUR TEXT
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION
         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         BZ    GOBACK              GOOD, GO PROCESS THE NEXT JQE
         B     INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT
         EJECT
CKPURG   TM    JQETYPE,$PURGE      SEE IF JOB ON PURGE QUEUE
         BNO   GOBACK              NO, BRANCH
         TM    QBITS+L'QPUR,QPUR   DO WE WANT JOBS ON PURGE QUEUE
         BNO   GOBACK              NO, BYPASS THIS JOB
***********************************************************************
*        JOB IS ON THE PURGE QUEUE                                    *
***********************************************************************
         LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         MVC   0(9,R15),=C'WAIT PURG'  ASSUME AWAITING
         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,10(R15)         ADD LENGTH OF OUR TEXT
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         BAL   R14,CKQDEST         GO CHECK JOB DESTINATION CODES
         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE
         BAL   R14,CKSAFF          GO CHECK SYSTEM AFFINITY
         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE
         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE
         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG
         BAL   R14,SETAFF          GO MOVE SYSTEM AFFINITY TO MESSAGE
         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION
         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION
         BAL   R14,PUTMSG          GO WRITE MESSAGE
         BZ    GOBACK              GOOD, GO PROCESS THE NEXT JQE
         B     INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT
         EJECT
***********************************************************************
*                                                                     *
*        CHECK DESTINATION CODE IN JQE                                *
*                                                                     *
***********************************************************************
CKQDEST  TM    QMISC+L'SELDEST,SELDEST SELECTING BY DESTINATION?
         BNO   CKQDEST2            NO, BRANCH
         CLC   LOWDEST,JQEPRTRT    SEE IF IN OUR DESTINATION RANGE
         BL    CKQDEST1            NO, BRANCH
         CLC   HIDEST,JQEPRTRT     SEE IF IN OUR DESTINATION RANGE
         BNH   CKQDEST2            YES, SELECT THIS JQE
CKQDEST1 CLC   LOWDEST,JQEPUNRT    SEE IF IN OUR DESTINATION RANGE
         BL    CKQDEST3            NO, BRANCH
         CLC   HIDEST,JQEPUNRT     SEE IF IN OUR DESTINATION RANGE
         BH    CKQDEST3            NO, BYPASS THIS JQE
CKQDEST2 CR    R14,R14             SET RETURN CODE TO 'EQUAL'
CKQDEST3 BR    R14                 RETURN WITH RESIDUAL RETURN CODE
         EJECT
***********************************************************************
*                                                                     *
*        CHECK SYSTEM AFFINITY                                        *
*                                                                     *
***********************************************************************
CKSAFF   TM    QMISC+L'SYSALL,SYSALL ALL SYSTEM AFFINITIES OK?
         BO    CKSAFF2             YES, SELECT ALL JOBS
         TM    JQEFLAG2,JQE2SAF    SEE IF JOB HAS SYSTEM AFFINITY
         BO    CKSAFF2             NO, SELECT THIS JOB
         TM    QMISC+L'SYSANY,SYSANY WANT ONLY JOBS W/O AFFINITY?
         BO    CKSAFF3             YES, DO NOT SELECT THIS JOB
CKSAFF1  MVC   DBL(1),JQEFLAG2     SAVE AFFINITY FLAGS
         OC    DBL(1),SYSMASK      'OR' OUR SYSTEM AFFINITY MASK
         CLC   DBL(1),JQEFLAG2     SEE IF CHANGED
         BNE   CKSAFF3             YES, NOT OUR SYSTEM
CKSAFF2  CR    R14,R14             SET RETURN CODE TO 'EQUAL'
CKSAFF3  BR    R14                 RETURN WITH RESIDUAL RETURN CODE
         EJECT
***********************************************************************
*                                                                     *
*        MOVE EXECUTION CLASS TO MESSAGE                              *
*                                                                     *
***********************************************************************
SETCL    LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         MVI   0(R15),CATSTCID     ASSUME STC
         CLI   JQEJCLAS,CATSTCCL   SEE IF STC
         BE    SETCL1              YES, BRANCH
         MVI   0(R15),CATTSUID     ASSUME TSO USER
         CLI   JQEJCLAS,CATTSUCL   SEE IF TSO USER
         BE    SETCL1              YES, BRANCH
         MVC   0(1,R15),JQEJCLAS   SET BATCH JOB CLASS
SETCL1   LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,2(R15)          POINT PAST OUR TEXT
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        MOVE PRIORITY TO MESSAGE                                     *
*                                                                     *
***********************************************************************
SETPRIO  LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         MVC   0(4,R15),=C'PRIO'   SET TITLE
         MVC   DBL,=X'40202120'    SET EDIT MASK
         SLR   R0,R0               CLEAR REG FOR IC
         IC    R0,JQEPRIO          LOAD PRIORITY * 16 FROM JQE
         SRA   R0,4                DIVIDE BY 16
         CVD   R0,DOUBLE           CONVERT PRIORITY TO PACKED
         ED    DBL(4),DOUBLE+6     EDIT PRIORITY TO WORK AREA
         MVC   5(2,R15),DBL+2      MOVE PRIORITY TO MESSAGE
         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,8(R15)          POINT PAST OUR TEXT
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        MOVE SPECIAL ATTRIBUTES TO MESSAGE                           *
*                                                                     *
***********************************************************************
SETATT   LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         MVC   0(4,R15),=C'TEST'   ASSUME TEST
         CLI   JQEXFLG1,JQEXPROD   SEE IF PRODUCTION
         BNE   SETATT0             NO, LEAVE SET TO TEST
         MVC   0(4,R15),=C'PROD'   SET TO PRODUCTION
SETATT0  LA    R15,5(R15)          POINT PAST TEST/PROD INDICATOR
         TM    JQEXFLG2,JQEXWSET   IS JOB AWAITING SETUP
         BO    SETATT1             YES, BRANCH
         TM    JQEXFLG2,JQEXUHLD   IS JOB ON USER HOLD
         BO    SETATT2             YES, BRANCH
         TM    JQEFLAG1,JQE1HLD2   SEE IF DUPLICATE JOB
         BO    SETATT3             YES, BRANCH
         TM    JQEFLAG1,JQE1HLDA   SEE IF ALL JOBS HELD
         BO    SETATT4             YES, BRANCH
         TM    JQEFLAG1,JQE1HLD1   SEE IF SINGLE JOB HELD
         BO    SETATT5             YES, BRANCH
         B     SETATT6             NO, GO CHECK PURGE ATTRIBUTE
SETATT1  MVC   0(5,R15),=C'SETUP'  SET SETUP MESSAGE
         LA    R15,6(R15)          POINT PAST SETUP MESSAGE
         B     SETATT6             GO CHECK PURGE ATTRIBUTE
SETATT2  MVC   0(5,R15),=C'UHOLD'  SET USER HOLD MESSAGE
         LA    R15,6(R15)          POINT PAST USER HOLD MESSAGE
         B     SETATT6             GO CHECK PURGE ATTRIBUTE
SETATT3  MVC   0(4,R15),=C'DUPL'   SET DUPL MESSAGE
         LA    R15,5(R15)          POINT PAST DUPL MESSAGE
         B     SETATT6             GO CHECK PURGE ATTRIBUTE
SETATT4  MVC   0(5,R15),=C'QHOLD'  SET QUEUE HOLD MESSAGE
         LA    R15,6(R15)          POINT PAST QUEUE HOLD MESSAGE
         B     SETATT6             GO CHECK PURGE ATTRIBUTE
SETATT5  MVC   0(5,R15),=C'OHOLD'   SET OPERATOR/JOB HOLD MESSAGE
         LA    R15,6(R15)          POINT PAST OPERATOR HOLD MESSAGE
SETATT6  TM    JQEXFLG3,JQEXJCLE   SEE IF JOB FAILED WITH A JCL ERROR
         BZ    SETATT7             NO, BRANCH
         MVC   0(6,R15),=C'JCLERR'  SET JCLERROR MESSAGE
         LA    R15,7(R15)          POINT PAST JCLERROR MESSAGE
         B     SETATT8             GO CHECK PURGE ATTRIBUTE
SETATT7  TM    JQEXFLG3,JQEXABND   SEE IF JOB ABENDED
         BZ    SETATT9             NO, BRANCH
         MVC   0(4,R15),=C'ABND'   SET ABENDED MESSAGE
         LA    R15,5(R15)          POINT PAST ABENDED MESSAGE
SETATT8  TM    JQEFLAG1,JQE1PURG   SEE IF AWAITING PURGE
         BZ    SETATT9             NO, BRANCH
         MVC   0(5,R15),=C'PURGE'  SET PURGED MESSAGE
         LA    R15,6(R15)          POINT PAST PURGED MESSAGE
SETATT9  TM    JQEFLAG1,JQE1OCAN   SEE IF CANCELLED
         BZ    SETATT10            NO, BRANCH
         MVC   0(6,R15),=C'CANCEL' SET CANCELLED MESSAGE
         LA    R15,7(R15)          POINT PAST CANCELLED MESSAGE
SETATT10 LA    R0,COMMAND          POINT TO START OF MESSAGE
         SR    R15,R0              COMPUTE LENGTH
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        MOVE SPECIAL USER CONTROL ATTRIBUTES (/*THREAD /*EXCLUDE)    *
*        TO THE MESSAGE                                               *
***********************************************************************
SETUATTR LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         TM    JQEXFLG2,JQEXTHRD+JQEXXCLU   THREAD OR EXCLUDE?
         BZ    BACK                NO, RETURN
         MVC   0(7,R15),=C'USERCTL'  PUT USER CONTROL IN MESSAGE
         LA    R15,8(R15)          POINT PAST USER CONTROL MESSAGE
         LA    R0,COMMAND          POINT TO START OF MESSAGE
         SR    R15,R0              COMPUTE LENGTH
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
BACK     EQU   *
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        MOVE SYSTEM AFFINITY TO MESSAGE                              *
*                                                                     *
***********************************************************************
SETAFF   STM   R0,R15,SAVEAFF      SAVE INPUT REGISTERS
         LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         TM    JQEFLAG2,JQE2SAF    SEE IF SYSTEM AFFINITY SET
         BNO   SETAFF1             YES, BRANCH
         MVC   0(3,R15),=C'ANY'    ASSUME NO SYSTEM AFFINITY
         LA    R15,5(R15)          POINT PAST AFFINITY
         B     SETAFF4             GO CHECK IND
SETAFF1  L     R14,$QSE1           POINT TO QSE'S
         USING QSE,R14             SET ADDRESSABILITY TO QSE
         SLR   R1,R1               CLEAR REG FIR IC
SETAFF2  IC    R1,QSESIAFF         LOAD SYSTEM AFFINITY BIT
         EX    R1,CKSYSAFF         SEE IF QUEUED TO THIS QSE
         BZ    SETAFF3             NO, BRANCH
         MVC   0(4,R15),QSESID     MOVE SYSTEM NAME IN MESSAGE
         LA    R15,5(R15)          POINT PAST SYSTEM NAME
SETAFF3  TM    QSESTAT,QSELAST     END OF QSE'S
         BO    SETAFF4             YES, BRANCH
         LA    R14,QSELEN(R14)     POINT TO NEXT QSE
         B     SETAFF2             LOOP
SETAFF4  TM    JQEFLAG2,JQE2IND    SEE IF IN 'IND' MODE
         BZ    SETAFF5             NO, BRANCH
         MVC   0(3,R15),=C'IND'    SET 'IND' MODE IN MESSAGE
         LA    R15,5(R15)          POINT PAST MODE
SETAFF5  LA    R14,COMMAND         POINT TO START OF MESSAGE
         SR    R15,R14             COMPUTE LENGTH
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         LM    R0,R15,SAVEAFF      RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         DROP  R14                 DROP ADDRESSABILITY TO QSE
         SPACE 3
CKSYSAFF TM    JQEFLAG2,0          *** EXECUTE ONLY ***
         EJECT
         AIF   ('&RESRCE' NE 'YES').RESRC1
***********************************************************************
*                                                                     *
*        SET RESOURCE NAME(S) IF REQUESTED                            *
*                                                                     *
***********************************************************************
SETRES   STM   R0,R15,SAVERES      SAVE INPUT REGISTERS
         LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         TM    QMISC+L'RESOURCE,RESOURCE RESOURCE NAMES REQUESTED?
         BNO   SETRES6             NO, GET OUT
         ICM   R5,B'1111',JQERESRT LOAD RESOURCE BITS FOR JOB
         BZ    SETRES6             ALL ZERO, BRANCH
         LA    R4,$RESTAB          POINT TO RESOURCE NAME TABLE
         LH    R14,LTEXT           LOAD LENGTH OF MESSAGE
SETRES1  LTR   R5,R5               TEST RESOURCE BITS
         BZ    SETRES5             ZERO, DONE
         BP    SETRES4             POSITIVE, HIGH BIT NOT ON, BRANCH
         MVC   0(8,R15),0(R4)      MOVE RESOURCE NAME
SETRES2  CLI   0(R15),C' '         END OF RESOURCE NAME
         BE    SETRES3             YES, BRANCH
         LA    R15,1(R15) POINT TO NEXT CHAR OF RESOURCE NAME
         LA    R14,1(R14)          ADD 1 TO LENGTH
         B     SETRES2             LOOP FOR NEXT CHAR RESOURCE NAME
SETRES3  LA    R15,1(R15)          LEAVE A BLANK SPACE
         LA    R14,1(R14)          ADD 1 TO LENGTH
SETRES4  SLL   R5,1                SHIFT BITS 1 POSITION
         LA    R4,$RESLEN(R4)      POINT TO NEXT RESOURCE NAME
         B     SETRES1             CHECK FOR MORE BITS
SETRES5  STH   R14,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
SETRES6  LM    R0,R15,SAVERES      RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         EJECT
.RESRC1  ANOP
***********************************************************************
*                                                                     *
*        MOVE OWNERID (IF REQUESTED) TO MESSAGE                       *
*                                                                     *
***********************************************************************
SETOWN   STM   R0,R15,SAVEOWN      SAVE INPUT REGISTERS
         LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         TM    QMISC+L'OWNER,OWNER OWNERID REQUESTED?
         BNO   SETOWN2             NO, GET OUT
         CLI   JQEXOWNR,C' '       SEE IF OWNERID PRESENT
         BNH   SETOWN2             NO, GET OUT
         MVC   0(3,R15),=C'FOR'    SET LABEL
         MVC   4(8,R15),JQEXOWNR   MOVE OWNERID TO MESSAGE
SETOWN1  LH    R14,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R14,13(R14)         ADD 13 TO LENGTH
         STH   R14,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
SETOWN2  LM    R0,R15,SAVEOWN      RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        MOVE SPOOL VOLUME INFORMATION TO MESSAGE IF REQUESTED        *
*                                                                     *
***********************************************************************
SETSPL   STM   R0,R15,SAVESPL      SAVE INPUT REGISTERS
         TM    QMISC+L'SPOOL,SPOOL WANT SPOOL INFORMATION?
         BZ    SETSPL12            NO, GET OUT
         LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         XC    $SPMSKWA,$SPMSKWA   ZERO THE SPOOL MASK WORK AREA
         LH    R1,$JQEMSKL         GET MACHINE LENGTH OF JQE SPOOL MASK
         EX    R1,MVJQESPM         MOVE JQE SPOOL MASK TO WORK AREA
         NC    $SPMSKWA,$SPLSLCT   'AND' JQE MASK TO AVAIL SPOOL MASK
         EX    R1,CJQESPM1         SEE IF STAYED THE SAME
         BE    SETSPL02            YES, GO PROCESS SPOOL VOLUMES
         EX    R1,EXJQESPM         'XC' MODIFIED MASK FOR CHANGED BITS
         NC    $SPMSKWA,$SPLINAC   'AND' JQE MASK TO INACT SPOOL MASK
         BZ    SETSPL01            NO MATCHED BITS, MUST BE HALTING
         MVC   0(17,R15),=C'SPOOL(S) INACTIVE' SET MESSAGE
         LA    R15,18(R15)         INCREMENT PAST MESSAGE
         B     SETSPL02            GO PROCESS SPOOL VOLUMES
SETSPL01 MVC   0(16,R15),=C'SPOOL(S) HALTING' SET MESSAGE
         LA    R15,17(R15)         INCREMENT PAST MESSAGE
SETSPL02 MVC   0(40,R15),=C'USES ****** TRACK GROUPS - ***% OF SPOOL'
         LH    R2,JQETGNUM         LOAD NUMBER OF TG OR OFFSET
         TM    JQEFLAG5,JQE5XUSD   SEE IF EXTENSION USED FOR TB COUNT
         BZ    SETSPL03            NO, THIS IS THE ACTUAL NUMBER
         AL    R2,$JQEEXT          CALCULATE ADDR OF TG NUMBER
         LH    R2,$JEXTTGN(R2)     LOAD NUMBER OF TG
SETSPL03 CL    R2,=A(32767)        SEE IF EXCEEDS MAXIMUM
         BNL   SETSPL04            YES, LEAVE NUMBERS ALONE
         CVD   R2,DBL              CONVERT TG FOR JOB TO PACKED
         MVC   5(6,R15),=X'402020202120' SET EDIT MASK
         ED    5(6,R15),DBL+5      EDIT TG COUNT TO MESSAGE
         MH    R2,=H'100'          MULTIPLY BY 100 FOR PERCENT
         SRDL  R2,32               SHIFT TO ODD REG OF PAIR
         D     R2,$TGDEFND         DIVIDE BY TOTAL TRACK GRPS
         CVD   R3,DBL              CONVERT PERCENT TO PACKED
         MVC   26(4,R15),=X'40202120' SET EDIT MASK
         ED    26(4,R15),DBL+6     EDIT TG PERCENT TO MESSAGE
SETSPL04 LA    R15,41(R15)         INCREMENT PAST MESSAGE
         L     R5,$DASFRST         LOAD ADDRESS OF FIRST DAS
         USING DAS,R5              SET ADDRESSABILITY TO DAS
         LH    R6,$SPOLNUM         LOAD NUMBER OF VOLUMES
         LA    R0,50(R15)          SET ARBITRARY END OF VOLSER LIST
         MVC   0(4,R15),=C'ON ('   SET MESSAGE
         LA    R15,4(R15)          INCREMENT PAST MESSAGE
         XC    $SPMSKWA,$SPMSKWA   ZERO THE SPOOL MASK WORK AREA
         EX    R1,CJQESPM1         SEE IF ANY SPOOLS IN MASK
         BNE   SETSPL05            YES, BRANCH
         MVC   0(4,R15),=C'NONE'   SET SPOOL ID TO 'NONE'
         LA    R15,4(R15)          INCREMENT PAST SPOOL ID
         B     SETSPL11            GO END LIST
SETSPL05 MVC   $SPMSKWA,DASMASK    GET THE SPOOL ID MASK
         EX    R1,NCJQESPM         'AND' THE SYSTEM MASK TO THE JOBS
         BZ    SETSPL09            ZERO, NOT ON THIS VOLUME
         TM    MISCSW1,VOLHEAD     SEE IF VOLUME HEADER WRITTEN
         BO    SETSPL08            YES, BRANCH
         OI    MISCSW1,VOLHEAD     TURN ON VOLUME HEADER WRITTEN IND
         MVC   0(6,R15),DASVOLID   SET FULL VOLSER AS HEADER
         SLR   R4,R4               CLEAR REG FOR IC
         IC    R4,$SPLLEN          LOAD LENGTH OF SPOOL VOLUME PREFIX-1
         LA    R15,1(R4,R15)       POINT PAST SPOOL VOLUME PREFIX
SETSPL06 LA    R14,DASVOLID        POINT TO FULL VOLSER
         LA    R14,1(R4,R14)       POINT PAST SPOOL VOLUME PREFIX
         LA    R2,L'DASVOLID       LOAD FULL LENGTH OF VOLUME NAME
         SR    R2,R4               CALCULATE SUFFIX LENGTH
         BCTR  R2,0                    OF VOLSER PAST PREFIX
SETSPL07 CLI   0(R14),C' '         SEE IF END OF VOLSER
         BE    SETSPL09            YES, GO GET NEXT DAS ENTRY
         MVC   0(1,R15),0(R14)     MOVE VOLSER CHARACTER TO MESSAGE
         LA    R15,1(R15)          INCREMENT TO NEXT CHAR OF VOLSER
         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF VOLSER
         BCT   R2,SETSPL07         LOOP UNTIL END OF VOLSER
         B     SETSPL09            GO GET NEXT DAS ENTRY
SETSPL08 MVI   0(R15),C','         SET VOLSER SEPARATOR
         LA    R15,1(R15)          INCREMENT PAST SEPARATOR
         B     SETSPL06            GO PROCESS THIS VOLSER
SETSPL09 LA    R5,DASSIZ(R5)       INCREMENT TO NEXT DAS ENTRY
         CR    R15,R0              SEE IF LIMIT REACHED ON VOLUMES
         BH    SETSPL10            YES, GET OUT
         BCT   R6,SETSPL05         LOOP ON THIS DAS ENTRY
         B     SETSPL11            GO FLAG END OF LIST
SETSPL10 MVI   0(R15),C'*'         FLAG LAST VOLUME OF LIST
         LA    R15,1(R15)          INCREMENT PAST '*'
SETSPL11 MVI   0(R15),C')'         FLAG END OF LIST
         LA    R15,2(R15)          INCREMENT PAST ')'
         LA    R14,COMMAND         POINT TO START OF MESSAGE
         SR    R15,R14             COMPUTE LENGTH
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
SETSPL12 NI    MISCSW1,255-VOLHEAD TURN OFF VOLUME HEADER WRITTEN IND
         LM    R0,R15,SAVESPL      RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         SPACE 3
MVJQESPM MVC   $SPMSKWA(0),JQESUMSK **** EXECUTE ONLY ****
CJQESPM1 CLC   $SPMSKWA(0),JQESUMSK **** EXECUTE ONLY ****
EXJQESPM XC    $SPMSKWA(0),JQESUMSK **** EXECUTE ONLY ****
NCJQESPM NC    $SPMSKWA(0),JQESUMSK **** EXECUTE ONLY ****
         EJECT
***********************************************************************
*                                                                     *
*        MOVE ACTIVE SYSTEM TO MESSAGE                                *
*                                                                     *
***********************************************************************
SETACTS  LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         N     R1,=A(JQE1BUSY)     TURN OFF ALL BUT BUSY BITS
         BCTR  R1,0                MAKE RELATIVE TO 0
         MH    R1,=AL2(QSELEN)     MULTIPLY BY QSE LEN FOR OFFSET
         AL    R1,$QSE1            ADD ORIGIN TO OFFSET FOR ADDRESS
         USING QSE,R1              SET ADDRESSABILITY TO QSE
         MVC   0(4,R15),QSESID     MOVE SYSTEM NAME TO MESSAGE
         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,5(R15)          POINT PAST OUR TEXT
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         BR    R14                 RETURN TO CALLER
         DROP  R1                  DROP ADDRESSABILITY TO QSE
         EJECT
***********************************************************************
*                                                                     *
*        MOVE DESTINATION NAME TO MESSAGE                             *
*                                                                     *
***********************************************************************
SETDEST  ST    R1,ROUTCDE          SAVE ROUTCDE
         LA    R15,COMMAND         POINT TO NEXT PART OF
         AH    R15,LTEXT               MESSAGE AREA
         SLR   R0,R0               CLEAR REG FOR ICM
         MVI   0(R15),C'R'         ASSUME REMOTE NUMBER
         CLC   ROUTCDE(2),$OWNNODE IS THIS OUR NODE
         BE    SETDEST1            YES, BYPASS
         MVI   0(R15),C'N'         ASSUME NODE NUMBER
         ICM   R0,B'0011',ROUTCDE  LOAD NODE NUMBER
         BNZ   SETDEST2            NOT ZERO, NODE NUMBER
         MVI   0(R15),C'U'         SPECIAL DESTINATION
SETDEST1 ICM   R0,B'0011',ROUTCDE+2 LOAD REMOTE/SPECIAL NUMBER
         BNZ   SETDEST2            HAS REMOTE NUMBER, NOT LOCAL
         MVC   0(5,R15),=C'LOCAL'  SET TO LOCAL
         B     SETDEST6            GET OUT
SETDEST2 CVD   R0,DOUBLE           CONVERT NODE/RMT NUMBER TO PACKED
         UNPK  1(5,R15),DOUBLE     UNPACK NODE/RMT NUMBER
         OI    5(R15),X'F0'        MAKE PRINTABLE
SETDEST3 CLI   1(R15),C'0'         IS HIGH BYTE ZERO
         BNE   SETDEST4            NO, BRANCH
         MVC   1(5,R15),2(R15)     SHIFT OFF HIGH ORDER ZERO
         B     SETDEST3            LOOP
SETDEST4 CLI   0(R15),C'N'         IS THIS NODE NUMBER
         BNE   SETDEST6            NO, DONE
         ICM   R0,B'0011',ROUTCDE+2 LOAD REMOTE NUMBER
         BZ    SETDEST6            ZERO, NO REMOTE NUMBER
SETDEST5 LA    R15,1(R15)          INCREMENT TO NEXT CHAR NODE NUMBER
         CLI   0(R15),C' '         END OF REMOTE NUMBER
         BNE   SETDEST5            NO, LOOP
         MVI   0(R15),C'R'         SET UP FOR REMOTE NUMBER
         B     SETDEST2            GO PROCESS REMOTE NUMBER
SETDEST6 LH    R15,LTEXT           LOAD LENGTH OF MESSAGE
         LA    R15,11(R15)         POINT PAST OUR TEXT
         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        BUILD TABLE OF ACTIVE OUTPUT PROCESSING FROM JOES            *
*                                                                     *
*        THE TABLE WILL CONTAIN A LIST OF 4 BYTE ENTRIES              *
*        1)  A ONE BYTE SYSTEM BUSY NUMBER                            *
*        2)  A THREE BYTE DEVICE ID FIELD                             *
*            A)  A ONE BYTE DEVICE TYPE                               *
*                X'10' - READER                                       *
*                X'20' - PRINTER                                      *
*                X'30' - PUNCH                                        *
*                X'4F' - OFFLOAD JT                                   *
*                X'5F' - OFFLOAD JR                                   *
*                X'6F' - OFFLOAD ST                                   *
*                X'7F' - OFFLOAD SR                                   *
*                X'9X' - REMOTE READER  WHERE X IS THE DEVICE #       *
*                X'AX' - REMOTE PRINTER WHERE X IS THE DEVICE #       *
*                X'BX' - REMOTE PUNCH   WHERE X IS THE DEVICE #       *
*                                                                     *
*                X'48' - ROUT.JTX       WHERE X IS THE NUMBER         *
*                                       FROM THE LOW 3 BITS           *
*                X'58' - ROUT.JRX       WHERE X IS THE NUMBER         *
*                                       FROM THE LOW 3 BITS           *
*                                                                     *
*            B)  A 2 BYTE DEVICE NUMBER                               *
*                FOR LOCAL DEVICES   - THE DEVICE NUMBER              *
*                FOR REMOTE DEVICES  - THE REMOTE NUMBER              *
*                FOR OFFLOAD DEVICES - THE OFFLOADER NUMBER           *
*                                                                     *
***********************************************************************
BLDACT   STM   R0,R15,SAVEBLD      SAVE INPUT REGISTERS
         XC    DEVNO,DEVNO         SET DEVICE COUNT TO ZERO
         LA    R1,DEVTBL           LOAD START ADDRESS OF TABLE
         CLI   JQETYPE,$INPUT      IS JOB ON READER
         BE    BLDACT2             YES, USE JQE DEVICE ID
         CLI   JQETYPE,$RECEIVE    IS JOB ON SYSOUT RECEIVER
         BE    BLDACT2             YES, USE JQE DEVICE ID
         TM    JQETYPE,$XEQ        IS JOB ON CONVERTER/EXECUTION QUEUE
         BNO   BLDACT1             NO, BRANCH
         TM    JQEFLAG1,JQE1BUSY   IS JOB BUSY
         BZ    BLDACT6             NO, GO CHECK JOES
         TM    JQEDEVID,DCTXFRID+DCTNJTID IS JOB ON JOB OFFLOADER
         BO    BLDACT2             YES, USE JQE DEVICE ID
         B     BLDACT6             NO, GO CHECK JOES
BLDACT1  CLI   JQETYPE,$XMIT       IS JOB ON JOB TRANSMITTER
         BNE   BLDACT3             NO, GO CHECK SPOF
         TM    JQEFLAG1,JQE1BUSY   IS JOB BUSY
         BZ    BLDACT6             NO, GO CHECK JOES
BLDACT2  MVC   DEVTBL(1),JQEFLAG1  SET DEVICE FLAG BYTE
         NI    DEVTBL,JQE1BUSY     TURN OFF ALL BUT 'BUSY' BITS
         MVC   DEVTBL+1(3),JQEDEVID SET DEVICE ID
         MVC   DEVNO,=H'1'         SET FOR 1 DEVICE
         B     BLDACT13            GET OUT
BLDACT3  CLI   JQETYPE,$HARDCPY    IS JOB ON HARDCOPY
         BNE   BLDACT6             NO, GO CHECK JOES
         TM    JQEFLAG1,JQE1BUSY   IS JOB BUSY
         BZ    BLDACT6             NO, GO CHECK JOES
         LR    R2,R9               SET ADDRESS OF JQE
         SL    R2,$JOBQPTR         SUBTRACT ORIGIN FOR OFFSET
         LA    R3,1                SET DEVICE NUMBER TO 1
         L     R4,$LCKPTR          LOAD ADDRESS OF LCK TABLE
         USING LCK,R4              SET ADDRESSABILITY TO LCK
         LA    R0,$MAXLCK          SET LOOP COUNTER
BLDACT4  C     R2,LCKJQE           IS THIS OUR JOB
         BE    BLDACT5             YES, BRANCH
         LA    R3,1(R3)            ADD 1 TO DEVICE NUMBER
         LA    R4,LCKSIZE(R4)      INCREMENT TO NEXT LCK ENTRY
         BCT   R0,BLDACT4          LOOP
         B     BLDACT6             GO CHECK JOES
         DROP  R4                  DROP ADDRESSABILITY TO LCK
BLDACT5  MVC   DEVTBL(1),JQEFLAG1  SET DEVICE FLAG BYTE
         NI    DEVTBL,JQE1BUSY     TURN OFF ALL BUT 'BUSY' BITS
         MVI   DEVTBL+1,DCTXFRID+DCTNSTID SET DEVICE ID
         STCM  R3,B'0011',DEVTBL+1 SAVE DEVICE NUMBER
         MVC   DEVNO,=H'1'         SET FOR 1 DEVICE
         LA    R1,4(R1)            INCR PAST THIS DEVICE TBL ENTRY
BLDACT6  LR    R2,R9               SET ADDRESS OF JQE
         SL    R2,$JOBQPTR         SUBTRACT ORIGIN FOR OFFSET
         L     R3,JQEJOE           LOAD OFFSET OF 1ST WORK JOE
         B     BLDACT8             BYPASS FIRST LOAD
         USING JOE,R3              SET ADDRESSABILITY TO JOE
BLDACT7  L     R3,JOEJQNXT         LOAD OFFSET OF NEXT WORK JOE
BLDACT8  N     R3,$ZEROFFF         SEE IF END OF CHAIN
         BZ    BLDACT13            YES, BRANCH
         AL    R3,$JOTABLE         COMPUTE JOE ADDRESS
         TM    JOEFLAG1,JOE1BUSY   SEE IF JOE IS BUSY
         BZ    BLDACT12            NO, BYPASS THIS JOE
         CLC   JOEDEVID,$ZEROS     SEE IF ON A DEVICE
         BE    BLDACT12            YES, BYPASS THIS JOE
         TM    QMISC+L'SELDEST,SELDEST SELECTING BY DESTINATION?
         BNO   BLDACT9             NO, BRANCH
         CLC   LOWDEST,JOEDEST     SEE IF MATCH ON DEST
         BL    BLDACT12            NO, BYPASS THIS JOE
         CLC   HIDEST,JOEDEST      SEE IF MATCH ON DEST
         BH    BLDACT12            NO, BYPASS THIS JOE
         MVC   0(1,R1),JOEFLAG1    SAVE BUSY BITS
BLDACT9  NI    0(R1),JOE1BUSY      TURN OFF ALL BUT BUSY BITS
         MVC   1(3,R1),JOEDEVID    SAVE DEVICE ID
         LH    R15,DEVNO           LOAD NUMBER OF DEVICES IN TBL
         LTR   R15,R15             TEST NUMBER OF DEVICES
         BZ    BLDACT11            ZERO, FIRST ENTRY
         LA    R4,DEVTBL           LOAD START OF DEVICE TABLE
BLDACT10 CLC   0(4,R4),0(R1)       SEE IF DUPLICATE ENTRY
         BE    BLDACT12            YES, DROP THIS ENTRY
         LA    R4,4(R4)            INCREMENT TO NEXT TABLE ENTRY
         BCT   R15,BLDACT10        LOOP
BLDACT11 LH    R15,DEVNO           LOAD NUMBER OF DEVICES IN TABLE
         LA    R15,1(R15)          ADD 1 TO COUNT
         STH   R15,DEVNO           AND SAVE NEW COUNT
         CH    R15,=H'50'          SEE IF TABLE IS FULL
         BE    BLDACT13            YES, JUST QUIT
         LA    R1,4(R1)            INCREMENT TO NEXT TABLE ENTRY
BLDACT12 B     BLDACT7             GO PROCESS NEXT JOE
BLDACT13 LM    R0,R15,SAVEBLD      RESTORE INPUT REGISTERS
         BR    R14                 RETURN TO CALLER
         DROP  R3                  DROP ADDRESSABILITY TO JOE
         EJECT
***********************************************************************
*                                                                     *
*        WRITE OUTPUT MESSAGE                                         *
*                                                                     *
***********************************************************************
PUTMSG   STM   R0,R15,SAVEPUT      SAVE INPUT REGISTERS
         OI    MISCSW1,MSG         TURN ON MESSAGE ISSUED SWITCH
         XC    RC,RC               ZERO THE RETURN CODE FIELD
         LH    R3,LTEXT            LOAD LENGTH OF MESSAGE TEXT
         LR    R4,R3               SAVE LENGTH OF MESSAGE TEXT
         CH    R3,=H'70'           SEE IF EXCEEDS MAXIMUM
         BNH   PUTMSG02            NO, BRANCH
         LA    R4,70               LOAD MAX LENGTH OF MESSAGE
         LA    R5,COMMAND+69       POINT TO LAST CHAR OF MAX LENGTH
PUTMSG01 CLI   0(R5),C' '          APPROPRIATE STOPPING PLACE
         BE    PUTMSG02            YES, BRANCH
         BCTR  R4,0                REDUCE LENGTH BY 1
         BCTR  R5,0                BACK UP 1 CHARACTER
         B     PUTMSG01            LOOP
PUTMSG02 LR    R0,R4               SAVE LENGTH OF MESSAGE
         $CWTO L=(R0),JOB=YES,MSGID=908
         BZ    *+10                IF NO $WAIT FOR CMB, BRANCH
         MVC   RC,=H'16'           SET RETURN CODE OF $WAIT
         SR    R3,R4               CALCULATE REMAINING MSG LENGTH
         LR    R4,R3               AND RESET LENGTH REGISTER
         BZ    PUTMSG03            NONE LEFT, GET OUT
         MVC   COMMAND(18),BLANKS  BLANK OUT THE JOB NAME AND NBR
         LA    R14,COMMAND+18      POINT TO START POINT OF MSG TEXT
         LR    R15,R3              SET REMAINING LENGTH
         LA    R0,1(R5)            POINT TO START OF SECOND PART
         LR    R1,R15              SET LENGTH OF SECOND PART
         MVCL  R14,R0              SHIFT MESSAGE FOR SECOND PART
         LA    R3,18(R3)           ADD LENGTH OF BASIC MESSAGE
         LR    R4,R3               RESET REMAINING LENGTH REGISTER
         CH    R4,=H'19'           SEE IF ONLY BASIC MESSAGE LEFT
         BH    PUTMSG02            NO, GO PROCESS SECOND PART OF MSG
PUTMSG03 MVI   COMMAND,C' '        BLANK ENTIRE
         MVC   COMMAND+1(199),COMMAND  COMMAND
         MVC   COMMAND+201(200),COMMAND+200  AREA
         MVC   COMMAND(18),SAVEBAS RESTORE JOB NAME AND NUMBER
         MVC   LTEXT,=H'18'        RESET MESSAGE LENGTH
         ICM   R15,B'0011',RC      LOAD $CWTO RETURN CODE
         LM    R0,R15,SAVEPUT      RESTORE INPUT REGISTERS
         BR    R14                 RETURN TO CALLER
         EJECT
***********************************************************************
*        CONSTANTS FOR FORMAT ROUTINE                                 *
***********************************************************************
         SPACE 3
BLANKS   DC    CL20' '             STRING OF 20 BLANKS
         SPACE 3
MSG1     DC    C' LIST INCOMPLETE'
         SPACE 3
DEVNTBL  DS    0F                  DEVICE NAME TABLE
         DC    AL1(5),CL7'INTRDR'
         DC    AL1(5),CL7'READER'
         DC    AL1(5),CL7'PRINTR'
         DC    AL1(4),CL7'PUNCH'
         DC    AL1(1),CL7'JT'
         DC    AL1(1),CL7'JR'
         DC    AL1(1),CL7'ST'
         DC    AL1(1),CL7'SR'
         DC    AL1(2),CL7'RMT'
         DC    AL1(2),CL7'RDR'
         DC    AL1(2),CL7'PRT'
         DC    AL1(2),CL7'PUN'
         EJECT
         AIF   ('&RESRCE' NE 'YES').RESRC2
         $RESTABL ,                GENERATE RESOURCE NAME TABLE
         EJECT
.RESRC2  ANOP
***********************************************************************
*                                                                     *
*        SHORTAGE OF COMMAND BUFFERS                                  *
*                                                                     *
***********************************************************************
         SPACE 1
INCMPLT  MVC   COMMAND(L'MSG1),MSG1 SET ERROR MESSAGE
         LA    R0,L'MSG1           SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
***********************************************************************
*                                                                     *
*        RETURN TO CALLER AFTER FORMATTING JQE AND/OR JOES            *
*                                                                     *
***********************************************************************
         SPACE 1
GOBACK   TM    MISCSW1,MSG         SEE IF MESSAGE WRITTEN
         BO    EXIT0               YES, SET RETURN CODE TO ZERO
         B     EXIT4               NO,  SET RETURN CODE TO FOUR
         EJECT
***********************************************************************
*                                                                     *
*                    E X I T     R O U T I N E S                      *
*                                                                     *
*        RC = 00 - JQE FORMAT COMPLETE                                *
*        RC = 04 - JOB DROPPED BY FILTER                              *
*        RC = 08 - CONSOLE BUFFER SHORTAGE                            *
*                                                                     *
***********************************************************************
EXIT0    LA    R15,0               SET RETURN CODE TO 0
         B     RETURN              GET OUT
EXIT4    LA    R15,4               SET RETURN CODE TO 4
         B     RETURN              GET OUT
EXIT8    LA    R15,8               SET RETURN CODE TO 8
         B     RETURN              GET OUT
RETURN   $RETURN RC=(R15)          RETURN TO JES2
         EJECT
         LTORG
         EJECT
         $MODEND
         END
