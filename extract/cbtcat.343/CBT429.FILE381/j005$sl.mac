         TITLE 'JES2 $SL COMMAND PROCESSOR'
***********************************************************************
*                                                                     *
*        ENVIRONMENT   MVS SP 2.2.0                                   *
*                                                                     *
*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $SL COMMAND   *
*        WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS A TYPE 5       *
*        EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY THE $SL        *
*        COMMAND WHEN ENCOUNTERED.                                    *
*                                                                     *
*        THIS COMMAND WAS WRITTEN TO EITHER LIST ALL JOBS WHICH       *
*        ARE WAITING FOR SETUP TO BE COMPLETED OR TO LIST THE         *
*        ACTUAL SETUP INFORMATION FOR INDIVIDUAL JOBS.                *
*                                                                     *
*        IF NO OPERANDS ARE ENTERED, THE JOB QUEUE IS SEARCHED        *
*        FOR ALL JOBS WHICH ARE AWAITING SETUP,  A MESSAGE IS         *
*        ISSUED FOR EACH JOB.  THE MESSAGE FOR EACH IS JOB            *
*        IS ACTUALLY WRITTEN BY AN EXIT 255 ROUTINE WILL IS           *
*        CALLED WITH AN APPROPRIATE PARM LIST.  THE PARM LIST         *
*        IS MAPPED WITH A USER MACRO $FCSFMTP.                        *
*                                                                     *
*        IF A JOB OR JOB RANGE IS REQUESTED, THE INDIVIDUAL           *
*        SETUP STATEMENTS WILL BE LISTED FOR THE REQUESTED JOB(S)     *
*        BY READING THE JCL IMAGES DATA SET FOR THE JOB.              *
*                                                                     *
*                                                                     *
*        THE $SL COMMAND HAS THE FOLLOWING SYNTAX:                    *
*                                                                     *
*        $SL,                                                         *
*             J=JN-NN                                                 *
*             J=SN-NN                                                 *
*             J=TN-NN                                                 *
*                                                                     *
*                   , JECL                                            *
*                                                                     *
*                                                                     *
*        WHERE:                                                       *
*                                                                     *
*        JN-NN         - LIST SETUP/JECL CONTROL CARDS FOR THE        *
*                        SPECIFIED BATCH JOB(S)                       *
*        SN-NN         - LIST SETUP/JECL CONTROL CARDS FOR THE        *
*                        SPECIFIED STARTED TASK(S)                    *
*        TN-NN         - LIST SETUP/JECL CONTROL CARDS FOR THE        *
*                        SPECIFIED TSO USER(S)                        *
*        JECL          - LIST THE JOB CARD AND ALL OF THE JECL        *
*                        CARDS FOR THE SPECIFIED JOB(S)               *
*                                                                     *
*                                                                     *
*        NOTE                                                         *
*                                                                     *
*        SUPPORT FOR TSO USERS AND STARTED TASKS IS CODED ALTHOUGH    *
*        NO JECL MUCH LESS SETUP CARDS CAN BE SUPPLIED FOR THESE      *
*        "JOBS".  THE JOB CARD CAN BE LISTED WITH THE "JCL" OPTION.   *
*                                                                     *
*        JOB RANGES MAY BE DISALLOWED BY SETTING THE ASSEMBLER        *
*        VARIABLE &RANGE TO 'NO'                                      *
*                                                                     *
*        WRITTEN BY:                                                  *
*                        JOHN V. HOOPER                               *
*                        FIRST UNION NATIONAL BANK                    *
*                        301 SOUTH TRYON STREET                       *
*                        CHARLOTTE, N.C.  28288                       *
*                        (704) 374-2427                               *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *
*                                                                     *
*        1)  THE HASP908 MESSAGE WILL BE ISSUED FOR EACH JOB          *
*            WHICH IS DISPLAYED.                                      *
*                                                                     *
*                                                                     *
*                                                                     *
*        $HASP908 JOBNAME  WAIT EXEC X PRIO XX SSSS                   *
*                                                                     *
*        2)  THE HASP900 MESSAGE WILL BE ISSUED WHEN NO JOBS          *
*            ARE IN THE SETUP QUEUE.                                  *
*                                                                     *
*        $HASP900 NO JOBS AWAITING SETUP!                             *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*        3)  THE HASP900 MESSAGE WILL BE ISSUED FOR EACH JOB/JECL     *
*            STATEMENT WHICH IS REQUESTED.                            *
*                                                                     *
*        $HASP900 JOB NNNN JOBNAME  AWAITING SETUP                    *
*        $HASP900 JOB SETUP:  HOLD THIS JOB FOR TAPE                  *
*        $HASP900             NUMBER 000001 000002 AND 000003         *
*                                                                     *
*                   OR THE FOLLOWING IF 'JECL' OPTION                 *
*                                                                     *
*        $HASP900 //JOBNAME  JOB (ACCOUNT,BIN),'PGMR-NAME',           *
*        $HASP900 //         CLASS=A,MSGCLASS=X,NOTIFY=TSOUSER        *
*        $HASP900 //*SETUP  HOLD THIS JOB FOR TAPE                    *
*        $HASP900 //*SETUP  NUMBER 000001 000002 AND 000003           *
*        $HASP900 //*JOBPARM K=60                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*        4)  THE HASP900 MESSAGE WILL BE ISSUED IF THE REQUESTED      *
*            JOB(S) CANNOT BE LOCATED IN THE JOB QUEUE.               *
*                                                                     *
*        $HASP900 JOB(S) NOT FOUND                                    *
*                                                                     *
*                                                                     *
*                                                                     *
*                        ERROR MESSAGES                               *
*                                                                     *
*        $HASP999 JOB NNNN JOBNAME  JES2 GENERATED JOB, CANNOT BE     *
*                                   DISPLAYED                         *
*                                                                     *
*        $HASP999 JOB NNNN JOBNAME  CANNOT LOCATE JCL IMAGES PDDB     *
*                                                                     *
*        $HASP999 JOB NNNN JOBNAME  I/O ERROR ON SPOOL IN SL          *
*                                   COMMAND, COMMAND ABORTED          *
*                                                                     *
*        $HASP999 JOBS(S) NOT IN SETUP QUEUE                          *
*                                                                     *
*        $HASP999 JOBS RANGE NOT ALLOWED FOR THE SL COMMAND           *
*                                                                     *
*        $HASP999 JOB NNNN JOBNAME  REQUIRED SPOOL VOLUMES NOT        *
*                                   MOUNTED                           *
*                                                                     *
*        $HASP999 XXXXXXXXX INVALID OPERAND                           *
*                                                                     *
***********************************************************************
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*              M A C R O S   U S E D   I N   J 0 0 5 $ S L            *
*                                                                     *
*        01)  $AMODE       SYS1.HASPSRC                               *
*        02)  $BUFFER      SYS1.HASPSRC                               *
*        03)  $CAT         SYS1.HASPSRC                               *
*        04)  $CMB         SYS1.HASPSRC                               *
*        05)  $COMWORK     SYS1.HASPSRC                               *
*        06)  $CWA         SYS1.HASPSRC                               *
*        07)  $CWTO        SYS1.HASPSRC                               *
*        08)  $DCT         SYS1.HASPSRC                               *
*        09)  $ENTRY       SYS1.HASPSRC                               *
*        10)  $EXCP        SYS1.HASPSRC                               *
*        11)  $EXIT        SYS1.HASPSRC                               *
*        12)  $EXITPL      SYS1.HASPSRC                               *
*        13)  $GETBUF      SYS1.HASPSRC                               *
*        14)  $FCSFMTP     SYS1.HASPSRC (USER)                        *
*        15)  $FREEBUF     SYS1.HASPSRC                               *
*        16)  $HASPEQU     SYS1.HASPSRC                               *
*        17)  $HASPGBL     SYS1.HASPSRC                               *
*        18)  $HCT         SYS1.HASPSRC                               *
*        19)  $IOERROR     SYS1.HASPSRC                               *
*        20)  $IOT         SYS1.HASPSRC                               *
*        21)  $JCT         SYS1.HASPSRC                               *
*        22)  $JOE         SYS1.HASPSRC                               *
*        23)  $JQE         SYS1.HASPSRC                               *
*        24)  $MIT         SYS1.HASPSRC                               *
*        25)  $MODEND      SYS1.HASPSRC                               *
*        26)  $MODULE      SYS1.HASPSRC                               *
*        27)  $PADDR       SYS1.HASPSRC                               *
*        28)  $PCE         SYS1.HASPSRC                               *
*        29)  $PDDB        SYS1.HASPSRC                               *
*        30)  $QLOC        SYS1.HASPSRC                               *
*        31)  $QSE         SYS1.HASPSRC                               *
*        32)  $RETURN      SYS1.HASPSRC                               *
*        33)  $SAVE        SYS1.HASPSRC                               *
*        34)  $TAB         SYS1.HASPSRC                               *
*        35)  $WAIT        SYS1.HASPSRC                               *
*        36)  $XIT         SYS1.HASPSRC                               *
*        37)  IAZRESPA     SYS1.AMODGEN                               *
*        38)  IFGRPL       SYS1.MACLIB                                *
*        39)  MODESET      SYS1.MACLIB                                *
*                                                                     *
*                                                                     *
*              L I N K A G E    E D I T O R    I N F O                *
*                                                                     *
*        SIZE:       2K                                               *
*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
         COPY  $HASPGBL
J005$SL  $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X
               ENVIRON=JES2,                                           X
               TITLE='JES2 $SL COMMAND PROCESSOR',                     X
               $BUFFER,            GENERATE HASP BUFFER DSECT          X
               $CAT,               GENERATE HASP CAT DSECT             X
               $CMB,               GENERATE HASP CMB DSECT             X
               $COMWORK,           GENERATE HASP COMWORK DSECT         X
               $CWA,               GENERATE HASP CWA DSECT             X
               $DCT,               GENERATE HASP DCT DSECT             X
               $EXITPL,            GENERATE HASP EXITPL DSECT          X
               $HASPEQU,           GENERATE HASP EQUATES               X
               $HCT,               GENERATE HASP HCT DSECT             X
               $IOT,               GENERATE HASP IOT DSECT             X
               $JCT,               GENERATE HASP JCT DSECT             X
               $JOE,               GENERATE HASP JOE DSECT             X
               $JQE,               GENERATE HASP JQE DSECT             X
               $MIT,               GENERATE HASP MIT DSECT             X
               $PADDR,             GENERATE HASP PADDR DSECT           X
               $PCE,               GENERATE HASP PCE DSECT             X
               $PDDB,              GENERATE HASP PDDB DSECT            X
               $QSE,               GENERATE HASP QSE DSECT             X
               $TAB,               GENERATE HASP TAB DSECT             X
               $XIT,               GENERATE HASP XIT DSECT             X
               RESPA,              GENERATE MVS  RESPA DSECT           X
               RPL                 GENERATE MVS  IFGRPL DSECT
         EJECT
***********************************************************************
*                                                                     *
*        PROGRAM WORK AREAS                                           *
*                                                                     *
***********************************************************************
$SLWORK  DSECT
         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****
         $FCSFMTP ,                MAP THE EXIT 255 PARM LIST
BUFADDR  DS    F                   ADDRESS OF A JES2 BUFFER
DOUBLE   DS    D                   DOUBLE WORD WORK AREA
DBL      DS    D                   DOUBLE WORD WORK AREA
LOWJOB   DS    H                   LOW RANGE JOB REQUESTED
HIGHJOB  DS    H                   HIGH RANGE JOB REQUESTED
RC       DS    H                   $CWTO RETURN CODE
LTEXT    DS    H                   CURRENT LENGTH OF MESSAGE AREA
MISCSW1  DS    X                   MISCELLANEOUS SWITCHES
TSO      EQU   X'80'               REQUEST IS FOR A RANGE OF TSO USERS
STC      EQU   X'40'               REQUEST IS FOR A RANGE OF STC'S
JOB      EQU   X'20'               REQUEST IS FOR A RANGE OF BATCH JOBS
FOUND    EQU   X'10'               A JOB WAS FOUND FOR PROCESSING
NOSETUP  EQU   X'04'               JOB REQUESTED HAS NO SETUP CARDS
GOOD     EQU   X'02'               A GOOD/NORMAL JOB WAS REQUESTED
JECL     EQU   X'01'               JECL OPTION WAS SPECIFIED
MISCSW2  DS    X                   MISCELLANEOUS SWITCHES
JCFND    EQU   X'80'               JOB CARD HAS BEEN FOUND
JCEND    EQU   X'40'               JOB CARD HAS BEEN FINISHED
CDMAX    DS    H                   MAXIMUM CARDS IN TABLE
CDCNT    DS    H                   CURRENT COUNT OF CARDS IN TABLE
WRKLEN   DS    H                   LENGTH OF CARD TABLE AREA
CURRCARD DS    F                   ADDRESS OF CURRENT CARD IN TABLE
$SLBLEN  EQU   *-$SLWORK           LENGTH OF BASIC WORK AREA
         SPACE 3
J005$SL  CSECT ,                   RESTORE THE CSECT ENVIRONMENT
         TITLE 'JES2 $SL COMMAND PROCESSOR'
         PRINT OFF
***********************************************************************
*                                                                     *
*       LOCAL ASSEMBLER VARIABLES                                     *
*                                                                     *
***********************************************************************
        LCLC  &RANGE
&RANGE  SETC  'NO'
        PRINT ON
***********************************************************************
*                                                                     *
*        EXIT MAIN ENTRY POINT                                        *
*                                                                     *
***********************************************************************
E005$SL  $ENTRY BASE=R12
         SPACE 1
         $SAVE                     SAVE CALLER'S REGISTERS
         LR    R12,R15             LOAD BASE REGISTER
         EJECT
***********************************************************************
*                                                                     *
*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *
*                                                                     *
*        R5       - ADDRESS OF THE CURRENT OPERAND                    *
*        R6       - INCREMENT VALUE OF 4                              *
*        R7       - ADDRESS OF THE LAST OPERAND                       *
*        R11      - ADDRESS OF THE HCT                                *
*        R13      - ADDRESS OF THE HASPCOMM PCE                       *
*        R14      - RETURN ADDRESS                                    *
*        R15      - ENTRY ADDRESS                                     *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        SEE IF THIS IS A $SL COMMAND                                 *
*                                                                     *
***********************************************************************
         CLC   COMVERB(3),=C'SL '  SEE IF THIS IS THE $SL COMMAND
         BE    SLOK                YES, GO PROCESS IT
         CLC   COMVERB(3),=C'SL,'  SEE IF THIS IS THE $SL COMMAND
         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT
***********************************************************************
*                                                                     *
*        GET A JES2 BUFFER FOR REENTRANCY AND                         *
*        CLEAR THE COMMAND WORK AREA                                  *
*                                                                     *
***********************************************************************
         SPACE 1
SLOK     $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA
         LR    R8,R1               SAVE WORK AREA ADDRESS
         USING $SLWORK,R8          SET ADDRESSABILITY TO WORK AREA
         LA    R14,$SLWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS
         LH    R15,$BUFSIZE        SET   'TO'   LENGTH
         SLR   R0,R0               CLEAR 'FROM' ADDRESS
         SLR   R1,R1               CLEAR 'FROM' LENGTH
         MVCL  R14,R0              CLEAR THE BUFFER
         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA
         ST    R1,BUFADDR          SAVE BUFFER ADDRESS
         MVC   LOWJOB,=H'1'        SET LOW JOB NUMBER
         MVC   HIGHJOB,=H'9999'    SET HIGH JOB NUMBER
         EJECT
*****************************************************************
*                                                               *
*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES           *
*                                                               *
*****************************************************************
         SPACE 1
         TM    COMFLAG,CMBFLAGU    IS THIS A UCM
         BZ    MSGGOOD             NO, SKIP REDIRECTION
         TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM
         BNZ   MSGRPT              SKIP AUTOMATIC L=CCA
         LA    R1,4                LOAD REDIRECT OFFSET FOR $SL
*                                  SAME AS FOR $DJ
         BCTR  R1,0                REDUCE BY 1
         SLL   R1,1                DOUBLE
         SLR   R2,R2               ZERO REGISTER FOR IC
         IC    R2,COMUCM           PICK UP CURRENT UCM ID
         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA
         USING CWA,R14             SET ADDRESSABILITY TO CWA
         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM
         BH    MSGRPT              YES, ERROR, NO AUTOMATIC REDIRECTION
         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY
         AR    R1,R2               COMBINE OFFSETS
         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY
         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID
         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET
         BO    MSGRPT              YES, SKIP AUTOMATIC REDIRECTION
         MVC   COMUCMA,CWACONA(R1) SET NEW AREA
         DROP  R14                 DROP ADDRESSABILITY TO CWA
MSGRPT   BAL   R10,MSGVCCA         VERIFY CCA (NO RETURN IF BAD)
         CLI   COMUCMA,0           TEST FOR DISPLAY AREA
         BZ    MSGGOOD             IF NOT, SKIP
         MVI   COMLINET,X'80'      SET CONTROL LINE
         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND
         MVI   COMLINET,X'20'      SET DATA LINE
MSGGOOD  DS    0H
         EJECT
***********************************************************************
*                                                                     *
*        EXAMINE THE COMMAND OPERANDS                                 *
*                                                                     *
***********************************************************************
CKOPNDS  BXH   R5,R6,JQESCAN       IF NO MORE EXIT
         L     R1,0(R5)            POINT TO OPERAND
         CLC   0(2,R1),=C'J='      SEE IF INDIVIDUAL JOBS REQUESTED
         BE    JOBOPT              YES, BRANCH
         CLC   0(5,R1),=C'JECL '   SEE IF JECL OPTION TAKEN
         BE    JECLOPT             YES, BRANCH
         CLC   0(5,R1),=C'JECL,'   SEE IF JECL OPTION TAKEN
         BE    JECLOPT             YES, BRANCH
         B     BADOPRND            NO, ERROR
***********************************************************************
*        SET THE JECL OPTION                                          *
***********************************************************************
         SPACE 1
JECLOPT  OI    MISCSW1,JECL        TURN ON THE JECL OPTION
         B     CKOPNDS             GO GET NEXT OPTION
         EJECT
***********************************************************************
*                                                                     *
*        EXTRACT THE JOB/TSU/STC RANGE FROM THE COMMAND BUFFER        *
*                                                                     *
***********************************************************************
JOBOPT   CLI   2(R1),C'J'          SEE IF BATCH JOBS REQUESTED
         BE    SLENT               YES, BRANCH
         CLI   2(R1),C'T'          SEE IF TSO USERS REQUESTED
         BE    QTENT               YES, BRANCH
         CLI   2(R1),C'S'          SEE IF STARTED TASKS REQUESTED
         BE    QSENT               YES, BRANCH
         B     BADOPRND            NO, BAD OPERAND
SLENT    OI    MISCSW1,JOB         SET JOB RANGE FLAG
         B     SETRANGE            AND ENTER COMMON SECTION
QTENT    OI    MISCSW1,TSO         SET TSU RANGE FLAG
         B     SETRANGE            AND ENTER COMMON SECTION
QSENT    OI    MISCSW1,STC         SET STC RANGE FLAG
SETRANGE LA    R14,3(R1)           POINT TO START OF JOB NUMBER
         LA    R1,3(R1)            POINT TO OPERAND
         LR    R2,R1               SAVE START OF OPERAND ADDRESS
         XR    R15,R15             SET LENGTH
SETRNG01 CLI   0(R14),C' '         END OF OPERAND
         BE    SETRNG02            YES, BRANCH
         CLI   0(R14),C'-'         END OF OPERAND
         BE    SETRNG02            YES, BRANCH
         CLI   0(R14),C','         END OF OPERAND
         BE    SETRNG02            YES, BRANCH
         CLI   0(R14),C'0'         SEE IF NUMERIC
         BL    BADOPRND            NO, ERROR
         CLI   0(R14),C'9'         SEE IF NUMERIC
         BH    BADOPRND            NO, ERROR
         LA    R15,1(R15)          ADD 1 TO LENGTH
         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR
         B     SETRNG01            LOOP
SETRNG02 LTR   R15,R15             TEST LENGTH
         BZ    BADOPRND            ZERO, ERROR
         CH    R15,=H'6'           TEST LENGTH
         BH    BADOPRND            GREATER THAN 6, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,PKJOBNO         PACK JOB NUMBER
         CVB   R15,DOUBLE          CONVERT TO BINARY
         LTR   R15,R15             TEST JOB NUMBER
         BZ    BADOPRND            YES, BRANCH
         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM
         BH    BADOPRND            YES, BRANCH
         STH   R15,LOWJOB          SAVE AS LOW JOB NUMBER
         STH   R15,HIGHJOB         AND AS HIGH JOB NUMBER
         CLI   0(R14),C'-'         SEE IF JOB RANGE REQUESTED
         BNE   CKOPNDS             NO, BRANCH
         LA    R14,1(R14)          INCREMENT PAST '-'
         LR    R2,R14              SAVE START OF OPERAND ADDRESS
         XR    R15,R15             SET LENGTH
SETRNG03 CLI   0(R14),C' '         END OF OPERAND
         BE    SETRNG04            YES, BRANCH
         CLI   0(R14),C','         END OF OPERAND
         BE    SETRNG04            YES, BRANCH
         CLI   0(R14),C'0'         SEE IF NUMERIC
         BL    BADOPRND            NO, ERROR
         CLI   0(R14),C'9'         SEE IF NUMERIC
         BH    BADOPRND            NO, ERROR
         LA    R15,1(R15)          ADD 1 TO LENGTH
         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR
         B     SETRNG03            LOOP
SETRNG04 LTR   R15,R15             TEST LENGTH
         BZ    BADOPRND            ZERO, ERROR
         CH    R15,=H'6'           TEST LENGTH
         BH    BADOPRND            GREATER THAN 6, ERROR
         BCTR  R15,0               MAKE MACHINE LENGTH
         EX    R15,PKJOBNO         PACK JOB NUMBER
         CVB   R15,DOUBLE          CONVERT TO BINARY
         LTR   R15,R15             TEST JOB NUMBER
         BZ    BADOPRND            YES, BRANCH
         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM
         BH    BADOPRND            YES, BRANCH
         STH   R15,HIGHJOB         AND AS HIGH JOB NUMBER
         AIF   ('&RANGE' NE 'NO').RANGE
         CLC   LOWJOB,HIGHJOB      SEE IF JOB RANGE REALLY SPECIFIED
         BE    CKOPNDS             NO, BRANCH
         MVC   COMMAND(L'MSG8),MSG8 SET NO JOB RANGE MESSAGE
         LA    R0,L'MSG8           SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
.RANGE   ANOP
         B     CKOPNDS             GO SEE IF OTHER OPERANDS
PKJOBNO  PACK  DOUBLE,0(0,R2)      *** EXECUTE ONLY ***
         EJECT
***********************************************************************
*                                                                     *
*        SCAN THE JOB QUEUE FOR THE JOB LIST                          *
*                                                                     *
***********************************************************************
         SPACE 1
JQESCAN  LH    R1,LOWJOB           LOAD JOB NUMBER
         $QLOC (R1)                GET JQE FOR THIS JOB NUMBER
         BZ    NEXTJQE             GET NEXT JQE IF NOT FOUND
         LR    R9,R1               SAVE JQE ADDRESS
         USING JQE,R9              SET ADDRESSABILITY TO JQE
         TM    MISCSW1,JOB+STC+TSO SEE IF LOOKING FOR INDIVIDUAL JOB
         BZ    JFND                NO, GO PROCESS JOB LIST REQUEST
         TM    JQEFLAG3,JQE3JOB    IS THIS A BATCH JOB
         BNZ   CKSTC               NO, SEE IF STARTED TASK
         TM    MISCSW1,JOB         ARE WE LOOKING FOR A BATCH JOB
         BO    JQEFND              YES, GO PROCESS IT
         B     NEXTJQE             NO, GET NEXT JQE
CKSTC    TM    JQEFLAG3,JQE3STC    IS THIS A STC
         BNO   CKTSU               NO, SEE IF A TSO USER
         TM    MISCSW1,STC         ARE WE LOOKING FOR A STARTED TASK
         BO    JQEFND              YES, GO PROCESS IT
         B     NEXTJQE             NO, GET NEXT JQE
CKTSU    TM    MISCSW1,TSO         ARE WE LOOKING FOR A TSO USER
         BO    JQEFND              YES, GO PROCESS IT
NEXTJQE  LH    R1,LOWJOB           LOAD PREVIOUS JOB NUMBER
         LA    R1,1(R1)            ADD 1 TO JOB NUMBER
         STH   R1,LOWJOB           SAVE NEW JOB NUMBER
         CH    R1,HIGHJOB          SEE IF END OF RANGE
         BNH   JQESCAN             NO, LOOP
         TM    MISCSW1,JOB+STC+TSO SEE IF LOOKING FOR INDIVIDUAL JOB
         BZ    TSTGOOD2            NO, GO PROCESS JOB LIST REQUEST
         TM    MISCSW1,FOUND       SEE IF ANY JOBS FOUND
         BO    TSTGOOD1            YES, SEE IF GOOD JOB FOUND
         MVC   COMMAND(L'MSG1),MSG1 SET NO JOBS FOUND MESSAGE
         LA    R0,L'MSG1           SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
TSTGOOD1 TM    MISCSW1,GOOD        SEE IF A GOOD JOB FOUND
         BO    EXIT8               YES, BYPASS ERROR MESSAGE
         TM    MISCSW1,NOSETUP     NON-SETUP JOB REQUESTED
         BZ    EXIT8               NO, AN INDIVIDUAL MSG ALREADY SENT
         MVC   COMMAND(L'MSG7),MSG7 SET JOB NOT IN HELD QUEUE MESSAGE
         LA    R0,L'MSG7           SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
TSTGOOD2 TM    MISCSW1,FOUND       SEE IF ANY JOBS FOUND
         BO    EXIT8               YES, GET OUT
         MVC   COMMAND(L'MSG10),MSG10 SET NO JOBS FOUND MESSAGE
         LA    R0,L'MSG10          SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
JQEFND   MVI   COMMAND,C' '        BLANK ENTIRE
         MVC   COMMAND+1(199),COMMAND  COMMAND
         MVC   COMMAND+201(200),COMMAND+200  AREA
         LH    R1,LOWJOB           LOAD JOB NUMBER
         MVC   COMMAND(3),=C'JOB'  ASSUME BATCH JOB
         TM    JQEFLAG3,JQE3JOB    IS IT A BATCH JOB
         BZ    JQEFND01            YES, BRANCH
         MVC   COMMAND(3),=C'STC'  ASSUME STARTED TASK
         TM    JQEFLAG3,JQE3STC    IS IT A STC
         BO    JQEFND01            YES, BRANCH
         MVC   COMMAND(3),=C'TSU'  MUST BE A TSO USER
JQEFND01 OI    MISCSW1,FOUND       TURN ON JOB FOUND INDICATOR
         TM    MISCSW1,JECL        SEE IF WANT JECL/JOB CARD
         BO    JQEFND02            YES, DISPLAY IT ANYWAY
         TM    JQEXFLG2,JQEXSETP   SEE IF JOB HAS SETUP CARDS
         BZ    NOTSETUP            NO, BYPASS THIS JOB
JQEFND02 CVD   R1,DOUBLE           CONVERT JOB NUMBER TO PACKED
         MVC   DBL(6),=X'402020202120' SET EDIT MASK
         ED    DBL(6),DOUBLE+5     EDIT JOB NUMBER
         MVC   COMMAND+3(5),DBL+1  MOVE JOB NUMBER TO MESSAGE
         MVC   COMMAND+10(8),JQEJNAME MOVE JOB NAME TO MESSAGE
         LH    R14,$JQEMSKL        GET JQE SPOOL MASK LEN-1
         EX    R14,MVSPMASK        SAVE SPOOL MASK USED BY THIS JOB
         NC    $SPMSKWA,$SPLSLCT   'AND' WITH QUALIFYING SPOOLS
         EX    R14,CKSPMASK        SEE IF ALL REQUIRIED SPOOLS AVAIL
         BNE   NOSPOOLS            NO, ERROR
JQEFND03 MVI   MISCSW2,0           TURN OFF MISC SWITCHES
         TM    JQEFLAG3,JQE3SYSD   IS THIS A JES2 CREATED JOB
         BZ    JQEFND04            NO, BRANCH
         MVC   COMMAND+19(L'MSG2),MSG2 SET MSG TEXT
         $CWTO L=L'MSG2+19,MSGID=999 WRITE THE MSG TO THE OPERATOR
         B     NEXTJQE             GO GET NEXT JQE
JQEFND04 LH    R3,$BUFSIZE         LOAD LENGTH OF BUFFER
         SH    R3,=Y($SLBLEN-(BUFSTART-BFPDSECT)) SUBTR LEN OF BASIC
         STH   R3,WRKLEN           SAVE LENGTH OF WORK AREA
         LA    R2,$SLWORK+$SLBLEN  POINT TO CARD SECTION OF BUFFER
         ST    R2,CURRCARD         SAVE ADDRESS OF FIRST CARD
         XR    R5,R5               SET MOVE LENGTH TO ZERO
         ICM   R5,B'1000',=C' '    SET PAD CHARACTER
         MVCL  R2,R4               BLANK CARD AREA
         LH    R2,WRKLEN           RELOAD LENGTH OF WORK AREA
         SRDA  R2,32               SHIFT TO ODD REG OF PAIR
         D     R2,=F'70'           CALCULATE AVAILABLE CARD SLOTS
         STH   R3,CDMAX            SAVE MAXIMUM SLOTS
         XC    CDCNT,CDCNT         ZERO THE CARD COUNT
         LA    R3,PCEDADCT         POINT TO DA DCT
         L     R4,BUFADDR          GET A BUFFER ADDRESS
         USING BFPDSECT,R4         SET ADDRESSABILITY TO THE BUFFER
         MVI   PCEDEVTP,PCEDARD    INDICATE READ REQUEST
         ST    R4,PCEBUFAD         SET THE BUFFER ADDRESS
         L     R15,JQETRAK         GET THE JCT TRACK ADDRESS
         ST    R15,PCESEEK         SET THE TRACK ADDRESS
         LA    R15,IOBCCW1         LOAD START ADDRESS OF CCW'S
         ST    R15,IOBSTART        STORE ADDRESS IN BUFFER
         $EXCP (R3)                READ IN THE JCT
WAITIO1  $WAIT IO                  WAIT FOR IO TO COMPLETE
         TM    BUFECBCC,X'7F'      TEST COMPLETION OF OUR IO
         BZ    WAITIO1             NOT COMPLETE, GO WAIT AGAIN
         BM    IOERROR             GO PROCESS I/O ERROR
***********************************************************************
*                                                                     *
*        AT THIS POINT WE HAVE SUCCESSFULLY READ THE JCT              *
*                                                                     *
***********************************************************************
         LR    R10,R4              MOVE JCT ADDRESS TO REG 10
         USING JCT,R10             SET ADDRESSABILITY TO JCT
         L     R0,$JOBQPTR         GET ADDR OF JOB QUEUE ORIGIN
         AL    R0,JCTJQE           ADD JQE OFFSET FROM JCT
         CLR   R0,R9               SEE IF IT MATCHES OUR JQE ADDRESS
         BNE   IOERROR             NO, ERROR
***********************************************************************
*                                                                     *
*        AT THIS POINT WE HAVE A VALID JCT FOR THE JOB                *
*                                                                     *
***********************************************************************
         L     R15,JCTIOT          GET FIRST IOT TRACK ADDR
READIOT  ST    R15,PCESEEK         SET SEEK ADDRESS FOR READ
         $EXCP (R3)                READ THE IOT
WAITIO2  $WAIT IO                  WAIT FOR IO TO COMPLETE
         TM    BUFECBCC,X'7F'      TEST COMPLETION OF OUR IO
         BZ    WAITIO2             NOT COMPLETE GO WAIT AGAIN
         BM    IOERROR             GO PROCESS I/O ERROR
***********************************************************************
*                                                                     *
*        AT THIS POINT WE HAVE SUCCESSFULLY READ THE IOT              *
*        NOW ATTEMPT TO FIND THE JCL IMAGES PDDB                      *
*                                                                     *
***********************************************************************
         DROP  R10                 DROP ADDRESSABILITY TO JCT
         LR    R10,R4              SAVE ADDRESS OF IOT BUFFER
         DROP  R4                  DROP ADDRESSABILITY TO BUFFER
         USING IOT,R4              SET ADDRESSABILITY TO IOT
         L     R10,IOTPDDB         LOAD OFFSET TO FIRST PDDB
         LA    R10,0(R10,R4)       POINT TO FIRST PDDB IN THIS IOT
         L     R15,IOTPDDBP        LOAD OFFSET PAST LAST PDDB
         LA    R15,0(R15,R4)       POINT PAST LAST PDDB IN THIS IOT
PDDBLOOP CR    R15,R10             LAST PDDB IN THIS IOT
         BNH   NEXTIOT             YES, GO GET NEXT IOT
         CLC   PDBDSKEY-PDB(2,R10),=Y(PDBINJCL) JCL IMAGE DATA SET
         BE    READJCL1            YES, GO PROCESS IT
         LA    R10,PDBLENG(,R10)   NO, POINT TO NEXT PDDB IN IOT
         B     PDDBLOOP            GO CHECK NEXT PDDB
NEXTIOT  ICM   R15,B'1111',IOTIOTTR   YES, GET NEXT IOT TRACK ADDRESS
         BNZ   READIOT             GO READ NEXT IOT IF PRESENT
         MVC   COMMAND+19(L'MSG3),MSG3 SET IN MSG TEXT
         $CWTO L=L'MSG3+19,MSGID=999 WRITE THE MSG TO THE OPERATOR
         B     ENDJQE              GO CLEANUP FOR THIS JOB
         DROP  R4                  DROP ADDRESSABILITY TO IOT
         USING BFPDSECT,R4         SET ADDRESSABILITY TO THE BUFFER
READJCL1 L     R15,PDBMTTR-PDB(R10) POINT TO START OF JCL DATA SET
READJCL2 ST    R15,PCESEEK         SET FOR READ
         $EXCP (R3)                READ THE DATA SET
WAITIO3  $WAIT IO                  WAIT FOR IO TO COMPLETE
         TM    BUFECBCC,X'7F'      TEST COMPLETION OF OUR IO
         BZ    WAITIO3             NOT COMPLETE GO WAIT AGAIN
         BM    IOERROR             GO PROCESS I/O ERROR
***********************************************************************
*                                                                     *
*        AT THIS POINT WE HAVE A BUFFER CONTAINING THE JCL            *
*        STATEMENTS FOR A JOB                                         *
*                                                                     *
***********************************************************************
         LA    R5,BUFSTART+10      POINT TO DATA
         SLR   R6,R6               CLEAR REGISTER FOR IC
GETCARD  IC    R6,0(,R5)           GET LENGTH
         TM    MISCSW2,JCEND       HAS THE JOB CARD BEEN FINISHED
         BO    CKCARD              YES, BRANCH
JOBCD    TM    MISCSW2,JCFND       SEE IF FIRST JOB CARD FOUND
         BO    JOBCD1              YES, BRANCH
         OI    MISCSW2,JCFND       TURN ON JOB CARD FOUND SWITCH
         B     CTLFND              GO SAVE THIS CARD
JOBCD1   CLC   3(3,R5),=C'// '     CONTINUATION OF JOB CARD
         BE    CTLFND              YES, GO SAVE IT
         OI    MISCSW2,JCEND       TURN ON END OF JOB CARD PROCESSING
CKCARD   CLC   3(3,R5),=C'//*'     IS IT POTENTIAL JES2 JECL CARD
         BNE   NEXTCARD            NO, IGNORE IT.
***********************************************************************
*                                                                     *
*        AT THIS POINT WE HAVE A JES2 JECL CONTROL CARD.              *
*        SEARCH THE JECL TABLE FOR THOSE THAT WE ARE INTERESTED       *
*        IN.                                                          *
*                                                                     *
***********************************************************************
         XR    R15,R15             CLEAR REGISTER FOR IC
         LA    R14,CTLTABLE        BEGINNING OF TABLE.
CTLLOOP  CLI   0(R14),X'FF'        SEE IF END OF TABLE
         BE    NEXTCARD            YES, IGNORE THIS CARD
         IC    R15,0(R14)          LOAD MACHINE LENGTH OF THIS ENTRY
         EX    R15,COMPTBL         SEE IF ONE OF OUR CONTROL CARDS
         BE    CTLFND              YES, GO PROCESS
         LA    R14,9(,R14)         POINT TO NEXT TABLE ENTRY
         B     CTLLOOP             LOOP
COMPTBL  CLC   6(0,R5),1(R14)      *** EXECUTE ONLY ***
NEXTCARD LA    R5,3(R5,R6)         POINT TO NEXT CARD IN THE BUFFER
         CLI   0(R5),X'FF'         END OF THE BUFFER
         BE    NEXTBUFF            YES, GO GET NEXT BUFFER
         CLI   1(R5),X'FF'         TEST NEXT BYTE ALSO FOR END OF BUFF
         BE    NEXTBUFF            YES, GO GET NEXT BUFFER
         B     GETCARD             TO PROCESS NEXT CARD
CTLFND   L     R15,CURRCARD        LOAD POINTER TO NEXT SAVE CARD ENTRY
         BCTR  R6,0                MAKE MACHINE LENGTH
         EX    R6,MOVECARD         MOVE CARD TO SAVE CARD ENTRY
         LA    R6,1(R6)            RESTORE LENGTH
         LA    R15,70(R15)         POINT TO NEXT CARD TABLE ENTRY
         ST    R15,CURRCARD        AND SAVE ADDRESS
         LH    R15,CDCNT           LOAD NUMBER OF ENTRIES IN TABLE
         LA    R15,1(,R15)         ADD 1 TO NUMBER
         STH   R15,CDCNT           SAVE NEW NUMBER OF ENTRIES IN TABLE
         CH    R15,CDMAX           HAVE WE REACHED OUR LIMIT
         BL    NEXTCARD            NO, GO GET NEXT CARD
         B     PUTCDS              YES, QUIT LOOKING
NEXTBUFF ICM   R15,15,HDBNXTRK     NEXT BUFFER ADDRESS
         BNZ   READJCL2            END OF CHAIN IF ZERO
***********************************************************************
*                                                                     *
*        AT THIS POINT WE HAVE A SAVED ALL JECL CONTROL CARDS         *
*        AND ARE READY TO WRITE THEM TO THE OPERATOR.                 *
*                                                                     *
***********************************************************************
PUTCDS   OI    MISCSW1,GOOD        TURN ON GOOD JOB PROCESSED IND
         LA    R2,$SLWORK+$SLBLEN  POINT TO CARD SECTION OF BUFFER
         LH    R5,CDCNT            LOAD NUMBER OF ENTRIES IN TABLE
         TM    MISCSW1,JECL        SEE IF ALL JECL WANTED
         BO    PUTLP2              YES, BRANCH
         TM    JQEXFLG2,JQEXSETP   HAS JOB EVER BEEN SETUP
         BZ    NOSET               NO, ERROR
         MVC   COMMAND+19(14),=C'AWAITING SETUP' ASSUME STILL WAITING
         TM    JQEXFLG2,JQEXWSET   SEE IF WAITING FOR SETUP
         BO    PUTCDS1             YES, BRANCH
         MVC   COMMAND+19(14),=C'HAS BEEN SETUP' SET ALREADY SETUP MSG
PUTCDS1  $CWTO L=33,MSGID=900      WRITE FIRST LINE OF MESSAGE
         MVC   COMMAND(12),=C'JOB SETUP:  ' IDENTIFY FIRST SETUP MSG
PUTLP1   CLC   0(8,R2),=C'//*SETUP' SEE IF THIS IS A SETUP CARD
         BNE   PUTLP1A             NO, BRANCH
         MVC   COMMAND+12(61),9(R2) MOVE THE MESSAGE PORTION TO BUFFER
         $CWTO L=72,MSGID=900      WRITE THE MSG TO THE OPERATOR
         MVC   COMMAND(10),=10C' ' BLANK THE FIRST LINE TITLE AREA
PUTLP1A  LA    R2,70(R2)           POINT TO THE NEXT CARD
         BCT   R5,PUTLP1           LOOP
         B     ENDJQE              GET OUT
PUTLP2   MVC   COMMAND+10(70),0(R2) MOVE A CARD TO THE WTO BUFFER
         $CWTO L=80,MSGID=900      WRITE THE MSG TO THE OPERATOR
         LA    R2,70(R2)           POINT TO THE NEXT CARD
         BCT   R5,PUTLP2           LOOP
ENDJQE   B     NEXTJQE             GO GET NEXT JQE
IOERROR  $IOERROR (R4)             ISSUE IOERROR MESSAGE
         MVC   COMMAND+19(L'MSG4),MSG4 MOVE ERROR MSG TO BUFFER
         LA    R0,L'MSG4+19        SET LENGTH OF MESSAGE
         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     ENDJQE              GO CLEAN UP FOR NEXT JOB
NOTSETUP OI    MISCSW1,NOSETUP     TURN ON NOT SETUP IND
         B     NEXTJQE             GO GET NEXT JQE
NOSPOOLS MVC   COMMAND+19(L'MSG5),MSG5 MOVE MESSAGE TO BUFFER
         LA    R0,L'MSG5+19        SET LENGTH
         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     NEXTJQE             GO GET NEXT JQE
NOSET    MVC   COMMAND+19(L'MSG9),MSG9 MOVE MESSAGE TO BUFFER
         LA    R0,L'MSG9+19        SET LENGTH
         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     NEXTJQE             GO GET NEXT JQE
         SPACE 1
MOVECARD MVC   0(*-*,R15),3(R5)       *** EXECUTE ONLY ***
MVSPMASK MVC   $SPMSKWA(0),JQESUMSK   *** EXECUTE ONLY ***
CKSPMASK CLC   $SPMSKWA(0),JQESUMSK   *** EXECUTE ONLY ***
*
         DROP  R4                  DROP ADDRESSABILITY TO BUFFER / IOT
         EJECT
***********************************************************************
*                                                                     *
*        BUILD BASIC PORTION OF MESSAGE                               *
*                                                                     *
***********************************************************************
JFND     TM    JQEXFLG2,JQEXWSET   SEE IF WAITING FOR SETUP
         BNO   NEXTJQE             NO, GO GET NEXT JQE
         MVI   QBITS,QCNV+QXEQ     EXECUTION QUEUE ONLY
         MVI   QBITS+1,0           NO ACTIVE JOBS OR DEVICE ACTIVITY
         MVI   QMISC,SYSALL        ALL SYSTEMS
         MVI   QFILT1,0            NO SPECIAL FILTERING
         MVI   QFILT2,0            NO SPECIAL FILTERING
         MVI   QCLASS,0            ZERO THE XEQ/CNV CLASS
         XC    OWNERID,OWNERID     NO OWNERID SELECTION
         L     R10,BUFADDR         GET A BUFFER ADDRESS
***********************************************************************
*                                                                     *
*        CALL EXIT 255 TO FORMAT THE JOB INFORMATION                  *
*                                                                     *
***********************************************************************
         LA    R1,QBITS            POINT TO EXIT PARM LIST
EXIT255  $EXIT 255,ENVIRON=JES2,MAXRC=8 CALL FORMAT ROUTINE
         CH    R15,=H'8'           SEE IF CONSOLE BUFFER SHORTAGE
         BE    EXIT8               YES, GET OUT
         CH    R15,=H'4'           SEE IF JOB PASSED FILTERING
         BE    NEXTJQE             NO, DO NOT TURN ON JOB FOUND
         OI    MISCSW1,FOUND       TURN ON JOB FOUND INDICATOR
         B     NEXTJQE             GO GET NEXT JOB
         EJECT
**********************************************************************
*                                                                    *
*             SUBROUTINE TO VERIFY CONSOLE/AREA                      *
*                                                                    *
**********************************************************************
         SPACE 1
MSGVCCA  TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM
         BOR   R10                 YES, UCM AND AREA ARE OK
         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA
         USING CWA,R2              SET ADDRESSABILITY TO CWA
         MVC   XASCID(1),COMUCM    SET UCM ID
         MVC   XASDID(1),COMUCMA   SET AREA ID
         CLI   XASDID,0            SEE IF AREA ID SPECIFIED
         BNZ   MSGSSAOP            YES, BRANCH
         MVI   XASDID,C'Z'         NO,  FORCE AREA Z
MSGSSAOP MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT
         MVI   XAN,X'22'           SET ID FOR VERIFIER
         MODESET EXTKEY=ZERO       GET KEY 0
         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE
         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24
         BALR  R14,R15             ENTER IT
         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE
         MODESET EXTKEY=HASP       RETURN TO KEY 1
         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR
         BNHR  R10                 NO, RETURN TO CALLER
         SLR   R3,R3               CLEAR REGISTER FOR ICM
         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID
         MVI   COMUCMA,0           FORCE NO DISPLAY AREA
         CH    R15,=H'12'          SEE IF CONSOLE DOWN
         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE
         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO
         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD
         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND
         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT
         STC   R3,MBVINVA          SET AREA
         SRL   R3,8                ALIGN CONSOLE ID
         CVD   R3,$DOUBLE          CONVERT TO PACKED
         MVC   DBL(4),=X'F0212020' SET EDIT MASK
         ED    DBL(4),$DOUBLE+6    EDIT CONSOLE ID TO AREA
         MVC   MBVINVC,DBL+2       MOVE CONSOLE ID TO MESSAGE
         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER
         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE
         B     EXIT8               GET OUT
         DROP  R2                  DROP ADDRESSABILITY TO CWA
         EJECT
**********************************************************************
*                                                                    *
*       R E D I R E C T   R O U T I N E   C O N S T A N T S          *
*                                                                    *
**********************************************************************
         SPACE 1
MOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX
MBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '
MBVINVL  EQU   *-MBVINV
MBVINVC  EQU   COMMAND+MBVINVL-16,2
MBVINVA  EQU   MBVINVC+2,1
FBLFLG   EQU   COMEWORK+2          FLAG BYTE
COMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER
FBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM
FBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED
FBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED
         EJECT
***********************************************************************
*        CONSTANTS FOR $SL                                            *
***********************************************************************
         SPACE 3
BLANKS   DC    CL20' '             STRING OF 20 BLANKS
         SPACE 3
MSG1     DC    CL16'JOB(S) NOT FOUND'
MSG2     DC    C' JES2 GENERATED JOB, CANNOT BE DISPLAYED'
MSG3     DC    C' CANNOT LOCATE JCL IMAGES PDDB'
MSG4     DC    C' I/O ERROR ON SPOOL IN SL COMMAND, COMMAND ABORTED'
MSG5     DC    C' REQUIRED SPOOL VOLUMES NOT MOUNTED'
MSG6     DC    C' INVALID OPERAND'
MSG7     DC    C'JOB(S) NOT IN SETUP QUEUE'
MSG8     DC    C'JOB RANGE NOT ALLOWED FOR THE SL COMMAND'
MSG9     DC    C'NO SETUP INFORMATION AVAILABLE'
MSG10    DC    C'NO JOBS AWAITING SETUP!'
         SPACE 3
CTLTABLE DS    0H                  CONTROL CARD TABLE
         DC    X'06',CL8'JOBPARM '
         DC    X'05',CL8'NOTIFY  '
         DC    X'04',CL8'SETUP   '
         DC    X'04',CL8'ROUTE   '
         DC    X'03',CL8'XMIT    '
         DC    X'02',CL8'XEQ     '
         DC    X'05',CL8'THREAD  '
         DC    X'06',CL8'EXCLUDE '
         DC    X'06',CL8'RELEASE '
         DC    X'FF'
         EJECT
***********************************************************************
*                                                                     *
*        INVALID $SL OPERAND                                          *
*                                                                     *
***********************************************************************
         SPACE 1
BADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND
         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG
         MVC   COMMAND+9(L'MSG6),MSG6 SET ERROR MESSAGE
         LA    R0,L'MSG6+9         SET MESSAGE LENGTH
         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR
         B     EXIT8               GET OUT
         EJECT
***********************************************************************
*                                                                     *
*                    E X I T     R O U T I N E S                      *
*                                                                     *
*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *
*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *
*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *
*        RC = 12 - TERMINATE ISSUING THE "OK" MESSAGE                 *
*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *
*                                                                     *
***********************************************************************
EXIT0    LA    R15,0               SET RETURN CODE TO 0
         $RETURN RC=(R15)          RETURN TO JES2
EXIT8    L     R10,BUFADDR         LOAD BUFFER ADDRESS
         $FREEBUF (R10)            FREE THE BUFFER
         $FREEBUF (R8)             FREE THE WORK AREA
         LA    R15,8               SET RETURN CODE TO 8
         $RETURN RC=(R15)          RETURN TO JES2
         EJECT
         LTORG
         EJECT
         $MODEND
         END
