         TITLE 'IKJEFLD1 -- Logon Pre-Prompt Exit '
***********************************************************************
*
*  MODULE NAME = IKJEFLD1 for TSO/E V2
*
*  DESCRIPTIVE NAME = Logon Pre-Prompt Exit Routine for Directed Logon
*
*  FUNCTION = Create a CIB to direct logon process to a
*             user-specified subsystem for JCL conversion.
*
*  OPERATION = Get CSCB pointer from the ASCB and create a valid
*              STC communication CIB (same as SUB= keyword on the
*              START command).
*
*  NOTES:
*
*    INSTALLATION = See TSO/E Customization boks.
*                   Link Edit attributes: RENT REUS REFR.
*
*    USAGE        = When logging on to TSO, prefix the User ID with
*                   a '?' (question mark - for example: ?MYUSER) or
*                   just enter a '?' instead of the User ID.  The exit
*                   will prompt for the subsystem name to be used for
*                   logon.
*
*                   Some users (e.g., sysprogs) may wish to see the
*                   prmpt for every logon.  To activate this, see the
*                   instructions given below under CUSTOMIZATION.
*
*    CUSTOMIZATION= Locate the comment line
*                     '---->  LIST OF EXPLICITLY SELECTED USERS'
*                   and add the desired CLC/BE instructions.
*                   e.g., CLC   =CL7'KEVIN  ',USERID SPECIAL USER ?
*                         BE    TRYAGAIN             YES - PROMPT
*
*    DEPENDENCIES = The following ZAP is required only when
*                   a logon under 'MSTR' subsystem is needed.
*                   The ZAP offset may vary from TSO/E release
*                   to release. To find the exact ZAP location,
*                   PZAP LMOD IKJEFLA1 CSECT IKJEFLB, locate
*                   hex string '0000009DC9D2D1C5C6D3C340' and
*                   rework the ZAP.
*
*     =======================================================
*     ==> NAME IKJEFLA1 IKJEFLB              * TSO/E 2.5  <==
*     ==> VER 0924 0000009D,C9D2D1C5C6D3C340 *....IKJEFLC <==
*     ==> REP 0924 0000009F,C9D2D1C5C6D3C340 *....IKJEFLC <==
*     =======================================================
*
*  SERIALIZATION = CSCB ENQ resource SYSIEFSD/Q10
*
*  RESTRICTIONS = Only one STC communication keyword is permitted
*                 in each CIB.  STC communication CIBs must be
*                 chained before the START CIB (says IBM - but not
*                 quite true)
*
*  REGISTER CONVENTIONS = Standard (SEE CODE FOR REGISTER EQUATES)
*                         IEEVSTAR does not save or restore registers
*
*  MODULE TYPE = CSECT
*    PROCESSOR = High Level Assembler
*    MODULE SIZE = See assembled length
*    ATTRIBUTES = Pagable LPA, key 8, problem state,
*                 reentrant, refreshable
*
*  ENTRY POINT = IKJEFLD1
*    PURPOSE = See function above
*    INPUT = Register 1 points to parameter list described in
*            TSO/E publications.
*
*  EXIT-NORMAL = Normal
*
*  EXIT-ERROR = Should not occur
*
*  EXTERNAL REFERENCES:
*    ROUTINES = None
*    DATA AREAS = Parameter list passed to IKJEFLD1 (see TSO/E pubs)
*    CONTROL BLOCKS = ASCB  - Read
*                     CSCB  - Read/Write
*                     CIB   - Create(SP=245)/Write
*
*  MACROS = GETMAIN, FREEMAIN, ENQUEUE, DEQUEUE
*
*  ABEND CODES = None
*
***********************************************************************
         EJECT
IKJEFLD1 CSECT
IKJEFLD1 AMODE 24
IKJEFLD1 RMODE 24
***********************************************************************
*  Equates
***********************************************************************
&M       SETC  'IKJEFLD1'          Module name
RETRYCT  EQU   10                  ESTAE retry count
*
R0       EQU   0                   Parameter pass register.
R1       EQU   1                   Input ptr to chn - used in TRT inst.
R2       EQU   2                   Function byte return from TRT.
R3       EQU   3                   Work register.
R4       EQU   4                   Work register.
R5       EQU   5                   Work register.
R6       EQU   6                   Work register.
R7       EQU   7                   Work register.
R8       EQU   8                   Work register.
R9       EQU   9                   Work register.
R10      EQU   10                  SDT base register.
R11      EQU   11                  Chain base register.
RBASE    EQU   12                  Base register.
R13      EQU   13                  Working storage base reg
R14      EQU   14                  Return register.
R15      EQU   15                  Link register.
D0       EQU   0                   Used for offsets,lengths,etc.
D1       EQU   1
D2       EQU   2
D3       EQU   3
D4       EQU   4
D5       EQU   5
D8       EQU   8
D23      EQU   23
D24      EQU   24
D128     EQU   128
D256     EQU   256
CBLANK   EQU   C' '
ZERO     EQU   0                   Constant zero
ONE      EQU   1                   Constant one
THREEBIT EQU   3                   Length to shift for
*                                  Multiplication by eight
FOUR     EQU   4                   Constant four
NOTEQU   EQU   7                   Not equal
EIGHT    EQU   8                   Constant eight
SIXTEEN  EQU   16                  Constant sixteen
         EJECT
         SAVE  (14,12),,===>IKJEFLD1-&SYSDATE.-&SYSTIME<===
         LR    RBASE,R15           Load base register
         USING IKJEFLD1,RBASE  *** Synchronize base register

***********************************************************************
*                                                                     *
*               Obtain Working Storage                                *
*                                                                     *
***********************************************************************
         LR    R3,R1               Save parmlist addr
         LA    R0,VSTDATLN         Length of storage to get
         GETMAIN R,LV=(0)          Get working storage
         ST    R13,4(,R1)          Chain save areas
         ST    R1,8(,R13)          (same)
         SLR   R15,R15             (same)
         ST    R15,8(,R1)          (same)
         LR    R13,R1              Load save area base register
         USING VSTWORK,R13     *** Synchronize working storage DSECT
         LA    R1,VSTDLTH          Pick up working storage length
         LA    R0,VSTWORKE         Pont at working storage
         MVCL  R0,R14              Clear working storage

***********************************************************************
*                                                                     *
*               Establish Error Recovery Environment                  *
*                                                                     *
***********************************************************************
         ST    RBASE,DSBASE        Save base for abend retry
         LA    R0,GOOUT            Establish default retry address
         ST    R0,DSRETR           (same)
         MVC   ESTALSTD(ESTALSTL),ESTALST Copy model ESTAE parm list
         L     R2,=A(ESTAE)        Point to recovery routine.
*                                *********************
         ESTAE (2),CT,           *                   *                 +
               PARAM=(13),       *     Establish     *                 +
               ASYNCH=YES,       *     Error         *                 +
               PURGE=NONE,       *     Recovery      *                 +
               MF=(E,ESTALSTD)   *                   *
*                                *********************
         LTR   R15,R15            ESTAE activated ?
         BZ    *+4+4              Branch if yes
         MVI   DSRTRC,255         Indicate no ESTAE and proceed anyway

***********************************************************************
*                                                                     *
*               Force MAIL and NOTICES                                *
*                                                                     *
***********************************************************************
         L     R1,036(,R3)         Point at control switches' descr
         L     R1,008(,R1)         Point at switches
         OI    002(R1),X'C0'       Force MAIL and NOTICES on

***********************************************************************
*                                                                     *
*               Look for '?' and/or User ID                           *
*                                                                     *
***********************************************************************
         L     R1,000(,R3)         Point at logon buf descriptor
         L     R2,004(,R1)         Pick up logon buf length
         L     R1,008(,R1)         Point at logon buffer
         SH    R2,=AL2(6+7)        Compute loop counter
         BNP   GOOUT               Return - something is wrong
FNDCMD   DS    0H
         CLC   =CL6'LOGON ',0(R1)  LOGON command ?
         BE    GOTLOG              Branch if yes
         LA    R1,1(,R1)           Advance pointer
         BCT   R2,FNDCMD           Continue searching
         B     GOOUT               Return - Not a LOGON command
GOTLOG   DS    0H
         LA    R1,6(,R1)           Point past 'LOGON ' in command
FNDUID   DS    0H
         CLI   0(R1),C'?'          Found a question mark ?
         BE    ERASEQ              Branch if yes
         CLI   0(R1),C' '          Found a User ID ?
         BNE   GOTUID              Branch if yes
         LA    R1,1(,R1)           Advance pointer
         BCT   R2,FNDUID           Continue searching
         B     GOOUT               Return - no User ID specified
GOTUID   DS    0H
         MVC   USERID,0(R1)        Copy User ID
         OC    USERID,VBLANKS      Convert to upper case

*=====================================================================*
* ---->  LIST OF EXPLICITLY SELECTED USERS                            *
*=====================================================================*
         CLC   =CL7'SYSPROG',USERID SPECIAL USER ?
         BE    TRYAGAIN             YES - PROMPT
*=====================================================================*
* ---->  END LIST OF EXPLICITLY SELECTED USERS                        *
*=====================================================================*

         B     GOOUT               Return

ERASEQ   DS    0H
         MVI   0(R1),C' '          Erase the question mark

***********************************************************************
*                                                                     *
*               Prompt User for Subsystem Name                        *
*                                                                     *
***********************************************************************
TRYAGAIN DS    0H
         LA    R0,L'PROMPT         Length for TPUT
         LA    R1,PROMPT           Address for TPUT
         TPUT  (1),(0)             Issue TPUT to prompt the user
         MVC   SSNAME,=CL8' '      Clear SSNAME field
         LA    R0,L'SSNAME         Length for TGET
         TGET  SSNAME,(0)          Issue TGET to obtain user's response
         LTR   R15,R15             TGET successful ?
         BZ    SOMETING            Branch if yes
         CH    R15,=H'12'          Too much data ?
         BNE   GOOUT               Branch if not
CLEANBUF DS    0H
         LA    R0,L'SSNAME         Length for TGET
         TGET  SSNAME,(0)          Issue TGET to obtain overflow data
         LTR   R15,R15             TGET successful ?
         BNZ   CLEANBUF            Branch if not
         B     TRYAGAIN            Go prompt the user again
SOMETING DS    0H
         OC    SSNAME,VBLANKS      Convert to upper case
         CLC   SSNAME,=CL4'NONE'   User selected 'NONE'
         BE    GOOUT               Branch if yes (use primary JES)
         CLC   SSNAME,=CL8' '      User did not make a selection ?
         BE    GOOUT               Branch if yes (use primary JES)

***********************************************************************
*                                                                     *
*               Acquire/Format the CIB                                *
*                                                                     *
***********************************************************************
         USING PSA,R0          *** Synchronize PSA DSECT
         L     R2,PSAAOLD          Load ASCB address
         USING ASCB,R2         *** Synchronize ASCB DSECT
         L     R11,ASCBCSCB        Load CSCB address
         DROP  R2              *** Drop ASCB DSECT
         USING CHAIN,R11       *** Synchronize CSCB DSECT
         IPK   ,                   Save current PSW key
         STC   R2,KEYSAVE          (same)
         SPKA  X'00'               Switch to PSW key zero
         LA    R0,STCCIBLN         Length to get for CIB
         O     R0,=A(X'F5000000')  Place subpool in high-order byte
         GETMAIN R,LV=(0)          Get STC communication CIB
         LR    R10,R1              Place address in R10
         USING VSTARCIB,R10    *** Synchronize CIB DSECT
         LA    R1,*+4+4+2          Switch to 31-bit mode
         O     R1,=XL4'80000000'   (same)
         BSM   0,R1                (same)
         XC    VSTARCIB(STCCIBLN),VSTARCIB Zero out the CIB
         MVI   CIBLEN,STCCIBLN/EIGHT Set CIB length in doublewords
         MVI   CIBVERB,CIBSTCOM    Set command code
         MVC   CIBCONID,CHUCMP     Set console ID
         MVC   CIBDATLN,ICIBDLEN   Set data length in bytes
         MVC   CIBDATA,VBLANKS     Blank out data area
         MVC   CIBDATA(4),=CL4'SUB=' Put SUB= keyword into CIB data
         MVC   CIBDATA+4(4),SSNAME Add subsystem name after SUB=
         LA    R1,*+4+2           Switch to 24-bit mode
         BSM   0,R1               (same)

***********************************************************************
*                                                                     *
*               Serialize the CSCB Chain                              *
*                                                                     *
***********************************************************************
         MVC   ENQLISTD(ENQLISTL),ENQLIST  Copy model ENQ parm list
         ENQ   ,MF=(E,ENQLISTD)    ENQ the CSCB chain

***********************************************************************
*                                                                     *
*               Add new CIB to CSCB CIB Chain                         *
*                                                                     *
***********************************************************************
         MVC   EXTLSTD(EXTLSTL),EXTLST Copy model EXTRACT parm list
         LA    R0,CSCL             Point to EXTRACT answer area
         EXTRACT (R0),'S',         Get address of Cmd Scheduler        +
               MF=(E,EXTLSTD)        Communications area.
         LA    R1,*+4+4+2          Switch to 31-bit mode
         O     R1,=XL4'80000000'   (same)
         BSM   0,R1                (same)
         L     R1,CSCL             Point to Cmd Sched comm area
         L     R0,4(,R1)           Load address of current CIB
         ST    R10,4(,R1)          Chain new CIB in front of the
         ST    R0,CIBNEXT            current CIB.
         LA    R1,*+4+2            Switch to 24-bit mode
         BSM   0,R1                (same)
         DROP  R10             *** Drop CIB DSECT

***********************************************************************
*                                                                     *
*               Release the CSCB Chain                                *
*                                                                     *
***********************************************************************
         MVC   DEQLISTD(DEQLISTL),DEQLIST Copy model DEQ parm list
         DEQ   ,MF=(E,DEQLISTD)    DEQ the CSCB chain

***********************************************************************
*                                                                     *
*               Module Epilog                                         *
*                                                                     *
***********************************************************************
         IC    R2,KEYSAVE          Restore original PSW key
         SPKA  0(R2)               (same)

GOOUT    DS    0H
         CLI   DSRTRC,255          ESTAE active ?
         BE    ESTANO              Branch if not
*                                *************************
         ESTAE 0                 * Remove Error Recovery *
*                                *************************

ESTANO   DS    0H              <-- Abends recover at this point
         LR    R1,R13              Load working storage address
         L     R13,4(,R13)         Load caller's save area address
         FREEMAIN R,               Release the working storage         +
               LV=VSTDATLN,        (same)                              +
               A=(R1)              (same)
         XR    R15,R15             Set return code = 0
*        ST    R15,8(,R13)         Remove chain ptr from caller's save
         RETURN (14,12),RC=(15)    Return
         EJECT
***********************************************************************
*                                                                     *
*               Constants                                             *
*                                                                     *
***********************************************************************
         CNOP  0,4
VBLANKS  DC    CL8' '              Blanks for padding
ICIBDLEN DC    AL2(L'CIBDATA)      Length of STC communication CIB
*                                    (minimum allowed data length).
STCCIBLN EQU   (CIBDATA-CIBNEXT)+L'CIBDATA  Length of STC communication
*                                    CIB is length of fixed portion
*                                    plus length of data portion
PROMPT   DC    C'===>IKJEFLD1 - ENTER SUBSYSTEM NAME, ''NONE'', OR HIT C
               ENTER <==='
         LTORG ,

ENQLIST  ENQ   (SYSNAME,           Model ENQ parameter list            +
               RNAME,              (same)                              +
               E,                  (same)                              +
               3,                  (same)                              +
               SYSTEM),            (same)                              +
               RET=HAVE,           (same)                              +
               MF=L                (same)
ENQLISTL EQU   *-ENQLIST           (same)

DEQLIST  DEQ   (SYSNAME,           Model DEQ parameter list            +
               RNAME,              (same)                              +
               3,                  (same)                              +
               SYSTEM),            (same)                              +
               RET=HAVE,           (same)                              +
               MF=L                (same)
DEQLISTL EQU   *-DEQLIST           (same)

ESTALST  ESTAE ,,,                 Model ESTAE parameter list          +
               ASYNCH=YES,         (same)                              +
               PURGE=NONE,         (same)                              +
               MF=L                (same)
ESTALSTL EQU   *-ESTALST           (same)

EXTLST   EXTRACT 0,                Model EXTRACT parameter list        +
               'S',                (same)                              +
               FIELDS=(COMM),      (same)                              +
               MF=L                (same)
EXTLSTL  EQU   *-EXTLST            (same)

SYSNAME  DC    C'SYSIEFSD'         Major name for CSCB serialization
RNAME    DC    C'Q10'              Minor name for CSCB serialization

         EJECT
***********************************************************************
*                                                                     *
*        ESTAE Recovery Routine                                       *
*                                                                     *
***********************************************************************
ESTAE    DS    0H
         USING ESTAE,R15       *** Synchronize base register
         CH    0,=H'12'            SDWA created ?
         BE    ESTAE1              Branch if not (use registers only)
         USING SDWA,R1         *** Synchronize SDWA DSECT
         L     R2,SDWAPARM         Load address of dynamic work area
         MVC   DSABEND-DSSA(4,R2),SDWAABCC Copy abend code
         MVC   DSPSW-DSSA(8,R2),SDWAEC1    Copy abend PSW1
         SR    R0,R0                       Check for address in PSW1
         CLM   R0,7,SDWAADD1               (same)
         BNE   *+4+6                       Branch if PSW1 filled in
         MVC   DSPSW-DSSA(8,R2),SDWAEC2    Copy abend PSW2
         MVC   DSGPR-DSSA(4*16,R2),SDWAGRSV Copy the GPRs
         IC    R0,DSRTRC-DSSA(R2)          Update the recursion count
         AH    R0,ESTAEH1                  (same)
         STC   R0,DSRTRC-DSSA(R2)          (same)
         CLI   DSRTRC-DSSA(R2),RETRYCT     Too many abends ?
         BH    ESTAE2                      Branch if yes
         SETRP DUMP=NO,            Request abend retry                 +
               RC=4,               (same)                              +
               RETADDR=ESTER,      (same)                              +
               FRESDWA=YES         (same)
         BR    R14                 Return to RTM

ESTAE2   DS    0H
         SETRP RC=0                Request percolation
         BR    R14                 Return to RTM

ESTAE1   DS    0H
         ST    R1,DSABEND-DSSA(R2) Save abend code
         MVI   DSPSW-DSSA(R2),C'?' Indicate unknown information
         MVC   DSPSW-DSSA+1(7+4*16,R2),DSPSW-DSSA(R2)    (same)
         SR    R0,R0               Update the recursion count
         IC    R0,DSRTRC-DSSA(R2)  (same)
         AH    R0,ESTAEH1          (same)
         STC   R0,DSRTRC-DSSA(R2)  (same)
         LA    R0,ESTER            Load retry address
         CLI   DSRTRC-DSSA(R2),RETRYCT Too many abends ?
         BH    ESTAE3              Branch if yes
         LA    R15,4               Indicate retry
         BR    R14                 Return to RTM
ESTAE3   DS    0H
         SLR   R15,R15             Request percolation
         BR    R14                 Return to RTM
ESTAEH1  DC    H'1'
         DROP  R15             *** Drop base register

***********************************************************************
*                                                                     *
*        ESTAE Retry Routine                                          *
*                                                                     *
***********************************************************************
ESTER    DS    0H
         LR    RBASE,R15           Load base register
         USING ESTER,RBASE     *** Synchronize base register
         LR    R13,R1              Load dynamic storage address
         USING DSSA,R13        *** Synchronize DSSA DSECT

* Build Error Message
         MVC   ESTEM(ESTEHE-ESTEH),ESTEH Set message model
         UNPK  DSEDW(9),DSABEND(5) Convert abend code to hex chars
         TR    DSEDW(8),ESTHEX-X'EF' (same)
         MVC   ESTEM+4+19(8),DSEDW Copy abend code to message
         MVC   ESTEM+4+35(8),DSPSW Initialize PSW area in msg
         MVC   ESTEM+4+44(8),DSPSW (same)
         CLI   DSPSW,C'?'          PSW available ?
         BE    ESTE1               Branch if not
         UNPK  DSEDW(9),DSPSW(5)   Convert PSW bytes 0-3 to hex chars
         TR    DSEDW(8),ESTHEX-X'EF' (same)
         MVC   ESTEM+4+35(8),DSEDW Copy PSW bytes 0-3 to message
         UNPK  DSEDW(9),DSPSW+4(5) Convert PSW bytes 4-7 to hex chars
         TR    DSEDW(8),ESTHEX-X'EF' (same)
         MVC   ESTEM+4+44(8),DSEDW Copy PSW bytes 4-7 to message
ESTE1    DS    0H
         USING PSA,R0          *** Synchronize PSA DSECT
         L     R1,PSAAOLD          Load ASCB address
         USING ASCB,R1         *** Synchronize ASCB DSECT
         MVC   ESTEM+4+5(8),=CL8'STARTING' Assume STARTING
         ICM   R15,15,ASCBJBNI     Load job name address
         BNZ   ESTEB               Branch if available
         ICM   R15,15,ASCBJBNS     Load Start/Mnt/Logon name address
         MVI   ESTEM+4+3,C'T'      Assume TSO user
         ICM   R0,15,ASCBTSB       Load TSB address
         BNZ   ESTEB               Branch if not TSO user
         MVI   ESTEM+4+3,C'S'      Must be STC
         DROP  R1              *** Drop ASCB DSECT
ESTEB    DS    0H
         LTR   R15,R15             Name located ?
         BZ    *+4+6               Branch if not
         MVC   ESTEM+4+5(8),0(R15) Set true name into message
         LTR   R0,R0               Is this TSO ?
         BNZ   ESTE9               Branch if yes
         WTO   MF=(E,ESTEM)        Issue message via WTO
         B     ESTE8               Continue
ESTE9    DS    0H
         LA    R1,ESTEM+4          Issue message via TPUT
         LH    R0,ESTEM            (same)
         SH    R0,=H'4'            (same)
         TPUT  (1),(0)             (same)

* Build Register Message
ESTE8    DS    0H
         CLI   DSGPR,C'?'          Registers known ?
         BE    ESTE3               Branch if not
         LA    R14,ESTEM+4         Point to target area
         LH    R1,ESTEM            Loop....
         SH    R1,=H'6'             to.......
         MVI   0(R14),C' '           display...
         MVC   1(0,R14),0(R14)        registers..
         EX    R1,*-6                  0 -15
         MVC   0(6,R14),=CL6'GR 0-F'   (same)
         LA    R15,DSGPR               (same)
ESTE2    DS    0H
         UNPK  08(9,R14),00(5,R15)  Edit and......
         TR    08(8,R14),ESTHEX-X'EF' display four..
         MVI   16(R14),C' '             registers....
         UNPK  17(9,R14),04(5,R15)        on a line.
         TR    17(8,R14),ESTHEX-X'EF'     (same)
         MVI   25(R14),C' '               (same)
         UNPK  26(9,R14),08(5,R15)        (same)
         TR    26(8,R14),ESTHEX-X'EF'     (same)
         MVI   34(R14),C' '               (same)
         UNPK  35(9,R14),12(5,R15)        (same)
         TR    35(8,R14),ESTHEX-X'EF'     (same)
         MVI   43(R14),C' '               (same)
         ST    R15,DSEFW                  (same)
         L     R1,PSAAOLD          Load ASCB address
         USING ASCB,R1         *** Synchronize ASCB DSECT
         ICM   R0,15,ASCBTSB       Load TSB address
         DROP  R1              *** Drop ASCB DSECT
         BNZ   ESTE7               Branch if TSO user
         WTO   MF=(E,ESTEM)        Issue message via WTO
         B     ESTE6               Continue
ESTE7    DS    0H
         LA    R1,ESTEM+4          Issue message via TPUT
         LH    R0,ESTEM            (same)
         SH    R0,=H'4'            (same)
         TPUT  (1),(0)             (same)
ESTE6    DS    0H
         LA    14,ESTEM+4
         MVI   0(R14),C' '
         MVC   1(8,R14),0(R14)
         L     15,DSEFW
         LA    R15,4*4(,R15)
         LA    0,DSGPR+(4*16)
         CR    R15,0               All registers formatted ?
         BL    ESTE2               Branch if not
ESTE3    DS    0H
         L     RBASE,DSBASE-DSSA(R13) Load base register
         L     15,DSRETR           Load continuation address
         BR    R15                 Continue
         DROP  RBASE,R13       *** Drop base registers
*
*               0    1    1    2    2    3    3    4    4    5    5 *
*          0....5....0....5....0....5....0....5....0....5....0....5 *
*
ESTEH WTO '==>J/JJJJJJJJ - CC=XXXXXXXX AB-PSW=XXXXXXXX XXXXXXXX IN=&M',*
               MF=L
ESTEHE  EQU *
ESTHEX  DC  C' 0123456789ABCDEF'
*---------------------------------------*
         LTORG
         TITLE 'IKJEFLD1--Working Storage'
VSTWORK  DSECT
DSSA     DS    18F
VSTWORKE DS    0F
EXTLSTD  EXTRACT 0,'S',FIELDS=(COMM),MF=L
ENQLISTD ENQ   (SYSNAME,RNAME,E,3,SYSTEM),RET=HAVE,MF=L
DEQLISTD DEQ   (SYSNAME,RNAME,3,SYSTEM),RET=HAVE,MF=L
ESTALSTD ESTAE  ,,,ASYNCH=YES,PURGE=NONE,MF=L
ESTEM WTO '==>J/JJJJJJJJ - CC=XXXXXXXX AB-PSW=XXXXXXXX XXXXXXXX IN=&M',*
               MF=L
CSCL     DS    F                   Address of CMD SCHED COMM list
*                                    (ECB,CIB,TOKEN)
SSNAME   DS    CL4                 Subsystem name
USERID   DS    CL7                 User ID
KEYSAVE  DS    XL1                 PSW key save

DSBASE   DS    F                   ESTAE base save area
DSRETR   DS    A                   ESTAE retry address
DSABEND  DS    F                   ESTAE abend code save area
DSPSW    DS    XL8                 ESTAE abend PSW save area
DSGPR    DS    16F                 ESTAE abend register save area
DSRTRC   DS    XL1                 ESTAE retry counter
DSEDW    DS    D                   ESTAE retry work field
         DS    H                   ESTAE retry work field
DSEHW    DS    H                   ESTAE retry work field
DSEFW    DS    F                   ESTAE retry work field
         DS    X                   ESTAE retry work field

         DS    0D                  Align on doubleword boundary
VSTDATLN EQU   *-VSTWORK           Length of working storage
VSTDLTH  EQU   *-VSTWORKE          Length of working storage
         TITLE 'IKJEFLD1--ASCB Map'
         IHAASCB
         TITLE 'IKJEFLD1--PSA Map'
         IHAPSA ,
         TITLE 'IKJEFLD1--CSCB Map'
VSTRCHAN DSECT
         IEECHAIN
         TITLE 'IKJEFLD1--Command Input Buffer'
VSTARCIB DSECT
         IEZCIB
         TITLE 'IKJEFLD1--SDWA Map'
         IHASDWA
         END   IKJEFLD1
